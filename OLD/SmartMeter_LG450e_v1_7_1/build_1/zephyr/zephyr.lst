
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	200035c0 	.word	0x200035c0
   4:	00006ca1 	.word	0x00006ca1
   8:	0001c7e1 	.word	0x0001c7e1
   c:	00006c75 	.word	0x00006c75
  10:	00006c75 	.word	0x00006c75
  14:	00006c75 	.word	0x00006c75
  18:	00006c75 	.word	0x00006c75
	...
  2c:	000066d5 	.word	0x000066d5
  30:	00006c75 	.word	0x00006c75
  34:	00000000 	.word	0x00000000
  38:	00006681 	.word	0x00006681
  3c:	0001d09f 	.word	0x0001d09f

00000040 <_irq_vector_table>:
  40:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  50:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  60:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  70:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  80:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  90:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  a0:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  b0:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  c0:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  d0:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  e0:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..
  f0:	0000678d 0000678d 0000678d 0000678d     .g...g...g...g..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9a>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__data_size+0x25>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__data_size+0x43>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__data_size+0x57>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__data_size+0x85>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__data_size+0xa3>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__data_size+0xb9>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__data_size+0xf7>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__data_size+0xdf>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__data_size+0xdf>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__data_size+0x5f>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__data_size+0x10b>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__data_size+0x10b>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__data_size+0x10b>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__data_size+0xb9>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__data_size+0xb9>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2iz>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     944:	d215      	bcs.n	972 <__aeabi_d2iz+0x36>
     946:	d511      	bpl.n	96c <__aeabi_d2iz+0x30>
     948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     94c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     950:	d912      	bls.n	978 <__aeabi_d2iz+0x3c>
     952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     95a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     95e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     962:	fa23 f002 	lsr.w	r0, r3, r2
     966:	bf18      	it	ne
     968:	4240      	negne	r0, r0
     96a:	4770      	bx	lr
     96c:	f04f 0000 	mov.w	r0, #0
     970:	4770      	bx	lr
     972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     976:	d105      	bne.n	984 <__aeabi_d2iz+0x48>
     978:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     97c:	bf08      	it	eq
     97e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     982:	4770      	bx	lr
     984:	f04f 0000 	mov.w	r0, #0
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <__aeabi_d2uiz>:
     98c:	004a      	lsls	r2, r1, #1
     98e:	d211      	bcs.n	9b4 <__aeabi_d2uiz+0x28>
     990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     994:	d211      	bcs.n	9ba <__aeabi_d2uiz+0x2e>
     996:	d50d      	bpl.n	9b4 <__aeabi_d2uiz+0x28>
     998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     99c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9a0:	d40e      	bmi.n	9c0 <__aeabi_d2uiz+0x34>
     9a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ae:	fa23 f002 	lsr.w	r0, r3, r2
     9b2:	4770      	bx	lr
     9b4:	f04f 0000 	mov.w	r0, #0
     9b8:	4770      	bx	lr
     9ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9be:	d102      	bne.n	9c6 <__aeabi_d2uiz+0x3a>
     9c0:	f04f 30ff 	mov.w	r0, #4294967295
     9c4:	4770      	bx	lr
     9c6:	f04f 0000 	mov.w	r0, #0
     9ca:	4770      	bx	lr

000009cc <__aeabi_f2iz>:
     9cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
     9d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     9d4:	d30f      	bcc.n	9f6 <__aeabi_f2iz+0x2a>
     9d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
     9da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     9de:	d90d      	bls.n	9fc <__aeabi_f2iz+0x30>
     9e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
     9e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     9ec:	fa23 f002 	lsr.w	r0, r3, r2
     9f0:	bf18      	it	ne
     9f2:	4240      	negne	r0, r0
     9f4:	4770      	bx	lr
     9f6:	f04f 0000 	mov.w	r0, #0
     9fa:	4770      	bx	lr
     9fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
     a00:	d101      	bne.n	a06 <__aeabi_f2iz+0x3a>
     a02:	0242      	lsls	r2, r0, #9
     a04:	d105      	bne.n	a12 <__aeabi_f2iz+0x46>
     a06:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     a0a:	bf08      	it	eq
     a0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a10:	4770      	bx	lr
     a12:	f04f 0000 	mov.w	r0, #0
     a16:	4770      	bx	lr

00000a18 <__aeabi_ldivmod>:
     a18:	b97b      	cbnz	r3, a3a <__aeabi_ldivmod+0x22>
     a1a:	b972      	cbnz	r2, a3a <__aeabi_ldivmod+0x22>
     a1c:	2900      	cmp	r1, #0
     a1e:	bfbe      	ittt	lt
     a20:	2000      	movlt	r0, #0
     a22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     a26:	e006      	blt.n	a36 <__aeabi_ldivmod+0x1e>
     a28:	bf08      	it	eq
     a2a:	2800      	cmpeq	r0, #0
     a2c:	bf1c      	itt	ne
     a2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     a32:	f04f 30ff 	movne.w	r0, #4294967295
     a36:	f000 b9b7 	b.w	da8 <__aeabi_idiv0>
     a3a:	f1ad 0c08 	sub.w	ip, sp, #8
     a3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a42:	2900      	cmp	r1, #0
     a44:	db09      	blt.n	a5a <__aeabi_ldivmod+0x42>
     a46:	2b00      	cmp	r3, #0
     a48:	db1a      	blt.n	a80 <__aeabi_ldivmod+0x68>
     a4a:	f000 f84d 	bl	ae8 <__udivmoddi4>
     a4e:	f8dd e004 	ldr.w	lr, [sp, #4]
     a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a56:	b004      	add	sp, #16
     a58:	4770      	bx	lr
     a5a:	4240      	negs	r0, r0
     a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a60:	2b00      	cmp	r3, #0
     a62:	db1b      	blt.n	a9c <__aeabi_ldivmod+0x84>
     a64:	f000 f840 	bl	ae8 <__udivmoddi4>
     a68:	f8dd e004 	ldr.w	lr, [sp, #4]
     a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a70:	b004      	add	sp, #16
     a72:	4240      	negs	r0, r0
     a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a78:	4252      	negs	r2, r2
     a7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a7e:	4770      	bx	lr
     a80:	4252      	negs	r2, r2
     a82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a86:	f000 f82f 	bl	ae8 <__udivmoddi4>
     a8a:	f8dd e004 	ldr.w	lr, [sp, #4]
     a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a92:	b004      	add	sp, #16
     a94:	4240      	negs	r0, r0
     a96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a9a:	4770      	bx	lr
     a9c:	4252      	negs	r2, r2
     a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     aa2:	f000 f821 	bl	ae8 <__udivmoddi4>
     aa6:	f8dd e004 	ldr.w	lr, [sp, #4]
     aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     aae:	b004      	add	sp, #16
     ab0:	4252      	negs	r2, r2
     ab2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ab6:	4770      	bx	lr

00000ab8 <__aeabi_uldivmod>:
     ab8:	b953      	cbnz	r3, ad0 <__aeabi_uldivmod+0x18>
     aba:	b94a      	cbnz	r2, ad0 <__aeabi_uldivmod+0x18>
     abc:	2900      	cmp	r1, #0
     abe:	bf08      	it	eq
     ac0:	2800      	cmpeq	r0, #0
     ac2:	bf1c      	itt	ne
     ac4:	f04f 31ff 	movne.w	r1, #4294967295
     ac8:	f04f 30ff 	movne.w	r0, #4294967295
     acc:	f000 b96c 	b.w	da8 <__aeabi_idiv0>
     ad0:	f1ad 0c08 	sub.w	ip, sp, #8
     ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     ad8:	f000 f806 	bl	ae8 <__udivmoddi4>
     adc:	f8dd e004 	ldr.w	lr, [sp, #4]
     ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ae4:	b004      	add	sp, #16
     ae6:	4770      	bx	lr

00000ae8 <__udivmoddi4>:
     ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     aec:	9e08      	ldr	r6, [sp, #32]
     aee:	460d      	mov	r5, r1
     af0:	4604      	mov	r4, r0
     af2:	468e      	mov	lr, r1
     af4:	2b00      	cmp	r3, #0
     af6:	f040 8082 	bne.w	bfe <__udivmoddi4+0x116>
     afa:	428a      	cmp	r2, r1
     afc:	4617      	mov	r7, r2
     afe:	d946      	bls.n	b8e <__udivmoddi4+0xa6>
     b00:	fab2 f282 	clz	r2, r2
     b04:	b14a      	cbz	r2, b1a <__udivmoddi4+0x32>
     b06:	f1c2 0120 	rsb	r1, r2, #32
     b0a:	fa05 f302 	lsl.w	r3, r5, r2
     b0e:	fa20 f101 	lsr.w	r1, r0, r1
     b12:	4097      	lsls	r7, r2
     b14:	ea41 0e03 	orr.w	lr, r1, r3
     b18:	4094      	lsls	r4, r2
     b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     b1e:	0c23      	lsrs	r3, r4, #16
     b20:	fbbe fcf8 	udiv	ip, lr, r8
     b24:	b2b9      	uxth	r1, r7
     b26:	fb08 ee1c 	mls	lr, r8, ip, lr
     b2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     b2e:	fb0c f001 	mul.w	r0, ip, r1
     b32:	4298      	cmp	r0, r3
     b34:	d90a      	bls.n	b4c <__udivmoddi4+0x64>
     b36:	18fb      	adds	r3, r7, r3
     b38:	f10c 35ff 	add.w	r5, ip, #4294967295
     b3c:	f080 8116 	bcs.w	d6c <__udivmoddi4+0x284>
     b40:	4298      	cmp	r0, r3
     b42:	f240 8113 	bls.w	d6c <__udivmoddi4+0x284>
     b46:	f1ac 0c02 	sub.w	ip, ip, #2
     b4a:	443b      	add	r3, r7
     b4c:	1a1b      	subs	r3, r3, r0
     b4e:	b2a4      	uxth	r4, r4
     b50:	fbb3 f0f8 	udiv	r0, r3, r8
     b54:	fb08 3310 	mls	r3, r8, r0, r3
     b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b5c:	fb00 f101 	mul.w	r1, r0, r1
     b60:	42a1      	cmp	r1, r4
     b62:	d909      	bls.n	b78 <__udivmoddi4+0x90>
     b64:	193c      	adds	r4, r7, r4
     b66:	f100 33ff 	add.w	r3, r0, #4294967295
     b6a:	f080 8101 	bcs.w	d70 <__udivmoddi4+0x288>
     b6e:	42a1      	cmp	r1, r4
     b70:	f240 80fe 	bls.w	d70 <__udivmoddi4+0x288>
     b74:	3802      	subs	r0, #2
     b76:	443c      	add	r4, r7
     b78:	1a64      	subs	r4, r4, r1
     b7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b7e:	2100      	movs	r1, #0
     b80:	b11e      	cbz	r6, b8a <__udivmoddi4+0xa2>
     b82:	40d4      	lsrs	r4, r2
     b84:	2300      	movs	r3, #0
     b86:	e9c6 4300 	strd	r4, r3, [r6]
     b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b8e:	b902      	cbnz	r2, b92 <__udivmoddi4+0xaa>
     b90:	deff      	udf	#255	; 0xff
     b92:	fab2 f282 	clz	r2, r2
     b96:	2a00      	cmp	r2, #0
     b98:	d14f      	bne.n	c3a <__udivmoddi4+0x152>
     b9a:	1bcb      	subs	r3, r1, r7
     b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ba0:	fa1f f887 	uxth.w	r8, r7
     ba4:	2101      	movs	r1, #1
     ba6:	fbb3 fcfe 	udiv	ip, r3, lr
     baa:	0c25      	lsrs	r5, r4, #16
     bac:	fb0e 331c 	mls	r3, lr, ip, r3
     bb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     bb4:	fb08 f30c 	mul.w	r3, r8, ip
     bb8:	42ab      	cmp	r3, r5
     bba:	d907      	bls.n	bcc <__udivmoddi4+0xe4>
     bbc:	197d      	adds	r5, r7, r5
     bbe:	f10c 30ff 	add.w	r0, ip, #4294967295
     bc2:	d202      	bcs.n	bca <__udivmoddi4+0xe2>
     bc4:	42ab      	cmp	r3, r5
     bc6:	f200 80e7 	bhi.w	d98 <__udivmoddi4+0x2b0>
     bca:	4684      	mov	ip, r0
     bcc:	1aed      	subs	r5, r5, r3
     bce:	b2a3      	uxth	r3, r4
     bd0:	fbb5 f0fe 	udiv	r0, r5, lr
     bd4:	fb0e 5510 	mls	r5, lr, r0, r5
     bd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     bdc:	fb08 f800 	mul.w	r8, r8, r0
     be0:	45a0      	cmp	r8, r4
     be2:	d907      	bls.n	bf4 <__udivmoddi4+0x10c>
     be4:	193c      	adds	r4, r7, r4
     be6:	f100 33ff 	add.w	r3, r0, #4294967295
     bea:	d202      	bcs.n	bf2 <__udivmoddi4+0x10a>
     bec:	45a0      	cmp	r8, r4
     bee:	f200 80d7 	bhi.w	da0 <__udivmoddi4+0x2b8>
     bf2:	4618      	mov	r0, r3
     bf4:	eba4 0408 	sub.w	r4, r4, r8
     bf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     bfc:	e7c0      	b.n	b80 <__udivmoddi4+0x98>
     bfe:	428b      	cmp	r3, r1
     c00:	d908      	bls.n	c14 <__udivmoddi4+0x12c>
     c02:	2e00      	cmp	r6, #0
     c04:	f000 80af 	beq.w	d66 <__udivmoddi4+0x27e>
     c08:	2100      	movs	r1, #0
     c0a:	e9c6 0500 	strd	r0, r5, [r6]
     c0e:	4608      	mov	r0, r1
     c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c14:	fab3 f183 	clz	r1, r3
     c18:	2900      	cmp	r1, #0
     c1a:	d14b      	bne.n	cb4 <__udivmoddi4+0x1cc>
     c1c:	42ab      	cmp	r3, r5
     c1e:	d302      	bcc.n	c26 <__udivmoddi4+0x13e>
     c20:	4282      	cmp	r2, r0
     c22:	f200 80b7 	bhi.w	d94 <__udivmoddi4+0x2ac>
     c26:	1a84      	subs	r4, r0, r2
     c28:	eb65 0303 	sbc.w	r3, r5, r3
     c2c:	2001      	movs	r0, #1
     c2e:	469e      	mov	lr, r3
     c30:	2e00      	cmp	r6, #0
     c32:	d0aa      	beq.n	b8a <__udivmoddi4+0xa2>
     c34:	e9c6 4e00 	strd	r4, lr, [r6]
     c38:	e7a7      	b.n	b8a <__udivmoddi4+0xa2>
     c3a:	f1c2 0c20 	rsb	ip, r2, #32
     c3e:	fa01 f302 	lsl.w	r3, r1, r2
     c42:	4097      	lsls	r7, r2
     c44:	fa20 f00c 	lsr.w	r0, r0, ip
     c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     c4c:	fa21 fc0c 	lsr.w	ip, r1, ip
     c50:	4318      	orrs	r0, r3
     c52:	fbbc f1fe 	udiv	r1, ip, lr
     c56:	0c05      	lsrs	r5, r0, #16
     c58:	fb0e cc11 	mls	ip, lr, r1, ip
     c5c:	fa1f f887 	uxth.w	r8, r7
     c60:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     c64:	fb01 f308 	mul.w	r3, r1, r8
     c68:	42ab      	cmp	r3, r5
     c6a:	fa04 f402 	lsl.w	r4, r4, r2
     c6e:	d909      	bls.n	c84 <__udivmoddi4+0x19c>
     c70:	197d      	adds	r5, r7, r5
     c72:	f101 3cff 	add.w	ip, r1, #4294967295
     c76:	f080 808b 	bcs.w	d90 <__udivmoddi4+0x2a8>
     c7a:	42ab      	cmp	r3, r5
     c7c:	f240 8088 	bls.w	d90 <__udivmoddi4+0x2a8>
     c80:	3902      	subs	r1, #2
     c82:	443d      	add	r5, r7
     c84:	1aeb      	subs	r3, r5, r3
     c86:	b285      	uxth	r5, r0
     c88:	fbb3 f0fe 	udiv	r0, r3, lr
     c8c:	fb0e 3310 	mls	r3, lr, r0, r3
     c90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     c94:	fb00 f308 	mul.w	r3, r0, r8
     c98:	42ab      	cmp	r3, r5
     c9a:	d907      	bls.n	cac <__udivmoddi4+0x1c4>
     c9c:	197d      	adds	r5, r7, r5
     c9e:	f100 3cff 	add.w	ip, r0, #4294967295
     ca2:	d271      	bcs.n	d88 <__udivmoddi4+0x2a0>
     ca4:	42ab      	cmp	r3, r5
     ca6:	d96f      	bls.n	d88 <__udivmoddi4+0x2a0>
     ca8:	3802      	subs	r0, #2
     caa:	443d      	add	r5, r7
     cac:	1aeb      	subs	r3, r5, r3
     cae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     cb2:	e778      	b.n	ba6 <__udivmoddi4+0xbe>
     cb4:	f1c1 0c20 	rsb	ip, r1, #32
     cb8:	408b      	lsls	r3, r1
     cba:	fa22 f70c 	lsr.w	r7, r2, ip
     cbe:	431f      	orrs	r7, r3
     cc0:	fa20 f40c 	lsr.w	r4, r0, ip
     cc4:	fa05 f301 	lsl.w	r3, r5, r1
     cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ccc:	fa25 f50c 	lsr.w	r5, r5, ip
     cd0:	431c      	orrs	r4, r3
     cd2:	0c23      	lsrs	r3, r4, #16
     cd4:	fbb5 f9fe 	udiv	r9, r5, lr
     cd8:	fa1f f887 	uxth.w	r8, r7
     cdc:	fb0e 5519 	mls	r5, lr, r9, r5
     ce0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     ce4:	fb09 fa08 	mul.w	sl, r9, r8
     ce8:	45aa      	cmp	sl, r5
     cea:	fa02 f201 	lsl.w	r2, r2, r1
     cee:	fa00 f301 	lsl.w	r3, r0, r1
     cf2:	d908      	bls.n	d06 <__udivmoddi4+0x21e>
     cf4:	197d      	adds	r5, r7, r5
     cf6:	f109 30ff 	add.w	r0, r9, #4294967295
     cfa:	d247      	bcs.n	d8c <__udivmoddi4+0x2a4>
     cfc:	45aa      	cmp	sl, r5
     cfe:	d945      	bls.n	d8c <__udivmoddi4+0x2a4>
     d00:	f1a9 0902 	sub.w	r9, r9, #2
     d04:	443d      	add	r5, r7
     d06:	eba5 050a 	sub.w	r5, r5, sl
     d0a:	b2a4      	uxth	r4, r4
     d0c:	fbb5 f0fe 	udiv	r0, r5, lr
     d10:	fb0e 5510 	mls	r5, lr, r0, r5
     d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     d18:	fb00 f808 	mul.w	r8, r0, r8
     d1c:	45a0      	cmp	r8, r4
     d1e:	d907      	bls.n	d30 <__udivmoddi4+0x248>
     d20:	193c      	adds	r4, r7, r4
     d22:	f100 35ff 	add.w	r5, r0, #4294967295
     d26:	d22d      	bcs.n	d84 <__udivmoddi4+0x29c>
     d28:	45a0      	cmp	r8, r4
     d2a:	d92b      	bls.n	d84 <__udivmoddi4+0x29c>
     d2c:	3802      	subs	r0, #2
     d2e:	443c      	add	r4, r7
     d30:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     d34:	eba4 0408 	sub.w	r4, r4, r8
     d38:	fba0 8902 	umull	r8, r9, r0, r2
     d3c:	454c      	cmp	r4, r9
     d3e:	46c6      	mov	lr, r8
     d40:	464d      	mov	r5, r9
     d42:	d319      	bcc.n	d78 <__udivmoddi4+0x290>
     d44:	d016      	beq.n	d74 <__udivmoddi4+0x28c>
     d46:	b15e      	cbz	r6, d60 <__udivmoddi4+0x278>
     d48:	ebb3 020e 	subs.w	r2, r3, lr
     d4c:	eb64 0405 	sbc.w	r4, r4, r5
     d50:	fa04 fc0c 	lsl.w	ip, r4, ip
     d54:	40ca      	lsrs	r2, r1
     d56:	ea4c 0202 	orr.w	r2, ip, r2
     d5a:	40cc      	lsrs	r4, r1
     d5c:	e9c6 2400 	strd	r2, r4, [r6]
     d60:	2100      	movs	r1, #0
     d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d66:	4631      	mov	r1, r6
     d68:	4630      	mov	r0, r6
     d6a:	e70e      	b.n	b8a <__udivmoddi4+0xa2>
     d6c:	46ac      	mov	ip, r5
     d6e:	e6ed      	b.n	b4c <__udivmoddi4+0x64>
     d70:	4618      	mov	r0, r3
     d72:	e701      	b.n	b78 <__udivmoddi4+0x90>
     d74:	4543      	cmp	r3, r8
     d76:	d2e6      	bcs.n	d46 <__udivmoddi4+0x25e>
     d78:	ebb8 0e02 	subs.w	lr, r8, r2
     d7c:	eb69 0507 	sbc.w	r5, r9, r7
     d80:	3801      	subs	r0, #1
     d82:	e7e0      	b.n	d46 <__udivmoddi4+0x25e>
     d84:	4628      	mov	r0, r5
     d86:	e7d3      	b.n	d30 <__udivmoddi4+0x248>
     d88:	4660      	mov	r0, ip
     d8a:	e78f      	b.n	cac <__udivmoddi4+0x1c4>
     d8c:	4681      	mov	r9, r0
     d8e:	e7ba      	b.n	d06 <__udivmoddi4+0x21e>
     d90:	4661      	mov	r1, ip
     d92:	e777      	b.n	c84 <__udivmoddi4+0x19c>
     d94:	4608      	mov	r0, r1
     d96:	e74b      	b.n	c30 <__udivmoddi4+0x148>
     d98:	f1ac 0c02 	sub.w	ip, ip, #2
     d9c:	443d      	add	r5, r7
     d9e:	e715      	b.n	bcc <__udivmoddi4+0xe4>
     da0:	3802      	subs	r0, #2
     da2:	443c      	add	r4, r7
     da4:	e726      	b.n	bf4 <__udivmoddi4+0x10c>
     da6:	bf00      	nop

00000da8 <__aeabi_idiv0>:
     da8:	4770      	bx	lr
     daa:	bf00      	nop

00000dac <strcmp>:
     dac:	f810 2b01 	ldrb.w	r2, [r0], #1
     db0:	f811 3b01 	ldrb.w	r3, [r1], #1
     db4:	2a01      	cmp	r2, #1
     db6:	bf28      	it	cs
     db8:	429a      	cmpcs	r2, r3
     dba:	d0f7      	beq.n	dac <strcmp>
     dbc:	1ad0      	subs	r0, r2, r3
     dbe:	4770      	bx	lr

00000dc0 <strlen>:
     dc0:	4603      	mov	r3, r0
     dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
     dc6:	2a00      	cmp	r2, #0
     dc8:	d1fb      	bne.n	dc2 <strlen+0x2>
     dca:	1a18      	subs	r0, r3, r0
     dcc:	3801      	subs	r0, #1
     dce:	4770      	bx	lr

00000dd0 <comparator_handler>:

#define COMP_LPCOMP_IRQn	19

static void comparator_handler (nrf_comp_event_t event)
{
	printk("Comp event");
     dd0:	4801      	ldr	r0, [pc, #4]	; (dd8 <comparator_handler+0x8>)
     dd2:	f01a bf12 	b.w	1bbfa <printk>
     dd6:	bf00      	nop
     dd8:	0001eb64 	.word	0x0001eb64

00000ddc <lora_config.constprop.0>:
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
     ddc:	6883      	ldr	r3, [r0, #8]
     dde:	4901      	ldr	r1, [pc, #4]	; (de4 <lora_config.constprop.0+0x8>)
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	4718      	bx	r3
     de4:	20000594 	.word	0x20000594

00000de8 <init_mbus_comp_gpiote>:
}

void init_mbus_comp_gpiote(){
     de8:	b570      	push	{r4, r5, r6, lr}
     dea:	b086      	sub	sp, #24
  /* Comp Init */
  nrfx_comp_config_t  comp_config = NRFX_COMP_DEFAULT_CONFIG(INPUT_A0);
     dec:	2400      	movs	r4, #0
     dee:	2302      	movs	r3, #2
     df0:	9403      	str	r4, [sp, #12]
     df2:	f88d 3013 	strb.w	r3, [sp, #19]
     df6:	f8cd 400f 	str.w	r4, [sp, #15]
  comp_config.reference = NRF_COMP_REF_Int2V4;
     dfa:	f88d 300c 	strb.w	r3, [sp, #12]
  nrfx_comp_config_t  comp_config = NRFX_COMP_DEFAULT_CONFIG(INPUT_A0);
     dfe:	f88d 3011 	strb.w	r3, [sp, #17]
  nrf_comp_th_t const thres = {
    .th_down = NRFX_VOLTAGE_THRESHOLD_TO_INT(2.0, 2.4),
    .th_up = NRFX_VOLTAGE_THRESHOLD_TO_INT(2.1, 2.4)
  };
  comp_config.threshold = thres;
     e02:	4b49      	ldr	r3, [pc, #292]	; (f28 <init_mbus_comp_gpiote+0x140>)
	nrfx_comp_init(&comp_config, comparator_handler);
     e04:	4949      	ldr	r1, [pc, #292]	; (f2c <init_mbus_comp_gpiote+0x144>)
  comp_config.threshold = thres;
     e06:	881b      	ldrh	r3, [r3, #0]
     e08:	f8ad 300f 	strh.w	r3, [sp, #15]
  nrfx_comp_config_t  comp_config = NRFX_COMP_DEFAULT_CONFIG(INPUT_A0);
     e0c:	2207      	movs	r2, #7
	nrfx_comp_init(&comp_config, comparator_handler);
     e0e:	a803      	add	r0, sp, #12
  nrfx_comp_config_t  comp_config = NRFX_COMP_DEFAULT_CONFIG(INPUT_A0);
     e10:	f88d 2014 	strb.w	r2, [sp, #20]
	nrfx_comp_init(&comp_config, comparator_handler);
     e14:	f009 fc74 	bl	a700 <nrfx_comp_init>
	//nrfx_comp_start(NRFX_COMP_EVT_EN_CROSS_MASK, 0);
  nrfx_comp_start(0, 0);
     e18:	4621      	mov	r1, r4
     e1a:	4620      	mov	r0, r4
     e1c:	f009 fcd6 	bl	a7cc <nrfx_comp_start>
  /* GPIOTE Init */
  nrfx_gpiote_init(0);
     e20:	4620      	mov	r0, r4
     e22:	f009 fcf3 	bl	a80c <nrfx_gpiote_init>
  
  nrfx_gpiote_out_config_t const out_config = {
     e26:	4b42      	ldr	r3, [pc, #264]	; (f30 <init_mbus_comp_gpiote+0x148>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
     e28:	4e42      	ldr	r6, [pc, #264]	; (f34 <init_mbus_comp_gpiote+0x14c>)
     e2a:	881a      	ldrh	r2, [r3, #0]
     e2c:	789b      	ldrb	r3, [r3, #2]
     e2e:	f8ad 2008 	strh.w	r2, [sp, #8]
	};
  
  /* Initialize output pin. SET task will turn the LED on,
	 * CLR will turn it off and OUT will toggle it.
	 */
	nrfx_gpiote_out_init(OUTPUT_PIN, &out_config);
     e32:	a902      	add	r1, sp, #8
     e34:	200d      	movs	r0, #13
  nrfx_gpiote_out_config_t const out_config = {
     e36:	f88d 300a 	strb.w	r3, [sp, #10]
	nrfx_gpiote_out_init(OUTPUT_PIN, &out_config);
     e3a:	f01c f94f 	bl	1d0dc <nrfx_gpiote_out_init>
  nrfx_gpiote_out_task_enable(OUTPUT_PIN);
     e3e:	200d      	movs	r0, #13
     e40:	f009 fe0a 	bl	aa58 <nrfx_gpiote_out_task_enable>
  nrfx_gpiote_out_init(OUTPUT_PIN_LED, &out_config);
     e44:	a902      	add	r1, sp, #8
     e46:	2008      	movs	r0, #8
     e48:	f01c f948 	bl	1d0dc <nrfx_gpiote_out_init>
  nrfx_gpiote_out_task_enable(OUTPUT_PIN_LED);
     e4c:	2008      	movs	r0, #8
     e4e:	f009 fe03 	bl	aa58 <nrfx_gpiote_out_task_enable>
  /* Allocate a (D)PPI channel. */
	nrf_ppi_channel_t channel_up;
	nrf_ppi_channel_t channel_down;
	nrfx_ppi_channel_alloc(&channel_up);
     e52:	a801      	add	r0, sp, #4
     e54:	f009 fe2a 	bl	aaac <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&channel_down);
     e58:	f10d 0005 	add.w	r0, sp, #5
     e5c:	f009 fe26 	bl	aaac <nrfx_ppi_channel_alloc>
  nrf_ppi_channel_t channel_up_led;
	nrf_ppi_channel_t channel_down_led;
	nrfx_ppi_channel_alloc(&channel_up_led);
     e60:	f10d 0006 	add.w	r0, sp, #6
     e64:	f009 fe22 	bl	aaac <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&channel_down_led);
     e68:	f10d 0007 	add.w	r0, sp, #7
     e6c:	f009 fe1e 	bl	aaac <nrfx_ppi_channel_alloc>
	/* Configure endpoints of the channel so that the input pin event is
	 * connected with the output pin OUT task. This means that each time
	 * the button is pressed, the LED pin will be toggled.
	 */
	nrfx_gppi_channel_endpoints_setup(channel_up,
     e70:	f89d 4004 	ldrb.w	r4, [sp, #4]
     e74:	4d30      	ldr	r5, [pc, #192]	; (f38 <init_mbus_comp_gpiote+0x150>)
     e76:	200d      	movs	r0, #13
     e78:	f009 fe00 	bl	aa7c <nrfx_gpiote_set_task_get>
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_task_address_get(NRF_GPIOTE_Type const * p_reg,
                                                       nrf_gpiote_task_t       task)
{
    return ((uint32_t)p_reg + task);
     e7c:	00e3      	lsls	r3, r4, #3
     e7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     e82:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
     e86:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     e8a:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
			nrf_comp_event_address_get(NRF_COMP,NRF_COMP_EVENT_UP),
			nrf_gpiote_task_address_get(NRF_GPIOTE,
				nrfx_gpiote_set_task_get(OUTPUT_PIN)));
	nrfx_gppi_channel_endpoints_setup(channel_down,
     e8e:	f89d 4005 	ldrb.w	r4, [sp, #5]
     e92:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
     e96:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
     e9a:	200d      	movs	r0, #13
     e9c:	f009 fdfa 	bl	aa94 <nrfx_gpiote_clr_task_get>
     ea0:	00e3      	lsls	r3, r4, #3
     ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     ea6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
     eaa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     eae:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
			nrf_comp_event_address_get(NRF_COMP,NRF_COMP_EVENT_DOWN),
			nrf_gpiote_task_address_get(NRF_GPIOTE,
				nrfx_gpiote_clr_task_get(OUTPUT_PIN)));
  nrfx_gppi_channel_endpoints_setup(channel_up_led,
     eb2:	f89d 4006 	ldrb.w	r4, [sp, #6]
    p_reg->CH[(uint32_t) channel].EEP = eep;
     eb6:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
     eba:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
     ebe:	2008      	movs	r0, #8
     ec0:	f009 fddc 	bl	aa7c <nrfx_gpiote_set_task_get>
     ec4:	00e3      	lsls	r3, r4, #3
     ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     eca:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
     ece:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     ed2:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    p_reg->CH[(uint32_t) channel].EEP = eep;
     ed6:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
			nrf_comp_event_address_get(NRF_COMP,NRF_COMP_EVENT_UP),
			nrf_gpiote_task_address_get(NRF_GPIOTE,
				nrfx_gpiote_set_task_get(OUTPUT_PIN_LED)));
	nrfx_gppi_channel_endpoints_setup(channel_down_led,
     eda:	f89d 4007 	ldrb.w	r4, [sp, #7]
    p_reg->CH[(uint32_t) channel].TEP = tep;
     ede:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
     ee2:	2008      	movs	r0, #8
     ee4:	f009 fdd6 	bl	aa94 <nrfx_gpiote_clr_task_get>
     ee8:	00e3      	lsls	r3, r4, #3
     eea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     eee:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
     ef2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     ef6:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    p_reg->CH[(uint32_t) channel].EEP = eep;
     efa:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
     efe:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
			nrf_comp_event_address_get(NRF_COMP,NRF_COMP_EVENT_DOWN),
			nrf_gpiote_task_address_get(NRF_GPIOTE,
				nrfx_gpiote_clr_task_get(OUTPUT_PIN_LED)));
	/* Enable (D)PPI channel. */
  nrfx_ppi_channel_enable(channel_up);
     f02:	f89d 0004 	ldrb.w	r0, [sp, #4]
     f06:	f009 fe05 	bl	ab14 <nrfx_ppi_channel_enable>
	nrfx_ppi_channel_enable(channel_down);
     f0a:	f89d 0005 	ldrb.w	r0, [sp, #5]
     f0e:	f009 fe01 	bl	ab14 <nrfx_ppi_channel_enable>
  nrfx_ppi_channel_enable(channel_up_led);
     f12:	f89d 0006 	ldrb.w	r0, [sp, #6]
     f16:	f009 fdfd 	bl	ab14 <nrfx_ppi_channel_enable>
	nrfx_ppi_channel_enable(channel_down_led);
     f1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
     f1e:	f009 fdf9 	bl	ab14 <nrfx_ppi_channel_enable>
}
     f22:	b006      	add	sp, #24
     f24:	bd70      	pop	{r4, r5, r6, pc}
     f26:	bf00      	nop
     f28:	0001ed16 	.word	0x0001ed16
     f2c:	00000dd1 	.word	0x00000dd1
     f30:	0001e12c 	.word	0x0001e12c
     f34:	40013108 	.word	0x40013108
     f38:	40013104 	.word	0x40013104

00000f3c <szl_encode_uleb128>:
 * Encode an unsigned LEB128 encoded datum. The algorithm is taken
 * from Appendix C of the DWARF 3 spec. For information on the
 * encodings refer to section "7.6 - Variable Length Data". Return
 * the number of bytes written.
 */
size_t szl_encode_uleb128(uint64_t val, uint8_t * dst){
     f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f3e:	460d      	mov	r5, r1
     f40:	490d      	ldr	r1, [pc, #52]	; (f78 <szl_encode_uleb128+0x3c>)
     f42:	4604      	mov	r4, r0
	static uint8_t count;
	static uint8_t byte;
  count = 0;
     f44:	2000      	movs	r0, #0
	do {
		byte = val & 0x7f;
		val >>= 7;
     f46:	09e6      	lsrs	r6, r4, #7
     f48:	ea46 6645 	orr.w	r6, r6, r5, lsl #25
     f4c:	09ef      	lsrs	r7, r5, #7
		byte = val & 0x7f;
     f4e:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		val >>= 7;
     f52:	463d      	mov	r5, r7
     f54:	4634      	mov	r4, r6

		if (val != 0)
     f56:	ea54 0605 	orrs.w	r6, r4, r5
		byte |= 0x80;  // mark this byte to show that more bytes will follow
     f5a:	bf18      	it	ne
     f5c:	f063 037f 	ornne	r3, r3, #127	; 0x7f
     f60:	700b      	strb	r3, [r1, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     f62:	780b      	ldrb	r3, [r1, #0]
     f64:	5413      	strb	r3, [r2, r0]

		memcpy(dst+count,&byte,1);

		count++;
     f66:	3001      	adds	r0, #1
  	} while (val != 0);
     f68:	ea54 0305 	orrs.w	r3, r4, r5
		count++;
     f6c:	b2c0      	uxtb	r0, r0
  	} while (val != 0);
     f6e:	d1ea      	bne.n	f46 <szl_encode_uleb128+0xa>
     f70:	4b02      	ldr	r3, [pc, #8]	; (f7c <szl_encode_uleb128+0x40>)
     f72:	7018      	strb	r0, [r3, #0]
	return count;
}
     f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f76:	bf00      	nop
     f78:	2000169e 	.word	0x2000169e
     f7c:	20001aaf 	.word	0x20001aaf

00000f80 <sponge_encode>:
/**
 * Encode the buffer with sponge
 * @buffer: buffer to encode into
 * @ret: size of encoded bytes
 */
int sponge_encode(uint8_t *buffer) {
     f80:	b570      	push	{r4, r5, r6, lr}
    //Encode Message 
    int pos = 0;
    //printk("Bitmask: %u\n",new_data_bitmask[0]); 
    pos += szl_encode_uleb128(new_data_bitmask[0],&buffer[pos]);
     f82:	4d25      	ldr	r5, [pc, #148]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     f84:	4602      	mov	r2, r0
int sponge_encode(uint8_t *buffer) {
     f86:	4606      	mov	r6, r0
    pos += szl_encode_uleb128(new_data_bitmask[0],&buffer[pos]);
     f88:	2100      	movs	r1, #0
     f8a:	7828      	ldrb	r0, [r5, #0]
     f8c:	f7ff ffd6 	bl	f3c <szl_encode_uleb128>
    if (new_data_bitmask[0] & (1 << 0))
     f90:	782b      	ldrb	r3, [r5, #0]
     f92:	07da      	lsls	r2, r3, #31
    pos += szl_encode_uleb128(new_data_bitmask[0],&buffer[pos]);
     f94:	4604      	mov	r4, r0
    if (new_data_bitmask[0] & (1 << 0))
     f96:	d506      	bpl.n	fa6 <sponge_encode+0x26>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L1,&buffer[pos]);
     f98:	4b20      	ldr	r3, [pc, #128]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     f9a:	1832      	adds	r2, r6, r0
     f9c:	2100      	movs	r1, #0
     f9e:	8818      	ldrh	r0, [r3, #0]
     fa0:	f7ff ffcc 	bl	f3c <szl_encode_uleb128>
     fa4:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 1))
     fa6:	782b      	ldrb	r3, [r5, #0]
     fa8:	079b      	lsls	r3, r3, #30
     faa:	d506      	bpl.n	fba <sponge_encode+0x3a>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L2,&buffer[pos]);
     fac:	4b1b      	ldr	r3, [pc, #108]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fae:	1932      	adds	r2, r6, r4
     fb0:	8858      	ldrh	r0, [r3, #2]
     fb2:	2100      	movs	r1, #0
     fb4:	f7ff ffc2 	bl	f3c <szl_encode_uleb128>
     fb8:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 2))
     fba:	782b      	ldrb	r3, [r5, #0]
     fbc:	0758      	lsls	r0, r3, #29
     fbe:	d506      	bpl.n	fce <sponge_encode+0x4e>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L3,&buffer[pos]);
     fc0:	4b16      	ldr	r3, [pc, #88]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fc2:	1932      	adds	r2, r6, r4
     fc4:	8898      	ldrh	r0, [r3, #4]
     fc6:	2100      	movs	r1, #0
     fc8:	f7ff ffb8 	bl	f3c <szl_encode_uleb128>
     fcc:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 3))
     fce:	782b      	ldrb	r3, [r5, #0]
     fd0:	0719      	lsls	r1, r3, #28
     fd2:	d506      	bpl.n	fe2 <sponge_encode+0x62>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkleistungsbezug,&buffer[pos]);
     fd4:	4b11      	ldr	r3, [pc, #68]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fd6:	1932      	adds	r2, r6, r4
     fd8:	6898      	ldr	r0, [r3, #8]
     fda:	2100      	movs	r1, #0
     fdc:	f7ff ffae 	bl	f3c <szl_encode_uleb128>
     fe0:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 4))
     fe2:	782b      	ldrb	r3, [r5, #0]
     fe4:	06da      	lsls	r2, r3, #27
     fe6:	d506      	bpl.n	ff6 <sponge_encode+0x76>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkenergiebezug_Tarif_1,&buffer[pos]);
     fe8:	4b0c      	ldr	r3, [pc, #48]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fea:	1932      	adds	r2, r6, r4
     fec:	68d8      	ldr	r0, [r3, #12]
     fee:	2100      	movs	r1, #0
     ff0:	f7ff ffa4 	bl	f3c <szl_encode_uleb128>
     ff4:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 5))
     ff6:	782b      	ldrb	r3, [r5, #0]
     ff8:	069b      	lsls	r3, r3, #26
     ffa:	d506      	bpl.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkenergiebezug_Tarif_2,&buffer[pos]);
     ffc:	4b07      	ldr	r3, [pc, #28]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     ffe:	1932      	adds	r2, r6, r4
    1000:	6918      	ldr	r0, [r3, #16]
    1002:	2100      	movs	r1, #0
    1004:	f7ff ff9a 	bl	f3c <szl_encode_uleb128>
    1008:	4404      	add	r4, r0
    } 
    printk("Message Encoded Size: %u\n",pos);   
    100a:	4805      	ldr	r0, [pc, #20]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    100c:	4621      	mov	r1, r4
    100e:	f01a fdf4 	bl	1bbfa <printk>
    //k_sleep(K_MSEC(1000));
    //printk("Buffer Debug[0]: %u\n",buffer[0]); 
    //printk("Buffer Debug[1]: %u\n",buffer[1]);
    //printk("Buffer Debug[2]: %u\n",buffer[2]);
    return pos;
}
    1012:	4620      	mov	r0, r4
    1014:	bd70      	pop	{r4, r5, r6, pc}
    1016:	bf00      	nop
    1018:	20001bb0 	.word	0x20001bb0
    101c:	20000580 	.word	0x20000580
    1020:	0001eb6f 	.word	0x0001eb6f

00001024 <dlms_console_init>:

static uint8_t console_rxbuf[CONFIG_CONSOLE_GETCHAR_BUFSIZE];
static uint8_t console_txbuf[CONFIG_CONSOLE_PUTCHAR_BUFSIZE];

int dlms_console_init(void)
{
    1024:	b570      	push	{r4, r5, r6, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1026:	4e12      	ldr	r6, [pc, #72]	; (1070 <dlms_console_init+0x4c>)
    1028:	4630      	mov	r0, r6
    102a:	f01c f8b7 	bl	1d19c <z_device_ready>
    102e:	b1c0      	cbz	r0, 1062 <dlms_console_init+0x3e>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    1030:	4d10      	ldr	r5, [pc, #64]	; (1074 <dlms_console_init+0x50>)
    1032:	4631      	mov	r1, r6
    1034:	4628      	mov	r0, r5
    1036:	f005 f8cf 	bl	61d8 <tty_init>

	if (ret) {
    103a:	4604      	mov	r4, r0
    103c:	b978      	cbnz	r0, 105e <dlms_console_init+0x3a>

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    103e:	68b3      	ldr	r3, [r6, #8]
    1040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1042:	b18b      	cbz	r3, 1068 <dlms_console_init+0x44>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    1044:	490c      	ldr	r1, [pc, #48]	; (1078 <dlms_console_init+0x54>)
    1046:	2210      	movs	r2, #16
    1048:	4628      	mov	r0, r5
    104a:	f01b fba6 	bl	1c79a <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    104e:	490b      	ldr	r1, [pc, #44]	; (107c <dlms_console_init+0x58>)
    1050:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1054:	4628      	mov	r0, r5
    1056:	f01b fb87 	bl	1c768 <tty_set_rx_buf>

  //Set Timeout
  console_serial.rx_timeout = 100; //100ms
    105a:	2364      	movs	r3, #100	; 0x64
    105c:	62ab      	str	r3, [r5, #40]	; 0x28

	return 0;
}
    105e:	4620      	mov	r0, r4
    1060:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    1062:	f06f 0412 	mvn.w	r4, #18
    1066:	e7fa      	b.n	105e <dlms_console_init+0x3a>
			return -ENOTSUP;
    1068:	f06f 0485 	mvn.w	r4, #133	; 0x85
    106c:	e7f7      	b.n	105e <dlms_console_init+0x3a>
    106e:	bf00      	nop
    1070:	0001de6c 	.word	0x0001de6c
    1074:	200005a0 	.word	0x200005a0
    1078:	20001a9f 	.word	0x20001a9f
    107c:	2000169f 	.word	0x2000169f

00001080 <dlms_push_listener_init>:
{
  //Empty skeleton. This is added because server implementation needs this.
}

void dlms_push_listener_init(void)
{
    1080:	b5f0      	push	{r4, r5, r6, r7, lr}
    1082:	b085      	sub	sp, #20
  dlms_console_init();
    1084:	f7ff ffce 	bl	1024 <dlms_console_init>
  BYTE_BUFFER_INIT(&frameData);
    1088:	4818      	ldr	r0, [pc, #96]	; (10ec <dlms_push_listener_init+0x6c>)
    108a:	f00c fc0f 	bl	d8ac <bb_init>
  //Set frame capacity.
  bb_capacity(&frameData, 1024);
    108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1092:	4816      	ldr	r0, [pc, #88]	; (10ec <dlms_push_listener_init+0x6c>)
    1094:	f00c fc10 	bl	d8b8 <bb_capacity>
  reply_init(&data);
    1098:	4815      	ldr	r0, [pc, #84]	; (10f0 <dlms_push_listener_init+0x70>)
    109a:	f01a f88a 	bl	1b1b2 <reply_init>
  //TODO: Parameters depend from the meter.
  cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
    109e:	2300      	movs	r3, #0
    10a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    10a4:	9300      	str	r3, [sp, #0]
    10a6:	2301      	movs	r3, #1
    10a8:	4619      	mov	r1, r3
    10aa:	4812      	ldr	r0, [pc, #72]	; (10f4 <dlms_push_listener_init+0x74>)
    10ac:	f243 32ff 	movw	r2, #13311	; 0x33ff
    10b0:	f002 f828 	bl	3104 <cl_init>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    10b4:	4b10      	ldr	r3, [pc, #64]	; (10f8 <dlms_push_listener_init+0x78>)
    10b6:	6818      	ldr	r0, [r3, #0]
    10b8:	7919      	ldrb	r1, [r3, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    10ba:	795b      	ldrb	r3, [r3, #5]
	struct gpio_driver_data *data =
    10bc:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
    10be:	6887      	ldr	r7, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    10c0:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    10c2:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    10c4:	bf54      	ite	pl
    10c6:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    10ca:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    10ce:	2501      	movs	r5, #1
    10d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    10d4:	408d      	lsls	r5, r1
    10d6:	07db      	lsls	r3, r3, #31
	return api->pin_configure(port, pin, flags);
    10d8:	683b      	ldr	r3, [r7, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    10da:	bf4c      	ite	mi
    10dc:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    10de:	43ac      	bicpl	r4, r5
    10e0:	6034      	str	r4, [r6, #0]
  //init LEDs
  gpio_pin_configure_dt(&led_green,  GPIO_OUTPUT_INACTIVE);
}
    10e2:	b005      	add	sp, #20
    10e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return api->pin_configure(port, pin, flags);
    10e8:	4718      	bx	r3
    10ea:	bf00      	nop
    10ec:	200005f4 	.word	0x200005f4
    10f0:	200002b0 	.word	0x200002b0
    10f4:	2000060c 	.word	0x2000060c
    10f8:	20000000 	.word	0x20000000

000010fc <dlms_push_listener_rx>:
  18,   0,  17,  18,   0,  16,  50,  22, 
  126
};
*/
void dlms_push_listener_rx(void)
{
    10fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static bool done;
  done = false;
    1100:	4b5e      	ldr	r3, [pc, #376]	; (127c <dlms_push_listener_rx+0x180>)
	return tty_read(&console_serial, buf, size);
    1102:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 12b4 <dlms_push_listener_rx+0x1b8>
      bin2hex(buf,bytes_read,rx_hex_str,sizeof(rx_hex_str));
      //bin2hex(dlms_raw_bin_test_data,sizeof(dlms_raw_bin_test_data),rx_hex_str,sizeof(rx_hex_str));
      //Split into frames
      static char delim[] = "7e";
      static char * frame_start;
      frame_start = strstr(rx_hex_str,delim);
    1106:	4e5e      	ldr	r6, [pc, #376]	; (1280 <dlms_push_listener_rx+0x184>)
{
    1108:	b093      	sub	sp, #76	; 0x4c
  done = false;
    110a:	2200      	movs	r2, #0
    110c:	701a      	strb	r2, [r3, #0]
  while (!done)
    110e:	9307      	str	r3, [sp, #28]
	return tty_read(&console_serial, buf, size);
    1110:	4c5c      	ldr	r4, [pc, #368]	; (1284 <dlms_push_listener_rx+0x188>)
  while (!done)
    1112:	9b07      	ldr	r3, [sp, #28]
    1114:	781b      	ldrb	r3, [r3, #0]
    1116:	b113      	cbz	r3, 111e <dlms_push_listener_rx+0x22>
    cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
    bb_empty(&frameData);
    reply_clear(&data);
    }
  }
}
    1118:	b013      	add	sp, #76	; 0x4c
    111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return tty_read(&console_serial, buf, size);
    111e:	4651      	mov	r1, sl
    1120:	f44f 7200 	mov.w	r2, #512	; 0x200
    1124:	4620      	mov	r0, r4
    1126:	f01b fa8f 	bl	1c648 <tty_read>
    if (bytes_read > 0)
    112a:	1e01      	subs	r1, r0, #0
    112c:	ddf1      	ble.n	1112 <dlms_push_listener_rx+0x16>
      bin2hex(buf,bytes_read,rx_hex_str,sizeof(rx_hex_str));
    112e:	4a56      	ldr	r2, [pc, #344]	; (1288 <dlms_push_listener_rx+0x18c>)
        hex2bin(frame_start+sizeof(delim)-1,4,(uint8_t*)&frame_size,sizeof(frame_size));
    1130:	f8df 8160 	ldr.w	r8, [pc, #352]	; 1294 <dlms_push_listener_rx+0x198>
        memcpy(HexString,frame_start,(size_t)frame_size);
    1134:	f8df b160 	ldr.w	fp, [pc, #352]	; 1298 <dlms_push_listener_rx+0x19c>
        bb_addHexString(&frameData,HexString);
    1138:	4f54      	ldr	r7, [pc, #336]	; (128c <dlms_push_listener_rx+0x190>)
      bin2hex(buf,bytes_read,rx_hex_str,sizeof(rx_hex_str));
    113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    113e:	4650      	mov	r0, sl
    1140:	f01a fcb4 	bl	1baac <bin2hex>
      frame_start = strstr(rx_hex_str,delim);
    1144:	4952      	ldr	r1, [pc, #328]	; (1290 <dlms_push_listener_rx+0x194>)
    1146:	4850      	ldr	r0, [pc, #320]	; (1288 <dlms_push_listener_rx+0x18c>)
    1148:	f01c fc2f 	bl	1d9aa <strstr>
    114c:	6030      	str	r0, [r6, #0]
      while (frame_start != NULL)
    114e:	6830      	ldr	r0, [r6, #0]
    1150:	2800      	cmp	r0, #0
    1152:	d07d      	beq.n	1250 <dlms_push_listener_rx+0x154>
        hex2bin(frame_start+sizeof(delim)-1,4,(uint8_t*)&frame_size,sizeof(frame_size));
    1154:	2304      	movs	r3, #4
    1156:	4619      	mov	r1, r3
    1158:	4a4e      	ldr	r2, [pc, #312]	; (1294 <dlms_push_listener_rx+0x198>)
    115a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 12a0 <dlms_push_listener_rx+0x1a4>
    115e:	3002      	adds	r0, #2
    1160:	f01a fccf 	bl	1bb02 <hex2bin>
        frame_size = (frame_size<<8) | (frame_size>>8); //Reverse the byte order
    1164:	f8d8 3000 	ldr.w	r3, [r8]
        memcpy(HexString,frame_start,(size_t)frame_size);
    1168:	6831      	ldr	r1, [r6, #0]
    116a:	484b      	ldr	r0, [pc, #300]	; (1298 <dlms_push_listener_rx+0x19c>)
        frame_size = (frame_size<<8) | (frame_size>>8); //Reverse the byte order
    116c:	121c      	asrs	r4, r3, #8
    116e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
        frame_size = frame_size & 0x0FFF; //Get rid of Type
    1172:	f3c4 040b 	ubfx	r4, r4, #0, #12
        frame_size = frame_size + 2; //Append Tag fields size
    1176:	3402      	adds	r4, #2
        frame_size = frame_size * 2; //Addjust for Hex-String
    1178:	0062      	lsls	r2, r4, #1
        memcpy(HexString,frame_start,(size_t)frame_size);
    117a:	f44f 6380 	mov.w	r3, #1024	; 0x400
        frame_size = frame_size * 2; //Addjust for Hex-String
    117e:	f8c8 2000 	str.w	r2, [r8]
        memcpy(HexString,frame_start,(size_t)frame_size);
    1182:	f01c fb93 	bl	1d8ac <__memcpy_chk>
        HexString[(size_t)frame_size] = (char)0x0;
    1186:	2300      	movs	r3, #0
    1188:	f80b 3014 	strb.w	r3, [fp, r4, lsl #1]
        if (notify_getData(&settings, &frameData, &data) != 0)
    118c:	4c43      	ldr	r4, [pc, #268]	; (129c <dlms_push_listener_rx+0x1a0>)
        bb_addHexString(&frameData,HexString);
    118e:	4942      	ldr	r1, [pc, #264]	; (1298 <dlms_push_listener_rx+0x19c>)
    1190:	4638      	mov	r0, r7
    1192:	f00c fea4 	bl	dede <bb_addHexString>
        if (notify_getData(&settings, &frameData, &data) != 0)
    1196:	4842      	ldr	r0, [pc, #264]	; (12a0 <dlms_push_listener_rx+0x1a4>)
    1198:	4622      	mov	r2, r4
    119a:	4639      	mov	r1, r7
    119c:	f019 fe8a 	bl	1aeb4 <notify_getData>
    11a0:	4625      	mov	r5, r4
    11a2:	b188      	cbz	r0, 11c8 <dlms_push_listener_rx+0xcc>
          printk("Invalid data received!\n");
    11a4:	483f      	ldr	r0, [pc, #252]	; (12a4 <dlms_push_listener_rx+0x1a8>)
    11a6:	f01a fd28 	bl	1bbfa <printk>
          reply_clear(&data);
    11aa:	4620      	mov	r0, r4
    11ac:	f01a f83c 	bl	1b228 <reply_clear>
          bb_empty(&frameData);
    11b0:	4638      	mov	r0, r7
    11b2:	f00c fd4f 	bl	dc54 <bb_empty>
        frame_start = strstr(frame_start+(size_t)frame_size,delim);
    11b6:	6830      	ldr	r0, [r6, #0]
    11b8:	f8d8 3000 	ldr.w	r3, [r8]
    11bc:	4934      	ldr	r1, [pc, #208]	; (1290 <dlms_push_listener_rx+0x194>)
    11be:	4418      	add	r0, r3
    11c0:	f01c fbf3 	bl	1d9aa <strstr>
    11c4:	6030      	str	r0, [r6, #0]
    11c6:	e7c2      	b.n	114e <dlms_push_listener_rx+0x52>
          if (data.complete)
    11c8:	7c23      	ldrb	r3, [r4, #16]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d0f3      	beq.n	11b6 <dlms_push_listener_rx+0xba>
            bb_empty(&frameData);
    11ce:	4638      	mov	r0, r7
    11d0:	f00c fd40 	bl	dc54 <bb_empty>
            if (data.moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    11d4:	7824      	ldrb	r4, [r4, #0]
    11d6:	2c00      	cmp	r4, #0
    11d8:	d1ed      	bne.n	11b6 <dlms_push_listener_rx+0xba>
              arr_init(&items);
    11da:	a80a      	add	r0, sp, #40	; 0x28
    11dc:	f00f ff29 	bl	11032 <arr_init>
              notify_parsePush(&settings, data.dataValue.Arr, &items);
    11e0:	6a29      	ldr	r1, [r5, #32]
              Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
    11e2:	4f31      	ldr	r7, [pc, #196]	; (12a8 <dlms_push_listener_rx+0x1ac>)
              notify_parsePush(&settings, data.dataValue.Arr, &items);
    11e4:	aa0a      	add	r2, sp, #40	; 0x28
    11e6:	4648      	mov	r0, r9
    11e8:	f019 fe67 	bl	1aeba <notify_parsePush>
              Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
    11ec:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 12b8 <dlms_push_listener_rx+0x1bc>
    11f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    11f4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    11f6:	f8dc 3000 	ldr.w	r3, [ip]
    11fa:	f847 3910 	str.w	r3, [r7], #-16
              new_data_bitmask[0] = 0x0; //Init the new_data_bitmask
    11fe:	4b2b      	ldr	r3, [pc, #172]	; (12ac <dlms_push_listener_rx+0x1b0>)
                  oa_getByIndex(&settings.objects,pos,&item);
    1200:	f109 0b98 	add.w	fp, r9, #152	; 0x98
              new_data_bitmask[0] = 0x0; //Init the new_data_bitmask
    1204:	701c      	strb	r4, [r3, #0]
              for (pos = 0; pos != settings.objects.size; ++pos)
    1206:	4698      	mov	r8, r3
    1208:	f8b9 309e 	ldrh.w	r3, [r9, #158]	; 0x9e
    120c:	b2a1      	uxth	r1, r4
    120e:	428b      	cmp	r3, r1
    1210:	d154      	bne.n	12bc <dlms_push_listener_rx+0x1c0>
              cl_clear(&settings);
    1212:	4823      	ldr	r0, [pc, #140]	; (12a0 <dlms_push_listener_rx+0x1a4>)
    1214:	f00f fe7f 	bl	10f16 <cl_clear>
              cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
    1218:	2300      	movs	r3, #0
    121a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    121e:	9300      	str	r3, [sp, #0]
    1220:	2301      	movs	r3, #1
    1222:	4619      	mov	r1, r3
    1224:	f243 32ff 	movw	r2, #13311	; 0x33ff
    1228:	481d      	ldr	r0, [pc, #116]	; (12a0 <dlms_push_listener_rx+0x1a4>)
    122a:	f001 ff6b 	bl	3104 <cl_init>
              bb_empty(&frameData);
    122e:	4817      	ldr	r0, [pc, #92]	; (128c <dlms_push_listener_rx+0x190>)
    1230:	f00c fd10 	bl	dc54 <bb_empty>
              reply_clear(&data);
    1234:	4819      	ldr	r0, [pc, #100]	; (129c <dlms_push_listener_rx+0x1a0>)
    1236:	f019 fff7 	bl	1b228 <reply_clear>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_toggle(spec->port, spec->pin);
    123a:	4b1d      	ldr	r3, [pc, #116]	; (12b0 <dlms_push_listener_rx+0x1b4>)
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    123c:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_toggle(spec->port, spec->pin);
    123e:	6818      	ldr	r0, [r3, #0]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    1240:	2401      	movs	r4, #1
    1242:	fa04 f101 	lsl.w	r1, r4, r1
	return api->port_toggle_bits(port, pins);
    1246:	6883      	ldr	r3, [r0, #8]
    1248:	695b      	ldr	r3, [r3, #20]
    124a:	4798      	blx	r3
              done = true;
    124c:	9b07      	ldr	r3, [sp, #28]
    124e:	701c      	strb	r4, [r3, #0]
    cl_clear(&settings);
    1250:	4813      	ldr	r0, [pc, #76]	; (12a0 <dlms_push_listener_rx+0x1a4>)
    1252:	f00f fe60 	bl	10f16 <cl_clear>
    cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
    1256:	2300      	movs	r3, #0
    1258:	e9cd 3301 	strd	r3, r3, [sp, #4]
    125c:	9300      	str	r3, [sp, #0]
    125e:	2301      	movs	r3, #1
    1260:	f243 32ff 	movw	r2, #13311	; 0x33ff
    1264:	4619      	mov	r1, r3
    1266:	480e      	ldr	r0, [pc, #56]	; (12a0 <dlms_push_listener_rx+0x1a4>)
    1268:	f001 ff4c 	bl	3104 <cl_init>
    bb_empty(&frameData);
    126c:	4807      	ldr	r0, [pc, #28]	; (128c <dlms_push_listener_rx+0x190>)
    126e:	f00c fcf1 	bl	dc54 <bb_empty>
    reply_clear(&data);
    1272:	480a      	ldr	r0, [pc, #40]	; (129c <dlms_push_listener_rx+0x1a0>)
    1274:	f019 ffd8 	bl	1b228 <reply_clear>
    1278:	e74a      	b.n	1110 <dlms_push_listener_rx+0x14>
    127a:	bf00      	nop
    127c:	20001baf 	.word	0x20001baf
    1280:	20000604 	.word	0x20000604
    1284:	200005a0 	.word	0x200005a0
    1288:	20001bb1 	.word	0x20001bb1
    128c:	200005f4 	.word	0x200005f4
    1290:	200001d0 	.word	0x200001d0
    1294:	20000600 	.word	0x20000600
    1298:	2000109e 	.word	0x2000109e
    129c:	200002b0 	.word	0x200002b0
    12a0:	2000060c 	.word	0x2000060c
    12a4:	0001eb89 	.word	0x0001eb89
    12a8:	20000580 	.word	0x20000580
    12ac:	20001bb0 	.word	0x20001bb0
    12b0:	20000000 	.word	0x20000000
    12b4:	2000149e 	.word	0x2000149e
    12b8:	0001e148 	.word	0x0001e148
                  oa_getByIndex(&settings.objects,pos,&item);
    12bc:	aa09      	add	r2, sp, #36	; 0x24
    12be:	4658      	mov	r0, fp
    12c0:	f019 ff25 	bl	1b10e <oa_getByIndex>
                  snprintk(ln,sizeof(ln)-1,"%u.%u.%u.%u.%u.%u",item->logicalName[0],item->logicalName[1],item->logicalName[2],item->logicalName[3],item->logicalName[4],item->logicalName[5]);
    12c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12c6:	7ad1      	ldrb	r1, [r2, #11]
    12c8:	7993      	ldrb	r3, [r2, #6]
    12ca:	9104      	str	r1, [sp, #16]
    12cc:	7a91      	ldrb	r1, [r2, #10]
    12ce:	9103      	str	r1, [sp, #12]
    12d0:	7a51      	ldrb	r1, [r2, #9]
    12d2:	9102      	str	r1, [sp, #8]
    12d4:	7a11      	ldrb	r1, [r2, #8]
    12d6:	9101      	str	r1, [sp, #4]
    12d8:	79d2      	ldrb	r2, [r2, #7]
    12da:	9200      	str	r2, [sp, #0]
    12dc:	2113      	movs	r1, #19
    12de:	4a49      	ldr	r2, [pc, #292]	; (1404 <dlms_push_listener_rx+0x308>)
    12e0:	a80d      	add	r0, sp, #52	; 0x34
    12e2:	f01a fc97 	bl	1bc14 <snprintk>
                  if (strcmp(ln,"1.0.31.7.0.255") == 0)
    12e6:	4948      	ldr	r1, [pc, #288]	; (1408 <dlms_push_listener_rx+0x30c>)
    12e8:	a80d      	add	r0, sp, #52	; 0x34
    12ea:	f7ff fd5f 	bl	dac <strcmp>
    12ee:	b970      	cbnz	r0, 130e <dlms_push_listener_rx+0x212>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    12f0:	b2a1      	uxth	r1, r4
    12f2:	6a28      	ldr	r0, [r5, #32]
    12f4:	aa08      	add	r2, sp, #32
    12f6:	3101      	adds	r1, #1
    12f8:	f01a f973 	bl	1b5e2 <va_getByIndex>
                    Smart_Meter_data.Strom_L1 = tmp->uiVal;
    12fc:	9b08      	ldr	r3, [sp, #32]
    12fe:	891b      	ldrh	r3, [r3, #8]
    1300:	803b      	strh	r3, [r7, #0]
                    new_data_bitmask[0] |= 1 << 0;
    1302:	f898 3000 	ldrb.w	r3, [r8]
    1306:	f043 0301 	orr.w	r3, r3, #1
    130a:	f888 3000 	strb.w	r3, [r8]
                  if (strcmp(ln,"1.0.51.7.0.255") == 0)
    130e:	493f      	ldr	r1, [pc, #252]	; (140c <dlms_push_listener_rx+0x310>)
    1310:	a80d      	add	r0, sp, #52	; 0x34
    1312:	f7ff fd4b 	bl	dac <strcmp>
    1316:	b970      	cbnz	r0, 1336 <dlms_push_listener_rx+0x23a>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1318:	b2a1      	uxth	r1, r4
    131a:	6a28      	ldr	r0, [r5, #32]
    131c:	aa08      	add	r2, sp, #32
    131e:	3101      	adds	r1, #1
    1320:	f01a f95f 	bl	1b5e2 <va_getByIndex>
                    Smart_Meter_data.Strom_L2 = tmp->uiVal;
    1324:	9b08      	ldr	r3, [sp, #32]
    1326:	891b      	ldrh	r3, [r3, #8]
    1328:	807b      	strh	r3, [r7, #2]
                    new_data_bitmask[0] |= 1 << 1;
    132a:	f898 3000 	ldrb.w	r3, [r8]
    132e:	f043 0302 	orr.w	r3, r3, #2
    1332:	f888 3000 	strb.w	r3, [r8]
                  if (strcmp(ln,"1.0.71.7.0.255") == 0)
    1336:	4936      	ldr	r1, [pc, #216]	; (1410 <dlms_push_listener_rx+0x314>)
    1338:	a80d      	add	r0, sp, #52	; 0x34
    133a:	f7ff fd37 	bl	dac <strcmp>
    133e:	b998      	cbnz	r0, 1368 <dlms_push_listener_rx+0x26c>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1340:	b2a1      	uxth	r1, r4
    1342:	aa08      	add	r2, sp, #32
    1344:	3101      	adds	r1, #1
    1346:	6a28      	ldr	r0, [r5, #32]
    1348:	f01a f94b 	bl	1b5e2 <va_getByIndex>
                    printk("Strom L3: %u\n",tmp->uiVal);
    134c:	9b08      	ldr	r3, [sp, #32]
    134e:	4831      	ldr	r0, [pc, #196]	; (1414 <dlms_push_listener_rx+0x318>)
    1350:	8919      	ldrh	r1, [r3, #8]
    1352:	f01a fc52 	bl	1bbfa <printk>
                    Smart_Meter_data.Strom_L3 = tmp->uiVal;
    1356:	9b08      	ldr	r3, [sp, #32]
    1358:	891b      	ldrh	r3, [r3, #8]
    135a:	80bb      	strh	r3, [r7, #4]
                    new_data_bitmask[0] |= 1 << 2;
    135c:	f898 3000 	ldrb.w	r3, [r8]
    1360:	f043 0304 	orr.w	r3, r3, #4
    1364:	f888 3000 	strb.w	r3, [r8]
                  if (strcmp(ln,"1.0.1.7.0.255") == 0)
    1368:	492b      	ldr	r1, [pc, #172]	; (1418 <dlms_push_listener_rx+0x31c>)
    136a:	a80d      	add	r0, sp, #52	; 0x34
    136c:	f7ff fd1e 	bl	dac <strcmp>
    1370:	b998      	cbnz	r0, 139a <dlms_push_listener_rx+0x29e>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1372:	b2a1      	uxth	r1, r4
    1374:	aa08      	add	r2, sp, #32
    1376:	3101      	adds	r1, #1
    1378:	6a28      	ldr	r0, [r5, #32]
    137a:	f01a f932 	bl	1b5e2 <va_getByIndex>
                    printk("Wirkleistungsbezug: %lu\n",tmp->ulVal);
    137e:	9b08      	ldr	r3, [sp, #32]
    1380:	4826      	ldr	r0, [pc, #152]	; (141c <dlms_push_listener_rx+0x320>)
    1382:	6899      	ldr	r1, [r3, #8]
    1384:	f01a fc39 	bl	1bbfa <printk>
                    Smart_Meter_data.Wirkleistungsbezug = tmp->ulVal;
    1388:	9b08      	ldr	r3, [sp, #32]
    138a:	689b      	ldr	r3, [r3, #8]
    138c:	60bb      	str	r3, [r7, #8]
                    new_data_bitmask[0] |= 1 << 3;
    138e:	f898 3000 	ldrb.w	r3, [r8]
    1392:	f043 0308 	orr.w	r3, r3, #8
    1396:	f888 3000 	strb.w	r3, [r8]
                  if (strcmp(ln,"1.1.1.8.1.255") == 0)
    139a:	4921      	ldr	r1, [pc, #132]	; (1420 <dlms_push_listener_rx+0x324>)
    139c:	a80d      	add	r0, sp, #52	; 0x34
    139e:	f7ff fd05 	bl	dac <strcmp>
    13a2:	b998      	cbnz	r0, 13cc <dlms_push_listener_rx+0x2d0>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    13a4:	b2a1      	uxth	r1, r4
    13a6:	aa08      	add	r2, sp, #32
    13a8:	3101      	adds	r1, #1
    13aa:	6a28      	ldr	r0, [r5, #32]
    13ac:	f01a f919 	bl	1b5e2 <va_getByIndex>
                    printk("Wirkenergiebezug Tarif 1: %lu\n",tmp->ulVal);
    13b0:	9b08      	ldr	r3, [sp, #32]
    13b2:	481c      	ldr	r0, [pc, #112]	; (1424 <dlms_push_listener_rx+0x328>)
    13b4:	6899      	ldr	r1, [r3, #8]
    13b6:	f01a fc20 	bl	1bbfa <printk>
                    Smart_Meter_data.Wirkenergiebezug_Tarif_1 = tmp->ulVal;
    13ba:	9b08      	ldr	r3, [sp, #32]
    13bc:	689b      	ldr	r3, [r3, #8]
    13be:	60fb      	str	r3, [r7, #12]
                    new_data_bitmask[0] |= 1 << 4;
    13c0:	f898 3000 	ldrb.w	r3, [r8]
    13c4:	f043 0310 	orr.w	r3, r3, #16
    13c8:	f888 3000 	strb.w	r3, [r8]
                  if (strcmp(ln,"1.1.1.8.2.255") == 0)
    13cc:	4916      	ldr	r1, [pc, #88]	; (1428 <dlms_push_listener_rx+0x32c>)
    13ce:	a80d      	add	r0, sp, #52	; 0x34
    13d0:	f7ff fcec 	bl	dac <strcmp>
    13d4:	b998      	cbnz	r0, 13fe <dlms_push_listener_rx+0x302>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    13d6:	b2a1      	uxth	r1, r4
    13d8:	aa08      	add	r2, sp, #32
    13da:	3101      	adds	r1, #1
    13dc:	6a28      	ldr	r0, [r5, #32]
    13de:	f01a f900 	bl	1b5e2 <va_getByIndex>
                    printk("Wirkenergiebezug Tarif 2: %lu\n",tmp->ulVal);
    13e2:	9b08      	ldr	r3, [sp, #32]
    13e4:	4811      	ldr	r0, [pc, #68]	; (142c <dlms_push_listener_rx+0x330>)
    13e6:	6899      	ldr	r1, [r3, #8]
    13e8:	f01a fc07 	bl	1bbfa <printk>
                    Smart_Meter_data.Wirkenergiebezug_Tarif_2 = tmp->ulVal;
    13ec:	9b08      	ldr	r3, [sp, #32]
    13ee:	689b      	ldr	r3, [r3, #8]
    13f0:	613b      	str	r3, [r7, #16]
                    new_data_bitmask[0] |= 1 << 5;
    13f2:	f898 3000 	ldrb.w	r3, [r8]
    13f6:	f043 0320 	orr.w	r3, r3, #32
    13fa:	f888 3000 	strb.w	r3, [r8]
              for (pos = 0; pos != settings.objects.size; ++pos)
    13fe:	3401      	adds	r4, #1
    1400:	e702      	b.n	1208 <dlms_push_listener_rx+0x10c>
    1402:	bf00      	nop
    1404:	0001eba1 	.word	0x0001eba1
    1408:	0001ebb3 	.word	0x0001ebb3
    140c:	0001ebc2 	.word	0x0001ebc2
    1410:	0001ebd1 	.word	0x0001ebd1
    1414:	0001ebe0 	.word	0x0001ebe0
    1418:	0001ebee 	.word	0x0001ebee
    141c:	0001ebfc 	.word	0x0001ebfc
    1420:	0001ec15 	.word	0x0001ec15
    1424:	0001ec23 	.word	0x0001ec23
    1428:	0001ec42 	.word	0x0001ec42
    142c:	0001ec50 	.word	0x0001ec50

00001430 <szl_lora_init>:
uint16_t crc, crc_calc;
int16_t rssi;
int8_t snr;

void szl_lora_init()
{
    1430:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1432:	4810      	ldr	r0, [pc, #64]	; (1474 <szl_lora_init+0x44>)
    1434:	f009 fd28 	bl	ae88 <z_impl_device_get_binding>

    lora_dev = device_get_binding(DEFAULT_RADIO);
    1438:	4a0f      	ldr	r2, [pc, #60]	; (1478 <szl_lora_init+0x48>)
    143a:	6010      	str	r0, [r2, #0]
    if (!lora_dev)
    143c:	b928      	cbnz	r0, 144a <szl_lora_init+0x1a>
    if (ret < 0)
    {
        printk("LoRa config failed\n");
        return;
    }
}
    143e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("%s Device not found\n", DEFAULT_RADIO);
    1442:	490c      	ldr	r1, [pc, #48]	; (1474 <szl_lora_init+0x44>)
    1444:	480d      	ldr	r0, [pc, #52]	; (147c <szl_lora_init+0x4c>)
    1446:	f01a bbd8 	b.w	1bbfa <printk>
    config.frequency = 865100000;
    144a:	4b0d      	ldr	r3, [pc, #52]	; (1480 <szl_lora_init+0x50>)
    144c:	4a0d      	ldr	r2, [pc, #52]	; (1484 <szl_lora_init+0x54>)
    144e:	601a      	str	r2, [r3, #0]
    config.bandwidth = BW_125_KHZ;
    1450:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    1454:	809a      	strh	r2, [r3, #4]
    config.coding_rate = CR_4_5;
    1456:	2201      	movs	r2, #1
    1458:	719a      	strb	r2, [r3, #6]
    config.preamble_len = 8;
    145a:	4a0b      	ldr	r2, [pc, #44]	; (1488 <szl_lora_init+0x58>)
    145c:	609a      	str	r2, [r3, #8]
    ret = lora_config(lora_dev, &config);
    145e:	f7ff fcbd 	bl	ddc <lora_config.constprop.0>
    if (ret < 0)
    1462:	2800      	cmp	r0, #0
    1464:	da04      	bge.n	1470 <szl_lora_init+0x40>
}
    1466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("LoRa config failed\n");
    146a:	4808      	ldr	r0, [pc, #32]	; (148c <szl_lora_init+0x5c>)
    146c:	f01a bbc5 	b.w	1bbfa <printk>
}
    1470:	bd08      	pop	{r3, pc}
    1472:	bf00      	nop
    1474:	0001ec6f 	.word	0x0001ec6f
    1478:	20000608 	.word	0x20000608
    147c:	0001ec76 	.word	0x0001ec76
    1480:	20000594 	.word	0x20000594
    1484:	339060e0 	.word	0x339060e0
    1488:	01040008 	.word	0x01040008
    148c:	0001ec8b 	.word	0x0001ec8b

00001490 <szl_lora_send>:

void szl_lora_send(uint8_t *data, uint32_t data_len)
{
    1490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (lora_dev == NULL)
    1494:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1514 <szl_lora_send+0x84>
{
    1498:	4606      	mov	r6, r0
    if (lora_dev == NULL)
    149a:	f8d8 0000 	ldr.w	r0, [r8]
{
    149e:	460c      	mov	r4, r1
    if (lora_dev == NULL)
    14a0:	b920      	cbnz	r0, 14ac <szl_lora_send+0x1c>
    {
        printk("Could not get LoRa device\n");
    14a2:	4815      	ldr	r0, [pc, #84]	; (14f8 <szl_lora_send+0x68>)
        printk("LoRa send failed\n");
        return;
    }

    printk("Data sent!\n");
}
    14a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Data sent!\n");
    14a8:	f01a bba7 	b.w	1bbfa <printk>
    config.tx_power = 4;
    14ac:	4b13      	ldr	r3, [pc, #76]	; (14fc <szl_lora_send+0x6c>)
    14ae:	f44f 7282 	mov.w	r2, #260	; 0x104
    14b2:	815a      	strh	r2, [r3, #10]
    ret = lora_config(lora_dev, &config);
    14b4:	f7ff fc92 	bl	ddc <lora_config.constprop.0>
    if (ret < 0)
    14b8:	2800      	cmp	r0, #0
    14ba:	da01      	bge.n	14c0 <szl_lora_send+0x30>
        printk("LoRa config failed\n");
    14bc:	4810      	ldr	r0, [pc, #64]	; (1500 <szl_lora_send+0x70>)
    14be:	e7f1      	b.n	14a4 <szl_lora_send+0x14>
    crc = crc16_ccitt(0, data, (size_t)data_len);
    14c0:	4622      	mov	r2, r4
    14c2:	4631      	mov	r1, r6
    14c4:	2000      	movs	r0, #0
    14c6:	f01a fab9 	bl	1ba3c <crc16_ccitt>
    memcpy(data_crc, data, (size_t)data_len);                   // copy data
    14ca:	4f0e      	ldr	r7, [pc, #56]	; (1504 <szl_lora_send+0x74>)
    crc = crc16_ccitt(0, data, (size_t)data_len);
    14cc:	4b0e      	ldr	r3, [pc, #56]	; (1508 <szl_lora_send+0x78>)
    14ce:	4605      	mov	r5, r0
    14d0:	8018      	strh	r0, [r3, #0]
    memcpy(data_crc, data, (size_t)data_len);                   // copy data
    14d2:	4622      	mov	r2, r4
    14d4:	23ff      	movs	r3, #255	; 0xff
    14d6:	4631      	mov	r1, r6
    14d8:	4638      	mov	r0, r7
    14da:	f01c f9e7 	bl	1d8ac <__memcpy_chk>
    14de:	533d      	strh	r5, [r7, r4]
    ret = lora_send(lora_dev, data_crc, (size_t)data_len + sizeof(crc));
    14e0:	f8d8 0000 	ldr.w	r0, [r8]
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
    14e4:	6883      	ldr	r3, [r0, #8]
    14e6:	1ca2      	adds	r2, r4, #2
    14e8:	685b      	ldr	r3, [r3, #4]
    14ea:	4639      	mov	r1, r7
    14ec:	4798      	blx	r3
    if (ret < 0)
    14ee:	2800      	cmp	r0, #0
        printk("LoRa send failed\n");
    14f0:	bfb4      	ite	lt
    14f2:	4806      	ldrlt	r0, [pc, #24]	; (150c <szl_lora_send+0x7c>)
    printk("Data sent!\n");
    14f4:	4806      	ldrge	r0, [pc, #24]	; (1510 <szl_lora_send+0x80>)
    14f6:	e7d5      	b.n	14a4 <szl_lora_send+0x14>
    14f8:	0001ec9f 	.word	0x0001ec9f
    14fc:	20000594 	.word	0x20000594
    1500:	0001ec8b 	.word	0x0001ec8b
    1504:	20001ab0 	.word	0x20001ab0
    1508:	2000109c 	.word	0x2000109c
    150c:	0001ecba 	.word	0x0001ecba
    1510:	0001eccc 	.word	0x0001eccc
    1514:	20000608 	.word	0x20000608

00001518 <main>:

//Test
#include <hal/nrf_uarte.h>

void main(void)
{
    1518:	b530      	push	{r4, r5, lr}
  NRF_UARTE0->CONFIG = NRF_UARTE_PARITY_INCLUDED;
    151a:	4c13      	ldr	r4, [pc, #76]	; (1568 <main+0x50>)
  printk("Init Application\n");
    151c:	4813      	ldr	r0, [pc, #76]	; (156c <main+0x54>)
  NRF_UARTE0->CONFIG = NRF_UARTE_PARITY_INCLUDED;
    151e:	250e      	movs	r5, #14
{
    1520:	b0c1      	sub	sp, #260	; 0x104
  NRF_UARTE0->CONFIG = NRF_UARTE_PARITY_INCLUDED;
    1522:	f8c4 556c 	str.w	r5, [r4, #1388]	; 0x56c
  printk("Init Application\n");
    1526:	f01a fb68 	bl	1bbfa <printk>
  printk("Config: %u\n",NRF_UARTE0->CONFIG);
    152a:	f8d4 156c 	ldr.w	r1, [r4, #1388]	; 0x56c
    152e:	4810      	ldr	r0, [pc, #64]	; (1570 <main+0x58>)
    1530:	f01a fb63 	bl	1bbfa <printk>
  printk("Baud: %u\n",NRF_UARTE0->BAUDRATE);
    1534:	480f      	ldr	r0, [pc, #60]	; (1574 <main+0x5c>)
    1536:	f8d4 1524 	ldr.w	r1, [r4, #1316]	; 0x524
    153a:	f01a fb5e 	bl	1bbfa <printk>
  NRF_UARTE0->CONFIG = NRF_UARTE_PARITY_INCLUDED;
    153e:	f8c4 556c 	str.w	r5, [r4, #1388]	; 0x56c
  init_mbus_comp_gpiote();  
    1542:	f7ff fc51 	bl	de8 <init_mbus_comp_gpiote>
  dlms_push_listener_init();
    1546:	f7ff fd9b 	bl	1080 <dlms_push_listener_init>
  szl_lora_init();
    154a:	f7ff ff71 	bl	1430 <szl_lora_init>

  printk("Starting Application\n");
    154e:	480a      	ldr	r0, [pc, #40]	; (1578 <main+0x60>)
    1550:	f01a fb53 	bl	1bbfa <printk>
  char buffer[255];
  int sz;
  while (1)
  {
    dlms_push_listener_rx(); //Wait for a DLMS Package Received
    1554:	f7ff fdd2 	bl	10fc <dlms_push_listener_rx>
    sz = sponge_encode(buffer); //Encode the Received Data into Sponge structure
    1558:	4668      	mov	r0, sp
    155a:	f7ff fd11 	bl	f80 <sponge_encode>
    155e:	4601      	mov	r1, r0
    szl_lora_send(buffer,sz); //Send the Encoded Buffer over LoRa
    1560:	4668      	mov	r0, sp
    1562:	f7ff ff95 	bl	1490 <szl_lora_send>
  while (1)
    1566:	e7f5      	b.n	1554 <main+0x3c>
    1568:	40002000 	.word	0x40002000
    156c:	0001ecd8 	.word	0x0001ecd8
    1570:	0001ecea 	.word	0x0001ecea
    1574:	0001ecf6 	.word	0x0001ecf6
    1578:	0001ed00 	.word	0x0001ed00

0000157c <ba_getByteCount>:
#include "../include/bitarray.h"
#include "../include/helpers.h"

//Returs needed amount of bytes to store bits.
uint16_t ba_getByteCount(uint16_t bitCount)
{
    157c:	b510      	push	{r4, lr}
    157e:	4604      	mov	r4, r0
    double d = bitCount;
    1580:	f7fe ff50 	bl	424 <__aeabi_ui2d>
    1584:	4602      	mov	r2, r0
    1586:	460b      	mov	r3, r1
    if (bitCount != 0)
    1588:	b174      	cbz	r4, 15a8 <ba_getByteCount+0x2c>
    {
        d /= 8;
    158a:	2200      	movs	r2, #0
    158c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    1590:	f7fe ffc2 	bl	518 <__aeabi_dmul>
        if (bitCount == 0 || (bitCount % 8) != 0)
    1594:	0764      	lsls	r4, r4, #29
        d /= 8;
    1596:	4602      	mov	r2, r0
    1598:	460b      	mov	r3, r1
        if (bitCount == 0 || (bitCount % 8) != 0)
    159a:	d005      	beq.n	15a8 <ba_getByteCount+0x2c>
        {
            ++d;
    159c:	4b05      	ldr	r3, [pc, #20]	; (15b4 <ba_getByteCount+0x38>)
    159e:	2200      	movs	r2, #0
    15a0:	f7fe fe04 	bl	1ac <__adddf3>
    15a4:	4602      	mov	r2, r0
    15a6:	460b      	mov	r3, r1
        }
    }
    return (uint16_t)d;
    15a8:	4610      	mov	r0, r2
    15aa:	4619      	mov	r1, r3
    15ac:	f7ff f9ee 	bl	98c <__aeabi_d2uiz>
}
    15b0:	b280      	uxth	r0, r0
    15b2:	bd10      	pop	{r4, pc}
    15b4:	3ff00000 	.word	0x3ff00000

000015b8 <cip_init>:
#include "../include/ciphering.h"
#include "../include/helpers.h"
#include "../include/gxaes.h"

void cip_init(ciphering* target)
{
    15b8:	b570      	push	{r4, r5, r6, lr}
    static const unsigned char DEFAUlT_BLOCK_CIPHER_KEY[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
    static const unsigned char DEFAULT_SYSTEM_TITLE[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48 };
    static const unsigned char DEFAUlT_AUTHENTICATION_KEY[] = { 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
                                                                0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
    };
    target->invocationCounter = 0;
    15ba:	2500      	movs	r5, #0
    target->suite = DLMS_SECURITY_SUITE_V0;
    target->security = DLMS_SECURITY_NONE;
    target->encrypt = 0;
#ifndef DLMS_IGNORE_MALLOC
    BYTE_BUFFER_INIT(&target->blockCipherKey);
    15bc:	1d06      	adds	r6, r0, #4
{
    15be:	4604      	mov	r4, r0
    target->invocationCounter = 0;
    15c0:	61c5      	str	r5, [r0, #28]
    target->security = DLMS_SECURITY_NONE;
    15c2:	8005      	strh	r5, [r0, #0]
    target->encrypt = 0;
    15c4:	7085      	strb	r5, [r0, #2]
    BYTE_BUFFER_INIT(&target->blockCipherKey);
    15c6:	4630      	mov	r0, r6
    15c8:	f00c f970 	bl	d8ac <bb_init>
    bb_set(&target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    15cc:	490d      	ldr	r1, [pc, #52]	; (1604 <cip_init+0x4c>)
    15ce:	2210      	movs	r2, #16
    15d0:	4630      	mov	r0, r6
    BYTE_BUFFER_INIT(&target->systemTitle);
    15d2:	f104 0610 	add.w	r6, r4, #16
    bb_set(&target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    15d6:	f00c fab8 	bl	db4a <bb_set>
    BYTE_BUFFER_INIT(&target->systemTitle);
    15da:	4630      	mov	r0, r6
    15dc:	f00c f966 	bl	d8ac <bb_init>
    bb_set(&target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    15e0:	4909      	ldr	r1, [pc, #36]	; (1608 <cip_init+0x50>)
    15e2:	2208      	movs	r2, #8
    15e4:	4630      	mov	r0, r6
    BYTE_BUFFER_INIT(&target->authenticationKey);
    15e6:	f104 0620 	add.w	r6, r4, #32
    bb_set(&target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    15ea:	f00c faae 	bl	db4a <bb_set>
    BYTE_BUFFER_INIT(&target->authenticationKey);
    15ee:	4630      	mov	r0, r6
    15f0:	f00c f95c 	bl	d8ac <bb_init>
    bb_set(&target->authenticationKey, DEFAUlT_AUTHENTICATION_KEY, sizeof(DEFAUlT_AUTHENTICATION_KEY));
    15f4:	4905      	ldr	r1, [pc, #20]	; (160c <cip_init+0x54>)
    15f6:	2210      	movs	r2, #16
    15f8:	4630      	mov	r0, r6
    15fa:	f00c faa6 	bl	db4a <bb_set>
    target->dedicatedKey = NULL;
    15fe:	62e5      	str	r5, [r4, #44]	; 0x2c
    memcpy(target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    memcpy(target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    memcpy(target->authenticationKey, DEFAUlT_AUTHENTICATION_KEY, sizeof(DEFAUlT_AUTHENTICATION_KEY));
    memset(target->dedicatedKey, 0, 16);
#endif //DLMS_IGNORE_MALLOC
}
    1600:	bd70      	pop	{r4, r5, r6, pc}
    1602:	bf00      	nop
    1604:	0001ed30 	.word	0x0001ed30
    1608:	0001ed18 	.word	0x0001ed18
    160c:	0001ed20 	.word	0x0001ed20

00001610 <cip_int>:
#define TE444(i) ((GetTe((i) & 0xff) >> 8) & 0x000000ff)

int cip_int(uint32_t* rk,
    const unsigned char* cipherKey,
    uint16_t keyBits)
{
    1610:	b5f0      	push	{r4, r5, r6, r7, lr}
    1612:	680b      	ldr	r3, [r1, #0]
    1614:	ba1b      	rev	r3, r3
    uint8_t i;
    uint32_t temp;

    rk[0] = GETU32(cipherKey);
    1616:	6003      	str	r3, [r0, #0]
    rk[1] = GETU32(cipherKey + 4);
    1618:	684b      	ldr	r3, [r1, #4]
    161a:	ba1b      	rev	r3, r3
    161c:	6043      	str	r3, [r0, #4]
    rk[2] = GETU32(cipherKey + 8);
    161e:	688b      	ldr	r3, [r1, #8]
    1620:	ba1b      	rev	r3, r3
    1622:	6083      	str	r3, [r0, #8]
    rk[3] = GETU32(cipherKey + 12);
    1624:	68cb      	ldr	r3, [r1, #12]

    if (keyBits == 128)
    1626:	2a80      	cmp	r2, #128	; 0x80
    1628:	ba1b      	rev	r3, r3
    rk[3] = GETU32(cipherKey + 12);
    162a:	60c3      	str	r3, [r0, #12]
    if (keyBits == 128)
    162c:	d134      	bne.n	1698 <cip_int+0x88>
    162e:	4c76      	ldr	r4, [pc, #472]	; (1808 <cip_int+0x1f8>)
    return __TE[offset];
    1630:	4976      	ldr	r1, [pc, #472]	; (180c <cip_int+0x1fc>)
    1632:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
    {
        for (i = 0; i < 10; i++)
        {
            temp = rk[3];
    1636:	68c2      	ldr	r2, [r0, #12]
    return __R_CON[offset];
    1638:	f814 7b01 	ldrb.w	r7, [r4], #1
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
                TE443(temp) ^ TE414(temp);
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    163c:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    163e:	b2d3      	uxtb	r3, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1640:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
                TE443(temp) ^ TE414(temp);
    1644:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1648:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    164c:	4073      	eors	r3, r6
    return __TE[offset];
    164e:	f3c2 2607 	ubfx	r6, r2, #8, #8
            rk[5] = rk[1] ^ rk[4];
            rk[6] = rk[2] ^ rk[5];
            rk[7] = rk[3] ^ rk[6];
            rk += 4;
    1652:	3010      	adds	r0, #16
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1654:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    1658:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    165c:	4073      	eors	r3, r6
                TE443(temp) ^ TE414(temp);
    165e:	0e16      	lsrs	r6, r2, #24
    1660:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    1664:	f3c6 2607 	ubfx	r6, r6, #8, #8
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1668:	4073      	eors	r3, r6
    return __TE[offset];
    166a:	f3c2 4607 	ubfx	r6, r2, #16, #8
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    166e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    1672:	0236      	lsls	r6, r6, #8
    1674:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1678:	4073      	eors	r3, r6
            rk[5] = rk[1] ^ rk[4];
    167a:	f850 6c0c 	ldr.w	r6, [r0, #-12]
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    167e:	6003      	str	r3, [r0, #0]
            rk[5] = rk[1] ^ rk[4];
    1680:	4073      	eors	r3, r6
            rk[6] = rk[2] ^ rk[5];
    1682:	f850 6c08 	ldr.w	r6, [r0, #-8]
            rk[5] = rk[1] ^ rk[4];
    1686:	6043      	str	r3, [r0, #4]
            rk[6] = rk[2] ^ rk[5];
    1688:	4073      	eors	r3, r6
    168a:	6083      	str	r3, [r0, #8]
            rk[7] = rk[3] ^ rk[6];
    168c:	4053      	eors	r3, r2
    168e:	60c3      	str	r3, [r0, #12]
        for (i = 0; i < 10; i++)
    1690:	4285      	cmp	r5, r0
    1692:	d1d0      	bne.n	1636 <cip_int+0x26>
        }
        return 0;
    1694:	2000      	movs	r0, #0
            rk[15] = rk[7] ^ rk[14];
            rk += 8;
        }
    }
    return DLMS_ERROR_CODE_INVALID_PARAMETER;
}
    1696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rk[4] = GETU32(cipherKey + 16);
    1698:	690b      	ldr	r3, [r1, #16]
    169a:	ba1b      	rev	r3, r3
    169c:	6103      	str	r3, [r0, #16]
    rk[5] = GETU32(cipherKey + 20);
    169e:	694b      	ldr	r3, [r1, #20]
    if (keyBits == 192)
    16a0:	2ac0      	cmp	r2, #192	; 0xc0
    16a2:	ba1b      	rev	r3, r3
    rk[5] = GETU32(cipherKey + 20);
    16a4:	6143      	str	r3, [r0, #20]
    if (keyBits == 192)
    16a6:	d141      	bne.n	172c <cip_int+0x11c>
    16a8:	4c57      	ldr	r4, [pc, #348]	; (1808 <cip_int+0x1f8>)
    return __TE[offset];
    16aa:	4958      	ldr	r1, [pc, #352]	; (180c <cip_int+0x1fc>)
    16ac:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
            temp = rk[5];
    16b0:	6942      	ldr	r2, [r0, #20]
    return __R_CON[offset];
    16b2:	f814 7b01 	ldrb.w	r7, [r4], #1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    16b6:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    16b8:	b2d3      	uxtb	r3, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    16ba:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
    16be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    16c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    16c6:	4073      	eors	r3, r6
    return __TE[offset];
    16c8:	f3c2 2607 	ubfx	r6, r2, #8, #8
            if (i == 7)
    16cc:	4285      	cmp	r5, r0
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    16ce:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    16d2:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    16d6:	ea83 0306 	eor.w	r3, r3, r6
    16da:	ea4f 6612 	mov.w	r6, r2, lsr #24
    16de:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    16e2:	f3c6 2607 	ubfx	r6, r6, #8, #8
    16e6:	ea83 0306 	eor.w	r3, r3, r6
    return __TE[offset];
    16ea:	f3c2 4607 	ubfx	r6, r2, #16, #8
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    16ee:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    16f2:	ea4f 2606 	mov.w	r6, r6, lsl #8
    16f6:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    16fa:	ea83 0306 	eor.w	r3, r3, r6
            rk[7] = rk[1] ^ rk[6];
    16fe:	6846      	ldr	r6, [r0, #4]
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1700:	6183      	str	r3, [r0, #24]
            rk[7] = rk[1] ^ rk[6];
    1702:	ea83 0306 	eor.w	r3, r3, r6
            rk[8] = rk[2] ^ rk[7];
    1706:	6886      	ldr	r6, [r0, #8]
            rk[7] = rk[1] ^ rk[6];
    1708:	61c3      	str	r3, [r0, #28]
            rk[8] = rk[2] ^ rk[7];
    170a:	ea83 0306 	eor.w	r3, r3, r6
            rk[9] = rk[3] ^ rk[8];
    170e:	68c6      	ldr	r6, [r0, #12]
            rk[8] = rk[2] ^ rk[7];
    1710:	6203      	str	r3, [r0, #32]
            rk[9] = rk[3] ^ rk[8];
    1712:	ea83 0306 	eor.w	r3, r3, r6
    1716:	6243      	str	r3, [r0, #36]	; 0x24
            if (i == 7)
    1718:	d101      	bne.n	171e <cip_int+0x10e>
                return 12;
    171a:	200c      	movs	r0, #12
    171c:	e7bb      	b.n	1696 <cip_int+0x86>
            rk[10] = rk[4] ^ rk[9];
    171e:	6906      	ldr	r6, [r0, #16]
    1720:	4073      	eors	r3, r6
    1722:	6283      	str	r3, [r0, #40]	; 0x28
            rk[11] = rk[5] ^ rk[10];
    1724:	4053      	eors	r3, r2
    1726:	62c3      	str	r3, [r0, #44]	; 0x2c
            rk += 6;
    1728:	3018      	adds	r0, #24
        for (i = 0; i < 8; i++)
    172a:	e7c1      	b.n	16b0 <cip_int+0xa0>
    rk[6] = GETU32(cipherKey + 24);
    172c:	698b      	ldr	r3, [r1, #24]
    172e:	ba1b      	rev	r3, r3
    1730:	6183      	str	r3, [r0, #24]
    rk[7] = GETU32(cipherKey + 28);
    1732:	69cb      	ldr	r3, [r1, #28]
    if (keyBits == 256)
    1734:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    1738:	ba1b      	rev	r3, r3
    rk[7] = GETU32(cipherKey + 28);
    173a:	61c3      	str	r3, [r0, #28]
    if (keyBits == 256)
    173c:	d161      	bne.n	1802 <cip_int+0x1f2>
    173e:	4c32      	ldr	r4, [pc, #200]	; (1808 <cip_int+0x1f8>)
    return __TE[offset];
    1740:	4a32      	ldr	r2, [pc, #200]	; (180c <cip_int+0x1fc>)
    1742:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
            temp = rk[7];
    1746:	69c1      	ldr	r1, [r0, #28]
    return __R_CON[offset];
    1748:	f814 7b01 	ldrb.w	r7, [r4], #1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    174c:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    174e:	b2cb      	uxtb	r3, r1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1750:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
    1754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1758:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    175c:	4073      	eors	r3, r6
    return __TE[offset];
    175e:	f3c1 2607 	ubfx	r6, r1, #8, #8
            if (i == 6)
    1762:	4285      	cmp	r5, r0
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1764:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    1768:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    176c:	ea83 0306 	eor.w	r3, r3, r6
    1770:	ea4f 6611 	mov.w	r6, r1, lsr #24
    1774:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    1778:	f3c6 2607 	ubfx	r6, r6, #8, #8
    177c:	ea83 0306 	eor.w	r3, r3, r6
    return __TE[offset];
    1780:	f3c1 4607 	ubfx	r6, r1, #16, #8
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1784:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    1788:	ea4f 2606 	mov.w	r6, r6, lsl #8
    178c:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1790:	ea83 0306 	eor.w	r3, r3, r6
            rk[9] = rk[1] ^ rk[8];
    1794:	6846      	ldr	r6, [r0, #4]
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1796:	6203      	str	r3, [r0, #32]
            rk[9] = rk[1] ^ rk[8];
    1798:	ea83 0306 	eor.w	r3, r3, r6
            rk[10] = rk[2] ^ rk[9];
    179c:	6886      	ldr	r6, [r0, #8]
            rk[9] = rk[1] ^ rk[8];
    179e:	6243      	str	r3, [r0, #36]	; 0x24
            rk[10] = rk[2] ^ rk[9];
    17a0:	ea83 0306 	eor.w	r3, r3, r6
            rk[11] = rk[3] ^ rk[10];
    17a4:	68c6      	ldr	r6, [r0, #12]
            rk[10] = rk[2] ^ rk[9];
    17a6:	6283      	str	r3, [r0, #40]	; 0x28
            rk[11] = rk[3] ^ rk[10];
    17a8:	ea83 0306 	eor.w	r3, r3, r6
    17ac:	62c3      	str	r3, [r0, #44]	; 0x2c
            if (i == 6)
    17ae:	d101      	bne.n	17b4 <cip_int+0x1a4>
                return 14;
    17b0:	200e      	movs	r0, #14
    17b2:	e770      	b.n	1696 <cip_int+0x86>
    return __TE[offset];
    17b4:	f3c3 2607 	ubfx	r6, r3, #8, #8
    17b8:	b2df      	uxtb	r7, r3
                TE433(temp) ^ TE444(temp);
    17ba:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    17be:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    17c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    17c6:	f3c7 2707 	ubfx	r7, r7, #8, #8
    17ca:	433e      	orrs	r6, r7
    17cc:	6907      	ldr	r7, [r0, #16]
    17ce:	407e      	eors	r6, r7
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    17d0:	0e1f      	lsrs	r7, r3, #24
    return __TE[offset];
    17d2:	f3c3 4307 	ubfx	r3, r3, #16, #8
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    17d6:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    17da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    17de:	023f      	lsls	r7, r7, #8
    17e0:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
    17e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                TE433(temp) ^ TE444(temp);
    17e8:	433b      	orrs	r3, r7
    17ea:	4073      	eors	r3, r6
            rk[13] = rk[5] ^ rk[12];
    17ec:	6946      	ldr	r6, [r0, #20]
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    17ee:	6303      	str	r3, [r0, #48]	; 0x30
            rk[13] = rk[5] ^ rk[12];
    17f0:	4073      	eors	r3, r6
            rk[14] = rk[6] ^ rk[13];
    17f2:	6986      	ldr	r6, [r0, #24]
            rk[13] = rk[5] ^ rk[12];
    17f4:	6343      	str	r3, [r0, #52]	; 0x34
            rk[14] = rk[6] ^ rk[13];
    17f6:	4073      	eors	r3, r6
            rk[15] = rk[7] ^ rk[14];
    17f8:	4059      	eors	r1, r3
            rk[14] = rk[6] ^ rk[13];
    17fa:	6383      	str	r3, [r0, #56]	; 0x38
            rk[15] = rk[7] ^ rk[14];
    17fc:	63c1      	str	r1, [r0, #60]	; 0x3c
            rk += 8;
    17fe:	3020      	adds	r0, #32
        for (i = 0; i < 7; i++)
    1800:	e7a1      	b.n	1746 <cip_int+0x136>
    return DLMS_ERROR_CODE_INVALID_PARAMETER;
    1802:	f44f 7081 	mov.w	r0, #258	; 0x102
    1806:	e746      	b.n	1696 <cip_int+0x86>
    1808:	0001ed48 	.word	0x0001ed48
    180c:	0001e15c 	.word	0x0001e15c

00001810 <aes_Encrypt>:

//Arduino DOIT ESP32 uses aes_encrypt. For that reason aes_Encrypt is used.
void aes_Encrypt(const uint32_t* rk, int Nr, const unsigned char* pt, unsigned char* ct)
{
    1810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1814:	6814      	ldr	r4, [r2, #0]
    uint32_t s0, s1, s2, s3, t0, t1, t2, t3;
    int r;
    s0 = GETU32(pt) ^ rk[0];
    1816:	6805      	ldr	r5, [r0, #0]
    1818:	6857      	ldr	r7, [r2, #4]
    181a:	6896      	ldr	r6, [r2, #8]
    181c:	ba24      	rev	r4, r4
    181e:	406c      	eors	r4, r5
    s1 = GETU32(pt + 4) ^ rk[1];
    1820:	6845      	ldr	r5, [r0, #4]
    1822:	ba3f      	rev	r7, r7
    1824:	406f      	eors	r7, r5
    s2 = GETU32(pt + 8) ^ rk[2];
    1826:	6885      	ldr	r5, [r0, #8]
    1828:	ba36      	rev	r6, r6
    182a:	406e      	eors	r6, r5
    s3 = GETU32(pt + 12) ^ rk[3];
    182c:	68d5      	ldr	r5, [r2, #12]
    182e:	68c2      	ldr	r2, [r0, #12]
{
    1830:	b08b      	sub	sp, #44	; 0x2c
    1832:	ba2d      	rev	r5, r5
    s3 = GETU32(pt + 12) ^ rk[3];
    1834:	4055      	eors	r5, r2
d##1 = TE0(s##1) ^ TE1(s##2) ^ TE2(s##3) ^ TE3(s##0) ^ rk[4 * i + 1]; \
d##2 = TE0(s##2) ^ TE1(s##3) ^ TE2(s##0) ^ TE3(s##1) ^ rk[4 * i + 2]; \
d##3 = TE0(s##3) ^ TE1(s##0) ^ TE2(s##1) ^ TE3(s##2) ^ rk[4 * i + 3]

    /* Nr - 1 full rounds: */
    r = Nr >> 1;
    1836:	104a      	asrs	r2, r1, #1
    1838:	9201      	str	r2, [sp, #4]
    183a:	4693      	mov	fp, r2
    return __TE[offset];
    183c:	4aa4      	ldr	r2, [pc, #656]	; (1ad0 <aes_Encrypt+0x2c0>)
    183e:	4684      	mov	ip, r0
    for (;;)
    {
        ROUND(1, t, s);
    1840:	ea4f 6e14 	mov.w	lr, r4, lsr #24
    return __TE[offset];
    1844:	fa5f f885 	uxtb.w	r8, r5
        ROUND(1, t, s);
    1848:	f8dc 1010 	ldr.w	r1, [ip, #16]
    184c:	f852 e02e 	ldr.w	lr, [r2, lr, lsl #2]
    1850:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    1854:	ea8e 0e01 	eor.w	lr, lr, r1
    1858:	ea8e 6e38 	eor.w	lr, lr, r8, ror #24
    return __TE[offset];
    185c:	f3c7 4807 	ubfx	r8, r7, #16, #8
    1860:	fa5f f984 	uxtb.w	r9, r4
        ROUND(1, t, s);
    1864:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    1868:	f8dc 1014 	ldr.w	r1, [ip, #20]
    186c:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    1870:	ea8e 2e38 	eor.w	lr, lr, r8, ror #8
    return __TE[offset];
    1874:	f3c6 2807 	ubfx	r8, r6, #8, #8
    1878:	fa5f fa87 	uxtb.w	sl, r7
        ROUND(1, t, s);
    187c:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    1880:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    1884:	ea8e 4e38 	eor.w	lr, lr, r8, ror #16
    1888:	ea4f 6817 	mov.w	r8, r7, lsr #24
    return __TE[offset];
    188c:	f3c7 2707 	ubfx	r7, r7, #8, #8
        ROUND(1, t, s);
    1890:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    1894:	ea88 0801 	eor.w	r8, r8, r1
    1898:	ea88 6839 	eor.w	r8, r8, r9, ror #24
    return __TE[offset];
    189c:	f3c6 4907 	ubfx	r9, r6, #16, #8
        ROUND(1, t, s);
    18a0:	f8dc 1018 	ldr.w	r1, [ip, #24]
    18a4:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    18a8:	ea88 2839 	eor.w	r8, r8, r9, ror #8
    return __TE[offset];
    18ac:	f3c5 2907 	ubfx	r9, r5, #8, #8
        rk += 8;
        if (--r == 0)
    18b0:	f1bb 0b01 	subs.w	fp, fp, #1
        ROUND(1, t, s);
    18b4:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    18b8:	ea88 4839 	eor.w	r8, r8, r9, ror #16
    18bc:	ea4f 6916 	mov.w	r9, r6, lsr #24
    return __TE[offset];
    18c0:	b2f6      	uxtb	r6, r6
        ROUND(1, t, s);
    18c2:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    18c6:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    18ca:	ea89 0901 	eor.w	r9, r9, r1
    18ce:	ea89 693a 	eor.w	r9, r9, sl, ror #24
    return __TE[offset];
    18d2:	f3c5 4a07 	ubfx	sl, r5, #16, #8
        ROUND(1, t, s);
    18d6:	ea4f 6515 	mov.w	r5, r5, lsr #24
    18da:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    18de:	f8dc 101c 	ldr.w	r1, [ip, #28]
    18e2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    18e6:	ea89 293a 	eor.w	r9, r9, sl, ror #8
    return __TE[offset];
    18ea:	f3c4 2a07 	ubfx	sl, r4, #8, #8
    18ee:	f3c4 4407 	ubfx	r4, r4, #16, #8
        ROUND(1, t, s);
    18f2:	ea85 0501 	eor.w	r5, r5, r1
    18f6:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
    18fa:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    18fe:	ea85 6536 	eor.w	r5, r5, r6, ror #24
    1902:	ea85 2534 	eor.w	r5, r5, r4, ror #8
    1906:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]
    190a:	ea85 4534 	eor.w	r5, r5, r4, ror #16
    190e:	ea4f 6615 	mov.w	r6, r5, lsr #24
    1912:	ea89 493a 	eor.w	r9, r9, sl, ror #16
        if (--r == 0)
    1916:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    191a:	9102      	str	r1, [sp, #8]
    191c:	f3ce 4607 	ubfx	r6, lr, #16, #8
    1920:	f85c 4f20 	ldr.w	r4, [ip, #32]!
    1924:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1928:	9103      	str	r1, [sp, #12]
    192a:	f3c8 2607 	ubfx	r6, r8, #8, #8
    192e:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1932:	9104      	str	r1, [sp, #16]
    1934:	fa5f f689 	uxtb.w	r6, r9
    1938:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    193c:	9105      	str	r1, [sp, #20]
    193e:	fa5f f688 	uxtb.w	r6, r8
    1942:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1946:	9106      	str	r1, [sp, #24]
    1948:	f3ce 2607 	ubfx	r6, lr, #8, #8
    194c:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1950:	9107      	str	r1, [sp, #28]
    1952:	f3c5 4607 	ubfx	r6, r5, #16, #8
    1956:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    195a:	9108      	str	r1, [sp, #32]
    195c:	ea4f 6619 	mov.w	r6, r9, lsr #24
    1960:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1964:	9109      	str	r1, [sp, #36]	; 0x24
    1966:	fa5f f68e 	uxtb.w	r6, lr
    196a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    196e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
    1972:	f852 e02e 	ldr.w	lr, [r2, lr, lsl #2]
    1976:	f3c5 2607 	ubfx	r6, r5, #8, #8
    197a:	b2ed      	uxtb	r5, r5
    197c:	f852 a026 	ldr.w	sl, [r2, r6, lsl #2]
    1980:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    1984:	f3c9 4607 	ubfx	r6, r9, #16, #8
    1988:	f3c9 2907 	ubfx	r9, r9, #8, #8
    198c:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1990:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    1994:	ea4f 6618 	mov.w	r6, r8, lsr #24
    1998:	f3c8 4807 	ubfx	r8, r8, #16, #8
    199c:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    19a0:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    19a4:	d02c      	beq.n	1a00 <aes_Encrypt+0x1f0>
            break;
        ROUND(0, s, t);
    19a6:	ea84 040e 	eor.w	r4, r4, lr
    19aa:	ea84 6435 	eor.w	r4, r4, r5, ror #24
    19ae:	f8dc 5004 	ldr.w	r5, [ip, #4]
    19b2:	406e      	eors	r6, r5
    19b4:	ea86 6637 	eor.w	r6, r6, r7, ror #24
    19b8:	ea86 2731 	eor.w	r7, r6, r1, ror #8
    19bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
    19be:	f8dc 6008 	ldr.w	r6, [ip, #8]
    19c2:	9906      	ldr	r1, [sp, #24]
    19c4:	4075      	eors	r5, r6
    19c6:	ea85 6631 	eor.w	r6, r5, r1, ror #24
    19ca:	9908      	ldr	r1, [sp, #32]
    19cc:	f8dc 500c 	ldr.w	r5, [ip, #12]
    19d0:	ea86 2631 	eor.w	r6, r6, r1, ror #8
    19d4:	9907      	ldr	r1, [sp, #28]
    19d6:	ea86 4631 	eor.w	r6, r6, r1, ror #16
    19da:	9902      	ldr	r1, [sp, #8]
    19dc:	4069      	eors	r1, r5
    19de:	460d      	mov	r5, r1
    19e0:	9905      	ldr	r1, [sp, #20]
    19e2:	ea85 6531 	eor.w	r5, r5, r1, ror #24
    19e6:	9903      	ldr	r1, [sp, #12]
    19e8:	ea85 2531 	eor.w	r5, r5, r1, ror #8
    19ec:	9904      	ldr	r1, [sp, #16]
    19ee:	ea84 2438 	eor.w	r4, r4, r8, ror #8
    19f2:	ea84 4439 	eor.w	r4, r4, r9, ror #16
    19f6:	ea87 473a 	eor.w	r7, r7, sl, ror #16
    19fa:	ea85 4531 	eor.w	r5, r5, r1, ror #16
        ROUND(1, t, s);
    19fe:	e71f      	b.n	1840 <aes_Encrypt+0x30>
    }

#undef ROUND

    s0 = TE41(t0) ^ TE42(t1) ^ TE43(t2) ^ TE44(t3) ^ rk[0];
    1a00:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
    1a04:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
    1a08:	f00e 4e7f 	and.w	lr, lr, #4278190080	; 0xff000000
    1a0c:	f3c5 2507 	ubfx	r5, r5, #8, #8
    1a10:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
    1a14:	ea45 0509 	orr.w	r5, r5, r9
    1a18:	ea4e 0808 	orr.w	r8, lr, r8
    1a1c:	9a01      	ldr	r2, [sp, #4]
    1a1e:	ea85 0508 	eor.w	r5, r5, r8
    1a22:	406c      	eors	r4, r5
    1a24:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    PUT32(ct, s0);
    1a28:	0e22      	lsrs	r2, r4, #24
    1a2a:	701a      	strb	r2, [r3, #0]
    1a2c:	0c22      	lsrs	r2, r4, #16
    1a2e:	705a      	strb	r2, [r3, #1]
    1a30:	0a22      	lsrs	r2, r4, #8
    1a32:	709a      	strb	r2, [r3, #2]
    s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
    1a34:	0232      	lsls	r2, r6, #8
    1a36:	f401 0b7f 	and.w	fp, r1, #16711680	; 0xff0000
    1a3a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
    1a3e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    1a42:	f3c7 2707 	ubfx	r7, r7, #8, #8
    PUT32(ct, s0);
    1a46:	70dc      	strb	r4, [r3, #3]
    s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
    1a48:	ea42 020b 	orr.w	r2, r2, fp
    1a4c:	ea47 070a 	orr.w	r7, r7, sl
    1a50:	4057      	eors	r7, r2
    1a52:	6842      	ldr	r2, [r0, #4]
    1a54:	407a      	eors	r2, r7
    PUT32(ct + 4, s1);
    1a56:	0e11      	lsrs	r1, r2, #24
    1a58:	7119      	strb	r1, [r3, #4]
    1a5a:	0c11      	lsrs	r1, r2, #16
    1a5c:	7159      	strb	r1, [r3, #5]
    1a5e:	71da      	strb	r2, [r3, #7]
    1a60:	0a11      	lsrs	r1, r2, #8
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    1a62:	9a06      	ldr	r2, [sp, #24]
    PUT32(ct + 4, s1);
    1a64:	7199      	strb	r1, [r3, #6]
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    1a66:	f3c2 2607 	ubfx	r6, r2, #8, #8
    1a6a:	9a07      	ldr	r2, [sp, #28]
    1a6c:	9908      	ldr	r1, [sp, #32]
    1a6e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    1a72:	4316      	orrs	r6, r2
    1a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1a76:	0212      	lsls	r2, r2, #8
    1a78:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    1a7c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    1a80:	430a      	orrs	r2, r1
    1a82:	4056      	eors	r6, r2
    1a84:	6882      	ldr	r2, [r0, #8]
    PUT32(ct + 8, s2);
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    1a86:	9905      	ldr	r1, [sp, #20]
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    1a88:	4056      	eors	r6, r2
    PUT32(ct + 8, s2);
    1a8a:	0e32      	lsrs	r2, r6, #24
    1a8c:	721a      	strb	r2, [r3, #8]
    1a8e:	0c32      	lsrs	r2, r6, #16
    1a90:	725a      	strb	r2, [r3, #9]
    1a92:	0a32      	lsrs	r2, r6, #8
    1a94:	729a      	strb	r2, [r3, #10]
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    1a96:	9a02      	ldr	r2, [sp, #8]
    PUT32(ct + 8, s2);
    1a98:	72de      	strb	r6, [r3, #11]
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    1a9a:	0215      	lsls	r5, r2, #8
    1a9c:	9a03      	ldr	r2, [sp, #12]
    1a9e:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
    1aa2:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    1aa6:	432a      	orrs	r2, r5
    1aa8:	f3c1 2507 	ubfx	r5, r1, #8, #8
    1aac:	9904      	ldr	r1, [sp, #16]
    1aae:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    1ab2:	430d      	orrs	r5, r1
    1ab4:	4055      	eors	r5, r2
    1ab6:	68c2      	ldr	r2, [r0, #12]
    1ab8:	4055      	eors	r5, r2
    PUT32(ct + 12, s3);
    1aba:	0e2a      	lsrs	r2, r5, #24
    1abc:	731a      	strb	r2, [r3, #12]
    1abe:	0c2a      	lsrs	r2, r5, #16
    1ac0:	735a      	strb	r2, [r3, #13]
    1ac2:	0a2a      	lsrs	r2, r5, #8
    1ac4:	739a      	strb	r2, [r3, #14]
    1ac6:	73dd      	strb	r5, [r3, #15]
}
    1ac8:	b00b      	add	sp, #44	; 0x2c
    1aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ace:	bf00      	nop
    1ad0:	0001e15c 	.word	0x0001e15c

00001ad4 <cip_crypt>:
    unsigned char* systemTitle,
    unsigned char* key,
    gxByteBuffer* input,
    unsigned char encrypt)
#endif //DLMS_IGNORE_MALLOC
{
    1ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ad8:	b0db      	sub	sp, #364	; 0x16c
    int ret;
    uint32_t aes[61] = { 0 };
    unsigned char H[16] = { 0 };
    1ada:	2400      	movs	r4, #0
{
    1adc:	9002      	str	r0, [sp, #8]
    1ade:	9203      	str	r2, [sp, #12]
    1ae0:	460e      	mov	r6, r1
    uint32_t aes[61] = { 0 };
    1ae2:	22f4      	movs	r2, #244	; 0xf4
    1ae4:	2100      	movs	r1, #0
    1ae6:	a81d      	add	r0, sp, #116	; 0x74
{
    1ae8:	4699      	mov	r9, r3
    1aea:	f89d b190 	ldrb.w	fp, [sp, #400]	; 0x190
    1aee:	9d67      	ldr	r5, [sp, #412]	; 0x19c
    1af0:	f89d 71a0 	ldrb.w	r7, [sp, #416]	; 0x1a0
    uint32_t aes[61] = { 0 };
    1af4:	f01b ff07 	bl	1d906 <memset>
    unsigned char J0[16] = { 0 };
    unsigned char S[16] = { 0 };
    unsigned char NONSE[18] = { 0 };
    1af8:	220e      	movs	r2, #14
    1afa:	4621      	mov	r1, r4
    1afc:	a819      	add	r0, sp, #100	; 0x64
    unsigned char H[16] = { 0 };
    1afe:	e9cd 4408 	strd	r4, r4, [sp, #32]
    1b02:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    unsigned char J0[16] = { 0 };
    1b06:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    1b0a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    unsigned char S[16] = { 0 };
    1b0e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    1b12:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
    unsigned char NONSE[18] = { 0 };
    1b16:	9418      	str	r4, [sp, #96]	; 0x60
    1b18:	f01b fef5 	bl	1d906 <memset>
    gxByteBuffer nonse;
    if (memcmp(systemTitle, EMPTY_SYSTEM_TITLE, 8) == 0)
    1b1c:	497a      	ldr	r1, [pc, #488]	; (1d08 <cip_crypt+0x234>)
    1b1e:	9865      	ldr	r0, [sp, #404]	; 0x194
    1b20:	2208      	movs	r2, #8
    1b22:	f01b fea7 	bl	1d874 <memcmp>
    1b26:	2800      	cmp	r0, #0
    1b28:	f000 81a8 	beq.w	1e7c <cip_crypt+0x3a8>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    bb_attach(&nonse, NONSE, 0, sizeof(NONSE));
    1b2c:	4622      	mov	r2, r4
    1b2e:	2312      	movs	r3, #18
    1b30:	a918      	add	r1, sp, #96	; 0x60
    1b32:	a805      	add	r0, sp, #20
    1b34:	f00c f859 	bl	dbea <bb_attach>
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    1b38:	210c      	movs	r1, #12
    1b3a:	a805      	add	r0, sp, #20
    nonce->size = 0;
    1b3c:	f8ad 401a 	strh.w	r4, [sp, #26]
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    1b40:	f00b feba 	bl	d8b8 <bb_capacity>
    1b44:	4604      	mov	r4, r0
    1b46:	2800      	cmp	r0, #0
    1b48:	f040 8190 	bne.w	1e6c <cip_crypt+0x398>
        (ret = bb_set(nonce, systemTitle, 8)) != 0 ||
    1b4c:	9965      	ldr	r1, [sp, #404]	; 0x194
    1b4e:	2208      	movs	r2, #8
    1b50:	a805      	add	r0, sp, #20
    1b52:	f00b fffa 	bl	db4a <bb_set>
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    1b56:	4604      	mov	r4, r0
    1b58:	2800      	cmp	r0, #0
    1b5a:	f040 8187 	bne.w	1e6c <cip_crypt+0x398>
        (ret = bb_setUInt32(nonce, frameCounter)) != 0)
    1b5e:	4649      	mov	r1, r9
    1b60:	a805      	add	r0, sp, #20
    1b62:	f00b ff50 	bl	da06 <bb_setUInt32>
        (ret = bb_set(nonce, systemTitle, 8)) != 0 ||
    1b66:	4604      	mov	r4, r0
    1b68:	2800      	cmp	r0, #0
    1b6a:	f040 817f 	bne.w	1e6c <cip_crypt+0x398>
    if ((ret = cip_getNonse(frameCounter, systemTitle, &nonse)) != 0)
    {
        return ret;
    }
    if ((ret = cip_int(
    1b6e:	9b66      	ldr	r3, [sp, #408]	; 0x198
    1b70:	2280      	movs	r2, #128	; 0x80
    1b72:	6819      	ldr	r1, [r3, #0]
    1b74:	a81d      	add	r0, sp, #116	; 0x74
    1b76:	f7ff fd4b 	bl	1610 <cip_int>
    1b7a:	4604      	mov	r4, r0
    1b7c:	2800      	cmp	r0, #0
    1b7e:	f040 8175 	bne.w	1e6c <cip_crypt+0x398>
        return ret;
    }
    aes[60] = 10;

    //Hash subkey.
    aes_Encrypt(aes, aes[60], H, H);
    1b82:	ab08      	add	r3, sp, #32
    aes[60] = 10;
    1b84:	210a      	movs	r1, #10
    aes_Encrypt(aes, aes[60], H, H);
    1b86:	461a      	mov	r2, r3
    1b88:	a81d      	add	r0, sp, #116	; 0x74
    aes[60] = 10;
    1b8a:	9159      	str	r1, [sp, #356]	; 0x164
    aes_Encrypt(aes, aes[60], H, H);
    1b8c:	f7ff fe40 	bl	1810 <aes_Encrypt>
    cip_init_j0(nonse.data, (unsigned char)nonse.size, H, J0);
    1b90:	f89d 801a 	ldrb.w	r8, [sp, #26]
    1b94:	f8dd a014 	ldr.w	sl, [sp, #20]
    if (len == 12)
    1b98:	f1b8 0f0c 	cmp.w	r8, #12
    1b9c:	d176      	bne.n	1c8c <cip_crypt+0x1b8>
        memcpy(J0, iv, len);
    1b9e:	f8da 0000 	ldr.w	r0, [sl]
    1ba2:	f8da 1004 	ldr.w	r1, [sl, #4]
    1ba6:	ab0c      	add	r3, sp, #48	; 0x30
    1ba8:	c303      	stmia	r3!, {r0, r1}
    1baa:	f8da 0008 	ldr.w	r0, [sl, #8]
    1bae:	6018      	str	r0, [r3, #0]
        J0[15] = 0x01;
    1bb0:	2301      	movs	r3, #1
        memset(J0 + len, 0, 16 - len);
    1bb2:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    1bb6:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
        J0[15] = 0x01;
    1bba:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    //Allocate space for authentication tag.
    if (security != DLMS_SECURITY_ENCRYPTION && !encrypt)
    1bbe:	2e20      	cmp	r6, #32
    1bc0:	f000 8092 	beq.w	1ce8 <cip_crypt+0x214>
    1bc4:	2f00      	cmp	r7, #0
    1bc6:	f040 815c 	bne.w	1e82 <cip_crypt+0x3ae>
    {
        //Save authentication key to nonse.
        bb_clear(&nonse);
    1bca:	a805      	add	r0, sp, #20
    1bcc:	f00c f831 	bl	dc32 <bb_clear>
        ret = bb_set(&nonse, input->data + input->size - 12, 12);
    1bd0:	88eb      	ldrh	r3, [r5, #6]
    1bd2:	6829      	ldr	r1, [r5, #0]
    1bd4:	3b0c      	subs	r3, #12
    1bd6:	4419      	add	r1, r3
    1bd8:	220c      	movs	r2, #12
    1bda:	a805      	add	r0, sp, #20
    1bdc:	f00b ffb5 	bl	db4a <bb_set>
        input->size -= 12;
    1be0:	88eb      	ldrh	r3, [r5, #6]
    1be2:	3b0c      	subs	r3, #12
        ret = bb_set(&nonse, input->data + input->size - 12, 12);
    1be4:	4604      	mov	r4, r0
        input->size -= 12;
    1be6:	80eb      	strh	r3, [r5, #6]
    }

    if (security == DLMS_SECURITY_AUTHENTICATION)
    1be8:	2e10      	cmp	r6, #16
    1bea:	f040 808f 	bne.w	1d0c <cip_crypt+0x238>
    {
        if ((ret = bb_move(input, input->position, 17, bb_available(input))) == 0)
    1bee:	4628      	mov	r0, r5
    1bf0:	892c      	ldrh	r4, [r5, #8]
    1bf2:	f00b fe4e 	bl	d892 <bb_available>
    1bf6:	4621      	mov	r1, r4
    1bf8:	4603      	mov	r3, r0
    1bfa:	2211      	movs	r2, #17
    1bfc:	4628      	mov	r0, r5
    1bfe:	f00c f99e 	bl	df3e <bb_move>
    1c02:	4604      	mov	r4, r0
    1c04:	2800      	cmp	r0, #0
    1c06:	f040 8131 	bne.w	1e6c <cip_crypt+0x398>
        {
            input->position = 0;
            bb_setUInt8ByIndex(input, 0, security);
    1c0a:	4601      	mov	r1, r0
            input->position = 0;
    1c0c:	8128      	strh	r0, [r5, #8]
            bb_setUInt8ByIndex(input, 0, security);
    1c0e:	4632      	mov	r2, r6
    1c10:	4628      	mov	r0, r5
    1c12:	f00b fea5 	bl	d960 <bb_setUInt8ByIndex>
    1c16:	9b02      	ldr	r3, [sp, #8]
#ifndef DLMS_IGNORE_MALLOC
            memcpy(input->data + 1, settings->authenticationKey.data, 16);
    1c18:	682a      	ldr	r2, [r5, #0]
    1c1a:	6a1b      	ldr	r3, [r3, #32]
    1c1c:	3201      	adds	r2, #1
    1c1e:	f103 0110 	add.w	r1, r3, #16
    1c22:	f853 0b04 	ldr.w	r0, [r3], #4
    1c26:	f842 0b04 	str.w	r0, [r2], #4
    1c2a:	428b      	cmp	r3, r1
    1c2c:	d1f9      	bne.n	1c22 <cip_crypt+0x14e>
#else
            memcpy(input->data + 1, settings->authenticationKey, 16);
#endif //DLMS_IGNORE_MALLOC
            aes_gcm_ghash(H, input->data, input->size, input->data, 0, S);
    1c2e:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
    1c32:	f04f 0800 	mov.w	r8, #0
    1c36:	f8cd a004 	str.w	sl, [sp, #4]
    1c3a:	f8cd 8000 	str.w	r8, [sp]
    1c3e:	682b      	ldr	r3, [r5, #0]
    1c40:	88ea      	ldrh	r2, [r5, #6]
    1c42:	4619      	mov	r1, r3
    1c44:	a808      	add	r0, sp, #32
    1c46:	f00c facd 	bl	e1e4 <aes_gcm_ghash>
            ret = bb_move(input, 17, 0, input->size - 17);
    1c4a:	88eb      	ldrh	r3, [r5, #6]
    1c4c:	3b11      	subs	r3, #17
    1c4e:	b29b      	uxth	r3, r3
    1c50:	4642      	mov	r2, r8
    1c52:	2111      	movs	r1, #17
    1c54:	4628      	mov	r0, r5
    1c56:	f00c f972 	bl	df3e <bb_move>
            cip_gctr(aes, J0, S, sizeof(S), input->data + input->size);
    1c5a:	88ea      	ldrh	r2, [r5, #6]
    1c5c:	682b      	ldr	r3, [r5, #0]
    1c5e:	4413      	add	r3, r2
    1c60:	9300      	str	r3, [sp, #0]
    1c62:	a90c      	add	r1, sp, #48	; 0x30
            ret = bb_move(input, 17, 0, input->size - 17);
    1c64:	4604      	mov	r4, r0
    if (len == 0)
    1c66:	2310      	movs	r3, #16
    1c68:	4652      	mov	r2, sl
    1c6a:	a81d      	add	r0, sp, #116	; 0x74
    1c6c:	f00c fb0d 	bl	e28a <cip_gctr.part.0>
            if (encrypt)
    1c70:	88e9      	ldrh	r1, [r5, #6]
    1c72:	b36f      	cbz	r7, 1cd0 <cip_crypt+0x1fc>
            {
                if (type == DLMS_COUNT_TYPE_TAG)
    1c74:	9b03      	ldr	r3, [sp, #12]
    1c76:	2b01      	cmp	r3, #1
    1c78:	d127      	bne.n	1cca <cip_crypt+0x1f6>
                {
                    bb_move(input, input->size, 0, 12);
    1c7a:	230c      	movs	r3, #12
    1c7c:	4642      	mov	r2, r8
    1c7e:	4628      	mov	r0, r5
    1c80:	f00c f95d 	bl	df3e <bb_move>
                    }
                }
            }
        }
    }
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1c84:	2c00      	cmp	r4, #0
    1c86:	f000 80a6 	beq.w	1dd6 <cip_crypt+0x302>
    1c8a:	e0ef      	b.n	1e6c <cip_crypt+0x398>
        memset(J0, 0, 16);
    1c8c:	4621      	mov	r1, r4
    1c8e:	2210      	movs	r2, #16
    1c90:	a80c      	add	r0, sp, #48	; 0x30
    1c92:	f01b fe38 	bl	1d906 <memset>
        cip_getGHash(H, iv, len, J0);
    1c96:	ab0c      	add	r3, sp, #48	; 0x30
    1c98:	4642      	mov	r2, r8
    1c9a:	4651      	mov	r1, sl
    1c9c:	a808      	add	r0, sp, #32
    1c9e:	f00c fa59 	bl	e154 <cip_getGHash>
        PUT32(tmp + 12, (uint32_t)(len * 8));
    1ca2:	ea4f 1358 	mov.w	r3, r8, lsr #5
    1ca6:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    1caa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
        cip_getGHash(H, tmp, sizeof(tmp), J0);
    1cae:	ab0c      	add	r3, sp, #48	; 0x30
    1cb0:	2210      	movs	r2, #16
    1cb2:	a914      	add	r1, sp, #80	; 0x50
    1cb4:	a808      	add	r0, sp, #32
        PUT32(tmp + 4, (uint32_t)0);
    1cb6:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
        PUT32(tmp + 8, (uint32_t)0);
    1cba:	9416      	str	r4, [sp, #88]	; 0x58
        PUT32(tmp + 12, (uint32_t)(len * 8));
    1cbc:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
    1cc0:	f88d 805f 	strb.w	r8, [sp, #95]	; 0x5f
        cip_getGHash(H, tmp, sizeof(tmp), J0);
    1cc4:	f00c fa46 	bl	e154 <cip_getGHash>
    1cc8:	e779      	b.n	1bbe <cip_crypt+0xea>
                    input->size += 12;
    1cca:	310c      	adds	r1, #12
    1ccc:	80e9      	strh	r1, [r5, #6]
    1cce:	e7d9      	b.n	1c84 <cip_crypt+0x1b0>
                if (memcmp(NONSE, input->data + input->size, 12) != 0)
    1cd0:	682b      	ldr	r3, [r5, #0]
    1cd2:	220c      	movs	r2, #12
    1cd4:	4419      	add	r1, r3
    1cd6:	a818      	add	r0, sp, #96	; 0x60
    1cd8:	f01b fdcc 	bl	1d874 <memcmp>
    1cdc:	2800      	cmp	r0, #0
    1cde:	f000 80d2 	beq.w	1e86 <cip_crypt+0x3b2>
                        ret = DLMS_ERROR_CODE_INVALID_TAG;
    1ce2:	f240 140f 	movw	r4, #271	; 0x10f
    1ce6:	e0c1      	b.n	1e6c <cip_crypt+0x398>
        aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1ce8:	682a      	ldr	r2, [r5, #0]
    1cea:	892c      	ldrh	r4, [r5, #8]
    1cec:	4628      	mov	r0, r5
    1cee:	4414      	add	r4, r2
    1cf0:	f00b fdcf 	bl	d892 <bb_available>
    1cf4:	4622      	mov	r2, r4
    1cf6:	4603      	mov	r3, r0
    1cf8:	a90c      	add	r1, sp, #48	; 0x30
    1cfa:	a81d      	add	r0, sp, #116	; 0x74
    1cfc:	f00c fb17 	bl	e32e <aes_gcm_gctr.constprop.0>
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1d00:	2f00      	cmp	r7, #0
    1d02:	f000 80b2 	beq.w	1e6a <cip_crypt+0x396>
    1d06:	e066      	b.n	1dd6 <cip_crypt+0x302>
    1d08:	0001ed40 	.word	0x0001ed40
    else if (security == DLMS_SECURITY_AUTHENTICATION_ENCRYPTION)
    1d0c:	2e30      	cmp	r6, #48	; 0x30
    1d0e:	f040 80b1 	bne.w	1e74 <cip_crypt+0x3a0>
        if (encrypt)
    1d12:	b15f      	cbz	r7, 1d2c <cip_crypt+0x258>
            aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1d14:	682a      	ldr	r2, [r5, #0]
    1d16:	892c      	ldrh	r4, [r5, #8]
    1d18:	4628      	mov	r0, r5
    1d1a:	4414      	add	r4, r2
    1d1c:	f00b fdb9 	bl	d892 <bb_available>
    1d20:	4622      	mov	r2, r4
    1d22:	4603      	mov	r3, r0
    1d24:	a90c      	add	r1, sp, #48	; 0x30
    1d26:	a81d      	add	r0, sp, #116	; 0x74
    1d28:	f00c fb01 	bl	e32e <aes_gcm_gctr.constprop.0>
        if ((ret = bb_move(input, input->position, 17, bb_available(input))) == 0)
    1d2c:	4628      	mov	r0, r5
    1d2e:	892c      	ldrh	r4, [r5, #8]
    1d30:	f00b fdaf 	bl	d892 <bb_available>
    1d34:	4621      	mov	r1, r4
    1d36:	4603      	mov	r3, r0
    1d38:	2211      	movs	r2, #17
    1d3a:	4628      	mov	r0, r5
    1d3c:	f00c f8ff 	bl	df3e <bb_move>
    1d40:	4604      	mov	r4, r0
    1d42:	2800      	cmp	r0, #0
    1d44:	f040 8092 	bne.w	1e6c <cip_crypt+0x398>
            ret = bb_setUInt8ByIndex(input, 0, security);
    1d48:	4601      	mov	r1, r0
            input->position = 0;
    1d4a:	8128      	strh	r0, [r5, #8]
            ret = bb_setUInt8ByIndex(input, 0, security);
    1d4c:	2230      	movs	r2, #48	; 0x30
    1d4e:	4628      	mov	r0, r5
    1d50:	f00b fe06 	bl	d960 <bb_setUInt8ByIndex>
    1d54:	9b02      	ldr	r3, [sp, #8]
            memcpy(input->data + 1, settings->authenticationKey.data, 16);
    1d56:	682a      	ldr	r2, [r5, #0]
    1d58:	6a1b      	ldr	r3, [r3, #32]
    1d5a:	3201      	adds	r2, #1
    1d5c:	f103 0110 	add.w	r1, r3, #16
    1d60:	f853 0b04 	ldr.w	r0, [r3], #4
    1d64:	f842 0b04 	str.w	r0, [r2], #4
    1d68:	428b      	cmp	r3, r1
    1d6a:	d1f9      	bne.n	1d60 <cip_crypt+0x28c>
            aes_gcm_ghash(H, input->data, 17, input->data + 17, input->size - 17, S);
    1d6c:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    1d70:	6829      	ldr	r1, [r5, #0]
    1d72:	f8cd 8004 	str.w	r8, [sp, #4]
    1d76:	88eb      	ldrh	r3, [r5, #6]
    1d78:	3b11      	subs	r3, #17
    1d7a:	9300      	str	r3, [sp, #0]
    1d7c:	2211      	movs	r2, #17
    1d7e:	f101 0311 	add.w	r3, r1, #17
    1d82:	a808      	add	r0, sp, #32
    1d84:	f00c fa2e 	bl	e1e4 <aes_gcm_ghash>
            if ((ret = bb_move(input, 17, 0, input->size - 17)) == 0)
    1d88:	88eb      	ldrh	r3, [r5, #6]
    1d8a:	3b11      	subs	r3, #17
    1d8c:	b29b      	uxth	r3, r3
    1d8e:	2200      	movs	r2, #0
    1d90:	2111      	movs	r1, #17
    1d92:	4628      	mov	r0, r5
    1d94:	f00c f8d3 	bl	df3e <bb_move>
    1d98:	4604      	mov	r4, r0
    1d9a:	2800      	cmp	r0, #0
    1d9c:	d166      	bne.n	1e6c <cip_crypt+0x398>
                if (!encrypt)
    1d9e:	b95f      	cbnz	r7, 1db8 <cip_crypt+0x2e4>
                    aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1da0:	682a      	ldr	r2, [r5, #0]
    1da2:	892c      	ldrh	r4, [r5, #8]
    1da4:	4628      	mov	r0, r5
    1da6:	4414      	add	r4, r2
    1da8:	f00b fd73 	bl	d892 <bb_available>
    1dac:	4622      	mov	r2, r4
    1dae:	4603      	mov	r3, r0
    1db0:	a90c      	add	r1, sp, #48	; 0x30
    1db2:	a81d      	add	r0, sp, #116	; 0x74
    1db4:	f00c fabb 	bl	e32e <aes_gcm_gctr.constprop.0>
                cip_gctr(aes, J0, S, sizeof(S), input->data + input->size);
    1db8:	88ea      	ldrh	r2, [r5, #6]
    1dba:	682b      	ldr	r3, [r5, #0]
    1dbc:	4413      	add	r3, r2
    1dbe:	9300      	str	r3, [sp, #0]
    1dc0:	4642      	mov	r2, r8
    1dc2:	2310      	movs	r3, #16
    1dc4:	a90c      	add	r1, sp, #48	; 0x30
    1dc6:	a81d      	add	r0, sp, #116	; 0x74
    1dc8:	f00c fa5f 	bl	e28a <cip_gctr.part.0>
                    input->size += 12;
    1dcc:	88eb      	ldrh	r3, [r5, #6]
                if (encrypt)
    1dce:	2f00      	cmp	r7, #0
    1dd0:	d042      	beq.n	1e58 <cip_crypt+0x384>
                    input->size += 12;
    1dd2:	330c      	adds	r3, #12
    1dd4:	80eb      	strh	r3, [r5, #6]
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1dd6:	9b03      	ldr	r3, [sp, #12]
    1dd8:	2b03      	cmp	r3, #3
    1dda:	d146      	bne.n	1e6a <cip_crypt+0x396>
    {
        if ((ret = bb_clear(&nonse)) == 0 &&
    1ddc:	a805      	add	r0, sp, #20
    1dde:	f00b ff28 	bl	dc32 <bb_clear>
    1de2:	4604      	mov	r4, r0
    1de4:	2800      	cmp	r0, #0
    1de6:	d141      	bne.n	1e6c <cip_crypt+0x398>
            (ret = bb_setUInt8(&nonse, tag)) == 0)
    1de8:	4659      	mov	r1, fp
    1dea:	a805      	add	r0, sp, #20
    1dec:	f00b fdc7 	bl	d97e <bb_setUInt8>
        if ((ret = bb_clear(&nonse)) == 0 &&
    1df0:	4604      	mov	r4, r0
    1df2:	2800      	cmp	r0, #0
    1df4:	d13a      	bne.n	1e6c <cip_crypt+0x398>
        {
            if (tag == DLMS_COMMAND_GENERAL_GLO_CIPHERING ||
    1df6:	f10b 0325 	add.w	r3, fp, #37	; 0x25
    1dfa:	b2db      	uxtb	r3, r3
    1dfc:	2b01      	cmp	r3, #1
    1dfe:	d808      	bhi.n	1e12 <cip_crypt+0x33e>
                tag == DLMS_COMMAND_GENERAL_DED_CIPHERING)
            {
                hlp_setObjectCount(8, &nonse);
    1e00:	a905      	add	r1, sp, #20
    1e02:	2008      	movs	r0, #8
    1e04:	f018 feb7 	bl	1ab76 <hlp_setObjectCount>
                bb_set(&nonse, systemTitle, 8);
    1e08:	9965      	ldr	r1, [sp, #404]	; 0x194
    1e0a:	2208      	movs	r2, #8
    1e0c:	a805      	add	r0, sp, #20
    1e0e:	f00b fe9c 	bl	db4a <bb_set>
            }
            if ((ret = hlp_setObjectCount(5 + input->size, &nonse)) == 0 &&
    1e12:	88e8      	ldrh	r0, [r5, #6]
    1e14:	a905      	add	r1, sp, #20
    1e16:	3005      	adds	r0, #5
    1e18:	f018 fead 	bl	1ab76 <hlp_setObjectCount>
    1e1c:	4604      	mov	r4, r0
    1e1e:	bb28      	cbnz	r0, 1e6c <cip_crypt+0x398>
                (ret = bb_setUInt8(&nonse, security)) == 0 &&
    1e20:	4631      	mov	r1, r6
    1e22:	a805      	add	r0, sp, #20
    1e24:	f00b fdab 	bl	d97e <bb_setUInt8>
            if ((ret = hlp_setObjectCount(5 + input->size, &nonse)) == 0 &&
    1e28:	4604      	mov	r4, r0
    1e2a:	b9f8      	cbnz	r0, 1e6c <cip_crypt+0x398>
                (ret = bb_setUInt32(&nonse, frameCounter)) == 0 &&
    1e2c:	4649      	mov	r1, r9
    1e2e:	a805      	add	r0, sp, #20
    1e30:	f00b fde9 	bl	da06 <bb_setUInt32>
                (ret = bb_setUInt8(&nonse, security)) == 0 &&
    1e34:	4604      	mov	r4, r0
    1e36:	b9c8      	cbnz	r0, 1e6c <cip_crypt+0x398>
                (ret = bb_insert(nonse.data, nonse.size, input, 0)) == 0)
    1e38:	4603      	mov	r3, r0
    1e3a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    1e3e:	9805      	ldr	r0, [sp, #20]
    1e40:	462a      	mov	r2, r5
    1e42:	f00c f8ad 	bl	dfa0 <bb_insert>
                (ret = bb_setUInt32(&nonse, frameCounter)) == 0 &&
    1e46:	4604      	mov	r4, r0
    1e48:	b980      	cbnz	r0, 1e6c <cip_crypt+0x398>
    1e4a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    1e4e:	9905      	ldr	r1, [sp, #20]
    1e50:	6828      	ldr	r0, [r5, #0]
    1e52:	f01b fd1d 	bl	1d890 <memcpy>
    1e56:	e009      	b.n	1e6c <cip_crypt+0x398>
                    if (memcmp(NONSE, input->data + input->size, 12) != 0)
    1e58:	6829      	ldr	r1, [r5, #0]
    1e5a:	220c      	movs	r2, #12
    1e5c:	4419      	add	r1, r3
    1e5e:	a818      	add	r0, sp, #96	; 0x60
    1e60:	f01b fd08 	bl	1d874 <memcmp>
    1e64:	2800      	cmp	r0, #0
    1e66:	f47f af3c 	bne.w	1ce2 <cip_crypt+0x20e>
{
    1e6a:	2400      	movs	r4, #0
                memcpy(input->data, nonse.data, nonse.size);
            }
        }
    }
    return ret;
}
    1e6c:	4620      	mov	r0, r4
    1e6e:	b05b      	add	sp, #364	; 0x16c
    1e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1e74:	2c00      	cmp	r4, #0
    1e76:	f43f af43 	beq.w	1d00 <cip_crypt+0x22c>
    1e7a:	e7f7      	b.n	1e6c <cip_crypt+0x398>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    1e7c:	f44f 7481 	mov.w	r4, #258	; 0x102
    1e80:	e7f4      	b.n	1e6c <cip_crypt+0x398>
    if ((ret = cip_int(
    1e82:	2400      	movs	r4, #0
    1e84:	e6b0      	b.n	1be8 <cip_crypt+0x114>
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1e86:	2c00      	cmp	r4, #0
    1e88:	d0ef      	beq.n	1e6a <cip_crypt+0x396>
    1e8a:	e7ef      	b.n	1e6c <cip_crypt+0x398>

00001e8c <cip_decrypt>:
    gxByteBuffer* data,
    DLMS_SECURITY* security,
    DLMS_SECURITY_SUITE* suite,
    uint64_t* invocationCounter)
#endif //DLMS_IGNORE_MALLOC
{
    1e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e90:	b08a      	sub	sp, #40	; 0x28
    1e92:	e9dd 7a12 	ldrd	r7, sl, [sp, #72]	; 0x48
    1e96:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    1e9a:	4606      	mov	r6, r0
    1e9c:	460d      	mov	r5, r1
    1e9e:	4690      	mov	r8, r2
    int ret;
    unsigned char ch;
    uint32_t frameCounter;
    DLMS_COMMAND cmd;
    unsigned char systemTitle[8];
    if (data == NULL || data->size - data->position < 2)
    1ea0:	461c      	mov	r4, r3
    1ea2:	b913      	cbnz	r3, 1eaa <cip_decrypt+0x1e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    {
        return ret;
    }
    cmd = (DLMS_COMMAND)ch;
    switch (cmd)
    1ea4:	f44f 7081 	mov.w	r0, #258	; 0x102
    1ea8:	e09f      	b.n	1fea <cip_decrypt+0x15e>
    if (data == NULL || data->size - data->position < 2)
    1eaa:	88db      	ldrh	r3, [r3, #6]
    1eac:	8922      	ldrh	r2, [r4, #8]
    1eae:	1a9b      	subs	r3, r3, r2
    1eb0:	2b01      	cmp	r3, #1
    1eb2:	ddf7      	ble.n	1ea4 <cip_decrypt+0x18>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    1eb4:	f10d 0119 	add.w	r1, sp, #25
    1eb8:	4620      	mov	r0, r4
    1eba:	f00b fed0 	bl	dc5e <bb_getUInt8>
    1ebe:	2800      	cmp	r0, #0
    1ec0:	f040 8093 	bne.w	1fea <cip_decrypt+0x15e>
    cmd = (DLMS_COMMAND)ch;
    1ec4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    switch (cmd)
    1ec8:	2bdc      	cmp	r3, #220	; 0xdc
    1eca:	d8eb      	bhi.n	1ea4 <cip_decrypt+0x18>
    1ecc:	2bc7      	cmp	r3, #199	; 0xc7
    1ece:	d823      	bhi.n	1f18 <cip_decrypt+0x8c>
    1ed0:	2b2d      	cmp	r3, #45	; 0x2d
    1ed2:	d851      	bhi.n	1f78 <cip_decrypt+0xec>
    1ed4:	2b20      	cmp	r3, #32
    1ed6:	d9e5      	bls.n	1ea4 <cip_decrypt+0x18>
    1ed8:	3b21      	subs	r3, #33	; 0x21
    1eda:	2b0c      	cmp	r3, #12
    1edc:	d8e2      	bhi.n	1ea4 <cip_decrypt+0x18>
    1ede:	a201      	add	r2, pc, #4	; (adr r2, 1ee4 <cip_decrypt+0x58>)
    1ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ee4:	00001f81 	.word	0x00001f81
    1ee8:	00001ea5 	.word	0x00001ea5
    1eec:	00001ea5 	.word	0x00001ea5
    1ef0:	00001ea5 	.word	0x00001ea5
    1ef4:	00001f81 	.word	0x00001f81
    1ef8:	00001f81 	.word	0x00001f81
    1efc:	00001ea5 	.word	0x00001ea5
    1f00:	00001f81 	.word	0x00001f81
    1f04:	00001ea5 	.word	0x00001ea5
    1f08:	00001ea5 	.word	0x00001ea5
    1f0c:	00001ea5 	.word	0x00001ea5
    1f10:	00001f81 	.word	0x00001f81
    1f14:	00001f81 	.word	0x00001f81
    1f18:	3bc8      	subs	r3, #200	; 0xc8
    1f1a:	2b14      	cmp	r3, #20
    1f1c:	d8c2      	bhi.n	1ea4 <cip_decrypt+0x18>
    1f1e:	a201      	add	r2, pc, #4	; (adr r2, 1f24 <cip_decrypt+0x98>)
    1f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f24:	00001f81 	.word	0x00001f81
    1f28:	00001f81 	.word	0x00001f81
    1f2c:	00001f81 	.word	0x00001f81
    1f30:	00001f81 	.word	0x00001f81
    1f34:	00001f81 	.word	0x00001f81
    1f38:	00001f81 	.word	0x00001f81
    1f3c:	00001ea5 	.word	0x00001ea5
    1f40:	00001f81 	.word	0x00001f81
    1f44:	00001f81 	.word	0x00001f81
    1f48:	00001f81 	.word	0x00001f81
    1f4c:	00001f81 	.word	0x00001f81
    1f50:	00001f81 	.word	0x00001f81
    1f54:	00001f81 	.word	0x00001f81
    1f58:	00001f81 	.word	0x00001f81
    1f5c:	00001ea5 	.word	0x00001ea5
    1f60:	00001f81 	.word	0x00001f81
    1f64:	00001ea5 	.word	0x00001ea5
    1f68:	00001ea5 	.word	0x00001ea5
    1f6c:	00001ea5 	.word	0x00001ea5
    1f70:	00001ff1 	.word	0x00001ff1
    1f74:	00001ff1 	.word	0x00001ff1
    1f78:	2b41      	cmp	r3, #65	; 0x41
    1f7a:	d001      	beq.n	1f80 <cip_decrypt+0xf4>
    1f7c:	2b48      	cmp	r3, #72	; 0x48
    1f7e:	d191      	bne.n	1ea4 <cip_decrypt+0x18>
    case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if ((ret = hlp_getObjectCount2(data, &length)) != 0)
    1f80:	f10d 011a 	add.w	r1, sp, #26
    1f84:	4620      	mov	r0, r4
    1f86:	f018 fdc5 	bl	1ab14 <hlp_getObjectCount2>
    1f8a:	bb70      	cbnz	r0, 1fea <cip_decrypt+0x15e>
    {
        return ret;
    }
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    1f8c:	f10d 0119 	add.w	r1, sp, #25
    1f90:	4620      	mov	r0, r4
    1f92:	f00b fe64 	bl	dc5e <bb_getUInt8>
    1f96:	bb40      	cbnz	r0, 1fea <cip_decrypt+0x15e>
    {
        return ret;
    }
    *security = (DLMS_SECURITY)(ch & 0x30);
    1f98:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1f9c:	f003 0230 	and.w	r2, r3, #48	; 0x30
    1fa0:	703a      	strb	r2, [r7, #0]
    if (suite != NULL)
    1fa2:	f1ba 0f00 	cmp.w	sl, #0
    1fa6:	d003      	beq.n	1fb0 <cip_decrypt+0x124>
    {
        *suite = (DLMS_SECURITY_SUITE) (ch & 0x3);
    1fa8:	f003 0203 	and.w	r2, r3, #3
    1fac:	f88a 2000 	strb.w	r2, [sl]
    }
    //If Key_Set or authentication or encryption is not used.
    if (ch & 0x40 || *security == DLMS_SECURITY_NONE)
    1fb0:	065b      	lsls	r3, r3, #25
    1fb2:	f53f af77 	bmi.w	1ea4 <cip_decrypt+0x18>
    1fb6:	783b      	ldrb	r3, [r7, #0]
    1fb8:	2b00      	cmp	r3, #0
    1fba:	f43f af73 	beq.w	1ea4 <cip_decrypt+0x18>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if ((ret = bb_getUInt32(data, &frameCounter)) != 0)
    1fbe:	a907      	add	r1, sp, #28
    1fc0:	4620      	mov	r0, r4
    1fc2:	f00b fe8a 	bl	dcda <bb_getUInt32>
    1fc6:	b980      	cbnz	r0, 1fea <cip_decrypt+0x15e>
    {
        return ret;
    }
    if (invocationCounter != NULL)
    1fc8:	9b07      	ldr	r3, [sp, #28]
    1fca:	f1b9 0f00 	cmp.w	r9, #0
    1fce:	d001      	beq.n	1fd4 <cip_decrypt+0x148>
    {
        *invocationCounter = frameCounter;
    1fd0:	e9c9 3000 	strd	r3, r0, [r9]
    }
    ret = cip_crypt(
    1fd4:	2200      	movs	r2, #0
    1fd6:	e9cd 4203 	strd	r4, r2, [sp, #12]
    1fda:	e9cd 5801 	strd	r5, r8, [sp, #4]
    1fde:	9200      	str	r2, [sp, #0]
    1fe0:	7839      	ldrb	r1, [r7, #0]
    1fe2:	2202      	movs	r2, #2
    1fe4:	4630      	mov	r0, r6
    1fe6:	f7ff fd75 	bl	1ad4 <cip_crypt>
        title,
        key,
        data,
        0);
    return ret;
}
    1fea:	b00a      	add	sp, #40	; 0x28
    1fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((ret = hlp_getObjectCount2(data, &length)) != 0)
    1ff0:	f10d 011a 	add.w	r1, sp, #26
    1ff4:	4620      	mov	r0, r4
    1ff6:	f018 fd8d 	bl	1ab14 <hlp_getObjectCount2>
    1ffa:	2800      	cmp	r0, #0
    1ffc:	d1f5      	bne.n	1fea <cip_decrypt+0x15e>
        if (length != 0)
    1ffe:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    2002:	2a00      	cmp	r2, #0
    2004:	d0bc      	beq.n	1f80 <cip_decrypt+0xf4>
            if (length != 8)
    2006:	2a08      	cmp	r2, #8
    2008:	f47f af4c 	bne.w	1ea4 <cip_decrypt+0x18>
            bb_get(data, systemTitle, length);
    200c:	a908      	add	r1, sp, #32
    200e:	4620      	mov	r0, r4
    2010:	f00c f804 	bl	e01c <bb_get>
            title = systemTitle;
    2014:	ad08      	add	r5, sp, #32
    2016:	e7b3      	b.n	1f80 <cip_decrypt+0xf4>

00002018 <cosem_init4>:
int cosem_init4(
    void* object,
    const uint16_t expectedSize,
    DLMS_OBJECT_TYPE type,
    const unsigned char* ln)
{
    2018:	b570      	push	{r4, r5, r6, lr}
    201a:	4604      	mov	r4, r0
    uint16_t size = cosem_getObjectSize(type);
    201c:	4610      	mov	r0, r2
{
    201e:	4615      	mov	r5, r2
    2020:	461e      	mov	r6, r3
    uint16_t size = cosem_getObjectSize(type);
    2022:	f00c f99b 	bl	e35c <cosem_getObjectSize>
    if (size == 0)
    2026:	4602      	mov	r2, r0
    2028:	2800      	cmp	r0, #0
    202a:	d065      	beq.n	20f8 <cosem_init4+0xe0>
    {
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    }
    if (expectedSize != 0 && size != expectedSize)
    202c:	b109      	cbz	r1, 2032 <cosem_init4+0x1a>
    202e:	4288      	cmp	r0, r1
    2030:	d164      	bne.n	20fc <cosem_init4+0xe4>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2032:	2100      	movs	r1, #0
    2034:	4620      	mov	r0, r4
    2036:	f01b fc66 	bl	1d906 <memset>
    {
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    }
    memset(object, 0, size);
    ((gxObject*)object)->objectType = type;
    203a:	8025      	strh	r5, [r4, #0]
    ((gxObject*)object)->logicalName[0] = ln[0];
    203c:	7833      	ldrb	r3, [r6, #0]
    203e:	71a3      	strb	r3, [r4, #6]
    ((gxObject*)object)->logicalName[1] = ln[1];
    2040:	7873      	ldrb	r3, [r6, #1]
    2042:	71e3      	strb	r3, [r4, #7]
    ((gxObject*)object)->logicalName[2] = ln[2];
    2044:	78b3      	ldrb	r3, [r6, #2]
    2046:	7223      	strb	r3, [r4, #8]
    ((gxObject*)object)->logicalName[3] = ln[3];
    2048:	78f3      	ldrb	r3, [r6, #3]
    204a:	7263      	strb	r3, [r4, #9]
    ((gxObject*)object)->logicalName[4] = ln[4];
    204c:	7933      	ldrb	r3, [r6, #4]
    204e:	72a3      	strb	r3, [r4, #10]
    ((gxObject*)object)->logicalName[5] = ln[5];
    2050:	7973      	ldrb	r3, [r6, #5]
    2052:	72e3      	strb	r3, [r4, #11]
    //Set default values, if any.
    switch (type)
    2054:	2d1d      	cmp	r5, #29
    2056:	d80f      	bhi.n	2078 <cosem_init4+0x60>
    2058:	2d0b      	cmp	r5, #11
    205a:	d913      	bls.n	2084 <cosem_init4+0x6c>
    205c:	3d0c      	subs	r5, #12
    205e:	2d11      	cmp	r5, #17
    2060:	d810      	bhi.n	2084 <cosem_init4+0x6c>
    2062:	e8df f005 	tbb	[pc, r5]
    2066:	0f2c      	.short	0x0f2c
    2068:	0f0f110f 	.word	0x0f0f110f
    206c:	0f0f400f 	.word	0x0f0f400f
    2070:	0f40320f 	.word	0x0f40320f
    2074:	2f0f400f 	.word	0x2f0f400f
    2078:	2d2f      	cmp	r5, #47	; 0x2f
    207a:	d034      	beq.n	20e6 <cosem_init4+0xce>
    207c:	2d48      	cmp	r5, #72	; 0x48
    207e:	d032      	beq.n	20e6 <cosem_init4+0xce>
    2080:	2d29      	cmp	r5, #41	; 0x29
    2082:	d032      	beq.n	20ea <cosem_init4+0xd2>
    2084:	2000      	movs	r0, #0
    2086:	e038      	b.n	20fa <cosem_init4+0xe2>
#ifndef DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
    {
        gxAssociationLogicalName* it = (gxAssociationLogicalName*)object;
        ((gxObject*)object)->version = 2;
        it->xDLMSContextInfo.dlmsVersionNumber = 6;
    2088:	2206      	movs	r2, #6
    208a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
        it->applicationContextName.jointIsoCtt = 2;
    208e:	f241 0202 	movw	r2, #4098	; 0x1002
    2092:	84e2      	strh	r2, [r4, #38]	; 0x26
        it->applicationContextName.country = 16;
        it->applicationContextName.countryName = 756;
    2094:	4a1a      	ldr	r2, [pc, #104]	; (2100 <cosem_init4+0xe8>)
    2096:	62a2      	str	r2, [r4, #40]	; 0x28
        it->applicationContextName.identifiedOrganization = 5;
        it->applicationContextName.dlmsUA = 8;
        it->applicationContextName.applicationContext = 1;
    2098:	f240 1201 	movw	r2, #257	; 0x101
    209c:	85a2      	strh	r2, [r4, #44]	; 0x2c
        it->applicationContextName.contextId = DLMS_APPLICATION_CONTEXT_NAME_LOGICAL_NAME;
        it->authenticationMechanismName.jointIsoCtt = 2;
    209e:	f102 723d 	add.w	r2, r2, #49545216	; 0x2f40000
        ((gxObject*)object)->version = 2;
    20a2:	2302      	movs	r3, #2
        it->authenticationMechanismName.jointIsoCtt = 2;
    20a4:	f602 7201 	addw	r2, r2, #3841	; 0xf01
        ((gxObject*)object)->version = 2;
    20a8:	70a3      	strb	r3, [r4, #2]
        it->authenticationMechanismName.jointIsoCtt = 2;
    20aa:	64a2      	str	r2, [r4, #72]	; 0x48
        it->authenticationMechanismName.country = 16;
        it->authenticationMechanismName.countryName = 756;
        it->authenticationMechanismName.identifiedOrganization = 5;
        it->authenticationMechanismName.dlmsUA = 8;
        it->authenticationMechanismName.authenticationMechanismName = 2;
    20ac:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        it->authenticationMechanismName.identifiedOrganization = 5;
    20b0:	f640 0205 	movw	r2, #2053	; 0x805
        it->serverSAP = 1;
    20b4:	2301      	movs	r3, #1
        it->authenticationMechanismName.identifiedOrganization = 5;
    20b6:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
        it->serverSAP = 1;
    20ba:	83e3      	strh	r3, [r4, #30]
    }
    break;
    20bc:	e7e2      	b.n	2084 <cosem_init4+0x6c>
#endif //DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
    {
        ((gxObject*)object)->shortName = 0xFA00;
    20be:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
    20c2:	80a3      	strh	r3, [r4, #4]
    break;
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_OBJECT_TYPE_AUTO_ANSWER:
        break;
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        ((gxObject*)object)->version = 2;
    20c4:	2302      	movs	r3, #2
        ((gxIecHdlcSetup*)object)->inactivityTimeout = 120;
        ((gxIecHdlcSetup*)object)->deviceAddress = 0x10;
        break;
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
    case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
        ((gxObject*)object)->version = 1;
    20c6:	70a3      	strb	r3, [r4, #2]
        break;
    20c8:	e7dc      	b.n	2084 <cosem_init4+0x6c>
        ((gxIecHdlcSetup*)object)->maximumInfoLengthReceive = 128;
    20ca:	2280      	movs	r2, #128	; 0x80
    20cc:	83a2      	strh	r2, [r4, #28]
        ((gxIecHdlcSetup*)object)->interCharachterTimeout = 25;
    20ce:	2219      	movs	r2, #25
    20d0:	8362      	strh	r2, [r4, #26]
        ((gxIecHdlcSetup*)object)->inactivityTimeout = 120;
    20d2:	4a0c      	ldr	r2, [pc, #48]	; (2104 <cosem_init4+0xec>)
    20d4:	6122      	str	r2, [r4, #16]
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    20d6:	f502 0275 	add.w	r2, r2, #16056320	; 0xf50000
        ((gxObject*)object)->version = 1;
    20da:	2301      	movs	r3, #1
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    20dc:	3208      	adds	r2, #8
        ((gxObject*)object)->version = 1;
    20de:	70a3      	strb	r3, [r4, #2]
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    20e0:	6162      	str	r2, [r4, #20]
        ((gxIecHdlcSetup*)object)->windowSizeReceive = 1;
    20e2:	7623      	strb	r3, [r4, #24]
        break;
    20e4:	e7ce      	b.n	2084 <cosem_init4+0x6c>
        ((gxObject*)object)->version = 1;
    20e6:	2301      	movs	r3, #1
    20e8:	e7ed      	b.n	20c6 <cosem_init4+0xae>
        break;
    case DLMS_OBJECT_TYPE_STATUS_MAPPING:
        break;
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
        ((gxTcpUdpSetup*)object)->maximumSimultaneousConnections = 1;
    20ea:	2301      	movs	r3, #1
    20ec:	7623      	strb	r3, [r4, #24]
        ((gxTcpUdpSetup*)object)->maximumSegmentSize = 40;
    20ee:	2328      	movs	r3, #40	; 0x28
    20f0:	83a3      	strh	r3, [r4, #28]
        ((gxTcpUdpSetup*)object)->inactivityTimeout = 180;
    20f2:	23b4      	movs	r3, #180	; 0xb4
    20f4:	8363      	strh	r3, [r4, #26]
        break;
    20f6:	e7c5      	b.n	2084 <cosem_init4+0x6c>
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    20f8:	200b      	movs	r0, #11
        break;
    default:
        break;
    }
    return 0;
}
    20fa:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    20fc:	200c      	movs	r0, #12
    20fe:	e7fc      	b.n	20fa <cosem_init4+0xe2>
    2100:	080502f4 	.word	0x080502f4
    2104:	00100078 	.word	0x00100078

00002108 <cosem_createObject>:
{
    2108:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char ln[] = { 0,0,40,0,0,255 };
    210a:	4b13      	ldr	r3, [pc, #76]	; (2158 <cosem_createObject+0x50>)
{
    210c:	4604      	mov	r4, r0
    unsigned char ln[] = { 0,0,40,0,0,255 };
    210e:	6818      	ldr	r0, [r3, #0]
    2110:	9000      	str	r0, [sp, #0]
    2112:	889b      	ldrh	r3, [r3, #4]
    2114:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t size = cosem_getObjectSize(type);
    2118:	4620      	mov	r0, r4
{
    211a:	460d      	mov	r5, r1
    uint16_t size = cosem_getObjectSize(type);
    211c:	f00c f91e 	bl	e35c <cosem_getObjectSize>
    if (size == 0)
    2120:	4601      	mov	r1, r0
    2122:	b198      	cbz	r0, 214c <cosem_createObject+0x44>
    *object = (gxObject*)gxcalloc(1, size);
    2124:	2001      	movs	r0, #1
    2126:	f00a fb95 	bl	c854 <calloc>
    212a:	6028      	str	r0, [r5, #0]
    if (*object == NULL)
    212c:	b180      	cbz	r0, 2150 <cosem_createObject+0x48>
    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    212e:	2c0f      	cmp	r4, #15
    (*object)->objectType = type;
    2130:	8004      	strh	r4, [r0, #0]
    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    2132:	d005      	beq.n	2140 <cosem_createObject+0x38>
    else if (type == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
    2134:	2c0c      	cmp	r4, #12
        memset(ln, 0, 6);
    2136:	bf1e      	ittt	ne
    2138:	2300      	movne	r3, #0
    213a:	9300      	strne	r3, [sp, #0]
    213c:	f8ad 3004 	strhne.w	r3, [sp, #4]
    ret = cosem_init2(*object, type, ln);
    2140:	466a      	mov	r2, sp
    2142:	4621      	mov	r1, r4
    2144:	f00c f97d 	bl	e442 <cosem_init2>
}
    2148:	b003      	add	sp, #12
    214a:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    214c:	200b      	movs	r0, #11
    214e:	e7fb      	b.n	2148 <cosem_createObject+0x40>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    2150:	f44f 7082 	mov.w	r0, #260	; 0x104
    2154:	e7f8      	b.n	2148 <cosem_createObject+0x40>
    2156:	bf00      	nop
    2158:	0001e12f 	.word	0x0001e12f

0000215c <cosem_findObjectByLN>:
int cosem_findObjectByLN(
    dlmsSettings* settings,
    DLMS_OBJECT_TYPE ot,
    const unsigned char* ln,
    gxObject** object)
{
    215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2160:	4690      	mov	r8, r2
    2162:	4606      	mov	r6, r0
    2164:	460f      	mov	r7, r1
    int ret;
    if (memcmp(ln, EMPTY_LN, sizeof(EMPTY_LN)) != 0)
    2166:	2206      	movs	r2, #6
    2168:	491a      	ldr	r1, [pc, #104]	; (21d4 <cosem_findObjectByLN+0x78>)
    216a:	4640      	mov	r0, r8
{
    216c:	461d      	mov	r5, r3
    if (memcmp(ln, EMPTY_LN, sizeof(EMPTY_LN)) != 0)
    216e:	f01b fb81 	bl	1d874 <memcmp>
    2172:	4604      	mov	r4, r0
    2174:	b350      	cbz	r0, 21cc <cosem_findObjectByLN+0x70>
    {
        if ((ret = oa_findByLN(&settings->objects, ot, ln, object)) == 0)
    2176:	462b      	mov	r3, r5
    2178:	4642      	mov	r2, r8
    217a:	4639      	mov	r1, r7
    217c:	f106 0098 	add.w	r0, r6, #152	; 0x98
    2180:	f018 ffec 	bl	1b15c <oa_findByLN>
    2184:	4604      	mov	r4, r0
    2186:	b9f0      	cbnz	r0, 21c6 <cosem_findObjectByLN+0x6a>
        {
#ifndef DLMS_IGNORE_MALLOC
            if (*object == NULL)
    2188:	682b      	ldr	r3, [r5, #0]
    218a:	b9e3      	cbnz	r3, 21c6 <cosem_findObjectByLN+0x6a>
            {
                if ((ret = oa_findByLN(&settings->releasedObjects, ot, ln, object)) == 0)
    218c:	36e4      	adds	r6, #228	; 0xe4
    218e:	462b      	mov	r3, r5
    2190:	4642      	mov	r2, r8
    2192:	4639      	mov	r1, r7
    2194:	4630      	mov	r0, r6
    2196:	f018 ffe1 	bl	1b15c <oa_findByLN>
    219a:	b9c8      	cbnz	r0, 21d0 <cosem_findObjectByLN+0x74>
                {
                    if (*object == NULL && ot != DLMS_OBJECT_TYPE_NONE)
    219c:	682b      	ldr	r3, [r5, #0]
    219e:	b993      	cbnz	r3, 21c6 <cosem_findObjectByLN+0x6a>
    21a0:	b18f      	cbz	r7, 21c6 <cosem_findObjectByLN+0x6a>
                    {
                        if ((ret = cosem_createObject(ot, object)) == 0)
    21a2:	4629      	mov	r1, r5
    21a4:	4638      	mov	r0, r7
    21a6:	f7ff ffaf 	bl	2108 <cosem_createObject>
    21aa:	4604      	mov	r4, r0
    21ac:	b958      	cbnz	r0, 21c6 <cosem_findObjectByLN+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    21ae:	682b      	ldr	r3, [r5, #0]
    21b0:	f8d8 2000 	ldr.w	r2, [r8]
    21b4:	f8c3 2006 	str.w	r2, [r3, #6]
    21b8:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    21bc:	815a      	strh	r2, [r3, #10]
                        {
                            memcpy((*object)->logicalName, ln, 6);
                            oa_push(&settings->releasedObjects, *object);
    21be:	6829      	ldr	r1, [r5, #0]
    21c0:	4630      	mov	r0, r6
    21c2:	f018 ff3c 	bl	1b03e <oa_push>
    {
        *object = NULL;
        ret = 0;
    }
    return ret;
    21c6:	4620      	mov	r0, r4
    21c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *object = NULL;
    21cc:	6028      	str	r0, [r5, #0]
        ret = 0;
    21ce:	e7fa      	b.n	21c6 <cosem_findObjectByLN+0x6a>
    21d0:	4604      	mov	r4, r0
    return ret;
    21d2:	e7f8      	b.n	21c6 <cosem_findObjectByLN+0x6a>
    21d4:	0001ed53 	.word	0x0001ed53

000021d8 <time_init>:
    unsigned char hour,
    unsigned char minute,
    unsigned char second,
    uint16_t millisecond,
    signed short devitation)
{
    21d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (devitation == -1)
    {
        devitation = 0x8000;
    21da:	4c50      	ldr	r4, [pc, #320]	; (231c <time_init+0x144>)
{
    21dc:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
    21e0:	f89d 6014 	ldrb.w	r6, [sp, #20]
    21e4:	f89d c018 	ldrb.w	ip, [sp, #24]
    21e8:	f89d 701c 	ldrb.w	r7, [sp, #28]
        devitation = 0x8000;
    21ec:	f1b5 3fff 	cmp.w	r5, #4294967295
    21f0:	bf08      	it	eq
    21f2:	4625      	moveq	r5, r4
    }
#ifdef DLMS_USE_EPOCH_TIME
    //multiply to tmp variable or it'll fails for some compilers.
    uint32_t tmp;
    //January and February are counted as months 13 and 14 of the previous year
    if (month != 0xFF && month <= 2)
    21f4:	2a02      	cmp	r2, #2
    21f6:	d80a      	bhi.n	220e <time_init+0x36>
    {
        month += 12;
        if (year != 0xFFFF)
    21f8:	f64f 74ff 	movw	r4, #65535	; 0xffff
    21fc:	42a1      	cmp	r1, r4
        month += 12;
    21fe:	f102 020c 	add.w	r2, r2, #12
        {
            year -= 1;
    2202:	bf18      	it	ne
    2204:	f101 31ff 	addne.w	r1, r1, #4294967295
        month += 12;
    2208:	b2d2      	uxtb	r2, r2
            year -= 1;
    220a:	bf18      	it	ne
    220c:	b289      	uxthne	r1, r1
        }
    }
    time->skip = DATETIME_SKIPS_NONE;
    220e:	2400      	movs	r4, #0
    2210:	80c4      	strh	r4, [r0, #6]
    time->status = DLMS_CLOCK_STATUS_OK;
    time->extraInfo = 0;
    2212:	8104      	strh	r4, [r0, #8]
    //Convert years to days
    time->value = 0;
    if (year == 0xFFFF)
    2214:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2218:	42a1      	cmp	r1, r4
    {
        time->skip = (unsigned char)(DATETIME_SKIPS_YEAR | DATETIME_SKIPS_DEVITATION);
    221a:	bf02      	ittt	eq
    221c:	2101      	moveq	r1, #1
    221e:	80c1      	strheq	r1, [r0, #6]
        year = 1970;
    2220:	f240 71b2 	movweq	r1, #1970	; 0x7b2
    }
    time->value = year;
    time->value *= 365L;
    tmp = year;
    tmp /= 4L;
    2224:	ea4f 0e91 	mov.w	lr, r1, lsr #2
    tmp = year;
    tmp /= 100L;
    time->value -= tmp;
    tmp = year;
    tmp /= 400L;
    time->value += tmp;
    2228:	f240 146d 	movw	r4, #365	; 0x16d
    222c:	fb04 e401 	mla	r4, r4, r1, lr
    //Convert months to days
    if (month == 0xFF)
    2230:	2aff      	cmp	r2, #255	; 0xff
    tmp /= 400L;
    2232:	f44f 7ec8 	mov.w	lr, #400	; 0x190
    2236:	fbb1 fefe 	udiv	lr, r1, lr
    time->value += tmp;
    223a:	4474      	add	r4, lr
    tmp /= 100L;
    223c:	f04f 0e64 	mov.w	lr, #100	; 0x64
    2240:	fbb1 f1fe 	udiv	r1, r1, lr
    time->value += tmp;
    2244:	eba4 0101 	sub.w	r1, r4, r1
    if (month == 0xFF)
    2248:	d105      	bne.n	2256 <time_init+0x7e>
    {
        time->skip |= DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DEVITATION;
    224a:	88c2      	ldrh	r2, [r0, #6]
    224c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
    2250:	80c2      	strh	r2, [r0, #6]
        month = 1;
    }
    else if (month == 0xFD)
    {
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_END;
        month = 1;
    2252:	2201      	movs	r2, #1
    2254:	e003      	b.n	225e <time_init+0x86>
    else if (month == 0xFE)
    2256:	2afe      	cmp	r2, #254	; 0xfe
    2258:	d14f      	bne.n	22fa <time_init+0x122>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN;
    225a:	2201      	movs	r2, #1
    225c:	7202      	strb	r2, [r0, #8]
    }
    if (day == 0xFF)
    225e:	2bff      	cmp	r3, #255	; 0xff
    2260:	d150      	bne.n	2304 <time_init+0x12c>
    {
        time->skip |= DATETIME_SKIPS_DAY | DATETIME_SKIPS_DEVITATION;
    2262:	88c3      	ldrh	r3, [r0, #6]
    2264:	f443 7382 	orr.w	r3, r3, #260	; 0x104
    2268:	80c3      	strh	r3, [r0, #6]
        day = 1;
    }
    else if (day == 0xFD)
    {
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
        day = 1;
    226a:	2301      	movs	r3, #1
    }
    tmp = month;
    tmp *= 30L;
    time->value += tmp;
    tmp = 1 + month;
    226c:	1c54      	adds	r4, r2, #1
    tmp = tmp * 3L;
    226e:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
    time->value += tmp;
    2272:	241e      	movs	r4, #30
    2274:	fb14 1202 	smlabb	r2, r4, r2, r1
    tmp = tmp / 5L;
    2278:	2405      	movs	r4, #5
    227a:	fbbe f4f4 	udiv	r4, lr, r4
    time->value += tmp;
    227e:	4422      	add	r2, r4
    time->value += day;
    2280:	4413      	add	r3, r2
    //Unix time starts on January 1st, 1970
    if (time->value < 719561)
    2282:	4a27      	ldr	r2, [pc, #156]	; (2320 <time_init+0x148>)
    2284:	4293      	cmp	r3, r2
    2286:	d905      	bls.n	2294 <time_init+0xbc>
    {
        time->value = 0;
    }
    else
    {
        time->value -= 719561L;
    2288:	f5a3 232f 	sub.w	r3, r3, #716800	; 0xaf000
    228c:	f6a3 23c9 	subw	r3, r3, #2761	; 0xac9
    }
    //Convert days to seconds
    if (time->value != 0)
    2290:	2b00      	cmp	r3, #0
    2292:	d140      	bne.n	2316 <time_init+0x13e>
    2294:	2300      	movs	r3, #0
    {
        time->value *= 86400L;
    2296:	6003      	str	r3, [r0, #0]
    }
    //Add hours, minutes and seconds
    if (hour != 0xFF)
    2298:	2eff      	cmp	r6, #255	; 0xff
    {
        time->value += (3600L * hour);
    }
    else
    {
        time->skip |= DATETIME_SKIPS_HOUR;
    229a:	bf0c      	ite	eq
    229c:	88c3      	ldrheq	r3, [r0, #6]
        time->value += (3600L * hour);
    229e:	6803      	ldrne	r3, [r0, #0]
    time->skip |= DATETIME_SKIPS_MS;
    if (devitation == (short)0x8000)
    {
        time->skip |= DATETIME_SKIPS_DEVITATION;
    }
    time->deviation = devitation;
    22a0:	8085      	strh	r5, [r0, #4]
        time->value += (3600L * hour);
    22a2:	bf15      	itete	ne
    22a4:	f44f 6261 	movne.w	r2, #3600	; 0xe10
        time->skip |= DATETIME_SKIPS_HOUR;
    22a8:	f043 0310 	orreq.w	r3, r3, #16
        time->value += (3600L * hour);
    22ac:	fb02 3606 	mlane	r6, r2, r6, r3
        time->skip |= DATETIME_SKIPS_HOUR;
    22b0:	80c3      	strheq	r3, [r0, #6]
        time->value += (3600L * hour);
    22b2:	bf18      	it	ne
    22b4:	6006      	strne	r6, [r0, #0]
    if (minute != 0xFF)
    22b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
        time->skip |= DATETIME_SKIPS_MINUTE;
    22ba:	bf0d      	iteet	eq
    22bc:	88c3      	ldrheq	r3, [r0, #6]
        time->value += (60L * minute);
    22be:	6802      	ldrne	r2, [r0, #0]
    22c0:	233c      	movne	r3, #60	; 0x3c
        time->skip |= DATETIME_SKIPS_MINUTE;
    22c2:	f043 0320 	orreq.w	r3, r3, #32
        time->value += (60L * minute);
    22c6:	bf16      	itet	ne
    22c8:	fb13 230c 	smlabbne	r3, r3, ip, r2
        time->skip |= DATETIME_SKIPS_MINUTE;
    22cc:	80c3      	strheq	r3, [r0, #6]
        time->value += (60L * minute);
    22ce:	6003      	strne	r3, [r0, #0]
    if (second != 0xFF)
    22d0:	2fff      	cmp	r7, #255	; 0xff
        time->skip |= DATETIME_SKIPS_SECOND;
    22d2:	bf09      	itett	eq
    22d4:	88c3      	ldrheq	r3, [r0, #6]
        time->value += second;
    22d6:	6803      	ldrne	r3, [r0, #0]
        time->skip |= DATETIME_SKIPS_SECOND;
    22d8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    22dc:	80c3      	strheq	r3, [r0, #6]
        time->value += second;
    22de:	bf18      	it	ne
    22e0:	18ff      	addne	r7, r7, r3
    time->skip |= DATETIME_SKIPS_MS;
    22e2:	88c3      	ldrh	r3, [r0, #6]
        time->value += second;
    22e4:	bf18      	it	ne
    22e6:	6007      	strne	r7, [r0, #0]
    if (devitation == (short)0x8000)
    22e8:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
    time->skip |= DATETIME_SKIPS_MS;
    22ec:	bf14      	ite	ne
    22ee:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        time->skip |= DATETIME_SKIPS_DEVITATION;
    22f2:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
    22f6:	80c3      	strh	r3, [r0, #6]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
    }
#endif //DLMS_USE_EPOCH_TIME
}
    22f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (month == 0xFD)
    22fa:	2afd      	cmp	r2, #253	; 0xfd
    22fc:	d1af      	bne.n	225e <time_init+0x86>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_END;
    22fe:	2202      	movs	r2, #2
    2300:	7202      	strb	r2, [r0, #8]
    2302:	e7a6      	b.n	2252 <time_init+0x7a>
    else if (day == 0xFE)
    2304:	2bfe      	cmp	r3, #254	; 0xfe
    2306:	d102      	bne.n	230e <time_init+0x136>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY;
    2308:	2304      	movs	r3, #4
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
    230a:	7203      	strb	r3, [r0, #8]
    230c:	e7ad      	b.n	226a <time_init+0x92>
    else if (day == 0xFD)
    230e:	2bfd      	cmp	r3, #253	; 0xfd
    2310:	d1ac      	bne.n	226c <time_init+0x94>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
    2312:	2308      	movs	r3, #8
    2314:	e7f9      	b.n	230a <time_init+0x132>
        time->value *= 86400L;
    2316:	4a03      	ldr	r2, [pc, #12]	; (2324 <time_init+0x14c>)
    2318:	4353      	muls	r3, r2
    231a:	e7bc      	b.n	2296 <time_init+0xbe>
    231c:	ffff8000 	.word	0xffff8000
    2320:	000afac8 	.word	0x000afac8
    2324:	00015180 	.word	0x00015180

00002328 <time_getYears2>:

uint16_t time_getYears2(
    uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    2328:	4b17      	ldr	r3, [pc, #92]	; (2388 <time_getYears2+0x60>)
    232a:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    232e:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    2332:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2334:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2338:	4a14      	ldr	r2, [pc, #80]	; (238c <time_getYears2+0x64>)
    233a:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    233c:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2340:	fbb3 f3f2 	udiv	r3, r3, r2
    2344:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2346:	4418      	add	r0, r3
    2348:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    234c:	2214      	movs	r2, #20
    234e:	4342      	muls	r2, r0
    2350:	f6a2 128a 	subw	r2, r2, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    2354:	f247 2124 	movw	r1, #29220	; 0x7224
    uint32_t c = (20 * b - 2442) / 7305;
    2358:	f641 4389 	movw	r3, #7305	; 0x1c89
    235c:	fbb2 f3f3 	udiv	r3, r2, r3
    uint32_t d = b - 365 * c - (c / 4);
    2360:	fbb2 f2f1 	udiv	r2, r2, r1
    2364:	1a80      	subs	r0, r0, r2
    2366:	f240 126d 	movw	r2, #365	; 0x16d
    236a:	fb02 0213 	mls	r2, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    236e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2372:	4350      	muls	r0, r2
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    2374:	4a06      	ldr	r2, [pc, #24]	; (2390 <time_getYears2+0x68>)
    2376:	4290      	cmp	r0, r2
    2378:	f5a3 5093 	sub.w	r0, r3, #4704	; 0x1260
    {
        c -= 4716;
    237c:	bf94      	ite	ls
    237e:	380c      	subls	r0, #12
    }
    else
    {
        c -= 4715;
    2380:	380b      	subhi	r0, #11
    }
    return (uint16_t)c;
}
    2382:	b280      	uxth	r0, r0
    2384:	4770      	bx	lr
    2386:	bf00      	nop
    2388:	00015180 	.word	0x00015180
    238c:	00023ab1 	.word	0x00023ab1
    2390:	0006897d 	.word	0x0006897d

00002394 <time_getMonths2>:

unsigned char time_getMonths2(
    uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    2394:	4b18      	ldr	r3, [pc, #96]	; (23f8 <time_getMonths2+0x64>)
    2396:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    239a:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    239e:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    23a0:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    23a4:	4a15      	ldr	r2, [pc, #84]	; (23fc <time_getMonths2+0x68>)
    23a6:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    23a8:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    23ac:	fbb3 f3f2 	udiv	r3, r3, r2
    23b0:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    23b2:	4418      	add	r0, r3
    23b4:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    23b8:	2314      	movs	r3, #20
    23ba:	4343      	muls	r3, r0
    23bc:	f6a3 138a 	subw	r3, r3, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    23c0:	f247 2224 	movw	r2, #29220	; 0x7224
    23c4:	fbb3 f2f2 	udiv	r2, r3, r2
    23c8:	1a80      	subs	r0, r0, r2
    uint32_t c = (20 * b - 2442) / 7305;
    23ca:	f641 4289 	movw	r2, #7305	; 0x1c89
    23ce:	fbb3 f3f2 	udiv	r3, r3, r2
    uint32_t d = b - 365 * c - (c / 4);
    23d2:	f240 126d 	movw	r2, #365	; 0x16d
    23d6:	fb02 0013 	mls	r0, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    23da:	4a09      	ldr	r2, [pc, #36]	; (2400 <time_getMonths2+0x6c>)
    uint32_t e = d * 1000 / 30601;
    23dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    23e0:	4343      	muls	r3, r0
    if (e <= 13)
    23e2:	4293      	cmp	r3, r2
    uint32_t e = d * 1000 / 30601;
    23e4:	f247 7089 	movw	r0, #30601	; 0x7789
    23e8:	fbb3 f0f0 	udiv	r0, r3, r0
    {
        e -= 1;
    23ec:	bf94      	ite	ls
    23ee:	f100 30ff 	addls.w	r0, r0, #4294967295
    }
    else
    {
        e -= 13;
    23f2:	380d      	subhi	r0, #13
    }
    return (unsigned char)e;
}
    23f4:	b2c0      	uxtb	r0, r0
    23f6:	4770      	bx	lr
    23f8:	00015180 	.word	0x00015180
    23fc:	00023ab1 	.word	0x00023ab1
    2400:	0006897d 	.word	0x0006897d

00002404 <time_getDays2>:
}

unsigned char time_getDays2(uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    2404:	4b1a      	ldr	r3, [pc, #104]	; (2470 <time_getDays2+0x6c>)
    2406:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    240a:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    240e:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2410:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2414:	4a17      	ldr	r2, [pc, #92]	; (2474 <time_getDays2+0x70>)
    2416:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2418:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    241c:	fbb3 f3f2 	udiv	r3, r3, r2
    2420:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2422:	4418      	add	r0, r3
    2424:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    2428:	2314      	movs	r3, #20
    242a:	4343      	muls	r3, r0
    242c:	f6a3 138a 	subw	r3, r3, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    2430:	f247 2224 	movw	r2, #29220	; 0x7224
    2434:	fbb3 f2f2 	udiv	r2, r3, r2
    2438:	1a80      	subs	r0, r0, r2
    uint32_t c = (20 * b - 2442) / 7305;
    243a:	f641 4289 	movw	r2, #7305	; 0x1c89
    243e:	fbb3 f3f2 	udiv	r3, r3, r2
    uint32_t d = b - 365 * c - (c / 4);
    2442:	f240 126d 	movw	r2, #365	; 0x16d
    2446:	fb02 0013 	mls	r0, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    244a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    244e:	fb01 f300 	mul.w	r3, r1, r0
    2452:	f247 7289 	movw	r2, #30601	; 0x7789
    2456:	fbb3 f2f2 	udiv	r2, r3, r2
    uint32_t f = d - e * 30 - e * 601 / 1000;
    245a:	231e      	movs	r3, #30
    245c:	fb03 0012 	mls	r0, r3, r2, r0
    2460:	f240 2359 	movw	r3, #601	; 0x259
    2464:	4353      	muls	r3, r2
    2466:	fbb3 f3f1 	udiv	r3, r3, r1
    246a:	1ac0      	subs	r0, r0, r3
    return (unsigned char)f;
}
    246c:	b2c0      	uxtb	r0, r0
    246e:	4770      	bx	lr
    2470:	00015180 	.word	0x00015180
    2474:	00023ab1 	.word	0x00023ab1

00002478 <time_getHours>:

unsigned char time_getHours(
    const gxtime* value)
{
#ifdef DLMS_USE_EPOCH_TIME
    return (unsigned char)((value->value % 86400L) / 3600L);
    2478:	6802      	ldr	r2, [r0, #0]
    247a:	4b05      	ldr	r3, [pc, #20]	; (2490 <time_getHours+0x18>)
    247c:	fbb2 f0f3 	udiv	r0, r2, r3
    2480:	fb03 2010 	mls	r0, r3, r0, r2
    2484:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    2488:	fbb0 f0f3 	udiv	r0, r0, r3
#else
    return (unsigned char) value->value.tm_hour;
#endif // DLMS_USE_EPOCH_TIME
}
    248c:	b2c0      	uxtb	r0, r0
    248e:	4770      	bx	lr
    2490:	00015180 	.word	0x00015180

00002494 <time_fromUnixTime2>:
    unsigned char* day,
    unsigned char* hour,
    unsigned char* minute,
    unsigned char* second,
    unsigned char* dayOfWeek)
{
    2494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2496:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
    249a:	460e      	mov	r6, r1
    249c:	e9dd 7c06 	ldrd	r7, ip, [sp, #24]
    24a0:	4611      	mov	r1, r2
    //Retrieve hours, minutes and seconds
    if (second != NULL)
    24a2:	b135      	cbz	r5, 24b2 <time_fromUnixTime2+0x1e>
    {
        *second = epoch % 60;
    24a4:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    24a8:	fbb0 f2fe 	udiv	r2, r0, lr
    24ac:	fb0e 0212 	mls	r2, lr, r2, r0
    24b0:	702a      	strb	r2, [r5, #0]
    }
    epoch /= 60;
    24b2:	253c      	movs	r5, #60	; 0x3c
    24b4:	fbb0 f0f5 	udiv	r0, r0, r5
    if (minute != NULL)
    24b8:	f1bc 0f00 	cmp.w	ip, #0
    24bc:	d005      	beq.n	24ca <time_fromUnixTime2+0x36>
    {
        *minute = epoch % 60;
    24be:	fbb0 f2f5 	udiv	r2, r0, r5
    24c2:	fb05 0212 	mls	r2, r5, r2, r0
    24c6:	f88c 2000 	strb.w	r2, [ip]
    }
    epoch /= 60;
    24ca:	223c      	movs	r2, #60	; 0x3c
    24cc:	fbb0 f0f2 	udiv	r0, r0, r2
    if (hour != NULL)
    24d0:	b12f      	cbz	r7, 24de <time_fromUnixTime2+0x4a>
    {
        *hour = epoch % 24;
    24d2:	2518      	movs	r5, #24
    24d4:	fbb0 f2f5 	udiv	r2, r0, r5
    24d8:	fb05 0212 	mls	r2, r5, r2, r0
    24dc:	703a      	strb	r2, [r7, #0]
    }
    epoch /= 24;
    24de:	2218      	movs	r2, #24
    24e0:	fbb0 f0f2 	udiv	r0, r0, r2
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    24e4:	f500 45c7 	add.w	r5, r0, #25472	; 0x6380
    24e8:	3524      	adds	r5, #36	; 0x24
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    24ea:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    24ee:	4a26      	ldr	r2, [pc, #152]	; (2588 <time_fromUnixTime2+0xf4>)
    uint32_t c = (20 * b - 2442) / 7305;
    uint32_t d = b - 365 * c - (c / 4);
    uint32_t e = d * 1000 / 30601;
    uint32_t f = d - e * 30 - e * 601 / 1000;
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    24f0:	f8df c098 	ldr.w	ip, [pc, #152]	; 258c <time_fromUnixTime2+0xf8>
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    24f4:	00ad      	lsls	r5, r5, #2
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    24f6:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    24fa:	fbb5 f5f2 	udiv	r5, r5, r2
    24fe:	350f      	adds	r5, #15
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    2500:	4428      	add	r0, r5
    2502:	eba0 0095 	sub.w	r0, r0, r5, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    2506:	2514      	movs	r5, #20
    2508:	4345      	muls	r5, r0
    250a:	f6a5 158a 	subw	r5, r5, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    250e:	f247 2724 	movw	r7, #29220	; 0x7224
    uint32_t c = (20 * b - 2442) / 7305;
    2512:	f641 4289 	movw	r2, #7305	; 0x1c89
    2516:	fbb5 f2f2 	udiv	r2, r5, r2
    uint32_t d = b - 365 * c - (c / 4);
    251a:	fbb5 f5f7 	udiv	r5, r5, r7
    251e:	f240 176d 	movw	r7, #365	; 0x16d
    2522:	1b40      	subs	r0, r0, r5
    2524:	fb07 0712 	mls	r7, r7, r2, r0
    uint32_t e = d * 1000 / 30601;
    2528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    252c:	4378      	muls	r0, r7
    if (e <= 13)
    252e:	4560      	cmp	r0, ip
    2530:	f5a2 5293 	sub.w	r2, r2, #4704	; 0x1260
    uint32_t e = d * 1000 / 30601;
    2534:	f247 7589 	movw	r5, #30601	; 0x7789
    {
        c -= 4716;
    2538:	bf98      	it	ls
    253a:	3a0c      	subls	r2, #12
    uint32_t e = d * 1000 / 30601;
    253c:	fbb0 f5f5 	udiv	r5, r0, r5
        e -= 1;
    }
    else
    {
        c -= 4715;
    2540:	bf8a      	itet	hi
    2542:	3a0b      	subhi	r2, #11
        e -= 1;
    2544:	f105 30ff 	addls.w	r0, r5, #4294967295
        e -= 13;
    2548:	f1a5 000d 	subhi.w	r0, r5, #13
    }
    //Retrieve year, month and day
    if (year != NULL)
    254c:	b106      	cbz	r6, 2550 <time_fromUnixTime2+0xbc>
    {
        *year = (uint16_t)c;
    254e:	8032      	strh	r2, [r6, #0]
    }
    if (month != NULL)
    2550:	b101      	cbz	r1, 2554 <time_fromUnixTime2+0xc0>
    {
        *month = (unsigned char)e;
    2552:	7008      	strb	r0, [r1, #0]
    }
    if (day != NULL)
    2554:	b15b      	cbz	r3, 256e <time_fromUnixTime2+0xda>
    uint32_t f = d - e * 30 - e * 601 / 1000;
    2556:	201e      	movs	r0, #30
    2558:	fb00 7015 	mls	r0, r0, r5, r7
    255c:	f240 2259 	movw	r2, #601	; 0x259
    2560:	4355      	muls	r5, r2
    2562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2566:	fbb5 f5f2 	udiv	r5, r5, r2
    256a:	1b40      	subs	r0, r0, r5
    {
        *day = (unsigned char)f;
    256c:	7018      	strb	r0, [r3, #0]
    }
    if (dayOfWeek != NULL && year != NULL && month != NULL && day != NULL)
    256e:	b144      	cbz	r4, 2582 <time_fromUnixTime2+0xee>
    2570:	b13e      	cbz	r6, 2582 <time_fromUnixTime2+0xee>
    2572:	b131      	cbz	r1, 2582 <time_fromUnixTime2+0xee>
    2574:	b12b      	cbz	r3, 2582 <time_fromUnixTime2+0xee>
    {
        //Calculate day of week
        *dayOfWeek = time_dayOfWeek(*year, *month, *day);
    2576:	781a      	ldrb	r2, [r3, #0]
    2578:	7809      	ldrb	r1, [r1, #0]
    257a:	8830      	ldrh	r0, [r6, #0]
    257c:	f00c fabb 	bl	eaf6 <time_dayOfWeek>
    2580:	7020      	strb	r0, [r4, #0]
    }
    return 0;
}
    2582:	2000      	movs	r0, #0
    2584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2586:	bf00      	nop
    2588:	00023ab1 	.word	0x00023ab1
    258c:	0006897d 	.word	0x0006897d

00002590 <time_toString>:
{
    2590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2594:	b086      	sub	sp, #24
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    2596:	f10d 0315 	add.w	r3, sp, #21
    259a:	9302      	str	r3, [sp, #8]
    259c:	ab05      	add	r3, sp, #20
    uint16_t year = 0;
    259e:	2400      	movs	r4, #0
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    25a0:	9301      	str	r3, [sp, #4]
    25a2:	f10d 0313 	add.w	r3, sp, #19
    25a6:	9300      	str	r3, [sp, #0]
{
    25a8:	4606      	mov	r6, r0
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    25aa:	9403      	str	r4, [sp, #12]
    25ac:	f10d 0312 	add.w	r3, sp, #18
    25b0:	f10d 0211 	add.w	r2, sp, #17
    25b4:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0;
    25b6:	f8ad 4016 	strh.w	r4, [sp, #22]
{
    25ba:	460d      	mov	r5, r1
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    25bc:	f10d 0116 	add.w	r1, sp, #22
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0;
    25c0:	f88d 4011 	strb.w	r4, [sp, #17]
    25c4:	f88d 4012 	strb.w	r4, [sp, #18]
    25c8:	f88d 4013 	strb.w	r4, [sp, #19]
    25cc:	f88d 4014 	strb.w	r4, [sp, #20]
    25d0:	f88d 4015 	strb.w	r4, [sp, #21]
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    25d4:	f7ff ff5e 	bl	2494 <time_fromUnixTime2>
    if ((time->skip & (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY)) != (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY))
    25d8:	88f2      	ldrh	r2, [r6, #6]
    25da:	f002 0307 	and.w	r3, r2, #7
    25de:	2b07      	cmp	r3, #7
    25e0:	f000 80dd 	beq.w	279e <time_toString+0x20e>
            if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
    25e4:	7a33      	ldrb	r3, [r6, #8]
    25e6:	f013 0701 	ands.w	r7, r3, #1
    25ea:	d016      	beq.n	261a <time_toString+0x8a>
                bb_addString(ba, GET_STR_FROM_EEPROM("BEGIN"));
    25ec:	497f      	ldr	r1, [pc, #508]	; (27ec <time_toString+0x25c>)
    25ee:	4628      	mov	r0, r5
    25f0:	f00b faf6 	bl	dbe0 <bb_addString>
            if ((time->skip & DATETIME_SKIPS_DAY) == 0)
    25f4:	88f3      	ldrh	r3, [r6, #6]
    25f6:	0759      	lsls	r1, r3, #29
    25f8:	f100 80ac 	bmi.w	2754 <time_toString+0x1c4>
                if (!empty)
    25fc:	b91c      	cbnz	r4, 2606 <time_toString+0x76>
                    bb_setUInt8(ba, separator);
    25fe:	212f      	movs	r1, #47	; 0x2f
    2600:	4628      	mov	r0, r5
    2602:	f00b f9bc 	bl	d97e <bb_setUInt8>
                if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    2606:	7a33      	ldrb	r3, [r6, #8]
    2608:	f013 0404 	ands.w	r4, r3, #4
    260c:	d023      	beq.n	2656 <time_toString+0xc6>
                    bb_addString(ba, GET_STR_FROM_EEPROM("LASTDAY"));
    260e:	4978      	ldr	r1, [pc, #480]	; (27f0 <time_toString+0x260>)
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    2610:	4628      	mov	r0, r5
    2612:	f00b fae5 	bl	dbe0 <bb_addString>
    2616:	2400      	movs	r4, #0
    2618:	e023      	b.n	2662 <time_toString+0xd2>
            else if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
    261a:	f013 0402 	ands.w	r4, r3, #2
    261e:	d006      	beq.n	262e <time_toString+0x9e>
                bb_addString(ba, GET_STR_FROM_EEPROM("END"));
    2620:	4974      	ldr	r1, [pc, #464]	; (27f4 <time_toString+0x264>)
    2622:	4628      	mov	r0, r5
                empty = 0;
    2624:	463c      	mov	r4, r7
                bb_addString(ba, GET_STR_FROM_EEPROM("END"));
    2626:	f00b fadb 	bl	dbe0 <bb_addString>
                addDate = 1;
    262a:	2701      	movs	r7, #1
    262c:	e7e2      	b.n	25f4 <time_toString+0x64>
            else if ((time->skip & DATETIME_SKIPS_MONTH) == 0)
    262e:	0790      	lsls	r0, r2, #30
    2630:	d407      	bmi.n	2642 <time_toString+0xb2>
                bb_addIntAsString2(ba, mon, 2);
    2632:	f89d 1011 	ldrb.w	r1, [sp, #17]
    2636:	2202      	movs	r2, #2
    2638:	4628      	mov	r0, r5
    263a:	f00b fc6d 	bl	df18 <bb_addIntAsString2>
    unsigned char addDate = 0;
    263e:	4627      	mov	r7, r4
    2640:	e7d8      	b.n	25f4 <time_toString+0x64>
            else if ((time->extraInfo & (DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY | DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2)) != 0)
    2642:	f013 070c 	ands.w	r7, r3, #12
    2646:	d004      	beq.n	2652 <time_toString+0xc2>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    2648:	496b      	ldr	r1, [pc, #428]	; (27f8 <time_toString+0x268>)
    264a:	4628      	mov	r0, r5
    264c:	f00b fac8 	bl	dbe0 <bb_addString>
    2650:	e7f5      	b.n	263e <time_toString+0xae>
    unsigned char empty = 1;
    2652:	2401      	movs	r4, #1
    2654:	e7ce      	b.n	25f4 <time_toString+0x64>
                else if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
    2656:	071a      	lsls	r2, r3, #28
    2658:	d575      	bpl.n	2746 <time_toString+0x1b6>
                    bb_addString(ba, GET_STR_FROM_EEPROM("LASTDAY2"));
    265a:	4968      	ldr	r1, [pc, #416]	; (27fc <time_toString+0x26c>)
    265c:	4628      	mov	r0, r5
    265e:	f00b fabf 	bl	dbe0 <bb_addString>
            if ((time->skip & DATETIME_SKIPS_YEAR) == 0)
    2662:	88f3      	ldrh	r3, [r6, #6]
    2664:	07db      	lsls	r3, r3, #31
    2666:	f100 8088 	bmi.w	277a <time_toString+0x1ea>
                if (!empty)
    266a:	2c00      	cmp	r4, #0
    266c:	d07b      	beq.n	2766 <time_toString+0x1d6>
                bb_addIntAsString(ba, (time->skip& DATETIME_SKIPS_YEAR) == 0 ? year : 0);
    266e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    2672:	4628      	mov	r0, r5
    2674:	f00b fc60 	bl	df38 <bb_addIntAsString>
    2678:	2400      	movs	r4, #0
    unsigned char addTime = (time->skip & (DATETIME_SKIPS_HOUR | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_SECOND)) != 0;
    267a:	88f7      	ldrh	r7, [r6, #6]
    267c:	f007 0770 	and.w	r7, r7, #112	; 0x70
    if (!empty)
    2680:	b91c      	cbnz	r4, 268a <time_toString+0xfa>
        bb_setUInt8(ba, ' ');
    2682:	2120      	movs	r1, #32
    2684:	4628      	mov	r0, r5
    2686:	f00b f97a 	bl	d97e <bb_setUInt8>
    if ((time->skip & DATETIME_SKIPS_HOUR) == 0)
    268a:	88f3      	ldrh	r3, [r6, #6]
    268c:	f013 0810 	ands.w	r8, r3, #16
    2690:	f040 8087 	bne.w	27a2 <time_toString+0x212>
        bb_addIntAsString2(ba, hour, 2);
    2694:	f89d 1013 	ldrb.w	r1, [sp, #19]
    2698:	2202      	movs	r2, #2
    269a:	4628      	mov	r0, r5
    269c:	f00b fc3c 	bl	df18 <bb_addIntAsString2>
        bb_setUInt8(ba, '*');
    26a0:	2400      	movs	r4, #0
    if ((time->skip & DATETIME_SKIPS_MINUTE) == 0)
    26a2:	88f3      	ldrh	r3, [r6, #6]
    26a4:	0699      	lsls	r1, r3, #26
    26a6:	f100 8089 	bmi.w	27bc <time_toString+0x22c>
        if (!empty)
    26aa:	b91c      	cbnz	r4, 26b4 <time_toString+0x124>
            bb_setUInt8(ba, ':');
    26ac:	213a      	movs	r1, #58	; 0x3a
    26ae:	4628      	mov	r0, r5
    26b0:	f00b f965 	bl	d97e <bb_setUInt8>
        bb_addIntAsString2(ba, min, 2);
    26b4:	f89d 1014 	ldrb.w	r1, [sp, #20]
    26b8:	2202      	movs	r2, #2
    26ba:	4628      	mov	r0, r5
    26bc:	f00b fc2c 	bl	df18 <bb_addIntAsString2>
        bb_setUInt8(ba, '*');
    26c0:	2400      	movs	r4, #0
    if ((time->skip & DATETIME_SKIPS_SECOND) == 0)
    26c2:	88f3      	ldrh	r3, [r6, #6]
    26c4:	065a      	lsls	r2, r3, #25
    26c6:	f100 8085 	bmi.w	27d4 <time_toString+0x244>
        if (!empty)
    26ca:	b91c      	cbnz	r4, 26d4 <time_toString+0x144>
            bb_setUInt8(ba, ':');
    26cc:	213a      	movs	r1, #58	; 0x3a
    26ce:	4628      	mov	r0, r5
    26d0:	f00b f955 	bl	d97e <bb_setUInt8>
        bb_addIntAsString2(ba, sec, 2);
    26d4:	f89d 1015 	ldrb.w	r1, [sp, #21]
    26d8:	2202      	movs	r2, #2
    26da:	4628      	mov	r0, r5
    26dc:	f00b fc1c 	bl	df18 <bb_addIntAsString2>
    if (time->deviation != (short)0x8000 && (time->skip & DATETIME_SKIPS_DEVITATION) == 0)
    26e0:	f9b6 4004 	ldrsh.w	r4, [r6, #4]
    26e4:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
    26e8:	d022      	beq.n	2730 <time_toString+0x1a0>
    26ea:	88f3      	ldrh	r3, [r6, #6]
    26ec:	05db      	lsls	r3, r3, #23
    26ee:	d41f      	bmi.n	2730 <time_toString+0x1a0>
        tmp = -tmp;
    26f0:	4264      	negs	r4, r4
        bb_addString(ba, " UTC");
    26f2:	4943      	ldr	r1, [pc, #268]	; (2800 <time_toString+0x270>)
        tmp = -tmp;
    26f4:	b224      	sxth	r4, r4
        bb_addString(ba, " UTC");
    26f6:	4628      	mov	r0, r5
    26f8:	f00b fa72 	bl	dbe0 <bb_addString>
        if (tmp < 0)
    26fc:	2c00      	cmp	r4, #0
            bb_addString(ba, "-");
    26fe:	bfb4      	ite	lt
    2700:	4940      	ldrlt	r1, [pc, #256]	; (2804 <time_toString+0x274>)
            bb_addString(ba, "+");
    2702:	4941      	ldrge	r1, [pc, #260]	; (2808 <time_toString+0x278>)
    2704:	4628      	mov	r0, r5
    2706:	f00b fa6b 	bl	dbe0 <bb_addString>
        bb_addIntAsString2(ba, (int)(tmp / 60), 2);
    270a:	273c      	movs	r7, #60	; 0x3c
    270c:	2202      	movs	r2, #2
    270e:	fb94 f6f7 	sdiv	r6, r4, r7
    2712:	4628      	mov	r0, r5
    2714:	4631      	mov	r1, r6
    2716:	f00b fbff 	bl	df18 <bb_addIntAsString2>
        bb_addString(ba, ":");
    271a:	493c      	ldr	r1, [pc, #240]	; (280c <time_toString+0x27c>)
    271c:	4628      	mov	r0, r5
    271e:	f00b fa5f 	bl	dbe0 <bb_addString>
        bb_addIntAsString2(ba, (int)(tmp % 60), 2);
    2722:	fb07 4116 	mls	r1, r7, r6, r4
    2726:	2202      	movs	r2, #2
    2728:	b209      	sxth	r1, r1
    272a:	4628      	mov	r0, r5
    272c:	f00b fbf4 	bl	df18 <bb_addIntAsString2>
    bb_setUInt8(ba, '\0');
    2730:	2100      	movs	r1, #0
    2732:	4628      	mov	r0, r5
    2734:	f00b f923 	bl	d97e <bb_setUInt8>
    --ba->size;
    2738:	88eb      	ldrh	r3, [r5, #6]
}
    273a:	2000      	movs	r0, #0
    --ba->size;
    273c:	3b01      	subs	r3, #1
    273e:	80eb      	strh	r3, [r5, #6]
}
    2740:	b006      	add	sp, #24
    2742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    bb_addIntAsString2(ba, day, 2);
    2746:	f89d 1012 	ldrb.w	r1, [sp, #18]
    274a:	2202      	movs	r2, #2
    274c:	4628      	mov	r0, r5
    274e:	f00b fbe3 	bl	df18 <bb_addIntAsString2>
    2752:	e786      	b.n	2662 <time_toString+0xd2>
            else if (addDate)
    2754:	2f00      	cmp	r7, #0
    2756:	d084      	beq.n	2662 <time_toString+0xd2>
                if (!empty)
    2758:	b91c      	cbnz	r4, 2762 <time_toString+0x1d2>
                    bb_setUInt8(ba, separator);
    275a:	212f      	movs	r1, #47	; 0x2f
    275c:	4628      	mov	r0, r5
    275e:	f00b f90e 	bl	d97e <bb_setUInt8>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    2762:	4925      	ldr	r1, [pc, #148]	; (27f8 <time_toString+0x268>)
    2764:	e754      	b.n	2610 <time_toString+0x80>
                    bb_setUInt8(ba, separator);
    2766:	212f      	movs	r1, #47	; 0x2f
    2768:	4628      	mov	r0, r5
    276a:	f00b f908 	bl	d97e <bb_setUInt8>
                bb_addIntAsString(ba, (time->skip& DATETIME_SKIPS_YEAR) == 0 ? year : 0);
    276e:	88f3      	ldrh	r3, [r6, #6]
    2770:	07d8      	lsls	r0, r3, #31
    2772:	f57f af7c 	bpl.w	266e <time_toString+0xde>
    2776:	4621      	mov	r1, r4
    2778:	e77b      	b.n	2672 <time_toString+0xe2>
            else if ((time->extraInfo & (DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY | DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2)) != 0)
    277a:	7a33      	ldrb	r3, [r6, #8]
    277c:	f013 0f0c 	tst.w	r3, #12
    2780:	d009      	beq.n	2796 <time_toString+0x206>
                if (!empty)
    2782:	b91c      	cbnz	r4, 278c <time_toString+0x1fc>
                    bb_setUInt8(ba, separator);
    2784:	212f      	movs	r1, #47	; 0x2f
    2786:	4628      	mov	r0, r5
    2788:	f00b f8f9 	bl	d97e <bb_setUInt8>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    278c:	491a      	ldr	r1, [pc, #104]	; (27f8 <time_toString+0x268>)
    278e:	4628      	mov	r0, r5
    2790:	f00b fa26 	bl	dbe0 <bb_addString>
    2794:	e770      	b.n	2678 <time_toString+0xe8>
            else if (addDate)
    2796:	2f00      	cmp	r7, #0
    2798:	f43f af6f 	beq.w	267a <time_toString+0xea>
    279c:	e7f1      	b.n	2782 <time_toString+0x1f2>
    unsigned char empty = 1;
    279e:	2401      	movs	r4, #1
    27a0:	e76b      	b.n	267a <time_toString+0xea>
    else if (addTime)
    27a2:	2f00      	cmp	r7, #0
    27a4:	f43f af7d 	beq.w	26a2 <time_toString+0x112>
        if (!empty)
    27a8:	b91c      	cbnz	r4, 27b2 <time_toString+0x222>
            bb_setUInt8(ba, ':');
    27aa:	213a      	movs	r1, #58	; 0x3a
    27ac:	4628      	mov	r0, r5
    27ae:	f00b f8e6 	bl	d97e <bb_setUInt8>
        bb_setUInt8(ba, '*');
    27b2:	212a      	movs	r1, #42	; 0x2a
    27b4:	4628      	mov	r0, r5
    27b6:	f00b f8e2 	bl	d97e <bb_setUInt8>
    27ba:	e771      	b.n	26a0 <time_toString+0x110>
    else if (addTime)
    27bc:	2f00      	cmp	r7, #0
    27be:	d080      	beq.n	26c2 <time_toString+0x132>
        if (!empty)
    27c0:	b91c      	cbnz	r4, 27ca <time_toString+0x23a>
            bb_setUInt8(ba, ':');
    27c2:	213a      	movs	r1, #58	; 0x3a
    27c4:	4628      	mov	r0, r5
    27c6:	f00b f8da 	bl	d97e <bb_setUInt8>
        bb_setUInt8(ba, '*');
    27ca:	212a      	movs	r1, #42	; 0x2a
    27cc:	4628      	mov	r0, r5
    27ce:	f00b f8d6 	bl	d97e <bb_setUInt8>
    27d2:	e775      	b.n	26c0 <time_toString+0x130>
    else if (addTime)
    27d4:	2f00      	cmp	r7, #0
    27d6:	d083      	beq.n	26e0 <time_toString+0x150>
        if (!empty)
    27d8:	b91c      	cbnz	r4, 27e2 <time_toString+0x252>
            bb_setUInt8(ba, ':');
    27da:	213a      	movs	r1, #58	; 0x3a
    27dc:	4628      	mov	r0, r5
    27de:	f00b f8ce 	bl	d97e <bb_setUInt8>
        bb_setUInt8(ba, '*');
    27e2:	212a      	movs	r1, #42	; 0x2a
    27e4:	4628      	mov	r0, r5
    27e6:	f00b f8ca 	bl	d97e <bb_setUInt8>
    27ea:	e779      	b.n	26e0 <time_toString+0x150>
    27ec:	0001ed59 	.word	0x0001ed59
    27f0:	0001ed63 	.word	0x0001ed63
    27f4:	0001ed5f 	.word	0x0001ed5f
    27f8:	0001f424 	.word	0x0001f424
    27fc:	0001ed6b 	.word	0x0001ed6b
    2800:	0001ed74 	.word	0x0001ed74
    2804:	0001fa77 	.word	0x0001fa77
    2808:	0001ed79 	.word	0x0001ed79
    280c:	0001ed7b 	.word	0x0001ed7b

00002810 <time_toUnixTime2>:

// Convert date time to Epoch time.
uint32_t time_toUnixTime2(gxtime* time)
{
    gxtime tmp = *time;
    if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    2810:	7a03      	ldrb	r3, [r0, #8]
    2812:	075b      	lsls	r3, r3, #29
{
    2814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    gxtime tmp = *time;
    2818:	6805      	ldr	r5, [r0, #0]
    281a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
{
    281e:	4604      	mov	r4, r0
    if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    2820:	d511      	bpl.n	2846 <time_toUnixTime2+0x36>
    {
        unsigned char days = time_getDays(time);
    2822:	f00c f8fe 	bl	ea22 <time_getDays>
    2826:	4606      	mov	r6, r0
        unsigned char max = date_daysInMonth(time_getYears(time), time_getMonths(time));
    2828:	4620      	mov	r0, r4
    282a:	f00c f8f4 	bl	ea16 <time_getYears>
    282e:	4607      	mov	r7, r0
    2830:	4620      	mov	r0, r4
    2832:	f00c f8f3 	bl	ea1c <time_getMonths>
    2836:	4601      	mov	r1, r0
    2838:	4638      	mov	r0, r7
    283a:	f00c f93a 	bl	eab2 <date_daysInMonth>
    value->value += seconds;
    283e:	4b06      	ldr	r3, [pc, #24]	; (2858 <time_toUnixTime2+0x48>)
        time_addDays(&tmp, max - days);
    2840:	1b80      	subs	r0, r0, r6
    value->value += seconds;
    2842:	fb03 5500 	mla	r5, r3, r0, r5
    }
    uint32_t value;
#ifdef DLMS_USE_EPOCH_TIME
    value = tmp.value;
    if (tmp.deviation != 0 && time->deviation != (short)0x8000)
    2846:	f3c8 030e 	ubfx	r3, r8, #0, #15
    284a:	b113      	cbz	r3, 2852 <time_toUnixTime2+0x42>
    {
#ifdef DLMS_USE_UTC_TIME_ZONE
        value -= 60 * tmp.deviation;
#else
        value += 60 * tmp.deviation;
    284c:	233c      	movs	r3, #60	; 0x3c
    284e:	fb18 5503 	smlabb	r5, r8, r3, r5
    }
#else
    value = (uint32_t)gxmktime(&tmp.value);
#endif //DLMS_USE_EPOCH_TIME
    return value;
}
    2852:	4628      	mov	r0, r5
    2854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2858:	00015180 	.word	0x00015180

0000285c <time_compareWithDiff>:
{
    285c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value2 == 0xFFFFFFFF)
    285e:	1c4f      	adds	r7, r1, #1
{
    2860:	b089      	sub	sp, #36	; 0x24
    2862:	4606      	mov	r6, r0
    2864:	460d      	mov	r5, r1
    2866:	4614      	mov	r4, r2
    if (value2 == 0xFFFFFFFF)
    2868:	f000 8081 	beq.w	296e <time_compareWithDiff+0x112>
    time_fromUnixTime2(time_toUnixTime2(value1), &year1, &month1,
    286c:	f7ff ffd0 	bl	2810 <time_toUnixTime2>
    2870:	2300      	movs	r3, #0
    2872:	9303      	str	r3, [sp, #12]
    2874:	f10d 0316 	add.w	r3, sp, #22
    2878:	9302      	str	r3, [sp, #8]
    287a:	f10d 0315 	add.w	r3, sp, #21
    287e:	9301      	str	r3, [sp, #4]
    2880:	ab05      	add	r3, sp, #20
    2882:	9300      	str	r3, [sp, #0]
    2884:	f10d 0212 	add.w	r2, sp, #18
    2888:	f10d 0313 	add.w	r3, sp, #19
    288c:	a907      	add	r1, sp, #28
    288e:	f7ff fe01 	bl	2494 <time_fromUnixTime2>
    if (deviationDiff != (short)0x8000)
    2892:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
        value2 += (60 * deviationDiff);
    2896:	bf1c      	itt	ne
    2898:	233c      	movne	r3, #60	; 0x3c
    289a:	fb14 5503 	smlabbne	r5, r4, r3, r5
    time_fromUnixTime2(value2, &year2, &month2,
    289e:	f10d 031b 	add.w	r3, sp, #27
    28a2:	9302      	str	r3, [sp, #8]
    28a4:	f10d 031a 	add.w	r3, sp, #26
    28a8:	9301      	str	r3, [sp, #4]
    28aa:	2700      	movs	r7, #0
    28ac:	f10d 0319 	add.w	r3, sp, #25
    28b0:	9300      	str	r3, [sp, #0]
    28b2:	f10d 0217 	add.w	r2, sp, #23
    28b6:	9703      	str	r7, [sp, #12]
    28b8:	ab06      	add	r3, sp, #24
    28ba:	f10d 011e 	add.w	r1, sp, #30
    28be:	4628      	mov	r0, r5
    28c0:	f7ff fde8 	bl	2494 <time_fromUnixTime2>
    if ((value1->skip & (DATETIME_SKIPS_SECOND | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_HOUR | DATETIME_SKIPS_DAY | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_YEAR)) != 0)
    28c4:	88f2      	ldrh	r2, [r6, #6]
    28c6:	f012 0477 	ands.w	r4, r2, #119	; 0x77
    28ca:	d04a      	beq.n	2962 <time_compareWithDiff+0x106>
        if ((value1->skip & DATETIME_SKIPS_SECOND) == 0)
    28cc:	0656      	lsls	r6, r2, #25
        uint32_t val1 = 0, val2 = 0;
    28ce:	bf4d      	iteet	mi
    28d0:	463b      	movmi	r3, r7
            val1 = second1;
    28d2:	f89d 0016 	ldrbpl.w	r0, [sp, #22]
            val2 = second2;
    28d6:	f89d 301b 	ldrbpl.w	r3, [sp, #27]
        uint32_t val1 = 0, val2 = 0;
    28da:	4618      	movmi	r0, r3
        if ((value1->skip & DATETIME_SKIPS_MINUTE) == 0)
    28dc:	0695      	lsls	r5, r2, #26
    28de:	d408      	bmi.n	28f2 <time_compareWithDiff+0x96>
            val1 += 60L * minute1;
    28e0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    28e4:	213c      	movs	r1, #60	; 0x3c
    28e6:	fb11 0004 	smlabb	r0, r1, r4, r0
            val2 += 60L * minute2;
    28ea:	f89d 401a 	ldrb.w	r4, [sp, #26]
    28ee:	fb11 3304 	smlabb	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_HOUR) == 0)
    28f2:	06d4      	lsls	r4, r2, #27
    28f4:	d409      	bmi.n	290a <time_compareWithDiff+0xae>
            val1 += 3600L * hour1;
    28f6:	f89d 4014 	ldrb.w	r4, [sp, #20]
    28fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    28fe:	fb01 0004 	mla	r0, r1, r4, r0
            val2 += 3600L * hour2;
    2902:	f89d 4019 	ldrb.w	r4, [sp, #25]
    2906:	fb01 3304 	mla	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_DAY) == 0)
    290a:	0751      	lsls	r1, r2, #29
    290c:	d408      	bmi.n	2920 <time_compareWithDiff+0xc4>
            val1 += 24L * 3600L * day1;
    290e:	f89d 4013 	ldrb.w	r4, [sp, #19]
    2912:	4918      	ldr	r1, [pc, #96]	; (2974 <time_compareWithDiff+0x118>)
    2914:	fb01 0004 	mla	r0, r1, r4, r0
            val2 += 24L * 3600L * day2;
    2918:	f89d 4018 	ldrb.w	r4, [sp, #24]
    291c:	fb01 3304 	mla	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_MONTH) == 0)
    2920:	f002 0101 	and.w	r1, r2, #1
    2924:	0792      	lsls	r2, r2, #30
    2926:	d415      	bmi.n	2954 <time_compareWithDiff+0xf8>
            if ((value1->skip & DATETIME_SKIPS_YEAR) == 0)
    2928:	b951      	cbnz	r1, 2940 <time_compareWithDiff+0xe4>
                if (year1 != year2)
    292a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    292e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    2932:	4291      	cmp	r1, r2
    2934:	d004      	beq.n	2940 <time_compareWithDiff+0xe4>
            return val1 < val2 ? -1 : 1;
    2936:	d21a      	bcs.n	296e <time_compareWithDiff+0x112>
                    return year1 < year2 ? -1 : 1;
    2938:	f04f 30ff 	mov.w	r0, #4294967295
}
    293c:	b009      	add	sp, #36	; 0x24
    293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (month1 != month2)
    2940:	f89d 1012 	ldrb.w	r1, [sp, #18]
    2944:	f89d 2017 	ldrb.w	r2, [sp, #23]
            if (year1 != year2)
    2948:	4291      	cmp	r1, r2
    294a:	d1f4      	bne.n	2936 <time_compareWithDiff+0xda>
        if (val1 != val2)
    294c:	4298      	cmp	r0, r3
    294e:	d1f2      	bne.n	2936 <time_compareWithDiff+0xda>
        return 0;
    2950:	2000      	movs	r0, #0
    2952:	e7f3      	b.n	293c <time_compareWithDiff+0xe0>
        else if ((value1->skip & DATETIME_SKIPS_YEAR) == 0)
    2954:	2900      	cmp	r1, #0
    2956:	d1f9      	bne.n	294c <time_compareWithDiff+0xf0>
            if (year1 != year2)
    2958:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    295c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    2960:	e7f2      	b.n	2948 <time_compareWithDiff+0xec>
    if (time_toUnixTime2(value1) == value2)
    2962:	4630      	mov	r0, r6
    2964:	f7ff ff54 	bl	2810 <time_toUnixTime2>
    2968:	4285      	cmp	r5, r0
    296a:	d0f1      	beq.n	2950 <time_compareWithDiff+0xf4>
    return time_toUnixTime2(value1) < value2 ? -1 : 1;
    296c:	d8e4      	bhi.n	2938 <time_compareWithDiff+0xdc>
        return 1;
    296e:	2001      	movs	r0, #1
    2970:	e7e4      	b.n	293c <time_compareWithDiff+0xe0>
    2972:	bf00      	nop
    2974:	00015180 	.word	0x00015180

00002978 <countCRC.isra.0>:
        0x6B46, 0x7ACF, 0x4854, 0x59DD, 0x2D62, 0x3CEB, 0x0E70, 0x1FF9,
        0xF78F, 0xE606, 0xD49D, 0xC514, 0xB1AB, 0xA022, 0x92B9, 0x8330,
        0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
    };

    static uint16_t countCRC(gxByteBuffer* Buff, uint32_t index, uint32_t count)
    2978:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef ARDUINO_ARCH_AVR
//If Arduino is used data is read from flash like this.
            tmp = (FCS16 ^ Buff->data[index + pos]) & 0xFF;
            FCS16 = (FCS16 >> 8) ^ pgm_read_word_near(FCS16Table + tmp);
#else
            FCS16 = (FCS16 >> 8) ^ FCS16Table[(FCS16 ^ ((unsigned char*)Buff->data)[index + pos]) & 0xFF];
    297a:	4f0b      	ldr	r7, [pc, #44]	; (29a8 <countCRC.isra.0+0x30>)
    static uint16_t countCRC(gxByteBuffer* Buff, uint32_t index, uint32_t count)
    297c:	2500      	movs	r5, #0
        uint16_t FCS16 = 0xFFFF;
    297e:	f64f 73ff 	movw	r3, #65535	; 0xffff
        for (pos = 0; pos < count; ++pos)
    2982:	b2ae      	uxth	r6, r5
    2984:	4296      	cmp	r6, r2
    2986:	f105 0501 	add.w	r5, r5, #1
    298a:	d303      	bcc.n	2994 <countCRC.isra.0+0x1c>
#endif //ARDUINO_ARCH_AVR
        }
        FCS16 = ~FCS16;
    298c:	43d8      	mvns	r0, r3
        //CRC is in big endian byte order.
        tmp = FCS16;
        FCS16 = tmp >> 8;
        FCS16 |= tmp << 8;
        return FCS16;
    298e:	ba40      	rev16	r0, r0
    }
    2990:	b280      	uxth	r0, r0
    2992:	bdf0      	pop	{r4, r5, r6, r7, pc}
            FCS16 = (FCS16 >> 8) ^ FCS16Table[(FCS16 ^ ((unsigned char*)Buff->data)[index + pos]) & 0xFF];
    2994:	6804      	ldr	r4, [r0, #0]
    2996:	4434      	add	r4, r6
    2998:	5c64      	ldrb	r4, [r4, r1]
    299a:	405c      	eors	r4, r3
    299c:	b2e4      	uxtb	r4, r4
    299e:	f837 4014 	ldrh.w	r4, [r7, r4, lsl #1]
    29a2:	ea84 2313 	eor.w	r3, r4, r3, lsr #8
        for (pos = 0; pos < count; ++pos)
    29a6:	e7ec      	b.n	2982 <countCRC.isra.0+0xa>
    29a8:	0001e964 	.word	0x0001e964

000029ac <getBcd>:
* info
*            Data info.
* Returns  parsed BCD value.
*/
int getBcd(gxByteBuffer* buff, gxDataInfo* info, unsigned char knownType, dlmsVARIANT* value)
{
    29ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    29b0:	4605      	mov	r5, r0
    29b2:	460e      	mov	r6, r1
    29b4:	461c      	mov	r4, r3
#endif //DLMS_IGNORE_MALLOC
    static const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    int ret = 0, a;
    uint16_t len;
    unsigned char ch;
    if (knownType)
    29b6:	b1d2      	cbz	r2, 29ee <getBcd+0x42>
    {
        len = (uint16_t)buff->size;
    29b8:	88c3      	ldrh	r3, [r0, #6]
    29ba:	f8ad 3006 	strh.w	r3, [sp, #6]
            *p = hexArray[ch & 0x0F];
            p++;
        }
    }
#else
    value->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    29be:	200c      	movs	r0, #12
    29c0:	f009 ff50 	bl	c864 <malloc>
    29c4:	60a0      	str	r0, [r4, #8]
    BYTE_BUFFER_INIT(value->strVal);
    29c6:	f00a ff71 	bl	d8ac <bb_init>
    value->vt = DLMS_DATA_TYPE_STRING;
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    29ca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    29ce:	68a0      	ldr	r0, [r4, #8]
        {
            break;
        }
        idHigh = ch >> 4;
        idLow = ch & 0x0F;
        bb_setInt8(value->strVal, hexArray[idHigh]);
    29d0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2a48 <getBcd+0x9c>
    value->vt = DLMS_DATA_TYPE_STRING;
    29d4:	230a      	movs	r3, #10
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    29d6:	0049      	lsls	r1, r1, #1
    value->vt = DLMS_DATA_TYPE_STRING;
    29d8:	7023      	strb	r3, [r4, #0]
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    29da:	b289      	uxth	r1, r1
    29dc:	f00a ff6c 	bl	d8b8 <bb_capacity>
    for (a = 0; a != len; ++a)
    29e0:	2700      	movs	r7, #0
    29e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    29e6:	42bb      	cmp	r3, r7
    29e8:	d113      	bne.n	2a12 <getBcd+0x66>
    29ea:	2000      	movs	r0, #0
    29ec:	e00e      	b.n	2a0c <getBcd+0x60>
        if (hlp_getObjectCount2(buff, &len) != 0)
    29ee:	f10d 0106 	add.w	r1, sp, #6
    29f2:	f018 f88f 	bl	1ab14 <hlp_getObjectCount2>
    29f6:	bb20      	cbnz	r0, 2a42 <getBcd+0x96>
        if ((buff->size - buff->position) < (uint16_t)(2 * len))
    29f8:	892b      	ldrh	r3, [r5, #8]
    29fa:	88ea      	ldrh	r2, [r5, #6]
    29fc:	1ad2      	subs	r2, r2, r3
    29fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2a02:	005b      	lsls	r3, r3, #1
    2a04:	b29b      	uxth	r3, r3
    2a06:	429a      	cmp	r2, r3
    2a08:	dad9      	bge.n	29be <getBcd+0x12>
            info->complete = 0;
    2a0a:	7170      	strb	r0, [r6, #5]
        bb_setInt8(value->strVal, hexArray[idLow]);
    }
#endif //DLMS_IGNORE_MALLOC
    return ret;
}
    2a0c:	b002      	add	sp, #8
    2a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a12:	f10d 0105 	add.w	r1, sp, #5
    2a16:	4628      	mov	r0, r5
    2a18:	f00b f921 	bl	dc5e <bb_getUInt8>
    2a1c:	2800      	cmp	r0, #0
    2a1e:	d1f5      	bne.n	2a0c <getBcd+0x60>
        idHigh = ch >> 4;
    2a20:	f89d 6005 	ldrb.w	r6, [sp, #5]
        bb_setInt8(value->strVal, hexArray[idHigh]);
    2a24:	68a0      	ldr	r0, [r4, #8]
    2a26:	0933      	lsrs	r3, r6, #4
        bb_setInt8(value->strVal, hexArray[idLow]);
    2a28:	f006 060f 	and.w	r6, r6, #15
        bb_setInt8(value->strVal, hexArray[idHigh]);
    2a2c:	f818 1003 	ldrb.w	r1, [r8, r3]
    2a30:	f00b f882 	bl	db38 <bb_setInt8>
        bb_setInt8(value->strVal, hexArray[idLow]);
    2a34:	f818 1006 	ldrb.w	r1, [r8, r6]
    2a38:	68a0      	ldr	r0, [r4, #8]
    2a3a:	f00b f87d 	bl	db38 <bb_setInt8>
    for (a = 0; a != len; ++a)
    2a3e:	3701      	adds	r7, #1
    2a40:	e7cf      	b.n	29e2 <getBcd+0x36>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    2a42:	f44f 7082 	mov.w	r0, #260	; 0x104
    2a46:	e7e1      	b.n	2a0c <getBcd+0x60>
    2a48:	0001ed8b 	.word	0x0001ed8b

00002a4c <getTime>:
* info
*            Data info.
* Returns  Parsed time.
*/
int getTime(gxByteBuffer* buff, gxDataInfo* info, dlmsVARIANT* value)
{
    2a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret;
    unsigned char ch, hour, minute, second;
    uint16_t ms = 0xFFFF;
    if (buff->size - buff->position < 4)
    2a50:	88c3      	ldrh	r3, [r0, #6]
{
    2a52:	4616      	mov	r6, r2
    if (buff->size - buff->position < 4)
    2a54:	8902      	ldrh	r2, [r0, #8]
    2a56:	1a9b      	subs	r3, r3, r2
    2a58:	2b03      	cmp	r3, #3
{
    2a5a:	b089      	sub	sp, #36	; 0x24
    2a5c:	4605      	mov	r5, r0
    if (buff->size - buff->position < 4)
    2a5e:	dc06      	bgt.n	2a6e <getTime+0x22>
    {
        // If there is not enough data available.
        info->complete = 0;
    2a60:	2000      	movs	r0, #0
    2a62:	7148      	strb	r0, [r1, #5]
        return 0;
    2a64:	4604      	mov	r4, r0
    value->vt = DLMS_DATA_TYPE_TIME;
#else
    time_init((gxtime*)value->pVal, -1, -1, -1, hour, minute, second, ms, 0x8000);
#endif //DLMS_IGNORE_MALLOC
    return 0;
}
    2a66:	4620      	mov	r0, r4
    2a68:	b009      	add	sp, #36	; 0x24
    2a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a6e:	f10d 011f 	add.w	r1, sp, #31
    2a72:	f00b f8f4 	bl	dc5e <bb_getUInt8>
    2a76:	4604      	mov	r4, r0
    2a78:	2800      	cmp	r0, #0
    2a7a:	d1f4      	bne.n	2a66 <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a7c:	f10d 011f 	add.w	r1, sp, #31
    2a80:	4628      	mov	r0, r5
    hour = ch;
    2a82:	f89d 701f 	ldrb.w	r7, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a86:	f00b f8ea 	bl	dc5e <bb_getUInt8>
    2a8a:	4604      	mov	r4, r0
    2a8c:	2800      	cmp	r0, #0
    2a8e:	d1ea      	bne.n	2a66 <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a90:	f10d 011f 	add.w	r1, sp, #31
    2a94:	4628      	mov	r0, r5
    minute = ch;
    2a96:	f89d 801f 	ldrb.w	r8, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a9a:	f00b f8e0 	bl	dc5e <bb_getUInt8>
    2a9e:	4604      	mov	r4, r0
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d1e0      	bne.n	2a66 <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2aa4:	f10d 011f 	add.w	r1, sp, #31
    2aa8:	4628      	mov	r0, r5
    second = ch;
    2aaa:	f89d 901f 	ldrb.w	r9, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2aae:	f00b f8d6 	bl	dc5e <bb_getUInt8>
    2ab2:	4604      	mov	r4, r0
    2ab4:	2800      	cmp	r0, #0
    2ab6:	d1d6      	bne.n	2a66 <getTime+0x1a>
    if (ch != 0xFF)
    2ab8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2abc:	2bff      	cmp	r3, #255	; 0xff
        ms = ch * 10;
    2abe:	bf1c      	itt	ne
    2ac0:	eb03 0383 	addne.w	r3, r3, r3, lsl #2
    2ac4:	005d      	lslne	r5, r3, #1
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    2ac6:	f996 3000 	ldrsb.w	r3, [r6]
    uint16_t ms = 0xFFFF;
    2aca:	bf08      	it	eq
    2acc:	f64f 75ff 	movweq	r5, #65535	; 0xffff
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	db03      	blt.n	2adc <getTime+0x90>
        value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    2ad4:	200c      	movs	r0, #12
    2ad6:	f009 fec5 	bl	c864 <malloc>
    2ada:	60b0      	str	r0, [r6, #8]
    time_init(value->dateTime, (uint16_t)-1, 0xFF, 0xFF, hour, minute, second, ms, 0x8000);
    2adc:	4b07      	ldr	r3, [pc, #28]	; (2afc <getTime+0xb0>)
    2ade:	68b0      	ldr	r0, [r6, #8]
    2ae0:	9700      	str	r7, [sp, #0]
    2ae2:	e9cd 5303 	strd	r5, r3, [sp, #12]
    2ae6:	23ff      	movs	r3, #255	; 0xff
    2ae8:	461a      	mov	r2, r3
    2aea:	e9cd 8901 	strd	r8, r9, [sp, #4]
    2aee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2af2:	f7ff fb71 	bl	21d8 <time_init>
    value->vt = DLMS_DATA_TYPE_TIME;
    2af6:	231b      	movs	r3, #27
    2af8:	7033      	strb	r3, [r6, #0]
    return 0;
    2afa:	e7b4      	b.n	2a66 <getTime+0x1a>
    2afc:	ffff8000 	.word	0xffff8000

00002b00 <getDate>:
* info
*            Data info.
* Returns  Parsed date.
*/
int getDate(gxByteBuffer* buff, gxDataInfo* info, dlmsVARIANT* value)
{
    2b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
	unsigned char month, day;
    uint16_t year;
    unsigned char ch;
    if (buff->size - buff->position < 5)
    2b04:	88c3      	ldrh	r3, [r0, #6]
{
    2b06:	4615      	mov	r5, r2
    if (buff->size - buff->position < 5)
    2b08:	8902      	ldrh	r2, [r0, #8]
    2b0a:	1a9b      	subs	r3, r3, r2
    2b0c:	2b04      	cmp	r3, #4
{
    2b0e:	b088      	sub	sp, #32
    2b10:	4606      	mov	r6, r0
    if (buff->size - buff->position < 5)
    2b12:	dc06      	bgt.n	2b22 <getDate+0x22>
    {
        // If there is not enough data available.
        info->complete = 0;
    2b14:	2000      	movs	r0, #0
    2b16:	7148      	strb	r0, [r1, #5]
        return 0;
    2b18:	4604      	mov	r4, r0
    {
        ((gxtime*)value->pVal)->skip |= DATETIME_SKIPS_DAYOFWEEK;
    }
#endif //DLMS_IGNORE_MALLOC
    return 0;
}
    2b1a:	4620      	mov	r0, r4
    2b1c:	b008      	add	sp, #32
    2b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret = bb_getUInt16(buff, &year)) != 0)
    2b22:	f10d 011e 	add.w	r1, sp, #30
    2b26:	f00b f8c3 	bl	dcb0 <bb_getUInt16>
    2b2a:	4604      	mov	r4, r0
    2b2c:	2800      	cmp	r0, #0
    2b2e:	d1f4      	bne.n	2b1a <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b30:	f10d 011d 	add.w	r1, sp, #29
    2b34:	4630      	mov	r0, r6
    2b36:	f00b f892 	bl	dc5e <bb_getUInt8>
    2b3a:	4604      	mov	r4, r0
    2b3c:	2800      	cmp	r0, #0
    2b3e:	d1ec      	bne.n	2b1a <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b40:	f10d 011d 	add.w	r1, sp, #29
    2b44:	4630      	mov	r0, r6
    month = ch;
    2b46:	f89d 701d 	ldrb.w	r7, [sp, #29]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b4a:	f00b f888 	bl	dc5e <bb_getUInt8>
    2b4e:	4604      	mov	r4, r0
    2b50:	2800      	cmp	r0, #0
    2b52:	d1e2      	bne.n	2b1a <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b54:	f10d 011d 	add.w	r1, sp, #29
    2b58:	4630      	mov	r0, r6
    day = ch;
    2b5a:	f89d 801d 	ldrb.w	r8, [sp, #29]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b5e:	f00b f87e 	bl	dc5e <bb_getUInt8>
    2b62:	4604      	mov	r4, r0
    2b64:	2800      	cmp	r0, #0
    2b66:	d1d8      	bne.n	2b1a <getDate+0x1a>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    2b68:	f995 3000 	ldrsb.w	r3, [r5]
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	db03      	blt.n	2b78 <getDate+0x78>
        value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    2b70:	200c      	movs	r0, #12
    2b72:	f009 fe77 	bl	c864 <malloc>
    2b76:	60a8      	str	r0, [r5, #8]
    time_init(value->dateTime, year, month, day, 0xFF, 0xFF, 0xFF, 0xFF, 0x8000);
    2b78:	4a0c      	ldr	r2, [pc, #48]	; (2bac <getDate+0xac>)
    2b7a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    2b7e:	68a8      	ldr	r0, [r5, #8]
    2b80:	23ff      	movs	r3, #255	; 0xff
    2b82:	e9cd 3203 	strd	r3, r2, [sp, #12]
    2b86:	e9cd 3301 	strd	r3, r3, [sp, #4]
    2b8a:	463a      	mov	r2, r7
    2b8c:	9300      	str	r3, [sp, #0]
    2b8e:	4643      	mov	r3, r8
    2b90:	f7ff fb22 	bl	21d8 <time_init>
    if (ch > 7)
    2b94:	f89d 301d 	ldrb.w	r3, [sp, #29]
    2b98:	2b07      	cmp	r3, #7
        value->dateTime->skip |= DATETIME_SKIPS_DAYOFWEEK;
    2b9a:	bf81      	itttt	hi
    2b9c:	68aa      	ldrhi	r2, [r5, #8]
    2b9e:	88d3      	ldrhhi	r3, [r2, #6]
    2ba0:	f043 0308 	orrhi.w	r3, r3, #8
    2ba4:	80d3      	strhhi	r3, [r2, #6]
    value->vt = DLMS_DATA_TYPE_DATE;
    2ba6:	231a      	movs	r3, #26
    2ba8:	702b      	strb	r3, [r5, #0]
    return 0;
    2baa:	e7b6      	b.n	2b1a <getDate+0x1a>
    2bac:	ffff8000 	.word	0xffff8000

00002bb0 <dlms_checkLLCBytes>:

#ifndef DLMS_IGNORE_HDLC

//Return DLMS_ERROR_CODE_FALSE if LLC bytes are not included.
int dlms_checkLLCBytes(dlmsSettings* settings, gxByteBuffer* data)
{
    2bb0:	b510      	push	{r4, lr}
    2bb2:	4602      	mov	r2, r0
    2bb4:	680b      	ldr	r3, [r1, #0]
    2bb6:	8908      	ldrh	r0, [r1, #8]
    2bb8:	4418      	add	r0, r3
    if (settings->server)
    2bba:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
{
    2bbe:	460c      	mov	r4, r1
    {
        //Check LLC bytes.
        if (memcmp(data->data + data->position, LLC_SEND_BYTES, 3) != 0)
    2bc0:	2203      	movs	r2, #3
    if (settings->server)
    2bc2:	b15b      	cbz	r3, 2bdc <dlms_checkLLCBytes+0x2c>
        if (memcmp(data->data + data->position, LLC_SEND_BYTES, 3) != 0)
    2bc4:	4906      	ldr	r1, [pc, #24]	; (2be0 <dlms_checkLLCBytes+0x30>)
    2bc6:	f01a fe55 	bl	1d874 <memcmp>
    2bca:	b920      	cbnz	r0, 2bd6 <dlms_checkLLCBytes+0x26>
        if (memcmp(data->data + data->position, LLC_REPLY_BYTES, 3) != 0)
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
    }
    data->position += 3;
    2bcc:	8923      	ldrh	r3, [r4, #8]
    2bce:	3303      	adds	r3, #3
    2bd0:	8123      	strh	r3, [r4, #8]
    return DLMS_ERROR_CODE_OK;
    2bd2:	2000      	movs	r0, #0
}
    2bd4:	bd10      	pop	{r4, pc}
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    2bd6:	f44f 7081 	mov.w	r0, #258	; 0x102
    2bda:	e7fb      	b.n	2bd4 <dlms_checkLLCBytes+0x24>
        if (memcmp(data->data + data->position, LLC_REPLY_BYTES, 3) != 0)
    2bdc:	4901      	ldr	r1, [pc, #4]	; (2be4 <dlms_checkLLCBytes+0x34>)
    2bde:	e7f2      	b.n	2bc6 <dlms_checkLLCBytes+0x16>
    2be0:	0001ed88 	.word	0x0001ed88
    2be4:	0001ed85 	.word	0x0001ed85

00002be8 <dlms_countFCS24>:
}

// Reserved for internal use.
const uint32_t CRCPOLY = 0xD3B6BA00;
uint32_t dlms_countFCS24(unsigned char* buff, int index, int count)
{
    2be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char i, j;
    uint32_t crcreg = 0;
    for (j = 0; j < count; ++j)
    2bea:	2600      	movs	r6, #0
            {
                crcreg |= 0x80000000;
            }
            if ((crcreg & 0x80) != 0)
            {
                crcreg = crcreg ^ CRCPOLY;
    2bec:	4f0e      	ldr	r7, [pc, #56]	; (2c28 <dlms_countFCS24+0x40>)
    uint32_t crcreg = 0;
    2bee:	4633      	mov	r3, r6
    for (j = 0; j < count; ++j)
    2bf0:	b2f4      	uxtb	r4, r6
    2bf2:	4294      	cmp	r4, r2
    2bf4:	db01      	blt.n	2bfa <dlms_countFCS24+0x12>
            }
            b <<= 1;
        }
    }
    return crcreg >> 8;
}
    2bf6:	0a18      	lsrs	r0, r3, #8
    2bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char b = buff[index + j];
    2bfa:	4404      	add	r4, r0
    2bfc:	5c65      	ldrb	r5, [r4, r1]
    2bfe:	2408      	movs	r4, #8
            crcreg >>= 1;
    2c00:	085b      	lsrs	r3, r3, #1
            if ((b & 0x80) != 0)
    2c02:	f015 0f80 	tst.w	r5, #128	; 0x80
                crcreg |= 0x80000000;
    2c06:	bf18      	it	ne
    2c08:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
            if ((crcreg & 0x80) != 0)
    2c0c:	f013 0f80 	tst.w	r3, #128	; 0x80
                crcreg = crcreg ^ CRCPOLY;
    2c10:	f104 34ff 	add.w	r4, r4, #4294967295
    2c14:	bf18      	it	ne
    2c16:	407b      	eorne	r3, r7
            b <<= 1;
    2c18:	006d      	lsls	r5, r5, #1
        for (i = 0; i < 8; ++i)
    2c1a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
            b <<= 1;
    2c1e:	b2ed      	uxtb	r5, r5
        for (i = 0; i < 8; ++i)
    2c20:	d1ee      	bne.n	2c00 <dlms_countFCS24+0x18>
    for (j = 0; j < count; ++j)
    2c22:	3601      	adds	r6, #1
    2c24:	e7e4      	b.n	2bf0 <dlms_countFCS24+0x8>
    2c26:	bf00      	nop
    2c28:	d3b6ba00 	.word	0xd3b6ba00

00002c2c <dlms_handleGloDedRequest>:
}

#if !defined(DLMS_IGNORE_SERVER)
int dlms_handleGloDedRequest(dlmsSettings* settings,
    gxReplyData* data)
{
    2c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c2e:	898b      	ldrh	r3, [r1, #12]
    ret = DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
    DLMS_SECURITY_SUITE suite;
    uint64_t invocationCounter;
    // If all frames are read.
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2c30:	780a      	ldrb	r2, [r1, #0]
    2c32:	3b01      	subs	r3, #1
    2c34:	f012 0f01 	tst.w	r2, #1
{
    2c38:	b089      	sub	sp, #36	; 0x24
    2c3a:	4604      	mov	r4, r0
    2c3c:	460d      	mov	r5, r1
    {
        unsigned char ch;
        DLMS_SECURITY security;
        --data->data.position;
    2c3e:	818b      	strh	r3, [r1, #12]
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2c40:	f040 808a 	bne.w	2d58 <dlms_handleGloDedRequest+0x12c>
        unsigned char emptySourceSystemTile;
        emptySourceSystemTile = memcmp(settings->sourceSystemTitle, EMPTY_SYSTEM_TITLE, 8) == 0;
    2c44:	f100 071c 	add.w	r7, r0, #28
    2c48:	2208      	movs	r2, #8
    2c4a:	4944      	ldr	r1, [pc, #272]	; (2d5c <dlms_handleGloDedRequest+0x130>)
    2c4c:	4638      	mov	r0, r7
    2c4e:	f01a fe11 	bl	1d874 <memcmp>
    return settings->cipher.dedicatedKey != NULL;
    2c52:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
        emptySourceSystemTile = memcmp(settings->sourceSystemTitle, EMPTY_SYSTEM_TITLE, 8) == 0;
    2c56:	4606      	mov	r6, r0
        if (dlms_useDedicatedKey(settings) && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
    2c58:	b1a2      	cbz	r2, 2c84 <dlms_handleGloDedRequest+0x58>
    2c5a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2c5e:	0799      	lsls	r1, r3, #30
    2c60:	d510      	bpl.n	2c84 <dlms_handleGloDedRequest+0x58>
        {
            if ((ret = cip_decrypt(&settings->cipher,
    2c62:	ab06      	add	r3, sp, #24
    2c64:	9302      	str	r3, [sp, #8]
    2c66:	f10d 0315 	add.w	r3, sp, #21
    2c6a:	9301      	str	r3, [sp, #4]
    2c6c:	f10d 0317 	add.w	r3, sp, #23
    2c70:	9300      	str	r3, [sp, #0]
    2c72:	1d2b      	adds	r3, r5, #4
                data->preEstablished = 1;
            }
        }
        else
        {
            if ((ret = cip_decrypt(&settings->cipher,
    2c74:	4639      	mov	r1, r7
    2c76:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    2c7a:	f7ff f907 	bl	1e8c <cip_decrypt>
    2c7e:	2800      	cmp	r0, #0
    2c80:	d041      	beq.n	2d06 <dlms_handleGloDedRequest+0xda>
    2c82:	e01b      	b.n	2cbc <dlms_handleGloDedRequest+0x90>
        else if (dlms_usePreEstablishedSystemTitle(settings) && emptySourceSystemTile)
    2c84:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    2c88:	2b00      	cmp	r3, #0
    2c8a:	d056      	beq.n	2d3a <dlms_handleGloDedRequest+0x10e>
    2c8c:	2e00      	cmp	r6, #0
    2c8e:	d154      	bne.n	2d3a <dlms_handleGloDedRequest+0x10e>
            if (settings->server && settings->connected == DLMS_CONNECTION_STATE_NONE && !data->preEstablished)
    2c90:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2c94:	b9a3      	cbnz	r3, 2cc0 <dlms_handleGloDedRequest+0x94>
            if ((ret = cip_decrypt(&settings->cipher,
    2c96:	ab06      	add	r3, sp, #24
    2c98:	9302      	str	r3, [sp, #8]
    2c9a:	f10d 0315 	add.w	r3, sp, #21
    2c9e:	9301      	str	r3, [sp, #4]
    2ca0:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    2ca4:	f10d 0317 	add.w	r3, sp, #23
    2ca8:	9300      	str	r3, [sp, #0]
    2caa:	6809      	ldr	r1, [r1, #0]
    2cac:	1d2b      	adds	r3, r5, #4
    2cae:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    2cb2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    2cb6:	f7ff f8e9 	bl	1e8c <cip_decrypt>
    2cba:	b1f0      	cbz	r0, 2cfa <dlms_handleGloDedRequest+0xce>
    {
        data->data.position -= 1;
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    return ret;
}
    2cbc:	b009      	add	sp, #36	; 0x24
    2cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (settings->server && settings->connected == DLMS_CONNECTION_STATE_NONE && !data->preEstablished)
    2cc0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d1e6      	bne.n	2c96 <dlms_handleGloDedRequest+0x6a>
    2cc8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d1e2      	bne.n	2c96 <dlms_handleGloDedRequest+0x6a>
                if (!svr_isTarget(settings, settings->serverAddress, settings->clientAddress))
    2cd0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    2cd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2cd4:	4620      	mov	r0, r4
    2cd6:	f00a fce0 	bl	d69a <svr_isTarget>
    2cda:	b940      	cbnz	r0, 2cee <dlms_handleGloDedRequest+0xc2>
                    if ((settings->connected & DLMS_CONNECTION_STATE_DLMS) == 0)
    2cdc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2ce0:	079b      	lsls	r3, r3, #30
    2ce2:	d401      	bmi.n	2ce8 <dlms_handleGloDedRequest+0xbc>
                        settings->serverAddress = settings->clientAddress = 0;
    2ce4:	85e6      	strh	r6, [r4, #46]	; 0x2e
    2ce6:	6326      	str	r6, [r4, #48]	; 0x30
                    return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    2ce8:	f240 1007 	movw	r0, #263	; 0x107
    2cec:	e7e6      	b.n	2cbc <dlms_handleGloDedRequest+0x90>
                if ((ret = svr_connected((dlmsServerSettings*)settings)) != 0)
    2cee:	4620      	mov	r0, r4
    2cf0:	f00a fcd1 	bl	d696 <svr_connected>
    2cf4:	2800      	cmp	r0, #0
    2cf6:	d0ce      	beq.n	2c96 <dlms_handleGloDedRequest+0x6a>
    2cf8:	e7e0      	b.n	2cbc <dlms_handleGloDedRequest+0x90>
            if (data->preEstablished == 0)
    2cfa:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2cfe:	b913      	cbnz	r3, 2d06 <dlms_handleGloDedRequest+0xda>
                data->preEstablished = 1;
    2d00:	2301      	movs	r3, #1
    2d02:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        if (settings->expectedInvocationCounter != NULL)
    2d06:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
    2d0a:	b149      	cbz	r1, 2d20 <dlms_handleGloDedRequest+0xf4>
            if (invocationCounter < *settings->expectedInvocationCounter)
    2d0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2d10:	680e      	ldr	r6, [r1, #0]
    2d12:	2700      	movs	r7, #0
    2d14:	42bb      	cmp	r3, r7
    2d16:	bf08      	it	eq
    2d18:	42b2      	cmpeq	r2, r6
    2d1a:	d31a      	bcc.n	2d52 <dlms_handleGloDedRequest+0x126>
            * settings->expectedInvocationCounter = (uint32_t)(1 + invocationCounter);
    2d1c:	3201      	adds	r2, #1
    2d1e:	600a      	str	r2, [r1, #0]
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2d20:	f10d 0116 	add.w	r1, sp, #22
    2d24:	1d28      	adds	r0, r5, #4
    2d26:	f00a ff9a 	bl	dc5e <bb_getUInt8>
    2d2a:	2800      	cmp	r0, #0
    2d2c:	d1c6      	bne.n	2cbc <dlms_handleGloDedRequest+0x90>
        data->encryptedCommand = data->command;
    2d2e:	786b      	ldrb	r3, [r5, #1]
    2d30:	70ab      	strb	r3, [r5, #2]
        data->command = (DLMS_COMMAND)ch;
    2d32:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2d36:	706b      	strb	r3, [r5, #1]
    2d38:	e7c0      	b.n	2cbc <dlms_handleGloDedRequest+0x90>
            if ((ret = cip_decrypt(&settings->cipher,
    2d3a:	ab06      	add	r3, sp, #24
    2d3c:	9302      	str	r3, [sp, #8]
    2d3e:	f10d 0315 	add.w	r3, sp, #21
    2d42:	9301      	str	r3, [sp, #4]
    2d44:	f10d 0317 	add.w	r3, sp, #23
    2d48:	9300      	str	r3, [sp, #0]
    2d4a:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    2d4e:	1d2b      	adds	r3, r5, #4
    2d50:	e790      	b.n	2c74 <dlms_handleGloDedRequest+0x48>
                return DLMS_ERROR_CODE_INVOCATION_COUNTER_TOO_SMALL;
    2d52:	f44f 708e 	mov.w	r0, #284	; 0x11c
    2d56:	e7b1      	b.n	2cbc <dlms_handleGloDedRequest+0x90>
    return ret;
    2d58:	2000      	movs	r0, #0
    2d5a:	e7af      	b.n	2cbc <dlms_handleGloDedRequest+0x90>
    2d5c:	0001ed7d 	.word	0x0001ed7d

00002d60 <dlms_getPdu>:

int dlms_getPdu(
    dlmsSettings* settings,
    gxReplyData* data,
    unsigned char first)
{
    2d60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = DLMS_ERROR_CODE_OK;
    uint16_t index;
    unsigned char ch;
    DLMS_COMMAND cmd = data->command;
    2d64:	784e      	ldrb	r6, [r1, #1]
{
    2d66:	4604      	mov	r4, r0
    2d68:	460d      	mov	r5, r1
    // If header is not read yet or GBT message.
    if (cmd == DLMS_COMMAND_NONE)
    2d6a:	2e00      	cmp	r6, #0
    2d6c:	f040 8122 	bne.w	2fb4 <dlms_getPdu+0x254>
    {
        // If PDU is missing.
        if (bb_available(&data->data) == 0)
    2d70:	f101 0804 	add.w	r8, r1, #4
    2d74:	4640      	mov	r0, r8
    2d76:	f00a fd8c 	bl	d892 <bb_available>
    2d7a:	b198      	cbz	r0, 2da4 <dlms_getPdu+0x44>
            // Invalid PDU.
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        index = (uint16_t)(data->data.position);
        // Get command.
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2d7c:	f10d 0107 	add.w	r1, sp, #7
    2d80:	4640      	mov	r0, r8
        index = (uint16_t)(data->data.position);
    2d82:	89af      	ldrh	r7, [r5, #12]
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2d84:	f00a ff6b 	bl	dc5e <bb_getUInt8>
    2d88:	2800      	cmp	r0, #0
    2d8a:	f040 80d2 	bne.w	2f32 <dlms_getPdu+0x1d2>
        {
            return ret;
        }
        cmd = (DLMS_COMMAND)ch;
    2d8e:	f89d 6007 	ldrb.w	r6, [sp, #7]
        data->command = cmd;
    2d92:	706e      	strb	r6, [r5, #1]
        switch (cmd)
    2d94:	2ee0      	cmp	r6, #224	; 0xe0
    2d96:	d805      	bhi.n	2da4 <dlms_getPdu+0x44>
    2d98:	2ebf      	cmp	r6, #191	; 0xbf
    2d9a:	d806      	bhi.n	2daa <dlms_getPdu+0x4a>
    2d9c:	2e18      	cmp	r6, #24
    2d9e:	d87b      	bhi.n	2e98 <dlms_getPdu+0x138>
    2da0:	2e04      	cmp	r6, #4
    2da2:	d84b      	bhi.n	2e3c <dlms_getPdu+0xdc>
    2da4:	f44f 7081 	mov.w	r0, #258	; 0x102
    2da8:	e0c3      	b.n	2f32 <dlms_getPdu+0x1d2>
    2daa:	f1a6 03c0 	sub.w	r3, r6, #192	; 0xc0
    2dae:	2b20      	cmp	r3, #32
    2db0:	d8f8      	bhi.n	2da4 <dlms_getPdu+0x44>
    2db2:	a201      	add	r2, pc, #4	; (adr r2, 2db8 <dlms_getPdu+0x58>)
    2db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2db8:	00002edd 	.word	0x00002edd
    2dbc:	00002edd 	.word	0x00002edd
    2dc0:	00002edd 	.word	0x00002edd
    2dc4:	00002edd 	.word	0x00002edd
    2dc8:	00002f1f 	.word	0x00002f1f
    2dcc:	00002f39 	.word	0x00002f39
    2dd0:	00002da5 	.word	0x00002da5
    2dd4:	00002f4f 	.word	0x00002f4f
    2dd8:	00002eab 	.word	0x00002eab
    2ddc:	00002eab 	.word	0x00002eab
    2de0:	00002da5 	.word	0x00002da5
    2de4:	00002eab 	.word	0x00002eab
    2de8:	00002ec7 	.word	0x00002ec7
    2dec:	00002ec7 	.word	0x00002ec7
    2df0:	00002da5 	.word	0x00002da5
    2df4:	00002ec7 	.word	0x00002ec7
    2df8:	00002eab 	.word	0x00002eab
    2dfc:	00002eab 	.word	0x00002eab
    2e00:	00002ec7 	.word	0x00002ec7
    2e04:	00002eab 	.word	0x00002eab
    2e08:	00002ec7 	.word	0x00002ec7
    2e0c:	00002ec7 	.word	0x00002ec7
    2e10:	00002da5 	.word	0x00002da5
    2e14:	00002ec7 	.word	0x00002ec7
    2e18:	00002f73 	.word	0x00002f73
    2e1c:	00002da5 	.word	0x00002da5
    2e20:	00002da5 	.word	0x00002da5
    2e24:	00002f7b 	.word	0x00002f7b
    2e28:	00002f7b 	.word	0x00002f7b
    2e2c:	00002fa1 	.word	0x00002fa1
    2e30:	00002da5 	.word	0x00002da5
    2e34:	00002da5 	.word	0x00002da5
    2e38:	00002f59 	.word	0x00002f59
    2e3c:	1f73      	subs	r3, r6, #5
    2e3e:	2b13      	cmp	r3, #19
    2e40:	d8b0      	bhi.n	2da4 <dlms_getPdu+0x44>
    2e42:	a201      	add	r2, pc, #4	; (adr r2, 2e48 <dlms_getPdu+0xe8>)
    2e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e48:	00002eb7 	.word	0x00002eb7
    2e4c:	00002eb7 	.word	0x00002eb7
    2e50:	00002da5 	.word	0x00002da5
    2e54:	00002da5 	.word	0x00002da5
    2e58:	00002da5 	.word	0x00002da5
    2e5c:	00002da5 	.word	0x00002da5
    2e60:	00002da5 	.word	0x00002da5
    2e64:	00002f07 	.word	0x00002f07
    2e68:	00002f47 	.word	0x00002f47
    2e6c:	00002f6b 	.word	0x00002f6b
    2e70:	00002fab 	.word	0x00002fab
    2e74:	00002da5 	.word	0x00002da5
    2e78:	00002da5 	.word	0x00002da5
    2e7c:	00002da5 	.word	0x00002da5
    2e80:	00002da5 	.word	0x00002da5
    2e84:	00002da5 	.word	0x00002da5
    2e88:	00002da5 	.word	0x00002da5
    2e8c:	00002da5 	.word	0x00002da5
    2e90:	00002da5 	.word	0x00002da5
    2e94:	00002eb7 	.word	0x00002eb7
    2e98:	2e61      	cmp	r6, #97	; 0x61
    2e9a:	d81a      	bhi.n	2ed2 <dlms_getPdu+0x172>
    2e9c:	2e5f      	cmp	r6, #95	; 0x5f
    2e9e:	d860      	bhi.n	2f62 <dlms_getPdu+0x202>
    2ea0:	2e26      	cmp	r6, #38	; 0x26
    2ea2:	d80b      	bhi.n	2ebc <dlms_getPdu+0x15c>
    2ea4:	2e24      	cmp	r6, #36	; 0x24
    2ea6:	f67f af7d 	bls.w	2da4 <dlms_getPdu+0x44>
        case DLMS_COMMAND_GLO_SET_REQUEST:
        case DLMS_COMMAND_GLO_METHOD_REQUEST:
        case DLMS_COMMAND_DED_GET_REQUEST:
        case DLMS_COMMAND_DED_SET_REQUEST:
        case DLMS_COMMAND_DED_METHOD_REQUEST:
            ret = dlms_handleGloDedRequest(settings, data);
    2eaa:	4629      	mov	r1, r5
    2eac:	4620      	mov	r0, r4
    2eae:	f7ff febd 	bl	2c2c <dlms_handleGloDedRequest>
    }

#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
#if !defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
    // Get data only blocks if SN is used. This is faster.
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2eb2:	2800      	cmp	r0, #0
    2eb4:	d13d      	bne.n	2f32 <dlms_getPdu+0x1d2>
    2eb6:	2e0c      	cmp	r6, #12
    2eb8:	d02b      	beq.n	2f12 <dlms_getPdu+0x1b2>
    2eba:	e00f      	b.n	2edc <dlms_getPdu+0x17c>
        switch (cmd)
    2ebc:	f1a6 032c 	sub.w	r3, r6, #44	; 0x2c
    2ec0:	2b01      	cmp	r3, #1
    2ec2:	f63f af6f 	bhi.w	2da4 <dlms_getPdu+0x44>
            ret = dlms_handleGloDedResponse(settings, data, index);
    2ec6:	463a      	mov	r2, r7
    2ec8:	4629      	mov	r1, r5
    2eca:	4620      	mov	r0, r4
    2ecc:	f00d fedd 	bl	10c8a <dlms_handleGloDedResponse>
            break;
    2ed0:	e7ef      	b.n	2eb2 <dlms_getPdu+0x152>
        switch (cmd)
    2ed2:	f1a6 0362 	sub.w	r3, r6, #98	; 0x62
    2ed6:	2b01      	cmp	r3, #1
    2ed8:	f63f af64 	bhi.w	2da4 <dlms_getPdu+0x44>
    {
        return 0;
    }
#endif //!defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
    // Get data if all data is read or we want to peek data.
    if (ret == 0 && !data->ignoreValue && data->data.position != data->data.size
    2edc:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    2ee0:	bb33      	cbnz	r3, 2f30 <dlms_getPdu+0x1d0>
    2ee2:	89aa      	ldrh	r2, [r5, #12]
    2ee4:	896b      	ldrh	r3, [r5, #10]
    2ee6:	429a      	cmp	r2, r3
    2ee8:	d022      	beq.n	2f30 <dlms_getPdu+0x1d0>
        && (
    2eea:	2e0c      	cmp	r6, #12
    2eec:	d001      	beq.n	2ef2 <dlms_getPdu+0x192>
#if !defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
            cmd == DLMS_COMMAND_READ_RESPONSE ||
    2eee:	2ec4      	cmp	r6, #196	; 0xc4
    2ef0:	d11e      	bne.n	2f30 <dlms_getPdu+0x1d0>
#endif //!defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
            cmd == DLMS_COMMAND_GET_RESPONSE)
        && (data->moreData == DLMS_DATA_REQUEST_TYPES_NONE
    2ef2:	782b      	ldrb	r3, [r5, #0]
    2ef4:	b113      	cbz	r3, 2efc <dlms_getPdu+0x19c>
            || data->peek))
    2ef6:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    2efa:	b1cb      	cbz	r3, 2f30 <dlms_getPdu+0x1d0>
    {
        ret = dlms_getValueFromData(settings, data);
    2efc:	4629      	mov	r1, r5
    2efe:	4620      	mov	r0, r4
    2f00:	f00d fb6b 	bl	105da <dlms_getValueFromData>
    2f04:	e015      	b.n	2f32 <dlms_getPdu+0x1d2>
            if ((ret = dlms_handleReadResponse(settings, data, index)) != 0)
    2f06:	463a      	mov	r2, r7
    2f08:	4629      	mov	r1, r5
    2f0a:	4620      	mov	r0, r4
    2f0c:	f00d fc2d 	bl	1076a <dlms_handleReadResponse>
    2f10:	b960      	cbnz	r0, 2f2c <dlms_getPdu+0x1cc>
        && data->commandType == DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT
    2f12:	78eb      	ldrb	r3, [r5, #3]
    2f14:	2b02      	cmp	r3, #2
    2f16:	f000 80c3 	beq.w	30a0 <dlms_getPdu+0x340>
    2f1a:	260c      	movs	r6, #12
    2f1c:	e7de      	b.n	2edc <dlms_getPdu+0x17c>
            if ((ret = dlms_handleGetResponse(settings, data, index)) != 0)
    2f1e:	463a      	mov	r2, r7
    2f20:	4629      	mov	r1, r5
    2f22:	4620      	mov	r0, r4
    2f24:	f00d fa89 	bl	1043a <dlms_handleGetResponse>
    2f28:	2800      	cmp	r0, #0
    2f2a:	d0d7      	beq.n	2edc <dlms_getPdu+0x17c>
                if (ret == DLMS_ERROR_CODE_FALSE)
    2f2c:	1c44      	adds	r4, r0, #1
    2f2e:	d100      	bne.n	2f32 <dlms_getPdu+0x1d2>
                    return DLMS_ERROR_CODE_OK;
    2f30:	2000      	movs	r0, #0
#else
    data->dataValue.byteArr = &data->data;
    data->dataValue.vt = DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_OCTET_STRING;
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    return ret;
}
    2f32:	b002      	add	sp, #8
    2f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = dlms_handleSetResponse(settings, data);
    2f38:	4629      	mov	r1, r5
    2f3a:	4620      	mov	r0, r4
    2f3c:	f00d fd24 	bl	10988 <dlms_handleSetResponse>
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2f40:	2800      	cmp	r0, #0
    2f42:	d1f6      	bne.n	2f32 <dlms_getPdu+0x1d2>
    2f44:	e7ca      	b.n	2edc <dlms_getPdu+0x17c>
            ret = dlms_handleWriteResponse(data);
    2f46:	4628      	mov	r0, r5
    2f48:	f00d fb1f 	bl	1058a <handleWriteResponse>
            break;
    2f4c:	e7f8      	b.n	2f40 <dlms_getPdu+0x1e0>
            ret = dlms_handleMethodResponse(settings, data);
    2f4e:	4629      	mov	r1, r5
    2f50:	4620      	mov	r0, r4
    2f52:	f00d fcc4 	bl	108de <dlms_handleMethodResponse>
            break;
    2f56:	e7f3      	b.n	2f40 <dlms_getPdu+0x1e0>
            ret = dlms_handleGbt(settings, data);
    2f58:	4629      	mov	r1, r5
    2f5a:	4620      	mov	r0, r4
    2f5c:	f00d fe12 	bl	10b84 <dlms_handleGbt>
            break;
    2f60:	e7ee      	b.n	2f40 <dlms_getPdu+0x1e0>
            data->data.position -= 1;
    2f62:	89ab      	ldrh	r3, [r5, #12]
    2f64:	3b01      	subs	r3, #1
    2f66:	81ab      	strh	r3, [r5, #12]
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2f68:	e7b8      	b.n	2edc <dlms_getPdu+0x17c>
            ret = dlms_handleConfirmedServiceError(&data->data);
    2f6a:	4640      	mov	r0, r8
    2f6c:	f00d fdc7 	bl	10afe <dlms_handleConfirmedServiceError>
            break;
    2f70:	e7e6      	b.n	2f40 <dlms_getPdu+0x1e0>
            ret = dlms_handleExceptionResponse(&data->data);
    2f72:	4640      	mov	r0, r8
    2f74:	f00d fde4 	bl	10b40 <dlms_handleExceptionResponse>
            break;
    2f78:	e7e2      	b.n	2f40 <dlms_getPdu+0x1e0>
            if (settings->server)
    2f7a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2f7e:	b14b      	cbz	r3, 2f94 <dlms_getPdu+0x234>
                if ((settings->connected & DLMS_CONNECTION_STATE_DLMS) == 0)
    2f80:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2f84:	0799      	lsls	r1, r3, #30
    2f86:	f140 8090 	bpl.w	30aa <dlms_getPdu+0x34a>
                ret = dlms_handleGloDedRequest(settings, data);
    2f8a:	4629      	mov	r1, r5
    2f8c:	4620      	mov	r0, r4
    2f8e:	f7ff fe4d 	bl	2c2c <dlms_handleGloDedRequest>
    2f92:	e7d5      	b.n	2f40 <dlms_getPdu+0x1e0>
                ret = dlms_handleGloDedResponse(settings, data, index);
    2f94:	463a      	mov	r2, r7
    2f96:	4629      	mov	r1, r5
    2f98:	4620      	mov	r0, r4
    2f9a:	f00d fe76 	bl	10c8a <dlms_handleGloDedResponse>
    2f9e:	e7cf      	b.n	2f40 <dlms_getPdu+0x1e0>
            ret = dlms_handleGeneralCiphering(settings, data);
    2fa0:	4629      	mov	r1, r5
    2fa2:	4620      	mov	r0, r4
    2fa4:	f00d fede 	bl	10d64 <dlms_handleGeneralCiphering>
            break;
    2fa8:	e7ca      	b.n	2f40 <dlms_getPdu+0x1e0>
            ret = dlms_handleDataNotification(settings, data);
    2faa:	4629      	mov	r1, r5
    2fac:	4620      	mov	r0, r4
    2fae:	f00d fd60 	bl	10a72 <dlms_handleDataNotification>
            break;
    2fb2:	e7c5      	b.n	2f40 <dlms_getPdu+0x1e0>
    else if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2fb4:	780b      	ldrb	r3, [r1, #0]
    2fb6:	07da      	lsls	r2, r3, #31
    2fb8:	f53f af7d 	bmi.w	2eb6 <dlms_getPdu+0x156>
        if (!data->peek && data->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    2fbc:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
    2fc0:	4318      	orrs	r0, r3
    2fc2:	d108      	bne.n	2fd6 <dlms_getPdu+0x276>
            if (!settings->server || data->command == DLMS_COMMAND_AARE || data->command == DLMS_COMMAND_AARQ)
    2fc4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2fc8:	b11b      	cbz	r3, 2fd2 <dlms_getPdu+0x272>
    2fca:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
    2fce:	2b01      	cmp	r3, #1
    2fd0:	d805      	bhi.n	2fde <dlms_getPdu+0x27e>
                data->data.position = 0;
    2fd2:	2300      	movs	r3, #0
    2fd4:	81ab      	strh	r3, [r5, #12]
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2fd6:	2ee0      	cmp	r6, #224	; 0xe0
    2fd8:	d005      	beq.n	2fe6 <dlms_getPdu+0x286>
    int ret = DLMS_ERROR_CODE_OK;
    2fda:	2000      	movs	r0, #0
    2fdc:	e00e      	b.n	2ffc <dlms_getPdu+0x29c>
                data->data.position = 1;
    2fde:	2301      	movs	r3, #1
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2fe0:	2ee0      	cmp	r6, #224	; 0xe0
                data->data.position = 1;
    2fe2:	818b      	strh	r3, [r1, #12]
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2fe4:	d10d      	bne.n	3002 <dlms_getPdu+0x2a2>
            data->data.position = data->cipherIndex + 1;
    2fe6:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    2fe8:	3301      	adds	r3, #1
    2fea:	81ab      	strh	r3, [r5, #12]
            ret = dlms_handleGbt(settings, data);
    2fec:	4629      	mov	r1, r5
    2fee:	4620      	mov	r0, r4
    2ff0:	f00d fdc8 	bl	10b84 <dlms_handleGbt>
            data->cipherIndex = (uint16_t)data->data.size;
    2ff4:	896b      	ldrh	r3, [r5, #10]
    2ff6:	866b      	strh	r3, [r5, #50]	; 0x32
            data->command = DLMS_COMMAND_NONE;
    2ff8:	2300      	movs	r3, #0
    2ffa:	706b      	strb	r3, [r5, #1]
        if (settings->server)
    2ffc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    3000:	b1a3      	cbz	r3, 302c <dlms_getPdu+0x2cc>
            switch (cmd)
    3002:	2ec9      	cmp	r6, #201	; 0xc9
    3004:	d80f      	bhi.n	3026 <dlms_getPdu+0x2c6>
    3006:	2ec7      	cmp	r6, #199	; 0xc7
    3008:	d804      	bhi.n	3014 <dlms_getPdu+0x2b4>
    300a:	f1a6 0325 	sub.w	r3, r6, #37	; 0x25
    300e:	2b01      	cmp	r3, #1
    3010:	f63f af4f 	bhi.w	2eb2 <dlms_getPdu+0x152>
                data->data.position = (data->cipherIndex);
    3014:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    3016:	81ab      	strh	r3, [r5, #12]
                data->command = DLMS_COMMAND_NONE;
    3018:	2200      	movs	r2, #0
    301a:	706a      	strb	r2, [r5, #1]
                ret = dlms_getPdu(settings, data, 0);
    301c:	4629      	mov	r1, r5
    301e:	4620      	mov	r0, r4
    3020:	f7ff fe9e 	bl	2d60 <dlms_getPdu>
                break;
    3024:	e745      	b.n	2eb2 <dlms_getPdu+0x152>
            switch (cmd)
    3026:	2ecb      	cmp	r6, #203	; 0xcb
    3028:	d18a      	bne.n	2f40 <dlms_getPdu+0x1e0>
    302a:	e7f3      	b.n	3014 <dlms_getPdu+0x2b4>
            switch (cmd)
    302c:	2e2d      	cmp	r6, #45	; 0x2d
            data->command = DLMS_COMMAND_NONE;
    302e:	706b      	strb	r3, [r5, #1]
            switch (cmd)
    3030:	d806      	bhi.n	3040 <dlms_getPdu+0x2e0>
    3032:	2e2b      	cmp	r6, #43	; 0x2b
    3034:	f67f af3d 	bls.w	2eb2 <dlms_getPdu+0x152>
                data->data.position = data->cipherIndex;
    3038:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    303a:	81ab      	strh	r3, [r5, #12]
                ret = dlms_getPdu(settings, data, 0);
    303c:	2200      	movs	r2, #0
    303e:	e7ed      	b.n	301c <dlms_getPdu+0x2bc>
            switch (cmd)
    3040:	f106 0334 	add.w	r3, r6, #52	; 0x34
    3044:	b2db      	uxtb	r3, r3
    3046:	2b10      	cmp	r3, #16
    3048:	f63f af7a 	bhi.w	2f40 <dlms_getPdu+0x1e0>
    304c:	f1a6 03cc 	sub.w	r3, r6, #204	; 0xcc
    3050:	2b10      	cmp	r3, #16
    3052:	f63f af2e 	bhi.w	2eb2 <dlms_getPdu+0x152>
    3056:	a201      	add	r2, pc, #4	; (adr r2, 305c <dlms_getPdu+0x2fc>)
    3058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    305c:	00003039 	.word	0x00003039
    3060:	00003039 	.word	0x00003039
    3064:	00002eb3 	.word	0x00002eb3
    3068:	00003039 	.word	0x00003039
    306c:	00002eb3 	.word	0x00002eb3
    3070:	00002eb3 	.word	0x00002eb3
    3074:	00002eb3 	.word	0x00002eb3
    3078:	00002eb3 	.word	0x00002eb3
    307c:	00003039 	.word	0x00003039
    3080:	00003039 	.word	0x00003039
    3084:	00002eb3 	.word	0x00002eb3
    3088:	00003039 	.word	0x00003039
    308c:	00002eb3 	.word	0x00002eb3
    3090:	00002eb3 	.word	0x00002eb3
    3094:	00002eb3 	.word	0x00002eb3
    3098:	00003039 	.word	0x00003039
    309c:	00003039 	.word	0x00003039
        && (data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
    30a0:	782b      	ldrb	r3, [r5, #0]
    30a2:	07db      	lsls	r3, r3, #31
    30a4:	f53f af44 	bmi.w	2f30 <dlms_getPdu+0x1d0>
    30a8:	e737      	b.n	2f1a <dlms_getPdu+0x1ba>
                    return DLMS_ERROR_CODE_INVALID_DECIPHERING_ERROR;
    30aa:	f240 101d 	movw	r0, #285	; 0x11d
    30ae:	e740      	b.n	2f32 <dlms_getPdu+0x1d2>

000030b0 <plc_reset>:
{
    settings->plcSettings.initialCredit = 7;
    settings->plcSettings.currentCredit = 7;
    settings->plcSettings.deltaCredit = 0;
    //New device addresses are used.
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    30b0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    settings->plcSettings.initialCredit = 7;
    30b4:	f240 7307 	movw	r3, #1799	; 0x707
    30b8:	f8a0 3078 	strh.w	r3, [r0, #120]	; 0x78
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    30bc:	2a05      	cmp	r2, #5
    settings->plcSettings.deltaCredit = 0;
    30be:	f04f 0300 	mov.w	r3, #0
    30c2:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    30c6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    30ca:	d10b      	bne.n	30e4 <plc_reset+0x34>
    {
        if (settings->server)
    30cc:	b143      	cbz	r3, 30e0 <plc_reset+0x30>
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_NEW;
    30ce:	4b09      	ldr	r3, [pc, #36]	; (30f4 <plc_reset+0x44>)
            settings->plcSettings.macDestinationAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
        }
        else
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
    30d0:	67c3      	str	r3, [r0, #124]	; 0x7c
            settings->plcSettings.macDestinationAddress = DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL;
        }
        settings->plcSettings.allowedTimeSlots = 10;
    30d2:	230a      	movs	r3, #10
        else
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
            settings->plcSettings.macDestinationAddress = DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL;
        }
        settings->plcSettings.allowedTimeSlots = 0x14;
    30d4:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
    }
    settings->plcSettings.responseProbability = 100;
    30d8:	2364      	movs	r3, #100	; 0x64
    30da:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
    30de:	4770      	bx	lr
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
    30e0:	4b05      	ldr	r3, [pc, #20]	; (30f8 <plc_reset+0x48>)
    30e2:	e7f5      	b.n	30d0 <plc_reset+0x20>
        if (settings->server)
    30e4:	b11b      	cbz	r3, 30ee <plc_reset+0x3e>
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_NEW;
    30e6:	4b05      	ldr	r3, [pc, #20]	; (30fc <plc_reset+0x4c>)
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
    30e8:	67c3      	str	r3, [r0, #124]	; 0x7c
        settings->plcSettings.allowedTimeSlots = 0x14;
    30ea:	2314      	movs	r3, #20
    30ec:	e7f2      	b.n	30d4 <plc_reset+0x24>
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
    30ee:	4b04      	ldr	r3, [pc, #16]	; (3100 <plc_reset+0x50>)
    30f0:	e7fa      	b.n	30e8 <plc_reset+0x38>
    30f2:	bf00      	nop
    30f4:	0c000ffe 	.word	0x0c000ffe
    30f8:	0fff0c00 	.word	0x0fff0c00
    30fc:	0c010ffe 	.word	0x0c010ffe
    3100:	0fff0c01 	.word	0x0fff0c01

00003104 <cl_init>:
{
    3104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3108:	4604      	mov	r4, r0
    settings->protocolVersion = 0;
    310a:	2500      	movs	r5, #0
{
    310c:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    3110:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    settings->serverAddress = serverAddress;
    3114:	6323      	str	r3, [r4, #48]	; 0x30
    settings->blockIndex = 1;
    3116:	f04f 0801 	mov.w	r8, #1
    settings->dlmsVersionNumber = 6;
    311a:	2306      	movs	r3, #6
    BYTE_BUFFER_INIT(&settings->password);
    311c:	f104 0738 	add.w	r7, r4, #56	; 0x38
{
    3120:	460e      	mov	r6, r1
    3122:	f89d 1020 	ldrb.w	r1, [sp, #32]
    settings->clientAddress = clientAddress;
    3126:	85e2      	strh	r2, [r4, #46]	; 0x2e
    settings->dlmsVersionNumber = 6;
    3128:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    settings->useLogicalNameReferencing = useLogicalNameReferencing;
    312c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    settings->interfaceType = interfaceType;
    3130:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    settings->authentication = authentication;
    3134:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
    settings->protocolVersion = 0;
    3138:	f8a4 50da 	strh.w	r5, [r4, #218]	; 0xda
    settings->preEstablishedSystemTitle = NULL;
    313c:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
    settings->autoIncreaseInvokeID = 0;
    3140:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    settings->blockIndex = 1;
    3144:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
    BYTE_BUFFER_INIT(&settings->password);
    3148:	4638      	mov	r0, r7
    314a:	f00a fbaf 	bl	d8ac <bb_init>
    bb_addString(&settings->password, password);
    314e:	4649      	mov	r1, r9
    3150:	4638      	mov	r0, r7
    3152:	f00a fd45 	bl	dbe0 <bb_addString>
__ssp_bos_icheck3(memset, void *, int)
    3156:	61e5      	str	r5, [r4, #28]
    3158:	6225      	str	r5, [r4, #32]
    BYTE_BUFFER_INIT(&settings->kek);
    315a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    315e:	f00a fba5 	bl	d8ac <bb_init>
    settings->maxServerPDUSize = 1024;
    3162:	f44f 6380 	mov.w	r3, #1024	; 0x400
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    3166:	4920      	ldr	r1, [pc, #128]	; (31e8 <cl_init+0xe4>)
    settings->maxServerPDUSize = 1024;
    3168:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    316c:	4b1f      	ldr	r3, [pc, #124]	; (31ec <cl_init+0xe8>)
    settings->server = 0;
    316e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    3172:	42ae      	cmp	r6, r5
    3174:	bf14      	ite	ne
    3176:	460e      	movne	r6, r1
    3178:	461e      	moveq	r6, r3
    settings->maxInfoTX = settings->maxInfoRX = 0x80;
    317a:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    settings->maxPduSize = 0xFFFF;
    317e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    settings->maxInfoTX = settings->maxInfoRX = 0x80;
    3182:	6663      	str	r3, [r4, #100]	; 0x64
    settings->windowSizeTX = settings->windowSizeRX = 1;
    3184:	f240 1301 	movw	r3, #257	; 0x101
    3188:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    oa_init(&settings->objects);
    318c:	f104 0098 	add.w	r0, r4, #152	; 0x98
    settings->maxPduSize = 0xFFFF;
    3190:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if (useLogicalNameReferencing)
    3194:	65e6      	str	r6, [r4, #92]	; 0x5c
    settings->longInvokeID = 0;
    3196:	62a5      	str	r5, [r4, #40]	; 0x28
    settings->connected = DLMS_CONNECTION_STATE_NONE;
    3198:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    oa_init(&settings->objects);
    319c:	f017 ff30 	bl	1b000 <oa_init>
    settings->connected = DLMS_CONNECTION_STATE_NONE;
    31a0:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    settings->customChallenges = 0;
    31a4:	7025      	strb	r5, [r4, #0]
    settings->invokeID = 1;
    31a6:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    BYTE_BUFFER_INIT(&settings->ctoSChallenge);
    31aa:	1d20      	adds	r0, r4, #4
    31ac:	f00a fb7e 	bl	d8ac <bb_init>
    BYTE_BUFFER_INIT(&settings->stoCChallenge);
    31b0:	f104 0010 	add.w	r0, r4, #16
    31b4:	f00a fb7a 	bl	d8ac <bb_init>
    cip_init(&settings->cipher);
    31b8:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    settings->priority = DLMS_PRIORITY_HIGH;
    31bc:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    cip_init(&settings->cipher);
    31c0:	f7fe f9fa 	bl	15b8 <cip_init>
    resetFrameSequence(settings);
    31c4:	4620      	mov	r0, r4
    settings->userId = -1;
    31c6:	f8a4 70d8 	strh.w	r7, [r4, #216]	; 0xd8
    resetFrameSequence(settings);
    31ca:	f00d fe99 	bl	10f00 <resetFrameSequence>
    oa_init(&settings->releasedObjects);
    31ce:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
    31d2:	f017 ff15 	bl	1b000 <oa_init>
    settings->expectedClientSystemTitle = NULL;
    31d6:	e9c4 553c 	strd	r5, r5, [r4, #240]	; 0xf0
    settings->expectedSecuritySuite = 0xFF;
    31da:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
    plc_reset(settings);
    31de:	4620      	mov	r0, r4
}
    31e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    plc_reset(settings);
    31e4:	f7ff bf64 	b.w	30b0 <plc_reset>
    31e8:	00b87800 	.word	0x00b87800
    31ec:	0004c038 	.word	0x0004c038

000031f0 <getActivityCalendarDayProfileTable>:
    return ret;
}
#endif //DLMS_IGNORE_ACTION_SCHEDULE
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int getActivityCalendarDayProfileTable(gxArray* list, gxByteBuffer* ba)
{
    31f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    31f4:	460c      	mov	r4, r1
    31f6:	4605      	mov	r5, r0
    gxDayProfile* dp;
    gxDayProfileAction* action;
    int ret;
    uint16_t pos, pos2;
    if ((ret = cosem_setArray(ba, list->size)) != 0)
    31f8:	88c1      	ldrh	r1, [r0, #6]
    31fa:	4620      	mov	r0, r4
    31fc:	f00b faf5 	bl	e7ea <cosem_setArray>
    3200:	b928      	cbnz	r0, 320e <getActivityCalendarDayProfileTable+0x1e>
                break;
            }
#endif //DLMS_IGNORE_MALLOC
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    3202:	4f28      	ldr	r7, [pc, #160]	; (32a4 <getActivityCalendarDayProfileTable+0xb4>)
    3204:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
    3206:	88eb      	ldrh	r3, [r5, #6]
    3208:	b2b1      	uxth	r1, r6
    320a:	428b      	cmp	r3, r1
    320c:	d102      	bne.n	3214 <getActivityCalendarDayProfileTable+0x24>
                break;
            }
        }
    }
    return ret;
}
    320e:	b002      	add	sp, #8
    3210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&dp)) != 0)
    3214:	466a      	mov	r2, sp
    3216:	4628      	mov	r0, r5
    3218:	f00d ff77 	bl	1110a <arr_getByIndex>
    321c:	2800      	cmp	r0, #0
    321e:	d1f6      	bne.n	320e <getActivityCalendarDayProfileTable+0x1e>
        if ((ret = cosem_setStructure(ba, 2)) != 0 ||
    3220:	2102      	movs	r1, #2
    3222:	4620      	mov	r0, r4
    3224:	f00b fad3 	bl	e7ce <cosem_setStructure>
    3228:	2800      	cmp	r0, #0
    322a:	d1f0      	bne.n	320e <getActivityCalendarDayProfileTable+0x1e>
            (ret = cosem_setUInt8(ba, dp->dayId)) != 0 ||
    322c:	9b00      	ldr	r3, [sp, #0]
    322e:	4620      	mov	r0, r4
    3230:	7819      	ldrb	r1, [r3, #0]
    3232:	f00b fa71 	bl	e718 <cosem_setUInt8>
        if ((ret = cosem_setStructure(ba, 2)) != 0 ||
    3236:	2800      	cmp	r0, #0
    3238:	d1e9      	bne.n	320e <getActivityCalendarDayProfileTable+0x1e>
            (ret = cosem_setArray(ba, dp->daySchedules.size)) != 0)
    323a:	9b00      	ldr	r3, [sp, #0]
    323c:	4620      	mov	r0, r4
    323e:	8959      	ldrh	r1, [r3, #10]
    3240:	f00b fad3 	bl	e7ea <cosem_setArray>
            (ret = cosem_setUInt8(ba, dp->dayId)) != 0 ||
    3244:	2800      	cmp	r0, #0
    3246:	d1e2      	bne.n	320e <getActivityCalendarDayProfileTable+0x1e>
    3248:	4680      	mov	r8, r0
        for (pos2 = 0; pos2 != dp->daySchedules.size; ++pos2)
    324a:	9800      	ldr	r0, [sp, #0]
    324c:	8943      	ldrh	r3, [r0, #10]
    324e:	fa1f f188 	uxth.w	r1, r8
    3252:	428b      	cmp	r3, r1
    3254:	d101      	bne.n	325a <getActivityCalendarDayProfileTable+0x6a>
    3256:	2000      	movs	r0, #0
    3258:	e020      	b.n	329c <getActivityCalendarDayProfileTable+0xac>
            if ((ret = arr_getByIndex(&dp->daySchedules, pos2, (void**)&action)) != 0)
    325a:	aa01      	add	r2, sp, #4
    325c:	3004      	adds	r0, #4
    325e:	f00d ff54 	bl	1110a <arr_getByIndex>
    3262:	b9d8      	cbnz	r0, 329c <getActivityCalendarDayProfileTable+0xac>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
    3264:	2103      	movs	r1, #3
    3266:	4620      	mov	r0, r4
    3268:	f00b fab1 	bl	e7ce <cosem_setStructure>
    326c:	b9b0      	cbnz	r0, 329c <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
    326e:	9901      	ldr	r1, [sp, #4]
    3270:	4620      	mov	r0, r4
    3272:	f00b f9d0 	bl	e616 <cosem_setTimeAsOctetString>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
    3276:	b988      	cbnz	r0, 329c <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    3278:	9b01      	ldr	r3, [sp, #4]
    327a:	68d9      	ldr	r1, [r3, #12]
    327c:	b181      	cbz	r1, 32a0 <getActivityCalendarDayProfileTable+0xb0>
    327e:	3106      	adds	r1, #6
    3280:	2206      	movs	r2, #6
    3282:	4620      	mov	r0, r4
    3284:	f00b fa27 	bl	e6d6 <cosem_setOctetString2>
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
    3288:	b940      	cbnz	r0, 329c <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setUInt16(ba, action->scriptSelector)) != 0)
    328a:	9b01      	ldr	r3, [sp, #4]
    328c:	4620      	mov	r0, r4
    328e:	8a19      	ldrh	r1, [r3, #16]
    3290:	f00b fa50 	bl	e734 <cosem_setUInt16>
    3294:	f108 0801 	add.w	r8, r8, #1
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    3298:	2800      	cmp	r0, #0
    329a:	d0d6      	beq.n	324a <getActivityCalendarDayProfileTable+0x5a>
    for (pos = 0; pos != list->size; ++pos)
    329c:	3601      	adds	r6, #1
    329e:	e7b2      	b.n	3206 <getActivityCalendarDayProfileTable+0x16>
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    32a0:	4639      	mov	r1, r7
    32a2:	e7ed      	b.n	3280 <getActivityCalendarDayProfileTable+0x90>
    32a4:	0001ee54 	.word	0x0001ee54

000032a8 <getLNObjects>:
// Returns LN Association View.
int getLNObjects(
    dlmsSettings* settings,
    gxValueEventArg* e,
    gxByteBuffer* data)
{
    32a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    gxAssociationLogicalName* object = (gxAssociationLogicalName*)e->target;
    int ret;
    uint16_t pos, pos2;
    unsigned char found = 0;
    gxObject* it, * it2;
    unsigned char ln[] = { 0, 0, 40, 0, 0, 255 };
    32ac:	4b83      	ldr	r3, [pc, #524]	; (34bc <getLNObjects+0x214>)
    gxAssociationLogicalName* object = (gxAssociationLogicalName*)e->target;
    32ae:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
    32b2:	b087      	sub	sp, #28
    32b4:	4607      	mov	r7, r0
    unsigned char ln[] = { 0, 0, 40, 0, 0, 255 };
    32b6:	6818      	ldr	r0, [r3, #0]
    32b8:	9004      	str	r0, [sp, #16]
    32ba:	889b      	ldrh	r3, [r3, #4]
    32bc:	f8ad 3014 	strh.w	r3, [sp, #20]
{
    32c0:	4688      	mov	r8, r1
    if ((ret = bb_capacity(data, settings->maxPduSize)) != 0)
    32c2:	4610      	mov	r0, r2
    32c4:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
{
    32c8:	4615      	mov	r5, r2
    if ((ret = bb_capacity(data, settings->maxPduSize)) != 0)
    32ca:	f00a faf5 	bl	d8b8 <bb_capacity>
    32ce:	4604      	mov	r4, r0
    32d0:	2800      	cmp	r0, #0
    32d2:	f040 80ed 	bne.w	34b0 <getLNObjects+0x208>
    {
        return ret;
    }
    //Add count only for first time.
    if (!e->transaction)
    32d6:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    32da:	bbb3      	cbnz	r3, 334a <getLNObjects+0xa2>
    32dc:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    32e0:	4683      	mov	fp, r0
    unsigned char found = 0;
    32e2:	4682      	mov	sl, r0
    {
        uint16_t count = object->objectList.size;
        //Find current association and if nout found add it.
        for (pos = 0; pos != object->objectList.size; ++pos)
    32e4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    32e8:	fa1f f18b 	uxth.w	r1, fp
    32ec:	428b      	cmp	r3, r1
    32ee:	d159      	bne.n	33a4 <getLNObjects+0xfc>
                        break;
                    }
                }
            }
        }
        if (!found)
    32f0:	f1ba 0f00 	cmp.w	sl, #0
    32f4:	d101      	bne.n	32fa <getLNObjects+0x52>
        {
            ++count;
    32f6:	3601      	adds	r6, #1
    32f8:	b2b6      	uxth	r6, r6
        }
        e->transactionEndIndex = count;
    32fa:	f8c8 603c 	str.w	r6, [r8, #60]	; 0x3c
        if ((ret = cosem_setArray(data, count)) != 0)
    32fe:	4631      	mov	r1, r6
    3300:	4628      	mov	r0, r5
    3302:	f00b fa72 	bl	e7ea <cosem_setArray>
    3306:	b9f0      	cbnz	r0, 3346 <getLNObjects+0x9e>
        {
            return ret;
        }
        if (!found)
    3308:	f1ba 0f00 	cmp.w	sl, #0
    330c:	d11d      	bne.n	334a <getLNObjects+0xa2>
        {
            //Count
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    330e:	2104      	movs	r1, #4
    3310:	4628      	mov	r0, r5
    3312:	f00b fa5c 	bl	e7ce <cosem_setStructure>
    3316:	b9b0      	cbnz	r0, 3346 <getLNObjects+0x9e>
                //ClassID
                (ret = cosem_setUInt16(data, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)) != 0 ||
    3318:	210f      	movs	r1, #15
    331a:	4628      	mov	r0, r5
    331c:	f00b fa0a 	bl	e734 <cosem_setUInt16>
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3320:	b988      	cbnz	r0, 3346 <getLNObjects+0x9e>
                //Version
                (ret = cosem_setUInt8(data, object->base.version)) != 0 ||
    3322:	f899 1002 	ldrb.w	r1, [r9, #2]
    3326:	4628      	mov	r0, r5
    3328:	f00b f9f6 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt16(data, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)) != 0 ||
    332c:	b958      	cbnz	r0, 3346 <getLNObjects+0x9e>
                //LN.
                (ret = cosem_setOctetString2(data, ln, 6)) != 0)
    332e:	2206      	movs	r2, #6
    3330:	a904      	add	r1, sp, #16
    3332:	4628      	mov	r0, r5
    3334:	f00b f9cf 	bl	e6d6 <cosem_setOctetString2>
                (ret = cosem_setUInt8(data, object->base.version)) != 0 ||
    3338:	b928      	cbnz	r0, 3346 <getLNObjects+0x9e>
            {
                return ret;
            }
            //Access rights.
            ret = getLNAccessRights(settings, &object->base, data);
    333a:	462a      	mov	r2, r5
    333c:	4649      	mov	r1, r9
    333e:	4638      	mov	r0, r7
    3340:	f00e f8f7 	bl	11532 <getLNAccessRights>
            if (ret != 0)
    3344:	b108      	cbz	r0, 334a <getLNObjects+0xa2>
        }
        ignore = 0;
        //Remove objects that are only internal use.
        for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
        {
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    3346:	4604      	mov	r4, r0
    3348:	e0b2      	b.n	34b0 <getLNObjects+0x208>
    for (pos = (uint16_t)e->transactionStartIndex; pos != object->objectList.size; ++pos)
    334a:	f8b8 a038 	ldrh.w	sl, [r8, #56]	; 0x38
    334e:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    3352:	4553      	cmp	r3, sl
    3354:	f000 80ac 	beq.w	34b0 <getLNObjects+0x208>
        ret = oa_getByIndex(&object->objectList, pos, &it);
    3358:	aa02      	add	r2, sp, #8
    335a:	4651      	mov	r1, sl
    335c:	f109 0014 	add.w	r0, r9, #20
    3360:	f017 fed5 	bl	1b10e <oa_getByIndex>
        if (ret != 0)
    3364:	4606      	mov	r6, r0
    3366:	2800      	cmp	r0, #0
    3368:	f040 80a6 	bne.w	34b8 <getLNObjects+0x210>
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    336c:	f107 0b90 	add.w	fp, r7, #144	; 0x90
        for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
    3370:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
    3374:	b2b1      	uxth	r1, r6
    3376:	428b      	cmp	r3, r1
    3378:	d14f      	bne.n	341a <getLNObjects+0x172>
                break;
            }
        }
        if (!ignore)
        {
            if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    337a:	9902      	ldr	r1, [sp, #8]
    337c:	880b      	ldrh	r3, [r1, #0]
    337e:	2b0f      	cmp	r3, #15
    3380:	d103      	bne.n	338a <getLNObjects+0xe2>
            {
                if (!(it == e->target || memcmp(ln, it->logicalName, 6) == 0))
    3382:	f8d8 3014 	ldr.w	r3, [r8, #20]
    3386:	4299      	cmp	r1, r3
    3388:	d158      	bne.n	343c <getLNObjects+0x194>
                    continue;
                }
            }
            pduSize = (uint16_t)data->size;
            //Count
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    338a:	2104      	movs	r1, #4
    338c:	4628      	mov	r0, r5
            pduSize = (uint16_t)data->size;
    338e:	88ee      	ldrh	r6, [r5, #6]
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3390:	f00b fa1d 	bl	e7ce <cosem_setStructure>
    3394:	2800      	cmp	r0, #0
    3396:	d059      	beq.n	344c <getLNObjects+0x1a4>
                }
            }
            ++e->transactionStartIndex;
        }
    }
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    3398:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
            ret = getLNAccessRights(settings, it, data);
    339c:	4604      	mov	r4, r0
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    339e:	f000 8085 	beq.w	34ac <getLNObjects+0x204>
    33a2:	e085      	b.n	34b0 <getLNObjects+0x208>
            if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0)
    33a4:	aa02      	add	r2, sp, #8
    33a6:	f109 0014 	add.w	r0, r9, #20
    33aa:	f017 feb0 	bl	1b10e <oa_getByIndex>
    33ae:	2800      	cmp	r0, #0
    33b0:	d1c9      	bne.n	3346 <getLNObjects+0x9e>
            if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    33b2:	9902      	ldr	r1, [sp, #8]
    33b4:	880b      	ldrh	r3, [r1, #0]
    33b6:	2b0f      	cmp	r3, #15
    33b8:	d10d      	bne.n	33d6 <getLNObjects+0x12e>
                if (memcmp(ln, it->logicalName, 6) == 0)
    33ba:	2206      	movs	r2, #6
    33bc:	4411      	add	r1, r2
    33be:	a804      	add	r0, sp, #16
    33c0:	f01a fa58 	bl	1d874 <memcmp>
    33c4:	b330      	cbz	r0, 3414 <getLNObjects+0x16c>
                else if (it != e->target)
    33c6:	f8d8 2014 	ldr.w	r2, [r8, #20]
    33ca:	9b02      	ldr	r3, [sp, #8]
    33cc:	429a      	cmp	r2, r3
                    --count;
    33ce:	bf1c      	itt	ne
    33d0:	f106 36ff 	addne.w	r6, r6, #4294967295
    33d4:	b2b6      	uxthne	r6, r6
            if (!found)
    33d6:	f1ba 0f00 	cmp.w	sl, #0
    33da:	d118      	bne.n	340e <getLNObjects+0x166>
                    if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    33dc:	f107 0290 	add.w	r2, r7, #144	; 0x90
    33e0:	4653      	mov	r3, sl
    33e2:	9200      	str	r2, [sp, #0]
                for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
    33e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
    33e8:	b299      	uxth	r1, r3
    33ea:	428a      	cmp	r2, r1
    33ec:	d00f      	beq.n	340e <getLNObjects+0x166>
                    if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    33ee:	9800      	ldr	r0, [sp, #0]
    33f0:	9301      	str	r3, [sp, #4]
    33f2:	aa03      	add	r2, sp, #12
    33f4:	f017 fe8b 	bl	1b10e <oa_getByIndex>
    33f8:	2800      	cmp	r0, #0
    33fa:	d1a4      	bne.n	3346 <getLNObjects+0x9e>
                    if (it2 == it)
    33fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3400:	9b01      	ldr	r3, [sp, #4]
    3402:	4291      	cmp	r1, r2
    3404:	f103 0301 	add.w	r3, r3, #1
    3408:	d1ec      	bne.n	33e4 <getLNObjects+0x13c>
                        --count;
    340a:	3e01      	subs	r6, #1
    340c:	b2b6      	uxth	r6, r6
        for (pos = 0; pos != object->objectList.size; ++pos)
    340e:	f10b 0b01 	add.w	fp, fp, #1
    3412:	e767      	b.n	32e4 <getLNObjects+0x3c>
                    found = 1;
    3414:	f04f 0a01 	mov.w	sl, #1
    3418:	e7f9      	b.n	340e <getLNObjects+0x166>
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    341a:	aa03      	add	r2, sp, #12
    341c:	4658      	mov	r0, fp
    341e:	f017 fe76 	bl	1b10e <oa_getByIndex>
    3422:	2800      	cmp	r0, #0
    3424:	d18f      	bne.n	3346 <getLNObjects+0x9e>
            if (it2 == it)
    3426:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    342a:	429a      	cmp	r2, r3
    342c:	f106 0601 	add.w	r6, r6, #1
    3430:	d19e      	bne.n	3370 <getLNObjects+0xc8>
    for (pos = (uint16_t)e->transactionStartIndex; pos != object->objectList.size; ++pos)
    3432:	f10a 0a01 	add.w	sl, sl, #1
    3436:	fa1f fa8a 	uxth.w	sl, sl
    343a:	e788      	b.n	334e <getLNObjects+0xa6>
                if (!(it == e->target || memcmp(ln, it->logicalName, 6) == 0))
    343c:	2206      	movs	r2, #6
    343e:	4411      	add	r1, r2
    3440:	a804      	add	r0, sp, #16
    3442:	f01a fa17 	bl	1d874 <memcmp>
    3446:	2800      	cmp	r0, #0
    3448:	d09f      	beq.n	338a <getLNObjects+0xe2>
    344a:	e7f2      	b.n	3432 <getLNObjects+0x18a>
                (ret = cosem_setUInt16(data, it->objectType)) != 0 ||
    344c:	9b02      	ldr	r3, [sp, #8]
    344e:	4628      	mov	r0, r5
    3450:	8819      	ldrh	r1, [r3, #0]
    3452:	f00b f96f 	bl	e734 <cosem_setUInt16>
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3456:	2800      	cmp	r0, #0
    3458:	d19e      	bne.n	3398 <getLNObjects+0xf0>
                (ret = cosem_setUInt8(data, (unsigned char)it->version)) != 0 ||
    345a:	9b02      	ldr	r3, [sp, #8]
    345c:	4628      	mov	r0, r5
    345e:	7899      	ldrb	r1, [r3, #2]
    3460:	f00b f95a 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt16(data, it->objectType)) != 0 ||
    3464:	2800      	cmp	r0, #0
    3466:	d197      	bne.n	3398 <getLNObjects+0xf0>
                (ret = cosem_setOctetString2(data, it->logicalName, 6)) != 0)
    3468:	9902      	ldr	r1, [sp, #8]
    346a:	2206      	movs	r2, #6
    346c:	4411      	add	r1, r2
    346e:	4628      	mov	r0, r5
    3470:	f00b f931 	bl	e6d6 <cosem_setOctetString2>
                (ret = cosem_setUInt8(data, (unsigned char)it->version)) != 0 ||
    3474:	2800      	cmp	r0, #0
    3476:	d18f      	bne.n	3398 <getLNObjects+0xf0>
            ret = getLNAccessRights(settings, it, data);
    3478:	9902      	ldr	r1, [sp, #8]
    347a:	462a      	mov	r2, r5
    347c:	4638      	mov	r0, r7
    347e:	f00e f858 	bl	11532 <getLNAccessRights>
            if (ret != 0)
    3482:	2800      	cmp	r0, #0
    3484:	d188      	bne.n	3398 <getLNObjects+0xf0>
            if (settings->server)
    3486:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    348a:	b92b      	cbnz	r3, 3498 <getLNObjects+0x1f0>
            ++e->transactionStartIndex;
    348c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    3490:	3301      	adds	r3, #1
    3492:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    3496:	e7cc      	b.n	3432 <getLNObjects+0x18a>
                if (!e->skipMaxPduSize && dlms_isPduFull(settings, data, NULL))
    3498:	f898 2034 	ldrb.w	r2, [r8, #52]	; 0x34
    349c:	2a00      	cmp	r2, #0
    349e:	d1f5      	bne.n	348c <getLNObjects+0x1e4>
    34a0:	4629      	mov	r1, r5
    34a2:	4638      	mov	r0, r7
    34a4:	f00d fd09 	bl	10eba <dlms_isPduFull>
    34a8:	2800      	cmp	r0, #0
    34aa:	d0ef      	beq.n	348c <getLNObjects+0x1e4>
    {
        data->size = pduSize;
    34ac:	80ee      	strh	r6, [r5, #6]
        ret = 0;
    34ae:	2400      	movs	r4, #0
    }
    return ret;
}
    34b0:	4620      	mov	r0, r4
    34b2:	b007      	add	sp, #28
    34b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = oa_getByIndex(&object->objectList, pos, &it);
    34b8:	4604      	mov	r4, r0
    34ba:	e7f9      	b.n	34b0 <getLNObjects+0x208>
    34bc:	0001e135 	.word	0x0001e135

000034c0 <cosem_getIP4Setup>:
#endif //DLMS_IGNORE_IEC_TWISTED_PAIR_SETUP

#ifndef DLMS_IGNORE_IP4_SETUP
int cosem_getIP4Setup(
    gxValueEventArg* e)
{
    34c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dlmsVARIANT* tmp;
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    gxip4SetupIpOption* it;
    gxIp4Setup* object = (gxIp4Setup*)e->target;
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    34c4:	7e03      	ldrb	r3, [r0, #24]
    gxIp4Setup* object = (gxIp4Setup*)e->target;
    34c6:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    34c8:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    34ca:	2b02      	cmp	r3, #2
    34cc:	d10a      	bne.n	34e4 <cosem_getIP4Setup+0x24>
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->dataLinkLayer == NULL)
    34ce:	6931      	ldr	r1, [r6, #16]
        {
            ret = cosem_setOctetString2(data, EMPTY_LN, 6);
    34d0:	2206      	movs	r2, #6
        if (object->dataLinkLayer == NULL)
    34d2:	b929      	cbnz	r1, 34e0 <cosem_getIP4Setup+0x20>
            ret = cosem_setOctetString2(data, EMPTY_LN, 6);
    34d4:	4956      	ldr	r1, [pc, #344]	; (3630 <cosem_getIP4Setup+0x170>)
        }
        else
        {
            ret = cosem_setOctetString2(data, object->dataLinkLayer->logicalName, 6);
    34d6:	4628      	mov	r0, r5
    34d8:	f00b f8fd 	bl	e6d6 <cosem_setOctetString2>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
                    //Data
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
                    (ret = bb_set2(data, &it->data, 0, bb_size(&it->data))) != 0)
    34dc:	4604      	mov	r4, r0
    34de:	e010      	b.n	3502 <cosem_getIP4Setup+0x42>
            ret = cosem_setOctetString2(data, object->dataLinkLayer->logicalName, 6);
    34e0:	4411      	add	r1, r2
    34e2:	e7f8      	b.n	34d6 <cosem_getIP4Setup+0x16>
    else if (e->index == 3)
    34e4:	2b03      	cmp	r3, #3
    34e6:	d104      	bne.n	34f2 <cosem_getIP4Setup+0x32>
        ret = cosem_setUInt32(data, object->ipAddress);
    34e8:	6971      	ldr	r1, [r6, #20]
    {
        ret = cosem_setUInt32(e->value.byteArr, object->primaryDNSAddress);
    }
    else if (e->index == 10)
    {
        ret = cosem_setUInt32(e->value.byteArr, object->secondaryDNSAddress);
    34ea:	4628      	mov	r0, r5
    34ec:	f00b f930 	bl	e750 <cosem_setUInt32>
    34f0:	e7f4      	b.n	34dc <cosem_getIP4Setup+0x1c>
    else if (e->index == 4)
    34f2:	2b04      	cmp	r3, #4
    34f4:	d123      	bne.n	353e <cosem_getIP4Setup+0x7e>
        if ((ret = cosem_setArray(data, object->multicastIPAddress.size)) == 0)
    34f6:	8bf1      	ldrh	r1, [r6, #30]
    34f8:	4628      	mov	r0, r5
    34fa:	f00b f976 	bl	e7ea <cosem_setArray>
    34fe:	4604      	mov	r4, r0
    3500:	b1c8      	cbz	r0, 3536 <cosem_getIP4Setup+0x76>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    3502:	4620      	mov	r0, r4
    3504:	b003      	add	sp, #12
    3506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    350a:	aa01      	add	r2, sp, #4
    350c:	fa1f f188 	uxth.w	r1, r8
    3510:	4638      	mov	r0, r7
    3512:	f018 f866 	bl	1b5e2 <va_getByIndex>
    3516:	2800      	cmp	r0, #0
    3518:	d1e0      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = var_getBytes(tmp, data)) != 0)
    351a:	9801      	ldr	r0, [sp, #4]
    351c:	4629      	mov	r1, r5
    351e:	f018 f9a0 	bl	1b862 <var_getBytes>
    3522:	f108 0801 	add.w	r8, r8, #1
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    3526:	2800      	cmp	r0, #0
    3528:	d1d8      	bne.n	34dc <cosem_getIP4Setup+0x1c>
            for (pos = 0; pos != object->multicastIPAddress.size; ++pos)
    352a:	8bf2      	ldrh	r2, [r6, #30]
    352c:	fa1f f388 	uxth.w	r3, r8
    3530:	429a      	cmp	r2, r3
    3532:	d1ea      	bne.n	350a <cosem_getIP4Setup+0x4a>
    3534:	e7e5      	b.n	3502 <cosem_getIP4Setup+0x42>
    3536:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    3538:	f106 0718 	add.w	r7, r6, #24
    353c:	e7f5      	b.n	352a <cosem_getIP4Setup+0x6a>
    else if (e->index == 5)
    353e:	2b05      	cmp	r3, #5
    3540:	d15b      	bne.n	35fa <cosem_getIP4Setup+0x13a>
        if ((ret = cosem_setArray(data, object->ipOptions.size)) == 0)
    3542:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
    3544:	4628      	mov	r0, r5
    3546:	f00b f950 	bl	e7ea <cosem_setArray>
    354a:	4604      	mov	r4, r0
    354c:	2800      	cmp	r0, #0
    354e:	d1d8      	bne.n	3502 <cosem_getIP4Setup+0x42>
    3550:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->ipOptions, pos, (void**)&it)) != 0 ||
    3552:	f106 0820 	add.w	r8, r6, #32
    3556:	e04b      	b.n	35f0 <cosem_getIP4Setup+0x130>
    3558:	aa01      	add	r2, sp, #4
    355a:	4640      	mov	r0, r8
    355c:	f00d fdd5 	bl	1110a <arr_getByIndex>
    3560:	2800      	cmp	r0, #0
    3562:	d1bb      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3564:	2102      	movs	r1, #2
    3566:	4628      	mov	r0, r5
    3568:	f00a fa09 	bl	d97e <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->ipOptions, pos, (void**)&it)) != 0 ||
    356c:	2800      	cmp	r0, #0
    356e:	d1b5      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3570:	2103      	movs	r1, #3
    3572:	4628      	mov	r0, r5
    3574:	f00a fa03 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3578:	2800      	cmp	r0, #0
    357a:	d1af      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    357c:	2111      	movs	r1, #17
    357e:	4628      	mov	r0, r5
    3580:	f00a f9fd 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3584:	2800      	cmp	r0, #0
    3586:	d1a9      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, it->type)) != 0 ||
    3588:	9b01      	ldr	r3, [sp, #4]
    358a:	4628      	mov	r0, r5
    358c:	7819      	ldrb	r1, [r3, #0]
    358e:	f00a f9f6 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3592:	2800      	cmp	r0, #0
    3594:	d1a2      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3596:	2111      	movs	r1, #17
    3598:	4628      	mov	r0, r5
    359a:	f00a f9f0 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, it->type)) != 0 ||
    359e:	2800      	cmp	r0, #0
    35a0:	d19c      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
    35a2:	9b01      	ldr	r3, [sp, #4]
    35a4:	4628      	mov	r0, r5
    35a6:	7859      	ldrb	r1, [r3, #1]
    35a8:	f00a f9e9 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    35ac:	2800      	cmp	r0, #0
    35ae:	d195      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    35b0:	2109      	movs	r1, #9
    35b2:	4628      	mov	r0, r5
    35b4:	f00a f9e3 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
    35b8:	2800      	cmp	r0, #0
    35ba:	d18f      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
    35bc:	9801      	ldr	r0, [sp, #4]
    35be:	3004      	adds	r0, #4
    35c0:	f00a f971 	bl	d8a6 <bb_size>
    35c4:	b2c1      	uxtb	r1, r0
    35c6:	4628      	mov	r0, r5
    35c8:	f00a f9d9 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    35cc:	2800      	cmp	r0, #0
    35ce:	d185      	bne.n	34dc <cosem_getIP4Setup+0x1c>
                    (ret = bb_set2(data, &it->data, 0, bb_size(&it->data))) != 0)
    35d0:	9901      	ldr	r1, [sp, #4]
    35d2:	f101 0904 	add.w	r9, r1, #4
    35d6:	4648      	mov	r0, r9
    35d8:	f00a f965 	bl	d8a6 <bb_size>
    35dc:	2200      	movs	r2, #0
    35de:	4603      	mov	r3, r0
    35e0:	4649      	mov	r1, r9
    35e2:	4628      	mov	r0, r5
    35e4:	f00a fae0 	bl	dba8 <bb_set2>
    35e8:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
    35ea:	2800      	cmp	r0, #0
    35ec:	f47f af76 	bne.w	34dc <cosem_getIP4Setup+0x1c>
            for (pos = 0; pos != object->ipOptions.size; ++pos)
    35f0:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    35f2:	b2b9      	uxth	r1, r7
    35f4:	428b      	cmp	r3, r1
    35f6:	d1af      	bne.n	3558 <cosem_getIP4Setup+0x98>
    35f8:	e783      	b.n	3502 <cosem_getIP4Setup+0x42>
    else if (e->index == 6)
    35fa:	2b06      	cmp	r3, #6
    35fc:	d101      	bne.n	3602 <cosem_getIP4Setup+0x142>
        ret = cosem_setUInt32(e->value.byteArr, object->subnetMask);
    35fe:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    3600:	e773      	b.n	34ea <cosem_getIP4Setup+0x2a>
    else if (e->index == 7)
    3602:	2b07      	cmp	r3, #7
    3604:	d101      	bne.n	360a <cosem_getIP4Setup+0x14a>
        ret = cosem_setUInt32(e->value.byteArr, object->gatewayIPAddress);
    3606:	6b31      	ldr	r1, [r6, #48]	; 0x30
    3608:	e76f      	b.n	34ea <cosem_getIP4Setup+0x2a>
    else if (e->index == 8)
    360a:	2b08      	cmp	r3, #8
    360c:	d105      	bne.n	361a <cosem_getIP4Setup+0x15a>
        ret = cosem_setBoolean(e->value.byteArr, object->useDHCP);
    360e:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
    3612:	4628      	mov	r0, r5
    3614:	f00b f905 	bl	e822 <cosem_setBoolean>
    3618:	e760      	b.n	34dc <cosem_getIP4Setup+0x1c>
    else if (e->index == 9)
    361a:	2b09      	cmp	r3, #9
    361c:	d101      	bne.n	3622 <cosem_getIP4Setup+0x162>
        ret = cosem_setUInt32(e->value.byteArr, object->primaryDNSAddress);
    361e:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    3620:	e763      	b.n	34ea <cosem_getIP4Setup+0x2a>
    else if (e->index == 10)
    3622:	2b0a      	cmp	r3, #10
    3624:	d101      	bne.n	362a <cosem_getIP4Setup+0x16a>
        ret = cosem_setUInt32(e->value.byteArr, object->secondaryDNSAddress);
    3626:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    3628:	e75f      	b.n	34ea <cosem_getIP4Setup+0x2a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    362a:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
    362e:	e768      	b.n	3502 <cosem_getIP4Setup+0x42>
    3630:	0001ee54 	.word	0x0001ee54

00003634 <cosem_getLimiter>:
}
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
int cosem_getLimiter(
    gxValueEventArg* e)
{
    3634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
    uint16_t* it;
#else
    dlmsVARIANT* it;
#endif //defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
    if (e->index == 2)
    3638:	7e01      	ldrb	r1, [r0, #24]
    gxLimiter* object = (gxLimiter*)e->target;
    363a:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    363c:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    363e:	2902      	cmp	r1, #2
    3640:	d16d      	bne.n	371e <cosem_getLimiter+0xea>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3642:	4628      	mov	r0, r5
    3644:	f00a f99b 	bl	d97e <bb_setUInt8>
    3648:	4604      	mov	r4, r0
    364a:	2800      	cmp	r0, #0
    364c:	f040 80ba 	bne.w	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    3650:	2103      	movs	r1, #3
    3652:	4628      	mov	r0, r5
    3654:	f00a f993 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3658:	4604      	mov	r4, r0
    365a:	2800      	cmp	r0, #0
    365c:	f040 80b2 	bne.w	37c4 <cosem_getLimiter+0x190>
            //objectType
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0)
    3660:	2112      	movs	r1, #18
    3662:	4628      	mov	r0, r5
    3664:	f00a f98b 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    3668:	4604      	mov	r4, r0
    366a:	2800      	cmp	r0, #0
    366c:	f040 80aa 	bne.w	37c4 <cosem_getLimiter+0x190>
        {
            return ret;
        }
        if (object->monitoredValue == NULL)
    3670:	6933      	ldr	r3, [r6, #16]
    3672:	bb6b      	cbnz	r3, 36d0 <cosem_getLimiter+0x9c>
        {
            if ((ret = bb_setUInt16(data, 0)) != 0 ||
    3674:	4601      	mov	r1, r0
    3676:	4628      	mov	r0, r5
    3678:	f00a f9a3 	bl	d9c2 <bb_setUInt16>
    367c:	4604      	mov	r4, r0
    367e:	2800      	cmp	r0, #0
    3680:	f040 80a0 	bne.w	37c4 <cosem_getLimiter+0x190>
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3684:	2109      	movs	r1, #9
    3686:	4628      	mov	r0, r5
    3688:	f00a f979 	bl	d97e <bb_setUInt8>
            if ((ret = bb_setUInt16(data, 0)) != 0 ||
    368c:	4604      	mov	r4, r0
    368e:	2800      	cmp	r0, #0
    3690:	f040 8098 	bne.w	37c4 <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    3694:	2106      	movs	r1, #6
    3696:	4628      	mov	r0, r5
    3698:	f00a f971 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    369c:	4604      	mov	r4, r0
    369e:	2800      	cmp	r0, #0
    36a0:	f040 8090 	bne.w	37c4 <cosem_getLimiter+0x190>
                (ret = bb_set(data, EMPTY_LN, 6)) != 0 ||
    36a4:	499b      	ldr	r1, [pc, #620]	; (3914 <cosem_getLimiter+0x2e0>)
    36a6:	2206      	movs	r2, #6
    36a8:	4628      	mov	r0, r5
    36aa:	f00a fa4e 	bl	db4a <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    36ae:	4604      	mov	r4, r0
    36b0:	2800      	cmp	r0, #0
    36b2:	f040 8087 	bne.w	37c4 <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    36b6:	210f      	movs	r1, #15
    36b8:	4628      	mov	r0, r5
    36ba:	f00a f960 	bl	d97e <bb_setUInt8>
                (ret = bb_set(data, EMPTY_LN, 6)) != 0 ||
    36be:	4604      	mov	r4, r0
    36c0:	2800      	cmp	r0, #0
    36c2:	d17f      	bne.n	37c4 <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 0)) != 0)
    36c4:	2100      	movs	r1, #0
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, object->selectedAttributeIndex)) != 0)
    36c6:	4628      	mov	r0, r5
    36c8:	f00a f959 	bl	d97e <bb_setUInt8>
                {
                    break;
                }
#else
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
                    (ret = var_getBytes(it, data)) != 0)
    36cc:	4604      	mov	r4, r0
    36ce:	e079      	b.n	37c4 <cosem_getLimiter+0x190>
            if ((ret = bb_setUInt16(data, object->monitoredValue->objectType)) != 0 ||
    36d0:	8819      	ldrh	r1, [r3, #0]
    36d2:	4628      	mov	r0, r5
    36d4:	f00a f975 	bl	d9c2 <bb_setUInt16>
    36d8:	4604      	mov	r4, r0
    36da:	2800      	cmp	r0, #0
    36dc:	d172      	bne.n	37c4 <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    36de:	2109      	movs	r1, #9
    36e0:	4628      	mov	r0, r5
    36e2:	f00a f94c 	bl	d97e <bb_setUInt8>
            if ((ret = bb_setUInt16(data, object->monitoredValue->objectType)) != 0 ||
    36e6:	4604      	mov	r4, r0
    36e8:	2800      	cmp	r0, #0
    36ea:	d16b      	bne.n	37c4 <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    36ec:	2106      	movs	r1, #6
    36ee:	4628      	mov	r0, r5
    36f0:	f00a f945 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    36f4:	4604      	mov	r4, r0
    36f6:	2800      	cmp	r0, #0
    36f8:	d164      	bne.n	37c4 <cosem_getLimiter+0x190>
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
    36fa:	6931      	ldr	r1, [r6, #16]
    36fc:	2206      	movs	r2, #6
    36fe:	4411      	add	r1, r2
    3700:	4628      	mov	r0, r5
    3702:	f00a fa22 	bl	db4a <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    3706:	4604      	mov	r4, r0
    3708:	2800      	cmp	r0, #0
    370a:	d15b      	bne.n	37c4 <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    370c:	210f      	movs	r1, #15
    370e:	4628      	mov	r0, r5
    3710:	f00a f935 	bl	d97e <bb_setUInt8>
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
    3714:	4604      	mov	r4, r0
    3716:	2800      	cmp	r0, #0
    3718:	d154      	bne.n	37c4 <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, object->selectedAttributeIndex)) != 0)
    371a:	7d31      	ldrb	r1, [r6, #20]
    371c:	e7d3      	b.n	36c6 <cosem_getLimiter+0x92>
    else if (e->index == 3)
    371e:	2903      	cmp	r1, #3
    3720:	d105      	bne.n	372e <cosem_getLimiter+0xfa>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdActive);
    3722:	f106 0118 	add.w	r1, r6, #24
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdNormal);
    3726:	4628      	mov	r0, r5
    3728:	f00b f84a 	bl	e7c0 <cosem_setVariant>
    372c:	e7ce      	b.n	36cc <cosem_getLimiter+0x98>
    else if (e->index == 4)
    372e:	2904      	cmp	r1, #4
    3730:	d102      	bne.n	3738 <cosem_getLimiter+0x104>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdNormal);
    3732:	f106 0128 	add.w	r1, r6, #40	; 0x28
    3736:	e7f6      	b.n	3726 <cosem_getLimiter+0xf2>
    else if (e->index == 5)
    3738:	2905      	cmp	r1, #5
    373a:	d102      	bne.n	3742 <cosem_getLimiter+0x10e>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdEmergency);
    373c:	f106 0138 	add.w	r1, r6, #56	; 0x38
    3740:	e7f1      	b.n	3726 <cosem_getLimiter+0xf2>
    else if (e->index == 6)
    3742:	2906      	cmp	r1, #6
    3744:	d104      	bne.n	3750 <cosem_getLimiter+0x11c>
        ret = cosem_setUInt32(e->value.byteArr, object->minOverThresholdDuration);
    3746:	6cb1      	ldr	r1, [r6, #72]	; 0x48
        ret = cosem_setUInt32(e->value.byteArr, object->minUnderThresholdDuration);
    3748:	4628      	mov	r0, r5
    374a:	f00b f801 	bl	e750 <cosem_setUInt32>
    374e:	e7bd      	b.n	36cc <cosem_getLimiter+0x98>
    else if (e->index == 7)
    3750:	2907      	cmp	r1, #7
    3752:	d101      	bne.n	3758 <cosem_getLimiter+0x124>
        ret = cosem_setUInt32(e->value.byteArr, object->minUnderThresholdDuration);
    3754:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    3756:	e7f7      	b.n	3748 <cosem_getLimiter+0x114>
    else if (e->index == 8)
    3758:	2908      	cmp	r1, #8
    375a:	d12a      	bne.n	37b2 <cosem_getLimiter+0x17e>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    375c:	2102      	movs	r1, #2
    375e:	4628      	mov	r0, r5
    3760:	f00a f90d 	bl	d97e <bb_setUInt8>
    3764:	4604      	mov	r4, r0
    3766:	bb68      	cbnz	r0, 37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    3768:	2103      	movs	r1, #3
    376a:	4628      	mov	r0, r5
    376c:	f00a f907 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3770:	4604      	mov	r4, r0
    3772:	bb38      	cbnz	r0, 37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3774:	2112      	movs	r1, #18
    3776:	4628      	mov	r0, r5
    3778:	f00a f901 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    377c:	4604      	mov	r4, r0
    377e:	bb08      	cbnz	r0, 37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->emergencyProfile.id)) != 0 ||
    3780:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
    3784:	4628      	mov	r0, r5
    3786:	f00a f91c 	bl	d9c2 <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    378a:	4604      	mov	r4, r0
    378c:	b9d0      	cbnz	r0, 37c4 <cosem_getLimiter+0x190>
            (ret = cosem_setDateTimeAsOctetString(data, &object->emergencyProfile.activationTime)) != 0 ||
    378e:	f106 0154 	add.w	r1, r6, #84	; 0x54
    3792:	4628      	mov	r0, r5
    3794:	f00a fecd 	bl	e532 <cosem_setDateTimeAsOctetString>
            (ret = bb_setUInt16(data, object->emergencyProfile.id)) != 0 ||
    3798:	4604      	mov	r4, r0
    379a:	b998      	cbnz	r0, 37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
    379c:	2106      	movs	r1, #6
    379e:	4628      	mov	r0, r5
    37a0:	f00a f8ed 	bl	d97e <bb_setUInt8>
            (ret = cosem_setDateTimeAsOctetString(data, &object->emergencyProfile.activationTime)) != 0 ||
    37a4:	4604      	mov	r4, r0
    37a6:	b968      	cbnz	r0, 37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt32(data, object->emergencyProfile.duration)) != 0)
    37a8:	6e31      	ldr	r1, [r6, #96]	; 0x60
    37aa:	4628      	mov	r0, r5
    37ac:	f00a f92b 	bl	da06 <bb_setUInt32>
    37b0:	e78c      	b.n	36cc <cosem_getLimiter+0x98>
    else if (e->index == 9)
    37b2:	2909      	cmp	r1, #9
    37b4:	d124      	bne.n	3800 <cosem_getLimiter+0x1cc>
        if ((ret = cosem_setArray(data, object->emergencyProfileGroupIDs.size)) == 0)
    37b6:	f8b6 106a 	ldrh.w	r1, [r6, #106]	; 0x6a
    37ba:	4628      	mov	r0, r5
    37bc:	f00b f815 	bl	e7ea <cosem_setArray>
    37c0:	4604      	mov	r4, r0
    37c2:	b1c8      	cbz	r0, 37f8 <cosem_getLimiter+0x1c4>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    37c4:	4620      	mov	r0, r4
    37c6:	b002      	add	sp, #8
    37c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    37cc:	aa01      	add	r2, sp, #4
    37ce:	4641      	mov	r1, r8
    37d0:	4638      	mov	r0, r7
    37d2:	f017 ff06 	bl	1b5e2 <va_getByIndex>
    37d6:	2800      	cmp	r0, #0
    37d8:	f47f af78 	bne.w	36cc <cosem_getLimiter+0x98>
                    (ret = var_getBytes(it, data)) != 0)
    37dc:	9801      	ldr	r0, [sp, #4]
    37de:	4629      	mov	r1, r5
    37e0:	f018 f83f 	bl	1b862 <var_getBytes>
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    37e4:	2800      	cmp	r0, #0
    37e6:	f47f af71 	bne.w	36cc <cosem_getLimiter+0x98>
            for (pos = 0; pos != object->emergencyProfileGroupIDs.size; ++pos)
    37ea:	f108 0801 	add.w	r8, r8, #1
    37ee:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
    37f2:	4543      	cmp	r3, r8
    37f4:	d1ea      	bne.n	37cc <cosem_getLimiter+0x198>
    37f6:	e7e5      	b.n	37c4 <cosem_getLimiter+0x190>
    37f8:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    37fa:	f106 0764 	add.w	r7, r6, #100	; 0x64
    37fe:	e7f6      	b.n	37ee <cosem_getLimiter+0x1ba>
    else if (e->index == 10)
    3800:	290a      	cmp	r1, #10
    3802:	d105      	bne.n	3810 <cosem_getLimiter+0x1dc>
        ret = cosem_setBoolean(e->value.byteArr, object->emergencyProfileActive);
    3804:	f896 106c 	ldrb.w	r1, [r6, #108]	; 0x6c
    3808:	4628      	mov	r0, r5
    380a:	f00b f80a 	bl	e822 <cosem_setBoolean>
    380e:	e75d      	b.n	36cc <cosem_getLimiter+0x98>
    else if (e->index == 11)
    3810:	290b      	cmp	r1, #11
    3812:	d17b      	bne.n	390c <cosem_getLimiter+0x2d8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3814:	2102      	movs	r1, #2
    3816:	4628      	mov	r0, r5
    3818:	f00a f8b1 	bl	d97e <bb_setUInt8>
    381c:	4604      	mov	r4, r0
    381e:	2800      	cmp	r0, #0
    3820:	d1d0      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3822:	2102      	movs	r1, #2
    3824:	4628      	mov	r0, r5
    3826:	f00a f8aa 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    382a:	4604      	mov	r4, r0
    382c:	2800      	cmp	r0, #0
    382e:	d1c9      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3830:	2102      	movs	r1, #2
    3832:	4628      	mov	r0, r5
    3834:	f00a f8a3 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3838:	4604      	mov	r4, r0
    383a:	2800      	cmp	r0, #0
    383c:	d1c2      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    383e:	2102      	movs	r1, #2
    3840:	4628      	mov	r0, r5
    3842:	f00a f89c 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3846:	4604      	mov	r4, r0
    3848:	2800      	cmp	r0, #0
    384a:	d1bb      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    384c:	2109      	movs	r1, #9
    384e:	4628      	mov	r0, r5
    3850:	f00a f895 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3854:	4604      	mov	r4, r0
    3856:	2800      	cmp	r0, #0
    3858:	d1b4      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    385a:	2106      	movs	r1, #6
    385c:	4628      	mov	r0, r5
    385e:	f00a f88e 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3862:	4604      	mov	r4, r0
    3864:	2800      	cmp	r0, #0
    3866:	d1ad      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionOverThreshold.script), 6)) != 0 ||
    3868:	6f30      	ldr	r0, [r6, #112]	; 0x70
    386a:	f000 fc11 	bl	4090 <obj_getLogicalName>
    386e:	2206      	movs	r2, #6
    3870:	4601      	mov	r1, r0
    3872:	4628      	mov	r0, r5
    3874:	f00a f969 	bl	db4a <bb_set>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    3878:	4604      	mov	r4, r0
    387a:	2800      	cmp	r0, #0
    387c:	d1a2      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    387e:	2112      	movs	r1, #18
    3880:	4628      	mov	r0, r5
    3882:	f00a f87c 	bl	d97e <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionOverThreshold.script), 6)) != 0 ||
    3886:	4604      	mov	r4, r0
    3888:	2800      	cmp	r0, #0
    388a:	d19b      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->actionOverThreshold.scriptSelector)) != 0 ||
    388c:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
    3890:	4628      	mov	r0, r5
    3892:	f00a f896 	bl	d9c2 <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3896:	4604      	mov	r4, r0
    3898:	2800      	cmp	r0, #0
    389a:	d193      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    389c:	2102      	movs	r1, #2
    389e:	4628      	mov	r0, r5
    38a0:	f00a f86d 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt16(data, object->actionOverThreshold.scriptSelector)) != 0 ||
    38a4:	4604      	mov	r4, r0
    38a6:	2800      	cmp	r0, #0
    38a8:	d18c      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    38aa:	2102      	movs	r1, #2
    38ac:	4628      	mov	r0, r5
    38ae:	f00a f866 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    38b2:	4604      	mov	r4, r0
    38b4:	2800      	cmp	r0, #0
    38b6:	d185      	bne.n	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    38b8:	2109      	movs	r1, #9
    38ba:	4628      	mov	r0, r5
    38bc:	f00a f85f 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    38c0:	4604      	mov	r4, r0
    38c2:	2800      	cmp	r0, #0
    38c4:	f47f af7e 	bne.w	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    38c8:	2106      	movs	r1, #6
    38ca:	4628      	mov	r0, r5
    38cc:	f00a f857 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    38d0:	4604      	mov	r4, r0
    38d2:	2800      	cmp	r0, #0
    38d4:	f47f af76 	bne.w	37c4 <cosem_getLimiter+0x190>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionUnderThreshold.script), 6)) != 0 ||
    38d8:	6fb0      	ldr	r0, [r6, #120]	; 0x78
    38da:	f000 fbd9 	bl	4090 <obj_getLogicalName>
    38de:	2206      	movs	r2, #6
    38e0:	4601      	mov	r1, r0
    38e2:	4628      	mov	r0, r5
    38e4:	f00a f931 	bl	db4a <bb_set>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    38e8:	4604      	mov	r4, r0
    38ea:	2800      	cmp	r0, #0
    38ec:	f47f af6a 	bne.w	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    38f0:	2112      	movs	r1, #18
    38f2:	4628      	mov	r0, r5
    38f4:	f00a f843 	bl	d97e <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionUnderThreshold.script), 6)) != 0 ||
    38f8:	4604      	mov	r4, r0
    38fa:	2800      	cmp	r0, #0
    38fc:	f47f af62 	bne.w	37c4 <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->actionUnderThreshold.scriptSelector)) != 0)
    3900:	f8b6 107c 	ldrh.w	r1, [r6, #124]	; 0x7c
    3904:	4628      	mov	r0, r5
    3906:	f00a f85c 	bl	d9c2 <bb_setUInt16>
    390a:	e6df      	b.n	36cc <cosem_getLimiter+0x98>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    390c:	f44f 7481 	mov.w	r4, #258	; 0x102
    3910:	e758      	b.n	37c4 <cosem_getLimiter+0x190>
    3912:	bf00      	nop
    3914:	0001ee54 	.word	0x0001ee54

00003918 <cosem_getmMbusClient>:
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
int cosem_getmMbusClient(
    gxValueEventArg* e)
{
    3918:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef DLMS_IGNORE_MALLOC
    gxCaptureDefinition* it;
#else
    gxKey* it;
#endif //DLMS_IGNORE_MALLOC
    if (e->index == 2)
    391c:	7e03      	ldrb	r3, [r0, #24]
    gxMBusClient* object = (gxMBusClient*)e->target;
    391e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3920:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    3922:	2b02      	cmp	r3, #2
    3924:	d10a      	bne.n	393c <cosem_getmMbusClient+0x24>
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->mBusPort == NULL)
    3926:	69b1      	ldr	r1, [r6, #24]
        {
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3928:	2206      	movs	r2, #6
        if (object->mBusPort == NULL)
    392a:	b929      	cbnz	r1, 3938 <cosem_getmMbusClient+0x20>
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    392c:	4959      	ldr	r1, [pc, #356]	; (3a94 <cosem_getmMbusClient+0x17c>)
        }
        else
        {
            ret = cosem_setOctetString2(e->value.byteArr, object->mBusPort->logicalName, 6);
    392e:	4628      	mov	r0, r5
    3930:	f00a fed1 	bl	e6d6 <cosem_setOctetString2>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
                    //
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
                    (ret = bb_set2(data, (gxByteBuffer*)it->value, 0, bb_size((gxByteBuffer*)it->value))) != 0)
    3934:	4604      	mov	r4, r0
    3936:	e00a      	b.n	394e <cosem_getmMbusClient+0x36>
            ret = cosem_setOctetString2(e->value.byteArr, object->mBusPort->logicalName, 6);
    3938:	4411      	add	r1, r2
    393a:	e7f8      	b.n	392e <cosem_getmMbusClient+0x16>
    else if (e->index == 3)
    393c:	2b03      	cmp	r3, #3
    393e:	d162      	bne.n	3a06 <cosem_getmMbusClient+0xee>
        if ((ret = cosem_setArray(data, object->captureDefinition.size)) == 0)
    3940:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    3942:	4628      	mov	r0, r5
    3944:	f00a ff51 	bl	e7ea <cosem_setArray>
    3948:	4604      	mov	r4, r0
    394a:	2800      	cmp	r0, #0
    394c:	d057      	beq.n	39fe <cosem_getmMbusClient+0xe6>
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    394e:	4620      	mov	r0, r4
    3950:	b002      	add	sp, #8
    3952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    3956:	aa01      	add	r2, sp, #4
    3958:	4648      	mov	r0, r9
    395a:	f00d fbd6 	bl	1110a <arr_getByIndex>
    395e:	2800      	cmp	r0, #0
    3960:	d1e8      	bne.n	3934 <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3962:	2102      	movs	r1, #2
    3964:	4628      	mov	r0, r5
    3966:	f00a f80a 	bl	d97e <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    396a:	2800      	cmp	r0, #0
    396c:	d1e2      	bne.n	3934 <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
    396e:	2102      	movs	r1, #2
    3970:	4628      	mov	r0, r5
    3972:	f00a f804 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3976:	2800      	cmp	r0, #0
    3978:	d1dc      	bne.n	3934 <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    397a:	2109      	movs	r1, #9
    397c:	4628      	mov	r0, r5
    397e:	f009 fffe 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
    3982:	2800      	cmp	r0, #0
    3984:	d1d6      	bne.n	3934 <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
    3986:	9b01      	ldr	r3, [sp, #4]
    3988:	681b      	ldr	r3, [r3, #0]
    398a:	4629      	mov	r1, r5
    398c:	88d8      	ldrh	r0, [r3, #6]
    398e:	f017 f8f2 	bl	1ab76 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3992:	4607      	mov	r7, r0
    3994:	2800      	cmp	r0, #0
    3996:	d178      	bne.n	3a8a <cosem_getmMbusClient+0x172>
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
    3998:	9b01      	ldr	r3, [sp, #4]
    399a:	f8d3 a000 	ldr.w	sl, [r3]
    399e:	4650      	mov	r0, sl
    39a0:	f009 ff81 	bl	d8a6 <bb_size>
    39a4:	463a      	mov	r2, r7
    39a6:	4603      	mov	r3, r0
    39a8:	4651      	mov	r1, sl
    39aa:	4628      	mov	r0, r5
    39ac:	f00a f8fc 	bl	dba8 <bb_set2>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
    39b0:	2800      	cmp	r0, #0
    39b2:	d1bf      	bne.n	3934 <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    39b4:	2109      	movs	r1, #9
    39b6:	4628      	mov	r0, r5
    39b8:	f009 ffe1 	bl	d97e <bb_setUInt8>
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
    39bc:	2800      	cmp	r0, #0
    39be:	d1b9      	bne.n	3934 <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    39c0:	9b01      	ldr	r3, [sp, #4]
    39c2:	685b      	ldr	r3, [r3, #4]
    39c4:	4629      	mov	r1, r5
    39c6:	88d8      	ldrh	r0, [r3, #6]
    39c8:	f017 f8d5 	bl	1ab76 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    39cc:	4607      	mov	r7, r0
    39ce:	2800      	cmp	r0, #0
    39d0:	d15b      	bne.n	3a8a <cosem_getmMbusClient+0x172>
                    (ret = bb_set2(data, (gxByteBuffer*)it->value, 0, bb_size((gxByteBuffer*)it->value))) != 0)
    39d2:	9b01      	ldr	r3, [sp, #4]
    39d4:	f8d3 a004 	ldr.w	sl, [r3, #4]
    39d8:	4650      	mov	r0, sl
    39da:	f009 ff64 	bl	d8a6 <bb_size>
    39de:	463a      	mov	r2, r7
    39e0:	4603      	mov	r3, r0
    39e2:	4651      	mov	r1, sl
    39e4:	4628      	mov	r0, r5
    39e6:	f00a f8df 	bl	dba8 <bb_set2>
    39ea:	f108 0801 	add.w	r8, r8, #1
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    39ee:	2800      	cmp	r0, #0
    39f0:	d1a0      	bne.n	3934 <cosem_getmMbusClient+0x1c>
            for (pos = 0; pos != object->captureDefinition.size; ++pos)
    39f2:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    39f4:	fa1f f188 	uxth.w	r1, r8
    39f8:	428b      	cmp	r3, r1
    39fa:	d1ac      	bne.n	3956 <cosem_getmMbusClient+0x3e>
    39fc:	e7a7      	b.n	394e <cosem_getmMbusClient+0x36>
    39fe:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    3a00:	f106 091c 	add.w	r9, r6, #28
    3a04:	e7f5      	b.n	39f2 <cosem_getmMbusClient+0xda>
    else if (e->index == 4)
    3a06:	2b04      	cmp	r3, #4
    3a08:	d104      	bne.n	3a14 <cosem_getmMbusClient+0xfc>
        ret = cosem_setUInt32(e->value.byteArr, object->capturePeriod);
    3a0a:	6931      	ldr	r1, [r6, #16]
        ret = cosem_setUInt32(e->value.byteArr, object->identificationNumber);
    3a0c:	4628      	mov	r0, r5
    3a0e:	f00a fe9f 	bl	e750 <cosem_setUInt32>
    3a12:	e78f      	b.n	3934 <cosem_getmMbusClient+0x1c>
    else if (e->index == 5)
    3a14:	2b05      	cmp	r3, #5
    3a16:	d104      	bne.n	3a22 <cosem_getmMbusClient+0x10a>
        ret = cosem_setUInt8(e->value.byteArr, object->primaryAddress);
    3a18:	7d31      	ldrb	r1, [r6, #20]
        ret = cosem_setUInt8(e->value.byteArr, object->alarm);
    3a1a:	4628      	mov	r0, r5
    3a1c:	f00a fe7c 	bl	e718 <cosem_setUInt8>
    3a20:	e788      	b.n	3934 <cosem_getmMbusClient+0x1c>
    else if (e->index == 6)
    3a22:	2b06      	cmp	r3, #6
    3a24:	d101      	bne.n	3a2a <cosem_getmMbusClient+0x112>
        ret = cosem_setUInt32(e->value.byteArr, object->identificationNumber);
    3a26:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3a28:	e7f0      	b.n	3a0c <cosem_getmMbusClient+0xf4>
    else if (e->index == 7)
    3a2a:	2b07      	cmp	r3, #7
    3a2c:	d104      	bne.n	3a38 <cosem_getmMbusClient+0x120>
        ret = cosem_setUInt16(e->value.byteArr, object->manufacturerID);
    3a2e:	8db1      	ldrh	r1, [r6, #44]	; 0x2c
        ret = cosem_setUInt16(e->value.byteArr, object->configuration);
    3a30:	4628      	mov	r0, r5
    3a32:	f00a fe7f 	bl	e734 <cosem_setUInt16>
    3a36:	e77d      	b.n	3934 <cosem_getmMbusClient+0x1c>
    else if (e->index == 8)
    3a38:	2b08      	cmp	r3, #8
    3a3a:	d102      	bne.n	3a42 <cosem_getmMbusClient+0x12a>
        ret = cosem_setUInt8(e->value.byteArr, object->dataHeaderVersion);
    3a3c:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
    3a40:	e7eb      	b.n	3a1a <cosem_getmMbusClient+0x102>
    else if (e->index == 9)
    3a42:	2b09      	cmp	r3, #9
    3a44:	d102      	bne.n	3a4c <cosem_getmMbusClient+0x134>
        ret = cosem_setUInt8(e->value.byteArr, object->deviceType);
    3a46:	f896 102f 	ldrb.w	r1, [r6, #47]	; 0x2f
    3a4a:	e7e6      	b.n	3a1a <cosem_getmMbusClient+0x102>
    else if (e->index == 10)
    3a4c:	2b0a      	cmp	r3, #10
    3a4e:	d102      	bne.n	3a56 <cosem_getmMbusClient+0x13e>
        ret = cosem_setUInt8(e->value.byteArr, object->accessNumber);
    3a50:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    3a54:	e7e1      	b.n	3a1a <cosem_getmMbusClient+0x102>
    else if (e->index == 11)
    3a56:	2b0b      	cmp	r3, #11
    3a58:	d102      	bne.n	3a60 <cosem_getmMbusClient+0x148>
        ret = cosem_setUInt8(e->value.byteArr, object->status);
    3a5a:	f896 1031 	ldrb.w	r1, [r6, #49]	; 0x31
    3a5e:	e7dc      	b.n	3a1a <cosem_getmMbusClient+0x102>
    else if (e->index == 12)
    3a60:	2b0c      	cmp	r3, #12
    3a62:	d102      	bne.n	3a6a <cosem_getmMbusClient+0x152>
        ret = cosem_setUInt8(e->value.byteArr, object->alarm);
    3a64:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
    3a68:	e7d7      	b.n	3a1a <cosem_getmMbusClient+0x102>
    else if (e->index == 13 && object->base.version != 0)
    3a6a:	2b0d      	cmp	r3, #13
    3a6c:	d103      	bne.n	3a76 <cosem_getmMbusClient+0x15e>
    3a6e:	78b3      	ldrb	r3, [r6, #2]
    3a70:	b16b      	cbz	r3, 3a8e <cosem_getmMbusClient+0x176>
        ret = cosem_setUInt16(e->value.byteArr, object->configuration);
    3a72:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
    3a74:	e7dc      	b.n	3a30 <cosem_getmMbusClient+0x118>
    else if (e->index == 14 && object->base.version != 0)
    3a76:	2b0e      	cmp	r3, #14
    3a78:	d109      	bne.n	3a8e <cosem_getmMbusClient+0x176>
    3a7a:	78b3      	ldrb	r3, [r6, #2]
    3a7c:	b13b      	cbz	r3, 3a8e <cosem_getmMbusClient+0x176>
        ret = cosem_setEnum(e->value.byteArr, object->encryptionKeyStatus);
    3a7e:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
    3a82:	4628      	mov	r0, r5
    3a84:	f00a febf 	bl	e806 <cosem_setEnum>
    3a88:	e754      	b.n	3934 <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    3a8a:	463c      	mov	r4, r7
    3a8c:	e75f      	b.n	394e <cosem_getmMbusClient+0x36>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    3a8e:	f44f 7481 	mov.w	r4, #258	; 0x102
    3a92:	e75c      	b.n	394e <cosem_getmMbusClient+0x36>
    3a94:	0001ee54 	.word	0x0001ee54

00003a98 <cosem_getModemConfiguration>:
}

int cosem_getModemConfiguration(
    dlmsSettings* settings,
    gxValueEventArg* e)
{
    3a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#else
    gxByteBuffer* ba;
#endif //DLMS_IGNORE_MALLOC
    gxModemConfiguration* target = ((gxModemConfiguration*)e->target);
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    3a9c:	7e0f      	ldrb	r7, [r1, #24]
    gxModemConfiguration* target = ((gxModemConfiguration*)e->target);
    3a9e:	694e      	ldr	r6, [r1, #20]
    gxByteBuffer* data = e->value.byteArr;
    3aa0:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
    3aa2:	2f02      	cmp	r7, #2
    3aa4:	d106      	bne.n	3ab4 <cosem_getModemConfiguration+0x1c>
    {
        ret = cosem_setEnum(e->value.byteArr, target->communicationSpeed);
    3aa6:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
    3aaa:	4628      	mov	r0, r5
    3aac:	f00a feab 	bl	e806 <cosem_setEnum>
                    }
#else
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
                        (ret = bb_set(data, ba->data, ba->size)) != 0)
    3ab0:	4604      	mov	r4, r0
    3ab2:	e008      	b.n	3ac6 <cosem_getModemConfiguration+0x2e>
    else if (e->index == 3)
    3ab4:	2f03      	cmp	r7, #3
    3ab6:	d15d      	bne.n	3b74 <cosem_getModemConfiguration+0xdc>
        if ((ret = cosem_setArray(data, target->initialisationStrings.size)) == 0)
    3ab8:	8af1      	ldrh	r1, [r6, #22]
    3aba:	4628      	mov	r0, r5
    3abc:	f00a fe95 	bl	e7ea <cosem_setArray>
    3ac0:	4604      	mov	r4, r0
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d052      	beq.n	3b6c <cosem_getModemConfiguration+0xd4>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    3ac6:	4620      	mov	r0, r4
    3ac8:	b002      	add	sp, #8
    3aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    3ace:	aa01      	add	r2, sp, #4
    3ad0:	4640      	mov	r0, r8
    3ad2:	f00d fb1a 	bl	1110a <arr_getByIndex>
    3ad6:	2800      	cmp	r0, #0
    3ad8:	d1ea      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3ada:	2102      	movs	r1, #2
    3adc:	4628      	mov	r0, r5
    3ade:	f009 ff4e 	bl	d97e <bb_setUInt8>
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    3ae2:	2800      	cmp	r0, #0
    3ae4:	d1e4      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3ae6:	2103      	movs	r1, #3
    3ae8:	4628      	mov	r0, r5
    3aea:	f009 ff48 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3aee:	2800      	cmp	r0, #0
    3af0:	d1de      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3af2:	2109      	movs	r1, #9
    3af4:	4628      	mov	r0, r5
    3af6:	f009 ff42 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3afa:	2800      	cmp	r0, #0
    3afc:	d1d8      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
    3afe:	9b01      	ldr	r3, [sp, #4]
    3b00:	4629      	mov	r1, r5
    3b02:	88d8      	ldrh	r0, [r3, #6]
    3b04:	f017 f837 	bl	1ab76 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3b08:	2800      	cmp	r0, #0
    3b0a:	d1d1      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
    3b0c:	9b01      	ldr	r3, [sp, #4]
    3b0e:	4628      	mov	r0, r5
    3b10:	88da      	ldrh	r2, [r3, #6]
    3b12:	6819      	ldr	r1, [r3, #0]
    3b14:	f00a f819 	bl	db4a <bb_set>
                    (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
    3b18:	2800      	cmp	r0, #0
    3b1a:	d1c9      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3b1c:	2109      	movs	r1, #9
    3b1e:	4628      	mov	r0, r5
    3b20:	f009 ff2d 	bl	d97e <bb_setUInt8>
                    (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
    3b24:	2800      	cmp	r0, #0
    3b26:	d1c3      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
    3b28:	9b01      	ldr	r3, [sp, #4]
    3b2a:	4629      	mov	r1, r5
    3b2c:	8a58      	ldrh	r0, [r3, #18]
    3b2e:	f017 f822 	bl	1ab76 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3b32:	2800      	cmp	r0, #0
    3b34:	d1bc      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
    3b36:	9b01      	ldr	r3, [sp, #4]
    3b38:	4628      	mov	r0, r5
    3b3a:	8a5a      	ldrh	r2, [r3, #18]
    3b3c:	68d9      	ldr	r1, [r3, #12]
    3b3e:	f00a f804 	bl	db4a <bb_set>
                    (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
    3b42:	2800      	cmp	r0, #0
    3b44:	d1b4      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3b46:	2112      	movs	r1, #18
    3b48:	4628      	mov	r0, r5
    3b4a:	f009 ff18 	bl	d97e <bb_setUInt8>
                    (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
    3b4e:	2800      	cmp	r0, #0
    3b50:	d1ae      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt16(data, mi->delay)) != 0)
    3b52:	9b01      	ldr	r3, [sp, #4]
    3b54:	4628      	mov	r0, r5
    3b56:	8b19      	ldrh	r1, [r3, #24]
    3b58:	f009 ff33 	bl	d9c2 <bb_setUInt16>
    3b5c:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3b5e:	2800      	cmp	r0, #0
    3b60:	d1a6      	bne.n	3ab0 <cosem_getModemConfiguration+0x18>
            for (pos = 0; pos != target->initialisationStrings.size; ++pos)
    3b62:	8af3      	ldrh	r3, [r6, #22]
    3b64:	b2b9      	uxth	r1, r7
    3b66:	428b      	cmp	r3, r1
    3b68:	d1b1      	bne.n	3ace <cosem_getModemConfiguration+0x36>
    3b6a:	e7ac      	b.n	3ac6 <cosem_getModemConfiguration+0x2e>
    3b6c:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    3b6e:	f106 0810 	add.w	r8, r6, #16
    3b72:	e7f6      	b.n	3b62 <cosem_getModemConfiguration+0xca>
    else if (e->index == 4)
    3b74:	2f04      	cmp	r7, #4
    3b76:	f040 80bf 	bne.w	3cf8 <cosem_getModemConfiguration+0x260>
        if (settings->server && target->modemProfile.size == 0)
    3b7a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    3b7e:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    3b80:	2b00      	cmp	r3, #0
    3b82:	f000 8089 	beq.w	3c98 <cosem_getModemConfiguration+0x200>
    3b86:	2900      	cmp	r1, #0
    3b88:	f040 8086 	bne.w	3c98 <cosem_getModemConfiguration+0x200>
            if ((ret = cosem_setArray(data, 17)) != 0 ||
    3b8c:	2111      	movs	r1, #17
    3b8e:	4628      	mov	r0, r5
    3b90:	f00a fe2b 	bl	e7ea <cosem_setArray>
    3b94:	4604      	mov	r4, r0
    3b96:	2800      	cmp	r0, #0
    3b98:	d195      	bne.n	3ac6 <cosem_getModemConfiguration+0x2e>
                (ret = cosem_add(data, "OK", 2) != 0) ||
    3b9a:	495a      	ldr	r1, [pc, #360]	; (3d04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26c>)
    3b9c:	2202      	movs	r2, #2
    3b9e:	4628      	mov	r0, r5
    3ba0:	f00e fe85 	bl	128ae <cosem_add>
            if ((ret = cosem_setArray(data, 17)) != 0 ||
    3ba4:	2800      	cmp	r0, #0
    3ba6:	f040 80aa 	bne.w	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT", 7) != 0) ||
    3baa:	4957      	ldr	r1, [pc, #348]	; (3d08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x270>)
    3bac:	2207      	movs	r2, #7
    3bae:	4628      	mov	r0, r5
    3bb0:	f00e fe7d 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "OK", 2) != 0) ||
    3bb4:	2800      	cmp	r0, #0
    3bb6:	f040 80a2 	bne.w	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "RING", 4) != 0) ||
    3bba:	4954      	ldr	r1, [pc, #336]	; (3d0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x274>)
    3bbc:	463a      	mov	r2, r7
    3bbe:	4628      	mov	r0, r5
    3bc0:	f00e fe75 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "CONNECT", 7) != 0) ||
    3bc4:	2800      	cmp	r0, #0
    3bc6:	f040 809a 	bne.w	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO CARRIER", 10) != 0) ||
    3bca:	4951      	ldr	r1, [pc, #324]	; (3d10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x278>)
    3bcc:	220a      	movs	r2, #10
    3bce:	4628      	mov	r0, r5
    3bd0:	f00e fe6d 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "RING", 4) != 0) ||
    3bd4:	2800      	cmp	r0, #0
    3bd6:	f040 8092 	bne.w	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "ERROR", 5) != 0) ||
    3bda:	494e      	ldr	r1, [pc, #312]	; (3d14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x27c>)
    3bdc:	2205      	movs	r2, #5
    3bde:	4628      	mov	r0, r5
    3be0:	f00e fe65 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "NO CARRIER", 10) != 0) ||
    3be4:	2800      	cmp	r0, #0
    3be6:	f040 808a 	bne.w	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 1200", 12) != 0) ||
    3bea:	494b      	ldr	r1, [pc, #300]	; (3d18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x280>)
    3bec:	220c      	movs	r2, #12
    3bee:	4628      	mov	r0, r5
    3bf0:	f00e fe5d 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "ERROR", 5) != 0) ||
    3bf4:	2800      	cmp	r0, #0
    3bf6:	f040 8082 	bne.w	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO DIAL TONE", 12) != 0) ||
    3bfa:	4948      	ldr	r1, [pc, #288]	; (3d1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x284>)
    3bfc:	220c      	movs	r2, #12
    3bfe:	4628      	mov	r0, r5
    3c00:	f00e fe55 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "CONNECT 1200", 12) != 0) ||
    3c04:	2800      	cmp	r0, #0
    3c06:	d17a      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "BUSY", 4) != 0) ||
    3c08:	4945      	ldr	r1, [pc, #276]	; (3d20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x288>)
    3c0a:	2204      	movs	r2, #4
    3c0c:	4628      	mov	r0, r5
    3c0e:	f00e fe4e 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "NO DIAL TONE", 12) != 0) ||
    3c12:	2800      	cmp	r0, #0
    3c14:	d173      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO ANSWER", 9) != 0) ||
    3c16:	4943      	ldr	r1, [pc, #268]	; (3d24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28c>)
    3c18:	2209      	movs	r2, #9
    3c1a:	4628      	mov	r0, r5
    3c1c:	f00e fe47 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "BUSY", 4) != 0) ||
    3c20:	2800      	cmp	r0, #0
    3c22:	d16c      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 600", 11) != 0) ||
    3c24:	4940      	ldr	r1, [pc, #256]	; (3d28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x290>)
    3c26:	220b      	movs	r2, #11
    3c28:	4628      	mov	r0, r5
    3c2a:	f00e fe40 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "NO ANSWER", 9) != 0) ||
    3c2e:	2800      	cmp	r0, #0
    3c30:	d165      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 2400", 12) != 0) ||
    3c32:	493e      	ldr	r1, [pc, #248]	; (3d2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x294>)
    3c34:	220c      	movs	r2, #12
    3c36:	4628      	mov	r0, r5
    3c38:	f00e fe39 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "CONNECT 600", 11) != 0) ||
    3c3c:	2800      	cmp	r0, #0
    3c3e:	d15e      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 4800", 12) != 0) ||
    3c40:	493b      	ldr	r1, [pc, #236]	; (3d30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x298>)
    3c42:	220c      	movs	r2, #12
    3c44:	4628      	mov	r0, r5
    3c46:	f00e fe32 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "CONNECT 2400", 12) != 0) ||
    3c4a:	2800      	cmp	r0, #0
    3c4c:	d157      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 9600", 12) != 0) ||
    3c4e:	4939      	ldr	r1, [pc, #228]	; (3d34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x29c>)
    3c50:	220c      	movs	r2, #12
    3c52:	4628      	mov	r0, r5
    3c54:	f00e fe2b 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "CONNECT 4800", 12) != 0) ||
    3c58:	2800      	cmp	r0, #0
    3c5a:	d150      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 14 400", 14) != 0) ||
    3c5c:	4936      	ldr	r1, [pc, #216]	; (3d38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a0>)
    3c5e:	220e      	movs	r2, #14
    3c60:	4628      	mov	r0, r5
    3c62:	f00e fe24 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "CONNECT 9600", 12) != 0) ||
    3c66:	2800      	cmp	r0, #0
    3c68:	d149      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 28 800", 14) != 0) ||
    3c6a:	4934      	ldr	r1, [pc, #208]	; (3d3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a4>)
    3c6c:	220e      	movs	r2, #14
    3c6e:	4628      	mov	r0, r5
    3c70:	f00e fe1d 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "CONNECT 14 400", 14) != 0) ||
    3c74:	2800      	cmp	r0, #0
    3c76:	d142      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 33 600", 14) != 0) ||
    3c78:	4931      	ldr	r1, [pc, #196]	; (3d40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a8>)
    3c7a:	220e      	movs	r2, #14
    3c7c:	4628      	mov	r0, r5
    3c7e:	f00e fe16 	bl	128ae <cosem_add>
                (ret = cosem_add(data, "CONNECT 28 800", 14) != 0) ||
    3c82:	2800      	cmp	r0, #0
    3c84:	d13b      	bne.n	3cfe <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 56 000", 14) != 0))
    3c86:	492f      	ldr	r1, [pc, #188]	; (3d44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2ac>)
    3c88:	220e      	movs	r2, #14
    3c8a:	4628      	mov	r0, r5
    3c8c:	f00e fe0f 	bl	128ae <cosem_add>
    3c90:	1e04      	subs	r4, r0, #0
    3c92:	bf18      	it	ne
    3c94:	2401      	movne	r4, #1
    3c96:	e716      	b.n	3ac6 <cosem_getModemConfiguration+0x2e>
            if ((ret = cosem_setArray(data, target->modemProfile.size)) == 0)
    3c98:	4628      	mov	r0, r5
    3c9a:	f00a fda6 	bl	e7ea <cosem_setArray>
    3c9e:	4604      	mov	r4, r0
    3ca0:	2800      	cmp	r0, #0
    3ca2:	f47f af10 	bne.w	3ac6 <cosem_getModemConfiguration+0x2e>
    3ca6:	4607      	mov	r7, r0
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
    3ca8:	f106 081c 	add.w	r8, r6, #28
    3cac:	e01f      	b.n	3cee <cosem_getModemConfiguration+0x256>
    3cae:	aa01      	add	r2, sp, #4
    3cb0:	4640      	mov	r0, r8
    3cb2:	f00d fa2a 	bl	1110a <arr_getByIndex>
    3cb6:	2800      	cmp	r0, #0
    3cb8:	f47f aefa 	bne.w	3ab0 <cosem_getModemConfiguration+0x18>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3cbc:	2109      	movs	r1, #9
    3cbe:	4628      	mov	r0, r5
    3cc0:	f009 fe5d 	bl	d97e <bb_setUInt8>
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
    3cc4:	2800      	cmp	r0, #0
    3cc6:	f47f aef3 	bne.w	3ab0 <cosem_getModemConfiguration+0x18>
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
    3cca:	9b01      	ldr	r3, [sp, #4]
    3ccc:	4629      	mov	r1, r5
    3cce:	88d8      	ldrh	r0, [r3, #6]
    3cd0:	f016 ff51 	bl	1ab76 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3cd4:	2800      	cmp	r0, #0
    3cd6:	f47f aeeb 	bne.w	3ab0 <cosem_getModemConfiguration+0x18>
                        (ret = bb_set(data, ba->data, ba->size)) != 0)
    3cda:	9b01      	ldr	r3, [sp, #4]
    3cdc:	4628      	mov	r0, r5
    3cde:	88da      	ldrh	r2, [r3, #6]
    3ce0:	6819      	ldr	r1, [r3, #0]
    3ce2:	f009 ff32 	bl	db4a <bb_set>
    3ce6:	3701      	adds	r7, #1
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
    3ce8:	2800      	cmp	r0, #0
    3cea:	f47f aee1 	bne.w	3ab0 <cosem_getModemConfiguration+0x18>
                for (pos = 0; pos != target->modemProfile.size; ++pos)
    3cee:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    3cf0:	b2b9      	uxth	r1, r7
    3cf2:	428b      	cmp	r3, r1
    3cf4:	d1db      	bne.n	3cae <cosem_getModemConfiguration+0x216>
    3cf6:	e6e6      	b.n	3ac6 <cosem_getModemConfiguration+0x2e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3cf8:	f44f 7481 	mov.w	r4, #258	; 0x102
    3cfc:	e6e3      	b.n	3ac6 <cosem_getModemConfiguration+0x2e>
                (ret = cosem_add(data, "CONNECT 33 600", 14) != 0) ||
    3cfe:	2401      	movs	r4, #1
    3d00:	e6e1      	b.n	3ac6 <cosem_getModemConfiguration+0x2e>
    3d02:	bf00      	nop
    3d04:	0001ed9b 	.word	0x0001ed9b
    3d08:	0001ed9e 	.word	0x0001ed9e
    3d0c:	0001eda6 	.word	0x0001eda6
    3d10:	0001edab 	.word	0x0001edab
    3d14:	0001edb6 	.word	0x0001edb6
    3d18:	0001edbc 	.word	0x0001edbc
    3d1c:	0001edc9 	.word	0x0001edc9
    3d20:	0001edd6 	.word	0x0001edd6
    3d24:	0001eddb 	.word	0x0001eddb
    3d28:	0001ede5 	.word	0x0001ede5
    3d2c:	0001edf1 	.word	0x0001edf1
    3d30:	0001edfe 	.word	0x0001edfe
    3d34:	0001ee0b 	.word	0x0001ee0b
    3d38:	0001ee18 	.word	0x0001ee18
    3d3c:	0001ee27 	.word	0x0001ee27
    3d40:	0001ee36 	.word	0x0001ee36
    3d44:	0001ee45 	.word	0x0001ee45

00003d48 <cosem_getPppSetup>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
int cosem_getPppSetup(
    gxValueEventArg* e)
{
    3d48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t pos;
    gxpppSetupLcpOption* lcpItem;
    gxpppSetupIPCPOption* ipcpItem;
    gxPppSetup* object = (gxPppSetup*)e->target;
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    3d4c:	7e03      	ldrb	r3, [r0, #24]
    gxPppSetup* object = (gxPppSetup*)e->target;
    3d4e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3d50:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    3d52:	2b02      	cmp	r3, #2
    3d54:	d10a      	bne.n	3d6c <cosem_getPppSetup+0x24>
#else
        ret = cosem_setOctetString2(e->value.byteArr, object->PHYReference, sizeof(object->PHYReference));
#endif //DLMS_IGNORE_OBJECT_POINTERS
#else
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->phy == NULL)
    3d56:	69f1      	ldr	r1, [r6, #28]
        {
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3d58:	2206      	movs	r2, #6
        if (object->phy == NULL)
    3d5a:	b929      	cbnz	r1, 3d68 <cosem_getPppSetup+0x20>
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3d5c:	4981      	ldr	r1, [pc, #516]	; (3f64 <cosem_getPppSetup+0x21c>)
        }
        else
        {
            ret = cosem_setOctetString2(e->value.byteArr, object->phy->logicalName, 6);
    3d5e:	4628      	mov	r0, r5
    3d60:	f00a fcb9 	bl	e6d6 <cosem_setOctetString2>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
                //Add pw.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
                (ret = bb_set2(data, &object->password, 0, bb_size(&object->password))) != 0)
    3d64:	4604      	mov	r4, r0
    3d66:	e00a      	b.n	3d7e <cosem_getPppSetup+0x36>
            ret = cosem_setOctetString2(e->value.byteArr, object->phy->logicalName, 6);
    3d68:	4411      	add	r1, r2
    3d6a:	e7f8      	b.n	3d5e <cosem_getPppSetup+0x16>
    else if (e->index == 3)
    3d6c:	2b03      	cmp	r3, #3
    3d6e:	d150      	bne.n	3e12 <cosem_getPppSetup+0xca>
        if ((ret = cosem_setArray(data, object->lcpOptions.size)) == 0)
    3d70:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
    3d72:	4628      	mov	r0, r5
    3d74:	f00a fd39 	bl	e7ea <cosem_setArray>
    3d78:	4604      	mov	r4, r0
    3d7a:	2800      	cmp	r0, #0
    3d7c:	d045      	beq.n	3e0a <cosem_getPppSetup+0xc2>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    3d7e:	4620      	mov	r0, r4
    3d80:	b002      	add	sp, #8
    3d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3d86:	aa01      	add	r2, sp, #4
    3d88:	4640      	mov	r0, r8
    3d8a:	f00d f9be 	bl	1110a <arr_getByIndex>
    3d8e:	4604      	mov	r4, r0
    3d90:	2800      	cmp	r0, #0
    3d92:	d1f4      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3d94:	2102      	movs	r1, #2
    3d96:	4628      	mov	r0, r5
    3d98:	f009 fdf1 	bl	d97e <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3d9c:	4604      	mov	r4, r0
    3d9e:	2800      	cmp	r0, #0
    3da0:	d1ed      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3da2:	2103      	movs	r1, #3
    3da4:	4628      	mov	r0, r5
    3da6:	f009 fdea 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3daa:	4604      	mov	r4, r0
    3dac:	2800      	cmp	r0, #0
    3dae:	d1e6      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3db0:	2111      	movs	r1, #17
    3db2:	4628      	mov	r0, r5
    3db4:	f009 fde3 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3db8:	4604      	mov	r4, r0
    3dba:	2800      	cmp	r0, #0
    3dbc:	d1df      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
    3dbe:	9b01      	ldr	r3, [sp, #4]
    3dc0:	4628      	mov	r0, r5
    3dc2:	7819      	ldrb	r1, [r3, #0]
    3dc4:	f009 fddb 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3dc8:	4604      	mov	r4, r0
    3dca:	2800      	cmp	r0, #0
    3dcc:	d1d7      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3dce:	2111      	movs	r1, #17
    3dd0:	4628      	mov	r0, r5
    3dd2:	f009 fdd4 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
    3dd6:	4604      	mov	r4, r0
    3dd8:	2800      	cmp	r0, #0
    3dda:	d1d0      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
    3ddc:	9b01      	ldr	r3, [sp, #4]
    3dde:	4628      	mov	r0, r5
    3de0:	7859      	ldrb	r1, [r3, #1]
    3de2:	f009 fdcc 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3de6:	4604      	mov	r4, r0
    3de8:	2800      	cmp	r0, #0
    3dea:	d1c8      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = var_getBytes(&lcpItem->data, data)) != 0)
    3dec:	9801      	ldr	r0, [sp, #4]
    3dee:	4629      	mov	r1, r5
    3df0:	3008      	adds	r0, #8
    3df2:	f017 fd36 	bl	1b862 <var_getBytes>
    3df6:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
    3df8:	4604      	mov	r4, r0
    3dfa:	2800      	cmp	r0, #0
    3dfc:	d1bf      	bne.n	3d7e <cosem_getPppSetup+0x36>
            for (pos = 0; pos != object->lcpOptions.size; ++pos)
    3dfe:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    3e00:	b2b9      	uxth	r1, r7
    3e02:	428b      	cmp	r3, r1
    3e04:	d1bf      	bne.n	3d86 <cosem_getPppSetup+0x3e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3e06:	2400      	movs	r4, #0
    3e08:	e7b9      	b.n	3d7e <cosem_getPppSetup+0x36>
    3e0a:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3e0c:	f106 0820 	add.w	r8, r6, #32
    3e10:	e7f5      	b.n	3dfe <cosem_getPppSetup+0xb6>
    else if (e->index == 4)
    3e12:	2b04      	cmp	r3, #4
    3e14:	d14e      	bne.n	3eb4 <cosem_getPppSetup+0x16c>
        if ((ret = cosem_setArray(data, object->ipcpOptions.size)) == 0)
    3e16:	8af1      	ldrh	r1, [r6, #22]
    3e18:	4628      	mov	r0, r5
    3e1a:	f00a fce6 	bl	e7ea <cosem_setArray>
    3e1e:	4604      	mov	r4, r0
    3e20:	2800      	cmp	r0, #0
    3e22:	d1ac      	bne.n	3d7e <cosem_getPppSetup+0x36>
    3e24:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->ipcpOptions, pos, (void**)&ipcpItem)) != 0 ||
    3e26:	f106 0810 	add.w	r8, r6, #16
    3e2a:	e03e      	b.n	3eaa <cosem_getPppSetup+0x162>
    3e2c:	aa01      	add	r2, sp, #4
    3e2e:	4640      	mov	r0, r8
    3e30:	f00d f96b 	bl	1110a <arr_getByIndex>
    3e34:	4604      	mov	r4, r0
    3e36:	2800      	cmp	r0, #0
    3e38:	d1a1      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3e3a:	2102      	movs	r1, #2
    3e3c:	4628      	mov	r0, r5
    3e3e:	f009 fd9e 	bl	d97e <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->ipcpOptions, pos, (void**)&ipcpItem)) != 0 ||
    3e42:	4604      	mov	r4, r0
    3e44:	2800      	cmp	r0, #0
    3e46:	d19a      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3e48:	2103      	movs	r1, #3
    3e4a:	4628      	mov	r0, r5
    3e4c:	f009 fd97 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3e50:	4604      	mov	r4, r0
    3e52:	2800      	cmp	r0, #0
    3e54:	d193      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3e56:	2111      	movs	r1, #17
    3e58:	4628      	mov	r0, r5
    3e5a:	f009 fd90 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3e5e:	4604      	mov	r4, r0
    3e60:	2800      	cmp	r0, #0
    3e62:	d18c      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
    3e64:	9b01      	ldr	r3, [sp, #4]
    3e66:	4628      	mov	r0, r5
    3e68:	7819      	ldrb	r1, [r3, #0]
    3e6a:	f009 fd88 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3e6e:	4604      	mov	r4, r0
    3e70:	2800      	cmp	r0, #0
    3e72:	d184      	bne.n	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3e74:	2111      	movs	r1, #17
    3e76:	4628      	mov	r0, r5
    3e78:	f009 fd81 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
    3e7c:	4604      	mov	r4, r0
    3e7e:	2800      	cmp	r0, #0
    3e80:	f47f af7d 	bne.w	3d7e <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
    3e84:	9b01      	ldr	r3, [sp, #4]
    3e86:	4628      	mov	r0, r5
    3e88:	7859      	ldrb	r1, [r3, #1]
    3e8a:	f009 fd78 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3e8e:	4604      	mov	r4, r0
    3e90:	2800      	cmp	r0, #0
    3e92:	f47f af74 	bne.w	3d7e <cosem_getPppSetup+0x36>
                    (ret = var_getBytes(&ipcpItem->data, data)) != 0)
    3e96:	9801      	ldr	r0, [sp, #4]
    3e98:	4629      	mov	r1, r5
    3e9a:	3008      	adds	r0, #8
    3e9c:	f017 fce1 	bl	1b862 <var_getBytes>
    3ea0:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
    3ea2:	4604      	mov	r4, r0
    3ea4:	2800      	cmp	r0, #0
    3ea6:	f47f af6a 	bne.w	3d7e <cosem_getPppSetup+0x36>
            for (pos = 0; pos != object->ipcpOptions.size; ++pos)
    3eaa:	8af3      	ldrh	r3, [r6, #22]
    3eac:	b2b9      	uxth	r1, r7
    3eae:	428b      	cmp	r3, r1
    3eb0:	d1bc      	bne.n	3e2c <cosem_getPppSetup+0xe4>
    3eb2:	e7a8      	b.n	3e06 <cosem_getPppSetup+0xbe>
    else if (e->index == 5)
    3eb4:	2b05      	cmp	r3, #5
    3eb6:	d152      	bne.n	3f5e <cosem_getPppSetup+0x216>
        if (bb_size(&object->userName) == 0)
    3eb8:	f106 072c 	add.w	r7, r6, #44	; 0x2c
    3ebc:	4638      	mov	r0, r7
    3ebe:	f009 fcf2 	bl	d8a6 <bb_size>
    3ec2:	4601      	mov	r1, r0
    3ec4:	b918      	cbnz	r0, 3ece <cosem_getPppSetup+0x186>
            ret = bb_setUInt8(data, DLMS_DATA_TYPE_NONE);
    3ec6:	4628      	mov	r0, r5
    3ec8:	f009 fd59 	bl	d97e <bb_setUInt8>
    3ecc:	e74a      	b.n	3d64 <cosem_getPppSetup+0x1c>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3ece:	2102      	movs	r1, #2
    3ed0:	4628      	mov	r0, r5
    3ed2:	f009 fd54 	bl	d97e <bb_setUInt8>
    3ed6:	4604      	mov	r4, r0
    3ed8:	2800      	cmp	r0, #0
    3eda:	f47f af50 	bne.w	3d7e <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, 2)) != 0 ||
    3ede:	2102      	movs	r1, #2
    3ee0:	4628      	mov	r0, r5
    3ee2:	f009 fd4c 	bl	d97e <bb_setUInt8>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3ee6:	4604      	mov	r4, r0
    3ee8:	2800      	cmp	r0, #0
    3eea:	f47f af48 	bne.w	3d7e <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3eee:	2109      	movs	r1, #9
    3ef0:	4628      	mov	r0, r5
    3ef2:	f009 fd44 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, 2)) != 0 ||
    3ef6:	4604      	mov	r4, r0
    3ef8:	2800      	cmp	r0, #0
    3efa:	f47f af40 	bne.w	3d7e <cosem_getPppSetup+0x36>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
    3efe:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    3f00:	4629      	mov	r1, r5
    3f02:	f016 fe38 	bl	1ab76 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3f06:	4604      	mov	r4, r0
    3f08:	2800      	cmp	r0, #0
    3f0a:	f47f af38 	bne.w	3d7e <cosem_getPppSetup+0x36>
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
    3f0e:	4638      	mov	r0, r7
    3f10:	f009 fcc9 	bl	d8a6 <bb_size>
    3f14:	4622      	mov	r2, r4
    3f16:	4603      	mov	r3, r0
    3f18:	4639      	mov	r1, r7
    3f1a:	4628      	mov	r0, r5
    3f1c:	f009 fe44 	bl	dba8 <bb_set2>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
    3f20:	4604      	mov	r4, r0
    3f22:	2800      	cmp	r0, #0
    3f24:	f47f af2b 	bne.w	3d7e <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3f28:	2109      	movs	r1, #9
    3f2a:	4628      	mov	r0, r5
    3f2c:	f009 fd27 	bl	d97e <bb_setUInt8>
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
    3f30:	4604      	mov	r4, r0
    3f32:	2800      	cmp	r0, #0
    3f34:	f47f af23 	bne.w	3d7e <cosem_getPppSetup+0x36>
                (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
    3f38:	8ff0      	ldrh	r0, [r6, #62]	; 0x3e
    3f3a:	4629      	mov	r1, r5
    3f3c:	f016 fe1b 	bl	1ab76 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3f40:	4604      	mov	r4, r0
    3f42:	2800      	cmp	r0, #0
    3f44:	f47f af1b 	bne.w	3d7e <cosem_getPppSetup+0x36>
                (ret = bb_set2(data, &object->password, 0, bb_size(&object->password))) != 0)
    3f48:	3638      	adds	r6, #56	; 0x38
    3f4a:	4630      	mov	r0, r6
    3f4c:	f009 fcab 	bl	d8a6 <bb_size>
    3f50:	4622      	mov	r2, r4
    3f52:	4603      	mov	r3, r0
    3f54:	4631      	mov	r1, r6
    3f56:	4628      	mov	r0, r5
    3f58:	f009 fe26 	bl	dba8 <bb_set2>
    3f5c:	e702      	b.n	3d64 <cosem_getPppSetup+0x1c>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3f5e:	f44f 7481 	mov.w	r4, #258	; 0x102
    3f62:	e70c      	b.n	3d7e <cosem_getPppSetup+0x36>
    3f64:	0001ee54 	.word	0x0001ee54

00003f68 <cosem_getParameterMonitor>:
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC

#ifndef DLMS_IGNORE_PARAMETER_MONITOR
int cosem_getParameterMonitor(
    gxValueEventArg* e)
{
    3f68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint16_t pos;
    gxByteBuffer* data = e->value.byteArr;
    gxParameterMonitor* object = (gxParameterMonitor*)e->target;
    switch (e->index)
    3f6c:	7e01      	ldrb	r1, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
    3f6e:	6885      	ldr	r5, [r0, #8]
    gxParameterMonitor* object = (gxParameterMonitor*)e->target;
    3f70:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
    3f72:	2903      	cmp	r1, #3
    3f74:	d047      	beq.n	4006 <cosem_getParameterMonitor+0x9e>
    3f76:	2904      	cmp	r1, #4
    3f78:	d04b      	beq.n	4012 <cosem_getParameterMonitor+0xaa>
    3f7a:	2902      	cmp	r1, #2
    3f7c:	f040 8083 	bne.w	4086 <cosem_getParameterMonitor+0x11e>
    {
    case 2:
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3f80:	4628      	mov	r0, r5
    3f82:	f009 fcfc 	bl	d97e <bb_setUInt8>
    3f86:	4604      	mov	r4, r0
    3f88:	2800      	cmp	r0, #0
    3f8a:	d149      	bne.n	4020 <cosem_getParameterMonitor+0xb8>
            (ret = bb_setUInt8(data, 4)) != 0)
    3f8c:	2104      	movs	r1, #4
    3f8e:	4628      	mov	r0, r5
    3f90:	f009 fcf5 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3f94:	4604      	mov	r4, r0
    3f96:	2800      	cmp	r0, #0
    3f98:	d142      	bne.n	4020 <cosem_getParameterMonitor+0xb8>
        {
            return ret;
        }
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->changedParameter.target == NULL)
    3f9a:	6933      	ldr	r3, [r6, #16]
    3f9c:	b9cb      	cbnz	r3, 3fd2 <cosem_getParameterMonitor+0x6a>
        {
            if ((ret = cosem_setUInt16(data, 0)) != 0 ||
    3f9e:	4601      	mov	r1, r0
    3fa0:	4628      	mov	r0, r5
    3fa2:	f00a fbc7 	bl	e734 <cosem_setUInt16>
    3fa6:	4604      	mov	r4, r0
    3fa8:	2800      	cmp	r0, #0
    3faa:	d139      	bne.n	4020 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setOctetString2(data, EMPTY_LN, 6)) != 0 ||
    3fac:	4937      	ldr	r1, [pc, #220]	; (408c <cosem_getParameterMonitor+0x124>)
    3fae:	2206      	movs	r2, #6
    3fb0:	4628      	mov	r0, r5
    3fb2:	f00a fb90 	bl	e6d6 <cosem_setOctetString2>
            if ((ret = cosem_setUInt16(data, 0)) != 0 ||
    3fb6:	4604      	mov	r4, r0
    3fb8:	bb90      	cbnz	r0, 4020 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setInt8(data, 0)) != 0 ||
    3fba:	4601      	mov	r1, r0
    3fbc:	4628      	mov	r0, r5
    3fbe:	f00a fbd5 	bl	e76c <cosem_setInt8>
                (ret = cosem_setOctetString2(data, EMPTY_LN, 6)) != 0 ||
    3fc2:	4604      	mov	r4, r0
    3fc4:	bb60      	cbnz	r0, 4020 <cosem_getParameterMonitor+0xb8>
                (ret = bb_setUInt8(data, 0)) != 0)
    3fc6:	4601      	mov	r1, r0
    3fc8:	4628      	mov	r0, r5
    3fca:	f009 fcd8 	bl	d97e <bb_setUInt8>
                    //Type.
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
                    //LN
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
                    //attributeIndex
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0)
    3fce:	4604      	mov	r4, r0
                }
#endif //DLMS_IGNORE_MALLOC
            }
        }
    }
    break;
    3fd0:	e026      	b.n	4020 <cosem_getParameterMonitor+0xb8>
            if ((ret = cosem_setUInt16(data, object->changedParameter.target->objectType)) != 0 ||
    3fd2:	8819      	ldrh	r1, [r3, #0]
    3fd4:	4628      	mov	r0, r5
    3fd6:	f00a fbad 	bl	e734 <cosem_setUInt16>
    3fda:	4604      	mov	r4, r0
    3fdc:	bb00      	cbnz	r0, 4020 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setOctetString2(data, object->changedParameter.target->logicalName, 6)) != 0 ||
    3fde:	6931      	ldr	r1, [r6, #16]
    3fe0:	2206      	movs	r2, #6
    3fe2:	4411      	add	r1, r2
    3fe4:	4628      	mov	r0, r5
    3fe6:	f00a fb76 	bl	e6d6 <cosem_setOctetString2>
            if ((ret = cosem_setUInt16(data, object->changedParameter.target->objectType)) != 0 ||
    3fea:	4604      	mov	r4, r0
    3fec:	b9c0      	cbnz	r0, 4020 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setInt8(data, object->changedParameter.attributeIndex)) != 0 ||
    3fee:	7d31      	ldrb	r1, [r6, #20]
    3ff0:	4628      	mov	r0, r5
    3ff2:	f00a fbbb 	bl	e76c <cosem_setInt8>
                (ret = cosem_setOctetString2(data, object->changedParameter.target->logicalName, 6)) != 0 ||
    3ff6:	4604      	mov	r4, r0
    3ff8:	b990      	cbnz	r0, 4020 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setVariant(data, &object->changedParameter.value)) != 0)
    3ffa:	f106 0118 	add.w	r1, r6, #24
    3ffe:	4628      	mov	r0, r5
    4000:	f00a fbde 	bl	e7c0 <cosem_setVariant>
    4004:	e7e3      	b.n	3fce <cosem_getParameterMonitor+0x66>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->captureTime);
    4006:	f106 0128 	add.w	r1, r6, #40	; 0x28
    400a:	4628      	mov	r0, r5
    400c:	f00a fa91 	bl	e532 <cosem_setDateTimeAsOctetString>
    4010:	e7dd      	b.n	3fce <cosem_getParameterMonitor+0x66>
        if ((ret = cosem_setArray(data, object->parameters.size)) == 0)
    4012:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
    4014:	4628      	mov	r0, r5
    4016:	f00a fbe8 	bl	e7ea <cosem_setArray>
    401a:	4604      	mov	r4, r0
    401c:	2800      	cmp	r0, #0
    401e:	d02e      	beq.n	407e <cosem_getParameterMonitor+0x116>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
    4020:	4620      	mov	r0, r4
    4022:	b002      	add	sp, #8
    4024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    4028:	aa01      	add	r2, sp, #4
    402a:	4640      	mov	r0, r8
    402c:	f00d f86d 	bl	1110a <arr_getByIndex>
    4030:	2800      	cmp	r0, #0
    4032:	d1cc      	bne.n	3fce <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
    4034:	2103      	movs	r1, #3
    4036:	4628      	mov	r0, r5
    4038:	f00a fbc9 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    403c:	2800      	cmp	r0, #0
    403e:	d1c6      	bne.n	3fce <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
    4040:	9b01      	ldr	r3, [sp, #4]
    4042:	681b      	ldr	r3, [r3, #0]
    4044:	4628      	mov	r0, r5
    4046:	8819      	ldrh	r1, [r3, #0]
    4048:	f00a fb74 	bl	e734 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
    404c:	2800      	cmp	r0, #0
    404e:	d1be      	bne.n	3fce <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
    4050:	9b01      	ldr	r3, [sp, #4]
    4052:	6819      	ldr	r1, [r3, #0]
    4054:	2206      	movs	r2, #6
    4056:	4411      	add	r1, r2
    4058:	4628      	mov	r0, r5
    405a:	f00a fb3c 	bl	e6d6 <cosem_setOctetString2>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
    405e:	2800      	cmp	r0, #0
    4060:	d1b5      	bne.n	3fce <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0)
    4062:	9b01      	ldr	r3, [sp, #4]
    4064:	685b      	ldr	r3, [r3, #4]
    4066:	4628      	mov	r0, r5
    4068:	7819      	ldrb	r1, [r3, #0]
    406a:	f00a fb7f 	bl	e76c <cosem_setInt8>
    406e:	3701      	adds	r7, #1
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
    4070:	2800      	cmp	r0, #0
    4072:	d1ac      	bne.n	3fce <cosem_getParameterMonitor+0x66>
            for (pos = 0; pos != object->parameters.size; ++pos)
    4074:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
    4076:	b2b9      	uxth	r1, r7
    4078:	428b      	cmp	r3, r1
    407a:	d1d5      	bne.n	4028 <cosem_getParameterMonitor+0xc0>
    407c:	e7d0      	b.n	4020 <cosem_getParameterMonitor+0xb8>
    407e:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    4080:	f106 0834 	add.w	r8, r6, #52	; 0x34
    4084:	e7f6      	b.n	4074 <cosem_getParameterMonitor+0x10c>
    switch (e->index)
    4086:	f44f 7481 	mov.w	r4, #258	; 0x102
    408a:	e7c9      	b.n	4020 <cosem_getParameterMonitor+0xb8>
    408c:	0001ee54 	.word	0x0001ee54

00004090 <obj_getLogicalName>:
#include "../include/gxobjects.h"
#include "../include/objectarray.h"

const unsigned char* obj_getLogicalName(gxObject* target)
{
    if (target == NULL)
    4090:	b108      	cbz	r0, 4096 <obj_getLogicalName+0x6>
    {
        return EMPTY_LN;
    }
    return target->logicalName;
    4092:	3006      	adds	r0, #6
    4094:	4770      	bx	lr
        return EMPTY_LN;
    4096:	4801      	ldr	r0, [pc, #4]	; (409c <obj_getLogicalName+0xc>)
}
    4098:	4770      	bx	lr
    409a:	bf00      	nop
    409c:	0001ee5a 	.word	0x0001ee5a

000040a0 <cosem_setProfileGeneric>:
int cosem_setProfileGeneric(
    dlmsSettings* settings,
    gxProfileGeneric* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    40a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    uint16_t pos, pos2;
    DLMS_OBJECT_TYPE type;
    dlmsVARIANT* tmp, * row, * data;
    variantArray* va;
    if (index == 2)
    40a4:	2a02      	cmp	r2, #2
{
    40a6:	b08b      	sub	sp, #44	; 0x2c
    40a8:	4680      	mov	r8, r0
    40aa:	460c      	mov	r4, r1
    40ac:	461e      	mov	r6, r3
    if (index == 2)
    40ae:	f040 80e5 	bne.w	427c <cosem_setProfileGeneric+0x1dc>
    {
        static unsigned char UNIX_TIME[6] = { 0, 0, 1, 1, 0, 255 };
        if (object->captureObjects.size == 0)
    40b2:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
    40b4:	b92b      	cbnz	r3, 40c2 <cosem_setProfileGeneric+0x22>
                    {
                        uint16_t cCount = row->Arr->size;
                        if (cCount > object->captureObjects.size)
                        {
                            //Number of columns do not match.
                            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    40b6:	f44f 7281 	mov.w	r2, #258	; 0x102
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    40ba:	4610      	mov	r0, r2
    40bc:	b00b      	add	sp, #44	; 0x2c
    40be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ret = obj_clearProfileGenericBuffer(&object->buffer)) == 0)
    40c2:	f101 0710 	add.w	r7, r1, #16
    40c6:	4638      	mov	r0, r7
    40c8:	f010 faf4 	bl	146b4 <obj_clearProfileGenericBuffer>
    40cc:	4605      	mov	r5, r0
    40ce:	bb40      	cbnz	r0, 4122 <cosem_setProfileGeneric+0x82>
            if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
    40d0:	7833      	ldrb	r3, [r6, #0]
    40d2:	2b09      	cmp	r3, #9
    40d4:	d125      	bne.n	4122 <cosem_setProfileGeneric+0x82>
                uint16_t rIndex, rCount = arr_getCapacity(&object->buffer);
    40d6:	4638      	mov	r0, r7
    40d8:	f00c ffb0 	bl	1103c <arr_getCapacity>
                if ((ret = cosem_checkArray(value->byteArr, &rCount)) == 0)
    40dc:	a905      	add	r1, sp, #20
                uint16_t rIndex, rCount = arr_getCapacity(&object->buffer);
    40de:	f8ad 0014 	strh.w	r0, [sp, #20]
                if ((ret = cosem_checkArray(value->byteArr, &rCount)) == 0)
    40e2:	68b0      	ldr	r0, [r6, #8]
    40e4:	f00a f9fa 	bl	e4dc <cosem_checkArray>
    40e8:	4605      	mov	r5, r0
    40ea:	b9d0      	cbnz	r0, 4122 <cosem_setProfileGeneric+0x82>
                    object->buffer.size = rCount;
    40ec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    40f0:	82e3      	strh	r3, [r4, #22]
                    if (rCount != 0 && (ret = arr_getByIndex(&object->buffer, 0, (void**)&row)) == 0)
    40f2:	b1b3      	cbz	r3, 4122 <cosem_setProfileGeneric+0x82>
    40f4:	4601      	mov	r1, r0
    40f6:	aa06      	add	r2, sp, #24
    40f8:	4638      	mov	r0, r7
    40fa:	f00d f806 	bl	1110a <arr_getByIndex>
    40fe:	2800      	cmp	r0, #0
    4100:	d138      	bne.n	4174 <cosem_setProfileGeneric+0xd4>
                        uint16_t cCount = row->Arr->size;
    4102:	9b06      	ldr	r3, [sp, #24]
    4104:	689b      	ldr	r3, [r3, #8]
    4106:	f8b3 9006 	ldrh.w	r9, [r3, #6]
                        if (cCount > object->captureObjects.size)
    410a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    410c:	454b      	cmp	r3, r9
    410e:	d3d2      	bcc.n	40b6 <cosem_setProfileGeneric+0x16>
    4110:	46aa      	mov	sl, r5
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    4112:	fa5f f989 	uxtb.w	r9, r9
                        for (rIndex = 0; rIndex != rCount; ++rIndex)
    4116:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    411a:	fa1f f18a 	uxth.w	r1, sl
    411e:	428b      	cmp	r3, r1
    4120:	d11b      	bne.n	415a <cosem_setProfileGeneric+0xba>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
    4122:	7833      	ldrb	r3, [r6, #0]
    4124:	2b01      	cmp	r3, #1
    4126:	d10e      	bne.n	4146 <cosem_setProfileGeneric+0xa6>
            arr_capacity(&object->buffer, value->Arr->size);
    4128:	68b3      	ldr	r3, [r6, #8]
                            memcmp(obj->logicalName, UNIX_TIME, 6) == 0)
    412a:	f8df b290 	ldr.w	fp, [pc, #656]	; 43bc <cosem_setProfileGeneric+0x31c>
            arr_capacity(&object->buffer, value->Arr->size);
    412e:	88d9      	ldrh	r1, [r3, #6]
    4130:	4638      	mov	r0, r7
    4132:	f00c ff87 	bl	11044 <arr_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
    4136:	f04f 0900 	mov.w	r9, #0
    413a:	68b0      	ldr	r0, [r6, #8]
    413c:	88c2      	ldrh	r2, [r0, #6]
    413e:	fa1f f389 	uxth.w	r3, r9
    4142:	429a      	cmp	r2, r3
    4144:	d118      	bne.n	4178 <cosem_setProfileGeneric+0xd8>
        if (settings->server)
    4146:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
    414a:	8ae1      	ldrh	r1, [r4, #22]
    414c:	b103      	cbz	r3, 4150 <cosem_setProfileGeneric+0xb0>
            object->entriesInUse = object->buffer.size;
    414e:	63a1      	str	r1, [r4, #56]	; 0x38
        arr_capacity(&object->buffer, object->buffer.size);
    4150:	4638      	mov	r0, r7
    4152:	f00c ff77 	bl	11044 <arr_capacity>
                ret = va_getByIndex(value->Arr, pos, &row);
    4156:	462a      	mov	r2, r5
    4158:	e7af      	b.n	40ba <cosem_setProfileGeneric+0x1a>
                            if ((ret = arr_getByIndex(&object->buffer, rIndex, (void**)&row)) != 0 ||
    415a:	aa06      	add	r2, sp, #24
    415c:	4638      	mov	r0, r7
    415e:	f00c ffd4 	bl	1110a <arr_getByIndex>
    4162:	b938      	cbnz	r0, 4174 <cosem_setProfileGeneric+0xd4>
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    4164:	68b0      	ldr	r0, [r6, #8]
    4166:	4649      	mov	r1, r9
    4168:	f00a f989 	bl	e47e <cosem_checkStructure>
    416c:	f10a 0a01 	add.w	sl, sl, #1
                            if ((ret = arr_getByIndex(&object->buffer, rIndex, (void**)&row)) != 0 ||
    4170:	2800      	cmp	r0, #0
    4172:	d0d0      	beq.n	4116 <cosem_setProfileGeneric+0x76>
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    4174:	4605      	mov	r5, r0
    4176:	e7d4      	b.n	4122 <cosem_setProfileGeneric+0x82>
                ret = va_getByIndex(value->Arr, pos, &row);
    4178:	aa03      	add	r2, sp, #12
    417a:	fa1f f189 	uxth.w	r1, r9
    417e:	f017 fa30 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
    4182:	4605      	mov	r5, r0
    4184:	2800      	cmp	r0, #0
    4186:	d1e6      	bne.n	4156 <cosem_setProfileGeneric+0xb6>
                if (row->Arr->size != object->captureObjects.size)
    4188:	9b03      	ldr	r3, [sp, #12]
    418a:	689b      	ldr	r3, [r3, #8]
    418c:	88da      	ldrh	r2, [r3, #6]
    418e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    4190:	429a      	cmp	r2, r3
    4192:	d190      	bne.n	40b6 <cosem_setProfileGeneric+0x16>
    4194:	4682      	mov	sl, r0
                for (pos2 = 0; pos2 < row->Arr->size; ++pos2)
    4196:	9a03      	ldr	r2, [sp, #12]
    4198:	6890      	ldr	r0, [r2, #8]
    419a:	88c2      	ldrh	r2, [r0, #6]
    419c:	fa1f f38a 	uxth.w	r3, sl
    41a0:	429a      	cmp	r2, r3
    41a2:	d811      	bhi.n	41c8 <cosem_setProfileGeneric+0x128>
                va = (variantArray*)gxmalloc(sizeof(variantArray));
    41a4:	2008      	movs	r0, #8
    41a6:	f008 fb5d 	bl	c864 <malloc>
    41aa:	4682      	mov	sl, r0
                va_init(va);
    41ac:	f017 f921 	bl	1b3f2 <va_init>
                va_attach2(va, row->Arr);
    41b0:	9b03      	ldr	r3, [sp, #12]
    41b2:	4650      	mov	r0, sl
    41b4:	6899      	ldr	r1, [r3, #8]
    41b6:	f017 fa0a 	bl	1b5ce <va_attach2>
                arr_push(&object->buffer, va);
    41ba:	4651      	mov	r1, sl
    41bc:	4638      	mov	r0, r7
    41be:	f00c ff67 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
    41c2:	f109 0901 	add.w	r9, r9, #1
    41c6:	e7b8      	b.n	413a <cosem_setProfileGeneric+0x9a>
                    ret = va_getByIndex(row->Arr, pos2, &data);
    41c8:	aa04      	add	r2, sp, #16
    41ca:	fa1f f18a 	uxth.w	r1, sl
    41ce:	9301      	str	r3, [sp, #4]
    41d0:	f017 fa07 	bl	1b5e2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
    41d4:	4602      	mov	r2, r0
    41d6:	2800      	cmp	r0, #0
    41d8:	f47f af6f 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
                    if (data->vt == DLMS_DATA_TYPE_OCTET_STRING || data->vt == DLMS_DATA_TYPE_UINT32)
    41dc:	9a04      	ldr	r2, [sp, #16]
    41de:	9b01      	ldr	r3, [sp, #4]
    41e0:	7812      	ldrb	r2, [r2, #0]
    41e2:	2a09      	cmp	r2, #9
    41e4:	d001      	beq.n	41ea <cosem_setProfileGeneric+0x14a>
    41e6:	2a06      	cmp	r2, #6
    41e8:	d12c      	bne.n	4244 <cosem_setProfileGeneric+0x1a4>
                        if ((ret = arr_getByIndex(&object->captureObjects, pos2, (void**)&k)) != 0)
    41ea:	aa05      	add	r2, sp, #20
    41ec:	4619      	mov	r1, r3
    41ee:	f104 001c 	add.w	r0, r4, #28
    41f2:	f00c ff8a 	bl	1110a <arr_getByIndex>
    41f6:	4602      	mov	r2, r0
    41f8:	2800      	cmp	r0, #0
    41fa:	f47f af5e 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    41fe:	9a04      	ldr	r2, [sp, #16]
                        obj = (gxObject*)k->key;
    4200:	9b05      	ldr	r3, [sp, #20]
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    4202:	7812      	ldrb	r2, [r2, #0]
    4204:	2a09      	cmp	r2, #9
                        t = (gxTarget*)k->value;
    4206:	e9d3 0300 	ldrd	r0, r3, [r3]
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    420a:	d11e      	bne.n	424a <cosem_setProfileGeneric+0x1aa>
    420c:	8802      	ldrh	r2, [r0, #0]
    420e:	2a08      	cmp	r2, #8
    4210:	d118      	bne.n	4244 <cosem_setProfileGeneric+0x1a4>
    4212:	f993 3000 	ldrsb.w	r3, [r3]
    4216:	2b02      	cmp	r3, #2
    4218:	d114      	bne.n	4244 <cosem_setProfileGeneric+0x1a4>
                            var_init(&tmp3);
    421a:	a806      	add	r0, sp, #24
    421c:	f017 f807 	bl	1b22e <var_init>
                            var_attach(&tmp3, data->byteArr);
    4220:	9b04      	ldr	r3, [sp, #16]
    4222:	a806      	add	r0, sp, #24
    4224:	6899      	ldr	r1, [r3, #8]
    4226:	f017 fbf5 	bl	1ba14 <var_attach>
                            ret = dlms_changeType(tmp3.byteArr, DLMS_DATA_TYPE_DATETIME, data);
    422a:	9a04      	ldr	r2, [sp, #16]
    422c:	9808      	ldr	r0, [sp, #32]
    422e:	2119      	movs	r1, #25
    4230:	f00c fbda 	bl	109e8 <dlms_changeType>
    4234:	9001      	str	r0, [sp, #4]
                            var_clear(&tmp3);
    4236:	a806      	add	r0, sp, #24
    4238:	f017 f955 	bl	1b4e6 <var_clear>
                            if (ret != 0)
    423c:	9a01      	ldr	r2, [sp, #4]
    423e:	2a00      	cmp	r2, #0
    4240:	f47f af3b 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
                for (pos2 = 0; pos2 < row->Arr->size; ++pos2)
    4244:	f10a 0a01 	add.w	sl, sl, #1
    4248:	e7a5      	b.n	4196 <cosem_setProfileGeneric+0xf6>
                        else if (data->vt == DLMS_DATA_TYPE_UINT32 && obj->objectType == DLMS_OBJECT_TYPE_DATA && t->attributeIndex == 2 &&
    424a:	2a06      	cmp	r2, #6
    424c:	d1fa      	bne.n	4244 <cosem_setProfileGeneric+0x1a4>
    424e:	8801      	ldrh	r1, [r0, #0]
    4250:	2901      	cmp	r1, #1
    4252:	d1f7      	bne.n	4244 <cosem_setProfileGeneric+0x1a4>
    4254:	f993 3000 	ldrsb.w	r3, [r3]
    4258:	2b02      	cmp	r3, #2
    425a:	d1f3      	bne.n	4244 <cosem_setProfileGeneric+0x1a4>
                            memcmp(obj->logicalName, UNIX_TIME, 6) == 0)
    425c:	4659      	mov	r1, fp
    425e:	3006      	adds	r0, #6
    4260:	f019 fb08 	bl	1d874 <memcmp>
                        else if (data->vt == DLMS_DATA_TYPE_UINT32 && obj->objectType == DLMS_OBJECT_TYPE_DATA && t->attributeIndex == 2 &&
    4264:	2800      	cmp	r0, #0
    4266:	d1ed      	bne.n	4244 <cosem_setProfileGeneric+0x1a4>
                            time_initUnix(&tmp4, data->ulVal);
    4268:	9b04      	ldr	r3, [sp, #16]
    426a:	a806      	add	r0, sp, #24
    426c:	6899      	ldr	r1, [r3, #8]
    426e:	f00a fc00 	bl	ea72 <time_initUnix>
                            var_setDateTime(data, &tmp4);
    4272:	9804      	ldr	r0, [sp, #16]
    4274:	a906      	add	r1, sp, #24
    4276:	f017 faf8 	bl	1b86a <var_setDateTime>
    427a:	e7e3      	b.n	4244 <cosem_setProfileGeneric+0x1a4>
    else if (index == 3)
    427c:	2a03      	cmp	r2, #3
    427e:	d111      	bne.n	42a4 <cosem_setProfileGeneric+0x204>
        object->entriesInUse = 0;
    4280:	2300      	movs	r3, #0
    4282:	638b      	str	r3, [r1, #56]	; 0x38
        ret = obj_clearProfileGenericBuffer(&object->buffer);
    4284:	f101 0010 	add.w	r0, r1, #16
    4288:	f010 fa14 	bl	146b4 <obj_clearProfileGenericBuffer>
        if (ret == DLMS_ERROR_CODE_OK)
    428c:	4602      	mov	r2, r0
    428e:	2800      	cmp	r0, #0
    4290:	f47f af13 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
            ret = setCaptureObjects(settings, &object->captureObjects, value);
    4294:	4632      	mov	r2, r6
    4296:	f104 011c 	add.w	r1, r4, #28
    429a:	4640      	mov	r0, r8
    429c:	f015 f85b 	bl	19356 <setCaptureObjects>
    42a0:	4602      	mov	r2, r0
    42a2:	e70a      	b.n	40ba <cosem_setProfileGeneric+0x1a>
    else if (index == 4)
    42a4:	2a04      	cmp	r2, #4
    42a6:	d105      	bne.n	42b4 <cosem_setProfileGeneric+0x214>
        object->capturePeriod = var_toInteger(value);
    42a8:	4618      	mov	r0, r3
    42aa:	f017 fb14 	bl	1b8d6 <var_toInteger>
    42ae:	62a0      	str	r0, [r4, #40]	; 0x28
    int ret = 0;
    42b0:	2200      	movs	r2, #0
    42b2:	e702      	b.n	40ba <cosem_setProfileGeneric+0x1a>
    else if (index == 5)
    42b4:	2a05      	cmp	r2, #5
    42b6:	d105      	bne.n	42c4 <cosem_setProfileGeneric+0x224>
        object->sortMethod = (DLMS_SORT_METHOD)var_toInteger(value);
    42b8:	4618      	mov	r0, r3
    42ba:	f017 fb0c 	bl	1b8d6 <var_toInteger>
    42be:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    42c2:	e7f5      	b.n	42b0 <cosem_setProfileGeneric+0x210>
    else if (index == 6)
    42c4:	2a06      	cmp	r2, #6
    42c6:	d169      	bne.n	439c <cosem_setProfileGeneric+0x2fc>
        if (value->vt == DLMS_DATA_TYPE_NONE)
    42c8:	781a      	ldrb	r2, [r3, #0]
    42ca:	b90a      	cbnz	r2, 42d0 <cosem_setProfileGeneric+0x230>
            object->sortObject = NULL;
    42cc:	630a      	str	r2, [r1, #48]	; 0x30
    42ce:	e6f4      	b.n	40ba <cosem_setProfileGeneric+0x1a>
            if (value->Arr == NULL || value->Arr->size != 4)
    42d0:	6898      	ldr	r0, [r3, #8]
    42d2:	2800      	cmp	r0, #0
    42d4:	f43f aeef 	beq.w	40b6 <cosem_setProfileGeneric+0x16>
    42d8:	88c3      	ldrh	r3, [r0, #6]
    42da:	2b04      	cmp	r3, #4
    42dc:	f47f aeeb 	bne.w	40b6 <cosem_setProfileGeneric+0x16>
            ret = va_getByIndex(value->Arr, 0, &tmp);
    42e0:	aa06      	add	r2, sp, #24
    42e2:	2100      	movs	r1, #0
    42e4:	f017 f97d 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    42e8:	4602      	mov	r2, r0
    42ea:	2800      	cmp	r0, #0
    42ec:	f47f aee5 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    42f0:	9806      	ldr	r0, [sp, #24]
    42f2:	f017 faf0 	bl	1b8d6 <var_toInteger>
            ret = va_getByIndex(value->Arr, 1, &tmp);
    42f6:	aa06      	add	r2, sp, #24
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    42f8:	4605      	mov	r5, r0
            ret = va_getByIndex(value->Arr, 1, &tmp);
    42fa:	2101      	movs	r1, #1
    42fc:	68b0      	ldr	r0, [r6, #8]
    42fe:	f017 f970 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    4302:	4602      	mov	r2, r0
    4304:	2800      	cmp	r0, #0
    4306:	f47f aed8 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
            object->sortObject = NULL;
    430a:	4627      	mov	r7, r4
    430c:	2300      	movs	r3, #0
    430e:	f847 3f30 	str.w	r3, [r7, #48]!
            ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->sortObject);
    4312:	9b06      	ldr	r3, [sp, #24]
    4314:	689a      	ldr	r2, [r3, #8]
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    4316:	b2ad      	uxth	r5, r5
            ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->sortObject);
    4318:	6812      	ldr	r2, [r2, #0]
    431a:	463b      	mov	r3, r7
    431c:	4629      	mov	r1, r5
    431e:	f108 0098 	add.w	r0, r8, #152	; 0x98
    4322:	f016 ff1b 	bl	1b15c <oa_findByLN>
            if (ret != DLMS_ERROR_CODE_OK)
    4326:	4602      	mov	r2, r0
    4328:	2800      	cmp	r0, #0
    432a:	f47f aec6 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
            if (object->sortObject == NULL)
    432e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4330:	b9b3      	cbnz	r3, 4360 <cosem_setProfileGeneric+0x2c0>
                ret = cosem_createObject(type, &object->sortObject);
    4332:	4639      	mov	r1, r7
    4334:	4628      	mov	r0, r5
    4336:	f7fd fee7 	bl	2108 <cosem_createObject>
                if (ret != DLMS_ERROR_CODE_OK)
    433a:	4602      	mov	r2, r0
    433c:	2800      	cmp	r0, #0
    433e:	f47f aebc 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
                ret = cosem_setLogicalName(object->sortObject, tmp->byteArr->data);
    4342:	9b06      	ldr	r3, [sp, #24]
    4344:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4346:	689b      	ldr	r3, [r3, #8]
    4348:	6819      	ldr	r1, [r3, #0]
    434a:	f00a f873 	bl	e434 <cosem_setLogicalName>
                if (ret != DLMS_ERROR_CODE_OK)
    434e:	4602      	mov	r2, r0
    4350:	2800      	cmp	r0, #0
    4352:	f47f aeb2 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
                ret = oa_push(&settings->releasedObjects, object->sortObject);
    4356:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4358:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
    435c:	f016 fe6f 	bl	1b03e <oa_push>
            ret = va_getByIndex(value->Arr, 2, &tmp);
    4360:	aa06      	add	r2, sp, #24
    4362:	68b0      	ldr	r0, [r6, #8]
    4364:	2102      	movs	r1, #2
    4366:	f017 f93c 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    436a:	4602      	mov	r2, r0
    436c:	2800      	cmp	r0, #0
    436e:	f47f aea4 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
            object->sortObjectAttributeIndex = (char)var_toInteger(tmp);
    4372:	9806      	ldr	r0, [sp, #24]
    4374:	f017 faaf 	bl	1b8d6 <var_toInteger>
    4378:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
            ret = va_getByIndex(value->Arr, 3, &tmp);
    437c:	aa06      	add	r2, sp, #24
    437e:	68b0      	ldr	r0, [r6, #8]
    4380:	2103      	movs	r1, #3
    4382:	f017 f92e 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    4386:	4602      	mov	r2, r0
    4388:	2800      	cmp	r0, #0
    438a:	f47f ae96 	bne.w	40ba <cosem_setProfileGeneric+0x1a>
    438e:	9001      	str	r0, [sp, #4]
            object->sortObjectDataIndex = (uint16_t)var_toInteger(tmp);
    4390:	9806      	ldr	r0, [sp, #24]
    4392:	f017 faa0 	bl	1b8d6 <var_toInteger>
    4396:	9a01      	ldr	r2, [sp, #4]
    4398:	87e0      	strh	r0, [r4, #62]	; 0x3e
    439a:	e68e      	b.n	40ba <cosem_setProfileGeneric+0x1a>
    else if (index == 7)
    439c:	2a07      	cmp	r2, #7
    439e:	d104      	bne.n	43aa <cosem_setProfileGeneric+0x30a>
        object->entriesInUse = var_toInteger(value);
    43a0:	4618      	mov	r0, r3
    43a2:	f017 fa98 	bl	1b8d6 <var_toInteger>
    43a6:	63a0      	str	r0, [r4, #56]	; 0x38
    43a8:	e782      	b.n	42b0 <cosem_setProfileGeneric+0x210>
    else if (index == 8)
    43aa:	2a08      	cmp	r2, #8
    43ac:	f47f ae83 	bne.w	40b6 <cosem_setProfileGeneric+0x16>
        object->profileEntries = var_toInteger(value);
    43b0:	4618      	mov	r0, r3
    43b2:	f017 fa90 	bl	1b8d6 <var_toInteger>
    43b6:	6360      	str	r0, [r4, #52]	; 0x34
    43b8:	e77a      	b.n	42b0 <cosem_setProfileGeneric+0x210>
    43ba:	bf00      	nop
    43bc:	200001d3 	.word	0x200001d3

000043c0 <hlp_bytesToHex>:
    return ret;
}

#ifndef DLMS_IGNORE_MALLOC
char* hlp_bytesToHex(const unsigned char* bytes, int count)
{
    43c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    43c2:	4b1c      	ldr	r3, [pc, #112]	; (4434 <hlp_bytesToHex+0x74>)
{
    43c4:	b085      	sub	sp, #20
    43c6:	4605      	mov	r5, r0
    43c8:	460c      	mov	r4, r1
    const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    43ca:	466e      	mov	r6, sp
    43cc:	f103 0710 	add.w	r7, r3, #16
    43d0:	6818      	ldr	r0, [r3, #0]
    43d2:	6859      	ldr	r1, [r3, #4]
    43d4:	4632      	mov	r2, r6
    43d6:	c203      	stmia	r2!, {r0, r1}
    43d8:	3308      	adds	r3, #8
    43da:	42bb      	cmp	r3, r7
    43dc:	4616      	mov	r6, r2
    43de:	d1f7      	bne.n	43d0 <hlp_bytesToHex+0x10>
    unsigned char tmp;
    int pos;
    char* hexChars;
    if (count != 0)
    43e0:	b31c      	cbz	r4, 442a <hlp_bytesToHex+0x6a>
    {
        hexChars = (char*)gxmalloc(3 * count);
    43e2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    43e6:	4630      	mov	r0, r6
    43e8:	f008 fa3c 	bl	c864 <malloc>
        if (hexChars != NULL)
    43ec:	b1d8      	cbz	r0, 4426 <hlp_bytesToHex+0x66>
    43ee:	462b      	mov	r3, r5
    43f0:	441c      	add	r4, r3
    43f2:	4605      	mov	r5, r0
            for (pos = 0; pos != count; ++pos)
            {
                tmp = bytes[pos] & 0xFF;
                hexChars[pos * 3] = hexArray[tmp >> 4];
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
                hexChars[pos * 3 + 2] = ' ';
    43f4:	2120      	movs	r1, #32
                tmp = bytes[pos] & 0xFF;
    43f6:	f813 2b01 	ldrb.w	r2, [r3], #1
                hexChars[pos * 3 + 2] = ' ';
    43fa:	70a9      	strb	r1, [r5, #2]
                hexChars[pos * 3] = hexArray[tmp >> 4];
    43fc:	af04      	add	r7, sp, #16
    43fe:	eb07 1712 	add.w	r7, r7, r2, lsr #4
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    4402:	f002 020f 	and.w	r2, r2, #15
                hexChars[pos * 3] = hexArray[tmp >> 4];
    4406:	f817 7c10 	ldrb.w	r7, [r7, #-16]
    440a:	702f      	strb	r7, [r5, #0]
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    440c:	af04      	add	r7, sp, #16
    440e:	443a      	add	r2, r7
            for (pos = 0; pos != count; ++pos)
    4410:	429c      	cmp	r4, r3
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    4412:	f812 2c10 	ldrb.w	r2, [r2, #-16]
    4416:	706a      	strb	r2, [r5, #1]
            for (pos = 0; pos != count; ++pos)
    4418:	f105 0503 	add.w	r5, r5, #3
    441c:	d1eb      	bne.n	43f6 <hlp_bytesToHex+0x36>
            }
            hexChars[(3 * count) - 1] = '\0';
    441e:	1983      	adds	r3, r0, r6
    4420:	2200      	movs	r2, #0
    4422:	f803 2c01 	strb.w	r2, [r3, #-1]
    {
        hexChars = (char*)gxmalloc(1);
        hexChars[0] = '\0';
    }
    return hexChars;
}
    4426:	b005      	add	sp, #20
    4428:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hexChars = (char*)gxmalloc(1);
    442a:	2001      	movs	r0, #1
    442c:	f008 fa1a 	bl	c864 <malloc>
        hexChars[0] = '\0';
    4430:	7004      	strb	r4, [r0, #0]
    return hexChars;
    4432:	e7f8      	b.n	4426 <hlp_bytesToHex+0x66>
    4434:	0001ee60 	.word	0x0001ee60

00004438 <hlp_getDataTypeSize>:
}

int hlp_getDataTypeSize(DLMS_DATA_TYPE type)
{
    int size = -1;
    switch (type)
    4438:	281b      	cmp	r0, #27
    443a:	bf9a      	itte	ls
    443c:	4b02      	ldrls	r3, [pc, #8]	; (4448 <hlp_getDataTypeSize+0x10>)
    443e:	5618      	ldrsbls	r0, [r3, r0]
{
    4440:	f04f 30ff 	movhi.w	r0, #4294967295
        break;
    default:
        break;
    }
    return size;
}
    4444:	4770      	bx	lr
    4446:	bf00      	nop
    4448:	0001ee71 	.word	0x0001ee71

0000444c <var_getDateTime2>:
}

int var_getDateTime2(
    gxtime* dateTime,
    gxByteBuffer* ba)
{
    444c:	b570      	push	{r4, r5, r6, lr}
    444e:	b086      	sub	sp, #24
    uint16_t year = 0xFFFF;
    unsigned char month = 0xFF, day = 0xFF, hour = 0xFF, minute = 0xFF, second = 0xFF, dayOfWeek = 0xFF;
    4450:	23ff      	movs	r3, #255	; 0xff
    4452:	f88d 3011 	strb.w	r3, [sp, #17]
#ifdef DLMS_USE_EPOCH_TIME
    time_fromUnixTime2(dateTime->value, &year, &month,
    4456:	f10d 0315 	add.w	r3, sp, #21
    445a:	9303      	str	r3, [sp, #12]
    445c:	ab05      	add	r3, sp, #20
    445e:	9302      	str	r3, [sp, #8]
    4460:	f10d 0313 	add.w	r3, sp, #19
    4464:	9301      	str	r3, [sp, #4]
    4466:	f10d 0312 	add.w	r3, sp, #18
{
    446a:	4605      	mov	r5, r0
    time_fromUnixTime2(dateTime->value, &year, &month,
    446c:	9300      	str	r3, [sp, #0]
    uint16_t year = 0xFFFF;
    446e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    time_fromUnixTime2(dateTime->value, &year, &month,
    4472:	aa04      	add	r2, sp, #16
{
    4474:	460c      	mov	r4, r1
    time_fromUnixTime2(dateTime->value, &year, &month,
    4476:	f10d 0311 	add.w	r3, sp, #17
    447a:	f10d 0116 	add.w	r1, sp, #22
    447e:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0xFFFF;
    4480:	f8ad 6016 	strh.w	r6, [sp, #22]
    unsigned char month = 0xFF, day = 0xFF, hour = 0xFF, minute = 0xFF, second = 0xFF, dayOfWeek = 0xFF;
    4484:	f88d 6010 	strb.w	r6, [sp, #16]
    4488:	f88d 6012 	strb.w	r6, [sp, #18]
    448c:	f88d 6013 	strb.w	r6, [sp, #19]
    4490:	f88d 6014 	strb.w	r6, [sp, #20]
    4494:	f88d 6015 	strb.w	r6, [sp, #21]
    time_fromUnixTime2(dateTime->value, &year, &month,
    4498:	f7fd fffc 	bl	2494 <time_fromUnixTime2>
        &day, &hour, &minute, &second, &dayOfWeek);
    //Add year.
    if ((dateTime->skip & DATETIME_SKIPS_YEAR) != 0)
    449c:	88eb      	ldrh	r3, [r5, #6]
    449e:	07d8      	lsls	r0, r3, #31
    {
        year = 0xFFFF;
    44a0:	bf48      	it	mi
    44a2:	f8ad 6016 	strhmi.w	r6, [sp, #22]
    }
    if ((dateTime->skip & (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY)) != 0)
    44a6:	0759      	lsls	r1, r3, #29
    {
        dayOfWeek = 0xFF;
    44a8:	bf18      	it	ne
    44aa:	23ff      	movne	r3, #255	; 0xff
    {
        second = (unsigned char)dateTime->value.tm_sec;
    }
#endif // DLMS_USE_EPOCH_TIME
    //Add year.
    bb_setUInt16(ba, year);
    44ac:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        dayOfWeek = 0xFF;
    44b0:	bf18      	it	ne
    44b2:	f88d 3015 	strbne.w	r3, [sp, #21]
    bb_setUInt16(ba, year);
    44b6:	4620      	mov	r0, r4
    44b8:	f009 fa83 	bl	d9c2 <bb_setUInt16>
    //Add month
    if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
    44bc:	7a2b      	ldrb	r3, [r5, #8]
    44be:	07da      	lsls	r2, r3, #31
    44c0:	d553      	bpl.n	456a <var_getDateTime2+0x11e>
    {
        bb_setUInt8(ba, 0xFE);
    44c2:	21fe      	movs	r1, #254	; 0xfe
    {
        bb_setUInt8(ba, month);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    44c4:	4620      	mov	r0, r4
    44c6:	f009 fa5a 	bl	d97e <bb_setUInt8>
    }
    //Add day
    if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    44ca:	7a2b      	ldrb	r3, [r5, #8]
    44cc:	0758      	lsls	r0, r3, #29
    44ce:	d557      	bpl.n	4580 <var_getDateTime2+0x134>
    {
        bb_setUInt8(ba, 0xFE);
    44d0:	21fe      	movs	r1, #254	; 0xfe
    {
        bb_setUInt8(ba, day);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    44d2:	4620      	mov	r0, r4
    44d4:	f009 fa53 	bl	d97e <bb_setUInt8>
    }
    //Add week day
    if ((dateTime->skip & DATETIME_SKIPS_DAYOFWEEK) == 0)
    44d8:	88eb      	ldrh	r3, [r5, #6]
    44da:	071b      	lsls	r3, r3, #28
    44dc:	d45b      	bmi.n	4596 <var_getDateTime2+0x14a>
    {
        //If Sunday.
        if (dayOfWeek == 0)
    44de:	f89d 3015 	ldrb.w	r3, [sp, #21]
    44e2:	b913      	cbnz	r3, 44ea <var_getDateTime2+0x9e>
        {
            dayOfWeek = 7;
    44e4:	2307      	movs	r3, #7
    44e6:	f88d 3015 	strb.w	r3, [sp, #21]
        }
        bb_setUInt8(ba, dayOfWeek);
    44ea:	f89d 1015 	ldrb.w	r1, [sp, #21]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    44ee:	4620      	mov	r0, r4
    44f0:	f009 fa45 	bl	d97e <bb_setUInt8>
    }

    //Add Hours
    if ((dateTime->skip & DATETIME_SKIPS_HOUR) == 0)
    44f4:	88eb      	ldrh	r3, [r5, #6]
    44f6:	06de      	lsls	r6, r3, #27
    {
        bb_setUInt8(ba, hour);
    44f8:	bf54      	ite	pl
    44fa:	f89d 1012 	ldrbpl.w	r1, [sp, #18]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    44fe:	21ff      	movmi	r1, #255	; 0xff
    4500:	4620      	mov	r0, r4
    4502:	f009 fa3c 	bl	d97e <bb_setUInt8>
    }
    //Add Minutes
    if ((dateTime->skip & DATETIME_SKIPS_MINUTE) == 0)
    4506:	88eb      	ldrh	r3, [r5, #6]
    4508:	0698      	lsls	r0, r3, #26
    {
        bb_setUInt8(ba, minute);
    450a:	bf54      	ite	pl
    450c:	f89d 1013 	ldrbpl.w	r1, [sp, #19]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4510:	21ff      	movmi	r1, #255	; 0xff
    4512:	4620      	mov	r0, r4
    4514:	f009 fa33 	bl	d97e <bb_setUInt8>
    }
    //Add seconds.
    if ((dateTime->skip & DATETIME_SKIPS_SECOND) == 0)
    4518:	88eb      	ldrh	r3, [r5, #6]
    451a:	0659      	lsls	r1, r3, #25
    {
        bb_setUInt8(ba, second);
    451c:	bf54      	ite	pl
    451e:	f89d 1014 	ldrbpl.w	r1, [sp, #20]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4522:	21ff      	movmi	r1, #255	; 0xff
    4524:	4620      	mov	r0, r4
    4526:	f009 fa2a 	bl	d97e <bb_setUInt8>
    //Add ms.
#ifdef DLMS_ITALIAN_STANDARD
    //Italian standard uses 0 for ms.
    bb_setUInt8(ba, 0x00);
#else
    if ((dateTime->skip & DATETIME_SKIPS_MS) == 0)
    452a:	88e9      	ldrh	r1, [r5, #6]
    452c:	f011 0180 	ands.w	r1, r1, #128	; 0x80
    {
        bb_setUInt8(ba, 0x00);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4530:	bf18      	it	ne
    4532:	21ff      	movne	r1, #255	; 0xff
    4534:	4620      	mov	r0, r4
    4536:	f009 fa22 	bl	d97e <bb_setUInt8>
    }
#endif //DLMS_ITALIAN_STANDARD
    //Add Deviation
    if (year == 0xFFFF || (dateTime->skip & DATETIME_SKIPS_DEVITATION) != 0)
    453a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    453e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4542:	429a      	cmp	r2, r3
    4544:	d002      	beq.n	454c <var_getDateTime2+0x100>
    4546:	88eb      	ldrh	r3, [r5, #6]
    4548:	05da      	lsls	r2, r3, #23
    454a:	d526      	bpl.n	459a <var_getDateTime2+0x14e>
    {
        bb_setInt16(ba, 0x8000);//(not specified)
    454c:	4914      	ldr	r1, [pc, #80]	; (45a0 <var_getDateTime2+0x154>)
    }
    else
    {
        bb_setInt16(ba, dateTime->deviation);
    454e:	4620      	mov	r0, r4
    4550:	f009 faf4 	bl	db3c <bb_setInt16>
    }
    //Add clock status
    if ((dateTime->skip & DATETIME_SKIPS_STATUS) != 0)
    4554:	88eb      	ldrh	r3, [r5, #6]
    4556:	059b      	lsls	r3, r3, #22
    {
        bb_setUInt8(ba, 0xFF);
    }
    else
    {
        bb_setUInt8(ba, dateTime->status);
    4558:	bf54      	ite	pl
    455a:	7a69      	ldrbpl	r1, [r5, #9]
        bb_setUInt8(ba, 0xFF);
    455c:	21ff      	movmi	r1, #255	; 0xff
        bb_setUInt8(ba, dateTime->status);
    455e:	4620      	mov	r0, r4
    4560:	f009 fa0d 	bl	d97e <bb_setUInt8>
    }
    return 0;
}
    4564:	2000      	movs	r0, #0
    4566:	b006      	add	sp, #24
    4568:	bd70      	pop	{r4, r5, r6, pc}
    else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
    456a:	079b      	lsls	r3, r3, #30
    456c:	d501      	bpl.n	4572 <var_getDateTime2+0x126>
        bb_setUInt8(ba, 0xFD);
    456e:	21fd      	movs	r1, #253	; 0xfd
    4570:	e7a8      	b.n	44c4 <var_getDateTime2+0x78>
    else if ((dateTime->skip & DATETIME_SKIPS_MONTH) == 0)
    4572:	88eb      	ldrh	r3, [r5, #6]
    4574:	079e      	lsls	r6, r3, #30
        bb_setUInt8(ba, month);
    4576:	bf54      	ite	pl
    4578:	f89d 1010 	ldrbpl.w	r1, [sp, #16]
        bb_setUInt8(ba, 0xFF);
    457c:	21ff      	movmi	r1, #255	; 0xff
    457e:	e7a1      	b.n	44c4 <var_getDateTime2+0x78>
    else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
    4580:	0719      	lsls	r1, r3, #28
    4582:	d501      	bpl.n	4588 <var_getDateTime2+0x13c>
        bb_setUInt8(ba, 0xFD);
    4584:	21fd      	movs	r1, #253	; 0xfd
    4586:	e7a4      	b.n	44d2 <var_getDateTime2+0x86>
    else if ((dateTime->skip & DATETIME_SKIPS_DAY) == 0)
    4588:	88eb      	ldrh	r3, [r5, #6]
    458a:	075a      	lsls	r2, r3, #29
        bb_setUInt8(ba, day);
    458c:	bf54      	ite	pl
    458e:	f89d 1011 	ldrbpl.w	r1, [sp, #17]
        bb_setUInt8(ba, 0xFF);
    4592:	21ff      	movmi	r1, #255	; 0xff
    4594:	e79d      	b.n	44d2 <var_getDateTime2+0x86>
        bb_setUInt8(ba, 0xFF);
    4596:	21ff      	movs	r1, #255	; 0xff
    4598:	e7a9      	b.n	44ee <var_getDateTime2+0xa2>
        bb_setInt16(ba, dateTime->deviation);
    459a:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
    459e:	e7d6      	b.n	454e <var_getDateTime2+0x102>
    45a0:	ffff8000 	.word	0xffff8000

000045a4 <var_copy>:
}
#endif //DLMS_IGNORE_MALLOC

//copy variant.
int var_copy(dlmsVARIANT* target, dlmsVARIANT* source)
{
    45a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    45a8:	4688      	mov	r8, r1
    45aa:	4605      	mov	r5, r0
#ifndef DLMS_IGNORE_MALLOC
    dlmsVARIANT* it;
    dlmsVARIANT* item;
#endif //DLMS_IGNORE_MALLOC
    int ret = DLMS_ERROR_CODE_OK;
    if ((source->vt & DLMS_DATA_TYPE_BYREF) != 0)
    45ac:	f998 3000 	ldrsb.w	r3, [r8]
    45b0:	7809      	ldrb	r1, [r1, #0]
    45b2:	2b00      	cmp	r3, #0
    45b4:	da26      	bge.n	4604 <var_copy+0x60>
    {
        if (source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_ARRAY) ||
    45b6:	f101 037f 	add.w	r3, r1, #127	; 0x7f
    45ba:	b2db      	uxtb	r3, r3
    45bc:	2b01      	cmp	r3, #1
    45be:	d807      	bhi.n	45d0 <var_copy+0x2c>
            source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_STRUCTURE))
        {
            target->vt = source->vt & ~DLMS_DATA_TYPE_BYREF;
    45c0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    45c4:	7001      	strb	r1, [r0, #0]
            target->pVal = source->pVal;
    45c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
    45ca:	6083      	str	r3, [r0, #8]
        ret = var_getSize(source->vt);
        if (ret > 0)
        {
            memcpy(&target->pVal, &source->pVal, ret);
        }
        ret = 0;
    45cc:	2400      	movs	r4, #0
    45ce:	e034      	b.n	463a <var_copy+0x96>
            source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_STRING) ||
    45d0:	f101 037c 	add.w	r3, r1, #124	; 0x7c
    45d4:	b2db      	uxtb	r3, r3
    45d6:	2b17      	cmp	r3, #23
    45d8:	d804      	bhi.n	45e4 <var_copy+0x40>
    45da:	4a7d      	ldr	r2, [pc, #500]	; (47d0 <var_copy+0x22c>)
    45dc:	fa22 f303 	lsr.w	r3, r2, r3
    45e0:	07db      	lsls	r3, r3, #31
    45e2:	d409      	bmi.n	45f8 <var_copy+0x54>
        target->vt = source->vt & ~DLMS_DATA_TYPE_BYREF;
    45e4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    45e8:	7029      	strb	r1, [r5, #0]
        target->ullVal = *source->pullVal;
    45ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
    45ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    45f2:	e9c5 2302 	strd	r2, r3, [r5, #8]
        return 0;
    45f6:	e7e9      	b.n	45cc <var_copy+0x28>
            return var_getBytes2(source, source->vt, target->byteArr);
    45f8:	6882      	ldr	r2, [r0, #8]
    45fa:	4640      	mov	r0, r8
    45fc:	f017 f92e 	bl	1b85c <var_getBytes2>
        ret = ba_copy(target->bitArr, source->bitArr->data, (uint16_t)source->bitArr->size);
    4600:	4604      	mov	r4, r0
    4602:	e01a      	b.n	463a <var_copy+0x96>
    if ((target->vt & DLMS_DATA_TYPE_BYREF) != 0)
    4604:	f990 2000 	ldrsb.w	r2, [r0]
    4608:	7803      	ldrb	r3, [r0, #0]
    460a:	2a00      	cmp	r2, #0
    460c:	da32      	bge.n	4674 <var_copy+0xd0>
        if (source->vt == DLMS_DATA_TYPE_OCTET_STRING || source->vt == DLMS_DATA_TYPE_STRING)
    460e:	f1a1 0309 	sub.w	r3, r1, #9
    4612:	2b01      	cmp	r3, #1
    4614:	d815      	bhi.n	4642 <var_copy+0x9e>
            if ((ret = hlp_getObjectCount2(source->byteArr, &count)) != 0)
    4616:	f8d8 0008 	ldr.w	r0, [r8, #8]
    461a:	a901      	add	r1, sp, #4
    461c:	f016 fa7a 	bl	1ab14 <hlp_getObjectCount2>
    4620:	4604      	mov	r4, r0
    4622:	b950      	cbnz	r0, 463a <var_copy+0x96>
            memcpy(target->pVal, source->byteArr + source->byteArr->position, count);
    4624:	f8d8 3008 	ldr.w	r3, [r8, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4628:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    462c:	8919      	ldrh	r1, [r3, #8]
    462e:	200c      	movs	r0, #12
    4630:	fb00 3101 	mla	r1, r0, r1, r3
    4634:	68a8      	ldr	r0, [r5, #8]
    4636:	f019 f92b 	bl	1d890 <memcpy>
    }
    return ret;
}
    463a:	4620      	mov	r0, r4
    463c:	b002      	add	sp, #8
    463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            count = (uint16_t)hlp_getDataTypeSize(source->vt);
    4642:	4608      	mov	r0, r1
    4644:	f7ff fef8 	bl	4438 <hlp_getDataTypeSize>
    4648:	4604      	mov	r4, r0
    464a:	f8ad 0004 	strh.w	r0, [sp, #4]
            if (count != hlp_getDataTypeSize(target->vt ^ DLMS_DATA_TYPE_BYREF))
    464e:	7828      	ldrb	r0, [r5, #0]
    4650:	f080 0080 	eor.w	r0, r0, #128	; 0x80
    4654:	f7ff fef0 	bl	4438 <hlp_getDataTypeSize>
    4658:	b2a4      	uxth	r4, r4
    465a:	42a0      	cmp	r0, r4
    465c:	d107      	bne.n	466e <var_copy+0xca>
    465e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4662:	68a8      	ldr	r0, [r5, #8]
    4664:	f108 0108 	add.w	r1, r8, #8
    4668:	f019 f912 	bl	1d890 <memcpy>
    466c:	e7ae      	b.n	45cc <var_copy+0x28>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    466e:	f44f 7481 	mov.w	r4, #258	; 0x102
    4672:	e7e2      	b.n	463a <var_copy+0x96>
    if ((target->vt == DLMS_DATA_TYPE_ARRAY || target->vt == DLMS_DATA_TYPE_STRUCTURE) && va_isAttached(target->Arr))
    4674:	3b01      	subs	r3, #1
    4676:	2b01      	cmp	r3, #1
    4678:	d804      	bhi.n	4684 <var_copy+0xe0>
    return (arr->capacity & 0x8000) == 0x8000;
    467a:	6883      	ldr	r3, [r0, #8]
    if ((target->vt == DLMS_DATA_TYPE_ARRAY || target->vt == DLMS_DATA_TYPE_STRUCTURE) && va_isAttached(target->Arr))
    467c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    4680:	2b00      	cmp	r3, #0
    4682:	db1f      	blt.n	46c4 <var_copy+0x120>
        ret = var_clear(target);
    4684:	4628      	mov	r0, r5
    4686:	f016 ff2e 	bl	1b4e6 <var_clear>
        if (ret != DLMS_ERROR_CODE_OK)
    468a:	4604      	mov	r4, r0
    468c:	2800      	cmp	r0, #0
    468e:	d1d4      	bne.n	463a <var_copy+0x96>
        target->vt = source->vt;
    4690:	f898 3000 	ldrb.w	r3, [r8]
    4694:	702b      	strb	r3, [r5, #0]
    unsigned char attaced = 0;
    4696:	4607      	mov	r7, r0
    if (source->vt == DLMS_DATA_TYPE_STRING)
    4698:	f898 3000 	ldrb.w	r3, [r8]
    469c:	2b0a      	cmp	r3, #10
    469e:	d113      	bne.n	46c8 <var_copy+0x124>
        if (source->byteArr != 0)
    46a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    46a4:	2b00      	cmp	r3, #0
    46a6:	d091      	beq.n	45cc <var_copy+0x28>
            target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    46a8:	200c      	movs	r0, #12
    46aa:	f008 f8db 	bl	c864 <malloc>
    46ae:	60a8      	str	r0, [r5, #8]
            BYTE_BUFFER_INIT(target->byteArr);
    46b0:	f009 f8fc 	bl	d8ac <bb_init>
            bb_set(target->byteArr, source->byteArr->data, source->byteArr->size);
    46b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    46b8:	68a8      	ldr	r0, [r5, #8]
    46ba:	88da      	ldrh	r2, [r3, #6]
    46bc:	6819      	ldr	r1, [r3, #0]
    46be:	f009 fa44 	bl	db4a <bb_set>
    46c2:	e783      	b.n	45cc <var_copy+0x28>
        attaced = 1;
    46c4:	2701      	movs	r7, #1
    46c6:	e7e7      	b.n	4698 <var_copy+0xf4>
    else if (source->vt == DLMS_DATA_TYPE_OCTET_STRING)
    46c8:	2b09      	cmp	r3, #9
    46ca:	d0e9      	beq.n	46a0 <var_copy+0xfc>
    else if (source->vt == DLMS_DATA_TYPE_ARRAY ||
    46cc:	1e5a      	subs	r2, r3, #1
    46ce:	2a01      	cmp	r2, #1
    46d0:	d848      	bhi.n	4764 <var_copy+0x1c0>
        if (source->Arr != NULL && source->Arr->size != 0)
    46d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    46d6:	2b00      	cmp	r3, #0
    46d8:	f43f af78 	beq.w	45cc <var_copy+0x28>
    46dc:	88db      	ldrh	r3, [r3, #6]
    46de:	2b00      	cmp	r3, #0
    46e0:	f43f af74 	beq.w	45cc <var_copy+0x28>
            if (target->Arr == NULL)
    46e4:	68ac      	ldr	r4, [r5, #8]
    46e6:	b92c      	cbnz	r4, 46f4 <var_copy+0x150>
                target->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    46e8:	2008      	movs	r0, #8
    46ea:	f008 f8bb 	bl	c864 <malloc>
    arr->capacity = 0;
    46ee:	e9c0 4400 	strd	r4, r4, [r0]
                target->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    46f2:	60a8      	str	r0, [r5, #8]
            va_capacity(target->Arr, source->Arr->size);
    46f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    46f8:	68a8      	ldr	r0, [r5, #8]
    46fa:	88d9      	ldrh	r1, [r3, #6]
    46fc:	f016 fe7d 	bl	1b3fa <va_capacity>
            for (pos = 0; pos != source->Arr->size; ++pos)
    4700:	2600      	movs	r6, #0
    4702:	f8d8 0008 	ldr.w	r0, [r8, #8]
    4706:	88c3      	ldrh	r3, [r0, #6]
    4708:	42b3      	cmp	r3, r6
    470a:	f43f af5f 	beq.w	45cc <var_copy+0x28>
                if ((ret = va_getByIndex(source->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
    470e:	466a      	mov	r2, sp
    4710:	4631      	mov	r1, r6
    4712:	f016 ff66 	bl	1b5e2 <va_getByIndex>
    4716:	4604      	mov	r4, r0
    4718:	2800      	cmp	r0, #0
    471a:	d18e      	bne.n	463a <var_copy+0x96>
                if (attaced)
    471c:	b187      	cbz	r7, 4740 <var_copy+0x19c>
                    if ((ret = va_getByIndex(target->Arr, pos, &item)) != DLMS_ERROR_CODE_OK ||
    471e:	68a8      	ldr	r0, [r5, #8]
    4720:	aa01      	add	r2, sp, #4
    4722:	f016 ff5e 	bl	1b5e2 <va_getByIndex>
    4726:	4604      	mov	r4, r0
    4728:	2800      	cmp	r0, #0
    472a:	d186      	bne.n	463a <var_copy+0x96>
                        (ret = var_copy(item, it)) != DLMS_ERROR_CODE_OK)
    472c:	e9dd 1000 	ldrd	r1, r0, [sp]
    4730:	f7ff ff38 	bl	45a4 <var_copy>
                    if ((ret = va_getByIndex(target->Arr, pos, &item)) != DLMS_ERROR_CODE_OK ||
    4734:	4604      	mov	r4, r0
    4736:	2800      	cmp	r0, #0
    4738:	f47f af7f 	bne.w	463a <var_copy+0x96>
            for (pos = 0; pos != source->Arr->size; ++pos)
    473c:	3601      	adds	r6, #1
    473e:	e7e0      	b.n	4702 <var_copy+0x15e>
                    item = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    4740:	2010      	movs	r0, #16
    4742:	f008 f88f 	bl	c864 <malloc>
                    ret = var_copy(item, it);
    4746:	9900      	ldr	r1, [sp, #0]
    data->vt = DLMS_DATA_TYPE_NONE;
    4748:	7007      	strb	r7, [r0, #0]
    data->byteArr = NULL;
    474a:	6087      	str	r7, [r0, #8]
                    item = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    474c:	9001      	str	r0, [sp, #4]
                    ret = var_copy(item, it);
    474e:	f7ff ff29 	bl	45a4 <var_copy>
                    if (ret != DLMS_ERROR_CODE_OK)
    4752:	4604      	mov	r4, r0
    4754:	2800      	cmp	r0, #0
    4756:	f47f af70 	bne.w	463a <var_copy+0x96>
                    va_push(target->Arr, item);
    475a:	9901      	ldr	r1, [sp, #4]
    475c:	68a8      	ldr	r0, [r5, #8]
    475e:	f016 fe74 	bl	1b44a <va_push>
    4762:	e7eb      	b.n	473c <var_copy+0x198>
    else if (source->vt == DLMS_DATA_TYPE_DATETIME)
    4764:	2b19      	cmp	r3, #25
    4766:	d105      	bne.n	4774 <var_copy+0x1d0>
        ret = var_setDateTime(target, source->dateTime);
    4768:	f8d8 1008 	ldr.w	r1, [r8, #8]
    476c:	4628      	mov	r0, r5
    476e:	f017 f87c 	bl	1b86a <var_setDateTime>
    4772:	e745      	b.n	4600 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_DATE)
    4774:	2b1a      	cmp	r3, #26
    4776:	d105      	bne.n	4784 <var_copy+0x1e0>
        ret = var_setDate(target, source->dateTime);
    4778:	f8d8 1008 	ldr.w	r1, [r8, #8]
    477c:	4628      	mov	r0, r5
    477e:	f017 f886 	bl	1b88e <var_setDate>
    4782:	e73d      	b.n	4600 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_TIME)
    4784:	2b1b      	cmp	r3, #27
    4786:	d105      	bne.n	4794 <var_copy+0x1f0>
        ret = var_setTime(target, source->dateTime);
    4788:	f8d8 1008 	ldr.w	r1, [r8, #8]
    478c:	4628      	mov	r0, r5
    478e:	f017 f890 	bl	1b8b2 <var_setTime>
    4792:	e735      	b.n	4600 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_BIT_STRING)
    4794:	2b04      	cmp	r3, #4
    4796:	d10d      	bne.n	47b4 <var_copy+0x210>
        target->bitArr = (bitArray*)gxmalloc(sizeof(bitArray));
    4798:	2008      	movs	r0, #8
    479a:	f008 f863 	bl	c864 <malloc>
    479e:	60a8      	str	r0, [r5, #8]
        ba_init(target->bitArr);
    47a0:	f008 ff7d 	bl	d69e <ba_init>
        ret = ba_copy(target->bitArr, source->bitArr->data, (uint16_t)source->bitArr->size);
    47a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    47a8:	68a8      	ldr	r0, [r5, #8]
    47aa:	88da      	ldrh	r2, [r3, #6]
    47ac:	6819      	ldr	r1, [r3, #0]
    47ae:	f008 fff1 	bl	d794 <ba_copy>
    47b2:	e725      	b.n	4600 <var_copy+0x5c>
    switch (vt)
    47b4:	2b19      	cmp	r3, #25
    47b6:	f63f af09 	bhi.w	45cc <var_copy+0x28>
    47ba:	4a06      	ldr	r2, [pc, #24]	; (47d4 <var_copy+0x230>)
    47bc:	56d2      	ldrsb	r2, [r2, r3]
        if (ret > 0)
    47be:	2a00      	cmp	r2, #0
    47c0:	f77f af04 	ble.w	45cc <var_copy+0x28>
    47c4:	f108 0108 	add.w	r1, r8, #8
    47c8:	f105 0008 	add.w	r0, r5, #8
    47cc:	e74c      	b.n	4668 <var_copy+0xc4>
    47ce:	bf00      	nop
    47d0:	00e00061 	.word	0x00e00061
    47d4:	0001ee9f 	.word	0x0001ee9f

000047d8 <convert.part.0>:
static int convert(dlmsVARIANT* item, DLMS_DATA_TYPE type)
    47d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47dc:	b0ca      	sub	sp, #296	; 0x128
    data->vt = DLMS_DATA_TYPE_NONE;
    47de:	2300      	movs	r3, #0
static int convert(dlmsVARIANT* item, DLMS_DATA_TYPE type)
    47e0:	4604      	mov	r4, r0
    47e2:	460d      	mov	r5, r1
    ret = var_copy(&tmp, item);
    47e4:	4601      	mov	r1, r0
    47e6:	a802      	add	r0, sp, #8
    data->vt = DLMS_DATA_TYPE_NONE;
    47e8:	f88d 3008 	strb.w	r3, [sp, #8]
    data->byteArr = NULL;
    47ec:	9304      	str	r3, [sp, #16]
    data->vt = DLMS_DATA_TYPE_NONE;
    47ee:	f88d 3018 	strb.w	r3, [sp, #24]
    data->byteArr = NULL;
    47f2:	9308      	str	r3, [sp, #32]
    ret = var_copy(&tmp, item);
    47f4:	f7ff fed6 	bl	45a4 <var_copy>
    if (ret != DLMS_ERROR_CODE_OK)
    47f8:	4606      	mov	r6, r0
    47fa:	2800      	cmp	r0, #0
    47fc:	d170      	bne.n	48e0 <convert.part.0+0x108>
    var_clear(item);
    47fe:	4620      	mov	r0, r4
    4800:	f016 fe71 	bl	1b4e6 <var_clear>
    if (type == DLMS_DATA_TYPE_STRING)
    4804:	2d0a      	cmp	r5, #10
    4806:	f040 80d6 	bne.w	49b6 <convert.part.0+0x1de>
        item->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    480a:	200c      	movs	r0, #12
    480c:	f008 f82a 	bl	c864 <malloc>
    4810:	60a0      	str	r0, [r4, #8]
        BYTE_BUFFER_INIT(item->strVal);
    4812:	f009 f84b 	bl	d8ac <bb_init>
        switch (tmp.vt)
    4816:	f89d 3008 	ldrb.w	r3, [sp, #8]
    481a:	2b1b      	cmp	r3, #27
    481c:	f200 815f 	bhi.w	4ade <convert.part.0+0x306>
    4820:	e8df f013 	tbh	[pc, r3, lsl #1]
    4824:	001c0032 	.word	0x001c0032
    4828:	0062001c 	.word	0x0062001c
    482c:	006c00ad 	.word	0x006c00ad
    4830:	015d0077 	.word	0x015d0077
    4834:	00ba015d 	.word	0x00ba015d
    4838:	015d015d 	.word	0x015d015d
    483c:	015d015d 	.word	0x015d015d
    4840:	007a015d 	.word	0x007a015d
    4844:	00860080 	.word	0x00860080
    4848:	015d008b 	.word	0x015d008b
    484c:	00990090 	.word	0x00990090
    4850:	009b0086 	.word	0x009b0086
    4854:	00b500a7 	.word	0x00b500a7
    4858:	00b500b5 	.word	0x00b500b5
            bb_setUInt8(item->strVal, '{');
    485c:	68a0      	ldr	r0, [r4, #8]
    485e:	217b      	movs	r1, #123	; 0x7b
    4860:	f009 f88d 	bl	d97e <bb_setUInt8>
            for (pos = 0; pos != tmp.Arr->size; ++pos)
    4864:	2500      	movs	r5, #0
    4866:	9804      	ldr	r0, [sp, #16]
    4868:	88c3      	ldrh	r3, [r0, #6]
    486a:	b2af      	uxth	r7, r5
    486c:	42bb      	cmp	r3, r7
    486e:	d111      	bne.n	4894 <convert.part.0+0xbc>
            bb_setUInt8(item->strVal, '}');
    4870:	217d      	movs	r1, #125	; 0x7d
    4872:	68a0      	ldr	r0, [r4, #8]
    4874:	f009 f883 	bl	d97e <bb_setUInt8>
            bb_setUInt8(item->strVal, '\0');
    4878:	68a0      	ldr	r0, [r4, #8]
    487a:	2100      	movs	r1, #0
    487c:	f009 f87f 	bl	d97e <bb_setUInt8>
            --item->strVal->size;
    4880:	68a2      	ldr	r2, [r4, #8]
    4882:	88d3      	ldrh	r3, [r2, #6]
    4884:	3b01      	subs	r3, #1
    4886:	80d3      	strh	r3, [r2, #6]
            item->vt = type;
    4888:	230a      	movs	r3, #10
            item->vt = type;
    488a:	7023      	strb	r3, [r4, #0]
    var_clear(&tmp);
    488c:	a802      	add	r0, sp, #8
    488e:	f016 fe2a 	bl	1b4e6 <var_clear>
    return DLMS_ERROR_CODE_OK;
    4892:	e025      	b.n	48e0 <convert.part.0+0x108>
                ret = va_getByIndex(tmp.Arr, pos, &it);
    4894:	aa0b      	add	r2, sp, #44	; 0x2c
    4896:	b2a9      	uxth	r1, r5
    4898:	f016 fea3 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
    489c:	2800      	cmp	r0, #0
    489e:	f040 811c 	bne.w	4ada <convert.part.0+0x302>
                if (pos != 0)
    48a2:	b13f      	cbz	r7, 48b4 <convert.part.0+0xdc>
                    bb_setUInt8(item->strVal, ',');
    48a4:	212c      	movs	r1, #44	; 0x2c
    48a6:	68a0      	ldr	r0, [r4, #8]
    48a8:	f009 f869 	bl	d97e <bb_setUInt8>
                    bb_setUInt8(item->strVal, ' ');
    48ac:	68a0      	ldr	r0, [r4, #8]
    48ae:	2120      	movs	r1, #32
    48b0:	f009 f865 	bl	d97e <bb_setUInt8>
                ret = var_copy(&tmp3, it);
    48b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    48b6:	a806      	add	r0, sp, #24
    48b8:	f7ff fe74 	bl	45a4 <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
    48bc:	2800      	cmp	r0, #0
    48be:	f040 810c 	bne.w	4ada <convert.part.0+0x302>
                ret = var_toString(&tmp3, item->strVal);
    48c2:	68a1      	ldr	r1, [r4, #8]
    48c4:	a806      	add	r0, sp, #24
    48c6:	f017 f850 	bl	1b96a <var_toString>
    48ca:	4607      	mov	r7, r0
                var_clear(&tmp3);
    48cc:	a806      	add	r0, sp, #24
    48ce:	f016 fe0a 	bl	1b4e6 <var_clear>
                if (ret != DLMS_ERROR_CODE_OK)
    48d2:	3501      	adds	r5, #1
    48d4:	2f00      	cmp	r7, #0
    48d6:	d0c6      	beq.n	4866 <convert.part.0+0x8e>
                    var_clear(&tmp);
    48d8:	a802      	add	r0, sp, #8
    48da:	f016 fe04 	bl	1b4e6 <var_clear>
                ret = var_toString(&tmp3, item->strVal);
    48de:	463e      	mov	r6, r7
}
    48e0:	4630      	mov	r0, r6
    48e2:	b04a      	add	sp, #296	; 0x128
    48e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (tmp.boolVal == 0)
    48e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    48ec:	68a0      	ldr	r0, [r4, #8]
    48ee:	b91b      	cbnz	r3, 48f8 <convert.part.0+0x120>
                bb_addString(item->strVal, "False");
    48f0:	4980      	ldr	r1, [pc, #512]	; (4af4 <convert.part.0+0x31c>)
            bb_addString(item->strVal, buff);
    48f2:	f009 f975 	bl	dbe0 <bb_addString>
            item->vt = type;
    48f6:	e7c7      	b.n	4888 <convert.part.0+0xb0>
                bb_addString(item->strVal, "True");
    48f8:	497f      	ldr	r1, [pc, #508]	; (4af8 <convert.part.0+0x320>)
    48fa:	e7fa      	b.n	48f2 <convert.part.0+0x11a>
            hlp_intToString(buff, 250, tmp.lVal, 1, 0);
    48fc:	2300      	movs	r3, #0
    48fe:	9300      	str	r3, [sp, #0]
    4900:	2301      	movs	r3, #1
            hlp_intToString(buff, 250, tmp.ulVal, 0, 0);
    4902:	9a04      	ldr	r2, [sp, #16]
            hlp_intToString(buff, 250, tmp.uiVal, 0, 0);
    4904:	21fa      	movs	r1, #250	; 0xfa
    4906:	a80b      	add	r0, sp, #44	; 0x2c
    4908:	f016 f9c0 	bl	1ac8c <hlp_intToString>
            bb_addString(item->strVal, buff);
    490c:	68a0      	ldr	r0, [r4, #8]
    490e:	a90b      	add	r1, sp, #44	; 0x2c
    4910:	e7ef      	b.n	48f2 <convert.part.0+0x11a>
            hlp_intToString(buff, 250, tmp.ulVal, 0, 0);
    4912:	2300      	movs	r3, #0
    4914:	9300      	str	r3, [sp, #0]
    4916:	e7f4      	b.n	4902 <convert.part.0+0x12a>
            hlp_intToString(buff, 250, tmp.cVal, 1, 0);
    4918:	2300      	movs	r3, #0
    491a:	9300      	str	r3, [sp, #0]
    491c:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    4920:	2301      	movs	r3, #1
    4922:	e7ef      	b.n	4904 <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.iVal, 1, 0);
    4924:	2300      	movs	r3, #0
    4926:	9300      	str	r3, [sp, #0]
    4928:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    492c:	2301      	movs	r3, #1
    492e:	e7e9      	b.n	4904 <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.bVal, 0, 0);
    4930:	2300      	movs	r3, #0
    4932:	f89d 2010 	ldrb.w	r2, [sp, #16]
    4936:	9300      	str	r3, [sp, #0]
    4938:	e7e4      	b.n	4904 <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.uiVal, 0, 0);
    493a:	2300      	movs	r3, #0
    493c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    4940:	9300      	str	r3, [sp, #0]
    4942:	e7df      	b.n	4904 <convert.part.0+0x12c>
            hlp_int64ToString(buff, 250, tmp.llVal, 1);
    4944:	2301      	movs	r3, #1
            hlp_int64ToString(buff, 250, tmp.ullVal, 0);
    4946:	9300      	str	r3, [sp, #0]
    4948:	21fa      	movs	r1, #250	; 0xfa
    494a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    494e:	a80b      	add	r0, sp, #44	; 0x2c
    4950:	f016 f9fd 	bl	1ad4e <hlp_int64ToString>
            bb_addString(item->strVal, buff);
    4954:	e7da      	b.n	490c <convert.part.0+0x134>
            hlp_int64ToString(buff, 250, tmp.ullVal, 0);
    4956:	2300      	movs	r3, #0
    4958:	e7f5      	b.n	4946 <convert.part.0+0x16e>
            sprintf(buff, "%f", tmp.fltVal);
    495a:	9804      	ldr	r0, [sp, #16]
    495c:	f7fb fd84 	bl	468 <__aeabi_f2d>
    4960:	e9cd 0100 	strd	r0, r1, [sp]
    4964:	4b65      	ldr	r3, [pc, #404]	; (4afc <convert.part.0+0x324>)
            sprintf(buff, "%lf", tmp.dblVal);
    4966:	22fa      	movs	r2, #250	; 0xfa
    4968:	2100      	movs	r1, #0
    496a:	a80b      	add	r0, sp, #44	; 0x2c
    496c:	f018 ffe1 	bl	1d932 <__sprintf_chk>
    4970:	e7cc      	b.n	490c <convert.part.0+0x134>
    4972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4976:	e9cd 2300 	strd	r2, r3, [sp]
    497a:	4b61      	ldr	r3, [pc, #388]	; (4b00 <convert.part.0+0x328>)
    497c:	e7f3      	b.n	4966 <convert.part.0+0x18e>
            char* str = ba_toString(tmp.bitArr);
    497e:	9804      	ldr	r0, [sp, #16]
    4980:	f008 ff64 	bl	d84c <ba_toString>
    4984:	4601      	mov	r1, r0
            bb_attachString(item->strVal, str);
    4986:	68a0      	ldr	r0, [r4, #8]
    4988:	f009 f942 	bl	dc10 <bb_attachString>
            item->vt = type;
    498c:	e77c      	b.n	4888 <convert.part.0+0xb0>
            time_toString(tmp.dateTime, item->strVal);
    498e:	68a1      	ldr	r1, [r4, #8]
    4990:	9804      	ldr	r0, [sp, #16]
    4992:	f7fd fdfd 	bl	2590 <time_toString>
            item->vt = type;
    4996:	e777      	b.n	4888 <convert.part.0+0xb0>
            if (tmp.byteArr != NULL)
    4998:	9804      	ldr	r0, [sp, #16]
    499a:	2800      	cmp	r0, #0
    499c:	f43f af74 	beq.w	4888 <convert.part.0+0xb0>
                char* str = bb_toHexString(tmp.byteArr);
    49a0:	f009 fab6 	bl	df10 <bb_toHexString>
    49a4:	4605      	mov	r5, r0
                bb_addString(item->strVal, str);
    49a6:	4601      	mov	r1, r0
    49a8:	68a0      	ldr	r0, [r4, #8]
    49aa:	f009 f919 	bl	dbe0 <bb_addString>
                gxfree(str);
    49ae:	4628      	mov	r0, r5
    49b0:	f007 ff60 	bl	c874 <free>
    49b4:	e768      	b.n	4888 <convert.part.0+0xb0>
    else if (item->vt == DLMS_DATA_TYPE_STRING)
    49b6:	7823      	ldrb	r3, [r4, #0]
    49b8:	2b0a      	cmp	r3, #10
    49ba:	d164      	bne.n	4a86 <convert.part.0+0x2ae>
        if (type == DLMS_DATA_TYPE_BOOLEAN)
    49bc:	2d03      	cmp	r5, #3
    49be:	d109      	bne.n	49d4 <convert.part.0+0x1fc>
            item->boolVal = strcmp((char*)tmp.strVal->data, "False") == 0 ? 0 : 1;
    49c0:	9b04      	ldr	r3, [sp, #16]
    49c2:	494c      	ldr	r1, [pc, #304]	; (4af4 <convert.part.0+0x31c>)
    49c4:	6818      	ldr	r0, [r3, #0]
    49c6:	f7fc f9f1 	bl	dac <strcmp>
    49ca:	3800      	subs	r0, #0
    49cc:	bf18      	it	ne
    49ce:	2001      	movne	r0, #1
            item->bVal = (unsigned char)hlp_stringToInt((char*)tmp.strVal->data);
    49d0:	7220      	strb	r0, [r4, #8]
            item->vt = type;
    49d2:	e006      	b.n	49e2 <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_INT32)
    49d4:	2d05      	cmp	r5, #5
    49d6:	d106      	bne.n	49e6 <convert.part.0+0x20e>
            item->ulVal = hlp_stringToInt((char*)tmp.strVal->data) & 0xFFFFFFFF;
    49d8:	9b04      	ldr	r3, [sp, #16]
    49da:	6818      	ldr	r0, [r3, #0]
    49dc:	f016 f99a 	bl	1ad14 <hlp_stringToInt>
    49e0:	60a0      	str	r0, [r4, #8]
    item->vt = type;
    49e2:	7025      	strb	r5, [r4, #0]
    49e4:	e752      	b.n	488c <convert.part.0+0xb4>
        else if (type == DLMS_DATA_TYPE_UINT32)
    49e6:	2d06      	cmp	r5, #6
    49e8:	d0f6      	beq.n	49d8 <convert.part.0+0x200>
        else if (type == DLMS_DATA_TYPE_INT8)
    49ea:	2d0f      	cmp	r5, #15
    49ec:	d104      	bne.n	49f8 <convert.part.0+0x220>
            item->bVal = (unsigned char)hlp_stringToInt((char*)tmp.strVal->data);
    49ee:	9b04      	ldr	r3, [sp, #16]
    49f0:	6818      	ldr	r0, [r3, #0]
    49f2:	f016 f98f 	bl	1ad14 <hlp_stringToInt>
    49f6:	e7eb      	b.n	49d0 <convert.part.0+0x1f8>
        else if (type == DLMS_DATA_TYPE_INT16)
    49f8:	2d10      	cmp	r5, #16
    49fa:	d105      	bne.n	4a08 <convert.part.0+0x230>
            item->iVal = (short)hlp_stringToInt((char*)tmp.strVal->data);
    49fc:	9b04      	ldr	r3, [sp, #16]
    49fe:	6818      	ldr	r0, [r3, #0]
    4a00:	f016 f988 	bl	1ad14 <hlp_stringToInt>
    4a04:	8120      	strh	r0, [r4, #8]
            item->vt = type;
    4a06:	e7ec      	b.n	49e2 <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_UINT8)
    4a08:	2d11      	cmp	r5, #17
    4a0a:	d0f0      	beq.n	49ee <convert.part.0+0x216>
        else if (type == DLMS_DATA_TYPE_UINT16)
    4a0c:	2d12      	cmp	r5, #18
    4a0e:	d106      	bne.n	4a1e <convert.part.0+0x246>
            item->uiVal = (uint16_t)hlp_stringToInt((char*)tmp.strVal->data);
    4a10:	9b04      	ldr	r3, [sp, #16]
    4a12:	6818      	ldr	r0, [r3, #0]
    4a14:	f016 f97e 	bl	1ad14 <hlp_stringToInt>
            item->vt = type;
    4a18:	2312      	movs	r3, #18
            item->uiVal = (uint16_t)hlp_stringToInt((char*)tmp.strVal->data);
    4a1a:	8120      	strh	r0, [r4, #8]
            item->vt = type;
    4a1c:	e735      	b.n	488a <convert.part.0+0xb2>
        else if (type == DLMS_DATA_TYPE_INT64)
    4a1e:	2d14      	cmp	r5, #20
    4a20:	d106      	bne.n	4a30 <convert.part.0+0x258>
            item->ullVal = (uint64_t)hlp_stringToInt64((char*)tmp.strVal->data);
    4a22:	9b04      	ldr	r3, [sp, #16]
    4a24:	6818      	ldr	r0, [r3, #0]
    4a26:	f016 f9e4 	bl	1adf2 <hlp_stringToInt64>
    4a2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
            item->vt = type;
    4a2e:	e7d8      	b.n	49e2 <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_UINT64)
    4a30:	2d15      	cmp	r5, #21
    4a32:	d0f6      	beq.n	4a22 <convert.part.0+0x24a>
        else if (type == DLMS_DATA_TYPE_ENUM)
    4a34:	2d16      	cmp	r5, #22
    4a36:	d0da      	beq.n	49ee <convert.part.0+0x216>
        else if (type == DLMS_DATA_TYPE_FLOAT32)
    4a38:	2d17      	cmp	r5, #23
    4a3a:	d107      	bne.n	4a4c <convert.part.0+0x274>
            sscanf((char*)tmp.strVal->data, "%f", &item->fltVal);
    4a3c:	9b04      	ldr	r3, [sp, #16]
    4a3e:	492f      	ldr	r1, [pc, #188]	; (4afc <convert.part.0+0x324>)
    4a40:	f104 0208 	add.w	r2, r4, #8
            sscanf((char*)tmp.strVal->data, "%lf", &item->dblVal);
    4a44:	6818      	ldr	r0, [r3, #0]
    4a46:	f007 ffdd 	bl	ca04 <siscanf>
            item->vt = type;
    4a4a:	e7ca      	b.n	49e2 <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_FLOAT64)
    4a4c:	2d18      	cmp	r5, #24
    4a4e:	d104      	bne.n	4a5a <convert.part.0+0x282>
            sscanf((char*)tmp.strVal->data, "%lf", &item->dblVal);
    4a50:	9b04      	ldr	r3, [sp, #16]
    4a52:	492b      	ldr	r1, [pc, #172]	; (4b00 <convert.part.0+0x328>)
    4a54:	f104 0208 	add.w	r2, r4, #8
    4a58:	e7f4      	b.n	4a44 <convert.part.0+0x26c>
        else if (type == DLMS_DATA_TYPE_OCTET_STRING)
    4a5a:	2d09      	cmp	r5, #9
    4a5c:	d13f      	bne.n	4ade <convert.part.0+0x306>
            char* pBuff = (char*)tmp.strVal->data;
    4a5e:	9b04      	ldr	r3, [sp, #16]
            item->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    4a60:	200c      	movs	r0, #12
            char* pBuff = (char*)tmp.strVal->data;
    4a62:	681f      	ldr	r7, [r3, #0]
            item->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    4a64:	f007 fefe 	bl	c864 <malloc>
    4a68:	60a0      	str	r0, [r4, #8]
            BYTE_BUFFER_INIT(item->byteArr);
    4a6a:	f008 ff1f 	bl	d8ac <bb_init>
            bb_addHexString(item->byteArr, pBuff);
    4a6e:	4639      	mov	r1, r7
    4a70:	68a0      	ldr	r0, [r4, #8]
    4a72:	f009 fa34 	bl	dede <bb_addHexString>
            item->vt = type;
    4a76:	7025      	strb	r5, [r4, #0]
            var_clear(&tmp);
    4a78:	a802      	add	r0, sp, #8
    4a7a:	f016 fd34 	bl	1b4e6 <var_clear>
            bb_trim(item->byteArr);
    4a7e:	68a0      	ldr	r0, [r4, #8]
    4a80:	f009 fab9 	bl	dff6 <bb_trim>
            return DLMS_ERROR_CODE_OK;
    4a84:	e72c      	b.n	48e0 <convert.part.0+0x108>
    fromSize = var_getSize(tmp.vt);
    4a86:	f89d 2008 	ldrb.w	r2, [sp, #8]
    switch (vt)
    4a8a:	2a19      	cmp	r2, #25
    4a8c:	f10d 0810 	add.w	r8, sp, #16
    4a90:	d82a      	bhi.n	4ae8 <convert.part.0+0x310>
    4a92:	491c      	ldr	r1, [pc, #112]	; (4b04 <convert.part.0+0x32c>)
    4a94:	2b19      	cmp	r3, #25
    4a96:	568f      	ldrsb	r7, [r1, r2]
    4a98:	d80e      	bhi.n	4ab8 <convert.part.0+0x2e0>
    4a9a:	4a1a      	ldr	r2, [pc, #104]	; (4b04 <convert.part.0+0x32c>)
    4a9c:	56d2      	ldrsb	r2, [r2, r3]
    if (fromSize > toSize)
    4a9e:	42ba      	cmp	r2, r7
    4aa0:	db0d      	blt.n	4abe <convert.part.0+0x2e6>
        memset(&item->bVal, 0, toSize);
    4aa2:	f104 0308 	add.w	r3, r4, #8
__ssp_bos_icheck3(memset, void *, int)
    4aa6:	2100      	movs	r1, #0
    4aa8:	4618      	mov	r0, r3
    4aaa:	f018 ff2c 	bl	1d906 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4aae:	463a      	mov	r2, r7
    4ab0:	4641      	mov	r1, r8
    4ab2:	f018 feed 	bl	1d890 <memcpy>
    4ab6:	e794      	b.n	49e2 <convert.part.0+0x20a>
    fromSize = var_getSize(tmp.vt);
    4ab8:	f04f 32ff 	mov.w	r2, #4294967295
    4abc:	e7ef      	b.n	4a9e <convert.part.0+0x2c6>
        for (pos = (unsigned char)toSize; pos != (unsigned char)fromSize; ++pos)
    4abe:	b2d3      	uxtb	r3, r2
    4ac0:	b2bf      	uxth	r7, r7
    4ac2:	429f      	cmp	r7, r3
    4ac4:	d103      	bne.n	4ace <convert.part.0+0x2f6>
    4ac6:	4641      	mov	r1, r8
    4ac8:	f104 0008 	add.w	r0, r4, #8
    4acc:	e7f1      	b.n	4ab2 <convert.part.0+0x2da>
            if (pValue[pos] != 0)
    4ace:	f818 1003 	ldrb.w	r1, [r8, r3]
    4ad2:	b931      	cbnz	r1, 4ae2 <convert.part.0+0x30a>
        for (pos = (unsigned char)toSize; pos != (unsigned char)fromSize; ++pos)
    4ad4:	3301      	adds	r3, #1
    4ad6:	b29b      	uxth	r3, r3
    4ad8:	e7f3      	b.n	4ac2 <convert.part.0+0x2ea>
                ret = var_copy(&tmp3, it);
    4ada:	4606      	mov	r6, r0
    4adc:	e700      	b.n	48e0 <convert.part.0+0x108>
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
    4ade:	26fe      	movs	r6, #254	; 0xfe
    4ae0:	e6fe      	b.n	48e0 <convert.part.0+0x108>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4ae2:	f44f 7681 	mov.w	r6, #258	; 0x102
    4ae6:	e6fb      	b.n	48e0 <convert.part.0+0x108>
    switch (vt)
    4ae8:	2b19      	cmp	r3, #25
    fromSize = var_getSize(tmp.vt);
    4aea:	f04f 37ff 	mov.w	r7, #4294967295
    4aee:	d9d4      	bls.n	4a9a <convert.part.0+0x2c2>
    4af0:	463a      	mov	r2, r7
    4af2:	e7d6      	b.n	4aa2 <convert.part.0+0x2ca>
    4af4:	0001ee8d 	.word	0x0001ee8d
    4af8:	0001ee93 	.word	0x0001ee93
    4afc:	0001ee98 	.word	0x0001ee98
    4b00:	0001ee9b 	.word	0x0001ee9b
    4b04:	0001ee9f 	.word	0x0001ee9f

00004b08 <var_changeType>:
{
    4b08:	b410      	push	{r4}
    if (newType == value->vt)
    4b0a:	7802      	ldrb	r2, [r0, #0]
    4b0c:	428a      	cmp	r2, r1
{
    4b0e:	4604      	mov	r4, r0
    4b10:	460b      	mov	r3, r1
    if (newType == value->vt)
    4b12:	d007      	beq.n	4b24 <var_changeType+0x1c>
    if (newType == DLMS_DATA_TYPE_NONE)
    4b14:	b911      	cbnz	r1, 4b1c <var_changeType+0x14>
}
    4b16:	bc10      	pop	{r4}
        return var_clear(value);
    4b18:	f016 bce5 	b.w	1b4e6 <var_clear>
    if (value->vt == DLMS_DATA_TYPE_ARRAY && newType == DLMS_DATA_TYPE_OCTET_STRING)
    4b1c:	2a01      	cmp	r2, #1
    4b1e:	d103      	bne.n	4b28 <var_changeType+0x20>
    4b20:	2909      	cmp	r1, #9
    4b22:	d17c      	bne.n	4c1e <var_changeType+0x116>
    return DLMS_ERROR_CODE_OK;
    4b24:	2000      	movs	r0, #0
    4b26:	e02d      	b.n	4b84 <var_changeType+0x7c>
    if (value->vt == DLMS_DATA_TYPE_STRING)
    4b28:	2a0a      	cmp	r2, #10
    4b2a:	d102      	bne.n	4b32 <var_changeType+0x2a>
}
    4b2c:	bc10      	pop	{r4}
    4b2e:	f7ff be53 	b.w	47d8 <convert.part.0>
    switch (newType)
    4b32:	3903      	subs	r1, #3
    4b34:	2915      	cmp	r1, #21
    4b36:	d80f      	bhi.n	4b58 <var_changeType+0x50>
    4b38:	e8df f001 	tbb	[pc, r1]
    4b3c:	0b0b0e0b 	.word	0x0b0b0e0b
    4b40:	0b0e0e0e 	.word	0x0b0e0e0e
    4b44:	0e0e0e0e 	.word	0x0e0e0e0e
    4b48:	0b0b0b0b 	.word	0x0b0b0b0b
    4b4c:	0b0b0b0e 	.word	0x0b0b0b0e
    4b50:	0b0b      	.short	0x0b0b
    if (item->vt == type)
    4b52:	4619      	mov	r1, r3
    4b54:	4620      	mov	r0, r4
    4b56:	e7e9      	b.n	4b2c <var_changeType+0x24>
    switch (value->vt)
    4b58:	3a05      	subs	r2, #5
    4b5a:	2a16      	cmp	r2, #22
    4b5c:	d85c      	bhi.n	4c18 <var_changeType+0x110>
    4b5e:	e8df f002 	tbb	[pc, r2]
    4b62:	0c0c      	.short	0x0c0c
    4b64:	5b135b5b 	.word	0x5b135b5b
    4b68:	5b1b5b5b 	.word	0x5b1b5b5b
    4b6c:	0c0c0c0c 	.word	0x0c0c0c0c
    4b70:	0c0c0c5b 	.word	0x0c0c0c5b
    4b74:	56490c0c 	.word	0x56490c0c
    4b78:	56          	.byte	0x56
    4b79:	00          	.byte	0x00
        switch (newType)
    4b7a:	2b0d      	cmp	r3, #13
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4b7c:	bf0c      	ite	eq
    4b7e:	20fe      	moveq	r0, #254	; 0xfe
    4b80:	f44f 7081 	movne.w	r0, #258	; 0x102
}
    4b84:	bc10      	pop	{r4}
    4b86:	4770      	bx	lr
        switch (newType)
    4b88:	3b19      	subs	r3, #25
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4b8a:	2b02      	cmp	r3, #2
    4b8c:	bf98      	it	ls
    4b8e:	20fe      	movls	r0, #254	; 0xfe
    4b90:	bf88      	it	hi
    4b92:	f44f 7081 	movhi.w	r0, #258	; 0x102
    4b96:	e7f5      	b.n	4b84 <var_changeType+0x7c>
        switch (newType)
    4b98:	3b05      	subs	r3, #5
    4b9a:	2b13      	cmp	r3, #19
    4b9c:	d83c      	bhi.n	4c18 <var_changeType+0x110>
    4b9e:	a201      	add	r2, pc, #4	; (adr r2, 4ba4 <var_changeType+0x9c>)
    4ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4ba4:	00004b25 	.word	0x00004b25
    4ba8:	00004b25 	.word	0x00004b25
    4bac:	00004c19 	.word	0x00004c19
    4bb0:	00004c19 	.word	0x00004c19
    4bb4:	00004c19 	.word	0x00004c19
    4bb8:	00004b25 	.word	0x00004b25
    4bbc:	00004c19 	.word	0x00004c19
    4bc0:	00004c19 	.word	0x00004c19
    4bc4:	00004c19 	.word	0x00004c19
    4bc8:	00004c19 	.word	0x00004c19
    4bcc:	00004b25 	.word	0x00004b25
    4bd0:	00004b25 	.word	0x00004b25
    4bd4:	00004b25 	.word	0x00004b25
    4bd8:	00004b25 	.word	0x00004b25
    4bdc:	00004c19 	.word	0x00004c19
    4be0:	00004b25 	.word	0x00004b25
    4be4:	00004b25 	.word	0x00004b25
    4be8:	00004b25 	.word	0x00004b25
    4bec:	00004b25 	.word	0x00004b25
    4bf0:	00004b25 	.word	0x00004b25
        switch (newType)
    4bf4:	2b0a      	cmp	r3, #10
    4bf6:	d805      	bhi.n	4c04 <var_changeType+0xfc>
    return DLMS_ERROR_CODE_OK;
    4bf8:	2b09      	cmp	r3, #9
    4bfa:	bf34      	ite	cc
    4bfc:	f44f 7081 	movcc.w	r0, #258	; 0x102
    4c00:	2000      	movcs	r0, #0
    4c02:	e7bf      	b.n	4b84 <var_changeType+0x7c>
    4c04:	3b1a      	subs	r3, #26
    4c06:	2b01      	cmp	r3, #1
    4c08:	bf98      	it	ls
    4c0a:	2000      	movls	r0, #0
    4c0c:	e7c0      	b.n	4b90 <var_changeType+0x88>
        switch (newType)
    4c0e:	2b0a      	cmp	r3, #10
    4c10:	d9f2      	bls.n	4bf8 <var_changeType+0xf0>
    4c12:	3b19      	subs	r3, #25
    4c14:	2b02      	cmp	r3, #2
    4c16:	e7f7      	b.n	4c08 <var_changeType+0x100>
    if (value->vt == DLMS_DATA_TYPE_ARRAY && newType == DLMS_DATA_TYPE_OCTET_STRING)
    4c18:	f44f 7081 	mov.w	r0, #258	; 0x102
    4c1c:	e7b2      	b.n	4b84 <var_changeType+0x7c>
    switch (newType)
    4c1e:	1eca      	subs	r2, r1, #3
    4c20:	2a15      	cmp	r2, #21
    4c22:	d8f9      	bhi.n	4c18 <var_changeType+0x110>
    4c24:	a101      	add	r1, pc, #4	; (adr r1, 4c2c <var_changeType+0x124>)
    4c26:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4c2a:	bf00      	nop
    4c2c:	00004b53 	.word	0x00004b53
    4c30:	00004c19 	.word	0x00004c19
    4c34:	00004b53 	.word	0x00004b53
    4c38:	00004b53 	.word	0x00004b53
    4c3c:	00004c19 	.word	0x00004c19
    4c40:	00004c19 	.word	0x00004c19
    4c44:	00004c19 	.word	0x00004c19
    4c48:	00004b53 	.word	0x00004b53
    4c4c:	00004c19 	.word	0x00004c19
    4c50:	00004c19 	.word	0x00004c19
    4c54:	00004c19 	.word	0x00004c19
    4c58:	00004c19 	.word	0x00004c19
    4c5c:	00004b53 	.word	0x00004b53
    4c60:	00004b53 	.word	0x00004b53
    4c64:	00004b53 	.word	0x00004b53
    4c68:	00004b53 	.word	0x00004b53
    4c6c:	00004c19 	.word	0x00004c19
    4c70:	00004b53 	.word	0x00004b53
    4c74:	00004b53 	.word	0x00004b53
    4c78:	00004b53 	.word	0x00004b53
    4c7c:	00004b53 	.word	0x00004b53
    4c80:	00004b53 	.word	0x00004b53

00004c84 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4c84:	680b      	ldr	r3, [r1, #0]
    4c86:	3301      	adds	r3, #1
    4c88:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    4c8a:	4b01      	ldr	r3, [pc, #4]	; (4c90 <char_out+0xc>)
    4c8c:	681b      	ldr	r3, [r3, #0]
    4c8e:	4718      	bx	r3
    4c90:	20000008 	.word	0x20000008

00004c94 <__printk_hook_install>:
	_char_out = fn;
    4c94:	4b01      	ldr	r3, [pc, #4]	; (4c9c <__printk_hook_install+0x8>)
    4c96:	6018      	str	r0, [r3, #0]
}
    4c98:	4770      	bx	lr
    4c9a:	bf00      	nop
    4c9c:	20000008 	.word	0x20000008

00004ca0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4ca0:	b507      	push	{r0, r1, r2, lr}
    4ca2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    4ca4:	2100      	movs	r1, #0
{
    4ca6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    4ca8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    4caa:	4803      	ldr	r0, [pc, #12]	; (4cb8 <vprintk+0x18>)
    4cac:	a901      	add	r1, sp, #4
    4cae:	f000 f965 	bl	4f7c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    4cb2:	b003      	add	sp, #12
    4cb4:	f85d fb04 	ldr.w	pc, [sp], #4
    4cb8:	00004c85 	.word	0x00004c85

00004cbc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4cbc:	b530      	push	{r4, r5, lr}
    4cbe:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4cc0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4cc4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4cc6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4cc8:	a901      	add	r1, sp, #4
    4cca:	4805      	ldr	r0, [pc, #20]	; (4ce0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4ccc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4cce:	f000 f955 	bl	4f7c <cbvprintf>

	if (ctx.count < ctx.max) {
    4cd2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4cd6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4cd8:	bfb8      	it	lt
    4cda:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4cdc:	b005      	add	sp, #20
    4cde:	bd30      	pop	{r4, r5, pc}
    4ce0:	0001bbd5 	.word	0x0001bbd5

00004ce4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4ce8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4cec:	f019 0808 	ands.w	r8, r9, #8
{
    4cf0:	4604      	mov	r4, r0
    4cf2:	4693      	mov	fp, r2
	if (processing) {
    4cf4:	d00d      	beq.n	4d12 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4cf6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4cf8:	bf0c      	ite	eq
    4cfa:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4cfe:	f049 0920 	orrne.w	r9, r9, #32
    4d02:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4d06:	f38b 8811 	msr	BASEPRI, fp
    4d0a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d12:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4d16:	2902      	cmp	r1, #2
    4d18:	d107      	bne.n	4d2a <process_event+0x46>
			evt = process_recheck(mgr);
    4d1a:	4620      	mov	r0, r4
    4d1c:	f016 ff87 	bl	1bc2e <process_recheck>
		if (evt == EVT_NOP) {
    4d20:	2800      	cmp	r0, #0
    4d22:	d0f0      	beq.n	4d06 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4d24:	2801      	cmp	r0, #1
    4d26:	8b23      	ldrh	r3, [r4, #24]
    4d28:	d150      	bne.n	4dcc <process_event+0xe8>
			res = mgr->last_res;
    4d2a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d2c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4d2e:	2f00      	cmp	r7, #0
    4d30:	da15      	bge.n	4d5e <process_event+0x7a>
		*clients = mgr->clients;
    4d32:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4d34:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4d38:	e9c4 8800 	strd	r8, r8, [r4]
    4d3c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4d40:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4d42:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4d44:	8b21      	ldrh	r1, [r4, #24]
    4d46:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4d4a:	45ca      	cmp	sl, r9
    4d4c:	d002      	beq.n	4d54 <process_event+0x70>
		if (do_monitors
    4d4e:	68a3      	ldr	r3, [r4, #8]
    4d50:	2b00      	cmp	r3, #0
    4d52:	d15c      	bne.n	4e0e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    4d54:	b90d      	cbnz	r5, 4d5a <process_event+0x76>
		    || (transit != NULL)) {
    4d56:	2e00      	cmp	r6, #0
    4d58:	d074      	beq.n	4e44 <process_event+0x160>
    4d5a:	2300      	movs	r3, #0
    4d5c:	e058      	b.n	4e10 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d5e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4d62:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4d64:	2a01      	cmp	r2, #1
    4d66:	d820      	bhi.n	4daa <process_event+0xc6>
		*clients = mgr->clients;
    4d68:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4d6c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4d6e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    4d70:	b289      	uxth	r1, r1
	list->tail = NULL;
    4d72:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4d76:	d10c      	bne.n	4d92 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    4d78:	2d00      	cmp	r5, #0
    4d7a:	462b      	mov	r3, r5
    4d7c:	bf38      	it	cc
    4d7e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4d80:	b12b      	cbz	r3, 4d8e <process_event+0xaa>
				mgr->refs += 1U;
    4d82:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4d84:	681b      	ldr	r3, [r3, #0]
    4d86:	3201      	adds	r2, #1
    4d88:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d1f8      	bne.n	4d80 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4d8e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4d92:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4d94:	4620      	mov	r0, r4
    4d96:	f016 ff4a 	bl	1bc2e <process_recheck>
    4d9a:	4606      	mov	r6, r0
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d0d1      	beq.n	4d44 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4da0:	8b23      	ldrh	r3, [r4, #24]
    4da2:	f043 0320 	orr.w	r3, r3, #32
    4da6:	8323      	strh	r3, [r4, #24]
    4da8:	e7cb      	b.n	4d42 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4daa:	2b04      	cmp	r3, #4
    4dac:	d10c      	bne.n	4dc8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4dae:	f021 0107 	bic.w	r1, r1, #7
    4db2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4db4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4db6:	4620      	mov	r0, r4
    4db8:	f016 ff39 	bl	1bc2e <process_recheck>
    4dbc:	4605      	mov	r5, r0
    4dbe:	2800      	cmp	r0, #0
    4dc0:	d0bf      	beq.n	4d42 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4dc2:	f041 0120 	orr.w	r1, r1, #32
    4dc6:	8321      	strh	r1, [r4, #24]
    4dc8:	2500      	movs	r5, #0
    4dca:	e7ba      	b.n	4d42 <process_event+0x5e>
		} else if (evt == EVT_START) {
    4dcc:	2803      	cmp	r0, #3
    4dce:	d109      	bne.n	4de4 <process_event+0x100>
			transit = mgr->transitions->start;
    4dd0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4dd2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4dd6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4dd8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4ddc:	8323      	strh	r3, [r4, #24]
}
    4dde:	2500      	movs	r5, #0
		res = 0;
    4de0:	462f      	mov	r7, r5
    4de2:	e7af      	b.n	4d44 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4de4:	2804      	cmp	r0, #4
    4de6:	d106      	bne.n	4df6 <process_event+0x112>
			transit = mgr->transitions->stop;
    4de8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4dea:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4dee:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4df0:	f043 0304 	orr.w	r3, r3, #4
    4df4:	e7f2      	b.n	4ddc <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    4df6:	2805      	cmp	r0, #5
    4df8:	d106      	bne.n	4e08 <process_event+0x124>
			transit = mgr->transitions->reset;
    4dfa:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4dfc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4e00:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e02:	f043 0305 	orr.w	r3, r3, #5
    4e06:	e7e9      	b.n	4ddc <process_event+0xf8>
    4e08:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4e0a:	462e      	mov	r6, r5
    4e0c:	e7e8      	b.n	4de0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    4e0e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4e10:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4e14:	8321      	strh	r1, [r4, #24]
    4e16:	f38b 8811 	msr	BASEPRI, fp
    4e1a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4e1e:	bb03      	cbnz	r3, 4e62 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    4e20:	2d00      	cmp	r5, #0
    4e22:	d133      	bne.n	4e8c <process_event+0x1a8>
			if (transit != NULL) {
    4e24:	b116      	cbz	r6, 4e2c <process_event+0x148>
				transit(mgr, transition_complete);
    4e26:	4921      	ldr	r1, [pc, #132]	; (4eac <process_event+0x1c8>)
    4e28:	4620      	mov	r0, r4
    4e2a:	47b0      	blx	r6
	__asm__ volatile(
    4e2c:	f04f 0320 	mov.w	r3, #32
    4e30:	f3ef 8b11 	mrs	fp, BASEPRI
    4e34:	f383 8812 	msr	BASEPRI_MAX, r3
    4e38:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4e3c:	8b23      	ldrh	r3, [r4, #24]
    4e3e:	f023 0308 	bic.w	r3, r3, #8
    4e42:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4e44:	8b23      	ldrh	r3, [r4, #24]
    4e46:	06da      	lsls	r2, r3, #27
    4e48:	d528      	bpl.n	4e9c <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4e4a:	f023 0310 	bic.w	r3, r3, #16
    4e4e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    4e50:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4e52:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    4e56:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    4e5a:	2900      	cmp	r1, #0
    4e5c:	f47f af5b 	bne.w	4d16 <process_event+0x32>
out:
    4e60:	e751      	b.n	4d06 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4e62:	68a1      	ldr	r1, [r4, #8]
    4e64:	2900      	cmp	r1, #0
    4e66:	d0db      	beq.n	4e20 <process_event+0x13c>
	return node->next;
    4e68:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    4e6a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	bf38      	it	cc
    4e72:	2300      	movcc	r3, #0
    4e74:	4699      	mov	r9, r3
    4e76:	4652      	mov	r2, sl
    4e78:	463b      	mov	r3, r7
    4e7a:	4620      	mov	r0, r4
    4e7c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4e7e:	f1b9 0f00 	cmp.w	r9, #0
    4e82:	d0cd      	beq.n	4e20 <process_event+0x13c>
    4e84:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4e88:	4649      	mov	r1, r9
    4e8a:	e7ee      	b.n	4e6a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4e8c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4e8e:	463b      	mov	r3, r7
    4e90:	4652      	mov	r2, sl
    4e92:	4620      	mov	r0, r4
    4e94:	682d      	ldr	r5, [r5, #0]
    4e96:	f016 fee6 	bl	1bc66 <notify_one>
    4e9a:	e7c1      	b.n	4e20 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4e9c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4ea0:	bf1e      	ittt	ne
    4ea2:	f023 0320 	bicne.w	r3, r3, #32
    4ea6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4ea8:	2102      	movne	r1, #2
    4eaa:	e7d2      	b.n	4e52 <process_event+0x16e>
    4eac:	0001bc93 	.word	0x0001bc93

00004eb0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    4eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    4eb2:	4e09      	ldr	r6, [pc, #36]	; (4ed8 <extract_decimal+0x28>)
    4eb4:	6801      	ldr	r1, [r0, #0]
{
    4eb6:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    4eb8:	270a      	movs	r7, #10
	size_t val = 0;
    4eba:	2000      	movs	r0, #0
    4ebc:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    4ebe:	3101      	adds	r1, #1
    4ec0:	7823      	ldrb	r3, [r4, #0]
    4ec2:	5d9d      	ldrb	r5, [r3, r6]
    4ec4:	076d      	lsls	r5, r5, #29
    4ec6:	d401      	bmi.n	4ecc <extract_decimal+0x1c>
	}
	*str = sp;
    4ec8:	6014      	str	r4, [r2, #0]
	return val;
}
    4eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    4ecc:	fb07 3300 	mla	r3, r7, r0, r3
    4ed0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4ed4:	e7f2      	b.n	4ebc <extract_decimal+0xc>
    4ed6:	bf00      	nop
    4ed8:	0001f954 	.word	0x0001f954

00004edc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ee0:	4614      	mov	r4, r2
    4ee2:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    4ee4:	78d3      	ldrb	r3, [r2, #3]
    4ee6:	4a24      	ldr	r2, [pc, #144]	; (4f78 <encode_uint+0x9c>)
    4ee8:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    4eec:	2b6f      	cmp	r3, #111	; 0x6f
    4eee:	f00a 0203 	and.w	r2, sl, #3
{
    4ef2:	4606      	mov	r6, r0
    4ef4:	460f      	mov	r7, r1
    4ef6:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    4ef8:	d02d      	beq.n	4f56 <encode_uint+0x7a>
    4efa:	d828      	bhi.n	4f4e <encode_uint+0x72>
		return 16;
    4efc:	2b58      	cmp	r3, #88	; 0x58
    4efe:	bf14      	ite	ne
    4f00:	250a      	movne	r5, #10
    4f02:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    4f04:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    4f08:	46aa      	mov	sl, r5
    4f0a:	f04f 0b00 	mov.w	fp, #0
    4f0e:	4652      	mov	r2, sl
    4f10:	465b      	mov	r3, fp
    4f12:	4630      	mov	r0, r6
    4f14:	4639      	mov	r1, r7
    4f16:	f7fb fdcf 	bl	ab8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f1a:	2a09      	cmp	r2, #9
    4f1c:	b2d3      	uxtb	r3, r2
    4f1e:	d81f      	bhi.n	4f60 <encode_uint+0x84>
    4f20:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    4f22:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f24:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    4f26:	bf08      	it	eq
    4f28:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f2a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    4f2e:	d301      	bcc.n	4f34 <encode_uint+0x58>
    4f30:	45c8      	cmp	r8, r9
    4f32:	d812      	bhi.n	4f5a <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4f34:	7823      	ldrb	r3, [r4, #0]
    4f36:	069b      	lsls	r3, r3, #26
    4f38:	d505      	bpl.n	4f46 <encode_uint+0x6a>
		if (radix == 8) {
    4f3a:	2d08      	cmp	r5, #8
    4f3c:	d116      	bne.n	4f6c <encode_uint+0x90>
			conv->altform_0 = true;
    4f3e:	78a3      	ldrb	r3, [r4, #2]
    4f40:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    4f44:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
    4f46:	4640      	mov	r0, r8
    4f48:	b003      	add	sp, #12
    4f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4f4e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    4f52:	2b70      	cmp	r3, #112	; 0x70
    4f54:	e7d3      	b.n	4efe <encode_uint+0x22>
	switch (specifier) {
    4f56:	2508      	movs	r5, #8
    4f58:	e7d4      	b.n	4f04 <encode_uint+0x28>
		value /= radix;
    4f5a:	4606      	mov	r6, r0
    4f5c:	460f      	mov	r7, r1
    4f5e:	e7d6      	b.n	4f0e <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f60:	9a01      	ldr	r2, [sp, #4]
    4f62:	2a01      	cmp	r2, #1
    4f64:	bf0c      	ite	eq
    4f66:	3337      	addeq	r3, #55	; 0x37
    4f68:	3357      	addne	r3, #87	; 0x57
    4f6a:	e7da      	b.n	4f22 <encode_uint+0x46>
		} else if (radix == 16) {
    4f6c:	2d10      	cmp	r5, #16
    4f6e:	d1ea      	bne.n	4f46 <encode_uint+0x6a>
			conv->altform_0c = true;
    4f70:	78a3      	ldrb	r3, [r4, #2]
    4f72:	f043 0310 	orr.w	r3, r3, #16
    4f76:	e7e5      	b.n	4f44 <encode_uint+0x68>
    4f78:	0001f954 	.word	0x0001f954

00004f7c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f80:	4682      	mov	sl, r0
    4f82:	b093      	sub	sp, #76	; 0x4c
    4f84:	468b      	mov	fp, r1
    4f86:	4691      	mov	r9, r2
    4f88:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4f8a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4f8c:	f899 0000 	ldrb.w	r0, [r9]
    4f90:	b908      	cbnz	r0, 4f96 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4f92:	4628      	mov	r0, r5
    4f94:	e33a      	b.n	560c <cbvprintf+0x690>
		if (*fp != '%') {
    4f96:	f109 0301 	add.w	r3, r9, #1
    4f9a:	2825      	cmp	r0, #37	; 0x25
    4f9c:	9302      	str	r3, [sp, #8]
    4f9e:	d006      	beq.n	4fae <cbvprintf+0x32>
			OUTC('%');
    4fa0:	4659      	mov	r1, fp
    4fa2:	47d0      	blx	sl
    4fa4:	2800      	cmp	r0, #0
    4fa6:	f2c0 8331 	blt.w	560c <cbvprintf+0x690>
    4faa:	3501      	adds	r5, #1
			break;
    4fac:	e1f1      	b.n	5392 <cbvprintf+0x416>
		} state = {
    4fae:	2218      	movs	r2, #24
    4fb0:	2100      	movs	r1, #0
    4fb2:	a80c      	add	r0, sp, #48	; 0x30
    4fb4:	f018 fca7 	bl	1d906 <memset>
	if (*sp == '%') {
    4fb8:	f899 3001 	ldrb.w	r3, [r9, #1]
    4fbc:	2b25      	cmp	r3, #37	; 0x25
    4fbe:	d059      	beq.n	5074 <cbvprintf+0xf8>
    4fc0:	9a02      	ldr	r2, [sp, #8]
    4fc2:	4616      	mov	r6, r2
		switch (*sp) {
    4fc4:	f812 3b01 	ldrb.w	r3, [r2], #1
    4fc8:	2b2b      	cmp	r3, #43	; 0x2b
    4fca:	f000 808b 	beq.w	50e4 <cbvprintf+0x168>
    4fce:	d879      	bhi.n	50c4 <cbvprintf+0x148>
    4fd0:	2b20      	cmp	r3, #32
    4fd2:	f000 808c 	beq.w	50ee <cbvprintf+0x172>
    4fd6:	2b23      	cmp	r3, #35	; 0x23
    4fd8:	f000 808e 	beq.w	50f8 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    4fdc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fe0:	f003 0244 	and.w	r2, r3, #68	; 0x44
    4fe4:	2a44      	cmp	r2, #68	; 0x44
    4fe6:	d103      	bne.n	4ff0 <cbvprintf+0x74>
		conv->flag_zero = false;
    4fe8:	f36f 1386 	bfc	r3, #6, #1
    4fec:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    4ff0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4ff4:	9605      	str	r6, [sp, #20]
    4ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4ffa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    4ffe:	7833      	ldrb	r3, [r6, #0]
    5000:	2b2a      	cmp	r3, #42	; 0x2a
    5002:	d17e      	bne.n	5102 <cbvprintf+0x186>
		conv->width_star = true;
    5004:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5008:	f043 0301 	orr.w	r3, r3, #1
    500c:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    5010:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    5012:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    5014:	781a      	ldrb	r2, [r3, #0]
    5016:	2a2e      	cmp	r2, #46	; 0x2e
    5018:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    501c:	bf0c      	ite	eq
    501e:	2101      	moveq	r1, #1
    5020:	2100      	movne	r1, #0
    5022:	f361 0241 	bfi	r2, r1, #1, #1
    5026:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    502a:	d10b      	bne.n	5044 <cbvprintf+0xc8>
	++sp;
    502c:	1c5a      	adds	r2, r3, #1
    502e:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    5030:	785a      	ldrb	r2, [r3, #1]
    5032:	2a2a      	cmp	r2, #42	; 0x2a
    5034:	d17b      	bne.n	512e <cbvprintf+0x1b2>
		conv->prec_star = true;
    5036:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    503a:	f042 0204 	orr.w	r2, r2, #4
    503e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    5042:	3302      	adds	r3, #2
	switch (*sp) {
    5044:	4619      	mov	r1, r3
    5046:	f811 0b01 	ldrb.w	r0, [r1], #1
    504a:	286c      	cmp	r0, #108	; 0x6c
    504c:	f000 80b6 	beq.w	51bc <cbvprintf+0x240>
    5050:	d87d      	bhi.n	514e <cbvprintf+0x1d2>
    5052:	2868      	cmp	r0, #104	; 0x68
    5054:	f000 8084 	beq.w	5160 <cbvprintf+0x1e4>
    5058:	286a      	cmp	r0, #106	; 0x6a
    505a:	f000 80b9 	beq.w	51d0 <cbvprintf+0x254>
    505e:	284c      	cmp	r0, #76	; 0x4c
    5060:	f000 80bd 	beq.w	51de <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    5064:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5068:	f36f 02c6 	bfc	r2, #3, #4
    506c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    5070:	4619      	mov	r1, r3
    5072:	e080      	b.n	5176 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    5074:	f109 0202 	add.w	r2, r9, #2
    5078:	9202      	str	r2, [sp, #8]
    507a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    507e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5082:	07d9      	lsls	r1, r3, #31
    5084:	f140 8149 	bpl.w	531a <cbvprintf+0x39e>
			width = va_arg(ap, int);
    5088:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    508c:	f1b8 0f00 	cmp.w	r8, #0
    5090:	da07      	bge.n	50a2 <cbvprintf+0x126>
				conv->flag_dash = true;
    5092:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5096:	f042 0204 	orr.w	r2, r2, #4
    509a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    509e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    50a2:	075a      	lsls	r2, r3, #29
    50a4:	f140 8142 	bpl.w	532c <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    50a8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    50ac:	2f00      	cmp	r7, #0
    50ae:	f280 8141 	bge.w	5334 <cbvprintf+0x3b8>
				conv->prec_present = false;
    50b2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    50b6:	f36f 0341 	bfc	r3, #1, #1
    50ba:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    50be:	f04f 37ff 	mov.w	r7, #4294967295
    50c2:	e137      	b.n	5334 <cbvprintf+0x3b8>
		switch (*sp) {
    50c4:	2b2d      	cmp	r3, #45	; 0x2d
    50c6:	d006      	beq.n	50d6 <cbvprintf+0x15a>
    50c8:	2b30      	cmp	r3, #48	; 0x30
    50ca:	d187      	bne.n	4fdc <cbvprintf+0x60>
			conv->flag_zero = true;
    50cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    50d4:	e003      	b.n	50de <cbvprintf+0x162>
			conv->flag_dash = true;
    50d6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50da:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    50de:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    50e2:	e76e      	b.n	4fc2 <cbvprintf+0x46>
			conv->flag_plus = true;
    50e4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50e8:	f043 0308 	orr.w	r3, r3, #8
    50ec:	e7f7      	b.n	50de <cbvprintf+0x162>
			conv->flag_space = true;
    50ee:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50f2:	f043 0310 	orr.w	r3, r3, #16
    50f6:	e7f2      	b.n	50de <cbvprintf+0x162>
			conv->flag_hash = true;
    50f8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50fc:	f043 0320 	orr.w	r3, r3, #32
    5100:	e7ed      	b.n	50de <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    5102:	a805      	add	r0, sp, #20
    5104:	f7ff fed4 	bl	4eb0 <extract_decimal>
	if (sp != wp) {
    5108:	9b05      	ldr	r3, [sp, #20]
    510a:	42b3      	cmp	r3, r6
    510c:	d081      	beq.n	5012 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    510e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    5112:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    5114:	f3c1 0240 	ubfx	r2, r1, #1, #1
    5118:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    511c:	0052      	lsls	r2, r2, #1
    511e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5122:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    5126:	430a      	orrs	r2, r1
    5128:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    512c:	e771      	b.n	5012 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    512e:	a805      	add	r0, sp, #20
    5130:	f7ff febe 	bl	4eb0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    5134:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    5138:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    513a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    513e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    5142:	f360 0341 	bfi	r3, r0, #1, #1
    5146:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    514a:	9b05      	ldr	r3, [sp, #20]
    514c:	e77a      	b.n	5044 <cbvprintf+0xc8>
	switch (*sp) {
    514e:	2874      	cmp	r0, #116	; 0x74
    5150:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5154:	d040      	beq.n	51d8 <cbvprintf+0x25c>
    5156:	287a      	cmp	r0, #122	; 0x7a
    5158:	d184      	bne.n	5064 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    515a:	4613      	mov	r3, r2
    515c:	2206      	movs	r2, #6
    515e:	e028      	b.n	51b2 <cbvprintf+0x236>
		if (*++sp == 'h') {
    5160:	785a      	ldrb	r2, [r3, #1]
    5162:	2a68      	cmp	r2, #104	; 0x68
    5164:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5168:	d121      	bne.n	51ae <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    516a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    516c:	f361 02c6 	bfi	r2, r1, #3, #4
    5170:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    5174:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    5176:	460b      	mov	r3, r1
    5178:	f813 2b01 	ldrb.w	r2, [r3], #1
    517c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    517e:	2a78      	cmp	r2, #120	; 0x78
    5180:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    5184:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    5188:	f200 80bf 	bhi.w	530a <cbvprintf+0x38e>
    518c:	2a57      	cmp	r2, #87	; 0x57
    518e:	d833      	bhi.n	51f8 <cbvprintf+0x27c>
    5190:	2a41      	cmp	r2, #65	; 0x41
    5192:	d003      	beq.n	519c <cbvprintf+0x220>
    5194:	3a45      	subs	r2, #69	; 0x45
    5196:	2a02      	cmp	r2, #2
    5198:	f200 80b7 	bhi.w	530a <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    519c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    51a0:	2204      	movs	r2, #4
    51a2:	f362 0302 	bfi	r3, r2, #0, #3
    51a6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    51aa:	2301      	movs	r3, #1
			break;
    51ac:	e084      	b.n	52b8 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    51ae:	4613      	mov	r3, r2
    51b0:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    51b2:	f362 03c6 	bfi	r3, r2, #3, #4
    51b6:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    51ba:	e7dc      	b.n	5176 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    51bc:	785a      	ldrb	r2, [r3, #1]
    51be:	2a6c      	cmp	r2, #108	; 0x6c
    51c0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    51c4:	d101      	bne.n	51ca <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    51c6:	2104      	movs	r1, #4
    51c8:	e7d0      	b.n	516c <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    51ca:	4613      	mov	r3, r2
    51cc:	2203      	movs	r2, #3
    51ce:	e7f0      	b.n	51b2 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    51d0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    51d4:	2205      	movs	r2, #5
    51d6:	e7ec      	b.n	51b2 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    51d8:	4613      	mov	r3, r2
    51da:	2207      	movs	r2, #7
    51dc:	e7e9      	b.n	51b2 <cbvprintf+0x236>
		conv->unsupported = true;
    51de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    51e2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    51e6:	f023 0302 	bic.w	r3, r3, #2
    51ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    51ee:	f043 0302 	orr.w	r3, r3, #2
    51f2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    51f6:	e7be      	b.n	5176 <cbvprintf+0x1fa>
    51f8:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    51fc:	2920      	cmp	r1, #32
    51fe:	f200 8084 	bhi.w	530a <cbvprintf+0x38e>
    5202:	a001      	add	r0, pc, #4	; (adr r0, 5208 <cbvprintf+0x28c>)
    5204:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    5208:	000052cd 	.word	0x000052cd
    520c:	0000530b 	.word	0x0000530b
    5210:	0000530b 	.word	0x0000530b
    5214:	0000530b 	.word	0x0000530b
    5218:	0000530b 	.word	0x0000530b
    521c:	0000530b 	.word	0x0000530b
    5220:	0000530b 	.word	0x0000530b
    5224:	0000530b 	.word	0x0000530b
    5228:	0000530b 	.word	0x0000530b
    522c:	0000519d 	.word	0x0000519d
    5230:	0000530b 	.word	0x0000530b
    5234:	000052cd 	.word	0x000052cd
    5238:	0000528d 	.word	0x0000528d
    523c:	0000519d 	.word	0x0000519d
    5240:	0000519d 	.word	0x0000519d
    5244:	0000519d 	.word	0x0000519d
    5248:	0000530b 	.word	0x0000530b
    524c:	0000528d 	.word	0x0000528d
    5250:	0000530b 	.word	0x0000530b
    5254:	0000530b 	.word	0x0000530b
    5258:	0000530b 	.word	0x0000530b
    525c:	0000530b 	.word	0x0000530b
    5260:	000052d5 	.word	0x000052d5
    5264:	000052cd 	.word	0x000052cd
    5268:	000052f1 	.word	0x000052f1
    526c:	0000530b 	.word	0x0000530b
    5270:	0000530b 	.word	0x0000530b
    5274:	000052f1 	.word	0x000052f1
    5278:	0000530b 	.word	0x0000530b
    527c:	000052cd 	.word	0x000052cd
    5280:	0000530b 	.word	0x0000530b
    5284:	0000530b 	.word	0x0000530b
    5288:	000052cd 	.word	0x000052cd
		conv->specifier_cat = SPECIFIER_SINT;
    528c:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    5290:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    5292:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    5296:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    529a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    529c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    52a0:	bf02      	ittt	eq
    52a2:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    52a6:	f041 0101 	orreq.w	r1, r1, #1
    52aa:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    52ae:	2a63      	cmp	r2, #99	; 0x63
    52b0:	d131      	bne.n	5316 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    52b2:	3b00      	subs	r3, #0
    52b4:	bf18      	it	ne
    52b6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    52b8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    52bc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    52c0:	430b      	orrs	r3, r1
    52c2:	f363 0241 	bfi	r2, r3, #1, #1
    52c6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    52ca:	e6d8      	b.n	507e <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    52cc:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    52d0:	2002      	movs	r0, #2
    52d2:	e7de      	b.n	5292 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    52d4:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    52d8:	f003 0378 	and.w	r3, r3, #120	; 0x78
    52dc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    52e0:	2103      	movs	r1, #3
    52e2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    52e6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    52e8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    52ec:	4143      	adcs	r3, r0
    52ee:	e7e3      	b.n	52b8 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    52f0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    52f4:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    52f6:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    52fa:	f361 0202 	bfi	r2, r1, #0, #3
    52fe:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    5302:	bf14      	ite	ne
    5304:	2301      	movne	r3, #1
    5306:	2300      	moveq	r3, #0
    5308:	e7d6      	b.n	52b8 <cbvprintf+0x33c>
		conv->invalid = true;
    530a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    530e:	f043 0301 	orr.w	r3, r3, #1
    5312:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    5316:	2300      	movs	r3, #0
    5318:	e7ce      	b.n	52b8 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    531a:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    531e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    5320:	bfb4      	ite	lt
    5322:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    5326:	f04f 38ff 	movge.w	r8, #4294967295
    532a:	e6ba      	b.n	50a2 <cbvprintf+0x126>
		} else if (conv->prec_present) {
    532c:	079f      	lsls	r7, r3, #30
    532e:	f57f aec6 	bpl.w	50be <cbvprintf+0x142>
			precision = conv->prec_value;
    5332:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    5334:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    5338:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    533a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    533e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    5342:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    5346:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    5348:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    534c:	d137      	bne.n	53be <cbvprintf+0x442>
			switch (length_mod) {
    534e:	1ecb      	subs	r3, r1, #3
    5350:	2b04      	cmp	r3, #4
    5352:	d821      	bhi.n	5398 <cbvprintf+0x41c>
    5354:	e8df f003 	tbb	[pc, r3]
    5358:	20070703 	.word	0x20070703
    535c:	20          	.byte	0x20
    535d:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    535e:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    5362:	17d3      	asrs	r3, r2, #31
    5364:	e004      	b.n	5370 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    5366:	3407      	adds	r4, #7
    5368:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    536c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    5370:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    5374:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5378:	f013 0603 	ands.w	r6, r3, #3
    537c:	d055      	beq.n	542a <cbvprintf+0x4ae>
			OUTS(sp, fp);
    537e:	9b02      	ldr	r3, [sp, #8]
    5380:	464a      	mov	r2, r9
    5382:	4659      	mov	r1, fp
    5384:	4650      	mov	r0, sl
    5386:	f016 fde5 	bl	1bf54 <outs>
    538a:	2800      	cmp	r0, #0
    538c:	f2c0 813e 	blt.w	560c <cbvprintf+0x690>
    5390:	4405      	add	r5, r0
			OUTS(bps, bpe);
    5392:	f8dd 9008 	ldr.w	r9, [sp, #8]
    5396:	e5f9      	b.n	4f8c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5398:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    539c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    539e:	ea4f 73e2 	mov.w	r3, r2, asr #31
    53a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    53a6:	d105      	bne.n	53b4 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    53a8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    53ac:	930c      	str	r3, [sp, #48]	; 0x30
    53ae:	2300      	movs	r3, #0
    53b0:	930d      	str	r3, [sp, #52]	; 0x34
    53b2:	e7df      	b.n	5374 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    53b4:	2902      	cmp	r1, #2
    53b6:	d1dd      	bne.n	5374 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    53b8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    53bc:	e7d1      	b.n	5362 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    53be:	2b02      	cmp	r3, #2
    53c0:	d123      	bne.n	540a <cbvprintf+0x48e>
			switch (length_mod) {
    53c2:	1ecb      	subs	r3, r1, #3
    53c4:	2b04      	cmp	r3, #4
    53c6:	d813      	bhi.n	53f0 <cbvprintf+0x474>
    53c8:	e8df f003 	tbb	[pc, r3]
    53cc:	120a0a03 	.word	0x120a0a03
    53d0:	12          	.byte	0x12
    53d1:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    53d2:	6822      	ldr	r2, [r4, #0]
    53d4:	920c      	str	r2, [sp, #48]	; 0x30
    53d6:	2300      	movs	r3, #0
    53d8:	1d20      	adds	r0, r4, #4
    53da:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    53dc:	4604      	mov	r4, r0
    53de:	e7c9      	b.n	5374 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    53e0:	3407      	adds	r4, #7
    53e2:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    53e6:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    53ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    53ee:	e7f5      	b.n	53dc <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    53f0:	f854 3b04 	ldr.w	r3, [r4], #4
    53f4:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    53f6:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    53f8:	f04f 0300 	mov.w	r3, #0
    53fc:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    53fe:	d0d3      	beq.n	53a8 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    5400:	2902      	cmp	r1, #2
    5402:	d1b7      	bne.n	5374 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    5404:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5408:	e7d0      	b.n	53ac <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    540a:	2b04      	cmp	r3, #4
    540c:	d107      	bne.n	541e <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    540e:	3407      	adds	r4, #7
    5410:	f024 0407 	bic.w	r4, r4, #7
    5414:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    5418:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    541c:	e7aa      	b.n	5374 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    541e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    5420:	bf04      	itt	eq
    5422:	f854 3b04 	ldreq.w	r3, [r4], #4
    5426:	930c      	streq	r3, [sp, #48]	; 0x30
    5428:	e7a4      	b.n	5374 <cbvprintf+0x3f8>
		switch (conv->specifier) {
    542a:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    542e:	2878      	cmp	r0, #120	; 0x78
    5430:	d8af      	bhi.n	5392 <cbvprintf+0x416>
    5432:	2862      	cmp	r0, #98	; 0x62
    5434:	d820      	bhi.n	5478 <cbvprintf+0x4fc>
    5436:	2825      	cmp	r0, #37	; 0x25
    5438:	f43f adb2 	beq.w	4fa0 <cbvprintf+0x24>
    543c:	2858      	cmp	r0, #88	; 0x58
    543e:	d1a8      	bne.n	5392 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    5440:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    5444:	9300      	str	r3, [sp, #0]
    5446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    544a:	ab06      	add	r3, sp, #24
    544c:	aa0e      	add	r2, sp, #56	; 0x38
    544e:	f7ff fd45 	bl	4edc <encode_uint>
    5452:	4681      	mov	r9, r0
			if (precision >= 0) {
    5454:	2f00      	cmp	r7, #0
    5456:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    545a:	db0b      	blt.n	5474 <cbvprintf+0x4f8>
				conv->flag_zero = false;
    545c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    5460:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    5464:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    5468:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    546a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    546e:	d901      	bls.n	5474 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    5470:	1aff      	subs	r7, r7, r3
    5472:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    5474:	4607      	mov	r7, r0
    5476:	e03c      	b.n	54f2 <cbvprintf+0x576>
    5478:	3863      	subs	r0, #99	; 0x63
    547a:	2815      	cmp	r0, #21
    547c:	d889      	bhi.n	5392 <cbvprintf+0x416>
    547e:	a201      	add	r2, pc, #4	; (adr r2, 5484 <cbvprintf+0x508>)
    5480:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    5484:	00005503 	.word	0x00005503
    5488:	00005565 	.word	0x00005565
    548c:	00005393 	.word	0x00005393
    5490:	00005393 	.word	0x00005393
    5494:	00005393 	.word	0x00005393
    5498:	00005393 	.word	0x00005393
    549c:	00005565 	.word	0x00005565
    54a0:	00005393 	.word	0x00005393
    54a4:	00005393 	.word	0x00005393
    54a8:	00005393 	.word	0x00005393
    54ac:	00005393 	.word	0x00005393
    54b0:	000055c3 	.word	0x000055c3
    54b4:	00005591 	.word	0x00005591
    54b8:	00005595 	.word	0x00005595
    54bc:	00005393 	.word	0x00005393
    54c0:	00005393 	.word	0x00005393
    54c4:	000054dd 	.word	0x000054dd
    54c8:	00005393 	.word	0x00005393
    54cc:	00005591 	.word	0x00005591
    54d0:	00005393 	.word	0x00005393
    54d4:	00005393 	.word	0x00005393
    54d8:	00005591 	.word	0x00005591
			if (precision >= 0) {
    54dc:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    54de:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    54e2:	db0a      	blt.n	54fa <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    54e4:	4639      	mov	r1, r7
    54e6:	4648      	mov	r0, r9
    54e8:	f018 fa52 	bl	1d990 <strnlen>
			bpe = bps + len;
    54ec:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    54f0:	2600      	movs	r6, #0
		if (bps == NULL) {
    54f2:	f1b9 0f00 	cmp.w	r9, #0
    54f6:	d10c      	bne.n	5512 <cbvprintf+0x596>
    54f8:	e74b      	b.n	5392 <cbvprintf+0x416>
				len = strlen(bps);
    54fa:	4648      	mov	r0, r9
    54fc:	f7fb fc60 	bl	dc0 <strlen>
    5500:	e7f4      	b.n	54ec <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5504:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    5508:	2600      	movs	r6, #0
			bpe = buf + 1;
    550a:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    550e:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    5512:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    5516:	b106      	cbz	r6, 551a <cbvprintf+0x59e>
			nj_len += 1U;
    5518:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    551a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    551e:	06d0      	lsls	r0, r2, #27
    5520:	d569      	bpl.n	55f6 <cbvprintf+0x67a>
			nj_len += 2U;
    5522:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    5524:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    5526:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    5528:	bf48      	it	mi
    552a:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    552c:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    552e:	bf48      	it	mi
    5530:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    5532:	f1b8 0f00 	cmp.w	r8, #0
    5536:	dd76      	ble.n	5626 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    5538:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    553c:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    5540:	f3c2 0380 	ubfx	r3, r2, #2, #1
    5544:	9303      	str	r3, [sp, #12]
    5546:	0753      	lsls	r3, r2, #29
    5548:	d46d      	bmi.n	5626 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    554a:	0650      	lsls	r0, r2, #25
    554c:	d561      	bpl.n	5612 <cbvprintf+0x696>
					if (sign != 0) {
    554e:	b13e      	cbz	r6, 5560 <cbvprintf+0x5e4>
						OUTC(sign);
    5550:	4659      	mov	r1, fp
    5552:	4630      	mov	r0, r6
    5554:	47d0      	blx	sl
    5556:	2800      	cmp	r0, #0
    5558:	db58      	blt.n	560c <cbvprintf+0x690>
						sign = 0;
    555a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    555c:	3501      	adds	r5, #1
						sign = 0;
    555e:	461e      	mov	r6, r3
					pad = '0';
    5560:	2330      	movs	r3, #48	; 0x30
    5562:	e057      	b.n	5614 <cbvprintf+0x698>
			if (conv->flag_plus) {
    5564:	071e      	lsls	r6, r3, #28
    5566:	d411      	bmi.n	558c <cbvprintf+0x610>
				sign = ' ';
    5568:	f013 0610 	ands.w	r6, r3, #16
    556c:	bf18      	it	ne
    556e:	2620      	movne	r6, #32
			sint = value->sint;
    5570:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    5574:	2a00      	cmp	r2, #0
    5576:	f173 0100 	sbcs.w	r1, r3, #0
    557a:	f6bf af61 	bge.w	5440 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    557e:	4252      	negs	r2, r2
    5580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5584:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    5588:	262d      	movs	r6, #45	; 0x2d
    558a:	e759      	b.n	5440 <cbvprintf+0x4c4>
				sign = '+';
    558c:	262b      	movs	r6, #43	; 0x2b
    558e:	e7ef      	b.n	5570 <cbvprintf+0x5f4>
		switch (conv->specifier) {
    5590:	2600      	movs	r6, #0
    5592:	e755      	b.n	5440 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    5594:	980c      	ldr	r0, [sp, #48]	; 0x30
    5596:	b348      	cbz	r0, 55ec <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5598:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    559c:	9300      	str	r3, [sp, #0]
    559e:	aa0e      	add	r2, sp, #56	; 0x38
    55a0:	ab06      	add	r3, sp, #24
    55a2:	2100      	movs	r1, #0
    55a4:	f7ff fc9a 	bl	4edc <encode_uint>
				conv->altform_0c = true;
    55a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    55ac:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    55b0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    55b4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    55b8:	4681      	mov	r9, r0
				conv->altform_0c = true;
    55ba:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    55be:	2600      	movs	r6, #0
				goto prec_int_pad0;
    55c0:	e748      	b.n	5454 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    55c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    55c4:	2907      	cmp	r1, #7
    55c6:	f63f aee4 	bhi.w	5392 <cbvprintf+0x416>
    55ca:	e8df f001 	tbb	[pc, r1]
    55ce:	040d      	.short	0x040d
    55d0:	08080d06 	.word	0x08080d06
    55d4:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    55d6:	701d      	strb	r5, [r3, #0]
		break;
    55d8:	e6db      	b.n	5392 <cbvprintf+0x416>
		*(short *)dp = (short)count;
    55da:	801d      	strh	r5, [r3, #0]
		break;
    55dc:	e6d9      	b.n	5392 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    55de:	4628      	mov	r0, r5
    55e0:	17e9      	asrs	r1, r5, #31
    55e2:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    55e6:	e6d4      	b.n	5392 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    55e8:	601d      	str	r5, [r3, #0]
		break;
    55ea:	e6d2      	b.n	5392 <cbvprintf+0x416>
			bpe = bps + 5;
    55ec:	4f2e      	ldr	r7, [pc, #184]	; (56a8 <cbvprintf+0x72c>)
    55ee:	4606      	mov	r6, r0
			bps = "(nil)";
    55f0:	f1a7 0905 	sub.w	r9, r7, #5
    55f4:	e78d      	b.n	5512 <cbvprintf+0x596>
		} else if (conv->altform_0) {
    55f6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    55f8:	bf48      	it	mi
    55fa:	3301      	addmi	r3, #1
    55fc:	e792      	b.n	5524 <cbvprintf+0x5a8>
					OUTC(pad);
    55fe:	4618      	mov	r0, r3
    5600:	4659      	mov	r1, fp
    5602:	9303      	str	r3, [sp, #12]
    5604:	47d0      	blx	sl
    5606:	2800      	cmp	r0, #0
    5608:	9b03      	ldr	r3, [sp, #12]
    560a:	da04      	bge.n	5616 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    560c:	b013      	add	sp, #76	; 0x4c
    560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    5612:	2320      	movs	r3, #32
    5614:	4445      	add	r5, r8
    5616:	4642      	mov	r2, r8
				while (width-- > 0) {
    5618:	2a00      	cmp	r2, #0
    561a:	eba5 0108 	sub.w	r1, r5, r8
    561e:	f108 38ff 	add.w	r8, r8, #4294967295
    5622:	dcec      	bgt.n	55fe <cbvprintf+0x682>
    5624:	460d      	mov	r5, r1
		if (sign != 0) {
    5626:	b12e      	cbz	r6, 5634 <cbvprintf+0x6b8>
			OUTC(sign);
    5628:	4659      	mov	r1, fp
    562a:	4630      	mov	r0, r6
    562c:	47d0      	blx	sl
    562e:	2800      	cmp	r0, #0
    5630:	dbec      	blt.n	560c <cbvprintf+0x690>
    5632:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    5634:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5638:	06d9      	lsls	r1, r3, #27
    563a:	d401      	bmi.n	5640 <cbvprintf+0x6c4>
    563c:	071a      	lsls	r2, r3, #28
    563e:	d505      	bpl.n	564c <cbvprintf+0x6d0>
				OUTC('0');
    5640:	4659      	mov	r1, fp
    5642:	2030      	movs	r0, #48	; 0x30
    5644:	47d0      	blx	sl
    5646:	2800      	cmp	r0, #0
    5648:	dbe0      	blt.n	560c <cbvprintf+0x690>
    564a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    564c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5650:	06db      	lsls	r3, r3, #27
    5652:	d506      	bpl.n	5662 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    5654:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5658:	4659      	mov	r1, fp
    565a:	47d0      	blx	sl
    565c:	2800      	cmp	r0, #0
    565e:	dbd5      	blt.n	560c <cbvprintf+0x690>
    5660:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    5662:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5664:	442e      	add	r6, r5
    5666:	1b73      	subs	r3, r6, r5
    5668:	2b00      	cmp	r3, #0
    566a:	dc15      	bgt.n	5698 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    566c:	463b      	mov	r3, r7
    566e:	464a      	mov	r2, r9
    5670:	4659      	mov	r1, fp
    5672:	4650      	mov	r0, sl
    5674:	f016 fc6e 	bl	1bf54 <outs>
    5678:	2800      	cmp	r0, #0
    567a:	dbc7      	blt.n	560c <cbvprintf+0x690>
    567c:	4405      	add	r5, r0
		while (width > 0) {
    567e:	44a8      	add	r8, r5
    5680:	eba8 0305 	sub.w	r3, r8, r5
    5684:	2b00      	cmp	r3, #0
    5686:	f77f ae84 	ble.w	5392 <cbvprintf+0x416>
			OUTC(' ');
    568a:	4659      	mov	r1, fp
    568c:	2020      	movs	r0, #32
    568e:	47d0      	blx	sl
    5690:	2800      	cmp	r0, #0
    5692:	dbbb      	blt.n	560c <cbvprintf+0x690>
    5694:	3501      	adds	r5, #1
			--width;
    5696:	e7f3      	b.n	5680 <cbvprintf+0x704>
				OUTC('0');
    5698:	4659      	mov	r1, fp
    569a:	2030      	movs	r0, #48	; 0x30
    569c:	47d0      	blx	sl
    569e:	2800      	cmp	r0, #0
    56a0:	dbb4      	blt.n	560c <cbvprintf+0x690>
    56a2:	3501      	adds	r5, #1
    56a4:	e7df      	b.n	5666 <cbvprintf+0x6ea>
    56a6:	bf00      	nop
    56a8:	0001eebe 	.word	0x0001eebe

000056ac <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    56ac:	b508      	push	{r3, lr}
    56ae:	4604      	mov	r4, r0
    56b0:	f04f 0220 	mov.w	r2, #32
    56b4:	f3ef 8311 	mrs	r3, BASEPRI
    56b8:	f382 8812 	msr	BASEPRI_MAX, r2
    56bc:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    56c0:	f017 fcef 	bl	1d0a2 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    56c4:	4620      	mov	r0, r4
    56c6:	f001 fc99 	bl	6ffc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    56ca:	4803      	ldr	r0, [pc, #12]	; (56d8 <sys_reboot+0x2c>)
    56cc:	f016 fa95 	bl	1bbfa <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    56d0:	f000 ff02 	bl	64d8 <arch_cpu_idle>
    56d4:	e7fc      	b.n	56d0 <sys_reboot+0x24>
    56d6:	bf00      	nop
    56d8:	0001eebf 	.word	0x0001eebf

000056dc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    56dc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    56de:	4910      	ldr	r1, [pc, #64]	; (5720 <enable_logger+0x44>)
    56e0:	4810      	ldr	r0, [pc, #64]	; (5724 <enable_logger+0x48>)
{
    56e2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    56e4:	2200      	movs	r2, #0
    56e6:	f017 ff51 	bl	1d58c <k_timer_init>
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    56ea:	4d0f      	ldr	r5, [pc, #60]	; (5728 <enable_logger+0x4c>)
    56ec:	490f      	ldr	r1, [pc, #60]	; (572c <enable_logger+0x50>)
    56ee:	2200      	movs	r2, #0
    56f0:	2300      	movs	r3, #0
    56f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    56f6:	2400      	movs	r4, #0
    56f8:	230e      	movs	r3, #14
    56fa:	e9cd 3403 	strd	r3, r4, [sp, #12]
    56fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5702:	4b0b      	ldr	r3, [pc, #44]	; (5730 <enable_logger+0x54>)
    5704:	9400      	str	r4, [sp, #0]
    5706:	f44f 7240 	mov.w	r2, #768	; 0x300
    570a:	4628      	mov	r0, r5
    570c:	f005 fd94 	bl	b238 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    5710:	4908      	ldr	r1, [pc, #32]	; (5734 <enable_logger+0x58>)
    5712:	4628      	mov	r0, r5
    5714:	f017 fd96 	bl	1d244 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5718:	4620      	mov	r0, r4
    571a:	b009      	add	sp, #36	; 0x24
    571c:	bd30      	pop	{r4, r5, pc}
    571e:	bf00      	nop
    5720:	00005739 	.word	0x00005739
    5724:	20000300 	.word	0x20000300
    5728:	20000338 	.word	0x20000338
    572c:	200022a0 	.word	0x200022a0
    5730:	00005ba1 	.word	0x00005ba1
    5734:	0001eee8 	.word	0x0001eee8

00005738 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5738:	4801      	ldr	r0, [pc, #4]	; (5740 <log_process_thread_timer_expiry_fn+0x8>)
    573a:	f005 bee1 	b.w	b500 <z_impl_k_sem_give>
    573e:	bf00      	nop
    5740:	20000294 	.word	0x20000294

00005744 <z_log_get_s_mask>:
{
    5744:	b5f0      	push	{r4, r5, r6, r7, lr}
    5746:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    5748:	4e0f      	ldr	r6, [pc, #60]	; (5788 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
    574a:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    574c:	4603      	mov	r3, r0
	bool arm = false;
    574e:	4602      	mov	r2, r0
				mask |= BIT(arg);
    5750:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    5752:	f815 4b01 	ldrb.w	r4, [r5], #1
    5756:	b10c      	cbz	r4, 575c <z_log_get_s_mask+0x18>
    5758:	428b      	cmp	r3, r1
    575a:	d300      	bcc.n	575e <z_log_get_s_mask+0x1a>
}
    575c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    575e:	2c25      	cmp	r4, #37	; 0x25
    5760:	d102      	bne.n	5768 <z_log_get_s_mask+0x24>
			arm = !arm;
    5762:	f082 0201 	eor.w	r2, r2, #1
    5766:	e7f4      	b.n	5752 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    5768:	2a00      	cmp	r2, #0
    576a:	d0f2      	beq.n	5752 <z_log_get_s_mask+0xe>
    576c:	f814 c006 	ldrb.w	ip, [r4, r6]
    5770:	f01c 0f03 	tst.w	ip, #3
    5774:	d0ed      	beq.n	5752 <z_log_get_s_mask+0xe>
			if (curr == 's') {
    5776:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    5778:	bf04      	itt	eq
    577a:	fa07 f203 	lsleq.w	r2, r7, r3
    577e:	4310      	orreq	r0, r2
			arg++;
    5780:	3301      	adds	r3, #1
			arm = false;
    5782:	2200      	movs	r2, #0
    5784:	e7e5      	b.n	5752 <z_log_get_s_mask+0xe>
    5786:	bf00      	nop
    5788:	0001f954 	.word	0x0001f954

0000578c <log_core_init>:
	panic_mode = false;
    578c:	4a0c      	ldr	r2, [pc, #48]	; (57c0 <log_core_init+0x34>)
    578e:	2300      	movs	r3, #0
{
    5790:	b510      	push	{r4, lr}
	panic_mode = false;
    5792:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    5794:	4a0b      	ldr	r2, [pc, #44]	; (57c4 <log_core_init+0x38>)
    5796:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    5798:	4b0b      	ldr	r3, [pc, #44]	; (57c8 <log_core_init+0x3c>)
    579a:	4a0c      	ldr	r2, [pc, #48]	; (57cc <log_core_init+0x40>)
    579c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    579e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    57a2:	f000 fcc9 	bl	6138 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    57a6:	f000 fa79 	bl	5c9c <log_msg_pool_init>
		log_list_init(&list);
    57aa:	4809      	ldr	r0, [pc, #36]	; (57d0 <log_core_init+0x44>)
    57ac:	f016 fbe9 	bl	1bf82 <log_list_init>
}
    57b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    57b4:	4907      	ldr	r1, [pc, #28]	; (57d4 <log_core_init+0x48>)
    57b6:	4808      	ldr	r0, [pc, #32]	; (57d8 <log_core_init+0x4c>)
    57b8:	2304      	movs	r3, #4
    57ba:	2228      	movs	r2, #40	; 0x28
    57bc:	f017 bcf8 	b.w	1d1b0 <k_mem_slab_init>
    57c0:	20001fb2 	.word	0x20001fb2
    57c4:	20000708 	.word	0x20000708
    57c8:	2000000c 	.word	0x2000000c
    57cc:	0001bfc1 	.word	0x0001bfc1
    57d0:	20000710 	.word	0x20000710
    57d4:	20004380 	.word	0x20004380
    57d8:	20000718 	.word	0x20000718

000057dc <log_init>:
{
    57dc:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    57de:	4b12      	ldr	r3, [pc, #72]	; (5828 <log_init+0x4c>)
    57e0:	f3bf 8f5b 	dmb	ish
    57e4:	e853 5f00 	ldrex	r5, [r3]
    57e8:	1c6a      	adds	r2, r5, #1
    57ea:	e843 2100 	strex	r1, r2, [r3]
    57ee:	2900      	cmp	r1, #0
    57f0:	d1f8      	bne.n	57e4 <log_init+0x8>
    57f2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    57f6:	b92d      	cbnz	r5, 5804 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    57f8:	4c0c      	ldr	r4, [pc, #48]	; (582c <log_init+0x50>)
    57fa:	4e0d      	ldr	r6, [pc, #52]	; (5830 <log_init+0x54>)
    57fc:	1b36      	subs	r6, r6, r4
    57fe:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5800:	42b5      	cmp	r5, r6
    5802:	db00      	blt.n	5806 <log_init+0x2a>
}
    5804:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    5806:	7b23      	ldrb	r3, [r4, #12]
    5808:	b153      	cbz	r3, 5820 <log_init+0x44>
			if (backend->api->init != NULL) {
    580a:	6823      	ldr	r3, [r4, #0]
    580c:	699b      	ldr	r3, [r3, #24]
    580e:	b10b      	cbz	r3, 5814 <log_init+0x38>
				backend->api->init(backend);
    5810:	4620      	mov	r0, r4
    5812:	4798      	blx	r3
			log_backend_enable(backend,
    5814:	6863      	ldr	r3, [r4, #4]
    5816:	2204      	movs	r2, #4
    5818:	6819      	ldr	r1, [r3, #0]
    581a:	4620      	mov	r0, r4
    581c:	f000 fa30 	bl	5c80 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5820:	3501      	adds	r5, #1
    5822:	3410      	adds	r4, #16
    5824:	e7ec      	b.n	5800 <log_init+0x24>
    5826:	bf00      	nop
    5828:	2000070c 	.word	0x2000070c
    582c:	0001e0d4 	.word	0x0001e0d4
    5830:	0001e0e4 	.word	0x0001e0e4

00005834 <get_msg>:
{
    5834:	b510      	push	{r4, lr}
    5836:	f04f 0320 	mov.w	r3, #32
    583a:	f3ef 8411 	mrs	r4, BASEPRI
    583e:	f383 8812 	msr	BASEPRI_MAX, r3
    5842:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    5846:	4804      	ldr	r0, [pc, #16]	; (5858 <get_msg+0x24>)
    5848:	f016 fbab 	bl	1bfa2 <log_list_head_get>
	__asm__ volatile(
    584c:	f384 8811 	msr	BASEPRI, r4
    5850:	f3bf 8f6f 	isb	sy
}
    5854:	bd10      	pop	{r4, pc}
    5856:	bf00      	nop
    5858:	20000710 	.word	0x20000710

0000585c <z_log_notify_backend_enabled>:
{
    585c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    585e:	4c04      	ldr	r4, [pc, #16]	; (5870 <z_log_notify_backend_enabled+0x14>)
    5860:	7822      	ldrb	r2, [r4, #0]
    5862:	b912      	cbnz	r2, 586a <z_log_notify_backend_enabled+0xe>
    5864:	4803      	ldr	r0, [pc, #12]	; (5874 <z_log_notify_backend_enabled+0x18>)
    5866:	f005 fe4b 	bl	b500 <z_impl_k_sem_give>
	backend_attached = true;
    586a:	2301      	movs	r3, #1
    586c:	7023      	strb	r3, [r4, #0]
}
    586e:	bd10      	pop	{r4, pc}
    5870:	20001fb1 	.word	0x20001fb1
    5874:	20000294 	.word	0x20000294

00005878 <z_log_dropped>:
    5878:	4b0c      	ldr	r3, [pc, #48]	; (58ac <z_log_dropped+0x34>)
    587a:	f3bf 8f5b 	dmb	ish
    587e:	e853 2f00 	ldrex	r2, [r3]
    5882:	3201      	adds	r2, #1
    5884:	e843 2100 	strex	r1, r2, [r3]
    5888:	2900      	cmp	r1, #0
    588a:	d1f8      	bne.n	587e <z_log_dropped+0x6>
    588c:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5890:	f3bf 8f5b 	dmb	ish
    5894:	4b06      	ldr	r3, [pc, #24]	; (58b0 <z_log_dropped+0x38>)
    5896:	e853 2f00 	ldrex	r2, [r3]
    589a:	3a01      	subs	r2, #1
    589c:	e843 2100 	strex	r1, r2, [r3]
    58a0:	2900      	cmp	r1, #0
    58a2:	d1f8      	bne.n	5896 <z_log_dropped+0x1e>
    58a4:	f3bf 8f5b 	dmb	ish
}
    58a8:	4770      	bx	lr
    58aa:	bf00      	nop
    58ac:	20000708 	.word	0x20000708
    58b0:	20000704 	.word	0x20000704

000058b4 <z_log_dropped_read_and_clear>:
}
    58b4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    58b6:	4b06      	ldr	r3, [pc, #24]	; (58d0 <z_log_dropped_read_and_clear+0x1c>)
    58b8:	f3bf 8f5b 	dmb	ish
    58bc:	4602      	mov	r2, r0
    58be:	e853 0f00 	ldrex	r0, [r3]
    58c2:	e843 2100 	strex	r1, r2, [r3]
    58c6:	2900      	cmp	r1, #0
    58c8:	d1f9      	bne.n	58be <z_log_dropped_read_and_clear+0xa>
    58ca:	f3bf 8f5b 	dmb	ish
    58ce:	4770      	bx	lr
    58d0:	20000708 	.word	0x20000708

000058d4 <dropped_notify>:
{
    58d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    58d6:	f7ff ffed 	bl	58b4 <z_log_dropped_read_and_clear>
    58da:	4c0a      	ldr	r4, [pc, #40]	; (5904 <dropped_notify+0x30>)
    58dc:	4d0a      	ldr	r5, [pc, #40]	; (5908 <dropped_notify+0x34>)
    58de:	1b2d      	subs	r5, r5, r4
    58e0:	4607      	mov	r7, r0
    58e2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    58e4:	2600      	movs	r6, #0
    58e6:	42ae      	cmp	r6, r5
    58e8:	db00      	blt.n	58ec <dropped_notify+0x18>
}
    58ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    58ec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    58ee:	795b      	ldrb	r3, [r3, #5]
    58f0:	b12b      	cbz	r3, 58fe <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    58f2:	6823      	ldr	r3, [r4, #0]
    58f4:	691b      	ldr	r3, [r3, #16]
    58f6:	b113      	cbz	r3, 58fe <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    58f8:	4639      	mov	r1, r7
    58fa:	4620      	mov	r0, r4
    58fc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    58fe:	3601      	adds	r6, #1
    5900:	3410      	adds	r4, #16
    5902:	e7f0      	b.n	58e6 <dropped_notify+0x12>
    5904:	0001e0d4 	.word	0x0001e0d4
    5908:	0001e0e4 	.word	0x0001e0e4

0000590c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    590c:	4b17      	ldr	r3, [pc, #92]	; (596c <z_log_strdup+0x60>)
    590e:	4298      	cmp	r0, r3
{
    5910:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5912:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    5914:	d302      	bcc.n	591c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    5916:	4b16      	ldr	r3, [pc, #88]	; (5970 <z_log_strdup+0x64>)
    5918:	4298      	cmp	r0, r3
    591a:	d321      	bcc.n	5960 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    591c:	4815      	ldr	r0, [pc, #84]	; (5974 <z_log_strdup+0x68>)
    591e:	2200      	movs	r2, #0
    5920:	2300      	movs	r3, #0
    5922:	a901      	add	r1, sp, #4
    5924:	f005 fc26 	bl	b174 <k_mem_slab_alloc>
	if (err != 0) {
    5928:	4605      	mov	r5, r0
    592a:	b9e0      	cbnz	r0, 5966 <z_log_strdup+0x5a>
    592c:	2201      	movs	r2, #1
    592e:	9b01      	ldr	r3, [sp, #4]
    5930:	f3bf 8f5b 	dmb	ish
    5934:	e853 1f00 	ldrex	r1, [r3]
    5938:	e843 2000 	strex	r0, r2, [r3]
    593c:	2800      	cmp	r0, #0
    593e:	d1f9      	bne.n	5934 <z_log_strdup+0x28>
    5940:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    5944:	9e01      	ldr	r6, [sp, #4]
    5946:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    5948:	221f      	movs	r2, #31
    594a:	4618      	mov	r0, r3
    594c:	4621      	mov	r1, r4
    594e:	f018 f80c 	bl	1d96a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    5952:	227e      	movs	r2, #126	; 0x7e
    5954:	4603      	mov	r3, r0
    5956:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    595a:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    595e:	461c      	mov	r4, r3
}
    5960:	4620      	mov	r0, r4
    5962:	b002      	add	sp, #8
    5964:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    5966:	4b04      	ldr	r3, [pc, #16]	; (5978 <z_log_strdup+0x6c>)
    5968:	e7f9      	b.n	595e <z_log_strdup+0x52>
    596a:	bf00      	nop
    596c:	0001ddcc 	.word	0x0001ddcc
    5970:	0001fa90 	.word	0x0001fa90
    5974:	20000718 	.word	0x20000718
    5978:	0001eef0 	.word	0x0001eef0

0000597c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    597c:	b148      	cbz	r0, 5992 <log_is_strdup+0x16>
    597e:	4b05      	ldr	r3, [pc, #20]	; (5994 <log_is_strdup+0x18>)
    5980:	4298      	cmp	r0, r3
    5982:	d305      	bcc.n	5990 <log_is_strdup+0x14>
    5984:	33a0      	adds	r3, #160	; 0xa0
    5986:	4298      	cmp	r0, r3
    5988:	bf2c      	ite	cs
    598a:	2000      	movcs	r0, #0
    598c:	2001      	movcc	r0, #1
    598e:	4770      	bx	lr
    5990:	2000      	movs	r0, #0
}
    5992:	4770      	bx	lr
    5994:	20004380 	.word	0x20004380

00005998 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    5998:	4b43      	ldr	r3, [pc, #268]	; (5aa8 <z_impl_log_process+0x110>)
    599a:	781b      	ldrb	r3, [r3, #0]
{
    599c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59a0:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    59a2:	b903      	cbnz	r3, 59a6 <z_impl_log_process+0xe>
    59a4:	b300      	cbz	r0, 59e8 <z_impl_log_process+0x50>
	msg = get_msg();
    59a6:	f7ff ff45 	bl	5834 <get_msg>
	if (msg.msg) {
    59aa:	4605      	mov	r5, r0
    59ac:	b178      	cbz	r0, 59ce <z_impl_log_process+0x36>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    59ae:	f3bf 8f5b 	dmb	ish
    59b2:	4b3e      	ldr	r3, [pc, #248]	; (5aac <z_impl_log_process+0x114>)
    59b4:	e853 2f00 	ldrex	r2, [r3]
    59b8:	3a01      	subs	r2, #1
    59ba:	e843 2100 	strex	r1, r2, [r3]
    59be:	2900      	cmp	r1, #0
    59c0:	d1f8      	bne.n	59b4 <z_impl_log_process+0x1c>
    59c2:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    59c6:	b19c      	cbz	r4, 59f0 <z_impl_log_process+0x58>
			log_msg_put(msg.msg);
    59c8:	4628      	mov	r0, r5
    59ca:	f016 fbd8 	bl	1c17e <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    59ce:	b92c      	cbnz	r4, 59dc <z_impl_log_process+0x44>
	return dropped_cnt > 0;
    59d0:	4b37      	ldr	r3, [pc, #220]	; (5ab0 <z_impl_log_process+0x118>)
	if (!bypass && z_log_dropped_pending()) {
    59d2:	681b      	ldr	r3, [r3, #0]
    59d4:	2b00      	cmp	r3, #0
    59d6:	dd01      	ble.n	59dc <z_impl_log_process+0x44>
		dropped_notify();
    59d8:	f7ff ff7c 	bl	58d4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    59dc:	4835      	ldr	r0, [pc, #212]	; (5ab4 <z_impl_log_process+0x11c>)
    59de:	f016 fade 	bl	1bf9e <log_list_head_peek>
    59e2:	1e04      	subs	r4, r0, #0
    59e4:	bf18      	it	ne
    59e6:	2401      	movne	r4, #1
}
    59e8:	4620      	mov	r0, r4
    59ea:	b003      	add	sp, #12
    59ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    59f0:	4b31      	ldr	r3, [pc, #196]	; (5ab8 <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    59f2:	781b      	ldrb	r3, [r3, #0]
    59f4:	b9bb      	cbnz	r3, 5a26 <z_impl_log_process+0x8e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    59f6:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    59f8:	07db      	lsls	r3, r3, #31
    59fa:	d414      	bmi.n	5a26 <z_impl_log_process+0x8e>
	msg_str = log_msg_str_get(msg);
    59fc:	f016 fbd2 	bl	1c1a4 <log_msg_str_get>
    5a00:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5a02:	4628      	mov	r0, r5
    5a04:	f016 fb99 	bl	1c13a <log_msg_nargs_get>
    5a08:	4601      	mov	r1, r0
    5a0a:	4640      	mov	r0, r8
    5a0c:	f7ff fe9a 	bl	5744 <z_log_get_s_mask>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5a10:	4b2a      	ldr	r3, [pc, #168]	; (5abc <z_impl_log_process+0x124>)
    5a12:	4a2b      	ldr	r2, [pc, #172]	; (5ac0 <z_impl_log_process+0x128>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
    5a14:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 5ad4 <z_impl_log_process+0x13c>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5a18:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 5ad8 <z_impl_log_process+0x140>
    5a1c:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5a1e:	4606      	mov	r6, r0
    5a20:	ea4f 09d3 	mov.w	r9, r3, lsr #3
	while (mask) {
    5a24:	b936      	cbnz	r6, 5a34 <z_impl_log_process+0x9c>
	return __log_backends_end - __log_backends_start;
    5a26:	4e27      	ldr	r6, [pc, #156]	; (5ac4 <z_impl_log_process+0x12c>)
    5a28:	4f27      	ldr	r7, [pc, #156]	; (5ac8 <z_impl_log_process+0x130>)
    5a2a:	1bbf      	subs	r7, r7, r6
    5a2c:	113f      	asrs	r7, r7, #4
    5a2e:	f04f 0800 	mov.w	r8, #0
    5a32:	e036      	b.n	5aa2 <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
    5a34:	fab6 f786 	clz	r7, r6
    5a38:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    5a3c:	4639      	mov	r1, r7
    5a3e:	4628      	mov	r0, r5
    5a40:	f016 fb7e 	bl	1c140 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    5a44:	4b21      	ldr	r3, [pc, #132]	; (5acc <z_impl_log_process+0x134>)
    5a46:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    5a48:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    5a4a:	d302      	bcc.n	5a52 <z_impl_log_process+0xba>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    5a4c:	4b20      	ldr	r3, [pc, #128]	; (5ad0 <z_impl_log_process+0x138>)
    5a4e:	4298      	cmp	r0, r3
    5a50:	d316      	bcc.n	5a80 <z_impl_log_process+0xe8>
    5a52:	4610      	mov	r0, r2
    5a54:	f7ff ff92 	bl	597c <log_is_strdup>
    5a58:	b990      	cbnz	r0, 5a80 <z_impl_log_process+0xe8>
    5a5a:	4552      	cmp	r2, sl
    5a5c:	d010      	beq.n	5a80 <z_impl_log_process+0xe8>
	return msg->hdr.ids.source_id;
    5a5e:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    5a60:	f3c1 1189 	ubfx	r1, r1, #6, #10
    5a64:	f000 f8fe 	bl	5c64 <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5a68:	ea4f 1389 	mov.w	r3, r9, lsl #6
    5a6c:	f043 0301 	orr.w	r3, r3, #1
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    5a70:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5a72:	f8ad 3000 	strh.w	r3, [sp]
    5a76:	4639      	mov	r1, r7
    5a78:	4643      	mov	r3, r8
    5a7a:	4658      	mov	r0, fp
    5a7c:	f016 fade 	bl	1c03c <log_3>
		mask &= ~BIT(idx);
    5a80:	2301      	movs	r3, #1
    5a82:	fa03 f707 	lsl.w	r7, r3, r7
    5a86:	ea26 0607 	bic.w	r6, r6, r7
    5a8a:	e7cb      	b.n	5a24 <z_impl_log_process+0x8c>
	return backend->cb->active;
    5a8c:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    5a8e:	795b      	ldrb	r3, [r3, #5]
    5a90:	b123      	cbz	r3, 5a9c <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
    5a92:	6833      	ldr	r3, [r6, #0]
    5a94:	4629      	mov	r1, r5
    5a96:	685b      	ldr	r3, [r3, #4]
    5a98:	4630      	mov	r0, r6
    5a9a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    5a9c:	f108 0801 	add.w	r8, r8, #1
    5aa0:	3610      	adds	r6, #16
    5aa2:	45b8      	cmp	r8, r7
    5aa4:	dbf2      	blt.n	5a8c <z_impl_log_process+0xf4>
    5aa6:	e78f      	b.n	59c8 <z_impl_log_process+0x30>
    5aa8:	20001fb1 	.word	0x20001fb1
    5aac:	20000704 	.word	0x20000704
    5ab0:	20000708 	.word	0x20000708
    5ab4:	20000710 	.word	0x20000710
    5ab8:	20001fb2 	.word	0x20001fb2
    5abc:	0001e08c 	.word	0x0001e08c
    5ac0:	0001e07c 	.word	0x0001e07c
    5ac4:	0001e0d4 	.word	0x0001e0d4
    5ac8:	0001e0e4 	.word	0x0001e0e4
    5acc:	0001ddcc 	.word	0x0001ddcc
    5ad0:	0001fa90 	.word	0x0001fa90
    5ad4:	0001eef0 	.word	0x0001eef0
    5ad8:	0001ef0a 	.word	0x0001ef0a

00005adc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    5adc:	4b29      	ldr	r3, [pc, #164]	; (5b84 <msg_finalize+0xa8>)
{
    5ade:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    5ae0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    5ae2:	8141      	strh	r1, [r0, #10]
{
    5ae4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5ae6:	4798      	blx	r3
    5ae8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5aea:	f04f 0320 	mov.w	r3, #32
    5aee:	f3ef 8511 	mrs	r5, BASEPRI
    5af2:	f383 8812 	msr	BASEPRI_MAX, r3
    5af6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    5afa:	4823      	ldr	r0, [pc, #140]	; (5b88 <msg_finalize+0xac>)
    5afc:	4621      	mov	r1, r4
    5afe:	f016 fa44 	bl	1bf8a <log_list_add_tail>
	__asm__ volatile(
    5b02:	f385 8811 	msr	BASEPRI, r5
    5b06:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5b0a:	f3bf 8f5b 	dmb	ish
    5b0e:	4b1f      	ldr	r3, [pc, #124]	; (5b8c <msg_finalize+0xb0>)
    5b10:	e853 2f00 	ldrex	r2, [r3]
    5b14:	3201      	adds	r2, #1
    5b16:	e843 2100 	strex	r1, r2, [r3]
    5b1a:	2900      	cmp	r1, #0
    5b1c:	d1f8      	bne.n	5b10 <msg_finalize+0x34>
    5b1e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    5b22:	4a1b      	ldr	r2, [pc, #108]	; (5b90 <msg_finalize+0xb4>)
    5b24:	7812      	ldrb	r2, [r2, #0]
    5b26:	b182      	cbz	r2, 5b4a <msg_finalize+0x6e>
	__asm__ volatile(
    5b28:	f04f 0320 	mov.w	r3, #32
    5b2c:	f3ef 8411 	mrs	r4, BASEPRI
    5b30:	f383 8812 	msr	BASEPRI_MAX, r3
    5b34:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    5b38:	2000      	movs	r0, #0
    5b3a:	f7ff ff2d 	bl	5998 <z_impl_log_process>
	__asm__ volatile(
    5b3e:	f384 8811 	msr	BASEPRI, r4
    5b42:	f3bf 8f6f 	isb	sy
}
    5b46:	b003      	add	sp, #12
    5b48:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    5b4a:	4a12      	ldr	r2, [pc, #72]	; (5b94 <msg_finalize+0xb8>)
    5b4c:	681b      	ldr	r3, [r3, #0]
    5b4e:	6812      	ldr	r2, [r2, #0]
    5b50:	2a00      	cmp	r2, #0
    5b52:	d0f8      	beq.n	5b46 <msg_finalize+0x6a>
    5b54:	2b01      	cmp	r3, #1
    5b56:	d10a      	bne.n	5b6e <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    5b58:	2200      	movs	r2, #0
    5b5a:	2300      	movs	r3, #0
    5b5c:	e9cd 2300 	strd	r2, r3, [sp]
    5b60:	480d      	ldr	r0, [pc, #52]	; (5b98 <msg_finalize+0xbc>)
    5b62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5b66:	2300      	movs	r3, #0
    5b68:	f006 fb78 	bl	c25c <z_impl_k_timer_start>
    5b6c:	e7eb      	b.n	5b46 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    5b6e:	2b0a      	cmp	r3, #10
    5b70:	d1e9      	bne.n	5b46 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    5b72:	4809      	ldr	r0, [pc, #36]	; (5b98 <msg_finalize+0xbc>)
    5b74:	f017 fd16 	bl	1d5a4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    5b78:	4808      	ldr	r0, [pc, #32]	; (5b9c <msg_finalize+0xc0>)
}
    5b7a:	b003      	add	sp, #12
    5b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5b80:	f005 bcbe 	b.w	b500 <z_impl_k_sem_give>
    5b84:	2000000c 	.word	0x2000000c
    5b88:	20000710 	.word	0x20000710
    5b8c:	20000704 	.word	0x20000704
    5b90:	20001fb2 	.word	0x20001fb2
    5b94:	20000734 	.word	0x20000734
    5b98:	20000300 	.word	0x20000300
    5b9c:	20000294 	.word	0x20000294

00005ba0 <log_process_thread_func>:
{
    5ba0:	b510      	push	{r4, lr}
	log_init();
    5ba2:	f7ff fe1b 	bl	57dc <log_init>
	return z_impl_z_current_get();
    5ba6:	f006 f92b 	bl	be00 <z_impl_z_current_get>
	proc_tid = process_tid;
    5baa:	4b0c      	ldr	r3, [pc, #48]	; (5bdc <log_process_thread_func+0x3c>)
    5bac:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    5bae:	b130      	cbz	r0, 5bbe <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5bb0:	4b0b      	ldr	r3, [pc, #44]	; (5be0 <log_process_thread_func+0x40>)
	    process_tid &&
    5bb2:	681b      	ldr	r3, [r3, #0]
    5bb4:	2b09      	cmp	r3, #9
    5bb6:	dd02      	ble.n	5bbe <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5bb8:	480a      	ldr	r0, [pc, #40]	; (5be4 <log_process_thread_func+0x44>)
    5bba:	f005 fca1 	bl	b500 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    5bbe:	4c09      	ldr	r4, [pc, #36]	; (5be4 <log_process_thread_func+0x44>)
    5bc0:	2000      	movs	r0, #0
    5bc2:	f7ff fee9 	bl	5998 <z_impl_log_process>
		if (log_process(false) == false) {
    5bc6:	2800      	cmp	r0, #0
    5bc8:	d1fa      	bne.n	5bc0 <log_process_thread_func+0x20>
    5bca:	f04f 32ff 	mov.w	r2, #4294967295
    5bce:	f04f 33ff 	mov.w	r3, #4294967295
    5bd2:	4620      	mov	r0, r4
    5bd4:	f005 fcba 	bl	b54c <z_impl_k_sem_take>
    5bd8:	e7f2      	b.n	5bc0 <log_process_thread_func+0x20>
    5bda:	bf00      	nop
    5bdc:	20000734 	.word	0x20000734
    5be0:	20000704 	.word	0x20000704
    5be4:	20000294 	.word	0x20000294

00005be8 <z_impl_log_panic>:
{
    5be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    5bea:	4f0e      	ldr	r7, [pc, #56]	; (5c24 <z_impl_log_panic+0x3c>)
    5bec:	783d      	ldrb	r5, [r7, #0]
    5bee:	b975      	cbnz	r5, 5c0e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    5bf0:	4c0d      	ldr	r4, [pc, #52]	; (5c28 <z_impl_log_panic+0x40>)
    5bf2:	4e0e      	ldr	r6, [pc, #56]	; (5c2c <z_impl_log_panic+0x44>)
	log_init();
    5bf4:	f7ff fdf2 	bl	57dc <log_init>
    5bf8:	1b36      	subs	r6, r6, r4
    5bfa:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5bfc:	42b5      	cmp	r5, r6
    5bfe:	db07      	blt.n	5c10 <z_impl_log_panic+0x28>
    5c00:	2000      	movs	r0, #0
    5c02:	f7ff fec9 	bl	5998 <z_impl_log_process>
		while (log_process(false) == true) {
    5c06:	2800      	cmp	r0, #0
    5c08:	d1fa      	bne.n	5c00 <z_impl_log_panic+0x18>
	panic_mode = true;
    5c0a:	2301      	movs	r3, #1
    5c0c:	703b      	strb	r3, [r7, #0]
}
    5c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    5c10:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5c12:	795b      	ldrb	r3, [r3, #5]
    5c14:	b11b      	cbz	r3, 5c1e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5c16:	6823      	ldr	r3, [r4, #0]
    5c18:	4620      	mov	r0, r4
    5c1a:	695b      	ldr	r3, [r3, #20]
    5c1c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5c1e:	3501      	adds	r5, #1
    5c20:	3410      	adds	r4, #16
    5c22:	e7eb      	b.n	5bfc <z_impl_log_panic+0x14>
    5c24:	20001fb2 	.word	0x20001fb2
    5c28:	0001e0d4 	.word	0x0001e0d4
    5c2c:	0001e0e4 	.word	0x0001e0e4

00005c30 <log_free>:
{
    5c30:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    5c32:	3804      	subs	r0, #4
    5c34:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5c36:	f3bf 8f5b 	dmb	ish
    5c3a:	e850 3f00 	ldrex	r3, [r0]
    5c3e:	1e5a      	subs	r2, r3, #1
    5c40:	e840 2100 	strex	r1, r2, [r0]
    5c44:	2900      	cmp	r1, #0
    5c46:	d1f8      	bne.n	5c3a <log_free+0xa>
    5c48:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    5c4c:	2b01      	cmp	r3, #1
    5c4e:	d103      	bne.n	5c58 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    5c50:	4803      	ldr	r0, [pc, #12]	; (5c60 <log_free+0x30>)
    5c52:	a901      	add	r1, sp, #4
    5c54:	f017 fac7 	bl	1d1e6 <k_mem_slab_free>
}
    5c58:	b003      	add	sp, #12
    5c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    5c5e:	bf00      	nop
    5c60:	20000718 	.word	0x20000718

00005c64 <log_source_name_get>:
    5c64:	4a04      	ldr	r2, [pc, #16]	; (5c78 <log_source_name_get+0x14>)
    5c66:	4b05      	ldr	r3, [pc, #20]	; (5c7c <log_source_name_get+0x18>)
    5c68:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    5c6a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    5c6e:	bf34      	ite	cc
    5c70:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    5c74:	2000      	movcs	r0, #0
}
    5c76:	4770      	bx	lr
    5c78:	0001e07c 	.word	0x0001e07c
    5c7c:	0001e0d4 	.word	0x0001e0d4

00005c80 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    5c80:	4b05      	ldr	r3, [pc, #20]	; (5c98 <log_backend_enable+0x18>)

	log_backend_id_set(backend, id);
    5c82:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    5c84:	1ac3      	subs	r3, r0, r3
    5c86:	111b      	asrs	r3, r3, #4
    5c88:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    5c8a:	7113      	strb	r3, [r2, #4]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
    5c8c:	6843      	ldr	r3, [r0, #4]
	backend->cb->active = true;
    5c8e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    5c90:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    5c92:	715a      	strb	r2, [r3, #5]

	z_log_notify_backend_enabled();
    5c94:	f7ff bde2 	b.w	585c <z_log_notify_backend_enabled>
    5c98:	0001e0d4 	.word	0x0001e0d4

00005c9c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5c9c:	2320      	movs	r3, #32
    5c9e:	4902      	ldr	r1, [pc, #8]	; (5ca8 <log_msg_pool_init+0xc>)
    5ca0:	4802      	ldr	r0, [pc, #8]	; (5cac <log_msg_pool_init+0x10>)
    5ca2:	461a      	mov	r2, r3
    5ca4:	f017 ba84 	b.w	1d1b0 <k_mem_slab_init>
    5ca8:	20004420 	.word	0x20004420
    5cac:	20000738 	.word	0x20000738

00005cb0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    5cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    5cb2:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5cb4:	4d09      	ldr	r5, [pc, #36]	; (5cdc <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    5cb6:	9301      	str	r3, [sp, #4]
    5cb8:	2001      	movs	r0, #1
    5cba:	f7ff fe6d 	bl	5998 <z_impl_log_process>
    5cbe:	4604      	mov	r4, r0
			z_log_dropped();
    5cc0:	f7ff fdda 	bl	5878 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5cc4:	2200      	movs	r2, #0
    5cc6:	2300      	movs	r3, #0
    5cc8:	a901      	add	r1, sp, #4
    5cca:	4628      	mov	r0, r5
    5ccc:	f005 fa52 	bl	b174 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    5cd0:	b108      	cbz	r0, 5cd6 <log_msg_no_space_handle+0x26>
    5cd2:	2c00      	cmp	r4, #0
    5cd4:	d1f0      	bne.n	5cb8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    5cd6:	9801      	ldr	r0, [sp, #4]
    5cd8:	b003      	add	sp, #12
    5cda:	bd30      	pop	{r4, r5, pc}
    5cdc:	20000738 	.word	0x20000738

00005ce0 <log_msg_chunk_alloc>:
{
    5ce0:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    5ce2:	2300      	movs	r3, #0
    5ce4:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    5ce6:	4807      	ldr	r0, [pc, #28]	; (5d04 <log_msg_chunk_alloc+0x24>)
    5ce8:	2200      	movs	r2, #0
    5cea:	2300      	movs	r3, #0
    5cec:	a901      	add	r1, sp, #4
    5cee:	f005 fa41 	bl	b174 <k_mem_slab_alloc>
	if (err != 0) {
    5cf2:	b110      	cbz	r0, 5cfa <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    5cf4:	f7ff ffdc 	bl	5cb0 <log_msg_no_space_handle>
    5cf8:	9001      	str	r0, [sp, #4]
}
    5cfa:	9801      	ldr	r0, [sp, #4]
    5cfc:	b003      	add	sp, #12
    5cfe:	f85d fb04 	ldr.w	pc, [sp], #4
    5d02:	bf00      	nop
    5d04:	20000738 	.word	0x20000738

00005d08 <msg_free>:
{
    5d08:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5d0a:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    5d0c:	7a45      	ldrb	r5, [r0, #9]
{
    5d0e:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    5d10:	092d      	lsrs	r5, r5, #4
{
    5d12:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    5d14:	07d8      	lsls	r0, r3, #31
    5d16:	d41c      	bmi.n	5d52 <msg_free+0x4a>
    5d18:	b1dd      	cbz	r5, 5d52 <msg_free+0x4a>
		uint32_t smask = 0U;
    5d1a:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    5d1c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    5d1e:	9801      	ldr	r0, [sp, #4]
    5d20:	4631      	mov	r1, r6
    5d22:	f016 fa0d 	bl	1c140 <log_msg_arg_get>
    5d26:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    5d28:	f7ff fe28 	bl	597c <log_is_strdup>
    5d2c:	b170      	cbz	r0, 5d4c <msg_free+0x44>
				if (smask == 0U) {
    5d2e:	b934      	cbnz	r4, 5d3e <msg_free+0x36>
					smask = z_log_get_s_mask(
    5d30:	9b01      	ldr	r3, [sp, #4]
    5d32:	4629      	mov	r1, r5
    5d34:	6918      	ldr	r0, [r3, #16]
    5d36:	f7ff fd05 	bl	5744 <z_log_get_s_mask>
					if (smask == 0U) {
    5d3a:	4604      	mov	r4, r0
    5d3c:	b148      	cbz	r0, 5d52 <msg_free+0x4a>
				if (smask & BIT(i)) {
    5d3e:	fa24 f306 	lsr.w	r3, r4, r6
    5d42:	07d9      	lsls	r1, r3, #31
    5d44:	d502      	bpl.n	5d4c <msg_free+0x44>
					log_free(buf);
    5d46:	4638      	mov	r0, r7
    5d48:	f7ff ff72 	bl	5c30 <log_free>
		for (i = 0U; i < nargs; i++) {
    5d4c:	3601      	adds	r6, #1
    5d4e:	42ae      	cmp	r6, r5
    5d50:	d3e5      	bcc.n	5d1e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    5d52:	9b01      	ldr	r3, [sp, #4]
    5d54:	7a1a      	ldrb	r2, [r3, #8]
    5d56:	0792      	lsls	r2, r2, #30
    5d58:	d504      	bpl.n	5d64 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5d5a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5d5c:	4c08      	ldr	r4, [pc, #32]	; (5d80 <msg_free+0x78>)
    5d5e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5d60:	9b03      	ldr	r3, [sp, #12]
    5d62:	b92b      	cbnz	r3, 5d70 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5d64:	4806      	ldr	r0, [pc, #24]	; (5d80 <msg_free+0x78>)
    5d66:	a901      	add	r1, sp, #4
    5d68:	f017 fa3d 	bl	1d1e6 <k_mem_slab_free>
}
    5d6c:	b005      	add	sp, #20
    5d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5d70:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5d72:	a903      	add	r1, sp, #12
    5d74:	4620      	mov	r0, r4
    5d76:	f017 fa36 	bl	1d1e6 <k_mem_slab_free>
		cont = next;
    5d7a:	9503      	str	r5, [sp, #12]
    5d7c:	e7f0      	b.n	5d60 <msg_free+0x58>
    5d7e:	bf00      	nop
    5d80:	20000738 	.word	0x20000738

00005d84 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    5d84:	b40e      	push	{r1, r2, r3}
    5d86:	b503      	push	{r0, r1, lr}
    5d88:	ab03      	add	r3, sp, #12
    5d8a:	4601      	mov	r1, r0
    5d8c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5d90:	4804      	ldr	r0, [pc, #16]	; (5da4 <print_formatted+0x20>)
	va_start(args, fmt);
    5d92:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5d94:	f7ff f8f2 	bl	4f7c <cbvprintf>
	va_end(args);

	return length;
}
    5d98:	b002      	add	sp, #8
    5d9a:	f85d eb04 	ldr.w	lr, [sp], #4
    5d9e:	b003      	add	sp, #12
    5da0:	4770      	bx	lr
    5da2:	bf00      	nop
    5da4:	0001c4a5 	.word	0x0001c4a5

00005da8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    5da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dac:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5dae:	f011 0602 	ands.w	r6, r1, #2
{
    5db2:	9205      	str	r2, [sp, #20]
    5db4:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    5db8:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    5dbc:	4607      	mov	r7, r0
    5dbe:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5dc0:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5dc4:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5dc8:	d006      	beq.n	5dd8 <prefix_print+0x30>
	if (!format) {
    5dca:	f011 0f44 	tst.w	r1, #68	; 0x44
    5dce:	d138      	bne.n	5e42 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    5dd0:	4932      	ldr	r1, [pc, #200]	; (5e9c <prefix_print+0xf4>)
    5dd2:	f7ff ffd7 	bl	5d84 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    5dd6:	4606      	mov	r6, r0
	if (color) {
    5dd8:	f1ba 0f00 	cmp.w	sl, #0
    5ddc:	d00a      	beq.n	5df4 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    5dde:	4b30      	ldr	r3, [pc, #192]	; (5ea0 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
    5de0:	4930      	ldr	r1, [pc, #192]	; (5ea4 <prefix_print+0xfc>)
		const char *log_color = start && (colors[level] != NULL) ?
    5de2:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    5de6:	4b30      	ldr	r3, [pc, #192]	; (5ea8 <prefix_print+0x100>)
    5de8:	4638      	mov	r0, r7
    5dea:	2a00      	cmp	r2, #0
    5dec:	bf08      	it	eq
    5dee:	461a      	moveq	r2, r3
    5df0:	f7ff ffc8 	bl	5d84 <print_formatted>
	if (level_on) {
    5df4:	b13d      	cbz	r5, 5e06 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    5df6:	4b2d      	ldr	r3, [pc, #180]	; (5eac <prefix_print+0x104>)
    5df8:	492d      	ldr	r1, [pc, #180]	; (5eb0 <prefix_print+0x108>)
    5dfa:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    5dfe:	4638      	mov	r0, r7
    5e00:	f7ff ffc0 	bl	5d84 <print_formatted>
    5e04:	4605      	mov	r5, r0
	if (source_id >= 0) {
    5e06:	f1b9 0f00 	cmp.w	r9, #0
    5e0a:	db16      	blt.n	5e3a <prefix_print+0x92>
		total += print_formatted(output,
    5e0c:	9b05      	ldr	r3, [sp, #20]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d041      	beq.n	5e96 <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5e12:	2301      	movs	r3, #1
    5e14:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    5e18:	4b26      	ldr	r3, [pc, #152]	; (5eb4 <prefix_print+0x10c>)
    5e1a:	4c27      	ldr	r4, [pc, #156]	; (5eb8 <prefix_print+0x110>)
    5e1c:	f018 0f10 	tst.w	r8, #16
    5e20:	bf18      	it	ne
    5e22:	461c      	movne	r4, r3
    5e24:	4649      	mov	r1, r9
    5e26:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    5e2a:	f7ff ff1b 	bl	5c64 <log_source_name_get>
    5e2e:	4621      	mov	r1, r4
    5e30:	4602      	mov	r2, r0
    5e32:	4638      	mov	r0, r7
    5e34:	f7ff ffa6 	bl	5d84 <print_formatted>
    5e38:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    5e3a:	19a8      	adds	r0, r5, r6
    5e3c:	b007      	add	sp, #28
    5e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    5e42:	4b1e      	ldr	r3, [pc, #120]	; (5ebc <prefix_print+0x114>)
    5e44:	6819      	ldr	r1, [r3, #0]
    5e46:	b321      	cbz	r1, 5e92 <prefix_print+0xea>
		timestamp /= timestamp_div;
    5e48:	4b1d      	ldr	r3, [pc, #116]	; (5ec0 <prefix_print+0x118>)
    5e4a:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    5e4e:	681b      	ldr	r3, [r3, #0]
    5e50:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    5e54:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    5e58:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    5e5c:	fbb4 f2fc 	udiv	r2, r4, ip
    5e60:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    5e64:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5e68:	4374      	muls	r4, r6
		mins = seconds / 60U;
    5e6a:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5e6e:	fbb4 fbf1 	udiv	fp, r4, r1
    5e72:	fb01 441b 	mls	r4, r1, fp, r4
    5e76:	4374      	muls	r4, r6
		mins = seconds / 60U;
    5e78:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5e7c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    5e80:	e9cd b101 	strd	fp, r1, [sp, #4]
    5e84:	fb0e c113 	mls	r1, lr, r3, ip
    5e88:	9100      	str	r1, [sp, #0]
    5e8a:	490e      	ldr	r1, [pc, #56]	; (5ec4 <prefix_print+0x11c>)
    5e8c:	f7ff ff7a 	bl	5d84 <print_formatted>
    5e90:	e7a1      	b.n	5dd6 <prefix_print+0x2e>
		length = 0;
    5e92:	4608      	mov	r0, r1
    5e94:	e79f      	b.n	5dd6 <prefix_print+0x2e>
		total += print_formatted(output,
    5e96:	4c08      	ldr	r4, [pc, #32]	; (5eb8 <prefix_print+0x110>)
    5e98:	e7c4      	b.n	5e24 <prefix_print+0x7c>
    5e9a:	bf00      	nop
    5e9c:	0001ef5c 	.word	0x0001ef5c
    5ea0:	0001e55c 	.word	0x0001e55c
    5ea4:	0001f4f1 	.word	0x0001f4f1
    5ea8:	0001ef4e 	.word	0x0001ef4e
    5eac:	0001e570 	.word	0x0001e570
    5eb0:	0001ef81 	.word	0x0001ef81
    5eb4:	0001ef58 	.word	0x0001ef58
    5eb8:	0001ef53 	.word	0x0001ef53
    5ebc:	20000754 	.word	0x20000754
    5ec0:	20000758 	.word	0x20000758
    5ec4:	0001ef65 	.word	0x0001ef65

00005ec8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    5ec8:	b538      	push	{r3, r4, r5, lr}
    5eca:	460c      	mov	r4, r1
	if (color) {
    5ecc:	07e1      	lsls	r1, r4, #31
{
    5ece:	4605      	mov	r5, r0
	if (color) {
    5ed0:	d503      	bpl.n	5eda <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    5ed2:	4a08      	ldr	r2, [pc, #32]	; (5ef4 <postfix_print+0x2c>)
    5ed4:	4908      	ldr	r1, [pc, #32]	; (5ef8 <postfix_print+0x30>)
    5ed6:	f7ff ff55 	bl	5d84 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5eda:	06e2      	lsls	r2, r4, #27
    5edc:	d408      	bmi.n	5ef0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5ede:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5ee0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5ee2:	bf4c      	ite	mi
    5ee4:	4905      	ldrmi	r1, [pc, #20]	; (5efc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    5ee6:	4906      	ldrpl	r1, [pc, #24]	; (5f00 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    5ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5eec:	f7ff bf4a 	b.w	5d84 <print_formatted>
}
    5ef0:	bd38      	pop	{r3, r4, r5, pc}
    5ef2:	bf00      	nop
    5ef4:	0001ef4e 	.word	0x0001ef4e
    5ef8:	0001f4f1 	.word	0x0001f4f1
    5efc:	0001ef88 	.word	0x0001ef88
    5f00:	0001ef87 	.word	0x0001ef87

00005f04 <hexdump_line_print>:
{
    5f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f08:	461d      	mov	r5, r3
    5f0a:	9b08      	ldr	r3, [sp, #32]
    5f0c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5f0e:	06da      	lsls	r2, r3, #27
{
    5f10:	4604      	mov	r4, r0
    5f12:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5f14:	d405      	bmi.n	5f22 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5f16:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5f18:	bf4c      	ite	mi
    5f1a:	492b      	ldrmi	r1, [pc, #172]	; (5fc8 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    5f1c:	492b      	ldrpl	r1, [pc, #172]	; (5fcc <hexdump_line_print+0xc8>)
    5f1e:	f7ff ff31 	bl	5d84 <print_formatted>
		print_formatted(output, " ");
    5f22:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5fd4 <hexdump_line_print+0xd0>
{
    5f26:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    5f2a:	45a8      	cmp	r8, r5
    5f2c:	db2d      	blt.n	5f8a <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    5f2e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 5fd8 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    5f32:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 5fdc <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    5f36:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5fd4 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f3a:	2500      	movs	r5, #0
		if (i < length) {
    5f3c:	42bd      	cmp	r5, r7
    5f3e:	d232      	bcs.n	5fa6 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    5f40:	5d72      	ldrb	r2, [r6, r5]
    5f42:	4649      	mov	r1, r9
    5f44:	4620      	mov	r0, r4
    5f46:	f7ff ff1d 	bl	5d84 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f4a:	3501      	adds	r5, #1
    5f4c:	2d10      	cmp	r5, #16
    5f4e:	d123      	bne.n	5f98 <hexdump_line_print+0x94>
	print_formatted(output, "|");
    5f50:	491f      	ldr	r1, [pc, #124]	; (5fd0 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
    5f52:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5fd4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    5f56:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5fe0 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    5f5a:	f8df a088 	ldr.w	sl, [pc, #136]	; 5fe4 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    5f5e:	4620      	mov	r0, r4
    5f60:	f7ff ff10 	bl	5d84 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f64:	2500      	movs	r5, #0
		if (i < length) {
    5f66:	42af      	cmp	r7, r5
    5f68:	d929      	bls.n	5fbe <hexdump_line_print+0xba>
			char c = (char)data[i];
    5f6a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    5f6c:	f812 3009 	ldrb.w	r3, [r2, r9]
    5f70:	f013 0f97 	tst.w	r3, #151	; 0x97
    5f74:	bf08      	it	eq
    5f76:	222e      	moveq	r2, #46	; 0x2e
    5f78:	4651      	mov	r1, sl
    5f7a:	4620      	mov	r0, r4
    5f7c:	f7ff ff02 	bl	5d84 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f80:	3501      	adds	r5, #1
    5f82:	2d10      	cmp	r5, #16
    5f84:	d114      	bne.n	5fb0 <hexdump_line_print+0xac>
}
    5f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    5f8a:	4649      	mov	r1, r9
    5f8c:	4620      	mov	r0, r4
    5f8e:	f7ff fef9 	bl	5d84 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5f92:	f108 0801 	add.w	r8, r8, #1
    5f96:	e7c8      	b.n	5f2a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5f98:	076a      	lsls	r2, r5, #29
    5f9a:	d1cf      	bne.n	5f3c <hexdump_line_print+0x38>
			print_formatted(output, " ");
    5f9c:	4651      	mov	r1, sl
    5f9e:	4620      	mov	r0, r4
    5fa0:	f7ff fef0 	bl	5d84 <print_formatted>
    5fa4:	e7ca      	b.n	5f3c <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    5fa6:	4641      	mov	r1, r8
    5fa8:	4620      	mov	r0, r4
    5faa:	f7ff feeb 	bl	5d84 <print_formatted>
    5fae:	e7cc      	b.n	5f4a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5fb0:	076b      	lsls	r3, r5, #29
    5fb2:	d1d8      	bne.n	5f66 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5fb4:	4641      	mov	r1, r8
    5fb6:	4620      	mov	r0, r4
    5fb8:	f7ff fee4 	bl	5d84 <print_formatted>
    5fbc:	e7d3      	b.n	5f66 <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5fbe:	4641      	mov	r1, r8
    5fc0:	4620      	mov	r0, r4
    5fc2:	f7ff fedf 	bl	5d84 <print_formatted>
    5fc6:	e7db      	b.n	5f80 <hexdump_line_print+0x7c>
    5fc8:	0001ef88 	.word	0x0001ef88
    5fcc:	0001ef87 	.word	0x0001ef87
    5fd0:	0001ef94 	.word	0x0001ef94
    5fd4:	0001ef92 	.word	0x0001ef92
    5fd8:	0001ef90 	.word	0x0001ef90
    5fdc:	0001ef8a 	.word	0x0001ef8a
    5fe0:	0001f954 	.word	0x0001f954
    5fe4:	0001ef96 	.word	0x0001ef96

00005fe8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5fec:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    5fee:	f013 0807 	ands.w	r8, r3, #7
{
    5ff2:	4617      	mov	r7, r2
    5ff4:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5ff6:	7a0a      	ldrb	r2, [r1, #8]
    5ff8:	4605      	mov	r5, r0
    5ffa:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    5ffc:	d021      	beq.n	6042 <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    5ffe:	8949      	ldrh	r1, [r1, #10]
    6000:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    6004:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    6008:	43d2      	mvns	r2, r2
    600a:	e9cd 8300 	strd	r8, r3, [sp]
    600e:	9102      	str	r1, [sp, #8]
    6010:	68f3      	ldr	r3, [r6, #12]
    6012:	f002 0201 	and.w	r2, r2, #1
    6016:	4639      	mov	r1, r7
    6018:	f7ff fec6 	bl	5da8 <prefix_print>
    601c:	4681      	mov	r9, r0
    601e:	7a34      	ldrb	r4, [r6, #8]
    6020:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    6022:	f014 0401 	ands.w	r4, r4, #1
    6026:	d00e      	beq.n	6046 <log_output_msg_process+0x5e>
		std_print(msg, output);
    6028:	4629      	mov	r1, r5
    602a:	4630      	mov	r0, r6
    602c:	f016 f8d0 	bl	1c1d0 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    6030:	f1b8 0f00 	cmp.w	r8, #0
    6034:	d02b      	beq.n	608e <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    6036:	4642      	mov	r2, r8
    6038:	4639      	mov	r1, r7
    603a:	4628      	mov	r0, r5
    603c:	f7ff ff44 	bl	5ec8 <postfix_print>
    6040:	e025      	b.n	608e <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    6042:	46c1      	mov	r9, r8
    6044:	e7eb      	b.n	601e <log_output_msg_process+0x36>
	} else if (raw_string) {
    6046:	f1b8 0f00 	cmp.w	r8, #0
    604a:	d126      	bne.n	609a <log_output_msg_process+0xb2>
	size_t offset = 0;
    604c:	4627      	mov	r7, r4
		length = output->size;
    604e:	68eb      	ldr	r3, [r5, #12]
    6050:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    6052:	aa06      	add	r2, sp, #24
    6054:	463b      	mov	r3, r7
    6056:	68a9      	ldr	r1, [r5, #8]
    6058:	4630      	mov	r0, r6
    605a:	f016 f8a5 	bl	1c1a8 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    605e:	9a06      	ldr	r2, [sp, #24]
    6060:	686b      	ldr	r3, [r5, #4]
    6062:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    6064:	b13a      	cbz	r2, 6076 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    6066:	68ab      	ldr	r3, [r5, #8]
    6068:	4413      	add	r3, r2
    606a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    606e:	f1a4 030a 	sub.w	r3, r4, #10
    6072:	425c      	negs	r4, r3
    6074:	415c      	adcs	r4, r3
		log_output_flush(output);
    6076:	4628      	mov	r0, r5
    6078:	f016 fa07 	bl	1c48a <log_output_flush>
		offset += length;
    607c:	9b06      	ldr	r3, [sp, #24]
    607e:	441f      	add	r7, r3
	} while (length > 0);
    6080:	2b00      	cmp	r3, #0
    6082:	d1e4      	bne.n	604e <log_output_msg_process+0x66>
	if (eol) {
    6084:	b11c      	cbz	r4, 608e <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    6086:	4914      	ldr	r1, [pc, #80]	; (60d8 <log_output_msg_process+0xf0>)
    6088:	4628      	mov	r0, r5
    608a:	f7ff fe7b 	bl	5d84 <print_formatted>
	}

	log_output_flush(output);
    608e:	4628      	mov	r0, r5
    6090:	f016 f9fb 	bl	1c48a <log_output_flush>
}
    6094:	b00a      	add	sp, #40	; 0x28
    6096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    609a:	4630      	mov	r0, r6
    609c:	f016 f882 	bl	1c1a4 <log_msg_str_get>
    60a0:	490e      	ldr	r1, [pc, #56]	; (60dc <log_output_msg_process+0xf4>)
    60a2:	4602      	mov	r2, r0
    60a4:	4628      	mov	r0, r5
    60a6:	f7ff fe6d 	bl	5d84 <print_formatted>
		length = sizeof(buf);
    60aa:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    60ae:	aa05      	add	r2, sp, #20
    60b0:	4623      	mov	r3, r4
    60b2:	a906      	add	r1, sp, #24
    60b4:	4630      	mov	r0, r6
		length = sizeof(buf);
    60b6:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    60ba:	f016 f875 	bl	1c1a8 <log_msg_hexdump_data_get>
		if (length) {
    60be:	9a05      	ldr	r2, [sp, #20]
    60c0:	2a00      	cmp	r2, #0
    60c2:	d0b8      	beq.n	6036 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    60c4:	464b      	mov	r3, r9
    60c6:	9700      	str	r7, [sp, #0]
    60c8:	a906      	add	r1, sp, #24
    60ca:	4628      	mov	r0, r5
    60cc:	f7ff ff1a 	bl	5f04 <hexdump_line_print>
			offset += length;
    60d0:	9b05      	ldr	r3, [sp, #20]
    60d2:	441c      	add	r4, r3
		length = sizeof(buf);
    60d4:	e7eb      	b.n	60ae <log_output_msg_process+0xc6>
    60d6:	bf00      	nop
    60d8:	0001ef99 	.word	0x0001ef99
    60dc:	0001f4f1 	.word	0x0001f4f1

000060e0 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    60e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    60e2:	f242 730f 	movw	r3, #9999	; 0x270f
    60e6:	428b      	cmp	r3, r1
    60e8:	bf28      	it	cs
    60ea:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    60ec:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    60ee:	4a0f      	ldr	r2, [pc, #60]	; (612c <log_output_dropped_process+0x4c>)
{
    60f0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    60f2:	2105      	movs	r1, #5
    60f4:	4668      	mov	r0, sp
    60f6:	f015 fd8d 	bl	1bc14 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    60fa:	6863      	ldr	r3, [r4, #4]
    60fc:	490c      	ldr	r1, [pc, #48]	; (6130 <log_output_dropped_process+0x50>)
    60fe:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6100:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    6102:	220b      	movs	r2, #11
    6104:	4628      	mov	r0, r5
    6106:	f016 f856 	bl	1c1b6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    610a:	6863      	ldr	r3, [r4, #4]
    610c:	4632      	mov	r2, r6
    610e:	4669      	mov	r1, sp
    6110:	4628      	mov	r0, r5
    6112:	685b      	ldr	r3, [r3, #4]
    6114:	f016 f84f 	bl	1c1b6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    6118:	6863      	ldr	r3, [r4, #4]
    611a:	4906      	ldr	r1, [pc, #24]	; (6134 <log_output_dropped_process+0x54>)
    611c:	685b      	ldr	r3, [r3, #4]
    611e:	221b      	movs	r2, #27
    6120:	4628      	mov	r0, r5
    6122:	f016 f848 	bl	1c1b6 <buffer_write>
		     output->control_block->ctx);
}
    6126:	b002      	add	sp, #8
    6128:	bd70      	pop	{r4, r5, r6, pc}
    612a:	bf00      	nop
    612c:	0001f677 	.word	0x0001f677
    6130:	0001efd7 	.word	0x0001efd7
    6134:	0001efbb 	.word	0x0001efbb

00006138 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    6138:	4a08      	ldr	r2, [pc, #32]	; (615c <log_output_timestamp_freq_set+0x24>)
{
    613a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    613c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    613e:	4c08      	ldr	r4, [pc, #32]	; (6160 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    6140:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    6142:	2100      	movs	r1, #0
    6144:	42a0      	cmp	r0, r4
    6146:	d804      	bhi.n	6152 <log_output_timestamp_freq_set+0x1a>
    6148:	b101      	cbz	r1, 614c <log_output_timestamp_freq_set+0x14>
    614a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    614c:	4b05      	ldr	r3, [pc, #20]	; (6164 <log_output_timestamp_freq_set+0x2c>)
    614e:	6018      	str	r0, [r3, #0]
}
    6150:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    6152:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    6154:	005b      	lsls	r3, r3, #1
    6156:	2101      	movs	r1, #1
    6158:	e7f4      	b.n	6144 <log_output_timestamp_freq_set+0xc>
    615a:	bf00      	nop
    615c:	20000758 	.word	0x20000758
    6160:	000f4240 	.word	0x000f4240
    6164:	20000754 	.word	0x20000754

00006168 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    6168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    616a:	4f07      	ldr	r7, [pc, #28]	; (6188 <char_out+0x20>)
{
    616c:	460d      	mov	r5, r1
    616e:	4604      	mov	r4, r0
    6170:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    6172:	42b4      	cmp	r4, r6
    6174:	d101      	bne.n	617a <char_out+0x12>
#endif
	}

	return length;
}
    6176:	4628      	mov	r0, r5
    6178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    617a:	6838      	ldr	r0, [r7, #0]
    617c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    6180:	6883      	ldr	r3, [r0, #8]
    6182:	685b      	ldr	r3, [r3, #4]
    6184:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    6186:	e7f4      	b.n	6172 <char_out+0xa>
    6188:	20000770 	.word	0x20000770

0000618c <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    618c:	4b01      	ldr	r3, [pc, #4]	; (6194 <log_backend_uart_init+0x8>)
    618e:	4a02      	ldr	r2, [pc, #8]	; (6198 <log_backend_uart_init+0xc>)
    6190:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    6192:	4770      	bx	lr
    6194:	20000770 	.word	0x20000770
    6198:	0001de6c 	.word	0x0001de6c

0000619c <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    619c:	4801      	ldr	r0, [pc, #4]	; (61a4 <panic+0x8>)
    619e:	f016 b974 	b.w	1c48a <log_output_flush>
    61a2:	bf00      	nop
    61a4:	0001e5a0 	.word	0x0001e5a0

000061a8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    61a8:	4801      	ldr	r0, [pc, #4]	; (61b0 <dropped+0x8>)
    61aa:	f7ff bf99 	b.w	60e0 <log_output_dropped_process>
    61ae:	bf00      	nop
    61b0:	0001e5a0 	.word	0x0001e5a0

000061b4 <put>:
{
    61b4:	b510      	push	{r4, lr}
	log_msg_get(msg);
    61b6:	4608      	mov	r0, r1
    61b8:	460c      	mov	r4, r1
    61ba:	f015 ffb1 	bl	1c120 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    61be:	4805      	ldr	r0, [pc, #20]	; (61d4 <put+0x20>)
    61c0:	4621      	mov	r1, r4
    61c2:	220f      	movs	r2, #15
    61c4:	f7ff ff10 	bl	5fe8 <log_output_msg_process>
	log_msg_put(msg);
    61c8:	4620      	mov	r0, r4
}
    61ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    61ce:	f015 bfd6 	b.w	1c17e <log_msg_put>
    61d2:	bf00      	nop
    61d4:	0001e5a0 	.word	0x0001e5a0

000061d8 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
    61d8:	4602      	mov	r2, r0
    61da:	b510      	push	{r4, lr}
	if (!uart_dev) {
    61dc:	4608      	mov	r0, r1
    61de:	b199      	cbz	r1, 6208 <tty_init+0x30>
	}

	tty->uart_dev = uart_dev;

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    61e0:	2400      	movs	r4, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = SYS_FOREVER_MS;
    61e2:	f04f 33ff 	mov.w	r3, #4294967295
	tty->tx_timeout = SYS_FOREVER_MS;
    61e6:	e9c2 4313 	strd	r4, r3, [r2, #76]	; 0x4c
	tty->rx_timeout = SYS_FOREVER_MS;
    61ea:	6293      	str	r3, [r2, #40]	; 0x28
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    61ec:	688b      	ldr	r3, [r1, #8]
	tty->uart_dev = uart_dev;
    61ee:	6011      	str	r1, [r2, #0]
	tty->rx_ringbuf_sz = 0U;
    61f0:	e9c2 4407 	strd	r4, r4, [r2, #28]
	tty->tx_ringbuf_sz = 0U;
    61f4:	e9c2 4411 	strd	r4, r4, [r2, #68]	; 0x44
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    61f8:	6254      	str	r4, [r2, #36]	; 0x24
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    61fa:	b143      	cbz	r3, 620e <tty_init+0x36>
    61fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    61fe:	b133      	cbz	r3, 620e <tty_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    6200:	4904      	ldr	r1, [pc, #16]	; (6214 <tty_init+0x3c>)
    6202:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    6204:	4620      	mov	r0, r4
}
    6206:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6208:	f06f 0012 	mvn.w	r0, #18
    620c:	e7fb      	b.n	6206 <tty_init+0x2e>
	return 0;
    620e:	4618      	mov	r0, r3
    6210:	e7f9      	b.n	6206 <tty_init+0x2e>
    6212:	bf00      	nop
    6214:	0001c591 	.word	0x0001c591

00006218 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    621a:	4605      	mov	r5, r0
	__asm__ volatile(
    621c:	f04f 0320 	mov.w	r3, #32
    6220:	f3ef 8611 	mrs	r6, BASEPRI
    6224:	f383 8812 	msr	BASEPRI_MAX, r3
    6228:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    622c:	4b0b      	ldr	r3, [pc, #44]	; (625c <pm_state_notify+0x44>)
    622e:	681c      	ldr	r4, [r3, #0]
    6230:	2c00      	cmp	r4, #0
    6232:	bf38      	it	cc
    6234:	2400      	movcc	r4, #0
    6236:	b15c      	cbz	r4, 6250 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    6238:	4f09      	ldr	r7, [pc, #36]	; (6260 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    623a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    623e:	2d00      	cmp	r5, #0
    6240:	bf08      	it	eq
    6242:	4613      	moveq	r3, r2
		if (callback) {
    6244:	b10b      	cbz	r3, 624a <pm_state_notify+0x32>
			callback(z_power_state.state);
    6246:	7838      	ldrb	r0, [r7, #0]
    6248:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    624a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    624c:	2c00      	cmp	r4, #0
    624e:	d1f4      	bne.n	623a <pm_state_notify+0x22>
	__asm__ volatile(
    6250:	f386 8811 	msr	BASEPRI, r6
    6254:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    625a:	bf00      	nop
    625c:	20000774 	.word	0x20000774
    6260:	2000077c 	.word	0x2000077c

00006264 <pm_system_resume>:

void pm_system_resume(void)
{
    6264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    6266:	4b0f      	ldr	r3, [pc, #60]	; (62a4 <pm_system_resume+0x40>)
    6268:	681a      	ldr	r2, [r3, #0]
    626a:	b9ba      	cbnz	r2, 629c <pm_system_resume+0x38>
		post_ops_done = 1;
    626c:	2201      	movs	r2, #1
    626e:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    6270:	4a0d      	ldr	r2, [pc, #52]	; (62a8 <pm_system_resume+0x44>)
    6272:	ca07      	ldmia	r2, {r0, r1, r2}
    6274:	ab01      	add	r3, sp, #4
    6276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    627a:	4a0c      	ldr	r2, [pc, #48]	; (62ac <pm_system_resume+0x48>)
    627c:	b14a      	cbz	r2, 6292 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    627e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    6282:	f016 fad6 	bl	1c832 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    6286:	2000      	movs	r0, #0
	}
}
    6288:	b005      	add	sp, #20
    628a:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    628e:	f7ff bfc3 	b.w	6218 <pm_state_notify>
    6292:	f382 8811 	msr	BASEPRI, r2
    6296:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    629a:	e7f4      	b.n	6286 <pm_system_resume+0x22>
}
    629c:	b005      	add	sp, #20
    629e:	f85d fb04 	ldr.w	pc, [sp], #4
    62a2:	bf00      	nop
    62a4:	20000010 	.word	0x20000010
    62a8:	2000077c 	.word	0x2000077c
    62ac:	0001c833 	.word	0x0001c833

000062b0 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    62b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62b2:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    62b4:	466e      	mov	r6, sp
    62b6:	4601      	mov	r1, r0
{
    62b8:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    62ba:	4630      	mov	r0, r6
    62bc:	f016 fa7f 	bl	1c7be <pm_policy_next_state>
    62c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    62c4:	4c17      	ldr	r4, [pc, #92]	; (6324 <pm_system_suspend+0x74>)
    62c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    62ca:	7820      	ldrb	r0, [r4, #0]
    62cc:	b340      	cbz	r0, 6320 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    62ce:	4b16      	ldr	r3, [pc, #88]	; (6328 <pm_system_suspend+0x78>)
    62d0:	2100      	movs	r1, #0
    62d2:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    62d4:	1c6b      	adds	r3, r5, #1
    62d6:	d00e      	beq.n	62f6 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    62d8:	4814      	ldr	r0, [pc, #80]	; (632c <pm_system_suspend+0x7c>)
    62da:	4617      	mov	r7, r2
    62dc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    62e0:	2100      	movs	r1, #0
    62e2:	4a13      	ldr	r2, [pc, #76]	; (6330 <pm_system_suspend+0x80>)
    62e4:	2300      	movs	r3, #0
    62e6:	fbe6 0107 	umlal	r0, r1, r6, r7
    62ea:	f7fa fbe5 	bl	ab8 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    62ee:	2101      	movs	r1, #1
    62f0:	1a28      	subs	r0, r5, r0
    62f2:	f017 f927 	bl	1d544 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    62f6:	f005 fad9 	bl	b8ac <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    62fa:	2001      	movs	r0, #1
    62fc:	f7ff ff8c 	bl	6218 <pm_state_notify>
	pm_state_set(z_power_state);
    6300:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    6304:	ab05      	add	r3, sp, #20
    6306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    630a:	4a0a      	ldr	r2, [pc, #40]	; (6334 <pm_system_suspend+0x84>)
    630c:	b11a      	cbz	r2, 6316 <pm_system_suspend+0x66>
		pm_power_state_set(info);
    630e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    6312:	f016 fa7b 	bl	1c80c <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    6316:	f7ff ffa5 	bl	6264 <pm_system_resume>
	k_sched_unlock();
    631a:	f005 fca1 	bl	bc60 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    631e:	7820      	ldrb	r0, [r4, #0]
}
    6320:	b009      	add	sp, #36	; 0x24
    6322:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6324:	2000077c 	.word	0x2000077c
    6328:	20000010 	.word	0x20000010
    632c:	000f423f 	.word	0x000f423f
    6330:	000f4240 	.word	0x000f4240
    6334:	0001c80d 	.word	0x0001c80d

00006338 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    6338:	4801      	ldr	r0, [pc, #4]	; (6340 <nrf_cc3xx_platform_abort_init+0x8>)
    633a:	f006 b8f9 	b.w	c530 <nrf_cc3xx_platform_set_abort>
    633e:	bf00      	nop
    6340:	0001e5b0 	.word	0x0001e5b0

00006344 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6344:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    6346:	b1d0      	cbz	r0, 637e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    6348:	6843      	ldr	r3, [r0, #4]
    634a:	2b04      	cmp	r3, #4
    634c:	d111      	bne.n	6372 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    634e:	2200      	movs	r2, #0
    6350:	6803      	ldr	r3, [r0, #0]
    6352:	f3bf 8f5b 	dmb	ish
    6356:	e853 1f00 	ldrex	r1, [r3]
    635a:	2901      	cmp	r1, #1
    635c:	d103      	bne.n	6366 <mutex_unlock_platform+0x22>
    635e:	e843 2000 	strex	r0, r2, [r3]
    6362:	2800      	cmp	r0, #0
    6364:	d1f7      	bne.n	6356 <mutex_unlock_platform+0x12>
    6366:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    636a:	4807      	ldr	r0, [pc, #28]	; (6388 <mutex_unlock_platform+0x44>)
    636c:	bf08      	it	eq
    636e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    6370:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    6372:	b13b      	cbz	r3, 6384 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    6374:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    6376:	f005 f87d 	bl	b474 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    637a:	2000      	movs	r0, #0
    637c:	e7f8      	b.n	6370 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    637e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6382:	e7f5      	b.n	6370 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    6384:	4801      	ldr	r0, [pc, #4]	; (638c <mutex_unlock_platform+0x48>)
    6386:	e7f3      	b.n	6370 <mutex_unlock_platform+0x2c>
    6388:	ffff8fe9 	.word	0xffff8fe9
    638c:	ffff8fea 	.word	0xffff8fea

00006390 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6390:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    6392:	4604      	mov	r4, r0
    6394:	b918      	cbnz	r0, 639e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    6396:	4b0d      	ldr	r3, [pc, #52]	; (63cc <mutex_free_platform+0x3c>)
    6398:	480d      	ldr	r0, [pc, #52]	; (63d0 <mutex_free_platform+0x40>)
    639a:	685b      	ldr	r3, [r3, #4]
    639c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    639e:	6861      	ldr	r1, [r4, #4]
    63a0:	2908      	cmp	r1, #8
    63a2:	d00d      	beq.n	63c0 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    63a4:	f031 0304 	bics.w	r3, r1, #4
    63a8:	d00a      	beq.n	63c0 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    63aa:	f011 0102 	ands.w	r1, r1, #2
    63ae:	d008      	beq.n	63c2 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    63b0:	4808      	ldr	r0, [pc, #32]	; (63d4 <mutex_free_platform+0x44>)
    63b2:	4621      	mov	r1, r4
    63b4:	f016 ff17 	bl	1d1e6 <k_mem_slab_free>
        mutex->mutex = NULL;
    63b8:	2300      	movs	r3, #0
    63ba:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    63bc:	2300      	movs	r3, #0
    63be:	6063      	str	r3, [r4, #4]
}
    63c0:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
    63c2:	6820      	ldr	r0, [r4, #0]
    63c4:	2214      	movs	r2, #20
    63c6:	f017 fa9e 	bl	1d906 <memset>
    63ca:	e7f7      	b.n	63bc <mutex_free_platform+0x2c>
    63cc:	2000010c 	.word	0x2000010c
    63d0:	0001effa 	.word	0x0001effa
    63d4:	20000788 	.word	0x20000788

000063d8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    63d8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    63da:	4604      	mov	r4, r0
    63dc:	b918      	cbnz	r0, 63e6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    63de:	4b16      	ldr	r3, [pc, #88]	; (6438 <mutex_init_platform+0x60>)
    63e0:	4816      	ldr	r0, [pc, #88]	; (643c <mutex_init_platform+0x64>)
    63e2:	685b      	ldr	r3, [r3, #4]
    63e4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    63e6:	6863      	ldr	r3, [r4, #4]
    63e8:	2b04      	cmp	r3, #4
    63ea:	d023      	beq.n	6434 <mutex_init_platform+0x5c>
    63ec:	2b08      	cmp	r3, #8
    63ee:	d021      	beq.n	6434 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    63f0:	b9cb      	cbnz	r3, 6426 <mutex_init_platform+0x4e>
    63f2:	6823      	ldr	r3, [r4, #0]
    63f4:	b9bb      	cbnz	r3, 6426 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    63f6:	4812      	ldr	r0, [pc, #72]	; (6440 <mutex_init_platform+0x68>)
    63f8:	f04f 32ff 	mov.w	r2, #4294967295
    63fc:	f04f 33ff 	mov.w	r3, #4294967295
    6400:	4621      	mov	r1, r4
    6402:	f004 feb7 	bl	b174 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    6406:	b908      	cbnz	r0, 640c <mutex_init_platform+0x34>
    6408:	6823      	ldr	r3, [r4, #0]
    640a:	b91b      	cbnz	r3, 6414 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    640c:	4b0a      	ldr	r3, [pc, #40]	; (6438 <mutex_init_platform+0x60>)
    640e:	480d      	ldr	r0, [pc, #52]	; (6444 <mutex_init_platform+0x6c>)
    6410:	685b      	ldr	r3, [r3, #4]
    6412:	4798      	blx	r3
    6414:	6820      	ldr	r0, [r4, #0]
    6416:	2214      	movs	r2, #20
    6418:	2100      	movs	r1, #0
    641a:	f017 fa74 	bl	1d906 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    641e:	6863      	ldr	r3, [r4, #4]
    6420:	f043 0302 	orr.w	r3, r3, #2
    6424:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    6426:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    6428:	f016 ff1a 	bl	1d260 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    642c:	6863      	ldr	r3, [r4, #4]
    642e:	f043 0301 	orr.w	r3, r3, #1
    6432:	6063      	str	r3, [r4, #4]
}
    6434:	bd10      	pop	{r4, pc}
    6436:	bf00      	nop
    6438:	2000010c 	.word	0x2000010c
    643c:	0001effa 	.word	0x0001effa
    6440:	20000788 	.word	0x20000788
    6444:	0001f020 	.word	0x0001f020

00006448 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6448:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    644a:	b308      	cbz	r0, 6490 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    644c:	6843      	ldr	r3, [r0, #4]
    644e:	2b04      	cmp	r3, #4
    6450:	d110      	bne.n	6474 <mutex_lock_platform+0x2c>
    6452:	2201      	movs	r2, #1
    6454:	6803      	ldr	r3, [r0, #0]
    6456:	f3bf 8f5b 	dmb	ish
    645a:	e853 1f00 	ldrex	r1, [r3]
    645e:	2900      	cmp	r1, #0
    6460:	d103      	bne.n	646a <mutex_lock_platform+0x22>
    6462:	e843 2000 	strex	r0, r2, [r3]
    6466:	2800      	cmp	r0, #0
    6468:	d1f7      	bne.n	645a <mutex_lock_platform+0x12>
    646a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    646e:	d10b      	bne.n	6488 <mutex_lock_platform+0x40>
    6470:	2000      	movs	r0, #0
}
    6472:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    6474:	b153      	cbz	r3, 648c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    6476:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    6478:	f04f 32ff 	mov.w	r2, #4294967295
    647c:	f04f 33ff 	mov.w	r3, #4294967295
    6480:	f004 ff7a 	bl	b378 <z_impl_k_mutex_lock>
        if (ret == 0) {
    6484:	2800      	cmp	r0, #0
    6486:	d0f3      	beq.n	6470 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    6488:	4803      	ldr	r0, [pc, #12]	; (6498 <mutex_lock_platform+0x50>)
    648a:	e7f2      	b.n	6472 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    648c:	4803      	ldr	r0, [pc, #12]	; (649c <mutex_lock_platform+0x54>)
    648e:	e7f0      	b.n	6472 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    6490:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6494:	e7ed      	b.n	6472 <mutex_lock_platform+0x2a>
    6496:	bf00      	nop
    6498:	ffff8fe9 	.word	0xffff8fe9
    649c:	ffff8fea 	.word	0xffff8fea

000064a0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    64a0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    64a2:	4906      	ldr	r1, [pc, #24]	; (64bc <nrf_cc3xx_platform_mutex_init+0x1c>)
    64a4:	4806      	ldr	r0, [pc, #24]	; (64c0 <nrf_cc3xx_platform_mutex_init+0x20>)
    64a6:	2340      	movs	r3, #64	; 0x40
    64a8:	2214      	movs	r2, #20
    64aa:	f016 fe81 	bl	1d1b0 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    64ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    64b2:	4904      	ldr	r1, [pc, #16]	; (64c4 <nrf_cc3xx_platform_mutex_init+0x24>)
    64b4:	4804      	ldr	r0, [pc, #16]	; (64c8 <nrf_cc3xx_platform_mutex_init+0x28>)
    64b6:	f006 b89d 	b.w	c5f4 <nrf_cc3xx_platform_set_mutexes>
    64ba:	bf00      	nop
    64bc:	200007a4 	.word	0x200007a4
    64c0:	20000788 	.word	0x20000788
    64c4:	0001e5c8 	.word	0x0001e5c8
    64c8:	0001e5b8 	.word	0x0001e5b8

000064cc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    64cc:	4901      	ldr	r1, [pc, #4]	; (64d4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    64ce:	2210      	movs	r2, #16
	str	r2, [r1]
    64d0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    64d2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    64d4:	e000ed10 	.word	0xe000ed10

000064d8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    64d8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    64da:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    64dc:	f380 8811 	msr	BASEPRI, r0
	isb
    64e0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    64e4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    64e8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    64ea:	b662      	cpsie	i
	isb
    64ec:	f3bf 8f6f 	isb	sy

	bx	lr
    64f0:	4770      	bx	lr
    64f2:	bf00      	nop

000064f4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    64f4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    64f6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    64f8:	f381 8811 	msr	BASEPRI, r1

	wfe
    64fc:	bf20      	wfe

	msr	BASEPRI, r0
    64fe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    6502:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    6504:	4770      	bx	lr
    6506:	bf00      	nop

00006508 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6508:	b573      	push	{r0, r1, r4, r5, r6, lr}
    650a:	4606      	mov	r6, r0

	if (esf != NULL) {
    650c:	460c      	mov	r4, r1
    650e:	b301      	cbz	r1, 6552 <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    6510:	4b13      	ldr	r3, [pc, #76]	; (6560 <z_arm_fatal_error+0x58>)
    6512:	4d14      	ldr	r5, [pc, #80]	; (6564 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6514:	4814      	ldr	r0, [pc, #80]	; (6568 <z_arm_fatal_error+0x60>)
    6516:	1aed      	subs	r5, r5, r3
    6518:	08ed      	lsrs	r5, r5, #3
    651a:	01ad      	lsls	r5, r5, #6
    651c:	f045 0501 	orr.w	r5, r5, #1
    6520:	f8ad 5000 	strh.w	r5, [sp]
    6524:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    6528:	6809      	ldr	r1, [r1, #0]
    652a:	f015 fd87 	bl	1c03c <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    652e:	f8ad 5000 	strh.w	r5, [sp]
    6532:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6536:	68e1      	ldr	r1, [r4, #12]
    6538:	480c      	ldr	r0, [pc, #48]	; (656c <z_arm_fatal_error+0x64>)
    653a:	f015 fd7f 	bl	1c03c <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    653e:	69e1      	ldr	r1, [r4, #28]
    6540:	480b      	ldr	r0, [pc, #44]	; (6570 <z_arm_fatal_error+0x68>)
    6542:	462a      	mov	r2, r5
    6544:	f015 fd4d 	bl	1bfe2 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6548:	69a1      	ldr	r1, [r4, #24]
    654a:	480a      	ldr	r0, [pc, #40]	; (6574 <z_arm_fatal_error+0x6c>)
    654c:	462a      	mov	r2, r5
    654e:	f015 fd48 	bl	1bfe2 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6552:	4621      	mov	r1, r4
    6554:	4630      	mov	r0, r6
}
    6556:	b002      	add	sp, #8
    6558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    655c:	f004 bcc6 	b.w	aeec <z_fatal_error>
    6560:	0001e07c 	.word	0x0001e07c
    6564:	0001e09c 	.word	0x0001e09c
    6568:	0001f04d 	.word	0x0001f04d
    656c:	0001f07c 	.word	0x0001f07c
    6570:	0001f0ab 	.word	0x0001f0ab
    6574:	0001f0ba 	.word	0x0001f0ba

00006578 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6578:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    657a:	2b00      	cmp	r3, #0
    657c:	db08      	blt.n	6590 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    657e:	2201      	movs	r2, #1
    6580:	f000 001f 	and.w	r0, r0, #31
    6584:	fa02 f000 	lsl.w	r0, r2, r0
    6588:	095b      	lsrs	r3, r3, #5
    658a:	4a02      	ldr	r2, [pc, #8]	; (6594 <arch_irq_enable+0x1c>)
    658c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6590:	4770      	bx	lr
    6592:	bf00      	nop
    6594:	e000e100 	.word	0xe000e100

00006598 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6598:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    659a:	2b00      	cmp	r3, #0
    659c:	db0d      	blt.n	65ba <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    659e:	2201      	movs	r2, #1
    65a0:	095b      	lsrs	r3, r3, #5
    65a2:	f000 001f 	and.w	r0, r0, #31
    65a6:	fa02 f000 	lsl.w	r0, r2, r0
    65aa:	3320      	adds	r3, #32
    65ac:	4a03      	ldr	r2, [pc, #12]	; (65bc <arch_irq_disable+0x24>)
    65ae:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    65b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    65b6:	f3bf 8f6f 	isb	sy
}
    65ba:	4770      	bx	lr
    65bc:	e000e100 	.word	0xe000e100

000065c0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    65c0:	4b05      	ldr	r3, [pc, #20]	; (65d8 <arch_irq_is_enabled+0x18>)
    65c2:	0942      	lsrs	r2, r0, #5
    65c4:	f000 001f 	and.w	r0, r0, #31
    65c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    65cc:	2301      	movs	r3, #1
    65ce:	fa03 f000 	lsl.w	r0, r3, r0
}
    65d2:	4010      	ands	r0, r2
    65d4:	4770      	bx	lr
    65d6:	bf00      	nop
    65d8:	e000e100 	.word	0xe000e100

000065dc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    65dc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    65de:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    65e0:	bfa8      	it	ge
    65e2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    65e6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    65ea:	bfb8      	it	lt
    65ec:	4b06      	ldrlt	r3, [pc, #24]	; (6608 <z_arm_irq_priority_set+0x2c>)
    65ee:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    65f2:	bfac      	ite	ge
    65f4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    65f8:	f000 000f 	andlt.w	r0, r0, #15
    65fc:	b2c9      	uxtb	r1, r1
    65fe:	bfb4      	ite	lt
    6600:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6602:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    6606:	4770      	bx	lr
    6608:	e000ed14 	.word	0xe000ed14

0000660c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    660c:	bf30      	wfi
    b z_SysNmiOnReset
    660e:	f7ff bffd 	b.w	660c <z_SysNmiOnReset>
    6612:	bf00      	nop

00006614 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6614:	4a0b      	ldr	r2, [pc, #44]	; (6644 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    6616:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6618:	4b0b      	ldr	r3, [pc, #44]	; (6648 <z_arm_prep_c+0x34>)
    661a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    661e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6620:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6624:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6628:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    662c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6634:	f004 fcfe 	bl	b034 <z_bss_zero>
	z_data_copy();
    6638:	f005 fc5c 	bl	bef4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    663c:	f000 fb24 	bl	6c88 <z_arm_interrupt_init>
	z_cstart();
    6640:	f004 fd02 	bl	b048 <z_cstart>
    6644:	00000000 	.word	0x00000000
    6648:	e000ed00 	.word	0xe000ed00

0000664c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    664c:	4a09      	ldr	r2, [pc, #36]	; (6674 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    664e:	490a      	ldr	r1, [pc, #40]	; (6678 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    6650:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6652:	6809      	ldr	r1, [r1, #0]
    6654:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6656:	4909      	ldr	r1, [pc, #36]	; (667c <arch_swap+0x30>)
	_current->arch.basepri = key;
    6658:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    665a:	684b      	ldr	r3, [r1, #4]
    665c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6660:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    6662:	2300      	movs	r3, #0
    6664:	f383 8811 	msr	BASEPRI, r3
    6668:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    666c:	6893      	ldr	r3, [r2, #8]
}
    666e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    6670:	4770      	bx	lr
    6672:	bf00      	nop
    6674:	2000103c 	.word	0x2000103c
    6678:	0001e864 	.word	0x0001e864
    667c:	e000ed00 	.word	0xe000ed00

00006680 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6680:	4912      	ldr	r1, [pc, #72]	; (66cc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6682:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6684:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    6688:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    668a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    668e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6692:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    6694:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6698:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    669c:	4f0c      	ldr	r7, [pc, #48]	; (66d0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    669e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    66a2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    66a4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    66a6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    66a8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    66aa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    66ac:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    66ae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    66b2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    66b4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    66b6:	f000 fb7d 	bl	6db4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    66ba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    66be:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    66c2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    66c6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    66ca:	4770      	bx	lr
    ldr r1, =_kernel
    66cc:	2000103c 	.word	0x2000103c
    ldr v4, =_SCS_ICSR
    66d0:	e000ed04 	.word	0xe000ed04

000066d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    66d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    66d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    66da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    66de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    66e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    66e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    66e8:	2902      	cmp	r1, #2
    beq _oops
    66ea:	d0ff      	beq.n	66ec <_oops>

000066ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    66ec:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    66ee:	f016 f86f 	bl	1c7d0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    66f2:	bd01      	pop	{r0, pc}

000066f4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    66f4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    66f8:	9b00      	ldr	r3, [sp, #0]
    66fa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    66fe:	490a      	ldr	r1, [pc, #40]	; (6728 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6700:	9b01      	ldr	r3, [sp, #4]
    6702:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6706:	9b02      	ldr	r3, [sp, #8]
    6708:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    670c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6714:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6718:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    671c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    671e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6720:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    6722:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6724:	4770      	bx	lr
    6726:	bf00      	nop
    6728:	0001bd85 	.word	0x0001bd85

0000672c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    672c:	4a0b      	ldr	r2, [pc, #44]	; (675c <z_check_thread_stack_fail+0x30>)
{
    672e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    6730:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    6732:	b190      	cbz	r0, 675a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    6734:	f113 0f16 	cmn.w	r3, #22
    6738:	6e80      	ldr	r0, [r0, #104]	; 0x68
    673a:	d005      	beq.n	6748 <z_check_thread_stack_fail+0x1c>
    673c:	f1a0 0220 	sub.w	r2, r0, #32
    6740:	429a      	cmp	r2, r3
    6742:	d806      	bhi.n	6752 <z_check_thread_stack_fail+0x26>
    6744:	4283      	cmp	r3, r0
    6746:	d204      	bcs.n	6752 <z_check_thread_stack_fail+0x26>
    6748:	4281      	cmp	r1, r0
    674a:	bf2c      	ite	cs
    674c:	2100      	movcs	r1, #0
    674e:	2101      	movcc	r1, #1
    6750:	e000      	b.n	6754 <z_check_thread_stack_fail+0x28>
    6752:	2100      	movs	r1, #0
    6754:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    6756:	bf08      	it	eq
    6758:	2000      	moveq	r0, #0
}
    675a:	4770      	bx	lr
    675c:	2000103c 	.word	0x2000103c

00006760 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6760:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6762:	4b09      	ldr	r3, [pc, #36]	; (6788 <arch_switch_to_main_thread+0x28>)
    6764:	6098      	str	r0, [r3, #8]
{
    6766:	460d      	mov	r5, r1
    6768:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    676a:	f000 fb23 	bl	6db4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    676e:	4620      	mov	r0, r4
    6770:	f385 8809 	msr	PSP, r5
    6774:	2100      	movs	r1, #0
    6776:	b663      	cpsie	if
    6778:	f381 8811 	msr	BASEPRI, r1
    677c:	f3bf 8f6f 	isb	sy
    6780:	2200      	movs	r2, #0
    6782:	2300      	movs	r3, #0
    6784:	f015 fafe 	bl	1bd84 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6788:	2000103c 	.word	0x2000103c

0000678c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    678c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    678e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6790:	4a0b      	ldr	r2, [pc, #44]	; (67c0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6792:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    6794:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6796:	bf1e      	ittt	ne
	movne	r1, #0
    6798:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    679a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    679c:	f016 fd59 	blne	1d252 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    67a0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    67a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    67a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    67aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    67ae:	4905      	ldr	r1, [pc, #20]	; (67c4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    67b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    67b2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    67b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    67b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    67ba:	4903      	ldr	r1, [pc, #12]	; (67c8 <_isr_wrapper+0x3c>)
	bx r1
    67bc:	4708      	bx	r1
    67be:	0000      	.short	0x0000
	ldr r2, =_kernel
    67c0:	2000103c 	.word	0x2000103c
	ldr r1, =_sw_isr_table
    67c4:	0001defc 	.word	0x0001defc
	ldr r1, =z_arm_int_exit
    67c8:	000067cd 	.word	0x000067cd

000067cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    67cc:	4b04      	ldr	r3, [pc, #16]	; (67e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    67ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    67d0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    67d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    67d4:	d003      	beq.n	67de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    67d6:	4903      	ldr	r1, [pc, #12]	; (67e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    67d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    67dc:	600a      	str	r2, [r1, #0]

000067de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    67de:	4770      	bx	lr
	ldr r3, =_kernel
    67e0:	2000103c 	.word	0x2000103c
	ldr r1, =_SCS_ICSR
    67e4:	e000ed04 	.word	0xe000ed04

000067e8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    67e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67ec:	4b35      	ldr	r3, [pc, #212]	; (68c4 <mem_manage_fault+0xdc>)
    67ee:	4c36      	ldr	r4, [pc, #216]	; (68c8 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    67f0:	4d36      	ldr	r5, [pc, #216]	; (68cc <mem_manage_fault+0xe4>)
    67f2:	1ae4      	subs	r4, r4, r3
    67f4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    67f6:	01a4      	lsls	r4, r4, #6
    67f8:	f044 0901 	orr.w	r9, r4, #1
{
    67fc:	4607      	mov	r7, r0
    67fe:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6800:	4833      	ldr	r0, [pc, #204]	; (68d0 <mem_manage_fault+0xe8>)
    6802:	4649      	mov	r1, r9
{
    6804:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    6806:	f015 fbdf 	bl	1bfc8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    680a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    680c:	06d3      	lsls	r3, r2, #27
    680e:	d503      	bpl.n	6818 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6810:	4830      	ldr	r0, [pc, #192]	; (68d4 <mem_manage_fault+0xec>)
    6812:	4649      	mov	r1, r9
    6814:	f015 fbd8 	bl	1bfc8 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6818:	6aab      	ldr	r3, [r5, #40]	; 0x28
    681a:	0718      	lsls	r0, r3, #28
    681c:	d504      	bpl.n	6828 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    681e:	482e      	ldr	r0, [pc, #184]	; (68d8 <mem_manage_fault+0xf0>)
    6820:	f044 0101 	orr.w	r1, r4, #1
    6824:	f015 fbd0 	bl	1bfc8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6828:	4d28      	ldr	r5, [pc, #160]	; (68cc <mem_manage_fault+0xe4>)
    682a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    682c:	0799      	lsls	r1, r3, #30
    682e:	d423      	bmi.n	6878 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    6830:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6834:	4d25      	ldr	r5, [pc, #148]	; (68cc <mem_manage_fault+0xe4>)
    6836:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6838:	07d3      	lsls	r3, r2, #31
    683a:	d504      	bpl.n	6846 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    683c:	4827      	ldr	r0, [pc, #156]	; (68dc <mem_manage_fault+0xf4>)
    683e:	f044 0101 	orr.w	r1, r4, #1
    6842:	f015 fbc1 	bl	1bfc8 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6846:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6848:	0698      	lsls	r0, r3, #26
    684a:	d504      	bpl.n	6856 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    684c:	4824      	ldr	r0, [pc, #144]	; (68e0 <mem_manage_fault+0xf8>)
    684e:	f044 0101 	orr.w	r1, r4, #1
    6852:	f015 fbb9 	bl	1bfc8 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6856:	4b1d      	ldr	r3, [pc, #116]	; (68cc <mem_manage_fault+0xe4>)
    6858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    685a:	06d1      	lsls	r1, r2, #27
    685c:	d424      	bmi.n	68a8 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    685e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6860:	0792      	lsls	r2, r2, #30
    6862:	d421      	bmi.n	68a8 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6864:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6866:	4a19      	ldr	r2, [pc, #100]	; (68cc <mem_manage_fault+0xe4>)
    6868:	6a93      	ldr	r3, [r2, #40]	; 0x28
    686a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    686e:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    6870:	2300      	movs	r3, #0
    6872:	7033      	strb	r3, [r6, #0]

	return reason;
}
    6874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    6878:	f044 0a01 	orr.w	sl, r4, #1
    687c:	4819      	ldr	r0, [pc, #100]	; (68e4 <mem_manage_fault+0xfc>)
    687e:	4651      	mov	r1, sl
    6880:	f015 fba2 	bl	1bfc8 <log_0>
		uint32_t temp = SCB->MMFAR;
    6884:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6888:	6aab      	ldr	r3, [r5, #40]	; 0x28
    688a:	061a      	lsls	r2, r3, #24
    688c:	d5d0      	bpl.n	6830 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    688e:	4816      	ldr	r0, [pc, #88]	; (68e8 <mem_manage_fault+0x100>)
    6890:	4652      	mov	r2, sl
    6892:	4649      	mov	r1, r9
    6894:	f015 fba5 	bl	1bfe2 <log_1>
			if (from_hard_fault != 0) {
    6898:	f1b8 0f00 	cmp.w	r8, #0
    689c:	d0ca      	beq.n	6834 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    689e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    68a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    68a4:	62ab      	str	r3, [r5, #40]	; 0x28
    68a6:	e7c5      	b.n	6834 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    68a8:	685b      	ldr	r3, [r3, #4]
    68aa:	051b      	lsls	r3, r3, #20
    68ac:	d5da      	bpl.n	6864 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    68ae:	4639      	mov	r1, r7
    68b0:	4648      	mov	r0, r9
    68b2:	f7ff ff3b 	bl	672c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    68b6:	2800      	cmp	r0, #0
    68b8:	d0d4      	beq.n	6864 <mem_manage_fault+0x7c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    68ba:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    68be:	2002      	movs	r0, #2
    68c0:	e7d1      	b.n	6866 <mem_manage_fault+0x7e>
    68c2:	bf00      	nop
    68c4:	0001e07c 	.word	0x0001e07c
    68c8:	0001e09c 	.word	0x0001e09c
    68cc:	e000ed00 	.word	0xe000ed00
    68d0:	0001f0e8 	.word	0x0001f0e8
    68d4:	0001f0fe 	.word	0x0001f0fe
    68d8:	0001f131 	.word	0x0001f131
    68dc:	0001f172 	.word	0x0001f172
    68e0:	0001f191 	.word	0x0001f191
    68e4:	0001f144 	.word	0x0001f144
    68e8:	0001f15c 	.word	0x0001f15c

000068ec <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    68ec:	b570      	push	{r4, r5, r6, lr}
    68ee:	4b23      	ldr	r3, [pc, #140]	; (697c <usage_fault.isra.0+0x90>)
    68f0:	4c23      	ldr	r4, [pc, #140]	; (6980 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    68f2:	4d24      	ldr	r5, [pc, #144]	; (6984 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    68f4:	4824      	ldr	r0, [pc, #144]	; (6988 <usage_fault.isra.0+0x9c>)
    68f6:	1ae4      	subs	r4, r4, r3
    68f8:	08e4      	lsrs	r4, r4, #3
    68fa:	01a4      	lsls	r4, r4, #6
    68fc:	f044 0601 	orr.w	r6, r4, #1
    6900:	4631      	mov	r1, r6
    6902:	f015 fb61 	bl	1bfc8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6906:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6908:	0193      	lsls	r3, r2, #6
    690a:	d503      	bpl.n	6914 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    690c:	481f      	ldr	r0, [pc, #124]	; (698c <usage_fault.isra.0+0xa0>)
    690e:	4631      	mov	r1, r6
    6910:	f015 fb5a 	bl	1bfc8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6914:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6916:	01dd      	lsls	r5, r3, #7
    6918:	d504      	bpl.n	6924 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    691a:	481d      	ldr	r0, [pc, #116]	; (6990 <usage_fault.isra.0+0xa4>)
    691c:	f044 0101 	orr.w	r1, r4, #1
    6920:	f015 fb52 	bl	1bfc8 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6924:	4d17      	ldr	r5, [pc, #92]	; (6984 <usage_fault.isra.0+0x98>)
    6926:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6928:	0310      	lsls	r0, r2, #12
    692a:	d504      	bpl.n	6936 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    692c:	4819      	ldr	r0, [pc, #100]	; (6994 <usage_fault.isra.0+0xa8>)
    692e:	f044 0101 	orr.w	r1, r4, #1
    6932:	f015 fb49 	bl	1bfc8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6936:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6938:	0359      	lsls	r1, r3, #13
    693a:	d504      	bpl.n	6946 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    693c:	4816      	ldr	r0, [pc, #88]	; (6998 <usage_fault.isra.0+0xac>)
    693e:	f044 0101 	orr.w	r1, r4, #1
    6942:	f015 fb41 	bl	1bfc8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6946:	4d0f      	ldr	r5, [pc, #60]	; (6984 <usage_fault.isra.0+0x98>)
    6948:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    694a:	0392      	lsls	r2, r2, #14
    694c:	d504      	bpl.n	6958 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    694e:	4813      	ldr	r0, [pc, #76]	; (699c <usage_fault.isra.0+0xb0>)
    6950:	f044 0101 	orr.w	r1, r4, #1
    6954:	f015 fb38 	bl	1bfc8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6958:	6aab      	ldr	r3, [r5, #40]	; 0x28
    695a:	03db      	lsls	r3, r3, #15
    695c:	d504      	bpl.n	6968 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    695e:	4810      	ldr	r0, [pc, #64]	; (69a0 <usage_fault.isra.0+0xb4>)
    6960:	f044 0101 	orr.w	r1, r4, #1
    6964:	f015 fb30 	bl	1bfc8 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6968:	4a06      	ldr	r2, [pc, #24]	; (6984 <usage_fault.isra.0+0x98>)
    696a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    696c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6970:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6974:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6976:	2000      	movs	r0, #0
    6978:	bd70      	pop	{r4, r5, r6, pc}
    697a:	bf00      	nop
    697c:	0001e07c 	.word	0x0001e07c
    6980:	0001e09c 	.word	0x0001e09c
    6984:	e000ed00 	.word	0xe000ed00
    6988:	0001f1c0 	.word	0x0001f1c0
    698c:	0001f1d8 	.word	0x0001f1d8
    6990:	0001f1eb 	.word	0x0001f1eb
    6994:	0001f205 	.word	0x0001f205
    6998:	0001f223 	.word	0x0001f223
    699c:	0001f248 	.word	0x0001f248
    69a0:	0001f262 	.word	0x0001f262

000069a4 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    69a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69a8:	4b2a      	ldr	r3, [pc, #168]	; (6a54 <bus_fault.isra.0+0xb0>)
    69aa:	4c2b      	ldr	r4, [pc, #172]	; (6a58 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    69ac:	4d2b      	ldr	r5, [pc, #172]	; (6a5c <bus_fault.isra.0+0xb8>)
    69ae:	1ae4      	subs	r4, r4, r3
    69b0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    69b2:	01a4      	lsls	r4, r4, #6
    69b4:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    69b8:	4607      	mov	r7, r0
    69ba:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    69bc:	4828      	ldr	r0, [pc, #160]	; (6a60 <bus_fault.isra.0+0xbc>)
    69be:	4641      	mov	r1, r8
    69c0:	f015 fb02 	bl	1bfc8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    69c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    69c6:	04d1      	lsls	r1, r2, #19
    69c8:	d503      	bpl.n	69d2 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    69ca:	4826      	ldr	r0, [pc, #152]	; (6a64 <bus_fault.isra.0+0xc0>)
    69cc:	4641      	mov	r1, r8
    69ce:	f015 fafb 	bl	1bfc8 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    69d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69d4:	051a      	lsls	r2, r3, #20
    69d6:	d504      	bpl.n	69e2 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    69d8:	4823      	ldr	r0, [pc, #140]	; (6a68 <bus_fault.isra.0+0xc4>)
    69da:	f044 0101 	orr.w	r1, r4, #1
    69de:	f015 faf3 	bl	1bfc8 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    69e2:	4d1e      	ldr	r5, [pc, #120]	; (6a5c <bus_fault.isra.0+0xb8>)
    69e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69e6:	059b      	lsls	r3, r3, #22
    69e8:	d512      	bpl.n	6a10 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    69ea:	f044 0801 	orr.w	r8, r4, #1
    69ee:	481f      	ldr	r0, [pc, #124]	; (6a6c <bus_fault.isra.0+0xc8>)
    69f0:	4641      	mov	r1, r8
    69f2:	f015 fae9 	bl	1bfc8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    69f6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    69f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69fa:	0418      	lsls	r0, r3, #16
    69fc:	d508      	bpl.n	6a10 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    69fe:	481c      	ldr	r0, [pc, #112]	; (6a70 <bus_fault.isra.0+0xcc>)
    6a00:	4642      	mov	r2, r8
    6a02:	f015 faee 	bl	1bfe2 <log_1>
			if (from_hard_fault != 0) {
    6a06:	b11f      	cbz	r7, 6a10 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6a08:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6a0e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6a10:	4d12      	ldr	r5, [pc, #72]	; (6a5c <bus_fault.isra.0+0xb8>)
    6a12:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a14:	0559      	lsls	r1, r3, #21
    6a16:	d504      	bpl.n	6a22 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    6a18:	4816      	ldr	r0, [pc, #88]	; (6a74 <bus_fault.isra.0+0xd0>)
    6a1a:	f044 0101 	orr.w	r1, r4, #1
    6a1e:	f015 fad3 	bl	1bfc8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6a22:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a24:	05da      	lsls	r2, r3, #23
    6a26:	d50d      	bpl.n	6a44 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    6a28:	4813      	ldr	r0, [pc, #76]	; (6a78 <bus_fault.isra.0+0xd4>)
    6a2a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6a2e:	f015 facb 	bl	1bfc8 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6a32:	4a0a      	ldr	r2, [pc, #40]	; (6a5c <bus_fault.isra.0+0xb8>)
    6a34:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6a36:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6a38:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6a3c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6a3e:	7030      	strb	r0, [r6, #0]
}
    6a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6a44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a46:	049b      	lsls	r3, r3, #18
    6a48:	d5f3      	bpl.n	6a32 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6a4a:	480c      	ldr	r0, [pc, #48]	; (6a7c <bus_fault.isra.0+0xd8>)
    6a4c:	f044 0101 	orr.w	r1, r4, #1
    6a50:	e7ed      	b.n	6a2e <bus_fault.isra.0+0x8a>
    6a52:	bf00      	nop
    6a54:	0001e07c 	.word	0x0001e07c
    6a58:	0001e09c 	.word	0x0001e09c
    6a5c:	e000ed00 	.word	0xe000ed00
    6a60:	0001f28d 	.word	0x0001f28d
    6a64:	0001f2a3 	.word	0x0001f2a3
    6a68:	0001f131 	.word	0x0001f131
    6a6c:	0001f2b4 	.word	0x0001f2b4
    6a70:	0001f2cd 	.word	0x0001f2cd
    6a74:	0001f2e2 	.word	0x0001f2e2
    6a78:	0001f2fd 	.word	0x0001f2fd
    6a7c:	0001f191 	.word	0x0001f191

00006a80 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6a84:	4b68      	ldr	r3, [pc, #416]	; (6c28 <z_arm_fault+0x1a8>)
    6a86:	685e      	ldr	r6, [r3, #4]
{
    6a88:	b08a      	sub	sp, #40	; 0x28
    6a8a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6a8c:	f3c6 0408 	ubfx	r4, r6, #0, #9
    6a90:	2700      	movs	r7, #0
    6a92:	f387 8811 	msr	BASEPRI, r7
    6a96:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6a9a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6a9e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6aa2:	d10d      	bne.n	6ac0 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6aa4:	f002 030c 	and.w	r3, r2, #12
    6aa8:	2b08      	cmp	r3, #8
    6aaa:	d10b      	bne.n	6ac4 <z_arm_fault+0x44>
    6aac:	495f      	ldr	r1, [pc, #380]	; (6c2c <z_arm_fault+0x1ac>)
    6aae:	4b60      	ldr	r3, [pc, #384]	; (6c30 <z_arm_fault+0x1b0>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6ab0:	4860      	ldr	r0, [pc, #384]	; (6c34 <z_arm_fault+0x1b4>)
    6ab2:	1ac9      	subs	r1, r1, r3
    6ab4:	08c9      	lsrs	r1, r1, #3
    6ab6:	0189      	lsls	r1, r1, #6
    6ab8:	f041 0101 	orr.w	r1, r1, #1
    6abc:	f015 fa84 	bl	1bfc8 <log_0>
		return NULL;
    6ac0:	463d      	mov	r5, r7
    6ac2:	e003      	b.n	6acc <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6ac4:	0712      	lsls	r2, r2, #28
    6ac6:	d401      	bmi.n	6acc <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    6ac8:	4605      	mov	r5, r0
			*nested_exc = true;
    6aca:	2701      	movs	r7, #1
	*recoverable = false;
    6acc:	2300      	movs	r3, #0
    6ace:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6ad2:	1ee3      	subs	r3, r4, #3
    6ad4:	2b09      	cmp	r3, #9
    6ad6:	f200 808d 	bhi.w	6bf4 <z_arm_fault+0x174>
    6ada:	e8df f003 	tbb	[pc, r3]
    6ade:	7a05      	.short	0x7a05
    6ae0:	8b8b777e 	.word	0x8b8b777e
    6ae4:	828b8b8b 	.word	0x828b8b8b
    6ae8:	4a51      	ldr	r2, [pc, #324]	; (6c30 <z_arm_fault+0x1b0>)
    6aea:	4e50      	ldr	r6, [pc, #320]	; (6c2c <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    6aec:	4852      	ldr	r0, [pc, #328]	; (6c38 <z_arm_fault+0x1b8>)
    6aee:	1ab6      	subs	r6, r6, r2
    6af0:	08f6      	lsrs	r6, r6, #3
    6af2:	01b6      	lsls	r6, r6, #6
    6af4:	f046 0601 	orr.w	r6, r6, #1
    6af8:	4631      	mov	r1, r6
    6afa:	f015 fa65 	bl	1bfc8 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6afe:	4b4a      	ldr	r3, [pc, #296]	; (6c28 <z_arm_fault+0x1a8>)
    6b00:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    6b02:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6b06:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    6b0a:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6b0e:	d005      	beq.n	6b1c <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
    6b10:	484a      	ldr	r0, [pc, #296]	; (6c3c <z_arm_fault+0x1bc>)
    6b12:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    6b14:	f015 fa58 	bl	1bfc8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6b18:	2400      	movs	r4, #0
}
    6b1a:	e006      	b.n	6b2a <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    6b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6b1e:	2a00      	cmp	r2, #0
    6b20:	da23      	bge.n	6b6a <z_arm_fault+0xea>
		PR_EXC("  Debug event");
    6b22:	4847      	ldr	r0, [pc, #284]	; (6c40 <z_arm_fault+0x1c0>)
    6b24:	4631      	mov	r1, r6
    6b26:	f015 fa4f 	bl	1bfc8 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6b2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b2e:	b9cb      	cbnz	r3, 6b64 <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6b30:	aa02      	add	r2, sp, #8
    6b32:	f105 0620 	add.w	r6, r5, #32
    6b36:	6828      	ldr	r0, [r5, #0]
    6b38:	6869      	ldr	r1, [r5, #4]
    6b3a:	4613      	mov	r3, r2
    6b3c:	c303      	stmia	r3!, {r0, r1}
    6b3e:	3508      	adds	r5, #8
    6b40:	42b5      	cmp	r5, r6
    6b42:	461a      	mov	r2, r3
    6b44:	d1f7      	bne.n	6b36 <z_arm_fault+0xb6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6b48:	2f00      	cmp	r7, #0
    6b4a:	d067      	beq.n	6c1c <z_arm_fault+0x19c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6b50:	b922      	cbnz	r2, 6b5c <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6b52:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6b56:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6b5a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6b5c:	a902      	add	r1, sp, #8
    6b5e:	4620      	mov	r0, r4
    6b60:	f7ff fcd2 	bl	6508 <z_arm_fatal_error>
}
    6b64:	b00a      	add	sp, #40	; 0x28
    6b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6b6c:	005b      	lsls	r3, r3, #1
    6b6e:	d5dc      	bpl.n	6b2a <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    6b70:	4834      	ldr	r0, [pc, #208]	; (6c44 <z_arm_fault+0x1c4>)
    6b72:	4631      	mov	r1, r6
    6b74:	f015 fa28 	bl	1bfc8 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
    6b78:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    6b7a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    6b7e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    6b82:	429a      	cmp	r2, r3
    6b84:	d00d      	beq.n	6ba2 <z_arm_fault+0x122>
		} else if (SCB_MMFSR != 0) {
    6b86:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6b8a:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    6b8e:	781b      	ldrb	r3, [r3, #0]
    6b90:	b173      	cbz	r3, 6bb0 <z_arm_fault+0x130>
			reason = mem_manage_fault(esf, 1, recoverable);
    6b92:	f10d 0207 	add.w	r2, sp, #7
    6b96:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6b98:	4628      	mov	r0, r5
    6b9a:	f7ff fe25 	bl	67e8 <mem_manage_fault>
    6b9e:	4604      	mov	r4, r0
		break;
    6ba0:	e7c3      	b.n	6b2a <z_arm_fault+0xaa>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    6ba2:	6829      	ldr	r1, [r5, #0]
    6ba4:	4828      	ldr	r0, [pc, #160]	; (6c48 <z_arm_fault+0x1c8>)
    6ba6:	4632      	mov	r2, r6
    6ba8:	f015 fa1b 	bl	1bfe2 <log_1>
			reason = esf->basic.r0;
    6bac:	682c      	ldr	r4, [r5, #0]
    6bae:	e7bc      	b.n	6b2a <z_arm_fault+0xaa>
		} else if (SCB_BFSR != 0) {
    6bb0:	4b26      	ldr	r3, [pc, #152]	; (6c4c <z_arm_fault+0x1cc>)
    6bb2:	781b      	ldrb	r3, [r3, #0]
    6bb4:	b12b      	cbz	r3, 6bc2 <z_arm_fault+0x142>
			reason = bus_fault(esf, 1, recoverable);
    6bb6:	f10d 0107 	add.w	r1, sp, #7
    6bba:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6bbc:	f7ff fef2 	bl	69a4 <bus_fault.isra.0>
    6bc0:	e7ed      	b.n	6b9e <z_arm_fault+0x11e>
		} else if (SCB_UFSR != 0) {
    6bc2:	4b23      	ldr	r3, [pc, #140]	; (6c50 <z_arm_fault+0x1d0>)
    6bc4:	881b      	ldrh	r3, [r3, #0]
    6bc6:	b29b      	uxth	r3, r3
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d0ae      	beq.n	6b2a <z_arm_fault+0xaa>
		reason = usage_fault(esf);
    6bcc:	f7ff fe8e 	bl	68ec <usage_fault.isra.0>
    6bd0:	e7e5      	b.n	6b9e <z_arm_fault+0x11e>
		reason = mem_manage_fault(esf, 0, recoverable);
    6bd2:	f10d 0207 	add.w	r2, sp, #7
    6bd6:	2100      	movs	r1, #0
    6bd8:	e7de      	b.n	6b98 <z_arm_fault+0x118>
		reason = bus_fault(esf, 0, recoverable);
    6bda:	f10d 0107 	add.w	r1, sp, #7
    6bde:	2000      	movs	r0, #0
    6be0:	e7ec      	b.n	6bbc <z_arm_fault+0x13c>
    6be2:	4912      	ldr	r1, [pc, #72]	; (6c2c <z_arm_fault+0x1ac>)
    6be4:	4b12      	ldr	r3, [pc, #72]	; (6c30 <z_arm_fault+0x1b0>)
	PR_FAULT_INFO(
    6be6:	481b      	ldr	r0, [pc, #108]	; (6c54 <z_arm_fault+0x1d4>)
    6be8:	1ac9      	subs	r1, r1, r3
    6bea:	08c9      	lsrs	r1, r1, #3
    6bec:	0189      	lsls	r1, r1, #6
    6bee:	f041 0101 	orr.w	r1, r1, #1
    6bf2:	e78f      	b.n	6b14 <z_arm_fault+0x94>
    6bf4:	4a0e      	ldr	r2, [pc, #56]	; (6c30 <z_arm_fault+0x1b0>)
    6bf6:	4b0d      	ldr	r3, [pc, #52]	; (6c2c <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** %s %d) *****",
    6bf8:	4817      	ldr	r0, [pc, #92]	; (6c58 <z_arm_fault+0x1d8>)
    6bfa:	4918      	ldr	r1, [pc, #96]	; (6c5c <z_arm_fault+0x1dc>)
    6bfc:	1a9b      	subs	r3, r3, r2
    6bfe:	08db      	lsrs	r3, r3, #3
    6c00:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    6c04:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6c08:	bf18      	it	ne
    6c0a:	4601      	movne	r1, r0
    6c0c:	f043 0301 	orr.w	r3, r3, #1
    6c10:	4813      	ldr	r0, [pc, #76]	; (6c60 <z_arm_fault+0x1e0>)
    6c12:	f1a4 0210 	sub.w	r2, r4, #16
    6c16:	f015 f9f8 	bl	1c00a <log_2>
    6c1a:	e77d      	b.n	6b18 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6c1c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6c20:	f023 0301 	bic.w	r3, r3, #1
    6c24:	e799      	b.n	6b5a <z_arm_fault+0xda>
    6c26:	bf00      	nop
    6c28:	e000ed00 	.word	0xe000ed00
    6c2c:	0001e09c 	.word	0x0001e09c
    6c30:	0001e07c 	.word	0x0001e07c
    6c34:	0001f315 	.word	0x0001f315
    6c38:	0001f340 	.word	0x0001f340
    6c3c:	0001f357 	.word	0x0001f357
    6c40:	0001f378 	.word	0x0001f378
    6c44:	0001f386 	.word	0x0001f386
    6c48:	0001f3a5 	.word	0x0001f3a5
    6c4c:	e000ed29 	.word	0xe000ed29
    6c50:	e000ed2a 	.word	0xe000ed2a
    6c54:	0001f3c1 	.word	0x0001f3c1
    6c58:	0001f3fa 	.word	0x0001f3fa
    6c5c:	0001f3e5 	.word	0x0001f3e5
    6c60:	0001f413 	.word	0x0001f413

00006c64 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6c64:	4a02      	ldr	r2, [pc, #8]	; (6c70 <z_arm_fault_init+0xc>)
    6c66:	6953      	ldr	r3, [r2, #20]
    6c68:	f043 0310 	orr.w	r3, r3, #16
    6c6c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6c6e:	4770      	bx	lr
    6c70:	e000ed00 	.word	0xe000ed00

00006c74 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6c74:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6c78:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6c7c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6c7e:	4672      	mov	r2, lr
	bl z_arm_fault
    6c80:	f7ff fefe 	bl	6a80 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6c84:	bd01      	pop	{r0, pc}
    6c86:	bf00      	nop

00006c88 <z_arm_interrupt_init>:
    6c88:	4804      	ldr	r0, [pc, #16]	; (6c9c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6c8a:	2300      	movs	r3, #0
    6c8c:	2120      	movs	r1, #32
    6c8e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6c90:	3301      	adds	r3, #1
    6c92:	2b30      	cmp	r3, #48	; 0x30
    6c94:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6c98:	d1f9      	bne.n	6c8e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6c9a:	4770      	bx	lr
    6c9c:	e000e100 	.word	0xe000e100

00006ca0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    6ca0:	2000      	movs	r0, #0
    msr CONTROL, r0
    6ca2:	f380 8814 	msr	CONTROL, r0
    isb
    6ca6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    6caa:	f017 f889 	bl	1ddc0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    6cae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    6cb0:	490d      	ldr	r1, [pc, #52]	; (6ce8 <__start+0x48>)
    str r0, [r1]
    6cb2:	6008      	str	r0, [r1, #0]
    dsb
    6cb4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6cb8:	480c      	ldr	r0, [pc, #48]	; (6cec <__start+0x4c>)
    msr msp, r0
    6cba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    6cbe:	f000 f829 	bl	6d14 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6cc2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6cc4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6cc8:	4809      	ldr	r0, [pc, #36]	; (6cf0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6cca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    6cce:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6cd0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6cd4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6cd8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6cda:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6cdc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6ce0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6ce4:	f7ff fc96 	bl	6614 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    6ce8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6cec:	200035c0 	.word	0x200035c0
    ldr r0, =z_interrupt_stacks
    6cf0:	20003740 	.word	0x20003740

00006cf4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    6cf4:	4a06      	ldr	r2, [pc, #24]	; (6d10 <z_arm_clear_arm_mpu_config+0x1c>)
    6cf6:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    6cf8:	2300      	movs	r3, #0
	int num_regions =
    6cfa:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    6cfe:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    6d00:	428b      	cmp	r3, r1
    6d02:	d100      	bne.n	6d06 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    6d04:	4770      	bx	lr
  MPU->RNR = rnr;
    6d06:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    6d08:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    6d0a:	3301      	adds	r3, #1
    6d0c:	e7f8      	b.n	6d00 <z_arm_clear_arm_mpu_config+0xc>
    6d0e:	bf00      	nop
    6d10:	e000ed90 	.word	0xe000ed90

00006d14 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    6d14:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    6d16:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6d18:	2300      	movs	r3, #0
    6d1a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    6d1e:	f7ff ffe9 	bl	6cf4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    6d22:	4b14      	ldr	r3, [pc, #80]	; (6d74 <z_arm_init_arch_hw_at_boot+0x60>)
    6d24:	f04f 32ff 	mov.w	r2, #4294967295
    6d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    6d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    6d30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    6d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    6d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    6d3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    6d40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    6d44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6d48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6d4c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    6d50:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    6d54:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    6d58:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    6d5c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    6d60:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    6d64:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    6d68:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    6d6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d6e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6d72:	bd08      	pop	{r3, pc}
    6d74:	e000e100 	.word	0xe000e100

00006d78 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6d78:	4b06      	ldr	r3, [pc, #24]	; (6d94 <z_impl_k_thread_abort+0x1c>)
    6d7a:	689b      	ldr	r3, [r3, #8]
    6d7c:	4283      	cmp	r3, r0
    6d7e:	d107      	bne.n	6d90 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6d80:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6d84:	b123      	cbz	r3, 6d90 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6d86:	4a04      	ldr	r2, [pc, #16]	; (6d98 <z_impl_k_thread_abort+0x20>)
    6d88:	6853      	ldr	r3, [r2, #4]
    6d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6d8e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    6d90:	f005 b84c 	b.w	be2c <z_thread_abort>
    6d94:	2000103c 	.word	0x2000103c
    6d98:	e000ed00 	.word	0xe000ed00

00006d9c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6d9c:	4b02      	ldr	r3, [pc, #8]	; (6da8 <z_arm_configure_static_mpu_regions+0xc>)
    6d9e:	4a03      	ldr	r2, [pc, #12]	; (6dac <z_arm_configure_static_mpu_regions+0x10>)
    6da0:	4803      	ldr	r0, [pc, #12]	; (6db0 <z_arm_configure_static_mpu_regions+0x14>)
    6da2:	2101      	movs	r1, #1
    6da4:	f000 b884 	b.w	6eb0 <arm_core_mpu_configure_static_mpu_regions>
    6da8:	20040000 	.word	0x20040000
    6dac:	20000000 	.word	0x20000000
    6db0:	0001e5dc 	.word	0x0001e5dc

00006db4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    6db4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    6db6:	4b05      	ldr	r3, [pc, #20]	; (6dcc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    6db8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    6dba:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6dbc:	4a04      	ldr	r2, [pc, #16]	; (6dd0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    6dbe:	2120      	movs	r1, #32
    6dc0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6dc4:	4618      	mov	r0, r3
    6dc6:	2101      	movs	r1, #1
    6dc8:	f000 b87c 	b.w	6ec4 <arm_core_mpu_configure_dynamic_mpu_regions>
    6dcc:	20000ca4 	.word	0x20000ca4
    6dd0:	150b0000 	.word	0x150b0000

00006dd4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    6dd6:	4f28      	ldr	r7, [pc, #160]	; (6e78 <mpu_configure_regions+0xa4>)
    6dd8:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6dda:	2100      	movs	r1, #0
    6ddc:	42b1      	cmp	r1, r6
    6dde:	da14      	bge.n	6e0a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    6de0:	6844      	ldr	r4, [r0, #4]
    6de2:	2c00      	cmp	r4, #0
    6de4:	d045      	beq.n	6e72 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6de6:	b1c3      	cbz	r3, 6e1a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    6de8:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6dec:	ea14 0f0c 	tst.w	r4, ip
    6df0:	d00d      	beq.n	6e0e <mpu_configure_regions+0x3a>
    6df2:	4a22      	ldr	r2, [pc, #136]	; (6e7c <mpu_configure_regions+0xa8>)
    6df4:	4b22      	ldr	r3, [pc, #136]	; (6e80 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    6df6:	4823      	ldr	r0, [pc, #140]	; (6e84 <mpu_configure_regions+0xb0>)
    6df8:	1ad2      	subs	r2, r2, r3
    6dfa:	08d2      	lsrs	r2, r2, #3
    6dfc:	0192      	lsls	r2, r2, #6
    6dfe:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6e02:	f015 f8ee 	bl	1bfe2 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6e06:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6e0a:	4610      	mov	r0, r2
    6e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    6e0e:	2c1f      	cmp	r4, #31
    6e10:	d9ef      	bls.n	6df2 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    6e12:	6805      	ldr	r5, [r0, #0]
		&&
    6e14:	ea1c 0f05 	tst.w	ip, r5
    6e18:	d1eb      	bne.n	6df2 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6e1a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6e1c:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    6e1e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    6e22:	6802      	ldr	r2, [r0, #0]
    6e24:	d916      	bls.n	6e54 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    6e26:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6e2a:	d815      	bhi.n	6e58 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6e2c:	3c01      	subs	r4, #1
    6e2e:	fab4 f484 	clz	r4, r4
    6e32:	f1c4 041f 	rsb	r4, r4, #31
    6e36:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6e38:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6e3a:	ea4c 0404 	orr.w	r4, ip, r4
    6e3e:	d90d      	bls.n	6e5c <mpu_configure_regions+0x88>
    6e40:	4a0e      	ldr	r2, [pc, #56]	; (6e7c <mpu_configure_regions+0xa8>)
    6e42:	4b0f      	ldr	r3, [pc, #60]	; (6e80 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6e44:	4810      	ldr	r0, [pc, #64]	; (6e88 <mpu_configure_regions+0xb4>)
    6e46:	1ad2      	subs	r2, r2, r3
    6e48:	08d2      	lsrs	r2, r2, #3
    6e4a:	0192      	lsls	r2, r2, #6
    6e4c:	f042 0201 	orr.w	r2, r2, #1
    6e50:	4629      	mov	r1, r5
    6e52:	e7d6      	b.n	6e02 <mpu_configure_regions+0x2e>
		return REGION_32B;
    6e54:	2408      	movs	r4, #8
    6e56:	e7ef      	b.n	6e38 <mpu_configure_regions+0x64>
		return REGION_4G;
    6e58:	243e      	movs	r4, #62	; 0x3e
    6e5a:	e7ed      	b.n	6e38 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6e5c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6e60:	432a      	orrs	r2, r5
    6e62:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6e66:	f044 0401 	orr.w	r4, r4, #1
    6e6a:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6e6c:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6e6e:	613c      	str	r4, [r7, #16]
		reg_index++;
    6e70:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    6e72:	3101      	adds	r1, #1
    6e74:	300c      	adds	r0, #12
    6e76:	e7b1      	b.n	6ddc <mpu_configure_regions+0x8>
    6e78:	e000ed90 	.word	0xe000ed90
    6e7c:	0001e094 	.word	0x0001e094
    6e80:	0001e07c 	.word	0x0001e07c
    6e84:	0001f42a 	.word	0x0001f42a
    6e88:	0001f44d 	.word	0x0001f44d

00006e8c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6e8c:	4b03      	ldr	r3, [pc, #12]	; (6e9c <arm_core_mpu_enable+0x10>)
    6e8e:	2205      	movs	r2, #5
    6e90:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6e92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e96:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6e9a:	4770      	bx	lr
    6e9c:	e000ed90 	.word	0xe000ed90

00006ea0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6ea0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6ea4:	4b01      	ldr	r3, [pc, #4]	; (6eac <arm_core_mpu_disable+0xc>)
    6ea6:	2200      	movs	r2, #0
    6ea8:	605a      	str	r2, [r3, #4]
}
    6eaa:	4770      	bx	lr
    6eac:	e000ed90 	.word	0xe000ed90

00006eb0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6eb0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6eb2:	4c03      	ldr	r4, [pc, #12]	; (6ec0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6eb4:	2301      	movs	r3, #1
    6eb6:	7822      	ldrb	r2, [r4, #0]
    6eb8:	f7ff ff8c 	bl	6dd4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6ebc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    6ebe:	bd10      	pop	{r4, pc}
    6ec0:	20001fb4 	.word	0x20001fb4

00006ec4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6ec4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6ec6:	4a08      	ldr	r2, [pc, #32]	; (6ee8 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    6ec8:	2300      	movs	r3, #0
    6eca:	7812      	ldrb	r2, [r2, #0]
    6ecc:	f7ff ff82 	bl	6dd4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6ed0:	f110 0f16 	cmn.w	r0, #22
    6ed4:	d003      	beq.n	6ede <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    6ed6:	4b05      	ldr	r3, [pc, #20]	; (6eec <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    6ed8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6eda:	2807      	cmp	r0, #7
    6edc:	dd00      	ble.n	6ee0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    6ede:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    6ee0:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    6ee2:	611a      	str	r2, [r3, #16]
    6ee4:	3001      	adds	r0, #1
    6ee6:	e7f8      	b.n	6eda <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    6ee8:	20001fb4 	.word	0x20001fb4
    6eec:	e000ed90 	.word	0xe000ed90

00006ef0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6ef0:	4913      	ldr	r1, [pc, #76]	; (6f40 <z_arm_mpu_init+0x50>)
    6ef2:	6808      	ldr	r0, [r1, #0]
    6ef4:	2808      	cmp	r0, #8
{
    6ef6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6ef8:	d81e      	bhi.n	6f38 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6efa:	f7ff ffd1 	bl	6ea0 <arm_core_mpu_disable>
    6efe:	4c11      	ldr	r4, [pc, #68]	; (6f44 <z_arm_mpu_init+0x54>)
    6f00:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6f02:	2200      	movs	r2, #0
    6f04:	4290      	cmp	r0, r2
    6f06:	f101 010c 	add.w	r1, r1, #12
    6f0a:	d105      	bne.n	6f18 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6f0c:	4b0e      	ldr	r3, [pc, #56]	; (6f48 <z_arm_mpu_init+0x58>)
    6f0e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6f10:	f7ff ffbc 	bl	6e8c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6f14:	2000      	movs	r0, #0
}
    6f16:	bd10      	pop	{r4, pc}
    6f18:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6f1a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6f1e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6f22:	4313      	orrs	r3, r2
    6f24:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6f28:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6f2e:	f043 0301 	orr.w	r3, r3, #1
    6f32:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6f34:	3201      	adds	r2, #1
    6f36:	e7e5      	b.n	6f04 <z_arm_mpu_init+0x14>
		return -1;
    6f38:	f04f 30ff 	mov.w	r0, #4294967295
    6f3c:	e7eb      	b.n	6f16 <z_arm_mpu_init+0x26>
    6f3e:	bf00      	nop
    6f40:	0001e5e8 	.word	0x0001e5e8
    6f44:	e000ed90 	.word	0xe000ed90
    6f48:	20001fb4 	.word	0x20001fb4

00006f4c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6f4c:	4b01      	ldr	r3, [pc, #4]	; (6f54 <__stdout_hook_install+0x8>)
    6f4e:	6018      	str	r0, [r3, #0]
}
    6f50:	4770      	bx	lr
    6f52:	bf00      	nop
    6f54:	20000034 	.word	0x20000034

00006f58 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f5a:	4f0a      	ldr	r7, [pc, #40]	; (6f84 <z_impl_zephyr_write_stdout+0x2c>)
    6f5c:	460d      	mov	r5, r1
    6f5e:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    6f60:	f1c0 0401 	rsb	r4, r0, #1
    6f64:	19a3      	adds	r3, r4, r6
    6f66:	429d      	cmp	r5, r3
    6f68:	dc01      	bgt.n	6f6e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    6f6a:	4628      	mov	r0, r5
    6f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    6f6e:	7873      	ldrb	r3, [r6, #1]
    6f70:	2b0a      	cmp	r3, #10
    6f72:	d102      	bne.n	6f7a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    6f74:	683b      	ldr	r3, [r7, #0]
    6f76:	200d      	movs	r0, #13
    6f78:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    6f7a:	683b      	ldr	r3, [r7, #0]
    6f7c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    6f80:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    6f82:	e7ef      	b.n	6f64 <z_impl_zephyr_write_stdout+0xc>
    6f84:	20000034 	.word	0x20000034

00006f88 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    6f88:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    6f8a:	4c07      	ldr	r4, [pc, #28]	; (6fa8 <_sbrk+0x20>)
    6f8c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    6f8e:	18c2      	adds	r2, r0, r3
    6f90:	4806      	ldr	r0, [pc, #24]	; (6fac <_sbrk+0x24>)
    6f92:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    6f96:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    6f9a:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    6f9c:	bf3a      	itte	cc
    6f9e:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    6fa0:	6022      	strcc	r2, [r4, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    6fa2:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
    6fa6:	bd10      	pop	{r4, pc}
    6fa8:	20000cb0 	.word	0x20000cb0
    6fac:	20004820 	.word	0x20004820

00006fb0 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    6fb0:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    6fb2:	211d      	movs	r1, #29
    6fb4:	4804      	ldr	r0, [pc, #16]	; (6fc8 <__chk_fail+0x18>)
    6fb6:	f7ff ffcf 	bl	6f58 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    6fba:	4040      	eors	r0, r0
    6fbc:	f380 8811 	msr	BASEPRI, r0
    6fc0:	f04f 0003 	mov.w	r0, #3
    6fc4:	df02      	svc	2
	CODE_UNREACHABLE;
    6fc6:	bf00      	nop
    6fc8:	0001f473 	.word	0x0001f473

00006fcc <nordicsemi_nrf52_init>:
	__asm__ volatile(
    6fcc:	f04f 0320 	mov.w	r3, #32
    6fd0:	f3ef 8211 	mrs	r2, BASEPRI
    6fd4:	f383 8812 	msr	BASEPRI_MAX, r3
    6fd8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6fdc:	4906      	ldr	r1, [pc, #24]	; (6ff8 <nordicsemi_nrf52_init+0x2c>)
    6fde:	2301      	movs	r3, #1
    6fe0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6fe4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6fe8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    6fec:	f382 8811 	msr	BASEPRI, r2
    6ff0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6ff4:	2000      	movs	r0, #0
    6ff6:	4770      	bx	lr
    6ff8:	4001e000 	.word	0x4001e000

00006ffc <sys_arch_reboot>:
    *p_gpregret = val;
    6ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7000:	b2c0      	uxtb	r0, r0
    7002:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    7006:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    700a:	4905      	ldr	r1, [pc, #20]	; (7020 <sys_arch_reboot+0x24>)
    700c:	4b05      	ldr	r3, [pc, #20]	; (7024 <sys_arch_reboot+0x28>)
    700e:	68ca      	ldr	r2, [r1, #12]
    7010:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7014:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    7016:	60cb      	str	r3, [r1, #12]
    7018:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    701c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    701e:	e7fd      	b.n	701c <sys_arch_reboot+0x20>
    7020:	e000ed00 	.word	0xe000ed00
    7024:	05fa0004 	.word	0x05fa0004

00007028 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7028:	b120      	cbz	r0, 7034 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    702a:	4b03      	ldr	r3, [pc, #12]	; (7038 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    702c:	0180      	lsls	r0, r0, #6
    702e:	f043 0301 	orr.w	r3, r3, #1
    7032:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7034:	4770      	bx	lr
    7036:	bf00      	nop
    7038:	0001e140 	.word	0x0001e140

0000703c <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    703c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7040:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    7044:	07db      	lsls	r3, r3, #31
    7046:	d52e      	bpl.n	70a6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    7048:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    704c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    7050:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    7054:	2b07      	cmp	r3, #7
    7056:	d126      	bne.n	70a6 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    7058:	4b14      	ldr	r3, [pc, #80]	; (70ac <board_nrf52840dongle_nrf52840_init+0x70>)
    705a:	2201      	movs	r2, #1
    705c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    7060:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    7064:	2a00      	cmp	r2, #0
    7066:	d0fb      	beq.n	7060 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    7068:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    706c:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    7070:	f022 0207 	bic.w	r2, r2, #7
    7074:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
    7078:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    707c:	2200      	movs	r2, #0
    707e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    7082:	4a0a      	ldr	r2, [pc, #40]	; (70ac <board_nrf52840dongle_nrf52840_init+0x70>)
    7084:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    7088:	2b00      	cmp	r3, #0
    708a:	d0fb      	beq.n	7084 <board_nrf52840dongle_nrf52840_init+0x48>
    708c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7090:	4907      	ldr	r1, [pc, #28]	; (70b0 <board_nrf52840dongle_nrf52840_init+0x74>)
    7092:	4b08      	ldr	r3, [pc, #32]	; (70b4 <board_nrf52840dongle_nrf52840_init+0x78>)
    7094:	68ca      	ldr	r2, [r1, #12]
    7096:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    709a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    709c:	60cb      	str	r3, [r1, #12]
    709e:	f3bf 8f4f 	dsb	sy
    __NOP();
    70a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    70a4:	e7fd      	b.n	70a2 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    70a6:	2000      	movs	r0, #0
    70a8:	4770      	bx	lr
    70aa:	bf00      	nop
    70ac:	4001e000 	.word	0x4001e000
    70b0:	e000ed00 	.word	0xe000ed00
    70b4:	05fa0004 	.word	0x05fa0004

000070b8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    70b8:	b570      	push	{r4, r5, r6, lr}
    70ba:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    70bc:	480d      	ldr	r0, [pc, #52]	; (70f4 <onoff_stop+0x3c>)
    70be:	1a23      	subs	r3, r4, r0
    70c0:	109a      	asrs	r2, r3, #2
    70c2:	4b0d      	ldr	r3, [pc, #52]	; (70f8 <onoff_stop+0x40>)
    70c4:	4353      	muls	r3, r2
    70c6:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    70c8:	250c      	movs	r5, #12
    70ca:	435d      	muls	r5, r3
    70cc:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    70d0:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    70d2:	4418      	add	r0, r3
    70d4:	2140      	movs	r1, #64	; 0x40
    70d6:	f015 fbc0 	bl	1c85a <set_off_state>
	if (err < 0) {
    70da:	1e01      	subs	r1, r0, #0
    70dc:	db04      	blt.n	70e8 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    70de:	4b07      	ldr	r3, [pc, #28]	; (70fc <onoff_stop+0x44>)
    70e0:	442b      	add	r3, r5
    70e2:	685b      	ldr	r3, [r3, #4]
    70e4:	4798      	blx	r3
	return 0;
    70e6:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    70e8:	4620      	mov	r0, r4
    70ea:	4633      	mov	r3, r6
}
    70ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    70f0:	4718      	bx	r3
    70f2:	bf00      	nop
    70f4:	20000cc4 	.word	0x20000cc4
    70f8:	b6db6db7 	.word	0xb6db6db7
    70fc:	0001e61c 	.word	0x0001e61c

00007100 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    7100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    7104:	4c0f      	ldr	r4, [pc, #60]	; (7144 <onoff_start+0x44>)
    7106:	4d10      	ldr	r5, [pc, #64]	; (7148 <onoff_start+0x48>)
    7108:	1b03      	subs	r3, r0, r4
    710a:	109b      	asrs	r3, r3, #2
    710c:	435d      	muls	r5, r3
    710e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    7110:	250c      	movs	r5, #12
    7112:	435d      	muls	r5, r3
{
    7114:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    7116:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    711a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    711c:	4420      	add	r0, r4
    711e:	2140      	movs	r1, #64	; 0x40
    7120:	f015 fbb4 	bl	1c88c <set_starting_state>
	if (err < 0) {
    7124:	1e01      	subs	r1, r0, #0
    7126:	db08      	blt.n	713a <onoff_start+0x3a>
	subdata->cb = cb;
    7128:	4b08      	ldr	r3, [pc, #32]	; (714c <onoff_start+0x4c>)
    712a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    712c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    7130:	4b07      	ldr	r3, [pc, #28]	; (7150 <onoff_start+0x50>)
    7132:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    7134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    7138:	4718      	bx	r3
		notify(mgr, err);
    713a:	4638      	mov	r0, r7
    713c:	4633      	mov	r3, r6
}
    713e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    7142:	4718      	bx	r3
    7144:	20000cc4 	.word	0x20000cc4
    7148:	b6db6db7 	.word	0xb6db6db7
    714c:	0001c8ef 	.word	0x0001c8ef
    7150:	0001e61c 	.word	0x0001e61c

00007154 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7154:	2200      	movs	r2, #0
{
    7156:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7158:	2101      	movs	r1, #1
{
    715a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    715c:	4610      	mov	r0, r2
    715e:	f7ff fa3d 	bl	65dc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    7162:	2000      	movs	r0, #0
    7164:	f7ff fa08 	bl	6578 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7168:	480f      	ldr	r0, [pc, #60]	; (71a8 <clk_init+0x54>)
    716a:	f003 fa0d 	bl	a588 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    716e:	4b0f      	ldr	r3, [pc, #60]	; (71ac <clk_init+0x58>)
    7170:	4298      	cmp	r0, r3
    7172:	d115      	bne.n	71a0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    7174:	f015 ffa8 	bl	1d0c8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    7178:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    717a:	490d      	ldr	r1, [pc, #52]	; (71b0 <clk_init+0x5c>)
    717c:	4630      	mov	r0, r6
    717e:	f014 fda5 	bl	1bccc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    7182:	2800      	cmp	r0, #0
    7184:	db0b      	blt.n	719e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7186:	2501      	movs	r5, #1
    7188:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    718a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    718c:	4908      	ldr	r1, [pc, #32]	; (71b0 <clk_init+0x5c>)
    718e:	f104 001c 	add.w	r0, r4, #28
    7192:	f014 fd9b 	bl	1bccc <onoff_manager_init>
		if (err < 0) {
    7196:	2800      	cmp	r0, #0
    7198:	db01      	blt.n	719e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    719a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    719c:	2000      	movs	r0, #0
}
    719e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    71a0:	f06f 0004 	mvn.w	r0, #4
    71a4:	e7fb      	b.n	719e <clk_init+0x4a>
    71a6:	bf00      	nop
    71a8:	000071e9 	.word	0x000071e9
    71ac:	0bad0000 	.word	0x0bad0000
    71b0:	0001e634 	.word	0x0001e634

000071b4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    71b4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    71b6:	230c      	movs	r3, #12
    71b8:	4809      	ldr	r0, [pc, #36]	; (71e0 <clkstarted_handle.constprop.0+0x2c>)
    71ba:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    71bc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    71be:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    71c0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    71c4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    71c6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    71c8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    71ca:	4418      	add	r0, r3
    71cc:	f015 fb7c 	bl	1c8c8 <set_on_state>
	if (callback) {
    71d0:	b12d      	cbz	r5, 71de <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    71d2:	4632      	mov	r2, r6
    71d4:	462b      	mov	r3, r5
    71d6:	4803      	ldr	r0, [pc, #12]	; (71e4 <clkstarted_handle.constprop.0+0x30>)
}
    71d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    71dc:	4718      	bx	r3
}
    71de:	bd70      	pop	{r4, r5, r6, pc}
    71e0:	20000cc4 	.word	0x20000cc4
    71e4:	0001de54 	.word	0x0001de54

000071e8 <clock_event_handler>:
	switch (event) {
    71e8:	b110      	cbz	r0, 71f0 <clock_event_handler+0x8>
    71ea:	2801      	cmp	r0, #1
    71ec:	d004      	beq.n	71f8 <clock_event_handler+0x10>
    71ee:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    71f0:	4b03      	ldr	r3, [pc, #12]	; (7200 <clock_event_handler+0x18>)
    71f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    71f4:	075b      	lsls	r3, r3, #29
    71f6:	d101      	bne.n	71fc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    71f8:	f7ff bfdc 	b.w	71b4 <clkstarted_handle.constprop.0>
}
    71fc:	4770      	bx	lr
    71fe:	bf00      	nop
    7200:	20000cc4 	.word	0x20000cc4

00007204 <generic_hfclk_start>:
{
    7204:	b508      	push	{r3, lr}
	__asm__ volatile(
    7206:	f04f 0320 	mov.w	r3, #32
    720a:	f3ef 8111 	mrs	r1, BASEPRI
    720e:	f383 8812 	msr	BASEPRI_MAX, r3
    7212:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    7216:	4a12      	ldr	r2, [pc, #72]	; (7260 <generic_hfclk_start+0x5c>)
    7218:	6813      	ldr	r3, [r2, #0]
    721a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    721e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    7222:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    7224:	d00c      	beq.n	7240 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    722a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    722e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    7232:	f013 0301 	ands.w	r3, r3, #1
    7236:	d003      	beq.n	7240 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    7238:	480a      	ldr	r0, [pc, #40]	; (7264 <generic_hfclk_start+0x60>)
    723a:	f015 fb45 	bl	1c8c8 <set_on_state>
			already_started = true;
    723e:	2301      	movs	r3, #1
	__asm__ volatile(
    7240:	f381 8811 	msr	BASEPRI, r1
    7244:	f3bf 8f6f 	isb	sy
	if (already_started) {
    7248:	b123      	cbz	r3, 7254 <generic_hfclk_start+0x50>
}
    724a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    724e:	2000      	movs	r0, #0
    7250:	f7ff bfb0 	b.w	71b4 <clkstarted_handle.constprop.0>
}
    7254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    7258:	2001      	movs	r0, #1
    725a:	f003 b9a5 	b.w	a5a8 <nrfx_clock_start>
    725e:	bf00      	nop
    7260:	20000d14 	.word	0x20000d14
    7264:	20000d04 	.word	0x20000d04

00007268 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7268:	4b09      	ldr	r3, [pc, #36]	; (7290 <generic_hfclk_stop+0x28>)
    726a:	f3bf 8f5b 	dmb	ish
    726e:	e853 2f00 	ldrex	r2, [r3]
    7272:	f022 0102 	bic.w	r1, r2, #2
    7276:	e843 1000 	strex	r0, r1, [r3]
    727a:	2800      	cmp	r0, #0
    727c:	d1f7      	bne.n	726e <generic_hfclk_stop+0x6>
    727e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    7282:	07d3      	lsls	r3, r2, #31
    7284:	d402      	bmi.n	728c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7286:	2001      	movs	r0, #1
    7288:	f003 b9c0 	b.w	a60c <nrfx_clock_stop>
}
    728c:	4770      	bx	lr
    728e:	bf00      	nop
    7290:	20000d14 	.word	0x20000d14

00007294 <api_blocking_start>:
{
    7294:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7296:	2200      	movs	r2, #0
    7298:	2301      	movs	r3, #1
    729a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    729e:	ab04      	add	r3, sp, #16
    72a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    72a4:	4a09      	ldr	r2, [pc, #36]	; (72cc <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    72a6:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    72aa:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    72ac:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    72b0:	f015 fb43 	bl	1c93a <api_start>
	if (err < 0) {
    72b4:	2800      	cmp	r0, #0
    72b6:	db05      	blt.n	72c4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    72b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    72bc:	2300      	movs	r3, #0
    72be:	4668      	mov	r0, sp
    72c0:	f004 f944 	bl	b54c <z_impl_k_sem_take>
}
    72c4:	b007      	add	sp, #28
    72c6:	f85d fb04 	ldr.w	pc, [sp], #4
    72ca:	bf00      	nop
    72cc:	0001c90d 	.word	0x0001c90d

000072d0 <z_nrf_clock_control_lf_on>:
{
    72d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    72d4:	493a      	ldr	r1, [pc, #232]	; (73c0 <z_nrf_clock_control_lf_on+0xf0>)
    72d6:	f3bf 8f5b 	dmb	ish
    72da:	4606      	mov	r6, r0
    72dc:	2201      	movs	r2, #1
    72de:	e851 3f00 	ldrex	r3, [r1]
    72e2:	e841 2000 	strex	r0, r2, [r1]
    72e6:	2800      	cmp	r0, #0
    72e8:	d1f9      	bne.n	72de <z_nrf_clock_control_lf_on+0xe>
    72ea:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    72ee:	b933      	cbnz	r3, 72fe <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    72f0:	4934      	ldr	r1, [pc, #208]	; (73c4 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    72f2:	4835      	ldr	r0, [pc, #212]	; (73c8 <z_nrf_clock_control_lf_on+0xf8>)
    72f4:	604b      	str	r3, [r1, #4]
    72f6:	60cb      	str	r3, [r1, #12]
    72f8:	608a      	str	r2, [r1, #8]
    72fa:	f014 fcfa 	bl	1bcf2 <onoff_request>
	switch (start_mode) {
    72fe:	1e73      	subs	r3, r6, #1
    7300:	2b01      	cmp	r3, #1
    7302:	d832      	bhi.n	736a <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7304:	2e01      	cmp	r6, #1
    7306:	d107      	bne.n	7318 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    730c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7310:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7314:	2b01      	cmp	r3, #1
    7316:	d028      	beq.n	736a <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7318:	f015 ff8e 	bl	1d238 <k_is_in_isr>
    731c:	4604      	mov	r4, r0
    731e:	b918      	cbnz	r0, 7328 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    7320:	4b2a      	ldr	r3, [pc, #168]	; (73cc <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    7322:	781b      	ldrb	r3, [r3, #0]
    7324:	2b00      	cmp	r3, #0
    7326:	d144      	bne.n	73b2 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    7328:	f04f 0320 	mov.w	r3, #32
    732c:	f3ef 8511 	mrs	r5, BASEPRI
    7330:	f383 8812 	msr	BASEPRI_MAX, r3
    7334:	f3bf 8f6f 	isb	sy
    7338:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    733a:	4f25      	ldr	r7, [pc, #148]	; (73d0 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    733c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 73d4 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7340:	f8df 9094 	ldr.w	r9, [pc, #148]	; 73d8 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7344:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7348:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    734c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    7350:	03d2      	lsls	r2, r2, #15
    7352:	d50c      	bpl.n	736e <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7354:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    7358:	2b01      	cmp	r3, #1
    735a:	d001      	beq.n	7360 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    735c:	2e01      	cmp	r6, #1
    735e:	d106      	bne.n	736e <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    7360:	b30c      	cbz	r4, 73a6 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    7362:	f385 8811 	msr	BASEPRI, r5
    7366:	f3bf 8f6f 	isb	sy
}
    736a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    736e:	b1ac      	cbz	r4, 739c <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    7370:	4628      	mov	r0, r5
    7372:	f7ff f8bf 	bl	64f4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7376:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    737a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    737e:	2b00      	cmp	r3, #0
    7380:	d1e0      	bne.n	7344 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7382:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    7384:	2900      	cmp	r1, #0
    7386:	d0dd      	beq.n	7344 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7388:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    738a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    738c:	2301      	movs	r3, #1
    738e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    7392:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7396:	f8c9 3000 	str.w	r3, [r9]
}
    739a:	e7d3      	b.n	7344 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    739c:	2100      	movs	r1, #0
    739e:	2021      	movs	r0, #33	; 0x21
    73a0:	f004 fd14 	bl	bdcc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    73a4:	e7e7      	b.n	7376 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    73a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73aa:	2202      	movs	r2, #2
    73ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    73b0:	e7db      	b.n	736a <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    73b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73b6:	2202      	movs	r2, #2
    73b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    73bc:	4605      	mov	r5, r0
}
    73be:	e7bc      	b.n	733a <z_nrf_clock_control_lf_on+0x6a>
    73c0:	20000d18 	.word	0x20000d18
    73c4:	20000cb4 	.word	0x20000cb4
    73c8:	20000ce0 	.word	0x20000ce0
    73cc:	200020d7 	.word	0x200020d7
    73d0:	40000104 	.word	0x40000104
    73d4:	e000e100 	.word	0xe000e100
    73d8:	40000008 	.word	0x40000008

000073dc <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    73dc:	4b0a      	ldr	r3, [pc, #40]	; (7408 <console_out+0x2c>)
{
    73de:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    73e0:	b2c6      	uxtb	r6, r0
    73e2:	681b      	ldr	r3, [r3, #0]
{
    73e4:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    73e6:	4630      	mov	r0, r6
    73e8:	4798      	blx	r3

	if (handled_by_debug_server) {
    73ea:	2801      	cmp	r0, #1
    73ec:	d00a      	beq.n	7404 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    73ee:	2c0a      	cmp	r4, #10
    73f0:	4d06      	ldr	r5, [pc, #24]	; (740c <console_out+0x30>)
    73f2:	d103      	bne.n	73fc <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    73f4:	6828      	ldr	r0, [r5, #0]
    73f6:	210d      	movs	r1, #13
    73f8:	f015 fab9 	bl	1c96e <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    73fc:	6828      	ldr	r0, [r5, #0]
    73fe:	4631      	mov	r1, r6
    7400:	f015 fab5 	bl	1c96e <uart_poll_out>

	return c;
}
    7404:	4620      	mov	r0, r4
    7406:	bd70      	pop	{r4, r5, r6, pc}
    7408:	20000038 	.word	0x20000038
    740c:	20000d1c 	.word	0x20000d1c

00007410 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    7410:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    7412:	4b08      	ldr	r3, [pc, #32]	; (7434 <uart_console_init+0x24>)
    7414:	4808      	ldr	r0, [pc, #32]	; (7438 <uart_console_init+0x28>)
    7416:	6018      	str	r0, [r3, #0]
    7418:	f015 fec0 	bl	1d19c <z_device_ready>
    741c:	b138      	cbz	r0, 742e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    741e:	4807      	ldr	r0, [pc, #28]	; (743c <uart_console_init+0x2c>)
    7420:	f7ff fd94 	bl	6f4c <__stdout_hook_install>
	__printk_hook_install(console_out);
    7424:	4805      	ldr	r0, [pc, #20]	; (743c <uart_console_init+0x2c>)
    7426:	f7fd fc35 	bl	4c94 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    742a:	2000      	movs	r0, #0
}
    742c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    742e:	f06f 0012 	mvn.w	r0, #18
    7432:	e7fb      	b.n	742c <uart_console_init+0x1c>
    7434:	20000d1c 	.word	0x20000d1c
    7438:	0001de6c 	.word	0x0001de6c
    743c:	000073dd 	.word	0x000073dd

00007440 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    7440:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    7442:	4b09      	ldr	r3, [pc, #36]	; (7468 <gpio_nrfx_init+0x28>)
    7444:	781a      	ldrb	r2, [r3, #0]
    7446:	b96a      	cbnz	r2, 7464 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    7448:	2101      	movs	r1, #1
    744a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    744c:	2006      	movs	r0, #6
    744e:	2105      	movs	r1, #5
    7450:	f7ff f8c4 	bl	65dc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    7454:	2006      	movs	r0, #6
    7456:	f7ff f88f 	bl	6578 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    745a:	4b04      	ldr	r3, [pc, #16]	; (746c <gpio_nrfx_init+0x2c>)
    745c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7460:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    7464:	2000      	movs	r0, #0
    7466:	bd08      	pop	{r3, pc}
    7468:	20001fb5 	.word	0x20001fb5
    746c:	40006000 	.word	0x40006000

00007470 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7470:	4b2b      	ldr	r3, [pc, #172]	; (7520 <gpio_nrfx_config+0xb0>)
{
    7472:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7474:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7476:	482b      	ldr	r0, [pc, #172]	; (7524 <gpio_nrfx_config+0xb4>)
    7478:	4013      	ands	r3, r2
    747a:	4283      	cmp	r3, r0
    747c:	d041      	beq.n	7502 <gpio_nrfx_config+0x92>
    747e:	d80d      	bhi.n	749c <gpio_nrfx_config+0x2c>
    7480:	2b06      	cmp	r3, #6
    7482:	d015      	beq.n	74b0 <gpio_nrfx_config+0x40>
    7484:	d805      	bhi.n	7492 <gpio_nrfx_config+0x22>
    7486:	b19b      	cbz	r3, 74b0 <gpio_nrfx_config+0x40>
    7488:	2b02      	cmp	r3, #2
    748a:	d03c      	beq.n	7506 <gpio_nrfx_config+0x96>
    748c:	f06f 0015 	mvn.w	r0, #21
    7490:	e036      	b.n	7500 <gpio_nrfx_config+0x90>
    7492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7496:	d1f9      	bne.n	748c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    7498:	2301      	movs	r3, #1
    749a:	e009      	b.n	74b0 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    749c:	4822      	ldr	r0, [pc, #136]	; (7528 <gpio_nrfx_config+0xb8>)
    749e:	4283      	cmp	r3, r0
    74a0:	d033      	beq.n	750a <gpio_nrfx_config+0x9a>
    74a2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    74a6:	d032      	beq.n	750e <gpio_nrfx_config+0x9e>
    74a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    74ac:	d1ee      	bne.n	748c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    74ae:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    74b0:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    74b2:	bf54      	ite	pl
    74b4:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    74b8:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    74ba:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    74be:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    74c0:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    74c4:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    74c8:	d507      	bpl.n	74da <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    74ca:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74ce:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    74d0:	d01f      	beq.n	7512 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    74d2:	2201      	movs	r2, #1
    74d4:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    74d6:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    74da:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    74dc:	4c13      	ldr	r4, [pc, #76]	; (752c <gpio_nrfx_config+0xbc>)
    74de:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    74e0:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    74e4:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    74e8:	bf18      	it	ne
    74ea:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    74ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    74f2:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    74f6:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    74fa:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    74fe:	2000      	movs	r0, #0
}
    7500:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    7502:	2307      	movs	r3, #7
    7504:	e7d4      	b.n	74b0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    7506:	2304      	movs	r3, #4
    7508:	e7d2      	b.n	74b0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    750a:	2305      	movs	r3, #5
    750c:	e7d0      	b.n	74b0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    750e:	2303      	movs	r3, #3
    7510:	e7ce      	b.n	74b0 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    7512:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    7514:	bf42      	ittt	mi
    7516:	2201      	movmi	r2, #1
    7518:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    751a:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    751e:	e7dc      	b.n	74da <gpio_nrfx_config+0x6a>
    7520:	00f00006 	.word	0x00f00006
    7524:	00100006 	.word	0x00100006
    7528:	00400002 	.word	0x00400002
    752c:	50000300 	.word	0x50000300

00007530 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    7530:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    7534:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    7536:	4b08      	ldr	r3, [pc, #32]	; (7558 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7538:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    753a:	bf18      	it	ne
    753c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    7540:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7544:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    7548:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    754c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    7550:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    7554:	4770      	bx	lr
    7556:	bf00      	nop
    7558:	50000300 	.word	0x50000300

0000755c <check_level_trigger_pins>:
{
    755c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    7560:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    7562:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    7566:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    7568:	f8df b07c 	ldr.w	fp, [pc, #124]	; 75e8 <check_level_trigger_pins+0x8c>
{
    756c:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    756e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    7572:	430a      	orrs	r2, r1
    7574:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    7578:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    757c:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    757e:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    7582:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    7584:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    7588:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    758a:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    758c:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    7590:	b917      	cbnz	r7, 7598 <check_level_trigger_pins+0x3c>
}
    7592:	4628      	mov	r0, r5
    7594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    7598:	423c      	tst	r4, r7
    759a:	d021      	beq.n	75e0 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    759c:	f89a 3008 	ldrb.w	r3, [sl, #8]
    75a0:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    75a4:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    75a6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    75aa:	d114      	bne.n	75d6 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    75ac:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    75ae:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    75b0:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    75b4:	bf14      	ite	ne
    75b6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    75ba:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    75bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    75c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    75c4:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    75c8:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    75ca:	bf02      	ittt	eq
    75cc:	f8d8 3000 	ldreq.w	r3, [r8]
    75d0:	4323      	orreq	r3, r4
    75d2:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    75d6:	2100      	movs	r1, #0
    75d8:	f7ff ffaa 	bl	7530 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    75dc:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    75e0:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    75e4:	0064      	lsls	r4, r4, #1
    75e6:	e7d3      	b.n	7590 <check_level_trigger_pins+0x34>
    75e8:	50000300 	.word	0x50000300

000075ec <gpio_nrfx_pin_interrupt_configure>:
{
    75ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    75ee:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    75f0:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    75f2:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    75f4:	7a09      	ldrb	r1, [r1, #8]
    75f6:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    75fa:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    75fe:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    7602:	d110      	bne.n	7626 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    7604:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    7606:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    7608:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
    760c:	485d      	ldr	r0, [pc, #372]	; (7784 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    760e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    7612:	bf18      	it	ne
    7614:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7618:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    761c:	07c8      	lsls	r0, r1, #31
    761e:	d507      	bpl.n	7630 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    7620:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7624:	e093      	b.n	774e <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    7626:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    762a:	68f9      	ldr	r1, [r7, #12]
    762c:	f000 8091 	beq.w	7752 <gpio_nrfx_pin_interrupt_configure+0x166>
    7630:	68f8      	ldr	r0, [r7, #12]
    7632:	2101      	movs	r1, #1
    7634:	40b1      	lsls	r1, r6
    7636:	4301      	orrs	r1, r0
    7638:	6978      	ldr	r0, [r7, #20]
    763a:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    763c:	2101      	movs	r1, #1
    763e:	40b1      	lsls	r1, r6
    7640:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    7644:	69ba      	ldr	r2, [r7, #24]
    7646:	bf0c      	ite	eq
    7648:	4308      	orreq	r0, r1
    764a:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    764c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    7650:	bf0c      	ite	eq
    7652:	430a      	orreq	r2, r1
    7654:	438a      	bicne	r2, r1
    7656:	61ba      	str	r2, [r7, #24]
    7658:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    765a:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    765c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    7660:	bf0c      	ite	eq
    7662:	4311      	orreq	r1, r2
    7664:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    7668:	4a47      	ldr	r2, [pc, #284]	; (7788 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    766a:	6139      	str	r1, [r7, #16]
    766c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    7670:	2000      	movs	r0, #0
    7672:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7674:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    7678:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    767c:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    7680:	428d      	cmp	r5, r1
    7682:	d16b      	bne.n	775c <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
    7684:	fa23 f100 	lsr.w	r1, r3, r0
    7688:	07c9      	lsls	r1, r1, #31
    768a:	d567      	bpl.n	775c <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    768c:	0083      	lsls	r3, r0, #2
    768e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7692:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7696:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    769a:	f021 0101 	bic.w	r1, r1, #1
    769e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    76a2:	2301      	movs	r3, #1
    76a4:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    76a6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    76aa:	b2c0      	uxtb	r0, r0
    76ac:	f003 f8fa 	bl	a8a4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    76b0:	4628      	mov	r0, r5
    76b2:	2100      	movs	r1, #0
    76b4:	f7ff ff3c 	bl	7530 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    76b8:	68f8      	ldr	r0, [r7, #12]
    76ba:	40f0      	lsrs	r0, r6
    76bc:	f010 0001 	ands.w	r0, r0, #1
    76c0:	d045      	beq.n	774e <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
    76c2:	6978      	ldr	r0, [r7, #20]
    76c4:	40f0      	lsrs	r0, r6
    76c6:	f010 0401 	ands.w	r4, r0, #1
    76ca:	d04e      	beq.n	776a <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
    76cc:	69bb      	ldr	r3, [r7, #24]
    76ce:	40f3      	lsrs	r3, r6
    76d0:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    76d2:	bf5f      	itttt	pl
    76d4:	6939      	ldrpl	r1, [r7, #16]
    76d6:	fa21 f606 	lsrpl.w	r6, r1, r6
    76da:	f006 0601 	andpl.w	r6, r6, #1
    76de:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    76e2:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    76e6:	bf54      	ite	pl
    76e8:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    76ea:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    76ec:	f003 f8fc 	bl	a8e8 <nrfx_gpiote_channel_alloc>
    76f0:	4b26      	ldr	r3, [pc, #152]	; (778c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    76f2:	4298      	cmp	r0, r3
    76f4:	d136      	bne.n	7764 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    76f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    76fa:	008b      	lsls	r3, r1, #2
    76fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7700:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7704:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7706:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    770a:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    770e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    7712:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7716:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    771a:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    771e:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    7720:	008a      	lsls	r2, r1, #2
    7722:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7726:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    772a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    772e:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7730:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7734:	6010      	str	r0, [r2, #0]
    7736:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7738:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    773c:	f042 0201 	orr.w	r2, r2, #1
    7740:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    7744:	4a10      	ldr	r2, [pc, #64]	; (7788 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    7746:	2301      	movs	r3, #1
    7748:	408b      	lsls	r3, r1
    774a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    774e:	b003      	add	sp, #12
    7750:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    7752:	2001      	movs	r0, #1
    7754:	40b0      	lsls	r0, r6
    7756:	ea21 0100 	bic.w	r1, r1, r0
    775a:	e76d      	b.n	7638 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    775c:	3001      	adds	r0, #1
    775e:	2808      	cmp	r0, #8
    7760:	d188      	bne.n	7674 <gpio_nrfx_pin_interrupt_configure+0x88>
    7762:	e7a5      	b.n	76b0 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
    7764:	f06f 0012 	mvn.w	r0, #18
    7768:	e7f1      	b.n	774e <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    776a:	6939      	ldr	r1, [r7, #16]
    776c:	40f1      	lsrs	r1, r6
    776e:	f001 0101 	and.w	r1, r1, #1
    7772:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    7776:	4628      	mov	r0, r5
    7778:	b2c9      	uxtb	r1, r1
    777a:	f7ff fed9 	bl	7530 <nrf_gpio_cfg_sense_set>
	int res = 0;
    777e:	4620      	mov	r0, r4
    7780:	e7e5      	b.n	774e <gpio_nrfx_pin_interrupt_configure+0x162>
    7782:	bf00      	nop
    7784:	50000300 	.word	0x50000300
    7788:	40006000 	.word	0x40006000
    778c:	0bad0000 	.word	0x0bad0000

00007790 <gpiote_event_handler>:
{
    7790:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    7792:	2400      	movs	r4, #0
{
    7794:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    7796:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    779a:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    779e:	4e26      	ldr	r6, [pc, #152]	; (7838 <gpiote_event_handler+0xa8>)
    77a0:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    77a2:	b15d      	cbz	r5, 77bc <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    77a4:	a902      	add	r1, sp, #8
    77a6:	4825      	ldr	r0, [pc, #148]	; (783c <gpiote_event_handler+0xac>)
    77a8:	f7ff fed8 	bl	755c <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    77ac:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    77ae:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    77b0:	4823      	ldr	r0, [pc, #140]	; (7840 <gpiote_event_handler+0xb0>)
    77b2:	f7ff fed3 	bl	755c <check_level_trigger_pins>
		fired_triggers[1] =
    77b6:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    77b8:	6034      	str	r4, [r6, #0]
    77ba:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    77bc:	4c21      	ldr	r4, [pc, #132]	; (7844 <gpiote_event_handler+0xb4>)
{
    77be:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    77c0:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    77c2:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    77c4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    77c8:	fa06 f102 	lsl.w	r1, r6, r2
    77cc:	4219      	tst	r1, r3
    77ce:	d01b      	beq.n	7808 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    77d0:	0091      	lsls	r1, r2, #2
    77d2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    77d6:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    77da:	680b      	ldr	r3, [r1, #0]
    77dc:	b1a3      	cbz	r3, 7808 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    77de:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    77e2:	af04      	add	r7, sp, #16
    77e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    77e8:	f8c1 c000 	str.w	ip, [r1]
    77ec:	f3c3 3040 	ubfx	r0, r3, #13, #1
    77f0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    77f4:	f3c3 2304 	ubfx	r3, r3, #8, #5
    77f8:	f850 7c10 	ldr.w	r7, [r0, #-16]
    77fc:	fa06 f303 	lsl.w	r3, r6, r3
    7800:	433b      	orrs	r3, r7
    7802:	f840 3c10 	str.w	r3, [r0, #-16]
    7806:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    7808:	3201      	adds	r2, #1
    780a:	2a08      	cmp	r2, #8
    780c:	d1da      	bne.n	77c4 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    780e:	9a00      	ldr	r2, [sp, #0]
    7810:	b11a      	cbz	r2, 781a <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    7812:	490a      	ldr	r1, [pc, #40]	; (783c <gpiote_event_handler+0xac>)
    7814:	480c      	ldr	r0, [pc, #48]	; (7848 <gpiote_event_handler+0xb8>)
    7816:	f015 f8af 	bl	1c978 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    781a:	9a01      	ldr	r2, [sp, #4]
    781c:	b11a      	cbz	r2, 7826 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    781e:	4908      	ldr	r1, [pc, #32]	; (7840 <gpiote_event_handler+0xb0>)
    7820:	480a      	ldr	r0, [pc, #40]	; (784c <gpiote_event_handler+0xbc>)
    7822:	f015 f8a9 	bl	1c978 <gpio_fire_callbacks>
	if (port_event) {
    7826:	b12d      	cbz	r5, 7834 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    7828:	4804      	ldr	r0, [pc, #16]	; (783c <gpiote_event_handler+0xac>)
    782a:	f015 f90f 	bl	1ca4c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    782e:	4804      	ldr	r0, [pc, #16]	; (7840 <gpiote_event_handler+0xb0>)
    7830:	f015 f90c 	bl	1ca4c <cfg_level_pins>
}
    7834:	b005      	add	sp, #20
    7836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7838:	4000617c 	.word	0x4000617c
    783c:	0001de9c 	.word	0x0001de9c
    7840:	0001deb4 	.word	0x0001deb4
    7844:	40006000 	.word	0x40006000
    7848:	20000d24 	.word	0x20000d24
    784c:	20000d40 	.word	0x20000d40

00007850 <transfer_next_chunk>:

	return 0;
}

static void transfer_next_chunk(const struct device *dev)
{
    7850:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    7852:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    7854:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    7856:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
    7858:	b085      	sub	sp, #20
    785a:	b982      	cbnz	r2, 787e <transfer_next_chunk+0x2e>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    785c:	bb73      	cbnz	r3, 78bc <transfer_next_chunk+0x6c>
	int error = 0;
    785e:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    7860:	2200      	movs	r2, #0
    7862:	4611      	mov	r1, r2
    7864:	4628      	mov	r0, r5
    7866:	f015 f927 	bl	1cab8 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    786a:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
    786c:	f105 0020 	add.w	r0, r5, #32
    7870:	f003 fe46 	bl	b500 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    7874:	2300      	movs	r3, #0
    7876:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    787a:	b005      	add	sp, #20
    787c:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    787e:	4611      	mov	r1, r2
    7880:	b113      	cbz	r3, 7888 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    7882:	429a      	cmp	r2, r3
    7884:	bf28      	it	cs
    7886:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    7888:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
    788a:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
    788c:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    788e:	b1bc      	cbz	r4, 78c0 <transfer_next_chunk+0x70>
    7890:	2a00      	cmp	r2, #0
    7892:	bf18      	it	ne
    7894:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7896:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    7898:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    789a:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    789c:	b192      	cbz	r2, 78c4 <transfer_next_chunk+0x74>
    789e:	2b00      	cmp	r3, #0
    78a0:	bf18      	it	ne
    78a2:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    78a4:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    78a6:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    78a8:	2200      	movs	r2, #0
    78aa:	4669      	mov	r1, sp
    78ac:	f003 fa2e 	bl	ad0c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    78b0:	4b05      	ldr	r3, [pc, #20]	; (78c8 <transfer_next_chunk+0x78>)
    78b2:	4298      	cmp	r0, r3
    78b4:	d0e1      	beq.n	787a <transfer_next_chunk+0x2a>
		error = -EIO;
    78b6:	f06f 0404 	mvn.w	r4, #4
    78ba:	e7d1      	b.n	7860 <transfer_next_chunk+0x10>
    78bc:	4619      	mov	r1, r3
    78be:	e7e3      	b.n	7888 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    78c0:	4622      	mov	r2, r4
    78c2:	e7e8      	b.n	7896 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    78c4:	4613      	mov	r3, r2
    78c6:	e7ed      	b.n	78a4 <transfer_next_chunk+0x54>
    78c8:	0bad0000 	.word	0x0bad0000

000078cc <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    78cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78d0:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    78d2:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    78d4:	6904      	ldr	r4, [r0, #16]
{
    78d6:	460d      	mov	r5, r1
    78d8:	0459      	lsls	r1, r3, #17
    78da:	b087      	sub	sp, #28
    78dc:	4680      	mov	r8, r0
    78de:	4617      	mov	r7, r2
    78e0:	d436      	bmi.n	7950 <spi_nrfx_transceive+0x84>
	return z_impl_k_sem_take(sem, timeout);
    78e2:	f04f 32ff 	mov.w	r2, #4294967295
    78e6:	f04f 33ff 	mov.w	r3, #4294967295
    78ea:	f104 0008 	add.w	r0, r4, #8
    78ee:	f003 fe2d 	bl	b54c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    78f2:	6065      	str	r5, [r4, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    78f4:	f8d8 9010 	ldr.w	r9, [r8, #16]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    78f8:	f8d8 b004 	ldr.w	fp, [r8, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    78fc:	f899 3065 	ldrb.w	r3, [r9, #101]	; 0x65
    7900:	9301      	str	r3, [sp, #4]
    7902:	b123      	cbz	r3, 790e <spi_nrfx_transceive+0x42>
    7904:	f8d9 3000 	ldr.w	r3, [r9]
    7908:	429d      	cmp	r5, r3
    790a:	f000 80e6 	beq.w	7ada <spi_nrfx_transceive+0x20e>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    790e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    7912:	f01e 0f01 	tst.w	lr, #1
    7916:	d022      	beq.n	795e <spi_nrfx_transceive+0x92>
    7918:	4aa3      	ldr	r2, [pc, #652]	; (7ba8 <spi_nrfx_transceive+0x2dc>)
    791a:	4ba4      	ldr	r3, [pc, #656]	; (7bac <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    791c:	f8d8 1000 	ldr.w	r1, [r8]
    7920:	48a3      	ldr	r0, [pc, #652]	; (7bb0 <spi_nrfx_transceive+0x2e4>)
    7922:	1ad2      	subs	r2, r2, r3
    7924:	08d2      	lsrs	r2, r2, #3
    7926:	0192      	lsls	r2, r2, #6
    7928:	f042 0201 	orr.w	r2, r2, #1
    792c:	f014 fb59 	bl	1bfe2 <log_1>
		return -EINVAL;
    7930:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    7934:	6823      	ldr	r3, [r4, #0]
    7936:	889b      	ldrh	r3, [r3, #4]
    7938:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    793c:	d104      	bne.n	7948 <spi_nrfx_transceive+0x7c>
		ctx->owner = NULL;
    793e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    7940:	f104 0008 	add.w	r0, r4, #8
    7944:	f003 fddc 	bl	b500 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
    7948:	4628      	mov	r0, r5
    794a:	b007      	add	sp, #28
    794c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    7950:	6923      	ldr	r3, [r4, #16]
    7952:	2b00      	cmp	r3, #0
    7954:	d1c5      	bne.n	78e2 <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
    7956:	6863      	ldr	r3, [r4, #4]
    7958:	429d      	cmp	r5, r3
    795a:	d1c2      	bne.n	78e2 <spi_nrfx_transceive+0x16>
    795c:	e7ca      	b.n	78f4 <spi_nrfx_transceive+0x28>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    795e:	f01e 0f08 	tst.w	lr, #8
    7962:	d00a      	beq.n	797a <spi_nrfx_transceive+0xae>
    7964:	4990      	ldr	r1, [pc, #576]	; (7ba8 <spi_nrfx_transceive+0x2dc>)
    7966:	4b91      	ldr	r3, [pc, #580]	; (7bac <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Loopback mode is not supported");
    7968:	4892      	ldr	r0, [pc, #584]	; (7bb4 <spi_nrfx_transceive+0x2e8>)
    796a:	1ac9      	subs	r1, r1, r3
    796c:	08c9      	lsrs	r1, r1, #3
    796e:	0189      	lsls	r1, r1, #6
    7970:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7974:	f014 fb28 	bl	1bfc8 <log_0>
    7978:	e7da      	b.n	7930 <spi_nrfx_transceive+0x64>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    797a:	f41e 5fc0 	tst.w	lr, #6144	; 0x1800
    797e:	d008      	beq.n	7992 <spi_nrfx_transceive+0xc6>
    7980:	4989      	ldr	r1, [pc, #548]	; (7ba8 <spi_nrfx_transceive+0x2dc>)
    7982:	4b8a      	ldr	r3, [pc, #552]	; (7bac <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Only single line mode is supported");
    7984:	488c      	ldr	r0, [pc, #560]	; (7bb8 <spi_nrfx_transceive+0x2ec>)
    7986:	1ac9      	subs	r1, r1, r3
    7988:	08c9      	lsrs	r1, r1, #3
    798a:	0189      	lsls	r1, r1, #6
    798c:	f041 0101 	orr.w	r1, r1, #1
    7990:	e7f0      	b.n	7974 <spi_nrfx_transceive+0xa8>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    7992:	f3ce 1345 	ubfx	r3, lr, #5, #6
    7996:	2b08      	cmp	r3, #8
    7998:	d008      	beq.n	79ac <spi_nrfx_transceive+0xe0>
    799a:	4983      	ldr	r1, [pc, #524]	; (7ba8 <spi_nrfx_transceive+0x2dc>)
    799c:	4b83      	ldr	r3, [pc, #524]	; (7bac <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    799e:	4887      	ldr	r0, [pc, #540]	; (7bbc <spi_nrfx_transceive+0x2f0>)
    79a0:	1ac9      	subs	r1, r1, r3
    79a2:	08c9      	lsrs	r1, r1, #3
    79a4:	0189      	lsls	r1, r1, #6
    79a6:	f041 0101 	orr.w	r1, r1, #1
    79aa:	e7e3      	b.n	7974 <spi_nrfx_transceive+0xa8>
	if (spi_cfg->frequency < 125000) {
    79ac:	f8d5 c000 	ldr.w	ip, [r5]
    79b0:	4b83      	ldr	r3, [pc, #524]	; (7bc0 <spi_nrfx_transceive+0x2f4>)
    79b2:	459c      	cmp	ip, r3
    79b4:	d808      	bhi.n	79c8 <spi_nrfx_transceive+0xfc>
    79b6:	497c      	ldr	r1, [pc, #496]	; (7ba8 <spi_nrfx_transceive+0x2dc>)
    79b8:	4b7c      	ldr	r3, [pc, #496]	; (7bac <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    79ba:	4882      	ldr	r0, [pc, #520]	; (7bc4 <spi_nrfx_transceive+0x2f8>)
    79bc:	1ac9      	subs	r1, r1, r3
    79be:	08c9      	lsrs	r1, r1, #3
    79c0:	0189      	lsls	r1, r1, #6
    79c2:	f041 0101 	orr.w	r1, r1, #1
    79c6:	e7d5      	b.n	7974 <spi_nrfx_transceive+0xa8>
	config = dev_config->def_config;
    79c8:	f10b 0308 	add.w	r3, fp, #8
    79cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    79ce:	f10d 0a08 	add.w	sl, sp, #8
    79d2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
	if (frequency < 250000) {
    79d6:	4b7c      	ldr	r3, [pc, #496]	; (7bc8 <spi_nrfx_transceive+0x2fc>)
    79d8:	459c      	cmp	ip, r3
    79da:	d941      	bls.n	7a60 <spi_nrfx_transceive+0x194>
	} else if (frequency < 500000) {
    79dc:	4b7b      	ldr	r3, [pc, #492]	; (7bcc <spi_nrfx_transceive+0x300>)
    79de:	459c      	cmp	ip, r3
    79e0:	d941      	bls.n	7a66 <spi_nrfx_transceive+0x19a>
	} else if (frequency < 1000000) {
    79e2:	4b7b      	ldr	r3, [pc, #492]	; (7bd0 <spi_nrfx_transceive+0x304>)
    79e4:	459c      	cmp	ip, r3
    79e6:	d941      	bls.n	7a6c <spi_nrfx_transceive+0x1a0>
	} else if (frequency < 2000000) {
    79e8:	4b7a      	ldr	r3, [pc, #488]	; (7bd4 <spi_nrfx_transceive+0x308>)
    79ea:	459c      	cmp	ip, r3
    79ec:	d941      	bls.n	7a72 <spi_nrfx_transceive+0x1a6>
	} else if (frequency < 4000000) {
    79ee:	4b7a      	ldr	r3, [pc, #488]	; (7bd8 <spi_nrfx_transceive+0x30c>)
    79f0:	459c      	cmp	ip, r3
    79f2:	d941      	bls.n	7a78 <spi_nrfx_transceive+0x1ac>
		return NRF_SPI_FREQ_8M;
    79f4:	4b79      	ldr	r3, [pc, #484]	; (7bdc <spi_nrfx_transceive+0x310>)
    79f6:	459c      	cmp	ip, r3
    79f8:	bf34      	ite	cc
    79fa:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
    79fe:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7a02:	f01e 0f02 	tst.w	lr, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    7a06:	9304      	str	r3, [sp, #16]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7a08:	f00e 0304 	and.w	r3, lr, #4
    7a0c:	d037      	beq.n	7a7e <spi_nrfx_transceive+0x1b2>
			return NRF_SPI_MODE_2;
    7a0e:	2b00      	cmp	r3, #0
    7a10:	bf14      	ite	ne
    7a12:	2303      	movne	r3, #3
    7a14:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    7a16:	f88d 3014 	strb.w	r3, [sp, #20]
	if (dev_data->initialized) {
    7a1a:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
    7a1c:	f3ce 1e00 	ubfx	lr, lr, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    7a20:	f88d e015 	strb.w	lr, [sp, #21]
	if (dev_data->initialized) {
    7a24:	b12b      	cbz	r3, 7a32 <spi_nrfx_transceive+0x166>
		nrfx_spi_uninit(&dev_config->spi);
    7a26:	4658      	mov	r0, fp
    7a28:	f003 f93e 	bl	aca8 <nrfx_spi_uninit>
		dev_data->initialized = false;
    7a2c:	2300      	movs	r3, #0
    7a2e:	f889 3065 	strb.w	r3, [r9, #101]	; 0x65
	result = nrfx_spi_init(&dev_config->spi, &config,
    7a32:	464b      	mov	r3, r9
    7a34:	4651      	mov	r1, sl
    7a36:	4a6a      	ldr	r2, [pc, #424]	; (7be0 <spi_nrfx_transceive+0x314>)
    7a38:	4658      	mov	r0, fp
    7a3a:	f003 f893 	bl	ab64 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    7a3e:	4b69      	ldr	r3, [pc, #420]	; (7be4 <spi_nrfx_transceive+0x318>)
    7a40:	4298      	cmp	r0, r3
	result = nrfx_spi_init(&dev_config->spi, &config,
    7a42:	4601      	mov	r1, r0
	if (result != NRFX_SUCCESS) {
    7a44:	d01f      	beq.n	7a86 <spi_nrfx_transceive+0x1ba>
    7a46:	4b59      	ldr	r3, [pc, #356]	; (7bac <spi_nrfx_transceive+0x2e0>)
    7a48:	4a57      	ldr	r2, [pc, #348]	; (7ba8 <spi_nrfx_transceive+0x2dc>)
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    7a4a:	4867      	ldr	r0, [pc, #412]	; (7be8 <spi_nrfx_transceive+0x31c>)
    7a4c:	1ad2      	subs	r2, r2, r3
    7a4e:	08d2      	lsrs	r2, r2, #3
    7a50:	0192      	lsls	r2, r2, #6
    7a52:	f042 0201 	orr.w	r2, r2, #1
    7a56:	f014 fac4 	bl	1bfe2 <log_1>
		return -EIO;
    7a5a:	f06f 0504 	mvn.w	r5, #4
    7a5e:	e769      	b.n	7934 <spi_nrfx_transceive+0x68>
		return NRF_SPI_FREQ_125K;
    7a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    7a64:	e7cd      	b.n	7a02 <spi_nrfx_transceive+0x136>
		return NRF_SPI_FREQ_250K;
    7a66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7a6a:	e7ca      	b.n	7a02 <spi_nrfx_transceive+0x136>
		return NRF_SPI_FREQ_500K;
    7a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    7a70:	e7c7      	b.n	7a02 <spi_nrfx_transceive+0x136>
		return NRF_SPI_FREQ_1M;
    7a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7a76:	e7c4      	b.n	7a02 <spi_nrfx_transceive+0x136>
		return NRF_SPI_FREQ_2M;
    7a78:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    7a7c:	e7c1      	b.n	7a02 <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_0;
    7a7e:	3b00      	subs	r3, #0
    7a80:	bf18      	it	ne
    7a82:	2301      	movne	r3, #1
    7a84:	e7c7      	b.n	7a16 <spi_nrfx_transceive+0x14a>
	dev_data->initialized = true;
    7a86:	2301      	movs	r3, #1
    7a88:	f889 3065 	strb.w	r3, [r9, #101]	; 0x65
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    7a8c:	68ab      	ldr	r3, [r5, #8]
	ctx->config = spi_cfg;
    7a8e:	f8c9 5000 	str.w	r5, [r9]
    7a92:	2b00      	cmp	r3, #0
    7a94:	d071      	beq.n	7b7a <spi_nrfx_transceive+0x2ae>
    7a96:	6818      	ldr	r0, [r3, #0]
    7a98:	2800      	cmp	r0, #0
    7a9a:	d06e      	beq.n	7b7a <spi_nrfx_transceive+0x2ae>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    7a9c:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_dt_flags |
    7a9e:	7a5b      	ldrb	r3, [r3, #9]
	struct gpio_driver_data *data =
    7aa0:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    7aa4:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    7aa8:	f8de 5000 	ldr.w	r5, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7aac:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    7aae:	bf54      	ite	pl
    7ab0:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7ab4:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7ab8:	f04f 0c01 	mov.w	ip, #1
    7abc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7ac0:	fa0c fc01 	lsl.w	ip, ip, r1
    7ac4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7ac6:	bf4c      	ite	mi
    7ac8:	ea4c 0505 	orrmi.w	r5, ip, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7acc:	ea25 050c 	bicpl.w	r5, r5, ip
	return api->pin_configure(port, pin, flags);
    7ad0:	f8d9 3000 	ldr.w	r3, [r9]
    7ad4:	f8ce 5000 	str.w	r5, [lr]
    7ad8:	4798      	blx	r3
		dev_data->busy = true;
    7ada:	2301      	movs	r3, #1
    7adc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
    7ae0:	2f00      	cmp	r7, #0
    7ae2:	d055      	beq.n	7b90 <spi_nrfx_transceive+0x2c4>
		ctx->current_tx = tx_bufs->buffers;
    7ae4:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    7ae6:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    7ae8:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
    7aea:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7aec:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    7aee:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7af0:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
    7af2:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
    7af4:	2e00      	cmp	r6, #0
    7af6:	d050      	beq.n	7b9a <spi_nrfx_transceive+0x2ce>
		ctx->current_rx = rx_bufs->buffers;
    7af8:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    7afa:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    7afc:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
    7afe:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7b00:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    7b02:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7b04:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
    7b06:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
    7b08:	2200      	movs	r2, #0
    7b0a:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
    7b0c:	2101      	movs	r1, #1
    7b0e:	4620      	mov	r0, r4
    7b10:	f014 ffd2 	bl	1cab8 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    7b14:	4640      	mov	r0, r8
    7b16:	f7ff fe9b 	bl	7850 <transfer_next_chunk>
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7b1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7b1c:	6da1      	ldr	r1, [r4, #88]	; 0x58
		     ctx->config->frequency;
    7b1e:	4625      	mov	r5, r4
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7b20:	428b      	cmp	r3, r1
    7b22:	bf38      	it	cc
    7b24:	460b      	movcc	r3, r1
    7b26:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
    7b2a:	4359      	muls	r1, r3
		     ctx->config->frequency;
    7b2c:	f855 3b20 	ldr.w	r3, [r5], #32
		} else {
			return (t * to_hz + off) / from_hz;
    7b30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7b34:	681b      	ldr	r3, [r3, #0]
    7b36:	fbb1 f1f3 	udiv	r1, r1, r3
    7b3a:	f240 36e7 	movw	r6, #999	; 0x3e7
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    7b3e:	31c8      	adds	r1, #200	; 0xc8
    7b40:	2700      	movs	r7, #0
    7b42:	fbe0 6701 	umlal	r6, r7, r0, r1
    7b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7b4a:	2300      	movs	r3, #0
    7b4c:	4630      	mov	r0, r6
    7b4e:	4639      	mov	r1, r7
    7b50:	f7f8 ffb2 	bl	ab8 <__aeabi_uldivmod>
    7b54:	4602      	mov	r2, r0
    7b56:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    7b58:	4628      	mov	r0, r5
    7b5a:	f003 fcf7 	bl	b54c <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
    7b5e:	b308      	cbz	r0, 7ba4 <spi_nrfx_transceive+0x2d8>
    7b60:	4b12      	ldr	r3, [pc, #72]	; (7bac <spi_nrfx_transceive+0x2e0>)
    7b62:	4911      	ldr	r1, [pc, #68]	; (7ba8 <spi_nrfx_transceive+0x2dc>)
		LOG_ERR("Timeout waiting for transfer complete");
    7b64:	4821      	ldr	r0, [pc, #132]	; (7bec <spi_nrfx_transceive+0x320>)
    7b66:	1ac9      	subs	r1, r1, r3
    7b68:	08c9      	lsrs	r1, r1, #3
    7b6a:	0189      	lsls	r1, r1, #6
    7b6c:	f041 0101 	orr.w	r1, r1, #1
    7b70:	f014 fa2a 	bl	1bfc8 <log_0>
		return -ETIMEDOUT;
    7b74:	f06f 0573 	mvn.w	r5, #115	; 0x73
    7b78:	e6dc      	b.n	7934 <spi_nrfx_transceive+0x68>
    7b7a:	4b0c      	ldr	r3, [pc, #48]	; (7bac <spi_nrfx_transceive+0x2e0>)
    7b7c:	490a      	ldr	r1, [pc, #40]	; (7ba8 <spi_nrfx_transceive+0x2dc>)
		LOG_INF("CS control inhibited (no GPIO device)");
    7b7e:	481c      	ldr	r0, [pc, #112]	; (7bf0 <spi_nrfx_transceive+0x324>)
    7b80:	1ac9      	subs	r1, r1, r3
    7b82:	08c9      	lsrs	r1, r1, #3
    7b84:	0189      	lsls	r1, r1, #6
    7b86:	f041 0103 	orr.w	r1, r1, #3
    7b8a:	f014 fa1d 	bl	1bfc8 <log_0>
	if (error == 0) {
    7b8e:	e7a4      	b.n	7ada <spi_nrfx_transceive+0x20e>
		ctx->tx_count = 0;
    7b90:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
    7b94:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
    7b98:	e7ac      	b.n	7af4 <spi_nrfx_transceive+0x228>
		ctx->rx_count = 0;
    7b9a:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
    7b9e:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
    7ba2:	e7b1      	b.n	7b08 <spi_nrfx_transceive+0x23c>
	status = ctx->sync_status;
    7ba4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
    7ba6:	e6c5      	b.n	7934 <spi_nrfx_transceive+0x68>
    7ba8:	0001e0b4 	.word	0x0001e0b4
    7bac:	0001e07c 	.word	0x0001e07c
    7bb0:	0001f4d2 	.word	0x0001f4d2
    7bb4:	0001f4f4 	.word	0x0001f4f4
    7bb8:	0001f513 	.word	0x0001f513
    7bbc:	0001f536 	.word	0x0001f536
    7bc0:	0001e847 	.word	0x0001e847
    7bc4:	0001f565 	.word	0x0001f565
    7bc8:	0003d08f 	.word	0x0003d08f
    7bcc:	0007a11f 	.word	0x0007a11f
    7bd0:	000f423f 	.word	0x000f423f
    7bd4:	001e847f 	.word	0x001e847f
    7bd8:	003d08ff 	.word	0x003d08ff
    7bdc:	007a1200 	.word	0x007a1200
    7be0:	00007bf5 	.word	0x00007bf5
    7be4:	0bad0000 	.word	0x0bad0000
    7be8:	0001f596 	.word	0x0001f596
    7bec:	0001f5e3 	.word	0x0001f5e3
    7bf0:	0001f5bd 	.word	0x0001f5bd

00007bf4 <event_handler>:
{
    7bf4:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    7bf6:	7803      	ldrb	r3, [r0, #0]
{
    7bf8:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    7bfa:	2b00      	cmp	r3, #0
    7bfc:	d14e      	bne.n	7c9c <event_handler+0xa8>
	if (!ctx->tx_len) {
    7bfe:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    7c00:	b163      	cbz	r3, 7c1c <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    7c02:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
    7c04:	429a      	cmp	r2, r3
    7c06:	d91d      	bls.n	7c44 <event_handler+0x50>
    7c08:	4925      	ldr	r1, [pc, #148]	; (7ca0 <event_handler+0xac>)
    7c0a:	4b26      	ldr	r3, [pc, #152]	; (7ca4 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    7c0c:	4826      	ldr	r0, [pc, #152]	; (7ca8 <event_handler+0xb4>)
    7c0e:	1ac9      	subs	r1, r1, r3
    7c10:	08c9      	lsrs	r1, r1, #3
    7c12:	0189      	lsls	r1, r1, #6
    7c14:	f041 0101 	orr.w	r1, r1, #1
    7c18:	f014 f9d6 	bl	1bfc8 <log_0>
	if (!ctx->rx_len) {
    7c1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7c1e:	b163      	cbz	r3, 7c3a <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    7c20:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
    7c22:	429a      	cmp	r2, r3
    7c24:	d924      	bls.n	7c70 <event_handler+0x7c>
    7c26:	491e      	ldr	r1, [pc, #120]	; (7ca0 <event_handler+0xac>)
    7c28:	4b1e      	ldr	r3, [pc, #120]	; (7ca4 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    7c2a:	481f      	ldr	r0, [pc, #124]	; (7ca8 <event_handler+0xb4>)
    7c2c:	1ac9      	subs	r1, r1, r3
    7c2e:	08c9      	lsrs	r1, r1, #3
    7c30:	0189      	lsls	r1, r1, #6
    7c32:	f041 0101 	orr.w	r1, r1, #1
    7c36:	f014 f9c7 	bl	1bfc8 <log_0>
		transfer_next_chunk(dev_data->dev);
    7c3a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
    7c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    7c40:	f7ff be06 	b.w	7850 <transfer_next_chunk>
	ctx->tx_len -= len;
    7c44:	1a9b      	subs	r3, r3, r2
    7c46:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
    7c48:	b963      	cbnz	r3, 7c64 <event_handler+0x70>
		ctx->tx_count--;
    7c4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7c4c:	3b01      	subs	r3, #1
    7c4e:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
    7c50:	b163      	cbz	r3, 7c6c <event_handler+0x78>
			ctx->current_tx++;
    7c52:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7c54:	f103 0208 	add.w	r2, r3, #8
    7c58:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7c5a:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    7c5c:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7c5e:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
    7c60:	650b      	str	r3, [r1, #80]	; 0x50
    7c62:	e7db      	b.n	7c1c <event_handler+0x28>
	} else if (ctx->tx_buf) {
    7c64:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    7c66:	2b00      	cmp	r3, #0
    7c68:	d0d8      	beq.n	7c1c <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    7c6a:	4413      	add	r3, r2
    7c6c:	64e3      	str	r3, [r4, #76]	; 0x4c
    7c6e:	e7d5      	b.n	7c1c <event_handler+0x28>
	ctx->rx_len -= len;
    7c70:	1a9b      	subs	r3, r3, r2
    7c72:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
    7c74:	b963      	cbnz	r3, 7c90 <event_handler+0x9c>
		ctx->rx_count--;
    7c76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7c78:	3b01      	subs	r3, #1
    7c7a:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
    7c7c:	b163      	cbz	r3, 7c98 <event_handler+0xa4>
			ctx->current_rx++;
    7c7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7c80:	f103 0208 	add.w	r2, r3, #8
    7c84:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7c86:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    7c88:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7c8a:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
    7c8c:	65a3      	str	r3, [r4, #88]	; 0x58
    7c8e:	e7d4      	b.n	7c3a <event_handler+0x46>
	} else if (ctx->rx_buf) {
    7c90:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7c92:	2b00      	cmp	r3, #0
    7c94:	d0d1      	beq.n	7c3a <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    7c96:	4413      	add	r3, r2
    7c98:	6563      	str	r3, [r4, #84]	; 0x54
    7c9a:	e7ce      	b.n	7c3a <event_handler+0x46>
}
    7c9c:	bd10      	pop	{r4, pc}
    7c9e:	bf00      	nop
    7ca0:	0001e0b4 	.word	0x0001e0b4
    7ca4:	0001e07c 	.word	0x0001e07c
    7ca8:	0001f609 	.word	0x0001f609

00007cac <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
    7cac:	4801      	ldr	r0, [pc, #4]	; (7cb4 <timer_callback+0x8>)
    7cae:	f003 bd65 	b.w	b77c <k_work_submit>
    7cb2:	bf00      	nop
    7cb4:	200000a4 	.word	0x200000a4

00007cb8 <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
    7cb8:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
    7cba:	f014 ff52 	bl	1cb62 <k_uptime_get>
	return (k_uptime_get_32() - saved_time);
    7cbe:	4b02      	ldr	r3, [pc, #8]	; (7cc8 <RtcGetTimerElapsedTime+0x10>)
    7cc0:	681b      	ldr	r3, [r3, #0]
}
    7cc2:	1ac0      	subs	r0, r0, r3
    7cc4:	bd08      	pop	{r3, pc}
    7cc6:	bf00      	nop
    7cc8:	20000d58 	.word	0x20000d58

00007ccc <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
    7ccc:	4801      	ldr	r0, [pc, #4]	; (7cd4 <RtcStopAlarm+0x8>)
    7cce:	f015 bc69 	b.w	1d5a4 <z_impl_k_timer_stop>
    7cd2:	bf00      	nop
    7cd4:	200001f8 	.word	0x200001f8

00007cd8 <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
    7cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7cda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7cde:	f240 34e7 	movw	r4, #999	; 0x3e7
    7ce2:	2500      	movs	r5, #0
    7ce4:	fbe1 4500 	umlal	r4, r5, r1, r0
    7ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7cec:	2300      	movs	r3, #0
    7cee:	4620      	mov	r0, r4
    7cf0:	4629      	mov	r1, r5
    7cf2:	f7f8 fee1 	bl	ab8 <__aeabi_uldivmod>
    7cf6:	4602      	mov	r2, r0
    7cf8:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    7cfa:	2100      	movs	r1, #0
    7cfc:	2000      	movs	r0, #0
    7cfe:	e9cd 0100 	strd	r0, r1, [sp]
    7d02:	4802      	ldr	r0, [pc, #8]	; (7d0c <RtcSetAlarm+0x34>)
    7d04:	f004 faaa 	bl	c25c <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
    7d08:	b003      	add	sp, #12
    7d0a:	bd30      	pop	{r4, r5, pc}
    7d0c:	200001f8 	.word	0x200001f8

00007d10 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
    7d10:	b508      	push	{r3, lr}
    7d12:	f014 ff26 	bl	1cb62 <k_uptime_get>
	saved_time = k_uptime_get_32();
    7d16:	4b01      	ldr	r3, [pc, #4]	; (7d1c <RtcSetTimerContext+0xc>)
    7d18:	6018      	str	r0, [r3, #0]

	return saved_time;
}
    7d1a:	bd08      	pop	{r3, pc}
    7d1c:	20000d58 	.word	0x20000d58

00007d20 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
    7d20:	4b01      	ldr	r3, [pc, #4]	; (7d28 <RtcGetTimerContext+0x8>)
    7d22:	6818      	ldr	r0, [r3, #0]
    7d24:	4770      	bx	lr
    7d26:	bf00      	nop
    7d28:	20000d58 	.word	0x20000d58

00007d2c <modem_release.constprop.0>:
 * @param data common sx12xx data struct
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
    7d2c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7d2e:	4e13      	ldr	r6, [pc, #76]	; (7d7c <modem_release.constprop.0+0x50>)
    7d30:	f3bf 8f5b 	dmb	ish
    7d34:	f106 0434 	add.w	r4, r6, #52	; 0x34
    7d38:	2302      	movs	r3, #2
    7d3a:	e854 2f00 	ldrex	r2, [r4]
    7d3e:	2a01      	cmp	r2, #1
    7d40:	d103      	bne.n	7d4a <modem_release.constprop.0+0x1e>
    7d42:	e844 3100 	strex	r1, r3, [r4]
    7d46:	2900      	cmp	r1, #0
    7d48:	d1f7      	bne.n	7d3a <modem_release.constprop.0+0xe>
    7d4a:	f3bf 8f5b 	dmb	ish
    7d4e:	bf0c      	ite	eq
    7d50:	2001      	moveq	r0, #1
    7d52:	2000      	movne	r0, #0
    7d54:	f04f 0500 	mov.w	r5, #0
{
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
    7d58:	d10e      	bne.n	7d78 <modem_release.constprop.0+0x4c>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
    7d5a:	4b09      	ldr	r3, [pc, #36]	; (7d80 <modem_release.constprop.0+0x54>)
    7d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7d5e:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
    7d60:	6035      	str	r5, [r6, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7d62:	f3bf 8f5b 	dmb	ish
    7d66:	e854 3f00 	ldrex	r3, [r4]
    7d6a:	e844 5200 	strex	r2, r5, [r4]
    7d6e:	2a00      	cmp	r2, #0
    7d70:	d1f9      	bne.n	7d66 <modem_release.constprop.0+0x3a>
    7d72:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
    7d76:	2001      	movs	r0, #1
}
    7d78:	bd70      	pop	{r4, r5, r6, pc}
    7d7a:	bf00      	nop
    7d7c:	20000d5c 	.word	0x20000d5c
    7d80:	0001e69c 	.word	0x0001e69c

00007d84 <sx12xx_ev_tx_done>:
	k_poll_signal_raise(sig, 0);
}

static void sx12xx_ev_tx_done(void)
{
	struct k_poll_signal *sig = dev_data.operation_done;
    7d84:	4b06      	ldr	r3, [pc, #24]	; (7da0 <sx12xx_ev_tx_done+0x1c>)
{
    7d86:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
    7d88:	681c      	ldr	r4, [r3, #0]

	if (modem_release(&dev_data)) {
    7d8a:	f7ff ffcf 	bl	7d2c <modem_release.constprop.0>
    7d8e:	b130      	cbz	r0, 7d9e <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
    7d90:	b12c      	cbz	r4, 7d9e <sx12xx_ev_tx_done+0x1a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    7d92:	2100      	movs	r1, #0
    7d94:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
    7d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d9a:	f004 bb1b 	b.w	c3d4 <z_impl_k_poll_signal_raise>
    7d9e:	bd10      	pop	{r4, pc}
    7da0:	20000d5c 	.word	0x20000d5c

00007da4 <sx12xx_ev_rx_done>:
{
    7da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
    7da8:	4c1d      	ldr	r4, [pc, #116]	; (7e20 <sx12xx_ev_rx_done+0x7c>)
    7daa:	4625      	mov	r5, r4
{
    7dac:	461e      	mov	r6, r3
    7dae:	4617      	mov	r7, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7db0:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
    7db2:	f855 8b34 	ldr.w	r8, [r5], #52
    7db6:	f3bf 8f5b 	dmb	ish
    7dba:	e855 2f00 	ldrex	r2, [r5]
    7dbe:	2a01      	cmp	r2, #1
    7dc0:	d104      	bne.n	7dcc <sx12xx_ev_rx_done+0x28>
    7dc2:	e845 3c00 	strex	ip, r3, [r5]
    7dc6:	f1bc 0f00 	cmp.w	ip, #0
    7dca:	d1f6      	bne.n	7dba <sx12xx_ev_rx_done+0x16>
    7dcc:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
    7dd0:	d124      	bne.n	7e1c <sx12xx_ev_rx_done+0x78>
	if (size < *dev_data.rx_params.size) {
    7dd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7dd4:	781a      	ldrb	r2, [r3, #0]
    7dd6:	428a      	cmp	r2, r1
		*dev_data.rx_params.size = size;
    7dd8:	bf88      	it	hi
    7dda:	7019      	strbhi	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
    7ddc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7dde:	4601      	mov	r1, r0
    7de0:	781a      	ldrb	r2, [r3, #0]
    7de2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7de4:	f015 fd54 	bl	1d890 <memcpy>
	if (dev_data.rx_params.rssi) {
    7de8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    7dea:	b103      	cbz	r3, 7dee <sx12xx_ev_rx_done+0x4a>
		*dev_data.rx_params.rssi = rssi;
    7dec:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
    7dee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7df0:	b103      	cbz	r3, 7df4 <sx12xx_ev_rx_done+0x50>
		*dev_data.rx_params.snr = snr;
    7df2:	701e      	strb	r6, [r3, #0]
	Radio.Sleep();
    7df4:	4b0b      	ldr	r3, [pc, #44]	; (7e24 <sx12xx_ev_rx_done+0x80>)
    7df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7df8:	4798      	blx	r3
	dev_data.operation_done = NULL;
    7dfa:	2100      	movs	r1, #0
    7dfc:	6021      	str	r1, [r4, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7dfe:	f3bf 8f5b 	dmb	ish
    7e02:	e855 3f00 	ldrex	r3, [r5]
    7e06:	e845 1200 	strex	r2, r1, [r5]
    7e0a:	2a00      	cmp	r2, #0
    7e0c:	d1f9      	bne.n	7e02 <sx12xx_ev_rx_done+0x5e>
    7e0e:	f3bf 8f5b 	dmb	ish
    7e12:	4640      	mov	r0, r8
}
    7e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7e18:	f004 badc 	b.w	c3d4 <z_impl_k_poll_signal_raise>
    7e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e20:	20000d5c 	.word	0x20000d5c
    7e24:	0001e69c 	.word	0x0001e69c

00007e28 <__sx12xx_configure_pin>:
{
    7e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e2a:	4607      	mov	r7, r0
    7e2c:	460d      	mov	r5, r1
    7e2e:	4616      	mov	r6, r2
    7e30:	461c      	mov	r4, r3
    7e32:	4608      	mov	r0, r1
    7e34:	f003 f828 	bl	ae88 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
    7e38:	6038      	str	r0, [r7, #0]
	if (!(*dev)) {
    7e3a:	b978      	cbnz	r0, 7e5c <__sx12xx_configure_pin+0x34>
    7e3c:	4b1e      	ldr	r3, [pc, #120]	; (7eb8 <__sx12xx_configure_pin+0x90>)
    7e3e:	4a1f      	ldr	r2, [pc, #124]	; (7ebc <__sx12xx_configure_pin+0x94>)
		LOG_ERR("Cannot get pointer to %s device", controller);
    7e40:	481f      	ldr	r0, [pc, #124]	; (7ec0 <__sx12xx_configure_pin+0x98>)
    7e42:	1ad2      	subs	r2, r2, r3
    7e44:	08d2      	lsrs	r2, r2, #3
    7e46:	0192      	lsls	r2, r2, #6
    7e48:	f042 0201 	orr.w	r2, r2, #1
    7e4c:	4629      	mov	r1, r5
    7e4e:	f014 f8c8 	bl	1bfe2 <log_1>
		return -EIO;
    7e52:	f06f 0704 	mvn.w	r7, #4
}
    7e56:	4638      	mov	r0, r7
    7e58:	b003      	add	sp, #12
    7e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    7e5c:	04e2      	lsls	r2, r4, #19
	const struct gpio_driver_api *api =
    7e5e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
    7e62:	6907      	ldr	r7, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    7e64:	d506      	bpl.n	7e74 <__sx12xx_configure_pin+0x4c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    7e66:	f414 6f40 	tst.w	r4, #3072	; 0xc00
    7e6a:	d003      	beq.n	7e74 <__sx12xx_configure_pin+0x4c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7e6c:	07e3      	lsls	r3, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7e6e:	bf48      	it	mi
    7e70:	f484 6440 	eormi.w	r4, r4, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7e74:	683b      	ldr	r3, [r7, #0]
    7e76:	2101      	movs	r1, #1
    7e78:	40b1      	lsls	r1, r6
    7e7a:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7e7e:	07e4      	lsls	r4, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7e80:	bf4c      	ite	mi
    7e82:	430b      	orrmi	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7e84:	438b      	bicpl	r3, r1
    7e86:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
    7e88:	4631      	mov	r1, r6
    7e8a:	f8dc 3000 	ldr.w	r3, [ip]
    7e8e:	4798      	blx	r3
	if (err) {
    7e90:	4607      	mov	r7, r0
    7e92:	2800      	cmp	r0, #0
    7e94:	d0df      	beq.n	7e56 <__sx12xx_configure_pin+0x2e>
    7e96:	4b08      	ldr	r3, [pc, #32]	; (7eb8 <__sx12xx_configure_pin+0x90>)
    7e98:	4c08      	ldr	r4, [pc, #32]	; (7ebc <__sx12xx_configure_pin+0x94>)
    7e9a:	1ae4      	subs	r4, r4, r3
    7e9c:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
    7e9e:	01a4      	lsls	r4, r4, #6
    7ea0:	f044 0401 	orr.w	r4, r4, #1
    7ea4:	4603      	mov	r3, r0
    7ea6:	f8ad 4000 	strh.w	r4, [sp]
    7eaa:	4806      	ldr	r0, [pc, #24]	; (7ec4 <__sx12xx_configure_pin+0x9c>)
    7eac:	4632      	mov	r2, r6
    7eae:	4629      	mov	r1, r5
    7eb0:	f014 f8c4 	bl	1c03c <log_3>
		return err;
    7eb4:	e7cf      	b.n	7e56 <__sx12xx_configure_pin+0x2e>
    7eb6:	bf00      	nop
    7eb8:	0001e07c 	.word	0x0001e07c
    7ebc:	0001e0c4 	.word	0x0001e0c4
    7ec0:	0001f63a 	.word	0x0001f63a
    7ec4:	0001f65a 	.word	0x0001f65a

00007ec8 <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
    7ec8:	b570      	push	{r4, r5, r6, lr}
    7eca:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7ecc:	4910      	ldr	r1, [pc, #64]	; (7f10 <sx12xx_lora_send_async+0x48>)
    7ece:	f3bf 8f5b 	dmb	ish
    7ed2:	f101 0434 	add.w	r4, r1, #52	; 0x34
    7ed6:	2001      	movs	r0, #1
    7ed8:	e854 6f00 	ldrex	r6, [r4]
    7edc:	2e00      	cmp	r6, #0
    7ede:	d104      	bne.n	7eea <sx12xx_lora_send_async+0x22>
    7ee0:	e844 0c00 	strex	ip, r0, [r4]
    7ee4:	f1bc 0f00 	cmp.w	ip, #0
    7ee8:	d1f6      	bne.n	7ed8 <sx12xx_lora_send_async+0x10>
    7eea:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
    7eee:	d10b      	bne.n	7f08 <sx12xx_lora_send_async+0x40>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    7ef0:	4e08      	ldr	r6, [pc, #32]	; (7f14 <sx12xx_lora_send_async+0x4c>)
	dev_data.operation_done = async;
    7ef2:	600b      	str	r3, [r1, #0]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    7ef4:	b2d4      	uxtb	r4, r2
    7ef6:	6d73      	ldr	r3, [r6, #84]	; 0x54
    7ef8:	4621      	mov	r1, r4
    7efa:	4798      	blx	r3

	Radio.Send(data, data_len);
    7efc:	4628      	mov	r0, r5
    7efe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7f00:	4621      	mov	r1, r4
    7f02:	4798      	blx	r3

	return 0;
    7f04:	2000      	movs	r0, #0
}
    7f06:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    7f08:	f06f 000f 	mvn.w	r0, #15
    7f0c:	e7fb      	b.n	7f06 <sx12xx_lora_send_async+0x3e>
    7f0e:	bf00      	nop
    7f10:	20000d5c 	.word	0x20000d5c
    7f14:	0001e69c 	.word	0x0001e69c

00007f18 <sx12xx_lora_send>:
{
    7f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    7f1c:	2700      	movs	r7, #0
{
    7f1e:	b08f      	sub	sp, #60	; 0x3c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    7f20:	ab05      	add	r3, sp, #20
	if (!dev_data.tx_cfg.frequency) {
    7f22:	4e31      	ldr	r6, [pc, #196]	; (7fe8 <sx12xx_lora_send+0xd0>)
{
    7f24:	4680      	mov	r8, r0
    7f26:	4689      	mov	r9, r1
    7f28:	4614      	mov	r4, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    7f2a:	4639      	mov	r1, r7
    7f2c:	2210      	movs	r2, #16
    7f2e:	a809      	add	r0, sp, #36	; 0x24
    7f30:	2501      	movs	r5, #1
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    7f32:	e9cd 3305 	strd	r3, r3, [sp, #20]
    7f36:	e9cd 7707 	strd	r7, r7, [sp, #28]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    7f3a:	f015 fce4 	bl	1d906 <memset>
    7f3e:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
	if (!dev_data.tx_cfg.frequency) {
    7f42:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    7f44:	ab05      	add	r3, sp, #20
    7f46:	930d      	str	r3, [sp, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
    7f48:	2a00      	cmp	r2, #0
    7f4a:	d049      	beq.n	7fe0 <sx12xx_lora_send+0xc8>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
    7f4c:	4622      	mov	r2, r4
    7f4e:	4649      	mov	r1, r9
    7f50:	4640      	mov	r0, r8
    7f52:	f7ff ffb9 	bl	7ec8 <sx12xx_lora_send_async>
	if (ret < 0) {
    7f56:	2800      	cmp	r0, #0
    7f58:	db28      	blt.n	7fac <sx12xx_lora_send+0x94>
	air_time = Radio.TimeOnAir(MODEM_LORA,
    7f5a:	b2e4      	uxtb	r4, r4
    7f5c:	e9cd 7401 	strd	r7, r4, [sp, #4]
    7f60:	9503      	str	r5, [sp, #12]
    7f62:	8e33      	ldrh	r3, [r6, #48]	; 0x30
    7f64:	4c21      	ldr	r4, [pc, #132]	; (7fec <sx12xx_lora_send+0xd4>)
    7f66:	9300      	str	r3, [sp, #0]
    7f68:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
    7f6c:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
    7f70:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
    7f74:	6a64      	ldr	r4, [r4, #36]	; 0x24
    7f76:	4628      	mov	r0, r5
    7f78:	47a0      	blx	r4
    7f7a:	f240 36e7 	movw	r6, #999	; 0x3e7
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
    7f7e:	fa00 f105 	lsl.w	r1, r0, r5
    7f82:	2700      	movs	r7, #0
    7f84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7f88:	fbe0 6701 	umlal	r6, r7, r0, r1
    7f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7f90:	2300      	movs	r3, #0
    7f92:	4630      	mov	r0, r6
    7f94:	4639      	mov	r1, r7
    7f96:	f7f8 fd8f 	bl	ab8 <__aeabi_uldivmod>
    7f9a:	4602      	mov	r2, r0
    7f9c:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
    7f9e:	4629      	mov	r1, r5
    7fa0:	a809      	add	r0, sp, #36	; 0x24
    7fa2:	f004 f9bb 	bl	c31c <z_impl_k_poll>
	if (ret < 0) {
    7fa6:	2800      	cmp	r0, #0
    7fa8:	db03      	blt.n	7fb2 <sx12xx_lora_send+0x9a>
	return 0;
    7faa:	2000      	movs	r0, #0
}
    7fac:	b00f      	add	sp, #60	; 0x3c
    7fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7fb2:	4b0f      	ldr	r3, [pc, #60]	; (7ff0 <sx12xx_lora_send+0xd8>)
    7fb4:	490f      	ldr	r1, [pc, #60]	; (7ff4 <sx12xx_lora_send+0xdc>)
		LOG_ERR("Packet transmission failed!");
    7fb6:	4810      	ldr	r0, [pc, #64]	; (7ff8 <sx12xx_lora_send+0xe0>)
    7fb8:	1ac9      	subs	r1, r1, r3
    7fba:	08c9      	lsrs	r1, r1, #3
    7fbc:	0189      	lsls	r1, r1, #6
    7fbe:	f041 0101 	orr.w	r1, r1, #1
    7fc2:	f014 f801 	bl	1bfc8 <log_0>
		if (!modem_release(&dev_data)) {
    7fc6:	f7ff feb1 	bl	7d2c <modem_release.constprop.0>
    7fca:	2800      	cmp	r0, #0
    7fcc:	d1ed      	bne.n	7faa <sx12xx_lora_send+0x92>
    7fce:	f04f 32ff 	mov.w	r2, #4294967295
    7fd2:	f04f 33ff 	mov.w	r3, #4294967295
    7fd6:	4629      	mov	r1, r5
    7fd8:	a809      	add	r0, sp, #36	; 0x24
    7fda:	f004 f99f 	bl	c31c <z_impl_k_poll>
    7fde:	e7e4      	b.n	7faa <sx12xx_lora_send+0x92>
		return -EINVAL;
    7fe0:	f06f 0015 	mvn.w	r0, #21
    7fe4:	e7e2      	b.n	7fac <sx12xx_lora_send+0x94>
    7fe6:	bf00      	nop
    7fe8:	20000d5c 	.word	0x20000d5c
    7fec:	0001e69c 	.word	0x0001e69c
    7ff0:	0001e07c 	.word	0x0001e07c
    7ff4:	0001e0c4 	.word	0x0001e0c4
    7ff8:	0001f67a 	.word	0x0001f67a

00007ffc <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
    7ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ffe:	b08d      	sub	sp, #52	; 0x34
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    8000:	2400      	movs	r4, #0
{
    8002:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    8006:	ae03      	add	r6, sp, #12
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    8008:	2210      	movs	r2, #16
{
    800a:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    800c:	a807      	add	r0, sp, #28
    800e:	4621      	mov	r1, r4
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    8010:	e9cd 6603 	strd	r6, r6, [sp, #12]
    8014:	e9cd 4405 	strd	r4, r4, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    8018:	f015 fc75 	bl	1d906 <memset>
    801c:	4b25      	ldr	r3, [pc, #148]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    801e:	960b      	str	r6, [sp, #44]	; 0x2c
    8020:	2501      	movs	r5, #1
    8022:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
    8026:	f103 0234 	add.w	r2, r3, #52	; 0x34
    802a:	f3bf 8f5b 	dmb	ish
    802e:	e852 1f00 	ldrex	r1, [r2]
    8032:	42a1      	cmp	r1, r4
    8034:	d103      	bne.n	803e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e>
    8036:	e842 5000 	strex	r0, r5, [r2]
    803a:	2800      	cmp	r0, #0
    803c:	d1f7      	bne.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    803e:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
    8042:	d133      	bne.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>

	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
    8044:	f10d 0207 	add.w	r2, sp, #7
	dev_data.operation_done = &done;
    8048:	601e      	str	r6, [r3, #0]
	dev_data.rx_params.size = &size;
    804a:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    804c:	4e1a      	ldr	r6, [pc, #104]	; (80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>)
	dev_data.rx_params.rssi = rssi;
    804e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8050:	641a      	str	r2, [r3, #64]	; 0x40
	dev_data.rx_params.snr = snr;
    8052:	9a15      	ldr	r2, [sp, #84]	; 0x54
    8054:	645a      	str	r2, [r3, #68]	; 0x44
	dev_data.rx_params.buf = data;
    8056:	639f      	str	r7, [r3, #56]	; 0x38
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    8058:	21ff      	movs	r1, #255	; 0xff
    805a:	6d73      	ldr	r3, [r6, #84]	; 0x54
    805c:	4628      	mov	r0, r5
    805e:	4798      	blx	r3
	Radio.Rx(0);
    8060:	6b73      	ldr	r3, [r6, #52]	; 0x34
    8062:	4620      	mov	r0, r4
    8064:	4798      	blx	r3
    8066:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    806a:	4629      	mov	r1, r5
    806c:	a807      	add	r0, sp, #28
    806e:	f004 f955 	bl	c31c <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
    8072:	1e04      	subs	r4, r0, #0
    8074:	da0a      	bge.n	808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>
		if (!modem_release(&dev_data)) {
    8076:	f7ff fe59 	bl	7d2c <modem_release.constprop.0>
    807a:	b950      	cbnz	r0, 8092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
    807c:	f04f 32ff 	mov.w	r2, #4294967295
    8080:	f04f 33ff 	mov.w	r3, #4294967295
    8084:	4629      	mov	r1, r5
    8086:	a807      	add	r0, sp, #28
    8088:	f004 f948 	bl	c31c <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
    808c:	f89d 4007 	ldrb.w	r4, [sp, #7]
    8090:	e009      	b.n	80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
    8092:	490a      	ldr	r1, [pc, #40]	; (80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>)
    8094:	4b0a      	ldr	r3, [pc, #40]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
		LOG_INF("Receive timeout");
    8096:	480b      	ldr	r0, [pc, #44]	; (80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    8098:	1ac9      	subs	r1, r1, r3
    809a:	08c9      	lsrs	r1, r1, #3
    809c:	0189      	lsls	r1, r1, #6
    809e:	f041 0103 	orr.w	r1, r1, #3
    80a2:	f013 ff91 	bl	1bfc8 <log_0>
}
    80a6:	4620      	mov	r0, r4
    80a8:	b00d      	add	sp, #52	; 0x34
    80aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
    80ac:	f06f 040f 	mvn.w	r4, #15
    80b0:	e7f9      	b.n	80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
    80b2:	bf00      	nop
    80b4:	20000d5c 	.word	0x20000d5c
    80b8:	0001e69c 	.word	0x0001e69c
    80bc:	0001e0c4 	.word	0x0001e0c4
    80c0:	0001e07c 	.word	0x0001e07c
    80c4:	0001f696 	.word	0x0001f696

000080c8 <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
    80c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    80ca:	4d27      	ldr	r5, [pc, #156]	; (8168 <sx12xx_lora_config+0xa0>)
    80cc:	f3bf 8f5b 	dmb	ish
    80d0:	b08b      	sub	sp, #44	; 0x2c
    80d2:	460c      	mov	r4, r1
    80d4:	2601      	movs	r6, #1
    80d6:	e855 3f00 	ldrex	r3, [r5]
    80da:	2b00      	cmp	r3, #0
    80dc:	d103      	bne.n	80e6 <sx12xx_lora_config+0x1e>
    80de:	e845 6200 	strex	r2, r6, [r5]
    80e2:	2a00      	cmp	r2, #0
    80e4:	d1f7      	bne.n	80d6 <sx12xx_lora_config+0xe>
    80e6:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
    80ea:	d139      	bne.n	8160 <sx12xx_lora_config+0x98>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
    80ec:	4f1f      	ldr	r7, [pc, #124]	; (816c <sx12xx_lora_config+0xa4>)
    80ee:	6820      	ldr	r0, [r4, #0]
    80f0:	68fb      	ldr	r3, [r7, #12]
    80f2:	4798      	blx	r3

	if (config->tx) {
    80f4:	7ae3      	ldrb	r3, [r4, #11]
    80f6:	b303      	cbz	r3, 813a <sx12xx_lora_config+0x72>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
    80f8:	6820      	ldr	r0, [r4, #0]
    80fa:	6861      	ldr	r1, [r4, #4]
    80fc:	f1a5 030c 	sub.w	r3, r5, #12
    8100:	c303      	stmia	r3!, {r0, r1}
    8102:	68a0      	ldr	r0, [r4, #8]
    8104:	6018      	str	r0, [r3, #0]
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
    8106:	2200      	movs	r2, #0
    8108:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
    810c:	e9cd 2307 	strd	r2, r3, [sp, #28]
    8110:	8923      	ldrh	r3, [r4, #8]
    8112:	9302      	str	r3, [sp, #8]
    8114:	79a3      	ldrb	r3, [r4, #6]
    8116:	9301      	str	r3, [sp, #4]
    8118:	7963      	ldrb	r3, [r4, #5]
    811a:	9300      	str	r3, [sp, #0]
    811c:	e9cd 2205 	strd	r2, r2, [sp, #20]
    8120:	e9cd 2603 	strd	r2, r6, [sp, #12]
    8124:	69fd      	ldr	r5, [r7, #28]
    8126:	7923      	ldrb	r3, [r4, #4]
    8128:	f994 100a 	ldrsb.w	r1, [r4, #10]
    812c:	4630      	mov	r0, r6
    812e:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
    8130:	f7ff fdfc 	bl	7d2c <modem_release.constprop.0>
	return 0;
    8134:	2000      	movs	r0, #0
}
    8136:	b00b      	add	sp, #44	; 0x2c
    8138:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
    813a:	220a      	movs	r2, #10
    813c:	9202      	str	r2, [sp, #8]
    813e:	8922      	ldrh	r2, [r4, #8]
    8140:	9303      	str	r3, [sp, #12]
    8142:	e9cd 3200 	strd	r3, r2, [sp]
    8146:	e9cd 3608 	strd	r3, r6, [sp, #32]
    814a:	e9cd 3306 	strd	r3, r3, [sp, #24]
    814e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    8152:	69bd      	ldr	r5, [r7, #24]
    8154:	79a3      	ldrb	r3, [r4, #6]
    8156:	7962      	ldrb	r2, [r4, #5]
    8158:	7921      	ldrb	r1, [r4, #4]
    815a:	4630      	mov	r0, r6
    815c:	47a8      	blx	r5
    815e:	e7e7      	b.n	8130 <sx12xx_lora_config+0x68>
		return -EBUSY;
    8160:	f06f 000f 	mvn.w	r0, #15
    8164:	e7e7      	b.n	8136 <sx12xx_lora_config+0x6e>
    8166:	bf00      	nop
    8168:	20000d90 	.word	0x20000d90
    816c:	0001e69c 	.word	0x0001e69c

00008170 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
    8170:	b538      	push	{r3, r4, r5, lr}
    8172:	4608      	mov	r0, r1
    8174:	4611      	mov	r1, r2
    8176:	461a      	mov	r2, r3
    8178:	4b0b      	ldr	r3, [pc, #44]	; (81a8 <sx12xx_lora_test_cw+0x38>)
    817a:	f3bf 8f5b 	dmb	ish
    817e:	2401      	movs	r4, #1
    8180:	e853 5f00 	ldrex	r5, [r3]
    8184:	2d00      	cmp	r5, #0
    8186:	d104      	bne.n	8192 <sx12xx_lora_test_cw+0x22>
    8188:	e843 4c00 	strex	ip, r4, [r3]
    818c:	f1bc 0f00 	cmp.w	ip, #0
    8190:	d1f6      	bne.n	8180 <sx12xx_lora_test_cw+0x10>
    8192:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
    8196:	d104      	bne.n	81a2 <sx12xx_lora_test_cw+0x32>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
    8198:	4b04      	ldr	r3, [pc, #16]	; (81ac <sx12xx_lora_test_cw+0x3c>)
    819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    819c:	4798      	blx	r3
	return 0;
    819e:	2000      	movs	r0, #0
}
    81a0:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    81a2:	f06f 000f 	mvn.w	r0, #15
    81a6:	e7fb      	b.n	81a0 <sx12xx_lora_test_cw+0x30>
    81a8:	20000d90 	.word	0x20000d90
    81ac:	0001e69c 	.word	0x0001e69c

000081b0 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
    81b0:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    81b2:	480d      	ldr	r0, [pc, #52]	; (81e8 <sx12xx_init+0x38>)
    81b4:	f3bf 8f5b 	dmb	ish
    81b8:	f100 0334 	add.w	r3, r0, #52	; 0x34
    81bc:	2400      	movs	r4, #0
    81be:	e853 2f00 	ldrex	r2, [r3]
    81c2:	e843 4100 	strex	r1, r4, [r3]
    81c6:	2900      	cmp	r1, #0
    81c8:	d1f9      	bne.n	81be <sx12xx_init+0xe>
    81ca:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
    81ce:	4d07      	ldr	r5, [pc, #28]	; (81ec <sx12xx_init+0x3c>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
    81d0:	4b07      	ldr	r3, [pc, #28]	; (81f0 <sx12xx_init+0x40>)
    81d2:	6043      	str	r3, [r0, #4]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
    81d4:	4b07      	ldr	r3, [pc, #28]	; (81f4 <sx12xx_init+0x44>)
    81d6:	60c3      	str	r3, [r0, #12]
	Radio.Init(&dev_data.events);
    81d8:	682b      	ldr	r3, [r5, #0]
    81da:	3004      	adds	r0, #4
    81dc:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
    81de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    81e0:	4798      	blx	r3

	return 0;
}
    81e2:	4620      	mov	r0, r4
    81e4:	bd38      	pop	{r3, r4, r5, pc}
    81e6:	bf00      	nop
    81e8:	20000d5c 	.word	0x20000d5c
    81ec:	0001e69c 	.word	0x0001e69c
    81f0:	00007d85 	.word	0x00007d85
    81f4:	00007da5 	.word	0x00007da5

000081f8 <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
    81f8:	4b03      	ldr	r3, [pc, #12]	; (8208 <sx127x_dio_work_handle+0x10>)
    81fa:	1ac0      	subs	r0, r0, r3
    81fc:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
    81fe:	4b03      	ldr	r3, [pc, #12]	; (820c <sx127x_dio_work_handle+0x14>)
    8200:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8204:	2000      	movs	r0, #0
    8206:	4718      	bx	r3
    8208:	20000dd8 	.word	0x20000dd8
    820c:	200000b4 	.word	0x200000b4

00008210 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
    8210:	b570      	push	{r4, r5, r6, lr}
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == dev_data.dio_dev[i] &&
    8212:	4c0f      	ldr	r4, [pc, #60]	; (8250 <sx127x_irq_callback+0x40>)
    8214:	6963      	ldr	r3, [r4, #20]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    8216:	2a00      	cmp	r2, #0
    8218:	fa92 f5a2 	rbit	r5, r2
    821c:	fab5 f585 	clz	r5, r5
    8220:	bf08      	it	eq
    8222:	f04f 35ff 	moveq.w	r5, #4294967295
    8226:	4298      	cmp	r0, r3
{
    8228:	4606      	mov	r6, r0
		if (dev == dev_data.dio_dev[i] &&
    822a:	d105      	bne.n	8238 <sx127x_irq_callback+0x28>
    822c:	2d0a      	cmp	r5, #10
    822e:	d103      	bne.n	8238 <sx127x_irq_callback+0x28>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
    8230:	f104 001c 	add.w	r0, r4, #28
    8234:	f003 faa2 	bl	b77c <k_work_submit>
		if (dev == dev_data.dio_dev[i] &&
    8238:	69a3      	ldr	r3, [r4, #24]
    823a:	429e      	cmp	r6, r3
    823c:	d106      	bne.n	824c <sx127x_irq_callback+0x3c>
    823e:	2d0a      	cmp	r5, #10
    8240:	d104      	bne.n	824c <sx127x_irq_callback+0x3c>
		}
	}
}
    8242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_submit(&dev_data.dio_work[i]);
    8246:	4803      	ldr	r0, [pc, #12]	; (8254 <sx127x_irq_callback+0x44>)
    8248:	f003 ba98 	b.w	b77c <k_work_submit>
}
    824c:	bd70      	pop	{r4, r5, r6, pc}
    824e:	bf00      	nop
    8250:	20000dbc 	.word	0x20000dbc
    8254:	20000de8 	.word	0x20000de8

00008258 <SX1276Reset>:
{
    8258:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
    825a:	4c09      	ldr	r4, [pc, #36]	; (8280 <SX1276Reset+0x28>)
    825c:	2101      	movs	r1, #1
    825e:	6820      	ldr	r0, [r4, #0]
    8260:	f014 fcba 	bl	1cbd8 <gpio_pin_set.constprop.0>
	return z_impl_k_sleep(timeout);
    8264:	2100      	movs	r1, #0
    8266:	2021      	movs	r0, #33	; 0x21
    8268:	f003 fdb0 	bl	bdcc <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
    826c:	6820      	ldr	r0, [r4, #0]
    826e:	2100      	movs	r1, #0
    8270:	f014 fcb2 	bl	1cbd8 <gpio_pin_set.constprop.0>
    8274:	20c5      	movs	r0, #197	; 0xc5
}
    8276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    827a:	2100      	movs	r1, #0
    827c:	f003 bda6 	b.w	bdcc <z_impl_k_sleep>
    8280:	20000dbc 	.word	0x20000dbc

00008284 <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
    8284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8288:	4c3e      	ldr	r4, [pc, #248]	; (8384 <SX1276IoIrqInit+0x100>)
    828a:	4e3f      	ldr	r6, [pc, #252]	; (8388 <SX1276IoIrqInit+0x104>)
    828c:	4d3f      	ldr	r5, [pc, #252]	; (838c <SX1276IoIrqInit+0x108>)
    828e:	4680      	mov	r8, r0
    8290:	f1a0 0a04 	sub.w	sl, r0, #4
    8294:	f1a4 0914 	sub.w	r9, r4, #20
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (!irqHandlers[i]) {
    8298:	f8cd a004 	str.w	sl, [sp, #4]
    829c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    82a0:	2b00      	cmp	r3, #0
    82a2:	d061      	beq.n	8368 <SX1276IoIrqInit+0xe4>
			continue;
		}

		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
    82a4:	682f      	ldr	r7, [r5, #0]
    82a6:	4638      	mov	r0, r7
    82a8:	f002 fdee 	bl	ae88 <z_impl_device_get_binding>
    82ac:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
    82ae:	b968      	cbnz	r0, 82cc <SX1276IoIrqInit+0x48>
    82b0:	4b37      	ldr	r3, [pc, #220]	; (8390 <SX1276IoIrqInit+0x10c>)
    82b2:	4a38      	ldr	r2, [pc, #224]	; (8394 <SX1276IoIrqInit+0x110>)
			LOG_ERR("Cannot get pointer to %s device",
    82b4:	4838      	ldr	r0, [pc, #224]	; (8398 <SX1276IoIrqInit+0x114>)
    82b6:	1ad2      	subs	r2, r2, r3
    82b8:	08d2      	lsrs	r2, r2, #3
    82ba:	0192      	lsls	r2, r2, #6
    82bc:	f042 0201 	orr.w	r2, r2, #1
    82c0:	4639      	mov	r1, r7
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
					     sx127x_dios[i].pin,
					     GPIO_INT_EDGE_TO_ACTIVE);
	}

}
    82c2:	b003      	add	sp, #12
    82c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot get pointer to %s device",
    82c8:	f013 be8b 	b.w	1bfe2 <log_1>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
    82cc:	f109 001c 	add.w	r0, r9, #28
    82d0:	4932      	ldr	r1, [pc, #200]	; (839c <SX1276IoIrqInit+0x118>)
    82d2:	f014 ffe3 	bl	1d29c <k_work_init>
				   | sx127x_dios[i].flags);
    82d6:	796b      	ldrb	r3, [r5, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
    82d8:	6820      	ldr	r0, [r4, #0]
    82da:	792f      	ldrb	r7, [r5, #4]
    82dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    82e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	struct gpio_driver_data *data =
    82e4:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    82e8:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    82ec:	f8dc 1000 	ldr.w	r1, [ip]
    82f0:	f013 0f01 	tst.w	r3, #1
    82f4:	f04f 0301 	mov.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    82f8:	fa03 f307 	lsl.w	r3, r3, r7
    82fc:	bf14      	ite	ne
    82fe:	430b      	orrne	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8300:	ea21 0303 	biceq.w	r3, r1, r3
    8304:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
    8308:	4639      	mov	r1, r7
    830a:	f8de 3000 	ldr.w	r3, [lr]
    830e:	4798      	blx	r3
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    8310:	4b23      	ldr	r3, [pc, #140]	; (83a0 <SX1276IoIrqInit+0x11c>)
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
    8312:	6820      	ldr	r0, [r4, #0]
				   BIT(sx127x_dios[i].pin));
    8314:	2201      	movs	r2, #1
    8316:	fa02 fb07 	lsl.w	fp, r2, r7
	callback->pin_mask = pin_mask;
    831a:	e9c6 3b01 	strd	r3, fp, [r6, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    831e:	6883      	ldr	r3, [r0, #8]
    8320:	69db      	ldr	r3, [r3, #28]
    8322:	b963      	cbnz	r3, 833e <SX1276IoIrqInit+0xba>
    8324:	4b1a      	ldr	r3, [pc, #104]	; (8390 <SX1276IoIrqInit+0x10c>)
    8326:	491b      	ldr	r1, [pc, #108]	; (8394 <SX1276IoIrqInit+0x110>)
			LOG_ERR("Could not set gpio callback.");
    8328:	481e      	ldr	r0, [pc, #120]	; (83a4 <SX1276IoIrqInit+0x120>)
    832a:	1ac9      	subs	r1, r1, r3
    832c:	08c9      	lsrs	r1, r1, #3
    832e:	0189      	lsls	r1, r1, #6
    8330:	f041 0101 	orr.w	r1, r1, #1
}
    8334:	b003      	add	sp, #12
    8336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Could not set gpio callback.");
    833a:	f013 be45 	b.w	1bfc8 <log_0>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    833e:	4631      	mov	r1, r6
    8340:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
    8342:	2800      	cmp	r0, #0
    8344:	dbee      	blt.n	8324 <SX1276IoIrqInit+0xa0>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
    8346:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    8348:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    834a:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    834c:	6812      	ldr	r2, [r2, #0]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    834e:	ea1b 0f02 	tst.w	fp, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
    8352:	4639      	mov	r1, r7
    8354:	f8d3 b018 	ldr.w	fp, [r3, #24]
    8358:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    835c:	bf14      	ite	ne
    835e:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    8362:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    8366:	47d8      	blx	fp
	for (i = 0; i < SX127X_MAX_DIO; i++) {
    8368:	9b01      	ldr	r3, [sp, #4]
    836a:	4543      	cmp	r3, r8
    836c:	f104 0404 	add.w	r4, r4, #4
    8370:	f106 060c 	add.w	r6, r6, #12
    8374:	f109 0910 	add.w	r9, r9, #16
    8378:	f105 0508 	add.w	r5, r5, #8
    837c:	d18c      	bne.n	8298 <SX1276IoIrqInit+0x14>
}
    837e:	b003      	add	sp, #12
    8380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8384:	20000dd0 	.word	0x20000dd0
    8388:	20000da4 	.word	0x20000da4
    838c:	0001e708 	.word	0x0001e708
    8390:	0001e07c 	.word	0x0001e07c
    8394:	0001e0bc 	.word	0x0001e0bc
    8398:	0001f63a 	.word	0x0001f63a
    839c:	000081f9 	.word	0x000081f9
    83a0:	00008211 	.word	0x00008211
    83a4:	0001f6b4 	.word	0x0001f6b4

000083a8 <sx127x_read>:

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
    83a8:	b510      	push	{r4, lr}
    83aa:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
    83ac:	f10d 0307 	add.w	r3, sp, #7
    83b0:	9306      	str	r3, [sp, #24]
    83b2:	2301      	movs	r3, #1
    83b4:	e9cd 3107 	strd	r3, r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
    83b8:	4909      	ldr	r1, [pc, #36]	; (83e0 <sx127x_read+0x38>)
	return sx127x_transceive(reg_addr, false, data, len);
    83ba:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
    83bc:	2302      	movs	r3, #2
    83be:	aa06      	add	r2, sp, #24
    83c0:	f88d 0007 	strb.w	r0, [sp, #7]
		const struct spi_buf_set rx = {
    83c4:	e9cd 3203 	strd	r3, r2, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
    83c8:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
    83ca:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
    83cc:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    83ce:	6883      	ldr	r3, [r0, #8]
    83d0:	aa02      	add	r2, sp, #8
    83d2:	681c      	ldr	r4, [r3, #0]
    83d4:	3108      	adds	r1, #8
    83d6:	ab04      	add	r3, sp, #16
    83d8:	47a0      	blx	r4
}
    83da:	b00a      	add	sp, #40	; 0x28
    83dc:	bd10      	pop	{r4, pc}
    83de:	bf00      	nop
    83e0:	20000dbc 	.word	0x20000dbc

000083e4 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
    83e4:	b510      	push	{r4, lr}
    83e6:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
    83e8:	b2c0      	uxtb	r0, r0
    83ea:	f7ff ffdd 	bl	83a8 <sx127x_read>
	if (ret < 0) {
    83ee:	2800      	cmp	r0, #0
    83f0:	da0c      	bge.n	840c <SX1276ReadBuffer+0x28>
    83f2:	4a07      	ldr	r2, [pc, #28]	; (8410 <SX1276ReadBuffer+0x2c>)
    83f4:	4b07      	ldr	r3, [pc, #28]	; (8414 <SX1276ReadBuffer+0x30>)
		LOG_ERR("Unable to read address: 0x%x", addr);
    83f6:	4808      	ldr	r0, [pc, #32]	; (8418 <SX1276ReadBuffer+0x34>)
    83f8:	1ad2      	subs	r2, r2, r3
    83fa:	08d2      	lsrs	r2, r2, #3
    83fc:	0192      	lsls	r2, r2, #6
    83fe:	4621      	mov	r1, r4
    8400:	f042 0201 	orr.w	r2, r2, #1
	}
}
    8404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to read address: 0x%x", addr);
    8408:	f013 bdeb 	b.w	1bfe2 <log_1>
}
    840c:	bd10      	pop	{r4, pc}
    840e:	bf00      	nop
    8410:	0001e0bc 	.word	0x0001e0bc
    8414:	0001e07c 	.word	0x0001e07c
    8418:	0001f6d1 	.word	0x0001f6d1

0000841c <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
    841c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    841e:	4606      	mov	r6, r0
    8420:	4839      	ldr	r0, [pc, #228]	; (8508 <sx127x_lora_init+0xec>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
    8422:	4d3a      	ldr	r5, [pc, #232]	; (850c <sx127x_lora_init+0xf0>)
    8424:	f002 fd30 	bl	ae88 <z_impl_device_get_binding>
    8428:	6068      	str	r0, [r5, #4]
	if (!dev_data.spi) {
    842a:	b978      	cbnz	r0, 844c <sx127x_lora_init+0x30>
    842c:	4b38      	ldr	r3, [pc, #224]	; (8510 <sx127x_lora_init+0xf4>)
    842e:	4a39      	ldr	r2, [pc, #228]	; (8514 <sx127x_lora_init+0xf8>)
		LOG_ERR("Cannot get pointer to %s device",
    8430:	4935      	ldr	r1, [pc, #212]	; (8508 <sx127x_lora_init+0xec>)
    8432:	4839      	ldr	r0, [pc, #228]	; (8518 <sx127x_lora_init+0xfc>)
    8434:	1ad2      	subs	r2, r2, r3
    8436:	08d2      	lsrs	r2, r2, #3
    8438:	0192      	lsls	r2, r2, #6
    843a:	f042 0201 	orr.w	r2, r2, #1
    843e:	f013 fdd0 	bl	1bfe2 <log_1>
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
    8442:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
    8446:	4620      	mov	r0, r4
    8448:	b002      	add	sp, #8
    844a:	bd70      	pop	{r4, r5, r6, pc}
	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
    844c:	4a33      	ldr	r2, [pc, #204]	; (851c <sx127x_lora_init+0x100>)
    844e:	f44f 7380 	mov.w	r3, #256	; 0x100
    8452:	e9c5 2302 	strd	r2, r3, [r5, #8]
    8456:	4832      	ldr	r0, [pc, #200]	; (8520 <sx127x_lora_init+0x104>)
    8458:	f002 fd16 	bl	ae88 <z_impl_device_get_binding>
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
    845c:	4b31      	ldr	r3, [pc, #196]	; (8524 <sx127x_lora_init+0x108>)
    845e:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
    8460:	b968      	cbnz	r0, 847e <sx127x_lora_init+0x62>
    8462:	4a2c      	ldr	r2, [pc, #176]	; (8514 <sx127x_lora_init+0xf8>)
    8464:	4b2a      	ldr	r3, [pc, #168]	; (8510 <sx127x_lora_init+0xf4>)
		LOG_ERR("Cannot get pointer to %s device",
    8466:	492e      	ldr	r1, [pc, #184]	; (8520 <sx127x_lora_init+0x104>)
    8468:	482b      	ldr	r0, [pc, #172]	; (8518 <sx127x_lora_init+0xfc>)
    846a:	1ad2      	subs	r2, r2, r3
    846c:	08d2      	lsrs	r2, r2, #3
    846e:	0192      	lsls	r2, r2, #6
    8470:	f042 0201 	orr.w	r2, r2, #1
    8474:	f013 fdb5 	bl	1bfe2 <log_1>
		return -EIO;
    8478:	f06f 0404 	mvn.w	r4, #4
    847c:	e7e3      	b.n	8446 <sx127x_lora_init+0x2a>
	spi_cs.delay = 0U;
    847e:	2200      	movs	r2, #0
    8480:	605a      	str	r2, [r3, #4]
	spi_cs.gpio_pin = GPIO_CS_PIN;
    8482:	f240 120d 	movw	r2, #269	; 0x10d
    8486:	811a      	strh	r2, [r3, #8]
	dev_data.spi_cfg.cs = &spi_cs;
    8488:	612b      	str	r3, [r5, #16]
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
    848a:	4927      	ldr	r1, [pc, #156]	; (8528 <sx127x_lora_init+0x10c>)
    848c:	f641 2301 	movw	r3, #6657	; 0x1a01
    8490:	221f      	movs	r2, #31
    8492:	4628      	mov	r0, r5
    8494:	f7ff fcc8 	bl	7e28 <__sx12xx_configure_pin>
	if (ret) {
    8498:	4604      	mov	r4, r0
    849a:	2800      	cmp	r0, #0
    849c:	d1d3      	bne.n	8446 <sx127x_lora_init+0x2a>
    849e:	2100      	movs	r1, #0
    84a0:	f640 40cd 	movw	r0, #3277	; 0xccd
    84a4:	f003 fc92 	bl	bdcc <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
    84a8:	6828      	ldr	r0, [r5, #0]
    84aa:	4621      	mov	r1, r4
    84ac:	f014 fb94 	bl	1cbd8 <gpio_pin_set.constprop.0>
    84b0:	2100      	movs	r1, #0
    84b2:	f640 40cd 	movw	r0, #3277	; 0xccd
    84b6:	f003 fc89 	bl	bdcc <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
    84ba:	2201      	movs	r2, #1
    84bc:	f10d 0107 	add.w	r1, sp, #7
    84c0:	2042      	movs	r0, #66	; 0x42
    84c2:	f7ff ff71 	bl	83a8 <sx127x_read>
	if (ret < 0) {
    84c6:	4d13      	ldr	r5, [pc, #76]	; (8514 <sx127x_lora_init+0xf8>)
    84c8:	4b11      	ldr	r3, [pc, #68]	; (8510 <sx127x_lora_init+0xf4>)
    84ca:	1aed      	subs	r5, r5, r3
    84cc:	08ed      	lsrs	r5, r5, #3
    84ce:	2800      	cmp	r0, #0
    84d0:	ea4f 1585 	mov.w	r5, r5, lsl #6
    84d4:	da05      	bge.n	84e2 <sx127x_lora_init+0xc6>
		LOG_ERR("Unable to read version info");
    84d6:	4815      	ldr	r0, [pc, #84]	; (852c <sx127x_lora_init+0x110>)
    84d8:	f045 0101 	orr.w	r1, r5, #1
    84dc:	f013 fd74 	bl	1bfc8 <log_0>
    84e0:	e7ca      	b.n	8478 <sx127x_lora_init+0x5c>
	LOG_INF("SX127x version 0x%02x found", regval);
    84e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    84e6:	4812      	ldr	r0, [pc, #72]	; (8530 <sx127x_lora_init+0x114>)
    84e8:	f045 0203 	orr.w	r2, r5, #3
    84ec:	f013 fd79 	bl	1bfe2 <log_1>
	ret = sx12xx_init(dev);
    84f0:	4630      	mov	r0, r6
    84f2:	f7ff fe5d 	bl	81b0 <sx12xx_init>
	if (ret < 0) {
    84f6:	1e06      	subs	r6, r0, #0
    84f8:	daa5      	bge.n	8446 <sx127x_lora_init+0x2a>
		LOG_ERR("Failed to initialize SX12xx common");
    84fa:	480e      	ldr	r0, [pc, #56]	; (8534 <sx127x_lora_init+0x118>)
    84fc:	f045 0101 	orr.w	r1, r5, #1
    8500:	f013 fd62 	bl	1bfc8 <log_0>
		return ret;
    8504:	4634      	mov	r4, r6
    8506:	e79e      	b.n	8446 <sx127x_lora_init+0x2a>
    8508:	0001f627 	.word	0x0001f627
    850c:	20000dbc 	.word	0x20000dbc
    8510:	0001e07c 	.word	0x0001e07c
    8514:	0001e0bc 	.word	0x0001e0bc
    8518:	0001f63a 	.word	0x0001f63a
    851c:	000f4240 	.word	0x000f4240
    8520:	0001f4c4 	.word	0x0001f4c4
    8524:	20000df8 	.word	0x20000df8
    8528:	0001f4cb 	.word	0x0001f4cb
    852c:	0001f6ee 	.word	0x0001f6ee
    8530:	0001f70a 	.word	0x0001f70a
    8534:	0001f726 	.word	0x0001f726

00008538 <sx127x_write>:
{
    8538:	b510      	push	{r4, lr}
    853a:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
    853c:	f10d 0307 	add.w	r3, sp, #7
    8540:	9304      	str	r3, [sp, #16]
    8542:	2301      	movs	r3, #1
    8544:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
    8548:	ab04      	add	r3, sp, #16
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
    854a:	4909      	ldr	r1, [pc, #36]	; (8570 <sx127x_write+0x38>)
	struct spi_buf_set tx = {
    854c:	9302      	str	r3, [sp, #8]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    854e:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
    8552:	2302      	movs	r3, #2
    8554:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    8558:	9207      	str	r2, [sp, #28]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
    855a:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
    855c:	9303      	str	r3, [sp, #12]
    855e:	6883      	ldr	r3, [r0, #8]
    8560:	aa02      	add	r2, sp, #8
    8562:	681c      	ldr	r4, [r3, #0]
    8564:	3108      	adds	r1, #8
    8566:	2300      	movs	r3, #0
    8568:	47a0      	blx	r4
}
    856a:	b008      	add	sp, #32
    856c:	bd10      	pop	{r4, pc}
    856e:	bf00      	nop
    8570:	20000dbc 	.word	0x20000dbc

00008574 <SX1276WriteBuffer>:
{
    8574:	b510      	push	{r4, lr}
    8576:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
    8578:	b2c0      	uxtb	r0, r0
    857a:	f7ff ffdd 	bl	8538 <sx127x_write>
	if (ret < 0) {
    857e:	2800      	cmp	r0, #0
    8580:	da0c      	bge.n	859c <SX1276WriteBuffer+0x28>
    8582:	4a07      	ldr	r2, [pc, #28]	; (85a0 <SX1276WriteBuffer+0x2c>)
    8584:	4b07      	ldr	r3, [pc, #28]	; (85a4 <SX1276WriteBuffer+0x30>)
		LOG_ERR("Unable to write address: 0x%x", addr);
    8586:	4808      	ldr	r0, [pc, #32]	; (85a8 <SX1276WriteBuffer+0x34>)
    8588:	1ad2      	subs	r2, r2, r3
    858a:	08d2      	lsrs	r2, r2, #3
    858c:	0192      	lsls	r2, r2, #6
    858e:	4621      	mov	r1, r4
    8590:	f042 0201 	orr.w	r2, r2, #1
}
    8594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to write address: 0x%x", addr);
    8598:	f013 bd23 	b.w	1bfe2 <log_1>
}
    859c:	bd10      	pop	{r4, pc}
    859e:	bf00      	nop
    85a0:	0001e0bc 	.word	0x0001e0bc
    85a4:	0001e07c 	.word	0x0001e07c
    85a8:	0001f749 	.word	0x0001f749

000085ac <SX1276SetRfTxPower>:
{
    85ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t pa_config = 0;
    85ae:	2300      	movs	r3, #0
{
    85b0:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    85b2:	2201      	movs	r2, #1
    85b4:	f10d 0107 	add.w	r1, sp, #7
    85b8:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
    85ba:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
    85be:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    85c2:	f7ff fef1 	bl	83a8 <sx127x_read>
	if (ret < 0) {
    85c6:	2800      	cmp	r0, #0
    85c8:	da0b      	bge.n	85e2 <SX1276SetRfTxPower+0x36>
    85ca:	4928      	ldr	r1, [pc, #160]	; (866c <SX1276SetRfTxPower+0xc0>)
    85cc:	4b28      	ldr	r3, [pc, #160]	; (8670 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to read PA dac");
    85ce:	4829      	ldr	r0, [pc, #164]	; (8674 <SX1276SetRfTxPower+0xc8>)
    85d0:	1ac9      	subs	r1, r1, r3
    85d2:	08c9      	lsrs	r1, r1, #3
    85d4:	0189      	lsls	r1, r1, #6
    85d6:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to write PA dac");
    85da:	f013 fcf5 	bl	1bfc8 <log_0>
}
    85de:	b003      	add	sp, #12
    85e0:	bd30      	pop	{r4, r5, pc}
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    85e2:	2d14      	cmp	r5, #20
    85e4:	4629      	mov	r1, r5
    85e6:	bfa8      	it	ge
    85e8:	2114      	movge	r1, #20
    85ea:	2902      	cmp	r1, #2
    85ec:	f89d 4007 	ldrb.w	r4, [sp, #7]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
    85f0:	f99d 2006 	ldrsb.w	r2, [sp, #6]
    85f4:	bfb8      	it	lt
    85f6:	2102      	movlt	r1, #2
		if (power > 17) {
    85f8:	2d11      	cmp	r5, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    85fa:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    85fe:	bfcc      	ite	gt
    8600:	3905      	subgt	r1, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    8602:	3902      	suble	r1, #2
    8604:	f062 037f 	orn	r3, r2, #127	; 0x7f
			pa_dac |= SX127X_PADAC_20DBM_ON;
    8608:	bfcc      	ite	gt
    860a:	f044 0407 	orrgt.w	r4, r4, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    860e:	f044 0404 	orrle.w	r4, r4, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    8612:	ea43 0301 	orr.w	r3, r3, r1
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    8616:	f04f 0201 	mov.w	r2, #1
    861a:	f10d 0106 	add.w	r1, sp, #6
    861e:	f04f 0009 	mov.w	r0, #9
			pa_dac |= SX127X_PADAC_20DBM_ON;
    8622:	bfcc      	ite	gt
    8624:	f88d 4007 	strbgt.w	r4, [sp, #7]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    8628:	f88d 4007 	strble.w	r4, [sp, #7]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    862c:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    8630:	f7ff ff82 	bl	8538 <sx127x_write>
	if (ret < 0) {
    8634:	2800      	cmp	r0, #0
    8636:	da08      	bge.n	864a <SX1276SetRfTxPower+0x9e>
    8638:	490c      	ldr	r1, [pc, #48]	; (866c <SX1276SetRfTxPower+0xc0>)
    863a:	4b0d      	ldr	r3, [pc, #52]	; (8670 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA config");
    863c:	480e      	ldr	r0, [pc, #56]	; (8678 <SX1276SetRfTxPower+0xcc>)
    863e:	1ac9      	subs	r1, r1, r3
    8640:	08c9      	lsrs	r1, r1, #3
    8642:	0189      	lsls	r1, r1, #6
    8644:	f041 0101 	orr.w	r1, r1, #1
    8648:	e7c7      	b.n	85da <SX1276SetRfTxPower+0x2e>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
    864a:	2201      	movs	r2, #1
    864c:	f10d 0107 	add.w	r1, sp, #7
    8650:	204d      	movs	r0, #77	; 0x4d
    8652:	f7ff ff71 	bl	8538 <sx127x_write>
	if (ret < 0) {
    8656:	2800      	cmp	r0, #0
    8658:	dac1      	bge.n	85de <SX1276SetRfTxPower+0x32>
    865a:	4904      	ldr	r1, [pc, #16]	; (866c <SX1276SetRfTxPower+0xc0>)
    865c:	4b04      	ldr	r3, [pc, #16]	; (8670 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA dac");
    865e:	4807      	ldr	r0, [pc, #28]	; (867c <SX1276SetRfTxPower+0xd0>)
    8660:	1ac9      	subs	r1, r1, r3
    8662:	08c9      	lsrs	r1, r1, #3
    8664:	0189      	lsls	r1, r1, #6
    8666:	f041 0101 	orr.w	r1, r1, #1
    866a:	e7b6      	b.n	85da <SX1276SetRfTxPower+0x2e>
    866c:	0001e0bc 	.word	0x0001e0bc
    8670:	0001e07c 	.word	0x0001e07c
    8674:	0001f767 	.word	0x0001f767
    8678:	0001f77d 	.word	0x0001f77d
    867c:	0001f797 	.word	0x0001f797

00008680 <SX1276GetDio1PinState>:
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
    8680:	4b09      	ldr	r3, [pc, #36]	; (86a8 <SX1276GetDio1PinState+0x28>)
{
    8682:	b513      	push	{r0, r1, r4, lr}
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
    8684:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
    8686:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
    8688:	6883      	ldr	r3, [r0, #8]
    868a:	a901      	add	r1, sp, #4
    868c:	685b      	ldr	r3, [r3, #4]
    868e:	4798      	blx	r3
	if (ret == 0) {
    8690:	b920      	cbnz	r0, 869c <SX1276GetDio1PinState+0x1c>
		*value ^= data->invert;
    8692:	6823      	ldr	r3, [r4, #0]
    8694:	9801      	ldr	r0, [sp, #4]
    8696:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    8698:	f3c0 2080 	ubfx	r0, r0, #10, #1
}
    869c:	2800      	cmp	r0, #0
    869e:	bfd4      	ite	le
    86a0:	2000      	movle	r0, #0
    86a2:	2001      	movgt	r0, #1
    86a4:	b002      	add	sp, #8
    86a6:	bd10      	pop	{r4, pc}
    86a8:	20000dbc 	.word	0x20000dbc

000086ac <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    86ac:	4b04      	ldr	r3, [pc, #16]	; (86c0 <TimerInsertNewHeadTimer+0x14>)
    86ae:	681a      	ldr	r2, [r3, #0]

    if( cur != NULL )
    86b0:	b10a      	cbz	r2, 86b6 <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
    86b2:	2100      	movs	r1, #0
    86b4:	7251      	strb	r1, [r2, #9]
    }

    obj->Next = cur;
    86b6:	6142      	str	r2, [r0, #20]
    TimerListHead = obj;
    86b8:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
    86ba:	f014 baab 	b.w	1cc14 <TimerSetTimeout>
    86be:	bf00      	nop
    86c0:	20000e04 	.word	0x20000e04

000086c4 <TimerStart>:
{
    86c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    86c6:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    86c8:	a801      	add	r0, sp, #4
    86ca:	f014 fa73 	bl	1cbb4 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
    86ce:	b16c      	cbz	r4, 86ec <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    86d0:	4d17      	ldr	r5, [pc, #92]	; (8730 <TimerStart+0x6c>)
    86d2:	6829      	ldr	r1, [r5, #0]
    86d4:	460a      	mov	r2, r1

    while( cur != NULL )
    86d6:	b972      	cbnz	r2, 86f6 <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
    86d8:	6863      	ldr	r3, [r4, #4]
    86da:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
    86dc:	2301      	movs	r3, #1
    86de:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
    86e0:	b969      	cbnz	r1, 86fe <TimerStart+0x3a>
        RtcSetTimerContext( );
    86e2:	f7ff fb15 	bl	7d10 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
    86e6:	4620      	mov	r0, r4
    86e8:	f7ff ffe0 	bl	86ac <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
    86ec:	a801      	add	r0, sp, #4
    86ee:	f014 fa6b 	bl	1cbc8 <BoardCriticalSectionEnd>
}
    86f2:	b003      	add	sp, #12
    86f4:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
    86f6:	4294      	cmp	r4, r2
    86f8:	d0f8      	beq.n	86ec <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
    86fa:	6952      	ldr	r2, [r2, #20]
    86fc:	e7eb      	b.n	86d6 <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
    86fe:	f7ff fadb 	bl	7cb8 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
    8702:	6823      	ldr	r3, [r4, #0]
    8704:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
    8706:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
    8708:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
    870a:	681a      	ldr	r2, [r3, #0]
    870c:	4290      	cmp	r0, r2
    870e:	d3ea      	bcc.n	86e6 <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
    8710:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
    8712:	6959      	ldr	r1, [r3, #20]
    8714:	b911      	cbnz	r1, 871c <TimerStart+0x58>
    cur->Next = obj;
    8716:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
    8718:	6161      	str	r1, [r4, #20]
    871a:	e7e7      	b.n	86ec <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
    871c:	6811      	ldr	r1, [r2, #0]
    871e:	4288      	cmp	r0, r1
    8720:	d902      	bls.n	8728 <TimerStart+0x64>
            next = next->Next;
    8722:	4613      	mov	r3, r2
    8724:	6952      	ldr	r2, [r2, #20]
    8726:	e7f4      	b.n	8712 <TimerStart+0x4e>
            cur->Next = obj;
    8728:	615c      	str	r4, [r3, #20]
            obj->Next = next;
    872a:	6162      	str	r2, [r4, #20]
            return;
    872c:	e7de      	b.n	86ec <TimerStart+0x28>
    872e:	bf00      	nop
    8730:	20000e04 	.word	0x20000e04

00008734 <TimerIrqHandler>:
{
    8734:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
    8736:	f7ff faf3 	bl	7d20 <RtcGetTimerContext>
    if( TimerListHead != NULL )
    873a:	4c1b      	ldr	r4, [pc, #108]	; (87a8 <TimerIrqHandler+0x74>)
    uint32_t old =  RtcGetTimerContext( );
    873c:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
    873e:	f7ff fae7 	bl	7d10 <RtcSetTimerContext>
    if( TimerListHead != NULL )
    8742:	6822      	ldr	r2, [r4, #0]
    8744:	b19a      	cbz	r2, 876e <TimerIrqHandler+0x3a>
    uint32_t deltaContext = now - old; // intentional wrap around
    8746:	1b46      	subs	r6, r0, r5
    8748:	4611      	mov	r1, r2
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    874a:	6949      	ldr	r1, [r1, #20]
    874c:	b929      	cbnz	r1, 875a <TimerIrqHandler+0x26>
        TimerListHead = TimerListHead->Next;
    874e:	6953      	ldr	r3, [r2, #20]
    8750:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    8752:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
    8754:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    8756:	b943      	cbnz	r3, 876a <TimerIrqHandler+0x36>
    8758:	e7fe      	b.n	8758 <TimerIrqHandler+0x24>
            if( next->Timestamp > deltaContext )
    875a:	680b      	ldr	r3, [r1, #0]
    875c:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
    875e:	bf86      	itte	hi
    8760:	195b      	addhi	r3, r3, r5
    8762:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
    8764:	2300      	movls	r3, #0
    8766:	600b      	str	r3, [r1, #0]
    8768:	e7ef      	b.n	874a <TimerIrqHandler+0x16>
        ExecuteCallBack( cur->Callback, cur->Context );
    876a:	6910      	ldr	r0, [r2, #16]
    876c:	4798      	blx	r3
        cur->IsStarted = false;
    876e:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    8770:	6823      	ldr	r3, [r4, #0]
    8772:	b92b      	cbnz	r3, 8780 <TimerIrqHandler+0x4c>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    8774:	6820      	ldr	r0, [r4, #0]
    8776:	b980      	cbnz	r0, 879a <TimerIrqHandler+0x66>
}
    8778:	bd70      	pop	{r4, r5, r6, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
    877a:	6918      	ldr	r0, [r3, #16]
    877c:	4790      	blx	r2
    877e:	e7f7      	b.n	8770 <TimerIrqHandler+0x3c>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    8780:	681d      	ldr	r5, [r3, #0]
    8782:	f7ff fa99 	bl	7cb8 <RtcGetTimerElapsedTime>
    8786:	4285      	cmp	r5, r0
    8788:	d2f4      	bcs.n	8774 <TimerIrqHandler+0x40>
        cur = TimerListHead;
    878a:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
    878c:	695a      	ldr	r2, [r3, #20]
    878e:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    8790:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
    8792:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    8794:	2a00      	cmp	r2, #0
    8796:	d1f0      	bne.n	877a <TimerIrqHandler+0x46>
    8798:	e7fe      	b.n	8798 <TimerIrqHandler+0x64>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    879a:	7a43      	ldrb	r3, [r0, #9]
    879c:	2b00      	cmp	r3, #0
    879e:	d1eb      	bne.n	8778 <TimerIrqHandler+0x44>
}
    87a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
    87a4:	f014 ba36 	b.w	1cc14 <TimerSetTimeout>
    87a8:	20000e04 	.word	0x20000e04

000087ac <TimerStop>:
{
    87ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
    87ae:	4d14      	ldr	r5, [pc, #80]	; (8800 <TimerStop+0x54>)
{
    87b0:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    87b2:	a801      	add	r0, sp, #4
    87b4:	f014 f9fe 	bl	1cbb4 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
    87b8:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
    87ba:	b103      	cbz	r3, 87be <TimerStop+0x12>
    87bc:	b924      	cbnz	r4, 87c8 <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
    87be:	a801      	add	r0, sp, #4
    87c0:	f014 fa02 	bl	1cbc8 <BoardCriticalSectionEnd>
}
    87c4:	b003      	add	sp, #12
    87c6:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
    87c8:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
    87ca:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
    87cc:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
    87ce:	d10d      	bne.n	87ec <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
    87d0:	7a59      	ldrb	r1, [r3, #9]
    87d2:	695c      	ldr	r4, [r3, #20]
    87d4:	b141      	cbz	r1, 87e8 <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
    87d6:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
    87d8:	b124      	cbz	r4, 87e4 <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
    87da:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
    87dc:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
    87de:	f014 fa19 	bl	1cc14 <TimerSetTimeout>
    87e2:	e7ec      	b.n	87be <TimerStop+0x12>
                RtcStopAlarm( );
    87e4:	f7ff fa72 	bl	7ccc <RtcStopAlarm>
                TimerListHead = NULL;
    87e8:	602c      	str	r4, [r5, #0]
    87ea:	e7e8      	b.n	87be <TimerStop+0x12>
                cur = cur->Next;
    87ec:	461a      	mov	r2, r3
    87ee:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
    87f0:	2b00      	cmp	r3, #0
    87f2:	d0e4      	beq.n	87be <TimerStop+0x12>
            if( cur == obj )
    87f4:	429c      	cmp	r4, r3
    87f6:	d1f9      	bne.n	87ec <TimerStop+0x40>
                if( cur->Next != NULL )
    87f8:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
    87fa:	6153      	str	r3, [r2, #20]
    87fc:	e7df      	b.n	87be <TimerStop+0x12>
    87fe:	bf00      	nop
    8800:	20000e04 	.word	0x20000e04

00008804 <GetFskBandwidthRegValue>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
             SX1276_PLL_STEP_SCALED );
}

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    8804:	b510      	push	{r4, lr}
    8806:	4b09      	ldr	r3, [pc, #36]	; (882c <GetFskBandwidthRegValue+0x28>)
    8808:	2200      	movs	r2, #0
    880a:	4619      	mov	r1, r3
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
    880c:	681c      	ldr	r4, [r3, #0]
    880e:	4284      	cmp	r4, r0
    8810:	d806      	bhi.n	8820 <GetFskBandwidthRegValue+0x1c>
    8812:	689c      	ldr	r4, [r3, #8]
    8814:	4284      	cmp	r4, r0
    8816:	d903      	bls.n	8820 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
    8818:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    881c:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
    881e:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    8820:	3201      	adds	r2, #1
    8822:	2a15      	cmp	r2, #21
    8824:	f103 0308 	add.w	r3, r3, #8
    8828:	d1f0      	bne.n	880c <GetFskBandwidthRegValue+0x8>
    while( 1 );
    882a:	e7fe      	b.n	882a <GetFskBandwidthRegValue+0x26>
    882c:	0001e738 	.word	0x0001e738

00008830 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
    8830:	4b05      	ldr	r3, [pc, #20]	; (8848 <SX1276OnDio4Irq+0x18>)
    8832:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    8836:	b92a      	cbnz	r2, 8844 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
    8838:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    883c:	b912      	cbnz	r2, 8844 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    883e:	2201      	movs	r2, #1
    8840:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
    8844:	4770      	bx	lr
    8846:	bf00      	nop
    8848:	20000e3c 	.word	0x20000e3c

0000884c <SX1276GetStatus>:
}
    884c:	4b01      	ldr	r3, [pc, #4]	; (8854 <SX1276GetStatus+0x8>)
    884e:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    8852:	4770      	bx	lr
    8854:	20000e3c 	.word	0x20000e3c

00008858 <SX1276GetTimeOnAir>:
{
    8858:	b5f0      	push	{r4, r5, r6, r7, lr}
    885a:	f8bd 5014 	ldrh.w	r5, [sp, #20]
    885e:	f89d e018 	ldrb.w	lr, [sp, #24]
    8862:	f89d 601c 	ldrb.w	r6, [sp, #28]
    8866:	f89d 4020 	ldrb.w	r4, [sp, #32]
    switch( modem )
    886a:	b140      	cbz	r0, 887e <SX1276GetTimeOnAir+0x26>
    886c:	2801      	cmp	r0, #1
    886e:	d019      	beq.n	88a4 <SX1276GetTimeOnAir+0x4c>
    8870:	2201      	movs	r2, #1
    8872:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
    8874:	4413      	add	r3, r2
    8876:	1e58      	subs	r0, r3, #1
    8878:	fbb0 f0f2 	udiv	r0, r0, r2
}
    887c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
    887e:	f1be 0f00 	cmp.w	lr, #0
    8882:	bf0c      	ite	eq
    8884:	2308      	moveq	r3, #8
    8886:	2300      	movne	r3, #0
               ( ( crcOn == true ) ? 2 : 0 ) 
    8888:	2c00      	cmp	r4, #0
    888a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    888e:	bf14      	ite	ne
    8890:	2402      	movne	r4, #2
    8892:	2400      	moveq	r4, #0
             ( syncWordLength << 3 ) +
    8894:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
    8896:	4434      	add	r4, r6
             ( syncWordLength << 3 ) +
    8898:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
    889c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    88a0:	4363      	muls	r3, r4
        break;
    88a2:	e7e7      	b.n	8874 <SX1276GetTimeOnAir+0x1c>
    int32_t crDenom           = coderate + 4;
    88a4:	1d1f      	adds	r7, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
    88a6:	1f53      	subs	r3, r2, #5
    88a8:	2b01      	cmp	r3, #1
    88aa:	d802      	bhi.n	88b2 <SX1276GetTimeOnAir+0x5a>
        if( preambleLen < 12 )
    88ac:	2d0c      	cmp	r5, #12
    88ae:	bf38      	it	cc
    88b0:	250c      	movcc	r5, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    88b2:	2900      	cmp	r1, #0
    88b4:	d139      	bne.n	892a <SX1276GetTimeOnAir+0xd2>
    88b6:	f1a2 0c0b 	sub.w	ip, r2, #11
    88ba:	f1bc 0f01 	cmp.w	ip, #1
    88be:	bf8c      	ite	hi
    88c0:	f04f 0c00 	movhi.w	ip, #0
    88c4:	f04f 0c01 	movls.w	ip, #1
                            ( crcOn ? 16 : 0 ) -
    88c8:	2c00      	cmp	r4, #0
    88ca:	bf14      	ite	ne
    88cc:	2410      	movne	r4, #16
    88ce:	2400      	moveq	r4, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
    88d0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
                            ( fixLen ? 0 : 20 );
    88d4:	f1be 0f00 	cmp.w	lr, #0
    88d8:	bf14      	ite	ne
    88da:	2000      	movne	r0, #0
    88dc:	2014      	moveq	r0, #20
                            ( crcOn ? 16 : 0 ) -
    88de:	eba4 0482 	sub.w	r4, r4, r2, lsl #2
    if( datarate <= 6 )
    88e2:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
    88e4:	ea4f 0382 	mov.w	r3, r2, lsl #2
    88e8:	4420      	add	r0, r4
    if( datarate <= 6 )
    88ea:	f1a2 0602 	sub.w	r6, r2, #2
    88ee:	d904      	bls.n	88fa <SX1276GetTimeOnAir+0xa2>
        ceilNumerator += 8;
    88f0:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
    88f2:	f1bc 0f00 	cmp.w	ip, #0
    88f6:	d000      	beq.n	88fa <SX1276GetTimeOnAir+0xa2>
            ceilDenominator = 4 * ( datarate - 2 );
    88f8:	00b3      	lsls	r3, r6, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    88fa:	1e5c      	subs	r4, r3, #1
    88fc:	2800      	cmp	r0, #0
    88fe:	bfa8      	it	ge
    8900:	1824      	addge	r4, r4, r0
    if( datarate <= 6 )
    8902:	2a06      	cmp	r2, #6
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    8904:	fb94 f3f3 	sdiv	r3, r4, r3
    8908:	fb07 5303 	mla	r3, r7, r3, r5
    int32_t intermediate =
    890c:	bf8c      	ite	hi
    890e:	330c      	addhi	r3, #12
        intermediate += 2;
    8910:	330e      	addls	r3, #14
    switch( bw )
    8912:	2902      	cmp	r1, #2
    8914:	d815      	bhi.n	8942 <SX1276GetTimeOnAir+0xea>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    8916:	009b      	lsls	r3, r3, #2
    8918:	3301      	adds	r3, #1
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    891a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    891e:	40b3      	lsls	r3, r6
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    8920:	4353      	muls	r3, r2
    8922:	4a08      	ldr	r2, [pc, #32]	; (8944 <SX1276GetTimeOnAir+0xec>)
    8924:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8928:	e7a4      	b.n	8874 <SX1276GetTimeOnAir+0x1c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    892a:	2901      	cmp	r1, #1
    892c:	d106      	bne.n	893c <SX1276GetTimeOnAir+0xe4>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
    892e:	f1a2 030c 	sub.w	r3, r2, #12
    8932:	f1d3 0c00 	rsbs	ip, r3, #0
    8936:	eb4c 0c03 	adc.w	ip, ip, r3
    893a:	e7c5      	b.n	88c8 <SX1276GetTimeOnAir+0x70>
    bool    lowDatareOptimize = false;
    893c:	f04f 0c00 	mov.w	ip, #0
    8940:	e7c2      	b.n	88c8 <SX1276GetTimeOnAir+0x70>
    return ( numerator + denominator - 1 ) / denominator;
    8942:	deff      	udf	#255	; 0xff
    8944:	0001e72c 	.word	0x0001e72c

00008948 <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    8948:	f643 5309 	movw	r3, #15625	; 0x3d09
{
    894c:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    894e:	fbb0 f2f3 	udiv	r2, r0, r3
    8952:	f641 6484 	movw	r4, #7812	; 0x1e84
    8956:	fb03 0112 	mls	r1, r3, r2, r0
    895a:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    895e:	fbb4 f4f3 	udiv	r4, r4, r3
    SX1276.Settings.Channel = freq;
    8962:	4b0a      	ldr	r3, [pc, #40]	; (898c <SX1276SetChannel+0x44>)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    8964:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276.Settings.Channel = freq;
    8968:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
    896c:	f3c4 4107 	ubfx	r1, r4, #16, #8
    8970:	2006      	movs	r0, #6
    8972:	f014 f996 	bl	1cca2 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
    8976:	f3c4 2107 	ubfx	r1, r4, #8, #8
    897a:	2007      	movs	r0, #7
    897c:	f014 f991 	bl	1cca2 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    8980:	b2e1      	uxtb	r1, r4
    8982:	2008      	movs	r0, #8
}
    8984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    8988:	f014 b98b 	b.w	1cca2 <SX1276Write>
    898c:	20000e3c 	.word	0x20000e3c

00008990 <SX1276OnDio3Irq>:
{
    8990:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
    8992:	4b11      	ldr	r3, [pc, #68]	; (89d8 <SX1276OnDio3Irq+0x48>)
    8994:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
    8998:	2e01      	cmp	r6, #1
    899a:	d11c      	bne.n	89d6 <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
    899c:	2012      	movs	r0, #18
    899e:	f014 f98b 	bl	1ccb8 <SX1276Read>
    89a2:	f010 0401 	ands.w	r4, r0, #1
    89a6:	4d0d      	ldr	r5, [pc, #52]	; (89dc <SX1276OnDio3Irq+0x4c>)
    89a8:	d00b      	beq.n	89c2 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
    89aa:	2105      	movs	r1, #5
    89ac:	2012      	movs	r0, #18
    89ae:	f014 f978 	bl	1cca2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    89b2:	682b      	ldr	r3, [r5, #0]
    89b4:	b17b      	cbz	r3, 89d6 <SX1276OnDio3Irq+0x46>
    89b6:	699b      	ldr	r3, [r3, #24]
    89b8:	b16b      	cbz	r3, 89d6 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
    89ba:	4630      	mov	r0, r6
}
    89bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
    89c0:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
    89c2:	2104      	movs	r1, #4
    89c4:	2012      	movs	r0, #18
    89c6:	f014 f96c 	bl	1cca2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    89ca:	682b      	ldr	r3, [r5, #0]
    89cc:	b11b      	cbz	r3, 89d6 <SX1276OnDio3Irq+0x46>
    89ce:	699b      	ldr	r3, [r3, #24]
    89d0:	b10b      	cbz	r3, 89d6 <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
    89d2:	4620      	mov	r0, r4
    89d4:	e7f2      	b.n	89bc <SX1276OnDio3Irq+0x2c>
}
    89d6:	bd70      	pop	{r4, r5, r6, pc}
    89d8:	20000e3c 	.word	0x20000e3c
    89dc:	20000e08 	.word	0x20000e08

000089e0 <SX1276OnDio2Irq>:
{
    89e0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    89e2:	4b32      	ldr	r3, [pc, #200]	; (8aac <SX1276OnDio2Irq+0xcc>)
    89e4:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
    89e8:	2901      	cmp	r1, #1
    89ea:	461c      	mov	r4, r3
    89ec:	d002      	beq.n	89f4 <SX1276OnDio2Irq+0x14>
    89ee:	2902      	cmp	r1, #2
    89f0:	d052      	beq.n	8a98 <SX1276OnDio2Irq+0xb8>
}
    89f2:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    89f4:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    89f8:	b1ca      	cbz	r2, 8a2e <SX1276OnDio2Irq+0x4e>
    89fa:	2a01      	cmp	r2, #1
    89fc:	d1f9      	bne.n	89f2 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    89fe:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    8a02:	2b00      	cmp	r3, #0
    8a04:	d0f5      	beq.n	89f2 <SX1276OnDio2Irq+0x12>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    8a06:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    8a08:	2012      	movs	r0, #18
    8a0a:	f014 f94a 	bl	1cca2 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    8a0e:	4b28      	ldr	r3, [pc, #160]	; (8ab0 <SX1276OnDio2Irq+0xd0>)
    8a10:	681b      	ldr	r3, [r3, #0]
    8a12:	2b00      	cmp	r3, #0
    8a14:	d0ed      	beq.n	89f2 <SX1276OnDio2Irq+0x12>
    8a16:	695c      	ldr	r4, [r3, #20]
    8a18:	2c00      	cmp	r4, #0
    8a1a:	d0ea      	beq.n	89f2 <SX1276OnDio2Irq+0x12>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    8a1c:	201c      	movs	r0, #28
    8a1e:	f014 f94b 	bl	1ccb8 <SX1276Read>
    8a22:	4623      	mov	r3, r4
    8a24:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    8a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    8a2c:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    8a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    8a30:	bb6b      	cbnz	r3, 8a8e <SX1276OnDio2Irq+0xae>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    8a32:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    8a36:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	d1d9      	bne.n	89f2 <SX1276OnDio2Irq+0x12>
                    TimerStop( &RxTimeoutSyncWord );
    8a3e:	481d      	ldr	r0, [pc, #116]	; (8ab4 <SX1276OnDio2Irq+0xd4>)
    8a40:	f7ff feb4 	bl	87ac <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    8a44:	2301      	movs	r3, #1
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    8a46:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    8a48:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    8a4c:	f014 f934 	bl	1ccb8 <SX1276Read>
    8a50:	0840      	lsrs	r0, r0, #1
    8a52:	4240      	negs	r0, r0
    8a54:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    8a58:	201b      	movs	r0, #27
    8a5a:	f014 f92d 	bl	1ccb8 <SX1276Read>
    8a5e:	4605      	mov	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
    8a60:	201c      	movs	r0, #28
    8a62:	f014 f929 	bl	1ccb8 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8a66:	f643 5209 	movw	r2, #15625	; 0x3d09
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    8a6a:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8a6e:	b2c3      	uxtb	r3, r0
    8a70:	4353      	muls	r3, r2
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    8a72:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8a74:	4355      	muls	r5, r2
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8a76:	3380      	adds	r3, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8a78:	eb05 2313 	add.w	r3, r5, r3, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    8a7c:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    8a7e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    8a82:	f014 f919 	bl	1ccb8 <SX1276Read>
    8a86:	0940      	lsrs	r0, r0, #5
    8a88:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    8a8c:	e7b1      	b.n	89f2 <SX1276OnDio2Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    8a8e:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
    8a92:	2b00      	cmp	r3, #0
    8a94:	d0ad      	beq.n	89f2 <SX1276OnDio2Irq+0x12>
    8a96:	e7ce      	b.n	8a36 <SX1276OnDio2Irq+0x56>
            switch( SX1276.Settings.Modem )
    8a98:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    8a9c:	2a01      	cmp	r2, #1
    8a9e:	d1a8      	bne.n	89f2 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    8aa0:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    8aa4:	2b00      	cmp	r3, #0
    8aa6:	d0a4      	beq.n	89f2 <SX1276OnDio2Irq+0x12>
    8aa8:	e7ae      	b.n	8a08 <SX1276OnDio2Irq+0x28>
    8aaa:	bf00      	nop
    8aac:	20000e3c 	.word	0x20000e3c
    8ab0:	20000e08 	.word	0x20000e08
    8ab4:	20000e0c 	.word	0x20000e0c

00008ab8 <SX1276OnDio1Irq>:
{
    8ab8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    8aba:	4c43      	ldr	r4, [pc, #268]	; (8bc8 <SX1276OnDio1Irq+0x110>)
    8abc:	f894 60e0 	ldrb.w	r6, [r4, #224]	; 0xe0
    8ac0:	2e01      	cmp	r6, #1
    8ac2:	4625      	mov	r5, r4
    8ac4:	d002      	beq.n	8acc <SX1276OnDio1Irq+0x14>
    8ac6:	2e02      	cmp	r6, #2
    8ac8:	d059      	beq.n	8b7e <SX1276OnDio1Irq+0xc6>
}
    8aca:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    8acc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    8ad0:	b1cb      	cbz	r3, 8b06 <SX1276OnDio1Irq+0x4e>
    8ad2:	2b01      	cmp	r3, #1
    8ad4:	d1f9      	bne.n	8aca <SX1276OnDio1Irq+0x12>
                if( SX1276GetDio1PinState( ) == 0 )
    8ad6:	f7ff fdd3 	bl	8680 <SX1276GetDio1PinState>
    8ada:	2800      	cmp	r0, #0
    8adc:	d0f5      	beq.n	8aca <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutTimer );
    8ade:	483b      	ldr	r0, [pc, #236]	; (8bcc <SX1276OnDio1Irq+0x114>)
    8ae0:	f7ff fe64 	bl	87ac <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
    8ae4:	2180      	movs	r1, #128	; 0x80
    8ae6:	2012      	movs	r0, #18
    8ae8:	f014 f8db 	bl	1cca2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    8aec:	2300      	movs	r3, #0
    8aee:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    8af2:	4b37      	ldr	r3, [pc, #220]	; (8bd0 <SX1276OnDio1Irq+0x118>)
    8af4:	681b      	ldr	r3, [r3, #0]
    8af6:	2b00      	cmp	r3, #0
    8af8:	d0e7      	beq.n	8aca <SX1276OnDio1Irq+0x12>
    8afa:	68db      	ldr	r3, [r3, #12]
    8afc:	2b00      	cmp	r3, #0
    8afe:	d0e4      	beq.n	8aca <SX1276OnDio1Irq+0x12>
}
    8b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
    8b04:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 0 )
    8b06:	f7ff fdbb 	bl	8680 <SX1276GetDio1PinState>
    8b0a:	2800      	cmp	r0, #0
    8b0c:	d0dd      	beq.n	8aca <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutSyncWord );
    8b0e:	4831      	ldr	r0, [pc, #196]	; (8bd4 <SX1276OnDio1Irq+0x11c>)
    8b10:	f7ff fe4c 	bl	87ac <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    8b14:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    8b18:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    8b1c:	4313      	orrs	r3, r2
    8b1e:	b29b      	uxth	r3, r3
    8b20:	b93b      	cbnz	r3, 8b32 <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
    8b22:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    8b26:	b9e8      	cbnz	r0, 8b64 <SX1276OnDio1Irq+0xac>
    SX1276ReadBuffer( 0, buffer, size );
    8b28:	4632      	mov	r2, r6
    8b2a:	f504 718b 	add.w	r1, r4, #278	; 0x116
    8b2e:	f7ff fc59 	bl	83e4 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    8b32:	f8b5 0118 	ldrh.w	r0, [r5, #280]	; 0x118
    8b36:	f8b5 2116 	ldrh.w	r2, [r5, #278]	; 0x116
    8b3a:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
    8b3e:	4926      	ldr	r1, [pc, #152]	; (8bd8 <SX1276OnDio1Irq+0x120>)
    8b40:	1a12      	subs	r2, r2, r0
    8b42:	429a      	cmp	r2, r3
    8b44:	4401      	add	r1, r0
    8b46:	db13      	blt.n	8b70 <SX1276OnDio1Irq+0xb8>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    8b48:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
    8b4a:	b2d2      	uxtb	r2, r2
    8b4c:	2000      	movs	r0, #0
    8b4e:	f7ff fc49 	bl	83e4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
    8b52:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
    8b56:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
    8b5a:	4413      	add	r3, r2
    8b5c:	3b01      	subs	r3, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8b5e:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
    8b62:	e7b2      	b.n	8aca <SX1276OnDio1Irq+0x12>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    8b64:	2032      	movs	r0, #50	; 0x32
    8b66:	f014 f8a7 	bl	1ccb8 <SX1276Read>
    8b6a:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    8b6e:	e7e0      	b.n	8b32 <SX1276OnDio1Irq+0x7a>
    SX1276ReadBuffer( 0, buffer, size );
    8b70:	b2d2      	uxtb	r2, r2
    8b72:	2000      	movs	r0, #0
    8b74:	f7ff fc36 	bl	83e4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8b78:	f8b5 3116 	ldrh.w	r3, [r5, #278]	; 0x116
    8b7c:	e7ef      	b.n	8b5e <SX1276OnDio1Irq+0xa6>
            switch( SX1276.Settings.Modem )
    8b7e:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    8b82:	2d00      	cmp	r5, #0
    8b84:	d1a1      	bne.n	8aca <SX1276OnDio1Irq+0x12>
                if( SX1276GetDio1PinState( ) == 1 )
    8b86:	f7ff fd7b 	bl	8680 <SX1276GetDio1PinState>
    8b8a:	2801      	cmp	r0, #1
    8b8c:	d09d      	beq.n	8aca <SX1276OnDio1Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    8b8e:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    8b92:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    8b96:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
    8b9a:	490f      	ldr	r1, [pc, #60]	; (8bd8 <SX1276OnDio1Irq+0x120>)
    8b9c:	1a1b      	subs	r3, r3, r0
    8b9e:	4293      	cmp	r3, r2
    8ba0:	4401      	add	r1, r0
    8ba2:	dd0a      	ble.n	8bba <SX1276OnDio1Irq+0x102>
    SX1276WriteBuffer( 0, buffer, size );
    8ba4:	4628      	mov	r0, r5
    8ba6:	f7ff fce5 	bl	8574 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    8baa:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
    8bae:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    8bb2:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    8bb4:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
    8bb8:	e787      	b.n	8aca <SX1276OnDio1Irq+0x12>
    SX1276WriteBuffer( 0, buffer, size );
    8bba:	b2da      	uxtb	r2, r3
    8bbc:	4628      	mov	r0, r5
    8bbe:	f7ff fcd9 	bl	8574 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    8bc2:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    8bc6:	e7f5      	b.n	8bb4 <SX1276OnDio1Irq+0xfc>
    8bc8:	20000e3c 	.word	0x20000e3c
    8bcc:	20000e24 	.word	0x20000e24
    8bd0:	20000e08 	.word	0x20000e08
    8bd4:	20000e0c 	.word	0x20000e0c
    8bd8:	20001fb6 	.word	0x20001fb6

00008bdc <SX1276OnDio0Irq>:
{
    8bdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    8bde:	4e8f      	ldr	r6, [pc, #572]	; (8e1c <SX1276OnDio0Irq+0x240>)
    volatile uint8_t irqFlags = 0;
    8be0:	2300      	movs	r3, #0
    8be2:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
    8be6:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    8bea:	2b01      	cmp	r3, #1
    8bec:	4634      	mov	r4, r6
    8bee:	d004      	beq.n	8bfa <SX1276OnDio0Irq+0x1e>
    8bf0:	2b02      	cmp	r3, #2
    8bf2:	f000 80fd 	beq.w	8df0 <SX1276OnDio0Irq+0x214>
}
    8bf6:	b002      	add	sp, #8
    8bf8:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    8bfa:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    8bfe:	b33b      	cbz	r3, 8c50 <SX1276OnDio0Irq+0x74>
    8c00:	2b01      	cmp	r3, #1
    8c02:	d1f8      	bne.n	8bf6 <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
    8c04:	2140      	movs	r1, #64	; 0x40
    8c06:	2012      	movs	r0, #18
    8c08:	f014 f84b 	bl	1cca2 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
    8c0c:	2012      	movs	r0, #18
    8c0e:	f014 f853 	bl	1ccb8 <SX1276Read>
    8c12:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
    8c16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c1a:	4d81      	ldr	r5, [pc, #516]	; (8e20 <SX1276OnDio0Irq+0x244>)
    8c1c:	f013 0f20 	tst.w	r3, #32
    8c20:	f000 8093 	beq.w	8d4a <SX1276OnDio0Irq+0x16e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
    8c24:	2120      	movs	r1, #32
    8c26:	2012      	movs	r0, #18
    8c28:	f014 f83b 	bl	1cca2 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
    8c2c:	f896 3132 	ldrb.w	r3, [r6, #306]	; 0x132
    8c30:	b90b      	cbnz	r3, 8c36 <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
    8c32:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
    8c36:	487b      	ldr	r0, [pc, #492]	; (8e24 <SX1276OnDio0Irq+0x248>)
    8c38:	f7ff fdb8 	bl	87ac <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    8c3c:	682b      	ldr	r3, [r5, #0]
    8c3e:	2b00      	cmp	r3, #0
    8c40:	d0d9      	beq.n	8bf6 <SX1276OnDio0Irq+0x1a>
    8c42:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    8c44:	2b00      	cmp	r3, #0
    8c46:	d0d6      	beq.n	8bf6 <SX1276OnDio0Irq+0x1a>
}
    8c48:	b002      	add	sp, #8
    8c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
    8c4e:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
    8c50:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    8c54:	4d72      	ldr	r5, [pc, #456]	; (8e20 <SX1276OnDio0Irq+0x244>)
    8c56:	b393      	cbz	r3, 8cbe <SX1276OnDio0Irq+0xe2>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
    8c58:	203f      	movs	r0, #63	; 0x3f
    8c5a:	f014 f82d 	bl	1ccb8 <SX1276Read>
    8c5e:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
    8c62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c66:	079b      	lsls	r3, r3, #30
    8c68:	d429      	bmi.n	8cbe <SX1276OnDio0Irq+0xe2>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    8c6a:	210b      	movs	r1, #11
    8c6c:	203e      	movs	r0, #62	; 0x3e
    8c6e:	f014 f818 	bl	1cca2 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    8c72:	2110      	movs	r1, #16
    8c74:	203f      	movs	r0, #63	; 0x3f
    8c76:	f014 f814 	bl	1cca2 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
    8c7a:	486a      	ldr	r0, [pc, #424]	; (8e24 <SX1276OnDio0Irq+0x248>)
    8c7c:	f7ff fd96 	bl	87ac <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
    8c80:	f896 6102 	ldrb.w	r6, [r6, #258]	; 0x102
    8c84:	b98e      	cbnz	r6, 8caa <SX1276OnDio0Irq+0xce>
                            TimerStop( &RxTimeoutSyncWord );
    8c86:	4868      	ldr	r0, [pc, #416]	; (8e28 <SX1276OnDio0Irq+0x24c>)
    8c88:	f7ff fd90 	bl	87ac <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
    8c8c:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    8c90:	682b      	ldr	r3, [r5, #0]
    8c92:	b113      	cbz	r3, 8c9a <SX1276OnDio0Irq+0xbe>
    8c94:	691b      	ldr	r3, [r3, #16]
    8c96:	b103      	cbz	r3, 8c9a <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
    8c98:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    8c9a:	2300      	movs	r3, #0
    8c9c:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
    8ca0:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
    8ca4:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
    8ca8:	e7a5      	b.n	8bf6 <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    8caa:	200d      	movs	r0, #13
    8cac:	f014 f804 	bl	1ccb8 <SX1276Read>
    8cb0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    8cb4:	b2c9      	uxtb	r1, r1
    8cb6:	200d      	movs	r0, #13
    8cb8:	f013 fff3 	bl	1cca2 <SX1276Write>
    8cbc:	e7e8      	b.n	8c90 <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    8cbe:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
    8cc2:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    8cc6:	4e59      	ldr	r6, [pc, #356]	; (8e2c <SX1276OnDio0Irq+0x250>)
    8cc8:	ea52 0301 	orrs.w	r3, r2, r1
    8ccc:	d10a      	bne.n	8ce4 <SX1276OnDio0Irq+0x108>
                    if( SX1276.Settings.Fsk.FixLen == false )
    8cce:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    8cd2:	bb50      	cbnz	r0, 8d2a <SX1276OnDio0Irq+0x14e>
    SX1276ReadBuffer( 0, buffer, size );
    8cd4:	4956      	ldr	r1, [pc, #344]	; (8e30 <SX1276OnDio0Irq+0x254>)
    8cd6:	2201      	movs	r2, #1
    8cd8:	f7ff fb84 	bl	83e4 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8cdc:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    8ce0:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8ce4:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
    8ce6:	b2d2      	uxtb	r2, r2
    8ce8:	4431      	add	r1, r6
    8cea:	2000      	movs	r0, #0
    8cec:	f7ff fb7a 	bl	83e4 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8cf0:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
    8cf4:	484b      	ldr	r0, [pc, #300]	; (8e24 <SX1276OnDio0Irq+0x248>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    8cf6:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
    8cfa:	f7ff fd57 	bl	87ac <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
    8cfe:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    8d02:	b9c3      	cbnz	r3, 8d36 <SX1276OnDio0Irq+0x15a>
                    TimerStop( &RxTimeoutSyncWord );
    8d04:	4848      	ldr	r0, [pc, #288]	; (8e28 <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.State = RF_IDLE;
    8d06:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
    8d0a:	f7ff fd4f 	bl	87ac <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    8d0e:	682b      	ldr	r3, [r5, #0]
    8d10:	2b00      	cmp	r3, #0
    8d12:	d0c2      	beq.n	8c9a <SX1276OnDio0Irq+0xbe>
    8d14:	689d      	ldr	r5, [r3, #8]
    8d16:	2d00      	cmp	r5, #0
    8d18:	d0bf      	beq.n	8c9a <SX1276OnDio0Irq+0xbe>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
    8d1a:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
    8d1e:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    8d22:	4842      	ldr	r0, [pc, #264]	; (8e2c <SX1276OnDio0Irq+0x250>)
    8d24:	2300      	movs	r3, #0
    8d26:	47a8      	blx	r5
    8d28:	e7b7      	b.n	8c9a <SX1276OnDio0Irq+0xbe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    8d2a:	2032      	movs	r0, #50	; 0x32
    8d2c:	f013 ffc4 	bl	1ccb8 <SX1276Read>
    8d30:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    8d34:	e7d2      	b.n	8cdc <SX1276OnDio0Irq+0x100>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    8d36:	200d      	movs	r0, #13
    8d38:	f013 ffbe 	bl	1ccb8 <SX1276Read>
    8d3c:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    8d40:	b2c9      	uxtb	r1, r1
    8d42:	200d      	movs	r0, #13
    8d44:	f013 ffad 	bl	1cca2 <SX1276Write>
    8d48:	e7e1      	b.n	8d0e <SX1276OnDio0Irq+0x132>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
    8d4a:	2019      	movs	r0, #25
    8d4c:	f013 ffb4 	bl	1ccb8 <SX1276Read>
    8d50:	b240      	sxtb	r0, r0
    8d52:	3002      	adds	r0, #2
    8d54:	1080      	asrs	r0, r0, #2
    8d56:	f886 013c 	strb.w	r0, [r6, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    8d5a:	201a      	movs	r0, #26
    8d5c:	f013 ffac 	bl	1ccb8 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    8d60:	f996 213c 	ldrsb.w	r2, [r6, #316]	; 0x13c
    8d64:	4933      	ldr	r1, [pc, #204]	; (8e34 <SX1276OnDio0Irq+0x258>)
    8d66:	2a00      	cmp	r2, #0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    8d68:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    8d6a:	f340 100b 	sbfx	r0, r0, #4, #12
    8d6e:	da38      	bge.n	8de2 <SX1276OnDio0Irq+0x206>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    8d70:	f8d6 60e4 	ldr.w	r6, [r6, #228]	; 0xe4
    8d74:	b212      	sxth	r2, r2
    8d76:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    8d78:	bf8c      	ite	hi
    8d7a:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    8d7c:	3aa4      	subls	r2, #164	; 0xa4
    8d7e:	4413      	add	r3, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    8d80:	4403      	add	r3, r0
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    8d82:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    8d84:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    8d88:	f013 ff96 	bl	1ccb8 <SX1276Read>
    8d8c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
    8d90:	2010      	movs	r0, #16
    8d92:	f013 ff91 	bl	1ccb8 <SX1276Read>
    8d96:	4601      	mov	r1, r0
    8d98:	200d      	movs	r0, #13
    8d9a:	f013 ff82 	bl	1cca2 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
    8d9e:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    8da2:	4922      	ldr	r1, [pc, #136]	; (8e2c <SX1276OnDio0Irq+0x250>)
    8da4:	2000      	movs	r0, #0
    8da6:	f7ff fb1d 	bl	83e4 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
    8daa:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
    8dae:	b90b      	cbnz	r3, 8db4 <SX1276OnDio0Irq+0x1d8>
                        SX1276.Settings.State = RF_IDLE;
    8db0:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
    8db4:	481b      	ldr	r0, [pc, #108]	; (8e24 <SX1276OnDio0Irq+0x248>)
    8db6:	f7ff fcf9 	bl	87ac <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    8dba:	682b      	ldr	r3, [r5, #0]
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	f43f af1a 	beq.w	8bf6 <SX1276OnDio0Irq+0x1a>
    8dc2:	689d      	ldr	r5, [r3, #8]
    8dc4:	2d00      	cmp	r5, #0
    8dc6:	f43f af16 	beq.w	8bf6 <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    8dca:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
    8dce:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
    8dd2:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    8dd6:	4815      	ldr	r0, [pc, #84]	; (8e2c <SX1276OnDio0Irq+0x250>)
    8dd8:	46ac      	mov	ip, r5
}
    8dda:	b002      	add	sp, #8
    8ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    8de0:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    8de2:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
    8de6:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
    8de8:	bf8c      	ite	hi
    8dea:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    8dec:	3ba4      	subls	r3, #164	; 0xa4
    8dee:	e7c7      	b.n	8d80 <SX1276OnDio0Irq+0x1a4>
            TimerStop( &TxTimeoutTimer );
    8df0:	4811      	ldr	r0, [pc, #68]	; (8e38 <SX1276OnDio0Irq+0x25c>)
    8df2:	f7ff fcdb 	bl	87ac <TimerStop>
            switch( SX1276.Settings.Modem )
    8df6:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    8dfa:	2b01      	cmp	r3, #1
    8dfc:	d103      	bne.n	8e06 <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
    8dfe:	2108      	movs	r1, #8
    8e00:	2012      	movs	r0, #18
    8e02:	f013 ff4e 	bl	1cca2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    8e06:	2300      	movs	r3, #0
    8e08:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    8e0c:	4b04      	ldr	r3, [pc, #16]	; (8e20 <SX1276OnDio0Irq+0x244>)
    8e0e:	681b      	ldr	r3, [r3, #0]
    8e10:	2b00      	cmp	r3, #0
    8e12:	f43f aef0 	beq.w	8bf6 <SX1276OnDio0Irq+0x1a>
    8e16:	681b      	ldr	r3, [r3, #0]
    8e18:	e714      	b.n	8c44 <SX1276OnDio0Irq+0x68>
    8e1a:	bf00      	nop
    8e1c:	20000e3c 	.word	0x20000e3c
    8e20:	20000e08 	.word	0x20000e08
    8e24:	20000e24 	.word	0x20000e24
    8e28:	20000e0c 	.word	0x20000e0c
    8e2c:	20001fb6 	.word	0x20001fb6
    8e30:	20000f52 	.word	0x20000f52
    8e34:	1f4add40 	.word	0x1f4add40
    8e38:	20000f80 	.word	0x20000f80

00008e3c <RxChainCalibration>:
{
    8e3c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    8e3e:	2009      	movs	r0, #9
    8e40:	f013 ff3a 	bl	1ccb8 <SX1276Read>
    8e44:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    8e46:	2006      	movs	r0, #6
    8e48:	f013 ff36 	bl	1ccb8 <SX1276Read>
    8e4c:	4606      	mov	r6, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    8e4e:	2007      	movs	r0, #7
    8e50:	f013 ff32 	bl	1ccb8 <SX1276Read>
    8e54:	0204      	lsls	r4, r0, #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
    8e56:	2008      	movs	r0, #8
    8e58:	f013 ff2e 	bl	1ccb8 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    8e5c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    8e60:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8e62:	b2c3      	uxtb	r3, r0
    8e64:	f643 5009 	movw	r0, #15625	; 0x3d09
    8e68:	4343      	muls	r3, r0
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    8e6a:	0a24      	lsrs	r4, r4, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8e6c:	3380      	adds	r3, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
    8e6e:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8e70:	4344      	muls	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
    8e72:	2009      	movs	r0, #9
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8e74:	eb04 2413 	add.w	r4, r4, r3, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
    8e78:	f013 ff13 	bl	1cca2 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    8e7c:	203b      	movs	r0, #59	; 0x3b
    8e7e:	f013 ff1b 	bl	1ccb8 <SX1276Read>
    8e82:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    8e86:	b2c9      	uxtb	r1, r1
    8e88:	203b      	movs	r0, #59	; 0x3b
    8e8a:	f013 ff0a 	bl	1cca2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    8e8e:	203b      	movs	r0, #59	; 0x3b
    8e90:	f013 ff12 	bl	1ccb8 <SX1276Read>
    8e94:	0682      	lsls	r2, r0, #26
    8e96:	d4fa      	bmi.n	8e8e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
    8e98:	480c      	ldr	r0, [pc, #48]	; (8ecc <RxChainCalibration+0x90>)
    8e9a:	f7ff fd55 	bl	8948 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    8e9e:	203b      	movs	r0, #59	; 0x3b
    8ea0:	f013 ff0a 	bl	1ccb8 <SX1276Read>
    8ea4:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    8ea8:	b2c9      	uxtb	r1, r1
    8eaa:	203b      	movs	r0, #59	; 0x3b
    8eac:	f013 fef9 	bl	1cca2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    8eb0:	203b      	movs	r0, #59	; 0x3b
    8eb2:	f013 ff01 	bl	1ccb8 <SX1276Read>
    8eb6:	0683      	lsls	r3, r0, #26
    8eb8:	d4fa      	bmi.n	8eb0 <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    8eba:	4629      	mov	r1, r5
    8ebc:	2009      	movs	r0, #9
    8ebe:	f013 fef0 	bl	1cca2 <SX1276Write>
    SX1276SetChannel( initialFreq );
    8ec2:	4620      	mov	r0, r4
}
    8ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
    8ec8:	f7ff bd3e 	b.w	8948 <SX1276SetChannel>
    8ecc:	33bca100 	.word	0x33bca100

00008ed0 <SX1276SetSleep>:
{
    8ed0:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    8ed2:	480a      	ldr	r0, [pc, #40]	; (8efc <SX1276SetSleep+0x2c>)
    8ed4:	f7ff fc6a 	bl	87ac <TimerStop>
    TimerStop( &TxTimeoutTimer );
    8ed8:	4809      	ldr	r0, [pc, #36]	; (8f00 <SX1276SetSleep+0x30>)
    8eda:	f7ff fc67 	bl	87ac <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    8ede:	4809      	ldr	r0, [pc, #36]	; (8f04 <SX1276SetSleep+0x34>)
    8ee0:	f7ff fc64 	bl	87ac <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    8ee4:	2000      	movs	r0, #0
    8ee6:	f013 fef2 	bl	1ccce <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
    8eea:	2000      	movs	r0, #0
    8eec:	f013 fe86 	bl	1cbfc <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
    8ef0:	4b05      	ldr	r3, [pc, #20]	; (8f08 <SX1276SetSleep+0x38>)
    8ef2:	2200      	movs	r2, #0
    8ef4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    8ef8:	bd08      	pop	{r3, pc}
    8efa:	bf00      	nop
    8efc:	20000e24 	.word	0x20000e24
    8f00:	20000f80 	.word	0x20000f80
    8f04:	20000e0c 	.word	0x20000e0c
    8f08:	20000e3c 	.word	0x20000e3c

00008f0c <SX1276SetStby>:
{
    8f0c:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    8f0e:	4808      	ldr	r0, [pc, #32]	; (8f30 <SX1276SetStby+0x24>)
    8f10:	f7ff fc4c 	bl	87ac <TimerStop>
    TimerStop( &TxTimeoutTimer );
    8f14:	4807      	ldr	r0, [pc, #28]	; (8f34 <SX1276SetStby+0x28>)
    8f16:	f7ff fc49 	bl	87ac <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    8f1a:	4807      	ldr	r0, [pc, #28]	; (8f38 <SX1276SetStby+0x2c>)
    8f1c:	f7ff fc46 	bl	87ac <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
    8f20:	2001      	movs	r0, #1
    8f22:	f013 fed4 	bl	1ccce <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
    8f26:	4b05      	ldr	r3, [pc, #20]	; (8f3c <SX1276SetStby+0x30>)
    8f28:	2200      	movs	r2, #0
    8f2a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    8f2e:	bd08      	pop	{r3, pc}
    8f30:	20000e24 	.word	0x20000e24
    8f34:	20000f80 	.word	0x20000f80
    8f38:	20000e0c 	.word	0x20000e0c
    8f3c:	20000e3c 	.word	0x20000e3c

00008f40 <SX1276Send>:
{
    8f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
    8f42:	4c62      	ldr	r4, [pc, #392]	; (90cc <SX1276Send+0x18c>)
{
    8f44:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
    8f48:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    8f4c:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
    8f4e:	b1db      	cbz	r3, 8f88 <SX1276Send+0x48>
    8f50:	2b01      	cmp	r3, #1
    8f52:	d04a      	beq.n	8fea <SX1276Send+0xaa>
    8f54:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
    8f56:	485e      	ldr	r0, [pc, #376]	; (90d0 <SX1276Send+0x190>)
    8f58:	f7ff fc28 	bl	87ac <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
    8f5c:	485d      	ldr	r0, [pc, #372]	; (90d4 <SX1276Send+0x194>)
    8f5e:	4629      	mov	r1, r5
    8f60:	f013 fe76 	bl	1cc50 <TimerSetValue>
    switch( SX1276.Settings.Modem )
    8f64:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    8f68:	2b00      	cmp	r3, #0
    8f6a:	d07b      	beq.n	9064 <SX1276Send+0x124>
    8f6c:	2b01      	cmp	r3, #1
    8f6e:	f000 8091 	beq.w	9094 <SX1276Send+0x154>
    SX1276.Settings.State = RF_TX_RUNNING;
    8f72:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
    8f74:	4857      	ldr	r0, [pc, #348]	; (90d4 <SX1276Send+0x194>)
    SX1276.Settings.State = RF_TX_RUNNING;
    8f76:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    8f7a:	f7ff fba3 	bl	86c4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    8f7e:	2003      	movs	r0, #3
    8f80:	f013 fea5 	bl	1ccce <SX1276SetOpMode>
}
    8f84:	b003      	add	sp, #12
    8f86:	bd30      	pop	{r4, r5, pc}
            if( SX1276.Settings.Fsk.FixLen == false )
    8f88:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
    8f8c:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    8f90:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
    8f94:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
    8f98:	b9d8      	cbnz	r0, 8fd2 <SX1276Send+0x92>
    SX1276WriteBuffer( 0, buffer, size );
    8f9a:	2201      	movs	r2, #1
    8f9c:	f10d 0107 	add.w	r1, sp, #7
    8fa0:	f7ff fae8 	bl	8574 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
    8fa4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8fa8:	1e53      	subs	r3, r2, #1
    8faa:	2b3f      	cmp	r3, #63	; 0x3f
    8fac:	d815      	bhi.n	8fda <SX1276Send+0x9a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
    8fae:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
    8fb2:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
    8fb6:	4629      	mov	r1, r5
    8fb8:	2000      	movs	r0, #0
    8fba:	f7ff fadb 	bl	8574 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    8fbe:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    8fc2:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
    8fc6:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    8fca:	4413      	add	r3, r2
    8fcc:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
    8fd0:	e7c1      	b.n	8f56 <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
    8fd2:	2032      	movs	r0, #50	; 0x32
    8fd4:	f013 fe65 	bl	1cca2 <SX1276Write>
    8fd8:	e7e4      	b.n	8fa4 <SX1276Send+0x64>
                memcpy1( RxTxBuffer, buffer, size );
    8fda:	483f      	ldr	r0, [pc, #252]	; (90d8 <SX1276Send+0x198>)
    8fdc:	4629      	mov	r1, r5
    8fde:	f013 fe0f 	bl	1cc00 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
    8fe2:	2320      	movs	r3, #32
    8fe4:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
    8fe8:	e7e3      	b.n	8fb2 <SX1276Send+0x72>
            if( SX1276.Settings.LoRa.IqInverted == true )
    8fea:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    8fee:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    8ff0:	b36b      	cbz	r3, 904e <SX1276Send+0x10e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    8ff2:	f013 fe61 	bl	1ccb8 <SX1276Read>
    8ff6:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    8ffa:	2033      	movs	r0, #51	; 0x33
    8ffc:	f013 fe51 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    9000:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    9002:	203b      	movs	r0, #59	; 0x3b
    9004:	f013 fe4d 	bl	1cca2 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
    9008:	f89d 1007 	ldrb.w	r1, [sp, #7]
    900c:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
    9010:	2022      	movs	r0, #34	; 0x22
    9012:	f013 fe46 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
    9016:	2100      	movs	r1, #0
    9018:	200e      	movs	r0, #14
    901a:	f013 fe42 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    901e:	2100      	movs	r1, #0
    9020:	200d      	movs	r0, #13
    9022:	f013 fe3e 	bl	1cca2 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
    9026:	2001      	movs	r0, #1
    9028:	f013 fe46 	bl	1ccb8 <SX1276Read>
    902c:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
    9030:	d104      	bne.n	903c <SX1276Send+0xfc>
                SX1276SetStby( );
    9032:	f7ff ff6b 	bl	8f0c <SX1276SetStby>
                DelayMs( 1 );
    9036:	2001      	movs	r0, #1
    9038:	f013 fe31 	bl	1cc9e <DelayMs>
    SX1276WriteBuffer( 0, buffer, size );
    903c:	4629      	mov	r1, r5
    903e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    9042:	2000      	movs	r0, #0
    9044:	f7ff fa96 	bl	8574 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
    9048:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
    904c:	e783      	b.n	8f56 <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    904e:	f013 fe33 	bl	1ccb8 <SX1276Read>
    9052:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    9056:	f041 0101 	orr.w	r1, r1, #1
    905a:	2033      	movs	r0, #51	; 0x33
    905c:	f013 fe21 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    9060:	211d      	movs	r1, #29
    9062:	e7ce      	b.n	9002 <SX1276Send+0xc2>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    9064:	2040      	movs	r0, #64	; 0x40
    9066:	f013 fe27 	bl	1ccb8 <SX1276Read>
    906a:	f000 0103 	and.w	r1, r0, #3
    906e:	2040      	movs	r0, #64	; 0x40
    9070:	f013 fe17 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    9074:	2041      	movs	r0, #65	; 0x41
    9076:	f013 fe1f 	bl	1ccb8 <SX1276Read>
    907a:	f000 013e 	and.w	r1, r0, #62	; 0x3e
    907e:	2041      	movs	r0, #65	; 0x41
    9080:	f013 fe0f 	bl	1cca2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    9084:	2035      	movs	r0, #53	; 0x35
    9086:	f013 fe17 	bl	1ccb8 <SX1276Read>
    908a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    908e:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
    9092:	e76e      	b.n	8f72 <SX1276Send+0x32>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9094:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    9098:	b173      	cbz	r3, 90b8 <SX1276Send+0x178>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    909a:	21f5      	movs	r1, #245	; 0xf5
    909c:	2011      	movs	r0, #17
    909e:	f013 fe00 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
    90a2:	2040      	movs	r0, #64	; 0x40
    90a4:	f013 fe08 	bl	1ccb8 <SX1276Read>
    90a8:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    90ac:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    90b0:	2040      	movs	r0, #64	; 0x40
    90b2:	f013 fdf6 	bl	1cca2 <SX1276Write>
    90b6:	e75c      	b.n	8f72 <SX1276Send+0x32>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    90b8:	21f7      	movs	r1, #247	; 0xf7
    90ba:	2011      	movs	r0, #17
    90bc:	f013 fdf1 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    90c0:	2040      	movs	r0, #64	; 0x40
    90c2:	f013 fdf9 	bl	1ccb8 <SX1276Read>
    90c6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    90ca:	e7ef      	b.n	90ac <SX1276Send+0x16c>
    90cc:	20000e3c 	.word	0x20000e3c
    90d0:	20000e24 	.word	0x20000e24
    90d4:	20000f80 	.word	0x20000f80
    90d8:	20001fb6 	.word	0x20001fb6

000090dc <SX1276SetRx>:
{
    90dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
    90de:	4c83      	ldr	r4, [pc, #524]	; (92ec <SX1276SetRx+0x210>)
{
    90e0:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
    90e2:	4883      	ldr	r0, [pc, #524]	; (92f0 <SX1276SetRx+0x214>)
    90e4:	f7ff fb62 	bl	87ac <TimerStop>
    switch( SX1276.Settings.Modem )
    90e8:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    90ec:	b345      	cbz	r5, 9140 <SX1276SetRx+0x64>
    90ee:	2d01      	cmp	r5, #1
    90f0:	d04d      	beq.n	918e <SX1276SetRx+0xb2>
    90f2:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
    90f4:	487f      	ldr	r0, [pc, #508]	; (92f4 <SX1276SetRx+0x218>)
    90f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    90fa:	2100      	movs	r1, #0
    90fc:	f014 fc03 	bl	1d906 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
    9100:	2301      	movs	r3, #1
    9102:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
    9106:	b137      	cbz	r7, 9116 <SX1276SetRx+0x3a>
        TimerSetValue( &RxTimeoutTimer, timeout );
    9108:	487b      	ldr	r0, [pc, #492]	; (92f8 <SX1276SetRx+0x21c>)
    910a:	4639      	mov	r1, r7
    910c:	f013 fda0 	bl	1cc50 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
    9110:	4879      	ldr	r0, [pc, #484]	; (92f8 <SX1276SetRx+0x21c>)
    9112:	f7ff fad7 	bl	86c4 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
    9116:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    911a:	2b00      	cmp	r3, #0
    911c:	f040 80dc 	bne.w	92d8 <SX1276SetRx+0x1fc>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
    9120:	2005      	movs	r0, #5
    9122:	f013 fdd4 	bl	1ccce <SX1276SetOpMode>
        if( rxContinuous == false )
    9126:	2e00      	cmp	r6, #0
    9128:	f040 80de 	bne.w	92e8 <SX1276SetRx+0x20c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
    912c:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    9130:	4872      	ldr	r0, [pc, #456]	; (92fc <SX1276SetRx+0x220>)
    9132:	f013 fd8d 	bl	1cc50 <TimerSetValue>
}
    9136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
    913a:	4870      	ldr	r0, [pc, #448]	; (92fc <SX1276SetRx+0x220>)
    913c:	f7ff bac2 	b.w	86c4 <TimerStart>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    9140:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
    9142:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    9146:	f013 fdb7 	bl	1ccb8 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
    914a:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    914e:	f041 010c 	orr.w	r1, r1, #12
    9152:	2040      	movs	r0, #64	; 0x40
    9154:	f013 fda5 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    9158:	2041      	movs	r0, #65	; 0x41
    915a:	f013 fdad 	bl	1ccb8 <SX1276Read>
    915e:	f060 013e 	orn	r1, r0, #62	; 0x3e
    9162:	b2c9      	uxtb	r1, r1
    9164:	2041      	movs	r0, #65	; 0x41
    9166:	f013 fd9c 	bl	1cca2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    916a:	2035      	movs	r0, #53	; 0x35
    916c:	f013 fda4 	bl	1ccb8 <SX1276Read>
    9170:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9174:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
    9178:	211e      	movs	r1, #30
    917a:	200d      	movs	r0, #13
    917c:	f013 fd91 	bl	1cca2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    9180:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    9184:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    9188:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
    918c:	e7b2      	b.n	90f4 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
    918e:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    9192:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    9194:	b33b      	cbz	r3, 91e6 <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    9196:	f013 fd8f 	bl	1ccb8 <SX1276Read>
    919a:	f040 0141 	orr.w	r1, r0, #65	; 0x41
    919e:	b2c9      	uxtb	r1, r1
    91a0:	2033      	movs	r0, #51	; 0x33
    91a2:	f013 fd7e 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    91a6:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    91a8:	203b      	movs	r0, #59	; 0x3b
    91aa:	f013 fd7a 	bl	1cca2 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    91ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    91b2:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    91b4:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    91b8:	d87d      	bhi.n	92b6 <SX1276SetRx+0x1da>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    91ba:	f013 fd7d 	bl	1ccb8 <SX1276Read>
    91be:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    91c2:	2031      	movs	r0, #49	; 0x31
    91c4:	f013 fd6d 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
    91c8:	2100      	movs	r1, #0
    91ca:	2030      	movs	r0, #48	; 0x30
    91cc:	f013 fd69 	bl	1cca2 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
    91d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    91d4:	2b08      	cmp	r3, #8
    91d6:	d81c      	bhi.n	9212 <SX1276SetRx+0x136>
    91d8:	e8df f003 	tbb	[pc, r3]
    91dc:	4a403610 	.word	0x4a403610
    91e0:	68685e54 	.word	0x68685e54
    91e4:	68          	.byte	0x68
    91e5:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    91e6:	f013 fd67 	bl	1ccb8 <SX1276Read>
    91ea:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    91ee:	f041 0101 	orr.w	r1, r1, #1
    91f2:	2033      	movs	r0, #51	; 0x33
    91f4:	f013 fd55 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    91f8:	211d      	movs	r1, #29
    91fa:	e7d5      	b.n	91a8 <SX1276SetRx+0xcc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
    91fc:	202f      	movs	r0, #47	; 0x2f
    91fe:	2148      	movs	r1, #72	; 0x48
    9200:	f013 fd4f 	bl	1cca2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
    9204:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    9208:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
    920c:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    920e:	f7ff fb9b 	bl	8948 <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9212:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
    9216:	f894 6132 	ldrb.w	r6, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    921a:	2b00      	cmp	r3, #0
    921c:	d052      	beq.n	92c4 <SX1276SetRx+0x1e8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    921e:	211d      	movs	r1, #29
    9220:	2011      	movs	r0, #17
    9222:	f013 fd3e 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
    9226:	2040      	movs	r0, #64	; 0x40
    9228:	f013 fd46 	bl	1ccb8 <SX1276Read>
    922c:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    9230:	2040      	movs	r0, #64	; 0x40
    9232:	f013 fd36 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
    9236:	2100      	movs	r1, #0
    9238:	200f      	movs	r0, #15
    923a:	f013 fd32 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    923e:	2100      	movs	r1, #0
    9240:	200d      	movs	r0, #13
    9242:	f013 fd2e 	bl	1cca2 <SX1276Write>
        break;
    9246:	e755      	b.n	90f4 <SX1276SetRx+0x18>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    9248:	202f      	movs	r0, #47	; 0x2f
    924a:	2144      	movs	r1, #68	; 0x44
    924c:	f013 fd29 	bl	1cca2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    9250:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    9254:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
    9258:	3034      	adds	r0, #52	; 0x34
    925a:	e7d8      	b.n	920e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    925c:	202f      	movs	r0, #47	; 0x2f
    925e:	2144      	movs	r1, #68	; 0x44
    9260:	f013 fd1f 	bl	1cca2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
    9264:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    9268:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
    926c:	3004      	adds	r0, #4
    926e:	e7ce      	b.n	920e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    9270:	202f      	movs	r0, #47	; 0x2f
    9272:	2144      	movs	r1, #68	; 0x44
    9274:	f013 fd15 	bl	1cca2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
    9278:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    927c:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
    9280:	305e      	adds	r0, #94	; 0x5e
    9282:	e7c4      	b.n	920e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    9284:	202f      	movs	r0, #47	; 0x2f
    9286:	2144      	movs	r1, #68	; 0x44
    9288:	f013 fd0b 	bl	1cca2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
    928c:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    9290:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
    9294:	3012      	adds	r0, #18
    9296:	e7ba      	b.n	920e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    9298:	202f      	movs	r0, #47	; 0x2f
    929a:	2144      	movs	r1, #68	; 0x44
    929c:	f013 fd01 	bl	1cca2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    92a0:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    92a4:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
    92a8:	30c6      	adds	r0, #198	; 0xc6
    92aa:	e7b0      	b.n	920e <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
    92ac:	2140      	movs	r1, #64	; 0x40
    92ae:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
    92b0:	f013 fcf7 	bl	1cca2 <SX1276Write>
    92b4:	e7ad      	b.n	9212 <SX1276SetRx+0x136>
    92b6:	f013 fcff 	bl	1ccb8 <SX1276Read>
    92ba:	f060 017f 	orn	r1, r0, #127	; 0x7f
    92be:	b2c9      	uxtb	r1, r1
    92c0:	2031      	movs	r0, #49	; 0x31
    92c2:	e7f5      	b.n	92b0 <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    92c4:	211f      	movs	r1, #31
    92c6:	2011      	movs	r0, #17
    92c8:	f013 fceb 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    92cc:	2040      	movs	r0, #64	; 0x40
    92ce:	f013 fcf3 	bl	1ccb8 <SX1276Read>
    92d2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    92d6:	e7ab      	b.n	9230 <SX1276SetRx+0x154>
        if( rxContinuous == true )
    92d8:	b126      	cbz	r6, 92e4 <SX1276SetRx+0x208>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
    92da:	2005      	movs	r0, #5
}
    92dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
    92e0:	f013 bcf5 	b.w	1ccce <SX1276SetOpMode>
    92e4:	2006      	movs	r0, #6
    92e6:	e7f9      	b.n	92dc <SX1276SetRx+0x200>
}
    92e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92ea:	bf00      	nop
    92ec:	20000e3c 	.word	0x20000e3c
    92f0:	20000f80 	.word	0x20000f80
    92f4:	20001fb6 	.word	0x20001fb6
    92f8:	20000e24 	.word	0x20000e24
    92fc:	20000e0c 	.word	0x20000e0c

00009300 <SX1276ReadRssi>:
{
    9300:	b508      	push	{r3, lr}
    switch( modem )
    9302:	b120      	cbz	r0, 930e <SX1276ReadRssi+0xe>
    9304:	2801      	cmp	r0, #1
    9306:	d00a      	beq.n	931e <SX1276ReadRssi+0x1e>
    9308:	f04f 30ff 	mov.w	r0, #4294967295
}
    930c:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    930e:	2011      	movs	r0, #17
    9310:	f013 fcd2 	bl	1ccb8 <SX1276Read>
    9314:	f3c0 0047 	ubfx	r0, r0, #1, #8
    9318:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    931a:	b200      	sxth	r0, r0
    931c:	e7f6      	b.n	930c <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    931e:	4b08      	ldr	r3, [pc, #32]	; (9340 <SX1276ReadRssi+0x40>)
    9320:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    9324:	4b07      	ldr	r3, [pc, #28]	; (9344 <SX1276ReadRssi+0x44>)
    9326:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    9328:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    932c:	d903      	bls.n	9336 <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    932e:	f013 fcc3 	bl	1ccb8 <SX1276Read>
    9332:	389d      	subs	r0, #157	; 0x9d
    9334:	e7f1      	b.n	931a <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    9336:	f013 fcbf 	bl	1ccb8 <SX1276Read>
    933a:	38a4      	subs	r0, #164	; 0xa4
    933c:	e7ed      	b.n	931a <SX1276ReadRssi+0x1a>
    933e:	bf00      	nop
    9340:	20000e3c 	.word	0x20000e3c
    9344:	1f4add40 	.word	0x1f4add40

00009348 <SX1276SetModem>:
{
    9348:	b510      	push	{r4, lr}
    934a:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
    934c:	2001      	movs	r0, #1
    934e:	f013 fcb3 	bl	1ccb8 <SX1276Read>
        SX1276.Settings.Modem = MODEM_LORA;
    9352:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
    9356:	42a0      	cmp	r0, r4
    9358:	4b17      	ldr	r3, [pc, #92]	; (93b8 <SX1276SetModem+0x70>)
    935a:	d102      	bne.n	9362 <SX1276SetModem+0x1a>
    935c:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
    9360:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
    9362:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
    9364:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    9368:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
    936c:	d013      	beq.n	9396 <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    936e:	f013 fcae 	bl	1ccce <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
    9372:	2001      	movs	r0, #1
    9374:	f013 fca0 	bl	1ccb8 <SX1276Read>
    9378:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    937c:	2001      	movs	r0, #1
    937e:	f013 fc90 	bl	1cca2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    9382:	2100      	movs	r1, #0
    9384:	2040      	movs	r0, #64	; 0x40
    9386:	f013 fc8c 	bl	1cca2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
    938a:	2130      	movs	r1, #48	; 0x30
}
    938c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    9390:	2041      	movs	r0, #65	; 0x41
    9392:	f013 bc86 	b.w	1cca2 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    9396:	f013 fc9a 	bl	1ccce <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
    939a:	4620      	mov	r0, r4
    939c:	f013 fc8c 	bl	1ccb8 <SX1276Read>
    93a0:	f060 017f 	orn	r1, r0, #127	; 0x7f
    93a4:	b2c9      	uxtb	r1, r1
    93a6:	4620      	mov	r0, r4
    93a8:	f013 fc7b 	bl	1cca2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    93ac:	2100      	movs	r1, #0
    93ae:	2040      	movs	r0, #64	; 0x40
    93b0:	f013 fc77 	bl	1cca2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    93b4:	2100      	movs	r1, #0
    93b6:	e7e9      	b.n	938c <SX1276SetModem+0x44>
    93b8:	20000e3c 	.word	0x20000e3c

000093bc <SX1276Init>:
{
    93bc:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
    93be:	4b17      	ldr	r3, [pc, #92]	; (941c <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    93c0:	4917      	ldr	r1, [pc, #92]	; (9420 <SX1276Init+0x64>)
    RadioEvents = events;
    93c2:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    93c4:	4817      	ldr	r0, [pc, #92]	; (9424 <SX1276Init+0x68>)
    93c6:	4c18      	ldr	r4, [pc, #96]	; (9428 <SX1276Init+0x6c>)
    93c8:	f013 fc3a 	bl	1cc40 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
    93cc:	4914      	ldr	r1, [pc, #80]	; (9420 <SX1276Init+0x64>)
    93ce:	4817      	ldr	r0, [pc, #92]	; (942c <SX1276Init+0x70>)
    93d0:	f013 fc36 	bl	1cc40 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
    93d4:	4912      	ldr	r1, [pc, #72]	; (9420 <SX1276Init+0x64>)
    93d6:	4816      	ldr	r0, [pc, #88]	; (9430 <SX1276Init+0x74>)
    93d8:	f013 fc32 	bl	1cc40 <TimerInit>
    SX1276Reset( );
    93dc:	f7fe ff3c 	bl	8258 <SX1276Reset>
    RxChainCalibration( );
    93e0:	f7ff fd2c 	bl	8e3c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    93e4:	2000      	movs	r0, #0
    93e6:	f013 fc72 	bl	1ccce <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
    93ea:	4812      	ldr	r0, [pc, #72]	; (9434 <SX1276Init+0x78>)
    93ec:	f7fe ff4a 	bl	8284 <SX1276IoIrqInit>
    93f0:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
    93f2:	7820      	ldrb	r0, [r4, #0]
    93f4:	f7ff ffa8 	bl	9348 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    93f8:	3501      	adds	r5, #1
    93fa:	78a1      	ldrb	r1, [r4, #2]
    93fc:	7860      	ldrb	r0, [r4, #1]
    93fe:	f013 fc50 	bl	1cca2 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    9402:	2d10      	cmp	r5, #16
    9404:	f104 0403 	add.w	r4, r4, #3
    9408:	d1f3      	bne.n	93f2 <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
    940a:	2000      	movs	r0, #0
    940c:	f7ff ff9c 	bl	9348 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
    9410:	4b09      	ldr	r3, [pc, #36]	; (9438 <SX1276Init+0x7c>)
    9412:	2200      	movs	r2, #0
    9414:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    9418:	bd38      	pop	{r3, r4, r5, pc}
    941a:	bf00      	nop
    941c:	20000e08 	.word	0x20000e08
    9420:	00009a01 	.word	0x00009a01
    9424:	20000f80 	.word	0x20000f80
    9428:	0001f7b5 	.word	0x0001f7b5
    942c:	20000e24 	.word	0x20000e24
    9430:	20000e0c 	.word	0x20000e0c
    9434:	200000b4 	.word	0x200000b4
    9438:	20000e3c 	.word	0x20000e3c

0000943c <SX1276SetRxConfig>:
{
    943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9440:	b087      	sub	sp, #28
    9442:	4681      	mov	r9, r0
    9444:	9300      	str	r3, [sp, #0]
    9446:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    944a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
    944e:	9301      	str	r3, [sp, #4]
    9450:	460c      	mov	r4, r1
    9452:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    9456:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    945a:	9104      	str	r1, [sp, #16]
    945c:	4615      	mov	r5, r2
    945e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    9462:	9205      	str	r2, [sp, #20]
    9464:	f8cd c00c 	str.w	ip, [sp, #12]
    9468:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    946c:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
    9470:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
    9474:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    9478:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    947c:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
    947e:	f7ff ff63 	bl	9348 <SX1276SetModem>
    switch( modem )
    9482:	e9dd c103 	ldrd	ip, r1, [sp, #12]
    9486:	9a05      	ldr	r2, [sp, #20]
    9488:	f1b9 0f00 	cmp.w	r9, #0
    948c:	d005      	beq.n	949a <SX1276SetRxConfig+0x5e>
    948e:	f1b9 0f01 	cmp.w	r9, #1
    9492:	d064      	beq.n	955e <SX1276SetRxConfig+0x122>
}
    9494:	b007      	add	sp, #28
    9496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    949a:	488f      	ldr	r0, [pc, #572]	; (96d8 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    949c:	9200      	str	r2, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    949e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    94a2:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    94a6:	f880 c102 	strb.w	ip, [r0, #258]	; 0x102
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    94aa:	e9c0 b53d 	strd	fp, r5, [r0, #244]	; 0xf4
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    94ae:	f880 1101 	strb.w	r1, [r0, #257]	; 0x101
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    94b2:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
    94b6:	f880 60fe 	strb.w	r6, [r0, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
    94ba:	f880 8100 	strb.w	r8, [r0, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    94be:	f8a0 70fc 	strh.w	r7, [r0, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    94c2:	fb03 fa0a 	mul.w	sl, r3, sl
    94c6:	fbba f3f5 	udiv	r3, sl, r5
    94ca:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    94ce:	4b83      	ldr	r3, [pc, #524]	; (96dc <SX1276SetRxConfig+0x2a0>)
    94d0:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    94d4:	2002      	movs	r0, #2
    94d6:	f3c5 2107 	ubfx	r1, r5, #8, #8
    94da:	f013 fbe2 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    94de:	b2e9      	uxtb	r1, r5
    94e0:	2003      	movs	r0, #3
    94e2:	f013 fbde 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    94e6:	4620      	mov	r0, r4
    94e8:	f7ff f98c 	bl	8804 <GetFskBandwidthRegValue>
    94ec:	4601      	mov	r1, r0
    94ee:	2012      	movs	r0, #18
    94f0:	f013 fbd7 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    94f4:	4658      	mov	r0, fp
    94f6:	f7ff f985 	bl	8804 <GetFskBandwidthRegValue>
    94fa:	4601      	mov	r1, r0
    94fc:	2013      	movs	r0, #19
    94fe:	f013 fbd0 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    9502:	0a39      	lsrs	r1, r7, #8
    9504:	2025      	movs	r0, #37	; 0x25
    9506:	f013 fbcc 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    950a:	b2f9      	uxtb	r1, r7
    950c:	2026      	movs	r0, #38	; 0x26
    950e:	f013 fbc8 	bl	1cca2 <SX1276Write>
            if( fixLen == 1 )
    9512:	b316      	cbz	r6, 955a <SX1276SetRxConfig+0x11e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    9514:	9a00      	ldr	r2, [sp, #0]
    9516:	4611      	mov	r1, r2
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    9518:	2032      	movs	r0, #50	; 0x32
    951a:	f013 fbc2 	bl	1cca2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    951e:	2030      	movs	r0, #48	; 0x30
    9520:	f013 fbca 	bl	1ccb8 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    9524:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    9526:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    952a:	bf14      	ite	ne
    952c:	2100      	movne	r1, #0
    952e:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    9532:	ea40 1808 	orr.w	r8, r0, r8, lsl #4
    9536:	ea41 0108 	orr.w	r1, r1, r8
            SX1276Write( REG_PACKETCONFIG1,
    953a:	b2c9      	uxtb	r1, r1
    953c:	2030      	movs	r0, #48	; 0x30
    953e:	f013 fbb0 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    9542:	2031      	movs	r0, #49	; 0x31
    9544:	f013 fbb8 	bl	1ccb8 <SX1276Read>
    9548:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    954c:	b2c9      	uxtb	r1, r1
    954e:	2031      	movs	r0, #49	; 0x31
}
    9550:	b007      	add	sp, #28
    9552:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9556:	f013 bba4 	b.w	1cca2 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    955a:	21ff      	movs	r1, #255	; 0xff
    955c:	e7dc      	b.n	9518 <SX1276SetRxConfig+0xdc>
            if( bandwidth > 2 )
    955e:	2c02      	cmp	r4, #2
    9560:	d900      	bls.n	9564 <SX1276SetRxConfig+0x128>
                while( 1 );
    9562:	e7fe      	b.n	9562 <SX1276SetRxConfig+0x126>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    9564:	485c      	ldr	r0, [pc, #368]	; (96d8 <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.LoRa.Coderate = coderate;
    9566:	9b00      	ldr	r3, [sp, #0]
    9568:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
    956c:	2d06      	cmp	r5, #6
    956e:	46ab      	mov	fp, r5
    9570:	bf38      	it	cc
    9572:	f04f 0b06 	movcc.w	fp, #6
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    9576:	9b01      	ldr	r3, [sp, #4]
    9578:	f880 312f 	strb.w	r3, [r0, #303]	; 0x12f
            bandwidth += 7;
    957c:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    957e:	f1bb 0f0c 	cmp.w	fp, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    9582:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    9584:	f8a0 712a 	strh.w	r7, [r0, #298]	; 0x12a
    9588:	bf28      	it	cs
    958a:	f04f 0b0c 	movcs.w	fp, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    958e:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    9590:	e9c0 4548 	strd	r4, r5, [r0, #288]	; 0x120
            SX1276.Settings.LoRa.FixLen = fixLen;
    9594:	f880 612c 	strb.w	r6, [r0, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    9598:	f880 212d 	strb.w	r2, [r0, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    959c:	f880 812e 	strb.w	r8, [r0, #302]	; 0x12e
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    95a0:	f880 3130 	strb.w	r3, [r0, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    95a4:	f880 1131 	strb.w	r1, [r0, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    95a8:	f880 c132 	strb.w	ip, [r0, #306]	; 0x132
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    95ac:	4681      	mov	r9, r0
    95ae:	d178      	bne.n	96a2 <SX1276SetRxConfig+0x266>
    95b0:	f1ab 030b 	sub.w	r3, fp, #11
    95b4:	2b01      	cmp	r3, #1
    95b6:	bf8c      	ite	hi
    95b8:	2300      	movhi	r3, #0
    95ba:	2301      	movls	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    95bc:	201d      	movs	r0, #29
    95be:	9201      	str	r2, [sp, #4]
    95c0:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
    95c4:	f013 fb78 	bl	1ccb8 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    95c8:	9b00      	ldr	r3, [sp, #0]
    95ca:	ea46 0143 	orr.w	r1, r6, r3, lsl #1
    95ce:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    95d2:	b2c9      	uxtb	r1, r1
    95d4:	201d      	movs	r0, #29
    95d6:	f013 fb64 	bl	1cca2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    95da:	201e      	movs	r0, #30
    95dc:	f013 fb6c 	bl	1ccb8 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    95e0:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    95e4:	ea41 0888 	orr.w	r8, r1, r8, lsl #2
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    95e8:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    95ec:	ea48 1b0b 	orr.w	fp, r8, fp, lsl #4
    95f0:	ea4b 0b00 	orr.w	fp, fp, r0
    95f4:	fa5f f18b 	uxtb.w	r1, fp
    95f8:	201e      	movs	r0, #30
    95fa:	f013 fb52 	bl	1cca2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    95fe:	2026      	movs	r0, #38	; 0x26
    9600:	f013 fb5a 	bl	1ccb8 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    9604:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    9608:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    960c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    9610:	b2c9      	uxtb	r1, r1
    9612:	2026      	movs	r0, #38	; 0x26
    9614:	f013 fb45 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    9618:	fa5f f18a 	uxtb.w	r1, sl
    961c:	201f      	movs	r0, #31
    961e:	f013 fb40 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    9622:	0a39      	lsrs	r1, r7, #8
    9624:	2020      	movs	r0, #32
    9626:	f013 fb3c 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    962a:	b2f9      	uxtb	r1, r7
    962c:	2021      	movs	r0, #33	; 0x21
    962e:	f013 fb38 	bl	1cca2 <SX1276Write>
            if( fixLen == 1 )
    9632:	9a01      	ldr	r2, [sp, #4]
    9634:	b11e      	cbz	r6, 963e <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    9636:	4611      	mov	r1, r2
    9638:	2022      	movs	r0, #34	; 0x22
    963a:	f013 fb32 	bl	1cca2 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    963e:	f899 312f 	ldrb.w	r3, [r9, #303]	; 0x12f
    9642:	b16b      	cbz	r3, 9660 <SX1276SetRxConfig+0x224>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    9644:	2044      	movs	r0, #68	; 0x44
    9646:	f013 fb37 	bl	1ccb8 <SX1276Read>
    964a:	f060 017f 	orn	r1, r0, #127	; 0x7f
    964e:	b2c9      	uxtb	r1, r1
    9650:	2044      	movs	r0, #68	; 0x44
    9652:	f013 fb26 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    9656:	f899 1130 	ldrb.w	r1, [r9, #304]	; 0x130
    965a:	2024      	movs	r0, #36	; 0x24
    965c:	f013 fb21 	bl	1cca2 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    9660:	2c09      	cmp	r4, #9
    9662:	d12b      	bne.n	96bc <SX1276SetRxConfig+0x280>
    9664:	f8d9 20e4 	ldr.w	r2, [r9, #228]	; 0xe4
    9668:	4b1d      	ldr	r3, [pc, #116]	; (96e0 <SX1276SetRxConfig+0x2a4>)
    966a:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    966c:	f04f 0102 	mov.w	r1, #2
    9670:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    9674:	d91e      	bls.n	96b4 <SX1276SetRxConfig+0x278>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    9676:	f013 fb14 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    967a:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    967c:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    967e:	f013 fb10 	bl	1cca2 <SX1276Write>
            if( datarate == 6 )
    9682:	2d06      	cmp	r5, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9684:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    9688:	d81b      	bhi.n	96c2 <SX1276SetRxConfig+0x286>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    968a:	f013 fb15 	bl	1ccb8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    968e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    9692:	f041 0105 	orr.w	r1, r1, #5
    9696:	2031      	movs	r0, #49	; 0x31
    9698:	f013 fb03 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    969c:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    969e:	2037      	movs	r0, #55	; 0x37
    96a0:	e756      	b.n	9550 <SX1276SetRxConfig+0x114>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    96a2:	2c08      	cmp	r4, #8
    96a4:	d104      	bne.n	96b0 <SX1276SetRxConfig+0x274>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    96a6:	2d0b      	cmp	r5, #11
    96a8:	bf94      	ite	ls
    96aa:	2300      	movls	r3, #0
    96ac:	2301      	movhi	r3, #1
    96ae:	e785      	b.n	95bc <SX1276SetRxConfig+0x180>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    96b0:	2300      	movs	r3, #0
    96b2:	e783      	b.n	95bc <SX1276SetRxConfig+0x180>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    96b4:	f013 faf5 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    96b8:	217f      	movs	r1, #127	; 0x7f
    96ba:	e7df      	b.n	967c <SX1276SetRxConfig+0x240>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    96bc:	2103      	movs	r1, #3
    96be:	2036      	movs	r0, #54	; 0x36
    96c0:	e7dd      	b.n	967e <SX1276SetRxConfig+0x242>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    96c2:	f013 faf9 	bl	1ccb8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    96c6:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    96ca:	f041 0103 	orr.w	r1, r1, #3
    96ce:	2031      	movs	r0, #49	; 0x31
    96d0:	f013 fae7 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    96d4:	210a      	movs	r1, #10
    96d6:	e7e2      	b.n	969e <SX1276SetRxConfig+0x262>
    96d8:	20000e3c 	.word	0x20000e3c
    96dc:	01e84800 	.word	0x01e84800
    96e0:	1f4add40 	.word	0x1f4add40

000096e4 <SX1276SetTxConfig>:
{
    96e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96e8:	b087      	sub	sp, #28
    96ea:	461d      	mov	r5, r3
    96ec:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    96f0:	9302      	str	r3, [sp, #8]
    96f2:	468a      	mov	sl, r1
    96f4:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    96f8:	9918      	ldr	r1, [sp, #96]	; 0x60
    96fa:	9304      	str	r3, [sp, #16]
    96fc:	4617      	mov	r7, r2
    96fe:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    9702:	9205      	str	r2, [sp, #20]
    9704:	9103      	str	r1, [sp, #12]
    9706:	9001      	str	r0, [sp, #4]
    9708:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    970c:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    9710:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
    9714:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    9718:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    971c:	f7ff fe14 	bl	9348 <SX1276SetModem>
    SX1276SetRfTxPower( power );
    9720:	4650      	mov	r0, sl
    9722:	f7fe ff43 	bl	85ac <SX1276SetRfTxPower>
    switch( modem )
    9726:	9a01      	ldr	r2, [sp, #4]
    9728:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    972c:	b12a      	cbz	r2, 973a <SX1276SetTxConfig+0x56>
    972e:	2a01      	cmp	r2, #1
    9730:	9a05      	ldr	r2, [sp, #20]
    9732:	d05e      	beq.n	97f2 <SX1276SetTxConfig+0x10e>
}
    9734:	b007      	add	sp, #28
    9736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    973a:	4a78      	ldr	r2, [pc, #480]	; (991c <SX1276SetTxConfig+0x238>)
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    973c:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9740:	f643 5309 	movw	r3, #15625	; 0x3d09
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    9744:	e9c2 753b 	strd	r7, r5, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
    9748:	f8c2 80f8 	str.w	r8, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.CrcOn = crcOn;
    974c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.TxTimeout = timeout;
    9750:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            SX1276.Settings.Fsk.Power = power;
    9754:	f882 a0e8 	strb.w	sl, [r2, #232]	; 0xe8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9758:	fbb7 f1f3 	udiv	r1, r7, r3
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    975c:	f8a2 90fc 	strh.w	r9, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
    9760:	f882 60fe 	strb.w	r6, [r2, #254]	; 0xfe
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9764:	fb03 7211 	mls	r2, r3, r1, r7
    9768:	f641 6784 	movw	r7, #7812	; 0x1e84
    976c:	eb07 2702 	add.w	r7, r7, r2, lsl #8
    9770:	fbb7 f7f3 	udiv	r7, r7, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    9774:	eb07 2701 	add.w	r7, r7, r1, lsl #8
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
    9778:	f3c7 2107 	ubfx	r1, r7, #8, #8
    977c:	2004      	movs	r0, #4
    977e:	f013 fa90 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
    9782:	b2f9      	uxtb	r1, r7
    9784:	2005      	movs	r0, #5
    9786:	f013 fa8c 	bl	1cca2 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    978a:	4b65      	ldr	r3, [pc, #404]	; (9920 <SX1276SetTxConfig+0x23c>)
    978c:	fbb3 f8f8 	udiv	r8, r3, r8
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    9790:	2002      	movs	r0, #2
    9792:	f3c8 2107 	ubfx	r1, r8, #8, #8
    9796:	f013 fa84 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    979a:	fa5f f188 	uxtb.w	r1, r8
    979e:	2003      	movs	r0, #3
    97a0:	f013 fa7f 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    97a4:	ea4f 2119 	mov.w	r1, r9, lsr #8
    97a8:	2025      	movs	r0, #37	; 0x25
    97aa:	f013 fa7a 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    97ae:	fa5f f189 	uxtb.w	r1, r9
    97b2:	2026      	movs	r0, #38	; 0x26
    97b4:	f013 fa75 	bl	1cca2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    97b8:	2030      	movs	r0, #48	; 0x30
    97ba:	f013 fa7d 	bl	1ccb8 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    97be:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    97c0:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    97c4:	bf14      	ite	ne
    97c6:	2100      	movne	r1, #0
    97c8:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    97cc:	ea40 1404 	orr.w	r4, r0, r4, lsl #4
    97d0:	4321      	orrs	r1, r4
            SX1276Write( REG_PACKETCONFIG1,
    97d2:	b2c9      	uxtb	r1, r1
    97d4:	2030      	movs	r0, #48	; 0x30
    97d6:	f013 fa64 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    97da:	2031      	movs	r0, #49	; 0x31
    97dc:	f013 fa6c 	bl	1ccb8 <SX1276Read>
    97e0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    97e4:	b2c9      	uxtb	r1, r1
    97e6:	2031      	movs	r0, #49	; 0x31
}
    97e8:	b007      	add	sp, #28
    97ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    97ee:	f013 ba58 	b.w	1cca2 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    97f2:	4f4a      	ldr	r7, [pc, #296]	; (991c <SX1276SetTxConfig+0x238>)
            if( bandwidth > 2 )
    97f4:	2d02      	cmp	r5, #2
            SX1276.Settings.LoRa.Power = power;
    97f6:	f887 a11c 	strb.w	sl, [r7, #284]	; 0x11c
            if( bandwidth > 2 )
    97fa:	d900      	bls.n	97fe <SX1276SetTxConfig+0x11a>
                while( 1 );
    97fc:	e7fe      	b.n	97fc <SX1276SetTxConfig+0x118>
            bandwidth += 7;
    97fe:	f1b8 0f06 	cmp.w	r8, #6
    9802:	46c2      	mov	sl, r8
    9804:	bf38      	it	cc
    9806:	f04f 0a06 	movcc.w	sl, #6
    980a:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    980c:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    9810:	9802      	ldr	r0, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
    9812:	f887 b129 	strb.w	fp, [r7, #297]	; 0x129
    9816:	bf28      	it	cs
    9818:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    981c:	2d07      	cmp	r5, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    981e:	e9c7 5848 	strd	r5, r8, [r7, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    9822:	f8a7 912a 	strh.w	r9, [r7, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    9826:	f887 612c 	strb.w	r6, [r7, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    982a:	f887 212f 	strb.w	r2, [r7, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    982e:	f887 0130 	strb.w	r0, [r7, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
    9832:	f887 412e 	strb.w	r4, [r7, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    9836:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    983a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    983e:	d158      	bne.n	98f2 <SX1276SetTxConfig+0x20e>
    9840:	f1aa 030b 	sub.w	r3, sl, #11
    9844:	2b01      	cmp	r3, #1
    9846:	bf8c      	ite	hi
    9848:	2300      	movhi	r3, #0
    984a:	2301      	movls	r3, #1
    984c:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9850:	b16a      	cbz	r2, 986e <SX1276SetTxConfig+0x18a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    9852:	2044      	movs	r0, #68	; 0x44
    9854:	f013 fa30 	bl	1ccb8 <SX1276Read>
    9858:	f060 017f 	orn	r1, r0, #127	; 0x7f
    985c:	b2c9      	uxtb	r1, r1
    985e:	2044      	movs	r0, #68	; 0x44
    9860:	f013 fa1f 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    9864:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
    9868:	2024      	movs	r0, #36	; 0x24
    986a:	f013 fa1a 	bl	1cca2 <SX1276Write>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    986e:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    9872:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    9874:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    9878:	f013 fa1e 	bl	1ccb8 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG1,
    987c:	b2e9      	uxtb	r1, r5
    987e:	201d      	movs	r0, #29
    9880:	f013 fa0f 	bl	1cca2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    9884:	201e      	movs	r0, #30
    9886:	f013 fa17 	bl	1ccb8 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    988a:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    988c:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    9890:	ea44 1a0a 	orr.w	sl, r4, sl, lsl #4
    9894:	ea4a 0a00 	orr.w	sl, sl, r0
    9898:	fa5f f18a 	uxtb.w	r1, sl
    989c:	201e      	movs	r0, #30
    989e:	f013 fa00 	bl	1cca2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    98a2:	2026      	movs	r0, #38	; 0x26
    98a4:	f013 fa08 	bl	1ccb8 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    98a8:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    98ac:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    98b0:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    98b4:	b2c9      	uxtb	r1, r1
    98b6:	2026      	movs	r0, #38	; 0x26
    98b8:	f013 f9f3 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    98bc:	ea4f 2119 	mov.w	r1, r9, lsr #8
    98c0:	2020      	movs	r0, #32
    98c2:	f013 f9ee 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    98c6:	2021      	movs	r0, #33	; 0x21
    98c8:	fa5f f189 	uxtb.w	r1, r9
    98cc:	f013 f9e9 	bl	1cca2 <SX1276Write>
            if( datarate == 6 )
    98d0:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    98d4:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    98d8:	d815      	bhi.n	9906 <SX1276SetTxConfig+0x222>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    98da:	f013 f9ed 	bl	1ccb8 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    98de:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    98e2:	f041 0105 	orr.w	r1, r1, #5
    98e6:	2031      	movs	r0, #49	; 0x31
    98e8:	f013 f9db 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    98ec:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    98ee:	2037      	movs	r0, #55	; 0x37
    98f0:	e77a      	b.n	97e8 <SX1276SetTxConfig+0x104>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    98f2:	2d08      	cmp	r5, #8
    98f4:	d105      	bne.n	9902 <SX1276SetTxConfig+0x21e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    98f6:	f1b8 0f0b 	cmp.w	r8, #11
    98fa:	bf94      	ite	ls
    98fc:	2300      	movls	r3, #0
    98fe:	2301      	movhi	r3, #1
    9900:	e7a4      	b.n	984c <SX1276SetTxConfig+0x168>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    9902:	2300      	movs	r3, #0
    9904:	e7a2      	b.n	984c <SX1276SetTxConfig+0x168>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9906:	f013 f9d7 	bl	1ccb8 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    990a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    990e:	f041 0103 	orr.w	r1, r1, #3
    9912:	2031      	movs	r0, #49	; 0x31
    9914:	f013 f9c5 	bl	1cca2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9918:	210a      	movs	r1, #10
    991a:	e7e8      	b.n	98ee <SX1276SetTxConfig+0x20a>
    991c:	20000e3c 	.word	0x20000e3c
    9920:	01e84800 	.word	0x01e84800

00009924 <SX1276SetTxContinuousWave>:
{
    9924:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
    9926:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
    992a:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
    992c:	4354      	muls	r4, r2
{
    992e:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
    9930:	f7ff f80a 	bl	8948 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
    9934:	2300      	movs	r3, #0
    9936:	2205      	movs	r2, #5
    9938:	e9cd 3201 	strd	r3, r2, [sp, #4]
    993c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
    9940:	e9cd 3306 	strd	r3, r3, [sp, #24]
    9944:	e9cd 3304 	strd	r3, r3, [sp, #16]
    9948:	9303      	str	r3, [sp, #12]
    994a:	4618      	mov	r0, r3
    994c:	4629      	mov	r1, r5
    994e:	9200      	str	r2, [sp, #0]
    9950:	9408      	str	r4, [sp, #32]
    9952:	461a      	mov	r2, r3
    9954:	f7ff fec6 	bl	96e4 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
    9958:	2031      	movs	r0, #49	; 0x31
    995a:	f013 f9ad 	bl	1ccb8 <SX1276Read>
    995e:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
    9962:	2031      	movs	r0, #49	; 0x31
    9964:	f013 f99d 	bl	1cca2 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    9968:	4d0c      	ldr	r5, [pc, #48]	; (999c <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
    996a:	21f0      	movs	r1, #240	; 0xf0
    996c:	2040      	movs	r0, #64	; 0x40
    996e:	f013 f998 	bl	1cca2 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
    9972:	21a0      	movs	r1, #160	; 0xa0
    9974:	2041      	movs	r0, #65	; 0x41
    9976:	f013 f994 	bl	1cca2 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    997a:	4621      	mov	r1, r4
    997c:	4628      	mov	r0, r5
    997e:	f013 f967 	bl	1cc50 <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
    9982:	4b07      	ldr	r3, [pc, #28]	; (99a0 <SX1276SetTxContinuousWave+0x7c>)
    9984:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
    9986:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
    9988:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    998c:	f7fe fe9a 	bl	86c4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    9990:	2003      	movs	r0, #3
}
    9992:	b00b      	add	sp, #44	; 0x2c
    9994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    9998:	f013 b999 	b.w	1ccce <SX1276SetOpMode>
    999c:	20000f80 	.word	0x20000f80
    99a0:	20000e3c 	.word	0x20000e3c

000099a4 <SX1276SetMaxPayloadLength>:
{
    99a4:	b538      	push	{r3, r4, r5, lr}
    99a6:	4605      	mov	r5, r0
    99a8:	460c      	mov	r4, r1
    SX1276SetModem( modem );
    99aa:	f7ff fccd 	bl	9348 <SX1276SetModem>
    switch( modem )
    99ae:	b115      	cbz	r5, 99b6 <SX1276SetMaxPayloadLength+0x12>
    99b0:	2d01      	cmp	r5, #1
    99b2:	d00b      	beq.n	99cc <SX1276SetMaxPayloadLength+0x28>
}
    99b4:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
    99b6:	4b07      	ldr	r3, [pc, #28]	; (99d4 <SX1276SetMaxPayloadLength+0x30>)
    99b8:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    99bc:	2b00      	cmp	r3, #0
    99be:	d1f9      	bne.n	99b4 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
    99c0:	4621      	mov	r1, r4
    99c2:	2032      	movs	r0, #50	; 0x32
}
    99c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
    99c8:	f013 b96b 	b.w	1cca2 <SX1276Write>
    99cc:	4621      	mov	r1, r4
    99ce:	2023      	movs	r0, #35	; 0x23
    99d0:	e7f8      	b.n	99c4 <SX1276SetMaxPayloadLength+0x20>
    99d2:	bf00      	nop
    99d4:	20000e3c 	.word	0x20000e3c

000099d8 <SX1276SetPublicNetwork>:
{
    99d8:	b510      	push	{r4, lr}
    99da:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
    99dc:	2001      	movs	r0, #1
    99de:	f7ff fcb3 	bl	9348 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
    99e2:	4b06      	ldr	r3, [pc, #24]	; (99fc <SX1276SetPublicNetwork+0x24>)
    99e4:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
    99e8:	b12c      	cbz	r4, 99f6 <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
    99ea:	2134      	movs	r1, #52	; 0x34
}
    99ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    99f0:	2039      	movs	r0, #57	; 0x39
    99f2:	f013 b956 	b.w	1cca2 <SX1276Write>
    99f6:	2112      	movs	r1, #18
    99f8:	e7f8      	b.n	99ec <SX1276SetPublicNetwork+0x14>
    99fa:	bf00      	nop
    99fc:	20000e3c 	.word	0x20000e3c

00009a00 <SX1276OnTimeoutIrq>:
{
    9a00:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    9a02:	4c2d      	ldr	r4, [pc, #180]	; (9ab8 <SX1276OnTimeoutIrq+0xb8>)
    9a04:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9a08:	2b01      	cmp	r3, #1
    9a0a:	4626      	mov	r6, r4
    9a0c:	d002      	beq.n	9a14 <SX1276OnTimeoutIrq+0x14>
    9a0e:	2b02      	cmp	r3, #2
    9a10:	d02d      	beq.n	9a6e <SX1276OnTimeoutIrq+0x6e>
}
    9a12:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
    9a14:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9a18:	b9cb      	cbnz	r3, 9a4e <SX1276OnTimeoutIrq+0x4e>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    9a1a:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    9a1e:	210b      	movs	r1, #11
    9a20:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    9a22:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    9a26:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    9a2a:	f013 f93a 	bl	1cca2 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    9a2e:	2110      	movs	r1, #16
    9a30:	203f      	movs	r0, #63	; 0x3f
    9a32:	f013 f936 	bl	1cca2 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
    9a36:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    9a3a:	b193      	cbz	r3, 9a62 <SX1276OnTimeoutIrq+0x62>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    9a3c:	200d      	movs	r0, #13
    9a3e:	f013 f93b 	bl	1ccb8 <SX1276Read>
    9a42:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    9a46:	b2c9      	uxtb	r1, r1
    9a48:	200d      	movs	r0, #13
    9a4a:	f013 f92a 	bl	1cca2 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    9a4e:	4b1b      	ldr	r3, [pc, #108]	; (9abc <SX1276OnTimeoutIrq+0xbc>)
    9a50:	681b      	ldr	r3, [r3, #0]
    9a52:	2b00      	cmp	r3, #0
    9a54:	d0dd      	beq.n	9a12 <SX1276OnTimeoutIrq+0x12>
    9a56:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    9a58:	2b00      	cmp	r3, #0
    9a5a:	d0da      	beq.n	9a12 <SX1276OnTimeoutIrq+0x12>
}
    9a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
    9a60:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
    9a62:	4817      	ldr	r0, [pc, #92]	; (9ac0 <SX1276OnTimeoutIrq+0xc0>)
                SX1276.Settings.State = RF_IDLE;
    9a64:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
    9a68:	f7fe fea0 	bl	87ac <TimerStop>
    9a6c:	e7ef      	b.n	9a4e <SX1276OnTimeoutIrq+0x4e>
        SX1276Reset( );
    9a6e:	f7fe fbf3 	bl	8258 <SX1276Reset>
        RxChainCalibration( );
    9a72:	f7ff f9e3 	bl	8e3c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    9a76:	2000      	movs	r0, #0
    9a78:	f013 f929 	bl	1ccce <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    9a7c:	4c11      	ldr	r4, [pc, #68]	; (9ac4 <SX1276OnTimeoutIrq+0xc4>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    9a7e:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
    9a80:	7820      	ldrb	r0, [r4, #0]
    9a82:	f7ff fc61 	bl	9348 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    9a86:	3501      	adds	r5, #1
    9a88:	78a1      	ldrb	r1, [r4, #2]
    9a8a:	7860      	ldrb	r0, [r4, #1]
    9a8c:	f013 f909 	bl	1cca2 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    9a90:	2d10      	cmp	r5, #16
    9a92:	f104 0403 	add.w	r4, r4, #3
    9a96:	d1f3      	bne.n	9a80 <SX1276OnTimeoutIrq+0x80>
        SX1276SetModem( MODEM_FSK );
    9a98:	2000      	movs	r0, #0
    9a9a:	f7ff fc55 	bl	9348 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
    9a9e:	f896 0138 	ldrb.w	r0, [r6, #312]	; 0x138
    9aa2:	f7ff ff99 	bl	99d8 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
    9aa6:	2300      	movs	r3, #0
    9aa8:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    9aac:	4b03      	ldr	r3, [pc, #12]	; (9abc <SX1276OnTimeoutIrq+0xbc>)
    9aae:	681b      	ldr	r3, [r3, #0]
    9ab0:	2b00      	cmp	r3, #0
    9ab2:	d0ae      	beq.n	9a12 <SX1276OnTimeoutIrq+0x12>
    9ab4:	685b      	ldr	r3, [r3, #4]
    9ab6:	e7cf      	b.n	9a58 <SX1276OnTimeoutIrq+0x58>
    9ab8:	20000e3c 	.word	0x20000e3c
    9abc:	20000e08 	.word	0x20000e08
    9ac0:	20000e0c 	.word	0x20000e0c
    9ac4:	0001f7b5 	.word	0x0001f7b5

00009ac8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    9ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    9aca:	794b      	ldrb	r3, [r1, #5]
    9acc:	2b01      	cmp	r3, #1
    9ace:	d02a      	beq.n	9b26 <uarte_nrfx_configure+0x5e>
    9ad0:	2b03      	cmp	r3, #3
    9ad2:	d125      	bne.n	9b20 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    9ad4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    9ad6:	798b      	ldrb	r3, [r1, #6]
    9ad8:	2b03      	cmp	r3, #3
    9ada:	d121      	bne.n	9b20 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    9adc:	79cc      	ldrb	r4, [r1, #7]
    9ade:	b12c      	cbz	r4, 9aec <uarte_nrfx_configure+0x24>
    9ae0:	2c01      	cmp	r4, #1
    9ae2:	d11d      	bne.n	9b20 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    9ae4:	6843      	ldr	r3, [r0, #4]
    9ae6:	685b      	ldr	r3, [r3, #4]
    9ae8:	079b      	lsls	r3, r3, #30
    9aea:	d019      	beq.n	9b20 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    9aec:	790a      	ldrb	r2, [r1, #4]
    9aee:	b112      	cbz	r2, 9af6 <uarte_nrfx_configure+0x2e>
    9af0:	2a02      	cmp	r2, #2
    9af2:	d115      	bne.n	9b20 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    9af4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    9af6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    9af8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    9afa:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    9afe:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    9b00:	d065      	beq.n	9bce <uarte_nrfx_configure+0x106>
    9b02:	d82d      	bhi.n	9b60 <uarte_nrfx_configure+0x98>
    9b04:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    9b08:	d064      	beq.n	9bd4 <uarte_nrfx_configure+0x10c>
    9b0a:	d816      	bhi.n	9b3a <uarte_nrfx_configure+0x72>
    9b0c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    9b10:	d062      	beq.n	9bd8 <uarte_nrfx_configure+0x110>
    9b12:	d80a      	bhi.n	9b2a <uarte_nrfx_configure+0x62>
    9b14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    9b18:	d061      	beq.n	9bde <uarte_nrfx_configure+0x116>
    9b1a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    9b1e:	d061      	beq.n	9be4 <uarte_nrfx_configure+0x11c>
    9b20:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9b24:	e052      	b.n	9bcc <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    9b26:	2600      	movs	r6, #0
    9b28:	e7d5      	b.n	9ad6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    9b2a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    9b2e:	d05c      	beq.n	9bea <uarte_nrfx_configure+0x122>
    9b30:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    9b34:	d1f4      	bne.n	9b20 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    9b36:	4b37      	ldr	r3, [pc, #220]	; (9c14 <uarte_nrfx_configure+0x14c>)
    9b38:	e03c      	b.n	9bb4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9b3a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    9b3e:	d057      	beq.n	9bf0 <uarte_nrfx_configure+0x128>
    9b40:	d807      	bhi.n	9b52 <uarte_nrfx_configure+0x8a>
    9b42:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    9b46:	d055      	beq.n	9bf4 <uarte_nrfx_configure+0x12c>
    9b48:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    9b4c:	d1e8      	bne.n	9b20 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    9b4e:	4b32      	ldr	r3, [pc, #200]	; (9c18 <uarte_nrfx_configure+0x150>)
    9b50:	e030      	b.n	9bb4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9b52:	f647 2712 	movw	r7, #31250	; 0x7a12
    9b56:	42bb      	cmp	r3, r7
    9b58:	d1e2      	bne.n	9b20 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    9b5a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    9b5e:	e029      	b.n	9bb4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9b60:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    9b64:	d048      	beq.n	9bf8 <uarte_nrfx_configure+0x130>
    9b66:	d813      	bhi.n	9b90 <uarte_nrfx_configure+0xc8>
    9b68:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    9b6c:	d047      	beq.n	9bfe <uarte_nrfx_configure+0x136>
    9b6e:	d809      	bhi.n	9b84 <uarte_nrfx_configure+0xbc>
    9b70:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    9b74:	42bb      	cmp	r3, r7
    9b76:	d044      	beq.n	9c02 <uarte_nrfx_configure+0x13a>
    9b78:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    9b7c:	d1d0      	bne.n	9b20 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    9b7e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    9b82:	e017      	b.n	9bb4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9b84:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    9b88:	d1ca      	bne.n	9b20 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    9b8a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    9b8e:	e011      	b.n	9bb4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9b90:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    9b94:	d038      	beq.n	9c08 <uarte_nrfx_configure+0x140>
    9b96:	d808      	bhi.n	9baa <uarte_nrfx_configure+0xe2>
    9b98:	4f20      	ldr	r7, [pc, #128]	; (9c1c <uarte_nrfx_configure+0x154>)
    9b9a:	42bb      	cmp	r3, r7
    9b9c:	d037      	beq.n	9c0e <uarte_nrfx_configure+0x146>
    9b9e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    9ba2:	d1bd      	bne.n	9b20 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    9ba4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    9ba8:	e004      	b.n	9bb4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9baa:	4f1d      	ldr	r7, [pc, #116]	; (9c20 <uarte_nrfx_configure+0x158>)
    9bac:	42bb      	cmp	r3, r7
    9bae:	d1b7      	bne.n	9b20 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    9bb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    9bb4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    9bb8:	6903      	ldr	r3, [r0, #16]
    9bba:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    9bbc:	4334      	orrs	r4, r6
    9bbe:	4322      	orrs	r2, r4
    9bc0:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    9bc2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    9bc6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    9bca:	2000      	movs	r0, #0
}
    9bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    9bce:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    9bd2:	e7ef      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    9bd4:	4b13      	ldr	r3, [pc, #76]	; (9c24 <uarte_nrfx_configure+0x15c>)
    9bd6:	e7ed      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    9bd8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    9bdc:	e7ea      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    9bde:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    9be2:	e7e7      	b.n	9bb4 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    9be4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    9be8:	e7e4      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    9bea:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    9bee:	e7e1      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    9bf0:	4b0d      	ldr	r3, [pc, #52]	; (9c28 <uarte_nrfx_configure+0x160>)
    9bf2:	e7df      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    9bf4:	4b0d      	ldr	r3, [pc, #52]	; (9c2c <uarte_nrfx_configure+0x164>)
    9bf6:	e7dd      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    9bf8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    9bfc:	e7da      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    9bfe:	4b0c      	ldr	r3, [pc, #48]	; (9c30 <uarte_nrfx_configure+0x168>)
    9c00:	e7d8      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    9c02:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    9c06:	e7d5      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    9c08:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    9c0c:	e7d2      	b.n	9bb4 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    9c0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    9c12:	e7cf      	b.n	9bb4 <uarte_nrfx_configure+0xec>
    9c14:	0013b000 	.word	0x0013b000
    9c18:	004ea000 	.word	0x004ea000
    9c1c:	0003d090 	.word	0x0003d090
    9c20:	000f4240 	.word	0x000f4240
    9c24:	00275000 	.word	0x00275000
    9c28:	0075c000 	.word	0x0075c000
    9c2c:	003af000 	.word	0x003af000
    9c30:	013a9000 	.word	0x013a9000

00009c34 <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
    9c34:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    9c38:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9c3a:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    9c3c:	4b04      	ldr	r3, [pc, #16]	; (9c50 <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    9c3e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    9c42:	bf18      	it	ne
    9c44:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9c48:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    9c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    9c4e:	4770      	bx	lr
    9c50:	50000300 	.word	0x50000300

00009c54 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    9c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9c56:	6906      	ldr	r6, [r0, #16]
{
    9c58:	4605      	mov	r5, r0
    9c5a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9c5c:	f013 faec 	bl	1d238 <k_is_in_isr>
    9c60:	b910      	cbnz	r0, 9c68 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    9c62:	4b20      	ldr	r3, [pc, #128]	; (9ce4 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    9c64:	781b      	ldrb	r3, [r3, #0]
    9c66:	b983      	cbnz	r3, 9c8a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    9c68:	f04f 0320 	mov.w	r3, #32
    9c6c:	f3ef 8411 	mrs	r4, BASEPRI
    9c70:	f383 8812 	msr	BASEPRI_MAX, r3
    9c74:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    9c78:	4628      	mov	r0, r5
    9c7a:	f013 f906 	bl	1ce8a <is_tx_ready>
    9c7e:	bb28      	cbnz	r0, 9ccc <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    9c80:	f384 8811 	msr	BASEPRI, r4
    9c84:	f3bf 8f6f 	isb	sy
}
    9c88:	e7ee      	b.n	9c68 <uarte_nrfx_poll_out+0x14>
{
    9c8a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    9c8c:	4628      	mov	r0, r5
    9c8e:	f013 f8fc 	bl	1ce8a <is_tx_ready>
    9c92:	b970      	cbnz	r0, 9cb2 <uarte_nrfx_poll_out+0x5e>
    9c94:	2001      	movs	r0, #1
    9c96:	f013 fa15 	bl	1d0c4 <nrfx_busy_wait>
    9c9a:	3c01      	subs	r4, #1
    9c9c:	d1f6      	bne.n	9c8c <uarte_nrfx_poll_out+0x38>
    9c9e:	2100      	movs	r1, #0
    9ca0:	2021      	movs	r0, #33	; 0x21
    9ca2:	f002 f893 	bl	bdcc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    9ca6:	e7f0      	b.n	9c8a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    9ca8:	f384 8811 	msr	BASEPRI, r4
    9cac:	f3bf 8f6f 	isb	sy
}
    9cb0:	e7f5      	b.n	9c9e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    9cb2:	f04f 0320 	mov.w	r3, #32
    9cb6:	f3ef 8411 	mrs	r4, BASEPRI
    9cba:	f383 8812 	msr	BASEPRI_MAX, r3
    9cbe:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    9cc2:	4628      	mov	r0, r5
    9cc4:	f013 f8e1 	bl	1ce8a <is_tx_ready>
    9cc8:	2800      	cmp	r0, #0
    9cca:	d0ed      	beq.n	9ca8 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    9ccc:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    9cce:	2201      	movs	r2, #1
	data->char_out = c;
    9cd0:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    9cd4:	4628      	mov	r0, r5
    9cd6:	f013 f96b 	bl	1cfb0 <tx_start>
	__asm__ volatile(
    9cda:	f384 8811 	msr	BASEPRI, r4
    9cde:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    9ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ce4:	200020d7 	.word	0x200020d7

00009ce8 <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    9ce8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    9cec:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9cee:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    9cf0:	4b04      	ldr	r3, [pc, #16]	; (9d04 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    9cf2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    9cf6:	bf18      	it	ne
    9cf8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    9cfc:	2103      	movs	r1, #3
    9cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    9d02:	4770      	bx	lr
    9d04:	50000300 	.word	0x50000300

00009d08 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    9d08:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    9d0c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9d0e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    9d10:	4b04      	ldr	r3, [pc, #16]	; (9d24 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9d12:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    9d16:	bf18      	it	ne
    9d18:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9d1c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    9d1e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    9d22:	4770      	bx	lr
    9d24:	50000300 	.word	0x50000300

00009d28 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    9d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d2a:	2101      	movs	r1, #1
    9d2c:	4607      	mov	r7, r0
    9d2e:	2200      	movs	r2, #0
    9d30:	2002      	movs	r0, #2
    9d32:	f7fc fc53 	bl	65dc <z_arm_irq_priority_set>
    9d36:	2002      	movs	r0, #2
    9d38:	f7fc fc1e 	bl	6578 <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    9d3c:	687d      	ldr	r5, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    9d3e:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    9d40:	682c      	ldr	r4, [r5, #0]
        nrf_gpio_pin_set(pin_number);
    9d42:	68a8      	ldr	r0, [r5, #8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9d44:	2300      	movs	r3, #0
    9d46:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    9d4a:	6037      	str	r7, [r6, #0]
    9d4c:	f7ff ffdc 	bl	9d08 <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(cfg->pseltxd);
    9d50:	68a8      	ldr	r0, [r5, #8]
    9d52:	f7ff ffc9 	bl	9ce8 <nrf_gpio_cfg_output>
	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    9d56:	68e8      	ldr	r0, [r5, #12]
    9d58:	1c41      	adds	r1, r0, #1
    9d5a:	d002      	beq.n	9d62 <uarte_0_init+0x3a>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    9d5c:	7e29      	ldrb	r1, [r5, #24]
    9d5e:	f7ff ff69 	bl	9c34 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    9d62:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    9d66:	6928      	ldr	r0, [r5, #16]
    p_reg->PSEL.TXD = pseltxd;
    9d68:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    9d6c:	1c42      	adds	r2, r0, #1
    p_reg->PSEL.RXD = pselrxd;
    9d6e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    9d72:	d002      	beq.n	9d7a <uarte_0_init+0x52>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    9d74:	7e69      	ldrb	r1, [r5, #25]
    9d76:	f7ff ff5d 	bl	9c34 <nrf_gpio_cfg_input>
	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    9d7a:	6968      	ldr	r0, [r5, #20]
    9d7c:	1c43      	adds	r3, r0, #1
    9d7e:	d004      	beq.n	9d8a <uarte_0_init+0x62>
    9d80:	f7ff ffc2 	bl	9d08 <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(cfg->pselrts);
    9d84:	6968      	ldr	r0, [r5, #20]
    9d86:	f7ff ffaf 	bl	9ce8 <nrf_gpio_cfg_output>
	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    9d8a:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    9d8e:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.RTS = pselrts;
    9d90:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    9d94:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
    9d96:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    9d9a:	3104      	adds	r1, #4
    9d9c:	f7ff fe94 	bl	9ac8 <uarte_nrfx_configure>
	if (err) {
    9da0:	4607      	mov	r7, r0
    9da2:	b9a8      	cbnz	r0, 9dd0 <uarte_0_init+0xa8>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    9da4:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    9da6:	0719      	lsls	r1, r3, #28
    9da8:	d527      	bpl.n	9dfa <uarte_0_init+0xd2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    9daa:	f106 0016 	add.w	r0, r6, #22
    9dae:	f000 fe7d 	bl	aaac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    9db2:	4b27      	ldr	r3, [pc, #156]	; (9e50 <uarte_0_init+0x128>)
    9db4:	4298      	cmp	r0, r3
    9db6:	d00d      	beq.n	9dd4 <uarte_0_init+0xac>
    9db8:	4b26      	ldr	r3, [pc, #152]	; (9e54 <uarte_0_init+0x12c>)
    9dba:	4927      	ldr	r1, [pc, #156]	; (9e58 <uarte_0_init+0x130>)
		LOG_ERR("Failed to allocate PPI Channel");
    9dbc:	4827      	ldr	r0, [pc, #156]	; (9e5c <uarte_0_init+0x134>)
    9dbe:	1ac9      	subs	r1, r1, r3
    9dc0:	08c9      	lsrs	r1, r1, #3
    9dc2:	0189      	lsls	r1, r1, #6
    9dc4:	f041 0101 	orr.w	r1, r1, #1
    9dc8:	f012 f8fe 	bl	1bfc8 <log_0>
		return -EIO;
    9dcc:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    9dd0:	4638      	mov	r0, r7
    9dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    9dd4:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    9dd6:	00c3      	lsls	r3, r0, #3
    9dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9ddc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    9de0:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    9de4:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
    9de8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    9dec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    9df0:	4a1b      	ldr	r2, [pc, #108]	; (9e60 <uarte_0_init+0x138>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    9df2:	2301      	movs	r3, #1
    9df4:	4083      	lsls	r3, r0
    9df6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9dfa:	2308      	movs	r3, #8
    9dfc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    9e00:	68eb      	ldr	r3, [r5, #12]
    9e02:	3301      	adds	r3, #1
    9e04:	d00c      	beq.n	9e20 <uarte_0_init+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e06:	2300      	movs	r3, #0
    9e08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    9e0c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    9e10:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9e14:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9e18:	2301      	movs	r3, #1
    9e1a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e1e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    9e20:	686b      	ldr	r3, [r5, #4]
    9e22:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    9e24:	bf5c      	itt	pl
    9e26:	f44f 7280 	movpl.w	r2, #256	; 0x100
    9e2a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9e2e:	06db      	lsls	r3, r3, #27
    9e30:	bf44      	itt	mi
    9e32:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    9e36:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    9e3a:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    9e3c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9e3e:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9e42:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e46:	2301      	movs	r3, #1
    9e48:	60a3      	str	r3, [r4, #8]
    9e4a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    9e4c:	e7c0      	b.n	9dd0 <uarte_0_init+0xa8>
    9e4e:	bf00      	nop
    9e50:	0bad0000 	.word	0x0bad0000
    9e54:	0001e07c 	.word	0x0001e07c
    9e58:	0001e0cc 	.word	0x0001e0cc
    9e5c:	0001f7e5 	.word	0x0001f7e5
    9e60:	4001f000 	.word	0x4001f000

00009e64 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    9e64:	4919      	ldr	r1, [pc, #100]	; (9ecc <sys_clock_timeout_handler+0x68>)
{
    9e66:	b570      	push	{r4, r5, r6, lr}
    9e68:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    9e6a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    9e6e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    9e70:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    9e74:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    9e78:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    9e7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    9e7e:	f04f 0500 	mov.w	r5, #0
    9e82:	d20a      	bcs.n	9e9a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    9e84:	4b12      	ldr	r3, [pc, #72]	; (9ed0 <sys_clock_timeout_handler+0x6c>)
    9e86:	6819      	ldr	r1, [r3, #0]
    9e88:	060a      	lsls	r2, r1, #24
    9e8a:	0a0b      	lsrs	r3, r1, #8
    9e8c:	1992      	adds	r2, r2, r6
    9e8e:	4911      	ldr	r1, [pc, #68]	; (9ed4 <sys_clock_timeout_handler+0x70>)
    9e90:	f143 0300 	adc.w	r3, r3, #0
    9e94:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    9e98:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    9e9a:	f002 f91d 	bl	c0d8 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    9e9e:	00a3      	lsls	r3, r4, #2
    9ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9ea4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    9ea8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    9eac:	42b2      	cmp	r2, r6
    9eae:	d10b      	bne.n	9ec8 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    9eb0:	b91d      	cbnz	r5, 9eba <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    9eb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    9eb6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    9eba:	4b07      	ldr	r3, [pc, #28]	; (9ed8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9ebc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    9ec0:	fa00 f404 	lsl.w	r4, r0, r4
    9ec4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    9ec8:	bd70      	pop	{r4, r5, r6, pc}
    9eca:	bf00      	nop
    9ecc:	200003d0 	.word	0x200003d0
    9ed0:	20000fa0 	.word	0x20000fa0
    9ed4:	200003b8 	.word	0x200003b8
    9ed8:	40011000 	.word	0x40011000

00009edc <compare_int_lock>:
{
    9edc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    9ede:	2301      	movs	r3, #1
    9ee0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9ee2:	4a11      	ldr	r2, [pc, #68]	; (9f28 <compare_int_lock+0x4c>)
    9ee4:	f3bf 8f5b 	dmb	ish
    9ee8:	43dc      	mvns	r4, r3
    9eea:	e852 1f00 	ldrex	r1, [r2]
    9eee:	ea01 0c04 	and.w	ip, r1, r4
    9ef2:	e842 ce00 	strex	lr, ip, [r2]
    9ef6:	f1be 0f00 	cmp.w	lr, #0
    9efa:	d1f6      	bne.n	9eea <compare_int_lock+0xe>
    9efc:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9f00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9f04:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    9f08:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    9f0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    9f10:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    9f14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9f18:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    9f1c:	420b      	tst	r3, r1
}
    9f1e:	bf14      	ite	ne
    9f20:	2001      	movne	r0, #1
    9f22:	2000      	moveq	r0, #0
    9f24:	bd10      	pop	{r4, pc}
    9f26:	bf00      	nop
    9f28:	20000f9c 	.word	0x20000f9c

00009f2c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    9f2c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9f2e:	4a12      	ldr	r2, [pc, #72]	; (9f78 <compare_int_unlock.part.0+0x4c>)
    9f30:	f3bf 8f5b 	dmb	ish
    9f34:	4083      	lsls	r3, r0
    9f36:	e852 1f00 	ldrex	r1, [r2]
    9f3a:	4319      	orrs	r1, r3
    9f3c:	e842 1c00 	strex	ip, r1, [r2]
    9f40:	f1bc 0f00 	cmp.w	ip, #0
    9f44:	d1f7      	bne.n	9f36 <compare_int_unlock.part.0+0xa>
    9f46:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    9f4a:	4a0c      	ldr	r2, [pc, #48]	; (9f7c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9f50:	4083      	lsls	r3, r0
    9f52:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f56:	4b0a      	ldr	r3, [pc, #40]	; (9f80 <compare_int_unlock.part.0+0x54>)
    9f58:	f3bf 8f5b 	dmb	ish
    9f5c:	681b      	ldr	r3, [r3, #0]
    9f5e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    9f62:	fa23 f000 	lsr.w	r0, r3, r0
    9f66:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9f68:	bf42      	ittt	mi
    9f6a:	4b06      	ldrmi	r3, [pc, #24]	; (9f84 <compare_int_unlock.part.0+0x58>)
    9f6c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    9f70:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    9f74:	4770      	bx	lr
    9f76:	bf00      	nop
    9f78:	20000f9c 	.word	0x20000f9c
    9f7c:	40011000 	.word	0x40011000
    9f80:	20000f98 	.word	0x20000f98
    9f84:	e000e100 	.word	0xe000e100

00009f88 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    9f88:	4b0d      	ldr	r3, [pc, #52]	; (9fc0 <z_nrf_rtc_timer_read+0x38>)
    9f8a:	681b      	ldr	r3, [r3, #0]
    9f8c:	0a19      	lsrs	r1, r3, #8
    9f8e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    9f90:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    9f94:	4b0b      	ldr	r3, [pc, #44]	; (9fc4 <z_nrf_rtc_timer_read+0x3c>)
    9f96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    9f9a:	18c0      	adds	r0, r0, r3
    9f9c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    9fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    9fa4:	d20a      	bcs.n	9fbc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    9fa6:	4b08      	ldr	r3, [pc, #32]	; (9fc8 <z_nrf_rtc_timer_read+0x40>)
    9fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9fac:	4299      	cmp	r1, r3
    9fae:	bf08      	it	eq
    9fb0:	4290      	cmpeq	r0, r2
    9fb2:	d203      	bcs.n	9fbc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    9fb4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    9fb8:	f141 0100 	adc.w	r1, r1, #0
}
    9fbc:	4770      	bx	lr
    9fbe:	bf00      	nop
    9fc0:	20000fa0 	.word	0x20000fa0
    9fc4:	40011000 	.word	0x40011000
    9fc8:	200003b8 	.word	0x200003b8

00009fcc <compare_set>:
{
    9fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fd0:	b085      	sub	sp, #20
    9fd2:	4616      	mov	r6, r2
    9fd4:	461f      	mov	r7, r3
    9fd6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    9fd8:	f7ff ff80 	bl	9edc <compare_int_lock>
    9fdc:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    9fde:	f7ff ffd3 	bl	9f88 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    9fe2:	42b9      	cmp	r1, r7
    9fe4:	bf08      	it	eq
    9fe6:	42b0      	cmpeq	r0, r6
    9fe8:	d27f      	bcs.n	a0ea <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    9fea:	ebb6 0800 	subs.w	r8, r6, r0
    9fee:	eb67 0901 	sbc.w	r9, r7, r1
    9ff2:	2300      	movs	r3, #0
    9ff4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9ff8:	454b      	cmp	r3, r9
    9ffa:	bf08      	it	eq
    9ffc:	4542      	cmpeq	r2, r8
    9ffe:	f0c0 8085 	bcc.w	a10c <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    a002:	4b44      	ldr	r3, [pc, #272]	; (a114 <compare_set+0x148>)
    a004:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    a008:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    a00c:	429f      	cmp	r7, r3
    a00e:	bf08      	it	eq
    a010:	4296      	cmpeq	r6, r2
    a012:	d054      	beq.n	a0be <compare_set+0xf2>
    a014:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a018:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    a01c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a020:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a024:	fa0b f205 	lsl.w	r2, fp, r5
    a028:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a02c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a030:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a034:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    a036:	4a38      	ldr	r2, [pc, #224]	; (a118 <compare_set+0x14c>)
    return p_reg->CC[ch];
    a038:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    a03c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a040:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    a044:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    a048:	461c      	mov	r4, r3
    a04a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    a04c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a050:	eba0 000a 	sub.w	r0, r0, sl
    a054:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a058:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    a05c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    a05e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    a062:	d105      	bne.n	a070 <compare_set+0xa4>
    a064:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    a066:	2013      	movs	r0, #19
    a068:	f013 fa8c 	bl	1d584 <z_impl_k_busy_wait>
    a06c:	4a2a      	ldr	r2, [pc, #168]	; (a118 <compare_set+0x14c>)
    a06e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    a070:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    a072:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    a076:	eba4 000c 	sub.w	r0, r4, ip
    a07a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    a07e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a082:	bf88      	it	hi
    a084:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a086:	2000      	movs	r0, #0
    a088:	f8c8 0000 	str.w	r0, [r8]
    a08c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    a090:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a094:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    a098:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    a09c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    a0a0:	4582      	cmp	sl, r0
    a0a2:	d006      	beq.n	a0b2 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    a0a4:	1a20      	subs	r0, r4, r0
    a0a6:	3802      	subs	r0, #2
    a0a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    a0ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a0b0:	d819      	bhi.n	a0e6 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    a0b2:	1ae4      	subs	r4, r4, r3
    a0b4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    a0b8:	1932      	adds	r2, r6, r4
    a0ba:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    a0be:	4c15      	ldr	r4, [pc, #84]	; (a114 <compare_set+0x148>)
    a0c0:	0129      	lsls	r1, r5, #4
    a0c2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    a0c6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    a0ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    a0cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    a0ce:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    a0d0:	6043      	str	r3, [r0, #4]
	return ret;
    a0d2:	2400      	movs	r4, #0
	if (key) {
    a0d4:	9b01      	ldr	r3, [sp, #4]
    a0d6:	b113      	cbz	r3, a0de <compare_set+0x112>
    a0d8:	4628      	mov	r0, r5
    a0da:	f7ff ff27 	bl	9f2c <compare_int_unlock.part.0>
}
    a0de:	4620      	mov	r0, r4
    a0e0:	b005      	add	sp, #20
    a0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0e6:	4620      	mov	r0, r4
    a0e8:	e7b0      	b.n	a04c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    a0ea:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a0ec:	4a0b      	ldr	r2, [pc, #44]	; (a11c <compare_set+0x150>)
    a0ee:	f3bf 8f5b 	dmb	ish
    a0f2:	40ab      	lsls	r3, r5
    a0f4:	e852 1f00 	ldrex	r1, [r2]
    a0f8:	4319      	orrs	r1, r3
    a0fa:	e842 1000 	strex	r0, r1, [r2]
    a0fe:	2800      	cmp	r0, #0
    a100:	d1f8      	bne.n	a0f4 <compare_set+0x128>
    a102:	f3bf 8f5b 	dmb	ish
    a106:	4632      	mov	r2, r6
    a108:	463b      	mov	r3, r7
    a10a:	e7d8      	b.n	a0be <compare_set+0xf2>
			return -EINVAL;
    a10c:	f06f 0415 	mvn.w	r4, #21
    a110:	e7e0      	b.n	a0d4 <compare_set+0x108>
    a112:	bf00      	nop
    a114:	200003c0 	.word	0x200003c0
    a118:	40011000 	.word	0x40011000
    a11c:	20000f98 	.word	0x20000f98

0000a120 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    a120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    a124:	4c34      	ldr	r4, [pc, #208]	; (a1f8 <rtc_nrf_isr+0xd8>)
    a126:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    a12a:	079a      	lsls	r2, r3, #30
    a12c:	d509      	bpl.n	a142 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a12e:	4b33      	ldr	r3, [pc, #204]	; (a1fc <rtc_nrf_isr+0xdc>)
    a130:	681a      	ldr	r2, [r3, #0]
    a132:	b132      	cbz	r2, a142 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a134:	2200      	movs	r2, #0
    a136:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    a138:	4a31      	ldr	r2, [pc, #196]	; (a200 <rtc_nrf_isr+0xe0>)
    a13a:	681b      	ldr	r3, [r3, #0]
    a13c:	6813      	ldr	r3, [r2, #0]
    a13e:	3301      	adds	r3, #1
    a140:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a142:	f04f 0320 	mov.w	r3, #32
    a146:	f3ef 8211 	mrs	r2, BASEPRI
    a14a:	f383 8812 	msr	BASEPRI_MAX, r3
    a14e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    a152:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    a156:	03db      	lsls	r3, r3, #15
    a158:	d512      	bpl.n	a180 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a15a:	f3bf 8f5b 	dmb	ish
    a15e:	4b29      	ldr	r3, [pc, #164]	; (a204 <rtc_nrf_isr+0xe4>)
    a160:	e853 1f00 	ldrex	r1, [r3]
    a164:	f021 0001 	bic.w	r0, r1, #1
    a168:	e843 0600 	strex	r6, r0, [r3]
    a16c:	2e00      	cmp	r6, #0
    a16e:	d1f7      	bne.n	a160 <rtc_nrf_isr+0x40>
    a170:	f3bf 8f5b 	dmb	ish
    a174:	4b24      	ldr	r3, [pc, #144]	; (a208 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    a176:	2900      	cmp	r1, #0
    a178:	d136      	bne.n	a1e8 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a17a:	6819      	ldr	r1, [r3, #0]
		if (result) {
    a17c:	2900      	cmp	r1, #0
    a17e:	d133      	bne.n	a1e8 <rtc_nrf_isr+0xc8>
{
    a180:	2300      	movs	r3, #0
	__asm__ volatile(
    a182:	f382 8811 	msr	BASEPRI, r2
    a186:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    a18a:	b353      	cbz	r3, a1e2 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    a18c:	f7ff fefc 	bl	9f88 <z_nrf_rtc_timer_read>
    a190:	4606      	mov	r6, r0
	__asm__ volatile(
    a192:	f04f 0320 	mov.w	r3, #32
    a196:	f3ef 8011 	mrs	r0, BASEPRI
    a19a:	f383 8812 	msr	BASEPRI_MAX, r3
    a19e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    a1a2:	4b1a      	ldr	r3, [pc, #104]	; (a20c <rtc_nrf_isr+0xec>)
    a1a4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    a1a8:	4549      	cmp	r1, r9
    a1aa:	bf08      	it	eq
    a1ac:	4546      	cmpeq	r6, r8
    a1ae:	f04f 0200 	mov.w	r2, #0
    a1b2:	d31e      	bcc.n	a1f2 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a1b4:	f04f 36ff 	mov.w	r6, #4294967295
    a1b8:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    a1bc:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a1c0:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    a1c4:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    a1c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a1ca:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    a1ce:	f380 8811 	msr	BASEPRI, r0
    a1d2:	f3bf 8f6f 	isb	sy
		if (handler) {
    a1d6:	b121      	cbz	r1, a1e2 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    a1d8:	9500      	str	r5, [sp, #0]
    a1da:	4642      	mov	r2, r8
    a1dc:	464b      	mov	r3, r9
    a1de:	2000      	movs	r0, #0
    a1e0:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
    a1e2:	b003      	add	sp, #12
    a1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a1e8:	2100      	movs	r1, #0
    a1ea:	6019      	str	r1, [r3, #0]
    a1ec:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    a1ee:	2301      	movs	r3, #1
}
    a1f0:	e7c7      	b.n	a182 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    a1f2:	4611      	mov	r1, r2
    a1f4:	e7eb      	b.n	a1ce <rtc_nrf_isr+0xae>
    a1f6:	bf00      	nop
    a1f8:	40011000 	.word	0x40011000
    a1fc:	40011104 	.word	0x40011104
    a200:	20000fa0 	.word	0x20000fa0
    a204:	20000f98 	.word	0x20000f98
    a208:	40011140 	.word	0x40011140
    a20c:	200003c0 	.word	0x200003c0

0000a210 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    a210:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    a212:	4b1a      	ldr	r3, [pc, #104]	; (a27c <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
    a214:	4d1a      	ldr	r5, [pc, #104]	; (a280 <sys_clock_driver_init+0x70>)
    a216:	2400      	movs	r4, #0
    a218:	f04f 30ff 	mov.w	r0, #4294967295
    a21c:	f04f 31ff 	mov.w	r1, #4294967295
    a220:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    a224:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    a228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a22c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a230:	4b14      	ldr	r3, [pc, #80]	; (a284 <sys_clock_driver_init+0x74>)
    a232:	2602      	movs	r6, #2
    a234:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    a238:	2101      	movs	r1, #1
    a23a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    a23e:	2011      	movs	r0, #17
    a240:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    a244:	4622      	mov	r2, r4
    a246:	f7fc f9c9 	bl	65dc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    a24a:	2011      	movs	r0, #17
    a24c:	f7fc f994 	bl	6578 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    a250:	4a0d      	ldr	r2, [pc, #52]	; (a288 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
    a252:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    a256:	2301      	movs	r3, #1
    a258:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    a25a:	4a0c      	ldr	r2, [pc, #48]	; (a28c <sys_clock_driver_init+0x7c>)
    a25c:	602b      	str	r3, [r5, #0]
    a25e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    a260:	4b0b      	ldr	r3, [pc, #44]	; (a290 <sys_clock_driver_init+0x80>)
    a262:	4a0c      	ldr	r2, [pc, #48]	; (a294 <sys_clock_driver_init+0x84>)
    a264:	9300      	str	r3, [sp, #0]
    a266:	9401      	str	r4, [sp, #4]
    a268:	2300      	movs	r3, #0
    a26a:	4620      	mov	r0, r4
    a26c:	f7ff feae 	bl	9fcc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    a270:	4630      	mov	r0, r6
    a272:	f7fd f82d 	bl	72d0 <z_nrf_clock_control_lf_on>

	return 0;
}
    a276:	4620      	mov	r0, r4
    a278:	b002      	add	sp, #8
    a27a:	bd70      	pop	{r4, r5, r6, pc}
    a27c:	200003c0 	.word	0x200003c0
    a280:	40011000 	.word	0x40011000
    a284:	e000e100 	.word	0xe000e100
    a288:	40011008 	.word	0x40011008
    a28c:	20000f9c 	.word	0x20000f9c
    a290:	00009e65 	.word	0x00009e65
    a294:	007fffff 	.word	0x007fffff

0000a298 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    a298:	4b14      	ldr	r3, [pc, #80]	; (a2ec <sys_clock_set_timeout+0x54>)
{
    a29a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    a29c:	f1b0 3fff 	cmp.w	r0, #4294967295
    a2a0:	bf08      	it	eq
    a2a2:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    a2a4:	1e44      	subs	r4, r0, #1
    a2a6:	2c00      	cmp	r4, #0
    a2a8:	dd1e      	ble.n	a2e8 <sys_clock_set_timeout+0x50>
    a2aa:	429c      	cmp	r4, r3
    a2ac:	bfa8      	it	ge
    a2ae:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a2b0:	f7ff fe6a 	bl	9f88 <z_nrf_rtc_timer_read>
    a2b4:	4b0e      	ldr	r3, [pc, #56]	; (a2f0 <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a2b6:	490f      	ldr	r1, [pc, #60]	; (a2f4 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a2bc:	1a80      	subs	r0, r0, r2
		ticks = 0;
    a2be:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a2c2:	bf28      	it	cs
    a2c4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    a2c6:	3001      	adds	r0, #1
    a2c8:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    a2ca:	4808      	ldr	r0, [pc, #32]	; (a2ec <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a2cc:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    a2ce:	4284      	cmp	r4, r0
    a2d0:	bf28      	it	cs
    a2d2:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a2d4:	1912      	adds	r2, r2, r4
    a2d6:	f04f 0000 	mov.w	r0, #0
    a2da:	9001      	str	r0, [sp, #4]
    a2dc:	f143 0300 	adc.w	r3, r3, #0
    a2e0:	f7ff fe74 	bl	9fcc <compare_set>
}
    a2e4:	b002      	add	sp, #8
    a2e6:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    a2e8:	2400      	movs	r4, #0
    a2ea:	e7e1      	b.n	a2b0 <sys_clock_set_timeout+0x18>
    a2ec:	007fffff 	.word	0x007fffff
    a2f0:	200003d0 	.word	0x200003d0
    a2f4:	00009e65 	.word	0x00009e65

0000a2f8 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    a2f8:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    a2fa:	f7ff fe45 	bl	9f88 <z_nrf_rtc_timer_read>
    a2fe:	4b02      	ldr	r3, [pc, #8]	; (a308 <sys_clock_elapsed+0x10>)
    a300:	681b      	ldr	r3, [r3, #0]
}
    a302:	1ac0      	subs	r0, r0, r3
    a304:	bd08      	pop	{r3, pc}
    a306:	bf00      	nop
    a308:	200003d0 	.word	0x200003d0

0000a30c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    a30c:	b508      	push	{r3, lr}
	z_impl_log_panic();
    a30e:	f7fb fc6b 	bl	5be8 <z_impl_log_panic>
    a312:	4b06      	ldr	r3, [pc, #24]	; (a32c <k_sys_fatal_error_handler+0x20>)
    a314:	4906      	ldr	r1, [pc, #24]	; (a330 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    a316:	4807      	ldr	r0, [pc, #28]	; (a334 <k_sys_fatal_error_handler+0x28>)
    a318:	1ac9      	subs	r1, r1, r3
    a31a:	08c9      	lsrs	r1, r1, #3
    a31c:	0189      	lsls	r1, r1, #6
    a31e:	f041 0101 	orr.w	r1, r1, #1
    a322:	f011 fe51 	bl	1bfc8 <log_0>
		sys_arch_reboot(0);
    a326:	2000      	movs	r0, #0
    a328:	f7fc fe68 	bl	6ffc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    a32c:	0001e07c 	.word	0x0001e07c
    a330:	0001e084 	.word	0x0001e084
    a334:	0001f825 	.word	0x0001f825

0000a338 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    a338:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    a33c:	4905      	ldr	r1, [pc, #20]	; (a354 <__NVIC_SystemReset+0x1c>)
    a33e:	4b06      	ldr	r3, [pc, #24]	; (a358 <__NVIC_SystemReset+0x20>)
    a340:	68ca      	ldr	r2, [r1, #12]
    a342:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a346:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    a348:	60cb      	str	r3, [r1, #12]
    a34a:	f3bf 8f4f 	dsb	sy
    __NOP();
    a34e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    a350:	e7fd      	b.n	a34e <__NVIC_SystemReset+0x16>
    a352:	bf00      	nop
    a354:	e000ed00 	.word	0xe000ed00
    a358:	05fa0004 	.word	0x05fa0004

0000a35c <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a35c:	4b03      	ldr	r3, [pc, #12]	; (a36c <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a35e:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    a360:	f1a0 0308 	sub.w	r3, r0, #8
    a364:	4258      	negs	r0, r3
    a366:	4158      	adcs	r0, r3
    a368:	4770      	bx	lr
    a36a:	bf00      	nop
    a36c:	10000130 	.word	0x10000130

0000a370 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a370:	4b06      	ldr	r3, [pc, #24]	; (a38c <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a372:	681b      	ldr	r3, [r3, #0]
    a374:	2b08      	cmp	r3, #8
    a376:	d106      	bne.n	a386 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a378:	4b05      	ldr	r3, [pc, #20]	; (a390 <nrf52_errata_103+0x20>)
    a37a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    a37c:	2b05      	cmp	r3, #5
    a37e:	d802      	bhi.n	a386 <nrf52_errata_103+0x16>
    a380:	4a04      	ldr	r2, [pc, #16]	; (a394 <nrf52_errata_103+0x24>)
    a382:	5cd0      	ldrb	r0, [r2, r3]
    a384:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    a386:	2000      	movs	r0, #0
    #endif
}
    a388:	4770      	bx	lr
    a38a:	bf00      	nop
    a38c:	10000130 	.word	0x10000130
    a390:	10000134 	.word	0x10000134
    a394:	0001f848 	.word	0x0001f848

0000a398 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    a398:	4a02      	ldr	r2, [pc, #8]	; (a3a4 <nvmc_wait+0xc>)
    a39a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    a39e:	2b00      	cmp	r3, #0
    a3a0:	d0fb      	beq.n	a39a <nvmc_wait+0x2>
}
    a3a2:	4770      	bx	lr
    a3a4:	4001e000 	.word	0x4001e000

0000a3a8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    a3a8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    a3aa:	f7ff ffd7 	bl	a35c <nrf52_errata_136>
    a3ae:	b140      	cbz	r0, a3c2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    a3b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a3b4:	2200      	movs	r2, #0
    a3b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    a3ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    a3be:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    a3c2:	f7ff ffcb 	bl	a35c <nrf52_errata_136>
    a3c6:	2800      	cmp	r0, #0
    a3c8:	d046      	beq.n	a458 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    a3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a3ce:	4b61      	ldr	r3, [pc, #388]	; (a554 <SystemInit+0x1ac>)
    a3d0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    a3d4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    a3d8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    a3dc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    a3e0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    a3e4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    a3e8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    a3ec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    a3f0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    a3f4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    a3f8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    a3fc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    a400:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    a404:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    a408:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    a40c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    a410:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    a414:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    a418:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    a41c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    a420:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    a424:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    a428:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    a42c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    a430:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    a434:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    a438:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    a43c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    a440:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    a444:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    a448:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    a44c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    a450:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    a454:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    a458:	f7ff ff8a 	bl	a370 <nrf52_errata_103>
    a45c:	b110      	cbz	r0, a464 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    a45e:	4b3e      	ldr	r3, [pc, #248]	; (a558 <SystemInit+0x1b0>)
    a460:	4a3e      	ldr	r2, [pc, #248]	; (a55c <SystemInit+0x1b4>)
    a462:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    a464:	f7ff ff84 	bl	a370 <nrf52_errata_103>
    a468:	b118      	cbz	r0, a472 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    a46a:	4b3d      	ldr	r3, [pc, #244]	; (a560 <SystemInit+0x1b8>)
    a46c:	22fb      	movs	r2, #251	; 0xfb
    a46e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    a472:	f7ff ff7d 	bl	a370 <nrf52_errata_103>
    a476:	b148      	cbz	r0, a48c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    a478:	493a      	ldr	r1, [pc, #232]	; (a564 <SystemInit+0x1bc>)
    a47a:	4b3b      	ldr	r3, [pc, #236]	; (a568 <SystemInit+0x1c0>)
    a47c:	680a      	ldr	r2, [r1, #0]
    a47e:	681b      	ldr	r3, [r3, #0]
    a480:	f022 020f 	bic.w	r2, r2, #15
    a484:	f003 030f 	and.w	r3, r3, #15
    a488:	4313      	orrs	r3, r2
    a48a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    a48c:	f7ff ff70 	bl	a370 <nrf52_errata_103>
    a490:	b118      	cbz	r0, a49a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    a492:	4b36      	ldr	r3, [pc, #216]	; (a56c <SystemInit+0x1c4>)
    a494:	f44f 7200 	mov.w	r2, #512	; 0x200
    a498:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    a49a:	f7ff ff5f 	bl	a35c <nrf52_errata_136>
    a49e:	b148      	cbz	r0, a4b4 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    a4a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a4a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    a4a8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    a4aa:	bf44      	itt	mi
    a4ac:	f06f 0201 	mvnmi.w	r2, #1
    a4b0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a4b4:	4b2e      	ldr	r3, [pc, #184]	; (a570 <SystemInit+0x1c8>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a4b6:	681b      	ldr	r3, [r3, #0]
    a4b8:	2b08      	cmp	r3, #8
    a4ba:	d10e      	bne.n	a4da <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a4bc:	4b2d      	ldr	r3, [pc, #180]	; (a574 <SystemInit+0x1cc>)
    a4be:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    a4c0:	2b05      	cmp	r3, #5
    a4c2:	d802      	bhi.n	a4ca <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    a4c4:	4a2c      	ldr	r2, [pc, #176]	; (a578 <SystemInit+0x1d0>)
    a4c6:	5cd3      	ldrb	r3, [r2, r3]
    a4c8:	b13b      	cbz	r3, a4da <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    a4ca:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    a4ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    a4d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a4d6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    a4da:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    a4de:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    a4e2:	07db      	lsls	r3, r3, #31
    a4e4:	d514      	bpl.n	a510 <SystemInit+0x168>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    a4e6:	4825      	ldr	r0, [pc, #148]	; (a57c <SystemInit+0x1d4>)
    a4e8:	2301      	movs	r3, #1
    a4ea:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    a4ee:	f7ff ff53 	bl	a398 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    a4f2:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
    a4f6:	f023 0301 	bic.w	r3, r3, #1
    a4fa:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
    a4fe:	f7ff ff4b 	bl	a398 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    a502:	2300      	movs	r3, #0
    a504:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
    a508:	f7ff ff46 	bl	a398 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
    a50c:	f7ff ff14 	bl	a338 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    a510:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
    a514:	2b00      	cmp	r3, #0
    a516:	db03      	blt.n	a520 <SystemInit+0x178>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    a518:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    a51c:	2b00      	cmp	r3, #0
    a51e:	da14      	bge.n	a54a <SystemInit+0x1a2>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    a520:	4916      	ldr	r1, [pc, #88]	; (a57c <SystemInit+0x1d4>)
    a522:	2301      	movs	r3, #1
    a524:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    a528:	f7ff ff36 	bl	a398 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    a52c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    a530:	2412      	movs	r4, #18
    a532:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    a536:	f7ff ff2f 	bl	a398 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    a53a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    a53e:	f7ff ff2b 	bl	a398 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    a542:	2300      	movs	r3, #0
    a544:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    a548:	e7de      	b.n	a508 <SystemInit+0x160>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    a54a:	4b0d      	ldr	r3, [pc, #52]	; (a580 <SystemInit+0x1d8>)
    a54c:	4a0d      	ldr	r2, [pc, #52]	; (a584 <SystemInit+0x1dc>)
    a54e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    a550:	bd10      	pop	{r4, pc}
    a552:	bf00      	nop
    a554:	4000c000 	.word	0x4000c000
    a558:	4000568c 	.word	0x4000568c
    a55c:	00038148 	.word	0x00038148
    a560:	4000f000 	.word	0x4000f000
    a564:	40000ee4 	.word	0x40000ee4
    a568:	10000258 	.word	0x10000258
    a56c:	40029640 	.word	0x40029640
    a570:	10000130 	.word	0x10000130
    a574:	10000134 	.word	0x10000134
    a578:	0001f842 	.word	0x0001f842
    a57c:	4001e000 	.word	0x4001e000
    a580:	200000f8 	.word	0x200000f8
    a584:	03d09000 	.word	0x03d09000

0000a588 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    a588:	4b04      	ldr	r3, [pc, #16]	; (a59c <nrfx_clock_init+0x14>)
    a58a:	791a      	ldrb	r2, [r3, #4]
    a58c:	b922      	cbnz	r2, a598 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    a58e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    a590:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    a592:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    a594:	4802      	ldr	r0, [pc, #8]	; (a5a0 <nrfx_clock_init+0x18>)
    a596:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    a598:	4802      	ldr	r0, [pc, #8]	; (a5a4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a59a:	4770      	bx	lr
    a59c:	20000fa4 	.word	0x20000fa4
    a5a0:	0bad0000 	.word	0x0bad0000
    a5a4:	0bad000c 	.word	0x0bad000c

0000a5a8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    a5a8:	b110      	cbz	r0, a5b0 <nrfx_clock_start+0x8>
    a5aa:	2801      	cmp	r0, #1
    a5ac:	d020      	beq.n	a5f0 <nrfx_clock_start+0x48>
    a5ae:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a5b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a5b4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a5b8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    a5bc:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    a5c0:	4619      	mov	r1, r3
    a5c2:	d011      	beq.n	a5e8 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    a5c4:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    a5c8:	2a01      	cmp	r2, #1
    a5ca:	d10d      	bne.n	a5e8 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    a5cc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5d0:	4b0c      	ldr	r3, [pc, #48]	; (a604 <nrfx_clock_start+0x5c>)
    a5d2:	2200      	movs	r2, #0
    a5d4:	601a      	str	r2, [r3, #0]
    a5d6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a5d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a5dc:	2202      	movs	r2, #2
    a5de:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a5e2:	2201      	movs	r2, #1
    a5e4:	609a      	str	r2, [r3, #8]
}
    a5e6:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    a5e8:	2300      	movs	r3, #0
    a5ea:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    a5ee:	e7ef      	b.n	a5d0 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5f0:	4b05      	ldr	r3, [pc, #20]	; (a608 <nrfx_clock_start+0x60>)
    a5f2:	2200      	movs	r2, #0
    a5f4:	601a      	str	r2, [r3, #0]
    a5f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a5f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a5fc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a600:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    a602:	4770      	bx	lr
    a604:	40000104 	.word	0x40000104
    a608:	40000100 	.word	0x40000100

0000a60c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    a60c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    a60e:	b110      	cbz	r0, a616 <nrfx_clock_stop+0xa>
    a610:	2801      	cmp	r0, #1
    a612:	d018      	beq.n	a646 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    a614:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    a616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a61a:	2202      	movs	r2, #2
    a61c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a620:	4a18      	ldr	r2, [pc, #96]	; (a684 <nrfx_clock_stop+0x78>)
    a622:	6010      	str	r0, [r2, #0]
    a624:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a626:	4a18      	ldr	r2, [pc, #96]	; (a688 <nrfx_clock_stop+0x7c>)
    a628:	2101      	movs	r1, #1
    a62a:	6011      	str	r1, [r2, #0]
    a62c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a630:	461c      	mov	r4, r3
    a632:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    a636:	03db      	lsls	r3, r3, #15
    a638:	d5ec      	bpl.n	a614 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    a63a:	2001      	movs	r0, #1
    a63c:	f012 fd42 	bl	1d0c4 <nrfx_busy_wait>
    a640:	3d01      	subs	r5, #1
    a642:	d1f6      	bne.n	a632 <nrfx_clock_stop+0x26>
    a644:	e7e6      	b.n	a614 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a646:	4b11      	ldr	r3, [pc, #68]	; (a68c <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    a648:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a64c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    a64e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a652:	601a      	str	r2, [r3, #0]
    a654:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a656:	4b0e      	ldr	r3, [pc, #56]	; (a690 <nrfx_clock_stop+0x84>)
    a658:	f242 7510 	movw	r5, #10000	; 0x2710
    a65c:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    a65e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    a662:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    a666:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    a668:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    a66c:	d505      	bpl.n	a67a <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    a66e:	b123      	cbz	r3, a67a <nrfx_clock_stop+0x6e>
    a670:	2001      	movs	r0, #1
    a672:	f012 fd27 	bl	1d0c4 <nrfx_busy_wait>
    a676:	3d01      	subs	r5, #1
    a678:	d1f1      	bne.n	a65e <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    a67a:	4b06      	ldr	r3, [pc, #24]	; (a694 <nrfx_clock_stop+0x88>)
    a67c:	2200      	movs	r2, #0
    a67e:	715a      	strb	r2, [r3, #5]
    a680:	e7c8      	b.n	a614 <nrfx_clock_stop+0x8>
    a682:	bf00      	nop
    a684:	40000104 	.word	0x40000104
    a688:	4000000c 	.word	0x4000000c
    a68c:	40000100 	.word	0x40000100
    a690:	40000004 	.word	0x40000004
    a694:	20000fa4 	.word	0x20000fa4

0000a698 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a698:	4b16      	ldr	r3, [pc, #88]	; (a6f4 <nrfx_power_clock_irq_handler+0x5c>)
    a69a:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    a69c:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    a69e:	b16a      	cbz	r2, a6bc <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6a0:	2200      	movs	r2, #0
    a6a2:	601a      	str	r2, [r3, #0]
    a6a4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    a6a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a6aa:	2201      	movs	r2, #1
    a6ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    a6b0:	4b11      	ldr	r3, [pc, #68]	; (a6f8 <nrfx_power_clock_irq_handler+0x60>)
    a6b2:	7958      	ldrb	r0, [r3, #5]
    a6b4:	b910      	cbnz	r0, a6bc <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    a6b6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    a6b8:	681b      	ldr	r3, [r3, #0]
    a6ba:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a6bc:	4b0f      	ldr	r3, [pc, #60]	; (a6fc <nrfx_power_clock_irq_handler+0x64>)
    a6be:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    a6c0:	b172      	cbz	r2, a6e0 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6c2:	2200      	movs	r2, #0
    a6c4:	601a      	str	r2, [r3, #0]
    a6c6:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a6c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a6cc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a6d0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    a6d4:	0792      	lsls	r2, r2, #30
    a6d6:	d104      	bne.n	a6e2 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    a6d8:	2201      	movs	r2, #1
    a6da:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6de:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    a6e0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    a6e2:	2202      	movs	r2, #2
    a6e4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    a6e8:	4b03      	ldr	r3, [pc, #12]	; (a6f8 <nrfx_power_clock_irq_handler+0x60>)
}
    a6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    a6ee:	681b      	ldr	r3, [r3, #0]
    a6f0:	2001      	movs	r0, #1
    a6f2:	4718      	bx	r3
    a6f4:	40000100 	.word	0x40000100
    a6f8:	20000fa4 	.word	0x20000fa4
    a6fc:	40000104 	.word	0x40000104

0000a700 <nrfx_comp_init>:
}


nrfx_err_t nrfx_comp_init(nrfx_comp_config_t const * p_config,
                          nrfx_comp_event_handler_t  event_handler)
{
    a700:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_state != NRFX_DRV_STATE_UNINITIALIZED)
    a702:	4c29      	ldr	r4, [pc, #164]	; (a7a8 <nrfx_comp_init+0xa8>)
    a704:	7823      	ldrb	r3, [r4, #0]
    a706:	2b00      	cmp	r3, #0
    a708:	d14b      	bne.n	a7a2 <nrfx_comp_init+0xa2>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_comp_event_handler = event_handler;
    a70a:	4b28      	ldr	r3, [pc, #160]	; (a7ac <nrfx_comp_init+0xac>)
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    nrf_comp_ref_set(NRF_COMP, p_config->reference);
    a70c:	7802      	ldrb	r2, [r0, #0]
    m_comp_event_handler = event_handler;
    a70e:	6019      	str	r1, [r3, #0]
    return ((p_reg->ENABLE) & COMP_ENABLE_ENABLE_Enabled);
}

NRF_STATIC_INLINE void nrf_comp_ref_set(NRF_COMP_Type * p_reg, nrf_comp_ref_t reference)
{
    p_reg->REFSEL = (reference << COMP_REFSEL_REFSEL_Pos);
    a710:	4b27      	ldr	r3, [pc, #156]	; (a7b0 <nrfx_comp_init+0xb0>)

    //If external source is chosen, write to appropriate register.
    if (p_config->reference == COMP_REFSEL_REFSEL_ARef)
    a712:	2a05      	cmp	r2, #5
    a714:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_comp_ext_ref_set(NRF_COMP_Type * p_reg, nrf_comp_ext_ref_t ext_ref)
{
    p_reg->EXTREFSEL = (ext_ref << COMP_EXTREFSEL_EXTREFSEL_Pos);
    a718:	bf04      	itt	eq
    a71a:	7842      	ldrbeq	r2, [r0, #1]
    a71c:	f8c3 250c 	streq.w	r2, [r3, #1292]	; 0x50c

NRF_STATIC_INLINE void nrf_comp_th_set(NRF_COMP_Type * p_reg, nrf_comp_th_t threshold)
{
    p_reg->TH =
        (((uint32_t)threshold.th_down << COMP_TH_THDOWN_Pos) & COMP_TH_THDOWN_Msk) |
        (((uint32_t)threshold.th_up << COMP_TH_THUP_Pos) & COMP_TH_THUP_Msk);
    a720:	7902      	ldrb	r2, [r0, #4]
        (((uint32_t)threshold.th_down << COMP_TH_THDOWN_Pos) & COMP_TH_THDOWN_Msk) |
    a722:	78c3      	ldrb	r3, [r0, #3]
        (((uint32_t)threshold.th_up << COMP_TH_THUP_Pos) & COMP_TH_THUP_Msk);
    a724:	0212      	lsls	r2, r2, #8
        (((uint32_t)threshold.th_down << COMP_TH_THDOWN_Pos) & COMP_TH_THDOWN_Msk) |
    a726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        (((uint32_t)threshold.th_up << COMP_TH_THUP_Pos) & COMP_TH_THUP_Msk);
    a72a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
        (((uint32_t)threshold.th_down << COMP_TH_THDOWN_Pos) & COMP_TH_THDOWN_Msk) |
    a72e:	431a      	orrs	r2, r3
    p_reg->TH =
    a730:	4b1f      	ldr	r3, [pc, #124]	; (a7b0 <nrfx_comp_init+0xb0>)
    a732:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}

NRF_STATIC_INLINE void nrf_comp_main_mode_set(NRF_COMP_Type *      p_reg,
                                              nrf_comp_main_mode_t main_mode)
{
    p_reg->MODE |= (main_mode << COMP_MODE_MAIN_Pos);
    a736:	f8d3 2534 	ldr.w	r2, [r3, #1332]	; 0x534
    a73a:	7881      	ldrb	r1, [r0, #2]
    a73c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    a740:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
}

NRF_STATIC_INLINE void nrf_comp_speed_mode_set(NRF_COMP_Type *    p_reg,
                                               nrf_comp_sp_mode_t speed_mode)
{
    p_reg->MODE |= (speed_mode << COMP_MODE_SP_Pos);
    a744:	f8d3 1534 	ldr.w	r1, [r3, #1332]	; 0x534
    a748:	7942      	ldrb	r2, [r0, #5]
    a74a:	430a      	orrs	r2, r1
    a74c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
}

NRF_STATIC_INLINE void nrf_comp_hysteresis_set(NRF_COMP_Type * p_reg, nrf_comp_hyst_t hyst)
{
    p_reg->HYST = (hyst << COMP_HYST_HYST_Pos) & COMP_HYST_HYST_Msk;
    a750:	7982      	ldrb	r2, [r0, #6]
    a752:	f002 0201 	and.w	r2, r2, #1
    a756:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
}

NRF_STATIC_INLINE void nrf_comp_shorts_disable(NRF_COMP_Type * p_reg, uint32_t mask)
{
    p_reg->SHORTS &= ~mask;
    a75a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a75e:	f022 021c 	bic.w	r2, r2, #28
    a762:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
    a766:	220f      	movs	r2, #15
    a768:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->PSEL   = ((uint32_t)input << COMP_PSEL_PSEL_Pos);
    a76c:	79c2      	ldrb	r2, [r0, #7]
    a76e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->ENABLE = (COMP_ENABLE_ENABLE_Enabled << COMP_ENABLE_ENABLE_Pos);
    a772:	2202      	movs	r2, #2
    a774:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_comp_task_trigger(NRF_COMP_Type * p_reg, nrf_comp_task_t task)
{
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    a778:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE void nrf_comp_event_clear(NRF_COMP_Type * p_reg, nrf_comp_event_t event)
{
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    a77a:	4a0e      	ldr	r2, [pc, #56]	; (a7b4 <nrfx_comp_init+0xb4>)
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    a77c:	605d      	str	r5, [r3, #4]
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    a77e:	2300      	movs	r3, #0
    a780:	6013      	str	r3, [r2, #0]
    a782:	6812      	ldr	r2, [r2, #0]
    a784:	4a0c      	ldr	r2, [pc, #48]	; (a7b8 <nrfx_comp_init+0xb8>)
    a786:	6013      	str	r3, [r2, #0]
    a788:	6812      	ldr	r2, [r2, #0]
    a78a:	4a0c      	ldr	r2, [pc, #48]	; (a7bc <nrfx_comp_init+0xbc>)
    a78c:	6013      	str	r3, [r2, #0]
    a78e:	6812      	ldr	r2, [r2, #0]
    a790:	4a0b      	ldr	r2, [pc, #44]	; (a7c0 <nrfx_comp_init+0xc0>)
    nrf_comp_event_clear(NRF_COMP, NRF_COMP_EVENT_DOWN);
    nrf_comp_event_clear(NRF_COMP, NRF_COMP_EVENT_UP);
    nrf_comp_event_clear(NRF_COMP, NRF_COMP_EVENT_CROSS);

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_COMP), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_COMP));
    a792:	2013      	movs	r0, #19
    a794:	6013      	str	r3, [r2, #0]
    a796:	6813      	ldr	r3, [r2, #0]
    a798:	f7fb feee 	bl	6578 <arch_irq_enable>

    m_state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    a79c:	4809      	ldr	r0, [pc, #36]	; (a7c4 <nrfx_comp_init+0xc4>)
    m_state = NRFX_DRV_STATE_INITIALIZED;
    a79e:	7025      	strb	r5, [r4, #0]
}
    a7a0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    a7a2:	4809      	ldr	r0, [pc, #36]	; (a7c8 <nrfx_comp_init+0xc8>)
    a7a4:	e7fc      	b.n	a7a0 <nrfx_comp_init+0xa0>
    a7a6:	bf00      	nop
    a7a8:	200020d6 	.word	0x200020d6
    a7ac:	20000fac 	.word	0x20000fac
    a7b0:	40013000 	.word	0x40013000
    a7b4:	40013100 	.word	0x40013100
    a7b8:	40013104 	.word	0x40013104
    a7bc:	40013108 	.word	0x40013108
    a7c0:	4001310c 	.word	0x4001310c
    a7c4:	0bad0000 	.word	0x0bad0000
    a7c8:	0bad0005 	.word	0x0bad0005

0000a7cc <nrfx_comp_start>:
    p_reg->INTENSET = mask;
    a7cc:	4b06      	ldr	r3, [pc, #24]	; (a7e8 <nrfx_comp_start+0x1c>)
    a7ce:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    p_reg->SHORTS |= mask;
    a7d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a7d6:	430a      	orrs	r2, r1
    a7d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
void nrfx_comp_start(uint32_t comp_int_mask, uint32_t comp_shorts_mask)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_INITIALIZED);
    nrf_comp_int_enable(NRF_COMP, comp_int_mask);
    nrf_comp_shorts_enable(NRF_COMP, comp_shorts_mask);
    m_state = NRFX_DRV_STATE_POWERED_ON;
    a7dc:	4a03      	ldr	r2, [pc, #12]	; (a7ec <nrfx_comp_start+0x20>)
    a7de:	2102      	movs	r1, #2
    a7e0:	7011      	strb	r1, [r2, #0]
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    a7e2:	2201      	movs	r2, #1
    a7e4:	601a      	str	r2, [r3, #0]
    nrf_comp_task_trigger(NRF_COMP, NRF_COMP_TASK_START);
    NRFX_LOG_INFO("Enabled.");
}
    a7e6:	4770      	bx	lr
    a7e8:	40013000 	.word	0x40013000
    a7ec:	200020d6 	.word	0x200020d6

0000a7f0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    a7f0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    a7f2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    a7f6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a7f8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    a7fa:	6002      	str	r2, [r0, #0]
}
    a7fc:	4802      	ldr	r0, [pc, #8]	; (a808 <nrf_gpio_pin_port_decode+0x18>)
    a7fe:	bf18      	it	ne
    a800:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    a804:	4770      	bx	lr
    a806:	bf00      	nop
    a808:	50000300 	.word	0x50000300

0000a80c <nrfx_gpiote_init>:
    NRFX_CRITICAL_SECTION_EXIT();
}


nrfx_err_t nrfx_gpiote_init(uint8_t interrupt_priority)
{
    a80c:	b538      	push	{r3, r4, r5, lr}
    nrfx_err_t err_code;

    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    a80e:	4c1f      	ldr	r4, [pc, #124]	; (a88c <nrfx_gpiote_init+0x80>)
    a810:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    a814:	2b00      	cmp	r3, #0
    a816:	d137      	bne.n	a888 <nrfx_gpiote_init+0x7c>
            mask = P1_FEATURE_PINS_PRESENT;
    a818:	f64f 71ff 	movw	r1, #65535	; 0xffff
    m_cb.pin_assignments[pin] = PIN_NOT_USED;
    a81c:	20ff      	movs	r0, #255	; 0xff
    uint32_t port = pin_number >> 5;
    a81e:	095a      	lsrs	r2, r3, #5
            mask = P1_FEATURE_PINS_PRESENT;
    a820:	2a01      	cmp	r2, #1
    a822:	bf14      	ite	ne
    a824:	f04f 32ff 	movne.w	r2, #4294967295
    a828:	460a      	moveq	r2, r1
    pin_number &= 0x1F;
    a82a:	f003 051f 	and.w	r5, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    a82e:	40ea      	lsrs	r2, r5

    uint8_t i;

    for (i = 0; i < MAX_PIN_NUMBER; i++)
    {
        if (nrf_gpio_pin_present_check(i))
    a830:	07d2      	lsls	r2, r2, #31
    m_cb.pin_assignments[pin] = PIN_NOT_USED;
    a832:	bf48      	it	mi
    a834:	18e2      	addmi	r2, r4, r3
    a836:	f103 0301 	add.w	r3, r3, #1
    a83a:	bf48      	it	mi
    a83c:	f882 0024 	strbmi.w	r0, [r2, #36]	; 0x24
    for (i = 0; i < MAX_PIN_NUMBER; i++)
    a840:	2b30      	cmp	r3, #48	; 0x30
    a842:	d1ec      	bne.n	a81e <nrfx_gpiote_init+0x12>
        }
    }

    for (i = 0; i < (GPIOTE_CH_NUM + NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS); i++)
    {
        m_cb.handlers[i] = UNALLOCATED_HANDLER_ADDRESS;
    a844:	f04f 33ff 	mov.w	r3, #4294967295
    a848:	e9c4 3300 	strd	r3, r3, [r4]
    a84c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    a850:	e9c4 3304 	strd	r3, r3, [r4, #16]
    a854:	e9c4 3306 	strd	r3, r3, [r4, #24]
    a858:	6223      	str	r3, [r4, #32]
    for (i = 0; i < (GPIOTE_CH_NUM + NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS); i++)
    a85a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        {
            m_cb.port_handlers_pins[i - GPIOTE_CH_NUM] = (int8_t)PIN_NOT_USED;
        }
    }

    memset(m_cb.configured_pins, 0, sizeof(m_cb.configured_pins));
    a85e:	4b0c      	ldr	r3, [pc, #48]	; (a890 <nrfx_gpiote_init+0x84>)
    a860:	2500      	movs	r5, #0
    a862:	f8c4 5055 	str.w	r5, [r4, #85]	; 0x55

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_GPIOTE), interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    a866:	2006      	movs	r0, #6
    memset(m_cb.configured_pins, 0, sizeof(m_cb.configured_pins));
    a868:	809d      	strh	r5, [r3, #4]
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    a86a:	f7fb fe85 	bl	6578 <arch_irq_enable>
    a86e:	4b09      	ldr	r3, [pc, #36]	; (a894 <nrfx_gpiote_init+0x88>)
    nrf_gpiote_int_enable(NRF_GPIOTE, GPIOTE_INTENSET_PORT_Msk);
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    a870:	4809      	ldr	r0, [pc, #36]	; (a898 <nrfx_gpiote_init+0x8c>)
    a872:	601d      	str	r5, [r3, #0]
    a874:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a876:	4b09      	ldr	r3, [pc, #36]	; (a89c <nrfx_gpiote_init+0x90>)
    a878:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    a87c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    a880:	2301      	movs	r3, #1
    a882:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
}
    a886:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    a888:	4805      	ldr	r0, [pc, #20]	; (a8a0 <nrfx_gpiote_init+0x94>)
    a88a:	e7fc      	b.n	a886 <nrfx_gpiote_init+0x7a>
    a88c:	20000fb0 	.word	0x20000fb0
    a890:	20001005 	.word	0x20001005
    a894:	4000617c 	.word	0x4000617c
    a898:	0bad0000 	.word	0x0bad0000
    a89c:	40006000 	.word	0x40006000
    a8a0:	0bad0005 	.word	0x0bad0005

0000a8a4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    a8a4:	2301      	movs	r3, #1
    a8a6:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    a8aa:	f010 0fff 	tst.w	r0, #255	; 0xff
    a8ae:	d012      	beq.n	a8d6 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    a8b0:	f04f 0320 	mov.w	r3, #32
    a8b4:	f3ef 8111 	mrs	r1, BASEPRI
    a8b8:	f383 8812 	msr	BASEPRI_MAX, r3
    a8bc:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    a8c0:	4a06      	ldr	r2, [pc, #24]	; (a8dc <nrfx_gpiote_channel_free+0x38>)
    a8c2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    a8c4:	ea23 0000 	bic.w	r0, r3, r0
    a8c8:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    a8ca:	f381 8811 	msr	BASEPRI, r1
    a8ce:	f3bf 8f6f 	isb	sy
    a8d2:	4803      	ldr	r0, [pc, #12]	; (a8e0 <nrfx_gpiote_channel_free+0x3c>)
    a8d4:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    a8d6:	4803      	ldr	r0, [pc, #12]	; (a8e4 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a8d8:	4770      	bx	lr
    a8da:	bf00      	nop
    a8dc:	20000fb0 	.word	0x20000fb0
    a8e0:	0bad0000 	.word	0x0bad0000
    a8e4:	0bad0004 	.word	0x0bad0004

0000a8e8 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8ec:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    a8ee:	f8df e060 	ldr.w	lr, [pc, #96]	; a950 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    a8f2:	4816      	ldr	r0, [pc, #88]	; (a94c <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    a8f4:	f8df 805c 	ldr.w	r8, [pc, #92]	; a954 <nrfx_gpiote_channel_alloc+0x6c>
{
    a8f8:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    a8fa:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    a8fc:	2601      	movs	r6, #1
    a8fe:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    a900:	f04f 0120 	mov.w	r1, #32
    a904:	f3ef 8c11 	mrs	ip, BASEPRI
    a908:	f381 8812 	msr	BASEPRI_MAX, r1
    a90c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    a910:	fa22 f103 	lsr.w	r1, r2, r3
    a914:	07c9      	lsls	r1, r1, #31
    a916:	d50a      	bpl.n	a92e <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    a918:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    a91c:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    a920:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    a922:	bf01      	itttt	eq
    a924:	4339      	orreq	r1, r7
    a926:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    a92a:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    a92c:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    a92e:	f38c 8811 	msr	BASEPRI, ip
    a932:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    a936:	4540      	cmp	r0, r8
    a938:	d005      	beq.n	a946 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    a93a:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    a93e:	439a      	bics	r2, r3
    a940:	f104 0401 	add.w	r4, r4, #1
    a944:	d1db      	bne.n	a8fe <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a94a:	bf00      	nop
    a94c:	0bad0002 	.word	0x0bad0002
    a950:	20000fb0 	.word	0x20000fb0
    a954:	0bad0000 	.word	0x0bad0000

0000a958 <gpiote_out_init>:

static nrfx_err_t gpiote_out_init(nrfx_gpiote_pin_t                pin,
                                  nrfx_gpiote_out_config_t const * p_config,
                                  bool                             prealloc,
                                  uint8_t                          channel)
{
    a958:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (m_cb.pin_assignments[pin] != PIN_NOT_USED);
    a95a:	4e39      	ldr	r6, [pc, #228]	; (aa40 <gpiote_out_init+0xe8>)
{
    a95c:	460d      	mov	r5, r1
    return (m_cb.pin_assignments[pin] != PIN_NOT_USED);
    a95e:	1831      	adds	r1, r6, r0
{
    a960:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb.state == NRFX_DRV_STATE_INITIALIZED);
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (pin_in_use(pin))
    a962:	f991 0024 	ldrsb.w	r0, [r1, #36]	; 0x24
    a966:	3001      	adds	r0, #1
    a968:	d166      	bne.n	aa38 <gpiote_out_init+0xe0>
    {
        err_code = NRFX_ERROR_BUSY;
    }
    else
    {
        if (p_config->task_pin)
    a96a:	78a8      	ldrb	r0, [r5, #2]
    a96c:	2800      	cmp	r0, #0
    a96e:	d056      	beq.n	aa1e <gpiote_out_init+0xc6>
        {
            int8_t ch = NO_CHANNELS;

            if (prealloc)
    a970:	2a00      	cmp	r2, #0
    a972:	d049      	beq.n	aa08 <gpiote_out_init+0xb0>
            {
                ch = channel;
    a974:	b25b      	sxtb	r3, r3
            else
            {
                ch = accuracy_channel_alloc(true);
            }

            if (ch != NO_CHANNELS)
    a976:	1c5a      	adds	r2, r3, #1
    a978:	d04c      	beq.n	aa14 <gpiote_out_init+0xbc>
    m_cb.pin_assignments[pin] = channel_id;
    a97a:	1932      	adds	r2, r6, r4
    a97c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    m_cb.handlers[channel_id] = handler;
    a980:	2200      	movs	r2, #0
    a982:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
            {
                pin_in_use_by_te_set(pin, ch, NULL, true);
                nrf_gpiote_task_configure(NRF_GPIOTE,
    a986:	009b      	lsls	r3, r3, #2
    a988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a98c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    a990:	782a      	ldrb	r2, [r5, #0]
                                                 uint32_t              idx,
                                                 uint32_t              pin,
                                                 nrf_gpiote_polarity_t polarity,
                                                 nrf_gpiote_outinit_t  init_val)
{
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    a992:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    a996:	7869      	ldrb	r1, [r5, #1]
    a998:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
                          GPIOTE_CONFIG_POLARITY_Msk |
                          GPIOTE_CONFIG_OUTINIT_Msk);

  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    a99c:	0412      	lsls	r2, r2, #16
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    a99e:	0509      	lsls	r1, r1, #20
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    a9a0:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    a9a4:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    a9a8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    a9ac:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    a9b0:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a9b2:	0221      	lsls	r1, r4, #8
    a9b4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    a9b8:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    a9bc:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    a9be:	4302      	orrs	r2, r0
    a9c0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
            pin_in_use_set(pin);
        }

        if (err_code == NRFX_SUCCESS)
        {
            if (p_config->init_state == NRF_GPIOTE_INITIAL_VALUE_HIGH)
    a9c4:	7869      	ldrb	r1, [r5, #1]
    a9c6:	9401      	str	r4, [sp, #4]
    a9c8:	2901      	cmp	r1, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a9ca:	a801      	add	r0, sp, #4
    a9cc:	d12c      	bne.n	aa28 <gpiote_out_init+0xd0>
    a9ce:	f7ff ff0f 	bl	a7f0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a9d2:	9b01      	ldr	r3, [sp, #4]
    a9d4:	4099      	lsls	r1, r3
    p_reg->OUTSET = set_mask;
    a9d6:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a9da:	a801      	add	r0, sp, #4
    a9dc:	9401      	str	r4, [sp, #4]
    a9de:	f7ff ff07 	bl	a7f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    a9e2:	9b01      	ldr	r3, [sp, #4]
    a9e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    a9e8:	2203      	movs	r2, #3
    a9ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_set(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    a9ee:	08e3      	lsrs	r3, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] |= (1 << bit);
    a9f0:	4a14      	ldr	r2, [pc, #80]	; (aa44 <gpiote_out_init+0xec>)
    a9f2:	2001      	movs	r0, #1
    a9f4:	5cd1      	ldrb	r1, [r2, r3]
    bit = BITMASK_RELBIT_GET(bit);
    a9f6:	f004 0407 	and.w	r4, r4, #7
    p_mask8[byte_idx] |= (1 << bit);
    a9fa:	fa00 f404 	lsl.w	r4, r0, r4
    a9fe:	430c      	orrs	r4, r1
    aa00:	54d4      	strb	r4, [r2, r3]
    aa02:	4811      	ldr	r0, [pc, #68]	; (aa48 <gpiote_out_init+0xf0>)
            pin_configured_set(pin);
        }
    }

    return err_code;
}
    aa04:	b002      	add	sp, #8
    aa06:	bd70      	pop	{r4, r5, r6, pc}
        if (nrfx_gpiote_channel_alloc(&i) == NRFX_SUCCESS)
    aa08:	a801      	add	r0, sp, #4
    aa0a:	f7ff ff6d 	bl	a8e8 <nrfx_gpiote_channel_alloc>
    aa0e:	4b0e      	ldr	r3, [pc, #56]	; (aa48 <gpiote_out_init+0xf0>)
    aa10:	4298      	cmp	r0, r3
    aa12:	d001      	beq.n	aa18 <gpiote_out_init+0xc0>
                err_code = NRFX_ERROR_NO_MEM;
    aa14:	480d      	ldr	r0, [pc, #52]	; (aa4c <gpiote_out_init+0xf4>)
    aa16:	e7f5      	b.n	aa04 <gpiote_out_init+0xac>
            channel_id = i;
    aa18:	f99d 3004 	ldrsb.w	r3, [sp, #4]
    return channel_id;
    aa1c:	e7ab      	b.n	a976 <gpiote_out_init+0x1e>
        else if (prealloc)
    aa1e:	b96a      	cbnz	r2, aa3c <gpiote_out_init+0xe4>
    m_cb.pin_assignments[pin] = PIN_USED;
    aa20:	23fe      	movs	r3, #254	; 0xfe
    aa22:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
        if (err_code == NRFX_SUCCESS)
    aa26:	e7cd      	b.n	a9c4 <gpiote_out_init+0x6c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    aa28:	f7ff fee2 	bl	a7f0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    aa2c:	9a01      	ldr	r2, [sp, #4]
    aa2e:	2301      	movs	r3, #1
    aa30:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    aa32:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    aa36:	e7d0      	b.n	a9da <gpiote_out_init+0x82>
        err_code = NRFX_ERROR_BUSY;
    aa38:	4805      	ldr	r0, [pc, #20]	; (aa50 <gpiote_out_init+0xf8>)
    aa3a:	e7e3      	b.n	aa04 <gpiote_out_init+0xac>
            err_code = NRFX_ERROR_INVALID_PARAM;
    aa3c:	4805      	ldr	r0, [pc, #20]	; (aa54 <gpiote_out_init+0xfc>)
    return err_code;
    aa3e:	e7e1      	b.n	aa04 <gpiote_out_init+0xac>
    aa40:	20000fb0 	.word	0x20000fb0
    aa44:	20001005 	.word	0x20001005
    aa48:	0bad0000 	.word	0x0bad0000
    aa4c:	0bad0002 	.word	0x0bad0002
    aa50:	0bad000b 	.word	0x0bad000b
    aa54:	0bad0004 	.word	0x0bad0004

0000aa58 <nrfx_gpiote_out_task_enable>:
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
    NRFX_ASSERT(pin_in_use(pin));
    NRFX_ASSERT(pin_in_use_by_te(pin));

    nrf_gpiote_task_enable(NRF_GPIOTE, (uint32_t)m_cb.pin_assignments[pin]);
    aa58:	4b07      	ldr	r3, [pc, #28]	; (aa78 <nrfx_gpiote_out_task_enable+0x20>)
    aa5a:	4403      	add	r3, r0
    aa5c:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
    aa60:	009b      	lsls	r3, r3, #2
    aa62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    aa66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    uint32_t final_config = p_reg->CONFIG[idx] | GPIOTE_CONFIG_MODE_Task;
    aa6a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    aa6e:	f042 0203 	orr.w	r2, r2, #3
    p_reg->CONFIG[idx] = final_config;
    aa72:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    aa76:	4770      	bx	lr
    aa78:	20000fb0 	.word	0x20000fb0

0000aa7c <nrfx_gpiote_set_task_get>:
    return m_cb.pin_assignments[pin];
    aa7c:	4b04      	ldr	r3, [pc, #16]	; (aa90 <nrfx_gpiote_set_task_get+0x14>)
    aa7e:	4403      	add	r3, r0

#if defined(GPIOTE_FEATURE_SET_PRESENT)
NRF_STATIC_INLINE nrf_gpiote_task_t nrf_gpiote_set_task_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_task_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, TASKS_SET[index]);
    aa80:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    aa84:	0080      	lsls	r0, r0, #2
    aa86:	3030      	adds	r0, #48	; 0x30
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
    NRFX_ASSERT(pin_in_use_by_te(pin));

    return nrf_gpiote_set_task_get((uint8_t)channel_port_get(pin));
}
    aa88:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    aa8c:	4770      	bx	lr
    aa8e:	bf00      	nop
    aa90:	20000fb0 	.word	0x20000fb0

0000aa94 <nrfx_gpiote_clr_task_get>:
    return m_cb.pin_assignments[pin];
    aa94:	4b04      	ldr	r3, [pc, #16]	; (aaa8 <nrfx_gpiote_clr_task_get+0x14>)
    aa96:	4403      	add	r3, r0

#if defined(GPIOTE_FEATURE_CLR_PRESENT)
NRF_STATIC_INLINE nrf_gpiote_task_t nrf_gpiote_clr_task_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_task_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, TASKS_CLR[index]);
    aa98:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    aa9c:	0080      	lsls	r0, r0, #2
    aa9e:	3060      	adds	r0, #96	; 0x60
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
    NRFX_ASSERT(pin_in_use_by_te(pin));

    return nrf_gpiote_clr_task_get((uint8_t)channel_port_get(pin));
}
    aaa0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    aaa4:	4770      	bx	lr
    aaa6:	bf00      	nop
    aaa8:	20000fb0 	.word	0x20000fb0

0000aaac <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    aaac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    aab0:	4a14      	ldr	r2, [pc, #80]	; (ab04 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    aab2:	4e15      	ldr	r6, [pc, #84]	; (ab08 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    aab4:	4f15      	ldr	r7, [pc, #84]	; (ab0c <nrfx_ppi_channel_alloc+0x60>)
{
    aab6:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    aab8:	4815      	ldr	r0, [pc, #84]	; (ab10 <nrfx_ppi_channel_alloc+0x64>)
{
    aaba:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    aabc:	f04f 0e01 	mov.w	lr, #1
    aac0:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    aac4:	f04f 0320 	mov.w	r3, #32
    aac8:	f3ef 8811 	mrs	r8, BASEPRI
    aacc:	f383 8812 	msr	BASEPRI_MAX, r3
    aad0:	f3bf 8f6f 	isb	sy
    aad4:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    aad8:	4213      	tst	r3, r2
    aada:	d007      	beq.n	aaec <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    aadc:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    aade:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    aae0:	bf01      	itttt	eq
    aae2:	4319      	orreq	r1, r3
    aae4:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    aae6:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    aaea:	4638      	moveq	r0, r7
	__asm__ volatile(
    aaec:	f388 8811 	msr	BASEPRI, r8
    aaf0:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    aaf4:	42b8      	cmp	r0, r7
    aaf6:	d003      	beq.n	ab00 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    aaf8:	439a      	bics	r2, r3
    aafa:	f104 0401 	add.w	r4, r4, #1
    aafe:	d1df      	bne.n	aac0 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ab00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab04:	000fffff 	.word	0x000fffff
    ab08:	20001010 	.word	0x20001010
    ab0c:	0bad0000 	.word	0x0bad0000
    ab10:	0bad0002 	.word	0x0bad0002

0000ab14 <nrfx_ppi_channel_enable>:
    ab14:	2301      	movs	r3, #1
    ab16:	fa03 f000 	lsl.w	r0, r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    ab1a:	f3c0 0313 	ubfx	r3, r0, #0, #20

    if (!is_app_channel(channel))
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (is_programmable_app_channel(channel) && !is_allocated_channel(channel))
    ab1e:	b11b      	cbz	r3, ab28 <nrfx_ppi_channel_enable+0x14>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    ab20:	4b05      	ldr	r3, [pc, #20]	; (ab38 <nrfx_ppi_channel_enable+0x24>)
    ab22:	681b      	ldr	r3, [r3, #0]
    else if (is_programmable_app_channel(channel) && !is_allocated_channel(channel))
    ab24:	4218      	tst	r0, r3
    ab26:	d004      	beq.n	ab32 <nrfx_ppi_channel_enable+0x1e>
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    ab28:	4b04      	ldr	r3, [pc, #16]	; (ab3c <nrfx_ppi_channel_enable+0x28>)
    ab2a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
    ab2e:	4804      	ldr	r0, [pc, #16]	; (ab40 <nrfx_ppi_channel_enable+0x2c>)
}
    ab30:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_STATE;
    ab32:	4804      	ldr	r0, [pc, #16]	; (ab44 <nrfx_ppi_channel_enable+0x30>)
    {
        nrf_ppi_channel_enable(NRF_PPI, channel);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ab34:	4770      	bx	lr
    ab36:	bf00      	nop
    ab38:	20001010 	.word	0x20001010
    ab3c:	4001f000 	.word	0x4001f000
    ab40:	0bad0000 	.word	0x0bad0000
    ab44:	0bad0005 	.word	0x0bad0005

0000ab48 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    ab48:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    ab4a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    ab4e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ab50:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    ab52:	6002      	str	r2, [r0, #0]
}
    ab54:	4802      	ldr	r0, [pc, #8]	; (ab60 <nrf_gpio_pin_port_decode+0x18>)
    ab56:	bf18      	it	ne
    ab58:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    ab5c:	4770      	bx	lr
    ab5e:	bf00      	nop
    ab60:	50000300 	.word	0x50000300

0000ab64 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    ab64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    ab68:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    ab6a:	4c4c      	ldr	r4, [pc, #304]	; (ac9c <nrfx_spi_init+0x138>)
{
    ab6c:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    ab6e:	2028      	movs	r0, #40	; 0x28
    ab70:	4370      	muls	r0, r6
    ab72:	1825      	adds	r5, r4, r0
    ab74:	7f2f      	ldrb	r7, [r5, #28]
    ab76:	2f00      	cmp	r7, #0
    ab78:	f040 808e 	bne.w	ac98 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    ab7c:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
    ab7e:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    ab80:	7b0b      	ldrb	r3, [r1, #12]
    ab82:	7808      	ldrb	r0, [r1, #0]
    ab84:	2b01      	cmp	r3, #1
    ab86:	d878      	bhi.n	ac7a <nrfx_spi_init+0x116>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    ab88:	f012 fac7 	bl	1d11a <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
    ab8c:	780b      	ldrb	r3, [r1, #0]
    ab8e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ab90:	a801      	add	r0, sp, #4
    ab92:	f7ff ffd9 	bl	ab48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    ab96:	9b01      	ldr	r3, [sp, #4]
    ab98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    ab9c:	2201      	movs	r2, #1
    ab9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    aba2:	784d      	ldrb	r5, [r1, #1]
    aba4:	2dff      	cmp	r5, #255	; 0xff
    aba6:	d06b      	beq.n	ac80 <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
    aba8:	4628      	mov	r0, r5
    abaa:	f012 fab6 	bl	1d11a <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    abae:	a801      	add	r0, sp, #4
    abb0:	9501      	str	r5, [sp, #4]
    abb2:	f7ff ffc9 	bl	ab48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    abb6:	9b01      	ldr	r3, [sp, #4]
    abb8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    abbc:	2203      	movs	r2, #3
    abbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    abc2:	788f      	ldrb	r7, [r1, #2]
    abc4:	2fff      	cmp	r7, #255	; 0xff
    abc6:	d05e      	beq.n	ac86 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    abc8:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
    abca:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
    abce:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    abd0:	f7ff ffba 	bl	ab48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    abd4:	9b01      	ldr	r3, [sp, #4]
    abd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    abda:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    abde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    abe2:	78c8      	ldrb	r0, [r1, #3]
    abe4:	28ff      	cmp	r0, #255	; 0xff
    abe6:	d00c      	beq.n	ac02 <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
    abe8:	f012 fa8a 	bl	1d100 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    abec:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_output(p_config->ss_pin);
    abee:	78cb      	ldrb	r3, [r1, #3]
    abf0:	9301      	str	r3, [sp, #4]
    abf2:	f7ff ffa9 	bl	ab48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    abf6:	9b01      	ldr	r3, [sp, #4]
    abf8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    abfc:	2203      	movs	r2, #3
    abfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    ac02:	f898 2004 	ldrb.w	r2, [r8, #4]
    ac06:	78c8      	ldrb	r0, [r1, #3]
    ac08:	2328      	movs	r3, #40	; 0x28
    ac0a:	fb03 4302 	mla	r3, r3, r2, r4
    ac0e:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    ac10:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    ac14:	780b      	ldrb	r3, [r1, #0]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    ac16:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    ac1a:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    ac1c:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    ac20:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    ac24:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    ac28:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    ac2a:	7b0d      	ldrb	r5, [r1, #12]
    ac2c:	3b00      	subs	r3, #0
    ac2e:	bf18      	it	ne
    ac30:	2301      	movne	r3, #1
    switch (spi_mode)
    ac32:	2d02      	cmp	r5, #2
    ac34:	d02a      	beq.n	ac8c <nrfx_spi_init+0x128>
    ac36:	2d03      	cmp	r5, #3
    ac38:	d02b      	beq.n	ac92 <nrfx_spi_init+0x12e>
    ac3a:	2d01      	cmp	r5, #1
    ac3c:	d101      	bne.n	ac42 <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    ac3e:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    ac42:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    ac46:	2328      	movs	r3, #40	; 0x28
    ac48:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    ac4c:	4373      	muls	r3, r6
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    ac4e:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
    ac50:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    ac52:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    ac54:	2201      	movs	r2, #1
    ac56:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
    ac5a:	b11b      	cbz	r3, ac64 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    ac5c:	f340 3007 	sbfx	r0, r0, #12, #8
    ac60:	f7fb fc8a 	bl	6578 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    ac64:	2328      	movs	r3, #40	; 0x28
    ac66:	fb03 4406 	mla	r4, r3, r6, r4
    ac6a:	2300      	movs	r3, #0
    ac6c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    ac6e:	480c      	ldr	r0, [pc, #48]	; (aca0 <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    ac70:	2301      	movs	r3, #1
    ac72:	7723      	strb	r3, [r4, #28]
}
    ac74:	b003      	add	sp, #12
    ac76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    ac7a:	f012 fa41 	bl	1d100 <nrf_gpio_pin_set>
    ac7e:	e785      	b.n	ab8c <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    ac80:	f04f 35ff 	mov.w	r5, #4294967295
    ac84:	e79d      	b.n	abc2 <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    ac86:	f04f 37ff 	mov.w	r7, #4294967295
    ac8a:	e7aa      	b.n	abe2 <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    ac8c:	f043 0304 	orr.w	r3, r3, #4
        break;
    ac90:	e7d7      	b.n	ac42 <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    ac92:	f043 0306 	orr.w	r3, r3, #6
        break;
    ac96:	e7d4      	b.n	ac42 <nrfx_spi_init+0xde>
        return err_code;
    ac98:	4802      	ldr	r0, [pc, #8]	; (aca4 <nrfx_spi_init+0x140>)
    ac9a:	e7eb      	b.n	ac74 <nrfx_spi_init+0x110>
    ac9c:	20001014 	.word	0x20001014
    aca0:	0bad0000 	.word	0x0bad0000
    aca4:	0bad0005 	.word	0x0bad0005

0000aca8 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    aca8:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    acaa:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    acac:	4e16      	ldr	r6, [pc, #88]	; (ad08 <nrfx_spi_uninit+0x60>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    acae:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    acb0:	2328      	movs	r3, #40	; 0x28
    acb2:	436b      	muls	r3, r5
    acb4:	58f3      	ldr	r3, [r6, r3]
    acb6:	b133      	cbz	r3, acc6 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    acb8:	f344 3007 	sbfx	r0, r4, #12, #8
    acbc:	f7fb fc6c 	bl	6598 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    acc0:	2304      	movs	r3, #4
    acc2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    acc6:	2300      	movs	r3, #0
    acc8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return p_reg->PSEL.SCK;
    accc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
    acd0:	f012 fa08 	bl	1d0e4 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    acd4:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510

    uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
    if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    acd8:	1c42      	adds	r2, r0, #1
    acda:	d001      	beq.n	ace0 <nrfx_spi_uninit+0x38>
    {
        nrf_gpio_cfg_default(miso_pin);
    acdc:	f012 fa02 	bl	1d0e4 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    ace0:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
    }

    uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
    if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    ace4:	1c43      	adds	r3, r0, #1
    ace6:	d001      	beq.n	acec <nrfx_spi_uninit+0x44>
    {
        nrf_gpio_cfg_default(mosi_pin);
    ace8:	f012 f9fc 	bl	1d0e4 <nrf_gpio_cfg_default>
    }

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    acec:	2328      	movs	r3, #40	; 0x28
    acee:	fb03 6205 	mla	r2, r3, r5, r6
    acf2:	4619      	mov	r1, r3
    acf4:	7f90      	ldrb	r0, [r2, #30]
    acf6:	28ff      	cmp	r0, #255	; 0xff
    acf8:	d001      	beq.n	acfe <nrfx_spi_uninit+0x56>
    {
        nrf_gpio_cfg_default(p_cb->ss_pin);
    acfa:	f012 f9f3 	bl	1d0e4 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    acfe:	fb01 6505 	mla	r5, r1, r5, r6
    ad02:	2300      	movs	r3, #0
    ad04:	772b      	strb	r3, [r5, #28]
}
    ad06:	bd70      	pop	{r4, r5, r6, pc}
    ad08:	20001014 	.word	0x20001014

0000ad0c <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    ad0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    ad10:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    ad12:	4d39      	ldr	r5, [pc, #228]	; (adf8 <nrfx_spi_xfer+0xec>)
    ad14:	2328      	movs	r3, #40	; 0x28
    ad16:	4363      	muls	r3, r4
{
    ad18:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    ad1a:	18ea      	adds	r2, r5, r3
{
    ad1c:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    ad1e:	7f51      	ldrb	r1, [r2, #29]
{
    ad20:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    ad22:	2900      	cmp	r1, #0
    ad24:	d165      	bne.n	adf2 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    ad26:	58eb      	ldr	r3, [r5, r3]
    ad28:	b10b      	cbz	r3, ad2e <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    ad2a:	2301      	movs	r3, #1
    ad2c:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    ad2e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    ad32:	2628      	movs	r6, #40	; 0x28
    ad34:	fb06 5604 	mla	r6, r6, r4, r5
    ad38:	f106 0c0c 	add.w	ip, r6, #12
    ad3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    ad40:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
    ad42:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    ad44:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    ad46:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    ad4a:	d001      	beq.n	ad50 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    ad4c:	f012 f9e5 	bl	1d11a <nrf_gpio_pin_clear>
    }
    if (flags)
    ad50:	2328      	movs	r3, #40	; 0x28
    ad52:	f1b8 0f00 	cmp.w	r8, #0
    ad56:	d006      	beq.n	ad66 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    ad58:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    ad5c:	4827      	ldr	r0, [pc, #156]	; (adfc <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    ad5e:	2300      	movs	r3, #0
    ad60:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ad62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    ad66:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
    ad6a:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
    ad6e:	2204      	movs	r2, #4
    ad70:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
    ad74:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad78:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
    ad7c:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    ad80:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
    ad82:	b192      	cbz	r2, adaa <nrfx_spi_xfer+0x9e>
    ad84:	683b      	ldr	r3, [r7, #0]
    ad86:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    ad88:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    ad8c:	2a01      	cmp	r2, #1
    ad8e:	d90e      	bls.n	adae <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    ad90:	683b      	ldr	r3, [r7, #0]
    ad92:	785b      	ldrb	r3, [r3, #1]
    ad94:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
    ad98:	2328      	movs	r3, #40	; 0x28
    ad9a:	4363      	muls	r3, r4
    ad9c:	58ef      	ldr	r7, [r5, r3]
    ad9e:	b177      	cbz	r7, adbe <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
    ada0:	2304      	movs	r3, #4
    ada2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    ada6:	4816      	ldr	r0, [pc, #88]	; (ae00 <nrfx_spi_xfer+0xf4>)
    ada8:	e7db      	b.n	ad62 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    adaa:	7fdb      	ldrb	r3, [r3, #31]
    adac:	e7ec      	b.n	ad88 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    adae:	68fb      	ldr	r3, [r7, #12]
    adb0:	2b01      	cmp	r3, #1
    adb2:	d9f1      	bls.n	ad98 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    adb4:	2328      	movs	r3, #40	; 0x28
    adb6:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
    adba:	7fdb      	ldrb	r3, [r3, #31]
    adbc:	e7ea      	b.n	ad94 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    adbe:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    adc2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    adc6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    adca:	2b00      	cmp	r3, #0
    adcc:	d0fb      	beq.n	adc6 <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    adce:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    add2:	4630      	mov	r0, r6
    add4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    add8:	f012 f9ac 	bl	1d134 <transfer_byte>
    addc:	2800      	cmp	r0, #0
    adde:	d1f2      	bne.n	adc6 <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    ade0:	2328      	movs	r3, #40	; 0x28
    ade2:	fb03 5404 	mla	r4, r3, r4, r5
    ade6:	7fa0      	ldrb	r0, [r4, #30]
    ade8:	28ff      	cmp	r0, #255	; 0xff
    adea:	d0dc      	beq.n	ada6 <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
    adec:	f012 f988 	bl	1d100 <nrf_gpio_pin_set>
    adf0:	e7d9      	b.n	ada6 <nrfx_spi_xfer+0x9a>
        return err_code;
    adf2:	4804      	ldr	r0, [pc, #16]	; (ae04 <nrfx_spi_xfer+0xf8>)
    adf4:	e7b5      	b.n	ad62 <nrfx_spi_xfer+0x56>
    adf6:	bf00      	nop
    adf8:	20001014 	.word	0x20001014
    adfc:	0bad0003 	.word	0x0bad0003
    ae00:	0bad0000 	.word	0x0bad0000
    ae04:	0bad000b 	.word	0x0bad000b

0000ae08 <nrfx_spi_1_irq_handler>:
    ae08:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    ae0c:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    ae0e:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
    ae10:	490b      	ldr	r1, [pc, #44]	; (ae40 <nrfx_spi_1_irq_handler+0x38>)
    ae12:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    ae16:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    ae1a:	f012 f98b 	bl	1d134 <transfer_byte>
    ae1e:	b968      	cbnz	r0, ae3c <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    ae20:	7f88      	ldrb	r0, [r1, #30]
    ae22:	28ff      	cmp	r0, #255	; 0xff
    ae24:	d001      	beq.n	ae2a <nrfx_spi_1_irq_handler+0x22>
        nrf_gpio_pin_set(p_cb->ss_pin);
    ae26:	f012 f96b 	bl	1d100 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    ae2a:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    ae2c:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
    ae2e:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
    ae30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    ae34:	e9d1 3100 	ldrd	r3, r1, [r1]
    ae38:	4802      	ldr	r0, [pc, #8]	; (ae44 <nrfx_spi_1_irq_handler+0x3c>)
    ae3a:	4718      	bx	r3
}
    ae3c:	bd10      	pop	{r4, pc}
    ae3e:	bf00      	nop
    ae40:	20001014 	.word	0x20001014
    ae44:	2000101c 	.word	0x2000101c

0000ae48 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ae48:	4b0e      	ldr	r3, [pc, #56]	; (ae84 <z_sys_init_run_level+0x3c>)
{
    ae4a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ae4c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ae50:	3001      	adds	r0, #1
    ae52:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    ae56:	42a6      	cmp	r6, r4
    ae58:	d800      	bhi.n	ae5c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    ae5a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    ae5c:	e9d4 3500 	ldrd	r3, r5, [r4]
    ae60:	4628      	mov	r0, r5
    ae62:	4798      	blx	r3
		if (dev != NULL) {
    ae64:	b165      	cbz	r5, ae80 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    ae66:	68eb      	ldr	r3, [r5, #12]
    ae68:	b130      	cbz	r0, ae78 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    ae6a:	2800      	cmp	r0, #0
    ae6c:	bfb8      	it	lt
    ae6e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    ae70:	28ff      	cmp	r0, #255	; 0xff
    ae72:	bfa8      	it	ge
    ae74:	20ff      	movge	r0, #255	; 0xff
    ae76:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    ae78:	785a      	ldrb	r2, [r3, #1]
    ae7a:	f042 0201 	orr.w	r2, r2, #1
    ae7e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ae80:	3408      	adds	r4, #8
    ae82:	e7e8      	b.n	ae56 <z_sys_init_run_level+0xe>
    ae84:	0001e850 	.word	0x0001e850

0000ae88 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    ae88:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    ae8a:	4605      	mov	r5, r0
    ae8c:	b910      	cbnz	r0, ae94 <z_impl_device_get_binding+0xc>
		return NULL;
    ae8e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    ae90:	4620      	mov	r0, r4
    ae92:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    ae94:	7803      	ldrb	r3, [r0, #0]
    ae96:	2b00      	cmp	r3, #0
    ae98:	d0f9      	beq.n	ae8e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    ae9a:	4a0f      	ldr	r2, [pc, #60]	; (aed8 <z_impl_device_get_binding+0x50>)
    ae9c:	4c0f      	ldr	r4, [pc, #60]	; (aedc <z_impl_device_get_binding+0x54>)
    ae9e:	4616      	mov	r6, r2
    aea0:	4294      	cmp	r4, r2
    aea2:	d108      	bne.n	aeb6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    aea4:	4c0d      	ldr	r4, [pc, #52]	; (aedc <z_impl_device_get_binding+0x54>)
    aea6:	42b4      	cmp	r4, r6
    aea8:	d0f1      	beq.n	ae8e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    aeaa:	4620      	mov	r0, r4
    aeac:	f012 f976 	bl	1d19c <z_device_ready>
    aeb0:	b950      	cbnz	r0, aec8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    aeb2:	3418      	adds	r4, #24
    aeb4:	e7f7      	b.n	aea6 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    aeb6:	4620      	mov	r0, r4
    aeb8:	f012 f970 	bl	1d19c <z_device_ready>
    aebc:	b110      	cbz	r0, aec4 <z_impl_device_get_binding+0x3c>
    aebe:	6823      	ldr	r3, [r4, #0]
    aec0:	42ab      	cmp	r3, r5
    aec2:	d0e5      	beq.n	ae90 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    aec4:	3418      	adds	r4, #24
    aec6:	e7eb      	b.n	aea0 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    aec8:	6821      	ldr	r1, [r4, #0]
    aeca:	4628      	mov	r0, r5
    aecc:	f7f5 ff6e 	bl	dac <strcmp>
    aed0:	2800      	cmp	r0, #0
    aed2:	d1ee      	bne.n	aeb2 <z_impl_device_get_binding+0x2a>
    aed4:	e7dc      	b.n	ae90 <z_impl_device_get_binding+0x8>
    aed6:	bf00      	nop
    aed8:	0001defc 	.word	0x0001defc
    aedc:	0001de54 	.word	0x0001de54

0000aee0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    aee0:	4b01      	ldr	r3, [pc, #4]	; (aee8 <z_impl_z_errno+0x8>)
    aee2:	6898      	ldr	r0, [r3, #8]
}
    aee4:	3064      	adds	r0, #100	; 0x64
    aee6:	4770      	bx	lr
    aee8:	2000103c 	.word	0x2000103c

0000aeec <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    aeec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aef0:	4606      	mov	r6, r0
    aef2:	460f      	mov	r7, r1
	__asm__ volatile(
    aef4:	f04f 0320 	mov.w	r3, #32
    aef8:	f3ef 8811 	mrs	r8, BASEPRI
    aefc:	f383 8812 	msr	BASEPRI_MAX, r3
    af00:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    af04:	f000 ff7c 	bl	be00 <z_impl_z_current_get>
    af08:	4c1f      	ldr	r4, [pc, #124]	; (af88 <z_fatal_error+0x9c>)
    af0a:	4b20      	ldr	r3, [pc, #128]	; (af8c <z_fatal_error+0xa0>)
    af0c:	1ae4      	subs	r4, r4, r3
    af0e:	2e04      	cmp	r6, #4
    af10:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    af14:	bf96      	itet	ls
    af16:	4a1e      	ldrls	r2, [pc, #120]	; (af90 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    af18:	4a1e      	ldrhi	r2, [pc, #120]	; (af94 <z_fatal_error+0xa8>)
    af1a:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    af1e:	01a4      	lsls	r4, r4, #6
    af20:	f044 0301 	orr.w	r3, r4, #1
    af24:	4605      	mov	r5, r0
    af26:	f8ad 3000 	strh.w	r3, [sp]
    af2a:	481b      	ldr	r0, [pc, #108]	; (af98 <z_fatal_error+0xac>)
    af2c:	2300      	movs	r3, #0
    af2e:	4631      	mov	r1, r6
    af30:	f011 f884 	bl	1c03c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    af34:	b147      	cbz	r7, af48 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    af36:	69fb      	ldr	r3, [r7, #28]
    af38:	f3c3 0308 	ubfx	r3, r3, #0, #9
    af3c:	b123      	cbz	r3, af48 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    af3e:	4817      	ldr	r0, [pc, #92]	; (af9c <z_fatal_error+0xb0>)
    af40:	f044 0101 	orr.w	r1, r4, #1
    af44:	f011 f840 	bl	1bfc8 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    af48:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    af4c:	b12d      	cbz	r5, af5a <z_fatal_error+0x6e>
    af4e:	4628      	mov	r0, r5
    af50:	f012 f97b 	bl	1d24a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    af54:	b108      	cbz	r0, af5a <z_fatal_error+0x6e>
    af56:	7803      	ldrb	r3, [r0, #0]
    af58:	b903      	cbnz	r3, af5c <z_fatal_error+0x70>
		thread_name = "unknown";
    af5a:	4811      	ldr	r0, [pc, #68]	; (afa0 <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    af5c:	f7fa fcd6 	bl	590c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
    af60:	4623      	mov	r3, r4
    af62:	4602      	mov	r2, r0
    af64:	4629      	mov	r1, r5
    af66:	480f      	ldr	r0, [pc, #60]	; (afa4 <z_fatal_error+0xb8>)
    af68:	f011 f84f 	bl	1c00a <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    af6c:	4639      	mov	r1, r7
    af6e:	4630      	mov	r0, r6
    af70:	f7ff f9cc 	bl	a30c <k_sys_fatal_error_handler>
	__asm__ volatile(
    af74:	f388 8811 	msr	BASEPRI, r8
    af78:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    af7c:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    af7e:	b002      	add	sp, #8
    af80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    af84:	f7fb bef8 	b.w	6d78 <z_impl_k_thread_abort>
    af88:	0001e09c 	.word	0x0001e09c
    af8c:	0001e07c 	.word	0x0001e07c
    af90:	0001e868 	.word	0x0001e868
    af94:	0001f84e 	.word	0x0001f84e
    af98:	0001f864 	.word	0x0001f864
    af9c:	0001f88c 	.word	0x0001f88c
    afa0:	0001f85c 	.word	0x0001f85c
    afa4:	0001f8ad 	.word	0x0001f8ad

0000afa8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    afa8:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    afaa:	2300      	movs	r3, #0
{
    afac:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    afae:	2201      	movs	r2, #1
    afb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    afb4:	220f      	movs	r2, #15
    afb6:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    afba:	4c0d      	ldr	r4, [pc, #52]	; (aff0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    afbc:	4a0d      	ldr	r2, [pc, #52]	; (aff4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    afbe:	9301      	str	r3, [sp, #4]
    afc0:	490d      	ldr	r1, [pc, #52]	; (aff8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    afc2:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    afc4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    afc8:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    afcc:	f44f 75b0 	mov.w	r5, #352	; 0x160
    afd0:	9300      	str	r3, [sp, #0]
    afd2:	fb05 1100 	mla	r1, r5, r0, r1
    afd6:	4b09      	ldr	r3, [pc, #36]	; (affc <init_idle_thread+0x54>)
    afd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    afdc:	4620      	mov	r0, r4
    afde:	f000 f8f9 	bl	b1d4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    afe2:	7b63      	ldrb	r3, [r4, #13]
    afe4:	f023 0304 	bic.w	r3, r3, #4
    afe8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    afea:	b007      	add	sp, #28
    afec:	bd30      	pop	{r4, r5, pc}
    afee:	bf00      	nop
    aff0:	200003d8 	.word	0x200003d8
    aff4:	2000103c 	.word	0x2000103c
    aff8:	200035e0 	.word	0x200035e0
    affc:	0000b34d 	.word	0x0000b34d

0000b000 <bg_thread_main>:
{
    b000:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    b002:	4b0a      	ldr	r3, [pc, #40]	; (b02c <bg_thread_main+0x2c>)
    b004:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    b006:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    b008:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    b00a:	f7ff ff1d 	bl	ae48 <z_sys_init_run_level>
	boot_banner();
    b00e:	f001 fa09 	bl	c424 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    b012:	2003      	movs	r0, #3
    b014:	f7ff ff18 	bl	ae48 <z_sys_init_run_level>
	z_init_static_threads();
    b018:	f000 f93a 	bl	b290 <z_init_static_threads>
	main();
    b01c:	f7f6 fa7c 	bl	1518 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    b020:	4a03      	ldr	r2, [pc, #12]	; (b030 <bg_thread_main+0x30>)
    b022:	7b13      	ldrb	r3, [r2, #12]
    b024:	f023 0301 	bic.w	r3, r3, #1
    b028:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    b02a:	bd08      	pop	{r3, pc}
    b02c:	200020d7 	.word	0x200020d7
    b030:	20000458 	.word	0x20000458

0000b034 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    b034:	4802      	ldr	r0, [pc, #8]	; (b040 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    b036:	4a03      	ldr	r2, [pc, #12]	; (b044 <z_bss_zero+0x10>)
    b038:	2100      	movs	r1, #0
    b03a:	1a12      	subs	r2, r2, r0
    b03c:	f012 bc63 	b.w	1d906 <memset>
    b040:	200002b0 	.word	0x200002b0
    b044:	20002298 	.word	0x20002298

0000b048 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    b048:	b580      	push	{r7, lr}
    b04a:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    b04c:	f7fa fb9e 	bl	578c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    b050:	f8df 80d4 	ldr.w	r8, [pc, #212]	; b128 <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    b054:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    b058:	4d2d      	ldr	r5, [pc, #180]	; (b110 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    b05a:	4e2e      	ldr	r6, [pc, #184]	; (b114 <z_cstart+0xcc>)
    b05c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b05e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; b12c <z_cstart+0xe4>
    b062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b066:	2400      	movs	r4, #0
    b068:	616b      	str	r3, [r5, #20]
    b06a:	23e0      	movs	r3, #224	; 0xe0
    b06c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    b070:	77ec      	strb	r4, [r5, #31]
    b072:	762c      	strb	r4, [r5, #24]
    b074:	766c      	strb	r4, [r5, #25]
    b076:	76ac      	strb	r4, [r5, #26]
    b078:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b07c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b07e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    b082:	626b      	str	r3, [r5, #36]	; 0x24
    b084:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    b088:	f7fb fdec 	bl	6c64 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    b08c:	f7fb fa1e 	bl	64cc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b090:	f04f 33ff 	mov.w	r3, #4294967295
    b094:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b096:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b098:	f7fb ff2a 	bl	6ef0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b09c:	f7fb fe7e 	bl	6d9c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    b0a0:	f240 1301 	movw	r3, #257	; 0x101
    b0a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    b0a8:	ab06      	add	r3, sp, #24
    b0aa:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    b0ac:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b0b0:	f012 f873 	bl	1d19a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    b0b4:	4620      	mov	r0, r4
    b0b6:	f7ff fec7 	bl	ae48 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b0ba:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    b0bc:	4d16      	ldr	r5, [pc, #88]	; (b118 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b0be:	f7ff fec3 	bl	ae48 <z_sys_init_run_level>
	z_sched_init();
    b0c2:	f000 fde9 	bl	bc98 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b0c6:	4b15      	ldr	r3, [pc, #84]	; (b11c <z_cstart+0xd4>)
    b0c8:	9305      	str	r3, [sp, #20]
    b0ca:	2301      	movs	r3, #1
    b0cc:	4914      	ldr	r1, [pc, #80]	; (b120 <z_cstart+0xd8>)
    b0ce:	9400      	str	r4, [sp, #0]
    b0d0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    b0d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b0d8:	464b      	mov	r3, r9
    b0da:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b0de:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    b0e0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b0e2:	f000 f877 	bl	b1d4 <z_setup_new_thread>
    b0e6:	7b6a      	ldrb	r2, [r5, #13]
    b0e8:	f022 0204 	bic.w	r2, r2, #4
    b0ec:	736a      	strb	r2, [r5, #13]
    b0ee:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    b0f0:	4628      	mov	r0, r5
    b0f2:	f012 f958 	bl	1d3a6 <z_ready_thread>
		init_idle_thread(i);
    b0f6:	4620      	mov	r0, r4
    b0f8:	f7ff ff56 	bl	afa8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    b0fc:	4b09      	ldr	r3, [pc, #36]	; (b124 <z_cstart+0xdc>)
    b0fe:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b100:	464a      	mov	r2, r9
    b102:	4639      	mov	r1, r7
    b104:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    b106:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    b108:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b10c:	f7fb fb28 	bl	6760 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    b110:	e000ed00 	.word	0xe000ed00
    b114:	2000103c 	.word	0x2000103c
    b118:	20000458 	.word	0x20000458
    b11c:	0001f90f 	.word	0x0001f90f
    b120:	200025c0 	.word	0x200025c0
    b124:	200003d8 	.word	0x200003d8
    b128:	20003f60 	.word	0x20003f60
    b12c:	0000b001 	.word	0x0000b001

0000b130 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    b130:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b132:	4b0e      	ldr	r3, [pc, #56]	; (b16c <init_mem_slab_module+0x3c>)
    b134:	4c0e      	ldr	r4, [pc, #56]	; (b170 <init_mem_slab_module+0x40>)
    b136:	42a3      	cmp	r3, r4
    b138:	d301      	bcc.n	b13e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    b13a:	2000      	movs	r0, #0
	return rc;
}
    b13c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b13e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    b142:	ea41 0200 	orr.w	r2, r1, r0
    b146:	f012 0203 	ands.w	r2, r2, #3
    b14a:	d10b      	bne.n	b164 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    b14c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    b14e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    b150:	42aa      	cmp	r2, r5
    b152:	d101      	bne.n	b158 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b154:	331c      	adds	r3, #28
    b156:	e7ee      	b.n	b136 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    b158:	695e      	ldr	r6, [r3, #20]
    b15a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    b15c:	3201      	adds	r2, #1
		slab->free_list = p;
    b15e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    b160:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    b162:	e7f5      	b.n	b150 <init_mem_slab_module+0x20>
		return -EINVAL;
    b164:	f06f 0015 	mvn.w	r0, #21
	return rc;
    b168:	e7e8      	b.n	b13c <init_mem_slab_module+0xc>
    b16a:	bf00      	nop
    b16c:	20000230 	.word	0x20000230
    b170:	20000230 	.word	0x20000230

0000b174 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    b174:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    b176:	460c      	mov	r4, r1
    b178:	4616      	mov	r6, r2
    b17a:	461f      	mov	r7, r3
	__asm__ volatile(
    b17c:	f04f 0320 	mov.w	r3, #32
    b180:	f3ef 8111 	mrs	r1, BASEPRI
    b184:	f383 8812 	msr	BASEPRI_MAX, r3
    b188:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    b18c:	6943      	ldr	r3, [r0, #20]
    b18e:	b15b      	cbz	r3, b1a8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    b190:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    b192:	681b      	ldr	r3, [r3, #0]
    b194:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    b196:	6983      	ldr	r3, [r0, #24]
    b198:	3301      	adds	r3, #1
    b19a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    b19c:	2000      	movs	r0, #0
	__asm__ volatile(
    b19e:	f381 8811 	msr	BASEPRI, r1
    b1a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    b1a6:	e011      	b.n	b1cc <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    b1a8:	ea56 0207 	orrs.w	r2, r6, r7
    b1ac:	d103      	bne.n	b1b6 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    b1ae:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    b1b0:	f06f 000b 	mvn.w	r0, #11
    b1b4:	e7f3      	b.n	b19e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    b1b6:	4602      	mov	r2, r0
    b1b8:	e9cd 6700 	strd	r6, r7, [sp]
    b1bc:	3008      	adds	r0, #8
    b1be:	f000 fcbd 	bl	bb3c <z_pend_curr>
		if (result == 0) {
    b1c2:	b918      	cbnz	r0, b1cc <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    b1c4:	4b02      	ldr	r3, [pc, #8]	; (b1d0 <k_mem_slab_alloc+0x5c>)
    b1c6:	689b      	ldr	r3, [r3, #8]
    b1c8:	695b      	ldr	r3, [r3, #20]
    b1ca:	6023      	str	r3, [r4, #0]
}
    b1cc:	b002      	add	sp, #8
    b1ce:	bdd0      	pop	{r4, r6, r7, pc}
    b1d0:	2000103c 	.word	0x2000103c

0000b1d4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b1d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    b1d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    b1da:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    b1dc:	2604      	movs	r6, #4
    b1de:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    b1e0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b1e2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    b1e4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    b1e8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b1ea:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    b1ec:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b1f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    b1f2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b1f4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    b1f8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    b1fa:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    b1fe:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    b202:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    b204:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    b206:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b208:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b20c:	9202      	str	r2, [sp, #8]
    b20e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b210:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    b212:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b216:	9200      	str	r2, [sp, #0]
    b218:	4642      	mov	r2, r8
{
    b21a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b21c:	f7fb fa6a 	bl	66f4 <arch_new_thread>
	if (!_current) {
    b220:	4b04      	ldr	r3, [pc, #16]	; (b234 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    b222:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    b224:	689b      	ldr	r3, [r3, #8]
    b226:	b103      	cbz	r3, b22a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    b228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    b22a:	6763      	str	r3, [r4, #116]	; 0x74
}
    b22c:	4640      	mov	r0, r8
    b22e:	b004      	add	sp, #16
    b230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b234:	2000103c 	.word	0x2000103c

0000b238 <z_impl_k_thread_create>:
{
    b238:	b5f0      	push	{r4, r5, r6, r7, lr}
    b23a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b23c:	2500      	movs	r5, #0
    b23e:	9505      	str	r5, [sp, #20]
    b240:	9d10      	ldr	r5, [sp, #64]	; 0x40
    b242:	9504      	str	r5, [sp, #16]
    b244:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b246:	9503      	str	r5, [sp, #12]
    b248:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b24a:	9502      	str	r5, [sp, #8]
{
    b24c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b250:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b252:	9501      	str	r5, [sp, #4]
    b254:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b256:	9500      	str	r5, [sp, #0]
{
    b258:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b25a:	f7ff ffbb 	bl	b1d4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    b25e:	1c7b      	adds	r3, r7, #1
    b260:	bf08      	it	eq
    b262:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    b266:	d005      	beq.n	b274 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b268:	ea56 0307 	orrs.w	r3, r6, r7
    b26c:	d105      	bne.n	b27a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    b26e:	4620      	mov	r0, r4
    b270:	f000 fc08 	bl	ba84 <z_sched_start>
}
    b274:	4620      	mov	r0, r4
    b276:	b007      	add	sp, #28
    b278:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b27a:	4904      	ldr	r1, [pc, #16]	; (b28c <z_impl_k_thread_create+0x54>)
    b27c:	4632      	mov	r2, r6
    b27e:	463b      	mov	r3, r7
    b280:	f104 0018 	add.w	r0, r4, #24
    b284:	f000 fea0 	bl	bfc8 <z_add_timeout>
    b288:	e7f4      	b.n	b274 <z_impl_k_thread_create+0x3c>
    b28a:	bf00      	nop
    b28c:	0001d3c7 	.word	0x0001d3c7

0000b290 <z_init_static_threads>:
{
    b290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    b294:	4e2a      	ldr	r6, [pc, #168]	; (b340 <z_init_static_threads+0xb0>)
    b296:	4d2b      	ldr	r5, [pc, #172]	; (b344 <z_init_static_threads+0xb4>)
{
    b298:	b086      	sub	sp, #24
    b29a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    b29c:	42b5      	cmp	r5, r6
    b29e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    b2a2:	d310      	bcc.n	b2c6 <z_init_static_threads+0x36>
	k_sched_lock();
    b2a4:	f000 fb02 	bl	b8ac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    b2a8:	4c26      	ldr	r4, [pc, #152]	; (b344 <z_init_static_threads+0xb4>)
    b2aa:	f8df a09c 	ldr.w	sl, [pc, #156]	; b348 <z_init_static_threads+0xb8>
    b2ae:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    b2b2:	f240 36e7 	movw	r6, #999	; 0x3e7
    b2b6:	2700      	movs	r7, #0
    b2b8:	4544      	cmp	r4, r8
    b2ba:	d321      	bcc.n	b300 <z_init_static_threads+0x70>
}
    b2bc:	b006      	add	sp, #24
    b2be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    b2c2:	f000 bccd 	b.w	bc60 <k_sched_unlock>
		z_setup_new_thread(
    b2c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b2ca:	9305      	str	r3, [sp, #20]
    b2cc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b2d0:	9304      	str	r3, [sp, #16]
    b2d2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b2d6:	9303      	str	r3, [sp, #12]
    b2d8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b2dc:	9302      	str	r3, [sp, #8]
    b2de:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b2e2:	9301      	str	r3, [sp, #4]
    b2e4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    b2e8:	9300      	str	r3, [sp, #0]
    b2ea:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    b2ee:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    b2f2:	f7ff ff6f 	bl	b1d4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b2f6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    b2fa:	655d      	str	r5, [r3, #84]	; 0x54
    b2fc:	4625      	mov	r5, r4
    b2fe:	e7cd      	b.n	b29c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b300:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b302:	1c5a      	adds	r2, r3, #1
    b304:	d00d      	beq.n	b322 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    b306:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b30a:	4630      	mov	r0, r6
    b30c:	4639      	mov	r1, r7
    b30e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b312:	42b9      	cmp	r1, r7
    b314:	bf08      	it	eq
    b316:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    b318:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b31a:	d104      	bne.n	b326 <z_init_static_threads+0x96>
	z_sched_start(thread);
    b31c:	4628      	mov	r0, r5
    b31e:	f000 fbb1 	bl	ba84 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b322:	3430      	adds	r4, #48	; 0x30
    b324:	e7c8      	b.n	b2b8 <z_init_static_threads+0x28>
    b326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b32a:	2300      	movs	r3, #0
    b32c:	f7f5 fbc4 	bl	ab8 <__aeabi_uldivmod>
    b330:	4602      	mov	r2, r0
    b332:	460b      	mov	r3, r1
    b334:	f105 0018 	add.w	r0, r5, #24
    b338:	4651      	mov	r1, sl
    b33a:	f000 fe45 	bl	bfc8 <z_add_timeout>
    b33e:	e7f0      	b.n	b322 <z_init_static_threads+0x92>
    b340:	200001f8 	.word	0x200001f8
    b344:	200001f8 	.word	0x200001f8
    b348:	0001d3c7 	.word	0x0001d3c7

0000b34c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    b34c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    b34e:	4c09      	ldr	r4, [pc, #36]	; (b374 <idle+0x28>)
	__asm__ volatile(
    b350:	f04f 0220 	mov.w	r2, #32
    b354:	f3ef 8311 	mrs	r3, BASEPRI
    b358:	f382 8812 	msr	BASEPRI_MAX, r2
    b35c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    b360:	f012 f8e0 	bl	1d524 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    b364:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    b366:	f7fa ffa3 	bl	62b0 <pm_system_suspend>
    b36a:	2800      	cmp	r0, #0
    b36c:	d1f0      	bne.n	b350 <idle+0x4>
	arch_cpu_idle();
    b36e:	f7fb f8b3 	bl	64d8 <arch_cpu_idle>
}
    b372:	e7ed      	b.n	b350 <idle+0x4>
    b374:	2000103c 	.word	0x2000103c

0000b378 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b378:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b37c:	4604      	mov	r4, r0
    b37e:	4616      	mov	r6, r2
    b380:	461f      	mov	r7, r3
    b382:	f04f 0320 	mov.w	r3, #32
    b386:	f3ef 8811 	mrs	r8, BASEPRI
    b38a:	f383 8812 	msr	BASEPRI_MAX, r3
    b38e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b392:	68c3      	ldr	r3, [r0, #12]
    b394:	4a35      	ldr	r2, [pc, #212]	; (b46c <z_impl_k_mutex_lock+0xf4>)
    b396:	b16b      	cbz	r3, b3b4 <z_impl_k_mutex_lock+0x3c>
    b398:	6880      	ldr	r0, [r0, #8]
    b39a:	6891      	ldr	r1, [r2, #8]
    b39c:	4288      	cmp	r0, r1
    b39e:	d019      	beq.n	b3d4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b3a0:	ea56 0307 	orrs.w	r3, r6, r7
    b3a4:	d118      	bne.n	b3d8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    b3a6:	f388 8811 	msr	BASEPRI, r8
    b3aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    b3ae:	f06f 000f 	mvn.w	r0, #15
    b3b2:	e00c      	b.n	b3ce <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    b3b4:	6891      	ldr	r1, [r2, #8]
    b3b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b3ba:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    b3bc:	3301      	adds	r3, #1
    b3be:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    b3c0:	6893      	ldr	r3, [r2, #8]
    b3c2:	60a3      	str	r3, [r4, #8]
    b3c4:	f388 8811 	msr	BASEPRI, r8
    b3c8:	f3bf 8f6f 	isb	sy
		return 0;
    b3cc:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b3ce:	b002      	add	sp, #8
    b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    b3d4:	6921      	ldr	r1, [r4, #16]
    b3d6:	e7f0      	b.n	b3ba <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b3d8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    b3dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    b3e0:	4299      	cmp	r1, r3
    b3e2:	bfa8      	it	ge
    b3e4:	4619      	movge	r1, r3
    b3e6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    b3ea:	4291      	cmp	r1, r2
    b3ec:	bfb8      	it	lt
    b3ee:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b3f0:	428b      	cmp	r3, r1
    b3f2:	dd2f      	ble.n	b454 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    b3f4:	f000 fbb6 	bl	bb64 <z_set_prio>
    b3f8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b3fa:	e9cd 6700 	strd	r6, r7, [sp]
    b3fe:	481c      	ldr	r0, [pc, #112]	; (b470 <z_impl_k_mutex_lock+0xf8>)
    b400:	4622      	mov	r2, r4
    b402:	4641      	mov	r1, r8
    b404:	f000 fb9a 	bl	bb3c <z_pend_curr>
	if (got_mutex == 0) {
    b408:	2800      	cmp	r0, #0
    b40a:	d0e0      	beq.n	b3ce <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    b40c:	f04f 0320 	mov.w	r3, #32
    b410:	f3ef 8611 	mrs	r6, BASEPRI
    b414:	f383 8812 	msr	BASEPRI_MAX, r3
    b418:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b41c:	6823      	ldr	r3, [r4, #0]
    b41e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b420:	429c      	cmp	r4, r3
    b422:	d00a      	beq.n	b43a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b424:	b14b      	cbz	r3, b43a <z_impl_k_mutex_lock+0xc2>
    b426:	f993 300e 	ldrsb.w	r3, [r3, #14]
    b42a:	4299      	cmp	r1, r3
    b42c:	bfa8      	it	ge
    b42e:	4619      	movge	r1, r3
    b430:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    b434:	4299      	cmp	r1, r3
    b436:	bfb8      	it	lt
    b438:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b43a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    b43c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b440:	4299      	cmp	r1, r3
    b442:	d109      	bne.n	b458 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    b444:	b16d      	cbz	r5, b462 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    b446:	480a      	ldr	r0, [pc, #40]	; (b470 <z_impl_k_mutex_lock+0xf8>)
    b448:	4631      	mov	r1, r6
    b44a:	f000 fa1d 	bl	b888 <z_reschedule>
	return -EAGAIN;
    b44e:	f06f 000a 	mvn.w	r0, #10
    b452:	e7bc      	b.n	b3ce <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    b454:	2500      	movs	r5, #0
    b456:	e7d0      	b.n	b3fa <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    b458:	f000 fb84 	bl	bb64 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    b45c:	2800      	cmp	r0, #0
    b45e:	d1f2      	bne.n	b446 <z_impl_k_mutex_lock+0xce>
    b460:	e7f0      	b.n	b444 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    b462:	f386 8811 	msr	BASEPRI, r6
    b466:	f3bf 8f6f 	isb	sy
    b46a:	e7f0      	b.n	b44e <z_impl_k_mutex_lock+0xd6>
    b46c:	2000103c 	.word	0x2000103c
    b470:	200020d8 	.word	0x200020d8

0000b474 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    b474:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b476:	6883      	ldr	r3, [r0, #8]
{
    b478:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    b47a:	2b00      	cmp	r3, #0
    b47c:	d036      	beq.n	b4ec <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b47e:	4a1e      	ldr	r2, [pc, #120]	; (b4f8 <z_impl_k_mutex_unlock+0x84>)
    b480:	6892      	ldr	r2, [r2, #8]
    b482:	4293      	cmp	r3, r2
    b484:	d135      	bne.n	b4f2 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    b486:	7bda      	ldrb	r2, [r3, #15]
    b488:	3a01      	subs	r2, #1
    b48a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    b48c:	68c3      	ldr	r3, [r0, #12]
    b48e:	2b01      	cmp	r3, #1
    b490:	d905      	bls.n	b49e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    b492:	3b01      	subs	r3, #1
    b494:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    b496:	f000 fbe3 	bl	bc60 <k_sched_unlock>

	return 0;
    b49a:	2000      	movs	r0, #0
}
    b49c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b49e:	f04f 0320 	mov.w	r3, #32
    b4a2:	f3ef 8511 	mrs	r5, BASEPRI
    b4a6:	f383 8812 	msr	BASEPRI_MAX, r3
    b4aa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b4ae:	6901      	ldr	r1, [r0, #16]
    b4b0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    b4b2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b4b6:	4299      	cmp	r1, r3
    b4b8:	d001      	beq.n	b4be <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    b4ba:	f000 fb53 	bl	bb64 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    b4be:	4620      	mov	r0, r4
    b4c0:	f011 ffe5 	bl	1d48e <z_unpend_first_thread>
	mutex->owner = new_owner;
    b4c4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    b4c6:	b158      	cbz	r0, b4e0 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    b4c8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b4cc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b4ce:	2200      	movs	r2, #0
    b4d0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    b4d2:	f011 ff68 	bl	1d3a6 <z_ready_thread>
		z_reschedule(&lock, key);
    b4d6:	4809      	ldr	r0, [pc, #36]	; (b4fc <z_impl_k_mutex_unlock+0x88>)
    b4d8:	4629      	mov	r1, r5
    b4da:	f000 f9d5 	bl	b888 <z_reschedule>
    b4de:	e7da      	b.n	b496 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    b4e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    b4e2:	f385 8811 	msr	BASEPRI, r5
    b4e6:	f3bf 8f6f 	isb	sy
    b4ea:	e7d4      	b.n	b496 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    b4ec:	f06f 0015 	mvn.w	r0, #21
    b4f0:	e7d4      	b.n	b49c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    b4f2:	f04f 30ff 	mov.w	r0, #4294967295
    b4f6:	e7d1      	b.n	b49c <z_impl_k_mutex_unlock+0x28>
    b4f8:	2000103c 	.word	0x2000103c
    b4fc:	200020d8 	.word	0x200020d8

0000b500 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b500:	b538      	push	{r3, r4, r5, lr}
    b502:	4604      	mov	r4, r0
	__asm__ volatile(
    b504:	f04f 0320 	mov.w	r3, #32
    b508:	f3ef 8511 	mrs	r5, BASEPRI
    b50c:	f383 8812 	msr	BASEPRI_MAX, r3
    b510:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b514:	f011 ffbb 	bl	1d48e <z_unpend_first_thread>

	if (thread != NULL) {
    b518:	b148      	cbz	r0, b52e <z_impl_k_sem_give+0x2e>
    b51a:	2200      	movs	r2, #0
    b51c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b51e:	f011 ff42 	bl	1d3a6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b522:	4629      	mov	r1, r5
    b524:	4808      	ldr	r0, [pc, #32]	; (b548 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    b52a:	f000 b9ad 	b.w	b888 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b52e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    b532:	429a      	cmp	r2, r3
    b534:	bf18      	it	ne
    b536:	3301      	addne	r3, #1
    b538:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    b53a:	2102      	movs	r1, #2
    b53c:	f104 0010 	add.w	r0, r4, #16
    b540:	f012 f982 	bl	1d848 <z_handle_obj_poll_events>
}
    b544:	e7ed      	b.n	b522 <z_impl_k_sem_give+0x22>
    b546:	bf00      	nop
    b548:	200020d8 	.word	0x200020d8

0000b54c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b54e:	4614      	mov	r4, r2
    b550:	461d      	mov	r5, r3
    b552:	f04f 0320 	mov.w	r3, #32
    b556:	f3ef 8111 	mrs	r1, BASEPRI
    b55a:	f383 8812 	msr	BASEPRI_MAX, r3
    b55e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b562:	6883      	ldr	r3, [r0, #8]
    b564:	b143      	cbz	r3, b578 <z_impl_k_sem_take+0x2c>
		sem->count--;
    b566:	3b01      	subs	r3, #1
    b568:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    b56a:	f381 8811 	msr	BASEPRI, r1
    b56e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b572:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b574:	b003      	add	sp, #12
    b576:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b578:	ea54 0305 	orrs.w	r3, r4, r5
    b57c:	d106      	bne.n	b58c <z_impl_k_sem_take+0x40>
    b57e:	f381 8811 	msr	BASEPRI, r1
    b582:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b586:	f06f 000f 	mvn.w	r0, #15
    b58a:	e7f3      	b.n	b574 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b58c:	4602      	mov	r2, r0
    b58e:	e9cd 4500 	strd	r4, r5, [sp]
    b592:	4802      	ldr	r0, [pc, #8]	; (b59c <z_impl_k_sem_take+0x50>)
    b594:	f000 fad2 	bl	bb3c <z_pend_curr>
	return ret;
    b598:	e7ec      	b.n	b574 <z_impl_k_sem_take+0x28>
    b59a:	bf00      	nop
    b59c:	200020d8 	.word	0x200020d8

0000b5a0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    b5a4:	4e4b      	ldr	r6, [pc, #300]	; (b6d4 <work_queue_main+0x134>)
{
    b5a6:	b085      	sub	sp, #20
    b5a8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    b5aa:	f04f 38ff 	mov.w	r8, #4294967295
    b5ae:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    b5b2:	f04f 0320 	mov.w	r3, #32
    b5b6:	f3ef 8711 	mrs	r7, BASEPRI
    b5ba:	f383 8812 	msr	BASEPRI_MAX, r3
    b5be:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    b5c2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    b5c6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    b5ca:	b985      	cbnz	r5, b5ee <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
    b5cc:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    b5d0:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
    b5d2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    b5d6:	d433      	bmi.n	b640 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    b5d8:	2300      	movs	r3, #0
    b5da:	e9cd 8900 	strd	r8, r9, [sp]
    b5de:	9302      	str	r3, [sp, #8]
    b5e0:	f104 0288 	add.w	r2, r4, #136	; 0x88
    b5e4:	4639      	mov	r1, r7
    b5e6:	483c      	ldr	r0, [pc, #240]	; (b6d8 <work_queue_main+0x138>)
    b5e8:	f000 fc72 	bl	bed0 <z_sched_wait>
			continue;
    b5ec:	e7e1      	b.n	b5b2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b5ee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    b5f2:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    b5f4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b5f8:	4295      	cmp	r5, r2
    b5fa:	d101      	bne.n	b600 <work_queue_main+0x60>
	list->tail = node;
    b5fc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    b600:	f043 0302 	orr.w	r3, r3, #2
    b604:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    b608:	68eb      	ldr	r3, [r5, #12]
    b60a:	f023 0304 	bic.w	r3, r3, #4
    b60e:	f043 0301 	orr.w	r3, r3, #1
    b612:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    b614:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    b616:	f387 8811 	msr	BASEPRI, r7
    b61a:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    b61e:	4628      	mov	r0, r5
    b620:	4798      	blx	r3
	__asm__ volatile(
    b622:	f04f 0320 	mov.w	r3, #32
    b626:	f3ef 8b11 	mrs	fp, BASEPRI
    b62a:	f383 8812 	msr	BASEPRI_MAX, r3
    b62e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    b632:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b634:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    b636:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b63a:	d40b      	bmi.n	b654 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
    b63c:	60ea      	str	r2, [r5, #12]
    b63e:	e00e      	b.n	b65e <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    b640:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    b644:	2200      	movs	r2, #0
    b646:	2101      	movs	r1, #1
    b648:	4628      	mov	r0, r5
    b64a:	f011 ff38 	bl	1d4be <z_sched_wake>
    b64e:	2800      	cmp	r0, #0
    b650:	d1f8      	bne.n	b644 <work_queue_main+0xa4>
    b652:	e7c1      	b.n	b5d8 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    b654:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    b656:	f023 0303 	bic.w	r3, r3, #3
    b65a:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    b65c:	b970      	cbnz	r0, b67c <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
    b65e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    b662:	f023 0302 	bic.w	r3, r3, #2
    b666:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    b66a:	f38b 8811 	msr	BASEPRI, fp
    b66e:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    b672:	05d8      	lsls	r0, r3, #23
    b674:	d49d      	bmi.n	b5b2 <work_queue_main+0x12>
	z_impl_k_yield();
    b676:	f000 fb1b 	bl	bcb0 <z_impl_k_yield>
}
    b67a:	e79a      	b.n	b5b2 <work_queue_main+0x12>
	return node->next;
    b67c:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b67e:	f04f 0a00 	mov.w	sl, #0
    b682:	2f00      	cmp	r7, #0
    b684:	bf38      	it	cc
    b686:	2700      	movcc	r7, #0
	parent->next = child;
    b688:	4653      	mov	r3, sl
		if (wc->work == work) {
    b68a:	6842      	ldr	r2, [r0, #4]
    b68c:	4295      	cmp	r5, r2
    b68e:	4601      	mov	r1, r0
    b690:	d10e      	bne.n	b6b0 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    b692:	6801      	ldr	r1, [r0, #0]
    b694:	f1ba 0f00 	cmp.w	sl, #0
    b698:	d114      	bne.n	b6c4 <work_queue_main+0x124>
    b69a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    b69c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    b69e:	4290      	cmp	r0, r2
    b6a0:	d100      	bne.n	b6a4 <work_queue_main+0x104>
	list->tail = node;
    b6a2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    b6a4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    b6a8:	f7ff ff2a 	bl	b500 <z_impl_k_sem_give>
}
    b6ac:	4651      	mov	r1, sl
    b6ae:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    b6b0:	2f00      	cmp	r7, #0
    b6b2:	d0d4      	beq.n	b65e <work_queue_main+0xbe>
	return node->next;
    b6b4:	683a      	ldr	r2, [r7, #0]
    b6b6:	2a00      	cmp	r2, #0
    b6b8:	bf38      	it	cc
    b6ba:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b6bc:	4638      	mov	r0, r7
    b6be:	468a      	mov	sl, r1
    b6c0:	4617      	mov	r7, r2
    b6c2:	e7e2      	b.n	b68a <work_queue_main+0xea>
	parent->next = child;
    b6c4:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
    b6c8:	6872      	ldr	r2, [r6, #4]
    b6ca:	4290      	cmp	r0, r2
	list->tail = node;
    b6cc:	bf08      	it	eq
    b6ce:	f8c6 a004 	streq.w	sl, [r6, #4]
}
    b6d2:	e7e7      	b.n	b6a4 <work_queue_main+0x104>
    b6d4:	20001064 	.word	0x20001064
    b6d8:	200020d8 	.word	0x200020d8

0000b6dc <submit_to_queue_locked>:
{
    b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b6de:	68c3      	ldr	r3, [r0, #12]
    b6e0:	079a      	lsls	r2, r3, #30
{
    b6e2:	4604      	mov	r4, r0
    b6e4:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b6e6:	f3c3 0540 	ubfx	r5, r3, #1, #1
    b6ea:	d41f      	bmi.n	b72c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    b6ec:	075f      	lsls	r7, r3, #29
    b6ee:	d41f      	bmi.n	b730 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    b6f0:	680a      	ldr	r2, [r1, #0]
    b6f2:	b90a      	cbnz	r2, b6f8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    b6f4:	6882      	ldr	r2, [r0, #8]
    b6f6:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    b6f8:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    b6fa:	bf44      	itt	mi
    b6fc:	68a3      	ldrmi	r3, [r4, #8]
    b6fe:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    b700:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    b702:	bf4c      	ite	mi
    b704:	2502      	movmi	r5, #2
		ret = 1;
    b706:	2501      	movpl	r5, #1
	if (queue == NULL) {
    b708:	b37f      	cbz	r7, b76a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    b70a:	4b1b      	ldr	r3, [pc, #108]	; (b778 <submit_to_queue_locked+0x9c>)
    b70c:	689b      	ldr	r3, [r3, #8]
    b70e:	42bb      	cmp	r3, r7
    b710:	d111      	bne.n	b736 <submit_to_queue_locked+0x5a>
    b712:	f011 fd91 	bl	1d238 <k_is_in_isr>
    b716:	f080 0001 	eor.w	r0, r0, #1
    b71a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    b71c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b720:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    b722:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b726:	d523      	bpl.n	b770 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    b728:	b13a      	cbz	r2, b73a <submit_to_queue_locked+0x5e>
    b72a:	b940      	cbnz	r0, b73e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    b72c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    b730:	2300      	movs	r3, #0
    b732:	6033      	str	r3, [r6, #0]
	return ret;
    b734:	e013      	b.n	b75e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    b736:	2000      	movs	r0, #0
    b738:	e7f0      	b.n	b71c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    b73a:	071b      	lsls	r3, r3, #28
    b73c:	d4f6      	bmi.n	b72c <submit_to_queue_locked+0x50>
	parent->next = child;
    b73e:	2300      	movs	r3, #0
    b740:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    b742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    b746:	b963      	cbnz	r3, b762 <submit_to_queue_locked+0x86>
	list->head = node;
    b748:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    b74c:	4638      	mov	r0, r7
    b74e:	f011 fd9e 	bl	1d28e <notify_queue_locked>
	*flagp |= BIT(bit);
    b752:	68e3      	ldr	r3, [r4, #12]
    b754:	f043 0304 	orr.w	r3, r3, #4
    b758:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    b75a:	6833      	ldr	r3, [r6, #0]
    b75c:	60a3      	str	r3, [r4, #8]
}
    b75e:	4628      	mov	r0, r5
    b760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    b762:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b764:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    b768:	e7f0      	b.n	b74c <submit_to_queue_locked+0x70>
		return -EINVAL;
    b76a:	f06f 0515 	mvn.w	r5, #21
    b76e:	e7df      	b.n	b730 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    b770:	f06f 0512 	mvn.w	r5, #18
    b774:	e7dc      	b.n	b730 <submit_to_queue_locked+0x54>
    b776:	bf00      	nop
    b778:	2000103c 	.word	0x2000103c

0000b77c <k_work_submit>:
{
    b77c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    b77e:	4801      	ldr	r0, [pc, #4]	; (b784 <k_work_submit+0x8>)
    b780:	f011 bd95 	b.w	1d2ae <k_work_submit_to_queue>
    b784:	200004e0 	.word	0x200004e0

0000b788 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    b788:	b5f0      	push	{r4, r5, r6, r7, lr}
    b78a:	b089      	sub	sp, #36	; 0x24
    b78c:	4604      	mov	r4, r0
	list->head = NULL;
    b78e:	2000      	movs	r0, #0
	list->tail = NULL;
    b790:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    b794:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b796:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    b79a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    b79e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    b7a2:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    b7a6:	b31d      	cbz	r5, b7f0 <k_work_queue_start+0x68>
    b7a8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    b7aa:	2800      	cmp	r0, #0
    b7ac:	f240 1001 	movw	r0, #257	; 0x101
    b7b0:	bf08      	it	eq
    b7b2:	2001      	moveq	r0, #1
	*flagp = flags;
    b7b4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b7b8:	2000      	movs	r0, #0
    b7ba:	f04f 36ff 	mov.w	r6, #4294967295
    b7be:	f04f 37ff 	mov.w	r7, #4294967295
    b7c2:	e9cd 3003 	strd	r3, r0, [sp, #12]
    b7c6:	e9cd 0001 	strd	r0, r0, [sp, #4]
    b7ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
    b7ce:	4b09      	ldr	r3, [pc, #36]	; (b7f4 <k_work_queue_start+0x6c>)
    b7d0:	9400      	str	r4, [sp, #0]
    b7d2:	4620      	mov	r0, r4
    b7d4:	f7ff fd30 	bl	b238 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    b7d8:	b125      	cbz	r5, b7e4 <k_work_queue_start+0x5c>
    b7da:	6829      	ldr	r1, [r5, #0]
    b7dc:	b111      	cbz	r1, b7e4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    b7de:	4620      	mov	r0, r4
    b7e0:	f011 fd30 	bl	1d244 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    b7e4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    b7e6:	b009      	add	sp, #36	; 0x24
    b7e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b7ec:	f011 bd2f 	b.w	1d24e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    b7f0:	2001      	movs	r0, #1
    b7f2:	e7df      	b.n	b7b4 <k_work_queue_start+0x2c>
    b7f4:	0000b5a1 	.word	0x0000b5a1

0000b7f8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    b7f8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    b7fa:	4c08      	ldr	r4, [pc, #32]	; (b81c <z_reset_time_slice+0x24>)
    b7fc:	6823      	ldr	r3, [r4, #0]
    b7fe:	b15b      	cbz	r3, b818 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    b800:	f7fe fd7a 	bl	a2f8 <sys_clock_elapsed>
    b804:	4603      	mov	r3, r0
    b806:	6820      	ldr	r0, [r4, #0]
    b808:	4a05      	ldr	r2, [pc, #20]	; (b820 <z_reset_time_slice+0x28>)
    b80a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    b80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    b810:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    b812:	2100      	movs	r1, #0
    b814:	f011 be96 	b.w	1d544 <z_set_timeout_expiry>
}
    b818:	bd10      	pop	{r4, pc}
    b81a:	bf00      	nop
    b81c:	20001074 	.word	0x20001074
    b820:	2000103c 	.word	0x2000103c

0000b824 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b826:	4604      	mov	r4, r0
    b828:	460d      	mov	r5, r1
	__asm__ volatile(
    b82a:	f04f 0320 	mov.w	r3, #32
    b82e:	f3ef 8611 	mrs	r6, BASEPRI
    b832:	f383 8812 	msr	BASEPRI_MAX, r3
    b836:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    b83a:	4b10      	ldr	r3, [pc, #64]	; (b87c <k_sched_time_slice_set+0x58>)
    b83c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    b83e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b842:	f240 30e7 	movw	r0, #999	; 0x3e7
    b846:	2100      	movs	r1, #0
    b848:	611a      	str	r2, [r3, #16]
    b84a:	fbe7 0104 	umlal	r0, r1, r7, r4
    b84e:	2300      	movs	r3, #0
    b850:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b854:	f7f5 f930 	bl	ab8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    b858:	2c00      	cmp	r4, #0
    b85a:	4b09      	ldr	r3, [pc, #36]	; (b880 <k_sched_time_slice_set+0x5c>)
    b85c:	dc09      	bgt.n	b872 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    b85e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    b860:	4b08      	ldr	r3, [pc, #32]	; (b884 <k_sched_time_slice_set+0x60>)
    b862:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    b864:	f7ff ffc8 	bl	b7f8 <z_reset_time_slice>
	__asm__ volatile(
    b868:	f386 8811 	msr	BASEPRI, r6
    b86c:	f3bf 8f6f 	isb	sy
	}
}
    b870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    b872:	2802      	cmp	r0, #2
    b874:	bfb8      	it	lt
    b876:	2002      	movlt	r0, #2
    b878:	e7f1      	b.n	b85e <k_sched_time_slice_set+0x3a>
    b87a:	bf00      	nop
    b87c:	2000103c 	.word	0x2000103c
    b880:	20001074 	.word	0x20001074
    b884:	20001070 	.word	0x20001070

0000b888 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b888:	b949      	cbnz	r1, b89e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b88a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    b88e:	b930      	cbnz	r0, b89e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    b890:	4b05      	ldr	r3, [pc, #20]	; (b8a8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    b892:	69da      	ldr	r2, [r3, #28]
    b894:	689b      	ldr	r3, [r3, #8]
    b896:	429a      	cmp	r2, r3
    b898:	d001      	beq.n	b89e <z_reschedule+0x16>
	ret = arch_swap(key);
    b89a:	f7fa bed7 	b.w	664c <arch_swap>
    b89e:	f381 8811 	msr	BASEPRI, r1
    b8a2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    b8a6:	4770      	bx	lr
    b8a8:	2000103c 	.word	0x2000103c

0000b8ac <k_sched_lock>:
	__asm__ volatile(
    b8ac:	f04f 0320 	mov.w	r3, #32
    b8b0:	f3ef 8111 	mrs	r1, BASEPRI
    b8b4:	f383 8812 	msr	BASEPRI_MAX, r3
    b8b8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    b8bc:	4b04      	ldr	r3, [pc, #16]	; (b8d0 <k_sched_lock+0x24>)
    b8be:	689a      	ldr	r2, [r3, #8]
    b8c0:	7bd3      	ldrb	r3, [r2, #15]
    b8c2:	3b01      	subs	r3, #1
    b8c4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    b8c6:	f381 8811 	msr	BASEPRI, r1
    b8ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    b8ce:	4770      	bx	lr
    b8d0:	2000103c 	.word	0x2000103c

0000b8d4 <update_cache>:
{
    b8d4:	b538      	push	{r3, r4, r5, lr}
    b8d6:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    b8d8:	480c      	ldr	r0, [pc, #48]	; (b90c <update_cache+0x38>)
    b8da:	4d0d      	ldr	r5, [pc, #52]	; (b910 <update_cache+0x3c>)
    b8dc:	f011 fd59 	bl	1d392 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b8e0:	4604      	mov	r4, r0
    b8e2:	b900      	cbnz	r0, b8e6 <update_cache+0x12>
    b8e4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    b8e6:	68ab      	ldr	r3, [r5, #8]
    b8e8:	b94a      	cbnz	r2, b8fe <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    b8ea:	7b5a      	ldrb	r2, [r3, #13]
    b8ec:	06d2      	lsls	r2, r2, #27
    b8ee:	d106      	bne.n	b8fe <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b8f0:	69a2      	ldr	r2, [r4, #24]
    b8f2:	b922      	cbnz	r2, b8fe <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    b8f4:	89da      	ldrh	r2, [r3, #14]
    b8f6:	2a7f      	cmp	r2, #127	; 0x7f
    b8f8:	d901      	bls.n	b8fe <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    b8fa:	61eb      	str	r3, [r5, #28]
}
    b8fc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    b8fe:	429c      	cmp	r4, r3
    b900:	d001      	beq.n	b906 <update_cache+0x32>
			z_reset_time_slice();
    b902:	f7ff ff79 	bl	b7f8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    b906:	61ec      	str	r4, [r5, #28]
}
    b908:	e7f8      	b.n	b8fc <update_cache+0x28>
    b90a:	bf00      	nop
    b90c:	2000105c 	.word	0x2000105c
    b910:	2000103c 	.word	0x2000103c

0000b914 <move_thread_to_end_of_prio_q>:
{
    b914:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    b916:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    b91a:	7b43      	ldrb	r3, [r0, #13]
    b91c:	2a00      	cmp	r2, #0
{
    b91e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b920:	da04      	bge.n	b92c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b926:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    b928:	f011 fcde 	bl	1d2e8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b92c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    b92e:	4a17      	ldr	r2, [pc, #92]	; (b98c <move_thread_to_end_of_prio_q+0x78>)
    b930:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b934:	4610      	mov	r0, r2
    b936:	734b      	strb	r3, [r1, #13]
    b938:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b93c:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b93e:	4283      	cmp	r3, r0
    b940:	bf08      	it	eq
    b942:	2300      	moveq	r3, #0
    b944:	2b00      	cmp	r3, #0
    b946:	bf38      	it	cc
    b948:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b94a:	b1cb      	cbz	r3, b980 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    b94c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    b950:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    b954:	42a6      	cmp	r6, r4
    b956:	d00f      	beq.n	b978 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    b958:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    b95a:	2c00      	cmp	r4, #0
    b95c:	dd0c      	ble.n	b978 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b95e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    b960:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    b964:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    b966:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    b968:	6890      	ldr	r0, [r2, #8]
    b96a:	1a43      	subs	r3, r0, r1
    b96c:	4258      	negs	r0, r3
}
    b96e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    b972:	4158      	adcs	r0, r3
    b974:	f7ff bfae 	b.w	b8d4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b978:	42ab      	cmp	r3, r5
    b97a:	d001      	beq.n	b980 <move_thread_to_end_of_prio_q+0x6c>
    b97c:	681b      	ldr	r3, [r3, #0]
    b97e:	e7e4      	b.n	b94a <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    b980:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    b984:	6029      	str	r1, [r5, #0]
	list->tail = node;
    b986:	6251      	str	r1, [r2, #36]	; 0x24
}
    b988:	e7ee      	b.n	b968 <move_thread_to_end_of_prio_q+0x54>
    b98a:	bf00      	nop
    b98c:	2000103c 	.word	0x2000103c

0000b990 <z_time_slice>:
{
    b990:	b570      	push	{r4, r5, r6, lr}
    b992:	4601      	mov	r1, r0
	__asm__ volatile(
    b994:	f04f 0320 	mov.w	r3, #32
    b998:	f3ef 8411 	mrs	r4, BASEPRI
    b99c:	f383 8812 	msr	BASEPRI_MAX, r3
    b9a0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    b9a4:	4b16      	ldr	r3, [pc, #88]	; (ba00 <z_time_slice+0x70>)
    b9a6:	4a17      	ldr	r2, [pc, #92]	; (ba04 <z_time_slice+0x74>)
    b9a8:	6898      	ldr	r0, [r3, #8]
    b9aa:	6815      	ldr	r5, [r2, #0]
    b9ac:	42a8      	cmp	r0, r5
    b9ae:	461d      	mov	r5, r3
    b9b0:	d106      	bne.n	b9c0 <z_time_slice+0x30>
			z_reset_time_slice();
    b9b2:	f7ff ff21 	bl	b7f8 <z_reset_time_slice>
	__asm__ volatile(
    b9b6:	f384 8811 	msr	BASEPRI, r4
    b9ba:	f3bf 8f6f 	isb	sy
}
    b9be:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    b9c0:	2600      	movs	r6, #0
    b9c2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    b9c4:	4a10      	ldr	r2, [pc, #64]	; (ba08 <z_time_slice+0x78>)
    b9c6:	6812      	ldr	r2, [r2, #0]
    b9c8:	b1ba      	cbz	r2, b9fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    b9ca:	89c2      	ldrh	r2, [r0, #14]
    b9cc:	2a7f      	cmp	r2, #127	; 0x7f
    b9ce:	d814      	bhi.n	b9fa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    b9d0:	7b42      	ldrb	r2, [r0, #13]
    b9d2:	06d2      	lsls	r2, r2, #27
    b9d4:	d111      	bne.n	b9fa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b9d6:	4a0d      	ldr	r2, [pc, #52]	; (ba0c <z_time_slice+0x7c>)
    b9d8:	f990 600e 	ldrsb.w	r6, [r0, #14]
    b9dc:	6812      	ldr	r2, [r2, #0]
    b9de:	4296      	cmp	r6, r2
    b9e0:	db0b      	blt.n	b9fa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    b9e2:	4a0b      	ldr	r2, [pc, #44]	; (ba10 <z_time_slice+0x80>)
    b9e4:	4290      	cmp	r0, r2
    b9e6:	d008      	beq.n	b9fa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    b9e8:	691a      	ldr	r2, [r3, #16]
    b9ea:	428a      	cmp	r2, r1
    b9ec:	dc02      	bgt.n	b9f4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    b9ee:	f7ff ff91 	bl	b914 <move_thread_to_end_of_prio_q>
    b9f2:	e7de      	b.n	b9b2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    b9f4:	1a52      	subs	r2, r2, r1
    b9f6:	611a      	str	r2, [r3, #16]
    b9f8:	e7dd      	b.n	b9b6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    b9fa:	2300      	movs	r3, #0
    b9fc:	612b      	str	r3, [r5, #16]
    b9fe:	e7da      	b.n	b9b6 <z_time_slice+0x26>
    ba00:	2000103c 	.word	0x2000103c
    ba04:	2000106c 	.word	0x2000106c
    ba08:	20001074 	.word	0x20001074
    ba0c:	20001070 	.word	0x20001070
    ba10:	200003d8 	.word	0x200003d8

0000ba14 <ready_thread>:
{
    ba14:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    ba16:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ba1a:	7b42      	ldrb	r2, [r0, #13]
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	db2d      	blt.n	ba7c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ba20:	06d3      	lsls	r3, r2, #27
    ba22:	d12b      	bne.n	ba7c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    ba24:	6983      	ldr	r3, [r0, #24]
    ba26:	bb4b      	cbnz	r3, ba7c <ready_thread+0x68>
	return list->head == list;
    ba28:	4915      	ldr	r1, [pc, #84]	; (ba80 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    ba2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ba2e:	7342      	strb	r2, [r0, #13]
    ba30:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ba32:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
    ba34:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba38:	4294      	cmp	r4, r2
    ba3a:	bf18      	it	ne
    ba3c:	4623      	movne	r3, r4
    ba3e:	2b00      	cmp	r3, #0
    ba40:	bf38      	it	cc
    ba42:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ba44:	b1ab      	cbz	r3, ba72 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    ba46:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ba4a:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    ba4e:	42a6      	cmp	r6, r4
    ba50:	d00b      	beq.n	ba6a <ready_thread+0x56>
		return b2 - b1;
    ba52:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    ba54:	2c00      	cmp	r4, #0
    ba56:	dd08      	ble.n	ba6a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    ba58:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ba5a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    ba5e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    ba60:	6058      	str	r0, [r3, #4]
}
    ba62:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    ba64:	2000      	movs	r0, #0
    ba66:	f7ff bf35 	b.w	b8d4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    ba6a:	42ab      	cmp	r3, r5
    ba6c:	d001      	beq.n	ba72 <ready_thread+0x5e>
    ba6e:	681b      	ldr	r3, [r3, #0]
    ba70:	e7e8      	b.n	ba44 <ready_thread+0x30>
	node->prev = tail;
    ba72:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    ba76:	6028      	str	r0, [r5, #0]
	list->tail = node;
    ba78:	6248      	str	r0, [r1, #36]	; 0x24
}
    ba7a:	e7f2      	b.n	ba62 <ready_thread+0x4e>
}
    ba7c:	bc70      	pop	{r4, r5, r6}
    ba7e:	4770      	bx	lr
    ba80:	2000103c 	.word	0x2000103c

0000ba84 <z_sched_start>:
{
    ba84:	b510      	push	{r4, lr}
	__asm__ volatile(
    ba86:	f04f 0220 	mov.w	r2, #32
    ba8a:	f3ef 8411 	mrs	r4, BASEPRI
    ba8e:	f382 8812 	msr	BASEPRI_MAX, r2
    ba92:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    ba96:	7b42      	ldrb	r2, [r0, #13]
    ba98:	0751      	lsls	r1, r2, #29
    ba9a:	d404      	bmi.n	baa6 <z_sched_start+0x22>
	__asm__ volatile(
    ba9c:	f384 8811 	msr	BASEPRI, r4
    baa0:	f3bf 8f6f 	isb	sy
}
    baa4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    baa6:	f022 0204 	bic.w	r2, r2, #4
    baaa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    baac:	f7ff ffb2 	bl	ba14 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    bab0:	4621      	mov	r1, r4
    bab2:	4802      	ldr	r0, [pc, #8]	; (babc <z_sched_start+0x38>)
}
    bab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    bab8:	f7ff bee6 	b.w	b888 <z_reschedule>
    babc:	200020d8 	.word	0x200020d8

0000bac0 <unready_thread>:
{
    bac0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    bac2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    bac6:	7b43      	ldrb	r3, [r0, #13]
    bac8:	2a00      	cmp	r2, #0
{
    baca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    bacc:	da04      	bge.n	bad8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bad2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bad4:	f011 fc08 	bl	1d2e8 <sys_dlist_remove>
	update_cache(thread == _current);
    bad8:	4b04      	ldr	r3, [pc, #16]	; (baec <unready_thread+0x2c>)
    bada:	6898      	ldr	r0, [r3, #8]
    badc:	1a43      	subs	r3, r0, r1
    bade:	4258      	negs	r0, r3
    bae0:	4158      	adcs	r0, r3
}
    bae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    bae6:	f7ff bef5 	b.w	b8d4 <update_cache>
    baea:	bf00      	nop
    baec:	2000103c 	.word	0x2000103c

0000baf0 <pend>:
{
    baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baf4:	4606      	mov	r6, r0
    baf6:	4614      	mov	r4, r2
    baf8:	461d      	mov	r5, r3
	__asm__ volatile(
    bafa:	f04f 0320 	mov.w	r3, #32
    bafe:	f3ef 8711 	mrs	r7, BASEPRI
    bb02:	f383 8812 	msr	BASEPRI_MAX, r3
    bb06:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    bb0a:	f011 fc7e 	bl	1d40a <add_to_waitq_locked>
	__asm__ volatile(
    bb0e:	f387 8811 	msr	BASEPRI, r7
    bb12:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bb16:	1c6b      	adds	r3, r5, #1
    bb18:	bf08      	it	eq
    bb1a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    bb1e:	d008      	beq.n	bb32 <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bb20:	4622      	mov	r2, r4
    bb22:	462b      	mov	r3, r5
    bb24:	f106 0018 	add.w	r0, r6, #24
    bb28:	4903      	ldr	r1, [pc, #12]	; (bb38 <pend+0x48>)
}
    bb2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bb2e:	f000 ba4b 	b.w	bfc8 <z_add_timeout>
    bb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb36:	bf00      	nop
    bb38:	0001d3c7 	.word	0x0001d3c7

0000bb3c <z_pend_curr>:
{
    bb3c:	b510      	push	{r4, lr}
	pending_current = _current;
    bb3e:	4b07      	ldr	r3, [pc, #28]	; (bb5c <z_pend_curr+0x20>)
    bb40:	6898      	ldr	r0, [r3, #8]
    bb42:	4b07      	ldr	r3, [pc, #28]	; (bb60 <z_pend_curr+0x24>)
{
    bb44:	460c      	mov	r4, r1
	pending_current = _current;
    bb46:	6018      	str	r0, [r3, #0]
{
    bb48:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    bb4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    bb4e:	f7ff ffcf 	bl	baf0 <pend>
    bb52:	4620      	mov	r0, r4
}
    bb54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb58:	f7fa bd78 	b.w	664c <arch_swap>
    bb5c:	2000103c 	.word	0x2000103c
    bb60:	2000106c 	.word	0x2000106c

0000bb64 <z_set_prio>:
{
    bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb66:	4604      	mov	r4, r0
	__asm__ volatile(
    bb68:	f04f 0320 	mov.w	r3, #32
    bb6c:	f3ef 8611 	mrs	r6, BASEPRI
    bb70:	f383 8812 	msr	BASEPRI_MAX, r3
    bb74:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bb78:	7b43      	ldrb	r3, [r0, #13]
    bb7a:	06da      	lsls	r2, r3, #27
    bb7c:	b249      	sxtb	r1, r1
    bb7e:	d138      	bne.n	bbf2 <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    bb80:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    bb82:	2d00      	cmp	r5, #0
    bb84:	d135      	bne.n	bbf2 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bb8a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bb8c:	f011 fbac 	bl	1d2e8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    bb90:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    bb92:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    bb94:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bb98:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    bb9a:	4817      	ldr	r0, [pc, #92]	; (bbf8 <z_set_prio+0x94>)
    bb9c:	4603      	mov	r3, r0
    bb9e:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bba2:	429f      	cmp	r7, r3
    bba4:	bf18      	it	ne
    bba6:	463d      	movne	r5, r7
    bba8:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bbaa:	6a47      	ldr	r7, [r0, #36]	; 0x24
    bbac:	461a      	mov	r2, r3
    bbae:	462b      	mov	r3, r5
    bbb0:	bf38      	it	cc
    bbb2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bbb4:	b1c3      	cbz	r3, bbe8 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    bbb6:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    bbba:	42a9      	cmp	r1, r5
    bbbc:	d010      	beq.n	bbe0 <z_set_prio+0x7c>
		return b2 - b1;
    bbbe:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    bbc0:	2d00      	cmp	r5, #0
    bbc2:	dd0d      	ble.n	bbe0 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    bbc4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    bbc6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    bbca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    bbcc:	605c      	str	r4, [r3, #4]
			update_cache(1);
    bbce:	2001      	movs	r0, #1
    bbd0:	f7ff fe80 	bl	b8d4 <update_cache>
    bbd4:	2001      	movs	r0, #1
	__asm__ volatile(
    bbd6:	f386 8811 	msr	BASEPRI, r6
    bbda:	f3bf 8f6f 	isb	sy
}
    bbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    bbe0:	42bb      	cmp	r3, r7
    bbe2:	d001      	beq.n	bbe8 <z_set_prio+0x84>
    bbe4:	681b      	ldr	r3, [r3, #0]
    bbe6:	e7e5      	b.n	bbb4 <z_set_prio+0x50>
	node->prev = tail;
    bbe8:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    bbec:	603c      	str	r4, [r7, #0]
	list->tail = node;
    bbee:	6244      	str	r4, [r0, #36]	; 0x24
}
    bbf0:	e7ed      	b.n	bbce <z_set_prio+0x6a>
			thread->base.prio = prio;
    bbf2:	73a1      	strb	r1, [r4, #14]
    bbf4:	2000      	movs	r0, #0
    bbf6:	e7ee      	b.n	bbd6 <z_set_prio+0x72>
    bbf8:	2000103c 	.word	0x2000103c

0000bbfc <z_impl_k_thread_suspend>:
{
    bbfc:	b570      	push	{r4, r5, r6, lr}
    bbfe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    bc00:	3018      	adds	r0, #24
    bc02:	f011 fc79 	bl	1d4f8 <z_abort_timeout>
	__asm__ volatile(
    bc06:	f04f 0320 	mov.w	r3, #32
    bc0a:	f3ef 8611 	mrs	r6, BASEPRI
    bc0e:	f383 8812 	msr	BASEPRI_MAX, r3
    bc12:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    bc16:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    bc1a:	7b63      	ldrb	r3, [r4, #13]
    bc1c:	2a00      	cmp	r2, #0
    bc1e:	da05      	bge.n	bc2c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bc20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bc24:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bc26:	4620      	mov	r0, r4
    bc28:	f011 fb5e 	bl	1d2e8 <sys_dlist_remove>
		update_cache(thread == _current);
    bc2c:	4d0b      	ldr	r5, [pc, #44]	; (bc5c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bc2e:	7b63      	ldrb	r3, [r4, #13]
    bc30:	68a8      	ldr	r0, [r5, #8]
    bc32:	f043 0310 	orr.w	r3, r3, #16
    bc36:	7363      	strb	r3, [r4, #13]
    bc38:	1b03      	subs	r3, r0, r4
    bc3a:	4258      	negs	r0, r3
    bc3c:	4158      	adcs	r0, r3
    bc3e:	f7ff fe49 	bl	b8d4 <update_cache>
	__asm__ volatile(
    bc42:	f386 8811 	msr	BASEPRI, r6
    bc46:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    bc4a:	68ab      	ldr	r3, [r5, #8]
    bc4c:	42a3      	cmp	r3, r4
    bc4e:	d103      	bne.n	bc58 <z_impl_k_thread_suspend+0x5c>
}
    bc50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    bc54:	f011 bb93 	b.w	1d37e <z_reschedule_unlocked>
}
    bc58:	bd70      	pop	{r4, r5, r6, pc}
    bc5a:	bf00      	nop
    bc5c:	2000103c 	.word	0x2000103c

0000bc60 <k_sched_unlock>:
{
    bc60:	b510      	push	{r4, lr}
	__asm__ volatile(
    bc62:	f04f 0320 	mov.w	r3, #32
    bc66:	f3ef 8411 	mrs	r4, BASEPRI
    bc6a:	f383 8812 	msr	BASEPRI_MAX, r3
    bc6e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    bc72:	4b08      	ldr	r3, [pc, #32]	; (bc94 <k_sched_unlock+0x34>)
    bc74:	689a      	ldr	r2, [r3, #8]
    bc76:	7bd3      	ldrb	r3, [r2, #15]
    bc78:	3301      	adds	r3, #1
    bc7a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    bc7c:	2000      	movs	r0, #0
    bc7e:	f7ff fe29 	bl	b8d4 <update_cache>
	__asm__ volatile(
    bc82:	f384 8811 	msr	BASEPRI, r4
    bc86:	f3bf 8f6f 	isb	sy
}
    bc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    bc8e:	f011 bb76 	b.w	1d37e <z_reschedule_unlocked>
    bc92:	bf00      	nop
    bc94:	2000103c 	.word	0x2000103c

0000bc98 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    bc98:	4b04      	ldr	r3, [pc, #16]	; (bcac <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    bc9a:	2100      	movs	r1, #0
    bc9c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    bca0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    bca4:	4608      	mov	r0, r1
    bca6:	f7ff bdbd 	b.w	b824 <k_sched_time_slice_set>
    bcaa:	bf00      	nop
    bcac:	2000103c 	.word	0x2000103c

0000bcb0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    bcb2:	f04f 0320 	mov.w	r3, #32
    bcb6:	f3ef 8411 	mrs	r4, BASEPRI
    bcba:	f383 8812 	msr	BASEPRI_MAX, r3
    bcbe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    bcc2:	491b      	ldr	r1, [pc, #108]	; (bd30 <z_impl_k_yield+0x80>)
    bcc4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bcc6:	7b43      	ldrb	r3, [r0, #13]
    bcc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bccc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bcce:	f011 fb0b 	bl	1d2e8 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    bcd2:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    bcd4:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    bcd6:	4608      	mov	r0, r1
    bcd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bcdc:	7353      	strb	r3, [r2, #13]
    bcde:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bce2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bce4:	4283      	cmp	r3, r0
    bce6:	bf08      	it	eq
    bce8:	2300      	moveq	r3, #0
    bcea:	2b00      	cmp	r3, #0
    bcec:	bf38      	it	cc
    bcee:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bcf0:	b1cb      	cbz	r3, bd26 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    bcf2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    bcf6:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    bcfa:	42af      	cmp	r7, r5
    bcfc:	d00f      	beq.n	bd1e <z_impl_k_yield+0x6e>
		return b2 - b1;
    bcfe:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    bd00:	2d00      	cmp	r5, #0
    bd02:	dd0c      	ble.n	bd1e <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    bd04:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    bd06:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    bd0a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    bd0c:	605a      	str	r2, [r3, #4]
	update_cache(1);
    bd0e:	2001      	movs	r0, #1
    bd10:	f7ff fde0 	bl	b8d4 <update_cache>
    bd14:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    bd16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bd1a:	f7fa bc97 	b.w	664c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    bd1e:	42b3      	cmp	r3, r6
    bd20:	d001      	beq.n	bd26 <z_impl_k_yield+0x76>
    bd22:	681b      	ldr	r3, [r3, #0]
    bd24:	e7e4      	b.n	bcf0 <z_impl_k_yield+0x40>
	node->prev = tail;
    bd26:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    bd2a:	6032      	str	r2, [r6, #0]
	list->tail = node;
    bd2c:	624a      	str	r2, [r1, #36]	; 0x24
}
    bd2e:	e7ee      	b.n	bd0e <z_impl_k_yield+0x5e>
    bd30:	2000103c 	.word	0x2000103c

0000bd34 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    bd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd38:	4604      	mov	r4, r0
    bd3a:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    bd3c:	ea54 0105 	orrs.w	r1, r4, r5
    bd40:	d104      	bne.n	bd4c <z_tick_sleep+0x18>
	z_impl_k_yield();
    bd42:	f7ff ffb5 	bl	bcb0 <z_impl_k_yield>
		k_yield();
		return 0;
    bd46:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    bd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    bd4c:	f06f 0101 	mvn.w	r1, #1
    bd50:	1a0a      	subs	r2, r1, r0
    bd52:	f04f 31ff 	mov.w	r1, #4294967295
    bd56:	eb61 0305 	sbc.w	r3, r1, r5
    bd5a:	2a01      	cmp	r2, #1
    bd5c:	f173 0300 	sbcs.w	r3, r3, #0
    bd60:	da2a      	bge.n	bdb8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    bd62:	f011 fc09 	bl	1d578 <sys_clock_tick_get_32>
    bd66:	1906      	adds	r6, r0, r4
    bd68:	f04f 0320 	mov.w	r3, #32
    bd6c:	f3ef 8811 	mrs	r8, BASEPRI
    bd70:	f383 8812 	msr	BASEPRI_MAX, r3
    bd74:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    bd78:	4f11      	ldr	r7, [pc, #68]	; (bdc0 <z_tick_sleep+0x8c>)
    bd7a:	4b12      	ldr	r3, [pc, #72]	; (bdc4 <z_tick_sleep+0x90>)
    bd7c:	68b8      	ldr	r0, [r7, #8]
    bd7e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    bd80:	f7ff fe9e 	bl	bac0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    bd84:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bd86:	4910      	ldr	r1, [pc, #64]	; (bdc8 <z_tick_sleep+0x94>)
    bd88:	4622      	mov	r2, r4
    bd8a:	462b      	mov	r3, r5
    bd8c:	3018      	adds	r0, #24
    bd8e:	f000 f91b 	bl	bfc8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    bd92:	68ba      	ldr	r2, [r7, #8]
    bd94:	7b53      	ldrb	r3, [r2, #13]
    bd96:	f043 0310 	orr.w	r3, r3, #16
    bd9a:	7353      	strb	r3, [r2, #13]
    bd9c:	4640      	mov	r0, r8
    bd9e:	f7fa fc55 	bl	664c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    bda2:	f011 fbe9 	bl	1d578 <sys_clock_tick_get_32>
    bda6:	1a30      	subs	r0, r6, r0
    bda8:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    bdac:	2801      	cmp	r0, #1
    bdae:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    bdb2:	bfb8      	it	lt
    bdb4:	2000      	movlt	r0, #0
    bdb6:	e7c7      	b.n	bd48 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    bdb8:	f06f 0601 	mvn.w	r6, #1
    bdbc:	1a36      	subs	r6, r6, r0
    bdbe:	e7d3      	b.n	bd68 <z_tick_sleep+0x34>
    bdc0:	2000103c 	.word	0x2000103c
    bdc4:	2000106c 	.word	0x2000106c
    bdc8:	0001d3c7 	.word	0x0001d3c7

0000bdcc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    bdcc:	b508      	push	{r3, lr}
    bdce:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bdd0:	3301      	adds	r3, #1
    bdd2:	bf08      	it	eq
    bdd4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    bdd8:	d106      	bne.n	bde8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    bdda:	4b08      	ldr	r3, [pc, #32]	; (bdfc <z_impl_k_sleep+0x30>)
    bddc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    bdde:	f7ff ff0d 	bl	bbfc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    bde2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    bde6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    bde8:	f7ff ffa4 	bl	bd34 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    bdec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    bdf0:	fb80 2303 	smull	r2, r3, r0, r3
    bdf4:	0bd0      	lsrs	r0, r2, #15
    bdf6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    bdfa:	e7f4      	b.n	bde6 <z_impl_k_sleep+0x1a>
    bdfc:	2000103c 	.word	0x2000103c

0000be00 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    be00:	4b01      	ldr	r3, [pc, #4]	; (be08 <z_impl_z_current_get+0x8>)
    be02:	6898      	ldr	r0, [r3, #8]
    be04:	4770      	bx	lr
    be06:	bf00      	nop
    be08:	2000103c 	.word	0x2000103c

0000be0c <z_impl_k_is_preempt_thread>:
    be0c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    be10:	b93b      	cbnz	r3, be22 <z_impl_k_is_preempt_thread+0x16>
    be12:	4b05      	ldr	r3, [pc, #20]	; (be28 <z_impl_k_is_preempt_thread+0x1c>)
    be14:	689b      	ldr	r3, [r3, #8]
    be16:	89d8      	ldrh	r0, [r3, #14]
    be18:	287f      	cmp	r0, #127	; 0x7f
    be1a:	bf8c      	ite	hi
    be1c:	2000      	movhi	r0, #0
    be1e:	2001      	movls	r0, #1
    be20:	4770      	bx	lr
    be22:	2000      	movs	r0, #0
}
    be24:	4770      	bx	lr
    be26:	bf00      	nop
    be28:	2000103c 	.word	0x2000103c

0000be2c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    be2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be30:	4604      	mov	r4, r0
    be32:	f04f 0320 	mov.w	r3, #32
    be36:	f3ef 8611 	mrs	r6, BASEPRI
    be3a:	f383 8812 	msr	BASEPRI_MAX, r3
    be3e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    be42:	7b43      	ldrb	r3, [r0, #13]
    be44:	071a      	lsls	r2, r3, #28
    be46:	d505      	bpl.n	be54 <z_thread_abort+0x28>
	__asm__ volatile(
    be48:	f386 8811 	msr	BASEPRI, r6
    be4c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    be50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    be54:	f023 0220 	bic.w	r2, r3, #32
    be58:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    be5c:	09d2      	lsrs	r2, r2, #7
    be5e:	d120      	bne.n	bea2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    be60:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    be62:	68a3      	ldr	r3, [r4, #8]
    be64:	b113      	cbz	r3, be6c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    be66:	4620      	mov	r0, r4
    be68:	f011 fa46 	bl	1d2f8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    be6c:	f104 0018 	add.w	r0, r4, #24
    be70:	f011 fb42 	bl	1d4f8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    be74:	f104 0758 	add.w	r7, r4, #88	; 0x58
    be78:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    be7c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be7e:	42bd      	cmp	r5, r7
    be80:	d000      	beq.n	be84 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    be82:	b9b5      	cbnz	r5, beb2 <z_thread_abort+0x86>
		update_cache(1);
    be84:	2001      	movs	r0, #1
    be86:	f7ff fd25 	bl	b8d4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    be8a:	4b10      	ldr	r3, [pc, #64]	; (becc <z_thread_abort+0xa0>)
    be8c:	689b      	ldr	r3, [r3, #8]
    be8e:	42a3      	cmp	r3, r4
    be90:	d1da      	bne.n	be48 <z_thread_abort+0x1c>
    be92:	f3ef 8305 	mrs	r3, IPSR
    be96:	2b00      	cmp	r3, #0
    be98:	d1d6      	bne.n	be48 <z_thread_abort+0x1c>
    be9a:	4630      	mov	r0, r6
    be9c:	f7fa fbd6 	bl	664c <arch_swap>
	return ret;
    bea0:	e7d2      	b.n	be48 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bea2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    bea6:	f043 0308 	orr.w	r3, r3, #8
    beaa:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    beac:	f011 fa1c 	bl	1d2e8 <sys_dlist_remove>
}
    beb0:	e7d7      	b.n	be62 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    beb2:	4628      	mov	r0, r5
    beb4:	f011 fa20 	bl	1d2f8 <unpend_thread_no_timeout>
    beb8:	f105 0018 	add.w	r0, r5, #24
    bebc:	f011 fb1c 	bl	1d4f8 <z_abort_timeout>
    bec0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    bec4:	4628      	mov	r0, r5
    bec6:	f7ff fda5 	bl	ba14 <ready_thread>
    beca:	e7d7      	b.n	be7c <z_thread_abort+0x50>
    becc:	2000103c 	.word	0x2000103c

0000bed0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    bed0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    bed2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    bed6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    bed8:	e9cd 6700 	strd	r6, r7, [sp]
    bedc:	f7ff fe2e 	bl	bb3c <z_pend_curr>

	if (data != NULL) {
    bee0:	b11c      	cbz	r4, beea <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    bee2:	4b03      	ldr	r3, [pc, #12]	; (bef0 <z_sched_wait+0x20>)
    bee4:	689b      	ldr	r3, [r3, #8]
    bee6:	695b      	ldr	r3, [r3, #20]
    bee8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    beea:	b002      	add	sp, #8
    beec:	bdd0      	pop	{r4, r6, r7, pc}
    beee:	bf00      	nop
    bef0:	2000103c 	.word	0x2000103c

0000bef4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    bef4:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bef6:	4806      	ldr	r0, [pc, #24]	; (bf10 <z_data_copy+0x1c>)
    bef8:	4a06      	ldr	r2, [pc, #24]	; (bf14 <z_data_copy+0x20>)
    befa:	4907      	ldr	r1, [pc, #28]	; (bf18 <z_data_copy+0x24>)
    befc:	1a12      	subs	r2, r2, r0
    befe:	f011 fcc7 	bl	1d890 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    bf02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bf06:	4a05      	ldr	r2, [pc, #20]	; (bf1c <z_data_copy+0x28>)
    bf08:	4905      	ldr	r1, [pc, #20]	; (bf20 <z_data_copy+0x2c>)
    bf0a:	4806      	ldr	r0, [pc, #24]	; (bf24 <z_data_copy+0x30>)
    bf0c:	f011 bcc0 	b.w	1d890 <memcpy>
    bf10:	20000000 	.word	0x20000000
    bf14:	200002ac 	.word	0x200002ac
    bf18:	0001fa90 	.word	0x0001fa90
    bf1c:	00000000 	.word	0x00000000
    bf20:	0001fa90 	.word	0x0001fa90
    bf24:	20000000 	.word	0x20000000

0000bf28 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    bf28:	4b03      	ldr	r3, [pc, #12]	; (bf38 <elapsed+0x10>)
    bf2a:	681b      	ldr	r3, [r3, #0]
    bf2c:	b90b      	cbnz	r3, bf32 <elapsed+0xa>
    bf2e:	f7fe b9e3 	b.w	a2f8 <sys_clock_elapsed>
}
    bf32:	2000      	movs	r0, #0
    bf34:	4770      	bx	lr
    bf36:	bf00      	nop
    bf38:	20001078 	.word	0x20001078

0000bf3c <remove_timeout>:
{
    bf3c:	b530      	push	{r4, r5, lr}
    bf3e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bf40:	b168      	cbz	r0, bf5e <remove_timeout+0x22>
    bf42:	4a0a      	ldr	r2, [pc, #40]	; (bf6c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    bf44:	6852      	ldr	r2, [r2, #4]
    bf46:	4290      	cmp	r0, r2
    bf48:	d009      	beq.n	bf5e <remove_timeout+0x22>
	if (next(t) != NULL) {
    bf4a:	b143      	cbz	r3, bf5e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    bf4c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    bf50:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    bf54:	1912      	adds	r2, r2, r4
    bf56:	eb45 0101 	adc.w	r1, r5, r1
    bf5a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    bf5e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    bf60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bf62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bf64:	2300      	movs	r3, #0
	node->prev = NULL;
    bf66:	e9c0 3300 	strd	r3, r3, [r0]
}
    bf6a:	bd30      	pop	{r4, r5, pc}
    bf6c:	200000fc 	.word	0x200000fc

0000bf70 <next_timeout>:

static int32_t next_timeout(void)
{
    bf70:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    bf72:	4b13      	ldr	r3, [pc, #76]	; (bfc0 <next_timeout+0x50>)
    bf74:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bf76:	429c      	cmp	r4, r3
    bf78:	bf08      	it	eq
    bf7a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    bf7c:	f7ff ffd4 	bl	bf28 <elapsed>
    bf80:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    bf82:	b1bc      	cbz	r4, bfb4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    bf84:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    bf88:	1b40      	subs	r0, r0, r5
    bf8a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    bf8e:	2801      	cmp	r0, #1
    bf90:	f171 0300 	sbcs.w	r3, r1, #0
    bf94:	db11      	blt.n	bfba <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    bf96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    bf9a:	2300      	movs	r3, #0
    bf9c:	4282      	cmp	r2, r0
    bf9e:	eb73 0401 	sbcs.w	r4, r3, r1
    bfa2:	da00      	bge.n	bfa6 <next_timeout+0x36>
    bfa4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    bfa6:	4b07      	ldr	r3, [pc, #28]	; (bfc4 <next_timeout+0x54>)
    bfa8:	691b      	ldr	r3, [r3, #16]
    bfaa:	b113      	cbz	r3, bfb2 <next_timeout+0x42>
    bfac:	4298      	cmp	r0, r3
    bfae:	bfa8      	it	ge
    bfb0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    bfb2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    bfb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    bfb8:	e7f5      	b.n	bfa6 <next_timeout+0x36>
    bfba:	2000      	movs	r0, #0
    bfbc:	e7f3      	b.n	bfa6 <next_timeout+0x36>
    bfbe:	bf00      	nop
    bfc0:	200000fc 	.word	0x200000fc
    bfc4:	2000103c 	.word	0x2000103c

0000bfc8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
    bfcc:	bf08      	it	eq
    bfce:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    bfd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bfd6:	4604      	mov	r4, r0
    bfd8:	4692      	mov	sl, r2
    bfda:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bfdc:	d073      	beq.n	c0c6 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    bfde:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    bfe0:	f04f 0320 	mov.w	r3, #32
    bfe4:	f3ef 8511 	mrs	r5, BASEPRI
    bfe8:	f383 8812 	msr	BASEPRI_MAX, r3
    bfec:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    bff0:	f06f 0301 	mvn.w	r3, #1
    bff4:	ebb3 080a 	subs.w	r8, r3, sl
    bff8:	f04f 32ff 	mov.w	r2, #4294967295
    bffc:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c000:	f1b8 0f00 	cmp.w	r8, #0
    c004:	f179 0100 	sbcs.w	r1, r9, #0
    c008:	db1c      	blt.n	c044 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c00a:	4830      	ldr	r0, [pc, #192]	; (c0cc <z_add_timeout+0x104>)
    c00c:	e9d0 1000 	ldrd	r1, r0, [r0]
    c010:	1a5b      	subs	r3, r3, r1
    c012:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    c016:	ebb3 060a 	subs.w	r6, r3, sl
    c01a:	eb62 070b 	sbc.w	r7, r2, fp
    c01e:	2e01      	cmp	r6, #1
    c020:	f177 0300 	sbcs.w	r3, r7, #0
    c024:	bfbc      	itt	lt
    c026:	2601      	movlt	r6, #1
    c028:	2700      	movlt	r7, #0
    c02a:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    c02e:	4a28      	ldr	r2, [pc, #160]	; (c0d0 <z_add_timeout+0x108>)
    c030:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c034:	4293      	cmp	r3, r2
    c036:	d11e      	bne.n	c076 <z_add_timeout+0xae>
	node->prev = tail;
    c038:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    c03c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    c040:	6054      	str	r4, [r2, #4]
}
    c042:	e02d      	b.n	c0a0 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    c044:	f7ff ff70 	bl	bf28 <elapsed>
    c048:	f11a 0301 	adds.w	r3, sl, #1
    c04c:	9300      	str	r3, [sp, #0]
    c04e:	f14b 0300 	adc.w	r3, fp, #0
    c052:	9301      	str	r3, [sp, #4]
    c054:	e9dd 2300 	ldrd	r2, r3, [sp]
    c058:	1812      	adds	r2, r2, r0
    c05a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    c05e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    c062:	e7e4      	b.n	c02e <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    c064:	ebb6 0008 	subs.w	r0, r6, r8
    c068:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    c06c:	4563      	cmp	r3, ip
    c06e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c072:	d0e1      	beq.n	c038 <z_add_timeout+0x70>
    c074:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    c076:	2b00      	cmp	r3, #0
    c078:	d0de      	beq.n	c038 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    c07a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    c07e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    c082:	4546      	cmp	r6, r8
    c084:	eb77 0109 	sbcs.w	r1, r7, r9
    c088:	daec      	bge.n	c064 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    c08a:	ebb8 0006 	subs.w	r0, r8, r6
    c08e:	eb69 0107 	sbc.w	r1, r9, r7
    c092:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    c096:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    c098:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    c09c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    c09e:	605c      	str	r4, [r3, #4]
	return list->head == list;
    c0a0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c0a2:	4293      	cmp	r3, r2
    c0a4:	d00b      	beq.n	c0be <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c0a6:	429c      	cmp	r4, r3
    c0a8:	d109      	bne.n	c0be <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    c0aa:	f7ff ff61 	bl	bf70 <next_timeout>

			if (next_time == 0 ||
    c0ae:	b118      	cbz	r0, c0b8 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    c0b0:	4b08      	ldr	r3, [pc, #32]	; (c0d4 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    c0b2:	691b      	ldr	r3, [r3, #16]
    c0b4:	4283      	cmp	r3, r0
    c0b6:	d002      	beq.n	c0be <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    c0b8:	2100      	movs	r1, #0
    c0ba:	f7fe f8ed 	bl	a298 <sys_clock_set_timeout>
	__asm__ volatile(
    c0be:	f385 8811 	msr	BASEPRI, r5
    c0c2:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    c0c6:	b003      	add	sp, #12
    c0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0cc:	200004d8 	.word	0x200004d8
    c0d0:	200000fc 	.word	0x200000fc
    c0d4:	2000103c 	.word	0x2000103c

0000c0d8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    c0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0dc:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    c0de:	f7ff fc57 	bl	b990 <z_time_slice>
	__asm__ volatile(
    c0e2:	f04f 0320 	mov.w	r3, #32
    c0e6:	f3ef 8411 	mrs	r4, BASEPRI
    c0ea:	f383 8812 	msr	BASEPRI_MAX, r3
    c0ee:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    c0f2:	4d2c      	ldr	r5, [pc, #176]	; (c1a4 <sys_clock_announce+0xcc>)
    c0f4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; c1a8 <sys_clock_announce+0xd0>
	return list->head == list;
    c0f8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; c1ac <sys_clock_announce+0xd4>
    c0fc:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    c0fe:	4651      	mov	r1, sl
    c100:	f8d5 c000 	ldr.w	ip, [r5]
    c104:	f8db 0000 	ldr.w	r0, [fp]
    c108:	4662      	mov	r2, ip
    c10a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c10c:	4558      	cmp	r0, fp
    c10e:	e9da 8900 	ldrd	r8, r9, [sl]
    c112:	e9cd 2300 	strd	r2, r3, [sp]
    c116:	d00d      	beq.n	c134 <sys_clock_announce+0x5c>
    c118:	b160      	cbz	r0, c134 <sys_clock_announce+0x5c>
    c11a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    c11e:	45b4      	cmp	ip, r6
    c120:	41bb      	sbcs	r3, r7
    c122:	da1e      	bge.n	c162 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    c124:	9b00      	ldr	r3, [sp, #0]
    c126:	ebb6 0c03 	subs.w	ip, r6, r3
    c12a:	9b01      	ldr	r3, [sp, #4]
    c12c:	eb67 0603 	sbc.w	r6, r7, r3
    c130:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    c134:	9b00      	ldr	r3, [sp, #0]
    c136:	eb13 0208 	adds.w	r2, r3, r8
    c13a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    c13c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    c140:	eb43 0309 	adc.w	r3, r3, r9
    c144:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    c148:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    c14a:	f7ff ff11 	bl	bf70 <next_timeout>
    c14e:	4631      	mov	r1, r6
    c150:	f7fe f8a2 	bl	a298 <sys_clock_set_timeout>
	__asm__ volatile(
    c154:	f384 8811 	msr	BASEPRI, r4
    c158:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    c15c:	b003      	add	sp, #12
    c15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    c162:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    c166:	f04f 0200 	mov.w	r2, #0
    c16a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    c16e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    c172:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    c176:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    c17a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    c17e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    c180:	f7ff fedc 	bl	bf3c <remove_timeout>
    c184:	f384 8811 	msr	BASEPRI, r4
    c188:	f3bf 8f6f 	isb	sy
		t->fn(t);
    c18c:	6883      	ldr	r3, [r0, #8]
    c18e:	4798      	blx	r3
	__asm__ volatile(
    c190:	f04f 0320 	mov.w	r3, #32
    c194:	f3ef 8411 	mrs	r4, BASEPRI
    c198:	f383 8812 	msr	BASEPRI_MAX, r3
    c19c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    c1a0:	4901      	ldr	r1, [pc, #4]	; (c1a8 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    c1a2:	e7ad      	b.n	c100 <sys_clock_announce+0x28>
    c1a4:	20001078 	.word	0x20001078
    c1a8:	200004d8 	.word	0x200004d8
    c1ac:	200000fc 	.word	0x200000fc

0000c1b0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    c1b0:	b510      	push	{r4, lr}
    c1b2:	f04f 0320 	mov.w	r3, #32
    c1b6:	f3ef 8411 	mrs	r4, BASEPRI
    c1ba:	f383 8812 	msr	BASEPRI_MAX, r3
    c1be:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    c1c2:	f7fe f899 	bl	a2f8 <sys_clock_elapsed>
    c1c6:	4b06      	ldr	r3, [pc, #24]	; (c1e0 <sys_clock_tick_get+0x30>)
    c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    c1cc:	1812      	adds	r2, r2, r0
    c1ce:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    c1d2:	f384 8811 	msr	BASEPRI, r4
    c1d6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    c1da:	4610      	mov	r0, r2
    c1dc:	4619      	mov	r1, r3
    c1de:	bd10      	pop	{r4, pc}
    c1e0:	200004d8 	.word	0x200004d8

0000c1e4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    c1e4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    c1e8:	4604      	mov	r4, r0
	__asm__ volatile(
    c1ea:	f04f 0320 	mov.w	r3, #32
    c1ee:	f3ef 8611 	mrs	r6, BASEPRI
    c1f2:	f383 8812 	msr	BASEPRI_MAX, r3
    c1f6:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    c1fa:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    c1fe:	f112 0801 	adds.w	r8, r2, #1
    c202:	f143 0900 	adc.w	r9, r3, #0
    c206:	f1b9 0f00 	cmp.w	r9, #0
    c20a:	bf08      	it	eq
    c20c:	f1b8 0f02 	cmpeq.w	r8, #2
    c210:	d302      	bcc.n	c218 <z_timer_expiration_handler+0x34>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c212:	4911      	ldr	r1, [pc, #68]	; (c258 <z_timer_expiration_handler+0x74>)
    c214:	f7ff fed8 	bl	bfc8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    c218:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c21a:	3301      	adds	r3, #1
    c21c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    c21e:	6a23      	ldr	r3, [r4, #32]
    c220:	b10b      	cbz	r3, c226 <z_timer_expiration_handler+0x42>
		timer->expiry_fn(timer);
    c222:	4620      	mov	r0, r4
    c224:	4798      	blx	r3
	return list->head == list;
    c226:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c22a:	42a5      	cmp	r5, r4
    c22c:	d000      	beq.n	c230 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    c22e:	b92d      	cbnz	r5, c23c <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    c230:	f386 8811 	msr	BASEPRI, r6
    c234:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    c238:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	z_unpend_thread_no_timeout(thread);
    c23c:	4628      	mov	r0, r5
    c23e:	f011 f86e 	bl	1d31e <z_unpend_thread_no_timeout>
    c242:	2300      	movs	r3, #0
    c244:	67eb      	str	r3, [r5, #124]	; 0x7c
    c246:	f386 8811 	msr	BASEPRI, r6
    c24a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    c24e:	4628      	mov	r0, r5
}
    c250:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
	z_ready_thread(thread);
    c254:	f011 b8a7 	b.w	1d3a6 <z_ready_thread>
    c258:	0000c1e5 	.word	0x0000c1e5

0000c25c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    c25c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    c260:	4619      	mov	r1, r3
    c262:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c264:	1c4c      	adds	r4, r1, #1
{
    c266:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c268:	bf08      	it	eq
    c26a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    c26e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    c272:	4680      	mov	r8, r0
    c274:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c276:	d04c      	beq.n	c312 <z_impl_k_timer_start+0xb6>
    c278:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    c27a:	1c6b      	adds	r3, r5, #1
    c27c:	bf08      	it	eq
    c27e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    c282:	4614      	mov	r4, r2
    c284:	d019      	beq.n	c2ba <z_impl_k_timer_start+0x5e>
    c286:	ea54 0305 	orrs.w	r3, r4, r5
    c28a:	d016      	beq.n	c2ba <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    c28c:	f06f 0301 	mvn.w	r3, #1
    c290:	ebb3 0a02 	subs.w	sl, r3, r2
    c294:	f04f 33ff 	mov.w	r3, #4294967295
    c298:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    c29c:	f1ba 0f00 	cmp.w	sl, #0
    c2a0:	f17b 0300 	sbcs.w	r3, fp, #0
    c2a4:	da09      	bge.n	c2ba <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    c2a6:	f112 34ff 	adds.w	r4, r2, #4294967295
    c2aa:	f145 35ff 	adc.w	r5, r5, #4294967295
    c2ae:	2c01      	cmp	r4, #1
    c2b0:	f175 0300 	sbcs.w	r3, r5, #0
    c2b4:	bfbc      	itt	lt
    c2b6:	2401      	movlt	r4, #1
    c2b8:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    c2ba:	f06f 0301 	mvn.w	r3, #1
    c2be:	1a1b      	subs	r3, r3, r0
    c2c0:	9300      	str	r3, [sp, #0]
    c2c2:	f04f 33ff 	mov.w	r3, #4294967295
    c2c6:	eb63 0301 	sbc.w	r3, r3, r1
    c2ca:	9301      	str	r3, [sp, #4]
    c2cc:	e9dd 2300 	ldrd	r2, r3, [sp]
    c2d0:	2a00      	cmp	r2, #0
    c2d2:	f173 0300 	sbcs.w	r3, r3, #0
    c2d6:	da0c      	bge.n	c2f2 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    c2d8:	f110 38ff 	adds.w	r8, r0, #4294967295
    c2dc:	f141 39ff 	adc.w	r9, r1, #4294967295
    c2e0:	f1b8 0f00 	cmp.w	r8, #0
    c2e4:	f179 0300 	sbcs.w	r3, r9, #0
    c2e8:	bfbc      	itt	lt
    c2ea:	f04f 0800 	movlt.w	r8, #0
    c2ee:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    c2f2:	4630      	mov	r0, r6
    c2f4:	f011 f900 	bl	1d4f8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    c2f8:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c2fa:	4907      	ldr	r1, [pc, #28]	; (c318 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    c2fc:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c2fe:	4642      	mov	r2, r8
    c300:	464b      	mov	r3, r9
    c302:	4630      	mov	r0, r6
	timer->period = period;
    c304:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    c308:	b002      	add	sp, #8
    c30a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c30e:	f7ff be5b 	b.w	bfc8 <z_add_timeout>
}
    c312:	b002      	add	sp, #8
    c314:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    c318:	0000c1e5 	.word	0x0000c1e5

0000c31c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    c31c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    c320:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    c322:	4b29      	ldr	r3, [pc, #164]	; (c3c8 <z_impl_k_poll+0xac>)
    c324:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
    c326:	2301      	movs	r3, #1
    c328:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
    c32c:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    c330:	ea52 0307 	orrs.w	r3, r2, r7
{
    c334:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    c336:	bf0c      	ite	eq
    c338:	2301      	moveq	r3, #1
    c33a:	2300      	movne	r3, #0
    c33c:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
    c340:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    c342:	f011 f9ae 	bl	1d6a2 <register_events>
    c346:	4681      	mov	r9, r0
	__asm__ volatile(
    c348:	f04f 0320 	mov.w	r3, #32
    c34c:	f3ef 8a11 	mrs	sl, BASEPRI
    c350:	f383 8812 	msr	BASEPRI_MAX, r3
    c354:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    c358:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
    c35c:	b964      	cbnz	r4, c378 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    c35e:	4601      	mov	r1, r0
    c360:	4652      	mov	r2, sl
    c362:	4640      	mov	r0, r8
    c364:	f011 f93b 	bl	1d5de <clear_event_registrations>
	__asm__ volatile(
    c368:	f38a 8811 	msr	BASEPRI, sl
    c36c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    c370:	4620      	mov	r0, r4
    c372:	b002      	add	sp, #8
    c374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    c378:	2300      	movs	r3, #0
    c37a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    c37e:	ea56 0307 	orrs.w	r3, r6, r7
    c382:	d106      	bne.n	c392 <z_impl_k_poll+0x76>
    c384:	f38a 8811 	msr	BASEPRI, sl
    c388:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    c38c:	f06f 040a 	mvn.w	r4, #10
    c390:	e7ee      	b.n	c370 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    c392:	e9cd 6700 	strd	r6, r7, [sp]
    c396:	4a0d      	ldr	r2, [pc, #52]	; (c3cc <z_impl_k_poll+0xb0>)
    c398:	480d      	ldr	r0, [pc, #52]	; (c3d0 <z_impl_k_poll+0xb4>)
    c39a:	4651      	mov	r1, sl
    c39c:	f7ff fbce 	bl	bb3c <z_pend_curr>
    c3a0:	4604      	mov	r4, r0
	__asm__ volatile(
    c3a2:	f04f 0320 	mov.w	r3, #32
    c3a6:	f3ef 8511 	mrs	r5, BASEPRI
    c3aa:	f383 8812 	msr	BASEPRI_MAX, r3
    c3ae:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    c3b2:	462a      	mov	r2, r5
    c3b4:	4649      	mov	r1, r9
    c3b6:	4640      	mov	r0, r8
    c3b8:	f011 f911 	bl	1d5de <clear_event_registrations>
	__asm__ volatile(
    c3bc:	f385 8811 	msr	BASEPRI, r5
    c3c0:	f3bf 8f6f 	isb	sy
	return swap_rc;
    c3c4:	e7d4      	b.n	c370 <z_impl_k_poll+0x54>
    c3c6:	bf00      	nop
    c3c8:	2000103c 	.word	0x2000103c
    c3cc:	20000104 	.word	0x20000104
    c3d0:	200020d8 	.word	0x200020d8

0000c3d4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    c3d4:	b538      	push	{r3, r4, r5, lr}
    c3d6:	4603      	mov	r3, r0
	__asm__ volatile(
    c3d8:	f04f 0220 	mov.w	r2, #32
    c3dc:	f3ef 8511 	mrs	r5, BASEPRI
    c3e0:	f382 8812 	msr	BASEPRI_MAX, r2
    c3e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    c3e8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    c3ea:	2101      	movs	r1, #1
    c3ec:	6081      	str	r1, [r0, #8]
	return list->head == list;
    c3ee:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    c3f0:	4283      	cmp	r3, r0
    c3f2:	d106      	bne.n	c402 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    c3f4:	f385 8811 	msr	BASEPRI, r5
    c3f8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    c3fc:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    c3fe:	4620      	mov	r0, r4
    c400:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    c402:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    c406:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c408:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c40a:	2300      	movs	r3, #0
	node->prev = NULL;
    c40c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    c410:	f011 f9be 	bl	1d790 <signal_poll_event>
	z_reschedule(&lock, key);
    c414:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    c416:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    c418:	4801      	ldr	r0, [pc, #4]	; (c420 <z_impl_k_poll_signal_raise+0x4c>)
    c41a:	f7ff fa35 	bl	b888 <z_reschedule>
	return rc;
    c41e:	e7ee      	b.n	c3fe <z_impl_k_poll_signal_raise+0x2a>
    c420:	200020d8 	.word	0x200020d8

0000c424 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    c424:	4a02      	ldr	r2, [pc, #8]	; (c430 <boot_banner+0xc>)
    c426:	4903      	ldr	r1, [pc, #12]	; (c434 <boot_banner+0x10>)
    c428:	4803      	ldr	r0, [pc, #12]	; (c438 <boot_banner+0x14>)
    c42a:	f00f bbe6 	b.w	1bbfa <printk>
    c42e:	bf00      	nop
    c430:	0001ef89 	.word	0x0001ef89
    c434:	0001f917 	.word	0x0001f917
    c438:	0001f923 	.word	0x0001f923

0000c43c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    c43c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c43e:	4c06      	ldr	r4, [pc, #24]	; (c458 <statics_init+0x1c>)
    c440:	4d06      	ldr	r5, [pc, #24]	; (c45c <statics_init+0x20>)
    c442:	42ac      	cmp	r4, r5
    c444:	d301      	bcc.n	c44a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    c446:	2000      	movs	r0, #0
    c448:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    c44a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    c44e:	4620      	mov	r0, r4
    c450:	f011 fa08 	bl	1d864 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c454:	3414      	adds	r4, #20
    c456:	e7f4      	b.n	c442 <statics_init+0x6>
    c458:	20000230 	.word	0x20000230
    c45c:	20000230 	.word	0x20000230

0000c460 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    c460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    c462:	4b09      	ldr	r3, [pc, #36]	; (c488 <k_sys_work_q_init+0x28>)
    c464:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    c466:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    c468:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    c46a:	9300      	str	r3, [sp, #0]
    c46c:	4907      	ldr	r1, [pc, #28]	; (c48c <k_sys_work_q_init+0x2c>)
    c46e:	4808      	ldr	r0, [pc, #32]	; (c490 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    c470:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    c474:	f04f 33ff 	mov.w	r3, #4294967295
    c478:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c47c:	f7ff f984 	bl	b788 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    c480:	4620      	mov	r0, r4
    c482:	b004      	add	sp, #16
    c484:	bd10      	pop	{r4, pc}
    c486:	bf00      	nop
    c488:	0001f94a 	.word	0x0001f94a
    c48c:	20003f60 	.word	0x20003f60
    c490:	200004e0 	.word	0x200004e0

0000c494 <nrf_cc3xx_platform_init_no_rng>:
    c494:	b510      	push	{r4, lr}
    c496:	4c0a      	ldr	r4, [pc, #40]	; (c4c0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    c498:	6823      	ldr	r3, [r4, #0]
    c49a:	b11b      	cbz	r3, c4a4 <nrf_cc3xx_platform_init_no_rng+0x10>
    c49c:	2301      	movs	r3, #1
    c49e:	6023      	str	r3, [r4, #0]
    c4a0:	2000      	movs	r0, #0
    c4a2:	bd10      	pop	{r4, pc}
    c4a4:	f000 f8d6 	bl	c654 <CC_LibInitNoRng>
    c4a8:	2800      	cmp	r0, #0
    c4aa:	d0f7      	beq.n	c49c <nrf_cc3xx_platform_init_no_rng+0x8>
    c4ac:	3801      	subs	r0, #1
    c4ae:	2806      	cmp	r0, #6
    c4b0:	d803      	bhi.n	c4ba <nrf_cc3xx_platform_init_no_rng+0x26>
    c4b2:	4b04      	ldr	r3, [pc, #16]	; (c4c4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    c4b4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    c4b8:	bd10      	pop	{r4, pc}
    c4ba:	4803      	ldr	r0, [pc, #12]	; (c4c8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    c4bc:	bd10      	pop	{r4, pc}
    c4be:	bf00      	nop
    c4c0:	2000107c 	.word	0x2000107c
    c4c4:	0001e87c 	.word	0x0001e87c
    c4c8:	ffff8ffe 	.word	0xffff8ffe

0000c4cc <nrf_cc3xx_platform_abort>:
    c4cc:	f3bf 8f4f 	dsb	sy
    c4d0:	4905      	ldr	r1, [pc, #20]	; (c4e8 <nrf_cc3xx_platform_abort+0x1c>)
    c4d2:	4b06      	ldr	r3, [pc, #24]	; (c4ec <nrf_cc3xx_platform_abort+0x20>)
    c4d4:	68ca      	ldr	r2, [r1, #12]
    c4d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c4da:	4313      	orrs	r3, r2
    c4dc:	60cb      	str	r3, [r1, #12]
    c4de:	f3bf 8f4f 	dsb	sy
    c4e2:	bf00      	nop
    c4e4:	e7fd      	b.n	c4e2 <nrf_cc3xx_platform_abort+0x16>
    c4e6:	bf00      	nop
    c4e8:	e000ed00 	.word	0xe000ed00
    c4ec:	05fa0004 	.word	0x05fa0004

0000c4f0 <CC_PalAbort>:
    c4f0:	b4f0      	push	{r4, r5, r6, r7}
    c4f2:	4f09      	ldr	r7, [pc, #36]	; (c518 <CC_PalAbort+0x28>)
    c4f4:	4e09      	ldr	r6, [pc, #36]	; (c51c <CC_PalAbort+0x2c>)
    c4f6:	4c0a      	ldr	r4, [pc, #40]	; (c520 <CC_PalAbort+0x30>)
    c4f8:	4a0a      	ldr	r2, [pc, #40]	; (c524 <CC_PalAbort+0x34>)
    c4fa:	4d0b      	ldr	r5, [pc, #44]	; (c528 <CC_PalAbort+0x38>)
    c4fc:	490b      	ldr	r1, [pc, #44]	; (c52c <CC_PalAbort+0x3c>)
    c4fe:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    c502:	603b      	str	r3, [r7, #0]
    c504:	6852      	ldr	r2, [r2, #4]
    c506:	6033      	str	r3, [r6, #0]
    c508:	6023      	str	r3, [r4, #0]
    c50a:	2400      	movs	r4, #0
    c50c:	602b      	str	r3, [r5, #0]
    c50e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    c512:	bcf0      	pop	{r4, r5, r6, r7}
    c514:	4710      	bx	r2
    c516:	bf00      	nop
    c518:	5002b400 	.word	0x5002b400
    c51c:	5002b404 	.word	0x5002b404
    c520:	5002b408 	.word	0x5002b408
    c524:	2000010c 	.word	0x2000010c
    c528:	5002b40c 	.word	0x5002b40c
    c52c:	5002a000 	.word	0x5002a000

0000c530 <nrf_cc3xx_platform_set_abort>:
    c530:	e9d0 1200 	ldrd	r1, r2, [r0]
    c534:	4b01      	ldr	r3, [pc, #4]	; (c53c <nrf_cc3xx_platform_set_abort+0xc>)
    c536:	e9c3 1200 	strd	r1, r2, [r3]
    c53a:	4770      	bx	lr
    c53c:	2000010c 	.word	0x2000010c

0000c540 <mutex_free>:
    c540:	b510      	push	{r4, lr}
    c542:	4604      	mov	r4, r0
    c544:	b130      	cbz	r0, c554 <mutex_free+0x14>
    c546:	6863      	ldr	r3, [r4, #4]
    c548:	06db      	lsls	r3, r3, #27
    c54a:	d502      	bpl.n	c552 <mutex_free+0x12>
    c54c:	2300      	movs	r3, #0
    c54e:	6023      	str	r3, [r4, #0]
    c550:	6063      	str	r3, [r4, #4]
    c552:	bd10      	pop	{r4, pc}
    c554:	4b02      	ldr	r3, [pc, #8]	; (c560 <mutex_free+0x20>)
    c556:	4803      	ldr	r0, [pc, #12]	; (c564 <mutex_free+0x24>)
    c558:	685b      	ldr	r3, [r3, #4]
    c55a:	4798      	blx	r3
    c55c:	e7f3      	b.n	c546 <mutex_free+0x6>
    c55e:	bf00      	nop
    c560:	2000010c 	.word	0x2000010c
    c564:	0001e898 	.word	0x0001e898

0000c568 <mutex_unlock>:
    c568:	b168      	cbz	r0, c586 <mutex_unlock+0x1e>
    c56a:	6843      	ldr	r3, [r0, #4]
    c56c:	b13b      	cbz	r3, c57e <mutex_unlock+0x16>
    c56e:	06db      	lsls	r3, r3, #27
    c570:	d507      	bpl.n	c582 <mutex_unlock+0x1a>
    c572:	f3bf 8f5f 	dmb	sy
    c576:	2300      	movs	r3, #0
    c578:	6003      	str	r3, [r0, #0]
    c57a:	4618      	mov	r0, r3
    c57c:	4770      	bx	lr
    c57e:	4803      	ldr	r0, [pc, #12]	; (c58c <mutex_unlock+0x24>)
    c580:	4770      	bx	lr
    c582:	4803      	ldr	r0, [pc, #12]	; (c590 <mutex_unlock+0x28>)
    c584:	4770      	bx	lr
    c586:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c58a:	4770      	bx	lr
    c58c:	ffff8fea 	.word	0xffff8fea
    c590:	ffff8fe9 	.word	0xffff8fe9

0000c594 <mutex_init>:
    c594:	b510      	push	{r4, lr}
    c596:	4604      	mov	r4, r0
    c598:	b120      	cbz	r0, c5a4 <mutex_init+0x10>
    c59a:	2200      	movs	r2, #0
    c59c:	2311      	movs	r3, #17
    c59e:	6022      	str	r2, [r4, #0]
    c5a0:	6063      	str	r3, [r4, #4]
    c5a2:	bd10      	pop	{r4, pc}
    c5a4:	4801      	ldr	r0, [pc, #4]	; (c5ac <mutex_init+0x18>)
    c5a6:	f7ff ffa3 	bl	c4f0 <CC_PalAbort>
    c5aa:	e7f6      	b.n	c59a <mutex_init+0x6>
    c5ac:	0001e8c0 	.word	0x0001e8c0

0000c5b0 <mutex_lock>:
    c5b0:	b1c0      	cbz	r0, c5e4 <mutex_lock+0x34>
    c5b2:	6843      	ldr	r3, [r0, #4]
    c5b4:	b1a3      	cbz	r3, c5e0 <mutex_lock+0x30>
    c5b6:	06db      	lsls	r3, r3, #27
    c5b8:	d510      	bpl.n	c5dc <mutex_lock+0x2c>
    c5ba:	2201      	movs	r2, #1
    c5bc:	f3bf 8f5b 	dmb	ish
    c5c0:	e850 3f00 	ldrex	r3, [r0]
    c5c4:	e840 2100 	strex	r1, r2, [r0]
    c5c8:	2900      	cmp	r1, #0
    c5ca:	d1f9      	bne.n	c5c0 <mutex_lock+0x10>
    c5cc:	f3bf 8f5b 	dmb	ish
    c5d0:	2b01      	cmp	r3, #1
    c5d2:	d0f3      	beq.n	c5bc <mutex_lock+0xc>
    c5d4:	f3bf 8f5f 	dmb	sy
    c5d8:	2000      	movs	r0, #0
    c5da:	4770      	bx	lr
    c5dc:	4803      	ldr	r0, [pc, #12]	; (c5ec <mutex_lock+0x3c>)
    c5de:	4770      	bx	lr
    c5e0:	4803      	ldr	r0, [pc, #12]	; (c5f0 <mutex_lock+0x40>)
    c5e2:	4770      	bx	lr
    c5e4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c5e8:	4770      	bx	lr
    c5ea:	bf00      	nop
    c5ec:	ffff8fe9 	.word	0xffff8fe9
    c5f0:	ffff8fea 	.word	0xffff8fea

0000c5f4 <nrf_cc3xx_platform_set_mutexes>:
    c5f4:	b570      	push	{r4, r5, r6, lr}
    c5f6:	e9d0 2300 	ldrd	r2, r3, [r0]
    c5fa:	4c13      	ldr	r4, [pc, #76]	; (c648 <nrf_cc3xx_platform_set_mutexes+0x54>)
    c5fc:	4d13      	ldr	r5, [pc, #76]	; (c64c <nrf_cc3xx_platform_set_mutexes+0x58>)
    c5fe:	e9c4 2300 	strd	r2, r3, [r4]
    c602:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    c606:	e9c4 6302 	strd	r6, r3, [r4, #8]
    c60a:	4b11      	ldr	r3, [pc, #68]	; (c650 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    c60c:	6808      	ldr	r0, [r1, #0]
    c60e:	6018      	str	r0, [r3, #0]
    c610:	6848      	ldr	r0, [r1, #4]
    c612:	6058      	str	r0, [r3, #4]
    c614:	6888      	ldr	r0, [r1, #8]
    c616:	6098      	str	r0, [r3, #8]
    c618:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    c61c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    c620:	60de      	str	r6, [r3, #12]
    c622:	6118      	str	r0, [r3, #16]
    c624:	06cb      	lsls	r3, r1, #27
    c626:	d50d      	bpl.n	c644 <nrf_cc3xx_platform_set_mutexes+0x50>
    c628:	2300      	movs	r3, #0
    c62a:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    c62e:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    c632:	f505 7088 	add.w	r0, r5, #272	; 0x110
    c636:	4790      	blx	r2
    c638:	6823      	ldr	r3, [r4, #0]
    c63a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    c63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c642:	4718      	bx	r3
    c644:	bd70      	pop	{r4, r5, r6, pc}
    c646:	bf00      	nop
    c648:	2000011c 	.word	0x2000011c
    c64c:	200020d8 	.word	0x200020d8
    c650:	2000012c 	.word	0x2000012c

0000c654 <CC_LibInitNoRng>:
    c654:	b510      	push	{r4, lr}
    c656:	f000 f833 	bl	c6c0 <CC_HalInit>
    c65a:	b120      	cbz	r0, c666 <CC_LibInitNoRng+0x12>
    c65c:	2403      	movs	r4, #3
    c65e:	f000 f867 	bl	c730 <CC_PalTerminate>
    c662:	4620      	mov	r0, r4
    c664:	bd10      	pop	{r4, pc}
    c666:	f000 f835 	bl	c6d4 <CC_PalInit>
    c66a:	b990      	cbnz	r0, c692 <CC_LibInitNoRng+0x3e>
    c66c:	f000 f8b0 	bl	c7d0 <CC_PalPowerSaveModeSelect>
    c670:	b990      	cbnz	r0, c698 <CC_LibInitNoRng+0x44>
    c672:	4b0f      	ldr	r3, [pc, #60]	; (c6b0 <CC_LibInitNoRng+0x5c>)
    c674:	681b      	ldr	r3, [r3, #0]
    c676:	0e1b      	lsrs	r3, r3, #24
    c678:	2bf0      	cmp	r3, #240	; 0xf0
    c67a:	d108      	bne.n	c68e <CC_LibInitNoRng+0x3a>
    c67c:	4a0d      	ldr	r2, [pc, #52]	; (c6b4 <CC_LibInitNoRng+0x60>)
    c67e:	4b0e      	ldr	r3, [pc, #56]	; (c6b8 <CC_LibInitNoRng+0x64>)
    c680:	6812      	ldr	r2, [r2, #0]
    c682:	429a      	cmp	r2, r3
    c684:	d00a      	beq.n	c69c <CC_LibInitNoRng+0x48>
    c686:	2407      	movs	r4, #7
    c688:	f000 f81c 	bl	c6c4 <CC_HalTerminate>
    c68c:	e7e7      	b.n	c65e <CC_LibInitNoRng+0xa>
    c68e:	2406      	movs	r4, #6
    c690:	e7fa      	b.n	c688 <CC_LibInitNoRng+0x34>
    c692:	2404      	movs	r4, #4
    c694:	4620      	mov	r0, r4
    c696:	bd10      	pop	{r4, pc}
    c698:	2400      	movs	r4, #0
    c69a:	e7f5      	b.n	c688 <CC_LibInitNoRng+0x34>
    c69c:	2001      	movs	r0, #1
    c69e:	f000 f897 	bl	c7d0 <CC_PalPowerSaveModeSelect>
    c6a2:	4604      	mov	r4, r0
    c6a4:	2800      	cmp	r0, #0
    c6a6:	d1f7      	bne.n	c698 <CC_LibInitNoRng+0x44>
    c6a8:	4b04      	ldr	r3, [pc, #16]	; (c6bc <CC_LibInitNoRng+0x68>)
    c6aa:	6018      	str	r0, [r3, #0]
    c6ac:	e7d9      	b.n	c662 <CC_LibInitNoRng+0xe>
    c6ae:	bf00      	nop
    c6b0:	5002b928 	.word	0x5002b928
    c6b4:	5002ba24 	.word	0x5002ba24
    c6b8:	20e00000 	.word	0x20e00000
    c6bc:	5002ba0c 	.word	0x5002ba0c

0000c6c0 <CC_HalInit>:
    c6c0:	2000      	movs	r0, #0
    c6c2:	4770      	bx	lr

0000c6c4 <CC_HalTerminate>:
    c6c4:	2000      	movs	r0, #0
    c6c6:	4770      	bx	lr

0000c6c8 <CC_HalMaskInterrupt>:
    c6c8:	4b01      	ldr	r3, [pc, #4]	; (c6d0 <CC_HalMaskInterrupt+0x8>)
    c6ca:	6018      	str	r0, [r3, #0]
    c6cc:	4770      	bx	lr
    c6ce:	bf00      	nop
    c6d0:	5002ba04 	.word	0x5002ba04

0000c6d4 <CC_PalInit>:
    c6d4:	b510      	push	{r4, lr}
    c6d6:	4811      	ldr	r0, [pc, #68]	; (c71c <CC_PalInit+0x48>)
    c6d8:	f000 f848 	bl	c76c <CC_PalMutexCreate>
    c6dc:	b100      	cbz	r0, c6e0 <CC_PalInit+0xc>
    c6de:	bd10      	pop	{r4, pc}
    c6e0:	480f      	ldr	r0, [pc, #60]	; (c720 <CC_PalInit+0x4c>)
    c6e2:	f000 f843 	bl	c76c <CC_PalMutexCreate>
    c6e6:	2800      	cmp	r0, #0
    c6e8:	d1f9      	bne.n	c6de <CC_PalInit+0xa>
    c6ea:	4c0e      	ldr	r4, [pc, #56]	; (c724 <CC_PalInit+0x50>)
    c6ec:	4620      	mov	r0, r4
    c6ee:	f000 f83d 	bl	c76c <CC_PalMutexCreate>
    c6f2:	2800      	cmp	r0, #0
    c6f4:	d1f3      	bne.n	c6de <CC_PalInit+0xa>
    c6f6:	4b0c      	ldr	r3, [pc, #48]	; (c728 <CC_PalInit+0x54>)
    c6f8:	480c      	ldr	r0, [pc, #48]	; (c72c <CC_PalInit+0x58>)
    c6fa:	601c      	str	r4, [r3, #0]
    c6fc:	f000 f836 	bl	c76c <CC_PalMutexCreate>
    c700:	4601      	mov	r1, r0
    c702:	2800      	cmp	r0, #0
    c704:	d1eb      	bne.n	c6de <CC_PalInit+0xa>
    c706:	f000 f82d 	bl	c764 <CC_PalDmaInit>
    c70a:	4604      	mov	r4, r0
    c70c:	b108      	cbz	r0, c712 <CC_PalInit+0x3e>
    c70e:	4620      	mov	r0, r4
    c710:	bd10      	pop	{r4, pc}
    c712:	f000 f83f 	bl	c794 <CC_PalPowerSaveModeInit>
    c716:	4620      	mov	r0, r4
    c718:	e7fa      	b.n	c710 <CC_PalInit+0x3c>
    c71a:	bf00      	nop
    c71c:	20000164 	.word	0x20000164
    c720:	20000158 	.word	0x20000158
    c724:	20000160 	.word	0x20000160
    c728:	20000168 	.word	0x20000168
    c72c:	2000015c 	.word	0x2000015c

0000c730 <CC_PalTerminate>:
    c730:	b508      	push	{r3, lr}
    c732:	4808      	ldr	r0, [pc, #32]	; (c754 <CC_PalTerminate+0x24>)
    c734:	f000 f824 	bl	c780 <CC_PalMutexDestroy>
    c738:	4807      	ldr	r0, [pc, #28]	; (c758 <CC_PalTerminate+0x28>)
    c73a:	f000 f821 	bl	c780 <CC_PalMutexDestroy>
    c73e:	4807      	ldr	r0, [pc, #28]	; (c75c <CC_PalTerminate+0x2c>)
    c740:	f000 f81e 	bl	c780 <CC_PalMutexDestroy>
    c744:	4806      	ldr	r0, [pc, #24]	; (c760 <CC_PalTerminate+0x30>)
    c746:	f000 f81b 	bl	c780 <CC_PalMutexDestroy>
    c74a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c74e:	f000 b80b 	b.w	c768 <CC_PalDmaTerminate>
    c752:	bf00      	nop
    c754:	20000164 	.word	0x20000164
    c758:	20000158 	.word	0x20000158
    c75c:	20000160 	.word	0x20000160
    c760:	2000015c 	.word	0x2000015c

0000c764 <CC_PalDmaInit>:
    c764:	2000      	movs	r0, #0
    c766:	4770      	bx	lr

0000c768 <CC_PalDmaTerminate>:
    c768:	4770      	bx	lr
    c76a:	bf00      	nop

0000c76c <CC_PalMutexCreate>:
    c76c:	b508      	push	{r3, lr}
    c76e:	4b03      	ldr	r3, [pc, #12]	; (c77c <CC_PalMutexCreate+0x10>)
    c770:	6802      	ldr	r2, [r0, #0]
    c772:	681b      	ldr	r3, [r3, #0]
    c774:	6810      	ldr	r0, [r2, #0]
    c776:	4798      	blx	r3
    c778:	2000      	movs	r0, #0
    c77a:	bd08      	pop	{r3, pc}
    c77c:	2000011c 	.word	0x2000011c

0000c780 <CC_PalMutexDestroy>:
    c780:	b508      	push	{r3, lr}
    c782:	4b03      	ldr	r3, [pc, #12]	; (c790 <CC_PalMutexDestroy+0x10>)
    c784:	6802      	ldr	r2, [r0, #0]
    c786:	685b      	ldr	r3, [r3, #4]
    c788:	6810      	ldr	r0, [r2, #0]
    c78a:	4798      	blx	r3
    c78c:	2000      	movs	r0, #0
    c78e:	bd08      	pop	{r3, pc}
    c790:	2000011c 	.word	0x2000011c

0000c794 <CC_PalPowerSaveModeInit>:
    c794:	b570      	push	{r4, r5, r6, lr}
    c796:	4c09      	ldr	r4, [pc, #36]	; (c7bc <CC_PalPowerSaveModeInit+0x28>)
    c798:	4d09      	ldr	r5, [pc, #36]	; (c7c0 <CC_PalPowerSaveModeInit+0x2c>)
    c79a:	6920      	ldr	r0, [r4, #16]
    c79c:	68ab      	ldr	r3, [r5, #8]
    c79e:	4798      	blx	r3
    c7a0:	b118      	cbz	r0, c7aa <CC_PalPowerSaveModeInit+0x16>
    c7a2:	4b08      	ldr	r3, [pc, #32]	; (c7c4 <CC_PalPowerSaveModeInit+0x30>)
    c7a4:	4808      	ldr	r0, [pc, #32]	; (c7c8 <CC_PalPowerSaveModeInit+0x34>)
    c7a6:	685b      	ldr	r3, [r3, #4]
    c7a8:	4798      	blx	r3
    c7aa:	4a08      	ldr	r2, [pc, #32]	; (c7cc <CC_PalPowerSaveModeInit+0x38>)
    c7ac:	68eb      	ldr	r3, [r5, #12]
    c7ae:	6920      	ldr	r0, [r4, #16]
    c7b0:	2100      	movs	r1, #0
    c7b2:	6011      	str	r1, [r2, #0]
    c7b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7b8:	4718      	bx	r3
    c7ba:	bf00      	nop
    c7bc:	2000012c 	.word	0x2000012c
    c7c0:	2000011c 	.word	0x2000011c
    c7c4:	2000010c 	.word	0x2000010c
    c7c8:	0001e8e4 	.word	0x0001e8e4
    c7cc:	20001090 	.word	0x20001090

0000c7d0 <CC_PalPowerSaveModeSelect>:
    c7d0:	b570      	push	{r4, r5, r6, lr}
    c7d2:	4d1a      	ldr	r5, [pc, #104]	; (c83c <CC_PalPowerSaveModeSelect+0x6c>)
    c7d4:	4e1a      	ldr	r6, [pc, #104]	; (c840 <CC_PalPowerSaveModeSelect+0x70>)
    c7d6:	4604      	mov	r4, r0
    c7d8:	68b2      	ldr	r2, [r6, #8]
    c7da:	6928      	ldr	r0, [r5, #16]
    c7dc:	4790      	blx	r2
    c7de:	b9f0      	cbnz	r0, c81e <CC_PalPowerSaveModeSelect+0x4e>
    c7e0:	b15c      	cbz	r4, c7fa <CC_PalPowerSaveModeSelect+0x2a>
    c7e2:	4c18      	ldr	r4, [pc, #96]	; (c844 <CC_PalPowerSaveModeSelect+0x74>)
    c7e4:	6823      	ldr	r3, [r4, #0]
    c7e6:	b1ab      	cbz	r3, c814 <CC_PalPowerSaveModeSelect+0x44>
    c7e8:	2b01      	cmp	r3, #1
    c7ea:	d01a      	beq.n	c822 <CC_PalPowerSaveModeSelect+0x52>
    c7ec:	3b01      	subs	r3, #1
    c7ee:	6023      	str	r3, [r4, #0]
    c7f0:	6928      	ldr	r0, [r5, #16]
    c7f2:	68f3      	ldr	r3, [r6, #12]
    c7f4:	4798      	blx	r3
    c7f6:	2000      	movs	r0, #0
    c7f8:	bd70      	pop	{r4, r5, r6, pc}
    c7fa:	4c12      	ldr	r4, [pc, #72]	; (c844 <CC_PalPowerSaveModeSelect+0x74>)
    c7fc:	6821      	ldr	r1, [r4, #0]
    c7fe:	b939      	cbnz	r1, c810 <CC_PalPowerSaveModeSelect+0x40>
    c800:	4b11      	ldr	r3, [pc, #68]	; (c848 <CC_PalPowerSaveModeSelect+0x78>)
    c802:	4a12      	ldr	r2, [pc, #72]	; (c84c <CC_PalPowerSaveModeSelect+0x7c>)
    c804:	2001      	movs	r0, #1
    c806:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    c80a:	6813      	ldr	r3, [r2, #0]
    c80c:	2b00      	cmp	r3, #0
    c80e:	d1fc      	bne.n	c80a <CC_PalPowerSaveModeSelect+0x3a>
    c810:	3101      	adds	r1, #1
    c812:	6021      	str	r1, [r4, #0]
    c814:	68f3      	ldr	r3, [r6, #12]
    c816:	6928      	ldr	r0, [r5, #16]
    c818:	4798      	blx	r3
    c81a:	2000      	movs	r0, #0
    c81c:	bd70      	pop	{r4, r5, r6, pc}
    c81e:	480c      	ldr	r0, [pc, #48]	; (c850 <CC_PalPowerSaveModeSelect+0x80>)
    c820:	bd70      	pop	{r4, r5, r6, pc}
    c822:	4a0a      	ldr	r2, [pc, #40]	; (c84c <CC_PalPowerSaveModeSelect+0x7c>)
    c824:	6813      	ldr	r3, [r2, #0]
    c826:	2b00      	cmp	r3, #0
    c828:	d1fc      	bne.n	c824 <CC_PalPowerSaveModeSelect+0x54>
    c82a:	4a07      	ldr	r2, [pc, #28]	; (c848 <CC_PalPowerSaveModeSelect+0x78>)
    c82c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    c830:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    c834:	f7ff ff48 	bl	c6c8 <CC_HalMaskInterrupt>
    c838:	6823      	ldr	r3, [r4, #0]
    c83a:	e7d7      	b.n	c7ec <CC_PalPowerSaveModeSelect+0x1c>
    c83c:	2000012c 	.word	0x2000012c
    c840:	2000011c 	.word	0x2000011c
    c844:	20001090 	.word	0x20001090
    c848:	5002a000 	.word	0x5002a000
    c84c:	5002b910 	.word	0x5002b910
    c850:	ffff8fe9 	.word	0xffff8fe9

0000c854 <calloc>:
    c854:	4b02      	ldr	r3, [pc, #8]	; (c860 <calloc+0xc>)
    c856:	460a      	mov	r2, r1
    c858:	4601      	mov	r1, r0
    c85a:	6818      	ldr	r0, [r3, #0]
    c85c:	f011 b85b 	b.w	1d916 <_calloc_r>
    c860:	2000016c 	.word	0x2000016c

0000c864 <malloc>:
    c864:	4b02      	ldr	r3, [pc, #8]	; (c870 <malloc+0xc>)
    c866:	4601      	mov	r1, r0
    c868:	6818      	ldr	r0, [r3, #0]
    c86a:	f000 b859 	b.w	c920 <_malloc_r>
    c86e:	bf00      	nop
    c870:	2000016c 	.word	0x2000016c

0000c874 <free>:
    c874:	4b02      	ldr	r3, [pc, #8]	; (c880 <free+0xc>)
    c876:	4601      	mov	r1, r0
    c878:	6818      	ldr	r0, [r3, #0]
    c87a:	f000 b803 	b.w	c884 <_free_r>
    c87e:	bf00      	nop
    c880:	2000016c 	.word	0x2000016c

0000c884 <_free_r>:
    c884:	b538      	push	{r3, r4, r5, lr}
    c886:	4605      	mov	r5, r0
    c888:	2900      	cmp	r1, #0
    c88a:	d045      	beq.n	c918 <_free_r+0x94>
    c88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c890:	1f0c      	subs	r4, r1, #4
    c892:	2b00      	cmp	r3, #0
    c894:	bfb8      	it	lt
    c896:	18e4      	addlt	r4, r4, r3
    c898:	f000 f90c 	bl	cab4 <__malloc_lock>
    c89c:	4a1f      	ldr	r2, [pc, #124]	; (c91c <_free_r+0x98>)
    c89e:	6813      	ldr	r3, [r2, #0]
    c8a0:	4610      	mov	r0, r2
    c8a2:	b933      	cbnz	r3, c8b2 <_free_r+0x2e>
    c8a4:	6063      	str	r3, [r4, #4]
    c8a6:	6014      	str	r4, [r2, #0]
    c8a8:	4628      	mov	r0, r5
    c8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c8ae:	f000 b907 	b.w	cac0 <__malloc_unlock>
    c8b2:	42a3      	cmp	r3, r4
    c8b4:	d90b      	bls.n	c8ce <_free_r+0x4a>
    c8b6:	6821      	ldr	r1, [r4, #0]
    c8b8:	1862      	adds	r2, r4, r1
    c8ba:	4293      	cmp	r3, r2
    c8bc:	bf04      	itt	eq
    c8be:	681a      	ldreq	r2, [r3, #0]
    c8c0:	685b      	ldreq	r3, [r3, #4]
    c8c2:	6063      	str	r3, [r4, #4]
    c8c4:	bf04      	itt	eq
    c8c6:	1852      	addeq	r2, r2, r1
    c8c8:	6022      	streq	r2, [r4, #0]
    c8ca:	6004      	str	r4, [r0, #0]
    c8cc:	e7ec      	b.n	c8a8 <_free_r+0x24>
    c8ce:	461a      	mov	r2, r3
    c8d0:	685b      	ldr	r3, [r3, #4]
    c8d2:	b10b      	cbz	r3, c8d8 <_free_r+0x54>
    c8d4:	42a3      	cmp	r3, r4
    c8d6:	d9fa      	bls.n	c8ce <_free_r+0x4a>
    c8d8:	6811      	ldr	r1, [r2, #0]
    c8da:	1850      	adds	r0, r2, r1
    c8dc:	42a0      	cmp	r0, r4
    c8de:	d10b      	bne.n	c8f8 <_free_r+0x74>
    c8e0:	6820      	ldr	r0, [r4, #0]
    c8e2:	4401      	add	r1, r0
    c8e4:	1850      	adds	r0, r2, r1
    c8e6:	4283      	cmp	r3, r0
    c8e8:	6011      	str	r1, [r2, #0]
    c8ea:	d1dd      	bne.n	c8a8 <_free_r+0x24>
    c8ec:	6818      	ldr	r0, [r3, #0]
    c8ee:	685b      	ldr	r3, [r3, #4]
    c8f0:	6053      	str	r3, [r2, #4]
    c8f2:	4401      	add	r1, r0
    c8f4:	6011      	str	r1, [r2, #0]
    c8f6:	e7d7      	b.n	c8a8 <_free_r+0x24>
    c8f8:	d902      	bls.n	c900 <_free_r+0x7c>
    c8fa:	230c      	movs	r3, #12
    c8fc:	602b      	str	r3, [r5, #0]
    c8fe:	e7d3      	b.n	c8a8 <_free_r+0x24>
    c900:	6820      	ldr	r0, [r4, #0]
    c902:	1821      	adds	r1, r4, r0
    c904:	428b      	cmp	r3, r1
    c906:	bf04      	itt	eq
    c908:	6819      	ldreq	r1, [r3, #0]
    c90a:	685b      	ldreq	r3, [r3, #4]
    c90c:	6063      	str	r3, [r4, #4]
    c90e:	bf04      	itt	eq
    c910:	1809      	addeq	r1, r1, r0
    c912:	6021      	streq	r1, [r4, #0]
    c914:	6054      	str	r4, [r2, #4]
    c916:	e7c7      	b.n	c8a8 <_free_r+0x24>
    c918:	bd38      	pop	{r3, r4, r5, pc}
    c91a:	bf00      	nop
    c91c:	20001094 	.word	0x20001094

0000c920 <_malloc_r>:
    c920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c922:	1ccd      	adds	r5, r1, #3
    c924:	f025 0503 	bic.w	r5, r5, #3
    c928:	3508      	adds	r5, #8
    c92a:	2d0c      	cmp	r5, #12
    c92c:	bf38      	it	cc
    c92e:	250c      	movcc	r5, #12
    c930:	2d00      	cmp	r5, #0
    c932:	4606      	mov	r6, r0
    c934:	db01      	blt.n	c93a <_malloc_r+0x1a>
    c936:	42a9      	cmp	r1, r5
    c938:	d903      	bls.n	c942 <_malloc_r+0x22>
    c93a:	230c      	movs	r3, #12
    c93c:	6033      	str	r3, [r6, #0]
    c93e:	2000      	movs	r0, #0
    c940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c942:	f000 f8b7 	bl	cab4 <__malloc_lock>
    c946:	4921      	ldr	r1, [pc, #132]	; (c9cc <_malloc_r+0xac>)
    c948:	680a      	ldr	r2, [r1, #0]
    c94a:	4614      	mov	r4, r2
    c94c:	b99c      	cbnz	r4, c976 <_malloc_r+0x56>
    c94e:	4f20      	ldr	r7, [pc, #128]	; (c9d0 <_malloc_r+0xb0>)
    c950:	683b      	ldr	r3, [r7, #0]
    c952:	b923      	cbnz	r3, c95e <_malloc_r+0x3e>
    c954:	4621      	mov	r1, r4
    c956:	4630      	mov	r0, r6
    c958:	f000 f844 	bl	c9e4 <_sbrk_r>
    c95c:	6038      	str	r0, [r7, #0]
    c95e:	4629      	mov	r1, r5
    c960:	4630      	mov	r0, r6
    c962:	f000 f83f 	bl	c9e4 <_sbrk_r>
    c966:	1c43      	adds	r3, r0, #1
    c968:	d123      	bne.n	c9b2 <_malloc_r+0x92>
    c96a:	230c      	movs	r3, #12
    c96c:	6033      	str	r3, [r6, #0]
    c96e:	4630      	mov	r0, r6
    c970:	f000 f8a6 	bl	cac0 <__malloc_unlock>
    c974:	e7e3      	b.n	c93e <_malloc_r+0x1e>
    c976:	6823      	ldr	r3, [r4, #0]
    c978:	1b5b      	subs	r3, r3, r5
    c97a:	d417      	bmi.n	c9ac <_malloc_r+0x8c>
    c97c:	2b0b      	cmp	r3, #11
    c97e:	d903      	bls.n	c988 <_malloc_r+0x68>
    c980:	6023      	str	r3, [r4, #0]
    c982:	441c      	add	r4, r3
    c984:	6025      	str	r5, [r4, #0]
    c986:	e004      	b.n	c992 <_malloc_r+0x72>
    c988:	6863      	ldr	r3, [r4, #4]
    c98a:	42a2      	cmp	r2, r4
    c98c:	bf0c      	ite	eq
    c98e:	600b      	streq	r3, [r1, #0]
    c990:	6053      	strne	r3, [r2, #4]
    c992:	4630      	mov	r0, r6
    c994:	f000 f894 	bl	cac0 <__malloc_unlock>
    c998:	f104 000b 	add.w	r0, r4, #11
    c99c:	1d23      	adds	r3, r4, #4
    c99e:	f020 0007 	bic.w	r0, r0, #7
    c9a2:	1ac2      	subs	r2, r0, r3
    c9a4:	d0cc      	beq.n	c940 <_malloc_r+0x20>
    c9a6:	1a1b      	subs	r3, r3, r0
    c9a8:	50a3      	str	r3, [r4, r2]
    c9aa:	e7c9      	b.n	c940 <_malloc_r+0x20>
    c9ac:	4622      	mov	r2, r4
    c9ae:	6864      	ldr	r4, [r4, #4]
    c9b0:	e7cc      	b.n	c94c <_malloc_r+0x2c>
    c9b2:	1cc4      	adds	r4, r0, #3
    c9b4:	f024 0403 	bic.w	r4, r4, #3
    c9b8:	42a0      	cmp	r0, r4
    c9ba:	d0e3      	beq.n	c984 <_malloc_r+0x64>
    c9bc:	1a21      	subs	r1, r4, r0
    c9be:	4630      	mov	r0, r6
    c9c0:	f000 f810 	bl	c9e4 <_sbrk_r>
    c9c4:	3001      	adds	r0, #1
    c9c6:	d1dd      	bne.n	c984 <_malloc_r+0x64>
    c9c8:	e7cf      	b.n	c96a <_malloc_r+0x4a>
    c9ca:	bf00      	nop
    c9cc:	20001094 	.word	0x20001094
    c9d0:	20001098 	.word	0x20001098

0000c9d4 <realloc>:
    c9d4:	4b02      	ldr	r3, [pc, #8]	; (c9e0 <realloc+0xc>)
    c9d6:	460a      	mov	r2, r1
    c9d8:	4601      	mov	r1, r0
    c9da:	6818      	ldr	r0, [r3, #0]
    c9dc:	f011 b828 	b.w	1da30 <_realloc_r>
    c9e0:	2000016c 	.word	0x2000016c

0000c9e4 <_sbrk_r>:
    c9e4:	b538      	push	{r3, r4, r5, lr}
    c9e6:	4d06      	ldr	r5, [pc, #24]	; (ca00 <_sbrk_r+0x1c>)
    c9e8:	2300      	movs	r3, #0
    c9ea:	4604      	mov	r4, r0
    c9ec:	4608      	mov	r0, r1
    c9ee:	602b      	str	r3, [r5, #0]
    c9f0:	f7fa faca 	bl	6f88 <_sbrk>
    c9f4:	1c43      	adds	r3, r0, #1
    c9f6:	d102      	bne.n	c9fe <_sbrk_r+0x1a>
    c9f8:	682b      	ldr	r3, [r5, #0]
    c9fa:	b103      	cbz	r3, c9fe <_sbrk_r+0x1a>
    c9fc:	6023      	str	r3, [r4, #0]
    c9fe:	bd38      	pop	{r3, r4, r5, pc}
    ca00:	20002294 	.word	0x20002294

0000ca04 <siscanf>:
    ca04:	b40e      	push	{r1, r2, r3}
    ca06:	b530      	push	{r4, r5, lr}
    ca08:	b09c      	sub	sp, #112	; 0x70
    ca0a:	ac1f      	add	r4, sp, #124	; 0x7c
    ca0c:	f44f 7201 	mov.w	r2, #516	; 0x204
    ca10:	f854 5b04 	ldr.w	r5, [r4], #4
    ca14:	f8ad 2014 	strh.w	r2, [sp, #20]
    ca18:	9002      	str	r0, [sp, #8]
    ca1a:	9006      	str	r0, [sp, #24]
    ca1c:	f7f4 f9d0 	bl	dc0 <strlen>
    ca20:	4b0b      	ldr	r3, [pc, #44]	; (ca50 <siscanf+0x4c>)
    ca22:	9003      	str	r0, [sp, #12]
    ca24:	9007      	str	r0, [sp, #28]
    ca26:	930b      	str	r3, [sp, #44]	; 0x2c
    ca28:	480a      	ldr	r0, [pc, #40]	; (ca54 <siscanf+0x50>)
    ca2a:	9401      	str	r4, [sp, #4]
    ca2c:	2300      	movs	r3, #0
    ca2e:	930f      	str	r3, [sp, #60]	; 0x3c
    ca30:	9314      	str	r3, [sp, #80]	; 0x50
    ca32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca36:	f8ad 3016 	strh.w	r3, [sp, #22]
    ca3a:	462a      	mov	r2, r5
    ca3c:	4623      	mov	r3, r4
    ca3e:	a902      	add	r1, sp, #8
    ca40:	6800      	ldr	r0, [r0, #0]
    ca42:	f000 f943 	bl	cccc <__ssvfiscanf_r>
    ca46:	b01c      	add	sp, #112	; 0x70
    ca48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ca4c:	b003      	add	sp, #12
    ca4e:	4770      	bx	lr
    ca50:	0001d967 	.word	0x0001d967
    ca54:	2000016c 	.word	0x2000016c

0000ca58 <vsniprintf>:
    ca58:	b507      	push	{r0, r1, r2, lr}
    ca5a:	9300      	str	r3, [sp, #0]
    ca5c:	4613      	mov	r3, r2
    ca5e:	460a      	mov	r2, r1
    ca60:	4601      	mov	r1, r0
    ca62:	4803      	ldr	r0, [pc, #12]	; (ca70 <vsniprintf+0x18>)
    ca64:	6800      	ldr	r0, [r0, #0]
    ca66:	f010 ffb7 	bl	1d9d8 <_vsniprintf_r>
    ca6a:	b003      	add	sp, #12
    ca6c:	f85d fb04 	ldr.w	pc, [sp], #4
    ca70:	2000016c 	.word	0x2000016c

0000ca74 <_vsiprintf_r>:
    ca74:	b500      	push	{lr}
    ca76:	b09b      	sub	sp, #108	; 0x6c
    ca78:	9100      	str	r1, [sp, #0]
    ca7a:	9104      	str	r1, [sp, #16]
    ca7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ca80:	9105      	str	r1, [sp, #20]
    ca82:	9102      	str	r1, [sp, #8]
    ca84:	4905      	ldr	r1, [pc, #20]	; (ca9c <_vsiprintf_r+0x28>)
    ca86:	9103      	str	r1, [sp, #12]
    ca88:	4669      	mov	r1, sp
    ca8a:	f000 f81f 	bl	cacc <_svfiprintf_r>
    ca8e:	9b00      	ldr	r3, [sp, #0]
    ca90:	2200      	movs	r2, #0
    ca92:	701a      	strb	r2, [r3, #0]
    ca94:	b01b      	add	sp, #108	; 0x6c
    ca96:	f85d fb04 	ldr.w	pc, [sp], #4
    ca9a:	bf00      	nop
    ca9c:	ffff0208 	.word	0xffff0208

0000caa0 <vsiprintf>:
    caa0:	4613      	mov	r3, r2
    caa2:	460a      	mov	r2, r1
    caa4:	4601      	mov	r1, r0
    caa6:	4802      	ldr	r0, [pc, #8]	; (cab0 <vsiprintf+0x10>)
    caa8:	6800      	ldr	r0, [r0, #0]
    caaa:	f7ff bfe3 	b.w	ca74 <_vsiprintf_r>
    caae:	bf00      	nop
    cab0:	2000016c 	.word	0x2000016c

0000cab4 <__malloc_lock>:
    cab4:	4801      	ldr	r0, [pc, #4]	; (cabc <__malloc_lock+0x8>)
    cab6:	f00f be9f 	b.w	1c7f8 <__retarget_lock_acquire_recursive>
    caba:	bf00      	nop
    cabc:	20000230 	.word	0x20000230

0000cac0 <__malloc_unlock>:
    cac0:	4801      	ldr	r0, [pc, #4]	; (cac8 <__malloc_unlock+0x8>)
    cac2:	f00f be9f 	b.w	1c804 <__retarget_lock_release_recursive>
    cac6:	bf00      	nop
    cac8:	20000230 	.word	0x20000230

0000cacc <_svfiprintf_r>:
    cacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cad0:	4698      	mov	r8, r3
    cad2:	898b      	ldrh	r3, [r1, #12]
    cad4:	061b      	lsls	r3, r3, #24
    cad6:	b09d      	sub	sp, #116	; 0x74
    cad8:	4607      	mov	r7, r0
    cada:	460d      	mov	r5, r1
    cadc:	4614      	mov	r4, r2
    cade:	d50e      	bpl.n	cafe <_svfiprintf_r+0x32>
    cae0:	690b      	ldr	r3, [r1, #16]
    cae2:	b963      	cbnz	r3, cafe <_svfiprintf_r+0x32>
    cae4:	2140      	movs	r1, #64	; 0x40
    cae6:	f7ff ff1b 	bl	c920 <_malloc_r>
    caea:	6028      	str	r0, [r5, #0]
    caec:	6128      	str	r0, [r5, #16]
    caee:	b920      	cbnz	r0, cafa <_svfiprintf_r+0x2e>
    caf0:	230c      	movs	r3, #12
    caf2:	603b      	str	r3, [r7, #0]
    caf4:	f04f 30ff 	mov.w	r0, #4294967295
    caf8:	e0d1      	b.n	cc9e <_svfiprintf_r+0x1d2>
    cafa:	2340      	movs	r3, #64	; 0x40
    cafc:	616b      	str	r3, [r5, #20]
    cafe:	2300      	movs	r3, #0
    cb00:	9309      	str	r3, [sp, #36]	; 0x24
    cb02:	2320      	movs	r3, #32
    cb04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    cb08:	f8cd 800c 	str.w	r8, [sp, #12]
    cb0c:	2330      	movs	r3, #48	; 0x30
    cb0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; ccb8 <_svfiprintf_r+0x1ec>
    cb12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    cb16:	f04f 0901 	mov.w	r9, #1
    cb1a:	4623      	mov	r3, r4
    cb1c:	469a      	mov	sl, r3
    cb1e:	f813 2b01 	ldrb.w	r2, [r3], #1
    cb22:	b10a      	cbz	r2, cb28 <_svfiprintf_r+0x5c>
    cb24:	2a25      	cmp	r2, #37	; 0x25
    cb26:	d1f9      	bne.n	cb1c <_svfiprintf_r+0x50>
    cb28:	ebba 0b04 	subs.w	fp, sl, r4
    cb2c:	d00b      	beq.n	cb46 <_svfiprintf_r+0x7a>
    cb2e:	465b      	mov	r3, fp
    cb30:	4622      	mov	r2, r4
    cb32:	4629      	mov	r1, r5
    cb34:	4638      	mov	r0, r7
    cb36:	f010 ffa1 	bl	1da7c <__ssputs_r>
    cb3a:	3001      	adds	r0, #1
    cb3c:	f000 80aa 	beq.w	cc94 <_svfiprintf_r+0x1c8>
    cb40:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cb42:	445a      	add	r2, fp
    cb44:	9209      	str	r2, [sp, #36]	; 0x24
    cb46:	f89a 3000 	ldrb.w	r3, [sl]
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	f000 80a2 	beq.w	cc94 <_svfiprintf_r+0x1c8>
    cb50:	2300      	movs	r3, #0
    cb52:	f04f 32ff 	mov.w	r2, #4294967295
    cb56:	e9cd 2305 	strd	r2, r3, [sp, #20]
    cb5a:	f10a 0a01 	add.w	sl, sl, #1
    cb5e:	9304      	str	r3, [sp, #16]
    cb60:	9307      	str	r3, [sp, #28]
    cb62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    cb66:	931a      	str	r3, [sp, #104]	; 0x68
    cb68:	4654      	mov	r4, sl
    cb6a:	2205      	movs	r2, #5
    cb6c:	f814 1b01 	ldrb.w	r1, [r4], #1
    cb70:	4851      	ldr	r0, [pc, #324]	; (ccb8 <_svfiprintf_r+0x1ec>)
    cb72:	f7f3 fac5 	bl	100 <memchr>
    cb76:	9a04      	ldr	r2, [sp, #16]
    cb78:	b9d8      	cbnz	r0, cbb2 <_svfiprintf_r+0xe6>
    cb7a:	06d0      	lsls	r0, r2, #27
    cb7c:	bf44      	itt	mi
    cb7e:	2320      	movmi	r3, #32
    cb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    cb84:	0711      	lsls	r1, r2, #28
    cb86:	bf44      	itt	mi
    cb88:	232b      	movmi	r3, #43	; 0x2b
    cb8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    cb8e:	f89a 3000 	ldrb.w	r3, [sl]
    cb92:	2b2a      	cmp	r3, #42	; 0x2a
    cb94:	d015      	beq.n	cbc2 <_svfiprintf_r+0xf6>
    cb96:	9a07      	ldr	r2, [sp, #28]
    cb98:	4654      	mov	r4, sl
    cb9a:	2000      	movs	r0, #0
    cb9c:	f04f 0c0a 	mov.w	ip, #10
    cba0:	4621      	mov	r1, r4
    cba2:	f811 3b01 	ldrb.w	r3, [r1], #1
    cba6:	3b30      	subs	r3, #48	; 0x30
    cba8:	2b09      	cmp	r3, #9
    cbaa:	d94e      	bls.n	cc4a <_svfiprintf_r+0x17e>
    cbac:	b1b0      	cbz	r0, cbdc <_svfiprintf_r+0x110>
    cbae:	9207      	str	r2, [sp, #28]
    cbb0:	e014      	b.n	cbdc <_svfiprintf_r+0x110>
    cbb2:	eba0 0308 	sub.w	r3, r0, r8
    cbb6:	fa09 f303 	lsl.w	r3, r9, r3
    cbba:	4313      	orrs	r3, r2
    cbbc:	9304      	str	r3, [sp, #16]
    cbbe:	46a2      	mov	sl, r4
    cbc0:	e7d2      	b.n	cb68 <_svfiprintf_r+0x9c>
    cbc2:	9b03      	ldr	r3, [sp, #12]
    cbc4:	1d19      	adds	r1, r3, #4
    cbc6:	681b      	ldr	r3, [r3, #0]
    cbc8:	9103      	str	r1, [sp, #12]
    cbca:	2b00      	cmp	r3, #0
    cbcc:	bfbb      	ittet	lt
    cbce:	425b      	neglt	r3, r3
    cbd0:	f042 0202 	orrlt.w	r2, r2, #2
    cbd4:	9307      	strge	r3, [sp, #28]
    cbd6:	9307      	strlt	r3, [sp, #28]
    cbd8:	bfb8      	it	lt
    cbda:	9204      	strlt	r2, [sp, #16]
    cbdc:	7823      	ldrb	r3, [r4, #0]
    cbde:	2b2e      	cmp	r3, #46	; 0x2e
    cbe0:	d10c      	bne.n	cbfc <_svfiprintf_r+0x130>
    cbe2:	7863      	ldrb	r3, [r4, #1]
    cbe4:	2b2a      	cmp	r3, #42	; 0x2a
    cbe6:	d135      	bne.n	cc54 <_svfiprintf_r+0x188>
    cbe8:	9b03      	ldr	r3, [sp, #12]
    cbea:	1d1a      	adds	r2, r3, #4
    cbec:	681b      	ldr	r3, [r3, #0]
    cbee:	9203      	str	r2, [sp, #12]
    cbf0:	2b00      	cmp	r3, #0
    cbf2:	bfb8      	it	lt
    cbf4:	f04f 33ff 	movlt.w	r3, #4294967295
    cbf8:	3402      	adds	r4, #2
    cbfa:	9305      	str	r3, [sp, #20]
    cbfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; ccc8 <_svfiprintf_r+0x1fc>
    cc00:	7821      	ldrb	r1, [r4, #0]
    cc02:	2203      	movs	r2, #3
    cc04:	4650      	mov	r0, sl
    cc06:	f7f3 fa7b 	bl	100 <memchr>
    cc0a:	b140      	cbz	r0, cc1e <_svfiprintf_r+0x152>
    cc0c:	2340      	movs	r3, #64	; 0x40
    cc0e:	eba0 000a 	sub.w	r0, r0, sl
    cc12:	fa03 f000 	lsl.w	r0, r3, r0
    cc16:	9b04      	ldr	r3, [sp, #16]
    cc18:	4303      	orrs	r3, r0
    cc1a:	3401      	adds	r4, #1
    cc1c:	9304      	str	r3, [sp, #16]
    cc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
    cc22:	4826      	ldr	r0, [pc, #152]	; (ccbc <_svfiprintf_r+0x1f0>)
    cc24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    cc28:	2206      	movs	r2, #6
    cc2a:	f7f3 fa69 	bl	100 <memchr>
    cc2e:	2800      	cmp	r0, #0
    cc30:	d038      	beq.n	cca4 <_svfiprintf_r+0x1d8>
    cc32:	4b23      	ldr	r3, [pc, #140]	; (ccc0 <_svfiprintf_r+0x1f4>)
    cc34:	bb1b      	cbnz	r3, cc7e <_svfiprintf_r+0x1b2>
    cc36:	9b03      	ldr	r3, [sp, #12]
    cc38:	3307      	adds	r3, #7
    cc3a:	f023 0307 	bic.w	r3, r3, #7
    cc3e:	3308      	adds	r3, #8
    cc40:	9303      	str	r3, [sp, #12]
    cc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc44:	4433      	add	r3, r6
    cc46:	9309      	str	r3, [sp, #36]	; 0x24
    cc48:	e767      	b.n	cb1a <_svfiprintf_r+0x4e>
    cc4a:	fb0c 3202 	mla	r2, ip, r2, r3
    cc4e:	460c      	mov	r4, r1
    cc50:	2001      	movs	r0, #1
    cc52:	e7a5      	b.n	cba0 <_svfiprintf_r+0xd4>
    cc54:	2300      	movs	r3, #0
    cc56:	3401      	adds	r4, #1
    cc58:	9305      	str	r3, [sp, #20]
    cc5a:	4619      	mov	r1, r3
    cc5c:	f04f 0c0a 	mov.w	ip, #10
    cc60:	4620      	mov	r0, r4
    cc62:	f810 2b01 	ldrb.w	r2, [r0], #1
    cc66:	3a30      	subs	r2, #48	; 0x30
    cc68:	2a09      	cmp	r2, #9
    cc6a:	d903      	bls.n	cc74 <_svfiprintf_r+0x1a8>
    cc6c:	2b00      	cmp	r3, #0
    cc6e:	d0c5      	beq.n	cbfc <_svfiprintf_r+0x130>
    cc70:	9105      	str	r1, [sp, #20]
    cc72:	e7c3      	b.n	cbfc <_svfiprintf_r+0x130>
    cc74:	fb0c 2101 	mla	r1, ip, r1, r2
    cc78:	4604      	mov	r4, r0
    cc7a:	2301      	movs	r3, #1
    cc7c:	e7f0      	b.n	cc60 <_svfiprintf_r+0x194>
    cc7e:	ab03      	add	r3, sp, #12
    cc80:	9300      	str	r3, [sp, #0]
    cc82:	462a      	mov	r2, r5
    cc84:	4b0f      	ldr	r3, [pc, #60]	; (ccc4 <_svfiprintf_r+0x1f8>)
    cc86:	a904      	add	r1, sp, #16
    cc88:	4638      	mov	r0, r7
    cc8a:	f3af 8000 	nop.w
    cc8e:	1c42      	adds	r2, r0, #1
    cc90:	4606      	mov	r6, r0
    cc92:	d1d6      	bne.n	cc42 <_svfiprintf_r+0x176>
    cc94:	89ab      	ldrh	r3, [r5, #12]
    cc96:	065b      	lsls	r3, r3, #25
    cc98:	f53f af2c 	bmi.w	caf4 <_svfiprintf_r+0x28>
    cc9c:	9809      	ldr	r0, [sp, #36]	; 0x24
    cc9e:	b01d      	add	sp, #116	; 0x74
    cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cca4:	ab03      	add	r3, sp, #12
    cca6:	9300      	str	r3, [sp, #0]
    cca8:	462a      	mov	r2, r5
    ccaa:	4b06      	ldr	r3, [pc, #24]	; (ccc4 <_svfiprintf_r+0x1f8>)
    ccac:	a904      	add	r1, sp, #16
    ccae:	4638      	mov	r0, r7
    ccb0:	f000 f984 	bl	cfbc <_printf_i>
    ccb4:	e7eb      	b.n	cc8e <_svfiprintf_r+0x1c2>
    ccb6:	bf00      	nop
    ccb8:	0001fa54 	.word	0x0001fa54
    ccbc:	0001fa5e 	.word	0x0001fa5e
    ccc0:	00000000 	.word	0x00000000
    ccc4:	0001da7d 	.word	0x0001da7d
    ccc8:	0001fa5a 	.word	0x0001fa5a

0000cccc <__ssvfiscanf_r>:
    cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccd0:	460c      	mov	r4, r1
    ccd2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
    ccd6:	2100      	movs	r1, #0
    ccd8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
    ccdc:	49b2      	ldr	r1, [pc, #712]	; (cfa8 <__ssvfiscanf_r+0x2dc>)
    ccde:	91a0      	str	r1, [sp, #640]	; 0x280
    cce0:	f10d 0804 	add.w	r8, sp, #4
    cce4:	49b1      	ldr	r1, [pc, #708]	; (cfac <__ssvfiscanf_r+0x2e0>)
    cce6:	4fb2      	ldr	r7, [pc, #712]	; (cfb0 <__ssvfiscanf_r+0x2e4>)
    cce8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; cfb4 <__ssvfiscanf_r+0x2e8>
    ccec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
    ccf0:	4606      	mov	r6, r0
    ccf2:	91a1      	str	r1, [sp, #644]	; 0x284
    ccf4:	9300      	str	r3, [sp, #0]
    ccf6:	f892 a000 	ldrb.w	sl, [r2]
    ccfa:	f1ba 0f00 	cmp.w	sl, #0
    ccfe:	f000 8151 	beq.w	cfa4 <__ssvfiscanf_r+0x2d8>
    cd02:	f81a 3007 	ldrb.w	r3, [sl, r7]
    cd06:	f013 0308 	ands.w	r3, r3, #8
    cd0a:	f102 0501 	add.w	r5, r2, #1
    cd0e:	d019      	beq.n	cd44 <__ssvfiscanf_r+0x78>
    cd10:	6863      	ldr	r3, [r4, #4]
    cd12:	2b00      	cmp	r3, #0
    cd14:	dd0f      	ble.n	cd36 <__ssvfiscanf_r+0x6a>
    cd16:	6823      	ldr	r3, [r4, #0]
    cd18:	781a      	ldrb	r2, [r3, #0]
    cd1a:	5cba      	ldrb	r2, [r7, r2]
    cd1c:	0712      	lsls	r2, r2, #28
    cd1e:	d401      	bmi.n	cd24 <__ssvfiscanf_r+0x58>
    cd20:	462a      	mov	r2, r5
    cd22:	e7e8      	b.n	ccf6 <__ssvfiscanf_r+0x2a>
    cd24:	9a45      	ldr	r2, [sp, #276]	; 0x114
    cd26:	3201      	adds	r2, #1
    cd28:	9245      	str	r2, [sp, #276]	; 0x114
    cd2a:	6862      	ldr	r2, [r4, #4]
    cd2c:	3301      	adds	r3, #1
    cd2e:	3a01      	subs	r2, #1
    cd30:	6062      	str	r2, [r4, #4]
    cd32:	6023      	str	r3, [r4, #0]
    cd34:	e7ec      	b.n	cd10 <__ssvfiscanf_r+0x44>
    cd36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    cd38:	4621      	mov	r1, r4
    cd3a:	4630      	mov	r0, r6
    cd3c:	4798      	blx	r3
    cd3e:	2800      	cmp	r0, #0
    cd40:	d0e9      	beq.n	cd16 <__ssvfiscanf_r+0x4a>
    cd42:	e7ed      	b.n	cd20 <__ssvfiscanf_r+0x54>
    cd44:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
    cd48:	f040 8083 	bne.w	ce52 <__ssvfiscanf_r+0x186>
    cd4c:	9341      	str	r3, [sp, #260]	; 0x104
    cd4e:	9343      	str	r3, [sp, #268]	; 0x10c
    cd50:	7853      	ldrb	r3, [r2, #1]
    cd52:	2b2a      	cmp	r3, #42	; 0x2a
    cd54:	bf02      	ittt	eq
    cd56:	2310      	moveq	r3, #16
    cd58:	1c95      	addeq	r5, r2, #2
    cd5a:	9341      	streq	r3, [sp, #260]	; 0x104
    cd5c:	220a      	movs	r2, #10
    cd5e:	46ab      	mov	fp, r5
    cd60:	f81b 1b01 	ldrb.w	r1, [fp], #1
    cd64:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    cd68:	2b09      	cmp	r3, #9
    cd6a:	d91d      	bls.n	cda8 <__ssvfiscanf_r+0xdc>
    cd6c:	4891      	ldr	r0, [pc, #580]	; (cfb4 <__ssvfiscanf_r+0x2e8>)
    cd6e:	2203      	movs	r2, #3
    cd70:	f7f3 f9c6 	bl	100 <memchr>
    cd74:	b140      	cbz	r0, cd88 <__ssvfiscanf_r+0xbc>
    cd76:	2301      	movs	r3, #1
    cd78:	eba0 0009 	sub.w	r0, r0, r9
    cd7c:	fa03 f000 	lsl.w	r0, r3, r0
    cd80:	9b41      	ldr	r3, [sp, #260]	; 0x104
    cd82:	4318      	orrs	r0, r3
    cd84:	9041      	str	r0, [sp, #260]	; 0x104
    cd86:	465d      	mov	r5, fp
    cd88:	f815 3b01 	ldrb.w	r3, [r5], #1
    cd8c:	2b78      	cmp	r3, #120	; 0x78
    cd8e:	d806      	bhi.n	cd9e <__ssvfiscanf_r+0xd2>
    cd90:	2b57      	cmp	r3, #87	; 0x57
    cd92:	d810      	bhi.n	cdb6 <__ssvfiscanf_r+0xea>
    cd94:	2b25      	cmp	r3, #37	; 0x25
    cd96:	d05c      	beq.n	ce52 <__ssvfiscanf_r+0x186>
    cd98:	d856      	bhi.n	ce48 <__ssvfiscanf_r+0x17c>
    cd9a:	2b00      	cmp	r3, #0
    cd9c:	d074      	beq.n	ce88 <__ssvfiscanf_r+0x1bc>
    cd9e:	2303      	movs	r3, #3
    cda0:	9347      	str	r3, [sp, #284]	; 0x11c
    cda2:	230a      	movs	r3, #10
    cda4:	9342      	str	r3, [sp, #264]	; 0x108
    cda6:	e081      	b.n	ceac <__ssvfiscanf_r+0x1e0>
    cda8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    cdaa:	fb02 1303 	mla	r3, r2, r3, r1
    cdae:	3b30      	subs	r3, #48	; 0x30
    cdb0:	9343      	str	r3, [sp, #268]	; 0x10c
    cdb2:	465d      	mov	r5, fp
    cdb4:	e7d3      	b.n	cd5e <__ssvfiscanf_r+0x92>
    cdb6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
    cdba:	2a20      	cmp	r2, #32
    cdbc:	d8ef      	bhi.n	cd9e <__ssvfiscanf_r+0xd2>
    cdbe:	a101      	add	r1, pc, #4	; (adr r1, cdc4 <__ssvfiscanf_r+0xf8>)
    cdc0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    cdc4:	0000ce97 	.word	0x0000ce97
    cdc8:	0000cd9f 	.word	0x0000cd9f
    cdcc:	0000cd9f 	.word	0x0000cd9f
    cdd0:	0000cef5 	.word	0x0000cef5
    cdd4:	0000cd9f 	.word	0x0000cd9f
    cdd8:	0000cd9f 	.word	0x0000cd9f
    cddc:	0000cd9f 	.word	0x0000cd9f
    cde0:	0000cd9f 	.word	0x0000cd9f
    cde4:	0000cd9f 	.word	0x0000cd9f
    cde8:	0000cd9f 	.word	0x0000cd9f
    cdec:	0000cd9f 	.word	0x0000cd9f
    cdf0:	0000cf0b 	.word	0x0000cf0b
    cdf4:	0000cee1 	.word	0x0000cee1
    cdf8:	0000ce4f 	.word	0x0000ce4f
    cdfc:	0000ce4f 	.word	0x0000ce4f
    ce00:	0000ce4f 	.word	0x0000ce4f
    ce04:	0000cd9f 	.word	0x0000cd9f
    ce08:	0000cee5 	.word	0x0000cee5
    ce0c:	0000cd9f 	.word	0x0000cd9f
    ce10:	0000cd9f 	.word	0x0000cd9f
    ce14:	0000cd9f 	.word	0x0000cd9f
    ce18:	0000cd9f 	.word	0x0000cd9f
    ce1c:	0000cf1b 	.word	0x0000cf1b
    ce20:	0000ceed 	.word	0x0000ceed
    ce24:	0000ce8f 	.word	0x0000ce8f
    ce28:	0000cd9f 	.word	0x0000cd9f
    ce2c:	0000cd9f 	.word	0x0000cd9f
    ce30:	0000cf17 	.word	0x0000cf17
    ce34:	0000cd9f 	.word	0x0000cd9f
    ce38:	0000cee1 	.word	0x0000cee1
    ce3c:	0000cd9f 	.word	0x0000cd9f
    ce40:	0000cd9f 	.word	0x0000cd9f
    ce44:	0000ce97 	.word	0x0000ce97
    ce48:	3b45      	subs	r3, #69	; 0x45
    ce4a:	2b02      	cmp	r3, #2
    ce4c:	d8a7      	bhi.n	cd9e <__ssvfiscanf_r+0xd2>
    ce4e:	2305      	movs	r3, #5
    ce50:	e02b      	b.n	ceaa <__ssvfiscanf_r+0x1de>
    ce52:	6863      	ldr	r3, [r4, #4]
    ce54:	2b00      	cmp	r3, #0
    ce56:	dd0d      	ble.n	ce74 <__ssvfiscanf_r+0x1a8>
    ce58:	6823      	ldr	r3, [r4, #0]
    ce5a:	781a      	ldrb	r2, [r3, #0]
    ce5c:	4552      	cmp	r2, sl
    ce5e:	f040 80a1 	bne.w	cfa4 <__ssvfiscanf_r+0x2d8>
    ce62:	3301      	adds	r3, #1
    ce64:	6862      	ldr	r2, [r4, #4]
    ce66:	6023      	str	r3, [r4, #0]
    ce68:	9b45      	ldr	r3, [sp, #276]	; 0x114
    ce6a:	3a01      	subs	r2, #1
    ce6c:	3301      	adds	r3, #1
    ce6e:	6062      	str	r2, [r4, #4]
    ce70:	9345      	str	r3, [sp, #276]	; 0x114
    ce72:	e755      	b.n	cd20 <__ssvfiscanf_r+0x54>
    ce74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    ce76:	4621      	mov	r1, r4
    ce78:	4630      	mov	r0, r6
    ce7a:	4798      	blx	r3
    ce7c:	2800      	cmp	r0, #0
    ce7e:	d0eb      	beq.n	ce58 <__ssvfiscanf_r+0x18c>
    ce80:	9844      	ldr	r0, [sp, #272]	; 0x110
    ce82:	2800      	cmp	r0, #0
    ce84:	f040 8084 	bne.w	cf90 <__ssvfiscanf_r+0x2c4>
    ce88:	f04f 30ff 	mov.w	r0, #4294967295
    ce8c:	e086      	b.n	cf9c <__ssvfiscanf_r+0x2d0>
    ce8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
    ce90:	f042 0220 	orr.w	r2, r2, #32
    ce94:	9241      	str	r2, [sp, #260]	; 0x104
    ce96:	9a41      	ldr	r2, [sp, #260]	; 0x104
    ce98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ce9c:	9241      	str	r2, [sp, #260]	; 0x104
    ce9e:	2210      	movs	r2, #16
    cea0:	2b6f      	cmp	r3, #111	; 0x6f
    cea2:	9242      	str	r2, [sp, #264]	; 0x108
    cea4:	bf34      	ite	cc
    cea6:	2303      	movcc	r3, #3
    cea8:	2304      	movcs	r3, #4
    ceaa:	9347      	str	r3, [sp, #284]	; 0x11c
    ceac:	6863      	ldr	r3, [r4, #4]
    ceae:	2b00      	cmp	r3, #0
    ceb0:	dd41      	ble.n	cf36 <__ssvfiscanf_r+0x26a>
    ceb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
    ceb4:	0659      	lsls	r1, r3, #25
    ceb6:	d404      	bmi.n	cec2 <__ssvfiscanf_r+0x1f6>
    ceb8:	6823      	ldr	r3, [r4, #0]
    ceba:	781a      	ldrb	r2, [r3, #0]
    cebc:	5cba      	ldrb	r2, [r7, r2]
    cebe:	0712      	lsls	r2, r2, #28
    cec0:	d440      	bmi.n	cf44 <__ssvfiscanf_r+0x278>
    cec2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    cec4:	2b02      	cmp	r3, #2
    cec6:	dc4f      	bgt.n	cf68 <__ssvfiscanf_r+0x29c>
    cec8:	466b      	mov	r3, sp
    ceca:	4622      	mov	r2, r4
    cecc:	a941      	add	r1, sp, #260	; 0x104
    cece:	4630      	mov	r0, r6
    ced0:	f000 f99a 	bl	d208 <_scanf_chars>
    ced4:	2801      	cmp	r0, #1
    ced6:	d065      	beq.n	cfa4 <__ssvfiscanf_r+0x2d8>
    ced8:	2802      	cmp	r0, #2
    ceda:	f47f af21 	bne.w	cd20 <__ssvfiscanf_r+0x54>
    cede:	e7cf      	b.n	ce80 <__ssvfiscanf_r+0x1b4>
    cee0:	220a      	movs	r2, #10
    cee2:	e7dd      	b.n	cea0 <__ssvfiscanf_r+0x1d4>
    cee4:	2300      	movs	r3, #0
    cee6:	9342      	str	r3, [sp, #264]	; 0x108
    cee8:	2303      	movs	r3, #3
    ceea:	e7de      	b.n	ceaa <__ssvfiscanf_r+0x1de>
    ceec:	2308      	movs	r3, #8
    ceee:	9342      	str	r3, [sp, #264]	; 0x108
    cef0:	2304      	movs	r3, #4
    cef2:	e7da      	b.n	ceaa <__ssvfiscanf_r+0x1de>
    cef4:	4629      	mov	r1, r5
    cef6:	4640      	mov	r0, r8
    cef8:	f010 fee2 	bl	1dcc0 <__sccl>
    cefc:	9b41      	ldr	r3, [sp, #260]	; 0x104
    cefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf02:	9341      	str	r3, [sp, #260]	; 0x104
    cf04:	4605      	mov	r5, r0
    cf06:	2301      	movs	r3, #1
    cf08:	e7cf      	b.n	ceaa <__ssvfiscanf_r+0x1de>
    cf0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
    cf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cf10:	9341      	str	r3, [sp, #260]	; 0x104
    cf12:	2300      	movs	r3, #0
    cf14:	e7c9      	b.n	ceaa <__ssvfiscanf_r+0x1de>
    cf16:	2302      	movs	r3, #2
    cf18:	e7c7      	b.n	ceaa <__ssvfiscanf_r+0x1de>
    cf1a:	9841      	ldr	r0, [sp, #260]	; 0x104
    cf1c:	06c3      	lsls	r3, r0, #27
    cf1e:	f53f aeff 	bmi.w	cd20 <__ssvfiscanf_r+0x54>
    cf22:	9b00      	ldr	r3, [sp, #0]
    cf24:	9a45      	ldr	r2, [sp, #276]	; 0x114
    cf26:	1d19      	adds	r1, r3, #4
    cf28:	9100      	str	r1, [sp, #0]
    cf2a:	681b      	ldr	r3, [r3, #0]
    cf2c:	07c0      	lsls	r0, r0, #31
    cf2e:	bf4c      	ite	mi
    cf30:	801a      	strhmi	r2, [r3, #0]
    cf32:	601a      	strpl	r2, [r3, #0]
    cf34:	e6f4      	b.n	cd20 <__ssvfiscanf_r+0x54>
    cf36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    cf38:	4621      	mov	r1, r4
    cf3a:	4630      	mov	r0, r6
    cf3c:	4798      	blx	r3
    cf3e:	2800      	cmp	r0, #0
    cf40:	d0b7      	beq.n	ceb2 <__ssvfiscanf_r+0x1e6>
    cf42:	e79d      	b.n	ce80 <__ssvfiscanf_r+0x1b4>
    cf44:	9a45      	ldr	r2, [sp, #276]	; 0x114
    cf46:	3201      	adds	r2, #1
    cf48:	9245      	str	r2, [sp, #276]	; 0x114
    cf4a:	6862      	ldr	r2, [r4, #4]
    cf4c:	3a01      	subs	r2, #1
    cf4e:	2a00      	cmp	r2, #0
    cf50:	6062      	str	r2, [r4, #4]
    cf52:	dd02      	ble.n	cf5a <__ssvfiscanf_r+0x28e>
    cf54:	3301      	adds	r3, #1
    cf56:	6023      	str	r3, [r4, #0]
    cf58:	e7ae      	b.n	ceb8 <__ssvfiscanf_r+0x1ec>
    cf5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    cf5c:	4621      	mov	r1, r4
    cf5e:	4630      	mov	r0, r6
    cf60:	4798      	blx	r3
    cf62:	2800      	cmp	r0, #0
    cf64:	d0a8      	beq.n	ceb8 <__ssvfiscanf_r+0x1ec>
    cf66:	e78b      	b.n	ce80 <__ssvfiscanf_r+0x1b4>
    cf68:	2b04      	cmp	r3, #4
    cf6a:	dc06      	bgt.n	cf7a <__ssvfiscanf_r+0x2ae>
    cf6c:	466b      	mov	r3, sp
    cf6e:	4622      	mov	r2, r4
    cf70:	a941      	add	r1, sp, #260	; 0x104
    cf72:	4630      	mov	r0, r6
    cf74:	f000 f9a0 	bl	d2b8 <_scanf_i>
    cf78:	e7ac      	b.n	ced4 <__ssvfiscanf_r+0x208>
    cf7a:	4b0f      	ldr	r3, [pc, #60]	; (cfb8 <__ssvfiscanf_r+0x2ec>)
    cf7c:	2b00      	cmp	r3, #0
    cf7e:	f43f aecf 	beq.w	cd20 <__ssvfiscanf_r+0x54>
    cf82:	466b      	mov	r3, sp
    cf84:	4622      	mov	r2, r4
    cf86:	a941      	add	r1, sp, #260	; 0x104
    cf88:	4630      	mov	r0, r6
    cf8a:	f3af 8000 	nop.w
    cf8e:	e7a1      	b.n	ced4 <__ssvfiscanf_r+0x208>
    cf90:	89a3      	ldrh	r3, [r4, #12]
    cf92:	f013 0f40 	tst.w	r3, #64	; 0x40
    cf96:	bf18      	it	ne
    cf98:	f04f 30ff 	movne.w	r0, #4294967295
    cf9c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
    cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfa4:	9844      	ldr	r0, [sp, #272]	; 0x110
    cfa6:	e7f9      	b.n	cf9c <__ssvfiscanf_r+0x2d0>
    cfa8:	0001db33 	.word	0x0001db33
    cfac:	0001dbad 	.word	0x0001dbad
    cfb0:	0001f954 	.word	0x0001f954
    cfb4:	0001fa5a 	.word	0x0001fa5a
    cfb8:	00000000 	.word	0x00000000

0000cfbc <_printf_i>:
    cfbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    cfc0:	460c      	mov	r4, r1
    cfc2:	4691      	mov	r9, r2
    cfc4:	7e27      	ldrb	r7, [r4, #24]
    cfc6:	990c      	ldr	r1, [sp, #48]	; 0x30
    cfc8:	2f78      	cmp	r7, #120	; 0x78
    cfca:	4680      	mov	r8, r0
    cfcc:	469a      	mov	sl, r3
    cfce:	f104 0243 	add.w	r2, r4, #67	; 0x43
    cfd2:	d807      	bhi.n	cfe4 <_printf_i+0x28>
    cfd4:	2f62      	cmp	r7, #98	; 0x62
    cfd6:	d80a      	bhi.n	cfee <_printf_i+0x32>
    cfd8:	2f00      	cmp	r7, #0
    cfda:	f000 80d8 	beq.w	d18e <_printf_i+0x1d2>
    cfde:	2f58      	cmp	r7, #88	; 0x58
    cfe0:	f000 80a3 	beq.w	d12a <_printf_i+0x16e>
    cfe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
    cfe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    cfec:	e03a      	b.n	d064 <_printf_i+0xa8>
    cfee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    cff2:	2b15      	cmp	r3, #21
    cff4:	d8f6      	bhi.n	cfe4 <_printf_i+0x28>
    cff6:	a001      	add	r0, pc, #4	; (adr r0, cffc <_printf_i+0x40>)
    cff8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    cffc:	0000d055 	.word	0x0000d055
    d000:	0000d069 	.word	0x0000d069
    d004:	0000cfe5 	.word	0x0000cfe5
    d008:	0000cfe5 	.word	0x0000cfe5
    d00c:	0000cfe5 	.word	0x0000cfe5
    d010:	0000cfe5 	.word	0x0000cfe5
    d014:	0000d069 	.word	0x0000d069
    d018:	0000cfe5 	.word	0x0000cfe5
    d01c:	0000cfe5 	.word	0x0000cfe5
    d020:	0000cfe5 	.word	0x0000cfe5
    d024:	0000cfe5 	.word	0x0000cfe5
    d028:	0000d175 	.word	0x0000d175
    d02c:	0000d099 	.word	0x0000d099
    d030:	0000d157 	.word	0x0000d157
    d034:	0000cfe5 	.word	0x0000cfe5
    d038:	0000cfe5 	.word	0x0000cfe5
    d03c:	0000d197 	.word	0x0000d197
    d040:	0000cfe5 	.word	0x0000cfe5
    d044:	0000d099 	.word	0x0000d099
    d048:	0000cfe5 	.word	0x0000cfe5
    d04c:	0000cfe5 	.word	0x0000cfe5
    d050:	0000d15f 	.word	0x0000d15f
    d054:	680b      	ldr	r3, [r1, #0]
    d056:	1d1a      	adds	r2, r3, #4
    d058:	681b      	ldr	r3, [r3, #0]
    d05a:	600a      	str	r2, [r1, #0]
    d05c:	f104 0642 	add.w	r6, r4, #66	; 0x42
    d060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d064:	2301      	movs	r3, #1
    d066:	e0a3      	b.n	d1b0 <_printf_i+0x1f4>
    d068:	6825      	ldr	r5, [r4, #0]
    d06a:	6808      	ldr	r0, [r1, #0]
    d06c:	062e      	lsls	r6, r5, #24
    d06e:	f100 0304 	add.w	r3, r0, #4
    d072:	d50a      	bpl.n	d08a <_printf_i+0xce>
    d074:	6805      	ldr	r5, [r0, #0]
    d076:	600b      	str	r3, [r1, #0]
    d078:	2d00      	cmp	r5, #0
    d07a:	da03      	bge.n	d084 <_printf_i+0xc8>
    d07c:	232d      	movs	r3, #45	; 0x2d
    d07e:	426d      	negs	r5, r5
    d080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d084:	485e      	ldr	r0, [pc, #376]	; (d200 <_printf_i+0x244>)
    d086:	230a      	movs	r3, #10
    d088:	e019      	b.n	d0be <_printf_i+0x102>
    d08a:	f015 0f40 	tst.w	r5, #64	; 0x40
    d08e:	6805      	ldr	r5, [r0, #0]
    d090:	600b      	str	r3, [r1, #0]
    d092:	bf18      	it	ne
    d094:	b22d      	sxthne	r5, r5
    d096:	e7ef      	b.n	d078 <_printf_i+0xbc>
    d098:	680b      	ldr	r3, [r1, #0]
    d09a:	6825      	ldr	r5, [r4, #0]
    d09c:	1d18      	adds	r0, r3, #4
    d09e:	6008      	str	r0, [r1, #0]
    d0a0:	0628      	lsls	r0, r5, #24
    d0a2:	d501      	bpl.n	d0a8 <_printf_i+0xec>
    d0a4:	681d      	ldr	r5, [r3, #0]
    d0a6:	e002      	b.n	d0ae <_printf_i+0xf2>
    d0a8:	0669      	lsls	r1, r5, #25
    d0aa:	d5fb      	bpl.n	d0a4 <_printf_i+0xe8>
    d0ac:	881d      	ldrh	r5, [r3, #0]
    d0ae:	4854      	ldr	r0, [pc, #336]	; (d200 <_printf_i+0x244>)
    d0b0:	2f6f      	cmp	r7, #111	; 0x6f
    d0b2:	bf0c      	ite	eq
    d0b4:	2308      	moveq	r3, #8
    d0b6:	230a      	movne	r3, #10
    d0b8:	2100      	movs	r1, #0
    d0ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    d0be:	6866      	ldr	r6, [r4, #4]
    d0c0:	60a6      	str	r6, [r4, #8]
    d0c2:	2e00      	cmp	r6, #0
    d0c4:	bfa2      	ittt	ge
    d0c6:	6821      	ldrge	r1, [r4, #0]
    d0c8:	f021 0104 	bicge.w	r1, r1, #4
    d0cc:	6021      	strge	r1, [r4, #0]
    d0ce:	b90d      	cbnz	r5, d0d4 <_printf_i+0x118>
    d0d0:	2e00      	cmp	r6, #0
    d0d2:	d04d      	beq.n	d170 <_printf_i+0x1b4>
    d0d4:	4616      	mov	r6, r2
    d0d6:	fbb5 f1f3 	udiv	r1, r5, r3
    d0da:	fb03 5711 	mls	r7, r3, r1, r5
    d0de:	5dc7      	ldrb	r7, [r0, r7]
    d0e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
    d0e4:	462f      	mov	r7, r5
    d0e6:	42bb      	cmp	r3, r7
    d0e8:	460d      	mov	r5, r1
    d0ea:	d9f4      	bls.n	d0d6 <_printf_i+0x11a>
    d0ec:	2b08      	cmp	r3, #8
    d0ee:	d10b      	bne.n	d108 <_printf_i+0x14c>
    d0f0:	6823      	ldr	r3, [r4, #0]
    d0f2:	07df      	lsls	r7, r3, #31
    d0f4:	d508      	bpl.n	d108 <_printf_i+0x14c>
    d0f6:	6923      	ldr	r3, [r4, #16]
    d0f8:	6861      	ldr	r1, [r4, #4]
    d0fa:	4299      	cmp	r1, r3
    d0fc:	bfde      	ittt	le
    d0fe:	2330      	movle	r3, #48	; 0x30
    d100:	f806 3c01 	strble.w	r3, [r6, #-1]
    d104:	f106 36ff 	addle.w	r6, r6, #4294967295
    d108:	1b92      	subs	r2, r2, r6
    d10a:	6122      	str	r2, [r4, #16]
    d10c:	f8cd a000 	str.w	sl, [sp]
    d110:	464b      	mov	r3, r9
    d112:	aa03      	add	r2, sp, #12
    d114:	4621      	mov	r1, r4
    d116:	4640      	mov	r0, r8
    d118:	f010 fd65 	bl	1dbe6 <_printf_common>
    d11c:	3001      	adds	r0, #1
    d11e:	d14c      	bne.n	d1ba <_printf_i+0x1fe>
    d120:	f04f 30ff 	mov.w	r0, #4294967295
    d124:	b004      	add	sp, #16
    d126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d12a:	4835      	ldr	r0, [pc, #212]	; (d200 <_printf_i+0x244>)
    d12c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    d130:	6823      	ldr	r3, [r4, #0]
    d132:	680e      	ldr	r6, [r1, #0]
    d134:	061f      	lsls	r7, r3, #24
    d136:	f856 5b04 	ldr.w	r5, [r6], #4
    d13a:	600e      	str	r6, [r1, #0]
    d13c:	d514      	bpl.n	d168 <_printf_i+0x1ac>
    d13e:	07d9      	lsls	r1, r3, #31
    d140:	bf44      	itt	mi
    d142:	f043 0320 	orrmi.w	r3, r3, #32
    d146:	6023      	strmi	r3, [r4, #0]
    d148:	b91d      	cbnz	r5, d152 <_printf_i+0x196>
    d14a:	6823      	ldr	r3, [r4, #0]
    d14c:	f023 0320 	bic.w	r3, r3, #32
    d150:	6023      	str	r3, [r4, #0]
    d152:	2310      	movs	r3, #16
    d154:	e7b0      	b.n	d0b8 <_printf_i+0xfc>
    d156:	6823      	ldr	r3, [r4, #0]
    d158:	f043 0320 	orr.w	r3, r3, #32
    d15c:	6023      	str	r3, [r4, #0]
    d15e:	2378      	movs	r3, #120	; 0x78
    d160:	4828      	ldr	r0, [pc, #160]	; (d204 <_printf_i+0x248>)
    d162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    d166:	e7e3      	b.n	d130 <_printf_i+0x174>
    d168:	065e      	lsls	r6, r3, #25
    d16a:	bf48      	it	mi
    d16c:	b2ad      	uxthmi	r5, r5
    d16e:	e7e6      	b.n	d13e <_printf_i+0x182>
    d170:	4616      	mov	r6, r2
    d172:	e7bb      	b.n	d0ec <_printf_i+0x130>
    d174:	680b      	ldr	r3, [r1, #0]
    d176:	6826      	ldr	r6, [r4, #0]
    d178:	6960      	ldr	r0, [r4, #20]
    d17a:	1d1d      	adds	r5, r3, #4
    d17c:	600d      	str	r5, [r1, #0]
    d17e:	0635      	lsls	r5, r6, #24
    d180:	681b      	ldr	r3, [r3, #0]
    d182:	d501      	bpl.n	d188 <_printf_i+0x1cc>
    d184:	6018      	str	r0, [r3, #0]
    d186:	e002      	b.n	d18e <_printf_i+0x1d2>
    d188:	0671      	lsls	r1, r6, #25
    d18a:	d5fb      	bpl.n	d184 <_printf_i+0x1c8>
    d18c:	8018      	strh	r0, [r3, #0]
    d18e:	2300      	movs	r3, #0
    d190:	6123      	str	r3, [r4, #16]
    d192:	4616      	mov	r6, r2
    d194:	e7ba      	b.n	d10c <_printf_i+0x150>
    d196:	680b      	ldr	r3, [r1, #0]
    d198:	1d1a      	adds	r2, r3, #4
    d19a:	600a      	str	r2, [r1, #0]
    d19c:	681e      	ldr	r6, [r3, #0]
    d19e:	6862      	ldr	r2, [r4, #4]
    d1a0:	2100      	movs	r1, #0
    d1a2:	4630      	mov	r0, r6
    d1a4:	f7f2 ffac 	bl	100 <memchr>
    d1a8:	b108      	cbz	r0, d1ae <_printf_i+0x1f2>
    d1aa:	1b80      	subs	r0, r0, r6
    d1ac:	6060      	str	r0, [r4, #4]
    d1ae:	6863      	ldr	r3, [r4, #4]
    d1b0:	6123      	str	r3, [r4, #16]
    d1b2:	2300      	movs	r3, #0
    d1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d1b8:	e7a8      	b.n	d10c <_printf_i+0x150>
    d1ba:	6923      	ldr	r3, [r4, #16]
    d1bc:	4632      	mov	r2, r6
    d1be:	4649      	mov	r1, r9
    d1c0:	4640      	mov	r0, r8
    d1c2:	47d0      	blx	sl
    d1c4:	3001      	adds	r0, #1
    d1c6:	d0ab      	beq.n	d120 <_printf_i+0x164>
    d1c8:	6823      	ldr	r3, [r4, #0]
    d1ca:	079b      	lsls	r3, r3, #30
    d1cc:	d413      	bmi.n	d1f6 <_printf_i+0x23a>
    d1ce:	68e0      	ldr	r0, [r4, #12]
    d1d0:	9b03      	ldr	r3, [sp, #12]
    d1d2:	4298      	cmp	r0, r3
    d1d4:	bfb8      	it	lt
    d1d6:	4618      	movlt	r0, r3
    d1d8:	e7a4      	b.n	d124 <_printf_i+0x168>
    d1da:	2301      	movs	r3, #1
    d1dc:	4632      	mov	r2, r6
    d1de:	4649      	mov	r1, r9
    d1e0:	4640      	mov	r0, r8
    d1e2:	47d0      	blx	sl
    d1e4:	3001      	adds	r0, #1
    d1e6:	d09b      	beq.n	d120 <_printf_i+0x164>
    d1e8:	3501      	adds	r5, #1
    d1ea:	68e3      	ldr	r3, [r4, #12]
    d1ec:	9903      	ldr	r1, [sp, #12]
    d1ee:	1a5b      	subs	r3, r3, r1
    d1f0:	42ab      	cmp	r3, r5
    d1f2:	dcf2      	bgt.n	d1da <_printf_i+0x21e>
    d1f4:	e7eb      	b.n	d1ce <_printf_i+0x212>
    d1f6:	2500      	movs	r5, #0
    d1f8:	f104 0619 	add.w	r6, r4, #25
    d1fc:	e7f5      	b.n	d1ea <_printf_i+0x22e>
    d1fe:	bf00      	nop
    d200:	0001ee60 	.word	0x0001ee60
    d204:	0001fa65 	.word	0x0001fa65

0000d208 <_scanf_chars>:
    d208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d20c:	4615      	mov	r5, r2
    d20e:	688a      	ldr	r2, [r1, #8]
    d210:	4680      	mov	r8, r0
    d212:	460c      	mov	r4, r1
    d214:	b932      	cbnz	r2, d224 <_scanf_chars+0x1c>
    d216:	698a      	ldr	r2, [r1, #24]
    d218:	2a00      	cmp	r2, #0
    d21a:	bf0c      	ite	eq
    d21c:	2201      	moveq	r2, #1
    d21e:	f04f 32ff 	movne.w	r2, #4294967295
    d222:	608a      	str	r2, [r1, #8]
    d224:	6822      	ldr	r2, [r4, #0]
    d226:	f8df 908c 	ldr.w	r9, [pc, #140]	; d2b4 <_scanf_chars+0xac>
    d22a:	06d1      	lsls	r1, r2, #27
    d22c:	bf5f      	itttt	pl
    d22e:	681a      	ldrpl	r2, [r3, #0]
    d230:	1d11      	addpl	r1, r2, #4
    d232:	6019      	strpl	r1, [r3, #0]
    d234:	6816      	ldrpl	r6, [r2, #0]
    d236:	2700      	movs	r7, #0
    d238:	69a0      	ldr	r0, [r4, #24]
    d23a:	b188      	cbz	r0, d260 <_scanf_chars+0x58>
    d23c:	2801      	cmp	r0, #1
    d23e:	d107      	bne.n	d250 <_scanf_chars+0x48>
    d240:	682b      	ldr	r3, [r5, #0]
    d242:	781a      	ldrb	r2, [r3, #0]
    d244:	6963      	ldr	r3, [r4, #20]
    d246:	5c9b      	ldrb	r3, [r3, r2]
    d248:	b953      	cbnz	r3, d260 <_scanf_chars+0x58>
    d24a:	bb27      	cbnz	r7, d296 <_scanf_chars+0x8e>
    d24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d250:	2802      	cmp	r0, #2
    d252:	d120      	bne.n	d296 <_scanf_chars+0x8e>
    d254:	682b      	ldr	r3, [r5, #0]
    d256:	781b      	ldrb	r3, [r3, #0]
    d258:	f813 3009 	ldrb.w	r3, [r3, r9]
    d25c:	071b      	lsls	r3, r3, #28
    d25e:	d41a      	bmi.n	d296 <_scanf_chars+0x8e>
    d260:	6823      	ldr	r3, [r4, #0]
    d262:	06da      	lsls	r2, r3, #27
    d264:	bf5e      	ittt	pl
    d266:	682b      	ldrpl	r3, [r5, #0]
    d268:	781b      	ldrbpl	r3, [r3, #0]
    d26a:	f806 3b01 	strbpl.w	r3, [r6], #1
    d26e:	682a      	ldr	r2, [r5, #0]
    d270:	686b      	ldr	r3, [r5, #4]
    d272:	3201      	adds	r2, #1
    d274:	602a      	str	r2, [r5, #0]
    d276:	68a2      	ldr	r2, [r4, #8]
    d278:	3b01      	subs	r3, #1
    d27a:	3a01      	subs	r2, #1
    d27c:	606b      	str	r3, [r5, #4]
    d27e:	3701      	adds	r7, #1
    d280:	60a2      	str	r2, [r4, #8]
    d282:	b142      	cbz	r2, d296 <_scanf_chars+0x8e>
    d284:	2b00      	cmp	r3, #0
    d286:	dcd7      	bgt.n	d238 <_scanf_chars+0x30>
    d288:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    d28c:	4629      	mov	r1, r5
    d28e:	4640      	mov	r0, r8
    d290:	4798      	blx	r3
    d292:	2800      	cmp	r0, #0
    d294:	d0d0      	beq.n	d238 <_scanf_chars+0x30>
    d296:	6823      	ldr	r3, [r4, #0]
    d298:	f013 0310 	ands.w	r3, r3, #16
    d29c:	d105      	bne.n	d2aa <_scanf_chars+0xa2>
    d29e:	68e2      	ldr	r2, [r4, #12]
    d2a0:	3201      	adds	r2, #1
    d2a2:	60e2      	str	r2, [r4, #12]
    d2a4:	69a2      	ldr	r2, [r4, #24]
    d2a6:	b102      	cbz	r2, d2aa <_scanf_chars+0xa2>
    d2a8:	7033      	strb	r3, [r6, #0]
    d2aa:	6923      	ldr	r3, [r4, #16]
    d2ac:	441f      	add	r7, r3
    d2ae:	6127      	str	r7, [r4, #16]
    d2b0:	2000      	movs	r0, #0
    d2b2:	e7cb      	b.n	d24c <_scanf_chars+0x44>
    d2b4:	0001f954 	.word	0x0001f954

0000d2b8 <_scanf_i>:
    d2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2bc:	4698      	mov	r8, r3
    d2be:	4b74      	ldr	r3, [pc, #464]	; (d490 <_scanf_i+0x1d8>)
    d2c0:	460c      	mov	r4, r1
    d2c2:	4682      	mov	sl, r0
    d2c4:	4616      	mov	r6, r2
    d2c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d2ca:	b087      	sub	sp, #28
    d2cc:	ab03      	add	r3, sp, #12
    d2ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    d2d2:	4b70      	ldr	r3, [pc, #448]	; (d494 <_scanf_i+0x1dc>)
    d2d4:	69a1      	ldr	r1, [r4, #24]
    d2d6:	4a70      	ldr	r2, [pc, #448]	; (d498 <_scanf_i+0x1e0>)
    d2d8:	2903      	cmp	r1, #3
    d2da:	bf18      	it	ne
    d2dc:	461a      	movne	r2, r3
    d2de:	68a3      	ldr	r3, [r4, #8]
    d2e0:	9201      	str	r2, [sp, #4]
    d2e2:	1e5a      	subs	r2, r3, #1
    d2e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
    d2e8:	bf88      	it	hi
    d2ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    d2ee:	4627      	mov	r7, r4
    d2f0:	bf82      	ittt	hi
    d2f2:	eb03 0905 	addhi.w	r9, r3, r5
    d2f6:	f240 135d 	movwhi	r3, #349	; 0x15d
    d2fa:	60a3      	strhi	r3, [r4, #8]
    d2fc:	f857 3b1c 	ldr.w	r3, [r7], #28
    d300:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    d304:	bf98      	it	ls
    d306:	f04f 0900 	movls.w	r9, #0
    d30a:	6023      	str	r3, [r4, #0]
    d30c:	463d      	mov	r5, r7
    d30e:	f04f 0b00 	mov.w	fp, #0
    d312:	6831      	ldr	r1, [r6, #0]
    d314:	ab03      	add	r3, sp, #12
    d316:	7809      	ldrb	r1, [r1, #0]
    d318:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
    d31c:	2202      	movs	r2, #2
    d31e:	f7f2 feef 	bl	100 <memchr>
    d322:	b328      	cbz	r0, d370 <_scanf_i+0xb8>
    d324:	f1bb 0f01 	cmp.w	fp, #1
    d328:	d159      	bne.n	d3de <_scanf_i+0x126>
    d32a:	6862      	ldr	r2, [r4, #4]
    d32c:	b92a      	cbnz	r2, d33a <_scanf_i+0x82>
    d32e:	6822      	ldr	r2, [r4, #0]
    d330:	2308      	movs	r3, #8
    d332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d336:	6063      	str	r3, [r4, #4]
    d338:	6022      	str	r2, [r4, #0]
    d33a:	6822      	ldr	r2, [r4, #0]
    d33c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    d340:	6022      	str	r2, [r4, #0]
    d342:	68a2      	ldr	r2, [r4, #8]
    d344:	1e51      	subs	r1, r2, #1
    d346:	60a1      	str	r1, [r4, #8]
    d348:	b192      	cbz	r2, d370 <_scanf_i+0xb8>
    d34a:	6832      	ldr	r2, [r6, #0]
    d34c:	1c51      	adds	r1, r2, #1
    d34e:	6031      	str	r1, [r6, #0]
    d350:	7812      	ldrb	r2, [r2, #0]
    d352:	f805 2b01 	strb.w	r2, [r5], #1
    d356:	6872      	ldr	r2, [r6, #4]
    d358:	3a01      	subs	r2, #1
    d35a:	2a00      	cmp	r2, #0
    d35c:	6072      	str	r2, [r6, #4]
    d35e:	dc07      	bgt.n	d370 <_scanf_i+0xb8>
    d360:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    d364:	4631      	mov	r1, r6
    d366:	4650      	mov	r0, sl
    d368:	4790      	blx	r2
    d36a:	2800      	cmp	r0, #0
    d36c:	f040 8085 	bne.w	d47a <_scanf_i+0x1c2>
    d370:	f10b 0b01 	add.w	fp, fp, #1
    d374:	f1bb 0f03 	cmp.w	fp, #3
    d378:	d1cb      	bne.n	d312 <_scanf_i+0x5a>
    d37a:	6863      	ldr	r3, [r4, #4]
    d37c:	b90b      	cbnz	r3, d382 <_scanf_i+0xca>
    d37e:	230a      	movs	r3, #10
    d380:	6063      	str	r3, [r4, #4]
    d382:	6863      	ldr	r3, [r4, #4]
    d384:	4945      	ldr	r1, [pc, #276]	; (d49c <_scanf_i+0x1e4>)
    d386:	6960      	ldr	r0, [r4, #20]
    d388:	1ac9      	subs	r1, r1, r3
    d38a:	f010 fc99 	bl	1dcc0 <__sccl>
    d38e:	f04f 0b00 	mov.w	fp, #0
    d392:	68a3      	ldr	r3, [r4, #8]
    d394:	6822      	ldr	r2, [r4, #0]
    d396:	2b00      	cmp	r3, #0
    d398:	d03d      	beq.n	d416 <_scanf_i+0x15e>
    d39a:	6831      	ldr	r1, [r6, #0]
    d39c:	6960      	ldr	r0, [r4, #20]
    d39e:	f891 c000 	ldrb.w	ip, [r1]
    d3a2:	f810 000c 	ldrb.w	r0, [r0, ip]
    d3a6:	2800      	cmp	r0, #0
    d3a8:	d035      	beq.n	d416 <_scanf_i+0x15e>
    d3aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
    d3ae:	d124      	bne.n	d3fa <_scanf_i+0x142>
    d3b0:	0510      	lsls	r0, r2, #20
    d3b2:	d522      	bpl.n	d3fa <_scanf_i+0x142>
    d3b4:	f10b 0b01 	add.w	fp, fp, #1
    d3b8:	f1b9 0f00 	cmp.w	r9, #0
    d3bc:	d003      	beq.n	d3c6 <_scanf_i+0x10e>
    d3be:	3301      	adds	r3, #1
    d3c0:	f109 39ff 	add.w	r9, r9, #4294967295
    d3c4:	60a3      	str	r3, [r4, #8]
    d3c6:	6873      	ldr	r3, [r6, #4]
    d3c8:	3b01      	subs	r3, #1
    d3ca:	2b00      	cmp	r3, #0
    d3cc:	6073      	str	r3, [r6, #4]
    d3ce:	dd1b      	ble.n	d408 <_scanf_i+0x150>
    d3d0:	6833      	ldr	r3, [r6, #0]
    d3d2:	3301      	adds	r3, #1
    d3d4:	6033      	str	r3, [r6, #0]
    d3d6:	68a3      	ldr	r3, [r4, #8]
    d3d8:	3b01      	subs	r3, #1
    d3da:	60a3      	str	r3, [r4, #8]
    d3dc:	e7d9      	b.n	d392 <_scanf_i+0xda>
    d3de:	f1bb 0f02 	cmp.w	fp, #2
    d3e2:	d1ae      	bne.n	d342 <_scanf_i+0x8a>
    d3e4:	6822      	ldr	r2, [r4, #0]
    d3e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    d3ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d3ee:	d1bf      	bne.n	d370 <_scanf_i+0xb8>
    d3f0:	2310      	movs	r3, #16
    d3f2:	6063      	str	r3, [r4, #4]
    d3f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    d3f8:	e7a2      	b.n	d340 <_scanf_i+0x88>
    d3fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    d3fe:	6022      	str	r2, [r4, #0]
    d400:	780b      	ldrb	r3, [r1, #0]
    d402:	f805 3b01 	strb.w	r3, [r5], #1
    d406:	e7de      	b.n	d3c6 <_scanf_i+0x10e>
    d408:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    d40c:	4631      	mov	r1, r6
    d40e:	4650      	mov	r0, sl
    d410:	4798      	blx	r3
    d412:	2800      	cmp	r0, #0
    d414:	d0df      	beq.n	d3d6 <_scanf_i+0x11e>
    d416:	6823      	ldr	r3, [r4, #0]
    d418:	05d9      	lsls	r1, r3, #23
    d41a:	d50d      	bpl.n	d438 <_scanf_i+0x180>
    d41c:	42bd      	cmp	r5, r7
    d41e:	d909      	bls.n	d434 <_scanf_i+0x17c>
    d420:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    d424:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    d428:	4632      	mov	r2, r6
    d42a:	4650      	mov	r0, sl
    d42c:	4798      	blx	r3
    d42e:	f105 39ff 	add.w	r9, r5, #4294967295
    d432:	464d      	mov	r5, r9
    d434:	42bd      	cmp	r5, r7
    d436:	d028      	beq.n	d48a <_scanf_i+0x1d2>
    d438:	6822      	ldr	r2, [r4, #0]
    d43a:	f012 0210 	ands.w	r2, r2, #16
    d43e:	d113      	bne.n	d468 <_scanf_i+0x1b0>
    d440:	702a      	strb	r2, [r5, #0]
    d442:	6863      	ldr	r3, [r4, #4]
    d444:	9e01      	ldr	r6, [sp, #4]
    d446:	4639      	mov	r1, r7
    d448:	4650      	mov	r0, sl
    d44a:	47b0      	blx	r6
    d44c:	f8d8 3000 	ldr.w	r3, [r8]
    d450:	6821      	ldr	r1, [r4, #0]
    d452:	1d1a      	adds	r2, r3, #4
    d454:	f8c8 2000 	str.w	r2, [r8]
    d458:	f011 0f20 	tst.w	r1, #32
    d45c:	681b      	ldr	r3, [r3, #0]
    d45e:	d00f      	beq.n	d480 <_scanf_i+0x1c8>
    d460:	6018      	str	r0, [r3, #0]
    d462:	68e3      	ldr	r3, [r4, #12]
    d464:	3301      	adds	r3, #1
    d466:	60e3      	str	r3, [r4, #12]
    d468:	1bed      	subs	r5, r5, r7
    d46a:	44ab      	add	fp, r5
    d46c:	6925      	ldr	r5, [r4, #16]
    d46e:	445d      	add	r5, fp
    d470:	6125      	str	r5, [r4, #16]
    d472:	2000      	movs	r0, #0
    d474:	b007      	add	sp, #28
    d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d47a:	f04f 0b00 	mov.w	fp, #0
    d47e:	e7ca      	b.n	d416 <_scanf_i+0x15e>
    d480:	07ca      	lsls	r2, r1, #31
    d482:	bf4c      	ite	mi
    d484:	8018      	strhmi	r0, [r3, #0]
    d486:	6018      	strpl	r0, [r3, #0]
    d488:	e7eb      	b.n	d462 <_scanf_i+0x1aa>
    d48a:	2001      	movs	r0, #1
    d48c:	e7f2      	b.n	d474 <_scanf_i+0x1bc>
    d48e:	bf00      	nop
    d490:	0001e120 	.word	0x0001e120
    d494:	0001dd39 	.word	0x0001dd39
    d498:	0001dd35 	.word	0x0001dd35
    d49c:	0001fa8c 	.word	0x0001fa8c

0000d4a0 <_strtol_l.isra.0>:
    d4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4a4:	4e3a      	ldr	r6, [pc, #232]	; (d590 <_strtol_l.isra.0+0xf0>)
    d4a6:	4686      	mov	lr, r0
    d4a8:	468c      	mov	ip, r1
    d4aa:	4660      	mov	r0, ip
    d4ac:	f81c 4b01 	ldrb.w	r4, [ip], #1
    d4b0:	5da5      	ldrb	r5, [r4, r6]
    d4b2:	f015 0508 	ands.w	r5, r5, #8
    d4b6:	d1f8      	bne.n	d4aa <_strtol_l.isra.0+0xa>
    d4b8:	2c2d      	cmp	r4, #45	; 0x2d
    d4ba:	d133      	bne.n	d524 <_strtol_l.isra.0+0x84>
    d4bc:	f89c 4000 	ldrb.w	r4, [ip]
    d4c0:	f04f 0801 	mov.w	r8, #1
    d4c4:	f100 0c02 	add.w	ip, r0, #2
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d05c      	beq.n	d586 <_strtol_l.isra.0+0xe6>
    d4cc:	2b10      	cmp	r3, #16
    d4ce:	d10c      	bne.n	d4ea <_strtol_l.isra.0+0x4a>
    d4d0:	2c30      	cmp	r4, #48	; 0x30
    d4d2:	d10a      	bne.n	d4ea <_strtol_l.isra.0+0x4a>
    d4d4:	f89c 0000 	ldrb.w	r0, [ip]
    d4d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    d4dc:	2858      	cmp	r0, #88	; 0x58
    d4de:	d14d      	bne.n	d57c <_strtol_l.isra.0+0xdc>
    d4e0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    d4e4:	2310      	movs	r3, #16
    d4e6:	f10c 0c02 	add.w	ip, ip, #2
    d4ea:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
    d4ee:	3f01      	subs	r7, #1
    d4f0:	2600      	movs	r6, #0
    d4f2:	fbb7 f9f3 	udiv	r9, r7, r3
    d4f6:	4630      	mov	r0, r6
    d4f8:	fb03 7a19 	mls	sl, r3, r9, r7
    d4fc:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
    d500:	2d09      	cmp	r5, #9
    d502:	d818      	bhi.n	d536 <_strtol_l.isra.0+0x96>
    d504:	462c      	mov	r4, r5
    d506:	42a3      	cmp	r3, r4
    d508:	dd24      	ble.n	d554 <_strtol_l.isra.0+0xb4>
    d50a:	1c75      	adds	r5, r6, #1
    d50c:	d007      	beq.n	d51e <_strtol_l.isra.0+0x7e>
    d50e:	4581      	cmp	r9, r0
    d510:	d31d      	bcc.n	d54e <_strtol_l.isra.0+0xae>
    d512:	d101      	bne.n	d518 <_strtol_l.isra.0+0x78>
    d514:	45a2      	cmp	sl, r4
    d516:	db1a      	blt.n	d54e <_strtol_l.isra.0+0xae>
    d518:	fb00 4003 	mla	r0, r0, r3, r4
    d51c:	2601      	movs	r6, #1
    d51e:	f81c 4b01 	ldrb.w	r4, [ip], #1
    d522:	e7eb      	b.n	d4fc <_strtol_l.isra.0+0x5c>
    d524:	2c2b      	cmp	r4, #43	; 0x2b
    d526:	bf08      	it	eq
    d528:	f89c 4000 	ldrbeq.w	r4, [ip]
    d52c:	46a8      	mov	r8, r5
    d52e:	bf08      	it	eq
    d530:	f100 0c02 	addeq.w	ip, r0, #2
    d534:	e7c8      	b.n	d4c8 <_strtol_l.isra.0+0x28>
    d536:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
    d53a:	2d19      	cmp	r5, #25
    d53c:	d801      	bhi.n	d542 <_strtol_l.isra.0+0xa2>
    d53e:	3c37      	subs	r4, #55	; 0x37
    d540:	e7e1      	b.n	d506 <_strtol_l.isra.0+0x66>
    d542:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
    d546:	2d19      	cmp	r5, #25
    d548:	d804      	bhi.n	d554 <_strtol_l.isra.0+0xb4>
    d54a:	3c57      	subs	r4, #87	; 0x57
    d54c:	e7db      	b.n	d506 <_strtol_l.isra.0+0x66>
    d54e:	f04f 36ff 	mov.w	r6, #4294967295
    d552:	e7e4      	b.n	d51e <_strtol_l.isra.0+0x7e>
    d554:	1c73      	adds	r3, r6, #1
    d556:	d106      	bne.n	d566 <_strtol_l.isra.0+0xc6>
    d558:	2322      	movs	r3, #34	; 0x22
    d55a:	f8ce 3000 	str.w	r3, [lr]
    d55e:	4638      	mov	r0, r7
    d560:	b942      	cbnz	r2, d574 <_strtol_l.isra.0+0xd4>
    d562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d566:	f1b8 0f00 	cmp.w	r8, #0
    d56a:	d000      	beq.n	d56e <_strtol_l.isra.0+0xce>
    d56c:	4240      	negs	r0, r0
    d56e:	2a00      	cmp	r2, #0
    d570:	d0f7      	beq.n	d562 <_strtol_l.isra.0+0xc2>
    d572:	b10e      	cbz	r6, d578 <_strtol_l.isra.0+0xd8>
    d574:	f10c 31ff 	add.w	r1, ip, #4294967295
    d578:	6011      	str	r1, [r2, #0]
    d57a:	e7f2      	b.n	d562 <_strtol_l.isra.0+0xc2>
    d57c:	2430      	movs	r4, #48	; 0x30
    d57e:	2b00      	cmp	r3, #0
    d580:	d1b3      	bne.n	d4ea <_strtol_l.isra.0+0x4a>
    d582:	2308      	movs	r3, #8
    d584:	e7b1      	b.n	d4ea <_strtol_l.isra.0+0x4a>
    d586:	2c30      	cmp	r4, #48	; 0x30
    d588:	d0a4      	beq.n	d4d4 <_strtol_l.isra.0+0x34>
    d58a:	230a      	movs	r3, #10
    d58c:	e7ad      	b.n	d4ea <_strtol_l.isra.0+0x4a>
    d58e:	bf00      	nop
    d590:	0001f954 	.word	0x0001f954

0000d594 <_strtoul_l.isra.0>:
    d594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d598:	4e3b      	ldr	r6, [pc, #236]	; (d688 <_strtoul_l.isra.0+0xf4>)
    d59a:	4686      	mov	lr, r0
    d59c:	468c      	mov	ip, r1
    d59e:	4660      	mov	r0, ip
    d5a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
    d5a4:	5da5      	ldrb	r5, [r4, r6]
    d5a6:	f015 0508 	ands.w	r5, r5, #8
    d5aa:	d1f8      	bne.n	d59e <_strtoul_l.isra.0+0xa>
    d5ac:	2c2d      	cmp	r4, #45	; 0x2d
    d5ae:	d134      	bne.n	d61a <_strtoul_l.isra.0+0x86>
    d5b0:	f89c 4000 	ldrb.w	r4, [ip]
    d5b4:	f04f 0801 	mov.w	r8, #1
    d5b8:	f100 0c02 	add.w	ip, r0, #2
    d5bc:	2b00      	cmp	r3, #0
    d5be:	d05e      	beq.n	d67e <_strtoul_l.isra.0+0xea>
    d5c0:	2b10      	cmp	r3, #16
    d5c2:	d10c      	bne.n	d5de <_strtoul_l.isra.0+0x4a>
    d5c4:	2c30      	cmp	r4, #48	; 0x30
    d5c6:	d10a      	bne.n	d5de <_strtoul_l.isra.0+0x4a>
    d5c8:	f89c 0000 	ldrb.w	r0, [ip]
    d5cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    d5d0:	2858      	cmp	r0, #88	; 0x58
    d5d2:	d14f      	bne.n	d674 <_strtoul_l.isra.0+0xe0>
    d5d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
    d5d8:	2310      	movs	r3, #16
    d5da:	f10c 0c02 	add.w	ip, ip, #2
    d5de:	f04f 37ff 	mov.w	r7, #4294967295
    d5e2:	2500      	movs	r5, #0
    d5e4:	fbb7 f7f3 	udiv	r7, r7, r3
    d5e8:	fb03 f907 	mul.w	r9, r3, r7
    d5ec:	ea6f 0909 	mvn.w	r9, r9
    d5f0:	4628      	mov	r0, r5
    d5f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    d5f6:	2e09      	cmp	r6, #9
    d5f8:	d818      	bhi.n	d62c <_strtoul_l.isra.0+0x98>
    d5fa:	4634      	mov	r4, r6
    d5fc:	42a3      	cmp	r3, r4
    d5fe:	dd24      	ble.n	d64a <_strtoul_l.isra.0+0xb6>
    d600:	2d00      	cmp	r5, #0
    d602:	db1f      	blt.n	d644 <_strtoul_l.isra.0+0xb0>
    d604:	4287      	cmp	r7, r0
    d606:	d31d      	bcc.n	d644 <_strtoul_l.isra.0+0xb0>
    d608:	d101      	bne.n	d60e <_strtoul_l.isra.0+0x7a>
    d60a:	45a1      	cmp	r9, r4
    d60c:	db1a      	blt.n	d644 <_strtoul_l.isra.0+0xb0>
    d60e:	fb00 4003 	mla	r0, r0, r3, r4
    d612:	2501      	movs	r5, #1
    d614:	f81c 4b01 	ldrb.w	r4, [ip], #1
    d618:	e7eb      	b.n	d5f2 <_strtoul_l.isra.0+0x5e>
    d61a:	2c2b      	cmp	r4, #43	; 0x2b
    d61c:	bf08      	it	eq
    d61e:	f89c 4000 	ldrbeq.w	r4, [ip]
    d622:	46a8      	mov	r8, r5
    d624:	bf08      	it	eq
    d626:	f100 0c02 	addeq.w	ip, r0, #2
    d62a:	e7c7      	b.n	d5bc <_strtoul_l.isra.0+0x28>
    d62c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
    d630:	2e19      	cmp	r6, #25
    d632:	d801      	bhi.n	d638 <_strtoul_l.isra.0+0xa4>
    d634:	3c37      	subs	r4, #55	; 0x37
    d636:	e7e1      	b.n	d5fc <_strtoul_l.isra.0+0x68>
    d638:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
    d63c:	2e19      	cmp	r6, #25
    d63e:	d804      	bhi.n	d64a <_strtoul_l.isra.0+0xb6>
    d640:	3c57      	subs	r4, #87	; 0x57
    d642:	e7db      	b.n	d5fc <_strtoul_l.isra.0+0x68>
    d644:	f04f 35ff 	mov.w	r5, #4294967295
    d648:	e7e4      	b.n	d614 <_strtoul_l.isra.0+0x80>
    d64a:	2d00      	cmp	r5, #0
    d64c:	da07      	bge.n	d65e <_strtoul_l.isra.0+0xca>
    d64e:	2322      	movs	r3, #34	; 0x22
    d650:	f8ce 3000 	str.w	r3, [lr]
    d654:	f04f 30ff 	mov.w	r0, #4294967295
    d658:	b942      	cbnz	r2, d66c <_strtoul_l.isra.0+0xd8>
    d65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d65e:	f1b8 0f00 	cmp.w	r8, #0
    d662:	d000      	beq.n	d666 <_strtoul_l.isra.0+0xd2>
    d664:	4240      	negs	r0, r0
    d666:	2a00      	cmp	r2, #0
    d668:	d0f7      	beq.n	d65a <_strtoul_l.isra.0+0xc6>
    d66a:	b10d      	cbz	r5, d670 <_strtoul_l.isra.0+0xdc>
    d66c:	f10c 31ff 	add.w	r1, ip, #4294967295
    d670:	6011      	str	r1, [r2, #0]
    d672:	e7f2      	b.n	d65a <_strtoul_l.isra.0+0xc6>
    d674:	2430      	movs	r4, #48	; 0x30
    d676:	2b00      	cmp	r3, #0
    d678:	d1b1      	bne.n	d5de <_strtoul_l.isra.0+0x4a>
    d67a:	2308      	movs	r3, #8
    d67c:	e7af      	b.n	d5de <_strtoul_l.isra.0+0x4a>
    d67e:	2c30      	cmp	r4, #48	; 0x30
    d680:	d0a2      	beq.n	d5c8 <_strtoul_l.isra.0+0x34>
    d682:	230a      	movs	r3, #10
    d684:	e7ab      	b.n	d5de <_strtoul_l.isra.0+0x4a>
    d686:	bf00      	nop
    d688:	0001f954 	.word	0x0001f954

0000d68c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    d68c:	4770      	bx	lr

0000d68e <svr_getAttributeAccess>:
}
    d68e:	2000      	movs	r0, #0
    d690:	4770      	bx	lr

0000d692 <svr_getMethodAccess>:
    d692:	2000      	movs	r0, #0
    d694:	4770      	bx	lr

0000d696 <svr_connected>:
}
    d696:	2000      	movs	r0, #0
    d698:	4770      	bx	lr

0000d69a <svr_isTarget>:
}
    d69a:	2000      	movs	r0, #0
    d69c:	4770      	bx	lr

0000d69e <ba_init>:

//Initialize bit array.
void ba_init(bitArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
    d69e:	2300      	movs	r3, #0
    arr->capacity = 0;
    d6a0:	e9c0 3300 	strd	r3, r3, [r0]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
    arr->size = 0;
}
    d6a4:	4770      	bx	lr

0000d6a6 <ba_attach>:
    unsigned char* value,
    uint16_t count,
    uint16_t capacity)
{
    arr->data = value;
    arr->capacity = (uint16_t)(0x8000 | capacity);
    d6a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    d6aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    arr->data = value;
    d6ae:	6001      	str	r1, [r0, #0]
    arr->capacity = (uint16_t)(0x8000 | capacity);
    d6b0:	8083      	strh	r3, [r0, #4]
    arr->size = count;
    d6b2:	80c2      	strh	r2, [r0, #6]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
}
    d6b4:	4770      	bx	lr

0000d6b6 <ba_capacity>:

//Allocate new size for the array in bytes.
int ba_capacity(bitArray* arr, uint16_t capacity)
{
#ifndef DLMS_IGNORE_MALLOC
    if (!ba_isAttached(arr))
    d6b6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    d6ba:	2b00      	cmp	r3, #0
{
    d6bc:	b570      	push	{r4, r5, r6, lr}
    d6be:	4605      	mov	r5, r0
    d6c0:	460c      	mov	r4, r1
    if (!ba_isAttached(arr))
    d6c2:	db1b      	blt.n	d6fc <ba_capacity+0x46>
    {
        arr->capacity = capacity;
    d6c4:	6806      	ldr	r6, [r0, #0]
    d6c6:	8081      	strh	r1, [r0, #4]
        if (capacity == 0)
    d6c8:	b931      	cbnz	r1, d6d8 <ba_capacity+0x22>
        {
            if (arr->data != NULL)
    d6ca:	b11e      	cbz	r6, d6d4 <ba_capacity+0x1e>
            {
                gxfree(arr->data);
    d6cc:	4630      	mov	r0, r6
    d6ce:	f7ff f8d1 	bl	c874 <free>
                arr->data = NULL;
    d6d2:	602c      	str	r4, [r5, #0]
#endif //DLMS_IGNORE_MALLOC
    if (ba_getCapacity(arr) < capacity)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
    d6d4:	2000      	movs	r0, #0
    d6d6:	e00a      	b.n	d6ee <ba_capacity+0x38>
            if (arr->data == NULL)
    d6d8:	4608      	mov	r0, r1
    d6da:	f7f3 ff4f 	bl	157c <ba_getByteCount>
    d6de:	4601      	mov	r1, r0
    d6e0:	b936      	cbnz	r6, d6f0 <ba_capacity+0x3a>
                arr->data = (unsigned char*)gxmalloc(ba_getByteCount(arr->capacity));
    d6e2:	f7ff f8bf 	bl	c864 <malloc>
    d6e6:	6028      	str	r0, [r5, #0]
                if (arr->data == NULL)
    d6e8:	b940      	cbnz	r0, d6fc <ba_capacity+0x46>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    d6ea:	f44f 7082 	mov.w	r0, #260	; 0x104
}
    d6ee:	bd70      	pop	{r4, r5, r6, pc}
                unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, ba_getByteCount(arr->capacity));
    d6f0:	4630      	mov	r0, r6
    d6f2:	f7ff f96f 	bl	c9d4 <realloc>
                if (tmp == NULL)
    d6f6:	2800      	cmp	r0, #0
    d6f8:	d0f7      	beq.n	d6ea <ba_capacity+0x34>
                arr->data = tmp;
    d6fa:	6028      	str	r0, [r5, #0]
    return arr->capacity & 0x7FFF;
    d6fc:	88ab      	ldrh	r3, [r5, #4]
    if (ba_getCapacity(arr) < capacity)
    d6fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d702:	429c      	cmp	r4, r3
    d704:	d9e6      	bls.n	d6d4 <ba_capacity+0x1e>
    d706:	e7f0      	b.n	d6ea <ba_capacity+0x34>

0000d708 <ba_setByIndex>:
    return ret;
}

//Set bit by index.
int ba_setByIndex(bitArray* arr, uint16_t index, unsigned char item)
{
    d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d70a:	4607      	mov	r7, r0
    d70c:	460e      	mov	r6, r1
    d70e:	4615      	mov	r5, r2
    return (arr->capacity & 0x8000) == 0x8000;
    d710:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    d714:	88bb      	ldrh	r3, [r7, #4]
    int ret;
    unsigned char newItem = 0;
    int byteIndex;
    item = item == 0 ? 0 : 1;
    d716:	3d00      	subs	r5, #0
    d718:	bf18      	it	ne
    d71a:	2501      	movne	r5, #1
    if (!ba_isAttached(arr))
    d71c:	2900      	cmp	r1, #0
    d71e:	db20      	blt.n	d762 <ba_setByIndex+0x5a>
    {
        if (index >= arr->capacity)
    d720:	42b3      	cmp	r3, r6
    d722:	d81e      	bhi.n	d762 <ba_setByIndex+0x5a>
        {
            if ((ret = ba_capacity(arr, arr->capacity + BIT_ARRAY_CAPACITY)) != 0)
    d724:	3108      	adds	r1, #8
    d726:	b289      	uxth	r1, r1
    d728:	4638      	mov	r0, r7
    d72a:	f7ff ffc4 	bl	d6b6 <ba_capacity>
    d72e:	b9b8      	cbnz	r0, d760 <ba_setByIndex+0x58>
            {
                return ret;
            }
            //If we are adding a bit to the higher than next byte.
            if (index >= arr->capacity)
    d730:	88bb      	ldrh	r3, [r7, #4]
    d732:	42b3      	cmp	r3, r6
    d734:	d9ec      	bls.n	d710 <ba_setByIndex+0x8>
            {
                return ba_setByIndex(arr, index, item);
            }
            newItem = 1;
    d736:	2401      	movs	r4, #1
        }
    }
    if (index >= arr->capacity)
    d738:	88bb      	ldrh	r3, [r7, #4]
    d73a:	42b3      	cmp	r3, r6
    d73c:	d91c      	bls.n	d778 <ba_setByIndex+0x70>
    double d = bitCount;
    d73e:	4630      	mov	r0, r6
    d740:	f7f2 fe80 	bl	444 <__aeabi_i2d>
    d /= 8;
    d744:	2200      	movs	r2, #0
    d746:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    d74a:	f7f2 fee5 	bl	518 <__aeabi_dmul>
    return (int)d;
    d74e:	f7f3 f8f5 	bl	93c <__aeabi_d2iz>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    byteIndex = getByteIndex(index);
    if (index % 8 == 0 || newItem)
    d752:	0772      	lsls	r2, r6, #29
    d754:	683b      	ldr	r3, [r7, #0]
    d756:	d000      	beq.n	d75a <ba_setByIndex+0x52>
    d758:	b12c      	cbz	r4, d766 <ba_setByIndex+0x5e>
    {
        arr->data[byteIndex] = (unsigned char)(item << 7);
    d75a:	01ed      	lsls	r5, r5, #7
    d75c:	541d      	strb	r5, [r3, r0]
    }
    else
    {
        arr->data[byteIndex] |= (item << (7 - (index % 8)));
    }
    return 0;
    d75e:	2000      	movs	r0, #0
}
    d760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    unsigned char newItem = 0;
    d762:	2400      	movs	r4, #0
    d764:	e7e8      	b.n	d738 <ba_setByIndex+0x30>
        arr->data[byteIndex] |= (item << (7 - (index % 8)));
    d766:	43f6      	mvns	r6, r6
    d768:	f006 0607 	and.w	r6, r6, #7
    d76c:	fa05 f606 	lsl.w	r6, r5, r6
    d770:	5c1d      	ldrb	r5, [r3, r0]
    d772:	432e      	orrs	r6, r5
    d774:	541e      	strb	r6, [r3, r0]
    d776:	e7f2      	b.n	d75e <ba_setByIndex+0x56>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d778:	f44f 7082 	mov.w	r0, #260	; 0x104
    d77c:	e7f0      	b.n	d760 <ba_setByIndex+0x58>

0000d77e <ba_clear>:
    }
    return ret;
}

void ba_clear(bitArray* arr)
{
    d77e:	b510      	push	{r4, lr}
    d780:	4604      	mov	r4, r0
#ifndef DLMS_IGNORE_MALLOC
    if (arr->data != NULL)
    d782:	6800      	ldr	r0, [r0, #0]
    d784:	b118      	cbz	r0, d78e <ba_clear+0x10>
    {
        gxfree(arr->data);
    d786:	f7ff f875 	bl	c874 <free>
        arr->data = NULL;
    d78a:	2300      	movs	r3, #0
    d78c:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
    d78e:	2300      	movs	r3, #0
    d790:	6063      	str	r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
}
    d792:	bd10      	pop	{r4, pc}

0000d794 <ba_copy>:
{
    d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d796:	4614      	mov	r4, r2
    d798:	4606      	mov	r6, r0
    d79a:	460f      	mov	r7, r1
    ba_clear(target);
    d79c:	f7ff ffef 	bl	d77e <ba_clear>
    if (count != 0)
    d7a0:	b184      	cbz	r4, d7c4 <ba_copy+0x30>
        if ((ret = ba_capacity(target, count)) == 0)
    d7a2:	4621      	mov	r1, r4
    d7a4:	4630      	mov	r0, r6
    d7a6:	f7ff ff86 	bl	d6b6 <ba_capacity>
    d7aa:	4605      	mov	r5, r0
    d7ac:	b940      	cbnz	r0, d7c0 <ba_copy+0x2c>
            memcpy(target->data, source, ba_getByteCount(count));
    d7ae:	4620      	mov	r0, r4
    d7b0:	f7f3 fee4 	bl	157c <ba_getByteCount>
    d7b4:	4639      	mov	r1, r7
    d7b6:	4602      	mov	r2, r0
    d7b8:	6830      	ldr	r0, [r6, #0]
    d7ba:	f010 f869 	bl	1d890 <memcpy>
            target->size = count;
    d7be:	80f4      	strh	r4, [r6, #6]
}
    d7c0:	4628      	mov	r0, r5
    d7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int ret = 0;
    d7c4:	4625      	mov	r5, r4
    return ret;
    d7c6:	e7fb      	b.n	d7c0 <ba_copy+0x2c>

0000d7c8 <ba_getByIndex>:
#endif //GX_DLMS_MICROCONTROLLER

int ba_getByIndex(bitArray* arr, int index, unsigned char* value)
{
    char ch;
    if (index >= arr->size)
    d7c8:	88c3      	ldrh	r3, [r0, #6]
    d7ca:	428b      	cmp	r3, r1
{
    d7cc:	b570      	push	{r4, r5, r6, lr}
    d7ce:	4605      	mov	r5, r0
    d7d0:	460c      	mov	r4, r1
    d7d2:	4616      	mov	r6, r2
    if (index >= arr->size)
    d7d4:	dd1b      	ble.n	d80e <ba_getByIndex+0x46>
    double d = bitCount;
    d7d6:	4608      	mov	r0, r1
    d7d8:	f7f2 fe34 	bl	444 <__aeabi_i2d>
    d /= 8;
    d7dc:	2200      	movs	r2, #0
    d7de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    d7e2:	f7f2 fe99 	bl	518 <__aeabi_dmul>
    return (int)d;
    d7e6:	f7f3 f8a9 	bl	93c <__aeabi_d2iz>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    ch = arr->data[getByteIndex(index)];
    *value = (ch & (1 << (7 - (index % 8)))) != 0;
    d7ea:	4262      	negs	r2, r4
    ch = arr->data[getByteIndex(index)];
    d7ec:	682b      	ldr	r3, [r5, #0]
    *value = (ch & (1 << (7 - (index % 8)))) != 0;
    d7ee:	f002 0207 	and.w	r2, r2, #7
    d7f2:	5c1b      	ldrb	r3, [r3, r0]
    d7f4:	f004 0407 	and.w	r4, r4, #7
    d7f8:	bf58      	it	pl
    d7fa:	4254      	negpl	r4, r2
    d7fc:	f1c4 0407 	rsb	r4, r4, #7
    d800:	fa43 f404 	asr.w	r4, r3, r4
    d804:	f004 0401 	and.w	r4, r4, #1
    d808:	7034      	strb	r4, [r6, #0]
    return 0;
    d80a:	2000      	movs	r0, #0
}
    d80c:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    d80e:	f44f 7082 	mov.w	r0, #260	; 0x104
    d812:	e7fb      	b.n	d80c <ba_getByIndex+0x44>

0000d814 <ba_toInteger>:

int ba_toInteger(bitArray* arr, uint32_t* value)
{
    d814:	b573      	push	{r0, r1, r4, r5, r6, lr}
    *value = 0;
    d816:	2400      	movs	r4, #0
{
    d818:	4606      	mov	r6, r0
    d81a:	460d      	mov	r5, r1
    *value = 0;
    d81c:	600c      	str	r4, [r1, #0]
    unsigned char ch;
    int pos, ret;
    for (pos = 0; pos != arr->size; ++pos)
    d81e:	88f3      	ldrh	r3, [r6, #6]
    d820:	42a3      	cmp	r3, r4
    d822:	d102      	bne.n	d82a <ba_toInteger+0x16>
        {
            return ret;
        }
        *value |= ch << pos;
    }
    return 0;
    d824:	2000      	movs	r0, #0
}
    d826:	b002      	add	sp, #8
    d828:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = ba_getByIndex(arr, pos, &ch)) != 0)
    d82a:	f10d 0207 	add.w	r2, sp, #7
    d82e:	4621      	mov	r1, r4
    d830:	4630      	mov	r0, r6
    d832:	f7ff ffc9 	bl	d7c8 <ba_getByIndex>
    d836:	2800      	cmp	r0, #0
    d838:	d1f5      	bne.n	d826 <ba_toInteger+0x12>
        *value |= ch << pos;
    d83a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d83e:	fa03 f204 	lsl.w	r2, r3, r4
    d842:	682b      	ldr	r3, [r5, #0]
    d844:	4313      	orrs	r3, r2
    d846:	602b      	str	r3, [r5, #0]
    for (pos = 0; pos != arr->size; ++pos)
    d848:	3401      	adds	r4, #1
    d84a:	e7e8      	b.n	d81e <ba_toInteger+0xa>

0000d84c <ba_toString>:

#ifndef DLMS_IGNORE_MALLOC
char* ba_toString(bitArray* arr)
{
    d84c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d84e:	4606      	mov	r6, r0
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    int pos, ret;
#else
    int pos;
#endif
    char* buff = (char*)gxmalloc(arr->size + 1);
    d850:	88c0      	ldrh	r0, [r0, #6]
    d852:	3001      	adds	r0, #1
    d854:	f7ff f806 	bl	c864 <malloc>
    for (pos = 0; pos != arr->size; ++pos)
    d858:	2400      	movs	r4, #0
    char* buff = (char*)gxmalloc(arr->size + 1);
    d85a:	4605      	mov	r5, r0
    for (pos = 0; pos != arr->size; ++pos)
    d85c:	88f3      	ldrh	r3, [r6, #6]
    d85e:	42a3      	cmp	r3, r4
    d860:	d104      	bne.n	d86c <ba_toString+0x20>
#else
        ba_getByIndex(arr, pos, &ch);
#endif
        buff[pos] = ch == 0 ? '0' : '1';
    }
    *(buff + arr->size) = 0;
    d862:	2300      	movs	r3, #0
    return buff;
}
    d864:	4628      	mov	r0, r5
    *(buff + arr->size) = 0;
    d866:	552b      	strb	r3, [r5, r4]
}
    d868:	b002      	add	sp, #8
    d86a:	bd70      	pop	{r4, r5, r6, pc}
        ba_getByIndex(arr, pos, &ch);
    d86c:	4621      	mov	r1, r4
    d86e:	f10d 0207 	add.w	r2, sp, #7
    d872:	4630      	mov	r0, r6
    d874:	f7ff ffa8 	bl	d7c8 <ba_getByIndex>
        buff[pos] = ch == 0 ? '0' : '1';
    d878:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d87c:	2b00      	cmp	r3, #0
    d87e:	bf0c      	ite	eq
    d880:	2330      	moveq	r3, #48	; 0x30
    d882:	2331      	movne	r3, #49	; 0x31
    d884:	552b      	strb	r3, [r5, r4]
    for (pos = 0; pos != arr->size; ++pos)
    d886:	3401      	adds	r4, #1
    d888:	e7e8      	b.n	d85c <ba_toString+0x10>

0000d88a <bb_isAttached>:
#include "../include/bytebuffer.h"
#include "../include/helpers.h"

char bb_isAttached(gxByteBuffer* arr)
{
    if (arr == NULL)
    d88a:	b108      	cbz	r0, d890 <bb_isAttached+0x6>
    }
#if defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
    //If byte buffer is attached.
    return (arr->capacity & 0x80000000) == 0x80000000;
#else
    return (arr->capacity & 0x8000) == 0x8000;
    d88c:	8880      	ldrh	r0, [r0, #4]
    d88e:	0bc0      	lsrs	r0, r0, #15
#endif
}
    d890:	4770      	bx	lr

0000d892 <bb_available>:
uint32_t bb_available(gxByteBuffer* arr)
#else
uint16_t bb_available(gxByteBuffer* arr)
#endif
{
    if (arr == NULL)
    d892:	b118      	cbz	r0, d89c <bb_available+0xa>
    {
        return 0;
    }
    return arr->size - arr->position;
    d894:	88c3      	ldrh	r3, [r0, #6]
    d896:	8900      	ldrh	r0, [r0, #8]
    d898:	1a18      	subs	r0, r3, r0
    d89a:	b280      	uxth	r0, r0
}
    d89c:	4770      	bx	lr

0000d89e <bb_getCapacity>:
{
#if defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER)&& (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
    //If byte buffer is attached.
    return arr->capacity & 0x7FFFFFFF;
#else
    return arr->capacity & 0x7FFF;
    d89e:	8880      	ldrh	r0, [r0, #4]
#endif
}
    d8a0:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d8a4:	4770      	bx	lr

0000d8a6 <bb_size>:
uint32_t bb_size(gxByteBuffer* arr)
#else
uint16_t bb_size(gxByteBuffer* arr)
#endif
{
    return arr != NULL ? arr->size : 0;
    d8a6:	b100      	cbz	r0, d8aa <bb_size+0x4>
    d8a8:	88c0      	ldrh	r0, [r0, #6]
}
    d8aa:	4770      	bx	lr

0000d8ac <bb_init>:

int BYTE_BUFFER_INIT(
    gxByteBuffer* arr)
{
    d8ac:	4603      	mov	r3, r0
    arr->capacity = 0;
    arr->data = NULL;
    d8ae:	2000      	movs	r0, #0
    arr->capacity = 0;
    d8b0:	e9c3 0000 	strd	r0, r0, [r3]
    arr->position = 0;
    d8b4:	8118      	strh	r0, [r3, #8]
    arr->size = 0;
    return 0;
}
    d8b6:	4770      	bx	lr

0000d8b8 <bb_capacity>:
#else
int bb_capacity(
    gxByteBuffer* arr,
    uint16_t capacity)
#endif
{
    d8b8:	b538      	push	{r3, r4, r5, lr}
    d8ba:	4604      	mov	r4, r0
    d8bc:	460d      	mov	r5, r1
#ifndef DLMS_IGNORE_MALLOC
    //Capacity can't change if it's attached.
    if (!bb_isAttached(arr))
    d8be:	f7ff ffe4 	bl	d88a <bb_isAttached>
    d8c2:	b9d8      	cbnz	r0, d8fc <bb_capacity+0x44>
    {
        if (capacity == 0)
    d8c4:	b931      	cbnz	r1, d8d4 <bb_capacity+0x1c>
        {
            if (arr->data != NULL)
    d8c6:	6820      	ldr	r0, [r4, #0]
    d8c8:	b1b8      	cbz	r0, d8fa <bb_capacity+0x42>
            {
                gxfree(arr->data);
    d8ca:	f7fe ffd3 	bl	c874 <free>
                arr->data = NULL;
    d8ce:	6025      	str	r5, [r4, #0]
                }
                arr->data = tmp;
            }
            if (arr->size > capacity)
            {
                arr->size = capacity;
    d8d0:	80e5      	strh	r5, [r4, #6]
    d8d2:	e012      	b.n	d8fa <bb_capacity+0x42>
            if (arr->capacity == 0)
    d8d4:	88a3      	ldrh	r3, [r4, #4]
    d8d6:	b93b      	cbnz	r3, d8e8 <bb_capacity+0x30>
                arr->data = (unsigned char*)gxmalloc(capacity);
    d8d8:	4608      	mov	r0, r1
    d8da:	f7fe ffc3 	bl	c864 <malloc>
    d8de:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
    d8e0:	b940      	cbnz	r0, d8f4 <bb_capacity+0x3c>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    d8e2:	f44f 7082 	mov.w	r0, #260	; 0x104
    if (bb_getCapacity(arr) < capacity)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return DLMS_ERROR_CODE_OK;
}
    d8e6:	bd38      	pop	{r3, r4, r5, pc}
                unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, capacity);
    d8e8:	6820      	ldr	r0, [r4, #0]
    d8ea:	f7ff f873 	bl	c9d4 <realloc>
                if (tmp == NULL)
    d8ee:	2800      	cmp	r0, #0
    d8f0:	d0f7      	beq.n	d8e2 <bb_capacity+0x2a>
                arr->data = tmp;
    d8f2:	6020      	str	r0, [r4, #0]
            if (arr->size > capacity)
    d8f4:	88e3      	ldrh	r3, [r4, #6]
    d8f6:	42ab      	cmp	r3, r5
    d8f8:	d8ea      	bhi.n	d8d0 <bb_capacity+0x18>
        arr->capacity = capacity;
    d8fa:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
    d8fc:	88a3      	ldrh	r3, [r4, #4]
    if (bb_getCapacity(arr) < capacity)
    d8fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d902:	42ab      	cmp	r3, r5
    d904:	d3ed      	bcc.n	d8e2 <bb_capacity+0x2a>
    return DLMS_ERROR_CODE_OK;
    d906:	2000      	movs	r0, #0
    d908:	e7ed      	b.n	d8e6 <bb_capacity+0x2e>

0000d90a <bb_allocate>:
int bb_allocate(
    gxByteBuffer* arr,
    uint16_t index,
    uint16_t dataSize)
#endif
{
    d90a:	b570      	push	{r4, r5, r6, lr}
    d90c:	4604      	mov	r4, r0
    d90e:	460e      	mov	r6, r1
    d910:	4615      	mov	r5, r2
#ifndef DLMS_IGNORE_MALLOC
    if (!bb_isAttached(arr) && (arr->capacity == 0 || index + dataSize > arr->capacity))
    d912:	f7ff ffba 	bl	d88a <bb_isAttached>
    d916:	b920      	cbnz	r0, d922 <bb_allocate+0x18>
    d918:	88a3      	ldrh	r3, [r4, #4]
    d91a:	b1a3      	cbz	r3, d946 <bb_allocate+0x3c>
    d91c:	188a      	adds	r2, r1, r2
    d91e:	429a      	cmp	r2, r3
    d920:	dc0f      	bgt.n	d942 <bb_allocate+0x38>
    return arr->capacity & 0x7FFF;
    d922:	88a3      	ldrh	r3, [r4, #4]
            }
            arr->data = tmp;
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (bb_getCapacity(arr) < index + dataSize)
    d924:	4435      	add	r5, r6
    d926:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d92a:	42ab      	cmp	r3, r5
    d92c:	db15      	blt.n	d95a <bb_allocate+0x50>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
    d92e:	2000      	movs	r0, #0
    d930:	e015      	b.n	d95e <bb_allocate+0x54>
            arr->capacity += VECTOR_CAPACITY;
    d932:	3332      	adds	r3, #50	; 0x32
    d934:	80a3      	strh	r3, [r4, #4]
        if (empty)
    d936:	e00a      	b.n	d94e <bb_allocate+0x44>
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    d938:	4628      	mov	r0, r5
    d93a:	f7fe ff93 	bl	c864 <malloc>
            arr->data = tmp;
    d93e:	6020      	str	r0, [r4, #0]
    d940:	e7ef      	b.n	d922 <bb_allocate+0x18>
        if (dataSize > VECTOR_CAPACITY || arr->capacity == 0)
    d942:	2d32      	cmp	r5, #50	; 0x32
    d944:	d9f5      	bls.n	d932 <bb_allocate+0x28>
            arr->capacity += dataSize;
    d946:	18ea      	adds	r2, r5, r3
    d948:	80a2      	strh	r2, [r4, #4]
        if (empty)
    d94a:	2b00      	cmp	r3, #0
    d94c:	d0f4      	beq.n	d938 <bb_allocate+0x2e>
            unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    d94e:	88a1      	ldrh	r1, [r4, #4]
    d950:	6820      	ldr	r0, [r4, #0]
    d952:	f7ff f83f 	bl	c9d4 <realloc>
            if (tmp == NULL)
    d956:	2800      	cmp	r0, #0
    d958:	d1f1      	bne.n	d93e <bb_allocate+0x34>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    d95a:	f44f 7082 	mov.w	r0, #260	; 0x104
}
    d95e:	bd70      	pop	{r4, r5, r6, pc}

0000d960 <bb_setUInt8ByIndex>:
int bb_setUInt8ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    unsigned char item)
#endif
{
    d960:	b570      	push	{r4, r5, r6, lr}
    d962:	460d      	mov	r5, r1
    d964:	4616      	mov	r6, r2
    if (arr == NULL)
    d966:	4604      	mov	r4, r0
    d968:	b130      	cbz	r0, d978 <bb_setUInt8ByIndex+0x18>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    int ret = bb_allocate(arr, index, 1);
    d96a:	2201      	movs	r2, #1
    d96c:	f7ff ffcd 	bl	d90a <bb_allocate>
    if (ret == 0)
    d970:	b908      	cbnz	r0, d976 <bb_setUInt8ByIndex+0x16>
    {
        arr->data[index] = item;
    d972:	6823      	ldr	r3, [r4, #0]
    d974:	555e      	strb	r6, [r3, r5]
    }
    return ret;
}
    d976:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    d978:	f44f 7081 	mov.w	r0, #258	; 0x102
    d97c:	e7fb      	b.n	d976 <bb_setUInt8ByIndex+0x16>

0000d97e <bb_setUInt8>:
{
    d97e:	b510      	push	{r4, lr}
    d980:	460a      	mov	r2, r1
    return arr != NULL ? arr->size : 0;
    d982:	4604      	mov	r4, r0
    d984:	b140      	cbz	r0, d998 <bb_setUInt8+0x1a>
    d986:	88c1      	ldrh	r1, [r0, #6]
    int ret = bb_setUInt8ByIndex(arr, bb_size(arr), item);
    d988:	4620      	mov	r0, r4
    d98a:	f7ff ffe9 	bl	d960 <bb_setUInt8ByIndex>
    if (ret == 0)
    d98e:	b910      	cbnz	r0, d996 <bb_setUInt8+0x18>
        ++arr->size;
    d990:	88e3      	ldrh	r3, [r4, #6]
    d992:	3301      	adds	r3, #1
    d994:	80e3      	strh	r3, [r4, #6]
}
    d996:	bd10      	pop	{r4, pc}
    return arr != NULL ? arr->size : 0;
    d998:	4601      	mov	r1, r0
    d99a:	e7f5      	b.n	d988 <bb_setUInt8+0xa>

0000d99c <bb_setUInt16ByIndex>:
int bb_setUInt16ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    uint16_t item)
#endif
{
    d99c:	b570      	push	{r4, r5, r6, lr}
    d99e:	460c      	mov	r4, r1
    int ret = 0;
    if (index + 2 > arr->size)
    d9a0:	88c1      	ldrh	r1, [r0, #6]
    d9a2:	1ca3      	adds	r3, r4, #2
    d9a4:	428b      	cmp	r3, r1
{
    d9a6:	4605      	mov	r5, r0
    d9a8:	4616      	mov	r6, r2
    if (index + 2 > arr->size)
    d9aa:	dd02      	ble.n	d9b2 <bb_setUInt16ByIndex+0x16>
    {
        bb_allocate(arr, arr->size, 2);
    d9ac:	2202      	movs	r2, #2
    d9ae:	f7ff ffac 	bl	d90a <bb_allocate>
    }
    if (ret == 0)
    {
        arr->data[index] = (item >> 8) & 0xFF;
    d9b2:	682b      	ldr	r3, [r5, #0]
    d9b4:	0a32      	lsrs	r2, r6, #8
    d9b6:	551a      	strb	r2, [r3, r4]
        arr->data[index + 1] = item & 0xFF;
    d9b8:	6829      	ldr	r1, [r5, #0]
    d9ba:	440c      	add	r4, r1
    }
    return ret;
}
    d9bc:	2000      	movs	r0, #0
        arr->data[index + 1] = item & 0xFF;
    d9be:	7066      	strb	r6, [r4, #1]
}
    d9c0:	bd70      	pop	{r4, r5, r6, pc}

0000d9c2 <bb_setUInt16>:
{
    d9c2:	b510      	push	{r4, lr}
    d9c4:	460a      	mov	r2, r1
    int ret = bb_setUInt16ByIndex(arr, arr->size, item);
    d9c6:	88c1      	ldrh	r1, [r0, #6]
{
    d9c8:	4604      	mov	r4, r0
    int ret = bb_setUInt16ByIndex(arr, arr->size, item);
    d9ca:	f7ff ffe7 	bl	d99c <bb_setUInt16ByIndex>
    if (ret == 0)
    d9ce:	b910      	cbnz	r0, d9d6 <bb_setUInt16+0x14>
        arr->size += 2;
    d9d0:	88e3      	ldrh	r3, [r4, #6]
    d9d2:	3302      	adds	r3, #2
    d9d4:	80e3      	strh	r3, [r4, #6]
}
    d9d6:	bd10      	pop	{r4, pc}

0000d9d8 <bb_setUInt32ByIndex>:
int bb_setUInt32ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    uint32_t item)
#endif //defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
{
    d9d8:	b570      	push	{r4, r5, r6, lr}
    d9da:	4614      	mov	r4, r2
    int ret = bb_allocate(arr, index, 4);
    d9dc:	2204      	movs	r2, #4
{
    d9de:	4606      	mov	r6, r0
    d9e0:	460d      	mov	r5, r1
    int ret = bb_allocate(arr, index, 4);
    d9e2:	f7ff ff92 	bl	d90a <bb_allocate>
    if (ret == 0)
    d9e6:	b968      	cbnz	r0, da04 <bb_setUInt32ByIndex+0x2c>
    {
        PUT32(arr->data + index, item);
    d9e8:	6833      	ldr	r3, [r6, #0]
    d9ea:	0e22      	lsrs	r2, r4, #24
    d9ec:	555a      	strb	r2, [r3, r5]
    d9ee:	6833      	ldr	r3, [r6, #0]
    d9f0:	442b      	add	r3, r5
    d9f2:	0c22      	lsrs	r2, r4, #16
    d9f4:	705a      	strb	r2, [r3, #1]
    d9f6:	6833      	ldr	r3, [r6, #0]
    d9f8:	442b      	add	r3, r5
    d9fa:	0a22      	lsrs	r2, r4, #8
    d9fc:	709a      	strb	r2, [r3, #2]
    d9fe:	6831      	ldr	r1, [r6, #0]
    da00:	440d      	add	r5, r1
    da02:	70ec      	strb	r4, [r5, #3]
    }
    return ret;
}
    da04:	bd70      	pop	{r4, r5, r6, pc}

0000da06 <bb_setUInt32>:
{
    da06:	b510      	push	{r4, lr}
    da08:	460a      	mov	r2, r1
    int ret = bb_setUInt32ByIndex(arr, arr->size, item);
    da0a:	88c1      	ldrh	r1, [r0, #6]
{
    da0c:	4604      	mov	r4, r0
    int ret = bb_setUInt32ByIndex(arr, arr->size, item);
    da0e:	f7ff ffe3 	bl	d9d8 <bb_setUInt32ByIndex>
    if (ret == 0)
    da12:	b910      	cbnz	r0, da1a <bb_setUInt32+0x14>
        arr->size += 4;
    da14:	88e3      	ldrh	r3, [r4, #6]
    da16:	3304      	adds	r3, #4
    da18:	80e3      	strh	r3, [r4, #6]
}
    da1a:	bd10      	pop	{r4, pc}

0000da1c <bb_setUInt64>:

int bb_setUInt64(
    gxByteBuffer* arr,
    uint64_t item)
{
    da1c:	b570      	push	{r4, r5, r6, lr}
    int ret = bb_allocate(arr, arr->size, 8);
    da1e:	88c1      	ldrh	r1, [r0, #6]
{
    da20:	4616      	mov	r6, r2
    int ret = bb_allocate(arr, arr->size, 8);
    da22:	2208      	movs	r2, #8
{
    da24:	4604      	mov	r4, r0
    da26:	461d      	mov	r5, r3
    int ret = bb_allocate(arr, arr->size, 8);
    da28:	f7ff ff6f 	bl	d90a <bb_allocate>
    if (ret == 0)
    da2c:	bb38      	cbnz	r0, da7e <bb_setUInt64+0x62>
    {
        ((unsigned char*)arr->data)[arr->size + 7] = item & 0xFF;
    da2e:	88e2      	ldrh	r2, [r4, #6]
    da30:	6823      	ldr	r3, [r4, #0]
    da32:	4413      	add	r3, r2
    da34:	71de      	strb	r6, [r3, #7]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 6] = item & 0xFF;
    da36:	88e2      	ldrh	r2, [r4, #6]
    da38:	6823      	ldr	r3, [r4, #0]
    da3a:	4413      	add	r3, r2
        item >>= 8;
    da3c:	0a32      	lsrs	r2, r6, #8
        ((unsigned char*)arr->data)[arr->size + 6] = item & 0xFF;
    da3e:	719a      	strb	r2, [r3, #6]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 5] = item & 0xFF;
    da40:	88e2      	ldrh	r2, [r4, #6]
    da42:	6823      	ldr	r3, [r4, #0]
    da44:	4413      	add	r3, r2
        item >>= 8;
    da46:	0c32      	lsrs	r2, r6, #16
        ((unsigned char*)arr->data)[arr->size + 5] = item & 0xFF;
    da48:	715a      	strb	r2, [r3, #5]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 4] = item & 0xFF;
    da4a:	88e2      	ldrh	r2, [r4, #6]
    da4c:	6823      	ldr	r3, [r4, #0]
    da4e:	4413      	add	r3, r2
        item >>= 8;
    da50:	0e36      	lsrs	r6, r6, #24
        ((unsigned char*)arr->data)[arr->size + 4] = item & 0xFF;
    da52:	711e      	strb	r6, [r3, #4]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 3] = item & 0xFF;
    da54:	88e2      	ldrh	r2, [r4, #6]
    da56:	6823      	ldr	r3, [r4, #0]
    da58:	4413      	add	r3, r2
    da5a:	70dd      	strb	r5, [r3, #3]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 2] = item & 0xFF;
    da5c:	88e2      	ldrh	r2, [r4, #6]
    da5e:	6823      	ldr	r3, [r4, #0]
    da60:	4413      	add	r3, r2
        item >>= 8;
    da62:	0a2a      	lsrs	r2, r5, #8
        ((unsigned char*)arr->data)[arr->size + 2] = item & 0xFF;
    da64:	709a      	strb	r2, [r3, #2]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 1] = item & 0xFF;
    da66:	88e2      	ldrh	r2, [r4, #6]
    da68:	6823      	ldr	r3, [r4, #0]
    da6a:	4413      	add	r3, r2
        item >>= 8;
    da6c:	0c2a      	lsrs	r2, r5, #16
        ((unsigned char*)arr->data)[arr->size + 1] = item & 0xFF;
    da6e:	705a      	strb	r2, [r3, #1]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size] = item & 0xFF;
    da70:	88e3      	ldrh	r3, [r4, #6]
    da72:	6822      	ldr	r2, [r4, #0]
        item >>= 8;
    da74:	0e2d      	lsrs	r5, r5, #24
        ((unsigned char*)arr->data)[arr->size] = item & 0xFF;
    da76:	54d5      	strb	r5, [r2, r3]
        arr->size += 8;
    da78:	88e3      	ldrh	r3, [r4, #6]
    da7a:	3308      	adds	r3, #8
    da7c:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    da7e:	bd70      	pop	{r4, r5, r6, pc}

0000da80 <bb_setFloat>:

#ifndef DLMS_IGNORE_FLOAT32
int bb_setFloat(
    gxByteBuffer* arr,
    float value)
{
    da80:	b538      	push	{r3, r4, r5, lr}
        char b[sizeof(float)];
    } HELPER;

    HELPER tmp;
    tmp.value = value;
    int ret = bb_allocate(arr, arr->size, 4);
    da82:	2204      	movs	r2, #4
{
    da84:	460d      	mov	r5, r1
    int ret = bb_allocate(arr, arr->size, 4);
    da86:	88c1      	ldrh	r1, [r0, #6]
{
    da88:	4604      	mov	r4, r0
    int ret = bb_allocate(arr, arr->size, 4);
    da8a:	f7ff ff3e 	bl	d90a <bb_allocate>
    if (ret == 0)
    da8e:	b9c0      	cbnz	r0, dac2 <bb_setFloat+0x42>
    {
        arr->data[arr->size] = tmp.b[3];
    da90:	88e3      	ldrh	r3, [r4, #6]
    da92:	6822      	ldr	r2, [r4, #0]
    da94:	4629      	mov	r1, r5
    da96:	f3c5 6507 	ubfx	r5, r5, #24, #8
    da9a:	54d5      	strb	r5, [r2, r3]
        arr->data[arr->size + 1] = tmp.b[2];
    da9c:	88e2      	ldrh	r2, [r4, #6]
    da9e:	6823      	ldr	r3, [r4, #0]
    daa0:	4413      	add	r3, r2
    daa2:	f3c1 4207 	ubfx	r2, r1, #16, #8
    daa6:	705a      	strb	r2, [r3, #1]
        arr->data[arr->size + 2] = tmp.b[1];
    daa8:	88e2      	ldrh	r2, [r4, #6]
    daaa:	6823      	ldr	r3, [r4, #0]
    daac:	4413      	add	r3, r2
    daae:	f3c1 2207 	ubfx	r2, r1, #8, #8
    dab2:	709a      	strb	r2, [r3, #2]
        arr->data[arr->size + 3] = tmp.b[0];
    dab4:	88e2      	ldrh	r2, [r4, #6]
    dab6:	6823      	ldr	r3, [r4, #0]
    dab8:	4413      	add	r3, r2
    daba:	70d9      	strb	r1, [r3, #3]
        arr->size += 4;
    dabc:	88e3      	ldrh	r3, [r4, #6]
    dabe:	3304      	adds	r3, #4
    dac0:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    dac2:	bd38      	pop	{r3, r4, r5, pc}

0000dac4 <bb_setDouble>:

#ifndef DLMS_IGNORE_FLOAT64
int bb_setDouble(
    gxByteBuffer* arr,
    double value)
{
    dac4:	b570      	push	{r4, r5, r6, lr}
        char b[sizeof(double)];
    } HELPER;

    HELPER tmp;
    tmp.value = value;
    int ret = bb_allocate(arr, arr->size, 8);
    dac6:	88c1      	ldrh	r1, [r0, #6]
{
    dac8:	4615      	mov	r5, r2
    int ret = bb_allocate(arr, arr->size, 8);
    daca:	2208      	movs	r2, #8
{
    dacc:	4604      	mov	r4, r0
    dace:	461e      	mov	r6, r3
    int ret = bb_allocate(arr, arr->size, 8);
    dad0:	f7ff ff1b 	bl	d90a <bb_allocate>
    if (ret == 0)
    dad4:	2800      	cmp	r0, #0
    dad6:	d12e      	bne.n	db36 <bb_setDouble+0x72>
    {
        arr->data[arr->size] = tmp.b[7];
    dad8:	88e2      	ldrh	r2, [r4, #6]
    dada:	6821      	ldr	r1, [r4, #0]
    dadc:	4633      	mov	r3, r6
    dade:	f3c6 6607 	ubfx	r6, r6, #24, #8
    dae2:	548e      	strb	r6, [r1, r2]
        arr->data[arr->size + 1] = tmp.b[6];
    dae4:	88e1      	ldrh	r1, [r4, #6]
    dae6:	6822      	ldr	r2, [r4, #0]
    dae8:	440a      	add	r2, r1
    daea:	f3c3 4107 	ubfx	r1, r3, #16, #8
    daee:	7051      	strb	r1, [r2, #1]
        arr->data[arr->size + 2] = tmp.b[5];
    daf0:	88e1      	ldrh	r1, [r4, #6]
    daf2:	6822      	ldr	r2, [r4, #0]
    daf4:	440a      	add	r2, r1
    daf6:	f3c3 2107 	ubfx	r1, r3, #8, #8
    dafa:	7091      	strb	r1, [r2, #2]
        arr->data[arr->size + 3] = tmp.b[4];
    dafc:	88e1      	ldrh	r1, [r4, #6]
    dafe:	6822      	ldr	r2, [r4, #0]
    db00:	440a      	add	r2, r1
        arr->data[arr->size + 4] = tmp.b[3];
    db02:	f3c5 6107 	ubfx	r1, r5, #24, #8
        arr->data[arr->size + 3] = tmp.b[4];
    db06:	70d3      	strb	r3, [r2, #3]
        arr->data[arr->size + 4] = tmp.b[3];
    db08:	88e2      	ldrh	r2, [r4, #6]
    db0a:	6823      	ldr	r3, [r4, #0]
    db0c:	441a      	add	r2, r3
    db0e:	7111      	strb	r1, [r2, #4]
        arr->data[arr->size + 5] = tmp.b[2];
    db10:	88e1      	ldrh	r1, [r4, #6]
    db12:	6822      	ldr	r2, [r4, #0]
    db14:	440a      	add	r2, r1
    db16:	f3c5 4107 	ubfx	r1, r5, #16, #8
    db1a:	7151      	strb	r1, [r2, #5]
        arr->data[arr->size + 6] = tmp.b[1];
    db1c:	88e1      	ldrh	r1, [r4, #6]
    db1e:	6822      	ldr	r2, [r4, #0]
    db20:	440a      	add	r2, r1
    db22:	f3c5 2107 	ubfx	r1, r5, #8, #8
    db26:	7191      	strb	r1, [r2, #6]
        arr->data[arr->size + 7] = tmp.b[0];
    db28:	88e1      	ldrh	r1, [r4, #6]
    db2a:	6822      	ldr	r2, [r4, #0]
    db2c:	440a      	add	r2, r1
    db2e:	71d5      	strb	r5, [r2, #7]
        arr->size += 8;
    db30:	88e3      	ldrh	r3, [r4, #6]
    db32:	3308      	adds	r3, #8
    db34:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    db36:	bd70      	pop	{r4, r5, r6, pc}

0000db38 <bb_setInt8>:

int bb_setInt8(
    gxByteBuffer* arr,
    char item)
{
    return bb_setUInt8(arr, (unsigned char)item);
    db38:	f7ff bf21 	b.w	d97e <bb_setUInt8>

0000db3c <bb_setInt16>:

int bb_setInt16(
    gxByteBuffer* arr,
    short item)
{
    return bb_setUInt16(arr, (uint16_t)item);
    db3c:	b289      	uxth	r1, r1
    db3e:	f7ff bf40 	b.w	d9c2 <bb_setUInt16>

0000db42 <bb_setInt32>:

int bb_setInt32(
    gxByteBuffer* arr,
    int32_t item)
{
    return bb_setUInt32(arr, (uint32_t)item);
    db42:	f7ff bf60 	b.w	da06 <bb_setUInt32>

0000db46 <bb_setInt64>:

int bb_setInt64(
    gxByteBuffer* arr,
    int64_t item)
{
    return bb_setUInt64(arr, (uint64_t)item);
    db46:	f7ff bf69 	b.w	da1c <bb_setUInt64>

0000db4a <bb_set>:
int bb_set(
    gxByteBuffer* arr,
    const unsigned char* pSource,
    uint16_t count)
#endif
{
    db4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db4c:	460f      	mov	r7, r1
    int ret = bb_allocate(arr, arr->size, count);
    db4e:	88c1      	ldrh	r1, [r0, #6]
{
    db50:	4604      	mov	r4, r0
    db52:	4615      	mov	r5, r2
    int ret = bb_allocate(arr, arr->size, count);
    db54:	f7ff fed9 	bl	d90a <bb_allocate>
    if (ret == 0)
    db58:	4606      	mov	r6, r0
    db5a:	b948      	cbnz	r0, db70 <bb_set+0x26>
    {
        memcpy(arr->data + arr->size, pSource, count);
    db5c:	88e3      	ldrh	r3, [r4, #6]
    db5e:	6820      	ldr	r0, [r4, #0]
    db60:	462a      	mov	r2, r5
    db62:	4639      	mov	r1, r7
    db64:	4418      	add	r0, r3
    db66:	f00f fe93 	bl	1d890 <memcpy>
        arr->size += count;
    db6a:	88e2      	ldrh	r2, [r4, #6]
    db6c:	4415      	add	r5, r2
    db6e:	80e5      	strh	r5, [r4, #6]
    }
    return ret;
}
    db70:	4630      	mov	r0, r6
    db72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db74 <bb_addString.part.0>:
        return ret;
}
    return 0;
}

int bb_addString(
    db74:	b538      	push	{r3, r4, r5, lr}
    db76:	4604      	mov	r4, r0
    gxByteBuffer* arr,
    const char* value)
{
    if (value != NULL)
    {
        int len = (int)strlen(value);
    db78:	4608      	mov	r0, r1
int bb_addString(
    db7a:	460d      	mov	r5, r1
        int len = (int)strlen(value);
    db7c:	f7f3 f920 	bl	dc0 <strlen>
        if (len > 0)
    db80:	2800      	cmp	r0, #0
    db82:	dd0f      	ble.n	dba4 <bb_addString.part.0+0x30>
        {
            int ret = bb_set(arr, (const unsigned char*)value, (uint16_t)(len + 1));
    db84:	1c42      	adds	r2, r0, #1
    db86:	b292      	uxth	r2, r2
    db88:	4629      	mov	r1, r5
    db8a:	4620      	mov	r0, r4
    db8c:	f7ff ffdd 	bl	db4a <bb_set>
            if (ret == 0)
    db90:	b938      	cbnz	r0, dba2 <bb_addString.part.0+0x2e>
            {
                //Add end of string, but that is not added to the length.
                arr->data[arr->size - 1] = '\0';
    db92:	88e2      	ldrh	r2, [r4, #6]
    db94:	6823      	ldr	r3, [r4, #0]
    db96:	4413      	add	r3, r2
    db98:	f803 0c01 	strb.w	r0, [r3, #-1]
                --arr->size;
    db9c:	88e3      	ldrh	r3, [r4, #6]
    db9e:	3b01      	subs	r3, #1
    dba0:	80e3      	strh	r3, [r4, #6]
            }
            return ret;
        }
    }
    return 0;
}
    dba2:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    dba4:	2000      	movs	r0, #0
    dba6:	e7fc      	b.n	dba2 <bb_addString.part.0+0x2e>

0000dba8 <bb_set2>:
{
    dba8:	b570      	push	{r4, r5, r6, lr}
    dbaa:	4616      	mov	r6, r2
    dbac:	461c      	mov	r4, r3
    if (data != NULL && count != 0)
    dbae:	460d      	mov	r5, r1
    dbb0:	b191      	cbz	r1, dbd8 <bb_set2+0x30>
    dbb2:	b19b      	cbz	r3, dbdc <bb_set2+0x34>
        if (count == (uint16_t)-1)
    dbb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dbb8:	429c      	cmp	r4, r3
            count = data->size - index;
    dbba:	bf08      	it	eq
    dbbc:	88cc      	ldrheq	r4, [r1, #6]
        int ret = bb_set(arr, data->data + index, count);
    dbbe:	6809      	ldr	r1, [r1, #0]
            count = data->size - index;
    dbc0:	bf04      	itt	eq
    dbc2:	1aa4      	subeq	r4, r4, r2
    dbc4:	b2a4      	uxtheq	r4, r4
        int ret = bb_set(arr, data->data + index, count);
    dbc6:	4622      	mov	r2, r4
    dbc8:	4431      	add	r1, r6
    dbca:	f7ff ffbe 	bl	db4a <bb_set>
        if (ret == 0)
    dbce:	b910      	cbnz	r0, dbd6 <bb_set2+0x2e>
            data->position += count;
    dbd0:	892a      	ldrh	r2, [r5, #8]
    dbd2:	4414      	add	r4, r2
    dbd4:	812c      	strh	r4, [r5, #8]
}
    dbd6:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    dbd8:	4608      	mov	r0, r1
    dbda:	e7fc      	b.n	dbd6 <bb_set2+0x2e>
    dbdc:	4618      	mov	r0, r3
    dbde:	e7fa      	b.n	dbd6 <bb_set2+0x2e>

0000dbe0 <bb_addString>:
    if (value != NULL)
    dbe0:	b109      	cbz	r1, dbe6 <bb_addString+0x6>
    dbe2:	f7ff bfc7 	b.w	db74 <bb_addString.part.0>
}
    dbe6:	4608      	mov	r0, r1
    dbe8:	4770      	bx	lr

0000dbea <bb_attach>:
    uint16_t count,
    uint16_t capacity)
#endif
{
    //If capacity is 1 value is cast t
    if (value == NULL || capacity < count)
    dbea:	b911      	cbnz	r1, dbf2 <bb_attach+0x8>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dbec:	f44f 7082 	mov.w	r0, #260	; 0x104
    dbf0:	4770      	bx	lr
    if (value == NULL || capacity < count)
    dbf2:	4293      	cmp	r3, r2
    dbf4:	d3fa      	bcc.n	dbec <bb_attach+0x2>
    }
    arr->data = value;
    dbf6:	6001      	str	r1, [r0, #0]
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->capacity = (0x80000000 | capacity);
#else
    if (capacity >= 0x8000)
    dbf8:	0419      	lsls	r1, r3, #16
    dbfa:	d4f7      	bmi.n	dbec <bb_attach+0x2>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->capacity = (uint16_t)(0x8000 | capacity);
    dbfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    dc00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    dc04:	8083      	strh	r3, [r0, #4]
#endif
    arr->size = count;
    arr->position = 0;
    dc06:	2300      	movs	r3, #0
    arr->size = count;
    dc08:	80c2      	strh	r2, [r0, #6]
    arr->position = 0;
    dc0a:	8103      	strh	r3, [r0, #8]
    return 0;
    dc0c:	4618      	mov	r0, r3
}
    dc0e:	4770      	bx	lr

0000dc10 <bb_attachString>:

#ifndef DLMS_IGNORE_MALLOC
int bb_attachString(
    gxByteBuffer* arr,
    char* value)
{
    dc10:	b538      	push	{r3, r4, r5, lr}
    dc12:	4605      	mov	r5, r0
    int len = (int)strlen(value);
    dc14:	4608      	mov	r0, r1
{
    dc16:	460c      	mov	r4, r1
    int len = (int)strlen(value);
    dc18:	f7f3 f8d2 	bl	dc0 <strlen>
    int ret = bb_set(arr, (const unsigned char*)value, (uint16_t)len);
    dc1c:	4621      	mov	r1, r4
    dc1e:	b282      	uxth	r2, r0
    dc20:	4628      	mov	r0, r5
    dc22:	f7ff ff92 	bl	db4a <bb_set>
    dc26:	4605      	mov	r5, r0
    gxfree(value);
    dc28:	4620      	mov	r0, r4
    dc2a:	f7fe fe23 	bl	c874 <free>
    return ret;
}
    dc2e:	4628      	mov	r0, r5
    dc30:	bd38      	pop	{r3, r4, r5, pc}

0000dc32 <bb_clear>:
#endif //DLMS_IGNORE_MALLOC

int bb_clear(
    gxByteBuffer* arr)
{
    dc32:	b538      	push	{r3, r4, r5, lr}
    dc34:	4604      	mov	r4, r0
#ifndef DLMS_IGNORE_MALLOC
    //If byte buffer is attached.
    if (!bb_isAttached(arr))
    dc36:	f7ff fe28 	bl	d88a <bb_isAttached>
    dc3a:	4605      	mov	r5, r0
    dc3c:	b930      	cbnz	r0, dc4c <bb_clear+0x1a>
    {
        if (arr->data != NULL)
    dc3e:	6820      	ldr	r0, [r4, #0]
    dc40:	b110      	cbz	r0, dc48 <bb_clear+0x16>
        {
            gxfree(arr->data);
    dc42:	f7fe fe17 	bl	c874 <free>
            arr->data = NULL;
    dc46:	6025      	str	r5, [r4, #0]
        }
        arr->capacity = 0;
    dc48:	2300      	movs	r3, #0
    dc4a:	80a3      	strh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
    dc4c:	2000      	movs	r0, #0
    dc4e:	80e0      	strh	r0, [r4, #6]
    arr->position = 0;
    dc50:	8120      	strh	r0, [r4, #8]
    return 0;
    }
    dc52:	bd38      	pop	{r3, r4, r5, pc}

0000dc54 <bb_empty>:

int bb_empty(
    gxByteBuffer* arr)
{
    dc54:	4603      	mov	r3, r0
    arr->size = 0;
    dc56:	2000      	movs	r0, #0
    dc58:	80d8      	strh	r0, [r3, #6]
    arr->position = 0;
    dc5a:	8118      	strh	r0, [r3, #8]
    return 0;
}
    dc5c:	4770      	bx	lr

0000dc5e <bb_getUInt8>:

int bb_getUInt8(
    gxByteBuffer* arr,
    unsigned char* value)
{
    if (arr->position >= arr->size)
    dc5e:	8903      	ldrh	r3, [r0, #8]
    dc60:	88c2      	ldrh	r2, [r0, #6]
    dc62:	429a      	cmp	r2, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[arr->position];
    dc64:	bf81      	itttt	hi
    dc66:	6802      	ldrhi	r2, [r0, #0]
    dc68:	5cd3      	ldrbhi	r3, [r2, r3]
    dc6a:	700b      	strbhi	r3, [r1, #0]
    ++arr->position;
    dc6c:	8903      	ldrhhi	r3, [r0, #8]
    dc6e:	bf83      	ittte	hi
    dc70:	3301      	addhi	r3, #1
    dc72:	8103      	strhhi	r3, [r0, #8]
    return 0;
    dc74:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dc76:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    dc7a:	4770      	bx	lr

0000dc7c <bb_getInt8>:

int bb_getInt8(
    gxByteBuffer* arr,
    signed char* value)
{
    if (arr->position >= arr->size)
    dc7c:	8903      	ldrh	r3, [r0, #8]
    dc7e:	88c2      	ldrh	r2, [r0, #6]
    dc80:	429a      	cmp	r2, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (signed char)((unsigned char*)arr->data)[arr->position];
    dc82:	bf81      	itttt	hi
    dc84:	6802      	ldrhi	r2, [r0, #0]
    dc86:	5cd3      	ldrbhi	r3, [r2, r3]
    dc88:	700b      	strbhi	r3, [r1, #0]
    ++arr->position;
    dc8a:	8903      	ldrhhi	r3, [r0, #8]
    dc8c:	bf83      	ittte	hi
    dc8e:	3301      	addhi	r3, #1
    dc90:	8103      	strhhi	r3, [r0, #8]
    return 0;
    dc92:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dc94:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    dc98:	4770      	bx	lr

0000dc9a <bb_getUInt8ByIndex>:
int bb_getUInt8ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    unsigned char* value)
{
    if (index >= arr->size)
    dc9a:	88c3      	ldrh	r3, [r0, #6]
    dc9c:	428b      	cmp	r3, r1
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[index];
    dc9e:	bf81      	itttt	hi
    dca0:	6803      	ldrhi	r3, [r0, #0]
    dca2:	5c5b      	ldrbhi	r3, [r3, r1]
    dca4:	7013      	strbhi	r3, [r2, #0]
    return 0;
    dca6:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dca8:	bf98      	it	ls
    dcaa:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    dcae:	4770      	bx	lr

0000dcb0 <bb_getUInt16>:

int bb_getUInt16(
    gxByteBuffer* arr,
    uint16_t* value)
{
    if (arr->position + 2 > arr->size)
    dcb0:	8902      	ldrh	r2, [r0, #8]
    dcb2:	88c3      	ldrh	r3, [r0, #6]
{
    dcb4:	b510      	push	{r4, lr}
    if (arr->position + 2 > arr->size)
    dcb6:	1c94      	adds	r4, r2, #2
    dcb8:	429c      	cmp	r4, r3
    dcba:	dc0b      	bgt.n	dcd4 <bb_getUInt16+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (uint16_t)(((unsigned char*)arr->data)[arr->position] << 8 |
    dcbc:	6803      	ldr	r3, [r0, #0]
    dcbe:	5c9c      	ldrb	r4, [r3, r2]
        ((unsigned char*)arr->data)[arr->position + 1]);
    dcc0:	4413      	add	r3, r2
    dcc2:	785b      	ldrb	r3, [r3, #1]
    *value = (uint16_t)(((unsigned char*)arr->data)[arr->position] << 8 |
    dcc4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    dcc8:	800b      	strh	r3, [r1, #0]
    arr->position += 2;
    dcca:	8903      	ldrh	r3, [r0, #8]
    dccc:	3302      	adds	r3, #2
    dcce:	8103      	strh	r3, [r0, #8]
    return 0;
    dcd0:	2000      	movs	r0, #0
}
    dcd2:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dcd4:	f44f 7082 	mov.w	r0, #260	; 0x104
    dcd8:	e7fb      	b.n	dcd2 <bb_getUInt16+0x22>

0000dcda <bb_getUInt32>:

int bb_getUInt32(
    gxByteBuffer* arr,
    uint32_t* value)
{
    dcda:	b570      	push	{r4, r5, r6, lr}

    if (arr->position + 4 > arr->size)
    dcdc:	8904      	ldrh	r4, [r0, #8]
    dcde:	88c3      	ldrh	r3, [r0, #6]
    dce0:	1d25      	adds	r5, r4, #4
    dce2:	429d      	cmp	r5, r3
    dce4:	dc0f      	bgt.n	dd06 <bb_getUInt32+0x2c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + arr->position);
    dce6:	6802      	ldr	r2, [r0, #0]
    dce8:	5d16      	ldrb	r6, [r2, r4]
    dcea:	4422      	add	r2, r4
    dcec:	78d3      	ldrb	r3, [r2, #3]
    dcee:	7854      	ldrb	r4, [r2, #1]
    dcf0:	7892      	ldrb	r2, [r2, #2]
    dcf2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    dcf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    dcfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dcfe:	600b      	str	r3, [r1, #0]
    arr->position += 4;
    dd00:	8105      	strh	r5, [r0, #8]
    return 0;
    dd02:	2000      	movs	r0, #0
}
    dd04:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dd06:	f44f 7082 	mov.w	r0, #260	; 0x104
    dd0a:	e7fb      	b.n	dd04 <bb_getUInt32+0x2a>

0000dd0c <bb_getInt16>:
int bb_getInt16(
    gxByteBuffer* arr,
    short* value)
{

    if (arr->position + 2 > arr->size)
    dd0c:	8902      	ldrh	r2, [r0, #8]
    dd0e:	88c3      	ldrh	r3, [r0, #6]
{
    dd10:	b510      	push	{r4, lr}
    if (arr->position + 2 > arr->size)
    dd12:	1c94      	adds	r4, r2, #2
    dd14:	429c      	cmp	r4, r3
    dd16:	dc0b      	bgt.n	dd30 <bb_getInt16+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (short)(((unsigned char*)arr->data)[arr->position] << 8 |
    dd18:	6803      	ldr	r3, [r0, #0]
    dd1a:	5c9c      	ldrb	r4, [r3, r2]
        ((unsigned char*)arr->data)[arr->position + 1]);
    dd1c:	4413      	add	r3, r2
    dd1e:	785b      	ldrb	r3, [r3, #1]
    *value = (short)(((unsigned char*)arr->data)[arr->position] << 8 |
    dd20:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    dd24:	800b      	strh	r3, [r1, #0]
    arr->position += 2;
    dd26:	8903      	ldrh	r3, [r0, #8]
    dd28:	3302      	adds	r3, #2
    dd2a:	8103      	strh	r3, [r0, #8]
    return 0;
    dd2c:	2000      	movs	r0, #0
}
    dd2e:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dd30:	f44f 7082 	mov.w	r0, #260	; 0x104
    dd34:	e7fb      	b.n	dd2e <bb_getInt16+0x22>

0000dd36 <bb_getUInt24ByIndex>:

int bb_getUInt24ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint32_t* value)
{
    dd36:	b510      	push	{r4, lr}
    if (index + 3 > bb_size(arr))
    dd38:	1ccc      	adds	r4, r1, #3
    return arr != NULL ? arr->size : 0;
    dd3a:	b170      	cbz	r0, dd5a <bb_getUInt24ByIndex+0x24>
    dd3c:	88c3      	ldrh	r3, [r0, #6]
    if (index + 3 > bb_size(arr))
    dd3e:	429c      	cmp	r4, r3
    dd40:	d80d      	bhi.n	dd5e <bb_getUInt24ByIndex+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((uint32_t)(arr->data)[index] << 16) |
    dd42:	6800      	ldr	r0, [r0, #0]
    dd44:	5c44      	ldrb	r4, [r0, r1]
        ((uint32_t)(arr->data)[index + 1] << 8) |
        ((uint32_t)(arr->data)[index + 2]);
    dd46:	4401      	add	r1, r0
    return 0;
    dd48:	2000      	movs	r0, #0
        ((uint32_t)(arr->data)[index + 2]);
    dd4a:	788b      	ldrb	r3, [r1, #2]
        ((uint32_t)(arr->data)[index + 1] << 8) |
    dd4c:	7849      	ldrb	r1, [r1, #1]
    dd4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    dd52:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *value = ((uint32_t)(arr->data)[index] << 16) |
    dd56:	6013      	str	r3, [r2, #0]
}
    dd58:	bd10      	pop	{r4, pc}
    return arr != NULL ? arr->size : 0;
    dd5a:	4603      	mov	r3, r0
    dd5c:	e7ef      	b.n	dd3e <bb_getUInt24ByIndex+0x8>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dd5e:	f44f 7082 	mov.w	r0, #260	; 0x104
    dd62:	e7f9      	b.n	dd58 <bb_getUInt24ByIndex+0x22>

0000dd64 <bb_getUInt24>:
{
    dd64:	b510      	push	{r4, lr}
    dd66:	4604      	mov	r4, r0
    dd68:	460a      	mov	r2, r1
    int ret = bb_getUInt24ByIndex(arr, arr->position, value);
    dd6a:	8901      	ldrh	r1, [r0, #8]
    dd6c:	f7ff ffe3 	bl	dd36 <bb_getUInt24ByIndex>
    arr->position += 3;
    dd70:	8923      	ldrh	r3, [r4, #8]
    dd72:	3303      	adds	r3, #3
    dd74:	8123      	strh	r3, [r4, #8]
}
    dd76:	bd10      	pop	{r4, pc}

0000dd78 <bb_getUInt32ByIndex>:
    gxByteBuffer* arr,
    uint32_t index,
    uint32_t* value)
{

    if (index + 4 > arr->size)
    dd78:	88c3      	ldrh	r3, [r0, #6]
{
    dd7a:	b510      	push	{r4, lr}
    if (index + 4 > arr->size)
    dd7c:	1d0c      	adds	r4, r1, #4
    dd7e:	429c      	cmp	r4, r3
    dd80:	d80e      	bhi.n	dda0 <bb_getUInt32ByIndex+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + index);
    dd82:	6800      	ldr	r0, [r0, #0]
    dd84:	5c44      	ldrb	r4, [r0, r1]
    dd86:	4401      	add	r1, r0
    dd88:	78cb      	ldrb	r3, [r1, #3]
    dd8a:	7848      	ldrb	r0, [r1, #1]
    dd8c:	7889      	ldrb	r1, [r1, #2]
    dd8e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    dd92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    dd96:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    dd9a:	6013      	str	r3, [r2, #0]
    return 0;
    dd9c:	2000      	movs	r0, #0
}
    dd9e:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    dda0:	f44f 7082 	mov.w	r0, #260	; 0x104
    dda4:	e7fb      	b.n	dd9e <bb_getUInt32ByIndex+0x26>

0000dda6 <bb_getInt32>:
{
    dda6:	b510      	push	{r4, lr}
    dda8:	4604      	mov	r4, r0
    ddaa:	460a      	mov	r2, r1
    int ret = bb_getUInt32ByIndex(arr, arr->position, (uint32_t*)value);
    ddac:	8901      	ldrh	r1, [r0, #8]
    ddae:	f7ff ffe3 	bl	dd78 <bb_getUInt32ByIndex>
    arr->position += 4;
    ddb2:	8923      	ldrh	r3, [r4, #8]
    ddb4:	3304      	adds	r3, #4
    ddb6:	8123      	strh	r3, [r4, #8]
}
    ddb8:	bd10      	pop	{r4, pc}

0000ddba <bb_getUInt64ByIndex>:
int bb_getUInt64ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint64_t* value)
{
    if (index + 8 > arr->size)
    ddba:	88c3      	ldrh	r3, [r0, #6]
{
    ddbc:	b510      	push	{r4, lr}
    if (index + 8 > arr->size)
    ddbe:	f101 0408 	add.w	r4, r1, #8
    ddc2:	429c      	cmp	r4, r3
    ddc4:	d81a      	bhi.n	ddfc <bb_getUInt64ByIndex+0x42>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + index);
    ddc6:	6800      	ldr	r0, [r0, #0]
    ddc8:	5c44      	ldrb	r4, [r0, r1]
    ddca:	4401      	add	r1, r0
    ddcc:	78cb      	ldrb	r3, [r1, #3]
    ddce:	7848      	ldrb	r0, [r1, #1]
    ddd0:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    ddd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    ddd8:	7888      	ldrb	r0, [r1, #2]
    ddda:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    //Some 32 bit microcontrollers can't handle *value <<= 32;
    //For this reason value is sifted on two parts.
    *value <<= 16;
    *value <<= 16;
    ddde:	2000      	movs	r0, #0
    dde0:	e9c2 0300 	strd	r0, r3, [r2]
    *value |= GETU32(arr->data + index + 4);
    dde4:	794b      	ldrb	r3, [r1, #5]
    dde6:	790c      	ldrb	r4, [r1, #4]
    dde8:	041b      	lsls	r3, r3, #16
    ddea:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    ddee:	79cc      	ldrb	r4, [r1, #7]
    ddf0:	7989      	ldrb	r1, [r1, #6]
    ddf2:	4323      	orrs	r3, r4
    ddf4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    ddf8:	6013      	str	r3, [r2, #0]
    return 0;
}
    ddfa:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    ddfc:	f44f 7082 	mov.w	r0, #260	; 0x104
    de00:	e7fb      	b.n	ddfa <bb_getUInt64ByIndex+0x40>

0000de02 <bb_getInt64>:
{
    de02:	b510      	push	{r4, lr}
    de04:	460a      	mov	r2, r1
    int ret = bb_getUInt64ByIndex(arr, arr->position, (uint64_t*)value);
    de06:	8901      	ldrh	r1, [r0, #8]
{
    de08:	4604      	mov	r4, r0
    int ret = bb_getUInt64ByIndex(arr, arr->position, (uint64_t*)value);
    de0a:	f7ff ffd6 	bl	ddba <bb_getUInt64ByIndex>
    if (ret == 0)
    de0e:	b910      	cbnz	r0, de16 <bb_getInt64+0x14>
        arr->position += 8;
    de10:	8923      	ldrh	r3, [r4, #8]
    de12:	3308      	adds	r3, #8
    de14:	8123      	strh	r3, [r4, #8]
}
    de16:	bd10      	pop	{r4, pc}

0000de18 <bb_getUInt64>:
{
    de18:	b510      	push	{r4, lr}
    de1a:	460a      	mov	r2, r1
    int ret = bb_getUInt64ByIndex(arr, arr->position, value);
    de1c:	8901      	ldrh	r1, [r0, #8]
{
    de1e:	4604      	mov	r4, r0
    int ret = bb_getUInt64ByIndex(arr, arr->position, value);
    de20:	f7ff ffcb 	bl	ddba <bb_getUInt64ByIndex>
    if (ret == 0)
    de24:	b910      	cbnz	r0, de2c <bb_getUInt64+0x14>
        arr->position += 8;
    de26:	8923      	ldrh	r3, [r4, #8]
    de28:	3308      	adds	r3, #8
    de2a:	8123      	strh	r3, [r4, #8]
}
    de2c:	bd10      	pop	{r4, pc}

0000de2e <bb_getFloat>:

#ifndef DLMS_IGNORE_FLOAT32
int bb_getFloat(
    gxByteBuffer* arr,
    float* value)
{
    de2e:	b570      	push	{r4, r5, r6, lr}
    {
        float value;
        char b[sizeof(float)];
    } HELPER;
    HELPER tmp;
    if (arr->position + 4 > arr->size)
    de30:	8904      	ldrh	r4, [r0, #8]
    de32:	88c3      	ldrh	r3, [r0, #6]
    de34:	1d25      	adds	r5, r4, #4
    de36:	429d      	cmp	r5, r3
    de38:	dc12      	bgt.n	de60 <bb_getFloat+0x32>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    tmp.b[3] = arr->data[arr->position];
    de3a:	6802      	ldr	r2, [r0, #0]
    de3c:	5d16      	ldrb	r6, [r2, r4]
    tmp.b[2] = arr->data[arr->position + 1];
    de3e:	4422      	add	r2, r4
    tmp.b[3] = arr->data[arr->position];
    de40:	2300      	movs	r3, #0
    tmp.b[2] = arr->data[arr->position + 1];
    de42:	7854      	ldrb	r4, [r2, #1]
    tmp.b[3] = arr->data[arr->position];
    de44:	f366 631f 	bfi	r3, r6, #24, #8
    tmp.b[2] = arr->data[arr->position + 1];
    de48:	f364 4317 	bfi	r3, r4, #16, #8
    tmp.b[1] = arr->data[arr->position + 2];
    de4c:	7894      	ldrb	r4, [r2, #2]
    tmp.b[0] = arr->data[arr->position + 3];
    de4e:	78d2      	ldrb	r2, [r2, #3]
    tmp.b[1] = arr->data[arr->position + 2];
    de50:	f364 230f 	bfi	r3, r4, #8, #8
    tmp.b[0] = arr->data[arr->position + 3];
    de54:	f362 0307 	bfi	r3, r2, #0, #8
    *value = tmp.value;
    de58:	600b      	str	r3, [r1, #0]
    arr->position += 4;
    de5a:	8105      	strh	r5, [r0, #8]
    return 0;
    de5c:	2000      	movs	r0, #0
}
    de5e:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    de60:	f44f 7082 	mov.w	r0, #260	; 0x104
    de64:	e7fb      	b.n	de5e <bb_getFloat+0x30>

0000de66 <bb_getDouble>:

#ifndef DLMS_IGNORE_FLOAT64
int bb_getDouble(
    gxByteBuffer* arr,
    double* value)
{
    de66:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        double value;
        char b[sizeof(double)];
    } HELPER;
    HELPER tmp;
    if (arr->position + 8 > arr->size)
    de68:	8905      	ldrh	r5, [r0, #8]
    de6a:	88c3      	ldrh	r3, [r0, #6]
    de6c:	f105 0608 	add.w	r6, r5, #8
    de70:	429e      	cmp	r6, r3
    de72:	dc20      	bgt.n	deb6 <bb_getDouble+0x50>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    tmp.b[7] = arr->data[arr->position];
    de74:	6804      	ldr	r4, [r0, #0]
    de76:	5d67      	ldrb	r7, [r4, r5]
    tmp.b[6] = arr->data[arr->position + 1];
    de78:	442c      	add	r4, r5
    tmp.b[7] = arr->data[arr->position];
    de7a:	2300      	movs	r3, #0
    tmp.b[6] = arr->data[arr->position + 1];
    de7c:	7865      	ldrb	r5, [r4, #1]
    tmp.b[7] = arr->data[arr->position];
    de7e:	f367 631f 	bfi	r3, r7, #24, #8
    tmp.b[6] = arr->data[arr->position + 1];
    de82:	f365 4317 	bfi	r3, r5, #16, #8
    tmp.b[5] = arr->data[arr->position + 2];
    de86:	78a5      	ldrb	r5, [r4, #2]
    de88:	f365 230f 	bfi	r3, r5, #8, #8
    tmp.b[4] = arr->data[arr->position + 3];
    de8c:	78e5      	ldrb	r5, [r4, #3]
    de8e:	f365 0307 	bfi	r3, r5, #0, #8
    tmp.b[3] = arr->data[arr->position + 4];
    de92:	7925      	ldrb	r5, [r4, #4]
    tmp.b[7] = arr->data[arr->position];
    de94:	2200      	movs	r2, #0
    tmp.b[3] = arr->data[arr->position + 4];
    de96:	f365 621f 	bfi	r2, r5, #24, #8
    tmp.b[2] = arr->data[arr->position + 5];
    de9a:	7965      	ldrb	r5, [r4, #5]
    de9c:	f365 4217 	bfi	r2, r5, #16, #8
    tmp.b[1] = arr->data[arr->position + 6];
    dea0:	79a5      	ldrb	r5, [r4, #6]
    tmp.b[0] = arr->data[arr->position + 7];
    dea2:	79e4      	ldrb	r4, [r4, #7]
    tmp.b[1] = arr->data[arr->position + 6];
    dea4:	f365 220f 	bfi	r2, r5, #8, #8
    tmp.b[0] = arr->data[arr->position + 7];
    dea8:	f364 0207 	bfi	r2, r4, #0, #8
    *value = tmp.value;
    deac:	e9c1 2300 	strd	r2, r3, [r1]
    arr->position += 8;
    deb0:	8106      	strh	r6, [r0, #8]
    return 0;
    deb2:	2000      	movs	r0, #0
}
    deb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    deb6:	f44f 7082 	mov.w	r0, #260	; 0x104
    deba:	e7fb      	b.n	deb4 <bb_getDouble+0x4e>

0000debc <bb_getUInt16ByIndex>:
int bb_getUInt16ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint16_t* value)
{
    if (index + 2 > arr->size)
    debc:	88c3      	ldrh	r3, [r0, #6]
{
    debe:	b510      	push	{r4, lr}
    if (index + 2 > arr->size)
    dec0:	1c8c      	adds	r4, r1, #2
    dec2:	429c      	cmp	r4, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (uint16_t)(((unsigned char*)arr->data)[index] << 8 |
    dec4:	bf9d      	ittte	ls
    dec6:	6803      	ldrls	r3, [r0, #0]
    dec8:	5c58      	ldrbls	r0, [r3, r1]
        ((unsigned char*)arr->data)[index + 1]);
    deca:	18c9      	addls	r1, r1, r3
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    decc:	f44f 7082 	movhi.w	r0, #260	; 0x104
        ((unsigned char*)arr->data)[index + 1]);
    ded0:	bf9f      	itttt	ls
    ded2:	784b      	ldrbls	r3, [r1, #1]
    *value = (uint16_t)(((unsigned char*)arr->data)[index] << 8 |
    ded4:	ea43 2300 	orrls.w	r3, r3, r0, lsl #8
    ded8:	8013      	strhls	r3, [r2, #0]
    return 0;
    deda:	2000      	movls	r0, #0
}
    dedc:	bd10      	pop	{r4, pc}

0000dede <bb_addHexString>:

#ifndef DLMS_IGNORE_MALLOC
int bb_addHexString(
    gxByteBuffer* arr,
    const char* str)
{
    dede:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint16_t count;
    int ret;
    unsigned char* buffer = NULL;
    dee0:	2300      	movs	r3, #0
{
    dee2:	4605      	mov	r5, r0
    ret = hlp_hexToBytes(str, &buffer, &count);
    dee4:	f10d 0202 	add.w	r2, sp, #2
{
    dee8:	4608      	mov	r0, r1
    ret = hlp_hexToBytes(str, &buffer, &count);
    deea:	a901      	add	r1, sp, #4
    unsigned char* buffer = NULL;
    deec:	9301      	str	r3, [sp, #4]
    ret = hlp_hexToBytes(str, &buffer, &count);
    deee:	f00c fe7f 	bl	1abf0 <hlp_hexToBytes>
    if (ret != 0)
    def2:	4604      	mov	r4, r0
    def4:	b948      	cbnz	r0, df0a <bb_addHexString+0x2c>
    {
        return ret;
    }
    if (buffer != NULL)
    def6:	9901      	ldr	r1, [sp, #4]
    def8:	b139      	cbz	r1, df0a <bb_addHexString+0x2c>
    {
        bb_set(arr, buffer, count);
    defa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    defe:	4628      	mov	r0, r5
    df00:	f7ff fe23 	bl	db4a <bb_set>
        gxfree(buffer);
    df04:	9801      	ldr	r0, [sp, #4]
    df06:	f7fe fcb5 	bl	c874 <free>
    }
    return 0;
}
    df0a:	4620      	mov	r0, r4
    df0c:	b003      	add	sp, #12
    df0e:	bd30      	pop	{r4, r5, pc}

0000df10 <bb_toHexString>:
}

char* bb_toHexString(
    gxByteBuffer* arr)
{
    char* buff = hlp_bytesToHex(arr->data, arr->size);
    df10:	88c1      	ldrh	r1, [r0, #6]
    df12:	6800      	ldr	r0, [r0, #0]
    df14:	f7f6 ba54 	b.w	43c0 <hlp_bytesToHex>

0000df18 <bb_addIntAsString2>:
{
    return bb_addIntAsString2(bb, value, 0);
}

int bb_addIntAsString2(gxByteBuffer* bb, int value, unsigned char digits)
{
    df18:	b510      	push	{r4, lr}
    df1a:	b088      	sub	sp, #32
    df1c:	4604      	mov	r4, r0
    int ret;
    char str[20];
    hlp_intToString(str, 20, value, 1, digits);
    df1e:	9200      	str	r2, [sp, #0]
    df20:	2301      	movs	r3, #1
    df22:	460a      	mov	r2, r1
    df24:	a803      	add	r0, sp, #12
    df26:	2114      	movs	r1, #20
    df28:	f00c feb0 	bl	1ac8c <hlp_intToString>
    if (value != NULL)
    df2c:	a903      	add	r1, sp, #12
    df2e:	4620      	mov	r0, r4
    df30:	f7ff fe20 	bl	db74 <bb_addString.part.0>
    if ((ret = bb_addString(bb, str)) != 0)
    {

    }
    return ret;
}
    df34:	b008      	add	sp, #32
    df36:	bd10      	pop	{r4, pc}

0000df38 <bb_addIntAsString>:
    return bb_addIntAsString2(bb, value, 0);
    df38:	2200      	movs	r2, #0
    df3a:	f7ff bfed 	b.w	df18 <bb_addIntAsString2>

0000df3e <bb_move>:
    uint16_t destPos,
    uint16_t count)
#endif
{
    //If items are removed.
    if (srcPos > destPos)
    df3e:	4291      	cmp	r1, r2
{
    df40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df44:	4604      	mov	r4, r0
    df46:	4688      	mov	r8, r1
    df48:	4616      	mov	r6, r2
    df4a:	461f      	mov	r7, r3
    df4c:	eb03 0502 	add.w	r5, r3, r2
    if (srcPos > destPos)
    df50:	d905      	bls.n	df5e <bb_move+0x20>
    {
        if (bb->size < destPos + count)
    df52:	88c3      	ldrh	r3, [r0, #6]
    df54:	42ab      	cmp	r3, r5
    df56:	db20      	blt.n	df9a <bb_move+0x5c>
            {
                return ret;
            }
        }
    }
    if (count != 0)
    df58:	b98f      	cbnz	r7, df7e <bb_move+0x40>
        //Do not use memcpy here!
        memmove(bb->data + destPos, bb->data + srcPos, count);
        bb->size = (destPos + count);
        if (bb->position > bb->size)
        {
            bb->position = bb->size;
    df5a:	2000      	movs	r0, #0
    df5c:	e00d      	b.n	df7a <bb_move+0x3c>
    return arr->capacity & 0x7FFF;
    df5e:	8883      	ldrh	r3, [r0, #4]
        if (bb_getCapacity(bb) < count + destPos)
    df60:	f3c3 030e 	ubfx	r3, r3, #0, #15
    df64:	42ab      	cmp	r3, r5
    df66:	daf7      	bge.n	df58 <bb_move+0x1a>
            if (bb_isAttached(bb))
    df68:	f7ff fc8f 	bl	d88a <bb_isAttached>
    df6c:	b9a8      	cbnz	r0, df9a <bb_move+0x5c>
            if ((ret = bb_capacity(bb, count + destPos)) != 0)
    df6e:	b2a9      	uxth	r1, r5
    df70:	4620      	mov	r0, r4
    df72:	f7ff fca1 	bl	d8b8 <bb_capacity>
    df76:	2800      	cmp	r0, #0
    df78:	d0ee      	beq.n	df58 <bb_move+0x1a>
        }
    }
    return DLMS_ERROR_CODE_OK;
}
    df7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memmove(bb->data + destPos, bb->data + srcPos, count);
    df7e:	6820      	ldr	r0, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
    df80:	463a      	mov	r2, r7
    df82:	eb00 0108 	add.w	r1, r0, r8
    df86:	4430      	add	r0, r6
    df88:	f00f fca3 	bl	1d8d2 <memmove>
        if (bb->position > bb->size)
    df8c:	8923      	ldrh	r3, [r4, #8]
        bb->size = (destPos + count);
    df8e:	b2ad      	uxth	r5, r5
        if (bb->position > bb->size)
    df90:	42ab      	cmp	r3, r5
        bb->size = (destPos + count);
    df92:	80e5      	strh	r5, [r4, #6]
            bb->position = bb->size;
    df94:	bf88      	it	hi
    df96:	8125      	strhhi	r5, [r4, #8]
    df98:	e7df      	b.n	df5a <bb_move+0x1c>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    df9a:	f44f 7081 	mov.w	r0, #258	; 0x102
    df9e:	e7ec      	b.n	df7a <bb_move+0x3c>

0000dfa0 <bb_insert>:
{
    dfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfa4:	460f      	mov	r7, r1
    if (target->size == 0)
    dfa6:	88d1      	ldrh	r1, [r2, #6]
{
    dfa8:	4680      	mov	r8, r0
    dfaa:	4615      	mov	r5, r2
    dfac:	461e      	mov	r6, r3
    if (target->size == 0)
    dfae:	b931      	cbnz	r1, dfbe <bb_insert+0x1e>
        ret = bb_set(target, src, count);
    dfb0:	463a      	mov	r2, r7
    dfb2:	4601      	mov	r1, r0
    dfb4:	4628      	mov	r0, r5
}
    dfb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        ret = bb_set(target, src, count);
    dfba:	f7ff bdc6 	b.w	db4a <bb_set>
        if ((ret = bb_capacity(target, target->size + count)) == 0 &&
    dfbe:	4439      	add	r1, r7
    dfc0:	b289      	uxth	r1, r1
    dfc2:	4610      	mov	r0, r2
    dfc4:	f7ff fc78 	bl	d8b8 <bb_capacity>
    dfc8:	4604      	mov	r4, r0
    dfca:	b988      	cbnz	r0, dff0 <bb_insert+0x50>
            (ret = bb_move(target, index, index + count, target->size - index)) == 0)
    dfcc:	88eb      	ldrh	r3, [r5, #6]
    dfce:	19ba      	adds	r2, r7, r6
    dfd0:	1b9b      	subs	r3, r3, r6
    dfd2:	b29b      	uxth	r3, r3
    dfd4:	b292      	uxth	r2, r2
    dfd6:	4631      	mov	r1, r6
    dfd8:	4628      	mov	r0, r5
    dfda:	f7ff ffb0 	bl	df3e <bb_move>
        if ((ret = bb_capacity(target, target->size + count)) == 0 &&
    dfde:	4604      	mov	r4, r0
    dfe0:	b930      	cbnz	r0, dff0 <bb_insert+0x50>
            memmove(target->data + index, src + index, count);
    dfe2:	6828      	ldr	r0, [r5, #0]
    dfe4:	463a      	mov	r2, r7
    dfe6:	eb08 0106 	add.w	r1, r8, r6
    dfea:	4430      	add	r0, r6
    dfec:	f00f fc71 	bl	1d8d2 <memmove>
}
    dff0:	4620      	mov	r0, r4
    dff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dff6 <bb_trim>:

int bb_trim(
    gxByteBuffer* bb)
{
    int ret;
    if (bb->size == bb->position)
    dff6:	88c3      	ldrh	r3, [r0, #6]
    dff8:	8901      	ldrh	r1, [r0, #8]
    dffa:	428b      	cmp	r3, r1
{
    dffc:	b510      	push	{r4, lr}
    dffe:	4604      	mov	r4, r0
    if (bb->size == bb->position)
    e000:	d104      	bne.n	e00c <bb_trim+0x16>
    {
        bb->size = 0;
    e002:	2300      	movs	r3, #0
    e004:	80c3      	strh	r3, [r0, #6]
        if ((ret = bb_move(bb, bb->position, 0, bb->size - bb->position)) != 0)
        {
            return ret;
        }
    }
    bb->position = 0;
    e006:	2000      	movs	r0, #0
    e008:	8120      	strh	r0, [r4, #8]
    return DLMS_ERROR_CODE_OK;
    e00a:	e006      	b.n	e01a <bb_trim+0x24>
        if ((ret = bb_move(bb, bb->position, 0, bb->size - bb->position)) != 0)
    e00c:	1a5b      	subs	r3, r3, r1
    e00e:	b29b      	uxth	r3, r3
    e010:	2200      	movs	r2, #0
    e012:	f7ff ff94 	bl	df3e <bb_move>
    e016:	2800      	cmp	r0, #0
    e018:	d0f5      	beq.n	e006 <bb_trim+0x10>
}
    e01a:	bd10      	pop	{r4, pc}

0000e01c <bb_get>:
int bb_get(
    gxByteBuffer* bb,
    unsigned char* value,
    uint16_t count)
#endif
{
    e01c:	b538      	push	{r3, r4, r5, lr}
    e01e:	4604      	mov	r4, r0
    e020:	4615      	mov	r5, r2
    e022:	4608      	mov	r0, r1
    if (bb == NULL || value == NULL || bb->size - bb->position < count)
    e024:	b174      	cbz	r4, e044 <bb_get+0x28>
    e026:	b169      	cbz	r1, e044 <bb_get+0x28>
    e028:	8921      	ldrh	r1, [r4, #8]
    e02a:	88e3      	ldrh	r3, [r4, #6]
    e02c:	1a5b      	subs	r3, r3, r1
    e02e:	4293      	cmp	r3, r2
    e030:	db08      	blt.n	e044 <bb_get+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    memcpy(value, bb->data + bb->position, count);
    e032:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e034:	4419      	add	r1, r3
    e036:	f00f fc2b 	bl	1d890 <memcpy>
    bb->position += count;
    e03a:	8922      	ldrh	r2, [r4, #8]
    e03c:	4415      	add	r5, r2
    e03e:	8125      	strh	r5, [r4, #8]
    return 0;
    e040:	2000      	movs	r0, #0
}
    e042:	bd38      	pop	{r3, r4, r5, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e044:	f44f 7082 	mov.w	r0, #260	; 0x104
    e048:	e7fb      	b.n	e042 <bb_get+0x26>

0000e04a <cip_xor>:
{
    e04a:	b510      	push	{r4, lr}
    e04c:	1e43      	subs	r3, r0, #1
    e04e:	3901      	subs	r1, #1
    e050:	300f      	adds	r0, #15
        dst[pos] ^= src[pos];
    e052:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    e056:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    for (pos = 0; pos != 16; ++pos)
    e05a:	4283      	cmp	r3, r0
        dst[pos] ^= src[pos];
    e05c:	ea82 0204 	eor.w	r2, r2, r4
    e060:	701a      	strb	r2, [r3, #0]
    for (pos = 0; pos != 16; ++pos)
    e062:	d1f6      	bne.n	e052 <cip_xor+0x8>
}
    e064:	bd10      	pop	{r4, pc}

0000e066 <shift_right_block>:
    uint32_t val = GETU32(v + 12);
    e066:	68c3      	ldr	r3, [r0, #12]
    if (v[11] & 0x01)
    e068:	7ac1      	ldrb	r1, [r0, #11]
    e06a:	ba1b      	rev	r3, r3
    e06c:	07ca      	lsls	r2, r1, #31
    val >>= 1;
    e06e:	ea4f 0353 	mov.w	r3, r3, lsr #1
        val |= 0x80000000;
    e072:	bf48      	it	mi
    e074:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    val = GETU32(v + 8);
    e078:	7a42      	ldrb	r2, [r0, #9]
    e07a:	ba1b      	rev	r3, r3
    PUT32(v + 12, val);
    e07c:	60c3      	str	r3, [r0, #12]
    val = GETU32(v + 8);
    e07e:	7a03      	ldrb	r3, [r0, #8]
    e080:	0412      	lsls	r2, r2, #16
    e082:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    e086:	7a83      	ldrb	r3, [r0, #10]
    e088:	430a      	orrs	r2, r1
    if (v[7] & 0x01)
    e08a:	79c1      	ldrb	r1, [r0, #7]
    val = GETU32(v + 8);
    e08c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    val >>= 1;
    e090:	0852      	lsrs	r2, r2, #1
    if (v[7] & 0x01)
    e092:	07cb      	lsls	r3, r1, #31
        val |= 0x80000000;
    e094:	bf48      	it	mi
    e096:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
    val = GETU32(v + 4);
    e09a:	7943      	ldrb	r3, [r0, #5]
    e09c:	ba12      	rev	r2, r2
    PUT32(v + 8, val);
    e09e:	6082      	str	r2, [r0, #8]
    val = GETU32(v + 4);
    e0a0:	7902      	ldrb	r2, [r0, #4]
    e0a2:	041b      	lsls	r3, r3, #16
    e0a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    e0a8:	7982      	ldrb	r2, [r0, #6]
    e0aa:	430b      	orrs	r3, r1
    e0ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (v[3] & 0x01)
    e0b0:	78c2      	ldrb	r2, [r0, #3]
    val >>= 1;
    e0b2:	085b      	lsrs	r3, r3, #1
    if (v[3] & 0x01)
    e0b4:	07d1      	lsls	r1, r2, #31
        val |= 0x80000000;
    e0b6:	bf48      	it	mi
    e0b8:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    PUT32(v + 4, val);
    e0bc:	ba1b      	rev	r3, r3
    e0be:	6043      	str	r3, [r0, #4]
    val = GETU32(v);
    e0c0:	7843      	ldrb	r3, [r0, #1]
    e0c2:	7801      	ldrb	r1, [r0, #0]
    e0c4:	041b      	lsls	r3, r3, #16
    e0c6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    e0ca:	4313      	orrs	r3, r2
    e0cc:	7882      	ldrb	r2, [r0, #2]
    PUT32(v, val);
    e0ce:	0e59      	lsrs	r1, r3, #25
    val = GETU32(v);
    e0d0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    PUT32(v, val);
    e0d4:	0c5b      	lsrs	r3, r3, #17
    e0d6:	7043      	strb	r3, [r0, #1]
    e0d8:	0a53      	lsrs	r3, r2, #9
    val >>= 1;
    e0da:	0852      	lsrs	r2, r2, #1
    PUT32(v, val);
    e0dc:	7001      	strb	r1, [r0, #0]
    e0de:	7083      	strb	r3, [r0, #2]
    e0e0:	70c2      	strb	r2, [r0, #3]
}
    e0e2:	4770      	bx	lr

0000e0e4 <cip_inc32>:
    val = GETU32(block + 16 - 4);
    e0e4:	68c3      	ldr	r3, [r0, #12]
    e0e6:	ba1b      	rev	r3, r3
    val++;
    e0e8:	3301      	adds	r3, #1
    e0ea:	ba1b      	rev	r3, r3
    PUT32(block + 16 - 4, val);
    e0ec:	60c3      	str	r3, [r0, #12]
}
    e0ee:	4770      	bx	lr

0000e0f0 <cip_multiplyH>:
{
    e0f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    e0f4:	4617      	mov	r7, r2
    e0f6:	4604      	mov	r4, r0
    e0f8:	460e      	mov	r6, r1
__ssp_bos_icheck3(memset, void *, int)
    e0fa:	2210      	movs	r2, #16
    e0fc:	2100      	movs	r1, #0
    e0fe:	4638      	mov	r0, r7
    e100:	f00f fc01 	bl	1d906 <memset>
    memcpy(tmp, y, 16);
    e104:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e108:	466d      	mov	r5, sp
    e10a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (i = 0; i < 16; i++)
    e10e:	f104 0810 	add.w	r8, r4, #16
{
    e112:	2607      	movs	r6, #7
            if (x[i] & 1 << (7 - j))
    e114:	7823      	ldrb	r3, [r4, #0]
    e116:	4133      	asrs	r3, r6
    e118:	07da      	lsls	r2, r3, #31
    e11a:	d503      	bpl.n	e124 <cip_multiplyH+0x34>
                cip_xor(z, tmp);
    e11c:	4629      	mov	r1, r5
    e11e:	4638      	mov	r0, r7
    e120:	f7ff ff93 	bl	e04a <cip_xor>
            if (tmp[15] & 0x01)
    e124:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e128:	07db      	lsls	r3, r3, #31
                shift_right_block(tmp);
    e12a:	4628      	mov	r0, r5
            if (tmp[15] & 0x01)
    e12c:	d50f      	bpl.n	e14e <cip_multiplyH+0x5e>
                shift_right_block(tmp);
    e12e:	f7ff ff9a 	bl	e066 <shift_right_block>
                tmp[0] ^= 0xe1;
    e132:	f89d 3000 	ldrb.w	r3, [sp]
    e136:	f083 03e1 	eor.w	r3, r3, #225	; 0xe1
    e13a:	f88d 3000 	strb.w	r3, [sp]
        for (j = 0; j < 8; j++)
    e13e:	3e01      	subs	r6, #1
    e140:	d2e8      	bcs.n	e114 <cip_multiplyH+0x24>
    for (i = 0; i < 16; i++)
    e142:	3401      	adds	r4, #1
    e144:	45a0      	cmp	r8, r4
    e146:	d1e4      	bne.n	e112 <cip_multiplyH+0x22>
}
    e148:	b004      	add	sp, #16
    e14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                shift_right_block(tmp);
    e14e:	f7ff ff8a 	bl	e066 <shift_right_block>
    e152:	e7f4      	b.n	e13e <cip_multiplyH+0x4e>

0000e154 <cip_getGHash>:
{
    e154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    m = xlen / 16;
    e158:	2a00      	cmp	r2, #0
    e15a:	4616      	mov	r6, r2
    e15c:	bfb8      	it	lt
    e15e:	f102 060f 	addlt.w	r6, r2, #15
{
    e162:	4607      	mov	r7, r0
    e164:	4688      	mov	r8, r1
    e166:	4615      	mov	r5, r2
    e168:	461c      	mov	r4, r3
    m = xlen / 16;
    e16a:	1136      	asrs	r6, r6, #4
    for (i = 0; i < m; i++)
    e16c:	f04f 0a00 	mov.w	sl, #0
        cip_multiplyH(y, h, tmp);
    e170:	46e9      	mov	r9, sp
    for (i = 0; i < m; i++)
    e172:	45b2      	cmp	sl, r6
    e174:	eb08 110a 	add.w	r1, r8, sl, lsl #4
    e178:	db25      	blt.n	e1c6 <cip_getGHash+0x72>
    e17a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    e17e:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    if (x + xlen > xpos)
    e182:	44a8      	add	r8, r5
    e184:	4541      	cmp	r1, r8
    e186:	ea4f 1206 	mov.w	r2, r6, lsl #4
    e18a:	d219      	bcs.n	e1c0 <cip_getGHash+0x6c>
        memcpy(tmp, xpos, last);
    e18c:	466e      	mov	r6, sp
        size_t last = x + xlen - xpos;
    e18e:	1aad      	subs	r5, r5, r2
        memcpy(tmp, xpos, last);
    e190:	2310      	movs	r3, #16
    e192:	462a      	mov	r2, r5
    e194:	4630      	mov	r0, r6
    e196:	f00f fb89 	bl	1d8ac <__memcpy_chk>
    e19a:	f1c5 0210 	rsb	r2, r5, #16
    e19e:	2100      	movs	r1, #0
    e1a0:	1970      	adds	r0, r6, r5
    e1a2:	f00f fbb0 	bl	1d906 <memset>
        cip_xor(y, tmp);
    e1a6:	4631      	mov	r1, r6
    e1a8:	4620      	mov	r0, r4
    e1aa:	f7ff ff4e 	bl	e04a <cip_xor>
        cip_multiplyH(y, h, tmp);
    e1ae:	4632      	mov	r2, r6
    e1b0:	4639      	mov	r1, r7
    e1b2:	4620      	mov	r0, r4
    e1b4:	f7ff ff9c 	bl	e0f0 <cip_multiplyH>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e1b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e1bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    e1c0:	b004      	add	sp, #16
    e1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cip_xor(y, xpos);
    e1c6:	4620      	mov	r0, r4
    e1c8:	f7ff ff3f 	bl	e04a <cip_xor>
        cip_multiplyH(y, h, tmp);
    e1cc:	464a      	mov	r2, r9
    e1ce:	4639      	mov	r1, r7
    e1d0:	4620      	mov	r0, r4
    e1d2:	f7ff ff8d 	bl	e0f0 <cip_multiplyH>
    e1d6:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
    for (i = 0; i < m; i++)
    e1da:	f10a 0a01 	add.w	sl, sl, #1
    e1de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    e1e2:	e7c6      	b.n	e172 <cip_getGHash+0x1e>

0000e1e4 <aes_gcm_ghash>:
{
    e1e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    e1e8:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
    e1ec:	4606      	mov	r6, r0
    e1ee:	4698      	mov	r8, r3
    cip_getGHash(H, aad, aad_len, S);
    e1f0:	463b      	mov	r3, r7
{
    e1f2:	4615      	mov	r5, r2
    cip_getGHash(H, aad, aad_len, S);
    e1f4:	f7ff ffae 	bl	e154 <cip_getGHash>
    cip_getGHash(H, crypt, crypt_len, S);
    e1f8:	463b      	mov	r3, r7
    e1fa:	4622      	mov	r2, r4
    e1fc:	4641      	mov	r1, r8
    e1fe:	4630      	mov	r0, r6
    e200:	f7ff ffa8 	bl	e154 <cip_getGHash>
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    e204:	00ea      	lsls	r2, r5, #3
    PUT32(len_buf, (uint32_t)0);
    e206:	2300      	movs	r3, #0
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    e208:	f88d 2007 	strb.w	r2, [sp, #7]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    e20c:	f3c4 5247 	ubfx	r2, r4, #21, #8
    PUT32(len_buf, (uint32_t)0);
    e210:	9300      	str	r3, [sp, #0]
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    e212:	f88d 3004 	strb.w	r3, [sp, #4]
    e216:	f3c5 314f 	ubfx	r1, r5, #13, #16
    PUT32(len_buf + 8, (uint32_t)0);
    e21a:	9302      	str	r3, [sp, #8]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    e21c:	f88d 200c 	strb.w	r2, [sp, #12]
    e220:	00e3      	lsls	r3, r4, #3
    e222:	f3c4 324f 	ubfx	r2, r4, #13, #16
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    e226:	f88d 1005 	strb.w	r1, [sp, #5]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    e22a:	f88d 200d 	strb.w	r2, [sp, #13]
    e22e:	f88d 300f 	strb.w	r3, [sp, #15]
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    e232:	f3c5 1557 	ubfx	r5, r5, #5, #24
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    e236:	f3c4 1457 	ubfx	r4, r4, #5, #24
    cip_getGHash(H, len_buf, sizeof(len_buf), S);
    e23a:	463b      	mov	r3, r7
    e23c:	2210      	movs	r2, #16
    e23e:	4669      	mov	r1, sp
    e240:	4630      	mov	r0, r6
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    e242:	f88d 5006 	strb.w	r5, [sp, #6]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    e246:	f88d 400e 	strb.w	r4, [sp, #14]
    cip_getGHash(H, len_buf, sizeof(len_buf), S);
    e24a:	f7ff ff83 	bl	e154 <cip_getGHash>
}
    e24e:	b004      	add	sp, #16
    e250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e254 <cip_clear>:
{
    e254:	b538      	push	{r3, r4, r5, lr}
    target->invocationCounter = 1;
    e256:	2301      	movs	r3, #1
    target->security = DLMS_SECURITY_NONE;
    e258:	2500      	movs	r5, #0
{
    e25a:	4604      	mov	r4, r0
    target->invocationCounter = 1;
    e25c:	61c3      	str	r3, [r0, #28]
    target->security = DLMS_SECURITY_NONE;
    e25e:	7005      	strb	r5, [r0, #0]
    target->encrypt = 0;
    e260:	7085      	strb	r5, [r0, #2]
    bb_clear(&target->blockCipherKey);
    e262:	3004      	adds	r0, #4
    e264:	f7ff fce5 	bl	dc32 <bb_clear>
    bb_clear(&target->systemTitle);
    e268:	f104 0010 	add.w	r0, r4, #16
    e26c:	f7ff fce1 	bl	dc32 <bb_clear>
    bb_clear(&target->authenticationKey);
    e270:	f104 0020 	add.w	r0, r4, #32
    e274:	f7ff fcdd 	bl	dc32 <bb_clear>
    if (target->dedicatedKey != NULL)
    e278:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e27a:	b128      	cbz	r0, e288 <cip_clear+0x34>
        bb_clear(target->dedicatedKey);
    e27c:	f7ff fcd9 	bl	dc32 <bb_clear>
        gxfree(target->dedicatedKey);
    e280:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e282:	f7fe faf7 	bl	c874 <free>
        target->dedicatedKey = NULL;
    e286:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    e288:	bd38      	pop	{r3, r4, r5, pc}

0000e28a <cip_gctr.part.0>:
static void cip_gctr(uint32_t* aes, const unsigned char* icb, unsigned char* in, int len, unsigned char* out)
    e28a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e28e:	4681      	mov	r9, r0
    e290:	4693      	mov	fp, r2
    e292:	461d      	mov	r5, r3
    n = len / 16;
    e294:	111c      	asrs	r4, r3, #4
    memcpy(cb, icb, 16);
    e296:	c90f      	ldmia	r1, {r0, r1, r2, r3}
static void cip_gctr(uint32_t* aes, const unsigned char* icb, unsigned char* in, int len, unsigned char* out)
    e298:	b089      	sub	sp, #36	; 0x24
    e29a:	466e      	mov	r6, sp
    e29c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    e2a0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    for (i = 0; i < n; i++)
    e2a4:	f04f 0a00 	mov.w	sl, #0
    e2a8:	4554      	cmp	r4, sl
    e2aa:	ea4f 120a 	mov.w	r2, sl, lsl #4
    e2ae:	eb08 130a 	add.w	r3, r8, sl, lsl #4
    e2b2:	eb0b 170a 	add.w	r7, fp, sl, lsl #4
    e2b6:	d11c      	bne.n	e2f2 <cip_gctr.part.0+0x68>
    if (last)
    e2b8:	1aad      	subs	r5, r5, r2
    e2ba:	463c      	mov	r4, r7
    e2bc:	461f      	mov	r7, r3
    e2be:	d015      	beq.n	e2ec <cip_gctr.part.0+0x62>
        aes_Encrypt(aes, aes[60], cb, tmp);
    e2c0:	4632      	mov	r2, r6
    e2c2:	f8d9 10f0 	ldr.w	r1, [r9, #240]	; 0xf0
    e2c6:	ab04      	add	r3, sp, #16
    e2c8:	4648      	mov	r0, r9
    e2ca:	f7f3 faa1 	bl	1810 <aes_Encrypt>
        for (i = 0; i < last; i++)
    e2ce:	4425      	add	r5, r4
    e2d0:	aa04      	add	r2, sp, #16
            if (out == NULL)
    e2d2:	f814 3b01 	ldrb.w	r3, [r4], #1
                *pin ^= tmp[i];
    e2d6:	7811      	ldrb	r1, [r2, #0]
    e2d8:	404b      	eors	r3, r1
            if (out == NULL)
    e2da:	f1b8 0f00 	cmp.w	r8, #0
    e2de:	d123      	bne.n	e328 <cip_gctr.part.0+0x9e>
                *pin ^= tmp[i];
    e2e0:	f804 3c01 	strb.w	r3, [r4, #-1]
        for (i = 0; i < last; i++)
    e2e4:	42a5      	cmp	r5, r4
    e2e6:	f102 0201 	add.w	r2, r2, #1
    e2ea:	d1f2      	bne.n	e2d2 <cip_gctr.part.0+0x48>
}
    e2ec:	b009      	add	sp, #36	; 0x24
    e2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (out == NULL)
    e2f2:	f8d9 10f0 	ldr.w	r1, [r9, #240]	; 0xf0
    e2f6:	f1b8 0f00 	cmp.w	r8, #0
    e2fa:	d10e      	bne.n	e31a <cip_gctr.part.0+0x90>
            aes_Encrypt(aes, aes[60], cb, tmp);
    e2fc:	4648      	mov	r0, r9
    e2fe:	ab04      	add	r3, sp, #16
    e300:	4632      	mov	r2, r6
    e302:	f7f3 fa85 	bl	1810 <aes_Encrypt>
            cip_xor(pin, tmp);
    e306:	a904      	add	r1, sp, #16
    e308:	4638      	mov	r0, r7
            cip_xor(pout, pin);
    e30a:	f7ff fe9e 	bl	e04a <cip_xor>
        cip_inc32(cb);
    e30e:	4630      	mov	r0, r6
    e310:	f7ff fee8 	bl	e0e4 <cip_inc32>
    for (i = 0; i < n; i++)
    e314:	f10a 0a01 	add.w	sl, sl, #1
    e318:	e7c6      	b.n	e2a8 <cip_gctr.part.0+0x1e>
            aes_Encrypt(aes, aes[60], cb, pout);
    e31a:	4648      	mov	r0, r9
    e31c:	4632      	mov	r2, r6
    e31e:	f7f3 fa77 	bl	1810 <aes_Encrypt>
            cip_xor(pout, pin);
    e322:	4639      	mov	r1, r7
    e324:	4618      	mov	r0, r3
    e326:	e7f0      	b.n	e30a <cip_gctr.part.0+0x80>
                *pout = *pin++ ^ tmp[i];
    e328:	f807 3b01 	strb.w	r3, [r7], #1
                ++pout;
    e32c:	e7da      	b.n	e2e4 <cip_gctr.part.0+0x5a>

0000e32e <aes_gcm_gctr.constprop.0>:
static void aes_gcm_gctr(uint32_t* aes, const unsigned char* J0, unsigned char* in, int len, unsigned char* out)
    e32e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e330:	4606      	mov	r6, r0
    e332:	b087      	sub	sp, #28
    e334:	4617      	mov	r7, r2
    if (len == 0)
    e336:	461d      	mov	r5, r3
    e338:	b173      	cbz	r3, e358 <aes_gcm_gctr.constprop.0+0x2a>
    memcpy(J0inc, J0, 16);
    e33a:	c90f      	ldmia	r1, {r0, r1, r2, r3}
    e33c:	ac02      	add	r4, sp, #8
    e33e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cip_inc32(J0inc);
    e342:	4620      	mov	r0, r4
    e344:	f7ff fece 	bl	e0e4 <cip_inc32>
    if (len == 0)
    e348:	2300      	movs	r3, #0
    e34a:	9300      	str	r3, [sp, #0]
    e34c:	463a      	mov	r2, r7
    e34e:	462b      	mov	r3, r5
    e350:	4621      	mov	r1, r4
    e352:	4630      	mov	r0, r6
    e354:	f7ff ff99 	bl	e28a <cip_gctr.part.0>
}
    e358:	b007      	add	sp, #28
    e35a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e35c <cosem_getObjectSize>:
    switch (type)
    e35c:	3801      	subs	r0, #1
    e35e:	2872      	cmp	r0, #114	; 0x72
    e360:	d866      	bhi.n	e430 <cosem_getObjectSize+0xd4>
    e362:	e8df f000 	tbb	[pc, r0]
    e366:	6563      	.short	0x6563
    e368:	433f4f3a 	.word	0x433f4f3a
    e36c:	5f5f5b5d 	.word	0x5f5f5b5d
    e370:	65653a5f 	.word	0x65653a5f
    e374:	435f6553 	.word	0x435f6553
    e378:	3a47455d 	.word	0x3a47455d
    e37c:	634b5963 	.word	0x634b5963
    e380:	4f473d59 	.word	0x4f473d59
    e384:	65656565 	.word	0x65656565
    e388:	65656565 	.word	0x65656565
    e38c:	41634d65 	.word	0x41634d65
    e390:	493a4d5f 	.word	0x493a4d5f
    e394:	6165654f 	.word	0x6165654f
    e398:	655b5763 	.word	0x655b5763
    e39c:	634b5f65 	.word	0x634b5f65
    e3a0:	553a655f 	.word	0x553a655f
    e3a4:	654f5549 	.word	0x654f5549
    e3a8:	4b655d65 	.word	0x4b655d65
    e3ac:	4b656145 	.word	0x4b656145
    e3b0:	65656565 	.word	0x65656565
    e3b4:	57574b65 	.word	0x57574b65
    e3b8:	635b3a59 	.word	0x635b3a59
    e3bc:	65656565 	.word	0x65656565
    e3c0:	65656565 	.word	0x65656565
    e3c4:	65656565 	.word	0x65656565
    e3c8:	49496565 	.word	0x49496565
    e3cc:	65656349 	.word	0x65656349
    e3d0:	65656565 	.word	0x65656565
    e3d4:	65536151 	.word	0x65536151
    e3d8:	4f          	.byte	0x4f
    e3d9:	00          	.byte	0x00
        size = sizeof(gxSapAssignment);
    e3da:	2028      	movs	r0, #40	; 0x28
    return size;
    e3dc:	b280      	uxth	r0, r0
    e3de:	4770      	bx	lr
        size = sizeof(gxAutoAnswer);
    e3e0:	2024      	movs	r0, #36	; 0x24
        break;
    e3e2:	e7fb      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxDemandRegister);
    e3e4:	2068      	movs	r0, #104	; 0x68
        break;
    e3e6:	e7f9      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxIp4Setup);
    e3e8:	2050      	movs	r0, #80	; 0x50
        break;
    e3ea:	e7f7      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxImageTransfer);
    e3ec:	2030      	movs	r0, #48	; 0x30
        break;
    e3ee:	e7f5      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxLimiter);
    e3f0:	2080      	movs	r0, #128	; 0x80
        break;
    e3f2:	e7f3      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxRegisterMonitor);
    e3f4:	2034      	movs	r0, #52	; 0x34
        break;
    e3f6:	e7f1      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxZigBeeSasStartup);
    e3f8:	2010      	movs	r0, #16
        break;
    e3fa:	e7ef      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxMBusMasterPortSetup);
    e3fc:	2014      	movs	r0, #20
        break;
    e3fe:	e7ed      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxPushSetup);
    e400:	2048      	movs	r0, #72	; 0x48
        break;
    e402:	e7eb      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxDataProtection);
    e404:	2040      	movs	r0, #64	; 0x40
        break;
    e406:	e7e9      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxAccount);
    e408:	208c      	movs	r0, #140	; 0x8c
        break;
    e40a:	e7e7      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxCharge);
    e40c:	2074      	movs	r0, #116	; 0x74
        break;
    e40e:	e7e5      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxCompactData);
    e410:	203c      	movs	r0, #60	; 0x3c
        break;
    e412:	e7e3      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcPhysicalLayerCounters);
    e414:	2018      	movs	r0, #24
        break;
    e416:	e7e1      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcMacFunctionalParameters);
    e418:	202c      	movs	r0, #44	; 0x2c
        break;
    e41a:	e7df      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcMacNetworkAdministrationData);
    e41c:	204c      	movs	r0, #76	; 0x4c
        break;
    e41e:	e7dd      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxArbitrator);
    e420:	2044      	movs	r0, #68	; 0x44
        break;
    e422:	e7db      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxIec8802LlcType3Setup);
    e424:	201c      	movs	r0, #28
        break;
    e426:	e7d9      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxSFSKPhyMacSetUp);
    e428:	2038      	movs	r0, #56	; 0x38
        break;
    e42a:	e7d7      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxData);
    e42c:	2020      	movs	r0, #32
    e42e:	e7d5      	b.n	e3dc <cosem_getObjectSize+0x80>
        size = sizeof(gxSapAssignment);
    e430:	2000      	movs	r0, #0
}
    e432:	4770      	bx	lr

0000e434 <cosem_setLogicalName>:
    e434:	680b      	ldr	r3, [r1, #0]
    e436:	f8c0 3006 	str.w	r3, [r0, #6]
    e43a:	888b      	ldrh	r3, [r1, #4]
    e43c:	8143      	strh	r3, [r0, #10]
}
    e43e:	2000      	movs	r0, #0
    e440:	4770      	bx	lr

0000e442 <cosem_init2>:
{
    e442:	4613      	mov	r3, r2
	return cosem_init4((void*) object, expectedSize, type, ln);
    e444:	460a      	mov	r2, r1
    e446:	2100      	movs	r1, #0
    e448:	f7f3 bde6 	b.w	2018 <cosem_init4>

0000e44c <cosem_getStructure>:
{
    e44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e44e:	460c      	mov	r4, r1
    if ((ret = bb_getUInt8(bb, &value)) != 0)
    e450:	f10d 0105 	add.w	r1, sp, #5
{
    e454:	4605      	mov	r5, r0
    if ((ret = bb_getUInt8(bb, &value)) != 0)
    e456:	f7ff fc02 	bl	dc5e <bb_getUInt8>
    e45a:	b960      	cbnz	r0, e476 <cosem_getStructure+0x2a>
    if (value != DLMS_DATA_TYPE_STRUCTURE)
    e45c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e460:	2b02      	cmp	r3, #2
    e462:	d10a      	bne.n	e47a <cosem_getStructure+0x2e>
    if ((ret = hlp_getObjectCount2(bb, &cnt)) != 0)
    e464:	f10d 0106 	add.w	r1, sp, #6
    e468:	4628      	mov	r0, r5
    e46a:	f00c fb53 	bl	1ab14 <hlp_getObjectCount2>
    e46e:	b910      	cbnz	r0, e476 <cosem_getStructure+0x2a>
    *count = cnt;
    e470:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e474:	8023      	strh	r3, [r4, #0]
}
    e476:	b003      	add	sp, #12
    e478:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    e47a:	200c      	movs	r0, #12
    e47c:	e7fb      	b.n	e476 <cosem_getStructure+0x2a>

0000e47e <cosem_checkStructure>:
{
    e47e:	b513      	push	{r0, r1, r4, lr}
    e480:	460c      	mov	r4, r1
    if ((ret = cosem_getStructure(bb, &cnt)) == 0)
    e482:	f10d 0106 	add.w	r1, sp, #6
    e486:	f7ff ffe1 	bl	e44c <cosem_getStructure>
    e48a:	b920      	cbnz	r0, e496 <cosem_checkStructure+0x18>
        if (cnt != expectedItemCount)
    e48c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
    e490:	42a3      	cmp	r3, r4
    e492:	bf18      	it	ne
    e494:	2009      	movne	r0, #9
}
    e496:	b002      	add	sp, #8
    e498:	bd10      	pop	{r4, pc}

0000e49a <cosem_checkArray2>:
{
    e49a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e49c:	4605      	mov	r5, r0
    e49e:	460c      	mov	r4, r1
    if (checkDataType)
    e4a0:	b93a      	cbnz	r2, e4b2 <cosem_checkArray2+0x18>
    if ((ret = hlp_getObjectCount2(bb, &cnt)) != 0)
    e4a2:	f10d 0106 	add.w	r1, sp, #6
    e4a6:	4628      	mov	r0, r5
    e4a8:	f00c fb34 	bl	1ab14 <hlp_getObjectCount2>
    e4ac:	b168      	cbz	r0, e4ca <cosem_checkArray2+0x30>
}
    e4ae:	b003      	add	sp, #12
    e4b0:	bd30      	pop	{r4, r5, pc}
        if ((ret = bb_getUInt8(bb, &ch)) != 0)
    e4b2:	f10d 0105 	add.w	r1, sp, #5
    e4b6:	f7ff fbd2 	bl	dc5e <bb_getUInt8>
    e4ba:	2800      	cmp	r0, #0
    e4bc:	d1f7      	bne.n	e4ae <cosem_checkArray2+0x14>
        if (ch != DLMS_DATA_TYPE_ARRAY)
    e4be:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e4c2:	2b01      	cmp	r3, #1
    e4c4:	d0ed      	beq.n	e4a2 <cosem_checkArray2+0x8>
            return DLMS_ERROR_CODE_UNMATCH_TYPE;
    e4c6:	200c      	movs	r0, #12
    e4c8:	e7f1      	b.n	e4ae <cosem_checkArray2+0x14>
    if (*count < cnt)
    e4ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    e4ce:	8822      	ldrh	r2, [r4, #0]
    e4d0:	429a      	cmp	r2, r3
    e4d2:	d301      	bcc.n	e4d8 <cosem_checkArray2+0x3e>
    * count = cnt;
    e4d4:	8023      	strh	r3, [r4, #0]
    return 0;
    e4d6:	e7ea      	b.n	e4ae <cosem_checkArray2+0x14>
        return DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
    e4d8:	2009      	movs	r0, #9
    e4da:	e7e8      	b.n	e4ae <cosem_checkArray2+0x14>

0000e4dc <cosem_checkArray>:
    return cosem_checkArray2(bb, count, 1);
    e4dc:	2201      	movs	r2, #1
    e4de:	f7ff bfdc 	b.w	e49a <cosem_checkArray2>

0000e4e2 <cosem_getUInt8>:
{
    e4e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e4e4:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    e4e6:	f10d 0107 	add.w	r1, sp, #7
{
    e4ea:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    e4ec:	f7ff fbb7 	bl	dc5e <bb_getUInt8>
    e4f0:	b938      	cbnz	r0, e502 <cosem_getUInt8+0x20>
    if (tmp != DLMS_DATA_TYPE_UINT8)
    e4f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4f6:	2b11      	cmp	r3, #17
    e4f8:	d105      	bne.n	e506 <cosem_getUInt8+0x24>
    if ((ret = bb_getUInt8(bb, value)) != 0)
    e4fa:	4629      	mov	r1, r5
    e4fc:	4620      	mov	r0, r4
    e4fe:	f7ff fbae 	bl	dc5e <bb_getUInt8>
}
    e502:	b003      	add	sp, #12
    e504:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    e506:	200c      	movs	r0, #12
    e508:	e7fb      	b.n	e502 <cosem_getUInt8+0x20>

0000e50a <cosem_getUInt16>:
{
    e50a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e50c:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    e50e:	f10d 0107 	add.w	r1, sp, #7
{
    e512:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    e514:	f7ff fba3 	bl	dc5e <bb_getUInt8>
    e518:	b938      	cbnz	r0, e52a <cosem_getUInt16+0x20>
    if (tmp != DLMS_DATA_TYPE_UINT16)
    e51a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e51e:	2b12      	cmp	r3, #18
    e520:	d105      	bne.n	e52e <cosem_getUInt16+0x24>
    if ((ret = bb_getUInt16(bb, value)) != 0)
    e522:	4629      	mov	r1, r5
    e524:	4620      	mov	r0, r4
    e526:	f7ff fbc3 	bl	dcb0 <bb_getUInt16>
}
    e52a:	b003      	add	sp, #12
    e52c:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    e52e:	200c      	movs	r0, #12
    e530:	e7fb      	b.n	e52a <cosem_getUInt16+0x20>

0000e532 <cosem_setDateTimeAsOctetString>:
{
    e532:	b538      	push	{r3, r4, r5, lr}
    e534:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e536:	2109      	movs	r1, #9
{
    e538:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e53a:	f7ff fa20 	bl	d97e <bb_setUInt8>
    e53e:	b950      	cbnz	r0, e556 <cosem_setDateTimeAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 12)) != 0 ||
    e540:	210c      	movs	r1, #12
    e542:	4620      	mov	r0, r4
    e544:	f7ff fa1b 	bl	d97e <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e548:	b928      	cbnz	r0, e556 <cosem_setDateTimeAsOctetString+0x24>
        (ret = var_getDateTime2(value, bb)) != 0)
    e54a:	4621      	mov	r1, r4
    e54c:	4628      	mov	r0, r5
}
    e54e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDateTime2(value, bb)) != 0)
    e552:	f7f5 bf7b 	b.w	444c <var_getDateTime2>
}
    e556:	bd38      	pop	{r3, r4, r5, pc}

0000e558 <cosem_setDateAsOctetString>:
{
    e558:	b538      	push	{r3, r4, r5, lr}
    e55a:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e55c:	2109      	movs	r1, #9
{
    e55e:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e560:	f7ff fa0d 	bl	d97e <bb_setUInt8>
    e564:	b950      	cbnz	r0, e57c <cosem_setDateAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 5)) != 0 ||
    e566:	2105      	movs	r1, #5
    e568:	4620      	mov	r0, r4
    e56a:	f7ff fa08 	bl	d97e <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e56e:	b928      	cbnz	r0, e57c <cosem_setDateAsOctetString+0x24>
        (ret = var_getDate(value, bb)) != 0)
    e570:	4621      	mov	r1, r4
    e572:	4628      	mov	r0, r5
}
    e574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDate(value, bb)) != 0)
    e578:	f00c be5e 	b.w	1b238 <var_getDate>
}
    e57c:	bd38      	pop	{r3, r4, r5, pc}

0000e57e <cosem_setBitString>:
{
    e57e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e582:	4605      	mov	r5, r0
    e584:	460f      	mov	r7, r1
    uint16_t capacity = count == 0 ? 2 : (3 + (count / 8));
    e586:	4616      	mov	r6, r2
    e588:	b362      	cbz	r2, e5e4 <cosem_setBitString+0x66>
    e58a:	08d4      	lsrs	r4, r2, #3
    e58c:	3403      	adds	r4, #3
    capacity += (uint16_t)bb_size(bb);
    e58e:	4628      	mov	r0, r5
    e590:	f7ff f989 	bl	d8a6 <bb_size>
    e594:	4404      	add	r4, r0
    if (bb_getCapacity(bb) < capacity)
    e596:	4628      	mov	r0, r5
    e598:	f7ff f981 	bl	d89e <bb_getCapacity>
    capacity += (uint16_t)bb_size(bb);
    e59c:	b2a4      	uxth	r4, r4
    if (bb_getCapacity(bb) < capacity)
    e59e:	42a0      	cmp	r0, r4
    e5a0:	d322      	bcc.n	e5e8 <cosem_setBitString+0x6a>
        (ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BIT_STRING)) == 0 &&
    e5a2:	2104      	movs	r1, #4
    e5a4:	4628      	mov	r0, r5
    e5a6:	f7ff f9ea 	bl	d97e <bb_setUInt8>
    if (ret == 0 &&
    e5aa:	4604      	mov	r4, r0
    e5ac:	bb18      	cbnz	r0, e5f6 <cosem_setBitString+0x78>
        (ret = hlp_setObjectCount(count, bb)) == 0)
    e5ae:	4629      	mov	r1, r5
    e5b0:	4630      	mov	r0, r6
    e5b2:	f00c fae0 	bl	1ab76 <hlp_setObjectCount>
        (ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BIT_STRING)) == 0 &&
    e5b6:	4604      	mov	r4, r0
    e5b8:	b9e8      	cbnz	r0, e5f6 <cosem_setBitString+0x78>
        ba_attach(&ba, bb->data + bb->size, 0, (uint16_t)(8 * (bb->size - bb->size)));
    e5ba:	6828      	ldr	r0, [r5, #0]
    e5bc:	88e9      	ldrh	r1, [r5, #6]
    e5be:	4623      	mov	r3, r4
    e5c0:	4401      	add	r1, r0
    e5c2:	4622      	mov	r2, r4
    e5c4:	4668      	mov	r0, sp
    e5c6:	f7ff f86e 	bl	d6a6 <ba_attach>
        for (pos = 0; pos != count; ++pos)
    e5ca:	46a0      	mov	r8, r4
    e5cc:	4546      	cmp	r6, r8
    e5ce:	fa1f f188 	uxth.w	r1, r8
    e5d2:	d114      	bne.n	e5fe <cosem_setBitString+0x80>
    e5d4:	2400      	movs	r4, #0
        bb->size += ba_getByteCount(count);
    e5d6:	4630      	mov	r0, r6
    e5d8:	f7f2 ffd0 	bl	157c <ba_getByteCount>
    e5dc:	88eb      	ldrh	r3, [r5, #6]
    e5de:	4418      	add	r0, r3
    e5e0:	80e8      	strh	r0, [r5, #6]
    return ret;
    e5e2:	e008      	b.n	e5f6 <cosem_setBitString+0x78>
    uint16_t capacity = count == 0 ? 2 : (3 + (count / 8));
    e5e4:	2402      	movs	r4, #2
    e5e6:	e7d2      	b.n	e58e <cosem_setBitString+0x10>
        ret = bb_capacity(bb, capacity);
    e5e8:	4621      	mov	r1, r4
    e5ea:	4628      	mov	r0, r5
    e5ec:	f7ff f964 	bl	d8b8 <bb_capacity>
    if (ret == 0 &&
    e5f0:	4604      	mov	r4, r0
    e5f2:	2800      	cmp	r0, #0
    e5f4:	d0d5      	beq.n	e5a2 <cosem_setBitString+0x24>
}
    e5f6:	4620      	mov	r0, r4
    e5f8:	b002      	add	sp, #8
    e5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((ret = ba_setByIndex(&ba, pos, value & 01)) != 0)
    e5fe:	f007 0201 	and.w	r2, r7, #1
    e602:	4668      	mov	r0, sp
    e604:	f7ff f880 	bl	d708 <ba_setByIndex>
    e608:	f108 0801 	add.w	r8, r8, #1
    e60c:	4604      	mov	r4, r0
    e60e:	2800      	cmp	r0, #0
    e610:	d1e1      	bne.n	e5d6 <cosem_setBitString+0x58>
            value >>= 1;
    e612:	087f      	lsrs	r7, r7, #1
        for (pos = 0; pos != count; ++pos)
    e614:	e7da      	b.n	e5cc <cosem_setBitString+0x4e>

0000e616 <cosem_setTimeAsOctetString>:
{
    e616:	b538      	push	{r3, r4, r5, lr}
    e618:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e61a:	2109      	movs	r1, #9
{
    e61c:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e61e:	f7ff f9ae 	bl	d97e <bb_setUInt8>
    e622:	b950      	cbnz	r0, e63a <cosem_setTimeAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 4)) != 0 ||
    e624:	2104      	movs	r1, #4
    e626:	4620      	mov	r0, r4
    e628:	f7ff f9a9 	bl	d97e <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e62c:	b928      	cbnz	r0, e63a <cosem_setTimeAsOctetString+0x24>
        (ret = var_getTime(value, bb)) != 0)
    e62e:	4621      	mov	r1, r4
    e630:	4628      	mov	r0, r5
}
    e632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getTime(value, bb)) != 0)
    e636:	f00c be62 	b.w	1b2fe <var_getTime>
}
    e63a:	bd38      	pop	{r3, r4, r5, pc}

0000e63c <cosem_setOctetString>:
{
    e63c:	b538      	push	{r3, r4, r5, lr}
    if (value == NULL)
    e63e:	460c      	mov	r4, r1
{
    e640:	4605      	mov	r5, r0
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e642:	2109      	movs	r1, #9
    if (value == NULL)
    e644:	b944      	cbnz	r4, e658 <cosem_setOctetString+0x1c>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e646:	f7ff f99a 	bl	d97e <bb_setUInt8>
    e64a:	b9a0      	cbnz	r0, e676 <cosem_setOctetString+0x3a>
            (ret = bb_setUInt8(bb, 0)) != 0)
    e64c:	4601      	mov	r1, r0
    e64e:	4628      	mov	r0, r5
}
    e650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    e654:	f7ff b993 	b.w	d97e <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e658:	f7ff f991 	bl	d97e <bb_setUInt8>
    e65c:	b958      	cbnz	r0, e676 <cosem_setOctetString+0x3a>
        (ret = bb_setUInt8(bb, (unsigned char)value->size)) != 0 ||
    e65e:	79a1      	ldrb	r1, [r4, #6]
    e660:	4628      	mov	r0, r5
    e662:	f7ff f98c 	bl	d97e <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e666:	b930      	cbnz	r0, e676 <cosem_setOctetString+0x3a>
        (ret = bb_set(bb, value->data, (uint16_t)value->size)) != 0)
    e668:	88e2      	ldrh	r2, [r4, #6]
    e66a:	6821      	ldr	r1, [r4, #0]
    e66c:	4628      	mov	r0, r5
}
    e66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_set(bb, value->data, (uint16_t)value->size)) != 0)
    e672:	f7ff ba6a 	b.w	db4a <bb_set>
}
    e676:	bd38      	pop	{r3, r4, r5, pc}

0000e678 <cosem_setString>:
{
    e678:	b570      	push	{r4, r5, r6, lr}
    if (value == NULL || len == 0)
    e67a:	460e      	mov	r6, r1
{
    e67c:	4604      	mov	r4, r0
    e67e:	4615      	mov	r5, r2
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    e680:	210a      	movs	r1, #10
    if (value == NULL || len == 0)
    e682:	b106      	cbz	r6, e686 <cosem_setString+0xe>
    e684:	b94a      	cbnz	r2, e69a <cosem_setString+0x22>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    e686:	4620      	mov	r0, r4
    e688:	f7ff f979 	bl	d97e <bb_setUInt8>
    e68c:	b9a0      	cbnz	r0, e6b8 <cosem_setString+0x40>
            (ret = bb_setUInt8(bb, 0)) != 0)
    e68e:	4601      	mov	r1, r0
    e690:	4620      	mov	r0, r4
}
    e692:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    e696:	f7ff b972 	b.w	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    e69a:	f7ff f970 	bl	d97e <bb_setUInt8>
    e69e:	b958      	cbnz	r0, e6b8 <cosem_setString+0x40>
            (ret = hlp_setObjectCount(len, bb)) != 0 ||
    e6a0:	4621      	mov	r1, r4
    e6a2:	4628      	mov	r0, r5
    e6a4:	f00c fa67 	bl	1ab76 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    e6a8:	b930      	cbnz	r0, e6b8 <cosem_setString+0x40>
            (ret = bb_set(bb, (unsigned char*)value, len)) != 0)
    e6aa:	462a      	mov	r2, r5
    e6ac:	4631      	mov	r1, r6
    e6ae:	4620      	mov	r0, r4
}
    e6b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_set(bb, (unsigned char*)value, len)) != 0)
    e6b4:	f7ff ba49 	b.w	db4a <bb_set>
}
    e6b8:	bd70      	pop	{r4, r5, r6, pc}

0000e6ba <cosem_setDateTime>:
{
    e6ba:	b538      	push	{r3, r4, r5, lr}
    e6bc:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_DATETIME)) != 0 ||
    e6be:	2119      	movs	r1, #25
{
    e6c0:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_DATETIME)) != 0 ||
    e6c2:	f7ff f95c 	bl	d97e <bb_setUInt8>
    e6c6:	b928      	cbnz	r0, e6d4 <cosem_setDateTime+0x1a>
        (ret = var_getDateTime2(value, bb)) != 0)
    e6c8:	4629      	mov	r1, r5
    e6ca:	4620      	mov	r0, r4
}
    e6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDateTime2(value, bb)) != 0)
    e6d0:	f7f5 bebc 	b.w	444c <var_getDateTime2>
}
    e6d4:	bd38      	pop	{r3, r4, r5, pc}

0000e6d6 <cosem_setOctetString2>:
{
    e6d6:	b570      	push	{r4, r5, r6, lr}
    if (value == NULL || size == 0)
    e6d8:	460e      	mov	r6, r1
{
    e6da:	4604      	mov	r4, r0
    e6dc:	4615      	mov	r5, r2
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e6de:	2109      	movs	r1, #9
    if (value == NULL || size == 0)
    e6e0:	b106      	cbz	r6, e6e4 <cosem_setOctetString2+0xe>
    e6e2:	b94a      	cbnz	r2, e6f8 <cosem_setOctetString2+0x22>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e6e4:	4620      	mov	r0, r4
    e6e6:	f7ff f94a 	bl	d97e <bb_setUInt8>
    e6ea:	b9a0      	cbnz	r0, e716 <cosem_setOctetString2+0x40>
            (ret = bb_setUInt8(bb, 0)) != 0)
    e6ec:	4601      	mov	r1, r0
    e6ee:	4620      	mov	r0, r4
}
    e6f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    e6f4:	f7ff b943 	b.w	d97e <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e6f8:	f7ff f941 	bl	d97e <bb_setUInt8>
    e6fc:	b958      	cbnz	r0, e716 <cosem_setOctetString2+0x40>
        (ret = bb_setUInt8(bb, (unsigned char)size)) != 0 ||
    e6fe:	b2e9      	uxtb	r1, r5
    e700:	4620      	mov	r0, r4
    e702:	f7ff f93c 	bl	d97e <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    e706:	b930      	cbnz	r0, e716 <cosem_setOctetString2+0x40>
        (ret = bb_set(bb, value, size)) != 0)
    e708:	462a      	mov	r2, r5
    e70a:	4631      	mov	r1, r6
    e70c:	4620      	mov	r0, r4
}
    e70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (ret = bb_set(bb, value, size)) != 0)
    e712:	f7ff ba1a 	b.w	db4a <bb_set>
}
    e716:	bd70      	pop	{r4, r5, r6, pc}

0000e718 <cosem_setUInt8>:
{
    e718:	b538      	push	{r3, r4, r5, lr}
    e71a:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT8)) != 0 ||
    e71c:	2111      	movs	r1, #17
{
    e71e:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT8)) != 0 ||
    e720:	f7ff f92d 	bl	d97e <bb_setUInt8>
    e724:	b928      	cbnz	r0, e732 <cosem_setUInt8+0x1a>
        (ret = bb_setUInt8(bb, value)) != 0)
    e726:	4629      	mov	r1, r5
    e728:	4620      	mov	r0, r4
}
    e72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt8(bb, value)) != 0)
    e72e:	f7ff b926 	b.w	d97e <bb_setUInt8>
}
    e732:	bd38      	pop	{r3, r4, r5, pc}

0000e734 <cosem_setUInt16>:
{
    e734:	b538      	push	{r3, r4, r5, lr}
    e736:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT16)) != 0 ||
    e738:	2112      	movs	r1, #18
{
    e73a:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT16)) != 0 ||
    e73c:	f7ff f91f 	bl	d97e <bb_setUInt8>
    e740:	b928      	cbnz	r0, e74e <cosem_setUInt16+0x1a>
        (ret = bb_setUInt16(bb, value)) != 0)
    e742:	4629      	mov	r1, r5
    e744:	4620      	mov	r0, r4
}
    e746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt16(bb, value)) != 0)
    e74a:	f7ff b93a 	b.w	d9c2 <bb_setUInt16>
}
    e74e:	bd38      	pop	{r3, r4, r5, pc}

0000e750 <cosem_setUInt32>:
{
    e750:	b538      	push	{r3, r4, r5, lr}
    e752:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT32)) != 0 ||
    e754:	2106      	movs	r1, #6
{
    e756:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT32)) != 0 ||
    e758:	f7ff f911 	bl	d97e <bb_setUInt8>
    e75c:	b928      	cbnz	r0, e76a <cosem_setUInt32+0x1a>
        (ret = bb_setUInt32(bb, value)) != 0)
    e75e:	4629      	mov	r1, r5
    e760:	4620      	mov	r0, r4
}
    e762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt32(bb, value)) != 0)
    e766:	f7ff b94e 	b.w	da06 <bb_setUInt32>
}
    e76a:	bd38      	pop	{r3, r4, r5, pc}

0000e76c <cosem_setInt8>:
{
    e76c:	b538      	push	{r3, r4, r5, lr}
    e76e:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT8)) != 0 ||
    e770:	210f      	movs	r1, #15
{
    e772:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT8)) != 0 ||
    e774:	f7ff f903 	bl	d97e <bb_setUInt8>
    e778:	b928      	cbnz	r0, e786 <cosem_setInt8+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    e77a:	4629      	mov	r1, r5
    e77c:	4620      	mov	r0, r4
}
    e77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    e782:	f7ff b9d9 	b.w	db38 <bb_setInt8>
}
    e786:	bd38      	pop	{r3, r4, r5, pc}

0000e788 <cosem_setInt16>:
{
    e788:	b538      	push	{r3, r4, r5, lr}
    e78a:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT16)) != 0 ||
    e78c:	2110      	movs	r1, #16
{
    e78e:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT16)) != 0 ||
    e790:	f7ff f8f5 	bl	d97e <bb_setUInt8>
    e794:	b928      	cbnz	r0, e7a2 <cosem_setInt16+0x1a>
        (ret = bb_setInt16(bb, value)) != 0)
    e796:	4629      	mov	r1, r5
    e798:	4620      	mov	r0, r4
}
    e79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt16(bb, value)) != 0)
    e79e:	f7ff b9cd 	b.w	db3c <bb_setInt16>
}
    e7a2:	bd38      	pop	{r3, r4, r5, pc}

0000e7a4 <cosem_setInt32>:
{
    e7a4:	b538      	push	{r3, r4, r5, lr}
    e7a6:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT32)) != 0 ||
    e7a8:	2105      	movs	r1, #5
{
    e7aa:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT32)) != 0 ||
    e7ac:	f7ff f8e7 	bl	d97e <bb_setUInt8>
    e7b0:	b928      	cbnz	r0, e7be <cosem_setInt32+0x1a>
        (ret = bb_setInt32(bb, value)) != 0)
    e7b2:	4629      	mov	r1, r5
    e7b4:	4620      	mov	r0, r4
}
    e7b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt32(bb, value)) != 0)
    e7ba:	f7ff b9c2 	b.w	db42 <bb_setInt32>
}
    e7be:	bd38      	pop	{r3, r4, r5, pc}

0000e7c0 <cosem_setVariant>:
{
    e7c0:	460a      	mov	r2, r1
    if (value->vt == DLMS_DATA_TYPE_NONE)
    e7c2:	7809      	ldrb	r1, [r1, #0]
    e7c4:	b909      	cbnz	r1, e7ca <cosem_setVariant+0xa>
        return bb_setUInt8(bb, 0);
    e7c6:	f7ff b8da 	b.w	d97e <bb_setUInt8>
    return dlms_setData(bb, value->vt, value);
    e7ca:	f000 ba03 	b.w	ebd4 <dlms_setData>

0000e7ce <cosem_setStructure>:
{
    e7ce:	b538      	push	{r3, r4, r5, lr}
    e7d0:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e7d2:	2102      	movs	r1, #2
{
    e7d4:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    e7d6:	f7ff f8d2 	bl	d97e <bb_setUInt8>
    e7da:	b928      	cbnz	r0, e7e8 <cosem_setStructure+0x1a>
        (ret = hlp_setObjectCount(count, bb)) != 0)
    e7dc:	4629      	mov	r1, r5
    e7de:	4620      	mov	r0, r4
}
    e7e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = hlp_setObjectCount(count, bb)) != 0)
    e7e4:	f00c b9c7 	b.w	1ab76 <hlp_setObjectCount>
}
    e7e8:	bd38      	pop	{r3, r4, r5, pc}

0000e7ea <cosem_setArray>:
{
    e7ea:	b538      	push	{r3, r4, r5, lr}
    e7ec:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    e7ee:	2101      	movs	r1, #1
{
    e7f0:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    e7f2:	f7ff f8c4 	bl	d97e <bb_setUInt8>
    e7f6:	b928      	cbnz	r0, e804 <cosem_setArray+0x1a>
        (ret = hlp_setObjectCount(count, bb)) != 0)
    e7f8:	4629      	mov	r1, r5
    e7fa:	4620      	mov	r0, r4
}
    e7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = hlp_setObjectCount(count, bb)) != 0)
    e800:	f00c b9b9 	b.w	1ab76 <hlp_setObjectCount>
}
    e804:	bd38      	pop	{r3, r4, r5, pc}

0000e806 <cosem_setEnum>:
{
    e806:	b538      	push	{r3, r4, r5, lr}
    e808:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ENUM)) != 0 ||
    e80a:	2116      	movs	r1, #22
{
    e80c:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ENUM)) != 0 ||
    e80e:	f7ff f8b6 	bl	d97e <bb_setUInt8>
    e812:	b928      	cbnz	r0, e820 <cosem_setEnum+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    e814:	4629      	mov	r1, r5
    e816:	4620      	mov	r0, r4
}
    e818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    e81c:	f7ff b98c 	b.w	db38 <bb_setInt8>
}
    e820:	bd38      	pop	{r3, r4, r5, pc}

0000e822 <cosem_setBoolean>:
{
    e822:	b538      	push	{r3, r4, r5, lr}
    e824:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
    e826:	2103      	movs	r1, #3
{
    e828:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
    e82a:	f7ff f8a8 	bl	d97e <bb_setUInt8>
    e82e:	b928      	cbnz	r0, e83c <cosem_setBoolean+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    e830:	4629      	mov	r1, r5
    e832:	4620      	mov	r0, r4
}
    e834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    e838:	f7ff b97e 	b.w	db38 <bb_setInt8>
}
    e83c:	bd38      	pop	{r3, r4, r5, pc}

0000e83e <getSelectedColumns>:
{
    e83e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e842:	4607      	mov	r7, r0
    e844:	b087      	sub	sp, #28
    e846:	460e      	mov	r6, r1
    e848:	4690      	mov	r8, r2
    for (pos = 0; pos != cols->size; ++pos)
    e84a:	2500      	movs	r5, #0
    e84c:	88f2      	ldrh	r2, [r6, #6]
    e84e:	b2ab      	uxth	r3, r5
    e850:	429a      	cmp	r2, r3
    e852:	d006      	beq.n	e862 <getSelectedColumns+0x24>
        if ((ret = va_getByIndex(cols, pos, &it)) != 0 ||
    e854:	b2a9      	uxth	r1, r5
    e856:	aa04      	add	r2, sp, #16
    e858:	4630      	mov	r0, r6
    e85a:	f00c fec2 	bl	1b5e2 <va_getByIndex>
    e85e:	4601      	mov	r1, r0
    e860:	b118      	cbz	r0, e86a <getSelectedColumns+0x2c>
    return 0;
    e862:	2000      	movs	r0, #0
}
    e864:	b007      	add	sp, #28
    e866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (ret = va_getByIndex(it->Arr, 0, &it2)) != 0)
    e86a:	9b04      	ldr	r3, [sp, #16]
    e86c:	aa05      	add	r2, sp, #20
    e86e:	6898      	ldr	r0, [r3, #8]
    e870:	f00c feb7 	bl	1b5e2 <va_getByIndex>
        if ((ret = va_getByIndex(cols, pos, &it)) != 0 ||
    e874:	2800      	cmp	r0, #0
    e876:	d1f4      	bne.n	e862 <getSelectedColumns+0x24>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(it2);
    e878:	9805      	ldr	r0, [sp, #20]
    e87a:	f00d f82c 	bl	1b8d6 <var_toInteger>
    e87e:	b283      	uxth	r3, r0
    e880:	9301      	str	r3, [sp, #4]
        if ((ret = va_getByIndex(it->Arr, 1, &it2)) != 0)
    e882:	9b04      	ldr	r3, [sp, #16]
    e884:	aa05      	add	r2, sp, #20
    e886:	6898      	ldr	r0, [r3, #8]
    e888:	2101      	movs	r1, #1
    e88a:	f00c feaa 	bl	1b5e2 <va_getByIndex>
    e88e:	2800      	cmp	r0, #0
    e890:	d1e7      	bne.n	e862 <getSelectedColumns+0x24>
        ln = it2->byteArr->data;
    e892:	9b05      	ldr	r3, [sp, #20]
    e894:	689b      	ldr	r3, [r3, #8]
    e896:	f8d3 b000 	ldr.w	fp, [r3]
        if ((ret = va_getByIndex(it->Arr, 2, &it2)) != 0)
    e89a:	9b04      	ldr	r3, [sp, #16]
    e89c:	aa05      	add	r2, sp, #20
    e89e:	6898      	ldr	r0, [r3, #8]
    e8a0:	2102      	movs	r1, #2
    e8a2:	f00c fe9e 	bl	1b5e2 <va_getByIndex>
    e8a6:	2800      	cmp	r0, #0
    e8a8:	d1db      	bne.n	e862 <getSelectedColumns+0x24>
        attributeIndex = (char)var_toInteger(it2);
    e8aa:	9805      	ldr	r0, [sp, #20]
    e8ac:	f00d f813 	bl	1b8d6 <var_toInteger>
        if ((ret = va_getByIndex(it->Arr, 3, &it2)) != 0)
    e8b0:	9b04      	ldr	r3, [sp, #16]
        attributeIndex = (char)var_toInteger(it2);
    e8b2:	4604      	mov	r4, r0
        if ((ret = va_getByIndex(it->Arr, 3, &it2)) != 0)
    e8b4:	aa05      	add	r2, sp, #20
    e8b6:	6898      	ldr	r0, [r3, #8]
    e8b8:	2103      	movs	r1, #3
    e8ba:	f00c fe92 	bl	1b5e2 <va_getByIndex>
    e8be:	4681      	mov	r9, r0
    e8c0:	2800      	cmp	r0, #0
    e8c2:	d1ce      	bne.n	e862 <getSelectedColumns+0x24>
        dataIndex = var_toInteger(it2);
    e8c4:	9805      	ldr	r0, [sp, #20]
    e8c6:	f00d f806 	bl	1b8d6 <var_toInteger>
            if (((gxObject*)c->key)->objectType == ot &&
    e8ca:	b2e4      	uxtb	r4, r4
        dataIndex = var_toInteger(it2);
    e8cc:	4682      	mov	sl, r0
        for (pos2 = 0; pos2 != captureObjects->size; ++pos2)
    e8ce:	88fa      	ldrh	r2, [r7, #6]
    e8d0:	fa1f f189 	uxth.w	r1, r9
    e8d4:	428a      	cmp	r2, r1
    e8d6:	d01f      	beq.n	e918 <getSelectedColumns+0xda>
            if ((ret = arr_getByIndex(captureObjects, pos2, (void**)&c)) != 0)
    e8d8:	aa03      	add	r2, sp, #12
    e8da:	4638      	mov	r0, r7
    e8dc:	f002 fc15 	bl	1110a <arr_getByIndex>
    e8e0:	2800      	cmp	r0, #0
    e8e2:	d1bf      	bne.n	e864 <getSelectedColumns+0x26>
            if (((gxObject*)c->key)->objectType == ot &&
    e8e4:	9a03      	ldr	r2, [sp, #12]
    e8e6:	9b01      	ldr	r3, [sp, #4]
    e8e8:	6810      	ldr	r0, [r2, #0]
    e8ea:	8801      	ldrh	r1, [r0, #0]
    e8ec:	4299      	cmp	r1, r3
    e8ee:	d115      	bne.n	e91c <getSelectedColumns+0xde>
                ((gxTarget*)c->value)->attributeIndex == attributeIndex &&
    e8f0:	6852      	ldr	r2, [r2, #4]
    e8f2:	f992 1000 	ldrsb.w	r1, [r2]
            if (((gxObject*)c->key)->objectType == ot &&
    e8f6:	42a1      	cmp	r1, r4
    e8f8:	d110      	bne.n	e91c <getSelectedColumns+0xde>
                ((gxTarget*)c->value)->dataIndex == dataIndex &&
    e8fa:	8852      	ldrh	r2, [r2, #2]
                ((gxTarget*)c->value)->attributeIndex == attributeIndex &&
    e8fc:	4552      	cmp	r2, sl
    e8fe:	d10d      	bne.n	e91c <getSelectedColumns+0xde>
                memcmp(((gxObject*)c->key)->logicalName, ln, 6) == 0)
    e900:	2206      	movs	r2, #6
    e902:	4659      	mov	r1, fp
    e904:	4410      	add	r0, r2
    e906:	f00e ffb5 	bl	1d874 <memcmp>
                ((gxTarget*)c->value)->dataIndex == dataIndex &&
    e90a:	b938      	cbnz	r0, e91c <getSelectedColumns+0xde>
                if ((ret = arr_push(columns, c)) != 0)
    e90c:	9903      	ldr	r1, [sp, #12]
    e90e:	4640      	mov	r0, r8
    e910:	f002 fbbe 	bl	11090 <arr_push>
    e914:	2800      	cmp	r0, #0
    e916:	d1a5      	bne.n	e864 <getSelectedColumns+0x26>
    for (pos = 0; pos != cols->size; ++pos)
    e918:	3501      	adds	r5, #1
    e91a:	e797      	b.n	e84c <getSelectedColumns+0xe>
        for (pos2 = 0; pos2 != captureObjects->size; ++pos2)
    e91c:	f109 0901 	add.w	r9, r9, #1
    e920:	e7d5      	b.n	e8ce <getSelectedColumns+0x90>

0000e922 <cosem_getColumns>:
{
    e922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e924:	4617      	mov	r7, r2
    e926:	4604      	mov	r4, r0
    arr_empty(columns);
    e928:	4618      	mov	r0, r3
{
    e92a:	461d      	mov	r5, r3
    e92c:	460e      	mov	r6, r1
    arr_empty(columns);
    e92e:	f002 fbdf 	bl	110f0 <arr_empty>
    if (parameters->vt == DLMS_DATA_TYPE_STRUCTURE)
    e932:	783b      	ldrb	r3, [r7, #0]
    e934:	2b02      	cmp	r3, #2
    e936:	d002      	beq.n	e93e <cosem_getColumns+0x1c>
    int ret = 0;
    e938:	2000      	movs	r0, #0
}
    e93a:	b003      	add	sp, #12
    e93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (selector == 1) //Read by range
    e93e:	2e01      	cmp	r6, #1
    e940:	d123      	bne.n	e98a <cosem_getColumns+0x68>
            if (parameters->Arr->size > 3)
    e942:	68b8      	ldr	r0, [r7, #8]
    e944:	88c3      	ldrh	r3, [r0, #6]
    e946:	2b03      	cmp	r3, #3
    e948:	d812      	bhi.n	e970 <cosem_getColumns+0x4e>
    uint16_t pos, start = 0, count = 0;
    e94a:	2600      	movs	r6, #0
            for (pos = 0; pos != captureObjects->size; ++pos)
    e94c:	88e3      	ldrh	r3, [r4, #6]
    e94e:	b2b1      	uxth	r1, r6
    e950:	428b      	cmp	r3, r1
    e952:	d0f1      	beq.n	e938 <cosem_getColumns+0x16>
                if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    e954:	466a      	mov	r2, sp
    e956:	4620      	mov	r0, r4
    e958:	f002 fbd7 	bl	1110a <arr_getByIndex>
    e95c:	2800      	cmp	r0, #0
    e95e:	d1ec      	bne.n	e93a <cosem_getColumns+0x18>
                    (ret = arr_push(columns, k)) != 0)
    e960:	9900      	ldr	r1, [sp, #0]
    e962:	4628      	mov	r0, r5
    e964:	f002 fb94 	bl	11090 <arr_push>
    e968:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    e96a:	2800      	cmp	r0, #0
    e96c:	d0ee      	beq.n	e94c <cosem_getColumns+0x2a>
    e96e:	e7e4      	b.n	e93a <cosem_getColumns+0x18>
                if ((ret = va_getByIndex(parameters->Arr, 3, &it)) == 0)
    e970:	aa01      	add	r2, sp, #4
    e972:	2103      	movs	r1, #3
    e974:	f00c fe35 	bl	1b5e2 <va_getByIndex>
    e978:	2800      	cmp	r0, #0
    e97a:	d1de      	bne.n	e93a <cosem_getColumns+0x18>
                    ret = getSelectedColumns(captureObjects, it->Arr, columns);
    e97c:	9b01      	ldr	r3, [sp, #4]
    e97e:	462a      	mov	r2, r5
    e980:	6899      	ldr	r1, [r3, #8]
    e982:	4620      	mov	r0, r4
    e984:	f7ff ff5b 	bl	e83e <getSelectedColumns>
    e988:	e7d7      	b.n	e93a <cosem_getColumns+0x18>
        else if (selector == 2) //Read by entry.
    e98a:	2e02      	cmp	r6, #2
    e98c:	d1dd      	bne.n	e94a <cosem_getColumns+0x28>
            if (parameters->Arr->size > 2)
    e98e:	68b8      	ldr	r0, [r7, #8]
    e990:	88c3      	ldrh	r3, [r0, #6]
    e992:	2b02      	cmp	r3, #2
    e994:	d91b      	bls.n	e9ce <cosem_getColumns+0xac>
                if ((ret = va_getByIndex(parameters->Arr, 2, &it)) != 0)
    e996:	aa01      	add	r2, sp, #4
    e998:	4631      	mov	r1, r6
    e99a:	f00c fe22 	bl	1b5e2 <va_getByIndex>
    e99e:	2800      	cmp	r0, #0
    e9a0:	d1cb      	bne.n	e93a <cosem_getColumns+0x18>
                start = (uint16_t)var_toInteger(it);
    e9a2:	9801      	ldr	r0, [sp, #4]
    e9a4:	f00c ff97 	bl	1b8d6 <var_toInteger>
    e9a8:	b286      	uxth	r6, r0
            if (parameters->Arr->size > 3)
    e9aa:	68b8      	ldr	r0, [r7, #8]
    e9ac:	88c3      	ldrh	r3, [r0, #6]
    e9ae:	2b03      	cmp	r3, #3
    e9b0:	d90f      	bls.n	e9d2 <cosem_getColumns+0xb0>
                if ((ret = va_getByIndex(parameters->Arr, 3, &it)) != 0)
    e9b2:	aa01      	add	r2, sp, #4
    e9b4:	2103      	movs	r1, #3
    e9b6:	f00c fe14 	bl	1b5e2 <va_getByIndex>
    e9ba:	2800      	cmp	r0, #0
    e9bc:	d1bd      	bne.n	e93a <cosem_getColumns+0x18>
                count = (uint16_t)var_toInteger(it);
    e9be:	9801      	ldr	r0, [sp, #4]
    e9c0:	f00c ff89 	bl	1b8d6 <var_toInteger>
            if (start != 1 || count != 0)
    e9c4:	2e01      	cmp	r6, #1
                count = (uint16_t)var_toInteger(it);
    e9c6:	b287      	uxth	r7, r0
            if (start != 1 || count != 0)
    e9c8:	d106      	bne.n	e9d8 <cosem_getColumns+0xb6>
    e9ca:	b937      	cbnz	r7, e9da <cosem_getColumns+0xb8>
    e9cc:	e7bd      	b.n	e94a <cosem_getColumns+0x28>
    uint16_t pos, start = 0, count = 0;
    e9ce:	2600      	movs	r6, #0
    e9d0:	e7eb      	b.n	e9aa <cosem_getColumns+0x88>
            else if (start != 1)
    e9d2:	2e01      	cmp	r6, #1
    e9d4:	d0b9      	beq.n	e94a <cosem_getColumns+0x28>
    e9d6:	88e7      	ldrh	r7, [r4, #6]
                if (count == 0)
    e9d8:	b197      	cbz	r7, ea00 <cosem_getColumns+0xde>
                for (pos = start - 1; pos != count; ++pos)
    e9da:	3e01      	subs	r6, #1
    e9dc:	b2b6      	uxth	r6, r6
    e9de:	42be      	cmp	r6, r7
    e9e0:	d0aa      	beq.n	e938 <cosem_getColumns+0x16>
                    if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    e9e2:	466a      	mov	r2, sp
    e9e4:	4631      	mov	r1, r6
    e9e6:	4620      	mov	r0, r4
    e9e8:	f002 fb8f 	bl	1110a <arr_getByIndex>
    e9ec:	2800      	cmp	r0, #0
    e9ee:	d1a4      	bne.n	e93a <cosem_getColumns+0x18>
                        (ret = arr_push(columns, k)) != 0)
    e9f0:	9900      	ldr	r1, [sp, #0]
    e9f2:	4628      	mov	r0, r5
    e9f4:	f002 fb4c 	bl	11090 <arr_push>
                    if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    e9f8:	2800      	cmp	r0, #0
    e9fa:	d19e      	bne.n	e93a <cosem_getColumns+0x18>
                for (pos = start - 1; pos != count; ++pos)
    e9fc:	3601      	adds	r6, #1
    e9fe:	e7ed      	b.n	e9dc <cosem_getColumns+0xba>
                    count = captureObjects->size - start;
    ea00:	88e7      	ldrh	r7, [r4, #6]
    ea02:	1bbf      	subs	r7, r7, r6
    ea04:	b2bf      	uxth	r7, r7
    ea06:	e7e8      	b.n	e9da <cosem_getColumns+0xb8>

0000ea08 <di_init>:

#include "../include/datainfo.h"

void di_init(gxDataInfo *info)
{
    info->index = 0;
    ea08:	2300      	movs	r3, #0
    ea0a:	8003      	strh	r3, [r0, #0]
    info->count = 0;
    ea0c:	8043      	strh	r3, [r0, #2]
    info->type = DLMS_DATA_TYPE_NONE;
    ea0e:	f44f 7380 	mov.w	r3, #256	; 0x100
    ea12:	8083      	strh	r3, [r0, #4]
#ifdef DLMS_ITALIAN_STANDARD
        //Some meters require that there is a array count in data.
    info->appendAA = 0;
#endif //DLMS_ITALIAN_STANDARD

}
    ea14:	4770      	bx	lr

0000ea16 <time_getYears>:
    return time_getYears2(value->value);
    ea16:	6800      	ldr	r0, [r0, #0]
    ea18:	f7f3 bc86 	b.w	2328 <time_getYears2>

0000ea1c <time_getMonths>:
    return time_getMonths2(value->value);
    ea1c:	6800      	ldr	r0, [r0, #0]
    ea1e:	f7f3 bcb9 	b.w	2394 <time_getMonths2>

0000ea22 <time_getDays>:
    return time_getDays2(value->value);
    ea22:	6800      	ldr	r0, [r0, #0]
    ea24:	f7f3 bcee 	b.w	2404 <time_getDays2>

0000ea28 <time_getMinutes>:
    return (unsigned char)((value->value % 3600L) / 60L);
    ea28:	6802      	ldr	r2, [r0, #0]
    ea2a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    ea2e:	fbb2 f0f3 	udiv	r0, r2, r3
    ea32:	fb03 2010 	mls	r0, r3, r0, r2
    ea36:	233c      	movs	r3, #60	; 0x3c
    ea38:	fbb0 f0f3 	udiv	r0, r0, r3
}
    ea3c:	b2c0      	uxtb	r0, r0
    ea3e:	4770      	bx	lr

0000ea40 <time_getSeconds>:
    return (unsigned char)(value->value % 60);
    ea40:	6802      	ldr	r2, [r0, #0]
    ea42:	233c      	movs	r3, #60	; 0x3c
    ea44:	fbb2 f0f3 	udiv	r0, r2, r3
    ea48:	fb03 2010 	mls	r0, r3, r0, r2
}
    ea4c:	b2c0      	uxtb	r0, r0
    ea4e:	4770      	bx	lr

0000ea50 <time_addHours>:
    value->value += seconds;
    ea50:	6803      	ldr	r3, [r0, #0]
    ea52:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    ea56:	fb02 3101 	mla	r1, r2, r1, r3
    ea5a:	6001      	str	r1, [r0, #0]
}
    ea5c:	4770      	bx	lr

0000ea5e <time_addMinutes>:
    value->value += seconds;
    ea5e:	6803      	ldr	r3, [r0, #0]
    ea60:	223c      	movs	r2, #60	; 0x3c
    ea62:	fb02 3101 	mla	r1, r2, r1, r3
    ea66:	6001      	str	r1, [r0, #0]
}
    ea68:	4770      	bx	lr

0000ea6a <time_addSeconds>:
    value->value += seconds;
    ea6a:	6803      	ldr	r3, [r0, #0]
    ea6c:	440b      	add	r3, r1
    ea6e:	6003      	str	r3, [r0, #0]
}
    ea70:	4770      	bx	lr

0000ea72 <time_initUnix>:
    time->deviation = 0;
    ea72:	2300      	movs	r3, #0
    time->value = value;
    ea74:	6001      	str	r1, [r0, #0]
    time->deviation = 0;
    ea76:	6043      	str	r3, [r0, #4]
    time->extraInfo = 0;
    ea78:	8103      	strh	r3, [r0, #8]
}
    ea7a:	4770      	bx	lr

0000ea7c <time_clear>:
    time->value = 0;
    ea7c:	2300      	movs	r3, #0
    ea7e:	6003      	str	r3, [r0, #0]
    time->skip = DATETIME_SKIPS_NONE;
    ea80:	80c3      	strh	r3, [r0, #6]
    time->extraInfo = 0;
    ea82:	8103      	strh	r3, [r0, #8]
}
    ea84:	4770      	bx	lr

0000ea86 <date_isleap>:
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    ea86:	0783      	lsls	r3, r0, #30
    ea88:	d106      	bne.n	ea98 <date_isleap+0x12>
    ea8a:	2264      	movs	r2, #100	; 0x64
    ea8c:	fbb0 f3f2 	udiv	r3, r0, r2
    ea90:	fb02 0313 	mls	r3, r2, r3, r0
    ea94:	b29b      	uxth	r3, r3
    ea96:	b953      	cbnz	r3, eaae <date_isleap+0x28>
    ea98:	f44f 72c8 	mov.w	r2, #400	; 0x190
    ea9c:	fbb0 f3f2 	udiv	r3, r0, r2
    eaa0:	fb02 0013 	mls	r0, r2, r3, r0
    eaa4:	b280      	uxth	r0, r0
    eaa6:	fab0 f080 	clz	r0, r0
    eaaa:	0940      	lsrs	r0, r0, #5
    eaac:	4770      	bx	lr
    eaae:	2001      	movs	r0, #1
}
    eab0:	4770      	bx	lr

0000eab2 <date_daysInMonth>:
{
    eab2:	b508      	push	{r3, lr}
    eab4:	290b      	cmp	r1, #11
    eab6:	d809      	bhi.n	eacc <date_daysInMonth+0x1a>
    eab8:	e8df f001 	tbb	[pc, r1]
    eabc:	060f080f 	.word	0x060f080f
    eac0:	0f0f060f 	.word	0x0f0f060f
    eac4:	0f060f06 	.word	0x0f060f06
        return 28;
    eac8:	201e      	movs	r0, #30
}
    eaca:	bd08      	pop	{r3, pc}
        if (date_isleap(year))
    eacc:	f7ff ffdb 	bl	ea86 <date_isleap>
    ead0:	2800      	cmp	r0, #0
            return 29;
    ead2:	bf0c      	ite	eq
    ead4:	201c      	moveq	r0, #28
    ead6:	201d      	movne	r0, #29
    ead8:	e7f7      	b.n	eaca <date_daysInMonth+0x18>
        return 31;
    eada:	201f      	movs	r0, #31
    eadc:	e7f5      	b.n	eaca <date_daysInMonth+0x18>

0000eade <time_copy>:
    trg->extraInfo = src->extraInfo;
    eade:	7a0b      	ldrb	r3, [r1, #8]
    eae0:	7203      	strb	r3, [r0, #8]
    trg->skip = src->skip;
    eae2:	88cb      	ldrh	r3, [r1, #6]
    eae4:	80c3      	strh	r3, [r0, #6]
    trg->status = src->status;
    eae6:	7a4b      	ldrb	r3, [r1, #9]
    eae8:	7243      	strb	r3, [r0, #9]
    trg->value = src->value;
    eaea:	680b      	ldr	r3, [r1, #0]
    eaec:	6003      	str	r3, [r0, #0]
    trg->deviation = src->deviation;
    eaee:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    eaf2:	8083      	strh	r3, [r0, #4]
}
    eaf4:	4770      	bx	lr

0000eaf6 <time_dayOfWeek>:
    if (month <= 2)
    eaf6:	2902      	cmp	r1, #2
        year -= 1;
    eaf8:	bf9c      	itt	ls
    eafa:	f100 30ff 	addls.w	r0, r0, #4294967295
    eafe:	b280      	uxthls	r0, r0
{
    eb00:	b530      	push	{r4, r5, lr}
    k = year % 100;
    eb02:	f04f 0464 	mov.w	r4, #100	; 0x64
    eb06:	fbb0 f5f4 	udiv	r5, r0, r4
    eb0a:	fb04 0415 	mls	r4, r4, r5, r0
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    eb0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
    eb12:	fbb0 f3f3 	udiv	r3, r0, r3
    eb16:	fa13 f384 	uxtah	r3, r3, r4
    eb1a:	441a      	add	r2, r3
    eb1c:	f3c4 008d 	ubfx	r0, r4, #2, #14
        month += 12;
    eb20:	bf98      	it	ls
    eb22:	310c      	addls	r1, #12
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    eb24:	4410      	add	r0, r2
    eb26:	eb05 0585 	add.w	r5, r5, r5, lsl #2
        month += 12;
    eb2a:	bf98      	it	ls
    eb2c:	b2c9      	uxtbls	r1, r1
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    eb2e:	4428      	add	r0, r5
    eb30:	231a      	movs	r3, #26
    eb32:	fb01 3103 	mla	r1, r1, r3, r3
    eb36:	230a      	movs	r3, #10
    eb38:	fbb1 f1f3 	udiv	r1, r1, r3
    eb3c:	4408      	add	r0, r1
    return ((h + 5) % 7) + 1;
    eb3e:	b200      	sxth	r0, r0
    eb40:	3005      	adds	r0, #5
    eb42:	2307      	movs	r3, #7
    eb44:	fbb0 f3f3 	udiv	r3, r0, r3
    eb48:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    eb4c:	1ac0      	subs	r0, r0, r3
    eb4e:	3001      	adds	r0, #1
}
    eb50:	b2c0      	uxtb	r0, r0
    eb52:	bd30      	pop	{r4, r5, pc}

0000eb54 <time_compare>:
{
    eb54:	b510      	push	{r4, lr}
    eb56:	4604      	mov	r4, r0
    return time_compareWithDiff(value1, time_toUnixTime2(value2), value1->deviation);
    eb58:	4608      	mov	r0, r1
    eb5a:	f7f3 fe59 	bl	2810 <time_toUnixTime2>
    eb5e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    eb62:	4601      	mov	r1, r0
    eb64:	4620      	mov	r0, r4
}
    eb66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return time_compareWithDiff(value1, time_toUnixTime2(value2), value1->deviation);
    eb6a:	f7f3 be77 	b.w	285c <time_compareWithDiff>

0000eb6e <time_toUTC>:
}

int time_toUTC(gxtime* value)
{
    //Convert time to UCT if time zone is given.
    if (value->deviation != 0 && value->deviation != (short)0x8000)
    eb6e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    eb72:	f3c3 020e 	ubfx	r2, r3, #0, #15
    eb76:	b152      	cbz	r2, eb8e <time_toUTC+0x20>
    value->value += seconds;
    eb78:	6802      	ldr	r2, [r0, #0]
    eb7a:	213c      	movs	r1, #60	; 0x3c
    eb7c:	fb13 2301 	smlabb	r3, r3, r1, r2
    eb80:	6003      	str	r3, [r0, #0]
    {
        time_addMinutes(value, time_getDeviation(value));
        value->deviation = 0;
    eb82:	2300      	movs	r3, #0
    eb84:	8083      	strh	r3, [r0, #4]
        //DST deviation is included to deviation. Remove status.
        value->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
    eb86:	7a43      	ldrb	r3, [r0, #9]
    eb88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    eb8c:	7243      	strb	r3, [r0, #9]
    }
    return 0;
}
    eb8e:	2000      	movs	r0, #0
    eb90:	4770      	bx	lr

0000eb92 <dlms_useHdlc>:
        type == DLMS_INTERFACE_TYPE_HDLC_WITH_MODE_E ||
    eb92:	f010 0ffb 	tst.w	r0, #251	; 0xfb
    eb96:	d003      	beq.n	eba0 <dlms_useHdlc+0xe>
    eb98:	1f83      	subs	r3, r0, #6
    eb9a:	4258      	negs	r0, r3
    eb9c:	4158      	adcs	r0, r3
    eb9e:	4770      	bx	lr
    eba0:	2001      	movs	r0, #1
}
    eba2:	4770      	bx	lr

0000eba4 <dlms_getInvokeIDPriority>:
    if (settings->priority == DLMS_PRIORITY_HIGH)
    eba4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
        value |= 0x80;
    eba8:	2b01      	cmp	r3, #1
    if (settings->serviceClass == DLMS_SERVICE_CLASS_CONFIRMED)
    ebaa:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
        value |= 0x80;
    ebae:	bf0c      	ite	eq
    ebb0:	2280      	moveq	r2, #128	; 0x80
    ebb2:	2200      	movne	r2, #0
    if (settings->serviceClass == DLMS_SERVICE_CLASS_CONFIRMED)
    ebb4:	2b01      	cmp	r3, #1
        value |= 0x40;
    ebb6:	bf08      	it	eq
    ebb8:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    if (increase)
    ebbc:	b131      	cbz	r1, ebcc <dlms_getInvokeIDPriority+0x28>
        settings->invokeID = (unsigned char)((1 + settings->invokeID) & 0xF);
    ebbe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    ebc2:	3301      	adds	r3, #1
    ebc4:	f003 030f 	and.w	r3, r3, #15
    ebc8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    value |= settings->invokeID;
    ebcc:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
}
    ebd0:	4310      	orrs	r0, r2
    ebd2:	4770      	bx	lr

0000ebd4 <dlms_setData>:
{
    ebd4:	b570      	push	{r4, r5, r6, lr}
    ebd6:	4606      	mov	r6, r0
    ret = var_changeType(value, type);
    ebd8:	4610      	mov	r0, r2
{
    ebda:	460d      	mov	r5, r1
    ebdc:	4614      	mov	r4, r2
    ret = var_changeType(value, type);
    ebde:	f7f5 ff93 	bl	4b08 <var_changeType>
    if (ret != DLMS_ERROR_CODE_OK)
    ebe2:	b930      	cbnz	r0, ebf2 <dlms_setData+0x1e>
    return var_getBytes2(value, type, buff);
    ebe4:	4632      	mov	r2, r6
    ebe6:	4629      	mov	r1, r5
    ebe8:	4620      	mov	r0, r4
}
    ebea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return var_getBytes2(value, type, buff);
    ebee:	f00c be35 	b.w	1b85c <var_getBytes2>
}
    ebf2:	bd70      	pop	{r4, r5, r6, pc}

0000ebf4 <getCount>:
{
    ebf4:	b570      	push	{r4, r5, r6, lr}
    ebf6:	460e      	mov	r6, r1
    if (hlp_getObjectCount2(buff, &info->count) != 0)
    ebf8:	3102      	adds	r1, #2
{
    ebfa:	4615      	mov	r5, r2
    if (hlp_getObjectCount2(buff, &info->count) != 0)
    ebfc:	f00b ff8a 	bl	1ab14 <hlp_getObjectCount2>
    ec00:	4604      	mov	r4, r0
    ec02:	b118      	cbz	r0, ec0c <getCount+0x18>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    ec04:	f44f 7482 	mov.w	r4, #260	; 0x104
}
    ec08:	4620      	mov	r0, r4
    ec0a:	bd70      	pop	{r4, r5, r6, pc}
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    ec0c:	2008      	movs	r0, #8
    ec0e:	f7fd fe29 	bl	c864 <malloc>
    ec12:	60a8      	str	r0, [r5, #8]
    if (value->Arr == NULL)
    ec14:	2800      	cmp	r0, #0
    ec16:	d0f5      	beq.n	ec04 <getCount+0x10>
    va_init(value->Arr);
    ec18:	f00c fbeb 	bl	1b3f2 <va_init>
    va_capacity(value->Arr, info->count);
    ec1c:	8871      	ldrh	r1, [r6, #2]
    ec1e:	68a8      	ldr	r0, [r5, #8]
    ec20:	f00c fbeb 	bl	1b3fa <va_capacity>
    value->vt = DLMS_DATA_TYPE_ARRAY;
    ec24:	2301      	movs	r3, #1
    ec26:	702b      	strb	r3, [r5, #0]
    return 0;
    ec28:	e7ee      	b.n	ec08 <getCount+0x14>

0000ec2a <getUInt32>:
{
    ec2a:	b410      	push	{r4}
    ec2c:	460b      	mov	r3, r1
    if (buff->size - buff->position < 4)
    ec2e:	8904      	ldrh	r4, [r0, #8]
{
    ec30:	4611      	mov	r1, r2
    if (buff->size - buff->position < 4)
    ec32:	88c2      	ldrh	r2, [r0, #6]
    ec34:	1b12      	subs	r2, r2, r4
    ec36:	2a03      	cmp	r2, #3
    ec38:	dc03      	bgt.n	ec42 <getUInt32+0x18>
        info->complete = 0;
    ec3a:	2000      	movs	r0, #0
    ec3c:	7158      	strb	r0, [r3, #5]
}
    ec3e:	bc10      	pop	{r4}
    ec40:	4770      	bx	lr
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    ec42:	f991 3000 	ldrsb.w	r3, [r1]
    ec46:	2b00      	cmp	r3, #0
    ec48:	db05      	blt.n	ec56 <getUInt32+0x2c>
        value->vt = DLMS_DATA_TYPE_UINT32;
    ec4a:	2306      	movs	r3, #6
    ec4c:	f801 3b08 	strb.w	r3, [r1], #8
}
    ec50:	bc10      	pop	{r4}
    if ((ret = bb_getUInt32(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->ulVal : value->pulVal)) != 0)
    ec52:	f7ff b842 	b.w	dcda <bb_getUInt32>
    ec56:	6889      	ldr	r1, [r1, #8]
    ec58:	e7fa      	b.n	ec50 <getUInt32+0x26>

0000ec5a <getInt32>:
{
    ec5a:	b410      	push	{r4}
    ec5c:	460b      	mov	r3, r1
    if (buff->size - buff->position < 4)
    ec5e:	8904      	ldrh	r4, [r0, #8]
{
    ec60:	4611      	mov	r1, r2
    if (buff->size - buff->position < 4)
    ec62:	88c2      	ldrh	r2, [r0, #6]
    ec64:	1b12      	subs	r2, r2, r4
    ec66:	2a03      	cmp	r2, #3
    ec68:	dc03      	bgt.n	ec72 <getInt32+0x18>
        info->complete = 0;
    ec6a:	2000      	movs	r0, #0
    ec6c:	7158      	strb	r0, [r3, #5]
}
    ec6e:	bc10      	pop	{r4}
    ec70:	4770      	bx	lr
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    ec72:	f991 3000 	ldrsb.w	r3, [r1]
    ec76:	2b00      	cmp	r3, #0
    ec78:	db05      	blt.n	ec86 <getInt32+0x2c>
        value->vt = DLMS_DATA_TYPE_INT32;
    ec7a:	2305      	movs	r3, #5
    ec7c:	f801 3b08 	strb.w	r3, [r1], #8
}
    ec80:	bc10      	pop	{r4}
    if ((ret = bb_getInt32(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->lVal : value->plVal)) != 0)
    ec82:	f7ff b890 	b.w	dda6 <bb_getInt32>
    ec86:	6889      	ldr	r1, [r1, #8]
    ec88:	e7fa      	b.n	ec80 <getInt32+0x26>

0000ec8a <getString>:
{
    ec8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ec8c:	461d      	mov	r5, r3
    uint16_t len = 0;
    ec8e:	2300      	movs	r3, #0
{
    ec90:	4604      	mov	r4, r0
    ec92:	460e      	mov	r6, r1
    uint16_t len = 0;
    ec94:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (knownType)
    ec98:	b1aa      	cbz	r2, ecc6 <getString+0x3c>
        len = (uint16_t)buff->size;
    ec9a:	88c3      	ldrh	r3, [r0, #6]
    ec9c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len > 0)
    eca0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    value->vt = DLMS_DATA_TYPE_STRING;
    eca4:	230a      	movs	r3, #10
    eca6:	702b      	strb	r3, [r5, #0]
    if (len > 0)
    eca8:	b1d0      	cbz	r0, ece0 <getString+0x56>
        value->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    ecaa:	200c      	movs	r0, #12
    ecac:	f7fd fdda 	bl	c864 <malloc>
    ecb0:	60a8      	str	r0, [r5, #8]
        BYTE_BUFFER_INIT(value->strVal);
    ecb2:	f7fe fdfb 	bl	d8ac <bb_init>
        ret = bb_set2(value->strVal, buff, buff->position, len);
    ecb6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ecba:	8922      	ldrh	r2, [r4, #8]
    ecbc:	68a8      	ldr	r0, [r5, #8]
    ecbe:	4621      	mov	r1, r4
    ecc0:	f7fe ff72 	bl	dba8 <bb_set2>
    ecc4:	e00c      	b.n	ece0 <getString+0x56>
        if (hlp_getObjectCount2(buff, &len) != 0)
    ecc6:	f10d 0106 	add.w	r1, sp, #6
    ecca:	f00b ff23 	bl	1ab14 <hlp_getObjectCount2>
    ecce:	b948      	cbnz	r0, ece4 <getString+0x5a>
        if (buff->size - buff->position < (uint16_t)len)
    ecd0:	8922      	ldrh	r2, [r4, #8]
    ecd2:	88e3      	ldrh	r3, [r4, #6]
    ecd4:	1a9b      	subs	r3, r3, r2
    ecd6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ecda:	4293      	cmp	r3, r2
    ecdc:	dae0      	bge.n	eca0 <getString+0x16>
            info->complete = 0;
    ecde:	7170      	strb	r0, [r6, #5]
}
    ece0:	b002      	add	sp, #8
    ece2:	bd70      	pop	{r4, r5, r6, pc}
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    ece4:	f44f 7082 	mov.w	r0, #260	; 0x104
    ece8:	e7fa      	b.n	ece0 <getString+0x56>

0000ecea <getUtfString>:
{
    ecea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ecec:	461d      	mov	r5, r3
    ecee:	4604      	mov	r4, r0
    ecf0:	4617      	mov	r7, r2
    uint16_t len = 0;
    ecf2:	2300      	movs	r3, #0
    var_clear(value);
    ecf4:	4628      	mov	r0, r5
{
    ecf6:	460e      	mov	r6, r1
    uint16_t len = 0;
    ecf8:	f8ad 3006 	strh.w	r3, [sp, #6]
    var_clear(value);
    ecfc:	f00c fbf3 	bl	1b4e6 <var_clear>
    if (knownType)
    ed00:	b1af      	cbz	r7, ed2e <getUtfString+0x44>
        len = (uint16_t)buff->size;
    ed02:	88e3      	ldrh	r3, [r4, #6]
    ed04:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len > 0)
    ed08:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ed0c:	b308      	cbz	r0, ed52 <getUtfString+0x68>
        value->strUtfVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    ed0e:	200c      	movs	r0, #12
    ed10:	f7fd fda8 	bl	c864 <malloc>
    ed14:	60a8      	str	r0, [r5, #8]
        BYTE_BUFFER_INIT(value->strUtfVal);
    ed16:	f7fe fdc9 	bl	d8ac <bb_init>
        ret = bb_set2(value->strUtfVal, buff, buff->position, len);
    ed1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ed1e:	8922      	ldrh	r2, [r4, #8]
    ed20:	68a8      	ldr	r0, [r5, #8]
    ed22:	4621      	mov	r1, r4
    ed24:	f7fe ff40 	bl	dba8 <bb_set2>
        value->vt = DLMS_DATA_TYPE_STRING_UTF8;
    ed28:	230c      	movs	r3, #12
    ed2a:	702b      	strb	r3, [r5, #0]
    ed2c:	e00f      	b.n	ed4e <getUtfString+0x64>
        if (hlp_getObjectCount2(buff, &len) != 0)
    ed2e:	f10d 0106 	add.w	r1, sp, #6
    ed32:	4620      	mov	r0, r4
    ed34:	f00b feee 	bl	1ab14 <hlp_getObjectCount2>
    ed38:	b968      	cbnz	r0, ed56 <getUtfString+0x6c>
        if (buff->size - buff->position < (uint16_t)(2 * len))
    ed3a:	8923      	ldrh	r3, [r4, #8]
    ed3c:	88e2      	ldrh	r2, [r4, #6]
    ed3e:	1ad2      	subs	r2, r2, r3
    ed40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ed44:	005b      	lsls	r3, r3, #1
    ed46:	b29b      	uxth	r3, r3
    ed48:	429a      	cmp	r2, r3
    ed4a:	dadd      	bge.n	ed08 <getUtfString+0x1e>
            info->complete = 0;
    ed4c:	7170      	strb	r0, [r6, #5]
}
    ed4e:	b003      	add	sp, #12
    ed50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        value->strUtfVal = NULL;
    ed52:	60a8      	str	r0, [r5, #8]
    ed54:	e7fb      	b.n	ed4e <getUtfString+0x64>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    ed56:	f44f 7082 	mov.w	r0, #260	; 0x104
    ed5a:	e7f8      	b.n	ed4e <getUtfString+0x64>

0000ed5c <getOctetString>:
{
    ed5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ed5e:	4605      	mov	r5, r0
    ed60:	460c      	mov	r4, r1
    ed62:	461e      	mov	r6, r3
    if (knownType)
    ed64:	b152      	cbz	r2, ed7c <getOctetString+0x20>
        len = (uint16_t)buff->size;
    ed66:	88c3      	ldrh	r3, [r0, #6]
    ed68:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len == 0)
    ed6c:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    ed70:	b99c      	cbnz	r4, ed9a <getOctetString+0x3e>
        var_clear(value);
    ed72:	4630      	mov	r0, r6
    ed74:	f00c fbb7 	bl	1b4e6 <var_clear>
    int ret = 0;
    ed78:	4620      	mov	r0, r4
    ed7a:	e00c      	b.n	ed96 <getOctetString+0x3a>
        if (hlp_getObjectCount2(buff, &len) != 0)
    ed7c:	f10d 0106 	add.w	r1, sp, #6
    ed80:	f00b fec8 	bl	1ab14 <hlp_getObjectCount2>
    ed84:	b9b0      	cbnz	r0, edb4 <getOctetString+0x58>
        if (buff->size - buff->position < len)
    ed86:	892a      	ldrh	r2, [r5, #8]
    ed88:	88eb      	ldrh	r3, [r5, #6]
    ed8a:	1a9b      	subs	r3, r3, r2
    ed8c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ed90:	4293      	cmp	r3, r2
    ed92:	daeb      	bge.n	ed6c <getOctetString+0x10>
            info->complete = 0;
    ed94:	7160      	strb	r0, [r4, #5]
}
    ed96:	b002      	add	sp, #8
    ed98:	bd70      	pop	{r4, r5, r6, pc}
        ret = var_addBytes(value, buff->data + buff->position, len);
    ed9a:	892b      	ldrh	r3, [r5, #8]
    ed9c:	6829      	ldr	r1, [r5, #0]
    ed9e:	4622      	mov	r2, r4
    eda0:	4419      	add	r1, r3
    eda2:	4630      	mov	r0, r6
    eda4:	f00c fbf7 	bl	1b596 <var_addBytes>
        buff->position += (uint16_t)len;
    eda8:	892b      	ldrh	r3, [r5, #8]
    edaa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    edae:	4413      	add	r3, r2
    edb0:	812b      	strh	r3, [r5, #8]
    edb2:	e7f0      	b.n	ed96 <getOctetString+0x3a>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    edb4:	f44f 7082 	mov.w	r0, #260	; 0x104
    edb8:	e7ed      	b.n	ed96 <getOctetString+0x3a>

0000edba <getUInt8>:
{
    edba:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    edbc:	88c3      	ldrh	r3, [r0, #6]
{
    edbe:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    edc0:	8902      	ldrh	r2, [r0, #8]
    edc2:	1a9b      	subs	r3, r3, r2
    edc4:	2b00      	cmp	r3, #0
    edc6:	dc02      	bgt.n	edce <getUInt8+0x14>
        info->complete = 0;
    edc8:	2000      	movs	r0, #0
    edca:	7148      	strb	r0, [r1, #5]
}
    edcc:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->bVal : value->pbVal)) != 0)
    edce:	f994 3000 	ldrsb.w	r3, [r4]
    edd2:	2b00      	cmp	r3, #0
    edd4:	bfb4      	ite	lt
    edd6:	68a1      	ldrlt	r1, [r4, #8]
    edd8:	f104 0108 	addge.w	r1, r4, #8
    eddc:	f7fe ff3f 	bl	dc5e <bb_getUInt8>
    ede0:	2800      	cmp	r0, #0
    ede2:	d1f3      	bne.n	edcc <getUInt8+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    ede4:	f994 3000 	ldrsb.w	r3, [r4]
    ede8:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT8;
    edea:	bfa4      	itt	ge
    edec:	2311      	movge	r3, #17
    edee:	7023      	strbge	r3, [r4, #0]
    edf0:	e7ec      	b.n	edcc <getUInt8+0x12>

0000edf2 <getInt16>:
{
    edf2:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 2)
    edf4:	88c3      	ldrh	r3, [r0, #6]
{
    edf6:	4614      	mov	r4, r2
    if (buff->size - buff->position < 2)
    edf8:	8902      	ldrh	r2, [r0, #8]
    edfa:	1a9b      	subs	r3, r3, r2
    edfc:	2b01      	cmp	r3, #1
    edfe:	dc02      	bgt.n	ee06 <getInt16+0x14>
        info->complete = 0;
    ee00:	2000      	movs	r0, #0
    ee02:	7148      	strb	r0, [r1, #5]
}
    ee04:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt16(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->iVal : value->piVal)) != 0)
    ee06:	f994 3000 	ldrsb.w	r3, [r4]
    ee0a:	2b00      	cmp	r3, #0
    ee0c:	bfb4      	ite	lt
    ee0e:	68a1      	ldrlt	r1, [r4, #8]
    ee10:	f104 0108 	addge.w	r1, r4, #8
    ee14:	f7fe ff7a 	bl	dd0c <bb_getInt16>
    ee18:	2800      	cmp	r0, #0
    ee1a:	d1f3      	bne.n	ee04 <getInt16+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    ee1c:	f994 3000 	ldrsb.w	r3, [r4]
    ee20:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT16;
    ee22:	bfa4      	itt	ge
    ee24:	2310      	movge	r3, #16
    ee26:	7023      	strbge	r3, [r4, #0]
    ee28:	e7ec      	b.n	ee04 <getInt16+0x12>

0000ee2a <getInt8>:
{
    ee2a:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    ee2c:	88c3      	ldrh	r3, [r0, #6]
{
    ee2e:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    ee30:	8902      	ldrh	r2, [r0, #8]
    ee32:	1a9b      	subs	r3, r3, r2
    ee34:	2b00      	cmp	r3, #0
    ee36:	dc02      	bgt.n	ee3e <getInt8+0x14>
        info->complete = 0;
    ee38:	2000      	movs	r0, #0
    ee3a:	7148      	strb	r0, [r1, #5]
}
    ee3c:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->cVal : value->pcVal)) != 0)
    ee3e:	f994 3000 	ldrsb.w	r3, [r4]
    ee42:	2b00      	cmp	r3, #0
    ee44:	bfb4      	ite	lt
    ee46:	68a1      	ldrlt	r1, [r4, #8]
    ee48:	f104 0108 	addge.w	r1, r4, #8
    ee4c:	f7fe ff16 	bl	dc7c <bb_getInt8>
    ee50:	2800      	cmp	r0, #0
    ee52:	d1f3      	bne.n	ee3c <getInt8+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    ee54:	f994 3000 	ldrsb.w	r3, [r4]
    ee58:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT8;
    ee5a:	bfa4      	itt	ge
    ee5c:	230f      	movge	r3, #15
    ee5e:	7023      	strbge	r3, [r4, #0]
    ee60:	e7ec      	b.n	ee3c <getInt8+0x12>

0000ee62 <getUInt16>:
{
    ee62:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 2)
    ee64:	88c3      	ldrh	r3, [r0, #6]
{
    ee66:	4614      	mov	r4, r2
    if (buff->size - buff->position < 2)
    ee68:	8902      	ldrh	r2, [r0, #8]
    ee6a:	1a9b      	subs	r3, r3, r2
    ee6c:	2b01      	cmp	r3, #1
    ee6e:	dc02      	bgt.n	ee76 <getUInt16+0x14>
        info->complete = 0;
    ee70:	2000      	movs	r0, #0
    ee72:	7148      	strb	r0, [r1, #5]
}
    ee74:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt16(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->uiVal : value->puiVal)) != 0)
    ee76:	f994 3000 	ldrsb.w	r3, [r4]
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	bfb4      	ite	lt
    ee7e:	68a1      	ldrlt	r1, [r4, #8]
    ee80:	f104 0108 	addge.w	r1, r4, #8
    ee84:	f7fe ff14 	bl	dcb0 <bb_getUInt16>
    ee88:	2800      	cmp	r0, #0
    ee8a:	d1f3      	bne.n	ee74 <getUInt16+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    ee8c:	f994 3000 	ldrsb.w	r3, [r4]
    ee90:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT16;
    ee92:	bfa4      	itt	ge
    ee94:	2312      	movge	r3, #18
    ee96:	7023      	strbge	r3, [r4, #0]
    ee98:	e7ec      	b.n	ee74 <getUInt16+0x12>

0000ee9a <getInt64>:
{
    ee9a:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    ee9c:	88c3      	ldrh	r3, [r0, #6]
{
    ee9e:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    eea0:	8902      	ldrh	r2, [r0, #8]
    eea2:	1a9b      	subs	r3, r3, r2
    eea4:	2b07      	cmp	r3, #7
    eea6:	dc02      	bgt.n	eeae <getInt64+0x14>
        info->complete = 0;
    eea8:	2000      	movs	r0, #0
    eeaa:	7148      	strb	r0, [r1, #5]
}
    eeac:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt64(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->llVal : value->pllVal)) != 0)
    eeae:	f994 3000 	ldrsb.w	r3, [r4]
    eeb2:	2b00      	cmp	r3, #0
    eeb4:	bfb4      	ite	lt
    eeb6:	68a1      	ldrlt	r1, [r4, #8]
    eeb8:	f104 0108 	addge.w	r1, r4, #8
    eebc:	f7fe ffa1 	bl	de02 <bb_getInt64>
    eec0:	2800      	cmp	r0, #0
    eec2:	d1f3      	bne.n	eeac <getInt64+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    eec4:	f994 3000 	ldrsb.w	r3, [r4]
    eec8:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT64;
    eeca:	bfa4      	itt	ge
    eecc:	2314      	movge	r3, #20
    eece:	7023      	strbge	r3, [r4, #0]
    eed0:	e7ec      	b.n	eeac <getInt64+0x12>

0000eed2 <getUInt64>:
{
    eed2:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    eed4:	88c3      	ldrh	r3, [r0, #6]
{
    eed6:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    eed8:	8902      	ldrh	r2, [r0, #8]
    eeda:	1a9b      	subs	r3, r3, r2
    eedc:	2b07      	cmp	r3, #7
    eede:	dc02      	bgt.n	eee6 <getUInt64+0x14>
        info->complete = 0;
    eee0:	2000      	movs	r0, #0
    eee2:	7148      	strb	r0, [r1, #5]
}
    eee4:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt64(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->ullVal : value->pullVal)) != 0)
    eee6:	f994 3000 	ldrsb.w	r3, [r4]
    eeea:	2b00      	cmp	r3, #0
    eeec:	bfb4      	ite	lt
    eeee:	68a1      	ldrlt	r1, [r4, #8]
    eef0:	f104 0108 	addge.w	r1, r4, #8
    eef4:	f7fe ff90 	bl	de18 <bb_getUInt64>
    eef8:	2800      	cmp	r0, #0
    eefa:	d1f3      	bne.n	eee4 <getUInt64+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    eefc:	f994 3000 	ldrsb.w	r3, [r4]
    ef00:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT64;
    ef02:	bfa4      	itt	ge
    ef04:	2315      	movge	r3, #21
    ef06:	7023      	strbge	r3, [r4, #0]
    ef08:	e7ec      	b.n	eee4 <getUInt64+0x12>

0000ef0a <getEnum>:
{
    ef0a:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    ef0c:	88c3      	ldrh	r3, [r0, #6]
{
    ef0e:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    ef10:	8902      	ldrh	r2, [r0, #8]
    ef12:	1a9b      	subs	r3, r3, r2
    ef14:	2b00      	cmp	r3, #0
    ef16:	dc02      	bgt.n	ef1e <getEnum+0x14>
        info->complete = 0;
    ef18:	2000      	movs	r0, #0
    ef1a:	7148      	strb	r0, [r1, #5]
}
    ef1c:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->bVal : value->pbVal)) != 0)
    ef1e:	f994 3000 	ldrsb.w	r3, [r4]
    ef22:	2b00      	cmp	r3, #0
    ef24:	bfb4      	ite	lt
    ef26:	68a1      	ldrlt	r1, [r4, #8]
    ef28:	f104 0108 	addge.w	r1, r4, #8
    ef2c:	f7fe fe97 	bl	dc5e <bb_getUInt8>
    ef30:	2800      	cmp	r0, #0
    ef32:	d1f3      	bne.n	ef1c <getEnum+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    ef34:	f994 3000 	ldrsb.w	r3, [r4]
    ef38:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_ENUM;
    ef3a:	bfa4      	itt	ge
    ef3c:	2316      	movge	r3, #22
    ef3e:	7023      	strbge	r3, [r4, #0]
    ef40:	e7ec      	b.n	ef1c <getEnum+0x12>

0000ef42 <getDouble>:
{
    ef42:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    ef44:	88c3      	ldrh	r3, [r0, #6]
{
    ef46:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    ef48:	8902      	ldrh	r2, [r0, #8]
    ef4a:	1a9b      	subs	r3, r3, r2
    ef4c:	2b07      	cmp	r3, #7
    ef4e:	dc02      	bgt.n	ef56 <getDouble+0x14>
        info->complete = 0;
    ef50:	2000      	movs	r0, #0
    ef52:	7148      	strb	r0, [r1, #5]
}
    ef54:	bd10      	pop	{r4, pc}
    if ((ret = bb_getDouble(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->dblVal : value->pdblVal)) != 0)
    ef56:	f994 3000 	ldrsb.w	r3, [r4]
    ef5a:	2b00      	cmp	r3, #0
    ef5c:	bfb4      	ite	lt
    ef5e:	68a1      	ldrlt	r1, [r4, #8]
    ef60:	f104 0108 	addge.w	r1, r4, #8
    ef64:	f7fe ff7f 	bl	de66 <bb_getDouble>
    ef68:	2800      	cmp	r0, #0
    ef6a:	d1f3      	bne.n	ef54 <getDouble+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    ef6c:	f994 3000 	ldrsb.w	r3, [r4]
    ef70:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_FLOAT64;
    ef72:	bfa4      	itt	ge
    ef74:	2318      	movge	r3, #24
    ef76:	7023      	strbge	r3, [r4, #0]
    ef78:	e7ec      	b.n	ef54 <getDouble+0x12>

0000ef7a <getFloat>:
{
    ef7a:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 4)
    ef7c:	88c3      	ldrh	r3, [r0, #6]
{
    ef7e:	4614      	mov	r4, r2
    if (buff->size - buff->position < 4)
    ef80:	8902      	ldrh	r2, [r0, #8]
    ef82:	1a9b      	subs	r3, r3, r2
    ef84:	2b03      	cmp	r3, #3
    ef86:	dc02      	bgt.n	ef8e <getFloat+0x14>
        info->complete = 0;
    ef88:	2000      	movs	r0, #0
    ef8a:	7148      	strb	r0, [r1, #5]
}
    ef8c:	bd10      	pop	{r4, pc}
    if ((ret = bb_getFloat(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->fltVal : value->pfltVal)) != 0)
    ef8e:	f994 3000 	ldrsb.w	r3, [r4]
    ef92:	2b00      	cmp	r3, #0
    ef94:	bfb4      	ite	lt
    ef96:	68a1      	ldrlt	r1, [r4, #8]
    ef98:	f104 0108 	addge.w	r1, r4, #8
    ef9c:	f7fe ff47 	bl	de2e <bb_getFloat>
    efa0:	2800      	cmp	r0, #0
    efa2:	d1f3      	bne.n	ef8c <getFloat+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    efa4:	f994 3000 	ldrsb.w	r3, [r4]
    efa8:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_FLOAT32;
    efaa:	bfa4      	itt	ge
    efac:	2317      	movge	r3, #23
    efae:	7023      	strbge	r3, [r4, #0]
    efb0:	e7ec      	b.n	ef8c <getFloat+0x12>

0000efb2 <getDateTime>:
{
    efb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (buff->size - buff->position < 12)
    efb6:	88c3      	ldrh	r3, [r0, #6]
{
    efb8:	4617      	mov	r7, r2
    if (buff->size - buff->position < 12)
    efba:	8902      	ldrh	r2, [r0, #8]
    efbc:	1a9b      	subs	r3, r3, r2
    efbe:	2b0b      	cmp	r3, #11
{
    efc0:	b08a      	sub	sp, #40	; 0x28
    efc2:	4605      	mov	r5, r0
    if (buff->size - buff->position < 12)
    efc4:	dc06      	bgt.n	efd4 <getDateTime+0x22>
        info->complete = 0;
    efc6:	2000      	movs	r0, #0
    efc8:	7148      	strb	r0, [r1, #5]
        return 0;
    efca:	4604      	mov	r4, r0
}
    efcc:	4620      	mov	r0, r4
    efce:	b00a      	add	sp, #40	; 0x28
    efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret = bb_getUInt16(buff, &year)) != 0)
    efd4:	a909      	add	r1, sp, #36	; 0x24
    efd6:	f7fe fe6b 	bl	dcb0 <bb_getUInt16>
    efda:	4604      	mov	r4, r0
    efdc:	2800      	cmp	r0, #0
    efde:	d1f5      	bne.n	efcc <getDateTime+0x1a>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) != 0)
    efe0:	f997 3000 	ldrsb.w	r3, [r7]
    efe4:	2b00      	cmp	r3, #0
    efe6:	f280 80c5 	bge.w	f174 <getDateTime+0x1c2>
        t = value->pVal;
    efea:	68be      	ldr	r6, [r7, #8]
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0, wday = 0, skip = 0;
    efec:	2300      	movs	r3, #0
    if ((ret = bb_getUInt8(buff, &mon)) != 0)
    efee:	f10d 011f 	add.w	r1, sp, #31
    eff2:	4628      	mov	r0, r5
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0, wday = 0, skip = 0;
    eff4:	f88d 301f 	strb.w	r3, [sp, #31]
    eff8:	f88d 3020 	strb.w	r3, [sp, #32]
    effc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    f000:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    f004:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    if ((ret = bb_getUInt8(buff, &mon)) != 0)
    f008:	f7fe fe29 	bl	dc5e <bb_getUInt8>
    f00c:	4604      	mov	r4, r0
    f00e:	2800      	cmp	r0, #0
    f010:	d1dc      	bne.n	efcc <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &day)) != 0)
    f012:	a908      	add	r1, sp, #32
    f014:	4628      	mov	r0, r5
    f016:	f7fe fe22 	bl	dc5e <bb_getUInt8>
    f01a:	4604      	mov	r4, r0
    f01c:	2800      	cmp	r0, #0
    f01e:	d1d5      	bne.n	efcc <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f020:	f10d 011e 	add.w	r1, sp, #30
    f024:	4628      	mov	r0, r5
    f026:	f7fe fe1a 	bl	dc5e <bb_getUInt8>
    f02a:	4604      	mov	r4, r0
    f02c:	2800      	cmp	r0, #0
    f02e:	d1cd      	bne.n	efcc <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &hour)) != 0)
    f030:	f10d 0121 	add.w	r1, sp, #33	; 0x21
    f034:	4628      	mov	r0, r5
    f036:	f7fe fe12 	bl	dc5e <bb_getUInt8>
    f03a:	4604      	mov	r4, r0
    f03c:	2800      	cmp	r0, #0
    f03e:	d1c5      	bne.n	efcc <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &min)) != 0)
    f040:	f10d 0122 	add.w	r1, sp, #34	; 0x22
    f044:	4628      	mov	r0, r5
    f046:	f7fe fe0a 	bl	dc5e <bb_getUInt8>
    f04a:	4604      	mov	r4, r0
    f04c:	2800      	cmp	r0, #0
    f04e:	d1bd      	bne.n	efcc <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &sec)) != 0)
    f050:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    f054:	4628      	mov	r0, r5
    f056:	f7fe fe02 	bl	dc5e <bb_getUInt8>
    f05a:	4604      	mov	r4, r0
    f05c:	2800      	cmp	r0, #0
    f05e:	d1b5      	bne.n	efcc <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f060:	f10d 011e 	add.w	r1, sp, #30
    f064:	4628      	mov	r0, r5
    f066:	f7fe fdfa 	bl	dc5e <bb_getUInt8>
    f06a:	4604      	mov	r4, r0
    f06c:	2800      	cmp	r0, #0
    f06e:	d1ad      	bne.n	efcc <getDateTime+0x1a>
    if ((ret = bb_getInt16(buff, &deviation)) != 0)
    f070:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    f074:	4628      	mov	r0, r5
    f076:	f7fe fe49 	bl	dd0c <bb_getInt16>
    f07a:	4604      	mov	r4, r0
    f07c:	2800      	cmp	r0, #0
    f07e:	d1a5      	bne.n	efcc <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f080:	f10d 011e 	add.w	r1, sp, #30
    f084:	4628      	mov	r0, r5
    f086:	f7fe fdea 	bl	dc5e <bb_getUInt8>
    f08a:	4604      	mov	r4, r0
    f08c:	2800      	cmp	r0, #0
    f08e:	d19d      	bne.n	efcc <getDateTime+0x1a>
    if (year < 1 || year == 0xFFFF)
    f090:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    status = ch;
    f094:	f89d 701e 	ldrb.w	r7, [sp, #30]
    t->status = (DLMS_CLOCK_STATUS)status;
    f098:	7277      	strb	r7, [r6, #9]
    if (year < 1 || year == 0xFFFF)
    f09a:	3b01      	subs	r3, #1
    f09c:	b29b      	uxth	r3, r3
    f09e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    f0a2:	4293      	cmp	r3, r2
        year = 1970;
    f0a4:	bf84      	itt	hi
    f0a6:	f240 73b2 	movwhi	r3, #1970	; 0x7b2
    f0aa:	f8ad 3024 	strhhi.w	r3, [sp, #36]	; 0x24
    if ((mon < 1 || mon > 12) && mon != 0xFE && mon != 0xFD)
    f0ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    f0b2:	f103 32ff 	add.w	r2, r3, #4294967295
        skip |= DATETIME_SKIPS_YEAR;
    f0b6:	bf8c      	ite	hi
    f0b8:	2581      	movhi	r5, #129	; 0x81
    skip = DATETIME_SKIPS_MS;
    f0ba:	2580      	movls	r5, #128	; 0x80
    if ((mon < 1 || mon > 12) && mon != 0xFE && mon != 0xFD)
    f0bc:	2a0b      	cmp	r2, #11
    f0be:	d908      	bls.n	f0d2 <getDateTime+0x120>
    f0c0:	3303      	adds	r3, #3
    f0c2:	b2db      	uxtb	r3, r3
    f0c4:	2b01      	cmp	r3, #1
        mon = 1;
    f0c6:	bf82      	ittt	hi
    f0c8:	2301      	movhi	r3, #1
        skip |= DATETIME_SKIPS_MONTH;
    f0ca:	f045 0502 	orrhi.w	r5, r5, #2
        mon = 1;
    f0ce:	f88d 301f 	strbhi.w	r3, [sp, #31]
    if ((day < 1 || day > 31) && day != 0xFE && day != 0xFD)
    f0d2:	f89d 3020 	ldrb.w	r3, [sp, #32]
    f0d6:	1e5a      	subs	r2, r3, #1
    f0d8:	2a1e      	cmp	r2, #30
    f0da:	d908      	bls.n	f0ee <getDateTime+0x13c>
    f0dc:	3303      	adds	r3, #3
    f0de:	b2db      	uxtb	r3, r3
    f0e0:	2b01      	cmp	r3, #1
        day = 1;
    f0e2:	bf82      	ittt	hi
    f0e4:	2301      	movhi	r3, #1
        skip |= DATETIME_SKIPS_DAY;
    f0e6:	f045 0504 	orrhi.w	r5, r5, #4
        day = 1;
    f0ea:	f88d 3020 	strbhi.w	r3, [sp, #32]
    if (hour > 24)
    f0ee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    f0f2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    f0f6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    if (hour > 24)
    f0fa:	2b18      	cmp	r3, #24
        hour = 0;
    f0fc:	bf84      	itt	hi
    f0fe:	2300      	movhi	r3, #0
    f100:	f88d 3021 	strbhi.w	r3, [sp, #33]	; 0x21
    if (min > 60)
    f104:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
        skip |= DATETIME_SKIPS_HOUR;
    f108:	bf88      	it	hi
    f10a:	f045 0510 	orrhi.w	r5, r5, #16
    if (min > 60)
    f10e:	2b3c      	cmp	r3, #60	; 0x3c
        min = 0;
    f110:	bf84      	itt	hi
    f112:	2300      	movhi	r3, #0
    f114:	f88d 3022 	strbhi.w	r3, [sp, #34]	; 0x22
    if (sec > 60)
    f118:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        skip |= DATETIME_SKIPS_MINUTE;
    f11c:	bf88      	it	hi
    f11e:	f045 0520 	orrhi.w	r5, r5, #32
    if (sec > 60)
    f122:	2b3c      	cmp	r3, #60	; 0x3c
        sec = 0;
    f124:	bf84      	itt	hi
    f126:	2300      	movhi	r3, #0
    f128:	f88d 3023 	strbhi.w	r3, [sp, #35]	; 0x23
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    f12c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
    f130:	9304      	str	r3, [sp, #16]
    f132:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    f136:	9302      	str	r3, [sp, #8]
    f138:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    f13c:	9301      	str	r3, [sp, #4]
    f13e:	f04f 0800 	mov.w	r8, #0
    f142:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    f146:	9300      	str	r3, [sp, #0]
        skip |= DATETIME_SKIPS_SECOND;
    f148:	bf88      	it	hi
    f14a:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    f14e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    f152:	f8cd 800c 	str.w	r8, [sp, #12]
    f156:	4630      	mov	r0, r6
    f158:	f7f3 f83e 	bl	21d8 <time_init>
    t->skip = skip;
    f15c:	b2ad      	uxth	r5, r5
    if (status == 0xFF)
    f15e:	2fff      	cmp	r7, #255	; 0xff
    t->skip = skip;
    f160:	80f5      	strh	r5, [r6, #6]
        t->skip = (DATETIME_SKIPS)(t->skip | DATETIME_SKIPS_STATUS);
    f162:	bf08      	it	eq
    f164:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
    t->status = status;
    f168:	7277      	strb	r7, [r6, #9]
        t->skip = (DATETIME_SKIPS)(t->skip | DATETIME_SKIPS_STATUS);
    f16a:	bf04      	itt	eq
    f16c:	80f5      	strheq	r5, [r6, #6]
        t->status = 0;
    f16e:	f886 8009 	strbeq.w	r8, [r6, #9]
    f172:	e72b      	b.n	efcc <getDateTime+0x1a>
        t = value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    f174:	200c      	movs	r0, #12
    f176:	f7fd fb75 	bl	c864 <malloc>
        value->vt = DLMS_DATA_TYPE_DATETIME;
    f17a:	2319      	movs	r3, #25
        t = value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    f17c:	4606      	mov	r6, r0
    f17e:	60b8      	str	r0, [r7, #8]
        value->vt = DLMS_DATA_TYPE_DATETIME;
    f180:	703b      	strb	r3, [r7, #0]
    f182:	e733      	b.n	efec <getDateTime+0x3a>

0000f184 <getDataTypes>:
{
    f184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (cols->size == 0)
    f188:	88cb      	ldrh	r3, [r1, #6]
{
    f18a:	b087      	sub	sp, #28
    f18c:	4607      	mov	r7, r0
    f18e:	460e      	mov	r6, r1
    f190:	4691      	mov	r9, r2
    if (cols->size == 0)
    f192:	b91b      	cbnz	r3, f19c <getDataTypes+0x18>
        va_capacity(cols, (uint16_t)len);
    f194:	b291      	uxth	r1, r2
    f196:	4630      	mov	r0, r6
    f198:	f00c f92f 	bl	1b3fa <va_capacity>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    f19c:	f04f 0a00 	mov.w	sl, #0
    for (int pos = 0; pos != len; ++pos)
    f1a0:	45ca      	cmp	sl, r9
    f1a2:	d101      	bne.n	f1a8 <getDataTypes+0x24>
    return 0;
    f1a4:	2400      	movs	r4, #0
    f1a6:	e030      	b.n	f20a <getDataTypes+0x86>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f1a8:	f10d 0101 	add.w	r1, sp, #1
    f1ac:	4638      	mov	r0, r7
    f1ae:	f7fe fd56 	bl	dc5e <bb_getUInt8>
    f1b2:	4604      	mov	r4, r0
    f1b4:	bb48      	cbnz	r0, f20a <getDataTypes+0x86>
        dt = (DLMS_DATA_TYPE)ch;
    f1b6:	f89d 8001 	ldrb.w	r8, [sp, #1]
        if (dt == DLMS_DATA_TYPE_ARRAY)
    f1ba:	f1b8 0f01 	cmp.w	r8, #1
    f1be:	d170      	bne.n	f2a2 <getDataTypes+0x11e>
            if ((ret = bb_getUInt16(buff, &cnt)) != 0)
    f1c0:	f10d 0102 	add.w	r1, sp, #2
    f1c4:	4638      	mov	r0, r7
    f1c6:	f7fe fd73 	bl	dcb0 <bb_getUInt16>
    f1ca:	4604      	mov	r4, r0
    f1cc:	b9e8      	cbnz	r0, f20a <getDataTypes+0x86>
            var_init(&tmp);
    f1ce:	a802      	add	r0, sp, #8
    f1d0:	f00c f82d 	bl	1b22e <var_init>
            tmp.Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    f1d4:	2008      	movs	r0, #8
    f1d6:	f7fd fb45 	bl	c864 <malloc>
            tmp.vt = DLMS_DATA_TYPE_ARRAY;
    f1da:	f88d 8008 	strb.w	r8, [sp, #8]
            tmp.Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    f1de:	9004      	str	r0, [sp, #16]
            if (tmp.Arr == NULL)
    f1e0:	b910      	cbnz	r0, f1e8 <getDataTypes+0x64>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    f1e2:	f44f 7482 	mov.w	r4, #260	; 0x104
    f1e6:	e010      	b.n	f20a <getDataTypes+0x86>
            va_init(tmp.Arr);
    f1e8:	f00c f903 	bl	1b3f2 <va_init>
            getDataTypes(buff, tmp.Arr, 1);
    f1ec:	9904      	ldr	r1, [sp, #16]
    f1ee:	4642      	mov	r2, r8
    f1f0:	4638      	mov	r0, r7
    f1f2:	f7ff ffc7 	bl	f184 <getDataTypes>
            if ((ret = va_getByIndex(tmp.Arr, 0, &it)) != 0)
    f1f6:	4621      	mov	r1, r4
    f1f8:	9804      	ldr	r0, [sp, #16]
    f1fa:	aa01      	add	r2, sp, #4
    f1fc:	f00c f9f1 	bl	1b5e2 <va_getByIndex>
    f200:	4604      	mov	r4, r0
    f202:	b130      	cbz	r0, f212 <getDataTypes+0x8e>
                va_clear(cols);
    f204:	4630      	mov	r0, r6
    f206:	f00c f949 	bl	1b49c <va_clear>
}
    f20a:	4620      	mov	r0, r4
    f20c:	b007      	add	sp, #28
    f20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dlmsVARIANT* tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    f212:	2010      	movs	r0, #16
    f214:	f7fd fb26 	bl	c864 <malloc>
            if (tmp2 == NULL)
    f218:	4605      	mov	r5, r0
    f21a:	2800      	cmp	r0, #0
    f21c:	d0e1      	beq.n	f1e2 <getDataTypes+0x5e>
            var_init(tmp2);
    f21e:	f00c f806 	bl	1b22e <var_init>
            tmp2->vt = DLMS_DATA_TYPE_ARRAY;
    f222:	f885 8000 	strb.w	r8, [r5]
            tmp2->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    f226:	2008      	movs	r0, #8
    f228:	f7fd fb1c 	bl	c864 <malloc>
    f22c:	60a8      	str	r0, [r5, #8]
            if (tmp2->Arr == NULL)
    f22e:	b930      	cbnz	r0, f23e <getDataTypes+0xba>
                    var_clear(tmp2);
    f230:	4628      	mov	r0, r5
    f232:	f00c f958 	bl	1b4e6 <var_clear>
                    gxfree(tmp2);
    f236:	4628      	mov	r0, r5
    f238:	f7fd fb1c 	bl	c874 <free>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    f23c:	e7d1      	b.n	f1e2 <getDataTypes+0x5e>
            va_init(tmp2->Arr);
    f23e:	f00c f8d8 	bl	1b3f2 <va_init>
            for (int i = 0; i != cnt; ++i)
    f242:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    f246:	42a3      	cmp	r3, r4
    f248:	d109      	bne.n	f25e <getDataTypes+0xda>
            var_clear(&tmp);
    f24a:	a802      	add	r0, sp, #8
    f24c:	f00c f94b 	bl	1b4e6 <var_clear>
            va_push(cols, tmp);
    f250:	4629      	mov	r1, r5
            va_push(cols, tmp);
    f252:	4630      	mov	r0, r6
    f254:	f00c f8f9 	bl	1b44a <va_push>
    for (int pos = 0; pos != len; ++pos)
    f258:	f10a 0a01 	add.w	sl, sl, #1
    f25c:	e7a0      	b.n	f1a0 <getDataTypes+0x1c>
                dlmsVARIANT* tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    f25e:	2010      	movs	r0, #16
    f260:	f7fd fb00 	bl	c864 <malloc>
                if (tmp3 == NULL)
    f264:	4680      	mov	r8, r0
    f266:	2800      	cmp	r0, #0
    f268:	d0e2      	beq.n	f230 <getDataTypes+0xac>
                var_init(tmp3);
    f26a:	f00b ffe0 	bl	1b22e <var_init>
                if ((ret = var_copy(tmp3, it)) != 0)
    f26e:	9901      	ldr	r1, [sp, #4]
    f270:	4640      	mov	r0, r8
    f272:	f7f5 f997 	bl	45a4 <var_copy>
    f276:	4683      	mov	fp, r0
    f278:	b168      	cbz	r0, f296 <getDataTypes+0x112>
                    var_clear(tmp3);
    f27a:	4640      	mov	r0, r8
    f27c:	f00c f933 	bl	1b4e6 <var_clear>
                    gxfree(tmp3);
    f280:	4640      	mov	r0, r8
    f282:	f7fd faf7 	bl	c874 <free>
                    var_clear(tmp2);
    f286:	4628      	mov	r0, r5
    f288:	f00c f92d 	bl	1b4e6 <var_clear>
                    gxfree(tmp2);
    f28c:	4628      	mov	r0, r5
    f28e:	f7fd faf1 	bl	c874 <free>
                if ((ret = var_copy(tmp3, it)) != 0)
    f292:	465c      	mov	r4, fp
                    return ret;
    f294:	e7b9      	b.n	f20a <getDataTypes+0x86>
                va_push(tmp2->Arr, tmp3);
    f296:	68a8      	ldr	r0, [r5, #8]
    f298:	4641      	mov	r1, r8
    f29a:	f00c f8d6 	bl	1b44a <va_push>
            for (int i = 0; i != cnt; ++i)
    f29e:	3401      	adds	r4, #1
    f2a0:	e7cf      	b.n	f242 <getDataTypes+0xbe>
        else if (dt == DLMS_DATA_TYPE_STRUCTURE)
    f2a2:	f1b8 0f02 	cmp.w	r8, #2
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    f2a6:	f04f 0010 	mov.w	r0, #16
        else if (dt == DLMS_DATA_TYPE_STRUCTURE)
    f2aa:	d129      	bne.n	f300 <getDataTypes+0x17c>
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    f2ac:	f7fd fada 	bl	c864 <malloc>
            if (tmp == NULL)
    f2b0:	4605      	mov	r5, r0
    f2b2:	2800      	cmp	r0, #0
    f2b4:	d095      	beq.n	f1e2 <getDataTypes+0x5e>
            var_init(tmp);
    f2b6:	f00b ffba 	bl	1b22e <var_init>
            if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f2ba:	f10d 0101 	add.w	r1, sp, #1
    f2be:	4638      	mov	r0, r7
    f2c0:	f7fe fccd 	bl	dc5e <bb_getUInt8>
    f2c4:	4604      	mov	r4, r0
    f2c6:	b148      	cbz	r0, f2dc <getDataTypes+0x158>
                va_clear(cols);
    f2c8:	4630      	mov	r0, r6
    f2ca:	f00c f8e7 	bl	1b49c <va_clear>
                var_clear(tmp);
    f2ce:	4628      	mov	r0, r5
    f2d0:	f00c f909 	bl	1b4e6 <var_clear>
                gxfree(tmp);
    f2d4:	4628      	mov	r0, r5
    f2d6:	f7fd facd 	bl	c874 <free>
                return ret;
    f2da:	e796      	b.n	f20a <getDataTypes+0x86>
            tmp->vt = DLMS_DATA_TYPE_STRUCTURE;
    f2dc:	f885 8000 	strb.w	r8, [r5]
            tmp->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    f2e0:	2008      	movs	r0, #8
    f2e2:	f7fd fabf 	bl	c864 <malloc>
    f2e6:	60a8      	str	r0, [r5, #8]
            if (tmp->Arr == NULL)
    f2e8:	2800      	cmp	r0, #0
    f2ea:	f43f af7a 	beq.w	f1e2 <getDataTypes+0x5e>
            va_init(tmp->Arr);
    f2ee:	f00c f880 	bl	1b3f2 <va_init>
            getDataTypes(buff, tmp->Arr, ch);
    f2f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
    f2f6:	68a9      	ldr	r1, [r5, #8]
    f2f8:	4638      	mov	r0, r7
    f2fa:	f7ff ff43 	bl	f184 <getDataTypes>
    f2fe:	e7a7      	b.n	f250 <getDataTypes+0xcc>
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    f300:	f7fd fab0 	bl	c864 <malloc>
            if (tmp == NULL)
    f304:	4604      	mov	r4, r0
    f306:	2800      	cmp	r0, #0
    f308:	f43f af6b 	beq.w	f1e2 <getDataTypes+0x5e>
            var_init(tmp);
    f30c:	f00b ff8f 	bl	1b22e <var_init>
            if (cols->size == 0)
    f310:	88f3      	ldrh	r3, [r6, #6]
    f312:	b91b      	cbnz	r3, f31c <getDataTypes+0x198>
                va_capacity(cols, 1);
    f314:	2101      	movs	r1, #1
    f316:	4630      	mov	r0, r6
    f318:	f00c f86f 	bl	1b3fa <va_capacity>
            var_setUInt8(tmp, dt);
    f31c:	4641      	mov	r1, r8
    f31e:	4620      	mov	r0, r4
    f320:	f00c f92f 	bl	1b582 <var_setUInt8>
            va_push(cols, tmp);
    f324:	4621      	mov	r1, r4
    f326:	e794      	b.n	f252 <getDataTypes+0xce>

0000f328 <dlms_getData>:
{
    f328:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    f32c:	4606      	mov	r6, r0
    uint32_t startIndex = data->position;
    f32e:	f8b0 8008 	ldrh.w	r8, [r0, #8]
    var_clear(value);
    f332:	4610      	mov	r0, r2
{
    f334:	4615      	mov	r5, r2
    f336:	460c      	mov	r4, r1
    var_clear(value);
    f338:	f00c f8d5 	bl	1b4e6 <var_clear>
    if (data->position == data->size)
    f33c:	8932      	ldrh	r2, [r6, #8]
    f33e:	88f3      	ldrh	r3, [r6, #6]
    f340:	429a      	cmp	r2, r3
    f342:	d104      	bne.n	f34e <dlms_getData+0x26>
        info->complete = 0;
    f344:	2000      	movs	r0, #0
    f346:	7160      	strb	r0, [r4, #5]
}
    f348:	b004      	add	sp, #16
    f34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    knownType = info->type != DLMS_DATA_TYPE_NONE;
    f34e:	7927      	ldrb	r7, [r4, #4]
    info->complete = 1;
    f350:	2301      	movs	r3, #1
    f352:	7163      	strb	r3, [r4, #5]
    if (!knownType)
    f354:	b94f      	cbnz	r7, f36a <dlms_getData+0x42>
        ret = bb_getUInt8(data, &ch);
    f356:	f10d 010d 	add.w	r1, sp, #13
    f35a:	4630      	mov	r0, r6
    f35c:	f7fe fc7f 	bl	dc5e <bb_getUInt8>
        if (ret != DLMS_ERROR_CODE_OK)
    f360:	2800      	cmp	r0, #0
    f362:	d1f1      	bne.n	f348 <dlms_getData+0x20>
        info->type = (DLMS_DATA_TYPE)ch;
    f364:	f89d 300d 	ldrb.w	r3, [sp, #13]
    f368:	7123      	strb	r3, [r4, #4]
    if (info->type == DLMS_DATA_TYPE_NONE)
    f36a:	7923      	ldrb	r3, [r4, #4]
    f36c:	b90b      	cbnz	r3, f372 <dlms_getData+0x4a>
        value->vt = info->type;
    f36e:	2000      	movs	r0, #0
    f370:	e7ea      	b.n	f348 <dlms_getData+0x20>
    if (data->position == data->size)
    f372:	8930      	ldrh	r0, [r6, #8]
    f374:	88f1      	ldrh	r1, [r6, #6]
    f376:	4288      	cmp	r0, r1
    f378:	d0e4      	beq.n	f344 <dlms_getData+0x1c>
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    f37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    knownType = info->type != DLMS_DATA_TYPE_NONE;
    f37e:	1e3a      	subs	r2, r7, #0
    f380:	f103 33ff 	add.w	r3, r3, #4294967295
    f384:	bf18      	it	ne
    f386:	2201      	movne	r2, #1
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    f388:	2b1a      	cmp	r3, #26
    f38a:	f200 80d5 	bhi.w	f538 <dlms_getData+0x210>
    f38e:	e8df f003 	tbb	[pc, r3]
    f392:	0e0e      	.short	0x0e0e
    f394:	655f3a19 	.word	0x655f3a19
    f398:	6b77d3d3 	.word	0x6b77d3d3
    f39c:	d37d71d3 	.word	0xd37d71d3
    f3a0:	958f8983 	.word	0x958f8983
    f3a4:	afa9a39b 	.word	0xafa9a39b
    f3a8:	c7c1bbb5 	.word	0xc7c1bbb5
    f3ac:	cd          	.byte	0xcd
    f3ad:	00          	.byte	0x00
        ret = getArray(data, info, (uint16_t)startIndex, value);
    f3ae:	462b      	mov	r3, r5
    f3b0:	4642      	mov	r2, r8
    f3b2:	4621      	mov	r1, r4
    f3b4:	4630      	mov	r0, r6
    f3b6:	f000 f8c2 	bl	f53e <getArray>
        value->vt = info->type;
    f3ba:	7923      	ldrb	r3, [r4, #4]
    f3bc:	702b      	strb	r3, [r5, #0]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f3be:	2800      	cmp	r0, #0
    f3c0:	d1c2      	bne.n	f348 <dlms_getData+0x20>
    f3c2:	e004      	b.n	f3ce <dlms_getData+0xa6>
    if (buff->size - buff->position < 1)
    f3c4:	1a09      	subs	r1, r1, r0
    f3c6:	2900      	cmp	r1, #0
    f3c8:	dc06      	bgt.n	f3d8 <dlms_getData+0xb0>
        info->complete = 0;
    f3ca:	2300      	movs	r3, #0
    f3cc:	7163      	strb	r3, [r4, #5]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f3ce:	f995 3000 	ldrsb.w	r3, [r5]
    f3d2:	2b00      	cmp	r3, #0
    f3d4:	da11      	bge.n	f3fa <dlms_getData+0xd2>
    f3d6:	e7ca      	b.n	f36e <dlms_getData+0x46>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f3d8:	f10d 010e 	add.w	r1, sp, #14
    f3dc:	4630      	mov	r0, r6
    f3de:	f7fe fc3e 	bl	dc5e <bb_getUInt8>
    f3e2:	2800      	cmp	r0, #0
    f3e4:	d1b0      	bne.n	f348 <dlms_getData+0x20>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f3e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f3ea:	f995 2000 	ldrsb.w	r2, [r5]
    f3ee:	3b00      	subs	r3, #0
    f3f0:	bf18      	it	ne
    f3f2:	2301      	movne	r3, #1
    f3f4:	2a00      	cmp	r2, #0
    f3f6:	db03      	blt.n	f400 <dlms_getData+0xd8>
        value->boolVal = ch != 0;
    f3f8:	722b      	strb	r3, [r5, #8]
        value->vt = info->type;
    f3fa:	7923      	ldrb	r3, [r4, #4]
    f3fc:	702b      	strb	r3, [r5, #0]
    f3fe:	e7b6      	b.n	f36e <dlms_getData+0x46>
        *value->pboolVal = ch != 0;
    f400:	68aa      	ldr	r2, [r5, #8]
    f402:	7013      	strb	r3, [r2, #0]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f404:	e7e3      	b.n	f3ce <dlms_getData+0xa6>
    uint16_t cnt = 0;
    f406:	2300      	movs	r3, #0
    if (hlp_getObjectCount2(buff, &cnt) != 0)
    f408:	f10d 010e 	add.w	r1, sp, #14
    f40c:	4630      	mov	r0, r6
    uint16_t cnt = 0;
    f40e:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (hlp_getObjectCount2(buff, &cnt) != 0)
    f412:	f00b fb7f 	bl	1ab14 <hlp_getObjectCount2>
    f416:	4607      	mov	r7, r0
    f418:	b110      	cbz	r0, f420 <dlms_getData+0xf8>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    f41a:	f44f 7082 	mov.w	r0, #260	; 0x104
    f41e:	e793      	b.n	f348 <dlms_getData+0x20>
    uint16_t byteCnt = ba_getByteCount(cnt);
    f420:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    f424:	f7f2 f8aa 	bl	157c <ba_getByteCount>
    if (buff->size - buff->position < byteCnt)
    f428:	88f3      	ldrh	r3, [r6, #6]
    f42a:	8932      	ldrh	r2, [r6, #8]
    f42c:	1a9b      	subs	r3, r3, r2
    f42e:	4283      	cmp	r3, r0
    f430:	da01      	bge.n	f436 <dlms_getData+0x10e>
        info->complete = 0;
    f432:	7167      	strb	r7, [r4, #5]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f434:	e7cb      	b.n	f3ce <dlms_getData+0xa6>
    value->bitArr = (bitArray*)gxmalloc(sizeof(bitArray));
    f436:	2008      	movs	r0, #8
    f438:	f7fd fa14 	bl	c864 <malloc>
    f43c:	60a8      	str	r0, [r5, #8]
    ba_init(value->bitArr);
    f43e:	f7fe f92e 	bl	d69e <ba_init>
    if ((ret = hlp_add(value->bitArr, buff, cnt)) != 0)
    f442:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    f446:	68a8      	ldr	r0, [r5, #8]
    f448:	4631      	mov	r1, r6
    f44a:	f00b fcf2 	bl	1ae32 <hlp_add>
    f44e:	e7b6      	b.n	f3be <dlms_getData+0x96>
        ret = getInt32(data, info, value);
    f450:	462a      	mov	r2, r5
    f452:	4621      	mov	r1, r4
    f454:	4630      	mov	r0, r6
    f456:	f7ff fc00 	bl	ec5a <getInt32>
        break;
    f45a:	e7b0      	b.n	f3be <dlms_getData+0x96>
        ret = getUInt32(data, info, value);
    f45c:	462a      	mov	r2, r5
    f45e:	4621      	mov	r1, r4
    f460:	4630      	mov	r0, r6
    f462:	f7ff fbe2 	bl	ec2a <getUInt32>
        break;
    f466:	e7aa      	b.n	f3be <dlms_getData+0x96>
        ret = getString(data, info, knownType, value);
    f468:	462b      	mov	r3, r5
    f46a:	4621      	mov	r1, r4
    f46c:	4630      	mov	r0, r6
    f46e:	f7ff fc0c 	bl	ec8a <getString>
        break;
    f472:	e7a4      	b.n	f3be <dlms_getData+0x96>
        ret = getUtfString(data, info, knownType, value);
    f474:	462b      	mov	r3, r5
    f476:	4621      	mov	r1, r4
    f478:	4630      	mov	r0, r6
    f47a:	f7ff fc36 	bl	ecea <getUtfString>
        break;
    f47e:	e79e      	b.n	f3be <dlms_getData+0x96>
        ret = getOctetString(data, info, knownType, value);
    f480:	462b      	mov	r3, r5
    f482:	4621      	mov	r1, r4
    f484:	4630      	mov	r0, r6
    f486:	f7ff fc69 	bl	ed5c <getOctetString>
        break;
    f48a:	e798      	b.n	f3be <dlms_getData+0x96>
        ret = getBcd(data, info, knownType, value);
    f48c:	462b      	mov	r3, r5
    f48e:	4621      	mov	r1, r4
    f490:	4630      	mov	r0, r6
    f492:	f7f3 fa8b 	bl	29ac <getBcd>
        break;
    f496:	e792      	b.n	f3be <dlms_getData+0x96>
        ret = getInt8(data, info, value);
    f498:	462a      	mov	r2, r5
    f49a:	4621      	mov	r1, r4
    f49c:	4630      	mov	r0, r6
    f49e:	f7ff fcc4 	bl	ee2a <getInt8>
        break;
    f4a2:	e78c      	b.n	f3be <dlms_getData+0x96>
        ret = getInt16(data, info, value);
    f4a4:	462a      	mov	r2, r5
    f4a6:	4621      	mov	r1, r4
    f4a8:	4630      	mov	r0, r6
    f4aa:	f7ff fca2 	bl	edf2 <getInt16>
        break;
    f4ae:	e786      	b.n	f3be <dlms_getData+0x96>
        ret = getUInt8(data, info, value);
    f4b0:	462a      	mov	r2, r5
    f4b2:	4621      	mov	r1, r4
    f4b4:	4630      	mov	r0, r6
    f4b6:	f7ff fc80 	bl	edba <getUInt8>
        break;
    f4ba:	e780      	b.n	f3be <dlms_getData+0x96>
        ret = getUInt16(data, info, value);
    f4bc:	462a      	mov	r2, r5
    f4be:	4621      	mov	r1, r4
    f4c0:	4630      	mov	r0, r6
    f4c2:	f7ff fcce 	bl	ee62 <getUInt16>
        break;
    f4c6:	e77a      	b.n	f3be <dlms_getData+0x96>
        ret = getCompactArray(NULL, data, info, value, 0);
    f4c8:	2000      	movs	r0, #0
    f4ca:	9000      	str	r0, [sp, #0]
    f4cc:	462b      	mov	r3, r5
    f4ce:	4622      	mov	r2, r4
    f4d0:	4631      	mov	r1, r6
    f4d2:	f000 f953 	bl	f77c <getCompactArray>
        break;
    f4d6:	e772      	b.n	f3be <dlms_getData+0x96>
        ret = getInt64(data, info, value);
    f4d8:	462a      	mov	r2, r5
    f4da:	4621      	mov	r1, r4
    f4dc:	4630      	mov	r0, r6
    f4de:	f7ff fcdc 	bl	ee9a <getInt64>
        break;
    f4e2:	e76c      	b.n	f3be <dlms_getData+0x96>
        ret = getUInt64(data, info, value);
    f4e4:	462a      	mov	r2, r5
    f4e6:	4621      	mov	r1, r4
    f4e8:	4630      	mov	r0, r6
    f4ea:	f7ff fcf2 	bl	eed2 <getUInt64>
        break;
    f4ee:	e766      	b.n	f3be <dlms_getData+0x96>
        ret = getEnum(data, info, value);
    f4f0:	462a      	mov	r2, r5
    f4f2:	4621      	mov	r1, r4
    f4f4:	4630      	mov	r0, r6
    f4f6:	f7ff fd08 	bl	ef0a <getEnum>
        break;
    f4fa:	e760      	b.n	f3be <dlms_getData+0x96>
        ret = getFloat(data, info, value);
    f4fc:	462a      	mov	r2, r5
    f4fe:	4621      	mov	r1, r4
    f500:	4630      	mov	r0, r6
    f502:	f7ff fd3a 	bl	ef7a <getFloat>
        break;
    f506:	e75a      	b.n	f3be <dlms_getData+0x96>
        ret = getDouble(data, info, value);
    f508:	462a      	mov	r2, r5
    f50a:	4621      	mov	r1, r4
    f50c:	4630      	mov	r0, r6
    f50e:	f7ff fd18 	bl	ef42 <getDouble>
        break;
    f512:	e754      	b.n	f3be <dlms_getData+0x96>
        ret = getDateTime(data, info, value);
    f514:	462a      	mov	r2, r5
    f516:	4621      	mov	r1, r4
    f518:	4630      	mov	r0, r6
    f51a:	f7ff fd4a 	bl	efb2 <getDateTime>
        break;
    f51e:	e74e      	b.n	f3be <dlms_getData+0x96>
        ret = getDate(data, info, value);
    f520:	462a      	mov	r2, r5
    f522:	4621      	mov	r1, r4
    f524:	4630      	mov	r0, r6
    f526:	f7f3 faeb 	bl	2b00 <getDate>
        break;
    f52a:	e748      	b.n	f3be <dlms_getData+0x96>
        ret = getTime(data, info, value);
    f52c:	462a      	mov	r2, r5
    f52e:	4621      	mov	r1, r4
    f530:	4630      	mov	r0, r6
    f532:	f7f3 fa8b 	bl	2a4c <getTime>
        break;
    f536:	e742      	b.n	f3be <dlms_getData+0x96>
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    f538:	f44f 7081 	mov.w	r0, #258	; 0x102
    f53c:	e704      	b.n	f348 <dlms_getData+0x20>

0000f53e <getArray>:
{
    f53e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f542:	4699      	mov	r9, r3
    if (info->count == 0)
    f544:	884b      	ldrh	r3, [r1, #2]
{
    f546:	4607      	mov	r7, r0
    f548:	460d      	mov	r5, r1
    f54a:	4690      	mov	r8, r2
    if (info->count == 0)
    f54c:	b953      	cbnz	r3, f564 <getArray+0x26>
        if ((ret = getCount(buff, info, value)) != 0)
    f54e:	464a      	mov	r2, r9
    f550:	f7ff fb50 	bl	ebf4 <getCount>
    f554:	4604      	mov	r4, r0
    f556:	b118      	cbz	r0, f560 <getArray+0x22>
}
    f558:	4620      	mov	r0, r4
    f55a:	b002      	add	sp, #8
    f55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (info->count != 0 && size < 1)
    f560:	886b      	ldrh	r3, [r5, #2]
    f562:	b133      	cbz	r3, f572 <getArray+0x34>
    f564:	88fa      	ldrh	r2, [r7, #6]
    f566:	893b      	ldrh	r3, [r7, #8]
    f568:	429a      	cmp	r2, r3
    f56a:	d102      	bne.n	f572 <getArray+0x34>
        info->complete = 0;
    f56c:	2400      	movs	r4, #0
    f56e:	716c      	strb	r4, [r5, #5]
        return 0;
    f570:	e7f2      	b.n	f558 <getArray+0x1a>
    for (pos = info->index; pos != info->count; ++pos)
    f572:	f8b5 a000 	ldrh.w	sl, [r5]
    f576:	886b      	ldrh	r3, [r5, #2]
    f578:	4553      	cmp	r3, sl
    f57a:	d023      	beq.n	f5c4 <getArray+0x86>
        tmp = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    f57c:	2010      	movs	r0, #16
    f57e:	f7fd f971 	bl	c864 <malloc>
        if (tmp == NULL)
    f582:	4606      	mov	r6, r0
    f584:	b3a0      	cbz	r0, f5f0 <getArray+0xb2>
        var_init(tmp);
    f586:	f00b fe52 	bl	1b22e <var_init>
        di_init(&info2);
    f58a:	4668      	mov	r0, sp
    f58c:	f7ff fa3c 	bl	ea08 <di_init>
        if ((ret = dlms_getData(buff, &info2, tmp)) != 0)
    f590:	4632      	mov	r2, r6
    f592:	4669      	mov	r1, sp
    f594:	4638      	mov	r0, r7
    f596:	f7ff fec7 	bl	f328 <dlms_getData>
    f59a:	4604      	mov	r4, r0
    f59c:	b130      	cbz	r0, f5ac <getArray+0x6e>
            var_clear(tmp);
    f59e:	4630      	mov	r0, r6
    f5a0:	f00b ffa1 	bl	1b4e6 <var_clear>
            gxfree(tmp);
    f5a4:	4630      	mov	r0, r6
    f5a6:	f7fd f965 	bl	c874 <free>
            return ret;
    f5aa:	e7d5      	b.n	f558 <getArray+0x1a>
        if (!info2.complete)
    f5ac:	f89d 4005 	ldrb.w	r4, [sp, #5]
    f5b0:	b964      	cbnz	r4, f5cc <getArray+0x8e>
            var_clear(tmp);
    f5b2:	4630      	mov	r0, r6
    f5b4:	f00b ff97 	bl	1b4e6 <var_clear>
            gxfree(tmp);
    f5b8:	4630      	mov	r0, r6
    f5ba:	f7fd f95b 	bl	c874 <free>
            buff->position = startIndex;
    f5be:	f8a7 8008 	strh.w	r8, [r7, #8]
            info->complete = 0;
    f5c2:	716c      	strb	r4, [r5, #5]
    info->index = pos;
    f5c4:	f8a5 a000 	strh.w	sl, [r5]
    return DLMS_ERROR_CODE_OK;
    f5c8:	2400      	movs	r4, #0
    f5ca:	e7c5      	b.n	f558 <getArray+0x1a>
            if (info2.count == info2.index)
    f5cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    f5d0:	f8bd 3000 	ldrh.w	r3, [sp]
    f5d4:	429a      	cmp	r2, r3
    f5d6:	d106      	bne.n	f5e6 <getArray+0xa8>
                va_push(value->Arr, tmp);
    f5d8:	f8d9 0008 	ldr.w	r0, [r9, #8]
                startIndex = (uint16_t)buff->position;
    f5dc:	f8b7 8008 	ldrh.w	r8, [r7, #8]
                va_push(value->Arr, tmp);
    f5e0:	4631      	mov	r1, r6
    f5e2:	f00b ff32 	bl	1b44a <va_push>
    for (pos = info->index; pos != info->count; ++pos)
    f5e6:	f10a 0a01 	add.w	sl, sl, #1
    f5ea:	fa1f fa8a 	uxth.w	sl, sl
    f5ee:	e7c2      	b.n	f576 <getArray+0x38>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    f5f0:	f44f 7482 	mov.w	r4, #260	; 0x104
    f5f4:	e7b0      	b.n	f558 <getArray+0x1a>

0000f5f6 <getCompactArrayItem>:
{
    f5f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f5fa:	4605      	mov	r5, r0
    di_init(&tmp);
    f5fc:	4668      	mov	r0, sp
{
    f5fe:	4689      	mov	r9, r1
    f600:	4617      	mov	r7, r2
    f602:	461e      	mov	r6, r3
    di_init(&tmp);
    f604:	f7ff fa00 	bl	ea08 <di_init>
    dlmsVARIANT* value = gxmalloc(sizeof(dlmsVARIANT));
    f608:	2010      	movs	r0, #16
    uint32_t start = buff->position;
    f60a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
    tmp.type = dt;
    f60e:	f88d 9004 	strb.w	r9, [sp, #4]
    dlmsVARIANT* value = gxmalloc(sizeof(dlmsVARIANT));
    f612:	f7fd f927 	bl	c864 <malloc>
    if (value == NULL)
    f616:	4604      	mov	r4, r0
    f618:	2800      	cmp	r0, #0
    f61a:	d062      	beq.n	f6e2 <getCompactArrayItem+0xec>
    var_init(value);
    f61c:	f00b fe07 	bl	1b22e <var_init>
    if (dt == DLMS_DATA_TYPE_STRING)
    f620:	f1b9 0f0a 	cmp.w	r9, #10
    f624:	d11f      	bne.n	f666 <getCompactArrayItem+0x70>
        while (buff->position - start < len)
    f626:	892b      	ldrh	r3, [r5, #8]
    f628:	eba3 0308 	sub.w	r3, r3, r8
    f62c:	42b3      	cmp	r3, r6
    f62e:	d216      	bcs.n	f65e <getCompactArrayItem+0x68>
            var_clear(value);
    f630:	4620      	mov	r0, r4
    f632:	f00b ff58 	bl	1b4e6 <var_clear>
            di_init(&tmp);
    f636:	4668      	mov	r0, sp
    f638:	f7ff f9e6 	bl	ea08 <di_init>
            if ((ret = getString(buff, &tmp, 0, value)) != 0)
    f63c:	4623      	mov	r3, r4
    f63e:	2200      	movs	r2, #0
    f640:	4669      	mov	r1, sp
    f642:	4628      	mov	r0, r5
            tmp.type = dt;
    f644:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = getString(buff, &tmp, 0, value)) != 0)
    f648:	f7ff fb1f 	bl	ec8a <getString>
    f64c:	b940      	cbnz	r0, f660 <getCompactArrayItem+0x6a>
            va_push(list, value);
    f64e:	4621      	mov	r1, r4
    f650:	4638      	mov	r0, r7
    f652:	f00b fefa 	bl	1b44a <va_push>
            if (!tmp.complete)
    f656:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f65a:	2b00      	cmp	r3, #0
    f65c:	d1e3      	bne.n	f626 <getCompactArrayItem+0x30>
    return 0;
    f65e:	2000      	movs	r0, #0
}
    f660:	b003      	add	sp, #12
    f662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (dt == DLMS_DATA_TYPE_OCTET_STRING)
    f666:	f1b9 0f09 	cmp.w	r9, #9
    f66a:	d134      	bne.n	f6d6 <getCompactArrayItem+0xe0>
        while (buff->position - start < len)
    f66c:	892b      	ldrh	r3, [r5, #8]
    f66e:	eba3 0308 	sub.w	r3, r3, r8
    f672:	42b3      	cmp	r3, r6
    f674:	d2f3      	bcs.n	f65e <getCompactArrayItem+0x68>
            var_clear(value);
    f676:	4620      	mov	r0, r4
    f678:	f00b ff35 	bl	1b4e6 <var_clear>
            di_init(&tmp);
    f67c:	4668      	mov	r0, sp
    f67e:	f7ff f9c3 	bl	ea08 <di_init>
            if ((ret = getOctetString(buff, &tmp, 0, value)) != 0)
    f682:	4623      	mov	r3, r4
    f684:	2200      	movs	r2, #0
    f686:	4669      	mov	r1, sp
    f688:	4628      	mov	r0, r5
            tmp.type = dt;
    f68a:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = getOctetString(buff, &tmp, 0, value)) != 0)
    f68e:	f7ff fb65 	bl	ed5c <getOctetString>
    f692:	2800      	cmp	r0, #0
    f694:	d1e4      	bne.n	f660 <getCompactArrayItem+0x6a>
            va_push(list, value);
    f696:	4621      	mov	r1, r4
    f698:	4638      	mov	r0, r7
    f69a:	f00b fed6 	bl	1b44a <va_push>
            if (!tmp.complete)
    f69e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f6a2:	2b00      	cmp	r3, #0
    f6a4:	d1e2      	bne.n	f66c <getCompactArrayItem+0x76>
    f6a6:	e7da      	b.n	f65e <getCompactArrayItem+0x68>
            var_clear(value);
    f6a8:	4620      	mov	r0, r4
    f6aa:	f00b ff1c 	bl	1b4e6 <var_clear>
            di_init(&tmp);
    f6ae:	4668      	mov	r0, sp
    f6b0:	f7ff f9aa 	bl	ea08 <di_init>
            if ((ret = dlms_getData(buff, &tmp, value)) != 0)
    f6b4:	4622      	mov	r2, r4
    f6b6:	4669      	mov	r1, sp
    f6b8:	4628      	mov	r0, r5
            tmp.type = dt;
    f6ba:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = dlms_getData(buff, &tmp, value)) != 0)
    f6be:	f7ff fe33 	bl	f328 <dlms_getData>
    f6c2:	2800      	cmp	r0, #0
    f6c4:	d1cc      	bne.n	f660 <getCompactArrayItem+0x6a>
            va_push(list, value);
    f6c6:	4621      	mov	r1, r4
    f6c8:	4638      	mov	r0, r7
    f6ca:	f00b febe 	bl	1b44a <va_push>
            if (!tmp.complete)
    f6ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f6d2:	2b00      	cmp	r3, #0
    f6d4:	d0c3      	beq.n	f65e <getCompactArrayItem+0x68>
        while (buff->position - start < len)
    f6d6:	892b      	ldrh	r3, [r5, #8]
    f6d8:	eba3 0308 	sub.w	r3, r3, r8
    f6dc:	42b3      	cmp	r3, r6
    f6de:	d3e3      	bcc.n	f6a8 <getCompactArrayItem+0xb2>
    f6e0:	e7bd      	b.n	f65e <getCompactArrayItem+0x68>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    f6e2:	f44f 7082 	mov.w	r0, #260	; 0x104
    f6e6:	e7bb      	b.n	f660 <getCompactArrayItem+0x6a>

0000f6e8 <getCompactArrayItem2>:
{
    f6e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f6ec:	4680      	mov	r8, r0
    dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    f6ee:	2010      	movs	r0, #16
{
    f6f0:	460f      	mov	r7, r1
    f6f2:	4691      	mov	r9, r2
    dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    f6f4:	f7fd f8b6 	bl	c864 <malloc>
    if (tmp == NULL)
    f6f8:	4605      	mov	r5, r0
    f6fa:	b928      	cbnz	r0, f708 <getCompactArrayItem2+0x20>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    f6fc:	f44f 7482 	mov.w	r4, #260	; 0x104
}
    f700:	4620      	mov	r0, r4
    f702:	b003      	add	sp, #12
    f704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    var_init(tmp);
    f708:	f00b fd91 	bl	1b22e <var_init>
    tmp->vt = DLMS_DATA_TYPE_ARRAY;
    f70c:	2301      	movs	r3, #1
    f70e:	702b      	strb	r3, [r5, #0]
    tmp->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    f710:	2008      	movs	r0, #8
    f712:	f7fd f8a7 	bl	c864 <malloc>
    f716:	60a8      	str	r0, [r5, #8]
    if (tmp->Arr == NULL)
    f718:	2800      	cmp	r0, #0
    f71a:	d0ef      	beq.n	f6fc <getCompactArrayItem2+0x14>
    va_init(tmp->Arr);
    f71c:	f00b fe69 	bl	1b3f2 <va_init>
    for (pos = 0; pos != dt->size; ++pos)
    f720:	2600      	movs	r6, #0
    f722:	88fb      	ldrh	r3, [r7, #6]
    f724:	42b3      	cmp	r3, r6
    f726:	d105      	bne.n	f734 <getCompactArrayItem2+0x4c>
    va_push(list, tmp);
    f728:	4629      	mov	r1, r5
    f72a:	4648      	mov	r0, r9
    f72c:	f00b fe8d 	bl	1b44a <va_push>
    return 0;
    f730:	2400      	movs	r4, #0
    f732:	e7e5      	b.n	f700 <getCompactArrayItem2+0x18>
        if ((ret = va_getByIndex(dt, pos, &it)) != 0)
    f734:	aa01      	add	r2, sp, #4
    f736:	4631      	mov	r1, r6
    f738:	4638      	mov	r0, r7
    f73a:	f00b ff52 	bl	1b5e2 <va_getByIndex>
    f73e:	4604      	mov	r4, r0
    f740:	b130      	cbz	r0, f750 <getCompactArrayItem2+0x68>
                var_clear(tmp);
    f742:	4628      	mov	r0, r5
    f744:	f00b fecf 	bl	1b4e6 <var_clear>
                gxfree(tmp);
    f748:	4628      	mov	r0, r5
    f74a:	f7fd f893 	bl	c874 <free>
                return ret;
    f74e:	e7d7      	b.n	f700 <getCompactArrayItem2+0x18>
        if (it->vt == DLMS_DATA_TYPE_ARRAY || it->vt == DLMS_DATA_TYPE_STRUCTURE)
    f750:	9901      	ldr	r1, [sp, #4]
    f752:	68aa      	ldr	r2, [r5, #8]
    f754:	780b      	ldrb	r3, [r1, #0]
    f756:	3b01      	subs	r3, #1
    f758:	2b01      	cmp	r3, #1
            if ((ret = getCompactArrayItem2(buff, it->Arr, tmp->Arr, 1)) != 0)
    f75a:	f04f 0301 	mov.w	r3, #1
        if (it->vt == DLMS_DATA_TYPE_ARRAY || it->vt == DLMS_DATA_TYPE_STRUCTURE)
    f75e:	d808      	bhi.n	f772 <getCompactArrayItem2+0x8a>
            if ((ret = getCompactArrayItem2(buff, it->Arr, tmp->Arr, 1)) != 0)
    f760:	6889      	ldr	r1, [r1, #8]
    f762:	4640      	mov	r0, r8
    f764:	f7ff ffc0 	bl	f6e8 <getCompactArrayItem2>
            if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, tmp->Arr, 1)) != 0)
    f768:	4604      	mov	r4, r0
    f76a:	2800      	cmp	r0, #0
    f76c:	d1e9      	bne.n	f742 <getCompactArrayItem2+0x5a>
    for (pos = 0; pos != dt->size; ++pos)
    f76e:	3601      	adds	r6, #1
    f770:	e7d7      	b.n	f722 <getCompactArrayItem2+0x3a>
            if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, tmp->Arr, 1)) != 0)
    f772:	7a09      	ldrb	r1, [r1, #8]
    f774:	4640      	mov	r0, r8
    f776:	f7ff ff3e 	bl	f5f6 <getCompactArrayItem>
    f77a:	e7f5      	b.n	f768 <getCompactArrayItem2+0x80>

0000f77c <getCompactArray>:
{
    f77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f780:	460e      	mov	r6, r1
    f782:	b08b      	sub	sp, #44	; 0x2c
    var_clear(value);
    f784:	4618      	mov	r0, r3
{
    f786:	4615      	mov	r5, r2
    f788:	4698      	mov	r8, r3
    f78a:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    var_clear(value);
    f78e:	f00b feaa 	bl	1b4e6 <var_clear>
    if (buff->size - buff->position < 2)
    f792:	88f3      	ldrh	r3, [r6, #6]
    f794:	8932      	ldrh	r2, [r6, #8]
    f796:	1a9b      	subs	r3, r3, r2
    f798:	2b01      	cmp	r3, #1
    f79a:	dc03      	bgt.n	f7a4 <getCompactArray+0x28>
        info->complete = 0;
    f79c:	2000      	movs	r0, #0
    f79e:	7168      	strb	r0, [r5, #5]
    return getCompactArrayItem(buff, dt, value->Arr, len);
    f7a0:	4604      	mov	r4, r0
    f7a2:	e037      	b.n	f814 <getCompactArray+0x98>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f7a4:	f10d 0109 	add.w	r1, sp, #9
    f7a8:	4630      	mov	r0, r6
    f7aa:	f7fe fa58 	bl	dc5e <bb_getUInt8>
    f7ae:	4604      	mov	r4, r0
    f7b0:	bb80      	cbnz	r0, f814 <getCompactArray+0x98>
    DLMS_DATA_TYPE dt = (DLMS_DATA_TYPE)ch;
    f7b2:	f89d 5009 	ldrb.w	r5, [sp, #9]
    if (dt == DLMS_DATA_TYPE_ARRAY)
    f7b6:	2d01      	cmp	r5, #1
    f7b8:	f000 80f4 	beq.w	f9a4 <getCompactArray+0x228>
    if ((ret = hlp_getObjectCount2(buff, &len)) != 0)
    f7bc:	f10d 010a 	add.w	r1, sp, #10
    f7c0:	4630      	mov	r0, r6
    f7c2:	f00b f9a7 	bl	1ab14 <hlp_getObjectCount2>
    f7c6:	4604      	mov	r4, r0
    f7c8:	bb20      	cbnz	r0, f814 <getCompactArray+0x98>
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    f7ca:	2008      	movs	r0, #8
    f7cc:	f7fd f84a 	bl	c864 <malloc>
    value->vt = DLMS_DATA_TYPE_ARRAY;
    f7d0:	2201      	movs	r2, #1
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    f7d2:	f8c8 0008 	str.w	r0, [r8, #8]
    value->vt = DLMS_DATA_TYPE_ARRAY;
    f7d6:	f888 2000 	strb.w	r2, [r8]
    if (value->Arr == NULL)
    f7da:	2800      	cmp	r0, #0
    f7dc:	f000 80e5 	beq.w	f9aa <getCompactArray+0x22e>
    va_init(value->Arr);
    f7e0:	f00b fe07 	bl	1b3f2 <va_init>
    if (dt == DLMS_DATA_TYPE_STRUCTURE)
    f7e4:	2d02      	cmp	r5, #2
    f7e6:	f040 80d4 	bne.w	f992 <getCompactArray+0x216>
        va_init(&cols);
    f7ea:	a806      	add	r0, sp, #24
    f7ec:	f00b fe01 	bl	1b3f2 <va_init>
        if ((ret = getDataTypes(buff, &cols, len)) != 0)
    f7f0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    f7f4:	a906      	add	r1, sp, #24
    f7f6:	4630      	mov	r0, r6
    f7f8:	f7ff fcc4 	bl	f184 <getDataTypes>
    f7fc:	4604      	mov	r4, r0
    f7fe:	b118      	cbz	r0, f808 <getCompactArray+0x8c>
        va_clear(&cols);
    f800:	a806      	add	r0, sp, #24
    f802:	f00b fe4b 	bl	1b49c <va_clear>
        return 0;
    f806:	e005      	b.n	f814 <getCompactArray+0x98>
        if (onlyDataTypes)
    f808:	b147      	cbz	r7, f81c <getCompactArray+0xa0>
            va_attach2(value->Arr, &cols);
    f80a:	f8d8 0008 	ldr.w	r0, [r8, #8]
    f80e:	a906      	add	r1, sp, #24
    f810:	f00b fedd 	bl	1b5ce <va_attach2>
}
    f814:	4620      	mov	r0, r4
    f816:	b00b      	add	sp, #44	; 0x2c
    f818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (buff->position == buff->size)
    f81c:	8932      	ldrh	r2, [r6, #8]
    f81e:	88f3      	ldrh	r3, [r6, #6]
    f820:	429a      	cmp	r2, r3
    f822:	d12a      	bne.n	f87a <getCompactArray+0xfe>
            len = 0;
    f824:	f8ad 000a 	strh.w	r0, [sp, #10]
        int start = buff->position;
    f828:	8933      	ldrh	r3, [r6, #8]
    f82a:	9301      	str	r3, [sp, #4]
        while (buff->position - start < len)
    f82c:	9a01      	ldr	r2, [sp, #4]
    f82e:	8933      	ldrh	r3, [r6, #8]
    f830:	1a9b      	subs	r3, r3, r2
    f832:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    f836:	4293      	cmp	r3, r2
    f838:	dae2      	bge.n	f800 <getCompactArray+0x84>
            variantArray* row = (variantArray*)gxmalloc(sizeof(variantArray));
    f83a:	2008      	movs	r0, #8
    f83c:	f7fd f812 	bl	c864 <malloc>
            if (row == NULL)
    f840:	4607      	mov	r7, r0
    f842:	2800      	cmp	r0, #0
    f844:	f000 80a2 	beq.w	f98c <getCompactArray+0x210>
            va_init(row);
    f848:	f00b fdd3 	bl	1b3f2 <va_init>
            for (pos = 0; pos != cols.size; ++pos)
    f84c:	f04f 0900 	mov.w	r9, #0
    f850:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    f854:	4599      	cmp	r9, r3
    f856:	d079      	beq.n	f94c <getCompactArray+0x1d0>
                if ((ret = va_getByIndex(&cols, pos, &it)) != 0)
    f858:	aa03      	add	r2, sp, #12
    f85a:	4649      	mov	r1, r9
    f85c:	a806      	add	r0, sp, #24
    f85e:	f00b fec0 	bl	1b5e2 <va_getByIndex>
    f862:	4605      	mov	r5, r0
    f864:	b1b0      	cbz	r0, f894 <getCompactArray+0x118>
                            va_clear(&cols);
    f866:	a806      	add	r0, sp, #24
    f868:	f00b fe18 	bl	1b49c <va_clear>
                            va_clear(row);
    f86c:	4638      	mov	r0, r7
    f86e:	f00b fe15 	bl	1b49c <va_clear>
                            gxfree(row);
    f872:	4638      	mov	r0, r7
    f874:	f7fc fffe 	bl	c874 <free>
                            return ret;
    f878:	e00a      	b.n	f890 <getCompactArray+0x114>
            if ((ret = hlp_getObjectCount2(buff, &len)) != 0)
    f87a:	f10d 010a 	add.w	r1, sp, #10
    f87e:	4630      	mov	r0, r6
    f880:	f00b f948 	bl	1ab14 <hlp_getObjectCount2>
    f884:	4605      	mov	r5, r0
    f886:	2800      	cmp	r0, #0
    f888:	d0ce      	beq.n	f828 <getCompactArray+0xac>
                va_clear(&cols);
    f88a:	a806      	add	r0, sp, #24
    f88c:	f00b fe06 	bl	1b49c <va_clear>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    f890:	462c      	mov	r4, r5
    f892:	e7bf      	b.n	f814 <getCompactArray+0x98>
                if (it->vt == DLMS_DATA_TYPE_STRUCTURE)
    f894:	9903      	ldr	r1, [sp, #12]
    f896:	780d      	ldrb	r5, [r1, #0]
    f898:	2d02      	cmp	r5, #2
    f89a:	d109      	bne.n	f8b0 <getCompactArray+0x134>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, row, 1)) != 0)
    f89c:	6889      	ldr	r1, [r1, #8]
    f89e:	2301      	movs	r3, #1
    f8a0:	463a      	mov	r2, r7
    f8a2:	4630      	mov	r0, r6
    f8a4:	f7ff ff20 	bl	f6e8 <getCompactArrayItem2>
                    if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, row, 1)) != 0)
    f8a8:	4605      	mov	r5, r0
    f8aa:	2800      	cmp	r0, #0
    f8ac:	d04a      	beq.n	f944 <getCompactArray+0x1c8>
    f8ae:	e7da      	b.n	f866 <getCompactArray+0xea>
                else if (it->vt == DLMS_DATA_TYPE_ARRAY)
    f8b0:	2d01      	cmp	r5, #1
    f8b2:	d161      	bne.n	f978 <getCompactArray+0x1fc>
                    va_init(&tmp2);
    f8b4:	a808      	add	r0, sp, #32
    f8b6:	f00b fd9c 	bl	1b3f2 <va_init>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, &tmp2, 1)) != 0 ||
    f8ba:	9903      	ldr	r1, [sp, #12]
    f8bc:	462b      	mov	r3, r5
    f8be:	6889      	ldr	r1, [r1, #8]
    f8c0:	aa08      	add	r2, sp, #32
    f8c2:	4630      	mov	r0, r6
    f8c4:	f7ff ff10 	bl	f6e8 <getCompactArrayItem2>
    f8c8:	4683      	mov	fp, r0
    f8ca:	b930      	cbnz	r0, f8da <getCompactArray+0x15e>
                        (ret = va_getByIndex(&tmp2, 0, &it2)) != 0)
    f8cc:	4601      	mov	r1, r0
    f8ce:	aa04      	add	r2, sp, #16
    f8d0:	a808      	add	r0, sp, #32
    f8d2:	f00b fe86 	bl	1b5e2 <va_getByIndex>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, &tmp2, 1)) != 0 ||
    f8d6:	4683      	mov	fp, r0
    f8d8:	b360      	cbz	r0, f934 <getCompactArray+0x1b8>
                        va_clear(&tmp2);
    f8da:	a808      	add	r0, sp, #32
    f8dc:	f00b fdde 	bl	1b49c <va_clear>
                        va_clear(&cols);
    f8e0:	a806      	add	r0, sp, #24
    f8e2:	f00b fddb 	bl	1b49c <va_clear>
                        va_clear(row);
    f8e6:	4638      	mov	r0, r7
    f8e8:	f00b fdd8 	bl	1b49c <va_clear>
                        gxfree(row);
    f8ec:	4638      	mov	r0, r7
    f8ee:	f7fc ffc1 	bl	c874 <free>
                        return ret;
    f8f2:	465d      	mov	r5, fp
    f8f4:	e7cc      	b.n	f890 <getCompactArray+0x114>
                        if ((ret = va_getByIndex(it2->Arr, pos1, &it3)) != 0)
    f8f6:	aa05      	add	r2, sp, #20
    f8f8:	4659      	mov	r1, fp
    f8fa:	f00b fe72 	bl	1b5e2 <va_getByIndex>
    f8fe:	4605      	mov	r5, r0
    f900:	b118      	cbz	r0, f90a <getCompactArray+0x18e>
                            va_clear(&tmp2);
    f902:	a808      	add	r0, sp, #32
    f904:	f00b fdca 	bl	1b49c <va_clear>
    f908:	e7ad      	b.n	f866 <getCompactArray+0xea>
                        it4 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    f90a:	2010      	movs	r0, #16
    f90c:	f7fc ffaa 	bl	c864 <malloc>
                        if (it4 == NULL)
    f910:	4682      	mov	sl, r0
    f912:	2800      	cmp	r0, #0
    f914:	d03a      	beq.n	f98c <getCompactArray+0x210>
                        var_init(it4);
    f916:	f00b fc8a 	bl	1b22e <var_init>
                        if ((ret = var_copy(it4, it3)) != 0)
    f91a:	9905      	ldr	r1, [sp, #20]
    f91c:	4650      	mov	r0, sl
    f91e:	f7f4 fe41 	bl	45a4 <var_copy>
    f922:	4605      	mov	r5, r0
    f924:	2800      	cmp	r0, #0
    f926:	d1b3      	bne.n	f890 <getCompactArray+0x114>
                        va_push(row, it4);
    f928:	4651      	mov	r1, sl
    f92a:	4638      	mov	r0, r7
    f92c:	f00b fd8d 	bl	1b44a <va_push>
                    for (pos1 = 0; pos1 != it2->Arr->size; ++pos1)
    f930:	f10b 0b01 	add.w	fp, fp, #1
    f934:	9b04      	ldr	r3, [sp, #16]
    f936:	6898      	ldr	r0, [r3, #8]
    f938:	88c3      	ldrh	r3, [r0, #6]
    f93a:	459b      	cmp	fp, r3
    f93c:	d1db      	bne.n	f8f6 <getCompactArray+0x17a>
                    va_clear(&tmp2);
    f93e:	a808      	add	r0, sp, #32
    f940:	f00b fdac 	bl	1b49c <va_clear>
                if (buff->position == buff->size)
    f944:	8932      	ldrh	r2, [r6, #8]
    f946:	88f3      	ldrh	r3, [r6, #6]
    f948:	429a      	cmp	r2, r3
    f94a:	d11c      	bne.n	f986 <getCompactArray+0x20a>
            if (row->size >= cols.size)
    f94c:	88fa      	ldrh	r2, [r7, #6]
    f94e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    f952:	429a      	cmp	r2, r3
    f954:	f4ff af54 	bcc.w	f800 <getCompactArray+0x84>
                dlmsVARIANT* tmp = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    f958:	2010      	movs	r0, #16
    f95a:	f7fc ff83 	bl	c864 <malloc>
                if (tmp == NULL)
    f95e:	4605      	mov	r5, r0
    f960:	b1a0      	cbz	r0, f98c <getCompactArray+0x210>
                var_clear(tmp);
    f962:	f00b fdc0 	bl	1b4e6 <var_clear>
                tmp->vt = DLMS_DATA_TYPE_ARRAY;
    f966:	2301      	movs	r3, #1
                va_push(value->Arr, tmp);
    f968:	f8d8 0008 	ldr.w	r0, [r8, #8]
                tmp->Arr = row;
    f96c:	60af      	str	r7, [r5, #8]
                tmp->vt = DLMS_DATA_TYPE_ARRAY;
    f96e:	702b      	strb	r3, [r5, #0]
                va_push(value->Arr, tmp);
    f970:	4629      	mov	r1, r5
    f972:	f00b fd6a 	bl	1b44a <va_push>
    f976:	e759      	b.n	f82c <getCompactArray+0xb0>
                    if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, row, 1)) != 0)
    f978:	7a09      	ldrb	r1, [r1, #8]
    f97a:	2301      	movs	r3, #1
    f97c:	463a      	mov	r2, r7
    f97e:	4630      	mov	r0, r6
    f980:	f7ff fe39 	bl	f5f6 <getCompactArrayItem>
    f984:	e790      	b.n	f8a8 <getCompactArray+0x12c>
            for (pos = 0; pos != cols.size; ++pos)
    f986:	f109 0901 	add.w	r9, r9, #1
    f98a:	e761      	b.n	f850 <getCompactArray+0xd4>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    f98c:	f44f 7582 	mov.w	r5, #260	; 0x104
    f990:	e77e      	b.n	f890 <getCompactArray+0x114>
    return getCompactArrayItem(buff, dt, value->Arr, len);
    f992:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    f996:	f8d8 2008 	ldr.w	r2, [r8, #8]
    f99a:	4629      	mov	r1, r5
    f99c:	4630      	mov	r0, r6
    f99e:	f7ff fe2a 	bl	f5f6 <getCompactArrayItem>
    f9a2:	e6fd      	b.n	f7a0 <getCompactArray+0x24>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    f9a4:	f44f 7481 	mov.w	r4, #258	; 0x102
    f9a8:	e734      	b.n	f814 <getCompactArray+0x98>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    f9aa:	f44f 7482 	mov.w	r4, #260	; 0x104
    f9ae:	e731      	b.n	f814 <getCompactArray+0x98>

0000f9b0 <dlms_getHDLCAddress>:
{
    f9b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for (pos = (uint16_t)buff->position; pos != (uint16_t)buff->size; ++pos)
    f9b4:	f8b0 8008 	ldrh.w	r8, [r0, #8]
{
    f9b8:	4604      	mov	r4, r0
    f9ba:	460d      	mov	r5, r1
    f9bc:	4617      	mov	r7, r2
    int ret, size = 0;
    f9be:	2600      	movs	r6, #0
    for (pos = (uint16_t)buff->position; pos != (uint16_t)buff->size; ++pos)
    f9c0:	88e3      	ldrh	r3, [r4, #6]
    f9c2:	eb08 0106 	add.w	r1, r8, r6
    f9c6:	b289      	uxth	r1, r1
    f9c8:	428b      	cmp	r3, r1
    f9ca:	d00a      	beq.n	f9e2 <dlms_getHDLCAddress+0x32>
        if ((ret = bb_getUInt8ByIndex(buff, pos, &ch)) != 0)
    f9cc:	f10d 0203 	add.w	r2, sp, #3
    f9d0:	4620      	mov	r0, r4
        ++size;
    f9d2:	3601      	adds	r6, #1
        if ((ret = bb_getUInt8ByIndex(buff, pos, &ch)) != 0)
    f9d4:	f7fe f961 	bl	dc9a <bb_getUInt8ByIndex>
    f9d8:	b9a8      	cbnz	r0, fa06 <dlms_getHDLCAddress+0x56>
        if ((ch & 0x1) == 1)
    f9da:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f9de:	07db      	lsls	r3, r3, #31
    f9e0:	d5ee      	bpl.n	f9c0 <dlms_getHDLCAddress+0x10>
    if (checkClientAddress && size != 1)
    f9e2:	b127      	cbz	r7, f9ee <dlms_getHDLCAddress+0x3e>
    f9e4:	2e01      	cmp	r6, #1
    f9e6:	d004      	beq.n	f9f2 <dlms_getHDLCAddress+0x42>
        return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    f9e8:	f240 1007 	movw	r0, #263	; 0x107
    f9ec:	e00b      	b.n	fa06 <dlms_getHDLCAddress+0x56>
    if (size == 1)
    f9ee:	2e01      	cmp	r6, #1
    f9f0:	d10c      	bne.n	fa0c <dlms_getHDLCAddress+0x5c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    f9f2:	f10d 0103 	add.w	r1, sp, #3
    f9f6:	4620      	mov	r0, r4
    f9f8:	f7fe f931 	bl	dc5e <bb_getUInt8>
    f9fc:	b918      	cbnz	r0, fa06 <dlms_getHDLCAddress+0x56>
        *address = ((ch & 0xFE) >> 1);
    f9fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    fa02:	085b      	lsrs	r3, r3, #1
        *address = ((l & 0xFE) >> 1) | ((l & 0xFE00) >> 2)
    fa04:	602b      	str	r3, [r5, #0]
}
    fa06:	b002      	add	sp, #8
    fa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (size == 2)
    fa0c:	2e02      	cmp	r6, #2
    fa0e:	d10e      	bne.n	fa2e <dlms_getHDLCAddress+0x7e>
        if ((ret = bb_getUInt16(buff, &s)) != 0)
    fa10:	a901      	add	r1, sp, #4
    fa12:	4620      	mov	r0, r4
    fa14:	f7fe f94c 	bl	dcb0 <bb_getUInt16>
    fa18:	2800      	cmp	r0, #0
    fa1a:	d1f4      	bne.n	fa06 <dlms_getHDLCAddress+0x56>
        *address = ((s & 0xFE) >> 1) | ((s & 0xFE00) >> 2);
    fa1c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fa20:	f3c3 0246 	ubfx	r2, r3, #1, #7
    fa24:	109b      	asrs	r3, r3, #2
    fa26:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
            | ((l & 0xFE0000) >> 3) | ((l & 0xFE000000) >> 4);
    fa2a:	4313      	orrs	r3, r2
    fa2c:	e7ea      	b.n	fa04 <dlms_getHDLCAddress+0x54>
    else if (size == 4)
    fa2e:	2e04      	cmp	r6, #4
    fa30:	d114      	bne.n	fa5c <dlms_getHDLCAddress+0xac>
        if ((ret = bb_getUInt32(buff, &l)) != 0)
    fa32:	a901      	add	r1, sp, #4
    fa34:	4620      	mov	r0, r4
    fa36:	f7fe f950 	bl	dcda <bb_getUInt32>
    fa3a:	2800      	cmp	r0, #0
    fa3c:	d1e3      	bne.n	fa06 <dlms_getHDLCAddress+0x56>
        *address = ((l & 0xFE) >> 1) | ((l & 0xFE00) >> 2)
    fa3e:	9b01      	ldr	r3, [sp, #4]
    fa40:	0899      	lsrs	r1, r3, #2
    fa42:	f3c3 0246 	ubfx	r2, r3, #1, #7
    fa46:	f401 517e 	and.w	r1, r1, #16256	; 0x3f80
    fa4a:	430a      	orrs	r2, r1
            | ((l & 0xFE0000) >> 3) | ((l & 0xFE000000) >> 4);
    fa4c:	08d9      	lsrs	r1, r3, #3
    fa4e:	f401 11fe 	and.w	r1, r1, #2080768	; 0x1fc000
    fa52:	091b      	lsrs	r3, r3, #4
    fa54:	430a      	orrs	r2, r1
    fa56:	f003 637e 	and.w	r3, r3, #266338304	; 0xfe00000
    fa5a:	e7e6      	b.n	fa2a <dlms_getHDLCAddress+0x7a>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    fa5c:	f44f 7081 	mov.w	r0, #258	; 0x102
    fa60:	e7d1      	b.n	fa06 <dlms_getHDLCAddress+0x56>

0000fa62 <dlms_checkHdlcAddress>:
{
    fa62:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa64:	4615      	mov	r5, r2
    fa66:	b085      	sub	sp, #20
    fa68:	4606      	mov	r6, r0
    fa6a:	460c      	mov	r4, r1
    if ((ret = dlms_getHDLCAddress(reply, &target, 0)) != 0)
    fa6c:	2200      	movs	r2, #0
    fa6e:	a903      	add	r1, sp, #12
    fa70:	4628      	mov	r0, r5
{
    fa72:	461f      	mov	r7, r3
    if ((ret = dlms_getHDLCAddress(reply, &target, 0)) != 0)
    fa74:	f7ff ff9c 	bl	f9b0 <dlms_getHDLCAddress>
    fa78:	b998      	cbnz	r0, faa2 <dlms_checkHdlcAddress+0x40>
    if ((ret = dlms_getHDLCAddress(reply, &source, server)) != 0)
    fa7a:	4632      	mov	r2, r6
    fa7c:	a902      	add	r1, sp, #8
    fa7e:	4628      	mov	r0, r5
    fa80:	f7ff ff96 	bl	f9b0 <dlms_getHDLCAddress>
    fa84:	b968      	cbnz	r0, faa2 <dlms_checkHdlcAddress+0x40>
    if (server)
    fa86:	9a03      	ldr	r2, [sp, #12]
    fa88:	b316      	cbz	r6, fad0 <dlms_checkHdlcAddress+0x6e>
        if (settings->serverAddress != 0 && settings->serverAddress != target)
    fa8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fa8c:	b15b      	cbz	r3, faa6 <dlms_checkHdlcAddress+0x44>
    fa8e:	4293      	cmp	r3, r2
    fa90:	d009      	beq.n	faa6 <dlms_checkHdlcAddress+0x44>
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
    fa92:	8929      	ldrh	r1, [r5, #8]
    fa94:	f10d 0207 	add.w	r2, sp, #7
    fa98:	4628      	mov	r0, r5
    fa9a:	f7fe f8fe 	bl	dc9a <bb_getUInt8ByIndex>
                return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
    fa9e:	f44f 7084 	mov.w	r0, #264	; 0x108
}
    faa2:	b005      	add	sp, #20
    faa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            settings->serverAddress = (uint16_t)target;
    faa6:	b292      	uxth	r2, r2
    faa8:	6322      	str	r2, [r4, #48]	; 0x30
        if (settings->clientAddress != 0 && settings->clientAddress != source)
    faaa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    faac:	9b02      	ldr	r3, [sp, #8]
    faae:	b16a      	cbz	r2, facc <dlms_checkHdlcAddress+0x6a>
    fab0:	429a      	cmp	r2, r3
    fab2:	d00b      	beq.n	facc <dlms_checkHdlcAddress+0x6a>
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
    fab4:	8929      	ldrh	r1, [r5, #8]
    fab6:	f10d 0207 	add.w	r2, sp, #7
    faba:	4628      	mov	r0, r5
    fabc:	f7fe f8ed 	bl	dc9a <bb_getUInt8ByIndex>
    fac0:	bb20      	cbnz	r0, fb0c <dlms_checkHdlcAddress+0xaa>
            if (ch == DLMS_COMMAND_SNRM)
    fac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fac6:	2b93      	cmp	r3, #147	; 0x93
    fac8:	d120      	bne.n	fb0c <dlms_checkHdlcAddress+0xaa>
                settings->clientAddress = (uint16_t)source;
    faca:	9b02      	ldr	r3, [sp, #8]
            settings->clientAddress = (uint16_t)source;
    facc:	85e3      	strh	r3, [r4, #46]	; 0x2e
    face:	e7e8      	b.n	faa2 <dlms_checkHdlcAddress+0x40>
        if (settings->clientAddress != target)
    fad0:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
    fad2:	9902      	ldr	r1, [sp, #8]
    fad4:	4296      	cmp	r6, r2
    fad6:	d009      	beq.n	faec <dlms_checkHdlcAddress+0x8a>
            if (settings->clientAddress == source && settings->serverAddress == target)
    fad8:	428e      	cmp	r6, r1
    fada:	d104      	bne.n	fae6 <dlms_checkHdlcAddress+0x84>
    fadc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fade:	4293      	cmp	r3, r2
    fae0:	d101      	bne.n	fae6 <dlms_checkHdlcAddress+0x84>
                reply->position = index + 1;
    fae2:	1c7b      	adds	r3, r7, #1
    fae4:	812b      	strh	r3, [r5, #8]
            return DLMS_ERROR_CODE_FALSE;
    fae6:	f04f 30ff 	mov.w	r0, #4294967295
    faea:	e7da      	b.n	faa2 <dlms_checkHdlcAddress+0x40>
        if (settings->serverAddress != source &&
    faec:	6b23      	ldr	r3, [r4, #48]	; 0x30
    faee:	428b      	cmp	r3, r1
    faf0:	d0d7      	beq.n	faa2 <dlms_checkHdlcAddress+0x40>
            (settings->serverAddress & 0x7F) != 0x7F && (settings->serverAddress & 0x3FFF) != 0x3FFF)
    faf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        if (settings->serverAddress != source &&
    faf6:	2a7f      	cmp	r2, #127	; 0x7f
    faf8:	d0d3      	beq.n	faa2 <dlms_checkHdlcAddress+0x40>
            (settings->serverAddress & 0x7F) != 0x7F && (settings->serverAddress & 0x3FFF) != 0x3FFF)
    fafa:	f3c3 030d 	ubfx	r3, r3, #0, #14
    fafe:	f643 70ff 	movw	r0, #16383	; 0x3fff
    fb02:	1a18      	subs	r0, r3, r0
    fb04:	bf18      	it	ne
    fb06:	f04f 30ff 	movne.w	r0, #4294967295
    fb0a:	e7ca      	b.n	faa2 <dlms_checkHdlcAddress+0x40>
                return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    fb0c:	f240 1007 	movw	r0, #263	; 0x107
    fb10:	e7c7      	b.n	faa2 <dlms_checkHdlcAddress+0x40>

0000fb12 <dlms_getDataFromFrame>:
{
    fb12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (data->packetLength < reply->position)
    fb16:	8d8c      	ldrh	r4, [r1, #44]	; 0x2c
    fb18:	8903      	ldrh	r3, [r0, #8]
    uint16_t offset = data->data.size;
    fb1a:	f8b1 800a 	ldrh.w	r8, [r1, #10]
    if (data->packetLength < reply->position)
    fb1e:	429c      	cmp	r4, r3
{
    fb20:	4605      	mov	r5, r0
    fb22:	460e      	mov	r6, r1
    fb24:	4617      	mov	r7, r2
    if (data->packetLength < reply->position)
    fb26:	d316      	bcc.n	fb56 <dlms_getDataFromFrame+0x44>
        cnt = data->packetLength - reply->position;
    fb28:	1ae4      	subs	r4, r4, r3
    fb2a:	b2a4      	uxth	r4, r4
    if (cnt != 0)
    fb2c:	b19c      	cbz	r4, fb56 <dlms_getDataFromFrame+0x44>
        if ((ret = bb_capacity(&data->data, offset + cnt)) != 0 ||
    fb2e:	f101 0904 	add.w	r9, r1, #4
    fb32:	eb08 0104 	add.w	r1, r8, r4
    fb36:	b289      	uxth	r1, r1
    fb38:	4648      	mov	r0, r9
    fb3a:	f7fd febd 	bl	d8b8 <bb_capacity>
    fb3e:	b968      	cbnz	r0, fb5c <dlms_getDataFromFrame+0x4a>
            (ret = bb_set2(&data->data, reply, reply->position, cnt)) != 0)
    fb40:	892a      	ldrh	r2, [r5, #8]
    fb42:	4623      	mov	r3, r4
    fb44:	4629      	mov	r1, r5
    fb46:	4648      	mov	r0, r9
    fb48:	f7fe f82e 	bl	dba8 <bb_set2>
        if ((ret = bb_capacity(&data->data, offset + cnt)) != 0 ||
    fb4c:	b930      	cbnz	r0, fb5c <dlms_getDataFromFrame+0x4a>
        if (hdlc)
    fb4e:	b117      	cbz	r7, fb56 <dlms_getDataFromFrame+0x44>
            reply->position += 3;
    fb50:	892b      	ldrh	r3, [r5, #8]
    fb52:	3303      	adds	r3, #3
    fb54:	812b      	strh	r3, [r5, #8]
    data->data.position = offset;
    fb56:	f8a6 800c 	strh.w	r8, [r6, #12]
    return 0;
    fb5a:	2000      	movs	r0, #0
}
    fb5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000fb60 <dlms_getHdlcData>:
{
    fb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb64:	b08d      	sub	sp, #52	; 0x34
    fb66:	461f      	mov	r7, r3
    fb68:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    fb6c:	9305      	str	r3, [sp, #20]
    fb6e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    uint16_t packetStartID = (uint16_t)reply->position;
    fb72:	f8b2 b008 	ldrh.w	fp, [r2, #8]
{
    fb76:	9306      	str	r3, [sp, #24]
    if (reply->size - reply->position < 9)
    fb78:	88d3      	ldrh	r3, [r2, #6]
{
    fb7a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    if (reply->size - reply->position < 9)
    fb7e:	eba3 030b 	sub.w	r3, r3, fp
    fb82:	2b08      	cmp	r3, #8
{
    fb84:	4682      	mov	sl, r0
    fb86:	460e      	mov	r6, r1
    fb88:	4615      	mov	r5, r2
    if (reply->size - reply->position < 9)
    fb8a:	dc03      	bgt.n	fb94 <dlms_getHdlcData+0x34>
        data->complete = 0;
    fb8c:	2000      	movs	r0, #0
    fb8e:	7438      	strb	r0, [r7, #16]
        return 0;
    fb90:	4604      	mov	r4, r0
    fb92:	e086      	b.n	fca2 <dlms_getHdlcData+0x142>
    data->complete = 1;
    fb94:	2301      	movs	r3, #1
    fb96:	743b      	strb	r3, [r7, #16]
    for (pos = (uint16_t)reply->position; pos < reply->size; ++pos)
    fb98:	f8b2 8008 	ldrh.w	r8, [r2, #8]
    fb9c:	88eb      	ldrh	r3, [r5, #6]
    fb9e:	4543      	cmp	r3, r8
    fba0:	d820      	bhi.n	fbe4 <dlms_getHdlcData+0x84>
    uint16_t packetStartID = (uint16_t)reply->position;
    fba2:	46d8      	mov	r8, fp
    if (reply->position == reply->size)
    fba4:	892a      	ldrh	r2, [r5, #8]
    fba6:	88eb      	ldrh	r3, [r5, #6]
    fba8:	429a      	cmp	r2, r3
    fbaa:	d0ef      	beq.n	fb8c <dlms_getHdlcData+0x2c>
    if ((ret = bb_getUInt8(reply, frame)) != 0)
    fbac:	4649      	mov	r1, r9
    fbae:	4628      	mov	r0, r5
    fbb0:	f7fe f855 	bl	dc5e <bb_getUInt8>
    fbb4:	4604      	mov	r4, r0
    fbb6:	2800      	cmp	r0, #0
    fbb8:	d173      	bne.n	fca2 <dlms_getHdlcData+0x142>
    if ((*frame & 0xF0) != 0xA0)
    fbba:	f899 3000 	ldrb.w	r3, [r9]
    fbbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    fbc2:	2aa0      	cmp	r2, #160	; 0xa0
    fbc4:	d01f      	beq.n	fc06 <dlms_getHdlcData+0xa6>
        --reply->position;
    fbc6:	892b      	ldrh	r3, [r5, #8]
    fbc8:	3b01      	subs	r3, #1
        reply->position -= 2;
    fbca:	812b      	strh	r3, [r5, #8]
        return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    fbcc:	9b06      	ldr	r3, [sp, #24]
    fbce:	9302      	str	r3, [sp, #8]
    fbd0:	9b05      	ldr	r3, [sp, #20]
    fbd2:	462a      	mov	r2, r5
    fbd4:	e9cd 9300 	strd	r9, r3, [sp]
    fbd8:	4631      	mov	r1, r6
    fbda:	463b      	mov	r3, r7
    fbdc:	4650      	mov	r0, sl
    fbde:	f7ff ffbf 	bl	fb60 <dlms_getHdlcData>
    fbe2:	e7d5      	b.n	fb90 <dlms_getHdlcData+0x30>
        if ((ret = bb_getUInt8(reply, &ch)) != 0)
    fbe4:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    fbe8:	4628      	mov	r0, r5
    fbea:	f7fe f838 	bl	dc5e <bb_getUInt8>
    fbee:	4604      	mov	r4, r0
    fbf0:	2800      	cmp	r0, #0
    fbf2:	d156      	bne.n	fca2 <dlms_getHdlcData+0x142>
        if (ch == HDLC_FRAME_START_END)
    fbf4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    fbf8:	2b7e      	cmp	r3, #126	; 0x7e
    fbfa:	d0d3      	beq.n	fba4 <dlms_getHdlcData+0x44>
    for (pos = (uint16_t)reply->position; pos < reply->size; ++pos)
    fbfc:	f108 0801 	add.w	r8, r8, #1
    fc00:	fa1f f888 	uxth.w	r8, r8
    fc04:	e7ca      	b.n	fb9c <dlms_getHdlcData+0x3c>
    if ((*frame & 0x7) != 0)
    fc06:	f013 0b07 	ands.w	fp, r3, #7
        frameLen = ((*frame & 0x7) << 8);
    fc0a:	bf18      	it	ne
    fc0c:	021b      	lslne	r3, r3, #8
    if ((ret = bb_getUInt8(reply, &ch)) != 0)
    fc0e:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    fc12:	4628      	mov	r0, r5
        frameLen = ((*frame & 0x7) << 8);
    fc14:	bf18      	it	ne
    fc16:	f403 6be0 	andne.w	fp, r3, #1792	; 0x700
    if ((ret = bb_getUInt8(reply, &ch)) != 0)
    fc1a:	f7fe f820 	bl	dc5e <bb_getUInt8>
    fc1e:	4604      	mov	r4, r0
    fc20:	2800      	cmp	r0, #0
    fc22:	d13e      	bne.n	fca2 <dlms_getHdlcData+0x142>
    frameLen += ch;
    fc24:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    if ((reply->size - reply->position + 1) < frameLen)
    fc28:	892a      	ldrh	r2, [r5, #8]
    frameLen += ch;
    fc2a:	445b      	add	r3, fp
    fc2c:	9307      	str	r3, [sp, #28]
    if ((reply->size - reply->position + 1) < frameLen)
    fc2e:	88eb      	ldrh	r3, [r5, #6]
    fc30:	3301      	adds	r3, #1
    fc32:	1a9b      	subs	r3, r3, r2
    fc34:	9a07      	ldr	r2, [sp, #28]
    fc36:	4293      	cmp	r3, r2
    fc38:	da03      	bge.n	fc42 <dlms_getHdlcData+0xe2>
        data->complete = 0;
    fc3a:	7438      	strb	r0, [r7, #16]
                    reply->position = pos;
    fc3c:	f8a5 8008 	strh.w	r8, [r5, #8]
    fc40:	e02f      	b.n	fca2 <dlms_getHdlcData+0x142>
    eopPos = (uint16_t)(frameLen + packetStartID + 1);
    fc42:	9b07      	ldr	r3, [sp, #28]
    fc44:	4443      	add	r3, r8
    fc46:	b21b      	sxth	r3, r3
    fc48:	f103 0b01 	add.w	fp, r3, #1
    fc4c:	fa1f fb8b 	uxth.w	fp, fp
    if ((ret = bb_getUInt8ByIndex(reply, eopPos, &ch)) != 0)
    fc50:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
    fc54:	4659      	mov	r1, fp
    fc56:	4628      	mov	r0, r5
    eopPos = (uint16_t)(frameLen + packetStartID + 1);
    fc58:	9308      	str	r3, [sp, #32]
    if ((ret = bb_getUInt8ByIndex(reply, eopPos, &ch)) != 0)
    fc5a:	f7fe f81e 	bl	dc9a <bb_getUInt8ByIndex>
    fc5e:	4604      	mov	r4, r0
    fc60:	b9f8      	cbnz	r0, fca2 <dlms_getHdlcData+0x142>
    if (ch != HDLC_FRAME_START_END)
    fc62:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    fc66:	2b7e      	cmp	r3, #126	; 0x7e
    fc68:	d002      	beq.n	fc70 <dlms_getHdlcData+0x110>
        reply->position -= 2;
    fc6a:	892b      	ldrh	r3, [r5, #8]
    fc6c:	3b02      	subs	r3, #2
    fc6e:	e7ac      	b.n	fbca <dlms_getHdlcData+0x6a>
    ret = dlms_checkHdlcAddress(server, settings, reply, eopPos);
    fc70:	465b      	mov	r3, fp
    fc72:	462a      	mov	r2, r5
    fc74:	4631      	mov	r1, r6
    fc76:	4650      	mov	r0, sl
    fc78:	f7ff fef3 	bl	fa62 <dlms_checkHdlcAddress>
    if (ret != 0)
    fc7c:	4604      	mov	r4, r0
    fc7e:	b1d8      	cbz	r0, fcb8 <dlms_getHdlcData+0x158>
        if (ret == DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS)
    fc80:	f240 1307 	movw	r3, #263	; 0x107
    fc84:	4298      	cmp	r0, r3
    fc86:	d00c      	beq.n	fca2 <dlms_getHdlcData+0x142>
            if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS &&
    fc88:	f5b0 7f84 	cmp.w	r0, #264	; 0x108
    fc8c:	d10d      	bne.n	fcaa <dlms_getHdlcData+0x14a>
                reply->position + 4 == reply->size)
    fc8e:	892b      	ldrh	r3, [r5, #8]
    fc90:	88ea      	ldrh	r2, [r5, #6]
    fc92:	3304      	adds	r3, #4
            if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS &&
    fc94:	4293      	cmp	r3, r2
    fc96:	d10a      	bne.n	fcae <dlms_getHdlcData+0x14e>
                data->packetLength = 0;
    fc98:	2300      	movs	r3, #0
    fc9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                bb_clear(reply);
    fc9c:	4628      	mov	r0, r5
    fc9e:	f7fd ffc8 	bl	dc32 <bb_clear>
}
    fca2:	4620      	mov	r0, r4
    fca4:	b00d      	add	sp, #52	; 0x34
    fca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (ret == DLMS_ERROR_CODE_FALSE)
    fcaa:	3401      	adds	r4, #1
    fcac:	d08e      	beq.n	fbcc <dlms_getHdlcData+0x6c>
            reply->position = packetStartID + 1;
    fcae:	f108 0801 	add.w	r8, r8, #1
    fcb2:	f8a5 8008 	strh.w	r8, [r5, #8]
            ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    fcb6:	e789      	b.n	fbcc <dlms_getHdlcData+0x6c>
    if ((ret = bb_getUInt8(reply, frame)) != 0)
    fcb8:	4649      	mov	r1, r9
    fcba:	4628      	mov	r0, r5
    unsigned char moreData = (*frame & 0x8) != 0;
    fcbc:	f899 b000 	ldrb.w	fp, [r9]
    if ((ret = bb_getUInt8(reply, frame)) != 0)
    fcc0:	f7fd ffcd 	bl	dc5e <bb_getUInt8>
    fcc4:	4604      	mov	r4, r0
    fcc6:	2800      	cmp	r0, #0
    fcc8:	d1eb      	bne.n	fca2 <dlms_getHdlcData+0x142>
    if (moreData)
    fcca:	783b      	ldrb	r3, [r7, #0]
    fccc:	f01b 0f08 	tst.w	fp, #8
        data->moreData |= DLMS_DATA_REQUEST_TYPES_FRAME;
    fcd0:	bf14      	ite	ne
    fcd2:	f043 0301 	orrne.w	r3, r3, #1
        data->moreData = ((DLMS_DATA_REQUEST_TYPES)(data->moreData & ~DLMS_DATA_REQUEST_TYPES_FRAME));
    fcd6:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    fcda:	703b      	strb	r3, [r7, #0]
    if (!preEstablished && !checkFrame(settings, *frame))
    fcdc:	9b05      	ldr	r3, [sp, #20]
    fcde:	b983      	cbnz	r3, fd02 <dlms_getHdlcData+0x1a2>
    fce0:	f899 1000 	ldrb.w	r1, [r9]
    fce4:	4630      	mov	r0, r6
    fce6:	f001 f96b 	bl	10fc0 <checkFrame>
    fcea:	b950      	cbnz	r0, fd02 <dlms_getHdlcData+0x1a2>
        reply->position = eopPos + 1;
    fcec:	9b08      	ldr	r3, [sp, #32]
    fcee:	3302      	adds	r3, #2
    fcf0:	812b      	strh	r3, [r5, #8]
        if (settings->server)
    fcf2:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
    fcf6:	2b00      	cmp	r3, #0
    fcf8:	f43f af68 	beq.w	fbcc <dlms_getHdlcData+0x6c>
            return DLMS_ERROR_CODE_INVALID_FRAME_NUMBER;
    fcfc:	f240 1419 	movw	r4, #281	; 0x119
    fd00:	e7cf      	b.n	fca2 <dlms_getHdlcData+0x142>
        reply->position - packetStartID - 1);
    fd02:	892a      	ldrh	r2, [r5, #8]
    crc = countCRC(reply, packetStartID + 1,
    fd04:	f108 0b01 	add.w	fp, r8, #1
        reply->position - packetStartID - 1);
    fd08:	3a01      	subs	r2, #1
    crc = countCRC(reply, packetStartID + 1,
    fd0a:	eba2 0208 	sub.w	r2, r2, r8
    fd0e:	4659      	mov	r1, fp
    fd10:	4628      	mov	r0, r5
    fd12:	f7f2 fe31 	bl	2978 <countCRC.isra.0>
    if ((ret = bb_getUInt16(reply, &crcRead)) != 0)
    fd16:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
    crc = countCRC(reply, packetStartID + 1,
    fd1a:	9009      	str	r0, [sp, #36]	; 0x24
    if ((ret = bb_getUInt16(reply, &crcRead)) != 0)
    fd1c:	4628      	mov	r0, r5
    fd1e:	f7fd ffc7 	bl	dcb0 <bb_getUInt16>
    fd22:	4604      	mov	r4, r0
    fd24:	2800      	cmp	r0, #0
    fd26:	d1bc      	bne.n	fca2 <dlms_getHdlcData+0x142>
    if (crc != crcRead)
    fd28:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    fd2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fd2e:	8929      	ldrh	r1, [r5, #8]
    fd30:	4293      	cmp	r3, r2
    fd32:	d007      	beq.n	fd44 <dlms_getHdlcData+0x1e4>
        if (reply->size - reply->position > 8)
    fd34:	88eb      	ldrh	r3, [r5, #6]
    fd36:	1a5b      	subs	r3, r3, r1
    fd38:	2b08      	cmp	r3, #8
    fd3a:	f73f af47 	bgt.w	fbcc <dlms_getHdlcData+0x6c>
        return DLMS_ERROR_CODE_WRONG_CRC;
    fd3e:	f240 140d 	movw	r4, #269	; 0x10d
    fd42:	e7ae      	b.n	fca2 <dlms_getHdlcData+0x142>
    if (reply->position != packetStartID + frameLen + 1)
    fd44:	9b07      	ldr	r3, [sp, #28]
    fd46:	4498      	add	r8, r3
    fd48:	f108 0301 	add.w	r3, r8, #1
    fd4c:	428b      	cmp	r3, r1
    fd4e:	d033      	beq.n	fdb8 <dlms_getHdlcData+0x258>
    fd50:	9309      	str	r3, [sp, #36]	; 0x24
        crc = countCRC(reply, packetStartID + 1, frameLen - 2);
    fd52:	9b07      	ldr	r3, [sp, #28]
    fd54:	4659      	mov	r1, fp
    fd56:	1e9a      	subs	r2, r3, #2
    fd58:	4628      	mov	r0, r5
    fd5a:	f7f2 fe0d 	bl	2978 <countCRC.isra.0>
        if ((ret = bb_getUInt16ByIndex(reply, packetStartID + frameLen - 1, &crcRead)) != 0)
    fd5e:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
        crc = countCRC(reply, packetStartID + 1, frameLen - 2);
    fd62:	4683      	mov	fp, r0
        if ((ret = bb_getUInt16ByIndex(reply, packetStartID + frameLen - 1, &crcRead)) != 0)
    fd64:	f108 31ff 	add.w	r1, r8, #4294967295
    fd68:	4628      	mov	r0, r5
    fd6a:	f7fe f8a7 	bl	debc <bb_getUInt16ByIndex>
    fd6e:	2800      	cmp	r0, #0
    fd70:	f47f af0e 	bne.w	fb90 <dlms_getHdlcData+0x30>
        if (crc != crcRead)
    fd74:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    fd78:	455a      	cmp	r2, fp
    fd7a:	d1e0      	bne.n	fd3e <dlms_getHdlcData+0x1de>
        data->packetLength = eopPos - 2;
    fd7c:	9b08      	ldr	r3, [sp, #32]
    fd7e:	1e5a      	subs	r2, r3, #1
    fd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd82:	85ba      	strh	r2, [r7, #44]	; 0x2c
    if (*frame != 0x13 && *frame != 0x3 && (*frame & HDLC_FRAME_TYPE_U_FRAME) == HDLC_FRAME_TYPE_U_FRAME)
    fd84:	f899 2000 	ldrb.w	r2, [r9]
    fd88:	f002 01ef 	and.w	r1, r2, #239	; 0xef
    fd8c:	2903      	cmp	r1, #3
    fd8e:	d066      	beq.n	fe5e <dlms_getHdlcData+0x2fe>
    fd90:	f002 0103 	and.w	r1, r2, #3
    fd94:	2903      	cmp	r1, #3
    fd96:	d11f      	bne.n	fdd8 <dlms_getHdlcData+0x278>
        if (reply->position == packetStartID + frameLen + 1)
    fd98:	892a      	ldrh	r2, [r5, #8]
    fd9a:	4293      	cmp	r3, r2
    fd9c:	d014      	beq.n	fdc8 <dlms_getHdlcData+0x268>
        data->command = (DLMS_COMMAND)*frame;
    fd9e:	f899 3000 	ldrb.w	r3, [r9]
    fda2:	707b      	strb	r3, [r7, #1]
        switch (data->command)
    fda4:	2b73      	cmp	r3, #115	; 0x73
    fda6:	d029      	beq.n	fdfc <dlms_getHdlcData+0x29c>
    fda8:	d80a      	bhi.n	fdc0 <dlms_getHdlcData+0x260>
    fdaa:	2b1f      	cmp	r3, #31
    fdac:	d026      	beq.n	fdfc <dlms_getHdlcData+0x29c>
    fdae:	2b53      	cmp	r3, #83	; 0x53
    fdb0:	d024      	beq.n	fdfc <dlms_getHdlcData+0x29c>
            return DLMS_ERROR_CODE_REJECTED;
    fdb2:	f06f 0401 	mvn.w	r4, #1
    fdb6:	e774      	b.n	fca2 <dlms_getHdlcData+0x142>
        data->packetLength = eopPos - 2;
    fdb8:	9a08      	ldr	r2, [sp, #32]
    fdba:	3a01      	subs	r2, #1
    fdbc:	85ba      	strh	r2, [r7, #44]	; 0x2c
    fdbe:	e7e1      	b.n	fd84 <dlms_getHdlcData+0x224>
        switch (data->command)
    fdc0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    fdc4:	2b93      	cmp	r3, #147	; 0x93
    fdc6:	e7f3      	b.n	fdb0 <dlms_getHdlcData+0x250>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    fdc8:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    fdcc:	4628      	mov	r0, r5
    fdce:	f7fd ff46 	bl	dc5e <bb_getUInt8>
    fdd2:	2800      	cmp	r0, #0
    fdd4:	d0e3      	beq.n	fd9e <dlms_getHdlcData+0x23e>
    fdd6:	e6db      	b.n	fb90 <dlms_getHdlcData+0x30>
    else if (*frame != 0x13 && *frame != 0x3 && (*frame & HDLC_FRAME_TYPE_S_FRAME) == HDLC_FRAME_TYPE_S_FRAME)
    fdd8:	07d1      	lsls	r1, r2, #31
    fdda:	d540      	bpl.n	fe5e <dlms_getHdlcData+0x2fe>
        else if (tmp == HDLC_CONTROL_FRAME_RECEIVE_NOT_READY)
    fddc:	f3c2 0281 	ubfx	r2, r2, #2, #2
    fde0:	3a01      	subs	r2, #1
    fde2:	2a01      	cmp	r2, #1
    fde4:	d9e5      	bls.n	fdb2 <dlms_getHdlcData+0x252>
        if (reply->position == packetStartID + frameLen + 1)
    fde6:	892a      	ldrh	r2, [r5, #8]
    fde8:	4293      	cmp	r3, r2
    fdea:	d107      	bne.n	fdfc <dlms_getHdlcData+0x29c>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    fdec:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    fdf0:	4628      	mov	r0, r5
    fdf2:	f7fd ff34 	bl	dc5e <bb_getUInt8>
    fdf6:	2800      	cmp	r0, #0
    fdf8:	f47f aeca 	bne.w	fb90 <dlms_getHdlcData+0x30>
    if (settings->server && (first || data->command == DLMS_COMMAND_SNRM))
    fdfc:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
    fe00:	2b00      	cmp	r3, #0
    fe02:	f43f af4e 	beq.w	fca2 <dlms_getHdlcData+0x142>
    fe06:	9b06      	ldr	r3, [sp, #24]
    fe08:	b91b      	cbnz	r3, fe12 <dlms_getHdlcData+0x2b2>
    fe0a:	787b      	ldrb	r3, [r7, #1]
    fe0c:	2b93      	cmp	r3, #147	; 0x93
    fe0e:	f47f af48 	bne.w	fca2 <dlms_getHdlcData+0x142>
        if (!svr_isTarget(settings, settings->serverAddress, settings->clientAddress))
    fe12:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
    fe14:	6b31      	ldr	r1, [r6, #48]	; 0x30
    fe16:	4630      	mov	r0, r6
    fe18:	f7fd fc3f 	bl	d69a <svr_isTarget>
    fe1c:	2800      	cmp	r0, #0
    fe1e:	f47f af40 	bne.w	fca2 <dlms_getHdlcData+0x142>
            if (reply->size - reply->position > 8)
    fe22:	f8b5 8008 	ldrh.w	r8, [r5, #8]
    fe26:	88eb      	ldrh	r3, [r5, #6]
            settings->serverAddress = 0;
    fe28:	6330      	str	r0, [r6, #48]	; 0x30
            if (reply->size - reply->position > 8)
    fe2a:	eba3 0308 	sub.w	r3, r3, r8
    fe2e:	2b08      	cmp	r3, #8
            settings->clientAddress = 0;
    fe30:	85f0      	strh	r0, [r6, #46]	; 0x2e
            if (reply->size - reply->position > 8)
    fe32:	dd2b      	ble.n	fe8c <dlms_getHdlcData+0x32c>
                ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    fe34:	9b06      	ldr	r3, [sp, #24]
    fe36:	9302      	str	r3, [sp, #8]
    fe38:	9b05      	ldr	r3, [sp, #20]
    fe3a:	462a      	mov	r2, r5
    fe3c:	e9cd 9300 	strd	r9, r3, [sp]
    fe40:	4631      	mov	r1, r6
    fe42:	463b      	mov	r3, r7
    fe44:	4650      	mov	r0, sl
    fe46:	f7ff fe8b 	bl	fb60 <dlms_getHdlcData>
                if (settings->serverAddress != 0 && settings->clientAddress != 0)
    fe4a:	6b33      	ldr	r3, [r6, #48]	; 0x30
                ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
    fe4c:	4604      	mov	r4, r0
                if (settings->serverAddress != 0 && settings->clientAddress != 0)
    fe4e:	2b00      	cmp	r3, #0
    fe50:	f43f af27 	beq.w	fca2 <dlms_getHdlcData+0x142>
    fe54:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    fe56:	2b00      	cmp	r3, #0
    fe58:	f43f af23 	beq.w	fca2 <dlms_getHdlcData+0x142>
    fe5c:	e6ee      	b.n	fc3c <dlms_getHdlcData+0xdc>
        if (reply->position == packetStartID + frameLen + 1)
    fe5e:	892a      	ldrh	r2, [r5, #8]
    fe60:	4293      	cmp	r3, r2
    fe62:	d10e      	bne.n	fe82 <dlms_getHdlcData+0x322>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
    fe64:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    fe68:	4628      	mov	r0, r5
    fe6a:	f7fd fef8 	bl	dc5e <bb_getUInt8>
    fe6e:	2800      	cmp	r0, #0
    fe70:	f47f ae8e 	bne.w	fb90 <dlms_getHdlcData+0x30>
            if ((*frame & 0x1) == 0x1)
    fe74:	f899 3000 	ldrb.w	r3, [r9]
    fe78:	07db      	lsls	r3, r3, #31
    fe7a:	d5bf      	bpl.n	fdfc <dlms_getHdlcData+0x29c>
                data->moreData = DLMS_DATA_REQUEST_TYPES_FRAME;
    fe7c:	2301      	movs	r3, #1
    fe7e:	703b      	strb	r3, [r7, #0]
    fe80:	e7bc      	b.n	fdfc <dlms_getHdlcData+0x29c>
            dlms_checkLLCBytes(settings, reply);
    fe82:	4629      	mov	r1, r5
    fe84:	4630      	mov	r0, r6
    fe86:	f7f2 fe93 	bl	2bb0 <dlms_checkLLCBytes>
    fe8a:	e7b7      	b.n	fdfc <dlms_getHdlcData+0x29c>
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    fe8c:	f240 1407 	movw	r4, #263	; 0x107
    fe90:	e707      	b.n	fca2 <dlms_getHdlcData+0x142>

0000fe92 <dlms_checkWrapperAddress>:
{
    fe92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (settings->server)
    fe94:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
    fe98:	460d      	mov	r5, r1
    fe9a:	4604      	mov	r4, r0
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    fe9c:	f10d 0106 	add.w	r1, sp, #6
    fea0:	4628      	mov	r0, r5
    if (settings->server)
    fea2:	b1c3      	cbz	r3, fed6 <dlms_checkWrapperAddress+0x44>
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    fea4:	f7fd ff04 	bl	dcb0 <bb_getUInt16>
    fea8:	b998      	cbnz	r0, fed2 <dlms_checkWrapperAddress+0x40>
        if (settings->clientAddress != 0 && settings->clientAddress != value)
    feaa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    feac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    feb0:	b10a      	cbz	r2, feb6 <dlms_checkWrapperAddress+0x24>
    feb2:	429a      	cmp	r2, r3
    feb4:	d12c      	bne.n	ff10 <dlms_checkWrapperAddress+0x7e>
            settings->clientAddress = value;
    feb6:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    feb8:	f10d 0106 	add.w	r1, sp, #6
    febc:	4628      	mov	r0, r5
    febe:	f7fd fef7 	bl	dcb0 <bb_getUInt16>
    fec2:	b930      	cbnz	r0, fed2 <dlms_checkWrapperAddress+0x40>
        if (settings->serverAddress != 0 && settings->serverAddress != value)
    fec4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    fec6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    feca:	b10a      	cbz	r2, fed0 <dlms_checkWrapperAddress+0x3e>
    fecc:	429a      	cmp	r2, r3
    fece:	d11c      	bne.n	ff0a <dlms_checkWrapperAddress+0x78>
            settings->serverAddress = value;
    fed0:	6323      	str	r3, [r4, #48]	; 0x30
}
    fed2:	b003      	add	sp, #12
    fed4:	bd30      	pop	{r4, r5, pc}
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    fed6:	f7fd feeb 	bl	dcb0 <bb_getUInt16>
    feda:	2800      	cmp	r0, #0
    fedc:	d1f9      	bne.n	fed2 <dlms_checkWrapperAddress+0x40>
        if (settings->serverAddress != 0 && settings->serverAddress != value)
    fede:	6b22      	ldr	r2, [r4, #48]	; 0x30
    fee0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fee4:	b10a      	cbz	r2, feea <dlms_checkWrapperAddress+0x58>
    fee6:	429a      	cmp	r2, r3
    fee8:	d10f      	bne.n	ff0a <dlms_checkWrapperAddress+0x78>
            settings->serverAddress = value;
    feea:	6323      	str	r3, [r4, #48]	; 0x30
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    feec:	f10d 0106 	add.w	r1, sp, #6
    fef0:	4628      	mov	r0, r5
    fef2:	f7fd fedd 	bl	dcb0 <bb_getUInt16>
    fef6:	2800      	cmp	r0, #0
    fef8:	d1eb      	bne.n	fed2 <dlms_checkWrapperAddress+0x40>
        if (settings->clientAddress != 0 && settings->clientAddress != value)
    fefa:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    fefc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ff00:	b10a      	cbz	r2, ff06 <dlms_checkWrapperAddress+0x74>
    ff02:	429a      	cmp	r2, r3
    ff04:	d104      	bne.n	ff10 <dlms_checkWrapperAddress+0x7e>
            settings->clientAddress = value;
    ff06:	85e3      	strh	r3, [r4, #46]	; 0x2e
    ff08:	e7e3      	b.n	fed2 <dlms_checkWrapperAddress+0x40>
            return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
    ff0a:	f44f 7084 	mov.w	r0, #264	; 0x108
    ff0e:	e7e0      	b.n	fed2 <dlms_checkWrapperAddress+0x40>
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    ff10:	f240 1007 	movw	r0, #263	; 0x107
    ff14:	e7dd      	b.n	fed2 <dlms_checkWrapperAddress+0x40>

0000ff16 <dlms_getTcpData>:
{
    ff16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (buff->size - buff->position < 8)
    ff18:	88cb      	ldrh	r3, [r1, #6]
    ff1a:	890e      	ldrh	r6, [r1, #8]
    ff1c:	1b9b      	subs	r3, r3, r6
{
    ff1e:	4607      	mov	r7, r0
    if (buff->size - buff->position < 8)
    ff20:	2b07      	cmp	r3, #7
    ff22:	f04f 0000 	mov.w	r0, #0
{
    ff26:	460c      	mov	r4, r1
    ff28:	4615      	mov	r5, r2
        data->complete = 0;
    ff2a:	7410      	strb	r0, [r2, #16]
    if (buff->size - buff->position < 8)
    ff2c:	dc2c      	bgt.n	ff88 <dlms_getTcpData+0x72>
}
    ff2e:	b003      	add	sp, #12
    ff30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((ret = bb_getUInt16(buff, &value)) != 0)
    ff32:	f10d 0106 	add.w	r1, sp, #6
    ff36:	4620      	mov	r0, r4
    ff38:	f7fd feba 	bl	dcb0 <bb_getUInt16>
    ff3c:	2800      	cmp	r0, #0
    ff3e:	d1f6      	bne.n	ff2e <dlms_getTcpData+0x18>
        if (value == 1)
    ff40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ff44:	2b01      	cmp	r3, #1
    ff46:	d11c      	bne.n	ff82 <dlms_getTcpData+0x6c>
            if ((ret = dlms_checkWrapperAddress(settings, buff)) != 0)
    ff48:	4621      	mov	r1, r4
    ff4a:	4638      	mov	r0, r7
    ff4c:	f7ff ffa1 	bl	fe92 <dlms_checkWrapperAddress>
    ff50:	2800      	cmp	r0, #0
    ff52:	d1ec      	bne.n	ff2e <dlms_getTcpData+0x18>
            if ((ret = bb_getUInt16(buff, &value)) != 0)
    ff54:	f10d 0106 	add.w	r1, sp, #6
    ff58:	4620      	mov	r0, r4
    ff5a:	f7fd fea9 	bl	dcb0 <bb_getUInt16>
    ff5e:	2800      	cmp	r0, #0
    ff60:	d1e5      	bne.n	ff2e <dlms_getTcpData+0x18>
            data->complete = !((buff->size - buff->position) < value);
    ff62:	8923      	ldrh	r3, [r4, #8]
    ff64:	88e2      	ldrh	r2, [r4, #6]
    ff66:	1ad2      	subs	r2, r2, r3
    ff68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ff6c:	429a      	cmp	r2, r3
    ff6e:	bfac      	ite	ge
    ff70:	2201      	movge	r2, #1
    ff72:	2200      	movlt	r2, #0
    ff74:	742a      	strb	r2, [r5, #16]
                data->packetLength = buff->position + value;
    ff76:	bfa9      	itett	ge
    ff78:	8922      	ldrhge	r2, [r4, #8]
                buff->position = pos;
    ff7a:	8126      	strhlt	r6, [r4, #8]
                data->packetLength = buff->position + value;
    ff7c:	189b      	addge	r3, r3, r2
    ff7e:	85ab      	strhge	r3, [r5, #44]	; 0x2c
    ff80:	e7d5      	b.n	ff2e <dlms_getTcpData+0x18>
            --buff->position;
    ff82:	8923      	ldrh	r3, [r4, #8]
    ff84:	3b01      	subs	r3, #1
    ff86:	8123      	strh	r3, [r4, #8]
    while (buff->position != buff->size)
    ff88:	8922      	ldrh	r2, [r4, #8]
    ff8a:	88e3      	ldrh	r3, [r4, #6]
    ff8c:	429a      	cmp	r2, r3
    ff8e:	d1d0      	bne.n	ff32 <dlms_getTcpData+0x1c>
    return DLMS_ERROR_CODE_OK;
    ff90:	2000      	movs	r0, #0
    ff92:	e7cc      	b.n	ff2e <dlms_getTcpData+0x18>

0000ff94 <dlms_getMBusData>:
{
    ff94:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff96:	460d      	mov	r5, r1
    ff98:	b085      	sub	sp, #20
    ff9a:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    ff9c:	f10d 0103 	add.w	r1, sp, #3
    ffa0:	4628      	mov	r0, r5
{
    ffa2:	4616      	mov	r6, r2
    if ((ret = bb_getUInt8(buff, &len)) != 0)
    ffa4:	f7fd fe5b 	bl	dc5e <bb_getUInt8>
    ffa8:	b950      	cbnz	r0, ffc0 <dlms_getMBusData+0x2c>
    if (buff->size < (unsigned char)(len - 1))
    ffaa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ffae:	88e9      	ldrh	r1, [r5, #6]
    ffb0:	1e53      	subs	r3, r2, #1
    ffb2:	b2df      	uxtb	r7, r3
    ffb4:	428f      	cmp	r7, r1
    ffb6:	d905      	bls.n	ffc4 <dlms_getMBusData+0x30>
        data->complete = 0;
    ffb8:	7430      	strb	r0, [r6, #16]
        buff->position = buff->position - 1;
    ffba:	892b      	ldrh	r3, [r5, #8]
    ffbc:	3b01      	subs	r3, #1
    ffbe:	812b      	strh	r3, [r5, #8]
}
    ffc0:	b005      	add	sp, #20
    ffc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (buff->size < len)
    ffc4:	4291      	cmp	r1, r2
            --len;
    ffc6:	bf38      	it	cc
    ffc8:	f88d 3003 	strbcc.w	r3, [sp, #3]
        data->packetLength = len;
    ffcc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ffd0:	85b3      	strh	r3, [r6, #44]	; 0x2c
        data->complete = 1;
    ffd2:	2301      	movs	r3, #1
    ffd4:	7433      	strb	r3, [r6, #16]
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    ffd6:	a901      	add	r1, sp, #4
    ffd8:	4628      	mov	r0, r5
    ffda:	f7fd fe40 	bl	dc5e <bb_getUInt8>
    ffde:	2800      	cmp	r0, #0
    ffe0:	d1ee      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt16(buff, &manufacturerID)) != 0)
    ffe2:	a902      	add	r1, sp, #8
    ffe4:	4628      	mov	r0, r5
    ffe6:	f7fd fe63 	bl	dcb0 <bb_getUInt16>
    ffea:	2800      	cmp	r0, #0
    ffec:	d1e8      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt32(buff, &id)) != 0)
    ffee:	a903      	add	r1, sp, #12
    fff0:	4628      	mov	r0, r5
    fff2:	f7fd fe72 	bl	dcda <bb_getUInt32>
    fff6:	2800      	cmp	r0, #0
    fff8:	d1e2      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &meterVersion)) != 0 ||
    fffa:	f10d 0105 	add.w	r1, sp, #5
    fffe:	4628      	mov	r0, r5
   10000:	f7fd fe2d 	bl	dc5e <bb_getUInt8>
   10004:	2800      	cmp	r0, #0
   10006:	d1db      	bne.n	ffc0 <dlms_getMBusData+0x2c>
            (ret = bb_getUInt8(buff, &ch)) != 0)
   10008:	a901      	add	r1, sp, #4
   1000a:	4628      	mov	r0, r5
   1000c:	f7fd fe27 	bl	dc5e <bb_getUInt8>
        if ((ret = bb_getUInt8(buff, &meterVersion)) != 0 ||
   10010:	2800      	cmp	r0, #0
   10012:	d1d5      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10014:	a901      	add	r1, sp, #4
   10016:	4628      	mov	r0, r5
   10018:	f7fd fe21 	bl	dc5e <bb_getUInt8>
   1001c:	2800      	cmp	r0, #0
   1001e:	d1cf      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &frameId)) != 0)
   10020:	f10d 0106 	add.w	r1, sp, #6
   10024:	4628      	mov	r0, r5
   10026:	f7fd fe1a 	bl	dc5e <bb_getUInt8>
   1002a:	2800      	cmp	r0, #0
   1002c:	d1c8      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &state)) != 0)
   1002e:	f10d 0107 	add.w	r1, sp, #7
   10032:	4628      	mov	r0, r5
   10034:	f7fd fe13 	bl	dc5e <bb_getUInt8>
   10038:	2800      	cmp	r0, #0
   1003a:	d1c1      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt16(buff, &configurationWord)) != 0)
   1003c:	f10d 010a 	add.w	r1, sp, #10
   10040:	4628      	mov	r0, r5
   10042:	f7fd fe35 	bl	dcb0 <bb_getUInt16>
   10046:	2800      	cmp	r0, #0
   10048:	d1ba      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   1004a:	a901      	add	r1, sp, #4
   1004c:	4628      	mov	r0, r5
   1004e:	f7fd fe06 	bl	dc5e <bb_getUInt8>
   10052:	2800      	cmp	r0, #0
   10054:	d1b4      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        settings->clientAddress = ch;
   10056:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1005a:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   1005c:	a901      	add	r1, sp, #4
   1005e:	4628      	mov	r0, r5
   10060:	f7fd fdfd 	bl	dc5e <bb_getUInt8>
   10064:	2800      	cmp	r0, #0
   10066:	d1ab      	bne.n	ffc0 <dlms_getMBusData+0x2c>
        settings->serverAddress = ch;
   10068:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1006c:	6323      	str	r3, [r4, #48]	; 0x30
   1006e:	e7a7      	b.n	ffc0 <dlms_getMBusData+0x2c>

00010070 <dlms_getPlcData>:
{
   10070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10074:	4680      	mov	r8, r0
   10076:	b085      	sub	sp, #20
    if (bb_available(buff) < 9)
   10078:	4608      	mov	r0, r1
{
   1007a:	460d      	mov	r5, r1
   1007c:	4616      	mov	r6, r2
    if (bb_available(buff) < 9)
   1007e:	f7fd fc08 	bl	d892 <bb_available>
   10082:	2808      	cmp	r0, #8
   10084:	d803      	bhi.n	1008e <dlms_getPlcData+0x1e>
        data->complete = 0;
   10086:	2000      	movs	r0, #0
   10088:	7430      	strb	r0, [r6, #16]
                return ret;
   1008a:	4604      	mov	r4, r0
   1008c:	e030      	b.n	100f0 <dlms_getPlcData+0x80>
    int packetStartID = buff->position;
   1008e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    for (pos = (unsigned short)buff->position; pos < buff->size; ++pos)
   10092:	464f      	mov	r7, r9
   10094:	88eb      	ldrh	r3, [r5, #6]
   10096:	42bb      	cmp	r3, r7
   10098:	d808      	bhi.n	100ac <dlms_getPlcData+0x3c>
    int packetStartID = buff->position;
   1009a:	464f      	mov	r7, r9
    if (buff->position == buff->size)
   1009c:	892a      	ldrh	r2, [r5, #8]
   1009e:	88eb      	ldrh	r3, [r5, #6]
   100a0:	429a      	cmp	r2, r3
   100a2:	d111      	bne.n	100c8 <dlms_getPlcData+0x58>
        data->complete = 0;
   100a4:	2000      	movs	r0, #0
   100a6:	7430      	strb	r0, [r6, #16]
        buff->position = packetStartID;
   100a8:	812f      	strh	r7, [r5, #8]
        return 0;
   100aa:	e7ee      	b.n	1008a <dlms_getPlcData+0x1a>
        if ((ret = bb_getUInt8(buff, &stx)) != 0)
   100ac:	f10d 0103 	add.w	r1, sp, #3
   100b0:	4628      	mov	r0, r5
   100b2:	f7fd fdd4 	bl	dc5e <bb_getUInt8>
   100b6:	4604      	mov	r4, r0
   100b8:	b9d0      	cbnz	r0, 100f0 <dlms_getPlcData+0x80>
        if (stx == 2)
   100ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
   100be:	2b02      	cmp	r3, #2
   100c0:	d0ec      	beq.n	1009c <dlms_getPlcData+0x2c>
    for (pos = (unsigned short)buff->position; pos < buff->size; ++pos)
   100c2:	1c7b      	adds	r3, r7, #1
   100c4:	b29f      	uxth	r7, r3
   100c6:	e7e5      	b.n	10094 <dlms_getPlcData+0x24>
    if ((ret = bb_getUInt8(buff, &len)) != 0)
   100c8:	f10d 0105 	add.w	r1, sp, #5
   100cc:	4628      	mov	r0, r5
   100ce:	f7fd fdc6 	bl	dc5e <bb_getUInt8>
   100d2:	4604      	mov	r4, r0
   100d4:	b960      	cbnz	r0, 100f0 <dlms_getPlcData+0x80>
    if (bb_available(buff) < len)
   100d6:	4628      	mov	r0, r5
    int index = buff->position;
   100d8:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (bb_available(buff) < len)
   100dc:	f7fd fbd9 	bl	d892 <bb_available>
   100e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   100e4:	4283      	cmp	r3, r0
   100e6:	d907      	bls.n	100f8 <dlms_getPlcData+0x88>
        data->complete = 0;
   100e8:	7434      	strb	r4, [r6, #16]
        buff->position = buff->position - 2;
   100ea:	892b      	ldrh	r3, [r5, #8]
   100ec:	3b02      	subs	r3, #2
            buff->position = buff->position - index - 6;
   100ee:	812b      	strh	r3, [r5, #8]
}
   100f0:	4620      	mov	r0, r4
   100f2:	b005      	add	sp, #20
   100f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   100f8:	a901      	add	r1, sp, #4
   100fa:	4628      	mov	r0, r5
   100fc:	f7fd fdaf 	bl	dc5e <bb_getUInt8>
   10100:	4604      	mov	r4, r0
   10102:	2800      	cmp	r0, #0
   10104:	d1f4      	bne.n	100f0 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
   10106:	f10d 0106 	add.w	r1, sp, #6
   1010a:	4628      	mov	r0, r5
   1010c:	f7fd fda7 	bl	dc5e <bb_getUInt8>
   10110:	4604      	mov	r4, r0
   10112:	2800      	cmp	r0, #0
   10114:	d1ec      	bne.n	100f0 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt24(buff, &mac)) != 0)
   10116:	a903      	add	r1, sp, #12
   10118:	4628      	mov	r0, r5
   1011a:	f7fd fe23 	bl	dd64 <bb_getUInt24>
   1011e:	4604      	mov	r4, r0
   10120:	2800      	cmp	r0, #0
   10122:	d1e5      	bne.n	100f0 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt8(buff, &padLen)) != 0)
   10124:	f10d 0107 	add.w	r1, sp, #7
   10128:	4628      	mov	r0, r5
        short macSa = (short)(mac >> 12);
   1012a:	9f03      	ldr	r7, [sp, #12]
        if ((ret = bb_getUInt8(buff, &padLen)) != 0)
   1012c:	f7fd fd97 	bl	dc5e <bb_getUInt8>
   10130:	4604      	mov	r4, r0
   10132:	2800      	cmp	r0, #0
   10134:	d1dc      	bne.n	100f0 <dlms_getPlcData+0x80>
        if (buff->size < (unsigned short)(len + padLen + 2))
   10136:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1013a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1013e:	4413      	add	r3, r2
   10140:	88ea      	ldrh	r2, [r5, #6]
   10142:	3302      	adds	r3, #2
   10144:	429a      	cmp	r2, r3
   10146:	d205      	bcs.n	10154 <dlms_getPlcData+0xe4>
            data->complete = 0;
   10148:	7430      	strb	r0, [r6, #16]
            buff->position = buff->position - index - 6;
   1014a:	892b      	ldrh	r3, [r5, #8]
   1014c:	3b06      	subs	r3, #6
   1014e:	eba3 0309 	sub.w	r3, r3, r9
   10152:	e7cc      	b.n	100ee <dlms_getPlcData+0x7e>
            if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10154:	a901      	add	r1, sp, #4
   10156:	4628      	mov	r0, r5
   10158:	f7fd fd81 	bl	dc5e <bb_getUInt8>
   1015c:	2800      	cmp	r0, #0
   1015e:	d194      	bne.n	1008a <dlms_getPlcData+0x1a>
            if (ch != DLMS_PLC_DATA_LINK_DATA_REQUEST)
   10160:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10164:	2b90      	cmp	r3, #144	; 0x90
   10166:	d161      	bne.n	1022c <dlms_getPlcData+0x1bc>
            if ((ret = bb_getUInt8(buff, &da)) != 0 ||
   10168:	a902      	add	r1, sp, #8
   1016a:	4628      	mov	r0, r5
   1016c:	f7fd fd77 	bl	dc5e <bb_getUInt8>
   10170:	2800      	cmp	r0, #0
   10172:	d18a      	bne.n	1008a <dlms_getPlcData+0x1a>
                (ret = bb_getUInt8(buff, &sa)) != 0)
   10174:	f10d 0109 	add.w	r1, sp, #9
   10178:	4628      	mov	r0, r5
   1017a:	f7fd fd70 	bl	dc5e <bb_getUInt8>
            if ((ret = bb_getUInt8(buff, &da)) != 0 ||
   1017e:	2800      	cmp	r0, #0
   10180:	d183      	bne.n	1008a <dlms_getPlcData+0x1a>
            if (settings->server)
   10182:	f898 1058 	ldrb.w	r1, [r8, #88]	; 0x58
        short macSa = (short)(mac >> 12);
   10186:	0b3a      	lsrs	r2, r7, #12
        short macDa = (short)(mac & 0xFFF);
   10188:	f640 73ff 	movw	r3, #4095	; 0xfff
   1018c:	f3c7 070b 	ubfx	r7, r7, #0, #12
            if (settings->server)
   10190:	b3b9      	cbz	r1, 10202 <dlms_getPlcData+0x192>
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
   10192:	429f      	cmp	r7, r3
   10194:	d003      	beq.n	1019e <dlms_getPlcData+0x12e>
   10196:	f8b8 307c 	ldrh.w	r3, [r8, #124]	; 0x7c
   1019a:	429f      	cmp	r7, r3
   1019c:	d10b      	bne.n	101b6 <dlms_getPlcData+0x146>
        short macSa = (short)(mac >> 12);
   1019e:	b213      	sxth	r3, r2
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
   101a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
   101a4:	d02b      	beq.n	101fe <dlms_getPlcData+0x18e>
                    (macSa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR || macSa == settings->plcSettings.macDestinationAddress);
   101a6:	f8b8 007e 	ldrh.w	r0, [r8, #126]	; 0x7e
   101aa:	eba0 0c03 	sub.w	ip, r0, r3
   101ae:	f1dc 0000 	rsbs	r0, ip, #0
   101b2:	eb40 000c 	adc.w	r0, r0, ip
                data->complete =
   101b6:	7430      	strb	r0, [r6, #16]
                data->serverAddress = macDa;
   101b8:	f8a6 7048 	strh.w	r7, [r6, #72]	; 0x48
                data->clientAddress = macSa;
   101bc:	f8a6 204a 	strh.w	r2, [r6, #74]	; 0x4a
            if (data->complete)
   101c0:	7c33      	ldrb	r3, [r6, #16]
   101c2:	2b00      	cmp	r3, #0
   101c4:	d094      	beq.n	100f0 <dlms_getPlcData+0x80>
                crcCount = countCRC(buff, 0, len + padLen);
   101c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101ca:	f89d 7005 	ldrb.w	r7, [sp, #5]
   101ce:	441f      	add	r7, r3
   101d0:	463a      	mov	r2, r7
   101d2:	2100      	movs	r1, #0
   101d4:	4628      	mov	r0, r5
   101d6:	f7f2 fbcf 	bl	2978 <countCRC.isra.0>
                if ((ret = bb_getUInt16ByIndex(buff, len + padLen, &crc)) != 0)
   101da:	f10d 020a 	add.w	r2, sp, #10
                crcCount = countCRC(buff, 0, len + padLen);
   101de:	4680      	mov	r8, r0
                if ((ret = bb_getUInt16ByIndex(buff, len + padLen, &crc)) != 0)
   101e0:	4639      	mov	r1, r7
   101e2:	4628      	mov	r0, r5
   101e4:	f7fd fe6a 	bl	debc <bb_getUInt16ByIndex>
   101e8:	2800      	cmp	r0, #0
   101ea:	f47f af4e 	bne.w	1008a <dlms_getPlcData+0x1a>
                if (crc != crcCount)
   101ee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   101f2:	4543      	cmp	r3, r8
   101f4:	d117      	bne.n	10226 <dlms_getPlcData+0x1b6>
                data->packetLength = len;
   101f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   101fa:	85b3      	strh	r3, [r6, #44]	; 0x2c
   101fc:	e778      	b.n	100f0 <dlms_getPlcData+0x80>
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
   101fe:	2001      	movs	r0, #1
   10200:	e7d9      	b.n	101b6 <dlms_getPlcData+0x146>
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
   10202:	429f      	cmp	r7, r3
   10204:	d00d      	beq.n	10222 <dlms_getPlcData+0x1b2>
                    macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL ||
   10206:	f5b7 6f40 	cmp.w	r7, #3072	; 0xc00
   1020a:	d00a      	beq.n	10222 <dlms_getPlcData+0x1b2>
                    macDa == settings->plcSettings.macDestinationAddress;
   1020c:	f8b8 307e 	ldrh.w	r3, [r8, #126]	; 0x7e
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
   10210:	1bd9      	subs	r1, r3, r7
   10212:	424b      	negs	r3, r1
   10214:	414b      	adcs	r3, r1
                data->complete =
   10216:	7433      	strb	r3, [r6, #16]
                data->clientAddress = macDa;
   10218:	f8a6 704a 	strh.w	r7, [r6, #74]	; 0x4a
                data->serverAddress = macSa;
   1021c:	f8a6 2048 	strh.w	r2, [r6, #72]	; 0x48
   10220:	e7ce      	b.n	101c0 <dlms_getPlcData+0x150>
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
   10222:	2301      	movs	r3, #1
   10224:	e7f7      	b.n	10216 <dlms_getPlcData+0x1a6>
                    return DLMS_ERROR_CODE_WRONG_CRC;
   10226:	f240 100d 	movw	r0, #269	; 0x10d
   1022a:	e72e      	b.n	1008a <dlms_getPlcData+0x1a>
                return DLMS_ERROR_CODE_INVALID_COMMAND;
   1022c:	f44f 7080 	mov.w	r0, #256	; 0x100
   10230:	e72b      	b.n	1008a <dlms_getPlcData+0x1a>

00010232 <dlms_getPlcHdlcData>:
{
   10232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10236:	4680      	mov	r8, r0
   10238:	b088      	sub	sp, #32
    if (bb_available(buff) < 2)
   1023a:	4608      	mov	r0, r1
{
   1023c:	460d      	mov	r5, r1
   1023e:	4616      	mov	r6, r2
   10240:	4699      	mov	r9, r3
    if (bb_available(buff) < 2)
   10242:	f7fd fb26 	bl	d892 <bb_available>
   10246:	2801      	cmp	r0, #1
   10248:	f04f 0400 	mov.w	r4, #0
   1024c:	d804      	bhi.n	10258 <dlms_getPlcHdlcData+0x26>
        data->complete = 0;
   1024e:	7434      	strb	r4, [r6, #16]
}
   10250:	4620      	mov	r0, r4
   10252:	b008      	add	sp, #32
   10254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *frame = 0;
   10258:	f889 4000 	strb.w	r4, [r9]
    if ((ret = bb_getUInt16(buff, &ns)) != 0)
   1025c:	f10d 0116 	add.w	r1, sp, #22
   10260:	4628      	mov	r0, r5
   10262:	f7fd fd25 	bl	dcb0 <bb_getUInt16>
   10266:	4604      	mov	r4, r0
   10268:	2800      	cmp	r0, #0
   1026a:	d1f1      	bne.n	10250 <dlms_getPlcHdlcData+0x1e>
    switch (ns)
   1026c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   10270:	f644 324b 	movw	r2, #19275	; 0x4b4b
   10274:	4293      	cmp	r3, r2
   10276:	d029      	beq.n	102cc <dlms_getPlcHdlcData+0x9a>
   10278:	d80e      	bhi.n	10298 <dlms_getPlcHdlcData+0x66>
   1027a:	f242 7227 	movw	r2, #10023	; 0x2727
   1027e:	4293      	cmp	r3, r2
   10280:	d027      	beq.n	102d2 <dlms_getPlcHdlcData+0xa0>
   10282:	f643 223a 	movw	r2, #14906	; 0x3a3a
   10286:	4293      	cmp	r3, r2
   10288:	d026      	beq.n	102d8 <dlms_getPlcHdlcData+0xa6>
   1028a:	f641 521d 	movw	r2, #7453	; 0x1d1d
   1028e:	4293      	cmp	r3, r2
   10290:	d025      	beq.n	102de <dlms_getPlcHdlcData+0xac>
   10292:	f44f 7481 	mov.w	r4, #258	; 0x102
   10296:	e7db      	b.n	10250 <dlms_getPlcHdlcData+0x1e>
   10298:	f646 426c 	movw	r2, #27756	; 0x6c6c
   1029c:	4293      	cmp	r3, r2
   1029e:	d021      	beq.n	102e4 <dlms_getPlcHdlcData+0xb2>
   102a0:	f247 1271 	movw	r2, #29041	; 0x7171
   102a4:	4293      	cmp	r3, r2
   102a6:	d020      	beq.n	102ea <dlms_getPlcHdlcData+0xb8>
   102a8:	f245 6256 	movw	r2, #22102	; 0x5656
   102ac:	4293      	cmp	r3, r2
   102ae:	d1f0      	bne.n	10292 <dlms_getPlcHdlcData+0x60>
        frameLen = 3 * 36;
   102b0:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    if (bb_available(buff) < (unsigned char)(frameLen - 2))
   102b4:	4628      	mov	r0, r5
   102b6:	f7fd faec 	bl	d892 <bb_available>
   102ba:	f1aa 0302 	sub.w	r3, sl, #2
   102be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   102c2:	4283      	cmp	r3, r0
   102c4:	d914      	bls.n	102f0 <dlms_getPlcHdlcData+0xbe>
        data->complete = 0;
   102c6:	2300      	movs	r3, #0
   102c8:	7433      	strb	r3, [r6, #16]
   102ca:	e7c1      	b.n	10250 <dlms_getPlcHdlcData+0x1e>
        frameLen = 6 * 36;
   102cc:	f04f 0ad8 	mov.w	sl, #216	; 0xd8
   102d0:	e7f0      	b.n	102b4 <dlms_getPlcHdlcData+0x82>
        frameLen = 7 * 36;
   102d2:	f04f 0afc 	mov.w	sl, #252	; 0xfc
   102d6:	e7ed      	b.n	102b4 <dlms_getPlcHdlcData+0x82>
    switch (ns)
   102d8:	f04f 0a48 	mov.w	sl, #72	; 0x48
   102dc:	e7ea      	b.n	102b4 <dlms_getPlcHdlcData+0x82>
        frameLen = 5 * 36;
   102de:	f04f 0ab4 	mov.w	sl, #180	; 0xb4
   102e2:	e7e7      	b.n	102b4 <dlms_getPlcHdlcData+0x82>
        frameLen = 36;
   102e4:	f04f 0a24 	mov.w	sl, #36	; 0x24
   102e8:	e7e4      	b.n	102b4 <dlms_getPlcHdlcData+0x82>
        frameLen = 4 * 36;
   102ea:	f04f 0a90 	mov.w	sl, #144	; 0x90
   102ee:	e7e1      	b.n	102b4 <dlms_getPlcHdlcData+0x82>
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
   102f0:	a905      	add	r1, sp, #20
   102f2:	4628      	mov	r0, r5
        unsigned long index = buff->position;
   102f4:	892f      	ldrh	r7, [r5, #8]
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
   102f6:	f7fd fcb2 	bl	dc5e <bb_getUInt8>
   102fa:	4604      	mov	r4, r0
   102fc:	2800      	cmp	r0, #0
   102fe:	d1a7      	bne.n	10250 <dlms_getPlcHdlcData+0x1e>
        if ((ret = bb_getUInt24(buff, &mac)) != 0)
   10300:	a906      	add	r1, sp, #24
   10302:	4628      	mov	r0, r5
   10304:	f7fd fd2e 	bl	dd64 <bb_getUInt24>
   10308:	4604      	mov	r4, r0
   1030a:	2800      	cmp	r0, #0
   1030c:	d1a0      	bne.n	10250 <dlms_getPlcHdlcData+0x1e>
        unsigned short sa = (unsigned short)(mac >> 12);
   1030e:	9b06      	ldr	r3, [sp, #24]
        if (settings->server)
   10310:	f898 2058 	ldrb.w	r2, [r8, #88]	; 0x58
        unsigned short sa = (unsigned short)(mac >> 12);
   10314:	f3c3 310f 	ubfx	r1, r3, #12, #16
        unsigned short da = (unsigned short)(mac & 0xFFF);
   10318:	f3c3 030b 	ubfx	r3, r3, #0, #12
        if (settings->server)
   1031c:	2a00      	cmp	r2, #0
   1031e:	d055      	beq.n	103cc <dlms_getPlcHdlcData+0x19a>
            data->complete = (da == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || da == settings->plcSettings.macSourceAddress) &&
   10320:	f640 72ff 	movw	r2, #4095	; 0xfff
   10324:	4293      	cmp	r3, r2
   10326:	d003      	beq.n	10330 <dlms_getPlcHdlcData+0xfe>
   10328:	f8b8 207c 	ldrh.w	r2, [r8, #124]	; 0x7c
   1032c:	429a      	cmp	r2, r3
   1032e:	d10a      	bne.n	10346 <dlms_getPlcHdlcData+0x114>
   10330:	f640 4201 	movw	r2, #3073	; 0xc01
   10334:	4291      	cmp	r1, r2
   10336:	d051      	beq.n	103dc <dlms_getPlcHdlcData+0x1aa>
                (sa == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || sa == settings->plcSettings.macDestinationAddress);
   10338:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
   1033c:	428a      	cmp	r2, r1
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
   1033e:	bf14      	ite	ne
   10340:	2200      	movne	r2, #0
   10342:	2201      	moveq	r2, #1
   10344:	e000      	b.n	10348 <dlms_getPlcHdlcData+0x116>
            data->complete = (da == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || da == settings->plcSettings.macSourceAddress) &&
   10346:	4602      	mov	r2, r0
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
   10348:	7432      	strb	r2, [r6, #16]
            data->serverAddress = da;
   1034a:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        if (data->complete)
   1034e:	7c33      	ldrb	r3, [r6, #16]
            data->clientAddress = sa;
   10350:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
        if (data->complete)
   10354:	2b00      	cmp	r3, #0
   10356:	d047      	beq.n	103e8 <dlms_getPlcHdlcData+0x1b6>
            if ((ret = bb_getUInt8(buff, &padLen)) != 0)
   10358:	f10d 0115 	add.w	r1, sp, #21
   1035c:	4628      	mov	r0, r5
   1035e:	f7fd fc7e 	bl	dc5e <bb_getUInt8>
   10362:	2800      	cmp	r0, #0
   10364:	d13e      	bne.n	103e4 <dlms_getPlcHdlcData+0x1b2>
            if ((ret = dlms_getHdlcData(settings->server, settings, buff, data, frame, 0, 1)) != 0)
   10366:	2301      	movs	r3, #1
   10368:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1036c:	f8cd 9000 	str.w	r9, [sp]
   10370:	f898 0058 	ldrb.w	r0, [r8, #88]	; 0x58
   10374:	4633      	mov	r3, r6
   10376:	462a      	mov	r2, r5
   10378:	4641      	mov	r1, r8
   1037a:	f7ff fbf1 	bl	fb60 <dlms_getHdlcData>
   1037e:	bb88      	cbnz	r0, 103e4 <dlms_getPlcHdlcData+0x1b2>
            dlms_getDataFromFrame(buff, data, dlms_useHdlc(settings->interfaceType));
   10380:	f898 0035 	ldrb.w	r0, [r8, #53]	; 0x35
   10384:	f7fe fc05 	bl	eb92 <dlms_useHdlc>
   10388:	4631      	mov	r1, r6
   1038a:	4602      	mov	r2, r0
   1038c:	4628      	mov	r0, r5
   1038e:	f7ff fbc0 	bl	fb12 <dlms_getDataFromFrame>
            buff->position = buff->position + padLen;
   10392:	892b      	ldrh	r3, [r5, #8]
   10394:	f89d 8015 	ldrb.w	r8, [sp, #21]
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
   10398:	6828      	ldr	r0, [r5, #0]
            buff->position = buff->position + padLen;
   1039a:	4498      	add	r8, r3
   1039c:	fa1f f888 	uxth.w	r8, r8
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
   103a0:	eba8 0207 	sub.w	r2, r8, r7
   103a4:	4639      	mov	r1, r7
            buff->position = buff->position + padLen;
   103a6:	f8a5 8008 	strh.w	r8, [r5, #8]
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
   103aa:	f7f2 fc1d 	bl	2be8 <dlms_countFCS24>
            if ((ret = bb_getUInt24ByIndex(buff, buff->position, &crc)) != 0)
   103ae:	aa07      	add	r2, sp, #28
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
   103b0:	4681      	mov	r9, r0
            if ((ret = bb_getUInt24ByIndex(buff, buff->position, &crc)) != 0)
   103b2:	4641      	mov	r1, r8
   103b4:	4628      	mov	r0, r5
   103b6:	f7fd fcbe 	bl	dd36 <bb_getUInt24ByIndex>
   103ba:	b998      	cbnz	r0, 103e4 <dlms_getPlcHdlcData+0x1b2>
            if (crc != crcCount)
   103bc:	9b07      	ldr	r3, [sp, #28]
   103be:	4599      	cmp	r9, r3
   103c0:	d10e      	bne.n	103e0 <dlms_getPlcHdlcData+0x1ae>
            data->packetLength = (uint16_t)(2 + buff->position - index);
   103c2:	892b      	ldrh	r3, [r5, #8]
   103c4:	3302      	adds	r3, #2
   103c6:	1bdf      	subs	r7, r3, r7
   103c8:	85b7      	strh	r7, [r6, #44]	; 0x2c
   103ca:	e741      	b.n	10250 <dlms_getPlcHdlcData+0x1e>
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
   103cc:	f640 4201 	movw	r2, #3073	; 0xc01
   103d0:	4293      	cmp	r3, r2
   103d2:	d003      	beq.n	103dc <dlms_getPlcHdlcData+0x1aa>
   103d4:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
   103d8:	429a      	cmp	r2, r3
   103da:	e7b0      	b.n	1033e <dlms_getPlcHdlcData+0x10c>
   103dc:	2201      	movs	r2, #1
   103de:	e7b3      	b.n	10348 <dlms_getPlcHdlcData+0x116>
                return DLMS_ERROR_CODE_WRONG_CRC;
   103e0:	f240 100d 	movw	r0, #269	; 0x10d
                return ret;
   103e4:	4604      	mov	r4, r0
   103e6:	e733      	b.n	10250 <dlms_getPlcHdlcData+0x1e>
            buff->position = (uint16_t)(buff->position + frameLen - index - 4);
   103e8:	892b      	ldrh	r3, [r5, #8]
   103ea:	3b04      	subs	r3, #4
   103ec:	1bdf      	subs	r7, r3, r7
   103ee:	44ba      	add	sl, r7
   103f0:	f8a5 a008 	strh.w	sl, [r5, #8]
   103f4:	e72c      	b.n	10250 <dlms_getPlcHdlcData+0x1e>

000103f6 <dlms_getDataFromBlock>:
{
   103f6:	b538      	push	{r3, r4, r5, lr}
    if (data->size == data->position)
   103f8:	88c3      	ldrh	r3, [r0, #6]
{
   103fa:	460d      	mov	r5, r1
    uint16_t pos, len = data->position - index;
   103fc:	8901      	ldrh	r1, [r0, #8]
    if (data->size == data->position)
   103fe:	4299      	cmp	r1, r3
{
   10400:	4604      	mov	r4, r0
    if (data->size == data->position)
   10402:	d103      	bne.n	1040c <dlms_getDataFromBlock+0x16>
        bb_clear(data);
   10404:	f7fd fc15 	bl	dc32 <bb_clear>
}
   10408:	2000      	movs	r0, #0
   1040a:	bd38      	pop	{r3, r4, r5, pc}
    bb_move(data, data->position, data->position - len, data->size - data->position);
   1040c:	1a5b      	subs	r3, r3, r1
   1040e:	b29b      	uxth	r3, r3
   10410:	462a      	mov	r2, r5
   10412:	f7fd fd94 	bl	df3e <bb_move>
    data->position = pos - len;
   10416:	8125      	strh	r5, [r4, #8]
    return 0;
   10418:	e7f6      	b.n	10408 <dlms_getDataFromBlock+0x12>

0001041a <dlms_verifyInvokeId>:
{
   1041a:	b510      	push	{r4, lr}
    if (settings->autoIncreaseInvokeID && reply->invokeId != dlms_getInvokeIDPriority(settings, 0))
   1041c:	f890 30e0 	ldrb.w	r3, [r0, #224]	; 0xe0
   10420:	b90b      	cbnz	r3, 10426 <dlms_verifyInvokeId+0xc>
    return 0;
   10422:	2000      	movs	r0, #0
}
   10424:	bd10      	pop	{r4, pc}
    if (settings->autoIncreaseInvokeID && reply->invokeId != dlms_getInvokeIDPriority(settings, 0))
   10426:	f891 4039 	ldrb.w	r4, [r1, #57]	; 0x39
   1042a:	2100      	movs	r1, #0
   1042c:	f7fe fbba 	bl	eba4 <dlms_getInvokeIDPriority>
   10430:	4284      	cmp	r4, r0
   10432:	d0f6      	beq.n	10422 <dlms_verifyInvokeId+0x8>
        return DLMS_ERROR_CODE_INVALID_INVOKE_ID;
   10434:	f240 101b 	movw	r0, #283	; 0x11b
   10438:	e7f4      	b.n	10424 <dlms_verifyInvokeId+0xa>

0001043a <dlms_handleGetResponse>:
{
   1043a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   1043e:	1d0e      	adds	r6, r1, #4
{
   10440:	4607      	mov	r7, r0
   10442:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10444:	4630      	mov	r0, r6
   10446:	f10d 0101 	add.w	r1, sp, #1
{
   1044a:	4690      	mov	r8, r2
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   1044c:	f7fd fc07 	bl	dc5e <bb_getUInt8>
   10450:	4604      	mov	r4, r0
   10452:	bb30      	cbnz	r0, 104a2 <dlms_handleGetResponse+0x68>
    if ((ret = bb_getUInt8(&reply->data, &reply->invokeId)) != 0)
   10454:	f105 0139 	add.w	r1, r5, #57	; 0x39
   10458:	4630      	mov	r0, r6
    type = ch;
   1045a:	f89d 9001 	ldrb.w	r9, [sp, #1]
    if ((ret = bb_getUInt8(&reply->data, &reply->invokeId)) != 0)
   1045e:	f7fd fbfe 	bl	dc5e <bb_getUInt8>
   10462:	4604      	mov	r4, r0
   10464:	b9e8      	cbnz	r0, 104a2 <dlms_handleGetResponse+0x68>
    if ((ret = dlms_verifyInvokeId(settings, reply)) != 0)
   10466:	4629      	mov	r1, r5
   10468:	4638      	mov	r0, r7
   1046a:	f7ff ffd6 	bl	1041a <dlms_verifyInvokeId>
   1046e:	4604      	mov	r4, r0
   10470:	b9b8      	cbnz	r0, 104a2 <dlms_handleGetResponse+0x68>
    if (type == 1)
   10472:	f1b9 0f01 	cmp.w	r9, #1
    type = ch;
   10476:	fa0f f389 	sxth.w	r3, r9
    if (type == 1)
   1047a:	d11c      	bne.n	104b6 <dlms_handleGetResponse+0x7c>
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   1047c:	f10d 0101 	add.w	r1, sp, #1
   10480:	4630      	mov	r0, r6
   10482:	f7fd fbec 	bl	dc5e <bb_getUInt8>
   10486:	4604      	mov	r4, r0
   10488:	b958      	cbnz	r0, 104a2 <dlms_handleGetResponse+0x68>
        if (ch != 0)
   1048a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1048e:	b163      	cbz	r3, 104aa <dlms_handleGetResponse+0x70>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10490:	f10d 0101 	add.w	r1, sp, #1
   10494:	4630      	mov	r0, r6
   10496:	f7fd fbe2 	bl	dc5e <bb_getUInt8>
   1049a:	4604      	mov	r4, r0
   1049c:	b908      	cbnz	r0, 104a2 <dlms_handleGetResponse+0x68>
            return ch;
   1049e:	f89d 4001 	ldrb.w	r4, [sp, #1]
}
   104a2:	4620      	mov	r0, r4
   104a4:	b003      	add	sp, #12
   104a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = dlms_getDataFromBlock(&reply->data, 0);
   104aa:	4601      	mov	r1, r0
   104ac:	4630      	mov	r0, r6
   104ae:	f7ff ffa2 	bl	103f6 <dlms_getDataFromBlock>
   104b2:	4604      	mov	r4, r0
   104b4:	e7f5      	b.n	104a2 <dlms_handleGetResponse+0x68>
    else if (type == 2)
   104b6:	2b02      	cmp	r3, #2
   104b8:	d15d      	bne.n	10576 <dlms_handleGetResponse+0x13c>
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   104ba:	f10d 0101 	add.w	r1, sp, #1
   104be:	4630      	mov	r0, r6
   104c0:	f7fd fbcd 	bl	dc5e <bb_getUInt8>
   104c4:	4604      	mov	r4, r0
   104c6:	2800      	cmp	r0, #0
   104c8:	d1eb      	bne.n	104a2 <dlms_handleGetResponse+0x68>
        if (ch == 0)
   104ca:	f89d 2001 	ldrb.w	r2, [sp, #1]
   104ce:	782b      	ldrb	r3, [r5, #0]
   104d0:	2a00      	cmp	r2, #0
   104d2:	d142      	bne.n	1055a <dlms_handleGetResponse+0x120>
            reply->moreData = (DLMS_DATA_REQUEST_TYPES)(reply->moreData | DLMS_DATA_REQUEST_TYPES_BLOCK);
   104d4:	f043 0302 	orr.w	r3, r3, #2
   104d8:	702b      	strb	r3, [r5, #0]
        if ((ret = bb_getUInt32(&reply->data, &number)) != 0)
   104da:	a901      	add	r1, sp, #4
   104dc:	4630      	mov	r0, r6
   104de:	f7fd fbfc 	bl	dcda <bb_getUInt32>
   104e2:	4604      	mov	r4, r0
   104e4:	2800      	cmp	r0, #0
   104e6:	d1dc      	bne.n	104a2 <dlms_handleGetResponse+0x68>
        if (number != 1 && settings->blockIndex == 1)
   104e8:	9b01      	ldr	r3, [sp, #4]
   104ea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   104ee:	2b01      	cmp	r3, #1
   104f0:	d036      	beq.n	10560 <dlms_handleGetResponse+0x126>
   104f2:	2a01      	cmp	r2, #1
   104f4:	d134      	bne.n	10560 <dlms_handleGetResponse+0x126>
            settings->blockIndex = number;
   104f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   104fa:	f10d 0101 	add.w	r1, sp, #1
   104fe:	4630      	mov	r0, r6
   10500:	f7fd fbad 	bl	dc5e <bb_getUInt8>
   10504:	4604      	mov	r4, r0
   10506:	2800      	cmp	r0, #0
   10508:	d1cb      	bne.n	104a2 <dlms_handleGetResponse+0x68>
        if (ch != 0)
   1050a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1050e:	2b00      	cmp	r3, #0
   10510:	d1be      	bne.n	10490 <dlms_handleGetResponse+0x56>
            if ((ret = hlp_getObjectCount2(&reply->data, &count)) != 0)
   10512:	f10d 0102 	add.w	r1, sp, #2
   10516:	4630      	mov	r0, r6
   10518:	f00a fafc 	bl	1ab14 <hlp_getObjectCount2>
   1051c:	4604      	mov	r4, r0
   1051e:	2800      	cmp	r0, #0
   10520:	d1bf      	bne.n	104a2 <dlms_handleGetResponse+0x68>
            if ((reply->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   10522:	782b      	ldrb	r3, [r5, #0]
   10524:	07db      	lsls	r3, r3, #31
   10526:	d407      	bmi.n	10538 <dlms_handleGetResponse+0xfe>
                if (count > (uint16_t)(bb_available(&reply->data)))
   10528:	4630      	mov	r0, r6
   1052a:	f7fd f9b2 	bl	d892 <bb_available>
   1052e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10532:	4283      	cmp	r3, r0
   10534:	d826      	bhi.n	10584 <dlms_handleGetResponse+0x14a>
                reply->command = DLMS_COMMAND_NONE;
   10536:	706c      	strb	r4, [r5, #1]
            if (count == 0)
   10538:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1053c:	b9a3      	cbnz	r3, 10568 <dlms_handleGetResponse+0x12e>
                reply->data.size = index;
   1053e:	f8a5 800a 	strh.w	r8, [r5, #10]
            if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
   10542:	782b      	ldrb	r3, [r5, #0]
   10544:	2b00      	cmp	r3, #0
   10546:	d1ac      	bne.n	104a2 <dlms_handleGetResponse+0x68>
                if (!reply->peek)
   10548:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1054c:	2b00      	cmp	r3, #0
   1054e:	d1a8      	bne.n	104a2 <dlms_handleGetResponse+0x68>
                    reply->data.position = 0;
   10550:	81ab      	strh	r3, [r5, #12]
                    resetBlockIndex(settings);
   10552:	4638      	mov	r0, r7
   10554:	f000 fcd0 	bl	10ef8 <resetBlockIndex>
   10558:	e7a3      	b.n	104a2 <dlms_handleGetResponse+0x68>
                (DLMS_DATA_REQUEST_TYPES)(reply->moreData & ~DLMS_DATA_REQUEST_TYPES_BLOCK);
   1055a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1055e:	e7bb      	b.n	104d8 <dlms_handleGetResponse+0x9e>
        else if (number != settings->blockIndex)
   10560:	4293      	cmp	r3, r2
   10562:	d0ca      	beq.n	104fa <dlms_handleGetResponse+0xc0>
            return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
   10564:	2413      	movs	r4, #19
   10566:	e79c      	b.n	104a2 <dlms_handleGetResponse+0x68>
                if ((ret = dlms_getDataFromBlock(&reply->data, index)) != 0)
   10568:	4641      	mov	r1, r8
   1056a:	4630      	mov	r0, r6
   1056c:	f7ff ff43 	bl	103f6 <dlms_getDataFromBlock>
   10570:	2800      	cmp	r0, #0
   10572:	d0e6      	beq.n	10542 <dlms_handleGetResponse+0x108>
   10574:	e79d      	b.n	104b2 <dlms_handleGetResponse+0x78>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   10576:	2b03      	cmp	r3, #3
   10578:	bf0c      	ite	eq
   1057a:	f04f 34ff 	moveq.w	r4, #4294967295
   1057e:	f44f 7481 	movne.w	r4, #258	; 0x102
   10582:	e78e      	b.n	104a2 <dlms_handleGetResponse+0x68>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   10584:	f44f 7482 	mov.w	r4, #260	; 0x104
   10588:	e78b      	b.n	104a2 <dlms_handleGetResponse+0x68>

0001058a <handleWriteResponse>:
{
   1058a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (hlp_getObjectCount2(&data->data, &count) != 0)
   1058c:	1d05      	adds	r5, r0, #4
   1058e:	f10d 0106 	add.w	r1, sp, #6
   10592:	4628      	mov	r0, r5
   10594:	f00a fabe 	bl	1ab14 <hlp_getObjectCount2>
   10598:	4604      	mov	r4, r0
   1059a:	b9d8      	cbnz	r0, 105d4 <handleWriteResponse+0x4a>
    for (pos = 0; pos != count; ++pos)
   1059c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   105a0:	b2a3      	uxth	r3, r4
   105a2:	429a      	cmp	r2, r3
   105a4:	d101      	bne.n	105aa <handleWriteResponse+0x20>
    return DLMS_ERROR_CODE_OK;
   105a6:	2000      	movs	r0, #0
   105a8:	e012      	b.n	105d0 <handleWriteResponse+0x46>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   105aa:	f10d 0105 	add.w	r1, sp, #5
   105ae:	4628      	mov	r0, r5
   105b0:	f7fd fb55 	bl	dc5e <bb_getUInt8>
   105b4:	b960      	cbnz	r0, 105d0 <handleWriteResponse+0x46>
        if (ch != 0)
   105b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   105ba:	3401      	adds	r4, #1
   105bc:	2b00      	cmp	r3, #0
   105be:	d0ed      	beq.n	1059c <handleWriteResponse+0x12>
            if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   105c0:	f10d 0105 	add.w	r1, sp, #5
   105c4:	4628      	mov	r0, r5
   105c6:	f7fd fb4a 	bl	dc5e <bb_getUInt8>
   105ca:	b908      	cbnz	r0, 105d0 <handleWriteResponse+0x46>
            return ch;
   105cc:	f89d 0005 	ldrb.w	r0, [sp, #5]
}
   105d0:	b003      	add	sp, #12
   105d2:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   105d4:	f44f 7082 	mov.w	r0, #260	; 0x104
   105d8:	e7fa      	b.n	105d0 <handleWriteResponse+0x46>

000105da <dlms_getValueFromData>:
{
   105da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   105de:	b089      	sub	sp, #36	; 0x24
   105e0:	460c      	mov	r4, r1
   105e2:	4680      	mov	r8, r0
    var_init(&value);
   105e4:	ad04      	add	r5, sp, #16
    di_init(&info);
   105e6:	a802      	add	r0, sp, #8
   105e8:	f7fe fa0e 	bl	ea08 <di_init>
    var_init(&value);
   105ec:	4628      	mov	r0, r5
   105ee:	f00a fe1e 	bl	1b22e <var_init>
    if (reply->dataValue.vt == DLMS_DATA_TYPE_ARRAY)
   105f2:	7e23      	ldrb	r3, [r4, #24]
   105f4:	2b01      	cmp	r3, #1
   105f6:	d107      	bne.n	10608 <dlms_getValueFromData+0x2e>
        info.type = DLMS_DATA_TYPE_ARRAY;
   105f8:	f88d 300c 	strb.w	r3, [sp, #12]
        info.count = (uint16_t)reply->totalCount;
   105fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   105fe:	f8ad 300a 	strh.w	r3, [sp, #10]
        info.index = (uint16_t)reply->data.size;
   10602:	8963      	ldrh	r3, [r4, #10]
   10604:	f8ad 3008 	strh.w	r3, [sp, #8]
    reply->data.position = reply->readPosition;
   10608:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    index = (uint16_t)(reply->data.position);
   1060a:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    reply->data.position = reply->readPosition;
   1060e:	81a3      	strh	r3, [r4, #12]
    if ((ret = dlms_getData(&reply->data, &info, &value)) != 0)
   10610:	462a      	mov	r2, r5
   10612:	a902      	add	r1, sp, #8
   10614:	1d20      	adds	r0, r4, #4
   10616:	f7fe fe87 	bl	f328 <dlms_getData>
   1061a:	4606      	mov	r6, r0
   1061c:	b130      	cbz	r0, 1062c <dlms_getValueFromData+0x52>
        var_clear(&value);
   1061e:	4628      	mov	r0, r5
   10620:	f00a ff61 	bl	1b4e6 <var_clear>
}
   10624:	4630      	mov	r0, r6
   10626:	b009      	add	sp, #36	; 0x24
   10628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value.vt != DLMS_DATA_TYPE_NONE)
   1062c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   10630:	2b00      	cmp	r3, #0
   10632:	d036      	beq.n	106a2 <dlms_getValueFromData+0xc8>
        if (value.vt != DLMS_DATA_TYPE_ARRAY && value.vt != DLMS_DATA_TYPE_STRUCTURE)
   10634:	3b01      	subs	r3, #1
   10636:	2b01      	cmp	r3, #1
   10638:	d91f      	bls.n	1067a <dlms_getValueFromData+0xa0>
            reply->dataType = info.type;
   1063a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1063e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                reply->dataValue = value;
   10642:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10646:	f104 0718 	add.w	r7, r4, #24
   1064a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        reply->readPosition = reply->data.position;
   1064e:	89a3      	ldrh	r3, [r4, #12]
   10650:	8563      	strh	r3, [r4, #42]	; 0x2a
        reply->totalCount = info.count;
   10652:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   10656:	8523      	strh	r3, [r4, #40]	; 0x28
    if (reply->command != DLMS_COMMAND_DATA_NOTIFICATION
   10658:	7863      	ldrb	r3, [r4, #1]
    reply->data.position = index;
   1065a:	f8a4 900c 	strh.w	r9, [r4, #12]
    if (reply->command != DLMS_COMMAND_DATA_NOTIFICATION
   1065e:	2b0f      	cmp	r3, #15
   10660:	d0e0      	beq.n	10624 <dlms_getValueFromData+0x4a>
        && info.complete && reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
   10662:	f89d 300d 	ldrb.w	r3, [sp, #13]
   10666:	2b00      	cmp	r3, #0
   10668:	d0dc      	beq.n	10624 <dlms_getValueFromData+0x4a>
   1066a:	7825      	ldrb	r5, [r4, #0]
   1066c:	2d00      	cmp	r5, #0
   1066e:	d1d9      	bne.n	10624 <dlms_getValueFromData+0x4a>
        resetBlockIndex(settings);
   10670:	4640      	mov	r0, r8
   10672:	f000 fc41 	bl	10ef8 <resetBlockIndex>
        reply->data.position = 0;
   10676:	81a5      	strh	r5, [r4, #12]
   10678:	e7d4      	b.n	10624 <dlms_getValueFromData+0x4a>
            if (reply->dataValue.vt == DLMS_DATA_TYPE_NONE)
   1067a:	7e23      	ldrb	r3, [r4, #24]
   1067c:	2b00      	cmp	r3, #0
   1067e:	d0e0      	beq.n	10642 <dlms_getValueFromData+0x68>
                for (pos = 0; pos != value.Arr->size; ++pos)
   10680:	4605      	mov	r5, r0
   10682:	e009      	b.n	10698 <dlms_getValueFromData+0xbe>
                    if ((ret = va_getByIndex(value.Arr, pos, &tmp)) != 0)
   10684:	aa01      	add	r2, sp, #4
   10686:	4629      	mov	r1, r5
   10688:	f00a ffab 	bl	1b5e2 <va_getByIndex>
   1068c:	b998      	cbnz	r0, 106b6 <dlms_getValueFromData+0xdc>
                    va_push(reply->dataValue.Arr, tmp);
   1068e:	9901      	ldr	r1, [sp, #4]
   10690:	6a20      	ldr	r0, [r4, #32]
   10692:	f00a feda 	bl	1b44a <va_push>
                for (pos = 0; pos != value.Arr->size; ++pos)
   10696:	3501      	adds	r5, #1
   10698:	9806      	ldr	r0, [sp, #24]
   1069a:	88c3      	ldrh	r3, [r0, #6]
   1069c:	42ab      	cmp	r3, r5
   1069e:	d1f1      	bne.n	10684 <dlms_getValueFromData+0xaa>
   106a0:	e7d5      	b.n	1064e <dlms_getValueFromData+0x74>
    else if (info.complete
   106a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   106a6:	2b00      	cmp	r3, #0
   106a8:	d0d6      	beq.n	10658 <dlms_getValueFromData+0x7e>
        && reply->command == DLMS_COMMAND_DATA_NOTIFICATION)
   106aa:	7863      	ldrb	r3, [r4, #1]
   106ac:	2b0f      	cmp	r3, #15
        reply->readPosition = reply->data.position;
   106ae:	bf04      	itt	eq
   106b0:	89a3      	ldrheq	r3, [r4, #12]
   106b2:	8563      	strheq	r3, [r4, #42]	; 0x2a
   106b4:	e7d0      	b.n	10658 <dlms_getValueFromData+0x7e>
                    if ((ret = va_getByIndex(value.Arr, pos, &tmp)) != 0)
   106b6:	4606      	mov	r6, r0
   106b8:	e7b4      	b.n	10624 <dlms_getValueFromData+0x4a>

000106ba <dlms_readResponseDataBlockResult>:
{
   106ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
   106be:	1d0f      	adds	r7, r1, #4
{
   106c0:	4680      	mov	r8, r0
   106c2:	460e      	mov	r6, r1
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
   106c4:	4638      	mov	r0, r7
   106c6:	f10d 0103 	add.w	r1, sp, #3
{
   106ca:	4691      	mov	r9, r2
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
   106cc:	f7fd fac7 	bl	dc5e <bb_getUInt8>
   106d0:	4604      	mov	r4, r0
   106d2:	bb30      	cbnz	r0, 10722 <dlms_readResponseDataBlockResult+0x68>
    if ((ret = bb_getUInt16(&reply->data, &number)) != 0)
   106d4:	a901      	add	r1, sp, #4
   106d6:	4638      	mov	r0, r7
   106d8:	f7fd faea 	bl	dcb0 <bb_getUInt16>
   106dc:	4604      	mov	r4, r0
   106de:	bb00      	cbnz	r0, 10722 <dlms_readResponseDataBlockResult+0x68>
    if (hlp_getObjectCount2(&reply->data, &blockLength) != 0)
   106e0:	f10d 0106 	add.w	r1, sp, #6
   106e4:	4638      	mov	r0, r7
   106e6:	f00a fa15 	bl	1ab14 <hlp_getObjectCount2>
   106ea:	4604      	mov	r4, r0
   106ec:	bbc0      	cbnz	r0, 10760 <dlms_readResponseDataBlockResult+0xa6>
    if (!lastBlock)
   106ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
   106f2:	7833      	ldrb	r3, [r6, #0]
   106f4:	b9ca      	cbnz	r2, 1072a <dlms_readResponseDataBlockResult+0x70>
        reply->moreData |= DLMS_DATA_REQUEST_TYPES_BLOCK;
   106f6:	f043 0302 	orr.w	r3, r3, #2
    if (number != 1 && settings->blockIndex == 1)
   106fa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   106fe:	7033      	strb	r3, [r6, #0]
   10700:	2a01      	cmp	r2, #1
   10702:	f8d8 10a0 	ldr.w	r1, [r8, #160]	; 0xa0
   10706:	d013      	beq.n	10730 <dlms_readResponseDataBlockResult+0x76>
   10708:	2901      	cmp	r1, #1
   1070a:	d111      	bne.n	10730 <dlms_readResponseDataBlockResult+0x76>
        settings->blockIndex = number;
   1070c:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
    if ((reply->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
   10710:	f013 0501 	ands.w	r5, r3, #1
   10714:	d010      	beq.n	10738 <dlms_readResponseDataBlockResult+0x7e>
        dlms_getDataFromBlock(&reply->data, index);
   10716:	4649      	mov	r1, r9
   10718:	4638      	mov	r0, r7
   1071a:	f7ff fe6c 	bl	103f6 <dlms_getDataFromBlock>
        return DLMS_ERROR_CODE_FALSE;
   1071e:	f04f 34ff 	mov.w	r4, #4294967295
}
   10722:	4620      	mov	r0, r4
   10724:	b003      	add	sp, #12
   10726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        reply->moreData &= ~DLMS_DATA_REQUEST_TYPES_BLOCK;
   1072a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1072e:	e7e4      	b.n	106fa <dlms_readResponseDataBlockResult+0x40>
    if (number != settings->blockIndex)
   10730:	428a      	cmp	r2, r1
   10732:	d0ed      	beq.n	10710 <dlms_readResponseDataBlockResult+0x56>
        return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
   10734:	2413      	movs	r4, #19
   10736:	e7f4      	b.n	10722 <dlms_readResponseDataBlockResult+0x68>
    if (blockLength != bb_available(&reply->data))
   10738:	4638      	mov	r0, r7
   1073a:	f7fd f8aa 	bl	d892 <bb_available>
   1073e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10742:	4283      	cmp	r3, r0
   10744:	d10f      	bne.n	10766 <dlms_readResponseDataBlockResult+0xac>
    reply->command = DLMS_COMMAND_NONE;
   10746:	7075      	strb	r5, [r6, #1]
    dlms_getDataFromBlock(&reply->data, index);
   10748:	4649      	mov	r1, r9
   1074a:	4638      	mov	r0, r7
   1074c:	f7ff fe53 	bl	103f6 <dlms_getDataFromBlock>
    if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
   10750:	7833      	ldrb	r3, [r6, #0]
    reply->totalCount = 0;
   10752:	8535      	strh	r5, [r6, #40]	; 0x28
    if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
   10754:	2b00      	cmp	r3, #0
   10756:	d1e4      	bne.n	10722 <dlms_readResponseDataBlockResult+0x68>
        resetBlockIndex(settings);
   10758:	4640      	mov	r0, r8
   1075a:	f000 fbcd 	bl	10ef8 <resetBlockIndex>
   1075e:	e7e0      	b.n	10722 <dlms_readResponseDataBlockResult+0x68>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   10760:	f44f 7482 	mov.w	r4, #260	; 0x104
   10764:	e7dd      	b.n	10722 <dlms_readResponseDataBlockResult+0x68>
        return DLMS_ERROR_CODE_DATA_BLOCK_UNAVAILABLE;
   10766:	240e      	movs	r4, #14
   10768:	e7db      	b.n	10722 <dlms_readResponseDataBlockResult+0x68>

0001076a <dlms_handleReadResponse>:
{
   1076a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t pos, cnt = reply->totalCount;
   1076e:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
   10770:	f8ad 3006 	strh.w	r3, [sp, #6]
{
   10774:	4605      	mov	r5, r0
   10776:	4689      	mov	r9, r1
   10778:	4617      	mov	r7, r2
    unsigned char first = reply->totalCount == 0 || reply->commandType == DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT;
   1077a:	b113      	cbz	r3, 10782 <dlms_handleReadResponse+0x18>
    if (first)
   1077c:	78cb      	ldrb	r3, [r1, #3]
   1077e:	2b02      	cmp	r3, #2
   10780:	d120      	bne.n	107c4 <dlms_handleReadResponse+0x5a>
        if (hlp_getObjectCount2(&reply->data, &cnt) != 0)
   10782:	f10d 0106 	add.w	r1, sp, #6
   10786:	f109 0004 	add.w	r0, r9, #4
   1078a:	f00a f9c3 	bl	1ab14 <hlp_getObjectCount2>
   1078e:	2800      	cmp	r0, #0
   10790:	f040 809d 	bne.w	108ce <dlms_handleReadResponse+0x164>
        reply->totalCount = cnt;
   10794:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10798:	f8a9 3028 	strh.w	r3, [r9, #40]	; 0x28
   1079c:	2401      	movs	r4, #1
    if (cnt != 1)
   1079e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   107a2:	2a01      	cmp	r2, #1
   107a4:	d014      	beq.n	107d0 <dlms_handleReadResponse+0x66>
        if (reply->moreData != DLMS_DATA_REQUEST_TYPES_NONE)
   107a6:	f899 2000 	ldrb.w	r2, [r9]
   107aa:	b16a      	cbz	r2, 107c8 <dlms_handleReadResponse+0x5e>
            if ((ret = dlms_getDataFromBlock(&reply->data, 0)) == 0)
   107ac:	2100      	movs	r1, #0
   107ae:	f109 0004 	add.w	r0, r9, #4
   107b2:	f7ff fe20 	bl	103f6 <dlms_getDataFromBlock>
                ret = DLMS_ERROR_CODE_FALSE;
   107b6:	2800      	cmp	r0, #0
   107b8:	bf08      	it	eq
   107ba:	f04f 30ff 	moveq.w	r0, #4294967295
}
   107be:	b004      	add	sp, #16
   107c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   107c4:	2400      	movs	r4, #0
   107c6:	e7ea      	b.n	1079e <dlms_handleReadResponse+0x34>
        if (!first)
   107c8:	b90c      	cbnz	r4, 107ce <dlms_handleReadResponse+0x64>
            reply->data.position = 0;
   107ca:	f8a9 400c 	strh.w	r4, [r9, #12]
            first = 1;
   107ce:	2401      	movs	r4, #1
    va_init(&values);
   107d0:	a802      	add	r0, sp, #8
   107d2:	f00a fe0e 	bl	1b3f2 <va_init>
    for (pos = 0; pos != cnt; ++pos)
   107d6:	2600      	movs	r6, #0
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   107d8:	f109 0804 	add.w	r8, r9, #4
    for (pos = 0; pos != cnt; ++pos)
   107dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   107e0:	b2b3      	uxth	r3, r6
   107e2:	429a      	cmp	r2, r3
   107e4:	d115      	bne.n	10812 <dlms_handleReadResponse+0xa8>
    if (values.size != 0)
   107e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   107ea:	b15b      	cbz	r3, 10804 <dlms_handleReadResponse+0x9a>
        reply->dataValue.Arr = gxmalloc(sizeof(variantArray));
   107ec:	2008      	movs	r0, #8
   107ee:	f7fc f839 	bl	c864 <malloc>
   107f2:	f8c9 0020 	str.w	r0, [r9, #32]
        va_init(reply->dataValue.Arr);
   107f6:	f00a fdfc 	bl	1b3f2 <va_init>
        va_attach2(reply->dataValue.Arr, &values);
   107fa:	f8d9 0020 	ldr.w	r0, [r9, #32]
   107fe:	a902      	add	r1, sp, #8
   10800:	f00a fee5 	bl	1b5ce <va_attach2>
    if (cnt != 1)
   10804:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   10808:	3801      	subs	r0, #1
   1080a:	bf18      	it	ne
   1080c:	f04f 30ff 	movne.w	r0, #4294967295
   10810:	e7d5      	b.n	107be <dlms_handleReadResponse+0x54>
        if (first)
   10812:	b184      	cbz	r4, 10836 <dlms_handleReadResponse+0xcc>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10814:	f10d 0103 	add.w	r1, sp, #3
   10818:	4640      	mov	r0, r8
   1081a:	f7fd fa20 	bl	dc5e <bb_getUInt8>
   1081e:	2800      	cmp	r0, #0
   10820:	d1cd      	bne.n	107be <dlms_handleReadResponse+0x54>
            reply->commandType = ch;
   10822:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10826:	f889 3003 	strb.w	r3, [r9, #3]
        switch (type)
   1082a:	2b03      	cmp	r3, #3
   1082c:	d852      	bhi.n	108d4 <dlms_handleReadResponse+0x16a>
   1082e:	e8df f003 	tbb	[pc, r3]
   10832:	2505      	.short	0x2505
   10834:	3830      	.short	0x3830
            type = (DLMS_SINGLE_READ_RESPONSE)reply->commandType;
   10836:	f899 3003 	ldrb.w	r3, [r9, #3]
   1083a:	e7f6      	b.n	1082a <dlms_handleReadResponse+0xc0>
            if (cnt == 1)
   1083c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10840:	2b01      	cmp	r3, #1
   10842:	d105      	bne.n	10850 <dlms_handleReadResponse+0xe6>
                ret = dlms_getDataFromBlock(&reply->data, 0);
   10844:	2100      	movs	r1, #0
   10846:	4640      	mov	r0, r8
   10848:	f7ff fdd5 	bl	103f6 <dlms_getDataFromBlock>
    for (pos = 0; pos != cnt; ++pos)
   1084c:	3601      	adds	r6, #1
   1084e:	e7c5      	b.n	107dc <dlms_handleReadResponse+0x72>
                reply->readPosition = reply->data.position;
   10850:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   10854:	f8a9 302a 	strh.w	r3, [r9, #42]	; 0x2a
                dlms_getValueFromData(settings, reply);
   10858:	4649      	mov	r1, r9
   1085a:	4628      	mov	r0, r5
   1085c:	f7ff febd 	bl	105da <dlms_getValueFromData>
                va_push(&values, &reply->dataValue);
   10860:	f109 0a18 	add.w	sl, r9, #24
                reply->data.position = reply->readPosition;
   10864:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   10868:	f8a9 300c 	strh.w	r3, [r9, #12]
                va_push(&values, &reply->dataValue);
   1086c:	4651      	mov	r1, sl
   1086e:	a802      	add	r0, sp, #8
   10870:	f00a fdeb 	bl	1b44a <va_push>
                var_clear(&reply->dataValue);
   10874:	4650      	mov	r0, sl
   10876:	f00a fe36 	bl	1b4e6 <var_clear>
   1087a:	e7e7      	b.n	1084c <dlms_handleReadResponse+0xe2>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   1087c:	f10d 0103 	add.w	r1, sp, #3
   10880:	f109 0004 	add.w	r0, r9, #4
   10884:	f7fd f9eb 	bl	dc5e <bb_getUInt8>
   10888:	2800      	cmp	r0, #0
   1088a:	d198      	bne.n	107be <dlms_handleReadResponse+0x54>
            return ch;
   1088c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   10890:	e795      	b.n	107be <dlms_handleReadResponse+0x54>
            if ((ret = dlms_readResponseDataBlockResult(settings, reply, index)) != 0)
   10892:	463a      	mov	r2, r7
   10894:	4649      	mov	r1, r9
   10896:	4628      	mov	r0, r5
   10898:	f7ff ff0f 	bl	106ba <dlms_readResponseDataBlockResult>
   1089c:	2800      	cmp	r0, #0
   1089e:	d0d5      	beq.n	1084c <dlms_handleReadResponse+0xe2>
   108a0:	e78d      	b.n	107be <dlms_handleReadResponse+0x54>
            if ((ret = bb_getUInt16(&reply->data, &number)) != 0)
   108a2:	a901      	add	r1, sp, #4
   108a4:	4640      	mov	r0, r8
   108a6:	f7fd fa03 	bl	dcb0 <bb_getUInt16>
   108aa:	2800      	cmp	r0, #0
   108ac:	d187      	bne.n	107be <dlms_handleReadResponse+0x54>
            if (number != settings->blockIndex)
   108ae:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
   108b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   108b6:	4293      	cmp	r3, r2
   108b8:	d10f      	bne.n	108da <dlms_handleReadResponse+0x170>
            ++settings->blockIndex;
   108ba:	3301      	adds	r3, #1
   108bc:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
            reply->moreData |= DLMS_DATA_REQUEST_TYPES_BLOCK;
   108c0:	f899 3000 	ldrb.w	r3, [r9]
   108c4:	f043 0302 	orr.w	r3, r3, #2
   108c8:	f889 3000 	strb.w	r3, [r9]
            break;
   108cc:	e7be      	b.n	1084c <dlms_handleReadResponse+0xe2>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
   108ce:	f44f 7082 	mov.w	r0, #260	; 0x104
   108d2:	e774      	b.n	107be <dlms_handleReadResponse+0x54>
    for (pos = 0; pos != cnt; ++pos)
   108d4:	f240 100f 	movw	r0, #271	; 0x10f
   108d8:	e771      	b.n	107be <dlms_handleReadResponse+0x54>
                return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
   108da:	2013      	movs	r0, #19
   108dc:	e76f      	b.n	107be <dlms_handleReadResponse+0x54>

000108de <dlms_handleMethodResponse>:
{
   108de:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
   108e0:	1d0c      	adds	r4, r1, #4
{
   108e2:	4606      	mov	r6, r0
   108e4:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
   108e6:	4620      	mov	r0, r4
   108e8:	f10d 0107 	add.w	r1, sp, #7
   108ec:	f7fd f9b7 	bl	dc5e <bb_getUInt8>
   108f0:	b9c0      	cbnz	r0, 10924 <dlms_handleMethodResponse+0x46>
    if ((ret = bb_getUInt8(&data->data, &data->invokeId)) != 0)
   108f2:	f105 0139 	add.w	r1, r5, #57	; 0x39
   108f6:	4620      	mov	r0, r4
   108f8:	f7fd f9b1 	bl	dc5e <bb_getUInt8>
   108fc:	b990      	cbnz	r0, 10924 <dlms_handleMethodResponse+0x46>
    if ((ret = dlms_verifyInvokeId(settings, data)) != 0)
   108fe:	4629      	mov	r1, r5
   10900:	4630      	mov	r0, r6
   10902:	f7ff fd8a 	bl	1041a <dlms_verifyInvokeId>
   10906:	b968      	cbnz	r0, 10924 <dlms_handleMethodResponse+0x46>
    if (type == 1)
   10908:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1090c:	2b01      	cmp	r3, #1
   1090e:	d135      	bne.n	1097c <dlms_handleMethodResponse+0x9e>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   10910:	f10d 0106 	add.w	r1, sp, #6
   10914:	4620      	mov	r0, r4
   10916:	f7fd f9a2 	bl	dc5e <bb_getUInt8>
   1091a:	b918      	cbnz	r0, 10924 <dlms_handleMethodResponse+0x46>
        if (ch != 0)
   1091c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10920:	b113      	cbz	r3, 10928 <dlms_handleMethodResponse+0x4a>
            return ch;
   10922:	4618      	mov	r0, r3
}
   10924:	b002      	add	sp, #8
   10926:	bd70      	pop	{r4, r5, r6, pc}
        if (data->data.position < data->data.size)
   10928:	89aa      	ldrh	r2, [r5, #12]
   1092a:	896b      	ldrh	r3, [r5, #10]
   1092c:	429a      	cmp	r2, r3
   1092e:	d2f9      	bcs.n	10924 <dlms_handleMethodResponse+0x46>
            if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   10930:	f10d 0106 	add.w	r1, sp, #6
   10934:	4620      	mov	r0, r4
   10936:	f7fd f992 	bl	dc5e <bb_getUInt8>
   1093a:	2800      	cmp	r0, #0
   1093c:	d1f2      	bne.n	10924 <dlms_handleMethodResponse+0x46>
            if (ch == 0)
   1093e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10942:	b923      	cbnz	r3, 1094e <dlms_handleMethodResponse+0x70>
                return dlms_getDataFromBlock(&data->data, 0);
   10944:	4601      	mov	r1, r0
   10946:	4620      	mov	r0, r4
   10948:	f7ff fd55 	bl	103f6 <dlms_getDataFromBlock>
   1094c:	e7ea      	b.n	10924 <dlms_handleMethodResponse+0x46>
            else if (ch == 1) //Data-Access-Result
   1094e:	2b01      	cmp	r3, #1
   10950:	d117      	bne.n	10982 <dlms_handleMethodResponse+0xa4>
                if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   10952:	f10d 0106 	add.w	r1, sp, #6
   10956:	4620      	mov	r0, r4
   10958:	f7fd f981 	bl	dc5e <bb_getUInt8>
   1095c:	2800      	cmp	r0, #0
   1095e:	d1e1      	bne.n	10924 <dlms_handleMethodResponse+0x46>
                if (ch != 0)
   10960:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10964:	2b00      	cmp	r3, #0
   10966:	d0ed      	beq.n	10944 <dlms_handleMethodResponse+0x66>
                    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   10968:	f10d 0106 	add.w	r1, sp, #6
   1096c:	4620      	mov	r0, r4
   1096e:	f7fd f976 	bl	dc5e <bb_getUInt8>
   10972:	2800      	cmp	r0, #0
   10974:	d1d6      	bne.n	10924 <dlms_handleMethodResponse+0x46>
                    return ch;
   10976:	f89d 0006 	ldrb.w	r0, [sp, #6]
   1097a:	e7d3      	b.n	10924 <dlms_handleMethodResponse+0x46>
        return DLMS_ERROR_CODE_INVALID_COMMAND;
   1097c:	f44f 7080 	mov.w	r0, #256	; 0x100
   10980:	e7d0      	b.n	10924 <dlms_handleMethodResponse+0x46>
                return DLMS_ERROR_CODE_INVALID_TAG;
   10982:	f240 100f 	movw	r0, #271	; 0x10f
   10986:	e7cd      	b.n	10924 <dlms_handleMethodResponse+0x46>

00010988 <dlms_handleSetResponse>:
{
   10988:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
   1098a:	1d0d      	adds	r5, r1, #4
{
   1098c:	4606      	mov	r6, r0
   1098e:	460c      	mov	r4, r1
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
   10990:	4628      	mov	r0, r5
   10992:	f10d 0103 	add.w	r1, sp, #3
   10996:	f7fd f962 	bl	dc5e <bb_getUInt8>
   1099a:	b9c0      	cbnz	r0, 109ce <dlms_handleSetResponse+0x46>
    if ((ret = bb_getUInt8(&data->data, &data->invokeId)) != 0)
   1099c:	f104 0139 	add.w	r1, r4, #57	; 0x39
   109a0:	4628      	mov	r0, r5
   109a2:	f7fd f95c 	bl	dc5e <bb_getUInt8>
   109a6:	b990      	cbnz	r0, 109ce <dlms_handleSetResponse+0x46>
    if ((ret = dlms_verifyInvokeId(settings, data)) != 0)
   109a8:	4621      	mov	r1, r4
   109aa:	4630      	mov	r0, r6
   109ac:	f7ff fd35 	bl	1041a <dlms_verifyInvokeId>
   109b0:	b968      	cbnz	r0, 109ce <dlms_handleSetResponse+0x46>
    if (type == DLMS_SET_RESPONSE_TYPE_NORMAL)
   109b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   109b6:	2b01      	cmp	r3, #1
   109b8:	d10b      	bne.n	109d2 <dlms_handleSetResponse+0x4a>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   109ba:	a901      	add	r1, sp, #4
   109bc:	4628      	mov	r0, r5
   109be:	f7fd f94e 	bl	dc5e <bb_getUInt8>
   109c2:	b920      	cbnz	r0, 109ce <dlms_handleSetResponse+0x46>
        if (ch != 0)
   109c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
            return ch;
   109c8:	2b00      	cmp	r3, #0
   109ca:	bf18      	it	ne
   109cc:	4618      	movne	r0, r3
}
   109ce:	b002      	add	sp, #8
   109d0:	bd70      	pop	{r4, r5, r6, pc}
    else if (type == DLMS_SET_RESPONSE_TYPE_DATA_BLOCK || type == DLMS_SET_RESPONSE_TYPE_LAST_DATA_BLOCK)
   109d2:	3b02      	subs	r3, #2
   109d4:	2b01      	cmp	r3, #1
   109d6:	d804      	bhi.n	109e2 <dlms_handleSetResponse+0x5a>
        if ((ret = bb_getUInt32(&data->data, &tmp)) != 0)
   109d8:	a901      	add	r1, sp, #4
   109da:	4628      	mov	r0, r5
   109dc:	f7fd f97d 	bl	dcda <bb_getUInt32>
   109e0:	e7f5      	b.n	109ce <dlms_handleSetResponse+0x46>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   109e2:	f44f 7081 	mov.w	r0, #258	; 0x102
   109e6:	e7f2      	b.n	109ce <dlms_handleSetResponse+0x46>

000109e8 <dlms_changeType>:
{
   109e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   109ea:	4615      	mov	r5, r2
   109ec:	4606      	mov	r6, r0
    di_init(&info);
   109ee:	4668      	mov	r0, sp
{
   109f0:	460c      	mov	r4, r1
    di_init(&info);
   109f2:	f7fe f809 	bl	ea08 <di_init>
    var_clear(newValue);
   109f6:	4628      	mov	r0, r5
   109f8:	f00a fd75 	bl	1b4e6 <var_clear>
    if (value->size == 0)
   109fc:	88f3      	ldrh	r3, [r6, #6]
   109fe:	b943      	cbnz	r3, 10a12 <dlms_changeType+0x2a>
        if (type == DLMS_DATA_TYPE_STRING || type == DLMS_DATA_TYPE_STRING_UTF8)
   10a00:	2c0a      	cmp	r4, #10
   10a02:	d004      	beq.n	10a0e <dlms_changeType+0x26>
   10a04:	2c0c      	cmp	r4, #12
   10a06:	d002      	beq.n	10a0e <dlms_changeType+0x26>
        return DLMS_ERROR_CODE_OK;
   10a08:	2000      	movs	r0, #0
}
   10a0a:	b002      	add	sp, #8
   10a0c:	bd70      	pop	{r4, r5, r6, pc}
            newValue->vt = type;
   10a0e:	702c      	strb	r4, [r5, #0]
   10a10:	e7fa      	b.n	10a08 <dlms_changeType+0x20>
    if (type == DLMS_DATA_TYPE_NONE)
   10a12:	b18c      	cbz	r4, 10a38 <dlms_changeType+0x50>
    if ((ret = dlms_getData(value, &info, newValue)) != 0)
   10a14:	462a      	mov	r2, r5
   10a16:	4669      	mov	r1, sp
   10a18:	4630      	mov	r0, r6
    info.type = type;
   10a1a:	f88d 4004 	strb.w	r4, [sp, #4]
    if ((ret = dlms_getData(value, &info, newValue)) != 0)
   10a1e:	f7fe fc83 	bl	f328 <dlms_getData>
   10a22:	2800      	cmp	r0, #0
   10a24:	d1f1      	bne.n	10a0a <dlms_changeType+0x22>
    if (!info.complete)
   10a26:	f89d 3005 	ldrb.w	r3, [sp, #5]
    value->position = 0;
   10a2a:	8130      	strh	r0, [r6, #8]
    if (!info.complete)
   10a2c:	b13b      	cbz	r3, 10a3e <dlms_changeType+0x56>
    if (type == DLMS_DATA_TYPE_OCTET_STRING && newValue->vt == DLMS_DATA_TYPE_OCTET_STRING)
   10a2e:	2c09      	cmp	r4, #9
   10a30:	d1ea      	bne.n	10a08 <dlms_changeType+0x20>
   10a32:	782b      	ldrb	r3, [r5, #0]
   10a34:	2b09      	cmp	r3, #9
   10a36:	d1e7      	bne.n	10a08 <dlms_changeType+0x20>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   10a38:	f44f 7081 	mov.w	r0, #258	; 0x102
   10a3c:	e7e5      	b.n	10a0a <dlms_changeType+0x22>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   10a3e:	f44f 7082 	mov.w	r0, #260	; 0x104
   10a42:	e7e2      	b.n	10a0a <dlms_changeType+0x22>

00010a44 <dlms_changeType2>:
{
   10a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10a46:	460d      	mov	r5, r1
    if (value->byteArr != NULL)
   10a48:	6881      	ldr	r1, [r0, #8]
{
   10a4a:	4604      	mov	r4, r0
   10a4c:	4616      	mov	r6, r2
    if (value->byteArr != NULL)
   10a4e:	b149      	cbz	r1, 10a64 <dlms_changeType2+0x20>
        bb_attach(&bb, value->byteArr->data, value->byteArr->size, value->byteArr->size);
   10a50:	88cb      	ldrh	r3, [r1, #6]
   10a52:	6809      	ldr	r1, [r1, #0]
   10a54:	461a      	mov	r2, r3
   10a56:	a801      	add	r0, sp, #4
   10a58:	f7fd f8c7 	bl	dbea <bb_attach>
        bb.position = value->byteArr->position;
   10a5c:	68a3      	ldr	r3, [r4, #8]
   10a5e:	891b      	ldrh	r3, [r3, #8]
   10a60:	f8ad 300c 	strh.w	r3, [sp, #12]
    return dlms_changeType(&bb, type, newValue);
   10a64:	4632      	mov	r2, r6
   10a66:	4629      	mov	r1, r5
   10a68:	a801      	add	r0, sp, #4
   10a6a:	f7ff ffbd 	bl	109e8 <dlms_changeType>
}
   10a6e:	b004      	add	sp, #16
   10a70:	bd70      	pop	{r4, r5, r6, pc}

00010a72 <dlms_handleDataNotification>:
{
   10a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((ret = bb_getUInt32(&reply->data, &id)) != 0)
   10a76:	1d0e      	adds	r6, r1, #4
{
   10a78:	b08c      	sub	sp, #48	; 0x30
    uint16_t start = (uint16_t)(reply->data.position - 1);
   10a7a:	f8b1 800c 	ldrh.w	r8, [r1, #12]
{
   10a7e:	4607      	mov	r7, r0
   10a80:	460d      	mov	r5, r1
    if ((ret = bb_getUInt32(&reply->data, &id)) != 0)
   10a82:	4630      	mov	r0, r6
   10a84:	a901      	add	r1, sp, #4
   10a86:	f7fd f928 	bl	dcda <bb_getUInt32>
   10a8a:	4604      	mov	r4, r0
   10a8c:	bb98      	cbnz	r0, 10af6 <dlms_handleDataNotification+0x84>
    reply->time = 0;
   10a8e:	6368      	str	r0, [r5, #52]	; 0x34
    if ((ret = bb_getUInt8(&reply->data, &len)) != 0)
   10a90:	f10d 0103 	add.w	r1, sp, #3
   10a94:	4630      	mov	r0, r6
   10a96:	f7fd f8e2 	bl	dc5e <bb_getUInt8>
   10a9a:	4604      	mov	r4, r0
   10a9c:	bb58      	cbnz	r0, 10af6 <dlms_handleDataNotification+0x84>
    if (len != 0)
   10a9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10aa2:	b1db      	cbz	r3, 10adc <dlms_handleDataNotification+0x6a>
        var_init(&t);
   10aa4:	a808      	add	r0, sp, #32
   10aa6:	f00a fbc2 	bl	1b22e <var_init>
        bb_attach(&tmp, buff, 0, sizeof(buff));
   10aaa:	4622      	mov	r2, r4
   10aac:	230c      	movs	r3, #12
   10aae:	a905      	add	r1, sp, #20
   10ab0:	a802      	add	r0, sp, #8
   10ab2:	f7fd f89a 	bl	dbea <bb_attach>
        if ((ret = bb_set2(&tmp, &reply->data, reply->data.position, len)) != 0 ||
   10ab6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10aba:	89aa      	ldrh	r2, [r5, #12]
   10abc:	4631      	mov	r1, r6
   10abe:	a802      	add	r0, sp, #8
   10ac0:	f7fd f872 	bl	dba8 <bb_set2>
   10ac4:	4604      	mov	r4, r0
   10ac6:	b9b0      	cbnz	r0, 10af6 <dlms_handleDataNotification+0x84>
            (ret = dlms_changeType(&tmp, DLMS_DATA_TYPE_DATETIME, &t)) != 0)
   10ac8:	aa08      	add	r2, sp, #32
   10aca:	2119      	movs	r1, #25
   10acc:	a802      	add	r0, sp, #8
   10ace:	f7ff ff8b 	bl	109e8 <dlms_changeType>
        if ((ret = bb_set2(&tmp, &reply->data, reply->data.position, len)) != 0 ||
   10ad2:	4604      	mov	r4, r0
   10ad4:	b978      	cbnz	r0, 10af6 <dlms_handleDataNotification+0x84>
        reply->time = t.dateTime->value;
   10ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10ad8:	681b      	ldr	r3, [r3, #0]
   10ada:	636b      	str	r3, [r5, #52]	; 0x34
    uint16_t start = (uint16_t)(reply->data.position - 1);
   10adc:	f108 31ff 	add.w	r1, r8, #4294967295
    if ((ret = dlms_getDataFromBlock(&reply->data, start)) != 0)
   10ae0:	b289      	uxth	r1, r1
   10ae2:	4630      	mov	r0, r6
   10ae4:	f7ff fc87 	bl	103f6 <dlms_getDataFromBlock>
   10ae8:	4604      	mov	r4, r0
   10aea:	b920      	cbnz	r0, 10af6 <dlms_handleDataNotification+0x84>
    return dlms_getValueFromData(settings, reply);
   10aec:	4629      	mov	r1, r5
   10aee:	4638      	mov	r0, r7
   10af0:	f7ff fd73 	bl	105da <dlms_getValueFromData>
   10af4:	4604      	mov	r4, r0
}
   10af6:	4620      	mov	r0, r4
   10af8:	b00c      	add	sp, #48	; 0x30
   10afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010afe <dlms_handleConfirmedServiceError>:
{
   10afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b00:	f10d 0107 	add.w	r1, sp, #7
{
   10b04:	4605      	mov	r5, r0
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b06:	f7fd f8aa 	bl	dc5e <bb_getUInt8>
   10b0a:	b9b8      	cbnz	r0, 10b3c <dlms_handleConfirmedServiceError+0x3e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b0c:	f10d 0107 	add.w	r1, sp, #7
   10b10:	4628      	mov	r0, r5
    DLMS_CONFIRMED_SERVICE_ERROR service = (DLMS_CONFIRMED_SERVICE_ERROR)ch;
   10b12:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b16:	f7fd f8a2 	bl	dc5e <bb_getUInt8>
   10b1a:	b978      	cbnz	r0, 10b3c <dlms_handleConfirmedServiceError+0x3e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b1c:	f10d 0107 	add.w	r1, sp, #7
   10b20:	4628      	mov	r0, r5
    DLMS_SERVICE_ERROR type = (DLMS_SERVICE_ERROR)ch;
   10b22:	f89d 6007 	ldrb.w	r6, [sp, #7]
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b26:	f7fd f89a 	bl	dc5e <bb_getUInt8>
   10b2a:	b938      	cbnz	r0, 10b3c <dlms_handleConfirmedServiceError+0x3e>
    ret <<= 16;
   10b2c:	0420      	lsls	r0, r4, #16
    ret |= ch;
   10b2e:	f89d 4007 	ldrb.w	r4, [sp, #7]
   10b32:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   10b36:	4320      	orrs	r0, r4
   10b38:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
}
   10b3c:	b002      	add	sp, #8
   10b3e:	bd70      	pop	{r4, r5, r6, pc}

00010b40 <dlms_handleExceptionResponse>:
{
   10b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b42:	f10d 0103 	add.w	r1, sp, #3
{
   10b46:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b48:	f7fd f889 	bl	dc5e <bb_getUInt8>
   10b4c:	b9c0      	cbnz	r0, 10b80 <dlms_handleExceptionResponse+0x40>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   10b4e:	f10d 0103 	add.w	r1, sp, #3
   10b52:	4620      	mov	r0, r4
   10b54:	f7fd f883 	bl	dc5e <bb_getUInt8>
   10b58:	b990      	cbnz	r0, 10b80 <dlms_handleExceptionResponse+0x40>
    error = (DLMS_EXCEPTION_SERVICE_ERROR)ch;
   10b5a:	f89d 5003 	ldrb.w	r5, [sp, #3]
    unsigned long value = 0;
   10b5e:	9001      	str	r0, [sp, #4]
    if (error == DLMS_EXCEPTION_SERVICE_ERROR_INVOCATION_COUNTER_ERROR && bb_available(data) > 3)
   10b60:	2d06      	cmp	r5, #6
   10b62:	d108      	bne.n	10b76 <dlms_handleExceptionResponse+0x36>
   10b64:	4620      	mov	r0, r4
   10b66:	f7fc fe94 	bl	d892 <bb_available>
   10b6a:	2803      	cmp	r0, #3
   10b6c:	d903      	bls.n	10b76 <dlms_handleExceptionResponse+0x36>
        bb_getUInt32(data, &value);
   10b6e:	a901      	add	r1, sp, #4
   10b70:	4620      	mov	r0, r4
   10b72:	f7fd f8b2 	bl	dcda <bb_getUInt32>
    return DLMS_ERROR_TYPE_EXCEPTION_RESPONSE | value << 8 | error;
   10b76:	9801      	ldr	r0, [sp, #4]
   10b78:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   10b7c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
}
   10b80:	b003      	add	sp, #12
   10b82:	bd30      	pop	{r4, r5, pc}

00010b84 <dlms_handleGbt>:
{
   10b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if ((ret = bb_getUInt8(&data->data, &bc)) != 0)
   10b88:	f101 0804 	add.w	r8, r1, #4
    uint16_t index = (uint16_t)(data->data.position - 1);
   10b8c:	898e      	ldrh	r6, [r1, #12]
{
   10b8e:	4607      	mov	r7, r0
   10b90:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&data->data, &bc)) != 0)
   10b92:	4640      	mov	r0, r8
   10b94:	f10d 0101 	add.w	r1, sp, #1
   10b98:	f7fd f861 	bl	dc5e <bb_getUInt8>
   10b9c:	4604      	mov	r4, r0
   10b9e:	bb18      	cbnz	r0, 10be8 <dlms_handleGbt+0x64>
    data->streaming = (bc & 0x40) != 0;
   10ba0:	f89d 3001 	ldrb.w	r3, [sp, #1]
   10ba4:	f3c3 1280 	ubfx	r2, r3, #6, #1
    data->windowSize = (bc & 0x3F);
   10ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    data->streaming = (bc & 0x40) != 0;
   10bac:	642a      	str	r2, [r5, #64]	; 0x40
    data->windowSize = (bc & 0x3F);
   10bae:	646b      	str	r3, [r5, #68]	; 0x44
    if ((ret = bb_getUInt16(&data->data, &bn)) != 0)
   10bb0:	f10d 0102 	add.w	r1, sp, #2
   10bb4:	4640      	mov	r0, r8
   10bb6:	f7fd f87b 	bl	dcb0 <bb_getUInt16>
   10bba:	4604      	mov	r4, r0
   10bbc:	b9a0      	cbnz	r0, 10be8 <dlms_handleGbt+0x64>
    if ((ret = bb_getUInt16(&data->data, &bna)) != 0)
   10bbe:	a901      	add	r1, sp, #4
   10bc0:	4640      	mov	r0, r8
   10bc2:	f7fd f875 	bl	dcb0 <bb_getUInt16>
   10bc6:	4604      	mov	r4, r0
   10bc8:	b970      	cbnz	r0, 10be8 <dlms_handleGbt+0x64>
    if (bn == 1)
   10bca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   10bce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10bd2:	2901      	cmp	r1, #1
   10bd4:	d00c      	beq.n	10bf0 <dlms_handleGbt+0x6c>
    else if (bna != settings->blockIndex - 1)
   10bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   10bda:	3b01      	subs	r3, #1
    uint16_t index = (uint16_t)(data->data.position - 1);
   10bdc:	3e01      	subs	r6, #1
    else if (bna != settings->blockIndex - 1)
   10bde:	429a      	cmp	r2, r3
    uint16_t index = (uint16_t)(data->data.position - 1);
   10be0:	b2b6      	uxth	r6, r6
    else if (bna != settings->blockIndex - 1)
   10be2:	d006      	beq.n	10bf2 <dlms_handleGbt+0x6e>
        data->data.size = index;
   10be4:	816e      	strh	r6, [r5, #10]
        data->command = DLMS_COMMAND_NONE;
   10be6:	7068      	strb	r0, [r5, #1]
}
   10be8:	4620      	mov	r0, r4
   10bea:	b002      	add	sp, #8
   10bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        index = 0;
   10bf0:	4606      	mov	r6, r0
    data->command = DLMS_COMMAND_NONE;
   10bf2:	2300      	movs	r3, #0
    data->blockNumber = bn;
   10bf4:	8769      	strh	r1, [r5, #58]	; 0x3a
    data->blockNumberAck = bna;
   10bf6:	87aa      	strh	r2, [r5, #60]	; 0x3c
    data->command = DLMS_COMMAND_NONE;
   10bf8:	706b      	strb	r3, [r5, #1]
    if (hlp_getObjectCount2(&data->data, &len) != 0)
   10bfa:	f10d 0106 	add.w	r1, sp, #6
   10bfe:	4640      	mov	r0, r8
   10c00:	f009 ff88 	bl	1ab14 <hlp_getObjectCount2>
   10c04:	4604      	mov	r4, r0
   10c06:	2800      	cmp	r0, #0
   10c08:	d13c      	bne.n	10c84 <dlms_handleGbt+0x100>
    if (len != (data->data.size - data->data.position))
   10c0a:	896b      	ldrh	r3, [r5, #10]
   10c0c:	89a9      	ldrh	r1, [r5, #12]
   10c0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   10c12:	1a5b      	subs	r3, r3, r1
   10c14:	429a      	cmp	r2, r3
   10c16:	d001      	beq.n	10c1c <dlms_handleGbt+0x98>
        data->complete = 0;
   10c18:	7428      	strb	r0, [r5, #16]
        return 0;
   10c1a:	e7e5      	b.n	10be8 <dlms_handleGbt+0x64>
    if ((ret = dlms_getDataFromBlock(&data->data, index)) != 0)
   10c1c:	4631      	mov	r1, r6
   10c1e:	4640      	mov	r0, r8
   10c20:	f7ff fbe9 	bl	103f6 <dlms_getDataFromBlock>
   10c24:	4604      	mov	r4, r0
   10c26:	2800      	cmp	r0, #0
   10c28:	d1de      	bne.n	10be8 <dlms_handleGbt+0x64>
    if ((bc & 0x80) == 0) {
   10c2a:	f99d 2001 	ldrsb.w	r2, [sp, #1]
   10c2e:	782b      	ldrb	r3, [r5, #0]
   10c30:	2a00      	cmp	r2, #0
   10c32:	db03      	blt.n	10c3c <dlms_handleGbt+0xb8>
        data->moreData |= DLMS_DATA_REQUEST_TYPES_GBT;
   10c34:	f043 0304 	orr.w	r3, r3, #4
   10c38:	702b      	strb	r3, [r5, #0]
   10c3a:	e7d5      	b.n	10be8 <dlms_handleGbt+0x64>
        data->moreData &= ~DLMS_DATA_REQUEST_TYPES_GBT;
   10c3c:	f023 0304 	bic.w	r3, r3, #4
   10c40:	702b      	strb	r3, [r5, #0]
        if (data->data.size != 0)
   10c42:	896b      	ldrh	r3, [r5, #10]
   10c44:	2b00      	cmp	r3, #0
   10c46:	d0cf      	beq.n	10be8 <dlms_handleGbt+0x64>
            data->data.position = 0;
   10c48:	81a8      	strh	r0, [r5, #12]
            if ((ret = dlms_getPdu(settings, data, 0)) != 0)
   10c4a:	4602      	mov	r2, r0
   10c4c:	4629      	mov	r1, r5
   10c4e:	4638      	mov	r0, r7
   10c50:	f7f2 f886 	bl	2d60 <dlms_getPdu>
   10c54:	b9a0      	cbnz	r0, 10c80 <dlms_handleGbt+0xfc>
            if (data->data.position != data->data.size
   10c56:	89aa      	ldrh	r2, [r5, #12]
   10c58:	896b      	ldrh	r3, [r5, #10]
   10c5a:	429a      	cmp	r2, r3
   10c5c:	d0c4      	beq.n	10be8 <dlms_handleGbt+0x64>
                    data->command == DLMS_COMMAND_READ_RESPONSE ||
   10c5e:	786b      	ldrb	r3, [r5, #1]
                && (
   10c60:	2b0c      	cmp	r3, #12
   10c62:	d001      	beq.n	10c68 <dlms_handleGbt+0xe4>
                    data->command == DLMS_COMMAND_READ_RESPONSE ||
   10c64:	2bc4      	cmp	r3, #196	; 0xc4
   10c66:	d1bf      	bne.n	10be8 <dlms_handleGbt+0x64>
                && (data->moreData == DLMS_DATA_REQUEST_TYPES_NONE || data->peek))
   10c68:	782b      	ldrb	r3, [r5, #0]
   10c6a:	b11b      	cbz	r3, 10c74 <dlms_handleGbt+0xf0>
   10c6c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   10c70:	2b00      	cmp	r3, #0
   10c72:	d0b9      	beq.n	10be8 <dlms_handleGbt+0x64>
                data->data.position = 0;
   10c74:	2300      	movs	r3, #0
   10c76:	81ab      	strh	r3, [r5, #12]
                ret = dlms_getValueFromData(settings, data);
   10c78:	4629      	mov	r1, r5
   10c7a:	4638      	mov	r0, r7
   10c7c:	f7ff fcad 	bl	105da <dlms_getValueFromData>
   10c80:	4604      	mov	r4, r0
   10c82:	e7b1      	b.n	10be8 <dlms_handleGbt+0x64>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   10c84:	f44f 7482 	mov.w	r4, #260	; 0x104
   10c88:	e7ae      	b.n	10be8 <dlms_handleGbt+0x64>

00010c8a <dlms_handleGloDedResponse>:
{
   10c8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   10c8e:	780b      	ldrb	r3, [r1, #0]
   10c90:	07db      	lsls	r3, r3, #31
{
   10c92:	b08d      	sub	sp, #52	; 0x34
   10c94:	4605      	mov	r5, r0
   10c96:	460c      	mov	r4, r1
   10c98:	4616      	mov	r6, r2
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   10c9a:	d461      	bmi.n	10d60 <dlms_handleGloDedResponse+0xd6>
        bb_attach(&bb, data->data.data + index, bb_available(&data->data), bb_getCapacity(&data->data));
   10c9c:	460f      	mov	r7, r1
        data->data.position = index;
   10c9e:	818a      	strh	r2, [r1, #12]
        bb_attach(&bb, data->data.data + index, bb_available(&data->data), bb_getCapacity(&data->data));
   10ca0:	f857 1f04 	ldr.w	r1, [r7, #4]!
   10ca4:	4638      	mov	r0, r7
   10ca6:	eb01 0802 	add.w	r8, r1, r2
   10caa:	f7fc fdf2 	bl	d892 <bb_available>
   10cae:	4681      	mov	r9, r0
   10cb0:	4638      	mov	r0, r7
   10cb2:	f7fc fdf4 	bl	d89e <bb_getCapacity>
   10cb6:	464a      	mov	r2, r9
   10cb8:	4603      	mov	r3, r0
   10cba:	4641      	mov	r1, r8
   10cbc:	a809      	add	r0, sp, #36	; 0x24
   10cbe:	f7fc ff94 	bl	dbea <bb_attach>
    return settings->cipher.dedicatedKey != NULL;
   10cc2:	f8d5 c0d4 	ldr.w	ip, [r5, #212]	; 0xd4
   10cc6:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
   10cca:	f105 011c 	add.w	r1, r5, #28
   10cce:	aa06      	add	r2, sp, #24
   10cd0:	f10d 0716 	add.w	r7, sp, #22
   10cd4:	f10d 0317 	add.w	r3, sp, #23
        if (dlms_useDedicatedKey(settings) && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
   10cd8:	f1bc 0f00 	cmp.w	ip, #0
   10cdc:	d033      	beq.n	10d46 <dlms_handleGloDedResponse+0xbc>
   10cde:	f895 e0a4 	ldrb.w	lr, [r5, #164]	; 0xa4
   10ce2:	f01e 0f02 	tst.w	lr, #2
   10ce6:	d02e      	beq.n	10d46 <dlms_handleGloDedResponse+0xbc>
            if ((ret = cip_decrypt(&settings->cipher,
   10ce8:	e9cd 7201 	strd	r7, r2, [sp, #4]
   10cec:	9300      	str	r3, [sp, #0]
   10cee:	4662      	mov	r2, ip
   10cf0:	ab09      	add	r3, sp, #36	; 0x24
   10cf2:	f7f1 f8cb 	bl	1e8c <cip_decrypt>
   10cf6:	bb18      	cbnz	r0, 10d40 <dlms_handleGloDedResponse+0xb6>
        data->data.size = bb.size + index;
   10cf8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
        data->data.position += bb.position;
   10cfc:	89a3      	ldrh	r3, [r4, #12]
        data->data.size = bb.size + index;
   10cfe:	4416      	add	r6, r2
        data->data.position += bb.position;
   10d00:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
        data->data.size = bb.size + index;
   10d04:	8166      	strh	r6, [r4, #10]
        data->data.position += bb.position;
   10d06:	4413      	add	r3, r2
   10d08:	81a3      	strh	r3, [r4, #12]
        if (settings->cipher.security != security)
   10d0a:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
   10d0e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10d12:	429a      	cmp	r2, r3
   10d14:	d11e      	bne.n	10d54 <dlms_handleGloDedResponse+0xca>
        if (settings->expectedInvocationCounter != NULL)
   10d16:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   10d1a:	b148      	cbz	r0, 10d30 <dlms_handleGloDedResponse+0xa6>
            if (invocationCounter != *settings->expectedInvocationCounter)
   10d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10d20:	6801      	ldr	r1, [r0, #0]
   10d22:	2700      	movs	r7, #0
   10d24:	429f      	cmp	r7, r3
   10d26:	bf08      	it	eq
   10d28:	4291      	cmpeq	r1, r2
   10d2a:	d116      	bne.n	10d5a <dlms_handleGloDedResponse+0xd0>
            * settings->expectedInvocationCounter = (uint32_t)(1 + invocationCounter);
   10d2c:	3101      	adds	r1, #1
   10d2e:	6001      	str	r1, [r0, #0]
        data->command = DLMS_COMMAND_NONE;
   10d30:	2200      	movs	r2, #0
   10d32:	7062      	strb	r2, [r4, #1]
        ret = dlms_getPdu(settings, data, 0);
   10d34:	4621      	mov	r1, r4
   10d36:	4628      	mov	r0, r5
   10d38:	f7f2 f812 	bl	2d60 <dlms_getPdu>
        data->cipherIndex = (uint16_t)data->data.size;
   10d3c:	8963      	ldrh	r3, [r4, #10]
   10d3e:	8663      	strh	r3, [r4, #50]	; 0x32
}
   10d40:	b00d      	add	sp, #52	; 0x34
   10d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if ((ret = cip_decrypt(&settings->cipher,
   10d46:	e9cd 7201 	strd	r7, r2, [sp, #4]
   10d4a:	9300      	str	r3, [sp, #0]
   10d4c:	f105 02ac 	add.w	r2, r5, #172	; 0xac
   10d50:	ab09      	add	r3, sp, #36	; 0x24
   10d52:	e7ce      	b.n	10cf2 <dlms_handleGloDedResponse+0x68>
            return DLMS_ERROR_CODE_INVALID_DECIPHERING_ERROR;
   10d54:	f240 101d 	movw	r0, #285	; 0x11d
   10d58:	e7f2      	b.n	10d40 <dlms_handleGloDedResponse+0xb6>
                return DLMS_ERROR_CODE_INVOCATION_COUNTER_TOO_SMALL;
   10d5a:	f44f 708e 	mov.w	r0, #284	; 0x11c
   10d5e:	e7ef      	b.n	10d40 <dlms_handleGloDedResponse+0xb6>
    int ret = 0;
   10d60:	2000      	movs	r0, #0
   10d62:	e7ed      	b.n	10d40 <dlms_handleGloDedResponse+0xb6>

00010d64 <dlms_handleGeneralCiphering>:
{
   10d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   10d66:	780b      	ldrb	r3, [r1, #0]
   10d68:	07db      	lsls	r3, r3, #31
{
   10d6a:	b089      	sub	sp, #36	; 0x24
   10d6c:	4606      	mov	r6, r0
   10d6e:	460d      	mov	r5, r1
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   10d70:	d42b      	bmi.n	10dca <dlms_handleGeneralCiphering+0x66>
        --data->data.position;
   10d72:	898b      	ldrh	r3, [r1, #12]
   10d74:	3b01      	subs	r3, #1
   10d76:	818b      	strh	r3, [r1, #12]
        if ((ret = cip_decrypt(&settings->cipher,
   10d78:	ab06      	add	r3, sp, #24
   10d7a:	9302      	str	r3, [sp, #8]
   10d7c:	f10d 0317 	add.w	r3, sp, #23
   10d80:	1d0f      	adds	r7, r1, #4
   10d82:	9301      	str	r3, [sp, #4]
   10d84:	f10d 0316 	add.w	r3, sp, #22
   10d88:	9300      	str	r3, [sp, #0]
   10d8a:	f100 02ac 	add.w	r2, r0, #172	; 0xac
   10d8e:	f100 011c 	add.w	r1, r0, #28
   10d92:	463b      	mov	r3, r7
   10d94:	30a8      	adds	r0, #168	; 0xa8
   10d96:	f7f1 f879 	bl	1e8c <cip_decrypt>
   10d9a:	4604      	mov	r4, r0
   10d9c:	b990      	cbnz	r0, 10dc4 <dlms_handleGeneralCiphering+0x60>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   10d9e:	f10d 0115 	add.w	r1, sp, #21
   10da2:	4638      	mov	r0, r7
   10da4:	f7fc ff5b 	bl	dc5e <bb_getUInt8>
   10da8:	4604      	mov	r4, r0
   10daa:	b958      	cbnz	r0, 10dc4 <dlms_handleGeneralCiphering+0x60>
        if (security != DLMS_SECURITY_NONE)
   10dac:	f89d 3016 	ldrb.w	r3, [sp, #22]
        data->command = DLMS_COMMAND_NONE;
   10db0:	7068      	strb	r0, [r5, #1]
        if (security != DLMS_SECURITY_NONE)
   10db2:	b13b      	cbz	r3, 10dc4 <dlms_handleGeneralCiphering+0x60>
            if ((ret = dlms_getPdu(settings, data, 0)) != 0)
   10db4:	4602      	mov	r2, r0
   10db6:	4629      	mov	r1, r5
   10db8:	4630      	mov	r0, r6
   10dba:	f7f1 ffd1 	bl	2d60 <dlms_getPdu>
   10dbe:	2800      	cmp	r0, #0
   10dc0:	bf18      	it	ne
   10dc2:	4604      	movne	r4, r0
}
   10dc4:	4620      	mov	r0, r4
   10dc6:	b009      	add	sp, #36	; 0x24
   10dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
   10dca:	2400      	movs	r4, #0
   10dcc:	e7fa      	b.n	10dc4 <dlms_handleGeneralCiphering+0x60>

00010dce <dlms_getData2>:
int dlms_getData2(
    dlmsSettings* settings,
    gxByteBuffer* reply,
    gxReplyData* data,
    unsigned char first)
{
   10dce:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dd0:	b087      	sub	sp, #28
   10dd2:	461f      	mov	r7, r3
    int ret;
    unsigned char frame = 0;
   10dd4:	2300      	movs	r3, #0
   10dd6:	f88d 3017 	strb.w	r3, [sp, #23]
    switch (settings->interfaceType)
   10dda:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
   10dde:	4605      	mov	r5, r0
   10de0:	460e      	mov	r6, r1
   10de2:	4614      	mov	r4, r2
   10de4:	2b06      	cmp	r3, #6
   10de6:	d862      	bhi.n	10eae <dlms_getData2+0xe0>
   10de8:	e8df f003 	tbb	[pc, r3]
   10dec:	191d1504 	.word	0x191d1504
   10df0:	4704      	.short	0x4704
   10df2:	4b          	.byte	0x4b
   10df3:	00          	.byte	0x00
    {
#ifndef DLMS_IGNORE_HDLC
    case DLMS_INTERFACE_TYPE_HDLC:
    case DLMS_INTERFACE_TYPE_HDLC_WITH_MODE_E:
        ret = dlms_getHdlcData(settings->server, settings, reply, data, &frame, data->preEstablished, first);
   10df4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   10df8:	9301      	str	r3, [sp, #4]
   10dfa:	f10d 0317 	add.w	r3, sp, #23
   10dfe:	9300      	str	r3, [sp, #0]
   10e00:	9702      	str	r7, [sp, #8]
   10e02:	460a      	mov	r2, r1
   10e04:	4623      	mov	r3, r4
   10e06:	4601      	mov	r1, r0
   10e08:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
   10e0c:	f7fe fea8 	bl	fb60 <dlms_getHdlcData>
    default:
        // Invalid Interface type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    if (ret != 0)
   10e10:	b178      	cbz	r0, 10e32 <dlms_getData2+0x64>
            return DLMS_ERROR_CODE_REJECTED;
        }
        return DLMS_ERROR_CODE_OK;
    }
    return dlms_getPdu(settings, data, first);
}
   10e12:	b007      	add	sp, #28
   10e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = dlms_getTcpData(settings, reply, data);
   10e16:	4622      	mov	r2, r4
   10e18:	f7ff f87d 	bl	ff16 <dlms_getTcpData>
        break;
   10e1c:	e7f8      	b.n	10e10 <dlms_getData2+0x42>
        ret = dlms_getMBusData(settings, reply, data);
   10e1e:	4622      	mov	r2, r4
   10e20:	f7ff f8b8 	bl	ff94 <dlms_getMBusData>
        break;
   10e24:	e7f4      	b.n	10e10 <dlms_getData2+0x42>
        data->packetLength = reply->size;
   10e26:	88cb      	ldrh	r3, [r1, #6]
   10e28:	85a3      	strh	r3, [r4, #44]	; 0x2c
        data->complete = reply->size != 0;
   10e2a:	3b00      	subs	r3, #0
   10e2c:	bf18      	it	ne
   10e2e:	2301      	movne	r3, #1
   10e30:	7423      	strb	r3, [r4, #16]
    if (!data->complete)
   10e32:	7c23      	ldrb	r3, [r4, #16]
   10e34:	b1fb      	cbz	r3, 10e76 <dlms_getData2+0xa8>
    if (settings->interfaceType != DLMS_INTERFACE_TYPE_PLC_HDLC)
   10e36:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   10e3a:	2806      	cmp	r0, #6
   10e3c:	d127      	bne.n	10e8e <dlms_getData2+0xc0>
    if (((frame != 0x13 && frame != 0x3) || (data->moreData != DLMS_DATA_REQUEST_TYPES_NONE && data->moreData != DLMS_DATA_REQUEST_TYPES_GBT)) && (frame & 0x1) != 0)
   10e3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10e42:	f003 02ef 	and.w	r2, r3, #239	; 0xef
   10e46:	2a03      	cmp	r2, #3
   10e48:	d103      	bne.n	10e52 <dlms_getData2+0x84>
   10e4a:	7822      	ldrb	r2, [r4, #0]
   10e4c:	f012 0ffb 	tst.w	r2, #251	; 0xfb
   10e50:	d027      	beq.n	10ea2 <dlms_getData2+0xd4>
   10e52:	07db      	lsls	r3, r3, #31
   10e54:	d525      	bpl.n	10ea2 <dlms_getData2+0xd4>
        if (dlms_useHdlc(settings->interfaceType) && data->data.size != 0)
   10e56:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   10e5a:	f7fd fe9a 	bl	eb92 <dlms_useHdlc>
   10e5e:	b138      	cbz	r0, 10e70 <dlms_getData2+0xa2>
   10e60:	8963      	ldrh	r3, [r4, #10]
   10e62:	b12b      	cbz	r3, 10e70 <dlms_getData2+0xa2>
            if (reply->position != reply->size)
   10e64:	8933      	ldrh	r3, [r6, #8]
   10e66:	88f2      	ldrh	r2, [r6, #6]
   10e68:	429a      	cmp	r2, r3
                reply->position += 3;
   10e6a:	bf1c      	itt	ne
   10e6c:	3303      	addne	r3, #3
   10e6e:	8133      	strhne	r3, [r6, #8]
        if (data->command == DLMS_COMMAND_REJECTED)
   10e70:	7863      	ldrb	r3, [r4, #1]
   10e72:	2b97      	cmp	r3, #151	; 0x97
   10e74:	d01e      	beq.n	10eb4 <dlms_getData2+0xe6>
        return DLMS_ERROR_CODE_OK;
   10e76:	2000      	movs	r0, #0
   10e78:	e7cb      	b.n	10e12 <dlms_getData2+0x44>
        ret = dlms_getPlcData(settings, reply, data);
   10e7a:	4622      	mov	r2, r4
   10e7c:	f7ff f8f8 	bl	10070 <dlms_getPlcData>
        break;
   10e80:	e7c6      	b.n	10e10 <dlms_getData2+0x42>
        ret = dlms_getPlcHdlcData(settings, reply, data, &frame);
   10e82:	f10d 0317 	add.w	r3, sp, #23
   10e86:	4622      	mov	r2, r4
   10e88:	f7ff f9d3 	bl	10232 <dlms_getPlcHdlcData>
        break;
   10e8c:	e7c0      	b.n	10e10 <dlms_getData2+0x42>
        if ((ret = dlms_getDataFromFrame(reply, data, dlms_useHdlc(settings->interfaceType))) != 0)
   10e8e:	f7fd fe80 	bl	eb92 <dlms_useHdlc>
   10e92:	4621      	mov	r1, r4
   10e94:	4602      	mov	r2, r0
   10e96:	4630      	mov	r0, r6
   10e98:	f7fe fe3b 	bl	fb12 <dlms_getDataFromFrame>
   10e9c:	2800      	cmp	r0, #0
   10e9e:	d0ce      	beq.n	10e3e <dlms_getData2+0x70>
   10ea0:	e7b7      	b.n	10e12 <dlms_getData2+0x44>
    return dlms_getPdu(settings, data, first);
   10ea2:	463a      	mov	r2, r7
   10ea4:	4621      	mov	r1, r4
   10ea6:	4628      	mov	r0, r5
   10ea8:	f7f1 ff5a 	bl	2d60 <dlms_getPdu>
   10eac:	e7b1      	b.n	10e12 <dlms_getData2+0x44>
    switch (settings->interfaceType)
   10eae:	f44f 7081 	mov.w	r0, #258	; 0x102
   10eb2:	e7ae      	b.n	10e12 <dlms_getData2+0x44>
            return DLMS_ERROR_CODE_REJECTED;
   10eb4:	f06f 0001 	mvn.w	r0, #1
   10eb8:	e7ab      	b.n	10e12 <dlms_getData2+0x44>

00010eba <dlms_isPduFull>:
    }
    return 0;
}

int dlms_isPduFull(dlmsSettings* settings, gxByteBuffer* data, uint16_t* size)
{
   10eba:	b570      	push	{r4, r5, r6, lr}
   10ebc:	4605      	mov	r5, r0
    unsigned char ret;
    if (bb_isAttached(data))
   10ebe:	4608      	mov	r0, r1
{
   10ec0:	460e      	mov	r6, r1
   10ec2:	4614      	mov	r4, r2
    if (bb_isAttached(data))
   10ec4:	f7fc fce1 	bl	d88a <bb_isAttached>
   10ec8:	b198      	cbz	r0, 10ef2 <dlms_isPduFull+0x38>
    {
        uint16_t len = 0;
        if (size != NULL)
   10eca:	b124      	cbz	r4, 10ed6 <dlms_isPduFull+0x1c>
        {
            if (*size == 0)
   10ecc:	8823      	ldrh	r3, [r4, #0]
   10ece:	b90b      	cbnz	r3, 10ed4 <dlms_isPduFull+0x1a>
   10ed0:	88f3      	ldrh	r3, [r6, #6]
            {
                *size = (uint16_t)data->size;
   10ed2:	8023      	strh	r3, [r4, #0]
            }
            len = *size;
   10ed4:	8824      	ldrh	r4, [r4, #0]
        }
#ifndef DLMS_IGNORE_HIGH_GMAC
        if (settings->cipher.security != DLMS_SECURITY_NONE)
   10ed6:	88f3      	ldrh	r3, [r6, #6]
   10ed8:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
   10edc:	441c      	add	r4, r3
   10ede:	b223      	sxth	r3, r4
   10ee0:	b142      	cbz	r2, 10ef4 <dlms_isPduFull+0x3a>
        {
            len += 20 + CIPHERING_HEADER_SIZE + (uint16_t)data->size;
   10ee2:	332a      	adds	r3, #42	; 0x2a
        else
#endif //DLMS_IGNORE_HIGH_GMAC
        {
            len += 20 + (uint16_t)data->size;
        }
        ret = settings->maxPduSize < len;
   10ee4:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
            len += 20 + (uint16_t)data->size;
   10ee8:	b29b      	uxth	r3, r3
        ret = settings->maxPduSize < len;
   10eea:	4298      	cmp	r0, r3
   10eec:	bf2c      	ite	cs
   10eee:	2000      	movcs	r0, #0
   10ef0:	2001      	movcc	r0, #1
    else
    {
        ret = 0;
    }
    return ret;
}
   10ef2:	bd70      	pop	{r4, r5, r6, pc}
            len += 20 + (uint16_t)data->size;
   10ef4:	3314      	adds	r3, #20
   10ef6:	e7f5      	b.n	10ee4 <dlms_isPduFull+0x2a>

00010ef8 <resetBlockIndex>:
#endif //DLMS_IGNORE_PLC

void resetBlockIndex(
    dlmsSettings* settings)
{
    settings->blockIndex = 1;
   10ef8:	2301      	movs	r3, #1
   10efa:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   10efe:	4770      	bx	lr

00010f00 <resetFrameSequence>:

void resetFrameSequence(
    dlmsSettings* settings)
{
    if (settings->server)
   10f00:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
   10f04:	b123      	cbz	r3, 10f10 <resetFrameSequence+0x10>
    {
        settings->senderFrame = SERVER_START_SENDER_FRAME_SEQUENCE;
   10f06:	f64f 631e 	movw	r3, #65054	; 0xfe1e
        settings->receiverFrame = SERVER_START_RECEIVER_FRAME_SEQUENCE;
    }
    else
    {
        settings->senderFrame = CLIENT_START_SENDER_FRAME_SEQUENCE;
   10f0a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
        settings->receiverFrame = CLIENT_START_RCEIVER_FRAME_SEQUENCE;
    }
}
   10f0e:	4770      	bx	lr
        settings->senderFrame = CLIENT_START_SENDER_FRAME_SEQUENCE;
   10f10:	f640 63fe 	movw	r3, #3838	; 0xefe
   10f14:	e7f9      	b.n	10f0a <resetFrameSequence+0xa>

00010f16 <cl_clear>:
{
   10f16:	b570      	push	{r4, r5, r6, lr}
    settings->protocolVersion = 0;
   10f18:	2500      	movs	r5, #0
{
   10f1a:	4604      	mov	r4, r0
    settings->protocolVersion = 0;
   10f1c:	f880 50da 	strb.w	r5, [r0, #218]	; 0xda
    if (settings->preEstablishedSystemTitle != NULL)
   10f20:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   10f24:	b138      	cbz	r0, 10f36 <cl_clear+0x20>
        bb_clear(settings->preEstablishedSystemTitle);
   10f26:	f7fc fe84 	bl	dc32 <bb_clear>
        gxfree(settings->preEstablishedSystemTitle);
   10f2a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   10f2e:	f7fb fca1 	bl	c874 <free>
        settings->preEstablishedSystemTitle = NULL;
   10f32:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
__ssp_bos_icheck3(memset, void *, int)
   10f36:	2500      	movs	r5, #0
   10f38:	61e5      	str	r5, [r4, #28]
   10f3a:	6225      	str	r5, [r4, #32]
    bb_clear(&settings->password);
   10f3c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   10f40:	f7fc fe77 	bl	dc32 <bb_clear>
    bb_clear(&settings->kek);
   10f44:	f104 0044 	add.w	r0, r4, #68	; 0x44
   10f48:	f7fc fe73 	bl	dc32 <bb_clear>
    settings->invokeID = 1;
   10f4c:	2601      	movs	r6, #1
    oa_clear(&settings->objects, 0);
   10f4e:	4629      	mov	r1, r5
   10f50:	f104 0098 	add.w	r0, r4, #152	; 0x98
   10f54:	f00a f89b 	bl	1b08e <oa_clear>
    settings->connected = DLMS_CONNECTION_STATE_NONE;
   10f58:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    settings->customChallenges = 0;
   10f5c:	7025      	strb	r5, [r4, #0]
    settings->invokeID = 1;
   10f5e:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    bb_clear(&settings->ctoSChallenge);
   10f62:	1d20      	adds	r0, r4, #4
   10f64:	f7fc fe65 	bl	dc32 <bb_clear>
    bb_clear(&settings->stoCChallenge);
   10f68:	f104 0010 	add.w	r0, r4, #16
   10f6c:	f7fc fe61 	bl	dc32 <bb_clear>
    cip_clear(&settings->cipher);
   10f70:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    settings->priority = DLMS_PRIORITY_HIGH;
   10f74:	85a6      	strh	r6, [r4, #44]	; 0x2c
    cip_clear(&settings->cipher);
   10f76:	f7fd f96d 	bl	e254 <cip_clear>
    settings->maxPduSize = 0xFFFF;
   10f7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10f7e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    settings->userId = -1;
   10f82:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
    oa_clear(&settings->releasedObjects, 1);
   10f86:	4631      	mov	r1, r6
   10f88:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
   10f8c:	f00a f87f 	bl	1b08e <oa_clear>
    resetFrameSequence(settings);
   10f90:	4620      	mov	r0, r4
   10f92:	f7ff ffb5 	bl	10f00 <resetFrameSequence>
    settings->expectedInvocationCounter = NULL;
   10f96:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
}
   10f9a:	bd70      	pop	{r4, r5, r6, pc}

00010f9c <increaseReceiverSequence>:

unsigned char increaseReceiverSequence(
    unsigned char value)
{
    return ((value + 0x20) | 0x10 | (value & 0xE));
   10f9c:	b240      	sxtb	r0, r0
   10f9e:	f100 0320 	add.w	r3, r0, #32
   10fa2:	f000 000e 	and.w	r0, r0, #14
   10fa6:	4318      	orrs	r0, r3
   10fa8:	f040 0010 	orr.w	r0, r0, #16
}
   10fac:	b2c0      	uxtb	r0, r0
   10fae:	4770      	bx	lr

00010fb0 <increaseSendSequence>:
//            Frame value.
// Increased sender frame sequence.
unsigned char increaseSendSequence(
    unsigned char value)
{
    return (unsigned char)((value & 0xF0) | ((value + 0x2) & 0xE));
   10fb0:	b243      	sxtb	r3, r0
   10fb2:	1c98      	adds	r0, r3, #2
   10fb4:	f000 000e 	and.w	r0, r0, #14
   10fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
   10fbc:	4318      	orrs	r0, r3
   10fbe:	4770      	bx	lr

00010fc0 <checkFrame>:
unsigned char checkFrame(
    dlmsSettings* settings,
    unsigned char frame)
{
    //If notify
    if (frame == 0x13)
   10fc0:	2913      	cmp	r1, #19
{
   10fc2:	b538      	push	{r3, r4, r5, lr}
   10fc4:	4604      	mov	r4, r0
    if (frame == 0x13)
   10fc6:	d00a      	beq.n	10fde <checkFrame+0x1e>
    {
        return 1;
    }
    // If U frame.
    if ((frame & 0x3) == 3)
   10fc8:	f001 0203 	and.w	r2, r1, #3
   10fcc:	2a03      	cmp	r2, #3
   10fce:	d108      	bne.n	10fe2 <checkFrame+0x22>
    {
        if (frame == 0x73 || frame == 0x93)
   10fd0:	2973      	cmp	r1, #115	; 0x73
   10fd2:	d001      	beq.n	10fd8 <checkFrame+0x18>
   10fd4:	2993      	cmp	r1, #147	; 0x93
   10fd6:	d102      	bne.n	10fde <checkFrame+0x1e>
        {
            resetFrameSequence(settings);
   10fd8:	4620      	mov	r0, r4
   10fda:	f7ff ff91 	bl	10f00 <resetFrameSequence>
        return 1;
   10fde:	2201      	movs	r2, #1
   10fe0:	e00c      	b.n	10ffc <checkFrame+0x3c>
        }
        return 1;
    }
    // If S -frame
    if ((frame & 0x3) == 1)
   10fe2:	f890 5057 	ldrb.w	r5, [r0, #87]	; 0x57
   10fe6:	2a01      	cmp	r2, #1
    {
        unsigned char ch = increaseReceiverSequence(settings->receiverFrame);
   10fe8:	4628      	mov	r0, r5
    if ((frame & 0x3) == 1)
   10fea:	d109      	bne.n	11000 <checkFrame+0x40>
        unsigned char ch = increaseReceiverSequence(settings->receiverFrame);
   10fec:	f7ff ffd6 	bl	10f9c <increaseReceiverSequence>
        if ((frame & 0xE0) != (ch & 0xE0))
   10ff0:	4041      	eors	r1, r0
   10ff2:	f011 0fe0 	tst.w	r1, #224	; 0xe0
   10ff6:	d11a      	bne.n	1102e <checkFrame+0x6e>
        {
            return 0;
        }
        settings->receiverFrame = increaseReceiverSequence(settings->receiverFrame);
   10ff8:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
    }
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)//If Windows or Linux
    printf("Invalid frame %X. Expected %X.\r\n", frame, expected);
#endif
    return 0;
}
   10ffc:	4610      	mov	r0, r2
   10ffe:	bd38      	pop	{r3, r4, r5, pc}
    if ((settings->senderFrame & 0x1) == 0)
   11000:	f7ff ffd6 	bl	10fb0 <increaseSendSequence>
   11004:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   11008:	07d2      	lsls	r2, r2, #31
   1100a:	d406      	bmi.n	1101a <checkFrame+0x5a>
        expected = increaseReceiverSequence(increaseSendSequence(settings->receiverFrame));
   1100c:	f7ff ffc6 	bl	10f9c <increaseReceiverSequence>
        if (frame == expected)
   11010:	4281      	cmp	r1, r0
   11012:	d104      	bne.n	1101e <checkFrame+0x5e>
            settings->receiverFrame = frame;
   11014:	f884 1057 	strb.w	r1, [r4, #87]	; 0x57
            return 1;
   11018:	e7e1      	b.n	10fde <checkFrame+0x1e>
        if (frame == expected)
   1101a:	4288      	cmp	r0, r1
   1101c:	e7f9      	b.n	11012 <checkFrame+0x52>
    if ((!settings->server && settings->receiverFrame == SERVER_START_RECEIVER_FRAME_SEQUENCE) ||
   1101e:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   11022:	b912      	cbnz	r2, 1102a <checkFrame+0x6a>
   11024:	2dfe      	cmp	r5, #254	; 0xfe
   11026:	d1e9      	bne.n	10ffc <checkFrame+0x3c>
   11028:	e7f4      	b.n	11014 <checkFrame+0x54>
        (settings->server && settings->receiverFrame == CLIENT_START_RCEIVER_FRAME_SEQUENCE))
   1102a:	2d0e      	cmp	r5, #14
   1102c:	d0f2      	beq.n	11014 <checkFrame+0x54>
            return 0;
   1102e:	2200      	movs	r2, #0
   11030:	e7e4      	b.n	10ffc <checkFrame+0x3c>

00011032 <arr_init>:

//Initialize gxArray.
void arr_init(gxArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   11032:	2300      	movs	r3, #0
    arr->capacity = 0;
   11034:	e9c0 3300 	strd	r3, r3, [r0]
    arr->size = 0;
#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   11038:	6083      	str	r3, [r0, #8]
#endif //DLMS_IGNORE_MALLOC
}
   1103a:	4770      	bx	lr

0001103c <arr_getCapacity>:
    return (arr->capacity & 0x8000) == 0x8000;
}

uint16_t arr_getCapacity(gxArray* arr)
{
    return arr->capacity & 0x7FFF;
   1103c:	8880      	ldrh	r0, [r0, #4]
}
   1103e:	f3c0 000e 	ubfx	r0, r0, #0, #15
   11042:	4770      	bx	lr

00011044 <arr_capacity>:
}


//Allocate new size for the array in bytes.
int arr_capacity(gxArray* arr, int capacity)
{
   11044:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!arr_isAttached(arr))
   11046:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1104a:	2b00      	cmp	r3, #0
{
   1104c:	4604      	mov	r4, r0
   1104e:	460d      	mov	r5, r1
    if (!arr_isAttached(arr))
   11050:	db06      	blt.n	11060 <arr_capacity+0x1c>
    {
        if (capacity == 0)
   11052:	6800      	ldr	r0, [r0, #0]
   11054:	b959      	cbnz	r1, 1106e <arr_capacity+0x2a>
        {
            if (arr->data != NULL)
   11056:	b110      	cbz	r0, 1105e <arr_capacity+0x1a>
            {
                gxfree(arr->data);
   11058:	f7fb fc0c 	bl	c874 <free>
                arr->data = NULL;
   1105c:	6025      	str	r5, [r4, #0]
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
                }
                arr->data = tmp;
            }
        }
        arr->capacity = (uint16_t)capacity;
   1105e:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
   11060:	88a3      	ldrh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    if (arr_getCapacity(arr) < capacity)
   11062:	f3c3 030e 	ubfx	r3, r3, #0, #15
   11066:	42ab      	cmp	r3, r5
   11068:	db09      	blt.n	1107e <arr_capacity+0x3a>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
   1106a:	2000      	movs	r0, #0
   1106c:	e009      	b.n	11082 <arr_capacity+0x3e>
            if (arr->data == NULL)
   1106e:	0089      	lsls	r1, r1, #2
   11070:	b940      	cbnz	r0, 11084 <arr_capacity+0x40>
                arr->data = (void**)gxmalloc(capacity * sizeof(void*));
   11072:	4608      	mov	r0, r1
   11074:	f7fb fbf6 	bl	c864 <malloc>
   11078:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
   1107a:	2800      	cmp	r0, #0
   1107c:	d1ef      	bne.n	1105e <arr_capacity+0x1a>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   1107e:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   11082:	bd38      	pop	{r3, r4, r5, pc}
                void* tmp = (void**)gxrealloc(arr->data, capacity * sizeof(void*));
   11084:	f7fb fca6 	bl	c9d4 <realloc>
                if (tmp == NULL)
   11088:	2800      	cmp	r0, #0
   1108a:	d0f8      	beq.n	1107e <arr_capacity+0x3a>
                arr->data = tmp;
   1108c:	6020      	str	r0, [r4, #0]
   1108e:	e7e6      	b.n	1105e <arr_capacity+0x1a>

00011090 <arr_push>:


#ifndef DLMS_IGNORE_MALLOC
int arr_push(gxArray* arr, void* item)
{
   11090:	b538      	push	{r3, r4, r5, lr}
    if (arr->size >= arr->capacity)
   11092:	88c3      	ldrh	r3, [r0, #6]
{
   11094:	460d      	mov	r5, r1
    if (arr->size >= arr->capacity)
   11096:	8881      	ldrh	r1, [r0, #4]
   11098:	428b      	cmp	r3, r1
{
   1109a:	4604      	mov	r4, r0
    if (arr->size >= arr->capacity)
   1109c:	d207      	bcs.n	110ae <arr_push+0x1e>
        if (ret != 0)
        {
            return ret;
        }
    }
    arr->data[arr->size] = item;
   1109e:	88e3      	ldrh	r3, [r4, #6]
   110a0:	6822      	ldr	r2, [r4, #0]
   110a2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   110a6:	3301      	adds	r3, #1
   110a8:	80e3      	strh	r3, [r4, #6]
    return 0;
   110aa:	2000      	movs	r0, #0
}
   110ac:	bd38      	pop	{r3, r4, r5, pc}
        int ret = arr_capacity(arr, arr->capacity + GXARRAY_CAPACITY);
   110ae:	310a      	adds	r1, #10
   110b0:	f7ff ffc8 	bl	11044 <arr_capacity>
        if (ret != 0)
   110b4:	2800      	cmp	r0, #0
   110b6:	d0f2      	beq.n	1109e <arr_push+0xe>
   110b8:	e7f8      	b.n	110ac <arr_push+0x1c>

000110ba <arr_clear>:
#endif //DLMS_IGNORE_MALLOC

void arr_clear(
    gxArray* arr)
{
   110ba:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    if (arr->size != 0)
   110bc:	88c3      	ldrh	r3, [r0, #6]
{
   110be:	4604      	mov	r4, r0
    if (arr->size != 0)
   110c0:	b9a3      	cbnz	r3, 110ec <arr_clear+0x32>
        for (pos = 0; pos != arr->size; ++pos)
        {
            gxfree(arr->data[pos]);
        }
    }
    if (arr->capacity != 0)
   110c2:	88a3      	ldrh	r3, [r4, #4]
   110c4:	b123      	cbz	r3, 110d0 <arr_clear+0x16>
    {
        gxfree(arr->data);
   110c6:	6820      	ldr	r0, [r4, #0]
   110c8:	f7fb fbd4 	bl	c874 <free>
        arr->data = NULL;
   110cc:	2300      	movs	r3, #0
   110ce:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
   110d0:	2300      	movs	r3, #0
#else
    arr->size = 0;
#endif //DLMS_IGNORE_MALLOC

#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   110d2:	e9c4 3301 	strd	r3, r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
}
   110d6:	bd38      	pop	{r3, r4, r5, pc}
            gxfree(arr->data[pos]);
   110d8:	6823      	ldr	r3, [r4, #0]
   110da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   110de:	f7fb fbc9 	bl	c874 <free>
        for (pos = 0; pos != arr->size; ++pos)
   110e2:	3501      	adds	r5, #1
   110e4:	88e3      	ldrh	r3, [r4, #6]
   110e6:	42ab      	cmp	r3, r5
   110e8:	d1f6      	bne.n	110d8 <arr_clear+0x1e>
   110ea:	e7ea      	b.n	110c2 <arr_clear+0x8>
   110ec:	2500      	movs	r5, #0
   110ee:	e7f9      	b.n	110e4 <arr_clear+0x2a>

000110f0 <arr_empty>:

void arr_empty(
    gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    if (arr->size != 0)
   110f0:	88c3      	ldrh	r3, [r0, #6]
{
   110f2:	b510      	push	{r4, lr}
   110f4:	4604      	mov	r4, r0
    if (arr->size != 0)
   110f6:	b123      	cbz	r3, 11102 <arr_empty+0x12>
    {
        gxfree(arr->data);
   110f8:	6800      	ldr	r0, [r0, #0]
   110fa:	f7fb fbbb 	bl	c874 <free>
        arr->data = NULL;
   110fe:	2300      	movs	r3, #0
   11100:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
   11102:	2300      	movs	r3, #0
    }
#else
    arr->size = 0;
#endif //DLMS_IGNORE_MALLOC
#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   11104:	e9c4 3301 	strd	r3, r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
}
   11108:	bd10      	pop	{r4, pc}

0001110a <arr_getByIndex>:


#ifndef DLMS_IGNORE_MALLOC
int arr_getByIndex(gxArray* arr, uint16_t index, void** value)
{
    if (arr == NULL || value == NULL)
   1110a:	b148      	cbz	r0, 11120 <arr_getByIndex+0x16>
   1110c:	b142      	cbz	r2, 11120 <arr_getByIndex+0x16>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if (index >= arr->size)
   1110e:	88c3      	ldrh	r3, [r0, #6]
   11110:	428b      	cmp	r3, r1
   11112:	d908      	bls.n	11126 <arr_getByIndex+0x1c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = arr->data[index];
   11114:	6803      	ldr	r3, [r0, #0]
   11116:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1111a:	6013      	str	r3, [r2, #0]
    return 0;
   1111c:	2000      	movs	r0, #0
   1111e:	4770      	bx	lr
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   11120:	f44f 7081 	mov.w	r0, #258	; 0x102
   11124:	4770      	bx	lr
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   11126:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1112a:	4770      	bx	lr

0001112c <arr_clearKeyValuePair>:
void arr_clearKeyValuePair(gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    gxKey* k;
    int pos;
    if (arr->capacity != 0)
   1112c:	8883      	ldrh	r3, [r0, #4]
{
   1112e:	b570      	push	{r4, r5, r6, lr}
   11130:	4604      	mov	r4, r0
    if (arr->capacity != 0)
   11132:	b9bb      	cbnz	r3, 11164 <arr_clearKeyValuePair+0x38>
        arr->position = 0;
    }
#else
    arr_clear(arr);
#endif //DLMS_IGNORE_MALLOC
}
   11134:	bd70      	pop	{r4, r5, r6, pc}
            k = (gxKey*)arr->data[pos];
   11136:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
            gxfree(k->key);
   1113a:	6830      	ldr	r0, [r6, #0]
   1113c:	f7fb fb9a 	bl	c874 <free>
            gxfree(k->value);
   11140:	6870      	ldr	r0, [r6, #4]
   11142:	f7fb fb97 	bl	c874 <free>
            gxfree(k);
   11146:	4630      	mov	r0, r6
   11148:	f7fb fb94 	bl	c874 <free>
        for (pos = 0; pos != arr->size; ++pos)
   1114c:	3501      	adds	r5, #1
   1114e:	88e3      	ldrh	r3, [r4, #6]
   11150:	6820      	ldr	r0, [r4, #0]
   11152:	42ab      	cmp	r3, r5
   11154:	d1ef      	bne.n	11136 <arr_clearKeyValuePair+0xa>
        gxfree(arr->data);
   11156:	f7fb fb8d 	bl	c874 <free>
        arr->data = NULL;
   1115a:	2300      	movs	r3, #0
        arr->capacity = 0;
   1115c:	e9c4 3300 	strd	r3, r3, [r4]
        arr->position = 0;
   11160:	60a3      	str	r3, [r4, #8]
}
   11162:	e7e7      	b.n	11134 <arr_clearKeyValuePair+0x8>
        for (pos = 0; pos != arr->size; ++pos)
   11164:	2500      	movs	r5, #0
   11166:	e7f2      	b.n	1114e <arr_clearKeyValuePair+0x22>

00011168 <arr_clearStrings>:
void arr_clearStrings(gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    gxByteBuffer* it;
    int pos;
    if (arr->capacity != 0)
   11168:	8883      	ldrh	r3, [r0, #4]
{
   1116a:	b570      	push	{r4, r5, r6, lr}
   1116c:	4604      	mov	r4, r0
    if (arr->capacity != 0)
   1116e:	b9a3      	cbnz	r3, 1119a <arr_clearStrings+0x32>
        arr->position = 0;
    }
#else
    arr_clear(arr);
#endif //DLMS_IGNORE_MALLOC
}
   11170:	bd70      	pop	{r4, r5, r6, pc}
            it = (gxByteBuffer*)arr->data[pos];
   11172:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
            gxfree(it->data);
   11176:	6830      	ldr	r0, [r6, #0]
   11178:	f7fb fb7c 	bl	c874 <free>
            gxfree(it);
   1117c:	4630      	mov	r0, r6
   1117e:	f7fb fb79 	bl	c874 <free>
        for (pos = 0; pos != arr->size; ++pos)
   11182:	3501      	adds	r5, #1
   11184:	88e3      	ldrh	r3, [r4, #6]
   11186:	6820      	ldr	r0, [r4, #0]
   11188:	42ab      	cmp	r3, r5
   1118a:	d1f2      	bne.n	11172 <arr_clearStrings+0xa>
        gxfree(arr->data);
   1118c:	f7fb fb72 	bl	c874 <free>
        arr->data = NULL;
   11190:	2300      	movs	r3, #0
        arr->capacity = 0;
   11192:	e9c4 3300 	strd	r3, r3, [r4]
        arr->position = 0;
   11196:	60a3      	str	r3, [r4, #8]
}
   11198:	e7ea      	b.n	11170 <arr_clearStrings+0x8>
        for (pos = 0; pos != arr->size; ++pos)
   1119a:	2500      	movs	r5, #0
   1119c:	e7f2      	b.n	11184 <arr_clearStrings+0x1c>

0001119e <cosem_getByteBuffer>:
{
   1119e:	b510      	push	{r4, lr}
    if (e->value.vt != DLMS_DATA_TYPE_OCTET_STRING)
   111a0:	7803      	ldrb	r3, [r0, #0]
   111a2:	2b09      	cmp	r3, #9
{
   111a4:	4604      	mov	r4, r0
    if (e->value.vt != DLMS_DATA_TYPE_OCTET_STRING)
   111a6:	d00a      	beq.n	111be <cosem_getByteBuffer+0x20>
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   111a8:	2309      	movs	r3, #9
   111aa:	7003      	strb	r3, [r0, #0]
        if (e->value.byteArr == NULL)
   111ac:	6883      	ldr	r3, [r0, #8]
   111ae:	b933      	cbnz	r3, 111be <cosem_getByteBuffer+0x20>
            e->value.byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   111b0:	200c      	movs	r0, #12
   111b2:	f7fb fb57 	bl	c864 <malloc>
   111b6:	60a0      	str	r0, [r4, #8]
            if (e->value.byteArr == NULL)
   111b8:	b130      	cbz	r0, 111c8 <cosem_getByteBuffer+0x2a>
            BYTE_BUFFER_INIT(e->value.byteArr);
   111ba:	f7fc fb77 	bl	d8ac <bb_init>
    e->byteArray = 1;
   111be:	2301      	movs	r3, #1
   111c0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return 0;
   111c4:	2000      	movs	r0, #0
}
   111c6:	bd10      	pop	{r4, pc}
                return DLMS_ERROR_CODE_OUTOFMEMORY;
   111c8:	f44f 7082 	mov.w	r0, #260	; 0x104
   111cc:	e7fb      	b.n	111c6 <cosem_getByteBuffer+0x28>

000111ce <cosem_getData>:
    if (e->index == 2)
   111ce:	7e02      	ldrb	r2, [r0, #24]
   111d0:	2a02      	cmp	r2, #2
   111d2:	d109      	bne.n	111e8 <cosem_getData+0x1a>
        if (e->action)
   111d4:	6941      	ldr	r1, [r0, #20]
   111d6:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
   111da:	3110      	adds	r1, #16
   111dc:	b10a      	cbz	r2, 111e2 <cosem_getData+0x14>
            ret = var_copy(&e->value, &((gxData*)e->target)->value);
   111de:	f7f3 b9e1 	b.w	45a4 <var_copy>
            ret = cosem_setVariant(e->value.byteArr, &((gxData*)e->target)->value);
   111e2:	6880      	ldr	r0, [r0, #8]
   111e4:	f7fd baec 	b.w	e7c0 <cosem_setVariant>
}
   111e8:	f44f 7081 	mov.w	r0, #258	; 0x102
   111ec:	4770      	bx	lr

000111ee <cosem_getRegister>:
{
   111ee:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   111f0:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   111f2:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   111f4:	2b02      	cmp	r3, #2
{
   111f6:	4604      	mov	r4, r0
    if (e->index == 2)
   111f8:	d10d      	bne.n	11216 <cosem_getRegister+0x28>
        if (e->action)
   111fa:	6941      	ldr	r1, [r0, #20]
   111fc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   11200:	3110      	adds	r1, #16
   11202:	b11b      	cbz	r3, 1120c <cosem_getRegister+0x1e>
}
   11204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &((gxRegister*)e->target)->value);
   11208:	f7f3 b9cc 	b.w	45a4 <var_copy>
            ret = cosem_setVariant(e->value.byteArr, &((gxRegister*)e->target)->value);
   1120c:	4628      	mov	r0, r5
}
   1120e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(e->value.byteArr, &((gxRegister*)e->target)->value);
   11212:	f7fd bad5 	b.w	e7c0 <cosem_setVariant>
    else if (e->index == 3)
   11216:	2b03      	cmp	r3, #3
   11218:	d113      	bne.n	11242 <cosem_getRegister+0x54>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1121a:	2102      	movs	r1, #2
   1121c:	4628      	mov	r0, r5
   1121e:	f7fd fad6 	bl	e7ce <cosem_setStructure>
   11222:	b980      	cbnz	r0, 11246 <cosem_getRegister+0x58>
            (ret = cosem_setInt8(data, ((gxRegister*)e->target)->scaler)) != 0 ||
   11224:	6963      	ldr	r3, [r4, #20]
   11226:	4628      	mov	r0, r5
   11228:	f893 1020 	ldrb.w	r1, [r3, #32]
   1122c:	f7fd fa9e 	bl	e76c <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11230:	b948      	cbnz	r0, 11246 <cosem_getRegister+0x58>
            (ret = cosem_setEnum(data, ((gxRegister*)e->target)->unit)) != 0)
   11232:	6963      	ldr	r3, [r4, #20]
   11234:	4628      	mov	r0, r5
   11236:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
}
   1123a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, ((gxRegister*)e->target)->unit)) != 0)
   1123e:	f7fd bae2 	b.w	e806 <cosem_setEnum>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11242:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   11246:	bd38      	pop	{r3, r4, r5, pc}

00011248 <cosem_getRegisterTable>:
{
   11248:	b538      	push	{r3, r4, r5, lr}
    else if (e->index == 4)
   1124a:	7e03      	ldrb	r3, [r0, #24]
   1124c:	2b04      	cmp	r3, #4
{
   1124e:	4604      	mov	r4, r0
    else if (e->index == 4)
   11250:	d114      	bne.n	1127c <cosem_getRegisterTable+0x34>
        gxByteBuffer* data = e->value.byteArr;
   11252:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11254:	2102      	movs	r1, #2
   11256:	4628      	mov	r0, r5
   11258:	f7fd fab9 	bl	e7ce <cosem_setStructure>
   1125c:	b980      	cbnz	r0, 11280 <cosem_getRegisterTable+0x38>
            (ret = cosem_setInt8(data, ((gxRegisterTable*)e->target)->scaler)) != 0 ||
   1125e:	6963      	ldr	r3, [r4, #20]
   11260:	4628      	mov	r0, r5
   11262:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   11266:	f7fd fa81 	bl	e76c <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1126a:	b948      	cbnz	r0, 11280 <cosem_getRegisterTable+0x38>
            (ret = cosem_setEnum(data, ((gxRegisterTable*)e->target)->unit)) != 0)
   1126c:	6963      	ldr	r3, [r4, #20]
   1126e:	4628      	mov	r0, r5
   11270:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
}
   11274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, ((gxRegisterTable*)e->target)->unit)) != 0)
   11278:	f7fd bac5 	b.w	e806 <cosem_setEnum>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1127c:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   11280:	bd38      	pop	{r3, r4, r5, pc}

00011282 <cosem_getClock>:
    if (e->index == 2)
   11282:	7e03      	ldrb	r3, [r0, #24]
   11284:	2b02      	cmp	r3, #2
   11286:	d104      	bne.n	11292 <cosem_getClock+0x10>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->time);
   11288:	6941      	ldr	r1, [r0, #20]
   1128a:	3134      	adds	r1, #52	; 0x34
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->begin);
   1128c:	6880      	ldr	r0, [r0, #8]
   1128e:	f7fd b950 	b.w	e532 <cosem_setDateTimeAsOctetString>
    else if (e->index == 3)
   11292:	2b03      	cmp	r3, #3
   11294:	d105      	bne.n	112a2 <cosem_getClock+0x20>
        ret = cosem_setInt16(e->value.byteArr, ((gxClock*)e->target)->timeZone);
   11296:	6943      	ldr	r3, [r0, #20]
   11298:	6880      	ldr	r0, [r0, #8]
   1129a:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
   1129e:	f7fd ba73 	b.w	e788 <cosem_setInt16>
    else if (e->index == 4)
   112a2:	2b04      	cmp	r3, #4
   112a4:	d105      	bne.n	112b2 <cosem_getClock+0x30>
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->status);
   112a6:	6943      	ldr	r3, [r0, #20]
   112a8:	f893 1020 	ldrb.w	r1, [r3, #32]
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->clockBase);
   112ac:	6880      	ldr	r0, [r0, #8]
   112ae:	f7fd baaa 	b.w	e806 <cosem_setEnum>
    else if (e->index == 5)
   112b2:	2b05      	cmp	r3, #5
   112b4:	d102      	bne.n	112bc <cosem_getClock+0x3a>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->begin);
   112b6:	6941      	ldr	r1, [r0, #20]
   112b8:	3124      	adds	r1, #36	; 0x24
   112ba:	e7e7      	b.n	1128c <cosem_getClock+0xa>
    else if (e->index == 6)
   112bc:	2b06      	cmp	r3, #6
   112be:	d102      	bne.n	112c6 <cosem_getClock+0x44>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->end);
   112c0:	6941      	ldr	r1, [r0, #20]
   112c2:	3114      	adds	r1, #20
   112c4:	e7e2      	b.n	1128c <cosem_getClock+0xa>
    else if (e->index == 7)
   112c6:	2b07      	cmp	r3, #7
   112c8:	d104      	bne.n	112d4 <cosem_getClock+0x52>
        ret = cosem_setInt8(e->value.byteArr, ((gxClock*)e->target)->deviation);
   112ca:	6943      	ldr	r3, [r0, #20]
   112cc:	6880      	ldr	r0, [r0, #8]
   112ce:	7c59      	ldrb	r1, [r3, #17]
   112d0:	f7fd ba4c 	b.w	e76c <cosem_setInt8>
    else if (e->index == 8)
   112d4:	2b08      	cmp	r3, #8
   112d6:	d104      	bne.n	112e2 <cosem_getClock+0x60>
        ret = cosem_setBoolean(e->value.byteArr, ((gxClock*)e->target)->enabled);
   112d8:	6943      	ldr	r3, [r0, #20]
   112da:	6880      	ldr	r0, [r0, #8]
   112dc:	7c99      	ldrb	r1, [r3, #18]
   112de:	f7fd baa0 	b.w	e822 <cosem_setBoolean>
    else if (e->index == 9)
   112e2:	2b09      	cmp	r3, #9
   112e4:	d102      	bne.n	112ec <cosem_getClock+0x6a>
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->clockBase);
   112e6:	6943      	ldr	r3, [r0, #20]
   112e8:	7c19      	ldrb	r1, [r3, #16]
   112ea:	e7df      	b.n	112ac <cosem_getClock+0x2a>
}
   112ec:	f44f 7081 	mov.w	r0, #258	; 0x102
   112f0:	4770      	bx	lr

000112f2 <cosem_getActionSchedule>:
{
   112f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   112f6:	7e01      	ldrb	r1, [r0, #24]
    gxActionSchedule* object = (gxActionSchedule*)e->target;
   112f8:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   112fa:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   112fc:	2902      	cmp	r1, #2
   112fe:	d120      	bne.n	11342 <cosem_getActionSchedule+0x50>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11300:	4628      	mov	r0, r5
   11302:	f7fd fa64 	bl	e7ce <cosem_setStructure>
   11306:	4604      	mov	r4, r0
   11308:	bb50      	cbnz	r0, 11360 <cosem_getActionSchedule+0x6e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1130a:	2109      	movs	r1, #9
   1130c:	4628      	mov	r0, r5
   1130e:	f7fc fb36 	bl	d97e <bb_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11312:	4604      	mov	r4, r0
   11314:	bb20      	cbnz	r0, 11360 <cosem_getActionSchedule+0x6e>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   11316:	4629      	mov	r1, r5
   11318:	2006      	movs	r0, #6
   1131a:	f009 fc2c 	bl	1ab76 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1131e:	4604      	mov	r4, r0
   11320:	b9f0      	cbnz	r0, 11360 <cosem_getActionSchedule+0x6e>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->executedScript), 6)) != 0 ||
   11322:	6930      	ldr	r0, [r6, #16]
   11324:	f7f2 feb4 	bl	4090 <obj_getLogicalName>
   11328:	2206      	movs	r2, #6
   1132a:	4601      	mov	r1, r0
   1132c:	4628      	mov	r0, r5
   1132e:	f7fc fc0c 	bl	db4a <bb_set>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   11332:	4604      	mov	r4, r0
   11334:	b9a0      	cbnz	r0, 11360 <cosem_getActionSchedule+0x6e>
            (ret = cosem_setUInt16(data, object->executedScriptSelector)) != 0)
   11336:	8ab1      	ldrh	r1, [r6, #20]
   11338:	4628      	mov	r0, r5
   1133a:	f7fd f9fb 	bl	e734 <cosem_setUInt16>
                    (ret = cosem_setDateAsOctetString(data, tm)) != 0)
   1133e:	4604      	mov	r4, r0
    return ret;
   11340:	e00e      	b.n	11360 <cosem_getActionSchedule+0x6e>
    else if (e->index == 3)
   11342:	2903      	cmp	r1, #3
   11344:	d104      	bne.n	11350 <cosem_getActionSchedule+0x5e>
        ret = cosem_setEnum(e->value.byteArr, object->type);
   11346:	7db1      	ldrb	r1, [r6, #22]
   11348:	4628      	mov	r0, r5
   1134a:	f7fd fa5c 	bl	e806 <cosem_setEnum>
   1134e:	e7f6      	b.n	1133e <cosem_getActionSchedule+0x4c>
    else if (e->index == 4)
   11350:	2904      	cmp	r1, #4
   11352:	d12d      	bne.n	113b0 <cosem_getActionSchedule+0xbe>
        if ((ret = cosem_setArray(data, object->executionTime.size)) == 0)
   11354:	8bf1      	ldrh	r1, [r6, #30]
   11356:	4628      	mov	r0, r5
   11358:	f7fd fa47 	bl	e7ea <cosem_setArray>
   1135c:	4604      	mov	r4, r0
   1135e:	b318      	cbz	r0, 113a8 <cosem_getActionSchedule+0xb6>
}
   11360:	4620      	mov	r0, r4
   11362:	b003      	add	sp, #12
   11364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = cosem_setStructure(data, 2)) != 0)
   11368:	2102      	movs	r1, #2
   1136a:	4628      	mov	r0, r5
   1136c:	f7fd fa2f 	bl	e7ce <cosem_setStructure>
   11370:	2800      	cmp	r0, #0
   11372:	d1e4      	bne.n	1133e <cosem_getActionSchedule+0x4c>
                if ((ret = arr_getByIndex(&object->executionTime, pos, (void**)&tm)) != 0)
   11374:	aa01      	add	r2, sp, #4
   11376:	4649      	mov	r1, r9
   11378:	4640      	mov	r0, r8
   1137a:	f7ff fec6 	bl	1110a <arr_getByIndex>
   1137e:	2800      	cmp	r0, #0
   11380:	d1dd      	bne.n	1133e <cosem_getActionSchedule+0x4c>
                if ((ret = cosem_setTimeAsOctetString(data, tm)) != 0 ||
   11382:	9901      	ldr	r1, [sp, #4]
   11384:	4628      	mov	r0, r5
   11386:	f7fd f946 	bl	e616 <cosem_setTimeAsOctetString>
   1138a:	2800      	cmp	r0, #0
   1138c:	d1d7      	bne.n	1133e <cosem_getActionSchedule+0x4c>
                    (ret = cosem_setDateAsOctetString(data, tm)) != 0)
   1138e:	9901      	ldr	r1, [sp, #4]
   11390:	4628      	mov	r0, r5
   11392:	f7fd f8e1 	bl	e558 <cosem_setDateAsOctetString>
   11396:	3701      	adds	r7, #1
                if ((ret = cosem_setTimeAsOctetString(data, tm)) != 0 ||
   11398:	2800      	cmp	r0, #0
   1139a:	d1d0      	bne.n	1133e <cosem_getActionSchedule+0x4c>
            for (pos = 0; pos != object->executionTime.size; ++pos)
   1139c:	8bf3      	ldrh	r3, [r6, #30]
   1139e:	fa1f f987 	uxth.w	r9, r7
   113a2:	454b      	cmp	r3, r9
   113a4:	d1e0      	bne.n	11368 <cosem_getActionSchedule+0x76>
   113a6:	e7db      	b.n	11360 <cosem_getActionSchedule+0x6e>
   113a8:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->executionTime, pos, (void**)&tm)) != 0)
   113aa:	f106 0818 	add.w	r8, r6, #24
   113ae:	e7f5      	b.n	1139c <cosem_getActionSchedule+0xaa>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   113b0:	f44f 7481 	mov.w	r4, #258	; 0x102
   113b4:	e7d4      	b.n	11360 <cosem_getActionSchedule+0x6e>

000113b6 <getActivityCalendarWeekProfileTable>:
{
   113b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   113b8:	460c      	mov	r4, r1
   113ba:	4605      	mov	r5, r0
    if ((ret = cosem_setArray(ba, list->size)) != 0)
   113bc:	88c1      	ldrh	r1, [r0, #6]
   113be:	4620      	mov	r0, r4
   113c0:	f7fd fa13 	bl	e7ea <cosem_setArray>
   113c4:	2800      	cmp	r0, #0
   113c6:	d144      	bne.n	11452 <getActivityCalendarWeekProfileTable+0x9c>
   113c8:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
   113ca:	88eb      	ldrh	r3, [r5, #6]
   113cc:	b2b7      	uxth	r7, r6
   113ce:	42bb      	cmp	r3, r7
   113d0:	d101      	bne.n	113d6 <getActivityCalendarWeekProfileTable+0x20>
   113d2:	2000      	movs	r0, #0
   113d4:	e03d      	b.n	11452 <getActivityCalendarWeekProfileTable+0x9c>
        if ((ret = cosem_setStructure(ba, 8)) != 0 ||
   113d6:	2108      	movs	r1, #8
   113d8:	4620      	mov	r0, r4
   113da:	f7fd f9f8 	bl	e7ce <cosem_setStructure>
   113de:	2800      	cmp	r0, #0
   113e0:	d137      	bne.n	11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
   113e2:	aa01      	add	r2, sp, #4
   113e4:	4639      	mov	r1, r7
   113e6:	4628      	mov	r0, r5
   113e8:	f7ff fe8f 	bl	1110a <arr_getByIndex>
        if ((ret = cosem_setStructure(ba, 8)) != 0 ||
   113ec:	2800      	cmp	r0, #0
   113ee:	d130      	bne.n	11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setOctetString(ba, &wp->name)) != 0 ||
   113f0:	9901      	ldr	r1, [sp, #4]
   113f2:	4620      	mov	r0, r4
   113f4:	f7fd f922 	bl	e63c <cosem_setOctetString>
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
   113f8:	bb58      	cbnz	r0, 11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->monday)) != 0 ||
   113fa:	9b01      	ldr	r3, [sp, #4]
   113fc:	4620      	mov	r0, r4
   113fe:	7b19      	ldrb	r1, [r3, #12]
   11400:	f7fd f98a 	bl	e718 <cosem_setUInt8>
            (ret = cosem_setOctetString(ba, &wp->name)) != 0 ||
   11404:	bb28      	cbnz	r0, 11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->tuesday)) != 0 ||
   11406:	9b01      	ldr	r3, [sp, #4]
   11408:	4620      	mov	r0, r4
   1140a:	7b59      	ldrb	r1, [r3, #13]
   1140c:	f7fd f984 	bl	e718 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->monday)) != 0 ||
   11410:	b9f8      	cbnz	r0, 11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->wednesday)) != 0 ||
   11412:	9b01      	ldr	r3, [sp, #4]
   11414:	4620      	mov	r0, r4
   11416:	7b99      	ldrb	r1, [r3, #14]
   11418:	f7fd f97e 	bl	e718 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->tuesday)) != 0 ||
   1141c:	b9c8      	cbnz	r0, 11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->thursday)) != 0 ||
   1141e:	9b01      	ldr	r3, [sp, #4]
   11420:	4620      	mov	r0, r4
   11422:	7bd9      	ldrb	r1, [r3, #15]
   11424:	f7fd f978 	bl	e718 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->wednesday)) != 0 ||
   11428:	b998      	cbnz	r0, 11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->friday)) != 0 ||
   1142a:	9b01      	ldr	r3, [sp, #4]
   1142c:	4620      	mov	r0, r4
   1142e:	7c19      	ldrb	r1, [r3, #16]
   11430:	f7fd f972 	bl	e718 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->thursday)) != 0 ||
   11434:	b968      	cbnz	r0, 11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->saturday)) != 0 ||
   11436:	9b01      	ldr	r3, [sp, #4]
   11438:	4620      	mov	r0, r4
   1143a:	7c59      	ldrb	r1, [r3, #17]
   1143c:	f7fd f96c 	bl	e718 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->friday)) != 0 ||
   11440:	b938      	cbnz	r0, 11452 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->sunday)) != 0)
   11442:	9b01      	ldr	r3, [sp, #4]
   11444:	4620      	mov	r0, r4
   11446:	7c99      	ldrb	r1, [r3, #18]
   11448:	f7fd f966 	bl	e718 <cosem_setUInt8>
   1144c:	3601      	adds	r6, #1
            (ret = cosem_setUInt8(ba, wp->saturday)) != 0 ||
   1144e:	2800      	cmp	r0, #0
   11450:	d0bb      	beq.n	113ca <getActivityCalendarWeekProfileTable+0x14>
}
   11452:	b003      	add	sp, #12
   11454:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011456 <getActivityCalendarSeasonProfile>:
{
   11456:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11458:	460c      	mov	r4, r1
   1145a:	4605      	mov	r5, r0
    if ((ret = cosem_setArray(ba, list->size)) != 0)
   1145c:	88c1      	ldrh	r1, [r0, #6]
   1145e:	4620      	mov	r0, r4
   11460:	f7fd f9c3 	bl	e7ea <cosem_setArray>
   11464:	bb20      	cbnz	r0, 114b0 <getActivityCalendarSeasonProfile+0x5a>
   11466:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
   11468:	88eb      	ldrh	r3, [r5, #6]
   1146a:	b2b7      	uxth	r7, r6
   1146c:	42bb      	cmp	r3, r7
   1146e:	d101      	bne.n	11474 <getActivityCalendarSeasonProfile+0x1e>
   11470:	2000      	movs	r0, #0
   11472:	e01d      	b.n	114b0 <getActivityCalendarSeasonProfile+0x5a>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   11474:	2103      	movs	r1, #3
   11476:	4620      	mov	r0, r4
   11478:	f7fd f9a9 	bl	e7ce <cosem_setStructure>
   1147c:	b9c0      	cbnz	r0, 114b0 <getActivityCalendarSeasonProfile+0x5a>
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
   1147e:	aa01      	add	r2, sp, #4
   11480:	4639      	mov	r1, r7
   11482:	4628      	mov	r0, r5
   11484:	f7ff fe41 	bl	1110a <arr_getByIndex>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   11488:	b990      	cbnz	r0, 114b0 <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setOctetString(ba, &sp->name)) != 0 ||
   1148a:	9901      	ldr	r1, [sp, #4]
   1148c:	4620      	mov	r0, r4
   1148e:	f7fd f8d5 	bl	e63c <cosem_setOctetString>
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
   11492:	b968      	cbnz	r0, 114b0 <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setDateTimeAsOctetString(ba, &sp->start)) != 0 ||
   11494:	9901      	ldr	r1, [sp, #4]
   11496:	4620      	mov	r0, r4
   11498:	310c      	adds	r1, #12
   1149a:	f7fd f84a 	bl	e532 <cosem_setDateTimeAsOctetString>
            (ret = cosem_setOctetString(ba, &sp->name)) != 0 ||
   1149e:	b938      	cbnz	r0, 114b0 <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setOctetString(ba, &sp->weekName)) != 0)
   114a0:	9901      	ldr	r1, [sp, #4]
   114a2:	4620      	mov	r0, r4
   114a4:	3118      	adds	r1, #24
   114a6:	f7fd f8c9 	bl	e63c <cosem_setOctetString>
   114aa:	3601      	adds	r6, #1
            (ret = cosem_setDateTimeAsOctetString(ba, &sp->start)) != 0 ||
   114ac:	2800      	cmp	r0, #0
   114ae:	d0db      	beq.n	11468 <getActivityCalendarSeasonProfile+0x12>
}
   114b0:	b003      	add	sp, #12
   114b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000114b4 <cosem_getActivityCalendar>:
{
   114b4:	4602      	mov	r2, r0
    gxByteBuffer* data = e->value.byteArr;
   114b6:	6880      	ldr	r0, [r0, #8]
    gxActivityCalendar* object = (gxActivityCalendar*)e->target;
   114b8:	6953      	ldr	r3, [r2, #20]
    if (e->index == 2)
   114ba:	7e12      	ldrb	r2, [r2, #24]
   114bc:	2a02      	cmp	r2, #2
   114be:	d103      	bne.n	114c8 <cosem_getActivityCalendar+0x14>
    return cosem_setOctetString(ba, name);
   114c0:	f103 0110 	add.w	r1, r3, #16
   114c4:	f7fd b8ba 	b.w	e63c <cosem_setOctetString>
    else if (e->index == 3)
   114c8:	2a03      	cmp	r2, #3
   114ca:	d104      	bne.n	114d6 <cosem_getActivityCalendar+0x22>
        ret = getActivityCalendarSeasonProfile(&object->seasonProfileActive, data);
   114cc:	4601      	mov	r1, r0
   114ce:	f103 0028 	add.w	r0, r3, #40	; 0x28
        ret = getActivityCalendarSeasonProfile(&object->seasonProfilePassive, data);
   114d2:	f7ff bfc0 	b.w	11456 <getActivityCalendarSeasonProfile>
    else if (e->index == 4)
   114d6:	2a04      	cmp	r2, #4
   114d8:	d104      	bne.n	114e4 <cosem_getActivityCalendar+0x30>
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTableActive, data);
   114da:	4601      	mov	r1, r0
   114dc:	f103 0034 	add.w	r0, r3, #52	; 0x34
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTablePassive, data);
   114e0:	f7ff bf69 	b.w	113b6 <getActivityCalendarWeekProfileTable>
    else if (e->index == 5)
   114e4:	2a05      	cmp	r2, #5
   114e6:	d104      	bne.n	114f2 <cosem_getActivityCalendar+0x3e>
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTableActive, data);
   114e8:	4601      	mov	r1, r0
   114ea:	f103 0040 	add.w	r0, r3, #64	; 0x40
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTablePassive, data);
   114ee:	f7f1 be7f 	b.w	31f0 <getActivityCalendarDayProfileTable>
    else if (e->index == 6)
   114f2:	2a06      	cmp	r2, #6
   114f4:	d102      	bne.n	114fc <cosem_getActivityCalendar+0x48>
    return cosem_setOctetString(ba, name);
   114f6:	f103 011c 	add.w	r1, r3, #28
   114fa:	e7e3      	b.n	114c4 <cosem_getActivityCalendar+0x10>
    else if (e->index == 7)
   114fc:	2a07      	cmp	r2, #7
   114fe:	d103      	bne.n	11508 <cosem_getActivityCalendar+0x54>
        ret = getActivityCalendarSeasonProfile(&object->seasonProfilePassive, data);
   11500:	4601      	mov	r1, r0
   11502:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   11506:	e7e4      	b.n	114d2 <cosem_getActivityCalendar+0x1e>
    else if (e->index == 8)
   11508:	2a08      	cmp	r2, #8
   1150a:	d103      	bne.n	11514 <cosem_getActivityCalendar+0x60>
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTablePassive, data);
   1150c:	4601      	mov	r1, r0
   1150e:	f103 0064 	add.w	r0, r3, #100	; 0x64
   11512:	e7e5      	b.n	114e0 <cosem_getActivityCalendar+0x2c>
    else if (e->index == 9)
   11514:	2a09      	cmp	r2, #9
   11516:	d103      	bne.n	11520 <cosem_getActivityCalendar+0x6c>
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTablePassive, data);
   11518:	4601      	mov	r1, r0
   1151a:	f103 0058 	add.w	r0, r3, #88	; 0x58
   1151e:	e7e6      	b.n	114ee <cosem_getActivityCalendar+0x3a>
    else if (e->index == 10)
   11520:	2a0a      	cmp	r2, #10
   11522:	d103      	bne.n	1152c <cosem_getActivityCalendar+0x78>
        ret = cosem_setDateTimeAsOctetString(data, &object->time);
   11524:	f103 0170 	add.w	r1, r3, #112	; 0x70
   11528:	f7fd b803 	b.w	e532 <cosem_setDateTimeAsOctetString>
}
   1152c:	f44f 7081 	mov.w	r0, #258	; 0x102
   11530:	4770      	bx	lr

00011532 <getLNAccessRights>:
{
   11532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11536:	4681      	mov	r9, r0
    cnt = obj_attributeCount(object);
   11538:	4608      	mov	r0, r1
{
   1153a:	4615      	mov	r5, r2
   1153c:	4688      	mov	r8, r1
    cnt = obj_attributeCount(object);
   1153e:	f003 fd86 	bl	1504e <obj_attributeCount>
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11542:	2102      	movs	r1, #2
    cnt = obj_attributeCount(object);
   11544:	4607      	mov	r7, r0
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11546:	4628      	mov	r0, r5
   11548:	f7fd f941 	bl	e7ce <cosem_setStructure>
   1154c:	4604      	mov	r4, r0
   1154e:	b9b8      	cbnz	r0, 11580 <getLNAccessRights+0x4e>
        (ret = cosem_setArray(data, cnt)) != 0)
   11550:	b2b9      	uxth	r1, r7
   11552:	4628      	mov	r0, r5
   11554:	f7fd f949 	bl	e7ea <cosem_setArray>
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11558:	4604      	mov	r4, r0
   1155a:	b988      	cbnz	r0, 11580 <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   1155c:	2601      	movs	r6, #1
   1155e:	4437      	add	r7, r6
   11560:	42be      	cmp	r6, r7
   11562:	d110      	bne.n	11586 <getLNAccessRights+0x54>
    cnt = obj_methodCount(object);
   11564:	4640      	mov	r0, r8
   11566:	f003 fde6 	bl	15136 <obj_methodCount>
    if ((ret = cosem_setArray(data, cnt)) != 0)
   1156a:	b281      	uxth	r1, r0
    cnt = obj_methodCount(object);
   1156c:	4607      	mov	r7, r0
    if ((ret = cosem_setArray(data, cnt)) != 0)
   1156e:	4628      	mov	r0, r5
   11570:	f7fd f93b 	bl	e7ea <cosem_setArray>
   11574:	4604      	mov	r4, r0
   11576:	b918      	cbnz	r0, 11580 <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   11578:	2601      	movs	r6, #1
   1157a:	4437      	add	r7, r6
   1157c:	42be      	cmp	r6, r7
   1157e:	d127      	bne.n	115d0 <getLNAccessRights+0x9e>
}
   11580:	4620      	mov	r0, r4
   11582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   11586:	4632      	mov	r2, r6
   11588:	4641      	mov	r1, r8
   1158a:	4648      	mov	r0, r9
   1158c:	f7fc f87f 	bl	d68e <svr_getAttributeAccess>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   11590:	2103      	movs	r1, #3
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   11592:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   11594:	4628      	mov	r0, r5
   11596:	f7fd f91a 	bl	e7ce <cosem_setStructure>
   1159a:	4604      	mov	r4, r0
   1159c:	2800      	cmp	r0, #0
   1159e:	d1ef      	bne.n	11580 <getLNAccessRights+0x4e>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   115a0:	4631      	mov	r1, r6
   115a2:	4628      	mov	r0, r5
   115a4:	f7fd f8e2 	bl	e76c <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   115a8:	4604      	mov	r4, r0
   115aa:	2800      	cmp	r0, #0
   115ac:	d1e8      	bne.n	11580 <getLNAccessRights+0x4e>
            (ret = cosem_setEnum(data, ch)) != 0 ||
   115ae:	4651      	mov	r1, sl
   115b0:	4628      	mov	r0, r5
   115b2:	f7fd f928 	bl	e806 <cosem_setEnum>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   115b6:	4604      	mov	r4, r0
   115b8:	2800      	cmp	r0, #0
   115ba:	d1e1      	bne.n	11580 <getLNAccessRights+0x4e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_NONE)) != 0)
   115bc:	4601      	mov	r1, r0
   115be:	4628      	mov	r0, r5
   115c0:	f7fc f9dd 	bl	d97e <bb_setUInt8>
            (ret = cosem_setEnum(data, ch)) != 0 ||
   115c4:	4604      	mov	r4, r0
   115c6:	2800      	cmp	r0, #0
   115c8:	d1da      	bne.n	11580 <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   115ca:	3601      	adds	r6, #1
   115cc:	b2f6      	uxtb	r6, r6
   115ce:	e7c7      	b.n	11560 <getLNAccessRights+0x2e>
        ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   115d0:	4641      	mov	r1, r8
   115d2:	4632      	mov	r2, r6
   115d4:	4648      	mov	r0, r9
   115d6:	f7fc f85c 	bl	d692 <svr_getMethodAccess>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   115da:	2102      	movs	r1, #2
        ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   115dc:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   115de:	4628      	mov	r0, r5
   115e0:	f7fd f8f5 	bl	e7ce <cosem_setStructure>
   115e4:	b960      	cbnz	r0, 11600 <getLNAccessRights+0xce>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   115e6:	4631      	mov	r1, r6
   115e8:	4628      	mov	r0, r5
   115ea:	f7fd f8bf 	bl	e76c <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   115ee:	b938      	cbnz	r0, 11600 <getLNAccessRights+0xce>
            (ret = cosem_setEnum(data, ch)) != 0)
   115f0:	4651      	mov	r1, sl
   115f2:	4628      	mov	r0, r5
   115f4:	f7fd f907 	bl	e806 <cosem_setEnum>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   115f8:	b910      	cbnz	r0, 11600 <getLNAccessRights+0xce>
    for (pos = 1; pos != cnt + 1; ++pos)
   115fa:	3601      	adds	r6, #1
   115fc:	b2f6      	uxtb	r6, r6
   115fe:	e7bd      	b.n	1157c <getLNAccessRights+0x4a>
            (ret = cosem_setEnum(data, ch)) != 0)
   11600:	4604      	mov	r4, r0
   11602:	e7bd      	b.n	11580 <getLNAccessRights+0x4e>

00011604 <getUserList>:
    if (e->transactionStartIndex == 0)
   11604:	6b8b      	ldr	r3, [r1, #56]	; 0x38
{
   11606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    gxAssociationLogicalName* target = (gxAssociationLogicalName*)e->target;
   1160a:	694f      	ldr	r7, [r1, #20]
{
   1160c:	460c      	mov	r4, r1
   1160e:	4616      	mov	r6, r2
    if (e->transactionStartIndex == 0)
   11610:	b173      	cbz	r3, 11630 <getUserList+0x2c>
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   11612:	8f25      	ldrh	r5, [r4, #56]	; 0x38
        if ((ret = arr_getByIndex(&target->userList, pos, (void**)&it)) != 0)
   11614:	f107 0860 	add.w	r8, r7, #96	; 0x60
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   11618:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
   1161c:	42ab      	cmp	r3, r5
   1161e:	d905      	bls.n	1162c <getUserList+0x28>
        if ((ret = arr_getByIndex(&target->userList, pos, (void**)&it)) != 0)
   11620:	aa01      	add	r2, sp, #4
   11622:	4629      	mov	r1, r5
   11624:	4640      	mov	r0, r8
   11626:	f7ff fd70 	bl	1110a <arr_getByIndex>
   1162a:	b160      	cbz	r0, 11646 <getUserList+0x42>
    return 0;
   1162c:	2000      	movs	r0, #0
   1162e:	e007      	b.n	11640 <getUserList+0x3c>
   11630:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
        e->transactionEndIndex = target->userList.size;
   11634:	63e1      	str	r1, [r4, #60]	; 0x3c
        if ((ret = cosem_setArray(data, target->userList.size)) != 0)
   11636:	4610      	mov	r0, r2
   11638:	f7fd f8d7 	bl	e7ea <cosem_setArray>
   1163c:	2800      	cmp	r0, #0
   1163e:	d0e8      	beq.n	11612 <getUserList+0xe>
}
   11640:	b003      	add	sp, #12
   11642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        id = it->key;
   11646:	9b01      	ldr	r3, [sp, #4]
        name = it->value;
   11648:	f8d3 a004 	ldr.w	sl, [r3, #4]
        id = it->key;
   1164c:	f893 b000 	ldrb.w	fp, [r3]
        len = (unsigned char)strlen(name);
   11650:	4650      	mov	r0, sl
   11652:	f7ef fbb5 	bl	dc0 <strlen>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11656:	2102      	movs	r1, #2
        len = (unsigned char)strlen(name);
   11658:	fa5f f980 	uxtb.w	r9, r0
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1165c:	4630      	mov	r0, r6
   1165e:	f7fd f8b6 	bl	e7ce <cosem_setStructure>
   11662:	2800      	cmp	r0, #0
   11664:	d1ec      	bne.n	11640 <getUserList+0x3c>
            (ret = cosem_setUInt8(data, (unsigned char)id)) != 0 ||
   11666:	4659      	mov	r1, fp
   11668:	4630      	mov	r0, r6
   1166a:	f7fd f855 	bl	e718 <cosem_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1166e:	2800      	cmp	r0, #0
   11670:	d1e6      	bne.n	11640 <getUserList+0x3c>
            (ret = cosem_setOctetString2(data, (unsigned char*)name, len)) != 0)
   11672:	464a      	mov	r2, r9
   11674:	4651      	mov	r1, sl
   11676:	4630      	mov	r0, r6
   11678:	f7fd f82d 	bl	e6d6 <cosem_setOctetString2>
            (ret = cosem_setUInt8(data, (unsigned char)id)) != 0 ||
   1167c:	2800      	cmp	r0, #0
   1167e:	d1df      	bne.n	11640 <getUserList+0x3c>
        ++e->transactionStartIndex;
   11680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   11682:	3501      	adds	r5, #1
        ++e->transactionStartIndex;
   11684:	3301      	adds	r3, #1
   11686:	63a3      	str	r3, [r4, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   11688:	b2ad      	uxth	r5, r5
   1168a:	e7c5      	b.n	11618 <getUserList+0x14>

0001168c <cosem_getAssociationLogicalName>:
{
   1168c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (e->index == 2)
   1168e:	7e0b      	ldrb	r3, [r1, #24]
    gxByteBuffer* data = e->value.byteArr;
   11690:	688c      	ldr	r4, [r1, #8]
    if (e->index == 2)
   11692:	2b02      	cmp	r3, #2
{
   11694:	b085      	sub	sp, #20
    if (e->index == 2)
   11696:	d104      	bne.n	116a2 <cosem_getAssociationLogicalName+0x16>
        ret = getLNObjects(settings, e, data);
   11698:	4622      	mov	r2, r4
   1169a:	f7f1 fe05 	bl	32a8 <getLNObjects>
}
   1169e:	b005      	add	sp, #20
   116a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 3)
   116a2:	2b03      	cmp	r3, #3
    gxAssociationLogicalName* object = ((gxAssociationLogicalName*)e->target);
   116a4:	694d      	ldr	r5, [r1, #20]
    else if (e->index == 3)
   116a6:	d110      	bne.n	116ca <cosem_getAssociationLogicalName+0x3e>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   116a8:	2102      	movs	r1, #2
   116aa:	4620      	mov	r0, r4
   116ac:	f7fd f88f 	bl	e7ce <cosem_setStructure>
   116b0:	2800      	cmp	r0, #0
   116b2:	d1f4      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setInt8(data, object->clientSAP)) != 0 ||
   116b4:	7f29      	ldrb	r1, [r5, #28]
   116b6:	4620      	mov	r0, r4
   116b8:	f7fd f858 	bl	e76c <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   116bc:	2800      	cmp	r0, #0
   116be:	d1ee      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->serverSAP)) != 0)
   116c0:	8be9      	ldrh	r1, [r5, #30]
   116c2:	4620      	mov	r0, r4
   116c4:	f7fd f836 	bl	e734 <cosem_setUInt16>
   116c8:	e7e9      	b.n	1169e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 4)
   116ca:	2b04      	cmp	r3, #4
   116cc:	d138      	bne.n	11740 <cosem_getAssociationLogicalName+0xb4>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   116ce:	2109      	movs	r1, #9
   116d0:	4620      	mov	r0, r4
   116d2:	f7fc f954 	bl	d97e <bb_setUInt8>
   116d6:	2800      	cmp	r0, #0
   116d8:	d1e1      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   116da:	2107      	movs	r1, #7
   116dc:	4620      	mov	r0, r4
   116de:	f7fc f94e 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   116e2:	2800      	cmp	r0, #0
   116e4:	d1db      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   116e6:	2160      	movs	r1, #96	; 0x60
   116e8:	4620      	mov	r0, r4
   116ea:	f7fc f948 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   116ee:	2800      	cmp	r0, #0
   116f0:	d1d5      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   116f2:	2185      	movs	r1, #133	; 0x85
   116f4:	4620      	mov	r0, r4
   116f6:	f7fc f942 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   116fa:	2800      	cmp	r0, #0
   116fc:	d1cf      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   116fe:	2174      	movs	r1, #116	; 0x74
   11700:	4620      	mov	r0, r4
   11702:	f7fc f93c 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   11706:	2800      	cmp	r0, #0
   11708:	d1c9      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.identifiedOrganization)) != 0 ||
   1170a:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   1170e:	4620      	mov	r0, r4
   11710:	f7fc f935 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   11714:	2800      	cmp	r0, #0
   11716:	d1c2      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.dlmsUA)) != 0 ||
   11718:	f895 102b 	ldrb.w	r1, [r5, #43]	; 0x2b
   1171c:	4620      	mov	r0, r4
   1171e:	f7fc f92e 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, object->applicationContextName.identifiedOrganization)) != 0 ||
   11722:	2800      	cmp	r0, #0
   11724:	d1bb      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.applicationContext)) != 0 ||
   11726:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   1172a:	4620      	mov	r0, r4
   1172c:	f7fc f927 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, object->applicationContextName.dlmsUA)) != 0 ||
   11730:	2800      	cmp	r0, #0
   11732:	d1b4      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.contextId)) != 0)
   11734:	f895 102d 	ldrb.w	r1, [r5, #45]	; 0x2d
                (ret = bb_setUInt8(data, 0)) != 0)
   11738:	4620      	mov	r0, r4
   1173a:	f7fc f920 	bl	d97e <bb_setUInt8>
   1173e:	e7ae      	b.n	1169e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 5)
   11740:	2b05      	cmp	r3, #5
   11742:	d134      	bne.n	117ae <cosem_getAssociationLogicalName+0x122>
        bb_attach(&tmp, buff, 0, sizeof(buff));
   11744:	2304      	movs	r3, #4
   11746:	4669      	mov	r1, sp
   11748:	2200      	movs	r2, #0
   1174a:	eb0d 0003 	add.w	r0, sp, r3
   1174e:	f7fc fa4c 	bl	dbea <bb_attach>
        if ((ret = cosem_setStructure(data, 6)) != 0 ||
   11752:	2106      	movs	r1, #6
   11754:	4620      	mov	r0, r4
   11756:	f7fd f83a 	bl	e7ce <cosem_setStructure>
   1175a:	2800      	cmp	r0, #0
   1175c:	d19f      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setBitString(data, object->xDLMSContextInfo.conformance, 24)) != 0 ||
   1175e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11760:	2218      	movs	r2, #24
   11762:	4620      	mov	r0, r4
   11764:	f7fc ff0b 	bl	e57e <cosem_setBitString>
        if ((ret = cosem_setStructure(data, 6)) != 0 ||
   11768:	2800      	cmp	r0, #0
   1176a:	d198      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
   1176c:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
   1176e:	4620      	mov	r0, r4
   11770:	f7fc ffe0 	bl	e734 <cosem_setUInt16>
            (ret = cosem_setBitString(data, object->xDLMSContextInfo.conformance, 24)) != 0 ||
   11774:	2800      	cmp	r0, #0
   11776:	d192      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxSendPduSize)) != 0 ||
   11778:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
   1177a:	4620      	mov	r0, r4
   1177c:	f7fc ffda 	bl	e734 <cosem_setUInt16>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
   11780:	2800      	cmp	r0, #0
   11782:	d18c      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt8(data, object->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
   11784:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
   11788:	4620      	mov	r0, r4
   1178a:	f7fc ffc5 	bl	e718 <cosem_setUInt8>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxSendPduSize)) != 0 ||
   1178e:	2800      	cmp	r0, #0
   11790:	d185      	bne.n	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setInt8(data, object->xDLMSContextInfo.qualityOfService)) != 0 ||
   11792:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
   11796:	4620      	mov	r0, r4
   11798:	f7fc ffe8 	bl	e76c <cosem_setInt8>
            (ret = cosem_setUInt8(data, object->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
   1179c:	2800      	cmp	r0, #0
   1179e:	f47f af7e 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setOctetString(data, &object->xDLMSContextInfo.cypheringInfo)) != 0)
   117a2:	f105 013c 	add.w	r1, r5, #60	; 0x3c
        ret = cosem_setOctetString(e->value.byteArr, &object->secret);
   117a6:	4620      	mov	r0, r4
   117a8:	f7fc ff48 	bl	e63c <cosem_setOctetString>
   117ac:	e777      	b.n	1169e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 6)
   117ae:	2b06      	cmp	r3, #6
   117b0:	d13d      	bne.n	1182e <cosem_getAssociationLogicalName+0x1a2>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   117b2:	2109      	movs	r1, #9
   117b4:	4620      	mov	r0, r4
   117b6:	f7fc f8e2 	bl	d97e <bb_setUInt8>
   117ba:	2800      	cmp	r0, #0
   117bc:	f47f af6f 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   117c0:	2107      	movs	r1, #7
   117c2:	4620      	mov	r0, r4
   117c4:	f7fc f8db 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   117c8:	2800      	cmp	r0, #0
   117ca:	f47f af68 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   117ce:	2160      	movs	r1, #96	; 0x60
   117d0:	4620      	mov	r0, r4
   117d2:	f7fc f8d4 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   117d6:	2800      	cmp	r0, #0
   117d8:	f47f af61 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   117dc:	2185      	movs	r1, #133	; 0x85
   117de:	4620      	mov	r0, r4
   117e0:	f7fc f8cd 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   117e4:	2800      	cmp	r0, #0
   117e6:	f47f af5a 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   117ea:	2174      	movs	r1, #116	; 0x74
   117ec:	4620      	mov	r0, r4
   117ee:	f7fc f8c6 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   117f2:	2800      	cmp	r0, #0
   117f4:	f47f af53 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.identifiedOrganization)) != 0 ||
   117f8:	f895 104c 	ldrb.w	r1, [r5, #76]	; 0x4c
   117fc:	4620      	mov	r0, r4
   117fe:	f7fc f8be 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   11802:	2800      	cmp	r0, #0
   11804:	f47f af4b 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.dlmsUA)) != 0 ||
   11808:	f895 104d 	ldrb.w	r1, [r5, #77]	; 0x4d
   1180c:	4620      	mov	r0, r4
   1180e:	f7fc f8b6 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.identifiedOrganization)) != 0 ||
   11812:	2800      	cmp	r0, #0
   11814:	f47f af43 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.authenticationMechanismName)) != 0 ||
   11818:	f895 104e 	ldrb.w	r1, [r5, #78]	; 0x4e
   1181c:	4620      	mov	r0, r4
   1181e:	f7fc f8ae 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.dlmsUA)) != 0 ||
   11822:	2800      	cmp	r0, #0
   11824:	f47f af3b 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, (unsigned char)object->authenticationMechanismName.mechanismId)) != 0)
   11828:	f895 104f 	ldrb.w	r1, [r5, #79]	; 0x4f
   1182c:	e784      	b.n	11738 <cosem_getAssociationLogicalName+0xac>
    else if (e->index == 7)
   1182e:	2b07      	cmp	r3, #7
   11830:	d102      	bne.n	11838 <cosem_getAssociationLogicalName+0x1ac>
        ret = cosem_setOctetString(e->value.byteArr, &object->secret);
   11832:	f105 0150 	add.w	r1, r5, #80	; 0x50
   11836:	e7b6      	b.n	117a6 <cosem_getAssociationLogicalName+0x11a>
    else if (e->index == 8)
   11838:	2b08      	cmp	r3, #8
   1183a:	d104      	bne.n	11846 <cosem_getAssociationLogicalName+0x1ba>
        ret = cosem_setEnum(e->value.byteArr, object->associationStatus);
   1183c:	7c29      	ldrb	r1, [r5, #16]
   1183e:	4620      	mov	r0, r4
   11840:	f7fc ffe1 	bl	e806 <cosem_setEnum>
   11844:	e72b      	b.n	1169e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 9)
   11846:	2b09      	cmp	r3, #9
   11848:	d108      	bne.n	1185c <cosem_getAssociationLogicalName+0x1d0>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName((gxObject*)object->securitySetup), 6);
   1184a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   1184c:	f7f2 fc20 	bl	4090 <obj_getLogicalName>
   11850:	2206      	movs	r2, #6
   11852:	4601      	mov	r1, r0
                (ret = cosem_setOctetString2(data, (unsigned char*)str, len)) != 0)
   11854:	4620      	mov	r0, r4
   11856:	f7fc ff3e 	bl	e6d6 <cosem_setOctetString2>
   1185a:	e720      	b.n	1169e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 10)
   1185c:	2b0a      	cmp	r3, #10
   1185e:	d103      	bne.n	11868 <cosem_getAssociationLogicalName+0x1dc>
        ret = getUserList(settings, e, e->value.byteArr);
   11860:	4622      	mov	r2, r4
   11862:	f7ff fecf 	bl	11604 <getUserList>
   11866:	e71a      	b.n	1169e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 11)
   11868:	2b0b      	cmp	r3, #11
   1186a:	d127      	bne.n	118bc <cosem_getAssociationLogicalName+0x230>
        if ((ret = cosem_setStructure(data, 2)) != 0)
   1186c:	2102      	movs	r1, #2
   1186e:	4620      	mov	r0, r4
   11870:	f7fc ffad 	bl	e7ce <cosem_setStructure>
   11874:	2800      	cmp	r0, #0
   11876:	f47f af12 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
        if (object->currentUser.value == NULL)
   1187a:	6f2e      	ldr	r6, [r5, #112]	; 0x70
   1187c:	b97e      	cbnz	r6, 1189e <cosem_getAssociationLogicalName+0x212>
            if ((ret = cosem_setUInt8(data, 0)) != 0 ||
   1187e:	4601      	mov	r1, r0
   11880:	4620      	mov	r0, r4
   11882:	f7fc ff49 	bl	e718 <cosem_setUInt8>
   11886:	2800      	cmp	r0, #0
   11888:	f47f af09 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
   1188c:	210a      	movs	r1, #10
   1188e:	4620      	mov	r0, r4
   11890:	f7fc f875 	bl	d97e <bb_setUInt8>
            if ((ret = cosem_setUInt8(data, 0)) != 0 ||
   11894:	2800      	cmp	r0, #0
   11896:	f47f af02 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
                (ret = bb_setUInt8(data, 0)) != 0)
   1189a:	4601      	mov	r1, r0
   1189c:	e74c      	b.n	11738 <cosem_getAssociationLogicalName+0xac>
            unsigned char len = (unsigned char)strlen(str);
   1189e:	4630      	mov	r0, r6
   118a0:	f7ef fa8e 	bl	dc0 <strlen>
            if ((ret = cosem_setUInt8(data, object->currentUser.key)) != 0 ||
   118a4:	f895 106c 	ldrb.w	r1, [r5, #108]	; 0x6c
            unsigned char len = (unsigned char)strlen(str);
   118a8:	4607      	mov	r7, r0
            if ((ret = cosem_setUInt8(data, object->currentUser.key)) != 0 ||
   118aa:	4620      	mov	r0, r4
   118ac:	f7fc ff34 	bl	e718 <cosem_setUInt8>
   118b0:	2800      	cmp	r0, #0
   118b2:	f47f aef4 	bne.w	1169e <cosem_getAssociationLogicalName+0x12>
                (ret = cosem_setOctetString2(data, (unsigned char*)str, len)) != 0)
   118b6:	b2fa      	uxtb	r2, r7
   118b8:	4631      	mov	r1, r6
   118ba:	e7cb      	b.n	11854 <cosem_getAssociationLogicalName+0x1c8>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   118bc:	f44f 7081 	mov.w	r0, #258	; 0x102
   118c0:	e6ed      	b.n	1169e <cosem_getAssociationLogicalName+0x12>

000118c2 <getSNObjects>:
{
   118c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    objectArray* list = &((gxAssociationShortName*)e->target)->objectList;
   118c6:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
   118ca:	4680      	mov	r8, r0
   118cc:	460d      	mov	r5, r1
    if ((ret = bb_capacity(ba, settings->maxPduSize)) != 0)
   118ce:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
   118d2:	4610      	mov	r0, r2
{
   118d4:	4614      	mov	r4, r2
    if ((ret = bb_capacity(ba, settings->maxPduSize)) != 0)
   118d6:	f7fb ffef 	bl	d8b8 <bb_capacity>
   118da:	4606      	mov	r6, r0
   118dc:	2800      	cmp	r0, #0
   118de:	d150      	bne.n	11982 <getSNObjects+0xc0>
    if (!e->transaction)
   118e0:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
   118e4:	2b00      	cmp	r3, #0
   118e6:	d039      	beq.n	1195c <getSNObjects+0x9a>
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   118e8:	8f2f      	ldrh	r7, [r5, #56]	; 0x38
    objectArray* list = &((gxAssociationShortName*)e->target)->objectList;
   118ea:	f109 0b10 	add.w	fp, r9, #16
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   118ee:	f8b9 3016 	ldrh.w	r3, [r9, #22]
   118f2:	42bb      	cmp	r3, r7
   118f4:	d045      	beq.n	11982 <getSNObjects+0xc0>
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   118f6:	aa01      	add	r2, sp, #4
   118f8:	4639      	mov	r1, r7
   118fa:	4658      	mov	r0, fp
        pduSize = (uint16_t)ba->size;
   118fc:	f8b4 a006 	ldrh.w	sl, [r4, #6]
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   11900:	f009 fc05 	bl	1b10e <oa_getByIndex>
   11904:	2800      	cmp	r0, #0
   11906:	d140      	bne.n	1198a <getSNObjects+0xc8>
            (ret = cosem_setStructure(ba, 4)) != 0 ||
   11908:	2104      	movs	r1, #4
   1190a:	4620      	mov	r0, r4
   1190c:	f7fc ff5f 	bl	e7ce <cosem_setStructure>
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   11910:	2800      	cmp	r0, #0
   11912:	d13a      	bne.n	1198a <getSNObjects+0xc8>
            (ret = cosem_setInt16(ba, it->shortName)) != 0 ||
   11914:	9b01      	ldr	r3, [sp, #4]
   11916:	4620      	mov	r0, r4
   11918:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   1191c:	f7fc ff34 	bl	e788 <cosem_setInt16>
            (ret = cosem_setStructure(ba, 4)) != 0 ||
   11920:	2800      	cmp	r0, #0
   11922:	d132      	bne.n	1198a <getSNObjects+0xc8>
            (ret = cosem_setUInt16(ba, it->objectType)) != 0 ||
   11924:	9b01      	ldr	r3, [sp, #4]
   11926:	4620      	mov	r0, r4
   11928:	8819      	ldrh	r1, [r3, #0]
   1192a:	f7fc ff03 	bl	e734 <cosem_setUInt16>
            (ret = cosem_setInt16(ba, it->shortName)) != 0 ||
   1192e:	bb60      	cbnz	r0, 1198a <getSNObjects+0xc8>
            (ret = cosem_setUInt8(ba, (unsigned char)it->version)) != 0 ||
   11930:	9b01      	ldr	r3, [sp, #4]
   11932:	4620      	mov	r0, r4
   11934:	7899      	ldrb	r1, [r3, #2]
   11936:	f7fc feef 	bl	e718 <cosem_setUInt8>
            (ret = cosem_setUInt16(ba, it->objectType)) != 0 ||
   1193a:	bb30      	cbnz	r0, 1198a <getSNObjects+0xc8>
            (ret = cosem_setOctetString2(ba, it->logicalName, 6)) != 0)
   1193c:	9901      	ldr	r1, [sp, #4]
   1193e:	2206      	movs	r2, #6
   11940:	4411      	add	r1, r2
   11942:	4620      	mov	r0, r4
   11944:	f7fc fec7 	bl	e6d6 <cosem_setOctetString2>
            (ret = cosem_setUInt8(ba, (unsigned char)it->version)) != 0 ||
   11948:	b9f8      	cbnz	r0, 1198a <getSNObjects+0xc8>
        if (settings->server)
   1194a:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
   1194e:	b97b      	cbnz	r3, 11970 <getSNObjects+0xae>
        ++e->transactionStartIndex;
   11950:	6bab      	ldr	r3, [r5, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   11952:	3701      	adds	r7, #1
        ++e->transactionStartIndex;
   11954:	3301      	adds	r3, #1
   11956:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   11958:	b2bf      	uxth	r7, r7
   1195a:	e7c8      	b.n	118ee <getSNObjects+0x2c>
   1195c:	f8b9 1016 	ldrh.w	r1, [r9, #22]
        e->transactionEndIndex = list->size;
   11960:	63e9      	str	r1, [r5, #60]	; 0x3c
        if ((ret = cosem_setArray(ba, list->size)) != 0)
   11962:	4620      	mov	r0, r4
   11964:	f7fc ff41 	bl	e7ea <cosem_setArray>
   11968:	2800      	cmp	r0, #0
   1196a:	d0bd      	beq.n	118e8 <getSNObjects+0x26>
   1196c:	4606      	mov	r6, r0
   1196e:	e008      	b.n	11982 <getSNObjects+0xc0>
            if (dlms_isPduFull(settings, ba, NULL))
   11970:	4602      	mov	r2, r0
   11972:	4621      	mov	r1, r4
   11974:	4640      	mov	r0, r8
   11976:	f7ff faa0 	bl	10eba <dlms_isPduFull>
   1197a:	2800      	cmp	r0, #0
   1197c:	d0e8      	beq.n	11950 <getSNObjects+0x8e>
        ba->size = pduSize;
   1197e:	f8a4 a006 	strh.w	sl, [r4, #6]
}
   11982:	4630      	mov	r0, r6
   11984:	b003      	add	sp, #12
   11986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   1198a:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   1198e:	d1ed      	bne.n	1196c <getSNObjects+0xaa>
   11990:	e7f5      	b.n	1197e <getSNObjects+0xbc>

00011992 <getSNAccessRights>:
{
   11992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11996:	4681      	mov	r9, r0
    cnt = obj_attributeCount(object);
   11998:	4608      	mov	r0, r1
{
   1199a:	4615      	mov	r5, r2
   1199c:	460f      	mov	r7, r1
    cnt = obj_attributeCount(object);
   1199e:	f003 fb56 	bl	1504e <obj_attributeCount>
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   119a2:	2103      	movs	r1, #3
    cnt = obj_attributeCount(object);
   119a4:	4680      	mov	r8, r0
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   119a6:	4628      	mov	r0, r5
   119a8:	f7fc ff11 	bl	e7ce <cosem_setStructure>
   119ac:	4604      	mov	r4, r0
   119ae:	b9d8      	cbnz	r0, 119e8 <getSNAccessRights+0x56>
        (ret = cosem_setUInt16(ba, object->shortName)) != 0 ||
   119b0:	88b9      	ldrh	r1, [r7, #4]
   119b2:	4628      	mov	r0, r5
   119b4:	f7fc febe 	bl	e734 <cosem_setUInt16>
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   119b8:	4604      	mov	r4, r0
   119ba:	b9a8      	cbnz	r0, 119e8 <getSNAccessRights+0x56>
        (ret = cosem_setArray(ba, cnt)) != 0)
   119bc:	fa1f f188 	uxth.w	r1, r8
   119c0:	4628      	mov	r0, r5
   119c2:	f7fc ff12 	bl	e7ea <cosem_setArray>
        (ret = cosem_setUInt16(ba, object->shortName)) != 0 ||
   119c6:	4604      	mov	r4, r0
   119c8:	b970      	cbnz	r0, 119e8 <getSNAccessRights+0x56>
    for (pos = 1; pos != cnt + 1; ++pos)
   119ca:	2601      	movs	r6, #1
   119cc:	44b0      	add	r8, r6
   119ce:	4546      	cmp	r6, r8
   119d0:	d10d      	bne.n	119ee <getSNAccessRights+0x5c>
    cnt = obj_methodCount(object);
   119d2:	4638      	mov	r0, r7
   119d4:	f003 fbaf 	bl	15136 <obj_methodCount>
    if ((ret = cosem_setArray(ba, cnt)) == 0)
   119d8:	b281      	uxth	r1, r0
    cnt = obj_methodCount(object);
   119da:	4680      	mov	r8, r0
    if ((ret = cosem_setArray(ba, cnt)) == 0)
   119dc:	4628      	mov	r0, r5
   119de:	f7fc ff04 	bl	e7ea <cosem_setArray>
   119e2:	4604      	mov	r4, r0
   119e4:	2800      	cmp	r0, #0
   119e6:	d041      	beq.n	11a6c <getSNAccessRights+0xda>
}
   119e8:	4620      	mov	r0, r4
   119ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   119ee:	4632      	mov	r2, r6
   119f0:	4639      	mov	r1, r7
   119f2:	4648      	mov	r0, r9
   119f4:	f7fb fe4b 	bl	d68e <svr_getAttributeAccess>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   119f8:	2103      	movs	r1, #3
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   119fa:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   119fc:	4628      	mov	r0, r5
   119fe:	f7fc fee6 	bl	e7ce <cosem_setStructure>
   11a02:	4604      	mov	r4, r0
   11a04:	2800      	cmp	r0, #0
   11a06:	d1ef      	bne.n	119e8 <getSNAccessRights+0x56>
            (ret = cosem_setInt8(ba, pos)) != 0 ||
   11a08:	4631      	mov	r1, r6
   11a0a:	4628      	mov	r0, r5
   11a0c:	f7fc feae 	bl	e76c <cosem_setInt8>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   11a10:	4604      	mov	r4, r0
   11a12:	2800      	cmp	r0, #0
   11a14:	d1e8      	bne.n	119e8 <getSNAccessRights+0x56>
            (ret = cosem_setEnum(ba, ch)) != 0 ||
   11a16:	4651      	mov	r1, sl
   11a18:	4628      	mov	r0, r5
   11a1a:	f7fc fef4 	bl	e806 <cosem_setEnum>
            (ret = cosem_setInt8(ba, pos)) != 0 ||
   11a1e:	4604      	mov	r4, r0
   11a20:	2800      	cmp	r0, #0
   11a22:	d1e1      	bne.n	119e8 <getSNAccessRights+0x56>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_NONE)) != 0)
   11a24:	4601      	mov	r1, r0
   11a26:	4628      	mov	r0, r5
   11a28:	f7fb ffa9 	bl	d97e <bb_setUInt8>
            (ret = cosem_setEnum(ba, ch)) != 0 ||
   11a2c:	4604      	mov	r4, r0
   11a2e:	2800      	cmp	r0, #0
   11a30:	d1da      	bne.n	119e8 <getSNAccessRights+0x56>
    for (pos = 1; pos != cnt + 1; ++pos)
   11a32:	3601      	adds	r6, #1
   11a34:	b2f6      	uxtb	r6, r6
   11a36:	e7ca      	b.n	119ce <getSNAccessRights+0x3c>
            ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   11a38:	4639      	mov	r1, r7
   11a3a:	4632      	mov	r2, r6
   11a3c:	4648      	mov	r0, r9
   11a3e:	f7fb fe28 	bl	d692 <svr_getMethodAccess>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   11a42:	2103      	movs	r1, #3
            ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   11a44:	4682      	mov	sl, r0
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   11a46:	4628      	mov	r0, r5
   11a48:	f7fc fec1 	bl	e7ce <cosem_setStructure>
   11a4c:	b988      	cbnz	r0, 11a72 <getSNAccessRights+0xe0>
                (ret = cosem_setInt8(ba, pos)) != 0 ||
   11a4e:	4631      	mov	r1, r6
   11a50:	4628      	mov	r0, r5
   11a52:	f7fc fe8b 	bl	e76c <cosem_setInt8>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   11a56:	b960      	cbnz	r0, 11a72 <getSNAccessRights+0xe0>
                (ret = cosem_setEnum(ba, ch)) != 0)
   11a58:	4651      	mov	r1, sl
   11a5a:	4628      	mov	r0, r5
   11a5c:	f7fc fed3 	bl	e806 <cosem_setEnum>
                (ret = cosem_setInt8(ba, pos)) != 0 ||
   11a60:	b938      	cbnz	r0, 11a72 <getSNAccessRights+0xe0>
        for (pos = 1; pos != cnt + 1; ++pos)
   11a62:	3601      	adds	r6, #1
   11a64:	b2f6      	uxtb	r6, r6
   11a66:	4546      	cmp	r6, r8
   11a68:	d1e6      	bne.n	11a38 <getSNAccessRights+0xa6>
   11a6a:	e7bd      	b.n	119e8 <getSNAccessRights+0x56>
   11a6c:	2601      	movs	r6, #1
   11a6e:	44b0      	add	r8, r6
   11a70:	e7f9      	b.n	11a66 <getSNAccessRights+0xd4>
                (ret = cosem_setEnum(ba, ch)) != 0)
   11a72:	4604      	mov	r4, r0
   11a74:	e7b8      	b.n	119e8 <getSNAccessRights+0x56>

00011a76 <cosem_getAssociationShortName>:
{
   11a76:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   11a7a:	7e0a      	ldrb	r2, [r1, #24]
    gxByteBuffer* data = e->value.byteArr;
   11a7c:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
   11a7e:	2a02      	cmp	r2, #2
{
   11a80:	4606      	mov	r6, r0
    if (e->index == 2)
   11a82:	d104      	bne.n	11a8e <cosem_getAssociationShortName+0x18>
        ret = getSNObjects(settings, e, data);
   11a84:	462a      	mov	r2, r5
   11a86:	f7ff ff1c 	bl	118c2 <getSNObjects>
                    (ret = getSNAccessRights(settings, it, data)) != 0)
   11a8a:	4604      	mov	r4, r0
   11a8c:	e008      	b.n	11aa0 <cosem_getAssociationShortName+0x2a>
    else if (e->index == 3)
   11a8e:	2a03      	cmp	r2, #3
    gxAssociationShortName* object = (gxAssociationShortName*)e->target;
   11a90:	694f      	ldr	r7, [r1, #20]
    else if (e->index == 3)
   11a92:	d122      	bne.n	11ada <cosem_getAssociationShortName+0x64>
        if ((ret = cosem_setArray(data, object->objectList.size)) == 0)
   11a94:	8af9      	ldrh	r1, [r7, #22]
   11a96:	4628      	mov	r0, r5
   11a98:	f7fc fea7 	bl	e7ea <cosem_setArray>
   11a9c:	4604      	mov	r4, r0
   11a9e:	b1c0      	cbz	r0, 11ad2 <cosem_getAssociationShortName+0x5c>
}
   11aa0:	4620      	mov	r0, r4
   11aa2:	b003      	add	sp, #12
   11aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   11aa8:	aa01      	add	r2, sp, #4
   11aaa:	4640      	mov	r0, r8
   11aac:	f009 fb2f 	bl	1b10e <oa_getByIndex>
   11ab0:	2800      	cmp	r0, #0
   11ab2:	d1ea      	bne.n	11a8a <cosem_getAssociationShortName+0x14>
                    (ret = getSNAccessRights(settings, it, data)) != 0)
   11ab4:	9901      	ldr	r1, [sp, #4]
   11ab6:	462a      	mov	r2, r5
   11ab8:	4630      	mov	r0, r6
   11aba:	f7ff ff6a 	bl	11992 <getSNAccessRights>
   11abe:	f109 0901 	add.w	r9, r9, #1
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   11ac2:	2800      	cmp	r0, #0
   11ac4:	d1e1      	bne.n	11a8a <cosem_getAssociationShortName+0x14>
            for (pos = 0; pos != object->objectList.size; ++pos)
   11ac6:	8afb      	ldrh	r3, [r7, #22]
   11ac8:	fa1f f189 	uxth.w	r1, r9
   11acc:	428b      	cmp	r3, r1
   11ace:	d1eb      	bne.n	11aa8 <cosem_getAssociationShortName+0x32>
   11ad0:	e7e6      	b.n	11aa0 <cosem_getAssociationShortName+0x2a>
   11ad2:	4681      	mov	r9, r0
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   11ad4:	f107 0810 	add.w	r8, r7, #16
   11ad8:	e7f5      	b.n	11ac6 <cosem_getAssociationShortName+0x50>
    else if (e->index == 4)
   11ada:	2a04      	cmp	r2, #4
   11adc:	d108      	bne.n	11af0 <cosem_getAssociationShortName+0x7a>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName((gxObject*)object->securitySetup), 6);
   11ade:	69b8      	ldr	r0, [r7, #24]
   11ae0:	f7f2 fad6 	bl	4090 <obj_getLogicalName>
   11ae4:	2206      	movs	r2, #6
   11ae6:	4601      	mov	r1, r0
   11ae8:	4628      	mov	r0, r5
   11aea:	f7fc fdf4 	bl	e6d6 <cosem_setOctetString2>
   11aee:	e7cc      	b.n	11a8a <cosem_getAssociationShortName+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11af0:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   11af4:	e7d4      	b.n	11aa0 <cosem_getAssociationShortName+0x2a>

00011af6 <cosem_getAutoAnswer>:
{
   11af6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   11afa:	7e03      	ldrb	r3, [r0, #24]
    gxAutoAnswer* object = (gxAutoAnswer*)e->target;
   11afc:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11afe:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11b00:	2b02      	cmp	r3, #2
   11b02:	d104      	bne.n	11b0e <cosem_getAutoAnswer+0x18>
        ret = cosem_setEnum(data, object->mode);
   11b04:	7cb1      	ldrb	r1, [r6, #18]
        ret = cosem_setEnum(data, object->status);
   11b06:	4628      	mov	r0, r5
   11b08:	f7fc fe7d 	bl	e806 <cosem_setEnum>
   11b0c:	e02c      	b.n	11b68 <cosem_getAutoAnswer+0x72>
    else if (e->index == 3)
   11b0e:	2b03      	cmp	r3, #3
   11b10:	d12c      	bne.n	11b6c <cosem_getAutoAnswer+0x76>
        if ((ret = cosem_setArray(data, object->listeningWindow.size)) == 0)
   11b12:	8b71      	ldrh	r1, [r6, #26]
   11b14:	4628      	mov	r0, r5
   11b16:	f7fc fe68 	bl	e7ea <cosem_setArray>
   11b1a:	4604      	mov	r4, r0
   11b1c:	b118      	cbz	r0, 11b26 <cosem_getAutoAnswer+0x30>
}
   11b1e:	4620      	mov	r0, r4
   11b20:	b003      	add	sp, #12
   11b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11b26:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   11b28:	f106 0814 	add.w	r8, r6, #20
            for (pos = 0; pos != object->listeningWindow.size; ++pos)
   11b2c:	8b73      	ldrh	r3, [r6, #26]
   11b2e:	fa1f f987 	uxth.w	r9, r7
   11b32:	454b      	cmp	r3, r9
   11b34:	d0f3      	beq.n	11b1e <cosem_getAutoAnswer+0x28>
                if ((ret = cosem_setStructure(data, 2)) != 0)
   11b36:	2102      	movs	r1, #2
   11b38:	4628      	mov	r0, r5
   11b3a:	f7fc fe48 	bl	e7ce <cosem_setStructure>
   11b3e:	b998      	cbnz	r0, 11b68 <cosem_getAutoAnswer+0x72>
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   11b40:	aa01      	add	r2, sp, #4
   11b42:	4649      	mov	r1, r9
   11b44:	4640      	mov	r0, r8
   11b46:	f7ff fae0 	bl	1110a <arr_getByIndex>
   11b4a:	b968      	cbnz	r0, 11b68 <cosem_getAutoAnswer+0x72>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->key)) != 0 ||
   11b4c:	9b01      	ldr	r3, [sp, #4]
   11b4e:	4628      	mov	r0, r5
   11b50:	6819      	ldr	r1, [r3, #0]
   11b52:	f7fc fcee 	bl	e532 <cosem_setDateTimeAsOctetString>
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   11b56:	b938      	cbnz	r0, 11b68 <cosem_getAutoAnswer+0x72>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->value)) != 0)
   11b58:	9b01      	ldr	r3, [sp, #4]
   11b5a:	4628      	mov	r0, r5
   11b5c:	6859      	ldr	r1, [r3, #4]
   11b5e:	f7fc fce8 	bl	e532 <cosem_setDateTimeAsOctetString>
   11b62:	3701      	adds	r7, #1
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->key)) != 0 ||
   11b64:	2800      	cmp	r0, #0
   11b66:	d0e1      	beq.n	11b2c <cosem_getAutoAnswer+0x36>
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   11b68:	4604      	mov	r4, r0
   11b6a:	e7d8      	b.n	11b1e <cosem_getAutoAnswer+0x28>
    else if (e->index == 4)
   11b6c:	2b04      	cmp	r3, #4
   11b6e:	d102      	bne.n	11b76 <cosem_getAutoAnswer+0x80>
        ret = cosem_setEnum(data, object->status);
   11b70:	f896 1020 	ldrb.w	r1, [r6, #32]
   11b74:	e7c7      	b.n	11b06 <cosem_getAutoAnswer+0x10>
    else if (e->index == 5)
   11b76:	2b05      	cmp	r3, #5
   11b78:	d105      	bne.n	11b86 <cosem_getAutoAnswer+0x90>
        ret = cosem_setUInt8(data, object->numberOfCalls);
   11b7a:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   11b7e:	4628      	mov	r0, r5
   11b80:	f7fc fdca 	bl	e718 <cosem_setUInt8>
   11b84:	e7f0      	b.n	11b68 <cosem_getAutoAnswer+0x72>
    else if (e->index == 6)
   11b86:	2b06      	cmp	r3, #6
   11b88:	d10f      	bne.n	11baa <cosem_getAutoAnswer+0xb4>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11b8a:	2102      	movs	r1, #2
   11b8c:	4628      	mov	r0, r5
   11b8e:	f7fc fe1e 	bl	e7ce <cosem_setStructure>
   11b92:	4604      	mov	r4, r0
   11b94:	2800      	cmp	r0, #0
   11b96:	d1c2      	bne.n	11b1e <cosem_getAutoAnswer+0x28>
            (ret = cosem_setUInt8(data, object->numberOfRingsInListeningWindow)) != 0 ||
   11b98:	7c31      	ldrb	r1, [r6, #16]
   11b9a:	4628      	mov	r0, r5
   11b9c:	f7fc fdbc 	bl	e718 <cosem_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11ba0:	4604      	mov	r4, r0
   11ba2:	2800      	cmp	r0, #0
   11ba4:	d1bb      	bne.n	11b1e <cosem_getAutoAnswer+0x28>
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   11ba6:	7c71      	ldrb	r1, [r6, #17]
   11ba8:	e7e9      	b.n	11b7e <cosem_getAutoAnswer+0x88>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11baa:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   11bae:	e7b6      	b.n	11b1e <cosem_getAutoAnswer+0x28>

00011bb0 <cosem_getAutoConnect>:
{
   11bb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   11bb4:	7e03      	ldrb	r3, [r0, #24]
    gxAutoConnect* object = (gxAutoConnect*)e->target;
   11bb6:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11bb8:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11bba:	2b02      	cmp	r3, #2
   11bbc:	d106      	bne.n	11bcc <cosem_getAutoConnect+0x1c>
        ret = cosem_setEnum(data, object->mode);
   11bbe:	7c21      	ldrb	r1, [r4, #16]
   11bc0:	4628      	mov	r0, r5
   11bc2:	f7fc fe20 	bl	e806 <cosem_setEnum>
}
   11bc6:	b002      	add	sp, #8
   11bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (e->index == 3)
   11bcc:	2b03      	cmp	r3, #3
   11bce:	d105      	bne.n	11bdc <cosem_getAutoConnect+0x2c>
        ret = cosem_setUInt8(data, object->repetitions);
   11bd0:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   11bd4:	4628      	mov	r0, r5
   11bd6:	f7fc fd9f 	bl	e718 <cosem_setUInt8>
   11bda:	e7f4      	b.n	11bc6 <cosem_getAutoConnect+0x16>
    else if (e->index == 4)
   11bdc:	2b04      	cmp	r3, #4
   11bde:	d104      	bne.n	11bea <cosem_getAutoConnect+0x3a>
        ret = cosem_setUInt16(data, object->repetitionDelay);
   11be0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   11be2:	4628      	mov	r0, r5
   11be4:	f7fc fda6 	bl	e734 <cosem_setUInt16>
   11be8:	e7ed      	b.n	11bc6 <cosem_getAutoConnect+0x16>
    else if (e->index == 5)
   11bea:	2b05      	cmp	r3, #5
   11bec:	d12c      	bne.n	11c48 <cosem_getAutoConnect+0x98>
        if ((ret = cosem_setArray(data, object->callingWindow.size)) != 0)
   11bee:	8b61      	ldrh	r1, [r4, #26]
   11bf0:	4628      	mov	r0, r5
   11bf2:	f7fc fdfa 	bl	e7ea <cosem_setArray>
   11bf6:	2800      	cmp	r0, #0
   11bf8:	d1e5      	bne.n	11bc6 <cosem_getAutoConnect+0x16>
   11bfa:	4606      	mov	r6, r0
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   11bfc:	f104 0714 	add.w	r7, r4, #20
        for (pos = 0; pos != object->callingWindow.size; ++pos)
   11c00:	8b63      	ldrh	r3, [r4, #26]
   11c02:	fa1f f886 	uxth.w	r8, r6
   11c06:	4543      	cmp	r3, r8
   11c08:	d101      	bne.n	11c0e <cosem_getAutoConnect+0x5e>
   11c0a:	2000      	movs	r0, #0
   11c0c:	e7db      	b.n	11bc6 <cosem_getAutoConnect+0x16>
            if ((ret = cosem_setStructure(data, 2)) != 0)
   11c0e:	2102      	movs	r1, #2
   11c10:	4628      	mov	r0, r5
   11c12:	f7fc fddc 	bl	e7ce <cosem_setStructure>
   11c16:	2800      	cmp	r0, #0
   11c18:	d1d5      	bne.n	11bc6 <cosem_getAutoConnect+0x16>
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   11c1a:	aa01      	add	r2, sp, #4
   11c1c:	4641      	mov	r1, r8
   11c1e:	4638      	mov	r0, r7
   11c20:	f7ff fa73 	bl	1110a <arr_getByIndex>
   11c24:	2800      	cmp	r0, #0
   11c26:	d1ce      	bne.n	11bc6 <cosem_getAutoConnect+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->key)) != 0 ||
   11c28:	9b01      	ldr	r3, [sp, #4]
   11c2a:	4628      	mov	r0, r5
   11c2c:	6819      	ldr	r1, [r3, #0]
   11c2e:	f7fc fc80 	bl	e532 <cosem_setDateTimeAsOctetString>
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   11c32:	2800      	cmp	r0, #0
   11c34:	d1c7      	bne.n	11bc6 <cosem_getAutoConnect+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->value)) != 0)
   11c36:	9b01      	ldr	r3, [sp, #4]
   11c38:	4628      	mov	r0, r5
   11c3a:	6859      	ldr	r1, [r3, #4]
   11c3c:	f7fc fc79 	bl	e532 <cosem_setDateTimeAsOctetString>
   11c40:	3601      	adds	r6, #1
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->key)) != 0 ||
   11c42:	2800      	cmp	r0, #0
   11c44:	d0dc      	beq.n	11c00 <cosem_getAutoConnect+0x50>
   11c46:	e7be      	b.n	11bc6 <cosem_getAutoConnect+0x16>
    else if (e->index == 6)
   11c48:	2b06      	cmp	r3, #6
   11c4a:	d11a      	bne.n	11c82 <cosem_getAutoConnect+0xd2>
        if ((ret = cosem_setArray(data, object->destinations.size)) != 0)
   11c4c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   11c4e:	4628      	mov	r0, r5
   11c50:	f7fc fdcb 	bl	e7ea <cosem_setArray>
   11c54:	2800      	cmp	r0, #0
   11c56:	d1b6      	bne.n	11bc6 <cosem_getAutoConnect+0x16>
   11c58:	4606      	mov	r6, r0
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   11c5a:	f104 0720 	add.w	r7, r4, #32
        for (pos = 0; pos != object->destinations.size; ++pos)
   11c5e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11c60:	b2b1      	uxth	r1, r6
   11c62:	428b      	cmp	r3, r1
   11c64:	d0d1      	beq.n	11c0a <cosem_getAutoConnect+0x5a>
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   11c66:	aa01      	add	r2, sp, #4
   11c68:	4638      	mov	r0, r7
   11c6a:	f7ff fa4e 	bl	1110a <arr_getByIndex>
   11c6e:	2800      	cmp	r0, #0
   11c70:	d1a9      	bne.n	11bc6 <cosem_getAutoConnect+0x16>
                (ret = cosem_setOctetString(data, it)) != 0)
   11c72:	9901      	ldr	r1, [sp, #4]
   11c74:	4628      	mov	r0, r5
   11c76:	f7fc fce1 	bl	e63c <cosem_setOctetString>
   11c7a:	3601      	adds	r6, #1
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   11c7c:	2800      	cmp	r0, #0
   11c7e:	d0ee      	beq.n	11c5e <cosem_getAutoConnect+0xae>
   11c80:	e7a1      	b.n	11bc6 <cosem_getAutoConnect+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11c82:	f44f 7081 	mov.w	r0, #258	; 0x102
   11c86:	e79e      	b.n	11bc6 <cosem_getAutoConnect+0x16>

00011c88 <cosem_getDemandRegister>:
{
   11c88:	b538      	push	{r3, r4, r5, lr}
   11c8a:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   11c8c:	6885      	ldr	r5, [r0, #8]
    gxDemandRegister* object = (gxDemandRegister*)e->target;
   11c8e:	6944      	ldr	r4, [r0, #20]
    switch (e->index)
   11c90:	3b02      	subs	r3, #2
   11c92:	2b07      	cmp	r3, #7
   11c94:	d842      	bhi.n	11d1c <cosem_getDemandRegister+0x94>
   11c96:	e8df f003 	tbb	[pc, r3]
   11c9a:	0d04      	.short	0x0d04
   11c9c:	312a2210 	.word	0x312a2210
   11ca0:	3a34      	.short	0x3a34
        if (e->action)
   11ca2:	f104 0110 	add.w	r1, r4, #16
        if (e->action)
   11ca6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   11caa:	b1db      	cbz	r3, 11ce4 <cosem_getDemandRegister+0x5c>
}
   11cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &object->status);
   11cb0:	f7f2 bc78 	b.w	45a4 <var_copy>
        if (e->action)
   11cb4:	f104 0120 	add.w	r1, r4, #32
   11cb8:	e7f5      	b.n	11ca6 <cosem_getDemandRegister+0x1e>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11cba:	2102      	movs	r1, #2
   11cbc:	4628      	mov	r0, r5
   11cbe:	f7fc fd86 	bl	e7ce <cosem_setStructure>
   11cc2:	bb68      	cbnz	r0, 11d20 <cosem_getDemandRegister+0x98>
            (ret = cosem_setInt8(data, object->scaler)) != 0 ||
   11cc4:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   11cc8:	4628      	mov	r0, r5
   11cca:	f7fc fd4f 	bl	e76c <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11cce:	bb38      	cbnz	r0, 11d20 <cosem_getDemandRegister+0x98>
            (ret = cosem_setEnum(data, object->unit)) != 0)
   11cd0:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
   11cd4:	4628      	mov	r0, r5
}
   11cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, object->unit)) != 0)
   11cda:	f7fc bd94 	b.w	e806 <cosem_setEnum>
        if (e->action)
   11cde:	f104 0138 	add.w	r1, r4, #56	; 0x38
   11ce2:	e7e0      	b.n	11ca6 <cosem_getDemandRegister+0x1e>
            ret = cosem_setVariant(data, &object->status);
   11ce4:	4628      	mov	r0, r5
}
   11ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(data, &object->status);
   11cea:	f7fc bd69 	b.w	e7c0 <cosem_setVariant>
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   11cee:	f104 0148 	add.w	r1, r4, #72	; 0x48
        ret = cosem_setDateTimeAsOctetString(data, &object->startTimeCurrent);
   11cf2:	4628      	mov	r0, r5
}
   11cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setDateTimeAsOctetString(data, &object->startTimeCurrent);
   11cf8:	f7fc bc1b 	b.w	e532 <cosem_setDateTimeAsOctetString>
   11cfc:	f104 0154 	add.w	r1, r4, #84	; 0x54
   11d00:	e7f7      	b.n	11cf2 <cosem_getDemandRegister+0x6a>
        ret = cosem_setUInt32(data, object->period);
   11d02:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11d04:	4628      	mov	r0, r5
}
   11d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt32(data, object->period);
   11d0a:	f7fc bd21 	b.w	e750 <cosem_setUInt32>
        ret = cosem_setUInt16(data, object->numberOfPeriods);
   11d0e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
   11d12:	4628      	mov	r0, r5
}
   11d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt16(data, object->numberOfPeriods);
   11d18:	f7fc bd0c 	b.w	e734 <cosem_setUInt16>
    switch (e->index)
   11d1c:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   11d20:	bd38      	pop	{r3, r4, r5, pc}

00011d22 <cosem_getMacAddressSetup>:
    if (e->index == 2)
   11d22:	7e03      	ldrb	r3, [r0, #24]
   11d24:	2b02      	cmp	r3, #2
   11d26:	d104      	bne.n	11d32 <cosem_getMacAddressSetup+0x10>
        ret = cosem_setOctetString(e->value.byteArr, &object->macAddress);
   11d28:	6941      	ldr	r1, [r0, #20]
   11d2a:	6880      	ldr	r0, [r0, #8]
   11d2c:	3110      	adds	r1, #16
   11d2e:	f7fc bc85 	b.w	e63c <cosem_setOctetString>
}
   11d32:	f44f 7081 	mov.w	r0, #258	; 0x102
   11d36:	4770      	bx	lr

00011d38 <cosem_getExtendedRegister>:
{
   11d38:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   11d3a:	7e02      	ldrb	r2, [r0, #24]
    gxExtendedRegister* object = (gxExtendedRegister*)e->target;
   11d3c:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11d3e:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11d40:	2a02      	cmp	r2, #2
{
   11d42:	4603      	mov	r3, r0
    if (e->index == 2)
   11d44:	d108      	bne.n	11d58 <cosem_getExtendedRegister+0x20>
        if (e->action)
   11d46:	f104 0110 	add.w	r1, r4, #16
        if (e->action)
   11d4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   11d4e:	b1e3      	cbz	r3, 11d8a <cosem_getExtendedRegister+0x52>
}
   11d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &object->status);
   11d54:	f7f2 bc26 	b.w	45a4 <var_copy>
    else if (e->index == 3)
   11d58:	2a03      	cmp	r2, #3
   11d5a:	d111      	bne.n	11d80 <cosem_getExtendedRegister+0x48>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11d5c:	2102      	movs	r1, #2
   11d5e:	4628      	mov	r0, r5
   11d60:	f7fc fd35 	bl	e7ce <cosem_setStructure>
   11d64:	bb08      	cbnz	r0, 11daa <cosem_getExtendedRegister+0x72>
            (ret = cosem_setInt8(data, object->scaler)) != 0 ||
   11d66:	f894 1020 	ldrb.w	r1, [r4, #32]
   11d6a:	4628      	mov	r0, r5
   11d6c:	f7fc fcfe 	bl	e76c <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11d70:	b9d8      	cbnz	r0, 11daa <cosem_getExtendedRegister+0x72>
            (ret = cosem_setUInt8(data, object->unit)) != 0)
   11d72:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   11d76:	4628      	mov	r0, r5
}
   11d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setUInt8(data, object->unit)) != 0)
   11d7c:	f7fc bccc 	b.w	e718 <cosem_setUInt8>
    else if (e->index == 4)
   11d80:	2a04      	cmp	r2, #4
   11d82:	d107      	bne.n	11d94 <cosem_getExtendedRegister+0x5c>
        if (e->action)
   11d84:	f104 0130 	add.w	r1, r4, #48	; 0x30
   11d88:	e7df      	b.n	11d4a <cosem_getExtendedRegister+0x12>
            ret = cosem_setVariant(data, &object->status);
   11d8a:	4628      	mov	r0, r5
}
   11d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(data, &object->status);
   11d90:	f7fc bd16 	b.w	e7c0 <cosem_setVariant>
    else if (e->index == 5)
   11d94:	2a05      	cmp	r2, #5
   11d96:	d106      	bne.n	11da6 <cosem_getExtendedRegister+0x6e>
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   11d98:	f104 0124 	add.w	r1, r4, #36	; 0x24
   11d9c:	4628      	mov	r0, r5
}
   11d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   11da2:	f7fc bbc6 	b.w	e532 <cosem_setDateTimeAsOctetString>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11da6:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   11daa:	bd38      	pop	{r3, r4, r5, pc}

00011dac <cosem_getQualityOfService>:
{
   11dac:	b538      	push	{r3, r4, r5, lr}
   11dae:	460c      	mov	r4, r1
   11db0:	4605      	mov	r5, r0
    if ((ret = cosem_setStructure(ba, 5)) != 0 ||
   11db2:	2105      	movs	r1, #5
   11db4:	4620      	mov	r0, r4
   11db6:	f7fc fd0a 	bl	e7ce <cosem_setStructure>
   11dba:	b9c8      	cbnz	r0, 11df0 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->precedence)) != 0 ||
   11dbc:	7829      	ldrb	r1, [r5, #0]
   11dbe:	4620      	mov	r0, r4
   11dc0:	f7fc fcaa 	bl	e718 <cosem_setUInt8>
    if ((ret = cosem_setStructure(ba, 5)) != 0 ||
   11dc4:	b9a0      	cbnz	r0, 11df0 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->delay)) != 0 ||
   11dc6:	7869      	ldrb	r1, [r5, #1]
   11dc8:	4620      	mov	r0, r4
   11dca:	f7fc fca5 	bl	e718 <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->precedence)) != 0 ||
   11dce:	b978      	cbnz	r0, 11df0 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->reliability)) != 0 ||
   11dd0:	78a9      	ldrb	r1, [r5, #2]
   11dd2:	4620      	mov	r0, r4
   11dd4:	f7fc fca0 	bl	e718 <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->delay)) != 0 ||
   11dd8:	b950      	cbnz	r0, 11df0 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->peakThroughput)) != 0 ||
   11dda:	78e9      	ldrb	r1, [r5, #3]
   11ddc:	4620      	mov	r0, r4
   11dde:	f7fc fc9b 	bl	e718 <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->reliability)) != 0 ||
   11de2:	b928      	cbnz	r0, 11df0 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->meanThroughput)) != 0)
   11de4:	7929      	ldrb	r1, [r5, #4]
   11de6:	4620      	mov	r0, r4
}
   11de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = cosem_setUInt8(ba, service->meanThroughput)) != 0)
   11dec:	f7fc bc94 	b.w	e718 <cosem_setUInt8>
}
   11df0:	bd38      	pop	{r3, r4, r5, pc}

00011df2 <cosem_getGprsSetup>:
{
   11df2:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   11df4:	7e03      	ldrb	r3, [r0, #24]
    gxGPRSSetup* object = (gxGPRSSetup*)e->target;
   11df6:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11df8:	6884      	ldr	r4, [r0, #8]
    if (e->index == 2)
   11dfa:	2b02      	cmp	r3, #2
   11dfc:	d106      	bne.n	11e0c <cosem_getGprsSetup+0x1a>
        ret = cosem_setOctetString(data, &object->apn);
   11dfe:	f105 0110 	add.w	r1, r5, #16
   11e02:	4620      	mov	r0, r4
}
   11e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setOctetString(data, &object->apn);
   11e08:	f7fc bc18 	b.w	e63c <cosem_setOctetString>
    else if (e->index == 3)
   11e0c:	2b03      	cmp	r3, #3
   11e0e:	d105      	bne.n	11e1c <cosem_getGprsSetup+0x2a>
        ret = cosem_setUInt16(data, object->pinCode);
   11e10:	8ba9      	ldrh	r1, [r5, #28]
   11e12:	4620      	mov	r0, r4
}
   11e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt16(data, object->pinCode);
   11e18:	f7fc bc8c 	b.w	e734 <cosem_setUInt16>
    else if (e->index == 4)
   11e1c:	2b04      	cmp	r3, #4
   11e1e:	d111      	bne.n	11e44 <cosem_getGprsSetup+0x52>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11e20:	2102      	movs	r1, #2
   11e22:	4620      	mov	r0, r4
   11e24:	f7fc fcd3 	bl	e7ce <cosem_setStructure>
   11e28:	b970      	cbnz	r0, 11e48 <cosem_getGprsSetup+0x56>
            (ret = cosem_getQualityOfService(&object->defaultQualityOfService, data)) != 0 ||
   11e2a:	4621      	mov	r1, r4
   11e2c:	f105 001e 	add.w	r0, r5, #30
   11e30:	f7ff ffbc 	bl	11dac <cosem_getQualityOfService>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11e34:	b940      	cbnz	r0, 11e48 <cosem_getGprsSetup+0x56>
            (ret = cosem_getQualityOfService(&object->requestedQualityOfService, data)) != 0)
   11e36:	4621      	mov	r1, r4
   11e38:	f105 0023 	add.w	r0, r5, #35	; 0x23
}
   11e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_getQualityOfService(&object->requestedQualityOfService, data)) != 0)
   11e40:	f7ff bfb4 	b.w	11dac <cosem_getQualityOfService>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11e44:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   11e48:	bd38      	pop	{r3, r4, r5, pc}

00011e4a <cosem_getSecuritySetup>:
{
   11e4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   11e4e:	7e03      	ldrb	r3, [r0, #24]
    gxSecuritySetup* object = (gxSecuritySetup*)e->target;
   11e50:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11e52:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11e54:	2b02      	cmp	r3, #2
   11e56:	d105      	bne.n	11e64 <cosem_getSecuritySetup+0x1a>
        ret = cosem_setEnum(data, object->securityPolicy);
   11e58:	7c31      	ldrb	r1, [r6, #16]
        ret = cosem_setEnum(data, object->securitySuite);
   11e5a:	4628      	mov	r0, r5
   11e5c:	f7fc fcd3 	bl	e806 <cosem_setEnum>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subjectAltName, len)) != 0)
   11e60:	4604      	mov	r4, r0
   11e62:	e019      	b.n	11e98 <cosem_getSecuritySetup+0x4e>
    else if (e->index == 3)
   11e64:	2b03      	cmp	r3, #3
   11e66:	d101      	bne.n	11e6c <cosem_getSecuritySetup+0x22>
        ret = cosem_setEnum(data, object->securitySuite);
   11e68:	7c71      	ldrb	r1, [r6, #17]
   11e6a:	e7f6      	b.n	11e5a <cosem_getSecuritySetup+0x10>
    else if (e->index == 4)
   11e6c:	2b04      	cmp	r3, #4
   11e6e:	d105      	bne.n	11e7c <cosem_getSecuritySetup+0x32>
        ret = cosem_setOctetString(data, &object->clientSystemTitle);
   11e70:	f106 0120 	add.w	r1, r6, #32
        ret = cosem_setOctetString(data, &object->serverSystemTitle);
   11e74:	4628      	mov	r0, r5
   11e76:	f7fc fbe1 	bl	e63c <cosem_setOctetString>
   11e7a:	e7f1      	b.n	11e60 <cosem_getSecuritySetup+0x16>
    else if (e->index == 5)
   11e7c:	2b05      	cmp	r3, #5
   11e7e:	d102      	bne.n	11e86 <cosem_getSecuritySetup+0x3c>
        ret = cosem_setOctetString(data, &object->serverSystemTitle);
   11e80:	f106 0114 	add.w	r1, r6, #20
   11e84:	e7f6      	b.n	11e74 <cosem_getSecuritySetup+0x2a>
    else if (e->index == 6)
   11e86:	2b06      	cmp	r3, #6
   11e88:	d15e      	bne.n	11f48 <cosem_getSecuritySetup+0xfe>
        if ((ret = cosem_setArray(data, object->certificates.size)) == 0)
   11e8a:	8e71      	ldrh	r1, [r6, #50]	; 0x32
   11e8c:	4628      	mov	r0, r5
   11e8e:	f7fc fcac 	bl	e7ea <cosem_setArray>
   11e92:	4604      	mov	r4, r0
   11e94:	2800      	cmp	r0, #0
   11e96:	d053      	beq.n	11f40 <cosem_getSecuritySetup+0xf6>
}
   11e98:	4620      	mov	r0, r4
   11e9a:	b002      	add	sp, #8
   11e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   11ea0:	aa01      	add	r2, sp, #4
   11ea2:	4640      	mov	r0, r8
   11ea4:	f7ff f931 	bl	1110a <arr_getByIndex>
   11ea8:	2800      	cmp	r0, #0
   11eaa:	d1d9      	bne.n	11e60 <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setStructure(data, 6)) != 0 ||
   11eac:	2106      	movs	r1, #6
   11eae:	4628      	mov	r0, r5
   11eb0:	f7fc fc8d 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   11eb4:	2800      	cmp	r0, #0
   11eb6:	d1d3      	bne.n	11e60 <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setEnum(data, it->entity)) != 0 ||
   11eb8:	9b01      	ldr	r3, [sp, #4]
   11eba:	4628      	mov	r0, r5
   11ebc:	7819      	ldrb	r1, [r3, #0]
   11ebe:	f7fc fca2 	bl	e806 <cosem_setEnum>
                    (ret = cosem_setStructure(data, 6)) != 0 ||
   11ec2:	2800      	cmp	r0, #0
   11ec4:	d1cc      	bne.n	11e60 <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setEnum(data, it->type)) != 0)
   11ec6:	9b01      	ldr	r3, [sp, #4]
   11ec8:	4628      	mov	r0, r5
   11eca:	7859      	ldrb	r1, [r3, #1]
   11ecc:	f7fc fc9b 	bl	e806 <cosem_setEnum>
                    (ret = cosem_setEnum(data, it->entity)) != 0 ||
   11ed0:	2800      	cmp	r0, #0
   11ed2:	d1c5      	bne.n	11e60 <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->serialNumber);
   11ed4:	9b01      	ldr	r3, [sp, #4]
   11ed6:	6858      	ldr	r0, [r3, #4]
   11ed8:	f7ee ff72 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->serialNumber, len)) != 0)
   11edc:	9b01      	ldr	r3, [sp, #4]
   11ede:	b282      	uxth	r2, r0
   11ee0:	6859      	ldr	r1, [r3, #4]
   11ee2:	4628      	mov	r0, r5
   11ee4:	f7fc fbf7 	bl	e6d6 <cosem_setOctetString2>
   11ee8:	2800      	cmp	r0, #0
   11eea:	d1b9      	bne.n	11e60 <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->issuer);
   11eec:	9b01      	ldr	r3, [sp, #4]
   11eee:	6898      	ldr	r0, [r3, #8]
   11ef0:	f7ee ff66 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->issuer, len)) != 0)
   11ef4:	9b01      	ldr	r3, [sp, #4]
   11ef6:	b282      	uxth	r2, r0
   11ef8:	6899      	ldr	r1, [r3, #8]
   11efa:	4628      	mov	r0, r5
   11efc:	f7fc fbeb 	bl	e6d6 <cosem_setOctetString2>
   11f00:	2800      	cmp	r0, #0
   11f02:	d1ad      	bne.n	11e60 <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->subject);
   11f04:	9b01      	ldr	r3, [sp, #4]
   11f06:	68d8      	ldr	r0, [r3, #12]
   11f08:	f7ee ff5a 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subject, len)) != 0)
   11f0c:	9b01      	ldr	r3, [sp, #4]
   11f0e:	b282      	uxth	r2, r0
   11f10:	68d9      	ldr	r1, [r3, #12]
   11f12:	4628      	mov	r0, r5
   11f14:	f7fc fbdf 	bl	e6d6 <cosem_setOctetString2>
   11f18:	2800      	cmp	r0, #0
   11f1a:	d1a1      	bne.n	11e60 <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->subjectAltName);
   11f1c:	9b01      	ldr	r3, [sp, #4]
   11f1e:	6918      	ldr	r0, [r3, #16]
   11f20:	f7ee ff4e 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subjectAltName, len)) != 0)
   11f24:	9b01      	ldr	r3, [sp, #4]
   11f26:	b282      	uxth	r2, r0
   11f28:	6919      	ldr	r1, [r3, #16]
   11f2a:	4628      	mov	r0, r5
   11f2c:	f7fc fbd3 	bl	e6d6 <cosem_setOctetString2>
   11f30:	3701      	adds	r7, #1
   11f32:	2800      	cmp	r0, #0
   11f34:	d194      	bne.n	11e60 <cosem_getSecuritySetup+0x16>
            for (pos = 0; pos != object->certificates.size; ++pos)
   11f36:	8e73      	ldrh	r3, [r6, #50]	; 0x32
   11f38:	b2b9      	uxth	r1, r7
   11f3a:	428b      	cmp	r3, r1
   11f3c:	d1b0      	bne.n	11ea0 <cosem_getSecuritySetup+0x56>
   11f3e:	e7ab      	b.n	11e98 <cosem_getSecuritySetup+0x4e>
   11f40:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   11f42:	f106 082c 	add.w	r8, r6, #44	; 0x2c
   11f46:	e7f6      	b.n	11f36 <cosem_getSecuritySetup+0xec>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11f48:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   11f4c:	e7a4      	b.n	11e98 <cosem_getSecuritySetup+0x4e>

00011f4e <cosem_getIecHdlcSetup>:
    gxIecHdlcSetup* object = (gxIecHdlcSetup*)e->target;
   11f4e:	7e02      	ldrb	r2, [r0, #24]
   11f50:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   11f52:	3a02      	subs	r2, #2
   11f54:	2a07      	cmp	r2, #7
   11f56:	d81b      	bhi.n	11f90 <cosem_getIecHdlcSetup+0x42>
   11f58:	e8df f002 	tbb	[pc, r2]
   11f5c:	0e0c0804 	.word	0x0e0c0804
   11f60:	18161412 	.word	0x18161412
        ret = cosem_setEnum(e->value.byteArr, object->communicationSpeed);
   11f64:	7d99      	ldrb	r1, [r3, #22]
   11f66:	6880      	ldr	r0, [r0, #8]
   11f68:	f7fc bc4d 	b.w	e806 <cosem_setEnum>
        ret = cosem_setUInt8(e->value.byteArr, object->windowSizeTransmit);
   11f6c:	7dd9      	ldrb	r1, [r3, #23]
        ret = cosem_setUInt8(e->value.byteArr, object->windowSizeReceive);
   11f6e:	6880      	ldr	r0, [r0, #8]
   11f70:	f7fc bbd2 	b.w	e718 <cosem_setUInt8>
   11f74:	7e19      	ldrb	r1, [r3, #24]
   11f76:	e7fa      	b.n	11f6e <cosem_getIecHdlcSetup+0x20>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumInfoLengthTransmit);
   11f78:	8a99      	ldrh	r1, [r3, #20]
        ret = cosem_setUInt16(e->value.byteArr, object->deviceAddress);
   11f7a:	6880      	ldr	r0, [r0, #8]
   11f7c:	f7fc bbda 	b.w	e734 <cosem_setUInt16>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumInfoLengthReceive);
   11f80:	8b99      	ldrh	r1, [r3, #28]
   11f82:	e7fa      	b.n	11f7a <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->interCharachterTimeout);
   11f84:	8b59      	ldrh	r1, [r3, #26]
   11f86:	e7f8      	b.n	11f7a <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   11f88:	8a19      	ldrh	r1, [r3, #16]
   11f8a:	e7f6      	b.n	11f7a <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->deviceAddress);
   11f8c:	8a59      	ldrh	r1, [r3, #18]
   11f8e:	e7f4      	b.n	11f7a <cosem_getIecHdlcSetup+0x2c>
}
   11f90:	f44f 7081 	mov.w	r0, #258	; 0x102
   11f94:	4770      	bx	lr

00011f96 <cosem_getIecLocalPortSetup>:
    if (e->index == 2)
   11f96:	7e03      	ldrb	r3, [r0, #24]
    gxLocalPortSetup* object = (gxLocalPortSetup*)e->target;
   11f98:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   11f9a:	2b02      	cmp	r3, #2
   11f9c:	d104      	bne.n	11fa8 <cosem_getIecLocalPortSetup+0x12>
        ret = cosem_setEnum(e->value.byteArr, object->defaultMode);
   11f9e:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaudrate);
   11fa2:	6880      	ldr	r0, [r0, #8]
   11fa4:	f7fc bc2f 	b.w	e806 <cosem_setEnum>
    else if (e->index == 3)
   11fa8:	2b03      	cmp	r3, #3
   11faa:	d102      	bne.n	11fb2 <cosem_getIecLocalPortSetup+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaudrate);
   11fac:	f891 1035 	ldrb.w	r1, [r1, #53]	; 0x35
   11fb0:	e7f7      	b.n	11fa2 <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 4)
   11fb2:	2b04      	cmp	r3, #4
   11fb4:	d102      	bne.n	11fbc <cosem_getIecLocalPortSetup+0x26>
        ret = cosem_setEnum(e->value.byteArr, object->proposedBaudrate);
   11fb6:	f891 1036 	ldrb.w	r1, [r1, #54]	; 0x36
   11fba:	e7f2      	b.n	11fa2 <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 5)
   11fbc:	2b05      	cmp	r3, #5
   11fbe:	d102      	bne.n	11fc6 <cosem_getIecLocalPortSetup+0x30>
        ret = cosem_setEnum(e->value.byteArr, object->responseTime);
   11fc0:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
   11fc4:	e7ed      	b.n	11fa2 <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 6)
   11fc6:	2b06      	cmp	r3, #6
   11fc8:	d103      	bne.n	11fd2 <cosem_getIecLocalPortSetup+0x3c>
        ret = cosem_setOctetString(e->value.byteArr, &object->deviceAddress);
   11fca:	3138      	adds	r1, #56	; 0x38
        ret = cosem_setOctetString(e->value.byteArr, &object->password5);
   11fcc:	6880      	ldr	r0, [r0, #8]
   11fce:	f7fc bb35 	b.w	e63c <cosem_setOctetString>
    else if (e->index == 7)
   11fd2:	2b07      	cmp	r3, #7
   11fd4:	d101      	bne.n	11fda <cosem_getIecLocalPortSetup+0x44>
        ret = cosem_setOctetString(e->value.byteArr, &object->password1);
   11fd6:	3110      	adds	r1, #16
   11fd8:	e7f8      	b.n	11fcc <cosem_getIecLocalPortSetup+0x36>
    else if (e->index == 8)
   11fda:	2b08      	cmp	r3, #8
   11fdc:	d101      	bne.n	11fe2 <cosem_getIecLocalPortSetup+0x4c>
        ret = cosem_setOctetString(e->value.byteArr, &object->password2);
   11fde:	311c      	adds	r1, #28
   11fe0:	e7f4      	b.n	11fcc <cosem_getIecLocalPortSetup+0x36>
    else if (e->index == 9)
   11fe2:	2b09      	cmp	r3, #9
   11fe4:	d101      	bne.n	11fea <cosem_getIecLocalPortSetup+0x54>
        ret = cosem_setOctetString(e->value.byteArr, &object->password5);
   11fe6:	3128      	adds	r1, #40	; 0x28
   11fe8:	e7f0      	b.n	11fcc <cosem_getIecLocalPortSetup+0x36>
}
   11fea:	f44f 7081 	mov.w	r0, #258	; 0x102
   11fee:	4770      	bx	lr

00011ff0 <cosem_getIecTwistedPairSetup>:
{
   11ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   11ff2:	7e03      	ldrb	r3, [r0, #24]
    gxIecTwistedPairSetup* object = (gxIecTwistedPairSetup*)e->target;
   11ff4:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11ff6:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11ff8:	2b02      	cmp	r3, #2
   11ffa:	d105      	bne.n	12008 <cosem_getIecTwistedPairSetup+0x18>
        ret = cosem_setEnum(e->value.byteArr, object->mode);
   11ffc:	7c21      	ldrb	r1, [r4, #16]
        ret = cosem_setEnum(e->value.byteArr, object->speed);
   11ffe:	4628      	mov	r0, r5
   12000:	f7fc fc01 	bl	e806 <cosem_setEnum>
}
   12004:	b003      	add	sp, #12
   12006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 3)
   12008:	2b03      	cmp	r3, #3
   1200a:	d101      	bne.n	12010 <cosem_getIecTwistedPairSetup+0x20>
        ret = cosem_setEnum(e->value.byteArr, object->speed);
   1200c:	7c61      	ldrb	r1, [r4, #17]
   1200e:	e7f6      	b.n	11ffe <cosem_getIecTwistedPairSetup+0xe>
    else if (e->index == 4)
   12010:	2b04      	cmp	r3, #4
   12012:	d11e      	bne.n	12052 <cosem_getIecTwistedPairSetup+0x62>
        if ((ret = cosem_setArray(data, (unsigned short)object->primaryAddresses.size)) == 0)
   12014:	8b61      	ldrh	r1, [r4, #26]
   12016:	4628      	mov	r0, r5
   12018:	f7fc fbe7 	bl	e7ea <cosem_setArray>
   1201c:	2800      	cmp	r0, #0
   1201e:	d1f1      	bne.n	12004 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->primaryAddresses.size; ++pos)
   12020:	4606      	mov	r6, r0
                if ((ret = bb_getUInt8ByIndex(&object->primaryAddresses, pos, &ch)) != 0 ||
   12022:	f104 0714 	add.w	r7, r4, #20
   12026:	e00f      	b.n	12048 <cosem_getIecTwistedPairSetup+0x58>
   12028:	f10d 0207 	add.w	r2, sp, #7
   1202c:	4631      	mov	r1, r6
   1202e:	4638      	mov	r0, r7
   12030:	f7fb fe33 	bl	dc9a <bb_getUInt8ByIndex>
   12034:	2800      	cmp	r0, #0
   12036:	d1e5      	bne.n	12004 <cosem_getIecTwistedPairSetup+0x14>
                    (ret = cosem_setUInt8(data, ch)) != 0)
   12038:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1203c:	4628      	mov	r0, r5
   1203e:	f7fc fb6b 	bl	e718 <cosem_setUInt8>
                if ((ret = bb_getUInt8ByIndex(&object->primaryAddresses, pos, &ch)) != 0 ||
   12042:	2800      	cmp	r0, #0
   12044:	d1de      	bne.n	12004 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->primaryAddresses.size; ++pos)
   12046:	3601      	adds	r6, #1
   12048:	8b63      	ldrh	r3, [r4, #26]
   1204a:	42b3      	cmp	r3, r6
   1204c:	d1ec      	bne.n	12028 <cosem_getIecTwistedPairSetup+0x38>
            for (pos = 0; pos != object->tabis.size; ++pos)
   1204e:	2000      	movs	r0, #0
   12050:	e7d8      	b.n	12004 <cosem_getIecTwistedPairSetup+0x14>
    else if (e->index == 5)
   12052:	2b05      	cmp	r3, #5
   12054:	d11d      	bne.n	12092 <cosem_getIecTwistedPairSetup+0xa2>
        if ((ret = cosem_setArray(data, (unsigned short)object->tabis.size)) == 0)
   12056:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   12058:	4628      	mov	r0, r5
   1205a:	f7fc fbc6 	bl	e7ea <cosem_setArray>
   1205e:	2800      	cmp	r0, #0
   12060:	d1d0      	bne.n	12004 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->tabis.size; ++pos)
   12062:	4606      	mov	r6, r0
                if ((ret = bb_getUInt8ByIndex(&object->tabis, pos, &ch)) != 0 ||
   12064:	f104 0720 	add.w	r7, r4, #32
   12068:	e00f      	b.n	1208a <cosem_getIecTwistedPairSetup+0x9a>
   1206a:	f10d 0207 	add.w	r2, sp, #7
   1206e:	4631      	mov	r1, r6
   12070:	4638      	mov	r0, r7
   12072:	f7fb fe12 	bl	dc9a <bb_getUInt8ByIndex>
   12076:	2800      	cmp	r0, #0
   12078:	d1c4      	bne.n	12004 <cosem_getIecTwistedPairSetup+0x14>
                    (ret = cosem_setInt8(data, (char)ch)) != 0)
   1207a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1207e:	4628      	mov	r0, r5
   12080:	f7fc fb74 	bl	e76c <cosem_setInt8>
                if ((ret = bb_getUInt8ByIndex(&object->tabis, pos, &ch)) != 0 ||
   12084:	2800      	cmp	r0, #0
   12086:	d1bd      	bne.n	12004 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->tabis.size; ++pos)
   12088:	3601      	adds	r6, #1
   1208a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1208c:	42b3      	cmp	r3, r6
   1208e:	d1ec      	bne.n	1206a <cosem_getIecTwistedPairSetup+0x7a>
   12090:	e7dd      	b.n	1204e <cosem_getIecTwistedPairSetup+0x5e>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   12092:	f44f 7081 	mov.w	r0, #258	; 0x102
   12096:	e7b5      	b.n	12004 <cosem_getIecTwistedPairSetup+0x14>

00012098 <cosem_getMbusSlavePortSetup>:
    if (e->index == 2)
   12098:	7e02      	ldrb	r2, [r0, #24]
    gxMbusSlavePortSetup* object = (gxMbusSlavePortSetup*)e->target;
   1209a:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   1209c:	2a02      	cmp	r2, #2
   1209e:	d103      	bne.n	120a8 <cosem_getMbusSlavePortSetup+0x10>
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaud);
   120a0:	7c19      	ldrb	r1, [r3, #16]
        ret = cosem_setEnum(e->value.byteArr, object->availableBaud);
   120a2:	6880      	ldr	r0, [r0, #8]
   120a4:	f7fc bbaf 	b.w	e806 <cosem_setEnum>
    else if (e->index == 3)
   120a8:	2a03      	cmp	r2, #3
   120aa:	d101      	bne.n	120b0 <cosem_getMbusSlavePortSetup+0x18>
        ret = cosem_setEnum(e->value.byteArr, object->availableBaud);
   120ac:	7c59      	ldrb	r1, [r3, #17]
   120ae:	e7f8      	b.n	120a2 <cosem_getMbusSlavePortSetup+0xa>
    else if (e->index == 4)
   120b0:	2a04      	cmp	r2, #4
   120b2:	d101      	bne.n	120b8 <cosem_getMbusSlavePortSetup+0x20>
        ret = cosem_setEnum(e->value.byteArr, object->addressState);
   120b4:	7c99      	ldrb	r1, [r3, #18]
   120b6:	e7f4      	b.n	120a2 <cosem_getMbusSlavePortSetup+0xa>
    else if (e->index == 5)
   120b8:	2a05      	cmp	r2, #5
   120ba:	d103      	bne.n	120c4 <cosem_getMbusSlavePortSetup+0x2c>
        ret = cosem_setUInt8(e->value.byteArr, object->busAddress);
   120bc:	7cd9      	ldrb	r1, [r3, #19]
   120be:	6880      	ldr	r0, [r0, #8]
   120c0:	f7fc bb2a 	b.w	e718 <cosem_setUInt8>
}
   120c4:	f44f 7081 	mov.w	r0, #258	; 0x102
   120c8:	4770      	bx	lr

000120ca <cosem_getImageTransfer>:
{
   120ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   120ce:	7e03      	ldrb	r3, [r0, #24]
    gxImageTransfer* object = (gxImageTransfer*)e->target;
   120d0:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   120d2:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   120d4:	2b02      	cmp	r3, #2
{
   120d6:	4607      	mov	r7, r0
    if (e->index == 2)
   120d8:	d104      	bne.n	120e4 <cosem_getImageTransfer+0x1a>
        ret = cosem_setUInt32(e->value.byteArr, object->imageBlockSize);
   120da:	6931      	ldr	r1, [r6, #16]
        ret = cosem_setUInt32(e->value.byteArr, object->imageFirstNotTransferredBlockNumber);
   120dc:	4628      	mov	r0, r5
   120de:	f7fc fb37 	bl	e750 <cosem_setUInt32>
   120e2:	e019      	b.n	12118 <cosem_getImageTransfer+0x4e>
    else if (e->index == 3)
   120e4:	2b03      	cmp	r3, #3
   120e6:	d119      	bne.n	1211c <cosem_getImageTransfer+0x52>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   120e8:	2104      	movs	r1, #4
   120ea:	4628      	mov	r0, r5
   120ec:	f7fb fc47 	bl	d97e <bb_setUInt8>
   120f0:	4604      	mov	r4, r0
   120f2:	2800      	cmp	r0, #0
   120f4:	d138      	bne.n	12168 <cosem_getImageTransfer+0x9e>
            (ret = hlp_setObjectCount(object->imageTransferredBlocksStatus.size, e->value.byteArr)) != 0)
   120f6:	68b9      	ldr	r1, [r7, #8]
   120f8:	8b70      	ldrh	r0, [r6, #26]
   120fa:	f008 fd3c 	bl	1ab76 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   120fe:	4604      	mov	r4, r0
   12100:	bb90      	cbnz	r0, 12168 <cosem_getImageTransfer+0x9e>
        if (object->imageTransferredBlocksStatus.size != 0)
   12102:	8b70      	ldrh	r0, [r6, #26]
   12104:	b380      	cbz	r0, 12168 <cosem_getImageTransfer+0x9e>
            ret = bb_set(e->value.byteArr, object->imageTransferredBlocksStatus.data,
   12106:	68bc      	ldr	r4, [r7, #8]
   12108:	6975      	ldr	r5, [r6, #20]
   1210a:	f7ef fa37 	bl	157c <ba_getByteCount>
   1210e:	4629      	mov	r1, r5
   12110:	4602      	mov	r2, r0
   12112:	4620      	mov	r0, r4
   12114:	f7fb fd19 	bl	db4a <bb_set>
                        (ret = bb_set(data, ai->signature.data, ai->signature.size)) != 0)
   12118:	4604      	mov	r4, r0
   1211a:	e025      	b.n	12168 <cosem_getImageTransfer+0x9e>
    else if (e->index == 4)
   1211c:	2b04      	cmp	r3, #4
   1211e:	d101      	bne.n	12124 <cosem_getImageTransfer+0x5a>
        ret = cosem_setUInt32(e->value.byteArr, object->imageFirstNotTransferredBlockNumber);
   12120:	69f1      	ldr	r1, [r6, #28]
   12122:	e7db      	b.n	120dc <cosem_getImageTransfer+0x12>
    else if (e->index == 5)
   12124:	2b05      	cmp	r3, #5
   12126:	d105      	bne.n	12134 <cosem_getImageTransfer+0x6a>
        ret = cosem_setBoolean(e->value.byteArr, object->imageTransferEnabled);
   12128:	f896 1020 	ldrb.w	r1, [r6, #32]
   1212c:	4628      	mov	r0, r5
   1212e:	f7fc fb78 	bl	e822 <cosem_setBoolean>
   12132:	e7f1      	b.n	12118 <cosem_getImageTransfer+0x4e>
    else if (e->index == 6)
   12134:	2b06      	cmp	r3, #6
   12136:	d105      	bne.n	12144 <cosem_getImageTransfer+0x7a>
        ret = cosem_setEnum(e->value.byteArr, object->imageTransferStatus);
   12138:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
   1213c:	4628      	mov	r0, r5
   1213e:	f7fc fb62 	bl	e806 <cosem_setEnum>
   12142:	e7e9      	b.n	12118 <cosem_getImageTransfer+0x4e>
    else if (e->index == 7)
   12144:	2b07      	cmp	r3, #7
   12146:	d166      	bne.n	12216 <cosem_getImageTransfer+0x14c>
        if (object->imageTransferStatus != DLMS_IMAGE_TRANSFER_STATUS_VERIFICATION_SUCCESSFUL)
   12148:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   1214c:	2b03      	cmp	r3, #3
   1214e:	d004      	beq.n	1215a <cosem_getImageTransfer+0x90>
            if ((ret = cosem_setArray(data, 0)) != 0)
   12150:	2100      	movs	r1, #0
   12152:	4628      	mov	r0, r5
   12154:	f7fc fb49 	bl	e7ea <cosem_setArray>
   12158:	e7de      	b.n	12118 <cosem_getImageTransfer+0x4e>
            if ((ret = cosem_setArray(data, object->imageActivateInfo.size)) == 0)
   1215a:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   1215c:	4628      	mov	r0, r5
   1215e:	f7fc fb44 	bl	e7ea <cosem_setArray>
   12162:	4604      	mov	r4, r0
   12164:	2800      	cmp	r0, #0
   12166:	d052      	beq.n	1220e <cosem_getImageTransfer+0x144>
}
   12168:	4620      	mov	r0, r4
   1216a:	b002      	add	sp, #8
   1216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   12170:	aa01      	add	r2, sp, #4
   12172:	4640      	mov	r0, r8
   12174:	f7fe ffc9 	bl	1110a <arr_getByIndex>
   12178:	2800      	cmp	r0, #0
   1217a:	d1cd      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1217c:	2102      	movs	r1, #2
   1217e:	4628      	mov	r0, r5
   12180:	f7fb fbfd 	bl	d97e <bb_setUInt8>
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   12184:	2800      	cmp	r0, #0
   12186:	d1c7      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, 3)) != 0 ||
   12188:	2103      	movs	r1, #3
   1218a:	4628      	mov	r0, r5
   1218c:	f7fb fbf7 	bl	d97e <bb_setUInt8>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12190:	2800      	cmp	r0, #0
   12192:	d1c1      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   12194:	2106      	movs	r1, #6
   12196:	4628      	mov	r0, r5
   12198:	f7fb fbf1 	bl	d97e <bb_setUInt8>
                        (ret = bb_setUInt8(data, 3)) != 0 ||
   1219c:	2800      	cmp	r0, #0
   1219e:	d1bb      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt32(data, ai->size)) != 0 ||
   121a0:	9b01      	ldr	r3, [sp, #4]
   121a2:	4628      	mov	r0, r5
   121a4:	6819      	ldr	r1, [r3, #0]
   121a6:	f7fb fc2e 	bl	da06 <bb_setUInt32>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   121aa:	2800      	cmp	r0, #0
   121ac:	d1b4      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   121ae:	2109      	movs	r1, #9
   121b0:	4628      	mov	r0, r5
   121b2:	f7fb fbe4 	bl	d97e <bb_setUInt8>
                        (ret = bb_setUInt32(data, ai->size)) != 0 ||
   121b6:	2800      	cmp	r0, #0
   121b8:	d1ae      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
   121ba:	9b01      	ldr	r3, [sp, #4]
   121bc:	4629      	mov	r1, r5
   121be:	8958      	ldrh	r0, [r3, #10]
   121c0:	f008 fcd9 	bl	1ab76 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   121c4:	2800      	cmp	r0, #0
   121c6:	d1a7      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
   121c8:	9b01      	ldr	r3, [sp, #4]
   121ca:	4628      	mov	r0, r5
   121cc:	895a      	ldrh	r2, [r3, #10]
   121ce:	6859      	ldr	r1, [r3, #4]
   121d0:	f7fb fcbb 	bl	db4a <bb_set>
                        (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
   121d4:	2800      	cmp	r0, #0
   121d6:	d19f      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   121d8:	2109      	movs	r1, #9
   121da:	4628      	mov	r0, r5
   121dc:	f7fb fbcf 	bl	d97e <bb_setUInt8>
                        (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
   121e0:	2800      	cmp	r0, #0
   121e2:	d199      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
   121e4:	9b01      	ldr	r3, [sp, #4]
   121e6:	4629      	mov	r1, r5
   121e8:	8ad8      	ldrh	r0, [r3, #22]
   121ea:	f008 fcc4 	bl	1ab76 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   121ee:	2800      	cmp	r0, #0
   121f0:	d192      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                        (ret = bb_set(data, ai->signature.data, ai->signature.size)) != 0)
   121f2:	9b01      	ldr	r3, [sp, #4]
   121f4:	4628      	mov	r0, r5
   121f6:	8ada      	ldrh	r2, [r3, #22]
   121f8:	6919      	ldr	r1, [r3, #16]
   121fa:	f7fb fca6 	bl	db4a <bb_set>
   121fe:	3701      	adds	r7, #1
                        (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
   12200:	2800      	cmp	r0, #0
   12202:	d189      	bne.n	12118 <cosem_getImageTransfer+0x4e>
                for (pos = 0; pos != object->imageActivateInfo.size; ++pos)
   12204:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   12206:	b2b9      	uxth	r1, r7
   12208:	428b      	cmp	r3, r1
   1220a:	d1b1      	bne.n	12170 <cosem_getImageTransfer+0xa6>
   1220c:	e7ac      	b.n	12168 <cosem_getImageTransfer+0x9e>
   1220e:	4607      	mov	r7, r0
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   12210:	f106 0824 	add.w	r8, r6, #36	; 0x24
   12214:	e7f6      	b.n	12204 <cosem_getImageTransfer+0x13a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12216:	f44f 7481 	mov.w	r4, #258	; 0x102
   1221a:	e7a5      	b.n	12168 <cosem_getImageTransfer+0x9e>

0001221c <getColumns>:
{
   1221c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12220:	460f      	mov	r7, r1
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   12222:	88c9      	ldrh	r1, [r1, #6]
{
   12224:	461d      	mov	r5, r3
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   12226:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1222a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   1222e:	3102      	adds	r1, #2
{
   12230:	4681      	mov	r9, r0
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   12232:	b289      	uxth	r1, r1
   12234:	4610      	mov	r0, r2
{
   12236:	4614      	mov	r4, r2
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   12238:	f7fb fb3e 	bl	d8b8 <bb_capacity>
   1223c:	4606      	mov	r6, r0
   1223e:	2800      	cmp	r0, #0
   12240:	d175      	bne.n	1232e <getColumns+0x112>
    if (!e->transaction)
   12242:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
   12246:	2b00      	cmp	r3, #0
   12248:	d05f      	beq.n	1230a <getColumns+0xee>
    for (pos = e->transactionStartIndex; pos != list->size; ++pos)
   1224a:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
   1224e:	88fb      	ldrh	r3, [r7, #6]
   12250:	4598      	cmp	r8, r3
   12252:	d06c      	beq.n	1232e <getColumns+0x112>
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   12254:	aa01      	add	r2, sp, #4
   12256:	fa1f f188 	uxth.w	r1, r8
   1225a:	4638      	mov	r0, r7
        pduSize = (uint16_t)ba->size;
   1225c:	f8b4 a006 	ldrh.w	sl, [r4, #6]
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   12260:	f7fe ff53 	bl	1110a <arr_getByIndex>
   12264:	2800      	cmp	r0, #0
   12266:	d166      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12268:	2102      	movs	r1, #2
   1226a:	4620      	mov	r0, r4
   1226c:	f7fb fb87 	bl	d97e <bb_setUInt8>
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   12270:	2800      	cmp	r0, #0
   12272:	d160      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, 4)) != 0 ||
   12274:	2104      	movs	r1, #4
   12276:	4620      	mov	r0, r4
   12278:	f7fb fb81 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1227c:	2800      	cmp	r0, #0
   1227e:	d15a      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12280:	2112      	movs	r1, #18
   12282:	4620      	mov	r0, r4
   12284:	f7fb fb7b 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(ba, 4)) != 0 ||
   12288:	2800      	cmp	r0, #0
   1228a:	d154      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
   1228c:	9b01      	ldr	r3, [sp, #4]
   1228e:	681b      	ldr	r3, [r3, #0]
   12290:	4620      	mov	r0, r4
   12292:	8819      	ldrh	r1, [r3, #0]
   12294:	f7fb fb95 	bl	d9c2 <bb_setUInt16>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12298:	2800      	cmp	r0, #0
   1229a:	d14c      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1229c:	2109      	movs	r1, #9
   1229e:	4620      	mov	r0, r4
   122a0:	f7fb fb6d 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
   122a4:	2800      	cmp	r0, #0
   122a6:	d146      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, 6)) != 0 ||
   122a8:	2106      	movs	r1, #6
   122aa:	4620      	mov	r0, r4
   122ac:	f7fb fb67 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   122b0:	2800      	cmp	r0, #0
   122b2:	d140      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   122b4:	9b01      	ldr	r3, [sp, #4]
   122b6:	6819      	ldr	r1, [r3, #0]
   122b8:	2206      	movs	r2, #6
   122ba:	4411      	add	r1, r2
   122bc:	4620      	mov	r0, r4
   122be:	f7fb fc44 	bl	db4a <bb_set>
            (ret = bb_setUInt8(ba, 6)) != 0 ||
   122c2:	2800      	cmp	r0, #0
   122c4:	d137      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
   122c6:	210f      	movs	r1, #15
   122c8:	4620      	mov	r0, r4
   122ca:	f7fb fb58 	bl	d97e <bb_setUInt8>
            (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   122ce:	2800      	cmp	r0, #0
   122d0:	d131      	bne.n	12336 <getColumns+0x11a>
            (ret = bb_setInt8(ba, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   122d2:	9b01      	ldr	r3, [sp, #4]
   122d4:	685b      	ldr	r3, [r3, #4]
   122d6:	4620      	mov	r0, r4
   122d8:	7819      	ldrb	r1, [r3, #0]
   122da:	f7fb fc2d 	bl	db38 <bb_setInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
   122de:	bb50      	cbnz	r0, 12336 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   122e0:	2112      	movs	r1, #18
   122e2:	4620      	mov	r0, r4
   122e4:	f7fb fb4b 	bl	d97e <bb_setUInt8>
            (ret = bb_setInt8(ba, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   122e8:	bb28      	cbnz	r0, 12336 <getColumns+0x11a>
            (ret = bb_setUInt16(ba, ((gxTarget*)it->value)->dataIndex)) != 0)
   122ea:	9b01      	ldr	r3, [sp, #4]
   122ec:	685b      	ldr	r3, [r3, #4]
   122ee:	4620      	mov	r0, r4
   122f0:	8859      	ldrh	r1, [r3, #2]
   122f2:	f7fb fb66 	bl	d9c2 <bb_setUInt16>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   122f6:	b9f0      	cbnz	r0, 12336 <getColumns+0x11a>
        if (settings->server)
   122f8:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
   122fc:	b973      	cbnz	r3, 1231c <getColumns+0x100>
        ++e->transactionStartIndex;
   122fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   12300:	3301      	adds	r3, #1
   12302:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = e->transactionStartIndex; pos != list->size; ++pos)
   12304:	f108 0801 	add.w	r8, r8, #1
   12308:	e7a1      	b.n	1224e <getColumns+0x32>
   1230a:	88f9      	ldrh	r1, [r7, #6]
        e->transactionEndIndex = list->size;
   1230c:	63e9      	str	r1, [r5, #60]	; 0x3c
        if ((ret = cosem_setArray(ba, list->size)) != 0)
   1230e:	4620      	mov	r0, r4
   12310:	f7fc fa6b 	bl	e7ea <cosem_setArray>
   12314:	2800      	cmp	r0, #0
   12316:	d098      	beq.n	1224a <getColumns+0x2e>
   12318:	4606      	mov	r6, r0
   1231a:	e008      	b.n	1232e <getColumns+0x112>
            if (dlms_isPduFull(settings, ba, NULL))
   1231c:	4602      	mov	r2, r0
   1231e:	4621      	mov	r1, r4
   12320:	4648      	mov	r0, r9
   12322:	f7fe fdca 	bl	10eba <dlms_isPduFull>
   12326:	2800      	cmp	r0, #0
   12328:	d0e9      	beq.n	122fe <getColumns+0xe2>
        ba->size = pduSize;
   1232a:	f8a4 a006 	strh.w	sl, [r4, #6]
}
   1232e:	4630      	mov	r0, r6
   12330:	b002      	add	sp, #8
   12332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   12336:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   1233a:	d1ed      	bne.n	12318 <getColumns+0xfc>
   1233c:	e7f5      	b.n	1232a <getColumns+0x10e>

0001233e <cosem_getRow>:
{
   1233e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12342:	4616      	mov	r6, r2
    if ((ret = arr_getByIndex(table, (uint16_t)index, (void**)&row)) != 0)
   12344:	b289      	uxth	r1, r1
   12346:	aa01      	add	r2, sp, #4
{
   12348:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   1234c:	461f      	mov	r7, r3
    if ((ret = arr_getByIndex(table, (uint16_t)index, (void**)&row)) != 0)
   1234e:	f7fe fedc 	bl	1110a <arr_getByIndex>
   12352:	4604      	mov	r4, r0
   12354:	b998      	cbnz	r0, 1237e <cosem_getRow+0x40>
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0)
   12356:	2102      	movs	r1, #2
   12358:	4640      	mov	r0, r8
   1235a:	f7fb fb10 	bl	d97e <bb_setUInt8>
   1235e:	4604      	mov	r4, r0
   12360:	b968      	cbnz	r0, 1237e <cosem_getRow+0x40>
    if (columns->size != 0)
   12362:	88f8      	ldrh	r0, [r7, #6]
        if ((ret = hlp_setObjectCount(columns->size, data)) != 0)
   12364:	4641      	mov	r1, r8
    if (columns->size != 0)
   12366:	b170      	cbz	r0, 12386 <cosem_getRow+0x48>
        if ((ret = hlp_setObjectCount(captureObjects->size, data)) != 0)
   12368:	f008 fc05 	bl	1ab76 <hlp_setObjectCount>
   1236c:	b108      	cbz	r0, 12372 <cosem_getRow+0x34>
   1236e:	4604      	mov	r4, r0
   12370:	e005      	b.n	1237e <cosem_getRow+0x40>
{
   12372:	f04f 0900 	mov.w	r9, #0
   12376:	464d      	mov	r5, r9
    for (pos = 0; pos != captureObjects->size; ++pos)
   12378:	88f3      	ldrh	r3, [r6, #6]
   1237a:	42ab      	cmp	r3, r5
   1237c:	d105      	bne.n	1238a <cosem_getRow+0x4c>
}
   1237e:	4620      	mov	r0, r4
   12380:	b003      	add	sp, #12
   12382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((ret = hlp_setObjectCount(captureObjects->size, data)) != 0)
   12386:	88f0      	ldrh	r0, [r6, #6]
   12388:	e7ee      	b.n	12368 <cosem_getRow+0x2a>
        if (columns->size != 0)
   1238a:	88fb      	ldrh	r3, [r7, #6]
   1238c:	b14b      	cbz	r3, 123a2 <cosem_getRow+0x64>
            if (captureObjects->data[pos] != columns->data[colPos])
   1238e:	6832      	ldr	r2, [r6, #0]
   12390:	683b      	ldr	r3, [r7, #0]
   12392:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   12396:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1239a:	429a      	cmp	r2, r3
   1239c:	d112      	bne.n	123c4 <cosem_getRow+0x86>
            ++colPos;
   1239e:	f109 0901 	add.w	r9, r9, #1
        if ((ret = va_getByIndex(row, pos, &col)) != 0)
   123a2:	9801      	ldr	r0, [sp, #4]
   123a4:	466a      	mov	r2, sp
   123a6:	4629      	mov	r1, r5
   123a8:	f009 f91b 	bl	1b5e2 <va_getByIndex>
   123ac:	2800      	cmp	r0, #0
   123ae:	d1de      	bne.n	1236e <cosem_getRow+0x30>
        if (col->vt == DLMS_DATA_TYPE_DATETIME)
   123b0:	9800      	ldr	r0, [sp, #0]
   123b2:	7801      	ldrb	r1, [r0, #0]
   123b4:	2919      	cmp	r1, #25
   123b6:	d107      	bne.n	123c8 <cosem_getRow+0x8a>
            if ((ret = var_getBytes2(col, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0)
   123b8:	4642      	mov	r2, r8
   123ba:	2109      	movs	r1, #9
   123bc:	f009 fa4e 	bl	1b85c <var_getBytes2>
            if ((ret = dlms_setData(data, col->vt, col)) != 0)
   123c0:	2800      	cmp	r0, #0
   123c2:	d1d4      	bne.n	1236e <cosem_getRow+0x30>
    for (pos = 0; pos != captureObjects->size; ++pos)
   123c4:	3501      	adds	r5, #1
   123c6:	e7d7      	b.n	12378 <cosem_getRow+0x3a>
            if ((ret = dlms_setData(data, col->vt, col)) != 0)
   123c8:	4602      	mov	r2, r0
   123ca:	4640      	mov	r0, r8
   123cc:	f7fc fc02 	bl	ebd4 <dlms_setData>
   123d0:	e7f6      	b.n	123c0 <cosem_getRow+0x82>

000123d2 <profileGeneric_getData>:
{
   123d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d6:	4698      	mov	r8, r3
   123d8:	b087      	sub	sp, #28
    if (!e->transaction)
   123da:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
{
   123de:	9e10      	ldr	r6, [sp, #64]	; 0x40
   123e0:	4681      	mov	r9, r0
   123e2:	460d      	mov	r5, r1
   123e4:	4617      	mov	r7, r2
    if (!e->transaction)
   123e6:	b1f3      	cbz	r3, 12426 <profileGeneric_getData+0x54>
    arr_init(&columns);
   123e8:	a803      	add	r0, sp, #12
   123ea:	f7fe fe22 	bl	11032 <arr_init>
    if (e->selector == 2)
   123ee:	7e69      	ldrb	r1, [r5, #25]
   123f0:	2902      	cmp	r1, #2
   123f2:	d107      	bne.n	12404 <profileGeneric_getData+0x32>
        if ((ret = cosem_getColumns(captureObjects, e->selector, &e->parameters, &columns)) != 0)
   123f4:	ab03      	add	r3, sp, #12
   123f6:	f105 0220 	add.w	r2, r5, #32
   123fa:	4640      	mov	r0, r8
   123fc:	f7fc fa91 	bl	e922 <cosem_getColumns>
   12400:	4604      	mov	r4, r0
   12402:	bb00      	cbnz	r0, 12446 <profileGeneric_getData+0x74>
{
   12404:	f04f 0b00 	mov.w	fp, #0
   12408:	46da      	mov	sl, fp
    for (pos = 0; pos != table->size; ++pos)
   1240a:	88fb      	ldrh	r3, [r7, #6]
   1240c:	455b      	cmp	r3, fp
   1240e:	d122      	bne.n	12456 <profileGeneric_getData+0x84>
   12410:	2400      	movs	r4, #0
    arr_empty(&columns);
   12412:	a803      	add	r0, sp, #12
   12414:	f7fe fe6c 	bl	110f0 <arr_empty>
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   12418:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
        data->size = pduSize;
   1241c:	bf04      	itt	eq
   1241e:	f8a6 a006 	strheq.w	sl, [r6, #6]
        ret = 0;
   12422:	2400      	moveq	r4, #0
   12424:	e00f      	b.n	12446 <profileGeneric_getData+0x74>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0)
   12426:	2101      	movs	r1, #1
   12428:	4630      	mov	r0, r6
   1242a:	f7fb faa8 	bl	d97e <bb_setUInt8>
   1242e:	4604      	mov	r4, r0
   12430:	b948      	cbnz	r0, 12446 <profileGeneric_getData+0x74>
        if (e->transactionEndIndex != 0)
   12432:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   12434:	b15b      	cbz	r3, 1244e <profileGeneric_getData+0x7c>
            if ((ret = hlp_setObjectCount(e->transactionEndIndex - e->transactionStartIndex, data)) != 0)
   12436:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   12438:	4631      	mov	r1, r6
   1243a:	1a18      	subs	r0, r3, r0
            if ((ret = hlp_setObjectCount(e->transactionEndIndex, data)) != 0)
   1243c:	f008 fb9b 	bl	1ab76 <hlp_setObjectCount>
   12440:	4604      	mov	r4, r0
   12442:	2800      	cmp	r0, #0
   12444:	d0d0      	beq.n	123e8 <profileGeneric_getData+0x16>
}
   12446:	4620      	mov	r0, r4
   12448:	b007      	add	sp, #28
   1244a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            e->transactionEndIndex = table->size;
   1244e:	88f8      	ldrh	r0, [r7, #6]
   12450:	63e8      	str	r0, [r5, #60]	; 0x3c
            if ((ret = hlp_setObjectCount(e->transactionEndIndex, data)) != 0)
   12452:	4631      	mov	r1, r6
   12454:	e7f2      	b.n	1243c <profileGeneric_getData+0x6a>
        pduSize = (uint16_t)data->size;
   12456:	f8b6 a006 	ldrh.w	sl, [r6, #6]
        if ((ret = cosem_getRow(table, pos, captureObjects, &columns, data)) != 0)
   1245a:	9600      	str	r6, [sp, #0]
   1245c:	ab03      	add	r3, sp, #12
   1245e:	4642      	mov	r2, r8
   12460:	4659      	mov	r1, fp
   12462:	4638      	mov	r0, r7
   12464:	f7ff ff6b 	bl	1233e <cosem_getRow>
   12468:	4604      	mov	r4, r0
   1246a:	2800      	cmp	r0, #0
   1246c:	d1d1      	bne.n	12412 <profileGeneric_getData+0x40>
        if (data->size > (uint16_t)(settings->maxPduSize - PDU_MAX_HEADER_SIZE))
   1246e:	f8b9 3052 	ldrh.w	r3, [r9, #82]	; 0x52
   12472:	88f2      	ldrh	r2, [r6, #6]
   12474:	3b46      	subs	r3, #70	; 0x46
   12476:	b29b      	uxth	r3, r3
   12478:	429a      	cmp	r2, r3
   1247a:	d805      	bhi.n	12488 <profileGeneric_getData+0xb6>
        ++e->transactionStartIndex;
   1247c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1247e:	3301      	adds	r3, #1
   12480:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = 0; pos != table->size; ++pos)
   12482:	f10b 0b01 	add.w	fp, fp, #1
   12486:	e7c0      	b.n	1240a <profileGeneric_getData+0x38>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   12488:	f44f 7482 	mov.w	r4, #260	; 0x104
   1248c:	e7c1      	b.n	12412 <profileGeneric_getData+0x40>

0001248e <getProfileGenericData>:
{
   1248e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12492:	461e      	mov	r6, r3
   12494:	b097      	sub	sp, #92	; 0x5c
    if (e->selector == 0 || e->parameters.vt == DLMS_DATA_TYPE_NONE || e->transactionEndIndex != 0)
   12496:	7e53      	ldrb	r3, [r2, #25]
{
   12498:	9003      	str	r0, [sp, #12]
   1249a:	460f      	mov	r7, r1
   1249c:	4615      	mov	r5, r2
   1249e:	f101 0a1c 	add.w	sl, r1, #28
    if (e->selector == 0 || e->parameters.vt == DLMS_DATA_TYPE_NONE || e->transactionEndIndex != 0)
   124a2:	b13b      	cbz	r3, 124b4 <getProfileGenericData+0x26>
   124a4:	f892 3020 	ldrb.w	r3, [r2, #32]
   124a8:	b123      	cbz	r3, 124b4 <getProfileGenericData+0x26>
   124aa:	f8d2 903c 	ldr.w	r9, [r2, #60]	; 0x3c
   124ae:	f1b9 0f00 	cmp.w	r9, #0
   124b2:	d009      	beq.n	124c8 <getProfileGenericData+0x3a>
        return profileGeneric_getData(settings, e, &object->buffer, &object->captureObjects, reply);
   124b4:	9803      	ldr	r0, [sp, #12]
   124b6:	9600      	str	r6, [sp, #0]
   124b8:	4653      	mov	r3, sl
   124ba:	f107 0210 	add.w	r2, r7, #16
   124be:	4629      	mov	r1, r5
   124c0:	f7ff ff87 	bl	123d2 <profileGeneric_getData>
   124c4:	4680      	mov	r8, r0
   124c6:	e089      	b.n	125dc <getProfileGenericData+0x14e>
    arr_init(&captureObjects);
   124c8:	a809      	add	r0, sp, #36	; 0x24
   124ca:	f7fe fdb2 	bl	11032 <arr_init>
    if ((ret = cosem_getColumns(&object->captureObjects, e->selector, &e->parameters, &captureObjects)) == 0)
   124ce:	7e69      	ldrb	r1, [r5, #25]
   124d0:	ab09      	add	r3, sp, #36	; 0x24
   124d2:	f105 0220 	add.w	r2, r5, #32
   124d6:	4650      	mov	r0, sl
   124d8:	f7fc fa23 	bl	e922 <cosem_getColumns>
   124dc:	4604      	mov	r4, r0
   124de:	2800      	cmp	r0, #0
   124e0:	d168      	bne.n	125b4 <getProfileGenericData+0x126>
        arr_init(&items);
   124e2:	a806      	add	r0, sp, #24
   124e4:	f7fe fda5 	bl	11032 <arr_init>
        if (e->selector == 1) //Read by range
   124e8:	f895 8019 	ldrb.w	r8, [r5, #25]
   124ec:	f1b8 0f01 	cmp.w	r8, #1
   124f0:	f040 80b9 	bne.w	12666 <getProfileGenericData+0x1d8>
            var_init(&value);
   124f4:	a812      	add	r0, sp, #72	; 0x48
   124f6:	f008 fe9a 	bl	1b22e <var_init>
            if ((ret = va_getByIndex(e->parameters.Arr, 1, &it)) == 0)
   124fa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   124fc:	aa05      	add	r2, sp, #20
   124fe:	4641      	mov	r1, r8
   12500:	f009 f86f 	bl	1b5e2 <va_getByIndex>
   12504:	4604      	mov	r4, r0
   12506:	2800      	cmp	r0, #0
   12508:	d154      	bne.n	125b4 <getProfileGenericData+0x126>
                if (it->vt == DLMS_DATA_TYPE_UINT32)
   1250a:	9b05      	ldr	r3, [sp, #20]
   1250c:	6898      	ldr	r0, [r3, #8]
   1250e:	781b      	ldrb	r3, [r3, #0]
   12510:	2b06      	cmp	r3, #6
   12512:	d157      	bne.n	125c4 <getProfileGenericData+0x136>
                    time_initUnix(&start, it->ulVal);
   12514:	4601      	mov	r1, r0
   12516:	a80c      	add	r0, sp, #48	; 0x30
   12518:	f7fc faab 	bl	ea72 <time_initUnix>
                if ((ret = va_getByIndex(e->parameters.Arr, 2, &it)) != 0)
   1251c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1251e:	aa05      	add	r2, sp, #20
   12520:	2102      	movs	r1, #2
   12522:	f009 f85e 	bl	1b5e2 <va_getByIndex>
   12526:	2800      	cmp	r0, #0
   12528:	d1cc      	bne.n	124c4 <getProfileGenericData+0x36>
                if (it->vt == DLMS_DATA_TYPE_UINT32)
   1252a:	9b05      	ldr	r3, [sp, #20]
   1252c:	6898      	ldr	r0, [r3, #8]
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	2b06      	cmp	r3, #6
   12532:	d160      	bne.n	125f6 <getProfileGenericData+0x168>
                    time_initUnix(&end, it->ulVal);
   12534:	4601      	mov	r1, r0
   12536:	a80f      	add	r0, sp, #60	; 0x3c
   12538:	f7fc fa9b 	bl	ea72 <time_initUnix>
{
   1253c:	f04f 0800 	mov.w	r8, #0
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   12540:	f107 0b10 	add.w	fp, r7, #16
                for (pos = 0; pos != object->buffer.size; ++pos)
   12544:	8afb      	ldrh	r3, [r7, #22]
   12546:	fa1f f189 	uxth.w	r1, r9
   1254a:	428b      	cmp	r3, r1
   1254c:	d067      	beq.n	1261e <getProfileGenericData+0x190>
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   1254e:	aa04      	add	r2, sp, #16
   12550:	4658      	mov	r0, fp
   12552:	f7fe fdda 	bl	1110a <arr_getByIndex>
   12556:	4604      	mov	r4, r0
   12558:	bb60      	cbnz	r0, 125b4 <getProfileGenericData+0x126>
                        (ret = va_getByIndex(row, 0, &it)) != 0)
   1255a:	4601      	mov	r1, r0
   1255c:	aa05      	add	r2, sp, #20
   1255e:	9804      	ldr	r0, [sp, #16]
   12560:	f009 f83f 	bl	1b5e2 <va_getByIndex>
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   12564:	4604      	mov	r4, r0
   12566:	bb28      	cbnz	r0, 125b4 <getProfileGenericData+0x126>
                    t = it->dateTime;
   12568:	9b05      	ldr	r3, [sp, #20]
   1256a:	689c      	ldr	r4, [r3, #8]
                    if (time_compare(&start, t) != -1 && time_compare(t, &end) != -1)
   1256c:	a80c      	add	r0, sp, #48	; 0x30
   1256e:	4621      	mov	r1, r4
   12570:	f7fc faf0 	bl	eb54 <time_compare>
   12574:	3001      	adds	r0, #1
   12576:	d058      	beq.n	1262a <getProfileGenericData+0x19c>
   12578:	a90f      	add	r1, sp, #60	; 0x3c
   1257a:	4620      	mov	r0, r4
   1257c:	f7fc faea 	bl	eb54 <time_compare>
   12580:	3001      	adds	r0, #1
   12582:	d052      	beq.n	1262a <getProfileGenericData+0x19c>
                        if (reply->size < settings->maxPduSize)
   12584:	9a03      	ldr	r2, [sp, #12]
   12586:	88f1      	ldrh	r1, [r6, #6]
   12588:	f8b2 2052 	ldrh.w	r2, [r2, #82]	; 0x52
   1258c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
                        ++cnt;
   1258e:	f108 0801 	add.w	r8, r8, #1
                        if (reply->size < settings->maxPduSize)
   12592:	4291      	cmp	r1, r2
                        ++cnt;
   12594:	fa1f f888 	uxth.w	r8, r8
                        if (reply->size < settings->maxPduSize)
   12598:	d23d      	bcs.n	12616 <getProfileGenericData+0x188>
                            ++e->transactionEndIndex;
   1259a:	3301      	adds	r3, #1
   1259c:	63eb      	str	r3, [r5, #60]	; 0x3c
                            if ((ret = cosem_getRow(&object->buffer, pos, &captureObjects, &object->captureObjects, reply)) != 0)
   1259e:	9600      	str	r6, [sp, #0]
   125a0:	4653      	mov	r3, sl
   125a2:	aa09      	add	r2, sp, #36	; 0x24
   125a4:	fa1f f189 	uxth.w	r1, r9
   125a8:	4658      	mov	r0, fp
   125aa:	f7ff fec8 	bl	1233e <cosem_getRow>
   125ae:	4604      	mov	r4, r0
   125b0:	2800      	cmp	r0, #0
   125b2:	d03a      	beq.n	1262a <getProfileGenericData+0x19c>
    arr_empty(&captureObjects);
   125b4:	a809      	add	r0, sp, #36	; 0x24
   125b6:	f7fe fd9b 	bl	110f0 <arr_empty>
    arr_empty(&items);
   125ba:	a806      	add	r0, sp, #24
   125bc:	f7fe fd98 	bl	110f0 <arr_empty>
    return ret;
   125c0:	46a0      	mov	r8, r4
   125c2:	e00b      	b.n	125dc <getProfileGenericData+0x14e>
                    if ((ret = dlms_changeType(it->byteArr, DLMS_DATA_TYPE_DATETIME, &value)) != 0)
   125c4:	aa12      	add	r2, sp, #72	; 0x48
   125c6:	2119      	movs	r1, #25
   125c8:	f7fe fa0e 	bl	109e8 <dlms_changeType>
   125cc:	4680      	mov	r8, r0
   125ce:	b148      	cbz	r0, 125e4 <getProfileGenericData+0x156>
                        arr_empty(&items);
   125d0:	a806      	add	r0, sp, #24
   125d2:	f7fe fd8d 	bl	110f0 <arr_empty>
                        var_clear(&value);
   125d6:	a812      	add	r0, sp, #72	; 0x48
   125d8:	f008 ff85 	bl	1b4e6 <var_clear>
}
   125dc:	4640      	mov	r0, r8
   125de:	b017      	add	sp, #92	; 0x5c
   125e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    start = *value.dateTime;
   125e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   125e6:	ca07      	ldmia	r2, {r0, r1, r2}
   125e8:	ab0c      	add	r3, sp, #48	; 0x30
   125ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    var_clear(&value);
   125ee:	a812      	add	r0, sp, #72	; 0x48
   125f0:	f008 ff79 	bl	1b4e6 <var_clear>
   125f4:	e792      	b.n	1251c <getProfileGenericData+0x8e>
                    if ((ret = dlms_changeType(it->byteArr, DLMS_DATA_TYPE_DATETIME, &value)) != 0)
   125f6:	aa12      	add	r2, sp, #72	; 0x48
   125f8:	2119      	movs	r1, #25
   125fa:	f7fe f9f5 	bl	109e8 <dlms_changeType>
   125fe:	4680      	mov	r8, r0
   12600:	2800      	cmp	r0, #0
   12602:	d1e5      	bne.n	125d0 <getProfileGenericData+0x142>
                    end = *value.dateTime;
   12604:	9a14      	ldr	r2, [sp, #80]	; 0x50
   12606:	ca07      	ldmia	r2, {r0, r1, r2}
   12608:	ab0f      	add	r3, sp, #60	; 0x3c
   1260a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    var_clear(&value);
   1260e:	a812      	add	r0, sp, #72	; 0x48
   12610:	f008 ff69 	bl	1b4e6 <var_clear>
   12614:	e792      	b.n	1253c <getProfileGenericData+0xae>
                        else if (e->transactionEndIndex != 0)
   12616:	b143      	cbz	r3, 1262a <getProfileGenericData+0x19c>
                            ++e->transactionStartIndex;
   12618:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1261a:	3301      	adds	r3, #1
   1261c:	63ab      	str	r3, [r5, #56]	; 0x38
                if (ret == 0 && bb_size(e->value.byteArr) == 0)
   1261e:	68a8      	ldr	r0, [r5, #8]
   12620:	f7fb f941 	bl	d8a6 <bb_size>
   12624:	b120      	cbz	r0, 12630 <getProfileGenericData+0x1a2>
{
   12626:	2400      	movs	r4, #0
   12628:	e7c4      	b.n	125b4 <getProfileGenericData+0x126>
                for (pos = 0; pos != object->buffer.size; ++pos)
   1262a:	f109 0901 	add.w	r9, r9, #1
   1262e:	e789      	b.n	12544 <getProfileGenericData+0xb6>
                    if ((ret = cosem_setArray(e->value.byteArr, cnt)) != 0 ||
   12630:	4641      	mov	r1, r8
   12632:	68a8      	ldr	r0, [r5, #8]
   12634:	f7fc f8d9 	bl	e7ea <cosem_setArray>
   12638:	4680      	mov	r8, r0
   1263a:	2800      	cmp	r0, #0
   1263c:	d1ce      	bne.n	125dc <getProfileGenericData+0x14e>
                        (ret = bb_set(e->value.byteArr, reply->data, reply->size)) != 0)
   1263e:	88f2      	ldrh	r2, [r6, #6]
   12640:	6831      	ldr	r1, [r6, #0]
   12642:	68a8      	ldr	r0, [r5, #8]
   12644:	f7fb fa81 	bl	db4a <bb_set>
                    if ((ret = cosem_setArray(e->value.byteArr, cnt)) != 0 ||
   12648:	4680      	mov	r8, r0
   1264a:	2800      	cmp	r0, #0
   1264c:	d1c6      	bne.n	125dc <getProfileGenericData+0x14e>
                    if ((ret = bb_set(reply, e->value.byteArr->data, e->value.byteArr->size)) != 0)
   1264e:	68ab      	ldr	r3, [r5, #8]
                    reply->position = reply->size = 0;
   12650:	80f0      	strh	r0, [r6, #6]
   12652:	8130      	strh	r0, [r6, #8]
                    if ((ret = bb_set(reply, e->value.byteArr->data, e->value.byteArr->size)) != 0)
   12654:	88da      	ldrh	r2, [r3, #6]
   12656:	6819      	ldr	r1, [r3, #0]
   12658:	4630      	mov	r0, r6
   1265a:	f7fb fa76 	bl	db4a <bb_set>
   1265e:	4680      	mov	r8, r0
   12660:	2800      	cmp	r0, #0
   12662:	d0e0      	beq.n	12626 <getProfileGenericData+0x198>
   12664:	e7ba      	b.n	125dc <getProfileGenericData+0x14e>
        else if (e->selector == 2) //Read by entry.
   12666:	f1b8 0f02 	cmp.w	r8, #2
   1266a:	d153      	bne.n	12714 <getProfileGenericData+0x286>
            if ((ret = va_getByIndex(e->parameters.Arr, 0, &it)) == 0)
   1266c:	4621      	mov	r1, r4
   1266e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   12670:	aa05      	add	r2, sp, #20
   12672:	f008 ffb6 	bl	1b5e2 <va_getByIndex>
   12676:	4604      	mov	r4, r0
   12678:	2800      	cmp	r0, #0
   1267a:	d19b      	bne.n	125b4 <getProfileGenericData+0x126>
                e->transactionStartIndex = (uint16_t)var_toInteger(it);
   1267c:	9805      	ldr	r0, [sp, #20]
   1267e:	f009 f92a 	bl	1b8d6 <var_toInteger>
   12682:	b280      	uxth	r0, r0
                if (e->transactionStartIndex == 0)
   12684:	2800      	cmp	r0, #0
   12686:	d031      	beq.n	126ec <getProfileGenericData+0x25e>
                e->transactionStartIndex = (uint16_t)var_toInteger(it);
   12688:	63a8      	str	r0, [r5, #56]	; 0x38
                if ((ret = va_getByIndex(e->parameters.Arr, 1, &it)) == 0)
   1268a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1268c:	aa05      	add	r2, sp, #20
   1268e:	2101      	movs	r1, #1
   12690:	f008 ffa7 	bl	1b5e2 <va_getByIndex>
   12694:	4604      	mov	r4, r0
   12696:	2800      	cmp	r0, #0
   12698:	d18c      	bne.n	125b4 <getProfileGenericData+0x126>
                    e->transactionEndIndex = (uint16_t)var_toInteger(it);
   1269a:	9805      	ldr	r0, [sp, #20]
   1269c:	f009 f91b 	bl	1b8d6 <var_toInteger>
   126a0:	8afb      	ldrh	r3, [r7, #22]
                    if (e->transactionStartIndex + e->transactionEndIndex > (uint32_t)(object->buffer.size + 1))
   126a2:	6baa      	ldr	r2, [r5, #56]	; 0x38
   126a4:	b280      	uxth	r0, r0
                        e->transactionEndIndex = object->buffer.size;
   126a6:	2800      	cmp	r0, #0
   126a8:	bf08      	it	eq
   126aa:	4618      	moveq	r0, r3
                    if (e->transactionStartIndex + e->transactionEndIndex > (uint32_t)(object->buffer.size + 1))
   126ac:	eb02 0c00 	add.w	ip, r2, r0
   126b0:	1c59      	adds	r1, r3, #1
                        e->transactionEndIndex = object->buffer.size;
   126b2:	458c      	cmp	ip, r1
   126b4:	bf88      	it	hi
   126b6:	4618      	movhi	r0, r3
   126b8:	63e8      	str	r0, [r5, #60]	; 0x3c
                    if (e->transactionStartIndex == 0)
   126ba:	b1d2      	cbz	r2, 126f2 <getProfileGenericData+0x264>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   126bc:	3710      	adds	r7, #16
                    for (; e->transactionStartIndex < e->transactionEndIndex; ++e->transactionStartIndex)
   126be:	e9d5 130e 	ldrd	r1, r3, [r5, #56]	; 0x38
   126c2:	4299      	cmp	r1, r3
   126c4:	f4bf af76 	bcs.w	125b4 <getProfileGenericData+0x126>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   126c8:	aa04      	add	r2, sp, #16
   126ca:	b289      	uxth	r1, r1
   126cc:	4638      	mov	r0, r7
   126ce:	f7fe fd1c 	bl	1110a <arr_getByIndex>
   126d2:	bb10      	cbnz	r0, 1271a <getProfileGenericData+0x28c>
                            (ret = cosem_getRow(&object->buffer, e->transactionStartIndex, &captureObjects, &object->captureObjects, reply)) != 0)
   126d4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   126d6:	9600      	str	r6, [sp, #0]
   126d8:	4653      	mov	r3, sl
   126da:	aa09      	add	r2, sp, #36	; 0x24
   126dc:	4638      	mov	r0, r7
   126de:	f7ff fe2e 	bl	1233e <cosem_getRow>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   126e2:	b9d0      	cbnz	r0, 1271a <getProfileGenericData+0x28c>
                    for (; e->transactionStartIndex < e->transactionEndIndex; ++e->transactionStartIndex)
   126e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   126e6:	3301      	adds	r3, #1
   126e8:	63ab      	str	r3, [r5, #56]	; 0x38
   126ea:	e7e8      	b.n	126be <getProfileGenericData+0x230>
                    e->transactionStartIndex = 1;
   126ec:	2301      	movs	r3, #1
   126ee:	63ab      	str	r3, [r5, #56]	; 0x38
   126f0:	e7cb      	b.n	1268a <getProfileGenericData+0x1fc>
                        e->transactionEndIndex = (uint16_t)object->buffer.size;
   126f2:	63eb      	str	r3, [r5, #60]	; 0x3c
                        if ((ret = bb_setUInt8(reply, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   126f4:	2101      	movs	r1, #1
   126f6:	4630      	mov	r0, r6
   126f8:	f7fb f941 	bl	d97e <bb_setUInt8>
   126fc:	4680      	mov	r8, r0
   126fe:	2800      	cmp	r0, #0
   12700:	f47f af6c 	bne.w	125dc <getProfileGenericData+0x14e>
                            (ret = hlp_setObjectCount(e->transactionEndIndex, reply)) != 0)
   12704:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   12706:	4631      	mov	r1, r6
   12708:	f008 fa35 	bl	1ab76 <hlp_setObjectCount>
                        if ((ret = bb_setUInt8(reply, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1270c:	4680      	mov	r8, r0
   1270e:	2800      	cmp	r0, #0
   12710:	d0d4      	beq.n	126bc <getProfileGenericData+0x22e>
   12712:	e763      	b.n	125dc <getProfileGenericData+0x14e>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12714:	f44f 7481 	mov.w	r4, #258	; 0x102
   12718:	e74c      	b.n	125b4 <getProfileGenericData+0x126>
                            (ret = cosem_getRow(&object->buffer, e->transactionStartIndex, &captureObjects, &object->captureObjects, reply)) != 0)
   1271a:	4604      	mov	r4, r0
   1271c:	e74a      	b.n	125b4 <getProfileGenericData+0x126>

0001271e <cosem_getProfileGeneric>:
{
   1271e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char empty[6] = { 0 };
   12720:	2300      	movs	r3, #0
   12722:	9300      	str	r3, [sp, #0]
   12724:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (e->index == 2)
   12728:	7e0b      	ldrb	r3, [r1, #24]
    gxProfileGeneric* object = (gxProfileGeneric*)e->target;
   1272a:	694c      	ldr	r4, [r1, #20]
    if (e->index == 2)
   1272c:	2b02      	cmp	r3, #2
{
   1272e:	460a      	mov	r2, r1
    if (e->index == 2)
   12730:	d105      	bne.n	1273e <cosem_getProfileGeneric+0x20>
        ret = getProfileGenericData(settings, object, e, e->value.byteArr);
   12732:	688b      	ldr	r3, [r1, #8]
   12734:	4621      	mov	r1, r4
   12736:	f7ff feaa 	bl	1248e <getProfileGenericData>
}
   1273a:	b003      	add	sp, #12
   1273c:	bd30      	pop	{r4, r5, pc}
    else if (e->index == 3)
   1273e:	2b03      	cmp	r3, #3
   12740:	d106      	bne.n	12750 <cosem_getProfileGeneric+0x32>
        ret = getColumns(settings, &object->captureObjects, e->value.byteArr, e);
   12742:	688a      	ldr	r2, [r1, #8]
   12744:	460b      	mov	r3, r1
   12746:	f104 011c 	add.w	r1, r4, #28
   1274a:	f7ff fd67 	bl	1221c <getColumns>
   1274e:	e7f4      	b.n	1273a <cosem_getProfileGeneric+0x1c>
    else if (e->index == 4)
   12750:	2b04      	cmp	r3, #4
   12752:	d104      	bne.n	1275e <cosem_getProfileGeneric+0x40>
        ret = cosem_setUInt32(e->value.byteArr, object->capturePeriod);
   12754:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        ret = cosem_setUInt32(e->value.byteArr, object->profileEntries);
   12756:	6890      	ldr	r0, [r2, #8]
   12758:	f7fb fffa 	bl	e750 <cosem_setUInt32>
   1275c:	e7ed      	b.n	1273a <cosem_getProfileGeneric+0x1c>
    else if (e->index == 5)
   1275e:	2b05      	cmp	r3, #5
   12760:	d105      	bne.n	1276e <cosem_getProfileGeneric+0x50>
        ret = cosem_setEnum(e->value.byteArr, object->sortMethod);
   12762:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   12766:	6890      	ldr	r0, [r2, #8]
   12768:	f7fc f84d 	bl	e806 <cosem_setEnum>
   1276c:	e7e5      	b.n	1273a <cosem_getProfileGeneric+0x1c>
    else  if (e->index == 6)
   1276e:	2b06      	cmp	r3, #6
   12770:	d17d      	bne.n	1286e <cosem_getProfileGeneric+0x150>
        gxByteBuffer* data = e->value.byteArr;
   12772:	688d      	ldr	r5, [r1, #8]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12774:	2102      	movs	r1, #2
   12776:	4628      	mov	r0, r5
   12778:	f7fb f901 	bl	d97e <bb_setUInt8>
   1277c:	2800      	cmp	r0, #0
   1277e:	d1dc      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
            (ret = bb_setUInt8(data, 4)) != 0)
   12780:	2104      	movs	r1, #4
   12782:	4628      	mov	r0, r5
   12784:	f7fb f8fb 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12788:	2800      	cmp	r0, #0
   1278a:	d1d6      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
        if (object->sortObject == NULL)
   1278c:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1278e:	2112      	movs	r1, #18
   12790:	4628      	mov	r0, r5
        if (object->sortObject == NULL)
   12792:	2b00      	cmp	r3, #0
   12794:	d133      	bne.n	127fe <cosem_getProfileGeneric+0xe0>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12796:	f7fb f8f2 	bl	d97e <bb_setUInt8>
   1279a:	2800      	cmp	r0, #0
   1279c:	d1cd      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, 0)) != 0 ||
   1279e:	4601      	mov	r1, r0
   127a0:	4628      	mov	r0, r5
   127a2:	f7fb f90e 	bl	d9c2 <bb_setUInt16>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   127a6:	2800      	cmp	r0, #0
   127a8:	d1c7      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   127aa:	2109      	movs	r1, #9
   127ac:	4628      	mov	r0, r5
   127ae:	f7fb f8e6 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt16(data, 0)) != 0 ||
   127b2:	2800      	cmp	r0, #0
   127b4:	d1c1      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   127b6:	2106      	movs	r1, #6
   127b8:	4628      	mov	r0, r5
   127ba:	f7fb f8e0 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   127be:	2800      	cmp	r0, #0
   127c0:	d1bb      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_set(data, empty, 6)) != 0 ||
   127c2:	2206      	movs	r2, #6
   127c4:	4669      	mov	r1, sp
   127c6:	4628      	mov	r0, r5
   127c8:	f7fb f9bf 	bl	db4a <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   127cc:	2800      	cmp	r0, #0
   127ce:	d1b4      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   127d0:	210f      	movs	r1, #15
   127d2:	4628      	mov	r0, r5
   127d4:	f7fb f8d3 	bl	d97e <bb_setUInt8>
                (ret = bb_set(data, empty, 6)) != 0 ||
   127d8:	2800      	cmp	r0, #0
   127da:	d1ae      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 0)) != 0 ||
   127dc:	4601      	mov	r1, r0
   127de:	4628      	mov	r0, r5
   127e0:	f7fb f8cd 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   127e4:	2800      	cmp	r0, #0
   127e6:	d1a8      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   127e8:	2112      	movs	r1, #18
   127ea:	4628      	mov	r0, r5
   127ec:	f7fb f8c7 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, 0)) != 0 ||
   127f0:	2800      	cmp	r0, #0
   127f2:	d1a2      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, 0)) != 0)
   127f4:	4601      	mov	r1, r0
                (ret = bb_setUInt16(data, object->sortObjectDataIndex)) != 0)
   127f6:	4628      	mov	r0, r5
   127f8:	f7fb f8e3 	bl	d9c2 <bb_setUInt16>
   127fc:	e79d      	b.n	1273a <cosem_getProfileGeneric+0x1c>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   127fe:	f7fb f8be 	bl	d97e <bb_setUInt8>
   12802:	2800      	cmp	r0, #0
   12804:	d199      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
   12806:	6b23      	ldr	r3, [r4, #48]	; 0x30
   12808:	4628      	mov	r0, r5
   1280a:	8819      	ldrh	r1, [r3, #0]
   1280c:	f7fb f8d9 	bl	d9c2 <bb_setUInt16>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12810:	2800      	cmp	r0, #0
   12812:	d192      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12814:	2109      	movs	r1, #9
   12816:	4628      	mov	r0, r5
   12818:	f7fb f8b1 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
   1281c:	2800      	cmp	r0, #0
   1281e:	d18c      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   12820:	2106      	movs	r1, #6
   12822:	4628      	mov	r0, r5
   12824:	f7fb f8ab 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12828:	2800      	cmp	r0, #0
   1282a:	d186      	bne.n	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
   1282c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1282e:	2206      	movs	r2, #6
   12830:	4411      	add	r1, r2
   12832:	4628      	mov	r0, r5
   12834:	f7fb f989 	bl	db4a <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   12838:	2800      	cmp	r0, #0
   1283a:	f47f af7e 	bne.w	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   1283e:	210f      	movs	r1, #15
   12840:	4628      	mov	r0, r5
   12842:	f7fb f89c 	bl	d97e <bb_setUInt8>
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
   12846:	2800      	cmp	r0, #0
   12848:	f47f af77 	bne.w	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
   1284c:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   12850:	4628      	mov	r0, r5
   12852:	f7fb f894 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   12856:	2800      	cmp	r0, #0
   12858:	f47f af6f 	bne.w	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1285c:	2112      	movs	r1, #18
   1285e:	4628      	mov	r0, r5
   12860:	f7fb f88d 	bl	d97e <bb_setUInt8>
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
   12864:	2800      	cmp	r0, #0
   12866:	f47f af68 	bne.w	1273a <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, object->sortObjectDataIndex)) != 0)
   1286a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   1286c:	e7c3      	b.n	127f6 <cosem_getProfileGeneric+0xd8>
    else if (e->index == 7)
   1286e:	2b07      	cmp	r3, #7
   12870:	d101      	bne.n	12876 <cosem_getProfileGeneric+0x158>
        ret = cosem_setUInt32(e->value.byteArr, object->entriesInUse);
   12872:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   12874:	e76f      	b.n	12756 <cosem_getProfileGeneric+0x38>
    else if (e->index == 8)
   12876:	2b08      	cmp	r3, #8
   12878:	d101      	bne.n	1287e <cosem_getProfileGeneric+0x160>
        ret = cosem_setUInt32(e->value.byteArr, object->profileEntries);
   1287a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1287c:	e76b      	b.n	12756 <cosem_getProfileGeneric+0x38>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1287e:	f44f 7081 	mov.w	r0, #258	; 0x102
   12882:	e75a      	b.n	1273a <cosem_getProfileGeneric+0x1c>

00012884 <cosem_getDisconnectControl>:
    if (e->index == 2)
   12884:	7e02      	ldrb	r2, [r0, #24]
    gxDisconnectControl* object = (gxDisconnectControl*)e->target;
   12886:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   12888:	2a02      	cmp	r2, #2
   1288a:	d103      	bne.n	12894 <cosem_getDisconnectControl+0x10>
        ret = cosem_setBoolean(e->value.byteArr, object->outputState);
   1288c:	7c19      	ldrb	r1, [r3, #16]
   1288e:	6880      	ldr	r0, [r0, #8]
   12890:	f7fb bfc7 	b.w	e822 <cosem_setBoolean>
    else if (e->index == 3)
   12894:	2a03      	cmp	r2, #3
   12896:	d103      	bne.n	128a0 <cosem_getDisconnectControl+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->controlState);
   12898:	7c59      	ldrb	r1, [r3, #17]
        ret = cosem_setEnum(e->value.byteArr, object->controlMode);
   1289a:	6880      	ldr	r0, [r0, #8]
   1289c:	f7fb bfb3 	b.w	e806 <cosem_setEnum>
    else if (e->index == 4)
   128a0:	2a04      	cmp	r2, #4
   128a2:	d101      	bne.n	128a8 <cosem_getDisconnectControl+0x24>
        ret = cosem_setEnum(e->value.byteArr, object->controlMode);
   128a4:	7c99      	ldrb	r1, [r3, #18]
   128a6:	e7f8      	b.n	1289a <cosem_getDisconnectControl+0x16>
}
   128a8:	f44f 7081 	mov.w	r0, #258	; 0x102
   128ac:	4770      	bx	lr

000128ae <cosem_add>:
{
   128ae:	b570      	push	{r4, r5, r6, lr}
   128b0:	460e      	mov	r6, r1
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   128b2:	2109      	movs	r1, #9
{
   128b4:	4604      	mov	r4, r0
   128b6:	4615      	mov	r5, r2
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   128b8:	f7fb f861 	bl	d97e <bb_setUInt8>
   128bc:	b958      	cbnz	r0, 128d6 <cosem_add+0x28>
        (ret = hlp_setObjectCount(len, data)) != 0 ||
   128be:	4621      	mov	r1, r4
   128c0:	4628      	mov	r0, r5
   128c2:	f008 f958 	bl	1ab76 <hlp_setObjectCount>
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   128c6:	b930      	cbnz	r0, 128d6 <cosem_add+0x28>
        (ret = bb_set(data, (unsigned char*)value, len)) != 0)
   128c8:	462a      	mov	r2, r5
   128ca:	4631      	mov	r1, r6
   128cc:	4620      	mov	r0, r4
}
   128ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (ret = bb_set(data, (unsigned char*)value, len)) != 0)
   128d2:	f7fb b93a 	b.w	db4a <bb_set>
}
   128d6:	bd70      	pop	{r4, r5, r6, pc}

000128d8 <cosem_getRegisterActivation>:
{
   128d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (e->index == 2)
   128dc:	7e0b      	ldrb	r3, [r1, #24]
    gxRegisterActivation* object = (gxRegisterActivation*)e->target;
   128de:	694e      	ldr	r6, [r1, #20]
    gxByteBuffer* data = e->value.byteArr;
   128e0:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
   128e2:	2b02      	cmp	r3, #2
{
   128e4:	4681      	mov	r9, r0
   128e6:	460f      	mov	r7, r1
    if (e->index == 2)
   128e8:	d16e      	bne.n	129c8 <cosem_getRegisterActivation+0xf0>
        if (!e->transaction)
   128ea:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
   128ee:	2b00      	cmp	r3, #0
   128f0:	d04c      	beq.n	1298c <cosem_getRegisterActivation+0xb4>
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   128f2:	f8b7 8038 	ldrh.w	r8, [r7, #56]	; 0x38
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   128f6:	f106 0a10 	add.w	sl, r6, #16
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   128fa:	8af3      	ldrh	r3, [r6, #22]
   128fc:	4543      	cmp	r3, r8
   128fe:	d05d      	beq.n	129bc <cosem_getRegisterActivation+0xe4>
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   12900:	aa01      	add	r2, sp, #4
   12902:	4641      	mov	r1, r8
   12904:	4650      	mov	r0, sl
                pduSize = (uint16_t)data->size;
   12906:	f8b5 b006 	ldrh.w	fp, [r5, #6]
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   1290a:	f008 fc00 	bl	1b10e <oa_getByIndex>
   1290e:	4604      	mov	r4, r0
   12910:	2800      	cmp	r0, #0
   12912:	d155      	bne.n	129c0 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12914:	2102      	movs	r1, #2
   12916:	4628      	mov	r0, r5
   12918:	f7fb f831 	bl	d97e <bb_setUInt8>
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   1291c:	4604      	mov	r4, r0
   1291e:	2800      	cmp	r0, #0
   12920:	d14e      	bne.n	129c0 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12922:	2102      	movs	r1, #2
   12924:	4628      	mov	r0, r5
   12926:	f7fb f82a 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1292a:	4604      	mov	r4, r0
   1292c:	2800      	cmp	r0, #0
   1292e:	d147      	bne.n	129c0 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12930:	2112      	movs	r1, #18
   12932:	4628      	mov	r0, r5
   12934:	f7fb f823 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12938:	4604      	mov	r4, r0
   1293a:	2800      	cmp	r0, #0
   1293c:	d140      	bne.n	129c0 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt16(data, od->objectType)) != 0 ||
   1293e:	9b01      	ldr	r3, [sp, #4]
   12940:	4628      	mov	r0, r5
   12942:	8819      	ldrh	r1, [r3, #0]
   12944:	f7fb f83d 	bl	d9c2 <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12948:	4604      	mov	r4, r0
   1294a:	2800      	cmp	r0, #0
   1294c:	d138      	bne.n	129c0 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1294e:	2109      	movs	r1, #9
   12950:	4628      	mov	r0, r5
   12952:	f7fb f814 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt16(data, od->objectType)) != 0 ||
   12956:	4604      	mov	r4, r0
   12958:	bb90      	cbnz	r0, 129c0 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   1295a:	2106      	movs	r1, #6
   1295c:	4628      	mov	r0, r5
   1295e:	f7fb f80e 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12962:	4604      	mov	r4, r0
   12964:	bb60      	cbnz	r0, 129c0 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_set(data, od->logicalName, 6)) != 0)
   12966:	9901      	ldr	r1, [sp, #4]
   12968:	2206      	movs	r2, #6
   1296a:	4411      	add	r1, r2
   1296c:	4628      	mov	r0, r5
   1296e:	f7fb f8ec 	bl	db4a <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   12972:	4604      	mov	r4, r0
   12974:	bb20      	cbnz	r0, 129c0 <cosem_getRegisterActivation+0xe8>
                if (settings->server)
   12976:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
   1297a:	b99b      	cbnz	r3, 129a4 <cosem_getRegisterActivation+0xcc>
                ++e->transactionStartIndex;
   1297c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   1297e:	f108 0801 	add.w	r8, r8, #1
                ++e->transactionStartIndex;
   12982:	3301      	adds	r3, #1
   12984:	63bb      	str	r3, [r7, #56]	; 0x38
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   12986:	fa1f f888 	uxth.w	r8, r8
   1298a:	e7b6      	b.n	128fa <cosem_getRegisterActivation+0x22>
   1298c:	8af1      	ldrh	r1, [r6, #22]
            e->transactionEndIndex = object->registerAssignment.size;
   1298e:	63f9      	str	r1, [r7, #60]	; 0x3c
            ret = cosem_setArray(data, object->registerAssignment.size);
   12990:	4628      	mov	r0, r5
   12992:	f7fb ff2a 	bl	e7ea <cosem_setArray>
        if (ret == 0)
   12996:	4604      	mov	r4, r0
   12998:	2800      	cmp	r0, #0
   1299a:	d0aa      	beq.n	128f2 <cosem_getRegisterActivation+0x1a>
}
   1299c:	4620      	mov	r0, r4
   1299e:	b003      	add	sp, #12
   129a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (!e->skipMaxPduSize && dlms_isPduFull(settings, data, NULL))
   129a4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   129a8:	2a00      	cmp	r2, #0
   129aa:	d1e7      	bne.n	1297c <cosem_getRegisterActivation+0xa4>
   129ac:	4629      	mov	r1, r5
   129ae:	4648      	mov	r0, r9
   129b0:	f7fe fa83 	bl	10eba <dlms_isPduFull>
   129b4:	2800      	cmp	r0, #0
   129b6:	d0e1      	beq.n	1297c <cosem_getRegisterActivation+0xa4>
                data->size = pduSize;
   129b8:	f8a5 b006 	strh.w	fp, [r5, #6]
                ret = 0;
   129bc:	2400      	movs	r4, #0
   129be:	e7ed      	b.n	1299c <cosem_getRegisterActivation+0xc4>
            if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   129c0:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   129c4:	d1ea      	bne.n	1299c <cosem_getRegisterActivation+0xc4>
   129c6:	e7f7      	b.n	129b8 <cosem_getRegisterActivation+0xe0>
    else if (e->index == 3)
   129c8:	2b03      	cmp	r3, #3
   129ca:	d146      	bne.n	12a5a <cosem_getRegisterActivation+0x182>
        if ((ret = cosem_setArray(data, object->maskList.size)) == 0)
   129cc:	8bf1      	ldrh	r1, [r6, #30]
   129ce:	4628      	mov	r0, r5
   129d0:	f7fb ff0b 	bl	e7ea <cosem_setArray>
   129d4:	4604      	mov	r4, r0
   129d6:	2800      	cmp	r0, #0
   129d8:	d1e0      	bne.n	1299c <cosem_getRegisterActivation+0xc4>
   129da:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   129dc:	f106 0918 	add.w	r9, r6, #24
            for (pos = 0; pos != object->maskList.size; ++pos)
   129e0:	8bf3      	ldrh	r3, [r6, #30]
   129e2:	fa1f f188 	uxth.w	r1, r8
   129e6:	428b      	cmp	r3, r1
   129e8:	d0d8      	beq.n	1299c <cosem_getRegisterActivation+0xc4>
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   129ea:	aa01      	add	r2, sp, #4
   129ec:	4648      	mov	r0, r9
   129ee:	f7fe fb8c 	bl	1110a <arr_getByIndex>
   129f2:	2800      	cmp	r0, #0
   129f4:	d14b      	bne.n	12a8e <cosem_getRegisterActivation+0x1b6>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   129f6:	2102      	movs	r1, #2
   129f8:	4628      	mov	r0, r5
   129fa:	f7fb fee8 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   129fe:	2800      	cmp	r0, #0
   12a00:	d145      	bne.n	12a8e <cosem_getRegisterActivation+0x1b6>
                    (ret = cosem_setOctetString(data, ((gxByteBuffer*)a->key))) != 0 ||
   12a02:	9b01      	ldr	r3, [sp, #4]
   12a04:	4628      	mov	r0, r5
   12a06:	6819      	ldr	r1, [r3, #0]
   12a08:	f7fb fe18 	bl	e63c <cosem_setOctetString>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   12a0c:	2800      	cmp	r0, #0
   12a0e:	d13e      	bne.n	12a8e <cosem_getRegisterActivation+0x1b6>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12a10:	2101      	movs	r1, #1
   12a12:	4628      	mov	r0, r5
   12a14:	f7fa ffb3 	bl	d97e <bb_setUInt8>
                    (ret = cosem_setOctetString(data, ((gxByteBuffer*)a->key))) != 0 ||
   12a18:	2800      	cmp	r0, #0
   12a1a:	d138      	bne.n	12a8e <cosem_getRegisterActivation+0x1b6>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size((gxByteBuffer*)a->value))) != 0)
   12a1c:	9b01      	ldr	r3, [sp, #4]
   12a1e:	6858      	ldr	r0, [r3, #4]
   12a20:	f7fa ff41 	bl	d8a6 <bb_size>
   12a24:	b2c1      	uxtb	r1, r0
   12a26:	4628      	mov	r0, r5
   12a28:	f7fa ffa9 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   12a2c:	4607      	mov	r7, r0
   12a2e:	b990      	cbnz	r0, 12a56 <cosem_getRegisterActivation+0x17e>
                for (pos2 = 0; pos2 != bb_size((gxByteBuffer*)a->value); ++pos2)
   12a30:	9b01      	ldr	r3, [sp, #4]
   12a32:	6858      	ldr	r0, [r3, #4]
   12a34:	f7fa ff37 	bl	d8a6 <bb_size>
   12a38:	42b8      	cmp	r0, r7
   12a3a:	d102      	bne.n	12a42 <cosem_getRegisterActivation+0x16a>
            for (pos = 0; pos != object->maskList.size; ++pos)
   12a3c:	f108 0801 	add.w	r8, r8, #1
   12a40:	e7ce      	b.n	129e0 <cosem_getRegisterActivation+0x108>
                    if ((ret = cosem_setUInt8(data, ((gxByteBuffer*)a->value)->data[pos2])) != 0)
   12a42:	9b01      	ldr	r3, [sp, #4]
   12a44:	685b      	ldr	r3, [r3, #4]
   12a46:	681b      	ldr	r3, [r3, #0]
   12a48:	4628      	mov	r0, r5
   12a4a:	5dd9      	ldrb	r1, [r3, r7]
   12a4c:	f7fb fe64 	bl	e718 <cosem_setUInt8>
   12a50:	b9e8      	cbnz	r0, 12a8e <cosem_getRegisterActivation+0x1b6>
                for (pos2 = 0; pos2 != bb_size((gxByteBuffer*)a->value); ++pos2)
   12a52:	3701      	adds	r7, #1
   12a54:	e7ec      	b.n	12a30 <cosem_getRegisterActivation+0x158>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size((gxByteBuffer*)a->value))) != 0)
   12a56:	4604      	mov	r4, r0
   12a58:	e7a0      	b.n	1299c <cosem_getRegisterActivation+0xc4>
    else if (e->index == 4)
   12a5a:	2b04      	cmp	r3, #4
   12a5c:	d119      	bne.n	12a92 <cosem_getRegisterActivation+0x1ba>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12a5e:	2109      	movs	r1, #9
   12a60:	4628      	mov	r0, r5
   12a62:	f7fa ff8c 	bl	d97e <bb_setUInt8>
   12a66:	4604      	mov	r4, r0
   12a68:	2800      	cmp	r0, #0
   12a6a:	d197      	bne.n	1299c <cosem_getRegisterActivation+0xc4>
            (ret = hlp_setObjectCount(object->activeMask.size, data)) != 0 ||
   12a6c:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   12a6e:	4629      	mov	r1, r5
   12a70:	f008 f881 	bl	1ab76 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12a74:	4604      	mov	r4, r0
   12a76:	2800      	cmp	r0, #0
   12a78:	d190      	bne.n	1299c <cosem_getRegisterActivation+0xc4>
            (ret = bb_set2(data, &object->activeMask, 0, bb_size(&object->activeMask))) != 0)
   12a7a:	3624      	adds	r6, #36	; 0x24
   12a7c:	4630      	mov	r0, r6
   12a7e:	f7fa ff12 	bl	d8a6 <bb_size>
   12a82:	4622      	mov	r2, r4
   12a84:	4603      	mov	r3, r0
   12a86:	4631      	mov	r1, r6
   12a88:	4628      	mov	r0, r5
   12a8a:	f7fb f88d 	bl	dba8 <bb_set2>
   12a8e:	4604      	mov	r4, r0
   12a90:	e784      	b.n	1299c <cosem_getRegisterActivation+0xc4>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12a92:	f44f 7481 	mov.w	r4, #258	; 0x102
   12a96:	e781      	b.n	1299c <cosem_getRegisterActivation+0xc4>

00012a98 <cosem_getRegisterMonitor>:
{
   12a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   12a9c:	7e07      	ldrb	r7, [r0, #24]
    gxRegisterMonitor* object = (gxRegisterMonitor*)e->target;
   12a9e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12aa0:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   12aa2:	2f02      	cmp	r7, #2
   12aa4:	d122      	bne.n	12aec <cosem_getRegisterMonitor+0x54>
        if ((ret = cosem_setArray(data, object->thresholds.size)) == 0)
   12aa6:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   12aa8:	4628      	mov	r0, r5
   12aaa:	f7fb fe9e 	bl	e7ea <cosem_setArray>
   12aae:	4604      	mov	r4, r0
   12ab0:	b118      	cbz	r0, 12aba <cosem_getRegisterMonitor+0x22>
}
   12ab2:	4620      	mov	r0, r4
   12ab4:	b003      	add	sp, #12
   12ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12aba:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   12abc:	f106 0724 	add.w	r7, r6, #36	; 0x24
            for (pos = 0; pos != object->thresholds.size; ++pos)
   12ac0:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   12ac2:	fa1f f388 	uxth.w	r3, r8
   12ac6:	429a      	cmp	r2, r3
   12ac8:	d0f3      	beq.n	12ab2 <cosem_getRegisterMonitor+0x1a>
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   12aca:	aa01      	add	r2, sp, #4
   12acc:	fa1f f188 	uxth.w	r1, r8
   12ad0:	4638      	mov	r0, r7
   12ad2:	f008 fd86 	bl	1b5e2 <va_getByIndex>
   12ad6:	b938      	cbnz	r0, 12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = var_getBytes(tmp, data)) != 0)
   12ad8:	9801      	ldr	r0, [sp, #4]
   12ada:	4629      	mov	r1, r5
   12adc:	f008 fec1 	bl	1b862 <var_getBytes>
   12ae0:	f108 0801 	add.w	r8, r8, #1
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   12ae4:	2800      	cmp	r0, #0
   12ae6:	d0eb      	beq.n	12ac0 <cosem_getRegisterMonitor+0x28>
                    (ret = bb_setUInt16(data, actionSet->actionDown.scriptSelector)) != 0)
   12ae8:	4604      	mov	r4, r0
    return ret;
   12aea:	e7e2      	b.n	12ab2 <cosem_getRegisterMonitor+0x1a>
    else if (e->index == 3)
   12aec:	2f03      	cmp	r7, #3
   12aee:	d143      	bne.n	12b78 <cosem_getRegisterMonitor+0xe0>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12af0:	2102      	movs	r1, #2
   12af2:	4628      	mov	r0, r5
   12af4:	f7fa ff43 	bl	d97e <bb_setUInt8>
   12af8:	4604      	mov	r4, r0
   12afa:	2800      	cmp	r0, #0
   12afc:	d1d9      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   12afe:	4639      	mov	r1, r7
   12b00:	4628      	mov	r0, r5
   12b02:	f7fa ff3c 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12b06:	4604      	mov	r4, r0
   12b08:	2800      	cmp	r0, #0
   12b0a:	d1d2      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12b0c:	2112      	movs	r1, #18
   12b0e:	4628      	mov	r0, r5
   12b10:	f7fa ff35 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   12b14:	4604      	mov	r4, r0
   12b16:	2800      	cmp	r0, #0
   12b18:	d1cb      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt16(data, object->monitoredValue.target != NULL ? object->monitoredValue.target->objectType : 0)) != 0 ||
   12b1a:	69f1      	ldr	r1, [r6, #28]
   12b1c:	b101      	cbz	r1, 12b20 <cosem_getRegisterMonitor+0x88>
   12b1e:	8809      	ldrh	r1, [r1, #0]
   12b20:	4628      	mov	r0, r5
   12b22:	f7fa ff4e 	bl	d9c2 <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12b26:	4604      	mov	r4, r0
   12b28:	2800      	cmp	r0, #0
   12b2a:	d1c2      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12b2c:	2109      	movs	r1, #9
   12b2e:	4628      	mov	r0, r5
   12b30:	f7fa ff25 	bl	d97e <bb_setUInt8>
            (ret = bb_setUInt16(data, object->monitoredValue.target != NULL ? object->monitoredValue.target->objectType : 0)) != 0 ||
   12b34:	4604      	mov	r4, r0
   12b36:	2800      	cmp	r0, #0
   12b38:	d1bb      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   12b3a:	4629      	mov	r1, r5
   12b3c:	2006      	movs	r0, #6
   12b3e:	f008 f81a 	bl	1ab76 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12b42:	4604      	mov	r4, r0
   12b44:	2800      	cmp	r0, #0
   12b46:	d1b4      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_set(data, obj_getLogicalName(object->monitoredValue.target), 6)) != 0 ||
   12b48:	69f0      	ldr	r0, [r6, #28]
   12b4a:	f7f1 faa1 	bl	4090 <obj_getLogicalName>
   12b4e:	2206      	movs	r2, #6
   12b50:	4601      	mov	r1, r0
   12b52:	4628      	mov	r0, r5
   12b54:	f7fa fff9 	bl	db4a <bb_set>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   12b58:	4604      	mov	r4, r0
   12b5a:	2800      	cmp	r0, #0
   12b5c:	d1a9      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   12b5e:	210f      	movs	r1, #15
   12b60:	4628      	mov	r0, r5
   12b62:	f7fa ff0c 	bl	d97e <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName(object->monitoredValue.target), 6)) != 0 ||
   12b66:	4604      	mov	r4, r0
   12b68:	2800      	cmp	r0, #0
   12b6a:	d1a2      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, object->monitoredValue.attributeIndex)) != 0)
   12b6c:	f896 1020 	ldrb.w	r1, [r6, #32]
   12b70:	4628      	mov	r0, r5
   12b72:	f7fa ff04 	bl	d97e <bb_setUInt8>
   12b76:	e7b7      	b.n	12ae8 <cosem_getRegisterMonitor+0x50>
    else if (e->index == 4)
   12b78:	2f04      	cmp	r7, #4
   12b7a:	f040 8091 	bne.w	12ca0 <cosem_getRegisterMonitor+0x208>
        if ((ret = cosem_setArray(data, object->actions.size)) == 0)
   12b7e:	8af1      	ldrh	r1, [r6, #22]
   12b80:	4628      	mov	r0, r5
   12b82:	f7fb fe32 	bl	e7ea <cosem_setArray>
   12b86:	4604      	mov	r4, r0
   12b88:	2800      	cmp	r0, #0
   12b8a:	d192      	bne.n	12ab2 <cosem_getRegisterMonitor+0x1a>
   12b8c:	4607      	mov	r7, r0
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   12b8e:	f106 0810 	add.w	r8, r6, #16
   12b92:	e07e      	b.n	12c92 <cosem_getRegisterMonitor+0x1fa>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12b94:	2102      	movs	r1, #2
   12b96:	4628      	mov	r0, r5
   12b98:	f7fa fef1 	bl	d97e <bb_setUInt8>
   12b9c:	2800      	cmp	r0, #0
   12b9e:	d1a3      	bne.n	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12ba0:	2102      	movs	r1, #2
   12ba2:	4628      	mov	r0, r5
   12ba4:	f7fa feeb 	bl	d97e <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12ba8:	2800      	cmp	r0, #0
   12baa:	d19d      	bne.n	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   12bac:	aa01      	add	r2, sp, #4
   12bae:	4649      	mov	r1, r9
   12bb0:	4640      	mov	r0, r8
   12bb2:	f7fe faaa 	bl	1110a <arr_getByIndex>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12bb6:	2800      	cmp	r0, #0
   12bb8:	d196      	bne.n	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12bba:	2102      	movs	r1, #2
   12bbc:	4628      	mov	r0, r5
   12bbe:	f7fa fede 	bl	d97e <bb_setUInt8>
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   12bc2:	2800      	cmp	r0, #0
   12bc4:	d190      	bne.n	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12bc6:	2102      	movs	r1, #2
   12bc8:	4628      	mov	r0, r5
   12bca:	f7fa fed8 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12bce:	2800      	cmp	r0, #0
   12bd0:	d18a      	bne.n	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12bd2:	2109      	movs	r1, #9
   12bd4:	4628      	mov	r0, r5
   12bd6:	f7fa fed2 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12bda:	2800      	cmp	r0, #0
   12bdc:	d184      	bne.n	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   12bde:	2106      	movs	r1, #6
   12be0:	4628      	mov	r0, r5
   12be2:	f7fa fecc 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12be6:	2800      	cmp	r0, #0
   12be8:	f47f af7e 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionUp.script), 6)) != 0 ||
   12bec:	9b01      	ldr	r3, [sp, #4]
   12bee:	6818      	ldr	r0, [r3, #0]
   12bf0:	f7f1 fa4e 	bl	4090 <obj_getLogicalName>
   12bf4:	2206      	movs	r2, #6
   12bf6:	4601      	mov	r1, r0
   12bf8:	4628      	mov	r0, r5
   12bfa:	f7fa ffa6 	bl	db4a <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   12bfe:	2800      	cmp	r0, #0
   12c00:	f47f af72 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12c04:	2112      	movs	r1, #18
   12c06:	4628      	mov	r0, r5
   12c08:	f7fa feb9 	bl	d97e <bb_setUInt8>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionUp.script), 6)) != 0 ||
   12c0c:	2800      	cmp	r0, #0
   12c0e:	f47f af6b 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
   12c12:	9b01      	ldr	r3, [sp, #4]
   12c14:	4628      	mov	r0, r5
   12c16:	8899      	ldrh	r1, [r3, #4]
   12c18:	f7fa fed3 	bl	d9c2 <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12c1c:	2800      	cmp	r0, #0
   12c1e:	f47f af63 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12c22:	2102      	movs	r1, #2
   12c24:	4628      	mov	r0, r5
   12c26:	f7fa feaa 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
   12c2a:	2800      	cmp	r0, #0
   12c2c:	f47f af5c 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12c30:	2102      	movs	r1, #2
   12c32:	4628      	mov	r0, r5
   12c34:	f7fa fea3 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12c38:	2800      	cmp	r0, #0
   12c3a:	f47f af55 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12c3e:	2109      	movs	r1, #9
   12c40:	4628      	mov	r0, r5
   12c42:	f7fa fe9c 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12c46:	2800      	cmp	r0, #0
   12c48:	f47f af4e 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   12c4c:	2106      	movs	r1, #6
   12c4e:	4628      	mov	r0, r5
   12c50:	f7fa fe95 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12c54:	2800      	cmp	r0, #0
   12c56:	f47f af47 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionDown.script), 6)) != 0 ||
   12c5a:	9b01      	ldr	r3, [sp, #4]
   12c5c:	6898      	ldr	r0, [r3, #8]
   12c5e:	f7f1 fa17 	bl	4090 <obj_getLogicalName>
   12c62:	2206      	movs	r2, #6
   12c64:	4601      	mov	r1, r0
   12c66:	4628      	mov	r0, r5
   12c68:	f7fa ff6f 	bl	db4a <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   12c6c:	2800      	cmp	r0, #0
   12c6e:	f47f af3b 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12c72:	2112      	movs	r1, #18
   12c74:	4628      	mov	r0, r5
   12c76:	f7fa fe82 	bl	d97e <bb_setUInt8>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionDown.script), 6)) != 0 ||
   12c7a:	2800      	cmp	r0, #0
   12c7c:	f47f af34 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt16(data, actionSet->actionDown.scriptSelector)) != 0)
   12c80:	9b01      	ldr	r3, [sp, #4]
   12c82:	4628      	mov	r0, r5
   12c84:	8999      	ldrh	r1, [r3, #12]
   12c86:	f7fa fe9c 	bl	d9c2 <bb_setUInt16>
   12c8a:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12c8c:	2800      	cmp	r0, #0
   12c8e:	f47f af2b 	bne.w	12ae8 <cosem_getRegisterMonitor+0x50>
            for (pos = 0; pos != object->actions.size; ++pos)
   12c92:	8af3      	ldrh	r3, [r6, #22]
   12c94:	fa1f f987 	uxth.w	r9, r7
   12c98:	454b      	cmp	r3, r9
   12c9a:	f47f af7b 	bne.w	12b94 <cosem_getRegisterMonitor+0xfc>
   12c9e:	e708      	b.n	12ab2 <cosem_getRegisterMonitor+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12ca0:	f44f 7481 	mov.w	r4, #258	; 0x102
   12ca4:	e705      	b.n	12ab2 <cosem_getRegisterMonitor+0x1a>

00012ca6 <cosem_getSapAssignment>:
{
   12ca6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    if (e->index == 2)
   12caa:	7e03      	ldrb	r3, [r0, #24]
   12cac:	2b02      	cmp	r3, #2
   12cae:	d14c      	bne.n	12d4a <cosem_getSapAssignment+0xa4>
    gxSapAssignment* object = (gxSapAssignment*)e->target;
   12cb0:	6947      	ldr	r7, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12cb2:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setArray(data, object->sapAssignmentList.size)) == 0)
   12cb4:	8af9      	ldrh	r1, [r7, #22]
   12cb6:	4628      	mov	r0, r5
   12cb8:	f7fb fd97 	bl	e7ea <cosem_setArray>
   12cbc:	4604      	mov	r4, r0
   12cbe:	b118      	cbz	r0, 12cc8 <cosem_getSapAssignment+0x22>
}
   12cc0:	4620      	mov	r0, r4
   12cc2:	b002      	add	sp, #8
   12cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12cc8:	4680      	mov	r8, r0
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   12cca:	f107 0910 	add.w	r9, r7, #16
            for (pos = 0; pos != object->sapAssignmentList.size; ++pos)
   12cce:	8afb      	ldrh	r3, [r7, #22]
   12cd0:	fa1f f688 	uxth.w	r6, r8
   12cd4:	42b3      	cmp	r3, r6
   12cd6:	d0f3      	beq.n	12cc0 <cosem_getSapAssignment+0x1a>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12cd8:	2102      	movs	r1, #2
   12cda:	4628      	mov	r0, r5
   12cdc:	f7fa fe4f 	bl	d97e <bb_setUInt8>
   12ce0:	bb88      	cbnz	r0, 12d46 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12ce2:	2102      	movs	r1, #2
   12ce4:	4628      	mov	r0, r5
   12ce6:	f7fa fe4a 	bl	d97e <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12cea:	bb60      	cbnz	r0, 12d46 <cosem_getSapAssignment+0xa0>
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   12cec:	aa01      	add	r2, sp, #4
   12cee:	4631      	mov	r1, r6
   12cf0:	4648      	mov	r0, r9
   12cf2:	f7fe fa0a 	bl	1110a <arr_getByIndex>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   12cf6:	bb30      	cbnz	r0, 12d46 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12cf8:	2112      	movs	r1, #18
   12cfa:	4628      	mov	r0, r5
   12cfc:	f7fa fe3f 	bl	d97e <bb_setUInt8>
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   12d00:	bb08      	cbnz	r0, 12d46 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt16(data, it->id)) != 0 ||
   12d02:	9b01      	ldr	r3, [sp, #4]
   12d04:	4628      	mov	r0, r5
   12d06:	8819      	ldrh	r1, [r3, #0]
   12d08:	f7fa fe5b 	bl	d9c2 <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12d0c:	b9d8      	cbnz	r0, 12d46 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12d0e:	2109      	movs	r1, #9
   12d10:	4628      	mov	r0, r5
   12d12:	f7fa fe34 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt16(data, it->id)) != 0 ||
   12d16:	b9b0      	cbnz	r0, 12d46 <cosem_getSapAssignment+0xa0>
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   12d18:	9b01      	ldr	r3, [sp, #4]
   12d1a:	4629      	mov	r1, r5
   12d1c:	8958      	ldrh	r0, [r3, #10]
   12d1e:	f007 ff2a 	bl	1ab76 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12d22:	4606      	mov	r6, r0
   12d24:	b9a0      	cbnz	r0, 12d50 <cosem_getSapAssignment+0xaa>
                    (ret = bb_set2(data, &it->name, 0, bb_size(&it->name))) != 0)
   12d26:	9901      	ldr	r1, [sp, #4]
   12d28:	f101 0a04 	add.w	sl, r1, #4
   12d2c:	4650      	mov	r0, sl
   12d2e:	f7fa fdba 	bl	d8a6 <bb_size>
   12d32:	4632      	mov	r2, r6
   12d34:	4603      	mov	r3, r0
   12d36:	4651      	mov	r1, sl
   12d38:	4628      	mov	r0, r5
   12d3a:	f7fa ff35 	bl	dba8 <bb_set2>
   12d3e:	f108 0801 	add.w	r8, r8, #1
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   12d42:	2800      	cmp	r0, #0
   12d44:	d0c3      	beq.n	12cce <cosem_getSapAssignment+0x28>
                    (ret = bb_set2(data, &it->name, 0, bb_size(&it->name))) != 0)
   12d46:	4604      	mov	r4, r0
    return ret;
   12d48:	e7ba      	b.n	12cc0 <cosem_getSapAssignment+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12d4a:	f44f 7481 	mov.w	r4, #258	; 0x102
   12d4e:	e7b7      	b.n	12cc0 <cosem_getSapAssignment+0x1a>
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   12d50:	4604      	mov	r4, r0
   12d52:	e7b5      	b.n	12cc0 <cosem_getSapAssignment+0x1a>

00012d54 <cosem_getSchedule>:
{
   12d54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   12d58:	7e03      	ldrb	r3, [r0, #24]
   12d5a:	2b02      	cmp	r3, #2
   12d5c:	f040 8081 	bne.w	12e62 <cosem_getSchedule+0x10e>
    gxSchedule* object = (gxSchedule*)e->target;
   12d60:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12d62:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setArray(data, object->entries.size)) != 0)
   12d64:	8af1      	ldrh	r1, [r6, #22]
   12d66:	4628      	mov	r0, r5
   12d68:	f7fb fd3f 	bl	e7ea <cosem_setArray>
   12d6c:	4604      	mov	r4, r0
   12d6e:	2800      	cmp	r0, #0
   12d70:	d173      	bne.n	12e5a <cosem_getSchedule+0x106>
        ba_init(&ba);
   12d72:	a802      	add	r0, sp, #8
   12d74:	f7fa fc93 	bl	d69e <ba_init>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   12d78:	f106 0710 	add.w	r7, r6, #16
        for (pos = 0; pos != object->entries.size; ++pos)
   12d7c:	8af3      	ldrh	r3, [r6, #22]
   12d7e:	fa1f f884 	uxth.w	r8, r4
   12d82:	4543      	cmp	r3, r8
   12d84:	d101      	bne.n	12d8a <cosem_getSchedule+0x36>
   12d86:	2000      	movs	r0, #0
   12d88:	e066      	b.n	12e58 <cosem_getSchedule+0x104>
            if ((ret = cosem_setStructure(data, 10)) != 0 ||
   12d8a:	210a      	movs	r1, #10
   12d8c:	4628      	mov	r0, r5
   12d8e:	f7fb fd1e 	bl	e7ce <cosem_setStructure>
   12d92:	2800      	cmp	r0, #0
   12d94:	d160      	bne.n	12e58 <cosem_getSchedule+0x104>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   12d96:	aa01      	add	r2, sp, #4
   12d98:	4641      	mov	r1, r8
   12d9a:	4638      	mov	r0, r7
   12d9c:	f7fe f9b5 	bl	1110a <arr_getByIndex>
            if ((ret = cosem_setStructure(data, 10)) != 0 ||
   12da0:	2800      	cmp	r0, #0
   12da2:	d159      	bne.n	12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->index)) != 0 ||
   12da4:	9b01      	ldr	r3, [sp, #4]
   12da6:	4628      	mov	r0, r5
   12da8:	8819      	ldrh	r1, [r3, #0]
   12daa:	f7fb fcc3 	bl	e734 <cosem_setUInt16>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   12dae:	2800      	cmp	r0, #0
   12db0:	d152      	bne.n	12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setBoolean(data, se->enable)) != 0 ||
   12db2:	9b01      	ldr	r3, [sp, #4]
   12db4:	4628      	mov	r0, r5
   12db6:	7899      	ldrb	r1, [r3, #2]
   12db8:	f7fb fd33 	bl	e822 <cosem_setBoolean>
                (ret = cosem_setUInt16(data, se->index)) != 0 ||
   12dbc:	2800      	cmp	r0, #0
   12dbe:	d14b      	bne.n	12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setOctetString2(data, obj_getLogicalName((gxObject*)se->scriptTable), 6)) != 0 ||
   12dc0:	9b01      	ldr	r3, [sp, #4]
   12dc2:	6858      	ldr	r0, [r3, #4]
   12dc4:	f7f1 f964 	bl	4090 <obj_getLogicalName>
   12dc8:	2206      	movs	r2, #6
   12dca:	4601      	mov	r1, r0
   12dcc:	4628      	mov	r0, r5
   12dce:	f7fb fc82 	bl	e6d6 <cosem_setOctetString2>
                (ret = cosem_setBoolean(data, se->enable)) != 0 ||
   12dd2:	2800      	cmp	r0, #0
   12dd4:	d140      	bne.n	12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->scriptSelector)) != 0 ||
   12dd6:	9b01      	ldr	r3, [sp, #4]
   12dd8:	4628      	mov	r0, r5
   12dda:	8919      	ldrh	r1, [r3, #8]
   12ddc:	f7fb fcaa 	bl	e734 <cosem_setUInt16>
                (ret = cosem_setOctetString2(data, obj_getLogicalName((gxObject*)se->scriptTable), 6)) != 0 ||
   12de0:	2800      	cmp	r0, #0
   12de2:	d139      	bne.n	12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setTimeAsOctetString(data, &se->switchTime)) != 0 ||
   12de4:	9901      	ldr	r1, [sp, #4]
   12de6:	4628      	mov	r0, r5
   12de8:	310c      	adds	r1, #12
   12dea:	f7fb fc14 	bl	e616 <cosem_setTimeAsOctetString>
                (ret = cosem_setUInt16(data, se->scriptSelector)) != 0 ||
   12dee:	bb98      	cbnz	r0, 12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->validityWindow)) != 0 ||
   12df0:	9b01      	ldr	r3, [sp, #4]
   12df2:	4628      	mov	r0, r5
   12df4:	8b19      	ldrh	r1, [r3, #24]
   12df6:	f7fb fc9d 	bl	e734 <cosem_setUInt16>
                (ret = cosem_setTimeAsOctetString(data, &se->switchTime)) != 0 ||
   12dfa:	bb68      	cbnz	r0, 12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setBitString(data, se->execWeekdays, 7)) != 0 ||
   12dfc:	9b01      	ldr	r3, [sp, #4]
   12dfe:	7e99      	ldrb	r1, [r3, #26]
   12e00:	2207      	movs	r2, #7
   12e02:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   12e06:	4628      	mov	r0, r5
   12e08:	f7fb fbb9 	bl	e57e <cosem_setBitString>
                (ret = cosem_setUInt16(data, se->validityWindow)) != 0 ||
   12e0c:	bb20      	cbnz	r0, 12e58 <cosem_getSchedule+0x104>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   12e0e:	2104      	movs	r1, #4
   12e10:	4628      	mov	r0, r5
   12e12:	f7fa fdb4 	bl	d97e <bb_setUInt8>
                (ret = cosem_setBitString(data, se->execWeekdays, 7)) != 0 ||
   12e16:	b9f8      	cbnz	r0, 12e58 <cosem_getSchedule+0x104>
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
   12e18:	9b01      	ldr	r3, [sp, #4]
   12e1a:	4629      	mov	r1, r5
   12e1c:	8c58      	ldrh	r0, [r3, #34]	; 0x22
   12e1e:	f007 feaa 	bl	1ab76 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   12e22:	b9c8      	cbnz	r0, 12e58 <cosem_getSchedule+0x104>
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
   12e24:	9b01      	ldr	r3, [sp, #4]
   12e26:	8c58      	ldrh	r0, [r3, #34]	; 0x22
   12e28:	f8d3 801c 	ldr.w	r8, [r3, #28]
   12e2c:	f7ee fba6 	bl	157c <ba_getByteCount>
   12e30:	4641      	mov	r1, r8
   12e32:	4602      	mov	r2, r0
   12e34:	4628      	mov	r0, r5
   12e36:	f7fa fe88 	bl	db4a <bb_set>
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
   12e3a:	b968      	cbnz	r0, 12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setDateTimeAsOctetString(data, &se->beginDate)) != 0 ||
   12e3c:	9901      	ldr	r1, [sp, #4]
   12e3e:	4628      	mov	r0, r5
   12e40:	3124      	adds	r1, #36	; 0x24
   12e42:	f7fb fb76 	bl	e532 <cosem_setDateTimeAsOctetString>
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
   12e46:	b938      	cbnz	r0, 12e58 <cosem_getSchedule+0x104>
                (ret = cosem_setDateTimeAsOctetString(data, &se->endDate)) != 0)
   12e48:	9901      	ldr	r1, [sp, #4]
   12e4a:	4628      	mov	r0, r5
   12e4c:	3130      	adds	r1, #48	; 0x30
   12e4e:	f7fb fb70 	bl	e532 <cosem_setDateTimeAsOctetString>
   12e52:	3401      	adds	r4, #1
                (ret = cosem_setDateTimeAsOctetString(data, &se->beginDate)) != 0 ||
   12e54:	2800      	cmp	r0, #0
   12e56:	d091      	beq.n	12d7c <cosem_getSchedule+0x28>
   12e58:	4604      	mov	r4, r0
}
   12e5a:	4620      	mov	r0, r4
   12e5c:	b004      	add	sp, #16
   12e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12e62:	f44f 7481 	mov.w	r4, #258	; 0x102
   12e66:	e7f8      	b.n	12e5a <cosem_getSchedule+0x106>

00012e68 <cosem_getScriptTable>:
{
   12e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   12e6a:	7e03      	ldrb	r3, [r0, #24]
   12e6c:	2b02      	cmp	r3, #2
   12e6e:	d162      	bne.n	12f36 <cosem_getScriptTable+0xce>
    gxScriptTable* object = (gxScriptTable*)e->target;
   12e70:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12e72:	6884      	ldr	r4, [r0, #8]
        if ((ret = cosem_setArray(data, object->scripts.size)) == 0)
   12e74:	8ae9      	ldrh	r1, [r5, #22]
   12e76:	4620      	mov	r0, r4
   12e78:	f7fb fcb7 	bl	e7ea <cosem_setArray>
   12e7c:	2800      	cmp	r0, #0
   12e7e:	d058      	beq.n	12f32 <cosem_getScriptTable+0xca>
}
   12e80:	b003      	add	sp, #12
   12e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if ((ret = arr_getByIndex(&it->actions, pos2, (void**)&a)) != 0 ||
   12e84:	aa01      	add	r2, sp, #4
   12e86:	3004      	adds	r0, #4
   12e88:	f7fe f93f 	bl	1110a <arr_getByIndex>
   12e8c:	bb48      	cbnz	r0, 12ee2 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setStructure(data, 5)) != 0 ||
   12e8e:	2105      	movs	r1, #5
   12e90:	4620      	mov	r0, r4
   12e92:	f7fb fc9c 	bl	e7ce <cosem_setStructure>
                    if ((ret = arr_getByIndex(&it->actions, pos2, (void**)&a)) != 0 ||
   12e96:	bb20      	cbnz	r0, 12ee2 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setEnum(data, a->type)) != 0 ||
   12e98:	9b01      	ldr	r3, [sp, #4]
   12e9a:	4620      	mov	r0, r4
   12e9c:	7919      	ldrb	r1, [r3, #4]
   12e9e:	f7fb fcb2 	bl	e806 <cosem_setEnum>
                        (ret = cosem_setStructure(data, 5)) != 0 ||
   12ea2:	b9f0      	cbnz	r0, 12ee2 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setUInt16(data, a->target == NULL ? 0 : a->target->objectType)) != 0 ||
   12ea4:	9b01      	ldr	r3, [sp, #4]
   12ea6:	6819      	ldr	r1, [r3, #0]
   12ea8:	b101      	cbz	r1, 12eac <cosem_getScriptTable+0x44>
   12eaa:	8809      	ldrh	r1, [r1, #0]
   12eac:	4620      	mov	r0, r4
   12eae:	f7fb fc41 	bl	e734 <cosem_setUInt16>
                        (ret = cosem_setEnum(data, a->type)) != 0 ||
   12eb2:	b9b0      	cbnz	r0, 12ee2 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setOctetString2(data, obj_getLogicalName(a->target), 6)) != 0 ||
   12eb4:	9b01      	ldr	r3, [sp, #4]
   12eb6:	6818      	ldr	r0, [r3, #0]
   12eb8:	f7f1 f8ea 	bl	4090 <obj_getLogicalName>
   12ebc:	2206      	movs	r2, #6
   12ebe:	4601      	mov	r1, r0
   12ec0:	4620      	mov	r0, r4
   12ec2:	f7fb fc08 	bl	e6d6 <cosem_setOctetString2>
                        (ret = cosem_setUInt16(data, a->target == NULL ? 0 : a->target->objectType)) != 0 ||
   12ec6:	b960      	cbnz	r0, 12ee2 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setInt8(data, a->index)) != 0 ||
   12ec8:	9b01      	ldr	r3, [sp, #4]
   12eca:	4620      	mov	r0, r4
   12ecc:	7e19      	ldrb	r1, [r3, #24]
   12ece:	f7fb fc4d 	bl	e76c <cosem_setInt8>
                        (ret = cosem_setOctetString2(data, obj_getLogicalName(a->target), 6)) != 0 ||
   12ed2:	b930      	cbnz	r0, 12ee2 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setVariant(data, &a->parameter)) != 0)
   12ed4:	9901      	ldr	r1, [sp, #4]
   12ed6:	4620      	mov	r0, r4
   12ed8:	3108      	adds	r1, #8
   12eda:	f7fb fc71 	bl	e7c0 <cosem_setVariant>
   12ede:	3701      	adds	r7, #1
                        (ret = cosem_setInt8(data, a->index)) != 0 ||
   12ee0:	b300      	cbz	r0, 12f24 <cosem_getScriptTable+0xbc>
            for (pos = 0; pos != object->scripts.size; ++pos)
   12ee2:	3601      	adds	r6, #1
   12ee4:	8aeb      	ldrh	r3, [r5, #22]
   12ee6:	b2b1      	uxth	r1, r6
   12ee8:	428b      	cmp	r3, r1
   12eea:	d0c9      	beq.n	12e80 <cosem_getScriptTable+0x18>
                if ((ret = arr_getByIndex(&object->scripts, pos, (void**)&it)) != 0 ||
   12eec:	466a      	mov	r2, sp
   12eee:	f105 0010 	add.w	r0, r5, #16
   12ef2:	f7fe f90a 	bl	1110a <arr_getByIndex>
   12ef6:	2800      	cmp	r0, #0
   12ef8:	d1c2      	bne.n	12e80 <cosem_getScriptTable+0x18>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   12efa:	2102      	movs	r1, #2
   12efc:	4620      	mov	r0, r4
   12efe:	f7fb fc66 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->scripts, pos, (void**)&it)) != 0 ||
   12f02:	2800      	cmp	r0, #0
   12f04:	d1bc      	bne.n	12e80 <cosem_getScriptTable+0x18>
                    (ret = cosem_setUInt16(data, it->id)) != 0 ||
   12f06:	9b00      	ldr	r3, [sp, #0]
   12f08:	4620      	mov	r0, r4
   12f0a:	8819      	ldrh	r1, [r3, #0]
   12f0c:	f7fb fc12 	bl	e734 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   12f10:	2800      	cmp	r0, #0
   12f12:	d1b5      	bne.n	12e80 <cosem_getScriptTable+0x18>
                    (ret = cosem_setArray(data, it->actions.size)) != 0)
   12f14:	9b00      	ldr	r3, [sp, #0]
   12f16:	4620      	mov	r0, r4
   12f18:	8959      	ldrh	r1, [r3, #10]
   12f1a:	f7fb fc66 	bl	e7ea <cosem_setArray>
                    (ret = cosem_setUInt16(data, it->id)) != 0 ||
   12f1e:	2800      	cmp	r0, #0
   12f20:	d1ae      	bne.n	12e80 <cosem_getScriptTable+0x18>
   12f22:	4607      	mov	r7, r0
                for (pos2 = 0; pos2 != it->actions.size; ++pos2)
   12f24:	9800      	ldr	r0, [sp, #0]
   12f26:	8943      	ldrh	r3, [r0, #10]
   12f28:	b2b9      	uxth	r1, r7
   12f2a:	428b      	cmp	r3, r1
   12f2c:	d1aa      	bne.n	12e84 <cosem_getScriptTable+0x1c>
   12f2e:	2000      	movs	r0, #0
   12f30:	e7d7      	b.n	12ee2 <cosem_getScriptTable+0x7a>
   12f32:	4606      	mov	r6, r0
   12f34:	e7d6      	b.n	12ee4 <cosem_getScriptTable+0x7c>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12f36:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   12f3a:	e7a1      	b.n	12e80 <cosem_getScriptTable+0x18>

00012f3c <cosem_getSpecialDaysTable>:
{
   12f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (e->index == 2)
   12f3e:	7e03      	ldrb	r3, [r0, #24]
   12f40:	2b02      	cmp	r3, #2
{
   12f42:	b087      	sub	sp, #28
    if (e->index == 2)
   12f44:	d131      	bne.n	12faa <cosem_getSpecialDaysTable+0x6e>
    gxSpecialDaysTable* object = (gxSpecialDaysTable*)e->target;
   12f46:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12f48:	6884      	ldr	r4, [r0, #8]
        if ((ret = var_init(&tmp)) != 0 ||
   12f4a:	a802      	add	r0, sp, #8
   12f4c:	f008 f96f 	bl	1b22e <var_init>
   12f50:	b920      	cbnz	r0, 12f5c <cosem_getSpecialDaysTable+0x20>
            (ret = cosem_setArray(data, object->entries.size)) == 0)
   12f52:	8ae9      	ldrh	r1, [r5, #22]
   12f54:	4620      	mov	r0, r4
   12f56:	f7fb fc48 	bl	e7ea <cosem_setArray>
        if ((ret = var_init(&tmp)) != 0 ||
   12f5a:	bb20      	cbnz	r0, 12fa6 <cosem_getSpecialDaysTable+0x6a>
{
   12f5c:	2600      	movs	r6, #0
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   12f5e:	f105 0710 	add.w	r7, r5, #16
            for (pos = 0; pos != object->entries.size; ++pos)
   12f62:	8aeb      	ldrh	r3, [r5, #22]
   12f64:	b2b1      	uxth	r1, r6
   12f66:	428b      	cmp	r3, r1
   12f68:	d01d      	beq.n	12fa6 <cosem_getSpecialDaysTable+0x6a>
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   12f6a:	aa01      	add	r2, sp, #4
   12f6c:	4638      	mov	r0, r7
   12f6e:	f7fe f8cc 	bl	1110a <arr_getByIndex>
   12f72:	b9c0      	cbnz	r0, 12fa6 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
   12f74:	2103      	movs	r1, #3
   12f76:	4620      	mov	r0, r4
   12f78:	f7fb fc29 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   12f7c:	b998      	cbnz	r0, 12fa6 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setUInt16(data, sd->index)) != 0 ||
   12f7e:	9b01      	ldr	r3, [sp, #4]
   12f80:	4620      	mov	r0, r4
   12f82:	8819      	ldrh	r1, [r3, #0]
   12f84:	f7fb fbd6 	bl	e734 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
   12f88:	b968      	cbnz	r0, 12fa6 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setDateAsOctetString(data, &sd->date)) != 0 ||
   12f8a:	9901      	ldr	r1, [sp, #4]
   12f8c:	4620      	mov	r0, r4
   12f8e:	3104      	adds	r1, #4
   12f90:	f7fb fae2 	bl	e558 <cosem_setDateAsOctetString>
                    (ret = cosem_setUInt16(data, sd->index)) != 0 ||
   12f94:	b938      	cbnz	r0, 12fa6 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setUInt8(data, sd->dayId)) != 0)
   12f96:	9b01      	ldr	r3, [sp, #4]
   12f98:	4620      	mov	r0, r4
   12f9a:	7c19      	ldrb	r1, [r3, #16]
   12f9c:	f7fb fbbc 	bl	e718 <cosem_setUInt8>
   12fa0:	3601      	adds	r6, #1
                    (ret = cosem_setDateAsOctetString(data, &sd->date)) != 0 ||
   12fa2:	2800      	cmp	r0, #0
   12fa4:	d0dd      	beq.n	12f62 <cosem_getSpecialDaysTable+0x26>
}
   12fa6:	b007      	add	sp, #28
   12fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12faa:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   12fae:	e7fa      	b.n	12fa6 <cosem_getSpecialDaysTable+0x6a>

00012fb0 <cosem_getTcpUdpSetup>:
{
   12fb0:	b510      	push	{r4, lr}
    if (e->index == 2)
   12fb2:	7e02      	ldrb	r2, [r0, #24]
    gxTcpUdpSetup* object = (gxTcpUdpSetup*)e->target;
   12fb4:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   12fb6:	2a02      	cmp	r2, #2
   12fb8:	d105      	bne.n	12fc6 <cosem_getTcpUdpSetup+0x16>
        ret = cosem_setUInt16(e->value.byteArr, object->port);
   12fba:	8a19      	ldrh	r1, [r3, #16]
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   12fbc:	6880      	ldr	r0, [r0, #8]
}
   12fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   12fc2:	f7fb bbb7 	b.w	e734 <cosem_setUInt16>
    else if (e->index == 3)
   12fc6:	2a03      	cmp	r2, #3
   12fc8:	d10a      	bne.n	12fe0 <cosem_getTcpUdpSetup+0x30>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName(object->ipSetup), 6);
   12fca:	6884      	ldr	r4, [r0, #8]
   12fcc:	6958      	ldr	r0, [r3, #20]
   12fce:	f7f1 f85f 	bl	4090 <obj_getLogicalName>
   12fd2:	2206      	movs	r2, #6
   12fd4:	4601      	mov	r1, r0
   12fd6:	4620      	mov	r0, r4
}
   12fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName(object->ipSetup), 6);
   12fdc:	f7fb bb7b 	b.w	e6d6 <cosem_setOctetString2>
    else if (e->index == 4)
   12fe0:	2a04      	cmp	r2, #4
   12fe2:	d101      	bne.n	12fe8 <cosem_getTcpUdpSetup+0x38>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumSegmentSize);
   12fe4:	8b99      	ldrh	r1, [r3, #28]
   12fe6:	e7e9      	b.n	12fbc <cosem_getTcpUdpSetup+0xc>
    else if (e->index == 5)
   12fe8:	2a05      	cmp	r2, #5
   12fea:	d105      	bne.n	12ff8 <cosem_getTcpUdpSetup+0x48>
}
   12fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setUInt8(e->value.byteArr, object->maximumSimultaneousConnections);
   12ff0:	7e19      	ldrb	r1, [r3, #24]
   12ff2:	6880      	ldr	r0, [r0, #8]
   12ff4:	f7fb bb90 	b.w	e718 <cosem_setUInt8>
    else if (e->index == 6)
   12ff8:	2a06      	cmp	r2, #6
   12ffa:	d101      	bne.n	13000 <cosem_getTcpUdpSetup+0x50>
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   12ffc:	8b59      	ldrh	r1, [r3, #26]
   12ffe:	e7dd      	b.n	12fbc <cosem_getTcpUdpSetup+0xc>
}
   13000:	f44f 7081 	mov.w	r0, #258	; 0x102
   13004:	bd10      	pop	{r4, pc}

00013006 <cosem_getUtilityTables>:
    if (e->index == 2)
   13006:	7e03      	ldrb	r3, [r0, #24]
    gxUtilityTables* object = (gxUtilityTables*)e->target;
   13008:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   1300a:	2b02      	cmp	r3, #2
   1300c:	d103      	bne.n	13016 <cosem_getUtilityTables+0x10>
        ret = cosem_setUInt16(e->value.byteArr, object->tableId);
   1300e:	8a09      	ldrh	r1, [r1, #16]
   13010:	6880      	ldr	r0, [r0, #8]
   13012:	f7fb bb8f 	b.w	e734 <cosem_setUInt16>
    else if (e->index == 3)
   13016:	2b03      	cmp	r3, #3
   13018:	d005      	beq.n	13026 <cosem_getUtilityTables+0x20>
    else if (e->index == 4)
   1301a:	2b04      	cmp	r3, #4
   1301c:	d105      	bne.n	1302a <cosem_getUtilityTables+0x24>
        ret = cosem_setOctetString(e->value.byteArr, &object->buffer);
   1301e:	6880      	ldr	r0, [r0, #8]
   13020:	3114      	adds	r1, #20
   13022:	f7fb bb0b 	b.w	e63c <cosem_setOctetString>
    int ret = 0;
   13026:	2000      	movs	r0, #0
   13028:	4770      	bx	lr
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1302a:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   1302e:	4770      	bx	lr

00013030 <cosem_getMbusMasterPortSetup>:
    if (e->index == 2)
   13030:	7e03      	ldrb	r3, [r0, #24]
   13032:	2b02      	cmp	r3, #2
   13034:	d104      	bne.n	13040 <cosem_getMbusMasterPortSetup+0x10>
        ret = cosem_setEnum(e->value.byteArr, object->commSpeed);
   13036:	6943      	ldr	r3, [r0, #20]
   13038:	6880      	ldr	r0, [r0, #8]
   1303a:	7c19      	ldrb	r1, [r3, #16]
   1303c:	f7fb bbe3 	b.w	e806 <cosem_setEnum>
}
   13040:	f44f 7081 	mov.w	r0, #258	; 0x102
   13044:	4770      	bx	lr

00013046 <cosem_getPushSetup>:
{
   13046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   13048:	7e01      	ldrb	r1, [r0, #24]
    gxPushSetup* object = (gxPushSetup*)e->target;
   1304a:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   1304c:	6887      	ldr	r7, [r0, #8]
    if (e->index == 2)
   1304e:	2902      	cmp	r1, #2
   13050:	d13f      	bne.n	130d2 <cosem_getPushSetup+0x8c>
        if ((ret = cosem_setArray(data, object->pushObjectList.size)) == 0)
   13052:	8ae1      	ldrh	r1, [r4, #22]
   13054:	4638      	mov	r0, r7
   13056:	f7fb fbc8 	bl	e7ea <cosem_setArray>
   1305a:	2800      	cmp	r0, #0
   1305c:	d035      	beq.n	130ca <cosem_getPushSetup+0x84>
}
   1305e:	b003      	add	sp, #12
   13060:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   13062:	aa01      	add	r2, sp, #4
   13064:	4630      	mov	r0, r6
   13066:	f7fe f850 	bl	1110a <arr_getByIndex>
   1306a:	2800      	cmp	r0, #0
   1306c:	d1f7      	bne.n	1305e <cosem_getPushSetup+0x18>
                    (ret = cosem_setStructure(data, 4)) != 0 ||
   1306e:	2104      	movs	r1, #4
   13070:	4638      	mov	r0, r7
   13072:	f7fb fbac 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   13076:	2800      	cmp	r0, #0
   13078:	d1f1      	bne.n	1305e <cosem_getPushSetup+0x18>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
   1307a:	9b01      	ldr	r3, [sp, #4]
   1307c:	681b      	ldr	r3, [r3, #0]
   1307e:	4638      	mov	r0, r7
   13080:	8819      	ldrh	r1, [r3, #0]
   13082:	f7fb fb57 	bl	e734 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 4)) != 0 ||
   13086:	2800      	cmp	r0, #0
   13088:	d1e9      	bne.n	1305e <cosem_getPushSetup+0x18>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   1308a:	9b01      	ldr	r3, [sp, #4]
   1308c:	6819      	ldr	r1, [r3, #0]
   1308e:	2206      	movs	r2, #6
   13090:	4411      	add	r1, r2
   13092:	4638      	mov	r0, r7
   13094:	f7fb fb1f 	bl	e6d6 <cosem_setOctetString2>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
   13098:	2800      	cmp	r0, #0
   1309a:	d1e0      	bne.n	1305e <cosem_getPushSetup+0x18>
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   1309c:	9b01      	ldr	r3, [sp, #4]
   1309e:	685b      	ldr	r3, [r3, #4]
   130a0:	4638      	mov	r0, r7
   130a2:	7819      	ldrb	r1, [r3, #0]
   130a4:	f7fb fb62 	bl	e76c <cosem_setInt8>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   130a8:	2800      	cmp	r0, #0
   130aa:	d1d8      	bne.n	1305e <cosem_getPushSetup+0x18>
                    (ret = cosem_setUInt16(data, ((gxTarget*)it->value)->dataIndex)) != 0)
   130ac:	9b01      	ldr	r3, [sp, #4]
   130ae:	685b      	ldr	r3, [r3, #4]
   130b0:	4638      	mov	r0, r7
   130b2:	8859      	ldrh	r1, [r3, #2]
   130b4:	f7fb fb3e 	bl	e734 <cosem_setUInt16>
   130b8:	3501      	adds	r5, #1
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   130ba:	2800      	cmp	r0, #0
   130bc:	d1cf      	bne.n	1305e <cosem_getPushSetup+0x18>
            for (pos = 0; pos != object->pushObjectList.size; ++pos)
   130be:	8ae3      	ldrh	r3, [r4, #22]
   130c0:	b2a9      	uxth	r1, r5
   130c2:	428b      	cmp	r3, r1
   130c4:	d1cd      	bne.n	13062 <cosem_getPushSetup+0x1c>
   130c6:	2000      	movs	r0, #0
   130c8:	e7c9      	b.n	1305e <cosem_getPushSetup+0x18>
   130ca:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   130cc:	f104 0610 	add.w	r6, r4, #16
   130d0:	e7f5      	b.n	130be <cosem_getPushSetup+0x78>
    else if (e->index == 3)
   130d2:	2903      	cmp	r1, #3
   130d4:	d117      	bne.n	13106 <cosem_getPushSetup+0xc0>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   130d6:	4638      	mov	r0, r7
   130d8:	f7fb fb79 	bl	e7ce <cosem_setStructure>
   130dc:	2800      	cmp	r0, #0
   130de:	d1be      	bne.n	1305e <cosem_getPushSetup+0x18>
            (ret = cosem_setEnum(data, object->service)) != 0 ||
   130e0:	7f21      	ldrb	r1, [r4, #28]
   130e2:	4638      	mov	r0, r7
   130e4:	f7fb fb8f 	bl	e806 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   130e8:	2800      	cmp	r0, #0
   130ea:	d1b8      	bne.n	1305e <cosem_getPushSetup+0x18>
            (ret = cosem_setOctetString(data, &object->destination)) != 0 ||
   130ec:	f104 0120 	add.w	r1, r4, #32
   130f0:	4638      	mov	r0, r7
   130f2:	f7fb faa3 	bl	e63c <cosem_setOctetString>
            (ret = cosem_setEnum(data, object->service)) != 0 ||
   130f6:	2800      	cmp	r0, #0
   130f8:	d1b1      	bne.n	1305e <cosem_getPushSetup+0x18>
            (ret = cosem_setEnum(data, object->message)) != 0)
   130fa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   130fe:	4638      	mov	r0, r7
   13100:	f7fb fb81 	bl	e806 <cosem_setEnum>
   13104:	e7ab      	b.n	1305e <cosem_getPushSetup+0x18>
    else if (e->index == 4)
   13106:	2904      	cmp	r1, #4
   13108:	d129      	bne.n	1315e <cosem_getPushSetup+0x118>
        if ((ret = cosem_setArray(data, object->communicationWindow.size)) == 0)
   1310a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   1310c:	4638      	mov	r0, r7
   1310e:	f7fb fb6c 	bl	e7ea <cosem_setArray>
   13112:	2800      	cmp	r0, #0
   13114:	d1a3      	bne.n	1305e <cosem_getPushSetup+0x18>
   13116:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->communicationWindow, pos, (void**)&it)) != 0 ||
   13118:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1311c:	e01a      	b.n	13154 <cosem_getPushSetup+0x10e>
   1311e:	aa01      	add	r2, sp, #4
   13120:	4630      	mov	r0, r6
   13122:	f7fd fff2 	bl	1110a <arr_getByIndex>
   13126:	2800      	cmp	r0, #0
   13128:	d199      	bne.n	1305e <cosem_getPushSetup+0x18>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   1312a:	2102      	movs	r1, #2
   1312c:	4638      	mov	r0, r7
   1312e:	f7fb fb4e 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->communicationWindow, pos, (void**)&it)) != 0 ||
   13132:	2800      	cmp	r0, #0
   13134:	d193      	bne.n	1305e <cosem_getPushSetup+0x18>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->key)) != 0 ||
   13136:	9b01      	ldr	r3, [sp, #4]
   13138:	4638      	mov	r0, r7
   1313a:	6819      	ldr	r1, [r3, #0]
   1313c:	f7fb f9f9 	bl	e532 <cosem_setDateTimeAsOctetString>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   13140:	2800      	cmp	r0, #0
   13142:	d18c      	bne.n	1305e <cosem_getPushSetup+0x18>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->value)) != 0)
   13144:	9b01      	ldr	r3, [sp, #4]
   13146:	4638      	mov	r0, r7
   13148:	6859      	ldr	r1, [r3, #4]
   1314a:	f7fb f9f2 	bl	e532 <cosem_setDateTimeAsOctetString>
   1314e:	3501      	adds	r5, #1
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->key)) != 0 ||
   13150:	2800      	cmp	r0, #0
   13152:	d184      	bne.n	1305e <cosem_getPushSetup+0x18>
            for (pos = 0; pos != object->communicationWindow.size; ++pos)
   13154:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   13156:	b2a9      	uxth	r1, r5
   13158:	428b      	cmp	r3, r1
   1315a:	d1e0      	bne.n	1311e <cosem_getPushSetup+0xd8>
   1315c:	e7b3      	b.n	130c6 <cosem_getPushSetup+0x80>
    else if (e->index == 5)
   1315e:	2905      	cmp	r1, #5
   13160:	d104      	bne.n	1316c <cosem_getPushSetup+0x126>
        ret = cosem_setUInt16(e->value.byteArr, object->randomisationStartInterval);
   13162:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
        ret = cosem_setUInt16(e->value.byteArr, object->repetitionDelay);
   13164:	4638      	mov	r0, r7
   13166:	f7fb fae5 	bl	e734 <cosem_setUInt16>
   1316a:	e778      	b.n	1305e <cosem_getPushSetup+0x18>
    else if (e->index == 6)
   1316c:	2906      	cmp	r1, #6
   1316e:	d105      	bne.n	1317c <cosem_getPushSetup+0x136>
        ret = cosem_setUInt8(e->value.byteArr, object->numberOfRetries);
   13170:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
   13174:	4638      	mov	r0, r7
   13176:	f7fb facf 	bl	e718 <cosem_setUInt8>
   1317a:	e770      	b.n	1305e <cosem_getPushSetup+0x18>
    else if (e->index == 7)
   1317c:	2907      	cmp	r1, #7
   1317e:	d102      	bne.n	13186 <cosem_getPushSetup+0x140>
        ret = cosem_setUInt16(e->value.byteArr, object->repetitionDelay);
   13180:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
   13184:	e7ee      	b.n	13164 <cosem_getPushSetup+0x11e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13186:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1318a:	e768      	b.n	1305e <cosem_getPushSetup+0x18>

0001318c <cosem_getZigbeeNetworkControl>:
{
   1318c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   13190:	7e03      	ldrb	r3, [r0, #24]
    gxZigBeeNetworkControl* object = (gxZigBeeNetworkControl*)e->target;
   13192:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13194:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   13196:	2b02      	cmp	r3, #2
   13198:	d105      	bne.n	131a6 <cosem_getZigbeeNetworkControl+0x1a>
        ret = cosem_setUInt8(e->value.byteArr, object->enableDisableJoining);
   1319a:	7c31      	ldrb	r1, [r6, #16]
   1319c:	4628      	mov	r0, r5
   1319e:	f7fb fabb 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->stackVersion)) != 0)
   131a2:	4604      	mov	r4, r0
   131a4:	e016      	b.n	131d4 <cosem_getZigbeeNetworkControl+0x48>
    else if (e->index == 3)
   131a6:	2b03      	cmp	r3, #3
   131a8:	d104      	bne.n	131b4 <cosem_getZigbeeNetworkControl+0x28>
        ret = cosem_setUInt16(e->value.byteArr, object->joinTimeout);
   131aa:	8a71      	ldrh	r1, [r6, #18]
   131ac:	4628      	mov	r0, r5
   131ae:	f7fb fac1 	bl	e734 <cosem_setUInt16>
   131b2:	e7f6      	b.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
    else if (e->index == 4)
   131b4:	2b04      	cmp	r3, #4
   131b6:	f040 8088 	bne.w	132ca <cosem_getZigbeeNetworkControl+0x13e>
        if ((ret = cosem_setArray(data, object->activeDevices.size)) != 0)
   131ba:	8b71      	ldrh	r1, [r6, #26]
   131bc:	4628      	mov	r0, r5
   131be:	f7fb fb14 	bl	e7ea <cosem_setArray>
   131c2:	4604      	mov	r4, r0
   131c4:	b930      	cbnz	r0, 131d4 <cosem_getZigbeeNetworkControl+0x48>
   131c6:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   131c8:	f106 0814 	add.w	r8, r6, #20
        for (pos = 0; pos != object->activeDevices.size; ++pos)
   131cc:	8b73      	ldrh	r3, [r6, #26]
   131ce:	b2b9      	uxth	r1, r7
   131d0:	428b      	cmp	r3, r1
   131d2:	d103      	bne.n	131dc <cosem_getZigbeeNetworkControl+0x50>
}
   131d4:	4620      	mov	r0, r4
   131d6:	b002      	add	sp, #8
   131d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   131dc:	aa01      	add	r2, sp, #4
   131de:	4640      	mov	r0, r8
   131e0:	f7fd ff93 	bl	1110a <arr_getByIndex>
   131e4:	2800      	cmp	r0, #0
   131e6:	d1dc      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setStructure(data, 14)) != 0 ||
   131e8:	210e      	movs	r1, #14
   131ea:	4628      	mov	r0, r5
   131ec:	f7fb faef 	bl	e7ce <cosem_setStructure>
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   131f0:	2800      	cmp	r0, #0
   131f2:	d1d6      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setOctetString(data, &it->macAddress)) != 0 ||
   131f4:	9901      	ldr	r1, [sp, #4]
   131f6:	4628      	mov	r0, r5
   131f8:	f7fb fa20 	bl	e63c <cosem_setOctetString>
                (ret = cosem_setStructure(data, 14)) != 0 ||
   131fc:	2800      	cmp	r0, #0
   131fe:	d1d0      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setBitString(data, it->status, 5)) != 0 ||
   13200:	9b01      	ldr	r3, [sp, #4]
   13202:	2205      	movs	r2, #5
   13204:	7b19      	ldrb	r1, [r3, #12]
   13206:	4628      	mov	r0, r5
   13208:	f7fb f9b9 	bl	e57e <cosem_setBitString>
                (ret = cosem_setOctetString(data, &it->macAddress)) != 0 ||
   1320c:	2800      	cmp	r0, #0
   1320e:	d1c8      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->maxRSSI)) != 0 ||
   13210:	9b01      	ldr	r3, [sp, #4]
   13212:	4628      	mov	r0, r5
   13214:	7b59      	ldrb	r1, [r3, #13]
   13216:	f7fb faa9 	bl	e76c <cosem_setInt8>
                (ret = cosem_setBitString(data, it->status, 5)) != 0 ||
   1321a:	2800      	cmp	r0, #0
   1321c:	d1c1      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->averageRSSI)) != 0 ||
   1321e:	9b01      	ldr	r3, [sp, #4]
   13220:	4628      	mov	r0, r5
   13222:	7b99      	ldrb	r1, [r3, #14]
   13224:	f7fb faa2 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->maxRSSI)) != 0 ||
   13228:	2800      	cmp	r0, #0
   1322a:	d1ba      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->minRSSI)) != 0 ||
   1322c:	9b01      	ldr	r3, [sp, #4]
   1322e:	4628      	mov	r0, r5
   13230:	7bd9      	ldrb	r1, [r3, #15]
   13232:	f7fb fa9b 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->averageRSSI)) != 0 ||
   13236:	2800      	cmp	r0, #0
   13238:	d1b3      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->maxLQI)) != 0 ||
   1323a:	9b01      	ldr	r3, [sp, #4]
   1323c:	4628      	mov	r0, r5
   1323e:	7c19      	ldrb	r1, [r3, #16]
   13240:	f7fb fa6a 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setInt8(data, it->minRSSI)) != 0 ||
   13244:	2800      	cmp	r0, #0
   13246:	d1ac      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->averageLQI)) != 0 ||
   13248:	9b01      	ldr	r3, [sp, #4]
   1324a:	4628      	mov	r0, r5
   1324c:	7c59      	ldrb	r1, [r3, #17]
   1324e:	f7fb fa63 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->maxLQI)) != 0 ||
   13252:	2800      	cmp	r0, #0
   13254:	d1a5      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->minLQI)) != 0 ||
   13256:	9b01      	ldr	r3, [sp, #4]
   13258:	4628      	mov	r0, r5
   1325a:	7c99      	ldrb	r1, [r3, #18]
   1325c:	f7fb fa5c 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->averageLQI)) != 0 ||
   13260:	2800      	cmp	r0, #0
   13262:	d19e      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, &it->lastCommunicationDateTime)) != 0 ||
   13264:	9901      	ldr	r1, [sp, #4]
   13266:	4628      	mov	r0, r5
   13268:	3114      	adds	r1, #20
   1326a:	f7fb f962 	bl	e532 <cosem_setDateTimeAsOctetString>
                (ret = cosem_setUInt8(data, it->minLQI)) != 0 ||
   1326e:	2800      	cmp	r0, #0
   13270:	d197      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->numberOfHops)) != 0 ||
   13272:	9b01      	ldr	r3, [sp, #4]
   13274:	4628      	mov	r0, r5
   13276:	f893 1020 	ldrb.w	r1, [r3, #32]
   1327a:	f7fb fa4d 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setDateTimeAsOctetString(data, &it->lastCommunicationDateTime)) != 0 ||
   1327e:	2800      	cmp	r0, #0
   13280:	d18f      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->transmissionFailures)) != 0 ||
   13282:	9b01      	ldr	r3, [sp, #4]
   13284:	4628      	mov	r0, r5
   13286:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   1328a:	f7fb fa45 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->numberOfHops)) != 0 ||
   1328e:	2800      	cmp	r0, #0
   13290:	d187      	bne.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->transmissionSuccesses)) != 0 ||
   13292:	9b01      	ldr	r3, [sp, #4]
   13294:	4628      	mov	r0, r5
   13296:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
   1329a:	f7fb fa3d 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->transmissionFailures)) != 0 ||
   1329e:	2800      	cmp	r0, #0
   132a0:	f47f af7f 	bne.w	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->applicationVersion)) != 0 ||
   132a4:	9b01      	ldr	r3, [sp, #4]
   132a6:	4628      	mov	r0, r5
   132a8:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
   132ac:	f7fb fa34 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->transmissionSuccesses)) != 0 ||
   132b0:	2800      	cmp	r0, #0
   132b2:	f47f af76 	bne.w	131a2 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->stackVersion)) != 0)
   132b6:	9b01      	ldr	r3, [sp, #4]
   132b8:	4628      	mov	r0, r5
   132ba:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   132be:	f7fb fa2b 	bl	e718 <cosem_setUInt8>
   132c2:	3701      	adds	r7, #1
                (ret = cosem_setUInt8(data, it->applicationVersion)) != 0 ||
   132c4:	2800      	cmp	r0, #0
   132c6:	d081      	beq.n	131cc <cosem_getZigbeeNetworkControl+0x40>
   132c8:	e76b      	b.n	131a2 <cosem_getZigbeeNetworkControl+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   132ca:	f44f 7481 	mov.w	r4, #258	; 0x102
   132ce:	e781      	b.n	131d4 <cosem_getZigbeeNetworkControl+0x48>

000132d0 <getUnitCharge>:
{
   132d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxByteBuffer* data = e->value.byteArr;
   132d4:	688d      	ldr	r5, [r1, #8]
{
   132d6:	4606      	mov	r6, r0
    if ((ret = cosem_setStructure(data, 3)) != 0 ||
   132d8:	2103      	movs	r1, #3
   132da:	4628      	mov	r0, r5
   132dc:	f7fb fa77 	bl	e7ce <cosem_setStructure>
   132e0:	4604      	mov	r4, r0
   132e2:	2800      	cmp	r0, #0
   132e4:	d13c      	bne.n	13360 <getUnitCharge+0x90>
        (ret = cosem_setStructure(data, 2)) != 0 ||
   132e6:	2102      	movs	r1, #2
   132e8:	4628      	mov	r0, r5
   132ea:	f7fb fa70 	bl	e7ce <cosem_setStructure>
    if ((ret = cosem_setStructure(data, 3)) != 0 ||
   132ee:	4604      	mov	r4, r0
   132f0:	bbb0      	cbnz	r0, 13360 <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
   132f2:	7831      	ldrb	r1, [r6, #0]
   132f4:	4628      	mov	r0, r5
   132f6:	f7fb fa39 	bl	e76c <cosem_setInt8>
        (ret = cosem_setStructure(data, 2)) != 0 ||
   132fa:	4604      	mov	r4, r0
   132fc:	bb80      	cbnz	r0, 13360 <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.priceScale)) != 0 ||
   132fe:	7871      	ldrb	r1, [r6, #1]
   13300:	4628      	mov	r0, r5
   13302:	f7fb fa33 	bl	e76c <cosem_setInt8>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
   13306:	4604      	mov	r4, r0
   13308:	bb50      	cbnz	r0, 13360 <getUnitCharge+0x90>
        (ret = cosem_setStructure(data, 3)) != 0 ||
   1330a:	2103      	movs	r1, #3
   1330c:	4628      	mov	r0, r5
   1330e:	f7fb fa5e 	bl	e7ce <cosem_setStructure>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.priceScale)) != 0 ||
   13312:	4604      	mov	r4, r0
   13314:	bb20      	cbnz	r0, 13360 <getUnitCharge+0x90>
        (ret = cosem_setUInt16(data, target->commodity.target == 0 ? 0 : target->commodity.target->objectType)) != 0 ||
   13316:	6871      	ldr	r1, [r6, #4]
   13318:	b101      	cbz	r1, 1331c <getUnitCharge+0x4c>
   1331a:	8809      	ldrh	r1, [r1, #0]
   1331c:	4628      	mov	r0, r5
   1331e:	f7fb fa09 	bl	e734 <cosem_setUInt16>
        (ret = cosem_setStructure(data, 3)) != 0 ||
   13322:	4604      	mov	r4, r0
   13324:	b9e0      	cbnz	r0, 13360 <getUnitCharge+0x90>
        (ret = cosem_setOctetString2(data, obj_getLogicalName(target->commodity.target), 6)) != 0 ||
   13326:	6870      	ldr	r0, [r6, #4]
   13328:	f7f0 feb2 	bl	4090 <obj_getLogicalName>
   1332c:	2206      	movs	r2, #6
   1332e:	4601      	mov	r1, r0
   13330:	4628      	mov	r0, r5
   13332:	f7fb f9d0 	bl	e6d6 <cosem_setOctetString2>
        (ret = cosem_setUInt16(data, target->commodity.target == 0 ? 0 : target->commodity.target->objectType)) != 0 ||
   13336:	4604      	mov	r4, r0
   13338:	b990      	cbnz	r0, 13360 <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->commodity.attributeIndex)) != 0 ||
   1333a:	7a31      	ldrb	r1, [r6, #8]
   1333c:	4628      	mov	r0, r5
   1333e:	f7fb fa15 	bl	e76c <cosem_setInt8>
        (ret = cosem_setOctetString2(data, obj_getLogicalName(target->commodity.target), 6)) != 0 ||
   13342:	4604      	mov	r4, r0
   13344:	b960      	cbnz	r0, 13360 <getUnitCharge+0x90>
        (ret = cosem_setArray(data, target->chargeTables.size)) != 0)
   13346:	8a71      	ldrh	r1, [r6, #18]
   13348:	4628      	mov	r0, r5
   1334a:	f7fb fa4e 	bl	e7ea <cosem_setArray>
        (ret = cosem_setInt8(data, target->commodity.attributeIndex)) != 0 ||
   1334e:	4604      	mov	r4, r0
   13350:	b930      	cbnz	r0, 13360 <getUnitCharge+0x90>
   13352:	4607      	mov	r7, r0
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   13354:	f106 080c 	add.w	r8, r6, #12
    for (pos = 0; pos != target->chargeTables.size; ++pos)
   13358:	8a73      	ldrh	r3, [r6, #18]
   1335a:	b2b9      	uxth	r1, r7
   1335c:	428b      	cmp	r3, r1
   1335e:	d103      	bne.n	13368 <getUnitCharge+0x98>
}
   13360:	4620      	mov	r0, r4
   13362:	b002      	add	sp, #8
   13364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   13368:	aa01      	add	r2, sp, #4
   1336a:	4640      	mov	r0, r8
   1336c:	f7fd fecd 	bl	1110a <arr_getByIndex>
   13370:	b990      	cbnz	r0, 13398 <getUnitCharge+0xc8>
            (ret = cosem_setStructure(data, 2)) != 0 ||
   13372:	2102      	movs	r1, #2
   13374:	4628      	mov	r0, r5
   13376:	f7fb fa2a 	bl	e7ce <cosem_setStructure>
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   1337a:	b968      	cbnz	r0, 13398 <getUnitCharge+0xc8>
            (ret = cosem_setOctetString(data, &it->index)) != 0 ||
   1337c:	9901      	ldr	r1, [sp, #4]
   1337e:	4628      	mov	r0, r5
   13380:	f7fb f95c 	bl	e63c <cosem_setOctetString>
            (ret = cosem_setStructure(data, 2)) != 0 ||
   13384:	b940      	cbnz	r0, 13398 <getUnitCharge+0xc8>
            (ret = cosem_setInt16(data, it->chargePerUnit)) != 0)
   13386:	9b01      	ldr	r3, [sp, #4]
   13388:	4628      	mov	r0, r5
   1338a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   1338e:	f7fb f9fb 	bl	e788 <cosem_setInt16>
   13392:	3701      	adds	r7, #1
            (ret = cosem_setOctetString(data, &it->index)) != 0 ||
   13394:	2800      	cmp	r0, #0
   13396:	d0df      	beq.n	13358 <getUnitCharge+0x88>
            (ret = cosem_setInt16(data, it->chargePerUnit)) != 0)
   13398:	4604      	mov	r4, r0
   1339a:	e7e1      	b.n	13360 <getUnitCharge+0x90>

0001339c <cosem_getCharge>:
    if (e->index == 2)
   1339c:	7e02      	ldrb	r2, [r0, #24]
    gxCharge* object = (gxCharge*)e->target;
   1339e:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   133a0:	2a02      	cmp	r2, #2
   133a2:	d103      	bne.n	133ac <cosem_getCharge+0x10>
        ret = cosem_setInt32(e->value.byteArr, object->totalAmountPaid);
   133a4:	6919      	ldr	r1, [r3, #16]
        ret = cosem_setInt32(e->value.byteArr, object->lastCollectionAmount);
   133a6:	6880      	ldr	r0, [r0, #8]
   133a8:	f7fb b9fc 	b.w	e7a4 <cosem_setInt32>
    else if (e->index == 3)
   133ac:	2a03      	cmp	r2, #3
   133ae:	d103      	bne.n	133b8 <cosem_getCharge+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->chargeType);
   133b0:	7d19      	ldrb	r1, [r3, #20]
   133b2:	6880      	ldr	r0, [r0, #8]
   133b4:	f7fb ba27 	b.w	e806 <cosem_setEnum>
    else if (e->index == 4)
   133b8:	2a04      	cmp	r2, #4
   133ba:	d103      	bne.n	133c4 <cosem_getCharge+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->priority);
   133bc:	7d59      	ldrb	r1, [r3, #21]
   133be:	6880      	ldr	r0, [r0, #8]
   133c0:	f7fb b9aa 	b.w	e718 <cosem_setUInt8>
    else if (e->index == 5)
   133c4:	2a05      	cmp	r2, #5
   133c6:	d104      	bne.n	133d2 <cosem_getCharge+0x36>
        ret = getUnitCharge(&object->unitChargeActive, e);
   133c8:	4601      	mov	r1, r0
   133ca:	f103 0018 	add.w	r0, r3, #24
        ret = getUnitCharge(&object->unitChargePassive, e);
   133ce:	f7ff bf7f 	b.w	132d0 <getUnitCharge>
    else if (e->index == 6)
   133d2:	2a06      	cmp	r2, #6
   133d4:	d103      	bne.n	133de <cosem_getCharge+0x42>
        ret = getUnitCharge(&object->unitChargePassive, e);
   133d6:	4601      	mov	r1, r0
   133d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
   133dc:	e7f7      	b.n	133ce <cosem_getCharge+0x32>
    else if (e->index == 7)
   133de:	2a07      	cmp	r2, #7
   133e0:	d104      	bne.n	133ec <cosem_getCharge+0x50>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->unitChargeActivationTime);
   133e2:	6880      	ldr	r0, [r0, #8]
   133e4:	f103 0148 	add.w	r1, r3, #72	; 0x48
   133e8:	f7fb b8a3 	b.w	e532 <cosem_setDateTimeAsOctetString>
    else if (e->index == 8)
   133ec:	2a08      	cmp	r2, #8
   133ee:	d103      	bne.n	133f8 <cosem_getCharge+0x5c>
        ret = cosem_setUInt32(e->value.byteArr, object->period);
   133f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
   133f2:	6880      	ldr	r0, [r0, #8]
   133f4:	f7fb b9ac 	b.w	e750 <cosem_setUInt32>
    else if (e->index == 9)
   133f8:	2a09      	cmp	r2, #9
   133fa:	d105      	bne.n	13408 <cosem_getCharge+0x6c>
        ret = cosem_setBitString(e->value.byteArr, object->chargeConfiguration, 2);
   133fc:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
   13400:	6880      	ldr	r0, [r0, #8]
   13402:	2202      	movs	r2, #2
   13404:	f7fb b8bb 	b.w	e57e <cosem_setBitString>
    else if (e->index == 10)
   13408:	2a0a      	cmp	r2, #10
   1340a:	d104      	bne.n	13416 <cosem_getCharge+0x7a>
        ret = cosem_setDateTime(e->value.byteArr, &object->lastCollectionTime);
   1340c:	6880      	ldr	r0, [r0, #8]
   1340e:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   13412:	f7fb b952 	b.w	e6ba <cosem_setDateTime>
    else if (e->index == 11)
   13416:	2a0b      	cmp	r2, #11
   13418:	d101      	bne.n	1341e <cosem_getCharge+0x82>
        ret = cosem_setInt32(e->value.byteArr, object->lastCollectionAmount);
   1341a:	6e99      	ldr	r1, [r3, #104]	; 0x68
   1341c:	e7c3      	b.n	133a6 <cosem_getCharge+0xa>
    else if (e->index == 12)
   1341e:	2a0c      	cmp	r2, #12
   13420:	d101      	bne.n	13426 <cosem_getCharge+0x8a>
        ret = cosem_setInt32(e->value.byteArr, object->totalAmountRemaining);
   13422:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   13424:	e7bf      	b.n	133a6 <cosem_getCharge+0xa>
    else if (e->index == 13)
   13426:	2a0d      	cmp	r2, #13
   13428:	d104      	bne.n	13434 <cosem_getCharge+0x98>
        ret = cosem_setUInt16(e->value.byteArr, object->proportion);
   1342a:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   1342e:	6880      	ldr	r0, [r0, #8]
   13430:	f7fb b980 	b.w	e734 <cosem_setUInt16>
}
   13434:	f44f 7081 	mov.w	r0, #258	; 0x102
   13438:	4770      	bx	lr

0001343a <cosem_getTokenGateway>:
{
   1343a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1343e:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   13440:	6886      	ldr	r6, [r0, #8]
    gxTokenGateway* object = (gxTokenGateway*)e->target;
   13442:	6945      	ldr	r5, [r0, #20]
    switch (e->index)
   13444:	3b02      	subs	r3, #2
   13446:	2b04      	cmp	r3, #4
   13448:	d860      	bhi.n	1350c <cosem_getTokenGateway+0xd2>
   1344a:	e8df f003 	tbb	[pc, r3]
   1344e:	0a03      	.short	0x0a03
   13450:	3210      	.short	0x3210
   13452:	38          	.byte	0x38
   13453:	00          	.byte	0x00
        ret = cosem_setOctetString2(data, object->token.data, (uint16_t)object->token.size);
   13454:	8aea      	ldrh	r2, [r5, #22]
   13456:	6929      	ldr	r1, [r5, #16]
   13458:	4630      	mov	r0, r6
   1345a:	f7fb f93c 	bl	e6d6 <cosem_setOctetString2>
                    (ret = cosem_setOctetString(data, it)) != 0)
   1345e:	4604      	mov	r4, r0
    return ret;
   13460:	e00b      	b.n	1347a <cosem_getTokenGateway+0x40>
        ret = cosem_setDateTimeAsOctetString(data, &object->time);
   13462:	f105 011c 	add.w	r1, r5, #28
   13466:	4630      	mov	r0, r6
   13468:	f7fb f863 	bl	e532 <cosem_setDateTimeAsOctetString>
   1346c:	e7f7      	b.n	1345e <cosem_getTokenGateway+0x24>
        if ((ret = cosem_setArray(data, object->descriptions.size)) == 0)
   1346e:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
   13470:	4630      	mov	r0, r6
   13472:	f7fb f9ba 	bl	e7ea <cosem_setArray>
   13476:	4604      	mov	r4, r0
   13478:	b1b8      	cbz	r0, 134aa <cosem_getTokenGateway+0x70>
}
   1347a:	4620      	mov	r0, r4
   1347c:	b002      	add	sp, #8
   1347e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   13482:	aa01      	add	r2, sp, #4
   13484:	4638      	mov	r0, r7
   13486:	f7fd fe40 	bl	1110a <arr_getByIndex>
   1348a:	2800      	cmp	r0, #0
   1348c:	d1e7      	bne.n	1345e <cosem_getTokenGateway+0x24>
                    (ret = cosem_setOctetString(data, it)) != 0)
   1348e:	9901      	ldr	r1, [sp, #4]
   13490:	4630      	mov	r0, r6
   13492:	f7fb f8d3 	bl	e63c <cosem_setOctetString>
   13496:	f108 0801 	add.w	r8, r8, #1
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   1349a:	2800      	cmp	r0, #0
   1349c:	d1df      	bne.n	1345e <cosem_getTokenGateway+0x24>
            for (pos = 0; pos != object->descriptions.size; ++pos)
   1349e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   134a0:	fa1f f188 	uxth.w	r1, r8
   134a4:	428b      	cmp	r3, r1
   134a6:	d1ec      	bne.n	13482 <cosem_getTokenGateway+0x48>
   134a8:	e7e7      	b.n	1347a <cosem_getTokenGateway+0x40>
   134aa:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   134ac:	f105 0728 	add.w	r7, r5, #40	; 0x28
   134b0:	e7f5      	b.n	1349e <cosem_getTokenGateway+0x64>
        ret = cosem_setEnum(e->value.byteArr, object->deliveryMethod);
   134b2:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   134b6:	4630      	mov	r0, r6
   134b8:	f7fb f9a5 	bl	e806 <cosem_setEnum>
   134bc:	e7cf      	b.n	1345e <cosem_getTokenGateway+0x24>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   134be:	2102      	movs	r1, #2
   134c0:	4630      	mov	r0, r6
   134c2:	f7fb f984 	bl	e7ce <cosem_setStructure>
   134c6:	4604      	mov	r4, r0
   134c8:	2800      	cmp	r0, #0
   134ca:	d1d6      	bne.n	1347a <cosem_getTokenGateway+0x40>
            (ret = cosem_setEnum(data, object->status)) != 0 ||
   134cc:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   134d0:	4630      	mov	r0, r6
   134d2:	f7fb f998 	bl	e806 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   134d6:	4604      	mov	r4, r0
   134d8:	2800      	cmp	r0, #0
   134da:	d1ce      	bne.n	1347a <cosem_getTokenGateway+0x40>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   134dc:	2104      	movs	r1, #4
   134de:	4630      	mov	r0, r6
   134e0:	f7fa fa4d 	bl	d97e <bb_setUInt8>
            (ret = cosem_setEnum(data, object->status)) != 0 ||
   134e4:	4604      	mov	r4, r0
   134e6:	2800      	cmp	r0, #0
   134e8:	d1c7      	bne.n	1347a <cosem_getTokenGateway+0x40>
            (ret = hlp_setObjectCount(object->dataValue.size, data)) != 0 ||
   134ea:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
   134ec:	4631      	mov	r1, r6
   134ee:	f007 fb42 	bl	1ab76 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   134f2:	4604      	mov	r4, r0
   134f4:	2800      	cmp	r0, #0
   134f6:	d1c0      	bne.n	1347a <cosem_getTokenGateway+0x40>
            (ret = bb_set(data, object->dataValue.data, ba_getByteCount(object->dataValue.size))) != 0)
   134f8:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
   134fa:	6bac      	ldr	r4, [r5, #56]	; 0x38
   134fc:	f7ee f83e 	bl	157c <ba_getByteCount>
   13500:	4621      	mov	r1, r4
   13502:	4602      	mov	r2, r0
   13504:	4630      	mov	r0, r6
   13506:	f7fa fb20 	bl	db4a <bb_set>
   1350a:	e7a8      	b.n	1345e <cosem_getTokenGateway+0x24>
    switch (e->index)
   1350c:	f44f 7481 	mov.w	r4, #258	; 0x102
   13510:	e7b3      	b.n	1347a <cosem_getTokenGateway+0x40>

00013512 <cosem_getCredit>:
    if (e->index == 2)
   13512:	7e03      	ldrb	r3, [r0, #24]
    gxCredit* object = (gxCredit*)e->target;
   13514:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   13516:	2b02      	cmp	r3, #2
   13518:	d103      	bne.n	13522 <cosem_getCredit+0x10>
        ret = cosem_setInt32(e->value.byteArr, object->currentCreditAmount);
   1351a:	6909      	ldr	r1, [r1, #16]
        ret = cosem_setInt32(e->value.byteArr, object->warningThreshold);
   1351c:	6880      	ldr	r0, [r0, #8]
   1351e:	f7fb b941 	b.w	e7a4 <cosem_setInt32>
    else if (e->index == 3)
   13522:	2b03      	cmp	r3, #3
   13524:	d103      	bne.n	1352e <cosem_getCredit+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->type);
   13526:	7d09      	ldrb	r1, [r1, #20]
        ret = cosem_setEnum(e->value.byteArr, object->status);
   13528:	6880      	ldr	r0, [r0, #8]
   1352a:	f7fb b96c 	b.w	e806 <cosem_setEnum>
    else if (e->index == 4)
   1352e:	2b04      	cmp	r3, #4
   13530:	d103      	bne.n	1353a <cosem_getCredit+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->priority);
   13532:	7d49      	ldrb	r1, [r1, #21]
   13534:	6880      	ldr	r0, [r0, #8]
   13536:	f7fb b8ef 	b.w	e718 <cosem_setUInt8>
    else if (e->index == 5)
   1353a:	2b05      	cmp	r3, #5
   1353c:	d101      	bne.n	13542 <cosem_getCredit+0x30>
        ret = cosem_setInt32(e->value.byteArr, object->warningThreshold);
   1353e:	6989      	ldr	r1, [r1, #24]
   13540:	e7ec      	b.n	1351c <cosem_getCredit+0xa>
    else if (e->index == 6)
   13542:	2b06      	cmp	r3, #6
   13544:	d101      	bne.n	1354a <cosem_getCredit+0x38>
        ret = cosem_setInt32(e->value.byteArr, object->limit);
   13546:	69c9      	ldr	r1, [r1, #28]
   13548:	e7e8      	b.n	1351c <cosem_getCredit+0xa>
    else if (e->index == 7)
   1354a:	2b07      	cmp	r3, #7
   1354c:	d105      	bne.n	1355a <cosem_getCredit+0x48>
        ret = cosem_setBitString(e->value.byteArr, object->creditConfiguration, 5);
   1354e:	f891 1020 	ldrb.w	r1, [r1, #32]
   13552:	6880      	ldr	r0, [r0, #8]
   13554:	2205      	movs	r2, #5
   13556:	f7fb b812 	b.w	e57e <cosem_setBitString>
    else if (e->index == 8)
   1355a:	2b08      	cmp	r3, #8
   1355c:	d102      	bne.n	13564 <cosem_getCredit+0x52>
        ret = cosem_setEnum(e->value.byteArr, object->status);
   1355e:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
   13562:	e7e1      	b.n	13528 <cosem_getCredit+0x16>
    else if (e->index == 9)
   13564:	2b09      	cmp	r3, #9
   13566:	d101      	bne.n	1356c <cosem_getCredit+0x5a>
        ret = cosem_setInt32(e->value.byteArr, object->presetCreditAmount);
   13568:	6a49      	ldr	r1, [r1, #36]	; 0x24
   1356a:	e7d7      	b.n	1351c <cosem_getCredit+0xa>
    else if (e->index == 10)
   1356c:	2b0a      	cmp	r3, #10
   1356e:	d101      	bne.n	13574 <cosem_getCredit+0x62>
        ret = cosem_setInt32(e->value.byteArr, object->creditAvailableThreshold);
   13570:	6a89      	ldr	r1, [r1, #40]	; 0x28
   13572:	e7d3      	b.n	1351c <cosem_getCredit+0xa>
    else if (e->index == 11)
   13574:	2b0b      	cmp	r3, #11
   13576:	d103      	bne.n	13580 <cosem_getCredit+0x6e>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->period);
   13578:	6880      	ldr	r0, [r0, #8]
   1357a:	312c      	adds	r1, #44	; 0x2c
   1357c:	f7fa bfd9 	b.w	e532 <cosem_setDateTimeAsOctetString>
}
   13580:	f44f 7081 	mov.w	r0, #258	; 0x102
   13584:	4770      	bx	lr

00013586 <cosem_getAccount>:
{
   13586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   13588:	7e01      	ldrb	r1, [r0, #24]
    gxAccount* object = (gxAccount*)e->target;
   1358a:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   1358c:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   1358e:	2902      	cmp	r1, #2
   13590:	d111      	bne.n	135b6 <cosem_getAccount+0x30>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   13592:	4628      	mov	r0, r5
   13594:	f7fb f91b 	bl	e7ce <cosem_setStructure>
   13598:	b998      	cbnz	r0, 135c2 <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->paymentMode & 0x3)) != 0 ||
   1359a:	7c21      	ldrb	r1, [r4, #16]
   1359c:	4628      	mov	r0, r5
   1359e:	f001 0103 	and.w	r1, r1, #3
   135a2:	f7fb f930 	bl	e806 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   135a6:	b960      	cbnz	r0, 135c2 <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->accountStatus & 0x3)) != 0)
   135a8:	7c61      	ldrb	r1, [r4, #17]
   135aa:	f001 0103 	and.w	r1, r1, #3
            (ret = cosem_setEnum(data, object->currency.unit)) != 0)
   135ae:	4628      	mov	r0, r5
   135b0:	f7fb f929 	bl	e806 <cosem_setEnum>
   135b4:	e005      	b.n	135c2 <cosem_getAccount+0x3c>
    else if (e->index == 3)
   135b6:	2903      	cmp	r1, #3
   135b8:	d105      	bne.n	135c6 <cosem_getAccount+0x40>
        ret = cosem_setUInt8(e->value.byteArr, object->currentCreditInUse);
   135ba:	7ca1      	ldrb	r1, [r4, #18]
   135bc:	4628      	mov	r0, r5
   135be:	f7fb f8ab 	bl	e718 <cosem_setUInt8>
}
   135c2:	b003      	add	sp, #12
   135c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 4)
   135c6:	2904      	cmp	r1, #4
   135c8:	d105      	bne.n	135d6 <cosem_getAccount+0x50>
        ret = cosem_setBitString(e->value.byteArr, object->currentCreditStatus, 7);
   135ca:	7ce1      	ldrb	r1, [r4, #19]
   135cc:	2207      	movs	r2, #7
   135ce:	4628      	mov	r0, r5
   135d0:	f7fa ffd5 	bl	e57e <cosem_setBitString>
   135d4:	e7f5      	b.n	135c2 <cosem_getAccount+0x3c>
    else if (e->index == 5)
   135d6:	2905      	cmp	r1, #5
   135d8:	d104      	bne.n	135e4 <cosem_getAccount+0x5e>
        ret = cosem_setInt32(e->value.byteArr, object->availableCredit);
   135da:	6961      	ldr	r1, [r4, #20]
        ret = cosem_setInt32(e->value.byteArr, object->maxProvisionPeriod);
   135dc:	4628      	mov	r0, r5
   135de:	f7fb f8e1 	bl	e7a4 <cosem_setInt32>
   135e2:	e7ee      	b.n	135c2 <cosem_getAccount+0x3c>
    else if (e->index == 6)
   135e4:	2906      	cmp	r1, #6
   135e6:	d101      	bne.n	135ec <cosem_getAccount+0x66>
        ret = cosem_setInt32(e->value.byteArr, object->amountToClear);
   135e8:	69a1      	ldr	r1, [r4, #24]
   135ea:	e7f7      	b.n	135dc <cosem_getAccount+0x56>
    else if (e->index == 7)
   135ec:	2907      	cmp	r1, #7
   135ee:	d101      	bne.n	135f4 <cosem_getAccount+0x6e>
        ret = cosem_setInt32(e->value.byteArr, object->clearanceThreshold);
   135f0:	69e1      	ldr	r1, [r4, #28]
   135f2:	e7f3      	b.n	135dc <cosem_getAccount+0x56>
    else if (e->index == 8)
   135f4:	2908      	cmp	r1, #8
   135f6:	d101      	bne.n	135fc <cosem_getAccount+0x76>
        ret = cosem_setInt32(e->value.byteArr, object->aggregatedDebt);
   135f8:	6a21      	ldr	r1, [r4, #32]
   135fa:	e7ef      	b.n	135dc <cosem_getAccount+0x56>
    else if (e->index == 9)
   135fc:	2909      	cmp	r1, #9
   135fe:	d11d      	bne.n	1363c <cosem_getAccount+0xb6>
        if ((ret = cosem_setArray(data, object->creditReferences.size)) == 0)
   13600:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   13602:	4628      	mov	r0, r5
   13604:	f7fb f8f1 	bl	e7ea <cosem_setArray>
   13608:	2800      	cmp	r0, #0
   1360a:	d1da      	bne.n	135c2 <cosem_getAccount+0x3c>
   1360c:	4606      	mov	r6, r0
                if ((ret = arr_getByIndex(&object->creditReferences, pos, (void**)&it)) != 0 ||
   1360e:	f104 0724 	add.w	r7, r4, #36	; 0x24
   13612:	e00d      	b.n	13630 <cosem_getAccount+0xaa>
   13614:	aa01      	add	r2, sp, #4
   13616:	4638      	mov	r0, r7
   13618:	f7fd fd77 	bl	1110a <arr_getByIndex>
   1361c:	2800      	cmp	r0, #0
   1361e:	d1d0      	bne.n	135c2 <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, it, 6)) != 0)
   13620:	9901      	ldr	r1, [sp, #4]
   13622:	2206      	movs	r2, #6
   13624:	4628      	mov	r0, r5
   13626:	f7fb f856 	bl	e6d6 <cosem_setOctetString2>
   1362a:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(&object->creditReferences, pos, (void**)&it)) != 0 ||
   1362c:	2800      	cmp	r0, #0
   1362e:	d1c8      	bne.n	135c2 <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->creditReferences.size; ++pos)
   13630:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   13632:	b2b1      	uxth	r1, r6
   13634:	428b      	cmp	r3, r1
   13636:	d1ed      	bne.n	13614 <cosem_getAccount+0x8e>
   13638:	2000      	movs	r0, #0
   1363a:	e7c2      	b.n	135c2 <cosem_getAccount+0x3c>
    else if (e->index == 10)
   1363c:	290a      	cmp	r1, #10
   1363e:	d11c      	bne.n	1367a <cosem_getAccount+0xf4>
        if ((ret = cosem_setArray(data, object->chargeReferences.size)) == 0)
   13640:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   13642:	4628      	mov	r0, r5
   13644:	f7fb f8d1 	bl	e7ea <cosem_setArray>
   13648:	2800      	cmp	r0, #0
   1364a:	d1ba      	bne.n	135c2 <cosem_getAccount+0x3c>
   1364c:	2600      	movs	r6, #0
                if ((ret = arr_getByIndex(&object->chargeReferences, pos, (void**)&it)) != 0 ||
   1364e:	f104 0730 	add.w	r7, r4, #48	; 0x30
   13652:	e00d      	b.n	13670 <cosem_getAccount+0xea>
   13654:	aa01      	add	r2, sp, #4
   13656:	4638      	mov	r0, r7
   13658:	f7fd fd57 	bl	1110a <arr_getByIndex>
   1365c:	2800      	cmp	r0, #0
   1365e:	d1b0      	bne.n	135c2 <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, it, 6)) != 0)
   13660:	9901      	ldr	r1, [sp, #4]
   13662:	2206      	movs	r2, #6
   13664:	4628      	mov	r0, r5
   13666:	f7fb f836 	bl	e6d6 <cosem_setOctetString2>
   1366a:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(&object->chargeReferences, pos, (void**)&it)) != 0 ||
   1366c:	2800      	cmp	r0, #0
   1366e:	d1a8      	bne.n	135c2 <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->chargeReferences.size; ++pos)
   13670:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   13672:	b2b1      	uxth	r1, r6
   13674:	428b      	cmp	r3, r1
   13676:	d1ed      	bne.n	13654 <cosem_getAccount+0xce>
   13678:	e7de      	b.n	13638 <cosem_getAccount+0xb2>
    else if (e->index == 11)
   1367a:	290b      	cmp	r1, #11
   1367c:	d136      	bne.n	136ec <cosem_getAccount+0x166>
        if ((ret = cosem_setArray(data, object->creditChargeConfigurations.size)) == 0)
   1367e:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   13682:	4628      	mov	r0, r5
   13684:	f7fb f8b1 	bl	e7ea <cosem_setArray>
   13688:	2800      	cmp	r0, #0
   1368a:	d19a      	bne.n	135c2 <cosem_getAccount+0x3c>
   1368c:	4606      	mov	r6, r0
                    if ((ret = arr_getByIndex(&object->creditChargeConfigurations, pos, (void**)&ccc)) != 0 ||
   1368e:	f104 073c 	add.w	r7, r4, #60	; 0x3c
   13692:	e025      	b.n	136e0 <cosem_getAccount+0x15a>
   13694:	aa01      	add	r2, sp, #4
   13696:	4638      	mov	r0, r7
   13698:	f7fd fd37 	bl	1110a <arr_getByIndex>
   1369c:	2800      	cmp	r0, #0
   1369e:	d190      	bne.n	135c2 <cosem_getAccount+0x3c>
                        (ret = cosem_setStructure(data, 3)) != 0 ||
   136a0:	2103      	movs	r1, #3
   136a2:	4628      	mov	r0, r5
   136a4:	f7fb f893 	bl	e7ce <cosem_setStructure>
                    if ((ret = arr_getByIndex(&object->creditChargeConfigurations, pos, (void**)&ccc)) != 0 ||
   136a8:	2800      	cmp	r0, #0
   136aa:	d18a      	bne.n	135c2 <cosem_getAccount+0x3c>
                        (ret = cosem_setOctetString2(data, ccc->creditReference, 6)) != 0 ||
   136ac:	9901      	ldr	r1, [sp, #4]
   136ae:	2206      	movs	r2, #6
   136b0:	4628      	mov	r0, r5
   136b2:	f7fb f810 	bl	e6d6 <cosem_setOctetString2>
                        (ret = cosem_setStructure(data, 3)) != 0 ||
   136b6:	2800      	cmp	r0, #0
   136b8:	d183      	bne.n	135c2 <cosem_getAccount+0x3c>
                        (ret = cosem_setOctetString2(data, ccc->chargeReference, 6)) != 0 ||
   136ba:	9901      	ldr	r1, [sp, #4]
   136bc:	2206      	movs	r2, #6
   136be:	4411      	add	r1, r2
   136c0:	4628      	mov	r0, r5
   136c2:	f7fb f808 	bl	e6d6 <cosem_setOctetString2>
                        (ret = cosem_setOctetString2(data, ccc->creditReference, 6)) != 0 ||
   136c6:	2800      	cmp	r0, #0
   136c8:	f47f af7b 	bne.w	135c2 <cosem_getAccount+0x3c>
                        (ret = cosem_setBitString(data, ccc->collectionConfiguration, 3)) != 0)
   136cc:	9b01      	ldr	r3, [sp, #4]
   136ce:	2203      	movs	r2, #3
   136d0:	7b19      	ldrb	r1, [r3, #12]
   136d2:	4628      	mov	r0, r5
   136d4:	f7fa ff53 	bl	e57e <cosem_setBitString>
   136d8:	3601      	adds	r6, #1
                        (ret = cosem_setOctetString2(data, ccc->chargeReference, 6)) != 0 ||
   136da:	2800      	cmp	r0, #0
   136dc:	f47f af71 	bne.w	135c2 <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->creditChargeConfigurations.size; ++pos)
   136e0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   136e4:	b2b1      	uxth	r1, r6
   136e6:	428b      	cmp	r3, r1
   136e8:	d1d4      	bne.n	13694 <cosem_getAccount+0x10e>
   136ea:	e7a5      	b.n	13638 <cosem_getAccount+0xb2>
    else if (e->index == 12)
   136ec:	290c      	cmp	r1, #12
   136ee:	d130      	bne.n	13752 <cosem_getAccount+0x1cc>
        if ((ret = cosem_setArray(data, object->tokenGatewayConfigurations.size)) == 0)
   136f0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
   136f4:	4628      	mov	r0, r5
   136f6:	f7fb f878 	bl	e7ea <cosem_setArray>
   136fa:	2800      	cmp	r0, #0
   136fc:	f47f af61 	bne.w	135c2 <cosem_getAccount+0x3c>
   13700:	4606      	mov	r6, r0
                if ((ret = arr_getByIndex(&object->tokenGatewayConfigurations, pos, (void**)&gwc)) != 0 ||
   13702:	f104 0748 	add.w	r7, r4, #72	; 0x48
   13706:	e01e      	b.n	13746 <cosem_getAccount+0x1c0>
   13708:	aa01      	add	r2, sp, #4
   1370a:	4638      	mov	r0, r7
   1370c:	f7fd fcfd 	bl	1110a <arr_getByIndex>
   13710:	2800      	cmp	r0, #0
   13712:	f47f af56 	bne.w	135c2 <cosem_getAccount+0x3c>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   13716:	2102      	movs	r1, #2
   13718:	4628      	mov	r0, r5
   1371a:	f7fb f858 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->tokenGatewayConfigurations, pos, (void**)&gwc)) != 0 ||
   1371e:	2800      	cmp	r0, #0
   13720:	f47f af4f 	bne.w	135c2 <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, gwc->creditReference, 6)) != 0 ||
   13724:	9901      	ldr	r1, [sp, #4]
   13726:	2206      	movs	r2, #6
   13728:	4628      	mov	r0, r5
   1372a:	f7fa ffd4 	bl	e6d6 <cosem_setOctetString2>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   1372e:	2800      	cmp	r0, #0
   13730:	f47f af47 	bne.w	135c2 <cosem_getAccount+0x3c>
                    (ret = cosem_setUInt8(data, gwc->tokenProportion)) != 0)
   13734:	9b01      	ldr	r3, [sp, #4]
   13736:	4628      	mov	r0, r5
   13738:	7999      	ldrb	r1, [r3, #6]
   1373a:	f7fa ffed 	bl	e718 <cosem_setUInt8>
   1373e:	3601      	adds	r6, #1
                    (ret = cosem_setOctetString2(data, gwc->creditReference, 6)) != 0 ||
   13740:	2800      	cmp	r0, #0
   13742:	f47f af3e 	bne.w	135c2 <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->tokenGatewayConfigurations.size; ++pos)
   13746:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   1374a:	b2b1      	uxth	r1, r6
   1374c:	428b      	cmp	r3, r1
   1374e:	d1db      	bne.n	13708 <cosem_getAccount+0x182>
   13750:	e772      	b.n	13638 <cosem_getAccount+0xb2>
    else if (e->index == 13)
   13752:	290d      	cmp	r1, #13
   13754:	d105      	bne.n	13762 <cosem_getAccount+0x1dc>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountActivationTime);
   13756:	f104 0154 	add.w	r1, r4, #84	; 0x54
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountClosureTime);
   1375a:	4628      	mov	r0, r5
   1375c:	f7fa fee9 	bl	e532 <cosem_setDateTimeAsOctetString>
   13760:	e72f      	b.n	135c2 <cosem_getAccount+0x3c>
    else if (e->index == 14)
   13762:	290e      	cmp	r1, #14
   13764:	d102      	bne.n	1376c <cosem_getAccount+0x1e6>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountClosureTime);
   13766:	f104 0160 	add.w	r1, r4, #96	; 0x60
   1376a:	e7f6      	b.n	1375a <cosem_getAccount+0x1d4>
    else if (e->index == 15)
   1376c:	290f      	cmp	r1, #15
   1376e:	d129      	bne.n	137c4 <cosem_getAccount+0x23e>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   13770:	2103      	movs	r1, #3
   13772:	4628      	mov	r0, r5
   13774:	f7fb f82b 	bl	e7ce <cosem_setStructure>
   13778:	2800      	cmp	r0, #0
   1377a:	f47f af22 	bne.w	135c2 <cosem_getAccount+0x3c>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING_UTF8)) != 0)
   1377e:	210c      	movs	r1, #12
   13780:	4628      	mov	r0, r5
   13782:	f7fa f8fc 	bl	d97e <bb_setUInt8>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   13786:	2800      	cmp	r0, #0
   13788:	f47f af1b 	bne.w	135c2 <cosem_getAccount+0x3c>
        if ((ret = hlp_setObjectCount(object->currency.name.size, data)) != 0 ||
   1378c:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
   13790:	4629      	mov	r1, r5
   13792:	f007 f9f0 	bl	1ab76 <hlp_setObjectCount>
   13796:	2800      	cmp	r0, #0
   13798:	f47f af13 	bne.w	135c2 <cosem_getAccount+0x3c>
            (ret = bb_set(data, object->currency.name.data, object->currency.name.size)) != 0)
   1379c:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
   137a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   137a2:	4628      	mov	r0, r5
   137a4:	f7fa f9d1 	bl	db4a <bb_set>
        if ((ret = hlp_setObjectCount(object->currency.name.size, data)) != 0 ||
   137a8:	2800      	cmp	r0, #0
   137aa:	f47f af0a 	bne.w	135c2 <cosem_getAccount+0x3c>
        if ((ret = cosem_setInt8(data, object->currency.scale)) != 0 ||
   137ae:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   137b2:	4628      	mov	r0, r5
   137b4:	f7fa ffda 	bl	e76c <cosem_setInt8>
   137b8:	2800      	cmp	r0, #0
   137ba:	f47f af02 	bne.w	135c2 <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->currency.unit)) != 0)
   137be:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
   137c2:	e6f4      	b.n	135ae <cosem_getAccount+0x28>
    else if (e->index == 16)
   137c4:	2910      	cmp	r1, #16
   137c6:	d101      	bne.n	137cc <cosem_getAccount+0x246>
        ret = cosem_setInt32(e->value.byteArr, object->lowCreditThreshold);
   137c8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   137ca:	e707      	b.n	135dc <cosem_getAccount+0x56>
    else if (e->index == 17)
   137cc:	2911      	cmp	r1, #17
   137ce:	d102      	bne.n	137d6 <cosem_getAccount+0x250>
        ret = cosem_setInt32(e->value.byteArr, object->nextCreditAvailableThreshold);
   137d0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   137d4:	e702      	b.n	135dc <cosem_getAccount+0x56>
    else if (e->index == 18)
   137d6:	2912      	cmp	r1, #18
   137d8:	d105      	bne.n	137e6 <cosem_getAccount+0x260>
        ret = cosem_setUInt16(e->value.byteArr, object->maxProvision);
   137da:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
   137de:	4628      	mov	r0, r5
   137e0:	f7fa ffa8 	bl	e734 <cosem_setUInt16>
   137e4:	e6ed      	b.n	135c2 <cosem_getAccount+0x3c>
    else if (e->index == 19)
   137e6:	2913      	cmp	r1, #19
   137e8:	d102      	bne.n	137f0 <cosem_getAccount+0x26a>
        ret = cosem_setInt32(e->value.byteArr, object->maxProvisionPeriod);
   137ea:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   137ee:	e6f5      	b.n	135dc <cosem_getAccount+0x56>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   137f0:	f44f 7081 	mov.w	r0, #258	; 0x102
   137f4:	e6e5      	b.n	135c2 <cosem_getAccount+0x3c>

000137f6 <cosem_getCompactData>:
{
   137f6:	460b      	mov	r3, r1
   137f8:	b410      	push	{r4}
   137fa:	7e1a      	ldrb	r2, [r3, #24]
   137fc:	3a02      	subs	r2, #2
   137fe:	4604      	mov	r4, r0
    gxByteBuffer* data = data = e->value.byteArr;
   13800:	6888      	ldr	r0, [r1, #8]
    gxCompactData* object = (gxCompactData*)e->target;
   13802:	6949      	ldr	r1, [r1, #20]
    switch (e->index)
   13804:	2a04      	cmp	r2, #4
   13806:	d81a      	bhi.n	1383e <cosem_getCompactData+0x48>
   13808:	e8df f002 	tbb	[pc, r2]
   1380c:	120d0703 	.word	0x120d0703
   13810:	14          	.byte	0x14
   13811:	00          	.byte	0x00
        ret = cosem_setOctetString(data, &object->buffer);
   13812:	3110      	adds	r1, #16
}
   13814:	bc10      	pop	{r4}
        ret = cosem_setOctetString(data, &object->templateDescription);
   13816:	f7fa bf11 	b.w	e63c <cosem_setOctetString>
        ret = getColumns(settings, &object->captureObjects, data, e);
   1381a:	4602      	mov	r2, r0
   1381c:	311c      	adds	r1, #28
   1381e:	4620      	mov	r0, r4
}
   13820:	bc10      	pop	{r4}
        ret = getColumns(settings, &object->captureObjects, data, e);
   13822:	f7fe bcfb 	b.w	1221c <getColumns>
        ret = cosem_setUInt8(e->value.byteArr, object->templateId);
   13826:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
}
   1382a:	bc10      	pop	{r4}
        ret = cosem_setUInt8(e->value.byteArr, object->templateId);
   1382c:	f7fa bf74 	b.w	e718 <cosem_setUInt8>
        ret = cosem_setOctetString(data, &object->templateDescription);
   13830:	312c      	adds	r1, #44	; 0x2c
   13832:	e7ef      	b.n	13814 <cosem_getCompactData+0x1e>
        ret = cosem_setEnum(e->value.byteArr, object->captureMethod);
   13834:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
}
   13838:	bc10      	pop	{r4}
        ret = cosem_setEnum(e->value.byteArr, object->captureMethod);
   1383a:	f7fa bfe4 	b.w	e806 <cosem_setEnum>
}
   1383e:	f44f 7081 	mov.w	r0, #258	; 0x102
   13842:	bc10      	pop	{r4}
   13844:	4770      	bx	lr

00013846 <cosem_getGsmDiagnostic>:
{
   13846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13848:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   1384a:	6887      	ldr	r7, [r0, #8]
    gxGsmDiagnostic* object = (gxGsmDiagnostic*)e->target;
   1384c:	6944      	ldr	r4, [r0, #20]
    switch (e->index)
   1384e:	3b02      	subs	r3, #2
   13850:	2b06      	cmp	r3, #6
   13852:	f200 809a 	bhi.w	1398a <cosem_getGsmDiagnostic+0x144>
   13856:	e8df f003 	tbb	[pc, r3]
   1385a:	1204      	.short	0x1204
   1385c:	611b1917 	.word	0x611b1917
   13860:	92          	.byte	0x92
   13861:	00          	.byte	0x00
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   13862:	6924      	ldr	r4, [r4, #16]
   13864:	b14c      	cbz	r4, 1387a <cosem_getGsmDiagnostic+0x34>
            object->operatorName != NULL ? (uint16_t)strlen(object->operatorName) : 0);
   13866:	4620      	mov	r0, r4
   13868:	f7ed faaa 	bl	dc0 <strlen>
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   1386c:	b282      	uxth	r2, r0
   1386e:	4621      	mov	r1, r4
   13870:	4638      	mov	r0, r7
   13872:	f7fa ff01 	bl	e678 <cosem_setString>
}
   13876:	b003      	add	sp, #12
   13878:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   1387a:	4622      	mov	r2, r4
   1387c:	e7f7      	b.n	1386e <cosem_getGsmDiagnostic+0x28>
        ret = cosem_setEnum(e->value.byteArr, object->status);
   1387e:	7d21      	ldrb	r1, [r4, #20]
        ret = cosem_setEnum(e->value.byteArr, object->circuitSwitchStatus);
   13880:	4638      	mov	r0, r7
   13882:	f7fa ffc0 	bl	e806 <cosem_setEnum>
        break;
   13886:	e7f6      	b.n	13876 <cosem_getGsmDiagnostic+0x30>
        ret = cosem_setEnum(e->value.byteArr, object->circuitSwitchStatus);
   13888:	7d61      	ldrb	r1, [r4, #21]
   1388a:	e7f9      	b.n	13880 <cosem_getGsmDiagnostic+0x3a>
        ret = cosem_setEnum(e->value.byteArr, object->packetSwitchStatus);
   1388c:	7da1      	ldrb	r1, [r4, #22]
   1388e:	e7f7      	b.n	13880 <cosem_getGsmDiagnostic+0x3a>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) == 0)
   13890:	2102      	movs	r1, #2
   13892:	4638      	mov	r0, r7
   13894:	f7fa f873 	bl	d97e <bb_setUInt8>
   13898:	2800      	cmp	r0, #0
   1389a:	d1ec      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
            if (object->base.version == 0)
   1389c:	78a3      	ldrb	r3, [r4, #2]
   1389e:	bb0b      	cbnz	r3, 138e4 <cosem_getGsmDiagnostic+0x9e>
                if ((ret = bb_setUInt8(data, 4)) != 0 ||
   138a0:	2104      	movs	r1, #4
   138a2:	4638      	mov	r0, r7
   138a4:	f7fa f86b 	bl	d97e <bb_setUInt8>
   138a8:	2800      	cmp	r0, #0
   138aa:	d1e4      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt16(data, (uint16_t)object->cellInfo.cellId)) != 0)
   138ac:	8b21      	ldrh	r1, [r4, #24]
   138ae:	4638      	mov	r0, r7
   138b0:	f7fa ff40 	bl	e734 <cosem_setUInt16>
                if ((ret = bb_setUInt8(data, 4)) != 0 ||
   138b4:	2800      	cmp	r0, #0
   138b6:	d1de      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
            if ((ret = cosem_setUInt16(data, object->cellInfo.locationId)) != 0 ||
   138b8:	8ba1      	ldrh	r1, [r4, #28]
   138ba:	4638      	mov	r0, r7
   138bc:	f7fa ff3a 	bl	e734 <cosem_setUInt16>
   138c0:	2800      	cmp	r0, #0
   138c2:	d1d8      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                (ret = cosem_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
   138c4:	7fa1      	ldrb	r1, [r4, #30]
   138c6:	4638      	mov	r0, r7
   138c8:	f7fa ff26 	bl	e718 <cosem_setUInt8>
            if ((ret = cosem_setUInt16(data, object->cellInfo.locationId)) != 0 ||
   138cc:	2800      	cmp	r0, #0
   138ce:	d1d2      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                (ret = cosem_setUInt8(data, object->cellInfo.ber)) != 0)
   138d0:	7fe1      	ldrb	r1, [r4, #31]
   138d2:	4638      	mov	r0, r7
   138d4:	f7fa ff20 	bl	e718 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
   138d8:	2800      	cmp	r0, #0
   138da:	d1cc      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
            if (object->base.version > 0)
   138dc:	78a3      	ldrb	r3, [r4, #2]
   138de:	b963      	cbnz	r3, 138fa <cosem_getGsmDiagnostic+0xb4>
                (ret = cosem_setUInt8(data, object->cellInfo.ber)) != 0)
   138e0:	2000      	movs	r0, #0
   138e2:	e7c8      	b.n	13876 <cosem_getGsmDiagnostic+0x30>
                if ((ret = bb_setUInt8(data, 7)) != 0 ||
   138e4:	2107      	movs	r1, #7
   138e6:	4638      	mov	r0, r7
   138e8:	f7fa f849 	bl	d97e <bb_setUInt8>
   138ec:	2800      	cmp	r0, #0
   138ee:	d1c2      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt32(data, object->cellInfo.cellId)) != 0)
   138f0:	69a1      	ldr	r1, [r4, #24]
   138f2:	4638      	mov	r0, r7
   138f4:	f7fa ff2c 	bl	e750 <cosem_setUInt32>
   138f8:	e7dc      	b.n	138b4 <cosem_getGsmDiagnostic+0x6e>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
   138fa:	8c21      	ldrh	r1, [r4, #32]
   138fc:	4638      	mov	r0, r7
   138fe:	f7fa ff19 	bl	e734 <cosem_setUInt16>
                if (//mobileCountryCode.
   13902:	2800      	cmp	r0, #0
   13904:	d1b7      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileNetworkCode)) != 0 ||
   13906:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   13908:	4638      	mov	r0, r7
   1390a:	f7fa ff13 	bl	e734 <cosem_setUInt16>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
   1390e:	2800      	cmp	r0, #0
   13910:	d1b1      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt32(data, object->cellInfo.channelNumber)) != 0)
   13912:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13914:	4638      	mov	r0, r7
   13916:	f7fa ff1b 	bl	e750 <cosem_setUInt32>
   1391a:	e7ac      	b.n	13876 <cosem_getGsmDiagnostic+0x30>
        if ((ret = cosem_setArray(data, object->adjacentCells.size)) == 0)
   1391c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   1391e:	4638      	mov	r0, r7
   13920:	f7fa ff63 	bl	e7ea <cosem_setArray>
   13924:	2800      	cmp	r0, #0
   13926:	d1a6      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
   13928:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->adjacentCells, pos, (void**)&it)) != 0 ||
   1392a:	f104 0628 	add.w	r6, r4, #40	; 0x28
   1392e:	e01d      	b.n	1396c <cosem_getGsmDiagnostic+0x126>
   13930:	aa01      	add	r2, sp, #4
   13932:	4630      	mov	r0, r6
   13934:	f7fd fbe9 	bl	1110a <arr_getByIndex>
   13938:	2800      	cmp	r0, #0
   1393a:	d19c      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setStructure(data, 2)) != 0)
   1393c:	2102      	movs	r1, #2
   1393e:	4638      	mov	r0, r7
   13940:	f7fa ff45 	bl	e7ce <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->adjacentCells, pos, (void**)&it)) != 0 ||
   13944:	2800      	cmp	r0, #0
   13946:	d196      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                if (object->base.version == 0)
   13948:	9b01      	ldr	r3, [sp, #4]
   1394a:	6819      	ldr	r1, [r3, #0]
   1394c:	78a3      	ldrb	r3, [r4, #2]
   1394e:	b993      	cbnz	r3, 13976 <cosem_getGsmDiagnostic+0x130>
                    if ((ret = cosem_setUInt16(data, (uint16_t)it->cellId)) != 0)
   13950:	b289      	uxth	r1, r1
   13952:	4638      	mov	r0, r7
   13954:	f7fa feee 	bl	e734 <cosem_setUInt16>
   13958:	2800      	cmp	r0, #0
   1395a:	d18c      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
                if ((ret = cosem_setUInt8(data, it->signalQuality)) != 0)
   1395c:	9b01      	ldr	r3, [sp, #4]
   1395e:	4638      	mov	r0, r7
   13960:	7919      	ldrb	r1, [r3, #4]
   13962:	f7fa fed9 	bl	e718 <cosem_setUInt8>
   13966:	3501      	adds	r5, #1
   13968:	2800      	cmp	r0, #0
   1396a:	d184      	bne.n	13876 <cosem_getGsmDiagnostic+0x30>
            for (pos = 0; pos != object->adjacentCells.size; ++pos)
   1396c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1396e:	b2a9      	uxth	r1, r5
   13970:	428b      	cmp	r3, r1
   13972:	d1dd      	bne.n	13930 <cosem_getGsmDiagnostic+0xea>
   13974:	e7b4      	b.n	138e0 <cosem_getGsmDiagnostic+0x9a>
                    if ((ret = cosem_setUInt32(data, it->cellId)) != 0)
   13976:	4638      	mov	r0, r7
   13978:	f7fa feea 	bl	e750 <cosem_setUInt32>
   1397c:	e7ec      	b.n	13958 <cosem_getGsmDiagnostic+0x112>
        ret = cosem_setDateTime(e->value.byteArr, &object->captureTime);
   1397e:	f104 0134 	add.w	r1, r4, #52	; 0x34
   13982:	4638      	mov	r0, r7
   13984:	f7fa fe99 	bl	e6ba <cosem_setDateTime>
        break;
   13988:	e775      	b.n	13876 <cosem_getGsmDiagnostic+0x30>
    switch (e->index)
   1398a:	f44f 7081 	mov.w	r0, #258	; 0x102
   1398e:	e772      	b.n	13876 <cosem_getGsmDiagnostic+0x30>

00013990 <cosem_getLlcSscsSetup>:
int cosem_getLlcSscsSetup(
    gxValueEventArg* e)
{
    int ret;
    gxLlcSscsSetup* object = (gxLlcSscsSetup*)e->target;
    switch (e->index)
   13990:	7e02      	ldrb	r2, [r0, #24]
    gxLlcSscsSetup* object = (gxLlcSscsSetup*)e->target;
   13992:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   13994:	2a02      	cmp	r2, #2
   13996:	d004      	beq.n	139a2 <cosem_getLlcSscsSetup+0x12>
   13998:	2a03      	cmp	r2, #3
   1399a:	d006      	beq.n	139aa <cosem_getLlcSscsSetup+0x1a>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1399c:	f44f 7081 	mov.w	r0, #258	; 0x102
   139a0:	4770      	bx	lr
        ret = cosem_setUInt16(e->value.byteArr, object->serviceNodeAddress);
   139a2:	8a19      	ldrh	r1, [r3, #16]
        ret = cosem_setUInt16(e->value.byteArr, object->baseNodeAddress);
   139a4:	6880      	ldr	r0, [r0, #8]
   139a6:	f7fa bec5 	b.w	e734 <cosem_setUInt16>
   139aa:	8a59      	ldrh	r1, [r3, #18]
   139ac:	e7fa      	b.n	139a4 <cosem_getLlcSscsSetup+0x14>

000139ae <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS
int cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcPhysicalLayerCounters* object = (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target;
   139ae:	7e02      	ldrb	r2, [r0, #24]
   139b0:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   139b2:	3a02      	subs	r2, #2
   139b4:	2a03      	cmp	r2, #3
   139b6:	d80d      	bhi.n	139d4 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x26>
   139b8:	e8df f002 	tbb	[pc, r2]
   139bc:	0a080602 	.word	0x0a080602
    {
    case 2:
        ret = cosem_setUInt16(e->value.byteArr, object->crcIncorrectCount);
   139c0:	8a19      	ldrh	r1, [r3, #16]
        break;
    case 4:
        ret = cosem_setUInt16(e->value.byteArr, object->txDropCount);
        break;
    case 5:
        ret = cosem_setUInt16(e->value.byteArr, object->rxDropCount);
   139c2:	6880      	ldr	r0, [r0, #8]
   139c4:	f7fa beb6 	b.w	e734 <cosem_setUInt16>
        ret = cosem_setUInt16(e->value.byteArr, object->crcFailedCount);
   139c8:	8a59      	ldrh	r1, [r3, #18]
   139ca:	e7fa      	b.n	139c2 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
        ret = cosem_setUInt16(e->value.byteArr, object->txDropCount);
   139cc:	8a99      	ldrh	r1, [r3, #20]
   139ce:	e7f8      	b.n	139c2 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
        ret = cosem_setUInt16(e->value.byteArr, object->rxDropCount);
   139d0:	8ad9      	ldrh	r1, [r3, #22]
   139d2:	e7f6      	b.n	139c2 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   139d4:	f44f 7081 	mov.w	r0, #258	; 0x102
   139d8:	4770      	bx	lr

000139da <cosem_getPrimeNbOfdmPlcMacSetup>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_SETUP
int cosem_getPrimeNbOfdmPlcMacSetup(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacSetup* object = (gxPrimeNbOfdmPlcMacSetup*)e->target;
   139da:	7e02      	ldrb	r2, [r0, #24]
   139dc:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   139de:	3a02      	subs	r2, #2
   139e0:	2a06      	cmp	r2, #6
   139e2:	d815      	bhi.n	13a10 <cosem_getPrimeNbOfdmPlcMacSetup+0x36>
   139e4:	e8df f002 	tbb	[pc, r2]
   139e8:	0c0a0804 	.word	0x0c0a0804
   139ec:	100e      	.short	0x100e
   139ee:	12          	.byte	0x12
   139ef:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setUInt8(e->value.byteArr, object->macMinSwitchSearchTime);
   139f0:	7c19      	ldrb	r1, [r3, #16]
        break;
    case 7:
        ret = cosem_setUInt8(e->value.byteArr, object->macCtlReTxTimer);
        break;
    case 8:
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxCtlReTx);
   139f2:	6880      	ldr	r0, [r0, #8]
   139f4:	f7fa be90 	b.w	e718 <cosem_setUInt8>
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxPromotionPdu);
   139f8:	7c59      	ldrb	r1, [r3, #17]
   139fa:	e7fa      	b.n	139f2 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macPromotionPduTxPeriod);
   139fc:	7c99      	ldrb	r1, [r3, #18]
   139fe:	e7f8      	b.n	139f2 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macBeaconsPerFrame);
   13a00:	7cd9      	ldrb	r1, [r3, #19]
   13a02:	e7f6      	b.n	139f2 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macScpMaxTxAttempts);
   13a04:	7d19      	ldrb	r1, [r3, #20]
   13a06:	e7f4      	b.n	139f2 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macCtlReTxTimer);
   13a08:	7d59      	ldrb	r1, [r3, #21]
   13a0a:	e7f2      	b.n	139f2 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxCtlReTx);
   13a0c:	7d99      	ldrb	r1, [r3, #22]
   13a0e:	e7f0      	b.n	139f2 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13a10:	f44f 7081 	mov.w	r0, #258	; 0x102
   13a14:	4770      	bx	lr

00013a16 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS
int cosem_getPrimeNbOfdmPlcMacFunctionalParameters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacFunctionalParameters* object = (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target;
   13a16:	7e03      	ldrb	r3, [r0, #24]
   13a18:	6941      	ldr	r1, [r0, #20]
    switch (e->index)
   13a1a:	3b02      	subs	r3, #2
   13a1c:	2b0c      	cmp	r3, #12
   13a1e:	d835      	bhi.n	13a8c <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x76>
   13a20:	e8df f003 	tbb	[pc, r3]
   13a24:	12100c07 	.word	0x12100c07
   13a28:	221f1b16 	.word	0x221f1b16
   13a2c:	2e2b2825 	.word	0x2e2b2825
   13a30:	31          	.byte	0x31
   13a31:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setInt16(e->value.byteArr, object->lnId);
   13a32:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
   13a36:	6880      	ldr	r0, [r0, #8]
   13a38:	f7fa bea6 	b.w	e788 <cosem_setInt16>
        break;
    case 3:
        ret = cosem_setUInt8(e->value.byteArr, object->lsId);
   13a3c:	7c89      	ldrb	r1, [r1, #18]
        break;
    case 4:
        ret = cosem_setUInt8(e->value.byteArr, object->sId);
   13a3e:	6880      	ldr	r0, [r0, #8]
   13a40:	f7fa be6a 	b.w	e718 <cosem_setUInt8>
   13a44:	7cc9      	ldrb	r1, [r1, #19]
   13a46:	e7fa      	b.n	13a3e <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        break;
    case 5:
    {
        ret = cosem_setOctetString(e->value.byteArr, &object->sna);
   13a48:	6880      	ldr	r0, [r0, #8]
   13a4a:	3114      	adds	r1, #20
   13a4c:	f7fa bdf6 	b.w	e63c <cosem_setOctetString>
    }
    break;
    case 6:
        ret = cosem_setEnum(e->value.byteArr, object->state);
   13a50:	f891 1020 	ldrb.w	r1, [r1, #32]
        break;
    case 13:
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxFrequency);
        break;
    case 14:
        ret = cosem_setEnum(e->value.byteArr, (unsigned char)object->capabilities);
   13a54:	6880      	ldr	r0, [r0, #8]
   13a56:	f7fa bed6 	b.w	e806 <cosem_setEnum>
        ret = cosem_setUInt16(e->value.byteArr, object->scpLength);
   13a5a:	8c49      	ldrh	r1, [r1, #34]	; 0x22
   13a5c:	6880      	ldr	r0, [r0, #8]
   13a5e:	f7fa be69 	b.w	e734 <cosem_setUInt16>
        ret = cosem_setUInt8(e->value.byteArr, object->nodeHierarchyLevel);
   13a62:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
   13a66:	e7ea      	b.n	13a3e <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconSlotCount);
   13a68:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
   13a6c:	e7e7      	b.n	13a3e <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconRxSlot);
   13a6e:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
   13a72:	e7e4      	b.n	13a3e <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxSlot);
   13a74:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
   13a78:	e7e1      	b.n	13a3e <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconRxFrequency);
   13a7a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
   13a7e:	e7de      	b.n	13a3e <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxFrequency);
   13a80:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
   13a84:	e7db      	b.n	13a3e <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setEnum(e->value.byteArr, (unsigned char)object->capabilities);
   13a86:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
   13a8a:	e7e3      	b.n	13a54 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x3e>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13a8c:	f44f 7081 	mov.w	r0, #258	; 0x102
   13a90:	4770      	bx	lr

00013a92 <cosem_getPrimeNbOfdmPlcMacCounters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS
int cosem_getPrimeNbOfdmPlcMacCounters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacCounters* object = (gxPrimeNbOfdmPlcMacCounters*)e->target;
   13a92:	7e02      	ldrb	r2, [r0, #24]
   13a94:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   13a96:	3a02      	subs	r2, #2
   13a98:	2a05      	cmp	r2, #5
   13a9a:	d812      	bhi.n	13ac2 <cosem_getPrimeNbOfdmPlcMacCounters+0x30>
   13a9c:	e8df f002 	tbb	[pc, r2]
   13aa0:	0b090703 	.word	0x0b090703
   13aa4:	0f0d      	.short	0x0f0d
    {
    case 2:
        ret = cosem_setUInt32(e->value.byteArr, object->txDataPktCount);
   13aa6:	6919      	ldr	r1, [r3, #16]
        break;
    case 6:
        ret = cosem_setUInt32(e->value.byteArr, object->csmaFailCount);
        break;
    case 7:
        ret = cosem_setUInt32(e->value.byteArr, object->csmaChBusyCount);
   13aa8:	6880      	ldr	r0, [r0, #8]
   13aaa:	f7fa be51 	b.w	e750 <cosem_setUInt32>
        ret = cosem_setUInt32(e->value.byteArr, object->rxDataPktCount);
   13aae:	6959      	ldr	r1, [r3, #20]
   13ab0:	e7fa      	b.n	13aa8 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->txCtrlPktCount);
   13ab2:	6999      	ldr	r1, [r3, #24]
   13ab4:	e7f8      	b.n	13aa8 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->rxCtrlPktCount);
   13ab6:	69d9      	ldr	r1, [r3, #28]
   13ab8:	e7f6      	b.n	13aa8 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->csmaFailCount);
   13aba:	6a19      	ldr	r1, [r3, #32]
   13abc:	e7f4      	b.n	13aa8 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->csmaChBusyCount);
   13abe:	6a59      	ldr	r1, [r3, #36]	; 0x24
   13ac0:	e7f2      	b.n	13aa8 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13ac2:	f44f 7081 	mov.w	r0, #258	; 0x102
   13ac6:	4770      	bx	lr

00013ac8 <cosem_getMulticastEntries>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

int cosem_getMulticastEntries(gxValueEventArg* e)
{
   13ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    gxMacMulticastEntry* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   13acc:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13ace:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->multicastEntries.size)) == 0)
   13ad0:	8af1      	ldrh	r1, [r6, #22]
   13ad2:	4628      	mov	r0, r5
   13ad4:	f7fa fe89 	bl	e7ea <cosem_setArray>
   13ad8:	4604      	mov	r4, r0
   13ada:	b118      	cbz	r0, 13ae4 <cosem_getMulticastEntries+0x1c>
                break;
            }
        }
    }
    return ret;
}
   13adc:	4620      	mov	r0, r4
   13ade:	b003      	add	sp, #12
   13ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13ae4:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->multicastEntries, pos, (void**)&it)) != 0)
   13ae6:	f106 0810 	add.w	r8, r6, #16
        for (pos = 0; pos != object->multicastEntries.size; ++pos)
   13aea:	8af3      	ldrh	r3, [r6, #22]
   13aec:	fa1f f987 	uxth.w	r9, r7
   13af0:	454b      	cmp	r3, r9
   13af2:	d0f3      	beq.n	13adc <cosem_getMulticastEntries+0x14>
            if ((ret = cosem_setStructure(data, 2)) != 0)
   13af4:	2102      	movs	r1, #2
   13af6:	4628      	mov	r0, r5
   13af8:	f7fa fe69 	bl	e7ce <cosem_setStructure>
   13afc:	b9a0      	cbnz	r0, 13b28 <cosem_getMulticastEntries+0x60>
            if ((ret = arr_getByIndex(&object->multicastEntries, pos, (void**)&it)) != 0)
   13afe:	aa01      	add	r2, sp, #4
   13b00:	4649      	mov	r1, r9
   13b02:	4640      	mov	r0, r8
   13b04:	f7fd fb01 	bl	1110a <arr_getByIndex>
   13b08:	b970      	cbnz	r0, 13b28 <cosem_getMulticastEntries+0x60>
            if ((ret = cosem_setInt8(data, it->id)) != 0 ||
   13b0a:	9b01      	ldr	r3, [sp, #4]
   13b0c:	4628      	mov	r0, r5
   13b0e:	7819      	ldrb	r1, [r3, #0]
   13b10:	f7fa fe2c 	bl	e76c <cosem_setInt8>
   13b14:	b940      	cbnz	r0, 13b28 <cosem_getMulticastEntries+0x60>
                (ret = cosem_setInt16(data, it->members)) != 0)
   13b16:	9b01      	ldr	r3, [sp, #4]
   13b18:	4628      	mov	r0, r5
   13b1a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   13b1e:	f7fa fe33 	bl	e788 <cosem_setInt16>
   13b22:	3701      	adds	r7, #1
            if ((ret = cosem_setInt8(data, it->id)) != 0 ||
   13b24:	2800      	cmp	r0, #0
   13b26:	d0e0      	beq.n	13aea <cosem_getMulticastEntries+0x22>
                (ret = cosem_setInt16(data, it->members)) != 0)
   13b28:	4604      	mov	r4, r0
    return ret;
   13b2a:	e7d7      	b.n	13adc <cosem_getMulticastEntries+0x14>

00013b2c <cosem_getSwitchTable>:

int cosem_getSwitchTable(gxValueEventArg* e)
{
   13b2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   13b30:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13b32:	6886      	ldr	r6, [r0, #8]
    if ((ret = cosem_setArray(data, object->switchTable.size)) == 0)
   13b34:	8c69      	ldrh	r1, [r5, #34]	; 0x22
   13b36:	4630      	mov	r0, r6
   13b38:	f7fa fe57 	bl	e7ea <cosem_setArray>
   13b3c:	4604      	mov	r4, r0
   13b3e:	b118      	cbz	r0, 13b48 <cosem_getSwitchTable+0x1c>
                break;
            }
        }
    }
    return ret;
}
   13b40:	4620      	mov	r0, r4
   13b42:	b002      	add	sp, #8
   13b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b48:	4680      	mov	r8, r0
            if ((ret = arr_getByIndex(&object->switchTable, pos, (void**)&it)) != 0)
   13b4a:	f105 071c 	add.w	r7, r5, #28
        for (pos = 0; pos != object->switchTable.size; ++pos)
   13b4e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   13b50:	fa1f f188 	uxth.w	r1, r8
   13b54:	428b      	cmp	r3, r1
   13b56:	d0f3      	beq.n	13b40 <cosem_getSwitchTable+0x14>
            if ((ret = arr_getByIndex(&object->switchTable, pos, (void**)&it)) != 0)
   13b58:	aa01      	add	r2, sp, #4
   13b5a:	4638      	mov	r0, r7
   13b5c:	f7fd fad5 	bl	1110a <arr_getByIndex>
   13b60:	b948      	cbnz	r0, 13b76 <cosem_getSwitchTable+0x4a>
            if ((ret = cosem_setInt16(data, *it)) != 0)
   13b62:	9b01      	ldr	r3, [sp, #4]
   13b64:	4630      	mov	r0, r6
   13b66:	f9b3 1000 	ldrsh.w	r1, [r3]
   13b6a:	f7fa fe0d 	bl	e788 <cosem_setInt16>
   13b6e:	f108 0801 	add.w	r8, r8, #1
   13b72:	2800      	cmp	r0, #0
   13b74:	d0eb      	beq.n	13b4e <cosem_getSwitchTable+0x22>
   13b76:	4604      	mov	r4, r0
    return ret;
   13b78:	e7e2      	b.n	13b40 <cosem_getSwitchTable+0x14>

00013b7a <cosem_getDirectTable>:

int cosem_getDirectTable(gxValueEventArg* e)
{
   13b7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacDirectTable* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   13b7e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13b80:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->directTable.size)) == 0)
   13b82:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
   13b84:	4628      	mov	r0, r5
   13b86:	f7fa fe30 	bl	e7ea <cosem_setArray>
   13b8a:	4604      	mov	r4, r0
   13b8c:	b118      	cbz	r0, 13b96 <cosem_getDirectTable+0x1c>
                break;
            }
        }
    }
    return ret;
}
   13b8e:	4620      	mov	r0, r4
   13b90:	b002      	add	sp, #8
   13b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b96:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->directTable, pos, (void**)&it)) != 0)
   13b98:	f106 0828 	add.w	r8, r6, #40	; 0x28
        for (pos = 0; pos != object->directTable.size; ++pos)
   13b9c:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   13b9e:	b2b9      	uxth	r1, r7
   13ba0:	428b      	cmp	r3, r1
   13ba2:	d0f4      	beq.n	13b8e <cosem_getDirectTable+0x14>
            if ((ret = arr_getByIndex(&object->directTable, pos, (void**)&it)) != 0)
   13ba4:	aa01      	add	r2, sp, #4
   13ba6:	4640      	mov	r0, r8
   13ba8:	f7fd faaf 	bl	1110a <arr_getByIndex>
   13bac:	2800      	cmp	r0, #0
   13bae:	d137      	bne.n	13c20 <cosem_getDirectTable+0xa6>
            if ((ret = cosem_setStructure(data, 7)) != 0 ||
   13bb0:	2107      	movs	r1, #7
   13bb2:	4628      	mov	r0, r5
   13bb4:	f7fa fe0b 	bl	e7ce <cosem_setStructure>
   13bb8:	bb90      	cbnz	r0, 13c20 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceSId)) != 0 ||
   13bba:	9b01      	ldr	r3, [sp, #4]
   13bbc:	4628      	mov	r0, r5
   13bbe:	f9b3 1000 	ldrsh.w	r1, [r3]
   13bc2:	f7fa fde1 	bl	e788 <cosem_setInt16>
            if ((ret = cosem_setStructure(data, 7)) != 0 ||
   13bc6:	bb58      	cbnz	r0, 13c20 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceLnId)) != 0 ||
   13bc8:	9b01      	ldr	r3, [sp, #4]
   13bca:	4628      	mov	r0, r5
   13bcc:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   13bd0:	f7fa fdda 	bl	e788 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceSId)) != 0 ||
   13bd4:	bb20      	cbnz	r0, 13c20 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceLcId)) != 0 ||
   13bd6:	9b01      	ldr	r3, [sp, #4]
   13bd8:	4628      	mov	r0, r5
   13bda:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   13bde:	f7fa fdd3 	bl	e788 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceLnId)) != 0 ||
   13be2:	b9e8      	cbnz	r0, 13c20 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationSId)) != 0 ||
   13be4:	9b01      	ldr	r3, [sp, #4]
   13be6:	4628      	mov	r0, r5
   13be8:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
   13bec:	f7fa fdcc 	bl	e788 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceLcId)) != 0 ||
   13bf0:	b9b0      	cbnz	r0, 13c20 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationLnId)) != 0 ||
   13bf2:	9b01      	ldr	r3, [sp, #4]
   13bf4:	4628      	mov	r0, r5
   13bf6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
   13bfa:	f7fa fdc5 	bl	e788 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->destinationSId)) != 0 ||
   13bfe:	b978      	cbnz	r0, 13c20 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationLcId)) != 0 ||
   13c00:	9b01      	ldr	r3, [sp, #4]
   13c02:	4628      	mov	r0, r5
   13c04:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
   13c08:	f7fa fdbe 	bl	e788 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->destinationLnId)) != 0 ||
   13c0c:	b940      	cbnz	r0, 13c20 <cosem_getDirectTable+0xa6>
                (ret = cosem_setOctetString2(data, it->did, sizeof(it->did))) != 0)
   13c0e:	9901      	ldr	r1, [sp, #4]
   13c10:	2206      	movs	r2, #6
   13c12:	310c      	adds	r1, #12
   13c14:	4628      	mov	r0, r5
   13c16:	f7fa fd5e 	bl	e6d6 <cosem_setOctetString2>
   13c1a:	3701      	adds	r7, #1
                (ret = cosem_setInt16(data, it->destinationLcId)) != 0 ||
   13c1c:	2800      	cmp	r0, #0
   13c1e:	d0bd      	beq.n	13b9c <cosem_getDirectTable+0x22>
                (ret = cosem_setOctetString2(data, it->did, sizeof(it->did))) != 0)
   13c20:	4604      	mov	r4, r0
    return ret;
   13c22:	e7b4      	b.n	13b8e <cosem_getDirectTable+0x14>

00013c24 <cosem_getAvailableSwitches>:

int cosem_getAvailableSwitches(gxValueEventArg* e)
{
   13c24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacAvailableSwitch* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   13c28:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13c2a:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->availableSwitches.size)) == 0)
   13c2c:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
   13c2e:	4628      	mov	r0, r5
   13c30:	f7fa fddb 	bl	e7ea <cosem_setArray>
   13c34:	4604      	mov	r4, r0
   13c36:	b118      	cbz	r0, 13c40 <cosem_getAvailableSwitches+0x1c>
                break;
            }
        }
    }
    return ret;
}
   13c38:	4620      	mov	r0, r4
   13c3a:	b002      	add	sp, #8
   13c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c40:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->availableSwitches, pos, (void**)&it)) != 0)
   13c42:	f106 0834 	add.w	r8, r6, #52	; 0x34
        for (pos = 0; pos != object->availableSwitches.size; ++pos)
   13c46:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   13c48:	b2b9      	uxth	r1, r7
   13c4a:	428b      	cmp	r3, r1
   13c4c:	d0f4      	beq.n	13c38 <cosem_getAvailableSwitches+0x14>
            if ((ret = arr_getByIndex(&object->availableSwitches, pos, (void**)&it)) != 0)
   13c4e:	aa01      	add	r2, sp, #4
   13c50:	4640      	mov	r0, r8
   13c52:	f7fd fa5a 	bl	1110a <arr_getByIndex>
   13c56:	bb30      	cbnz	r0, 13ca6 <cosem_getAvailableSwitches+0x82>
            if ((ret = cosem_setStructure(data, 5)) != 0 ||
   13c58:	2105      	movs	r1, #5
   13c5a:	4628      	mov	r0, r5
   13c5c:	f7fa fdb7 	bl	e7ce <cosem_setStructure>
   13c60:	bb08      	cbnz	r0, 13ca6 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setOctetString2(data, it->sna.data, (uint16_t)it->sna.size)) != 0 ||
   13c62:	9b01      	ldr	r3, [sp, #4]
   13c64:	4628      	mov	r0, r5
   13c66:	88da      	ldrh	r2, [r3, #6]
   13c68:	6819      	ldr	r1, [r3, #0]
   13c6a:	f7fa fd34 	bl	e6d6 <cosem_setOctetString2>
            if ((ret = cosem_setStructure(data, 5)) != 0 ||
   13c6e:	b9d0      	cbnz	r0, 13ca6 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt16(data, it->lsId)) != 0 ||
   13c70:	9b01      	ldr	r3, [sp, #4]
   13c72:	4628      	mov	r0, r5
   13c74:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   13c78:	f7fa fd86 	bl	e788 <cosem_setInt16>
                (ret = cosem_setOctetString2(data, it->sna.data, (uint16_t)it->sna.size)) != 0 ||
   13c7c:	b998      	cbnz	r0, 13ca6 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->level)) != 0 ||
   13c7e:	9b01      	ldr	r3, [sp, #4]
   13c80:	4628      	mov	r0, r5
   13c82:	7b99      	ldrb	r1, [r3, #14]
   13c84:	f7fa fd72 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt16(data, it->lsId)) != 0 ||
   13c88:	b968      	cbnz	r0, 13ca6 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->rxLevel)) != 0 ||
   13c8a:	9b01      	ldr	r3, [sp, #4]
   13c8c:	4628      	mov	r0, r5
   13c8e:	7bd9      	ldrb	r1, [r3, #15]
   13c90:	f7fa fd6c 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->level)) != 0 ||
   13c94:	b938      	cbnz	r0, 13ca6 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->rxSnr)) != 0)
   13c96:	9b01      	ldr	r3, [sp, #4]
   13c98:	4628      	mov	r0, r5
   13c9a:	7c19      	ldrb	r1, [r3, #16]
   13c9c:	f7fa fd66 	bl	e76c <cosem_setInt8>
   13ca0:	3701      	adds	r7, #1
                (ret = cosem_setInt8(data, it->rxLevel)) != 0 ||
   13ca2:	2800      	cmp	r0, #0
   13ca4:	d0cf      	beq.n	13c46 <cosem_getAvailableSwitches+0x22>
                (ret = cosem_setInt8(data, it->rxSnr)) != 0)
   13ca6:	4604      	mov	r4, r0
    return ret;
   13ca8:	e7c6      	b.n	13c38 <cosem_getAvailableSwitches+0x14>

00013caa <cosem_getCommunications>:

int cosem_getCommunications(gxValueEventArg* e)
{
   13caa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacPhyCommunication* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   13cae:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13cb0:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->communications.size)) == 0)
   13cb2:	f8b6 1046 	ldrh.w	r1, [r6, #70]	; 0x46
   13cb6:	4628      	mov	r0, r5
   13cb8:	f7fa fd97 	bl	e7ea <cosem_setArray>
   13cbc:	4604      	mov	r4, r0
   13cbe:	b118      	cbz	r0, 13cc8 <cosem_getCommunications+0x1e>
                break;
            }
        }
    }
    return ret;
}
   13cc0:	4620      	mov	r0, r4
   13cc2:	b002      	add	sp, #8
   13cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cc8:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->communications, pos, (void**)&it)) != 0)
   13cca:	f106 0840 	add.w	r8, r6, #64	; 0x40
        for (pos = 0; pos != object->communications.size; ++pos)
   13cce:	f8b6 3046 	ldrh.w	r3, [r6, #70]	; 0x46
   13cd2:	b2b9      	uxth	r1, r7
   13cd4:	428b      	cmp	r3, r1
   13cd6:	d0f3      	beq.n	13cc0 <cosem_getCommunications+0x16>
            if ((ret = arr_getByIndex(&object->communications, pos, (void**)&it)) != 0)
   13cd8:	aa01      	add	r2, sp, #4
   13cda:	4640      	mov	r0, r8
   13cdc:	f7fd fa15 	bl	1110a <arr_getByIndex>
   13ce0:	2800      	cmp	r0, #0
   13ce2:	d13e      	bne.n	13d62 <cosem_getCommunications+0xb8>
            if ((ret = cosem_setStructure(data, 9)) != 0 ||
   13ce4:	2109      	movs	r1, #9
   13ce6:	4628      	mov	r0, r5
   13ce8:	f7fa fd71 	bl	e7ce <cosem_setStructure>
   13cec:	2800      	cmp	r0, #0
   13cee:	d138      	bne.n	13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setOctetString2(data, it->eui, sizeof(it->eui))) != 0 ||
   13cf0:	9901      	ldr	r1, [sp, #4]
   13cf2:	2206      	movs	r2, #6
   13cf4:	4628      	mov	r0, r5
   13cf6:	f7fa fcee 	bl	e6d6 <cosem_setOctetString2>
            if ((ret = cosem_setStructure(data, 9)) != 0 ||
   13cfa:	2800      	cmp	r0, #0
   13cfc:	d131      	bne.n	13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txPower)) != 0 ||
   13cfe:	9b01      	ldr	r3, [sp, #4]
   13d00:	4628      	mov	r0, r5
   13d02:	7999      	ldrb	r1, [r3, #6]
   13d04:	f7fa fd32 	bl	e76c <cosem_setInt8>
                (ret = cosem_setOctetString2(data, it->eui, sizeof(it->eui))) != 0 ||
   13d08:	bb58      	cbnz	r0, 13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txCoding)) != 0 ||
   13d0a:	9b01      	ldr	r3, [sp, #4]
   13d0c:	4628      	mov	r0, r5
   13d0e:	79d9      	ldrb	r1, [r3, #7]
   13d10:	f7fa fd2c 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txPower)) != 0 ||
   13d14:	bb28      	cbnz	r0, 13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxCoding)) != 0 ||
   13d16:	9b01      	ldr	r3, [sp, #4]
   13d18:	4628      	mov	r0, r5
   13d1a:	7a19      	ldrb	r1, [r3, #8]
   13d1c:	f7fa fd26 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txCoding)) != 0 ||
   13d20:	b9f8      	cbnz	r0, 13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxLvl)) != 0 ||
   13d22:	9b01      	ldr	r3, [sp, #4]
   13d24:	4628      	mov	r0, r5
   13d26:	7a59      	ldrb	r1, [r3, #9]
   13d28:	f7fa fd20 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->rxCoding)) != 0 ||
   13d2c:	b9c8      	cbnz	r0, 13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->snr)) != 0 ||
   13d2e:	9b01      	ldr	r3, [sp, #4]
   13d30:	4628      	mov	r0, r5
   13d32:	7a99      	ldrb	r1, [r3, #10]
   13d34:	f7fa fd1a 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->rxLvl)) != 0 ||
   13d38:	b998      	cbnz	r0, 13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txPowerModified)) != 0 ||
   13d3a:	9b01      	ldr	r3, [sp, #4]
   13d3c:	4628      	mov	r0, r5
   13d3e:	7ad9      	ldrb	r1, [r3, #11]
   13d40:	f7fa fd14 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->snr)) != 0 ||
   13d44:	b968      	cbnz	r0, 13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txCodingModified)) != 0 ||
   13d46:	9b01      	ldr	r3, [sp, #4]
   13d48:	4628      	mov	r0, r5
   13d4a:	7b19      	ldrb	r1, [r3, #12]
   13d4c:	f7fa fd0e 	bl	e76c <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txPowerModified)) != 0 ||
   13d50:	b938      	cbnz	r0, 13d62 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxCodingModified)) != 0)
   13d52:	9b01      	ldr	r3, [sp, #4]
   13d54:	4628      	mov	r0, r5
   13d56:	7b59      	ldrb	r1, [r3, #13]
   13d58:	f7fa fd08 	bl	e76c <cosem_setInt8>
   13d5c:	3701      	adds	r7, #1
                (ret = cosem_setInt8(data, it->txCodingModified)) != 0 ||
   13d5e:	2800      	cmp	r0, #0
   13d60:	d0b5      	beq.n	13cce <cosem_getCommunications+0x24>
                (ret = cosem_setInt8(data, it->rxCodingModified)) != 0)
   13d62:	4604      	mov	r4, r0
    return ret;
   13d64:	e7ac      	b.n	13cc0 <cosem_getCommunications+0x16>

00013d66 <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData>:

int  cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(
    gxValueEventArg* e)
{
    int ret;
    switch (e->index)
   13d66:	7e03      	ldrb	r3, [r0, #24]
   13d68:	3b02      	subs	r3, #2
   13d6a:	2b04      	cmp	r3, #4
   13d6c:	d80e      	bhi.n	13d8c <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData+0x26>
   13d6e:	e8df f003 	tbb	[pc, r3]
   13d72:	0503      	.short	0x0503
   13d74:	0907      	.short	0x0907
   13d76:	0b          	.byte	0x0b
   13d77:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_getMulticastEntries(e);
   13d78:	f7ff bea6 	b.w	13ac8 <cosem_getMulticastEntries>
        break;
    case 3:
        ret = cosem_getSwitchTable(e);
   13d7c:	f7ff bed6 	b.w	13b2c <cosem_getSwitchTable>
        break;
    case 4:
        ret = cosem_getDirectTable(e);
   13d80:	f7ff befb 	b.w	13b7a <cosem_getDirectTable>
        break;
    case 5:
        ret = cosem_getAvailableSwitches(e);
   13d84:	f7ff bf4e 	b.w	13c24 <cosem_getAvailableSwitches>
        break;
    case 6:
        ret = cosem_getCommunications(e);
   13d88:	f7ff bf8f 	b.w	13caa <cosem_getCommunications>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13d8c:	f44f 7081 	mov.w	r0, #258	; 0x102
   13d90:	4770      	bx	lr

00013d92 <cosem_getPrimeNbOfdmPlcApplicationsIdentification>:
int  cosem_getPrimeNbOfdmPlcApplicationsIdentification(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcApplicationsIdentification* object = (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target;
    switch (e->index)
   13d92:	7e02      	ldrb	r2, [r0, #24]
    gxPrimeNbOfdmPlcApplicationsIdentification* object = (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target;
   13d94:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   13d96:	2a03      	cmp	r2, #3
   13d98:	d008      	beq.n	13dac <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x1a>
   13d9a:	2a04      	cmp	r2, #4
   13d9c:	d00a      	beq.n	13db4 <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x22>
   13d9e:	2a02      	cmp	r2, #2
   13da0:	d10a      	bne.n	13db8 <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x26>
    {
    case 2:
    {
        ret = cosem_setOctetString2(e->value.byteArr, object->firmwareVersion.data, (uint16_t)object->firmwareVersion.size);
   13da2:	8ada      	ldrh	r2, [r3, #22]
   13da4:	6919      	ldr	r1, [r3, #16]
   13da6:	6880      	ldr	r0, [r0, #8]
   13da8:	f7fa bc95 	b.w	e6d6 <cosem_setOctetString2>
    }
    break;
    case 3:
        ret = cosem_setUInt16(e->value.byteArr, object->vendorId);
   13dac:	8b99      	ldrh	r1, [r3, #28]
        break;
    case 4:
        ret = cosem_setUInt16(e->value.byteArr, object->productId);
   13dae:	6880      	ldr	r0, [r0, #8]
   13db0:	f7fa bcc0 	b.w	e734 <cosem_setUInt16>
   13db4:	8bd9      	ldrh	r1, [r3, #30]
   13db6:	e7fa      	b.n	13dae <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x1c>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13db8:	f44f 7081 	mov.w	r0, #258	; 0x102
   13dbc:	4770      	bx	lr

00013dbe <cosem_getArbitrator>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_APPLICATIONS_IDENTIFICATION
#ifndef DLMS_IGNORE_ARBITRATOR
int cosem_getArbitrator(gxValueEventArg* e)
{
   13dbe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13dc2:	7e03      	ldrb	r3, [r0, #24]
    int ret;
    uint16_t pos;
    gxActionItem* it;
    gxByteBuffer* data = e->value.byteArr;
   13dc4:	6885      	ldr	r5, [r0, #8]
    gxArbitrator* object = (gxArbitrator*)e->target;
   13dc6:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   13dc8:	3b02      	subs	r3, #2
{
   13dca:	4607      	mov	r7, r0
   13dcc:	2b04      	cmp	r3, #4
   13dce:	f200 80da 	bhi.w	13f86 <cosem_getArbitrator+0x1c8>
   13dd2:	e8df f013 	tbh	[pc, r3, lsl #1]
   13dd6:	0005      	.short	0x0005
   13dd8:	00790043 	.word	0x00790043
   13ddc:	00d20098 	.word	0x00d20098
    {
    case 2:
    {
        if ((ret = cosem_setArray(data, object->actions.size)) == 0)
   13de0:	8af1      	ldrh	r1, [r6, #22]
   13de2:	4628      	mov	r0, r5
   13de4:	f7fa fd01 	bl	e7ea <cosem_setArray>
   13de8:	4604      	mov	r4, r0
   13dea:	b118      	cbz	r0, 13df4 <cosem_getArbitrator+0x36>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13dec:	4620      	mov	r0, r4
   13dee:	b002      	add	sp, #8
   13df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13df4:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->actions, pos, (void**)&it)) != 0)
   13df6:	f106 0810 	add.w	r8, r6, #16
            for (pos = 0; pos != object->actions.size; ++pos)
   13dfa:	8af3      	ldrh	r3, [r6, #22]
   13dfc:	b2b9      	uxth	r1, r7
   13dfe:	428b      	cmp	r3, r1
   13e00:	d0f4      	beq.n	13dec <cosem_getArbitrator+0x2e>
                if ((ret = arr_getByIndex(&object->actions, pos, (void**)&it)) != 0)
   13e02:	aa01      	add	r2, sp, #4
   13e04:	4640      	mov	r0, r8
   13e06:	f7fd f980 	bl	1110a <arr_getByIndex>
   13e0a:	bb28      	cbnz	r0, 13e58 <cosem_getArbitrator+0x9a>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13e0c:	2102      	movs	r1, #2
   13e0e:	4628      	mov	r0, r5
   13e10:	f7f9 fdb5 	bl	d97e <bb_setUInt8>
   13e14:	bb00      	cbnz	r0, 13e58 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   13e16:	2102      	movs	r1, #2
   13e18:	4628      	mov	r0, r5
   13e1a:	f7f9 fdb0 	bl	d97e <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13e1e:	b9d8      	cbnz	r0, 13e58 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13e20:	2109      	movs	r1, #9
   13e22:	4628      	mov	r0, r5
   13e24:	f7f9 fdab 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   13e28:	b9b0      	cbnz	r0, 13e58 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   13e2a:	2106      	movs	r1, #6
   13e2c:	4628      	mov	r0, r5
   13e2e:	f7f9 fda6 	bl	d97e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13e32:	b988      	cbnz	r0, 13e58 <cosem_getArbitrator+0x9a>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)it->script), 6)) != 0 ||
   13e34:	9b01      	ldr	r3, [sp, #4]
   13e36:	6818      	ldr	r0, [r3, #0]
   13e38:	f7f0 f92a 	bl	4090 <obj_getLogicalName>
   13e3c:	2206      	movs	r2, #6
   13e3e:	4601      	mov	r1, r0
   13e40:	4628      	mov	r0, r5
   13e42:	f7f9 fe82 	bl	db4a <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   13e46:	b938      	cbnz	r0, 13e58 <cosem_getArbitrator+0x9a>
                    (ret = cosem_setUInt16(data, it->scriptSelector)) != 0)
   13e48:	9b01      	ldr	r3, [sp, #4]
   13e4a:	4628      	mov	r0, r5
   13e4c:	8899      	ldrh	r1, [r3, #4]
   13e4e:	f7fa fc71 	bl	e734 <cosem_setUInt16>
   13e52:	3701      	adds	r7, #1
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)it->script), 6)) != 0 ||
   13e54:	2800      	cmp	r0, #0
   13e56:	d0d0      	beq.n	13dfa <cosem_getArbitrator+0x3c>
                    (ret = cosem_setUInt16(data, it->scriptSelector)) != 0)
   13e58:	4604      	mov	r4, r0
    return ret;
   13e5a:	e7c7      	b.n	13dec <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->permissionsTable.size)) == 0)
   13e5c:	8c71      	ldrh	r1, [r6, #34]	; 0x22
   13e5e:	4628      	mov	r0, r5
   13e60:	f7fa fcc3 	bl	e7ea <cosem_setArray>
   13e64:	4604      	mov	r4, r0
   13e66:	2800      	cmp	r0, #0
   13e68:	d1c0      	bne.n	13dec <cosem_getArbitrator+0x2e>
   13e6a:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->permissionsTable, pos, (void**)&a)) != 0)
   13e6c:	f106 091c 	add.w	r9, r6, #28
   13e70:	e024      	b.n	13ebc <cosem_getArbitrator+0xfe>
   13e72:	aa01      	add	r2, sp, #4
   13e74:	4648      	mov	r0, r9
   13e76:	f7fd f948 	bl	1110a <arr_getByIndex>
   13e7a:	4604      	mov	r4, r0
   13e7c:	2800      	cmp	r0, #0
   13e7e:	d1b5      	bne.n	13dec <cosem_getArbitrator+0x2e>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13e80:	2104      	movs	r1, #4
   13e82:	4628      	mov	r0, r5
   13e84:	f7f9 fd7b 	bl	d97e <bb_setUInt8>
   13e88:	4604      	mov	r4, r0
   13e8a:	2800      	cmp	r0, #0
   13e8c:	d1ae      	bne.n	13dec <cosem_getArbitrator+0x2e>
                    (ret = hlp_setObjectCount(a->size, data)) != 0)
   13e8e:	9b01      	ldr	r3, [sp, #4]
   13e90:	4629      	mov	r1, r5
   13e92:	88d8      	ldrh	r0, [r3, #6]
   13e94:	f006 fe6f 	bl	1ab76 <hlp_setObjectCount>
   13e98:	f108 0801 	add.w	r8, r8, #1
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13e9c:	4604      	mov	r4, r0
   13e9e:	2800      	cmp	r0, #0
   13ea0:	d1a4      	bne.n	13dec <cosem_getArbitrator+0x2e>
                ret = bb_set(e->value.byteArr, a->data, ba_getByteCount(a->size));
   13ea2:	9b01      	ldr	r3, [sp, #4]
   13ea4:	68bc      	ldr	r4, [r7, #8]
   13ea6:	88d8      	ldrh	r0, [r3, #6]
   13ea8:	f8d3 a000 	ldr.w	sl, [r3]
   13eac:	f7ed fb66 	bl	157c <ba_getByteCount>
   13eb0:	4651      	mov	r1, sl
   13eb2:	4602      	mov	r2, r0
   13eb4:	4620      	mov	r0, r4
   13eb6:	f7f9 fe48 	bl	db4a <bb_set>
   13eba:	4604      	mov	r4, r0
            for (pos = 0; pos != object->permissionsTable.size; ++pos)
   13ebc:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   13ebe:	fa1f f188 	uxth.w	r1, r8
   13ec2:	428b      	cmp	r3, r1
   13ec4:	d1d5      	bne.n	13e72 <cosem_getArbitrator+0xb4>
   13ec6:	e791      	b.n	13dec <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->weightingsTable.size)) == 0)
   13ec8:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
   13eca:	4628      	mov	r0, r5
   13ecc:	f7fa fc8d 	bl	e7ea <cosem_setArray>
   13ed0:	4604      	mov	r4, r0
   13ed2:	2800      	cmp	r0, #0
   13ed4:	d18a      	bne.n	13dec <cosem_getArbitrator+0x2e>
   13ed6:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->weightingsTable, pos, (void**)&v)) != 0)
   13ed8:	f106 0728 	add.w	r7, r6, #40	; 0x28
   13edc:	e00d      	b.n	13efa <cosem_getArbitrator+0x13c>
   13ede:	aa01      	add	r2, sp, #4
   13ee0:	4638      	mov	r0, r7
   13ee2:	f7fd f912 	bl	1110a <arr_getByIndex>
   13ee6:	2800      	cmp	r0, #0
   13ee8:	d1b6      	bne.n	13e58 <cosem_getArbitrator+0x9a>
                if ((ret = cosem_setVariant(data, v)) != 0)
   13eea:	9901      	ldr	r1, [sp, #4]
   13eec:	4628      	mov	r0, r5
   13eee:	f7fa fc67 	bl	e7c0 <cosem_setVariant>
   13ef2:	f108 0801 	add.w	r8, r8, #1
   13ef6:	2800      	cmp	r0, #0
   13ef8:	d1ae      	bne.n	13e58 <cosem_getArbitrator+0x9a>
            for (pos = 0; pos != object->weightingsTable.size; ++pos)
   13efa:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   13efc:	fa1f f188 	uxth.w	r1, r8
   13f00:	428b      	cmp	r3, r1
   13f02:	d1ec      	bne.n	13ede <cosem_getArbitrator+0x120>
   13f04:	e772      	b.n	13dec <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->mostRecentRequestsTable.size)) == 0)
   13f06:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
   13f08:	4628      	mov	r0, r5
   13f0a:	f7fa fc6e 	bl	e7ea <cosem_setArray>
   13f0e:	4604      	mov	r4, r0
   13f10:	2800      	cmp	r0, #0
   13f12:	f47f af6b 	bne.w	13dec <cosem_getArbitrator+0x2e>
   13f16:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->mostRecentRequestsTable, pos, (void**)&a)) != 0)
   13f18:	f106 0934 	add.w	r9, r6, #52	; 0x34
   13f1c:	e027      	b.n	13f6e <cosem_getArbitrator+0x1b0>
   13f1e:	aa01      	add	r2, sp, #4
   13f20:	4648      	mov	r0, r9
   13f22:	f7fd f8f2 	bl	1110a <arr_getByIndex>
   13f26:	4604      	mov	r4, r0
   13f28:	2800      	cmp	r0, #0
   13f2a:	f47f af5f 	bne.w	13dec <cosem_getArbitrator+0x2e>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13f2e:	2104      	movs	r1, #4
   13f30:	4628      	mov	r0, r5
   13f32:	f7f9 fd24 	bl	d97e <bb_setUInt8>
   13f36:	4604      	mov	r4, r0
   13f38:	2800      	cmp	r0, #0
   13f3a:	f47f af57 	bne.w	13dec <cosem_getArbitrator+0x2e>
                    (ret = hlp_setObjectCount(a->size, data)) != 0)
   13f3e:	9b01      	ldr	r3, [sp, #4]
   13f40:	4629      	mov	r1, r5
   13f42:	88d8      	ldrh	r0, [r3, #6]
   13f44:	f006 fe17 	bl	1ab76 <hlp_setObjectCount>
   13f48:	f108 0801 	add.w	r8, r8, #1
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13f4c:	4604      	mov	r4, r0
   13f4e:	2800      	cmp	r0, #0
   13f50:	f47f af4c 	bne.w	13dec <cosem_getArbitrator+0x2e>
                ret = bb_set(e->value.byteArr, a->data, ba_getByteCount(a->size));
   13f54:	9b01      	ldr	r3, [sp, #4]
   13f56:	68bc      	ldr	r4, [r7, #8]
   13f58:	88d8      	ldrh	r0, [r3, #6]
   13f5a:	f8d3 a000 	ldr.w	sl, [r3]
   13f5e:	f7ed fb0d 	bl	157c <ba_getByteCount>
   13f62:	4651      	mov	r1, sl
   13f64:	4602      	mov	r2, r0
   13f66:	4620      	mov	r0, r4
   13f68:	f7f9 fdef 	bl	db4a <bb_set>
   13f6c:	4604      	mov	r4, r0
            for (pos = 0; pos != object->mostRecentRequestsTable.size; ++pos)
   13f6e:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   13f70:	fa1f f188 	uxth.w	r1, r8
   13f74:	428b      	cmp	r3, r1
   13f76:	d1d2      	bne.n	13f1e <cosem_getArbitrator+0x160>
   13f78:	e738      	b.n	13dec <cosem_getArbitrator+0x2e>
        ret = cosem_setUInt8(data, object->lastOutcome);
   13f7a:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
   13f7e:	4628      	mov	r0, r5
   13f80:	f7fa fbca 	bl	e718 <cosem_setUInt8>
   13f84:	e768      	b.n	13e58 <cosem_getArbitrator+0x9a>
    switch (e->index)
   13f86:	f44f 7481 	mov.w	r4, #258	; 0x102
   13f8a:	e72f      	b.n	13dec <cosem_getArbitrator+0x2e>

00013f8c <cosem_getIec8802LlcType1Setup>:
    gxValueEventArg* e)
{
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
    gxIec8802LlcType1Setup* object = (gxIec8802LlcType1Setup*)e->target;
    if (e->index == 2)
   13f8c:	7e03      	ldrb	r3, [r0, #24]
   13f8e:	2b02      	cmp	r3, #2
   13f90:	d104      	bne.n	13f9c <cosem_getIec8802LlcType1Setup+0x10>
    {
        ret = cosem_setUInt16(data, object->maximumOctetsUiPdu);
   13f92:	6943      	ldr	r3, [r0, #20]
   13f94:	6880      	ldr	r0, [r0, #8]
   13f96:	8a19      	ldrh	r1, [r3, #16]
   13f98:	f7fa bbcc 	b.w	e734 <cosem_setUInt16>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   13f9c:	f44f 7081 	mov.w	r0, #258	; 0x102
   13fa0:	4770      	bx	lr

00013fa2 <cosem_getIec8802LlcType2Setup>:
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
int cosem_getIec8802LlcType2Setup(
    gxValueEventArg* e)
{
   13fa2:	4602      	mov	r2, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   13fa4:	6880      	ldr	r0, [r0, #8]
    gxIec8802LlcType2Setup* object = (gxIec8802LlcType2Setup*)e->target;
   13fa6:	6953      	ldr	r3, [r2, #20]
    switch (e->index)
   13fa8:	7e12      	ldrb	r2, [r2, #24]
   13faa:	3a02      	subs	r2, #2
   13fac:	2a07      	cmp	r2, #7
   13fae:	d817      	bhi.n	13fe0 <cosem_getIec8802LlcType2Setup+0x3e>
   13fb0:	e8df f002 	tbb	[pc, r2]
   13fb4:	0c090704 	.word	0x0c090704
   13fb8:	1412100e 	.word	0x1412100e
    {
    case 2:
        ret = cosem_setUInt8(data, object->transmitWindowSizeK);
   13fbc:	7c19      	ldrb	r1, [r3, #16]
        break;
    case 3:
        ret = cosem_setUInt8(data, object->transmitWindowSizeRW);
   13fbe:	f7fa bbab 	b.w	e718 <cosem_setUInt8>
   13fc2:	7c59      	ldrb	r1, [r3, #17]
   13fc4:	e7fb      	b.n	13fbe <cosem_getIec8802LlcType2Setup+0x1c>
        break;
    case 4:
        ret = cosem_setUInt16(data, object->maximumOctetsPdu);
   13fc6:	8a59      	ldrh	r1, [r3, #18]
        break;
    case 8:
        ret = cosem_setUInt16(data, object->rejectTimer);
        break;
    case 9:
        ret = cosem_setUInt16(data, object->busyStateTimer);
   13fc8:	f7fa bbb4 	b.w	e734 <cosem_setUInt16>
        ret = cosem_setUInt8(data, object->maximumNumberTransmissions);
   13fcc:	7d19      	ldrb	r1, [r3, #20]
   13fce:	e7f6      	b.n	13fbe <cosem_getIec8802LlcType2Setup+0x1c>
        ret = cosem_setUInt16(data, object->acknowledgementTimer);
   13fd0:	8ad9      	ldrh	r1, [r3, #22]
   13fd2:	e7f9      	b.n	13fc8 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->bitTimer);
   13fd4:	8b19      	ldrh	r1, [r3, #24]
   13fd6:	e7f7      	b.n	13fc8 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->rejectTimer);
   13fd8:	8b59      	ldrh	r1, [r3, #26]
   13fda:	e7f5      	b.n	13fc8 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->busyStateTimer);
   13fdc:	8b99      	ldrh	r1, [r3, #28]
   13fde:	e7f3      	b.n	13fc8 <cosem_getIec8802LlcType2Setup+0x26>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   13fe0:	f44f 7081 	mov.w	r0, #258	; 0x102
   13fe4:	4770      	bx	lr

00013fe6 <cosem_getIec8802LlcType3Setup>:

#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE3_SETUP
int cosem_getIec8802LlcType3Setup(
    gxValueEventArg* e)
{
   13fe6:	4602      	mov	r2, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   13fe8:	6880      	ldr	r0, [r0, #8]
    gxIec8802LlcType3Setup* object = (gxIec8802LlcType3Setup*)e->target;
   13fea:	6953      	ldr	r3, [r2, #20]
    switch (e->index)
   13fec:	7e12      	ldrb	r2, [r2, #24]
   13fee:	3a02      	subs	r2, #2
   13ff0:	2a04      	cmp	r2, #4
   13ff2:	d810      	bhi.n	14016 <cosem_getIec8802LlcType3Setup+0x30>
   13ff4:	e8df f002 	tbb	[pc, r2]
   13ff8:	0b090603 	.word	0x0b090603
   13ffc:	0d          	.byte	0x0d
   13ffd:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setUInt16(data, object->maximumOctetsACnPdu);
   13ffe:	8a19      	ldrh	r1, [r3, #16]
        break;
    case 5:
        ret = cosem_setUInt16(data, object->receiveLifetime);
        break;
    case 6:
        ret = cosem_setUInt16(data, object->transmitLifetime);
   14000:	f7fa bb98 	b.w	e734 <cosem_setUInt16>
        ret = cosem_setUInt8(data, object->maximumTransmissions);
   14004:	7c99      	ldrb	r1, [r3, #18]
   14006:	f7fa bb87 	b.w	e718 <cosem_setUInt8>
        ret = cosem_setUInt16(data, object->acknowledgementTime);
   1400a:	8a99      	ldrh	r1, [r3, #20]
   1400c:	e7f8      	b.n	14000 <cosem_getIec8802LlcType3Setup+0x1a>
        ret = cosem_setUInt16(data, object->receiveLifetime);
   1400e:	8ad9      	ldrh	r1, [r3, #22]
   14010:	e7f6      	b.n	14000 <cosem_getIec8802LlcType3Setup+0x1a>
        ret = cosem_setUInt16(data, object->transmitLifetime);
   14012:	8b19      	ldrh	r1, [r3, #24]
   14014:	e7f4      	b.n	14000 <cosem_getIec8802LlcType3Setup+0x1a>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   14016:	f44f 7081 	mov.w	r0, #258	; 0x102
   1401a:	4770      	bx	lr

0001401c <cosem_getSFSKActiveInitiator>:
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE3_SETUP
#ifndef DLMS_IGNORE_SFSK_ACTIVE_INITIATOR
int cosem_getSFSKActiveInitiator(
    gxValueEventArg* e)
{
   1401c:	b538      	push	{r3, r4, r5, lr}
    int ret;
    gxByteBuffer* data = e->value.byteArr;
    gxSFSKActiveInitiator* object = (gxSFSKActiveInitiator*)e->target;
    if (e->index == 2)
   1401e:	7e03      	ldrb	r3, [r0, #24]
   14020:	2b02      	cmp	r3, #2
   14022:	d117      	bne.n	14054 <cosem_getSFSKActiveInitiator+0x38>
    gxByteBuffer* data = e->value.byteArr;
   14024:	6884      	ldr	r4, [r0, #8]
    gxSFSKActiveInitiator* object = (gxSFSKActiveInitiator*)e->target;
   14026:	6945      	ldr	r5, [r0, #20]
    {
        if ((ret = cosem_setStructure(data, 3)) == 0 &&
   14028:	2103      	movs	r1, #3
   1402a:	4620      	mov	r0, r4
   1402c:	f7fa fbcf 	bl	e7ce <cosem_setStructure>
   14030:	b990      	cbnz	r0, 14058 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setOctetString(data, &object->systemTitle)) == 0 &&
   14032:	f105 0110 	add.w	r1, r5, #16
   14036:	4620      	mov	r0, r4
   14038:	f7fa fb00 	bl	e63c <cosem_setOctetString>
        if ((ret = cosem_setStructure(data, 3)) == 0 &&
   1403c:	b960      	cbnz	r0, 14058 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setUInt16(data, object->macAddress)) == 0 &&
   1403e:	8ba9      	ldrh	r1, [r5, #28]
   14040:	4620      	mov	r0, r4
   14042:	f7fa fb77 	bl	e734 <cosem_setUInt16>
            (ret = cosem_setOctetString(data, &object->systemTitle)) == 0 &&
   14046:	b938      	cbnz	r0, 14058 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setUInt8(data, object->lSapSelector)) == 0)
   14048:	7fa9      	ldrb	r1, [r5, #30]
   1404a:	4620      	mov	r0, r4
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1404c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setUInt8(data, object->lSapSelector)) == 0)
   14050:	f7fa bb62 	b.w	e718 <cosem_setUInt8>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14054:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   14058:	bd38      	pop	{r3, r4, r5, pc}

0001405a <cosem_getFSKMacCounters>:
#endif //DLMS_IGNORE_SFSK_ACTIVE_INITIATOR
#ifndef DLMS_IGNORE_SFSK_MAC_COUNTERS
int cosem_getFSKMacCounters(
    gxValueEventArg* e)
{
   1405a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1405e:	7e03      	ldrb	r3, [r0, #24]
    int ret = 0;
    uint16_t pos;
    gxByteBuffer* data = e->value.byteArr;
   14060:	6885      	ldr	r5, [r0, #8]
    gxFSKMacCounters* object = (gxFSKMacCounters*)e->target;
   14062:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   14064:	3b02      	subs	r3, #2
   14066:	2b06      	cmp	r3, #6
   14068:	f200 808c 	bhi.w	14184 <cosem_getFSKMacCounters+0x12a>
   1406c:	e8df f003 	tbb	[pc, r3]
   14070:	82572f04 	.word	0x82572f04
   14074:	8684      	.short	0x8684
   14076:	88          	.byte	0x88
   14077:	00          	.byte	0x00
    {
    case 2:
    {
        gxUint16PairUint32* it;
        if ((ret = cosem_setArray(data, object->synchronizationRegister.size)) == 0)
   14078:	8af1      	ldrh	r1, [r6, #22]
   1407a:	4628      	mov	r0, r5
   1407c:	f7fa fbb5 	bl	e7ea <cosem_setArray>
   14080:	4604      	mov	r4, r0
   14082:	b118      	cbz	r0, 1408c <cosem_getFSKMacCounters+0x32>
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   14084:	4620      	mov	r0, r4
   14086:	b002      	add	sp, #8
   14088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1408c:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->synchronizationRegister, pos, (void**)&it)) != 0)
   1408e:	f106 0810 	add.w	r8, r6, #16
            for (pos = 0; pos != object->synchronizationRegister.size; ++pos)
   14092:	8af3      	ldrh	r3, [r6, #22]
   14094:	b2b9      	uxth	r1, r7
   14096:	428b      	cmp	r3, r1
   14098:	d0f4      	beq.n	14084 <cosem_getFSKMacCounters+0x2a>
                if ((ret = arr_getByIndex(&object->synchronizationRegister, pos, (void**)&it)) != 0)
   1409a:	aa01      	add	r2, sp, #4
   1409c:	4640      	mov	r0, r8
   1409e:	f7fd f834 	bl	1110a <arr_getByIndex>
   140a2:	b990      	cbnz	r0, 140ca <cosem_getFSKMacCounters+0x70>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   140a4:	2102      	movs	r1, #2
   140a6:	4628      	mov	r0, r5
   140a8:	f7fa fb91 	bl	e7ce <cosem_setStructure>
   140ac:	b968      	cbnz	r0, 140ca <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   140ae:	9b01      	ldr	r3, [sp, #4]
   140b0:	4628      	mov	r0, r5
   140b2:	8819      	ldrh	r1, [r3, #0]
   140b4:	f7fa fb3e 	bl	e734 <cosem_setUInt16>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   140b8:	b938      	cbnz	r0, 140ca <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt32(data, it->second)) != 0)
   140ba:	9b01      	ldr	r3, [sp, #4]
   140bc:	4628      	mov	r0, r5
   140be:	6859      	ldr	r1, [r3, #4]
   140c0:	f7fa fb46 	bl	e750 <cosem_setUInt32>
   140c4:	3701      	adds	r7, #1
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   140c6:	2800      	cmp	r0, #0
   140c8:	d0e3      	beq.n	14092 <cosem_getFSKMacCounters+0x38>
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   140ca:	4604      	mov	r4, r0
        break;
   140cc:	e7da      	b.n	14084 <cosem_getFSKMacCounters+0x2a>
        if ((ret = cosem_setStructure(data, 5)) == 0 &&
   140ce:	2105      	movs	r1, #5
   140d0:	4628      	mov	r0, r5
   140d2:	f7fa fb7c 	bl	e7ce <cosem_setStructure>
   140d6:	4604      	mov	r4, r0
   140d8:	2800      	cmp	r0, #0
   140da:	d1d3      	bne.n	14084 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->physicalLayerDesynchronization)) == 0 &&
   140dc:	69f1      	ldr	r1, [r6, #28]
   140de:	4628      	mov	r0, r5
   140e0:	f7fa fb36 	bl	e750 <cosem_setUInt32>
        if ((ret = cosem_setStructure(data, 5)) == 0 &&
   140e4:	4604      	mov	r4, r0
   140e6:	2800      	cmp	r0, #0
   140e8:	d1cc      	bne.n	14084 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->timeOutNotAddressedDesynchronization)) == 0 &&
   140ea:	6a31      	ldr	r1, [r6, #32]
   140ec:	4628      	mov	r0, r5
   140ee:	f7fa fb2f 	bl	e750 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->physicalLayerDesynchronization)) == 0 &&
   140f2:	4604      	mov	r4, r0
   140f4:	2800      	cmp	r0, #0
   140f6:	d1c5      	bne.n	14084 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->timeOutFrameNotOkDesynchronization)) == 0 &&
   140f8:	6a71      	ldr	r1, [r6, #36]	; 0x24
   140fa:	4628      	mov	r0, r5
   140fc:	f7fa fb28 	bl	e750 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->timeOutNotAddressedDesynchronization)) == 0 &&
   14100:	4604      	mov	r4, r0
   14102:	2800      	cmp	r0, #0
   14104:	d1be      	bne.n	14084 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->writeRequestDesynchronization)) == 0 &&
   14106:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   14108:	4628      	mov	r0, r5
   1410a:	f7fa fb21 	bl	e750 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->timeOutFrameNotOkDesynchronization)) == 0 &&
   1410e:	4604      	mov	r4, r0
   14110:	2800      	cmp	r0, #0
   14112:	d1b7      	bne.n	14084 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->wrongInitiatorDesynchronization)) == 0)
   14114:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   14116:	4628      	mov	r0, r5
   14118:	f7fa fb1a 	bl	e750 <cosem_setUInt32>
   1411c:	e7d5      	b.n	140ca <cosem_getFSKMacCounters+0x70>
        if ((ret = cosem_setArray(data, object->broadcastFramesCounter.size)) == 0)
   1411e:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
   14120:	4628      	mov	r0, r5
   14122:	f7fa fb62 	bl	e7ea <cosem_setArray>
   14126:	4604      	mov	r4, r0
   14128:	2800      	cmp	r0, #0
   1412a:	d1ab      	bne.n	14084 <cosem_getFSKMacCounters+0x2a>
   1412c:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->broadcastFramesCounter, pos, (void**)&it)) != 0)
   1412e:	f106 0830 	add.w	r8, r6, #48	; 0x30
   14132:	e01a      	b.n	1416a <cosem_getFSKMacCounters+0x110>
   14134:	aa01      	add	r2, sp, #4
   14136:	4640      	mov	r0, r8
   14138:	f7fc ffe7 	bl	1110a <arr_getByIndex>
   1413c:	2800      	cmp	r0, #0
   1413e:	d1c4      	bne.n	140ca <cosem_getFSKMacCounters+0x70>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   14140:	2102      	movs	r1, #2
   14142:	4628      	mov	r0, r5
   14144:	f7fa fb43 	bl	e7ce <cosem_setStructure>
   14148:	2800      	cmp	r0, #0
   1414a:	d1be      	bne.n	140ca <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   1414c:	9b01      	ldr	r3, [sp, #4]
   1414e:	4628      	mov	r0, r5
   14150:	8819      	ldrh	r1, [r3, #0]
   14152:	f7fa faef 	bl	e734 <cosem_setUInt16>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   14156:	2800      	cmp	r0, #0
   14158:	d1b7      	bne.n	140ca <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt32(data, it->second)) != 0)
   1415a:	9b01      	ldr	r3, [sp, #4]
   1415c:	4628      	mov	r0, r5
   1415e:	6859      	ldr	r1, [r3, #4]
   14160:	f7fa faf6 	bl	e750 <cosem_setUInt32>
   14164:	3701      	adds	r7, #1
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   14166:	2800      	cmp	r0, #0
   14168:	d1af      	bne.n	140ca <cosem_getFSKMacCounters+0x70>
            for (pos = 0; pos != object->broadcastFramesCounter.size; ++pos)
   1416a:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
   1416c:	b2b9      	uxth	r1, r7
   1416e:	428b      	cmp	r3, r1
   14170:	d1e0      	bne.n	14134 <cosem_getFSKMacCounters+0xda>
   14172:	e787      	b.n	14084 <cosem_getFSKMacCounters+0x2a>
        ret = cosem_setUInt32(data, object->repetitionsCounter);
   14174:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   14176:	e7ce      	b.n	14116 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->transmissionsCounter);
   14178:	6c31      	ldr	r1, [r6, #64]	; 0x40
   1417a:	e7cc      	b.n	14116 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->crcOkFramesCounter);
   1417c:	6c71      	ldr	r1, [r6, #68]	; 0x44
   1417e:	e7ca      	b.n	14116 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   14180:	6cb1      	ldr	r1, [r6, #72]	; 0x48
   14182:	e7c8      	b.n	14116 <cosem_getFSKMacCounters+0xbc>
    switch (e->index)
   14184:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   14188:	e77c      	b.n	14084 <cosem_getFSKMacCounters+0x2a>

0001418a <cosem_getSFSKMacSynchronizationTimeouts>:
#endif //DLMS_IGNORE_SFSK_MAC_COUNTERS

#ifndef DLMS_IGNORE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS
int cosem_getSFSKMacSynchronizationTimeouts(
    gxValueEventArg* e)
{
   1418a:	4603      	mov	r3, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   1418c:	6880      	ldr	r0, [r0, #8]
    gxSFSKMacSynchronizationTimeouts* object = (gxSFSKMacSynchronizationTimeouts*)e->target;
   1418e:	695a      	ldr	r2, [r3, #20]
    switch (e->index)
   14190:	7e1b      	ldrb	r3, [r3, #24]
   14192:	3b02      	subs	r3, #2
   14194:	2b03      	cmp	r3, #3
   14196:	d80c      	bhi.n	141b2 <cosem_getSFSKMacSynchronizationTimeouts+0x28>
   14198:	e8df f003 	tbb	[pc, r3]
   1419c:	09070502 	.word	0x09070502
    {
    case 2:
        ret = cosem_setUInt16(data, object->searchInitiatorTimeout);
   141a0:	8a11      	ldrh	r1, [r2, #16]
        break;
    case 4:
        ret = cosem_setUInt16(data, object->timeOutNotAddressed);
        break;
    case 5:
        ret = cosem_setUInt16(data, object->timeOutFrameNotOK);
   141a2:	f7fa bac7 	b.w	e734 <cosem_setUInt16>
        ret = cosem_setUInt16(data, object->synchronizationConfirmationTimeout);
   141a6:	8a51      	ldrh	r1, [r2, #18]
   141a8:	e7fb      	b.n	141a2 <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        ret = cosem_setUInt16(data, object->timeOutNotAddressed);
   141aa:	8a91      	ldrh	r1, [r2, #20]
   141ac:	e7f9      	b.n	141a2 <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        ret = cosem_setUInt16(data, object->timeOutFrameNotOK);
   141ae:	8ad1      	ldrh	r1, [r2, #22]
   141b0:	e7f7      	b.n	141a2 <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   141b2:	f44f 7081 	mov.w	r0, #258	; 0x102
   141b6:	4770      	bx	lr

000141b8 <cosem_getSFSKPhyMacSetUp>:
#endif //DLMS_IGNORE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS
#ifndef DLMS_IGNORE_SFSK_PHY_MAC_SETUP
int cosem_getSFSKPhyMacSetUp(
    gxValueEventArg* e)
{
   141b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   141bc:	7e03      	ldrb	r3, [r0, #24]
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   141be:	6885      	ldr	r5, [r0, #8]
    gxSFSKPhyMacSetUp* object = (gxSFSKPhyMacSetUp*)e->target;
   141c0:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   141c2:	3b02      	subs	r3, #2
   141c4:	2b0d      	cmp	r3, #13
   141c6:	d866      	bhi.n	14296 <cosem_getSFSKPhyMacSetUp+0xde>
   141c8:	e8df f003 	tbb	[pc, r3]
   141cc:	130e0c07 	.word	0x130e0c07
   141d0:	2e291715 	.word	0x2e291715
   141d4:	5d5a5451 	.word	0x5d5a5451
   141d8:	625f      	.short	0x625f
    {
    case 2:
        ret = cosem_setEnum(data, object->initiatorElectricalPhase);
   141da:	7c31      	ldrb	r1, [r6, #16]
        break;
    case 14:
        ret = cosem_setBoolean(data, object->synchronizationLocked);
        break;
    case 15:
        ret = cosem_setEnum(data, object->transmissionSpeed);
   141dc:	4628      	mov	r0, r5
   141de:	f7fa fb12 	bl	e806 <cosem_setEnum>
   141e2:	e01a      	b.n	1421a <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setEnum(data, object->deltaElectricalPhase);
   141e4:	7c71      	ldrb	r1, [r6, #17]
   141e6:	e7f9      	b.n	141dc <cosem_getSFSKPhyMacSetUp+0x24>
        ret = cosem_setUInt8(data, object->maxReceivingGain);
   141e8:	7cb1      	ldrb	r1, [r6, #18]
        ret = cosem_setUInt8(data, object->minDeltaCredit);
   141ea:	4628      	mov	r0, r5
   141ec:	f7fa fa94 	bl	e718 <cosem_setUInt8>
   141f0:	e013      	b.n	1421a <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setUInt8(data, object->maxTransmittingGain);
   141f2:	7cf1      	ldrb	r1, [r6, #19]
   141f4:	e7f9      	b.n	141ea <cosem_getSFSKPhyMacSetUp+0x32>
        ret = cosem_setUInt8(data, object->searchInitiatorThreshold);
   141f6:	7d31      	ldrb	r1, [r6, #20]
   141f8:	e7f7      	b.n	141ea <cosem_getSFSKPhyMacSetUp+0x32>
        if ((ret = cosem_setStructure(data, 2)) == 0 &&
   141fa:	2102      	movs	r1, #2
   141fc:	4628      	mov	r0, r5
   141fe:	f7fa fae6 	bl	e7ce <cosem_setStructure>
   14202:	4604      	mov	r4, r0
   14204:	b9b0      	cbnz	r0, 14234 <cosem_getSFSKPhyMacSetUp+0x7c>
            (ret = cosem_setUInt32(data, object->markFrequency)) == 0 &&
   14206:	69b1      	ldr	r1, [r6, #24]
   14208:	4628      	mov	r0, r5
   1420a:	f7fa faa1 	bl	e750 <cosem_setUInt32>
        if ((ret = cosem_setStructure(data, 2)) == 0 &&
   1420e:	4604      	mov	r4, r0
   14210:	b980      	cbnz	r0, 14234 <cosem_getSFSKPhyMacSetUp+0x7c>
            (ret = cosem_setUInt32(data, object->spaceFrequency)) == 0)
   14212:	69f1      	ldr	r1, [r6, #28]
   14214:	4628      	mov	r0, r5
   14216:	f7fa fa9b 	bl	e750 <cosem_setUInt32>
        ret = cosem_setEnum(data, object->transmissionSpeed);
   1421a:	4604      	mov	r4, r0
        break;
   1421c:	e00a      	b.n	14234 <cosem_getSFSKPhyMacSetUp+0x7c>
        ret = cosem_setUInt16(data, object->macAddress);
   1421e:	8c31      	ldrh	r1, [r6, #32]
        ret = cosem_setUInt16(data, object->initiatorMacAddress);
   14220:	4628      	mov	r0, r5
   14222:	f7fa fa87 	bl	e734 <cosem_setUInt16>
   14226:	e7f8      	b.n	1421a <cosem_getSFSKPhyMacSetUp+0x62>
        if ((ret = cosem_setArray(data, object->macGroupAddresses.size)) == 0)
   14228:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   1422a:	4628      	mov	r0, r5
   1422c:	f7fa fadd 	bl	e7ea <cosem_setArray>
   14230:	4604      	mov	r4, r0
   14232:	b1c0      	cbz	r0, 14266 <cosem_getSFSKPhyMacSetUp+0xae>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   14234:	4620      	mov	r0, r4
   14236:	b002      	add	sp, #8
   14238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->macGroupAddresses, pos, (void**)&it)) != 0)
   1423c:	aa01      	add	r2, sp, #4
   1423e:	4638      	mov	r0, r7
   14240:	f7fc ff63 	bl	1110a <arr_getByIndex>
   14244:	2800      	cmp	r0, #0
   14246:	d1e8      	bne.n	1421a <cosem_getSFSKPhyMacSetUp+0x62>
                if ((ret = cosem_setUInt16(data, *it)) != 0)
   14248:	9b01      	ldr	r3, [sp, #4]
   1424a:	4628      	mov	r0, r5
   1424c:	8819      	ldrh	r1, [r3, #0]
   1424e:	f7fa fa71 	bl	e734 <cosem_setUInt16>
   14252:	f108 0801 	add.w	r8, r8, #1
   14256:	2800      	cmp	r0, #0
   14258:	d1df      	bne.n	1421a <cosem_getSFSKPhyMacSetUp+0x62>
            for (pos = 0; pos != object->macGroupAddresses.size; ++pos)
   1425a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   1425c:	fa1f f188 	uxth.w	r1, r8
   14260:	428b      	cmp	r3, r1
   14262:	d1eb      	bne.n	1423c <cosem_getSFSKPhyMacSetUp+0x84>
   14264:	e7e6      	b.n	14234 <cosem_getSFSKPhyMacSetUp+0x7c>
   14266:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->macGroupAddresses, pos, (void**)&it)) != 0)
   14268:	f106 0724 	add.w	r7, r6, #36	; 0x24
   1426c:	e7f5      	b.n	1425a <cosem_getSFSKPhyMacSetUp+0xa2>
        ret = cosem_setEnum(data, object->repeater);
   1426e:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   14272:	e7b3      	b.n	141dc <cosem_getSFSKPhyMacSetUp+0x24>
        ret = cosem_setBoolean(data, object->repeaterStatus);
   14274:	f896 1031 	ldrb.w	r1, [r6, #49]	; 0x31
        ret = cosem_setBoolean(data, object->synchronizationLocked);
   14278:	4628      	mov	r0, r5
   1427a:	f7fa fad2 	bl	e822 <cosem_setBoolean>
   1427e:	e7cc      	b.n	1421a <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setUInt8(data, object->minDeltaCredit);
   14280:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   14284:	e7b1      	b.n	141ea <cosem_getSFSKPhyMacSetUp+0x32>
        ret = cosem_setUInt16(data, object->initiatorMacAddress);
   14286:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
   14288:	e7ca      	b.n	14220 <cosem_getSFSKPhyMacSetUp+0x68>
        ret = cosem_setBoolean(data, object->synchronizationLocked);
   1428a:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
   1428e:	e7f3      	b.n	14278 <cosem_getSFSKPhyMacSetUp+0xc0>
        ret = cosem_setEnum(data, object->transmissionSpeed);
   14290:	f896 1037 	ldrb.w	r1, [r6, #55]	; 0x37
   14294:	e7a2      	b.n	141dc <cosem_getSFSKPhyMacSetUp+0x24>
    switch (e->index)
   14296:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1429a:	e7cb      	b.n	14234 <cosem_getSFSKPhyMacSetUp+0x7c>

0001429c <cosem_getSFSKReportingSystemList>:
#endif //DLMS_IGNORE_SFSK_PHY_MAC_SETUP
#ifndef DLMS_IGNORE_SFSK_REPORTING_SYSTEM_LIST
int cosem_getSFSKReportingSystemList(
    gxValueEventArg* e)
{
   1429c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = DLMS_ERROR_CODE_OK;
    gxByteBuffer* data = e->value.byteArr;
    gxSFSKReportingSystemList* object = (gxSFSKReportingSystemList*)e->target;
    if (e->index == 2)
   142a0:	7e03      	ldrb	r3, [r0, #24]
   142a2:	2b02      	cmp	r3, #2
   142a4:	d122      	bne.n	142ec <cosem_getSFSKReportingSystemList+0x50>
    gxSFSKReportingSystemList* object = (gxSFSKReportingSystemList*)e->target;
   142a6:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   142a8:	6886      	ldr	r6, [r0, #8]
    {
        uint16_t pos;
        gxByteBuffer* it;
        if ((ret = cosem_setArray(data, object->reportingSystemList.size)) == 0)
   142aa:	8ae9      	ldrh	r1, [r5, #22]
   142ac:	4630      	mov	r0, r6
   142ae:	f7fa fa9c 	bl	e7ea <cosem_setArray>
   142b2:	4604      	mov	r4, r0
   142b4:	b118      	cbz	r0, 142be <cosem_getSFSKReportingSystemList+0x22>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   142b6:	4620      	mov	r0, r4
   142b8:	b002      	add	sp, #8
   142ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142be:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->reportingSystemList, pos, (void**)&it)) != 0)
   142c0:	f105 0710 	add.w	r7, r5, #16
            for (pos = 0; pos != object->reportingSystemList.size; ++pos)
   142c4:	8aeb      	ldrh	r3, [r5, #22]
   142c6:	fa1f f188 	uxth.w	r1, r8
   142ca:	428b      	cmp	r3, r1
   142cc:	d0f3      	beq.n	142b6 <cosem_getSFSKReportingSystemList+0x1a>
                if ((ret = arr_getByIndex(&object->reportingSystemList, pos, (void**)&it)) != 0)
   142ce:	aa01      	add	r2, sp, #4
   142d0:	4638      	mov	r0, r7
   142d2:	f7fc ff1a 	bl	1110a <arr_getByIndex>
   142d6:	b938      	cbnz	r0, 142e8 <cosem_getSFSKReportingSystemList+0x4c>
                if ((ret = cosem_setOctetString(data, it)) != 0)
   142d8:	9901      	ldr	r1, [sp, #4]
   142da:	4630      	mov	r0, r6
   142dc:	f7fa f9ae 	bl	e63c <cosem_setOctetString>
   142e0:	f108 0801 	add.w	r8, r8, #1
   142e4:	2800      	cmp	r0, #0
   142e6:	d0ed      	beq.n	142c4 <cosem_getSFSKReportingSystemList+0x28>
   142e8:	4604      	mov	r4, r0
   142ea:	e7e4      	b.n	142b6 <cosem_getSFSKReportingSystemList+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   142ec:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   142f0:	e7e1      	b.n	142b6 <cosem_getSFSKReportingSystemList+0x1a>

000142f2 <cosem_getValue>:
{
   142f2:	b538      	push	{r3, r4, r5, lr}
   142f4:	4605      	mov	r5, r0
    if ((ret = cosem_getByteBuffer(e)) != 0)
   142f6:	4608      	mov	r0, r1
{
   142f8:	460c      	mov	r4, r1
    if ((ret = cosem_getByteBuffer(e)) != 0)
   142fa:	f7fc ff50 	bl	1119e <cosem_getByteBuffer>
   142fe:	2800      	cmp	r0, #0
   14300:	f040 8095 	bne.w	1442e <cosem_getValue+0x13c>
    if (e->index == 1)
   14304:	7e23      	ldrb	r3, [r4, #24]
   14306:	2b01      	cmp	r3, #1
   14308:	d115      	bne.n	14336 <cosem_getValue+0x44>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1430a:	68a0      	ldr	r0, [r4, #8]
   1430c:	2109      	movs	r1, #9
   1430e:	f7f9 fb36 	bl	d97e <bb_setUInt8>
   14312:	2800      	cmp	r0, #0
   14314:	f040 808b 	bne.w	1442e <cosem_getValue+0x13c>
            (ret = bb_setUInt8(e->value.byteArr, 6)) != 0 ||
   14318:	68a0      	ldr	r0, [r4, #8]
   1431a:	2106      	movs	r1, #6
   1431c:	f7f9 fb2f 	bl	d97e <bb_setUInt8>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   14320:	2800      	cmp	r0, #0
   14322:	f040 8084 	bne.w	1442e <cosem_getValue+0x13c>
            (ret = bb_set(e->value.byteArr, e->target->logicalName, 6)) != 0)
   14326:	6961      	ldr	r1, [r4, #20]
   14328:	68a0      	ldr	r0, [r4, #8]
   1432a:	2206      	movs	r2, #6
}
   1432c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = bb_set(e->value.byteArr, e->target->logicalName, 6)) != 0)
   14330:	4411      	add	r1, r2
   14332:	f7f9 bc0a 	b.w	db4a <bb_set>
    switch (e->target->objectType)
   14336:	6963      	ldr	r3, [r4, #20]
   14338:	881b      	ldrh	r3, [r3, #0]
   1433a:	3b01      	subs	r3, #1
   1433c:	2b72      	cmp	r3, #114	; 0x72
   1433e:	d874      	bhi.n	1442a <cosem_getValue+0x138>
   14340:	e8df f013 	tbh	[pc, r3, lsl #1]
   14344:	00730076 	.word	0x00730076
   14348:	00af007b 	.word	0x00af007b
   1434c:	00fc00a5 	.word	0x00fc00a5
   14350:	008000f6 	.word	0x008000f6
   14354:	0116011b 	.word	0x0116011b
   14358:	00950120 	.word	0x00950120
   1435c:	00730073 	.word	0x00730073
   14360:	0073008f 	.word	0x0073008f
   14364:	00d70111 	.word	0x00d70111
   14368:	008a00c3 	.word	0x008a00c3
   1436c:	00850102 	.word	0x00850102
   14370:	00c800be 	.word	0x00c800be
   14374:	012a00d2 	.word	0x012a00d2
   14378:	009b00eb 	.word	0x009b00eb
   1437c:	01ad00a0 	.word	0x01ad00a0
   14380:	00730073 	.word	0x00730073
   14384:	00730073 	.word	0x00730073
   14388:	00730073 	.word	0x00730073
   1438c:	00730073 	.word	0x00730073
   14390:	01340073 	.word	0x01340073
   14394:	00cd0125 	.word	0x00cd0125
   14398:	00f100aa 	.word	0x00f100aa
   1439c:	007300b4 	.word	0x007300b4
   143a0:	0073014d 	.word	0x0073014d
   143a4:	01a30073 	.word	0x01a30073
   143a8:	019e0194 	.word	0x019e0194
   143ac:	00730199 	.word	0x00730199
   143b0:	01a80073 	.word	0x01a80073
   143b4:	018a0185 	.word	0x018a0185
   143b8:	0073018f 	.word	0x0073018f
   143bc:	01520107 	.word	0x01520107
   143c0:	00b901ad 	.word	0x00b901ad
   143c4:	00730158 	.word	0x00730158
   143c8:	01800073 	.word	0x01800073
   143cc:	00dc0073 	.word	0x00dc0073
   143d0:	00e600e1 	.word	0x00e600e1
   143d4:	012f0073 	.word	0x012f0073
   143d8:	00730073 	.word	0x00730073
   143dc:	00730073 	.word	0x00730073
   143e0:	015d0073 	.word	0x015d0073
   143e4:	01670162 	.word	0x01670162
   143e8:	0171016c 	.word	0x0171016c
   143ec:	017b0176 	.word	0x017b0176
   143f0:	00730073 	.word	0x00730073
   143f4:	00730073 	.word	0x00730073
   143f8:	00730073 	.word	0x00730073
   143fc:	00730073 	.word	0x00730073
   14400:	00730073 	.word	0x00730073
   14404:	00730073 	.word	0x00730073
   14408:	00730073 	.word	0x00730073
   1440c:	01ad01ad 	.word	0x01ad01ad
   14410:	010c01ad 	.word	0x010c01ad
   14414:	00730073 	.word	0x00730073
   14418:	00730073 	.word	0x00730073
   1441c:	00730073 	.word	0x00730073
   14420:	013e0139 	.word	0x013e0139
   14424:	00730143 	.word	0x00730143
   14428:	0148      	.short	0x0148
   1442a:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   1442e:	bd38      	pop	{r3, r4, r5, pc}
        ret = cosem_getData(e);
   14430:	4620      	mov	r0, r4
}
   14432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getData(e);
   14436:	f7fc beca 	b.w	111ce <cosem_getData>
        ret = cosem_getRegister(e);
   1443a:	4620      	mov	r0, r4
}
   1443c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegister(e);
   14440:	f7fc bed5 	b.w	111ee <cosem_getRegister>
        ret = cosem_getClock(e);
   14444:	4620      	mov	r0, r4
}
   14446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getClock(e);
   1444a:	f7fc bf1a 	b.w	11282 <cosem_getClock>
        ret = cosem_getActionSchedule(e);
   1444e:	4620      	mov	r0, r4
}
   14450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getActionSchedule(e);
   14454:	f7fc bf4d 	b.w	112f2 <cosem_getActionSchedule>
        ret = cosem_getActivityCalendar(e);
   14458:	4620      	mov	r0, r4
}
   1445a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getActivityCalendar(e);
   1445e:	f7fd b829 	b.w	114b4 <cosem_getActivityCalendar>
        ret = cosem_getAssociationLogicalName(settings, e);
   14462:	4621      	mov	r1, r4
   14464:	4628      	mov	r0, r5
}
   14466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAssociationLogicalName(settings, e);
   1446a:	f7fd b90f 	b.w	1168c <cosem_getAssociationLogicalName>
        ret = cosem_getAssociationShortName(settings, e);
   1446e:	4621      	mov	r1, r4
   14470:	4628      	mov	r0, r5
}
   14472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAssociationShortName(settings, e);
   14476:	f7fd bafe 	b.w	11a76 <cosem_getAssociationShortName>
        ret = cosem_getAutoAnswer(e);
   1447a:	4620      	mov	r0, r4
}
   1447c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAutoAnswer(e);
   14480:	f7fd bb39 	b.w	11af6 <cosem_getAutoAnswer>
        ret = cosem_getAutoConnect(e);
   14484:	4620      	mov	r0, r4
}
   14486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAutoConnect(e);
   1448a:	f7fd bb91 	b.w	11bb0 <cosem_getAutoConnect>
        ret = cosem_getDemandRegister(e);
   1448e:	4620      	mov	r0, r4
}
   14490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getDemandRegister(e);
   14494:	f7fd bbf8 	b.w	11c88 <cosem_getDemandRegister>
        ret = cosem_getMacAddressSetup(e);
   14498:	4620      	mov	r0, r4
}
   1449a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMacAddressSetup(e);
   1449e:	f7fd bc40 	b.w	11d22 <cosem_getMacAddressSetup>
        ret = cosem_getExtendedRegister(e);
   144a2:	4620      	mov	r0, r4
}
   144a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getExtendedRegister(e);
   144a8:	f7fd bc46 	b.w	11d38 <cosem_getExtendedRegister>
        ret = cosem_getGprsSetup(e);
   144ac:	4620      	mov	r0, r4
}
   144ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getGprsSetup(e);
   144b2:	f7fd bc9e 	b.w	11df2 <cosem_getGprsSetup>
        ret = cosem_getSecuritySetup(e);
   144b6:	4620      	mov	r0, r4
}
   144b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSecuritySetup(e);
   144bc:	f7fd bcc5 	b.w	11e4a <cosem_getSecuritySetup>
        ret = cosem_getIecHdlcSetup(e);
   144c0:	4620      	mov	r0, r4
}
   144c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecHdlcSetup(e);
   144c6:	f7fd bd42 	b.w	11f4e <cosem_getIecHdlcSetup>
        ret = cosem_getIecLocalPortSetup(e);
   144ca:	4620      	mov	r0, r4
}
   144cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecLocalPortSetup(e);
   144d0:	f7fd bd61 	b.w	11f96 <cosem_getIecLocalPortSetup>
        ret = cosem_getIecTwistedPairSetup(e);
   144d4:	4620      	mov	r0, r4
}
   144d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecTwistedPairSetup(e);
   144da:	f7fd bd89 	b.w	11ff0 <cosem_getIecTwistedPairSetup>
        ret = cosem_getIP4Setup(e);
   144de:	4620      	mov	r0, r4
}
   144e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIP4Setup(e);
   144e4:	f7ee bfec 	b.w	34c0 <cosem_getIP4Setup>
        ret = cosem_getMbusSlavePortSetup(e);
   144e8:	4620      	mov	r0, r4
}
   144ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMbusSlavePortSetup(e);
   144ee:	f7fd bdd3 	b.w	12098 <cosem_getMbusSlavePortSetup>
        ret = cosem_getImageTransfer(e);
   144f2:	4620      	mov	r0, r4
}
   144f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getImageTransfer(e);
   144f8:	f7fd bde7 	b.w	120ca <cosem_getImageTransfer>
        ret = cosem_getDisconnectControl(e);
   144fc:	4620      	mov	r0, r4
}
   144fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getDisconnectControl(e);
   14502:	f7fe b9bf 	b.w	12884 <cosem_getDisconnectControl>
        ret = cosem_getLimiter(e);
   14506:	4620      	mov	r0, r4
}
   14508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getLimiter(e);
   1450c:	f7ef b892 	b.w	3634 <cosem_getLimiter>
        ret = cosem_getmMbusClient(e);
   14510:	4620      	mov	r0, r4
}
   14512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getmMbusClient(e);
   14516:	f7ef b9ff 	b.w	3918 <cosem_getmMbusClient>
        ret = cosem_getModemConfiguration(settings, e);
   1451a:	4621      	mov	r1, r4
   1451c:	4628      	mov	r0, r5
}
   1451e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getModemConfiguration(settings, e);
   14522:	f7ef bab9 	b.w	3a98 <cosem_getModemConfiguration>
        ret = cosem_getPppSetup(e);
   14526:	4620      	mov	r0, r4
}
   14528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPppSetup(e);
   1452c:	f7ef bc0c 	b.w	3d48 <cosem_getPppSetup>
        ret = cosem_getProfileGeneric(settings, e);
   14530:	4621      	mov	r1, r4
   14532:	4628      	mov	r0, r5
}
   14534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getProfileGeneric(settings, e);
   14538:	f7fe b8f1 	b.w	1271e <cosem_getProfileGeneric>
        ret = cosem_getRegisterActivation(settings, e);
   1453c:	4621      	mov	r1, r4
   1453e:	4628      	mov	r0, r5
}
   14540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterActivation(settings, e);
   14544:	f7fe b9c8 	b.w	128d8 <cosem_getRegisterActivation>
        ret = cosem_getRegisterMonitor(e);
   14548:	4620      	mov	r0, r4
}
   1454a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterMonitor(e);
   1454e:	f7fe baa3 	b.w	12a98 <cosem_getRegisterMonitor>
        ret = cosem_getRegisterTable(e);
   14552:	4620      	mov	r0, r4
}
   14554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterTable(e);
   14558:	f7fc be76 	b.w	11248 <cosem_getRegisterTable>
        ret = cosem_getZigbeeNetworkControl(e);
   1455c:	4620      	mov	r0, r4
}
   1455e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getZigbeeNetworkControl(e);
   14562:	f7fe be13 	b.w	1318c <cosem_getZigbeeNetworkControl>
        ret = cosem_getSapAssignment(e);
   14566:	4620      	mov	r0, r4
}
   14568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSapAssignment(e);
   1456c:	f7fe bb9b 	b.w	12ca6 <cosem_getSapAssignment>
        ret = cosem_getSchedule(e);
   14570:	4620      	mov	r0, r4
}
   14572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSchedule(e);
   14576:	f7fe bbed 	b.w	12d54 <cosem_getSchedule>
        ret = cosem_getScriptTable(e);
   1457a:	4620      	mov	r0, r4
}
   1457c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getScriptTable(e);
   14580:	f7fe bc72 	b.w	12e68 <cosem_getScriptTable>
        ret = cosem_getSpecialDaysTable(e);
   14584:	4620      	mov	r0, r4
}
   14586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSpecialDaysTable(e);
   1458a:	f7fe bcd7 	b.w	12f3c <cosem_getSpecialDaysTable>
        ret = cosem_getTcpUdpSetup(e);
   1458e:	4620      	mov	r0, r4
}
   14590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getTcpUdpSetup(e);
   14594:	f7fe bd0c 	b.w	12fb0 <cosem_getTcpUdpSetup>
        ret = cosem_getUtilityTables(e);
   14598:	4620      	mov	r0, r4
}
   1459a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getUtilityTables(e);
   1459e:	f7fe bd32 	b.w	13006 <cosem_getUtilityTables>
        ret = cosem_getMbusMasterPortSetup(e);
   145a2:	4620      	mov	r0, r4
}
   145a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMbusMasterPortSetup(e);
   145a8:	f7fe bd42 	b.w	13030 <cosem_getMbusMasterPortSetup>
        ret = cosem_getPushSetup(e);
   145ac:	4620      	mov	r0, r4
}
   145ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPushSetup(e);
   145b2:	f7fe bd48 	b.w	13046 <cosem_getPushSetup>
        ret = cosem_getAccount(e);
   145b6:	4620      	mov	r0, r4
}
   145b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAccount(e);
   145bc:	f7fe bfe3 	b.w	13586 <cosem_getAccount>
        ret = cosem_getCredit(e);
   145c0:	4620      	mov	r0, r4
}
   145c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCredit(e);
   145c6:	f7fe bfa4 	b.w	13512 <cosem_getCredit>
        ret = cosem_getCharge(e);
   145ca:	4620      	mov	r0, r4
}
   145cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCharge(e);
   145d0:	f7fe bee4 	b.w	1339c <cosem_getCharge>
        ret = cosem_getTokenGateway(e);
   145d4:	4620      	mov	r0, r4
}
   145d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getTokenGateway(e);
   145da:	f7fe bf2e 	b.w	1343a <cosem_getTokenGateway>
        ret = cosem_getGsmDiagnostic(e);
   145de:	4620      	mov	r0, r4
}
   145e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getGsmDiagnostic(e);
   145e4:	f7ff b92f 	b.w	13846 <cosem_getGsmDiagnostic>
        ret = cosem_getCompactData(settings, e);
   145e8:	4621      	mov	r1, r4
   145ea:	4628      	mov	r0, r5
}
   145ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCompactData(settings, e);
   145f0:	f7ff b901 	b.w	137f6 <cosem_getCompactData>
        ret = cosem_getParameterMonitor(e);
   145f4:	4620      	mov	r0, r4
}
   145f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getParameterMonitor(e);
   145fa:	f7ef bcb5 	b.w	3f68 <cosem_getParameterMonitor>
        ret = cosem_getLlcSscsSetup(e);
   145fe:	4620      	mov	r0, r4
}
   14600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getLlcSscsSetup(e);
   14604:	f7ff b9c4 	b.w	13990 <cosem_getLlcSscsSetup>
        ret = cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(e);
   14608:	4620      	mov	r0, r4
}
   1460a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(e);
   1460e:	f7ff b9ce 	b.w	139ae <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters>
        ret = cosem_getPrimeNbOfdmPlcMacSetup(e);
   14612:	4620      	mov	r0, r4
}
   14614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacSetup(e);
   14618:	f7ff b9df 	b.w	139da <cosem_getPrimeNbOfdmPlcMacSetup>
        ret = cosem_getPrimeNbOfdmPlcMacFunctionalParameters(e);
   1461c:	4620      	mov	r0, r4
}
   1461e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacFunctionalParameters(e);
   14622:	f7ff b9f8 	b.w	13a16 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters>
        ret = cosem_getPrimeNbOfdmPlcMacCounters(e);
   14626:	4620      	mov	r0, r4
}
   14628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacCounters(e);
   1462c:	f7ff ba31 	b.w	13a92 <cosem_getPrimeNbOfdmPlcMacCounters>
        ret = cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(e);
   14630:	4620      	mov	r0, r4
}
   14632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(e);
   14636:	f7ff bb96 	b.w	13d66 <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData>
        ret = cosem_getPrimeNbOfdmPlcApplicationsIdentification(e);
   1463a:	4620      	mov	r0, r4
}
   1463c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcApplicationsIdentification(e);
   14640:	f7ff bba7 	b.w	13d92 <cosem_getPrimeNbOfdmPlcApplicationsIdentification>
        ret = cosem_getArbitrator(e);
   14644:	4620      	mov	r0, r4
}
   14646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getArbitrator(e);
   1464a:	f7ff bbb8 	b.w	13dbe <cosem_getArbitrator>
        ret = cosem_getIec8802LlcType1Setup(e);
   1464e:	4620      	mov	r0, r4
}
   14650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType1Setup(e);
   14654:	f7ff bc9a 	b.w	13f8c <cosem_getIec8802LlcType1Setup>
        ret = cosem_getIec8802LlcType2Setup(e);
   14658:	4620      	mov	r0, r4
}
   1465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType2Setup(e);
   1465e:	f7ff bca0 	b.w	13fa2 <cosem_getIec8802LlcType2Setup>
        ret = cosem_getIec8802LlcType3Setup(e);
   14662:	4620      	mov	r0, r4
}
   14664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType3Setup(e);
   14668:	f7ff bcbd 	b.w	13fe6 <cosem_getIec8802LlcType3Setup>
        ret = cosem_getSFSKActiveInitiator(e);
   1466c:	4620      	mov	r0, r4
}
   1466e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKActiveInitiator(e);
   14672:	f7ff bcd3 	b.w	1401c <cosem_getSFSKActiveInitiator>
        ret = cosem_getFSKMacCounters(e);
   14676:	4620      	mov	r0, r4
}
   14678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getFSKMacCounters(e);
   1467c:	f7ff bced 	b.w	1405a <cosem_getFSKMacCounters>
        ret = cosem_getSFSKMacSynchronizationTimeouts(e);
   14680:	4620      	mov	r0, r4
}
   14682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKMacSynchronizationTimeouts(e);
   14686:	f7ff bd80 	b.w	1418a <cosem_getSFSKMacSynchronizationTimeouts>
        ret = cosem_getSFSKPhyMacSetUp(e);
   1468a:	4620      	mov	r0, r4
}
   1468c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKPhyMacSetUp(e);
   14690:	f7ff bd92 	b.w	141b8 <cosem_getSFSKPhyMacSetUp>
        ret = cosem_getSFSKReportingSystemList(e);
   14694:	4620      	mov	r0, r4
}
   14696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKReportingSystemList(e);
   1469a:	f7ff bdff 	b.w	1429c <cosem_getSFSKReportingSystemList>
        ret = DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   1469e:	20fe      	movs	r0, #254	; 0xfe
   146a0:	e6c5      	b.n	1442e <cosem_getValue+0x13c>

000146a2 <key_init>:

#include "../include/gxmem.h"
#include "../include/gxkey.h"
#ifndef DLMS_IGNORE_MALLOC
gxKey* key_init(void* key, void* value)
{
   146a2:	b538      	push	{r3, r4, r5, lr}
   146a4:	4605      	mov	r5, r0
    gxKey* obj = (gxKey*) gxmalloc(sizeof(gxKey));
   146a6:	2008      	movs	r0, #8
{
   146a8:	460c      	mov	r4, r1
    gxKey* obj = (gxKey*) gxmalloc(sizeof(gxKey));
   146aa:	f7f8 f8db 	bl	c864 <malloc>
    obj->key = key;
    obj->value = value;
   146ae:	e9c0 5400 	strd	r5, r4, [r0]
    return obj;
}
   146b2:	bd38      	pop	{r3, r4, r5, pc}

000146b4 <obj_clearProfileGenericBuffer>:
    return obj;
}
#endif //DLMS_IGNORE_MALLOC

int obj_clearProfileGenericBuffer(gxArray* buffer)
{
   146b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   146b6:	4604      	mov	r4, r0
    //Clear data rows.
#ifndef DLMS_IGNORE_MALLOC
    variantArray* va;
    int pos, ret;
    for (pos = 0; pos != buffer->size; ++pos)
   146b8:	2500      	movs	r5, #0
   146ba:	88e3      	ldrh	r3, [r4, #6]
   146bc:	42ab      	cmp	r3, r5
   146be:	d105      	bne.n	146cc <obj_clearProfileGenericBuffer+0x18>
            return ret;
        }
        va_clear(va);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(buffer);
   146c0:	4620      	mov	r0, r4
   146c2:	f7fc fcfa 	bl	110ba <arr_clear>
    return 0;
   146c6:	2000      	movs	r0, #0
}
   146c8:	b003      	add	sp, #12
   146ca:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&va);
   146cc:	aa01      	add	r2, sp, #4
   146ce:	b2a9      	uxth	r1, r5
   146d0:	4620      	mov	r0, r4
   146d2:	f7fc fd1a 	bl	1110a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   146d6:	2800      	cmp	r0, #0
   146d8:	d1f6      	bne.n	146c8 <obj_clearProfileGenericBuffer+0x14>
        va_clear(va);
   146da:	9801      	ldr	r0, [sp, #4]
   146dc:	f006 fede 	bl	1b49c <va_clear>
    for (pos = 0; pos != buffer->size; ++pos)
   146e0:	3501      	adds	r5, #1
   146e2:	e7ea      	b.n	146ba <obj_clearProfileGenericBuffer+0x6>

000146e4 <obj_clearPushObjectList>:
#endif //DLMS_IGNORE_PROFILE_GENERIC

#if !(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_IGNORE_COMPACT_DATA) && defined(DLMS_IGNORE_PUSH_SETUP))
int obj_clearPushObjectList(gxArray* buffer)
{
   146e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   146e6:	4605      	mov	r5, r0
    int ret = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    int pos;
    gxKey* kv;
    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != buffer->size; ++pos)
   146e8:	2600      	movs	r6, #0
   146ea:	88eb      	ldrh	r3, [r5, #6]
   146ec:	42b3      	cmp	r3, r6
   146ee:	d106      	bne.n	146fe <obj_clearPushObjectList+0x1a>
   146f0:	2400      	movs	r4, #0
            break;
        }
        gxfree(kv->value);
    }
#endif // !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    arr_clear(buffer);
   146f2:	4628      	mov	r0, r5
   146f4:	f7fc fce1 	bl	110ba <arr_clear>
    return ret;
}
   146f8:	4620      	mov	r0, r4
   146fa:	b002      	add	sp, #8
   146fc:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&kv);
   146fe:	aa01      	add	r2, sp, #4
   14700:	b2b1      	uxth	r1, r6
   14702:	4628      	mov	r0, r5
   14704:	f7fc fd01 	bl	1110a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14708:	4604      	mov	r4, r0
   1470a:	2800      	cmp	r0, #0
   1470c:	d1f1      	bne.n	146f2 <obj_clearPushObjectList+0xe>
        gxfree(kv->value);
   1470e:	9b01      	ldr	r3, [sp, #4]
   14710:	6858      	ldr	r0, [r3, #4]
   14712:	f7f8 f8af 	bl	c874 <free>
    for (pos = 0; pos != buffer->size; ++pos)
   14716:	3601      	adds	r6, #1
   14718:	e7e7      	b.n	146ea <obj_clearPushObjectList+0x6>

0001471a <obj_clearCreditChargeConfigurations>:
#endif //!(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_OBJECT_TYPE_PUSH_SETUP) && defined(DLMS_IGNORE_PUSH_SETUP))

#ifndef DLMS_IGNORE_ACCOUNT

int obj_clearCreditChargeConfigurations(gxArray* list)
{
   1471a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1471c:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    gxCreditChargeConfiguration* it;
    int pos;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   1471e:	2600      	movs	r6, #0
        {
            break;
        }
        memset(it->creditReference, 0, sizeof(it->creditReference));
        memset(it->chargeReference, 0, sizeof(it->creditReference));
        it->collectionConfiguration = DLMS_CREDIT_COLLECTION_CONFIGURATION_DISCONNECTED;
   14720:	2701      	movs	r7, #1
    for (pos = 0; pos != list->size; ++pos)
   14722:	88eb      	ldrh	r3, [r5, #6]
   14724:	42b3      	cmp	r3, r6
   14726:	d106      	bne.n	14736 <obj_clearCreditChargeConfigurations+0x1c>
   14728:	2400      	movs	r4, #0
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   1472a:	4628      	mov	r0, r5
   1472c:	f7fc fcc5 	bl	110ba <arr_clear>
    return ret;
}
   14730:	4620      	mov	r0, r4
   14732:	b003      	add	sp, #12
   14734:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14736:	aa01      	add	r2, sp, #4
   14738:	b2b1      	uxth	r1, r6
   1473a:	4628      	mov	r0, r5
   1473c:	f7fc fce5 	bl	1110a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14740:	4604      	mov	r4, r0
   14742:	2800      	cmp	r0, #0
   14744:	d1f1      	bne.n	1472a <obj_clearCreditChargeConfigurations+0x10>
   14746:	9b01      	ldr	r3, [sp, #4]
   14748:	6018      	str	r0, [r3, #0]
   1474a:	8098      	strh	r0, [r3, #4]
        memset(it->chargeReference, 0, sizeof(it->creditReference));
   1474c:	9b01      	ldr	r3, [sp, #4]
    for (pos = 0; pos != list->size; ++pos)
   1474e:	3601      	adds	r6, #1
   14750:	f8c3 0006 	str.w	r0, [r3, #6]
   14754:	8158      	strh	r0, [r3, #10]
        it->collectionConfiguration = DLMS_CREDIT_COLLECTION_CONFIGURATION_DISCONNECTED;
   14756:	731f      	strb	r7, [r3, #12]
    for (pos = 0; pos != list->size; ++pos)
   14758:	e7e3      	b.n	14722 <obj_clearCreditChargeConfigurations+0x8>

0001475a <obj_clearTokenGatewayConfigurations>:

int obj_clearTokenGatewayConfigurations(gxArray* list)
{
   1475a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1475c:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    gxTokenGatewayConfiguration* it;
    int pos;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   1475e:	2600      	movs	r6, #0
   14760:	88eb      	ldrh	r3, [r5, #6]
   14762:	42b3      	cmp	r3, r6
   14764:	d106      	bne.n	14774 <obj_clearTokenGatewayConfigurations+0x1a>
   14766:	2400      	movs	r4, #0
            break;
        }
        memset(it->creditReference, 0, 6);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14768:	4628      	mov	r0, r5
   1476a:	f7fc fca6 	bl	110ba <arr_clear>
    return ret;
}
   1476e:	4620      	mov	r0, r4
   14770:	b002      	add	sp, #8
   14772:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14774:	aa01      	add	r2, sp, #4
   14776:	b2b1      	uxth	r1, r6
   14778:	4628      	mov	r0, r5
   1477a:	f7fc fcc6 	bl	1110a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1477e:	4604      	mov	r4, r0
   14780:	2800      	cmp	r0, #0
   14782:	d1f1      	bne.n	14768 <obj_clearTokenGatewayConfigurations+0xe>
   14784:	9b01      	ldr	r3, [sp, #4]
    for (pos = 0; pos != list->size; ++pos)
   14786:	3601      	adds	r6, #1
   14788:	6018      	str	r0, [r3, #0]
   1478a:	8098      	strh	r0, [r3, #4]
   1478c:	e7e8      	b.n	14760 <obj_clearTokenGatewayConfigurations+0x6>

0001478e <obj_clearSapList>:
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
int obj_clearSapList(gxArray* buffer)
{
   1478e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14790:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxSapItem* it;
    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != buffer->size; ++pos)
   14792:	2600      	movs	r6, #0
   14794:	88eb      	ldrh	r3, [r5, #6]
   14796:	42b3      	cmp	r3, r6
   14798:	d106      	bne.n	147a8 <obj_clearSapList+0x1a>
   1479a:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&it->name);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(buffer);
   1479c:	4628      	mov	r0, r5
   1479e:	f7fc fc8c 	bl	110ba <arr_clear>
    return ret;
}
   147a2:	4620      	mov	r0, r4
   147a4:	b002      	add	sp, #8
   147a6:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&it);
   147a8:	aa01      	add	r2, sp, #4
   147aa:	b2b1      	uxth	r1, r6
   147ac:	4628      	mov	r0, r5
   147ae:	f7fc fcac 	bl	1110a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   147b2:	4604      	mov	r4, r0
   147b4:	2800      	cmp	r0, #0
   147b6:	d1f1      	bne.n	1479c <obj_clearSapList+0xe>
        bb_clear(&it->name);
   147b8:	9801      	ldr	r0, [sp, #4]
   147ba:	3004      	adds	r0, #4
   147bc:	f7f9 fa39 	bl	dc32 <bb_clear>
    for (pos = 0; pos != buffer->size; ++pos)
   147c0:	3601      	adds	r6, #1
   147c2:	e7e7      	b.n	14794 <obj_clearSapList+0x6>

000147c4 <obj_clearProfileGenericCaptureObjects>:
   147c4:	f7ff bf8e 	b.w	146e4 <obj_clearPushObjectList>

000147c8 <obj_clearSeasonProfile>:
}
#endif //!(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_IGNORE_COMPACT_DATA))

#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int obj_clearSeasonProfile(gxArray* list)
{
   147c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   147ca:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxSeasonProfile* sp;
    for (pos = 0; pos != list->size; ++pos)
   147cc:	2600      	movs	r6, #0
   147ce:	88eb      	ldrh	r3, [r5, #6]
   147d0:	42b3      	cmp	r3, r6
   147d2:	d106      	bne.n	147e2 <obj_clearSeasonProfile+0x1a>
   147d4:	2400      	movs	r4, #0
        }
        bb_clear(&sp->name);
        bb_clear(&sp->weekName);
    };
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   147d6:	4628      	mov	r0, r5
   147d8:	f7fc fc6f 	bl	110ba <arr_clear>
    return ret;
}
   147dc:	4620      	mov	r0, r4
   147de:	b002      	add	sp, #8
   147e0:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&sp);
   147e2:	aa01      	add	r2, sp, #4
   147e4:	b2b1      	uxth	r1, r6
   147e6:	4628      	mov	r0, r5
   147e8:	f7fc fc8f 	bl	1110a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   147ec:	4604      	mov	r4, r0
   147ee:	2800      	cmp	r0, #0
   147f0:	d1f1      	bne.n	147d6 <obj_clearSeasonProfile+0xe>
        bb_clear(&sp->name);
   147f2:	9801      	ldr	r0, [sp, #4]
   147f4:	f7f9 fa1d 	bl	dc32 <bb_clear>
        bb_clear(&sp->weekName);
   147f8:	9801      	ldr	r0, [sp, #4]
   147fa:	3018      	adds	r0, #24
   147fc:	f7f9 fa19 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   14800:	3601      	adds	r6, #1
   14802:	e7e4      	b.n	147ce <obj_clearSeasonProfile+0x6>

00014804 <obj_clearWeekProfileTable>:

int obj_clearWeekProfileTable(gxArray* list)
{
   14804:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14806:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxWeekProfile* wp;
    for (pos = 0; pos != list->size; ++pos)
   14808:	2600      	movs	r6, #0
   1480a:	88eb      	ldrh	r3, [r5, #6]
   1480c:	42b3      	cmp	r3, r6
   1480e:	d106      	bne.n	1481e <obj_clearWeekProfileTable+0x1a>
   14810:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&wp->name);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14812:	4628      	mov	r0, r5
   14814:	f7fc fc51 	bl	110ba <arr_clear>
    return ret;
}
   14818:	4620      	mov	r0, r4
   1481a:	b002      	add	sp, #8
   1481c:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&wp);
   1481e:	aa01      	add	r2, sp, #4
   14820:	b2b1      	uxth	r1, r6
   14822:	4628      	mov	r0, r5
   14824:	f7fc fc71 	bl	1110a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   14828:	4604      	mov	r4, r0
   1482a:	2800      	cmp	r0, #0
   1482c:	d1f1      	bne.n	14812 <obj_clearWeekProfileTable+0xe>
        bb_clear(&wp->name);
   1482e:	9801      	ldr	r0, [sp, #4]
   14830:	f7f9 f9ff 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   14834:	3601      	adds	r6, #1
   14836:	e7e8      	b.n	1480a <obj_clearWeekProfileTable+0x6>

00014838 <obj_clearDayProfileTable>:

int obj_clearDayProfileTable(gxArray* list)
{
   14838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos, pos2;
    gxDayProfile* it;
    gxDayProfileAction* dp;
    for (pos = 0; pos != list->size; ++pos)
   1483a:	2600      	movs	r6, #0
{
   1483c:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
   1483e:	4634      	mov	r4, r6
    for (pos = 0; pos != list->size; ++pos)
   14840:	88eb      	ldrh	r3, [r5, #6]
   14842:	42b3      	cmp	r3, r6
   14844:	d105      	bne.n	14852 <obj_clearDayProfileTable+0x1a>
            }
        }
        arr_clear(&it->daySchedules);
    };
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14846:	4628      	mov	r0, r5
   14848:	f7fc fc37 	bl	110ba <arr_clear>
    return ret;
}
   1484c:	4620      	mov	r0, r4
   1484e:	b003      	add	sp, #12
   14850:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != DLMS_ERROR_CODE_OK)
   14852:	466a      	mov	r2, sp
   14854:	b2b1      	uxth	r1, r6
   14856:	4628      	mov	r0, r5
   14858:	f7fc fc57 	bl	1110a <arr_getByIndex>
   1485c:	4604      	mov	r4, r0
   1485e:	2800      	cmp	r0, #0
   14860:	d1f1      	bne.n	14846 <obj_clearDayProfileTable+0xe>
        for (pos2 = 0; pos2 != it->daySchedules.size; ++pos2)
   14862:	4607      	mov	r7, r0
   14864:	9b00      	ldr	r3, [sp, #0]
   14866:	1d18      	adds	r0, r3, #4
   14868:	895b      	ldrh	r3, [r3, #10]
   1486a:	42bb      	cmp	r3, r7
   1486c:	d106      	bne.n	1487c <obj_clearDayProfileTable+0x44>
   1486e:	2400      	movs	r4, #0
        arr_clear(&it->daySchedules);
   14870:	9800      	ldr	r0, [sp, #0]
   14872:	3004      	adds	r0, #4
   14874:	f7fc fc21 	bl	110ba <arr_clear>
    for (pos = 0; pos != list->size; ++pos)
   14878:	3601      	adds	r6, #1
   1487a:	e7e1      	b.n	14840 <obj_clearDayProfileTable+0x8>
            if ((ret = arr_getByIndex(&it->daySchedules, pos2, (void**)&dp)) != DLMS_ERROR_CODE_OK)
   1487c:	aa01      	add	r2, sp, #4
   1487e:	b2b9      	uxth	r1, r7
   14880:	f7fc fc43 	bl	1110a <arr_getByIndex>
   14884:	4604      	mov	r4, r0
   14886:	2800      	cmp	r0, #0
   14888:	d1f2      	bne.n	14870 <obj_clearDayProfileTable+0x38>
        for (pos2 = 0; pos2 != it->daySchedules.size; ++pos2)
   1488a:	3701      	adds	r7, #1
   1488c:	e7ea      	b.n	14864 <obj_clearDayProfileTable+0x2c>

0001488e <obj_clearRegisterMonitorActions>:
#endif //DLMS_IGNORE_ACTIVITY_CALENDAR
#ifndef DLMS_IGNORE_REGISTER_MONITOR
int obj_clearRegisterMonitorActions(gxArray* list)
{
   1488e:	b508      	push	{r3, lr}
    arr_clear(list);
   14890:	f7fc fc13 	bl	110ba <arr_clear>
    return 0;
}
   14894:	2000      	movs	r0, #0
   14896:	bd08      	pop	{r3, pc}

00014898 <obj_clearModemConfigurationInitialisationStrings>:
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
int obj_clearModemConfigurationInitialisationStrings(gxArray* list)
{
   14898:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1489a:	4604      	mov	r4, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxModemInitialisation* it;
    for (pos = 0; pos != list->size; ++pos)
   1489c:	2500      	movs	r5, #0
   1489e:	88e3      	ldrh	r3, [r4, #6]
   148a0:	42ab      	cmp	r3, r5
   148a2:	d105      	bne.n	148b0 <obj_clearModemConfigurationInitialisationStrings+0x18>
        }
        bb_clear(&it->request);
        bb_clear(&it->response);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   148a4:	4620      	mov	r0, r4
   148a6:	f7fc fc08 	bl	110ba <arr_clear>
    return ret;
   148aa:	2000      	movs	r0, #0
}
   148ac:	b003      	add	sp, #12
   148ae:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   148b0:	aa01      	add	r2, sp, #4
   148b2:	b2a9      	uxth	r1, r5
   148b4:	4620      	mov	r0, r4
   148b6:	f7fc fc28 	bl	1110a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   148ba:	2800      	cmp	r0, #0
   148bc:	d1f6      	bne.n	148ac <obj_clearModemConfigurationInitialisationStrings+0x14>
        bb_clear(&it->request);
   148be:	9801      	ldr	r0, [sp, #4]
   148c0:	f7f9 f9b7 	bl	dc32 <bb_clear>
        bb_clear(&it->response);
   148c4:	9801      	ldr	r0, [sp, #4]
   148c6:	300c      	adds	r0, #12
   148c8:	f7f9 f9b3 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   148cc:	3501      	adds	r5, #1
   148ce:	e7e6      	b.n	1489e <obj_clearModemConfigurationInitialisationStrings+0x6>

000148d0 <obj_clearScheduleEntries>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION

#ifndef DLMS_IGNORE_SCHEDULE
int obj_clearScheduleEntries(gxArray* list)
{
   148d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   148d2:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxScheduleEntry* it;
    for (pos = 0; pos != list->size; ++pos)
   148d4:	2600      	movs	r6, #0
   148d6:	88eb      	ldrh	r3, [r5, #6]
   148d8:	42b3      	cmp	r3, r6
   148da:	d106      	bne.n	148ea <obj_clearScheduleEntries+0x1a>
   148dc:	2400      	movs	r4, #0
            break;
        }
        ba_clear(&it->execSpecDays);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   148de:	4628      	mov	r0, r5
   148e0:	f7fc fbeb 	bl	110ba <arr_clear>
    return ret;
}
   148e4:	4620      	mov	r0, r4
   148e6:	b002      	add	sp, #8
   148e8:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != 0)
   148ea:	aa01      	add	r2, sp, #4
   148ec:	b2b1      	uxth	r1, r6
   148ee:	4628      	mov	r0, r5
   148f0:	f7fc fc0b 	bl	1110a <arr_getByIndex>
   148f4:	4604      	mov	r4, r0
   148f6:	2800      	cmp	r0, #0
   148f8:	d1f1      	bne.n	148de <obj_clearScheduleEntries+0xe>
        ba_clear(&it->execSpecDays);
   148fa:	9801      	ldr	r0, [sp, #4]
   148fc:	301c      	adds	r0, #28
   148fe:	f7f8 ff3e 	bl	d77e <ba_clear>
    for (pos = 0; pos != list->size; ++pos)
   14902:	3601      	adds	r6, #1
   14904:	e7e7      	b.n	148d6 <obj_clearScheduleEntries+0x6>

00014906 <obj_clearByteBufferList>:
#endif //DLMS_IGNORE_SCHEDULE

int obj_clearByteBufferList(gxArray* list)
{
   14906:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14908:	4604      	mov	r4, r0
    list->size = 0;
    return 0;
#else
    int pos, ret = 0;
    gxByteBuffer* it;
    for (pos = 0; pos != list->size; ++pos)
   1490a:	2500      	movs	r5, #0
   1490c:	88e3      	ldrh	r3, [r4, #6]
   1490e:	42ab      	cmp	r3, r5
   14910:	d105      	bne.n	1491e <obj_clearByteBufferList+0x18>
        {
            return ret;
        }
        bb_clear(it);
    }
    arr_clear(list);
   14912:	4620      	mov	r0, r4
   14914:	f7fc fbd1 	bl	110ba <arr_clear>
    return ret;
   14918:	2000      	movs	r0, #0
#endif //DLMS_IGNORE_MALLOC
}
   1491a:	b003      	add	sp, #12
   1491c:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   1491e:	aa01      	add	r2, sp, #4
   14920:	b2a9      	uxth	r1, r5
   14922:	4620      	mov	r0, r4
   14924:	f7fc fbf1 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14928:	2800      	cmp	r0, #0
   1492a:	d1f6      	bne.n	1491a <obj_clearByteBufferList+0x14>
        bb_clear(it);
   1492c:	9801      	ldr	r0, [sp, #4]
   1492e:	f7f9 f980 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   14932:	3501      	adds	r5, #1
   14934:	e7ea      	b.n	1490c <obj_clearByteBufferList+0x6>

00014936 <obj_clearScriptTable>:

#ifndef DLMS_IGNORE_SCRIPT_TABLE
int obj_clearScriptTable(gxArray* list)
{
   14936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos, pos2;
    gxScript* s;
    gxScriptAction* sa;
    for (pos = 0; pos != list->size; ++pos)
   14938:	2600      	movs	r6, #0
{
   1493a:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
   1493c:	4634      	mov	r4, r6
    for (pos = 0; pos != list->size; ++pos)
   1493e:	88eb      	ldrh	r3, [r5, #6]
   14940:	42b3      	cmp	r3, r6
   14942:	d105      	bne.n	14950 <obj_clearScriptTable+0x1a>
            var_clear(&sa->parameter);
        }
        arr_clear(&s->actions);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14944:	4628      	mov	r0, r5
   14946:	f7fc fbb8 	bl	110ba <arr_clear>
    return ret;
}
   1494a:	4620      	mov	r0, r4
   1494c:	b003      	add	sp, #12
   1494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = arr_getByIndex(list, pos, (void**)&s);
   14950:	466a      	mov	r2, sp
   14952:	b2b1      	uxth	r1, r6
   14954:	4628      	mov	r0, r5
   14956:	f7fc fbd8 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   1495a:	4604      	mov	r4, r0
   1495c:	2800      	cmp	r0, #0
   1495e:	d1f1      	bne.n	14944 <obj_clearScriptTable+0xe>
        for (pos2 = 0; pos2 != s->actions.size; ++pos2)
   14960:	4607      	mov	r7, r0
   14962:	9b00      	ldr	r3, [sp, #0]
   14964:	1d18      	adds	r0, r3, #4
   14966:	895b      	ldrh	r3, [r3, #10]
   14968:	42bb      	cmp	r3, r7
   1496a:	d106      	bne.n	1497a <obj_clearScriptTable+0x44>
   1496c:	2400      	movs	r4, #0
        arr_clear(&s->actions);
   1496e:	9800      	ldr	r0, [sp, #0]
   14970:	3004      	adds	r0, #4
   14972:	f7fc fba2 	bl	110ba <arr_clear>
    for (pos = 0; pos != list->size; ++pos)
   14976:	3601      	adds	r6, #1
   14978:	e7e1      	b.n	1493e <obj_clearScriptTable+0x8>
            ret = arr_getByIndex(&s->actions, pos2, (void**)&sa);
   1497a:	aa01      	add	r2, sp, #4
   1497c:	b2b9      	uxth	r1, r7
   1497e:	f7fc fbc4 	bl	1110a <arr_getByIndex>
            if (ret != 0)
   14982:	4604      	mov	r4, r0
   14984:	2800      	cmp	r0, #0
   14986:	d1f2      	bne.n	1496e <obj_clearScriptTable+0x38>
            var_clear(&sa->parameter);
   14988:	9801      	ldr	r0, [sp, #4]
   1498a:	3008      	adds	r0, #8
   1498c:	f006 fdab 	bl	1b4e6 <var_clear>
        for (pos2 = 0; pos2 != s->actions.size; ++pos2)
   14990:	3701      	adds	r7, #1
   14992:	e7e6      	b.n	14962 <obj_clearScriptTable+0x2c>

00014994 <obj_clearChargeTables>:
#endif //DLMS_IGNORE_SCRIPT_TABLE

#ifndef DLMS_IGNORE_CHARGE
int obj_clearChargeTables(gxArray* list)
{
   14994:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14996:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxChargeTable* it;
    for (pos = 0; pos != list->size; ++pos)
   14998:	2600      	movs	r6, #0
   1499a:	88eb      	ldrh	r3, [r5, #6]
   1499c:	42b3      	cmp	r3, r6
   1499e:	d106      	bne.n	149ae <obj_clearChargeTables+0x1a>
   149a0:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&it->index);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   149a2:	4628      	mov	r0, r5
   149a4:	f7fc fb89 	bl	110ba <arr_clear>
    return ret;
}
   149a8:	4620      	mov	r0, r4
   149aa:	b002      	add	sp, #8
   149ac:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != 0)
   149ae:	aa01      	add	r2, sp, #4
   149b0:	b2b1      	uxth	r1, r6
   149b2:	4628      	mov	r0, r5
   149b4:	f7fc fba9 	bl	1110a <arr_getByIndex>
   149b8:	4604      	mov	r4, r0
   149ba:	2800      	cmp	r0, #0
   149bc:	d1f1      	bne.n	149a2 <obj_clearChargeTables+0xe>
        bb_clear(&it->index);
   149be:	9801      	ldr	r0, [sp, #4]
   149c0:	f7f9 f937 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   149c4:	3601      	adds	r6, #1
   149c6:	e7e8      	b.n	1499a <obj_clearChargeTables+0x6>

000149c8 <obj_clearRegisterActivationAssignment>:
#endif //DLMS_IGNORE_CHARGE

#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
#if !(defined(DLMS_IGNORE_OBJECT_POINTERS) || defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES))
int obj_clearRegisterActivationAssignment(objectArray* list)
{
   149c8:	b508      	push	{r3, lr}
    oa_empty(list);
   149ca:	f006 fb8f 	bl	1b0ec <oa_empty>
    return 0;
}
   149ce:	2000      	movs	r0, #0
   149d0:	bd08      	pop	{r3, pc}

000149d2 <obj_clearRegisterActivationMaskList>:
    return 0;
}
#endif //!(defined(DLMS_IGNORE_OBJECT_POINTERS) || defined(DLMS_IGNORE_MALLOC))

int obj_clearRegisterActivationMaskList(gxArray* list)
{
   149d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   149d4:	4605      	mov	r5, r0
    arr_clear(list);
    return ret;
#else
    int ret = 0, pos;
    gxKey* it;
    for (pos = 0; pos != list->size; ++pos)
   149d6:	2600      	movs	r6, #0
   149d8:	88eb      	ldrh	r3, [r5, #6]
   149da:	42b3      	cmp	r3, r6
   149dc:	d106      	bne.n	149ec <obj_clearRegisterActivationMaskList+0x1a>
   149de:	2400      	movs	r4, #0
            break;
        }
        bb_clear((gxByteBuffer*)it->key);
        bb_clear((gxByteBuffer*)it->value);
    }
    arr_clearKeyValuePair(list);
   149e0:	4628      	mov	r0, r5
   149e2:	f7fc fba3 	bl	1112c <arr_clearKeyValuePair>
    return ret;
#endif //DLMS_COSEM_EXACT_DATA_TYPES
#endif //DLMS_IGNORE_MALLOC
}
   149e6:	4620      	mov	r0, r4
   149e8:	b002      	add	sp, #8
   149ea:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   149ec:	aa01      	add	r2, sp, #4
   149ee:	b2b1      	uxth	r1, r6
   149f0:	4628      	mov	r0, r5
   149f2:	f7fc fb8a 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   149f6:	4604      	mov	r4, r0
   149f8:	2800      	cmp	r0, #0
   149fa:	d1f1      	bne.n	149e0 <obj_clearRegisterActivationMaskList+0xe>
        bb_clear((gxByteBuffer*)it->key);
   149fc:	9b01      	ldr	r3, [sp, #4]
   149fe:	6818      	ldr	r0, [r3, #0]
   14a00:	f7f9 f917 	bl	dc32 <bb_clear>
        bb_clear((gxByteBuffer*)it->value);
   14a04:	9b01      	ldr	r3, [sp, #4]
   14a06:	6858      	ldr	r0, [r3, #4]
   14a08:	f7f9 f913 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   14a0c:	3601      	adds	r6, #1
   14a0e:	e7e3      	b.n	149d8 <obj_clearRegisterActivationMaskList+0x6>

00014a10 <obj_clearIP4SetupOptions>:
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_IP4_SETUP
int obj_clearIP4SetupOptions(gxArray* list)
{
   14a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14a12:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxip4SetupIpOption* it;
    for (pos = 0; pos != list->size; ++pos)
   14a14:	2500      	movs	r5, #0
   14a16:	88e3      	ldrh	r3, [r4, #6]
   14a18:	42ab      	cmp	r3, r5
   14a1a:	d105      	bne.n	14a28 <obj_clearIP4SetupOptions+0x18>
            return ret;
        }
        bb_clear(&it->data);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14a1c:	4620      	mov	r0, r4
   14a1e:	f7fc fb4c 	bl	110ba <arr_clear>
    return ret;
   14a22:	2000      	movs	r0, #0
}
   14a24:	b003      	add	sp, #12
   14a26:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14a28:	aa01      	add	r2, sp, #4
   14a2a:	b2a9      	uxth	r1, r5
   14a2c:	4620      	mov	r0, r4
   14a2e:	f7fc fb6c 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14a32:	2800      	cmp	r0, #0
   14a34:	d1f6      	bne.n	14a24 <obj_clearIP4SetupOptions+0x14>
        bb_clear(&it->data);
   14a36:	9801      	ldr	r0, [sp, #4]
   14a38:	3004      	adds	r0, #4
   14a3a:	f7f9 f8fa 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   14a3e:	3501      	adds	r5, #1
   14a40:	e7e9      	b.n	14a16 <obj_clearIP4SetupOptions+0x6>

00014a42 <obj_clearPPPSetupIPCPOptions>:
#endif //DLMS_IGNORE_IP4_SETUP

#ifndef DLMS_IGNORE_PPP_SETUP
int obj_clearPPPSetupIPCPOptions(gxArray* list)
{
   14a42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14a44:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxpppSetupIPCPOption* it;
    for (pos = 0; pos != list->size; ++pos)
   14a46:	2500      	movs	r5, #0
   14a48:	88e3      	ldrh	r3, [r4, #6]
   14a4a:	42ab      	cmp	r3, r5
   14a4c:	d105      	bne.n	14a5a <obj_clearPPPSetupIPCPOptions+0x18>
            return ret;
        }
        var_clear(&it->data);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14a4e:	4620      	mov	r0, r4
   14a50:	f7fc fb33 	bl	110ba <arr_clear>
    return ret;
   14a54:	2000      	movs	r0, #0
}
   14a56:	b003      	add	sp, #12
   14a58:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14a5a:	aa01      	add	r2, sp, #4
   14a5c:	b2a9      	uxth	r1, r5
   14a5e:	4620      	mov	r0, r4
   14a60:	f7fc fb53 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14a64:	2800      	cmp	r0, #0
   14a66:	d1f6      	bne.n	14a56 <obj_clearPPPSetupIPCPOptions+0x14>
        var_clear(&it->data);
   14a68:	9801      	ldr	r0, [sp, #4]
   14a6a:	3008      	adds	r0, #8
   14a6c:	f006 fd3b 	bl	1b4e6 <var_clear>
    for (pos = 0; pos != list->size; ++pos)
   14a70:	3501      	adds	r5, #1
   14a72:	e7e9      	b.n	14a48 <obj_clearPPPSetupIPCPOptions+0x6>

00014a74 <obj_clearPPPSetupLCPOptions>:

int obj_clearPPPSetupLCPOptions(gxArray* list)
{
   14a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14a76:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxpppSetupLcpOption* it;
    for (pos = 0; pos != list->size; ++pos)
   14a78:	2500      	movs	r5, #0
   14a7a:	88e3      	ldrh	r3, [r4, #6]
   14a7c:	42ab      	cmp	r3, r5
   14a7e:	d105      	bne.n	14a8c <obj_clearPPPSetupLCPOptions+0x18>
            return ret;
        }
        var_clear(&it->data);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14a80:	4620      	mov	r0, r4
   14a82:	f7fc fb1a 	bl	110ba <arr_clear>
    return ret;
   14a86:	2000      	movs	r0, #0
}
   14a88:	b003      	add	sp, #12
   14a8a:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14a8c:	aa01      	add	r2, sp, #4
   14a8e:	b2a9      	uxth	r1, r5
   14a90:	4620      	mov	r0, r4
   14a92:	f7fc fb3a 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14a96:	2800      	cmp	r0, #0
   14a98:	d1f6      	bne.n	14a88 <obj_clearPPPSetupLCPOptions+0x14>
        var_clear(&it->data);
   14a9a:	9801      	ldr	r0, [sp, #4]
   14a9c:	3008      	adds	r0, #8
   14a9e:	f006 fd22 	bl	1b4e6 <var_clear>
    for (pos = 0; pos != list->size; ++pos)
   14aa2:	3501      	adds	r5, #1
   14aa4:	e7e9      	b.n	14a7a <obj_clearPPPSetupLCPOptions+0x6>

00014aa6 <obj_clearActiveDevices>:
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
int obj_clearActiveDevices(gxArray* list)
{
   14aa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14aa8:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxActiveDevice* it;
    for (pos = 0; pos != list->size; ++pos)
   14aaa:	2500      	movs	r5, #0
   14aac:	88e3      	ldrh	r3, [r4, #6]
   14aae:	42ab      	cmp	r3, r5
   14ab0:	d105      	bne.n	14abe <obj_clearActiveDevices+0x18>
            return ret;
        }
        bb_clear(&it->macAddress);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14ab2:	4620      	mov	r0, r4
   14ab4:	f7fc fb01 	bl	110ba <arr_clear>
    return ret;
   14ab8:	2000      	movs	r0, #0
}
   14aba:	b003      	add	sp, #12
   14abc:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14abe:	aa01      	add	r2, sp, #4
   14ac0:	b2a9      	uxth	r1, r5
   14ac2:	4620      	mov	r0, r4
   14ac4:	f7fc fb21 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14ac8:	2800      	cmp	r0, #0
   14aca:	d1f6      	bne.n	14aba <obj_clearActiveDevices+0x14>
        bb_clear(&it->macAddress);
   14acc:	9801      	ldr	r0, [sp, #4]
   14ace:	f7f9 f8b0 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   14ad2:	3501      	adds	r5, #1
   14ad4:	e7ea      	b.n	14aac <obj_clearActiveDevices+0x6>

00014ad6 <obj_clearUserList>:
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL

int obj_clearUserList(gxArray* list)
{
   14ad6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14ad8:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxKey2* it;
    for (pos = 0; pos != list->size; ++pos)
   14ada:	2500      	movs	r5, #0
   14adc:	88e3      	ldrh	r3, [r4, #6]
   14ade:	42ab      	cmp	r3, r5
   14ae0:	d105      	bne.n	14aee <obj_clearUserList+0x18>
            return ret;
        }
        gxfree(it->value);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14ae2:	4620      	mov	r0, r4
   14ae4:	f7fc fae9 	bl	110ba <arr_clear>
    return ret;
   14ae8:	2000      	movs	r0, #0
}
   14aea:	b003      	add	sp, #12
   14aec:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14aee:	aa01      	add	r2, sp, #4
   14af0:	b2a9      	uxth	r1, r5
   14af2:	4620      	mov	r0, r4
   14af4:	f7fc fb09 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14af8:	2800      	cmp	r0, #0
   14afa:	d1f6      	bne.n	14aea <obj_clearUserList+0x14>
        gxfree(it->value);
   14afc:	9b01      	ldr	r3, [sp, #4]
   14afe:	6858      	ldr	r0, [r3, #4]
   14b00:	f7f7 feb8 	bl	c874 <free>
    for (pos = 0; pos != list->size; ++pos)
   14b04:	3501      	adds	r5, #1
   14b06:	e7e9      	b.n	14adc <obj_clearUserList+0x6>

00014b08 <obj_clearBitArrayList>:

int obj_clearBitArrayList(
    gxArray* list)
{
   14b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b0a:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    bitArray* it;
    for (pos = 0; pos != list->size; ++pos)
   14b0c:	2500      	movs	r5, #0
   14b0e:	88e3      	ldrh	r3, [r4, #6]
   14b10:	42ab      	cmp	r3, r5
   14b12:	d105      	bne.n	14b20 <obj_clearBitArrayList+0x18>
            return ret;
        }
        ba_clear(it);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14b14:	4620      	mov	r0, r4
   14b16:	f7fc fad0 	bl	110ba <arr_clear>
    return ret;
   14b1a:	2000      	movs	r0, #0
}
   14b1c:	b003      	add	sp, #12
   14b1e:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14b20:	aa01      	add	r2, sp, #4
   14b22:	b2a9      	uxth	r1, r5
   14b24:	4620      	mov	r0, r4
   14b26:	f7fc faf0 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14b2a:	2800      	cmp	r0, #0
   14b2c:	d1f6      	bne.n	14b1c <obj_clearBitArrayList+0x14>
        ba_clear(it);
   14b2e:	9801      	ldr	r0, [sp, #4]
   14b30:	f7f8 fe25 	bl	d77e <ba_clear>
    for (pos = 0; pos != list->size; ++pos)
   14b34:	3501      	adds	r5, #1
   14b36:	e7ea      	b.n	14b0e <obj_clearBitArrayList+0x6>

00014b38 <obj_clearVariantList>:

int obj_clearVariantList(
    gxArray* list)
{
   14b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b3a:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    dlmsVARIANT* it;
    for (pos = 0; pos != list->size; ++pos)
   14b3c:	2500      	movs	r5, #0
   14b3e:	88e3      	ldrh	r3, [r4, #6]
   14b40:	42ab      	cmp	r3, r5
   14b42:	d105      	bne.n	14b50 <obj_clearVariantList+0x18>
            return ret;
        }
        var_clear(it);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14b44:	4620      	mov	r0, r4
   14b46:	f7fc fab8 	bl	110ba <arr_clear>
    return ret;
   14b4a:	2000      	movs	r0, #0
}
   14b4c:	b003      	add	sp, #12
   14b4e:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14b50:	aa01      	add	r2, sp, #4
   14b52:	b2a9      	uxth	r1, r5
   14b54:	4620      	mov	r0, r4
   14b56:	f7fc fad8 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14b5a:	2800      	cmp	r0, #0
   14b5c:	d1f6      	bne.n	14b4c <obj_clearVariantList+0x14>
        var_clear(it);
   14b5e:	9801      	ldr	r0, [sp, #4]
   14b60:	f006 fcc1 	bl	1b4e6 <var_clear>
    for (pos = 0; pos != list->size; ++pos)
   14b64:	3501      	adds	r5, #1
   14b66:	e7ea      	b.n	14b3e <obj_clearVariantList+0x6>

00014b68 <obj_clearAvailableSwitches>:

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA
//Clear available switches.
int obj_clearAvailableSwitches(
    gxArray* list)
{
   14b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b6a:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxMacAvailableSwitch* it;
    for (pos = 0; pos != list->size; ++pos)
   14b6c:	2500      	movs	r5, #0
   14b6e:	88e3      	ldrh	r3, [r4, #6]
   14b70:	42ab      	cmp	r3, r5
   14b72:	d105      	bne.n	14b80 <obj_clearAvailableSwitches+0x18>
            return ret;
        }
        bb_clear(&it->sna);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   14b74:	4620      	mov	r0, r4
   14b76:	f7fc faa0 	bl	110ba <arr_clear>
    return ret;
   14b7a:	2000      	movs	r0, #0
}
   14b7c:	b003      	add	sp, #12
   14b7e:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   14b80:	aa01      	add	r2, sp, #4
   14b82:	b2a9      	uxth	r1, r5
   14b84:	4620      	mov	r0, r4
   14b86:	f7fc fac0 	bl	1110a <arr_getByIndex>
        if (ret != 0)
   14b8a:	2800      	cmp	r0, #0
   14b8c:	d1f6      	bne.n	14b7c <obj_clearAvailableSwitches+0x14>
        bb_clear(&it->sna);
   14b8e:	9801      	ldr	r0, [sp, #4]
   14b90:	f7f9 f84f 	bl	dc32 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   14b94:	3501      	adds	r5, #1
   14b96:	e7ea      	b.n	14b6e <obj_clearAvailableSwitches+0x6>

00014b98 <obj_clearCertificateInfo>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

#ifndef DLMS_IGNORE_SECURITY_SETUP
int obj_clearCertificateInfo(gxArray* arr)
{
   14b98:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14b9a:	4605      	mov	r5, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    gxCertificateInfo* it;
    uint16_t pos;
    for (pos = 0; pos != arr->size; ++pos)
   14b9c:	2600      	movs	r6, #0
   14b9e:	88eb      	ldrh	r3, [r5, #6]
   14ba0:	b2b1      	uxth	r1, r6
   14ba2:	428b      	cmp	r3, r1
   14ba4:	d106      	bne.n	14bb4 <obj_clearCertificateInfo+0x1c>
   14ba6:	2400      	movs	r4, #0
        gxfree(it->issuer);
        gxfree(it->subject);
        gxfree(it->subjectAltName);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(arr);
   14ba8:	4628      	mov	r0, r5
   14baa:	f7fc fa86 	bl	110ba <arr_clear>
    return ret;
}
   14bae:	4620      	mov	r0, r4
   14bb0:	b002      	add	sp, #8
   14bb2:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(arr, pos, (void**)&it)) != 0)
   14bb4:	aa01      	add	r2, sp, #4
   14bb6:	4628      	mov	r0, r5
   14bb8:	f7fc faa7 	bl	1110a <arr_getByIndex>
   14bbc:	3601      	adds	r6, #1
   14bbe:	4604      	mov	r4, r0
   14bc0:	2800      	cmp	r0, #0
   14bc2:	d1f1      	bne.n	14ba8 <obj_clearCertificateInfo+0x10>
        gxfree(it->serialNumber);
   14bc4:	9b01      	ldr	r3, [sp, #4]
   14bc6:	6858      	ldr	r0, [r3, #4]
   14bc8:	f7f7 fe54 	bl	c874 <free>
        gxfree(it->issuer);
   14bcc:	9b01      	ldr	r3, [sp, #4]
   14bce:	6898      	ldr	r0, [r3, #8]
   14bd0:	f7f7 fe50 	bl	c874 <free>
        gxfree(it->subject);
   14bd4:	9b01      	ldr	r3, [sp, #4]
   14bd6:	68d8      	ldr	r0, [r3, #12]
   14bd8:	f7f7 fe4c 	bl	c874 <free>
        gxfree(it->subjectAltName);
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	6918      	ldr	r0, [r3, #16]
   14be0:	f7f7 fe48 	bl	c874 <free>
    for (pos = 0; pos != arr->size; ++pos)
   14be4:	e7db      	b.n	14b9e <obj_clearCertificateInfo+0x6>

00014be6 <obj_clear>:
#endif //DLMS_IGNORE_SECURITY_SETUP

void obj_clear(gxObject* object)
{
   14be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = 0;
    if (object != NULL)
   14be8:	4604      	mov	r4, r0
   14bea:	2800      	cmp	r0, #0
   14bec:	f000 80b8 	beq.w	14d60 <obj_clear+0x17a>
    {
        if (object->access != NULL)
   14bf0:	68c0      	ldr	r0, [r0, #12]
   14bf2:	b150      	cbz	r0, 14c0a <obj_clear+0x24>
        {
            bb_clear(&object->access->attributeAccessModes);
   14bf4:	f7f9 f81d 	bl	dc32 <bb_clear>
            bb_clear(&object->access->methodAccessModes);
   14bf8:	68e0      	ldr	r0, [r4, #12]
   14bfa:	300c      	adds	r0, #12
   14bfc:	f7f9 f819 	bl	dc32 <bb_clear>
#ifndef DLMS_IGNORE_MALLOC
            gxfree(object->access);
   14c00:	68e0      	ldr	r0, [r4, #12]
   14c02:	f7f7 fe37 	bl	c874 <free>
            object->access = NULL;
   14c06:	2300      	movs	r3, #0
   14c08:	60e3      	str	r3, [r4, #12]
#endif //DLMS_IGNORE_MALLOC
        }
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        object->shortName = 0;
   14c0a:	8823      	ldrh	r3, [r4, #0]
   14c0c:	2500      	movs	r5, #0
   14c0e:	3b01      	subs	r3, #1
   14c10:	80a5      	strh	r5, [r4, #4]
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        switch (object->objectType)
   14c12:	2b72      	cmp	r3, #114	; 0x72
   14c14:	f200 80a4 	bhi.w	14d60 <obj_clear+0x17a>
   14c18:	e8df f013 	tbh	[pc, r3, lsl #1]
   14c1c:	00a20073 	.word	0x00a20073
   14c20:	00e10073 	.word	0x00e10073
   14c24:	016800d3 	.word	0x016800d3
   14c28:	00a2015f 	.word	0x00a2015f
   14c2c:	01840189 	.word	0x01840189
   14c30:	00bc0177 	.word	0x00bc0177
   14c34:	00a200a2 	.word	0x00a200a2
   14c38:	00a200a4 	.word	0x00a200a4
   14c3c:	012d017f 	.word	0x012d017f
   14c40:	007d00f1 	.word	0x007d00f1
   14c44:	00780173 	.word	0x00780173
   14c48:	010000a2 	.word	0x010000a2
   14c4c:	019000a2 	.word	0x019000a2
   14c50:	00c50146 	.word	0x00c50146
   14c54:	00a200ca 	.word	0x00a200ca
   14c58:	00a200a2 	.word	0x00a200a2
   14c5c:	00a200a2 	.word	0x00a200a2
   14c60:	00a200a2 	.word	0x00a200a2
   14c64:	00a200a2 	.word	0x00a200a2
   14c68:	019300a2 	.word	0x019300a2
   14c6c:	0107018e 	.word	0x0107018e
   14c70:	014d00de 	.word	0x014d00de
   14c74:	00a200de 	.word	0x00a200de
   14c78:	00a201cc 	.word	0x00a201cc
   14c7c:	021100a2 	.word	0x021100a2
   14c80:	00a200de 	.word	0x00a200de
   14c84:	00a2020a 	.word	0x00a2020a
   14c88:	021400a2 	.word	0x021400a2
   14c8c:	00a200a2 	.word	0x00a200a2
   14c90:	00a200a2 	.word	0x00a200a2
   14c94:	01d300a2 	.word	0x01d300a2
   14c98:	00e400a2 	.word	0x00e400a2
   14c9c:	00a201de 	.word	0x00a201de
   14ca0:	01f900a2 	.word	0x01f900a2
   14ca4:	00a200a2 	.word	0x00a200a2
   14ca8:	01420131 	.word	0x01420131
   14cac:	00a200a2 	.word	0x00a200a2
   14cb0:	00a200a2 	.word	0x00a200a2
   14cb4:	00a200a2 	.word	0x00a200a2
   14cb8:	00a200a2 	.word	0x00a200a2
   14cbc:	00a200a2 	.word	0x00a200a2
   14cc0:	00a20190 	.word	0x00a20190
   14cc4:	00de01e6 	.word	0x00de01e6
   14cc8:	00a200a2 	.word	0x00a200a2
   14ccc:	00a200a2 	.word	0x00a200a2
   14cd0:	00a200a2 	.word	0x00a200a2
   14cd4:	00a200a2 	.word	0x00a200a2
   14cd8:	00a200a2 	.word	0x00a200a2
   14cdc:	00a200a2 	.word	0x00a200a2
   14ce0:	00a200a2 	.word	0x00a200a2
   14ce4:	00a200a2 	.word	0x00a200a2
   14ce8:	017a00a2 	.word	0x017a00a2
   14cec:	00a200a2 	.word	0x00a200a2
   14cf0:	00a200a2 	.word	0x00a200a2
   14cf4:	00a200a2 	.word	0x00a200a2
   14cf8:	01b1019e 	.word	0x01b1019e
   14cfc:	00a201b4 	.word	0x00a201b4
   14d00:	01bf      	.short	0x01bf
        {
#ifndef DLMS_IGNORE_DATA
        case DLMS_OBJECT_TYPE_DATA:
            var_clear(&((gxData*)object)->value);
   14d02:	f104 0010 	add.w	r0, r4, #16
#endif //DLMS_IGNORE_AUTO_CONNECT
#ifndef DLMS_IGNORE_DEMAND_REGISTER
        case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
            var_clear(&((gxDemandRegister*)object)->currentAverageValue);
            var_clear(&((gxDemandRegister*)object)->lastAverageValue);
            var_clear(&((gxDemandRegister*)object)->status);
   14d06:	f006 fbee 	bl	1b4e6 <var_clear>
            break;
   14d0a:	e029      	b.n	14d60 <obj_clear+0x17a>
            arr_clear(&((gxActionSchedule*)object)->executionTime);
   14d0c:	f104 0018 	add.w	r0, r4, #24
        case DLMS_OBJECT_TYPE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS:
            break;
#endif //DLMS_IGNORE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS
#ifndef DLMS_IGNORE_SFSK_PHY_MAC_SETUP
        case DLMS_OBJECT_TYPE_SFSK_PHY_MAC_SETUP:
            arr_clear(&((gxSFSKPhyMacSetUp*)object)->macGroupAddresses);
   14d10:	f7fc f9d3 	bl	110ba <arr_clear>
            break;
   14d14:	e024      	b.n	14d60 <obj_clear+0x17a>
            bb_clear(&((gxActivityCalendar*)object)->calendarNameActive);
   14d16:	f104 0010 	add.w	r0, r4, #16
   14d1a:	f7f8 ff8a 	bl	dc32 <bb_clear>
            bb_clear(&((gxActivityCalendar*)object)->calendarNamePassive);
   14d1e:	f104 001c 	add.w	r0, r4, #28
   14d22:	f7f8 ff86 	bl	dc32 <bb_clear>
            if ((ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfileActive)) != 0 ||
   14d26:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14d2a:	f7ff fd4d 	bl	147c8 <obj_clearSeasonProfile>
   14d2e:	b9b8      	cbnz	r0, 14d60 <obj_clear+0x17a>
                (ret = obj_clearWeekProfileTable(&((gxActivityCalendar*)object)->weekProfileTableActive)) != 0 ||
   14d30:	f104 0034 	add.w	r0, r4, #52	; 0x34
   14d34:	f7ff fd66 	bl	14804 <obj_clearWeekProfileTable>
            if ((ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfileActive)) != 0 ||
   14d38:	b990      	cbnz	r0, 14d60 <obj_clear+0x17a>
                (ret = obj_clearDayProfileTable(&((gxActivityCalendar*)object)->dayProfileTableActive)) != 0 ||
   14d3a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   14d3e:	f7ff fd7b 	bl	14838 <obj_clearDayProfileTable>
                (ret = obj_clearWeekProfileTable(&((gxActivityCalendar*)object)->weekProfileTableActive)) != 0 ||
   14d42:	b968      	cbnz	r0, 14d60 <obj_clear+0x17a>
                (ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfilePassive)) != 0 ||
   14d44:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   14d48:	f7ff fd3e 	bl	147c8 <obj_clearSeasonProfile>
                (ret = obj_clearDayProfileTable(&((gxActivityCalendar*)object)->dayProfileTableActive)) != 0 ||
   14d4c:	b940      	cbnz	r0, 14d60 <obj_clear+0x17a>
                (ret = obj_clearWeekProfileTable(&((gxActivityCalendar*)object)->weekProfileTablePassive)) != 0 ||
   14d4e:	f104 0064 	add.w	r0, r4, #100	; 0x64
   14d52:	f7ff fd57 	bl	14804 <obj_clearWeekProfileTable>
                (ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfilePassive)) != 0 ||
   14d56:	b918      	cbnz	r0, 14d60 <obj_clear+0x17a>
                (ret = obj_clearDayProfileTable(&((gxActivityCalendar*)object)->dayProfileTablePassive)) != 0)
   14d58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14d5c:	f7ff fd6c 	bl	14838 <obj_clearDayProfileTable>
    {
        //Remove warning.
    }
#endif

}
   14d60:	b002      	add	sp, #8
   14d62:	bd70      	pop	{r4, r5, r6, pc}
            oa_empty(&((gxAssociationLogicalName*)object)->objectList);
   14d64:	f104 0014 	add.w	r0, r4, #20
   14d68:	f006 f9c0 	bl	1b0ec <oa_empty>
            ((gxAssociationLogicalName*)object)->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)0;
   14d6c:	6325      	str	r5, [r4, #48]	; 0x30
            bb_clear(&((gxAssociationLogicalName*)object)->xDLMSContextInfo.cypheringInfo);
   14d6e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   14d72:	f7f8 ff5e 	bl	dc32 <bb_clear>
            bb_clear(&((gxAssociationLogicalName*)object)->secret);
   14d76:	f104 0050 	add.w	r0, r4, #80	; 0x50
   14d7a:	f7f8 ff5a 	bl	dc32 <bb_clear>
            obj_clearUserList(&((gxAssociationLogicalName*)object)->userList);
   14d7e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14d82:	f7ff fea8 	bl	14ad6 <obj_clearUserList>
            if (((gxAssociationLogicalName*)object)->currentUser.value != NULL)
   14d86:	6f20      	ldr	r0, [r4, #112]	; 0x70
   14d88:	2800      	cmp	r0, #0
   14d8a:	d0e9      	beq.n	14d60 <obj_clear+0x17a>
                gxfree(((gxAssociationLogicalName*)object)->currentUser.value);
   14d8c:	f7f7 fd72 	bl	c874 <free>
                ((gxAssociationLogicalName*)object)->currentUser.value = NULL;
   14d90:	6725      	str	r5, [r4, #112]	; 0x70
   14d92:	e7e5      	b.n	14d60 <obj_clear+0x17a>
            oa_empty(&((gxAssociationShortName*)object)->objectList);
   14d94:	f104 0010 	add.w	r0, r4, #16
   14d98:	f006 f9a8 	bl	1b0ec <oa_empty>
            bb_clear(&((gxAssociationShortName*)object)->secret);
   14d9c:	f104 001c 	add.w	r0, r4, #28
            bb_clear(&((gxMacAddressSetup*)object)->macAddress);
   14da0:	f7f8 ff47 	bl	dc32 <bb_clear>
            break;
   14da4:	e7dc      	b.n	14d60 <obj_clear+0x17a>
            arr_clearKeyValuePair(&((gxAutoAnswer*)object)->listeningWindow);
   14da6:	f104 0014 	add.w	r0, r4, #20
            arr_clearKeyValuePair(&((gxMBusClient*)object)->captureDefinition);
   14daa:	f7fc f9bf 	bl	1112c <arr_clearKeyValuePair>
            break;
   14dae:	e7d7      	b.n	14d60 <obj_clear+0x17a>
            arr_clearKeyValuePair(&((gxAutoConnect*)object)->callingWindow);
   14db0:	f104 0014 	add.w	r0, r4, #20
   14db4:	f7fc f9ba 	bl	1112c <arr_clearKeyValuePair>
            arr_clearStrings(&((gxAutoConnect*)object)->destinations);
   14db8:	f104 0020 	add.w	r0, r4, #32
            arr_clearStrings(&((gxModemConfiguration*)object)->modemProfile);
   14dbc:	f7fc f9d4 	bl	11168 <arr_clearStrings>
            break;
   14dc0:	e7ce      	b.n	14d60 <obj_clear+0x17a>
            var_clear(&((gxDemandRegister*)object)->currentAverageValue);
   14dc2:	f104 0010 	add.w	r0, r4, #16
   14dc6:	f006 fb8e 	bl	1b4e6 <var_clear>
            var_clear(&((gxDemandRegister*)object)->lastAverageValue);
   14dca:	f104 0020 	add.w	r0, r4, #32
   14dce:	f006 fb8a 	bl	1b4e6 <var_clear>
            var_clear(&((gxDemandRegister*)object)->status);
   14dd2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14dd6:	e796      	b.n	14d06 <obj_clear+0x120>
            bb_clear(&((gxMacAddressSetup*)object)->macAddress);
   14dd8:	f104 0010 	add.w	r0, r4, #16
   14ddc:	e7e0      	b.n	14da0 <obj_clear+0x1ba>
            var_clear(&((gxExtendedRegister*)object)->status);
   14dde:	f104 0030 	add.w	r0, r4, #48	; 0x30
   14de2:	e790      	b.n	14d06 <obj_clear+0x120>
            bb_clear(&((gxSecuritySetup*)object)->clientSystemTitle);
   14de4:	f104 0020 	add.w	r0, r4, #32
   14de8:	f7f8 ff23 	bl	dc32 <bb_clear>
            bb_clear(&((gxSecuritySetup*)object)->serverSystemTitle);
   14dec:	f104 0014 	add.w	r0, r4, #20
   14df0:	f7f8 ff1f 	bl	dc32 <bb_clear>
            obj_clearCertificateInfo(&((gxSecuritySetup*)object)->certificates);
   14df4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14df8:	f7ff fece 	bl	14b98 <obj_clearCertificateInfo>
            break;
   14dfc:	e7b0      	b.n	14d60 <obj_clear+0x17a>
            bb_clear(&((gxLocalPortSetup*)object)->password1);
   14dfe:	f104 0010 	add.w	r0, r4, #16
   14e02:	f7f8 ff16 	bl	dc32 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->password2);
   14e06:	f104 001c 	add.w	r0, r4, #28
   14e0a:	f7f8 ff12 	bl	dc32 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->password5);
   14e0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14e12:	f7f8 ff0e 	bl	dc32 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->deviceAddress);
   14e16:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14e1a:	e7c1      	b.n	14da0 <obj_clear+0x1ba>
            bb_clear(&((gxIecTwistedPairSetup*)object)->primaryAddresses);
   14e1c:	f104 0014 	add.w	r0, r4, #20
   14e20:	f7f8 ff07 	bl	dc32 <bb_clear>
            bb_clear(&((gxIecTwistedPairSetup*)object)->tabis);
   14e24:	f104 0020 	add.w	r0, r4, #32
   14e28:	e7ba      	b.n	14da0 <obj_clear+0x1ba>
            ((gxIp4Setup*)object)->dataLinkLayer = NULL;
   14e2a:	6125      	str	r5, [r4, #16]
            var_clear(&((gxIp4Setup*)object)->value);
   14e2c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   14e30:	f006 fb59 	bl	1b4e6 <var_clear>
            va_clear(&((gxIp4Setup*)object)->multicastIPAddress);
   14e34:	f104 0018 	add.w	r0, r4, #24
   14e38:	f006 fb30 	bl	1b49c <va_clear>
            obj_clearIP4SetupOptions(&((gxIp4Setup*)object)->ipOptions);
   14e3c:	f104 0020 	add.w	r0, r4, #32
   14e40:	f7ff fde6 	bl	14a10 <obj_clearIP4SetupOptions>
            break;
   14e44:	e78c      	b.n	14d60 <obj_clear+0x17a>
                if (arr_getByIndex(&((gxImageTransfer*)object)->imageActivateInfo, pos, (void**)&it) == 0)
   14e46:	aa01      	add	r2, sp, #4
   14e48:	b2a9      	uxth	r1, r5
   14e4a:	4630      	mov	r0, r6
   14e4c:	f7fc f95d 	bl	1110a <arr_getByIndex>
   14e50:	b938      	cbnz	r0, 14e62 <obj_clear+0x27c>
                    bb_clear(&it->identification);
   14e52:	9801      	ldr	r0, [sp, #4]
   14e54:	3004      	adds	r0, #4
   14e56:	f7f8 feec 	bl	dc32 <bb_clear>
                    bb_clear(&it->signature);
   14e5a:	9801      	ldr	r0, [sp, #4]
   14e5c:	3010      	adds	r0, #16
   14e5e:	f7f8 fee8 	bl	dc32 <bb_clear>
                ++pos;
   14e62:	3501      	adds	r5, #1
            while (pos != ((gxImageTransfer*)object)->imageActivateInfo.size)
   14e64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   14e66:	42ab      	cmp	r3, r5
   14e68:	d1ed      	bne.n	14e46 <obj_clear+0x260>
            ba_clear(&((gxImageTransfer*)object)->imageTransferredBlocksStatus);
   14e6a:	f104 0014 	add.w	r0, r4, #20
   14e6e:	f7f8 fc86 	bl	d77e <ba_clear>
            arr_clear(&((gxImageTransfer*)object)->imageActivateInfo);
   14e72:	4630      	mov	r0, r6
   14e74:	e74c      	b.n	14d10 <obj_clear+0x12a>
        switch (object->objectType)
   14e76:	2500      	movs	r5, #0
   14e78:	f104 0624 	add.w	r6, r4, #36	; 0x24
   14e7c:	e7f2      	b.n	14e64 <obj_clear+0x27e>
            var_clear(&((gxLimiter*)object)->thresholdActive);
   14e7e:	f104 0018 	add.w	r0, r4, #24
   14e82:	f006 fb30 	bl	1b4e6 <var_clear>
            var_clear(&((gxLimiter*)object)->thresholdNormal);
   14e86:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14e8a:	f006 fb2c 	bl	1b4e6 <var_clear>
            var_clear(&((gxLimiter*)object)->thresholdEmergency);
   14e8e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14e92:	f006 fb28 	bl	1b4e6 <var_clear>
            va_clear(&((gxLimiter*)object)->emergencyProfileGroupIDs);
   14e96:	f104 0064 	add.w	r0, r4, #100	; 0x64
   14e9a:	f006 faff 	bl	1b49c <va_clear>
            break;
   14e9e:	e75f      	b.n	14d60 <obj_clear+0x17a>
            ((gxMBusClient*)object)->mBusPort = NULL;
   14ea0:	61a5      	str	r5, [r4, #24]
            arr_clearKeyValuePair(&((gxMBusClient*)object)->captureDefinition);
   14ea2:	f104 001c 	add.w	r0, r4, #28
   14ea6:	e780      	b.n	14daa <obj_clear+0x1c4>
            ret = obj_clearModemConfigurationInitialisationStrings(&((gxModemConfiguration*)object)->initialisationStrings);
   14ea8:	f104 0010 	add.w	r0, r4, #16
   14eac:	f7ff fcf4 	bl	14898 <obj_clearModemConfigurationInitialisationStrings>
            arr_clearStrings(&((gxModemConfiguration*)object)->modemProfile);
   14eb0:	f104 001c 	add.w	r0, r4, #28
   14eb4:	e782      	b.n	14dbc <obj_clear+0x1d6>
            ((gxPppSetup*)object)->phy = NULL;
   14eb6:	61e5      	str	r5, [r4, #28]
            bb_clear(&((gxPppSetup*)object)->userName);
   14eb8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14ebc:	f7f8 feb9 	bl	dc32 <bb_clear>
            bb_clear(&((gxPppSetup*)object)->password);
   14ec0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14ec4:	f7f8 feb5 	bl	dc32 <bb_clear>
            obj_clearPPPSetupIPCPOptions(&((gxPppSetup*)object)->ipcpOptions);
   14ec8:	f104 0010 	add.w	r0, r4, #16
   14ecc:	f7ff fdb9 	bl	14a42 <obj_clearPPPSetupIPCPOptions>
            obj_clearPPPSetupLCPOptions(&((gxPppSetup*)object)->lcpOptions);
   14ed0:	f104 0020 	add.w	r0, r4, #32
   14ed4:	f7ff fdce 	bl	14a74 <obj_clearPPPSetupLCPOptions>
            break;
   14ed8:	e742      	b.n	14d60 <obj_clear+0x17a>
            obj_clearProfileGenericBuffer(&((gxProfileGeneric*)object)->buffer);
   14eda:	f104 0010 	add.w	r0, r4, #16
   14ede:	f7ff fbe9 	bl	146b4 <obj_clearProfileGenericBuffer>
            obj_clearProfileGenericCaptureObjects(&((gxProfileGeneric*)object)->captureObjects);
   14ee2:	f104 001c 	add.w	r0, r4, #28
            obj_clearParametersList(&((gxParameterMonitor*)object)->parameters);
   14ee6:	f7ff fbfd 	bl	146e4 <obj_clearPushObjectList>
            break;
   14eea:	e739      	b.n	14d60 <obj_clear+0x17a>
            oa_empty(&((gxRegisterActivation*)object)->registerAssignment);
   14eec:	f104 0010 	add.w	r0, r4, #16
   14ef0:	f006 f8fc 	bl	1b0ec <oa_empty>
            obj_clearRegisterActivationMaskList(&((gxRegisterActivation*)object)->maskList);
   14ef4:	f104 0018 	add.w	r0, r4, #24
   14ef8:	f7ff fd6b 	bl	149d2 <obj_clearRegisterActivationMaskList>
            bb_clear(&((gxRegisterActivation*)object)->activeMask);
   14efc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   14f00:	e74e      	b.n	14da0 <obj_clear+0x1ba>
            va_clear(&((gxRegisterMonitor*)object)->thresholds);
   14f02:	f104 0024 	add.w	r0, r4, #36	; 0x24
   14f06:	f006 fac9 	bl	1b49c <va_clear>
            arr_clear(&((gxSpecialDaysTable*)object)->entries);
   14f0a:	f104 0010 	add.w	r0, r4, #16
   14f0e:	e6ff      	b.n	14d10 <obj_clear+0x12a>
            obj_clearActiveDevices(&((gxZigBeeNetworkControl*)object)->activeDevices);
   14f10:	f104 0014 	add.w	r0, r4, #20
   14f14:	f7ff fdc7 	bl	14aa6 <obj_clearActiveDevices>
            break;
   14f18:	e722      	b.n	14d60 <obj_clear+0x17a>
            obj_clearSapList(&((gxSapAssignment*)object)->sapAssignmentList);
   14f1a:	f104 0010 	add.w	r0, r4, #16
   14f1e:	f7ff fc36 	bl	1478e <obj_clearSapList>
            break;
   14f22:	e71d      	b.n	14d60 <obj_clear+0x17a>
            obj_clearScheduleEntries(&((gxSchedule*)object)->entries);
   14f24:	f104 0010 	add.w	r0, r4, #16
   14f28:	f7ff fcd2 	bl	148d0 <obj_clearScheduleEntries>
            break;
   14f2c:	e718      	b.n	14d60 <obj_clear+0x17a>
            obj_clearScriptTable(&((gxScriptTable*)object)->scripts);
   14f2e:	f104 0010 	add.w	r0, r4, #16
   14f32:	f7ff fd00 	bl	14936 <obj_clearScriptTable>
            break;
   14f36:	e713      	b.n	14d60 <obj_clear+0x17a>
            ((gxTcpUdpSetup*)object)->ipSetup = NULL;
   14f38:	6165      	str	r5, [r4, #20]
            break;
   14f3a:	e711      	b.n	14d60 <obj_clear+0x17a>
            bb_clear(&((gxUtilityTables*)object)->buffer);
   14f3c:	f104 0014 	add.w	r0, r4, #20
   14f40:	e72e      	b.n	14da0 <obj_clear+0x1ba>
            obj_clearPushObjectList(&((gxPushSetup*)object)->pushObjectList);
   14f42:	f104 0010 	add.w	r0, r4, #16
   14f46:	f7ff fbcd 	bl	146e4 <obj_clearPushObjectList>
            bb_clear(&((gxPushSetup*)object)->destination);
   14f4a:	f104 0020 	add.w	r0, r4, #32
   14f4e:	f7f8 fe70 	bl	dc32 <bb_clear>
            arr_clearKeyValuePair(&((gxPushSetup*)object)->communicationWindow);
   14f52:	f104 0030 	add.w	r0, r4, #48	; 0x30
   14f56:	e728      	b.n	14daa <obj_clear+0x1c4>
            arr_clear(&((gxAccount*)object)->creditReferences);
   14f58:	f104 0024 	add.w	r0, r4, #36	; 0x24
   14f5c:	f7fc f8ad 	bl	110ba <arr_clear>
            arr_clear(&((gxAccount*)object)->chargeReferences);
   14f60:	f104 0030 	add.w	r0, r4, #48	; 0x30
   14f64:	f7fc f8a9 	bl	110ba <arr_clear>
            arr_clear(&((gxAccount*)object)->creditChargeConfigurations);
   14f68:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   14f6c:	f7fc f8a5 	bl	110ba <arr_clear>
            arr_clear(&((gxAccount*)object)->tokenGatewayConfigurations);
   14f70:	f104 0048 	add.w	r0, r4, #72	; 0x48
   14f74:	f7fc f8a1 	bl	110ba <arr_clear>
            bb_clear(&((gxAccount*)object)->currency.name);
   14f78:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   14f7c:	e710      	b.n	14da0 <obj_clear+0x1ba>
            ((gxCredit*)object)->creditConfiguration = DLMS_CREDIT_CONFIGURATION_NONE;
   14f7e:	f884 5020 	strb.w	r5, [r4, #32]
            break;
   14f82:	e6ed      	b.n	14d60 <obj_clear+0x17a>
            ((gxCharge*)object)->chargeConfiguration = DLMS_CHARGE_CONFIGURATION_NONE;
   14f84:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
            obj_clearChargeTables(&((gxCharge*)object)->unitChargeActive.chargeTables);
   14f88:	f104 0024 	add.w	r0, r4, #36	; 0x24
   14f8c:	f7ff fd02 	bl	14994 <obj_clearChargeTables>
            obj_clearChargeTables(&((gxCharge*)object)->unitChargePassive.chargeTables);
   14f90:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   14f94:	f7ff fcfe 	bl	14994 <obj_clearChargeTables>
            break;
   14f98:	e6e2      	b.n	14d60 <obj_clear+0x17a>
            bb_clear(&((gxTokenGateway*)object)->token);
   14f9a:	f104 0010 	add.w	r0, r4, #16
   14f9e:	f7f8 fe48 	bl	dc32 <bb_clear>
            obj_clearByteBufferList(&((gxTokenGateway*)object)->descriptions);
   14fa2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14fa6:	f7ff fcae 	bl	14906 <obj_clearByteBufferList>
            ba_clear(&((gxTokenGateway*)object)->dataValue);
   14faa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14fae:	f7f8 fbe6 	bl	d77e <ba_clear>
            break;
   14fb2:	e6d5      	b.n	14d60 <obj_clear+0x17a>
            gxfree(((gxGsmDiagnostic*)object)->operatorName);
   14fb4:	6920      	ldr	r0, [r4, #16]
   14fb6:	f7f7 fc5d 	bl	c874 <free>
            ((gxGsmDiagnostic*)object)->operatorName = NULL;
   14fba:	6125      	str	r5, [r4, #16]
            arr_clear(&((gxGsmDiagnostic*)object)->adjacentCells);
   14fbc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14fc0:	e6a6      	b.n	14d10 <obj_clear+0x12a>
            bb_clear(&((gxCompactData*)object)->buffer);
   14fc2:	f104 0010 	add.w	r0, r4, #16
   14fc6:	f7f8 fe34 	bl	dc32 <bb_clear>
            obj_clearProfileGenericCaptureObjects(&((gxCompactData*)object)->captureObjects);
   14fca:	f104 001c 	add.w	r0, r4, #28
   14fce:	f7ff fb89 	bl	146e4 <obj_clearPushObjectList>
            bb_clear(&((gxCompactData*)object)->templateDescription);
   14fd2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14fd6:	e6e3      	b.n	14da0 <obj_clear+0x1ba>
            ((gxParameterMonitor*)object)->changedParameter.target = NULL;
   14fd8:	6125      	str	r5, [r4, #16]
            var_clear(&((gxParameterMonitor*)object)->changedParameter.value);
   14fda:	f104 0018 	add.w	r0, r4, #24
   14fde:	f006 fa82 	bl	1b4e6 <var_clear>
            obj_clearParametersList(&((gxParameterMonitor*)object)->parameters);
   14fe2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   14fe6:	e77e      	b.n	14ee6 <obj_clear+0x300>
            arr_clear(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->multicastEntries);
   14fe8:	f104 0010 	add.w	r0, r4, #16
   14fec:	f7fc f865 	bl	110ba <arr_clear>
            arr_clear(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->switchTable);
   14ff0:	f104 001c 	add.w	r0, r4, #28
   14ff4:	f7fc f861 	bl	110ba <arr_clear>
            arr_clear(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->directTable);
   14ff8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   14ffc:	f7fc f85d 	bl	110ba <arr_clear>
            obj_clearAvailableSwitches(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->availableSwitches);
   15000:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15004:	f7ff fdb0 	bl	14b68 <obj_clearAvailableSwitches>
            arr_clear(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->communications);
   15008:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1500c:	e680      	b.n	14d10 <obj_clear+0x12a>
            arr_clear(&((gxArbitrator*)object)->actions);
   1500e:	f104 0010 	add.w	r0, r4, #16
   15012:	f7fc f852 	bl	110ba <arr_clear>
            obj_clearBitArrayList(&((gxArbitrator*)object)->permissionsTable);
   15016:	f104 001c 	add.w	r0, r4, #28
   1501a:	f7ff fd75 	bl	14b08 <obj_clearBitArrayList>
            obj_clearVariantList(&((gxArbitrator*)object)->weightingsTable);
   1501e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15022:	f7ff fd89 	bl	14b38 <obj_clearVariantList>
            obj_clearBitArrayList(&((gxArbitrator*)object)->mostRecentRequestsTable);
   15026:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1502a:	f7ff fd6d 	bl	14b08 <obj_clearBitArrayList>
            break;
   1502e:	e697      	b.n	14d60 <obj_clear+0x17a>
            arr_clear(&((gxFSKMacCounters*)object)->synchronizationRegister);
   15030:	f104 0010 	add.w	r0, r4, #16
   15034:	f7fc f841 	bl	110ba <arr_clear>
            arr_clear(&((gxFSKMacCounters*)object)->broadcastFramesCounter);
   15038:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1503c:	e668      	b.n	14d10 <obj_clear+0x12a>
            arr_clear(&((gxSFSKPhyMacSetUp*)object)->macGroupAddresses);
   1503e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15042:	e665      	b.n	14d10 <obj_clear+0x12a>
            obj_clearByteBufferList(&((gxSFSKReportingSystemList*)object)->reportingSystemList);
   15044:	f104 0010 	add.w	r0, r4, #16
   15048:	f7ff fc5d 	bl	14906 <obj_clearByteBufferList>
}
   1504c:	e688      	b.n	14d60 <obj_clear+0x17a>

0001504e <obj_attributeCount>:

unsigned char obj_attributeCount(gxObject* object)
{
    unsigned char ret;
    switch (object->objectType)
   1504e:	8803      	ldrh	r3, [r0, #0]
   15050:	3b01      	subs	r3, #1
   15052:	2b72      	cmp	r3, #114	; 0x72
   15054:	d865      	bhi.n	15122 <obj_attributeCount+0xd4>
   15056:	e8df f003 	tbb	[pc, r3]
   1505a:	646c      	.short	0x646c
   1505c:	3a66605e 	.word	0x3a66605e
   15060:	6c6c665c 	.word	0x6c6c665c
   15064:	6464466c 	.word	0x6464466c
   15068:	566c643e 	.word	0x566c643e
   1506c:	3a3a3c66 	.word	0x3a3a3c66
   15070:	3a606066 	.word	0x3a606066
   15074:	6868683a 	.word	0x6868683a
   15078:	64646464 	.word	0x64646464
   1507c:	64646464 	.word	0x64646464
   15080:	3c685664 	.word	0x3c685664
   15084:	643a606c 	.word	0x643a606c
   15088:	62643c5c 	.word	0x62643c5c
   1508c:	645c606c 	.word	0x645c606c
   15090:	66646c64 	.word	0x66646c64
   15094:	68646468 	.word	0x68646468
   15098:	643a4e64 	.word	0x643a4e64
   1509c:	3a646864 	.word	0x3a646864
   150a0:	6c64546a 	.word	0x6c64546a
   150a4:	64646464 	.word	0x64646464
   150a8:	5c605e64 	.word	0x5c605e64
   150ac:	3a685662 	.word	0x3a685662
   150b0:	64646464 	.word	0x64646464
   150b4:	64646464 	.word	0x64646464
   150b8:	64646464 	.word	0x64646464
   150bc:	60546464 	.word	0x60546464
   150c0:	64643a5e 	.word	0x64643a5e
   150c4:	64646464 	.word	0x64646464
   150c8:	645a6a58 	.word	0x645a6a58
   150cc:	68          	.byte	0x68
   150cd:	00          	.byte	0x00
        break;
    case DLMS_OBJECT_TYPE_REGISTER:
        ret = 3;
        break;
    case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
        ret = 4;
   150ce:	2004      	movs	r0, #4
        break;
   150d0:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        ret = 10;
   150d2:	200a      	movs	r0, #10
        break;
   150d4:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        //user_list and current_user are in version 2.
        if (object->version > 1)
   150d6:	7883      	ldrb	r3, [r0, #2]
   150d8:	2b01      	cmp	r3, #1
   150da:	d828      	bhi.n	1512e <obj_attributeCount+0xe0>
        {
            ret = 11;
        }
        //Security Setup Reference is from version 1.
        else if (object->version > 0)
   150dc:	2b00      	cmp	r3, #0
            ret = 9;
        }

        else
        {
            ret = 8;
   150de:	bf14      	ite	ne
   150e0:	2009      	movne	r0, #9
   150e2:	2008      	moveq	r0, #8
   150e4:	4770      	bx	lr
        }
        break;
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
        if (object->version < 2)
   150e6:	7883      	ldrb	r3, [r0, #2]
   150e8:	2b01      	cmp	r3, #1
   150ea:	d922      	bls.n	15132 <obj_attributeCount+0xe4>
        {
            ret = 2;
        }
        else if (object->version < 3)
   150ec:	2b02      	cmp	r3, #2
        {
            ret = 4;
   150ee:	bf14      	ite	ne
   150f0:	2006      	movne	r0, #6
   150f2:	2004      	moveq	r0, #4
   150f4:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_GPRS_SETUP:
        ret = 4;
        break;
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
        if (object->version == 0)
   150f6:	7883      	ldrb	r3, [r0, #2]
   150f8:	2b00      	cmp	r3, #0
        {
            ret = 5;
   150fa:	bf14      	ite	ne
   150fc:	2006      	movne	r0, #6
   150fe:	2005      	moveq	r0, #5
   15100:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_LIMITER:
        ret = 11;
        break;
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        ret = 12;
   15102:	200c      	movs	r0, #12
        break;
   15104:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP:
        ret = 2;
        break;
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
        ret = 7;
   15106:	2007      	movs	r0, #7
        break;
   15108:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_DATA_PROTECTION:
        ret = 6;
        break;
    case DLMS_OBJECT_TYPE_ACCOUNT:
        ret = 19;
   1510a:	2013      	movs	r0, #19
        break;
   1510c:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_CREDIT:
        ret = 11;
        break;
    case DLMS_OBJECT_TYPE_CHARGE:
        ret = 13;
   1510e:	200d      	movs	r0, #13
        break;
   15110:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_TARIFF_PLAN:
        ret = 5;
        break;
#endif //DLMS_ITALIAN_STANDARD
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        ret = 8;
   15112:	2008      	movs	r0, #8
        break;
   15114:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_PARAMETER_MONITOR:
        ret = 4;
        break;
#ifndef DLMS_IGNORE_LLC_SSCS_SETUP
    case DLMS_OBJECT_TYPE_LLC_SSCS_SETUP:
        ret = 3;
   15116:	2003      	movs	r0, #3
        break;
   15118:	4770      	bx	lr
#endif //DLMS_IGNORE_LLC_SSCS_SETUP
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS
    case DLMS_OBJECT_TYPE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS:
        ret = 5;
   1511a:	2005      	movs	r0, #5
        break;
   1511c:	4770      	bx	lr
        ret = 8;
        break;
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_SETUP
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS
    case DLMS_OBJECT_TYPE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS:
        ret = 14;
   1511e:	200e      	movs	r0, #14
        break;
   15120:	4770      	bx	lr
        ret = 6;
        break;
#endif //DLMS_IGNORE_ARBITRATOR
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
    case DLMS_OBJECT_TYPE_IEC_8802_LLC_TYPE1_SETUP:
        ret = 1;
   15122:	2001      	movs	r0, #1
        break;
   15124:	4770      	bx	lr
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
    case DLMS_OBJECT_TYPE_IEC_8802_LLC_TYPE2_SETUP:
        ret = 9;
   15126:	2009      	movs	r0, #9
        break;
   15128:	4770      	bx	lr
        return 6;
   1512a:	2006      	movs	r0, #6
   1512c:	4770      	bx	lr
            ret = 11;
   1512e:	200b      	movs	r0, #11
   15130:	4770      	bx	lr
            ret = 2;
   15132:	2002      	movs	r0, #2
#endif
        ret = 1;
        break;
    }
    return ret;
}
   15134:	4770      	bx	lr

00015136 <obj_methodCount>:


unsigned char obj_methodCount(gxObject* object)
{
    unsigned char ret;
    switch (object->objectType)
   15136:	8803      	ldrh	r3, [r0, #0]
   15138:	3b03      	subs	r3, #3
   1513a:	2b70      	cmp	r3, #112	; 0x70
   1513c:	d850      	bhi.n	151e0 <obj_methodCount+0xaa>
   1513e:	e8df f003 	tbb	[pc, r3]
   15142:	3939      	.short	0x3939
   15144:	41434543 	.word	0x41434543
   15148:	49434539 	.word	0x49434539
   1514c:	4f3b4f4f 	.word	0x4f3b4f4f
   15150:	394f4739 	.word	0x394f4739
   15154:	394f4f4f 	.word	0x394f4f4f
   15158:	4f4f394f 	.word	0x4f4f394f
   1515c:	4f4f4539 	.word	0x4f4f4539
   15160:	4f4f4f4f 	.word	0x4f4f4f4f
   15164:	394f4f4f 	.word	0x394f4f4f
   15168:	4f4f454f 	.word	0x4f4f454f
   1516c:	434f394f 	.word	0x434f394f
   15170:	4f394f4f 	.word	0x4f394f4f
   15174:	4f4f4f39 	.word	0x4f4f4f39
   15178:	4f4f4f4f 	.word	0x4f4f4f4f
   1517c:	43394339 	.word	0x43394339
   15180:	434f4f43 	.word	0x434f4f43
   15184:	494f434f 	.word	0x494f434f
   15188:	4f4f4f4f 	.word	0x4f4f4f4f
   1518c:	394f4f4f 	.word	0x394f4f4f
   15190:	394f4f39 	.word	0x394f4f39
   15194:	4f4f4f39 	.word	0x4f4f4f39
   15198:	4f4f4f4f 	.word	0x4f4f4f4f
   1519c:	4f4f4f4f 	.word	0x4f4f4f4f
   151a0:	4f4f4f4f 	.word	0x4f4f4f4f
   151a4:	4d4f4f4f 	.word	0x4d4f4f4f
   151a8:	4f4f4f4f 	.word	0x4f4f4f4f
   151ac:	45454f4f 	.word	0x45454f4f
   151b0:	4f4b      	.short	0x4f4b
   151b2:	39          	.byte	0x39
   151b3:	00          	.byte	0x00
   151b4:	2001      	movs	r0, #1
   151b6:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        if (object->version > 1)
   151b8:	7883      	ldrb	r3, [r0, #2]
   151ba:	2b01      	cmp	r3, #1
        {
            ret = 6;
        }
        else
        {
            ret = 4;
   151bc:	bf8c      	ite	hi
   151be:	2006      	movhi	r0, #6
   151c0:	2004      	movls	r0, #4
   151c2:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_CLOCK:
        ret = 6;
   151c4:	2006      	movs	r0, #6
        break;
   151c6:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
        ret = 2;
   151c8:	2002      	movs	r0, #2
        break;
   151ca:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_IEC_TWISTED_PAIR_SETUP:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_IP4_SETUP:
        ret = 3;
   151cc:	2003      	movs	r0, #3
        break;
   151ce:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
        ret = 0;
        break;
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        ret = 4;
   151d0:	2004      	movs	r0, #4
        break;
   151d2:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_LIMITER:
        ret = 0;
        break;
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        ret = 8;
   151d4:	2008      	movs	r0, #8
        break;
   151d6:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_CREDIT:
        ret = 3;
        break;
    case DLMS_OBJECT_TYPE_CHARGE:
        ret = 5;
   151d8:	2005      	movs	r0, #5
        break;
   151da:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
        ret = 11;
   151dc:	200b      	movs	r0, #11
        break;
   151de:	4770      	bx	lr
        ret = 0;
   151e0:	2000      	movs	r0, #0
        assert(0);
#endif
        ret = 0;
    }
    return ret;
}
   151e2:	4770      	bx	lr

000151e4 <obj_clearParametersList>:
   151e4:	f7ff ba7e 	b.w	146e4 <obj_clearPushObjectList>

000151e8 <clock_updateDST>:
#endif //DLMS_IGNORE_PARAMETER_MONITOR

#ifndef DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_SERVER
void clock_updateDST(gxClock* object, gxtime* value)
{
   151e8:	b538      	push	{r3, r4, r5, lr}
    if (object->enabled && time_compare(&object->begin, value) != 1 && time_compare(&object->end, value) != -1)
   151ea:	7c83      	ldrb	r3, [r0, #18]
{
   151ec:	4604      	mov	r4, r0
   151ee:	460d      	mov	r5, r1
    if (object->enabled && time_compare(&object->begin, value) != 1 && time_compare(&object->end, value) != -1)
   151f0:	b1a3      	cbz	r3, 1521c <clock_updateDST+0x34>
   151f2:	3024      	adds	r0, #36	; 0x24
   151f4:	f7f9 fcae 	bl	eb54 <time_compare>
   151f8:	2801      	cmp	r0, #1
   151fa:	d00f      	beq.n	1521c <clock_updateDST+0x34>
   151fc:	4629      	mov	r1, r5
   151fe:	f104 0014 	add.w	r0, r4, #20
   15202:	f7f9 fca7 	bl	eb54 <time_compare>
   15206:	3001      	adds	r0, #1
   15208:	d008      	beq.n	1521c <clock_updateDST+0x34>
    {
        object->status |= DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
   1520a:	f894 3020 	ldrb.w	r3, [r4, #32]
   1520e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15212:	f884 3020 	strb.w	r3, [r4, #32]
    }
    else
    {
        object->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
    }
    object->time.status = object->status;
   15216:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
   1521a:	bd38      	pop	{r3, r4, r5, pc}
        object->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
   1521c:	f894 3020 	ldrb.w	r3, [r4, #32]
   15220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15224:	e7f5      	b.n	15212 <clock_updateDST+0x2a>

00015226 <cosem_setValue>:
#endif
#include "../include/gxset.h"
#include "../include/cosem.h"

int cosem_setValue(dlmsSettings* settings, gxValueEventArg* e)
{
   15226:	b410      	push	{r4}
   15228:	460b      	mov	r3, r1
    int ret = DLMS_ERROR_CODE_OK;
    if (e->index == 1)
   1522a:	7e09      	ldrb	r1, [r1, #24]
   1522c:	2901      	cmp	r1, #1
   1522e:	d10e      	bne.n	1524e <cosem_setValue+0x28>
    {
#if defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
        ret = cosem_getOctetString2(e->value.byteArr, e->target->logicalName, 6, NULL);
#else
        if (e->value.byteArr == NULL || e->value.byteArr->size - e->value.byteArr->position != 6)
   15230:	6898      	ldr	r0, [r3, #8]
   15232:	2800      	cmp	r0, #0
   15234:	f000 81b0 	beq.w	15598 <cosem_setValue+0x372>
   15238:	88c2      	ldrh	r2, [r0, #6]
   1523a:	8901      	ldrh	r1, [r0, #8]
   1523c:	1a52      	subs	r2, r2, r1
   1523e:	2a06      	cmp	r2, #6
   15240:	f040 81aa 	bne.w	15598 <cosem_setValue+0x372>
        {
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        else
        {
            ret = bb_get(e->value.byteArr, e->target->logicalName, 6);
   15244:	6959      	ldr	r1, [r3, #20]
    default:
        //Unknown type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   15246:	bc10      	pop	{r4}
            ret = bb_get(e->value.byteArr, e->target->logicalName, 6);
   15248:	3106      	adds	r1, #6
   1524a:	f7f8 bee7 	b.w	e01c <bb_get>
    switch (e->target->objectType)
   1524e:	695c      	ldr	r4, [r3, #20]
   15250:	8822      	ldrh	r2, [r4, #0]
   15252:	3a01      	subs	r2, #1
   15254:	2a72      	cmp	r2, #114	; 0x72
   15256:	f200 819f 	bhi.w	15598 <cosem_setValue+0x372>
   1525a:	e8df f012 	tbh	[pc, r2, lsl #1]
   1525e:	0073      	.short	0x0073
   15260:	0077019d 	.word	0x0077019d
   15264:	009f00a9 	.word	0x009f00a9
   15268:	00ef00f4 	.word	0x00ef00f4
   1526c:	010c007c 	.word	0x010c007c
   15270:	01110107 	.word	0x01110107
   15274:	019d0090 	.word	0x019d0090
   15278:	008b019d 	.word	0x008b019d
   1527c:	0102019d 	.word	0x0102019d
   15280:	00bd00d1 	.word	0x00bd00d1
   15284:	00f80086 	.word	0x00f80086
   15288:	00b80081 	.word	0x00b80081
   1528c:	00cc00c2 	.word	0x00cc00c2
   15290:	00e5011b 	.word	0x00e5011b
   15294:	009a0095 	.word	0x009a0095
   15298:	019d019d 	.word	0x019d019d
   1529c:	019d019d 	.word	0x019d019d
   152a0:	019d019d 	.word	0x019d019d
   152a4:	019d019d 	.word	0x019d019d
   152a8:	019d019d 	.word	0x019d019d
   152ac:	01160125 	.word	0x01160125
   152b0:	00a400c7 	.word	0x00a400c7
   152b4:	00ae00ea 	.word	0x00ae00ea
   152b8:	013e019d 	.word	0x013e019d
   152bc:	019d019d 	.word	0x019d019d
   152c0:	01840193 	.word	0x01840193
   152c4:	0189018e 	.word	0x0189018e
   152c8:	019d019d 	.word	0x019d019d
   152cc:	01750198 	.word	0x01750198
   152d0:	017f017a 	.word	0x017f017a
   152d4:	00fd019d 	.word	0x00fd019d
   152d8:	01a10143 	.word	0x01a10143
   152dc:	014800b3 	.word	0x014800b3
   152e0:	019d019d 	.word	0x019d019d
   152e4:	019d0170 	.word	0x019d0170
   152e8:	00db00d6 	.word	0x00db00d6
   152ec:	019d00e0 	.word	0x019d00e0
   152f0:	019d0120 	.word	0x019d0120
   152f4:	019d019d 	.word	0x019d019d
   152f8:	019d019d 	.word	0x019d019d
   152fc:	0152014d 	.word	0x0152014d
   15300:	015c0157 	.word	0x015c0157
   15304:	01660161 	.word	0x01660161
   15308:	019d016b 	.word	0x019d016b
   1530c:	019d019d 	.word	0x019d019d
   15310:	019d019d 	.word	0x019d019d
   15314:	019d019d 	.word	0x019d019d
   15318:	019d019d 	.word	0x019d019d
   1531c:	019d019d 	.word	0x019d019d
   15320:	019d019d 	.word	0x019d019d
   15324:	01a1019d 	.word	0x01a1019d
   15328:	01a101a1 	.word	0x01a101a1
   1532c:	019d01a1 	.word	0x019d01a1
   15330:	019d019d 	.word	0x019d019d
   15334:	019d019d 	.word	0x019d019d
   15338:	012a019d 	.word	0x012a019d
   1533c:	0134012f 	.word	0x0134012f
   15340:	0139019d 	.word	0x0139019d
}
   15344:	bc10      	pop	{r4}
        ret = cosem_setData(e);
   15346:	4618      	mov	r0, r3
   15348:	f000 b92c 	b.w	155a4 <cosem_setData>
        ret = cosem_setRegister((gxRegister*)e->target, e->index, &e->value);
   1534c:	4620      	mov	r0, r4
   1534e:	461a      	mov	r2, r3
}
   15350:	bc10      	pop	{r4}
        ret = cosem_setRegister((gxRegister*)e->target, e->index, &e->value);
   15352:	f000 b932 	b.w	155ba <cosem_setRegister>
        ret = cosem_setClock(settings, (gxClock*)e->target, e->index, &e->value);
   15356:	460a      	mov	r2, r1
   15358:	4621      	mov	r1, r4
}
   1535a:	bc10      	pop	{r4}
        ret = cosem_setClock(settings, (gxClock*)e->target, e->index, &e->value);
   1535c:	f000 b9b4 	b.w	156c8 <cosem_setClock>
        ret = cosem_setActionSchedule(settings, (gxActionSchedule*)e->target, e->index, &e->value);
   15360:	460a      	mov	r2, r1
   15362:	4621      	mov	r1, r4
}
   15364:	bc10      	pop	{r4}
        ret = cosem_setActionSchedule(settings, (gxActionSchedule*)e->target, e->index, &e->value);
   15366:	f000 bc86 	b.w	15c76 <cosem_setActionSchedule>
        ret = cosem_setActivityCalendar(settings, (gxActivityCalendar*)e->target, e->index, &e->value);
   1536a:	460a      	mov	r2, r1
   1536c:	4621      	mov	r1, r4
}
   1536e:	bc10      	pop	{r4}
        ret = cosem_setActivityCalendar(settings, (gxActivityCalendar*)e->target, e->index, &e->value);
   15370:	f000 bc19 	b.w	15ba6 <cosem_setActivityCalendar>
        ret = cosem_setAssociationLogicalName(settings, (gxAssociationLogicalName*)e->target, e->index, &e->value);
   15374:	460a      	mov	r2, r1
   15376:	4621      	mov	r1, r4
}
   15378:	bc10      	pop	{r4}
        ret = cosem_setAssociationLogicalName(settings, (gxAssociationLogicalName*)e->target, e->index, &e->value);
   1537a:	f000 bdef 	b.w	15f5c <cosem_setAssociationLogicalName>
        ret = cosem_setAssociationShortName(settings, (gxAssociationShortName*)e->target, e->index, &e->value);
   1537e:	460a      	mov	r2, r1
   15380:	4621      	mov	r1, r4
}
   15382:	bc10      	pop	{r4}
        ret = cosem_setAssociationShortName(settings, (gxAssociationShortName*)e->target, e->index, &e->value);
   15384:	f001 ba7a 	b.w	1687c <cosem_setAssociationShortName>
        ret = cosem_setAutoAnswer((gxAutoAnswer*)e->target, e->index, &e->value);
   15388:	4620      	mov	r0, r4
   1538a:	461a      	mov	r2, r3
}
   1538c:	bc10      	pop	{r4}
        ret = cosem_setAutoAnswer((gxAutoAnswer*)e->target, e->index, &e->value);
   1538e:	f001 baa6 	b.w	168de <cosem_setAutoAnswer>
        ret = cosem_setAutoConnect((gxAutoConnect*)e->target, e->index, &e->value);
   15392:	4620      	mov	r0, r4
   15394:	461a      	mov	r2, r3
}
   15396:	bc10      	pop	{r4}
        ret = cosem_setAutoConnect((gxAutoConnect*)e->target, e->index, &e->value);
   15398:	f001 bb3e 	b.w	16a18 <cosem_setAutoConnect>
        ret = cosem_setDemandRegister((gxDemandRegister*)e->target, e->index, &e->value);
   1539c:	4620      	mov	r0, r4
   1539e:	461a      	mov	r2, r3
}
   153a0:	bc10      	pop	{r4}
        ret = cosem_setDemandRegister((gxDemandRegister*)e->target, e->index, &e->value);
   153a2:	f001 bbe7 	b.w	16b74 <cosem_setDemandRegister>
        ret = cosem_setMacAddressSetup((gxMacAddressSetup*)e->target, e->index, &e->value);
   153a6:	4620      	mov	r0, r4
   153a8:	461a      	mov	r2, r3
}
   153aa:	bc10      	pop	{r4}
        ret = cosem_setMacAddressSetup((gxMacAddressSetup*)e->target, e->index, &e->value);
   153ac:	f001 bc6e 	b.w	16c8c <cosem_setMacAddressSetup>
        ret = cosem_setExtendedRegister((gxExtendedRegister*)e->target, e->index, &e->value);
   153b0:	4620      	mov	r0, r4
   153b2:	461a      	mov	r2, r3
}
   153b4:	bc10      	pop	{r4}
        ret = cosem_setExtendedRegister((gxExtendedRegister*)e->target, e->index, &e->value);
   153b6:	f001 bc81 	b.w	16cbc <cosem_setExtendedRegister>
        ret = cosem_setGprsSetup((gxGPRSSetup*)e->target, e->index, &e->value);
   153ba:	4620      	mov	r0, r4
   153bc:	461a      	mov	r2, r3
}
   153be:	bc10      	pop	{r4}
        ret = cosem_setGprsSetup((gxGPRSSetup*)e->target, e->index, &e->value);
   153c0:	f001 bcd1 	b.w	16d66 <cosem_setGprsSetup>
        ret = cosem_setSecuritySetup((gxSecuritySetup*)e->target, e->index, &e->value);
   153c4:	4620      	mov	r0, r4
   153c6:	461a      	mov	r2, r3
}
   153c8:	bc10      	pop	{r4}
        ret = cosem_setSecuritySetup((gxSecuritySetup*)e->target, e->index, &e->value);
   153ca:	f001 bd98 	b.w	16efe <cosem_setSecuritySetup>
        ret = cosem_setIecHdlcSetup((gxIecHdlcSetup*)e->target, e->index, &e->value);
   153ce:	4620      	mov	r0, r4
   153d0:	461a      	mov	r2, r3
}
   153d2:	bc10      	pop	{r4}
        ret = cosem_setIecHdlcSetup((gxIecHdlcSetup*)e->target, e->index, &e->value);
   153d4:	f001 bec8 	b.w	17168 <cosem_setIecHdlcSetup>
        ret = cosem_setIecLocalPortSetup((gxLocalPortSetup*)e->target, e->index, &e->value);
   153d8:	4620      	mov	r0, r4
   153da:	461a      	mov	r2, r3
}
   153dc:	bc10      	pop	{r4}
        ret = cosem_setIecLocalPortSetup((gxLocalPortSetup*)e->target, e->index, &e->value);
   153de:	f001 befa 	b.w	171d6 <cosem_setIecLocalPortSetup>
        ret = cosem_setIecTwistedPairSetup((gxIecTwistedPairSetup*)e->target, e->index, &e->value);
   153e2:	4620      	mov	r0, r4
   153e4:	461a      	mov	r2, r3
}
   153e6:	bc10      	pop	{r4}
        ret = cosem_setIecTwistedPairSetup((gxIecTwistedPairSetup*)e->target, e->index, &e->value);
   153e8:	f001 bf3a 	b.w	17260 <cosem_setIecTwistedPairSetup>
        ret = cosem_setIP4Setup(settings, (gxIp4Setup*)e->target, e->index, &e->value);
   153ec:	460a      	mov	r2, r1
   153ee:	4621      	mov	r1, r4
}
   153f0:	bc10      	pop	{r4}
        ret = cosem_setIP4Setup(settings, (gxIp4Setup*)e->target, e->index, &e->value);
   153f2:	f001 bf87 	b.w	17304 <cosem_setIP4Setup>
        ret = cosem_setMbusSlavePortSetup((gxMbusSlavePortSetup*)e->target, e->index, &e->value);
   153f6:	4620      	mov	r0, r4
   153f8:	461a      	mov	r2, r3
}
   153fa:	bc10      	pop	{r4}
        ret = cosem_setMbusSlavePortSetup((gxMbusSlavePortSetup*)e->target, e->index, &e->value);
   153fc:	f002 b86c 	b.w	174d8 <cosem_setMbusSlavePortSetup>
        ret = cosem_setImageTransfer((gxImageTransfer*)e->target, e->index, &e->value);
   15400:	4620      	mov	r0, r4
   15402:	461a      	mov	r2, r3
}
   15404:	bc10      	pop	{r4}
        ret = cosem_setImageTransfer((gxImageTransfer*)e->target, e->index, &e->value);
   15406:	f003 befd 	b.w	19204 <cosem_setImageTransfer>
        ret = cosem_setDisconnectControl((gxDisconnectControl*)e->target, e->index, &e->value);
   1540a:	4620      	mov	r0, r4
   1540c:	461a      	mov	r2, r3
}
   1540e:	bc10      	pop	{r4}
        ret = cosem_setDisconnectControl((gxDisconnectControl*)e->target, e->index, &e->value);
   15410:	f002 b881 	b.w	17516 <cosem_setDisconnectControl>
        ret = cosem_setLimiter(settings, (gxLimiter*)e->target, e->index, &e->value);
   15414:	460a      	mov	r2, r1
   15416:	4621      	mov	r1, r4
}
   15418:	bc10      	pop	{r4}
        ret = cosem_setLimiter(settings, (gxLimiter*)e->target, e->index, &e->value);
   1541a:	f002 b894 	b.w	17546 <cosem_setLimiter>
        ret = cosem_setmMbusClient(settings, (gxMBusClient*)e->target, e->index, &e->value);
   1541e:	460a      	mov	r2, r1
   15420:	4621      	mov	r1, r4
}
   15422:	bc10      	pop	{r4}
        ret = cosem_setmMbusClient(settings, (gxMBusClient*)e->target, e->index, &e->value);
   15424:	f002 ba17 	b.w	17856 <cosem_setmMbusClient>
        ret = cosem_setModemConfiguration((gxModemConfiguration*)e->target, e->index, &e->value);
   15428:	4620      	mov	r0, r4
   1542a:	461a      	mov	r2, r3
}
   1542c:	bc10      	pop	{r4}
        ret = cosem_setModemConfiguration((gxModemConfiguration*)e->target, e->index, &e->value);
   1542e:	f002 baef 	b.w	17a10 <cosem_setModemConfiguration>
        ret = cosem_setPppSetup(settings, (gxPppSetup*)e->target, e->index, &e->value);
   15432:	460a      	mov	r2, r1
   15434:	4621      	mov	r1, r4
}
   15436:	bc10      	pop	{r4}
        ret = cosem_setPppSetup(settings, (gxPppSetup*)e->target, e->index, &e->value);
   15438:	f002 bb88 	b.w	17b4c <cosem_setPppSetup>
        ret = cosem_setProfileGeneric(settings, (gxProfileGeneric*)e->target, e->index, &e->value);
   1543c:	460a      	mov	r2, r1
   1543e:	4621      	mov	r1, r4
}
   15440:	bc10      	pop	{r4}
        ret = cosem_setProfileGeneric(settings, (gxProfileGeneric*)e->target, e->index, &e->value);
   15442:	f7ee be2d 	b.w	40a0 <cosem_setProfileGeneric>
}
   15446:	bc10      	pop	{r4}
        ret = cosem_setRegisterActivation(settings, e);
   15448:	4619      	mov	r1, r3
   1544a:	f002 bc93 	b.w	17d74 <cosem_setRegisterActivation>
        ret = cosem_setRegisterMonitor(settings, (gxRegisterMonitor*)e->target, e->index, &e->value);
   1544e:	460a      	mov	r2, r1
   15450:	4621      	mov	r1, r4
}
   15452:	bc10      	pop	{r4}
        ret = cosem_setRegisterMonitor(settings, (gxRegisterMonitor*)e->target, e->index, &e->value);
   15454:	f002 bd60 	b.w	17f18 <cosem_setRegisterMonitor>
        ret = cosem_setRegistertable((gxRegisterTable*)e->target, e->index, &e->value);
   15458:	4620      	mov	r0, r4
   1545a:	461a      	mov	r2, r3
}
   1545c:	bc10      	pop	{r4}
        ret = cosem_setRegistertable((gxRegisterTable*)e->target, e->index, &e->value);
   1545e:	f000 b8df 	b.w	15620 <cosem_setRegistertable>
        ret = cosem_setSapAssignment((gxSapAssignment*)e->target, e->index, &e->value);
   15462:	4620      	mov	r0, r4
   15464:	461a      	mov	r2, r3
}
   15466:	bc10      	pop	{r4}
        ret = cosem_setSapAssignment((gxSapAssignment*)e->target, e->index, &e->value);
   15468:	f002 bea9 	b.w	181be <cosem_setSapAssignment>
        ret = cosem_setSchedule(settings, (gxSchedule*)e->target, e->index, &e->value);
   1546c:	460a      	mov	r2, r1
   1546e:	4621      	mov	r1, r4
}
   15470:	bc10      	pop	{r4}
        ret = cosem_setSchedule(settings, (gxSchedule*)e->target, e->index, &e->value);
   15472:	f002 befb 	b.w	1826c <cosem_setSchedule>
        ret = cosem_setScriptTable(settings, (gxScriptTable*)e->target, e->index, &e->value);
   15476:	460a      	mov	r2, r1
   15478:	4621      	mov	r1, r4
}
   1547a:	bc10      	pop	{r4}
        ret = cosem_setScriptTable(settings, (gxScriptTable*)e->target, e->index, &e->value);
   1547c:	f003 b811 	b.w	184a2 <cosem_setScriptTable>
        ret = cosem_setSpecialDaysTable((gxSpecialDaysTable*)e->target, e->index, &e->value);
   15480:	4620      	mov	r0, r4
   15482:	461a      	mov	r2, r3
}
   15484:	bc10      	pop	{r4}
        ret = cosem_setSpecialDaysTable((gxSpecialDaysTable*)e->target, e->index, &e->value);
   15486:	f003 b97b 	b.w	18780 <cosem_setSpecialDaysTable>
        ret = cosem_setTcpUdpSetup(settings, (gxTcpUdpSetup*)e->target, e->index, &e->value);
   1548a:	460a      	mov	r2, r1
   1548c:	4621      	mov	r1, r4
}
   1548e:	bc10      	pop	{r4}
        ret = cosem_setTcpUdpSetup(settings, (gxTcpUdpSetup*)e->target, e->index, &e->value);
   15490:	f003 b9df 	b.w	18852 <cosem_setTcpUdpSetup>
        ret = cosem_setUtilityTables((gxUtilityTables*)e->target, e->index, &e->value);
   15494:	4620      	mov	r0, r4
   15496:	461a      	mov	r2, r3
}
   15498:	bc10      	pop	{r4}
        ret = cosem_setUtilityTables((gxUtilityTables*)e->target, e->index, &e->value);
   1549a:	f001 bffc 	b.w	17496 <cosem_setUtilityTables>
        ret = cosem_setMbusMasterPortSetup((gxMBusMasterPortSetup*)e->target, e->index, &e->value);
   1549e:	4620      	mov	r0, r4
   154a0:	461a      	mov	r2, r3
}
   154a2:	bc10      	pop	{r4}
        ret = cosem_setMbusMasterPortSetup((gxMBusMasterPortSetup*)e->target, e->index, &e->value);
   154a4:	f003 ba0b 	b.w	188be <cosem_setMbusMasterPortSetup>
        ret = cosem_setPushSetup(settings, (gxPushSetup*)e->target, e->index, &e->value);
   154a8:	460a      	mov	r2, r1
   154aa:	4621      	mov	r1, r4
}
   154ac:	bc10      	pop	{r4}
        ret = cosem_setPushSetup(settings, (gxPushSetup*)e->target, e->index, &e->value);
   154ae:	f003 ba13 	b.w	188d8 <cosem_setPushSetup>
        ret = cosem_setAccount((gxAccount*)e->target, e->index, &e->value);
   154b2:	4620      	mov	r0, r4
   154b4:	461a      	mov	r2, r3
}
   154b6:	bc10      	pop	{r4}
        ret = cosem_setAccount((gxAccount*)e->target, e->index, &e->value);
   154b8:	f003 bcd5 	b.w	18e66 <cosem_setAccount>
        ret = cosem_setCredit((gxCredit*)e->target, e->index, &e->value);
   154bc:	4620      	mov	r0, r4
   154be:	461a      	mov	r2, r3
}
   154c0:	bc10      	pop	{r4}
        ret = cosem_setCredit((gxCredit*)e->target, e->index, &e->value);
   154c2:	f003 bc70 	b.w	18da6 <cosem_setCredit>
        ret = cosem_setCharge(settings, (gxCharge*)e->target, e->index, &e->value);
   154c6:	460a      	mov	r2, r1
   154c8:	4621      	mov	r1, r4
}
   154ca:	bc10      	pop	{r4}
        ret = cosem_setCharge(settings, (gxCharge*)e->target, e->index, &e->value);
   154cc:	f003 bbed 	b.w	18caa <cosem_setCharge>
        ret = cosem_setTokenGateway((gxTokenGateway*)e->target, e->index, &e->value);
   154d0:	4620      	mov	r0, r4
   154d2:	461a      	mov	r2, r3
}
   154d4:	bc10      	pop	{r4}
        ret = cosem_setTokenGateway((gxTokenGateway*)e->target, e->index, &e->value);
   154d6:	f004 b90f 	b.w	196f8 <cosem_setTokenGateway>
        ret = cosem_setGsmDiagnostic((gxGsmDiagnostic*)e->target, e->index, &e->value);
   154da:	4620      	mov	r0, r4
   154dc:	461a      	mov	r2, r3
}
   154de:	bc10      	pop	{r4}
        ret = cosem_setGsmDiagnostic((gxGsmDiagnostic*)e->target, e->index, &e->value);
   154e0:	f003 bfd3 	b.w	1948a <cosem_setGsmDiagnostic>
        ret = cosem_setCompactData(settings, (gxCompactData*)e->target, e->index, &e->value);
   154e4:	460a      	mov	r2, r1
   154e6:	4621      	mov	r1, r4
}
   154e8:	bc10      	pop	{r4}
        ret = cosem_setCompactData(settings, (gxCompactData*)e->target, e->index, &e->value);
   154ea:	f004 baf4 	b.w	19ad6 <cosem_setCompactData>
        ret = cosem_setParameterMonitor(settings, (gxParameterMonitor*)e->target, e->index, &e->value);
   154ee:	460a      	mov	r2, r1
   154f0:	4621      	mov	r1, r4
}
   154f2:	bc10      	pop	{r4}
        ret = cosem_setParameterMonitor(settings, (gxParameterMonitor*)e->target, e->index, &e->value);
   154f4:	f004 bb28 	b.w	19b48 <cosem_setParameterMonitor>
        ret = cosem_setLlcSscsSetup(settings, (gxLlcSscsSetup*)e->target, e->index, &e->value);
   154f8:	460a      	mov	r2, r1
   154fa:	4621      	mov	r1, r4
}
   154fc:	bc10      	pop	{r4}
        ret = cosem_setLlcSscsSetup(settings, (gxLlcSscsSetup*)e->target, e->index, &e->value);
   154fe:	f004 bc24 	b.w	19d4a <cosem_setLlcSscsSetup>
        ret = cosem_setPrimeNbOfdmPlcPhysicalLayerCounters(settings, (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target, e->index, &e->value);
   15502:	460a      	mov	r2, r1
   15504:	4621      	mov	r1, r4
}
   15506:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcPhysicalLayerCounters(settings, (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target, e->index, &e->value);
   15508:	f004 bc32 	b.w	19d70 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters>
        ret = cosem_setPrimeNbOfdmPlcMacSetup(settings, (gxPrimeNbOfdmPlcMacSetup*)e->target, e->index, &e->value);
   1550c:	460a      	mov	r2, r1
   1550e:	4621      	mov	r1, r4
}
   15510:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacSetup(settings, (gxPrimeNbOfdmPlcMacSetup*)e->target, e->index, &e->value);
   15512:	f004 bc4b 	b.w	19dac <cosem_setPrimeNbOfdmPlcMacSetup>
        ret = cosem_setPrimeNbOfdmPlcMacFunctionalParameters(settings, (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target, e->index, &e->value);
   15516:	460a      	mov	r2, r1
   15518:	4621      	mov	r1, r4
}
   1551a:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacFunctionalParameters(settings, (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target, e->index, &e->value);
   1551c:	f004 bc72 	b.w	19e04 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters>
        ret = cosem_setPrimeNbOfdmPlcMacCounters(settings, (gxPrimeNbOfdmPlcMacCounters*)e->target, e->index, &e->value);
   15520:	460a      	mov	r2, r1
   15522:	4621      	mov	r1, r4
}
   15524:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacCounters(settings, (gxPrimeNbOfdmPlcMacCounters*)e->target, e->index, &e->value);
   15526:	f004 bcc6 	b.w	19eb6 <cosem_setPrimeNbOfdmPlcMacCounters>
        ret = cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData(settings, (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target, e->index, &e->value);
   1552a:	460a      	mov	r2, r1
   1552c:	4621      	mov	r1, r4
}
   1552e:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData(settings, (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target, e->index, &e->value);
   15530:	f004 bed2 	b.w	1a2d8 <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData>
        ret = cosem_setPrimeNbOfdmPlcApplicationsIdentification(settings, (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target, e->index, &e->value);
   15534:	460a      	mov	r2, r1
   15536:	4621      	mov	r1, r4
}
   15538:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcApplicationsIdentification(settings, (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target, e->index, &e->value);
   1553a:	f004 bee4 	b.w	1a306 <cosem_setPrimeNbOfdmPlcApplicationsIdentification>
        ret = cosem_setArbitrator(settings, (gxArbitrator*)e->target, e->index, &e->value);
   1553e:	460a      	mov	r2, r1
   15540:	4621      	mov	r1, r4
}
   15542:	bc10      	pop	{r4}
        ret = cosem_setArbitrator(settings, (gxArbitrator*)e->target, e->index, &e->value);
   15544:	f004 bf05 	b.w	1a352 <cosem_setArbitrator>
        ret = cosem_setIec8802LlcType1Setup(settings, (gxIec8802LlcType1Setup*)e->target, e->index, &e->value);
   15548:	460a      	mov	r2, r1
   1554a:	4621      	mov	r1, r4
}
   1554c:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType1Setup(settings, (gxIec8802LlcType1Setup*)e->target, e->index, &e->value);
   1554e:	f004 bfea 	b.w	1a526 <cosem_setIec8802LlcType1Setup>
        ret = cosem_setIec8802LlcType2Setup(settings, (gxIec8802LlcType2Setup*)e->target, e->index, &e->value);
   15552:	460a      	mov	r2, r1
   15554:	4621      	mov	r1, r4
}
   15556:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType2Setup(settings, (gxIec8802LlcType2Setup*)e->target, e->index, &e->value);
   15558:	f004 bff2 	b.w	1a540 <cosem_setIec8802LlcType2Setup>
        ret = cosem_setIec8802LlcType3Setup(settings, (gxIec8802LlcType3Setup*)e->target, e->index, &e->value);
   1555c:	460a      	mov	r2, r1
   1555e:	4621      	mov	r1, r4
}
   15560:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType3Setup(settings, (gxIec8802LlcType3Setup*)e->target, e->index, &e->value);
   15562:	f005 b81d 	b.w	1a5a0 <cosem_setIec8802LlcType3Setup>
        ret = cosem_setSFSKActiveInitiator(settings, (gxSFSKActiveInitiator*)e->target, e->index, &e->value);
   15566:	460a      	mov	r2, r1
   15568:	4621      	mov	r1, r4
}
   1556a:	bc10      	pop	{r4}
        ret = cosem_setSFSKActiveInitiator(settings, (gxSFSKActiveInitiator*)e->target, e->index, &e->value);
   1556c:	f005 b83b 	b.w	1a5e6 <cosem_setSFSKActiveInitiator>
        ret = cosem_setFSKMacCounters(settings, (gxFSKMacCounters*)e->target, e->index, &e->value);
   15570:	460a      	mov	r2, r1
   15572:	4621      	mov	r1, r4
}
   15574:	bc10      	pop	{r4}
        ret = cosem_setFSKMacCounters(settings, (gxFSKMacCounters*)e->target, e->index, &e->value);
   15576:	f005 b87c 	b.w	1a672 <cosem_setFSKMacCounters>
        ret = cosem_setSFSKMacSynchronizationTimeouts(settings, (gxSFSKMacSynchronizationTimeouts*)e->target, e->index, &e->value);
   1557a:	460a      	mov	r2, r1
   1557c:	4621      	mov	r1, r4
}
   1557e:	bc10      	pop	{r4}
        ret = cosem_setSFSKMacSynchronizationTimeouts(settings, (gxSFSKMacSynchronizationTimeouts*)e->target, e->index, &e->value);
   15580:	f005 b963 	b.w	1a84a <cosem_setSFSKMacSynchronizationTimeouts>
        ret = cosem_setSFSKPhyMacSetUp(settings, (gxSFSKPhyMacSetUp*)e->target, e->index, &e->value);
   15584:	460a      	mov	r2, r1
   15586:	4621      	mov	r1, r4
}
   15588:	bc10      	pop	{r4}
        ret = cosem_setSFSKPhyMacSetUp(settings, (gxSFSKPhyMacSetUp*)e->target, e->index, &e->value);
   1558a:	f005 b97c 	b.w	1a886 <cosem_setSFSKPhyMacSetUp>
        ret = cosem_setSFSKReportingSystemList(settings, (gxSFSKReportingSystemList*)e->target, e->index, &e->value);
   1558e:	460a      	mov	r2, r1
   15590:	4621      	mov	r1, r4
}
   15592:	bc10      	pop	{r4}
        ret = cosem_setSFSKReportingSystemList(settings, (gxSFSKReportingSystemList*)e->target, e->index, &e->value);
   15594:	f005 ba0c 	b.w	1a9b0 <cosem_setSFSKReportingSystemList>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15598:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   1559c:	bc10      	pop	{r4}
   1559e:	4770      	bx	lr
    int ret = DLMS_ERROR_CODE_OK;
   155a0:	2000      	movs	r0, #0
   155a2:	e7fb      	b.n	1559c <cosem_setValue+0x376>

000155a4 <cosem_setData>:
    if (e->index == 2)
   155a4:	7e03      	ldrb	r3, [r0, #24]
   155a6:	2b02      	cmp	r3, #2
{
   155a8:	4601      	mov	r1, r0
    if (e->index == 2)
   155aa:	d103      	bne.n	155b4 <cosem_setData+0x10>
        ret = var_copy(&((gxData*)e->target)->value, &e->value);
   155ac:	6940      	ldr	r0, [r0, #20]
   155ae:	3010      	adds	r0, #16
   155b0:	f7ee bff8 	b.w	45a4 <var_copy>
}
   155b4:	f44f 7081 	mov.w	r0, #258	; 0x102
   155b8:	4770      	bx	lr

000155ba <cosem_setRegister>:
    if (index == 2)
   155ba:	2902      	cmp	r1, #2
{
   155bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   155be:	4605      	mov	r5, r0
   155c0:	4616      	mov	r6, r2
    if (index == 2)
   155c2:	d107      	bne.n	155d4 <cosem_setRegister+0x1a>
        ret = var_copy(&object->value, value);
   155c4:	4611      	mov	r1, r2
   155c6:	3010      	adds	r0, #16
   155c8:	f7ee ffec 	bl	45a4 <var_copy>
   155cc:	4604      	mov	r4, r0
}
   155ce:	4620      	mov	r0, r4
   155d0:	b002      	add	sp, #8
   155d2:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   155d4:	2903      	cmp	r1, #3
   155d6:	d120      	bne.n	1561a <cosem_setRegister+0x60>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   155d8:	7813      	ldrb	r3, [r2, #0]
   155da:	2b02      	cmp	r3, #2
   155dc:	d11d      	bne.n	1561a <cosem_setRegister+0x60>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   155de:	68b0      	ldr	r0, [r6, #8]
   155e0:	aa01      	add	r2, sp, #4
   155e2:	2100      	movs	r1, #0
   155e4:	f005 fffd 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   155e8:	4604      	mov	r4, r0
   155ea:	2800      	cmp	r0, #0
   155ec:	d1ef      	bne.n	155ce <cosem_setRegister+0x14>
        object->scaler = (char)var_toInteger(tmp);
   155ee:	9801      	ldr	r0, [sp, #4]
   155f0:	f006 f971 	bl	1b8d6 <var_toInteger>
   155f4:	f885 0020 	strb.w	r0, [r5, #32]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   155f8:	68b0      	ldr	r0, [r6, #8]
   155fa:	aa01      	add	r2, sp, #4
   155fc:	2101      	movs	r1, #1
   155fe:	f005 fff0 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15602:	4604      	mov	r4, r0
   15604:	2800      	cmp	r0, #0
   15606:	d1e2      	bne.n	155ce <cosem_setRegister+0x14>
        object->unit = (unsigned char)var_toInteger(tmp);
   15608:	9801      	ldr	r0, [sp, #4]
   1560a:	f006 f964 	bl	1b8d6 <var_toInteger>
        object->unitRead = 1;
   1560e:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   15610:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
        object->unitRead = 1;
   15614:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15618:	e7d9      	b.n	155ce <cosem_setRegister+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1561a:	f44f 7481 	mov.w	r4, #258	; 0x102
   1561e:	e7d6      	b.n	155ce <cosem_setRegister+0x14>

00015620 <cosem_setRegistertable>:
    if (index == 2)
   15620:	2902      	cmp	r1, #2
{
   15622:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15626:	4605      	mov	r5, r0
   15628:	4616      	mov	r6, r2
    if (index == 2)
   1562a:	d127      	bne.n	1567c <cosem_setRegistertable+0x5c>
        if (value->Arr != NULL)
   1562c:	6893      	ldr	r3, [r2, #8]
   1562e:	bb13      	cbnz	r3, 15676 <cosem_setRegistertable+0x56>
    int pos, ret = 0;
   15630:	2400      	movs	r4, #0
}
   15632:	4620      	mov	r0, r4
   15634:	b002      	add	sp, #8
   15636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1563a:	aa01      	add	r2, sp, #4
   1563c:	4639      	mov	r1, r7
   1563e:	f005 ffd0 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15642:	4604      	mov	r4, r0
   15644:	2800      	cmp	r0, #0
   15646:	d1f4      	bne.n	15632 <cosem_setRegistertable+0x12>
                tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   15648:	2010      	movs	r0, #16
   1564a:	f7f7 f90b 	bl	c864 <malloc>
   1564e:	4680      	mov	r8, r0
                var_init(tmp2);
   15650:	f005 fded 	bl	1b22e <var_init>
                ret = var_copy(tmp2, tmp);
   15654:	9901      	ldr	r1, [sp, #4]
   15656:	4640      	mov	r0, r8
   15658:	f7ee ffa4 	bl	45a4 <var_copy>
                if (ret != 0)
   1565c:	4604      	mov	r4, r0
   1565e:	2800      	cmp	r0, #0
   15660:	d1e7      	bne.n	15632 <cosem_setRegistertable+0x12>
                va_push(&object->tableCellValues, tmp2);
   15662:	4641      	mov	r1, r8
   15664:	4628      	mov	r0, r5
   15666:	f005 fef0 	bl	1b44a <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1566a:	3701      	adds	r7, #1
   1566c:	68b0      	ldr	r0, [r6, #8]
   1566e:	88c3      	ldrh	r3, [r0, #6]
   15670:	42bb      	cmp	r3, r7
   15672:	d1e2      	bne.n	1563a <cosem_setRegistertable+0x1a>
   15674:	e7dc      	b.n	15630 <cosem_setRegistertable+0x10>
   15676:	2700      	movs	r7, #0
                va_push(&object->tableCellValues, tmp2);
   15678:	3510      	adds	r5, #16
   1567a:	e7f7      	b.n	1566c <cosem_setRegistertable+0x4c>
    else if (index == 4)
   1567c:	2904      	cmp	r1, #4
   1567e:	d120      	bne.n	156c2 <cosem_setRegistertable+0xa2>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   15680:	7813      	ldrb	r3, [r2, #0]
   15682:	2b02      	cmp	r3, #2
   15684:	d11d      	bne.n	156c2 <cosem_setRegistertable+0xa2>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   15686:	68b0      	ldr	r0, [r6, #8]
   15688:	aa01      	add	r2, sp, #4
   1568a:	2100      	movs	r1, #0
   1568c:	f005 ffa9 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15690:	4604      	mov	r4, r0
   15692:	2800      	cmp	r0, #0
   15694:	d1cd      	bne.n	15632 <cosem_setRegistertable+0x12>
        object->scaler = (char)var_toInteger(tmp);
   15696:	9801      	ldr	r0, [sp, #4]
   15698:	f006 f91d 	bl	1b8d6 <var_toInteger>
   1569c:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        ret = va_getByIndex(value->Arr, 1, &tmp);
   156a0:	68b0      	ldr	r0, [r6, #8]
   156a2:	aa01      	add	r2, sp, #4
   156a4:	2101      	movs	r1, #1
   156a6:	f005 ff9c 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   156aa:	4604      	mov	r4, r0
   156ac:	2800      	cmp	r0, #0
   156ae:	d1c0      	bne.n	15632 <cosem_setRegistertable+0x12>
        object->unit = (unsigned char)var_toInteger(tmp);
   156b0:	9801      	ldr	r0, [sp, #4]
   156b2:	f006 f910 	bl	1b8d6 <var_toInteger>
        object->unitRead = 1;
   156b6:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   156b8:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        object->unitRead = 1;
   156bc:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   156c0:	e7b7      	b.n	15632 <cosem_setRegistertable+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   156c2:	f44f 7481 	mov.w	r4, #258	; 0x102
   156c6:	e7b4      	b.n	15632 <cosem_setRegistertable+0x12>

000156c8 <cosem_setClock>:
{
   156c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (index == 2)
   156ca:	2a02      	cmp	r2, #2
{
   156cc:	b085      	sub	sp, #20
   156ce:	4606      	mov	r6, r0
   156d0:	460d      	mov	r5, r1
   156d2:	461c      	mov	r4, r3
    if (index == 2)
   156d4:	d129      	bne.n	1572a <cosem_setClock+0x62>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   156d6:	781b      	ldrb	r3, [r3, #0]
   156d8:	2b09      	cmp	r3, #9
   156da:	d121      	bne.n	15720 <cosem_setClock+0x58>
   156dc:	68a3      	ldr	r3, [r4, #8]
   156de:	b1fb      	cbz	r3, 15720 <cosem_setClock+0x58>
            var_init(&tmp);
   156e0:	4668      	mov	r0, sp
   156e2:	f005 fda4 	bl	1b22e <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   156e6:	4620      	mov	r0, r4
   156e8:	466a      	mov	r2, sp
   156ea:	2119      	movs	r1, #25
   156ec:	f7fb f9aa 	bl	10a44 <dlms_changeType2>
            if (ret != 0)
   156f0:	4604      	mov	r4, r0
   156f2:	b990      	cbnz	r0, 1571a <cosem_setClock+0x52>
            time_copy(&object->time, tmp.dateTime);
   156f4:	f105 0734 	add.w	r7, r5, #52	; 0x34
   156f8:	9902      	ldr	r1, [sp, #8]
   156fa:	4638      	mov	r0, r7
   156fc:	f7f9 f9ef 	bl	eade <time_copy>
            if (settings->server)
   15700:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   15704:	b133      	cbz	r3, 15714 <cosem_setClock+0x4c>
                time_toUTC(&object->time);
   15706:	4638      	mov	r0, r7
   15708:	f7f9 fa31 	bl	eb6e <time_toUTC>
                clock_updateDST(object, &object->time);
   1570c:	4639      	mov	r1, r7
   1570e:	4628      	mov	r0, r5
   15710:	f7ff fd6a 	bl	151e8 <clock_updateDST>
            var_clear(&tmp);
   15714:	4668      	mov	r0, sp
   15716:	f005 fee6 	bl	1b4e6 <var_clear>
}
   1571a:	4620      	mov	r0, r4
   1571c:	b005      	add	sp, #20
   1571e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            time_clear(&object->time);
   15720:	f105 0034 	add.w	r0, r5, #52	; 0x34
            time_clear(&object->end);
   15724:	f7f9 f9aa 	bl	ea7c <time_clear>
   15728:	e005      	b.n	15736 <cosem_setClock+0x6e>
    else if (index == 3)
   1572a:	2a03      	cmp	r2, #3
   1572c:	d105      	bne.n	1573a <cosem_setClock+0x72>
        object->timeZone = (short)var_toInteger(value);
   1572e:	4618      	mov	r0, r3
   15730:	f006 f8d1 	bl	1b8d6 <var_toInteger>
   15734:	8628      	strh	r0, [r5, #48]	; 0x30
    int ret = DLMS_ERROR_CODE_OK;
   15736:	2400      	movs	r4, #0
   15738:	e7ef      	b.n	1571a <cosem_setClock+0x52>
    else if (index == 4)
   1573a:	2a04      	cmp	r2, #4
   1573c:	d105      	bne.n	1574a <cosem_setClock+0x82>
        object->status = (DLMS_CLOCK_STATUS)var_toInteger(value);
   1573e:	4618      	mov	r0, r3
   15740:	f006 f8c9 	bl	1b8d6 <var_toInteger>
   15744:	f885 0020 	strb.w	r0, [r5, #32]
   15748:	e7f5      	b.n	15736 <cosem_setClock+0x6e>
    else if (index == 5)
   1574a:	2a05      	cmp	r2, #5
   1574c:	d118      	bne.n	15780 <cosem_setClock+0xb8>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1574e:	781b      	ldrb	r3, [r3, #0]
   15750:	2b09      	cmp	r3, #9
   15752:	d112      	bne.n	1577a <cosem_setClock+0xb2>
   15754:	68a3      	ldr	r3, [r4, #8]
   15756:	b183      	cbz	r3, 1577a <cosem_setClock+0xb2>
            var_init(&tmp);
   15758:	4668      	mov	r0, sp
   1575a:	f005 fd68 	bl	1b22e <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   1575e:	4620      	mov	r0, r4
   15760:	466a      	mov	r2, sp
   15762:	2119      	movs	r1, #25
   15764:	f7fb f96e 	bl	10a44 <dlms_changeType2>
            if (ret != 0)
   15768:	4604      	mov	r4, r0
   1576a:	2800      	cmp	r0, #0
   1576c:	d1d5      	bne.n	1571a <cosem_setClock+0x52>
            time_copy(&object->begin, tmp.dateTime);
   1576e:	9902      	ldr	r1, [sp, #8]
   15770:	f105 0024 	add.w	r0, r5, #36	; 0x24
   15774:	f7f9 f9b3 	bl	eade <time_copy>
   15778:	e7cc      	b.n	15714 <cosem_setClock+0x4c>
            time_clear(&object->begin);
   1577a:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1577e:	e7d1      	b.n	15724 <cosem_setClock+0x5c>
    else if (index == 6)
   15780:	2a06      	cmp	r2, #6
   15782:	d116      	bne.n	157b2 <cosem_setClock+0xea>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   15784:	781b      	ldrb	r3, [r3, #0]
   15786:	2b09      	cmp	r3, #9
   15788:	d110      	bne.n	157ac <cosem_setClock+0xe4>
   1578a:	68a3      	ldr	r3, [r4, #8]
   1578c:	b173      	cbz	r3, 157ac <cosem_setClock+0xe4>
            var_init(&tmp);
   1578e:	4668      	mov	r0, sp
   15790:	f005 fd4d 	bl	1b22e <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   15794:	4620      	mov	r0, r4
   15796:	466a      	mov	r2, sp
   15798:	2119      	movs	r1, #25
   1579a:	f7fb f953 	bl	10a44 <dlms_changeType2>
            if (ret != 0)
   1579e:	4604      	mov	r4, r0
   157a0:	2800      	cmp	r0, #0
   157a2:	d1ba      	bne.n	1571a <cosem_setClock+0x52>
            time_copy(&object->end, tmp.dateTime);
   157a4:	9902      	ldr	r1, [sp, #8]
   157a6:	f105 0014 	add.w	r0, r5, #20
   157aa:	e7e3      	b.n	15774 <cosem_setClock+0xac>
            time_clear(&object->end);
   157ac:	f105 0014 	add.w	r0, r5, #20
   157b0:	e7b8      	b.n	15724 <cosem_setClock+0x5c>
    else if (index == 7)
   157b2:	2a07      	cmp	r2, #7
   157b4:	d10d      	bne.n	157d2 <cosem_setClock+0x10a>
        object->deviation = (char)var_toInteger(value);
   157b6:	4618      	mov	r0, r3
   157b8:	f006 f88d 	bl	1b8d6 <var_toInteger>
   157bc:	7468      	strb	r0, [r5, #17]
        if (settings->server)
   157be:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   157c2:	2b00      	cmp	r3, #0
   157c4:	d0b7      	beq.n	15736 <cosem_setClock+0x6e>
            clock_updateDST(object, &object->time);
   157c6:	f105 0134 	add.w	r1, r5, #52	; 0x34
   157ca:	4628      	mov	r0, r5
   157cc:	f7ff fd0c 	bl	151e8 <clock_updateDST>
   157d0:	e7b1      	b.n	15736 <cosem_setClock+0x6e>
    else if (index == 8)
   157d2:	2a08      	cmp	r2, #8
   157d4:	d104      	bne.n	157e0 <cosem_setClock+0x118>
        object->enabled = (unsigned char)var_toInteger(value);
   157d6:	4618      	mov	r0, r3
   157d8:	f006 f87d 	bl	1b8d6 <var_toInteger>
   157dc:	74a8      	strb	r0, [r5, #18]
        if (settings->server)
   157de:	e7ee      	b.n	157be <cosem_setClock+0xf6>
    else if (index == 9)
   157e0:	2a09      	cmp	r2, #9
   157e2:	d104      	bne.n	157ee <cosem_setClock+0x126>
        object->clockBase = (DLMS_CLOCK_BASE)var_toInteger(value);
   157e4:	4618      	mov	r0, r3
   157e6:	f006 f876 	bl	1b8d6 <var_toInteger>
   157ea:	7428      	strb	r0, [r5, #16]
   157ec:	e7a3      	b.n	15736 <cosem_setClock+0x6e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   157ee:	f44f 7481 	mov.w	r4, #258	; 0x102
   157f2:	e792      	b.n	1571a <cosem_setClock+0x52>

000157f4 <updateSeasonProfile>:
{
   157f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   157f8:	b086      	sub	sp, #24
   157fa:	460f      	mov	r7, r1
   157fc:	4680      	mov	r8, r0
    obj_clearSeasonProfile(profile);
   157fe:	f7fe ffe3 	bl	147c8 <obj_clearSeasonProfile>
    var_init(&tm);
   15802:	a802      	add	r0, sp, #8
   15804:	f005 fd13 	bl	1b22e <var_init>
    for (pos = 0; pos != data->Arr->size; ++pos)
   15808:	2600      	movs	r6, #0
   1580a:	68bb      	ldr	r3, [r7, #8]
   1580c:	88db      	ldrh	r3, [r3, #6]
   1580e:	42b3      	cmp	r3, r6
   15810:	d104      	bne.n	1581c <updateSeasonProfile+0x28>
   15812:	2400      	movs	r4, #0
}
   15814:	4620      	mov	r0, r4
   15816:	b006      	add	sp, #24
   15818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sp = (gxSeasonProfile*)gxmalloc(sizeof(gxSeasonProfile));
   1581c:	2024      	movs	r0, #36	; 0x24
   1581e:	f7f7 f821 	bl	c864 <malloc>
        if (sp == NULL)
   15822:	4605      	mov	r5, r0
   15824:	2800      	cmp	r0, #0
   15826:	d055      	beq.n	158d4 <updateSeasonProfile+0xe0>
        ret = va_getByIndex(data->Arr, pos, &it);
   15828:	68b8      	ldr	r0, [r7, #8]
   1582a:	aa01      	add	r2, sp, #4
   1582c:	4631      	mov	r1, r6
   1582e:	f005 fed8 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15832:	4604      	mov	r4, r0
   15834:	2800      	cmp	r0, #0
   15836:	d150      	bne.n	158da <updateSeasonProfile+0xe6>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   15838:	9b01      	ldr	r3, [sp, #4]
   1583a:	4601      	mov	r1, r0
   1583c:	466a      	mov	r2, sp
   1583e:	6898      	ldr	r0, [r3, #8]
   15840:	f005 fecf 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15844:	4604      	mov	r4, r0
   15846:	2800      	cmp	r0, #0
   15848:	d147      	bne.n	158da <updateSeasonProfile+0xe6>
        BYTE_BUFFER_INIT(&sp->name);
   1584a:	4628      	mov	r0, r5
   1584c:	f7f8 f82e 	bl	d8ac <bb_init>
        bb_set2(&sp->name, tmp->byteArr, 0, bb_size(tmp->byteArr));
   15850:	9b00      	ldr	r3, [sp, #0]
   15852:	f8d3 9008 	ldr.w	r9, [r3, #8]
   15856:	4648      	mov	r0, r9
   15858:	f7f8 f825 	bl	d8a6 <bb_size>
   1585c:	4622      	mov	r2, r4
   1585e:	4603      	mov	r3, r0
   15860:	4649      	mov	r1, r9
   15862:	4628      	mov	r0, r5
   15864:	f7f8 f9a0 	bl	dba8 <bb_set2>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   15868:	9b01      	ldr	r3, [sp, #4]
   1586a:	466a      	mov	r2, sp
   1586c:	6898      	ldr	r0, [r3, #8]
   1586e:	2101      	movs	r1, #1
   15870:	f005 feb7 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15874:	4604      	mov	r4, r0
   15876:	bb80      	cbnz	r0, 158da <updateSeasonProfile+0xe6>
        ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &tm);
   15878:	9800      	ldr	r0, [sp, #0]
   1587a:	aa02      	add	r2, sp, #8
   1587c:	2119      	movs	r1, #25
   1587e:	f7fb f8e1 	bl	10a44 <dlms_changeType2>
        if (ret != DLMS_ERROR_CODE_OK)
   15882:	4604      	mov	r4, r0
   15884:	bb48      	cbnz	r0, 158da <updateSeasonProfile+0xe6>
        time_copy(&sp->start, tm.dateTime);
   15886:	9904      	ldr	r1, [sp, #16]
   15888:	f105 000c 	add.w	r0, r5, #12
   1588c:	f7f9 f927 	bl	eade <time_copy>
        var_clear(&tm);
   15890:	a802      	add	r0, sp, #8
   15892:	f005 fe28 	bl	1b4e6 <var_clear>
        ret = va_getByIndex(it->Arr, 2, &tmp);
   15896:	9b01      	ldr	r3, [sp, #4]
   15898:	466a      	mov	r2, sp
   1589a:	6898      	ldr	r0, [r3, #8]
   1589c:	2102      	movs	r1, #2
   1589e:	f005 fea0 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   158a2:	4604      	mov	r4, r0
   158a4:	b9c8      	cbnz	r0, 158da <updateSeasonProfile+0xe6>
        BYTE_BUFFER_INIT(&sp->weekName);
   158a6:	f105 0918 	add.w	r9, r5, #24
   158aa:	4648      	mov	r0, r9
   158ac:	f7f7 fffe 	bl	d8ac <bb_init>
        bb_set2(&sp->weekName, tmp->byteArr, 0, bb_size(tmp->byteArr));
   158b0:	9b00      	ldr	r3, [sp, #0]
   158b2:	f8d3 a008 	ldr.w	sl, [r3, #8]
   158b6:	4650      	mov	r0, sl
   158b8:	f7f7 fff5 	bl	d8a6 <bb_size>
   158bc:	4622      	mov	r2, r4
   158be:	4603      	mov	r3, r0
   158c0:	4651      	mov	r1, sl
   158c2:	4648      	mov	r0, r9
   158c4:	f7f8 f970 	bl	dba8 <bb_set2>
        arr_push(profile, sp);
   158c8:	4629      	mov	r1, r5
   158ca:	4640      	mov	r0, r8
   158cc:	f7fb fbe0 	bl	11090 <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   158d0:	3601      	adds	r6, #1
   158d2:	e79a      	b.n	1580a <updateSeasonProfile+0x16>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
   158d4:	f44f 7482 	mov.w	r4, #260	; 0x104
   158d8:	e79c      	b.n	15814 <updateSeasonProfile+0x20>
        gxfree(sp);
   158da:	4628      	mov	r0, r5
   158dc:	f7f6 ffca 	bl	c874 <free>
   158e0:	e798      	b.n	15814 <updateSeasonProfile+0x20>

000158e2 <updateWeekProfileTable>:
{
   158e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   158e6:	4680      	mov	r8, r0
   158e8:	460f      	mov	r7, r1
    obj_clearWeekProfileTable(profile);
   158ea:	f7fe ff8b 	bl	14804 <obj_clearWeekProfileTable>
    for (pos = 0; pos != data->Arr->size; ++pos)
   158ee:	2600      	movs	r6, #0
   158f0:	68bb      	ldr	r3, [r7, #8]
   158f2:	88db      	ldrh	r3, [r3, #6]
   158f4:	42b3      	cmp	r3, r6
   158f6:	d104      	bne.n	15902 <updateWeekProfileTable+0x20>
   158f8:	2400      	movs	r4, #0
}
   158fa:	4620      	mov	r0, r4
   158fc:	b003      	add	sp, #12
   158fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        wp = (gxWeekProfile*)gxmalloc(sizeof(gxWeekProfile));
   15902:	2014      	movs	r0, #20
   15904:	f7f6 ffae 	bl	c864 <malloc>
        if (wp == NULL)
   15908:	4605      	mov	r5, r0
   1590a:	2800      	cmp	r0, #0
   1590c:	d07c      	beq.n	15a08 <updateWeekProfileTable+0x126>
        ret = va_getByIndex(data->Arr, pos, &it);
   1590e:	68b8      	ldr	r0, [r7, #8]
   15910:	aa01      	add	r2, sp, #4
   15912:	4631      	mov	r1, r6
   15914:	f005 fe65 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15918:	4604      	mov	r4, r0
   1591a:	2800      	cmp	r0, #0
   1591c:	d177      	bne.n	15a0e <updateWeekProfileTable+0x12c>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   1591e:	9b01      	ldr	r3, [sp, #4]
   15920:	4601      	mov	r1, r0
   15922:	466a      	mov	r2, sp
   15924:	6898      	ldr	r0, [r3, #8]
   15926:	f005 fe5c 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1592a:	4604      	mov	r4, r0
   1592c:	2800      	cmp	r0, #0
   1592e:	d16e      	bne.n	15a0e <updateWeekProfileTable+0x12c>
        BYTE_BUFFER_INIT(&wp->name);
   15930:	4628      	mov	r0, r5
   15932:	f7f7 ffbb 	bl	d8ac <bb_init>
        bb_set2(&wp->name, tmp->byteArr, 0, bb_size(tmp->byteArr));
   15936:	9b00      	ldr	r3, [sp, #0]
   15938:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1593c:	4648      	mov	r0, r9
   1593e:	f7f7 ffb2 	bl	d8a6 <bb_size>
   15942:	4622      	mov	r2, r4
   15944:	4603      	mov	r3, r0
   15946:	4649      	mov	r1, r9
   15948:	4628      	mov	r0, r5
   1594a:	f7f8 f92d 	bl	dba8 <bb_set2>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   1594e:	9b01      	ldr	r3, [sp, #4]
   15950:	466a      	mov	r2, sp
   15952:	6898      	ldr	r0, [r3, #8]
   15954:	2101      	movs	r1, #1
   15956:	f005 fe44 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1595a:	4604      	mov	r4, r0
   1595c:	2800      	cmp	r0, #0
   1595e:	d156      	bne.n	15a0e <updateWeekProfileTable+0x12c>
        wp->monday = (unsigned char)var_toInteger(tmp);
   15960:	9800      	ldr	r0, [sp, #0]
   15962:	f005 ffb8 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(it->Arr, 2, &tmp);
   15966:	9b01      	ldr	r3, [sp, #4]
        wp->monday = (unsigned char)var_toInteger(tmp);
   15968:	7328      	strb	r0, [r5, #12]
        ret = va_getByIndex(it->Arr, 2, &tmp);
   1596a:	6898      	ldr	r0, [r3, #8]
   1596c:	466a      	mov	r2, sp
   1596e:	2102      	movs	r1, #2
   15970:	f005 fe37 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15974:	4604      	mov	r4, r0
   15976:	2800      	cmp	r0, #0
   15978:	d149      	bne.n	15a0e <updateWeekProfileTable+0x12c>
        wp->tuesday = (unsigned char)var_toInteger(tmp);
   1597a:	9800      	ldr	r0, [sp, #0]
   1597c:	f005 ffab 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(it->Arr, 3, &tmp);
   15980:	9b01      	ldr	r3, [sp, #4]
        wp->tuesday = (unsigned char)var_toInteger(tmp);
   15982:	7368      	strb	r0, [r5, #13]
        ret = va_getByIndex(it->Arr, 3, &tmp);
   15984:	6898      	ldr	r0, [r3, #8]
   15986:	466a      	mov	r2, sp
   15988:	2103      	movs	r1, #3
   1598a:	f005 fe2a 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1598e:	4604      	mov	r4, r0
   15990:	2800      	cmp	r0, #0
   15992:	d13c      	bne.n	15a0e <updateWeekProfileTable+0x12c>
        wp->wednesday = (unsigned char)var_toInteger(tmp);
   15994:	9800      	ldr	r0, [sp, #0]
   15996:	f005 ff9e 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(it->Arr, 4, &tmp);
   1599a:	9b01      	ldr	r3, [sp, #4]
        wp->wednesday = (unsigned char)var_toInteger(tmp);
   1599c:	73a8      	strb	r0, [r5, #14]
        ret = va_getByIndex(it->Arr, 4, &tmp);
   1599e:	6898      	ldr	r0, [r3, #8]
   159a0:	466a      	mov	r2, sp
   159a2:	2104      	movs	r1, #4
   159a4:	f005 fe1d 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   159a8:	4604      	mov	r4, r0
   159aa:	bb80      	cbnz	r0, 15a0e <updateWeekProfileTable+0x12c>
        wp->thursday = (unsigned char)var_toInteger(tmp);
   159ac:	9800      	ldr	r0, [sp, #0]
   159ae:	f005 ff92 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(it->Arr, 5, &tmp);
   159b2:	9b01      	ldr	r3, [sp, #4]
        wp->thursday = (unsigned char)var_toInteger(tmp);
   159b4:	73e8      	strb	r0, [r5, #15]
        ret = va_getByIndex(it->Arr, 5, &tmp);
   159b6:	6898      	ldr	r0, [r3, #8]
   159b8:	466a      	mov	r2, sp
   159ba:	2105      	movs	r1, #5
   159bc:	f005 fe11 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   159c0:	4604      	mov	r4, r0
   159c2:	bb20      	cbnz	r0, 15a0e <updateWeekProfileTable+0x12c>
        wp->friday = (unsigned char)var_toInteger(tmp);
   159c4:	9800      	ldr	r0, [sp, #0]
   159c6:	f005 ff86 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(it->Arr, 6, &tmp);
   159ca:	9b01      	ldr	r3, [sp, #4]
        wp->friday = (unsigned char)var_toInteger(tmp);
   159cc:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(it->Arr, 6, &tmp);
   159ce:	6898      	ldr	r0, [r3, #8]
   159d0:	466a      	mov	r2, sp
   159d2:	2106      	movs	r1, #6
   159d4:	f005 fe05 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   159d8:	4604      	mov	r4, r0
   159da:	b9c0      	cbnz	r0, 15a0e <updateWeekProfileTable+0x12c>
        wp->saturday = (unsigned char)var_toInteger(tmp);
   159dc:	9800      	ldr	r0, [sp, #0]
   159de:	f005 ff7a 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(it->Arr, 7, &tmp);
   159e2:	9b01      	ldr	r3, [sp, #4]
        wp->saturday = (unsigned char)var_toInteger(tmp);
   159e4:	7468      	strb	r0, [r5, #17]
        ret = va_getByIndex(it->Arr, 7, &tmp);
   159e6:	6898      	ldr	r0, [r3, #8]
   159e8:	466a      	mov	r2, sp
   159ea:	2107      	movs	r1, #7
   159ec:	f005 fdf9 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   159f0:	4604      	mov	r4, r0
   159f2:	b960      	cbnz	r0, 15a0e <updateWeekProfileTable+0x12c>
        wp->sunday = (unsigned char)var_toInteger(tmp);
   159f4:	9800      	ldr	r0, [sp, #0]
   159f6:	f005 ff6e 	bl	1b8d6 <var_toInteger>
        arr_push(profile, wp);
   159fa:	4629      	mov	r1, r5
        wp->sunday = (unsigned char)var_toInteger(tmp);
   159fc:	74a8      	strb	r0, [r5, #18]
        arr_push(profile, wp);
   159fe:	4640      	mov	r0, r8
   15a00:	f7fb fb46 	bl	11090 <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   15a04:	3601      	adds	r6, #1
   15a06:	e773      	b.n	158f0 <updateWeekProfileTable+0xe>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   15a08:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   15a0c:	e775      	b.n	158fa <updateWeekProfileTable+0x18>
        gxfree(wp);
   15a0e:	4628      	mov	r0, r5
   15a10:	f7f6 ff30 	bl	c874 <free>
   15a14:	e771      	b.n	158fa <updateWeekProfileTable+0x18>

00015a16 <updateDayProfileTable>:
{
   15a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a1a:	4680      	mov	r8, r0
   15a1c:	b08b      	sub	sp, #44	; 0x2c
    obj_clearDayProfileTable(profile);
   15a1e:	4608      	mov	r0, r1
{
   15a20:	460f      	mov	r7, r1
   15a22:	4691      	mov	r9, r2
    obj_clearDayProfileTable(profile);
   15a24:	f7fe ff08 	bl	14838 <obj_clearDayProfileTable>
    gxDayProfileAction* ac = NULL;
   15a28:	2400      	movs	r4, #0
    for (pos = 0; pos != data->Arr->size; ++pos)
   15a2a:	4626      	mov	r6, r4
   15a2c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   15a30:	88db      	ldrh	r3, [r3, #6]
   15a32:	42b3      	cmp	r3, r6
   15a34:	d101      	bne.n	15a3a <updateDayProfileTable+0x24>
   15a36:	2100      	movs	r1, #0
   15a38:	e099      	b.n	15b6e <updateDayProfileTable+0x158>
        dp = (gxDayProfile*)gxmalloc(sizeof(gxDayProfile));
   15a3a:	2010      	movs	r0, #16
   15a3c:	f7f6 ff12 	bl	c864 <malloc>
        if (dp == NULL)
   15a40:	4605      	mov	r5, r0
   15a42:	2800      	cmp	r0, #0
   15a44:	f000 80a2 	beq.w	15b8c <updateDayProfileTable+0x176>
        arr_init(&dp->daySchedules);
   15a48:	f100 0b04 	add.w	fp, r0, #4
   15a4c:	4658      	mov	r0, fp
   15a4e:	f7fb faf0 	bl	11032 <arr_init>
        ret = va_getByIndex(data->Arr, pos, &it);
   15a52:	4631      	mov	r1, r6
   15a54:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15a58:	aa04      	add	r2, sp, #16
   15a5a:	f005 fdc2 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15a5e:	4601      	mov	r1, r0
   15a60:	2800      	cmp	r0, #0
   15a62:	d168      	bne.n	15b36 <updateDayProfileTable+0x120>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   15a64:	9b04      	ldr	r3, [sp, #16]
   15a66:	aa02      	add	r2, sp, #8
   15a68:	6898      	ldr	r0, [r3, #8]
   15a6a:	f005 fdba 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15a6e:	4601      	mov	r1, r0
   15a70:	2800      	cmp	r0, #0
   15a72:	d160      	bne.n	15b36 <updateDayProfileTable+0x120>
        dp->dayId = (unsigned char)var_toInteger(tmp);
   15a74:	9802      	ldr	r0, [sp, #8]
   15a76:	f005 ff2e 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   15a7a:	9b04      	ldr	r3, [sp, #16]
        dp->dayId = (unsigned char)var_toInteger(tmp);
   15a7c:	7028      	strb	r0, [r5, #0]
        ret = va_getByIndex(it->Arr, 1, &tmp);
   15a7e:	2101      	movs	r1, #1
   15a80:	6898      	ldr	r0, [r3, #8]
   15a82:	aa02      	add	r2, sp, #8
   15a84:	f005 fdad 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15a88:	4601      	mov	r1, r0
   15a8a:	2800      	cmp	r0, #0
   15a8c:	d153      	bne.n	15b36 <updateDayProfileTable+0x120>
        for (pos2 = 0; pos2 != tmp->Arr->size; ++pos2)
   15a8e:	4682      	mov	sl, r0
   15a90:	9b02      	ldr	r3, [sp, #8]
   15a92:	689b      	ldr	r3, [r3, #8]
   15a94:	88db      	ldrh	r3, [r3, #6]
   15a96:	4553      	cmp	r3, sl
   15a98:	d105      	bne.n	15aa6 <updateDayProfileTable+0x90>
        arr_push(profile, dp);
   15a9a:	4629      	mov	r1, r5
   15a9c:	4638      	mov	r0, r7
   15a9e:	f7fb faf7 	bl	11090 <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   15aa2:	3601      	adds	r6, #1
   15aa4:	e7c2      	b.n	15a2c <updateDayProfileTable+0x16>
            ac = (gxDayProfileAction*)gxmalloc(sizeof(gxDayProfileAction));
   15aa6:	2014      	movs	r0, #20
   15aa8:	f7f6 fedc 	bl	c864 <malloc>
            if (ac == NULL)
   15aac:	4604      	mov	r4, r0
   15aae:	2800      	cmp	r0, #0
   15ab0:	d076      	beq.n	15ba0 <updateDayProfileTable+0x18a>
            ret = va_getByIndex(tmp->Arr, pos2, &it2);
   15ab2:	9b02      	ldr	r3, [sp, #8]
   15ab4:	4651      	mov	r1, sl
   15ab6:	6898      	ldr	r0, [r3, #8]
   15ab8:	aa05      	add	r2, sp, #20
   15aba:	f005 fd92 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   15abe:	4601      	mov	r1, r0
   15ac0:	2800      	cmp	r0, #0
   15ac2:	d138      	bne.n	15b36 <updateDayProfileTable+0x120>
            ret = va_getByIndex(it2->Arr, 0, &tmp2);
   15ac4:	9b05      	ldr	r3, [sp, #20]
   15ac6:	aa03      	add	r2, sp, #12
   15ac8:	6898      	ldr	r0, [r3, #8]
   15aca:	f005 fd8a 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   15ace:	4601      	mov	r1, r0
   15ad0:	2800      	cmp	r0, #0
   15ad2:	d130      	bne.n	15b36 <updateDayProfileTable+0x120>
            var_init(&tm);
   15ad4:	a806      	add	r0, sp, #24
   15ad6:	f005 fbaa 	bl	1b22e <var_init>
            ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_TIME, &tm);
   15ada:	211b      	movs	r1, #27
   15adc:	9803      	ldr	r0, [sp, #12]
   15ade:	aa06      	add	r2, sp, #24
   15ae0:	f7fa ffb0 	bl	10a44 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   15ae4:	4601      	mov	r1, r0
   15ae6:	bb30      	cbnz	r0, 15b36 <updateDayProfileTable+0x120>
            time_copy(&ac->startTime, tm.dateTime);
   15ae8:	9908      	ldr	r1, [sp, #32]
   15aea:	4620      	mov	r0, r4
   15aec:	f7f8 fff7 	bl	eade <time_copy>
            var_clear(&tm);
   15af0:	a806      	add	r0, sp, #24
   15af2:	f005 fcf8 	bl	1b4e6 <var_clear>
            ret = va_getByIndex(it2->Arr, 1, &tmp2);
   15af6:	9b05      	ldr	r3, [sp, #20]
   15af8:	2101      	movs	r1, #1
   15afa:	6898      	ldr	r0, [r3, #8]
   15afc:	aa03      	add	r2, sp, #12
   15afe:	f005 fd70 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   15b02:	4601      	mov	r1, r0
   15b04:	b9b8      	cbnz	r0, 15b36 <updateDayProfileTable+0x120>
            if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp2->byteArr->data, &ac->script)) != 0)
   15b06:	9a03      	ldr	r2, [sp, #12]
   15b08:	6892      	ldr	r2, [r2, #8]
   15b0a:	f104 030c 	add.w	r3, r4, #12
   15b0e:	2109      	movs	r1, #9
   15b10:	6812      	ldr	r2, [r2, #0]
   15b12:	9301      	str	r3, [sp, #4]
   15b14:	f108 0098 	add.w	r0, r8, #152	; 0x98
   15b18:	f005 fb20 	bl	1b15c <oa_findByLN>
   15b1c:	4601      	mov	r1, r0
   15b1e:	b950      	cbnz	r0, 15b36 <updateDayProfileTable+0x120>
            if (ac->script == NULL)
   15b20:	68e2      	ldr	r2, [r4, #12]
   15b22:	9b01      	ldr	r3, [sp, #4]
   15b24:	b16a      	cbz	r2, 15b42 <updateDayProfileTable+0x12c>
            ret = va_getByIndex(it2->Arr, 2, &tmp2);
   15b26:	9b05      	ldr	r3, [sp, #20]
   15b28:	2102      	movs	r1, #2
   15b2a:	6898      	ldr	r0, [r3, #8]
   15b2c:	aa03      	add	r2, sp, #12
   15b2e:	f005 fd58 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   15b32:	4601      	mov	r1, r0
   15b34:	b1f8      	cbz	r0, 15b76 <updateDayProfileTable+0x160>
            gxfree(dp);
   15b36:	4628      	mov	r0, r5
   15b38:	9101      	str	r1, [sp, #4]
   15b3a:	f7f6 fe9b 	bl	c874 <free>
   15b3e:	9901      	ldr	r1, [sp, #4]
   15b40:	e026      	b.n	15b90 <updateDayProfileTable+0x17a>
                if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, &ac->script)) != 0)
   15b42:	4619      	mov	r1, r3
   15b44:	2009      	movs	r0, #9
   15b46:	f7ec fadf 	bl	2108 <cosem_createObject>
   15b4a:	4601      	mov	r1, r0
   15b4c:	b978      	cbnz	r0, 15b6e <updateDayProfileTable+0x158>
                memcpy(ac->script->logicalName, tmp2->byteArr->data, tmp2->byteArr->size);
   15b4e:	9b03      	ldr	r3, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15b50:	68e0      	ldr	r0, [r4, #12]
   15b52:	689b      	ldr	r3, [r3, #8]
   15b54:	3006      	adds	r0, #6
   15b56:	6819      	ldr	r1, [r3, #0]
   15b58:	88da      	ldrh	r2, [r3, #6]
   15b5a:	f007 fe99 	bl	1d890 <memcpy>
                ret = oa_push(&settings->releasedObjects, ac->script);
   15b5e:	68e1      	ldr	r1, [r4, #12]
   15b60:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   15b64:	f005 fa6b 	bl	1b03e <oa_push>
                if (ret != DLMS_ERROR_CODE_OK)
   15b68:	4601      	mov	r1, r0
   15b6a:	2800      	cmp	r0, #0
   15b6c:	d0db      	beq.n	15b26 <updateDayProfileTable+0x110>
}
   15b6e:	4608      	mov	r0, r1
   15b70:	b00b      	add	sp, #44	; 0x2c
   15b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ac->scriptSelector = (uint16_t)var_toInteger(tmp2);
   15b76:	9803      	ldr	r0, [sp, #12]
   15b78:	f005 fead 	bl	1b8d6 <var_toInteger>
            arr_push(&dp->daySchedules, ac);
   15b7c:	4621      	mov	r1, r4
            ac->scriptSelector = (uint16_t)var_toInteger(tmp2);
   15b7e:	8220      	strh	r0, [r4, #16]
            arr_push(&dp->daySchedules, ac);
   15b80:	4658      	mov	r0, fp
   15b82:	f7fb fa85 	bl	11090 <arr_push>
        for (pos2 = 0; pos2 != tmp->Arr->size; ++pos2)
   15b86:	f10a 0a01 	add.w	sl, sl, #1
   15b8a:	e781      	b.n	15a90 <updateDayProfileTable+0x7a>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   15b8c:	f44f 7182 	mov.w	r1, #260	; 0x104
        if (ac)
   15b90:	2c00      	cmp	r4, #0
   15b92:	d0ec      	beq.n	15b6e <updateDayProfileTable+0x158>
            gxfree(ac);
   15b94:	4620      	mov	r0, r4
   15b96:	9101      	str	r1, [sp, #4]
   15b98:	f7f6 fe6c 	bl	c874 <free>
   15b9c:	9901      	ldr	r1, [sp, #4]
   15b9e:	e7e6      	b.n	15b6e <updateDayProfileTable+0x158>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
   15ba0:	f44f 7182 	mov.w	r1, #260	; 0x104
   15ba4:	e7e3      	b.n	15b6e <updateDayProfileTable+0x158>

00015ba6 <cosem_setActivityCalendar>:
{
   15ba6:	b530      	push	{r4, r5, lr}
    if (index == 2)
   15ba8:	2a02      	cmp	r2, #2
{
   15baa:	b085      	sub	sp, #20
   15bac:	460d      	mov	r5, r1
   15bae:	461c      	mov	r4, r3
    if (index == 2)
   15bb0:	d10e      	bne.n	15bd0 <cosem_setActivityCalendar+0x2a>
        bb_clear(&object->calendarNameActive);
   15bb2:	3510      	adds	r5, #16
        bb_clear(&object->calendarNamePassive);
   15bb4:	4628      	mov	r0, r5
   15bb6:	f7f8 f83c 	bl	dc32 <bb_clear>
        ret = bb_set2(&object->calendarNamePassive, value->byteArr, 0, bb_size(value->byteArr));
   15bba:	68a4      	ldr	r4, [r4, #8]
   15bbc:	4620      	mov	r0, r4
   15bbe:	f7f7 fe72 	bl	d8a6 <bb_size>
   15bc2:	2200      	movs	r2, #0
   15bc4:	4603      	mov	r3, r0
   15bc6:	4621      	mov	r1, r4
   15bc8:	4628      	mov	r0, r5
   15bca:	f7f7 ffed 	bl	dba8 <bb_set2>
   15bce:	e006      	b.n	15bde <cosem_setActivityCalendar+0x38>
    else if (index == 3)
   15bd0:	2a03      	cmp	r2, #3
   15bd2:	d108      	bne.n	15be6 <cosem_setActivityCalendar+0x40>
        ret = updateSeasonProfile(&object->seasonProfileActive, value);
   15bd4:	4619      	mov	r1, r3
   15bd6:	f105 0028 	add.w	r0, r5, #40	; 0x28
   15bda:	f7ff fe0b 	bl	157f4 <updateSeasonProfile>
   15bde:	4604      	mov	r4, r0
}
   15be0:	4620      	mov	r0, r4
   15be2:	b005      	add	sp, #20
   15be4:	bd30      	pop	{r4, r5, pc}
    else if (index == 4)
   15be6:	2a04      	cmp	r2, #4
   15be8:	d105      	bne.n	15bf6 <cosem_setActivityCalendar+0x50>
        ret = updateWeekProfileTable(&object->weekProfileTableActive, value);
   15bea:	4619      	mov	r1, r3
   15bec:	f105 0034 	add.w	r0, r5, #52	; 0x34
        ret = updateWeekProfileTable(&object->weekProfileTablePassive, value);
   15bf0:	f7ff fe77 	bl	158e2 <updateWeekProfileTable>
   15bf4:	e7f3      	b.n	15bde <cosem_setActivityCalendar+0x38>
    else if (index == 5)
   15bf6:	2a05      	cmp	r2, #5
   15bf8:	d104      	bne.n	15c04 <cosem_setActivityCalendar+0x5e>
        ret = updateDayProfileTable(settings, &object->dayProfileTableActive, value);
   15bfa:	461a      	mov	r2, r3
   15bfc:	3140      	adds	r1, #64	; 0x40
        ret = updateDayProfileTable(settings, &object->dayProfileTablePassive, value);
   15bfe:	f7ff ff0a 	bl	15a16 <updateDayProfileTable>
   15c02:	e7ec      	b.n	15bde <cosem_setActivityCalendar+0x38>
    else if (index == 6)
   15c04:	2a06      	cmp	r2, #6
   15c06:	d101      	bne.n	15c0c <cosem_setActivityCalendar+0x66>
        bb_clear(&object->calendarNamePassive);
   15c08:	351c      	adds	r5, #28
   15c0a:	e7d3      	b.n	15bb4 <cosem_setActivityCalendar+0xe>
    else if (index == 7)
   15c0c:	2a07      	cmp	r2, #7
   15c0e:	d103      	bne.n	15c18 <cosem_setActivityCalendar+0x72>
        ret = updateSeasonProfile(&object->seasonProfilePassive, value);
   15c10:	4619      	mov	r1, r3
   15c12:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   15c16:	e7e0      	b.n	15bda <cosem_setActivityCalendar+0x34>
    else if (index == 8)
   15c18:	2a08      	cmp	r2, #8
   15c1a:	d103      	bne.n	15c24 <cosem_setActivityCalendar+0x7e>
        ret = updateWeekProfileTable(&object->weekProfileTablePassive, value);
   15c1c:	4619      	mov	r1, r3
   15c1e:	f105 0064 	add.w	r0, r5, #100	; 0x64
   15c22:	e7e5      	b.n	15bf0 <cosem_setActivityCalendar+0x4a>
    else if (index == 9)
   15c24:	2a09      	cmp	r2, #9
   15c26:	d102      	bne.n	15c2e <cosem_setActivityCalendar+0x88>
        ret = updateDayProfileTable(settings, &object->dayProfileTablePassive, value);
   15c28:	461a      	mov	r2, r3
   15c2a:	3158      	adds	r1, #88	; 0x58
   15c2c:	e7e7      	b.n	15bfe <cosem_setActivityCalendar+0x58>
    else if (index == 10)
   15c2e:	2a0a      	cmp	r2, #10
   15c30:	d11e      	bne.n	15c70 <cosem_setActivityCalendar+0xca>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   15c32:	781b      	ldrb	r3, [r3, #0]
   15c34:	2b09      	cmp	r3, #9
   15c36:	d115      	bne.n	15c64 <cosem_setActivityCalendar+0xbe>
   15c38:	68a3      	ldr	r3, [r4, #8]
   15c3a:	b19b      	cbz	r3, 15c64 <cosem_setActivityCalendar+0xbe>
            var_init(&tm);
   15c3c:	4668      	mov	r0, sp
   15c3e:	f005 faf6 	bl	1b22e <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tm);
   15c42:	4620      	mov	r0, r4
   15c44:	466a      	mov	r2, sp
   15c46:	2119      	movs	r1, #25
   15c48:	f7fa fefc 	bl	10a44 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   15c4c:	4604      	mov	r4, r0
   15c4e:	2800      	cmp	r0, #0
   15c50:	d1c6      	bne.n	15be0 <cosem_setActivityCalendar+0x3a>
            time_copy(&object->time, tm.dateTime);
   15c52:	f105 0070 	add.w	r0, r5, #112	; 0x70
   15c56:	9902      	ldr	r1, [sp, #8]
   15c58:	f7f8 ff41 	bl	eade <time_copy>
            var_clear(&tm);
   15c5c:	4668      	mov	r0, sp
   15c5e:	f005 fc42 	bl	1b4e6 <var_clear>
   15c62:	e7bd      	b.n	15be0 <cosem_setActivityCalendar+0x3a>
            time_clear(&object->time);
   15c64:	f105 0070 	add.w	r0, r5, #112	; 0x70
   15c68:	f7f8 ff08 	bl	ea7c <time_clear>
    int ret = DLMS_ERROR_CODE_OK;
   15c6c:	2400      	movs	r4, #0
   15c6e:	e7b7      	b.n	15be0 <cosem_setActivityCalendar+0x3a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15c70:	f44f 7481 	mov.w	r4, #258	; 0x102
   15c74:	e7b4      	b.n	15be0 <cosem_setActivityCalendar+0x3a>

00015c76 <cosem_setActionSchedule>:
{
   15c76:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (index == 2)
   15c78:	2a02      	cmp	r2, #2
{
   15c7a:	b08b      	sub	sp, #44	; 0x2c
   15c7c:	4607      	mov	r7, r0
   15c7e:	460d      	mov	r5, r1
   15c80:	461e      	mov	r6, r3
    if (index == 2)
   15c82:	d132      	bne.n	15cea <cosem_setActionSchedule+0x74>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   15c84:	6898      	ldr	r0, [r3, #8]
   15c86:	466a      	mov	r2, sp
   15c88:	2100      	movs	r1, #0
   15c8a:	f005 fcaa 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15c8e:	4604      	mov	r4, r0
   15c90:	bb40      	cbnz	r0, 15ce4 <cosem_setActionSchedule+0x6e>
            if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&object->executedScript)) != 0)
   15c92:	9b00      	ldr	r3, [sp, #0]
   15c94:	689a      	ldr	r2, [r3, #8]
   15c96:	f105 0410 	add.w	r4, r5, #16
   15c9a:	4623      	mov	r3, r4
   15c9c:	6812      	ldr	r2, [r2, #0]
   15c9e:	2109      	movs	r1, #9
   15ca0:	f107 0098 	add.w	r0, r7, #152	; 0x98
   15ca4:	f005 fa5a 	bl	1b15c <oa_findByLN>
            if (object->executedScript == NULL)
   15ca8:	692b      	ldr	r3, [r5, #16]
   15caa:	b983      	cbnz	r3, 15cce <cosem_setActionSchedule+0x58>
                ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->executedScript);
   15cac:	4621      	mov	r1, r4
   15cae:	2009      	movs	r0, #9
   15cb0:	f7ec fa2a 	bl	2108 <cosem_createObject>
                if (ret == DLMS_ERROR_CODE_OK)
   15cb4:	b958      	cbnz	r0, 15cce <cosem_setActionSchedule+0x58>
                    ret = cosem_setLogicalName((gxObject*)object->executedScript, tmp->byteArr->data);
   15cb6:	9b00      	ldr	r3, [sp, #0]
   15cb8:	6928      	ldr	r0, [r5, #16]
   15cba:	689b      	ldr	r3, [r3, #8]
   15cbc:	6819      	ldr	r1, [r3, #0]
   15cbe:	f7f8 fbb9 	bl	e434 <cosem_setLogicalName>
                    if (ret == DLMS_ERROR_CODE_OK)
   15cc2:	b920      	cbnz	r0, 15cce <cosem_setActionSchedule+0x58>
                        ret = oa_push(&settings->releasedObjects, (gxObject*)object->executedScript);
   15cc4:	6929      	ldr	r1, [r5, #16]
   15cc6:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   15cca:	f005 f9b8 	bl	1b03e <oa_push>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   15cce:	68b0      	ldr	r0, [r6, #8]
   15cd0:	466a      	mov	r2, sp
   15cd2:	2101      	movs	r1, #1
   15cd4:	f005 fc85 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15cd8:	4604      	mov	r4, r0
   15cda:	b918      	cbnz	r0, 15ce4 <cosem_setActionSchedule+0x6e>
        object->executedScriptSelector = (uint16_t)var_toInteger(tmp);
   15cdc:	9800      	ldr	r0, [sp, #0]
   15cde:	f005 fdfa 	bl	1b8d6 <var_toInteger>
   15ce2:	82a8      	strh	r0, [r5, #20]
}
   15ce4:	4620      	mov	r0, r4
   15ce6:	b00b      	add	sp, #44	; 0x2c
   15ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (index == 3)
   15cea:	2a03      	cmp	r2, #3
   15cec:	d105      	bne.n	15cfa <cosem_setActionSchedule+0x84>
        object->type = (DLMS_SINGLE_ACTION_SCHEDULE_TYPE)var_toInteger(value);
   15cee:	4618      	mov	r0, r3
   15cf0:	f005 fdf1 	bl	1b8d6 <var_toInteger>
   15cf4:	75a8      	strb	r0, [r5, #22]
    int ret = 0, pos;
   15cf6:	2400      	movs	r4, #0
   15cf8:	e7f4      	b.n	15ce4 <cosem_setActionSchedule+0x6e>
    else if (index == 4)
   15cfa:	2a04      	cmp	r2, #4
   15cfc:	d178      	bne.n	15df0 <cosem_setActionSchedule+0x17a>
        arr_clear(&object->executionTime);
   15cfe:	3518      	adds	r5, #24
   15d00:	4628      	mov	r0, r5
   15d02:	f7fb f9da 	bl	110ba <arr_clear>
        var_init(&time);
   15d06:	a802      	add	r0, sp, #8
   15d08:	f005 fa91 	bl	1b22e <var_init>
        var_init(&date);
   15d0c:	a806      	add	r0, sp, #24
   15d0e:	f005 fa8e 	bl	1b22e <var_init>
        if (value->Arr != NULL)
   15d12:	68b3      	ldr	r3, [r6, #8]
   15d14:	2b00      	cmp	r3, #0
   15d16:	d0ee      	beq.n	15cf6 <cosem_setActionSchedule+0x80>
            arr_capacity(&object->executionTime, value->Arr->size);
   15d18:	88d9      	ldrh	r1, [r3, #6]
   15d1a:	4628      	mov	r0, r5
   15d1c:	f7fb f992 	bl	11044 <arr_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15d20:	2700      	movs	r7, #0
   15d22:	68b0      	ldr	r0, [r6, #8]
   15d24:	88c3      	ldrh	r3, [r0, #6]
   15d26:	42bb      	cmp	r3, r7
   15d28:	d0e5      	beq.n	15cf6 <cosem_setActionSchedule+0x80>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   15d2a:	466a      	mov	r2, sp
   15d2c:	4639      	mov	r1, r7
   15d2e:	f005 fc58 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15d32:	4604      	mov	r4, r0
   15d34:	2800      	cmp	r0, #0
   15d36:	d1d5      	bne.n	15ce4 <cosem_setActionSchedule+0x6e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   15d38:	9b00      	ldr	r3, [sp, #0]
   15d3a:	4601      	mov	r1, r0
   15d3c:	aa01      	add	r2, sp, #4
   15d3e:	6898      	ldr	r0, [r3, #8]
   15d40:	f005 fc4f 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15d44:	4604      	mov	r4, r0
   15d46:	2800      	cmp	r0, #0
   15d48:	d1cc      	bne.n	15ce4 <cosem_setActionSchedule+0x6e>
                ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_TIME, &time);
   15d4a:	9801      	ldr	r0, [sp, #4]
   15d4c:	aa02      	add	r2, sp, #8
   15d4e:	211b      	movs	r1, #27
   15d50:	f7fa fe78 	bl	10a44 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   15d54:	4604      	mov	r4, r0
   15d56:	2800      	cmp	r0, #0
   15d58:	d1c4      	bne.n	15ce4 <cosem_setActionSchedule+0x6e>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   15d5a:	9b00      	ldr	r3, [sp, #0]
   15d5c:	aa01      	add	r2, sp, #4
   15d5e:	6898      	ldr	r0, [r3, #8]
   15d60:	2101      	movs	r1, #1
   15d62:	f005 fc3e 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15d66:	4604      	mov	r4, r0
   15d68:	2800      	cmp	r0, #0
   15d6a:	d1bb      	bne.n	15ce4 <cosem_setActionSchedule+0x6e>
                ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_DATE, &date);
   15d6c:	9801      	ldr	r0, [sp, #4]
   15d6e:	aa06      	add	r2, sp, #24
   15d70:	211a      	movs	r1, #26
   15d72:	f7fa fe67 	bl	10a44 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   15d76:	4604      	mov	r4, r0
   15d78:	2800      	cmp	r0, #0
   15d7a:	d1b3      	bne.n	15ce4 <cosem_setActionSchedule+0x6e>
                time_addHours(date.dateTime, time_getHours(time.dateTime));
   15d7c:	9804      	ldr	r0, [sp, #16]
   15d7e:	9c08      	ldr	r4, [sp, #32]
   15d80:	f7ec fb7a 	bl	2478 <time_getHours>
   15d84:	4601      	mov	r1, r0
   15d86:	4620      	mov	r0, r4
   15d88:	f7f8 fe62 	bl	ea50 <time_addHours>
                time_addMinutes(date.dateTime, time_getMinutes(time.dateTime));
   15d8c:	9804      	ldr	r0, [sp, #16]
   15d8e:	9c08      	ldr	r4, [sp, #32]
   15d90:	f7f8 fe4a 	bl	ea28 <time_getMinutes>
   15d94:	4601      	mov	r1, r0
   15d96:	4620      	mov	r0, r4
   15d98:	f7f8 fe61 	bl	ea5e <time_addMinutes>
                time_addSeconds(date.dateTime, time_getSeconds(time.dateTime));
   15d9c:	9804      	ldr	r0, [sp, #16]
   15d9e:	9c08      	ldr	r4, [sp, #32]
   15da0:	f7f8 fe4e 	bl	ea40 <time_getSeconds>
   15da4:	4601      	mov	r1, r0
   15da6:	4620      	mov	r0, r4
   15da8:	f7f8 fe5f 	bl	ea6a <time_addSeconds>
                date.dateTime->skip = (DATETIME_SKIPS)(date.dateTime->skip & time.dateTime->skip);
   15dac:	9a08      	ldr	r2, [sp, #32]
   15dae:	9b04      	ldr	r3, [sp, #16]
   15db0:	88d1      	ldrh	r1, [r2, #6]
   15db2:	88db      	ldrh	r3, [r3, #6]
   15db4:	400b      	ands	r3, r1
                date.dateTime->skip |= DATETIME_SKIPS_DEVITATION;
   15db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
                date.dateTime->deviation = (short)0x8000;
   15dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   15dbe:	8091      	strh	r1, [r2, #4]
                date.dateTime->skip |= DATETIME_SKIPS_DEVITATION;
   15dc0:	80d3      	strh	r3, [r2, #6]
                tm = (gxtime*)gxmalloc(sizeof(gxtime));
   15dc2:	200c      	movs	r0, #12
   15dc4:	f7f6 fd4e 	bl	c864 <malloc>
                if (tm == NULL)
   15dc8:	4604      	mov	r4, r0
   15dca:	b170      	cbz	r0, 15dea <cosem_setActionSchedule+0x174>
                time_copy(tm, date.dateTime);
   15dcc:	9908      	ldr	r1, [sp, #32]
   15dce:	f7f8 fe86 	bl	eade <time_copy>
                arr_push(&object->executionTime, tm);
   15dd2:	4621      	mov	r1, r4
   15dd4:	4628      	mov	r0, r5
   15dd6:	f7fb f95b 	bl	11090 <arr_push>
                var_clear(&time);
   15dda:	a802      	add	r0, sp, #8
   15ddc:	f005 fb83 	bl	1b4e6 <var_clear>
                var_clear(&date);
   15de0:	a806      	add	r0, sp, #24
   15de2:	f005 fb80 	bl	1b4e6 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15de6:	3701      	adds	r7, #1
   15de8:	e79b      	b.n	15d22 <cosem_setActionSchedule+0xac>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   15dea:	f44f 7482 	mov.w	r4, #260	; 0x104
   15dee:	e779      	b.n	15ce4 <cosem_setActionSchedule+0x6e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   15df0:	f44f 7481 	mov.w	r4, #258	; 0x102
   15df4:	e776      	b.n	15ce4 <cosem_setActionSchedule+0x6e>

00015df6 <cosem_updateAttributeAccessModes>:
{
   15df6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (arr->size != 2)
   15dfa:	88cb      	ldrh	r3, [r1, #6]
   15dfc:	2b02      	cmp	r3, #2
{
   15dfe:	4605      	mov	r5, r0
   15e00:	460e      	mov	r6, r1
    if (arr->size != 2)
   15e02:	f040 80a9 	bne.w	15f58 <cosem_updateAttributeAccessModes+0x162>
    ret = va_getByIndex(arr, 0, &tmp);
   15e06:	aa01      	add	r2, sp, #4
   15e08:	2100      	movs	r1, #0
   15e0a:	4630      	mov	r0, r6
   15e0c:	f005 fbe9 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   15e10:	4604      	mov	r4, r0
   15e12:	2800      	cmp	r0, #0
   15e14:	d171      	bne.n	15efa <cosem_updateAttributeAccessModes+0x104>
    if (object->access == NULL || object->access->attributeAccessModes.size == 0)
   15e16:	68eb      	ldr	r3, [r5, #12]
   15e18:	2b00      	cmp	r3, #0
   15e1a:	d046      	beq.n	15eaa <cosem_updateAttributeAccessModes+0xb4>
   15e1c:	88db      	ldrh	r3, [r3, #6]
   15e1e:	2b00      	cmp	r3, #0
   15e20:	d048      	beq.n	15eb4 <cosem_updateAttributeAccessModes+0xbe>
{
   15e22:	2700      	movs	r7, #0
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   15e24:	9b01      	ldr	r3, [sp, #4]
   15e26:	6898      	ldr	r0, [r3, #8]
   15e28:	88c2      	ldrh	r2, [r0, #6]
   15e2a:	b2bb      	uxth	r3, r7
   15e2c:	429a      	cmp	r2, r3
   15e2e:	d158      	bne.n	15ee2 <cosem_updateAttributeAccessModes+0xec>
    ret = va_getByIndex(arr, 1, &tmp);
   15e30:	aa01      	add	r2, sp, #4
   15e32:	2101      	movs	r1, #1
   15e34:	4630      	mov	r0, r6
   15e36:	f005 fbd4 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   15e3a:	4604      	mov	r4, r0
   15e3c:	2800      	cmp	r0, #0
   15e3e:	d15c      	bne.n	15efa <cosem_updateAttributeAccessModes+0x104>
   15e40:	4606      	mov	r6, r0
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   15e42:	9b01      	ldr	r3, [sp, #4]
   15e44:	6898      	ldr	r0, [r3, #8]
   15e46:	88c2      	ldrh	r2, [r0, #6]
   15e48:	b2b3      	uxth	r3, r6
   15e4a:	429a      	cmp	r2, r3
   15e4c:	d055      	beq.n	15efa <cosem_updateAttributeAccessModes+0x104>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   15e4e:	b2b1      	uxth	r1, r6
   15e50:	aa02      	add	r2, sp, #8
   15e52:	f005 fbc6 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   15e56:	4601      	mov	r1, r0
   15e58:	2800      	cmp	r0, #0
   15e5a:	d179      	bne.n	15f50 <cosem_updateAttributeAccessModes+0x15a>
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   15e5c:	9b02      	ldr	r3, [sp, #8]
   15e5e:	781a      	ldrb	r2, [r3, #0]
   15e60:	2a02      	cmp	r2, #2
   15e62:	d148      	bne.n	15ef6 <cosem_updateAttributeAccessModes+0x100>
            it->Arr->size != 2)
   15e64:	6898      	ldr	r0, [r3, #8]
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   15e66:	88c3      	ldrh	r3, [r0, #6]
   15e68:	2b02      	cmp	r3, #2
   15e6a:	d144      	bne.n	15ef6 <cosem_updateAttributeAccessModes+0x100>
        ret = va_getByIndex(it->Arr, 0, &value);
   15e6c:	aa03      	add	r2, sp, #12
   15e6e:	f005 fbb8 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   15e72:	2800      	cmp	r0, #0
   15e74:	d16e      	bne.n	15f54 <cosem_updateAttributeAccessModes+0x15e>
        id = (unsigned char)var_toInteger(value);
   15e76:	9803      	ldr	r0, [sp, #12]
   15e78:	f005 fd2d 	bl	1b8d6 <var_toInteger>
        if (!(id > object->access->methodAccessModes.size))
   15e7c:	68eb      	ldr	r3, [r5, #12]
   15e7e:	8a5b      	ldrh	r3, [r3, #18]
   15e80:	b2c7      	uxtb	r7, r0
   15e82:	429f      	cmp	r7, r3
   15e84:	d80f      	bhi.n	15ea6 <cosem_updateAttributeAccessModes+0xb0>
            ret = va_getByIndex(it->Arr, 1, &value);
   15e86:	9b02      	ldr	r3, [sp, #8]
   15e88:	aa03      	add	r2, sp, #12
   15e8a:	6898      	ldr	r0, [r3, #8]
   15e8c:	2101      	movs	r1, #1
   15e8e:	f005 fba8 	bl	1b5e2 <va_getByIndex>
            if (ret != 0)
   15e92:	2800      	cmp	r0, #0
   15e94:	d15e      	bne.n	15f54 <cosem_updateAttributeAccessModes+0x15e>
            object->access->methodAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
   15e96:	9803      	ldr	r0, [sp, #12]
   15e98:	f005 fd1d 	bl	1b8d6 <var_toInteger>
   15e9c:	68eb      	ldr	r3, [r5, #12]
   15e9e:	68db      	ldr	r3, [r3, #12]
   15ea0:	443b      	add	r3, r7
   15ea2:	f803 0c01 	strb.w	r0, [r3, #-1]
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   15ea6:	3601      	adds	r6, #1
   15ea8:	e7cb      	b.n	15e42 <cosem_updateAttributeAccessModes+0x4c>
            object->access = (gxAccess*)gxcalloc(1, sizeof(gxAccess));
   15eaa:	2118      	movs	r1, #24
   15eac:	2001      	movs	r0, #1
   15eae:	f7f6 fcd1 	bl	c854 <calloc>
   15eb2:	60e8      	str	r0, [r5, #12]
        cnt = obj_attributeCount(object);
   15eb4:	4628      	mov	r0, r5
   15eb6:	f7ff f8ca 	bl	1504e <obj_attributeCount>
        bb_capacity(&object->access->attributeAccessModes, cnt);
   15eba:	b281      	uxth	r1, r0
   15ebc:	68e8      	ldr	r0, [r5, #12]
   15ebe:	f7f7 fcfb 	bl	d8b8 <bb_capacity>
        object->access->attributeAccessModes.size = object->access->attributeAccessModes.capacity;
   15ec2:	68eb      	ldr	r3, [r5, #12]
   15ec4:	889a      	ldrh	r2, [r3, #4]
   15ec6:	80da      	strh	r2, [r3, #6]
        cnt = obj_methodCount(object);
   15ec8:	4628      	mov	r0, r5
   15eca:	f7ff f934 	bl	15136 <obj_methodCount>
        bb_capacity(&object->access->methodAccessModes, cnt);
   15ece:	68eb      	ldr	r3, [r5, #12]
   15ed0:	b281      	uxth	r1, r0
   15ed2:	f103 000c 	add.w	r0, r3, #12
   15ed6:	f7f7 fcef 	bl	d8b8 <bb_capacity>
        object->access->methodAccessModes.size = object->access->methodAccessModes.capacity;
   15eda:	68eb      	ldr	r3, [r5, #12]
   15edc:	8a1a      	ldrh	r2, [r3, #16]
   15ede:	825a      	strh	r2, [r3, #18]
   15ee0:	e79f      	b.n	15e22 <cosem_updateAttributeAccessModes+0x2c>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   15ee2:	aa02      	add	r2, sp, #8
   15ee4:	b2b9      	uxth	r1, r7
   15ee6:	f005 fb7c 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   15eea:	4604      	mov	r4, r0
   15eec:	b928      	cbnz	r0, 15efa <cosem_updateAttributeAccessModes+0x104>
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   15eee:	9b02      	ldr	r3, [sp, #8]
   15ef0:	781a      	ldrb	r2, [r3, #0]
   15ef2:	2a02      	cmp	r2, #2
   15ef4:	d005      	beq.n	15f02 <cosem_updateAttributeAccessModes+0x10c>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   15ef6:	f44f 7481 	mov.w	r4, #258	; 0x102
}
   15efa:	4620      	mov	r0, r4
   15efc:	b004      	add	sp, #16
   15efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            it->Arr->size != 3)
   15f02:	6898      	ldr	r0, [r3, #8]
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   15f04:	88c3      	ldrh	r3, [r0, #6]
   15f06:	2b03      	cmp	r3, #3
   15f08:	d1f5      	bne.n	15ef6 <cosem_updateAttributeAccessModes+0x100>
        ret = va_getByIndex(it->Arr, 0, &value);
   15f0a:	4621      	mov	r1, r4
   15f0c:	aa03      	add	r2, sp, #12
   15f0e:	f005 fb68 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   15f12:	4604      	mov	r4, r0
   15f14:	2800      	cmp	r0, #0
   15f16:	d1f0      	bne.n	15efa <cosem_updateAttributeAccessModes+0x104>
        id = (unsigned char)var_toInteger(value);
   15f18:	9803      	ldr	r0, [sp, #12]
   15f1a:	f005 fcdc 	bl	1b8d6 <var_toInteger>
        if (!(id > object->access->attributeAccessModes.size))
   15f1e:	68eb      	ldr	r3, [r5, #12]
   15f20:	88db      	ldrh	r3, [r3, #6]
   15f22:	fa5f f880 	uxtb.w	r8, r0
   15f26:	4598      	cmp	r8, r3
   15f28:	d810      	bhi.n	15f4c <cosem_updateAttributeAccessModes+0x156>
            ret = va_getByIndex(it->Arr, 1, &value);
   15f2a:	9b02      	ldr	r3, [sp, #8]
   15f2c:	aa03      	add	r2, sp, #12
   15f2e:	6898      	ldr	r0, [r3, #8]
   15f30:	2101      	movs	r1, #1
   15f32:	f005 fb56 	bl	1b5e2 <va_getByIndex>
            if (ret != 0)
   15f36:	4604      	mov	r4, r0
   15f38:	2800      	cmp	r0, #0
   15f3a:	d1de      	bne.n	15efa <cosem_updateAttributeAccessModes+0x104>
            object->access->attributeAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
   15f3c:	9803      	ldr	r0, [sp, #12]
   15f3e:	f005 fcca 	bl	1b8d6 <var_toInteger>
   15f42:	68eb      	ldr	r3, [r5, #12]
   15f44:	681b      	ldr	r3, [r3, #0]
   15f46:	4443      	add	r3, r8
   15f48:	f803 0c01 	strb.w	r0, [r3, #-1]
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   15f4c:	3701      	adds	r7, #1
   15f4e:	e769      	b.n	15e24 <cosem_updateAttributeAccessModes+0x2e>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   15f50:	4604      	mov	r4, r0
   15f52:	e7d2      	b.n	15efa <cosem_updateAttributeAccessModes+0x104>
            ret = va_getByIndex(it->Arr, 1, &value);
   15f54:	4604      	mov	r4, r0
   15f56:	e7d0      	b.n	15efa <cosem_updateAttributeAccessModes+0x104>
        return 0;
   15f58:	2400      	movs	r4, #0
   15f5a:	e7ce      	b.n	15efa <cosem_updateAttributeAccessModes+0x104>

00015f5c <cosem_setAssociationLogicalName>:
    if (index == 2)
   15f5c:	2a02      	cmp	r2, #2
{
   15f5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15f62:	4680      	mov	r8, r0
   15f64:	460d      	mov	r5, r1
   15f66:	4617      	mov	r7, r2
   15f68:	461e      	mov	r6, r3
    if (index == 2)
   15f6a:	f040 8082 	bne.w	16072 <cosem_setAssociationLogicalName+0x116>
        oa_empty(&object->objectList);
   15f6e:	3514      	adds	r5, #20
        gxObject* obj = NULL;
   15f70:	2700      	movs	r7, #0
        oa_empty(&object->objectList);
   15f72:	4628      	mov	r0, r5
        gxObject* obj = NULL;
   15f74:	9703      	str	r7, [sp, #12]
        oa_empty(&object->objectList);
   15f76:	f005 f8b9 	bl	1b0ec <oa_empty>
        if (value->Arr != NULL)
   15f7a:	68b4      	ldr	r4, [r6, #8]
   15f7c:	2c00      	cmp	r4, #0
   15f7e:	d176      	bne.n	1606e <cosem_setAssociationLogicalName+0x112>
}
   15f80:	4620      	mov	r0, r4
   15f82:	b004      	add	sp, #16
   15f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    ret = cosem_createObject(type, &obj);
   15f88:	a903      	add	r1, sp, #12
   15f8a:	4648      	mov	r0, r9
   15f8c:	f7ec f8bc 	bl	2108 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   15f90:	4604      	mov	r4, r0
   15f92:	2800      	cmp	r0, #0
   15f94:	d057      	beq.n	16046 <cosem_setAssociationLogicalName+0xea>
                        if (ret == DLMS_ERROR_CODE_INVALID_PARAMETER)
   15f96:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   15f9a:	d1f1      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
            for (pos = 0; pos != value->Arr->size; ++pos)
   15f9c:	3701      	adds	r7, #1
   15f9e:	68b0      	ldr	r0, [r6, #8]
   15fa0:	88c3      	ldrh	r3, [r0, #6]
   15fa2:	42bb      	cmp	r3, r7
   15fa4:	d0ec      	beq.n	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   15fa6:	aa01      	add	r2, sp, #4
   15fa8:	4639      	mov	r1, r7
   15faa:	f005 fb1a 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15fae:	4604      	mov	r4, r0
   15fb0:	2800      	cmp	r0, #0
   15fb2:	d1e5      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   15fb4:	9b01      	ldr	r3, [sp, #4]
   15fb6:	4601      	mov	r1, r0
   15fb8:	aa02      	add	r2, sp, #8
   15fba:	6898      	ldr	r0, [r3, #8]
   15fbc:	f005 fb11 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15fc0:	4604      	mov	r4, r0
   15fc2:	2800      	cmp	r0, #0
   15fc4:	d1dc      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   15fc6:	9802      	ldr	r0, [sp, #8]
   15fc8:	f005 fc85 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   15fcc:	9b01      	ldr	r3, [sp, #4]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   15fce:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   15fd2:	aa02      	add	r2, sp, #8
   15fd4:	6898      	ldr	r0, [r3, #8]
   15fd6:	2101      	movs	r1, #1
   15fd8:	f005 fb03 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15fdc:	4604      	mov	r4, r0
   15fde:	2800      	cmp	r0, #0
   15fe0:	d1ce      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
                version = (unsigned char) var_toInteger(tmp2);
   15fe2:	9802      	ldr	r0, [sp, #8]
   15fe4:	f005 fc77 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   15fe8:	9b01      	ldr	r3, [sp, #4]
                version = (unsigned char) var_toInteger(tmp2);
   15fea:	4682      	mov	sl, r0
                ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   15fec:	aa02      	add	r2, sp, #8
   15fee:	6898      	ldr	r0, [r3, #8]
   15ff0:	2102      	movs	r1, #2
   15ff2:	f005 faf6 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   15ff6:	4604      	mov	r4, r0
   15ff8:	2800      	cmp	r0, #0
   15ffa:	d1c1      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = oa_findByLN(&settings->objects, type, tmp2->byteArr->data, &obj);
   15ffc:	9b02      	ldr	r3, [sp, #8]
   15ffe:	689a      	ldr	r2, [r3, #8]
   16000:	4649      	mov	r1, r9
   16002:	6812      	ldr	r2, [r2, #0]
   16004:	ab03      	add	r3, sp, #12
   16006:	f108 0098 	add.w	r0, r8, #152	; 0x98
   1600a:	f005 f8a7 	bl	1b15c <oa_findByLN>
                if (ret != DLMS_ERROR_CODE_OK)
   1600e:	4604      	mov	r4, r0
   16010:	2800      	cmp	r0, #0
   16012:	d1b5      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
                if (obj == NULL)
   16014:	9b03      	ldr	r3, [sp, #12]
   16016:	2b00      	cmp	r3, #0
   16018:	d0b6      	beq.n	15f88 <cosem_setAssociationLogicalName+0x2c>
                ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   1601a:	9b01      	ldr	r3, [sp, #4]
   1601c:	aa02      	add	r2, sp, #8
   1601e:	6898      	ldr	r0, [r3, #8]
   16020:	2103      	movs	r1, #3
   16022:	f005 fade 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16026:	4604      	mov	r4, r0
   16028:	2800      	cmp	r0, #0
   1602a:	d1a9      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = cosem_updateAttributeAccessModes(obj, tmp2->Arr);
   1602c:	9b02      	ldr	r3, [sp, #8]
   1602e:	9803      	ldr	r0, [sp, #12]
   16030:	6899      	ldr	r1, [r3, #8]
   16032:	f7ff fee0 	bl	15df6 <cosem_updateAttributeAccessModes>
                if (ret != DLMS_ERROR_CODE_OK)
   16036:	4604      	mov	r4, r0
   16038:	2800      	cmp	r0, #0
   1603a:	d1a1      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
                oa_push(&object->objectList, obj);
   1603c:	9903      	ldr	r1, [sp, #12]
   1603e:	4628      	mov	r0, r5
   16040:	f004 fffd 	bl	1b03e <oa_push>
   16044:	e7aa      	b.n	15f9c <cosem_setAssociationLogicalName+0x40>
                    ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   16046:	9b02      	ldr	r3, [sp, #8]
   16048:	9803      	ldr	r0, [sp, #12]
   1604a:	689b      	ldr	r3, [r3, #8]
   1604c:	6819      	ldr	r1, [r3, #0]
   1604e:	f7f8 f9f1 	bl	e434 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   16052:	4604      	mov	r4, r0
   16054:	2800      	cmp	r0, #0
   16056:	d193      	bne.n	15f80 <cosem_setAssociationLogicalName+0x24>
                    obj->version = (unsigned char)version;
   16058:	9903      	ldr	r1, [sp, #12]
                    ret = oa_push(&settings->releasedObjects, obj);
   1605a:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
                version = (unsigned char) var_toInteger(tmp2);
   1605e:	f881 a002 	strb.w	sl, [r1, #2]
                    ret = oa_push(&settings->releasedObjects, obj);
   16062:	f004 ffec 	bl	1b03e <oa_push>
                    if (ret != DLMS_ERROR_CODE_OK)
   16066:	4604      	mov	r4, r0
   16068:	2800      	cmp	r0, #0
   1606a:	d0d6      	beq.n	1601a <cosem_setAssociationLogicalName+0xbe>
   1606c:	e788      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
    int ret = 0, pos = 0;
   1606e:	463c      	mov	r4, r7
   16070:	e795      	b.n	15f9e <cosem_setAssociationLogicalName+0x42>
    else if (index == 3)
   16072:	2a03      	cmp	r2, #3
   16074:	d11a      	bne.n	160ac <cosem_setAssociationLogicalName+0x150>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16076:	6898      	ldr	r0, [r3, #8]
   16078:	aa01      	add	r2, sp, #4
   1607a:	2100      	movs	r1, #0
   1607c:	f005 fab1 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16080:	4604      	mov	r4, r0
   16082:	2800      	cmp	r0, #0
   16084:	f47f af7c 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
        object->clientSAP = (unsigned char)var_toInteger(tmp);
   16088:	9801      	ldr	r0, [sp, #4]
   1608a:	f005 fc24 	bl	1b8d6 <var_toInteger>
   1608e:	7728      	strb	r0, [r5, #28]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16090:	68b0      	ldr	r0, [r6, #8]
   16092:	aa01      	add	r2, sp, #4
   16094:	2101      	movs	r1, #1
   16096:	f005 faa4 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1609a:	4604      	mov	r4, r0
   1609c:	2800      	cmp	r0, #0
   1609e:	f47f af6f 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
        object->serverSAP = (uint16_t)var_toInteger(tmp);
   160a2:	9801      	ldr	r0, [sp, #4]
   160a4:	f005 fc17 	bl	1b8d6 <var_toInteger>
   160a8:	83e8      	strh	r0, [r5, #30]
   160aa:	e769      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
    else if (index == 4)
   160ac:	2a04      	cmp	r2, #4
   160ae:	f040 812e 	bne.w	1630e <cosem_setAssociationLogicalName+0x3b2>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   160b2:	f893 8000 	ldrb.w	r8, [r3]
   160b6:	f1b8 0f09 	cmp.w	r8, #9
   160ba:	f040 80c2 	bne.w	16242 <cosem_setAssociationLogicalName+0x2e6>
            if (value->byteArr->data[0] == 0x60)
   160be:	6898      	ldr	r0, [r3, #8]
   160c0:	6803      	ldr	r3, [r0, #0]
   160c2:	781b      	ldrb	r3, [r3, #0]
   160c4:	2b60      	cmp	r3, #96	; 0x60
   160c6:	d127      	bne.n	16118 <cosem_setAssociationLogicalName+0x1bc>
                object->applicationContextName.jointIsoCtt = 0;
   160c8:	2300      	movs	r3, #0
   160ca:	84cb      	strh	r3, [r1, #38]	; 0x26
                object->applicationContextName.countryName = 0;
   160cc:	850b      	strh	r3, [r1, #40]	; 0x28
                ret = bb_getUInt8ByIndex(value->byteArr, 3, &object->applicationContextName.identifiedOrganization);
   160ce:	f101 022a 	add.w	r2, r1, #42	; 0x2a
   160d2:	2103      	movs	r1, #3
   160d4:	f7f7 fde1 	bl	dc9a <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   160d8:	4604      	mov	r4, r0
   160da:	2800      	cmp	r0, #0
   160dc:	f47f af50 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 4, &object->applicationContextName.dlmsUA);
   160e0:	68b0      	ldr	r0, [r6, #8]
   160e2:	f105 022b 	add.w	r2, r5, #43	; 0x2b
   160e6:	4639      	mov	r1, r7
   160e8:	f7f7 fdd7 	bl	dc9a <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   160ec:	4604      	mov	r4, r0
   160ee:	2800      	cmp	r0, #0
   160f0:	f47f af46 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 5, &object->applicationContextName.applicationContext);
   160f4:	68b0      	ldr	r0, [r6, #8]
   160f6:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   160fa:	2105      	movs	r1, #5
   160fc:	f7f7 fdcd 	bl	dc9a <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16100:	4604      	mov	r4, r0
   16102:	2800      	cmp	r0, #0
   16104:	f47f af3c 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 6, &object->applicationContextName.contextId);
   16108:	68b0      	ldr	r0, [r6, #8]
   1610a:	f105 022d 	add.w	r2, r5, #45	; 0x2d
   1610e:	2106      	movs	r1, #6
   16110:	f7f7 fdc3 	bl	dc9a <bb_getUInt8ByIndex>
            ret = bb_set2(&object->secret, value->byteArr, 0, bb_size(value->byteArr));
   16114:	4604      	mov	r4, r0
   16116:	e733      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8(value->byteArr, &ch);
   16118:	a903      	add	r1, sp, #12
   1611a:	f7f7 fda0 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 2)
   1611e:	b110      	cbz	r0, 16126 <cosem_setAssociationLogicalName+0x1ca>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16120:	f44f 7481 	mov.w	r4, #258	; 0x102
   16124:	e72c      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
                if (ret != DLMS_ERROR_CODE_OK || ch != 2)
   16126:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1612a:	2b02      	cmp	r3, #2
   1612c:	d1f8      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   1612e:	68b0      	ldr	r0, [r6, #8]
   16130:	a903      	add	r1, sp, #12
   16132:	f7f7 fd94 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 7)
   16136:	2800      	cmp	r0, #0
   16138:	d1f2      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
   1613a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1613e:	2b07      	cmp	r3, #7
   16140:	d1ee      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16142:	68b0      	ldr	r0, [r6, #8]
   16144:	a903      	add	r1, sp, #12
   16146:	f7f7 fd8a 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   1614a:	2800      	cmp	r0, #0
   1614c:	d1e8      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
   1614e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16152:	2b11      	cmp	r3, #17
   16154:	d1e4      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.jointIsoCtt);
   16156:	68b0      	ldr	r0, [r6, #8]
   16158:	f105 0126 	add.w	r1, r5, #38	; 0x26
   1615c:	f7f7 fd7f 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16160:	2800      	cmp	r0, #0
   16162:	d1dd      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16164:	68b0      	ldr	r0, [r6, #8]
   16166:	a903      	add	r1, sp, #12
   16168:	f7f7 fd79 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   1616c:	2800      	cmp	r0, #0
   1616e:	d1d7      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
   16170:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16174:	2b11      	cmp	r3, #17
   16176:	d1d3      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.country);
   16178:	68b0      	ldr	r0, [r6, #8]
   1617a:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1617e:	f7f7 fd6e 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16182:	2800      	cmp	r0, #0
   16184:	d1cc      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16186:	68b0      	ldr	r0, [r6, #8]
   16188:	a903      	add	r1, sp, #12
   1618a:	f7f7 fd68 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   1618e:	2800      	cmp	r0, #0
   16190:	d1c6      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
   16192:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16196:	2b12      	cmp	r3, #18
   16198:	d1c2      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt16(value->byteArr, &object->applicationContextName.countryName);
   1619a:	68b0      	ldr	r0, [r6, #8]
   1619c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   161a0:	f7f7 fd86 	bl	dcb0 <bb_getUInt16>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   161a4:	2800      	cmp	r0, #0
   161a6:	d1bb      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
   161a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   161ac:	2b12      	cmp	r3, #18
   161ae:	d1b7      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   161b0:	68b0      	ldr	r0, [r6, #8]
   161b2:	a903      	add	r1, sp, #12
   161b4:	f7f7 fd53 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   161b8:	2800      	cmp	r0, #0
   161ba:	d1b1      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
   161bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   161c0:	2b11      	cmp	r3, #17
   161c2:	d1ad      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.identifiedOrganization);
   161c4:	68b0      	ldr	r0, [r6, #8]
   161c6:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   161ca:	f7f7 fd48 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   161ce:	2800      	cmp	r0, #0
   161d0:	d1a6      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   161d2:	68b0      	ldr	r0, [r6, #8]
   161d4:	a903      	add	r1, sp, #12
   161d6:	f7f7 fd42 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   161da:	2800      	cmp	r0, #0
   161dc:	d1a0      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
   161de:	f89d 300c 	ldrb.w	r3, [sp, #12]
   161e2:	2b11      	cmp	r3, #17
   161e4:	d19c      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.dlmsUA);
   161e6:	68b0      	ldr	r0, [r6, #8]
   161e8:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   161ec:	f7f7 fd37 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   161f0:	2800      	cmp	r0, #0
   161f2:	d195      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   161f4:	68b0      	ldr	r0, [r6, #8]
   161f6:	a903      	add	r1, sp, #12
   161f8:	f7f7 fd31 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   161fc:	2800      	cmp	r0, #0
   161fe:	d18f      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
   16200:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16204:	2b11      	cmp	r3, #17
   16206:	d18b      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.applicationContext);
   16208:	68b0      	ldr	r0, [r6, #8]
   1620a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   1620e:	f7f7 fd26 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16212:	2800      	cmp	r0, #0
   16214:	d184      	bne.n	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16216:	68b0      	ldr	r0, [r6, #8]
   16218:	a903      	add	r1, sp, #12
   1621a:	f7f7 fd20 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   1621e:	2800      	cmp	r0, #0
   16220:	f47f af7e 	bne.w	16120 <cosem_setAssociationLogicalName+0x1c4>
   16224:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16228:	2b11      	cmp	r3, #17
   1622a:	f47f af79 	bne.w	16120 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.contextId);
   1622e:	68b0      	ldr	r0, [r6, #8]
   16230:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   16234:	f7f7 fd13 	bl	dc5e <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16238:	4604      	mov	r4, r0
   1623a:	2800      	cmp	r0, #0
   1623c:	f43f aea0 	beq.w	15f80 <cosem_setAssociationLogicalName+0x24>
   16240:	e76e      	b.n	16120 <cosem_setAssociationLogicalName+0x1c4>
        else if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   16242:	f1b8 0f02 	cmp.w	r8, #2
   16246:	f040 80b7 	bne.w	163b8 <cosem_setAssociationLogicalName+0x45c>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   1624a:	6898      	ldr	r0, [r3, #8]
   1624c:	aa01      	add	r2, sp, #4
   1624e:	2100      	movs	r1, #0
   16250:	f005 f9c7 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16254:	4604      	mov	r4, r0
   16256:	2800      	cmp	r0, #0
   16258:	f47f ae92 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.jointIsoCtt = (unsigned char)var_toInteger(tmp);
   1625c:	9801      	ldr	r0, [sp, #4]
   1625e:	f005 fb3a 	bl	1b8d6 <var_toInteger>
   16262:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
            ret = va_getByIndex(value->Arr, 1, &tmp);
   16266:	68b0      	ldr	r0, [r6, #8]
   16268:	aa01      	add	r2, sp, #4
   1626a:	2101      	movs	r1, #1
   1626c:	f005 f9b9 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16270:	4604      	mov	r4, r0
   16272:	2800      	cmp	r0, #0
   16274:	f47f ae84 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.country = (unsigned char)var_toInteger(tmp);
   16278:	9801      	ldr	r0, [sp, #4]
   1627a:	f005 fb2c 	bl	1b8d6 <var_toInteger>
   1627e:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
            ret = va_getByIndex(value->Arr, 2, &tmp);
   16282:	68b0      	ldr	r0, [r6, #8]
   16284:	aa01      	add	r2, sp, #4
   16286:	4641      	mov	r1, r8
   16288:	f005 f9ab 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1628c:	4604      	mov	r4, r0
   1628e:	2800      	cmp	r0, #0
   16290:	f47f ae76 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.countryName = (uint16_t)var_toInteger(tmp);
   16294:	9801      	ldr	r0, [sp, #4]
   16296:	f005 fb1e 	bl	1b8d6 <var_toInteger>
            ret = va_getByIndex(value->Arr, 3, &tmp);
   1629a:	aa01      	add	r2, sp, #4
            object->applicationContextName.countryName = (uint16_t)var_toInteger(tmp);
   1629c:	8528      	strh	r0, [r5, #40]	; 0x28
            ret = va_getByIndex(value->Arr, 3, &tmp);
   1629e:	2103      	movs	r1, #3
   162a0:	68b0      	ldr	r0, [r6, #8]
   162a2:	f005 f99e 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   162a6:	4604      	mov	r4, r0
   162a8:	2800      	cmp	r0, #0
   162aa:	f47f ae69 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.identifiedOrganization = (unsigned char)var_toInteger(tmp);
   162ae:	9801      	ldr	r0, [sp, #4]
   162b0:	f005 fb11 	bl	1b8d6 <var_toInteger>
   162b4:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
            ret = va_getByIndex(value->Arr, 4, &tmp);
   162b8:	68b0      	ldr	r0, [r6, #8]
   162ba:	aa01      	add	r2, sp, #4
   162bc:	4639      	mov	r1, r7
   162be:	f005 f990 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   162c2:	4604      	mov	r4, r0
   162c4:	2800      	cmp	r0, #0
   162c6:	f47f ae5b 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.dlmsUA = (unsigned char)var_toInteger(tmp);
   162ca:	9801      	ldr	r0, [sp, #4]
   162cc:	f005 fb03 	bl	1b8d6 <var_toInteger>
   162d0:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
            ret = va_getByIndex(value->Arr, 5, &tmp);
   162d4:	68b0      	ldr	r0, [r6, #8]
   162d6:	aa01      	add	r2, sp, #4
   162d8:	2105      	movs	r1, #5
   162da:	f005 f982 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   162de:	4604      	mov	r4, r0
   162e0:	2800      	cmp	r0, #0
   162e2:	f47f ae4d 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.applicationContext = (unsigned char)var_toInteger(tmp);
   162e6:	9801      	ldr	r0, [sp, #4]
   162e8:	f005 faf5 	bl	1b8d6 <var_toInteger>
   162ec:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
            ret = va_getByIndex(value->Arr, 6, &tmp);
   162f0:	68b0      	ldr	r0, [r6, #8]
   162f2:	aa01      	add	r2, sp, #4
   162f4:	2106      	movs	r1, #6
   162f6:	f005 f974 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   162fa:	4604      	mov	r4, r0
   162fc:	2800      	cmp	r0, #0
   162fe:	f47f ae3f 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.contextId = (unsigned char)var_toInteger(tmp);
   16302:	9801      	ldr	r0, [sp, #4]
   16304:	f005 fae7 	bl	1b8d6 <var_toInteger>
   16308:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
   1630c:	e638      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
    else if (index == 5)
   1630e:	2a05      	cmp	r2, #5
   16310:	d15a      	bne.n	163c8 <cosem_setAssociationLogicalName+0x46c>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16312:	6898      	ldr	r0, [r3, #8]
   16314:	aa01      	add	r2, sp, #4
   16316:	2100      	movs	r1, #0
   16318:	f005 f963 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1631c:	4604      	mov	r4, r0
   1631e:	2800      	cmp	r0, #0
   16320:	f47f ae2e 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)var_toInteger(tmp);
   16324:	9801      	ldr	r0, [sp, #4]
   16326:	f005 fad6 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1632a:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)var_toInteger(tmp);
   1632c:	6328      	str	r0, [r5, #48]	; 0x30
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1632e:	2101      	movs	r1, #1
   16330:	68b0      	ldr	r0, [r6, #8]
   16332:	f005 f956 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16336:	4604      	mov	r4, r0
   16338:	2800      	cmp	r0, #0
   1633a:	f47f ae21 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.maxReceivePduSize = (uint16_t)var_toInteger(tmp);
   1633e:	9801      	ldr	r0, [sp, #4]
   16340:	f005 fac9 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   16344:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.maxReceivePduSize = (uint16_t)var_toInteger(tmp);
   16346:	86a8      	strh	r0, [r5, #52]	; 0x34
        ret = va_getByIndex(value->Arr, 2, &tmp);
   16348:	2102      	movs	r1, #2
   1634a:	68b0      	ldr	r0, [r6, #8]
   1634c:	f005 f949 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16350:	4604      	mov	r4, r0
   16352:	2800      	cmp	r0, #0
   16354:	f47f ae14 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.maxSendPduSize = (uint16_t)var_toInteger(tmp);
   16358:	9801      	ldr	r0, [sp, #4]
   1635a:	f005 fabc 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(value->Arr, 3, &tmp);
   1635e:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.maxSendPduSize = (uint16_t)var_toInteger(tmp);
   16360:	86e8      	strh	r0, [r5, #54]	; 0x36
        ret = va_getByIndex(value->Arr, 3, &tmp);
   16362:	2103      	movs	r1, #3
   16364:	68b0      	ldr	r0, [r6, #8]
   16366:	f005 f93c 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1636a:	4604      	mov	r4, r0
   1636c:	2800      	cmp	r0, #0
   1636e:	f47f ae07 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.dlmsVersionNumber = (unsigned char)var_toInteger(tmp);
   16372:	9801      	ldr	r0, [sp, #4]
   16374:	f005 faaf 	bl	1b8d6 <var_toInteger>
   16378:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
        ret = va_getByIndex(value->Arr, 4, &tmp);
   1637c:	68b0      	ldr	r0, [r6, #8]
   1637e:	aa01      	add	r2, sp, #4
   16380:	2104      	movs	r1, #4
   16382:	f005 f92e 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16386:	4604      	mov	r4, r0
   16388:	2800      	cmp	r0, #0
   1638a:	f47f adf9 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.qualityOfService = (unsigned char)var_toInteger(tmp);
   1638e:	9801      	ldr	r0, [sp, #4]
   16390:	f005 faa1 	bl	1b8d6 <var_toInteger>
   16394:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        ret = va_getByIndex(value->Arr, 5, &tmp);
   16398:	68b0      	ldr	r0, [r6, #8]
   1639a:	aa01      	add	r2, sp, #4
   1639c:	4639      	mov	r1, r7
   1639e:	f005 f920 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   163a2:	4604      	mov	r4, r0
   163a4:	2800      	cmp	r0, #0
   163a6:	f47f adeb 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
        bb_clear(&object->xDLMSContextInfo.cypheringInfo);
   163aa:	353c      	adds	r5, #60	; 0x3c
   163ac:	4628      	mov	r0, r5
   163ae:	f7f7 fc40 	bl	dc32 <bb_clear>
        if (tmp->byteArr != NULL)
   163b2:	9b01      	ldr	r3, [sp, #4]
   163b4:	6899      	ldr	r1, [r3, #8]
   163b6:	b909      	cbnz	r1, 163bc <cosem_setAssociationLogicalName+0x460>
    int ret = 0, pos = 0;
   163b8:	2400      	movs	r4, #0
   163ba:	e5e1      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
            bb_set2(&object->xDLMSContextInfo.cypheringInfo, tmp->byteArr, 0, tmp->byteArr->size);
   163bc:	88cb      	ldrh	r3, [r1, #6]
   163be:	2200      	movs	r2, #0
   163c0:	4628      	mov	r0, r5
   163c2:	f7f7 fbf1 	bl	dba8 <bb_set2>
   163c6:	e5db      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
    else if (index == 6)
   163c8:	2a06      	cmp	r2, #6
   163ca:	f040 80c9 	bne.w	16560 <cosem_setAssociationLogicalName+0x604>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   163ce:	781f      	ldrb	r7, [r3, #0]
   163d0:	2f09      	cmp	r7, #9
   163d2:	d160      	bne.n	16496 <cosem_setAssociationLogicalName+0x53a>
            if (value->byteArr->data[0] == 0x60)
   163d4:	689b      	ldr	r3, [r3, #8]
   163d6:	681a      	ldr	r2, [r3, #0]
   163d8:	7812      	ldrb	r2, [r2, #0]
   163da:	2a60      	cmp	r2, #96	; 0x60
   163dc:	d112      	bne.n	16404 <cosem_setAssociationLogicalName+0x4a8>
                object->authenticationMechanismName.jointIsoCtt = 0;
   163de:	2400      	movs	r4, #0
   163e0:	648c      	str	r4, [r1, #72]	; 0x48
                object->authenticationMechanismName.identifiedOrganization = value->byteArr->data[++pos];
   163e2:	681a      	ldr	r2, [r3, #0]
   163e4:	78d2      	ldrb	r2, [r2, #3]
   163e6:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
                object->authenticationMechanismName.dlmsUA = value->byteArr->data[++pos];
   163ea:	681a      	ldr	r2, [r3, #0]
   163ec:	7912      	ldrb	r2, [r2, #4]
   163ee:	f881 204d 	strb.w	r2, [r1, #77]	; 0x4d
                object->authenticationMechanismName.authenticationMechanismName = value->byteArr->data[++pos];
   163f2:	681a      	ldr	r2, [r3, #0]
   163f4:	7952      	ldrb	r2, [r2, #5]
   163f6:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
                object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)value->byteArr->data[++pos];
   163fa:	681b      	ldr	r3, [r3, #0]
   163fc:	799b      	ldrb	r3, [r3, #6]
                    object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)ch;
   163fe:	f885 304f 	strb.w	r3, [r5, #79]	; 0x4f
   16402:	e5bd      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
                if ((ret = cosem_checkStructure(value->byteArr, 7)) == 0 &&
   16404:	2107      	movs	r1, #7
   16406:	4618      	mov	r0, r3
   16408:	f7f8 f839 	bl	e47e <cosem_checkStructure>
   1640c:	4604      	mov	r4, r0
   1640e:	2800      	cmp	r0, #0
   16410:	f47f adb6 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.jointIsoCtt)) == 0 &&
   16414:	68b0      	ldr	r0, [r6, #8]
   16416:	f105 0148 	add.w	r1, r5, #72	; 0x48
   1641a:	f7f8 f862 	bl	e4e2 <cosem_getUInt8>
                if ((ret = cosem_checkStructure(value->byteArr, 7)) == 0 &&
   1641e:	4604      	mov	r4, r0
   16420:	2800      	cmp	r0, #0
   16422:	f47f adad 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.country)) == 0 &&
   16426:	68b0      	ldr	r0, [r6, #8]
   16428:	f105 0149 	add.w	r1, r5, #73	; 0x49
   1642c:	f7f8 f859 	bl	e4e2 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.jointIsoCtt)) == 0 &&
   16430:	4604      	mov	r4, r0
   16432:	2800      	cmp	r0, #0
   16434:	f47f ada4 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt16(value->byteArr, &object->authenticationMechanismName.countryName)) == 0 &&
   16438:	68b0      	ldr	r0, [r6, #8]
   1643a:	f105 014a 	add.w	r1, r5, #74	; 0x4a
   1643e:	f7f8 f864 	bl	e50a <cosem_getUInt16>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.country)) == 0 &&
   16442:	4604      	mov	r4, r0
   16444:	2800      	cmp	r0, #0
   16446:	f47f ad9b 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.identifiedOrganization)) == 0 &&
   1644a:	68b0      	ldr	r0, [r6, #8]
   1644c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   16450:	f7f8 f847 	bl	e4e2 <cosem_getUInt8>
                    (ret = cosem_getUInt16(value->byteArr, &object->authenticationMechanismName.countryName)) == 0 &&
   16454:	4604      	mov	r4, r0
   16456:	2800      	cmp	r0, #0
   16458:	f47f ad92 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.dlmsUA)) == 0 &&
   1645c:	68b0      	ldr	r0, [r6, #8]
   1645e:	f105 014d 	add.w	r1, r5, #77	; 0x4d
   16462:	f7f8 f83e 	bl	e4e2 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.identifiedOrganization)) == 0 &&
   16466:	4604      	mov	r4, r0
   16468:	2800      	cmp	r0, #0
   1646a:	f47f ad89 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.authenticationMechanismName)) == 0 &&
   1646e:	68b0      	ldr	r0, [r6, #8]
   16470:	f105 014e 	add.w	r1, r5, #78	; 0x4e
   16474:	f7f8 f835 	bl	e4e2 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.dlmsUA)) == 0 &&
   16478:	4604      	mov	r4, r0
   1647a:	2800      	cmp	r0, #0
   1647c:	f47f ad80 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &ch)) == 0)
   16480:	68b0      	ldr	r0, [r6, #8]
   16482:	a903      	add	r1, sp, #12
   16484:	f7f8 f82d 	bl	e4e2 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.authenticationMechanismName)) == 0 &&
   16488:	4604      	mov	r4, r0
   1648a:	2800      	cmp	r0, #0
   1648c:	f47f ad78 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                    object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)ch;
   16490:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16494:	e7b3      	b.n	163fe <cosem_setAssociationLogicalName+0x4a2>
        else  if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   16496:	2f02      	cmp	r7, #2
   16498:	d18e      	bne.n	163b8 <cosem_setAssociationLogicalName+0x45c>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   1649a:	6898      	ldr	r0, [r3, #8]
   1649c:	aa01      	add	r2, sp, #4
   1649e:	2100      	movs	r1, #0
   164a0:	f005 f89f 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   164a4:	4604      	mov	r4, r0
   164a6:	2800      	cmp	r0, #0
   164a8:	f47f ad6a 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.jointIsoCtt = (unsigned char)var_toInteger(tmp);
   164ac:	9801      	ldr	r0, [sp, #4]
   164ae:	f005 fa12 	bl	1b8d6 <var_toInteger>
   164b2:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
            ret = va_getByIndex(value->Arr, 1, &tmp);
   164b6:	68b0      	ldr	r0, [r6, #8]
   164b8:	aa01      	add	r2, sp, #4
   164ba:	2101      	movs	r1, #1
   164bc:	f005 f891 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   164c0:	4604      	mov	r4, r0
   164c2:	2800      	cmp	r0, #0
   164c4:	f47f ad5c 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.country = (unsigned char)var_toInteger(tmp);
   164c8:	9801      	ldr	r0, [sp, #4]
   164ca:	f005 fa04 	bl	1b8d6 <var_toInteger>
   164ce:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            ret = va_getByIndex(value->Arr, 2, &tmp);
   164d2:	68b0      	ldr	r0, [r6, #8]
   164d4:	aa01      	add	r2, sp, #4
   164d6:	4639      	mov	r1, r7
   164d8:	f005 f883 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   164dc:	4604      	mov	r4, r0
   164de:	2800      	cmp	r0, #0
   164e0:	f47f ad4e 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.countryName = (uint16_t)var_toInteger(tmp);
   164e4:	9801      	ldr	r0, [sp, #4]
   164e6:	f005 f9f6 	bl	1b8d6 <var_toInteger>
            ret = va_getByIndex(value->Arr, 3, &tmp);
   164ea:	aa01      	add	r2, sp, #4
            object->authenticationMechanismName.countryName = (uint16_t)var_toInteger(tmp);
   164ec:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
            ret = va_getByIndex(value->Arr, 3, &tmp);
   164f0:	2103      	movs	r1, #3
   164f2:	68b0      	ldr	r0, [r6, #8]
   164f4:	f005 f875 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   164f8:	4604      	mov	r4, r0
   164fa:	2800      	cmp	r0, #0
   164fc:	f47f ad40 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.identifiedOrganization = (unsigned char)var_toInteger(tmp);
   16500:	9801      	ldr	r0, [sp, #4]
   16502:	f005 f9e8 	bl	1b8d6 <var_toInteger>
   16506:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
            ret = va_getByIndex(value->Arr, 4, &tmp);
   1650a:	68b0      	ldr	r0, [r6, #8]
   1650c:	aa01      	add	r2, sp, #4
   1650e:	2104      	movs	r1, #4
   16510:	f005 f867 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16514:	4604      	mov	r4, r0
   16516:	2800      	cmp	r0, #0
   16518:	f47f ad32 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.dlmsUA = (unsigned char)var_toInteger(tmp);
   1651c:	9801      	ldr	r0, [sp, #4]
   1651e:	f005 f9da 	bl	1b8d6 <var_toInteger>
   16522:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
            ret = va_getByIndex(value->Arr, 5, &tmp);
   16526:	68b0      	ldr	r0, [r6, #8]
   16528:	aa01      	add	r2, sp, #4
   1652a:	2105      	movs	r1, #5
   1652c:	f005 f859 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16530:	4604      	mov	r4, r0
   16532:	2800      	cmp	r0, #0
   16534:	f47f ad24 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.authenticationMechanismName = (unsigned char)var_toInteger(tmp);
   16538:	9801      	ldr	r0, [sp, #4]
   1653a:	f005 f9cc 	bl	1b8d6 <var_toInteger>
   1653e:	f885 004e 	strb.w	r0, [r5, #78]	; 0x4e
            ret = va_getByIndex(value->Arr, 6, &tmp);
   16542:	68b0      	ldr	r0, [r6, #8]
   16544:	aa01      	add	r2, sp, #4
   16546:	2106      	movs	r1, #6
   16548:	f005 f84b 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1654c:	4604      	mov	r4, r0
   1654e:	2800      	cmp	r0, #0
   16550:	f47f ad16 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)var_toInteger(tmp);
   16554:	9801      	ldr	r0, [sp, #4]
   16556:	f005 f9be 	bl	1b8d6 <var_toInteger>
   1655a:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
   1655e:	e50f      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
    else if (index == 7)
   16560:	2a07      	cmp	r2, #7
   16562:	d111      	bne.n	16588 <cosem_setAssociationLogicalName+0x62c>
        bb_clear(&object->secret);
   16564:	3550      	adds	r5, #80	; 0x50
   16566:	4628      	mov	r0, r5
   16568:	f7f7 fb63 	bl	dc32 <bb_clear>
        if (value->byteArr != NULL)
   1656c:	68b4      	ldr	r4, [r6, #8]
   1656e:	2c00      	cmp	r4, #0
   16570:	f43f af22 	beq.w	163b8 <cosem_setAssociationLogicalName+0x45c>
            ret = bb_set2(&object->secret, value->byteArr, 0, bb_size(value->byteArr));
   16574:	4620      	mov	r0, r4
   16576:	f7f7 f996 	bl	d8a6 <bb_size>
   1657a:	2200      	movs	r2, #0
   1657c:	4603      	mov	r3, r0
   1657e:	4621      	mov	r1, r4
   16580:	4628      	mov	r0, r5
   16582:	f7f7 fb11 	bl	dba8 <bb_set2>
   16586:	e5c5      	b.n	16114 <cosem_setAssociationLogicalName+0x1b8>
    else if (index == 8)
   16588:	2a08      	cmp	r2, #8
   1658a:	d104      	bne.n	16596 <cosem_setAssociationLogicalName+0x63a>
        object->associationStatus = (DLMS_ASSOCIATION_STATUS)var_toInteger(value);
   1658c:	4618      	mov	r0, r3
   1658e:	f005 f9a2 	bl	1b8d6 <var_toInteger>
   16592:	7428      	strb	r0, [r5, #16]
   16594:	e710      	b.n	163b8 <cosem_setAssociationLogicalName+0x45c>
    else if (index == 9)
   16596:	2a09      	cmp	r2, #9
   16598:	d10f      	bne.n	165ba <cosem_setAssociationLogicalName+0x65e>
        if (bb_size(value->byteArr) != 6)
   1659a:	6898      	ldr	r0, [r3, #8]
   1659c:	f7f7 f983 	bl	d8a6 <bb_size>
   165a0:	2806      	cmp	r0, #6
   165a2:	f040 8093 	bne.w	166cc <cosem_setAssociationLogicalName+0x770>
        ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   165a6:	68b2      	ldr	r2, [r6, #8]
   165a8:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   165ac:	6812      	ldr	r2, [r2, #0]
   165ae:	2140      	movs	r1, #64	; 0x40
   165b0:	f108 0098 	add.w	r0, r8, #152	; 0x98
   165b4:	f004 fdd2 	bl	1b15c <oa_findByLN>
   165b8:	e5ac      	b.n	16114 <cosem_setAssociationLogicalName+0x1b8>
    else if (index == 10)
   165ba:	2a0a      	cmp	r2, #10
   165bc:	d14f      	bne.n	1665e <cosem_setAssociationLogicalName+0x702>
        obj_clearUserList(&object->userList);
   165be:	3560      	adds	r5, #96	; 0x60
   165c0:	4628      	mov	r0, r5
   165c2:	f7fe fa88 	bl	14ad6 <obj_clearUserList>
        if (value->Arr != NULL)
   165c6:	68b3      	ldr	r3, [r6, #8]
   165c8:	2b00      	cmp	r3, #0
   165ca:	f43f aef5 	beq.w	163b8 <cosem_setAssociationLogicalName+0x45c>
            for (pos = 0; pos != value->Arr->size; ++pos)
   165ce:	f04f 0800 	mov.w	r8, #0
   165d2:	e024      	b.n	1661e <cosem_setAssociationLogicalName+0x6c2>
                it->key = (unsigned char)var_toInteger(tmp2);
   165d4:	9802      	ldr	r0, [sp, #8]
   165d6:	f005 f97e 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   165da:	9b01      	ldr	r3, [sp, #4]
                it->key = (unsigned char)var_toInteger(tmp2);
   165dc:	7038      	strb	r0, [r7, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   165de:	6898      	ldr	r0, [r3, #8]
   165e0:	aa02      	add	r2, sp, #8
   165e2:	2101      	movs	r1, #1
   165e4:	f004 fffd 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   165e8:	4604      	mov	r4, r0
   165ea:	2800      	cmp	r0, #0
   165ec:	f47f acc8 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                it->value = (char*)gxmalloc(tmp->strVal->size + 1);
   165f0:	9b01      	ldr	r3, [sp, #4]
   165f2:	689b      	ldr	r3, [r3, #8]
   165f4:	88d8      	ldrh	r0, [r3, #6]
   165f6:	3001      	adds	r0, #1
   165f8:	f7f6 f934 	bl	c864 <malloc>
   165fc:	6078      	str	r0, [r7, #4]
                if (it->value == NULL)
   165fe:	b358      	cbz	r0, 16658 <cosem_setAssociationLogicalName+0x6fc>
                ((char*)it->value)[tmp->strVal->size] = 0;
   16600:	9a01      	ldr	r2, [sp, #4]
   16602:	6891      	ldr	r1, [r2, #8]
   16604:	88c9      	ldrh	r1, [r1, #6]
   16606:	5444      	strb	r4, [r0, r1]
                memcpy(it->value, tmp->strVal->data, tmp->strVal->size);
   16608:	6893      	ldr	r3, [r2, #8]
   1660a:	6819      	ldr	r1, [r3, #0]
   1660c:	88da      	ldrh	r2, [r3, #6]
   1660e:	f007 f93f 	bl	1d890 <memcpy>
                arr_push(&object->userList, it);
   16612:	4639      	mov	r1, r7
   16614:	4628      	mov	r0, r5
   16616:	f7fa fd3b 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1661a:	f108 0801 	add.w	r8, r8, #1
   1661e:	68b0      	ldr	r0, [r6, #8]
   16620:	88c3      	ldrh	r3, [r0, #6]
   16622:	4543      	cmp	r3, r8
   16624:	f43f aec8 	beq.w	163b8 <cosem_setAssociationLogicalName+0x45c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16628:	aa01      	add	r2, sp, #4
   1662a:	4641      	mov	r1, r8
   1662c:	f004 ffd9 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16630:	4604      	mov	r4, r0
   16632:	2800      	cmp	r0, #0
   16634:	f47f aca4 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   16638:	9b01      	ldr	r3, [sp, #4]
   1663a:	4601      	mov	r1, r0
   1663c:	aa02      	add	r2, sp, #8
   1663e:	6898      	ldr	r0, [r3, #8]
   16640:	f004 ffcf 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16644:	4604      	mov	r4, r0
   16646:	2800      	cmp	r0, #0
   16648:	f47f ac9a 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
                it = (gxKey2*)gxmalloc(sizeof(gxKey2));
   1664c:	2008      	movs	r0, #8
   1664e:	f7f6 f909 	bl	c864 <malloc>
                if (it == NULL)
   16652:	4607      	mov	r7, r0
   16654:	2800      	cmp	r0, #0
   16656:	d1bd      	bne.n	165d4 <cosem_setAssociationLogicalName+0x678>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   16658:	f44f 7482 	mov.w	r4, #260	; 0x104
   1665c:	e490      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
    else if (index == 11)
   1665e:	2a0b      	cmp	r2, #11
   16660:	f47f ad5e 	bne.w	16120 <cosem_setAssociationLogicalName+0x1c4>
        if (object->currentUser.value != NULL)
   16664:	6f08      	ldr	r0, [r1, #112]	; 0x70
   16666:	b108      	cbz	r0, 1666c <cosem_setAssociationLogicalName+0x710>
            gxfree(object->currentUser.value);
   16668:	f7f6 f904 	bl	c874 <free>
        if (value->Arr->size == 2)
   1666c:	68b0      	ldr	r0, [r6, #8]
   1666e:	88c3      	ldrh	r3, [r0, #6]
   16670:	2b02      	cmp	r3, #2
   16672:	f47f ad55 	bne.w	16120 <cosem_setAssociationLogicalName+0x1c4>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   16676:	aa01      	add	r2, sp, #4
   16678:	2100      	movs	r1, #0
   1667a:	f004 ffb2 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1667e:	4604      	mov	r4, r0
   16680:	2800      	cmp	r0, #0
   16682:	f47f ac7d 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            object->currentUser.key = (unsigned char)var_toInteger(tmp);
   16686:	9801      	ldr	r0, [sp, #4]
   16688:	f005 f925 	bl	1b8d6 <var_toInteger>
   1668c:	f885 006c 	strb.w	r0, [r5, #108]	; 0x6c
            ret = va_getByIndex(value->Arr, 1, &tmp);
   16690:	68b0      	ldr	r0, [r6, #8]
   16692:	aa01      	add	r2, sp, #4
   16694:	2101      	movs	r1, #1
   16696:	f004 ffa4 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1669a:	4604      	mov	r4, r0
   1669c:	2800      	cmp	r0, #0
   1669e:	f47f ac6f 	bne.w	15f80 <cosem_setAssociationLogicalName+0x24>
            if (tmp->strVal != NULL && tmp->strVal->size != 0)
   166a2:	9b01      	ldr	r3, [sp, #4]
   166a4:	689b      	ldr	r3, [r3, #8]
   166a6:	2b00      	cmp	r3, #0
   166a8:	f43f ae86 	beq.w	163b8 <cosem_setAssociationLogicalName+0x45c>
   166ac:	88d8      	ldrh	r0, [r3, #6]
   166ae:	2800      	cmp	r0, #0
   166b0:	f43f ae82 	beq.w	163b8 <cosem_setAssociationLogicalName+0x45c>
                object->currentUser.value = gxmalloc(tmp->strVal->size + 1);
   166b4:	3001      	adds	r0, #1
   166b6:	f7f6 f8d5 	bl	c864 <malloc>
   166ba:	6728      	str	r0, [r5, #112]	; 0x70
                if (object->currentUser.value == NULL)
   166bc:	2800      	cmp	r0, #0
   166be:	d0cb      	beq.n	16658 <cosem_setAssociationLogicalName+0x6fc>
                memcpy(object->currentUser.value, tmp->strVal, tmp->strVal->size);
   166c0:	9b01      	ldr	r3, [sp, #4]
   166c2:	6899      	ldr	r1, [r3, #8]
   166c4:	88ca      	ldrh	r2, [r1, #6]
   166c6:	f007 f8e3 	bl	1d890 <memcpy>
   166ca:	e459      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>
            return DLMS_ERROR_CODE_UNMATCH_TYPE;
   166cc:	240c      	movs	r4, #12
   166ce:	e457      	b.n	15f80 <cosem_setAssociationLogicalName+0x24>

000166d0 <updateSNAccessRights>:
{
   166d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    gxObject* obj = NULL;
   166d2:	2400      	movs	r4, #0
{
   166d4:	4606      	mov	r6, r0
   166d6:	460d      	mov	r5, r1
    gxObject* obj = NULL;
   166d8:	9403      	str	r4, [sp, #12]
    for (pos = 0; pos != data->size; ++pos)
   166da:	88eb      	ldrh	r3, [r5, #6]
   166dc:	42a3      	cmp	r3, r4
   166de:	d101      	bne.n	166e4 <updateSNAccessRights+0x14>
    return DLMS_ERROR_CODE_OK;
   166e0:	2000      	movs	r0, #0
   166e2:	e01f      	b.n	16724 <updateSNAccessRights+0x54>
        ret = va_getByIndex(data, pos, &it);
   166e4:	aa01      	add	r2, sp, #4
   166e6:	4621      	mov	r1, r4
   166e8:	4628      	mov	r0, r5
   166ea:	f004 ff7a 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   166ee:	b9c8      	cbnz	r0, 16724 <updateSNAccessRights+0x54>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   166f0:	9b01      	ldr	r3, [sp, #4]
   166f2:	4601      	mov	r1, r0
   166f4:	aa02      	add	r2, sp, #8
   166f6:	6898      	ldr	r0, [r3, #8]
   166f8:	f004 ff73 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   166fc:	b990      	cbnz	r0, 16724 <updateSNAccessRights+0x54>
        sn = (uint16_t)var_toInteger(tmp);
   166fe:	9802      	ldr	r0, [sp, #8]
   16700:	f005 f8e9 	bl	1b8d6 <var_toInteger>
        ret = oa_findBySN(objectList, sn, &obj);
   16704:	aa03      	add	r2, sp, #12
   16706:	b281      	uxth	r1, r0
   16708:	4630      	mov	r0, r6
   1670a:	f004 fd0c 	bl	1b126 <oa_findBySN>
        if (ret != DLMS_ERROR_CODE_OK)
   1670e:	b948      	cbnz	r0, 16724 <updateSNAccessRights+0x54>
        if (obj != NULL)
   16710:	9803      	ldr	r0, [sp, #12]
   16712:	b908      	cbnz	r0, 16718 <updateSNAccessRights+0x48>
    for (pos = 0; pos != data->size; ++pos)
   16714:	3401      	adds	r4, #1
   16716:	e7e0      	b.n	166da <updateSNAccessRights+0xa>
            ret = cosem_updateAttributeAccessModes(obj, it->Arr);
   16718:	9b01      	ldr	r3, [sp, #4]
   1671a:	6899      	ldr	r1, [r3, #8]
   1671c:	f7ff fb6b 	bl	15df6 <cosem_updateAttributeAccessModes>
            if (ret != DLMS_ERROR_CODE_OK)
   16720:	2800      	cmp	r0, #0
   16722:	d0f7      	beq.n	16714 <updateSNAccessRights+0x44>
}
   16724:	b004      	add	sp, #16
   16726:	bd70      	pop	{r4, r5, r6, pc}

00016728 <cosem_parseSNObjects>:
{
   16728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1672c:	b08d      	sub	sp, #52	; 0x34
   1672e:	460d      	mov	r5, r1
    dlmsVARIANT* it1 = NULL, * it2 = NULL, * it3 = NULL, * ln = NULL;
   16730:	2400      	movs	r4, #0
{
   16732:	4680      	mov	r8, r0
    var_init(&value);
   16734:	a808      	add	r0, sp, #32
    dlmsVARIANT* it1 = NULL, * it2 = NULL, * it3 = NULL, * ln = NULL;
   16736:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1673a:	e9cd 4403 	strd	r4, r4, [sp, #12]
{
   1673e:	4617      	mov	r7, r2
    var_init(&value);
   16740:	f004 fd75 	bl	1b22e <var_init>
    if ((ret = bb_getUInt8(data, &size)) != DLMS_ERROR_CODE_OK)
   16744:	f10d 0101 	add.w	r1, sp, #1
   16748:	4628      	mov	r0, r5
   1674a:	f7f7 fa88 	bl	dc5e <bb_getUInt8>
   1674e:	bb90      	cbnz	r0, 167b6 <cosem_parseSNObjects+0x8e>
    if (size != 0x01)
   16750:	f89d 3001 	ldrb.w	r3, [sp, #1]
   16754:	2b01      	cmp	r3, #1
   16756:	f040 808e 	bne.w	16876 <cosem_parseSNObjects+0x14e>
    if ((ret = hlp_getObjectCount2(data, &count)) != 0)
   1675a:	f10d 0102 	add.w	r1, sp, #2
   1675e:	4628      	mov	r0, r5
   16760:	f004 f9d8 	bl	1ab14 <hlp_getObjectCount2>
   16764:	4604      	mov	r4, r0
   16766:	bb30      	cbnz	r0, 167b6 <cosem_parseSNObjects+0x8e>
    oa_capacity(objects, (uint16_t)count);
   16768:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1676c:	4638      	mov	r0, r7
   1676e:	f004 fc4b 	bl	1b008 <oa_capacity>
    for (pos = 0; pos != count; ++pos)
   16772:	4626      	mov	r6, r4
   16774:	46a2      	mov	sl, r4
   16776:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1677a:	b2b3      	uxth	r3, r6
   1677c:	429a      	cmp	r2, r3
   1677e:	d101      	bne.n	16784 <cosem_parseSNObjects+0x5c>
   16780:	2400      	movs	r4, #0
   16782:	e015      	b.n	167b0 <cosem_parseSNObjects+0x88>
        var_clear(&value);
   16784:	a808      	add	r0, sp, #32
   16786:	f004 feae 	bl	1b4e6 <var_clear>
        di_init(&info);
   1678a:	a806      	add	r0, sp, #24
        object = NULL;
   1678c:	f8cd a014 	str.w	sl, [sp, #20]
        di_init(&info);
   16790:	f7f8 f93a 	bl	ea08 <di_init>
        if ((ret = dlms_getData(data, &info, &value)) != 0)
   16794:	aa08      	add	r2, sp, #32
   16796:	a906      	add	r1, sp, #24
   16798:	4628      	mov	r0, r5
   1679a:	f7f8 fdc5 	bl	f328 <dlms_getData>
   1679e:	4604      	mov	r4, r0
   167a0:	b930      	cbnz	r0, 167b0 <cosem_parseSNObjects+0x88>
        if (value.vt != DLMS_DATA_TYPE_STRUCTURE || value.Arr->size != 4)
   167a2:	f89d 9020 	ldrb.w	r9, [sp, #32]
   167a6:	f1b9 0f02 	cmp.w	r9, #2
   167aa:	d008      	beq.n	167be <cosem_parseSNObjects+0x96>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   167ac:	f44f 7481 	mov.w	r4, #258	; 0x102
    var_clear(&value);
   167b0:	a808      	add	r0, sp, #32
   167b2:	f004 fe98 	bl	1b4e6 <var_clear>
}
   167b6:	4620      	mov	r0, r4
   167b8:	b00d      	add	sp, #52	; 0x34
   167ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (value.vt != DLMS_DATA_TYPE_STRUCTURE || value.Arr->size != 4)
   167be:	980a      	ldr	r0, [sp, #40]	; 0x28
   167c0:	88c3      	ldrh	r3, [r0, #6]
   167c2:	2b04      	cmp	r3, #4
   167c4:	d1f2      	bne.n	167ac <cosem_parseSNObjects+0x84>
        if ((ret = va_getByIndex(value.Arr, 0, &it1)) != 0 ||
   167c6:	4621      	mov	r1, r4
   167c8:	aa01      	add	r2, sp, #4
   167ca:	f004 ff0a 	bl	1b5e2 <va_getByIndex>
   167ce:	4604      	mov	r4, r0
   167d0:	2800      	cmp	r0, #0
   167d2:	d1ed      	bne.n	167b0 <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 1, &it2)) != 0 ||
   167d4:	980a      	ldr	r0, [sp, #40]	; 0x28
   167d6:	aa02      	add	r2, sp, #8
   167d8:	2101      	movs	r1, #1
   167da:	f004 ff02 	bl	1b5e2 <va_getByIndex>
        if ((ret = va_getByIndex(value.Arr, 0, &it1)) != 0 ||
   167de:	4604      	mov	r4, r0
   167e0:	2800      	cmp	r0, #0
   167e2:	d1e5      	bne.n	167b0 <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 2, &it3)) != 0 ||
   167e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   167e6:	aa03      	add	r2, sp, #12
   167e8:	4649      	mov	r1, r9
   167ea:	f004 fefa 	bl	1b5e2 <va_getByIndex>
            (ret = va_getByIndex(value.Arr, 1, &it2)) != 0 ||
   167ee:	4604      	mov	r4, r0
   167f0:	2800      	cmp	r0, #0
   167f2:	d1dd      	bne.n	167b0 <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 3, &ln)) != 0)
   167f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   167f6:	aa04      	add	r2, sp, #16
   167f8:	2103      	movs	r1, #3
   167fa:	f004 fef2 	bl	1b5e2 <va_getByIndex>
            (ret = va_getByIndex(value.Arr, 2, &it3)) != 0 ||
   167fe:	4604      	mov	r4, r0
   16800:	2800      	cmp	r0, #0
   16802:	d1d5      	bne.n	167b0 <cosem_parseSNObjects+0x88>
        if (it1->vt != DLMS_DATA_TYPE_INT16 ||
   16804:	9801      	ldr	r0, [sp, #4]
   16806:	7803      	ldrb	r3, [r0, #0]
   16808:	2b10      	cmp	r3, #16
   1680a:	d1cf      	bne.n	167ac <cosem_parseSNObjects+0x84>
            it2->vt != DLMS_DATA_TYPE_UINT16 ||
   1680c:	9b02      	ldr	r3, [sp, #8]
        if (it1->vt != DLMS_DATA_TYPE_INT16 ||
   1680e:	781b      	ldrb	r3, [r3, #0]
   16810:	2b12      	cmp	r3, #18
   16812:	d1cb      	bne.n	167ac <cosem_parseSNObjects+0x84>
            it3->vt != DLMS_DATA_TYPE_UINT8 ||
   16814:	9b03      	ldr	r3, [sp, #12]
            it2->vt != DLMS_DATA_TYPE_UINT16 ||
   16816:	781b      	ldrb	r3, [r3, #0]
   16818:	2b11      	cmp	r3, #17
   1681a:	d1c7      	bne.n	167ac <cosem_parseSNObjects+0x84>
            ln->vt != DLMS_DATA_TYPE_OCTET_STRING)
   1681c:	9b04      	ldr	r3, [sp, #16]
            it3->vt != DLMS_DATA_TYPE_UINT8 ||
   1681e:	781b      	ldrb	r3, [r3, #0]
   16820:	2b09      	cmp	r3, #9
   16822:	d1c3      	bne.n	167ac <cosem_parseSNObjects+0x84>
        sn = (short)var_toInteger(it1);
   16824:	f005 f857 	bl	1b8d6 <var_toInteger>
   16828:	4683      	mov	fp, r0
        class_id = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   1682a:	9802      	ldr	r0, [sp, #8]
   1682c:	f005 f853 	bl	1b8d6 <var_toInteger>
   16830:	4604      	mov	r4, r0
        version = (unsigned char)var_toInteger(it3);
   16832:	9803      	ldr	r0, [sp, #12]
   16834:	f005 f84f 	bl	1b8d6 <var_toInteger>
        ret = cosem_createObject(class_id, &object);
   16838:	a905      	add	r1, sp, #20
        version = (unsigned char)var_toInteger(it3);
   1683a:	4681      	mov	r9, r0
        ret = cosem_createObject(class_id, &object);
   1683c:	b2a0      	uxth	r0, r4
   1683e:	f7eb fc63 	bl	2108 <cosem_createObject>
        if (ret == 0)
   16842:	4604      	mov	r4, r0
   16844:	b9a0      	cbnz	r0, 16870 <cosem_parseSNObjects+0x148>
            object->shortName = sn;
   16846:	9805      	ldr	r0, [sp, #20]
        version = (unsigned char)var_toInteger(it3);
   16848:	f880 9002 	strb.w	r9, [r0, #2]
            cosem_setLogicalName(object, ln->byteArr->data);
   1684c:	9b04      	ldr	r3, [sp, #16]
            object->shortName = sn;
   1684e:	f8a0 b004 	strh.w	fp, [r0, #4]
            cosem_setLogicalName(object, ln->byteArr->data);
   16852:	689b      	ldr	r3, [r3, #8]
   16854:	6819      	ldr	r1, [r3, #0]
   16856:	f7f7 fded 	bl	e434 <cosem_setLogicalName>
            oa_push(objects, object);
   1685a:	9905      	ldr	r1, [sp, #20]
   1685c:	4638      	mov	r0, r7
   1685e:	f004 fbee 	bl	1b03e <oa_push>
            oa_push(&settings->releasedObjects, object);
   16862:	9905      	ldr	r1, [sp, #20]
   16864:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   16868:	f004 fbe9 	bl	1b03e <oa_push>
    for (pos = 0; pos != count; ++pos)
   1686c:	3601      	adds	r6, #1
   1686e:	e782      	b.n	16776 <cosem_parseSNObjects+0x4e>
            if (ret != DLMS_ERROR_CODE_UNAVAILABLE_OBJECT)
   16870:	280b      	cmp	r0, #11
   16872:	d0fb      	beq.n	1686c <cosem_parseSNObjects+0x144>
   16874:	e79c      	b.n	167b0 <cosem_parseSNObjects+0x88>
        return DLMS_ERROR_CODE_INVALID_RESPONSE;
   16876:	f44f 7487 	mov.w	r4, #270	; 0x10e
   1687a:	e79c      	b.n	167b6 <cosem_parseSNObjects+0x8e>

0001687c <cosem_setAssociationShortName>:
    if (index == 2)
   1687c:	2a02      	cmp	r2, #2
{
   1687e:	b570      	push	{r4, r5, r6, lr}
   16880:	4606      	mov	r6, r0
   16882:	460c      	mov	r4, r1
   16884:	461d      	mov	r5, r3
    if (index == 2)
   16886:	d10a      	bne.n	1689e <cosem_setAssociationShortName+0x22>
        oa_empty(&object->objectList);
   16888:	3410      	adds	r4, #16
   1688a:	4620      	mov	r0, r4
   1688c:	f004 fc2e 	bl	1b0ec <oa_empty>
        ret = cosem_parseSNObjects(settings, value->byteArr, &object->objectList);
   16890:	68a9      	ldr	r1, [r5, #8]
   16892:	4622      	mov	r2, r4
   16894:	4630      	mov	r0, r6
}
   16896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = cosem_parseSNObjects(settings, value->byteArr, &object->objectList);
   1689a:	f7ff bf45 	b.w	16728 <cosem_parseSNObjects>
    else if (index == 3)
   1689e:	2a03      	cmp	r2, #3
   168a0:	d106      	bne.n	168b0 <cosem_setAssociationShortName+0x34>
        ret = updateSNAccessRights(&object->objectList, value->Arr);
   168a2:	f104 0010 	add.w	r0, r4, #16
   168a6:	6899      	ldr	r1, [r3, #8]
}
   168a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = updateSNAccessRights(&object->objectList, value->Arr);
   168ac:	f7ff bf10 	b.w	166d0 <updateSNAccessRights>
    else if (index == 4)
   168b0:	2a04      	cmp	r2, #4
   168b2:	d10f      	bne.n	168d4 <cosem_setAssociationShortName+0x58>
        if (bb_size(value->byteArr) != 6)
   168b4:	6898      	ldr	r0, [r3, #8]
   168b6:	f7f6 fff6 	bl	d8a6 <bb_size>
   168ba:	2806      	cmp	r0, #6
   168bc:	d10d      	bne.n	168da <cosem_setAssociationShortName+0x5e>
            ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   168be:	68aa      	ldr	r2, [r5, #8]
   168c0:	f104 0318 	add.w	r3, r4, #24
   168c4:	f106 0098 	add.w	r0, r6, #152	; 0x98
   168c8:	6812      	ldr	r2, [r2, #0]
}
   168ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   168ce:	2140      	movs	r1, #64	; 0x40
   168d0:	f004 bc44 	b.w	1b15c <oa_findByLN>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   168d4:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   168d8:	bd70      	pop	{r4, r5, r6, pc}
            ret = DLMS_ERROR_CODE_UNMATCH_TYPE;
   168da:	200c      	movs	r0, #12
    return ret;
   168dc:	e7fc      	b.n	168d8 <cosem_setAssociationShortName+0x5c>

000168de <cosem_setAutoAnswer>:
{
   168de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   168e2:	2902      	cmp	r1, #2
{
   168e4:	b08a      	sub	sp, #40	; 0x28
   168e6:	4605      	mov	r5, r0
   168e8:	4616      	mov	r6, r2
    if (index == 2)
   168ea:	d108      	bne.n	168fe <cosem_setAutoAnswer+0x20>
        object->mode = (DLMS_AUTO_ANSWER_MODE)var_toInteger(value);
   168ec:	4610      	mov	r0, r2
   168ee:	f004 fff2 	bl	1b8d6 <var_toInteger>
   168f2:	74a8      	strb	r0, [r5, #18]
    int ret = 0, pos;
   168f4:	2400      	movs	r4, #0
}
   168f6:	4620      	mov	r0, r4
   168f8:	b00a      	add	sp, #40	; 0x28
   168fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (index == 3)
   168fe:	2903      	cmp	r1, #3
   16900:	d15b      	bne.n	169ba <cosem_setAutoAnswer+0xdc>
        arr_clearKeyValuePair(&object->listeningWindow);
   16902:	3514      	adds	r5, #20
   16904:	4628      	mov	r0, r5
   16906:	f7fa fc11 	bl	1112c <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   1690a:	68b3      	ldr	r3, [r6, #8]
   1690c:	2b00      	cmp	r3, #0
   1690e:	d0f1      	beq.n	168f4 <cosem_setAutoAnswer+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16910:	2700      	movs	r7, #0
   16912:	e04d      	b.n	169b0 <cosem_setAutoAnswer+0xd2>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16914:	466a      	mov	r2, sp
   16916:	4639      	mov	r1, r7
   16918:	f004 fe63 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1691c:	4604      	mov	r4, r0
   1691e:	2800      	cmp	r0, #0
   16920:	d1e9      	bne.n	168f6 <cosem_setAutoAnswer+0x18>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16922:	9b00      	ldr	r3, [sp, #0]
   16924:	4601      	mov	r1, r0
   16926:	aa01      	add	r2, sp, #4
   16928:	6898      	ldr	r0, [r3, #8]
   1692a:	f004 fe5a 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1692e:	4604      	mov	r4, r0
   16930:	2800      	cmp	r0, #0
   16932:	d1e0      	bne.n	168f6 <cosem_setAutoAnswer+0x18>
                var_init(&start);
   16934:	a802      	add	r0, sp, #8
   16936:	f004 fc7a 	bl	1b22e <var_init>
                var_init(&end);
   1693a:	a806      	add	r0, sp, #24
   1693c:	f004 fc77 	bl	1b22e <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start);
   16940:	9801      	ldr	r0, [sp, #4]
   16942:	aa02      	add	r2, sp, #8
   16944:	2119      	movs	r1, #25
   16946:	f7fa f87d 	bl	10a44 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1694a:	4604      	mov	r4, r0
   1694c:	2800      	cmp	r0, #0
   1694e:	d1d2      	bne.n	168f6 <cosem_setAutoAnswer+0x18>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16950:	9b00      	ldr	r3, [sp, #0]
   16952:	aa01      	add	r2, sp, #4
   16954:	6898      	ldr	r0, [r3, #8]
   16956:	2101      	movs	r1, #1
   16958:	f004 fe43 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1695c:	4604      	mov	r4, r0
   1695e:	2800      	cmp	r0, #0
   16960:	d1c9      	bne.n	168f6 <cosem_setAutoAnswer+0x18>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end);
   16962:	9801      	ldr	r0, [sp, #4]
   16964:	aa06      	add	r2, sp, #24
   16966:	2119      	movs	r1, #25
   16968:	f7fa f86c 	bl	10a44 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1696c:	4604      	mov	r4, r0
   1696e:	2800      	cmp	r0, #0
   16970:	d1c1      	bne.n	168f6 <cosem_setAutoAnswer+0x18>
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   16972:	200c      	movs	r0, #12
   16974:	f7f5 ff76 	bl	c864 <malloc>
   16978:	4604      	mov	r4, r0
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   1697a:	200c      	movs	r0, #12
   1697c:	f7f5 ff72 	bl	c864 <malloc>
                time_copy(s, start.dateTime);
   16980:	9904      	ldr	r1, [sp, #16]
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   16982:	4680      	mov	r8, r0
                time_copy(s, start.dateTime);
   16984:	4620      	mov	r0, r4
   16986:	f7f8 f8aa 	bl	eade <time_copy>
                time_copy(e, end.dateTime);
   1698a:	9908      	ldr	r1, [sp, #32]
   1698c:	4640      	mov	r0, r8
   1698e:	f7f8 f8a6 	bl	eade <time_copy>
                arr_push(&object->listeningWindow, key_init(s, e));
   16992:	4641      	mov	r1, r8
   16994:	4620      	mov	r0, r4
   16996:	f7fd fe84 	bl	146a2 <key_init>
   1699a:	4601      	mov	r1, r0
   1699c:	4628      	mov	r0, r5
   1699e:	f7fa fb77 	bl	11090 <arr_push>
                var_clear(&start);
   169a2:	a802      	add	r0, sp, #8
   169a4:	f004 fd9f 	bl	1b4e6 <var_clear>
                var_clear(&end);
   169a8:	a806      	add	r0, sp, #24
   169aa:	f004 fd9c 	bl	1b4e6 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   169ae:	3701      	adds	r7, #1
   169b0:	68b0      	ldr	r0, [r6, #8]
   169b2:	88c3      	ldrh	r3, [r0, #6]
   169b4:	42bb      	cmp	r3, r7
   169b6:	d1ad      	bne.n	16914 <cosem_setAutoAnswer+0x36>
   169b8:	e79c      	b.n	168f4 <cosem_setAutoAnswer+0x16>
    else if (index == 4)
   169ba:	2904      	cmp	r1, #4
   169bc:	d105      	bne.n	169ca <cosem_setAutoAnswer+0xec>
        object->status = (DLMS_AUTO_ANSWER_STATUS)var_toInteger(value);
   169be:	4610      	mov	r0, r2
   169c0:	f004 ff89 	bl	1b8d6 <var_toInteger>
   169c4:	f885 0020 	strb.w	r0, [r5, #32]
   169c8:	e794      	b.n	168f4 <cosem_setAutoAnswer+0x16>
    else if (index == 5)
   169ca:	2905      	cmp	r1, #5
   169cc:	d105      	bne.n	169da <cosem_setAutoAnswer+0xfc>
        object->numberOfCalls = (unsigned char)var_toInteger(value);
   169ce:	4610      	mov	r0, r2
   169d0:	f004 ff81 	bl	1b8d6 <var_toInteger>
   169d4:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
   169d8:	e78c      	b.n	168f4 <cosem_setAutoAnswer+0x16>
    else if (index == 6)
   169da:	2906      	cmp	r1, #6
   169dc:	d119      	bne.n	16a12 <cosem_setAutoAnswer+0x134>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   169de:	68b0      	ldr	r0, [r6, #8]
   169e0:	466a      	mov	r2, sp
   169e2:	2100      	movs	r1, #0
   169e4:	f004 fdfd 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   169e8:	4604      	mov	r4, r0
   169ea:	2800      	cmp	r0, #0
   169ec:	d183      	bne.n	168f6 <cosem_setAutoAnswer+0x18>
        object->numberOfRingsInListeningWindow = (unsigned char)var_toInteger(tmp);
   169ee:	9800      	ldr	r0, [sp, #0]
   169f0:	f004 ff71 	bl	1b8d6 <var_toInteger>
   169f4:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   169f6:	68b0      	ldr	r0, [r6, #8]
   169f8:	466a      	mov	r2, sp
   169fa:	2101      	movs	r1, #1
   169fc:	f004 fdf1 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16a00:	4604      	mov	r4, r0
   16a02:	2800      	cmp	r0, #0
   16a04:	f47f af77 	bne.w	168f6 <cosem_setAutoAnswer+0x18>
        object->numberOfRingsOutListeningWindow = (unsigned char)var_toInteger(tmp);
   16a08:	9800      	ldr	r0, [sp, #0]
   16a0a:	f004 ff64 	bl	1b8d6 <var_toInteger>
   16a0e:	7468      	strb	r0, [r5, #17]
   16a10:	e771      	b.n	168f6 <cosem_setAutoAnswer+0x18>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16a12:	f44f 7481 	mov.w	r4, #258	; 0x102
   16a16:	e76e      	b.n	168f6 <cosem_setAutoAnswer+0x18>

00016a18 <cosem_setAutoConnect>:
{
   16a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   16a1c:	2902      	cmp	r1, #2
{
   16a1e:	b08b      	sub	sp, #44	; 0x2c
   16a20:	4605      	mov	r5, r0
   16a22:	4616      	mov	r6, r2
    if (index == 2)
   16a24:	d108      	bne.n	16a38 <cosem_setAutoConnect+0x20>
        object->mode = (DLMS_AUTO_CONNECT_MODE)var_toInteger(value);
   16a26:	4610      	mov	r0, r2
   16a28:	f004 ff55 	bl	1b8d6 <var_toInteger>
   16a2c:	7428      	strb	r0, [r5, #16]
    int ret = 0, pos;
   16a2e:	2400      	movs	r4, #0
}
   16a30:	4620      	mov	r0, r4
   16a32:	b00b      	add	sp, #44	; 0x2c
   16a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   16a38:	2903      	cmp	r1, #3
   16a3a:	d105      	bne.n	16a48 <cosem_setAutoConnect+0x30>
        object->repetitions = (unsigned char)var_toInteger(value);
   16a3c:	4610      	mov	r0, r2
   16a3e:	f004 ff4a 	bl	1b8d6 <var_toInteger>
   16a42:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   16a46:	e7f2      	b.n	16a2e <cosem_setAutoConnect+0x16>
    else if (index == 4)
   16a48:	2904      	cmp	r1, #4
   16a4a:	d104      	bne.n	16a56 <cosem_setAutoConnect+0x3e>
        object->repetitionDelay = (uint16_t)var_toInteger(value);
   16a4c:	4610      	mov	r0, r2
   16a4e:	f004 ff42 	bl	1b8d6 <var_toInteger>
   16a52:	85a8      	strh	r0, [r5, #44]	; 0x2c
   16a54:	e7eb      	b.n	16a2e <cosem_setAutoConnect+0x16>
    else if (index == 5)
   16a56:	2905      	cmp	r1, #5
   16a58:	d15a      	bne.n	16b10 <cosem_setAutoConnect+0xf8>
        arr_clearKeyValuePair(&object->callingWindow);
   16a5a:	3514      	adds	r5, #20
   16a5c:	4628      	mov	r0, r5
   16a5e:	f7fa fb65 	bl	1112c <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   16a62:	68b3      	ldr	r3, [r6, #8]
   16a64:	2b00      	cmp	r3, #0
   16a66:	d0e2      	beq.n	16a2e <cosem_setAutoConnect+0x16>
            if ((ret = arr_capacity(&object->callingWindow, value->Arr->size)) == 0)
   16a68:	88d9      	ldrh	r1, [r3, #6]
   16a6a:	4628      	mov	r0, r5
   16a6c:	f7fa faea 	bl	11044 <arr_capacity>
   16a70:	4604      	mov	r4, r0
   16a72:	2800      	cmp	r0, #0
   16a74:	d1dc      	bne.n	16a30 <cosem_setAutoConnect+0x18>
                for (pos = 0; pos != value->Arr->size; ++pos)
   16a76:	68b0      	ldr	r0, [r6, #8]
   16a78:	88c3      	ldrh	r3, [r0, #6]
   16a7a:	42a3      	cmp	r3, r4
   16a7c:	d0d7      	beq.n	16a2e <cosem_setAutoConnect+0x16>
                    ret = va_getByIndex(value->Arr, pos, &tmp);
   16a7e:	466a      	mov	r2, sp
   16a80:	4621      	mov	r1, r4
   16a82:	f004 fdae 	bl	1b5e2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   16a86:	2800      	cmp	r0, #0
   16a88:	d140      	bne.n	16b0c <cosem_setAutoConnect+0xf4>
                    ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16a8a:	9b00      	ldr	r3, [sp, #0]
   16a8c:	4601      	mov	r1, r0
   16a8e:	aa01      	add	r2, sp, #4
   16a90:	6898      	ldr	r0, [r3, #8]
   16a92:	f004 fda6 	bl	1b5e2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   16a96:	2800      	cmp	r0, #0
   16a98:	d138      	bne.n	16b0c <cosem_setAutoConnect+0xf4>
                    var_init(&start);
   16a9a:	a802      	add	r0, sp, #8
   16a9c:	f004 fbc7 	bl	1b22e <var_init>
                    var_init(&end);
   16aa0:	a806      	add	r0, sp, #24
   16aa2:	f004 fbc4 	bl	1b22e <var_init>
                    ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start);
   16aa6:	9801      	ldr	r0, [sp, #4]
   16aa8:	aa02      	add	r2, sp, #8
   16aaa:	2119      	movs	r1, #25
   16aac:	f7f9 ffca 	bl	10a44 <dlms_changeType2>
                    if (ret != DLMS_ERROR_CODE_OK)
   16ab0:	bb60      	cbnz	r0, 16b0c <cosem_setAutoConnect+0xf4>
                    ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16ab2:	9b00      	ldr	r3, [sp, #0]
   16ab4:	aa01      	add	r2, sp, #4
   16ab6:	6898      	ldr	r0, [r3, #8]
   16ab8:	2101      	movs	r1, #1
   16aba:	f004 fd92 	bl	1b5e2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   16abe:	bb28      	cbnz	r0, 16b0c <cosem_setAutoConnect+0xf4>
                    ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end);
   16ac0:	9801      	ldr	r0, [sp, #4]
   16ac2:	aa06      	add	r2, sp, #24
   16ac4:	2119      	movs	r1, #25
   16ac6:	f7f9 ffbd 	bl	10a44 <dlms_changeType2>
                    if (ret != DLMS_ERROR_CODE_OK)
   16aca:	b9f8      	cbnz	r0, 16b0c <cosem_setAutoConnect+0xf4>
                    s = (gxtime*)gxmalloc(sizeof(gxtime));
   16acc:	200c      	movs	r0, #12
   16ace:	f7f5 fec9 	bl	c864 <malloc>
   16ad2:	4680      	mov	r8, r0
                    e = (gxtime*)gxmalloc(sizeof(gxtime));
   16ad4:	200c      	movs	r0, #12
   16ad6:	f7f5 fec5 	bl	c864 <malloc>
                    arr_push(&object->callingWindow, key_init(s, e));
   16ada:	4601      	mov	r1, r0
                    e = (gxtime*)gxmalloc(sizeof(gxtime));
   16adc:	4607      	mov	r7, r0
                    arr_push(&object->callingWindow, key_init(s, e));
   16ade:	4640      	mov	r0, r8
   16ae0:	f7fd fddf 	bl	146a2 <key_init>
   16ae4:	4601      	mov	r1, r0
   16ae6:	4628      	mov	r0, r5
   16ae8:	f7fa fad2 	bl	11090 <arr_push>
                    time_copy(s, start.dateTime);
   16aec:	9904      	ldr	r1, [sp, #16]
   16aee:	4640      	mov	r0, r8
   16af0:	f7f7 fff5 	bl	eade <time_copy>
                    time_copy(e, end.dateTime);
   16af4:	9908      	ldr	r1, [sp, #32]
   16af6:	4638      	mov	r0, r7
   16af8:	f7f7 fff1 	bl	eade <time_copy>
                    var_clear(&start);
   16afc:	a802      	add	r0, sp, #8
   16afe:	f004 fcf2 	bl	1b4e6 <var_clear>
                    var_clear(&end);
   16b02:	a806      	add	r0, sp, #24
   16b04:	f004 fcef 	bl	1b4e6 <var_clear>
                for (pos = 0; pos != value->Arr->size; ++pos)
   16b08:	3401      	adds	r4, #1
   16b0a:	e7b4      	b.n	16a76 <cosem_setAutoConnect+0x5e>
                        return ret;
   16b0c:	4604      	mov	r4, r0
   16b0e:	e78f      	b.n	16a30 <cosem_setAutoConnect+0x18>
    else if (index == 6)
   16b10:	2906      	cmp	r1, #6
   16b12:	d12c      	bne.n	16b6e <cosem_setAutoConnect+0x156>
        arr_clearStrings(&object->destinations);
   16b14:	3520      	adds	r5, #32
   16b16:	4628      	mov	r0, r5
   16b18:	f7fa fb26 	bl	11168 <arr_clearStrings>
        if (value->Arr != NULL)
   16b1c:	68b3      	ldr	r3, [r6, #8]
   16b1e:	2b00      	cmp	r3, #0
   16b20:	d085      	beq.n	16a2e <cosem_setAutoConnect+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16b22:	2700      	movs	r7, #0
   16b24:	e01e      	b.n	16b64 <cosem_setAutoConnect+0x14c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16b26:	aa06      	add	r2, sp, #24
   16b28:	4639      	mov	r1, r7
   16b2a:	f004 fd5a 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16b2e:	4604      	mov	r4, r0
   16b30:	2800      	cmp	r0, #0
   16b32:	f47f af7d 	bne.w	16a30 <cosem_setAutoConnect+0x18>
                str = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   16b36:	200c      	movs	r0, #12
   16b38:	f7f5 fe94 	bl	c864 <malloc>
   16b3c:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(str);
   16b3e:	f7f6 feb5 	bl	d8ac <bb_init>
                bb_set2(str, tmp->byteArr, 0, bb_size(tmp->byteArr));
   16b42:	9b06      	ldr	r3, [sp, #24]
   16b44:	f8d3 9008 	ldr.w	r9, [r3, #8]
   16b48:	4648      	mov	r0, r9
   16b4a:	f7f6 feac 	bl	d8a6 <bb_size>
   16b4e:	4622      	mov	r2, r4
   16b50:	4603      	mov	r3, r0
   16b52:	4649      	mov	r1, r9
   16b54:	4640      	mov	r0, r8
   16b56:	f7f7 f827 	bl	dba8 <bb_set2>
                arr_push(&object->destinations, str);
   16b5a:	4641      	mov	r1, r8
   16b5c:	4628      	mov	r0, r5
   16b5e:	f7fa fa97 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16b62:	3701      	adds	r7, #1
   16b64:	68b0      	ldr	r0, [r6, #8]
   16b66:	88c3      	ldrh	r3, [r0, #6]
   16b68:	42bb      	cmp	r3, r7
   16b6a:	d1dc      	bne.n	16b26 <cosem_setAutoConnect+0x10e>
   16b6c:	e75f      	b.n	16a2e <cosem_setAutoConnect+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16b6e:	f44f 7481 	mov.w	r4, #258	; 0x102
   16b72:	e75d      	b.n	16a30 <cosem_setAutoConnect+0x18>

00016b74 <cosem_setDemandRegister>:
    if (index == 2)
   16b74:	2902      	cmp	r1, #2
{
   16b76:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16b78:	4605      	mov	r5, r0
   16b7a:	4616      	mov	r6, r2
    if (index == 2)
   16b7c:	d107      	bne.n	16b8e <cosem_setDemandRegister+0x1a>
        ret = var_copy(&object->currentAverageValue, value);
   16b7e:	4611      	mov	r1, r2
   16b80:	3010      	adds	r0, #16
        ret = var_copy(&object->lastAverageValue, value);
   16b82:	f7ed fd0f 	bl	45a4 <var_copy>
   16b86:	4604      	mov	r4, r0
}
   16b88:	4620      	mov	r0, r4
   16b8a:	b004      	add	sp, #16
   16b8c:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   16b8e:	2903      	cmp	r1, #3
   16b90:	d102      	bne.n	16b98 <cosem_setDemandRegister+0x24>
        ret = var_copy(&object->lastAverageValue, value);
   16b92:	4611      	mov	r1, r2
   16b94:	3020      	adds	r0, #32
   16b96:	e7f4      	b.n	16b82 <cosem_setDemandRegister+0xe>
    else if (index == 4)
   16b98:	2904      	cmp	r1, #4
   16b9a:	d120      	bne.n	16bde <cosem_setDemandRegister+0x6a>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   16b9c:	7813      	ldrb	r3, [r2, #0]
   16b9e:	2b02      	cmp	r3, #2
   16ba0:	d171      	bne.n	16c86 <cosem_setDemandRegister+0x112>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16ba2:	68b0      	ldr	r0, [r6, #8]
   16ba4:	466a      	mov	r2, sp
   16ba6:	2100      	movs	r1, #0
   16ba8:	f004 fd1b 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16bac:	4604      	mov	r4, r0
   16bae:	2800      	cmp	r0, #0
   16bb0:	d1ea      	bne.n	16b88 <cosem_setDemandRegister+0x14>
        object->scaler = (char)var_toInteger(tmp);
   16bb2:	9800      	ldr	r0, [sp, #0]
   16bb4:	f004 fe8f 	bl	1b8d6 <var_toInteger>
   16bb8:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16bbc:	68b0      	ldr	r0, [r6, #8]
   16bbe:	466a      	mov	r2, sp
   16bc0:	2101      	movs	r1, #1
   16bc2:	f004 fd0e 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16bc6:	4604      	mov	r4, r0
   16bc8:	2800      	cmp	r0, #0
   16bca:	d1dd      	bne.n	16b88 <cosem_setDemandRegister+0x14>
        object->unit = (unsigned char)var_toInteger(tmp);
   16bcc:	9800      	ldr	r0, [sp, #0]
   16bce:	f004 fe82 	bl	1b8d6 <var_toInteger>
        object->unitRead = 1;
   16bd2:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   16bd4:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
        object->unitRead = 1;
   16bd8:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   16bdc:	e7d4      	b.n	16b88 <cosem_setDemandRegister+0x14>
    else if (index == 5)
   16bde:	2905      	cmp	r1, #5
   16be0:	d102      	bne.n	16be8 <cosem_setDemandRegister+0x74>
        ret = var_copy(&object->status, value);
   16be2:	4611      	mov	r1, r2
   16be4:	3038      	adds	r0, #56	; 0x38
   16be6:	e7cc      	b.n	16b82 <cosem_setDemandRegister+0xe>
    else if (index == 6)
   16be8:	2906      	cmp	r1, #6
   16bea:	d121      	bne.n	16c30 <cosem_setDemandRegister+0xbc>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   16bec:	7813      	ldrb	r3, [r2, #0]
   16bee:	2b09      	cmp	r3, #9
   16bf0:	d118      	bne.n	16c24 <cosem_setDemandRegister+0xb0>
   16bf2:	6893      	ldr	r3, [r2, #8]
   16bf4:	b1b3      	cbz	r3, 16c24 <cosem_setDemandRegister+0xb0>
            ret = var_init(&tmp2);
   16bf6:	4668      	mov	r0, sp
   16bf8:	f004 fb19 	bl	1b22e <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   16bfc:	4604      	mov	r4, r0
   16bfe:	2800      	cmp	r0, #0
   16c00:	d1c2      	bne.n	16b88 <cosem_setDemandRegister+0x14>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   16c02:	466a      	mov	r2, sp
   16c04:	2119      	movs	r1, #25
   16c06:	4630      	mov	r0, r6
   16c08:	f7f9 ff1c 	bl	10a44 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   16c0c:	4604      	mov	r4, r0
   16c0e:	2800      	cmp	r0, #0
   16c10:	d1ba      	bne.n	16b88 <cosem_setDemandRegister+0x14>
            time_copy(&object->captureTime, tmp2.dateTime);
   16c12:	9902      	ldr	r1, [sp, #8]
   16c14:	f105 0048 	add.w	r0, r5, #72	; 0x48
            time_copy(&object->startTimeCurrent, tmp2.dateTime);
   16c18:	f7f7 ff61 	bl	eade <time_copy>
            var_clear(&tmp2);
   16c1c:	4668      	mov	r0, sp
   16c1e:	f004 fc62 	bl	1b4e6 <var_clear>
   16c22:	e7b1      	b.n	16b88 <cosem_setDemandRegister+0x14>
            time_clear(&object->captureTime);
   16c24:	f105 0048 	add.w	r0, r5, #72	; 0x48
            time_clear(&object->startTimeCurrent);
   16c28:	f7f7 ff28 	bl	ea7c <time_clear>
    int ret = DLMS_ERROR_CODE_OK;
   16c2c:	2400      	movs	r4, #0
   16c2e:	e7ab      	b.n	16b88 <cosem_setDemandRegister+0x14>
    else if (index == 7)
   16c30:	2907      	cmp	r1, #7
   16c32:	d119      	bne.n	16c68 <cosem_setDemandRegister+0xf4>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   16c34:	7813      	ldrb	r3, [r2, #0]
   16c36:	2b09      	cmp	r3, #9
   16c38:	d113      	bne.n	16c62 <cosem_setDemandRegister+0xee>
   16c3a:	6893      	ldr	r3, [r2, #8]
   16c3c:	b18b      	cbz	r3, 16c62 <cosem_setDemandRegister+0xee>
            ret = var_init(&tmp2);
   16c3e:	4668      	mov	r0, sp
   16c40:	f004 faf5 	bl	1b22e <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   16c44:	4604      	mov	r4, r0
   16c46:	2800      	cmp	r0, #0
   16c48:	d19e      	bne.n	16b88 <cosem_setDemandRegister+0x14>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   16c4a:	466a      	mov	r2, sp
   16c4c:	2119      	movs	r1, #25
   16c4e:	4630      	mov	r0, r6
   16c50:	f7f9 fef8 	bl	10a44 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   16c54:	4604      	mov	r4, r0
   16c56:	2800      	cmp	r0, #0
   16c58:	d196      	bne.n	16b88 <cosem_setDemandRegister+0x14>
            time_copy(&object->startTimeCurrent, tmp2.dateTime);
   16c5a:	9902      	ldr	r1, [sp, #8]
   16c5c:	f105 0054 	add.w	r0, r5, #84	; 0x54
   16c60:	e7da      	b.n	16c18 <cosem_setDemandRegister+0xa4>
            time_clear(&object->startTimeCurrent);
   16c62:	f105 0054 	add.w	r0, r5, #84	; 0x54
   16c66:	e7df      	b.n	16c28 <cosem_setDemandRegister+0xb4>
    else if (index == 8)
   16c68:	2908      	cmp	r1, #8
   16c6a:	d104      	bne.n	16c76 <cosem_setDemandRegister+0x102>
        object->period = var_toInteger(value);
   16c6c:	4610      	mov	r0, r2
   16c6e:	f004 fe32 	bl	1b8d6 <var_toInteger>
   16c72:	6668      	str	r0, [r5, #100]	; 0x64
   16c74:	e7da      	b.n	16c2c <cosem_setDemandRegister+0xb8>
    else if (index == 9)
   16c76:	2909      	cmp	r1, #9
   16c78:	d105      	bne.n	16c86 <cosem_setDemandRegister+0x112>
        object->numberOfPeriods = (uint16_t)var_toInteger(value);
   16c7a:	4610      	mov	r0, r2
   16c7c:	f004 fe2b 	bl	1b8d6 <var_toInteger>
   16c80:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
   16c84:	e7d2      	b.n	16c2c <cosem_setDemandRegister+0xb8>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   16c86:	f44f 7481 	mov.w	r4, #258	; 0x102
   16c8a:	e77d      	b.n	16b88 <cosem_setDemandRegister+0x14>

00016c8c <cosem_setMacAddressSetup>:
    if (index == 2)
   16c8c:	2902      	cmp	r1, #2
{
   16c8e:	b570      	push	{r4, r5, r6, lr}
   16c90:	4615      	mov	r5, r2
    if (index == 2)
   16c92:	d110      	bne.n	16cb6 <cosem_setMacAddressSetup+0x2a>
        bb_clear(&object->macAddress);
   16c94:	f100 0410 	add.w	r4, r0, #16
   16c98:	4620      	mov	r0, r4
   16c9a:	f7f6 ffca 	bl	dc32 <bb_clear>
        ret = bb_set2(&object->macAddress, value->byteArr, 0, bb_size(value->byteArr));
   16c9e:	68ad      	ldr	r5, [r5, #8]
   16ca0:	4628      	mov	r0, r5
   16ca2:	f7f6 fe00 	bl	d8a6 <bb_size>
   16ca6:	4629      	mov	r1, r5
   16ca8:	4603      	mov	r3, r0
   16caa:	2200      	movs	r2, #0
   16cac:	4620      	mov	r0, r4
}
   16cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->macAddress, value->byteArr, 0, bb_size(value->byteArr));
   16cb2:	f7f6 bf79 	b.w	dba8 <bb_set2>
}
   16cb6:	f44f 7081 	mov.w	r0, #258	; 0x102
   16cba:	bd70      	pop	{r4, r5, r6, pc}

00016cbc <cosem_setExtendedRegister>:
    if (index == 2)
   16cbc:	2902      	cmp	r1, #2
{
   16cbe:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16cc0:	4606      	mov	r6, r0
   16cc2:	4615      	mov	r5, r2
    if (index == 2)
   16cc4:	d105      	bne.n	16cd2 <cosem_setExtendedRegister+0x16>
        ret = var_copy(&object->value, value);
   16cc6:	4611      	mov	r1, r2
   16cc8:	3010      	adds	r0, #16
        ret = var_copy(&object->status, value);
   16cca:	f7ed fc6b 	bl	45a4 <var_copy>
   16cce:	4604      	mov	r4, r0
   16cd0:	e01c      	b.n	16d0c <cosem_setExtendedRegister+0x50>
    else if (index == 3)
   16cd2:	2903      	cmp	r1, #3
   16cd4:	d11d      	bne.n	16d12 <cosem_setExtendedRegister+0x56>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   16cd6:	7813      	ldrb	r3, [r2, #0]
   16cd8:	2b02      	cmp	r3, #2
   16cda:	d141      	bne.n	16d60 <cosem_setExtendedRegister+0xa4>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16cdc:	68a8      	ldr	r0, [r5, #8]
   16cde:	466a      	mov	r2, sp
   16ce0:	2100      	movs	r1, #0
   16ce2:	f004 fc7e 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16ce6:	4604      	mov	r4, r0
   16ce8:	b980      	cbnz	r0, 16d0c <cosem_setExtendedRegister+0x50>
        object->scaler = (char)var_toInteger(tmp);
   16cea:	9800      	ldr	r0, [sp, #0]
   16cec:	f004 fdf3 	bl	1b8d6 <var_toInteger>
   16cf0:	f886 0020 	strb.w	r0, [r6, #32]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16cf4:	68a8      	ldr	r0, [r5, #8]
   16cf6:	466a      	mov	r2, sp
   16cf8:	2101      	movs	r1, #1
   16cfa:	f004 fc72 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16cfe:	4604      	mov	r4, r0
   16d00:	b920      	cbnz	r0, 16d0c <cosem_setExtendedRegister+0x50>
        object->unit = (unsigned char)var_toInteger(tmp);
   16d02:	9800      	ldr	r0, [sp, #0]
   16d04:	f004 fde7 	bl	1b8d6 <var_toInteger>
   16d08:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
}
   16d0c:	4620      	mov	r0, r4
   16d0e:	b004      	add	sp, #16
   16d10:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 4)
   16d12:	2904      	cmp	r1, #4
   16d14:	d102      	bne.n	16d1c <cosem_setExtendedRegister+0x60>
        ret = var_copy(&object->status, value);
   16d16:	4611      	mov	r1, r2
   16d18:	3030      	adds	r0, #48	; 0x30
   16d1a:	e7d6      	b.n	16cca <cosem_setExtendedRegister+0xe>
    else if (index == 5)
   16d1c:	2905      	cmp	r1, #5
   16d1e:	d11f      	bne.n	16d60 <cosem_setExtendedRegister+0xa4>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   16d20:	7813      	ldrb	r3, [r2, #0]
   16d22:	2b09      	cmp	r3, #9
   16d24:	d116      	bne.n	16d54 <cosem_setExtendedRegister+0x98>
            ret = var_init(&tmp2);
   16d26:	4668      	mov	r0, sp
   16d28:	f004 fa81 	bl	1b22e <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   16d2c:	4604      	mov	r4, r0
   16d2e:	2800      	cmp	r0, #0
   16d30:	d1ec      	bne.n	16d0c <cosem_setExtendedRegister+0x50>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   16d32:	466a      	mov	r2, sp
   16d34:	2119      	movs	r1, #25
   16d36:	4628      	mov	r0, r5
   16d38:	f7f9 fe84 	bl	10a44 <dlms_changeType2>
            if (ret == 0)
   16d3c:	4604      	mov	r4, r0
   16d3e:	2800      	cmp	r0, #0
   16d40:	d1e4      	bne.n	16d0c <cosem_setExtendedRegister+0x50>
                time_copy(&object->captureTime, tmp2.dateTime);
   16d42:	f106 0024 	add.w	r0, r6, #36	; 0x24
   16d46:	9902      	ldr	r1, [sp, #8]
   16d48:	f7f7 fec9 	bl	eade <time_copy>
                var_clear(&tmp2);
   16d4c:	4668      	mov	r0, sp
   16d4e:	f004 fbca 	bl	1b4e6 <var_clear>
   16d52:	e7db      	b.n	16d0c <cosem_setExtendedRegister+0x50>
            time_copy(&object->captureTime, value->dateTime);
   16d54:	6891      	ldr	r1, [r2, #8]
   16d56:	3024      	adds	r0, #36	; 0x24
   16d58:	f7f7 fec1 	bl	eade <time_copy>
    int ret = DLMS_ERROR_CODE_OK;
   16d5c:	2400      	movs	r4, #0
   16d5e:	e7d5      	b.n	16d0c <cosem_setExtendedRegister+0x50>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   16d60:	f44f 7481 	mov.w	r4, #258	; 0x102
   16d64:	e7d2      	b.n	16d0c <cosem_setExtendedRegister+0x50>

00016d66 <cosem_setGprsSetup>:
    if (index == 2)
   16d66:	2902      	cmp	r1, #2
{
   16d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16d6a:	4605      	mov	r5, r0
   16d6c:	460f      	mov	r7, r1
   16d6e:	4616      	mov	r6, r2
    if (index == 2)
   16d70:	d11b      	bne.n	16daa <cosem_setGprsSetup+0x44>
        bb_clear(&object->apn);
   16d72:	3510      	adds	r5, #16
   16d74:	4628      	mov	r0, r5
   16d76:	f7f6 ff5c 	bl	dc32 <bb_clear>
        if (value->vt == DLMS_DATA_TYPE_STRING)
   16d7a:	7833      	ldrb	r3, [r6, #0]
   16d7c:	2b0a      	cmp	r3, #10
   16d7e:	d109      	bne.n	16d94 <cosem_setGprsSetup+0x2e>
            bb_set(&object->apn, (unsigned char*)value->strVal->data, value->strVal->size);
   16d80:	68b3      	ldr	r3, [r6, #8]
   16d82:	4628      	mov	r0, r5
   16d84:	88da      	ldrh	r2, [r3, #6]
   16d86:	6819      	ldr	r1, [r3, #0]
   16d88:	f7f6 fedf 	bl	db4a <bb_set>
    return DLMS_ERROR_CODE_OK;
   16d8c:	2400      	movs	r4, #0
}
   16d8e:	4620      	mov	r0, r4
   16d90:	b003      	add	sp, #12
   16d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bb_set2(&object->apn, value->byteArr, 0, bb_size(value->byteArr));
   16d94:	68b4      	ldr	r4, [r6, #8]
   16d96:	4620      	mov	r0, r4
   16d98:	f7f6 fd85 	bl	d8a6 <bb_size>
   16d9c:	2200      	movs	r2, #0
   16d9e:	4603      	mov	r3, r0
   16da0:	4621      	mov	r1, r4
   16da2:	4628      	mov	r0, r5
   16da4:	f7f6 ff00 	bl	dba8 <bb_set2>
   16da8:	e7f0      	b.n	16d8c <cosem_setGprsSetup+0x26>
    else if (index == 3)
   16daa:	2903      	cmp	r1, #3
   16dac:	d102      	bne.n	16db4 <cosem_setGprsSetup+0x4e>
        object->pinCode = value->uiVal;
   16dae:	8913      	ldrh	r3, [r2, #8]
   16db0:	8383      	strh	r3, [r0, #28]
   16db2:	e7eb      	b.n	16d8c <cosem_setGprsSetup+0x26>
    else if (index == 4)
   16db4:	2904      	cmp	r1, #4
   16db6:	f040 809f 	bne.w	16ef8 <cosem_setGprsSetup+0x192>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16dba:	68b0      	ldr	r0, [r6, #8]
   16dbc:	466a      	mov	r2, sp
   16dbe:	2100      	movs	r1, #0
   16dc0:	f004 fc0f 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16dc4:	4604      	mov	r4, r0
   16dc6:	2800      	cmp	r0, #0
   16dc8:	d1e1      	bne.n	16d8e <cosem_setGprsSetup+0x28>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16dca:	9b00      	ldr	r3, [sp, #0]
   16dcc:	4601      	mov	r1, r0
   16dce:	aa01      	add	r2, sp, #4
   16dd0:	6898      	ldr	r0, [r3, #8]
   16dd2:	f004 fc06 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16dd6:	4604      	mov	r4, r0
   16dd8:	2800      	cmp	r0, #0
   16dda:	d1d8      	bne.n	16d8e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   16ddc:	9801      	ldr	r0, [sp, #4]
   16dde:	f004 fd7a 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16de2:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   16de4:	77a8      	strb	r0, [r5, #30]
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16de6:	6898      	ldr	r0, [r3, #8]
   16de8:	aa01      	add	r2, sp, #4
   16dea:	2101      	movs	r1, #1
   16dec:	f004 fbf9 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16df0:	4604      	mov	r4, r0
   16df2:	2800      	cmp	r0, #0
   16df4:	d1cb      	bne.n	16d8e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   16df6:	9801      	ldr	r0, [sp, #4]
   16df8:	f004 fd6d 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   16dfc:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   16dfe:	77e8      	strb	r0, [r5, #31]
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   16e00:	6898      	ldr	r0, [r3, #8]
   16e02:	aa01      	add	r2, sp, #4
   16e04:	2102      	movs	r1, #2
   16e06:	f004 fbec 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16e0a:	4604      	mov	r4, r0
   16e0c:	2800      	cmp	r0, #0
   16e0e:	d1be      	bne.n	16d8e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   16e10:	9801      	ldr	r0, [sp, #4]
   16e12:	f004 fd60 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   16e16:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   16e18:	f885 0020 	strb.w	r0, [r5, #32]
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   16e1c:	6898      	ldr	r0, [r3, #8]
   16e1e:	aa01      	add	r2, sp, #4
   16e20:	2103      	movs	r1, #3
   16e22:	f004 fbde 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16e26:	4604      	mov	r4, r0
   16e28:	2800      	cmp	r0, #0
   16e2a:	d1b0      	bne.n	16d8e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   16e2c:	9801      	ldr	r0, [sp, #4]
   16e2e:	f004 fd52 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   16e32:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   16e34:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   16e38:	6898      	ldr	r0, [r3, #8]
   16e3a:	aa01      	add	r2, sp, #4
   16e3c:	4639      	mov	r1, r7
   16e3e:	f004 fbd0 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16e42:	4604      	mov	r4, r0
   16e44:	2800      	cmp	r0, #0
   16e46:	d1a2      	bne.n	16d8e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.meanThroughput = (unsigned char)var_toInteger(tmp3);
   16e48:	9801      	ldr	r0, [sp, #4]
   16e4a:	f004 fd44 	bl	1b8d6 <var_toInteger>
   16e4e:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16e52:	68b0      	ldr	r0, [r6, #8]
   16e54:	466a      	mov	r2, sp
   16e56:	2101      	movs	r1, #1
   16e58:	f004 fbc3 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16e5c:	4604      	mov	r4, r0
   16e5e:	2800      	cmp	r0, #0
   16e60:	d195      	bne.n	16d8e <cosem_setGprsSetup+0x28>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   16e62:	9b00      	ldr	r3, [sp, #0]
   16e64:	aa01      	add	r2, sp, #4
   16e66:	6898      	ldr	r0, [r3, #8]
   16e68:	2100      	movs	r1, #0
   16e6a:	f004 fbba 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16e6e:	4604      	mov	r4, r0
   16e70:	2800      	cmp	r0, #0
   16e72:	d18c      	bne.n	16d8e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   16e74:	9801      	ldr	r0, [sp, #4]
   16e76:	f004 fd2e 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16e7a:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   16e7c:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   16e80:	6898      	ldr	r0, [r3, #8]
   16e82:	aa01      	add	r2, sp, #4
   16e84:	2101      	movs	r1, #1
   16e86:	f004 fbac 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16e8a:	4604      	mov	r4, r0
   16e8c:	2800      	cmp	r0, #0
   16e8e:	f47f af7e 	bne.w	16d8e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   16e92:	9801      	ldr	r0, [sp, #4]
   16e94:	f004 fd1f 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   16e98:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   16e9a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   16e9e:	6898      	ldr	r0, [r3, #8]
   16ea0:	aa01      	add	r2, sp, #4
   16ea2:	2102      	movs	r1, #2
   16ea4:	f004 fb9d 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16ea8:	4604      	mov	r4, r0
   16eaa:	2800      	cmp	r0, #0
   16eac:	f47f af6f 	bne.w	16d8e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   16eb0:	9801      	ldr	r0, [sp, #4]
   16eb2:	f004 fd10 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   16eb6:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   16eb8:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   16ebc:	6898      	ldr	r0, [r3, #8]
   16ebe:	aa01      	add	r2, sp, #4
   16ec0:	2103      	movs	r1, #3
   16ec2:	f004 fb8e 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16ec6:	4604      	mov	r4, r0
   16ec8:	2800      	cmp	r0, #0
   16eca:	f47f af60 	bne.w	16d8e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   16ece:	9801      	ldr	r0, [sp, #4]
   16ed0:	f004 fd01 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   16ed4:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   16ed6:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   16eda:	6898      	ldr	r0, [r3, #8]
   16edc:	aa01      	add	r2, sp, #4
   16ede:	2104      	movs	r1, #4
   16ee0:	f004 fb7f 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16ee4:	4604      	mov	r4, r0
   16ee6:	2800      	cmp	r0, #0
   16ee8:	f47f af51 	bne.w	16d8e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.meanThroughput = (unsigned char)var_toInteger(tmp3);
   16eec:	9801      	ldr	r0, [sp, #4]
   16eee:	f004 fcf2 	bl	1b8d6 <var_toInteger>
   16ef2:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
   16ef6:	e74a      	b.n	16d8e <cosem_setGprsSetup+0x28>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   16ef8:	f44f 7481 	mov.w	r4, #258	; 0x102
   16efc:	e747      	b.n	16d8e <cosem_setGprsSetup+0x28>

00016efe <cosem_setSecuritySetup>:
{
   16efe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16f02:	3902      	subs	r1, #2
   16f04:	4606      	mov	r6, r0
   16f06:	4617      	mov	r7, r2
   16f08:	2904      	cmp	r1, #4
   16f0a:	f200 8124 	bhi.w	17156 <cosem_setSecuritySetup+0x258>
   16f0e:	e8df f001 	tbb	[pc, r1]
   16f12:	0c03      	.short	0x0c03
   16f14:	2911      	.short	0x2911
   16f16:	33          	.byte	0x33
   16f17:	00          	.byte	0x00
        object->securityPolicy = (DLMS_SECURITY_POLICY)var_toInteger(value);
   16f18:	4610      	mov	r0, r2
   16f1a:	f004 fcdc 	bl	1b8d6 <var_toInteger>
   16f1e:	7430      	strb	r0, [r6, #16]
    int pos, ret = 0;
   16f20:	2400      	movs	r4, #0
}
   16f22:	4620      	mov	r0, r4
   16f24:	b002      	add	sp, #8
   16f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        object->securitySuite = (DLMS_SECURITY_SUITE)var_toInteger(value);
   16f2a:	4610      	mov	r0, r2
   16f2c:	f004 fcd3 	bl	1b8d6 <var_toInteger>
   16f30:	7470      	strb	r0, [r6, #17]
   16f32:	e7f5      	b.n	16f20 <cosem_setSecuritySetup+0x22>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   16f34:	6890      	ldr	r0, [r2, #8]
   16f36:	b908      	cbnz	r0, 16f3c <cosem_setSecuritySetup+0x3e>
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
   16f38:	2409      	movs	r4, #9
   16f3a:	e7f2      	b.n	16f22 <cosem_setSecuritySetup+0x24>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   16f3c:	f7f6 fca9 	bl	d892 <bb_available>
   16f40:	2808      	cmp	r0, #8
   16f42:	4605      	mov	r5, r0
   16f44:	d1f8      	bne.n	16f38 <cosem_setSecuritySetup+0x3a>
            if ((ret = bb_clear(&object->clientSystemTitle)) != 0 ||
   16f46:	3620      	adds	r6, #32
            if ((ret = bb_clear(&object->serverSystemTitle)) != 0 ||
   16f48:	4630      	mov	r0, r6
   16f4a:	f7f6 fe72 	bl	dc32 <bb_clear>
   16f4e:	4604      	mov	r4, r0
   16f50:	2800      	cmp	r0, #0
   16f52:	d1e6      	bne.n	16f22 <cosem_setSecuritySetup+0x24>
                (ret = bb_set2(&object->serverSystemTitle, value->byteArr, value->byteArr->position, 8)) != 0)
   16f54:	68b9      	ldr	r1, [r7, #8]
   16f56:	462b      	mov	r3, r5
   16f58:	890a      	ldrh	r2, [r1, #8]
   16f5a:	4630      	mov	r0, r6
   16f5c:	f7f6 fe24 	bl	dba8 <bb_set2>
   16f60:	4604      	mov	r4, r0
   16f62:	e7de      	b.n	16f22 <cosem_setSecuritySetup+0x24>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   16f64:	6890      	ldr	r0, [r2, #8]
   16f66:	2800      	cmp	r0, #0
   16f68:	d0e6      	beq.n	16f38 <cosem_setSecuritySetup+0x3a>
   16f6a:	f7f6 fc92 	bl	d892 <bb_available>
   16f6e:	2808      	cmp	r0, #8
   16f70:	4605      	mov	r5, r0
   16f72:	d1e1      	bne.n	16f38 <cosem_setSecuritySetup+0x3a>
            if ((ret = bb_clear(&object->serverSystemTitle)) != 0 ||
   16f74:	3614      	adds	r6, #20
   16f76:	e7e7      	b.n	16f48 <cosem_setSecuritySetup+0x4a>
        obj_clearCertificateInfo(&object->certificates);
   16f78:	362c      	adds	r6, #44	; 0x2c
   16f7a:	4630      	mov	r0, r6
   16f7c:	f7fd fe0c 	bl	14b98 <obj_clearCertificateInfo>
        if (value->Arr != NULL)
   16f80:	68bb      	ldr	r3, [r7, #8]
   16f82:	2b00      	cmp	r3, #0
   16f84:	d0cc      	beq.n	16f20 <cosem_setSecuritySetup+0x22>
    gxCertificateInfo* it = NULL;
   16f86:	2500      	movs	r5, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   16f88:	46a9      	mov	r9, r5
   16f8a:	e064      	b.n	17056 <cosem_setSecuritySetup+0x158>
                    it->serialNumber = NULL;
   16f8c:	2300      	movs	r3, #0
   16f8e:	606b      	str	r3, [r5, #4]
   16f90:	e0b1      	b.n	170f6 <cosem_setSecuritySetup+0x1f8>
                    memcpy(it->issuer, tmp3->byteArr->data, tmp3->byteArr->size);
   16f92:	f8dd a004 	ldr.w	sl, [sp, #4]
   16f96:	f8da 3008 	ldr.w	r3, [sl, #8]
   16f9a:	88da      	ldrh	r2, [r3, #6]
   16f9c:	6819      	ldr	r1, [r3, #0]
   16f9e:	f006 fc77 	bl	1d890 <memcpy>
                    it->issuer[tmp3->byteArr->size] = 0;
   16fa2:	f8da 3008 	ldr.w	r3, [sl, #8]
   16fa6:	88db      	ldrh	r3, [r3, #6]
   16fa8:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 4, &tmp3)) != DLMS_ERROR_CODE_OK)
   16fac:	9b00      	ldr	r3, [sp, #0]
   16fae:	aa01      	add	r2, sp, #4
   16fb0:	6898      	ldr	r0, [r3, #8]
   16fb2:	2104      	movs	r1, #4
   16fb4:	f004 fb15 	bl	1b5e2 <va_getByIndex>
   16fb8:	4604      	mov	r4, r0
   16fba:	2800      	cmp	r0, #0
   16fbc:	f040 80b2 	bne.w	17124 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   16fc0:	9b01      	ldr	r3, [sp, #4]
   16fc2:	689b      	ldr	r3, [r3, #8]
   16fc4:	2b00      	cmp	r3, #0
   16fc6:	f000 80c0 	beq.w	1714a <cosem_setSecuritySetup+0x24c>
   16fca:	88d8      	ldrh	r0, [r3, #6]
   16fcc:	2800      	cmp	r0, #0
   16fce:	f000 80bc 	beq.w	1714a <cosem_setSecuritySetup+0x24c>
                    it->subject = gxmalloc(tmp3->byteArr->size + 1);
   16fd2:	3001      	adds	r0, #1
   16fd4:	f7f5 fc46 	bl	c864 <malloc>
   16fd8:	4680      	mov	r8, r0
   16fda:	60e8      	str	r0, [r5, #12]
                    if (it->subject == NULL)
   16fdc:	2800      	cmp	r0, #0
   16fde:	f000 809f 	beq.w	17120 <cosem_setSecuritySetup+0x222>
                    memcpy(it->subject, tmp3->byteArr->data, tmp3->byteArr->size);
   16fe2:	f8dd a004 	ldr.w	sl, [sp, #4]
   16fe6:	f8da 3008 	ldr.w	r3, [sl, #8]
   16fea:	88da      	ldrh	r2, [r3, #6]
   16fec:	6819      	ldr	r1, [r3, #0]
   16fee:	f006 fc4f 	bl	1d890 <memcpy>
                    it->subject[tmp3->byteArr->size] = 0;
   16ff2:	f8da 3008 	ldr.w	r3, [sl, #8]
   16ff6:	88db      	ldrh	r3, [r3, #6]
   16ff8:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 5, &tmp3)) != DLMS_ERROR_CODE_OK)
   16ffc:	9b00      	ldr	r3, [sp, #0]
   16ffe:	aa01      	add	r2, sp, #4
   17000:	6898      	ldr	r0, [r3, #8]
   17002:	2105      	movs	r1, #5
   17004:	f004 faed 	bl	1b5e2 <va_getByIndex>
   17008:	4604      	mov	r4, r0
   1700a:	2800      	cmp	r0, #0
   1700c:	f040 808a 	bne.w	17124 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   17010:	9b01      	ldr	r3, [sp, #4]
   17012:	689b      	ldr	r3, [r3, #8]
   17014:	2b00      	cmp	r3, #0
   17016:	f000 809b 	beq.w	17150 <cosem_setSecuritySetup+0x252>
   1701a:	88d8      	ldrh	r0, [r3, #6]
   1701c:	2800      	cmp	r0, #0
   1701e:	f000 8097 	beq.w	17150 <cosem_setSecuritySetup+0x252>
                    it->subjectAltName = gxmalloc(tmp3->byteArr->size + 1);
   17022:	3001      	adds	r0, #1
   17024:	f7f5 fc1e 	bl	c864 <malloc>
   17028:	4680      	mov	r8, r0
   1702a:	6128      	str	r0, [r5, #16]
                    if (it->subjectAltName == NULL)
   1702c:	2800      	cmp	r0, #0
   1702e:	d077      	beq.n	17120 <cosem_setSecuritySetup+0x222>
                    memcpy(it->subjectAltName, tmp3->byteArr->data, tmp3->byteArr->size);
   17030:	f8dd a004 	ldr.w	sl, [sp, #4]
   17034:	f8da 3008 	ldr.w	r3, [sl, #8]
   17038:	88da      	ldrh	r2, [r3, #6]
   1703a:	6819      	ldr	r1, [r3, #0]
   1703c:	f006 fc28 	bl	1d890 <memcpy>
                    it->subjectAltName[tmp3->byteArr->size] = 0;
   17040:	f8da 3008 	ldr.w	r3, [sl, #8]
   17044:	88db      	ldrh	r3, [r3, #6]
   17046:	f808 4003 	strb.w	r4, [r8, r3]
                arr_push(&object->certificates, it);
   1704a:	4629      	mov	r1, r5
   1704c:	4630      	mov	r0, r6
   1704e:	f7fa f81f 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17052:	f109 0901 	add.w	r9, r9, #1
   17056:	68b8      	ldr	r0, [r7, #8]
   17058:	88c3      	ldrh	r3, [r0, #6]
   1705a:	454b      	cmp	r3, r9
   1705c:	f43f af60 	beq.w	16f20 <cosem_setSecuritySetup+0x22>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   17060:	466a      	mov	r2, sp
   17062:	4649      	mov	r1, r9
   17064:	f004 fabd 	bl	1b5e2 <va_getByIndex>
   17068:	4604      	mov	r4, r0
   1706a:	2800      	cmp	r0, #0
   1706c:	d178      	bne.n	17160 <cosem_setSecuritySetup+0x262>
                it = (gxCertificateInfo*)gxmalloc(sizeof(gxCertificateInfo));
   1706e:	2014      	movs	r0, #20
   17070:	f7f5 fbf8 	bl	c864 <malloc>
                if (it == NULL)
   17074:	4605      	mov	r5, r0
   17076:	2800      	cmp	r0, #0
   17078:	d06f      	beq.n	1715a <cosem_setSecuritySetup+0x25c>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != DLMS_ERROR_CODE_OK)
   1707a:	9b00      	ldr	r3, [sp, #0]
   1707c:	4621      	mov	r1, r4
   1707e:	6898      	ldr	r0, [r3, #8]
   17080:	aa01      	add	r2, sp, #4
   17082:	f004 faae 	bl	1b5e2 <va_getByIndex>
   17086:	4604      	mov	r4, r0
   17088:	2800      	cmp	r0, #0
   1708a:	d14b      	bne.n	17124 <cosem_setSecuritySetup+0x226>
                it->entity = (DLMS_CERTIFICATE_ENTITY)var_toInteger(tmp3);
   1708c:	9801      	ldr	r0, [sp, #4]
   1708e:	f004 fc22 	bl	1b8d6 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != DLMS_ERROR_CODE_OK)
   17092:	9b00      	ldr	r3, [sp, #0]
                it->entity = (DLMS_CERTIFICATE_ENTITY)var_toInteger(tmp3);
   17094:	7028      	strb	r0, [r5, #0]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != DLMS_ERROR_CODE_OK)
   17096:	6898      	ldr	r0, [r3, #8]
   17098:	aa01      	add	r2, sp, #4
   1709a:	2101      	movs	r1, #1
   1709c:	f004 faa1 	bl	1b5e2 <va_getByIndex>
   170a0:	4604      	mov	r4, r0
   170a2:	2800      	cmp	r0, #0
   170a4:	d13e      	bne.n	17124 <cosem_setSecuritySetup+0x226>
                it->type = (DLMS_CERTIFICATE_TYPE)var_toInteger(tmp3);
   170a6:	9801      	ldr	r0, [sp, #4]
   170a8:	f004 fc15 	bl	1b8d6 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 2, &tmp3)) != DLMS_ERROR_CODE_OK)
   170ac:	9b00      	ldr	r3, [sp, #0]
                it->type = (DLMS_CERTIFICATE_TYPE)var_toInteger(tmp3);
   170ae:	7068      	strb	r0, [r5, #1]
                if ((ret = va_getByIndex(tmp->Arr, 2, &tmp3)) != DLMS_ERROR_CODE_OK)
   170b0:	6898      	ldr	r0, [r3, #8]
   170b2:	aa01      	add	r2, sp, #4
   170b4:	2102      	movs	r1, #2
   170b6:	f004 fa94 	bl	1b5e2 <va_getByIndex>
   170ba:	4604      	mov	r4, r0
   170bc:	2800      	cmp	r0, #0
   170be:	d131      	bne.n	17124 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   170c0:	9b01      	ldr	r3, [sp, #4]
   170c2:	689b      	ldr	r3, [r3, #8]
   170c4:	2b00      	cmp	r3, #0
   170c6:	f43f af61 	beq.w	16f8c <cosem_setSecuritySetup+0x8e>
   170ca:	88d8      	ldrh	r0, [r3, #6]
   170cc:	2800      	cmp	r0, #0
   170ce:	f43f af5d 	beq.w	16f8c <cosem_setSecuritySetup+0x8e>
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   170d2:	3001      	adds	r0, #1
   170d4:	f7f5 fbc6 	bl	c864 <malloc>
                    memcpy(it->serialNumber, tmp3->byteArr->data, tmp3->byteArr->size);
   170d8:	f8dd a004 	ldr.w	sl, [sp, #4]
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   170dc:	6068      	str	r0, [r5, #4]
                    memcpy(it->serialNumber, tmp3->byteArr->data, tmp3->byteArr->size);
   170de:	f8da 3008 	ldr.w	r3, [sl, #8]
   170e2:	88da      	ldrh	r2, [r3, #6]
   170e4:	6819      	ldr	r1, [r3, #0]
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   170e6:	4680      	mov	r8, r0
   170e8:	f006 fbd2 	bl	1d890 <memcpy>
                    it->serialNumber[tmp3->byteArr->size] = 0;
   170ec:	f8da 3008 	ldr.w	r3, [sl, #8]
   170f0:	88db      	ldrh	r3, [r3, #6]
   170f2:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 3, &tmp3)) != DLMS_ERROR_CODE_OK)
   170f6:	9b00      	ldr	r3, [sp, #0]
   170f8:	aa01      	add	r2, sp, #4
   170fa:	6898      	ldr	r0, [r3, #8]
   170fc:	2103      	movs	r1, #3
   170fe:	f004 fa70 	bl	1b5e2 <va_getByIndex>
   17102:	4604      	mov	r4, r0
   17104:	b970      	cbnz	r0, 17124 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   17106:	9b01      	ldr	r3, [sp, #4]
   17108:	689b      	ldr	r3, [r3, #8]
   1710a:	b1db      	cbz	r3, 17144 <cosem_setSecuritySetup+0x246>
   1710c:	88d8      	ldrh	r0, [r3, #6]
   1710e:	b1c8      	cbz	r0, 17144 <cosem_setSecuritySetup+0x246>
                    it->issuer = gxmalloc(tmp3->byteArr->size + 1);
   17110:	3001      	adds	r0, #1
   17112:	f7f5 fba7 	bl	c864 <malloc>
   17116:	4680      	mov	r8, r0
   17118:	60a8      	str	r0, [r5, #8]
                    if (it->issuer == NULL)
   1711a:	2800      	cmp	r0, #0
   1711c:	f47f af39 	bne.w	16f92 <cosem_setSecuritySetup+0x94>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17120:	f44f 7482 	mov.w	r4, #260	; 0x104
                if (it->serialNumber != NULL)
   17124:	6868      	ldr	r0, [r5, #4]
   17126:	b108      	cbz	r0, 1712c <cosem_setSecuritySetup+0x22e>
                    gxfree(it->serialNumber);
   17128:	f7f5 fba4 	bl	c874 <free>
                if (it->subject != NULL)
   1712c:	68e8      	ldr	r0, [r5, #12]
   1712e:	b108      	cbz	r0, 17134 <cosem_setSecuritySetup+0x236>
                    gxfree(it->subject);
   17130:	f7f5 fba0 	bl	c874 <free>
                if (it->issuer != NULL)
   17134:	68a8      	ldr	r0, [r5, #8]
   17136:	b108      	cbz	r0, 1713c <cosem_setSecuritySetup+0x23e>
                    gxfree(it->issuer);
   17138:	f7f5 fb9c 	bl	c874 <free>
                gxfree(it);
   1713c:	4628      	mov	r0, r5
   1713e:	f7f5 fb99 	bl	c874 <free>
   17142:	e6ee      	b.n	16f22 <cosem_setSecuritySetup+0x24>
                    it->issuer = NULL;
   17144:	2300      	movs	r3, #0
   17146:	60ab      	str	r3, [r5, #8]
   17148:	e730      	b.n	16fac <cosem_setSecuritySetup+0xae>
                    it->subject = NULL;
   1714a:	2300      	movs	r3, #0
   1714c:	60eb      	str	r3, [r5, #12]
   1714e:	e755      	b.n	16ffc <cosem_setSecuritySetup+0xfe>
                    it->subjectAltName = NULL;
   17150:	2300      	movs	r3, #0
   17152:	612b      	str	r3, [r5, #16]
   17154:	e779      	b.n	1704a <cosem_setSecuritySetup+0x14c>
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
   17156:	2403      	movs	r4, #3
   17158:	e6e3      	b.n	16f22 <cosem_setSecuritySetup+0x24>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1715a:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   1715e:	e6e0      	b.n	16f22 <cosem_setSecuritySetup+0x24>
            if (ret != 0 && it != NULL)
   17160:	2d00      	cmp	r5, #0
   17162:	f43f aede 	beq.w	16f22 <cosem_setSecuritySetup+0x24>
   17166:	e7dd      	b.n	17124 <cosem_setSecuritySetup+0x226>

00017168 <cosem_setIecHdlcSetup>:
    if (index == 2)
   17168:	2902      	cmp	r1, #2
{
   1716a:	b510      	push	{r4, lr}
   1716c:	4604      	mov	r4, r0
   1716e:	4610      	mov	r0, r2
    if (index == 2)
   17170:	d104      	bne.n	1717c <cosem_setIecHdlcSetup+0x14>
        object->communicationSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   17172:	f004 fbb0 	bl	1b8d6 <var_toInteger>
   17176:	75a0      	strb	r0, [r4, #22]
    return DLMS_ERROR_CODE_OK;
   17178:	2000      	movs	r0, #0
}
   1717a:	bd10      	pop	{r4, pc}
    else if (index == 3)
   1717c:	2903      	cmp	r1, #3
   1717e:	d103      	bne.n	17188 <cosem_setIecHdlcSetup+0x20>
        object->windowSizeTransmit = (unsigned char)var_toInteger(value);
   17180:	f004 fba9 	bl	1b8d6 <var_toInteger>
   17184:	75e0      	strb	r0, [r4, #23]
   17186:	e7f7      	b.n	17178 <cosem_setIecHdlcSetup+0x10>
    else if (index == 4)
   17188:	2904      	cmp	r1, #4
   1718a:	d103      	bne.n	17194 <cosem_setIecHdlcSetup+0x2c>
        object->windowSizeReceive = (unsigned char)var_toInteger(value);
   1718c:	f004 fba3 	bl	1b8d6 <var_toInteger>
   17190:	7620      	strb	r0, [r4, #24]
   17192:	e7f1      	b.n	17178 <cosem_setIecHdlcSetup+0x10>
    else if (index == 5)
   17194:	2905      	cmp	r1, #5
   17196:	d103      	bne.n	171a0 <cosem_setIecHdlcSetup+0x38>
        object->maximumInfoLengthTransmit = (uint16_t)var_toInteger(value);
   17198:	f004 fb9d 	bl	1b8d6 <var_toInteger>
   1719c:	82a0      	strh	r0, [r4, #20]
   1719e:	e7eb      	b.n	17178 <cosem_setIecHdlcSetup+0x10>
    else if (index == 6)
   171a0:	2906      	cmp	r1, #6
   171a2:	d103      	bne.n	171ac <cosem_setIecHdlcSetup+0x44>
        object->maximumInfoLengthReceive = (uint16_t)var_toInteger(value);
   171a4:	f004 fb97 	bl	1b8d6 <var_toInteger>
   171a8:	83a0      	strh	r0, [r4, #28]
   171aa:	e7e5      	b.n	17178 <cosem_setIecHdlcSetup+0x10>
    else if (index == 7)
   171ac:	2907      	cmp	r1, #7
   171ae:	d103      	bne.n	171b8 <cosem_setIecHdlcSetup+0x50>
        object->interCharachterTimeout = (uint16_t)var_toInteger(value);
   171b0:	f004 fb91 	bl	1b8d6 <var_toInteger>
   171b4:	8360      	strh	r0, [r4, #26]
   171b6:	e7df      	b.n	17178 <cosem_setIecHdlcSetup+0x10>
    else if (index == 8)
   171b8:	2908      	cmp	r1, #8
   171ba:	d103      	bne.n	171c4 <cosem_setIecHdlcSetup+0x5c>
        object->inactivityTimeout = (uint16_t)var_toInteger(value);
   171bc:	f004 fb8b 	bl	1b8d6 <var_toInteger>
   171c0:	8220      	strh	r0, [r4, #16]
   171c2:	e7d9      	b.n	17178 <cosem_setIecHdlcSetup+0x10>
    else if (index == 9)
   171c4:	2909      	cmp	r1, #9
   171c6:	d103      	bne.n	171d0 <cosem_setIecHdlcSetup+0x68>
        object->deviceAddress = (uint16_t)var_toInteger(value);
   171c8:	f004 fb85 	bl	1b8d6 <var_toInteger>
   171cc:	8260      	strh	r0, [r4, #18]
   171ce:	e7d3      	b.n	17178 <cosem_setIecHdlcSetup+0x10>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   171d0:	f44f 7081 	mov.w	r0, #258	; 0x102
   171d4:	e7d1      	b.n	1717a <cosem_setIecHdlcSetup+0x12>

000171d6 <cosem_setIecLocalPortSetup>:
    if (index == 2)
   171d6:	2902      	cmp	r1, #2
{
   171d8:	b570      	push	{r4, r5, r6, lr}
   171da:	4604      	mov	r4, r0
   171dc:	4615      	mov	r5, r2
    if (index == 2)
   171de:	d106      	bne.n	171ee <cosem_setIecLocalPortSetup+0x18>
        object->defaultMode = (DLMS_OPTICAL_PROTOCOL_MODE)var_toInteger(value);
   171e0:	4610      	mov	r0, r2
   171e2:	f004 fb78 	bl	1b8d6 <var_toInteger>
   171e6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    int ret = 0;
   171ea:	2000      	movs	r0, #0
}
   171ec:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   171ee:	2903      	cmp	r1, #3
   171f0:	d105      	bne.n	171fe <cosem_setIecLocalPortSetup+0x28>
        object->defaultBaudrate = (DLMS_BAUD_RATE)var_toInteger(value);
   171f2:	4610      	mov	r0, r2
   171f4:	f004 fb6f 	bl	1b8d6 <var_toInteger>
   171f8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
   171fc:	e7f5      	b.n	171ea <cosem_setIecLocalPortSetup+0x14>
    else if (index == 4)
   171fe:	2904      	cmp	r1, #4
   17200:	d105      	bne.n	1720e <cosem_setIecLocalPortSetup+0x38>
        object->proposedBaudrate = (DLMS_BAUD_RATE)var_toInteger(value);
   17202:	4610      	mov	r0, r2
   17204:	f004 fb67 	bl	1b8d6 <var_toInteger>
   17208:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   1720c:	e7ed      	b.n	171ea <cosem_setIecLocalPortSetup+0x14>
    else if (index == 5)
   1720e:	2905      	cmp	r1, #5
   17210:	d105      	bne.n	1721e <cosem_setIecLocalPortSetup+0x48>
        object->responseTime = (DLMS_LOCAL_PORT_RESPONSE_TIME)var_toInteger(value);
   17212:	4610      	mov	r0, r2
   17214:	f004 fb5f 	bl	1b8d6 <var_toInteger>
   17218:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   1721c:	e7e5      	b.n	171ea <cosem_setIecLocalPortSetup+0x14>
    else if (index == 6)
   1721e:	2906      	cmp	r1, #6
   17220:	d10f      	bne.n	17242 <cosem_setIecLocalPortSetup+0x6c>
        bb_clear(&object->deviceAddress);
   17222:	3438      	adds	r4, #56	; 0x38
        bb_clear(&object->password5);
   17224:	4620      	mov	r0, r4
   17226:	f7f6 fd04 	bl	dc32 <bb_clear>
        ret = bb_set2(&object->password5, value->byteArr, 0, bb_size(value->byteArr));
   1722a:	68ad      	ldr	r5, [r5, #8]
   1722c:	4628      	mov	r0, r5
   1722e:	f7f6 fb3a 	bl	d8a6 <bb_size>
   17232:	4629      	mov	r1, r5
   17234:	4603      	mov	r3, r0
   17236:	2200      	movs	r2, #0
   17238:	4620      	mov	r0, r4
}
   1723a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->password5, value->byteArr, 0, bb_size(value->byteArr));
   1723e:	f7f6 bcb3 	b.w	dba8 <bb_set2>
    else if (index == 7)
   17242:	2907      	cmp	r1, #7
   17244:	d101      	bne.n	1724a <cosem_setIecLocalPortSetup+0x74>
        bb_clear(&object->password1);
   17246:	3410      	adds	r4, #16
   17248:	e7ec      	b.n	17224 <cosem_setIecLocalPortSetup+0x4e>
    else if (index == 8)
   1724a:	2908      	cmp	r1, #8
   1724c:	d101      	bne.n	17252 <cosem_setIecLocalPortSetup+0x7c>
        bb_clear(&object->password2);
   1724e:	341c      	adds	r4, #28
   17250:	e7e8      	b.n	17224 <cosem_setIecLocalPortSetup+0x4e>
    else if (index == 9)
   17252:	2909      	cmp	r1, #9
   17254:	d101      	bne.n	1725a <cosem_setIecLocalPortSetup+0x84>
        bb_clear(&object->password5);
   17256:	3428      	adds	r4, #40	; 0x28
   17258:	e7e4      	b.n	17224 <cosem_setIecLocalPortSetup+0x4e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1725a:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1725e:	e7c5      	b.n	171ec <cosem_setIecLocalPortSetup+0x16>

00017260 <cosem_setIecTwistedPairSetup>:
    if (index == 2)
   17260:	2902      	cmp	r1, #2
{
   17262:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17264:	4604      	mov	r4, r0
   17266:	4615      	mov	r5, r2
    if (index == 2)
   17268:	d106      	bne.n	17278 <cosem_setIecTwistedPairSetup+0x18>
        object->mode = var_toInteger(value);
   1726a:	4610      	mov	r0, r2
   1726c:	f004 fb33 	bl	1b8d6 <var_toInteger>
   17270:	7420      	strb	r0, [r4, #16]
    int pos, ret = 0;
   17272:	2000      	movs	r0, #0
}
   17274:	b002      	add	sp, #8
   17276:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   17278:	2903      	cmp	r1, #3
   1727a:	d104      	bne.n	17286 <cosem_setIecTwistedPairSetup+0x26>
        object->speed = var_toInteger(value);
   1727c:	4610      	mov	r0, r2
   1727e:	f004 fb2a 	bl	1b8d6 <var_toInteger>
   17282:	7460      	strb	r0, [r4, #17]
   17284:	e7f5      	b.n	17272 <cosem_setIecTwistedPairSetup+0x12>
    else if (index == 4)
   17286:	2904      	cmp	r1, #4
   17288:	d11b      	bne.n	172c2 <cosem_setIecTwistedPairSetup+0x62>
        bb_clear(&object->primaryAddresses);
   1728a:	3414      	adds	r4, #20
   1728c:	4620      	mov	r0, r4
   1728e:	f7f6 fcd0 	bl	dc32 <bb_clear>
        if (value->Arr != NULL)
   17292:	68ab      	ldr	r3, [r5, #8]
   17294:	2b00      	cmp	r3, #0
   17296:	d0ec      	beq.n	17272 <cosem_setIecTwistedPairSetup+0x12>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17298:	2600      	movs	r6, #0
   1729a:	e00d      	b.n	172b8 <cosem_setIecTwistedPairSetup+0x58>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1729c:	aa01      	add	r2, sp, #4
   1729e:	4631      	mov	r1, r6
   172a0:	f004 f99f 	bl	1b5e2 <va_getByIndex>
   172a4:	2800      	cmp	r0, #0
   172a6:	d1e5      	bne.n	17274 <cosem_setIecTwistedPairSetup+0x14>
                    (ret = bb_setUInt8(&object->primaryAddresses, tmp->bVal)) != DLMS_ERROR_CODE_OK)
   172a8:	9b01      	ldr	r3, [sp, #4]
   172aa:	4620      	mov	r0, r4
   172ac:	7a19      	ldrb	r1, [r3, #8]
   172ae:	f7f6 fb66 	bl	d97e <bb_setUInt8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   172b2:	2800      	cmp	r0, #0
   172b4:	d1de      	bne.n	17274 <cosem_setIecTwistedPairSetup+0x14>
            for (pos = 0; pos != value->Arr->size; ++pos)
   172b6:	3601      	adds	r6, #1
   172b8:	68a8      	ldr	r0, [r5, #8]
   172ba:	88c3      	ldrh	r3, [r0, #6]
   172bc:	42b3      	cmp	r3, r6
   172be:	d1ed      	bne.n	1729c <cosem_setIecTwistedPairSetup+0x3c>
   172c0:	e7d7      	b.n	17272 <cosem_setIecTwistedPairSetup+0x12>
    else if (index == 5)
   172c2:	2905      	cmp	r1, #5
   172c4:	d11b      	bne.n	172fe <cosem_setIecTwistedPairSetup+0x9e>
        bb_clear(&object->tabis);
   172c6:	3420      	adds	r4, #32
   172c8:	4620      	mov	r0, r4
   172ca:	f7f6 fcb2 	bl	dc32 <bb_clear>
        if (value->Arr != NULL)
   172ce:	68ab      	ldr	r3, [r5, #8]
   172d0:	2b00      	cmp	r3, #0
   172d2:	d0ce      	beq.n	17272 <cosem_setIecTwistedPairSetup+0x12>
            for (pos = 0; pos != value->Arr->size; ++pos)
   172d4:	2600      	movs	r6, #0
   172d6:	e00d      	b.n	172f4 <cosem_setIecTwistedPairSetup+0x94>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   172d8:	aa01      	add	r2, sp, #4
   172da:	4631      	mov	r1, r6
   172dc:	f004 f981 	bl	1b5e2 <va_getByIndex>
   172e0:	2800      	cmp	r0, #0
   172e2:	d1c7      	bne.n	17274 <cosem_setIecTwistedPairSetup+0x14>
                    (ret = bb_setUInt8(&object->tabis, tmp->bVal)) != DLMS_ERROR_CODE_OK)
   172e4:	9b01      	ldr	r3, [sp, #4]
   172e6:	4620      	mov	r0, r4
   172e8:	7a19      	ldrb	r1, [r3, #8]
   172ea:	f7f6 fb48 	bl	d97e <bb_setUInt8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   172ee:	2800      	cmp	r0, #0
   172f0:	d1c0      	bne.n	17274 <cosem_setIecTwistedPairSetup+0x14>
            for (pos = 0; pos != value->Arr->size; ++pos)
   172f2:	3601      	adds	r6, #1
   172f4:	68a8      	ldr	r0, [r5, #8]
   172f6:	88c3      	ldrh	r3, [r0, #6]
   172f8:	42b3      	cmp	r3, r6
   172fa:	d1ed      	bne.n	172d8 <cosem_setIecTwistedPairSetup+0x78>
   172fc:	e7b9      	b.n	17272 <cosem_setIecTwistedPairSetup+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   172fe:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   17302:	e7b7      	b.n	17274 <cosem_setIecTwistedPairSetup+0x14>

00017304 <cosem_setIP4Setup>:
    if (index == 2)
   17304:	2a02      	cmp	r2, #2
{
   17306:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1730a:	460e      	mov	r6, r1
   1730c:	461d      	mov	r5, r3
    if (index == 2)
   1730e:	d10c      	bne.n	1732a <cosem_setIP4Setup+0x26>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_NONE, value->byteArr->data, &object->dataLinkLayer)) != 0)
   17310:	689a      	ldr	r2, [r3, #8]
   17312:	3098      	adds	r0, #152	; 0x98
   17314:	f101 0310 	add.w	r3, r1, #16
   17318:	6812      	ldr	r2, [r2, #0]
   1731a:	2100      	movs	r1, #0
   1731c:	f003 ff1e 	bl	1b15c <oa_findByLN>
   17320:	4604      	mov	r4, r0
}
   17322:	4620      	mov	r0, r4
   17324:	b003      	add	sp, #12
   17326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   1732a:	2a03      	cmp	r2, #3
   1732c:	d105      	bne.n	1733a <cosem_setIP4Setup+0x36>
        object->ipAddress = var_toInteger(value);
   1732e:	4618      	mov	r0, r3
   17330:	f004 fad1 	bl	1b8d6 <var_toInteger>
   17334:	6170      	str	r0, [r6, #20]
    int ret = 0, pos;
   17336:	2400      	movs	r4, #0
   17338:	e7f3      	b.n	17322 <cosem_setIP4Setup+0x1e>
    else if (index == 4)
   1733a:	2a04      	cmp	r2, #4
   1733c:	d12c      	bne.n	17398 <cosem_setIP4Setup+0x94>
        va_clear(&object->multicastIPAddress);
   1733e:	3618      	adds	r6, #24
   17340:	4630      	mov	r0, r6
   17342:	f004 f8ab 	bl	1b49c <va_clear>
        if (value->Arr != NULL)
   17346:	68ab      	ldr	r3, [r5, #8]
   17348:	2b00      	cmp	r3, #0
   1734a:	d0f4      	beq.n	17336 <cosem_setIP4Setup+0x32>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1734c:	2700      	movs	r7, #0
   1734e:	e01e      	b.n	1738e <cosem_setIP4Setup+0x8a>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   17350:	466a      	mov	r2, sp
   17352:	4639      	mov	r1, r7
   17354:	f004 f945 	bl	1b5e2 <va_getByIndex>
   17358:	4604      	mov	r4, r0
   1735a:	2800      	cmp	r0, #0
   1735c:	d1e1      	bne.n	17322 <cosem_setIP4Setup+0x1e>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1735e:	2010      	movs	r0, #16
   17360:	f7f5 fa80 	bl	c864 <malloc>
   17364:	9001      	str	r0, [sp, #4]
                if ((ret = var_init(tmp3)) != 0 ||
   17366:	f003 ff62 	bl	1b22e <var_init>
   1736a:	4604      	mov	r4, r0
   1736c:	2800      	cmp	r0, #0
   1736e:	d1d8      	bne.n	17322 <cosem_setIP4Setup+0x1e>
                    (ret = var_copy(tmp, tmp3)) != 0 ||
   17370:	e9dd 0100 	ldrd	r0, r1, [sp]
   17374:	f7ed f916 	bl	45a4 <var_copy>
                if ((ret = var_init(tmp3)) != 0 ||
   17378:	4604      	mov	r4, r0
   1737a:	2800      	cmp	r0, #0
   1737c:	d1d1      	bne.n	17322 <cosem_setIP4Setup+0x1e>
                    (ret = va_push(&object->multicastIPAddress, tmp3)) != 0)
   1737e:	9901      	ldr	r1, [sp, #4]
   17380:	4630      	mov	r0, r6
   17382:	f004 f862 	bl	1b44a <va_push>
                    (ret = var_copy(tmp, tmp3)) != 0 ||
   17386:	4604      	mov	r4, r0
   17388:	2800      	cmp	r0, #0
   1738a:	d1ca      	bne.n	17322 <cosem_setIP4Setup+0x1e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1738c:	3701      	adds	r7, #1
   1738e:	68a8      	ldr	r0, [r5, #8]
   17390:	88c3      	ldrh	r3, [r0, #6]
   17392:	42bb      	cmp	r3, r7
   17394:	d1dc      	bne.n	17350 <cosem_setIP4Setup+0x4c>
   17396:	e7ce      	b.n	17336 <cosem_setIP4Setup+0x32>
    else if (index == 5)
   17398:	2a05      	cmp	r2, #5
   1739a:	d150      	bne.n	1743e <cosem_setIP4Setup+0x13a>
        arr_clear(&object->ipOptions);
   1739c:	3620      	adds	r6, #32
   1739e:	4630      	mov	r0, r6
   173a0:	f7f9 fe8b 	bl	110ba <arr_clear>
        if (value->Arr != NULL)
   173a4:	68ab      	ldr	r3, [r5, #8]
   173a6:	2b00      	cmp	r3, #0
   173a8:	d0c5      	beq.n	17336 <cosem_setIP4Setup+0x32>
            for (pos = 0; pos != value->Arr->size; ++pos)
   173aa:	2700      	movs	r7, #0
   173ac:	e042      	b.n	17434 <cosem_setIP4Setup+0x130>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   173ae:	466a      	mov	r2, sp
   173b0:	4639      	mov	r1, r7
   173b2:	f004 f916 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   173b6:	4604      	mov	r4, r0
   173b8:	2800      	cmp	r0, #0
   173ba:	d1b2      	bne.n	17322 <cosem_setIP4Setup+0x1e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   173bc:	9b00      	ldr	r3, [sp, #0]
   173be:	4601      	mov	r1, r0
   173c0:	aa01      	add	r2, sp, #4
   173c2:	6898      	ldr	r0, [r3, #8]
   173c4:	f004 f90d 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   173c8:	4604      	mov	r4, r0
   173ca:	2800      	cmp	r0, #0
   173cc:	d1a9      	bne.n	17322 <cosem_setIP4Setup+0x1e>
                ipItem = (gxip4SetupIpOption*)gxmalloc(sizeof(gxip4SetupIpOption));
   173ce:	2010      	movs	r0, #16
   173d0:	f7f5 fa48 	bl	c864 <malloc>
                if (ipItem == NULL)
   173d4:	4680      	mov	r8, r0
   173d6:	2800      	cmp	r0, #0
   173d8:	d05a      	beq.n	17490 <cosem_setIP4Setup+0x18c>
                BYTE_BUFFER_INIT(&ipItem->data);
   173da:	f100 0904 	add.w	r9, r0, #4
   173de:	4648      	mov	r0, r9
   173e0:	f7f6 fa64 	bl	d8ac <bb_init>
                ipItem->type = (DLMS_IP_OPTION_TYPE)var_toInteger(tmp3);
   173e4:	9801      	ldr	r0, [sp, #4]
   173e6:	f004 fa76 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   173ea:	9b00      	ldr	r3, [sp, #0]
                ipItem->type = (DLMS_IP_OPTION_TYPE)var_toInteger(tmp3);
   173ec:	f888 0000 	strb.w	r0, [r8]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   173f0:	6898      	ldr	r0, [r3, #8]
   173f2:	aa01      	add	r2, sp, #4
   173f4:	2101      	movs	r1, #1
   173f6:	f004 f8f4 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   173fa:	4604      	mov	r4, r0
   173fc:	2800      	cmp	r0, #0
   173fe:	d143      	bne.n	17488 <cosem_setIP4Setup+0x184>
                ipItem->length = (unsigned char)var_toInteger(tmp3);
   17400:	9801      	ldr	r0, [sp, #4]
   17402:	f004 fa68 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17406:	9b00      	ldr	r3, [sp, #0]
                ipItem->length = (unsigned char)var_toInteger(tmp3);
   17408:	f888 0001 	strb.w	r0, [r8, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1740c:	6898      	ldr	r0, [r3, #8]
   1740e:	aa01      	add	r2, sp, #4
   17410:	2102      	movs	r1, #2
   17412:	f004 f8e6 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17416:	4604      	mov	r4, r0
   17418:	2800      	cmp	r0, #0
   1741a:	d135      	bne.n	17488 <cosem_setIP4Setup+0x184>
                bb_set(&ipItem->data, tmp3->byteArr->data, tmp3->byteArr->size);
   1741c:	9b01      	ldr	r3, [sp, #4]
   1741e:	689b      	ldr	r3, [r3, #8]
   17420:	4648      	mov	r0, r9
   17422:	6819      	ldr	r1, [r3, #0]
   17424:	88da      	ldrh	r2, [r3, #6]
   17426:	f7f6 fb90 	bl	db4a <bb_set>
                arr_push(&object->ipOptions, ipItem);
   1742a:	4641      	mov	r1, r8
   1742c:	4630      	mov	r0, r6
   1742e:	f7f9 fe2f 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17432:	3701      	adds	r7, #1
   17434:	68a8      	ldr	r0, [r5, #8]
   17436:	88c3      	ldrh	r3, [r0, #6]
   17438:	42bb      	cmp	r3, r7
   1743a:	d1b8      	bne.n	173ae <cosem_setIP4Setup+0xaa>
   1743c:	e77b      	b.n	17336 <cosem_setIP4Setup+0x32>
    else if (index == 6)
   1743e:	2a06      	cmp	r2, #6
   17440:	d104      	bne.n	1744c <cosem_setIP4Setup+0x148>
        object->subnetMask = var_toInteger(value);
   17442:	4618      	mov	r0, r3
   17444:	f004 fa47 	bl	1b8d6 <var_toInteger>
   17448:	62f0      	str	r0, [r6, #44]	; 0x2c
   1744a:	e774      	b.n	17336 <cosem_setIP4Setup+0x32>
    else if (index == 7)
   1744c:	2a07      	cmp	r2, #7
   1744e:	d104      	bne.n	1745a <cosem_setIP4Setup+0x156>
        object->gatewayIPAddress = var_toInteger(value);
   17450:	4618      	mov	r0, r3
   17452:	f004 fa40 	bl	1b8d6 <var_toInteger>
   17456:	6330      	str	r0, [r6, #48]	; 0x30
   17458:	e76d      	b.n	17336 <cosem_setIP4Setup+0x32>
    else if (index == 8)
   1745a:	2a08      	cmp	r2, #8
   1745c:	d103      	bne.n	17466 <cosem_setIP4Setup+0x162>
        object->useDHCP = value->boolVal;
   1745e:	7a1b      	ldrb	r3, [r3, #8]
   17460:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
   17464:	e767      	b.n	17336 <cosem_setIP4Setup+0x32>
    else if (index == 9)
   17466:	2a09      	cmp	r2, #9
   17468:	d104      	bne.n	17474 <cosem_setIP4Setup+0x170>
        object->primaryDNSAddress = var_toInteger(value);
   1746a:	4618      	mov	r0, r3
   1746c:	f004 fa33 	bl	1b8d6 <var_toInteger>
   17470:	63b0      	str	r0, [r6, #56]	; 0x38
   17472:	e760      	b.n	17336 <cosem_setIP4Setup+0x32>
    else if (index == 10)
   17474:	2a0a      	cmp	r2, #10
   17476:	d104      	bne.n	17482 <cosem_setIP4Setup+0x17e>
        object->secondaryDNSAddress = var_toInteger(value);
   17478:	4618      	mov	r0, r3
   1747a:	f004 fa2c 	bl	1b8d6 <var_toInteger>
   1747e:	63f0      	str	r0, [r6, #60]	; 0x3c
   17480:	e759      	b.n	17336 <cosem_setIP4Setup+0x32>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17482:	f44f 7481 	mov.w	r4, #258	; 0x102
   17486:	e74c      	b.n	17322 <cosem_setIP4Setup+0x1e>
                gxfree(ipItem);
   17488:	4640      	mov	r0, r8
   1748a:	f7f5 f9f3 	bl	c874 <free>
   1748e:	e748      	b.n	17322 <cosem_setIP4Setup+0x1e>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17490:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != DLMS_ERROR_CODE_OK && ipItem != NULL)
   17494:	e745      	b.n	17322 <cosem_setIP4Setup+0x1e>

00017496 <cosem_setUtilityTables>:
    if (index == 2)
   17496:	2902      	cmp	r1, #2
{
   17498:	b538      	push	{r3, r4, r5, lr}
   1749a:	4604      	mov	r4, r0
   1749c:	4615      	mov	r5, r2
    if (index == 2)
   1749e:	d105      	bne.n	174ac <cosem_setUtilityTables+0x16>
        object->tableId = (uint16_t)var_toInteger(value);
   174a0:	4610      	mov	r0, r2
   174a2:	f004 fa18 	bl	1b8d6 <var_toInteger>
   174a6:	8220      	strh	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   174a8:	2000      	movs	r0, #0
}
   174aa:	bd38      	pop	{r3, r4, r5, pc}
    else if (index == 3)
   174ac:	2903      	cmp	r1, #3
   174ae:	d0fb      	beq.n	174a8 <cosem_setUtilityTables+0x12>
    else if (index == 4)
   174b0:	2904      	cmp	r1, #4
   174b2:	d10e      	bne.n	174d2 <cosem_setUtilityTables+0x3c>
        bb_clear(&object->buffer);
   174b4:	3414      	adds	r4, #20
   174b6:	4620      	mov	r0, r4
   174b8:	f7f6 fbbb 	bl	dc32 <bb_clear>
        bb_set2(&object->buffer, value->byteArr, 0, bb_size(value->byteArr));
   174bc:	68ad      	ldr	r5, [r5, #8]
   174be:	4628      	mov	r0, r5
   174c0:	f7f6 f9f1 	bl	d8a6 <bb_size>
   174c4:	2200      	movs	r2, #0
   174c6:	4603      	mov	r3, r0
   174c8:	4629      	mov	r1, r5
   174ca:	4620      	mov	r0, r4
   174cc:	f7f6 fb6c 	bl	dba8 <bb_set2>
   174d0:	e7ea      	b.n	174a8 <cosem_setUtilityTables+0x12>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   174d2:	f44f 7081 	mov.w	r0, #258	; 0x102
   174d6:	e7e8      	b.n	174aa <cosem_setUtilityTables+0x14>

000174d8 <cosem_setMbusSlavePortSetup>:
    if (index == 2)
   174d8:	2902      	cmp	r1, #2
{
   174da:	b510      	push	{r4, lr}
   174dc:	4604      	mov	r4, r0
   174de:	4610      	mov	r0, r2
    if (index == 2)
   174e0:	d104      	bne.n	174ec <cosem_setMbusSlavePortSetup+0x14>
        object->defaultBaud = (DLMS_BAUD_RATE)var_toInteger(value);
   174e2:	f004 f9f8 	bl	1b8d6 <var_toInteger>
   174e6:	7420      	strb	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   174e8:	2000      	movs	r0, #0
}
   174ea:	bd10      	pop	{r4, pc}
    else if (index == 3)
   174ec:	2903      	cmp	r1, #3
   174ee:	d103      	bne.n	174f8 <cosem_setMbusSlavePortSetup+0x20>
        object->availableBaud = (DLMS_BAUD_RATE)var_toInteger(value);
   174f0:	f004 f9f1 	bl	1b8d6 <var_toInteger>
   174f4:	7460      	strb	r0, [r4, #17]
   174f6:	e7f7      	b.n	174e8 <cosem_setMbusSlavePortSetup+0x10>
    else if (index == 4)
   174f8:	2904      	cmp	r1, #4
   174fa:	d103      	bne.n	17504 <cosem_setMbusSlavePortSetup+0x2c>
        object->addressState = (DLMS_ADDRESS_STATE)var_toInteger(value);
   174fc:	f004 f9eb 	bl	1b8d6 <var_toInteger>
   17500:	74a0      	strb	r0, [r4, #18]
   17502:	e7f1      	b.n	174e8 <cosem_setMbusSlavePortSetup+0x10>
    else if (index == 5)
   17504:	2905      	cmp	r1, #5
   17506:	d103      	bne.n	17510 <cosem_setMbusSlavePortSetup+0x38>
        object->busAddress = (unsigned char)var_toInteger(value);
   17508:	f004 f9e5 	bl	1b8d6 <var_toInteger>
   1750c:	74e0      	strb	r0, [r4, #19]
   1750e:	e7eb      	b.n	174e8 <cosem_setMbusSlavePortSetup+0x10>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17510:	f44f 7081 	mov.w	r0, #258	; 0x102
   17514:	e7e9      	b.n	174ea <cosem_setMbusSlavePortSetup+0x12>

00017516 <cosem_setDisconnectControl>:
    if (index == 2)
   17516:	2902      	cmp	r1, #2
{
   17518:	b510      	push	{r4, lr}
   1751a:	4604      	mov	r4, r0
   1751c:	4610      	mov	r0, r2
    if (index == 2)
   1751e:	d103      	bne.n	17528 <cosem_setDisconnectControl+0x12>
        object->outputState = value->boolVal;
   17520:	7a13      	ldrb	r3, [r2, #8]
   17522:	7423      	strb	r3, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   17524:	2000      	movs	r0, #0
}
   17526:	bd10      	pop	{r4, pc}
    else if (index == 3)
   17528:	2903      	cmp	r1, #3
   1752a:	d103      	bne.n	17534 <cosem_setDisconnectControl+0x1e>
        object->controlState = (DLMS_CONTROL_STATE)var_toInteger(value);
   1752c:	f004 f9d3 	bl	1b8d6 <var_toInteger>
   17530:	7460      	strb	r0, [r4, #17]
   17532:	e7f7      	b.n	17524 <cosem_setDisconnectControl+0xe>
    else if (index == 4)
   17534:	2904      	cmp	r1, #4
   17536:	d103      	bne.n	17540 <cosem_setDisconnectControl+0x2a>
        object->controlMode = (DLMS_CONTROL_MODE)var_toInteger(value);
   17538:	f004 f9cd 	bl	1b8d6 <var_toInteger>
   1753c:	74a0      	strb	r0, [r4, #18]
   1753e:	e7f1      	b.n	17524 <cosem_setDisconnectControl+0xe>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17540:	f44f 7081 	mov.w	r0, #258	; 0x102
   17544:	e7ef      	b.n	17526 <cosem_setDisconnectControl+0x10>

00017546 <cosem_setLimiter>:
{
   17546:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   1754a:	2a02      	cmp	r2, #2
{
   1754c:	b087      	sub	sp, #28
   1754e:	4607      	mov	r7, r0
   17550:	460d      	mov	r5, r1
   17552:	461e      	mov	r6, r3
    if (index == 2)
   17554:	d152      	bne.n	175fc <cosem_setLimiter+0xb6>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   17556:	f893 9000 	ldrb.w	r9, [r3]
   1755a:	f1b9 0f02 	cmp.w	r9, #2
   1755e:	f040 8177 	bne.w	17850 <cosem_setLimiter+0x30a>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   17562:	6898      	ldr	r0, [r3, #8]
   17564:	aa01      	add	r2, sp, #4
   17566:	2100      	movs	r1, #0
   17568:	f004 f83b 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1756c:	4604      	mov	r4, r0
   1756e:	2800      	cmp	r0, #0
   17570:	d140      	bne.n	175f4 <cosem_setLimiter+0xae>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   17572:	9801      	ldr	r0, [sp, #4]
   17574:	f004 f9af 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp3);
   17578:	aa02      	add	r2, sp, #8
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   1757a:	4680      	mov	r8, r0
        ret = va_getByIndex(value->Arr, 1, &tmp3);
   1757c:	2101      	movs	r1, #1
   1757e:	68b0      	ldr	r0, [r6, #8]
   17580:	f004 f82f 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17584:	4604      	mov	r4, r0
   17586:	2800      	cmp	r0, #0
   17588:	d134      	bne.n	175f4 <cosem_setLimiter+0xae>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   1758a:	68b0      	ldr	r0, [r6, #8]
   1758c:	aa01      	add	r2, sp, #4
   1758e:	4649      	mov	r1, r9
   17590:	f004 f827 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17594:	4604      	mov	r4, r0
   17596:	bb68      	cbnz	r0, 175f4 <cosem_setLimiter+0xae>
        object->selectedAttributeIndex = (unsigned char)var_toInteger(tmp);
   17598:	9801      	ldr	r0, [sp, #4]
   1759a:	f004 f99c 	bl	1b8d6 <var_toInteger>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   1759e:	fa1f f688 	uxth.w	r6, r8
        object->selectedAttributeIndex = (unsigned char)var_toInteger(tmp);
   175a2:	7528      	strb	r0, [r5, #20]
        if (ot != 0)
   175a4:	b32e      	cbz	r6, 175f2 <cosem_setLimiter+0xac>
            if ((ret = oa_findByLN(&settings->objects, ot, tmp3->byteArr->data, &object->monitoredValue)) == 0 &&
   175a6:	9b02      	ldr	r3, [sp, #8]
   175a8:	689a      	ldr	r2, [r3, #8]
   175aa:	f105 0810 	add.w	r8, r5, #16
   175ae:	6812      	ldr	r2, [r2, #0]
   175b0:	4643      	mov	r3, r8
   175b2:	4631      	mov	r1, r6
   175b4:	f107 0098 	add.w	r0, r7, #152	; 0x98
   175b8:	f003 fdd0 	bl	1b15c <oa_findByLN>
   175bc:	4604      	mov	r4, r0
   175be:	b9c8      	cbnz	r0, 175f4 <cosem_setLimiter+0xae>
   175c0:	692b      	ldr	r3, [r5, #16]
   175c2:	b10b      	cbz	r3, 175c8 <cosem_setLimiter+0x82>
    int ret = DLMS_ERROR_CODE_OK, pos;
   175c4:	2400      	movs	r4, #0
   175c6:	e015      	b.n	175f4 <cosem_setLimiter+0xae>
                if ((ret = cosem_createObject(ot, &object->monitoredValue)) != 0)
   175c8:	4641      	mov	r1, r8
   175ca:	4630      	mov	r0, r6
   175cc:	f7ea fd9c 	bl	2108 <cosem_createObject>
   175d0:	4604      	mov	r4, r0
   175d2:	b978      	cbnz	r0, 175f4 <cosem_setLimiter+0xae>
                memcpy(object->monitoredValue->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   175d4:	9b02      	ldr	r3, [sp, #8]
   175d6:	6928      	ldr	r0, [r5, #16]
   175d8:	689b      	ldr	r3, [r3, #8]
   175da:	3006      	adds	r0, #6
   175dc:	6819      	ldr	r1, [r3, #0]
   175de:	88da      	ldrh	r2, [r3, #6]
   175e0:	f006 f956 	bl	1d890 <memcpy>
                ret = oa_push(&settings->releasedObjects, object->monitoredValue);
   175e4:	6929      	ldr	r1, [r5, #16]
   175e6:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   175ea:	f003 fd28 	bl	1b03e <oa_push>
        ret = var_copy(&object->thresholdActive, value);
   175ee:	4604      	mov	r4, r0
   175f0:	e000      	b.n	175f4 <cosem_setLimiter+0xae>
            object->monitoredValue = NULL;
   175f2:	612c      	str	r4, [r5, #16]
}
   175f4:	4620      	mov	r0, r4
   175f6:	b007      	add	sp, #28
   175f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   175fc:	2a03      	cmp	r2, #3
   175fe:	d105      	bne.n	1760c <cosem_setLimiter+0xc6>
        ret = var_copy(&object->thresholdActive, value);
   17600:	4619      	mov	r1, r3
   17602:	f105 0018 	add.w	r0, r5, #24
   17606:	f7ec ffcd 	bl	45a4 <var_copy>
   1760a:	e7f0      	b.n	175ee <cosem_setLimiter+0xa8>
    else if (index == 4)
   1760c:	2a04      	cmp	r2, #4
   1760e:	d103      	bne.n	17618 <cosem_setLimiter+0xd2>
        ret = var_copy(&object->thresholdNormal, value);
   17610:	4619      	mov	r1, r3
   17612:	f105 0028 	add.w	r0, r5, #40	; 0x28
   17616:	e7f6      	b.n	17606 <cosem_setLimiter+0xc0>
    else if (index == 5)
   17618:	2a05      	cmp	r2, #5
   1761a:	d103      	bne.n	17624 <cosem_setLimiter+0xde>
        ret = var_copy(&object->thresholdEmergency, value);
   1761c:	4619      	mov	r1, r3
   1761e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17622:	e7f0      	b.n	17606 <cosem_setLimiter+0xc0>
    else if (index == 6)
   17624:	2a06      	cmp	r2, #6
   17626:	d104      	bne.n	17632 <cosem_setLimiter+0xec>
        object->minOverThresholdDuration = var_toInteger(value);
   17628:	4618      	mov	r0, r3
   1762a:	f004 f954 	bl	1b8d6 <var_toInteger>
   1762e:	64a8      	str	r0, [r5, #72]	; 0x48
   17630:	e7c8      	b.n	175c4 <cosem_setLimiter+0x7e>
    else if (index == 7)
   17632:	2a07      	cmp	r2, #7
   17634:	d104      	bne.n	17640 <cosem_setLimiter+0xfa>
        object->minUnderThresholdDuration = var_toInteger(value);
   17636:	4618      	mov	r0, r3
   17638:	f004 f94d 	bl	1b8d6 <var_toInteger>
   1763c:	64e8      	str	r0, [r5, #76]	; 0x4c
   1763e:	e7c1      	b.n	175c4 <cosem_setLimiter+0x7e>
    else if (index == 8)
   17640:	2a08      	cmp	r2, #8
   17642:	d137      	bne.n	176b4 <cosem_setLimiter+0x16e>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   17644:	6898      	ldr	r0, [r3, #8]
   17646:	aa01      	add	r2, sp, #4
   17648:	2100      	movs	r1, #0
   1764a:	f003 ffca 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1764e:	4604      	mov	r4, r0
   17650:	2800      	cmp	r0, #0
   17652:	d1cf      	bne.n	175f4 <cosem_setLimiter+0xae>
        object->emergencyProfile.id = (uint16_t)var_toInteger(tmp);
   17654:	9801      	ldr	r0, [sp, #4]
   17656:	f004 f93e 	bl	1b8d6 <var_toInteger>
   1765a:	f8a5 0050 	strh.w	r0, [r5, #80]	; 0x50
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1765e:	68b0      	ldr	r0, [r6, #8]
   17660:	aa01      	add	r2, sp, #4
   17662:	2101      	movs	r1, #1
   17664:	f003 ffbd 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17668:	4604      	mov	r4, r0
   1766a:	2800      	cmp	r0, #0
   1766c:	d1c2      	bne.n	175f4 <cosem_setLimiter+0xae>
        ret = var_init(&tmp2);
   1766e:	a802      	add	r0, sp, #8
   17670:	f003 fddd 	bl	1b22e <var_init>
        if (ret != DLMS_ERROR_CODE_OK)
   17674:	4604      	mov	r4, r0
   17676:	2800      	cmp	r0, #0
   17678:	d1bc      	bne.n	175f4 <cosem_setLimiter+0xae>
        ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1767a:	9801      	ldr	r0, [sp, #4]
   1767c:	aa02      	add	r2, sp, #8
   1767e:	2119      	movs	r1, #25
   17680:	f7f9 f9e0 	bl	10a44 <dlms_changeType2>
        if (ret != DLMS_ERROR_CODE_OK)
   17684:	4604      	mov	r4, r0
   17686:	2800      	cmp	r0, #0
   17688:	d1b4      	bne.n	175f4 <cosem_setLimiter+0xae>
        time_copy(&object->emergencyProfile.activationTime, tmp2.dateTime);
   1768a:	9904      	ldr	r1, [sp, #16]
   1768c:	f105 0054 	add.w	r0, r5, #84	; 0x54
   17690:	f7f7 fa25 	bl	eade <time_copy>
        var_clear(&tmp2);
   17694:	a802      	add	r0, sp, #8
   17696:	f003 ff26 	bl	1b4e6 <var_clear>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   1769a:	68b0      	ldr	r0, [r6, #8]
   1769c:	aa01      	add	r2, sp, #4
   1769e:	2102      	movs	r1, #2
   176a0:	f003 ff9f 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   176a4:	4604      	mov	r4, r0
   176a6:	2800      	cmp	r0, #0
   176a8:	d1a4      	bne.n	175f4 <cosem_setLimiter+0xae>
        object->emergencyProfile.duration = var_toInteger(tmp);
   176aa:	9801      	ldr	r0, [sp, #4]
   176ac:	f004 f913 	bl	1b8d6 <var_toInteger>
   176b0:	6628      	str	r0, [r5, #96]	; 0x60
   176b2:	e79f      	b.n	175f4 <cosem_setLimiter+0xae>
    else if (index == 9)
   176b4:	2a09      	cmp	r2, #9
   176b6:	d128      	bne.n	1770a <cosem_setLimiter+0x1c4>
        va_clear(&object->emergencyProfileGroupIDs);
   176b8:	3564      	adds	r5, #100	; 0x64
   176ba:	4628      	mov	r0, r5
   176bc:	f003 feee 	bl	1b49c <va_clear>
        if (value->Arr != NULL)
   176c0:	68b3      	ldr	r3, [r6, #8]
   176c2:	2b00      	cmp	r3, #0
   176c4:	f43f af7e 	beq.w	175c4 <cosem_setLimiter+0x7e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   176c8:	2700      	movs	r7, #0
   176ca:	e019      	b.n	17700 <cosem_setLimiter+0x1ba>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   176cc:	aa01      	add	r2, sp, #4
   176ce:	4639      	mov	r1, r7
   176d0:	f003 ff87 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   176d4:	4604      	mov	r4, r0
   176d6:	2800      	cmp	r0, #0
   176d8:	d18c      	bne.n	175f4 <cosem_setLimiter+0xae>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   176da:	2010      	movs	r0, #16
   176dc:	f7f5 f8c2 	bl	c864 <malloc>
   176e0:	9002      	str	r0, [sp, #8]
                var_init(tmp3);
   176e2:	f003 fda4 	bl	1b22e <var_init>
                ret = var_copy(tmp3, tmp);
   176e6:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
   176ea:	f7ec ff5b 	bl	45a4 <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   176ee:	4604      	mov	r4, r0
   176f0:	2800      	cmp	r0, #0
   176f2:	f47f af7f 	bne.w	175f4 <cosem_setLimiter+0xae>
                va_push(&object->emergencyProfileGroupIDs, tmp3);
   176f6:	9902      	ldr	r1, [sp, #8]
   176f8:	4628      	mov	r0, r5
   176fa:	f003 fea6 	bl	1b44a <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   176fe:	3701      	adds	r7, #1
   17700:	68b0      	ldr	r0, [r6, #8]
   17702:	88c3      	ldrh	r3, [r0, #6]
   17704:	42bb      	cmp	r3, r7
   17706:	d1e1      	bne.n	176cc <cosem_setLimiter+0x186>
   17708:	e75c      	b.n	175c4 <cosem_setLimiter+0x7e>
    else if (index == 10)
   1770a:	2a0a      	cmp	r2, #10
   1770c:	d103      	bne.n	17716 <cosem_setLimiter+0x1d0>
        object->emergencyProfileActive = value->boolVal;
   1770e:	7a1b      	ldrb	r3, [r3, #8]
   17710:	f881 306c 	strb.w	r3, [r1, #108]	; 0x6c
   17714:	e756      	b.n	175c4 <cosem_setLimiter+0x7e>
    else if (index == 11)
   17716:	2a0b      	cmp	r2, #11
   17718:	f040 809a 	bne.w	17850 <cosem_setLimiter+0x30a>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1771c:	6898      	ldr	r0, [r3, #8]
   1771e:	aa01      	add	r2, sp, #4
   17720:	2100      	movs	r1, #0
   17722:	f003 ff5e 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17726:	4604      	mov	r4, r0
   17728:	2800      	cmp	r0, #0
   1772a:	f47f af63 	bne.w	175f4 <cosem_setLimiter+0xae>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   1772e:	9b01      	ldr	r3, [sp, #4]
   17730:	4601      	mov	r1, r0
   17732:	aa02      	add	r2, sp, #8
   17734:	6898      	ldr	r0, [r3, #8]
   17736:	f003 ff54 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1773a:	4604      	mov	r4, r0
   1773c:	2800      	cmp	r0, #0
   1773e:	f47f af59 	bne.w	175f4 <cosem_setLimiter+0xae>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp3->byteArr->data, (gxObject**)&object->actionOverThreshold.script)) != 0)
   17742:	9b02      	ldr	r3, [sp, #8]
   17744:	689a      	ldr	r2, [r3, #8]
   17746:	f107 0898 	add.w	r8, r7, #152	; 0x98
   1774a:	f105 0970 	add.w	r9, r5, #112	; 0x70
   1774e:	6812      	ldr	r2, [r2, #0]
   17750:	464b      	mov	r3, r9
   17752:	2109      	movs	r1, #9
   17754:	4640      	mov	r0, r8
   17756:	f003 fd01 	bl	1b15c <oa_findByLN>
   1775a:	4604      	mov	r4, r0
   1775c:	2800      	cmp	r0, #0
   1775e:	f47f af49 	bne.w	175f4 <cosem_setLimiter+0xae>
        if (object->actionOverThreshold.script == NULL)
   17762:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   17764:	2b00      	cmp	r3, #0
   17766:	d041      	beq.n	177ec <cosem_setLimiter+0x2a6>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17768:	9b01      	ldr	r3, [sp, #4]
   1776a:	aa02      	add	r2, sp, #8
   1776c:	6898      	ldr	r0, [r3, #8]
   1776e:	2101      	movs	r1, #1
   17770:	f003 ff37 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17774:	4604      	mov	r4, r0
   17776:	2800      	cmp	r0, #0
   17778:	f47f af3c 	bne.w	175f4 <cosem_setLimiter+0xae>
        object->actionOverThreshold.scriptSelector = (uint16_t)var_toInteger(tmp3);
   1777c:	9802      	ldr	r0, [sp, #8]
   1777e:	f004 f8aa 	bl	1b8d6 <var_toInteger>
   17782:	f8a5 0074 	strh.w	r0, [r5, #116]	; 0x74
        ret = va_getByIndex(value->Arr, 1, &tmp);
   17786:	68b0      	ldr	r0, [r6, #8]
   17788:	aa01      	add	r2, sp, #4
   1778a:	2101      	movs	r1, #1
   1778c:	f003 ff29 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17790:	4604      	mov	r4, r0
   17792:	2800      	cmp	r0, #0
   17794:	f47f af2e 	bne.w	175f4 <cosem_setLimiter+0xae>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17798:	9b01      	ldr	r3, [sp, #4]
   1779a:	4601      	mov	r1, r0
   1779c:	aa02      	add	r2, sp, #8
   1779e:	6898      	ldr	r0, [r3, #8]
   177a0:	f003 ff1f 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   177a4:	4604      	mov	r4, r0
   177a6:	2800      	cmp	r0, #0
   177a8:	f47f af24 	bne.w	175f4 <cosem_setLimiter+0xae>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp3->byteArr->data, (gxObject**)&object->actionUnderThreshold.script)) != 0)
   177ac:	9b02      	ldr	r3, [sp, #8]
   177ae:	689a      	ldr	r2, [r3, #8]
   177b0:	f105 0678 	add.w	r6, r5, #120	; 0x78
   177b4:	6812      	ldr	r2, [r2, #0]
   177b6:	4633      	mov	r3, r6
   177b8:	2109      	movs	r1, #9
   177ba:	4640      	mov	r0, r8
   177bc:	f003 fcce 	bl	1b15c <oa_findByLN>
   177c0:	4604      	mov	r4, r0
   177c2:	2800      	cmp	r0, #0
   177c4:	f47f af16 	bne.w	175f4 <cosem_setLimiter+0xae>
        if (object->actionUnderThreshold.script == NULL)
   177c8:	6fab      	ldr	r3, [r5, #120]	; 0x78
   177ca:	b343      	cbz	r3, 1781e <cosem_setLimiter+0x2d8>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   177cc:	9b01      	ldr	r3, [sp, #4]
   177ce:	aa02      	add	r2, sp, #8
   177d0:	6898      	ldr	r0, [r3, #8]
   177d2:	2101      	movs	r1, #1
   177d4:	f003 ff05 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   177d8:	4604      	mov	r4, r0
   177da:	2800      	cmp	r0, #0
   177dc:	f47f af0a 	bne.w	175f4 <cosem_setLimiter+0xae>
        object->actionUnderThreshold.scriptSelector = (uint16_t)var_toInteger(tmp3);
   177e0:	9802      	ldr	r0, [sp, #8]
   177e2:	f004 f878 	bl	1b8d6 <var_toInteger>
   177e6:	f8a5 007c 	strh.w	r0, [r5, #124]	; 0x7c
   177ea:	e703      	b.n	175f4 <cosem_setLimiter+0xae>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->actionOverThreshold.script)) != 0)
   177ec:	4649      	mov	r1, r9
   177ee:	2009      	movs	r0, #9
   177f0:	f7ea fc8a 	bl	2108 <cosem_createObject>
   177f4:	4604      	mov	r4, r0
   177f6:	2800      	cmp	r0, #0
   177f8:	f47f aefc 	bne.w	175f4 <cosem_setLimiter+0xae>
            memcpy(object->actionOverThreshold.script->base.logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   177fc:	9b02      	ldr	r3, [sp, #8]
   177fe:	6f28      	ldr	r0, [r5, #112]	; 0x70
   17800:	689b      	ldr	r3, [r3, #8]
   17802:	3006      	adds	r0, #6
   17804:	6819      	ldr	r1, [r3, #0]
   17806:	88da      	ldrh	r2, [r3, #6]
   17808:	f006 f842 	bl	1d890 <memcpy>
            ret = oa_push(&settings->releasedObjects, (gxObject*)object->actionOverThreshold.script);
   1780c:	6f29      	ldr	r1, [r5, #112]	; 0x70
   1780e:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   17812:	f003 fc14 	bl	1b03e <oa_push>
            if (ret != DLMS_ERROR_CODE_OK)
   17816:	4604      	mov	r4, r0
   17818:	2800      	cmp	r0, #0
   1781a:	d0a5      	beq.n	17768 <cosem_setLimiter+0x222>
   1781c:	e6ea      	b.n	175f4 <cosem_setLimiter+0xae>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->actionUnderThreshold.script)) != 0)
   1781e:	4631      	mov	r1, r6
   17820:	2009      	movs	r0, #9
   17822:	f7ea fc71 	bl	2108 <cosem_createObject>
   17826:	4604      	mov	r4, r0
   17828:	2800      	cmp	r0, #0
   1782a:	f47f aee3 	bne.w	175f4 <cosem_setLimiter+0xae>
            memcpy(object->actionUnderThreshold.script->base.logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   1782e:	9b02      	ldr	r3, [sp, #8]
   17830:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   17832:	689b      	ldr	r3, [r3, #8]
   17834:	3006      	adds	r0, #6
   17836:	6819      	ldr	r1, [r3, #0]
   17838:	88da      	ldrh	r2, [r3, #6]
   1783a:	f006 f829 	bl	1d890 <memcpy>
            ret = oa_push(&settings->releasedObjects, (gxObject*)object->actionUnderThreshold.script);
   1783e:	6fa9      	ldr	r1, [r5, #120]	; 0x78
   17840:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   17844:	f003 fbfb 	bl	1b03e <oa_push>
            if (ret != DLMS_ERROR_CODE_OK)
   17848:	4604      	mov	r4, r0
   1784a:	2800      	cmp	r0, #0
   1784c:	d0be      	beq.n	177cc <cosem_setLimiter+0x286>
   1784e:	e6d1      	b.n	175f4 <cosem_setLimiter+0xae>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17850:	f44f 7481 	mov.w	r4, #258	; 0x102
   17854:	e6ce      	b.n	175f4 <cosem_setLimiter+0xae>

00017856 <cosem_setmMbusClient>:
    if (index == 2)
   17856:	2a02      	cmp	r2, #2
{
   17858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1785c:	4607      	mov	r7, r0
   1785e:	460d      	mov	r5, r1
   17860:	461e      	mov	r6, r3
    if (index == 2)
   17862:	d123      	bne.n	178ac <cosem_setmMbusClient+0x56>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP, value->byteArr->data, &object->mBusPort)) != 0)
   17864:	689a      	ldr	r2, [r3, #8]
   17866:	f101 0818 	add.w	r8, r1, #24
   1786a:	6812      	ldr	r2, [r2, #0]
   1786c:	4643      	mov	r3, r8
   1786e:	214a      	movs	r1, #74	; 0x4a
   17870:	3098      	adds	r0, #152	; 0x98
   17872:	f003 fc73 	bl	1b15c <oa_findByLN>
   17876:	4604      	mov	r4, r0
   17878:	b9a0      	cbnz	r0, 178a4 <cosem_setmMbusClient+0x4e>
        if (object->mBusPort == NULL)
   1787a:	69ab      	ldr	r3, [r5, #24]
   1787c:	b993      	cbnz	r3, 178a4 <cosem_setmMbusClient+0x4e>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP, &object->mBusPort)) != 0)
   1787e:	4641      	mov	r1, r8
   17880:	204a      	movs	r0, #74	; 0x4a
   17882:	f7ea fc41 	bl	2108 <cosem_createObject>
   17886:	4604      	mov	r4, r0
   17888:	b960      	cbnz	r0, 178a4 <cosem_setmMbusClient+0x4e>
            memcpy(object->mBusPort->logicalName, value->byteArr->data, value->byteArr->size);
   1788a:	68b3      	ldr	r3, [r6, #8]
   1788c:	69a8      	ldr	r0, [r5, #24]
   1788e:	6819      	ldr	r1, [r3, #0]
   17890:	88da      	ldrh	r2, [r3, #6]
   17892:	3006      	adds	r0, #6
   17894:	f005 fffc 	bl	1d890 <memcpy>
            ret = oa_push(&settings->releasedObjects, object->mBusPort);
   17898:	69a9      	ldr	r1, [r5, #24]
   1789a:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1789e:	f003 fbce 	bl	1b03e <oa_push>
   178a2:	4604      	mov	r4, r0
}
   178a4:	4620      	mov	r0, r4
   178a6:	b003      	add	sp, #12
   178a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   178ac:	2a03      	cmp	r2, #3
   178ae:	d155      	bne.n	1795c <cosem_setmMbusClient+0x106>
        arr_clearKeyValuePair(&object->captureDefinition);
   178b0:	351c      	adds	r5, #28
   178b2:	4628      	mov	r0, r5
   178b4:	f7f9 fc3a 	bl	1112c <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   178b8:	68b3      	ldr	r3, [r6, #8]
   178ba:	2b00      	cmp	r3, #0
   178bc:	d14b      	bne.n	17956 <cosem_setmMbusClient+0x100>
    int ret = DLMS_ERROR_CODE_OK, pos;
   178be:	2400      	movs	r4, #0
        object->encryptionKeyStatus = (DLMS_MBUS_ENCRYPTION_KEY_STATUS)var_toInteger(value);
   178c0:	e7f0      	b.n	178a4 <cosem_setmMbusClient+0x4e>
                bb_set(end, tmp3->byteArr->data, tmp3->byteArr->size);
   178c2:	9b01      	ldr	r3, [sp, #4]
   178c4:	689b      	ldr	r3, [r3, #8]
   178c6:	4648      	mov	r0, r9
   178c8:	6819      	ldr	r1, [r3, #0]
   178ca:	88da      	ldrh	r2, [r3, #6]
   178cc:	f7f6 f93d 	bl	db4a <bb_set>
                arr_push(&object->captureDefinition, key_init(start, end));
   178d0:	4649      	mov	r1, r9
   178d2:	4638      	mov	r0, r7
   178d4:	f7fc fee5 	bl	146a2 <key_init>
   178d8:	4601      	mov	r1, r0
   178da:	4628      	mov	r0, r5
   178dc:	f7f9 fbd8 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   178e0:	f108 0801 	add.w	r8, r8, #1
   178e4:	68b0      	ldr	r0, [r6, #8]
   178e6:	88c3      	ldrh	r3, [r0, #6]
   178e8:	4543      	cmp	r3, r8
   178ea:	d0e8      	beq.n	178be <cosem_setmMbusClient+0x68>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   178ec:	466a      	mov	r2, sp
   178ee:	4641      	mov	r1, r8
   178f0:	f003 fe77 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   178f4:	4604      	mov	r4, r0
   178f6:	2800      	cmp	r0, #0
   178f8:	d1d4      	bne.n	178a4 <cosem_setmMbusClient+0x4e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   178fa:	9b00      	ldr	r3, [sp, #0]
   178fc:	4601      	mov	r1, r0
   178fe:	aa01      	add	r2, sp, #4
   17900:	6898      	ldr	r0, [r3, #8]
   17902:	f003 fe6e 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17906:	4604      	mov	r4, r0
   17908:	2800      	cmp	r0, #0
   1790a:	d1cb      	bne.n	178a4 <cosem_setmMbusClient+0x4e>
                start = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1790c:	200c      	movs	r0, #12
   1790e:	f7f4 ffa9 	bl	c864 <malloc>
   17912:	4607      	mov	r7, r0
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   17914:	200c      	movs	r0, #12
   17916:	f7f4 ffa5 	bl	c864 <malloc>
   1791a:	4681      	mov	r9, r0
                BYTE_BUFFER_INIT(start);
   1791c:	4638      	mov	r0, r7
   1791e:	f7f5 ffc5 	bl	d8ac <bb_init>
                BYTE_BUFFER_INIT(end);
   17922:	4648      	mov	r0, r9
   17924:	f7f5 ffc2 	bl	d8ac <bb_init>
                bb_set(start, tmp3->byteArr->data, tmp3->byteArr->size);
   17928:	9b01      	ldr	r3, [sp, #4]
   1792a:	689b      	ldr	r3, [r3, #8]
   1792c:	4638      	mov	r0, r7
   1792e:	88da      	ldrh	r2, [r3, #6]
   17930:	6819      	ldr	r1, [r3, #0]
   17932:	f7f6 f90a 	bl	db4a <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17936:	9b00      	ldr	r3, [sp, #0]
   17938:	aa01      	add	r2, sp, #4
   1793a:	6898      	ldr	r0, [r3, #8]
   1793c:	2101      	movs	r1, #1
   1793e:	f003 fe50 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17942:	4604      	mov	r4, r0
   17944:	2800      	cmp	r0, #0
   17946:	d0bc      	beq.n	178c2 <cosem_setmMbusClient+0x6c>
                    gxfree(start);
   17948:	4638      	mov	r0, r7
   1794a:	f7f4 ff93 	bl	c874 <free>
                    gxfree(end);
   1794e:	4648      	mov	r0, r9
   17950:	f7f4 ff90 	bl	c874 <free>
                    break;
   17954:	e7a6      	b.n	178a4 <cosem_setmMbusClient+0x4e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17956:	f04f 0800 	mov.w	r8, #0
   1795a:	e7c3      	b.n	178e4 <cosem_setmMbusClient+0x8e>
    else if (index == 4)
   1795c:	2a04      	cmp	r2, #4
   1795e:	d104      	bne.n	1796a <cosem_setmMbusClient+0x114>
        object->capturePeriod = var_toInteger(value);
   17960:	4618      	mov	r0, r3
   17962:	f003 ffb8 	bl	1b8d6 <var_toInteger>
   17966:	6128      	str	r0, [r5, #16]
   17968:	e7a9      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 5)
   1796a:	2a05      	cmp	r2, #5
   1796c:	d104      	bne.n	17978 <cosem_setmMbusClient+0x122>
        object->primaryAddress = (unsigned char)var_toInteger(value);
   1796e:	4618      	mov	r0, r3
   17970:	f003 ffb1 	bl	1b8d6 <var_toInteger>
   17974:	7528      	strb	r0, [r5, #20]
   17976:	e7a2      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 6)
   17978:	2a06      	cmp	r2, #6
   1797a:	d104      	bne.n	17986 <cosem_setmMbusClient+0x130>
        object->identificationNumber = var_toInteger(value);
   1797c:	4618      	mov	r0, r3
   1797e:	f003 ffaa 	bl	1b8d6 <var_toInteger>
   17982:	62a8      	str	r0, [r5, #40]	; 0x28
   17984:	e79b      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 7)
   17986:	2a07      	cmp	r2, #7
   17988:	d104      	bne.n	17994 <cosem_setmMbusClient+0x13e>
        object->manufacturerID = (uint16_t)var_toInteger(value);
   1798a:	4618      	mov	r0, r3
   1798c:	f003 ffa3 	bl	1b8d6 <var_toInteger>
   17990:	85a8      	strh	r0, [r5, #44]	; 0x2c
   17992:	e794      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 8)
   17994:	2a08      	cmp	r2, #8
   17996:	d105      	bne.n	179a4 <cosem_setmMbusClient+0x14e>
        object->dataHeaderVersion = (unsigned char)var_toInteger(value);
   17998:	4618      	mov	r0, r3
   1799a:	f003 ff9c 	bl	1b8d6 <var_toInteger>
   1799e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   179a2:	e78c      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 9)
   179a4:	2a09      	cmp	r2, #9
   179a6:	d105      	bne.n	179b4 <cosem_setmMbusClient+0x15e>
        object->deviceType = (unsigned char)var_toInteger(value);
   179a8:	4618      	mov	r0, r3
   179aa:	f003 ff94 	bl	1b8d6 <var_toInteger>
   179ae:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   179b2:	e784      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 10)
   179b4:	2a0a      	cmp	r2, #10
   179b6:	d105      	bne.n	179c4 <cosem_setmMbusClient+0x16e>
        object->accessNumber = (unsigned char)var_toInteger(value);
   179b8:	4618      	mov	r0, r3
   179ba:	f003 ff8c 	bl	1b8d6 <var_toInteger>
   179be:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
   179c2:	e77c      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 11)
   179c4:	2a0b      	cmp	r2, #11
   179c6:	d105      	bne.n	179d4 <cosem_setmMbusClient+0x17e>
        object->status = (unsigned char)var_toInteger(value);
   179c8:	4618      	mov	r0, r3
   179ca:	f003 ff84 	bl	1b8d6 <var_toInteger>
   179ce:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
   179d2:	e774      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 12)
   179d4:	2a0c      	cmp	r2, #12
   179d6:	d105      	bne.n	179e4 <cosem_setmMbusClient+0x18e>
        object->alarm = (unsigned char)var_toInteger(value);
   179d8:	4618      	mov	r0, r3
   179da:	f003 ff7c 	bl	1b8d6 <var_toInteger>
   179de:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
   179e2:	e76c      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 13 && object->base.version != 0)
   179e4:	2a0d      	cmp	r2, #13
   179e6:	d106      	bne.n	179f6 <cosem_setmMbusClient+0x1a0>
   179e8:	788b      	ldrb	r3, [r1, #2]
   179ea:	b173      	cbz	r3, 17a0a <cosem_setmMbusClient+0x1b4>
        object->configuration = (uint16_t)var_toInteger(value);
   179ec:	4630      	mov	r0, r6
   179ee:	f003 ff72 	bl	1b8d6 <var_toInteger>
   179f2:	86a8      	strh	r0, [r5, #52]	; 0x34
   179f4:	e763      	b.n	178be <cosem_setmMbusClient+0x68>
    else if (index == 14 && object->base.version != 0)
   179f6:	2a0e      	cmp	r2, #14
   179f8:	d107      	bne.n	17a0a <cosem_setmMbusClient+0x1b4>
   179fa:	788b      	ldrb	r3, [r1, #2]
   179fc:	b12b      	cbz	r3, 17a0a <cosem_setmMbusClient+0x1b4>
        object->encryptionKeyStatus = (DLMS_MBUS_ENCRYPTION_KEY_STATUS)var_toInteger(value);
   179fe:	4630      	mov	r0, r6
   17a00:	f003 ff69 	bl	1b8d6 <var_toInteger>
   17a04:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
   17a08:	e759      	b.n	178be <cosem_setmMbusClient+0x68>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17a0a:	f44f 7481 	mov.w	r4, #258	; 0x102
   17a0e:	e749      	b.n	178a4 <cosem_setmMbusClient+0x4e>

00017a10 <cosem_setModemConfiguration>:
    if (index == 2)
   17a10:	2902      	cmp	r1, #2
{
   17a12:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17a16:	4605      	mov	r5, r0
   17a18:	4616      	mov	r6, r2
    if (index == 2)
   17a1a:	d109      	bne.n	17a30 <cosem_setModemConfiguration+0x20>
        object->communicationSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   17a1c:	4610      	mov	r0, r2
   17a1e:	f003 ff5a 	bl	1b8d6 <var_toInteger>
   17a22:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    int ret = 0, pos;
   17a26:	2400      	movs	r4, #0
}
   17a28:	4620      	mov	r0, r4
   17a2a:	b003      	add	sp, #12
   17a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   17a30:	2903      	cmp	r1, #3
   17a32:	d157      	bne.n	17ae4 <cosem_setModemConfiguration+0xd4>
        obj_clearModemConfigurationInitialisationStrings(&object->initialisationStrings);
   17a34:	3510      	adds	r5, #16
   17a36:	4628      	mov	r0, r5
   17a38:	f7fc ff2e 	bl	14898 <obj_clearModemConfigurationInitialisationStrings>
        if (value->Arr != NULL)
   17a3c:	68b3      	ldr	r3, [r6, #8]
   17a3e:	2b00      	cmp	r3, #0
   17a40:	d0f1      	beq.n	17a26 <cosem_setModemConfiguration+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17a42:	f04f 0800 	mov.w	r8, #0
   17a46:	e048      	b.n	17ada <cosem_setModemConfiguration+0xca>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17a48:	466a      	mov	r2, sp
   17a4a:	4641      	mov	r1, r8
   17a4c:	f003 fdc9 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17a50:	4604      	mov	r4, r0
   17a52:	2800      	cmp	r0, #0
   17a54:	d1e8      	bne.n	17a28 <cosem_setModemConfiguration+0x18>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17a56:	9b00      	ldr	r3, [sp, #0]
   17a58:	4601      	mov	r1, r0
   17a5a:	aa01      	add	r2, sp, #4
   17a5c:	6898      	ldr	r0, [r3, #8]
   17a5e:	f003 fdc0 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17a62:	4604      	mov	r4, r0
   17a64:	2800      	cmp	r0, #0
   17a66:	d1df      	bne.n	17a28 <cosem_setModemConfiguration+0x18>
                modemInit = (gxModemInitialisation*)gxmalloc(sizeof(gxModemInitialisation));
   17a68:	201c      	movs	r0, #28
   17a6a:	f7f4 fefb 	bl	c864 <malloc>
                if (modemInit == NULL)
   17a6e:	4607      	mov	r7, r0
   17a70:	2800      	cmp	r0, #0
   17a72:	d065      	beq.n	17b40 <cosem_setModemConfiguration+0x130>
                BYTE_BUFFER_INIT(&modemInit->response);
   17a74:	f107 090c 	add.w	r9, r7, #12
                BYTE_BUFFER_INIT(&modemInit->request);
   17a78:	f7f5 ff18 	bl	d8ac <bb_init>
                BYTE_BUFFER_INIT(&modemInit->response);
   17a7c:	4648      	mov	r0, r9
   17a7e:	f7f5 ff15 	bl	d8ac <bb_init>
                bb_set(&modemInit->request, tmp3->byteArr->data, tmp3->byteArr->size);
   17a82:	9b01      	ldr	r3, [sp, #4]
   17a84:	689b      	ldr	r3, [r3, #8]
   17a86:	4638      	mov	r0, r7
   17a88:	88da      	ldrh	r2, [r3, #6]
   17a8a:	6819      	ldr	r1, [r3, #0]
   17a8c:	f7f6 f85d 	bl	db4a <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17a90:	9b00      	ldr	r3, [sp, #0]
   17a92:	aa01      	add	r2, sp, #4
   17a94:	6898      	ldr	r0, [r3, #8]
   17a96:	2101      	movs	r1, #1
   17a98:	f003 fda3 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17a9c:	4604      	mov	r4, r0
   17a9e:	2800      	cmp	r0, #0
   17aa0:	d1c2      	bne.n	17a28 <cosem_setModemConfiguration+0x18>
                bb_set(&modemInit->response, tmp3->byteArr->data, tmp3->byteArr->size);
   17aa2:	9b01      	ldr	r3, [sp, #4]
   17aa4:	689b      	ldr	r3, [r3, #8]
   17aa6:	4648      	mov	r0, r9
   17aa8:	88da      	ldrh	r2, [r3, #6]
   17aaa:	6819      	ldr	r1, [r3, #0]
   17aac:	f7f6 f84d 	bl	db4a <bb_set>
                if (tmp->Arr->size > 2)
   17ab0:	9b00      	ldr	r3, [sp, #0]
   17ab2:	6898      	ldr	r0, [r3, #8]
   17ab4:	88c3      	ldrh	r3, [r0, #6]
   17ab6:	2b02      	cmp	r3, #2
   17ab8:	d909      	bls.n	17ace <cosem_setModemConfiguration+0xbe>
                    ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17aba:	aa01      	add	r2, sp, #4
   17abc:	2102      	movs	r1, #2
   17abe:	f003 fd90 	bl	1b5e2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   17ac2:	4604      	mov	r4, r0
   17ac4:	2800      	cmp	r0, #0
   17ac6:	d1af      	bne.n	17a28 <cosem_setModemConfiguration+0x18>
                    modemInit->delay = tmp3->uiVal;
   17ac8:	9b01      	ldr	r3, [sp, #4]
   17aca:	891b      	ldrh	r3, [r3, #8]
   17acc:	833b      	strh	r3, [r7, #24]
                arr_push(&object->initialisationStrings, modemInit);
   17ace:	4639      	mov	r1, r7
   17ad0:	4628      	mov	r0, r5
   17ad2:	f7f9 fadd 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17ad6:	f108 0801 	add.w	r8, r8, #1
   17ada:	68b0      	ldr	r0, [r6, #8]
   17adc:	88c3      	ldrh	r3, [r0, #6]
   17ade:	4543      	cmp	r3, r8
   17ae0:	d1b2      	bne.n	17a48 <cosem_setModemConfiguration+0x38>
   17ae2:	e7a0      	b.n	17a26 <cosem_setModemConfiguration+0x16>
    else if (index == 4)
   17ae4:	2904      	cmp	r1, #4
   17ae6:	d12e      	bne.n	17b46 <cosem_setModemConfiguration+0x136>
        arr_clearStrings(&object->modemProfile);
   17ae8:	351c      	adds	r5, #28
   17aea:	4628      	mov	r0, r5
   17aec:	f7f9 fb3c 	bl	11168 <arr_clearStrings>
        if (value->Arr != NULL)
   17af0:	68b3      	ldr	r3, [r6, #8]
   17af2:	2b00      	cmp	r3, #0
   17af4:	d097      	beq.n	17a26 <cosem_setModemConfiguration+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17af6:	2700      	movs	r7, #0
   17af8:	e01d      	b.n	17b36 <cosem_setModemConfiguration+0x126>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17afa:	466a      	mov	r2, sp
   17afc:	4639      	mov	r1, r7
   17afe:	f003 fd70 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17b02:	4604      	mov	r4, r0
   17b04:	2800      	cmp	r0, #0
   17b06:	d18f      	bne.n	17a28 <cosem_setModemConfiguration+0x18>
                str = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   17b08:	200c      	movs	r0, #12
   17b0a:	f7f4 feab 	bl	c864 <malloc>
   17b0e:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(str);
   17b10:	f7f5 fecc 	bl	d8ac <bb_init>
                bb_set2(str, tmp->byteArr, 0, bb_size(tmp->byteArr));
   17b14:	9b00      	ldr	r3, [sp, #0]
   17b16:	f8d3 9008 	ldr.w	r9, [r3, #8]
   17b1a:	4648      	mov	r0, r9
   17b1c:	f7f5 fec3 	bl	d8a6 <bb_size>
   17b20:	4622      	mov	r2, r4
   17b22:	4603      	mov	r3, r0
   17b24:	4649      	mov	r1, r9
   17b26:	4640      	mov	r0, r8
   17b28:	f7f6 f83e 	bl	dba8 <bb_set2>
                arr_push(&object->modemProfile, str);
   17b2c:	4641      	mov	r1, r8
   17b2e:	4628      	mov	r0, r5
   17b30:	f7f9 faae 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17b34:	3701      	adds	r7, #1
   17b36:	68b0      	ldr	r0, [r6, #8]
   17b38:	88c3      	ldrh	r3, [r0, #6]
   17b3a:	42bb      	cmp	r3, r7
   17b3c:	d1dd      	bne.n	17afa <cosem_setModemConfiguration+0xea>
   17b3e:	e772      	b.n	17a26 <cosem_setModemConfiguration+0x16>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17b40:	f44f 7482 	mov.w	r4, #260	; 0x104
   17b44:	e770      	b.n	17a28 <cosem_setModemConfiguration+0x18>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17b46:	f44f 7481 	mov.w	r4, #258	; 0x102
   17b4a:	e76d      	b.n	17a28 <cosem_setModemConfiguration+0x18>

00017b4c <cosem_setPppSetup>:
    if (index == 2)
   17b4c:	2a02      	cmp	r2, #2
{
   17b4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17b52:	460d      	mov	r5, r1
   17b54:	461f      	mov	r7, r3
    if (index == 2)
   17b56:	d112      	bne.n	17b7e <cosem_setPppSetup+0x32>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_NONE, value->byteArr->data, &object->phy)) != 0)
   17b58:	689a      	ldr	r2, [r3, #8]
   17b5a:	3098      	adds	r0, #152	; 0x98
   17b5c:	f101 031c 	add.w	r3, r1, #28
   17b60:	6812      	ldr	r2, [r2, #0]
   17b62:	2100      	movs	r1, #0
   17b64:	f003 fafa 	bl	1b15c <oa_findByLN>
   17b68:	4604      	mov	r4, r0
   17b6a:	b920      	cbnz	r0, 17b76 <cosem_setPppSetup+0x2a>
        if (object->phy == NULL)
   17b6c:	69eb      	ldr	r3, [r5, #28]
   17b6e:	2b00      	cmp	r3, #0
   17b70:	f000 80fd 	beq.w	17d6e <cosem_setPppSetup+0x222>
    int ret = DLMS_ERROR_CODE_OK, pos;
   17b74:	2400      	movs	r4, #0
}
   17b76:	4620      	mov	r0, r4
   17b78:	b003      	add	sp, #12
   17b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   17b7e:	2a03      	cmp	r2, #3
   17b80:	d154      	bne.n	17c2c <cosem_setPppSetup+0xe0>
        arr_clear(&object->lcpOptions);
   17b82:	3520      	adds	r5, #32
   17b84:	4628      	mov	r0, r5
   17b86:	f7f9 fa98 	bl	110ba <arr_clear>
        if (value->Arr != NULL)
   17b8a:	68bb      	ldr	r3, [r7, #8]
   17b8c:	2b00      	cmp	r3, #0
   17b8e:	d0f1      	beq.n	17b74 <cosem_setPppSetup+0x28>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17b90:	f04f 0800 	mov.w	r8, #0
   17b94:	e045      	b.n	17c22 <cosem_setPppSetup+0xd6>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17b96:	466a      	mov	r2, sp
   17b98:	4641      	mov	r1, r8
   17b9a:	f003 fd22 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17b9e:	4604      	mov	r4, r0
   17ba0:	2800      	cmp	r0, #0
   17ba2:	d1e8      	bne.n	17b76 <cosem_setPppSetup+0x2a>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17ba4:	9b00      	ldr	r3, [sp, #0]
   17ba6:	4601      	mov	r1, r0
   17ba8:	aa01      	add	r2, sp, #4
   17baa:	6898      	ldr	r0, [r3, #8]
   17bac:	f003 fd19 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17bb0:	4604      	mov	r4, r0
   17bb2:	2800      	cmp	r0, #0
   17bb4:	d1df      	bne.n	17b76 <cosem_setPppSetup+0x2a>
                lcpItem = (gxpppSetupLcpOption*)gxmalloc(sizeof(gxpppSetupLcpOption));
   17bb6:	2018      	movs	r0, #24
   17bb8:	f7f4 fe54 	bl	c864 <malloc>
                if (lcpItem == NULL)
   17bbc:	4606      	mov	r6, r0
   17bbe:	2800      	cmp	r0, #0
   17bc0:	f000 80d5 	beq.w	17d6e <cosem_setPppSetup+0x222>
                var_init(&lcpItem->data);
   17bc4:	f100 0908 	add.w	r9, r0, #8
   17bc8:	4648      	mov	r0, r9
   17bca:	f003 fb30 	bl	1b22e <var_init>
                lcpItem->type = (DLMS_PPP_SETUP_LCP_OPTION_TYPE)var_toInteger(tmp3);
   17bce:	9801      	ldr	r0, [sp, #4]
   17bd0:	f003 fe81 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17bd4:	9b00      	ldr	r3, [sp, #0]
                lcpItem->type = (DLMS_PPP_SETUP_LCP_OPTION_TYPE)var_toInteger(tmp3);
   17bd6:	7030      	strb	r0, [r6, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17bd8:	6898      	ldr	r0, [r3, #8]
   17bda:	aa01      	add	r2, sp, #4
   17bdc:	2101      	movs	r1, #1
   17bde:	f003 fd00 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17be2:	4604      	mov	r4, r0
   17be4:	2800      	cmp	r0, #0
   17be6:	f040 80be 	bne.w	17d66 <cosem_setPppSetup+0x21a>
                lcpItem->length = (unsigned char)var_toInteger(tmp3);
   17bea:	9801      	ldr	r0, [sp, #4]
   17bec:	f003 fe73 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17bf0:	9b00      	ldr	r3, [sp, #0]
                lcpItem->length = (unsigned char)var_toInteger(tmp3);
   17bf2:	7070      	strb	r0, [r6, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17bf4:	6898      	ldr	r0, [r3, #8]
   17bf6:	aa01      	add	r2, sp, #4
   17bf8:	2102      	movs	r1, #2
   17bfa:	f003 fcf2 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17bfe:	4604      	mov	r4, r0
   17c00:	2800      	cmp	r0, #0
   17c02:	f040 80b0 	bne.w	17d66 <cosem_setPppSetup+0x21a>
                ret = var_copy(&lcpItem->data, tmp3);
   17c06:	9901      	ldr	r1, [sp, #4]
   17c08:	4648      	mov	r0, r9
   17c0a:	f7ec fccb 	bl	45a4 <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   17c0e:	4604      	mov	r4, r0
   17c10:	2800      	cmp	r0, #0
   17c12:	f040 80a8 	bne.w	17d66 <cosem_setPppSetup+0x21a>
                arr_push(&object->lcpOptions, lcpItem);
   17c16:	4631      	mov	r1, r6
   17c18:	4628      	mov	r0, r5
   17c1a:	f7f9 fa39 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17c1e:	f108 0801 	add.w	r8, r8, #1
   17c22:	68b8      	ldr	r0, [r7, #8]
   17c24:	88c3      	ldrh	r3, [r0, #6]
   17c26:	4543      	cmp	r3, r8
   17c28:	d1b5      	bne.n	17b96 <cosem_setPppSetup+0x4a>
   17c2a:	e7a3      	b.n	17b74 <cosem_setPppSetup+0x28>
    else if (index == 4)
   17c2c:	2a04      	cmp	r2, #4
   17c2e:	d151      	bne.n	17cd4 <cosem_setPppSetup+0x188>
        arr_clear(&object->ipcpOptions);
   17c30:	3510      	adds	r5, #16
   17c32:	4628      	mov	r0, r5
   17c34:	f7f9 fa41 	bl	110ba <arr_clear>
        if (value->Arr != NULL)
   17c38:	68bb      	ldr	r3, [r7, #8]
   17c3a:	2b00      	cmp	r3, #0
   17c3c:	d09a      	beq.n	17b74 <cosem_setPppSetup+0x28>
    gxpppSetupIPCPOption* ipcpItem = NULL;
   17c3e:	2600      	movs	r6, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   17c40:	46b0      	mov	r8, r6
   17c42:	e042      	b.n	17cca <cosem_setPppSetup+0x17e>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17c44:	466a      	mov	r2, sp
   17c46:	4641      	mov	r1, r8
   17c48:	f003 fccb 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17c4c:	4604      	mov	r4, r0
   17c4e:	2800      	cmp	r0, #0
   17c50:	f040 8086 	bne.w	17d60 <cosem_setPppSetup+0x214>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17c54:	9b00      	ldr	r3, [sp, #0]
   17c56:	4601      	mov	r1, r0
   17c58:	aa01      	add	r2, sp, #4
   17c5a:	6898      	ldr	r0, [r3, #8]
   17c5c:	f003 fcc1 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17c60:	4604      	mov	r4, r0
   17c62:	2800      	cmp	r0, #0
   17c64:	d17c      	bne.n	17d60 <cosem_setPppSetup+0x214>
                ipcpItem = (gxpppSetupIPCPOption*)gxmalloc(sizeof(gxpppSetupIPCPOption));
   17c66:	2018      	movs	r0, #24
   17c68:	f7f4 fdfc 	bl	c864 <malloc>
                if (ipcpItem == NULL)
   17c6c:	4606      	mov	r6, r0
   17c6e:	2800      	cmp	r0, #0
   17c70:	d07d      	beq.n	17d6e <cosem_setPppSetup+0x222>
                var_init(&ipcpItem->data);
   17c72:	f100 0908 	add.w	r9, r0, #8
   17c76:	4648      	mov	r0, r9
   17c78:	f003 fad9 	bl	1b22e <var_init>
                ipcpItem->type = (DLMS_PPP_SETUP_IPCP_OPTION_TYPE)var_toInteger(tmp3);
   17c7c:	9801      	ldr	r0, [sp, #4]
   17c7e:	f003 fe2a 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17c82:	9b00      	ldr	r3, [sp, #0]
                ipcpItem->type = (DLMS_PPP_SETUP_IPCP_OPTION_TYPE)var_toInteger(tmp3);
   17c84:	7030      	strb	r0, [r6, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17c86:	6898      	ldr	r0, [r3, #8]
   17c88:	aa01      	add	r2, sp, #4
   17c8a:	2101      	movs	r1, #1
   17c8c:	f003 fca9 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17c90:	4604      	mov	r4, r0
   17c92:	2800      	cmp	r0, #0
   17c94:	d167      	bne.n	17d66 <cosem_setPppSetup+0x21a>
                ipcpItem->length = (unsigned char)var_toInteger(tmp3);
   17c96:	9801      	ldr	r0, [sp, #4]
   17c98:	f003 fe1d 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17c9c:	9b00      	ldr	r3, [sp, #0]
                ipcpItem->length = (unsigned char)var_toInteger(tmp3);
   17c9e:	7070      	strb	r0, [r6, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17ca0:	6898      	ldr	r0, [r3, #8]
   17ca2:	aa01      	add	r2, sp, #4
   17ca4:	2102      	movs	r1, #2
   17ca6:	f003 fc9c 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17caa:	4604      	mov	r4, r0
   17cac:	2800      	cmp	r0, #0
   17cae:	d15a      	bne.n	17d66 <cosem_setPppSetup+0x21a>
                ret = var_copy(&ipcpItem->data, tmp3);
   17cb0:	9901      	ldr	r1, [sp, #4]
   17cb2:	4648      	mov	r0, r9
   17cb4:	f7ec fc76 	bl	45a4 <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   17cb8:	4604      	mov	r4, r0
   17cba:	2800      	cmp	r0, #0
   17cbc:	d153      	bne.n	17d66 <cosem_setPppSetup+0x21a>
                arr_push(&object->ipcpOptions, ipcpItem);
   17cbe:	4631      	mov	r1, r6
   17cc0:	4628      	mov	r0, r5
   17cc2:	f7f9 f9e5 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17cc6:	f108 0801 	add.w	r8, r8, #1
   17cca:	68b8      	ldr	r0, [r7, #8]
   17ccc:	88c3      	ldrh	r3, [r0, #6]
   17cce:	4543      	cmp	r3, r8
   17cd0:	d1b8      	bne.n	17c44 <cosem_setPppSetup+0xf8>
   17cd2:	e74f      	b.n	17b74 <cosem_setPppSetup+0x28>
    else if (index == 5)
   17cd4:	2a05      	cmp	r2, #5
   17cd6:	d140      	bne.n	17d5a <cosem_setPppSetup+0x20e>
        if (value->Arr == NULL || value->Arr->size == 0)
   17cd8:	6898      	ldr	r0, [r3, #8]
   17cda:	b108      	cbz	r0, 17ce0 <cosem_setPppSetup+0x194>
   17cdc:	88c3      	ldrh	r3, [r0, #6]
   17cde:	b943      	cbnz	r3, 17cf2 <cosem_setPppSetup+0x1a6>
            bb_clear(&object->userName);
   17ce0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   17ce4:	f7f5 ffa5 	bl	dc32 <bb_clear>
            bb_clear(&object->password);
   17ce8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   17cec:	f7f5 ffa1 	bl	dc32 <bb_clear>
   17cf0:	e740      	b.n	17b74 <cosem_setPppSetup+0x28>
        else if (value->Arr->size == 2)
   17cf2:	2b02      	cmp	r3, #2
   17cf4:	d131      	bne.n	17d5a <cosem_setPppSetup+0x20e>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   17cf6:	466a      	mov	r2, sp
   17cf8:	2100      	movs	r1, #0
   17cfa:	f003 fc72 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   17cfe:	4604      	mov	r4, r0
   17d00:	2800      	cmp	r0, #0
   17d02:	f47f af38 	bne.w	17b76 <cosem_setPppSetup+0x2a>
            bb_clear(&object->userName);
   17d06:	f105 062c 	add.w	r6, r5, #44	; 0x2c
   17d0a:	4630      	mov	r0, r6
   17d0c:	f7f5 ff91 	bl	dc32 <bb_clear>
            bb_set2(&object->userName, tmp->byteArr, 0, bb_size(tmp->byteArr));
   17d10:	9b00      	ldr	r3, [sp, #0]
   17d12:	f8d3 8008 	ldr.w	r8, [r3, #8]
   17d16:	4640      	mov	r0, r8
   17d18:	f7f5 fdc5 	bl	d8a6 <bb_size>
   17d1c:	4622      	mov	r2, r4
   17d1e:	4603      	mov	r3, r0
   17d20:	4641      	mov	r1, r8
   17d22:	4630      	mov	r0, r6
   17d24:	f7f5 ff40 	bl	dba8 <bb_set2>
            ret = va_getByIndex(value->Arr, 1, &tmp);
   17d28:	68b8      	ldr	r0, [r7, #8]
   17d2a:	466a      	mov	r2, sp
   17d2c:	2101      	movs	r1, #1
   17d2e:	f003 fc58 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   17d32:	4604      	mov	r4, r0
   17d34:	2800      	cmp	r0, #0
   17d36:	f47f af1e 	bne.w	17b76 <cosem_setPppSetup+0x2a>
            bb_clear(&object->password);
   17d3a:	3538      	adds	r5, #56	; 0x38
   17d3c:	4628      	mov	r0, r5
   17d3e:	f7f5 ff78 	bl	dc32 <bb_clear>
            bb_set2(&object->password, tmp->byteArr, 0, bb_size(tmp->byteArr));
   17d42:	9b00      	ldr	r3, [sp, #0]
   17d44:	689e      	ldr	r6, [r3, #8]
   17d46:	4630      	mov	r0, r6
   17d48:	f7f5 fdad 	bl	d8a6 <bb_size>
   17d4c:	4622      	mov	r2, r4
   17d4e:	4603      	mov	r3, r0
   17d50:	4631      	mov	r1, r6
   17d52:	4628      	mov	r0, r5
   17d54:	f7f5 ff28 	bl	dba8 <bb_set2>
   17d58:	e70d      	b.n	17b76 <cosem_setPppSetup+0x2a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17d5a:	f44f 7481 	mov.w	r4, #258	; 0x102
   17d5e:	e70a      	b.n	17b76 <cosem_setPppSetup+0x2a>
            if (ret != 0 && ipcpItem != NULL)
   17d60:	2e00      	cmp	r6, #0
   17d62:	f43f af08 	beq.w	17b76 <cosem_setPppSetup+0x2a>
                gxfree(lcpItem);
   17d66:	4630      	mov	r0, r6
   17d68:	f7f4 fd84 	bl	c874 <free>
   17d6c:	e703      	b.n	17b76 <cosem_setPppSetup+0x2a>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17d6e:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && lcpItem != NULL)
   17d72:	e700      	b.n	17b76 <cosem_setPppSetup+0x2a>

00017d74 <cosem_setRegisterActivation>:
{
   17d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char index = e->index;
   17d78:	7e0b      	ldrb	r3, [r1, #24]
    gxRegisterActivation* object = (gxRegisterActivation*)e->target;
   17d7a:	694d      	ldr	r5, [r1, #20]
    if (index == 2)
   17d7c:	2b02      	cmp	r3, #2
{
   17d7e:	b085      	sub	sp, #20
   17d80:	4680      	mov	r8, r0
   17d82:	460f      	mov	r7, r1
    if (index == 2)
   17d84:	d148      	bne.n	17e18 <cosem_setRegisterActivation+0xa4>
        obj_clearRegisterActivationAssignment(&object->registerAssignment);
   17d86:	3510      	adds	r5, #16
   17d88:	4628      	mov	r0, r5
   17d8a:	f7fc fe1d 	bl	149c8 <obj_clearRegisterActivationAssignment>
        if (value->Arr != NULL)
   17d8e:	68bb      	ldr	r3, [r7, #8]
   17d90:	2b00      	cmp	r3, #0
   17d92:	d13e      	bne.n	17e12 <cosem_setRegisterActivation+0x9e>
    int ret = 0, pos;
   17d94:	2400      	movs	r4, #0
}
   17d96:	4620      	mov	r0, r4
   17d98:	b005      	add	sp, #20
   17d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17d9e:	aa02      	add	r2, sp, #8
   17da0:	4631      	mov	r1, r6
                objectDefinition = NULL;
   17da2:	f8cd 9004 	str.w	r9, [sp, #4]
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17da6:	f003 fc1c 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17daa:	4604      	mov	r4, r0
   17dac:	2800      	cmp	r0, #0
   17dae:	d1f2      	bne.n	17d96 <cosem_setRegisterActivation+0x22>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17db0:	9b02      	ldr	r3, [sp, #8]
   17db2:	4601      	mov	r1, r0
   17db4:	aa03      	add	r2, sp, #12
   17db6:	6898      	ldr	r0, [r3, #8]
   17db8:	f003 fc13 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17dbc:	4604      	mov	r4, r0
   17dbe:	2800      	cmp	r0, #0
   17dc0:	d1e9      	bne.n	17d96 <cosem_setRegisterActivation+0x22>
                type = (short) var_toInteger(tmp3);
   17dc2:	9803      	ldr	r0, [sp, #12]
   17dc4:	f003 fd87 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17dc8:	9b02      	ldr	r3, [sp, #8]
                type = (short) var_toInteger(tmp3);
   17dca:	4682      	mov	sl, r0
   17dcc:	fa0f fb80 	sxth.w	fp, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17dd0:	aa03      	add	r2, sp, #12
   17dd2:	6898      	ldr	r0, [r3, #8]
   17dd4:	2101      	movs	r1, #1
   17dd6:	f003 fc04 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17dda:	4604      	mov	r4, r0
   17ddc:	2800      	cmp	r0, #0
   17dde:	d1da      	bne.n	17d96 <cosem_setRegisterActivation+0x22>
                if (type != 0)
   17de0:	f1bb 0f00 	cmp.w	fp, #0
   17de4:	d00f      	beq.n	17e06 <cosem_setRegisterActivation+0x92>
                unsigned char* ln = tmp3->byteArr->data;
   17de6:	9b03      	ldr	r3, [sp, #12]
   17de8:	689a      	ldr	r2, [r3, #8]
                    if ((ret = cosem_findObjectByLN(settings, type, ln, &objectDefinition)) != 0)
   17dea:	fa1f f18a 	uxth.w	r1, sl
   17dee:	6812      	ldr	r2, [r2, #0]
   17df0:	ab01      	add	r3, sp, #4
   17df2:	4640      	mov	r0, r8
   17df4:	f7ea f9b2 	bl	215c <cosem_findObjectByLN>
   17df8:	4604      	mov	r4, r0
   17dfa:	2800      	cmp	r0, #0
   17dfc:	d1cb      	bne.n	17d96 <cosem_setRegisterActivation+0x22>
                    oa_push(&object->registerAssignment, objectDefinition);
   17dfe:	9901      	ldr	r1, [sp, #4]
   17e00:	4628      	mov	r0, r5
   17e02:	f003 f91c 	bl	1b03e <oa_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17e06:	3601      	adds	r6, #1
   17e08:	68b8      	ldr	r0, [r7, #8]
   17e0a:	88c3      	ldrh	r3, [r0, #6]
   17e0c:	42b3      	cmp	r3, r6
   17e0e:	d1c6      	bne.n	17d9e <cosem_setRegisterActivation+0x2a>
   17e10:	e7c0      	b.n	17d94 <cosem_setRegisterActivation+0x20>
   17e12:	2600      	movs	r6, #0
                objectDefinition = NULL;
   17e14:	46b1      	mov	r9, r6
   17e16:	e7f7      	b.n	17e08 <cosem_setRegisterActivation+0x94>
    else if (index == 3)
   17e18:	2b03      	cmp	r3, #3
   17e1a:	d15b      	bne.n	17ed4 <cosem_setRegisterActivation+0x160>
        obj_clearRegisterActivationMaskList(&object->maskList);
   17e1c:	3518      	adds	r5, #24
   17e1e:	4628      	mov	r0, r5
   17e20:	f7fc fdd7 	bl	149d2 <obj_clearRegisterActivationMaskList>
        if (value->Arr != NULL)
   17e24:	68bb      	ldr	r3, [r7, #8]
   17e26:	2b00      	cmp	r3, #0
   17e28:	d0b4      	beq.n	17d94 <cosem_setRegisterActivation+0x20>
        gxByteBuffer* start = NULL, * end= NULL;
   17e2a:	2600      	movs	r6, #0
   17e2c:	46b0      	mov	r8, r6
            for (pos = 0; pos != value->Arr->size; ++pos)
   17e2e:	46b1      	mov	r9, r6
   17e30:	68b8      	ldr	r0, [r7, #8]
   17e32:	88c3      	ldrh	r3, [r0, #6]
   17e34:	454b      	cmp	r3, r9
   17e36:	d0ad      	beq.n	17d94 <cosem_setRegisterActivation+0x20>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   17e38:	aa02      	add	r2, sp, #8
   17e3a:	4649      	mov	r1, r9
   17e3c:	f003 fbd1 	bl	1b5e2 <va_getByIndex>
   17e40:	4604      	mov	r4, r0
   17e42:	2800      	cmp	r0, #0
   17e44:	d15b      	bne.n	17efe <cosem_setRegisterActivation+0x18a>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17e46:	9b02      	ldr	r3, [sp, #8]
   17e48:	4601      	mov	r1, r0
   17e4a:	aa03      	add	r2, sp, #12
   17e4c:	6898      	ldr	r0, [r3, #8]
   17e4e:	f003 fbc8 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17e52:	4604      	mov	r4, r0
   17e54:	2800      	cmp	r0, #0
   17e56:	d152      	bne.n	17efe <cosem_setRegisterActivation+0x18a>
                start = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   17e58:	200c      	movs	r0, #12
   17e5a:	f7f4 fd03 	bl	c864 <malloc>
   17e5e:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(start);
   17e60:	f7f5 fd24 	bl	d8ac <bb_init>
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   17e64:	200c      	movs	r0, #12
   17e66:	f7f4 fcfd 	bl	c864 <malloc>
   17e6a:	4606      	mov	r6, r0
                BYTE_BUFFER_INIT(end);
   17e6c:	f7f5 fd1e 	bl	d8ac <bb_init>
                bb_set(start, tmp3->byteArr->data, tmp3->byteArr->size);
   17e70:	9b03      	ldr	r3, [sp, #12]
   17e72:	689b      	ldr	r3, [r3, #8]
   17e74:	4640      	mov	r0, r8
   17e76:	88da      	ldrh	r2, [r3, #6]
   17e78:	6819      	ldr	r1, [r3, #0]
   17e7a:	f7f5 fe66 	bl	db4a <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17e7e:	9b02      	ldr	r3, [sp, #8]
   17e80:	aa03      	add	r2, sp, #12
   17e82:	6898      	ldr	r0, [r3, #8]
   17e84:	2101      	movs	r1, #1
   17e86:	f003 fbac 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17e8a:	4604      	mov	r4, r0
   17e8c:	bbb8      	cbnz	r0, 17efe <cosem_setRegisterActivation+0x18a>
                for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   17e8e:	4682      	mov	sl, r0
   17e90:	9b03      	ldr	r3, [sp, #12]
   17e92:	6898      	ldr	r0, [r3, #8]
   17e94:	88c3      	ldrh	r3, [r0, #6]
   17e96:	4553      	cmp	r3, sl
   17e98:	d10a      	bne.n	17eb0 <cosem_setRegisterActivation+0x13c>
                arr_push(&object->maskList, key_init(start, end));
   17e9a:	4631      	mov	r1, r6
   17e9c:	4640      	mov	r0, r8
   17e9e:	f7fc fc00 	bl	146a2 <key_init>
   17ea2:	4601      	mov	r1, r0
   17ea4:	4628      	mov	r0, r5
   17ea6:	f7f9 f8f3 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17eaa:	f109 0901 	add.w	r9, r9, #1
   17eae:	e7bf      	b.n	17e30 <cosem_setRegisterActivation+0xbc>
                    if ((ret = va_getByIndex(tmp3->Arr, pos2, &tmp)) != 0 ||
   17eb0:	aa02      	add	r2, sp, #8
   17eb2:	4651      	mov	r1, sl
   17eb4:	f003 fb95 	bl	1b5e2 <va_getByIndex>
   17eb8:	4604      	mov	r4, r0
   17eba:	bb00      	cbnz	r0, 17efe <cosem_setRegisterActivation+0x18a>
                        (ret = bb_setUInt8(end, (unsigned char)var_toInteger(tmp))) != 0)
   17ebc:	9802      	ldr	r0, [sp, #8]
   17ebe:	f003 fd0a 	bl	1b8d6 <var_toInteger>
   17ec2:	b2c1      	uxtb	r1, r0
   17ec4:	4630      	mov	r0, r6
   17ec6:	f7f5 fd5a 	bl	d97e <bb_setUInt8>
                    if ((ret = va_getByIndex(tmp3->Arr, pos2, &tmp)) != 0 ||
   17eca:	4604      	mov	r4, r0
   17ecc:	b9b8      	cbnz	r0, 17efe <cosem_setRegisterActivation+0x18a>
                for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   17ece:	f10a 0a01 	add.w	sl, sl, #1
   17ed2:	e7dd      	b.n	17e90 <cosem_setRegisterActivation+0x11c>
    else if (index == 4)
   17ed4:	2b04      	cmp	r3, #4
   17ed6:	d10f      	bne.n	17ef8 <cosem_setRegisterActivation+0x184>
        bb_clear(&object->activeMask);
   17ed8:	3524      	adds	r5, #36	; 0x24
   17eda:	4628      	mov	r0, r5
   17edc:	f7f5 fea9 	bl	dc32 <bb_clear>
        ret = bb_set2(&object->activeMask, value->byteArr, 0, bb_size(value->byteArr));
   17ee0:	68bc      	ldr	r4, [r7, #8]
   17ee2:	4620      	mov	r0, r4
   17ee4:	f7f5 fcdf 	bl	d8a6 <bb_size>
   17ee8:	4621      	mov	r1, r4
   17eea:	4603      	mov	r3, r0
   17eec:	2200      	movs	r2, #0
   17eee:	4628      	mov	r0, r5
   17ef0:	f7f5 fe5a 	bl	dba8 <bb_set2>
   17ef4:	4604      	mov	r4, r0
   17ef6:	e74e      	b.n	17d96 <cosem_setRegisterActivation+0x22>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17ef8:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   17efc:	e74b      	b.n	17d96 <cosem_setRegisterActivation+0x22>
                if (start != NULL)
   17efe:	f1b8 0f00 	cmp.w	r8, #0
   17f02:	d002      	beq.n	17f0a <cosem_setRegisterActivation+0x196>
                    gxfree(start);
   17f04:	4640      	mov	r0, r8
   17f06:	f7f4 fcb5 	bl	c874 <free>
                if (end != NULL)
   17f0a:	2e00      	cmp	r6, #0
   17f0c:	f43f af43 	beq.w	17d96 <cosem_setRegisterActivation+0x22>
                    gxfree(end);
   17f10:	4630      	mov	r0, r6
   17f12:	f7f4 fcaf 	bl	c874 <free>
   17f16:	e73e      	b.n	17d96 <cosem_setRegisterActivation+0x22>

00017f18 <cosem_setRegisterMonitor>:
{
   17f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (index == 2)
   17f1c:	2a02      	cmp	r2, #2
{
   17f1e:	b085      	sub	sp, #20
   17f20:	4607      	mov	r7, r0
   17f22:	460d      	mov	r5, r1
   17f24:	461e      	mov	r6, r3
    if (index == 2)
   17f26:	d133      	bne.n	17f90 <cosem_setRegisterMonitor+0x78>
        va_clear(&object->thresholds);
   17f28:	3524      	adds	r5, #36	; 0x24
   17f2a:	4628      	mov	r0, r5
   17f2c:	f003 fab6 	bl	1b49c <va_clear>
        if (value->Arr != NULL)
   17f30:	68b3      	ldr	r3, [r6, #8]
   17f32:	b923      	cbnz	r3, 17f3e <cosem_setRegisterMonitor+0x26>
    int ret = 0, pos;
   17f34:	2400      	movs	r4, #0
}
   17f36:	4620      	mov	r0, r4
   17f38:	b005      	add	sp, #20
   17f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            va_capacity(&object->thresholds, value->Arr->size);
   17f3e:	88d9      	ldrh	r1, [r3, #6]
   17f40:	4628      	mov	r0, r5
   17f42:	f003 fa5a 	bl	1b3fa <va_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17f46:	2700      	movs	r7, #0
                tmp3 = NULL;
   17f48:	46b8      	mov	r8, r7
            for (pos = 0; pos != value->Arr->size; ++pos)
   17f4a:	68b0      	ldr	r0, [r6, #8]
   17f4c:	88c3      	ldrh	r3, [r0, #6]
   17f4e:	42bb      	cmp	r3, r7
   17f50:	d0f0      	beq.n	17f34 <cosem_setRegisterMonitor+0x1c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17f52:	aa01      	add	r2, sp, #4
   17f54:	4639      	mov	r1, r7
                tmp3 = NULL;
   17f56:	f8cd 8008 	str.w	r8, [sp, #8]
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17f5a:	f003 fb42 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17f5e:	4604      	mov	r4, r0
   17f60:	2800      	cmp	r0, #0
   17f62:	d1e8      	bne.n	17f36 <cosem_setRegisterMonitor+0x1e>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   17f64:	2010      	movs	r0, #16
   17f66:	f7f4 fc7d 	bl	c864 <malloc>
   17f6a:	9002      	str	r0, [sp, #8]
                if (tmp3 == NULL)
   17f6c:	2800      	cmp	r0, #0
   17f6e:	f000 8118 	beq.w	181a2 <cosem_setRegisterMonitor+0x28a>
                var_init(tmp3);
   17f72:	f003 f95c 	bl	1b22e <var_init>
                ret = var_copy(tmp3, tmp);
   17f76:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
   17f7a:	f7ec fb13 	bl	45a4 <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   17f7e:	4604      	mov	r4, r0
   17f80:	2800      	cmp	r0, #0
   17f82:	d1d8      	bne.n	17f36 <cosem_setRegisterMonitor+0x1e>
                va_push(&object->thresholds, tmp3);
   17f84:	9902      	ldr	r1, [sp, #8]
   17f86:	4628      	mov	r0, r5
   17f88:	f003 fa5f 	bl	1b44a <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17f8c:	3701      	adds	r7, #1
   17f8e:	e7dc      	b.n	17f4a <cosem_setRegisterMonitor+0x32>
    else if (index == 3)
   17f90:	2a03      	cmp	r2, #3
   17f92:	d148      	bne.n	18026 <cosem_setRegisterMonitor+0x10e>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   17f94:	6898      	ldr	r0, [r3, #8]
   17f96:	aa01      	add	r2, sp, #4
   17f98:	2100      	movs	r1, #0
   17f9a:	f003 fb22 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17f9e:	4604      	mov	r4, r0
   17fa0:	2800      	cmp	r0, #0
   17fa2:	d1c8      	bne.n	17f36 <cosem_setRegisterMonitor+0x1e>
        type = (short) var_toInteger(tmp);
   17fa4:	9801      	ldr	r0, [sp, #4]
   17fa6:	f003 fc96 	bl	1b8d6 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   17faa:	aa01      	add	r2, sp, #4
        type = (short) var_toInteger(tmp);
   17fac:	4680      	mov	r8, r0
        ret = va_getByIndex(value->Arr, 1, &tmp);
   17fae:	2101      	movs	r1, #1
   17fb0:	68b0      	ldr	r0, [r6, #8]
   17fb2:	f003 fb16 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17fb6:	4604      	mov	r4, r0
   17fb8:	2800      	cmp	r0, #0
   17fba:	d1bc      	bne.n	17f36 <cosem_setRegisterMonitor+0x1e>
        if ((ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->monitoredValue.target)) != 0)
   17fbc:	9b01      	ldr	r3, [sp, #4]
   17fbe:	689a      	ldr	r2, [r3, #8]
   17fc0:	fa1f f888 	uxth.w	r8, r8
   17fc4:	f105 091c 	add.w	r9, r5, #28
   17fc8:	6812      	ldr	r2, [r2, #0]
   17fca:	464b      	mov	r3, r9
   17fcc:	4641      	mov	r1, r8
   17fce:	f107 0098 	add.w	r0, r7, #152	; 0x98
   17fd2:	f003 f8c3 	bl	1b15c <oa_findByLN>
   17fd6:	4604      	mov	r4, r0
   17fd8:	2800      	cmp	r0, #0
   17fda:	d1ac      	bne.n	17f36 <cosem_setRegisterMonitor+0x1e>
        if (object->monitoredValue.target == NULL)
   17fdc:	69eb      	ldr	r3, [r5, #28]
   17fde:	b9a3      	cbnz	r3, 1800a <cosem_setRegisterMonitor+0xf2>
            ret = cosem_createObject(type, &object->monitoredValue.target);
   17fe0:	4649      	mov	r1, r9
   17fe2:	4640      	mov	r0, r8
   17fe4:	f7ea f890 	bl	2108 <cosem_createObject>
            if (ret != DLMS_ERROR_CODE_OK)
   17fe8:	4604      	mov	r4, r0
   17fea:	2800      	cmp	r0, #0
   17fec:	d1a3      	bne.n	17f36 <cosem_setRegisterMonitor+0x1e>
            ret = cosem_setLogicalName(object->monitoredValue.target, tmp->byteArr->data);
   17fee:	9b01      	ldr	r3, [sp, #4]
   17ff0:	69e8      	ldr	r0, [r5, #28]
   17ff2:	689b      	ldr	r3, [r3, #8]
   17ff4:	6819      	ldr	r1, [r3, #0]
   17ff6:	f7f6 fa1d 	bl	e434 <cosem_setLogicalName>
            if (ret != DLMS_ERROR_CODE_OK)
   17ffa:	4604      	mov	r4, r0
   17ffc:	2800      	cmp	r0, #0
   17ffe:	d19a      	bne.n	17f36 <cosem_setRegisterMonitor+0x1e>
            ret = oa_push(&settings->releasedObjects, object->monitoredValue.target);
   18000:	69e9      	ldr	r1, [r5, #28]
   18002:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   18006:	f003 f81a 	bl	1b03e <oa_push>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   1800a:	68b0      	ldr	r0, [r6, #8]
   1800c:	aa01      	add	r2, sp, #4
   1800e:	2102      	movs	r1, #2
   18010:	f003 fae7 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18014:	4604      	mov	r4, r0
   18016:	2800      	cmp	r0, #0
   18018:	d18d      	bne.n	17f36 <cosem_setRegisterMonitor+0x1e>
        object->monitoredValue.attributeIndex = (unsigned char)var_toInteger(tmp);
   1801a:	9801      	ldr	r0, [sp, #4]
   1801c:	f003 fc5b 	bl	1b8d6 <var_toInteger>
   18020:	f885 0020 	strb.w	r0, [r5, #32]
   18024:	e787      	b.n	17f36 <cosem_setRegisterMonitor+0x1e>
    else if (index == 4)
   18026:	2a04      	cmp	r2, #4
   18028:	f040 80be 	bne.w	181a8 <cosem_setRegisterMonitor+0x290>
        obj_clearRegisterMonitorActions(&object->actions);
   1802c:	3510      	adds	r5, #16
   1802e:	4628      	mov	r0, r5
   18030:	f7fc fc2d 	bl	1488e <obj_clearRegisterMonitorActions>
        if (value->Arr != NULL)
   18034:	68b3      	ldr	r3, [r6, #8]
   18036:	2b00      	cmp	r3, #0
   18038:	f43f af7c 	beq.w	17f34 <cosem_setRegisterMonitor+0x1c>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1803c:	f04f 0800 	mov.w	r8, #0
   18040:	e0a9      	b.n	18196 <cosem_setRegisterMonitor+0x27e>
                ret = va_getByIndex(value->Arr, pos, &tmp4);
   18042:	aa03      	add	r2, sp, #12
   18044:	4641      	mov	r1, r8
   18046:	f003 facc 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1804a:	4604      	mov	r4, r0
   1804c:	2800      	cmp	r0, #0
   1804e:	f47f af72 	bne.w	17f36 <cosem_setRegisterMonitor+0x1e>
                actionSet = (gxActionSet*)gxmalloc(sizeof(gxActionSet));
   18052:	2010      	movs	r0, #16
   18054:	f7f4 fc06 	bl	c864 <malloc>
                ret = va_getByIndex(tmp4->Arr, 0, &tmp3);
   18058:	9b03      	ldr	r3, [sp, #12]
   1805a:	4621      	mov	r1, r4
                actionSet = (gxActionSet*)gxmalloc(sizeof(gxActionSet));
   1805c:	4681      	mov	r9, r0
                ret = va_getByIndex(tmp4->Arr, 0, &tmp3);
   1805e:	aa02      	add	r2, sp, #8
   18060:	6898      	ldr	r0, [r3, #8]
   18062:	f003 fabe 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18066:	4604      	mov	r4, r0
   18068:	2800      	cmp	r0, #0
   1806a:	f040 80a0 	bne.w	181ae <cosem_setRegisterMonitor+0x296>
                ret = va_getByIndex(tmp3->Arr, 0, &tmp);
   1806e:	9b02      	ldr	r3, [sp, #8]
   18070:	4601      	mov	r1, r0
   18072:	aa01      	add	r2, sp, #4
   18074:	6898      	ldr	r0, [r3, #8]
   18076:	f003 fab4 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1807a:	4604      	mov	r4, r0
   1807c:	2800      	cmp	r0, #0
   1807e:	f040 8096 	bne.w	181ae <cosem_setRegisterMonitor+0x296>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionUp.script)) != 0)
   18082:	9b01      	ldr	r3, [sp, #4]
                actionSet->actionUp.script = NULL;
   18084:	f8c9 0000 	str.w	r0, [r9]
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionUp.script)) != 0)
   18088:	689a      	ldr	r2, [r3, #8]
   1808a:	f107 0b98 	add.w	fp, r7, #152	; 0x98
   1808e:	6812      	ldr	r2, [r2, #0]
   18090:	464b      	mov	r3, r9
   18092:	2109      	movs	r1, #9
   18094:	4658      	mov	r0, fp
   18096:	f003 f861 	bl	1b15c <oa_findByLN>
   1809a:	4604      	mov	r4, r0
   1809c:	2800      	cmp	r0, #0
   1809e:	f47f af4a 	bne.w	17f36 <cosem_setRegisterMonitor+0x1e>
                if (actionSet->actionUp.script == NULL)
   180a2:	f8d9 3000 	ldr.w	r3, [r9]
   180a6:	b9c3      	cbnz	r3, 180da <cosem_setRegisterMonitor+0x1c2>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&actionSet->actionUp.script);
   180a8:	4649      	mov	r1, r9
   180aa:	2009      	movs	r0, #9
   180ac:	f7ea f82c 	bl	2108 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   180b0:	4604      	mov	r4, r0
   180b2:	2800      	cmp	r0, #0
   180b4:	f47f af3f 	bne.w	17f36 <cosem_setRegisterMonitor+0x1e>
                    ret = cosem_setLogicalName((gxObject*)actionSet->actionUp.script, tmp->byteArr->data);
   180b8:	9b01      	ldr	r3, [sp, #4]
   180ba:	f8d9 0000 	ldr.w	r0, [r9]
   180be:	689b      	ldr	r3, [r3, #8]
   180c0:	6819      	ldr	r1, [r3, #0]
   180c2:	f7f6 f9b7 	bl	e434 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   180c6:	4604      	mov	r4, r0
   180c8:	2800      	cmp	r0, #0
   180ca:	f47f af34 	bne.w	17f36 <cosem_setRegisterMonitor+0x1e>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)actionSet->actionUp.script);
   180ce:	f8d9 1000 	ldr.w	r1, [r9]
   180d2:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   180d6:	f002 ffb2 	bl	1b03e <oa_push>
                ret = va_getByIndex(tmp3->Arr, 1, &tmp);
   180da:	9b02      	ldr	r3, [sp, #8]
   180dc:	aa01      	add	r2, sp, #4
   180de:	6898      	ldr	r0, [r3, #8]
   180e0:	2101      	movs	r1, #1
   180e2:	f003 fa7e 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   180e6:	4604      	mov	r4, r0
   180e8:	2800      	cmp	r0, #0
   180ea:	d164      	bne.n	181b6 <cosem_setRegisterMonitor+0x29e>
                actionSet->actionUp.scriptSelector = (uint16_t)var_toInteger(tmp);
   180ec:	9801      	ldr	r0, [sp, #4]
   180ee:	f003 fbf2 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp4->Arr, 1, &tmp3);
   180f2:	9b03      	ldr	r3, [sp, #12]
                actionSet->actionUp.scriptSelector = (uint16_t)var_toInteger(tmp);
   180f4:	f8a9 0004 	strh.w	r0, [r9, #4]
                ret = va_getByIndex(tmp4->Arr, 1, &tmp3);
   180f8:	aa02      	add	r2, sp, #8
   180fa:	6898      	ldr	r0, [r3, #8]
   180fc:	2101      	movs	r1, #1
   180fe:	f003 fa70 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18102:	4604      	mov	r4, r0
   18104:	2800      	cmp	r0, #0
   18106:	d156      	bne.n	181b6 <cosem_setRegisterMonitor+0x29e>
                ret = va_getByIndex(tmp3->Arr, 0, &tmp);
   18108:	9b02      	ldr	r3, [sp, #8]
   1810a:	4601      	mov	r1, r0
   1810c:	aa01      	add	r2, sp, #4
   1810e:	6898      	ldr	r0, [r3, #8]
   18110:	f003 fa67 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18114:	4604      	mov	r4, r0
   18116:	2800      	cmp	r0, #0
   18118:	d14d      	bne.n	181b6 <cosem_setRegisterMonitor+0x29e>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   1811a:	9b01      	ldr	r3, [sp, #4]
                actionSet->actionDown.script = NULL;
   1811c:	46ca      	mov	sl, r9
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   1811e:	689a      	ldr	r2, [r3, #8]
                actionSet->actionDown.script = NULL;
   18120:	f84a 0f08 	str.w	r0, [sl, #8]!
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   18124:	6812      	ldr	r2, [r2, #0]
   18126:	4653      	mov	r3, sl
   18128:	2109      	movs	r1, #9
   1812a:	4658      	mov	r0, fp
   1812c:	f003 f816 	bl	1b15c <oa_findByLN>
   18130:	4604      	mov	r4, r0
   18132:	2800      	cmp	r0, #0
   18134:	f47f aeff 	bne.w	17f36 <cosem_setRegisterMonitor+0x1e>
                if (actionSet->actionDown.script == NULL)
   18138:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1813c:	b9c2      	cbnz	r2, 18170 <cosem_setRegisterMonitor+0x258>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&actionSet->actionDown.script);
   1813e:	4651      	mov	r1, sl
   18140:	2009      	movs	r0, #9
   18142:	f7e9 ffe1 	bl	2108 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   18146:	4604      	mov	r4, r0
   18148:	2800      	cmp	r0, #0
   1814a:	f47f aef4 	bne.w	17f36 <cosem_setRegisterMonitor+0x1e>
                    ret = cosem_setLogicalName((gxObject*)actionSet->actionDown.script, tmp->byteArr->data);
   1814e:	9b01      	ldr	r3, [sp, #4]
   18150:	f8d9 0008 	ldr.w	r0, [r9, #8]
   18154:	689b      	ldr	r3, [r3, #8]
   18156:	6819      	ldr	r1, [r3, #0]
   18158:	f7f6 f96c 	bl	e434 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   1815c:	4604      	mov	r4, r0
   1815e:	2800      	cmp	r0, #0
   18160:	f47f aee9 	bne.w	17f36 <cosem_setRegisterMonitor+0x1e>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)actionSet->actionDown.script);
   18164:	f8d9 1008 	ldr.w	r1, [r9, #8]
   18168:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1816c:	f002 ff67 	bl	1b03e <oa_push>
                ret = va_getByIndex(tmp3->Arr, 1, &tmp);
   18170:	9b02      	ldr	r3, [sp, #8]
   18172:	aa01      	add	r2, sp, #4
   18174:	6898      	ldr	r0, [r3, #8]
   18176:	2101      	movs	r1, #1
   18178:	f003 fa33 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1817c:	4604      	mov	r4, r0
   1817e:	b9d0      	cbnz	r0, 181b6 <cosem_setRegisterMonitor+0x29e>
                actionSet->actionDown.scriptSelector = (uint16_t)var_toInteger(tmp);
   18180:	9801      	ldr	r0, [sp, #4]
   18182:	f003 fba8 	bl	1b8d6 <var_toInteger>
                arr_push(&object->actions, actionSet);
   18186:	4649      	mov	r1, r9
                actionSet->actionDown.scriptSelector = (uint16_t)var_toInteger(tmp);
   18188:	f8a9 000c 	strh.w	r0, [r9, #12]
                arr_push(&object->actions, actionSet);
   1818c:	4628      	mov	r0, r5
   1818e:	f7f8 ff7f 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18192:	f108 0801 	add.w	r8, r8, #1
   18196:	68b0      	ldr	r0, [r6, #8]
   18198:	88c3      	ldrh	r3, [r0, #6]
   1819a:	4543      	cmp	r3, r8
   1819c:	f47f af51 	bne.w	18042 <cosem_setRegisterMonitor+0x12a>
   181a0:	e6c8      	b.n	17f34 <cosem_setRegisterMonitor+0x1c>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   181a2:	f44f 7482 	mov.w	r4, #260	; 0x104
   181a6:	e6c6      	b.n	17f36 <cosem_setRegisterMonitor+0x1e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   181a8:	f44f 7481 	mov.w	r4, #258	; 0x102
   181ac:	e6c3      	b.n	17f36 <cosem_setRegisterMonitor+0x1e>
            if (ret != 0 && actionSet != NULL)
   181ae:	f1b9 0f00 	cmp.w	r9, #0
   181b2:	f43f aec0 	beq.w	17f36 <cosem_setRegisterMonitor+0x1e>
                gxfree(actionSet);
   181b6:	4648      	mov	r0, r9
   181b8:	f7f4 fb5c 	bl	c874 <free>
   181bc:	e6bb      	b.n	17f36 <cosem_setRegisterMonitor+0x1e>

000181be <cosem_setSapAssignment>:
    if (index == 2)
   181be:	2902      	cmp	r1, #2
{
   181c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   181c4:	4690      	mov	r8, r2
    if (index == 2)
   181c6:	d147      	bne.n	18258 <cosem_setSapAssignment+0x9a>
        obj_clearSapList(&object->sapAssignmentList);
   181c8:	f100 0610 	add.w	r6, r0, #16
   181cc:	4630      	mov	r0, r6
   181ce:	f7fc fade 	bl	1478e <obj_clearSapList>
        if (value->Arr != NULL)
   181d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   181d6:	2b00      	cmp	r3, #0
   181d8:	d13c      	bne.n	18254 <cosem_setSapAssignment+0x96>
    int ret = DLMS_ERROR_CODE_OK, pos;
   181da:	2400      	movs	r4, #0
}
   181dc:	4620      	mov	r0, r4
   181de:	b003      	add	sp, #12
   181e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   181e4:	466a      	mov	r2, sp
   181e6:	4639      	mov	r1, r7
   181e8:	f003 f9fb 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   181ec:	4604      	mov	r4, r0
   181ee:	2800      	cmp	r0, #0
   181f0:	d1f4      	bne.n	181dc <cosem_setSapAssignment+0x1e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   181f2:	9b00      	ldr	r3, [sp, #0]
   181f4:	4601      	mov	r1, r0
   181f6:	aa01      	add	r2, sp, #4
   181f8:	6898      	ldr	r0, [r3, #8]
   181fa:	f003 f9f2 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   181fe:	4604      	mov	r4, r0
   18200:	2800      	cmp	r0, #0
   18202:	d1eb      	bne.n	181dc <cosem_setSapAssignment+0x1e>
                it = (gxSapItem*)gxmalloc(sizeof(gxSapItem));
   18204:	2010      	movs	r0, #16
   18206:	f7f4 fb2d 	bl	c864 <malloc>
                if (it == NULL)
   1820a:	4605      	mov	r5, r0
   1820c:	b358      	cbz	r0, 18266 <cosem_setSapAssignment+0xa8>
                BYTE_BUFFER_INIT(&it->name);
   1820e:	f100 0904 	add.w	r9, r0, #4
   18212:	4648      	mov	r0, r9
   18214:	f7f5 fb4a 	bl	d8ac <bb_init>
                it->id = (uint16_t)var_toInteger(tmp2);
   18218:	9801      	ldr	r0, [sp, #4]
   1821a:	f003 fb5c 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   1821e:	9b00      	ldr	r3, [sp, #0]
                it->id = (uint16_t)var_toInteger(tmp2);
   18220:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   18222:	aa01      	add	r2, sp, #4
   18224:	6898      	ldr	r0, [r3, #8]
   18226:	2101      	movs	r1, #1
   18228:	f003 f9db 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1822c:	4604      	mov	r4, r0
   1822e:	b9b0      	cbnz	r0, 1825e <cosem_setSapAssignment+0xa0>
                bb_set(&it->name, tmp2->byteArr->data, tmp2->byteArr->size);
   18230:	9b01      	ldr	r3, [sp, #4]
   18232:	689b      	ldr	r3, [r3, #8]
   18234:	4648      	mov	r0, r9
   18236:	6819      	ldr	r1, [r3, #0]
   18238:	88da      	ldrh	r2, [r3, #6]
   1823a:	f7f5 fc86 	bl	db4a <bb_set>
                arr_push(&object->sapAssignmentList, it);
   1823e:	4629      	mov	r1, r5
   18240:	4630      	mov	r0, r6
   18242:	f7f8 ff25 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18246:	3701      	adds	r7, #1
   18248:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1824c:	88c3      	ldrh	r3, [r0, #6]
   1824e:	42bb      	cmp	r3, r7
   18250:	d1c8      	bne.n	181e4 <cosem_setSapAssignment+0x26>
   18252:	e7c2      	b.n	181da <cosem_setSapAssignment+0x1c>
   18254:	2700      	movs	r7, #0
   18256:	e7f7      	b.n	18248 <cosem_setSapAssignment+0x8a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   18258:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1825c:	e7be      	b.n	181dc <cosem_setSapAssignment+0x1e>
                gxfree(it);
   1825e:	4628      	mov	r0, r5
   18260:	f7f4 fb08 	bl	c874 <free>
   18264:	e7ba      	b.n	181dc <cosem_setSapAssignment+0x1e>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18266:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && it != NULL)
   1826a:	e7b7      	b.n	181dc <cosem_setSapAssignment+0x1e>

0001826c <cosem_setSchedule>:
{
   1826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (index == 2)
   18270:	2a02      	cmp	r2, #2
{
   18272:	b089      	sub	sp, #36	; 0x24
   18274:	4681      	mov	r9, r0
   18276:	4698      	mov	r8, r3
    if (index == 2)
   18278:	f040 8109 	bne.w	1848e <cosem_setSchedule+0x222>
        obj_clearScheduleEntries(&object->entries);
   1827c:	f101 0610 	add.w	r6, r1, #16
   18280:	4630      	mov	r0, r6
   18282:	f7fc fb25 	bl	148d0 <obj_clearScheduleEntries>
        var_init(&tmp3);
   18286:	a804      	add	r0, sp, #16
   18288:	f002 ffd1 	bl	1b22e <var_init>
        if (value->Arr != NULL)
   1828c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   18290:	2b00      	cmp	r3, #0
   18292:	f040 80fa 	bne.w	1848a <cosem_setSchedule+0x21e>
    int ret = 0, pos;
   18296:	2400      	movs	r4, #0
}
   18298:	4620      	mov	r0, r4
   1829a:	b009      	add	sp, #36	; 0x24
   1829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   182a0:	aa01      	add	r2, sp, #4
   182a2:	4639      	mov	r1, r7
   182a4:	f003 f99d 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   182a8:	4604      	mov	r4, r0
   182aa:	2800      	cmp	r0, #0
   182ac:	d1f4      	bne.n	18298 <cosem_setSchedule+0x2c>
                se = (gxScheduleEntry*)gxmalloc(sizeof(gxScheduleEntry));
   182ae:	203c      	movs	r0, #60	; 0x3c
   182b0:	f7f4 fad8 	bl	c864 <malloc>
                if (se == NULL)
   182b4:	4605      	mov	r5, r0
   182b6:	2800      	cmp	r0, #0
   182b8:	f000 80f0 	beq.w	1849c <cosem_setSchedule+0x230>
                se->execWeekdays = 0;
   182bc:	7e83      	ldrb	r3, [r0, #26]
                ba_init(&se->execSpecDays);
   182be:	f100 0a1c 	add.w	sl, r0, #28
                se->execWeekdays = 0;
   182c2:	f364 0306 	bfi	r3, r4, #0, #7
   182c6:	7683      	strb	r3, [r0, #26]
                ba_init(&se->execSpecDays);
   182c8:	4650      	mov	r0, sl
   182ca:	f7f5 f9e8 	bl	d69e <ba_init>
                ret = va_getByIndex(tmp->Arr, 0, &it);
   182ce:	9b01      	ldr	r3, [sp, #4]
   182d0:	4621      	mov	r1, r4
   182d2:	6898      	ldr	r0, [r3, #8]
   182d4:	aa02      	add	r2, sp, #8
   182d6:	f003 f984 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   182da:	4604      	mov	r4, r0
   182dc:	2800      	cmp	r0, #0
   182de:	f040 80d9 	bne.w	18494 <cosem_setSchedule+0x228>
                se->index = (uint16_t)var_toInteger(it);
   182e2:	9802      	ldr	r0, [sp, #8]
   182e4:	f003 faf7 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &it);
   182e8:	9b01      	ldr	r3, [sp, #4]
                se->index = (uint16_t)var_toInteger(it);
   182ea:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &it);
   182ec:	aa02      	add	r2, sp, #8
   182ee:	6898      	ldr	r0, [r3, #8]
   182f0:	2101      	movs	r1, #1
   182f2:	f003 f976 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   182f6:	4604      	mov	r4, r0
   182f8:	2800      	cmp	r0, #0
   182fa:	f040 80cb 	bne.w	18494 <cosem_setSchedule+0x228>
                se->enable = (unsigned char)var_toInteger(it);
   182fe:	9802      	ldr	r0, [sp, #8]
   18300:	f003 fae9 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &it);
   18304:	9b01      	ldr	r3, [sp, #4]
                se->enable = (unsigned char)var_toInteger(it);
   18306:	70a8      	strb	r0, [r5, #2]
                ret = va_getByIndex(tmp->Arr, 2, &it);
   18308:	6898      	ldr	r0, [r3, #8]
   1830a:	aa02      	add	r2, sp, #8
   1830c:	2102      	movs	r1, #2
   1830e:	f003 f968 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18312:	4604      	mov	r4, r0
   18314:	2800      	cmp	r0, #0
   18316:	f040 80bd 	bne.w	18494 <cosem_setSchedule+0x228>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, it->byteArr->data, (gxObject**)&se->scriptTable)) != 0)
   1831a:	9b02      	ldr	r3, [sp, #8]
   1831c:	689a      	ldr	r2, [r3, #8]
   1831e:	f105 0b04 	add.w	fp, r5, #4
   18322:	6812      	ldr	r2, [r2, #0]
   18324:	465b      	mov	r3, fp
   18326:	2109      	movs	r1, #9
   18328:	f109 0098 	add.w	r0, r9, #152	; 0x98
   1832c:	f002 ff16 	bl	1b15c <oa_findByLN>
   18330:	4604      	mov	r4, r0
   18332:	2800      	cmp	r0, #0
   18334:	f040 80ae 	bne.w	18494 <cosem_setSchedule+0x228>
                if (se->scriptTable == NULL)
   18338:	686b      	ldr	r3, [r5, #4]
   1833a:	b9a3      	cbnz	r3, 18366 <cosem_setSchedule+0xfa>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&se->scriptTable);
   1833c:	4659      	mov	r1, fp
   1833e:	2009      	movs	r0, #9
   18340:	f7e9 fee2 	bl	2108 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   18344:	4604      	mov	r4, r0
   18346:	2800      	cmp	r0, #0
   18348:	d1a6      	bne.n	18298 <cosem_setSchedule+0x2c>
                    ret = cosem_setLogicalName((gxObject*)se->scriptTable, tmp->byteArr->data);
   1834a:	9b01      	ldr	r3, [sp, #4]
   1834c:	6868      	ldr	r0, [r5, #4]
   1834e:	689b      	ldr	r3, [r3, #8]
   18350:	6819      	ldr	r1, [r3, #0]
   18352:	f7f6 f86f 	bl	e434 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   18356:	4604      	mov	r4, r0
   18358:	2800      	cmp	r0, #0
   1835a:	d19d      	bne.n	18298 <cosem_setSchedule+0x2c>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)se->scriptTable);
   1835c:	6869      	ldr	r1, [r5, #4]
   1835e:	f109 00e4 	add.w	r0, r9, #228	; 0xe4
   18362:	f002 fe6c 	bl	1b03e <oa_push>
                ret = va_getByIndex(tmp->Arr, 3, &it);
   18366:	9b01      	ldr	r3, [sp, #4]
   18368:	aa02      	add	r2, sp, #8
   1836a:	6898      	ldr	r0, [r3, #8]
   1836c:	2103      	movs	r1, #3
   1836e:	f003 f938 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18372:	4604      	mov	r4, r0
   18374:	2800      	cmp	r0, #0
   18376:	f040 808d 	bne.w	18494 <cosem_setSchedule+0x228>
                se->scriptSelector = (uint16_t)var_toInteger(it);
   1837a:	9802      	ldr	r0, [sp, #8]
   1837c:	f003 faab 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 4, &it);
   18380:	9b01      	ldr	r3, [sp, #4]
                se->scriptSelector = (uint16_t)var_toInteger(it);
   18382:	8128      	strh	r0, [r5, #8]
                ret = va_getByIndex(tmp->Arr, 4, &it);
   18384:	aa02      	add	r2, sp, #8
   18386:	6898      	ldr	r0, [r3, #8]
   18388:	2104      	movs	r1, #4
   1838a:	f003 f92a 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1838e:	4604      	mov	r4, r0
   18390:	2800      	cmp	r0, #0
   18392:	d17f      	bne.n	18494 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_TIME, &tmp3);
   18394:	9802      	ldr	r0, [sp, #8]
   18396:	aa04      	add	r2, sp, #16
   18398:	211b      	movs	r1, #27
   1839a:	f7f8 fb53 	bl	10a44 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1839e:	4604      	mov	r4, r0
   183a0:	2800      	cmp	r0, #0
   183a2:	d177      	bne.n	18494 <cosem_setSchedule+0x228>
                time_copy(&se->switchTime, tmp3.dateTime);
   183a4:	9906      	ldr	r1, [sp, #24]
   183a6:	f105 000c 	add.w	r0, r5, #12
   183aa:	f7f6 fb98 	bl	eade <time_copy>
                ret = va_getByIndex(tmp->Arr, 5, &it);
   183ae:	9b01      	ldr	r3, [sp, #4]
   183b0:	aa02      	add	r2, sp, #8
   183b2:	6898      	ldr	r0, [r3, #8]
   183b4:	2105      	movs	r1, #5
   183b6:	f003 f914 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   183ba:	4604      	mov	r4, r0
   183bc:	2800      	cmp	r0, #0
   183be:	d169      	bne.n	18494 <cosem_setSchedule+0x228>
                se->validityWindow = (uint16_t)var_toInteger(it);
   183c0:	9802      	ldr	r0, [sp, #8]
   183c2:	f003 fa88 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 6, &it);
   183c6:	9b01      	ldr	r3, [sp, #4]
                se->validityWindow = (uint16_t)var_toInteger(it);
   183c8:	8328      	strh	r0, [r5, #24]
                ret = va_getByIndex(tmp->Arr, 6, &it);
   183ca:	aa02      	add	r2, sp, #8
   183cc:	6898      	ldr	r0, [r3, #8]
   183ce:	2106      	movs	r1, #6
   183d0:	f003 f907 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   183d4:	4604      	mov	r4, r0
   183d6:	2800      	cmp	r0, #0
   183d8:	d15c      	bne.n	18494 <cosem_setSchedule+0x228>
                if (it->bitArr != NULL)
   183da:	9b02      	ldr	r3, [sp, #8]
   183dc:	6898      	ldr	r0, [r3, #8]
   183de:	b140      	cbz	r0, 183f2 <cosem_setSchedule+0x186>
                    if ((ret = ba_toInteger(it->bitArr, &val)) == 0)
   183e0:	a903      	add	r1, sp, #12
   183e2:	f7f5 fa17 	bl	d814 <ba_toInteger>
   183e6:	b920      	cbnz	r0, 183f2 <cosem_setSchedule+0x186>
                        se->execWeekdays = val;
   183e8:	7eab      	ldrb	r3, [r5, #26]
   183ea:	9a03      	ldr	r2, [sp, #12]
   183ec:	f362 0306 	bfi	r3, r2, #0, #7
   183f0:	76ab      	strb	r3, [r5, #26]
                ret = va_getByIndex(tmp->Arr, 7, &it);
   183f2:	9b01      	ldr	r3, [sp, #4]
   183f4:	aa02      	add	r2, sp, #8
   183f6:	6898      	ldr	r0, [r3, #8]
   183f8:	2107      	movs	r1, #7
   183fa:	f003 f8f2 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   183fe:	4604      	mov	r4, r0
   18400:	2800      	cmp	r0, #0
   18402:	d147      	bne.n	18494 <cosem_setSchedule+0x228>
                if (it->bitArr != NULL)
   18404:	9b02      	ldr	r3, [sp, #8]
   18406:	689b      	ldr	r3, [r3, #8]
   18408:	b123      	cbz	r3, 18414 <cosem_setSchedule+0x1a8>
                    ba_copy(&se->execSpecDays, it->bitArr->data, (uint16_t)it->bitArr->size);
   1840a:	88da      	ldrh	r2, [r3, #6]
   1840c:	6819      	ldr	r1, [r3, #0]
   1840e:	4650      	mov	r0, sl
   18410:	f7f5 f9c0 	bl	d794 <ba_copy>
                ret = va_getByIndex(tmp->Arr, 8, &it);
   18414:	9b01      	ldr	r3, [sp, #4]
   18416:	aa02      	add	r2, sp, #8
   18418:	6898      	ldr	r0, [r3, #8]
   1841a:	2108      	movs	r1, #8
   1841c:	f003 f8e1 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18420:	4604      	mov	r4, r0
   18422:	2800      	cmp	r0, #0
   18424:	d136      	bne.n	18494 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   18426:	9802      	ldr	r0, [sp, #8]
   18428:	aa04      	add	r2, sp, #16
   1842a:	211a      	movs	r1, #26
   1842c:	f7f8 fb0a 	bl	10a44 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   18430:	4604      	mov	r4, r0
   18432:	bb78      	cbnz	r0, 18494 <cosem_setSchedule+0x228>
                time_copy(&se->beginDate, tmp3.dateTime);
   18434:	9906      	ldr	r1, [sp, #24]
   18436:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1843a:	f7f6 fb50 	bl	eade <time_copy>
                var_clear(&tmp3);
   1843e:	a804      	add	r0, sp, #16
   18440:	f003 f851 	bl	1b4e6 <var_clear>
                ret = va_getByIndex(tmp->Arr, 9, &it);
   18444:	9b01      	ldr	r3, [sp, #4]
   18446:	aa02      	add	r2, sp, #8
   18448:	6898      	ldr	r0, [r3, #8]
   1844a:	2109      	movs	r1, #9
   1844c:	f003 f8c9 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18450:	4604      	mov	r4, r0
   18452:	b9f8      	cbnz	r0, 18494 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   18454:	9802      	ldr	r0, [sp, #8]
   18456:	aa04      	add	r2, sp, #16
   18458:	211a      	movs	r1, #26
   1845a:	f7f8 faf3 	bl	10a44 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1845e:	4604      	mov	r4, r0
   18460:	b9c0      	cbnz	r0, 18494 <cosem_setSchedule+0x228>
                time_copy(&se->endDate, tmp3.dateTime);
   18462:	9906      	ldr	r1, [sp, #24]
   18464:	f105 0030 	add.w	r0, r5, #48	; 0x30
   18468:	f7f6 fb39 	bl	eade <time_copy>
                arr_push(&object->entries, se);
   1846c:	4629      	mov	r1, r5
   1846e:	4630      	mov	r0, r6
   18470:	f7f8 fe0e 	bl	11090 <arr_push>
                var_clear(&tmp3);
   18474:	a804      	add	r0, sp, #16
   18476:	f003 f836 	bl	1b4e6 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1847a:	3701      	adds	r7, #1
   1847c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   18480:	88c3      	ldrh	r3, [r0, #6]
   18482:	42bb      	cmp	r3, r7
   18484:	f47f af0c 	bne.w	182a0 <cosem_setSchedule+0x34>
   18488:	e705      	b.n	18296 <cosem_setSchedule+0x2a>
   1848a:	2700      	movs	r7, #0
   1848c:	e7f6      	b.n	1847c <cosem_setSchedule+0x210>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1848e:	f44f 7481 	mov.w	r4, #258	; 0x102
   18492:	e701      	b.n	18298 <cosem_setSchedule+0x2c>
                gxfree(se);
   18494:	4628      	mov	r0, r5
   18496:	f7f4 f9ed 	bl	c874 <free>
   1849a:	e6fd      	b.n	18298 <cosem_setSchedule+0x2c>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1849c:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && se != NULL)
   184a0:	e6fa      	b.n	18298 <cosem_setSchedule+0x2c>

000184a2 <cosem_setScriptTable>:
{
   184a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a6:	b089      	sub	sp, #36	; 0x24
    if (index == 2)
   184a8:	2a02      	cmp	r2, #2
{
   184aa:	9002      	str	r0, [sp, #8]
   184ac:	4615      	mov	r5, r2
   184ae:	469a      	mov	sl, r3
    if (index == 2)
   184b0:	f040 8154 	bne.w	1875c <cosem_setScriptTable+0x2ba>
        obj_clearScriptTable(&object->scripts);
   184b4:	f101 0910 	add.w	r9, r1, #16
   184b8:	4648      	mov	r0, r9
   184ba:	f7fc fa3c 	bl	14936 <obj_clearScriptTable>
        if (value->Arr->size != 0)
   184be:	f8da 0008 	ldr.w	r0, [sl, #8]
   184c2:	88c3      	ldrh	r3, [r0, #6]
   184c4:	b923      	cbnz	r3, 184d0 <cosem_setScriptTable+0x2e>
    int ret = 0, pos, pos2;
   184c6:	2400      	movs	r4, #0
}
   184c8:	4620      	mov	r0, r4
   184ca:	b009      	add	sp, #36	; 0x24
   184cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = va_getByIndex(value->Arr, 0, &tmp);
   184d0:	ae05      	add	r6, sp, #20
   184d2:	4632      	mov	r2, r6
   184d4:	2100      	movs	r1, #0
   184d6:	f003 f884 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   184da:	4604      	mov	r4, r0
   184dc:	2800      	cmp	r0, #0
   184de:	d1f3      	bne.n	184c8 <cosem_setScriptTable+0x26>
            if (value->vt == DLMS_DATA_TYPE_ARRAY)
   184e0:	f89a 3000 	ldrb.w	r3, [sl]
   184e4:	2b01      	cmp	r3, #1
   184e6:	f040 80a8 	bne.w	1863a <cosem_setScriptTable+0x198>
                for (pos = 0; pos != value->Arr->size; ++pos)
   184ea:	f8da 0008 	ldr.w	r0, [sl, #8]
   184ee:	88c3      	ldrh	r3, [r0, #6]
   184f0:	42a3      	cmp	r3, r4
   184f2:	d0e8      	beq.n	184c6 <cosem_setScriptTable+0x24>
                    ret = va_getByIndex(value->Arr, pos, &tmp);
   184f4:	4621      	mov	r1, r4
   184f6:	4632      	mov	r2, r6
   184f8:	f003 f873 	bl	1b5e2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   184fc:	4601      	mov	r1, r0
   184fe:	2800      	cmp	r0, #0
   18500:	f040 8131 	bne.w	18766 <cosem_setScriptTable+0x2c4>
                    ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   18504:	9b05      	ldr	r3, [sp, #20]
   18506:	aa07      	add	r2, sp, #28
   18508:	6898      	ldr	r0, [r3, #8]
   1850a:	f003 f86a 	bl	1b5e2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   1850e:	4601      	mov	r1, r0
   18510:	2800      	cmp	r0, #0
   18512:	f040 8128 	bne.w	18766 <cosem_setScriptTable+0x2c4>
                    script = (gxScript*)gxmalloc(sizeof(gxScript));
   18516:	2010      	movs	r0, #16
   18518:	f7f4 f9a4 	bl	c864 <malloc>
                    if (script == NULL)
   1851c:	4680      	mov	r8, r0
   1851e:	2800      	cmp	r0, #0
   18520:	f000 811f 	beq.w	18762 <cosem_setScriptTable+0x2c0>
                    arr_init(&script->actions);
   18524:	1d03      	adds	r3, r0, #4
   18526:	4618      	mov	r0, r3
   18528:	9301      	str	r3, [sp, #4]
   1852a:	f7f8 fd82 	bl	11032 <arr_init>
                    script->id = (uint16_t)var_toInteger(tmp3);
   1852e:	9807      	ldr	r0, [sp, #28]
   18530:	f003 f9d1 	bl	1b8d6 <var_toInteger>
                    arr_push(&object->scripts, script);
   18534:	4641      	mov	r1, r8
                    script->id = (uint16_t)var_toInteger(tmp3);
   18536:	f8a8 0000 	strh.w	r0, [r8]
                    arr_push(&object->scripts, script);
   1853a:	4648      	mov	r0, r9
   1853c:	f7f8 fda8 	bl	11090 <arr_push>
                    ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18540:	9b05      	ldr	r3, [sp, #20]
   18542:	aa07      	add	r2, sp, #28
   18544:	6898      	ldr	r0, [r3, #8]
   18546:	2101      	movs	r1, #1
   18548:	f003 f84b 	bl	1b5e2 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   1854c:	4605      	mov	r5, r0
   1854e:	2800      	cmp	r0, #0
   18550:	d06c      	beq.n	1862c <cosem_setScriptTable+0x18a>
                    gxfree(script);
   18552:	4640      	mov	r0, r8
   18554:	f7f4 f98e 	bl	c874 <free>
   18558:	462c      	mov	r4, r5
   1855a:	e7b5      	b.n	184c8 <cosem_setScriptTable+0x26>
                        ret = va_getByIndex(tmp3->Arr, pos2, &tmp2);
   1855c:	4629      	mov	r1, r5
   1855e:	aa06      	add	r2, sp, #24
   18560:	f003 f83f 	bl	1b5e2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   18564:	4601      	mov	r1, r0
   18566:	2800      	cmp	r0, #0
   18568:	f040 8101 	bne.w	1876e <cosem_setScriptTable+0x2cc>
                        ret = va_getByIndex(tmp2->Arr, 0, &tmp);
   1856c:	9b06      	ldr	r3, [sp, #24]
   1856e:	4632      	mov	r2, r6
   18570:	6898      	ldr	r0, [r3, #8]
   18572:	f003 f836 	bl	1b5e2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   18576:	4601      	mov	r1, r0
   18578:	2800      	cmp	r0, #0
   1857a:	f040 80f8 	bne.w	1876e <cosem_setScriptTable+0x2cc>
                        scriptAction = (gxScriptAction*)gxmalloc(sizeof(gxScriptAction));
   1857e:	2020      	movs	r0, #32
   18580:	f7f4 f970 	bl	c864 <malloc>
                        if (scriptAction == NULL)
   18584:	4607      	mov	r7, r0
   18586:	2800      	cmp	r0, #0
   18588:	f000 80ef 	beq.w	1876a <cosem_setScriptTable+0x2c8>
                        var_init(&scriptAction->parameter);
   1858c:	f100 0b08 	add.w	fp, r0, #8
   18590:	4658      	mov	r0, fp
   18592:	f002 fe4c 	bl	1b22e <var_init>
                        scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp);
   18596:	9805      	ldr	r0, [sp, #20]
   18598:	f003 f99d 	bl	1b8d6 <var_toInteger>
                        ret = va_getByIndex(tmp2->Arr, 1, &tmp);
   1859c:	9b06      	ldr	r3, [sp, #24]
                        scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp);
   1859e:	7138      	strb	r0, [r7, #4]
                        ret = va_getByIndex(tmp2->Arr, 1, &tmp);
   185a0:	6898      	ldr	r0, [r3, #8]
   185a2:	4632      	mov	r2, r6
   185a4:	2101      	movs	r1, #1
   185a6:	f003 f81c 	bl	1b5e2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   185aa:	4603      	mov	r3, r0
   185ac:	2800      	cmp	r0, #0
   185ae:	f040 80e0 	bne.w	18772 <cosem_setScriptTable+0x2d0>
                        type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   185b2:	9805      	ldr	r0, [sp, #20]
   185b4:	f003 f98f 	bl	1b8d6 <var_toInteger>
   185b8:	b283      	uxth	r3, r0
   185ba:	9303      	str	r3, [sp, #12]
                        ret = va_getByIndex(tmp2->Arr, 2, &tmp);
   185bc:	9b06      	ldr	r3, [sp, #24]
   185be:	4632      	mov	r2, r6
   185c0:	6898      	ldr	r0, [r3, #8]
   185c2:	2102      	movs	r1, #2
   185c4:	f003 f80d 	bl	1b5e2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   185c8:	4603      	mov	r3, r0
   185ca:	2800      	cmp	r0, #0
   185cc:	f040 80d1 	bne.w	18772 <cosem_setScriptTable+0x2d0>
                        if ((ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &scriptAction->target)) != 0)
   185d0:	9b05      	ldr	r3, [sp, #20]
   185d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   185d6:	689a      	ldr	r2, [r3, #8]
   185d8:	3098      	adds	r0, #152	; 0x98
   185da:	463b      	mov	r3, r7
   185dc:	6812      	ldr	r2, [r2, #0]
   185de:	f002 fdbd 	bl	1b15c <oa_findByLN>
   185e2:	4603      	mov	r3, r0
   185e4:	2800      	cmp	r0, #0
   185e6:	f040 80c4 	bne.w	18772 <cosem_setScriptTable+0x2d0>
                        ret = va_getByIndex(tmp2->Arr, 3, &tmp);
   185ea:	9b06      	ldr	r3, [sp, #24]
   185ec:	4632      	mov	r2, r6
   185ee:	6898      	ldr	r0, [r3, #8]
   185f0:	2103      	movs	r1, #3
   185f2:	f002 fff6 	bl	1b5e2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   185f6:	4603      	mov	r3, r0
   185f8:	2800      	cmp	r0, #0
   185fa:	f040 80ba 	bne.w	18772 <cosem_setScriptTable+0x2d0>
                        scriptAction->index = (char)var_toInteger(tmp);
   185fe:	9805      	ldr	r0, [sp, #20]
   18600:	f003 f969 	bl	1b8d6 <var_toInteger>
                        ret = va_getByIndex(tmp2->Arr, 4, &tmp);
   18604:	9b06      	ldr	r3, [sp, #24]
                        scriptAction->index = (char)var_toInteger(tmp);
   18606:	7638      	strb	r0, [r7, #24]
                        ret = va_getByIndex(tmp2->Arr, 4, &tmp);
   18608:	6898      	ldr	r0, [r3, #8]
   1860a:	4632      	mov	r2, r6
   1860c:	2104      	movs	r1, #4
   1860e:	f002 ffe8 	bl	1b5e2 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   18612:	4603      	mov	r3, r0
   18614:	2800      	cmp	r0, #0
   18616:	f040 80ac 	bne.w	18772 <cosem_setScriptTable+0x2d0>
                        var_copy(&scriptAction->parameter, tmp);
   1861a:	9905      	ldr	r1, [sp, #20]
   1861c:	4658      	mov	r0, fp
   1861e:	f7eb ffc1 	bl	45a4 <var_copy>
                        arr_push(&script->actions, scriptAction);
   18622:	9801      	ldr	r0, [sp, #4]
   18624:	4639      	mov	r1, r7
   18626:	f7f8 fd33 	bl	11090 <arr_push>
                    for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   1862a:	3501      	adds	r5, #1
   1862c:	9b07      	ldr	r3, [sp, #28]
   1862e:	6898      	ldr	r0, [r3, #8]
   18630:	88c3      	ldrh	r3, [r0, #6]
   18632:	42ab      	cmp	r3, r5
   18634:	d192      	bne.n	1855c <cosem_setScriptTable+0xba>
                for (pos = 0; pos != value->Arr->size; ++pos)
   18636:	3401      	adds	r4, #1
   18638:	e757      	b.n	184ea <cosem_setScriptTable+0x48>
                ret = va_getByIndex(value->Arr, 0, &tmp);
   1863a:	4601      	mov	r1, r0
   1863c:	4632      	mov	r2, r6
   1863e:	f8da 0008 	ldr.w	r0, [sl, #8]
   18642:	f002 ffce 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18646:	4604      	mov	r4, r0
   18648:	2800      	cmp	r0, #0
   1864a:	f47f af3d 	bne.w	184c8 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   1864e:	9b05      	ldr	r3, [sp, #20]
   18650:	aa06      	add	r2, sp, #24
   18652:	6898      	ldr	r0, [r3, #8]
   18654:	2101      	movs	r1, #1
   18656:	f002 ffc4 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1865a:	4604      	mov	r4, r0
   1865c:	2800      	cmp	r0, #0
   1865e:	f47f af33 	bne.w	184c8 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp2->Arr, 2, &tmp3);
   18662:	9b06      	ldr	r3, [sp, #24]
   18664:	aa07      	add	r2, sp, #28
   18666:	6898      	ldr	r0, [r3, #8]
   18668:	4629      	mov	r1, r5
   1866a:	f002 ffba 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1866e:	4604      	mov	r4, r0
   18670:	2800      	cmp	r0, #0
   18672:	f47f af29 	bne.w	184c8 <cosem_setScriptTable+0x26>
                script = (gxScript*)gxmalloc(sizeof(gxScript));
   18676:	2010      	movs	r0, #16
   18678:	f7f4 f8f4 	bl	c864 <malloc>
                if (script == NULL)
   1867c:	4604      	mov	r4, r0
   1867e:	b910      	cbnz	r0, 18686 <cosem_setScriptTable+0x1e4>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   18680:	f44f 7482 	mov.w	r4, #260	; 0x104
   18684:	e720      	b.n	184c8 <cosem_setScriptTable+0x26>
                arr_init(&script->actions);
   18686:	1d07      	adds	r7, r0, #4
   18688:	4638      	mov	r0, r7
   1868a:	f7f8 fcd2 	bl	11032 <arr_init>
                script->id = (uint16_t)var_toInteger(tmp3);
   1868e:	9807      	ldr	r0, [sp, #28]
   18690:	f003 f921 	bl	1b8d6 <var_toInteger>
                arr_push(&object->scripts, script);
   18694:	4621      	mov	r1, r4
                script->id = (uint16_t)var_toInteger(tmp3);
   18696:	8020      	strh	r0, [r4, #0]
                arr_push(&object->scripts, script);
   18698:	4648      	mov	r0, r9
   1869a:	f7f8 fcf9 	bl	11090 <arr_push>
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   1869e:	9b05      	ldr	r3, [sp, #20]
   186a0:	aa07      	add	r2, sp, #28
   186a2:	6898      	ldr	r0, [r3, #8]
   186a4:	2103      	movs	r1, #3
   186a6:	f002 ff9c 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   186aa:	4604      	mov	r4, r0
   186ac:	2800      	cmp	r0, #0
   186ae:	f47f af0b 	bne.w	184c8 <cosem_setScriptTable+0x26>
                scriptAction = (gxScriptAction*)gxmalloc(sizeof(gxScriptAction));
   186b2:	2020      	movs	r0, #32
   186b4:	f7f4 f8d6 	bl	c864 <malloc>
                if (scriptAction == NULL)
   186b8:	4605      	mov	r5, r0
   186ba:	2800      	cmp	r0, #0
   186bc:	d0e0      	beq.n	18680 <cosem_setScriptTable+0x1de>
                var_init(&scriptAction->parameter);
   186be:	f100 0808 	add.w	r8, r0, #8
   186c2:	4640      	mov	r0, r8
   186c4:	f002 fdb3 	bl	1b22e <var_init>
                scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp3);
   186c8:	9807      	ldr	r0, [sp, #28]
   186ca:	f003 f904 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 4, &tmp3);
   186ce:	9b06      	ldr	r3, [sp, #24]
                scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp3);
   186d0:	7128      	strb	r0, [r5, #4]
                ret = va_getByIndex(tmp2->Arr, 4, &tmp3);
   186d2:	6898      	ldr	r0, [r3, #8]
   186d4:	aa07      	add	r2, sp, #28
   186d6:	2104      	movs	r1, #4
   186d8:	f002 ff83 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   186dc:	4604      	mov	r4, r0
   186de:	2800      	cmp	r0, #0
   186e0:	f47f aef2 	bne.w	184c8 <cosem_setScriptTable+0x26>
                type = (uint16_t)var_toInteger(tmp3);
   186e4:	9807      	ldr	r0, [sp, #28]
   186e6:	f003 f8f6 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 5, &tmp3);
   186ea:	9b06      	ldr	r3, [sp, #24]
                type = (uint16_t)var_toInteger(tmp3);
   186ec:	4606      	mov	r6, r0
                ret = va_getByIndex(tmp2->Arr, 5, &tmp3);
   186ee:	aa07      	add	r2, sp, #28
   186f0:	6898      	ldr	r0, [r3, #8]
   186f2:	2105      	movs	r1, #5
   186f4:	f002 ff75 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   186f8:	4604      	mov	r4, r0
   186fa:	2800      	cmp	r0, #0
   186fc:	f47f aee4 	bne.w	184c8 <cosem_setScriptTable+0x26>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &scriptAction->target)) != 0)
   18700:	9b07      	ldr	r3, [sp, #28]
   18702:	9802      	ldr	r0, [sp, #8]
   18704:	689a      	ldr	r2, [r3, #8]
   18706:	b2b1      	uxth	r1, r6
   18708:	6812      	ldr	r2, [r2, #0]
   1870a:	462b      	mov	r3, r5
   1870c:	3098      	adds	r0, #152	; 0x98
   1870e:	f002 fd25 	bl	1b15c <oa_findByLN>
   18712:	4604      	mov	r4, r0
   18714:	2800      	cmp	r0, #0
   18716:	f47f aed7 	bne.w	184c8 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp2->Arr, 6, &tmp3);
   1871a:	9b06      	ldr	r3, [sp, #24]
   1871c:	aa07      	add	r2, sp, #28
   1871e:	6898      	ldr	r0, [r3, #8]
   18720:	2106      	movs	r1, #6
   18722:	f002 ff5e 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18726:	4604      	mov	r4, r0
   18728:	2800      	cmp	r0, #0
   1872a:	f47f aecd 	bne.w	184c8 <cosem_setScriptTable+0x26>
                scriptAction->index = (char)var_toInteger(tmp3);
   1872e:	9807      	ldr	r0, [sp, #28]
   18730:	f003 f8d1 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 7, &tmp3);
   18734:	9b06      	ldr	r3, [sp, #24]
                scriptAction->index = (char)var_toInteger(tmp3);
   18736:	7628      	strb	r0, [r5, #24]
                ret = va_getByIndex(tmp2->Arr, 7, &tmp3);
   18738:	6898      	ldr	r0, [r3, #8]
   1873a:	aa07      	add	r2, sp, #28
   1873c:	2107      	movs	r1, #7
   1873e:	f002 ff50 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18742:	4604      	mov	r4, r0
   18744:	2800      	cmp	r0, #0
   18746:	f47f aebf 	bne.w	184c8 <cosem_setScriptTable+0x26>
                var_copy(&scriptAction->parameter, tmp);
   1874a:	9905      	ldr	r1, [sp, #20]
   1874c:	4640      	mov	r0, r8
   1874e:	f7eb ff29 	bl	45a4 <var_copy>
                arr_push(&script->actions, scriptAction);
   18752:	4629      	mov	r1, r5
   18754:	4638      	mov	r0, r7
   18756:	f7f8 fc9b 	bl	11090 <arr_push>
   1875a:	e6b5      	b.n	184c8 <cosem_setScriptTable+0x26>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1875c:	f44f 7481 	mov.w	r4, #258	; 0x102
   18760:	e6b2      	b.n	184c8 <cosem_setScriptTable+0x26>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18762:	f44f 7182 	mov.w	r1, #260	; 0x104
    int ret = 0, pos, pos2;
   18766:	460c      	mov	r4, r1
   18768:	e6ae      	b.n	184c8 <cosem_setScriptTable+0x26>
                            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1876a:	f44f 7182 	mov.w	r1, #260	; 0x104
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1876e:	460d      	mov	r5, r1
   18770:	e6ef      	b.n	18552 <cosem_setScriptTable+0xb0>
                            gxfree(scriptAction);
   18772:	4638      	mov	r0, r7
   18774:	9301      	str	r3, [sp, #4]
   18776:	f7f4 f87d 	bl	c874 <free>
   1877a:	9b01      	ldr	r3, [sp, #4]
   1877c:	461d      	mov	r5, r3
   1877e:	e6e8      	b.n	18552 <cosem_setScriptTable+0xb0>

00018780 <cosem_setSpecialDaysTable>:
{
   18780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   18784:	2902      	cmp	r1, #2
{
   18786:	b086      	sub	sp, #24
   18788:	4690      	mov	r8, r2
    if (index == 2)
   1878a:	d15f      	bne.n	1884c <cosem_setSpecialDaysTable+0xcc>
        arr_clear(&object->entries);
   1878c:	f100 0610 	add.w	r6, r0, #16
   18790:	4630      	mov	r0, r6
   18792:	f7f8 fc92 	bl	110ba <arr_clear>
        if (value->Arr != NULL)
   18796:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1879a:	2b00      	cmp	r3, #0
   1879c:	d151      	bne.n	18842 <cosem_setSpecialDaysTable+0xc2>
    int ret = 0, pos;
   1879e:	2400      	movs	r4, #0
}
   187a0:	4620      	mov	r0, r4
   187a2:	b006      	add	sp, #24
   187a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   187a8:	466a      	mov	r2, sp
   187aa:	4639      	mov	r1, r7
   187ac:	f002 ff19 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   187b0:	4604      	mov	r4, r0
   187b2:	2800      	cmp	r0, #0
   187b4:	d1f4      	bne.n	187a0 <cosem_setSpecialDaysTable+0x20>
                specialDay = (gxSpecialDay*)gxmalloc(sizeof(gxSpecialDay));
   187b6:	2014      	movs	r0, #20
   187b8:	f7f4 f854 	bl	c864 <malloc>
                if (specialDay == NULL)
   187bc:	4605      	mov	r5, r0
   187be:	2800      	cmp	r0, #0
   187c0:	d041      	beq.n	18846 <cosem_setSpecialDaysTable+0xc6>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   187c2:	9b00      	ldr	r3, [sp, #0]
   187c4:	4621      	mov	r1, r4
   187c6:	6898      	ldr	r0, [r3, #8]
   187c8:	aa01      	add	r2, sp, #4
   187ca:	f002 ff0a 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   187ce:	4604      	mov	r4, r0
   187d0:	2800      	cmp	r0, #0
   187d2:	d1e5      	bne.n	187a0 <cosem_setSpecialDaysTable+0x20>
                specialDay->index = (uint16_t)var_toInteger(tmp3);
   187d4:	9801      	ldr	r0, [sp, #4]
   187d6:	f003 f87e 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   187da:	9b00      	ldr	r3, [sp, #0]
                specialDay->index = (uint16_t)var_toInteger(tmp3);
   187dc:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   187de:	aa01      	add	r2, sp, #4
   187e0:	6898      	ldr	r0, [r3, #8]
   187e2:	2101      	movs	r1, #1
   187e4:	f002 fefd 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   187e8:	4604      	mov	r4, r0
   187ea:	2800      	cmp	r0, #0
   187ec:	d1d8      	bne.n	187a0 <cosem_setSpecialDaysTable+0x20>
                var_init(&tmp2);
   187ee:	a802      	add	r0, sp, #8
   187f0:	f002 fd1d 	bl	1b22e <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATE, &tmp2);
   187f4:	9801      	ldr	r0, [sp, #4]
   187f6:	aa02      	add	r2, sp, #8
   187f8:	211a      	movs	r1, #26
   187fa:	f7f8 f923 	bl	10a44 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   187fe:	4604      	mov	r4, r0
   18800:	2800      	cmp	r0, #0
   18802:	d1cd      	bne.n	187a0 <cosem_setSpecialDaysTable+0x20>
                time_copy(&specialDay->date, tmp2.dateTime);
   18804:	9904      	ldr	r1, [sp, #16]
   18806:	1d28      	adds	r0, r5, #4
   18808:	f7f6 f969 	bl	eade <time_copy>
                var_clear(&tmp2);
   1880c:	a802      	add	r0, sp, #8
   1880e:	f002 fe6a 	bl	1b4e6 <var_clear>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   18812:	9b00      	ldr	r3, [sp, #0]
   18814:	aa01      	add	r2, sp, #4
   18816:	6898      	ldr	r0, [r3, #8]
   18818:	2102      	movs	r1, #2
   1881a:	f002 fee2 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1881e:	4604      	mov	r4, r0
   18820:	2800      	cmp	r0, #0
   18822:	d1bd      	bne.n	187a0 <cosem_setSpecialDaysTable+0x20>
                specialDay->dayId = (unsigned char)var_toInteger(tmp3);
   18824:	9801      	ldr	r0, [sp, #4]
   18826:	f003 f856 	bl	1b8d6 <var_toInteger>
                arr_push(&object->entries, specialDay);
   1882a:	4629      	mov	r1, r5
                specialDay->dayId = (unsigned char)var_toInteger(tmp3);
   1882c:	7428      	strb	r0, [r5, #16]
                arr_push(&object->entries, specialDay);
   1882e:	4630      	mov	r0, r6
   18830:	f7f8 fc2e 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18834:	3701      	adds	r7, #1
   18836:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1883a:	88c3      	ldrh	r3, [r0, #6]
   1883c:	42bb      	cmp	r3, r7
   1883e:	d1b3      	bne.n	187a8 <cosem_setSpecialDaysTable+0x28>
   18840:	e7ad      	b.n	1879e <cosem_setSpecialDaysTable+0x1e>
   18842:	2700      	movs	r7, #0
   18844:	e7f7      	b.n	18836 <cosem_setSpecialDaysTable+0xb6>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18846:	f44f 7482 	mov.w	r4, #260	; 0x104
   1884a:	e7a9      	b.n	187a0 <cosem_setSpecialDaysTable+0x20>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1884c:	f44f 7481 	mov.w	r4, #258	; 0x102
   18850:	e7a6      	b.n	187a0 <cosem_setSpecialDaysTable+0x20>

00018852 <cosem_setTcpUdpSetup>:
    if (index == 2)
   18852:	2a02      	cmp	r2, #2
{
   18854:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18856:	4605      	mov	r5, r0
   18858:	460c      	mov	r4, r1
   1885a:	4618      	mov	r0, r3
    if (index == 2)
   1885c:	d104      	bne.n	18868 <cosem_setTcpUdpSetup+0x16>
        object->port = (uint16_t)var_toInteger(value);
   1885e:	f003 f83a 	bl	1b8d6 <var_toInteger>
   18862:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   18864:	2000      	movs	r0, #0
   18866:	e013      	b.n	18890 <cosem_setTcpUdpSetup+0x3e>
    else if (index == 3)
   18868:	2a03      	cmp	r2, #3
   1886a:	d113      	bne.n	18894 <cosem_setTcpUdpSetup+0x42>
        if (value->vt == DLMS_DATA_TYPE_NONE)
   1886c:	781a      	ldrb	r2, [r3, #0]
   1886e:	b90a      	cbnz	r2, 18874 <cosem_setTcpUdpSetup+0x22>
            object->ipSetup = NULL;
   18870:	614a      	str	r2, [r1, #20]
   18872:	e7f7      	b.n	18864 <cosem_setTcpUdpSetup+0x12>
            if ((ret = bb_get(value->byteArr, ln, 6)) != 0 ||
   18874:	6898      	ldr	r0, [r3, #8]
   18876:	2206      	movs	r2, #6
   18878:	4669      	mov	r1, sp
   1887a:	f7f5 fbcf 	bl	e01c <bb_get>
   1887e:	b938      	cbnz	r0, 18890 <cosem_setTcpUdpSetup+0x3e>
                (ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_IP4_SETUP, ln, &object->ipSetup)) != 0)
   18880:	f104 0314 	add.w	r3, r4, #20
   18884:	466a      	mov	r2, sp
   18886:	212a      	movs	r1, #42	; 0x2a
   18888:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1888c:	f002 fc66 	bl	1b15c <oa_findByLN>
}
   18890:	b003      	add	sp, #12
   18892:	bd30      	pop	{r4, r5, pc}
    else if (index == 4)
   18894:	2a04      	cmp	r2, #4
   18896:	d103      	bne.n	188a0 <cosem_setTcpUdpSetup+0x4e>
        object->maximumSegmentSize = (uint16_t)var_toInteger(value);
   18898:	f003 f81d 	bl	1b8d6 <var_toInteger>
   1889c:	83a0      	strh	r0, [r4, #28]
   1889e:	e7e1      	b.n	18864 <cosem_setTcpUdpSetup+0x12>
    else if (index == 5)
   188a0:	2a05      	cmp	r2, #5
   188a2:	d103      	bne.n	188ac <cosem_setTcpUdpSetup+0x5a>
        object->maximumSimultaneousConnections = (unsigned char)var_toInteger(value);
   188a4:	f003 f817 	bl	1b8d6 <var_toInteger>
   188a8:	7620      	strb	r0, [r4, #24]
   188aa:	e7db      	b.n	18864 <cosem_setTcpUdpSetup+0x12>
    else if (index == 6)
   188ac:	2a06      	cmp	r2, #6
   188ae:	d103      	bne.n	188b8 <cosem_setTcpUdpSetup+0x66>
        object->inactivityTimeout = (uint16_t)var_toInteger(value);
   188b0:	f003 f811 	bl	1b8d6 <var_toInteger>
   188b4:	8360      	strh	r0, [r4, #26]
   188b6:	e7d5      	b.n	18864 <cosem_setTcpUdpSetup+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   188b8:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   188bc:	e7e8      	b.n	18890 <cosem_setTcpUdpSetup+0x3e>

000188be <cosem_setMbusMasterPortSetup>:
    if (index == 2)
   188be:	2902      	cmp	r1, #2
{
   188c0:	b510      	push	{r4, lr}
   188c2:	4604      	mov	r4, r0
   188c4:	4610      	mov	r0, r2
    if (index == 2)
   188c6:	d104      	bne.n	188d2 <cosem_setMbusMasterPortSetup+0x14>
        object->commSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   188c8:	f003 f805 	bl	1b8d6 <var_toInteger>
   188cc:	7420      	strb	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   188ce:	2000      	movs	r0, #0
}
   188d0:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   188d2:	f44f 7081 	mov.w	r0, #258	; 0x102
   188d6:	e7fb      	b.n	188d0 <cosem_setMbusMasterPortSetup+0x12>

000188d8 <cosem_setPushSetup>:
{
   188d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   188dc:	2a02      	cmp	r2, #2
{
   188de:	b08b      	sub	sp, #44	; 0x2c
   188e0:	4680      	mov	r8, r0
   188e2:	460d      	mov	r5, r1
   188e4:	461e      	mov	r6, r3
    if (index == 2)
   188e6:	d17b      	bne.n	189e0 <cosem_setPushSetup+0x108>
        obj_clearPushObjectList(&object->pushObjectList);
   188e8:	3510      	adds	r5, #16
   188ea:	4628      	mov	r0, r5
   188ec:	f7fb fefa 	bl	146e4 <obj_clearPushObjectList>
        if (value->Arr != NULL)
   188f0:	68b3      	ldr	r3, [r6, #8]
   188f2:	2b00      	cmp	r3, #0
   188f4:	d172      	bne.n	189dc <cosem_setPushSetup+0x104>
    return DLMS_ERROR_CODE_OK;
   188f6:	2400      	movs	r4, #0
   188f8:	e0a6      	b.n	18a48 <cosem_setPushSetup+0x170>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   188fa:	466a      	mov	r2, sp
   188fc:	4639      	mov	r1, r7
   188fe:	f002 fe70 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18902:	4604      	mov	r4, r0
   18904:	2800      	cmp	r0, #0
   18906:	f040 809f 	bne.w	18a48 <cosem_setPushSetup+0x170>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   1890a:	9b00      	ldr	r3, [sp, #0]
   1890c:	4601      	mov	r1, r0
   1890e:	aa01      	add	r2, sp, #4
   18910:	6898      	ldr	r0, [r3, #8]
   18912:	f002 fe66 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18916:	4604      	mov	r4, r0
   18918:	2800      	cmp	r0, #0
   1891a:	f040 8095 	bne.w	18a48 <cosem_setPushSetup+0x170>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1891e:	9801      	ldr	r0, [sp, #4]
   18920:	f002 ffd9 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18924:	9b00      	ldr	r3, [sp, #0]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   18926:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1892a:	aa01      	add	r2, sp, #4
   1892c:	6898      	ldr	r0, [r3, #8]
   1892e:	2101      	movs	r1, #1
   18930:	f002 fe57 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18934:	4604      	mov	r4, r0
   18936:	2800      	cmp	r0, #0
   18938:	f040 8086 	bne.w	18a48 <cosem_setPushSetup+0x170>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   1893c:	9b01      	ldr	r3, [sp, #4]
                obj = NULL;
   1893e:	9006      	str	r0, [sp, #24]
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   18940:	689a      	ldr	r2, [r3, #8]
   18942:	4649      	mov	r1, r9
   18944:	6812      	ldr	r2, [r2, #0]
   18946:	ab06      	add	r3, sp, #24
   18948:	f108 0098 	add.w	r0, r8, #152	; 0x98
   1894c:	f002 fc06 	bl	1b15c <oa_findByLN>
   18950:	4604      	mov	r4, r0
   18952:	2800      	cmp	r0, #0
   18954:	d178      	bne.n	18a48 <cosem_setPushSetup+0x170>
                if (obj == NULL)
   18956:	9b06      	ldr	r3, [sp, #24]
   18958:	b99b      	cbnz	r3, 18982 <cosem_setPushSetup+0xaa>
                    if ((ret = cosem_createObject(type, &obj)) != 0)
   1895a:	a906      	add	r1, sp, #24
   1895c:	4648      	mov	r0, r9
   1895e:	f7e9 fbd3 	bl	2108 <cosem_createObject>
   18962:	4604      	mov	r4, r0
   18964:	2800      	cmp	r0, #0
   18966:	d16f      	bne.n	18a48 <cosem_setPushSetup+0x170>
                    oa_push(&settings->releasedObjects, obj);
   18968:	9906      	ldr	r1, [sp, #24]
   1896a:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   1896e:	f002 fb66 	bl	1b03e <oa_push>
                    memcpy(obj->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   18972:	9b01      	ldr	r3, [sp, #4]
   18974:	9806      	ldr	r0, [sp, #24]
   18976:	689b      	ldr	r3, [r3, #8]
   18978:	3006      	adds	r0, #6
   1897a:	88da      	ldrh	r2, [r3, #6]
   1897c:	6819      	ldr	r1, [r3, #0]
   1897e:	f004 ff87 	bl	1d890 <memcpy>
                it = (gxTarget*)gxmalloc(sizeof(gxTarget));
   18982:	2004      	movs	r0, #4
   18984:	f7f3 ff6e 	bl	c864 <malloc>
                if (it == NULL)
   18988:	4604      	mov	r4, r0
   1898a:	2800      	cmp	r0, #0
   1898c:	d0b3      	beq.n	188f6 <cosem_setPushSetup+0x1e>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1898e:	9b00      	ldr	r3, [sp, #0]
   18990:	aa01      	add	r2, sp, #4
   18992:	6898      	ldr	r0, [r3, #8]
   18994:	2102      	movs	r1, #2
   18996:	f002 fe24 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1899a:	2800      	cmp	r0, #0
   1899c:	d1ab      	bne.n	188f6 <cosem_setPushSetup+0x1e>
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   1899e:	9801      	ldr	r0, [sp, #4]
   189a0:	f002 ff99 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   189a4:	9b00      	ldr	r3, [sp, #0]
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   189a6:	7020      	strb	r0, [r4, #0]
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   189a8:	6898      	ldr	r0, [r3, #8]
   189aa:	aa01      	add	r2, sp, #4
   189ac:	2103      	movs	r1, #3
   189ae:	f002 fe18 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   189b2:	2800      	cmp	r0, #0
   189b4:	d19f      	bne.n	188f6 <cosem_setPushSetup+0x1e>
                it->dataIndex = (unsigned char)var_toInteger(tmp3);
   189b6:	9801      	ldr	r0, [sp, #4]
   189b8:	f002 ff8d 	bl	1b8d6 <var_toInteger>
   189bc:	b2c0      	uxtb	r0, r0
   189be:	8060      	strh	r0, [r4, #2]
                arr_push(&object->pushObjectList, key_init(obj, it));
   189c0:	4621      	mov	r1, r4
   189c2:	9806      	ldr	r0, [sp, #24]
   189c4:	f7fb fe6d 	bl	146a2 <key_init>
   189c8:	4601      	mov	r1, r0
   189ca:	4628      	mov	r0, r5
   189cc:	f7f8 fb60 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   189d0:	3701      	adds	r7, #1
   189d2:	68b0      	ldr	r0, [r6, #8]
   189d4:	88c3      	ldrh	r3, [r0, #6]
   189d6:	42bb      	cmp	r3, r7
   189d8:	d18f      	bne.n	188fa <cosem_setPushSetup+0x22>
   189da:	e78c      	b.n	188f6 <cosem_setPushSetup+0x1e>
   189dc:	2700      	movs	r7, #0
   189de:	e7f8      	b.n	189d2 <cosem_setPushSetup+0xfa>
    else if (index == 3)
   189e0:	2a03      	cmp	r2, #3
   189e2:	d135      	bne.n	18a50 <cosem_setPushSetup+0x178>
        bb_clear(&object->destination);
   189e4:	f101 0720 	add.w	r7, r1, #32
   189e8:	4638      	mov	r0, r7
   189ea:	f7f5 f922 	bl	dc32 <bb_clear>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   189ee:	68b0      	ldr	r0, [r6, #8]
   189f0:	466a      	mov	r2, sp
   189f2:	2100      	movs	r1, #0
   189f4:	f002 fdf5 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   189f8:	4604      	mov	r4, r0
   189fa:	bb28      	cbnz	r0, 18a48 <cosem_setPushSetup+0x170>
        object->service = (DLMS_SERVICE_TYPE)var_toInteger(tmp);
   189fc:	9800      	ldr	r0, [sp, #0]
   189fe:	f002 ff6a 	bl	1b8d6 <var_toInteger>
   18a02:	7728      	strb	r0, [r5, #28]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   18a04:	68b0      	ldr	r0, [r6, #8]
   18a06:	466a      	mov	r2, sp
   18a08:	2101      	movs	r1, #1
   18a0a:	f002 fdea 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18a0e:	4604      	mov	r4, r0
   18a10:	b9d0      	cbnz	r0, 18a48 <cosem_setPushSetup+0x170>
        if (tmp->byteArr != NULL && tmp->byteArr->size != 0)
   18a12:	9b00      	ldr	r3, [sp, #0]
   18a14:	689b      	ldr	r3, [r3, #8]
   18a16:	b15b      	cbz	r3, 18a30 <cosem_setPushSetup+0x158>
   18a18:	88db      	ldrh	r3, [r3, #6]
   18a1a:	b14b      	cbz	r3, 18a30 <cosem_setPushSetup+0x158>
            bb_clear(&object->destination);
   18a1c:	4638      	mov	r0, r7
   18a1e:	f7f5 f908 	bl	dc32 <bb_clear>
            bb_set(&object->destination, tmp->byteArr->data, tmp->byteArr->size);
   18a22:	9b00      	ldr	r3, [sp, #0]
   18a24:	689b      	ldr	r3, [r3, #8]
   18a26:	4638      	mov	r0, r7
   18a28:	88da      	ldrh	r2, [r3, #6]
   18a2a:	6819      	ldr	r1, [r3, #0]
   18a2c:	f7f5 f88d 	bl	db4a <bb_set>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   18a30:	68b0      	ldr	r0, [r6, #8]
   18a32:	466a      	mov	r2, sp
   18a34:	2102      	movs	r1, #2
   18a36:	f002 fdd4 	bl	1b5e2 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18a3a:	4604      	mov	r4, r0
   18a3c:	b920      	cbnz	r0, 18a48 <cosem_setPushSetup+0x170>
        object->message = (DLMS_MESSAGE_TYPE)var_toInteger(tmp);
   18a3e:	9800      	ldr	r0, [sp, #0]
   18a40:	f002 ff49 	bl	1b8d6 <var_toInteger>
   18a44:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
   18a48:	4620      	mov	r0, r4
   18a4a:	b00b      	add	sp, #44	; 0x2c
   18a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 4)
   18a50:	2a04      	cmp	r2, #4
   18a52:	d156      	bne.n	18b02 <cosem_setPushSetup+0x22a>
        arr_clearKeyValuePair(&object->communicationWindow);
   18a54:	3530      	adds	r5, #48	; 0x30
   18a56:	4628      	mov	r0, r5
   18a58:	f7f8 fb68 	bl	1112c <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   18a5c:	68b3      	ldr	r3, [r6, #8]
   18a5e:	2b00      	cmp	r3, #0
   18a60:	f43f af49 	beq.w	188f6 <cosem_setPushSetup+0x1e>
            var_init(&start);
   18a64:	a802      	add	r0, sp, #8
   18a66:	f002 fbe2 	bl	1b22e <var_init>
            var_init(&end);
   18a6a:	a806      	add	r0, sp, #24
   18a6c:	f002 fbdf 	bl	1b22e <var_init>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18a70:	2400      	movs	r4, #0
   18a72:	68b0      	ldr	r0, [r6, #8]
   18a74:	88c3      	ldrh	r3, [r0, #6]
   18a76:	42a3      	cmp	r3, r4
   18a78:	d005      	beq.n	18a86 <cosem_setPushSetup+0x1ae>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != 0 ||
   18a7a:	4621      	mov	r1, r4
   18a7c:	466a      	mov	r2, sp
   18a7e:	f002 fdb0 	bl	1b5e2 <va_getByIndex>
   18a82:	4601      	mov	r1, r0
   18a84:	b130      	cbz	r0, 18a94 <cosem_setPushSetup+0x1bc>
            var_clear(&start);
   18a86:	a802      	add	r0, sp, #8
   18a88:	f002 fd2d 	bl	1b4e6 <var_clear>
            var_clear(&end);
   18a8c:	a806      	add	r0, sp, #24
   18a8e:	f002 fd2a 	bl	1b4e6 <var_clear>
   18a92:	e730      	b.n	188f6 <cosem_setPushSetup+0x1e>
                    (ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != 0 ||
   18a94:	9b00      	ldr	r3, [sp, #0]
   18a96:	aa01      	add	r2, sp, #4
   18a98:	6898      	ldr	r0, [r3, #8]
   18a9a:	f002 fda2 	bl	1b5e2 <va_getByIndex>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != 0 ||
   18a9e:	2800      	cmp	r0, #0
   18aa0:	d1f1      	bne.n	18a86 <cosem_setPushSetup+0x1ae>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start)) != 0 ||
   18aa2:	9801      	ldr	r0, [sp, #4]
   18aa4:	aa02      	add	r2, sp, #8
   18aa6:	2119      	movs	r1, #25
   18aa8:	f7f7 ffcc 	bl	10a44 <dlms_changeType2>
                    (ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != 0 ||
   18aac:	2800      	cmp	r0, #0
   18aae:	d1ea      	bne.n	18a86 <cosem_setPushSetup+0x1ae>
                    (ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != 0 ||
   18ab0:	9b00      	ldr	r3, [sp, #0]
   18ab2:	aa01      	add	r2, sp, #4
   18ab4:	6898      	ldr	r0, [r3, #8]
   18ab6:	2101      	movs	r1, #1
   18ab8:	f002 fd93 	bl	1b5e2 <va_getByIndex>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start)) != 0 ||
   18abc:	2800      	cmp	r0, #0
   18abe:	d1e2      	bne.n	18a86 <cosem_setPushSetup+0x1ae>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end)) != 0)
   18ac0:	9801      	ldr	r0, [sp, #4]
   18ac2:	aa06      	add	r2, sp, #24
   18ac4:	2119      	movs	r1, #25
   18ac6:	f7f7 ffbd 	bl	10a44 <dlms_changeType2>
                    (ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != 0 ||
   18aca:	2800      	cmp	r0, #0
   18acc:	d1db      	bne.n	18a86 <cosem_setPushSetup+0x1ae>
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   18ace:	200c      	movs	r0, #12
   18ad0:	f7f3 fec8 	bl	c864 <malloc>
   18ad4:	4607      	mov	r7, r0
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   18ad6:	200c      	movs	r0, #12
   18ad8:	f7f3 fec4 	bl	c864 <malloc>
                time_copy(s, start.dateTime);
   18adc:	9904      	ldr	r1, [sp, #16]
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   18ade:	4680      	mov	r8, r0
                time_copy(s, start.dateTime);
   18ae0:	4638      	mov	r0, r7
   18ae2:	f7f5 fffc 	bl	eade <time_copy>
                time_copy(e, end.dateTime);
   18ae6:	9908      	ldr	r1, [sp, #32]
   18ae8:	4640      	mov	r0, r8
   18aea:	f7f5 fff8 	bl	eade <time_copy>
                arr_push(&object->communicationWindow, key_init(s, e));
   18aee:	4641      	mov	r1, r8
   18af0:	4638      	mov	r0, r7
   18af2:	f7fb fdd6 	bl	146a2 <key_init>
   18af6:	4601      	mov	r1, r0
   18af8:	4628      	mov	r0, r5
   18afa:	f7f8 fac9 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18afe:	3401      	adds	r4, #1
   18b00:	e7b7      	b.n	18a72 <cosem_setPushSetup+0x19a>
    else if (index == 5)
   18b02:	2a05      	cmp	r2, #5
   18b04:	d104      	bne.n	18b10 <cosem_setPushSetup+0x238>
        object->randomisationStartInterval = (uint16_t)var_toInteger(value);
   18b06:	4618      	mov	r0, r3
   18b08:	f002 fee5 	bl	1b8d6 <var_toInteger>
   18b0c:	87a8      	strh	r0, [r5, #60]	; 0x3c
   18b0e:	e6f2      	b.n	188f6 <cosem_setPushSetup+0x1e>
    else if (index == 6)
   18b10:	2a06      	cmp	r2, #6
   18b12:	d105      	bne.n	18b20 <cosem_setPushSetup+0x248>
        object->numberOfRetries = (unsigned char)var_toInteger(value);
   18b14:	4618      	mov	r0, r3
   18b16:	f002 fede 	bl	1b8d6 <var_toInteger>
   18b1a:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
   18b1e:	e6ea      	b.n	188f6 <cosem_setPushSetup+0x1e>
    else if (index == 7)
   18b20:	2a07      	cmp	r2, #7
   18b22:	d105      	bne.n	18b30 <cosem_setPushSetup+0x258>
        object->repetitionDelay = (uint16_t)var_toInteger(value);
   18b24:	4618      	mov	r0, r3
   18b26:	f002 fed6 	bl	1b8d6 <var_toInteger>
   18b2a:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
   18b2e:	e6e2      	b.n	188f6 <cosem_setPushSetup+0x1e>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   18b30:	f44f 7481 	mov.w	r4, #258	; 0x102
   18b34:	e788      	b.n	18a48 <cosem_setPushSetup+0x170>

00018b36 <setUnitCharge>:
{
   18b36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ret = obj_clearChargeTables(&target->chargeTables);
   18b3a:	f101 070c 	add.w	r7, r1, #12
{
   18b3e:	b085      	sub	sp, #20
   18b40:	4680      	mov	r8, r0
    ret = obj_clearChargeTables(&target->chargeTables);
   18b42:	4638      	mov	r0, r7
{
   18b44:	460d      	mov	r5, r1
   18b46:	4616      	mov	r6, r2
    ret = obj_clearChargeTables(&target->chargeTables);
   18b48:	f7fb ff24 	bl	14994 <obj_clearChargeTables>
    if (ret != 0)
   18b4c:	4604      	mov	r4, r0
   18b4e:	2800      	cmp	r0, #0
   18b50:	d14d      	bne.n	18bee <setUnitCharge+0xb8>
    ret = va_getByIndex(value->Arr, 0, &it);
   18b52:	4601      	mov	r1, r0
   18b54:	aa01      	add	r2, sp, #4
   18b56:	68b0      	ldr	r0, [r6, #8]
   18b58:	f002 fd43 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   18b5c:	4604      	mov	r4, r0
   18b5e:	2800      	cmp	r0, #0
   18b60:	d145      	bne.n	18bee <setUnitCharge+0xb8>
    ret = va_getByIndex(it->Arr, 0, &it2);
   18b62:	9b01      	ldr	r3, [sp, #4]
   18b64:	4601      	mov	r1, r0
   18b66:	aa02      	add	r2, sp, #8
   18b68:	6898      	ldr	r0, [r3, #8]
   18b6a:	f002 fd3a 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   18b6e:	4604      	mov	r4, r0
   18b70:	2800      	cmp	r0, #0
   18b72:	d13c      	bne.n	18bee <setUnitCharge+0xb8>
    target->chargePerUnitScaling.commodityScale = (char)var_toInteger(it2);
   18b74:	9802      	ldr	r0, [sp, #8]
   18b76:	f002 feae 	bl	1b8d6 <var_toInteger>
    ret = va_getByIndex(it->Arr, 1, &it2);
   18b7a:	9b01      	ldr	r3, [sp, #4]
    target->chargePerUnitScaling.commodityScale = (char)var_toInteger(it2);
   18b7c:	7028      	strb	r0, [r5, #0]
    ret = va_getByIndex(it->Arr, 1, &it2);
   18b7e:	6898      	ldr	r0, [r3, #8]
   18b80:	aa02      	add	r2, sp, #8
   18b82:	2101      	movs	r1, #1
   18b84:	f002 fd2d 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   18b88:	4604      	mov	r4, r0
   18b8a:	bb80      	cbnz	r0, 18bee <setUnitCharge+0xb8>
    target->chargePerUnitScaling.priceScale = (char)var_toInteger(it2);
   18b8c:	9802      	ldr	r0, [sp, #8]
   18b8e:	f002 fea2 	bl	1b8d6 <var_toInteger>
   18b92:	7068      	strb	r0, [r5, #1]
    ret = va_getByIndex(value->Arr, 1, &it);
   18b94:	68b0      	ldr	r0, [r6, #8]
   18b96:	aa01      	add	r2, sp, #4
   18b98:	2101      	movs	r1, #1
   18b9a:	f002 fd22 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   18b9e:	4604      	mov	r4, r0
   18ba0:	bb28      	cbnz	r0, 18bee <setUnitCharge+0xb8>
    ret = va_getByIndex(it->Arr, 0, &it2);
   18ba2:	9b01      	ldr	r3, [sp, #4]
   18ba4:	4601      	mov	r1, r0
   18ba6:	aa02      	add	r2, sp, #8
   18ba8:	6898      	ldr	r0, [r3, #8]
   18baa:	f002 fd1a 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   18bae:	4604      	mov	r4, r0
   18bb0:	b9e8      	cbnz	r0, 18bee <setUnitCharge+0xb8>
    type = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   18bb2:	9802      	ldr	r0, [sp, #8]
   18bb4:	f002 fe8f 	bl	1b8d6 <var_toInteger>
    ret = va_getByIndex(it->Arr, 1, &it2);
   18bb8:	9b01      	ldr	r3, [sp, #4]
    type = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   18bba:	4681      	mov	r9, r0
    ret = va_getByIndex(it->Arr, 1, &it2);
   18bbc:	aa02      	add	r2, sp, #8
   18bbe:	6898      	ldr	r0, [r3, #8]
   18bc0:	2101      	movs	r1, #1
   18bc2:	f002 fd0e 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   18bc6:	4604      	mov	r4, r0
   18bc8:	b988      	cbnz	r0, 18bee <setUnitCharge+0xb8>
    if (bb_size(it2->byteArr) == 6)
   18bca:	9b02      	ldr	r3, [sp, #8]
   18bcc:	6898      	ldr	r0, [r3, #8]
   18bce:	f7f4 fe6a 	bl	d8a6 <bb_size>
   18bd2:	2806      	cmp	r0, #6
   18bd4:	d10f      	bne.n	18bf6 <setUnitCharge+0xc0>
        if ((ret = oa_findByLN(&settings->objects, type, it2->byteArr->data, &target->commodity.target)) != 0)
   18bd6:	9b02      	ldr	r3, [sp, #8]
   18bd8:	689a      	ldr	r2, [r3, #8]
   18bda:	fa1f f189 	uxth.w	r1, r9
   18bde:	6812      	ldr	r2, [r2, #0]
   18be0:	1d2b      	adds	r3, r5, #4
   18be2:	f108 0098 	add.w	r0, r8, #152	; 0x98
   18be6:	f002 fab9 	bl	1b15c <oa_findByLN>
   18bea:	4604      	mov	r4, r0
   18bec:	b120      	cbz	r0, 18bf8 <setUnitCharge+0xc2>
}
   18bee:	4620      	mov	r0, r4
   18bf0:	b005      	add	sp, #20
   18bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        target->commodity.target = NULL;
   18bf6:	606c      	str	r4, [r5, #4]
    ret = va_getByIndex(it->Arr, 2, &it2);
   18bf8:	9b01      	ldr	r3, [sp, #4]
   18bfa:	aa02      	add	r2, sp, #8
   18bfc:	6898      	ldr	r0, [r3, #8]
   18bfe:	2102      	movs	r1, #2
   18c00:	f002 fcef 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   18c04:	4604      	mov	r4, r0
   18c06:	2800      	cmp	r0, #0
   18c08:	d1f1      	bne.n	18bee <setUnitCharge+0xb8>
    target->commodity.attributeIndex = (unsigned char)var_toInteger(it2);
   18c0a:	9802      	ldr	r0, [sp, #8]
   18c0c:	f002 fe63 	bl	1b8d6 <var_toInteger>
   18c10:	7228      	strb	r0, [r5, #8]
    obj_clearChargeTables(&target->chargeTables);
   18c12:	4638      	mov	r0, r7
   18c14:	f7fb febe 	bl	14994 <obj_clearChargeTables>
    ret = va_getByIndex(value->Arr, 2, &it);
   18c18:	68b0      	ldr	r0, [r6, #8]
   18c1a:	aa01      	add	r2, sp, #4
   18c1c:	2102      	movs	r1, #2
   18c1e:	f002 fce0 	bl	1b5e2 <va_getByIndex>
    if (ret != 0)
   18c22:	4604      	mov	r4, r0
   18c24:	2800      	cmp	r0, #0
   18c26:	d1e2      	bne.n	18bee <setUnitCharge+0xb8>
    for (pos = 0; pos != it->Arr->size; ++pos)
   18c28:	4680      	mov	r8, r0
   18c2a:	9b01      	ldr	r3, [sp, #4]
   18c2c:	6898      	ldr	r0, [r3, #8]
   18c2e:	88c3      	ldrh	r3, [r0, #6]
   18c30:	4543      	cmp	r3, r8
   18c32:	d0dc      	beq.n	18bee <setUnitCharge+0xb8>
        ret = va_getByIndex(it->Arr, pos, &it2);
   18c34:	aa02      	add	r2, sp, #8
   18c36:	4641      	mov	r1, r8
   18c38:	f002 fcd3 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   18c3c:	4606      	mov	r6, r0
   18c3e:	bb80      	cbnz	r0, 18ca2 <setUnitCharge+0x16c>
        ct = (gxChargeTable*)gxmalloc(sizeof(gxChargeTable));
   18c40:	2010      	movs	r0, #16
   18c42:	f7f3 fe0f 	bl	c864 <malloc>
        if (ct == NULL)
   18c46:	4605      	mov	r5, r0
   18c48:	b340      	cbz	r0, 18c9c <setUnitCharge+0x166>
        arr_push(&target->chargeTables, ct);
   18c4a:	4601      	mov	r1, r0
   18c4c:	4638      	mov	r0, r7
   18c4e:	f7f8 fa1f 	bl	11090 <arr_push>
        BYTE_BUFFER_INIT(&ct->index);
   18c52:	4628      	mov	r0, r5
   18c54:	f7f4 fe2a 	bl	d8ac <bb_init>
        ret = va_getByIndex(it2->Arr, 0, &tmp);
   18c58:	9b02      	ldr	r3, [sp, #8]
   18c5a:	4631      	mov	r1, r6
   18c5c:	6898      	ldr	r0, [r3, #8]
   18c5e:	aa03      	add	r2, sp, #12
   18c60:	f002 fcbf 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   18c64:	4606      	mov	r6, r0
   18c66:	b9e0      	cbnz	r0, 18ca2 <setUnitCharge+0x16c>
        bb_set2(&ct->index, tmp->byteArr, 0, bb_size(tmp->byteArr));
   18c68:	9b03      	ldr	r3, [sp, #12]
   18c6a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   18c6e:	4648      	mov	r0, r9
   18c70:	f7f4 fe19 	bl	d8a6 <bb_size>
   18c74:	4632      	mov	r2, r6
   18c76:	4603      	mov	r3, r0
   18c78:	4649      	mov	r1, r9
   18c7a:	4628      	mov	r0, r5
   18c7c:	f7f4 ff94 	bl	dba8 <bb_set2>
        ret = va_getByIndex(it2->Arr, 1, &tmp);
   18c80:	9b02      	ldr	r3, [sp, #8]
   18c82:	aa03      	add	r2, sp, #12
   18c84:	6898      	ldr	r0, [r3, #8]
   18c86:	2101      	movs	r1, #1
   18c88:	f002 fcab 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   18c8c:	b958      	cbnz	r0, 18ca6 <setUnitCharge+0x170>
        ct->chargePerUnit = (short)var_toInteger(tmp);
   18c8e:	9803      	ldr	r0, [sp, #12]
   18c90:	f002 fe21 	bl	1b8d6 <var_toInteger>
    for (pos = 0; pos != it->Arr->size; ++pos)
   18c94:	f108 0801 	add.w	r8, r8, #1
        ct->chargePerUnit = (short)var_toInteger(tmp);
   18c98:	81a8      	strh	r0, [r5, #12]
    for (pos = 0; pos != it->Arr->size; ++pos)
   18c9a:	e7c6      	b.n	18c2a <setUnitCharge+0xf4>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18c9c:	f44f 7482 	mov.w	r4, #260	; 0x104
   18ca0:	e7a5      	b.n	18bee <setUnitCharge+0xb8>
        ret = va_getByIndex(it2->Arr, 0, &tmp);
   18ca2:	4634      	mov	r4, r6
   18ca4:	e7a3      	b.n	18bee <setUnitCharge+0xb8>
        ret = va_getByIndex(it2->Arr, 1, &tmp);
   18ca6:	4604      	mov	r4, r0
   18ca8:	e7a1      	b.n	18bee <setUnitCharge+0xb8>

00018caa <cosem_setCharge>:
{
   18caa:	b530      	push	{r4, r5, lr}
    if (index == 2)
   18cac:	2a02      	cmp	r2, #2
{
   18cae:	b085      	sub	sp, #20
   18cb0:	460d      	mov	r5, r1
   18cb2:	461c      	mov	r4, r3
    if (index == 2)
   18cb4:	d106      	bne.n	18cc4 <cosem_setCharge+0x1a>
        object->totalAmountPaid = (short)var_toInteger(value);
   18cb6:	4618      	mov	r0, r3
   18cb8:	f002 fe0d 	bl	1b8d6 <var_toInteger>
   18cbc:	b200      	sxth	r0, r0
   18cbe:	6128      	str	r0, [r5, #16]
    int ret = 0;
   18cc0:	2400      	movs	r4, #0
   18cc2:	e014      	b.n	18cee <cosem_setCharge+0x44>
    else if (index == 3)
   18cc4:	2a03      	cmp	r2, #3
   18cc6:	d104      	bne.n	18cd2 <cosem_setCharge+0x28>
        object->chargeType = (unsigned char)var_toInteger(value);
   18cc8:	4618      	mov	r0, r3
   18cca:	f002 fe04 	bl	1b8d6 <var_toInteger>
   18cce:	7528      	strb	r0, [r5, #20]
   18cd0:	e7f6      	b.n	18cc0 <cosem_setCharge+0x16>
    else if (index == 4)
   18cd2:	2a04      	cmp	r2, #4
   18cd4:	d104      	bne.n	18ce0 <cosem_setCharge+0x36>
        object->priority = (unsigned char)var_toInteger(value);
   18cd6:	4618      	mov	r0, r3
   18cd8:	f002 fdfd 	bl	1b8d6 <var_toInteger>
   18cdc:	7568      	strb	r0, [r5, #21]
   18cde:	e7ef      	b.n	18cc0 <cosem_setCharge+0x16>
    else if (index == 5)
   18ce0:	2a05      	cmp	r2, #5
   18ce2:	d107      	bne.n	18cf4 <cosem_setCharge+0x4a>
        ret = setUnitCharge(settings, &object->unitChargeActive, value);
   18ce4:	461a      	mov	r2, r3
   18ce6:	3118      	adds	r1, #24
        ret = setUnitCharge(settings, &object->unitChargePassive, value);
   18ce8:	f7ff ff25 	bl	18b36 <setUnitCharge>
   18cec:	4604      	mov	r4, r0
}
   18cee:	4620      	mov	r0, r4
   18cf0:	b005      	add	sp, #20
   18cf2:	bd30      	pop	{r4, r5, pc}
    else if (index == 6)
   18cf4:	2a06      	cmp	r2, #6
   18cf6:	d102      	bne.n	18cfe <cosem_setCharge+0x54>
        ret = setUnitCharge(settings, &object->unitChargePassive, value);
   18cf8:	461a      	mov	r2, r3
   18cfa:	3130      	adds	r1, #48	; 0x30
   18cfc:	e7f4      	b.n	18ce8 <cosem_setCharge+0x3e>
    else if (index == 7)
   18cfe:	2a07      	cmp	r2, #7
   18d00:	d11d      	bne.n	18d3e <cosem_setCharge+0x94>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   18d02:	781b      	ldrb	r3, [r3, #0]
   18d04:	2b09      	cmp	r3, #9
   18d06:	d115      	bne.n	18d34 <cosem_setCharge+0x8a>
   18d08:	68a3      	ldr	r3, [r4, #8]
   18d0a:	b19b      	cbz	r3, 18d34 <cosem_setCharge+0x8a>
            var_init(&tmp);
   18d0c:	4668      	mov	r0, sp
   18d0e:	f002 fa8e 	bl	1b22e <var_init>
            if ((ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp)) != 0)
   18d12:	4620      	mov	r0, r4
   18d14:	466a      	mov	r2, sp
   18d16:	2119      	movs	r1, #25
   18d18:	f7f7 fe94 	bl	10a44 <dlms_changeType2>
   18d1c:	4604      	mov	r4, r0
   18d1e:	b118      	cbz	r0, 18d28 <cosem_setCharge+0x7e>
            var_clear(&tmp);
   18d20:	4668      	mov	r0, sp
   18d22:	f002 fbe0 	bl	1b4e6 <var_clear>
   18d26:	e7e2      	b.n	18cee <cosem_setCharge+0x44>
            time_copy(&object->unitChargeActivationTime, tmp.dateTime);
   18d28:	9902      	ldr	r1, [sp, #8]
   18d2a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   18d2e:	f7f5 fed6 	bl	eade <time_copy>
   18d32:	e7f5      	b.n	18d20 <cosem_setCharge+0x76>
            time_clear(&object->unitChargeActivationTime);
   18d34:	f105 0048 	add.w	r0, r5, #72	; 0x48
   18d38:	f7f5 fea0 	bl	ea7c <time_clear>
   18d3c:	e7c0      	b.n	18cc0 <cosem_setCharge+0x16>
    else if (index == 8)
   18d3e:	2a08      	cmp	r2, #8
   18d40:	d104      	bne.n	18d4c <cosem_setCharge+0xa2>
        object->period = var_toInteger(value);
   18d42:	4618      	mov	r0, r3
   18d44:	f002 fdc7 	bl	1b8d6 <var_toInteger>
   18d48:	6568      	str	r0, [r5, #84]	; 0x54
   18d4a:	e7b9      	b.n	18cc0 <cosem_setCharge+0x16>
    else if (index == 9)
   18d4c:	2a09      	cmp	r2, #9
   18d4e:	d105      	bne.n	18d5c <cosem_setCharge+0xb2>
        object->chargeConfiguration = var_toInteger(value);
   18d50:	4618      	mov	r0, r3
   18d52:	f002 fdc0 	bl	1b8d6 <var_toInteger>
   18d56:	f885 0058 	strb.w	r0, [r5, #88]	; 0x58
   18d5a:	e7b1      	b.n	18cc0 <cosem_setCharge+0x16>
    else if (index == 10)
   18d5c:	2a0a      	cmp	r2, #10
   18d5e:	d109      	bne.n	18d74 <cosem_setCharge+0xca>
        if (value->vt == DLMS_DATA_TYPE_DATETIME)
   18d60:	781b      	ldrb	r3, [r3, #0]
   18d62:	2b19      	cmp	r3, #25
   18d64:	d11c      	bne.n	18da0 <cosem_setCharge+0xf6>
            object->lastCollectionTime = *value->dateTime;
   18d66:	68a3      	ldr	r3, [r4, #8]
   18d68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18d6c:	355c      	adds	r5, #92	; 0x5c
   18d6e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   18d72:	e7a5      	b.n	18cc0 <cosem_setCharge+0x16>
    else if (index == 11)
   18d74:	2a0b      	cmp	r2, #11
   18d76:	d104      	bne.n	18d82 <cosem_setCharge+0xd8>
        object->lastCollectionAmount = var_toInteger(value);
   18d78:	4618      	mov	r0, r3
   18d7a:	f002 fdac 	bl	1b8d6 <var_toInteger>
   18d7e:	66a8      	str	r0, [r5, #104]	; 0x68
   18d80:	e79e      	b.n	18cc0 <cosem_setCharge+0x16>
    else if (index == 12)
   18d82:	2a0c      	cmp	r2, #12
   18d84:	d104      	bne.n	18d90 <cosem_setCharge+0xe6>
        object->totalAmountRemaining = var_toInteger(value);
   18d86:	4618      	mov	r0, r3
   18d88:	f002 fda5 	bl	1b8d6 <var_toInteger>
   18d8c:	66e8      	str	r0, [r5, #108]	; 0x6c
   18d8e:	e797      	b.n	18cc0 <cosem_setCharge+0x16>
    else if (index == 13)
   18d90:	2a0d      	cmp	r2, #13
   18d92:	d105      	bne.n	18da0 <cosem_setCharge+0xf6>
        object->proportion = (uint16_t)var_toInteger(value);
   18d94:	4618      	mov	r0, r3
   18d96:	f002 fd9e 	bl	1b8d6 <var_toInteger>
   18d9a:	f8a5 0070 	strh.w	r0, [r5, #112]	; 0x70
   18d9e:	e78f      	b.n	18cc0 <cosem_setCharge+0x16>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   18da0:	f44f 7481 	mov.w	r4, #258	; 0x102
   18da4:	e7a3      	b.n	18cee <cosem_setCharge+0x44>

00018da6 <cosem_setCredit>:
{
   18da6:	b530      	push	{r4, r5, lr}
    if (index == 2)
   18da8:	2902      	cmp	r1, #2
{
   18daa:	b085      	sub	sp, #20
   18dac:	4605      	mov	r5, r0
   18dae:	4614      	mov	r4, r2
    if (index == 2)
   18db0:	d107      	bne.n	18dc2 <cosem_setCredit+0x1c>
        object->currentCreditAmount = var_toInteger(value);
   18db2:	4610      	mov	r0, r2
   18db4:	f002 fd8f 	bl	1b8d6 <var_toInteger>
   18db8:	6128      	str	r0, [r5, #16]
    int ret = 0;
   18dba:	2400      	movs	r4, #0
}
   18dbc:	4620      	mov	r0, r4
   18dbe:	b005      	add	sp, #20
   18dc0:	bd30      	pop	{r4, r5, pc}
    else if (index == 3)
   18dc2:	2903      	cmp	r1, #3
   18dc4:	d104      	bne.n	18dd0 <cosem_setCredit+0x2a>
        object->type = (unsigned char)var_toInteger(value);
   18dc6:	4610      	mov	r0, r2
   18dc8:	f002 fd85 	bl	1b8d6 <var_toInteger>
   18dcc:	7528      	strb	r0, [r5, #20]
   18dce:	e7f4      	b.n	18dba <cosem_setCredit+0x14>
    else if (index == 4)
   18dd0:	2904      	cmp	r1, #4
   18dd2:	d104      	bne.n	18dde <cosem_setCredit+0x38>
        object->priority = (unsigned char)var_toInteger(value);
   18dd4:	4610      	mov	r0, r2
   18dd6:	f002 fd7e 	bl	1b8d6 <var_toInteger>
   18dda:	7568      	strb	r0, [r5, #21]
   18ddc:	e7ed      	b.n	18dba <cosem_setCredit+0x14>
    else if (index == 5)
   18dde:	2905      	cmp	r1, #5
   18de0:	d104      	bne.n	18dec <cosem_setCredit+0x46>
        object->warningThreshold = var_toInteger(value);
   18de2:	4610      	mov	r0, r2
   18de4:	f002 fd77 	bl	1b8d6 <var_toInteger>
   18de8:	61a8      	str	r0, [r5, #24]
   18dea:	e7e6      	b.n	18dba <cosem_setCredit+0x14>
    else if (index == 6)
   18dec:	2906      	cmp	r1, #6
   18dee:	d104      	bne.n	18dfa <cosem_setCredit+0x54>
        object->limit = var_toInteger(value);
   18df0:	4610      	mov	r0, r2
   18df2:	f002 fd70 	bl	1b8d6 <var_toInteger>
   18df6:	61e8      	str	r0, [r5, #28]
   18df8:	e7df      	b.n	18dba <cosem_setCredit+0x14>
    else if (index == 7)
   18dfa:	2907      	cmp	r1, #7
   18dfc:	d105      	bne.n	18e0a <cosem_setCredit+0x64>
        object->creditConfiguration = var_toInteger(value);
   18dfe:	4610      	mov	r0, r2
   18e00:	f002 fd69 	bl	1b8d6 <var_toInteger>
   18e04:	f885 0020 	strb.w	r0, [r5, #32]
   18e08:	e7d7      	b.n	18dba <cosem_setCredit+0x14>
    else if (index == 8)
   18e0a:	2908      	cmp	r1, #8
   18e0c:	d105      	bne.n	18e1a <cosem_setCredit+0x74>
        object->status = (unsigned char)var_toInteger(value);
   18e0e:	4610      	mov	r0, r2
   18e10:	f002 fd61 	bl	1b8d6 <var_toInteger>
   18e14:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
   18e18:	e7cf      	b.n	18dba <cosem_setCredit+0x14>
    else if (index == 9)
   18e1a:	2909      	cmp	r1, #9
   18e1c:	d104      	bne.n	18e28 <cosem_setCredit+0x82>
        object->presetCreditAmount = var_toInteger(value);
   18e1e:	4610      	mov	r0, r2
   18e20:	f002 fd59 	bl	1b8d6 <var_toInteger>
   18e24:	6268      	str	r0, [r5, #36]	; 0x24
   18e26:	e7c8      	b.n	18dba <cosem_setCredit+0x14>
    else if (index == 10)
   18e28:	290a      	cmp	r1, #10
   18e2a:	d104      	bne.n	18e36 <cosem_setCredit+0x90>
        object->creditAvailableThreshold = var_toInteger(value);
   18e2c:	4610      	mov	r0, r2
   18e2e:	f002 fd52 	bl	1b8d6 <var_toInteger>
   18e32:	62a8      	str	r0, [r5, #40]	; 0x28
   18e34:	e7c1      	b.n	18dba <cosem_setCredit+0x14>
    else if (index == 11)
   18e36:	290b      	cmp	r1, #11
   18e38:	d112      	bne.n	18e60 <cosem_setCredit+0xba>
        var_init(&tmp);
   18e3a:	4668      	mov	r0, sp
   18e3c:	f002 f9f7 	bl	1b22e <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   18e40:	68a0      	ldr	r0, [r4, #8]
   18e42:	466a      	mov	r2, sp
   18e44:	2119      	movs	r1, #25
   18e46:	f7f7 fdcf 	bl	109e8 <dlms_changeType>
        if (ret == 0)
   18e4a:	4604      	mov	r4, r0
   18e4c:	b920      	cbnz	r0, 18e58 <cosem_setCredit+0xb2>
            time_copy(&object->period, tmp.dateTime);
   18e4e:	9902      	ldr	r1, [sp, #8]
   18e50:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   18e54:	f7f5 fe43 	bl	eade <time_copy>
        var_clear(&tmp);
   18e58:	4668      	mov	r0, sp
   18e5a:	f002 fb44 	bl	1b4e6 <var_clear>
   18e5e:	e7ad      	b.n	18dbc <cosem_setCredit+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   18e60:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   18e64:	e7aa      	b.n	18dbc <cosem_setCredit+0x16>

00018e66 <cosem_setAccount>:
{
   18e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   18e6a:	2902      	cmp	r1, #2
{
   18e6c:	b086      	sub	sp, #24
   18e6e:	4605      	mov	r5, r0
   18e70:	4616      	mov	r6, r2
    if (index == 2)
   18e72:	d119      	bne.n	18ea8 <cosem_setAccount+0x42>
        ret = va_getByIndex(value->Arr, 0, &it);
   18e74:	68b0      	ldr	r0, [r6, #8]
   18e76:	aa01      	add	r2, sp, #4
   18e78:	2100      	movs	r1, #0
   18e7a:	f002 fbb2 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   18e7e:	4604      	mov	r4, r0
   18e80:	b970      	cbnz	r0, 18ea0 <cosem_setAccount+0x3a>
        object->paymentMode = (DLMS_ACCOUNT_PAYMENT_MODE)var_toInteger(it);
   18e82:	9801      	ldr	r0, [sp, #4]
   18e84:	f002 fd27 	bl	1b8d6 <var_toInteger>
   18e88:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(value->Arr, 1, &it);
   18e8a:	68b0      	ldr	r0, [r6, #8]
   18e8c:	aa01      	add	r2, sp, #4
   18e8e:	2101      	movs	r1, #1
   18e90:	f002 fba7 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   18e94:	4604      	mov	r4, r0
   18e96:	b918      	cbnz	r0, 18ea0 <cosem_setAccount+0x3a>
        object->accountStatus = (DLMS_ACCOUNT_STATUS)var_toInteger(it);
   18e98:	9801      	ldr	r0, [sp, #4]
   18e9a:	f002 fd1c 	bl	1b8d6 <var_toInteger>
   18e9e:	7468      	strb	r0, [r5, #17]
}
   18ea0:	4620      	mov	r0, r4
   18ea2:	b006      	add	sp, #24
   18ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (index == 3)
   18ea8:	2903      	cmp	r1, #3
   18eaa:	d105      	bne.n	18eb8 <cosem_setAccount+0x52>
        object->currentCreditInUse = (unsigned char)var_toInteger(value);
   18eac:	4610      	mov	r0, r2
   18eae:	f002 fd12 	bl	1b8d6 <var_toInteger>
   18eb2:	74a8      	strb	r0, [r5, #18]
    int ret = 0, pos;
   18eb4:	2400      	movs	r4, #0
   18eb6:	e7f3      	b.n	18ea0 <cosem_setAccount+0x3a>
    else if (index == 4)
   18eb8:	2904      	cmp	r1, #4
   18eba:	d10c      	bne.n	18ed6 <cosem_setAccount+0x70>
        if (value->bitArr == NULL || value->bitArr->size == 0)
   18ebc:	6893      	ldr	r3, [r2, #8]
   18ebe:	2b00      	cmp	r3, #0
   18ec0:	f000 8194 	beq.w	191ec <cosem_setAccount+0x386>
   18ec4:	88db      	ldrh	r3, [r3, #6]
   18ec6:	2b00      	cmp	r3, #0
   18ec8:	f000 8190 	beq.w	191ec <cosem_setAccount+0x386>
            object->currentCreditStatus = (DLMS_ACCOUNT_CREDIT_STATUS)var_toInteger(value);
   18ecc:	4610      	mov	r0, r2
   18ece:	f002 fd02 	bl	1b8d6 <var_toInteger>
   18ed2:	74e8      	strb	r0, [r5, #19]
   18ed4:	e7ee      	b.n	18eb4 <cosem_setAccount+0x4e>
    else if (index == 5)
   18ed6:	2905      	cmp	r1, #5
   18ed8:	d104      	bne.n	18ee4 <cosem_setAccount+0x7e>
        object->availableCredit = var_toInteger(value);
   18eda:	4610      	mov	r0, r2
   18edc:	f002 fcfb 	bl	1b8d6 <var_toInteger>
   18ee0:	6168      	str	r0, [r5, #20]
   18ee2:	e7e7      	b.n	18eb4 <cosem_setAccount+0x4e>
    else if (index == 6)
   18ee4:	2906      	cmp	r1, #6
   18ee6:	d104      	bne.n	18ef2 <cosem_setAccount+0x8c>
        object->amountToClear = var_toInteger(value);
   18ee8:	4610      	mov	r0, r2
   18eea:	f002 fcf4 	bl	1b8d6 <var_toInteger>
   18eee:	61a8      	str	r0, [r5, #24]
   18ef0:	e7e0      	b.n	18eb4 <cosem_setAccount+0x4e>
    else if (index == 7)
   18ef2:	2907      	cmp	r1, #7
   18ef4:	d104      	bne.n	18f00 <cosem_setAccount+0x9a>
        object->clearanceThreshold = var_toInteger(value);
   18ef6:	4610      	mov	r0, r2
   18ef8:	f002 fced 	bl	1b8d6 <var_toInteger>
   18efc:	61e8      	str	r0, [r5, #28]
   18efe:	e7d9      	b.n	18eb4 <cosem_setAccount+0x4e>
    else if (index == 8)
   18f00:	2908      	cmp	r1, #8
   18f02:	d104      	bne.n	18f0e <cosem_setAccount+0xa8>
        object->aggregatedDebt = var_toInteger(value);
   18f04:	4610      	mov	r0, r2
   18f06:	f002 fce6 	bl	1b8d6 <var_toInteger>
   18f0a:	6228      	str	r0, [r5, #32]
   18f0c:	e7d2      	b.n	18eb4 <cosem_setAccount+0x4e>
    else if (index == 9)
   18f0e:	2909      	cmp	r1, #9
   18f10:	d127      	bne.n	18f62 <cosem_setAccount+0xfc>
        arr_clear(&object->creditReferences);
   18f12:	3524      	adds	r5, #36	; 0x24
   18f14:	4628      	mov	r0, r5
   18f16:	f7f8 f8d0 	bl	110ba <arr_clear>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18f1a:	2700      	movs	r7, #0
   18f1c:	68b0      	ldr	r0, [r6, #8]
   18f1e:	88c3      	ldrh	r3, [r0, #6]
   18f20:	42bb      	cmp	r3, r7
   18f22:	d0c7      	beq.n	18eb4 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   18f24:	aa01      	add	r2, sp, #4
   18f26:	4639      	mov	r1, r7
   18f28:	f002 fb5b 	bl	1b5e2 <va_getByIndex>
            if (ret != 0)
   18f2c:	4604      	mov	r4, r0
   18f2e:	2800      	cmp	r0, #0
   18f30:	d1b6      	bne.n	18ea0 <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   18f32:	9b01      	ldr	r3, [sp, #4]
   18f34:	689b      	ldr	r3, [r3, #8]
   18f36:	b913      	cbnz	r3, 18f3e <cosem_setAccount+0xd8>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   18f38:	f44f 7481 	mov.w	r4, #258	; 0x102
   18f3c:	e7b0      	b.n	18ea0 <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   18f3e:	88d8      	ldrh	r0, [r3, #6]
   18f40:	2806      	cmp	r0, #6
   18f42:	d1f9      	bne.n	18f38 <cosem_setAccount+0xd2>
            ba = (unsigned char*)gxmalloc(6);
   18f44:	f7f3 fc8e 	bl	c864 <malloc>
            memcpy(ba, it->byteArr->data, 6);
   18f48:	9b01      	ldr	r3, [sp, #4]
   18f4a:	689b      	ldr	r3, [r3, #8]
   18f4c:	681b      	ldr	r3, [r3, #0]
   18f4e:	681a      	ldr	r2, [r3, #0]
   18f50:	6002      	str	r2, [r0, #0]
   18f52:	889b      	ldrh	r3, [r3, #4]
   18f54:	8083      	strh	r3, [r0, #4]
            ba = (unsigned char*)gxmalloc(6);
   18f56:	4601      	mov	r1, r0
            arr_push(&object->creditReferences, ba);
   18f58:	4628      	mov	r0, r5
   18f5a:	f7f8 f899 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18f5e:	3701      	adds	r7, #1
   18f60:	e7dc      	b.n	18f1c <cosem_setAccount+0xb6>
    else if (index == 10)
   18f62:	290a      	cmp	r1, #10
   18f64:	d125      	bne.n	18fb2 <cosem_setAccount+0x14c>
        arr_clear(&object->chargeReferences);
   18f66:	3530      	adds	r5, #48	; 0x30
   18f68:	4628      	mov	r0, r5
   18f6a:	f7f8 f8a6 	bl	110ba <arr_clear>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18f6e:	2700      	movs	r7, #0
   18f70:	68b0      	ldr	r0, [r6, #8]
   18f72:	88c3      	ldrh	r3, [r0, #6]
   18f74:	42bb      	cmp	r3, r7
   18f76:	d09d      	beq.n	18eb4 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   18f78:	aa01      	add	r2, sp, #4
   18f7a:	4639      	mov	r1, r7
   18f7c:	f002 fb31 	bl	1b5e2 <va_getByIndex>
            if (ret != 0)
   18f80:	4604      	mov	r4, r0
   18f82:	2800      	cmp	r0, #0
   18f84:	d18c      	bne.n	18ea0 <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   18f86:	9b01      	ldr	r3, [sp, #4]
   18f88:	689b      	ldr	r3, [r3, #8]
   18f8a:	2b00      	cmp	r3, #0
   18f8c:	d0d4      	beq.n	18f38 <cosem_setAccount+0xd2>
   18f8e:	88d8      	ldrh	r0, [r3, #6]
   18f90:	2806      	cmp	r0, #6
   18f92:	d1d1      	bne.n	18f38 <cosem_setAccount+0xd2>
            ba = (unsigned char*)gxmalloc(6);
   18f94:	f7f3 fc66 	bl	c864 <malloc>
            memcpy(ba, it->byteArr->data, 6);
   18f98:	9b01      	ldr	r3, [sp, #4]
   18f9a:	689b      	ldr	r3, [r3, #8]
   18f9c:	681b      	ldr	r3, [r3, #0]
   18f9e:	681a      	ldr	r2, [r3, #0]
   18fa0:	6002      	str	r2, [r0, #0]
   18fa2:	889b      	ldrh	r3, [r3, #4]
   18fa4:	8083      	strh	r3, [r0, #4]
            ba = (unsigned char*)gxmalloc(6);
   18fa6:	4601      	mov	r1, r0
            arr_push(&object->chargeReferences, ba);
   18fa8:	4628      	mov	r0, r5
   18faa:	f7f8 f871 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   18fae:	3701      	adds	r7, #1
   18fb0:	e7de      	b.n	18f70 <cosem_setAccount+0x10a>
    else if (index == 11)
   18fb2:	290b      	cmp	r1, #11
   18fb4:	d152      	bne.n	1905c <cosem_setAccount+0x1f6>
        obj_clearCreditChargeConfigurations(&object->creditChargeConfigurations);
   18fb6:	353c      	adds	r5, #60	; 0x3c
   18fb8:	4628      	mov	r0, r5
   18fba:	f7fb fbae 	bl	1471a <obj_clearCreditChargeConfigurations>
        ccc = NULL;
   18fbe:	2700      	movs	r7, #0
        for (pos = 0; pos != value->Arr->size; ++pos)
   18fc0:	46b8      	mov	r8, r7
   18fc2:	68b0      	ldr	r0, [r6, #8]
   18fc4:	88c3      	ldrh	r3, [r0, #6]
   18fc6:	4543      	cmp	r3, r8
   18fc8:	f43f af74 	beq.w	18eb4 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   18fcc:	aa01      	add	r2, sp, #4
   18fce:	4641      	mov	r1, r8
   18fd0:	f002 fb07 	bl	1b5e2 <va_getByIndex>
            if (ret != 0)
   18fd4:	4604      	mov	r4, r0
   18fd6:	2800      	cmp	r0, #0
   18fd8:	f040 810a 	bne.w	191f0 <cosem_setAccount+0x38a>
            ccc = (gxCreditChargeConfiguration*)gxmalloc(sizeof(gxCreditChargeConfiguration));
   18fdc:	200d      	movs	r0, #13
   18fde:	f7f3 fc41 	bl	c864 <malloc>
            if (ccc == NULL)
   18fe2:	4607      	mov	r7, r0
   18fe4:	2800      	cmp	r0, #0
   18fe6:	f000 810a 	beq.w	191fe <cosem_setAccount+0x398>
            ret = va_getByIndex(it->Arr, 0, &tmp2);
   18fea:	9b01      	ldr	r3, [sp, #4]
   18fec:	4621      	mov	r1, r4
   18fee:	6898      	ldr	r0, [r3, #8]
   18ff0:	aa02      	add	r2, sp, #8
   18ff2:	f002 faf6 	bl	1b5e2 <va_getByIndex>
            if (ret != 0)
   18ff6:	4604      	mov	r4, r0
   18ff8:	2800      	cmp	r0, #0
   18ffa:	f040 80fc 	bne.w	191f6 <cosem_setAccount+0x390>
            memcpy(ccc->creditReference, tmp2->byteArr->data, tmp2->byteArr->size);
   18ffe:	9b02      	ldr	r3, [sp, #8]
   19000:	6899      	ldr	r1, [r3, #8]
   19002:	4638      	mov	r0, r7
   19004:	88ca      	ldrh	r2, [r1, #6]
   19006:	6809      	ldr	r1, [r1, #0]
   19008:	230d      	movs	r3, #13
   1900a:	f004 fc4f 	bl	1d8ac <__memcpy_chk>
            ret = va_getByIndex(it->Arr, 1, &tmp2);
   1900e:	9b01      	ldr	r3, [sp, #4]
   19010:	aa02      	add	r2, sp, #8
   19012:	6898      	ldr	r0, [r3, #8]
   19014:	2101      	movs	r1, #1
   19016:	f002 fae4 	bl	1b5e2 <va_getByIndex>
            if (ret != 0)
   1901a:	4604      	mov	r4, r0
   1901c:	2800      	cmp	r0, #0
   1901e:	f040 80ea 	bne.w	191f6 <cosem_setAccount+0x390>
            memcpy(ccc->chargeReference, tmp2->byteArr->data, tmp2->byteArr->size);
   19022:	9b02      	ldr	r3, [sp, #8]
   19024:	6899      	ldr	r1, [r3, #8]
   19026:	1db8      	adds	r0, r7, #6
   19028:	88ca      	ldrh	r2, [r1, #6]
   1902a:	6809      	ldr	r1, [r1, #0]
   1902c:	2307      	movs	r3, #7
   1902e:	f004 fc3d 	bl	1d8ac <__memcpy_chk>
            ret = va_getByIndex(it->Arr, 2, &tmp2);
   19032:	9b01      	ldr	r3, [sp, #4]
   19034:	aa02      	add	r2, sp, #8
   19036:	6898      	ldr	r0, [r3, #8]
   19038:	2102      	movs	r1, #2
   1903a:	f002 fad2 	bl	1b5e2 <va_getByIndex>
            if (ret != 0)
   1903e:	4604      	mov	r4, r0
   19040:	2800      	cmp	r0, #0
   19042:	f040 80d8 	bne.w	191f6 <cosem_setAccount+0x390>
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)var_toInteger(tmp2);
   19046:	9802      	ldr	r0, [sp, #8]
   19048:	f002 fc45 	bl	1b8d6 <var_toInteger>
            arr_push(&object->creditChargeConfigurations, ccc);
   1904c:	4639      	mov	r1, r7
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)var_toInteger(tmp2);
   1904e:	7338      	strb	r0, [r7, #12]
            arr_push(&object->creditChargeConfigurations, ccc);
   19050:	4628      	mov	r0, r5
   19052:	f7f8 f81d 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19056:	f108 0801 	add.w	r8, r8, #1
   1905a:	e7b2      	b.n	18fc2 <cosem_setAccount+0x15c>
    else if (index == 12)
   1905c:	290c      	cmp	r1, #12
   1905e:	d144      	bne.n	190ea <cosem_setAccount+0x284>
        obj_clearTokenGatewayConfigurations(&object->tokenGatewayConfigurations);
   19060:	3548      	adds	r5, #72	; 0x48
   19062:	4628      	mov	r0, r5
   19064:	f7fb fb79 	bl	1475a <obj_clearTokenGatewayConfigurations>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19068:	f04f 0800 	mov.w	r8, #0
   1906c:	68b0      	ldr	r0, [r6, #8]
   1906e:	88c3      	ldrh	r3, [r0, #6]
   19070:	4543      	cmp	r3, r8
   19072:	f43f af1f 	beq.w	18eb4 <cosem_setAccount+0x4e>
            if ((ret = va_getByIndex(value->Arr, pos, &it)) != 0)
   19076:	aa01      	add	r2, sp, #4
   19078:	4641      	mov	r1, r8
   1907a:	f002 fab2 	bl	1b5e2 <va_getByIndex>
   1907e:	4604      	mov	r4, r0
   19080:	2800      	cmp	r0, #0
   19082:	f47f af0d 	bne.w	18ea0 <cosem_setAccount+0x3a>
            gwc = (gxTokenGatewayConfiguration*)gxmalloc(sizeof(gxTokenGatewayConfiguration));
   19086:	2007      	movs	r0, #7
   19088:	f7f3 fbec 	bl	c864 <malloc>
            if (gwc == NULL)
   1908c:	4607      	mov	r7, r0
   1908e:	2800      	cmp	r0, #0
   19090:	f000 80b5 	beq.w	191fe <cosem_setAccount+0x398>
            if ((ret = va_getByIndex(it->Arr, 0, &tmp2)) != 0)
   19094:	9b01      	ldr	r3, [sp, #4]
            memset(gwc->creditReference, 0, 6);
   19096:	6004      	str	r4, [r0, #0]
   19098:	8084      	strh	r4, [r0, #4]
            if ((ret = va_getByIndex(it->Arr, 0, &tmp2)) != 0)
   1909a:	4621      	mov	r1, r4
   1909c:	6898      	ldr	r0, [r3, #8]
   1909e:	aa02      	add	r2, sp, #8
   190a0:	f002 fa9f 	bl	1b5e2 <va_getByIndex>
   190a4:	4604      	mov	r4, r0
   190a6:	2800      	cmp	r0, #0
   190a8:	f47f aefa 	bne.w	18ea0 <cosem_setAccount+0x3a>
            if (tmp2->byteArr->size == 6)
   190ac:	9b02      	ldr	r3, [sp, #8]
   190ae:	689b      	ldr	r3, [r3, #8]
   190b0:	88da      	ldrh	r2, [r3, #6]
   190b2:	2a06      	cmp	r2, #6
   190b4:	d104      	bne.n	190c0 <cosem_setAccount+0x25a>
                memcpy(gwc->creditReference, tmp2->byteArr->data, tmp2->byteArr->size);
   190b6:	681b      	ldr	r3, [r3, #0]
   190b8:	681a      	ldr	r2, [r3, #0]
   190ba:	603a      	str	r2, [r7, #0]
   190bc:	889b      	ldrh	r3, [r3, #4]
   190be:	80bb      	strh	r3, [r7, #4]
            if ((ret = va_getByIndex(it->Arr, 1, &tmp2)) != 0)
   190c0:	9b01      	ldr	r3, [sp, #4]
   190c2:	aa02      	add	r2, sp, #8
   190c4:	6898      	ldr	r0, [r3, #8]
   190c6:	2101      	movs	r1, #1
   190c8:	f002 fa8b 	bl	1b5e2 <va_getByIndex>
   190cc:	4604      	mov	r4, r0
   190ce:	2800      	cmp	r0, #0
   190d0:	f040 8091 	bne.w	191f6 <cosem_setAccount+0x390>
            gwc->tokenProportion = (unsigned char)var_toInteger(tmp2);
   190d4:	9802      	ldr	r0, [sp, #8]
   190d6:	f002 fbfe 	bl	1b8d6 <var_toInteger>
            arr_push(&object->tokenGatewayConfigurations, gwc);
   190da:	4639      	mov	r1, r7
            gwc->tokenProportion = (unsigned char)var_toInteger(tmp2);
   190dc:	71b8      	strb	r0, [r7, #6]
            arr_push(&object->tokenGatewayConfigurations, gwc);
   190de:	4628      	mov	r0, r5
   190e0:	f7f7 ffd6 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   190e4:	f108 0801 	add.w	r8, r8, #1
   190e8:	e7c0      	b.n	1906c <cosem_setAccount+0x206>
    else if (index == 13)
   190ea:	290d      	cmp	r1, #13
   190ec:	d112      	bne.n	19114 <cosem_setAccount+0x2ae>
        var_init(&tmp);
   190ee:	a802      	add	r0, sp, #8
   190f0:	f002 f89d 	bl	1b22e <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   190f4:	68b0      	ldr	r0, [r6, #8]
   190f6:	aa02      	add	r2, sp, #8
   190f8:	2119      	movs	r1, #25
   190fa:	f7f7 fc75 	bl	109e8 <dlms_changeType>
        if (ret == 0)
   190fe:	4604      	mov	r4, r0
   19100:	b920      	cbnz	r0, 1910c <cosem_setAccount+0x2a6>
            time_copy(&object->accountActivationTime, tmp.dateTime);
   19102:	9904      	ldr	r1, [sp, #16]
   19104:	f105 0054 	add.w	r0, r5, #84	; 0x54
            time_copy(&object->accountClosureTime, tmp.dateTime);
   19108:	f7f5 fce9 	bl	eade <time_copy>
        var_clear(&tmp);
   1910c:	a802      	add	r0, sp, #8
   1910e:	f002 f9ea 	bl	1b4e6 <var_clear>
   19112:	e6c5      	b.n	18ea0 <cosem_setAccount+0x3a>
    else if (index == 14)
   19114:	290e      	cmp	r1, #14
   19116:	d10e      	bne.n	19136 <cosem_setAccount+0x2d0>
        var_init(&tmp);
   19118:	a802      	add	r0, sp, #8
   1911a:	f002 f888 	bl	1b22e <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   1911e:	68b0      	ldr	r0, [r6, #8]
   19120:	aa02      	add	r2, sp, #8
   19122:	2119      	movs	r1, #25
   19124:	f7f7 fc60 	bl	109e8 <dlms_changeType>
        if (ret == 0)
   19128:	4604      	mov	r4, r0
   1912a:	2800      	cmp	r0, #0
   1912c:	d1ee      	bne.n	1910c <cosem_setAccount+0x2a6>
            time_copy(&object->accountClosureTime, tmp.dateTime);
   1912e:	9904      	ldr	r1, [sp, #16]
   19130:	f105 0060 	add.w	r0, r5, #96	; 0x60
   19134:	e7e8      	b.n	19108 <cosem_setAccount+0x2a2>
    else if (index == 15)
   19136:	290f      	cmp	r1, #15
   19138:	d138      	bne.n	191ac <cosem_setAccount+0x346>
        bb_clear(&object->currency.name);
   1913a:	f100 086c 	add.w	r8, r0, #108	; 0x6c
   1913e:	4640      	mov	r0, r8
   19140:	f7f4 fd77 	bl	dc32 <bb_clear>
        ret = va_getByIndex(value->Arr, 0, &it);
   19144:	68b0      	ldr	r0, [r6, #8]
   19146:	aa01      	add	r2, sp, #4
   19148:	2100      	movs	r1, #0
   1914a:	f002 fa4a 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   1914e:	4604      	mov	r4, r0
   19150:	2800      	cmp	r0, #0
   19152:	f47f aea5 	bne.w	18ea0 <cosem_setAccount+0x3a>
        if (it->strVal != NULL && it->strVal->size != 0)
   19156:	9b01      	ldr	r3, [sp, #4]
   19158:	689f      	ldr	r7, [r3, #8]
   1915a:	b157      	cbz	r7, 19172 <cosem_setAccount+0x30c>
   1915c:	88fb      	ldrh	r3, [r7, #6]
   1915e:	b143      	cbz	r3, 19172 <cosem_setAccount+0x30c>
            bb_set2(&object->currency.name, it->strVal, 0, bb_size(it->strVal));
   19160:	4638      	mov	r0, r7
   19162:	f7f4 fba0 	bl	d8a6 <bb_size>
   19166:	4622      	mov	r2, r4
   19168:	4603      	mov	r3, r0
   1916a:	4639      	mov	r1, r7
   1916c:	4640      	mov	r0, r8
   1916e:	f7f4 fd1b 	bl	dba8 <bb_set2>
        ret = va_getByIndex(value->Arr, 1, &it);
   19172:	68b0      	ldr	r0, [r6, #8]
   19174:	aa01      	add	r2, sp, #4
   19176:	2101      	movs	r1, #1
   19178:	f002 fa33 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   1917c:	4604      	mov	r4, r0
   1917e:	2800      	cmp	r0, #0
   19180:	f47f ae8e 	bne.w	18ea0 <cosem_setAccount+0x3a>
        object->currency.scale = (char)var_toInteger(it);
   19184:	9801      	ldr	r0, [sp, #4]
   19186:	f002 fba6 	bl	1b8d6 <var_toInteger>
   1918a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
        ret = va_getByIndex(value->Arr, 2, &it);
   1918e:	68b0      	ldr	r0, [r6, #8]
   19190:	aa01      	add	r2, sp, #4
   19192:	2102      	movs	r1, #2
   19194:	f002 fa25 	bl	1b5e2 <va_getByIndex>
        if (ret != 0)
   19198:	4604      	mov	r4, r0
   1919a:	2800      	cmp	r0, #0
   1919c:	f47f ae80 	bne.w	18ea0 <cosem_setAccount+0x3a>
        object->currency.unit = (DLMS_CURRENCY)var_toInteger(it);
   191a0:	9801      	ldr	r0, [sp, #4]
   191a2:	f002 fb98 	bl	1b8d6 <var_toInteger>
   191a6:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
   191aa:	e679      	b.n	18ea0 <cosem_setAccount+0x3a>
    else if (index == 16)
   191ac:	2910      	cmp	r1, #16
   191ae:	d104      	bne.n	191ba <cosem_setAccount+0x354>
        object->lowCreditThreshold = var_toInteger(value);
   191b0:	4610      	mov	r0, r2
   191b2:	f002 fb90 	bl	1b8d6 <var_toInteger>
   191b6:	67e8      	str	r0, [r5, #124]	; 0x7c
   191b8:	e67c      	b.n	18eb4 <cosem_setAccount+0x4e>
    else if (index == 17)
   191ba:	2911      	cmp	r1, #17
   191bc:	d105      	bne.n	191ca <cosem_setAccount+0x364>
        object->nextCreditAvailableThreshold = var_toInteger(value);
   191be:	4610      	mov	r0, r2
   191c0:	f002 fb89 	bl	1b8d6 <var_toInteger>
   191c4:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
   191c8:	e674      	b.n	18eb4 <cosem_setAccount+0x4e>
    else if (index == 18)
   191ca:	2912      	cmp	r1, #18
   191cc:	d105      	bne.n	191da <cosem_setAccount+0x374>
        object->maxProvision = (uint16_t)var_toInteger(value);
   191ce:	4610      	mov	r0, r2
   191d0:	f002 fb81 	bl	1b8d6 <var_toInteger>
   191d4:	f8a5 0084 	strh.w	r0, [r5, #132]	; 0x84
   191d8:	e66c      	b.n	18eb4 <cosem_setAccount+0x4e>
    else if (index == 19)
   191da:	2913      	cmp	r1, #19
   191dc:	f47f aeac 	bne.w	18f38 <cosem_setAccount+0xd2>
        object->maxProvisionPeriod = var_toInteger(value);
   191e0:	4610      	mov	r0, r2
   191e2:	f002 fb78 	bl	1b8d6 <var_toInteger>
   191e6:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   191ea:	e663      	b.n	18eb4 <cosem_setAccount+0x4e>
            return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   191ec:	2403      	movs	r4, #3
   191ee:	e657      	b.n	18ea0 <cosem_setAccount+0x3a>
        if (ret != 0 && ccc != NULL)
   191f0:	2f00      	cmp	r7, #0
   191f2:	f43f ae55 	beq.w	18ea0 <cosem_setAccount+0x3a>
            gxfree(gwc);
   191f6:	4638      	mov	r0, r7
   191f8:	f7f3 fb3c 	bl	c874 <free>
   191fc:	e650      	b.n	18ea0 <cosem_setAccount+0x3a>
                ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   191fe:	f44f 7482 	mov.w	r4, #260	; 0x104
        if (ret != 0 && gwc != NULL)
   19202:	e64d      	b.n	18ea0 <cosem_setAccount+0x3a>

00019204 <cosem_setImageTransfer>:
    if (index == 2)
   19204:	2902      	cmp	r1, #2
{
   19206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1920a:	4604      	mov	r4, r0
   1920c:	4617      	mov	r7, r2
    if (index == 2)
   1920e:	d108      	bne.n	19222 <cosem_setImageTransfer+0x1e>
        object->imageBlockSize = var_toInteger(value);
   19210:	4610      	mov	r0, r2
   19212:	f002 fb60 	bl	1b8d6 <var_toInteger>
   19216:	6120      	str	r0, [r4, #16]
    int pos, ret = 0;
   19218:	2400      	movs	r4, #0
}
   1921a:	4620      	mov	r0, r4
   1921c:	b003      	add	sp, #12
   1921e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (index == 3)
   19222:	2903      	cmp	r1, #3
   19224:	d10c      	bne.n	19240 <cosem_setImageTransfer+0x3c>
        ba_clear(&object->imageTransferredBlocksStatus);
   19226:	3414      	adds	r4, #20
   19228:	4620      	mov	r0, r4
   1922a:	f7f4 faa8 	bl	d77e <ba_clear>
        if (value->bitArr != NULL)
   1922e:	68bb      	ldr	r3, [r7, #8]
   19230:	2b00      	cmp	r3, #0
   19232:	d0f1      	beq.n	19218 <cosem_setImageTransfer+0x14>
            ba_copy(&object->imageTransferredBlocksStatus, value->bitArr->data, (uint16_t)value->bitArr->size);
   19234:	88da      	ldrh	r2, [r3, #6]
   19236:	6819      	ldr	r1, [r3, #0]
   19238:	4620      	mov	r0, r4
   1923a:	f7f4 faab 	bl	d794 <ba_copy>
   1923e:	e7eb      	b.n	19218 <cosem_setImageTransfer+0x14>
    else if (index == 4)
   19240:	2904      	cmp	r1, #4
   19242:	d104      	bne.n	1924e <cosem_setImageTransfer+0x4a>
        object->imageFirstNotTransferredBlockNumber = var_toInteger(value);
   19244:	4610      	mov	r0, r2
   19246:	f002 fb46 	bl	1b8d6 <var_toInteger>
   1924a:	61e0      	str	r0, [r4, #28]
   1924c:	e7e4      	b.n	19218 <cosem_setImageTransfer+0x14>
    else if (index == 5)
   1924e:	2905      	cmp	r1, #5
   19250:	d108      	bne.n	19264 <cosem_setImageTransfer+0x60>
        object->imageTransferEnabled = var_toInteger(value) == 0 ? 0 : 1;
   19252:	4610      	mov	r0, r2
   19254:	f002 fb3f 	bl	1b8d6 <var_toInteger>
   19258:	3800      	subs	r0, #0
   1925a:	bf18      	it	ne
   1925c:	2001      	movne	r0, #1
   1925e:	f884 0020 	strb.w	r0, [r4, #32]
   19262:	e7d9      	b.n	19218 <cosem_setImageTransfer+0x14>
    else if (index == 6)
   19264:	2906      	cmp	r1, #6
   19266:	d105      	bne.n	19274 <cosem_setImageTransfer+0x70>
        object->imageTransferStatus = (DLMS_IMAGE_TRANSFER_STATUS)var_toInteger(value);
   19268:	4610      	mov	r0, r2
   1926a:	f002 fb34 	bl	1b8d6 <var_toInteger>
   1926e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   19272:	e7d1      	b.n	19218 <cosem_setImageTransfer+0x14>
    else if (index == 7)
   19274:	2907      	cmp	r1, #7
   19276:	d161      	bne.n	1933c <cosem_setImageTransfer+0x138>
        arr_clear(&object->imageActivateInfo);
   19278:	f100 0624 	add.w	r6, r0, #36	; 0x24
   1927c:	4630      	mov	r0, r6
   1927e:	f7f7 ff1c 	bl	110ba <arr_clear>
        if (value->Arr != NULL)
   19282:	68bb      	ldr	r3, [r7, #8]
   19284:	2b00      	cmp	r3, #0
   19286:	d0c7      	beq.n	19218 <cosem_setImageTransfer+0x14>
            item = NULL;
   19288:	2500      	movs	r5, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   1928a:	46a9      	mov	r9, r5
   1928c:	e051      	b.n	19332 <cosem_setImageTransfer+0x12e>
                ret = va_getByIndex(value->Arr, pos, &it);
   1928e:	466a      	mov	r2, sp
   19290:	4649      	mov	r1, r9
   19292:	f002 f9a6 	bl	1b5e2 <va_getByIndex>
                if (ret != 0)
   19296:	4604      	mov	r4, r0
   19298:	2800      	cmp	r0, #0
   1929a:	d155      	bne.n	19348 <cosem_setImageTransfer+0x144>
                item = (gxImageActivateInfo*)gxmalloc(sizeof(gxImageActivateInfo));
   1929c:	201c      	movs	r0, #28
   1929e:	f7f3 fae1 	bl	c864 <malloc>
                if (item == NULL)
   192a2:	4605      	mov	r5, r0
   192a4:	2800      	cmp	r0, #0
   192a6:	d04c      	beq.n	19342 <cosem_setImageTransfer+0x13e>
                BYTE_BUFFER_INIT(&item->identification);
   192a8:	f100 0b04 	add.w	fp, r0, #4
   192ac:	4658      	mov	r0, fp
                BYTE_BUFFER_INIT(&item->signature);
   192ae:	f105 0a10 	add.w	sl, r5, #16
                BYTE_BUFFER_INIT(&item->identification);
   192b2:	f7f4 fafb 	bl	d8ac <bb_init>
                BYTE_BUFFER_INIT(&item->signature);
   192b6:	4650      	mov	r0, sl
   192b8:	f7f4 faf8 	bl	d8ac <bb_init>
                ret = va_getByIndex(it->Arr, 0, &tmp);
   192bc:	9b00      	ldr	r3, [sp, #0]
   192be:	4621      	mov	r1, r4
   192c0:	6898      	ldr	r0, [r3, #8]
   192c2:	aa01      	add	r2, sp, #4
   192c4:	f002 f98d 	bl	1b5e2 <va_getByIndex>
                if (ret != 0)
   192c8:	4604      	mov	r4, r0
   192ca:	2800      	cmp	r0, #0
   192cc:	d13f      	bne.n	1934e <cosem_setImageTransfer+0x14a>
                item->size = var_toInteger(tmp);
   192ce:	9801      	ldr	r0, [sp, #4]
   192d0:	f002 fb01 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(it->Arr, 1, &tmp);
   192d4:	9b00      	ldr	r3, [sp, #0]
                item->size = var_toInteger(tmp);
   192d6:	6028      	str	r0, [r5, #0]
                ret = va_getByIndex(it->Arr, 1, &tmp);
   192d8:	aa01      	add	r2, sp, #4
   192da:	6898      	ldr	r0, [r3, #8]
   192dc:	2101      	movs	r1, #1
   192de:	f002 f980 	bl	1b5e2 <va_getByIndex>
                if (ret != 0)
   192e2:	4604      	mov	r4, r0
   192e4:	bb98      	cbnz	r0, 1934e <cosem_setImageTransfer+0x14a>
                bb_set2(&item->identification, tmp->byteArr, 0, bb_size(tmp->byteArr));
   192e6:	9b01      	ldr	r3, [sp, #4]
   192e8:	f8d3 8008 	ldr.w	r8, [r3, #8]
   192ec:	4640      	mov	r0, r8
   192ee:	f7f4 fada 	bl	d8a6 <bb_size>
   192f2:	4622      	mov	r2, r4
   192f4:	4603      	mov	r3, r0
   192f6:	4641      	mov	r1, r8
   192f8:	4658      	mov	r0, fp
   192fa:	f7f4 fc55 	bl	dba8 <bb_set2>
                ret = va_getByIndex(it->Arr, 2, &tmp);
   192fe:	9b00      	ldr	r3, [sp, #0]
   19300:	aa01      	add	r2, sp, #4
   19302:	6898      	ldr	r0, [r3, #8]
   19304:	2102      	movs	r1, #2
   19306:	f002 f96c 	bl	1b5e2 <va_getByIndex>
                if (ret != 0)
   1930a:	4604      	mov	r4, r0
   1930c:	b9f8      	cbnz	r0, 1934e <cosem_setImageTransfer+0x14a>
                bb_set2(&item->signature, tmp->byteArr, 0, bb_size(tmp->byteArr));
   1930e:	9b01      	ldr	r3, [sp, #4]
   19310:	f8d3 8008 	ldr.w	r8, [r3, #8]
   19314:	4640      	mov	r0, r8
   19316:	f7f4 fac6 	bl	d8a6 <bb_size>
   1931a:	4622      	mov	r2, r4
   1931c:	4603      	mov	r3, r0
   1931e:	4641      	mov	r1, r8
   19320:	4650      	mov	r0, sl
   19322:	f7f4 fc41 	bl	dba8 <bb_set2>
                arr_push(&object->imageActivateInfo, item);
   19326:	4629      	mov	r1, r5
   19328:	4630      	mov	r0, r6
   1932a:	f7f7 feb1 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1932e:	f109 0901 	add.w	r9, r9, #1
   19332:	68b8      	ldr	r0, [r7, #8]
   19334:	88c3      	ldrh	r3, [r0, #6]
   19336:	454b      	cmp	r3, r9
   19338:	d1a9      	bne.n	1928e <cosem_setImageTransfer+0x8a>
   1933a:	e76d      	b.n	19218 <cosem_setImageTransfer+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1933c:	f44f 7481 	mov.w	r4, #258	; 0x102
   19340:	e76b      	b.n	1921a <cosem_setImageTransfer+0x16>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19342:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   19346:	e768      	b.n	1921a <cosem_setImageTransfer+0x16>
            if (ret != 0 && item != NULL)
   19348:	2d00      	cmp	r5, #0
   1934a:	f43f af66 	beq.w	1921a <cosem_setImageTransfer+0x16>
                gxfree(item);
   1934e:	4628      	mov	r0, r5
   19350:	f7f3 fa90 	bl	c874 <free>
   19354:	e761      	b.n	1921a <cosem_setImageTransfer+0x16>

00019356 <setCaptureObjects>:
{
   19356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1935a:	4681      	mov	r9, r0
   1935c:	b085      	sub	sp, #20
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   1935e:	4608      	mov	r0, r1
{
   19360:	460d      	mov	r5, r1
   19362:	4617      	mov	r7, r2
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   19364:	f7fb fa2e 	bl	147c4 <obj_clearProfileGenericCaptureObjects>
   19368:	4604      	mov	r4, r0
   1936a:	bb20      	cbnz	r0, 193b6 <setCaptureObjects+0x60>
    arr_capacity(objects, value->Arr->size);
   1936c:	68bb      	ldr	r3, [r7, #8]
   1936e:	4628      	mov	r0, r5
   19370:	88d9      	ldrh	r1, [r3, #6]
   19372:	f7f7 fe67 	bl	11044 <arr_capacity>
    if (value->Arr != NULL)
   19376:	68bb      	ldr	r3, [r7, #8]
   19378:	2b00      	cmp	r3, #0
   1937a:	f040 8081 	bne.w	19480 <setCaptureObjects+0x12a>
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   1937e:	2400      	movs	r4, #0
    arr_capacity(objects, objects->size);
   19380:	88e9      	ldrh	r1, [r5, #6]
   19382:	4628      	mov	r0, r5
   19384:	f7f7 fe5e 	bl	11044 <arr_capacity>
    return ret;
   19388:	e015      	b.n	193b6 <setCaptureObjects+0x60>
                ret = cosem_createObject(type, &obj);
   1938a:	a901      	add	r1, sp, #4
   1938c:	4630      	mov	r0, r6
   1938e:	f7e8 febb 	bl	2108 <cosem_createObject>
                if (ret != DLMS_ERROR_CODE_OK)
   19392:	4604      	mov	r4, r0
   19394:	b978      	cbnz	r0, 193b6 <setCaptureObjects+0x60>
                ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   19396:	9b03      	ldr	r3, [sp, #12]
   19398:	9801      	ldr	r0, [sp, #4]
   1939a:	689b      	ldr	r3, [r3, #8]
   1939c:	6819      	ldr	r1, [r3, #0]
   1939e:	f7f5 f849 	bl	e434 <cosem_setLogicalName>
                if (ret != DLMS_ERROR_CODE_OK)
   193a2:	4604      	mov	r4, r0
   193a4:	b938      	cbnz	r0, 193b6 <setCaptureObjects+0x60>
                ret = oa_push(&settings->releasedObjects, obj);
   193a6:	9901      	ldr	r1, [sp, #4]
   193a8:	f109 00e4 	add.w	r0, r9, #228	; 0xe4
   193ac:	f001 fe47 	bl	1b03e <oa_push>
                if (ret != DLMS_ERROR_CODE_OK)
   193b0:	4604      	mov	r4, r0
   193b2:	2800      	cmp	r0, #0
   193b4:	d05b      	beq.n	1946e <setCaptureObjects+0x118>
}
   193b6:	4620      	mov	r0, r4
   193b8:	b005      	add	sp, #20
   193ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   193be:	9b02      	ldr	r3, [sp, #8]
   193c0:	aa03      	add	r2, sp, #12
   193c2:	6898      	ldr	r0, [r3, #8]
   193c4:	2102      	movs	r1, #2
   193c6:	f002 f90c 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   193ca:	4604      	mov	r4, r0
   193cc:	2800      	cmp	r0, #0
   193ce:	d1f2      	bne.n	193b6 <setCaptureObjects+0x60>
            co->attributeIndex = (unsigned char)var_toInteger(tmp2);
   193d0:	9803      	ldr	r0, [sp, #12]
   193d2:	f002 fa80 	bl	1b8d6 <var_toInteger>
            ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   193d6:	9b02      	ldr	r3, [sp, #8]
            co->attributeIndex = (unsigned char)var_toInteger(tmp2);
   193d8:	7030      	strb	r0, [r6, #0]
            ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   193da:	6898      	ldr	r0, [r3, #8]
   193dc:	aa03      	add	r2, sp, #12
   193de:	2103      	movs	r1, #3
   193e0:	f002 f8ff 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   193e4:	4604      	mov	r4, r0
   193e6:	2800      	cmp	r0, #0
   193e8:	d1e5      	bne.n	193b6 <setCaptureObjects+0x60>
            co->dataIndex = (unsigned char)var_toInteger(tmp2);
   193ea:	9803      	ldr	r0, [sp, #12]
   193ec:	f002 fa73 	bl	1b8d6 <var_toInteger>
   193f0:	b2c0      	uxtb	r0, r0
   193f2:	8070      	strh	r0, [r6, #2]
            arr_push(objects, key_init(obj, co));
   193f4:	4631      	mov	r1, r6
   193f6:	9801      	ldr	r0, [sp, #4]
   193f8:	f7fb f953 	bl	146a2 <key_init>
   193fc:	4601      	mov	r1, r0
   193fe:	4628      	mov	r0, r5
   19400:	f7f7 fe46 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19404:	f108 0801 	add.w	r8, r8, #1
   19408:	68b8      	ldr	r0, [r7, #8]
   1940a:	88c3      	ldrh	r3, [r0, #6]
   1940c:	4598      	cmp	r8, r3
   1940e:	d0b6      	beq.n	1937e <setCaptureObjects+0x28>
            ret = va_getByIndex(value->Arr, pos, &tmp);
   19410:	aa02      	add	r2, sp, #8
   19412:	4641      	mov	r1, r8
   19414:	f002 f8e5 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19418:	4604      	mov	r4, r0
   1941a:	2800      	cmp	r0, #0
   1941c:	d1b0      	bne.n	19380 <setCaptureObjects+0x2a>
            if (tmp->Arr->size != 4)
   1941e:	9b02      	ldr	r3, [sp, #8]
   19420:	6898      	ldr	r0, [r3, #8]
   19422:	88c3      	ldrh	r3, [r0, #6]
   19424:	2b04      	cmp	r3, #4
   19426:	d12d      	bne.n	19484 <setCaptureObjects+0x12e>
            ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   19428:	4621      	mov	r1, r4
   1942a:	aa03      	add	r2, sp, #12
   1942c:	f002 f8d9 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19430:	4604      	mov	r4, r0
   19432:	2800      	cmp	r0, #0
   19434:	d1a4      	bne.n	19380 <setCaptureObjects+0x2a>
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   19436:	9803      	ldr	r0, [sp, #12]
   19438:	f002 fa4d 	bl	1b8d6 <var_toInteger>
            ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   1943c:	9b02      	ldr	r3, [sp, #8]
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   1943e:	b286      	uxth	r6, r0
            ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   19440:	aa03      	add	r2, sp, #12
   19442:	6898      	ldr	r0, [r3, #8]
   19444:	2101      	movs	r1, #1
   19446:	f002 f8cc 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1944a:	4604      	mov	r4, r0
   1944c:	2800      	cmp	r0, #0
   1944e:	d197      	bne.n	19380 <setCaptureObjects+0x2a>
            ret = oa_findByLN(&settings->objects, type, tmp2->byteArr->data, &obj);
   19450:	9b03      	ldr	r3, [sp, #12]
   19452:	689a      	ldr	r2, [r3, #8]
   19454:	4631      	mov	r1, r6
   19456:	6812      	ldr	r2, [r2, #0]
   19458:	ab01      	add	r3, sp, #4
   1945a:	f109 0098 	add.w	r0, r9, #152	; 0x98
   1945e:	f001 fe7d 	bl	1b15c <oa_findByLN>
            if (ret != DLMS_ERROR_CODE_OK)
   19462:	4604      	mov	r4, r0
   19464:	2800      	cmp	r0, #0
   19466:	d18b      	bne.n	19380 <setCaptureObjects+0x2a>
            if (obj == NULL)
   19468:	9b01      	ldr	r3, [sp, #4]
   1946a:	2b00      	cmp	r3, #0
   1946c:	d08d      	beq.n	1938a <setCaptureObjects+0x34>
            co = (gxTarget*)gxmalloc(sizeof(gxTarget));
   1946e:	2004      	movs	r0, #4
   19470:	f7f3 f9f8 	bl	c864 <malloc>
            if (co == NULL)
   19474:	4606      	mov	r6, r0
   19476:	2800      	cmp	r0, #0
   19478:	d1a1      	bne.n	193be <setCaptureObjects+0x68>
                ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1947a:	f44f 7482 	mov.w	r4, #260	; 0x104
   1947e:	e77f      	b.n	19380 <setCaptureObjects+0x2a>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19480:	46a0      	mov	r8, r4
   19482:	e7c1      	b.n	19408 <setCaptureObjects+0xb2>
                ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   19484:	f44f 7481 	mov.w	r4, #258	; 0x102
   19488:	e77a      	b.n	19380 <setCaptureObjects+0x2a>

0001948a <cosem_setGsmDiagnostic>:
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
int cosem_setGsmDiagnostic(gxGsmDiagnostic* object, unsigned char index, dlmsVARIANT* value)
{
   1948a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1948e:	3902      	subs	r1, #2
   19490:	b086      	sub	sp, #24
   19492:	4606      	mov	r6, r0
   19494:	4615      	mov	r5, r2
   19496:	2906      	cmp	r1, #6
   19498:	f200 8127 	bhi.w	196ea <cosem_setGsmDiagnostic+0x260>
   1949c:	e8df f011 	tbh	[pc, r1, lsl #1]
   194a0:	00500007 	.word	0x00500007
   194a4:	005a0055 	.word	0x005a0055
   194a8:	00bc005f 	.word	0x00bc005f
   194ac:	00ff      	.short	0x00ff
    dlmsVARIANT* tmp, * it;
    gxAdjacentCell* ac;
    switch (index)
    {
    case 2:
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   194ae:	7813      	ldrb	r3, [r2, #0]
   194b0:	2b09      	cmp	r3, #9
   194b2:	d121      	bne.n	194f8 <cosem_setGsmDiagnostic+0x6e>
        {
            if (object->operatorName != NULL)
   194b4:	6900      	ldr	r0, [r0, #16]
   194b6:	b118      	cbz	r0, 194c0 <cosem_setGsmDiagnostic+0x36>
            {
                gxfree(object->operatorName);
   194b8:	f7f3 f9dc 	bl	c874 <free>
                object->operatorName = NULL;
   194bc:	2300      	movs	r3, #0
   194be:	6133      	str	r3, [r6, #16]
            }

            if (value->byteArr != NULL && bb_size(value->byteArr) != 0)
   194c0:	68a8      	ldr	r0, [r5, #8]
   194c2:	b908      	cbnz	r0, 194c8 <cosem_setGsmDiagnostic+0x3e>
    int ret = 0, pos;
   194c4:	2400      	movs	r4, #0
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
    case 3:
        object->status = (DLMS_GSM_STATUS)var_toInteger(value);
        break;
   194c6:	e037      	b.n	19538 <cosem_setGsmDiagnostic+0xae>
            if (value->byteArr != NULL && bb_size(value->byteArr) != 0)
   194c8:	f7f4 f9ed 	bl	d8a6 <bb_size>
   194cc:	2800      	cmp	r0, #0
   194ce:	d0f9      	beq.n	194c4 <cosem_setGsmDiagnostic+0x3a>
                object->operatorName = (char*)gxmalloc(value->byteArr->size + 1);
   194d0:	68ab      	ldr	r3, [r5, #8]
   194d2:	88d8      	ldrh	r0, [r3, #6]
   194d4:	3001      	adds	r0, #1
   194d6:	f7f3 f9c5 	bl	c864 <malloc>
   194da:	4604      	mov	r4, r0
   194dc:	6130      	str	r0, [r6, #16]
                if (object->operatorName == NULL)
   194de:	b910      	cbnz	r0, 194e6 <cosem_setGsmDiagnostic+0x5c>
                    break;
                }
                ac = (gxAdjacentCell*)gxmalloc(sizeof(gxAdjacentCell));
                if (ac == NULL)
                {
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   194e0:	f44f 7482 	mov.w	r4, #260	; 0x104
                    break;
                }
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
                arr_push(&object->adjacentCells, ac);
            }
            if (ret != 0 && ac != NULL)
   194e4:	e028      	b.n	19538 <cosem_setGsmDiagnostic+0xae>
                memcpy(object->operatorName, value->strVal, value->byteArr->size);
   194e6:	68ad      	ldr	r5, [r5, #8]
   194e8:	88ea      	ldrh	r2, [r5, #6]
   194ea:	4629      	mov	r1, r5
   194ec:	f004 f9d0 	bl	1d890 <memcpy>
                object->operatorName[value->byteArr->size] = '\0';
   194f0:	88eb      	ldrh	r3, [r5, #6]
   194f2:	2000      	movs	r0, #0
   194f4:	54e0      	strb	r0, [r4, r3]
   194f6:	e7e5      	b.n	194c4 <cosem_setGsmDiagnostic+0x3a>
        else if (value->vt == DLMS_DATA_TYPE_STRING)
   194f8:	2b0a      	cmp	r3, #10
   194fa:	f040 80f6 	bne.w	196ea <cosem_setGsmDiagnostic+0x260>
            if (object->operatorName != NULL)
   194fe:	6900      	ldr	r0, [r0, #16]
   19500:	b108      	cbz	r0, 19506 <cosem_setGsmDiagnostic+0x7c>
                gxfree(object->operatorName);
   19502:	f7f3 f9b7 	bl	c874 <free>
            if (value->strVal != NULL && bb_size(value->strVal) != 0)
   19506:	68a8      	ldr	r0, [r5, #8]
            object->operatorName = NULL;
   19508:	2400      	movs	r4, #0
   1950a:	6134      	str	r4, [r6, #16]
            if (value->strVal != NULL && bb_size(value->strVal) != 0)
   1950c:	2800      	cmp	r0, #0
   1950e:	d0d9      	beq.n	194c4 <cosem_setGsmDiagnostic+0x3a>
   19510:	f7f4 f9c9 	bl	d8a6 <bb_size>
   19514:	2800      	cmp	r0, #0
   19516:	d0d5      	beq.n	194c4 <cosem_setGsmDiagnostic+0x3a>
                object->operatorName = (char*)gxmalloc(value->strVal->size + 1);
   19518:	68ab      	ldr	r3, [r5, #8]
   1951a:	88d8      	ldrh	r0, [r3, #6]
   1951c:	3001      	adds	r0, #1
   1951e:	f7f3 f9a1 	bl	c864 <malloc>
   19522:	4607      	mov	r7, r0
   19524:	6130      	str	r0, [r6, #16]
                if (object->operatorName == NULL)
   19526:	2800      	cmp	r0, #0
   19528:	d0da      	beq.n	194e0 <cosem_setGsmDiagnostic+0x56>
                memcpy(object->operatorName, value->strVal, value->strVal->size);
   1952a:	68ad      	ldr	r5, [r5, #8]
   1952c:	88ea      	ldrh	r2, [r5, #6]
   1952e:	4629      	mov	r1, r5
   19530:	f004 f9ae 	bl	1d890 <memcpy>
                object->operatorName[value->strVal->size] = '\0';
   19534:	88eb      	ldrh	r3, [r5, #6]
   19536:	54fc      	strb	r4, [r7, r3]
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   19538:	4620      	mov	r0, r4
   1953a:	b006      	add	sp, #24
   1953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        object->status = (DLMS_GSM_STATUS)var_toInteger(value);
   19540:	4610      	mov	r0, r2
   19542:	f002 f9c8 	bl	1b8d6 <var_toInteger>
   19546:	7530      	strb	r0, [r6, #20]
   19548:	e7bc      	b.n	194c4 <cosem_setGsmDiagnostic+0x3a>
        object->circuitSwitchStatus = (DLMS_GSM_CIRCUIT_SWITCH_STATUS)var_toInteger(value);
   1954a:	4610      	mov	r0, r2
   1954c:	f002 f9c3 	bl	1b8d6 <var_toInteger>
   19550:	7570      	strb	r0, [r6, #21]
        break;
   19552:	e7b7      	b.n	194c4 <cosem_setGsmDiagnostic+0x3a>
        object->packetSwitchStatus = (DLMS_GSM_PACKET_SWITCH_STATUS)var_toInteger(value);
   19554:	4610      	mov	r0, r2
   19556:	f002 f9be 	bl	1b8d6 <var_toInteger>
   1955a:	75b0      	strb	r0, [r6, #22]
        break;
   1955c:	e7b2      	b.n	194c4 <cosem_setGsmDiagnostic+0x3a>
        if (value != NULL && value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1955e:	2a00      	cmp	r2, #0
   19560:	d0b0      	beq.n	194c4 <cosem_setGsmDiagnostic+0x3a>
   19562:	7817      	ldrb	r7, [r2, #0]
   19564:	2f02      	cmp	r7, #2
   19566:	d1ad      	bne.n	194c4 <cosem_setGsmDiagnostic+0x3a>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != 0)
   19568:	68a8      	ldr	r0, [r5, #8]
   1956a:	aa01      	add	r2, sp, #4
   1956c:	2100      	movs	r1, #0
   1956e:	f002 f838 	bl	1b5e2 <va_getByIndex>
   19572:	4604      	mov	r4, r0
   19574:	2800      	cmp	r0, #0
   19576:	d1df      	bne.n	19538 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.cellId = (uint32_t)var_toInteger(tmp);
   19578:	9801      	ldr	r0, [sp, #4]
   1957a:	f002 f9ac 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   1957e:	aa01      	add	r2, sp, #4
            object->cellInfo.cellId = (uint32_t)var_toInteger(tmp);
   19580:	61b0      	str	r0, [r6, #24]
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   19582:	2101      	movs	r1, #1
   19584:	68a8      	ldr	r0, [r5, #8]
   19586:	f002 f82c 	bl	1b5e2 <va_getByIndex>
   1958a:	4604      	mov	r4, r0
   1958c:	2800      	cmp	r0, #0
   1958e:	d1d3      	bne.n	19538 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.locationId = (uint16_t)var_toInteger(tmp);
   19590:	9801      	ldr	r0, [sp, #4]
   19592:	f002 f9a0 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != 0)
   19596:	aa01      	add	r2, sp, #4
            object->cellInfo.locationId = (uint16_t)var_toInteger(tmp);
   19598:	83b0      	strh	r0, [r6, #28]
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != 0)
   1959a:	4639      	mov	r1, r7
   1959c:	68a8      	ldr	r0, [r5, #8]
   1959e:	f002 f820 	bl	1b5e2 <va_getByIndex>
   195a2:	4604      	mov	r4, r0
   195a4:	2800      	cmp	r0, #0
   195a6:	d1c7      	bne.n	19538 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.signalQuality = (unsigned char)var_toInteger(tmp);
   195a8:	9801      	ldr	r0, [sp, #4]
   195aa:	f002 f994 	bl	1b8d6 <var_toInteger>
   195ae:	77b0      	strb	r0, [r6, #30]
            if ((ret = va_getByIndex(value->Arr, 3, &tmp)) != 0)
   195b0:	68a8      	ldr	r0, [r5, #8]
   195b2:	aa01      	add	r2, sp, #4
   195b4:	2103      	movs	r1, #3
   195b6:	f002 f814 	bl	1b5e2 <va_getByIndex>
   195ba:	4604      	mov	r4, r0
   195bc:	2800      	cmp	r0, #0
   195be:	d1bb      	bne.n	19538 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.ber = (unsigned char)var_toInteger(tmp);
   195c0:	9801      	ldr	r0, [sp, #4]
   195c2:	f002 f988 	bl	1b8d6 <var_toInteger>
            if (object->base.version != 0)
   195c6:	78b3      	ldrb	r3, [r6, #2]
            object->cellInfo.ber = (unsigned char)var_toInteger(tmp);
   195c8:	77f0      	strb	r0, [r6, #31]
            if (object->base.version != 0)
   195ca:	2b00      	cmp	r3, #0
   195cc:	f43f af7a 	beq.w	194c4 <cosem_setGsmDiagnostic+0x3a>
                if ((ret = va_getByIndex(value->Arr, 4, &tmp)) != 0)
   195d0:	68a8      	ldr	r0, [r5, #8]
   195d2:	aa01      	add	r2, sp, #4
   195d4:	2104      	movs	r1, #4
   195d6:	f002 f804 	bl	1b5e2 <va_getByIndex>
   195da:	4604      	mov	r4, r0
   195dc:	2800      	cmp	r0, #0
   195de:	d1ab      	bne.n	19538 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.mobileCountryCode = (uint16_t)var_toInteger(tmp);
   195e0:	9801      	ldr	r0, [sp, #4]
   195e2:	f002 f978 	bl	1b8d6 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 5, &tmp)) != 0)
   195e6:	aa01      	add	r2, sp, #4
                object->cellInfo.mobileCountryCode = (uint16_t)var_toInteger(tmp);
   195e8:	8430      	strh	r0, [r6, #32]
                if ((ret = va_getByIndex(value->Arr, 5, &tmp)) != 0)
   195ea:	2105      	movs	r1, #5
   195ec:	68a8      	ldr	r0, [r5, #8]
   195ee:	f001 fff8 	bl	1b5e2 <va_getByIndex>
   195f2:	4604      	mov	r4, r0
   195f4:	2800      	cmp	r0, #0
   195f6:	d19f      	bne.n	19538 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.mobileNetworkCode = (uint16_t)var_toInteger(tmp);
   195f8:	9801      	ldr	r0, [sp, #4]
   195fa:	f002 f96c 	bl	1b8d6 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 6, &tmp)) != 0)
   195fe:	aa01      	add	r2, sp, #4
                object->cellInfo.mobileNetworkCode = (uint16_t)var_toInteger(tmp);
   19600:	8470      	strh	r0, [r6, #34]	; 0x22
                if ((ret = va_getByIndex(value->Arr, 6, &tmp)) != 0)
   19602:	2106      	movs	r1, #6
   19604:	68a8      	ldr	r0, [r5, #8]
   19606:	f001 ffec 	bl	1b5e2 <va_getByIndex>
   1960a:	4604      	mov	r4, r0
   1960c:	2800      	cmp	r0, #0
   1960e:	d193      	bne.n	19538 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.channelNumber = tmp->ulVal;
   19610:	9b01      	ldr	r3, [sp, #4]
   19612:	689b      	ldr	r3, [r3, #8]
   19614:	6273      	str	r3, [r6, #36]	; 0x24
   19616:	e78f      	b.n	19538 <cosem_setGsmDiagnostic+0xae>
        arr_clear(&object->adjacentCells);
   19618:	3628      	adds	r6, #40	; 0x28
   1961a:	4630      	mov	r0, r6
   1961c:	f7f7 fd4d 	bl	110ba <arr_clear>
        if (value != NULL && value->vt == DLMS_DATA_TYPE_ARRAY)
   19620:	2d00      	cmp	r5, #0
   19622:	f43f af4f 	beq.w	194c4 <cosem_setGsmDiagnostic+0x3a>
   19626:	782b      	ldrb	r3, [r5, #0]
   19628:	2b01      	cmp	r3, #1
   1962a:	f47f af4b 	bne.w	194c4 <cosem_setGsmDiagnostic+0x3a>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1962e:	f04f 0800 	mov.w	r8, #0
   19632:	e02f      	b.n	19694 <cosem_setGsmDiagnostic+0x20a>
                ret = va_getByIndex(value->Arr, pos, &it);
   19634:	aa02      	add	r2, sp, #8
   19636:	4641      	mov	r1, r8
   19638:	f001 ffd3 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1963c:	4604      	mov	r4, r0
   1963e:	2800      	cmp	r0, #0
   19640:	f47f af7a 	bne.w	19538 <cosem_setGsmDiagnostic+0xae>
                ret = va_getByIndex(it->Arr, 0, &tmp);
   19644:	9b02      	ldr	r3, [sp, #8]
   19646:	4601      	mov	r1, r0
   19648:	aa01      	add	r2, sp, #4
   1964a:	6898      	ldr	r0, [r3, #8]
   1964c:	f001 ffc9 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19650:	4604      	mov	r4, r0
   19652:	2800      	cmp	r0, #0
   19654:	f47f af70 	bne.w	19538 <cosem_setGsmDiagnostic+0xae>
                ac = (gxAdjacentCell*)gxmalloc(sizeof(gxAdjacentCell));
   19658:	2008      	movs	r0, #8
   1965a:	f7f3 f903 	bl	c864 <malloc>
                if (ac == NULL)
   1965e:	4607      	mov	r7, r0
   19660:	2800      	cmp	r0, #0
   19662:	f43f af3d 	beq.w	194e0 <cosem_setGsmDiagnostic+0x56>
                ac->cellId = var_toInteger(tmp);
   19666:	9801      	ldr	r0, [sp, #4]
   19668:	f002 f935 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(it->Arr, 1, &tmp);
   1966c:	9b02      	ldr	r3, [sp, #8]
                ac->cellId = var_toInteger(tmp);
   1966e:	6038      	str	r0, [r7, #0]
                ret = va_getByIndex(it->Arr, 1, &tmp);
   19670:	aa01      	add	r2, sp, #4
   19672:	6898      	ldr	r0, [r3, #8]
   19674:	2101      	movs	r1, #1
   19676:	f001 ffb4 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1967a:	4604      	mov	r4, r0
   1967c:	2800      	cmp	r0, #0
   1967e:	d137      	bne.n	196f0 <cosem_setGsmDiagnostic+0x266>
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
   19680:	9801      	ldr	r0, [sp, #4]
   19682:	f002 f928 	bl	1b8d6 <var_toInteger>
                arr_push(&object->adjacentCells, ac);
   19686:	4639      	mov	r1, r7
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
   19688:	7138      	strb	r0, [r7, #4]
                arr_push(&object->adjacentCells, ac);
   1968a:	4630      	mov	r0, r6
   1968c:	f7f7 fd00 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19690:	f108 0801 	add.w	r8, r8, #1
   19694:	68a8      	ldr	r0, [r5, #8]
   19696:	88c3      	ldrh	r3, [r0, #6]
   19698:	4543      	cmp	r3, r8
   1969a:	d1cb      	bne.n	19634 <cosem_setGsmDiagnostic+0x1aa>
   1969c:	e712      	b.n	194c4 <cosem_setGsmDiagnostic+0x3a>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1969e:	7813      	ldrb	r3, [r2, #0]
   196a0:	2b09      	cmp	r3, #9
   196a2:	d116      	bne.n	196d2 <cosem_setGsmDiagnostic+0x248>
   196a4:	6893      	ldr	r3, [r2, #8]
   196a6:	b1db      	cbz	r3, 196e0 <cosem_setGsmDiagnostic+0x256>
            var_init(&tmp2);
   196a8:	a802      	add	r0, sp, #8
   196aa:	f001 fdc0 	bl	1b22e <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   196ae:	aa02      	add	r2, sp, #8
   196b0:	2119      	movs	r1, #25
   196b2:	4628      	mov	r0, r5
   196b4:	f7f7 f9c6 	bl	10a44 <dlms_changeType2>
            if (ret != 0)
   196b8:	4604      	mov	r4, r0
   196ba:	2800      	cmp	r0, #0
   196bc:	f47f af3c 	bne.w	19538 <cosem_setGsmDiagnostic+0xae>
            time_copy(&object->captureTime, tmp2.dateTime);
   196c0:	f106 0034 	add.w	r0, r6, #52	; 0x34
   196c4:	9904      	ldr	r1, [sp, #16]
   196c6:	f7f5 fa0a 	bl	eade <time_copy>
            var_clear(&tmp2);
   196ca:	a802      	add	r0, sp, #8
   196cc:	f001 ff0b 	bl	1b4e6 <var_clear>
   196d0:	e732      	b.n	19538 <cosem_setGsmDiagnostic+0xae>
        else if (value->vt == DLMS_DATA_TYPE_DATETIME)
   196d2:	2b19      	cmp	r3, #25
   196d4:	d104      	bne.n	196e0 <cosem_setGsmDiagnostic+0x256>
            time_copy(&object->captureTime, value->dateTime);
   196d6:	6891      	ldr	r1, [r2, #8]
   196d8:	3034      	adds	r0, #52	; 0x34
   196da:	f7f5 fa00 	bl	eade <time_copy>
   196de:	e6f1      	b.n	194c4 <cosem_setGsmDiagnostic+0x3a>
            time_clear(&object->captureTime);
   196e0:	f106 0034 	add.w	r0, r6, #52	; 0x34
   196e4:	f7f5 f9ca 	bl	ea7c <time_clear>
   196e8:	e6ec      	b.n	194c4 <cosem_setGsmDiagnostic+0x3a>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   196ea:	f44f 7481 	mov.w	r4, #258	; 0x102
   196ee:	e723      	b.n	19538 <cosem_setGsmDiagnostic+0xae>
                gxfree(ac);
   196f0:	4638      	mov	r0, r7
   196f2:	f7f3 f8bf 	bl	c874 <free>
   196f6:	e71f      	b.n	19538 <cosem_setGsmDiagnostic+0xae>

000196f8 <cosem_setTokenGateway>:
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
int cosem_setTokenGateway(gxTokenGateway* object, unsigned char index, dlmsVARIANT* value)
{
   196f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   196fc:	3902      	subs	r1, #2
   196fe:	4605      	mov	r5, r0
   19700:	4616      	mov	r6, r2
   19702:	2904      	cmp	r1, #4
   19704:	f200 808b 	bhi.w	1981e <cosem_setTokenGateway+0x126>
   19708:	e8df f001 	tbb	[pc, r1]
   1970c:	5e331603 	.word	0x5e331603
   19710:	64          	.byte	0x64
   19711:	00          	.byte	0x00
    dlmsVARIANT tmp2;
    dlmsVARIANT* it;
    switch (index)
    {
    case 2:
        bb_clear(&object->token);
   19712:	3510      	adds	r5, #16
   19714:	4628      	mov	r0, r5
   19716:	f7f4 fa8c 	bl	dc32 <bb_clear>
        ret = bb_set2(&object->token, value->byteArr, 0, bb_size(value->byteArr));
   1971a:	68b4      	ldr	r4, [r6, #8]
   1971c:	4620      	mov	r0, r4
   1971e:	f7f4 f8c2 	bl	d8a6 <bb_size>
   19722:	4621      	mov	r1, r4
   19724:	4603      	mov	r3, r0
   19726:	2200      	movs	r2, #0
   19728:	4628      	mov	r0, r5
   1972a:	f7f4 fa3d 	bl	dba8 <bb_set2>
   1972e:	4604      	mov	r4, r0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19730:	4620      	mov	r0, r4
   19732:	b004      	add	sp, #16
   19734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        time_clear(&object->time);
   19738:	351c      	adds	r5, #28
   1973a:	4628      	mov	r0, r5
   1973c:	f7f5 f99e 	bl	ea7c <time_clear>
        if (value->byteArr == NULL)
   19740:	68b4      	ldr	r4, [r6, #8]
   19742:	b91c      	cbnz	r4, 1974c <cosem_setTokenGateway+0x54>
            time_clear(&object->time);
   19744:	4628      	mov	r0, r5
   19746:	f7f5 f999 	bl	ea7c <time_clear>
   1974a:	e7f1      	b.n	19730 <cosem_setTokenGateway+0x38>
            var_init(&tmp2);
   1974c:	4668      	mov	r0, sp
   1974e:	f001 fd6e 	bl	1b22e <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   19752:	466a      	mov	r2, sp
   19754:	2119      	movs	r1, #25
   19756:	4630      	mov	r0, r6
   19758:	f7f7 f974 	bl	10a44 <dlms_changeType2>
            if (ret != 0)
   1975c:	4604      	mov	r4, r0
   1975e:	2800      	cmp	r0, #0
   19760:	d1e6      	bne.n	19730 <cosem_setTokenGateway+0x38>
            time_copy(&object->time, tmp2.dateTime);
   19762:	4628      	mov	r0, r5
   19764:	9902      	ldr	r1, [sp, #8]
   19766:	f7f5 f9ba 	bl	eade <time_copy>
            var_clear(&tmp2);
   1976a:	4668      	mov	r0, sp
   1976c:	f001 febb 	bl	1b4e6 <var_clear>
   19770:	e7de      	b.n	19730 <cosem_setTokenGateway+0x38>
        obj_clearByteBufferList(&object->descriptions);
   19772:	3528      	adds	r5, #40	; 0x28
   19774:	4628      	mov	r0, r5
   19776:	f7fb f8c6 	bl	14906 <obj_clearByteBufferList>
        if (value != NULL)
   1977a:	bb16      	cbnz	r6, 197c2 <cosem_setTokenGateway+0xca>
    int ret = DLMS_ERROR_CODE_OK, pos;
   1977c:	2400      	movs	r4, #0
        break;
   1977e:	e7d7      	b.n	19730 <cosem_setTokenGateway+0x38>
                if ((ret = va_getByIndex(value->Arr, pos, &it)) != 0)
   19780:	466a      	mov	r2, sp
   19782:	4641      	mov	r1, r8
   19784:	f001 ff2d 	bl	1b5e2 <va_getByIndex>
   19788:	4604      	mov	r4, r0
   1978a:	2800      	cmp	r0, #0
   1978c:	d1d0      	bne.n	19730 <cosem_setTokenGateway+0x38>
                d = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1978e:	200c      	movs	r0, #12
   19790:	f7f3 f868 	bl	c864 <malloc>
                if (d == NULL)
   19794:	4607      	mov	r7, r0
   19796:	2800      	cmp	r0, #0
   19798:	d044      	beq.n	19824 <cosem_setTokenGateway+0x12c>
                BYTE_BUFFER_INIT(d);
   1979a:	f7f4 f887 	bl	d8ac <bb_init>
                bb_set2(d, it->strVal, 0, it->strVal->size);
   1979e:	9b00      	ldr	r3, [sp, #0]
   197a0:	6899      	ldr	r1, [r3, #8]
   197a2:	4622      	mov	r2, r4
   197a4:	88cb      	ldrh	r3, [r1, #6]
   197a6:	4638      	mov	r0, r7
   197a8:	f7f4 f9fe 	bl	dba8 <bb_set2>
                arr_push(&object->descriptions, d);
   197ac:	4639      	mov	r1, r7
   197ae:	4628      	mov	r0, r5
   197b0:	f7f7 fc6e 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   197b4:	f108 0801 	add.w	r8, r8, #1
   197b8:	68b0      	ldr	r0, [r6, #8]
   197ba:	88c3      	ldrh	r3, [r0, #6]
   197bc:	4543      	cmp	r3, r8
   197be:	d1df      	bne.n	19780 <cosem_setTokenGateway+0x88>
   197c0:	e7dc      	b.n	1977c <cosem_setTokenGateway+0x84>
   197c2:	f04f 0800 	mov.w	r8, #0
   197c6:	e7f7      	b.n	197b8 <cosem_setTokenGateway+0xc0>
        object->deliveryMethod = (DLMS_TOKEN_DELIVERY)var_toInteger(value);
   197c8:	4610      	mov	r0, r2
   197ca:	f002 f884 	bl	1b8d6 <var_toInteger>
   197ce:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   197d2:	e7d3      	b.n	1977c <cosem_setTokenGateway+0x84>
        if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != 0)
   197d4:	68b0      	ldr	r0, [r6, #8]
   197d6:	466a      	mov	r2, sp
   197d8:	2100      	movs	r1, #0
   197da:	f001 ff02 	bl	1b5e2 <va_getByIndex>
   197de:	4604      	mov	r4, r0
   197e0:	2800      	cmp	r0, #0
   197e2:	d1a5      	bne.n	19730 <cosem_setTokenGateway+0x38>
        object->status = (DLMS_TOKEN_STATUS_CODE)var_toInteger(tmp);
   197e4:	9800      	ldr	r0, [sp, #0]
   197e6:	f002 f876 	bl	1b8d6 <var_toInteger>
   197ea:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
        if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   197ee:	68b0      	ldr	r0, [r6, #8]
   197f0:	466a      	mov	r2, sp
   197f2:	2101      	movs	r1, #1
   197f4:	f001 fef5 	bl	1b5e2 <va_getByIndex>
   197f8:	4604      	mov	r4, r0
   197fa:	2800      	cmp	r0, #0
   197fc:	d198      	bne.n	19730 <cosem_setTokenGateway+0x38>
        ba_clear(&object->dataValue);
   197fe:	3538      	adds	r5, #56	; 0x38
   19800:	4628      	mov	r0, r5
   19802:	f7f3 ffbc 	bl	d77e <ba_clear>
        if (tmp->strVal != NULL && tmp->strVal->size != 0)
   19806:	9b00      	ldr	r3, [sp, #0]
   19808:	689b      	ldr	r3, [r3, #8]
   1980a:	2b00      	cmp	r3, #0
   1980c:	d0b6      	beq.n	1977c <cosem_setTokenGateway+0x84>
   1980e:	88da      	ldrh	r2, [r3, #6]
   19810:	2a00      	cmp	r2, #0
   19812:	d0b3      	beq.n	1977c <cosem_setTokenGateway+0x84>
            ba_copy(&object->dataValue, tmp->bitArr->data, tmp->bitArr->size);
   19814:	6819      	ldr	r1, [r3, #0]
   19816:	4628      	mov	r0, r5
   19818:	f7f3 ffbc 	bl	d794 <ba_copy>
   1981c:	e788      	b.n	19730 <cosem_setTokenGateway+0x38>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1981e:	f44f 7481 	mov.w	r4, #258	; 0x102
   19822:	e785      	b.n	19730 <cosem_setTokenGateway+0x38>
   19824:	f44f 7482 	mov.w	r4, #260	; 0x104
   19828:	e782      	b.n	19730 <cosem_setTokenGateway+0x38>

0001982a <compactData_updateTemplateDescription>:
#ifndef DLMS_IGNORE_COMPACT_DATA

int compactData_updateTemplateDescription(
    dlmsSettings* settings,
    gxCompactData* object)
{
   1982a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1982e:	460f      	mov	r7, r1
   19830:	b0a1      	sub	sp, #132	; 0x84
   19832:	4682      	mov	sl, r0
    gxByteBuffer tmp;
    gxValueEventCollection args;
    gxValueEventArg e;
    ve_init(&e);
    gxKey* kv;
    bb_clear(&object->buffer);
   19834:	f107 0610 	add.w	r6, r7, #16
    ve_init(&e);
   19838:	a80e      	add	r0, sp, #56	; 0x38
   1983a:	f001 f943 	bl	1aac4 <ve_init>
    bb_clear(&object->templateDescription);
   1983e:	f107 052c 	add.w	r5, r7, #44	; 0x2c
    bb_clear(&object->buffer);
   19842:	4630      	mov	r0, r6
   19844:	f7f4 f9f5 	bl	dc32 <bb_clear>
    bb_clear(&object->templateDescription);
   19848:	4628      	mov	r0, r5
   1984a:	f7f4 f9f2 	bl	dc32 <bb_clear>
    e.action = 1;
    e.target = &object->base;
    e.index = 2;
   1984e:	2402      	movs	r4, #2
    e.action = 1;
   19850:	2301      	movs	r3, #1
    vec_init(&args);
   19852:	a805      	add	r0, sp, #20
    e.action = 1;
   19854:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    e.target = &object->base;
   19858:	9713      	str	r7, [sp, #76]	; 0x4c
    e.index = 2;
   1985a:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    vec_init(&args);
   1985e:	f001 f8dc 	bl	1aa1a <vec_init>
    BYTE_BUFFER_INIT(&tmp);
   19862:	a807      	add	r0, sp, #28
   19864:	f7f4 f822 	bl	d8ac <bb_init>
    vec_push(&args, &e);
   19868:	a90e      	add	r1, sp, #56	; 0x38
   1986a:	a805      	add	r0, sp, #20
   1986c:	f001 f8f5 	bl	1aa5a <vec_push>
    if (!e.handled)
   19870:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   19874:	b153      	cbz	r3, 1988c <compactData_updateTemplateDescription+0x62>
            }
            var_clear(&e.value);
            ve_clear(&e);
        }
    }
    bb_clear(&tmp);
   19876:	a807      	add	r0, sp, #28
   19878:	f7f4 f9db 	bl	dc32 <bb_clear>
    //svr_postGet(settings, &args);
    vec_empty(&args);
   1987c:	a805      	add	r0, sp, #20
   1987e:	f001 f90e 	bl	1aa9e <vec_empty>
    return 0;
   19882:	2400      	movs	r4, #0
}
   19884:	4620      	mov	r0, r4
   19886:	b021      	add	sp, #132	; 0x84
   19888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ret = bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE)) != DLMS_ERROR_CODE_OK)
   1988c:	4621      	mov	r1, r4
   1988e:	4628      	mov	r0, r5
   19890:	f7f4 f875 	bl	d97e <bb_setUInt8>
   19894:	4604      	mov	r4, r0
   19896:	b118      	cbz	r0, 198a0 <compactData_updateTemplateDescription+0x76>
                    bb_clear(&object->buffer);
   19898:	4630      	mov	r0, r6
   1989a:	f7f4 f9ca 	bl	dc32 <bb_clear>
                    return ret;
   1989e:	e7f1      	b.n	19884 <compactData_updateTemplateDescription+0x5a>
        hlp_setObjectCount(object->captureObjects.size, &object->templateDescription);
   198a0:	8c78      	ldrh	r0, [r7, #34]	; 0x22
   198a2:	4629      	mov	r1, r5
   198a4:	f001 f967 	bl	1ab76 <hlp_setObjectCount>
        for (pos = 0; pos != object->captureObjects.size; ++pos)
   198a8:	46a1      	mov	r9, r4
   198aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   198ac:	fa1f f189 	uxth.w	r1, r9
   198b0:	428b      	cmp	r3, r1
   198b2:	d0e0      	beq.n	19876 <compactData_updateTemplateDescription+0x4c>
            ret = arr_getByIndex(&object->captureObjects, pos, (void**)&kv);
   198b4:	aa01      	add	r2, sp, #4
   198b6:	f107 001c 	add.w	r0, r7, #28
   198ba:	f7f7 fc26 	bl	1110a <arr_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   198be:	4604      	mov	r4, r0
   198c0:	2800      	cmp	r0, #0
   198c2:	d1e9      	bne.n	19898 <compactData_updateTemplateDescription+0x6e>
            e.target = (gxObject*)kv->key;
   198c4:	9b01      	ldr	r3, [sp, #4]
   198c6:	681a      	ldr	r2, [r3, #0]
            e.index = ((gxTarget*)kv->value)->attributeIndex;
   198c8:	685b      	ldr	r3, [r3, #4]
            e.target = (gxObject*)kv->key;
   198ca:	9213      	str	r2, [sp, #76]	; 0x4c
            e.index = ((gxTarget*)kv->value)->attributeIndex;
   198cc:	781b      	ldrb	r3, [r3, #0]
   198ce:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
            if ((ret = cosem_getValue(settings, &e)) != 0)
   198d2:	a90e      	add	r1, sp, #56	; 0x38
   198d4:	4650      	mov	r0, sl
   198d6:	f7fa fd0c 	bl	142f2 <cosem_getValue>
   198da:	4604      	mov	r4, r0
   198dc:	b118      	cbz	r0, 198e6 <compactData_updateTemplateDescription+0xbc>
                                        var_clear(&e.value);
   198de:	a80e      	add	r0, sp, #56	; 0x38
   198e0:	f001 fe01 	bl	1b4e6 <var_clear>
                                        bb_clear(&object->buffer);
   198e4:	e7d8      	b.n	19898 <compactData_updateTemplateDescription+0x6e>
            if (e.byteArray)
   198e6:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   198ea:	2b00      	cmp	r3, #0
   198ec:	f000 80db 	beq.w	19aa6 <compactData_updateTemplateDescription+0x27c>
                if (bb_size(e.value.byteArr) == 0)
   198f0:	9810      	ldr	r0, [sp, #64]	; 0x40
   198f2:	f7f3 ffd8 	bl	d8a6 <bb_size>
   198f6:	4601      	mov	r1, r0
   198f8:	b918      	cbnz	r0, 19902 <compactData_updateTemplateDescription+0xd8>
                        bb_setUInt8(&object->templateDescription, e.value.byteArr->data[0]);
   198fa:	4628      	mov	r0, r5
   198fc:	f7f4 f83f 	bl	d97e <bb_setUInt8>
   19900:	e06e      	b.n	199e0 <compactData_updateTemplateDescription+0x1b6>
                    if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY ||
   19902:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19904:	681b      	ldr	r3, [r3, #0]
   19906:	7819      	ldrb	r1, [r3, #0]
   19908:	1e4b      	subs	r3, r1, #1
   1990a:	2b01      	cmp	r3, #1
   1990c:	d8f5      	bhi.n	198fa <compactData_updateTemplateDescription+0xd0>
                        di_init(&info);
   1990e:	a803      	add	r0, sp, #12
                        var_init(&value);
   19910:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                        di_init(&info);
   19914:	f7f5 f878 	bl	ea08 <di_init>
                        var_init(&value);
   19918:	4658      	mov	r0, fp
   1991a:	f001 fc88 	bl	1b22e <var_init>
                        e.value.byteArr->position = 1;
   1991e:	9810      	ldr	r0, [sp, #64]	; 0x40
   19920:	2301      	movs	r3, #1
   19922:	8103      	strh	r3, [r0, #8]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   19924:	f10d 0102 	add.w	r1, sp, #2
   19928:	f001 f8f4 	bl	1ab14 <hlp_getObjectCount2>
   1992c:	b930      	cbnz	r0, 1993c <compactData_updateTemplateDescription+0x112>
                            ((gxTarget*)kv->value)->dataIndex > count)
   1992e:	9b01      	ldr	r3, [sp, #4]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   19930:	f8bd 2002 	ldrh.w	r2, [sp, #2]
                            ((gxTarget*)kv->value)->dataIndex > count)
   19934:	685b      	ldr	r3, [r3, #4]
   19936:	885b      	ldrh	r3, [r3, #2]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   19938:	429a      	cmp	r2, r3
   1993a:	d208      	bcs.n	1994e <compactData_updateTemplateDescription+0x124>
                            var_clear(&e.value);
   1993c:	a80e      	add	r0, sp, #56	; 0x38
   1993e:	f001 fdd2 	bl	1b4e6 <var_clear>
                            bb_clear(&object->buffer);
   19942:	4630      	mov	r0, r6
   19944:	f7f4 f975 	bl	dc32 <bb_clear>
                            return DLMS_ERROR_CODE_OUTOFMEMORY;
   19948:	f44f 7482 	mov.w	r4, #260	; 0x104
   1994c:	e79a      	b.n	19884 <compactData_updateTemplateDescription+0x5a>
                        if (((gxTarget*)kv->value)->dataIndex == 0)
   1994e:	2b00      	cmp	r3, #0
   19950:	d17a      	bne.n	19a48 <compactData_updateTemplateDescription+0x21e>
                            bb_setUInt8(&object->templateDescription, e.value.byteArr->data[0]);
   19952:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19954:	681b      	ldr	r3, [r3, #0]
   19956:	4628      	mov	r0, r5
   19958:	7819      	ldrb	r1, [r3, #0]
   1995a:	f7f4 f810 	bl	d97e <bb_setUInt8>
                            if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   1995e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19960:	681b      	ldr	r3, [r3, #0]
   19962:	781a      	ldrb	r2, [r3, #0]
   19964:	7859      	ldrb	r1, [r3, #1]
   19966:	2a01      	cmp	r2, #1
                                bb_setUInt16(&object->templateDescription, e.value.byteArr->data[1]);
   19968:	4628      	mov	r0, r5
                            if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   1996a:	d118      	bne.n	1999e <compactData_updateTemplateDescription+0x174>
                                bb_setUInt16(&object->templateDescription, e.value.byteArr->data[1]);
   1996c:	f7f4 f829 	bl	d9c2 <bb_setUInt16>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   19970:	f04f 0b00 	mov.w	fp, #0
                            for (unsigned char pos = 0; pos < count; ++pos)
   19974:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   19978:	fa5f f38b 	uxtb.w	r3, fp
   1997c:	4293      	cmp	r3, r2
   1997e:	d22c      	bcs.n	199da <compactData_updateTemplateDescription+0x1b0>
                                di_init(&info);
   19980:	a803      	add	r0, sp, #12
   19982:	f7f5 f841 	bl	ea08 <di_init>
                                var_clear(&value);
   19986:	a80a      	add	r0, sp, #40	; 0x28
   19988:	f001 fdad 	bl	1b4e6 <var_clear>
                                if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   1998c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1998e:	aa0a      	add	r2, sp, #40	; 0x28
   19990:	a903      	add	r1, sp, #12
   19992:	f7f5 fcc9 	bl	f328 <dlms_getData>
   19996:	4604      	mov	r4, r0
   19998:	b120      	cbz	r0, 199a4 <compactData_updateTemplateDescription+0x17a>
                                        var_clear(&value);
   1999a:	a80a      	add	r0, sp, #40	; 0x28
   1999c:	e04a      	b.n	19a34 <compactData_updateTemplateDescription+0x20a>
                                bb_setUInt8(&object->templateDescription, e.value.byteArr->data[1]);
   1999e:	f7f3 ffee 	bl	d97e <bb_setUInt8>
   199a2:	e7e5      	b.n	19970 <compactData_updateTemplateDescription+0x146>
                                if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
   199a4:	f89d 1010 	ldrb.w	r1, [sp, #16]
   199a8:	1e4b      	subs	r3, r1, #1
   199aa:	2b01      	cmp	r3, #1
                                    bb_setUInt8(&object->templateDescription, info.type);
   199ac:	4628      	mov	r0, r5
                                if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
   199ae:	d830      	bhi.n	19a12 <compactData_updateTemplateDescription+0x1e8>
                                    bb_setUInt8(&object->templateDescription, info.type);
   199b0:	f7f3 ffe5 	bl	d97e <bb_setUInt8>
                                    bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
   199b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   199b6:	4628      	mov	r0, r5
   199b8:	7999      	ldrb	r1, [r3, #6]
   199ba:	f7f3 ffe0 	bl	d97e <bb_setUInt8>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   199be:	46a0      	mov	r8, r4
   199c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   199c2:	88c2      	ldrh	r2, [r0, #6]
   199c4:	fa1f f388 	uxth.w	r3, r8
   199c8:	429a      	cmp	r2, r3
   199ca:	d812      	bhi.n	199f2 <compactData_updateTemplateDescription+0x1c8>
                                if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   199cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   199ce:	681b      	ldr	r3, [r3, #0]
   199d0:	781b      	ldrb	r3, [r3, #0]
   199d2:	2b01      	cmp	r3, #1
   199d4:	f10b 0b01 	add.w	fp, fp, #1
   199d8:	d1cc      	bne.n	19974 <compactData_updateTemplateDescription+0x14a>
                        var_clear(&value);
   199da:	a80a      	add	r0, sp, #40	; 0x28
   199dc:	f001 fd83 	bl	1b4e6 <var_clear>
            var_clear(&e.value);
   199e0:	a80e      	add	r0, sp, #56	; 0x38
   199e2:	f001 fd80 	bl	1b4e6 <var_clear>
            ve_clear(&e);
   199e6:	a80e      	add	r0, sp, #56	; 0x38
   199e8:	f001 f880 	bl	1aaec <ve_clear>
        for (pos = 0; pos != object->captureObjects.size; ++pos)
   199ec:	f109 0901 	add.w	r9, r9, #1
   199f0:	e75b      	b.n	198aa <compactData_updateTemplateDescription+0x80>
                                        if ((ret = va_getByIndex(value.Arr, pos, &value2)) != 0)
   199f2:	fa1f f188 	uxth.w	r1, r8
   199f6:	aa02      	add	r2, sp, #8
   199f8:	f001 fdf3 	bl	1b5e2 <va_getByIndex>
   199fc:	f108 0801 	add.w	r8, r8, #1
   19a00:	4604      	mov	r4, r0
   19a02:	2800      	cmp	r0, #0
   19a04:	d1c9      	bne.n	1999a <compactData_updateTemplateDescription+0x170>
                                        bb_setUInt8(&object->templateDescription, value2->vt);
   19a06:	9b02      	ldr	r3, [sp, #8]
   19a08:	4628      	mov	r0, r5
   19a0a:	7819      	ldrb	r1, [r3, #0]
   19a0c:	f7f3 ffb7 	bl	d97e <bb_setUInt8>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   19a10:	e7d6      	b.n	199c0 <compactData_updateTemplateDescription+0x196>
                                    bb_setUInt8(&object->templateDescription, info.type);
   19a12:	f7f3 ffb4 	bl	d97e <bb_setUInt8>
   19a16:	e7d9      	b.n	199cc <compactData_updateTemplateDescription+0x1a2>
                                var_clear(&value);
   19a18:	4658      	mov	r0, fp
   19a1a:	f001 fd64 	bl	1b4e6 <var_clear>
                                di_init(&info);
   19a1e:	a803      	add	r0, sp, #12
   19a20:	f7f4 fff2 	bl	ea08 <di_init>
                                if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   19a24:	9810      	ldr	r0, [sp, #64]	; 0x40
   19a26:	465a      	mov	r2, fp
   19a28:	a903      	add	r1, sp, #12
   19a2a:	f7f5 fc7d 	bl	f328 <dlms_getData>
   19a2e:	4604      	mov	r4, r0
   19a30:	b118      	cbz	r0, 19a3a <compactData_updateTemplateDescription+0x210>
                                    var_clear(&value);
   19a32:	4658      	mov	r0, fp
                                        var_clear(&value);
   19a34:	f001 fd57 	bl	1b4e6 <var_clear>
   19a38:	e751      	b.n	198de <compactData_updateTemplateDescription+0xb4>
                                if (!info.complete)
   19a3a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   19a3e:	f108 0801 	add.w	r8, r8, #1
   19a42:	b913      	cbnz	r3, 19a4a <compactData_updateTemplateDescription+0x220>
                                    return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   19a44:	2403      	movs	r4, #3
   19a46:	e71d      	b.n	19884 <compactData_updateTemplateDescription+0x5a>
   19a48:	4680      	mov	r8, r0
                            for (unsigned char pos = 0; pos < ((gxTarget*)kv->value)->dataIndex; ++pos)
   19a4a:	9b01      	ldr	r3, [sp, #4]
   19a4c:	685a      	ldr	r2, [r3, #4]
   19a4e:	8852      	ldrh	r2, [r2, #2]
   19a50:	fa5f f388 	uxtb.w	r3, r8
   19a54:	4293      	cmp	r3, r2
   19a56:	d3df      	bcc.n	19a18 <compactData_updateTemplateDescription+0x1ee>
                            if (info.type == DLMS_DATA_TYPE_STRUCTURE)
   19a58:	f89d 1010 	ldrb.w	r1, [sp, #16]
   19a5c:	2902      	cmp	r1, #2
                                bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE);
   19a5e:	4628      	mov	r0, r5
                            if (info.type == DLMS_DATA_TYPE_STRUCTURE)
   19a60:	d11e      	bne.n	19aa0 <compactData_updateTemplateDescription+0x276>
                                bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE);
   19a62:	f7f3 ff8c 	bl	d97e <bb_setUInt8>
                                bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
   19a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19a68:	4628      	mov	r0, r5
   19a6a:	7999      	ldrb	r1, [r3, #6]
   19a6c:	f7f3 ff87 	bl	d97e <bb_setUInt8>
                                for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   19a70:	f04f 0800 	mov.w	r8, #0
   19a74:	980c      	ldr	r0, [sp, #48]	; 0x30
   19a76:	88c2      	ldrh	r2, [r0, #6]
   19a78:	fa1f f388 	uxth.w	r3, r8
   19a7c:	429a      	cmp	r2, r3
   19a7e:	d9ac      	bls.n	199da <compactData_updateTemplateDescription+0x1b0>
                                    if ((ret = va_getByIndex(value.Arr, pos, &value2)) != 0)
   19a80:	fa1f f188 	uxth.w	r1, r8
   19a84:	aa02      	add	r2, sp, #8
   19a86:	f001 fdac 	bl	1b5e2 <va_getByIndex>
   19a8a:	f108 0801 	add.w	r8, r8, #1
   19a8e:	4604      	mov	r4, r0
   19a90:	2800      	cmp	r0, #0
   19a92:	d182      	bne.n	1999a <compactData_updateTemplateDescription+0x170>
                                    bb_setUInt8(&object->templateDescription, value2->vt);
   19a94:	9b02      	ldr	r3, [sp, #8]
   19a96:	4628      	mov	r0, r5
   19a98:	7819      	ldrb	r1, [r3, #0]
   19a9a:	f7f3 ff70 	bl	d97e <bb_setUInt8>
                                for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   19a9e:	e7e9      	b.n	19a74 <compactData_updateTemplateDescription+0x24a>
                                bb_setUInt8(&object->templateDescription, info.type);
   19aa0:	f7f3 ff6d 	bl	d97e <bb_setUInt8>
   19aa4:	e799      	b.n	199da <compactData_updateTemplateDescription+0x1b0>
                if ((ret = dlms_setData(&tmp, e.value.vt, &e.value)) != 0)
   19aa6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   19aaa:	aa0e      	add	r2, sp, #56	; 0x38
   19aac:	a807      	add	r0, sp, #28
   19aae:	f7f5 f891 	bl	ebd4 <dlms_setData>
   19ab2:	4604      	mov	r4, r0
   19ab4:	b130      	cbz	r0, 19ac4 <compactData_updateTemplateDescription+0x29a>
                    var_clear(&e.value);
   19ab6:	a80e      	add	r0, sp, #56	; 0x38
   19ab8:	f001 fd15 	bl	1b4e6 <var_clear>
                    bb_clear(&tmp);
   19abc:	a807      	add	r0, sp, #28
   19abe:	f7f4 f8b8 	bl	dc32 <bb_clear>
   19ac2:	e6e9      	b.n	19898 <compactData_updateTemplateDescription+0x6e>
                bb_setUInt8(&object->templateDescription, tmp.data[0]);
   19ac4:	9b07      	ldr	r3, [sp, #28]
   19ac6:	4628      	mov	r0, r5
   19ac8:	7819      	ldrb	r1, [r3, #0]
   19aca:	f7f3 ff58 	bl	d97e <bb_setUInt8>
                bb_clear(&tmp);
   19ace:	a807      	add	r0, sp, #28
   19ad0:	f7f4 f8af 	bl	dc32 <bb_clear>
   19ad4:	e784      	b.n	199e0 <compactData_updateTemplateDescription+0x1b6>

00019ad6 <cosem_setCompactData>:
    gxCompactData* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   19ad6:	3a02      	subs	r2, #2
{
   19ad8:	b570      	push	{r4, r5, r6, lr}
   19ada:	4606      	mov	r6, r0
   19adc:	460c      	mov	r4, r1
   19ade:	461d      	mov	r5, r3
   19ae0:	2a04      	cmp	r2, #4
   19ae2:	d82e      	bhi.n	19b42 <cosem_setCompactData+0x6c>
   19ae4:	e8df f002 	tbb	[pc, r2]
   19ae8:	251e1003 	.word	0x251e1003
   19aec:	27          	.byte	0x27
   19aed:	00          	.byte	0x00
    {
    case 2:
        bb_clear(&object->buffer);
   19aee:	3410      	adds	r4, #16
        break;
    case 4:
        object->templateId = (unsigned char) var_toInteger(value);
        break;
    case 5:
        bb_clear(&object->templateDescription);
   19af0:	4620      	mov	r0, r4
   19af2:	f7f4 f89e 	bl	dc32 <bb_clear>
        if (value->byteArr != NULL)
   19af6:	68ab      	ldr	r3, [r5, #8]
   19af8:	b1cb      	cbz	r3, 19b2e <cosem_setCompactData+0x58>
        {
            ret = bb_set(&object->templateDescription, value->byteArr->data, value->byteArr->size);
   19afa:	4620      	mov	r0, r4
   19afc:	88da      	ldrh	r2, [r3, #6]
   19afe:	6819      	ldr	r1, [r3, #0]
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   19b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = bb_set(&object->templateDescription, value->byteArr->data, value->byteArr->size);
   19b04:	f7f4 b821 	b.w	db4a <bb_set>
        ret = setCaptureObjects(settings, &object->captureObjects, value);
   19b08:	462a      	mov	r2, r5
   19b0a:	311c      	adds	r1, #28
   19b0c:	f7ff fc23 	bl	19356 <setCaptureObjects>
        if (ret == 0 && settings->server)
   19b10:	b970      	cbnz	r0, 19b30 <cosem_setCompactData+0x5a>
   19b12:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   19b16:	b153      	cbz	r3, 19b2e <cosem_setCompactData+0x58>
            ret = compactData_updateTemplateDescription(settings, object);
   19b18:	4621      	mov	r1, r4
   19b1a:	4630      	mov	r0, r6
}
   19b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = compactData_updateTemplateDescription(settings, object);
   19b20:	f7ff be83 	b.w	1982a <compactData_updateTemplateDescription>
        object->templateId = (unsigned char) var_toInteger(value);
   19b24:	4628      	mov	r0, r5
   19b26:	f001 fed6 	bl	1b8d6 <var_toInteger>
   19b2a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    int ret = DLMS_ERROR_CODE_OK;
   19b2e:	2000      	movs	r0, #0
}
   19b30:	bd70      	pop	{r4, r5, r6, pc}
        bb_clear(&object->templateDescription);
   19b32:	342c      	adds	r4, #44	; 0x2c
   19b34:	e7dc      	b.n	19af0 <cosem_setCompactData+0x1a>
        object->captureMethod = (DLMS_CAPTURE_METHOD)var_toInteger(value);
   19b36:	4628      	mov	r0, r5
   19b38:	f001 fecd 	bl	1b8d6 <var_toInteger>
   19b3c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
   19b40:	e7f5      	b.n	19b2e <cosem_setCompactData+0x58>
    int ret = DLMS_ERROR_CODE_OK;
   19b42:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   19b46:	e7f3      	b.n	19b30 <cosem_setCompactData+0x5a>

00019b48 <cosem_setParameterMonitor>:
int cosem_setParameterMonitor(
    dlmsSettings* settings,
    gxParameterMonitor* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   19b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = 0, pos;
    dlmsVARIANT* tmp, * tmp3;
    dlmsVARIANT tmp2;
    DLMS_OBJECT_TYPE type;
    switch (index)
   19b4c:	2a03      	cmp	r2, #3
{
   19b4e:	b086      	sub	sp, #24
   19b50:	4607      	mov	r7, r0
   19b52:	468a      	mov	sl, r1
   19b54:	461e      	mov	r6, r3
    switch (index)
   19b56:	d062      	beq.n	19c1e <cosem_setParameterMonitor+0xd6>
   19b58:	2a04      	cmp	r2, #4
   19b5a:	f000 8081 	beq.w	19c60 <cosem_setParameterMonitor+0x118>
   19b5e:	2a02      	cmp	r2, #2
   19b60:	f040 80f0 	bne.w	19d44 <cosem_setParameterMonitor+0x1fc>
    {
    case 2:
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        object->changedParameter.target = NULL;
   19b64:	2100      	movs	r1, #0
   19b66:	f8ca 1010 	str.w	r1, [sl, #16]
#else
        object->changedParameter.type = DLMS_OBJECT_TYPE_NONE;
        memset(object->changedParameter.logicalName, 0, 6);
#endif //DLMS_IGNORE_OBJECT_POINTERS
        if (value->Arr != NULL)
   19b6a:	6898      	ldr	r0, [r3, #8]
   19b6c:	b908      	cbnz	r0, 19b72 <cosem_setParameterMonitor+0x2a>
   19b6e:	2400      	movs	r4, #0
   19b70:	e051      	b.n	19c16 <cosem_setParameterMonitor+0xce>
        {
            if ((ret = va_getByIndex(value->Arr, 0, &tmp3)) == DLMS_ERROR_CODE_OK)
   19b72:	aa01      	add	r2, sp, #4
   19b74:	f001 fd35 	bl	1b5e2 <va_getByIndex>
   19b78:	4604      	mov	r4, r0
   19b7a:	2800      	cmp	r0, #0
   19b7c:	d14b      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
            {
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   19b7e:	9801      	ldr	r0, [sp, #4]
   19b80:	f001 fea9 	bl	1b8d6 <var_toInteger>
                //Get LN.
                if ((ret = va_getByIndex(value->Arr, 1, &tmp3)) == DLMS_ERROR_CODE_OK)
   19b84:	aa01      	add	r2, sp, #4
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   19b86:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(value->Arr, 1, &tmp3)) == DLMS_ERROR_CODE_OK)
   19b88:	2101      	movs	r1, #1
   19b8a:	68b0      	ldr	r0, [r6, #8]
   19b8c:	f001 fd29 	bl	1b5e2 <va_getByIndex>
   19b90:	4604      	mov	r4, r0
   19b92:	2800      	cmp	r0, #0
   19b94:	d13f      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
                {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
                    if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &object->changedParameter.target)) != 0)
   19b96:	9b01      	ldr	r3, [sp, #4]
   19b98:	689a      	ldr	r2, [r3, #8]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   19b9a:	fa1f f888 	uxth.w	r8, r8
                    if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &object->changedParameter.target)) != 0)
   19b9e:	f10a 0910 	add.w	r9, sl, #16
   19ba2:	6812      	ldr	r2, [r2, #0]
   19ba4:	464b      	mov	r3, r9
   19ba6:	4641      	mov	r1, r8
   19ba8:	f107 0098 	add.w	r0, r7, #152	; 0x98
   19bac:	f001 fad6 	bl	1b15c <oa_findByLN>
   19bb0:	4604      	mov	r4, r0
   19bb2:	bb80      	cbnz	r0, 19c16 <cosem_setParameterMonitor+0xce>
                    {
                        return ret;
                    }
                    if (object->changedParameter.target == NULL)
   19bb4:	f8da 3010 	ldr.w	r3, [sl, #16]
   19bb8:	b9a3      	cbnz	r3, 19be4 <cosem_setParameterMonitor+0x9c>
                    {
                        if ((ret = cosem_createObject(type, &object->changedParameter.target)) != 0)
   19bba:	4649      	mov	r1, r9
   19bbc:	4640      	mov	r0, r8
   19bbe:	f7e8 faa3 	bl	2108 <cosem_createObject>
   19bc2:	4604      	mov	r4, r0
   19bc4:	bb38      	cbnz	r0, 19c16 <cosem_setParameterMonitor+0xce>
                        {
                            return ret;
                        }
                        oa_push(&settings->releasedObjects, object->changedParameter.target);
   19bc6:	f8da 1010 	ldr.w	r1, [sl, #16]
   19bca:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   19bce:	f001 fa36 	bl	1b03e <oa_push>
                        memcpy(object->changedParameter.target->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   19bd2:	9b01      	ldr	r3, [sp, #4]
   19bd4:	f8da 0010 	ldr.w	r0, [sl, #16]
   19bd8:	689b      	ldr	r3, [r3, #8]
   19bda:	3006      	adds	r0, #6
   19bdc:	88da      	ldrh	r2, [r3, #6]
   19bde:	6819      	ldr	r1, [r3, #0]
   19be0:	f003 fe56 	bl	1d890 <memcpy>
                    }
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp3)) == DLMS_ERROR_CODE_OK)
   19be4:	68b0      	ldr	r0, [r6, #8]
   19be6:	aa01      	add	r2, sp, #4
   19be8:	2102      	movs	r1, #2
   19bea:	f001 fcfa 	bl	1b5e2 <va_getByIndex>
   19bee:	4604      	mov	r4, r0
   19bf0:	b988      	cbnz	r0, 19c16 <cosem_setParameterMonitor+0xce>
                    {
                        object->changedParameter.attributeIndex = (unsigned char)var_toInteger(tmp3);
   19bf2:	9801      	ldr	r0, [sp, #4]
   19bf4:	f001 fe6f 	bl	1b8d6 <var_toInteger>
   19bf8:	f88a 0014 	strb.w	r0, [sl, #20]
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp3)) == DLMS_ERROR_CODE_OK)
   19bfc:	68b0      	ldr	r0, [r6, #8]
   19bfe:	aa01      	add	r2, sp, #4
   19c00:	2103      	movs	r1, #3
   19c02:	f001 fcee 	bl	1b5e2 <va_getByIndex>
   19c06:	4604      	mov	r4, r0
   19c08:	b928      	cbnz	r0, 19c16 <cosem_setParameterMonitor+0xce>
                        {
                            ret = var_copy(&object->changedParameter.value, tmp3);
   19c0a:	9901      	ldr	r1, [sp, #4]
   19c0c:	f10a 0018 	add.w	r0, sl, #24
   19c10:	f7ea fcc8 	bl	45a4 <var_copy>
   19c14:	4604      	mov	r4, r0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19c16:	4620      	mov	r0, r4
   19c18:	b006      	add	sp, #24
   19c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   19c1e:	781b      	ldrb	r3, [r3, #0]
   19c20:	2b09      	cmp	r3, #9
   19c22:	d118      	bne.n	19c56 <cosem_setParameterMonitor+0x10e>
   19c24:	68b3      	ldr	r3, [r6, #8]
   19c26:	b1b3      	cbz	r3, 19c56 <cosem_setParameterMonitor+0x10e>
            ret = var_init(&tmp2);
   19c28:	a802      	add	r0, sp, #8
   19c2a:	f001 fb00 	bl	1b22e <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   19c2e:	4604      	mov	r4, r0
   19c30:	2800      	cmp	r0, #0
   19c32:	d1f0      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   19c34:	aa02      	add	r2, sp, #8
   19c36:	2119      	movs	r1, #25
   19c38:	4630      	mov	r0, r6
   19c3a:	f7f6 ff03 	bl	10a44 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   19c3e:	4604      	mov	r4, r0
   19c40:	2800      	cmp	r0, #0
   19c42:	d1e8      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
            time_copy(&object->captureTime, tmp2.dateTime);
   19c44:	f10a 0028 	add.w	r0, sl, #40	; 0x28
   19c48:	9904      	ldr	r1, [sp, #16]
   19c4a:	f7f4 ff48 	bl	eade <time_copy>
            var_clear(&tmp2);
   19c4e:	a802      	add	r0, sp, #8
   19c50:	f001 fc49 	bl	1b4e6 <var_clear>
   19c54:	e7df      	b.n	19c16 <cosem_setParameterMonitor+0xce>
            time_clear(&object->captureTime);
   19c56:	f10a 0028 	add.w	r0, sl, #40	; 0x28
   19c5a:	f7f4 ff0f 	bl	ea7c <time_clear>
   19c5e:	e786      	b.n	19b6e <cosem_setParameterMonitor+0x26>
        obj_clearParametersList(&object->parameters);
   19c60:	f101 0a34 	add.w	sl, r1, #52	; 0x34
   19c64:	4650      	mov	r0, sl
   19c66:	f7fb fabd 	bl	151e4 <obj_clearParametersList>
        if (value->Arr != NULL)
   19c6a:	68b3      	ldr	r3, [r6, #8]
   19c6c:	2b00      	cmp	r3, #0
   19c6e:	f43f af7e 	beq.w	19b6e <cosem_setParameterMonitor+0x26>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19c72:	f04f 0800 	mov.w	r8, #0
   19c76:	e05d      	b.n	19d34 <cosem_setParameterMonitor+0x1ec>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   19c78:	466a      	mov	r2, sp
   19c7a:	4641      	mov	r1, r8
   19c7c:	f001 fcb1 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19c80:	4604      	mov	r4, r0
   19c82:	2800      	cmp	r0, #0
   19c84:	d1c7      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   19c86:	9b00      	ldr	r3, [sp, #0]
   19c88:	4601      	mov	r1, r0
   19c8a:	aa01      	add	r2, sp, #4
   19c8c:	6898      	ldr	r0, [r3, #8]
   19c8e:	f001 fca8 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19c92:	4604      	mov	r4, r0
   19c94:	2800      	cmp	r0, #0
   19c96:	d1be      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   19c98:	9801      	ldr	r0, [sp, #4]
   19c9a:	f001 fe1c 	bl	1b8d6 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   19c9e:	9b00      	ldr	r3, [sp, #0]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   19ca0:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   19ca4:	aa01      	add	r2, sp, #4
   19ca6:	6898      	ldr	r0, [r3, #8]
   19ca8:	2101      	movs	r1, #1
   19caa:	f001 fc9a 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19cae:	4604      	mov	r4, r0
   19cb0:	2800      	cmp	r0, #0
   19cb2:	d1b0      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   19cb4:	9b01      	ldr	r3, [sp, #4]
                obj = NULL;
   19cb6:	9002      	str	r0, [sp, #8]
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   19cb8:	689a      	ldr	r2, [r3, #8]
   19cba:	4649      	mov	r1, r9
   19cbc:	6812      	ldr	r2, [r2, #0]
   19cbe:	ab02      	add	r3, sp, #8
   19cc0:	f107 0098 	add.w	r0, r7, #152	; 0x98
   19cc4:	f001 fa4a 	bl	1b15c <oa_findByLN>
   19cc8:	4604      	mov	r4, r0
   19cca:	2800      	cmp	r0, #0
   19ccc:	d1a3      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
                if (obj == NULL)
   19cce:	9b02      	ldr	r3, [sp, #8]
   19cd0:	b99b      	cbnz	r3, 19cfa <cosem_setParameterMonitor+0x1b2>
                    if ((ret = cosem_createObject(type, &obj)) != 0)
   19cd2:	a902      	add	r1, sp, #8
   19cd4:	4648      	mov	r0, r9
   19cd6:	f7e8 fa17 	bl	2108 <cosem_createObject>
   19cda:	4604      	mov	r4, r0
   19cdc:	2800      	cmp	r0, #0
   19cde:	d19a      	bne.n	19c16 <cosem_setParameterMonitor+0xce>
                    oa_push(&settings->releasedObjects, obj);
   19ce0:	9902      	ldr	r1, [sp, #8]
   19ce2:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   19ce6:	f001 f9aa 	bl	1b03e <oa_push>
                    memcpy(obj->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   19cea:	9b01      	ldr	r3, [sp, #4]
   19cec:	9802      	ldr	r0, [sp, #8]
   19cee:	689b      	ldr	r3, [r3, #8]
   19cf0:	3006      	adds	r0, #6
   19cf2:	88da      	ldrh	r2, [r3, #6]
   19cf4:	6819      	ldr	r1, [r3, #0]
   19cf6:	f003 fdcb 	bl	1d890 <memcpy>
                it = (gxTarget*)gxmalloc(sizeof(gxTarget));
   19cfa:	2004      	movs	r0, #4
   19cfc:	f7f2 fdb2 	bl	c864 <malloc>
                if (it == NULL)
   19d00:	4605      	mov	r5, r0
   19d02:	b1e0      	cbz	r0, 19d3e <cosem_setParameterMonitor+0x1f6>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   19d04:	9b00      	ldr	r3, [sp, #0]
   19d06:	aa01      	add	r2, sp, #4
   19d08:	6898      	ldr	r0, [r3, #8]
   19d0a:	2102      	movs	r1, #2
   19d0c:	f001 fc69 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19d10:	4604      	mov	r4, r0
   19d12:	2800      	cmp	r0, #0
   19d14:	f47f af7f 	bne.w	19c16 <cosem_setParameterMonitor+0xce>
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   19d18:	9801      	ldr	r0, [sp, #4]
   19d1a:	f001 fddc 	bl	1b8d6 <var_toInteger>
                arr_push(&object->parameters, key_init(obj, it));
   19d1e:	4629      	mov	r1, r5
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   19d20:	7028      	strb	r0, [r5, #0]
                arr_push(&object->parameters, key_init(obj, it));
   19d22:	9802      	ldr	r0, [sp, #8]
   19d24:	f7fa fcbd 	bl	146a2 <key_init>
   19d28:	4601      	mov	r1, r0
   19d2a:	4650      	mov	r0, sl
   19d2c:	f7f7 f9b0 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19d30:	f108 0801 	add.w	r8, r8, #1
   19d34:	68b0      	ldr	r0, [r6, #8]
   19d36:	88c3      	ldrh	r3, [r0, #6]
   19d38:	4543      	cmp	r3, r8
   19d3a:	d19d      	bne.n	19c78 <cosem_setParameterMonitor+0x130>
   19d3c:	e717      	b.n	19b6e <cosem_setParameterMonitor+0x26>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19d3e:	f44f 7482 	mov.w	r4, #260	; 0x104
   19d42:	e768      	b.n	19c16 <cosem_setParameterMonitor+0xce>
    switch (index)
   19d44:	f44f 7481 	mov.w	r4, #258	; 0x102
   19d48:	e765      	b.n	19c16 <cosem_setParameterMonitor+0xce>

00019d4a <cosem_setLlcSscsSetup>:
    gxLlcSscsSetup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   19d4a:	2a02      	cmp	r2, #2
{
   19d4c:	b510      	push	{r4, lr}
   19d4e:	4618      	mov	r0, r3
   19d50:	460c      	mov	r4, r1
    switch (index)
   19d52:	d004      	beq.n	19d5e <cosem_setLlcSscsSetup+0x14>
   19d54:	2a03      	cmp	r2, #3
   19d56:	d007      	beq.n	19d68 <cosem_setLlcSscsSetup+0x1e>
   19d58:	f44f 7081 	mov.w	r0, #258	; 0x102
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19d5c:	bd10      	pop	{r4, pc}
        object->serviceNodeAddress = (uint16_t)var_toInteger(value);
   19d5e:	f001 fdba 	bl	1b8d6 <var_toInteger>
   19d62:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   19d64:	2000      	movs	r0, #0
    return ret;
   19d66:	e7f9      	b.n	19d5c <cosem_setLlcSscsSetup+0x12>
        object->baseNodeAddress = (uint16_t)var_toInteger(value);
   19d68:	f001 fdb5 	bl	1b8d6 <var_toInteger>
   19d6c:	8260      	strh	r0, [r4, #18]
   19d6e:	e7f9      	b.n	19d64 <cosem_setLlcSscsSetup+0x1a>

00019d70 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters>:
    gxPrimeNbOfdmPlcPhysicalLayerCounters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   19d70:	3a02      	subs	r2, #2
{
   19d72:	b510      	push	{r4, lr}
   19d74:	4618      	mov	r0, r3
   19d76:	460c      	mov	r4, r1
   19d78:	2a03      	cmp	r2, #3
   19d7a:	d814      	bhi.n	19da6 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x36>
   19d7c:	e8df f002 	tbb	[pc, r2]
   19d80:	0f0b0702 	.word	0x0f0b0702
    {
    case 2:
        object->crcIncorrectCount =(uint16_t) var_toInteger(value);
   19d84:	f001 fda7 	bl	1b8d6 <var_toInteger>
   19d88:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   19d8a:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19d8c:	bd10      	pop	{r4, pc}
        object->crcFailedCount = (uint16_t)var_toInteger(value);
   19d8e:	f001 fda2 	bl	1b8d6 <var_toInteger>
   19d92:	8260      	strh	r0, [r4, #18]
        break;
   19d94:	e7f9      	b.n	19d8a <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
        object->txDropCount = (uint16_t)var_toInteger(value);
   19d96:	f001 fd9e 	bl	1b8d6 <var_toInteger>
   19d9a:	82a0      	strh	r0, [r4, #20]
        break;
   19d9c:	e7f5      	b.n	19d8a <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
        object->rxDropCount = (uint16_t)var_toInteger(value);
   19d9e:	f001 fd9a 	bl	1b8d6 <var_toInteger>
   19da2:	82e0      	strh	r0, [r4, #22]
   19da4:	e7f1      	b.n	19d8a <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
    int ret = 0;
   19da6:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   19daa:	e7ef      	b.n	19d8c <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1c>

00019dac <cosem_setPrimeNbOfdmPlcMacSetup>:
    gxPrimeNbOfdmPlcMacSetup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   19dac:	3a02      	subs	r2, #2
{
   19dae:	b510      	push	{r4, lr}
   19db0:	4618      	mov	r0, r3
   19db2:	460c      	mov	r4, r1
   19db4:	2a06      	cmp	r2, #6
   19db6:	d822      	bhi.n	19dfe <cosem_setPrimeNbOfdmPlcMacSetup+0x52>
   19db8:	e8df f002 	tbb	[pc, r2]
   19dbc:	110d0904 	.word	0x110d0904
   19dc0:	1915      	.short	0x1915
   19dc2:	1d          	.byte	0x1d
   19dc3:	00          	.byte	0x00
    {
    case 2:
        object->macMinSwitchSearchTime = (unsigned char) var_toInteger(value);
   19dc4:	f001 fd87 	bl	1b8d6 <var_toInteger>
   19dc8:	7420      	strb	r0, [r4, #16]
    int ret = 0;
   19dca:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19dcc:	bd10      	pop	{r4, pc}
        object->macMaxPromotionPdu =(unsigned char)  var_toInteger(value);
   19dce:	f001 fd82 	bl	1b8d6 <var_toInteger>
   19dd2:	7460      	strb	r0, [r4, #17]
        break;
   19dd4:	e7f9      	b.n	19dca <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macPromotionPduTxPeriod = (unsigned char)var_toInteger(value);
   19dd6:	f001 fd7e 	bl	1b8d6 <var_toInteger>
   19dda:	74a0      	strb	r0, [r4, #18]
        break;
   19ddc:	e7f5      	b.n	19dca <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macBeaconsPerFrame = (unsigned char)var_toInteger(value);
   19dde:	f001 fd7a 	bl	1b8d6 <var_toInteger>
   19de2:	74e0      	strb	r0, [r4, #19]
        break;
   19de4:	e7f1      	b.n	19dca <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macScpMaxTxAttempts = (unsigned char) var_toInteger(value);
   19de6:	f001 fd76 	bl	1b8d6 <var_toInteger>
   19dea:	7520      	strb	r0, [r4, #20]
        break;
   19dec:	e7ed      	b.n	19dca <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macCtlReTxTimer =(unsigned char)  var_toInteger(value);
   19dee:	f001 fd72 	bl	1b8d6 <var_toInteger>
   19df2:	7560      	strb	r0, [r4, #21]
        break;
   19df4:	e7e9      	b.n	19dca <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macMaxCtlReTx = (unsigned char) var_toInteger(value);
   19df6:	f001 fd6e 	bl	1b8d6 <var_toInteger>
   19dfa:	75a0      	strb	r0, [r4, #22]
   19dfc:	e7e5      	b.n	19dca <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
    int ret = 0;
   19dfe:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   19e02:	e7e3      	b.n	19dcc <cosem_setPrimeNbOfdmPlcMacSetup+0x20>

00019e04 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters>:
    gxPrimeNbOfdmPlcMacFunctionalParameters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   19e04:	3a02      	subs	r2, #2
{
   19e06:	b570      	push	{r4, r5, r6, lr}
   19e08:	4618      	mov	r0, r3
   19e0a:	460c      	mov	r4, r1
   19e0c:	2a0c      	cmp	r2, #12
   19e0e:	d84f      	bhi.n	19eb0 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0xac>
   19e10:	e8df f002 	tbb	[pc, r2]
   19e14:	14100c07 	.word	0x14100c07
   19e18:	312c2823 	.word	0x312c2823
   19e1c:	45403b36 	.word	0x45403b36
   19e20:	4a          	.byte	0x4a
   19e21:	00          	.byte	0x00
    {
    case 2:
        object->lnId = (short)var_toInteger(value);
   19e22:	f001 fd58 	bl	1b8d6 <var_toInteger>
   19e26:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   19e28:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19e2a:	bd70      	pop	{r4, r5, r6, pc}
        object->lsId = (unsigned char) var_toInteger(value);
   19e2c:	f001 fd53 	bl	1b8d6 <var_toInteger>
   19e30:	74a0      	strb	r0, [r4, #18]
        break;
   19e32:	e7f9      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->sId =(unsigned char)  var_toInteger(value);
   19e34:	f001 fd4f 	bl	1b8d6 <var_toInteger>
   19e38:	74e0      	strb	r0, [r4, #19]
        break;
   19e3a:	e7f5      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   19e3c:	6885      	ldr	r5, [r0, #8]
        object->sna.size = 0;
   19e3e:	2600      	movs	r6, #0
   19e40:	834e      	strh	r6, [r1, #26]
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   19e42:	4628      	mov	r0, r5
   19e44:	f7f3 fd2f 	bl	d8a6 <bb_size>
   19e48:	4632      	mov	r2, r6
   19e4a:	4603      	mov	r3, r0
   19e4c:	4629      	mov	r1, r5
   19e4e:	f104 0014 	add.w	r0, r4, #20
}
   19e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   19e56:	f7f3 bea7 	b.w	dba8 <bb_set2>
        object->state = (DLMS_MAC_STATE)var_toInteger(value);
   19e5a:	f001 fd3c 	bl	1b8d6 <var_toInteger>
   19e5e:	f884 0020 	strb.w	r0, [r4, #32]
        break;
   19e62:	e7e1      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->scpLength = (short)  var_toInteger(value);
   19e64:	f001 fd37 	bl	1b8d6 <var_toInteger>
   19e68:	8460      	strh	r0, [r4, #34]	; 0x22
        break;
   19e6a:	e7dd      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->nodeHierarchyLevel = (unsigned char)var_toInteger(value);
   19e6c:	f001 fd33 	bl	1b8d6 <var_toInteger>
   19e70:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
        break;
   19e74:	e7d8      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconSlotCount = (unsigned char)var_toInteger(value);
   19e76:	f001 fd2e 	bl	1b8d6 <var_toInteger>
   19e7a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
        break;
   19e7e:	e7d3      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconRxSlot = (unsigned char)var_toInteger(value);
   19e80:	f001 fd29 	bl	1b8d6 <var_toInteger>
   19e84:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
        break;
   19e88:	e7ce      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconTxSlot = (unsigned char)var_toInteger(value);
   19e8a:	f001 fd24 	bl	1b8d6 <var_toInteger>
   19e8e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
        break;
   19e92:	e7c9      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconRxFrequency =(unsigned char) var_toInteger(value);
   19e94:	f001 fd1f 	bl	1b8d6 <var_toInteger>
   19e98:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        break;
   19e9c:	e7c4      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconTxFrequency = (unsigned char)var_toInteger(value);
   19e9e:	f001 fd1a 	bl	1b8d6 <var_toInteger>
   19ea2:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
        break;
   19ea6:	e7bf      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->capabilities = (DLMS_MAC_CAPABILITIES)var_toInteger(value);
   19ea8:	f001 fd15 	bl	1b8d6 <var_toInteger>
   19eac:	8560      	strh	r0, [r4, #42]	; 0x2a
   19eae:	e7bb      	b.n	19e28 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
    int ret = 0;
   19eb0:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   19eb4:	e7b9      	b.n	19e2a <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x26>

00019eb6 <cosem_setPrimeNbOfdmPlcMacCounters>:
    gxPrimeNbOfdmPlcMacCounters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   19eb6:	3a02      	subs	r2, #2
{
   19eb8:	b510      	push	{r4, lr}
   19eba:	4618      	mov	r0, r3
   19ebc:	460c      	mov	r4, r1
   19ebe:	2a05      	cmp	r2, #5
   19ec0:	d81d      	bhi.n	19efe <cosem_setPrimeNbOfdmPlcMacCounters+0x48>
   19ec2:	e8df f002 	tbb	[pc, r2]
   19ec6:	0803      	.short	0x0803
   19ec8:	1814100c 	.word	0x1814100c
    {
    case 2:
        object->txDataPktCount = var_toInteger(value);
   19ecc:	f001 fd03 	bl	1b8d6 <var_toInteger>
   19ed0:	6120      	str	r0, [r4, #16]
    int ret = 0;
   19ed2:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   19ed4:	bd10      	pop	{r4, pc}
        object->rxDataPktCount = var_toInteger(value);
   19ed6:	f001 fcfe 	bl	1b8d6 <var_toInteger>
   19eda:	6160      	str	r0, [r4, #20]
        break;
   19edc:	e7f9      	b.n	19ed2 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->txCtrlPktCount = var_toInteger(value);
   19ede:	f001 fcfa 	bl	1b8d6 <var_toInteger>
   19ee2:	61a0      	str	r0, [r4, #24]
        break;
   19ee4:	e7f5      	b.n	19ed2 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->rxCtrlPktCount = var_toInteger(value);
   19ee6:	f001 fcf6 	bl	1b8d6 <var_toInteger>
   19eea:	61e0      	str	r0, [r4, #28]
        break;
   19eec:	e7f1      	b.n	19ed2 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->csmaFailCount = var_toInteger(value);
   19eee:	f001 fcf2 	bl	1b8d6 <var_toInteger>
   19ef2:	6220      	str	r0, [r4, #32]
        break;
   19ef4:	e7ed      	b.n	19ed2 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->csmaChBusyCount = var_toInteger(value);
   19ef6:	f001 fcee 	bl	1b8d6 <var_toInteger>
   19efa:	6260      	str	r0, [r4, #36]	; 0x24
   19efc:	e7e9      	b.n	19ed2 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
    int ret = 0;
   19efe:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   19f02:	e7e7      	b.n	19ed4 <cosem_setPrimeNbOfdmPlcMacCounters+0x1e>

00019f04 <cosem_setMulticastEntries>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

int cosem_setMulticastEntries(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   19f04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19f08:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacMulticastEntry* it;
    arr_clear(&object->multicastEntries);
   19f0a:	f100 0710 	add.w	r7, r0, #16
   19f0e:	4638      	mov	r0, r7
   19f10:	f7f7 f8d3 	bl	110ba <arr_clear>
    if (value->Arr != NULL)
   19f14:	68b3      	ldr	r3, [r6, #8]
   19f16:	2b00      	cmp	r3, #0
   19f18:	d130      	bne.n	19f7c <cosem_setMulticastEntries+0x78>
            it->members = (short) var_toInteger(tmp2);
            arr_push(&object->multicastEntries, it);
        }
    }
    return 0;
}
   19f1a:	2000      	movs	r0, #0
   19f1c:	b002      	add	sp, #8
   19f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   19f22:	466a      	mov	r2, sp
   19f24:	4629      	mov	r1, r5
   19f26:	f001 fb5c 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19f2a:	4680      	mov	r8, r0
   19f2c:	2800      	cmp	r0, #0
   19f2e:	d1f4      	bne.n	19f1a <cosem_setMulticastEntries+0x16>
            it = (gxMacMulticastEntry*)gxmalloc(sizeof(gxMacMulticastEntry));
   19f30:	2004      	movs	r0, #4
   19f32:	f7f2 fc97 	bl	c864 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   19f36:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacMulticastEntry*)gxmalloc(sizeof(gxMacMulticastEntry));
   19f38:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   19f3a:	aa01      	add	r2, sp, #4
   19f3c:	6898      	ldr	r0, [r3, #8]
   19f3e:	4641      	mov	r1, r8
   19f40:	f001 fb4f 	bl	1b5e2 <va_getByIndex>
   19f44:	2800      	cmp	r0, #0
   19f46:	d1e8      	bne.n	19f1a <cosem_setMulticastEntries+0x16>
            it->id = (signed char) var_toInteger(tmp2);
   19f48:	9801      	ldr	r0, [sp, #4]
   19f4a:	f001 fcc4 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   19f4e:	9b00      	ldr	r3, [sp, #0]
            it->id = (signed char) var_toInteger(tmp2);
   19f50:	7020      	strb	r0, [r4, #0]
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   19f52:	6898      	ldr	r0, [r3, #8]
   19f54:	aa01      	add	r2, sp, #4
   19f56:	2101      	movs	r1, #1
   19f58:	f001 fb43 	bl	1b5e2 <va_getByIndex>
   19f5c:	2800      	cmp	r0, #0
   19f5e:	d1dc      	bne.n	19f1a <cosem_setMulticastEntries+0x16>
            it->members = (short) var_toInteger(tmp2);
   19f60:	9801      	ldr	r0, [sp, #4]
   19f62:	f001 fcb8 	bl	1b8d6 <var_toInteger>
            arr_push(&object->multicastEntries, it);
   19f66:	4621      	mov	r1, r4
            it->members = (short) var_toInteger(tmp2);
   19f68:	8060      	strh	r0, [r4, #2]
            arr_push(&object->multicastEntries, it);
   19f6a:	4638      	mov	r0, r7
   19f6c:	f7f7 f890 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19f70:	3501      	adds	r5, #1
   19f72:	68b0      	ldr	r0, [r6, #8]
   19f74:	88c3      	ldrh	r3, [r0, #6]
   19f76:	42ab      	cmp	r3, r5
   19f78:	d1d3      	bne.n	19f22 <cosem_setMulticastEntries+0x1e>
   19f7a:	e7ce      	b.n	19f1a <cosem_setMulticastEntries+0x16>
   19f7c:	2500      	movs	r5, #0
   19f7e:	e7f8      	b.n	19f72 <cosem_setMulticastEntries+0x6e>

00019f80 <cosem_setSwitchTable>:


int cosem_setSwitchTable(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   19f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19f82:	460d      	mov	r5, r1
    int ret = 0;
    int pos;
    arr_empty(&object->switchTable);
   19f84:	f100 061c 	add.w	r6, r0, #28
   19f88:	4630      	mov	r0, r6
   19f8a:	f7f7 f8b1 	bl	110f0 <arr_empty>
    if (value->Arr != NULL)
   19f8e:	68ab      	ldr	r3, [r5, #8]
   19f90:	b9d3      	cbnz	r3, 19fc8 <cosem_setSwitchTable+0x48>
            *tmp = (uint16_t)var_toInteger(it);
            arr_push(&object->switchTable, tmp);
        }
    }
    return 0;
}
   19f92:	2000      	movs	r0, #0
   19f94:	b003      	add	sp, #12
   19f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((ret = va_getByIndex(value->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
   19f98:	aa01      	add	r2, sp, #4
   19f9a:	4621      	mov	r1, r4
   19f9c:	f001 fb21 	bl	1b5e2 <va_getByIndex>
   19fa0:	2800      	cmp	r0, #0
   19fa2:	d1f6      	bne.n	19f92 <cosem_setSwitchTable+0x12>
            uint16_t* tmp = (uint16_t*)gxmalloc(sizeof(uint16_t));
   19fa4:	2002      	movs	r0, #2
   19fa6:	f7f2 fc5d 	bl	c864 <malloc>
   19faa:	4607      	mov	r7, r0
            *tmp = (uint16_t)var_toInteger(it);
   19fac:	9801      	ldr	r0, [sp, #4]
   19fae:	f001 fc92 	bl	1b8d6 <var_toInteger>
            arr_push(&object->switchTable, tmp);
   19fb2:	4639      	mov	r1, r7
            *tmp = (uint16_t)var_toInteger(it);
   19fb4:	8038      	strh	r0, [r7, #0]
            arr_push(&object->switchTable, tmp);
   19fb6:	4630      	mov	r0, r6
   19fb8:	f7f7 f86a 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19fbc:	3401      	adds	r4, #1
   19fbe:	68a8      	ldr	r0, [r5, #8]
   19fc0:	88c3      	ldrh	r3, [r0, #6]
   19fc2:	42a3      	cmp	r3, r4
   19fc4:	d1e8      	bne.n	19f98 <cosem_setSwitchTable+0x18>
   19fc6:	e7e4      	b.n	19f92 <cosem_setSwitchTable+0x12>
   19fc8:	2400      	movs	r4, #0
   19fca:	e7f8      	b.n	19fbe <cosem_setSwitchTable+0x3e>

00019fcc <cosem_setDirectTable>:

int cosem_setDirectTable(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   19fcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19fd0:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacDirectTable* it;
    arr_clear(&object->directTable);
   19fd2:	f100 0728 	add.w	r7, r0, #40	; 0x28
   19fd6:	4638      	mov	r0, r7
   19fd8:	f7f7 f86f 	bl	110ba <arr_clear>
    if (value->Arr != NULL)
   19fdc:	68b3      	ldr	r3, [r6, #8]
   19fde:	2b00      	cmp	r3, #0
   19fe0:	d171      	bne.n	1a0c6 <cosem_setDirectTable+0xfa>
            }
            arr_push(&object->directTable, it);
        }
    }
    return 0;
}
   19fe2:	2000      	movs	r0, #0
   19fe4:	b002      	add	sp, #8
   19fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   19fea:	466a      	mov	r2, sp
   19fec:	4629      	mov	r1, r5
   19fee:	f001 faf8 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19ff2:	4680      	mov	r8, r0
   19ff4:	2800      	cmp	r0, #0
   19ff6:	d1f4      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            it = (gxMacDirectTable*)gxmalloc(sizeof(gxMacDirectTable));
   19ff8:	2012      	movs	r0, #18
   19ffa:	f7f2 fc33 	bl	c864 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   19ffe:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacDirectTable*)gxmalloc(sizeof(gxMacDirectTable));
   1a000:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a002:	aa01      	add	r2, sp, #4
   1a004:	6898      	ldr	r0, [r3, #8]
   1a006:	4641      	mov	r1, r8
   1a008:	f001 faeb 	bl	1b5e2 <va_getByIndex>
   1a00c:	2800      	cmp	r0, #0
   1a00e:	d1e8      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            it->sourceSId = (short)var_toInteger(tmp2);
   1a010:	9801      	ldr	r0, [sp, #4]
   1a012:	f001 fc60 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a016:	9b00      	ldr	r3, [sp, #0]
            it->sourceSId = (short)var_toInteger(tmp2);
   1a018:	8020      	strh	r0, [r4, #0]
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a01a:	aa01      	add	r2, sp, #4
   1a01c:	6898      	ldr	r0, [r3, #8]
   1a01e:	2101      	movs	r1, #1
   1a020:	f001 fadf 	bl	1b5e2 <va_getByIndex>
   1a024:	2800      	cmp	r0, #0
   1a026:	d1dc      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            it->sourceLnId = (short)var_toInteger(tmp2);
   1a028:	9801      	ldr	r0, [sp, #4]
   1a02a:	f001 fc54 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a02e:	9b00      	ldr	r3, [sp, #0]
            it->sourceLnId = (short)var_toInteger(tmp2);
   1a030:	8060      	strh	r0, [r4, #2]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a032:	aa01      	add	r2, sp, #4
   1a034:	6898      	ldr	r0, [r3, #8]
   1a036:	2102      	movs	r1, #2
   1a038:	f001 fad3 	bl	1b5e2 <va_getByIndex>
   1a03c:	2800      	cmp	r0, #0
   1a03e:	d1d0      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            it->sourceLcId = (short)var_toInteger(tmp2);
   1a040:	9801      	ldr	r0, [sp, #4]
   1a042:	f001 fc48 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a046:	9b00      	ldr	r3, [sp, #0]
            it->sourceLcId = (short)var_toInteger(tmp2);
   1a048:	80a0      	strh	r0, [r4, #4]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a04a:	aa01      	add	r2, sp, #4
   1a04c:	6898      	ldr	r0, [r3, #8]
   1a04e:	2103      	movs	r1, #3
   1a050:	f001 fac7 	bl	1b5e2 <va_getByIndex>
   1a054:	2800      	cmp	r0, #0
   1a056:	d1c4      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            it->destinationSId = (short)var_toInteger(tmp2);
   1a058:	9801      	ldr	r0, [sp, #4]
   1a05a:	f001 fc3c 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a05e:	9b00      	ldr	r3, [sp, #0]
            it->destinationSId = (short)var_toInteger(tmp2);
   1a060:	80e0      	strh	r0, [r4, #6]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a062:	aa01      	add	r2, sp, #4
   1a064:	6898      	ldr	r0, [r3, #8]
   1a066:	2104      	movs	r1, #4
   1a068:	f001 fabb 	bl	1b5e2 <va_getByIndex>
   1a06c:	2800      	cmp	r0, #0
   1a06e:	d1b8      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            it->destinationLnId = (short)var_toInteger(tmp2);
   1a070:	9801      	ldr	r0, [sp, #4]
   1a072:	f001 fc30 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a076:	9b00      	ldr	r3, [sp, #0]
            it->destinationLnId = (short)var_toInteger(tmp2);
   1a078:	8120      	strh	r0, [r4, #8]
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a07a:	aa01      	add	r2, sp, #4
   1a07c:	6898      	ldr	r0, [r3, #8]
   1a07e:	2105      	movs	r1, #5
   1a080:	f001 faaf 	bl	1b5e2 <va_getByIndex>
   1a084:	2800      	cmp	r0, #0
   1a086:	d1ac      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            it->destinationLcId = (short) var_toInteger(tmp2);
   1a088:	9801      	ldr	r0, [sp, #4]
   1a08a:	f001 fc24 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a08e:	9b00      	ldr	r3, [sp, #0]
            it->destinationLcId = (short) var_toInteger(tmp2);
   1a090:	8160      	strh	r0, [r4, #10]
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a092:	aa01      	add	r2, sp, #4
   1a094:	6898      	ldr	r0, [r3, #8]
   1a096:	2106      	movs	r1, #6
   1a098:	f001 faa3 	bl	1b5e2 <va_getByIndex>
   1a09c:	2800      	cmp	r0, #0
   1a09e:	d1a0      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            if ((ret = bb_get(tmp2->byteArr, it->did, sizeof(it->did))) != DLMS_ERROR_CODE_OK)
   1a0a0:	9b01      	ldr	r3, [sp, #4]
   1a0a2:	2206      	movs	r2, #6
   1a0a4:	6898      	ldr	r0, [r3, #8]
   1a0a6:	f104 010c 	add.w	r1, r4, #12
   1a0aa:	f7f3 ffb7 	bl	e01c <bb_get>
   1a0ae:	2800      	cmp	r0, #0
   1a0b0:	d197      	bne.n	19fe2 <cosem_setDirectTable+0x16>
            arr_push(&object->directTable, it);
   1a0b2:	4621      	mov	r1, r4
   1a0b4:	4638      	mov	r0, r7
   1a0b6:	f7f6 ffeb 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1a0ba:	3501      	adds	r5, #1
   1a0bc:	68b0      	ldr	r0, [r6, #8]
   1a0be:	88c3      	ldrh	r3, [r0, #6]
   1a0c0:	42ab      	cmp	r3, r5
   1a0c2:	d192      	bne.n	19fea <cosem_setDirectTable+0x1e>
   1a0c4:	e78d      	b.n	19fe2 <cosem_setDirectTable+0x16>
   1a0c6:	2500      	movs	r5, #0
   1a0c8:	e7f8      	b.n	1a0bc <cosem_setDirectTable+0xf0>

0001a0ca <cosem_setAvailableSwitches>:

int cosem_setAvailableSwitches(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   1a0ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a0cc:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacAvailableSwitch* it;
    obj_clearAvailableSwitches(&object->availableSwitches);
   1a0ce:	f100 0734 	add.w	r7, r0, #52	; 0x34
   1a0d2:	4638      	mov	r0, r7
   1a0d4:	f7fa fd48 	bl	14b68 <obj_clearAvailableSwitches>
    if (value->Arr != NULL)
   1a0d8:	68b3      	ldr	r3, [r6, #8]
   1a0da:	2b00      	cmp	r3, #0
   1a0dc:	d162      	bne.n	1a1a4 <cosem_setAvailableSwitches+0xda>
            it->rxSnr = (signed char) var_toInteger(tmp2);
            arr_push(&object->availableSwitches, it);
        }
    }
    return 0;
}
   1a0de:	2000      	movs	r0, #0
   1a0e0:	b003      	add	sp, #12
   1a0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a0e4:	9b00      	ldr	r3, [sp, #0]
   1a0e6:	aa01      	add	r2, sp, #4
   1a0e8:	6898      	ldr	r0, [r3, #8]
   1a0ea:	2101      	movs	r1, #1
   1a0ec:	f001 fa79 	bl	1b5e2 <va_getByIndex>
   1a0f0:	2800      	cmp	r0, #0
   1a0f2:	d153      	bne.n	1a19c <cosem_setAvailableSwitches+0xd2>
            it->lsId = (short)var_toInteger(tmp2);
   1a0f4:	9801      	ldr	r0, [sp, #4]
   1a0f6:	f001 fbee 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a0fa:	9b00      	ldr	r3, [sp, #0]
            it->lsId = (short)var_toInteger(tmp2);
   1a0fc:	81a0      	strh	r0, [r4, #12]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a0fe:	aa01      	add	r2, sp, #4
   1a100:	6898      	ldr	r0, [r3, #8]
   1a102:	2102      	movs	r1, #2
   1a104:	f001 fa6d 	bl	1b5e2 <va_getByIndex>
   1a108:	2800      	cmp	r0, #0
   1a10a:	d147      	bne.n	1a19c <cosem_setAvailableSwitches+0xd2>
            it->level = (signed char) var_toInteger(tmp2);
   1a10c:	9801      	ldr	r0, [sp, #4]
   1a10e:	f001 fbe2 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a112:	9b00      	ldr	r3, [sp, #0]
            it->level = (signed char) var_toInteger(tmp2);
   1a114:	73a0      	strb	r0, [r4, #14]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a116:	6898      	ldr	r0, [r3, #8]
   1a118:	aa01      	add	r2, sp, #4
   1a11a:	2103      	movs	r1, #3
   1a11c:	f001 fa61 	bl	1b5e2 <va_getByIndex>
   1a120:	2800      	cmp	r0, #0
   1a122:	d13b      	bne.n	1a19c <cosem_setAvailableSwitches+0xd2>
            it->rxLevel = (signed char) var_toInteger(tmp2);
   1a124:	9801      	ldr	r0, [sp, #4]
   1a126:	f001 fbd6 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a12a:	9b00      	ldr	r3, [sp, #0]
            it->rxLevel = (signed char) var_toInteger(tmp2);
   1a12c:	73e0      	strb	r0, [r4, #15]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a12e:	6898      	ldr	r0, [r3, #8]
   1a130:	aa01      	add	r2, sp, #4
   1a132:	2104      	movs	r1, #4
   1a134:	f001 fa55 	bl	1b5e2 <va_getByIndex>
   1a138:	2800      	cmp	r0, #0
   1a13a:	d12f      	bne.n	1a19c <cosem_setAvailableSwitches+0xd2>
            it->rxSnr = (signed char) var_toInteger(tmp2);
   1a13c:	9801      	ldr	r0, [sp, #4]
   1a13e:	f001 fbca 	bl	1b8d6 <var_toInteger>
            arr_push(&object->availableSwitches, it);
   1a142:	4621      	mov	r1, r4
            it->rxSnr = (signed char) var_toInteger(tmp2);
   1a144:	7420      	strb	r0, [r4, #16]
            arr_push(&object->availableSwitches, it);
   1a146:	4638      	mov	r0, r7
   1a148:	f7f6 ffa2 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1a14c:	3501      	adds	r5, #1
   1a14e:	68b0      	ldr	r0, [r6, #8]
   1a150:	88c3      	ldrh	r3, [r0, #6]
   1a152:	42ab      	cmp	r3, r5
   1a154:	d0c3      	beq.n	1a0de <cosem_setAvailableSwitches+0x14>
            ret = va_getByIndex(value->Arr, pos, &tmp);
   1a156:	4629      	mov	r1, r5
   1a158:	466a      	mov	r2, sp
   1a15a:	f001 fa42 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1a15e:	4601      	mov	r1, r0
   1a160:	2800      	cmp	r0, #0
   1a162:	d1bc      	bne.n	1a0de <cosem_setAvailableSwitches+0x14>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a164:	9b00      	ldr	r3, [sp, #0]
   1a166:	aa01      	add	r2, sp, #4
   1a168:	6898      	ldr	r0, [r3, #8]
   1a16a:	f001 fa3a 	bl	1b5e2 <va_getByIndex>
   1a16e:	2800      	cmp	r0, #0
   1a170:	d1b5      	bne.n	1a0de <cosem_setAvailableSwitches+0x14>
            it = (gxMacAvailableSwitch*)gxmalloc(sizeof(gxMacAvailableSwitch));
   1a172:	2014      	movs	r0, #20
   1a174:	f7f2 fb76 	bl	c864 <malloc>
   1a178:	4604      	mov	r4, r0
            BYTE_BUFFER_INIT(&it->sna);
   1a17a:	f7f3 fb97 	bl	d8ac <bb_init>
            bb_capacity(&it->sna, tmp2->byteArr->size);
   1a17e:	9b01      	ldr	r3, [sp, #4]
   1a180:	689b      	ldr	r3, [r3, #8]
   1a182:	4620      	mov	r0, r4
   1a184:	88d9      	ldrh	r1, [r3, #6]
   1a186:	f7f3 fb97 	bl	d8b8 <bb_capacity>
            if ((ret = bb_set(&it->sna, tmp2->byteArr->data, tmp2->byteArr->size)) != DLMS_ERROR_CODE_OK)
   1a18a:	9b01      	ldr	r3, [sp, #4]
   1a18c:	689b      	ldr	r3, [r3, #8]
   1a18e:	4620      	mov	r0, r4
   1a190:	88da      	ldrh	r2, [r3, #6]
   1a192:	6819      	ldr	r1, [r3, #0]
   1a194:	f7f3 fcd9 	bl	db4a <bb_set>
   1a198:	2800      	cmp	r0, #0
   1a19a:	d0a3      	beq.n	1a0e4 <cosem_setAvailableSwitches+0x1a>
                gxfree(it);
   1a19c:	4620      	mov	r0, r4
   1a19e:	f7f2 fb69 	bl	c874 <free>
                break;
   1a1a2:	e79c      	b.n	1a0de <cosem_setAvailableSwitches+0x14>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1a1a4:	2500      	movs	r5, #0
   1a1a6:	e7d2      	b.n	1a14e <cosem_setAvailableSwitches+0x84>

0001a1a8 <cosem_setCommunications>:

int cosem_setCommunications(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   1a1a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a1ac:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacPhyCommunication* it;
    arr_clear(&object->communications);
   1a1ae:	f100 0740 	add.w	r7, r0, #64	; 0x40
   1a1b2:	4638      	mov	r0, r7
   1a1b4:	f7f6 ff81 	bl	110ba <arr_clear>
    if (value->Arr != NULL)
   1a1b8:	68b3      	ldr	r3, [r6, #8]
   1a1ba:	2b00      	cmp	r3, #0
   1a1bc:	f040 808a 	bne.w	1a2d4 <cosem_setCommunications+0x12c>
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
            arr_push(&object->communications, it);
        }
    }
    return 0;
}
   1a1c0:	2000      	movs	r0, #0
   1a1c2:	b002      	add	sp, #8
   1a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   1a1c8:	466a      	mov	r2, sp
   1a1ca:	4629      	mov	r1, r5
   1a1cc:	f001 fa09 	bl	1b5e2 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1a1d0:	4680      	mov	r8, r0
   1a1d2:	2800      	cmp	r0, #0
   1a1d4:	d1f4      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it = (gxMacPhyCommunication*)gxmalloc(sizeof(gxMacPhyCommunication));
   1a1d6:	200e      	movs	r0, #14
   1a1d8:	f7f2 fb44 	bl	c864 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a1dc:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacPhyCommunication*)gxmalloc(sizeof(gxMacPhyCommunication));
   1a1de:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a1e0:	aa01      	add	r2, sp, #4
   1a1e2:	6898      	ldr	r0, [r3, #8]
   1a1e4:	4641      	mov	r1, r8
   1a1e6:	f001 f9fc 	bl	1b5e2 <va_getByIndex>
   1a1ea:	2800      	cmp	r0, #0
   1a1ec:	d1e8      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            if ((ret = bb_get(tmp2->byteArr, it->eui, sizeof(it->eui))) != DLMS_ERROR_CODE_OK)
   1a1ee:	9b01      	ldr	r3, [sp, #4]
   1a1f0:	2206      	movs	r2, #6
   1a1f2:	6898      	ldr	r0, [r3, #8]
   1a1f4:	4621      	mov	r1, r4
   1a1f6:	f7f3 ff11 	bl	e01c <bb_get>
   1a1fa:	2800      	cmp	r0, #0
   1a1fc:	d1e0      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a1fe:	9b00      	ldr	r3, [sp, #0]
   1a200:	aa01      	add	r2, sp, #4
   1a202:	6898      	ldr	r0, [r3, #8]
   1a204:	2101      	movs	r1, #1
   1a206:	f001 f9ec 	bl	1b5e2 <va_getByIndex>
   1a20a:	2800      	cmp	r0, #0
   1a20c:	d1d8      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it->txPower = (signed char) var_toInteger(tmp2);
   1a20e:	9801      	ldr	r0, [sp, #4]
   1a210:	f001 fb61 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a214:	9b00      	ldr	r3, [sp, #0]
            it->txPower = (signed char) var_toInteger(tmp2);
   1a216:	71a0      	strb	r0, [r4, #6]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a218:	6898      	ldr	r0, [r3, #8]
   1a21a:	aa01      	add	r2, sp, #4
   1a21c:	2102      	movs	r1, #2
   1a21e:	f001 f9e0 	bl	1b5e2 <va_getByIndex>
   1a222:	2800      	cmp	r0, #0
   1a224:	d1cc      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it->txCoding = (signed char) var_toInteger(tmp2);
   1a226:	9801      	ldr	r0, [sp, #4]
   1a228:	f001 fb55 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a22c:	9b00      	ldr	r3, [sp, #0]
            it->txCoding = (signed char) var_toInteger(tmp2);
   1a22e:	71e0      	strb	r0, [r4, #7]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a230:	6898      	ldr	r0, [r3, #8]
   1a232:	aa01      	add	r2, sp, #4
   1a234:	2103      	movs	r1, #3
   1a236:	f001 f9d4 	bl	1b5e2 <va_getByIndex>
   1a23a:	2800      	cmp	r0, #0
   1a23c:	d1c0      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it->rxCoding = (signed char) var_toInteger(tmp2);
   1a23e:	9801      	ldr	r0, [sp, #4]
   1a240:	f001 fb49 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a244:	9b00      	ldr	r3, [sp, #0]
            it->rxCoding = (signed char) var_toInteger(tmp2);
   1a246:	7220      	strb	r0, [r4, #8]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a248:	6898      	ldr	r0, [r3, #8]
   1a24a:	aa01      	add	r2, sp, #4
   1a24c:	2104      	movs	r1, #4
   1a24e:	f001 f9c8 	bl	1b5e2 <va_getByIndex>
   1a252:	2800      	cmp	r0, #0
   1a254:	d1b4      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it->rxLvl = (signed char) var_toInteger(tmp2);
   1a256:	9801      	ldr	r0, [sp, #4]
   1a258:	f001 fb3d 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a25c:	9b00      	ldr	r3, [sp, #0]
            it->rxLvl = (signed char) var_toInteger(tmp2);
   1a25e:	7260      	strb	r0, [r4, #9]
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a260:	6898      	ldr	r0, [r3, #8]
   1a262:	aa01      	add	r2, sp, #4
   1a264:	2105      	movs	r1, #5
   1a266:	f001 f9bc 	bl	1b5e2 <va_getByIndex>
   1a26a:	2800      	cmp	r0, #0
   1a26c:	d1a8      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it->snr = (signed char) var_toInteger(tmp2);
   1a26e:	9801      	ldr	r0, [sp, #4]
   1a270:	f001 fb31 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a274:	9b00      	ldr	r3, [sp, #0]
            it->snr = (signed char) var_toInteger(tmp2);
   1a276:	72a0      	strb	r0, [r4, #10]
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a278:	6898      	ldr	r0, [r3, #8]
   1a27a:	aa01      	add	r2, sp, #4
   1a27c:	2106      	movs	r1, #6
   1a27e:	f001 f9b0 	bl	1b5e2 <va_getByIndex>
   1a282:	2800      	cmp	r0, #0
   1a284:	d19c      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it->txPowerModified = (signed char) var_toInteger(tmp2);
   1a286:	9801      	ldr	r0, [sp, #4]
   1a288:	f001 fb25 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 7, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a28c:	9b00      	ldr	r3, [sp, #0]
            it->txPowerModified = (signed char) var_toInteger(tmp2);
   1a28e:	72e0      	strb	r0, [r4, #11]
            if ((ret = va_getByIndex(tmp->Arr, 7, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a290:	6898      	ldr	r0, [r3, #8]
   1a292:	aa01      	add	r2, sp, #4
   1a294:	2107      	movs	r1, #7
   1a296:	f001 f9a4 	bl	1b5e2 <va_getByIndex>
   1a29a:	2800      	cmp	r0, #0
   1a29c:	d190      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it->txCodingModified = (signed char) var_toInteger(tmp2);
   1a29e:	9801      	ldr	r0, [sp, #4]
   1a2a0:	f001 fb19 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 8, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a2a4:	9b00      	ldr	r3, [sp, #0]
            it->txCodingModified = (signed char) var_toInteger(tmp2);
   1a2a6:	7320      	strb	r0, [r4, #12]
            if ((ret = va_getByIndex(tmp->Arr, 8, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a2a8:	6898      	ldr	r0, [r3, #8]
   1a2aa:	aa01      	add	r2, sp, #4
   1a2ac:	2108      	movs	r1, #8
   1a2ae:	f001 f998 	bl	1b5e2 <va_getByIndex>
   1a2b2:	2800      	cmp	r0, #0
   1a2b4:	d184      	bne.n	1a1c0 <cosem_setCommunications+0x18>
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
   1a2b6:	9801      	ldr	r0, [sp, #4]
   1a2b8:	f001 fb0d 	bl	1b8d6 <var_toInteger>
            arr_push(&object->communications, it);
   1a2bc:	4621      	mov	r1, r4
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
   1a2be:	7360      	strb	r0, [r4, #13]
            arr_push(&object->communications, it);
   1a2c0:	4638      	mov	r0, r7
   1a2c2:	f7f6 fee5 	bl	11090 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1a2c6:	3501      	adds	r5, #1
   1a2c8:	68b0      	ldr	r0, [r6, #8]
   1a2ca:	88c3      	ldrh	r3, [r0, #6]
   1a2cc:	42ab      	cmp	r3, r5
   1a2ce:	f47f af7b 	bne.w	1a1c8 <cosem_setCommunications+0x20>
   1a2d2:	e775      	b.n	1a1c0 <cosem_setCommunications+0x18>
   1a2d4:	2500      	movs	r5, #0
   1a2d6:	e7f7      	b.n	1a2c8 <cosem_setCommunications+0x120>

0001a2d8 <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData>:
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1a2d8:	3a02      	subs	r2, #2
{
   1a2da:	4608      	mov	r0, r1
   1a2dc:	4619      	mov	r1, r3
   1a2de:	2a04      	cmp	r2, #4
   1a2e0:	d80e      	bhi.n	1a300 <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData+0x28>
   1a2e2:	e8df f002 	tbb	[pc, r2]
   1a2e6:	0503      	.short	0x0503
   1a2e8:	0907      	.short	0x0907
   1a2ea:	0b          	.byte	0x0b
   1a2eb:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setMulticastEntries(object, value);
   1a2ec:	f7ff be0a 	b.w	19f04 <cosem_setMulticastEntries>
        break;
    case 3:
        ret = cosem_setSwitchTable(object, value);
   1a2f0:	f7ff be46 	b.w	19f80 <cosem_setSwitchTable>
        break;
    case 4:
        ret = cosem_setDirectTable(object, value);
   1a2f4:	f7ff be6a 	b.w	19fcc <cosem_setDirectTable>
        break;
    case 5:
        ret = cosem_setAvailableSwitches(object, value);
   1a2f8:	f7ff bee7 	b.w	1a0ca <cosem_setAvailableSwitches>
        break;
    case 6:
        ret = cosem_setCommunications(object, value);
   1a2fc:	f7ff bf54 	b.w	1a1a8 <cosem_setCommunications>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a300:	f44f 7081 	mov.w	r0, #258	; 0x102
   1a304:	4770      	bx	lr

0001a306 <cosem_setPrimeNbOfdmPlcApplicationsIdentification>:
    gxPrimeNbOfdmPlcApplicationsIdentification* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1a306:	2a03      	cmp	r2, #3
{
   1a308:	b538      	push	{r3, r4, r5, lr}
   1a30a:	460c      	mov	r4, r1
   1a30c:	461d      	mov	r5, r3
    switch (index)
   1a30e:	d013      	beq.n	1a338 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x32>
   1a310:	2a04      	cmp	r2, #4
   1a312:	d016      	beq.n	1a342 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x3c>
   1a314:	2a02      	cmp	r2, #2
   1a316:	d119      	bne.n	1a34c <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x46>
    {
    case 2:
    {
        bb_clear(&object->firmwareVersion);
   1a318:	3410      	adds	r4, #16
   1a31a:	4620      	mov	r0, r4
   1a31c:	f7f3 fc89 	bl	dc32 <bb_clear>
        bb_set2(&object->firmwareVersion, value->byteArr, 0, bb_size(value->byteArr));
   1a320:	68ad      	ldr	r5, [r5, #8]
   1a322:	4628      	mov	r0, r5
   1a324:	f7f3 fabf 	bl	d8a6 <bb_size>
   1a328:	2200      	movs	r2, #0
   1a32a:	4603      	mov	r3, r0
   1a32c:	4629      	mov	r1, r5
   1a32e:	4620      	mov	r0, r4
   1a330:	f7f3 fc3a 	bl	dba8 <bb_set2>
    int ret = 0;
   1a334:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a336:	bd38      	pop	{r3, r4, r5, pc}
        object->vendorId = (uint16_t)var_toInteger(value);
   1a338:	4618      	mov	r0, r3
   1a33a:	f001 facc 	bl	1b8d6 <var_toInteger>
   1a33e:	83a0      	strh	r0, [r4, #28]
        break;
   1a340:	e7f8      	b.n	1a334 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x2e>
        object->productId = (uint16_t)var_toInteger(value);
   1a342:	4618      	mov	r0, r3
   1a344:	f001 fac7 	bl	1b8d6 <var_toInteger>
   1a348:	83e0      	strh	r0, [r4, #30]
   1a34a:	e7f3      	b.n	1a334 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x2e>
    switch (index)
   1a34c:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a350:	e7f1      	b.n	1a336 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x30>

0001a352 <cosem_setArbitrator>:
int cosem_setArbitrator(
    dlmsSettings* settings,
    gxArbitrator* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   1a352:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a356:	3a02      	subs	r2, #2
   1a358:	4680      	mov	r8, r0
   1a35a:	460c      	mov	r4, r1
   1a35c:	461d      	mov	r5, r3
   1a35e:	2a04      	cmp	r2, #4
   1a360:	f200 80de 	bhi.w	1a520 <cosem_setArbitrator+0x1ce>
   1a364:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a368:	005e0005 	.word	0x005e0005
   1a36c:	00ac0086 	.word	0x00ac0086
   1a370:	00d6      	.short	0x00d6
    dlmsVARIANT* tmp, * tmp2;
    switch (index)
    {
    case 2:
    {
        arr_clear(&object->actions);
   1a372:	3410      	adds	r4, #16
   1a374:	4620      	mov	r0, r4
   1a376:	f7f6 fea0 	bl	110ba <arr_clear>
        if (value->Arr != NULL)
   1a37a:	68ab      	ldr	r3, [r5, #8]
   1a37c:	2b00      	cmp	r3, #0
   1a37e:	d14e      	bne.n	1a41e <cosem_setArbitrator+0xcc>
    int pos, ret = 0;
   1a380:	2000      	movs	r0, #0
        }
    }
    break;
    case 6:
        object->lastOutcome = (unsigned char)var_toInteger(value);
        break;
   1a382:	e049      	b.n	1a418 <cosem_setArbitrator+0xc6>
                    if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&it->script)) != 0)
   1a384:	4631      	mov	r1, r6
   1a386:	2009      	movs	r0, #9
   1a388:	f7e7 febe 	bl	2108 <cosem_createObject>
   1a38c:	2800      	cmp	r0, #0
   1a38e:	d143      	bne.n	1a418 <cosem_setArbitrator+0xc6>
                    memcpy(it->script->base.logicalName, tmp2->byteArr->data, tmp2->byteArr->size);
   1a390:	9b01      	ldr	r3, [sp, #4]
   1a392:	6830      	ldr	r0, [r6, #0]
   1a394:	689b      	ldr	r3, [r3, #8]
   1a396:	3006      	adds	r0, #6
   1a398:	6819      	ldr	r1, [r3, #0]
   1a39a:	88da      	ldrh	r2, [r3, #6]
   1a39c:	f003 fa78 	bl	1d890 <memcpy>
                    ret = oa_push(&settings->releasedObjects, &it->script->base);
   1a3a0:	6831      	ldr	r1, [r6, #0]
   1a3a2:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   1a3a6:	f000 fe4a 	bl	1b03e <oa_push>
                    if (ret != DLMS_ERROR_CODE_OK)
   1a3aa:	b368      	cbz	r0, 1a408 <cosem_setArbitrator+0xb6>
   1a3ac:	e034      	b.n	1a418 <cosem_setArbitrator+0xc6>
                it->scriptSelector = (uint16_t)var_toInteger(tmp2);
   1a3ae:	9801      	ldr	r0, [sp, #4]
   1a3b0:	f001 fa91 	bl	1b8d6 <var_toInteger>
                arr_push(&object->actions, it);
   1a3b4:	4631      	mov	r1, r6
                it->scriptSelector = (uint16_t)var_toInteger(tmp2);
   1a3b6:	80b0      	strh	r0, [r6, #4]
                arr_push(&object->actions, it);
   1a3b8:	4620      	mov	r0, r4
   1a3ba:	f7f6 fe69 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a3be:	3701      	adds	r7, #1
   1a3c0:	68ab      	ldr	r3, [r5, #8]
   1a3c2:	88db      	ldrh	r3, [r3, #6]
   1a3c4:	42bb      	cmp	r3, r7
   1a3c6:	d0db      	beq.n	1a380 <cosem_setArbitrator+0x2e>
                it = (gxActionItem*)gxmalloc(sizeof(gxActionItem));
   1a3c8:	2008      	movs	r0, #8
   1a3ca:	f7f2 fa4b 	bl	c864 <malloc>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1a3ce:	466a      	mov	r2, sp
                it = (gxActionItem*)gxmalloc(sizeof(gxActionItem));
   1a3d0:	4606      	mov	r6, r0
                it->script = NULL;
   1a3d2:	f8c0 9000 	str.w	r9, [r0]
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1a3d6:	4639      	mov	r1, r7
   1a3d8:	68a8      	ldr	r0, [r5, #8]
   1a3da:	f001 f902 	bl	1b5e2 <va_getByIndex>
   1a3de:	b9d8      	cbnz	r0, 1a418 <cosem_setArbitrator+0xc6>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a3e0:	9b00      	ldr	r3, [sp, #0]
   1a3e2:	4601      	mov	r1, r0
   1a3e4:	aa01      	add	r2, sp, #4
   1a3e6:	6898      	ldr	r0, [r3, #8]
   1a3e8:	f001 f8fb 	bl	1b5e2 <va_getByIndex>
   1a3ec:	b9a0      	cbnz	r0, 1a418 <cosem_setArbitrator+0xc6>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp2->byteArr->data, (gxObject**)&it->script)) != 0)
   1a3ee:	9b01      	ldr	r3, [sp, #4]
   1a3f0:	689a      	ldr	r2, [r3, #8]
   1a3f2:	2109      	movs	r1, #9
   1a3f4:	6812      	ldr	r2, [r2, #0]
   1a3f6:	4633      	mov	r3, r6
   1a3f8:	f108 0098 	add.w	r0, r8, #152	; 0x98
   1a3fc:	f000 feae 	bl	1b15c <oa_findByLN>
   1a400:	b950      	cbnz	r0, 1a418 <cosem_setArbitrator+0xc6>
                if (it->script == NULL)
   1a402:	6833      	ldr	r3, [r6, #0]
   1a404:	2b00      	cmp	r3, #0
   1a406:	d0bd      	beq.n	1a384 <cosem_setArbitrator+0x32>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a408:	9b00      	ldr	r3, [sp, #0]
   1a40a:	aa01      	add	r2, sp, #4
   1a40c:	6898      	ldr	r0, [r3, #8]
   1a40e:	2101      	movs	r1, #1
   1a410:	f001 f8e7 	bl	1b5e2 <va_getByIndex>
   1a414:	2800      	cmp	r0, #0
   1a416:	d0ca      	beq.n	1a3ae <cosem_setArbitrator+0x5c>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a418:	b003      	add	sp, #12
   1a41a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a41e:	2700      	movs	r7, #0
                it->script = NULL;
   1a420:	46b9      	mov	r9, r7
   1a422:	e7cd      	b.n	1a3c0 <cosem_setArbitrator+0x6e>
        obj_clearBitArrayList(&object->permissionsTable);
   1a424:	341c      	adds	r4, #28
   1a426:	4620      	mov	r0, r4
   1a428:	f7fa fb6e 	bl	14b08 <obj_clearBitArrayList>
        if (value->Arr != NULL)
   1a42c:	68ab      	ldr	r3, [r5, #8]
   1a42e:	2b00      	cmp	r3, #0
   1a430:	d0a6      	beq.n	1a380 <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a432:	2600      	movs	r6, #0
   1a434:	e019      	b.n	1a46a <cosem_setArbitrator+0x118>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1a436:	466a      	mov	r2, sp
   1a438:	4631      	mov	r1, r6
   1a43a:	f001 f8d2 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a43e:	2800      	cmp	r0, #0
   1a440:	d1ea      	bne.n	1a418 <cosem_setArbitrator+0xc6>
                ba = (bitArray*)gxmalloc(sizeof(bitArray));
   1a442:	2008      	movs	r0, #8
   1a444:	f7f2 fa0e 	bl	c864 <malloc>
   1a448:	4607      	mov	r7, r0
                ba_init(ba);
   1a44a:	f7f3 f928 	bl	d69e <ba_init>
                if ((ba_copy(ba, tmp->bitArr->data, tmp->bitArr->size)) != 0)
   1a44e:	9b00      	ldr	r3, [sp, #0]
   1a450:	689b      	ldr	r3, [r3, #8]
   1a452:	4638      	mov	r0, r7
   1a454:	88da      	ldrh	r2, [r3, #6]
   1a456:	6819      	ldr	r1, [r3, #0]
   1a458:	f7f3 f99c 	bl	d794 <ba_copy>
   1a45c:	2800      	cmp	r0, #0
   1a45e:	d18f      	bne.n	1a380 <cosem_setArbitrator+0x2e>
                arr_push(&object->permissionsTable, ba);
   1a460:	4639      	mov	r1, r7
   1a462:	4620      	mov	r0, r4
   1a464:	f7f6 fe14 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a468:	3601      	adds	r6, #1
   1a46a:	68a8      	ldr	r0, [r5, #8]
   1a46c:	88c3      	ldrh	r3, [r0, #6]
   1a46e:	42b3      	cmp	r3, r6
   1a470:	d1e1      	bne.n	1a436 <cosem_setArbitrator+0xe4>
   1a472:	e785      	b.n	1a380 <cosem_setArbitrator+0x2e>
        arr_clear(&object->weightingsTable);
   1a474:	3428      	adds	r4, #40	; 0x28
   1a476:	4620      	mov	r0, r4
   1a478:	f7f6 fe1f 	bl	110ba <arr_clear>
        if (value->Arr != NULL)
   1a47c:	68ab      	ldr	r3, [r5, #8]
   1a47e:	2b00      	cmp	r3, #0
   1a480:	f43f af7e 	beq.w	1a380 <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a484:	2600      	movs	r6, #0
   1a486:	e016      	b.n	1a4b6 <cosem_setArbitrator+0x164>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1a488:	466a      	mov	r2, sp
   1a48a:	4631      	mov	r1, r6
   1a48c:	f001 f8a9 	bl	1b5e2 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a490:	2800      	cmp	r0, #0
   1a492:	d1c1      	bne.n	1a418 <cosem_setArbitrator+0xc6>
                tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1a494:	2010      	movs	r0, #16
   1a496:	f7f2 f9e5 	bl	c864 <malloc>
   1a49a:	4607      	mov	r7, r0
                var_init(tmp2);
   1a49c:	f000 fec7 	bl	1b22e <var_init>
                ret = var_copy(tmp2, tmp);
   1a4a0:	9900      	ldr	r1, [sp, #0]
   1a4a2:	4638      	mov	r0, r7
   1a4a4:	f7ea f87e 	bl	45a4 <var_copy>
                if (ret != 0)
   1a4a8:	2800      	cmp	r0, #0
   1a4aa:	d1b5      	bne.n	1a418 <cosem_setArbitrator+0xc6>
                arr_push(&object->weightingsTable, tmp2);
   1a4ac:	4639      	mov	r1, r7
   1a4ae:	4620      	mov	r0, r4
   1a4b0:	f7f6 fdee 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a4b4:	3601      	adds	r6, #1
   1a4b6:	68a8      	ldr	r0, [r5, #8]
   1a4b8:	88c3      	ldrh	r3, [r0, #6]
   1a4ba:	42b3      	cmp	r3, r6
   1a4bc:	d1e4      	bne.n	1a488 <cosem_setArbitrator+0x136>
   1a4be:	e75f      	b.n	1a380 <cosem_setArbitrator+0x2e>
        obj_clearBitArrayList(&object->mostRecentRequestsTable);
   1a4c0:	3434      	adds	r4, #52	; 0x34
   1a4c2:	4620      	mov	r0, r4
   1a4c4:	f7fa fb20 	bl	14b08 <obj_clearBitArrayList>
        if (value->Arr != NULL)
   1a4c8:	68ab      	ldr	r3, [r5, #8]
   1a4ca:	2b00      	cmp	r3, #0
   1a4cc:	f43f af58 	beq.w	1a380 <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a4d0:	2600      	movs	r6, #0
   1a4d2:	e01a      	b.n	1a50a <cosem_setArbitrator+0x1b8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1a4d4:	466a      	mov	r2, sp
   1a4d6:	4631      	mov	r1, r6
   1a4d8:	f001 f883 	bl	1b5e2 <va_getByIndex>
   1a4dc:	2800      	cmp	r0, #0
   1a4de:	d19b      	bne.n	1a418 <cosem_setArbitrator+0xc6>
                it = (bitArray*)gxmalloc(sizeof(bitArray));
   1a4e0:	2008      	movs	r0, #8
   1a4e2:	f7f2 f9bf 	bl	c864 <malloc>
   1a4e6:	4607      	mov	r7, r0
                ba_init(it);
   1a4e8:	f7f3 f8d9 	bl	d69e <ba_init>
                if ((ba_copy(it, tmp->bitArr->data, tmp->bitArr->size)) != 0)
   1a4ec:	9b00      	ldr	r3, [sp, #0]
   1a4ee:	689b      	ldr	r3, [r3, #8]
   1a4f0:	4638      	mov	r0, r7
   1a4f2:	88da      	ldrh	r2, [r3, #6]
   1a4f4:	6819      	ldr	r1, [r3, #0]
   1a4f6:	f7f3 f94d 	bl	d794 <ba_copy>
   1a4fa:	2800      	cmp	r0, #0
   1a4fc:	f47f af40 	bne.w	1a380 <cosem_setArbitrator+0x2e>
                arr_push(&object->mostRecentRequestsTable, it);
   1a500:	4639      	mov	r1, r7
   1a502:	4620      	mov	r0, r4
   1a504:	f7f6 fdc4 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a508:	3601      	adds	r6, #1
   1a50a:	68a8      	ldr	r0, [r5, #8]
   1a50c:	88c3      	ldrh	r3, [r0, #6]
   1a50e:	42b3      	cmp	r3, r6
   1a510:	d1e0      	bne.n	1a4d4 <cosem_setArbitrator+0x182>
   1a512:	e735      	b.n	1a380 <cosem_setArbitrator+0x2e>
        object->lastOutcome = (unsigned char)var_toInteger(value);
   1a514:	4628      	mov	r0, r5
   1a516:	f001 f9de 	bl	1b8d6 <var_toInteger>
   1a51a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   1a51e:	e72f      	b.n	1a380 <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a520:	f44f 7081 	mov.w	r0, #258	; 0x102
   1a524:	e778      	b.n	1a418 <cosem_setArbitrator+0xc6>

0001a526 <cosem_setIec8802LlcType1Setup>:
    gxIec8802LlcType1Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   1a526:	2a02      	cmp	r2, #2
{
   1a528:	b510      	push	{r4, lr}
   1a52a:	4618      	mov	r0, r3
   1a52c:	460c      	mov	r4, r1
    switch (index)
   1a52e:	d104      	bne.n	1a53a <cosem_setIec8802LlcType1Setup+0x14>
    {
    case 2:
        object->maximumOctetsUiPdu = (uint16_t)var_toInteger(value);
   1a530:	f001 f9d1 	bl	1b8d6 <var_toInteger>
   1a534:	8220      	strh	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   1a536:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a538:	bd10      	pop	{r4, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a53a:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a53e:	e7fb      	b.n	1a538 <cosem_setIec8802LlcType1Setup+0x12>

0001a540 <cosem_setIec8802LlcType2Setup>:
    gxIec8802LlcType2Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   1a540:	3a02      	subs	r2, #2
{
   1a542:	b510      	push	{r4, lr}
   1a544:	4618      	mov	r0, r3
   1a546:	460c      	mov	r4, r1
   1a548:	2a07      	cmp	r2, #7
   1a54a:	d826      	bhi.n	1a59a <cosem_setIec8802LlcType2Setup+0x5a>
   1a54c:	e8df f002 	tbb	[pc, r2]
   1a550:	110d0904 	.word	0x110d0904
   1a554:	211d1915 	.word	0x211d1915
    {
    case 2:
        object->transmitWindowSizeK = (unsigned char)var_toInteger(value);
   1a558:	f001 f9bd 	bl	1b8d6 <var_toInteger>
   1a55c:	7420      	strb	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   1a55e:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a560:	bd10      	pop	{r4, pc}
        object->transmitWindowSizeRW = (unsigned char)var_toInteger(value);
   1a562:	f001 f9b8 	bl	1b8d6 <var_toInteger>
   1a566:	7460      	strb	r0, [r4, #17]
        break;
   1a568:	e7f9      	b.n	1a55e <cosem_setIec8802LlcType2Setup+0x1e>
        object->maximumOctetsPdu = (uint16_t)var_toInteger(value);
   1a56a:	f001 f9b4 	bl	1b8d6 <var_toInteger>
   1a56e:	8260      	strh	r0, [r4, #18]
        break;
   1a570:	e7f5      	b.n	1a55e <cosem_setIec8802LlcType2Setup+0x1e>
        object->maximumNumberTransmissions = (unsigned char)var_toInteger(value);
   1a572:	f001 f9b0 	bl	1b8d6 <var_toInteger>
   1a576:	7520      	strb	r0, [r4, #20]
        break;
   1a578:	e7f1      	b.n	1a55e <cosem_setIec8802LlcType2Setup+0x1e>
        object->acknowledgementTimer = (uint16_t)var_toInteger(value);
   1a57a:	f001 f9ac 	bl	1b8d6 <var_toInteger>
   1a57e:	82e0      	strh	r0, [r4, #22]
        break;
   1a580:	e7ed      	b.n	1a55e <cosem_setIec8802LlcType2Setup+0x1e>
        object->bitTimer = (uint16_t)var_toInteger(value);
   1a582:	f001 f9a8 	bl	1b8d6 <var_toInteger>
   1a586:	8320      	strh	r0, [r4, #24]
        break;
   1a588:	e7e9      	b.n	1a55e <cosem_setIec8802LlcType2Setup+0x1e>
        object->rejectTimer = (uint16_t)var_toInteger(value);
   1a58a:	f001 f9a4 	bl	1b8d6 <var_toInteger>
   1a58e:	8360      	strh	r0, [r4, #26]
        break;
   1a590:	e7e5      	b.n	1a55e <cosem_setIec8802LlcType2Setup+0x1e>
        object->busyStateTimer = (uint16_t)var_toInteger(value);
   1a592:	f001 f9a0 	bl	1b8d6 <var_toInteger>
   1a596:	83a0      	strh	r0, [r4, #28]
   1a598:	e7e1      	b.n	1a55e <cosem_setIec8802LlcType2Setup+0x1e>
    int ret = DLMS_ERROR_CODE_OK;
   1a59a:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a59e:	e7df      	b.n	1a560 <cosem_setIec8802LlcType2Setup+0x20>

0001a5a0 <cosem_setIec8802LlcType3Setup>:
    gxIec8802LlcType3Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   1a5a0:	3a02      	subs	r2, #2
{
   1a5a2:	b510      	push	{r4, lr}
   1a5a4:	4618      	mov	r0, r3
   1a5a6:	460c      	mov	r4, r1
   1a5a8:	2a04      	cmp	r2, #4
   1a5aa:	d819      	bhi.n	1a5e0 <cosem_setIec8802LlcType3Setup+0x40>
   1a5ac:	e8df f002 	tbb	[pc, r2]
   1a5b0:	100c0803 	.word	0x100c0803
   1a5b4:	14          	.byte	0x14
   1a5b5:	00          	.byte	0x00
    {
    case 2:
        object->maximumOctetsACnPdu = (uint16_t)var_toInteger(value);
   1a5b6:	f001 f98e 	bl	1b8d6 <var_toInteger>
   1a5ba:	8220      	strh	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   1a5bc:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a5be:	bd10      	pop	{r4, pc}
        object->maximumTransmissions = (unsigned char)var_toInteger(value);
   1a5c0:	f001 f989 	bl	1b8d6 <var_toInteger>
   1a5c4:	74a0      	strb	r0, [r4, #18]
        break;
   1a5c6:	e7f9      	b.n	1a5bc <cosem_setIec8802LlcType3Setup+0x1c>
        object->acknowledgementTime = (uint16_t)var_toInteger(value);
   1a5c8:	f001 f985 	bl	1b8d6 <var_toInteger>
   1a5cc:	82a0      	strh	r0, [r4, #20]
        break;
   1a5ce:	e7f5      	b.n	1a5bc <cosem_setIec8802LlcType3Setup+0x1c>
        object->receiveLifetime = (uint16_t)var_toInteger(value);
   1a5d0:	f001 f981 	bl	1b8d6 <var_toInteger>
   1a5d4:	82e0      	strh	r0, [r4, #22]
        break;
   1a5d6:	e7f1      	b.n	1a5bc <cosem_setIec8802LlcType3Setup+0x1c>
        object->transmitLifetime = (uint16_t)var_toInteger(value);
   1a5d8:	f001 f97d 	bl	1b8d6 <var_toInteger>
   1a5dc:	8320      	strh	r0, [r4, #24]
   1a5de:	e7ed      	b.n	1a5bc <cosem_setIec8802LlcType3Setup+0x1c>
    int ret = DLMS_ERROR_CODE_OK;
   1a5e0:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a5e4:	e7eb      	b.n	1a5be <cosem_setIec8802LlcType3Setup+0x1e>

0001a5e6 <cosem_setSFSKActiveInitiator>:
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    dlmsVARIANT* tmp;
    switch (index)
   1a5e6:	2a02      	cmp	r2, #2
{
   1a5e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a5ea:	460d      	mov	r5, r1
   1a5ec:	461e      	mov	r6, r3
    switch (index)
   1a5ee:	d13d      	bne.n	1a66c <cosem_setSFSKActiveInitiator+0x86>
    {
    case 2:
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1a5f0:	781b      	ldrb	r3, [r3, #0]
   1a5f2:	f101 0710 	add.w	r7, r1, #16
   1a5f6:	2b02      	cmp	r3, #2
        {
            bb_clear(&object->systemTitle);
   1a5f8:	4638      	mov	r0, r7
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1a5fa:	d130      	bne.n	1a65e <cosem_setSFSKActiveInitiator+0x78>
            bb_clear(&object->systemTitle);
   1a5fc:	f7f3 fb19 	bl	dc32 <bb_clear>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != DLMS_ERROR_CODE_OK)
   1a600:	68b0      	ldr	r0, [r6, #8]
   1a602:	aa01      	add	r2, sp, #4
   1a604:	2100      	movs	r1, #0
   1a606:	f000 ffec 	bl	1b5e2 <va_getByIndex>
   1a60a:	4604      	mov	r4, r0
   1a60c:	bb20      	cbnz	r0, 1a658 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            if (tmp->byteArr != NULL)
   1a60e:	9b01      	ldr	r3, [sp, #4]
   1a610:	6898      	ldr	r0, [r3, #8]
   1a612:	b9b0      	cbnz	r0, 1a642 <cosem_setSFSKActiveInitiator+0x5c>
                if ((ret = bb_set(&object->systemTitle, tmp->byteArr->data, bb_size(tmp->byteArr))) != 0)
                {
                    break;
                }
            }
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != DLMS_ERROR_CODE_OK)
   1a614:	68b0      	ldr	r0, [r6, #8]
   1a616:	aa01      	add	r2, sp, #4
   1a618:	2101      	movs	r1, #1
   1a61a:	f000 ffe2 	bl	1b5e2 <va_getByIndex>
   1a61e:	4604      	mov	r4, r0
   1a620:	b9d0      	cbnz	r0, 1a658 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            object->macAddress = (uint16_t)var_toInteger(tmp);
   1a622:	9801      	ldr	r0, [sp, #4]
   1a624:	f001 f957 	bl	1b8d6 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != DLMS_ERROR_CODE_OK)
   1a628:	aa01      	add	r2, sp, #4
            object->macAddress = (uint16_t)var_toInteger(tmp);
   1a62a:	83a8      	strh	r0, [r5, #28]
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != DLMS_ERROR_CODE_OK)
   1a62c:	2102      	movs	r1, #2
   1a62e:	68b0      	ldr	r0, [r6, #8]
   1a630:	f000 ffd7 	bl	1b5e2 <va_getByIndex>
   1a634:	4604      	mov	r4, r0
   1a636:	b978      	cbnz	r0, 1a658 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            object->lSapSelector = (unsigned char)var_toInteger(tmp);
   1a638:	9801      	ldr	r0, [sp, #4]
   1a63a:	f001 f94c 	bl	1b8d6 <var_toInteger>
   1a63e:	77a8      	strb	r0, [r5, #30]
   1a640:	e00a      	b.n	1a658 <cosem_setSFSKActiveInitiator+0x72>
                if ((ret = bb_set(&object->systemTitle, tmp->byteArr->data, bb_size(tmp->byteArr))) != 0)
   1a642:	6804      	ldr	r4, [r0, #0]
   1a644:	f7f3 f92f 	bl	d8a6 <bb_size>
   1a648:	4621      	mov	r1, r4
   1a64a:	4602      	mov	r2, r0
   1a64c:	4638      	mov	r0, r7
   1a64e:	f7f3 fa7c 	bl	db4a <bb_set>
   1a652:	4604      	mov	r4, r0
   1a654:	2800      	cmp	r0, #0
   1a656:	d0dd      	beq.n	1a614 <cosem_setSFSKActiveInitiator+0x2e>
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1a658:	4620      	mov	r0, r4
   1a65a:	b003      	add	sp, #12
   1a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bb_clear(&object->systemTitle);
   1a65e:	f7f3 fae8 	bl	dc32 <bb_clear>
            object->macAddress = 0;
   1a662:	2000      	movs	r0, #0
   1a664:	83a8      	strh	r0, [r5, #28]
            object->lSapSelector = 0;
   1a666:	77a8      	strb	r0, [r5, #30]
    int ret = 0;
   1a668:	4604      	mov	r4, r0
   1a66a:	e7f5      	b.n	1a658 <cosem_setSFSKActiveInitiator+0x72>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a66c:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1a670:	e7f2      	b.n	1a658 <cosem_setSFSKActiveInitiator+0x72>

0001a672 <cosem_setFSKMacCounters>:
    dlmsVARIANT* value)
{
    int pos, ret = DLMS_ERROR_CODE_OK;
    gxUint16PairUint32* it;
    dlmsVARIANT* tmp, * tmp2;
    switch (index)
   1a672:	3a02      	subs	r2, #2
{
   1a674:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a678:	460d      	mov	r5, r1
   1a67a:	461e      	mov	r6, r3
   1a67c:	2a06      	cmp	r2, #6
   1a67e:	f200 80de 	bhi.w	1a83e <cosem_setFSKMacCounters+0x1cc>
   1a682:	e8df f012 	tbh	[pc, r2, lsl #1]
   1a686:	0007      	.short	0x0007
   1a688:	008b0046 	.word	0x008b0046
   1a68c:	00cd00c8 	.word	0x00cd00c8
   1a690:	00d700d2 	.word	0x00d700d2
    {
    case 2:
    {
        arr_clear(&object->synchronizationRegister);
   1a694:	3510      	adds	r5, #16
   1a696:	4628      	mov	r0, r5
   1a698:	f7f6 fd0f 	bl	110ba <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1a69c:	7833      	ldrb	r3, [r6, #0]
   1a69e:	2b01      	cmp	r3, #1
   1a6a0:	d034      	beq.n	1a70c <cosem_setFSKMacCounters+0x9a>
    int pos, ret = DLMS_ERROR_CODE_OK;
   1a6a2:	2400      	movs	r4, #0
        }
    }
    break;
    case 5:
        object->repetitionsCounter = var_toInteger(value);
        break;
   1a6a4:	e06f      	b.n	1a786 <cosem_setFSKMacCounters+0x114>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1a6a6:	466a      	mov	r2, sp
   1a6a8:	4641      	mov	r1, r8
   1a6aa:	f000 ff9a 	bl	1b5e2 <va_getByIndex>
   1a6ae:	4604      	mov	r4, r0
   1a6b0:	2800      	cmp	r0, #0
   1a6b2:	d168      	bne.n	1a786 <cosem_setFSKMacCounters+0x114>
                it = (gxUint16PairUint32*)gxmalloc(sizeof(gxUint16PairUint32));
   1a6b4:	2008      	movs	r0, #8
   1a6b6:	f7f2 f8d5 	bl	c864 <malloc>
                if (it == NULL)
   1a6ba:	4607      	mov	r7, r0
   1a6bc:	2800      	cmp	r0, #0
   1a6be:	f000 80c1 	beq.w	1a844 <cosem_setFSKMacCounters+0x1d2>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a6c2:	9b00      	ldr	r3, [sp, #0]
   1a6c4:	4621      	mov	r1, r4
   1a6c6:	6898      	ldr	r0, [r3, #8]
   1a6c8:	aa01      	add	r2, sp, #4
   1a6ca:	f000 ff8a 	bl	1b5e2 <va_getByIndex>
   1a6ce:	4604      	mov	r4, r0
   1a6d0:	2800      	cmp	r0, #0
   1a6d2:	d158      	bne.n	1a786 <cosem_setFSKMacCounters+0x114>
                it->first = (uint16_t)var_toInteger(tmp2);
   1a6d4:	9801      	ldr	r0, [sp, #4]
   1a6d6:	f001 f8fe 	bl	1b8d6 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a6da:	9b00      	ldr	r3, [sp, #0]
                it->first = (uint16_t)var_toInteger(tmp2);
   1a6dc:	8038      	strh	r0, [r7, #0]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a6de:	aa01      	add	r2, sp, #4
   1a6e0:	6898      	ldr	r0, [r3, #8]
   1a6e2:	2101      	movs	r1, #1
   1a6e4:	f000 ff7d 	bl	1b5e2 <va_getByIndex>
   1a6e8:	4604      	mov	r4, r0
   1a6ea:	2800      	cmp	r0, #0
   1a6ec:	d14b      	bne.n	1a786 <cosem_setFSKMacCounters+0x114>
                it->second = var_toInteger(tmp2);
   1a6ee:	9801      	ldr	r0, [sp, #4]
   1a6f0:	f001 f8f1 	bl	1b8d6 <var_toInteger>
                arr_push(&object->synchronizationRegister, it);
   1a6f4:	4639      	mov	r1, r7
                it->second = var_toInteger(tmp2);
   1a6f6:	6078      	str	r0, [r7, #4]
                arr_push(&object->synchronizationRegister, it);
   1a6f8:	4628      	mov	r0, r5
   1a6fa:	f7f6 fcc9 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a6fe:	f108 0801 	add.w	r8, r8, #1
   1a702:	68b0      	ldr	r0, [r6, #8]
   1a704:	88c3      	ldrh	r3, [r0, #6]
   1a706:	4543      	cmp	r3, r8
   1a708:	d1cd      	bne.n	1a6a6 <cosem_setFSKMacCounters+0x34>
   1a70a:	e7ca      	b.n	1a6a2 <cosem_setFSKMacCounters+0x30>
   1a70c:	f04f 0800 	mov.w	r8, #0
   1a710:	e7f7      	b.n	1a702 <cosem_setFSKMacCounters+0x90>
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1a712:	7837      	ldrb	r7, [r6, #0]
   1a714:	2f02      	cmp	r7, #2
   1a716:	d13a      	bne.n	1a78e <cosem_setFSKMacCounters+0x11c>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) == DLMS_ERROR_CODE_OK)
   1a718:	68b0      	ldr	r0, [r6, #8]
   1a71a:	466a      	mov	r2, sp
   1a71c:	2100      	movs	r1, #0
   1a71e:	f000 ff60 	bl	1b5e2 <va_getByIndex>
   1a722:	4604      	mov	r4, r0
   1a724:	bb78      	cbnz	r0, 1a786 <cosem_setFSKMacCounters+0x114>
                object->physicalLayerDesynchronization = var_toInteger(tmp);
   1a726:	9800      	ldr	r0, [sp, #0]
   1a728:	f001 f8d5 	bl	1b8d6 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 1, &tmp)) == DLMS_ERROR_CODE_OK)
   1a72c:	466a      	mov	r2, sp
                object->physicalLayerDesynchronization = var_toInteger(tmp);
   1a72e:	61e8      	str	r0, [r5, #28]
                if ((ret = va_getByIndex(value->Arr, 1, &tmp)) == DLMS_ERROR_CODE_OK)
   1a730:	2101      	movs	r1, #1
   1a732:	68b0      	ldr	r0, [r6, #8]
   1a734:	f000 ff55 	bl	1b5e2 <va_getByIndex>
   1a738:	4604      	mov	r4, r0
   1a73a:	bb20      	cbnz	r0, 1a786 <cosem_setFSKMacCounters+0x114>
                    object->timeOutNotAddressedDesynchronization = var_toInteger(tmp);
   1a73c:	9800      	ldr	r0, [sp, #0]
   1a73e:	f001 f8ca 	bl	1b8d6 <var_toInteger>
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp)) == DLMS_ERROR_CODE_OK)
   1a742:	466a      	mov	r2, sp
                    object->timeOutNotAddressedDesynchronization = var_toInteger(tmp);
   1a744:	6228      	str	r0, [r5, #32]
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp)) == DLMS_ERROR_CODE_OK)
   1a746:	4639      	mov	r1, r7
   1a748:	68b0      	ldr	r0, [r6, #8]
   1a74a:	f000 ff4a 	bl	1b5e2 <va_getByIndex>
   1a74e:	4604      	mov	r4, r0
   1a750:	b9c8      	cbnz	r0, 1a786 <cosem_setFSKMacCounters+0x114>
                        object->timeOutFrameNotOkDesynchronization = var_toInteger(tmp);
   1a752:	9800      	ldr	r0, [sp, #0]
   1a754:	f001 f8bf 	bl	1b8d6 <var_toInteger>
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp)) == DLMS_ERROR_CODE_OK)
   1a758:	466a      	mov	r2, sp
                        object->timeOutFrameNotOkDesynchronization = var_toInteger(tmp);
   1a75a:	6268      	str	r0, [r5, #36]	; 0x24
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp)) == DLMS_ERROR_CODE_OK)
   1a75c:	2103      	movs	r1, #3
   1a75e:	68b0      	ldr	r0, [r6, #8]
   1a760:	f000 ff3f 	bl	1b5e2 <va_getByIndex>
   1a764:	4604      	mov	r4, r0
   1a766:	b970      	cbnz	r0, 1a786 <cosem_setFSKMacCounters+0x114>
                            object->writeRequestDesynchronization = var_toInteger(tmp);
   1a768:	9800      	ldr	r0, [sp, #0]
   1a76a:	f001 f8b4 	bl	1b8d6 <var_toInteger>
                            if ((ret = va_getByIndex(value->Arr, 4, &tmp)) == DLMS_ERROR_CODE_OK)
   1a76e:	466a      	mov	r2, sp
                            object->writeRequestDesynchronization = var_toInteger(tmp);
   1a770:	62a8      	str	r0, [r5, #40]	; 0x28
                            if ((ret = va_getByIndex(value->Arr, 4, &tmp)) == DLMS_ERROR_CODE_OK)
   1a772:	2104      	movs	r1, #4
   1a774:	68b0      	ldr	r0, [r6, #8]
   1a776:	f000 ff34 	bl	1b5e2 <va_getByIndex>
   1a77a:	4604      	mov	r4, r0
   1a77c:	b918      	cbnz	r0, 1a786 <cosem_setFSKMacCounters+0x114>
                                object->wrongInitiatorDesynchronization = var_toInteger(tmp);
   1a77e:	9800      	ldr	r0, [sp, #0]
   1a780:	f001 f8a9 	bl	1b8d6 <var_toInteger>
   1a784:	62e8      	str	r0, [r5, #44]	; 0x2c
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a786:	4620      	mov	r0, r4
   1a788:	b002      	add	sp, #8
   1a78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            object->physicalLayerDesynchronization = 0;
   1a78e:	2400      	movs	r4, #0
            object->timeOutNotAddressedDesynchronization = 0;
   1a790:	e9c1 4407 	strd	r4, r4, [r1, #28]
            object->writeRequestDesynchronization = 0;
   1a794:	e9c1 4409 	strd	r4, r4, [r1, #36]	; 0x24
            object->wrongInitiatorDesynchronization = 0;
   1a798:	62cc      	str	r4, [r1, #44]	; 0x2c
   1a79a:	e7f4      	b.n	1a786 <cosem_setFSKMacCounters+0x114>
        arr_clear(&object->broadcastFramesCounter);
   1a79c:	3530      	adds	r5, #48	; 0x30
   1a79e:	4628      	mov	r0, r5
   1a7a0:	f7f6 fc8b 	bl	110ba <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1a7a4:	7833      	ldrb	r3, [r6, #0]
   1a7a6:	2b01      	cmp	r3, #1
   1a7a8:	f47f af7b 	bne.w	1a6a2 <cosem_setFSKMacCounters+0x30>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a7ac:	2700      	movs	r7, #0
   1a7ae:	e02d      	b.n	1a80c <cosem_setFSKMacCounters+0x19a>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1a7b0:	466a      	mov	r2, sp
   1a7b2:	4639      	mov	r1, r7
   1a7b4:	f000 ff15 	bl	1b5e2 <va_getByIndex>
   1a7b8:	4604      	mov	r4, r0
   1a7ba:	2800      	cmp	r0, #0
   1a7bc:	d1e3      	bne.n	1a786 <cosem_setFSKMacCounters+0x114>
                it = (gxUint16PairUint32*)gxmalloc(sizeof(gxUint16PairUint32));
   1a7be:	2008      	movs	r0, #8
   1a7c0:	f7f2 f850 	bl	c864 <malloc>
                if (it == NULL)
   1a7c4:	4680      	mov	r8, r0
   1a7c6:	2800      	cmp	r0, #0
   1a7c8:	d03c      	beq.n	1a844 <cosem_setFSKMacCounters+0x1d2>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a7ca:	9b00      	ldr	r3, [sp, #0]
   1a7cc:	4621      	mov	r1, r4
   1a7ce:	6898      	ldr	r0, [r3, #8]
   1a7d0:	aa01      	add	r2, sp, #4
   1a7d2:	f000 ff06 	bl	1b5e2 <va_getByIndex>
   1a7d6:	4604      	mov	r4, r0
   1a7d8:	2800      	cmp	r0, #0
   1a7da:	d1d4      	bne.n	1a786 <cosem_setFSKMacCounters+0x114>
                it->first = (uint16_t)var_toInteger(tmp2);
   1a7dc:	9801      	ldr	r0, [sp, #4]
   1a7de:	f001 f87a 	bl	1b8d6 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a7e2:	9b00      	ldr	r3, [sp, #0]
                it->first = (uint16_t)var_toInteger(tmp2);
   1a7e4:	f8a8 0000 	strh.w	r0, [r8]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a7e8:	aa01      	add	r2, sp, #4
   1a7ea:	6898      	ldr	r0, [r3, #8]
   1a7ec:	2101      	movs	r1, #1
   1a7ee:	f000 fef8 	bl	1b5e2 <va_getByIndex>
   1a7f2:	4604      	mov	r4, r0
   1a7f4:	2800      	cmp	r0, #0
   1a7f6:	d1c6      	bne.n	1a786 <cosem_setFSKMacCounters+0x114>
                it->second = var_toInteger(tmp2);
   1a7f8:	9801      	ldr	r0, [sp, #4]
   1a7fa:	f001 f86c 	bl	1b8d6 <var_toInteger>
                arr_push(&object->broadcastFramesCounter, it);
   1a7fe:	4641      	mov	r1, r8
                it->second = var_toInteger(tmp2);
   1a800:	f8c8 0004 	str.w	r0, [r8, #4]
                arr_push(&object->broadcastFramesCounter, it);
   1a804:	4628      	mov	r0, r5
   1a806:	f7f6 fc43 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a80a:	3701      	adds	r7, #1
   1a80c:	68b0      	ldr	r0, [r6, #8]
   1a80e:	88c3      	ldrh	r3, [r0, #6]
   1a810:	42bb      	cmp	r3, r7
   1a812:	d1cd      	bne.n	1a7b0 <cosem_setFSKMacCounters+0x13e>
   1a814:	e745      	b.n	1a6a2 <cosem_setFSKMacCounters+0x30>
        object->repetitionsCounter = var_toInteger(value);
   1a816:	4630      	mov	r0, r6
   1a818:	f001 f85d 	bl	1b8d6 <var_toInteger>
   1a81c:	63e8      	str	r0, [r5, #60]	; 0x3c
   1a81e:	e740      	b.n	1a6a2 <cosem_setFSKMacCounters+0x30>
        object->transmissionsCounter = var_toInteger(value);
   1a820:	4630      	mov	r0, r6
   1a822:	f001 f858 	bl	1b8d6 <var_toInteger>
   1a826:	6428      	str	r0, [r5, #64]	; 0x40
        break;
   1a828:	e73b      	b.n	1a6a2 <cosem_setFSKMacCounters+0x30>
        object->crcOkFramesCounter = var_toInteger(value);
   1a82a:	4630      	mov	r0, r6
   1a82c:	f001 f853 	bl	1b8d6 <var_toInteger>
   1a830:	6468      	str	r0, [r5, #68]	; 0x44
        break;
   1a832:	e736      	b.n	1a6a2 <cosem_setFSKMacCounters+0x30>
        object->crcNOkFramesCounter = var_toInteger(value);
   1a834:	4630      	mov	r0, r6
   1a836:	f001 f84e 	bl	1b8d6 <var_toInteger>
   1a83a:	64a8      	str	r0, [r5, #72]	; 0x48
        break;
   1a83c:	e731      	b.n	1a6a2 <cosem_setFSKMacCounters+0x30>
    int pos, ret = DLMS_ERROR_CODE_OK;
   1a83e:	f44f 7481 	mov.w	r4, #258	; 0x102
   1a842:	e7a0      	b.n	1a786 <cosem_setFSKMacCounters+0x114>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1a844:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   1a848:	e79d      	b.n	1a786 <cosem_setFSKMacCounters+0x114>

0001a84a <cosem_setSFSKMacSynchronizationTimeouts>:
    gxSFSKMacSynchronizationTimeouts* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1a84a:	3a02      	subs	r2, #2
{
   1a84c:	b510      	push	{r4, lr}
   1a84e:	4618      	mov	r0, r3
   1a850:	460c      	mov	r4, r1
   1a852:	2a03      	cmp	r2, #3
   1a854:	d814      	bhi.n	1a880 <cosem_setSFSKMacSynchronizationTimeouts+0x36>
   1a856:	e8df f002 	tbb	[pc, r2]
   1a85a:	0702      	.short	0x0702
   1a85c:	0f0b      	.short	0x0f0b
    {
    case 2:
        object->searchInitiatorTimeout = (uint16_t)var_toInteger(value);
   1a85e:	f001 f83a 	bl	1b8d6 <var_toInteger>
   1a862:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   1a864:	2000      	movs	r0, #0
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1a866:	bd10      	pop	{r4, pc}
        object->synchronizationConfirmationTimeout = (uint16_t)var_toInteger(value);
   1a868:	f001 f835 	bl	1b8d6 <var_toInteger>
   1a86c:	8260      	strh	r0, [r4, #18]
        break;
   1a86e:	e7f9      	b.n	1a864 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
        object->timeOutNotAddressed = (uint16_t)var_toInteger(value);
   1a870:	f001 f831 	bl	1b8d6 <var_toInteger>
   1a874:	82a0      	strh	r0, [r4, #20]
        break;
   1a876:	e7f5      	b.n	1a864 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
        object->timeOutFrameNotOK = (uint16_t)var_toInteger(value);
   1a878:	f001 f82d 	bl	1b8d6 <var_toInteger>
   1a87c:	82e0      	strh	r0, [r4, #22]
   1a87e:	e7f1      	b.n	1a864 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
    int ret = 0;
   1a880:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a884:	e7ef      	b.n	1a866 <cosem_setSFSKMacSynchronizationTimeouts+0x1c>

0001a886 <cosem_setSFSKPhyMacSetUp>:
int cosem_setSFSKPhyMacSetUp(
    dlmsSettings* settings,
    gxSFSKPhyMacSetUp* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   1a886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a888:	3a02      	subs	r2, #2
   1a88a:	460d      	mov	r5, r1
   1a88c:	461e      	mov	r6, r3
   1a88e:	2a0d      	cmp	r2, #13
   1a890:	f200 808b 	bhi.w	1a9aa <cosem_setSFSKPhyMacSetUp+0x124>
   1a894:	e8df f002 	tbb	[pc, r2]
   1a898:	17120d07 	.word	0x17120d07
   1a89c:	4641211c 	.word	0x4641211c
   1a8a0:	78726e68 	.word	0x78726e68
   1a8a4:	837d      	.short	0x837d
    int pos, ret = 0;
    dlmsVARIANT* it;
    switch (index)
    {
    case 2:
        object->initiatorElectricalPhase = (DLMS_INITIATOR_ELECTRICAL_PHASE)var_toInteger(value);
   1a8a6:	4630      	mov	r0, r6
   1a8a8:	f001 f815 	bl	1b8d6 <var_toInteger>
   1a8ac:	7428      	strb	r0, [r5, #16]
    int pos, ret = 0;
   1a8ae:	2400      	movs	r4, #0
    case 14:
        object->synchronizationLocked = (unsigned char)var_toInteger(value);
        break;
    case 15:
        object->transmissionSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
        break;
   1a8b0:	e02c      	b.n	1a90c <cosem_setSFSKPhyMacSetUp+0x86>
        object->deltaElectricalPhase = (DLMS_DELTA_ELECTRICAL_PHASE)var_toInteger(value);
   1a8b2:	4630      	mov	r0, r6
   1a8b4:	f001 f80f 	bl	1b8d6 <var_toInteger>
   1a8b8:	7468      	strb	r0, [r5, #17]
        break;
   1a8ba:	e7f8      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->maxReceivingGain = (unsigned char)var_toInteger(value);
   1a8bc:	4630      	mov	r0, r6
   1a8be:	f001 f80a 	bl	1b8d6 <var_toInteger>
   1a8c2:	74a8      	strb	r0, [r5, #18]
        break;
   1a8c4:	e7f3      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->maxTransmittingGain = (unsigned char)var_toInteger(value);
   1a8c6:	4630      	mov	r0, r6
   1a8c8:	f001 f805 	bl	1b8d6 <var_toInteger>
   1a8cc:	74e8      	strb	r0, [r5, #19]
        break;
   1a8ce:	e7ee      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->searchInitiatorThreshold = (unsigned char)var_toInteger(value);
   1a8d0:	4630      	mov	r0, r6
   1a8d2:	f001 f800 	bl	1b8d6 <var_toInteger>
   1a8d6:	7528      	strb	r0, [r5, #20]
        break;
   1a8d8:	e7e9      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1a8da:	7833      	ldrb	r3, [r6, #0]
   1a8dc:	2b02      	cmp	r3, #2
   1a8de:	d118      	bne.n	1a912 <cosem_setSFSKPhyMacSetUp+0x8c>
            if ((ret = va_getByIndex(value->Arr, 0, &it)) == DLMS_ERROR_CODE_OK)
   1a8e0:	68b0      	ldr	r0, [r6, #8]
   1a8e2:	aa01      	add	r2, sp, #4
   1a8e4:	2100      	movs	r1, #0
   1a8e6:	f000 fe7c 	bl	1b5e2 <va_getByIndex>
   1a8ea:	4604      	mov	r4, r0
   1a8ec:	b970      	cbnz	r0, 1a90c <cosem_setSFSKPhyMacSetUp+0x86>
                object->markFrequency = var_toInteger(it);
   1a8ee:	9801      	ldr	r0, [sp, #4]
   1a8f0:	f000 fff1 	bl	1b8d6 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 1, &it)) == DLMS_ERROR_CODE_OK)
   1a8f4:	aa01      	add	r2, sp, #4
                object->markFrequency = var_toInteger(it);
   1a8f6:	61a8      	str	r0, [r5, #24]
                if ((ret = va_getByIndex(value->Arr, 1, &it)) == DLMS_ERROR_CODE_OK)
   1a8f8:	2101      	movs	r1, #1
   1a8fa:	68b0      	ldr	r0, [r6, #8]
   1a8fc:	f000 fe71 	bl	1b5e2 <va_getByIndex>
   1a900:	4604      	mov	r4, r0
   1a902:	b918      	cbnz	r0, 1a90c <cosem_setSFSKPhyMacSetUp+0x86>
                    object->spaceFrequency = var_toInteger(it);
   1a904:	9801      	ldr	r0, [sp, #4]
   1a906:	f000 ffe6 	bl	1b8d6 <var_toInteger>
   1a90a:	61e8      	str	r0, [r5, #28]
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a90c:	4620      	mov	r0, r4
   1a90e:	b003      	add	sp, #12
   1a910:	bdf0      	pop	{r4, r5, r6, r7, pc}
            object->markFrequency = 0;
   1a912:	2400      	movs	r4, #0
            object->spaceFrequency = 0;
   1a914:	e9c1 4406 	strd	r4, r4, [r1, #24]
   1a918:	e7f8      	b.n	1a90c <cosem_setSFSKPhyMacSetUp+0x86>
        object->macAddress = (uint16_t)var_toInteger(value);
   1a91a:	4630      	mov	r0, r6
   1a91c:	f000 ffdb 	bl	1b8d6 <var_toInteger>
   1a920:	8428      	strh	r0, [r5, #32]
        break;
   1a922:	e7c4      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        arr_clear(&object->macGroupAddresses);
   1a924:	3524      	adds	r5, #36	; 0x24
   1a926:	4628      	mov	r0, r5
   1a928:	f7f6 fbc7 	bl	110ba <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1a92c:	7833      	ldrb	r3, [r6, #0]
   1a92e:	2b01      	cmp	r3, #1
   1a930:	d1bd      	bne.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a932:	2700      	movs	r7, #0
   1a934:	e013      	b.n	1a95e <cosem_setSFSKPhyMacSetUp+0xd8>
                if ((ret = va_getByIndex(value->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
   1a936:	aa01      	add	r2, sp, #4
   1a938:	4639      	mov	r1, r7
   1a93a:	f000 fe52 	bl	1b5e2 <va_getByIndex>
   1a93e:	4604      	mov	r4, r0
   1a940:	2800      	cmp	r0, #0
   1a942:	d1e3      	bne.n	1a90c <cosem_setSFSKPhyMacSetUp+0x86>
                uint16_t* v = gxmalloc(sizeof(uint16_t));
   1a944:	2002      	movs	r0, #2
   1a946:	f7f1 ff8d 	bl	c864 <malloc>
   1a94a:	4604      	mov	r4, r0
                *v = (uint16_t)var_toInteger(it);
   1a94c:	9801      	ldr	r0, [sp, #4]
   1a94e:	f000 ffc2 	bl	1b8d6 <var_toInteger>
                arr_push(&object->macGroupAddresses, v);
   1a952:	4621      	mov	r1, r4
                *v = (uint16_t)var_toInteger(it);
   1a954:	8020      	strh	r0, [r4, #0]
                arr_push(&object->macGroupAddresses, v);
   1a956:	4628      	mov	r0, r5
   1a958:	f7f6 fb9a 	bl	11090 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a95c:	3701      	adds	r7, #1
   1a95e:	68b0      	ldr	r0, [r6, #8]
   1a960:	88c3      	ldrh	r3, [r0, #6]
   1a962:	42bb      	cmp	r3, r7
   1a964:	d1e7      	bne.n	1a936 <cosem_setSFSKPhyMacSetUp+0xb0>
   1a966:	e7a2      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->repeater = (DLMS_REPEATER)var_toInteger(value);
   1a968:	4630      	mov	r0, r6
   1a96a:	f000 ffb4 	bl	1b8d6 <var_toInteger>
   1a96e:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
        break;
   1a972:	e79c      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->repeaterStatus = value->boolVal;
   1a974:	7a33      	ldrb	r3, [r6, #8]
   1a976:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
        break;
   1a97a:	e798      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->minDeltaCredit = (unsigned char)var_toInteger(value);
   1a97c:	4630      	mov	r0, r6
   1a97e:	f000 ffaa 	bl	1b8d6 <var_toInteger>
   1a982:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
        break;
   1a986:	e792      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->initiatorMacAddress = (uint16_t)var_toInteger(value);
   1a988:	4630      	mov	r0, r6
   1a98a:	f000 ffa4 	bl	1b8d6 <var_toInteger>
   1a98e:	86a8      	strh	r0, [r5, #52]	; 0x34
        break;
   1a990:	e78d      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->synchronizationLocked = (unsigned char)var_toInteger(value);
   1a992:	4630      	mov	r0, r6
   1a994:	f000 ff9f 	bl	1b8d6 <var_toInteger>
   1a998:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
        break;
   1a99c:	e787      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
        object->transmissionSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   1a99e:	4630      	mov	r0, r6
   1a9a0:	f000 ff99 	bl	1b8d6 <var_toInteger>
   1a9a4:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
   1a9a8:	e781      	b.n	1a8ae <cosem_setSFSKPhyMacSetUp+0x28>
    int pos, ret = 0;
   1a9aa:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1a9ae:	e7ad      	b.n	1a90c <cosem_setSFSKPhyMacSetUp+0x86>

0001a9b0 <cosem_setSFSKReportingSystemList>:
    dlmsVARIANT* value)
{
    int pos, ret = 0;
    dlmsVARIANT* tmp;
    gxByteBuffer* it;
    if (index == 2)
   1a9b0:	2a02      	cmp	r2, #2
{
   1a9b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a9b4:	461f      	mov	r7, r3
    if (index == 2)
   1a9b6:	d12a      	bne.n	1aa0e <cosem_setSFSKReportingSystemList+0x5e>
    {
        obj_clearByteBufferList(&object->reportingSystemList);
   1a9b8:	f101 0410 	add.w	r4, r1, #16
   1a9bc:	4620      	mov	r0, r4
   1a9be:	f7f9 ffa2 	bl	14906 <obj_clearByteBufferList>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1a9c2:	783b      	ldrb	r3, [r7, #0]
   1a9c4:	2b01      	cmp	r3, #1
   1a9c6:	d020      	beq.n	1aa0a <cosem_setSFSKReportingSystemList+0x5a>
    int pos, ret = 0;
   1a9c8:	2000      	movs	r0, #0
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1a9ca:	b003      	add	sp, #12
   1a9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1a9ce:	aa01      	add	r2, sp, #4
   1a9d0:	4631      	mov	r1, r6
   1a9d2:	f000 fe06 	bl	1b5e2 <va_getByIndex>
   1a9d6:	2800      	cmp	r0, #0
   1a9d8:	d1f7      	bne.n	1a9ca <cosem_setSFSKReportingSystemList+0x1a>
                    it = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1a9da:	200c      	movs	r0, #12
   1a9dc:	f7f1 ff42 	bl	c864 <malloc>
   1a9e0:	4605      	mov	r5, r0
                    BYTE_BUFFER_INIT(it);
   1a9e2:	f7f2 ff63 	bl	d8ac <bb_init>
                    bb_set(it, tmp->byteArr->data, tmp->byteArr->size);
   1a9e6:	9b01      	ldr	r3, [sp, #4]
   1a9e8:	689b      	ldr	r3, [r3, #8]
   1a9ea:	4628      	mov	r0, r5
   1a9ec:	88da      	ldrh	r2, [r3, #6]
   1a9ee:	6819      	ldr	r1, [r3, #0]
   1a9f0:	f7f3 f8ab 	bl	db4a <bb_set>
                    if (it == NULL)
   1a9f4:	b175      	cbz	r5, 1aa14 <cosem_setSFSKReportingSystemList+0x64>
                    arr_push(&object->reportingSystemList, it);
   1a9f6:	4629      	mov	r1, r5
   1a9f8:	4620      	mov	r0, r4
   1a9fa:	f7f6 fb49 	bl	11090 <arr_push>
                for (pos = 0; pos != value->Arr->size; ++pos)
   1a9fe:	3601      	adds	r6, #1
   1aa00:	68b8      	ldr	r0, [r7, #8]
   1aa02:	88c3      	ldrh	r3, [r0, #6]
   1aa04:	42b3      	cmp	r3, r6
   1aa06:	d1e2      	bne.n	1a9ce <cosem_setSFSKReportingSystemList+0x1e>
   1aa08:	e7de      	b.n	1a9c8 <cosem_setSFSKReportingSystemList+0x18>
   1aa0a:	2600      	movs	r6, #0
   1aa0c:	e7f8      	b.n	1aa00 <cosem_setSFSKReportingSystemList+0x50>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1aa0e:	f44f 7081 	mov.w	r0, #258	; 0x102
   1aa12:	e7da      	b.n	1a9ca <cosem_setSFSKReportingSystemList+0x1a>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1aa14:	f44f 7082 	mov.w	r0, #260	; 0x104
    return ret;
   1aa18:	e7d7      	b.n	1a9ca <cosem_setSFSKReportingSystemList+0x1a>

0001aa1a <vec_init>:
#include "../include/objectarray.h"

void vec_init(gxValueEventCollection* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   1aa1a:	2300      	movs	r3, #0
   1aa1c:	6003      	str	r3, [r0, #0]
    arr->capacity = 0;
   1aa1e:	8083      	strh	r3, [r0, #4]
    arr->position = 0;
   1aa20:	7183      	strb	r3, [r0, #6]
    arr->size = 0;
}
   1aa22:	4770      	bx	lr

0001aa24 <vec_capacity>:
}
#endif //DLMS_IGNORE_MALLOC

//Allocate new size for the array in bytes.
int vec_capacity(gxValueEventCollection* arr, unsigned char capacity)
{
   1aa24:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!vec_isAttached(arr))
   1aa26:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1aa2a:	2b00      	cmp	r3, #0
{
   1aa2c:	4604      	mov	r4, r0
   1aa2e:	460d      	mov	r5, r1
    if (!vec_isAttached(arr))
   1aa30:	db07      	blt.n	1aa42 <vec_capacity+0x1e>
    {
        arr->capacity = capacity;
   1aa32:	7101      	strb	r1, [r0, #4]
        if (arr->data == NULL)
   1aa34:	6800      	ldr	r0, [r0, #0]
   1aa36:	0089      	lsls	r1, r1, #2
   1aa38:	b960      	cbnz	r0, 1aa54 <vec_capacity+0x30>
        {
            arr->data = (gxValueEventArg * *)gxmalloc(arr->capacity * sizeof(gxValueEventArg*));
   1aa3a:	4608      	mov	r0, r1
   1aa3c:	f7f1 ff12 	bl	c864 <malloc>
        }
        else
        {
            arr->data = (gxValueEventArg * *)gxrealloc(arr->data, arr->capacity * sizeof(gxValueEventArg*));
   1aa40:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7F;
   1aa42:	7920      	ldrb	r0, [r4, #4]
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (vec_getCapacity(arr) < capacity)
   1aa44:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
}
   1aa48:	4285      	cmp	r5, r0
   1aa4a:	bf8c      	ite	hi
   1aa4c:	f44f 7082 	movhi.w	r0, #260	; 0x104
   1aa50:	2000      	movls	r0, #0
   1aa52:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxValueEventArg * *)gxrealloc(arr->data, arr->capacity * sizeof(gxValueEventArg*));
   1aa54:	f7f1 ffbe 	bl	c9d4 <realloc>
   1aa58:	e7f2      	b.n	1aa40 <vec_capacity+0x1c>

0001aa5a <vec_push>:

#ifndef DLMS_IGNORE_MALLOC
//Push new data to the gxValueEventCollection.
int vec_push(gxValueEventCollection * arr, gxValueEventArg* item)
{
   1aa5a:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x80) == 0x80;
   1aa5c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1aa60:	7902      	ldrb	r2, [r0, #4]
    int ret = 0;
    if (!vec_isAttached(arr))
   1aa62:	2b00      	cmp	r3, #0
{
   1aa64:	4604      	mov	r4, r0
   1aa66:	460d      	mov	r5, r1
    if (!vec_isAttached(arr))
   1aa68:	da08      	bge.n	1aa7c <vec_push+0x22>
    return arr->capacity & 0x7F;
   1aa6a:	7922      	ldrb	r2, [r4, #4]
            {
                return ret;
            }
        }
    }
    if (vec_getCapacity(arr) <= arr->size)
   1aa6c:	7963      	ldrb	r3, [r4, #5]
   1aa6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1aa72:	4293      	cmp	r3, r2
   1aa74:	d30c      	bcc.n	1aa90 <vec_push+0x36>
    {
        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1aa76:	f44f 7082 	mov.w	r0, #260	; 0x104
   1aa7a:	e008      	b.n	1aa8e <vec_push+0x34>
        if (arr->size >= vec_getCapacity(arr))
   1aa7c:	7941      	ldrb	r1, [r0, #5]
   1aa7e:	4291      	cmp	r1, r2
   1aa80:	d3f3      	bcc.n	1aa6a <vec_push+0x10>
            if ((ret = vec_capacity(arr, arr->capacity + 2)) != 0)
   1aa82:	3302      	adds	r3, #2
   1aa84:	b2d9      	uxtb	r1, r3
   1aa86:	f7ff ffcd 	bl	1aa24 <vec_capacity>
   1aa8a:	2800      	cmp	r0, #0
   1aa8c:	d0ed      	beq.n	1aa6a <vec_push+0x10>
    {
        arr->data[arr->size] = item;
        ++arr->size;
    }
    return ret;
}
   1aa8e:	bd38      	pop	{r3, r4, r5, pc}
        arr->data[arr->size] = item;
   1aa90:	6822      	ldr	r2, [r4, #0]
   1aa92:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
        ++arr->size;
   1aa96:	3301      	adds	r3, #1
   1aa98:	7163      	strb	r3, [r4, #5]
   1aa9a:	2000      	movs	r0, #0
   1aa9c:	e7f7      	b.n	1aa8e <vec_push+0x34>

0001aa9e <vec_empty>:
#endif //DLMS_IGNORE_MALLOC

void vec_empty(
    gxValueEventCollection* arr)
{
   1aa9e:	b510      	push	{r4, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!vec_isAttached(arr))
   1aaa0:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1aaa4:	2b00      	cmp	r3, #0
{
   1aaa6:	4604      	mov	r4, r0
    if (!vec_isAttached(arr))
   1aaa8:	db08      	blt.n	1aabc <vec_empty+0x1e>
    {
        if (arr->size != 0)
   1aaaa:	7943      	ldrb	r3, [r0, #5]
   1aaac:	b123      	cbz	r3, 1aab8 <vec_empty+0x1a>
        {
            gxfree(arr->data);
   1aaae:	6800      	ldr	r0, [r0, #0]
   1aab0:	f7f1 fee0 	bl	c874 <free>
            arr->data = NULL;
   1aab4:	2300      	movs	r3, #0
   1aab6:	6023      	str	r3, [r4, #0]
        }
        arr->capacity = 0;
   1aab8:	2300      	movs	r3, #0
   1aaba:	7123      	strb	r3, [r4, #4]
}
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
   1aabc:	2300      	movs	r3, #0
   1aabe:	7163      	strb	r3, [r4, #5]
    arr->position = 0;
   1aac0:	71a3      	strb	r3, [r4, #6]
}
   1aac2:	bd10      	pop	{r4, pc}

0001aac4 <ve_init>:
#endif //DLMS_IGNORE_MALLOC
    return 0;
}

void ve_init(gxValueEventArg * ve)
{
   1aac4:	b538      	push	{r3, r4, r5, lr}
   1aac6:	4604      	mov	r4, r0
    var_init(&ve->value);
    ve->handled = 0;
    ve->target = NULL;
    ve->index = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1aac8:	2500      	movs	r5, #0
    var_init(&ve->value);
   1aaca:	f000 fbb0 	bl	1b22e <var_init>
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1aace:	8225      	strh	r5, [r4, #16]
    ve->target = NULL;
   1aad0:	6165      	str	r5, [r4, #20]
    ve->index = 0;
   1aad2:	8325      	strh	r5, [r4, #24]
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->selector = 0;
    var_init(&ve->parameters);
   1aad4:	f104 0020 	add.w	r0, r4, #32
   1aad8:	f000 fba9 	bl	1b22e <var_init>
    ve->error = DLMS_ERROR_CODE_OK;
    ve->action = 0;
    ve->byteArray = 0;
    ve->skipMaxPduSize = 0;
    ve->transactionStartIndex = 0;
    ve->transactionEndIndex = 0;
   1aadc:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
    ve->error = DLMS_ERROR_CODE_OK;
   1aae0:	6325      	str	r5, [r4, #48]	; 0x30
    ve->skipMaxPduSize = 0;
   1aae2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ve->transaction = 0;
   1aae6:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
   1aaea:	bd38      	pop	{r3, r4, r5, pc}

0001aaec <ve_clear>:

void ve_clear(gxValueEventArg * ve)
{
   1aaec:	b538      	push	{r3, r4, r5, lr}
   1aaee:	4604      	mov	r4, r0
    var_clear(&ve->value);
    ve->handled = 0;
    ve->target = NULL;
    ve->index = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1aaf0:	2500      	movs	r5, #0
    var_clear(&ve->value);
   1aaf2:	f000 fcf8 	bl	1b4e6 <var_clear>
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1aaf6:	8225      	strh	r5, [r4, #16]
    ve->target = NULL;
   1aaf8:	6165      	str	r5, [r4, #20]
    ve->index = 0;
   1aafa:	8325      	strh	r5, [r4, #24]
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->selector = 0;
    var_clear(&ve->parameters);
   1aafc:	f104 0020 	add.w	r0, r4, #32
   1ab00:	f000 fcf1 	bl	1b4e6 <var_clear>
    ve->error = DLMS_ERROR_CODE_OK;
    ve->action = 0;
    ve->byteArray = 0;
    ve->skipMaxPduSize = 0;
    ve->transactionStartIndex = 0;
    ve->transactionEndIndex = 0;
   1ab04:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
    ve->error = DLMS_ERROR_CODE_OK;
   1ab08:	6325      	str	r5, [r4, #48]	; 0x30
    ve->skipMaxPduSize = 0;
   1ab0a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ve->transaction = 0;
   1ab0e:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
   1ab12:	bd38      	pop	{r3, r4, r5, pc}

0001ab14 <hlp_getObjectCount2>:
{
   1ab14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ab16:	460c      	mov	r4, r1
    ret = bb_getUInt8(buff, &ch);
   1ab18:	f10d 0103 	add.w	r1, sp, #3
{
   1ab1c:	4605      	mov	r5, r0
    ret = bb_getUInt8(buff, &ch);
   1ab1e:	f7f3 f89e 	bl	dc5e <bb_getUInt8>
    if (ret != 0)
   1ab22:	b9a0      	cbnz	r0, 1ab4e <hlp_getObjectCount2+0x3a>
    if (ch > 0x80)
   1ab24:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ab28:	2b80      	cmp	r3, #128	; 0x80
   1ab2a:	d908      	bls.n	1ab3e <hlp_getObjectCount2+0x2a>
        if (ch == 0x81)
   1ab2c:	2b81      	cmp	r3, #129	; 0x81
   1ab2e:	d108      	bne.n	1ab42 <hlp_getObjectCount2+0x2e>
            ret = bb_getUInt8(buff, &ch);
   1ab30:	f10d 0103 	add.w	r1, sp, #3
   1ab34:	4628      	mov	r0, r5
   1ab36:	f7f3 f892 	bl	dc5e <bb_getUInt8>
            *count = ch;
   1ab3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
        *count = ch;
   1ab3e:	8023      	strh	r3, [r4, #0]
   1ab40:	e005      	b.n	1ab4e <hlp_getObjectCount2+0x3a>
        else if (ch == 0x82)
   1ab42:	2b82      	cmp	r3, #130	; 0x82
   1ab44:	d105      	bne.n	1ab52 <hlp_getObjectCount2+0x3e>
            ret = bb_getUInt16(buff, count);
   1ab46:	4621      	mov	r1, r4
   1ab48:	4628      	mov	r0, r5
   1ab4a:	f7f3 f8b1 	bl	dcb0 <bb_getUInt16>
}
   1ab4e:	b003      	add	sp, #12
   1ab50:	bd30      	pop	{r4, r5, pc}
        else if (ch == 0x83)
   1ab52:	2b83      	cmp	r3, #131	; 0x83
   1ab54:	d105      	bne.n	1ab62 <hlp_getObjectCount2+0x4e>
            ret = bb_getUInt24(buff, &value);
   1ab56:	a901      	add	r1, sp, #4
   1ab58:	4628      	mov	r0, r5
   1ab5a:	f7f3 f903 	bl	dd64 <bb_getUInt24>
            *count = (uint16_t)value;
   1ab5e:	9b01      	ldr	r3, [sp, #4]
   1ab60:	e7ed      	b.n	1ab3e <hlp_getObjectCount2+0x2a>
        else if (ch == 0x84)
   1ab62:	2b84      	cmp	r3, #132	; 0x84
   1ab64:	d104      	bne.n	1ab70 <hlp_getObjectCount2+0x5c>
            ret = bb_getUInt32(buff, &value);
   1ab66:	a901      	add	r1, sp, #4
   1ab68:	4628      	mov	r0, r5
   1ab6a:	f7f3 f8b6 	bl	dcda <bb_getUInt32>
   1ab6e:	e7f6      	b.n	1ab5e <hlp_getObjectCount2+0x4a>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1ab70:	f44f 7081 	mov.w	r0, #258	; 0x102
   1ab74:	e7eb      	b.n	1ab4e <hlp_getObjectCount2+0x3a>

0001ab76 <hlp_setObjectCount>:
    if (count < 0x80)
   1ab76:	287f      	cmp	r0, #127	; 0x7f
{
   1ab78:	b538      	push	{r3, r4, r5, lr}
   1ab7a:	4605      	mov	r5, r0
   1ab7c:	460c      	mov	r4, r1
    if (count < 0x80)
   1ab7e:	d805      	bhi.n	1ab8c <hlp_setObjectCount+0x16>
            ret = bb_setUInt8(buff, (unsigned char)count);
   1ab80:	b2e9      	uxtb	r1, r5
   1ab82:	4620      	mov	r0, r4
}
   1ab84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt8(buff, (unsigned char)count);
   1ab88:	f7f2 bef9 	b.w	d97e <bb_setUInt8>
    else if (count < 0x100)
   1ab8c:	28ff      	cmp	r0, #255	; 0xff
   1ab8e:	d806      	bhi.n	1ab9e <hlp_setObjectCount+0x28>
        if ((ret = bb_setUInt8(buff, 0x81)) == 0)
   1ab90:	2181      	movs	r1, #129	; 0x81
   1ab92:	4620      	mov	r0, r4
   1ab94:	f7f2 fef3 	bl	d97e <bb_setUInt8>
   1ab98:	2800      	cmp	r0, #0
   1ab9a:	d0f1      	beq.n	1ab80 <hlp_setObjectCount+0xa>
}
   1ab9c:	bd38      	pop	{r3, r4, r5, pc}
    else if (count < 0x10000)
   1ab9e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1aba2:	d20b      	bcs.n	1abbc <hlp_setObjectCount+0x46>
        if ((ret = bb_setUInt8(buff, 0x82)) == 0)
   1aba4:	2182      	movs	r1, #130	; 0x82
   1aba6:	4620      	mov	r0, r4
   1aba8:	f7f2 fee9 	bl	d97e <bb_setUInt8>
   1abac:	2800      	cmp	r0, #0
   1abae:	d1f5      	bne.n	1ab9c <hlp_setObjectCount+0x26>
            ret = bb_setUInt16(buff, (uint16_t)count);
   1abb0:	b2a9      	uxth	r1, r5
   1abb2:	4620      	mov	r0, r4
}
   1abb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt16(buff, (uint16_t)count);
   1abb8:	f7f2 bf03 	b.w	d9c2 <bb_setUInt16>
        if ((ret = bb_setUInt8(buff, 0x84)) == 0)
   1abbc:	2184      	movs	r1, #132	; 0x84
   1abbe:	4620      	mov	r0, r4
   1abc0:	f7f2 fedd 	bl	d97e <bb_setUInt8>
   1abc4:	2800      	cmp	r0, #0
   1abc6:	d1e9      	bne.n	1ab9c <hlp_setObjectCount+0x26>
            ret = bb_setUInt32(buff, count);
   1abc8:	4629      	mov	r1, r5
   1abca:	4620      	mov	r0, r4
}
   1abcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt32(buff, count);
   1abd0:	f7f2 bf19 	b.w	da06 <bb_setUInt32>

0001abd4 <hlp_getValue>:
    if (c > '9')
   1abd4:	2839      	cmp	r0, #57	; 0x39
   1abd6:	b243      	sxtb	r3, r0
   1abd8:	d907      	bls.n	1abea <hlp_getValue+0x16>
        if (c > 'Z')
   1abda:	285a      	cmp	r0, #90	; 0x5a
            value = (c - 'a' + 10);
   1abdc:	bf8c      	ite	hi
   1abde:	f1a3 0057 	subhi.w	r0, r3, #87	; 0x57
            value = (c - 'A' + 10);
   1abe2:	f1a3 0037 	subls.w	r0, r3, #55	; 0x37
        value = (c - '0');
   1abe6:	b2c0      	uxtb	r0, r0
}
   1abe8:	4770      	bx	lr
        value = (c - '0');
   1abea:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1abee:	e7fa      	b.n	1abe6 <hlp_getValue+0x12>

0001abf0 <hlp_hexToBytes>:
{
   1abf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *count = 0;
   1abf4:	2300      	movs	r3, #0
{
   1abf6:	4604      	mov	r4, r0
   1abf8:	4617      	mov	r7, r2
    *count = 0;
   1abfa:	8013      	strh	r3, [r2, #0]
    if (buffer != NULL && *buffer != NULL)
   1abfc:	4688      	mov	r8, r1
   1abfe:	b119      	cbz	r1, 1ac08 <hlp_hexToBytes+0x18>
   1ac00:	6808      	ldr	r0, [r1, #0]
   1ac02:	b108      	cbz	r0, 1ac08 <hlp_hexToBytes+0x18>
        gxfree(*buffer);
   1ac04:	f7f1 fe36 	bl	c874 <free>
    if (str == NULL)
   1ac08:	b914      	cbnz	r4, 1ac10 <hlp_hexToBytes+0x20>
    return 0;
   1ac0a:	2000      	movs	r0, #0
}
   1ac0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int len = (int)strlen(str);
   1ac10:	4620      	mov	r0, r4
   1ac12:	f7e6 f8d5 	bl	dc0 <strlen>
    if (len == 0)
   1ac16:	4605      	mov	r5, r0
   1ac18:	2800      	cmp	r0, #0
   1ac1a:	d0f6      	beq.n	1ac0a <hlp_hexToBytes+0x1a>
    unsigned char* tmp = (unsigned char*)gxmalloc(len / 2);
   1ac1c:	eb00 79d0 	add.w	r9, r0, r0, lsr #31
   1ac20:	ea4f 0969 	mov.w	r9, r9, asr #1
   1ac24:	4648      	mov	r0, r9
   1ac26:	f7f1 fe1d 	bl	c864 <malloc>
    if (tmp == NULL)
   1ac2a:	4602      	mov	r2, r0
   1ac2c:	b358      	cbz	r0, 1ac86 <hlp_hexToBytes+0x96>
    *buffer = tmp;
   1ac2e:	1961      	adds	r1, r4, r5
   1ac30:	f8c8 0000 	str.w	r0, [r8]
    int lastValue = -1;
   1ac34:	f04f 35ff 	mov.w	r5, #4294967295
        if (*str >= '0' && *str < 'g')
   1ac38:	f814 0b01 	ldrb.w	r0, [r4], #1
   1ac3c:	883e      	ldrh	r6, [r7, #0]
   1ac3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1ac42:	2b36      	cmp	r3, #54	; 0x36
   1ac44:	d819      	bhi.n	1ac7a <hlp_hexToBytes+0x8a>
            if (lastValue == -1)
   1ac46:	1c6b      	adds	r3, r5, #1
   1ac48:	d10d      	bne.n	1ac66 <hlp_hexToBytes+0x76>
                lastValue = hlp_getValue(*str);
   1ac4a:	f7ff ffc3 	bl	1abd4 <hlp_getValue>
   1ac4e:	4605      	mov	r5, r0
    for (int pos = 0; pos != len; ++pos)
   1ac50:	428c      	cmp	r4, r1
   1ac52:	d1f1      	bne.n	1ac38 <hlp_hexToBytes+0x48>
    if (len / 2 != *count)
   1ac54:	8839      	ldrh	r1, [r7, #0]
   1ac56:	4589      	cmp	r9, r1
   1ac58:	d0d7      	beq.n	1ac0a <hlp_hexToBytes+0x1a>
        *buffer = gxrealloc(*buffer, *count);
   1ac5a:	4610      	mov	r0, r2
   1ac5c:	f7f1 feba 	bl	c9d4 <realloc>
   1ac60:	f8c8 0000 	str.w	r0, [r8]
   1ac64:	e7d1      	b.n	1ac0a <hlp_hexToBytes+0x1a>
                tmp[*count] = (unsigned char)(lastValue << 4 | hlp_getValue(*str));
   1ac66:	f7ff ffb5 	bl	1abd4 <hlp_getValue>
   1ac6a:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
   1ac6e:	5595      	strb	r5, [r2, r6]
            ++* count;
   1ac70:	3601      	adds	r6, #1
   1ac72:	803e      	strh	r6, [r7, #0]
            lastValue = -1;
   1ac74:	f04f 35ff 	mov.w	r5, #4294967295
   1ac78:	e7ea      	b.n	1ac50 <hlp_hexToBytes+0x60>
        else if (lastValue != -1)
   1ac7a:	1c6b      	adds	r3, r5, #1
   1ac7c:	d0e8      	beq.n	1ac50 <hlp_hexToBytes+0x60>
            tmp[*count] = hlp_getValue(*str);
   1ac7e:	f7ff ffa9 	bl	1abd4 <hlp_getValue>
   1ac82:	5590      	strb	r0, [r2, r6]
   1ac84:	e7f4      	b.n	1ac70 <hlp_hexToBytes+0x80>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1ac86:	f44f 7082 	mov.w	r0, #260	; 0x104
   1ac8a:	e7bf      	b.n	1ac0c <hlp_hexToBytes+0x1c>

0001ac8c <hlp_intToString>:

int hlp_intToString(char* str, int bufsize, int32_t value, unsigned char isSigned, unsigned char digits)
{
   1ac8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac8e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    int cnt = 0;
    int32_t val = value;
    if (isSigned && value < 0)
   1ac92:	b14b      	cbz	r3, 1aca8 <hlp_intToString+0x1c>
   1ac94:	2a00      	cmp	r2, #0
   1ac96:	da2c      	bge.n	1acf2 <hlp_intToString+0x66>
    {
        if (bufsize < 1)
   1ac98:	2900      	cmp	r1, #0
   1ac9a:	dd38      	ble.n	1ad0e <hlp_intToString+0x82>
        {
            return -1;
        }
        *str = '-';
   1ac9c:	232d      	movs	r3, #45	; 0x2d
   1ac9e:	f800 3b01 	strb.w	r3, [r0], #1
        ++str;
        --bufsize;
   1aca2:	3901      	subs	r1, #1
        value = -value;
   1aca4:	4252      	negs	r2, r2
        val = value;
        ++cnt;
   1aca6:	2301      	movs	r3, #1
    }
    if (digits != 0)
   1aca8:	b10c      	cbz	r4, 1acae <hlp_intToString+0x22>
    {
        --digits;
   1acaa:	3c01      	subs	r4, #1
   1acac:	b2e4      	uxtb	r4, r4
    int cnt = 0;
   1acae:	4615      	mov	r5, r2
    }
    //Find length.
    while ((val = (val / 10)) > 0)
   1acb0:	270a      	movs	r7, #10
   1acb2:	2d09      	cmp	r5, #9
   1acb4:	fb95 f6f7 	sdiv	r6, r5, r7
   1acb8:	dc1d      	bgt.n	1acf6 <hlp_intToString+0x6a>
        if (digits != 0)
        {
            --digits;
        }
    }
    *(str + digits + 1) = '\0';
   1acba:	4404      	add	r4, r0
   1acbc:	2500      	movs	r5, #0
   1acbe:	7065      	strb	r5, [r4, #1]
    while (digits != 0)
   1acc0:	4626      	mov	r6, r4
   1acc2:	1a1b      	subs	r3, r3, r0
    {
        if (bufsize < 1)
        {
            return -1;
        }
        *str = '0';
   1acc4:	2730      	movs	r7, #48	; 0x30
    while (digits != 0)
   1acc6:	42a0      	cmp	r0, r4
   1acc8:	eb00 0503 	add.w	r5, r0, r3
   1accc:	d119      	bne.n	1ad02 <hlp_intToString+0x76>
    {
        if (bufsize < 1)
        {
            return -1;
        }
        *str = (value % 10) + '0';
   1acce:	270a      	movs	r7, #10
   1acd0:	194c      	adds	r4, r1, r5
        if (bufsize < 1)
   1acd2:	2900      	cmp	r1, #0
   1acd4:	dd1b      	ble.n	1ad0e <hlp_intToString+0x82>
        *str = (value % 10) + '0';
   1acd6:	fb92 f3f7 	sdiv	r3, r2, r7
   1acda:	fb07 2213 	mls	r2, r7, r3, r2
   1acde:	3230      	adds	r2, #48	; 0x30
   1ace0:	7032      	strb	r2, [r6, #0]
        value /= 10;
		if (value != 0)
   1ace2:	461a      	mov	r2, r3
   1ace4:	b103      	cbz	r3, 1ace8 <hlp_intToString+0x5c>
		{
        	--str;
   1ace6:	3e01      	subs	r6, #1
		}
        --bufsize;
   1ace8:	3901      	subs	r1, #1
        ++cnt;
   1acea:	1a60      	subs	r0, r4, r1
    } while (value != 0);
   1acec:	2b00      	cmp	r3, #0
   1acee:	d1f0      	bne.n	1acd2 <hlp_intToString+0x46>
    return cnt;
}
   1acf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int cnt = 0;
   1acf2:	2300      	movs	r3, #0
   1acf4:	e7d8      	b.n	1aca8 <hlp_intToString+0x1c>
        ++str;
   1acf6:	3001      	adds	r0, #1
        if (digits != 0)
   1acf8:	b10c      	cbz	r4, 1acfe <hlp_intToString+0x72>
            --digits;
   1acfa:	3c01      	subs	r4, #1
   1acfc:	b2e4      	uxtb	r4, r4
    int cnt = 0;
   1acfe:	4635      	mov	r5, r6
   1ad00:	e7d7      	b.n	1acb2 <hlp_intToString+0x26>
        if (bufsize < 1)
   1ad02:	2900      	cmp	r1, #0
   1ad04:	dd03      	ble.n	1ad0e <hlp_intToString+0x82>
        *str = '0';
   1ad06:	f800 7b01 	strb.w	r7, [r0], #1
        --bufsize;
   1ad0a:	3901      	subs	r1, #1
        ++cnt;
   1ad0c:	e7db      	b.n	1acc6 <hlp_intToString+0x3a>
            return -1;
   1ad0e:	f04f 30ff 	mov.w	r0, #4294967295
   1ad12:	e7ed      	b.n	1acf0 <hlp_intToString+0x64>

0001ad14 <hlp_stringToInt>:

int32_t hlp_stringToInt(const char* str)
{
   1ad14:	b530      	push	{r4, r5, lr}
    if (str == NULL)
   1ad16:	b1b8      	cbz	r0, 1ad48 <hlp_stringToInt+0x34>
    {
        return -1;
    }
    int32_t value = 0;
    unsigned char minus = 0;
    if (*str == '-')
   1ad18:	7803      	ldrb	r3, [r0, #0]
   1ad1a:	2b2d      	cmp	r3, #45	; 0x2d
   1ad1c:	d112      	bne.n	1ad44 <hlp_stringToInt+0x30>
    {
        minus = 1;
        ++str;
   1ad1e:	3001      	adds	r0, #1
        minus = 1;
   1ad20:	2101      	movs	r1, #1
   1ad22:	1e43      	subs	r3, r0, #1
    {
        if (*str < '0' || *str > '9')
        {
            return -1;
        }
        value *= 10;
   1ad24:	240a      	movs	r4, #10
    unsigned char minus = 0;
   1ad26:	2000      	movs	r0, #0
   1ad28:	e005      	b.n	1ad36 <hlp_stringToInt+0x22>
        if (*str < '0' || *str > '9')
   1ad2a:	3a30      	subs	r2, #48	; 0x30
   1ad2c:	b2d5      	uxtb	r5, r2
   1ad2e:	2d09      	cmp	r5, #9
   1ad30:	d80a      	bhi.n	1ad48 <hlp_stringToInt+0x34>
        value += *str - '0';
   1ad32:	fb04 2000 	mla	r0, r4, r0, r2
    while (*str != '\0')
   1ad36:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ad3a:	2a00      	cmp	r2, #0
   1ad3c:	d1f5      	bne.n	1ad2a <hlp_stringToInt+0x16>
        ++str;
    }
    if (minus)
   1ad3e:	b101      	cbz	r1, 1ad42 <hlp_stringToInt+0x2e>
    {
        return -value;
   1ad40:	4240      	negs	r0, r0
    }
    return value;
}
   1ad42:	bd30      	pop	{r4, r5, pc}
    unsigned char minus = 0;
   1ad44:	2100      	movs	r1, #0
   1ad46:	e7ec      	b.n	1ad22 <hlp_stringToInt+0xe>
        return -1;
   1ad48:	f04f 30ff 	mov.w	r0, #4294967295
   1ad4c:	e7f9      	b.n	1ad42 <hlp_stringToInt+0x2e>

0001ad4e <hlp_int64ToString>:

int hlp_int64ToString(char* str, int bufsize, int64_t value, unsigned char isSigned)
{
   1ad4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ad52:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1ad56:	4604      	mov	r4, r0
   1ad58:	468a      	mov	sl, r1
   1ad5a:	4690      	mov	r8, r2
   1ad5c:	4699      	mov	r9, r3
    int cnt = 0;
    int64_t val = value;
    if (isSigned && value < 0)
   1ad5e:	b3f5      	cbz	r5, 1adde <hlp_int64ToString+0x90>
   1ad60:	2a00      	cmp	r2, #0
   1ad62:	f179 0300 	sbcs.w	r3, r9, #0
   1ad66:	da3d      	bge.n	1ade4 <hlp_int64ToString+0x96>
    {
        if (bufsize < 1)
   1ad68:	2900      	cmp	r1, #0
   1ad6a:	dd3f      	ble.n	1adec <hlp_int64ToString+0x9e>
        {
            return -1;
        }
        *str = '-';
   1ad6c:	232d      	movs	r3, #45	; 0x2d
        ++str;
        --bufsize;
        value = -value;
   1ad6e:	4256      	negs	r6, r2
        *str = '-';
   1ad70:	f804 3b01 	strb.w	r3, [r4], #1
        --bufsize;
   1ad74:	f101 3aff 	add.w	sl, r1, #4294967295
        value = -value;
   1ad78:	eb69 0749 	sbc.w	r7, r9, r9, lsl #1
        ++cnt;
   1ad7c:	2501      	movs	r5, #1
    }
    //Find length.
    while ((val = (val / 10)) > 0)
   1ad7e:	2300      	movs	r3, #0
   1ad80:	220a      	movs	r2, #10
   1ad82:	4640      	mov	r0, r8
   1ad84:	4649      	mov	r1, r9
   1ad86:	f7e5 fe47 	bl	a18 <__aeabi_ldivmod>
   1ad8a:	f1b8 0f0a 	cmp.w	r8, #10
   1ad8e:	f179 0300 	sbcs.w	r3, r9, #0
   1ad92:	da20      	bge.n	1add6 <hlp_int64ToString+0x88>
    {
        ++str;
    }
    *(str + 1) = '\0';
   1ad94:	2300      	movs	r3, #0
   1ad96:	7063      	strb	r3, [r4, #1]
   1ad98:	ebaa 0a04 	sub.w	sl, sl, r4
   1ad9c:	4425      	add	r5, r4
    do
    {
        if (bufsize < 1)
   1ad9e:	eb04 030a 	add.w	r3, r4, sl
   1ada2:	2b00      	cmp	r3, #0
   1ada4:	dd22      	ble.n	1adec <hlp_int64ToString+0x9e>
        {
            return -1;
        }
        *str = (value % 10) + '0';
   1ada6:	4630      	mov	r0, r6
   1ada8:	4639      	mov	r1, r7
   1adaa:	220a      	movs	r2, #10
   1adac:	2300      	movs	r3, #0
   1adae:	f7e5 fe33 	bl	a18 <__aeabi_ldivmod>
   1adb2:	3230      	adds	r2, #48	; 0x30
   1adb4:	f804 2901 	strb.w	r2, [r4], #-1
        --str;
        value /= 10;
   1adb8:	2300      	movs	r3, #0
   1adba:	4630      	mov	r0, r6
   1adbc:	4639      	mov	r1, r7
   1adbe:	220a      	movs	r2, #10
   1adc0:	f7e5 fe2a 	bl	a18 <__aeabi_ldivmod>
   1adc4:	4606      	mov	r6, r0
   1adc6:	460f      	mov	r7, r1
        --bufsize;
        ++cnt;
    } while (value != 0);
   1adc8:	ea56 0307 	orrs.w	r3, r6, r7
   1adcc:	eba5 0004 	sub.w	r0, r5, r4
   1add0:	d1e5      	bne.n	1ad9e <hlp_int64ToString+0x50>
    return cnt;
}
   1add2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ++str;
   1add6:	3401      	adds	r4, #1
    while ((val = (val / 10)) > 0)
   1add8:	4680      	mov	r8, r0
   1adda:	4689      	mov	r9, r1
   1addc:	e7cf      	b.n	1ad7e <hlp_int64ToString+0x30>
   1adde:	4616      	mov	r6, r2
   1ade0:	461f      	mov	r7, r3
   1ade2:	e7cc      	b.n	1ad7e <hlp_int64ToString+0x30>
   1ade4:	4616      	mov	r6, r2
   1ade6:	464f      	mov	r7, r9
    int cnt = 0;
   1ade8:	2500      	movs	r5, #0
   1adea:	e7c8      	b.n	1ad7e <hlp_int64ToString+0x30>
            return -1;
   1adec:	f04f 30ff 	mov.w	r0, #4294967295
   1adf0:	e7ef      	b.n	1add2 <hlp_int64ToString+0x84>

0001adf2 <hlp_stringToInt64>:

int64_t hlp_stringToInt64(const char* str)
{
   1adf2:	b530      	push	{r4, r5, lr}
    if (str == NULL)
   1adf4:	b1c0      	cbz	r0, 1ae28 <hlp_stringToInt64+0x36>
    {
        return -1;
    }
    int32_t value = 0;
    unsigned char minus = 0;
    if (*str == '-')
   1adf6:	7803      	ldrb	r3, [r0, #0]
   1adf8:	2b2d      	cmp	r3, #45	; 0x2d
   1adfa:	d113      	bne.n	1ae24 <hlp_stringToInt64+0x32>
    {
        minus = 1;
        ++str;
   1adfc:	3001      	adds	r0, #1
        minus = 1;
   1adfe:	2101      	movs	r1, #1
   1ae00:	1e43      	subs	r3, r0, #1
    {
        if (*str < '0' || *str > '9')
        {
            return -1;
        }
        value *= 10;
   1ae02:	240a      	movs	r4, #10
    unsigned char minus = 0;
   1ae04:	2000      	movs	r0, #0
   1ae06:	e005      	b.n	1ae14 <hlp_stringToInt64+0x22>
        if (*str < '0' || *str > '9')
   1ae08:	3a30      	subs	r2, #48	; 0x30
   1ae0a:	b2d5      	uxtb	r5, r2
   1ae0c:	2d09      	cmp	r5, #9
   1ae0e:	d80b      	bhi.n	1ae28 <hlp_stringToInt64+0x36>
        value += *str - '0';
   1ae10:	fb04 2000 	mla	r0, r4, r0, r2
    while (*str != '\0')
   1ae14:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ae18:	2a00      	cmp	r2, #0
   1ae1a:	d1f5      	bne.n	1ae08 <hlp_stringToInt64+0x16>
        ++str;
    }
    if (minus)
   1ae1c:	b101      	cbz	r1, 1ae20 <hlp_stringToInt64+0x2e>
    {
        return -value;
   1ae1e:	4240      	negs	r0, r0
    }
    return value;
   1ae20:	17c1      	asrs	r1, r0, #31
}
   1ae22:	bd30      	pop	{r4, r5, pc}
    unsigned char minus = 0;
   1ae24:	2100      	movs	r1, #0
   1ae26:	e7eb      	b.n	1ae00 <hlp_stringToInt64+0xe>
        return -1;
   1ae28:	f04f 30ff 	mov.w	r0, #4294967295
   1ae2c:	f04f 31ff 	mov.w	r1, #4294967295
   1ae30:	e7f7      	b.n	1ae22 <hlp_stringToInt64+0x30>

0001ae32 <hlp_add>:
    }
    return ret;
}

int hlp_add(bitArray* arr, gxByteBuffer* bytes, uint16_t count)
{
   1ae32:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t pos, bytePos = 0;
    int ret;
    unsigned char ch = 0;
   1ae36:	2300      	movs	r3, #0
   1ae38:	f88d 3007 	strb.w	r3, [sp, #7]
    if (count == 0xFFFF)
   1ae3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ae40:	429a      	cmp	r2, r3
{
   1ae42:	4614      	mov	r4, r2
    {
        count = (uint16_t)(bytes->size - bytes->position);
   1ae44:	bf04      	itt	eq
   1ae46:	88cc      	ldrheq	r4, [r1, #6]
   1ae48:	890a      	ldrheq	r2, [r1, #8]
    }
    for (pos = 0; pos != count; ++pos)
   1ae4a:	f04f 0900 	mov.w	r9, #0
        count = (uint16_t)(bytes->size - bytes->position);
   1ae4e:	bf08      	it	eq
   1ae50:	1aa4      	subeq	r4, r4, r2
{
   1ae52:	4607      	mov	r7, r0
   1ae54:	460d      	mov	r5, r1
        count = (uint16_t)(bytes->size - bytes->position);
   1ae56:	bf08      	it	eq
   1ae58:	b2a4      	uxtheq	r4, r4
    uint16_t pos, bytePos = 0;
   1ae5a:	464e      	mov	r6, r9
            {
                return ret;
            }
            ++bytes->position;
        }
        if ((ret = ba_setByIndex(arr, pos, (unsigned char)(ch & (1 << bytePos)))) != 0)
   1ae5c:	f04f 0801 	mov.w	r8, #1
   1ae60:	fa1f fa89 	uxth.w	sl, r9
    for (pos = 0; pos != count; ++pos)
   1ae64:	4554      	cmp	r4, sl
   1ae66:	d103      	bne.n	1ae70 <hlp_add+0x3e>
            return ret;
        }
        --bytePos;
        ++arr->size;
    }
    return 0;
   1ae68:	2000      	movs	r0, #0
   1ae6a:	b002      	add	sp, #8
   1ae6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((pos % 8) == 0)
   1ae70:	f01a 0f07 	tst.w	sl, #7
   1ae74:	d10b      	bne.n	1ae8e <hlp_add+0x5c>
            ret = bb_getUInt8ByIndex(bytes, bytes->position, &ch);
   1ae76:	8929      	ldrh	r1, [r5, #8]
   1ae78:	f10d 0207 	add.w	r2, sp, #7
   1ae7c:	4628      	mov	r0, r5
   1ae7e:	f7f2 ff0c 	bl	dc9a <bb_getUInt8ByIndex>
            if (ret != 0)
   1ae82:	2800      	cmp	r0, #0
   1ae84:	d1f1      	bne.n	1ae6a <hlp_add+0x38>
            ++bytes->position;
   1ae86:	892b      	ldrh	r3, [r5, #8]
   1ae88:	3301      	adds	r3, #1
   1ae8a:	812b      	strh	r3, [r5, #8]
            bytePos = 7;
   1ae8c:	2607      	movs	r6, #7
        if ((ret = ba_setByIndex(arr, pos, (unsigned char)(ch & (1 << bytePos)))) != 0)
   1ae8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ae92:	fa08 f206 	lsl.w	r2, r8, r6
   1ae96:	401a      	ands	r2, r3
   1ae98:	4651      	mov	r1, sl
   1ae9a:	4638      	mov	r0, r7
   1ae9c:	f7f2 fc34 	bl	d708 <ba_setByIndex>
   1aea0:	f109 0901 	add.w	r9, r9, #1
   1aea4:	2800      	cmp	r0, #0
   1aea6:	d1e0      	bne.n	1ae6a <hlp_add+0x38>
        ++arr->size;
   1aea8:	88fb      	ldrh	r3, [r7, #6]
        --bytePos;
   1aeaa:	3e01      	subs	r6, #1
        ++arr->size;
   1aeac:	3301      	adds	r3, #1
        --bytePos;
   1aeae:	b2b6      	uxth	r6, r6
        ++arr->size;
   1aeb0:	80fb      	strh	r3, [r7, #6]
    for (pos = 0; pos != count; ++pos)
   1aeb2:	e7d5      	b.n	1ae60 <hlp_add+0x2e>

0001aeb4 <notify_getData>:
int notify_getData(
    dlmsSettings* settings,
    gxByteBuffer* reply,
    gxReplyData* data)
{
    return dlms_getData2(settings, reply, data, 0);
   1aeb4:	2300      	movs	r3, #0
   1aeb6:	f7f5 bf8a 	b.w	10dce <dlms_getData2>

0001aeba <notify_parsePush>:

int notify_parsePush(
    dlmsSettings* settings,
    variantArray* data,
    gxArray* items)
{
   1aeba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aebe:	4688      	mov	r8, r1
   1aec0:	b098      	sub	sp, #96	; 0x60
   1aec2:	4607      	mov	r7, r0
   1aec4:	4616      	mov	r6, r2
    unsigned char index;
    int classID, ret;
	uint16_t pos;
    gxValueEventArg e;
    dlmsVARIANT* it, * list, * tmp;
    if ((ret = va_getByIndex(data, 0, &list)) != 0)
   1aec6:	2100      	movs	r1, #0
   1aec8:	aa04      	add	r2, sp, #16
   1aeca:	4640      	mov	r0, r8
   1aecc:	f000 fb89 	bl	1b5e2 <va_getByIndex>
   1aed0:	4604      	mov	r4, r0
   1aed2:	b990      	cbnz	r0, 1aefa <notify_parsePush+0x40>
   1aed4:	4681      	mov	r9, r0
    {
        return ret;
    }

    for (pos = 0; pos != list->Arr->size; ++pos)
   1aed6:	9b04      	ldr	r3, [sp, #16]
   1aed8:	6898      	ldr	r0, [r3, #8]
   1aeda:	88c2      	ldrh	r2, [r0, #6]
   1aedc:	fa1f f389 	uxth.w	r3, r9
   1aee0:	429a      	cmp	r2, r3
   1aee2:	d10e      	bne.n	1af02 <notify_parsePush+0x48>
            index = (unsigned char)var_toInteger(tmp);
            arr_push(items, key_init(obj, (void*)(uint64_t)index));
#endif //DLMS_IGNORE_MALLOC
        }
    }
    ve_init(&e);
   1aee4:	ad06      	add	r5, sp, #24
   1aee6:	4628      	mov	r0, r5
   1aee8:	f7ff fdec 	bl	1aac4 <ve_init>
    for (pos = 0; pos != items->size; ++pos)
   1aeec:	f04f 0900 	mov.w	r9, #0
   1aef0:	88f3      	ldrh	r3, [r6, #6]
   1aef2:	fa1f f189 	uxth.w	r1, r9
   1aef6:	428b      	cmp	r3, r1
   1aef8:	d15c      	bne.n	1afb4 <notify_parsePush+0xfa>
        {
            return ret;
        }
    }
    return ret;
}
   1aefa:	4620      	mov	r0, r4
   1aefc:	b018      	add	sp, #96	; 0x60
   1aefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((ret = va_getByIndex(list->Arr, pos, &it)) != 0)
   1af02:	fa1f f189 	uxth.w	r1, r9
   1af06:	aa03      	add	r2, sp, #12
   1af08:	f000 fb6b 	bl	1b5e2 <va_getByIndex>
   1af0c:	4601      	mov	r1, r0
   1af0e:	2800      	cmp	r0, #0
   1af10:	d174      	bne.n	1affc <notify_parsePush+0x142>
        if ((ret = va_getByIndex(it->Arr, 0, &tmp)) != 0)
   1af12:	9b03      	ldr	r3, [sp, #12]
   1af14:	aa05      	add	r2, sp, #20
   1af16:	6898      	ldr	r0, [r3, #8]
   1af18:	f000 fb63 	bl	1b5e2 <va_getByIndex>
   1af1c:	2800      	cmp	r0, #0
   1af1e:	d16b      	bne.n	1aff8 <notify_parsePush+0x13e>
        classID = var_toInteger(tmp) & 0xFFFF;
   1af20:	9805      	ldr	r0, [sp, #20]
   1af22:	f000 fcd8 	bl	1b8d6 <var_toInteger>
   1af26:	b283      	uxth	r3, r0
   1af28:	4605      	mov	r5, r0
        if (classID > 0)
   1af2a:	2b00      	cmp	r3, #0
   1af2c:	d03f      	beq.n	1afae <notify_parsePush+0xf4>
            if ((ret = va_getByIndex(it->Arr, 1, &tmp)) != 0)
   1af2e:	9b03      	ldr	r3, [sp, #12]
   1af30:	aa05      	add	r2, sp, #20
   1af32:	6898      	ldr	r0, [r3, #8]
   1af34:	2101      	movs	r1, #1
   1af36:	f000 fb54 	bl	1b5e2 <va_getByIndex>
   1af3a:	2800      	cmp	r0, #0
   1af3c:	d15c      	bne.n	1aff8 <notify_parsePush+0x13e>
            if ((ret = oa_findByLN(&settings->objects, (DLMS_OBJECT_TYPE)classID, tmp->byteArr->data, &obj)) != 0)
   1af3e:	9b05      	ldr	r3, [sp, #20]
   1af40:	689a      	ldr	r2, [r3, #8]
   1af42:	f107 0a98 	add.w	sl, r7, #152	; 0x98
   1af46:	b2ad      	uxth	r5, r5
   1af48:	6812      	ldr	r2, [r2, #0]
   1af4a:	ab02      	add	r3, sp, #8
   1af4c:	4629      	mov	r1, r5
   1af4e:	4650      	mov	r0, sl
   1af50:	f000 f904 	bl	1b15c <oa_findByLN>
   1af54:	2800      	cmp	r0, #0
   1af56:	d14f      	bne.n	1aff8 <notify_parsePush+0x13e>
            if (obj == NULL)
   1af58:	9b02      	ldr	r3, [sp, #8]
   1af5a:	b9b3      	cbnz	r3, 1af8a <notify_parsePush+0xd0>
                if ((ret = cosem_createObject((DLMS_OBJECT_TYPE)classID, &obj)) != 0)
   1af5c:	a902      	add	r1, sp, #8
   1af5e:	4628      	mov	r0, r5
   1af60:	f7e7 f8d2 	bl	2108 <cosem_createObject>
   1af64:	2800      	cmp	r0, #0
   1af66:	d147      	bne.n	1aff8 <notify_parsePush+0x13e>
                memcpy(obj->logicalName, tmp->byteArr->data, 6);
   1af68:	9b05      	ldr	r3, [sp, #20]
   1af6a:	9902      	ldr	r1, [sp, #8]
   1af6c:	689b      	ldr	r3, [r3, #8]
   1af6e:	681b      	ldr	r3, [r3, #0]
   1af70:	681a      	ldr	r2, [r3, #0]
   1af72:	f8c1 2006 	str.w	r2, [r1, #6]
   1af76:	889b      	ldrh	r3, [r3, #4]
   1af78:	814b      	strh	r3, [r1, #10]
                oa_push(&settings->objects, obj);
   1af7a:	4650      	mov	r0, sl
   1af7c:	f000 f85f 	bl	1b03e <oa_push>
                ret = oa_push(&settings->releasedObjects, obj);
   1af80:	9902      	ldr	r1, [sp, #8]
   1af82:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1af86:	f000 f85a 	bl	1b03e <oa_push>
            if ((ret = va_getByIndex(it->Arr, 2, &tmp)) != 0)
   1af8a:	9b03      	ldr	r3, [sp, #12]
   1af8c:	aa05      	add	r2, sp, #20
   1af8e:	6898      	ldr	r0, [r3, #8]
   1af90:	2102      	movs	r1, #2
   1af92:	f000 fb26 	bl	1b5e2 <va_getByIndex>
   1af96:	bb78      	cbnz	r0, 1aff8 <notify_parsePush+0x13e>
            index = (unsigned char)var_toInteger(tmp);
   1af98:	9805      	ldr	r0, [sp, #20]
   1af9a:	f000 fc9c 	bl	1b8d6 <var_toInteger>
            arr_push(items, key_init(obj, (void*)(uint64_t)index));
   1af9e:	b2c1      	uxtb	r1, r0
   1afa0:	9802      	ldr	r0, [sp, #8]
   1afa2:	f7f9 fb7e 	bl	146a2 <key_init>
   1afa6:	4601      	mov	r1, r0
   1afa8:	4630      	mov	r0, r6
   1afaa:	f7f6 f871 	bl	11090 <arr_push>
    for (pos = 0; pos != list->Arr->size; ++pos)
   1afae:	f109 0901 	add.w	r9, r9, #1
   1afb2:	e790      	b.n	1aed6 <notify_parsePush+0x1c>
        if ((ret = arr_getByIndex(items, pos, (void**)&k)) != 0)
   1afb4:	aa01      	add	r2, sp, #4
   1afb6:	4630      	mov	r0, r6
   1afb8:	f7f6 f8a7 	bl	1110a <arr_getByIndex>
   1afbc:	b9e0      	cbnz	r0, 1aff8 <notify_parsePush+0x13e>
        obj = (gxObject*)k->key;
   1afbe:	9b01      	ldr	r3, [sp, #4]
        if ((ret = va_getByIndex(data, pos, &it)) != 0)
   1afc0:	aa03      	add	r2, sp, #12
        obj = (gxObject*)k->key;
   1afc2:	681b      	ldr	r3, [r3, #0]
   1afc4:	9302      	str	r3, [sp, #8]
        if ((ret = va_getByIndex(data, pos, &it)) != 0)
   1afc6:	fa1f f189 	uxth.w	r1, r9
   1afca:	4640      	mov	r0, r8
   1afcc:	f000 fb09 	bl	1b5e2 <va_getByIndex>
   1afd0:	b990      	cbnz	r0, 1aff8 <notify_parsePush+0x13e>
        index = k->value;
   1afd2:	9b01      	ldr	r3, [sp, #4]
        e.target = obj;
   1afd4:	9a02      	ldr	r2, [sp, #8]
        index = k->value;
   1afd6:	791b      	ldrb	r3, [r3, #4]
        e.index = index;
   1afd8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        e.value = *it;
   1afdc:	9b03      	ldr	r3, [sp, #12]
        e.target = obj;
   1afde:	920b      	str	r2, [sp, #44]	; 0x2c
        e.value = *it;
   1afe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1afe2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        if ((ret = cosem_setValue(settings, &e)) != 0)
   1afe6:	4629      	mov	r1, r5
   1afe8:	4638      	mov	r0, r7
   1afea:	f7fa f91c 	bl	15226 <cosem_setValue>
   1afee:	f109 0901 	add.w	r9, r9, #1
   1aff2:	2800      	cmp	r0, #0
   1aff4:	f43f af7c 	beq.w	1aef0 <notify_parsePush+0x36>
   1aff8:	4604      	mov	r4, r0
   1affa:	e77e      	b.n	1aefa <notify_parsePush+0x40>
        if ((ret = va_getByIndex(list->Arr, pos, &it)) != 0)
   1affc:	4604      	mov	r4, r0
   1affe:	e77c      	b.n	1aefa <notify_parsePush+0x40>

0001b000 <oa_init>:

//Initialize objectArray.
void oa_init(objectArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   1b000:	2300      	movs	r3, #0
    arr->capacity = 0;
   1b002:	e9c0 3300 	strd	r3, r3, [r0]
#if !(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->position = 0;
#endif //!(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->size = 0;
}
   1b006:	4770      	bx	lr

0001b008 <oa_capacity>:
    return arr->capacity & 0x7FFF;
}

//Allocate new size for the array in bytes.
int oa_capacity(objectArray* arr, const uint16_t capacity)
{
   1b008:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!oa_isAttached(arr))
   1b00a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1b00e:	2b00      	cmp	r3, #0
{
   1b010:	4604      	mov	r4, r0
   1b012:	460d      	mov	r5, r1
    if (!oa_isAttached(arr))
   1b014:	db07      	blt.n	1b026 <oa_capacity+0x1e>
    {
        arr->capacity = capacity;
   1b016:	8081      	strh	r1, [r0, #4]
        if (arr->data == NULL)
   1b018:	6800      	ldr	r0, [r0, #0]
   1b01a:	0089      	lsls	r1, r1, #2
   1b01c:	b960      	cbnz	r0, 1b038 <oa_capacity+0x30>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
   1b01e:	4608      	mov	r0, r1
   1b020:	f7f1 fc20 	bl	c864 <malloc>
        }
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   1b024:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   1b026:	88a0      	ldrh	r0, [r4, #4]
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (oa_getCapacity(arr) < capacity)
   1b028:	f3c0 000e 	ubfx	r0, r0, #0, #15
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
}
   1b02c:	4285      	cmp	r5, r0
   1b02e:	bf8c      	ite	hi
   1b030:	f44f 7082 	movhi.w	r0, #260	; 0x104
   1b034:	2000      	movls	r0, #0
   1b036:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   1b038:	f7f1 fccc 	bl	c9d4 <realloc>
   1b03c:	e7f2      	b.n	1b024 <oa_capacity+0x1c>

0001b03e <oa_push>:
}

#ifndef DLMS_IGNORE_MALLOC
//Push new data to the objectArray.
int oa_push(objectArray* arr, gxObject* item)
{
   1b03e:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1b040:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1b044:	8882      	ldrh	r2, [r0, #4]
    if (!oa_isAttached(arr) && arr->size >= arr->capacity)
   1b046:	2b00      	cmp	r3, #0
{
   1b048:	4604      	mov	r4, r0
   1b04a:	460d      	mov	r5, r1
    if (!oa_isAttached(arr) && arr->size >= arr->capacity)
   1b04c:	db0c      	blt.n	1b068 <oa_push+0x2a>
   1b04e:	88c1      	ldrh	r1, [r0, #6]
   1b050:	4291      	cmp	r1, r2
   1b052:	d309      	bcc.n	1b068 <oa_push+0x2a>
    {
        arr->capacity += OBJECT_ARRAY_CAPACITY;
   1b054:	330a      	adds	r3, #10
   1b056:	b29b      	uxth	r3, r3
   1b058:	8083      	strh	r3, [r0, #4]
        if (arr->data == NULL)
   1b05a:	6800      	ldr	r0, [r0, #0]
   1b05c:	0099      	lsls	r1, r3, #2
   1b05e:	b998      	cbnz	r0, 1b088 <oa_push+0x4a>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
   1b060:	4608      	mov	r0, r1
   1b062:	f7f1 fbff 	bl	c864 <malloc>
        }
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   1b066:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   1b068:	88a2      	ldrh	r2, [r4, #4]
        }
    }
    if (oa_getCapacity(arr) <= arr->size)
   1b06a:	88e3      	ldrh	r3, [r4, #6]
   1b06c:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1b070:	4293      	cmp	r3, r2
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->data[arr->size] = item;
   1b072:	bf3f      	itttt	cc
   1b074:	6822      	ldrcc	r2, [r4, #0]
   1b076:	f842 5023 	strcc.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   1b07a:	3301      	addcc	r3, #1
   1b07c:	80e3      	strhcc	r3, [r4, #6]
    return DLMS_ERROR_CODE_OK;
   1b07e:	bf34      	ite	cc
   1b080:	2000      	movcc	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1b082:	f44f 7082 	movcs.w	r0, #260	; 0x104
}
   1b086:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   1b088:	f7f1 fca4 	bl	c9d4 <realloc>
   1b08c:	e7eb      	b.n	1b066 <oa_push+0x28>

0001b08e <oa_clear>:

void oa_clear(objectArray* arr, unsigned char releaseObjects)
{
#ifndef DLMS_IGNORE_MALLOC
    uint16_t pos;
    if (arr->data != NULL)
   1b08e:	6803      	ldr	r3, [r0, #0]
{
   1b090:	b570      	push	{r4, r5, r6, lr}
   1b092:	4604      	mov	r4, r0
   1b094:	460e      	mov	r6, r1
    if (arr->data != NULL)
   1b096:	b9cb      	cbnz	r3, 1b0cc <oa_clear+0x3e>
            arr->data = NULL;
            arr->capacity = 0;
        }
    }
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
   1b098:	2300      	movs	r3, #0
   1b09a:	80e3      	strh	r3, [r4, #6]
#if !(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->position = 0;
#endif //!(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
}
   1b09c:	bd70      	pop	{r4, r5, r6, pc}
            obj_clear(arr->data[pos]);
   1b09e:	b2aa      	uxth	r2, r5
   1b0a0:	6823      	ldr	r3, [r4, #0]
   1b0a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1b0a6:	f7f9 fd9e 	bl	14be6 <obj_clear>
        for (pos = 0; pos != arr->size; ++pos)
   1b0aa:	3501      	adds	r5, #1
   1b0ac:	88e2      	ldrh	r2, [r4, #6]
   1b0ae:	b2ab      	uxth	r3, r5
   1b0b0:	429a      	cmp	r2, r3
   1b0b2:	d1f4      	bne.n	1b09e <oa_clear+0x10>
        if (releaseObjects)
   1b0b4:	b9c6      	cbnz	r6, 1b0e8 <oa_clear+0x5a>
        if (!oa_isAttached(arr))
   1b0b6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   1b0ba:	2b00      	cmp	r3, #0
   1b0bc:	dbec      	blt.n	1b098 <oa_clear+0xa>
            gxfree(arr->data);
   1b0be:	6820      	ldr	r0, [r4, #0]
   1b0c0:	f7f1 fbd8 	bl	c874 <free>
            arr->data = NULL;
   1b0c4:	2300      	movs	r3, #0
   1b0c6:	6023      	str	r3, [r4, #0]
            arr->capacity = 0;
   1b0c8:	80a3      	strh	r3, [r4, #4]
   1b0ca:	e7e5      	b.n	1b098 <oa_clear+0xa>
   1b0cc:	2500      	movs	r5, #0
   1b0ce:	e7ed      	b.n	1b0ac <oa_clear+0x1e>
                gxfree(arr->data[pos]);
   1b0d0:	b2aa      	uxth	r2, r5
   1b0d2:	6823      	ldr	r3, [r4, #0]
   1b0d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1b0d8:	f7f1 fbcc 	bl	c874 <free>
            for (pos = 0; pos != arr->size; ++pos)
   1b0dc:	3501      	adds	r5, #1
   1b0de:	88e2      	ldrh	r2, [r4, #6]
   1b0e0:	b2ab      	uxth	r3, r5
   1b0e2:	429a      	cmp	r2, r3
   1b0e4:	d1f4      	bne.n	1b0d0 <oa_clear+0x42>
   1b0e6:	e7e6      	b.n	1b0b6 <oa_clear+0x28>
   1b0e8:	2500      	movs	r5, #0
   1b0ea:	e7f8      	b.n	1b0de <oa_clear+0x50>

0001b0ec <oa_empty>:

void oa_empty(objectArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    if (!oa_isAttached(arr))
   1b0ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1b0f0:	2b00      	cmp	r3, #0
{
   1b0f2:	b510      	push	{r4, lr}
   1b0f4:	4604      	mov	r4, r0
    if (!oa_isAttached(arr))
   1b0f6:	db07      	blt.n	1b108 <oa_empty+0x1c>
    {
        if (arr->data != NULL)
   1b0f8:	6800      	ldr	r0, [r0, #0]
   1b0fa:	b118      	cbz	r0, 1b104 <oa_empty+0x18>
        {
            gxfree(arr->data);
   1b0fc:	f7f1 fbba 	bl	c874 <free>
            arr->data = NULL;
   1b100:	2300      	movs	r3, #0
   1b102:	6023      	str	r3, [r4, #0]
        }
        arr->capacity = 0;
   1b104:	2300      	movs	r3, #0
   1b106:	80a3      	strh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
   1b108:	2300      	movs	r3, #0
   1b10a:	80e3      	strh	r3, [r4, #6]
#if !(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->position = 0;
#endif //!(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
}
   1b10c:	bd10      	pop	{r4, pc}

0001b10e <oa_getByIndex>:
int oa_getByIndex(
    const objectArray* arr,
    uint16_t index,
    gxObject** item)
{
    if (index >= arr->size)
   1b10e:	88c3      	ldrh	r3, [r0, #6]
   1b110:	428b      	cmp	r3, r1
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *item = (gxObject*)arr->data[index];
   1b112:	bf81      	itttt	hi
   1b114:	6803      	ldrhi	r3, [r0, #0]
   1b116:	f853 3021 	ldrhi.w	r3, [r3, r1, lsl #2]
   1b11a:	6013      	strhi	r3, [r2, #0]
    return DLMS_ERROR_CODE_OK;
   1b11c:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1b11e:	bf98      	it	ls
   1b120:	f44f 7082 	movls.w	r0, #260	; 0x104
}
   1b124:	4770      	bx	lr

0001b126 <oa_findBySN>:
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int oa_findBySN(
    objectArray* objects,
    uint16_t sn,
    gxObject** object)
{
   1b126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t pos;
    int ret = DLMS_ERROR_CODE_OK;
    gxObject* obj = NULL;
   1b128:	2400      	movs	r4, #0
{
   1b12a:	4605      	mov	r5, r0
   1b12c:	460f      	mov	r7, r1
   1b12e:	4616      	mov	r6, r2
    gxObject* obj = NULL;
   1b130:	9401      	str	r4, [sp, #4]
    *object = NULL;
   1b132:	6014      	str	r4, [r2, #0]
    for (pos = 0; pos != objects->size; ++pos)
   1b134:	88eb      	ldrh	r3, [r5, #6]
   1b136:	b2a1      	uxth	r1, r4
   1b138:	428b      	cmp	r3, r1
   1b13a:	d101      	bne.n	1b140 <oa_findBySN+0x1a>
        {
            *object = obj;
            return 0;
        }
    }
    return ret;
   1b13c:	2000      	movs	r0, #0
   1b13e:	e00b      	b.n	1b158 <oa_findBySN+0x32>
        ret = oa_getByIndex(objects, pos, &obj);
   1b140:	aa01      	add	r2, sp, #4
   1b142:	4628      	mov	r0, r5
   1b144:	f7ff ffe3 	bl	1b10e <oa_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1b148:	b930      	cbnz	r0, 1b158 <oa_findBySN+0x32>
        if (obj->shortName == sn)
   1b14a:	9b01      	ldr	r3, [sp, #4]
   1b14c:	889a      	ldrh	r2, [r3, #4]
   1b14e:	42ba      	cmp	r2, r7
   1b150:	f104 0401 	add.w	r4, r4, #1
   1b154:	d1ee      	bne.n	1b134 <oa_findBySN+0xe>
            *object = obj;
   1b156:	6033      	str	r3, [r6, #0]
}
   1b158:	b003      	add	sp, #12
   1b15a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b15c <oa_findByLN>:
int oa_findByLN(
    objectArray* objects,
    DLMS_OBJECT_TYPE type,
    const unsigned char* ln,
    gxObject** object)
{
   1b15c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t pos;
    int ret = DLMS_ERROR_CODE_OK;
    gxObject* obj = NULL;
   1b160:	2400      	movs	r4, #0
{
   1b162:	4605      	mov	r5, r0
   1b164:	460e      	mov	r6, r1
   1b166:	4698      	mov	r8, r3
    gxObject* obj = NULL;
   1b168:	9401      	str	r4, [sp, #4]
    *object = NULL;
   1b16a:	601c      	str	r4, [r3, #0]
    if (ln == NULL)
   1b16c:	4617      	mov	r7, r2
   1b16e:	b1ea      	cbz	r2, 1b1ac <oa_findByLN+0x50>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    for (pos = 0; pos != objects->size; ++pos)
   1b170:	88eb      	ldrh	r3, [r5, #6]
   1b172:	b2a1      	uxth	r1, r4
   1b174:	428b      	cmp	r3, r1
   1b176:	d101      	bne.n	1b17c <oa_findByLN+0x20>
   1b178:	2000      	movs	r0, #0
   1b17a:	e012      	b.n	1b1a2 <oa_findByLN+0x46>
    {
        if ((ret = oa_getByIndex(objects, pos, &obj)) != DLMS_ERROR_CODE_OK)
   1b17c:	aa01      	add	r2, sp, #4
   1b17e:	4628      	mov	r0, r5
   1b180:	f7ff ffc5 	bl	1b10e <oa_getByIndex>
   1b184:	b968      	cbnz	r0, 1b1a2 <oa_findByLN+0x46>
        {
            break;
        }
        if ((obj->objectType == type || DLMS_OBJECT_TYPE_NONE == type) && memcmp(obj->logicalName, ln, 6) == 0)
   1b186:	9801      	ldr	r0, [sp, #4]
   1b188:	8803      	ldrh	r3, [r0, #0]
   1b18a:	42b3      	cmp	r3, r6
   1b18c:	d000      	beq.n	1b190 <oa_findByLN+0x34>
   1b18e:	b95e      	cbnz	r6, 1b1a8 <oa_findByLN+0x4c>
   1b190:	2206      	movs	r2, #6
   1b192:	4639      	mov	r1, r7
   1b194:	4410      	add	r0, r2
   1b196:	f002 fb6d 	bl	1d874 <memcmp>
   1b19a:	b928      	cbnz	r0, 1b1a8 <oa_findByLN+0x4c>
        {
            *object = obj;
   1b19c:	9b01      	ldr	r3, [sp, #4]
   1b19e:	f8c8 3000 	str.w	r3, [r8]
            break;
        }
    }
    return ret;
}
   1b1a2:	b002      	add	sp, #8
   1b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (pos = 0; pos != objects->size; ++pos)
   1b1a8:	3401      	adds	r4, #1
   1b1aa:	e7e1      	b.n	1b170 <oa_findByLN+0x14>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b1ac:	f44f 7081 	mov.w	r0, #258	; 0x102
   1b1b0:	e7f7      	b.n	1b1a2 <oa_findByLN+0x46>

0001b1b2 <reply_init>:

/**
* Initialize reply structure.
*/
void reply_init(gxReplyData* reply)
{
   1b1b2:	b538      	push	{r3, r4, r5, lr}
   1b1b4:	4604      	mov	r4, r0
    reply->invokeId = 0;
   1b1b6:	2500      	movs	r5, #0
   1b1b8:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
    reply->commandType = 0;
    reply->moreData = DLMS_DATA_REQUEST_TYPES_NONE;
   1b1bc:	f840 5b04 	str.w	r5, [r0], #4
    reply->encryptedCommand = reply->command = DLMS_COMMAND_NONE;
    BYTE_BUFFER_INIT(&reply->data);
   1b1c0:	f7f2 fb74 	bl	d8ac <bb_init>
    reply->complete = 0;
   1b1c4:	7425      	strb	r5, [r4, #16]
    var_init(&reply->dataValue);
   1b1c6:	f104 0018 	add.w	r0, r4, #24
   1b1ca:	f000 f830 	bl	1b22e <var_init>
    reply->totalCount = 0;
    reply->readPosition = 0;
    reply->packetLength = 0;
   1b1ce:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
#endif // DLMS_USE_EPOCH_TIME
    reply->preEstablished = 0;
    reply->blockNumber = 0;
    reply->blockNumberAck = 0;
    reply->streaming = 0;
    reply->windowSize = 0;
   1b1d2:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    reply->dataType = DLMS_DATA_TYPE_NONE;
   1b1d6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    reply->cipherIndex = 0;
   1b1da:	8665      	strh	r5, [r4, #50]	; 0x32
    reply->time = 0;
   1b1dc:	6365      	str	r5, [r4, #52]	; 0x34
    reply->preEstablished = 0;
   1b1de:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    reply->blockNumber = 0;
   1b1e2:	8765      	strh	r5, [r4, #58]	; 0x3a
    reply->blockNumberAck = 0;
   1b1e4:	87a5      	strh	r5, [r4, #60]	; 0x3c
    reply->serverAddress = 0;
   1b1e6:	64a5      	str	r5, [r4, #72]	; 0x48
    reply->clientAddress = 0;
}
   1b1e8:	bd38      	pop	{r3, r4, r5, pc}

0001b1ea <reply_clear2>:

void reply_clear2(gxReplyData* reply, unsigned char clearData)
{
   1b1ea:	b538      	push	{r3, r4, r5, lr}
    reply->invokeId = 0;
   1b1ec:	2500      	movs	r5, #0
{
   1b1ee:	4604      	mov	r4, r0
    reply->invokeId = 0;
   1b1f0:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
    reply->moreData = DLMS_DATA_REQUEST_TYPES_NONE;
   1b1f4:	8005      	strh	r5, [r0, #0]
    reply->encryptedCommand = reply->command = DLMS_COMMAND_NONE;
   1b1f6:	7085      	strb	r5, [r0, #2]
    if (clearData)
   1b1f8:	b121      	cbz	r1, 1b204 <reply_clear2+0x1a>
    {
        bb_clear(&reply->data);
   1b1fa:	3004      	adds	r0, #4
   1b1fc:	f7f2 fd19 	bl	dc32 <bb_clear>
        reply->preEstablished = 0;
   1b200:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    }
    reply->complete = 0;
   1b204:	2500      	movs	r5, #0
   1b206:	7425      	strb	r5, [r4, #16]
    var_clear(&reply->dataValue);
   1b208:	f104 0018 	add.w	r0, r4, #24
   1b20c:	f000 f96b 	bl	1b4e6 <var_clear>
    reply->totalCount = 0;
    reply->readPosition = 0;
    reply->packetLength = 0;
   1b210:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    memset(&reply->time, 0, sizeof(struct tm));
#endif // DLMS_USE_EPOCH_TIME
    reply->blockNumber = 0;
    reply->blockNumberAck = 0;
    reply->streaming = 0;
    reply->windowSize = 0;
   1b214:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    reply->dataType = DLMS_DATA_TYPE_NONE;
   1b218:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    reply->cipherIndex = 0;
   1b21c:	8665      	strh	r5, [r4, #50]	; 0x32
    reply->time = 0;
   1b21e:	6365      	str	r5, [r4, #52]	; 0x34
    reply->blockNumber = 0;
   1b220:	8765      	strh	r5, [r4, #58]	; 0x3a
    reply->blockNumberAck = 0;
   1b222:	87a5      	strh	r5, [r4, #60]	; 0x3c
    reply->serverAddress = 0;
   1b224:	64a5      	str	r5, [r4, #72]	; 0x48
    reply->clientAddress = 0;
}
   1b226:	bd38      	pop	{r3, r4, r5, pc}

0001b228 <reply_clear>:

void reply_clear(gxReplyData* reply)
{
    reply_clear2(reply, 1);
   1b228:	2101      	movs	r1, #1
   1b22a:	f7ff bfde 	b.w	1b1ea <reply_clear2>

0001b22e <var_init>:
{
   1b22e:	4603      	mov	r3, r0
    data->vt = DLMS_DATA_TYPE_NONE;
   1b230:	2000      	movs	r0, #0
   1b232:	7018      	strb	r0, [r3, #0]
    data->byteArr = NULL;
   1b234:	6098      	str	r0, [r3, #8]
}
   1b236:	4770      	bx	lr

0001b238 <var_getDate>:
{
   1b238:	b570      	push	{r4, r5, r6, lr}
   1b23a:	b086      	sub	sp, #24
    unsigned char month = 0xFF, day = 0xFF, dayOfWeek = 0xFF;
   1b23c:	23ff      	movs	r3, #255	; 0xff
   1b23e:	f88d 3014 	strb.w	r3, [sp, #20]
    time_fromUnixTime2(dateTime->value, &year, &month,
   1b242:	f10d 0315 	add.w	r3, sp, #21
   1b246:	9303      	str	r3, [sp, #12]
   1b248:	2300      	movs	r3, #0
   1b24a:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   1b24e:	4605      	mov	r5, r0
    time_fromUnixTime2(dateTime->value, &year, &month,
   1b250:	9300      	str	r3, [sp, #0]
    uint16_t year = 0xFFFF;
   1b252:	f64f 76ff 	movw	r6, #65535	; 0xffff
{
   1b256:	460c      	mov	r4, r1
    time_fromUnixTime2(dateTime->value, &year, &month,
   1b258:	ab05      	add	r3, sp, #20
   1b25a:	f10d 0213 	add.w	r2, sp, #19
   1b25e:	f10d 0116 	add.w	r1, sp, #22
   1b262:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0xFFFF;
   1b264:	f8ad 6016 	strh.w	r6, [sp, #22]
    unsigned char month = 0xFF, day = 0xFF, dayOfWeek = 0xFF;
   1b268:	f88d 6013 	strb.w	r6, [sp, #19]
   1b26c:	f88d 6015 	strb.w	r6, [sp, #21]
    time_fromUnixTime2(dateTime->value, &year, &month,
   1b270:	f7e7 f910 	bl	2494 <time_fromUnixTime2>
    if ((dateTime->skip & DATETIME_SKIPS_YEAR) != 0)
   1b274:	88eb      	ldrh	r3, [r5, #6]
   1b276:	07d8      	lsls	r0, r3, #31
        year = 0xFFFF;
   1b278:	bf48      	it	mi
   1b27a:	f8ad 6016 	strhmi.w	r6, [sp, #22]
    bb_setUInt16(ba, year);
   1b27e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1b282:	4620      	mov	r0, r4
   1b284:	f7f2 fb9d 	bl	d9c2 <bb_setUInt16>
    if ((dateTime->skip & DATETIME_SKIPS_MONTH) == 0)
   1b288:	88eb      	ldrh	r3, [r5, #6]
   1b28a:	0799      	lsls	r1, r3, #30
   1b28c:	d42d      	bmi.n	1b2ea <var_getDate+0xb2>
        if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
   1b28e:	7a2b      	ldrb	r3, [r5, #8]
   1b290:	07da      	lsls	r2, r3, #31
   1b292:	d526      	bpl.n	1b2e2 <var_getDate+0xaa>
            month = 0xFE;
   1b294:	23fe      	movs	r3, #254	; 0xfe
            month = 0xFD;
   1b296:	f88d 3013 	strb.w	r3, [sp, #19]
        bb_setUInt8(ba, month);
   1b29a:	f89d 1013 	ldrb.w	r1, [sp, #19]
        bb_setUInt8(ba, 0xFF);
   1b29e:	4620      	mov	r0, r4
   1b2a0:	f7f2 fb6d 	bl	d97e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_DAY) == 0)
   1b2a4:	88eb      	ldrh	r3, [r5, #6]
   1b2a6:	0758      	lsls	r0, r3, #29
   1b2a8:	d425      	bmi.n	1b2f6 <var_getDate+0xbe>
        if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
   1b2aa:	7a2b      	ldrb	r3, [r5, #8]
   1b2ac:	0759      	lsls	r1, r3, #29
   1b2ae:	d51e      	bpl.n	1b2ee <var_getDate+0xb6>
            day = 0xFE;
   1b2b0:	23fe      	movs	r3, #254	; 0xfe
            day = 0xFD;
   1b2b2:	f88d 3014 	strb.w	r3, [sp, #20]
        bb_setUInt8(ba, day);
   1b2b6:	f89d 1014 	ldrb.w	r1, [sp, #20]
        bb_setUInt8(ba, 0xFF);
   1b2ba:	4620      	mov	r0, r4
   1b2bc:	f7f2 fb5f 	bl	d97e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_DAYOFWEEK) == 0)
   1b2c0:	88eb      	ldrh	r3, [r5, #6]
   1b2c2:	071b      	lsls	r3, r3, #28
   1b2c4:	d419      	bmi.n	1b2fa <var_getDate+0xc2>
        if (dayOfWeek == 0)
   1b2c6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b2ca:	b913      	cbnz	r3, 1b2d2 <var_getDate+0x9a>
            dayOfWeek = 7;
   1b2cc:	2307      	movs	r3, #7
   1b2ce:	f88d 3015 	strb.w	r3, [sp, #21]
        bb_setUInt8(ba, dayOfWeek);
   1b2d2:	f89d 1015 	ldrb.w	r1, [sp, #21]
        bb_setUInt8(ba, 0xFF);
   1b2d6:	4620      	mov	r0, r4
   1b2d8:	f7f2 fb51 	bl	d97e <bb_setUInt8>
}
   1b2dc:	2000      	movs	r0, #0
   1b2de:	b006      	add	sp, #24
   1b2e0:	bd70      	pop	{r4, r5, r6, pc}
        else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
   1b2e2:	079e      	lsls	r6, r3, #30
   1b2e4:	d5d9      	bpl.n	1b29a <var_getDate+0x62>
            month = 0xFD;
   1b2e6:	23fd      	movs	r3, #253	; 0xfd
   1b2e8:	e7d5      	b.n	1b296 <var_getDate+0x5e>
        bb_setUInt8(ba, 0xFF);
   1b2ea:	21ff      	movs	r1, #255	; 0xff
   1b2ec:	e7d7      	b.n	1b29e <var_getDate+0x66>
        else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
   1b2ee:	071a      	lsls	r2, r3, #28
   1b2f0:	d5e1      	bpl.n	1b2b6 <var_getDate+0x7e>
            day = 0xFD;
   1b2f2:	23fd      	movs	r3, #253	; 0xfd
   1b2f4:	e7dd      	b.n	1b2b2 <var_getDate+0x7a>
        bb_setUInt8(ba, 0xFF);
   1b2f6:	21ff      	movs	r1, #255	; 0xff
   1b2f8:	e7df      	b.n	1b2ba <var_getDate+0x82>
        bb_setUInt8(ba, 0xFF);
   1b2fa:	21ff      	movs	r1, #255	; 0xff
   1b2fc:	e7eb      	b.n	1b2d6 <var_getDate+0x9e>

0001b2fe <var_getTime>:
{
   1b2fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b300:	b087      	sub	sp, #28
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   1b302:	f10d 0217 	add.w	r2, sp, #23
   1b306:	9202      	str	r2, [sp, #8]
   1b308:	f10d 0216 	add.w	r2, sp, #22
   1b30c:	2300      	movs	r3, #0
   1b30e:	9201      	str	r2, [sp, #4]
   1b310:	f10d 0215 	add.w	r2, sp, #21
   1b314:	9200      	str	r2, [sp, #0]
   1b316:	9303      	str	r3, [sp, #12]
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   1b318:	27ff      	movs	r7, #255	; 0xff
{
   1b31a:	4605      	mov	r5, r0
   1b31c:	460c      	mov	r4, r1
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   1b31e:	6800      	ldr	r0, [r0, #0]
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   1b320:	f88d 7015 	strb.w	r7, [sp, #21]
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   1b324:	461a      	mov	r2, r3
   1b326:	4619      	mov	r1, r3
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   1b328:	f88d 7016 	strb.w	r7, [sp, #22]
   1b32c:	f88d 7017 	strb.w	r7, [sp, #23]
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   1b330:	f7e7 f8b0 	bl	2494 <time_fromUnixTime2>
    if (ret != 0)
   1b334:	4606      	mov	r6, r0
   1b336:	bb10      	cbnz	r0, 1b37e <var_getTime+0x80>
    if ((dateTime->skip & DATETIME_SKIPS_HOUR) == 0)
   1b338:	88eb      	ldrh	r3, [r5, #6]
   1b33a:	06d9      	lsls	r1, r3, #27
        bb_setUInt8(ba, hour);
   1b33c:	bf54      	ite	pl
   1b33e:	f89d 1015 	ldrbpl.w	r1, [sp, #21]
        bb_setUInt8(ba, 0xFF);
   1b342:	4639      	movmi	r1, r7
   1b344:	4620      	mov	r0, r4
   1b346:	f7f2 fb1a 	bl	d97e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_MINUTE) == 0)
   1b34a:	88eb      	ldrh	r3, [r5, #6]
   1b34c:	069a      	lsls	r2, r3, #26
        bb_setUInt8(ba, minute);
   1b34e:	bf54      	ite	pl
   1b350:	f89d 1016 	ldrbpl.w	r1, [sp, #22]
        bb_setUInt8(ba, 0xFF);
   1b354:	21ff      	movmi	r1, #255	; 0xff
   1b356:	4620      	mov	r0, r4
   1b358:	f7f2 fb11 	bl	d97e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_SECOND) == 0)
   1b35c:	88eb      	ldrh	r3, [r5, #6]
   1b35e:	065b      	lsls	r3, r3, #25
        bb_setUInt8(ba, second);
   1b360:	bf54      	ite	pl
   1b362:	f89d 1017 	ldrbpl.w	r1, [sp, #23]
        bb_setUInt8(ba, 0xFF);
   1b366:	21ff      	movmi	r1, #255	; 0xff
   1b368:	4620      	mov	r0, r4
   1b36a:	f7f2 fb08 	bl	d97e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_MS) == 0)
   1b36e:	88e9      	ldrh	r1, [r5, #6]
   1b370:	f011 0180 	ands.w	r1, r1, #128	; 0x80
        bb_setUInt8(ba, 0xFF);
   1b374:	bf18      	it	ne
   1b376:	21ff      	movne	r1, #255	; 0xff
   1b378:	4620      	mov	r0, r4
   1b37a:	f7f2 fb00 	bl	d97e <bb_setUInt8>
}
   1b37e:	4630      	mov	r0, r6
   1b380:	b007      	add	sp, #28
   1b382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b384 <var_setOctetString>:
{
   1b384:	b530      	push	{r4, r5, lr}
    if (value->vt == DLMS_DATA_TYPE_STRING)
   1b386:	780b      	ldrb	r3, [r1, #0]
   1b388:	2b0a      	cmp	r3, #10
{
   1b38a:	b085      	sub	sp, #20
   1b38c:	4604      	mov	r4, r0
   1b38e:	460d      	mov	r5, r1
    if (value->vt == DLMS_DATA_TYPE_STRING)
   1b390:	d116      	bne.n	1b3c0 <var_setOctetString+0x3c>
        BYTE_BUFFER_INIT(&bb);
   1b392:	a801      	add	r0, sp, #4
   1b394:	f7f2 fa8a 	bl	d8ac <bb_init>
        bb_addHexString(&bb, (char*)value->strVal->data);
   1b398:	68ab      	ldr	r3, [r5, #8]
   1b39a:	a801      	add	r0, sp, #4
   1b39c:	6819      	ldr	r1, [r3, #0]
   1b39e:	f7f2 fd9e 	bl	dede <bb_addHexString>
        hlp_setObjectCount(bb.size, buff);
   1b3a2:	4621      	mov	r1, r4
   1b3a4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1b3a8:	f7ff fbe5 	bl	1ab76 <hlp_setObjectCount>
        bb_set2(buff, &bb, 0, bb.size);
   1b3ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1b3b0:	2200      	movs	r2, #0
   1b3b2:	a901      	add	r1, sp, #4
   1b3b4:	4620      	mov	r0, r4
   1b3b6:	f7f2 fbf7 	bl	dba8 <bb_set2>
    return 0;
   1b3ba:	2000      	movs	r0, #0
}
   1b3bc:	b005      	add	sp, #20
   1b3be:	bd30      	pop	{r4, r5, pc}
    else if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   1b3c0:	2b09      	cmp	r3, #9
   1b3c2:	d111      	bne.n	1b3e8 <var_setOctetString+0x64>
        if (value->byteArr == NULL)
   1b3c4:	688b      	ldr	r3, [r1, #8]
   1b3c6:	b923      	cbnz	r3, 1b3d2 <var_setOctetString+0x4e>
            hlp_setObjectCount(0, buff);
   1b3c8:	4621      	mov	r1, r4
   1b3ca:	2000      	movs	r0, #0
   1b3cc:	f7ff fbd3 	bl	1ab76 <hlp_setObjectCount>
   1b3d0:	e7f3      	b.n	1b3ba <var_setOctetString+0x36>
            hlp_setObjectCount(value->byteArr->size, buff);
   1b3d2:	4601      	mov	r1, r0
   1b3d4:	88d8      	ldrh	r0, [r3, #6]
   1b3d6:	f7ff fbce 	bl	1ab76 <hlp_setObjectCount>
            bb_set(buff, value->byteArr->data, value->byteArr->size);
   1b3da:	68ab      	ldr	r3, [r5, #8]
   1b3dc:	4620      	mov	r0, r4
   1b3de:	88da      	ldrh	r2, [r3, #6]
   1b3e0:	6819      	ldr	r1, [r3, #0]
   1b3e2:	f7f2 fbb2 	bl	db4a <bb_set>
   1b3e6:	e7e8      	b.n	1b3ba <var_setOctetString+0x36>
    else if (value->vt == DLMS_DATA_TYPE_NONE)
   1b3e8:	2b00      	cmp	r3, #0
   1b3ea:	d0ed      	beq.n	1b3c8 <var_setOctetString+0x44>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b3ec:	f44f 7081 	mov.w	r0, #258	; 0x102
   1b3f0:	e7e4      	b.n	1b3bc <var_setOctetString+0x38>

0001b3f2 <va_init>:
    arr->data = NULL;
   1b3f2:	2300      	movs	r3, #0
    arr->capacity = 0;
   1b3f4:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b3f8:	4770      	bx	lr

0001b3fa <va_capacity>:
    if (!va_isAttached(arr))
   1b3fa:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   1b3fe:	2a00      	cmp	r2, #0
{
   1b400:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1b402:	8883      	ldrh	r3, [r0, #4]
{
   1b404:	4604      	mov	r4, r0
   1b406:	460d      	mov	r5, r1
    if (!va_isAttached(arr))
   1b408:	db06      	blt.n	1b418 <va_capacity+0x1e>
        if (capacity == 0)
   1b40a:	b961      	cbnz	r1, 1b426 <va_capacity+0x2c>
            if (arr->capacity != 0)
   1b40c:	b11b      	cbz	r3, 1b416 <va_capacity+0x1c>
                gxfree(arr->data);
   1b40e:	6800      	ldr	r0, [r0, #0]
   1b410:	f7f1 fa30 	bl	c874 <free>
                arr->size = 0;
   1b414:	80e5      	strh	r5, [r4, #6]
        arr->capacity = capacity;
   1b416:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
   1b418:	88a3      	ldrh	r3, [r4, #4]
    if (va_getCapacity(arr) < capacity)
   1b41a:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1b41e:	429d      	cmp	r5, r3
   1b420:	d809      	bhi.n	1b436 <va_capacity+0x3c>
    return 0;
   1b422:	2000      	movs	r0, #0
   1b424:	e009      	b.n	1b43a <va_capacity+0x40>
            if (arr->capacity == 0)
   1b426:	0089      	lsls	r1, r1, #2
   1b428:	b943      	cbnz	r3, 1b43c <va_capacity+0x42>
                arr->data = (void**)gxmalloc(capacity * sizeof(dlmsVARIANT*));
   1b42a:	4608      	mov	r0, r1
   1b42c:	f7f1 fa1a 	bl	c864 <malloc>
   1b430:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
   1b432:	2800      	cmp	r0, #0
   1b434:	d1ef      	bne.n	1b416 <va_capacity+0x1c>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   1b436:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1b43a:	bd38      	pop	{r3, r4, r5, pc}
                void** tmp = (void**)gxrealloc(arr->data, capacity * sizeof(dlmsVARIANT*));
   1b43c:	6800      	ldr	r0, [r0, #0]
   1b43e:	f7f1 fac9 	bl	c9d4 <realloc>
                if (tmp == NULL)
   1b442:	2800      	cmp	r0, #0
   1b444:	d0f7      	beq.n	1b436 <va_capacity+0x3c>
                arr->data = tmp;
   1b446:	6020      	str	r0, [r4, #0]
   1b448:	e7e5      	b.n	1b416 <va_capacity+0x1c>

0001b44a <va_push>:
{
   1b44a:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1b44c:	8882      	ldrh	r2, [r0, #4]
{
   1b44e:	4604      	mov	r4, r0
    return (arr->capacity & 0x8000) == 0x8000;
   1b450:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
    if (!va_isAttached(arr))
   1b454:	2800      	cmp	r0, #0
{
   1b456:	460d      	mov	r5, r1
    if (!va_isAttached(arr))
   1b458:	db0a      	blt.n	1b470 <va_push+0x26>
   1b45a:	88e3      	ldrh	r3, [r4, #6]
        if (arr->size >= arr->capacity)
   1b45c:	429a      	cmp	r2, r3
   1b45e:	d807      	bhi.n	1b470 <va_push+0x26>
            arr->capacity += VARIANT_ARRAY_CAPACITY;
   1b460:	300a      	adds	r0, #10
   1b462:	b280      	uxth	r0, r0
   1b464:	80a0      	strh	r0, [r4, #4]
            if (arr->size == 0)
   1b466:	0080      	lsls	r0, r0, #2
   1b468:	b97b      	cbnz	r3, 1b48a <va_push+0x40>
                arr->data = (void**)gxmalloc(arr->capacity * sizeof(dlmsVARIANT*));
   1b46a:	f7f1 f9fb 	bl	c864 <malloc>
                arr->data = tmp;
   1b46e:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   1b470:	88a2      	ldrh	r2, [r4, #4]
    if (va_getCapacity(arr) <= arr->size)
   1b472:	88e3      	ldrh	r3, [r4, #6]
   1b474:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1b478:	4293      	cmp	r3, r2
   1b47a:	d20c      	bcs.n	1b496 <va_push+0x4c>
    p[arr->size] = item;
   1b47c:	6822      	ldr	r2, [r4, #0]
   1b47e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   1b482:	3301      	adds	r3, #1
   1b484:	80e3      	strh	r3, [r4, #6]
    return 0;
   1b486:	2000      	movs	r0, #0
   1b488:	e007      	b.n	1b49a <va_push+0x50>
                void** tmp = (void**)gxrealloc(arr->data, arr->capacity * sizeof(dlmsVARIANT*));
   1b48a:	4601      	mov	r1, r0
   1b48c:	6820      	ldr	r0, [r4, #0]
   1b48e:	f7f1 faa1 	bl	c9d4 <realloc>
                if (tmp == NULL)
   1b492:	2800      	cmp	r0, #0
   1b494:	d1eb      	bne.n	1b46e <va_push+0x24>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   1b496:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1b49a:	bd38      	pop	{r3, r4, r5, pc}

0001b49c <va_clear>:
    if (arr->data != NULL && !attached)
   1b49c:	6802      	ldr	r2, [r0, #0]
{
   1b49e:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1b4a0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
{
   1b4a4:	4604      	mov	r4, r0
    if (arr->data != NULL && !attached)
   1b4a6:	b1da      	cbz	r2, 1b4e0 <va_clear+0x44>
   1b4a8:	2b00      	cmp	r3, #0
   1b4aa:	da17      	bge.n	1b4dc <va_clear+0x40>
    arr->size = 0;
   1b4ac:	2300      	movs	r3, #0
   1b4ae:	80e3      	strh	r3, [r4, #6]
}
   1b4b0:	bd38      	pop	{r3, r4, r5, pc}
            var_clear((dlmsVARIANT*)arr->data[pos]);
   1b4b2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   1b4b6:	f000 f816 	bl	1b4e6 <var_clear>
            gxfree(arr->data[pos]);
   1b4ba:	6823      	ldr	r3, [r4, #0]
   1b4bc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1b4c0:	f7f1 f9d8 	bl	c874 <free>
        for (pos = 0; pos != arr->size; ++pos)
   1b4c4:	3501      	adds	r5, #1
   1b4c6:	88e3      	ldrh	r3, [r4, #6]
   1b4c8:	6820      	ldr	r0, [r4, #0]
   1b4ca:	42ab      	cmp	r3, r5
   1b4cc:	d1f1      	bne.n	1b4b2 <va_clear+0x16>
        gxfree(arr->data);
   1b4ce:	f7f1 f9d1 	bl	c874 <free>
        arr->data = NULL;
   1b4d2:	2300      	movs	r3, #0
   1b4d4:	6023      	str	r3, [r4, #0]
        arr->capacity = 0;
   1b4d6:	2300      	movs	r3, #0
   1b4d8:	80a3      	strh	r3, [r4, #4]
   1b4da:	e7e7      	b.n	1b4ac <va_clear+0x10>
        for (pos = 0; pos != arr->size; ++pos)
   1b4dc:	2500      	movs	r5, #0
   1b4de:	e7f2      	b.n	1b4c6 <va_clear+0x2a>
    if (!attached)
   1b4e0:	2b00      	cmp	r3, #0
   1b4e2:	daf8      	bge.n	1b4d6 <va_clear+0x3a>
   1b4e4:	e7e2      	b.n	1b4ac <va_clear+0x10>

0001b4e6 <var_clear>:
{
   1b4e6:	b538      	push	{r3, r4, r5, lr}
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1b4e8:	f990 2000 	ldrsb.w	r2, [r0]
   1b4ec:	7803      	ldrb	r3, [r0, #0]
   1b4ee:	2a00      	cmp	r2, #0
{
   1b4f0:	4604      	mov	r4, r0
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1b4f2:	db21      	blt.n	1b538 <var_clear+0x52>
    switch (data->vt)
   1b4f4:	3b01      	subs	r3, #1
   1b4f6:	2b1a      	cmp	r3, #26
   1b4f8:	d83e      	bhi.n	1b578 <var_clear+0x92>
   1b4fa:	e8df f003 	tbb	[pc, r3]
   1b4fe:	2828      	.short	0x2828
   1b500:	3d3d333d 	.word	0x3d3d333d
   1b504:	1f0e3d3d 	.word	0x1f0e3d3d
   1b508:	3d3d0e3d 	.word	0x3d3d0e3d
   1b50c:	3d3d3d3d 	.word	0x3d3d3d3d
   1b510:	3d3d3d28 	.word	0x3d3d3d28
   1b514:	39393d3d 	.word	0x39393d3d
   1b518:	39          	.byte	0x39
   1b519:	00          	.byte	0x00
        if (data->strUtfVal != NULL)
   1b51a:	6880      	ldr	r0, [r0, #8]
   1b51c:	b150      	cbz	r0, 1b534 <var_clear+0x4e>
            bb_clear(data->strUtfVal);
   1b51e:	f7f2 fb88 	bl	dc32 <bb_clear>
            if (!bb_isAttached(data->strUtfVal))
   1b522:	68a0      	ldr	r0, [r4, #8]
   1b524:	f7f2 f9b1 	bl	d88a <bb_isAttached>
   1b528:	4605      	mov	r5, r0
   1b52a:	b918      	cbnz	r0, 1b534 <var_clear+0x4e>
                gxfree(data->strUtfVal);
   1b52c:	68a0      	ldr	r0, [r4, #8]
   1b52e:	f7f1 f9a1 	bl	c874 <free>
                data->strUtfVal = NULL;
   1b532:	60a5      	str	r5, [r4, #8]
    data->vt = DLMS_DATA_TYPE_NONE;
   1b534:	2300      	movs	r3, #0
   1b536:	7023      	strb	r3, [r4, #0]
}
   1b538:	2000      	movs	r0, #0
   1b53a:	bd38      	pop	{r3, r4, r5, pc}
        if (data->strVal != NULL)
   1b53c:	6880      	ldr	r0, [r0, #8]
   1b53e:	2800      	cmp	r0, #0
   1b540:	d0f8      	beq.n	1b534 <var_clear+0x4e>
            bb_clear(data->strVal);
   1b542:	f7f2 fb76 	bl	dc32 <bb_clear>
            gxfree(data->bitArr);
   1b546:	68a0      	ldr	r0, [r4, #8]
   1b548:	f7f1 f994 	bl	c874 <free>
   1b54c:	e7f2      	b.n	1b534 <var_clear+0x4e>
        if (data->Arr != NULL)
   1b54e:	6880      	ldr	r0, [r0, #8]
   1b550:	2800      	cmp	r0, #0
   1b552:	d0ef      	beq.n	1b534 <var_clear+0x4e>
            va_clear(data->Arr);
   1b554:	f7ff ffa2 	bl	1b49c <va_clear>
            gxfree(data->Arr);
   1b558:	68a0      	ldr	r0, [r4, #8]
   1b55a:	f7f1 f98b 	bl	c874 <free>
            data->Arr = NULL;
   1b55e:	2300      	movs	r3, #0
   1b560:	60a3      	str	r3, [r4, #8]
   1b562:	e7e7      	b.n	1b534 <var_clear+0x4e>
        if (data->bitArr != NULL)
   1b564:	6880      	ldr	r0, [r0, #8]
   1b566:	2800      	cmp	r0, #0
   1b568:	d0e4      	beq.n	1b534 <var_clear+0x4e>
            ba_clear(data->bitArr);
   1b56a:	f7f2 f908 	bl	d77e <ba_clear>
   1b56e:	e7ea      	b.n	1b546 <var_clear+0x60>
        if (data->dateTime != NULL)
   1b570:	6880      	ldr	r0, [r0, #8]
   1b572:	b108      	cbz	r0, 1b578 <var_clear+0x92>
            gxfree(data->dateTime);
   1b574:	f7f1 f97e 	bl	c874 <free>
        data->llVal = 0;
   1b578:	2200      	movs	r2, #0
   1b57a:	2300      	movs	r3, #0
   1b57c:	e9c4 2302 	strd	r2, r3, [r4, #8]
        break;
   1b580:	e7d8      	b.n	1b534 <var_clear+0x4e>

0001b582 <var_setUInt8>:
{
   1b582:	b538      	push	{r3, r4, r5, lr}
   1b584:	4604      	mov	r4, r0
   1b586:	460d      	mov	r5, r1
    var_clear(data);
   1b588:	f7ff ffad 	bl	1b4e6 <var_clear>
    data->vt = DLMS_DATA_TYPE_UINT8;
   1b58c:	2311      	movs	r3, #17
   1b58e:	7023      	strb	r3, [r4, #0]
    data->bVal = value;
   1b590:	7225      	strb	r5, [r4, #8]
}
   1b592:	2000      	movs	r0, #0
   1b594:	bd38      	pop	{r3, r4, r5, pc}

0001b596 <var_addBytes>:
{
   1b596:	b570      	push	{r4, r5, r6, lr}
    if (data->vt != DLMS_DATA_TYPE_OCTET_STRING)
   1b598:	7803      	ldrb	r3, [r0, #0]
   1b59a:	2b09      	cmp	r3, #9
{
   1b59c:	4604      	mov	r4, r0
   1b59e:	460d      	mov	r5, r1
   1b5a0:	4616      	mov	r6, r2
    if (data->vt != DLMS_DATA_TYPE_OCTET_STRING)
   1b5a2:	d010      	beq.n	1b5c6 <var_addBytes+0x30>
        var_clear(data);
   1b5a4:	f7ff ff9f 	bl	1b4e6 <var_clear>
        data->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1b5a8:	200c      	movs	r0, #12
   1b5aa:	f7f1 f95b 	bl	c864 <malloc>
   1b5ae:	60a0      	str	r0, [r4, #8]
        BYTE_BUFFER_INIT(data->byteArr);
   1b5b0:	f7f2 f97c 	bl	d8ac <bb_init>
        data->vt = DLMS_DATA_TYPE_OCTET_STRING;
   1b5b4:	2309      	movs	r3, #9
   1b5b6:	7023      	strb	r3, [r4, #0]
    return bb_set(data->byteArr, value, count);
   1b5b8:	68a0      	ldr	r0, [r4, #8]
   1b5ba:	4632      	mov	r2, r6
   1b5bc:	4629      	mov	r1, r5
}
   1b5be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return bb_set(data->byteArr, value, count);
   1b5c2:	f7f2 bac2 	b.w	db4a <bb_set>
        bb_clear(data->byteArr);
   1b5c6:	6880      	ldr	r0, [r0, #8]
   1b5c8:	f7f2 fb33 	bl	dc32 <bb_clear>
   1b5cc:	e7f4      	b.n	1b5b8 <var_addBytes+0x22>

0001b5ce <va_attach2>:
    trg->capacity = src->capacity;
   1b5ce:	888b      	ldrh	r3, [r1, #4]
   1b5d0:	8083      	strh	r3, [r0, #4]
    trg->data = src->data;
   1b5d2:	680b      	ldr	r3, [r1, #0]
   1b5d4:	6003      	str	r3, [r0, #0]
    trg->size = src->size;
   1b5d6:	88cb      	ldrh	r3, [r1, #6]
   1b5d8:	80c3      	strh	r3, [r0, #6]
    src->data = NULL;
   1b5da:	2300      	movs	r3, #0
    src->size = src->capacity = 0;
   1b5dc:	e9c1 3300 	strd	r3, r3, [r1]
}
   1b5e0:	4770      	bx	lr

0001b5e2 <va_getByIndex>:
    if (index >= arr->size)
   1b5e2:	88c3      	ldrh	r3, [r0, #6]
   1b5e4:	428b      	cmp	r3, r1
    *item = p[index];
   1b5e6:	bfc1      	itttt	gt
   1b5e8:	6803      	ldrgt	r3, [r0, #0]
   1b5ea:	f853 3021 	ldrgt.w	r3, [r3, r1, lsl #2]
   1b5ee:	6013      	strgt	r3, [r2, #0]
    return DLMS_ERROR_CODE_OK;
   1b5f0:	2000      	movgt	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1b5f2:	bfd8      	it	le
   1b5f4:	f44f 7082 	movle.w	r0, #260	; 0x104
}
   1b5f8:	4770      	bx	lr

0001b5fa <var_getBytes3>:
    if ((type & DLMS_DATA_TYPE_BYREF) != 0)
   1b5fa:	f011 0f80 	tst.w	r1, #128	; 0x80
{
   1b5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b600:	4605      	mov	r5, r0
   1b602:	460f      	mov	r7, r1
   1b604:	4616      	mov	r6, r2
   1b606:	461c      	mov	r4, r3
    if ((type & DLMS_DATA_TYPE_BYREF) != 0)
   1b608:	d005      	beq.n	1b616 <var_getBytes3+0x1c>
        return var_getBytes3(data, type & ~DLMS_DATA_TYPE_BYREF, ba, addType);
   1b60a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1b60e:	f7ff fff4 	bl	1b5fa <var_getBytes3>
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1b612:	4604      	mov	r4, r0
   1b614:	e00e      	b.n	1b634 <var_getBytes3+0x3a>
    if (type == DLMS_DATA_TYPE_STRUCTURE ||
   1b616:	1e4b      	subs	r3, r1, #1
   1b618:	2b01      	cmp	r3, #1
   1b61a:	d822      	bhi.n	1b662 <var_getBytes3+0x68>
        if ((ret = bb_setUInt8(ba, type)) == 0 &&
   1b61c:	4610      	mov	r0, r2
   1b61e:	f7f2 f9ae 	bl	d97e <bb_setUInt8>
   1b622:	4604      	mov	r4, r0
   1b624:	b930      	cbnz	r0, 1b634 <var_getBytes3+0x3a>
            (ret = hlp_setObjectCount(data->Arr->size, ba)) == 0)
   1b626:	68ab      	ldr	r3, [r5, #8]
   1b628:	4631      	mov	r1, r6
   1b62a:	88d8      	ldrh	r0, [r3, #6]
   1b62c:	f7ff faa3 	bl	1ab76 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(ba, type)) == 0 &&
   1b630:	4604      	mov	r4, r0
   1b632:	b1a0      	cbz	r0, 1b65e <var_getBytes3+0x64>
}
   1b634:	4620      	mov	r0, r4
   1b636:	b003      	add	sp, #12
   1b638:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1b63a:	aa01      	add	r2, sp, #4
   1b63c:	4639      	mov	r1, r7
   1b63e:	f7ff ffd0 	bl	1b5e2 <va_getByIndex>
   1b642:	2800      	cmp	r0, #0
   1b644:	d1e5      	bne.n	1b612 <var_getBytes3+0x18>
                    (ret = var_getBytes(tmp, ba)) != DLMS_ERROR_CODE_OK)
   1b646:	9801      	ldr	r0, [sp, #4]
   1b648:	4631      	mov	r1, r6
   1b64a:	f000 f90a 	bl	1b862 <var_getBytes>
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1b64e:	2800      	cmp	r0, #0
   1b650:	d1df      	bne.n	1b612 <var_getBytes3+0x18>
            for (pos = 0; pos != data->Arr->size; ++pos)
   1b652:	3701      	adds	r7, #1
   1b654:	68a8      	ldr	r0, [r5, #8]
   1b656:	88c3      	ldrh	r3, [r0, #6]
   1b658:	42bb      	cmp	r3, r7
   1b65a:	d1ee      	bne.n	1b63a <var_getBytes3+0x40>
   1b65c:	e7ea      	b.n	1b634 <var_getBytes3+0x3a>
   1b65e:	4607      	mov	r7, r0
   1b660:	e7f8      	b.n	1b654 <var_getBytes3+0x5a>
    if (addType)
   1b662:	bb14      	cbnz	r4, 1b6aa <var_getBytes3+0xb0>
    switch (type)
   1b664:	2f1b      	cmp	r7, #27
   1b666:	d81d      	bhi.n	1b6a4 <var_getBytes3+0xaa>
   1b668:	e8df f017 	tbh	[pc, r7, lsl #1]
   1b66c:	001c00f6 	.word	0x001c00f6
   1b670:	0031001c 	.word	0x0031001c
   1b674:	006e00e5 	.word	0x006e00e5
   1b678:	001c006e 	.word	0x001c006e
   1b67c:	00b2001c 	.word	0x00b2001c
   1b680:	001c009e 	.word	0x001c009e
   1b684:	001c001c 	.word	0x001c001c
   1b688:	0056001c 	.word	0x0056001c
   1b68c:	00260061 	.word	0x00260061
   1b690:	001c003d 	.word	0x001c003d
   1b694:	00480078 	.word	0x00480078
   1b698:	00860026 	.word	0x00860026
   1b69c:	00bd0090 	.word	0x00bd0090
   1b6a0:	00db00cc 	.word	0x00db00cc
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1b6a4:	f44f 7481 	mov.w	r4, #258	; 0x102
   1b6a8:	e7c4      	b.n	1b634 <var_getBytes3+0x3a>
        if ((ret = bb_setUInt8(ba, type)) != 0)
   1b6aa:	4610      	mov	r0, r2
   1b6ac:	f7f2 f967 	bl	d97e <bb_setUInt8>
   1b6b0:	4604      	mov	r4, r0
   1b6b2:	2800      	cmp	r0, #0
   1b6b4:	d0d6      	beq.n	1b664 <var_getBytes3+0x6a>
   1b6b6:	e7bd      	b.n	1b634 <var_getBytes3+0x3a>
        ret = bb_setUInt8(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pbVal : data->bVal);
   1b6b8:	f995 3000 	ldrsb.w	r3, [r5]
   1b6bc:	2b00      	cmp	r3, #0
   1b6be:	bfb6      	itet	lt
   1b6c0:	68ab      	ldrlt	r3, [r5, #8]
   1b6c2:	7a29      	ldrbge	r1, [r5, #8]
   1b6c4:	7819      	ldrblt	r1, [r3, #0]
            ret = bb_setUInt8(ba, *data->pbVal == 0 ? 0 : 1);
   1b6c6:	4630      	mov	r0, r6
   1b6c8:	f7f2 f959 	bl	d97e <bb_setUInt8>
   1b6cc:	e7a1      	b.n	1b612 <var_getBytes3+0x18>
        if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1b6ce:	f995 3000 	ldrsb.w	r3, [r5]
   1b6d2:	2b00      	cmp	r3, #0
   1b6d4:	da05      	bge.n	1b6e2 <var_getBytes3+0xe8>
            ret = bb_setUInt8(ba, *data->pbVal == 0 ? 0 : 1);
   1b6d6:	68ab      	ldr	r3, [r5, #8]
   1b6d8:	7819      	ldrb	r1, [r3, #0]
   1b6da:	3900      	subs	r1, #0
   1b6dc:	bf18      	it	ne
   1b6de:	2101      	movne	r1, #1
   1b6e0:	e7f1      	b.n	1b6c6 <var_getBytes3+0xcc>
            ret = bb_setUInt8(ba, data->bVal == 0 ? 0 : 1);
   1b6e2:	7a29      	ldrb	r1, [r5, #8]
   1b6e4:	e7f9      	b.n	1b6da <var_getBytes3+0xe0>
        ret = bb_setUInt16(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->puiVal : data->uiVal);
   1b6e6:	f995 3000 	ldrsb.w	r3, [r5]
   1b6ea:	2b00      	cmp	r3, #0
   1b6ec:	bfb6      	itet	lt
   1b6ee:	68ab      	ldrlt	r3, [r5, #8]
   1b6f0:	8929      	ldrhge	r1, [r5, #8]
   1b6f2:	8819      	ldrhlt	r1, [r3, #0]
   1b6f4:	4630      	mov	r0, r6
   1b6f6:	f7f2 f964 	bl	d9c2 <bb_setUInt16>
   1b6fa:	e78a      	b.n	1b612 <var_getBytes3+0x18>
        ret = bb_setUInt64(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pullVal : data->ullVal);
   1b6fc:	f995 3000 	ldrsb.w	r3, [r5]
   1b700:	2b00      	cmp	r3, #0
   1b702:	da06      	bge.n	1b712 <var_getBytes3+0x118>
   1b704:	68ab      	ldr	r3, [r5, #8]
   1b706:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b70a:	4630      	mov	r0, r6
   1b70c:	f7f2 f986 	bl	da1c <bb_setUInt64>
   1b710:	e77f      	b.n	1b612 <var_getBytes3+0x18>
   1b712:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1b716:	e7f8      	b.n	1b70a <var_getBytes3+0x110>
        ret = bb_setInt8(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pcVal : data->cVal);
   1b718:	f995 3000 	ldrsb.w	r3, [r5]
   1b71c:	2b00      	cmp	r3, #0
   1b71e:	bfb6      	itet	lt
   1b720:	68ab      	ldrlt	r3, [r5, #8]
   1b722:	7a29      	ldrbge	r1, [r5, #8]
   1b724:	7819      	ldrblt	r1, [r3, #0]
   1b726:	4630      	mov	r0, r6
   1b728:	f7f2 fa06 	bl	db38 <bb_setInt8>
   1b72c:	e771      	b.n	1b612 <var_getBytes3+0x18>
        ret = bb_setInt16(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->puiVal : data->uiVal);
   1b72e:	f995 3000 	ldrsb.w	r3, [r5]
   1b732:	2b00      	cmp	r3, #0
   1b734:	bfb6      	itet	lt
   1b736:	68ab      	ldrlt	r3, [r5, #8]
   1b738:	f9b5 1008 	ldrshge.w	r1, [r5, #8]
   1b73c:	f9b3 1000 	ldrshlt.w	r1, [r3]
   1b740:	4630      	mov	r0, r6
   1b742:	f7f2 f9fb 	bl	db3c <bb_setInt16>
   1b746:	e764      	b.n	1b612 <var_getBytes3+0x18>
        ret = bb_setUInt32(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->plVal : data->lVal);
   1b748:	f995 3000 	ldrsb.w	r3, [r5]
   1b74c:	68a9      	ldr	r1, [r5, #8]
   1b74e:	2b00      	cmp	r3, #0
   1b750:	bfb8      	it	lt
   1b752:	6809      	ldrlt	r1, [r1, #0]
   1b754:	4630      	mov	r0, r6
   1b756:	f7f2 f956 	bl	da06 <bb_setUInt32>
   1b75a:	e75a      	b.n	1b612 <var_getBytes3+0x18>
        ret = bb_setInt64(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pllVal : data->llVal);
   1b75c:	f995 3000 	ldrsb.w	r3, [r5]
   1b760:	2b00      	cmp	r3, #0
   1b762:	da06      	bge.n	1b772 <var_getBytes3+0x178>
   1b764:	68ab      	ldr	r3, [r5, #8]
   1b766:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b76a:	4630      	mov	r0, r6
   1b76c:	f7f2 f9eb 	bl	db46 <bb_setInt64>
   1b770:	e74f      	b.n	1b612 <var_getBytes3+0x18>
   1b772:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1b776:	e7f8      	b.n	1b76a <var_getBytes3+0x170>
        ret = bb_setFloat(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pfltVal : data->fltVal);
   1b778:	f995 3000 	ldrsb.w	r3, [r5]
   1b77c:	68a9      	ldr	r1, [r5, #8]
   1b77e:	2b00      	cmp	r3, #0
   1b780:	bfb8      	it	lt
   1b782:	6809      	ldrlt	r1, [r1, #0]
   1b784:	4630      	mov	r0, r6
   1b786:	f7f2 f97b 	bl	da80 <bb_setFloat>
   1b78a:	e742      	b.n	1b612 <var_getBytes3+0x18>
        ret = bb_setDouble(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pdblVal : data->dblVal);
   1b78c:	f995 3000 	ldrsb.w	r3, [r5]
   1b790:	2b00      	cmp	r3, #0
   1b792:	da06      	bge.n	1b7a2 <var_getBytes3+0x1a8>
   1b794:	68ab      	ldr	r3, [r5, #8]
   1b796:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b79a:	4630      	mov	r0, r6
   1b79c:	f7f2 f992 	bl	dac4 <bb_setDouble>
   1b7a0:	e737      	b.n	1b612 <var_getBytes3+0x18>
   1b7a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1b7a6:	e7f8      	b.n	1b79a <var_getBytes3+0x1a0>
        if (data->strVal == NULL)
   1b7a8:	68a8      	ldr	r0, [r5, #8]
            ret = hlp_setObjectCount(0, ba);
   1b7aa:	4631      	mov	r1, r6
        if (data->strVal == NULL)
   1b7ac:	b910      	cbnz	r0, 1b7b4 <var_getBytes3+0x1ba>
            ret = hlp_setObjectCount(0, ba);
   1b7ae:	f7ff f9e2 	bl	1ab76 <hlp_setObjectCount>
   1b7b2:	e72e      	b.n	1b612 <var_getBytes3+0x18>
            if ((ret = hlp_setObjectCount(data->strVal->size, ba)) == 0)
   1b7b4:	88c0      	ldrh	r0, [r0, #6]
   1b7b6:	f7ff f9de 	bl	1ab76 <hlp_setObjectCount>
   1b7ba:	4604      	mov	r4, r0
   1b7bc:	2800      	cmp	r0, #0
   1b7be:	f47f af39 	bne.w	1b634 <var_getBytes3+0x3a>
                ret = bb_set(ba, data->strVal->data, data->strVal->size);
   1b7c2:	68ab      	ldr	r3, [r5, #8]
   1b7c4:	88da      	ldrh	r2, [r3, #6]
   1b7c6:	6819      	ldr	r1, [r3, #0]
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1b7c8:	4630      	mov	r0, r6
   1b7ca:	f7f2 f9be 	bl	db4a <bb_set>
   1b7ce:	e720      	b.n	1b612 <var_getBytes3+0x18>
        if (data->vt == DLMS_DATA_TYPE_DATETIME)
   1b7d0:	782b      	ldrb	r3, [r5, #0]
   1b7d2:	2b19      	cmp	r3, #25
   1b7d4:	d10c      	bne.n	1b7f0 <var_getBytes3+0x1f6>
            if ((ret = bb_setUInt8(ba, 12)) == 0)
   1b7d6:	210c      	movs	r1, #12
   1b7d8:	4630      	mov	r0, r6
   1b7da:	f7f2 f8d0 	bl	d97e <bb_setUInt8>
   1b7de:	4604      	mov	r4, r0
   1b7e0:	2800      	cmp	r0, #0
   1b7e2:	f47f af27 	bne.w	1b634 <var_getBytes3+0x3a>
        ret = var_getDateTime2(data->dateTime, ba);
   1b7e6:	68a8      	ldr	r0, [r5, #8]
   1b7e8:	4631      	mov	r1, r6
   1b7ea:	f7e8 fe2f 	bl	444c <var_getDateTime2>
   1b7ee:	e710      	b.n	1b612 <var_getBytes3+0x18>
        else if (data->vt == DLMS_DATA_TYPE_DATE)
   1b7f0:	2b1a      	cmp	r3, #26
   1b7f2:	d10c      	bne.n	1b80e <var_getBytes3+0x214>
            if ((ret = bb_setUInt8(ba, 5)) == 0)
   1b7f4:	2105      	movs	r1, #5
   1b7f6:	4630      	mov	r0, r6
   1b7f8:	f7f2 f8c1 	bl	d97e <bb_setUInt8>
   1b7fc:	4604      	mov	r4, r0
   1b7fe:	2800      	cmp	r0, #0
   1b800:	f47f af18 	bne.w	1b634 <var_getBytes3+0x3a>
        ret = var_getDate(data->dateTime, ba);
   1b804:	68a8      	ldr	r0, [r5, #8]
   1b806:	4631      	mov	r1, r6
   1b808:	f7ff fd16 	bl	1b238 <var_getDate>
   1b80c:	e701      	b.n	1b612 <var_getBytes3+0x18>
        else if (data->vt == DLMS_DATA_TYPE_TIME)
   1b80e:	2b1b      	cmp	r3, #27
   1b810:	d10c      	bne.n	1b82c <var_getBytes3+0x232>
            if ((ret = bb_setUInt8(ba, 4)) == 0)
   1b812:	2104      	movs	r1, #4
   1b814:	4630      	mov	r0, r6
   1b816:	f7f2 f8b2 	bl	d97e <bb_setUInt8>
   1b81a:	4604      	mov	r4, r0
   1b81c:	2800      	cmp	r0, #0
   1b81e:	f47f af09 	bne.w	1b634 <var_getBytes3+0x3a>
        ret = var_getTime(data->dateTime, ba);
   1b822:	68a8      	ldr	r0, [r5, #8]
   1b824:	4631      	mov	r1, r6
   1b826:	f7ff fd6a 	bl	1b2fe <var_getTime>
   1b82a:	e6f2      	b.n	1b612 <var_getBytes3+0x18>
            ret = var_setOctetString(ba, data);
   1b82c:	4629      	mov	r1, r5
   1b82e:	4630      	mov	r0, r6
   1b830:	f7ff fda8 	bl	1b384 <var_setOctetString>
   1b834:	e6ed      	b.n	1b612 <var_getBytes3+0x18>
        if ((ret = hlp_setObjectCount(data->bitArr->size, ba)) == 0)
   1b836:	68ab      	ldr	r3, [r5, #8]
   1b838:	4631      	mov	r1, r6
   1b83a:	88d8      	ldrh	r0, [r3, #6]
   1b83c:	f7ff f99b 	bl	1ab76 <hlp_setObjectCount>
   1b840:	4604      	mov	r4, r0
   1b842:	2800      	cmp	r0, #0
   1b844:	f47f aef6 	bne.w	1b634 <var_getBytes3+0x3a>
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1b848:	68ab      	ldr	r3, [r5, #8]
   1b84a:	88d8      	ldrh	r0, [r3, #6]
   1b84c:	681c      	ldr	r4, [r3, #0]
   1b84e:	f7e5 fe95 	bl	157c <ba_getByteCount>
   1b852:	4621      	mov	r1, r4
   1b854:	4602      	mov	r2, r0
   1b856:	e7b7      	b.n	1b7c8 <var_getBytes3+0x1ce>
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1b858:	2400      	movs	r4, #0
   1b85a:	e6eb      	b.n	1b634 <var_getBytes3+0x3a>

0001b85c <var_getBytes2>:
    return var_getBytes3(data, type, ba, 1);
   1b85c:	2301      	movs	r3, #1
   1b85e:	f7ff becc 	b.w	1b5fa <var_getBytes3>

0001b862 <var_getBytes>:
{
   1b862:	460a      	mov	r2, r1
    return var_getBytes2(data, data->vt, ba);
   1b864:	7801      	ldrb	r1, [r0, #0]
   1b866:	f7ff bff9 	b.w	1b85c <var_getBytes2>

0001b86a <var_setDateTime>:

#ifndef DLMS_IGNORE_MALLOC
int var_setDateTime(dlmsVARIANT* target, gxtime* value)
{
   1b86a:	b570      	push	{r4, r5, r6, lr}
   1b86c:	4605      	mov	r5, r0
   1b86e:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1b870:	f7ff fe39 	bl	1b4e6 <var_clear>
   1b874:	4604      	mov	r4, r0
   1b876:	b940      	cbnz	r0, 1b88a <var_setDateTime+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1b878:	200c      	movs	r0, #12
   1b87a:	f7f0 fff3 	bl	c864 <malloc>
        time_copy(target->dateTime, value);
   1b87e:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1b880:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1b882:	f7f3 f92c 	bl	eade <time_copy>
        target->vt = DLMS_DATA_TYPE_DATETIME;
   1b886:	2319      	movs	r3, #25
   1b888:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1b88a:	4620      	mov	r0, r4
   1b88c:	bd70      	pop	{r4, r5, r6, pc}

0001b88e <var_setDate>:

int var_setDate(dlmsVARIANT* target, gxtime* value)
{
   1b88e:	b570      	push	{r4, r5, r6, lr}
   1b890:	4605      	mov	r5, r0
   1b892:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1b894:	f7ff fe27 	bl	1b4e6 <var_clear>
   1b898:	4604      	mov	r4, r0
   1b89a:	b940      	cbnz	r0, 1b8ae <var_setDate+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1b89c:	200c      	movs	r0, #12
   1b89e:	f7f0 ffe1 	bl	c864 <malloc>
        time_copy(target->dateTime, value);
   1b8a2:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1b8a4:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1b8a6:	f7f3 f91a 	bl	eade <time_copy>
        target->vt = DLMS_DATA_TYPE_DATE;
   1b8aa:	231a      	movs	r3, #26
   1b8ac:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1b8ae:	4620      	mov	r0, r4
   1b8b0:	bd70      	pop	{r4, r5, r6, pc}

0001b8b2 <var_setTime>:

int var_setTime(dlmsVARIANT* target, gxtime* value)
{
   1b8b2:	b570      	push	{r4, r5, r6, lr}
   1b8b4:	4605      	mov	r5, r0
   1b8b6:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1b8b8:	f7ff fe15 	bl	1b4e6 <var_clear>
   1b8bc:	4604      	mov	r4, r0
   1b8be:	b940      	cbnz	r0, 1b8d2 <var_setTime+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1b8c0:	200c      	movs	r0, #12
   1b8c2:	f7f0 ffcf 	bl	c864 <malloc>
        time_copy(target->dateTime, value);
   1b8c6:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1b8c8:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1b8ca:	f7f3 f908 	bl	eade <time_copy>
        target->vt = DLMS_DATA_TYPE_TIME;
   1b8ce:	231b      	movs	r3, #27
   1b8d0:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1b8d2:	4620      	mov	r0, r4
   1b8d4:	bd70      	pop	{r4, r5, r6, pc}

0001b8d6 <var_toInteger>:
{
   1b8d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1b8d8:	f990 2000 	ldrsb.w	r2, [r0]
   1b8dc:	7803      	ldrb	r3, [r0, #0]
   1b8de:	2a00      	cmp	r2, #0
   1b8e0:	da0d      	bge.n	1b8fe <var_toInteger+0x28>
        if ((ret = var_copy(&tmp, data)) == 0)
   1b8e2:	4601      	mov	r1, r0
   1b8e4:	4668      	mov	r0, sp
   1b8e6:	f7e8 fe5d 	bl	45a4 <var_copy>
   1b8ea:	b928      	cbnz	r0, 1b8f8 <var_toInteger+0x22>
            ret = var_toInteger(&tmp);
   1b8ec:	4668      	mov	r0, sp
   1b8ee:	f7ff fff2 	bl	1b8d6 <var_toInteger>
}
   1b8f2:	b005      	add	sp, #20
   1b8f4:	f85d fb04 	ldr.w	pc, [sp], #4
            ret = -1;
   1b8f8:	f04f 30ff 	mov.w	r0, #4294967295
        return ret;
   1b8fc:	e7f9      	b.n	1b8f2 <var_toInteger+0x1c>
    switch (data->vt)
   1b8fe:	3b03      	subs	r3, #3
   1b900:	2b15      	cmp	r3, #21
   1b902:	d830      	bhi.n	1b966 <var_toInteger+0x90>
   1b904:	e8df f003 	tbb	[pc, r3]
   1b908:	1a1a290b 	.word	0x1a1a290b
   1b90c:	252f2f2f 	.word	0x252f2f2f
   1b910:	2f2f2f2f 	.word	0x2f2f2f2f
   1b914:	18161310 	.word	0x18161310
   1b918:	161a1a2f 	.word	0x161a1a2f
   1b91c:	201c      	.short	0x201c
        ret = data->boolVal ? 1 : 0;
   1b91e:	7a00      	ldrb	r0, [r0, #8]
   1b920:	3800      	subs	r0, #0
   1b922:	bf18      	it	ne
   1b924:	2001      	movne	r0, #1
        break;
   1b926:	e7e4      	b.n	1b8f2 <var_toInteger+0x1c>
        ret = data->cVal;
   1b928:	f990 0008 	ldrsb.w	r0, [r0, #8]
        break;
   1b92c:	e7e1      	b.n	1b8f2 <var_toInteger+0x1c>
        ret = data->iVal;
   1b92e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
        break;
   1b932:	e7de      	b.n	1b8f2 <var_toInteger+0x1c>
        ret = data->bVal;
   1b934:	7a00      	ldrb	r0, [r0, #8]
        break;
   1b936:	e7dc      	b.n	1b8f2 <var_toInteger+0x1c>
        ret = data->uiVal;
   1b938:	8900      	ldrh	r0, [r0, #8]
        break;
   1b93a:	e7da      	b.n	1b8f2 <var_toInteger+0x1c>
        ret = (int)data->ullVal;
   1b93c:	6880      	ldr	r0, [r0, #8]
        break;
   1b93e:	e7d8      	b.n	1b8f2 <var_toInteger+0x1c>
        ret = (int)data->fltVal;
   1b940:	6880      	ldr	r0, [r0, #8]
   1b942:	f7e5 f843 	bl	9cc <__aeabi_f2iz>
        break;
   1b946:	e7d4      	b.n	1b8f2 <var_toInteger+0x1c>
        ret = (int)data->dblVal;
   1b948:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1b94c:	f7e4 fff6 	bl	93c <__aeabi_d2iz>
        break;
   1b950:	e7cf      	b.n	1b8f2 <var_toInteger+0x1c>
        ret = hlp_stringToInt((const char*)data->strVal);
   1b952:	6880      	ldr	r0, [r0, #8]
   1b954:	f7ff f9de 	bl	1ad14 <hlp_stringToInt>
        break;
   1b958:	e7cb      	b.n	1b8f2 <var_toInteger+0x1c>
        ba_toInteger(data->bitArr, &value);
   1b95a:	6880      	ldr	r0, [r0, #8]
   1b95c:	4669      	mov	r1, sp
   1b95e:	f7f1 ff59 	bl	d814 <ba_toInteger>
        ret = (int)value;
   1b962:	9800      	ldr	r0, [sp, #0]
    break;
   1b964:	e7c5      	b.n	1b8f2 <var_toInteger+0x1c>
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1b966:	2000      	movs	r0, #0
   1b968:	e7c3      	b.n	1b8f2 <var_toInteger+0x1c>

0001b96a <var_toString>:
{
   1b96a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (item->vt == DLMS_DATA_TYPE_ARRAY || item->vt == DLMS_DATA_TYPE_STRUCTURE)
   1b96c:	7803      	ldrb	r3, [r0, #0]
   1b96e:	1e5a      	subs	r2, r3, #1
   1b970:	2a01      	cmp	r2, #1
{
   1b972:	b085      	sub	sp, #20
   1b974:	4606      	mov	r6, r0
   1b976:	460d      	mov	r5, r1
    if (item->vt == DLMS_DATA_TYPE_ARRAY || item->vt == DLMS_DATA_TYPE_STRUCTURE)
   1b978:	d831      	bhi.n	1b9de <var_toString+0x74>
        bb_setInt8(value, item->vt == DLMS_DATA_TYPE_ARRAY ? '{' : '[');
   1b97a:	2b01      	cmp	r3, #1
   1b97c:	bf0c      	ite	eq
   1b97e:	217b      	moveq	r1, #123	; 0x7b
   1b980:	215b      	movne	r1, #91	; 0x5b
   1b982:	4628      	mov	r0, r5
   1b984:	f7f2 f8d8 	bl	db38 <bb_setInt8>
   1b988:	2700      	movs	r7, #0
        for (pos = 0; pos != item->Arr->size; ++pos)
   1b98a:	68b2      	ldr	r2, [r6, #8]
   1b98c:	88d2      	ldrh	r2, [r2, #6]
   1b98e:	b2bb      	uxth	r3, r7
   1b990:	429a      	cmp	r2, r3
   1b992:	d101      	bne.n	1b998 <var_toString+0x2e>
   1b994:	2400      	movs	r4, #0
   1b996:	e017      	b.n	1b9c8 <var_toString+0x5e>
            if (pos != 0)
   1b998:	b13b      	cbz	r3, 1b9aa <var_toString+0x40>
                bb_setInt8(value, ',');
   1b99a:	212c      	movs	r1, #44	; 0x2c
   1b99c:	4628      	mov	r0, r5
   1b99e:	f7f2 f8cb 	bl	db38 <bb_setInt8>
                bb_setInt8(value, ' ');
   1b9a2:	2120      	movs	r1, #32
   1b9a4:	4628      	mov	r0, r5
   1b9a6:	f7f2 f8c7 	bl	db38 <bb_setInt8>
            if ((ret = va_getByIndex(item->Arr, pos, &it)) != 0 ||
   1b9aa:	68b0      	ldr	r0, [r6, #8]
   1b9ac:	466a      	mov	r2, sp
   1b9ae:	b2b9      	uxth	r1, r7
   1b9b0:	f7ff fe17 	bl	1b5e2 <va_getByIndex>
   1b9b4:	4604      	mov	r4, r0
   1b9b6:	b938      	cbnz	r0, 1b9c8 <var_toString+0x5e>
                (ret = var_toString(it, value)) != 0)
   1b9b8:	9800      	ldr	r0, [sp, #0]
   1b9ba:	4629      	mov	r1, r5
   1b9bc:	f7ff ffd5 	bl	1b96a <var_toString>
   1b9c0:	3701      	adds	r7, #1
            if ((ret = va_getByIndex(item->Arr, pos, &it)) != 0 ||
   1b9c2:	4604      	mov	r4, r0
   1b9c4:	2800      	cmp	r0, #0
   1b9c6:	d0e0      	beq.n	1b98a <var_toString+0x20>
        bb_setInt8(value, item->vt == DLMS_DATA_TYPE_ARRAY ? '}' : ']');
   1b9c8:	7833      	ldrb	r3, [r6, #0]
   1b9ca:	2b01      	cmp	r3, #1
   1b9cc:	bf0c      	ite	eq
   1b9ce:	217d      	moveq	r1, #125	; 0x7d
   1b9d0:	215d      	movne	r1, #93	; 0x5d
   1b9d2:	4628      	mov	r0, r5
   1b9d4:	f7f2 f8b0 	bl	db38 <bb_setInt8>
}
   1b9d8:	4620      	mov	r0, r4
   1b9da:	b005      	add	sp, #20
   1b9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    data->vt = DLMS_DATA_TYPE_NONE;
   1b9de:	2300      	movs	r3, #0
        ret = var_copy(&tmp, item);
   1b9e0:	4601      	mov	r1, r0
   1b9e2:	4668      	mov	r0, sp
    data->vt = DLMS_DATA_TYPE_NONE;
   1b9e4:	f88d 3000 	strb.w	r3, [sp]
    data->byteArr = NULL;
   1b9e8:	9302      	str	r3, [sp, #8]
        ret = var_copy(&tmp, item);
   1b9ea:	f7e8 fddb 	bl	45a4 <var_copy>
        if (ret == 0)
   1b9ee:	4604      	mov	r4, r0
   1b9f0:	b960      	cbnz	r0, 1ba0c <var_toString+0xa2>
            ret = var_changeType(&tmp, DLMS_DATA_TYPE_STRING);
   1b9f2:	210a      	movs	r1, #10
   1b9f4:	4668      	mov	r0, sp
   1b9f6:	f7e9 f887 	bl	4b08 <var_changeType>
            if (ret == 0 && tmp.strVal != NULL)
   1b9fa:	4604      	mov	r4, r0
   1b9fc:	b930      	cbnz	r0, 1ba0c <var_toString+0xa2>
   1b9fe:	9b02      	ldr	r3, [sp, #8]
   1ba00:	b123      	cbz	r3, 1ba0c <var_toString+0xa2>
                bb_set(value, tmp.strVal->data, tmp.strVal->size);
   1ba02:	88da      	ldrh	r2, [r3, #6]
   1ba04:	6819      	ldr	r1, [r3, #0]
   1ba06:	4628      	mov	r0, r5
   1ba08:	f7f2 f89f 	bl	db4a <bb_set>
        var_clear(&tmp);
   1ba0c:	4668      	mov	r0, sp
   1ba0e:	f7ff fd6a 	bl	1b4e6 <var_clear>
    return ret;
   1ba12:	e7e1      	b.n	1b9d8 <var_toString+0x6e>

0001ba14 <var_attach>:

#ifndef DLMS_IGNORE_MALLOC
void var_attach(
    dlmsVARIANT* target,
    gxByteBuffer* source)
{
   1ba14:	b538      	push	{r3, r4, r5, lr}
   1ba16:	4605      	mov	r5, r0
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1ba18:	200c      	movs	r0, #12
{
   1ba1a:	460c      	mov	r4, r1
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1ba1c:	f7f0 ff22 	bl	c864 <malloc>
    target->byteArr->data = source->data;
    target->byteArr->capacity = source->capacity;
    target->byteArr->size = source->size;
    target->byteArr->position = source->position;
   1ba20:	8923      	ldrh	r3, [r4, #8]
    target->byteArr->data = source->data;
   1ba22:	6822      	ldr	r2, [r4, #0]
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1ba24:	60a8      	str	r0, [r5, #8]
    target->byteArr->position = source->position;
   1ba26:	8103      	strh	r3, [r0, #8]
    source->data = 0;
   1ba28:	2300      	movs	r3, #0
    source->size = source->position = source->capacity = 0;
   1ba2a:	8123      	strh	r3, [r4, #8]
    target->byteArr->data = source->data;
   1ba2c:	6002      	str	r2, [r0, #0]
    target->byteArr->capacity = source->capacity;
   1ba2e:	6862      	ldr	r2, [r4, #4]
   1ba30:	6042      	str	r2, [r0, #4]
    source->size = source->position = source->capacity = 0;
   1ba32:	e9c4 3300 	strd	r3, r3, [r4]
    target->vt = DLMS_DATA_TYPE_OCTET_STRING;
   1ba36:	2309      	movs	r3, #9
   1ba38:	702b      	strb	r3, [r5, #0]
}
   1ba3a:	bd38      	pop	{r3, r4, r5, pc}

0001ba3c <crc16_ccitt>:

	return crc;
}

uint16_t crc16_ccitt(uint16_t seed, const uint8_t *src, size_t len)
{
   1ba3c:	b510      	push	{r4, lr}
   1ba3e:	440a      	add	r2, r1
	for (; len > 0; len--) {
   1ba40:	428a      	cmp	r2, r1
   1ba42:	d100      	bne.n	1ba46 <crc16_ccitt+0xa>
		f = e ^ (e << 4);
		seed = (seed >> 8) ^ ((uint16_t)f << 8) ^ ((uint16_t)f << 3) ^ ((uint16_t)f >> 4);
	}

	return seed;
}
   1ba44:	bd10      	pop	{r4, pc}
		e = seed ^ *src++;
   1ba46:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ba4a:	4043      	eors	r3, r0
		f = e ^ (e << 4);
   1ba4c:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
   1ba50:	b2db      	uxtb	r3, r3
		seed = (seed >> 8) ^ ((uint16_t)f << 8) ^ ((uint16_t)f << 3) ^ ((uint16_t)f >> 4);
   1ba52:	091c      	lsrs	r4, r3, #4
   1ba54:	ea84 2010 	eor.w	r0, r4, r0, lsr #8
   1ba58:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1ba5c:	ea80 00c3 	eor.w	r0, r0, r3, lsl #3
	for (; len > 0; len--) {
   1ba60:	e7ee      	b.n	1ba40 <crc16_ccitt+0x4>

0001ba62 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1ba62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1ba66:	b2db      	uxtb	r3, r3
   1ba68:	2b09      	cmp	r3, #9
   1ba6a:	d802      	bhi.n	1ba72 <char2hex+0x10>
		*x = c - '0';
   1ba6c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1ba6e:	2000      	movs	r0, #0
   1ba70:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1ba72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1ba76:	2b05      	cmp	r3, #5
   1ba78:	d802      	bhi.n	1ba80 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1ba7a:	3857      	subs	r0, #87	; 0x57
   1ba7c:	7008      	strb	r0, [r1, #0]
   1ba7e:	e7f6      	b.n	1ba6e <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1ba80:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1ba84:	2b05      	cmp	r3, #5
   1ba86:	d801      	bhi.n	1ba8c <char2hex+0x2a>
		*x = c - 'A' + 10;
   1ba88:	3837      	subs	r0, #55	; 0x37
   1ba8a:	e7f7      	b.n	1ba7c <char2hex+0x1a>
		return -EINVAL;
   1ba8c:	f06f 0015 	mvn.w	r0, #21
}
   1ba90:	4770      	bx	lr

0001ba92 <hex2char>:

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   1ba92:	2809      	cmp	r0, #9
   1ba94:	d803      	bhi.n	1ba9e <hex2char+0xc>
		*c = x + '0';
   1ba96:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   1ba98:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   1ba9a:	2000      	movs	r0, #0
   1ba9c:	4770      	bx	lr
	} else  if (x <= 15) {
   1ba9e:	280f      	cmp	r0, #15
   1baa0:	d801      	bhi.n	1baa6 <hex2char+0x14>
		*c = x - 10 + 'a';
   1baa2:	3057      	adds	r0, #87	; 0x57
   1baa4:	e7f8      	b.n	1ba98 <hex2char+0x6>
		return -EINVAL;
   1baa6:	f06f 0015 	mvn.w	r0, #21
}
   1baaa:	4770      	bx	lr

0001baac <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
	if ((hexlen + 1) < buflen * 2) {
   1baac:	3301      	adds	r3, #1
   1baae:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   1bab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bab6:	460c      	mov	r4, r1
	if ((hexlen + 1) < buflen * 2) {
   1bab8:	ea4f 0641 	mov.w	r6, r1, lsl #1
   1babc:	d203      	bcs.n	1bac6 <bin2hex+0x1a>
		return 0;
   1babe:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   1bac0:	4630      	mov	r0, r6
   1bac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bac6:	4603      	mov	r3, r0
   1bac8:	1c55      	adds	r5, r2, #1
   1baca:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < buflen; i++) {
   1bacc:	42bb      	cmp	r3, r7
   1bace:	d103      	bne.n	1bad8 <bin2hex+0x2c>
	hex[2 * buflen] = '\0';
   1bad0:	2300      	movs	r3, #0
   1bad2:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   1bad6:	e7f3      	b.n	1bac0 <bin2hex+0x14>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   1bad8:	7818      	ldrb	r0, [r3, #0]
   1bada:	1e69      	subs	r1, r5, #1
   1badc:	0900      	lsrs	r0, r0, #4
   1bade:	4698      	mov	r8, r3
   1bae0:	f7ff ffd7 	bl	1ba92 <hex2char>
   1bae4:	2800      	cmp	r0, #0
   1bae6:	dbea      	blt.n	1babe <bin2hex+0x12>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   1bae8:	f898 0000 	ldrb.w	r0, [r8]
   1baec:	4629      	mov	r1, r5
   1baee:	f000 000f 	and.w	r0, r0, #15
   1baf2:	3301      	adds	r3, #1
   1baf4:	f7ff ffcd 	bl	1ba92 <hex2char>
   1baf8:	2800      	cmp	r0, #0
   1bafa:	f105 0502 	add.w	r5, r5, #2
   1bafe:	dae5      	bge.n	1bacc <bin2hex+0x20>
   1bb00:	e7dd      	b.n	1babe <bin2hex+0x12>

0001bb02 <hex2bin>:

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1bb02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bb04:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1bb06:	f001 0001 	and.w	r0, r1, #1
   1bb0a:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1bb0e:	429d      	cmp	r5, r3
   1bb10:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1bb14:	d903      	bls.n	1bb1e <hex2bin+0x1c>
		return 0;
   1bb16:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1bb18:	4628      	mov	r0, r5
   1bb1a:	b003      	add	sp, #12
   1bb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1bb1e:	b158      	cbz	r0, 1bb38 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1bb20:	7820      	ldrb	r0, [r4, #0]
   1bb22:	f10d 0107 	add.w	r1, sp, #7
   1bb26:	f7ff ff9c 	bl	1ba62 <char2hex>
   1bb2a:	2800      	cmp	r0, #0
   1bb2c:	dbf3      	blt.n	1bb16 <hex2bin+0x14>
		buf[0] = dec;
   1bb2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bb32:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   1bb36:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1bb38:	3401      	adds	r4, #1
   1bb3a:	4416      	add	r6, r2
   1bb3c:	42b2      	cmp	r2, r6
   1bb3e:	d0eb      	beq.n	1bb18 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1bb40:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1bb44:	f10d 0107 	add.w	r1, sp, #7
   1bb48:	f7ff ff8b 	bl	1ba62 <char2hex>
   1bb4c:	2800      	cmp	r0, #0
   1bb4e:	dbe2      	blt.n	1bb16 <hex2bin+0x14>
		buf[i] = dec << 4;
   1bb50:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bb54:	011b      	lsls	r3, r3, #4
   1bb56:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1bb58:	f814 0b02 	ldrb.w	r0, [r4], #2
   1bb5c:	f10d 0107 	add.w	r1, sp, #7
   1bb60:	f7ff ff7f 	bl	1ba62 <char2hex>
   1bb64:	2800      	cmp	r0, #0
   1bb66:	dbd6      	blt.n	1bb16 <hex2bin+0x14>
		buf[i] += dec;
   1bb68:	7813      	ldrb	r3, [r2, #0]
   1bb6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1bb6e:	440b      	add	r3, r1
   1bb70:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1bb74:	e7e2      	b.n	1bb3c <hex2bin+0x3a>

0001bb76 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1bb76:	4603      	mov	r3, r0
   1bb78:	b140      	cbz	r0, 1bb8c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1bb7a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1bb7c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1bb80:	2a02      	cmp	r2, #2
   1bb82:	d006      	beq.n	1bb92 <sys_notify_validate+0x1c>
   1bb84:	2a03      	cmp	r2, #3
   1bb86:	d004      	beq.n	1bb92 <sys_notify_validate+0x1c>
   1bb88:	2a01      	cmp	r2, #1
   1bb8a:	d005      	beq.n	1bb98 <sys_notify_validate+0x22>
		return -EINVAL;
   1bb8c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1bb90:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1bb92:	681a      	ldr	r2, [r3, #0]
   1bb94:	2a00      	cmp	r2, #0
   1bb96:	d0f9      	beq.n	1bb8c <sys_notify_validate+0x16>
		notify->result = 0;
   1bb98:	2000      	movs	r0, #0
   1bb9a:	6098      	str	r0, [r3, #8]
   1bb9c:	4770      	bx	lr

0001bb9e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1bb9e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1bba0:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1bba4:	2a02      	cmp	r2, #2
{
   1bba6:	b510      	push	{r4, lr}
   1bba8:	4603      	mov	r3, r0
	notify->result = res;
   1bbaa:	6081      	str	r1, [r0, #8]
	switch (method) {
   1bbac:	d00a      	beq.n	1bbc4 <sys_notify_finalize+0x26>
   1bbae:	2a03      	cmp	r2, #3
   1bbb0:	d10b      	bne.n	1bbca <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1bbb2:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1bbb4:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1bbb6:	2200      	movs	r2, #0
   1bbb8:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1bbba:	b108      	cbz	r0, 1bbc0 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1bbbc:	f7f0 fc0a 	bl	c3d4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1bbc0:	4620      	mov	r0, r4
   1bbc2:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1bbc4:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1bbc6:	2400      	movs	r4, #0
		break;
   1bbc8:	e7f5      	b.n	1bbb6 <sys_notify_finalize+0x18>
	switch (method) {
   1bbca:	2400      	movs	r4, #0
   1bbcc:	4620      	mov	r0, r4
   1bbce:	e7f2      	b.n	1bbb6 <sys_notify_finalize+0x18>

0001bbd0 <arch_printk_char_out>:
}
   1bbd0:	2000      	movs	r0, #0
   1bbd2:	4770      	bx	lr

0001bbd4 <str_out>:
{
   1bbd4:	b530      	push	{r4, r5, lr}
   1bbd6:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1bbd8:	680c      	ldr	r4, [r1, #0]
   1bbda:	1c55      	adds	r5, r2, #1
   1bbdc:	b114      	cbz	r4, 1bbe4 <str_out+0x10>
   1bbde:	684b      	ldr	r3, [r1, #4]
   1bbe0:	4293      	cmp	r3, r2
   1bbe2:	dc01      	bgt.n	1bbe8 <str_out+0x14>
		ctx->count++;
   1bbe4:	608d      	str	r5, [r1, #8]
}
   1bbe6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1bbe8:	3b01      	subs	r3, #1
   1bbea:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1bbec:	bf08      	it	eq
   1bbee:	2200      	moveq	r2, #0
   1bbf0:	608d      	str	r5, [r1, #8]
   1bbf2:	bf0c      	ite	eq
   1bbf4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1bbf6:	54a0      	strbne	r0, [r4, r2]
   1bbf8:	e7f5      	b.n	1bbe6 <str_out+0x12>

0001bbfa <printk>:
{
   1bbfa:	b40f      	push	{r0, r1, r2, r3}
   1bbfc:	b507      	push	{r0, r1, r2, lr}
   1bbfe:	a904      	add	r1, sp, #16
   1bc00:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1bc04:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1bc06:	f7e9 f84b 	bl	4ca0 <vprintk>
}
   1bc0a:	b003      	add	sp, #12
   1bc0c:	f85d eb04 	ldr.w	lr, [sp], #4
   1bc10:	b004      	add	sp, #16
   1bc12:	4770      	bx	lr

0001bc14 <snprintk>:
{
   1bc14:	b40c      	push	{r2, r3}
   1bc16:	b507      	push	{r0, r1, r2, lr}
   1bc18:	ab04      	add	r3, sp, #16
   1bc1a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1bc1e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1bc20:	f7e9 f84c 	bl	4cbc <vsnprintk>
}
   1bc24:	b003      	add	sp, #12
   1bc26:	f85d eb04 	ldr.w	lr, [sp], #4
   1bc2a:	b002      	add	sp, #8
   1bc2c:	4770      	bx	lr

0001bc2e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1bc2e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1bc30:	f013 0307 	ands.w	r3, r3, #7
   1bc34:	d105      	bne.n	1bc42 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1bc36:	6803      	ldr	r3, [r0, #0]
   1bc38:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1bc3a:	bf0c      	ite	eq
   1bc3c:	2000      	moveq	r0, #0
   1bc3e:	2003      	movne	r0, #3
   1bc40:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1bc42:	2b02      	cmp	r3, #2
   1bc44:	d105      	bne.n	1bc52 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1bc46:	8b43      	ldrh	r3, [r0, #26]
   1bc48:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1bc4a:	bf14      	ite	ne
   1bc4c:	2000      	movne	r0, #0
   1bc4e:	2004      	moveq	r0, #4
   1bc50:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1bc52:	2b01      	cmp	r3, #1
   1bc54:	d105      	bne.n	1bc62 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1bc56:	6803      	ldr	r3, [r0, #0]
   1bc58:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1bc5a:	bf0c      	ite	eq
   1bc5c:	2000      	moveq	r0, #0
   1bc5e:	2005      	movne	r0, #5
   1bc60:	4770      	bx	lr
	int evt = EVT_NOP;
   1bc62:	2000      	movs	r0, #0
}
   1bc64:	4770      	bx	lr

0001bc66 <notify_one>:
{
   1bc66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc6a:	460d      	mov	r5, r1
   1bc6c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1bc6e:	4619      	mov	r1, r3
   1bc70:	1d28      	adds	r0, r5, #4
{
   1bc72:	4690      	mov	r8, r2
   1bc74:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1bc76:	f7ff ff92 	bl	1bb9e <sys_notify_finalize>
	if (cb) {
   1bc7a:	4604      	mov	r4, r0
   1bc7c:	b138      	cbz	r0, 1bc8e <notify_one+0x28>
		cb(mgr, cli, state, res);
   1bc7e:	4633      	mov	r3, r6
   1bc80:	4642      	mov	r2, r8
   1bc82:	4629      	mov	r1, r5
   1bc84:	4638      	mov	r0, r7
   1bc86:	46a4      	mov	ip, r4
}
   1bc88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1bc8c:	4760      	bx	ip
}
   1bc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bc92 <transition_complete>:
{
   1bc92:	b410      	push	{r4}
	__asm__ volatile(
   1bc94:	f04f 0420 	mov.w	r4, #32
   1bc98:	f3ef 8211 	mrs	r2, BASEPRI
   1bc9c:	f384 8812 	msr	BASEPRI_MAX, r4
   1bca0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1bca4:	6141      	str	r1, [r0, #20]
}
   1bca6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1bca8:	2101      	movs	r1, #1
   1bcaa:	f7e9 b81b 	b.w	4ce4 <process_event>

0001bcae <validate_args>:
{
   1bcae:	b510      	push	{r4, lr}
   1bcb0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1bcb2:	b140      	cbz	r0, 1bcc6 <validate_args+0x18>
   1bcb4:	b139      	cbz	r1, 1bcc6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1bcb6:	1d08      	adds	r0, r1, #4
   1bcb8:	f7ff ff5d 	bl	1bb76 <sys_notify_validate>
	if ((rv == 0)
   1bcbc:	b928      	cbnz	r0, 1bcca <validate_args+0x1c>
	    && ((cli->notify.flags
   1bcbe:	68a3      	ldr	r3, [r4, #8]
   1bcc0:	f033 0303 	bics.w	r3, r3, #3
   1bcc4:	d001      	beq.n	1bcca <validate_args+0x1c>
		rv = -EINVAL;
   1bcc6:	f06f 0015 	mvn.w	r0, #21
}
   1bcca:	bd10      	pop	{r4, pc}

0001bccc <onoff_manager_init>:
{
   1bccc:	b538      	push	{r3, r4, r5, lr}
   1bcce:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1bcd0:	4605      	mov	r5, r0
   1bcd2:	b158      	cbz	r0, 1bcec <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1bcd4:	b151      	cbz	r1, 1bcec <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1bcd6:	680b      	ldr	r3, [r1, #0]
   1bcd8:	b143      	cbz	r3, 1bcec <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1bcda:	684b      	ldr	r3, [r1, #4]
   1bcdc:	b133      	cbz	r3, 1bcec <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1bcde:	221c      	movs	r2, #28
   1bce0:	2100      	movs	r1, #0
   1bce2:	f001 fe10 	bl	1d906 <memset>
   1bce6:	612c      	str	r4, [r5, #16]
	return 0;
   1bce8:	2000      	movs	r0, #0
}
   1bcea:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1bcec:	f06f 0015 	mvn.w	r0, #21
   1bcf0:	e7fb      	b.n	1bcea <onoff_manager_init+0x1e>

0001bcf2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1bcf2:	b570      	push	{r4, r5, r6, lr}
   1bcf4:	4604      	mov	r4, r0
   1bcf6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1bcf8:	f7ff ffd9 	bl	1bcae <validate_args>

	if (rv < 0) {
   1bcfc:	1e05      	subs	r5, r0, #0
   1bcfe:	db31      	blt.n	1bd64 <onoff_request+0x72>
   1bd00:	f04f 0320 	mov.w	r3, #32
   1bd04:	f3ef 8111 	mrs	r1, BASEPRI
   1bd08:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd0c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1bd10:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1bd12:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1bd14:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1bd18:	42ab      	cmp	r3, r5
   1bd1a:	f000 0207 	and.w	r2, r0, #7
   1bd1e:	d02e      	beq.n	1bd7e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1bd20:	2a02      	cmp	r2, #2
   1bd22:	d10e      	bne.n	1bd42 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1bd24:	3301      	adds	r3, #1
   1bd26:	8363      	strh	r3, [r4, #26]
	rv = state;
   1bd28:	4615      	mov	r5, r2
		notify = true;
   1bd2a:	2301      	movs	r3, #1
	__asm__ volatile(
   1bd2c:	f381 8811 	msr	BASEPRI, r1
   1bd30:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1bd34:	b1b3      	cbz	r3, 1bd64 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1bd36:	2300      	movs	r3, #0
   1bd38:	4631      	mov	r1, r6
   1bd3a:	4620      	mov	r0, r4
   1bd3c:	f7ff ff93 	bl	1bc66 <notify_one>
   1bd40:	e010      	b.n	1bd64 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1bd42:	0783      	lsls	r3, r0, #30
   1bd44:	d001      	beq.n	1bd4a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1bd46:	2a06      	cmp	r2, #6
   1bd48:	d10e      	bne.n	1bd68 <onoff_request+0x76>
	parent->next = child;
   1bd4a:	2300      	movs	r3, #0
   1bd4c:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1bd4e:	6863      	ldr	r3, [r4, #4]
   1bd50:	b993      	cbnz	r3, 1bd78 <onoff_request+0x86>
	list->head = node;
   1bd52:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1bd56:	4615      	mov	r5, r2
   1bd58:	b962      	cbnz	r2, 1bd74 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1bd5a:	460a      	mov	r2, r1
   1bd5c:	4620      	mov	r0, r4
   1bd5e:	2102      	movs	r1, #2
   1bd60:	f7e8 ffc0 	bl	4ce4 <process_event>
		}
	}

	return rv;
}
   1bd64:	4628      	mov	r0, r5
   1bd66:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1bd68:	2a05      	cmp	r2, #5
   1bd6a:	bf0c      	ite	eq
   1bd6c:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1bd70:	f06f 0504 	mvnne.w	r5, #4
   1bd74:	2300      	movs	r3, #0
   1bd76:	e7d9      	b.n	1bd2c <onoff_request+0x3a>
	parent->next = child;
   1bd78:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1bd7a:	6066      	str	r6, [r4, #4]
}
   1bd7c:	e7eb      	b.n	1bd56 <onoff_request+0x64>
		rv = -EAGAIN;
   1bd7e:	f06f 050a 	mvn.w	r5, #10
   1bd82:	e7f7      	b.n	1bd74 <onoff_request+0x82>

0001bd84 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1bd84:	4604      	mov	r4, r0
   1bd86:	b508      	push	{r3, lr}
   1bd88:	4608      	mov	r0, r1
   1bd8a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1bd8c:	461a      	mov	r2, r3
   1bd8e:	47a0      	blx	r4
	return z_impl_z_current_get();
   1bd90:	f7f0 f836 	bl	be00 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1bd94:	f7ea fff0 	bl	6d78 <z_impl_k_thread_abort>

0001bd98 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1bd98:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1bd9a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1bd9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1bda2:	bf2c      	ite	cs
   1bda4:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1bda8:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1bdac:	4770      	bx	lr

0001bdae <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1bdae:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1bdb2:	6880      	ldr	r0, [r0, #8]
   1bdb4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1bdb8:	bf2c      	ite	cs
   1bdba:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1bdbe:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1bdc2:	4770      	bx	lr

0001bdc4 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1bdc4:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1bdc6:	2201      	movs	r2, #1
   1bdc8:	f7ff ffe6 	bl	1bd98 <chunk_field>
}
   1bdcc:	0840      	lsrs	r0, r0, #1
   1bdce:	bd08      	pop	{r3, pc}

0001bdd0 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1bdd0:	6883      	ldr	r3, [r0, #8]
   1bdd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1bdd6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1bdda:	d308      	bcc.n	1bdee <set_chunk_used+0x1e>
		if (used) {
   1bddc:	684b      	ldr	r3, [r1, #4]
   1bdde:	b11a      	cbz	r2, 1bde8 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1bde0:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1bde4:	604b      	str	r3, [r1, #4]
   1bde6:	4770      	bx	lr
   1bde8:	f023 0301 	bic.w	r3, r3, #1
   1bdec:	e7fa      	b.n	1bde4 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1bdee:	884b      	ldrh	r3, [r1, #2]
   1bdf0:	b11a      	cbz	r2, 1bdfa <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1bdf2:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1bdf6:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1bdf8:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1bdfa:	f023 0301 	bic.w	r3, r3, #1
   1bdfe:	e7fa      	b.n	1bdf6 <set_chunk_used+0x26>

0001be00 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1be00:	0053      	lsls	r3, r2, #1
   1be02:	2201      	movs	r2, #1
   1be04:	f7ff bfd3 	b.w	1bdae <chunk_set>

0001be08 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1be08:	6880      	ldr	r0, [r0, #8]
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1be0a:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1be0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1be10:	bf2c      	ite	cs
   1be12:	2002      	movcs	r0, #2
   1be14:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1be16:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1be18:	fab0 f080 	clz	r0, r0
}
   1be1c:	f1c0 001f 	rsb	r0, r0, #31
   1be20:	4770      	bx	lr

0001be22 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1be22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be26:	4604      	mov	r4, r0
   1be28:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1be2a:	f7ff ffcb 	bl	1bdc4 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1be2e:	68a3      	ldr	r3, [r4, #8]
   1be30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1be34:	4601      	mov	r1, r0
   1be36:	d301      	bcc.n	1be3c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1be38:	2801      	cmp	r0, #1
   1be3a:	d035      	beq.n	1bea8 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1be3c:	4620      	mov	r0, r4
   1be3e:	f7ff ffe3 	bl	1be08 <bucket_idx>
	if (b->next == 0U) {
   1be42:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1be46:	6916      	ldr	r6, [r2, #16]
   1be48:	b99e      	cbnz	r6, 1be72 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1be4a:	2301      	movs	r3, #1
   1be4c:	fa03 f000 	lsl.w	r0, r3, r0
   1be50:	68e3      	ldr	r3, [r4, #12]
   1be52:	4303      	orrs	r3, r0
   1be54:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1be56:	4629      	mov	r1, r5
		b->next = c;
   1be58:	6115      	str	r5, [r2, #16]
   1be5a:	462b      	mov	r3, r5
   1be5c:	2202      	movs	r2, #2
   1be5e:	4620      	mov	r0, r4
   1be60:	f7ff ffa5 	bl	1bdae <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1be64:	2203      	movs	r2, #3
   1be66:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1be68:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   1be6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1be6e:	f7ff bf9e 	b.w	1bdae <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1be72:	2202      	movs	r2, #2
   1be74:	4631      	mov	r1, r6
   1be76:	4620      	mov	r0, r4
   1be78:	f7ff ff8e 	bl	1bd98 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1be7c:	2202      	movs	r2, #2
   1be7e:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1be80:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1be82:	4629      	mov	r1, r5
   1be84:	4620      	mov	r0, r4
   1be86:	f7ff ff92 	bl	1bdae <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1be8a:	4633      	mov	r3, r6
   1be8c:	2203      	movs	r2, #3
   1be8e:	4629      	mov	r1, r5
   1be90:	4620      	mov	r0, r4
   1be92:	f7ff ff8c 	bl	1bdae <chunk_set>
   1be96:	2203      	movs	r2, #3
   1be98:	4639      	mov	r1, r7
   1be9a:	462b      	mov	r3, r5
   1be9c:	4620      	mov	r0, r4
   1be9e:	f7ff ff86 	bl	1bdae <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1bea2:	2202      	movs	r2, #2
   1bea4:	4631      	mov	r1, r6
   1bea6:	e7df      	b.n	1be68 <free_list_add+0x46>
   1bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001beac <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1beac:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1beb2:	bf2c      	ite	cs
   1beb4:	2508      	movcs	r5, #8
   1beb6:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1beb8:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1beba:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1bebc:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1bebe:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1bec2:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1bec6:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1bec8:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1beca:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1becc:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1bece:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1bed0:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1bed2:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1bed4:	4620      	mov	r0, r4
   1bed6:	f7ff ff97 	bl	1be08 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1beda:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1bedc:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1bede:	1c41      	adds	r1, r0, #1
   1bee0:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1bee2:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1bee6:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1bee8:	428b      	cmp	r3, r1
   1beea:	db2f      	blt.n	1bf4c <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1beec:	4632      	mov	r2, r6
   1beee:	4620      	mov	r0, r4
   1bef0:	2100      	movs	r1, #0
   1bef2:	f7ff ff85 	bl	1be00 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1bef6:	2300      	movs	r3, #0
   1bef8:	461a      	mov	r2, r3
   1befa:	4619      	mov	r1, r3
   1befc:	4620      	mov	r0, r4
   1befe:	f7ff ff56 	bl	1bdae <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1bf02:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1bf04:	4620      	mov	r0, r4
   1bf06:	2201      	movs	r2, #1
   1bf08:	2100      	movs	r1, #0
   1bf0a:	f7ff ff61 	bl	1bdd0 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1bf0e:	463a      	mov	r2, r7
   1bf10:	4631      	mov	r1, r6
   1bf12:	f7ff ff75 	bl	1be00 <set_chunk_size>
   1bf16:	4633      	mov	r3, r6
   1bf18:	4631      	mov	r1, r6
   1bf1a:	4620      	mov	r0, r4
   1bf1c:	2200      	movs	r2, #0
   1bf1e:	f7ff ff46 	bl	1bdae <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1bf22:	4629      	mov	r1, r5
   1bf24:	4620      	mov	r0, r4
   1bf26:	2200      	movs	r2, #0
   1bf28:	f7ff ff6a 	bl	1be00 <set_chunk_size>
   1bf2c:	463b      	mov	r3, r7
   1bf2e:	4629      	mov	r1, r5
   1bf30:	4620      	mov	r0, r4
   1bf32:	2200      	movs	r2, #0
   1bf34:	f7ff ff3b 	bl	1bdae <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1bf38:	4629      	mov	r1, r5
   1bf3a:	4620      	mov	r0, r4
   1bf3c:	2201      	movs	r2, #1
   1bf3e:	f7ff ff47 	bl	1bdd0 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1bf42:	4631      	mov	r1, r6
}
   1bf44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1bf48:	f7ff bf6b 	b.w	1be22 <free_list_add>
		h->buckets[i].next = 0;
   1bf4c:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1bf50:	3301      	adds	r3, #1
   1bf52:	e7c9      	b.n	1bee8 <sys_heap_init+0x3c>

0001bf54 <outs>:
{
   1bf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf58:	4607      	mov	r7, r0
   1bf5a:	4688      	mov	r8, r1
   1bf5c:	4615      	mov	r5, r2
   1bf5e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1bf60:	4614      	mov	r4, r2
   1bf62:	42b4      	cmp	r4, r6
   1bf64:	eba4 0005 	sub.w	r0, r4, r5
   1bf68:	d302      	bcc.n	1bf70 <outs+0x1c>
   1bf6a:	b93e      	cbnz	r6, 1bf7c <outs+0x28>
   1bf6c:	7823      	ldrb	r3, [r4, #0]
   1bf6e:	b12b      	cbz	r3, 1bf7c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1bf70:	f814 0b01 	ldrb.w	r0, [r4], #1
   1bf74:	4641      	mov	r1, r8
   1bf76:	47b8      	blx	r7
		if (rc < 0) {
   1bf78:	2800      	cmp	r0, #0
   1bf7a:	daf2      	bge.n	1bf62 <outs+0xe>
}
   1bf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bf80 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1bf80:	4770      	bx	lr

0001bf82 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1bf82:	2300      	movs	r3, #0
	list->head = NULL;
   1bf84:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bf88:	4770      	bx	lr

0001bf8a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1bf8a:	6803      	ldr	r3, [r0, #0]
   1bf8c:	b923      	cbnz	r3, 1bf98 <log_list_add_tail+0xe>
		list->head = msg;
   1bf8e:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1bf90:	2300      	movs	r3, #0
	list->tail = msg;
   1bf92:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1bf94:	600b      	str	r3, [r1, #0]
}
   1bf96:	4770      	bx	lr
		list->tail->next = msg;
   1bf98:	6843      	ldr	r3, [r0, #4]
   1bf9a:	6019      	str	r1, [r3, #0]
   1bf9c:	e7f8      	b.n	1bf90 <log_list_add_tail+0x6>

0001bf9e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1bf9e:	6800      	ldr	r0, [r0, #0]
   1bfa0:	4770      	bx	lr

0001bfa2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1bfa2:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1bfa4:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1bfa6:	b108      	cbz	r0, 1bfac <log_list_head_get+0xa>
		list->head = list->head->next;
   1bfa8:	6802      	ldr	r2, [r0, #0]
   1bfaa:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1bfac:	4770      	bx	lr

0001bfae <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1bfae:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1bfb0:	f7e9 fe96 	bl	5ce0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1bfb4:	b118      	cbz	r0, 1bfbe <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1bfb6:	2301      	movs	r3, #1
   1bfb8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1bfba:	2300      	movs	r3, #0
   1bfbc:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1bfbe:	bd08      	pop	{r3, pc}

0001bfc0 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1bfc0:	f001 b870 	b.w	1d0a4 <sys_clock_cycle_get_32>

0001bfc4 <dummy_timestamp>:
   1bfc4:	2000      	movs	r0, #0
   1bfc6:	4770      	bx	lr

0001bfc8 <log_0>:
{
   1bfc8:	b538      	push	{r3, r4, r5, lr}
   1bfca:	4605      	mov	r5, r0
   1bfcc:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1bfce:	f7ff ffee 	bl	1bfae <z_log_msg_std_alloc>

	if (msg != NULL) {
   1bfd2:	b128      	cbz	r0, 1bfe0 <log_0+0x18>
		msg->str = str;
   1bfd4:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1bfd6:	4621      	mov	r1, r4
}
   1bfd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1bfdc:	f7e9 bd7e 	b.w	5adc <msg_finalize>
}
   1bfe0:	bd38      	pop	{r3, r4, r5, pc}

0001bfe2 <log_1>:
{
   1bfe2:	b570      	push	{r4, r5, r6, lr}
   1bfe4:	4606      	mov	r6, r0
   1bfe6:	460d      	mov	r5, r1
   1bfe8:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1bfea:	f7ff ffe0 	bl	1bfae <z_log_msg_std_alloc>

	if (msg != NULL) {
   1bfee:	b158      	cbz	r0, 1c008 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1bff0:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1bff2:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1bff4:	2101      	movs	r1, #1
   1bff6:	f361 1207 	bfi	r2, r1, #4, #4
   1bffa:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1bffc:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1bffe:	4621      	mov	r1, r4
}
   1c000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1c004:	f7e9 bd6a 	b.w	5adc <msg_finalize>
}
   1c008:	bd70      	pop	{r4, r5, r6, pc}

0001c00a <log_2>:
{
   1c00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c00e:	4680      	mov	r8, r0
   1c010:	460f      	mov	r7, r1
   1c012:	4616      	mov	r6, r2
   1c014:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c016:	f7ff ffca 	bl	1bfae <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c01a:	b168      	cbz	r0, 1c038 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c01c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1c01e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1c022:	2202      	movs	r2, #2
   1c024:	f362 1307 	bfi	r3, r2, #4, #4
   1c028:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c02a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1c02e:	4629      	mov	r1, r5
}
   1c030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c034:	f7e9 bd52 	b.w	5adc <msg_finalize>
}
   1c038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c03c <log_3>:
{
   1c03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c040:	4680      	mov	r8, r0
   1c042:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1c046:	460f      	mov	r7, r1
   1c048:	4616      	mov	r6, r2
   1c04a:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c04c:	f7ff ffaf 	bl	1bfae <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c050:	b170      	cbz	r0, 1c070 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c052:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1c054:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1c058:	2203      	movs	r2, #3
   1c05a:	f362 1307 	bfi	r3, r2, #4, #4
   1c05e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c060:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1c064:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1c066:	4649      	mov	r1, r9
}
   1c068:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1c06c:	f7e9 bd36 	b.w	5adc <msg_finalize>
}
   1c070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c074 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1c074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c078:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1c07a:	8903      	ldrh	r3, [r0, #8]
{
   1c07c:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1c080:	460e      	mov	r6, r1
   1c082:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1c084:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1c088:	42a2      	cmp	r2, r4
   1c08a:	d803      	bhi.n	1c094 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1c08c:	2300      	movs	r3, #0
   1c08e:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1c090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1c094:	680b      	ldr	r3, [r1, #0]
   1c096:	4423      	add	r3, r4
   1c098:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1c09a:	bf84      	itt	hi
   1c09c:	1b13      	subhi	r3, r2, r4
   1c09e:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c0a0:	2a0c      	cmp	r2, #12
	req_len = *length;
   1c0a2:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c0a6:	d92a      	bls.n	1c0fe <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1c0a8:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1c0aa:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1c0ae:	d82d      	bhi.n	1c10c <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1c0b0:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c0b2:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c0b4:	454a      	cmp	r2, r9
   1c0b6:	bf28      	it	cs
   1c0b8:	464a      	movcs	r2, r9
   1c0ba:	4615      	mov	r5, r2
		if (put_op) {
   1c0bc:	4420      	add	r0, r4
   1c0be:	b317      	cbz	r7, 1c106 <log_msg_hexdump_data_op+0x92>
   1c0c0:	4631      	mov	r1, r6
   1c0c2:	f001 fbe5 	bl	1d890 <memcpy>
		req_len -= cpy_len;
   1c0c6:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1c0ca:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1c0cc:	f1b9 0f00 	cmp.w	r9, #0
   1c0d0:	d0de      	beq.n	1c090 <log_msg_hexdump_data_op+0x1c>
   1c0d2:	f1b8 0f00 	cmp.w	r8, #0
   1c0d6:	d0db      	beq.n	1c090 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1c0d8:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c0dc:	454d      	cmp	r5, r9
   1c0de:	bf28      	it	cs
   1c0e0:	464d      	movcs	r5, r9
		if (put_op) {
   1c0e2:	1d20      	adds	r0, r4, #4
   1c0e4:	4440      	add	r0, r8
   1c0e6:	462a      	mov	r2, r5
   1c0e8:	b1bf      	cbz	r7, 1c11a <log_msg_hexdump_data_op+0xa6>
   1c0ea:	4631      	mov	r1, r6
   1c0ec:	f001 fbd0 	bl	1d890 <memcpy>
		req_len -= cpy_len;
   1c0f0:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1c0f4:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1c0f8:	442e      	add	r6, r5
		offset = 0;
   1c0fa:	2400      	movs	r4, #0
   1c0fc:	e7e6      	b.n	1c0cc <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1c0fe:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1c100:	f04f 0800 	mov.w	r8, #0
   1c104:	e7d6      	b.n	1c0b4 <log_msg_hexdump_data_op+0x40>
   1c106:	4601      	mov	r1, r0
   1c108:	4630      	mov	r0, r6
   1c10a:	e7da      	b.n	1c0c2 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1c10c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1c10e:	2c1b      	cmp	r4, #27
   1c110:	d9dc      	bls.n	1c0cc <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1c112:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1c116:	3c1c      	subs	r4, #28
   1c118:	e7f9      	b.n	1c10e <log_msg_hexdump_data_op+0x9a>
   1c11a:	4601      	mov	r1, r0
   1c11c:	4630      	mov	r0, r6
   1c11e:	e7e5      	b.n	1c0ec <log_msg_hexdump_data_op+0x78>

0001c120 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c120:	3004      	adds	r0, #4
   1c122:	f3bf 8f5b 	dmb	ish
   1c126:	e850 3f00 	ldrex	r3, [r0]
   1c12a:	3301      	adds	r3, #1
   1c12c:	e840 3200 	strex	r2, r3, [r0]
   1c130:	2a00      	cmp	r2, #0
   1c132:	d1f8      	bne.n	1c126 <log_msg_get+0x6>
   1c134:	f3bf 8f5b 	dmb	ish
}
   1c138:	4770      	bx	lr

0001c13a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1c13a:	7a40      	ldrb	r0, [r0, #9]
}
   1c13c:	0900      	lsrs	r0, r0, #4
   1c13e:	4770      	bx	lr

0001c140 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1c140:	7a43      	ldrb	r3, [r0, #9]
   1c142:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1c146:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1c14a:	d216      	bcs.n	1c17a <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c14c:	2a03      	cmp	r2, #3
   1c14e:	d803      	bhi.n	1c158 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1c150:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c154:	6948      	ldr	r0, [r1, #20]
   1c156:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1c158:	2901      	cmp	r1, #1
   1c15a:	d803      	bhi.n	1c164 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1c15c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1c160:	6988      	ldr	r0, [r1, #24]
   1c162:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1c164:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c166:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1c168:	2906      	cmp	r1, #6
   1c16a:	d803      	bhi.n	1c174 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1c16c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c170:	6848      	ldr	r0, [r1, #4]
   1c172:	4770      	bx	lr
		cont = cont->next;
   1c174:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1c176:	3907      	subs	r1, #7
		cont = cont->next;
   1c178:	e7f6      	b.n	1c168 <log_msg_arg_get+0x28>
		return 0;
   1c17a:	2000      	movs	r0, #0
}
   1c17c:	4770      	bx	lr

0001c17e <log_msg_put>:
{
   1c17e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c180:	1d02      	adds	r2, r0, #4
   1c182:	f3bf 8f5b 	dmb	ish
   1c186:	e852 1f00 	ldrex	r1, [r2]
   1c18a:	3901      	subs	r1, #1
   1c18c:	e842 1c00 	strex	ip, r1, [r2]
   1c190:	f1bc 0f00 	cmp.w	ip, #0
   1c194:	d1f7      	bne.n	1c186 <log_msg_put+0x8>
   1c196:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1c19a:	685b      	ldr	r3, [r3, #4]
   1c19c:	b90b      	cbnz	r3, 1c1a2 <log_msg_put+0x24>
		msg_free(msg);
   1c19e:	f7e9 bdb3 	b.w	5d08 <msg_free>
}
   1c1a2:	4770      	bx	lr

0001c1a4 <log_msg_str_get>:
}
   1c1a4:	6900      	ldr	r0, [r0, #16]
   1c1a6:	4770      	bx	lr

0001c1a8 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1c1a8:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1c1aa:	2400      	movs	r4, #0
   1c1ac:	9400      	str	r4, [sp, #0]
   1c1ae:	f7ff ff61 	bl	1c074 <log_msg_hexdump_data_op>
}
   1c1b2:	b002      	add	sp, #8
   1c1b4:	bd10      	pop	{r4, pc}

0001c1b6 <buffer_write>:
{
   1c1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c1b8:	4606      	mov	r6, r0
   1c1ba:	460d      	mov	r5, r1
   1c1bc:	4614      	mov	r4, r2
   1c1be:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1c1c0:	4621      	mov	r1, r4
   1c1c2:	4628      	mov	r0, r5
   1c1c4:	463a      	mov	r2, r7
   1c1c6:	47b0      	blx	r6
	} while (len != 0);
   1c1c8:	1a24      	subs	r4, r4, r0
		buf += processed;
   1c1ca:	4405      	add	r5, r0
	} while (len != 0);
   1c1cc:	d1f8      	bne.n	1c1c0 <buffer_write+0xa>
}
   1c1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c1d0 <std_print>:
{
   1c1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c1d4:	b08e      	sub	sp, #56	; 0x38
   1c1d6:	af0e      	add	r7, sp, #56	; 0x38
   1c1d8:	4680      	mov	r8, r0
   1c1da:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1c1dc:	f7ff ffe2 	bl	1c1a4 <log_msg_str_get>
   1c1e0:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1c1e2:	4640      	mov	r0, r8
   1c1e4:	f7ff ffa9 	bl	1c13a <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1c1e8:	0083      	lsls	r3, r0, #2
   1c1ea:	3307      	adds	r3, #7
   1c1ec:	f023 0307 	bic.w	r3, r3, #7
   1c1f0:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1c1f4:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1c1f6:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1c1f8:	f04f 0900 	mov.w	r9, #0
   1c1fc:	45d1      	cmp	r9, sl
   1c1fe:	d116      	bne.n	1c22e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1c200:	4640      	mov	r0, r8
   1c202:	f7ff ff9a 	bl	1c13a <log_msg_nargs_get>
   1c206:	280f      	cmp	r0, #15
   1c208:	d81e      	bhi.n	1c248 <std_print+0x78>
   1c20a:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c20e:	0019      	.short	0x0019
   1c210:	00260020 	.word	0x00260020
   1c214:	0036002d 	.word	0x0036002d
   1c218:	004e0041 	.word	0x004e0041
   1c21c:	006e005d 	.word	0x006e005d
   1c220:	00960081 	.word	0x00960081
   1c224:	00c600ad 	.word	0x00c600ad
   1c228:	00fe00e1 	.word	0x00fe00e1
   1c22c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1c22e:	4649      	mov	r1, r9
   1c230:	4640      	mov	r0, r8
   1c232:	f7ff ff85 	bl	1c140 <log_msg_arg_get>
   1c236:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1c23a:	f109 0901 	add.w	r9, r9, #1
   1c23e:	e7dd      	b.n	1c1fc <std_print+0x2c>
		print_formatted(output, str);
   1c240:	4631      	mov	r1, r6
   1c242:	4628      	mov	r0, r5
   1c244:	f7e9 fd9e 	bl	5d84 <print_formatted>
}
   1c248:	46bd      	mov	sp, r7
   1c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1c24e:	6822      	ldr	r2, [r4, #0]
   1c250:	4631      	mov	r1, r6
   1c252:	4628      	mov	r0, r5
   1c254:	f7e9 fd96 	bl	5d84 <print_formatted>
		break;
   1c258:	e7f6      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1c25a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c25e:	4631      	mov	r1, r6
   1c260:	4628      	mov	r0, r5
   1c262:	f7e9 fd8f 	bl	5d84 <print_formatted>
		break;
   1c266:	e7ef      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1c268:	68a3      	ldr	r3, [r4, #8]
   1c26a:	9300      	str	r3, [sp, #0]
   1c26c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c270:	4631      	mov	r1, r6
   1c272:	4628      	mov	r0, r5
   1c274:	f7e9 fd86 	bl	5d84 <print_formatted>
		break;
   1c278:	e7e6      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c27a:	68e3      	ldr	r3, [r4, #12]
   1c27c:	9301      	str	r3, [sp, #4]
   1c27e:	68a3      	ldr	r3, [r4, #8]
   1c280:	9300      	str	r3, [sp, #0]
   1c282:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c286:	4631      	mov	r1, r6
   1c288:	4628      	mov	r0, r5
   1c28a:	f7e9 fd7b 	bl	5d84 <print_formatted>
		break;
   1c28e:	e7db      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c290:	6923      	ldr	r3, [r4, #16]
   1c292:	9302      	str	r3, [sp, #8]
   1c294:	68e3      	ldr	r3, [r4, #12]
   1c296:	9301      	str	r3, [sp, #4]
   1c298:	68a3      	ldr	r3, [r4, #8]
   1c29a:	9300      	str	r3, [sp, #0]
   1c29c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c2a0:	4631      	mov	r1, r6
   1c2a2:	4628      	mov	r0, r5
   1c2a4:	f7e9 fd6e 	bl	5d84 <print_formatted>
		break;
   1c2a8:	e7ce      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c2aa:	6963      	ldr	r3, [r4, #20]
   1c2ac:	9303      	str	r3, [sp, #12]
   1c2ae:	6923      	ldr	r3, [r4, #16]
   1c2b0:	9302      	str	r3, [sp, #8]
   1c2b2:	68e3      	ldr	r3, [r4, #12]
   1c2b4:	9301      	str	r3, [sp, #4]
   1c2b6:	68a3      	ldr	r3, [r4, #8]
   1c2b8:	9300      	str	r3, [sp, #0]
   1c2ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c2be:	4631      	mov	r1, r6
   1c2c0:	4628      	mov	r0, r5
   1c2c2:	f7e9 fd5f 	bl	5d84 <print_formatted>
		break;
   1c2c6:	e7bf      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c2c8:	69a3      	ldr	r3, [r4, #24]
   1c2ca:	9304      	str	r3, [sp, #16]
   1c2cc:	6963      	ldr	r3, [r4, #20]
   1c2ce:	9303      	str	r3, [sp, #12]
   1c2d0:	6923      	ldr	r3, [r4, #16]
   1c2d2:	9302      	str	r3, [sp, #8]
   1c2d4:	68e3      	ldr	r3, [r4, #12]
   1c2d6:	9301      	str	r3, [sp, #4]
   1c2d8:	68a3      	ldr	r3, [r4, #8]
   1c2da:	9300      	str	r3, [sp, #0]
   1c2dc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c2e0:	4631      	mov	r1, r6
   1c2e2:	4628      	mov	r0, r5
   1c2e4:	f7e9 fd4e 	bl	5d84 <print_formatted>
		break;
   1c2e8:	e7ae      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c2ea:	69e3      	ldr	r3, [r4, #28]
   1c2ec:	9305      	str	r3, [sp, #20]
   1c2ee:	69a3      	ldr	r3, [r4, #24]
   1c2f0:	9304      	str	r3, [sp, #16]
   1c2f2:	6963      	ldr	r3, [r4, #20]
   1c2f4:	9303      	str	r3, [sp, #12]
   1c2f6:	6923      	ldr	r3, [r4, #16]
   1c2f8:	9302      	str	r3, [sp, #8]
   1c2fa:	68e3      	ldr	r3, [r4, #12]
   1c2fc:	9301      	str	r3, [sp, #4]
   1c2fe:	68a3      	ldr	r3, [r4, #8]
   1c300:	9300      	str	r3, [sp, #0]
   1c302:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c306:	4631      	mov	r1, r6
   1c308:	4628      	mov	r0, r5
   1c30a:	f7e9 fd3b 	bl	5d84 <print_formatted>
		break;
   1c30e:	e79b      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c310:	6a23      	ldr	r3, [r4, #32]
   1c312:	9306      	str	r3, [sp, #24]
   1c314:	69e3      	ldr	r3, [r4, #28]
   1c316:	9305      	str	r3, [sp, #20]
   1c318:	69a3      	ldr	r3, [r4, #24]
   1c31a:	9304      	str	r3, [sp, #16]
   1c31c:	6963      	ldr	r3, [r4, #20]
   1c31e:	9303      	str	r3, [sp, #12]
   1c320:	6923      	ldr	r3, [r4, #16]
   1c322:	9302      	str	r3, [sp, #8]
   1c324:	68e3      	ldr	r3, [r4, #12]
   1c326:	9301      	str	r3, [sp, #4]
   1c328:	68a3      	ldr	r3, [r4, #8]
   1c32a:	9300      	str	r3, [sp, #0]
   1c32c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c330:	4631      	mov	r1, r6
   1c332:	4628      	mov	r0, r5
   1c334:	f7e9 fd26 	bl	5d84 <print_formatted>
		break;
   1c338:	e786      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c33c:	9307      	str	r3, [sp, #28]
   1c33e:	6a23      	ldr	r3, [r4, #32]
   1c340:	9306      	str	r3, [sp, #24]
   1c342:	69e3      	ldr	r3, [r4, #28]
   1c344:	9305      	str	r3, [sp, #20]
   1c346:	69a3      	ldr	r3, [r4, #24]
   1c348:	9304      	str	r3, [sp, #16]
   1c34a:	6963      	ldr	r3, [r4, #20]
   1c34c:	9303      	str	r3, [sp, #12]
   1c34e:	6923      	ldr	r3, [r4, #16]
   1c350:	9302      	str	r3, [sp, #8]
   1c352:	68e3      	ldr	r3, [r4, #12]
   1c354:	9301      	str	r3, [sp, #4]
   1c356:	68a3      	ldr	r3, [r4, #8]
   1c358:	9300      	str	r3, [sp, #0]
   1c35a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c35e:	4631      	mov	r1, r6
   1c360:	4628      	mov	r0, r5
   1c362:	f7e9 fd0f 	bl	5d84 <print_formatted>
		break;
   1c366:	e76f      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c36a:	9308      	str	r3, [sp, #32]
   1c36c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c36e:	9307      	str	r3, [sp, #28]
   1c370:	6a23      	ldr	r3, [r4, #32]
   1c372:	9306      	str	r3, [sp, #24]
   1c374:	69e3      	ldr	r3, [r4, #28]
   1c376:	9305      	str	r3, [sp, #20]
   1c378:	69a3      	ldr	r3, [r4, #24]
   1c37a:	9304      	str	r3, [sp, #16]
   1c37c:	6963      	ldr	r3, [r4, #20]
   1c37e:	9303      	str	r3, [sp, #12]
   1c380:	6923      	ldr	r3, [r4, #16]
   1c382:	9302      	str	r3, [sp, #8]
   1c384:	68e3      	ldr	r3, [r4, #12]
   1c386:	9301      	str	r3, [sp, #4]
   1c388:	68a3      	ldr	r3, [r4, #8]
   1c38a:	9300      	str	r3, [sp, #0]
   1c38c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c390:	4631      	mov	r1, r6
   1c392:	4628      	mov	r0, r5
   1c394:	f7e9 fcf6 	bl	5d84 <print_formatted>
		break;
   1c398:	e756      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c39a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c39c:	9309      	str	r3, [sp, #36]	; 0x24
   1c39e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c3a0:	9308      	str	r3, [sp, #32]
   1c3a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c3a4:	9307      	str	r3, [sp, #28]
   1c3a6:	6a23      	ldr	r3, [r4, #32]
   1c3a8:	9306      	str	r3, [sp, #24]
   1c3aa:	69e3      	ldr	r3, [r4, #28]
   1c3ac:	9305      	str	r3, [sp, #20]
   1c3ae:	69a3      	ldr	r3, [r4, #24]
   1c3b0:	9304      	str	r3, [sp, #16]
   1c3b2:	6963      	ldr	r3, [r4, #20]
   1c3b4:	9303      	str	r3, [sp, #12]
   1c3b6:	6923      	ldr	r3, [r4, #16]
   1c3b8:	9302      	str	r3, [sp, #8]
   1c3ba:	68e3      	ldr	r3, [r4, #12]
   1c3bc:	9301      	str	r3, [sp, #4]
   1c3be:	68a3      	ldr	r3, [r4, #8]
   1c3c0:	9300      	str	r3, [sp, #0]
   1c3c2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c3c6:	4631      	mov	r1, r6
   1c3c8:	4628      	mov	r0, r5
   1c3ca:	f7e9 fcdb 	bl	5d84 <print_formatted>
		break;
   1c3ce:	e73b      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c3d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c3d2:	930a      	str	r3, [sp, #40]	; 0x28
   1c3d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c3d6:	9309      	str	r3, [sp, #36]	; 0x24
   1c3d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c3da:	9308      	str	r3, [sp, #32]
   1c3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c3de:	9307      	str	r3, [sp, #28]
   1c3e0:	6a23      	ldr	r3, [r4, #32]
   1c3e2:	9306      	str	r3, [sp, #24]
   1c3e4:	69e3      	ldr	r3, [r4, #28]
   1c3e6:	9305      	str	r3, [sp, #20]
   1c3e8:	69a3      	ldr	r3, [r4, #24]
   1c3ea:	9304      	str	r3, [sp, #16]
   1c3ec:	6963      	ldr	r3, [r4, #20]
   1c3ee:	9303      	str	r3, [sp, #12]
   1c3f0:	6923      	ldr	r3, [r4, #16]
   1c3f2:	9302      	str	r3, [sp, #8]
   1c3f4:	68e3      	ldr	r3, [r4, #12]
   1c3f6:	9301      	str	r3, [sp, #4]
   1c3f8:	68a3      	ldr	r3, [r4, #8]
   1c3fa:	9300      	str	r3, [sp, #0]
   1c3fc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c400:	4631      	mov	r1, r6
   1c402:	4628      	mov	r0, r5
   1c404:	f7e9 fcbe 	bl	5d84 <print_formatted>
		break;
   1c408:	e71e      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c40a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c40c:	930b      	str	r3, [sp, #44]	; 0x2c
   1c40e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c410:	930a      	str	r3, [sp, #40]	; 0x28
   1c412:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c414:	9309      	str	r3, [sp, #36]	; 0x24
   1c416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c418:	9308      	str	r3, [sp, #32]
   1c41a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c41c:	9307      	str	r3, [sp, #28]
   1c41e:	6a23      	ldr	r3, [r4, #32]
   1c420:	9306      	str	r3, [sp, #24]
   1c422:	69e3      	ldr	r3, [r4, #28]
   1c424:	9305      	str	r3, [sp, #20]
   1c426:	69a3      	ldr	r3, [r4, #24]
   1c428:	9304      	str	r3, [sp, #16]
   1c42a:	6963      	ldr	r3, [r4, #20]
   1c42c:	9303      	str	r3, [sp, #12]
   1c42e:	6923      	ldr	r3, [r4, #16]
   1c430:	9302      	str	r3, [sp, #8]
   1c432:	68e3      	ldr	r3, [r4, #12]
   1c434:	9301      	str	r3, [sp, #4]
   1c436:	68a3      	ldr	r3, [r4, #8]
   1c438:	9300      	str	r3, [sp, #0]
   1c43a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c43e:	4631      	mov	r1, r6
   1c440:	4628      	mov	r0, r5
   1c442:	f7e9 fc9f 	bl	5d84 <print_formatted>
		break;
   1c446:	e6ff      	b.n	1c248 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c448:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c44a:	930c      	str	r3, [sp, #48]	; 0x30
   1c44c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c44e:	930b      	str	r3, [sp, #44]	; 0x2c
   1c450:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c452:	930a      	str	r3, [sp, #40]	; 0x28
   1c454:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c456:	9309      	str	r3, [sp, #36]	; 0x24
   1c458:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c45a:	9308      	str	r3, [sp, #32]
   1c45c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c45e:	9307      	str	r3, [sp, #28]
   1c460:	6a23      	ldr	r3, [r4, #32]
   1c462:	9306      	str	r3, [sp, #24]
   1c464:	69e3      	ldr	r3, [r4, #28]
   1c466:	9305      	str	r3, [sp, #20]
   1c468:	69a3      	ldr	r3, [r4, #24]
   1c46a:	9304      	str	r3, [sp, #16]
   1c46c:	6963      	ldr	r3, [r4, #20]
   1c46e:	9303      	str	r3, [sp, #12]
   1c470:	6923      	ldr	r3, [r4, #16]
   1c472:	9302      	str	r3, [sp, #8]
   1c474:	68e3      	ldr	r3, [r4, #12]
   1c476:	9301      	str	r3, [sp, #4]
   1c478:	68a3      	ldr	r3, [r4, #8]
   1c47a:	9300      	str	r3, [sp, #0]
   1c47c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c480:	4631      	mov	r1, r6
   1c482:	4628      	mov	r0, r5
   1c484:	f7e9 fc7e 	bl	5d84 <print_formatted>
}
   1c488:	e6de      	b.n	1c248 <std_print+0x78>

0001c48a <log_output_flush>:
		     output->control_block->offset,
   1c48a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1c48c:	6881      	ldr	r1, [r0, #8]
{
   1c48e:	b510      	push	{r4, lr}
   1c490:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1c492:	e9d2 2300 	ldrd	r2, r3, [r2]
   1c496:	6800      	ldr	r0, [r0, #0]
   1c498:	f7ff fe8d 	bl	1c1b6 <buffer_write>
	output->control_block->offset = 0;
   1c49c:	6863      	ldr	r3, [r4, #4]
   1c49e:	2200      	movs	r2, #0
   1c4a0:	601a      	str	r2, [r3, #0]
}
   1c4a2:	bd10      	pop	{r4, pc}

0001c4a4 <out_func>:
{
   1c4a4:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1c4a6:	684b      	ldr	r3, [r1, #4]
   1c4a8:	681a      	ldr	r2, [r3, #0]
   1c4aa:	68cb      	ldr	r3, [r1, #12]
   1c4ac:	429a      	cmp	r2, r3
{
   1c4ae:	4605      	mov	r5, r0
   1c4b0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1c4b2:	d102      	bne.n	1c4ba <out_func+0x16>
		log_output_flush(out_ctx);
   1c4b4:	4608      	mov	r0, r1
   1c4b6:	f7ff ffe8 	bl	1c48a <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c4ba:	6863      	ldr	r3, [r4, #4]
   1c4bc:	f3bf 8f5b 	dmb	ish
   1c4c0:	e853 2f00 	ldrex	r2, [r3]
   1c4c4:	1c51      	adds	r1, r2, #1
   1c4c6:	e843 1000 	strex	r0, r1, [r3]
   1c4ca:	2800      	cmp	r0, #0
   1c4cc:	d1f8      	bne.n	1c4c0 <out_func+0x1c>
   1c4ce:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1c4d2:	68a3      	ldr	r3, [r4, #8]
   1c4d4:	549d      	strb	r5, [r3, r2]
}
   1c4d6:	2000      	movs	r0, #0
   1c4d8:	bd38      	pop	{r3, r4, r5, pc}

0001c4da <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   1c4da:	6883      	ldr	r3, [r0, #8]
   1c4dc:	6a1b      	ldr	r3, [r3, #32]
   1c4de:	b103      	cbz	r3, 1c4e2 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   1c4e0:	4718      	bx	r3
}
   1c4e2:	4770      	bx	lr

0001c4e4 <tty_putchar>:
{
   1c4e4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1c4e8:	4604      	mov	r4, r0
   1c4ea:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   1c4ec:	f100 062c 	add.w	r6, r0, #44	; 0x2c
			 k_is_in_isr() ? K_NO_WAIT :
   1c4f0:	f000 fea2 	bl	1d238 <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   1c4f4:	bba8      	cbnz	r0, 1c562 <tty_putchar+0x7e>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1c4f6:	6d21      	ldr	r1, [r4, #80]	; 0x50
	res = k_sem_take(&tty->tx_sem,
   1c4f8:	1c4b      	adds	r3, r1, #1
   1c4fa:	d035      	beq.n	1c568 <tty_putchar+0x84>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1c4fc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1c500:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c504:	f240 38e7 	movw	r8, #999	; 0x3e7
   1c508:	f04f 0900 	mov.w	r9, #0
   1c50c:	fbc0 8901 	smlal	r8, r9, r0, r1
   1c510:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c514:	2300      	movs	r3, #0
   1c516:	4640      	mov	r0, r8
   1c518:	4649      	mov	r1, r9
   1c51a:	f7e4 facd 	bl	ab8 <__aeabi_uldivmod>
   1c51e:	4602      	mov	r2, r0
   1c520:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1c522:	4630      	mov	r0, r6
   1c524:	f7ef f812 	bl	b54c <z_impl_k_sem_take>
	if (res < 0) {
   1c528:	2800      	cmp	r0, #0
   1c52a:	db18      	blt.n	1c55e <tty_putchar+0x7a>
	__asm__ volatile(
   1c52c:	f04f 0320 	mov.w	r3, #32
   1c530:	f3ef 8211 	mrs	r2, BASEPRI
   1c534:	f383 8812 	msr	BASEPRI_MAX, r3
   1c538:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   1c53c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
	if (tx_next >= tty->tx_ringbuf_sz) {
   1c540:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	tx_next = tty->tx_put + 1;
   1c542:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
   1c544:	4298      	cmp	r0, r3
   1c546:	bf98      	it	ls
   1c548:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
   1c54a:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
   1c54e:	4298      	cmp	r0, r3
   1c550:	d10d      	bne.n	1c56e <tty_putchar+0x8a>
	__asm__ volatile(
   1c552:	f382 8811 	msr	BASEPRI, r2
   1c556:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   1c55a:	f06f 001b 	mvn.w	r0, #27
}
   1c55e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	res = k_sem_take(&tty->tx_sem,
   1c562:	2200      	movs	r2, #0
   1c564:	4613      	mov	r3, r2
   1c566:	e7dc      	b.n	1c522 <tty_putchar+0x3e>
   1c568:	f04f 32ff 	mov.w	r2, #4294967295
   1c56c:	e7fa      	b.n	1c564 <tty_putchar+0x80>
	tty->tx_ringbuf[tty->tx_put] = c;
   1c56e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1c570:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
   1c572:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
   1c576:	f382 8811 	msr	BASEPRI, r2
   1c57a:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   1c57e:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_enable != NULL) {
   1c580:	6883      	ldr	r3, [r0, #8]
   1c582:	69db      	ldr	r3, [r3, #28]
   1c584:	b113      	cbz	r3, 1c58c <tty_putchar+0xa8>
		api->irq_tx_enable(dev);
   1c586:	4798      	blx	r3
	return 0;
   1c588:	2000      	movs	r0, #0
   1c58a:	e7e8      	b.n	1c55e <tty_putchar+0x7a>
   1c58c:	4618      	mov	r0, r3
   1c58e:	e7e6      	b.n	1c55e <tty_putchar+0x7a>

0001c590 <tty_uart_isr>:
{
   1c590:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c592:	4605      	mov	r5, r0
   1c594:	460c      	mov	r4, r1
	if (api->irq_update == NULL) {
   1c596:	6883      	ldr	r3, [r0, #8]
   1c598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c59a:	b103      	cbz	r3, 1c59e <tty_uart_isr+0xe>
	return api->irq_update(dev);
   1c59c:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   1c59e:	68ab      	ldr	r3, [r5, #8]
   1c5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c5a2:	b98b      	cbnz	r3, 1c5c8 <tty_uart_isr+0x38>
	k_sem_give(&tty->rx_sem);
   1c5a4:	1d26      	adds	r6, r4, #4
	if (api->fifo_read == NULL) {
   1c5a6:	68ab      	ldr	r3, [r5, #8]
   1c5a8:	699b      	ldr	r3, [r3, #24]
   1c5aa:	b9f3      	cbnz	r3, 1c5ea <tty_uart_isr+0x5a>
	int rx_next = tty->rx_put + 1;
   1c5ac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
	if (rx_next >= tty->rx_ringbuf_sz) {
   1c5ae:	6a21      	ldr	r1, [r4, #32]
	int rx_next = tty->rx_put + 1;
   1c5b0:	1c53      	adds	r3, r2, #1
		rx_next = 0;
   1c5b2:	4299      	cmp	r1, r3
   1c5b4:	bf98      	it	ls
   1c5b6:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
   1c5b8:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   1c5ba:	4299      	cmp	r1, r3
   1c5bc:	d11d      	bne.n	1c5fa <tty_uart_isr+0x6a>
		tty_putchar(tty, '~');
   1c5be:	217e      	movs	r1, #126	; 0x7e
   1c5c0:	4620      	mov	r0, r4
   1c5c2:	f7ff ff8f 	bl	1c4e4 <tty_putchar>
		return 1;
   1c5c6:	e7ee      	b.n	1c5a6 <tty_uart_isr+0x16>
	return api->irq_rx_ready(dev);
   1c5c8:	4628      	mov	r0, r5
   1c5ca:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   1c5cc:	2800      	cmp	r0, #0
   1c5ce:	d1e9      	bne.n	1c5a4 <tty_uart_isr+0x14>
	if (api->irq_tx_ready == NULL) {
   1c5d0:	68ab      	ldr	r3, [r5, #8]
   1c5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c5d4:	b9d3      	cbnz	r3, 1c60c <tty_uart_isr+0x7c>
		if (tty->tx_get == tty->tx_put) {
   1c5d6:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   1c5da:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
   1c5de:	429a      	cmp	r2, r3
   1c5e0:	d11a      	bne.n	1c618 <tty_uart_isr+0x88>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   1c5e2:	4628      	mov	r0, r5
   1c5e4:	f7ff ff79 	bl	1c4da <z_impl_uart_irq_tx_disable>
}
   1c5e8:	e014      	b.n	1c614 <tty_uart_isr+0x84>
	return api->fifo_read(dev, rx_data, size);
   1c5ea:	2201      	movs	r2, #1
   1c5ec:	f10d 0107 	add.w	r1, sp, #7
   1c5f0:	4628      	mov	r0, r5
   1c5f2:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   1c5f4:	2800      	cmp	r0, #0
   1c5f6:	d1d9      	bne.n	1c5ac <tty_uart_isr+0x1c>
   1c5f8:	e7ea      	b.n	1c5d0 <tty_uart_isr+0x40>
	tty->rx_ringbuf[tty->rx_put] = c;
   1c5fa:	69e1      	ldr	r1, [r4, #28]
			tty_irq_input_hook(tty, c);
   1c5fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
   1c600:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
   1c602:	84e3      	strh	r3, [r4, #38]	; 0x26
	z_impl_k_sem_give(sem);
   1c604:	4630      	mov	r0, r6
   1c606:	f7ee ff7b 	bl	b500 <z_impl_k_sem_give>
}
   1c60a:	e7cc      	b.n	1c5a6 <tty_uart_isr+0x16>
	return api->irq_tx_ready(dev);
   1c60c:	4628      	mov	r0, r5
   1c60e:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   1c610:	2800      	cmp	r0, #0
   1c612:	d1e0      	bne.n	1c5d6 <tty_uart_isr+0x46>
}
   1c614:	b002      	add	sp, #8
   1c616:	bd70      	pop	{r4, r5, r6, pc}
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   1c618:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1c61a:	1c5a      	adds	r2, r3, #1
   1c61c:	4419      	add	r1, r3
	if (api->fifo_fill == NULL) {
   1c61e:	68ab      	ldr	r3, [r5, #8]
   1c620:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
   1c624:	695b      	ldr	r3, [r3, #20]
   1c626:	b113      	cbz	r3, 1c62e <tty_uart_isr+0x9e>
	return api->fifo_fill(dev, tx_data, size);
   1c628:	2201      	movs	r2, #1
   1c62a:	4628      	mov	r0, r5
   1c62c:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   1c62e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1c630:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   1c634:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
   1c636:	bf24      	itt	cs
   1c638:	2300      	movcs	r3, #0
   1c63a:	f8a4 304c 	strhcs.w	r3, [r4, #76]	; 0x4c
	z_impl_k_sem_give(sem);
   1c63e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1c642:	f7ee ff5d 	bl	b500 <z_impl_k_sem_give>
}
   1c646:	e7e5      	b.n	1c614 <tty_uart_isr+0x84>

0001c648 <tty_read>:
{
   1c648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (tty->rx_ringbuf_sz == 0U) {
   1c64c:	6a04      	ldr	r4, [r0, #32]
{
   1c64e:	b085      	sub	sp, #20
   1c650:	4605      	mov	r5, r0
   1c652:	460e      	mov	r6, r1
   1c654:	4617      	mov	r7, r2
	if (tty->rx_ringbuf_sz == 0U) {
   1c656:	2c00      	cmp	r4, #0
   1c658:	d175      	bne.n	1c746 <tty_read+0xfe>
	uint32_t timeout = tty->rx_timeout;
   1c65a:	f8d0 9028 	ldr.w	r9, [r0, #40]	; 0x28
	while (size) {
   1c65e:	b18f      	cbz	r7, 1c684 <tty_read+0x3c>
		res = uart_poll_in(tty->uart_dev, &c);
   1c660:	6828      	ldr	r0, [r5, #0]
	if (api->poll_in == NULL) {
   1c662:	6883      	ldr	r3, [r0, #8]
   1c664:	681b      	ldr	r3, [r3, #0]
   1c666:	b18b      	cbz	r3, 1c68c <tty_read+0x44>
	return api->poll_in(dev, p_char);
   1c668:	f10d 010f 	add.w	r1, sp, #15
   1c66c:	4798      	blx	r3
		if (res <= -2) {
   1c66e:	f1b0 3fff 	cmp.w	r0, #4294967295
   1c672:	4680      	mov	r8, r0
   1c674:	da0d      	bge.n	1c692 <tty_read+0x4a>
			if (out_size == 0) {
   1c676:	b92c      	cbnz	r4, 1c684 <tty_read+0x3c>
				errno = res;
   1c678:	f000 f8c6 	bl	1c808 <__errno>
				return -1;
   1c67c:	f04f 34ff 	mov.w	r4, #4294967295
				errno = res;
   1c680:	f8c0 8000 	str.w	r8, [r0]
}
   1c684:	4620      	mov	r0, r4
   1c686:	b005      	add	sp, #20
   1c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOSYS;
   1c68c:	f06f 0857 	mvn.w	r8, #87	; 0x57
   1c690:	e7f1      	b.n	1c676 <tty_read+0x2e>
		if (res == 0) {
   1c692:	b958      	cbnz	r0, 1c6ac <tty_read+0x64>
			*p++ = c;
   1c694:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1c698:	f806 3b01 	strb.w	r3, [r6], #1
		if (size == 0 ||
   1c69c:	3f01      	subs	r7, #1
			out_size++;
   1c69e:	f104 0401 	add.w	r4, r4, #1
		if (size == 0 ||
   1c6a2:	d0ef      	beq.n	1c684 <tty_read+0x3c>
   1c6a4:	f1b9 3fff 	cmp.w	r9, #4294967295
   1c6a8:	d103      	bne.n	1c6b2 <tty_read+0x6a>
   1c6aa:	e7d8      	b.n	1c65e <tty_read+0x16>
   1c6ac:	f1b9 3fff 	cmp.w	r9, #4294967295
   1c6b0:	d005      	beq.n	1c6be <tty_read+0x76>
		    ((timeout != SYS_FOREVER_MS) && timeout-- == 0U)) {
   1c6b2:	f109 33ff 	add.w	r3, r9, #4294967295
   1c6b6:	f1b9 0f00 	cmp.w	r9, #0
   1c6ba:	d0e3      	beq.n	1c684 <tty_read+0x3c>
   1c6bc:	4699      	mov	r9, r3
		if (res == -1) {
   1c6be:	f1b8 3fff 	cmp.w	r8, #4294967295
   1c6c2:	d1cc      	bne.n	1c65e <tty_read+0x16>
	return z_impl_k_sleep(timeout);
   1c6c4:	2100      	movs	r1, #0
   1c6c6:	2021      	movs	r0, #33	; 0x21
   1c6c8:	f7ef fb80 	bl	bdcc <z_impl_k_sleep>
   1c6cc:	e7c7      	b.n	1c65e <tty_read+0x16>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   1c6ce:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1c6d0:	1c4b      	adds	r3, r1, #1
   1c6d2:	d034      	beq.n	1c73e <tty_read+0xf6>
   1c6d4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1c6d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1c6dc:	46c3      	mov	fp, r8
   1c6de:	46cc      	mov	ip, r9
   1c6e0:	fbc0 bc01 	smlal	fp, ip, r0, r1
   1c6e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c6e8:	2300      	movs	r3, #0
   1c6ea:	4658      	mov	r0, fp
   1c6ec:	4661      	mov	r1, ip
   1c6ee:	f7e4 f9e3 	bl	ab8 <__aeabi_uldivmod>
   1c6f2:	4602      	mov	r2, r0
   1c6f4:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1c6f6:	9801      	ldr	r0, [sp, #4]
   1c6f8:	f7ee ff28 	bl	b54c <z_impl_k_sem_take>
	if (res < 0) {
   1c6fc:	1e04      	subs	r4, r0, #0
   1c6fe:	db2b      	blt.n	1c758 <tty_read+0x110>
	__asm__ volatile(
   1c700:	f04f 0320 	mov.w	r3, #32
   1c704:	f3ef 8011 	mrs	r0, BASEPRI
   1c708:	f383 8812 	msr	BASEPRI_MAX, r3
   1c70c:	f3bf 8f6f 	isb	sy
	c = tty->rx_ringbuf[tty->rx_get++];
   1c710:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   1c712:	69e9      	ldr	r1, [r5, #28]
   1c714:	1c53      	adds	r3, r2, #1
   1c716:	b29b      	uxth	r3, r3
   1c718:	84ab      	strh	r3, [r5, #36]	; 0x24
   1c71a:	5c8a      	ldrb	r2, [r1, r2]
	if (tty->rx_get >= tty->rx_ringbuf_sz) {
   1c71c:	6a29      	ldr	r1, [r5, #32]
   1c71e:	428b      	cmp	r3, r1
		tty->rx_get = 0U;
   1c720:	bf24      	itt	cs
   1c722:	2300      	movcs	r3, #0
   1c724:	84ab      	strhcs	r3, [r5, #36]	; 0x24
	__asm__ volatile(
   1c726:	f380 8811 	msr	BASEPRI, r0
   1c72a:	f3bf 8f6f 	isb	sy
		*p++ = (uint8_t)res;
   1c72e:	f806 200a 	strb.w	r2, [r6, sl]
		out_size++;
   1c732:	f10a 0a01 	add.w	sl, sl, #1
	while (size--) {
   1c736:	45ba      	cmp	sl, r7
   1c738:	d1c9      	bne.n	1c6ce <tty_read+0x86>
	return out_size;
   1c73a:	4654      	mov	r4, sl
   1c73c:	e7a2      	b.n	1c684 <tty_read+0x3c>
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   1c73e:	f04f 32ff 	mov.w	r2, #4294967295
   1c742:	4613      	mov	r3, r2
   1c744:	e7d7      	b.n	1c6f6 <tty_read+0xae>
   1c746:	1d03      	adds	r3, r0, #4
	size_t out_size = 0;
   1c748:	f04f 0a00 	mov.w	sl, #0
	res = k_sem_take(&tty->rx_sem, SYS_TIMEOUT_MS(tty->rx_timeout));
   1c74c:	9301      	str	r3, [sp, #4]
   1c74e:	f240 38e7 	movw	r8, #999	; 0x3e7
   1c752:	f04f 0900 	mov.w	r9, #0
   1c756:	e7ee      	b.n	1c736 <tty_read+0xee>
			if (out_size == 0) {
   1c758:	f1ba 0f00 	cmp.w	sl, #0
   1c75c:	d1ed      	bne.n	1c73a <tty_read+0xf2>
				errno = -res;
   1c75e:	f000 f853 	bl	1c808 <__errno>
   1c762:	4263      	negs	r3, r4
   1c764:	6003      	str	r3, [r0, #0]
				return res;
   1c766:	e78d      	b.n	1c684 <tty_read+0x3c>

0001c768 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1c768:	b570      	push	{r4, r5, r6, lr}
   1c76a:	4604      	mov	r4, r0
   1c76c:	460e      	mov	r6, r1
	uart_irq_rx_disable(tty->uart_dev);
   1c76e:	6800      	ldr	r0, [r0, #0]
{
   1c770:	4615      	mov	r5, r2
	if (api->irq_rx_disable != NULL) {
   1c772:	6883      	ldr	r3, [r0, #8]
   1c774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c776:	b103      	cbz	r3, 1c77a <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   1c778:	4798      	blx	r3

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
   1c77a:	e9c4 6507 	strd	r6, r5, [r4, #28]

	if (size > 0) {
   1c77e:	b155      	cbz	r5, 1c796 <tty_set_rx_buf+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c780:	f04f 32ff 	mov.w	r2, #4294967295
   1c784:	2100      	movs	r1, #0
   1c786:	1d20      	adds	r0, r4, #4
   1c788:	f000 fd71 	bl	1d26e <z_impl_k_sem_init>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
   1c78c:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
   1c78e:	6883      	ldr	r3, [r0, #8]
   1c790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c792:	b103      	cbz	r3, 1c796 <tty_set_rx_buf+0x2e>
		api->irq_rx_enable(dev);
   1c794:	4798      	blx	r3
	}

	return 0;
}
   1c796:	2000      	movs	r0, #0
   1c798:	bd70      	pop	{r4, r5, r6, pc}

0001c79a <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1c79a:	b570      	push	{r4, r5, r6, lr}
   1c79c:	4604      	mov	r4, r0
   1c79e:	460e      	mov	r6, r1
   1c7a0:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   1c7a2:	6800      	ldr	r0, [r0, #0]
	z_impl_uart_irq_tx_disable(dev);
   1c7a4:	f7ff fe99 	bl	1c4da <z_impl_uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;
   1c7a8:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
   1c7ac:	f04f 32ff 	mov.w	r2, #4294967295
   1c7b0:	18a9      	adds	r1, r5, r2
   1c7b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1c7b6:	f000 fd5a 	bl	1d26e <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   1c7ba:	2000      	movs	r0, #0
   1c7bc:	bd70      	pop	{r4, r5, r6, pc}

0001c7be <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1c7be:	2200      	movs	r2, #0
   1c7c0:	e9c0 2200 	strd	r2, r2, [r0]
   1c7c4:	6082      	str	r2, [r0, #8]
}
   1c7c6:	4770      	bx	lr

0001c7c8 <abort_function>:
{
   1c7c8:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1c7ca:	2000      	movs	r0, #0
   1c7cc:	f7e8 ff6e 	bl	56ac <sys_reboot>

0001c7d0 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1c7d0:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1c7d2:	6800      	ldr	r0, [r0, #0]
   1c7d4:	f7e9 be98 	b.w	6508 <z_arm_fatal_error>

0001c7d8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1c7d8:	2100      	movs	r1, #0
   1c7da:	2001      	movs	r0, #1
   1c7dc:	f7e9 be94 	b.w	6508 <z_arm_fatal_error>

0001c7e0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1c7e0:	b508      	push	{r3, lr}
	handler();
   1c7e2:	f7e9 ff13 	bl	660c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1c7e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1c7ea:	f7e9 bfef 	b.w	67cc <z_arm_exc_exit>

0001c7ee <malloc_prepare>:
}
   1c7ee:	2000      	movs	r0, #0
   1c7f0:	4770      	bx	lr

0001c7f2 <_stdout_hook_default>:
}
   1c7f2:	f04f 30ff 	mov.w	r0, #4294967295
   1c7f6:	4770      	bx	lr

0001c7f8 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1c7f8:	f04f 32ff 	mov.w	r2, #4294967295
   1c7fc:	f04f 33ff 	mov.w	r3, #4294967295
   1c800:	f7ee bdba 	b.w	b378 <z_impl_k_mutex_lock>

0001c804 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   1c804:	f7ee be36 	b.w	b474 <z_impl_k_mutex_unlock>

0001c808 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1c808:	f7ee bb6a 	b.w	aee0 <z_impl_z_errno>

0001c80c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1c80c:	b084      	sub	sp, #16
   1c80e:	ab04      	add	r3, sp, #16
   1c810:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1c814:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1c818:	2b06      	cmp	r3, #6
   1c81a:	d108      	bne.n	1c82e <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1c81c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c820:	2201      	movs	r2, #1
   1c822:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1c826:	f3bf 8f4f 	dsb	sy
        __WFE();
   1c82a:	bf20      	wfe
    while (true)
   1c82c:	e7fd      	b.n	1c82a <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1c82e:	b004      	add	sp, #16
   1c830:	4770      	bx	lr

0001c832 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1c832:	b084      	sub	sp, #16
   1c834:	ab04      	add	r3, sp, #16
   1c836:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1c83a:	2300      	movs	r3, #0
   1c83c:	f383 8811 	msr	BASEPRI, r3
   1c840:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1c844:	b004      	add	sp, #16
   1c846:	4770      	bx	lr

0001c848 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c848:	6902      	ldr	r2, [r0, #16]
   1c84a:	b2cb      	uxtb	r3, r1
   1c84c:	210c      	movs	r1, #12
   1c84e:	fb03 2101 	mla	r1, r3, r1, r2
   1c852:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1c854:	f000 0007 	and.w	r0, r0, #7
   1c858:	4770      	bx	lr

0001c85a <set_off_state>:
	__asm__ volatile(
   1c85a:	f04f 0320 	mov.w	r3, #32
   1c85e:	f3ef 8211 	mrs	r2, BASEPRI
   1c862:	f383 8812 	msr	BASEPRI_MAX, r3
   1c866:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c86a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c86c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1c870:	d001      	beq.n	1c876 <set_off_state+0x1c>
   1c872:	428b      	cmp	r3, r1
   1c874:	d107      	bne.n	1c886 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c876:	2301      	movs	r3, #1
   1c878:	6003      	str	r3, [r0, #0]
	int err = 0;
   1c87a:	2000      	movs	r0, #0
	__asm__ volatile(
   1c87c:	f382 8811 	msr	BASEPRI, r2
   1c880:	f3bf 8f6f 	isb	sy
}
   1c884:	4770      	bx	lr
		err = -EPERM;
   1c886:	f04f 30ff 	mov.w	r0, #4294967295
   1c88a:	e7f7      	b.n	1c87c <set_off_state+0x22>

0001c88c <set_starting_state>:
{
   1c88c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c88e:	f04f 0320 	mov.w	r3, #32
   1c892:	f3ef 8211 	mrs	r2, BASEPRI
   1c896:	f383 8812 	msr	BASEPRI_MAX, r3
   1c89a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c89e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1c8a0:	f003 0407 	and.w	r4, r3, #7
   1c8a4:	2c01      	cmp	r4, #1
   1c8a6:	d106      	bne.n	1c8b6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1c8a8:	6001      	str	r1, [r0, #0]
	int err = 0;
   1c8aa:	2000      	movs	r0, #0
	__asm__ volatile(
   1c8ac:	f382 8811 	msr	BASEPRI, r2
   1c8b0:	f3bf 8f6f 	isb	sy
}
   1c8b4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1c8b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1c8ba:	428b      	cmp	r3, r1
		err = -EALREADY;
   1c8bc:	bf14      	ite	ne
   1c8be:	f04f 30ff 	movne.w	r0, #4294967295
   1c8c2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1c8c6:	e7f1      	b.n	1c8ac <set_starting_state+0x20>

0001c8c8 <set_on_state>:
	__asm__ volatile(
   1c8c8:	f04f 0320 	mov.w	r3, #32
   1c8cc:	f3ef 8211 	mrs	r2, BASEPRI
   1c8d0:	f383 8812 	msr	BASEPRI_MAX, r3
   1c8d4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1c8d8:	6803      	ldr	r3, [r0, #0]
   1c8da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c8de:	f043 0302 	orr.w	r3, r3, #2
   1c8e2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1c8e4:	f382 8811 	msr	BASEPRI, r2
   1c8e8:	f3bf 8f6f 	isb	sy
}
   1c8ec:	4770      	bx	lr

0001c8ee <onoff_started_callback>:
	return &data->mgr[type];
   1c8ee:	6900      	ldr	r0, [r0, #16]
{
   1c8f0:	b410      	push	{r4}
	return &data->mgr[type];
   1c8f2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1c8f4:	241c      	movs	r4, #28
   1c8f6:	fb03 0004 	mla	r0, r3, r4, r0
   1c8fa:	2100      	movs	r1, #0
}
   1c8fc:	bc10      	pop	{r4}
	notify(mgr, 0);
   1c8fe:	4710      	bx	r2

0001c900 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1c900:	2000      	movs	r0, #0
   1c902:	f7ed be51 	b.w	a5a8 <nrfx_clock_start>

0001c906 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1c906:	2000      	movs	r0, #0
   1c908:	f7ed be80 	b.w	a60c <nrfx_clock_stop>

0001c90c <blocking_start_callback>:
{
   1c90c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1c90e:	f7ee bdf7 	b.w	b500 <z_impl_k_sem_give>

0001c912 <api_stop>:
{
   1c912:	b538      	push	{r3, r4, r5, lr}
   1c914:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1c916:	240c      	movs	r4, #12
   1c918:	434c      	muls	r4, r1
{
   1c91a:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1c91c:	6900      	ldr	r0, [r0, #16]
   1c91e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1c922:	2180      	movs	r1, #128	; 0x80
   1c924:	4418      	add	r0, r3
   1c926:	f7ff ff98 	bl	1c85a <set_off_state>
	if (err < 0) {
   1c92a:	2800      	cmp	r0, #0
   1c92c:	db04      	blt.n	1c938 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1c92e:	6869      	ldr	r1, [r5, #4]
   1c930:	440c      	add	r4, r1
   1c932:	6863      	ldr	r3, [r4, #4]
   1c934:	4798      	blx	r3
	return 0;
   1c936:	2000      	movs	r0, #0
}
   1c938:	bd38      	pop	{r3, r4, r5, pc}

0001c93a <api_start>:
{
   1c93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c93e:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1c940:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1c942:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1c944:	434c      	muls	r4, r1
{
   1c946:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1c948:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1c94c:	2180      	movs	r1, #128	; 0x80
   1c94e:	4428      	add	r0, r5
{
   1c950:	4690      	mov	r8, r2
   1c952:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1c954:	f7ff ff9a 	bl	1c88c <set_starting_state>
	if (err < 0) {
   1c958:	2800      	cmp	r0, #0
   1c95a:	db06      	blt.n	1c96a <api_start+0x30>
	subdata->cb = cb;
   1c95c:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1c95e:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1c962:	6873      	ldr	r3, [r6, #4]
   1c964:	591b      	ldr	r3, [r3, r4]
   1c966:	4798      	blx	r3
	return 0;
   1c968:	2000      	movs	r0, #0
}
   1c96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c96e <uart_poll_out>:
	api->poll_out(dev, out_char);
   1c96e:	6883      	ldr	r3, [r0, #8]
   1c970:	685b      	ldr	r3, [r3, #4]
   1c972:	4718      	bx	r3

0001c974 <debug_hook_out_nop>:
}
   1c974:	2000      	movs	r0, #0
   1c976:	4770      	bx	lr

0001c978 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1c978:	b570      	push	{r4, r5, r6, lr}
   1c97a:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c97c:	6801      	ldr	r1, [r0, #0]
{
   1c97e:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c980:	b189      	cbz	r1, 1c9a6 <gpio_fire_callbacks+0x2e>
	return node->next;
   1c982:	680c      	ldr	r4, [r1, #0]
   1c984:	2c00      	cmp	r4, #0
   1c986:	bf38      	it	cc
   1c988:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   1c98a:	688a      	ldr	r2, [r1, #8]
   1c98c:	402a      	ands	r2, r5
   1c98e:	d002      	beq.n	1c996 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c990:	684b      	ldr	r3, [r1, #4]
   1c992:	4630      	mov	r0, r6
   1c994:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c996:	b134      	cbz	r4, 1c9a6 <gpio_fire_callbacks+0x2e>
   1c998:	6823      	ldr	r3, [r4, #0]
   1c99a:	2b00      	cmp	r3, #0
   1c99c:	bf38      	it	cc
   1c99e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c9a0:	4621      	mov	r1, r4
   1c9a2:	461c      	mov	r4, r3
   1c9a4:	e7f1      	b.n	1c98a <gpio_fire_callbacks+0x12>
		}
	}
}
   1c9a6:	bd70      	pop	{r4, r5, r6, pc}

0001c9a8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c9a8:	6843      	ldr	r3, [r0, #4]
   1c9aa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c9ac:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1c9b0:	600b      	str	r3, [r1, #0]
}
   1c9b2:	2000      	movs	r0, #0
   1c9b4:	4770      	bx	lr

0001c9b6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c9b6:	6843      	ldr	r3, [r0, #4]
   1c9b8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1c9ba:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1c9be:	4042      	eors	r2, r0
   1c9c0:	400a      	ands	r2, r1
   1c9c2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1c9c4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c9c8:	2000      	movs	r0, #0
   1c9ca:	4770      	bx	lr

0001c9cc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c9cc:	6843      	ldr	r3, [r0, #4]
   1c9ce:	685b      	ldr	r3, [r3, #4]
}
   1c9d0:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1c9d2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1c9d6:	4770      	bx	lr

0001c9d8 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c9d8:	6843      	ldr	r3, [r0, #4]
   1c9da:	685b      	ldr	r3, [r3, #4]
}
   1c9dc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1c9de:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1c9e2:	4770      	bx	lr

0001c9e4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c9e4:	6843      	ldr	r3, [r0, #4]
   1c9e6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c9e8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1c9ec:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1c9ee:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1c9f2:	2000      	movs	r0, #0
   1c9f4:	4770      	bx	lr

0001c9f6 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c9f6:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   1c9f8:	6858      	ldr	r0, [r3, #4]
{
   1c9fa:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1c9fc:	b158      	cbz	r0, 1ca16 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9fe:	2400      	movs	r4, #0
   1ca00:	4281      	cmp	r1, r0
   1ca02:	d113      	bne.n	1ca2c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1ca04:	6808      	ldr	r0, [r1, #0]
   1ca06:	b95c      	cbnz	r4, 1ca20 <gpio_nrfx_manage_callback+0x2a>
   1ca08:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1ca0a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ca0c:	42a1      	cmp	r1, r4
   1ca0e:	d100      	bne.n	1ca12 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1ca10:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1ca12:	2000      	movs	r0, #0
   1ca14:	6008      	str	r0, [r1, #0]
	if (set) {
   1ca16:	b972      	cbnz	r2, 1ca36 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1ca18:	2000      	movs	r0, #0
}
   1ca1a:	bd30      	pop	{r4, r5, pc}
   1ca1c:	4628      	mov	r0, r5
   1ca1e:	e7ef      	b.n	1ca00 <gpio_nrfx_manage_callback+0xa>
   1ca20:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ca22:	6898      	ldr	r0, [r3, #8]
   1ca24:	4281      	cmp	r1, r0
	list->tail = node;
   1ca26:	bf08      	it	eq
   1ca28:	609c      	streq	r4, [r3, #8]
}
   1ca2a:	e7f2      	b.n	1ca12 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ca2c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ca2e:	4604      	mov	r4, r0
   1ca30:	2d00      	cmp	r5, #0
   1ca32:	d1f3      	bne.n	1ca1c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1ca34:	b13a      	cbz	r2, 1ca46 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1ca36:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ca38:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ca3a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1ca3c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ca3e:	2800      	cmp	r0, #0
   1ca40:	d1ea      	bne.n	1ca18 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1ca42:	6099      	str	r1, [r3, #8]
}
   1ca44:	e7e9      	b.n	1ca1a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1ca46:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ca4a:	e7e6      	b.n	1ca1a <gpio_nrfx_manage_callback+0x24>

0001ca4c <cfg_level_pins>:
{
   1ca4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   1ca50:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1ca52:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1ca56:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1ca58:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1ca5c:	4313      	orrs	r3, r2
   1ca5e:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1ca62:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1ca64:	2500      	movs	r5, #0
	while (level_pins) {
   1ca66:	b90c      	cbnz	r4, 1ca6c <cfg_level_pins+0x20>
}
   1ca68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1ca6c:	4226      	tst	r6, r4
   1ca6e:	d010      	beq.n	1ca92 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ca70:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ca72:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ca76:	40e9      	lsrs	r1, r5
   1ca78:	f001 0101 	and.w	r1, r1, #1
   1ca7c:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1ca80:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ca84:	b2c9      	uxtb	r1, r1
   1ca86:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1ca8a:	f7ea fd51 	bl	7530 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1ca8e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1ca92:	3501      	adds	r5, #1
		bit <<= 1;
   1ca94:	0076      	lsls	r6, r6, #1
   1ca96:	e7e6      	b.n	1ca66 <cfg_level_pins+0x1a>

0001ca98 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1ca98:	2301      	movs	r3, #1
   1ca9a:	fa03 f101 	lsl.w	r1, r3, r1
   1ca9e:	6903      	ldr	r3, [r0, #16]
   1caa0:	681b      	ldr	r3, [r3, #0]
   1caa2:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1caa4:	bf18      	it	ne
   1caa6:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1caaa:	b112      	cbz	r2, 1cab2 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1caac:	6883      	ldr	r3, [r0, #8]
   1caae:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1cab0:	4718      	bx	r3
   1cab2:	6883      	ldr	r3, [r0, #8]
   1cab4:	691b      	ldr	r3, [r3, #16]
   1cab6:	e7fb      	b.n	1cab0 <gpio_pin_set+0x18>

0001cab8 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1cab8:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1caba:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1cabc:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1cabe:	b1fd      	cbz	r5, 1cb00 <_spi_context_cs_control.isra.0+0x48>
   1cac0:	68ab      	ldr	r3, [r5, #8]
   1cac2:	b1eb      	cbz	r3, 1cb00 <_spi_context_cs_control.isra.0+0x48>
   1cac4:	6818      	ldr	r0, [r3, #0]
   1cac6:	b1d8      	cbz	r0, 1cb00 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   1cac8:	b151      	cbz	r1, 1cae0 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1caca:	7a19      	ldrb	r1, [r3, #8]
   1cacc:	2201      	movs	r2, #1
   1cace:	f7ff ffe3 	bl	1ca98 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   1cad2:	6823      	ldr	r3, [r4, #0]
   1cad4:	689b      	ldr	r3, [r3, #8]
   1cad6:	6858      	ldr	r0, [r3, #4]
}
   1cad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1cadc:	f000 bd52 	b.w	1d584 <z_impl_k_busy_wait>
			if (!force_off &&
   1cae0:	b912      	cbnz	r2, 1cae8 <_spi_context_cs_control.isra.0+0x30>
   1cae2:	88aa      	ldrh	r2, [r5, #4]
   1cae4:	0492      	lsls	r2, r2, #18
   1cae6:	d40b      	bmi.n	1cb00 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   1cae8:	6858      	ldr	r0, [r3, #4]
   1caea:	f000 fd4b 	bl	1d584 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1caee:	6823      	ldr	r3, [r4, #0]
   1caf0:	689b      	ldr	r3, [r3, #8]
   1caf2:	2200      	movs	r2, #0
   1caf4:	7a19      	ldrb	r1, [r3, #8]
   1caf6:	6818      	ldr	r0, [r3, #0]
}
   1caf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1cafc:	f7ff bfcc 	b.w	1ca98 <gpio_pin_set>
}
   1cb00:	bd38      	pop	{r3, r4, r5, pc}

0001cb02 <spi_context_unlock_unconditionally>:
{
   1cb02:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1cb04:	2201      	movs	r2, #1
   1cb06:	2100      	movs	r1, #0
{
   1cb08:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   1cb0a:	f7ff ffd5 	bl	1cab8 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   1cb0e:	6923      	ldr	r3, [r4, #16]
   1cb10:	b933      	cbnz	r3, 1cb20 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1cb12:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1cb14:	f104 0008 	add.w	r0, r4, #8
}
   1cb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cb1c:	f7ee bcf0 	b.w	b500 <z_impl_k_sem_give>
   1cb20:	bd10      	pop	{r4, pc}

0001cb22 <spi_nrfx_release>:
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1cb22:	6900      	ldr	r0, [r0, #16]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1cb24:	6803      	ldr	r3, [r0, #0]
   1cb26:	428b      	cmp	r3, r1
{
   1cb28:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1cb2a:	d106      	bne.n	1cb3a <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   1cb2c:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   1cb30:	b934      	cbnz	r4, 1cb40 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1cb32:	f7ff ffe6 	bl	1cb02 <spi_context_unlock_unconditionally>

	return 0;
   1cb36:	4620      	mov	r0, r4
}
   1cb38:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1cb3a:	f06f 0015 	mvn.w	r0, #21
   1cb3e:	e7fb      	b.n	1cb38 <spi_nrfx_release+0x16>
		return -EBUSY;
   1cb40:	f06f 000f 	mvn.w	r0, #15
   1cb44:	e7f8      	b.n	1cb38 <spi_nrfx_release+0x16>

0001cb46 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   1cb46:	b510      	push	{r4, lr}
   1cb48:	4604      	mov	r4, r0
   1cb4a:	2200      	movs	r2, #0
   1cb4c:	2101      	movs	r1, #1
   1cb4e:	2004      	movs	r0, #4
   1cb50:	f7e9 fd44 	bl	65dc <z_arm_irq_priority_set>
   1cb54:	6920      	ldr	r0, [r4, #16]
   1cb56:	f7ff ffd4 	bl	1cb02 <spi_context_unlock_unconditionally>
   1cb5a:	2000      	movs	r0, #0
   1cb5c:	bd10      	pop	{r4, pc}

0001cb5e <timer_work_handler>:
	TimerIrqHandler();
   1cb5e:	f7eb bde9 	b.w	8734 <TimerIrqHandler>

0001cb62 <k_uptime_get>:
{
   1cb62:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1cb64:	f000 fd0c 	bl	1d580 <z_impl_k_uptime_ticks>
   1cb68:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1cb6c:	fba0 2304 	umull	r2, r3, r0, r4
   1cb70:	fb04 3301 	mla	r3, r4, r1, r3
   1cb74:	0bd0      	lsrs	r0, r2, #15
}
   1cb76:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1cb7a:	0bd9      	lsrs	r1, r3, #15
   1cb7c:	bd10      	pop	{r4, pc}

0001cb7e <RtcGetTimerValue>:
{
   1cb7e:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   1cb80:	f7ff ffef 	bl	1cb62 <k_uptime_get>
}
   1cb84:	bd08      	pop	{r3, pc}

0001cb86 <RtcGetMinimumTimeout>:
}
   1cb86:	2001      	movs	r0, #1
   1cb88:	4770      	bx	lr

0001cb8a <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   1cb8a:	b538      	push	{r3, r4, r5, lr}
   1cb8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1cb90:	f240 34e7 	movw	r4, #999	; 0x3e7
   1cb94:	2500      	movs	r5, #0
   1cb96:	fbe1 4500 	umlal	r4, r5, r1, r0
   1cb9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cb9e:	2300      	movs	r3, #0
   1cba0:	4620      	mov	r0, r4
   1cba2:	4629      	mov	r1, r5
   1cba4:	f7e3 ff88 	bl	ab8 <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   1cba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   1cbac:	f7ef b90e 	b.w	bdcc <z_impl_k_sleep>

0001cbb0 <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   1cbb0:	4770      	bx	lr

0001cbb2 <RtcTick2Ms>:
   1cbb2:	4770      	bx	lr

0001cbb4 <BoardCriticalSectionBegin>:
	__asm__ volatile(
   1cbb4:	f04f 0220 	mov.w	r2, #32
   1cbb8:	f3ef 8311 	mrs	r3, BASEPRI
   1cbbc:	f382 8812 	msr	BASEPRI_MAX, r2
   1cbc0:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   1cbc4:	6003      	str	r3, [r0, #0]
}
   1cbc6:	4770      	bx	lr

0001cbc8 <BoardCriticalSectionEnd>:
	__asm__ volatile(
   1cbc8:	6803      	ldr	r3, [r0, #0]
   1cbca:	f383 8811 	msr	BASEPRI, r3
   1cbce:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   1cbd2:	4770      	bx	lr

0001cbd4 <SX1276CheckRfFrequency>:
}
   1cbd4:	2001      	movs	r0, #1
   1cbd6:	4770      	bx	lr

0001cbd8 <gpio_pin_set.constprop.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1cbd8:	6903      	ldr	r3, [r0, #16]
   1cbda:	681b      	ldr	r3, [r3, #0]
   1cbdc:	2b00      	cmp	r3, #0
		value = (value != 0) ? 0 : 1;
   1cbde:	bfb8      	it	lt
   1cbe0:	f081 0101 	eorlt.w	r1, r1, #1
	if (value != 0)	{
   1cbe4:	b121      	cbz	r1, 1cbf0 <gpio_pin_set.constprop.0+0x18>
	return api->port_set_bits_raw(port, pins);
   1cbe6:	6883      	ldr	r3, [r0, #8]
   1cbe8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1cbea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1cbee:	4718      	bx	r3
   1cbf0:	6883      	ldr	r3, [r0, #8]
   1cbf2:	691b      	ldr	r3, [r3, #16]
   1cbf4:	e7f9      	b.n	1cbea <gpio_pin_set.constprop.0+0x12>

0001cbf6 <SX1276GetBoardTcxoWakeupTime>:
}
   1cbf6:	2000      	movs	r0, #0
   1cbf8:	4770      	bx	lr

0001cbfa <SX1276SetAntSwLowPower>:
}
   1cbfa:	4770      	bx	lr

0001cbfc <SX1276SetBoardTcxo>:
}
   1cbfc:	4770      	bx	lr

0001cbfe <SX1276SetAntSw>:
   1cbfe:	4770      	bx	lr

0001cc00 <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
   1cc00:	3801      	subs	r0, #1
   1cc02:	440a      	add	r2, r1
   1cc04:	4291      	cmp	r1, r2
   1cc06:	d100      	bne.n	1cc0a <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
   1cc08:	4770      	bx	lr
        *dst++ = *src++;
   1cc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1cc0e:	f800 3f01 	strb.w	r3, [r0, #1]!
   1cc12:	e7f7      	b.n	1cc04 <memcpy1+0x4>

0001cc14 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   1cc14:	b570      	push	{r4, r5, r6, lr}
   1cc16:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   1cc18:	f7ff ffb5 	bl	1cb86 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   1cc1c:	2301      	movs	r3, #1
   1cc1e:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   1cc20:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
   1cc22:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   1cc24:	f7eb f848 	bl	7cb8 <RtcGetTimerElapsedTime>
   1cc28:	4428      	add	r0, r5
   1cc2a:	4286      	cmp	r6, r0
   1cc2c:	d203      	bcs.n	1cc36 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   1cc2e:	f7eb f843 	bl	7cb8 <RtcGetTimerElapsedTime>
   1cc32:	4405      	add	r5, r0
   1cc34:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   1cc36:	6820      	ldr	r0, [r4, #0]
}
   1cc38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   1cc3c:	f7eb b84c 	b.w	7cd8 <RtcSetAlarm>

0001cc40 <TimerInit>:
    obj->Timestamp = 0;
   1cc40:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   1cc42:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   1cc46:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   1cc4a:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   1cc4c:	6143      	str	r3, [r0, #20]
}
   1cc4e:	4770      	bx	lr

0001cc50 <TimerSetValue>:
{
   1cc50:	b538      	push	{r3, r4, r5, lr}
   1cc52:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   1cc54:	4608      	mov	r0, r1
   1cc56:	f7ff ffab 	bl	1cbb0 <RtcMs2Tick>
   1cc5a:	4604      	mov	r4, r0
    TimerStop( obj );
   1cc5c:	4628      	mov	r0, r5
   1cc5e:	f7eb fda5 	bl	87ac <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   1cc62:	f7ff ff90 	bl	1cb86 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   1cc66:	42a0      	cmp	r0, r4
   1cc68:	bf38      	it	cc
   1cc6a:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   1cc6c:	e9c5 0000 	strd	r0, r0, [r5]
}
   1cc70:	bd38      	pop	{r3, r4, r5, pc}

0001cc72 <TimerGetCurrentTime>:
{
   1cc72:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   1cc74:	f7ff ff83 	bl	1cb7e <RtcGetTimerValue>
}
   1cc78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   1cc7c:	f7ff bf99 	b.w	1cbb2 <RtcTick2Ms>

0001cc80 <TimerGetElapsedTime>:
{
   1cc80:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   1cc82:	4604      	mov	r4, r0
   1cc84:	b150      	cbz	r0, 1cc9c <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   1cc86:	f7ff ff7a 	bl	1cb7e <RtcGetTimerValue>
   1cc8a:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   1cc8c:	4620      	mov	r0, r4
   1cc8e:	f7ff ff8f 	bl	1cbb0 <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   1cc92:	1a28      	subs	r0, r5, r0
}
   1cc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   1cc98:	f7ff bf8b 	b.w	1cbb2 <RtcTick2Ms>
}
   1cc9c:	bd38      	pop	{r3, r4, r5, pc}

0001cc9e <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   1cc9e:	f7ff bf74 	b.w	1cb8a <DelayMsMcu>

0001cca2 <SX1276Write>:
{
   1cca2:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   1cca4:	2201      	movs	r2, #1
{
   1cca6:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   1ccaa:	f10d 0107 	add.w	r1, sp, #7
   1ccae:	f7eb fc61 	bl	8574 <SX1276WriteBuffer>
}
   1ccb2:	b003      	add	sp, #12
   1ccb4:	f85d fb04 	ldr.w	pc, [sp], #4

0001ccb8 <SX1276Read>:
{
   1ccb8:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   1ccba:	2201      	movs	r2, #1
   1ccbc:	f10d 0107 	add.w	r1, sp, #7
   1ccc0:	f7eb fb90 	bl	83e4 <SX1276ReadBuffer>
}
   1ccc4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ccc8:	b003      	add	sp, #12
   1ccca:	f85d fb04 	ldr.w	pc, [sp], #4

0001ccce <SX1276SetOpMode>:
{
   1ccce:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   1ccd0:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   1ccd2:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   1ccd4:	b964      	cbnz	r4, 1ccf0 <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   1ccd6:	f7ff ff90 	bl	1cbfa <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   1ccda:	2001      	movs	r0, #1
   1ccdc:	f7ff ffec 	bl	1ccb8 <SX1276Read>
   1cce0:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   1cce4:	4321      	orrs	r1, r4
   1cce6:	2001      	movs	r0, #1
}
   1cce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   1ccec:	f7ff bfd9 	b.w	1cca2 <SX1276Write>
        SX1276SetBoardTcxo( true );
   1ccf0:	f7ff ff84 	bl	1cbfc <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   1ccf4:	2000      	movs	r0, #0
   1ccf6:	f7ff ff80 	bl	1cbfa <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   1ccfa:	4620      	mov	r0, r4
   1ccfc:	f7ff ff7f 	bl	1cbfe <SX1276SetAntSw>
   1cd00:	e7eb      	b.n	1ccda <SX1276SetOpMode+0xc>

0001cd02 <SX1276IsChannelFree>:
{
   1cd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd04:	4616      	mov	r6, r2
   1cd06:	461d      	mov	r5, r3
   1cd08:	460c      	mov	r4, r1
   1cd0a:	4607      	mov	r7, r0
    SX1276SetSleep( );
   1cd0c:	f7ec f8e0 	bl	8ed0 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
   1cd10:	2000      	movs	r0, #0
   1cd12:	f7ec fb19 	bl	9348 <SX1276SetModem>
    SX1276SetChannel( freq );
   1cd16:	4638      	mov	r0, r7
   1cd18:	f7eb fe16 	bl	8948 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
   1cd1c:	4620      	mov	r0, r4
   1cd1e:	f7eb fd71 	bl	8804 <GetFskBandwidthRegValue>
   1cd22:	4604      	mov	r4, r0
   1cd24:	4601      	mov	r1, r0
   1cd26:	2012      	movs	r0, #18
   1cd28:	f7ff ffbb 	bl	1cca2 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
   1cd2c:	4621      	mov	r1, r4
   1cd2e:	2013      	movs	r0, #19
   1cd30:	f7ff ffb7 	bl	1cca2 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1cd34:	2005      	movs	r0, #5
   1cd36:	f7ff ffca 	bl	1ccce <SX1276SetOpMode>
    DelayMs( 1 );
   1cd3a:	2001      	movs	r0, #1
   1cd3c:	f7ff ffaf 	bl	1cc9e <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   1cd40:	f7ff ff97 	bl	1cc72 <TimerGetCurrentTime>
   1cd44:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   1cd46:	4620      	mov	r0, r4
   1cd48:	f7ff ff9a 	bl	1cc80 <TimerGetElapsedTime>
   1cd4c:	42a8      	cmp	r0, r5
   1cd4e:	d304      	bcc.n	1cd5a <SX1276IsChannelFree+0x58>
    bool status = true;
   1cd50:	2401      	movs	r4, #1
    SX1276SetSleep( );
   1cd52:	f7ec f8bd 	bl	8ed0 <SX1276SetSleep>
}
   1cd56:	4620      	mov	r0, r4
   1cd58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
   1cd5a:	2000      	movs	r0, #0
   1cd5c:	f7ec fad0 	bl	9300 <SX1276ReadRssi>
        if( rssi > rssiThresh )
   1cd60:	42b0      	cmp	r0, r6
   1cd62:	ddf0      	ble.n	1cd46 <SX1276IsChannelFree+0x44>
            status = false;
   1cd64:	2400      	movs	r4, #0
   1cd66:	e7f4      	b.n	1cd52 <SX1276IsChannelFree+0x50>

0001cd68 <SX1276Random>:
{
   1cd68:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
   1cd6a:	2001      	movs	r0, #1
   1cd6c:	f7ec faec 	bl	9348 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1cd70:	21ff      	movs	r1, #255	; 0xff
   1cd72:	2011      	movs	r0, #17
   1cd74:	f7ff ff95 	bl	1cca2 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1cd78:	2005      	movs	r0, #5
   1cd7a:	f7ff ffa8 	bl	1ccce <SX1276SetOpMode>
   1cd7e:	2400      	movs	r4, #0
    uint32_t rnd = 0;
   1cd80:	4625      	mov	r5, r4
        DelayMs( 1 );
   1cd82:	2001      	movs	r0, #1
   1cd84:	f7ff ff8b 	bl	1cc9e <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   1cd88:	202c      	movs	r0, #44	; 0x2c
   1cd8a:	f7ff ff95 	bl	1ccb8 <SX1276Read>
   1cd8e:	f000 0001 	and.w	r0, r0, #1
   1cd92:	40a0      	lsls	r0, r4
   1cd94:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
   1cd96:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   1cd98:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   1cd9c:	d1f1      	bne.n	1cd82 <SX1276Random+0x1a>
    SX1276SetSleep( );
   1cd9e:	f7ec f897 	bl	8ed0 <SX1276SetSleep>
}
   1cda2:	4628      	mov	r0, r5
   1cda4:	bd38      	pop	{r3, r4, r5, pc}

0001cda6 <SX1276GetWakeupTime>:
{
   1cda6:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   1cda8:	f7ff ff25 	bl	1cbf6 <SX1276GetBoardTcxoWakeupTime>
}
   1cdac:	3001      	adds	r0, #1
   1cdae:	bd08      	pop	{r3, pc}

0001cdb0 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1cdb0:	6843      	ldr	r3, [r0, #4]
   1cdb2:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1cdb4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1cdb8:	05d1      	lsls	r1, r2, #23
{
   1cdba:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1cdbc:	d518      	bpl.n	1cdf0 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cdbe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1cdc2:	b1aa      	cbz	r2, 1cdf0 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1cdc4:	f04f 0120 	mov.w	r1, #32
   1cdc8:	f3ef 8211 	mrs	r2, BASEPRI
   1cdcc:	f381 8812 	msr	BASEPRI_MAX, r1
   1cdd0:	f3bf 8f6f 	isb	sy
   1cdd4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1cdd8:	b131      	cbz	r1, 1cde8 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cdda:	2100      	movs	r1, #0
   1cddc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1cde0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cde4:	2101      	movs	r1, #1
   1cde6:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1cde8:	f382 8811 	msr	BASEPRI, r2
   1cdec:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cdf0:	6842      	ldr	r2, [r0, #4]
   1cdf2:	6852      	ldr	r2, [r2, #4]
   1cdf4:	06d2      	lsls	r2, r2, #27
   1cdf6:	d51a      	bpl.n	1ce2e <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   1cdf8:	f04f 0220 	mov.w	r2, #32
   1cdfc:	f3ef 8111 	mrs	r1, BASEPRI
   1ce00:	f382 8812 	msr	BASEPRI_MAX, r2
   1ce04:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce08:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1ce0c:	b112      	cbz	r2, 1ce14 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1ce0e:	2200      	movs	r2, #0
   1ce10:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1ce14:	6902      	ldr	r2, [r0, #16]
   1ce16:	68d2      	ldr	r2, [r2, #12]
   1ce18:	b10a      	cbz	r2, 1ce1e <uarte_nrfx_isr_int+0x6e>
   1ce1a:	6912      	ldr	r2, [r2, #16]
   1ce1c:	b91a      	cbnz	r2, 1ce26 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   1ce1e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1ce22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1ce26:	f381 8811 	msr	BASEPRI, r1
   1ce2a:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1ce2e:	6902      	ldr	r2, [r0, #16]
   1ce30:	68d2      	ldr	r2, [r2, #12]
   1ce32:	b15a      	cbz	r2, 1ce4c <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce34:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1ce38:	b151      	cbz	r1, 1ce50 <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   1ce3a:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1ce3c:	2100      	movs	r1, #0
   1ce3e:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1ce40:	b134      	cbz	r4, 1ce50 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   1ce42:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1ce46:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1ce4a:	7391      	strb	r1, [r2, #14]
}
   1ce4c:	bc10      	pop	{r4}
   1ce4e:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce50:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1ce54:	b121      	cbz	r1, 1ce60 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ce56:	2100      	movs	r1, #0
   1ce58:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1ce5c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1ce60:	6813      	ldr	r3, [r2, #0]
   1ce62:	2b00      	cmp	r3, #0
   1ce64:	d0f2      	beq.n	1ce4c <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1ce66:	6851      	ldr	r1, [r2, #4]
}
   1ce68:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1ce6a:	4718      	bx	r3

0001ce6c <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1ce6c:	6902      	ldr	r2, [r0, #16]
{
   1ce6e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1ce70:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1ce74:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1ce78:	2000      	movs	r0, #0
   1ce7a:	4770      	bx	lr

0001ce7c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1ce7c:	6843      	ldr	r3, [r0, #4]
   1ce7e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1ce80:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1ce84:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1ce88:	4770      	bx	lr

0001ce8a <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1ce8a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1ce8c:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ce8e:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ce92:	b940      	cbnz	r0, 1cea6 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1ce94:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ce96:	0712      	lsls	r2, r2, #28
   1ce98:	d406      	bmi.n	1cea8 <is_tx_ready+0x1e>
   1ce9a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1ce9e:	3800      	subs	r0, #0
   1cea0:	bf18      	it	ne
   1cea2:	2001      	movne	r0, #1
   1cea4:	4770      	bx	lr
   1cea6:	2001      	movs	r0, #1
}
   1cea8:	4770      	bx	lr

0001ceaa <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1ceaa:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1ceac:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1ceae:	681b      	ldr	r3, [r3, #0]
   1ceb0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ceb4:	b148      	cbz	r0, 1ceca <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1ceb6:	7d52      	ldrb	r2, [r2, #21]
   1ceb8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ceba:	2000      	movs	r0, #0
   1cebc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1cec0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cec4:	2201      	movs	r2, #1
   1cec6:	601a      	str	r2, [r3, #0]
	return 0;
   1cec8:	4770      	bx	lr
		return -1;
   1ceca:	f04f 30ff 	mov.w	r0, #4294967295
}
   1cece:	4770      	bx	lr

0001ced0 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ced0:	2a00      	cmp	r2, #0
{
   1ced2:	b510      	push	{r4, lr}
   1ced4:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ced6:	dd0f      	ble.n	1cef8 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   1ced8:	6843      	ldr	r3, [r0, #4]
   1ceda:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cedc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1cee0:	b148      	cbz	r0, 1cef6 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1cee2:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cee4:	2000      	movs	r0, #0
   1cee6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1ceea:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1ceee:	7d52      	ldrb	r2, [r2, #21]
   1cef0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cef2:	2001      	movs	r0, #1
   1cef4:	6018      	str	r0, [r3, #0]
}
   1cef6:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   1cef8:	2000      	movs	r0, #0
   1cefa:	e7fc      	b.n	1cef6 <uarte_nrfx_fifo_read+0x26>

0001cefc <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1cefc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1cefe:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   1cf00:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1cf02:	f04f 0020 	mov.w	r0, #32
   1cf06:	f3ef 8311 	mrs	r3, BASEPRI
   1cf0a:	f380 8812 	msr	BASEPRI_MAX, r0
   1cf0e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1cf12:	68c9      	ldr	r1, [r1, #12]
   1cf14:	2000      	movs	r0, #0
   1cf16:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1cf18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1cf1c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1cf20:	f383 8811 	msr	BASEPRI, r3
   1cf24:	f3bf 8f6f 	isb	sy
}
   1cf28:	4770      	bx	lr

0001cf2a <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1cf2a:	6903      	ldr	r3, [r0, #16]
   1cf2c:	68db      	ldr	r3, [r3, #12]
   1cf2e:	2201      	movs	r2, #1
   1cf30:	739a      	strb	r2, [r3, #14]
}
   1cf32:	4770      	bx	lr

0001cf34 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1cf34:	6903      	ldr	r3, [r0, #16]
   1cf36:	68db      	ldr	r3, [r3, #12]
   1cf38:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1cf3a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1cf3e:	b962      	cbnz	r2, 1cf5a <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1cf40:	6842      	ldr	r2, [r0, #4]
   1cf42:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf44:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1cf48:	b140      	cbz	r0, 1cf5c <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1cf4a:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1cf4e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1cf52:	d003      	beq.n	1cf5c <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   1cf54:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1cf56:	2001      	movs	r0, #1
   1cf58:	4770      	bx	lr
   1cf5a:	2000      	movs	r0, #0
}
   1cf5c:	4770      	bx	lr

0001cf5e <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1cf5e:	6843      	ldr	r3, [r0, #4]
   1cf60:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf62:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1cf66:	3800      	subs	r0, #0
   1cf68:	bf18      	it	ne
   1cf6a:	2001      	movne	r0, #1
   1cf6c:	4770      	bx	lr

0001cf6e <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   1cf6e:	6843      	ldr	r3, [r0, #4]
   1cf70:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1cf72:	2210      	movs	r2, #16
   1cf74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1cf78:	4770      	bx	lr

0001cf7a <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   1cf7a:	6843      	ldr	r3, [r0, #4]
   1cf7c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1cf7e:	2210      	movs	r2, #16
   1cf80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1cf84:	4770      	bx	lr

0001cf86 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   1cf86:	6843      	ldr	r3, [r0, #4]
   1cf88:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1cf8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cf8e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1cf92:	4770      	bx	lr

0001cf94 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   1cf94:	6843      	ldr	r3, [r0, #4]
   1cf96:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1cf98:	f44f 7200 	mov.w	r2, #512	; 0x200
   1cf9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1cfa0:	4770      	bx	lr

0001cfa2 <uarte_nrfx_irq_update>:
}
   1cfa2:	2001      	movs	r0, #1
   1cfa4:	4770      	bx	lr

0001cfa6 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1cfa6:	6903      	ldr	r3, [r0, #16]
   1cfa8:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1cfaa:	e9c3 1200 	strd	r1, r2, [r3]
}
   1cfae:	4770      	bx	lr

0001cfb0 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1cfb0:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   1cfb2:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cfb4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cfb8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cfbc:	2200      	movs	r2, #0
   1cfbe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1cfc2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1cfc6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1cfca:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cfce:	6842      	ldr	r2, [r0, #4]
   1cfd0:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cfd2:	bf41      	itttt	mi
   1cfd4:	2208      	movmi	r2, #8
   1cfd6:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1cfda:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1cfde:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cfe2:	2201      	movs	r2, #1
   1cfe4:	609a      	str	r2, [r3, #8]
}
   1cfe6:	4770      	bx	lr

0001cfe8 <uarte_nrfx_fifo_fill>:
{
   1cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1cfea:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   1cfec:	68f3      	ldr	r3, [r6, #12]
   1cfee:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1cff0:	f3bf 8f5b 	dmb	ish
   1cff4:	4294      	cmp	r4, r2
   1cff6:	bfa8      	it	ge
   1cff8:	4614      	movge	r4, r2
{
   1cffa:	4605      	mov	r5, r0
   1cffc:	3310      	adds	r3, #16
   1cffe:	2201      	movs	r2, #1
   1d000:	e853 0f00 	ldrex	r0, [r3]
   1d004:	2800      	cmp	r0, #0
   1d006:	d103      	bne.n	1d010 <uarte_nrfx_fifo_fill+0x28>
   1d008:	e843 2700 	strex	r7, r2, [r3]
   1d00c:	2f00      	cmp	r7, #0
   1d00e:	d1f7      	bne.n	1d000 <uarte_nrfx_fifo_fill+0x18>
   1d010:	f3bf 8f5b 	dmb	ish
   1d014:	bf0c      	ite	eq
   1d016:	4613      	moveq	r3, r2
   1d018:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1d01a:	d01d      	beq.n	1d058 <uarte_nrfx_fifo_fill+0x70>
		return 0;
   1d01c:	461c      	mov	r4, r3
}
   1d01e:	4620      	mov	r0, r4
   1d020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d022:	68f2      	ldr	r2, [r6, #12]
   1d024:	5cc8      	ldrb	r0, [r1, r3]
   1d026:	6892      	ldr	r2, [r2, #8]
   1d028:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   1d02a:	3301      	adds	r3, #1
   1d02c:	42a3      	cmp	r3, r4
   1d02e:	dbf8      	blt.n	1d022 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   1d030:	f04f 0320 	mov.w	r3, #32
   1d034:	f3ef 8711 	mrs	r7, BASEPRI
   1d038:	f383 8812 	msr	BASEPRI_MAX, r3
   1d03c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1d040:	4628      	mov	r0, r5
   1d042:	f7ff ff22 	bl	1ce8a <is_tx_ready>
   1d046:	68f3      	ldr	r3, [r6, #12]
   1d048:	b940      	cbnz	r0, 1d05c <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   1d04a:	6118      	str	r0, [r3, #16]
		len = 0;
   1d04c:	4604      	mov	r4, r0
	__asm__ volatile(
   1d04e:	f387 8811 	msr	BASEPRI, r7
   1d052:	f3bf 8f6f 	isb	sy
	return len;
   1d056:	e7e2      	b.n	1d01e <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   1d058:	2300      	movs	r3, #0
   1d05a:	e7e7      	b.n	1d02c <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   1d05c:	6899      	ldr	r1, [r3, #8]
   1d05e:	4622      	mov	r2, r4
   1d060:	4628      	mov	r0, r5
   1d062:	f7ff ffa5 	bl	1cfb0 <tx_start>
   1d066:	e7f2      	b.n	1d04e <uarte_nrfx_fifo_fill+0x66>

0001d068 <uarte_nrfx_irq_is_pending>:
{
   1d068:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1d06a:	6843      	ldr	r3, [r0, #4]
   1d06c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1d06e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1d072:	025b      	lsls	r3, r3, #9
{
   1d074:	4604      	mov	r4, r0
		||
   1d076:	d405      	bmi.n	1d084 <uarte_nrfx_irq_is_pending+0x1c>
   1d078:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1d07c:	f010 0010 	ands.w	r0, r0, #16
   1d080:	d106      	bne.n	1d090 <uarte_nrfx_irq_is_pending+0x28>
}
   1d082:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d084:	f7ff ff56 	bl	1cf34 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1d088:	2800      	cmp	r0, #0
   1d08a:	d0f5      	beq.n	1d078 <uarte_nrfx_irq_is_pending+0x10>
		||
   1d08c:	2001      	movs	r0, #1
   1d08e:	e7f8      	b.n	1d082 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d090:	4620      	mov	r0, r4
   1d092:	f7ff ff64 	bl	1cf5e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d096:	3800      	subs	r0, #0
   1d098:	bf18      	it	ne
   1d09a:	2001      	movne	r0, #1
   1d09c:	e7f1      	b.n	1d082 <uarte_nrfx_irq_is_pending+0x1a>

0001d09e <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d09e:	4770      	bx	lr

0001d0a0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d0a0:	4770      	bx	lr

0001d0a2 <sys_clock_disable>:
   1d0a2:	4770      	bx	lr

0001d0a4 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   1d0a4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1d0a6:	f7ec ff6f 	bl	9f88 <z_nrf_rtc_timer_read>
}
   1d0aa:	bd08      	pop	{r3, pc}

0001d0ac <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1d0ac:	f7ef b9f2 	b.w	c494 <nrf_cc3xx_platform_init_no_rng>

0001d0b0 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1d0b0:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1d0b2:	f7e9 f941 	bl	6338 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1d0b6:	f7e9 f9f3 	bl	64a0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1d0ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   1d0be:	f7ef b9e9 	b.w	c494 <nrf_cc3xx_platform_init_no_rng>

0001d0c2 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1d0c2:	4700      	bx	r0

0001d0c4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1d0c4:	f000 ba5e 	b.w	1d584 <z_impl_k_busy_wait>

0001d0c8 <nrfx_clock_enable>:
{
   1d0c8:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1d0ca:	2000      	movs	r0, #0
   1d0cc:	f7e9 fa78 	bl	65c0 <arch_irq_is_enabled>
   1d0d0:	b918      	cbnz	r0, 1d0da <nrfx_clock_enable+0x12>
}
   1d0d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1d0d6:	f7e9 ba4f 	b.w	6578 <arch_irq_enable>
   1d0da:	bd08      	pop	{r3, pc}

0001d0dc <nrfx_gpiote_out_init>:
    nrfx_err_t err_code = gpiote_out_init(pin, p_config, false, 0);
   1d0dc:	2300      	movs	r3, #0
   1d0de:	461a      	mov	r2, r3
   1d0e0:	f7ed bc3a 	b.w	a958 <gpiote_out_init>

0001d0e4 <nrf_gpio_cfg_default>:
{
   1d0e4:	b507      	push	{r0, r1, r2, lr}
   1d0e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d0e8:	a801      	add	r0, sp, #4
   1d0ea:	f7ed fd2d 	bl	ab48 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1d0ee:	9b01      	ldr	r3, [sp, #4]
   1d0f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d0f4:	2202      	movs	r2, #2
   1d0f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   1d0fa:	b003      	add	sp, #12
   1d0fc:	f85d fb04 	ldr.w	pc, [sp], #4

0001d100 <nrf_gpio_pin_set>:
{
   1d100:	b507      	push	{r0, r1, r2, lr}
   1d102:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d104:	a801      	add	r0, sp, #4
   1d106:	f7ed fd1f 	bl	ab48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1d10a:	9a01      	ldr	r2, [sp, #4]
   1d10c:	2301      	movs	r3, #1
   1d10e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1d110:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   1d114:	b003      	add	sp, #12
   1d116:	f85d fb04 	ldr.w	pc, [sp], #4

0001d11a <nrf_gpio_pin_clear>:
{
   1d11a:	b507      	push	{r0, r1, r2, lr}
   1d11c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d11e:	a801      	add	r0, sp, #4
   1d120:	f7ed fd12 	bl	ab48 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1d124:	9a01      	ldr	r2, [sp, #4]
   1d126:	2301      	movs	r3, #1
   1d128:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1d12a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   1d12e:	b003      	add	sp, #12
   1d130:	f85d fb04 	ldr.w	pc, [sp], #4

0001d134 <transfer_byte>:
{
   1d134:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   1d136:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1d13a:	698a      	ldr	r2, [r1, #24]
   1d13c:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   1d13e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1d142:	6a0b      	ldr	r3, [r1, #32]
   1d144:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1d146:	bf3e      	ittt	cc
   1d148:	694a      	ldrcc	r2, [r1, #20]
   1d14a:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   1d14e:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   1d150:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   1d152:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   1d156:	1c53      	adds	r3, r2, #1
   1d158:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   1d15a:	3202      	adds	r2, #2
    if (p_cb->abort)
   1d15c:	b13c      	cbz	r4, 1d16e <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1d15e:	690c      	ldr	r4, [r1, #16]
   1d160:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1d162:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   1d164:	bf38      	it	cc
   1d166:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1d168:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   1d16a:	bf88      	it	hi
   1d16c:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1d16e:	690d      	ldr	r5, [r1, #16]
   1d170:	4295      	cmp	r5, r2
   1d172:	d905      	bls.n	1d180 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   1d174:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   1d176:	5c9b      	ldrb	r3, [r3, r2]
   1d178:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1d17c:	2001      	movs	r0, #1
   1d17e:	e00a      	b.n	1d196 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1d180:	698c      	ldr	r4, [r1, #24]
   1d182:	4294      	cmp	r4, r2
   1d184:	d901      	bls.n	1d18a <transfer_byte+0x56>
   1d186:	7fcb      	ldrb	r3, [r1, #31]
   1d188:	e7f6      	b.n	1d178 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1d18a:	42ab      	cmp	r3, r5
   1d18c:	d3f6      	bcc.n	1d17c <transfer_byte+0x48>
   1d18e:	42a3      	cmp	r3, r4
   1d190:	bf2c      	ite	cs
   1d192:	2000      	movcs	r0, #0
   1d194:	2001      	movcc	r0, #1
}
   1d196:	b003      	add	sp, #12
   1d198:	bd30      	pop	{r4, r5, pc}

0001d19a <z_device_state_init>:
}
   1d19a:	4770      	bx	lr

0001d19c <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1d19c:	b138      	cbz	r0, 1d1ae <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1d19e:	68c3      	ldr	r3, [r0, #12]
   1d1a0:	8818      	ldrh	r0, [r3, #0]
   1d1a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1d1a6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1d1aa:	4258      	negs	r0, r3
   1d1ac:	4158      	adcs	r0, r3
}
   1d1ae:	4770      	bx	lr

0001d1b0 <k_mem_slab_init>:
{
   1d1b0:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1d1b2:	2400      	movs	r4, #0
   1d1b4:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d1b6:	ea41 0402 	orr.w	r4, r1, r2
   1d1ba:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1d1be:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1d1c2:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1d1c4:	d10c      	bne.n	1d1e0 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1d1c6:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d1c8:	42a3      	cmp	r3, r4
   1d1ca:	d103      	bne.n	1d1d4 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   1d1cc:	e9c0 0000 	strd	r0, r0, [r0]
}
   1d1d0:	2000      	movs	r0, #0
}
   1d1d2:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1d1d4:	6945      	ldr	r5, [r0, #20]
   1d1d6:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1d1d8:	3401      	adds	r4, #1
		slab->free_list = p;
   1d1da:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1d1dc:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1d1de:	e7f3      	b.n	1d1c8 <k_mem_slab_init+0x18>
		return -EINVAL;
   1d1e0:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1d1e4:	e7f5      	b.n	1d1d2 <k_mem_slab_init+0x22>

0001d1e6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1d1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d1e8:	4604      	mov	r4, r0
   1d1ea:	460d      	mov	r5, r1
	__asm__ volatile(
   1d1ec:	f04f 0320 	mov.w	r3, #32
   1d1f0:	f3ef 8611 	mrs	r6, BASEPRI
   1d1f4:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1f8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d1fc:	6947      	ldr	r7, [r0, #20]
   1d1fe:	b977      	cbnz	r7, 1d21e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1d200:	f000 f945 	bl	1d48e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1d204:	b158      	cbz	r0, 1d21e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1d206:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1d208:	6142      	str	r2, [r0, #20]
   1d20a:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1d20c:	f000 f8cb 	bl	1d3a6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1d210:	4631      	mov	r1, r6
   1d212:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1d216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1d21a:	f7ee bb35 	b.w	b888 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1d21e:	682b      	ldr	r3, [r5, #0]
   1d220:	6962      	ldr	r2, [r4, #20]
   1d222:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1d224:	682b      	ldr	r3, [r5, #0]
   1d226:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1d228:	69a3      	ldr	r3, [r4, #24]
   1d22a:	3b01      	subs	r3, #1
   1d22c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1d22e:	f386 8811 	msr	BASEPRI, r6
   1d232:	f3bf 8f6f 	isb	sy
}
   1d236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d238 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d238:	f3ef 8005 	mrs	r0, IPSR
}
   1d23c:	3800      	subs	r0, #0
   1d23e:	bf18      	it	ne
   1d240:	2001      	movne	r0, #1
   1d242:	4770      	bx	lr

0001d244 <z_impl_k_thread_name_set>:
}
   1d244:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1d248:	4770      	bx	lr

0001d24a <k_thread_name_get>:
}
   1d24a:	2000      	movs	r0, #0
   1d24c:	4770      	bx	lr

0001d24e <z_impl_k_thread_start>:
	z_sched_start(thread);
   1d24e:	f7ee bc19 	b.w	ba84 <z_sched_start>

0001d252 <z_pm_save_idle_exit>:
{
   1d252:	b508      	push	{r3, lr}
	pm_system_resume();
   1d254:	f7e9 f806 	bl	6264 <pm_system_resume>
}
   1d258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1d25c:	f7ff bf20 	b.w	1d0a0 <sys_clock_idle_exit>

0001d260 <z_impl_k_mutex_init>:
{
   1d260:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1d262:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1d264:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1d268:	e9c3 3300 	strd	r3, r3, [r3]
}
   1d26c:	4770      	bx	lr

0001d26e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1d26e:	b15a      	cbz	r2, 1d288 <z_impl_k_sem_init+0x1a>
   1d270:	428a      	cmp	r2, r1
   1d272:	d309      	bcc.n	1d288 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1d274:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d278:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1d27c:	e9c0 0000 	strd	r0, r0, [r0]
   1d280:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1d284:	2000      	movs	r0, #0
   1d286:	4770      	bx	lr
		return -EINVAL;
   1d288:	f06f 0015 	mvn.w	r0, #21
}
   1d28c:	4770      	bx	lr

0001d28e <notify_queue_locked>:
	if (queue != NULL) {
   1d28e:	b120      	cbz	r0, 1d29a <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1d290:	2200      	movs	r2, #0
   1d292:	4611      	mov	r1, r2
   1d294:	3088      	adds	r0, #136	; 0x88
   1d296:	f000 b912 	b.w	1d4be <z_sched_wake>
}
   1d29a:	4770      	bx	lr

0001d29c <k_work_init>:
{
   1d29c:	b538      	push	{r3, r4, r5, lr}
   1d29e:	4604      	mov	r4, r0
   1d2a0:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1d2a2:	2210      	movs	r2, #16
   1d2a4:	2100      	movs	r1, #0
   1d2a6:	f000 fb2e 	bl	1d906 <memset>
   1d2aa:	6065      	str	r5, [r4, #4]
}
   1d2ac:	bd38      	pop	{r3, r4, r5, pc}

0001d2ae <k_work_submit_to_queue>:
{
   1d2ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d2b0:	9001      	str	r0, [sp, #4]
   1d2b2:	4608      	mov	r0, r1
	__asm__ volatile(
   1d2b4:	f04f 0320 	mov.w	r3, #32
   1d2b8:	f3ef 8511 	mrs	r5, BASEPRI
   1d2bc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2c0:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1d2c4:	a901      	add	r1, sp, #4
   1d2c6:	f7ee fa09 	bl	b6dc <submit_to_queue_locked>
   1d2ca:	4604      	mov	r4, r0
	__asm__ volatile(
   1d2cc:	f385 8811 	msr	BASEPRI, r5
   1d2d0:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1d2d4:	2800      	cmp	r0, #0
   1d2d6:	dd04      	ble.n	1d2e2 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1d2d8:	f7ee fd98 	bl	be0c <z_impl_k_is_preempt_thread>
   1d2dc:	b108      	cbz	r0, 1d2e2 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1d2de:	f7ee fce7 	bl	bcb0 <z_impl_k_yield>
}
   1d2e2:	4620      	mov	r0, r4
   1d2e4:	b003      	add	sp, #12
   1d2e6:	bd30      	pop	{r4, r5, pc}

0001d2e8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1d2e8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d2ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d2ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d2f0:	2300      	movs	r3, #0
	node->prev = NULL;
   1d2f2:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d2f6:	4770      	bx	lr

0001d2f8 <unpend_thread_no_timeout>:
{
   1d2f8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1d2fa:	f7ff fff5 	bl	1d2e8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d2fe:	7b43      	ldrb	r3, [r0, #13]
   1d300:	f023 0302 	bic.w	r3, r3, #2
   1d304:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1d306:	2300      	movs	r3, #0
   1d308:	6083      	str	r3, [r0, #8]
}
   1d30a:	bd08      	pop	{r3, pc}

0001d30c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1d30c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1d310:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1d314:	4283      	cmp	r3, r0
		return b2 - b1;
   1d316:	bf14      	ite	ne
   1d318:	1ac0      	subne	r0, r0, r3
	return 0;
   1d31a:	2000      	moveq	r0, #0
}
   1d31c:	4770      	bx	lr

0001d31e <z_unpend_thread_no_timeout>:
{
   1d31e:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d320:	f04f 0320 	mov.w	r3, #32
   1d324:	f3ef 8111 	mrs	r1, BASEPRI
   1d328:	f383 8812 	msr	BASEPRI_MAX, r3
   1d32c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1d330:	f7ff ffe2 	bl	1d2f8 <unpend_thread_no_timeout>
	__asm__ volatile(
   1d334:	f381 8811 	msr	BASEPRI, r1
   1d338:	f3bf 8f6f 	isb	sy
}
   1d33c:	bd08      	pop	{r3, pc}

0001d33e <z_unpend_thread>:
{
   1d33e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d340:	f04f 0320 	mov.w	r3, #32
   1d344:	f3ef 8411 	mrs	r4, BASEPRI
   1d348:	f383 8812 	msr	BASEPRI_MAX, r3
   1d34c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1d350:	f7ff ffd2 	bl	1d2f8 <unpend_thread_no_timeout>
	__asm__ volatile(
   1d354:	f384 8811 	msr	BASEPRI, r4
   1d358:	f3bf 8f6f 	isb	sy
}
   1d35c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d360:	3018      	adds	r0, #24
   1d362:	f000 b8c9 	b.w	1d4f8 <z_abort_timeout>

0001d366 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d366:	4603      	mov	r3, r0
   1d368:	b920      	cbnz	r0, 1d374 <z_reschedule_irqlock+0xe>
   1d36a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1d36e:	b90a      	cbnz	r2, 1d374 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1d370:	f7e9 b96c 	b.w	664c <arch_swap>
   1d374:	f383 8811 	msr	BASEPRI, r3
   1d378:	f3bf 8f6f 	isb	sy
}
   1d37c:	4770      	bx	lr

0001d37e <z_reschedule_unlocked>:
	__asm__ volatile(
   1d37e:	f04f 0320 	mov.w	r3, #32
   1d382:	f3ef 8011 	mrs	r0, BASEPRI
   1d386:	f383 8812 	msr	BASEPRI_MAX, r3
   1d38a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d38e:	f7ff bfea 	b.w	1d366 <z_reschedule_irqlock>

0001d392 <z_priq_dumb_best>:
{
   1d392:	4603      	mov	r3, r0
	return list->head == list;
   1d394:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d396:	4283      	cmp	r3, r0
   1d398:	d003      	beq.n	1d3a2 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1d39a:	2800      	cmp	r0, #0
   1d39c:	bf38      	it	cc
   1d39e:	2000      	movcc	r0, #0
   1d3a0:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1d3a2:	2000      	movs	r0, #0
}
   1d3a4:	4770      	bx	lr

0001d3a6 <z_ready_thread>:
{
   1d3a6:	b510      	push	{r4, lr}
   1d3a8:	f04f 0320 	mov.w	r3, #32
   1d3ac:	f3ef 8411 	mrs	r4, BASEPRI
   1d3b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3b4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1d3b8:	f7ee fb2c 	bl	ba14 <ready_thread>
	__asm__ volatile(
   1d3bc:	f384 8811 	msr	BASEPRI, r4
   1d3c0:	f3bf 8f6f 	isb	sy
}
   1d3c4:	bd10      	pop	{r4, pc}

0001d3c6 <z_thread_timeout>:
{
   1d3c6:	b510      	push	{r4, lr}
   1d3c8:	4601      	mov	r1, r0
	__asm__ volatile(
   1d3ca:	f04f 0320 	mov.w	r3, #32
   1d3ce:	f3ef 8411 	mrs	r4, BASEPRI
   1d3d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3d6:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1d3da:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1d3de:	f013 0f28 	tst.w	r3, #40	; 0x28
   1d3e2:	d10d      	bne.n	1d400 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1d3e4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1d3e8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1d3ea:	b10b      	cbz	r3, 1d3f0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1d3ec:	f7ff ff84 	bl	1d2f8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1d3f0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1d3f4:	f023 0314 	bic.w	r3, r3, #20
   1d3f8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1d3fc:	f7ee fb0a 	bl	ba14 <ready_thread>
	__asm__ volatile(
   1d400:	f384 8811 	msr	BASEPRI, r4
   1d404:	f3bf 8f6f 	isb	sy
}
   1d408:	bd10      	pop	{r4, pc}

0001d40a <add_to_waitq_locked>:
{
   1d40a:	b538      	push	{r3, r4, r5, lr}
   1d40c:	4604      	mov	r4, r0
   1d40e:	460d      	mov	r5, r1
	unready_thread(thread);
   1d410:	f7ee fb56 	bl	bac0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1d414:	7b63      	ldrb	r3, [r4, #13]
   1d416:	f043 0302 	orr.w	r3, r3, #2
   1d41a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1d41c:	b1b5      	cbz	r5, 1d44c <add_to_waitq_locked+0x42>
	return list->head == list;
   1d41e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1d420:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d422:	429d      	cmp	r5, r3
   1d424:	bf08      	it	eq
   1d426:	2300      	moveq	r3, #0
   1d428:	2b00      	cmp	r3, #0
   1d42a:	bf38      	it	cc
   1d42c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1d42e:	b19b      	cbz	r3, 1d458 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   1d430:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1d434:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1d438:	4291      	cmp	r1, r2
   1d43a:	d008      	beq.n	1d44e <add_to_waitq_locked+0x44>
		return b2 - b1;
   1d43c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1d43e:	2a00      	cmp	r2, #0
   1d440:	dd05      	ble.n	1d44e <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   1d442:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1d444:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1d448:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1d44a:	605c      	str	r4, [r3, #4]
}
   1d44c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1d44e:	686a      	ldr	r2, [r5, #4]
   1d450:	4293      	cmp	r3, r2
   1d452:	d001      	beq.n	1d458 <add_to_waitq_locked+0x4e>
   1d454:	681b      	ldr	r3, [r3, #0]
   1d456:	e7ea      	b.n	1d42e <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   1d458:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1d45a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1d45e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d460:	606c      	str	r4, [r5, #4]
   1d462:	e7f3      	b.n	1d44c <add_to_waitq_locked+0x42>

0001d464 <z_unpend1_no_timeout>:
{
   1d464:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d466:	f04f 0320 	mov.w	r3, #32
   1d46a:	f3ef 8411 	mrs	r4, BASEPRI
   1d46e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d472:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1d476:	f7ff ff8c 	bl	1d392 <z_priq_dumb_best>
		if (thread != NULL) {
   1d47a:	4601      	mov	r1, r0
   1d47c:	b108      	cbz	r0, 1d482 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   1d47e:	f7ff ff3b 	bl	1d2f8 <unpend_thread_no_timeout>
	__asm__ volatile(
   1d482:	f384 8811 	msr	BASEPRI, r4
   1d486:	f3bf 8f6f 	isb	sy
}
   1d48a:	4608      	mov	r0, r1
   1d48c:	bd10      	pop	{r4, pc}

0001d48e <z_unpend_first_thread>:
{
   1d48e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d490:	f04f 0320 	mov.w	r3, #32
   1d494:	f3ef 8511 	mrs	r5, BASEPRI
   1d498:	f383 8812 	msr	BASEPRI_MAX, r3
   1d49c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1d4a0:	f7ff ff77 	bl	1d392 <z_priq_dumb_best>
		if (thread != NULL) {
   1d4a4:	4604      	mov	r4, r0
   1d4a6:	b120      	cbz	r0, 1d4b2 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1d4a8:	f7ff ff26 	bl	1d2f8 <unpend_thread_no_timeout>
   1d4ac:	3018      	adds	r0, #24
   1d4ae:	f000 f823 	bl	1d4f8 <z_abort_timeout>
	__asm__ volatile(
   1d4b2:	f385 8811 	msr	BASEPRI, r5
   1d4b6:	f3bf 8f6f 	isb	sy
}
   1d4ba:	4620      	mov	r0, r4
   1d4bc:	bd38      	pop	{r3, r4, r5, pc}

0001d4be <z_sched_wake>:
{
   1d4be:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1d4c0:	f04f 0320 	mov.w	r3, #32
   1d4c4:	f3ef 8511 	mrs	r5, BASEPRI
   1d4c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4cc:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1d4d0:	f7ff ff5f 	bl	1d392 <z_priq_dumb_best>
		if (thread != NULL) {
   1d4d4:	4604      	mov	r4, r0
   1d4d6:	b150      	cbz	r0, 1d4ee <z_sched_wake+0x30>
   1d4d8:	67c1      	str	r1, [r0, #124]	; 0x7c
   1d4da:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1d4dc:	f7ff ff0c 	bl	1d2f8 <unpend_thread_no_timeout>
   1d4e0:	3018      	adds	r0, #24
   1d4e2:	f000 f809 	bl	1d4f8 <z_abort_timeout>
			ready_thread(thread);
   1d4e6:	4620      	mov	r0, r4
   1d4e8:	f7ee fa94 	bl	ba14 <ready_thread>
			ret = true;
   1d4ec:	2001      	movs	r0, #1
	__asm__ volatile(
   1d4ee:	f385 8811 	msr	BASEPRI, r5
   1d4f2:	f3bf 8f6f 	isb	sy
}
   1d4f6:	bd38      	pop	{r3, r4, r5, pc}

0001d4f8 <z_abort_timeout>:
{
   1d4f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d4fa:	f04f 0220 	mov.w	r2, #32
   1d4fe:	f3ef 8411 	mrs	r4, BASEPRI
   1d502:	f382 8812 	msr	BASEPRI_MAX, r2
   1d506:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1d50a:	6803      	ldr	r3, [r0, #0]
   1d50c:	b13b      	cbz	r3, 1d51e <z_abort_timeout+0x26>
			remove_timeout(to);
   1d50e:	f7ee fd15 	bl	bf3c <remove_timeout>
			ret = 0;
   1d512:	2000      	movs	r0, #0
	__asm__ volatile(
   1d514:	f384 8811 	msr	BASEPRI, r4
   1d518:	f3bf 8f6f 	isb	sy
}
   1d51c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1d51e:	f06f 0015 	mvn.w	r0, #21
   1d522:	e7f7      	b.n	1d514 <z_abort_timeout+0x1c>

0001d524 <z_get_next_timeout_expiry>:
{
   1d524:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d526:	f04f 0320 	mov.w	r3, #32
   1d52a:	f3ef 8411 	mrs	r4, BASEPRI
   1d52e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d532:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1d536:	f7ee fd1b 	bl	bf70 <next_timeout>
	__asm__ volatile(
   1d53a:	f384 8811 	msr	BASEPRI, r4
   1d53e:	f3bf 8f6f 	isb	sy
}
   1d542:	bd10      	pop	{r4, pc}

0001d544 <z_set_timeout_expiry>:
{
   1d544:	b570      	push	{r4, r5, r6, lr}
   1d546:	4604      	mov	r4, r0
   1d548:	460d      	mov	r5, r1
	__asm__ volatile(
   1d54a:	f04f 0320 	mov.w	r3, #32
   1d54e:	f3ef 8611 	mrs	r6, BASEPRI
   1d552:	f383 8812 	msr	BASEPRI_MAX, r3
   1d556:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1d55a:	f7ee fd09 	bl	bf70 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1d55e:	2801      	cmp	r0, #1
   1d560:	dd05      	ble.n	1d56e <z_set_timeout_expiry+0x2a>
   1d562:	42a0      	cmp	r0, r4
   1d564:	db03      	blt.n	1d56e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1d566:	4629      	mov	r1, r5
   1d568:	4620      	mov	r0, r4
   1d56a:	f7ec fe95 	bl	a298 <sys_clock_set_timeout>
	__asm__ volatile(
   1d56e:	f386 8811 	msr	BASEPRI, r6
   1d572:	f3bf 8f6f 	isb	sy
}
   1d576:	bd70      	pop	{r4, r5, r6, pc}

0001d578 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1d578:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1d57a:	f7ee fe19 	bl	c1b0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1d57e:	bd08      	pop	{r3, pc}

0001d580 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1d580:	f7ee be16 	b.w	c1b0 <sys_clock_tick_get>

0001d584 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1d584:	b108      	cbz	r0, 1d58a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1d586:	f7e9 bd4f 	b.w	7028 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1d58a:	4770      	bx	lr

0001d58c <k_timer_init>:
	timer->status = 0U;
   1d58c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1d58e:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   1d592:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1d596:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1d59a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1d59e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1d5a0:	6343      	str	r3, [r0, #52]	; 0x34
}
   1d5a2:	4770      	bx	lr

0001d5a4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1d5a4:	b510      	push	{r4, lr}
   1d5a6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1d5a8:	f7ff ffa6 	bl	1d4f8 <z_abort_timeout>

	if (inactive) {
   1d5ac:	b9b0      	cbnz	r0, 1d5dc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1d5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d5b0:	b10b      	cbz	r3, 1d5b6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1d5b2:	4620      	mov	r0, r4
   1d5b4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1d5b6:	f104 0018 	add.w	r0, r4, #24
   1d5ba:	f7ff ff53 	bl	1d464 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1d5be:	b168      	cbz	r0, 1d5dc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1d5c0:	f7ff fef1 	bl	1d3a6 <z_ready_thread>
	__asm__ volatile(
   1d5c4:	f04f 0320 	mov.w	r3, #32
   1d5c8:	f3ef 8011 	mrs	r0, BASEPRI
   1d5cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5d0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1d5d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d5d8:	f7ff bec5 	b.w	1d366 <z_reschedule_irqlock>
   1d5dc:	bd10      	pop	{r4, pc}

0001d5de <clear_event_registrations>:
	while (num_events--) {
   1d5de:	2314      	movs	r3, #20
{
   1d5e0:	b570      	push	{r4, r5, r6, lr}
   1d5e2:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   1d5e6:	2400      	movs	r4, #0
   1d5e8:	2601      	movs	r6, #1
	while (num_events--) {
   1d5ea:	4281      	cmp	r1, r0
   1d5ec:	d100      	bne.n	1d5f0 <clear_event_registrations+0x12>
}
   1d5ee:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1d5f0:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1d5f4:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1d5f8:	f003 031f 	and.w	r3, r3, #31
   1d5fc:	2b08      	cmp	r3, #8
   1d5fe:	d80d      	bhi.n	1d61c <clear_event_registrations+0x3e>
   1d600:	fa06 f303 	lsl.w	r3, r6, r3
   1d604:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1d608:	d008      	beq.n	1d61c <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1d60a:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1d60e:	b12b      	cbz	r3, 1d61c <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   1d610:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   1d614:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1d616:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1d618:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1d61c:	f382 8811 	msr	BASEPRI, r2
   1d620:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d624:	f04f 0320 	mov.w	r3, #32
   1d628:	f3ef 8211 	mrs	r2, BASEPRI
   1d62c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d630:	f3bf 8f6f 	isb	sy
   1d634:	3914      	subs	r1, #20
   1d636:	e7d8      	b.n	1d5ea <clear_event_registrations+0xc>

0001d638 <add_event>:
{
   1d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d63a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d63c:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d640:	4290      	cmp	r0, r2
   1d642:	4604      	mov	r4, r0
   1d644:	460d      	mov	r5, r1
   1d646:	d105      	bne.n	1d654 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   1d648:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1d64a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1d64e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d650:	6065      	str	r5, [r4, #4]
}
   1d652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1d654:	2b00      	cmp	r3, #0
   1d656:	d0f7      	beq.n	1d648 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1d658:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d65a:	b100      	cbz	r0, 1d65e <add_event+0x26>
   1d65c:	3860      	subs	r0, #96	; 0x60
   1d65e:	b107      	cbz	r7, 1d662 <add_event+0x2a>
   1d660:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1d662:	4639      	mov	r1, r7
   1d664:	f7ff fe52 	bl	1d30c <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1d668:	2800      	cmp	r0, #0
   1d66a:	dced      	bgt.n	1d648 <add_event+0x10>
	return list->head == list;
   1d66c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d66e:	42b4      	cmp	r4, r6
   1d670:	d0ea      	beq.n	1d648 <add_event+0x10>
   1d672:	2e00      	cmp	r6, #0
   1d674:	bf38      	it	cc
   1d676:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d678:	2e00      	cmp	r6, #0
   1d67a:	d0e5      	beq.n	1d648 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   1d67c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d67e:	b101      	cbz	r1, 1d682 <add_event+0x4a>
   1d680:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1d682:	4638      	mov	r0, r7
   1d684:	f7ff fe42 	bl	1d30c <z_sched_prio_cmp>
   1d688:	2800      	cmp	r0, #0
   1d68a:	dd05      	ble.n	1d698 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   1d68c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d68e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1d692:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d694:	6075      	str	r5, [r6, #4]
			return;
   1d696:	e7dc      	b.n	1d652 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   1d698:	6863      	ldr	r3, [r4, #4]
   1d69a:	42b3      	cmp	r3, r6
   1d69c:	d0d4      	beq.n	1d648 <add_event+0x10>
   1d69e:	6836      	ldr	r6, [r6, #0]
   1d6a0:	e7ea      	b.n	1d678 <add_event+0x40>

0001d6a2 <register_events>:
{
   1d6a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1d6a6:	2500      	movs	r5, #0
{
   1d6a8:	468b      	mov	fp, r1
   1d6aa:	4614      	mov	r4, r2
   1d6ac:	461f      	mov	r7, r3
   1d6ae:	4682      	mov	sl, r0
	int events_registered = 0;
   1d6b0:	462e      	mov	r6, r5
	event->poller = NULL;
   1d6b2:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1d6b4:	455d      	cmp	r5, fp
   1d6b6:	db02      	blt.n	1d6be <register_events+0x1c>
}
   1d6b8:	4630      	mov	r0, r6
   1d6ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6be:	f04f 0320 	mov.w	r3, #32
   1d6c2:	f3ef 8911 	mrs	r9, BASEPRI
   1d6c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d6ca:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1d6ce:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1d6d2:	f003 031f 	and.w	r3, r3, #31
   1d6d6:	3b01      	subs	r3, #1
   1d6d8:	2b07      	cmp	r3, #7
   1d6da:	d80f      	bhi.n	1d6fc <register_events+0x5a>
   1d6dc:	e8df f003 	tbb	[pc, r3]
   1d6e0:	0a0e041e 	.word	0x0a0e041e
   1d6e4:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1d6e8:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d6ec:	689b      	ldr	r3, [r3, #8]
   1d6ee:	b12b      	cbz	r3, 1d6fc <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1d6f0:	2302      	movs	r3, #2
   1d6f2:	e020      	b.n	1d736 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1d6f4:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d6f8:	681b      	ldr	r3, [r3, #0]
   1d6fa:	bb8b      	cbnz	r3, 1d760 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1d6fc:	bb47      	cbnz	r7, 1d750 <register_events+0xae>
   1d6fe:	7823      	ldrb	r3, [r4, #0]
   1d700:	b333      	cbz	r3, 1d750 <register_events+0xae>
	switch (event->type) {
   1d702:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1d706:	f003 031f 	and.w	r3, r3, #31
   1d70a:	3b01      	subs	r3, #1
   1d70c:	2b07      	cmp	r3, #7
   1d70e:	d830      	bhi.n	1d772 <register_events+0xd0>
   1d710:	e8df f003 	tbb	[pc, r3]
   1d714:	282f2833 	.word	0x282f2833
   1d718:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1d71c:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d720:	689b      	ldr	r3, [r3, #8]
   1d722:	2b00      	cmp	r3, #0
   1d724:	d0ea      	beq.n	1d6fc <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1d726:	2301      	movs	r3, #1
   1d728:	e005      	b.n	1d736 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1d72a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1d72e:	6a1b      	ldr	r3, [r3, #32]
   1d730:	2b00      	cmp	r3, #0
   1d732:	d0e3      	beq.n	1d6fc <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1d734:	2310      	movs	r3, #16
	event->state |= state;
   1d736:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1d73a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1d73e:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1d742:	430b      	orrs	r3, r1
   1d744:	f363 3252 	bfi	r2, r3, #13, #6
   1d748:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1d74c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1d750:	f389 8811 	msr	BASEPRI, r9
   1d754:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1d758:	3501      	adds	r5, #1
   1d75a:	f10a 0a14 	add.w	sl, sl, #20
   1d75e:	e7a9      	b.n	1d6b4 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1d760:	2304      	movs	r3, #4
   1d762:	e7e8      	b.n	1d736 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1d764:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d768:	4622      	mov	r2, r4
   1d76a:	4651      	mov	r1, sl
   1d76c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1d76e:	f7ff ff63 	bl	1d638 <add_event>
	event->poller = poller;
   1d772:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1d776:	3601      	adds	r6, #1
   1d778:	e7ea      	b.n	1d750 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1d77a:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d77e:	4622      	mov	r2, r4
   1d780:	4651      	mov	r1, sl
   1d782:	e7f4      	b.n	1d76e <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1d784:	f8da 0010 	ldr.w	r0, [sl, #16]
   1d788:	4622      	mov	r2, r4
   1d78a:	4651      	mov	r1, sl
   1d78c:	3024      	adds	r0, #36	; 0x24
   1d78e:	e7ee      	b.n	1d76e <register_events+0xcc>

0001d790 <signal_poll_event>:
{
   1d790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1d794:	6884      	ldr	r4, [r0, #8]
{
   1d796:	4605      	mov	r5, r0
   1d798:	460e      	mov	r6, r1
	if (poller != NULL) {
   1d79a:	b144      	cbz	r4, 1d7ae <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1d79c:	7863      	ldrb	r3, [r4, #1]
   1d79e:	2b01      	cmp	r3, #1
   1d7a0:	d138      	bne.n	1d814 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   1d7a2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d7a6:	f013 0302 	ands.w	r3, r3, #2
   1d7aa:	d10a      	bne.n	1d7c2 <signal_poll_event+0x32>
		poller->is_polling = false;
   1d7ac:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1d7ae:	68eb      	ldr	r3, [r5, #12]
   1d7b0:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1d7b4:	430e      	orrs	r6, r1
	event->poller = NULL;
   1d7b6:	2000      	movs	r0, #0
	event->state |= state;
   1d7b8:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1d7bc:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1d7be:	60eb      	str	r3, [r5, #12]
	return retcode;
   1d7c0:	e00d      	b.n	1d7de <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1d7c2:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1d7c6:	f04f 31ff 	mov.w	r1, #4294967295
   1d7ca:	f06f 0001 	mvn.w	r0, #1
   1d7ce:	428b      	cmp	r3, r1
   1d7d0:	bf08      	it	eq
   1d7d2:	4282      	cmpeq	r2, r0
   1d7d4:	d105      	bne.n	1d7e2 <signal_poll_event+0x52>
		poller->is_polling = false;
   1d7d6:	2300      	movs	r3, #0
   1d7d8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1d7da:	f06f 000a 	mvn.w	r0, #10
}
   1d7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d7e2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1d7e6:	4640      	mov	r0, r8
   1d7e8:	f7ff fda9 	bl	1d33e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1d7ec:	2e08      	cmp	r6, #8
   1d7ee:	bf0c      	ite	eq
   1d7f0:	f06f 0303 	mvneq.w	r3, #3
   1d7f4:	2300      	movne	r3, #0
   1d7f6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1d7f8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1d7fc:	06db      	lsls	r3, r3, #27
   1d7fe:	d102      	bne.n	1d806 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   1d800:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1d804:	b10f      	cbz	r7, 1d80a <signal_poll_event+0x7a>
		poller->is_polling = false;
   1d806:	2300      	movs	r3, #0
   1d808:	e7d0      	b.n	1d7ac <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1d80a:	4640      	mov	r0, r8
   1d80c:	f7ff fdcb 	bl	1d3a6 <z_ready_thread>
		poller->is_polling = false;
   1d810:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1d812:	e7cc      	b.n	1d7ae <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1d814:	2b02      	cmp	r3, #2
   1d816:	d1f6      	bne.n	1d806 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1d818:	7823      	ldrb	r3, [r4, #0]
   1d81a:	2b00      	cmp	r3, #0
   1d81c:	d0c7      	beq.n	1d7ae <signal_poll_event+0x1e>
   1d81e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1d822:	2f00      	cmp	r7, #0
   1d824:	d0f4      	beq.n	1d810 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1d826:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1d82a:	f1a4 0914 	sub.w	r9, r4, #20
   1d82e:	f104 0014 	add.w	r0, r4, #20
   1d832:	f7ff fe61 	bl	1d4f8 <z_abort_timeout>
		twork->poll_result = 0;
   1d836:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1d83a:	4649      	mov	r1, r9
   1d83c:	4638      	mov	r0, r7
   1d83e:	f7ff fd36 	bl	1d2ae <k_work_submit_to_queue>
		poller->is_polling = false;
   1d842:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1d846:	e7b2      	b.n	1d7ae <signal_poll_event+0x1e>

0001d848 <z_handle_obj_poll_events>:
{
   1d848:	4603      	mov	r3, r0
	return list->head == list;
   1d84a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d84c:	4283      	cmp	r3, r0
   1d84e:	d008      	beq.n	1d862 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1d850:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d854:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d856:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d858:	2300      	movs	r3, #0
	node->prev = NULL;
   1d85a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1d85e:	f7ff bf97 	b.w	1d790 <signal_poll_event>
}
   1d862:	4770      	bx	lr

0001d864 <k_heap_init>:
{
   1d864:	b410      	push	{r4}
   1d866:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1d86a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1d86e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1d870:	f7fe bb1c 	b.w	1beac <sys_heap_init>

0001d874 <memcmp>:
   1d874:	b530      	push	{r4, r5, lr}
   1d876:	3901      	subs	r1, #1
   1d878:	2400      	movs	r4, #0
   1d87a:	42a2      	cmp	r2, r4
   1d87c:	d101      	bne.n	1d882 <memcmp+0xe>
   1d87e:	2000      	movs	r0, #0
   1d880:	e005      	b.n	1d88e <memcmp+0x1a>
   1d882:	5d03      	ldrb	r3, [r0, r4]
   1d884:	3401      	adds	r4, #1
   1d886:	5d0d      	ldrb	r5, [r1, r4]
   1d888:	42ab      	cmp	r3, r5
   1d88a:	d0f6      	beq.n	1d87a <memcmp+0x6>
   1d88c:	1b58      	subs	r0, r3, r5
   1d88e:	bd30      	pop	{r4, r5, pc}

0001d890 <memcpy>:
   1d890:	440a      	add	r2, r1
   1d892:	4291      	cmp	r1, r2
   1d894:	f100 33ff 	add.w	r3, r0, #4294967295
   1d898:	d100      	bne.n	1d89c <memcpy+0xc>
   1d89a:	4770      	bx	lr
   1d89c:	b510      	push	{r4, lr}
   1d89e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1d8a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   1d8a6:	4291      	cmp	r1, r2
   1d8a8:	d1f9      	bne.n	1d89e <memcpy+0xe>
   1d8aa:	bd10      	pop	{r4, pc}

0001d8ac <__memcpy_chk>:
   1d8ac:	429a      	cmp	r2, r3
   1d8ae:	b508      	push	{r3, lr}
   1d8b0:	d901      	bls.n	1d8b6 <__memcpy_chk+0xa>
   1d8b2:	f7e9 fb7d 	bl	6fb0 <__chk_fail>
   1d8b6:	4281      	cmp	r1, r0
   1d8b8:	d804      	bhi.n	1d8c4 <__memcpy_chk+0x18>
   1d8ba:	188b      	adds	r3, r1, r2
   1d8bc:	4298      	cmp	r0, r3
   1d8be:	d3f8      	bcc.n	1d8b2 <__memcpy_chk+0x6>
   1d8c0:	4281      	cmp	r1, r0
   1d8c2:	d102      	bne.n	1d8ca <__memcpy_chk+0x1e>
   1d8c4:	1883      	adds	r3, r0, r2
   1d8c6:	4299      	cmp	r1, r3
   1d8c8:	d3f3      	bcc.n	1d8b2 <__memcpy_chk+0x6>
   1d8ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d8ce:	f7ff bfdf 	b.w	1d890 <memcpy>

0001d8d2 <memmove>:
   1d8d2:	4288      	cmp	r0, r1
   1d8d4:	b510      	push	{r4, lr}
   1d8d6:	eb01 0402 	add.w	r4, r1, r2
   1d8da:	d902      	bls.n	1d8e2 <memmove+0x10>
   1d8dc:	4284      	cmp	r4, r0
   1d8de:	4623      	mov	r3, r4
   1d8e0:	d807      	bhi.n	1d8f2 <memmove+0x20>
   1d8e2:	1e43      	subs	r3, r0, #1
   1d8e4:	42a1      	cmp	r1, r4
   1d8e6:	d008      	beq.n	1d8fa <memmove+0x28>
   1d8e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   1d8ec:	f803 2f01 	strb.w	r2, [r3, #1]!
   1d8f0:	e7f8      	b.n	1d8e4 <memmove+0x12>
   1d8f2:	4402      	add	r2, r0
   1d8f4:	4601      	mov	r1, r0
   1d8f6:	428a      	cmp	r2, r1
   1d8f8:	d100      	bne.n	1d8fc <memmove+0x2a>
   1d8fa:	bd10      	pop	{r4, pc}
   1d8fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1d900:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1d904:	e7f7      	b.n	1d8f6 <memmove+0x24>

0001d906 <memset>:
   1d906:	4402      	add	r2, r0
   1d908:	4603      	mov	r3, r0
   1d90a:	4293      	cmp	r3, r2
   1d90c:	d100      	bne.n	1d910 <memset+0xa>
   1d90e:	4770      	bx	lr
   1d910:	f803 1b01 	strb.w	r1, [r3], #1
   1d914:	e7f9      	b.n	1d90a <memset+0x4>

0001d916 <_calloc_r>:
   1d916:	b538      	push	{r3, r4, r5, lr}
   1d918:	fb02 f501 	mul.w	r5, r2, r1
   1d91c:	4629      	mov	r1, r5
   1d91e:	f7ee ffff 	bl	c920 <_malloc_r>
   1d922:	4604      	mov	r4, r0
   1d924:	b118      	cbz	r0, 1d92e <_calloc_r+0x18>
   1d926:	462a      	mov	r2, r5
   1d928:	2100      	movs	r1, #0
   1d92a:	f7ff ffec 	bl	1d906 <memset>
   1d92e:	4620      	mov	r0, r4
   1d930:	bd38      	pop	{r3, r4, r5, pc}

0001d932 <__sprintf_chk>:
   1d932:	b408      	push	{r3}
   1d934:	b517      	push	{r0, r1, r2, r4, lr}
   1d936:	ab05      	add	r3, sp, #20
   1d938:	1e14      	subs	r4, r2, #0
   1d93a:	f853 1b04 	ldr.w	r1, [r3], #4
   1d93e:	9301      	str	r3, [sp, #4]
   1d940:	da07      	bge.n	1d952 <__sprintf_chk+0x20>
   1d942:	461a      	mov	r2, r3
   1d944:	f7ef f8ac 	bl	caa0 <vsiprintf>
   1d948:	b003      	add	sp, #12
   1d94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d94e:	b001      	add	sp, #4
   1d950:	4770      	bx	lr
   1d952:	460a      	mov	r2, r1
   1d954:	4621      	mov	r1, r4
   1d956:	f7ef f87f 	bl	ca58 <vsniprintf>
   1d95a:	2800      	cmp	r0, #0
   1d95c:	dbf4      	blt.n	1d948 <__sprintf_chk+0x16>
   1d95e:	42a0      	cmp	r0, r4
   1d960:	d3f2      	bcc.n	1d948 <__sprintf_chk+0x16>
   1d962:	f7e9 fb25 	bl	6fb0 <__chk_fail>

0001d966 <__seofread>:
   1d966:	2000      	movs	r0, #0
   1d968:	4770      	bx	lr

0001d96a <strncpy>:
   1d96a:	b510      	push	{r4, lr}
   1d96c:	3901      	subs	r1, #1
   1d96e:	4603      	mov	r3, r0
   1d970:	b132      	cbz	r2, 1d980 <strncpy+0x16>
   1d972:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1d976:	f803 4b01 	strb.w	r4, [r3], #1
   1d97a:	3a01      	subs	r2, #1
   1d97c:	2c00      	cmp	r4, #0
   1d97e:	d1f7      	bne.n	1d970 <strncpy+0x6>
   1d980:	441a      	add	r2, r3
   1d982:	2100      	movs	r1, #0
   1d984:	4293      	cmp	r3, r2
   1d986:	d100      	bne.n	1d98a <strncpy+0x20>
   1d988:	bd10      	pop	{r4, pc}
   1d98a:	f803 1b01 	strb.w	r1, [r3], #1
   1d98e:	e7f9      	b.n	1d984 <strncpy+0x1a>

0001d990 <strnlen>:
   1d990:	b510      	push	{r4, lr}
   1d992:	4602      	mov	r2, r0
   1d994:	4401      	add	r1, r0
   1d996:	428a      	cmp	r2, r1
   1d998:	4613      	mov	r3, r2
   1d99a:	d101      	bne.n	1d9a0 <strnlen+0x10>
   1d99c:	1a18      	subs	r0, r3, r0
   1d99e:	bd10      	pop	{r4, pc}
   1d9a0:	781c      	ldrb	r4, [r3, #0]
   1d9a2:	3201      	adds	r2, #1
   1d9a4:	2c00      	cmp	r4, #0
   1d9a6:	d1f6      	bne.n	1d996 <strnlen+0x6>
   1d9a8:	e7f8      	b.n	1d99c <strnlen+0xc>

0001d9aa <strstr>:
   1d9aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9ac:	780c      	ldrb	r4, [r1, #0]
   1d9ae:	b164      	cbz	r4, 1d9ca <strstr+0x20>
   1d9b0:	4603      	mov	r3, r0
   1d9b2:	781a      	ldrb	r2, [r3, #0]
   1d9b4:	4618      	mov	r0, r3
   1d9b6:	1c5e      	adds	r6, r3, #1
   1d9b8:	b90a      	cbnz	r2, 1d9be <strstr+0x14>
   1d9ba:	4610      	mov	r0, r2
   1d9bc:	e005      	b.n	1d9ca <strstr+0x20>
   1d9be:	4294      	cmp	r4, r2
   1d9c0:	d108      	bne.n	1d9d4 <strstr+0x2a>
   1d9c2:	460d      	mov	r5, r1
   1d9c4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   1d9c8:	b902      	cbnz	r2, 1d9cc <strstr+0x22>
   1d9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d9cc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   1d9d0:	4297      	cmp	r7, r2
   1d9d2:	d0f7      	beq.n	1d9c4 <strstr+0x1a>
   1d9d4:	4633      	mov	r3, r6
   1d9d6:	e7ec      	b.n	1d9b2 <strstr+0x8>

0001d9d8 <_vsniprintf_r>:
   1d9d8:	b530      	push	{r4, r5, lr}
   1d9da:	1e14      	subs	r4, r2, #0
   1d9dc:	4605      	mov	r5, r0
   1d9de:	b09b      	sub	sp, #108	; 0x6c
   1d9e0:	4618      	mov	r0, r3
   1d9e2:	da05      	bge.n	1d9f0 <_vsniprintf_r+0x18>
   1d9e4:	238b      	movs	r3, #139	; 0x8b
   1d9e6:	602b      	str	r3, [r5, #0]
   1d9e8:	f04f 30ff 	mov.w	r0, #4294967295
   1d9ec:	b01b      	add	sp, #108	; 0x6c
   1d9ee:	bd30      	pop	{r4, r5, pc}
   1d9f0:	f44f 7302 	mov.w	r3, #520	; 0x208
   1d9f4:	f8ad 300c 	strh.w	r3, [sp, #12]
   1d9f8:	bf14      	ite	ne
   1d9fa:	f104 33ff 	addne.w	r3, r4, #4294967295
   1d9fe:	4623      	moveq	r3, r4
   1da00:	9302      	str	r3, [sp, #8]
   1da02:	9305      	str	r3, [sp, #20]
   1da04:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1da08:	9100      	str	r1, [sp, #0]
   1da0a:	9104      	str	r1, [sp, #16]
   1da0c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1da10:	4602      	mov	r2, r0
   1da12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1da14:	4669      	mov	r1, sp
   1da16:	4628      	mov	r0, r5
   1da18:	f7ef f858 	bl	cacc <_svfiprintf_r>
   1da1c:	1c43      	adds	r3, r0, #1
   1da1e:	bfbc      	itt	lt
   1da20:	238b      	movlt	r3, #139	; 0x8b
   1da22:	602b      	strlt	r3, [r5, #0]
   1da24:	2c00      	cmp	r4, #0
   1da26:	d0e1      	beq.n	1d9ec <_vsniprintf_r+0x14>
   1da28:	9b00      	ldr	r3, [sp, #0]
   1da2a:	2200      	movs	r2, #0
   1da2c:	701a      	strb	r2, [r3, #0]
   1da2e:	e7dd      	b.n	1d9ec <_vsniprintf_r+0x14>

0001da30 <_realloc_r>:
   1da30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da32:	4607      	mov	r7, r0
   1da34:	4614      	mov	r4, r2
   1da36:	460e      	mov	r6, r1
   1da38:	b921      	cbnz	r1, 1da44 <_realloc_r+0x14>
   1da3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1da3e:	4611      	mov	r1, r2
   1da40:	f7ee bf6e 	b.w	c920 <_malloc_r>
   1da44:	b922      	cbnz	r2, 1da50 <_realloc_r+0x20>
   1da46:	f7ee ff1d 	bl	c884 <_free_r>
   1da4a:	4625      	mov	r5, r4
   1da4c:	4628      	mov	r0, r5
   1da4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da50:	f000 f9ae 	bl	1ddb0 <_malloc_usable_size_r>
   1da54:	42a0      	cmp	r0, r4
   1da56:	d20f      	bcs.n	1da78 <_realloc_r+0x48>
   1da58:	4621      	mov	r1, r4
   1da5a:	4638      	mov	r0, r7
   1da5c:	f7ee ff60 	bl	c920 <_malloc_r>
   1da60:	4605      	mov	r5, r0
   1da62:	2800      	cmp	r0, #0
   1da64:	d0f2      	beq.n	1da4c <_realloc_r+0x1c>
   1da66:	4631      	mov	r1, r6
   1da68:	4622      	mov	r2, r4
   1da6a:	f7ff ff11 	bl	1d890 <memcpy>
   1da6e:	4631      	mov	r1, r6
   1da70:	4638      	mov	r0, r7
   1da72:	f7ee ff07 	bl	c884 <_free_r>
   1da76:	e7e9      	b.n	1da4c <_realloc_r+0x1c>
   1da78:	4635      	mov	r5, r6
   1da7a:	e7e7      	b.n	1da4c <_realloc_r+0x1c>

0001da7c <__ssputs_r>:
   1da7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1da80:	688e      	ldr	r6, [r1, #8]
   1da82:	429e      	cmp	r6, r3
   1da84:	4682      	mov	sl, r0
   1da86:	460c      	mov	r4, r1
   1da88:	4690      	mov	r8, r2
   1da8a:	461f      	mov	r7, r3
   1da8c:	d838      	bhi.n	1db00 <__ssputs_r+0x84>
   1da8e:	898a      	ldrh	r2, [r1, #12]
   1da90:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1da94:	d032      	beq.n	1dafc <__ssputs_r+0x80>
   1da96:	6825      	ldr	r5, [r4, #0]
   1da98:	6909      	ldr	r1, [r1, #16]
   1da9a:	eba5 0901 	sub.w	r9, r5, r1
   1da9e:	6965      	ldr	r5, [r4, #20]
   1daa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1daa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1daa8:	3301      	adds	r3, #1
   1daaa:	444b      	add	r3, r9
   1daac:	106d      	asrs	r5, r5, #1
   1daae:	429d      	cmp	r5, r3
   1dab0:	bf38      	it	cc
   1dab2:	461d      	movcc	r5, r3
   1dab4:	0553      	lsls	r3, r2, #21
   1dab6:	d531      	bpl.n	1db1c <__ssputs_r+0xa0>
   1dab8:	4629      	mov	r1, r5
   1daba:	f7ee ff31 	bl	c920 <_malloc_r>
   1dabe:	4606      	mov	r6, r0
   1dac0:	b950      	cbnz	r0, 1dad8 <__ssputs_r+0x5c>
   1dac2:	230c      	movs	r3, #12
   1dac4:	f8ca 3000 	str.w	r3, [sl]
   1dac8:	89a3      	ldrh	r3, [r4, #12]
   1daca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dace:	81a3      	strh	r3, [r4, #12]
   1dad0:	f04f 30ff 	mov.w	r0, #4294967295
   1dad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dad8:	6921      	ldr	r1, [r4, #16]
   1dada:	464a      	mov	r2, r9
   1dadc:	f7ff fed8 	bl	1d890 <memcpy>
   1dae0:	89a3      	ldrh	r3, [r4, #12]
   1dae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1dae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1daea:	81a3      	strh	r3, [r4, #12]
   1daec:	6126      	str	r6, [r4, #16]
   1daee:	6165      	str	r5, [r4, #20]
   1daf0:	444e      	add	r6, r9
   1daf2:	eba5 0509 	sub.w	r5, r5, r9
   1daf6:	6026      	str	r6, [r4, #0]
   1daf8:	60a5      	str	r5, [r4, #8]
   1dafa:	463e      	mov	r6, r7
   1dafc:	42be      	cmp	r6, r7
   1dafe:	d900      	bls.n	1db02 <__ssputs_r+0x86>
   1db00:	463e      	mov	r6, r7
   1db02:	4632      	mov	r2, r6
   1db04:	6820      	ldr	r0, [r4, #0]
   1db06:	4641      	mov	r1, r8
   1db08:	f7ff fee3 	bl	1d8d2 <memmove>
   1db0c:	68a3      	ldr	r3, [r4, #8]
   1db0e:	6822      	ldr	r2, [r4, #0]
   1db10:	1b9b      	subs	r3, r3, r6
   1db12:	4432      	add	r2, r6
   1db14:	60a3      	str	r3, [r4, #8]
   1db16:	6022      	str	r2, [r4, #0]
   1db18:	2000      	movs	r0, #0
   1db1a:	e7db      	b.n	1dad4 <__ssputs_r+0x58>
   1db1c:	462a      	mov	r2, r5
   1db1e:	f7ff ff87 	bl	1da30 <_realloc_r>
   1db22:	4606      	mov	r6, r0
   1db24:	2800      	cmp	r0, #0
   1db26:	d1e1      	bne.n	1daec <__ssputs_r+0x70>
   1db28:	6921      	ldr	r1, [r4, #16]
   1db2a:	4650      	mov	r0, sl
   1db2c:	f7ee feaa 	bl	c884 <_free_r>
   1db30:	e7c7      	b.n	1dac2 <__ssputs_r+0x46>

0001db32 <_sungetc_r>:
   1db32:	b538      	push	{r3, r4, r5, lr}
   1db34:	1c4b      	adds	r3, r1, #1
   1db36:	4614      	mov	r4, r2
   1db38:	d103      	bne.n	1db42 <_sungetc_r+0x10>
   1db3a:	f04f 35ff 	mov.w	r5, #4294967295
   1db3e:	4628      	mov	r0, r5
   1db40:	bd38      	pop	{r3, r4, r5, pc}
   1db42:	8993      	ldrh	r3, [r2, #12]
   1db44:	f023 0320 	bic.w	r3, r3, #32
   1db48:	8193      	strh	r3, [r2, #12]
   1db4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1db4c:	6852      	ldr	r2, [r2, #4]
   1db4e:	b2cd      	uxtb	r5, r1
   1db50:	b18b      	cbz	r3, 1db76 <_sungetc_r+0x44>
   1db52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1db54:	4293      	cmp	r3, r2
   1db56:	dd08      	ble.n	1db6a <_sungetc_r+0x38>
   1db58:	6823      	ldr	r3, [r4, #0]
   1db5a:	1e5a      	subs	r2, r3, #1
   1db5c:	6022      	str	r2, [r4, #0]
   1db5e:	f803 5c01 	strb.w	r5, [r3, #-1]
   1db62:	6863      	ldr	r3, [r4, #4]
   1db64:	3301      	adds	r3, #1
   1db66:	6063      	str	r3, [r4, #4]
   1db68:	e7e9      	b.n	1db3e <_sungetc_r+0xc>
   1db6a:	4621      	mov	r1, r4
   1db6c:	f000 f8e6 	bl	1dd3c <__submore>
   1db70:	2800      	cmp	r0, #0
   1db72:	d0f1      	beq.n	1db58 <_sungetc_r+0x26>
   1db74:	e7e1      	b.n	1db3a <_sungetc_r+0x8>
   1db76:	6921      	ldr	r1, [r4, #16]
   1db78:	6823      	ldr	r3, [r4, #0]
   1db7a:	b151      	cbz	r1, 1db92 <_sungetc_r+0x60>
   1db7c:	4299      	cmp	r1, r3
   1db7e:	d208      	bcs.n	1db92 <_sungetc_r+0x60>
   1db80:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1db84:	42a9      	cmp	r1, r5
   1db86:	d104      	bne.n	1db92 <_sungetc_r+0x60>
   1db88:	3b01      	subs	r3, #1
   1db8a:	3201      	adds	r2, #1
   1db8c:	6023      	str	r3, [r4, #0]
   1db8e:	6062      	str	r2, [r4, #4]
   1db90:	e7d5      	b.n	1db3e <_sungetc_r+0xc>
   1db92:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   1db96:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1db9a:	6363      	str	r3, [r4, #52]	; 0x34
   1db9c:	2303      	movs	r3, #3
   1db9e:	63a3      	str	r3, [r4, #56]	; 0x38
   1dba0:	4623      	mov	r3, r4
   1dba2:	f803 5f46 	strb.w	r5, [r3, #70]!
   1dba6:	6023      	str	r3, [r4, #0]
   1dba8:	2301      	movs	r3, #1
   1dbaa:	e7dc      	b.n	1db66 <_sungetc_r+0x34>

0001dbac <__ssrefill_r>:
   1dbac:	b510      	push	{r4, lr}
   1dbae:	460c      	mov	r4, r1
   1dbb0:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1dbb2:	b169      	cbz	r1, 1dbd0 <__ssrefill_r+0x24>
   1dbb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1dbb8:	4299      	cmp	r1, r3
   1dbba:	d001      	beq.n	1dbc0 <__ssrefill_r+0x14>
   1dbbc:	f7ee fe62 	bl	c884 <_free_r>
   1dbc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1dbc2:	6063      	str	r3, [r4, #4]
   1dbc4:	2000      	movs	r0, #0
   1dbc6:	6360      	str	r0, [r4, #52]	; 0x34
   1dbc8:	b113      	cbz	r3, 1dbd0 <__ssrefill_r+0x24>
   1dbca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1dbcc:	6023      	str	r3, [r4, #0]
   1dbce:	bd10      	pop	{r4, pc}
   1dbd0:	6923      	ldr	r3, [r4, #16]
   1dbd2:	6023      	str	r3, [r4, #0]
   1dbd4:	2300      	movs	r3, #0
   1dbd6:	6063      	str	r3, [r4, #4]
   1dbd8:	89a3      	ldrh	r3, [r4, #12]
   1dbda:	f043 0320 	orr.w	r3, r3, #32
   1dbde:	81a3      	strh	r3, [r4, #12]
   1dbe0:	f04f 30ff 	mov.w	r0, #4294967295
   1dbe4:	e7f3      	b.n	1dbce <__ssrefill_r+0x22>

0001dbe6 <_printf_common>:
   1dbe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dbea:	4616      	mov	r6, r2
   1dbec:	4699      	mov	r9, r3
   1dbee:	688a      	ldr	r2, [r1, #8]
   1dbf0:	690b      	ldr	r3, [r1, #16]
   1dbf2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1dbf6:	4293      	cmp	r3, r2
   1dbf8:	bfb8      	it	lt
   1dbfa:	4613      	movlt	r3, r2
   1dbfc:	6033      	str	r3, [r6, #0]
   1dbfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1dc02:	4607      	mov	r7, r0
   1dc04:	460c      	mov	r4, r1
   1dc06:	b10a      	cbz	r2, 1dc0c <_printf_common+0x26>
   1dc08:	3301      	adds	r3, #1
   1dc0a:	6033      	str	r3, [r6, #0]
   1dc0c:	6823      	ldr	r3, [r4, #0]
   1dc0e:	0699      	lsls	r1, r3, #26
   1dc10:	bf42      	ittt	mi
   1dc12:	6833      	ldrmi	r3, [r6, #0]
   1dc14:	3302      	addmi	r3, #2
   1dc16:	6033      	strmi	r3, [r6, #0]
   1dc18:	6825      	ldr	r5, [r4, #0]
   1dc1a:	f015 0506 	ands.w	r5, r5, #6
   1dc1e:	d106      	bne.n	1dc2e <_printf_common+0x48>
   1dc20:	f104 0a19 	add.w	sl, r4, #25
   1dc24:	68e3      	ldr	r3, [r4, #12]
   1dc26:	6832      	ldr	r2, [r6, #0]
   1dc28:	1a9b      	subs	r3, r3, r2
   1dc2a:	42ab      	cmp	r3, r5
   1dc2c:	dc26      	bgt.n	1dc7c <_printf_common+0x96>
   1dc2e:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1dc32:	1e13      	subs	r3, r2, #0
   1dc34:	6822      	ldr	r2, [r4, #0]
   1dc36:	bf18      	it	ne
   1dc38:	2301      	movne	r3, #1
   1dc3a:	0692      	lsls	r2, r2, #26
   1dc3c:	d42b      	bmi.n	1dc96 <_printf_common+0xb0>
   1dc3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1dc42:	4649      	mov	r1, r9
   1dc44:	4638      	mov	r0, r7
   1dc46:	47c0      	blx	r8
   1dc48:	3001      	adds	r0, #1
   1dc4a:	d01e      	beq.n	1dc8a <_printf_common+0xa4>
   1dc4c:	6823      	ldr	r3, [r4, #0]
   1dc4e:	68e5      	ldr	r5, [r4, #12]
   1dc50:	6832      	ldr	r2, [r6, #0]
   1dc52:	f003 0306 	and.w	r3, r3, #6
   1dc56:	2b04      	cmp	r3, #4
   1dc58:	bf08      	it	eq
   1dc5a:	1aad      	subeq	r5, r5, r2
   1dc5c:	68a3      	ldr	r3, [r4, #8]
   1dc5e:	6922      	ldr	r2, [r4, #16]
   1dc60:	bf0c      	ite	eq
   1dc62:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1dc66:	2500      	movne	r5, #0
   1dc68:	4293      	cmp	r3, r2
   1dc6a:	bfc4      	itt	gt
   1dc6c:	1a9b      	subgt	r3, r3, r2
   1dc6e:	18ed      	addgt	r5, r5, r3
   1dc70:	2600      	movs	r6, #0
   1dc72:	341a      	adds	r4, #26
   1dc74:	42b5      	cmp	r5, r6
   1dc76:	d11a      	bne.n	1dcae <_printf_common+0xc8>
   1dc78:	2000      	movs	r0, #0
   1dc7a:	e008      	b.n	1dc8e <_printf_common+0xa8>
   1dc7c:	2301      	movs	r3, #1
   1dc7e:	4652      	mov	r2, sl
   1dc80:	4649      	mov	r1, r9
   1dc82:	4638      	mov	r0, r7
   1dc84:	47c0      	blx	r8
   1dc86:	3001      	adds	r0, #1
   1dc88:	d103      	bne.n	1dc92 <_printf_common+0xac>
   1dc8a:	f04f 30ff 	mov.w	r0, #4294967295
   1dc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dc92:	3501      	adds	r5, #1
   1dc94:	e7c6      	b.n	1dc24 <_printf_common+0x3e>
   1dc96:	18e1      	adds	r1, r4, r3
   1dc98:	1c5a      	adds	r2, r3, #1
   1dc9a:	2030      	movs	r0, #48	; 0x30
   1dc9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1dca0:	4422      	add	r2, r4
   1dca2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1dca6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1dcaa:	3302      	adds	r3, #2
   1dcac:	e7c7      	b.n	1dc3e <_printf_common+0x58>
   1dcae:	2301      	movs	r3, #1
   1dcb0:	4622      	mov	r2, r4
   1dcb2:	4649      	mov	r1, r9
   1dcb4:	4638      	mov	r0, r7
   1dcb6:	47c0      	blx	r8
   1dcb8:	3001      	adds	r0, #1
   1dcba:	d0e6      	beq.n	1dc8a <_printf_common+0xa4>
   1dcbc:	3601      	adds	r6, #1
   1dcbe:	e7d9      	b.n	1dc74 <_printf_common+0x8e>

0001dcc0 <__sccl>:
   1dcc0:	b570      	push	{r4, r5, r6, lr}
   1dcc2:	780b      	ldrb	r3, [r1, #0]
   1dcc4:	4604      	mov	r4, r0
   1dcc6:	2b5e      	cmp	r3, #94	; 0x5e
   1dcc8:	bf0b      	itete	eq
   1dcca:	784b      	ldrbeq	r3, [r1, #1]
   1dccc:	1c48      	addne	r0, r1, #1
   1dcce:	1c88      	addeq	r0, r1, #2
   1dcd0:	2200      	movne	r2, #0
   1dcd2:	bf08      	it	eq
   1dcd4:	2201      	moveq	r2, #1
   1dcd6:	1e61      	subs	r1, r4, #1
   1dcd8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   1dcdc:	f801 2f01 	strb.w	r2, [r1, #1]!
   1dce0:	42a9      	cmp	r1, r5
   1dce2:	d1fb      	bne.n	1dcdc <__sccl+0x1c>
   1dce4:	b90b      	cbnz	r3, 1dcea <__sccl+0x2a>
   1dce6:	3801      	subs	r0, #1
   1dce8:	bd70      	pop	{r4, r5, r6, pc}
   1dcea:	f082 0101 	eor.w	r1, r2, #1
   1dcee:	54e1      	strb	r1, [r4, r3]
   1dcf0:	1c42      	adds	r2, r0, #1
   1dcf2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   1dcf6:	2d2d      	cmp	r5, #45	; 0x2d
   1dcf8:	f102 36ff 	add.w	r6, r2, #4294967295
   1dcfc:	4610      	mov	r0, r2
   1dcfe:	d006      	beq.n	1dd0e <__sccl+0x4e>
   1dd00:	2d5d      	cmp	r5, #93	; 0x5d
   1dd02:	d0f1      	beq.n	1dce8 <__sccl+0x28>
   1dd04:	b90d      	cbnz	r5, 1dd0a <__sccl+0x4a>
   1dd06:	4630      	mov	r0, r6
   1dd08:	e7ee      	b.n	1dce8 <__sccl+0x28>
   1dd0a:	462b      	mov	r3, r5
   1dd0c:	e7ef      	b.n	1dcee <__sccl+0x2e>
   1dd0e:	7816      	ldrb	r6, [r2, #0]
   1dd10:	2e5d      	cmp	r6, #93	; 0x5d
   1dd12:	d0fa      	beq.n	1dd0a <__sccl+0x4a>
   1dd14:	42b3      	cmp	r3, r6
   1dd16:	dcf8      	bgt.n	1dd0a <__sccl+0x4a>
   1dd18:	4618      	mov	r0, r3
   1dd1a:	3001      	adds	r0, #1
   1dd1c:	4286      	cmp	r6, r0
   1dd1e:	5421      	strb	r1, [r4, r0]
   1dd20:	dcfb      	bgt.n	1dd1a <__sccl+0x5a>
   1dd22:	43d8      	mvns	r0, r3
   1dd24:	4430      	add	r0, r6
   1dd26:	1c5d      	adds	r5, r3, #1
   1dd28:	42b3      	cmp	r3, r6
   1dd2a:	bfa8      	it	ge
   1dd2c:	2000      	movge	r0, #0
   1dd2e:	182b      	adds	r3, r5, r0
   1dd30:	3202      	adds	r2, #2
   1dd32:	e7de      	b.n	1dcf2 <__sccl+0x32>

0001dd34 <_strtol_r>:
   1dd34:	f7ef bbb4 	b.w	d4a0 <_strtol_l.isra.0>

0001dd38 <_strtoul_r>:
   1dd38:	f7ef bc2c 	b.w	d594 <_strtoul_l.isra.0>

0001dd3c <__submore>:
   1dd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd40:	460c      	mov	r4, r1
   1dd42:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1dd44:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1dd48:	4299      	cmp	r1, r3
   1dd4a:	d11d      	bne.n	1dd88 <__submore+0x4c>
   1dd4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1dd50:	f7ee fde6 	bl	c920 <_malloc_r>
   1dd54:	b918      	cbnz	r0, 1dd5e <__submore+0x22>
   1dd56:	f04f 30ff 	mov.w	r0, #4294967295
   1dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1dd62:	63a3      	str	r3, [r4, #56]	; 0x38
   1dd64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1dd68:	6360      	str	r0, [r4, #52]	; 0x34
   1dd6a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1dd6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1dd72:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1dd76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1dd7a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1dd7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1dd82:	6020      	str	r0, [r4, #0]
   1dd84:	2000      	movs	r0, #0
   1dd86:	e7e8      	b.n	1dd5a <__submore+0x1e>
   1dd88:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   1dd8a:	0077      	lsls	r7, r6, #1
   1dd8c:	463a      	mov	r2, r7
   1dd8e:	f7ff fe4f 	bl	1da30 <_realloc_r>
   1dd92:	4605      	mov	r5, r0
   1dd94:	2800      	cmp	r0, #0
   1dd96:	d0de      	beq.n	1dd56 <__submore+0x1a>
   1dd98:	eb00 0806 	add.w	r8, r0, r6
   1dd9c:	4601      	mov	r1, r0
   1dd9e:	4632      	mov	r2, r6
   1dda0:	4640      	mov	r0, r8
   1dda2:	f7ff fd75 	bl	1d890 <memcpy>
   1dda6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   1ddaa:	f8c4 8000 	str.w	r8, [r4]
   1ddae:	e7e9      	b.n	1dd84 <__submore+0x48>

0001ddb0 <_malloc_usable_size_r>:
   1ddb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1ddb4:	1f18      	subs	r0, r3, #4
   1ddb6:	2b00      	cmp	r3, #0
   1ddb8:	bfbc      	itt	lt
   1ddba:	580b      	ldrlt	r3, [r1, r0]
   1ddbc:	18c0      	addlt	r0, r0, r3
   1ddbe:	4770      	bx	lr

0001ddc0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1ddc0:	f7ec baf2 	b.w	a3a8 <SystemInit>
