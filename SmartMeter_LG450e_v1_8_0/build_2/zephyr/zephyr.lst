
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20003780 	.word	0x20003780
}
   4:	00006db9 	.word	0x00006db9
   8:	0001d03d 	.word	0x0001d03d
   c:	00006d8d 	.word	0x00006d8d
  10:	00006d8d 	.word	0x00006d8d
  14:	00006d8d 	.word	0x00006d8d
  18:	00006d8d 	.word	0x00006d8d
	...
  2c:	000067ed 	.word	0x000067ed
  30:	00006d8d 	.word	0x00006d8d
  34:	00000000 	.word	0x00000000
  38:	00006799 	.word	0x00006799
  3c:	0001d9f9 	.word	0x0001d9f9

00000040 <_irq_vector_table>:
  40:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  50:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  60:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  70:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  80:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  90:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  a0:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  b0:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  c0:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  d0:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  e0:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..
  f0:	000068a5 000068a5 000068a5 000068a5     .h...h...h...h..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9a>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__data_size+0xa>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__data_size+0x20>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__data_size+0x5e>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__data_size+0x46>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__data_size+0x46>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__data_size+0x72>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__data_size+0x72>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__data_size+0x72>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__data_size+0x20>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__data_size+0x20>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2iz>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     944:	d215      	bcs.n	972 <__aeabi_d2iz+0x36>
     946:	d511      	bpl.n	96c <__aeabi_d2iz+0x30>
     948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     94c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     950:	d912      	bls.n	978 <__aeabi_d2iz+0x3c>
     952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     95a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     95e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     962:	fa23 f002 	lsr.w	r0, r3, r2
     966:	bf18      	it	ne
     968:	4240      	negne	r0, r0
     96a:	4770      	bx	lr
     96c:	f04f 0000 	mov.w	r0, #0
     970:	4770      	bx	lr
     972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     976:	d105      	bne.n	984 <__aeabi_d2iz+0x48>
     978:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     97c:	bf08      	it	eq
     97e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     982:	4770      	bx	lr
     984:	f04f 0000 	mov.w	r0, #0
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <__aeabi_d2uiz>:
     98c:	004a      	lsls	r2, r1, #1
     98e:	d211      	bcs.n	9b4 <__aeabi_d2uiz+0x28>
     990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     994:	d211      	bcs.n	9ba <__aeabi_d2uiz+0x2e>
     996:	d50d      	bpl.n	9b4 <__aeabi_d2uiz+0x28>
     998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     99c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9a0:	d40e      	bmi.n	9c0 <__aeabi_d2uiz+0x34>
     9a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ae:	fa23 f002 	lsr.w	r0, r3, r2
     9b2:	4770      	bx	lr
     9b4:	f04f 0000 	mov.w	r0, #0
     9b8:	4770      	bx	lr
     9ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9be:	d102      	bne.n	9c6 <__aeabi_d2uiz+0x3a>
     9c0:	f04f 30ff 	mov.w	r0, #4294967295
     9c4:	4770      	bx	lr
     9c6:	f04f 0000 	mov.w	r0, #0
     9ca:	4770      	bx	lr

000009cc <__aeabi_f2iz>:
     9cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
     9d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     9d4:	d30f      	bcc.n	9f6 <__aeabi_f2iz+0x2a>
     9d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
     9da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     9de:	d90d      	bls.n	9fc <__aeabi_f2iz+0x30>
     9e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
     9e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     9ec:	fa23 f002 	lsr.w	r0, r3, r2
     9f0:	bf18      	it	ne
     9f2:	4240      	negne	r0, r0
     9f4:	4770      	bx	lr
     9f6:	f04f 0000 	mov.w	r0, #0
     9fa:	4770      	bx	lr
     9fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
     a00:	d101      	bne.n	a06 <__aeabi_f2iz+0x3a>
     a02:	0242      	lsls	r2, r0, #9
     a04:	d105      	bne.n	a12 <__aeabi_f2iz+0x46>
     a06:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     a0a:	bf08      	it	eq
     a0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     a10:	4770      	bx	lr
     a12:	f04f 0000 	mov.w	r0, #0
     a16:	4770      	bx	lr

00000a18 <__aeabi_ldivmod>:
     a18:	b97b      	cbnz	r3, a3a <__aeabi_ldivmod+0x22>
     a1a:	b972      	cbnz	r2, a3a <__aeabi_ldivmod+0x22>
     a1c:	2900      	cmp	r1, #0
     a1e:	bfbe      	ittt	lt
     a20:	2000      	movlt	r0, #0
     a22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     a26:	e006      	blt.n	a36 <__aeabi_ldivmod+0x1e>
     a28:	bf08      	it	eq
     a2a:	2800      	cmpeq	r0, #0
     a2c:	bf1c      	itt	ne
     a2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     a32:	f04f 30ff 	movne.w	r0, #4294967295
     a36:	f000 b9b7 	b.w	da8 <__aeabi_idiv0>
     a3a:	f1ad 0c08 	sub.w	ip, sp, #8
     a3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a42:	2900      	cmp	r1, #0
     a44:	db09      	blt.n	a5a <__aeabi_ldivmod+0x42>
     a46:	2b00      	cmp	r3, #0
     a48:	db1a      	blt.n	a80 <__aeabi_ldivmod+0x68>
     a4a:	f000 f84d 	bl	ae8 <__udivmoddi4>
     a4e:	f8dd e004 	ldr.w	lr, [sp, #4]
     a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a56:	b004      	add	sp, #16
     a58:	4770      	bx	lr
     a5a:	4240      	negs	r0, r0
     a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a60:	2b00      	cmp	r3, #0
     a62:	db1b      	blt.n	a9c <__aeabi_ldivmod+0x84>
     a64:	f000 f840 	bl	ae8 <__udivmoddi4>
     a68:	f8dd e004 	ldr.w	lr, [sp, #4]
     a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a70:	b004      	add	sp, #16
     a72:	4240      	negs	r0, r0
     a74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a78:	4252      	negs	r2, r2
     a7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a7e:	4770      	bx	lr
     a80:	4252      	negs	r2, r2
     a82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a86:	f000 f82f 	bl	ae8 <__udivmoddi4>
     a8a:	f8dd e004 	ldr.w	lr, [sp, #4]
     a8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a92:	b004      	add	sp, #16
     a94:	4240      	negs	r0, r0
     a96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a9a:	4770      	bx	lr
     a9c:	4252      	negs	r2, r2
     a9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     aa2:	f000 f821 	bl	ae8 <__udivmoddi4>
     aa6:	f8dd e004 	ldr.w	lr, [sp, #4]
     aaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     aae:	b004      	add	sp, #16
     ab0:	4252      	negs	r2, r2
     ab2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ab6:	4770      	bx	lr

00000ab8 <__aeabi_uldivmod>:
     ab8:	b953      	cbnz	r3, ad0 <__aeabi_uldivmod+0x18>
     aba:	b94a      	cbnz	r2, ad0 <__aeabi_uldivmod+0x18>
     abc:	2900      	cmp	r1, #0
     abe:	bf08      	it	eq
     ac0:	2800      	cmpeq	r0, #0
     ac2:	bf1c      	itt	ne
     ac4:	f04f 31ff 	movne.w	r1, #4294967295
     ac8:	f04f 30ff 	movne.w	r0, #4294967295
     acc:	f000 b96c 	b.w	da8 <__aeabi_idiv0>
     ad0:	f1ad 0c08 	sub.w	ip, sp, #8
     ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     ad8:	f000 f806 	bl	ae8 <__udivmoddi4>
     adc:	f8dd e004 	ldr.w	lr, [sp, #4]
     ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ae4:	b004      	add	sp, #16
     ae6:	4770      	bx	lr

00000ae8 <__udivmoddi4>:
     ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     aec:	9e08      	ldr	r6, [sp, #32]
     aee:	460d      	mov	r5, r1
     af0:	4604      	mov	r4, r0
     af2:	468e      	mov	lr, r1
     af4:	2b00      	cmp	r3, #0
     af6:	f040 8082 	bne.w	bfe <__udivmoddi4+0x116>
     afa:	428a      	cmp	r2, r1
     afc:	4617      	mov	r7, r2
     afe:	d946      	bls.n	b8e <__udivmoddi4+0xa6>
     b00:	fab2 f282 	clz	r2, r2
     b04:	b14a      	cbz	r2, b1a <__udivmoddi4+0x32>
     b06:	f1c2 0120 	rsb	r1, r2, #32
     b0a:	fa05 f302 	lsl.w	r3, r5, r2
     b0e:	fa20 f101 	lsr.w	r1, r0, r1
     b12:	4097      	lsls	r7, r2
     b14:	ea41 0e03 	orr.w	lr, r1, r3
     b18:	4094      	lsls	r4, r2
     b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     b1e:	0c23      	lsrs	r3, r4, #16
     b20:	fbbe fcf8 	udiv	ip, lr, r8
     b24:	b2b9      	uxth	r1, r7
     b26:	fb08 ee1c 	mls	lr, r8, ip, lr
     b2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     b2e:	fb0c f001 	mul.w	r0, ip, r1
     b32:	4298      	cmp	r0, r3
     b34:	d90a      	bls.n	b4c <__udivmoddi4+0x64>
     b36:	18fb      	adds	r3, r7, r3
     b38:	f10c 35ff 	add.w	r5, ip, #4294967295
     b3c:	f080 8116 	bcs.w	d6c <__udivmoddi4+0x284>
     b40:	4298      	cmp	r0, r3
     b42:	f240 8113 	bls.w	d6c <__udivmoddi4+0x284>
     b46:	f1ac 0c02 	sub.w	ip, ip, #2
     b4a:	443b      	add	r3, r7
     b4c:	1a1b      	subs	r3, r3, r0
     b4e:	b2a4      	uxth	r4, r4
     b50:	fbb3 f0f8 	udiv	r0, r3, r8
     b54:	fb08 3310 	mls	r3, r8, r0, r3
     b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b5c:	fb00 f101 	mul.w	r1, r0, r1
     b60:	42a1      	cmp	r1, r4
     b62:	d909      	bls.n	b78 <__udivmoddi4+0x90>
     b64:	193c      	adds	r4, r7, r4
     b66:	f100 33ff 	add.w	r3, r0, #4294967295
     b6a:	f080 8101 	bcs.w	d70 <__udivmoddi4+0x288>
     b6e:	42a1      	cmp	r1, r4
     b70:	f240 80fe 	bls.w	d70 <__udivmoddi4+0x288>
     b74:	3802      	subs	r0, #2
     b76:	443c      	add	r4, r7
     b78:	1a64      	subs	r4, r4, r1
     b7a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     b7e:	2100      	movs	r1, #0
     b80:	b11e      	cbz	r6, b8a <__udivmoddi4+0xa2>
     b82:	40d4      	lsrs	r4, r2
     b84:	2300      	movs	r3, #0
     b86:	e9c6 4300 	strd	r4, r3, [r6]
     b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b8e:	b902      	cbnz	r2, b92 <__udivmoddi4+0xaa>
     b90:	deff      	udf	#255	; 0xff
     b92:	fab2 f282 	clz	r2, r2
     b96:	2a00      	cmp	r2, #0
     b98:	d14f      	bne.n	c3a <__udivmoddi4+0x152>
     b9a:	1bcb      	subs	r3, r1, r7
     b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ba0:	fa1f f887 	uxth.w	r8, r7
     ba4:	2101      	movs	r1, #1
     ba6:	fbb3 fcfe 	udiv	ip, r3, lr
     baa:	0c25      	lsrs	r5, r4, #16
     bac:	fb0e 331c 	mls	r3, lr, ip, r3
     bb0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     bb4:	fb08 f30c 	mul.w	r3, r8, ip
     bb8:	42ab      	cmp	r3, r5
     bba:	d907      	bls.n	bcc <__udivmoddi4+0xe4>
     bbc:	197d      	adds	r5, r7, r5
     bbe:	f10c 30ff 	add.w	r0, ip, #4294967295
     bc2:	d202      	bcs.n	bca <__udivmoddi4+0xe2>
     bc4:	42ab      	cmp	r3, r5
     bc6:	f200 80e7 	bhi.w	d98 <__udivmoddi4+0x2b0>
     bca:	4684      	mov	ip, r0
     bcc:	1aed      	subs	r5, r5, r3
     bce:	b2a3      	uxth	r3, r4
     bd0:	fbb5 f0fe 	udiv	r0, r5, lr
     bd4:	fb0e 5510 	mls	r5, lr, r0, r5
     bd8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     bdc:	fb08 f800 	mul.w	r8, r8, r0
     be0:	45a0      	cmp	r8, r4
     be2:	d907      	bls.n	bf4 <__udivmoddi4+0x10c>
     be4:	193c      	adds	r4, r7, r4
     be6:	f100 33ff 	add.w	r3, r0, #4294967295
     bea:	d202      	bcs.n	bf2 <__udivmoddi4+0x10a>
     bec:	45a0      	cmp	r8, r4
     bee:	f200 80d7 	bhi.w	da0 <__udivmoddi4+0x2b8>
     bf2:	4618      	mov	r0, r3
     bf4:	eba4 0408 	sub.w	r4, r4, r8
     bf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     bfc:	e7c0      	b.n	b80 <__udivmoddi4+0x98>
     bfe:	428b      	cmp	r3, r1
     c00:	d908      	bls.n	c14 <__udivmoddi4+0x12c>
     c02:	2e00      	cmp	r6, #0
     c04:	f000 80af 	beq.w	d66 <__udivmoddi4+0x27e>
     c08:	2100      	movs	r1, #0
     c0a:	e9c6 0500 	strd	r0, r5, [r6]
     c0e:	4608      	mov	r0, r1
     c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c14:	fab3 f183 	clz	r1, r3
     c18:	2900      	cmp	r1, #0
     c1a:	d14b      	bne.n	cb4 <__udivmoddi4+0x1cc>
     c1c:	42ab      	cmp	r3, r5
     c1e:	d302      	bcc.n	c26 <__udivmoddi4+0x13e>
     c20:	4282      	cmp	r2, r0
     c22:	f200 80b7 	bhi.w	d94 <__udivmoddi4+0x2ac>
     c26:	1a84      	subs	r4, r0, r2
     c28:	eb65 0303 	sbc.w	r3, r5, r3
     c2c:	2001      	movs	r0, #1
     c2e:	469e      	mov	lr, r3
     c30:	2e00      	cmp	r6, #0
     c32:	d0aa      	beq.n	b8a <__udivmoddi4+0xa2>
     c34:	e9c6 4e00 	strd	r4, lr, [r6]
     c38:	e7a7      	b.n	b8a <__udivmoddi4+0xa2>
     c3a:	f1c2 0c20 	rsb	ip, r2, #32
     c3e:	fa01 f302 	lsl.w	r3, r1, r2
     c42:	4097      	lsls	r7, r2
     c44:	fa20 f00c 	lsr.w	r0, r0, ip
     c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     c4c:	fa21 fc0c 	lsr.w	ip, r1, ip
     c50:	4318      	orrs	r0, r3
     c52:	fbbc f1fe 	udiv	r1, ip, lr
     c56:	0c05      	lsrs	r5, r0, #16
     c58:	fb0e cc11 	mls	ip, lr, r1, ip
     c5c:	fa1f f887 	uxth.w	r8, r7
     c60:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     c64:	fb01 f308 	mul.w	r3, r1, r8
     c68:	42ab      	cmp	r3, r5
     c6a:	fa04 f402 	lsl.w	r4, r4, r2
     c6e:	d909      	bls.n	c84 <__udivmoddi4+0x19c>
     c70:	197d      	adds	r5, r7, r5
     c72:	f101 3cff 	add.w	ip, r1, #4294967295
     c76:	f080 808b 	bcs.w	d90 <__udivmoddi4+0x2a8>
     c7a:	42ab      	cmp	r3, r5
     c7c:	f240 8088 	bls.w	d90 <__udivmoddi4+0x2a8>
     c80:	3902      	subs	r1, #2
     c82:	443d      	add	r5, r7
     c84:	1aeb      	subs	r3, r5, r3
     c86:	b285      	uxth	r5, r0
     c88:	fbb3 f0fe 	udiv	r0, r3, lr
     c8c:	fb0e 3310 	mls	r3, lr, r0, r3
     c90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     c94:	fb00 f308 	mul.w	r3, r0, r8
     c98:	42ab      	cmp	r3, r5
     c9a:	d907      	bls.n	cac <__udivmoddi4+0x1c4>
     c9c:	197d      	adds	r5, r7, r5
     c9e:	f100 3cff 	add.w	ip, r0, #4294967295
     ca2:	d271      	bcs.n	d88 <__udivmoddi4+0x2a0>
     ca4:	42ab      	cmp	r3, r5
     ca6:	d96f      	bls.n	d88 <__udivmoddi4+0x2a0>
     ca8:	3802      	subs	r0, #2
     caa:	443d      	add	r5, r7
     cac:	1aeb      	subs	r3, r5, r3
     cae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     cb2:	e778      	b.n	ba6 <__udivmoddi4+0xbe>
     cb4:	f1c1 0c20 	rsb	ip, r1, #32
     cb8:	408b      	lsls	r3, r1
     cba:	fa22 f70c 	lsr.w	r7, r2, ip
     cbe:	431f      	orrs	r7, r3
     cc0:	fa20 f40c 	lsr.w	r4, r0, ip
     cc4:	fa05 f301 	lsl.w	r3, r5, r1
     cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ccc:	fa25 f50c 	lsr.w	r5, r5, ip
     cd0:	431c      	orrs	r4, r3
     cd2:	0c23      	lsrs	r3, r4, #16
     cd4:	fbb5 f9fe 	udiv	r9, r5, lr
     cd8:	fa1f f887 	uxth.w	r8, r7
     cdc:	fb0e 5519 	mls	r5, lr, r9, r5
     ce0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     ce4:	fb09 fa08 	mul.w	sl, r9, r8
     ce8:	45aa      	cmp	sl, r5
     cea:	fa02 f201 	lsl.w	r2, r2, r1
     cee:	fa00 f301 	lsl.w	r3, r0, r1
     cf2:	d908      	bls.n	d06 <__udivmoddi4+0x21e>
     cf4:	197d      	adds	r5, r7, r5
     cf6:	f109 30ff 	add.w	r0, r9, #4294967295
     cfa:	d247      	bcs.n	d8c <__udivmoddi4+0x2a4>
     cfc:	45aa      	cmp	sl, r5
     cfe:	d945      	bls.n	d8c <__udivmoddi4+0x2a4>
     d00:	f1a9 0902 	sub.w	r9, r9, #2
     d04:	443d      	add	r5, r7
     d06:	eba5 050a 	sub.w	r5, r5, sl
     d0a:	b2a4      	uxth	r4, r4
     d0c:	fbb5 f0fe 	udiv	r0, r5, lr
     d10:	fb0e 5510 	mls	r5, lr, r0, r5
     d14:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     d18:	fb00 f808 	mul.w	r8, r0, r8
     d1c:	45a0      	cmp	r8, r4
     d1e:	d907      	bls.n	d30 <__udivmoddi4+0x248>
     d20:	193c      	adds	r4, r7, r4
     d22:	f100 35ff 	add.w	r5, r0, #4294967295
     d26:	d22d      	bcs.n	d84 <__udivmoddi4+0x29c>
     d28:	45a0      	cmp	r8, r4
     d2a:	d92b      	bls.n	d84 <__udivmoddi4+0x29c>
     d2c:	3802      	subs	r0, #2
     d2e:	443c      	add	r4, r7
     d30:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     d34:	eba4 0408 	sub.w	r4, r4, r8
     d38:	fba0 8902 	umull	r8, r9, r0, r2
     d3c:	454c      	cmp	r4, r9
     d3e:	46c6      	mov	lr, r8
     d40:	464d      	mov	r5, r9
     d42:	d319      	bcc.n	d78 <__udivmoddi4+0x290>
     d44:	d016      	beq.n	d74 <__udivmoddi4+0x28c>
     d46:	b15e      	cbz	r6, d60 <__udivmoddi4+0x278>
     d48:	ebb3 020e 	subs.w	r2, r3, lr
     d4c:	eb64 0405 	sbc.w	r4, r4, r5
     d50:	fa04 fc0c 	lsl.w	ip, r4, ip
     d54:	40ca      	lsrs	r2, r1
     d56:	ea4c 0202 	orr.w	r2, ip, r2
     d5a:	40cc      	lsrs	r4, r1
     d5c:	e9c6 2400 	strd	r2, r4, [r6]
     d60:	2100      	movs	r1, #0
     d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d66:	4631      	mov	r1, r6
     d68:	4630      	mov	r0, r6
     d6a:	e70e      	b.n	b8a <__udivmoddi4+0xa2>
     d6c:	46ac      	mov	ip, r5
     d6e:	e6ed      	b.n	b4c <__udivmoddi4+0x64>
     d70:	4618      	mov	r0, r3
     d72:	e701      	b.n	b78 <__udivmoddi4+0x90>
     d74:	4543      	cmp	r3, r8
     d76:	d2e6      	bcs.n	d46 <__udivmoddi4+0x25e>
     d78:	ebb8 0e02 	subs.w	lr, r8, r2
     d7c:	eb69 0507 	sbc.w	r5, r9, r7
     d80:	3801      	subs	r0, #1
     d82:	e7e0      	b.n	d46 <__udivmoddi4+0x25e>
     d84:	4628      	mov	r0, r5
     d86:	e7d3      	b.n	d30 <__udivmoddi4+0x248>
     d88:	4660      	mov	r0, ip
     d8a:	e78f      	b.n	cac <__udivmoddi4+0x1c4>
     d8c:	4681      	mov	r9, r0
     d8e:	e7ba      	b.n	d06 <__udivmoddi4+0x21e>
     d90:	4661      	mov	r1, ip
     d92:	e777      	b.n	c84 <__udivmoddi4+0x19c>
     d94:	4608      	mov	r0, r1
     d96:	e74b      	b.n	c30 <__udivmoddi4+0x148>
     d98:	f1ac 0c02 	sub.w	ip, ip, #2
     d9c:	443d      	add	r5, r7
     d9e:	e715      	b.n	bcc <__udivmoddi4+0xe4>
     da0:	3802      	subs	r0, #2
     da2:	443c      	add	r4, r7
     da4:	e726      	b.n	bf4 <__udivmoddi4+0x10c>
     da6:	bf00      	nop

00000da8 <__aeabi_idiv0>:
     da8:	4770      	bx	lr
     daa:	bf00      	nop

00000dac <strcmp>:
     dac:	f810 2b01 	ldrb.w	r2, [r0], #1
     db0:	f811 3b01 	ldrb.w	r3, [r1], #1
     db4:	2a01      	cmp	r2, #1
     db6:	bf28      	it	cs
     db8:	429a      	cmpcs	r2, r3
     dba:	d0f7      	beq.n	dac <strcmp>
     dbc:	1ad0      	subs	r0, r2, r3
     dbe:	4770      	bx	lr

00000dc0 <strlen>:
     dc0:	4603      	mov	r3, r0
     dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
     dc6:	2a00      	cmp	r2, #0
     dc8:	d1fb      	bne.n	dc2 <strlen+0x2>
     dca:	1a18      	subs	r0, r3, r0
     dcc:	3801      	subs	r0, #1
     dce:	4770      	bx	lr

00000dd0 <comparator_handler>:

#define COMP_LPCOMP_IRQn	19

static void comparator_handler (nrf_comp_event_t event)
{
	printk("Comp event");
     dd0:	4801      	ldr	r0, [pc, #4]	; (dd8 <comparator_handler+0x8>)
     dd2:	f01b bbd0 	b.w	1c576 <printk>
     dd6:	bf00      	nop
     dd8:	0001f728 	.word	0x0001f728

00000ddc <lora_config.constprop.0>:
			      struct lora_modem_config *config)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->config(dev, config);
     ddc:	6883      	ldr	r3, [r0, #8]
     dde:	4901      	ldr	r1, [pc, #4]	; (de4 <lora_config.constprop.0+0x8>)
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	4718      	bx	r3
     de4:	20000648 	.word	0x20000648

00000de8 <init_mbus_comp_gpiote>:
}

void init_mbus_comp_gpiote(){
     de8:	b570      	push	{r4, r5, r6, lr}
     dea:	b086      	sub	sp, #24
  /* Comp Init */
  nrfx_comp_config_t  comp_config = NRFX_COMP_DEFAULT_CONFIG(INPUT_A0);
     dec:	2400      	movs	r4, #0
     dee:	2302      	movs	r3, #2
     df0:	9403      	str	r4, [sp, #12]
     df2:	f88d 3013 	strb.w	r3, [sp, #19]
     df6:	f8cd 400f 	str.w	r4, [sp, #15]
  comp_config.reference = NRF_COMP_REF_Int2V4;
     dfa:	f88d 300c 	strb.w	r3, [sp, #12]
  nrfx_comp_config_t  comp_config = NRFX_COMP_DEFAULT_CONFIG(INPUT_A0);
     dfe:	f88d 3011 	strb.w	r3, [sp, #17]
  nrf_comp_th_t const thres = {
    .th_down = NRFX_VOLTAGE_THRESHOLD_TO_INT(2.0, 2.4),
    .th_up = NRFX_VOLTAGE_THRESHOLD_TO_INT(2.1, 2.4)
  };
  comp_config.threshold = thres;
     e02:	4b49      	ldr	r3, [pc, #292]	; (f28 <init_mbus_comp_gpiote+0x140>)
	nrfx_comp_init(&comp_config, comparator_handler);
     e04:	4949      	ldr	r1, [pc, #292]	; (f2c <init_mbus_comp_gpiote+0x144>)
  comp_config.threshold = thres;
     e06:	881b      	ldrh	r3, [r3, #0]
     e08:	f8ad 300f 	strh.w	r3, [sp, #15]
  nrfx_comp_config_t  comp_config = NRFX_COMP_DEFAULT_CONFIG(INPUT_A0);
     e0c:	2207      	movs	r2, #7
	nrfx_comp_init(&comp_config, comparator_handler);
     e0e:	a803      	add	r0, sp, #12
  nrfx_comp_config_t  comp_config = NRFX_COMP_DEFAULT_CONFIG(INPUT_A0);
     e10:	f88d 2014 	strb.w	r2, [sp, #20]
	nrfx_comp_init(&comp_config, comparator_handler);
     e14:	f009 ff0c 	bl	ac30 <nrfx_comp_init>
	//nrfx_comp_start(NRFX_COMP_EVT_EN_CROSS_MASK, 0);
  nrfx_comp_start(0, 0);
     e18:	4621      	mov	r1, r4
     e1a:	4620      	mov	r0, r4
     e1c:	f009 ff6e 	bl	acfc <nrfx_comp_start>
  /* GPIOTE Init */
  nrfx_gpiote_init(0);
     e20:	4620      	mov	r0, r4
     e22:	f009 ff8b 	bl	ad3c <nrfx_gpiote_init>
  
  nrfx_gpiote_out_config_t const out_config = {
     e26:	4b42      	ldr	r3, [pc, #264]	; (f30 <init_mbus_comp_gpiote+0x148>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
     e28:	4e42      	ldr	r6, [pc, #264]	; (f34 <init_mbus_comp_gpiote+0x14c>)
     e2a:	881a      	ldrh	r2, [r3, #0]
     e2c:	789b      	ldrb	r3, [r3, #2]
     e2e:	f8ad 2008 	strh.w	r2, [sp, #8]
	};
  
  /* Initialize output pin. SET task will turn the LED on,
	 * CLR will turn it off and OUT will toggle it.
	 */
	nrfx_gpiote_out_init(OUTPUT_PIN, &out_config);
     e32:	a902      	add	r1, sp, #8
     e34:	200d      	movs	r0, #13
  nrfx_gpiote_out_config_t const out_config = {
     e36:	f88d 300a 	strb.w	r3, [sp, #10]
	nrfx_gpiote_out_init(OUTPUT_PIN, &out_config);
     e3a:	f01c fdfc 	bl	1da36 <nrfx_gpiote_out_init>
  nrfx_gpiote_out_task_enable(OUTPUT_PIN);
     e3e:	200d      	movs	r0, #13
     e40:	f00a f8a2 	bl	af88 <nrfx_gpiote_out_task_enable>
  nrfx_gpiote_out_init(OUTPUT_PIN_LED, &out_config);
     e44:	a902      	add	r1, sp, #8
     e46:	2008      	movs	r0, #8
     e48:	f01c fdf5 	bl	1da36 <nrfx_gpiote_out_init>
  nrfx_gpiote_out_task_enable(OUTPUT_PIN_LED);
     e4c:	2008      	movs	r0, #8
     e4e:	f00a f89b 	bl	af88 <nrfx_gpiote_out_task_enable>
  /* Allocate a (D)PPI channel. */
	nrf_ppi_channel_t channel_up;
	nrf_ppi_channel_t channel_down;
	nrfx_ppi_channel_alloc(&channel_up);
     e52:	a801      	add	r0, sp, #4
     e54:	f00a f8c2 	bl	afdc <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&channel_down);
     e58:	f10d 0005 	add.w	r0, sp, #5
     e5c:	f00a f8be 	bl	afdc <nrfx_ppi_channel_alloc>
  nrf_ppi_channel_t channel_up_led;
	nrf_ppi_channel_t channel_down_led;
	nrfx_ppi_channel_alloc(&channel_up_led);
     e60:	f10d 0006 	add.w	r0, sp, #6
     e64:	f00a f8ba 	bl	afdc <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&channel_down_led);
     e68:	f10d 0007 	add.w	r0, sp, #7
     e6c:	f00a f8b6 	bl	afdc <nrfx_ppi_channel_alloc>
	/* Configure endpoints of the channel so that the input pin event is
	 * connected with the output pin OUT task. This means that each time
	 * the button is pressed, the LED pin will be toggled.
	 */
	nrfx_gppi_channel_endpoints_setup(channel_up,
     e70:	f89d 4004 	ldrb.w	r4, [sp, #4]
     e74:	4d30      	ldr	r5, [pc, #192]	; (f38 <init_mbus_comp_gpiote+0x150>)
     e76:	200d      	movs	r0, #13
     e78:	f00a f898 	bl	afac <nrfx_gpiote_set_task_get>
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_task_address_get(NRF_GPIOTE_Type const * p_reg,
                                                       nrf_gpiote_task_t       task)
{
    return ((uint32_t)p_reg + task);
     e7c:	00e3      	lsls	r3, r4, #3
     e7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     e82:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
     e86:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     e8a:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
			nrf_comp_event_address_get(NRF_COMP,NRF_COMP_EVENT_UP),
			nrf_gpiote_task_address_get(NRF_GPIOTE,
				nrfx_gpiote_set_task_get(OUTPUT_PIN)));
	nrfx_gppi_channel_endpoints_setup(channel_down,
     e8e:	f89d 4005 	ldrb.w	r4, [sp, #5]
     e92:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
     e96:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
     e9a:	200d      	movs	r0, #13
     e9c:	f00a f892 	bl	afc4 <nrfx_gpiote_clr_task_get>
     ea0:	00e3      	lsls	r3, r4, #3
     ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     ea6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
     eaa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     eae:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
			nrf_comp_event_address_get(NRF_COMP,NRF_COMP_EVENT_DOWN),
			nrf_gpiote_task_address_get(NRF_GPIOTE,
				nrfx_gpiote_clr_task_get(OUTPUT_PIN)));
  nrfx_gppi_channel_endpoints_setup(channel_up_led,
     eb2:	f89d 4006 	ldrb.w	r4, [sp, #6]
    p_reg->CH[(uint32_t) channel].EEP = eep;
     eb6:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
     eba:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
     ebe:	2008      	movs	r0, #8
     ec0:	f00a f874 	bl	afac <nrfx_gpiote_set_task_get>
     ec4:	00e3      	lsls	r3, r4, #3
     ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     eca:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
     ece:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     ed2:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    p_reg->CH[(uint32_t) channel].EEP = eep;
     ed6:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
			nrf_comp_event_address_get(NRF_COMP,NRF_COMP_EVENT_UP),
			nrf_gpiote_task_address_get(NRF_GPIOTE,
				nrfx_gpiote_set_task_get(OUTPUT_PIN_LED)));
	nrfx_gppi_channel_endpoints_setup(channel_down_led,
     eda:	f89d 4007 	ldrb.w	r4, [sp, #7]
    p_reg->CH[(uint32_t) channel].TEP = tep;
     ede:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
     ee2:	2008      	movs	r0, #8
     ee4:	f00a f86e 	bl	afc4 <nrfx_gpiote_clr_task_get>
     ee8:	00e3      	lsls	r3, r4, #3
     eea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     eee:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
     ef2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
     ef6:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    p_reg->CH[(uint32_t) channel].EEP = eep;
     efa:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
     efe:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
			nrf_comp_event_address_get(NRF_COMP,NRF_COMP_EVENT_DOWN),
			nrf_gpiote_task_address_get(NRF_GPIOTE,
				nrfx_gpiote_clr_task_get(OUTPUT_PIN_LED)));
	/* Enable (D)PPI channel. */
  nrfx_ppi_channel_enable(channel_up);
     f02:	f89d 0004 	ldrb.w	r0, [sp, #4]
     f06:	f00a f89d 	bl	b044 <nrfx_ppi_channel_enable>
	nrfx_ppi_channel_enable(channel_down);
     f0a:	f89d 0005 	ldrb.w	r0, [sp, #5]
     f0e:	f00a f899 	bl	b044 <nrfx_ppi_channel_enable>
  nrfx_ppi_channel_enable(channel_up_led);
     f12:	f89d 0006 	ldrb.w	r0, [sp, #6]
     f16:	f00a f895 	bl	b044 <nrfx_ppi_channel_enable>
	nrfx_ppi_channel_enable(channel_down_led);
     f1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
     f1e:	f00a f891 	bl	b044 <nrfx_ppi_channel_enable>
}
     f22:	b006      	add	sp, #24
     f24:	bd70      	pop	{r4, r5, r6, pc}
     f26:	bf00      	nop
     f28:	0001f8f8 	.word	0x0001f8f8
     f2c:	00000dd1 	.word	0x00000dd1
     f30:	0001eaec 	.word	0x0001eaec
     f34:	40013108 	.word	0x40013108
     f38:	40013104 	.word	0x40013104

00000f3c <szl_encode_uleb128>:
 * Encode an unsigned LEB128 encoded datum. The algorithm is taken
 * from Appendix C of the DWARF 3 spec. For information on the
 * encodings refer to section "7.6 - Variable Length Data". Return
 * the number of bytes written.
 */
size_t szl_encode_uleb128(uint64_t val, uint8_t * dst){
     f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f3e:	460d      	mov	r5, r1
     f40:	490d      	ldr	r1, [pc, #52]	; (f78 <szl_encode_uleb128+0x3c>)
     f42:	4604      	mov	r4, r0
	static uint8_t count;
	static uint8_t byte;
  count = 0;
     f44:	2000      	movs	r0, #0
	do {
		byte = val & 0x7f;
		val >>= 7;
     f46:	09e6      	lsrs	r6, r4, #7
     f48:	ea46 6645 	orr.w	r6, r6, r5, lsl #25
     f4c:	09ef      	lsrs	r7, r5, #7
		byte = val & 0x7f;
     f4e:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		val >>= 7;
     f52:	463d      	mov	r5, r7
     f54:	4634      	mov	r4, r6

		if (val != 0)
     f56:	ea54 0605 	orrs.w	r6, r4, r5
		byte |= 0x80;  // mark this byte to show that more bytes will follow
     f5a:	bf18      	it	ne
     f5c:	f063 037f 	ornne	r3, r3, #127	; 0x7f
     f60:	700b      	strb	r3, [r1, #0]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     f62:	780b      	ldrb	r3, [r1, #0]
     f64:	5413      	strb	r3, [r2, r0]

		memcpy(dst+count,&byte,1);

		count++;
     f66:	3001      	adds	r0, #1
  	} while (val != 0);
     f68:	ea54 0305 	orrs.w	r3, r4, r5
		count++;
     f6c:	b2c0      	uxtb	r0, r0
  	} while (val != 0);
     f6e:	d1ea      	bne.n	f46 <szl_encode_uleb128+0xa>
     f70:	4b02      	ldr	r3, [pc, #8]	; (f7c <szl_encode_uleb128+0x40>)
     f72:	7018      	strb	r0, [r3, #0]
	return count;
}
     f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f76:	bf00      	nop
     f78:	20001434 	.word	0x20001434
     f7c:	20001c35 	.word	0x20001c35

00000f80 <sponge_encode>:
/**
 * Encode the buffer with sponge
 * @buffer: buffer to encode into
 * @ret: size of encoded bytes
 */
int sponge_encode(uint8_t *buffer) {
     f80:	b570      	push	{r4, r5, r6, lr}
    //Encode Message 
    int pos = 0;
    //printk("Bitmask: %u\n",new_data_bitmask[0]); 
    pos += szl_encode_uleb128(new_data_bitmask[0],&buffer[pos]);
     f82:	4d25      	ldr	r5, [pc, #148]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     f84:	4602      	mov	r2, r0
int sponge_encode(uint8_t *buffer) {
     f86:	4606      	mov	r6, r0
    pos += szl_encode_uleb128(new_data_bitmask[0],&buffer[pos]);
     f88:	2100      	movs	r1, #0
     f8a:	7828      	ldrb	r0, [r5, #0]
     f8c:	f7ff ffd6 	bl	f3c <szl_encode_uleb128>
    if (new_data_bitmask[0] & (1 << 0))
     f90:	782b      	ldrb	r3, [r5, #0]
     f92:	07da      	lsls	r2, r3, #31
    pos += szl_encode_uleb128(new_data_bitmask[0],&buffer[pos]);
     f94:	4604      	mov	r4, r0
    if (new_data_bitmask[0] & (1 << 0))
     f96:	d506      	bpl.n	fa6 <sponge_encode+0x26>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L1,&buffer[pos]);
     f98:	4b20      	ldr	r3, [pc, #128]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     f9a:	1832      	adds	r2, r6, r0
     f9c:	2100      	movs	r1, #0
     f9e:	8818      	ldrh	r0, [r3, #0]
     fa0:	f7ff ffcc 	bl	f3c <szl_encode_uleb128>
     fa4:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 1))
     fa6:	782b      	ldrb	r3, [r5, #0]
     fa8:	079b      	lsls	r3, r3, #30
     faa:	d506      	bpl.n	fba <sponge_encode+0x3a>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L2,&buffer[pos]);
     fac:	4b1b      	ldr	r3, [pc, #108]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fae:	1932      	adds	r2, r6, r4
     fb0:	8858      	ldrh	r0, [r3, #2]
     fb2:	2100      	movs	r1, #0
     fb4:	f7ff ffc2 	bl	f3c <szl_encode_uleb128>
     fb8:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 2))
     fba:	782b      	ldrb	r3, [r5, #0]
     fbc:	0758      	lsls	r0, r3, #29
     fbe:	d506      	bpl.n	fce <sponge_encode+0x4e>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Strom_L3,&buffer[pos]);
     fc0:	4b16      	ldr	r3, [pc, #88]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fc2:	1932      	adds	r2, r6, r4
     fc4:	8898      	ldrh	r0, [r3, #4]
     fc6:	2100      	movs	r1, #0
     fc8:	f7ff ffb8 	bl	f3c <szl_encode_uleb128>
     fcc:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 3))
     fce:	782b      	ldrb	r3, [r5, #0]
     fd0:	0719      	lsls	r1, r3, #28
     fd2:	d506      	bpl.n	fe2 <sponge_encode+0x62>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkleistungsbezug,&buffer[pos]);
     fd4:	4b11      	ldr	r3, [pc, #68]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fd6:	1932      	adds	r2, r6, r4
     fd8:	6898      	ldr	r0, [r3, #8]
     fda:	2100      	movs	r1, #0
     fdc:	f7ff ffae 	bl	f3c <szl_encode_uleb128>
     fe0:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 4))
     fe2:	782b      	ldrb	r3, [r5, #0]
     fe4:	06da      	lsls	r2, r3, #27
     fe6:	d506      	bpl.n	ff6 <sponge_encode+0x76>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkenergiebezug_Tarif_1,&buffer[pos]);
     fe8:	4b0c      	ldr	r3, [pc, #48]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fea:	1932      	adds	r2, r6, r4
     fec:	68d8      	ldr	r0, [r3, #12]
     fee:	2100      	movs	r1, #0
     ff0:	f7ff ffa4 	bl	f3c <szl_encode_uleb128>
     ff4:	4404      	add	r4, r0
    }
    if (new_data_bitmask[0] & (1 << 5))
     ff6:	782b      	ldrb	r3, [r5, #0]
     ff8:	069b      	lsls	r3, r3, #26
     ffa:	d506      	bpl.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
    {
      pos += szl_encode_uleb128(Smart_Meter_data.Wirkenergiebezug_Tarif_2,&buffer[pos]);
     ffc:	4b07      	ldr	r3, [pc, #28]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     ffe:	1932      	adds	r2, r6, r4
    1000:	6918      	ldr	r0, [r3, #16]
    1002:	2100      	movs	r1, #0
    1004:	f7ff ff9a 	bl	f3c <szl_encode_uleb128>
    1008:	4404      	add	r4, r0
    } 
    printk("Message Encoded Size: %u\n",pos);   
    100a:	4805      	ldr	r0, [pc, #20]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    100c:	4621      	mov	r1, r4
    100e:	f01b fab2 	bl	1c576 <printk>
    return pos;
}
    1012:	4620      	mov	r0, r4
    1014:	bd70      	pop	{r4, r5, r6, pc}
    1016:	bf00      	nop
    1018:	20001d36 	.word	0x20001d36
    101c:	20000630 	.word	0x20000630
    1020:	0001f733 	.word	0x0001f733

00001024 <dlms_console_init>:

static uint8_t console_rxbuf[CONFIG_CONSOLE_GETCHAR_BUFSIZE];
static uint8_t console_txbuf[CONFIG_CONSOLE_PUTCHAR_BUFSIZE];

int dlms_console_init(void)
{
    1024:	b570      	push	{r4, r5, r6, lr}
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1026:	4e12      	ldr	r6, [pc, #72]	; (1070 <dlms_console_init+0x4c>)
    1028:	4630      	mov	r0, r6
    102a:	f01c fd70 	bl	1db0e <z_device_ready>
    102e:	b1c8      	cbz	r0, 1064 <dlms_console_init+0x40>
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	if (!device_is_ready(uart_dev)) {
		return -ENODEV;
	}

	ret = tty_init(&console_serial, uart_dev);
    1030:	4d10      	ldr	r5, [pc, #64]	; (1074 <dlms_console_init+0x50>)
    1032:	4631      	mov	r1, r6
    1034:	4628      	mov	r0, r5
    1036:	f005 f95b 	bl	62f0 <tty_init>

	if (ret) {
    103a:	4604      	mov	r4, r0
    103c:	b980      	cbnz	r0, 1060 <dlms_console_init+0x3c>

	/* Checks device driver supports for interrupt driven data transfers. */
	if (CONFIG_CONSOLE_GETCHAR_BUFSIZE + CONFIG_CONSOLE_PUTCHAR_BUFSIZE) {
		const struct uart_driver_api *api =
			(const struct uart_driver_api *)uart_dev->api;
		if (!api->irq_callback_set) {
    103e:	68b3      	ldr	r3, [r6, #8]
    1040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1042:	b193      	cbz	r3, 106a <dlms_console_init+0x46>
			return -ENOTSUP;
		}
	}

	tty_set_tx_buf(&console_serial, console_txbuf, sizeof(console_txbuf));
    1044:	490c      	ldr	r1, [pc, #48]	; (1078 <dlms_console_init+0x54>)
    1046:	f44f 6280 	mov.w	r2, #1024	; 0x400
    104a:	4628      	mov	r0, r5
    104c:	f01b ffd3 	bl	1cff6 <tty_set_tx_buf>
	tty_set_rx_buf(&console_serial, console_rxbuf, sizeof(console_rxbuf));
    1050:	490a      	ldr	r1, [pc, #40]	; (107c <dlms_console_init+0x58>)
    1052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1056:	4628      	mov	r0, r5
    1058:	f01b ffb4 	bl	1cfc4 <tty_set_rx_buf>

  //Set Timeout
  console_serial.rx_timeout = 100; //100ms
    105c:	2364      	movs	r3, #100	; 0x64
    105e:	62ab      	str	r3, [r5, #40]	; 0x28

	return 0;
}
    1060:	4620      	mov	r0, r4
    1062:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    1064:	f06f 0412 	mvn.w	r4, #18
    1068:	e7fa      	b.n	1060 <dlms_console_init+0x3c>
			return -ENOTSUP;
    106a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    106e:	e7f7      	b.n	1060 <dlms_console_init+0x3c>
    1070:	0001e7e8 	.word	0x0001e7e8
    1074:	20000654 	.word	0x20000654
    1078:	20001835 	.word	0x20001835
    107c:	20001435 	.word	0x20001435

00001080 <dlms_push_listener_init>:
{
  //Empty skeleton. This is added because server implementation needs this.
}

void dlms_push_listener_init(void)
{
    1080:	b5f0      	push	{r4, r5, r6, r7, lr}
    1082:	b085      	sub	sp, #20
  dlms_console_init();
    1084:	f7ff ffce 	bl	1024 <dlms_console_init>
  BYTE_BUFFER_INIT(&frameData);
    1088:	4818      	ldr	r0, [pc, #96]	; (10ec <dlms_push_listener_init+0x6c>)
    108a:	f00d f957 	bl	e33c <bb_init>
  //Set frame capacity.
  bb_capacity(&frameData, 1024);
    108e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1092:	4816      	ldr	r0, [pc, #88]	; (10ec <dlms_push_listener_init+0x6c>)
    1094:	f00d f958 	bl	e348 <bb_capacity>
  reply_init(&data);
    1098:	4815      	ldr	r0, [pc, #84]	; (10f0 <dlms_push_listener_init+0x70>)
    109a:	f01a fdd2 	bl	1bc42 <reply_init>
  //TODO: Parameters depend from the meter.
  cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
    109e:	2300      	movs	r3, #0
    10a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    10a4:	9300      	str	r3, [sp, #0]
    10a6:	2301      	movs	r3, #1
    10a8:	4619      	mov	r1, r3
    10aa:	4812      	ldr	r0, [pc, #72]	; (10f4 <dlms_push_listener_init+0x74>)
    10ac:	f243 32ff 	movw	r2, #13311	; 0x33ff
    10b0:	f002 f82c 	bl	310c <cl_init>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    10b4:	4b10      	ldr	r3, [pc, #64]	; (10f8 <dlms_push_listener_init+0x78>)
    10b6:	6818      	ldr	r0, [r3, #0]
    10b8:	7919      	ldrb	r1, [r3, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    10ba:	795b      	ldrb	r3, [r3, #5]
	struct gpio_driver_data *data =
    10bc:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
    10be:	6887      	ldr	r7, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    10c0:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    10c2:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    10c4:	bf54      	ite	pl
    10c6:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    10ca:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    10ce:	2501      	movs	r5, #1
    10d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    10d4:	408d      	lsls	r5, r1
    10d6:	07db      	lsls	r3, r3, #31
	return api->pin_configure(port, pin, flags);
    10d8:	683b      	ldr	r3, [r7, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    10da:	bf4c      	ite	mi
    10dc:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    10de:	43ac      	bicpl	r4, r5
    10e0:	6034      	str	r4, [r6, #0]
  //init LEDs
  gpio_pin_configure_dt(&led_green,  GPIO_OUTPUT_INACTIVE);
}
    10e2:	b005      	add	sp, #20
    10e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return api->pin_configure(port, pin, flags);
    10e8:	4718      	bx	r3
    10ea:	bf00      	nop
    10ec:	200006a8 	.word	0x200006a8
    10f0:	20000360 	.word	0x20000360
    10f4:	200006c0 	.word	0x200006c0
    10f8:	20000000 	.word	0x20000000

000010fc <dlms_push_listener_rx>:
  18,   0,  17,  18,   0,  16,  50,  22, 
  126
};

void dlms_push_listener_rx(void)
{
    10fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static bool done;
  done = false;
    1100:	4b64      	ldr	r3, [pc, #400]	; (1294 <dlms_push_listener_rx+0x198>)
    //Wait for Serial Data
    static char buf[512];
    static int bytes_read;
    //int bytes_read = dlms_console_read(NULL,buf,512);
    k_msleep(2000);
    bytes_read = sizeof(dlms_raw_bin_test_data);
    1102:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 12d0 <dlms_push_listener_rx+0x1d4>
{
    1106:	b093      	sub	sp, #76	; 0x4c
  done = false;
    1108:	2200      	movs	r2, #0
    110a:	701a      	strb	r2, [r3, #0]
  while (!done)
    110c:	9307      	str	r3, [sp, #28]
    110e:	9b07      	ldr	r3, [sp, #28]
    1110:	781c      	ldrb	r4, [r3, #0]
    1112:	b114      	cbz	r4, 111a <dlms_push_listener_rx+0x1e>
    cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
    bb_empty(&frameData);
    reply_clear(&data);
    }
  }
}
    1114:	b013      	add	sp, #76	; 0x4c
    1116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bytes_read = sizeof(dlms_raw_bin_test_data);
    111a:	f240 1591 	movw	r5, #401	; 0x191
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    111e:	2100      	movs	r1, #0
    1120:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    1124:	f00b fb9a 	bl	c85c <z_impl_k_sleep>
    1128:	462a      	mov	r2, r5
    112a:	495b      	ldr	r1, [pc, #364]	; (1298 <dlms_push_listener_rx+0x19c>)
    112c:	485b      	ldr	r0, [pc, #364]	; (129c <dlms_push_listener_rx+0x1a0>)
    112e:	f8c8 5000 	str.w	r5, [r8]
    memcpy(buf,dlms_raw_bin_test_data,bytes_read);
    1132:	f01d f866 	bl	1e202 <memcpy>
    printk("Received: %d\n", bytes_read);    
    1136:	4629      	mov	r1, r5
    1138:	4859      	ldr	r0, [pc, #356]	; (12a0 <dlms_push_listener_rx+0x1a4>)
    113a:	4e58      	ldr	r6, [pc, #352]	; (129c <dlms_push_listener_rx+0x1a0>)
    113c:	f01b fa1b 	bl	1c576 <printk>
    if (bytes_read > 0)
    1140:	f8d8 5000 	ldr.w	r5, [r8]
    1144:	2d00      	cmp	r5, #0
    1146:	dde2      	ble.n	110e <dlms_push_listener_rx+0x12>
      pos = 0;
    1148:	4956      	ldr	r1, [pc, #344]	; (12a4 <dlms_push_listener_rx+0x1a8>)
      frame_start = NULL;
    114a:	4857      	ldr	r0, [pc, #348]	; (12a8 <dlms_push_listener_rx+0x1ac>)
      pos = 0;
    114c:	600c      	str	r4, [r1, #0]
      frame_start = NULL;
    114e:	6004      	str	r4, [r0, #0]
      for (size_t i = 0; i < bytes_read; i++)
    1150:	46b4      	mov	ip, r6
    1152:	4622      	mov	r2, r4
    1154:	468b      	mov	fp, r1
    1156:	4607      	mov	r7, r0
        if (buf[i] == delim)
    1158:	f81c 4b01 	ldrb.w	r4, [ip], #1
    115c:	2c7e      	cmp	r4, #126	; 0x7e
    115e:	d13e      	bne.n	11de <dlms_push_listener_rx+0xe2>
          frame_start = &buf[i];
    1160:	18b4      	adds	r4, r6, r2
    1162:	6004      	str	r4, [r0, #0]
          pos = i;
    1164:	600a      	str	r2, [r1, #0]
        frame_size = frame_size + 2; //Append Tag fields sizes
    1166:	f8df 916c 	ldr.w	r9, [pc, #364]	; 12d4 <dlms_push_listener_rx+0x1d8>
      while (frame_start != NULL)
    116a:	683a      	ldr	r2, [r7, #0]
    116c:	2a00      	cmp	r2, #0
    116e:	d07c      	beq.n	126a <dlms_push_listener_rx+0x16e>
        frame_size = buf[pos+2];
    1170:	f8db 2000 	ldr.w	r2, [fp]
        printk("Frame Size: %u\n", frame_size);
    1174:	484d      	ldr	r0, [pc, #308]	; (12ac <dlms_push_listener_rx+0x1b0>)
        if (notify_getData(&settings, &frameData, &data) != 0)
    1176:	4c4e      	ldr	r4, [pc, #312]	; (12b0 <dlms_push_listener_rx+0x1b4>)
    1178:	f8df a13c 	ldr.w	sl, [pc, #316]	; 12b8 <dlms_push_listener_rx+0x1bc>
        frame_size = buf[pos+2];
    117c:	4432      	add	r2, r6
    117e:	4625      	mov	r5, r4
    1180:	7891      	ldrb	r1, [r2, #2]
        frame_size = frame_size + 2; //Append Tag fields sizes
    1182:	3102      	adds	r1, #2
    1184:	f8a9 1000 	strh.w	r1, [r9]
        printk("Frame Size: %u\n", frame_size);
    1188:	f01b f9f5 	bl	1c576 <printk>
        bb_set(&frameData,frame_start,(size_t)frame_size);
    118c:	f8b9 2000 	ldrh.w	r2, [r9]
    1190:	6839      	ldr	r1, [r7, #0]
    1192:	4848      	ldr	r0, [pc, #288]	; (12b4 <dlms_push_listener_rx+0x1b8>)
    1194:	f00d fa21 	bl	e5da <bb_set>
        if (notify_getData(&settings, &frameData, &data) != 0)
    1198:	4946      	ldr	r1, [pc, #280]	; (12b4 <dlms_push_listener_rx+0x1b8>)
    119a:	4847      	ldr	r0, [pc, #284]	; (12b8 <dlms_push_listener_rx+0x1bc>)
    119c:	4622      	mov	r2, r4
    119e:	f01a fbd1 	bl	1b944 <notify_getData>
    11a2:	b300      	cbz	r0, 11e6 <dlms_push_listener_rx+0xea>
          printk("Invalid data received!\n");
    11a4:	4845      	ldr	r0, [pc, #276]	; (12bc <dlms_push_listener_rx+0x1c0>)
    11a6:	f01b f9e6 	bl	1c576 <printk>
          reply_clear(&data);
    11aa:	4620      	mov	r0, r4
    11ac:	f01a fd84 	bl	1bcb8 <reply_clear>
          bb_empty(&frameData);
    11b0:	4840      	ldr	r0, [pc, #256]	; (12b4 <dlms_push_listener_rx+0x1b8>)
    11b2:	f00d fa97 	bl	e6e4 <bb_empty>
        frame_start = NULL;
    11b6:	2200      	movs	r2, #0
        for (size_t i = pos+frame_size; i < bytes_read; i++)
    11b8:	f8db 1000 	ldr.w	r1, [fp]
        frame_start = NULL;
    11bc:	603a      	str	r2, [r7, #0]
        for (size_t i = pos+frame_size; i < bytes_read; i++)
    11be:	f9b9 2000 	ldrsh.w	r2, [r9]
    11c2:	440a      	add	r2, r1
    11c4:	f8d8 1000 	ldr.w	r1, [r8]
    11c8:	4291      	cmp	r1, r2
    11ca:	d9ce      	bls.n	116a <dlms_push_listener_rx+0x6e>
          if (buf[i] == delim)
    11cc:	5d90      	ldrb	r0, [r2, r6]
    11ce:	287e      	cmp	r0, #126	; 0x7e
    11d0:	f040 811b 	bne.w	140a <dlms_push_listener_rx+0x30e>
            frame_start = &buf[i];
    11d4:	18b1      	adds	r1, r6, r2
    11d6:	6039      	str	r1, [r7, #0]
            pos = i;
    11d8:	f8cb 2000 	str.w	r2, [fp]
            break;
    11dc:	e7c5      	b.n	116a <dlms_push_listener_rx+0x6e>
      for (size_t i = 0; i < bytes_read; i++)
    11de:	3201      	adds	r2, #1
    11e0:	4295      	cmp	r5, r2
    11e2:	d8b9      	bhi.n	1158 <dlms_push_listener_rx+0x5c>
    11e4:	e7bf      	b.n	1166 <dlms_push_listener_rx+0x6a>
          if (data.complete)
    11e6:	7c22      	ldrb	r2, [r4, #16]
    11e8:	2a00      	cmp	r2, #0
    11ea:	d0e4      	beq.n	11b6 <dlms_push_listener_rx+0xba>
            bb_empty(&frameData);
    11ec:	4831      	ldr	r0, [pc, #196]	; (12b4 <dlms_push_listener_rx+0x1b8>)
    11ee:	f00d fa79 	bl	e6e4 <bb_empty>
            if (data.moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    11f2:	7824      	ldrb	r4, [r4, #0]
    11f4:	2c00      	cmp	r4, #0
    11f6:	d1de      	bne.n	11b6 <dlms_push_listener_rx+0xba>
              arr_init(&items);
    11f8:	a80a      	add	r0, sp, #40	; 0x28
              Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
    11fa:	4f31      	ldr	r7, [pc, #196]	; (12c0 <dlms_push_listener_rx+0x1c4>)
    11fc:	4e31      	ldr	r6, [pc, #196]	; (12c4 <dlms_push_listener_rx+0x1c8>)
                  snprintk(ln,sizeof(ln)-1,"%u.%u.%u.%u.%u.%u",item->logicalName[0],item->logicalName[1],item->logicalName[2],item->logicalName[3],item->logicalName[4],item->logicalName[5]);
    11fe:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 12d8 <dlms_push_listener_rx+0x1dc>
              arr_init(&items);
    1202:	f010 fc5e 	bl	11ac2 <arr_init>
              notify_parsePush(&settings, data.dataValue.Arr, &items);
    1206:	6a29      	ldr	r1, [r5, #32]
    1208:	aa0a      	add	r2, sp, #40	; 0x28
    120a:	4650      	mov	r0, sl
    120c:	f01a fb9d 	bl	1b94a <notify_parsePush>
              Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
    1210:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1212:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1214:	683b      	ldr	r3, [r7, #0]
              new_data_bitmask[0] = 0x0; //Init the new_data_bitmask
    1216:	4f2c      	ldr	r7, [pc, #176]	; (12c8 <dlms_push_listener_rx+0x1cc>)
              Smart_Meter_data = Smart_Meter_data_init; //Init the Target Data Structure
    1218:	f846 3910 	str.w	r3, [r6], #-16
              new_data_bitmask[0] = 0x0; //Init the new_data_bitmask
    121c:	703c      	strb	r4, [r7, #0]
                  oa_getByIndex(&settings.objects,pos,&item);
    121e:	f10a 0998 	add.w	r9, sl, #152	; 0x98
              for (pos = 0; pos != settings.objects.size; ++pos)
    1222:	f8ba 309e 	ldrh.w	r3, [sl, #158]	; 0x9e
    1226:	b2a1      	uxth	r1, r4
    1228:	428b      	cmp	r3, r1
    122a:	d157      	bne.n	12dc <dlms_push_listener_rx+0x1e0>
              cl_clear(&settings);
    122c:	4822      	ldr	r0, [pc, #136]	; (12b8 <dlms_push_listener_rx+0x1bc>)
    122e:	f010 fbba 	bl	119a6 <cl_clear>
              cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
    1232:	2300      	movs	r3, #0
    1234:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1238:	9300      	str	r3, [sp, #0]
    123a:	2301      	movs	r3, #1
    123c:	4619      	mov	r1, r3
    123e:	f243 32ff 	movw	r2, #13311	; 0x33ff
    1242:	481d      	ldr	r0, [pc, #116]	; (12b8 <dlms_push_listener_rx+0x1bc>)
    1244:	f001 ff62 	bl	310c <cl_init>
              bb_empty(&frameData);
    1248:	481a      	ldr	r0, [pc, #104]	; (12b4 <dlms_push_listener_rx+0x1b8>)
    124a:	f00d fa4b 	bl	e6e4 <bb_empty>
              reply_clear(&data);
    124e:	4818      	ldr	r0, [pc, #96]	; (12b0 <dlms_push_listener_rx+0x1b4>)
    1250:	f01a fd32 	bl	1bcb8 <reply_clear>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_toggle(spec->port, spec->pin);
    1254:	4b1d      	ldr	r3, [pc, #116]	; (12cc <dlms_push_listener_rx+0x1d0>)
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    1256:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_toggle(spec->port, spec->pin);
    1258:	6818      	ldr	r0, [r3, #0]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    125a:	2401      	movs	r4, #1
    125c:	fa04 f101 	lsl.w	r1, r4, r1
	return api->port_toggle_bits(port, pins);
    1260:	6883      	ldr	r3, [r0, #8]
    1262:	695b      	ldr	r3, [r3, #20]
    1264:	4798      	blx	r3
              done = true;
    1266:	9b07      	ldr	r3, [sp, #28]
    1268:	701c      	strb	r4, [r3, #0]
    cl_clear(&settings);
    126a:	4813      	ldr	r0, [pc, #76]	; (12b8 <dlms_push_listener_rx+0x1bc>)
    126c:	f010 fb9b 	bl	119a6 <cl_clear>
    cl_init(&settings, true, 13311, 1, DLMS_AUTHENTICATION_NONE, NULL, DLMS_INTERFACE_TYPE_HDLC);
    1270:	2300      	movs	r3, #0
    1272:	e9cd 3301 	strd	r3, r3, [sp, #4]
    1276:	9300      	str	r3, [sp, #0]
    1278:	2301      	movs	r3, #1
    127a:	f243 32ff 	movw	r2, #13311	; 0x33ff
    127e:	4619      	mov	r1, r3
    1280:	480d      	ldr	r0, [pc, #52]	; (12b8 <dlms_push_listener_rx+0x1bc>)
    1282:	f001 ff43 	bl	310c <cl_init>
    bb_empty(&frameData);
    1286:	480b      	ldr	r0, [pc, #44]	; (12b4 <dlms_push_listener_rx+0x1b8>)
    1288:	f00d fa2c 	bl	e6e4 <bb_empty>
    reply_clear(&data);
    128c:	4808      	ldr	r0, [pc, #32]	; (12b0 <dlms_push_listener_rx+0x1b4>)
    128e:	f01a fd13 	bl	1bcb8 <reply_clear>
    1292:	e73c      	b.n	110e <dlms_push_listener_rx+0x12>
    1294:	20001d35 	.word	0x20001d35
    1298:	0001eaef 	.word	0x0001eaef
    129c:	20001234 	.word	0x20001234
    12a0:	0001f74d 	.word	0x0001f74d
    12a4:	200006bc 	.word	0x200006bc
    12a8:	200006b4 	.word	0x200006b4
    12ac:	0001f75b 	.word	0x0001f75b
    12b0:	20000360 	.word	0x20000360
    12b4:	200006a8 	.word	0x200006a8
    12b8:	200006c0 	.word	0x200006c0
    12bc:	0001f76b 	.word	0x0001f76b
    12c0:	0001ec98 	.word	0x0001ec98
    12c4:	20000630 	.word	0x20000630
    12c8:	20001d36 	.word	0x20001d36
    12cc:	20000000 	.word	0x20000000
    12d0:	20000644 	.word	0x20000644
    12d4:	20001232 	.word	0x20001232
    12d8:	0001f783 	.word	0x0001f783
                  oa_getByIndex(&settings.objects,pos,&item);
    12dc:	aa09      	add	r2, sp, #36	; 0x24
    12de:	4648      	mov	r0, r9
    12e0:	f01a fc5d 	bl	1bb9e <oa_getByIndex>
                  snprintk(ln,sizeof(ln)-1,"%u.%u.%u.%u.%u.%u",item->logicalName[0],item->logicalName[1],item->logicalName[2],item->logicalName[3],item->logicalName[4],item->logicalName[5]);
    12e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    12e6:	7ad1      	ldrb	r1, [r2, #11]
    12e8:	7993      	ldrb	r3, [r2, #6]
    12ea:	9104      	str	r1, [sp, #16]
    12ec:	7a91      	ldrb	r1, [r2, #10]
    12ee:	9103      	str	r1, [sp, #12]
    12f0:	7a51      	ldrb	r1, [r2, #9]
    12f2:	9102      	str	r1, [sp, #8]
    12f4:	7a11      	ldrb	r1, [r2, #8]
    12f6:	9101      	str	r1, [sp, #4]
    12f8:	79d2      	ldrb	r2, [r2, #7]
    12fa:	9200      	str	r2, [sp, #0]
    12fc:	2113      	movs	r1, #19
    12fe:	465a      	mov	r2, fp
    1300:	a80d      	add	r0, sp, #52	; 0x34
    1302:	f01b f945 	bl	1c590 <snprintk>
                  if (strcmp(ln,"1.0.31.7.0.255") == 0)
    1306:	4942      	ldr	r1, [pc, #264]	; (1410 <dlms_push_listener_rx+0x314>)
    1308:	a80d      	add	r0, sp, #52	; 0x34
    130a:	f7ff fd4f 	bl	dac <strcmp>
    130e:	b960      	cbnz	r0, 132a <dlms_push_listener_rx+0x22e>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1310:	b2a1      	uxth	r1, r4
    1312:	6a28      	ldr	r0, [r5, #32]
    1314:	aa08      	add	r2, sp, #32
    1316:	3101      	adds	r1, #1
    1318:	f01a feab 	bl	1c072 <va_getByIndex>
                    Smart_Meter_data.Strom_L1 = tmp->uiVal;
    131c:	9b08      	ldr	r3, [sp, #32]
    131e:	891b      	ldrh	r3, [r3, #8]
    1320:	8033      	strh	r3, [r6, #0]
                    new_data_bitmask[0] |= 1 << 0;
    1322:	783b      	ldrb	r3, [r7, #0]
    1324:	f043 0301 	orr.w	r3, r3, #1
    1328:	703b      	strb	r3, [r7, #0]
                  if (strcmp(ln,"1.0.51.7.0.255") == 0)
    132a:	493a      	ldr	r1, [pc, #232]	; (1414 <dlms_push_listener_rx+0x318>)
    132c:	a80d      	add	r0, sp, #52	; 0x34
    132e:	f7ff fd3d 	bl	dac <strcmp>
    1332:	b960      	cbnz	r0, 134e <dlms_push_listener_rx+0x252>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1334:	b2a1      	uxth	r1, r4
    1336:	6a28      	ldr	r0, [r5, #32]
    1338:	aa08      	add	r2, sp, #32
    133a:	3101      	adds	r1, #1
    133c:	f01a fe99 	bl	1c072 <va_getByIndex>
                    Smart_Meter_data.Strom_L2 = tmp->uiVal;
    1340:	9b08      	ldr	r3, [sp, #32]
    1342:	891b      	ldrh	r3, [r3, #8]
    1344:	8073      	strh	r3, [r6, #2]
                    new_data_bitmask[0] |= 1 << 1;
    1346:	783b      	ldrb	r3, [r7, #0]
    1348:	f043 0302 	orr.w	r3, r3, #2
    134c:	703b      	strb	r3, [r7, #0]
                  if (strcmp(ln,"1.0.71.7.0.255") == 0)
    134e:	4932      	ldr	r1, [pc, #200]	; (1418 <dlms_push_listener_rx+0x31c>)
    1350:	a80d      	add	r0, sp, #52	; 0x34
    1352:	f7ff fd2b 	bl	dac <strcmp>
    1356:	b988      	cbnz	r0, 137c <dlms_push_listener_rx+0x280>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1358:	b2a1      	uxth	r1, r4
    135a:	aa08      	add	r2, sp, #32
    135c:	3101      	adds	r1, #1
    135e:	6a28      	ldr	r0, [r5, #32]
    1360:	f01a fe87 	bl	1c072 <va_getByIndex>
                    printk("Strom L3: %u\n",tmp->uiVal);
    1364:	9b08      	ldr	r3, [sp, #32]
    1366:	482d      	ldr	r0, [pc, #180]	; (141c <dlms_push_listener_rx+0x320>)
    1368:	8919      	ldrh	r1, [r3, #8]
    136a:	f01b f904 	bl	1c576 <printk>
                    Smart_Meter_data.Strom_L3 = tmp->uiVal;
    136e:	9b08      	ldr	r3, [sp, #32]
    1370:	891b      	ldrh	r3, [r3, #8]
    1372:	80b3      	strh	r3, [r6, #4]
                    new_data_bitmask[0] |= 1 << 2;
    1374:	783b      	ldrb	r3, [r7, #0]
    1376:	f043 0304 	orr.w	r3, r3, #4
    137a:	703b      	strb	r3, [r7, #0]
                  if (strcmp(ln,"1.0.1.7.0.255") == 0)
    137c:	4928      	ldr	r1, [pc, #160]	; (1420 <dlms_push_listener_rx+0x324>)
    137e:	a80d      	add	r0, sp, #52	; 0x34
    1380:	f7ff fd14 	bl	dac <strcmp>
    1384:	b988      	cbnz	r0, 13aa <dlms_push_listener_rx+0x2ae>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    1386:	b2a1      	uxth	r1, r4
    1388:	aa08      	add	r2, sp, #32
    138a:	3101      	adds	r1, #1
    138c:	6a28      	ldr	r0, [r5, #32]
    138e:	f01a fe70 	bl	1c072 <va_getByIndex>
                    printk("Wirkleistungsbezug: %lu\n",tmp->ulVal);
    1392:	9b08      	ldr	r3, [sp, #32]
    1394:	4823      	ldr	r0, [pc, #140]	; (1424 <dlms_push_listener_rx+0x328>)
    1396:	6899      	ldr	r1, [r3, #8]
    1398:	f01b f8ed 	bl	1c576 <printk>
                    Smart_Meter_data.Wirkleistungsbezug = tmp->ulVal;
    139c:	9b08      	ldr	r3, [sp, #32]
    139e:	689b      	ldr	r3, [r3, #8]
    13a0:	60b3      	str	r3, [r6, #8]
                    new_data_bitmask[0] |= 1 << 3;
    13a2:	783b      	ldrb	r3, [r7, #0]
    13a4:	f043 0308 	orr.w	r3, r3, #8
    13a8:	703b      	strb	r3, [r7, #0]
                  if (strcmp(ln,"1.1.1.8.1.255") == 0)
    13aa:	491f      	ldr	r1, [pc, #124]	; (1428 <dlms_push_listener_rx+0x32c>)
    13ac:	a80d      	add	r0, sp, #52	; 0x34
    13ae:	f7ff fcfd 	bl	dac <strcmp>
    13b2:	b988      	cbnz	r0, 13d8 <dlms_push_listener_rx+0x2dc>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    13b4:	b2a1      	uxth	r1, r4
    13b6:	aa08      	add	r2, sp, #32
    13b8:	3101      	adds	r1, #1
    13ba:	6a28      	ldr	r0, [r5, #32]
    13bc:	f01a fe59 	bl	1c072 <va_getByIndex>
                    printk("Wirkenergiebezug Tarif 1: %lu\n",tmp->ulVal);
    13c0:	9b08      	ldr	r3, [sp, #32]
    13c2:	481a      	ldr	r0, [pc, #104]	; (142c <dlms_push_listener_rx+0x330>)
    13c4:	6899      	ldr	r1, [r3, #8]
    13c6:	f01b f8d6 	bl	1c576 <printk>
                    Smart_Meter_data.Wirkenergiebezug_Tarif_1 = tmp->ulVal;
    13ca:	9b08      	ldr	r3, [sp, #32]
    13cc:	689b      	ldr	r3, [r3, #8]
    13ce:	60f3      	str	r3, [r6, #12]
                    new_data_bitmask[0] |= 1 << 4;
    13d0:	783b      	ldrb	r3, [r7, #0]
    13d2:	f043 0310 	orr.w	r3, r3, #16
    13d6:	703b      	strb	r3, [r7, #0]
                  if (strcmp(ln,"1.1.1.8.2.255") == 0)
    13d8:	4915      	ldr	r1, [pc, #84]	; (1430 <dlms_push_listener_rx+0x334>)
    13da:	a80d      	add	r0, sp, #52	; 0x34
    13dc:	f7ff fce6 	bl	dac <strcmp>
    13e0:	b988      	cbnz	r0, 1406 <dlms_push_listener_rx+0x30a>
                    va_getByIndex(data.dataValue.Arr,pos+1,&tmp);
    13e2:	b2a1      	uxth	r1, r4
    13e4:	aa08      	add	r2, sp, #32
    13e6:	3101      	adds	r1, #1
    13e8:	6a28      	ldr	r0, [r5, #32]
    13ea:	f01a fe42 	bl	1c072 <va_getByIndex>
                    printk("Wirkenergiebezug Tarif 2: %lu\n",tmp->ulVal);
    13ee:	9b08      	ldr	r3, [sp, #32]
    13f0:	4810      	ldr	r0, [pc, #64]	; (1434 <dlms_push_listener_rx+0x338>)
    13f2:	6899      	ldr	r1, [r3, #8]
    13f4:	f01b f8bf 	bl	1c576 <printk>
                    Smart_Meter_data.Wirkenergiebezug_Tarif_2 = tmp->ulVal;
    13f8:	9b08      	ldr	r3, [sp, #32]
    13fa:	689b      	ldr	r3, [r3, #8]
    13fc:	6133      	str	r3, [r6, #16]
                    new_data_bitmask[0] |= 1 << 5;
    13fe:	783b      	ldrb	r3, [r7, #0]
    1400:	f043 0320 	orr.w	r3, r3, #32
    1404:	703b      	strb	r3, [r7, #0]
              for (pos = 0; pos != settings.objects.size; ++pos)
    1406:	3401      	adds	r4, #1
    1408:	e70b      	b.n	1222 <dlms_push_listener_rx+0x126>
        for (size_t i = pos+frame_size; i < bytes_read; i++)
    140a:	3201      	adds	r2, #1
    140c:	e6dc      	b.n	11c8 <dlms_push_listener_rx+0xcc>
    140e:	bf00      	nop
    1410:	0001f795 	.word	0x0001f795
    1414:	0001f7a4 	.word	0x0001f7a4
    1418:	0001f7b3 	.word	0x0001f7b3
    141c:	0001f7c2 	.word	0x0001f7c2
    1420:	0001f7d0 	.word	0x0001f7d0
    1424:	0001f7de 	.word	0x0001f7de
    1428:	0001f7f7 	.word	0x0001f7f7
    142c:	0001f805 	.word	0x0001f805
    1430:	0001f824 	.word	0x0001f824
    1434:	0001f832 	.word	0x0001f832

00001438 <szl_lora_init>:
uint16_t crc, crc_calc;
int16_t rssi;
int8_t snr;

void szl_lora_init()
{
    1438:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    143a:	4810      	ldr	r0, [pc, #64]	; (147c <szl_lora_init+0x44>)
    143c:	f00a fa72 	bl	b924 <z_impl_device_get_binding>

    lora_dev = device_get_binding(DEFAULT_RADIO);
    1440:	4a0f      	ldr	r2, [pc, #60]	; (1480 <szl_lora_init+0x48>)
    1442:	6010      	str	r0, [r2, #0]
    if (!lora_dev)
    1444:	b928      	cbnz	r0, 1452 <szl_lora_init+0x1a>
    if (ret < 0)
    {
        printk("LoRa config failed\n");
        return;
    }
}
    1446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("%s Device not found\n", DEFAULT_RADIO);
    144a:	490c      	ldr	r1, [pc, #48]	; (147c <szl_lora_init+0x44>)
    144c:	480d      	ldr	r0, [pc, #52]	; (1484 <szl_lora_init+0x4c>)
    144e:	f01b b892 	b.w	1c576 <printk>
    config.frequency = 865100000;
    1452:	4b0d      	ldr	r3, [pc, #52]	; (1488 <szl_lora_init+0x50>)
    1454:	4a0d      	ldr	r2, [pc, #52]	; (148c <szl_lora_init+0x54>)
    1456:	601a      	str	r2, [r3, #0]
    config.bandwidth = BW_125_KHZ;
    1458:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    145c:	809a      	strh	r2, [r3, #4]
    config.coding_rate = CR_4_5;
    145e:	2201      	movs	r2, #1
    1460:	719a      	strb	r2, [r3, #6]
    config.preamble_len = 8;
    1462:	4a0b      	ldr	r2, [pc, #44]	; (1490 <szl_lora_init+0x58>)
    1464:	609a      	str	r2, [r3, #8]
    ret = lora_config(lora_dev, &config);
    1466:	f7ff fcb9 	bl	ddc <lora_config.constprop.0>
    if (ret < 0)
    146a:	2800      	cmp	r0, #0
    146c:	da04      	bge.n	1478 <szl_lora_init+0x40>
}
    146e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printk("LoRa config failed\n");
    1472:	4808      	ldr	r0, [pc, #32]	; (1494 <szl_lora_init+0x5c>)
    1474:	f01b b87f 	b.w	1c576 <printk>
}
    1478:	bd08      	pop	{r3, pc}
    147a:	bf00      	nop
    147c:	0001f851 	.word	0x0001f851
    1480:	200006b8 	.word	0x200006b8
    1484:	0001f858 	.word	0x0001f858
    1488:	20000648 	.word	0x20000648
    148c:	339060e0 	.word	0x339060e0
    1490:	01040008 	.word	0x01040008
    1494:	0001f86d 	.word	0x0001f86d

00001498 <szl_lora_send>:

void szl_lora_send(uint8_t *data, uint32_t data_len)
{
    1498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (lora_dev == NULL)
    149c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 151c <szl_lora_send+0x84>
{
    14a0:	4606      	mov	r6, r0
    if (lora_dev == NULL)
    14a2:	f8d8 0000 	ldr.w	r0, [r8]
{
    14a6:	460c      	mov	r4, r1
    if (lora_dev == NULL)
    14a8:	b920      	cbnz	r0, 14b4 <szl_lora_send+0x1c>
    {
        printk("Could not get LoRa device\n");
    14aa:	4815      	ldr	r0, [pc, #84]	; (1500 <szl_lora_send+0x68>)
        printk("LoRa send failed\n");
        return;
    }

    printk("Data sent!\n");
}
    14ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    printk("Data sent!\n");
    14b0:	f01b b861 	b.w	1c576 <printk>
    config.tx_power = 4;
    14b4:	4b13      	ldr	r3, [pc, #76]	; (1504 <szl_lora_send+0x6c>)
    14b6:	f44f 7282 	mov.w	r2, #260	; 0x104
    14ba:	815a      	strh	r2, [r3, #10]
    ret = lora_config(lora_dev, &config);
    14bc:	f7ff fc8e 	bl	ddc <lora_config.constprop.0>
    if (ret < 0)
    14c0:	2800      	cmp	r0, #0
    14c2:	da01      	bge.n	14c8 <szl_lora_send+0x30>
        printk("LoRa config failed\n");
    14c4:	4810      	ldr	r0, [pc, #64]	; (1508 <szl_lora_send+0x70>)
    14c6:	e7f1      	b.n	14ac <szl_lora_send+0x14>
    crc = crc16_ccitt(0, data, (size_t)data_len);
    14c8:	4622      	mov	r2, r4
    14ca:	4631      	mov	r1, r6
    14cc:	2000      	movs	r0, #0
    14ce:	f01a fffd 	bl	1c4cc <crc16_ccitt>
    memcpy(data_crc, data, (size_t)data_len);                   // copy data
    14d2:	4f0e      	ldr	r7, [pc, #56]	; (150c <szl_lora_send+0x74>)
    crc = crc16_ccitt(0, data, (size_t)data_len);
    14d4:	4b0e      	ldr	r3, [pc, #56]	; (1510 <szl_lora_send+0x78>)
    14d6:	4605      	mov	r5, r0
    14d8:	8018      	strh	r0, [r3, #0]
    memcpy(data_crc, data, (size_t)data_len);                   // copy data
    14da:	4622      	mov	r2, r4
    14dc:	23ff      	movs	r3, #255	; 0xff
    14de:	4631      	mov	r1, r6
    14e0:	4638      	mov	r0, r7
    14e2:	f01c fe9c 	bl	1e21e <__memcpy_chk>
    14e6:	533d      	strh	r5, [r7, r4]
    ret = lora_send(lora_dev, data_crc, (size_t)data_len + sizeof(crc));
    14e8:	f8d8 0000 	ldr.w	r0, [r8]
			    uint8_t *data, uint32_t data_len)
{
	const struct lora_driver_api *api =
		(const struct lora_driver_api *)dev->api;

	return api->send(dev, data, data_len);
    14ec:	6883      	ldr	r3, [r0, #8]
    14ee:	1ca2      	adds	r2, r4, #2
    14f0:	685b      	ldr	r3, [r3, #4]
    14f2:	4639      	mov	r1, r7
    14f4:	4798      	blx	r3
    if (ret < 0)
    14f6:	2800      	cmp	r0, #0
        printk("LoRa send failed\n");
    14f8:	bfb4      	ite	lt
    14fa:	4806      	ldrlt	r0, [pc, #24]	; (1514 <szl_lora_send+0x7c>)
    printk("Data sent!\n");
    14fc:	4806      	ldrge	r0, [pc, #24]	; (1518 <szl_lora_send+0x80>)
    14fe:	e7d5      	b.n	14ac <szl_lora_send+0x14>
    1500:	0001f881 	.word	0x0001f881
    1504:	20000648 	.word	0x20000648
    1508:	0001f86d 	.word	0x0001f86d
    150c:	20001c36 	.word	0x20001c36
    1510:	20001230 	.word	0x20001230
    1514:	0001f89c 	.word	0x0001f89c
    1518:	0001f8ae 	.word	0x0001f8ae
    151c:	200006b8 	.word	0x200006b8

00001520 <main>:

//Test
#include <hal/nrf_uarte.h>

void main(void)
{
    1520:	b530      	push	{r4, r5, lr}
  NRF_UARTE0->CONFIG = NRF_UARTE_PARITY_INCLUDED;
    1522:	4c13      	ldr	r4, [pc, #76]	; (1570 <main+0x50>)
  printk("Init Application\n");
    1524:	4813      	ldr	r0, [pc, #76]	; (1574 <main+0x54>)
  NRF_UARTE0->CONFIG = NRF_UARTE_PARITY_INCLUDED;
    1526:	250e      	movs	r5, #14
{
    1528:	b0c1      	sub	sp, #260	; 0x104
  NRF_UARTE0->CONFIG = NRF_UARTE_PARITY_INCLUDED;
    152a:	f8c4 556c 	str.w	r5, [r4, #1388]	; 0x56c
  printk("Init Application\n");
    152e:	f01b f822 	bl	1c576 <printk>
  printk("Config: %u\n",NRF_UARTE0->CONFIG);
    1532:	f8d4 156c 	ldr.w	r1, [r4, #1388]	; 0x56c
    1536:	4810      	ldr	r0, [pc, #64]	; (1578 <main+0x58>)
    1538:	f01b f81d 	bl	1c576 <printk>
  printk("Baud: %u\n",NRF_UARTE0->BAUDRATE);
    153c:	480f      	ldr	r0, [pc, #60]	; (157c <main+0x5c>)
    153e:	f8d4 1524 	ldr.w	r1, [r4, #1316]	; 0x524
    1542:	f01b f818 	bl	1c576 <printk>
  NRF_UARTE0->CONFIG = NRF_UARTE_PARITY_INCLUDED;
    1546:	f8c4 556c 	str.w	r5, [r4, #1388]	; 0x56c
  init_mbus_comp_gpiote();  
    154a:	f7ff fc4d 	bl	de8 <init_mbus_comp_gpiote>
  dlms_push_listener_init();
    154e:	f7ff fd97 	bl	1080 <dlms_push_listener_init>
  szl_lora_init();
    1552:	f7ff ff71 	bl	1438 <szl_lora_init>

  printk("Starting Application\n");
    1556:	480a      	ldr	r0, [pc, #40]	; (1580 <main+0x60>)
    1558:	f01b f80d 	bl	1c576 <printk>
  char buffer[255];
  int sz;
  while (1)
  {
    dlms_push_listener_rx(); //Wait for a DLMS Package Received
    155c:	f7ff fdce 	bl	10fc <dlms_push_listener_rx>
    sz = sponge_encode(buffer); //Encode the Received Data into Sponge structure
    1560:	4668      	mov	r0, sp
    1562:	f7ff fd0d 	bl	f80 <sponge_encode>
    1566:	4601      	mov	r1, r0
    szl_lora_send(buffer,sz); //Send the Encoded Buffer over LoRa
    1568:	4668      	mov	r0, sp
    156a:	f7ff ff95 	bl	1498 <szl_lora_send>
  while (1)
    156e:	e7f5      	b.n	155c <main+0x3c>
    1570:	40002000 	.word	0x40002000
    1574:	0001f8ba 	.word	0x0001f8ba
    1578:	0001f8cc 	.word	0x0001f8cc
    157c:	0001f8d8 	.word	0x0001f8d8
    1580:	0001f8e2 	.word	0x0001f8e2

00001584 <ba_getByteCount>:
#include "../include/bitarray.h"
#include "../include/helpers.h"

//Returs needed amount of bytes to store bits.
uint16_t ba_getByteCount(uint16_t bitCount)
{
    1584:	b510      	push	{r4, lr}
    1586:	4604      	mov	r4, r0
    double d = bitCount;
    1588:	f7fe ff4c 	bl	424 <__aeabi_ui2d>
    158c:	4602      	mov	r2, r0
    158e:	460b      	mov	r3, r1
    if (bitCount != 0)
    1590:	b174      	cbz	r4, 15b0 <ba_getByteCount+0x2c>
    {
        d /= 8;
    1592:	2200      	movs	r2, #0
    1594:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    1598:	f7fe ffbe 	bl	518 <__aeabi_dmul>
        if (bitCount == 0 || (bitCount % 8) != 0)
    159c:	0764      	lsls	r4, r4, #29
        d /= 8;
    159e:	4602      	mov	r2, r0
    15a0:	460b      	mov	r3, r1
        if (bitCount == 0 || (bitCount % 8) != 0)
    15a2:	d005      	beq.n	15b0 <ba_getByteCount+0x2c>
        {
            ++d;
    15a4:	4b05      	ldr	r3, [pc, #20]	; (15bc <ba_getByteCount+0x38>)
    15a6:	2200      	movs	r2, #0
    15a8:	f7fe fe00 	bl	1ac <__adddf3>
    15ac:	4602      	mov	r2, r0
    15ae:	460b      	mov	r3, r1
        }
    }
    return (uint16_t)d;
    15b0:	4610      	mov	r0, r2
    15b2:	4619      	mov	r1, r3
    15b4:	f7ff f9ea 	bl	98c <__aeabi_d2uiz>
}
    15b8:	b280      	uxth	r0, r0
    15ba:	bd10      	pop	{r4, pc}
    15bc:	3ff00000 	.word	0x3ff00000

000015c0 <cip_init>:
#include "../include/ciphering.h"
#include "../include/helpers.h"
#include "../include/gxaes.h"

void cip_init(ciphering* target)
{
    15c0:	b570      	push	{r4, r5, r6, lr}
    static const unsigned char DEFAUlT_BLOCK_CIPHER_KEY[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
    static const unsigned char DEFAULT_SYSTEM_TITLE[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48 };
    static const unsigned char DEFAUlT_AUTHENTICATION_KEY[] = { 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
                                                                0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
    };
    target->invocationCounter = 0;
    15c2:	2500      	movs	r5, #0
    target->suite = DLMS_SECURITY_SUITE_V0;
    target->security = DLMS_SECURITY_NONE;
    target->encrypt = 0;
#ifndef DLMS_IGNORE_MALLOC
    BYTE_BUFFER_INIT(&target->blockCipherKey);
    15c4:	1d06      	adds	r6, r0, #4
{
    15c6:	4604      	mov	r4, r0
    target->invocationCounter = 0;
    15c8:	61c5      	str	r5, [r0, #28]
    target->security = DLMS_SECURITY_NONE;
    15ca:	8005      	strh	r5, [r0, #0]
    target->encrypt = 0;
    15cc:	7085      	strb	r5, [r0, #2]
    BYTE_BUFFER_INIT(&target->blockCipherKey);
    15ce:	4630      	mov	r0, r6
    15d0:	f00c feb4 	bl	e33c <bb_init>
    bb_set(&target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    15d4:	490d      	ldr	r1, [pc, #52]	; (160c <cip_init+0x4c>)
    15d6:	2210      	movs	r2, #16
    15d8:	4630      	mov	r0, r6
    BYTE_BUFFER_INIT(&target->systemTitle);
    15da:	f104 0610 	add.w	r6, r4, #16
    bb_set(&target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    15de:	f00c fffc 	bl	e5da <bb_set>
    BYTE_BUFFER_INIT(&target->systemTitle);
    15e2:	4630      	mov	r0, r6
    15e4:	f00c feaa 	bl	e33c <bb_init>
    bb_set(&target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    15e8:	4909      	ldr	r1, [pc, #36]	; (1610 <cip_init+0x50>)
    15ea:	2208      	movs	r2, #8
    15ec:	4630      	mov	r0, r6
    BYTE_BUFFER_INIT(&target->authenticationKey);
    15ee:	f104 0620 	add.w	r6, r4, #32
    bb_set(&target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    15f2:	f00c fff2 	bl	e5da <bb_set>
    BYTE_BUFFER_INIT(&target->authenticationKey);
    15f6:	4630      	mov	r0, r6
    15f8:	f00c fea0 	bl	e33c <bb_init>
    bb_set(&target->authenticationKey, DEFAUlT_AUTHENTICATION_KEY, sizeof(DEFAUlT_AUTHENTICATION_KEY));
    15fc:	4905      	ldr	r1, [pc, #20]	; (1614 <cip_init+0x54>)
    15fe:	2210      	movs	r2, #16
    1600:	4630      	mov	r0, r6
    1602:	f00c ffea 	bl	e5da <bb_set>
    target->dedicatedKey = NULL;
    1606:	62e5      	str	r5, [r4, #44]	; 0x2c
    memcpy(target->blockCipherKey, DEFAUlT_BLOCK_CIPHER_KEY, sizeof(DEFAUlT_BLOCK_CIPHER_KEY));
    memcpy(target->systemTitle, DEFAULT_SYSTEM_TITLE, sizeof(DEFAULT_SYSTEM_TITLE));
    memcpy(target->authenticationKey, DEFAUlT_AUTHENTICATION_KEY, sizeof(DEFAUlT_AUTHENTICATION_KEY));
    memset(target->dedicatedKey, 0, 16);
#endif //DLMS_IGNORE_MALLOC
}
    1608:	bd70      	pop	{r4, r5, r6, pc}
    160a:	bf00      	nop
    160c:	0001f912 	.word	0x0001f912
    1610:	0001f8fa 	.word	0x0001f8fa
    1614:	0001f902 	.word	0x0001f902

00001618 <cip_int>:
#define TE444(i) ((GetTe((i) & 0xff) >> 8) & 0x000000ff)

int cip_int(uint32_t* rk,
    const unsigned char* cipherKey,
    uint16_t keyBits)
{
    1618:	b5f0      	push	{r4, r5, r6, r7, lr}
    161a:	680b      	ldr	r3, [r1, #0]
    161c:	ba1b      	rev	r3, r3
    uint8_t i;
    uint32_t temp;

    rk[0] = GETU32(cipherKey);
    161e:	6003      	str	r3, [r0, #0]
    rk[1] = GETU32(cipherKey + 4);
    1620:	684b      	ldr	r3, [r1, #4]
    1622:	ba1b      	rev	r3, r3
    1624:	6043      	str	r3, [r0, #4]
    rk[2] = GETU32(cipherKey + 8);
    1626:	688b      	ldr	r3, [r1, #8]
    1628:	ba1b      	rev	r3, r3
    162a:	6083      	str	r3, [r0, #8]
    rk[3] = GETU32(cipherKey + 12);
    162c:	68cb      	ldr	r3, [r1, #12]

    if (keyBits == 128)
    162e:	2a80      	cmp	r2, #128	; 0x80
    1630:	ba1b      	rev	r3, r3
    rk[3] = GETU32(cipherKey + 12);
    1632:	60c3      	str	r3, [r0, #12]
    if (keyBits == 128)
    1634:	d134      	bne.n	16a0 <cip_int+0x88>
    1636:	4c76      	ldr	r4, [pc, #472]	; (1810 <cip_int+0x1f8>)
    return __TE[offset];
    1638:	4976      	ldr	r1, [pc, #472]	; (1814 <cip_int+0x1fc>)
    163a:	f100 05a0 	add.w	r5, r0, #160	; 0xa0
    {
        for (i = 0; i < 10; i++)
        {
            temp = rk[3];
    163e:	68c2      	ldr	r2, [r0, #12]
    return __R_CON[offset];
    1640:	f814 7b01 	ldrb.w	r7, [r4], #1
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
                TE443(temp) ^ TE414(temp);
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1644:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    1646:	b2d3      	uxtb	r3, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1648:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
                TE443(temp) ^ TE414(temp);
    164c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1654:	4073      	eors	r3, r6
    return __TE[offset];
    1656:	f3c2 2607 	ubfx	r6, r2, #8, #8
            rk[5] = rk[1] ^ rk[4];
            rk[6] = rk[2] ^ rk[5];
            rk[7] = rk[3] ^ rk[6];
            rk += 4;
    165a:	3010      	adds	r0, #16
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    165c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    1660:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1664:	4073      	eors	r3, r6
                TE443(temp) ^ TE414(temp);
    1666:	0e16      	lsrs	r6, r2, #24
    1668:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    166c:	f3c6 2607 	ubfx	r6, r6, #8, #8
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1670:	4073      	eors	r3, r6
    return __TE[offset];
    1672:	f3c2 4607 	ubfx	r6, r2, #16, #8
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1676:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    167a:	0236      	lsls	r6, r6, #8
    167c:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1680:	4073      	eors	r3, r6
            rk[5] = rk[1] ^ rk[4];
    1682:	f850 6c0c 	ldr.w	r6, [r0, #-12]
            rk[4] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1686:	6003      	str	r3, [r0, #0]
            rk[5] = rk[1] ^ rk[4];
    1688:	4073      	eors	r3, r6
            rk[6] = rk[2] ^ rk[5];
    168a:	f850 6c08 	ldr.w	r6, [r0, #-8]
            rk[5] = rk[1] ^ rk[4];
    168e:	6043      	str	r3, [r0, #4]
            rk[6] = rk[2] ^ rk[5];
    1690:	4073      	eors	r3, r6
    1692:	6083      	str	r3, [r0, #8]
            rk[7] = rk[3] ^ rk[6];
    1694:	4053      	eors	r3, r2
    1696:	60c3      	str	r3, [r0, #12]
        for (i = 0; i < 10; i++)
    1698:	4285      	cmp	r5, r0
    169a:	d1d0      	bne.n	163e <cip_int+0x26>
        }
        return 0;
    169c:	2000      	movs	r0, #0
            rk[15] = rk[7] ^ rk[14];
            rk += 8;
        }
    }
    return DLMS_ERROR_CODE_INVALID_PARAMETER;
}
    169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rk[4] = GETU32(cipherKey + 16);
    16a0:	690b      	ldr	r3, [r1, #16]
    16a2:	ba1b      	rev	r3, r3
    16a4:	6103      	str	r3, [r0, #16]
    rk[5] = GETU32(cipherKey + 20);
    16a6:	694b      	ldr	r3, [r1, #20]
    if (keyBits == 192)
    16a8:	2ac0      	cmp	r2, #192	; 0xc0
    16aa:	ba1b      	rev	r3, r3
    rk[5] = GETU32(cipherKey + 20);
    16ac:	6143      	str	r3, [r0, #20]
    if (keyBits == 192)
    16ae:	d141      	bne.n	1734 <cip_int+0x11c>
    16b0:	4c57      	ldr	r4, [pc, #348]	; (1810 <cip_int+0x1f8>)
    return __TE[offset];
    16b2:	4958      	ldr	r1, [pc, #352]	; (1814 <cip_int+0x1fc>)
    16b4:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
            temp = rk[5];
    16b8:	6942      	ldr	r2, [r0, #20]
    return __R_CON[offset];
    16ba:	f814 7b01 	ldrb.w	r7, [r4], #1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    16be:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    16c0:	b2d3      	uxtb	r3, r2
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    16c2:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
    16c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    16ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    16ce:	4073      	eors	r3, r6
    return __TE[offset];
    16d0:	f3c2 2607 	ubfx	r6, r2, #8, #8
            if (i == 7)
    16d4:	4285      	cmp	r5, r0
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    16d6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    16da:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    16de:	ea83 0306 	eor.w	r3, r3, r6
    16e2:	ea4f 6612 	mov.w	r6, r2, lsr #24
    16e6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    16ea:	f3c6 2607 	ubfx	r6, r6, #8, #8
    16ee:	ea83 0306 	eor.w	r3, r3, r6
    return __TE[offset];
    16f2:	f3c2 4607 	ubfx	r6, r2, #16, #8
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    16f6:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    16fa:	ea4f 2606 	mov.w	r6, r6, lsl #8
    16fe:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1702:	ea83 0306 	eor.w	r3, r3, r6
            rk[7] = rk[1] ^ rk[6];
    1706:	6846      	ldr	r6, [r0, #4]
            rk[6] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    1708:	6183      	str	r3, [r0, #24]
            rk[7] = rk[1] ^ rk[6];
    170a:	ea83 0306 	eor.w	r3, r3, r6
            rk[8] = rk[2] ^ rk[7];
    170e:	6886      	ldr	r6, [r0, #8]
            rk[7] = rk[1] ^ rk[6];
    1710:	61c3      	str	r3, [r0, #28]
            rk[8] = rk[2] ^ rk[7];
    1712:	ea83 0306 	eor.w	r3, r3, r6
            rk[9] = rk[3] ^ rk[8];
    1716:	68c6      	ldr	r6, [r0, #12]
            rk[8] = rk[2] ^ rk[7];
    1718:	6203      	str	r3, [r0, #32]
            rk[9] = rk[3] ^ rk[8];
    171a:	ea83 0306 	eor.w	r3, r3, r6
    171e:	6243      	str	r3, [r0, #36]	; 0x24
            if (i == 7)
    1720:	d101      	bne.n	1726 <cip_int+0x10e>
                return 12;
    1722:	200c      	movs	r0, #12
    1724:	e7bb      	b.n	169e <cip_int+0x86>
            rk[10] = rk[4] ^ rk[9];
    1726:	6906      	ldr	r6, [r0, #16]
    1728:	4073      	eors	r3, r6
    172a:	6283      	str	r3, [r0, #40]	; 0x28
            rk[11] = rk[5] ^ rk[10];
    172c:	4053      	eors	r3, r2
    172e:	62c3      	str	r3, [r0, #44]	; 0x2c
            rk += 6;
    1730:	3018      	adds	r0, #24
        for (i = 0; i < 8; i++)
    1732:	e7c1      	b.n	16b8 <cip_int+0xa0>
    rk[6] = GETU32(cipherKey + 24);
    1734:	698b      	ldr	r3, [r1, #24]
    1736:	ba1b      	rev	r3, r3
    1738:	6183      	str	r3, [r0, #24]
    rk[7] = GETU32(cipherKey + 28);
    173a:	69cb      	ldr	r3, [r1, #28]
    if (keyBits == 256)
    173c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    1740:	ba1b      	rev	r3, r3
    rk[7] = GETU32(cipherKey + 28);
    1742:	61c3      	str	r3, [r0, #28]
    if (keyBits == 256)
    1744:	d161      	bne.n	180a <cip_int+0x1f2>
    1746:	4c32      	ldr	r4, [pc, #200]	; (1810 <cip_int+0x1f8>)
    return __TE[offset];
    1748:	4a32      	ldr	r2, [pc, #200]	; (1814 <cip_int+0x1fc>)
    174a:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
            temp = rk[7];
    174e:	69c1      	ldr	r1, [r0, #28]
    return __R_CON[offset];
    1750:	f814 7b01 	ldrb.w	r7, [r4], #1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1754:	6806      	ldr	r6, [r0, #0]
    return __TE[offset];
    1756:	b2cb      	uxtb	r3, r1
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1758:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
    175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    1764:	4073      	eors	r3, r6
    return __TE[offset];
    1766:	f3c1 2607 	ubfx	r6, r1, #8, #8
            if (i == 6)
    176a:	4285      	cmp	r5, r0
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    176c:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    1770:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1774:	ea83 0306 	eor.w	r3, r3, r6
    1778:	ea4f 6611 	mov.w	r6, r1, lsr #24
    177c:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    1780:	f3c6 2607 	ubfx	r6, r6, #8, #8
    1784:	ea83 0306 	eor.w	r3, r3, r6
    return __TE[offset];
    1788:	f3c1 4607 	ubfx	r6, r1, #16, #8
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    178c:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    1790:	ea4f 2606 	mov.w	r6, r6, lsl #8
    1794:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
                TE443(temp) ^ TE414(temp) ^ RCON(i);
    1798:	ea83 0306 	eor.w	r3, r3, r6
            rk[9] = rk[1] ^ rk[8];
    179c:	6846      	ldr	r6, [r0, #4]
            rk[8] = rk[0] ^ TE421(temp) ^ TE432(temp) ^
    179e:	6203      	str	r3, [r0, #32]
            rk[9] = rk[1] ^ rk[8];
    17a0:	ea83 0306 	eor.w	r3, r3, r6
            rk[10] = rk[2] ^ rk[9];
    17a4:	6886      	ldr	r6, [r0, #8]
            rk[9] = rk[1] ^ rk[8];
    17a6:	6243      	str	r3, [r0, #36]	; 0x24
            rk[10] = rk[2] ^ rk[9];
    17a8:	ea83 0306 	eor.w	r3, r3, r6
            rk[11] = rk[3] ^ rk[10];
    17ac:	68c6      	ldr	r6, [r0, #12]
            rk[10] = rk[2] ^ rk[9];
    17ae:	6283      	str	r3, [r0, #40]	; 0x28
            rk[11] = rk[3] ^ rk[10];
    17b0:	ea83 0306 	eor.w	r3, r3, r6
    17b4:	62c3      	str	r3, [r0, #44]	; 0x2c
            if (i == 6)
    17b6:	d101      	bne.n	17bc <cip_int+0x1a4>
                return 14;
    17b8:	200e      	movs	r0, #14
    17ba:	e770      	b.n	169e <cip_int+0x86>
    return __TE[offset];
    17bc:	f3c3 2607 	ubfx	r6, r3, #8, #8
    17c0:	b2df      	uxtb	r7, r3
                TE433(temp) ^ TE444(temp);
    17c2:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    17c6:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    17ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    17ce:	f3c7 2707 	ubfx	r7, r7, #8, #8
    17d2:	433e      	orrs	r6, r7
    17d4:	6907      	ldr	r7, [r0, #16]
    17d6:	407e      	eors	r6, r7
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    17d8:	0e1f      	lsrs	r7, r3, #24
    return __TE[offset];
    17da:	f3c3 4307 	ubfx	r3, r3, #16, #8
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    17de:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    17e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    17e6:	023f      	lsls	r7, r7, #8
    17e8:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
    17ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                TE433(temp) ^ TE444(temp);
    17f0:	433b      	orrs	r3, r7
    17f2:	4073      	eors	r3, r6
            rk[13] = rk[5] ^ rk[12];
    17f4:	6946      	ldr	r6, [r0, #20]
            rk[12] = rk[4] ^ TE411(temp) ^ TE422(temp) ^
    17f6:	6303      	str	r3, [r0, #48]	; 0x30
            rk[13] = rk[5] ^ rk[12];
    17f8:	4073      	eors	r3, r6
            rk[14] = rk[6] ^ rk[13];
    17fa:	6986      	ldr	r6, [r0, #24]
            rk[13] = rk[5] ^ rk[12];
    17fc:	6343      	str	r3, [r0, #52]	; 0x34
            rk[14] = rk[6] ^ rk[13];
    17fe:	4073      	eors	r3, r6
            rk[15] = rk[7] ^ rk[14];
    1800:	4059      	eors	r1, r3
            rk[14] = rk[6] ^ rk[13];
    1802:	6383      	str	r3, [r0, #56]	; 0x38
            rk[15] = rk[7] ^ rk[14];
    1804:	63c1      	str	r1, [r0, #60]	; 0x3c
            rk += 8;
    1806:	3020      	adds	r0, #32
        for (i = 0; i < 7; i++)
    1808:	e7a1      	b.n	174e <cip_int+0x136>
    return DLMS_ERROR_CODE_INVALID_PARAMETER;
    180a:	f44f 7081 	mov.w	r0, #258	; 0x102
    180e:	e746      	b.n	169e <cip_int+0x86>
    1810:	0001f92a 	.word	0x0001f92a
    1814:	0001ecac 	.word	0x0001ecac

00001818 <aes_Encrypt>:

//Arduino DOIT ESP32 uses aes_encrypt. For that reason aes_Encrypt is used.
void aes_Encrypt(const uint32_t* rk, int Nr, const unsigned char* pt, unsigned char* ct)
{
    1818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    181c:	6814      	ldr	r4, [r2, #0]
    uint32_t s0, s1, s2, s3, t0, t1, t2, t3;
    int r;
    s0 = GETU32(pt) ^ rk[0];
    181e:	6805      	ldr	r5, [r0, #0]
    1820:	6857      	ldr	r7, [r2, #4]
    1822:	6896      	ldr	r6, [r2, #8]
    1824:	ba24      	rev	r4, r4
    1826:	406c      	eors	r4, r5
    s1 = GETU32(pt + 4) ^ rk[1];
    1828:	6845      	ldr	r5, [r0, #4]
    182a:	ba3f      	rev	r7, r7
    182c:	406f      	eors	r7, r5
    s2 = GETU32(pt + 8) ^ rk[2];
    182e:	6885      	ldr	r5, [r0, #8]
    1830:	ba36      	rev	r6, r6
    1832:	406e      	eors	r6, r5
    s3 = GETU32(pt + 12) ^ rk[3];
    1834:	68d5      	ldr	r5, [r2, #12]
    1836:	68c2      	ldr	r2, [r0, #12]
{
    1838:	b08b      	sub	sp, #44	; 0x2c
    183a:	ba2d      	rev	r5, r5
    s3 = GETU32(pt + 12) ^ rk[3];
    183c:	4055      	eors	r5, r2
d##1 = TE0(s##1) ^ TE1(s##2) ^ TE2(s##3) ^ TE3(s##0) ^ rk[4 * i + 1]; \
d##2 = TE0(s##2) ^ TE1(s##3) ^ TE2(s##0) ^ TE3(s##1) ^ rk[4 * i + 2]; \
d##3 = TE0(s##3) ^ TE1(s##0) ^ TE2(s##1) ^ TE3(s##2) ^ rk[4 * i + 3]

    /* Nr - 1 full rounds: */
    r = Nr >> 1;
    183e:	104a      	asrs	r2, r1, #1
    1840:	9201      	str	r2, [sp, #4]
    1842:	4693      	mov	fp, r2
    return __TE[offset];
    1844:	4aa4      	ldr	r2, [pc, #656]	; (1ad8 <aes_Encrypt+0x2c0>)
    1846:	4684      	mov	ip, r0
    for (;;)
    {
        ROUND(1, t, s);
    1848:	ea4f 6e14 	mov.w	lr, r4, lsr #24
    return __TE[offset];
    184c:	fa5f f885 	uxtb.w	r8, r5
        ROUND(1, t, s);
    1850:	f8dc 1010 	ldr.w	r1, [ip, #16]
    1854:	f852 e02e 	ldr.w	lr, [r2, lr, lsl #2]
    1858:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    185c:	ea8e 0e01 	eor.w	lr, lr, r1
    1860:	ea8e 6e38 	eor.w	lr, lr, r8, ror #24
    return __TE[offset];
    1864:	f3c7 4807 	ubfx	r8, r7, #16, #8
    1868:	fa5f f984 	uxtb.w	r9, r4
        ROUND(1, t, s);
    186c:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    1870:	f8dc 1014 	ldr.w	r1, [ip, #20]
    1874:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    1878:	ea8e 2e38 	eor.w	lr, lr, r8, ror #8
    return __TE[offset];
    187c:	f3c6 2807 	ubfx	r8, r6, #8, #8
    1880:	fa5f fa87 	uxtb.w	sl, r7
        ROUND(1, t, s);
    1884:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    1888:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    188c:	ea8e 4e38 	eor.w	lr, lr, r8, ror #16
    1890:	ea4f 6817 	mov.w	r8, r7, lsr #24
    return __TE[offset];
    1894:	f3c7 2707 	ubfx	r7, r7, #8, #8
        ROUND(1, t, s);
    1898:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    189c:	ea88 0801 	eor.w	r8, r8, r1
    18a0:	ea88 6839 	eor.w	r8, r8, r9, ror #24
    return __TE[offset];
    18a4:	f3c6 4907 	ubfx	r9, r6, #16, #8
        ROUND(1, t, s);
    18a8:	f8dc 1018 	ldr.w	r1, [ip, #24]
    18ac:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    18b0:	ea88 2839 	eor.w	r8, r8, r9, ror #8
    return __TE[offset];
    18b4:	f3c5 2907 	ubfx	r9, r5, #8, #8
        rk += 8;
        if (--r == 0)
    18b8:	f1bb 0b01 	subs.w	fp, fp, #1
        ROUND(1, t, s);
    18bc:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    18c0:	ea88 4839 	eor.w	r8, r8, r9, ror #16
    18c4:	ea4f 6916 	mov.w	r9, r6, lsr #24
    return __TE[offset];
    18c8:	b2f6      	uxtb	r6, r6
        ROUND(1, t, s);
    18ca:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    18ce:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    18d2:	ea89 0901 	eor.w	r9, r9, r1
    18d6:	ea89 693a 	eor.w	r9, r9, sl, ror #24
    return __TE[offset];
    18da:	f3c5 4a07 	ubfx	sl, r5, #16, #8
        ROUND(1, t, s);
    18de:	ea4f 6515 	mov.w	r5, r5, lsr #24
    18e2:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    18e6:	f8dc 101c 	ldr.w	r1, [ip, #28]
    18ea:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    18ee:	ea89 293a 	eor.w	r9, r9, sl, ror #8
    return __TE[offset];
    18f2:	f3c4 2a07 	ubfx	sl, r4, #8, #8
    18f6:	f3c4 4407 	ubfx	r4, r4, #16, #8
        ROUND(1, t, s);
    18fa:	ea85 0501 	eor.w	r5, r5, r1
    18fe:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
    1902:	f852 a02a 	ldr.w	sl, [r2, sl, lsl #2]
    1906:	ea85 6536 	eor.w	r5, r5, r6, ror #24
    190a:	ea85 2534 	eor.w	r5, r5, r4, ror #8
    190e:	f852 4027 	ldr.w	r4, [r2, r7, lsl #2]
    1912:	ea85 4534 	eor.w	r5, r5, r4, ror #16
    1916:	ea4f 6615 	mov.w	r6, r5, lsr #24
    191a:	ea89 493a 	eor.w	r9, r9, sl, ror #16
        if (--r == 0)
    191e:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1922:	9102      	str	r1, [sp, #8]
    1924:	f3ce 4607 	ubfx	r6, lr, #16, #8
    1928:	f85c 4f20 	ldr.w	r4, [ip, #32]!
    192c:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1930:	9103      	str	r1, [sp, #12]
    1932:	f3c8 2607 	ubfx	r6, r8, #8, #8
    1936:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    193a:	9104      	str	r1, [sp, #16]
    193c:	fa5f f689 	uxtb.w	r6, r9
    1940:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1944:	9105      	str	r1, [sp, #20]
    1946:	fa5f f688 	uxtb.w	r6, r8
    194a:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    194e:	9106      	str	r1, [sp, #24]
    1950:	f3ce 2607 	ubfx	r6, lr, #8, #8
    1954:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1958:	9107      	str	r1, [sp, #28]
    195a:	f3c5 4607 	ubfx	r6, r5, #16, #8
    195e:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1962:	9108      	str	r1, [sp, #32]
    1964:	ea4f 6619 	mov.w	r6, r9, lsr #24
    1968:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    196c:	9109      	str	r1, [sp, #36]	; 0x24
    196e:	fa5f f68e 	uxtb.w	r6, lr
    1972:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    1976:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
    197a:	f852 e02e 	ldr.w	lr, [r2, lr, lsl #2]
    197e:	f3c5 2607 	ubfx	r6, r5, #8, #8
    1982:	b2ed      	uxtb	r5, r5
    1984:	f852 a026 	ldr.w	sl, [r2, r6, lsl #2]
    1988:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    198c:	f3c9 4607 	ubfx	r6, r9, #16, #8
    1990:	f3c9 2907 	ubfx	r9, r9, #8, #8
    1994:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
    1998:	f852 9029 	ldr.w	r9, [r2, r9, lsl #2]
    199c:	ea4f 6618 	mov.w	r6, r8, lsr #24
    19a0:	f3c8 4807 	ubfx	r8, r8, #16, #8
    19a4:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
    19a8:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
    19ac:	d02c      	beq.n	1a08 <aes_Encrypt+0x1f0>
            break;
        ROUND(0, s, t);
    19ae:	ea84 040e 	eor.w	r4, r4, lr
    19b2:	ea84 6435 	eor.w	r4, r4, r5, ror #24
    19b6:	f8dc 5004 	ldr.w	r5, [ip, #4]
    19ba:	406e      	eors	r6, r5
    19bc:	ea86 6637 	eor.w	r6, r6, r7, ror #24
    19c0:	ea86 2731 	eor.w	r7, r6, r1, ror #8
    19c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    19c6:	f8dc 6008 	ldr.w	r6, [ip, #8]
    19ca:	9906      	ldr	r1, [sp, #24]
    19cc:	4075      	eors	r5, r6
    19ce:	ea85 6631 	eor.w	r6, r5, r1, ror #24
    19d2:	9908      	ldr	r1, [sp, #32]
    19d4:	f8dc 500c 	ldr.w	r5, [ip, #12]
    19d8:	ea86 2631 	eor.w	r6, r6, r1, ror #8
    19dc:	9907      	ldr	r1, [sp, #28]
    19de:	ea86 4631 	eor.w	r6, r6, r1, ror #16
    19e2:	9902      	ldr	r1, [sp, #8]
    19e4:	4069      	eors	r1, r5
    19e6:	460d      	mov	r5, r1
    19e8:	9905      	ldr	r1, [sp, #20]
    19ea:	ea85 6531 	eor.w	r5, r5, r1, ror #24
    19ee:	9903      	ldr	r1, [sp, #12]
    19f0:	ea85 2531 	eor.w	r5, r5, r1, ror #8
    19f4:	9904      	ldr	r1, [sp, #16]
    19f6:	ea84 2438 	eor.w	r4, r4, r8, ror #8
    19fa:	ea84 4439 	eor.w	r4, r4, r9, ror #16
    19fe:	ea87 473a 	eor.w	r7, r7, sl, ror #16
    1a02:	ea85 4531 	eor.w	r5, r5, r1, ror #16
        ROUND(1, t, s);
    1a06:	e71f      	b.n	1848 <aes_Encrypt+0x30>
    }

#undef ROUND

    s0 = TE41(t0) ^ TE42(t1) ^ TE43(t2) ^ TE44(t3) ^ rk[0];
    1a08:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
    1a0c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
    1a10:	f00e 4e7f 	and.w	lr, lr, #4278190080	; 0xff000000
    1a14:	f3c5 2507 	ubfx	r5, r5, #8, #8
    1a18:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
    1a1c:	ea45 0509 	orr.w	r5, r5, r9
    1a20:	ea4e 0808 	orr.w	r8, lr, r8
    1a24:	9a01      	ldr	r2, [sp, #4]
    1a26:	ea85 0508 	eor.w	r5, r5, r8
    1a2a:	406c      	eors	r4, r5
    1a2c:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    PUT32(ct, s0);
    1a30:	0e22      	lsrs	r2, r4, #24
    1a32:	701a      	strb	r2, [r3, #0]
    1a34:	0c22      	lsrs	r2, r4, #16
    1a36:	705a      	strb	r2, [r3, #1]
    1a38:	0a22      	lsrs	r2, r4, #8
    1a3a:	709a      	strb	r2, [r3, #2]
    s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
    1a3c:	0232      	lsls	r2, r6, #8
    1a3e:	f401 0b7f 	and.w	fp, r1, #16711680	; 0xff0000
    1a42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
    1a46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    1a4a:	f3c7 2707 	ubfx	r7, r7, #8, #8
    PUT32(ct, s0);
    1a4e:	70dc      	strb	r4, [r3, #3]
    s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
    1a50:	ea42 020b 	orr.w	r2, r2, fp
    1a54:	ea47 070a 	orr.w	r7, r7, sl
    1a58:	4057      	eors	r7, r2
    1a5a:	6842      	ldr	r2, [r0, #4]
    1a5c:	407a      	eors	r2, r7
    PUT32(ct + 4, s1);
    1a5e:	0e11      	lsrs	r1, r2, #24
    1a60:	7119      	strb	r1, [r3, #4]
    1a62:	0c11      	lsrs	r1, r2, #16
    1a64:	7159      	strb	r1, [r3, #5]
    1a66:	71da      	strb	r2, [r3, #7]
    1a68:	0a11      	lsrs	r1, r2, #8
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    1a6a:	9a06      	ldr	r2, [sp, #24]
    PUT32(ct + 4, s1);
    1a6c:	7199      	strb	r1, [r3, #6]
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    1a6e:	f3c2 2607 	ubfx	r6, r2, #8, #8
    1a72:	9a07      	ldr	r2, [sp, #28]
    1a74:	9908      	ldr	r1, [sp, #32]
    1a76:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    1a7a:	4316      	orrs	r6, r2
    1a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1a7e:	0212      	lsls	r2, r2, #8
    1a80:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    1a84:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
    1a88:	430a      	orrs	r2, r1
    1a8a:	4056      	eors	r6, r2
    1a8c:	6882      	ldr	r2, [r0, #8]
    PUT32(ct + 8, s2);
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    1a8e:	9905      	ldr	r1, [sp, #20]
    s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
    1a90:	4056      	eors	r6, r2
    PUT32(ct + 8, s2);
    1a92:	0e32      	lsrs	r2, r6, #24
    1a94:	721a      	strb	r2, [r3, #8]
    1a96:	0c32      	lsrs	r2, r6, #16
    1a98:	725a      	strb	r2, [r3, #9]
    1a9a:	0a32      	lsrs	r2, r6, #8
    1a9c:	729a      	strb	r2, [r3, #10]
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    1a9e:	9a02      	ldr	r2, [sp, #8]
    PUT32(ct + 8, s2);
    1aa0:	72de      	strb	r6, [r3, #11]
    s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
    1aa2:	0215      	lsls	r5, r2, #8
    1aa4:	9a03      	ldr	r2, [sp, #12]
    1aa6:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
    1aaa:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    1aae:	432a      	orrs	r2, r5
    1ab0:	f3c1 2507 	ubfx	r5, r1, #8, #8
    1ab4:	9904      	ldr	r1, [sp, #16]
    1ab6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    1aba:	430d      	orrs	r5, r1
    1abc:	4055      	eors	r5, r2
    1abe:	68c2      	ldr	r2, [r0, #12]
    1ac0:	4055      	eors	r5, r2
    PUT32(ct + 12, s3);
    1ac2:	0e2a      	lsrs	r2, r5, #24
    1ac4:	731a      	strb	r2, [r3, #12]
    1ac6:	0c2a      	lsrs	r2, r5, #16
    1ac8:	735a      	strb	r2, [r3, #13]
    1aca:	0a2a      	lsrs	r2, r5, #8
    1acc:	739a      	strb	r2, [r3, #14]
    1ace:	73dd      	strb	r5, [r3, #15]
}
    1ad0:	b00b      	add	sp, #44	; 0x2c
    1ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ad6:	bf00      	nop
    1ad8:	0001ecac 	.word	0x0001ecac

00001adc <cip_crypt>:
    unsigned char* systemTitle,
    unsigned char* key,
    gxByteBuffer* input,
    unsigned char encrypt)
#endif //DLMS_IGNORE_MALLOC
{
    1adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ae0:	b0db      	sub	sp, #364	; 0x16c
    int ret;
    uint32_t aes[61] = { 0 };
    unsigned char H[16] = { 0 };
    1ae2:	2400      	movs	r4, #0
{
    1ae4:	9002      	str	r0, [sp, #8]
    1ae6:	9203      	str	r2, [sp, #12]
    1ae8:	460e      	mov	r6, r1
    uint32_t aes[61] = { 0 };
    1aea:	22f4      	movs	r2, #244	; 0xf4
    1aec:	2100      	movs	r1, #0
    1aee:	a81d      	add	r0, sp, #116	; 0x74
{
    1af0:	4699      	mov	r9, r3
    1af2:	f89d b190 	ldrb.w	fp, [sp, #400]	; 0x190
    1af6:	9d67      	ldr	r5, [sp, #412]	; 0x19c
    1af8:	f89d 71a0 	ldrb.w	r7, [sp, #416]	; 0x1a0
    uint32_t aes[61] = { 0 };
    1afc:	f01c fbbc 	bl	1e278 <memset>
    unsigned char J0[16] = { 0 };
    unsigned char S[16] = { 0 };
    unsigned char NONSE[18] = { 0 };
    1b00:	220e      	movs	r2, #14
    1b02:	4621      	mov	r1, r4
    1b04:	a819      	add	r0, sp, #100	; 0x64
    unsigned char H[16] = { 0 };
    1b06:	e9cd 4408 	strd	r4, r4, [sp, #32]
    1b0a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    unsigned char J0[16] = { 0 };
    1b0e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    1b12:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    unsigned char S[16] = { 0 };
    1b16:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    1b1a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
    unsigned char NONSE[18] = { 0 };
    1b1e:	9418      	str	r4, [sp, #96]	; 0x60
    1b20:	f01c fbaa 	bl	1e278 <memset>
    gxByteBuffer nonse;
    if (memcmp(systemTitle, EMPTY_SYSTEM_TITLE, 8) == 0)
    1b24:	497a      	ldr	r1, [pc, #488]	; (1d10 <cip_crypt+0x234>)
    1b26:	9865      	ldr	r0, [sp, #404]	; 0x194
    1b28:	2208      	movs	r2, #8
    1b2a:	f01c fb5c 	bl	1e1e6 <memcmp>
    1b2e:	2800      	cmp	r0, #0
    1b30:	f000 81a8 	beq.w	1e84 <cip_crypt+0x3a8>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    bb_attach(&nonse, NONSE, 0, sizeof(NONSE));
    1b34:	4622      	mov	r2, r4
    1b36:	2312      	movs	r3, #18
    1b38:	a918      	add	r1, sp, #96	; 0x60
    1b3a:	a805      	add	r0, sp, #20
    1b3c:	f00c fd9d 	bl	e67a <bb_attach>
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    1b40:	210c      	movs	r1, #12
    1b42:	a805      	add	r0, sp, #20
    nonce->size = 0;
    1b44:	f8ad 401a 	strh.w	r4, [sp, #26]
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    1b48:	f00c fbfe 	bl	e348 <bb_capacity>
    1b4c:	4604      	mov	r4, r0
    1b4e:	2800      	cmp	r0, #0
    1b50:	f040 8190 	bne.w	1e74 <cip_crypt+0x398>
        (ret = bb_set(nonce, systemTitle, 8)) != 0 ||
    1b54:	9965      	ldr	r1, [sp, #404]	; 0x194
    1b56:	2208      	movs	r2, #8
    1b58:	a805      	add	r0, sp, #20
    1b5a:	f00c fd3e 	bl	e5da <bb_set>
    if ((ret = bb_capacity(nonce, 12)) != 0 ||
    1b5e:	4604      	mov	r4, r0
    1b60:	2800      	cmp	r0, #0
    1b62:	f040 8187 	bne.w	1e74 <cip_crypt+0x398>
        (ret = bb_setUInt32(nonce, frameCounter)) != 0)
    1b66:	4649      	mov	r1, r9
    1b68:	a805      	add	r0, sp, #20
    1b6a:	f00c fc94 	bl	e496 <bb_setUInt32>
        (ret = bb_set(nonce, systemTitle, 8)) != 0 ||
    1b6e:	4604      	mov	r4, r0
    1b70:	2800      	cmp	r0, #0
    1b72:	f040 817f 	bne.w	1e74 <cip_crypt+0x398>
    if ((ret = cip_getNonse(frameCounter, systemTitle, &nonse)) != 0)
    {
        return ret;
    }
    if ((ret = cip_int(
    1b76:	9b66      	ldr	r3, [sp, #408]	; 0x198
    1b78:	2280      	movs	r2, #128	; 0x80
    1b7a:	6819      	ldr	r1, [r3, #0]
    1b7c:	a81d      	add	r0, sp, #116	; 0x74
    1b7e:	f7ff fd4b 	bl	1618 <cip_int>
    1b82:	4604      	mov	r4, r0
    1b84:	2800      	cmp	r0, #0
    1b86:	f040 8175 	bne.w	1e74 <cip_crypt+0x398>
        return ret;
    }
    aes[60] = 10;

    //Hash subkey.
    aes_Encrypt(aes, aes[60], H, H);
    1b8a:	ab08      	add	r3, sp, #32
    aes[60] = 10;
    1b8c:	210a      	movs	r1, #10
    aes_Encrypt(aes, aes[60], H, H);
    1b8e:	461a      	mov	r2, r3
    1b90:	a81d      	add	r0, sp, #116	; 0x74
    aes[60] = 10;
    1b92:	9159      	str	r1, [sp, #356]	; 0x164
    aes_Encrypt(aes, aes[60], H, H);
    1b94:	f7ff fe40 	bl	1818 <aes_Encrypt>
    cip_init_j0(nonse.data, (unsigned char)nonse.size, H, J0);
    1b98:	f89d 801a 	ldrb.w	r8, [sp, #26]
    1b9c:	f8dd a014 	ldr.w	sl, [sp, #20]
    if (len == 12)
    1ba0:	f1b8 0f0c 	cmp.w	r8, #12
    1ba4:	d176      	bne.n	1c94 <cip_crypt+0x1b8>
        memcpy(J0, iv, len);
    1ba6:	f8da 0000 	ldr.w	r0, [sl]
    1baa:	f8da 1004 	ldr.w	r1, [sl, #4]
    1bae:	ab0c      	add	r3, sp, #48	; 0x30
    1bb0:	c303      	stmia	r3!, {r0, r1}
    1bb2:	f8da 0008 	ldr.w	r0, [sl, #8]
    1bb6:	6018      	str	r0, [r3, #0]
        J0[15] = 0x01;
    1bb8:	2301      	movs	r3, #1
        memset(J0 + len, 0, 16 - len);
    1bba:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    1bbe:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
        J0[15] = 0x01;
    1bc2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    //Allocate space for authentication tag.
    if (security != DLMS_SECURITY_ENCRYPTION && !encrypt)
    1bc6:	2e20      	cmp	r6, #32
    1bc8:	f000 8092 	beq.w	1cf0 <cip_crypt+0x214>
    1bcc:	2f00      	cmp	r7, #0
    1bce:	f040 815c 	bne.w	1e8a <cip_crypt+0x3ae>
    {
        //Save authentication key to nonse.
        bb_clear(&nonse);
    1bd2:	a805      	add	r0, sp, #20
    1bd4:	f00c fd75 	bl	e6c2 <bb_clear>
        ret = bb_set(&nonse, input->data + input->size - 12, 12);
    1bd8:	88eb      	ldrh	r3, [r5, #6]
    1bda:	6829      	ldr	r1, [r5, #0]
    1bdc:	3b0c      	subs	r3, #12
    1bde:	4419      	add	r1, r3
    1be0:	220c      	movs	r2, #12
    1be2:	a805      	add	r0, sp, #20
    1be4:	f00c fcf9 	bl	e5da <bb_set>
        input->size -= 12;
    1be8:	88eb      	ldrh	r3, [r5, #6]
    1bea:	3b0c      	subs	r3, #12
        ret = bb_set(&nonse, input->data + input->size - 12, 12);
    1bec:	4604      	mov	r4, r0
        input->size -= 12;
    1bee:	80eb      	strh	r3, [r5, #6]
    }

    if (security == DLMS_SECURITY_AUTHENTICATION)
    1bf0:	2e10      	cmp	r6, #16
    1bf2:	f040 808f 	bne.w	1d14 <cip_crypt+0x238>
    {
        if ((ret = bb_move(input, input->position, 17, bb_available(input))) == 0)
    1bf6:	4628      	mov	r0, r5
    1bf8:	892c      	ldrh	r4, [r5, #8]
    1bfa:	f00c fb92 	bl	e322 <bb_available>
    1bfe:	4621      	mov	r1, r4
    1c00:	4603      	mov	r3, r0
    1c02:	2211      	movs	r2, #17
    1c04:	4628      	mov	r0, r5
    1c06:	f00c fee2 	bl	e9ce <bb_move>
    1c0a:	4604      	mov	r4, r0
    1c0c:	2800      	cmp	r0, #0
    1c0e:	f040 8131 	bne.w	1e74 <cip_crypt+0x398>
        {
            input->position = 0;
            bb_setUInt8ByIndex(input, 0, security);
    1c12:	4601      	mov	r1, r0
            input->position = 0;
    1c14:	8128      	strh	r0, [r5, #8]
            bb_setUInt8ByIndex(input, 0, security);
    1c16:	4632      	mov	r2, r6
    1c18:	4628      	mov	r0, r5
    1c1a:	f00c fbe9 	bl	e3f0 <bb_setUInt8ByIndex>
    1c1e:	9b02      	ldr	r3, [sp, #8]
#ifndef DLMS_IGNORE_MALLOC
            memcpy(input->data + 1, settings->authenticationKey.data, 16);
    1c20:	682a      	ldr	r2, [r5, #0]
    1c22:	6a1b      	ldr	r3, [r3, #32]
    1c24:	3201      	adds	r2, #1
    1c26:	f103 0110 	add.w	r1, r3, #16
    1c2a:	f853 0b04 	ldr.w	r0, [r3], #4
    1c2e:	f842 0b04 	str.w	r0, [r2], #4
    1c32:	428b      	cmp	r3, r1
    1c34:	d1f9      	bne.n	1c2a <cip_crypt+0x14e>
#else
            memcpy(input->data + 1, settings->authenticationKey, 16);
#endif //DLMS_IGNORE_MALLOC
            aes_gcm_ghash(H, input->data, input->size, input->data, 0, S);
    1c36:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
    1c3a:	f04f 0800 	mov.w	r8, #0
    1c3e:	f8cd a004 	str.w	sl, [sp, #4]
    1c42:	f8cd 8000 	str.w	r8, [sp]
    1c46:	682b      	ldr	r3, [r5, #0]
    1c48:	88ea      	ldrh	r2, [r5, #6]
    1c4a:	4619      	mov	r1, r3
    1c4c:	a808      	add	r0, sp, #32
    1c4e:	f00d f811 	bl	ec74 <aes_gcm_ghash>
            ret = bb_move(input, 17, 0, input->size - 17);
    1c52:	88eb      	ldrh	r3, [r5, #6]
    1c54:	3b11      	subs	r3, #17
    1c56:	b29b      	uxth	r3, r3
    1c58:	4642      	mov	r2, r8
    1c5a:	2111      	movs	r1, #17
    1c5c:	4628      	mov	r0, r5
    1c5e:	f00c feb6 	bl	e9ce <bb_move>
            cip_gctr(aes, J0, S, sizeof(S), input->data + input->size);
    1c62:	88ea      	ldrh	r2, [r5, #6]
    1c64:	682b      	ldr	r3, [r5, #0]
    1c66:	4413      	add	r3, r2
    1c68:	9300      	str	r3, [sp, #0]
    1c6a:	a90c      	add	r1, sp, #48	; 0x30
            ret = bb_move(input, 17, 0, input->size - 17);
    1c6c:	4604      	mov	r4, r0
    if (len == 0)
    1c6e:	2310      	movs	r3, #16
    1c70:	4652      	mov	r2, sl
    1c72:	a81d      	add	r0, sp, #116	; 0x74
    1c74:	f00d f851 	bl	ed1a <cip_gctr.part.0>
            if (encrypt)
    1c78:	88e9      	ldrh	r1, [r5, #6]
    1c7a:	b36f      	cbz	r7, 1cd8 <cip_crypt+0x1fc>
            {
                if (type == DLMS_COUNT_TYPE_TAG)
    1c7c:	9b03      	ldr	r3, [sp, #12]
    1c7e:	2b01      	cmp	r3, #1
    1c80:	d127      	bne.n	1cd2 <cip_crypt+0x1f6>
                {
                    bb_move(input, input->size, 0, 12);
    1c82:	230c      	movs	r3, #12
    1c84:	4642      	mov	r2, r8
    1c86:	4628      	mov	r0, r5
    1c88:	f00c fea1 	bl	e9ce <bb_move>
                    }
                }
            }
        }
    }
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1c8c:	2c00      	cmp	r4, #0
    1c8e:	f000 80a6 	beq.w	1dde <cip_crypt+0x302>
    1c92:	e0ef      	b.n	1e74 <cip_crypt+0x398>
        memset(J0, 0, 16);
    1c94:	4621      	mov	r1, r4
    1c96:	2210      	movs	r2, #16
    1c98:	a80c      	add	r0, sp, #48	; 0x30
    1c9a:	f01c faed 	bl	1e278 <memset>
        cip_getGHash(H, iv, len, J0);
    1c9e:	ab0c      	add	r3, sp, #48	; 0x30
    1ca0:	4642      	mov	r2, r8
    1ca2:	4651      	mov	r1, sl
    1ca4:	a808      	add	r0, sp, #32
    1ca6:	f00c ff9d 	bl	ebe4 <cip_getGHash>
        PUT32(tmp + 12, (uint32_t)(len * 8));
    1caa:	ea4f 1358 	mov.w	r3, r8, lsr #5
    1cae:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    1cb2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
        cip_getGHash(H, tmp, sizeof(tmp), J0);
    1cb6:	ab0c      	add	r3, sp, #48	; 0x30
    1cb8:	2210      	movs	r2, #16
    1cba:	a914      	add	r1, sp, #80	; 0x50
    1cbc:	a808      	add	r0, sp, #32
        PUT32(tmp + 4, (uint32_t)0);
    1cbe:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
        PUT32(tmp + 8, (uint32_t)0);
    1cc2:	9416      	str	r4, [sp, #88]	; 0x58
        PUT32(tmp + 12, (uint32_t)(len * 8));
    1cc4:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
    1cc8:	f88d 805f 	strb.w	r8, [sp, #95]	; 0x5f
        cip_getGHash(H, tmp, sizeof(tmp), J0);
    1ccc:	f00c ff8a 	bl	ebe4 <cip_getGHash>
    1cd0:	e779      	b.n	1bc6 <cip_crypt+0xea>
                    input->size += 12;
    1cd2:	310c      	adds	r1, #12
    1cd4:	80e9      	strh	r1, [r5, #6]
    1cd6:	e7d9      	b.n	1c8c <cip_crypt+0x1b0>
                if (memcmp(NONSE, input->data + input->size, 12) != 0)
    1cd8:	682b      	ldr	r3, [r5, #0]
    1cda:	220c      	movs	r2, #12
    1cdc:	4419      	add	r1, r3
    1cde:	a818      	add	r0, sp, #96	; 0x60
    1ce0:	f01c fa81 	bl	1e1e6 <memcmp>
    1ce4:	2800      	cmp	r0, #0
    1ce6:	f000 80d2 	beq.w	1e8e <cip_crypt+0x3b2>
                        ret = DLMS_ERROR_CODE_INVALID_TAG;
    1cea:	f240 140f 	movw	r4, #271	; 0x10f
    1cee:	e0c1      	b.n	1e74 <cip_crypt+0x398>
        aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1cf0:	682a      	ldr	r2, [r5, #0]
    1cf2:	892c      	ldrh	r4, [r5, #8]
    1cf4:	4628      	mov	r0, r5
    1cf6:	4414      	add	r4, r2
    1cf8:	f00c fb13 	bl	e322 <bb_available>
    1cfc:	4622      	mov	r2, r4
    1cfe:	4603      	mov	r3, r0
    1d00:	a90c      	add	r1, sp, #48	; 0x30
    1d02:	a81d      	add	r0, sp, #116	; 0x74
    1d04:	f00d f85b 	bl	edbe <aes_gcm_gctr.constprop.0>
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1d08:	2f00      	cmp	r7, #0
    1d0a:	f000 80b2 	beq.w	1e72 <cip_crypt+0x396>
    1d0e:	e066      	b.n	1dde <cip_crypt+0x302>
    1d10:	0001f922 	.word	0x0001f922
    else if (security == DLMS_SECURITY_AUTHENTICATION_ENCRYPTION)
    1d14:	2e30      	cmp	r6, #48	; 0x30
    1d16:	f040 80b1 	bne.w	1e7c <cip_crypt+0x3a0>
        if (encrypt)
    1d1a:	b15f      	cbz	r7, 1d34 <cip_crypt+0x258>
            aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1d1c:	682a      	ldr	r2, [r5, #0]
    1d1e:	892c      	ldrh	r4, [r5, #8]
    1d20:	4628      	mov	r0, r5
    1d22:	4414      	add	r4, r2
    1d24:	f00c fafd 	bl	e322 <bb_available>
    1d28:	4622      	mov	r2, r4
    1d2a:	4603      	mov	r3, r0
    1d2c:	a90c      	add	r1, sp, #48	; 0x30
    1d2e:	a81d      	add	r0, sp, #116	; 0x74
    1d30:	f00d f845 	bl	edbe <aes_gcm_gctr.constprop.0>
        if ((ret = bb_move(input, input->position, 17, bb_available(input))) == 0)
    1d34:	4628      	mov	r0, r5
    1d36:	892c      	ldrh	r4, [r5, #8]
    1d38:	f00c faf3 	bl	e322 <bb_available>
    1d3c:	4621      	mov	r1, r4
    1d3e:	4603      	mov	r3, r0
    1d40:	2211      	movs	r2, #17
    1d42:	4628      	mov	r0, r5
    1d44:	f00c fe43 	bl	e9ce <bb_move>
    1d48:	4604      	mov	r4, r0
    1d4a:	2800      	cmp	r0, #0
    1d4c:	f040 8092 	bne.w	1e74 <cip_crypt+0x398>
            ret = bb_setUInt8ByIndex(input, 0, security);
    1d50:	4601      	mov	r1, r0
            input->position = 0;
    1d52:	8128      	strh	r0, [r5, #8]
            ret = bb_setUInt8ByIndex(input, 0, security);
    1d54:	2230      	movs	r2, #48	; 0x30
    1d56:	4628      	mov	r0, r5
    1d58:	f00c fb4a 	bl	e3f0 <bb_setUInt8ByIndex>
    1d5c:	9b02      	ldr	r3, [sp, #8]
            memcpy(input->data + 1, settings->authenticationKey.data, 16);
    1d5e:	682a      	ldr	r2, [r5, #0]
    1d60:	6a1b      	ldr	r3, [r3, #32]
    1d62:	3201      	adds	r2, #1
    1d64:	f103 0110 	add.w	r1, r3, #16
    1d68:	f853 0b04 	ldr.w	r0, [r3], #4
    1d6c:	f842 0b04 	str.w	r0, [r2], #4
    1d70:	428b      	cmp	r3, r1
    1d72:	d1f9      	bne.n	1d68 <cip_crypt+0x28c>
            aes_gcm_ghash(H, input->data, 17, input->data + 17, input->size - 17, S);
    1d74:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    1d78:	6829      	ldr	r1, [r5, #0]
    1d7a:	f8cd 8004 	str.w	r8, [sp, #4]
    1d7e:	88eb      	ldrh	r3, [r5, #6]
    1d80:	3b11      	subs	r3, #17
    1d82:	9300      	str	r3, [sp, #0]
    1d84:	2211      	movs	r2, #17
    1d86:	f101 0311 	add.w	r3, r1, #17
    1d8a:	a808      	add	r0, sp, #32
    1d8c:	f00c ff72 	bl	ec74 <aes_gcm_ghash>
            if ((ret = bb_move(input, 17, 0, input->size - 17)) == 0)
    1d90:	88eb      	ldrh	r3, [r5, #6]
    1d92:	3b11      	subs	r3, #17
    1d94:	b29b      	uxth	r3, r3
    1d96:	2200      	movs	r2, #0
    1d98:	2111      	movs	r1, #17
    1d9a:	4628      	mov	r0, r5
    1d9c:	f00c fe17 	bl	e9ce <bb_move>
    1da0:	4604      	mov	r4, r0
    1da2:	2800      	cmp	r0, #0
    1da4:	d166      	bne.n	1e74 <cip_crypt+0x398>
                if (!encrypt)
    1da6:	b95f      	cbnz	r7, 1dc0 <cip_crypt+0x2e4>
                    aes_gcm_gctr(aes, J0, input->data + input->position, bb_available(input), NULL);
    1da8:	682a      	ldr	r2, [r5, #0]
    1daa:	892c      	ldrh	r4, [r5, #8]
    1dac:	4628      	mov	r0, r5
    1dae:	4414      	add	r4, r2
    1db0:	f00c fab7 	bl	e322 <bb_available>
    1db4:	4622      	mov	r2, r4
    1db6:	4603      	mov	r3, r0
    1db8:	a90c      	add	r1, sp, #48	; 0x30
    1dba:	a81d      	add	r0, sp, #116	; 0x74
    1dbc:	f00c ffff 	bl	edbe <aes_gcm_gctr.constprop.0>
                cip_gctr(aes, J0, S, sizeof(S), input->data + input->size);
    1dc0:	88ea      	ldrh	r2, [r5, #6]
    1dc2:	682b      	ldr	r3, [r5, #0]
    1dc4:	4413      	add	r3, r2
    1dc6:	9300      	str	r3, [sp, #0]
    1dc8:	4642      	mov	r2, r8
    1dca:	2310      	movs	r3, #16
    1dcc:	a90c      	add	r1, sp, #48	; 0x30
    1dce:	a81d      	add	r0, sp, #116	; 0x74
    1dd0:	f00c ffa3 	bl	ed1a <cip_gctr.part.0>
                    input->size += 12;
    1dd4:	88eb      	ldrh	r3, [r5, #6]
                if (encrypt)
    1dd6:	2f00      	cmp	r7, #0
    1dd8:	d042      	beq.n	1e60 <cip_crypt+0x384>
                    input->size += 12;
    1dda:	330c      	adds	r3, #12
    1ddc:	80eb      	strh	r3, [r5, #6]
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1dde:	9b03      	ldr	r3, [sp, #12]
    1de0:	2b03      	cmp	r3, #3
    1de2:	d146      	bne.n	1e72 <cip_crypt+0x396>
    {
        if ((ret = bb_clear(&nonse)) == 0 &&
    1de4:	a805      	add	r0, sp, #20
    1de6:	f00c fc6c 	bl	e6c2 <bb_clear>
    1dea:	4604      	mov	r4, r0
    1dec:	2800      	cmp	r0, #0
    1dee:	d141      	bne.n	1e74 <cip_crypt+0x398>
            (ret = bb_setUInt8(&nonse, tag)) == 0)
    1df0:	4659      	mov	r1, fp
    1df2:	a805      	add	r0, sp, #20
    1df4:	f00c fb0b 	bl	e40e <bb_setUInt8>
        if ((ret = bb_clear(&nonse)) == 0 &&
    1df8:	4604      	mov	r4, r0
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d13a      	bne.n	1e74 <cip_crypt+0x398>
        {
            if (tag == DLMS_COMMAND_GENERAL_GLO_CIPHERING ||
    1dfe:	f10b 0325 	add.w	r3, fp, #37	; 0x25
    1e02:	b2db      	uxtb	r3, r3
    1e04:	2b01      	cmp	r3, #1
    1e06:	d808      	bhi.n	1e1a <cip_crypt+0x33e>
                tag == DLMS_COMMAND_GENERAL_DED_CIPHERING)
            {
                hlp_setObjectCount(8, &nonse);
    1e08:	a905      	add	r1, sp, #20
    1e0a:	2008      	movs	r0, #8
    1e0c:	f019 fbfb 	bl	1b606 <hlp_setObjectCount>
                bb_set(&nonse, systemTitle, 8);
    1e10:	9965      	ldr	r1, [sp, #404]	; 0x194
    1e12:	2208      	movs	r2, #8
    1e14:	a805      	add	r0, sp, #20
    1e16:	f00c fbe0 	bl	e5da <bb_set>
            }
            if ((ret = hlp_setObjectCount(5 + input->size, &nonse)) == 0 &&
    1e1a:	88e8      	ldrh	r0, [r5, #6]
    1e1c:	a905      	add	r1, sp, #20
    1e1e:	3005      	adds	r0, #5
    1e20:	f019 fbf1 	bl	1b606 <hlp_setObjectCount>
    1e24:	4604      	mov	r4, r0
    1e26:	bb28      	cbnz	r0, 1e74 <cip_crypt+0x398>
                (ret = bb_setUInt8(&nonse, security)) == 0 &&
    1e28:	4631      	mov	r1, r6
    1e2a:	a805      	add	r0, sp, #20
    1e2c:	f00c faef 	bl	e40e <bb_setUInt8>
            if ((ret = hlp_setObjectCount(5 + input->size, &nonse)) == 0 &&
    1e30:	4604      	mov	r4, r0
    1e32:	b9f8      	cbnz	r0, 1e74 <cip_crypt+0x398>
                (ret = bb_setUInt32(&nonse, frameCounter)) == 0 &&
    1e34:	4649      	mov	r1, r9
    1e36:	a805      	add	r0, sp, #20
    1e38:	f00c fb2d 	bl	e496 <bb_setUInt32>
                (ret = bb_setUInt8(&nonse, security)) == 0 &&
    1e3c:	4604      	mov	r4, r0
    1e3e:	b9c8      	cbnz	r0, 1e74 <cip_crypt+0x398>
                (ret = bb_insert(nonse.data, nonse.size, input, 0)) == 0)
    1e40:	4603      	mov	r3, r0
    1e42:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    1e46:	9805      	ldr	r0, [sp, #20]
    1e48:	462a      	mov	r2, r5
    1e4a:	f00c fdf1 	bl	ea30 <bb_insert>
                (ret = bb_setUInt32(&nonse, frameCounter)) == 0 &&
    1e4e:	4604      	mov	r4, r0
    1e50:	b980      	cbnz	r0, 1e74 <cip_crypt+0x398>
    1e52:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    1e56:	9905      	ldr	r1, [sp, #20]
    1e58:	6828      	ldr	r0, [r5, #0]
    1e5a:	f01c f9d2 	bl	1e202 <memcpy>
    1e5e:	e009      	b.n	1e74 <cip_crypt+0x398>
                    if (memcmp(NONSE, input->data + input->size, 12) != 0)
    1e60:	6829      	ldr	r1, [r5, #0]
    1e62:	220c      	movs	r2, #12
    1e64:	4419      	add	r1, r3
    1e66:	a818      	add	r0, sp, #96	; 0x60
    1e68:	f01c f9bd 	bl	1e1e6 <memcmp>
    1e6c:	2800      	cmp	r0, #0
    1e6e:	f47f af3c 	bne.w	1cea <cip_crypt+0x20e>
{
    1e72:	2400      	movs	r4, #0
                memcpy(input->data, nonse.data, nonse.size);
            }
        }
    }
    return ret;
}
    1e74:	4620      	mov	r0, r4
    1e76:	b05b      	add	sp, #364	; 0x16c
    1e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1e7c:	2c00      	cmp	r4, #0
    1e7e:	f43f af43 	beq.w	1d08 <cip_crypt+0x22c>
    1e82:	e7f7      	b.n	1e74 <cip_crypt+0x398>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    1e84:	f44f 7481 	mov.w	r4, #258	; 0x102
    1e88:	e7f4      	b.n	1e74 <cip_crypt+0x398>
    if ((ret = cip_int(
    1e8a:	2400      	movs	r4, #0
    1e8c:	e6b0      	b.n	1bf0 <cip_crypt+0x114>
    if (ret == 0 && encrypt && type == DLMS_COUNT_TYPE_PACKET)
    1e8e:	2c00      	cmp	r4, #0
    1e90:	d0ef      	beq.n	1e72 <cip_crypt+0x396>
    1e92:	e7ef      	b.n	1e74 <cip_crypt+0x398>

00001e94 <cip_decrypt>:
    gxByteBuffer* data,
    DLMS_SECURITY* security,
    DLMS_SECURITY_SUITE* suite,
    uint64_t* invocationCounter)
#endif //DLMS_IGNORE_MALLOC
{
    1e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e98:	b08a      	sub	sp, #40	; 0x28
    1e9a:	e9dd 7a12 	ldrd	r7, sl, [sp, #72]	; 0x48
    1e9e:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    1ea2:	4606      	mov	r6, r0
    1ea4:	460d      	mov	r5, r1
    1ea6:	4690      	mov	r8, r2
    int ret;
    unsigned char ch;
    uint32_t frameCounter;
    DLMS_COMMAND cmd;
    unsigned char systemTitle[8];
    if (data == NULL || data->size - data->position < 2)
    1ea8:	461c      	mov	r4, r3
    1eaa:	b913      	cbnz	r3, 1eb2 <cip_decrypt+0x1e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    {
        return ret;
    }
    cmd = (DLMS_COMMAND)ch;
    switch (cmd)
    1eac:	f44f 7081 	mov.w	r0, #258	; 0x102
    1eb0:	e09f      	b.n	1ff2 <cip_decrypt+0x15e>
    if (data == NULL || data->size - data->position < 2)
    1eb2:	88db      	ldrh	r3, [r3, #6]
    1eb4:	8922      	ldrh	r2, [r4, #8]
    1eb6:	1a9b      	subs	r3, r3, r2
    1eb8:	2b01      	cmp	r3, #1
    1eba:	ddf7      	ble.n	1eac <cip_decrypt+0x18>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    1ebc:	f10d 0119 	add.w	r1, sp, #25
    1ec0:	4620      	mov	r0, r4
    1ec2:	f00c fc14 	bl	e6ee <bb_getUInt8>
    1ec6:	2800      	cmp	r0, #0
    1ec8:	f040 8093 	bne.w	1ff2 <cip_decrypt+0x15e>
    cmd = (DLMS_COMMAND)ch;
    1ecc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    switch (cmd)
    1ed0:	2bdc      	cmp	r3, #220	; 0xdc
    1ed2:	d8eb      	bhi.n	1eac <cip_decrypt+0x18>
    1ed4:	2bc7      	cmp	r3, #199	; 0xc7
    1ed6:	d823      	bhi.n	1f20 <cip_decrypt+0x8c>
    1ed8:	2b2d      	cmp	r3, #45	; 0x2d
    1eda:	d851      	bhi.n	1f80 <cip_decrypt+0xec>
    1edc:	2b20      	cmp	r3, #32
    1ede:	d9e5      	bls.n	1eac <cip_decrypt+0x18>
    1ee0:	3b21      	subs	r3, #33	; 0x21
    1ee2:	2b0c      	cmp	r3, #12
    1ee4:	d8e2      	bhi.n	1eac <cip_decrypt+0x18>
    1ee6:	a201      	add	r2, pc, #4	; (adr r2, 1eec <cip_decrypt+0x58>)
    1ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1eec:	00001f89 	.word	0x00001f89
    1ef0:	00001ead 	.word	0x00001ead
    1ef4:	00001ead 	.word	0x00001ead
    1ef8:	00001ead 	.word	0x00001ead
    1efc:	00001f89 	.word	0x00001f89
    1f00:	00001f89 	.word	0x00001f89
    1f04:	00001ead 	.word	0x00001ead
    1f08:	00001f89 	.word	0x00001f89
    1f0c:	00001ead 	.word	0x00001ead
    1f10:	00001ead 	.word	0x00001ead
    1f14:	00001ead 	.word	0x00001ead
    1f18:	00001f89 	.word	0x00001f89
    1f1c:	00001f89 	.word	0x00001f89
    1f20:	3bc8      	subs	r3, #200	; 0xc8
    1f22:	2b14      	cmp	r3, #20
    1f24:	d8c2      	bhi.n	1eac <cip_decrypt+0x18>
    1f26:	a201      	add	r2, pc, #4	; (adr r2, 1f2c <cip_decrypt+0x98>)
    1f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f2c:	00001f89 	.word	0x00001f89
    1f30:	00001f89 	.word	0x00001f89
    1f34:	00001f89 	.word	0x00001f89
    1f38:	00001f89 	.word	0x00001f89
    1f3c:	00001f89 	.word	0x00001f89
    1f40:	00001f89 	.word	0x00001f89
    1f44:	00001ead 	.word	0x00001ead
    1f48:	00001f89 	.word	0x00001f89
    1f4c:	00001f89 	.word	0x00001f89
    1f50:	00001f89 	.word	0x00001f89
    1f54:	00001f89 	.word	0x00001f89
    1f58:	00001f89 	.word	0x00001f89
    1f5c:	00001f89 	.word	0x00001f89
    1f60:	00001f89 	.word	0x00001f89
    1f64:	00001ead 	.word	0x00001ead
    1f68:	00001f89 	.word	0x00001f89
    1f6c:	00001ead 	.word	0x00001ead
    1f70:	00001ead 	.word	0x00001ead
    1f74:	00001ead 	.word	0x00001ead
    1f78:	00001ff9 	.word	0x00001ff9
    1f7c:	00001ff9 	.word	0x00001ff9
    1f80:	2b41      	cmp	r3, #65	; 0x41
    1f82:	d001      	beq.n	1f88 <cip_decrypt+0xf4>
    1f84:	2b48      	cmp	r3, #72	; 0x48
    1f86:	d191      	bne.n	1eac <cip_decrypt+0x18>
    case DLMS_COMMAND_DED_EVENT_NOTIFICATION:
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if ((ret = hlp_getObjectCount2(data, &length)) != 0)
    1f88:	f10d 011a 	add.w	r1, sp, #26
    1f8c:	4620      	mov	r0, r4
    1f8e:	f019 fb09 	bl	1b5a4 <hlp_getObjectCount2>
    1f92:	bb70      	cbnz	r0, 1ff2 <cip_decrypt+0x15e>
    {
        return ret;
    }
    if ((ret = bb_getUInt8(data, &ch)) != 0)
    1f94:	f10d 0119 	add.w	r1, sp, #25
    1f98:	4620      	mov	r0, r4
    1f9a:	f00c fba8 	bl	e6ee <bb_getUInt8>
    1f9e:	bb40      	cbnz	r0, 1ff2 <cip_decrypt+0x15e>
    {
        return ret;
    }
    *security = (DLMS_SECURITY)(ch & 0x30);
    1fa0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1fa4:	f003 0230 	and.w	r2, r3, #48	; 0x30
    1fa8:	703a      	strb	r2, [r7, #0]
    if (suite != NULL)
    1faa:	f1ba 0f00 	cmp.w	sl, #0
    1fae:	d003      	beq.n	1fb8 <cip_decrypt+0x124>
    {
        *suite = (DLMS_SECURITY_SUITE) (ch & 0x3);
    1fb0:	f003 0203 	and.w	r2, r3, #3
    1fb4:	f88a 2000 	strb.w	r2, [sl]
    }
    //If Key_Set or authentication or encryption is not used.
    if (ch & 0x40 || *security == DLMS_SECURITY_NONE)
    1fb8:	065b      	lsls	r3, r3, #25
    1fba:	f53f af77 	bmi.w	1eac <cip_decrypt+0x18>
    1fbe:	783b      	ldrb	r3, [r7, #0]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	f43f af73 	beq.w	1eac <cip_decrypt+0x18>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if ((ret = bb_getUInt32(data, &frameCounter)) != 0)
    1fc6:	a907      	add	r1, sp, #28
    1fc8:	4620      	mov	r0, r4
    1fca:	f00c fbce 	bl	e76a <bb_getUInt32>
    1fce:	b980      	cbnz	r0, 1ff2 <cip_decrypt+0x15e>
    {
        return ret;
    }
    if (invocationCounter != NULL)
    1fd0:	9b07      	ldr	r3, [sp, #28]
    1fd2:	f1b9 0f00 	cmp.w	r9, #0
    1fd6:	d001      	beq.n	1fdc <cip_decrypt+0x148>
    {
        *invocationCounter = frameCounter;
    1fd8:	e9c9 3000 	strd	r3, r0, [r9]
    }
    ret = cip_crypt(
    1fdc:	2200      	movs	r2, #0
    1fde:	e9cd 4203 	strd	r4, r2, [sp, #12]
    1fe2:	e9cd 5801 	strd	r5, r8, [sp, #4]
    1fe6:	9200      	str	r2, [sp, #0]
    1fe8:	7839      	ldrb	r1, [r7, #0]
    1fea:	2202      	movs	r2, #2
    1fec:	4630      	mov	r0, r6
    1fee:	f7ff fd75 	bl	1adc <cip_crypt>
        title,
        key,
        data,
        0);
    return ret;
}
    1ff2:	b00a      	add	sp, #40	; 0x28
    1ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((ret = hlp_getObjectCount2(data, &length)) != 0)
    1ff8:	f10d 011a 	add.w	r1, sp, #26
    1ffc:	4620      	mov	r0, r4
    1ffe:	f019 fad1 	bl	1b5a4 <hlp_getObjectCount2>
    2002:	2800      	cmp	r0, #0
    2004:	d1f5      	bne.n	1ff2 <cip_decrypt+0x15e>
        if (length != 0)
    2006:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    200a:	2a00      	cmp	r2, #0
    200c:	d0bc      	beq.n	1f88 <cip_decrypt+0xf4>
            if (length != 8)
    200e:	2a08      	cmp	r2, #8
    2010:	f47f af4c 	bne.w	1eac <cip_decrypt+0x18>
            bb_get(data, systemTitle, length);
    2014:	a908      	add	r1, sp, #32
    2016:	4620      	mov	r0, r4
    2018:	f00c fd48 	bl	eaac <bb_get>
            title = systemTitle;
    201c:	ad08      	add	r5, sp, #32
    201e:	e7b3      	b.n	1f88 <cip_decrypt+0xf4>

00002020 <cosem_init4>:
int cosem_init4(
    void* object,
    const uint16_t expectedSize,
    DLMS_OBJECT_TYPE type,
    const unsigned char* ln)
{
    2020:	b570      	push	{r4, r5, r6, lr}
    2022:	4604      	mov	r4, r0
    uint16_t size = cosem_getObjectSize(type);
    2024:	4610      	mov	r0, r2
{
    2026:	4615      	mov	r5, r2
    2028:	461e      	mov	r6, r3
    uint16_t size = cosem_getObjectSize(type);
    202a:	f00c fedf 	bl	edec <cosem_getObjectSize>
    if (size == 0)
    202e:	4602      	mov	r2, r0
    2030:	2800      	cmp	r0, #0
    2032:	d065      	beq.n	2100 <cosem_init4+0xe0>
    {
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    }
    if (expectedSize != 0 && size != expectedSize)
    2034:	b109      	cbz	r1, 203a <cosem_init4+0x1a>
    2036:	4288      	cmp	r0, r1
    2038:	d164      	bne.n	2104 <cosem_init4+0xe4>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    203a:	2100      	movs	r1, #0
    203c:	4620      	mov	r0, r4
    203e:	f01c f91b 	bl	1e278 <memset>
    {
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    }
    memset(object, 0, size);
    ((gxObject*)object)->objectType = type;
    2042:	8025      	strh	r5, [r4, #0]
    ((gxObject*)object)->logicalName[0] = ln[0];
    2044:	7833      	ldrb	r3, [r6, #0]
    2046:	71a3      	strb	r3, [r4, #6]
    ((gxObject*)object)->logicalName[1] = ln[1];
    2048:	7873      	ldrb	r3, [r6, #1]
    204a:	71e3      	strb	r3, [r4, #7]
    ((gxObject*)object)->logicalName[2] = ln[2];
    204c:	78b3      	ldrb	r3, [r6, #2]
    204e:	7223      	strb	r3, [r4, #8]
    ((gxObject*)object)->logicalName[3] = ln[3];
    2050:	78f3      	ldrb	r3, [r6, #3]
    2052:	7263      	strb	r3, [r4, #9]
    ((gxObject*)object)->logicalName[4] = ln[4];
    2054:	7933      	ldrb	r3, [r6, #4]
    2056:	72a3      	strb	r3, [r4, #10]
    ((gxObject*)object)->logicalName[5] = ln[5];
    2058:	7973      	ldrb	r3, [r6, #5]
    205a:	72e3      	strb	r3, [r4, #11]
    //Set default values, if any.
    switch (type)
    205c:	2d1d      	cmp	r5, #29
    205e:	d80f      	bhi.n	2080 <cosem_init4+0x60>
    2060:	2d0b      	cmp	r5, #11
    2062:	d913      	bls.n	208c <cosem_init4+0x6c>
    2064:	3d0c      	subs	r5, #12
    2066:	2d11      	cmp	r5, #17
    2068:	d810      	bhi.n	208c <cosem_init4+0x6c>
    206a:	e8df f005 	tbb	[pc, r5]
    206e:	0f2c      	.short	0x0f2c
    2070:	0f0f110f 	.word	0x0f0f110f
    2074:	0f0f400f 	.word	0x0f0f400f
    2078:	0f40320f 	.word	0x0f40320f
    207c:	2f0f400f 	.word	0x2f0f400f
    2080:	2d2f      	cmp	r5, #47	; 0x2f
    2082:	d034      	beq.n	20ee <cosem_init4+0xce>
    2084:	2d48      	cmp	r5, #72	; 0x48
    2086:	d032      	beq.n	20ee <cosem_init4+0xce>
    2088:	2d29      	cmp	r5, #41	; 0x29
    208a:	d032      	beq.n	20f2 <cosem_init4+0xd2>
    208c:	2000      	movs	r0, #0
    208e:	e038      	b.n	2102 <cosem_init4+0xe2>
#ifndef DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
    {
        gxAssociationLogicalName* it = (gxAssociationLogicalName*)object;
        ((gxObject*)object)->version = 2;
        it->xDLMSContextInfo.dlmsVersionNumber = 6;
    2090:	2206      	movs	r2, #6
    2092:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
        it->applicationContextName.jointIsoCtt = 2;
    2096:	f241 0202 	movw	r2, #4098	; 0x1002
    209a:	84e2      	strh	r2, [r4, #38]	; 0x26
        it->applicationContextName.country = 16;
        it->applicationContextName.countryName = 756;
    209c:	4a1a      	ldr	r2, [pc, #104]	; (2108 <cosem_init4+0xe8>)
    209e:	62a2      	str	r2, [r4, #40]	; 0x28
        it->applicationContextName.identifiedOrganization = 5;
        it->applicationContextName.dlmsUA = 8;
        it->applicationContextName.applicationContext = 1;
    20a0:	f240 1201 	movw	r2, #257	; 0x101
    20a4:	85a2      	strh	r2, [r4, #44]	; 0x2c
        it->applicationContextName.contextId = DLMS_APPLICATION_CONTEXT_NAME_LOGICAL_NAME;
        it->authenticationMechanismName.jointIsoCtt = 2;
    20a6:	f102 723d 	add.w	r2, r2, #49545216	; 0x2f40000
        ((gxObject*)object)->version = 2;
    20aa:	2302      	movs	r3, #2
        it->authenticationMechanismName.jointIsoCtt = 2;
    20ac:	f602 7201 	addw	r2, r2, #3841	; 0xf01
        ((gxObject*)object)->version = 2;
    20b0:	70a3      	strb	r3, [r4, #2]
        it->authenticationMechanismName.jointIsoCtt = 2;
    20b2:	64a2      	str	r2, [r4, #72]	; 0x48
        it->authenticationMechanismName.country = 16;
        it->authenticationMechanismName.countryName = 756;
        it->authenticationMechanismName.identifiedOrganization = 5;
        it->authenticationMechanismName.dlmsUA = 8;
        it->authenticationMechanismName.authenticationMechanismName = 2;
    20b4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        it->authenticationMechanismName.identifiedOrganization = 5;
    20b8:	f640 0205 	movw	r2, #2053	; 0x805
        it->serverSAP = 1;
    20bc:	2301      	movs	r3, #1
        it->authenticationMechanismName.identifiedOrganization = 5;
    20be:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
        it->serverSAP = 1;
    20c2:	83e3      	strh	r3, [r4, #30]
    }
    break;
    20c4:	e7e2      	b.n	208c <cosem_init4+0x6c>
#endif //DLMS_IGNORE_ASSOCIATION_LOGICAL_NAME
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
    {
        ((gxObject*)object)->shortName = 0xFA00;
    20c6:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
    20ca:	80a3      	strh	r3, [r4, #4]
    break;
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
    case DLMS_OBJECT_TYPE_AUTO_ANSWER:
        break;
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        ((gxObject*)object)->version = 2;
    20cc:	2302      	movs	r3, #2
        ((gxIecHdlcSetup*)object)->inactivityTimeout = 120;
        ((gxIecHdlcSetup*)object)->deviceAddress = 0x10;
        break;
#endif //DLMS_IGNORE_IEC_HDLC_SETUP
    case DLMS_OBJECT_TYPE_IEC_LOCAL_PORT_SETUP:
        ((gxObject*)object)->version = 1;
    20ce:	70a3      	strb	r3, [r4, #2]
        break;
    20d0:	e7dc      	b.n	208c <cosem_init4+0x6c>
        ((gxIecHdlcSetup*)object)->maximumInfoLengthReceive = 128;
    20d2:	2280      	movs	r2, #128	; 0x80
    20d4:	83a2      	strh	r2, [r4, #28]
        ((gxIecHdlcSetup*)object)->interCharachterTimeout = 25;
    20d6:	2219      	movs	r2, #25
    20d8:	8362      	strh	r2, [r4, #26]
        ((gxIecHdlcSetup*)object)->inactivityTimeout = 120;
    20da:	4a0c      	ldr	r2, [pc, #48]	; (210c <cosem_init4+0xec>)
    20dc:	6122      	str	r2, [r4, #16]
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    20de:	f502 0275 	add.w	r2, r2, #16056320	; 0xf50000
        ((gxObject*)object)->version = 1;
    20e2:	2301      	movs	r3, #1
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    20e4:	3208      	adds	r2, #8
        ((gxObject*)object)->version = 1;
    20e6:	70a3      	strb	r3, [r4, #2]
        ((gxIecHdlcSetup*)object)->maximumInfoLengthTransmit = 128;
    20e8:	6162      	str	r2, [r4, #20]
        ((gxIecHdlcSetup*)object)->windowSizeReceive = 1;
    20ea:	7623      	strb	r3, [r4, #24]
        break;
    20ec:	e7ce      	b.n	208c <cosem_init4+0x6c>
        ((gxObject*)object)->version = 1;
    20ee:	2301      	movs	r3, #1
    20f0:	e7ed      	b.n	20ce <cosem_init4+0xae>
        break;
    case DLMS_OBJECT_TYPE_STATUS_MAPPING:
        break;
#ifndef DLMS_IGNORE_TCP_UDP_SETUP
    case DLMS_OBJECT_TYPE_TCP_UDP_SETUP:
        ((gxTcpUdpSetup*)object)->maximumSimultaneousConnections = 1;
    20f2:	2301      	movs	r3, #1
    20f4:	7623      	strb	r3, [r4, #24]
        ((gxTcpUdpSetup*)object)->maximumSegmentSize = 40;
    20f6:	2328      	movs	r3, #40	; 0x28
    20f8:	83a3      	strh	r3, [r4, #28]
        ((gxTcpUdpSetup*)object)->inactivityTimeout = 180;
    20fa:	23b4      	movs	r3, #180	; 0xb4
    20fc:	8363      	strh	r3, [r4, #26]
        break;
    20fe:	e7c5      	b.n	208c <cosem_init4+0x6c>
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    2100:	200b      	movs	r0, #11
        break;
    default:
        break;
    }
    return 0;
}
    2102:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    2104:	200c      	movs	r0, #12
    2106:	e7fc      	b.n	2102 <cosem_init4+0xe2>
    2108:	080502f4 	.word	0x080502f4
    210c:	00100078 	.word	0x00100078

00002110 <cosem_createObject>:
{
    2110:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char ln[] = { 0,0,40,0,0,255 };
    2112:	4b13      	ldr	r3, [pc, #76]	; (2160 <cosem_createObject+0x50>)
{
    2114:	4604      	mov	r4, r0
    unsigned char ln[] = { 0,0,40,0,0,255 };
    2116:	6818      	ldr	r0, [r3, #0]
    2118:	9000      	str	r0, [sp, #0]
    211a:	889b      	ldrh	r3, [r3, #4]
    211c:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t size = cosem_getObjectSize(type);
    2120:	4620      	mov	r0, r4
{
    2122:	460d      	mov	r5, r1
    uint16_t size = cosem_getObjectSize(type);
    2124:	f00c fe62 	bl	edec <cosem_getObjectSize>
    if (size == 0)
    2128:	4601      	mov	r1, r0
    212a:	b198      	cbz	r0, 2154 <cosem_createObject+0x44>
    *object = (gxObject*)gxcalloc(1, size);
    212c:	2001      	movs	r0, #1
    212e:	f00b f8d9 	bl	d2e4 <calloc>
    2132:	6028      	str	r0, [r5, #0]
    if (*object == NULL)
    2134:	b180      	cbz	r0, 2158 <cosem_createObject+0x48>
    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    2136:	2c0f      	cmp	r4, #15
    (*object)->objectType = type;
    2138:	8004      	strh	r4, [r0, #0]
    if (type == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    213a:	d005      	beq.n	2148 <cosem_createObject+0x38>
    else if (type == DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME)
    213c:	2c0c      	cmp	r4, #12
        memset(ln, 0, 6);
    213e:	bf1e      	ittt	ne
    2140:	2300      	movne	r3, #0
    2142:	9300      	strne	r3, [sp, #0]
    2144:	f8ad 3004 	strhne.w	r3, [sp, #4]
    ret = cosem_init2(*object, type, ln);
    2148:	466a      	mov	r2, sp
    214a:	4621      	mov	r1, r4
    214c:	f00c fec1 	bl	eed2 <cosem_init2>
}
    2150:	b003      	add	sp, #12
    2152:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNAVAILABLE_OBJECT;
    2154:	200b      	movs	r0, #11
    2156:	e7fb      	b.n	2150 <cosem_createObject+0x40>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    2158:	f44f 7082 	mov.w	r0, #260	; 0x104
    215c:	e7f8      	b.n	2150 <cosem_createObject+0x40>
    215e:	bf00      	nop
    2160:	0001ec80 	.word	0x0001ec80

00002164 <cosem_findObjectByLN>:
int cosem_findObjectByLN(
    dlmsSettings* settings,
    DLMS_OBJECT_TYPE ot,
    const unsigned char* ln,
    gxObject** object)
{
    2164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2168:	4690      	mov	r8, r2
    216a:	4606      	mov	r6, r0
    216c:	460f      	mov	r7, r1
    int ret;
    if (memcmp(ln, EMPTY_LN, sizeof(EMPTY_LN)) != 0)
    216e:	2206      	movs	r2, #6
    2170:	491a      	ldr	r1, [pc, #104]	; (21dc <cosem_findObjectByLN+0x78>)
    2172:	4640      	mov	r0, r8
{
    2174:	461d      	mov	r5, r3
    if (memcmp(ln, EMPTY_LN, sizeof(EMPTY_LN)) != 0)
    2176:	f01c f836 	bl	1e1e6 <memcmp>
    217a:	4604      	mov	r4, r0
    217c:	b350      	cbz	r0, 21d4 <cosem_findObjectByLN+0x70>
    {
        if ((ret = oa_findByLN(&settings->objects, ot, ln, object)) == 0)
    217e:	462b      	mov	r3, r5
    2180:	4642      	mov	r2, r8
    2182:	4639      	mov	r1, r7
    2184:	f106 0098 	add.w	r0, r6, #152	; 0x98
    2188:	f019 fd30 	bl	1bbec <oa_findByLN>
    218c:	4604      	mov	r4, r0
    218e:	b9f0      	cbnz	r0, 21ce <cosem_findObjectByLN+0x6a>
        {
#ifndef DLMS_IGNORE_MALLOC
            if (*object == NULL)
    2190:	682b      	ldr	r3, [r5, #0]
    2192:	b9e3      	cbnz	r3, 21ce <cosem_findObjectByLN+0x6a>
            {
                if ((ret = oa_findByLN(&settings->releasedObjects, ot, ln, object)) == 0)
    2194:	36e4      	adds	r6, #228	; 0xe4
    2196:	462b      	mov	r3, r5
    2198:	4642      	mov	r2, r8
    219a:	4639      	mov	r1, r7
    219c:	4630      	mov	r0, r6
    219e:	f019 fd25 	bl	1bbec <oa_findByLN>
    21a2:	b9c8      	cbnz	r0, 21d8 <cosem_findObjectByLN+0x74>
                {
                    if (*object == NULL && ot != DLMS_OBJECT_TYPE_NONE)
    21a4:	682b      	ldr	r3, [r5, #0]
    21a6:	b993      	cbnz	r3, 21ce <cosem_findObjectByLN+0x6a>
    21a8:	b18f      	cbz	r7, 21ce <cosem_findObjectByLN+0x6a>
                    {
                        if ((ret = cosem_createObject(ot, object)) == 0)
    21aa:	4629      	mov	r1, r5
    21ac:	4638      	mov	r0, r7
    21ae:	f7ff ffaf 	bl	2110 <cosem_createObject>
    21b2:	4604      	mov	r4, r0
    21b4:	b958      	cbnz	r0, 21ce <cosem_findObjectByLN+0x6a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    21b6:	682b      	ldr	r3, [r5, #0]
    21b8:	f8d8 2000 	ldr.w	r2, [r8]
    21bc:	f8c3 2006 	str.w	r2, [r3, #6]
    21c0:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    21c4:	815a      	strh	r2, [r3, #10]
                        {
                            memcpy((*object)->logicalName, ln, 6);
                            oa_push(&settings->releasedObjects, *object);
    21c6:	6829      	ldr	r1, [r5, #0]
    21c8:	4630      	mov	r0, r6
    21ca:	f019 fc80 	bl	1bace <oa_push>
    {
        *object = NULL;
        ret = 0;
    }
    return ret;
    21ce:	4620      	mov	r0, r4
    21d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *object = NULL;
    21d4:	6028      	str	r0, [r5, #0]
        ret = 0;
    21d6:	e7fa      	b.n	21ce <cosem_findObjectByLN+0x6a>
    21d8:	4604      	mov	r4, r0
    return ret;
    21da:	e7f8      	b.n	21ce <cosem_findObjectByLN+0x6a>
    21dc:	0001f935 	.word	0x0001f935

000021e0 <time_init>:
    unsigned char hour,
    unsigned char minute,
    unsigned char second,
    uint16_t millisecond,
    signed short devitation)
{
    21e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (devitation == -1)
    {
        devitation = 0x8000;
    21e2:	4c50      	ldr	r4, [pc, #320]	; (2324 <time_init+0x144>)
{
    21e4:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
    21e8:	f89d 6014 	ldrb.w	r6, [sp, #20]
    21ec:	f89d c018 	ldrb.w	ip, [sp, #24]
    21f0:	f89d 701c 	ldrb.w	r7, [sp, #28]
        devitation = 0x8000;
    21f4:	f1b5 3fff 	cmp.w	r5, #4294967295
    21f8:	bf08      	it	eq
    21fa:	4625      	moveq	r5, r4
    }
#ifdef DLMS_USE_EPOCH_TIME
    //multiply to tmp variable or it'll fails for some compilers.
    uint32_t tmp;
    //January and February are counted as months 13 and 14 of the previous year
    if (month != 0xFF && month <= 2)
    21fc:	2a02      	cmp	r2, #2
    21fe:	d80a      	bhi.n	2216 <time_init+0x36>
    {
        month += 12;
        if (year != 0xFFFF)
    2200:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2204:	42a1      	cmp	r1, r4
        month += 12;
    2206:	f102 020c 	add.w	r2, r2, #12
        {
            year -= 1;
    220a:	bf18      	it	ne
    220c:	f101 31ff 	addne.w	r1, r1, #4294967295
        month += 12;
    2210:	b2d2      	uxtb	r2, r2
            year -= 1;
    2212:	bf18      	it	ne
    2214:	b289      	uxthne	r1, r1
        }
    }
    time->skip = DATETIME_SKIPS_NONE;
    2216:	2400      	movs	r4, #0
    2218:	80c4      	strh	r4, [r0, #6]
    time->status = DLMS_CLOCK_STATUS_OK;
    time->extraInfo = 0;
    221a:	8104      	strh	r4, [r0, #8]
    //Convert years to days
    time->value = 0;
    if (year == 0xFFFF)
    221c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    2220:	42a1      	cmp	r1, r4
    {
        time->skip = (unsigned char)(DATETIME_SKIPS_YEAR | DATETIME_SKIPS_DEVITATION);
    2222:	bf02      	ittt	eq
    2224:	2101      	moveq	r1, #1
    2226:	80c1      	strheq	r1, [r0, #6]
        year = 1970;
    2228:	f240 71b2 	movweq	r1, #1970	; 0x7b2
    }
    time->value = year;
    time->value *= 365L;
    tmp = year;
    tmp /= 4L;
    222c:	ea4f 0e91 	mov.w	lr, r1, lsr #2
    tmp = year;
    tmp /= 100L;
    time->value -= tmp;
    tmp = year;
    tmp /= 400L;
    time->value += tmp;
    2230:	f240 146d 	movw	r4, #365	; 0x16d
    2234:	fb04 e401 	mla	r4, r4, r1, lr
    //Convert months to days
    if (month == 0xFF)
    2238:	2aff      	cmp	r2, #255	; 0xff
    tmp /= 400L;
    223a:	f44f 7ec8 	mov.w	lr, #400	; 0x190
    223e:	fbb1 fefe 	udiv	lr, r1, lr
    time->value += tmp;
    2242:	4474      	add	r4, lr
    tmp /= 100L;
    2244:	f04f 0e64 	mov.w	lr, #100	; 0x64
    2248:	fbb1 f1fe 	udiv	r1, r1, lr
    time->value += tmp;
    224c:	eba4 0101 	sub.w	r1, r4, r1
    if (month == 0xFF)
    2250:	d105      	bne.n	225e <time_init+0x7e>
    {
        time->skip |= DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DEVITATION;
    2252:	88c2      	ldrh	r2, [r0, #6]
    2254:	f442 7281 	orr.w	r2, r2, #258	; 0x102
    2258:	80c2      	strh	r2, [r0, #6]
        month = 1;
    }
    else if (month == 0xFD)
    {
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_END;
        month = 1;
    225a:	2201      	movs	r2, #1
    225c:	e003      	b.n	2266 <time_init+0x86>
    else if (month == 0xFE)
    225e:	2afe      	cmp	r2, #254	; 0xfe
    2260:	d14f      	bne.n	2302 <time_init+0x122>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN;
    2262:	2201      	movs	r2, #1
    2264:	7202      	strb	r2, [r0, #8]
    }
    if (day == 0xFF)
    2266:	2bff      	cmp	r3, #255	; 0xff
    2268:	d150      	bne.n	230c <time_init+0x12c>
    {
        time->skip |= DATETIME_SKIPS_DAY | DATETIME_SKIPS_DEVITATION;
    226a:	88c3      	ldrh	r3, [r0, #6]
    226c:	f443 7382 	orr.w	r3, r3, #260	; 0x104
    2270:	80c3      	strh	r3, [r0, #6]
        day = 1;
    }
    else if (day == 0xFD)
    {
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
        day = 1;
    2272:	2301      	movs	r3, #1
    }
    tmp = month;
    tmp *= 30L;
    time->value += tmp;
    tmp = 1 + month;
    2274:	1c54      	adds	r4, r2, #1
    tmp = tmp * 3L;
    2276:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
    time->value += tmp;
    227a:	241e      	movs	r4, #30
    227c:	fb14 1202 	smlabb	r2, r4, r2, r1
    tmp = tmp / 5L;
    2280:	2405      	movs	r4, #5
    2282:	fbbe f4f4 	udiv	r4, lr, r4
    time->value += tmp;
    2286:	4422      	add	r2, r4
    time->value += day;
    2288:	4413      	add	r3, r2
    //Unix time starts on January 1st, 1970
    if (time->value < 719561)
    228a:	4a27      	ldr	r2, [pc, #156]	; (2328 <time_init+0x148>)
    228c:	4293      	cmp	r3, r2
    228e:	d905      	bls.n	229c <time_init+0xbc>
    {
        time->value = 0;
    }
    else
    {
        time->value -= 719561L;
    2290:	f5a3 232f 	sub.w	r3, r3, #716800	; 0xaf000
    2294:	f6a3 23c9 	subw	r3, r3, #2761	; 0xac9
    }
    //Convert days to seconds
    if (time->value != 0)
    2298:	2b00      	cmp	r3, #0
    229a:	d140      	bne.n	231e <time_init+0x13e>
    229c:	2300      	movs	r3, #0
    {
        time->value *= 86400L;
    229e:	6003      	str	r3, [r0, #0]
    }
    //Add hours, minutes and seconds
    if (hour != 0xFF)
    22a0:	2eff      	cmp	r6, #255	; 0xff
    {
        time->value += (3600L * hour);
    }
    else
    {
        time->skip |= DATETIME_SKIPS_HOUR;
    22a2:	bf0c      	ite	eq
    22a4:	88c3      	ldrheq	r3, [r0, #6]
        time->value += (3600L * hour);
    22a6:	6803      	ldrne	r3, [r0, #0]
    time->skip |= DATETIME_SKIPS_MS;
    if (devitation == (short)0x8000)
    {
        time->skip |= DATETIME_SKIPS_DEVITATION;
    }
    time->deviation = devitation;
    22a8:	8085      	strh	r5, [r0, #4]
        time->value += (3600L * hour);
    22aa:	bf15      	itete	ne
    22ac:	f44f 6261 	movne.w	r2, #3600	; 0xe10
        time->skip |= DATETIME_SKIPS_HOUR;
    22b0:	f043 0310 	orreq.w	r3, r3, #16
        time->value += (3600L * hour);
    22b4:	fb02 3606 	mlane	r6, r2, r6, r3
        time->skip |= DATETIME_SKIPS_HOUR;
    22b8:	80c3      	strheq	r3, [r0, #6]
        time->value += (3600L * hour);
    22ba:	bf18      	it	ne
    22bc:	6006      	strne	r6, [r0, #0]
    if (minute != 0xFF)
    22be:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
        time->skip |= DATETIME_SKIPS_MINUTE;
    22c2:	bf0d      	iteet	eq
    22c4:	88c3      	ldrheq	r3, [r0, #6]
        time->value += (60L * minute);
    22c6:	6802      	ldrne	r2, [r0, #0]
    22c8:	233c      	movne	r3, #60	; 0x3c
        time->skip |= DATETIME_SKIPS_MINUTE;
    22ca:	f043 0320 	orreq.w	r3, r3, #32
        time->value += (60L * minute);
    22ce:	bf16      	itet	ne
    22d0:	fb13 230c 	smlabbne	r3, r3, ip, r2
        time->skip |= DATETIME_SKIPS_MINUTE;
    22d4:	80c3      	strheq	r3, [r0, #6]
        time->value += (60L * minute);
    22d6:	6003      	strne	r3, [r0, #0]
    if (second != 0xFF)
    22d8:	2fff      	cmp	r7, #255	; 0xff
        time->skip |= DATETIME_SKIPS_SECOND;
    22da:	bf09      	itett	eq
    22dc:	88c3      	ldrheq	r3, [r0, #6]
        time->value += second;
    22de:	6803      	ldrne	r3, [r0, #0]
        time->skip |= DATETIME_SKIPS_SECOND;
    22e0:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    22e4:	80c3      	strheq	r3, [r0, #6]
        time->value += second;
    22e6:	bf18      	it	ne
    22e8:	18ff      	addne	r7, r7, r3
    time->skip |= DATETIME_SKIPS_MS;
    22ea:	88c3      	ldrh	r3, [r0, #6]
        time->value += second;
    22ec:	bf18      	it	ne
    22ee:	6007      	strne	r7, [r0, #0]
    if (devitation == (short)0x8000)
    22f0:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
    time->skip |= DATETIME_SKIPS_MS;
    22f4:	bf14      	ite	ne
    22f6:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        time->skip |= DATETIME_SKIPS_DEVITATION;
    22fa:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
    22fe:	80c3      	strh	r3, [r0, #6]
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
        assert(0);
#endif
    }
#endif //DLMS_USE_EPOCH_TIME
}
    2300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (month == 0xFD)
    2302:	2afd      	cmp	r2, #253	; 0xfd
    2304:	d1af      	bne.n	2266 <time_init+0x86>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_DST_END;
    2306:	2202      	movs	r2, #2
    2308:	7202      	strb	r2, [r0, #8]
    230a:	e7a6      	b.n	225a <time_init+0x7a>
    else if (day == 0xFE)
    230c:	2bfe      	cmp	r3, #254	; 0xfe
    230e:	d102      	bne.n	2316 <time_init+0x136>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY;
    2310:	2304      	movs	r3, #4
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
    2312:	7203      	strb	r3, [r0, #8]
    2314:	e7ad      	b.n	2272 <time_init+0x92>
    else if (day == 0xFD)
    2316:	2bfd      	cmp	r3, #253	; 0xfd
    2318:	d1ac      	bne.n	2274 <time_init+0x94>
        time->extraInfo = DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2;
    231a:	2308      	movs	r3, #8
    231c:	e7f9      	b.n	2312 <time_init+0x132>
        time->value *= 86400L;
    231e:	4a03      	ldr	r2, [pc, #12]	; (232c <time_init+0x14c>)
    2320:	4353      	muls	r3, r2
    2322:	e7bc      	b.n	229e <time_init+0xbe>
    2324:	ffff8000 	.word	0xffff8000
    2328:	000afac8 	.word	0x000afac8
    232c:	00015180 	.word	0x00015180

00002330 <time_getYears2>:

uint16_t time_getYears2(
    uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    2330:	4b17      	ldr	r3, [pc, #92]	; (2390 <time_getYears2+0x60>)
    2332:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2336:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    233a:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    233c:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2340:	4a14      	ldr	r2, [pc, #80]	; (2394 <time_getYears2+0x64>)
    2342:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2344:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2348:	fbb3 f3f2 	udiv	r3, r3, r2
    234c:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    234e:	4418      	add	r0, r3
    2350:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    2354:	2214      	movs	r2, #20
    2356:	4342      	muls	r2, r0
    2358:	f6a2 128a 	subw	r2, r2, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    235c:	f247 2124 	movw	r1, #29220	; 0x7224
    uint32_t c = (20 * b - 2442) / 7305;
    2360:	f641 4389 	movw	r3, #7305	; 0x1c89
    2364:	fbb2 f3f3 	udiv	r3, r2, r3
    uint32_t d = b - 365 * c - (c / 4);
    2368:	fbb2 f2f1 	udiv	r2, r2, r1
    236c:	1a80      	subs	r0, r0, r2
    236e:	f240 126d 	movw	r2, #365	; 0x16d
    2372:	fb02 0213 	mls	r2, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    2376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    237a:	4350      	muls	r0, r2
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    237c:	4a06      	ldr	r2, [pc, #24]	; (2398 <time_getYears2+0x68>)
    237e:	4290      	cmp	r0, r2
    2380:	f5a3 5093 	sub.w	r0, r3, #4704	; 0x1260
    {
        c -= 4716;
    2384:	bf94      	ite	ls
    2386:	380c      	subls	r0, #12
    }
    else
    {
        c -= 4715;
    2388:	380b      	subhi	r0, #11
    }
    return (uint16_t)c;
}
    238a:	b280      	uxth	r0, r0
    238c:	4770      	bx	lr
    238e:	bf00      	nop
    2390:	00015180 	.word	0x00015180
    2394:	00023ab1 	.word	0x00023ab1
    2398:	0006897d 	.word	0x0006897d

0000239c <time_getMonths2>:

unsigned char time_getMonths2(
    uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    239c:	4b18      	ldr	r3, [pc, #96]	; (2400 <time_getMonths2+0x64>)
    239e:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    23a2:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    23a6:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    23a8:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    23ac:	4a15      	ldr	r2, [pc, #84]	; (2404 <time_getMonths2+0x68>)
    23ae:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    23b0:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    23b4:	fbb3 f3f2 	udiv	r3, r3, r2
    23b8:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    23ba:	4418      	add	r0, r3
    23bc:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    23c0:	2314      	movs	r3, #20
    23c2:	4343      	muls	r3, r0
    23c4:	f6a3 138a 	subw	r3, r3, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    23c8:	f247 2224 	movw	r2, #29220	; 0x7224
    23cc:	fbb3 f2f2 	udiv	r2, r3, r2
    23d0:	1a80      	subs	r0, r0, r2
    uint32_t c = (20 * b - 2442) / 7305;
    23d2:	f641 4289 	movw	r2, #7305	; 0x1c89
    23d6:	fbb3 f3f2 	udiv	r3, r3, r2
    uint32_t d = b - 365 * c - (c / 4);
    23da:	f240 126d 	movw	r2, #365	; 0x16d
    23de:	fb02 0013 	mls	r0, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    23e2:	4a09      	ldr	r2, [pc, #36]	; (2408 <time_getMonths2+0x6c>)
    uint32_t e = d * 1000 / 30601;
    23e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    23e8:	4343      	muls	r3, r0
    if (e <= 13)
    23ea:	4293      	cmp	r3, r2
    uint32_t e = d * 1000 / 30601;
    23ec:	f247 7089 	movw	r0, #30601	; 0x7789
    23f0:	fbb3 f0f0 	udiv	r0, r3, r0
    {
        e -= 1;
    23f4:	bf94      	ite	ls
    23f6:	f100 30ff 	addls.w	r0, r0, #4294967295
    }
    else
    {
        e -= 13;
    23fa:	380d      	subhi	r0, #13
    }
    return (unsigned char)e;
}
    23fc:	b2c0      	uxtb	r0, r0
    23fe:	4770      	bx	lr
    2400:	00015180 	.word	0x00015180
    2404:	00023ab1 	.word	0x00023ab1
    2408:	0006897d 	.word	0x0006897d

0000240c <time_getDays2>:
}

unsigned char time_getDays2(uint32_t value)
{
    //remove hours, minutes and seconds
    value /= 86400;
    240c:	4b1a      	ldr	r3, [pc, #104]	; (2478 <time_getDays2+0x6c>)
    240e:	fbb0 f0f3 	udiv	r0, r0, r3
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2412:	f500 43c7 	add.w	r3, r0, #25472	; 0x6380
    2416:	3324      	adds	r3, #36	; 0x24
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2418:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    241c:	4a17      	ldr	r2, [pc, #92]	; (247c <time_getDays2+0x70>)
    241e:	009b      	lsls	r3, r3, #2
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    2420:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * value + 102032) / 146097 + 15);
    2424:	fbb3 f3f2 	udiv	r3, r3, r2
    2428:	330f      	adds	r3, #15
    uint32_t b = (uint32_t)(value + 2442113 + a - (a / 4));
    242a:	4418      	add	r0, r3
    242c:	eba0 0093 	sub.w	r0, r0, r3, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    2430:	2314      	movs	r3, #20
    2432:	4343      	muls	r3, r0
    2434:	f6a3 138a 	subw	r3, r3, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    2438:	f247 2224 	movw	r2, #29220	; 0x7224
    243c:	fbb3 f2f2 	udiv	r2, r3, r2
    2440:	1a80      	subs	r0, r0, r2
    uint32_t c = (20 * b - 2442) / 7305;
    2442:	f641 4289 	movw	r2, #7305	; 0x1c89
    2446:	fbb3 f3f2 	udiv	r3, r3, r2
    uint32_t d = b - 365 * c - (c / 4);
    244a:	f240 126d 	movw	r2, #365	; 0x16d
    244e:	fb02 0013 	mls	r0, r2, r3, r0
    uint32_t e = d * 1000 / 30601;
    2452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2456:	fb01 f300 	mul.w	r3, r1, r0
    245a:	f247 7289 	movw	r2, #30601	; 0x7789
    245e:	fbb3 f2f2 	udiv	r2, r3, r2
    uint32_t f = d - e * 30 - e * 601 / 1000;
    2462:	231e      	movs	r3, #30
    2464:	fb03 0012 	mls	r0, r3, r2, r0
    2468:	f240 2359 	movw	r3, #601	; 0x259
    246c:	4353      	muls	r3, r2
    246e:	fbb3 f3f1 	udiv	r3, r3, r1
    2472:	1ac0      	subs	r0, r0, r3
    return (unsigned char)f;
}
    2474:	b2c0      	uxtb	r0, r0
    2476:	4770      	bx	lr
    2478:	00015180 	.word	0x00015180
    247c:	00023ab1 	.word	0x00023ab1

00002480 <time_getHours>:

unsigned char time_getHours(
    const gxtime* value)
{
#ifdef DLMS_USE_EPOCH_TIME
    return (unsigned char)((value->value % 86400L) / 3600L);
    2480:	6802      	ldr	r2, [r0, #0]
    2482:	4b05      	ldr	r3, [pc, #20]	; (2498 <time_getHours+0x18>)
    2484:	fbb2 f0f3 	udiv	r0, r2, r3
    2488:	fb03 2010 	mls	r0, r3, r0, r2
    248c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    2490:	fbb0 f0f3 	udiv	r0, r0, r3
#else
    return (unsigned char) value->value.tm_hour;
#endif // DLMS_USE_EPOCH_TIME
}
    2494:	b2c0      	uxtb	r0, r0
    2496:	4770      	bx	lr
    2498:	00015180 	.word	0x00015180

0000249c <time_fromUnixTime2>:
    unsigned char* day,
    unsigned char* hour,
    unsigned char* minute,
    unsigned char* second,
    unsigned char* dayOfWeek)
{
    249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    249e:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
    24a2:	460e      	mov	r6, r1
    24a4:	e9dd 7c06 	ldrd	r7, ip, [sp, #24]
    24a8:	4611      	mov	r1, r2
    //Retrieve hours, minutes and seconds
    if (second != NULL)
    24aa:	b135      	cbz	r5, 24ba <time_fromUnixTime2+0x1e>
    {
        *second = epoch % 60;
    24ac:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    24b0:	fbb0 f2fe 	udiv	r2, r0, lr
    24b4:	fb0e 0212 	mls	r2, lr, r2, r0
    24b8:	702a      	strb	r2, [r5, #0]
    }
    epoch /= 60;
    24ba:	253c      	movs	r5, #60	; 0x3c
    24bc:	fbb0 f0f5 	udiv	r0, r0, r5
    if (minute != NULL)
    24c0:	f1bc 0f00 	cmp.w	ip, #0
    24c4:	d005      	beq.n	24d2 <time_fromUnixTime2+0x36>
    {
        *minute = epoch % 60;
    24c6:	fbb0 f2f5 	udiv	r2, r0, r5
    24ca:	fb05 0212 	mls	r2, r5, r2, r0
    24ce:	f88c 2000 	strb.w	r2, [ip]
    }
    epoch /= 60;
    24d2:	223c      	movs	r2, #60	; 0x3c
    24d4:	fbb0 f0f2 	udiv	r0, r0, r2
    if (hour != NULL)
    24d8:	b12f      	cbz	r7, 24e6 <time_fromUnixTime2+0x4a>
    {
        *hour = epoch % 24;
    24da:	2518      	movs	r5, #24
    24dc:	fbb0 f2f5 	udiv	r2, r0, r5
    24e0:	fb05 0212 	mls	r2, r5, r2, r0
    24e4:	703a      	strb	r2, [r7, #0]
    }
    epoch /= 24;
    24e6:	2218      	movs	r2, #24
    24e8:	fbb0 f0f2 	udiv	r0, r0, r2
    //Convert Unix time to date
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    24ec:	f500 45c7 	add.w	r5, r0, #25472	; 0x6380
    24f0:	3524      	adds	r5, #36	; 0x24
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    24f2:	f500 1015 	add.w	r0, r0, #2441216	; 0x254000
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    24f6:	4a26      	ldr	r2, [pc, #152]	; (2590 <time_fromUnixTime2+0xf4>)
    uint32_t c = (20 * b - 2442) / 7305;
    uint32_t d = b - 365 * c - (c / 4);
    uint32_t e = d * 1000 / 30601;
    uint32_t f = d - e * 30 - e * 601 / 1000;
    //January and February are counted as months 13 and 14 of the previous year
    if (e <= 13)
    24f8:	f8df c098 	ldr.w	ip, [pc, #152]	; 2594 <time_fromUnixTime2+0xf8>
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    24fc:	00ad      	lsls	r5, r5, #2
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    24fe:	f200 3081 	addw	r0, r0, #897	; 0x381
    uint32_t a = (uint32_t)((4 * epoch + 102032) / 146097 + 15);
    2502:	fbb5 f5f2 	udiv	r5, r5, r2
    2506:	350f      	adds	r5, #15
    uint32_t b = (uint32_t)(epoch + 2442113 + a - (a / 4));
    2508:	4428      	add	r0, r5
    250a:	eba0 0095 	sub.w	r0, r0, r5, lsr #2
    uint32_t c = (20 * b - 2442) / 7305;
    250e:	2514      	movs	r5, #20
    2510:	4345      	muls	r5, r0
    2512:	f6a5 158a 	subw	r5, r5, #2442	; 0x98a
    uint32_t d = b - 365 * c - (c / 4);
    2516:	f247 2724 	movw	r7, #29220	; 0x7224
    uint32_t c = (20 * b - 2442) / 7305;
    251a:	f641 4289 	movw	r2, #7305	; 0x1c89
    251e:	fbb5 f2f2 	udiv	r2, r5, r2
    uint32_t d = b - 365 * c - (c / 4);
    2522:	fbb5 f5f7 	udiv	r5, r5, r7
    2526:	f240 176d 	movw	r7, #365	; 0x16d
    252a:	1b40      	subs	r0, r0, r5
    252c:	fb07 0712 	mls	r7, r7, r2, r0
    uint32_t e = d * 1000 / 30601;
    2530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2534:	4378      	muls	r0, r7
    if (e <= 13)
    2536:	4560      	cmp	r0, ip
    2538:	f5a2 5293 	sub.w	r2, r2, #4704	; 0x1260
    uint32_t e = d * 1000 / 30601;
    253c:	f247 7589 	movw	r5, #30601	; 0x7789
    {
        c -= 4716;
    2540:	bf98      	it	ls
    2542:	3a0c      	subls	r2, #12
    uint32_t e = d * 1000 / 30601;
    2544:	fbb0 f5f5 	udiv	r5, r0, r5
        e -= 1;
    }
    else
    {
        c -= 4715;
    2548:	bf8a      	itet	hi
    254a:	3a0b      	subhi	r2, #11
        e -= 1;
    254c:	f105 30ff 	addls.w	r0, r5, #4294967295
        e -= 13;
    2550:	f1a5 000d 	subhi.w	r0, r5, #13
    }
    //Retrieve year, month and day
    if (year != NULL)
    2554:	b106      	cbz	r6, 2558 <time_fromUnixTime2+0xbc>
    {
        *year = (uint16_t)c;
    2556:	8032      	strh	r2, [r6, #0]
    }
    if (month != NULL)
    2558:	b101      	cbz	r1, 255c <time_fromUnixTime2+0xc0>
    {
        *month = (unsigned char)e;
    255a:	7008      	strb	r0, [r1, #0]
    }
    if (day != NULL)
    255c:	b15b      	cbz	r3, 2576 <time_fromUnixTime2+0xda>
    uint32_t f = d - e * 30 - e * 601 / 1000;
    255e:	201e      	movs	r0, #30
    2560:	fb00 7015 	mls	r0, r0, r5, r7
    2564:	f240 2259 	movw	r2, #601	; 0x259
    2568:	4355      	muls	r5, r2
    256a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    256e:	fbb5 f5f2 	udiv	r5, r5, r2
    2572:	1b40      	subs	r0, r0, r5
    {
        *day = (unsigned char)f;
    2574:	7018      	strb	r0, [r3, #0]
    }
    if (dayOfWeek != NULL && year != NULL && month != NULL && day != NULL)
    2576:	b144      	cbz	r4, 258a <time_fromUnixTime2+0xee>
    2578:	b13e      	cbz	r6, 258a <time_fromUnixTime2+0xee>
    257a:	b131      	cbz	r1, 258a <time_fromUnixTime2+0xee>
    257c:	b12b      	cbz	r3, 258a <time_fromUnixTime2+0xee>
    {
        //Calculate day of week
        *dayOfWeek = time_dayOfWeek(*year, *month, *day);
    257e:	781a      	ldrb	r2, [r3, #0]
    2580:	7809      	ldrb	r1, [r1, #0]
    2582:	8830      	ldrh	r0, [r6, #0]
    2584:	f00c ffff 	bl	f586 <time_dayOfWeek>
    2588:	7020      	strb	r0, [r4, #0]
    }
    return 0;
}
    258a:	2000      	movs	r0, #0
    258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    258e:	bf00      	nop
    2590:	00023ab1 	.word	0x00023ab1
    2594:	0006897d 	.word	0x0006897d

00002598 <time_toString>:
{
    2598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    259c:	b086      	sub	sp, #24
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    259e:	f10d 0315 	add.w	r3, sp, #21
    25a2:	9302      	str	r3, [sp, #8]
    25a4:	ab05      	add	r3, sp, #20
    uint16_t year = 0;
    25a6:	2400      	movs	r4, #0
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    25a8:	9301      	str	r3, [sp, #4]
    25aa:	f10d 0313 	add.w	r3, sp, #19
    25ae:	9300      	str	r3, [sp, #0]
{
    25b0:	4606      	mov	r6, r0
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    25b2:	9403      	str	r4, [sp, #12]
    25b4:	f10d 0312 	add.w	r3, sp, #18
    25b8:	f10d 0211 	add.w	r2, sp, #17
    25bc:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0;
    25be:	f8ad 4016 	strh.w	r4, [sp, #22]
{
    25c2:	460d      	mov	r5, r1
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    25c4:	f10d 0116 	add.w	r1, sp, #22
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0;
    25c8:	f88d 4011 	strb.w	r4, [sp, #17]
    25cc:	f88d 4012 	strb.w	r4, [sp, #18]
    25d0:	f88d 4013 	strb.w	r4, [sp, #19]
    25d4:	f88d 4014 	strb.w	r4, [sp, #20]
    25d8:	f88d 4015 	strb.w	r4, [sp, #21]
    time_fromUnixTime2(time->value, &year, &mon, &day, &hour, &min, &sec, NULL);
    25dc:	f7ff ff5e 	bl	249c <time_fromUnixTime2>
    if ((time->skip & (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY)) != (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY))
    25e0:	88f2      	ldrh	r2, [r6, #6]
    25e2:	f002 0307 	and.w	r3, r2, #7
    25e6:	2b07      	cmp	r3, #7
    25e8:	f000 80dd 	beq.w	27a6 <time_toString+0x20e>
            if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
    25ec:	7a33      	ldrb	r3, [r6, #8]
    25ee:	f013 0701 	ands.w	r7, r3, #1
    25f2:	d016      	beq.n	2622 <time_toString+0x8a>
                bb_addString(ba, GET_STR_FROM_EEPROM("BEGIN"));
    25f4:	497f      	ldr	r1, [pc, #508]	; (27f4 <time_toString+0x25c>)
    25f6:	4628      	mov	r0, r5
    25f8:	f00c f83a 	bl	e670 <bb_addString>
            if ((time->skip & DATETIME_SKIPS_DAY) == 0)
    25fc:	88f3      	ldrh	r3, [r6, #6]
    25fe:	0759      	lsls	r1, r3, #29
    2600:	f100 80ac 	bmi.w	275c <time_toString+0x1c4>
                if (!empty)
    2604:	b91c      	cbnz	r4, 260e <time_toString+0x76>
                    bb_setUInt8(ba, separator);
    2606:	212f      	movs	r1, #47	; 0x2f
    2608:	4628      	mov	r0, r5
    260a:	f00b ff00 	bl	e40e <bb_setUInt8>
                if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    260e:	7a33      	ldrb	r3, [r6, #8]
    2610:	f013 0404 	ands.w	r4, r3, #4
    2614:	d023      	beq.n	265e <time_toString+0xc6>
                    bb_addString(ba, GET_STR_FROM_EEPROM("LASTDAY"));
    2616:	4978      	ldr	r1, [pc, #480]	; (27f8 <time_toString+0x260>)
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    2618:	4628      	mov	r0, r5
    261a:	f00c f829 	bl	e670 <bb_addString>
    261e:	2400      	movs	r4, #0
    2620:	e023      	b.n	266a <time_toString+0xd2>
            else if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
    2622:	f013 0402 	ands.w	r4, r3, #2
    2626:	d006      	beq.n	2636 <time_toString+0x9e>
                bb_addString(ba, GET_STR_FROM_EEPROM("END"));
    2628:	4974      	ldr	r1, [pc, #464]	; (27fc <time_toString+0x264>)
    262a:	4628      	mov	r0, r5
                empty = 0;
    262c:	463c      	mov	r4, r7
                bb_addString(ba, GET_STR_FROM_EEPROM("END"));
    262e:	f00c f81f 	bl	e670 <bb_addString>
                addDate = 1;
    2632:	2701      	movs	r7, #1
    2634:	e7e2      	b.n	25fc <time_toString+0x64>
            else if ((time->skip & DATETIME_SKIPS_MONTH) == 0)
    2636:	0790      	lsls	r0, r2, #30
    2638:	d407      	bmi.n	264a <time_toString+0xb2>
                bb_addIntAsString2(ba, mon, 2);
    263a:	f89d 1011 	ldrb.w	r1, [sp, #17]
    263e:	2202      	movs	r2, #2
    2640:	4628      	mov	r0, r5
    2642:	f00c f9b1 	bl	e9a8 <bb_addIntAsString2>
    unsigned char addDate = 0;
    2646:	4627      	mov	r7, r4
    2648:	e7d8      	b.n	25fc <time_toString+0x64>
            else if ((time->extraInfo & (DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY | DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2)) != 0)
    264a:	f013 070c 	ands.w	r7, r3, #12
    264e:	d004      	beq.n	265a <time_toString+0xc2>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    2650:	496b      	ldr	r1, [pc, #428]	; (2800 <time_toString+0x268>)
    2652:	4628      	mov	r0, r5
    2654:	f00c f80c 	bl	e670 <bb_addString>
    2658:	e7f5      	b.n	2646 <time_toString+0xae>
    unsigned char empty = 1;
    265a:	2401      	movs	r4, #1
    265c:	e7ce      	b.n	25fc <time_toString+0x64>
                else if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
    265e:	071a      	lsls	r2, r3, #28
    2660:	d575      	bpl.n	274e <time_toString+0x1b6>
                    bb_addString(ba, GET_STR_FROM_EEPROM("LASTDAY2"));
    2662:	4968      	ldr	r1, [pc, #416]	; (2804 <time_toString+0x26c>)
    2664:	4628      	mov	r0, r5
    2666:	f00c f803 	bl	e670 <bb_addString>
            if ((time->skip & DATETIME_SKIPS_YEAR) == 0)
    266a:	88f3      	ldrh	r3, [r6, #6]
    266c:	07db      	lsls	r3, r3, #31
    266e:	f100 8088 	bmi.w	2782 <time_toString+0x1ea>
                if (!empty)
    2672:	2c00      	cmp	r4, #0
    2674:	d07b      	beq.n	276e <time_toString+0x1d6>
                bb_addIntAsString(ba, (time->skip& DATETIME_SKIPS_YEAR) == 0 ? year : 0);
    2676:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    267a:	4628      	mov	r0, r5
    267c:	f00c f9a4 	bl	e9c8 <bb_addIntAsString>
    2680:	2400      	movs	r4, #0
    unsigned char addTime = (time->skip & (DATETIME_SKIPS_HOUR | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_SECOND)) != 0;
    2682:	88f7      	ldrh	r7, [r6, #6]
    2684:	f007 0770 	and.w	r7, r7, #112	; 0x70
    if (!empty)
    2688:	b91c      	cbnz	r4, 2692 <time_toString+0xfa>
        bb_setUInt8(ba, ' ');
    268a:	2120      	movs	r1, #32
    268c:	4628      	mov	r0, r5
    268e:	f00b febe 	bl	e40e <bb_setUInt8>
    if ((time->skip & DATETIME_SKIPS_HOUR) == 0)
    2692:	88f3      	ldrh	r3, [r6, #6]
    2694:	f013 0810 	ands.w	r8, r3, #16
    2698:	f040 8087 	bne.w	27aa <time_toString+0x212>
        bb_addIntAsString2(ba, hour, 2);
    269c:	f89d 1013 	ldrb.w	r1, [sp, #19]
    26a0:	2202      	movs	r2, #2
    26a2:	4628      	mov	r0, r5
    26a4:	f00c f980 	bl	e9a8 <bb_addIntAsString2>
        bb_setUInt8(ba, '*');
    26a8:	2400      	movs	r4, #0
    if ((time->skip & DATETIME_SKIPS_MINUTE) == 0)
    26aa:	88f3      	ldrh	r3, [r6, #6]
    26ac:	0699      	lsls	r1, r3, #26
    26ae:	f100 8089 	bmi.w	27c4 <time_toString+0x22c>
        if (!empty)
    26b2:	b91c      	cbnz	r4, 26bc <time_toString+0x124>
            bb_setUInt8(ba, ':');
    26b4:	213a      	movs	r1, #58	; 0x3a
    26b6:	4628      	mov	r0, r5
    26b8:	f00b fea9 	bl	e40e <bb_setUInt8>
        bb_addIntAsString2(ba, min, 2);
    26bc:	f89d 1014 	ldrb.w	r1, [sp, #20]
    26c0:	2202      	movs	r2, #2
    26c2:	4628      	mov	r0, r5
    26c4:	f00c f970 	bl	e9a8 <bb_addIntAsString2>
        bb_setUInt8(ba, '*');
    26c8:	2400      	movs	r4, #0
    if ((time->skip & DATETIME_SKIPS_SECOND) == 0)
    26ca:	88f3      	ldrh	r3, [r6, #6]
    26cc:	065a      	lsls	r2, r3, #25
    26ce:	f100 8085 	bmi.w	27dc <time_toString+0x244>
        if (!empty)
    26d2:	b91c      	cbnz	r4, 26dc <time_toString+0x144>
            bb_setUInt8(ba, ':');
    26d4:	213a      	movs	r1, #58	; 0x3a
    26d6:	4628      	mov	r0, r5
    26d8:	f00b fe99 	bl	e40e <bb_setUInt8>
        bb_addIntAsString2(ba, sec, 2);
    26dc:	f89d 1015 	ldrb.w	r1, [sp, #21]
    26e0:	2202      	movs	r2, #2
    26e2:	4628      	mov	r0, r5
    26e4:	f00c f960 	bl	e9a8 <bb_addIntAsString2>
    if (time->deviation != (short)0x8000 && (time->skip & DATETIME_SKIPS_DEVITATION) == 0)
    26e8:	f9b6 4004 	ldrsh.w	r4, [r6, #4]
    26ec:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
    26f0:	d022      	beq.n	2738 <time_toString+0x1a0>
    26f2:	88f3      	ldrh	r3, [r6, #6]
    26f4:	05db      	lsls	r3, r3, #23
    26f6:	d41f      	bmi.n	2738 <time_toString+0x1a0>
        tmp = -tmp;
    26f8:	4264      	negs	r4, r4
        bb_addString(ba, " UTC");
    26fa:	4943      	ldr	r1, [pc, #268]	; (2808 <time_toString+0x270>)
        tmp = -tmp;
    26fc:	b224      	sxth	r4, r4
        bb_addString(ba, " UTC");
    26fe:	4628      	mov	r0, r5
    2700:	f00b ffb6 	bl	e670 <bb_addString>
        if (tmp < 0)
    2704:	2c00      	cmp	r4, #0
            bb_addString(ba, "-");
    2706:	bfb4      	ite	lt
    2708:	4940      	ldrlt	r1, [pc, #256]	; (280c <time_toString+0x274>)
            bb_addString(ba, "+");
    270a:	4941      	ldrge	r1, [pc, #260]	; (2810 <time_toString+0x278>)
    270c:	4628      	mov	r0, r5
    270e:	f00b ffaf 	bl	e670 <bb_addString>
        bb_addIntAsString2(ba, (int)(tmp / 60), 2);
    2712:	273c      	movs	r7, #60	; 0x3c
    2714:	2202      	movs	r2, #2
    2716:	fb94 f6f7 	sdiv	r6, r4, r7
    271a:	4628      	mov	r0, r5
    271c:	4631      	mov	r1, r6
    271e:	f00c f943 	bl	e9a8 <bb_addIntAsString2>
        bb_addString(ba, ":");
    2722:	493c      	ldr	r1, [pc, #240]	; (2814 <time_toString+0x27c>)
    2724:	4628      	mov	r0, r5
    2726:	f00b ffa3 	bl	e670 <bb_addString>
        bb_addIntAsString2(ba, (int)(tmp % 60), 2);
    272a:	fb07 4116 	mls	r1, r7, r6, r4
    272e:	2202      	movs	r2, #2
    2730:	b209      	sxth	r1, r1
    2732:	4628      	mov	r0, r5
    2734:	f00c f938 	bl	e9a8 <bb_addIntAsString2>
    bb_setUInt8(ba, '\0');
    2738:	2100      	movs	r1, #0
    273a:	4628      	mov	r0, r5
    273c:	f00b fe67 	bl	e40e <bb_setUInt8>
    --ba->size;
    2740:	88eb      	ldrh	r3, [r5, #6]
}
    2742:	2000      	movs	r0, #0
    --ba->size;
    2744:	3b01      	subs	r3, #1
    2746:	80eb      	strh	r3, [r5, #6]
}
    2748:	b006      	add	sp, #24
    274a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    bb_addIntAsString2(ba, day, 2);
    274e:	f89d 1012 	ldrb.w	r1, [sp, #18]
    2752:	2202      	movs	r2, #2
    2754:	4628      	mov	r0, r5
    2756:	f00c f927 	bl	e9a8 <bb_addIntAsString2>
    275a:	e786      	b.n	266a <time_toString+0xd2>
            else if (addDate)
    275c:	2f00      	cmp	r7, #0
    275e:	d084      	beq.n	266a <time_toString+0xd2>
                if (!empty)
    2760:	b91c      	cbnz	r4, 276a <time_toString+0x1d2>
                    bb_setUInt8(ba, separator);
    2762:	212f      	movs	r1, #47	; 0x2f
    2764:	4628      	mov	r0, r5
    2766:	f00b fe52 	bl	e40e <bb_setUInt8>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    276a:	4925      	ldr	r1, [pc, #148]	; (2800 <time_toString+0x268>)
    276c:	e754      	b.n	2618 <time_toString+0x80>
                    bb_setUInt8(ba, separator);
    276e:	212f      	movs	r1, #47	; 0x2f
    2770:	4628      	mov	r0, r5
    2772:	f00b fe4c 	bl	e40e <bb_setUInt8>
                bb_addIntAsString(ba, (time->skip& DATETIME_SKIPS_YEAR) == 0 ? year : 0);
    2776:	88f3      	ldrh	r3, [r6, #6]
    2778:	07d8      	lsls	r0, r3, #31
    277a:	f57f af7c 	bpl.w	2676 <time_toString+0xde>
    277e:	4621      	mov	r1, r4
    2780:	e77b      	b.n	267a <time_toString+0xe2>
            else if ((time->extraInfo & (DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY | DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2)) != 0)
    2782:	7a33      	ldrb	r3, [r6, #8]
    2784:	f013 0f0c 	tst.w	r3, #12
    2788:	d009      	beq.n	279e <time_toString+0x206>
                if (!empty)
    278a:	b91c      	cbnz	r4, 2794 <time_toString+0x1fc>
                    bb_setUInt8(ba, separator);
    278c:	212f      	movs	r1, #47	; 0x2f
    278e:	4628      	mov	r0, r5
    2790:	f00b fe3d 	bl	e40e <bb_setUInt8>
                bb_addString(ba, GET_STR_FROM_EEPROM("*"));
    2794:	491a      	ldr	r1, [pc, #104]	; (2800 <time_toString+0x268>)
    2796:	4628      	mov	r0, r5
    2798:	f00b ff6a 	bl	e670 <bb_addString>
    279c:	e770      	b.n	2680 <time_toString+0xe8>
            else if (addDate)
    279e:	2f00      	cmp	r7, #0
    27a0:	f43f af6f 	beq.w	2682 <time_toString+0xea>
    27a4:	e7f1      	b.n	278a <time_toString+0x1f2>
    unsigned char empty = 1;
    27a6:	2401      	movs	r4, #1
    27a8:	e76b      	b.n	2682 <time_toString+0xea>
    else if (addTime)
    27aa:	2f00      	cmp	r7, #0
    27ac:	f43f af7d 	beq.w	26aa <time_toString+0x112>
        if (!empty)
    27b0:	b91c      	cbnz	r4, 27ba <time_toString+0x222>
            bb_setUInt8(ba, ':');
    27b2:	213a      	movs	r1, #58	; 0x3a
    27b4:	4628      	mov	r0, r5
    27b6:	f00b fe2a 	bl	e40e <bb_setUInt8>
        bb_setUInt8(ba, '*');
    27ba:	212a      	movs	r1, #42	; 0x2a
    27bc:	4628      	mov	r0, r5
    27be:	f00b fe26 	bl	e40e <bb_setUInt8>
    27c2:	e771      	b.n	26a8 <time_toString+0x110>
    else if (addTime)
    27c4:	2f00      	cmp	r7, #0
    27c6:	d080      	beq.n	26ca <time_toString+0x132>
        if (!empty)
    27c8:	b91c      	cbnz	r4, 27d2 <time_toString+0x23a>
            bb_setUInt8(ba, ':');
    27ca:	213a      	movs	r1, #58	; 0x3a
    27cc:	4628      	mov	r0, r5
    27ce:	f00b fe1e 	bl	e40e <bb_setUInt8>
        bb_setUInt8(ba, '*');
    27d2:	212a      	movs	r1, #42	; 0x2a
    27d4:	4628      	mov	r0, r5
    27d6:	f00b fe1a 	bl	e40e <bb_setUInt8>
    27da:	e775      	b.n	26c8 <time_toString+0x130>
    else if (addTime)
    27dc:	2f00      	cmp	r7, #0
    27de:	d083      	beq.n	26e8 <time_toString+0x150>
        if (!empty)
    27e0:	b91c      	cbnz	r4, 27ea <time_toString+0x252>
            bb_setUInt8(ba, ':');
    27e2:	213a      	movs	r1, #58	; 0x3a
    27e4:	4628      	mov	r0, r5
    27e6:	f00b fe12 	bl	e40e <bb_setUInt8>
        bb_setUInt8(ba, '*');
    27ea:	212a      	movs	r1, #42	; 0x2a
    27ec:	4628      	mov	r0, r5
    27ee:	f00b fe0e 	bl	e40e <bb_setUInt8>
    27f2:	e779      	b.n	26e8 <time_toString+0x150>
    27f4:	0001f93b 	.word	0x0001f93b
    27f8:	0001f945 	.word	0x0001f945
    27fc:	0001f941 	.word	0x0001f941
    2800:	00020016 	.word	0x00020016
    2804:	0001f94d 	.word	0x0001f94d
    2808:	0001f956 	.word	0x0001f956
    280c:	00020698 	.word	0x00020698
    2810:	0001f95b 	.word	0x0001f95b
    2814:	0001f95d 	.word	0x0001f95d

00002818 <time_toUnixTime2>:

// Convert date time to Epoch time.
uint32_t time_toUnixTime2(gxtime* time)
{
    gxtime tmp = *time;
    if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    2818:	7a03      	ldrb	r3, [r0, #8]
    281a:	075b      	lsls	r3, r3, #29
{
    281c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    gxtime tmp = *time;
    2820:	6805      	ldr	r5, [r0, #0]
    2822:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
{
    2826:	4604      	mov	r4, r0
    if ((time->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    2828:	d511      	bpl.n	284e <time_toUnixTime2+0x36>
    {
        unsigned char days = time_getDays(time);
    282a:	f00c fe42 	bl	f4b2 <time_getDays>
    282e:	4606      	mov	r6, r0
        unsigned char max = date_daysInMonth(time_getYears(time), time_getMonths(time));
    2830:	4620      	mov	r0, r4
    2832:	f00c fe38 	bl	f4a6 <time_getYears>
    2836:	4607      	mov	r7, r0
    2838:	4620      	mov	r0, r4
    283a:	f00c fe37 	bl	f4ac <time_getMonths>
    283e:	4601      	mov	r1, r0
    2840:	4638      	mov	r0, r7
    2842:	f00c fe7e 	bl	f542 <date_daysInMonth>
    value->value += seconds;
    2846:	4b06      	ldr	r3, [pc, #24]	; (2860 <time_toUnixTime2+0x48>)
        time_addDays(&tmp, max - days);
    2848:	1b80      	subs	r0, r0, r6
    value->value += seconds;
    284a:	fb03 5500 	mla	r5, r3, r0, r5
    }
    uint32_t value;
#ifdef DLMS_USE_EPOCH_TIME
    value = tmp.value;
    if (tmp.deviation != 0 && time->deviation != (short)0x8000)
    284e:	f3c8 030e 	ubfx	r3, r8, #0, #15
    2852:	b113      	cbz	r3, 285a <time_toUnixTime2+0x42>
    {
#ifdef DLMS_USE_UTC_TIME_ZONE
        value -= 60 * tmp.deviation;
#else
        value += 60 * tmp.deviation;
    2854:	233c      	movs	r3, #60	; 0x3c
    2856:	fb18 5503 	smlabb	r5, r8, r3, r5
    }
#else
    value = (uint32_t)gxmktime(&tmp.value);
#endif //DLMS_USE_EPOCH_TIME
    return value;
}
    285a:	4628      	mov	r0, r5
    285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2860:	00015180 	.word	0x00015180

00002864 <time_compareWithDiff>:
{
    2864:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (value2 == 0xFFFFFFFF)
    2866:	1c4f      	adds	r7, r1, #1
{
    2868:	b089      	sub	sp, #36	; 0x24
    286a:	4606      	mov	r6, r0
    286c:	460d      	mov	r5, r1
    286e:	4614      	mov	r4, r2
    if (value2 == 0xFFFFFFFF)
    2870:	f000 8081 	beq.w	2976 <time_compareWithDiff+0x112>
    time_fromUnixTime2(time_toUnixTime2(value1), &year1, &month1,
    2874:	f7ff ffd0 	bl	2818 <time_toUnixTime2>
    2878:	2300      	movs	r3, #0
    287a:	9303      	str	r3, [sp, #12]
    287c:	f10d 0316 	add.w	r3, sp, #22
    2880:	9302      	str	r3, [sp, #8]
    2882:	f10d 0315 	add.w	r3, sp, #21
    2886:	9301      	str	r3, [sp, #4]
    2888:	ab05      	add	r3, sp, #20
    288a:	9300      	str	r3, [sp, #0]
    288c:	f10d 0212 	add.w	r2, sp, #18
    2890:	f10d 0313 	add.w	r3, sp, #19
    2894:	a907      	add	r1, sp, #28
    2896:	f7ff fe01 	bl	249c <time_fromUnixTime2>
    if (deviationDiff != (short)0x8000)
    289a:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
        value2 += (60 * deviationDiff);
    289e:	bf1c      	itt	ne
    28a0:	233c      	movne	r3, #60	; 0x3c
    28a2:	fb14 5503 	smlabbne	r5, r4, r3, r5
    time_fromUnixTime2(value2, &year2, &month2,
    28a6:	f10d 031b 	add.w	r3, sp, #27
    28aa:	9302      	str	r3, [sp, #8]
    28ac:	f10d 031a 	add.w	r3, sp, #26
    28b0:	9301      	str	r3, [sp, #4]
    28b2:	2700      	movs	r7, #0
    28b4:	f10d 0319 	add.w	r3, sp, #25
    28b8:	9300      	str	r3, [sp, #0]
    28ba:	f10d 0217 	add.w	r2, sp, #23
    28be:	9703      	str	r7, [sp, #12]
    28c0:	ab06      	add	r3, sp, #24
    28c2:	f10d 011e 	add.w	r1, sp, #30
    28c6:	4628      	mov	r0, r5
    28c8:	f7ff fde8 	bl	249c <time_fromUnixTime2>
    if ((value1->skip & (DATETIME_SKIPS_SECOND | DATETIME_SKIPS_MINUTE | DATETIME_SKIPS_HOUR | DATETIME_SKIPS_DAY | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_YEAR)) != 0)
    28cc:	88f2      	ldrh	r2, [r6, #6]
    28ce:	f012 0477 	ands.w	r4, r2, #119	; 0x77
    28d2:	d04a      	beq.n	296a <time_compareWithDiff+0x106>
        if ((value1->skip & DATETIME_SKIPS_SECOND) == 0)
    28d4:	0656      	lsls	r6, r2, #25
        uint32_t val1 = 0, val2 = 0;
    28d6:	bf4d      	iteet	mi
    28d8:	463b      	movmi	r3, r7
            val1 = second1;
    28da:	f89d 0016 	ldrbpl.w	r0, [sp, #22]
            val2 = second2;
    28de:	f89d 301b 	ldrbpl.w	r3, [sp, #27]
        uint32_t val1 = 0, val2 = 0;
    28e2:	4618      	movmi	r0, r3
        if ((value1->skip & DATETIME_SKIPS_MINUTE) == 0)
    28e4:	0695      	lsls	r5, r2, #26
    28e6:	d408      	bmi.n	28fa <time_compareWithDiff+0x96>
            val1 += 60L * minute1;
    28e8:	f89d 4015 	ldrb.w	r4, [sp, #21]
    28ec:	213c      	movs	r1, #60	; 0x3c
    28ee:	fb11 0004 	smlabb	r0, r1, r4, r0
            val2 += 60L * minute2;
    28f2:	f89d 401a 	ldrb.w	r4, [sp, #26]
    28f6:	fb11 3304 	smlabb	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_HOUR) == 0)
    28fa:	06d4      	lsls	r4, r2, #27
    28fc:	d409      	bmi.n	2912 <time_compareWithDiff+0xae>
            val1 += 3600L * hour1;
    28fe:	f89d 4014 	ldrb.w	r4, [sp, #20]
    2902:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2906:	fb01 0004 	mla	r0, r1, r4, r0
            val2 += 3600L * hour2;
    290a:	f89d 4019 	ldrb.w	r4, [sp, #25]
    290e:	fb01 3304 	mla	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_DAY) == 0)
    2912:	0751      	lsls	r1, r2, #29
    2914:	d408      	bmi.n	2928 <time_compareWithDiff+0xc4>
            val1 += 24L * 3600L * day1;
    2916:	f89d 4013 	ldrb.w	r4, [sp, #19]
    291a:	4918      	ldr	r1, [pc, #96]	; (297c <time_compareWithDiff+0x118>)
    291c:	fb01 0004 	mla	r0, r1, r4, r0
            val2 += 24L * 3600L * day2;
    2920:	f89d 4018 	ldrb.w	r4, [sp, #24]
    2924:	fb01 3304 	mla	r3, r1, r4, r3
        if ((value1->skip & DATETIME_SKIPS_MONTH) == 0)
    2928:	f002 0101 	and.w	r1, r2, #1
    292c:	0792      	lsls	r2, r2, #30
    292e:	d415      	bmi.n	295c <time_compareWithDiff+0xf8>
            if ((value1->skip & DATETIME_SKIPS_YEAR) == 0)
    2930:	b951      	cbnz	r1, 2948 <time_compareWithDiff+0xe4>
                if (year1 != year2)
    2932:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2936:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    293a:	4291      	cmp	r1, r2
    293c:	d004      	beq.n	2948 <time_compareWithDiff+0xe4>
            return val1 < val2 ? -1 : 1;
    293e:	d21a      	bcs.n	2976 <time_compareWithDiff+0x112>
                    return year1 < year2 ? -1 : 1;
    2940:	f04f 30ff 	mov.w	r0, #4294967295
}
    2944:	b009      	add	sp, #36	; 0x24
    2946:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (month1 != month2)
    2948:	f89d 1012 	ldrb.w	r1, [sp, #18]
    294c:	f89d 2017 	ldrb.w	r2, [sp, #23]
            if (year1 != year2)
    2950:	4291      	cmp	r1, r2
    2952:	d1f4      	bne.n	293e <time_compareWithDiff+0xda>
        if (val1 != val2)
    2954:	4298      	cmp	r0, r3
    2956:	d1f2      	bne.n	293e <time_compareWithDiff+0xda>
        return 0;
    2958:	2000      	movs	r0, #0
    295a:	e7f3      	b.n	2944 <time_compareWithDiff+0xe0>
        else if ((value1->skip & DATETIME_SKIPS_YEAR) == 0)
    295c:	2900      	cmp	r1, #0
    295e:	d1f9      	bne.n	2954 <time_compareWithDiff+0xf0>
            if (year1 != year2)
    2960:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    2964:	f8bd 201e 	ldrh.w	r2, [sp, #30]
    2968:	e7f2      	b.n	2950 <time_compareWithDiff+0xec>
    if (time_toUnixTime2(value1) == value2)
    296a:	4630      	mov	r0, r6
    296c:	f7ff ff54 	bl	2818 <time_toUnixTime2>
    2970:	4285      	cmp	r5, r0
    2972:	d0f1      	beq.n	2958 <time_compareWithDiff+0xf4>
    return time_toUnixTime2(value1) < value2 ? -1 : 1;
    2974:	d8e4      	bhi.n	2940 <time_compareWithDiff+0xdc>
        return 1;
    2976:	2001      	movs	r0, #1
    2978:	e7e4      	b.n	2944 <time_compareWithDiff+0xe0>
    297a:	bf00      	nop
    297c:	00015180 	.word	0x00015180

00002980 <countCRC.isra.0>:
        0x6B46, 0x7ACF, 0x4854, 0x59DD, 0x2D62, 0x3CEB, 0x0E70, 0x1FF9,
        0xF78F, 0xE606, 0xD49D, 0xC514, 0xB1AB, 0xA022, 0x92B9, 0x8330,
        0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
    };

    static uint16_t countCRC(gxByteBuffer* Buff, uint32_t index, uint32_t count)
    2980:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef ARDUINO_ARCH_AVR
//If Arduino is used data is read from flash like this.
            tmp = (FCS16 ^ Buff->data[index + pos]) & 0xFF;
            FCS16 = (FCS16 >> 8) ^ pgm_read_word_near(FCS16Table + tmp);
#else
            FCS16 = (FCS16 >> 8) ^ FCS16Table[(FCS16 ^ ((unsigned char*)Buff->data)[index + pos]) & 0xFF];
    2982:	4f0b      	ldr	r7, [pc, #44]	; (29b0 <countCRC.isra.0+0x30>)
    static uint16_t countCRC(gxByteBuffer* Buff, uint32_t index, uint32_t count)
    2984:	2500      	movs	r5, #0
        uint16_t FCS16 = 0xFFFF;
    2986:	f64f 73ff 	movw	r3, #65535	; 0xffff
        for (pos = 0; pos < count; ++pos)
    298a:	b2ae      	uxth	r6, r5
    298c:	4296      	cmp	r6, r2
    298e:	f105 0501 	add.w	r5, r5, #1
    2992:	d303      	bcc.n	299c <countCRC.isra.0+0x1c>
#endif //ARDUINO_ARCH_AVR
        }
        FCS16 = ~FCS16;
    2994:	43d8      	mvns	r0, r3
        //CRC is in big endian byte order.
        tmp = FCS16;
        FCS16 = tmp >> 8;
        FCS16 |= tmp << 8;
        return FCS16;
    2996:	ba40      	rev16	r0, r0
    }
    2998:	b280      	uxth	r0, r0
    299a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            FCS16 = (FCS16 >> 8) ^ FCS16Table[(FCS16 ^ ((unsigned char*)Buff->data)[index + pos]) & 0xFF];
    299c:	6804      	ldr	r4, [r0, #0]
    299e:	4434      	add	r4, r6
    29a0:	5c64      	ldrb	r4, [r4, r1]
    29a2:	405c      	eors	r4, r3
    29a4:	b2e4      	uxtb	r4, r4
    29a6:	f837 4014 	ldrh.w	r4, [r7, r4, lsl #1]
    29aa:	ea84 2313 	eor.w	r3, r4, r3, lsr #8
        for (pos = 0; pos < count; ++pos)
    29ae:	e7ec      	b.n	298a <countCRC.isra.0+0xa>
    29b0:	0001f528 	.word	0x0001f528

000029b4 <getBcd>:
* info
*            Data info.
* Returns  parsed BCD value.
*/
int getBcd(gxByteBuffer* buff, gxDataInfo* info, unsigned char knownType, dlmsVARIANT* value)
{
    29b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    29b8:	4605      	mov	r5, r0
    29ba:	460e      	mov	r6, r1
    29bc:	461c      	mov	r4, r3
#endif //DLMS_IGNORE_MALLOC
    static const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    int ret = 0, a;
    uint16_t len;
    unsigned char ch;
    if (knownType)
    29be:	b1d2      	cbz	r2, 29f6 <getBcd+0x42>
    {
        len = (uint16_t)buff->size;
    29c0:	88c3      	ldrh	r3, [r0, #6]
    29c2:	f8ad 3006 	strh.w	r3, [sp, #6]
            *p = hexArray[ch & 0x0F];
            p++;
        }
    }
#else
    value->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    29c6:	200c      	movs	r0, #12
    29c8:	f00a fc94 	bl	d2f4 <malloc>
    29cc:	60a0      	str	r0, [r4, #8]
    BYTE_BUFFER_INIT(value->strVal);
    29ce:	f00b fcb5 	bl	e33c <bb_init>
    value->vt = DLMS_DATA_TYPE_STRING;
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    29d2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    29d6:	68a0      	ldr	r0, [r4, #8]
        {
            break;
        }
        idHigh = ch >> 4;
        idLow = ch & 0x0F;
        bb_setInt8(value->strVal, hexArray[idHigh]);
    29d8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2a50 <getBcd+0x9c>
    value->vt = DLMS_DATA_TYPE_STRING;
    29dc:	230a      	movs	r3, #10
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    29de:	0049      	lsls	r1, r1, #1
    value->vt = DLMS_DATA_TYPE_STRING;
    29e0:	7023      	strb	r3, [r4, #0]
    bb_capacity(value->strVal, (uint16_t)(len * 2));
    29e2:	b289      	uxth	r1, r1
    29e4:	f00b fcb0 	bl	e348 <bb_capacity>
    for (a = 0; a != len; ++a)
    29e8:	2700      	movs	r7, #0
    29ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    29ee:	42bb      	cmp	r3, r7
    29f0:	d113      	bne.n	2a1a <getBcd+0x66>
    29f2:	2000      	movs	r0, #0
    29f4:	e00e      	b.n	2a14 <getBcd+0x60>
        if (hlp_getObjectCount2(buff, &len) != 0)
    29f6:	f10d 0106 	add.w	r1, sp, #6
    29fa:	f018 fdd3 	bl	1b5a4 <hlp_getObjectCount2>
    29fe:	bb20      	cbnz	r0, 2a4a <getBcd+0x96>
        if ((buff->size - buff->position) < (uint16_t)(2 * len))
    2a00:	892b      	ldrh	r3, [r5, #8]
    2a02:	88ea      	ldrh	r2, [r5, #6]
    2a04:	1ad2      	subs	r2, r2, r3
    2a06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2a0a:	005b      	lsls	r3, r3, #1
    2a0c:	b29b      	uxth	r3, r3
    2a0e:	429a      	cmp	r2, r3
    2a10:	dad9      	bge.n	29c6 <getBcd+0x12>
            info->complete = 0;
    2a12:	7170      	strb	r0, [r6, #5]
        bb_setInt8(value->strVal, hexArray[idLow]);
    }
#endif //DLMS_IGNORE_MALLOC
    return ret;
}
    2a14:	b002      	add	sp, #8
    2a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a1a:	f10d 0105 	add.w	r1, sp, #5
    2a1e:	4628      	mov	r0, r5
    2a20:	f00b fe65 	bl	e6ee <bb_getUInt8>
    2a24:	2800      	cmp	r0, #0
    2a26:	d1f5      	bne.n	2a14 <getBcd+0x60>
        idHigh = ch >> 4;
    2a28:	f89d 6005 	ldrb.w	r6, [sp, #5]
        bb_setInt8(value->strVal, hexArray[idHigh]);
    2a2c:	68a0      	ldr	r0, [r4, #8]
    2a2e:	0933      	lsrs	r3, r6, #4
        bb_setInt8(value->strVal, hexArray[idLow]);
    2a30:	f006 060f 	and.w	r6, r6, #15
        bb_setInt8(value->strVal, hexArray[idHigh]);
    2a34:	f818 1003 	ldrb.w	r1, [r8, r3]
    2a38:	f00b fdc6 	bl	e5c8 <bb_setInt8>
        bb_setInt8(value->strVal, hexArray[idLow]);
    2a3c:	f818 1006 	ldrb.w	r1, [r8, r6]
    2a40:	68a0      	ldr	r0, [r4, #8]
    2a42:	f00b fdc1 	bl	e5c8 <bb_setInt8>
    for (a = 0; a != len; ++a)
    2a46:	3701      	adds	r7, #1
    2a48:	e7cf      	b.n	29ea <getBcd+0x36>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    2a4a:	f44f 7082 	mov.w	r0, #260	; 0x104
    2a4e:	e7e1      	b.n	2a14 <getBcd+0x60>
    2a50:	0001f96d 	.word	0x0001f96d

00002a54 <getTime>:
* info
*            Data info.
* Returns  Parsed time.
*/
int getTime(gxByteBuffer* buff, gxDataInfo* info, dlmsVARIANT* value)
{
    2a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret;
    unsigned char ch, hour, minute, second;
    uint16_t ms = 0xFFFF;
    if (buff->size - buff->position < 4)
    2a58:	88c3      	ldrh	r3, [r0, #6]
{
    2a5a:	4616      	mov	r6, r2
    if (buff->size - buff->position < 4)
    2a5c:	8902      	ldrh	r2, [r0, #8]
    2a5e:	1a9b      	subs	r3, r3, r2
    2a60:	2b03      	cmp	r3, #3
{
    2a62:	b089      	sub	sp, #36	; 0x24
    2a64:	4605      	mov	r5, r0
    if (buff->size - buff->position < 4)
    2a66:	dc06      	bgt.n	2a76 <getTime+0x22>
    {
        // If there is not enough data available.
        info->complete = 0;
    2a68:	2000      	movs	r0, #0
    2a6a:	7148      	strb	r0, [r1, #5]
        return 0;
    2a6c:	4604      	mov	r4, r0
    value->vt = DLMS_DATA_TYPE_TIME;
#else
    time_init((gxtime*)value->pVal, -1, -1, -1, hour, minute, second, ms, 0x8000);
#endif //DLMS_IGNORE_MALLOC
    return 0;
}
    2a6e:	4620      	mov	r0, r4
    2a70:	b009      	add	sp, #36	; 0x24
    2a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a76:	f10d 011f 	add.w	r1, sp, #31
    2a7a:	f00b fe38 	bl	e6ee <bb_getUInt8>
    2a7e:	4604      	mov	r4, r0
    2a80:	2800      	cmp	r0, #0
    2a82:	d1f4      	bne.n	2a6e <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a84:	f10d 011f 	add.w	r1, sp, #31
    2a88:	4628      	mov	r0, r5
    hour = ch;
    2a8a:	f89d 701f 	ldrb.w	r7, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a8e:	f00b fe2e 	bl	e6ee <bb_getUInt8>
    2a92:	4604      	mov	r4, r0
    2a94:	2800      	cmp	r0, #0
    2a96:	d1ea      	bne.n	2a6e <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2a98:	f10d 011f 	add.w	r1, sp, #31
    2a9c:	4628      	mov	r0, r5
    minute = ch;
    2a9e:	f89d 801f 	ldrb.w	r8, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2aa2:	f00b fe24 	bl	e6ee <bb_getUInt8>
    2aa6:	4604      	mov	r4, r0
    2aa8:	2800      	cmp	r0, #0
    2aaa:	d1e0      	bne.n	2a6e <getTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2aac:	f10d 011f 	add.w	r1, sp, #31
    2ab0:	4628      	mov	r0, r5
    second = ch;
    2ab2:	f89d 901f 	ldrb.w	r9, [sp, #31]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2ab6:	f00b fe1a 	bl	e6ee <bb_getUInt8>
    2aba:	4604      	mov	r4, r0
    2abc:	2800      	cmp	r0, #0
    2abe:	d1d6      	bne.n	2a6e <getTime+0x1a>
    if (ch != 0xFF)
    2ac0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2ac4:	2bff      	cmp	r3, #255	; 0xff
        ms = ch * 10;
    2ac6:	bf1c      	itt	ne
    2ac8:	eb03 0383 	addne.w	r3, r3, r3, lsl #2
    2acc:	005d      	lslne	r5, r3, #1
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    2ace:	f996 3000 	ldrsb.w	r3, [r6]
    uint16_t ms = 0xFFFF;
    2ad2:	bf08      	it	eq
    2ad4:	f64f 75ff 	movweq	r5, #65535	; 0xffff
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    2ad8:	2b00      	cmp	r3, #0
    2ada:	db03      	blt.n	2ae4 <getTime+0x90>
        value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    2adc:	200c      	movs	r0, #12
    2ade:	f00a fc09 	bl	d2f4 <malloc>
    2ae2:	60b0      	str	r0, [r6, #8]
    time_init(value->dateTime, (uint16_t)-1, 0xFF, 0xFF, hour, minute, second, ms, 0x8000);
    2ae4:	4b07      	ldr	r3, [pc, #28]	; (2b04 <getTime+0xb0>)
    2ae6:	68b0      	ldr	r0, [r6, #8]
    2ae8:	9700      	str	r7, [sp, #0]
    2aea:	e9cd 5303 	strd	r5, r3, [sp, #12]
    2aee:	23ff      	movs	r3, #255	; 0xff
    2af0:	461a      	mov	r2, r3
    2af2:	e9cd 8901 	strd	r8, r9, [sp, #4]
    2af6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2afa:	f7ff fb71 	bl	21e0 <time_init>
    value->vt = DLMS_DATA_TYPE_TIME;
    2afe:	231b      	movs	r3, #27
    2b00:	7033      	strb	r3, [r6, #0]
    return 0;
    2b02:	e7b4      	b.n	2a6e <getTime+0x1a>
    2b04:	ffff8000 	.word	0xffff8000

00002b08 <getDate>:
* info
*            Data info.
* Returns  Parsed date.
*/
int getDate(gxByteBuffer* buff, gxDataInfo* info, dlmsVARIANT* value)
{
    2b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
	unsigned char month, day;
    uint16_t year;
    unsigned char ch;
    if (buff->size - buff->position < 5)
    2b0c:	88c3      	ldrh	r3, [r0, #6]
{
    2b0e:	4615      	mov	r5, r2
    if (buff->size - buff->position < 5)
    2b10:	8902      	ldrh	r2, [r0, #8]
    2b12:	1a9b      	subs	r3, r3, r2
    2b14:	2b04      	cmp	r3, #4
{
    2b16:	b088      	sub	sp, #32
    2b18:	4606      	mov	r6, r0
    if (buff->size - buff->position < 5)
    2b1a:	dc06      	bgt.n	2b2a <getDate+0x22>
    {
        // If there is not enough data available.
        info->complete = 0;
    2b1c:	2000      	movs	r0, #0
    2b1e:	7148      	strb	r0, [r1, #5]
        return 0;
    2b20:	4604      	mov	r4, r0
    {
        ((gxtime*)value->pVal)->skip |= DATETIME_SKIPS_DAYOFWEEK;
    }
#endif //DLMS_IGNORE_MALLOC
    return 0;
}
    2b22:	4620      	mov	r0, r4
    2b24:	b008      	add	sp, #32
    2b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret = bb_getUInt16(buff, &year)) != 0)
    2b2a:	f10d 011e 	add.w	r1, sp, #30
    2b2e:	f00b fe07 	bl	e740 <bb_getUInt16>
    2b32:	4604      	mov	r4, r0
    2b34:	2800      	cmp	r0, #0
    2b36:	d1f4      	bne.n	2b22 <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b38:	f10d 011d 	add.w	r1, sp, #29
    2b3c:	4630      	mov	r0, r6
    2b3e:	f00b fdd6 	bl	e6ee <bb_getUInt8>
    2b42:	4604      	mov	r4, r0
    2b44:	2800      	cmp	r0, #0
    2b46:	d1ec      	bne.n	2b22 <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b48:	f10d 011d 	add.w	r1, sp, #29
    2b4c:	4630      	mov	r0, r6
    month = ch;
    2b4e:	f89d 701d 	ldrb.w	r7, [sp, #29]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b52:	f00b fdcc 	bl	e6ee <bb_getUInt8>
    2b56:	4604      	mov	r4, r0
    2b58:	2800      	cmp	r0, #0
    2b5a:	d1e2      	bne.n	2b22 <getDate+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b5c:	f10d 011d 	add.w	r1, sp, #29
    2b60:	4630      	mov	r0, r6
    day = ch;
    2b62:	f89d 801d 	ldrb.w	r8, [sp, #29]
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    2b66:	f00b fdc2 	bl	e6ee <bb_getUInt8>
    2b6a:	4604      	mov	r4, r0
    2b6c:	2800      	cmp	r0, #0
    2b6e:	d1d8      	bne.n	2b22 <getDate+0x1a>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    2b70:	f995 3000 	ldrsb.w	r3, [r5]
    2b74:	2b00      	cmp	r3, #0
    2b76:	db03      	blt.n	2b80 <getDate+0x78>
        value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    2b78:	200c      	movs	r0, #12
    2b7a:	f00a fbbb 	bl	d2f4 <malloc>
    2b7e:	60a8      	str	r0, [r5, #8]
    time_init(value->dateTime, year, month, day, 0xFF, 0xFF, 0xFF, 0xFF, 0x8000);
    2b80:	4a0c      	ldr	r2, [pc, #48]	; (2bb4 <getDate+0xac>)
    2b82:	f8bd 101e 	ldrh.w	r1, [sp, #30]
    2b86:	68a8      	ldr	r0, [r5, #8]
    2b88:	23ff      	movs	r3, #255	; 0xff
    2b8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    2b8e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    2b92:	463a      	mov	r2, r7
    2b94:	9300      	str	r3, [sp, #0]
    2b96:	4643      	mov	r3, r8
    2b98:	f7ff fb22 	bl	21e0 <time_init>
    if (ch > 7)
    2b9c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    2ba0:	2b07      	cmp	r3, #7
        value->dateTime->skip |= DATETIME_SKIPS_DAYOFWEEK;
    2ba2:	bf81      	itttt	hi
    2ba4:	68aa      	ldrhi	r2, [r5, #8]
    2ba6:	88d3      	ldrhhi	r3, [r2, #6]
    2ba8:	f043 0308 	orrhi.w	r3, r3, #8
    2bac:	80d3      	strhhi	r3, [r2, #6]
    value->vt = DLMS_DATA_TYPE_DATE;
    2bae:	231a      	movs	r3, #26
    2bb0:	702b      	strb	r3, [r5, #0]
    return 0;
    2bb2:	e7b6      	b.n	2b22 <getDate+0x1a>
    2bb4:	ffff8000 	.word	0xffff8000

00002bb8 <dlms_checkLLCBytes>:

#ifndef DLMS_IGNORE_HDLC

//Return DLMS_ERROR_CODE_FALSE if LLC bytes are not included.
int dlms_checkLLCBytes(dlmsSettings* settings, gxByteBuffer* data)
{
    2bb8:	b510      	push	{r4, lr}
    2bba:	4602      	mov	r2, r0
    2bbc:	680b      	ldr	r3, [r1, #0]
    2bbe:	8908      	ldrh	r0, [r1, #8]
    2bc0:	4418      	add	r0, r3
    if (settings->server)
    2bc2:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
{
    2bc6:	460c      	mov	r4, r1
    {
        //Check LLC bytes.
        if (memcmp(data->data + data->position, LLC_SEND_BYTES, 3) != 0)
    2bc8:	2203      	movs	r2, #3
    if (settings->server)
    2bca:	b15b      	cbz	r3, 2be4 <dlms_checkLLCBytes+0x2c>
        if (memcmp(data->data + data->position, LLC_SEND_BYTES, 3) != 0)
    2bcc:	4906      	ldr	r1, [pc, #24]	; (2be8 <dlms_checkLLCBytes+0x30>)
    2bce:	f01b fb0a 	bl	1e1e6 <memcmp>
    2bd2:	b920      	cbnz	r0, 2bde <dlms_checkLLCBytes+0x26>
        if (memcmp(data->data + data->position, LLC_REPLY_BYTES, 3) != 0)
        {
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
    }
    data->position += 3;
    2bd4:	8923      	ldrh	r3, [r4, #8]
    2bd6:	3303      	adds	r3, #3
    2bd8:	8123      	strh	r3, [r4, #8]
    return DLMS_ERROR_CODE_OK;
    2bda:	2000      	movs	r0, #0
}
    2bdc:	bd10      	pop	{r4, pc}
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    2bde:	f44f 7081 	mov.w	r0, #258	; 0x102
    2be2:	e7fb      	b.n	2bdc <dlms_checkLLCBytes+0x24>
        if (memcmp(data->data + data->position, LLC_REPLY_BYTES, 3) != 0)
    2be4:	4901      	ldr	r1, [pc, #4]	; (2bec <dlms_checkLLCBytes+0x34>)
    2be6:	e7f2      	b.n	2bce <dlms_checkLLCBytes+0x16>
    2be8:	0001f96a 	.word	0x0001f96a
    2bec:	0001f967 	.word	0x0001f967

00002bf0 <dlms_countFCS24>:
}

// Reserved for internal use.
const uint32_t CRCPOLY = 0xD3B6BA00;
uint32_t dlms_countFCS24(unsigned char* buff, int index, int count)
{
    2bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char i, j;
    uint32_t crcreg = 0;
    for (j = 0; j < count; ++j)
    2bf2:	2600      	movs	r6, #0
            {
                crcreg |= 0x80000000;
            }
            if ((crcreg & 0x80) != 0)
            {
                crcreg = crcreg ^ CRCPOLY;
    2bf4:	4f0e      	ldr	r7, [pc, #56]	; (2c30 <dlms_countFCS24+0x40>)
    uint32_t crcreg = 0;
    2bf6:	4633      	mov	r3, r6
    for (j = 0; j < count; ++j)
    2bf8:	b2f4      	uxtb	r4, r6
    2bfa:	4294      	cmp	r4, r2
    2bfc:	db01      	blt.n	2c02 <dlms_countFCS24+0x12>
            }
            b <<= 1;
        }
    }
    return crcreg >> 8;
}
    2bfe:	0a18      	lsrs	r0, r3, #8
    2c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        unsigned char b = buff[index + j];
    2c02:	4404      	add	r4, r0
    2c04:	5c65      	ldrb	r5, [r4, r1]
    2c06:	2408      	movs	r4, #8
            crcreg >>= 1;
    2c08:	085b      	lsrs	r3, r3, #1
            if ((b & 0x80) != 0)
    2c0a:	f015 0f80 	tst.w	r5, #128	; 0x80
                crcreg |= 0x80000000;
    2c0e:	bf18      	it	ne
    2c10:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
            if ((crcreg & 0x80) != 0)
    2c14:	f013 0f80 	tst.w	r3, #128	; 0x80
                crcreg = crcreg ^ CRCPOLY;
    2c18:	f104 34ff 	add.w	r4, r4, #4294967295
    2c1c:	bf18      	it	ne
    2c1e:	407b      	eorne	r3, r7
            b <<= 1;
    2c20:	006d      	lsls	r5, r5, #1
        for (i = 0; i < 8; ++i)
    2c22:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
            b <<= 1;
    2c26:	b2ed      	uxtb	r5, r5
        for (i = 0; i < 8; ++i)
    2c28:	d1ee      	bne.n	2c08 <dlms_countFCS24+0x18>
    for (j = 0; j < count; ++j)
    2c2a:	3601      	adds	r6, #1
    2c2c:	e7e4      	b.n	2bf8 <dlms_countFCS24+0x8>
    2c2e:	bf00      	nop
    2c30:	d3b6ba00 	.word	0xd3b6ba00

00002c34 <dlms_handleGloDedRequest>:
}

#if !defined(DLMS_IGNORE_SERVER)
int dlms_handleGloDedRequest(dlmsSettings* settings,
    gxReplyData* data)
{
    2c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c36:	898b      	ldrh	r3, [r1, #12]
    ret = DLMS_ERROR_CODE_NOT_IMPLEMENTED;
#else
    DLMS_SECURITY_SUITE suite;
    uint64_t invocationCounter;
    // If all frames are read.
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2c38:	780a      	ldrb	r2, [r1, #0]
    2c3a:	3b01      	subs	r3, #1
    2c3c:	f012 0f01 	tst.w	r2, #1
{
    2c40:	b089      	sub	sp, #36	; 0x24
    2c42:	4604      	mov	r4, r0
    2c44:	460d      	mov	r5, r1
    {
        unsigned char ch;
        DLMS_SECURITY security;
        --data->data.position;
    2c46:	818b      	strh	r3, [r1, #12]
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2c48:	f040 808a 	bne.w	2d60 <dlms_handleGloDedRequest+0x12c>
        unsigned char emptySourceSystemTile;
        emptySourceSystemTile = memcmp(settings->sourceSystemTitle, EMPTY_SYSTEM_TITLE, 8) == 0;
    2c4c:	f100 071c 	add.w	r7, r0, #28
    2c50:	2208      	movs	r2, #8
    2c52:	4944      	ldr	r1, [pc, #272]	; (2d64 <dlms_handleGloDedRequest+0x130>)
    2c54:	4638      	mov	r0, r7
    2c56:	f01b fac6 	bl	1e1e6 <memcmp>
    return settings->cipher.dedicatedKey != NULL;
    2c5a:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
        emptySourceSystemTile = memcmp(settings->sourceSystemTitle, EMPTY_SYSTEM_TITLE, 8) == 0;
    2c5e:	4606      	mov	r6, r0
        if (dlms_useDedicatedKey(settings) && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
    2c60:	b1a2      	cbz	r2, 2c8c <dlms_handleGloDedRequest+0x58>
    2c62:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2c66:	0799      	lsls	r1, r3, #30
    2c68:	d510      	bpl.n	2c8c <dlms_handleGloDedRequest+0x58>
        {
            if ((ret = cip_decrypt(&settings->cipher,
    2c6a:	ab06      	add	r3, sp, #24
    2c6c:	9302      	str	r3, [sp, #8]
    2c6e:	f10d 0315 	add.w	r3, sp, #21
    2c72:	9301      	str	r3, [sp, #4]
    2c74:	f10d 0317 	add.w	r3, sp, #23
    2c78:	9300      	str	r3, [sp, #0]
    2c7a:	1d2b      	adds	r3, r5, #4
                data->preEstablished = 1;
            }
        }
        else
        {
            if ((ret = cip_decrypt(&settings->cipher,
    2c7c:	4639      	mov	r1, r7
    2c7e:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    2c82:	f7ff f907 	bl	1e94 <cip_decrypt>
    2c86:	2800      	cmp	r0, #0
    2c88:	d041      	beq.n	2d0e <dlms_handleGloDedRequest+0xda>
    2c8a:	e01b      	b.n	2cc4 <dlms_handleGloDedRequest+0x90>
        else if (dlms_usePreEstablishedSystemTitle(settings) && emptySourceSystemTile)
    2c8c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
    2c90:	2b00      	cmp	r3, #0
    2c92:	d056      	beq.n	2d42 <dlms_handleGloDedRequest+0x10e>
    2c94:	2e00      	cmp	r6, #0
    2c96:	d154      	bne.n	2d42 <dlms_handleGloDedRequest+0x10e>
            if (settings->server && settings->connected == DLMS_CONNECTION_STATE_NONE && !data->preEstablished)
    2c98:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2c9c:	b9a3      	cbnz	r3, 2cc8 <dlms_handleGloDedRequest+0x94>
            if ((ret = cip_decrypt(&settings->cipher,
    2c9e:	ab06      	add	r3, sp, #24
    2ca0:	9302      	str	r3, [sp, #8]
    2ca2:	f10d 0315 	add.w	r3, sp, #21
    2ca6:	9301      	str	r3, [sp, #4]
    2ca8:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
    2cac:	f10d 0317 	add.w	r3, sp, #23
    2cb0:	9300      	str	r3, [sp, #0]
    2cb2:	6809      	ldr	r1, [r1, #0]
    2cb4:	1d2b      	adds	r3, r5, #4
    2cb6:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    2cba:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    2cbe:	f7ff f8e9 	bl	1e94 <cip_decrypt>
    2cc2:	b1f0      	cbz	r0, 2d02 <dlms_handleGloDedRequest+0xce>
    {
        data->data.position -= 1;
    }
#endif //DLMS_IGNORE_HIGH_GMAC
    return ret;
}
    2cc4:	b009      	add	sp, #36	; 0x24
    2cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (settings->server && settings->connected == DLMS_CONNECTION_STATE_NONE && !data->preEstablished)
    2cc8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d1e6      	bne.n	2c9e <dlms_handleGloDedRequest+0x6a>
    2cd0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d1e2      	bne.n	2c9e <dlms_handleGloDedRequest+0x6a>
                if (!svr_isTarget(settings, settings->serverAddress, settings->clientAddress))
    2cd8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    2cda:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2cdc:	4620      	mov	r0, r4
    2cde:	f00b fa24 	bl	e12a <svr_isTarget>
    2ce2:	b940      	cbnz	r0, 2cf6 <dlms_handleGloDedRequest+0xc2>
                    if ((settings->connected & DLMS_CONNECTION_STATE_DLMS) == 0)
    2ce4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2ce8:	079b      	lsls	r3, r3, #30
    2cea:	d401      	bmi.n	2cf0 <dlms_handleGloDedRequest+0xbc>
                        settings->serverAddress = settings->clientAddress = 0;
    2cec:	85e6      	strh	r6, [r4, #46]	; 0x2e
    2cee:	6326      	str	r6, [r4, #48]	; 0x30
                    return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
    2cf0:	f240 1007 	movw	r0, #263	; 0x107
    2cf4:	e7e6      	b.n	2cc4 <dlms_handleGloDedRequest+0x90>
                if ((ret = svr_connected((dlmsServerSettings*)settings)) != 0)
    2cf6:	4620      	mov	r0, r4
    2cf8:	f00b fa15 	bl	e126 <svr_connected>
    2cfc:	2800      	cmp	r0, #0
    2cfe:	d0ce      	beq.n	2c9e <dlms_handleGloDedRequest+0x6a>
    2d00:	e7e0      	b.n	2cc4 <dlms_handleGloDedRequest+0x90>
            if (data->preEstablished == 0)
    2d02:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    2d06:	b913      	cbnz	r3, 2d0e <dlms_handleGloDedRequest+0xda>
                data->preEstablished = 1;
    2d08:	2301      	movs	r3, #1
    2d0a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        if (settings->expectedInvocationCounter != NULL)
    2d0e:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
    2d12:	b149      	cbz	r1, 2d28 <dlms_handleGloDedRequest+0xf4>
            if (invocationCounter < *settings->expectedInvocationCounter)
    2d14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2d18:	680e      	ldr	r6, [r1, #0]
    2d1a:	2700      	movs	r7, #0
    2d1c:	42bb      	cmp	r3, r7
    2d1e:	bf08      	it	eq
    2d20:	42b2      	cmpeq	r2, r6
    2d22:	d31a      	bcc.n	2d5a <dlms_handleGloDedRequest+0x126>
            * settings->expectedInvocationCounter = (uint32_t)(1 + invocationCounter);
    2d24:	3201      	adds	r2, #1
    2d26:	600a      	str	r2, [r1, #0]
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2d28:	f10d 0116 	add.w	r1, sp, #22
    2d2c:	1d28      	adds	r0, r5, #4
    2d2e:	f00b fcde 	bl	e6ee <bb_getUInt8>
    2d32:	2800      	cmp	r0, #0
    2d34:	d1c6      	bne.n	2cc4 <dlms_handleGloDedRequest+0x90>
        data->encryptedCommand = data->command;
    2d36:	786b      	ldrb	r3, [r5, #1]
    2d38:	70ab      	strb	r3, [r5, #2]
        data->command = (DLMS_COMMAND)ch;
    2d3a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2d3e:	706b      	strb	r3, [r5, #1]
    2d40:	e7c0      	b.n	2cc4 <dlms_handleGloDedRequest+0x90>
            if ((ret = cip_decrypt(&settings->cipher,
    2d42:	ab06      	add	r3, sp, #24
    2d44:	9302      	str	r3, [sp, #8]
    2d46:	f10d 0315 	add.w	r3, sp, #21
    2d4a:	9301      	str	r3, [sp, #4]
    2d4c:	f10d 0317 	add.w	r3, sp, #23
    2d50:	9300      	str	r3, [sp, #0]
    2d52:	f104 02ac 	add.w	r2, r4, #172	; 0xac
    2d56:	1d2b      	adds	r3, r5, #4
    2d58:	e790      	b.n	2c7c <dlms_handleGloDedRequest+0x48>
                return DLMS_ERROR_CODE_INVOCATION_COUNTER_TOO_SMALL;
    2d5a:	f44f 708e 	mov.w	r0, #284	; 0x11c
    2d5e:	e7b1      	b.n	2cc4 <dlms_handleGloDedRequest+0x90>
    return ret;
    2d60:	2000      	movs	r0, #0
    2d62:	e7af      	b.n	2cc4 <dlms_handleGloDedRequest+0x90>
    2d64:	0001f95f 	.word	0x0001f95f

00002d68 <dlms_getPdu>:

int dlms_getPdu(
    dlmsSettings* settings,
    gxReplyData* data,
    unsigned char first)
{
    2d68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = DLMS_ERROR_CODE_OK;
    uint16_t index;
    unsigned char ch;
    DLMS_COMMAND cmd = data->command;
    2d6c:	784e      	ldrb	r6, [r1, #1]
{
    2d6e:	4604      	mov	r4, r0
    2d70:	460d      	mov	r5, r1
    // If header is not read yet or GBT message.
    if (cmd == DLMS_COMMAND_NONE)
    2d72:	2e00      	cmp	r6, #0
    2d74:	f040 8122 	bne.w	2fbc <dlms_getPdu+0x254>
    {
        // If PDU is missing.
        if (bb_available(&data->data) == 0)
    2d78:	f101 0804 	add.w	r8, r1, #4
    2d7c:	4640      	mov	r0, r8
    2d7e:	f00b fad0 	bl	e322 <bb_available>
    2d82:	b198      	cbz	r0, 2dac <dlms_getPdu+0x44>
            // Invalid PDU.
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        index = (uint16_t)(data->data.position);
        // Get command.
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2d84:	f10d 0107 	add.w	r1, sp, #7
    2d88:	4640      	mov	r0, r8
        index = (uint16_t)(data->data.position);
    2d8a:	89af      	ldrh	r7, [r5, #12]
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
    2d8c:	f00b fcaf 	bl	e6ee <bb_getUInt8>
    2d90:	2800      	cmp	r0, #0
    2d92:	f040 80d2 	bne.w	2f3a <dlms_getPdu+0x1d2>
        {
            return ret;
        }
        cmd = (DLMS_COMMAND)ch;
    2d96:	f89d 6007 	ldrb.w	r6, [sp, #7]
        data->command = cmd;
    2d9a:	706e      	strb	r6, [r5, #1]
        switch (cmd)
    2d9c:	2ee0      	cmp	r6, #224	; 0xe0
    2d9e:	d805      	bhi.n	2dac <dlms_getPdu+0x44>
    2da0:	2ebf      	cmp	r6, #191	; 0xbf
    2da2:	d806      	bhi.n	2db2 <dlms_getPdu+0x4a>
    2da4:	2e18      	cmp	r6, #24
    2da6:	d87b      	bhi.n	2ea0 <dlms_getPdu+0x138>
    2da8:	2e04      	cmp	r6, #4
    2daa:	d84b      	bhi.n	2e44 <dlms_getPdu+0xdc>
    2dac:	f44f 7081 	mov.w	r0, #258	; 0x102
    2db0:	e0c3      	b.n	2f3a <dlms_getPdu+0x1d2>
    2db2:	f1a6 03c0 	sub.w	r3, r6, #192	; 0xc0
    2db6:	2b20      	cmp	r3, #32
    2db8:	d8f8      	bhi.n	2dac <dlms_getPdu+0x44>
    2dba:	a201      	add	r2, pc, #4	; (adr r2, 2dc0 <dlms_getPdu+0x58>)
    2dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2dc0:	00002ee5 	.word	0x00002ee5
    2dc4:	00002ee5 	.word	0x00002ee5
    2dc8:	00002ee5 	.word	0x00002ee5
    2dcc:	00002ee5 	.word	0x00002ee5
    2dd0:	00002f27 	.word	0x00002f27
    2dd4:	00002f41 	.word	0x00002f41
    2dd8:	00002dad 	.word	0x00002dad
    2ddc:	00002f57 	.word	0x00002f57
    2de0:	00002eb3 	.word	0x00002eb3
    2de4:	00002eb3 	.word	0x00002eb3
    2de8:	00002dad 	.word	0x00002dad
    2dec:	00002eb3 	.word	0x00002eb3
    2df0:	00002ecf 	.word	0x00002ecf
    2df4:	00002ecf 	.word	0x00002ecf
    2df8:	00002dad 	.word	0x00002dad
    2dfc:	00002ecf 	.word	0x00002ecf
    2e00:	00002eb3 	.word	0x00002eb3
    2e04:	00002eb3 	.word	0x00002eb3
    2e08:	00002ecf 	.word	0x00002ecf
    2e0c:	00002eb3 	.word	0x00002eb3
    2e10:	00002ecf 	.word	0x00002ecf
    2e14:	00002ecf 	.word	0x00002ecf
    2e18:	00002dad 	.word	0x00002dad
    2e1c:	00002ecf 	.word	0x00002ecf
    2e20:	00002f7b 	.word	0x00002f7b
    2e24:	00002dad 	.word	0x00002dad
    2e28:	00002dad 	.word	0x00002dad
    2e2c:	00002f83 	.word	0x00002f83
    2e30:	00002f83 	.word	0x00002f83
    2e34:	00002fa9 	.word	0x00002fa9
    2e38:	00002dad 	.word	0x00002dad
    2e3c:	00002dad 	.word	0x00002dad
    2e40:	00002f61 	.word	0x00002f61
    2e44:	1f73      	subs	r3, r6, #5
    2e46:	2b13      	cmp	r3, #19
    2e48:	d8b0      	bhi.n	2dac <dlms_getPdu+0x44>
    2e4a:	a201      	add	r2, pc, #4	; (adr r2, 2e50 <dlms_getPdu+0xe8>)
    2e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2e50:	00002ebf 	.word	0x00002ebf
    2e54:	00002ebf 	.word	0x00002ebf
    2e58:	00002dad 	.word	0x00002dad
    2e5c:	00002dad 	.word	0x00002dad
    2e60:	00002dad 	.word	0x00002dad
    2e64:	00002dad 	.word	0x00002dad
    2e68:	00002dad 	.word	0x00002dad
    2e6c:	00002f0f 	.word	0x00002f0f
    2e70:	00002f4f 	.word	0x00002f4f
    2e74:	00002f73 	.word	0x00002f73
    2e78:	00002fb3 	.word	0x00002fb3
    2e7c:	00002dad 	.word	0x00002dad
    2e80:	00002dad 	.word	0x00002dad
    2e84:	00002dad 	.word	0x00002dad
    2e88:	00002dad 	.word	0x00002dad
    2e8c:	00002dad 	.word	0x00002dad
    2e90:	00002dad 	.word	0x00002dad
    2e94:	00002dad 	.word	0x00002dad
    2e98:	00002dad 	.word	0x00002dad
    2e9c:	00002ebf 	.word	0x00002ebf
    2ea0:	2e61      	cmp	r6, #97	; 0x61
    2ea2:	d81a      	bhi.n	2eda <dlms_getPdu+0x172>
    2ea4:	2e5f      	cmp	r6, #95	; 0x5f
    2ea6:	d860      	bhi.n	2f6a <dlms_getPdu+0x202>
    2ea8:	2e26      	cmp	r6, #38	; 0x26
    2eaa:	d80b      	bhi.n	2ec4 <dlms_getPdu+0x15c>
    2eac:	2e24      	cmp	r6, #36	; 0x24
    2eae:	f67f af7d 	bls.w	2dac <dlms_getPdu+0x44>
        case DLMS_COMMAND_GLO_SET_REQUEST:
        case DLMS_COMMAND_GLO_METHOD_REQUEST:
        case DLMS_COMMAND_DED_GET_REQUEST:
        case DLMS_COMMAND_DED_SET_REQUEST:
        case DLMS_COMMAND_DED_METHOD_REQUEST:
            ret = dlms_handleGloDedRequest(settings, data);
    2eb2:	4629      	mov	r1, r5
    2eb4:	4620      	mov	r0, r4
    2eb6:	f7ff febd 	bl	2c34 <dlms_handleGloDedRequest>
    }

#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
#if !defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
    // Get data only blocks if SN is used. This is faster.
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2eba:	2800      	cmp	r0, #0
    2ebc:	d13d      	bne.n	2f3a <dlms_getPdu+0x1d2>
    2ebe:	2e0c      	cmp	r6, #12
    2ec0:	d02b      	beq.n	2f1a <dlms_getPdu+0x1b2>
    2ec2:	e00f      	b.n	2ee4 <dlms_getPdu+0x17c>
        switch (cmd)
    2ec4:	f1a6 032c 	sub.w	r3, r6, #44	; 0x2c
    2ec8:	2b01      	cmp	r3, #1
    2eca:	f63f af6f 	bhi.w	2dac <dlms_getPdu+0x44>
            ret = dlms_handleGloDedResponse(settings, data, index);
    2ece:	463a      	mov	r2, r7
    2ed0:	4629      	mov	r1, r5
    2ed2:	4620      	mov	r0, r4
    2ed4:	f00e fc21 	bl	1171a <dlms_handleGloDedResponse>
            break;
    2ed8:	e7ef      	b.n	2eba <dlms_getPdu+0x152>
        switch (cmd)
    2eda:	f1a6 0362 	sub.w	r3, r6, #98	; 0x62
    2ede:	2b01      	cmp	r3, #1
    2ee0:	f63f af64 	bhi.w	2dac <dlms_getPdu+0x44>
    {
        return 0;
    }
#endif //!defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
    // Get data if all data is read or we want to peek data.
    if (ret == 0 && !data->ignoreValue && data->data.position != data->data.size
    2ee4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    2ee8:	bb33      	cbnz	r3, 2f38 <dlms_getPdu+0x1d0>
    2eea:	89aa      	ldrh	r2, [r5, #12]
    2eec:	896b      	ldrh	r3, [r5, #10]
    2eee:	429a      	cmp	r2, r3
    2ef0:	d022      	beq.n	2f38 <dlms_getPdu+0x1d0>
        && (
    2ef2:	2e0c      	cmp	r6, #12
    2ef4:	d001      	beq.n	2efa <dlms_getPdu+0x192>
#if !defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
            cmd == DLMS_COMMAND_READ_RESPONSE ||
    2ef6:	2ec4      	cmp	r6, #196	; 0xc4
    2ef8:	d11e      	bne.n	2f38 <dlms_getPdu+0x1d0>
#endif //!defined(DLMS_IGNORE_ASSOCIATION_SHORT_NAME)
            cmd == DLMS_COMMAND_GET_RESPONSE)
        && (data->moreData == DLMS_DATA_REQUEST_TYPES_NONE
    2efa:	782b      	ldrb	r3, [r5, #0]
    2efc:	b113      	cbz	r3, 2f04 <dlms_getPdu+0x19c>
            || data->peek))
    2efe:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
    2f02:	b1cb      	cbz	r3, 2f38 <dlms_getPdu+0x1d0>
    {
        ret = dlms_getValueFromData(settings, data);
    2f04:	4629      	mov	r1, r5
    2f06:	4620      	mov	r0, r4
    2f08:	f00e f8af 	bl	1106a <dlms_getValueFromData>
    2f0c:	e015      	b.n	2f3a <dlms_getPdu+0x1d2>
            if ((ret = dlms_handleReadResponse(settings, data, index)) != 0)
    2f0e:	463a      	mov	r2, r7
    2f10:	4629      	mov	r1, r5
    2f12:	4620      	mov	r0, r4
    2f14:	f00e f971 	bl	111fa <dlms_handleReadResponse>
    2f18:	b960      	cbnz	r0, 2f34 <dlms_getPdu+0x1cc>
        && data->commandType == DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT
    2f1a:	78eb      	ldrb	r3, [r5, #3]
    2f1c:	2b02      	cmp	r3, #2
    2f1e:	f000 80c3 	beq.w	30a8 <dlms_getPdu+0x340>
    2f22:	260c      	movs	r6, #12
    2f24:	e7de      	b.n	2ee4 <dlms_getPdu+0x17c>
            if ((ret = dlms_handleGetResponse(settings, data, index)) != 0)
    2f26:	463a      	mov	r2, r7
    2f28:	4629      	mov	r1, r5
    2f2a:	4620      	mov	r0, r4
    2f2c:	f00d ffcd 	bl	10eca <dlms_handleGetResponse>
    2f30:	2800      	cmp	r0, #0
    2f32:	d0d7      	beq.n	2ee4 <dlms_getPdu+0x17c>
                if (ret == DLMS_ERROR_CODE_FALSE)
    2f34:	1c44      	adds	r4, r0, #1
    2f36:	d100      	bne.n	2f3a <dlms_getPdu+0x1d2>
                    return DLMS_ERROR_CODE_OK;
    2f38:	2000      	movs	r0, #0
#else
    data->dataValue.byteArr = &data->data;
    data->dataValue.vt = DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_OCTET_STRING;
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    return ret;
}
    2f3a:	b002      	add	sp, #8
    2f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = dlms_handleSetResponse(settings, data);
    2f40:	4629      	mov	r1, r5
    2f42:	4620      	mov	r0, r4
    2f44:	f00e fa68 	bl	11418 <dlms_handleSetResponse>
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2f48:	2800      	cmp	r0, #0
    2f4a:	d1f6      	bne.n	2f3a <dlms_getPdu+0x1d2>
    2f4c:	e7ca      	b.n	2ee4 <dlms_getPdu+0x17c>
            ret = dlms_handleWriteResponse(data);
    2f4e:	4628      	mov	r0, r5
    2f50:	f00e f863 	bl	1101a <handleWriteResponse>
            break;
    2f54:	e7f8      	b.n	2f48 <dlms_getPdu+0x1e0>
            ret = dlms_handleMethodResponse(settings, data);
    2f56:	4629      	mov	r1, r5
    2f58:	4620      	mov	r0, r4
    2f5a:	f00e fa08 	bl	1136e <dlms_handleMethodResponse>
            break;
    2f5e:	e7f3      	b.n	2f48 <dlms_getPdu+0x1e0>
            ret = dlms_handleGbt(settings, data);
    2f60:	4629      	mov	r1, r5
    2f62:	4620      	mov	r0, r4
    2f64:	f00e fb56 	bl	11614 <dlms_handleGbt>
            break;
    2f68:	e7ee      	b.n	2f48 <dlms_getPdu+0x1e0>
            data->data.position -= 1;
    2f6a:	89ab      	ldrh	r3, [r5, #12]
    2f6c:	3b01      	subs	r3, #1
    2f6e:	81ab      	strh	r3, [r5, #12]
    if (ret == 0 && cmd == DLMS_COMMAND_READ_RESPONSE
    2f70:	e7b8      	b.n	2ee4 <dlms_getPdu+0x17c>
            ret = dlms_handleConfirmedServiceError(&data->data);
    2f72:	4640      	mov	r0, r8
    2f74:	f00e fb0b 	bl	1158e <dlms_handleConfirmedServiceError>
            break;
    2f78:	e7e6      	b.n	2f48 <dlms_getPdu+0x1e0>
            ret = dlms_handleExceptionResponse(&data->data);
    2f7a:	4640      	mov	r0, r8
    2f7c:	f00e fb28 	bl	115d0 <dlms_handleExceptionResponse>
            break;
    2f80:	e7e2      	b.n	2f48 <dlms_getPdu+0x1e0>
            if (settings->server)
    2f82:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2f86:	b14b      	cbz	r3, 2f9c <dlms_getPdu+0x234>
                if ((settings->connected & DLMS_CONNECTION_STATE_DLMS) == 0)
    2f88:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2f8c:	0799      	lsls	r1, r3, #30
    2f8e:	f140 8090 	bpl.w	30b2 <dlms_getPdu+0x34a>
                ret = dlms_handleGloDedRequest(settings, data);
    2f92:	4629      	mov	r1, r5
    2f94:	4620      	mov	r0, r4
    2f96:	f7ff fe4d 	bl	2c34 <dlms_handleGloDedRequest>
    2f9a:	e7d5      	b.n	2f48 <dlms_getPdu+0x1e0>
                ret = dlms_handleGloDedResponse(settings, data, index);
    2f9c:	463a      	mov	r2, r7
    2f9e:	4629      	mov	r1, r5
    2fa0:	4620      	mov	r0, r4
    2fa2:	f00e fbba 	bl	1171a <dlms_handleGloDedResponse>
    2fa6:	e7cf      	b.n	2f48 <dlms_getPdu+0x1e0>
            ret = dlms_handleGeneralCiphering(settings, data);
    2fa8:	4629      	mov	r1, r5
    2faa:	4620      	mov	r0, r4
    2fac:	f00e fc22 	bl	117f4 <dlms_handleGeneralCiphering>
            break;
    2fb0:	e7ca      	b.n	2f48 <dlms_getPdu+0x1e0>
            ret = dlms_handleDataNotification(settings, data);
    2fb2:	4629      	mov	r1, r5
    2fb4:	4620      	mov	r0, r4
    2fb6:	f00e faa4 	bl	11502 <dlms_handleDataNotification>
            break;
    2fba:	e7c5      	b.n	2f48 <dlms_getPdu+0x1e0>
    else if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
    2fbc:	780b      	ldrb	r3, [r1, #0]
    2fbe:	07da      	lsls	r2, r3, #31
    2fc0:	f53f af7d 	bmi.w	2ebe <dlms_getPdu+0x156>
        if (!data->peek && data->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
    2fc4:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
    2fc8:	4318      	orrs	r0, r3
    2fca:	d108      	bne.n	2fde <dlms_getPdu+0x276>
            if (!settings->server || data->command == DLMS_COMMAND_AARE || data->command == DLMS_COMMAND_AARQ)
    2fcc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    2fd0:	b11b      	cbz	r3, 2fda <dlms_getPdu+0x272>
    2fd2:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
    2fd6:	2b01      	cmp	r3, #1
    2fd8:	d805      	bhi.n	2fe6 <dlms_getPdu+0x27e>
                data->data.position = 0;
    2fda:	2300      	movs	r3, #0
    2fdc:	81ab      	strh	r3, [r5, #12]
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2fde:	2ee0      	cmp	r6, #224	; 0xe0
    2fe0:	d005      	beq.n	2fee <dlms_getPdu+0x286>
    int ret = DLMS_ERROR_CODE_OK;
    2fe2:	2000      	movs	r0, #0
    2fe4:	e00e      	b.n	3004 <dlms_getPdu+0x29c>
                data->data.position = 1;
    2fe6:	2301      	movs	r3, #1
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2fe8:	2ee0      	cmp	r6, #224	; 0xe0
                data->data.position = 1;
    2fea:	818b      	strh	r3, [r1, #12]
        if (cmd == DLMS_COMMAND_GENERAL_BLOCK_TRANSFER)
    2fec:	d10d      	bne.n	300a <dlms_getPdu+0x2a2>
            data->data.position = data->cipherIndex + 1;
    2fee:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    2ff0:	3301      	adds	r3, #1
    2ff2:	81ab      	strh	r3, [r5, #12]
            ret = dlms_handleGbt(settings, data);
    2ff4:	4629      	mov	r1, r5
    2ff6:	4620      	mov	r0, r4
    2ff8:	f00e fb0c 	bl	11614 <dlms_handleGbt>
            data->cipherIndex = (uint16_t)data->data.size;
    2ffc:	896b      	ldrh	r3, [r5, #10]
    2ffe:	866b      	strh	r3, [r5, #50]	; 0x32
            data->command = DLMS_COMMAND_NONE;
    3000:	2300      	movs	r3, #0
    3002:	706b      	strb	r3, [r5, #1]
        if (settings->server)
    3004:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    3008:	b1a3      	cbz	r3, 3034 <dlms_getPdu+0x2cc>
            switch (cmd)
    300a:	2ec9      	cmp	r6, #201	; 0xc9
    300c:	d80f      	bhi.n	302e <dlms_getPdu+0x2c6>
    300e:	2ec7      	cmp	r6, #199	; 0xc7
    3010:	d804      	bhi.n	301c <dlms_getPdu+0x2b4>
    3012:	f1a6 0325 	sub.w	r3, r6, #37	; 0x25
    3016:	2b01      	cmp	r3, #1
    3018:	f63f af4f 	bhi.w	2eba <dlms_getPdu+0x152>
                data->data.position = (data->cipherIndex);
    301c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    301e:	81ab      	strh	r3, [r5, #12]
                data->command = DLMS_COMMAND_NONE;
    3020:	2200      	movs	r2, #0
    3022:	706a      	strb	r2, [r5, #1]
                ret = dlms_getPdu(settings, data, 0);
    3024:	4629      	mov	r1, r5
    3026:	4620      	mov	r0, r4
    3028:	f7ff fe9e 	bl	2d68 <dlms_getPdu>
                break;
    302c:	e745      	b.n	2eba <dlms_getPdu+0x152>
            switch (cmd)
    302e:	2ecb      	cmp	r6, #203	; 0xcb
    3030:	d18a      	bne.n	2f48 <dlms_getPdu+0x1e0>
    3032:	e7f3      	b.n	301c <dlms_getPdu+0x2b4>
            switch (cmd)
    3034:	2e2d      	cmp	r6, #45	; 0x2d
            data->command = DLMS_COMMAND_NONE;
    3036:	706b      	strb	r3, [r5, #1]
            switch (cmd)
    3038:	d806      	bhi.n	3048 <dlms_getPdu+0x2e0>
    303a:	2e2b      	cmp	r6, #43	; 0x2b
    303c:	f67f af3d 	bls.w	2eba <dlms_getPdu+0x152>
                data->data.position = data->cipherIndex;
    3040:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    3042:	81ab      	strh	r3, [r5, #12]
                ret = dlms_getPdu(settings, data, 0);
    3044:	2200      	movs	r2, #0
    3046:	e7ed      	b.n	3024 <dlms_getPdu+0x2bc>
            switch (cmd)
    3048:	f106 0334 	add.w	r3, r6, #52	; 0x34
    304c:	b2db      	uxtb	r3, r3
    304e:	2b10      	cmp	r3, #16
    3050:	f63f af7a 	bhi.w	2f48 <dlms_getPdu+0x1e0>
    3054:	f1a6 03cc 	sub.w	r3, r6, #204	; 0xcc
    3058:	2b10      	cmp	r3, #16
    305a:	f63f af2e 	bhi.w	2eba <dlms_getPdu+0x152>
    305e:	a201      	add	r2, pc, #4	; (adr r2, 3064 <dlms_getPdu+0x2fc>)
    3060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3064:	00003041 	.word	0x00003041
    3068:	00003041 	.word	0x00003041
    306c:	00002ebb 	.word	0x00002ebb
    3070:	00003041 	.word	0x00003041
    3074:	00002ebb 	.word	0x00002ebb
    3078:	00002ebb 	.word	0x00002ebb
    307c:	00002ebb 	.word	0x00002ebb
    3080:	00002ebb 	.word	0x00002ebb
    3084:	00003041 	.word	0x00003041
    3088:	00003041 	.word	0x00003041
    308c:	00002ebb 	.word	0x00002ebb
    3090:	00003041 	.word	0x00003041
    3094:	00002ebb 	.word	0x00002ebb
    3098:	00002ebb 	.word	0x00002ebb
    309c:	00002ebb 	.word	0x00002ebb
    30a0:	00003041 	.word	0x00003041
    30a4:	00003041 	.word	0x00003041
        && (data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
    30a8:	782b      	ldrb	r3, [r5, #0]
    30aa:	07db      	lsls	r3, r3, #31
    30ac:	f53f af44 	bmi.w	2f38 <dlms_getPdu+0x1d0>
    30b0:	e737      	b.n	2f22 <dlms_getPdu+0x1ba>
                    return DLMS_ERROR_CODE_INVALID_DECIPHERING_ERROR;
    30b2:	f240 101d 	movw	r0, #285	; 0x11d
    30b6:	e740      	b.n	2f3a <dlms_getPdu+0x1d2>

000030b8 <plc_reset>:
{
    settings->plcSettings.initialCredit = 7;
    settings->plcSettings.currentCredit = 7;
    settings->plcSettings.deltaCredit = 0;
    //New device addresses are used.
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    30b8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    settings->plcSettings.initialCredit = 7;
    30bc:	f240 7307 	movw	r3, #1799	; 0x707
    30c0:	f8a0 3078 	strh.w	r3, [r0, #120]	; 0x78
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    30c4:	2a05      	cmp	r2, #5
    settings->plcSettings.deltaCredit = 0;
    30c6:	f04f 0300 	mov.w	r3, #0
    30ca:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
    if (settings->interfaceType == DLMS_INTERFACE_TYPE_PLC)
    30ce:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    30d2:	d10b      	bne.n	30ec <plc_reset+0x34>
    {
        if (settings->server)
    30d4:	b143      	cbz	r3, 30e8 <plc_reset+0x30>
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_NEW;
    30d6:	4b09      	ldr	r3, [pc, #36]	; (30fc <plc_reset+0x44>)
            settings->plcSettings.macDestinationAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
        }
        else
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
    30d8:	67c3      	str	r3, [r0, #124]	; 0x7c
            settings->plcSettings.macDestinationAddress = DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL;
        }
        settings->plcSettings.allowedTimeSlots = 10;
    30da:	230a      	movs	r3, #10
        else
        {
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
            settings->plcSettings.macDestinationAddress = DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL;
        }
        settings->plcSettings.allowedTimeSlots = 0x14;
    30dc:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
    }
    settings->plcSettings.responseProbability = 100;
    30e0:	2364      	movs	r3, #100	; 0x64
    30e2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
    30e6:	4770      	bx	lr
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_INITIATOR;
    30e8:	4b05      	ldr	r3, [pc, #20]	; (3100 <plc_reset+0x48>)
    30ea:	e7f5      	b.n	30d8 <plc_reset+0x20>
        if (settings->server)
    30ec:	b11b      	cbz	r3, 30f6 <plc_reset+0x3e>
            settings->plcSettings.macSourceAddress = DLMS_PLC_SOURCE_ADDRESS_NEW;
    30ee:	4b05      	ldr	r3, [pc, #20]	; (3104 <plc_reset+0x4c>)
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
    30f0:	67c3      	str	r3, [r0, #124]	; 0x7c
        settings->plcSettings.allowedTimeSlots = 0x14;
    30f2:	2314      	movs	r3, #20
    30f4:	e7f2      	b.n	30dc <plc_reset+0x24>
            settings->plcSettings.macSourceAddress = DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR;
    30f6:	4b04      	ldr	r3, [pc, #16]	; (3108 <plc_reset+0x50>)
    30f8:	e7fa      	b.n	30f0 <plc_reset+0x38>
    30fa:	bf00      	nop
    30fc:	0c000ffe 	.word	0x0c000ffe
    3100:	0fff0c00 	.word	0x0fff0c00
    3104:	0c010ffe 	.word	0x0c010ffe
    3108:	0fff0c01 	.word	0x0fff0c01

0000310c <cl_init>:
{
    310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3110:	4604      	mov	r4, r0
    settings->protocolVersion = 0;
    3112:	2500      	movs	r5, #0
{
    3114:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    3118:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    settings->serverAddress = serverAddress;
    311c:	6323      	str	r3, [r4, #48]	; 0x30
    settings->blockIndex = 1;
    311e:	f04f 0801 	mov.w	r8, #1
    settings->dlmsVersionNumber = 6;
    3122:	2306      	movs	r3, #6
    BYTE_BUFFER_INIT(&settings->password);
    3124:	f104 0738 	add.w	r7, r4, #56	; 0x38
{
    3128:	460e      	mov	r6, r1
    312a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    settings->clientAddress = clientAddress;
    312e:	85e2      	strh	r2, [r4, #46]	; 0x2e
    settings->dlmsVersionNumber = 6;
    3130:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    settings->useLogicalNameReferencing = useLogicalNameReferencing;
    3134:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    settings->interfaceType = interfaceType;
    3138:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    settings->authentication = authentication;
    313c:	f884 1036 	strb.w	r1, [r4, #54]	; 0x36
    settings->protocolVersion = 0;
    3140:	f8a4 50da 	strh.w	r5, [r4, #218]	; 0xda
    settings->preEstablishedSystemTitle = NULL;
    3144:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
    settings->autoIncreaseInvokeID = 0;
    3148:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    settings->blockIndex = 1;
    314c:	f8c4 80a0 	str.w	r8, [r4, #160]	; 0xa0
    BYTE_BUFFER_INIT(&settings->password);
    3150:	4638      	mov	r0, r7
    3152:	f00b f8f3 	bl	e33c <bb_init>
    bb_addString(&settings->password, password);
    3156:	4649      	mov	r1, r9
    3158:	4638      	mov	r0, r7
    315a:	f00b fa89 	bl	e670 <bb_addString>
__ssp_bos_icheck3(memset, void *, int)
    315e:	61e5      	str	r5, [r4, #28]
    3160:	6225      	str	r5, [r4, #32]
    BYTE_BUFFER_INIT(&settings->kek);
    3162:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3166:	f00b f8e9 	bl	e33c <bb_init>
    settings->maxServerPDUSize = 1024;
    316a:	f44f 6380 	mov.w	r3, #1024	; 0x400
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    316e:	4920      	ldr	r1, [pc, #128]	; (31f0 <cl_init+0xe4>)
    settings->maxServerPDUSize = 1024;
    3170:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    3174:	4b1f      	ldr	r3, [pc, #124]	; (31f4 <cl_init+0xe8>)
    settings->server = 0;
    3176:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        settings->proposedConformance = (DLMS_CONFORMANCE)(DLMS_CONFORMANCE_INFORMATION_REPORT |
    317a:	42ae      	cmp	r6, r5
    317c:	bf14      	ite	ne
    317e:	460e      	movne	r6, r1
    3180:	461e      	moveq	r6, r3
    settings->maxInfoTX = settings->maxInfoRX = 0x80;
    3182:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
    settings->maxPduSize = 0xFFFF;
    3186:	f64f 77ff 	movw	r7, #65535	; 0xffff
    settings->maxInfoTX = settings->maxInfoRX = 0x80;
    318a:	6663      	str	r3, [r4, #100]	; 0x64
    settings->windowSizeTX = settings->windowSizeRX = 1;
    318c:	f240 1301 	movw	r3, #257	; 0x101
    3190:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    oa_init(&settings->objects);
    3194:	f104 0098 	add.w	r0, r4, #152	; 0x98
    settings->maxPduSize = 0xFFFF;
    3198:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if (useLogicalNameReferencing)
    319c:	65e6      	str	r6, [r4, #92]	; 0x5c
    settings->longInvokeID = 0;
    319e:	62a5      	str	r5, [r4, #40]	; 0x28
    settings->connected = DLMS_CONNECTION_STATE_NONE;
    31a0:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    oa_init(&settings->objects);
    31a4:	f018 fc74 	bl	1ba90 <oa_init>
    settings->connected = DLMS_CONNECTION_STATE_NONE;
    31a8:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    settings->customChallenges = 0;
    31ac:	7025      	strb	r5, [r4, #0]
    settings->invokeID = 1;
    31ae:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
    BYTE_BUFFER_INIT(&settings->ctoSChallenge);
    31b2:	1d20      	adds	r0, r4, #4
    31b4:	f00b f8c2 	bl	e33c <bb_init>
    BYTE_BUFFER_INIT(&settings->stoCChallenge);
    31b8:	f104 0010 	add.w	r0, r4, #16
    31bc:	f00b f8be 	bl	e33c <bb_init>
    cip_init(&settings->cipher);
    31c0:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    settings->priority = DLMS_PRIORITY_HIGH;
    31c4:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    cip_init(&settings->cipher);
    31c8:	f7fe f9fa 	bl	15c0 <cip_init>
    resetFrameSequence(settings);
    31cc:	4620      	mov	r0, r4
    settings->userId = -1;
    31ce:	f8a4 70d8 	strh.w	r7, [r4, #216]	; 0xd8
    resetFrameSequence(settings);
    31d2:	f00e fbdd 	bl	11990 <resetFrameSequence>
    oa_init(&settings->releasedObjects);
    31d6:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
    31da:	f018 fc59 	bl	1ba90 <oa_init>
    settings->expectedClientSystemTitle = NULL;
    31de:	e9c4 553c 	strd	r5, r5, [r4, #240]	; 0xf0
    settings->expectedSecuritySuite = 0xFF;
    31e2:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
    plc_reset(settings);
    31e6:	4620      	mov	r0, r4
}
    31e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    plc_reset(settings);
    31ec:	f7ff bf64 	b.w	30b8 <plc_reset>
    31f0:	00b87800 	.word	0x00b87800
    31f4:	0004c038 	.word	0x0004c038

000031f8 <getActivityCalendarDayProfileTable>:
    return ret;
}
#endif //DLMS_IGNORE_ACTION_SCHEDULE
#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int getActivityCalendarDayProfileTable(gxArray* list, gxByteBuffer* ba)
{
    31f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    31fc:	460c      	mov	r4, r1
    31fe:	4605      	mov	r5, r0
    gxDayProfile* dp;
    gxDayProfileAction* action;
    int ret;
    uint16_t pos, pos2;
    if ((ret = cosem_setArray(ba, list->size)) != 0)
    3200:	88c1      	ldrh	r1, [r0, #6]
    3202:	4620      	mov	r0, r4
    3204:	f00c f839 	bl	f27a <cosem_setArray>
    3208:	b928      	cbnz	r0, 3216 <getActivityCalendarDayProfileTable+0x1e>
                break;
            }
#endif //DLMS_IGNORE_MALLOC
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    320a:	4f28      	ldr	r7, [pc, #160]	; (32ac <getActivityCalendarDayProfileTable+0xb4>)
    320c:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
    320e:	88eb      	ldrh	r3, [r5, #6]
    3210:	b2b1      	uxth	r1, r6
    3212:	428b      	cmp	r3, r1
    3214:	d102      	bne.n	321c <getActivityCalendarDayProfileTable+0x24>
                break;
            }
        }
    }
    return ret;
}
    3216:	b002      	add	sp, #8
    3218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&dp)) != 0)
    321c:	466a      	mov	r2, sp
    321e:	4628      	mov	r0, r5
    3220:	f00e fcbb 	bl	11b9a <arr_getByIndex>
    3224:	2800      	cmp	r0, #0
    3226:	d1f6      	bne.n	3216 <getActivityCalendarDayProfileTable+0x1e>
        if ((ret = cosem_setStructure(ba, 2)) != 0 ||
    3228:	2102      	movs	r1, #2
    322a:	4620      	mov	r0, r4
    322c:	f00c f817 	bl	f25e <cosem_setStructure>
    3230:	2800      	cmp	r0, #0
    3232:	d1f0      	bne.n	3216 <getActivityCalendarDayProfileTable+0x1e>
            (ret = cosem_setUInt8(ba, dp->dayId)) != 0 ||
    3234:	9b00      	ldr	r3, [sp, #0]
    3236:	4620      	mov	r0, r4
    3238:	7819      	ldrb	r1, [r3, #0]
    323a:	f00b ffb5 	bl	f1a8 <cosem_setUInt8>
        if ((ret = cosem_setStructure(ba, 2)) != 0 ||
    323e:	2800      	cmp	r0, #0
    3240:	d1e9      	bne.n	3216 <getActivityCalendarDayProfileTable+0x1e>
            (ret = cosem_setArray(ba, dp->daySchedules.size)) != 0)
    3242:	9b00      	ldr	r3, [sp, #0]
    3244:	4620      	mov	r0, r4
    3246:	8959      	ldrh	r1, [r3, #10]
    3248:	f00c f817 	bl	f27a <cosem_setArray>
            (ret = cosem_setUInt8(ba, dp->dayId)) != 0 ||
    324c:	2800      	cmp	r0, #0
    324e:	d1e2      	bne.n	3216 <getActivityCalendarDayProfileTable+0x1e>
    3250:	4680      	mov	r8, r0
        for (pos2 = 0; pos2 != dp->daySchedules.size; ++pos2)
    3252:	9800      	ldr	r0, [sp, #0]
    3254:	8943      	ldrh	r3, [r0, #10]
    3256:	fa1f f188 	uxth.w	r1, r8
    325a:	428b      	cmp	r3, r1
    325c:	d101      	bne.n	3262 <getActivityCalendarDayProfileTable+0x6a>
    325e:	2000      	movs	r0, #0
    3260:	e020      	b.n	32a4 <getActivityCalendarDayProfileTable+0xac>
            if ((ret = arr_getByIndex(&dp->daySchedules, pos2, (void**)&action)) != 0)
    3262:	aa01      	add	r2, sp, #4
    3264:	3004      	adds	r0, #4
    3266:	f00e fc98 	bl	11b9a <arr_getByIndex>
    326a:	b9d8      	cbnz	r0, 32a4 <getActivityCalendarDayProfileTable+0xac>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
    326c:	2103      	movs	r1, #3
    326e:	4620      	mov	r0, r4
    3270:	f00b fff5 	bl	f25e <cosem_setStructure>
    3274:	b9b0      	cbnz	r0, 32a4 <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
    3276:	9901      	ldr	r1, [sp, #4]
    3278:	4620      	mov	r0, r4
    327a:	f00b ff14 	bl	f0a6 <cosem_setTimeAsOctetString>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
    327e:	b988      	cbnz	r0, 32a4 <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    3280:	9b01      	ldr	r3, [sp, #4]
    3282:	68d9      	ldr	r1, [r3, #12]
    3284:	b181      	cbz	r1, 32a8 <getActivityCalendarDayProfileTable+0xb0>
    3286:	3106      	adds	r1, #6
    3288:	2206      	movs	r2, #6
    328a:	4620      	mov	r0, r4
    328c:	f00b ff6b 	bl	f166 <cosem_setOctetString2>
                (ret = cosem_setTimeAsOctetString(ba, &action->startTime)) != 0 ||
    3290:	b940      	cbnz	r0, 32a4 <getActivityCalendarDayProfileTable+0xac>
                (ret = cosem_setUInt16(ba, action->scriptSelector)) != 0)
    3292:	9b01      	ldr	r3, [sp, #4]
    3294:	4620      	mov	r0, r4
    3296:	8a19      	ldrh	r1, [r3, #16]
    3298:	f00b ff94 	bl	f1c4 <cosem_setUInt16>
    329c:	f108 0801 	add.w	r8, r8, #1
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    32a0:	2800      	cmp	r0, #0
    32a2:	d0d6      	beq.n	3252 <getActivityCalendarDayProfileTable+0x5a>
    for (pos = 0; pos != list->size; ++pos)
    32a4:	3601      	adds	r6, #1
    32a6:	e7b2      	b.n	320e <getActivityCalendarDayProfileTable+0x16>
                (ret = cosem_setOctetString2(ba, SCRIPT_LOGICAL_NAME, 6)) != 0 ||
    32a8:	4639      	mov	r1, r7
    32aa:	e7ed      	b.n	3288 <getActivityCalendarDayProfileTable+0x90>
    32ac:	0001fa36 	.word	0x0001fa36

000032b0 <getLNObjects>:
// Returns LN Association View.
int getLNObjects(
    dlmsSettings* settings,
    gxValueEventArg* e,
    gxByteBuffer* data)
{
    32b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    gxAssociationLogicalName* object = (gxAssociationLogicalName*)e->target;
    int ret;
    uint16_t pos, pos2;
    unsigned char found = 0;
    gxObject* it, * it2;
    unsigned char ln[] = { 0, 0, 40, 0, 0, 255 };
    32b4:	4b83      	ldr	r3, [pc, #524]	; (34c4 <getLNObjects+0x214>)
    gxAssociationLogicalName* object = (gxAssociationLogicalName*)e->target;
    32b6:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
    32ba:	b087      	sub	sp, #28
    32bc:	4607      	mov	r7, r0
    unsigned char ln[] = { 0, 0, 40, 0, 0, 255 };
    32be:	6818      	ldr	r0, [r3, #0]
    32c0:	9004      	str	r0, [sp, #16]
    32c2:	889b      	ldrh	r3, [r3, #4]
    32c4:	f8ad 3014 	strh.w	r3, [sp, #20]
{
    32c8:	4688      	mov	r8, r1
    if ((ret = bb_capacity(data, settings->maxPduSize)) != 0)
    32ca:	4610      	mov	r0, r2
    32cc:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
{
    32d0:	4615      	mov	r5, r2
    if ((ret = bb_capacity(data, settings->maxPduSize)) != 0)
    32d2:	f00b f839 	bl	e348 <bb_capacity>
    32d6:	4604      	mov	r4, r0
    32d8:	2800      	cmp	r0, #0
    32da:	f040 80ed 	bne.w	34b8 <getLNObjects+0x208>
    {
        return ret;
    }
    //Add count only for first time.
    if (!e->transaction)
    32de:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    32e2:	bbb3      	cbnz	r3, 3352 <getLNObjects+0xa2>
    32e4:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    32e8:	4683      	mov	fp, r0
    unsigned char found = 0;
    32ea:	4682      	mov	sl, r0
    {
        uint16_t count = object->objectList.size;
        //Find current association and if nout found add it.
        for (pos = 0; pos != object->objectList.size; ++pos)
    32ec:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    32f0:	fa1f f18b 	uxth.w	r1, fp
    32f4:	428b      	cmp	r3, r1
    32f6:	d159      	bne.n	33ac <getLNObjects+0xfc>
                        break;
                    }
                }
            }
        }
        if (!found)
    32f8:	f1ba 0f00 	cmp.w	sl, #0
    32fc:	d101      	bne.n	3302 <getLNObjects+0x52>
        {
            ++count;
    32fe:	3601      	adds	r6, #1
    3300:	b2b6      	uxth	r6, r6
        }
        e->transactionEndIndex = count;
    3302:	f8c8 603c 	str.w	r6, [r8, #60]	; 0x3c
        if ((ret = cosem_setArray(data, count)) != 0)
    3306:	4631      	mov	r1, r6
    3308:	4628      	mov	r0, r5
    330a:	f00b ffb6 	bl	f27a <cosem_setArray>
    330e:	b9f0      	cbnz	r0, 334e <getLNObjects+0x9e>
        {
            return ret;
        }
        if (!found)
    3310:	f1ba 0f00 	cmp.w	sl, #0
    3314:	d11d      	bne.n	3352 <getLNObjects+0xa2>
        {
            //Count
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3316:	2104      	movs	r1, #4
    3318:	4628      	mov	r0, r5
    331a:	f00b ffa0 	bl	f25e <cosem_setStructure>
    331e:	b9b0      	cbnz	r0, 334e <getLNObjects+0x9e>
                //ClassID
                (ret = cosem_setUInt16(data, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)) != 0 ||
    3320:	210f      	movs	r1, #15
    3322:	4628      	mov	r0, r5
    3324:	f00b ff4e 	bl	f1c4 <cosem_setUInt16>
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3328:	b988      	cbnz	r0, 334e <getLNObjects+0x9e>
                //Version
                (ret = cosem_setUInt8(data, object->base.version)) != 0 ||
    332a:	f899 1002 	ldrb.w	r1, [r9, #2]
    332e:	4628      	mov	r0, r5
    3330:	f00b ff3a 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt16(data, DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)) != 0 ||
    3334:	b958      	cbnz	r0, 334e <getLNObjects+0x9e>
                //LN.
                (ret = cosem_setOctetString2(data, ln, 6)) != 0)
    3336:	2206      	movs	r2, #6
    3338:	a904      	add	r1, sp, #16
    333a:	4628      	mov	r0, r5
    333c:	f00b ff13 	bl	f166 <cosem_setOctetString2>
                (ret = cosem_setUInt8(data, object->base.version)) != 0 ||
    3340:	b928      	cbnz	r0, 334e <getLNObjects+0x9e>
            {
                return ret;
            }
            //Access rights.
            ret = getLNAccessRights(settings, &object->base, data);
    3342:	462a      	mov	r2, r5
    3344:	4649      	mov	r1, r9
    3346:	4638      	mov	r0, r7
    3348:	f00e fe3b 	bl	11fc2 <getLNAccessRights>
            if (ret != 0)
    334c:	b108      	cbz	r0, 3352 <getLNObjects+0xa2>
        }
        ignore = 0;
        //Remove objects that are only internal use.
        for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
        {
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    334e:	4604      	mov	r4, r0
    3350:	e0b2      	b.n	34b8 <getLNObjects+0x208>
    for (pos = (uint16_t)e->transactionStartIndex; pos != object->objectList.size; ++pos)
    3352:	f8b8 a038 	ldrh.w	sl, [r8, #56]	; 0x38
    3356:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    335a:	4553      	cmp	r3, sl
    335c:	f000 80ac 	beq.w	34b8 <getLNObjects+0x208>
        ret = oa_getByIndex(&object->objectList, pos, &it);
    3360:	aa02      	add	r2, sp, #8
    3362:	4651      	mov	r1, sl
    3364:	f109 0014 	add.w	r0, r9, #20
    3368:	f018 fc19 	bl	1bb9e <oa_getByIndex>
        if (ret != 0)
    336c:	4606      	mov	r6, r0
    336e:	2800      	cmp	r0, #0
    3370:	f040 80a6 	bne.w	34c0 <getLNObjects+0x210>
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    3374:	f107 0b90 	add.w	fp, r7, #144	; 0x90
        for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
    3378:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
    337c:	b2b1      	uxth	r1, r6
    337e:	428b      	cmp	r3, r1
    3380:	d14f      	bne.n	3422 <getLNObjects+0x172>
                break;
            }
        }
        if (!ignore)
        {
            if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    3382:	9902      	ldr	r1, [sp, #8]
    3384:	880b      	ldrh	r3, [r1, #0]
    3386:	2b0f      	cmp	r3, #15
    3388:	d103      	bne.n	3392 <getLNObjects+0xe2>
            {
                if (!(it == e->target || memcmp(ln, it->logicalName, 6) == 0))
    338a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    338e:	4299      	cmp	r1, r3
    3390:	d158      	bne.n	3444 <getLNObjects+0x194>
                    continue;
                }
            }
            pduSize = (uint16_t)data->size;
            //Count
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3392:	2104      	movs	r1, #4
    3394:	4628      	mov	r0, r5
            pduSize = (uint16_t)data->size;
    3396:	88ee      	ldrh	r6, [r5, #6]
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    3398:	f00b ff61 	bl	f25e <cosem_setStructure>
    339c:	2800      	cmp	r0, #0
    339e:	d059      	beq.n	3454 <getLNObjects+0x1a4>
                }
            }
            ++e->transactionStartIndex;
        }
    }
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    33a0:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
            ret = getLNAccessRights(settings, it, data);
    33a4:	4604      	mov	r4, r0
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
    33a6:	f000 8085 	beq.w	34b4 <getLNObjects+0x204>
    33aa:	e085      	b.n	34b8 <getLNObjects+0x208>
            if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0)
    33ac:	aa02      	add	r2, sp, #8
    33ae:	f109 0014 	add.w	r0, r9, #20
    33b2:	f018 fbf4 	bl	1bb9e <oa_getByIndex>
    33b6:	2800      	cmp	r0, #0
    33b8:	d1c9      	bne.n	334e <getLNObjects+0x9e>
            if (it->objectType == DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME)
    33ba:	9902      	ldr	r1, [sp, #8]
    33bc:	880b      	ldrh	r3, [r1, #0]
    33be:	2b0f      	cmp	r3, #15
    33c0:	d10d      	bne.n	33de <getLNObjects+0x12e>
                if (memcmp(ln, it->logicalName, 6) == 0)
    33c2:	2206      	movs	r2, #6
    33c4:	4411      	add	r1, r2
    33c6:	a804      	add	r0, sp, #16
    33c8:	f01a ff0d 	bl	1e1e6 <memcmp>
    33cc:	b330      	cbz	r0, 341c <getLNObjects+0x16c>
                else if (it != e->target)
    33ce:	f8d8 2014 	ldr.w	r2, [r8, #20]
    33d2:	9b02      	ldr	r3, [sp, #8]
    33d4:	429a      	cmp	r2, r3
                    --count;
    33d6:	bf1c      	itt	ne
    33d8:	f106 36ff 	addne.w	r6, r6, #4294967295
    33dc:	b2b6      	uxthne	r6, r6
            if (!found)
    33de:	f1ba 0f00 	cmp.w	sl, #0
    33e2:	d118      	bne.n	3416 <getLNObjects+0x166>
                    if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    33e4:	f107 0290 	add.w	r2, r7, #144	; 0x90
    33e8:	4653      	mov	r3, sl
    33ea:	9200      	str	r2, [sp, #0]
                for (pos2 = 0; pos2 != settings->internalObjects.size; ++pos2)
    33ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
    33f0:	b299      	uxth	r1, r3
    33f2:	428a      	cmp	r2, r1
    33f4:	d00f      	beq.n	3416 <getLNObjects+0x166>
                    if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    33f6:	9800      	ldr	r0, [sp, #0]
    33f8:	9301      	str	r3, [sp, #4]
    33fa:	aa03      	add	r2, sp, #12
    33fc:	f018 fbcf 	bl	1bb9e <oa_getByIndex>
    3400:	2800      	cmp	r0, #0
    3402:	d1a4      	bne.n	334e <getLNObjects+0x9e>
                    if (it2 == it)
    3404:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3408:	9b01      	ldr	r3, [sp, #4]
    340a:	4291      	cmp	r1, r2
    340c:	f103 0301 	add.w	r3, r3, #1
    3410:	d1ec      	bne.n	33ec <getLNObjects+0x13c>
                        --count;
    3412:	3e01      	subs	r6, #1
    3414:	b2b6      	uxth	r6, r6
        for (pos = 0; pos != object->objectList.size; ++pos)
    3416:	f10b 0b01 	add.w	fp, fp, #1
    341a:	e767      	b.n	32ec <getLNObjects+0x3c>
                    found = 1;
    341c:	f04f 0a01 	mov.w	sl, #1
    3420:	e7f9      	b.n	3416 <getLNObjects+0x166>
            if ((ret = oa_getByIndex(&settings->internalObjects, pos2, &it2)) != 0)
    3422:	aa03      	add	r2, sp, #12
    3424:	4658      	mov	r0, fp
    3426:	f018 fbba 	bl	1bb9e <oa_getByIndex>
    342a:	2800      	cmp	r0, #0
    342c:	d18f      	bne.n	334e <getLNObjects+0x9e>
            if (it2 == it)
    342e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
    3432:	429a      	cmp	r2, r3
    3434:	f106 0601 	add.w	r6, r6, #1
    3438:	d19e      	bne.n	3378 <getLNObjects+0xc8>
    for (pos = (uint16_t)e->transactionStartIndex; pos != object->objectList.size; ++pos)
    343a:	f10a 0a01 	add.w	sl, sl, #1
    343e:	fa1f fa8a 	uxth.w	sl, sl
    3442:	e788      	b.n	3356 <getLNObjects+0xa6>
                if (!(it == e->target || memcmp(ln, it->logicalName, 6) == 0))
    3444:	2206      	movs	r2, #6
    3446:	4411      	add	r1, r2
    3448:	a804      	add	r0, sp, #16
    344a:	f01a fecc 	bl	1e1e6 <memcmp>
    344e:	2800      	cmp	r0, #0
    3450:	d09f      	beq.n	3392 <getLNObjects+0xe2>
    3452:	e7f2      	b.n	343a <getLNObjects+0x18a>
                (ret = cosem_setUInt16(data, it->objectType)) != 0 ||
    3454:	9b02      	ldr	r3, [sp, #8]
    3456:	4628      	mov	r0, r5
    3458:	8819      	ldrh	r1, [r3, #0]
    345a:	f00b feb3 	bl	f1c4 <cosem_setUInt16>
            if ((ret = cosem_setStructure(data, 4)) != 0 ||
    345e:	2800      	cmp	r0, #0
    3460:	d19e      	bne.n	33a0 <getLNObjects+0xf0>
                (ret = cosem_setUInt8(data, (unsigned char)it->version)) != 0 ||
    3462:	9b02      	ldr	r3, [sp, #8]
    3464:	4628      	mov	r0, r5
    3466:	7899      	ldrb	r1, [r3, #2]
    3468:	f00b fe9e 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt16(data, it->objectType)) != 0 ||
    346c:	2800      	cmp	r0, #0
    346e:	d197      	bne.n	33a0 <getLNObjects+0xf0>
                (ret = cosem_setOctetString2(data, it->logicalName, 6)) != 0)
    3470:	9902      	ldr	r1, [sp, #8]
    3472:	2206      	movs	r2, #6
    3474:	4411      	add	r1, r2
    3476:	4628      	mov	r0, r5
    3478:	f00b fe75 	bl	f166 <cosem_setOctetString2>
                (ret = cosem_setUInt8(data, (unsigned char)it->version)) != 0 ||
    347c:	2800      	cmp	r0, #0
    347e:	d18f      	bne.n	33a0 <getLNObjects+0xf0>
            ret = getLNAccessRights(settings, it, data);
    3480:	9902      	ldr	r1, [sp, #8]
    3482:	462a      	mov	r2, r5
    3484:	4638      	mov	r0, r7
    3486:	f00e fd9c 	bl	11fc2 <getLNAccessRights>
            if (ret != 0)
    348a:	2800      	cmp	r0, #0
    348c:	d188      	bne.n	33a0 <getLNObjects+0xf0>
            if (settings->server)
    348e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    3492:	b92b      	cbnz	r3, 34a0 <getLNObjects+0x1f0>
            ++e->transactionStartIndex;
    3494:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    3498:	3301      	adds	r3, #1
    349a:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    349e:	e7cc      	b.n	343a <getLNObjects+0x18a>
                if (!e->skipMaxPduSize && dlms_isPduFull(settings, data, NULL))
    34a0:	f898 2034 	ldrb.w	r2, [r8, #52]	; 0x34
    34a4:	2a00      	cmp	r2, #0
    34a6:	d1f5      	bne.n	3494 <getLNObjects+0x1e4>
    34a8:	4629      	mov	r1, r5
    34aa:	4638      	mov	r0, r7
    34ac:	f00e fa4d 	bl	1194a <dlms_isPduFull>
    34b0:	2800      	cmp	r0, #0
    34b2:	d0ef      	beq.n	3494 <getLNObjects+0x1e4>
    {
        data->size = pduSize;
    34b4:	80ee      	strh	r6, [r5, #6]
        ret = 0;
    34b6:	2400      	movs	r4, #0
    }
    return ret;
}
    34b8:	4620      	mov	r0, r4
    34ba:	b007      	add	sp, #28
    34bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = oa_getByIndex(&object->objectList, pos, &it);
    34c0:	4604      	mov	r4, r0
    34c2:	e7f9      	b.n	34b8 <getLNObjects+0x208>
    34c4:	0001ec86 	.word	0x0001ec86

000034c8 <cosem_getIP4Setup>:
#endif //DLMS_IGNORE_IEC_TWISTED_PAIR_SETUP

#ifndef DLMS_IGNORE_IP4_SETUP
int cosem_getIP4Setup(
    gxValueEventArg* e)
{
    34c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    dlmsVARIANT* tmp;
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    gxip4SetupIpOption* it;
    gxIp4Setup* object = (gxIp4Setup*)e->target;
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    34cc:	7e03      	ldrb	r3, [r0, #24]
    gxIp4Setup* object = (gxIp4Setup*)e->target;
    34ce:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    34d0:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    34d2:	2b02      	cmp	r3, #2
    34d4:	d10a      	bne.n	34ec <cosem_getIP4Setup+0x24>
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->dataLinkLayer == NULL)
    34d6:	6931      	ldr	r1, [r6, #16]
        {
            ret = cosem_setOctetString2(data, EMPTY_LN, 6);
    34d8:	2206      	movs	r2, #6
        if (object->dataLinkLayer == NULL)
    34da:	b929      	cbnz	r1, 34e8 <cosem_getIP4Setup+0x20>
            ret = cosem_setOctetString2(data, EMPTY_LN, 6);
    34dc:	4956      	ldr	r1, [pc, #344]	; (3638 <cosem_getIP4Setup+0x170>)
        }
        else
        {
            ret = cosem_setOctetString2(data, object->dataLinkLayer->logicalName, 6);
    34de:	4628      	mov	r0, r5
    34e0:	f00b fe41 	bl	f166 <cosem_setOctetString2>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
                    //Data
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
                    (ret = bb_set2(data, &it->data, 0, bb_size(&it->data))) != 0)
    34e4:	4604      	mov	r4, r0
    34e6:	e010      	b.n	350a <cosem_getIP4Setup+0x42>
            ret = cosem_setOctetString2(data, object->dataLinkLayer->logicalName, 6);
    34e8:	4411      	add	r1, r2
    34ea:	e7f8      	b.n	34de <cosem_getIP4Setup+0x16>
    else if (e->index == 3)
    34ec:	2b03      	cmp	r3, #3
    34ee:	d104      	bne.n	34fa <cosem_getIP4Setup+0x32>
        ret = cosem_setUInt32(data, object->ipAddress);
    34f0:	6971      	ldr	r1, [r6, #20]
    {
        ret = cosem_setUInt32(e->value.byteArr, object->primaryDNSAddress);
    }
    else if (e->index == 10)
    {
        ret = cosem_setUInt32(e->value.byteArr, object->secondaryDNSAddress);
    34f2:	4628      	mov	r0, r5
    34f4:	f00b fe74 	bl	f1e0 <cosem_setUInt32>
    34f8:	e7f4      	b.n	34e4 <cosem_getIP4Setup+0x1c>
    else if (e->index == 4)
    34fa:	2b04      	cmp	r3, #4
    34fc:	d123      	bne.n	3546 <cosem_getIP4Setup+0x7e>
        if ((ret = cosem_setArray(data, object->multicastIPAddress.size)) == 0)
    34fe:	8bf1      	ldrh	r1, [r6, #30]
    3500:	4628      	mov	r0, r5
    3502:	f00b feba 	bl	f27a <cosem_setArray>
    3506:	4604      	mov	r4, r0
    3508:	b1c8      	cbz	r0, 353e <cosem_getIP4Setup+0x76>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    350a:	4620      	mov	r0, r4
    350c:	b003      	add	sp, #12
    350e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    3512:	aa01      	add	r2, sp, #4
    3514:	fa1f f188 	uxth.w	r1, r8
    3518:	4638      	mov	r0, r7
    351a:	f018 fdaa 	bl	1c072 <va_getByIndex>
    351e:	2800      	cmp	r0, #0
    3520:	d1e0      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = var_getBytes(tmp, data)) != 0)
    3522:	9801      	ldr	r0, [sp, #4]
    3524:	4629      	mov	r1, r5
    3526:	f018 fee4 	bl	1c2f2 <var_getBytes>
    352a:	f108 0801 	add.w	r8, r8, #1
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    352e:	2800      	cmp	r0, #0
    3530:	d1d8      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
            for (pos = 0; pos != object->multicastIPAddress.size; ++pos)
    3532:	8bf2      	ldrh	r2, [r6, #30]
    3534:	fa1f f388 	uxth.w	r3, r8
    3538:	429a      	cmp	r2, r3
    353a:	d1ea      	bne.n	3512 <cosem_getIP4Setup+0x4a>
    353c:	e7e5      	b.n	350a <cosem_getIP4Setup+0x42>
    353e:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->multicastIPAddress, pos, &tmp)) != 0 ||
    3540:	f106 0718 	add.w	r7, r6, #24
    3544:	e7f5      	b.n	3532 <cosem_getIP4Setup+0x6a>
    else if (e->index == 5)
    3546:	2b05      	cmp	r3, #5
    3548:	d15b      	bne.n	3602 <cosem_getIP4Setup+0x13a>
        if ((ret = cosem_setArray(data, object->ipOptions.size)) == 0)
    354a:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
    354c:	4628      	mov	r0, r5
    354e:	f00b fe94 	bl	f27a <cosem_setArray>
    3552:	4604      	mov	r4, r0
    3554:	2800      	cmp	r0, #0
    3556:	d1d8      	bne.n	350a <cosem_getIP4Setup+0x42>
    3558:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->ipOptions, pos, (void**)&it)) != 0 ||
    355a:	f106 0820 	add.w	r8, r6, #32
    355e:	e04b      	b.n	35f8 <cosem_getIP4Setup+0x130>
    3560:	aa01      	add	r2, sp, #4
    3562:	4640      	mov	r0, r8
    3564:	f00e fb19 	bl	11b9a <arr_getByIndex>
    3568:	2800      	cmp	r0, #0
    356a:	d1bb      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    356c:	2102      	movs	r1, #2
    356e:	4628      	mov	r0, r5
    3570:	f00a ff4d 	bl	e40e <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->ipOptions, pos, (void**)&it)) != 0 ||
    3574:	2800      	cmp	r0, #0
    3576:	d1b5      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3578:	2103      	movs	r1, #3
    357a:	4628      	mov	r0, r5
    357c:	f00a ff47 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3580:	2800      	cmp	r0, #0
    3582:	d1af      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3584:	2111      	movs	r1, #17
    3586:	4628      	mov	r0, r5
    3588:	f00a ff41 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    358c:	2800      	cmp	r0, #0
    358e:	d1a9      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, it->type)) != 0 ||
    3590:	9b01      	ldr	r3, [sp, #4]
    3592:	4628      	mov	r0, r5
    3594:	7819      	ldrb	r1, [r3, #0]
    3596:	f00a ff3a 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    359a:	2800      	cmp	r0, #0
    359c:	d1a2      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    359e:	2111      	movs	r1, #17
    35a0:	4628      	mov	r0, r5
    35a2:	f00a ff34 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, it->type)) != 0 ||
    35a6:	2800      	cmp	r0, #0
    35a8:	d19c      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
    35aa:	9b01      	ldr	r3, [sp, #4]
    35ac:	4628      	mov	r0, r5
    35ae:	7859      	ldrb	r1, [r3, #1]
    35b0:	f00a ff2d 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    35b4:	2800      	cmp	r0, #0
    35b6:	d195      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    35b8:	2109      	movs	r1, #9
    35ba:	4628      	mov	r0, r5
    35bc:	f00a ff27 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, (unsigned char)it->length)) != 0 ||
    35c0:	2800      	cmp	r0, #0
    35c2:	d18f      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
    35c4:	9801      	ldr	r0, [sp, #4]
    35c6:	3004      	adds	r0, #4
    35c8:	f00a feb5 	bl	e336 <bb_size>
    35cc:	b2c1      	uxtb	r1, r0
    35ce:	4628      	mov	r0, r5
    35d0:	f00a ff1d 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    35d4:	2800      	cmp	r0, #0
    35d6:	d185      	bne.n	34e4 <cosem_getIP4Setup+0x1c>
                    (ret = bb_set2(data, &it->data, 0, bb_size(&it->data))) != 0)
    35d8:	9901      	ldr	r1, [sp, #4]
    35da:	f101 0904 	add.w	r9, r1, #4
    35de:	4648      	mov	r0, r9
    35e0:	f00a fea9 	bl	e336 <bb_size>
    35e4:	2200      	movs	r2, #0
    35e6:	4603      	mov	r3, r0
    35e8:	4649      	mov	r1, r9
    35ea:	4628      	mov	r0, r5
    35ec:	f00b f824 	bl	e638 <bb_set2>
    35f0:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)bb_size(&it->data))) != 0 ||
    35f2:	2800      	cmp	r0, #0
    35f4:	f47f af76 	bne.w	34e4 <cosem_getIP4Setup+0x1c>
            for (pos = 0; pos != object->ipOptions.size; ++pos)
    35f8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    35fa:	b2b9      	uxth	r1, r7
    35fc:	428b      	cmp	r3, r1
    35fe:	d1af      	bne.n	3560 <cosem_getIP4Setup+0x98>
    3600:	e783      	b.n	350a <cosem_getIP4Setup+0x42>
    else if (e->index == 6)
    3602:	2b06      	cmp	r3, #6
    3604:	d101      	bne.n	360a <cosem_getIP4Setup+0x142>
        ret = cosem_setUInt32(e->value.byteArr, object->subnetMask);
    3606:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    3608:	e773      	b.n	34f2 <cosem_getIP4Setup+0x2a>
    else if (e->index == 7)
    360a:	2b07      	cmp	r3, #7
    360c:	d101      	bne.n	3612 <cosem_getIP4Setup+0x14a>
        ret = cosem_setUInt32(e->value.byteArr, object->gatewayIPAddress);
    360e:	6b31      	ldr	r1, [r6, #48]	; 0x30
    3610:	e76f      	b.n	34f2 <cosem_getIP4Setup+0x2a>
    else if (e->index == 8)
    3612:	2b08      	cmp	r3, #8
    3614:	d105      	bne.n	3622 <cosem_getIP4Setup+0x15a>
        ret = cosem_setBoolean(e->value.byteArr, object->useDHCP);
    3616:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
    361a:	4628      	mov	r0, r5
    361c:	f00b fe49 	bl	f2b2 <cosem_setBoolean>
    3620:	e760      	b.n	34e4 <cosem_getIP4Setup+0x1c>
    else if (e->index == 9)
    3622:	2b09      	cmp	r3, #9
    3624:	d101      	bne.n	362a <cosem_getIP4Setup+0x162>
        ret = cosem_setUInt32(e->value.byteArr, object->primaryDNSAddress);
    3626:	6bb1      	ldr	r1, [r6, #56]	; 0x38
    3628:	e763      	b.n	34f2 <cosem_getIP4Setup+0x2a>
    else if (e->index == 10)
    362a:	2b0a      	cmp	r3, #10
    362c:	d101      	bne.n	3632 <cosem_getIP4Setup+0x16a>
        ret = cosem_setUInt32(e->value.byteArr, object->secondaryDNSAddress);
    362e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
    3630:	e75f      	b.n	34f2 <cosem_getIP4Setup+0x2a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3632:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
    3636:	e768      	b.n	350a <cosem_getIP4Setup+0x42>
    3638:	0001fa36 	.word	0x0001fa36

0000363c <cosem_getLimiter>:
}
#endif //DLMS_IGNORE_DISCONNECT_CONTROL
#ifndef DLMS_IGNORE_LIMITER
int cosem_getLimiter(
    gxValueEventArg* e)
{
    363c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#if defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
    uint16_t* it;
#else
    dlmsVARIANT* it;
#endif //defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
    if (e->index == 2)
    3640:	7e01      	ldrb	r1, [r0, #24]
    gxLimiter* object = (gxLimiter*)e->target;
    3642:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3644:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    3646:	2902      	cmp	r1, #2
    3648:	d16d      	bne.n	3726 <cosem_getLimiter+0xea>
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    364a:	4628      	mov	r0, r5
    364c:	f00a fedf 	bl	e40e <bb_setUInt8>
    3650:	4604      	mov	r4, r0
    3652:	2800      	cmp	r0, #0
    3654:	f040 80ba 	bne.w	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    3658:	2103      	movs	r1, #3
    365a:	4628      	mov	r0, r5
    365c:	f00a fed7 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3660:	4604      	mov	r4, r0
    3662:	2800      	cmp	r0, #0
    3664:	f040 80b2 	bne.w	37cc <cosem_getLimiter+0x190>
            //objectType
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0)
    3668:	2112      	movs	r1, #18
    366a:	4628      	mov	r0, r5
    366c:	f00a fecf 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    3670:	4604      	mov	r4, r0
    3672:	2800      	cmp	r0, #0
    3674:	f040 80aa 	bne.w	37cc <cosem_getLimiter+0x190>
        {
            return ret;
        }
        if (object->monitoredValue == NULL)
    3678:	6933      	ldr	r3, [r6, #16]
    367a:	bb6b      	cbnz	r3, 36d8 <cosem_getLimiter+0x9c>
        {
            if ((ret = bb_setUInt16(data, 0)) != 0 ||
    367c:	4601      	mov	r1, r0
    367e:	4628      	mov	r0, r5
    3680:	f00a fee7 	bl	e452 <bb_setUInt16>
    3684:	4604      	mov	r4, r0
    3686:	2800      	cmp	r0, #0
    3688:	f040 80a0 	bne.w	37cc <cosem_getLimiter+0x190>
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    368c:	2109      	movs	r1, #9
    368e:	4628      	mov	r0, r5
    3690:	f00a febd 	bl	e40e <bb_setUInt8>
            if ((ret = bb_setUInt16(data, 0)) != 0 ||
    3694:	4604      	mov	r4, r0
    3696:	2800      	cmp	r0, #0
    3698:	f040 8098 	bne.w	37cc <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    369c:	2106      	movs	r1, #6
    369e:	4628      	mov	r0, r5
    36a0:	f00a feb5 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    36a4:	4604      	mov	r4, r0
    36a6:	2800      	cmp	r0, #0
    36a8:	f040 8090 	bne.w	37cc <cosem_getLimiter+0x190>
                (ret = bb_set(data, EMPTY_LN, 6)) != 0 ||
    36ac:	499b      	ldr	r1, [pc, #620]	; (391c <cosem_getLimiter+0x2e0>)
    36ae:	2206      	movs	r2, #6
    36b0:	4628      	mov	r0, r5
    36b2:	f00a ff92 	bl	e5da <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    36b6:	4604      	mov	r4, r0
    36b8:	2800      	cmp	r0, #0
    36ba:	f040 8087 	bne.w	37cc <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    36be:	210f      	movs	r1, #15
    36c0:	4628      	mov	r0, r5
    36c2:	f00a fea4 	bl	e40e <bb_setUInt8>
                (ret = bb_set(data, EMPTY_LN, 6)) != 0 ||
    36c6:	4604      	mov	r4, r0
    36c8:	2800      	cmp	r0, #0
    36ca:	d17f      	bne.n	37cc <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 0)) != 0)
    36cc:	2100      	movs	r1, #0
                //LN.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = bb_setUInt8(data, 6)) != 0 ||
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
                (ret = bb_setUInt8(data, object->selectedAttributeIndex)) != 0)
    36ce:	4628      	mov	r0, r5
    36d0:	f00a fe9d 	bl	e40e <bb_setUInt8>
                {
                    break;
                }
#else
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
                    (ret = var_getBytes(it, data)) != 0)
    36d4:	4604      	mov	r4, r0
    36d6:	e079      	b.n	37cc <cosem_getLimiter+0x190>
            if ((ret = bb_setUInt16(data, object->monitoredValue->objectType)) != 0 ||
    36d8:	8819      	ldrh	r1, [r3, #0]
    36da:	4628      	mov	r0, r5
    36dc:	f00a feb9 	bl	e452 <bb_setUInt16>
    36e0:	4604      	mov	r4, r0
    36e2:	2800      	cmp	r0, #0
    36e4:	d172      	bne.n	37cc <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    36e6:	2109      	movs	r1, #9
    36e8:	4628      	mov	r0, r5
    36ea:	f00a fe90 	bl	e40e <bb_setUInt8>
            if ((ret = bb_setUInt16(data, object->monitoredValue->objectType)) != 0 ||
    36ee:	4604      	mov	r4, r0
    36f0:	2800      	cmp	r0, #0
    36f2:	d16b      	bne.n	37cc <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    36f4:	2106      	movs	r1, #6
    36f6:	4628      	mov	r0, r5
    36f8:	f00a fe89 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    36fc:	4604      	mov	r4, r0
    36fe:	2800      	cmp	r0, #0
    3700:	d164      	bne.n	37cc <cosem_getLimiter+0x190>
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
    3702:	6931      	ldr	r1, [r6, #16]
    3704:	2206      	movs	r2, #6
    3706:	4411      	add	r1, r2
    3708:	4628      	mov	r0, r5
    370a:	f00a ff66 	bl	e5da <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
    370e:	4604      	mov	r4, r0
    3710:	2800      	cmp	r0, #0
    3712:	d15b      	bne.n	37cc <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
    3714:	210f      	movs	r1, #15
    3716:	4628      	mov	r0, r5
    3718:	f00a fe79 	bl	e40e <bb_setUInt8>
                (ret = bb_set(data, object->monitoredValue->logicalName, 6)) != 0 ||
    371c:	4604      	mov	r4, r0
    371e:	2800      	cmp	r0, #0
    3720:	d154      	bne.n	37cc <cosem_getLimiter+0x190>
                (ret = bb_setUInt8(data, object->selectedAttributeIndex)) != 0)
    3722:	7d31      	ldrb	r1, [r6, #20]
    3724:	e7d3      	b.n	36ce <cosem_getLimiter+0x92>
    else if (e->index == 3)
    3726:	2903      	cmp	r1, #3
    3728:	d105      	bne.n	3736 <cosem_getLimiter+0xfa>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdActive);
    372a:	f106 0118 	add.w	r1, r6, #24
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdNormal);
    372e:	4628      	mov	r0, r5
    3730:	f00b fd8e 	bl	f250 <cosem_setVariant>
    3734:	e7ce      	b.n	36d4 <cosem_getLimiter+0x98>
    else if (e->index == 4)
    3736:	2904      	cmp	r1, #4
    3738:	d102      	bne.n	3740 <cosem_getLimiter+0x104>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdNormal);
    373a:	f106 0128 	add.w	r1, r6, #40	; 0x28
    373e:	e7f6      	b.n	372e <cosem_getLimiter+0xf2>
    else if (e->index == 5)
    3740:	2905      	cmp	r1, #5
    3742:	d102      	bne.n	374a <cosem_getLimiter+0x10e>
        ret = cosem_setVariant(e->value.byteArr, &object->thresholdEmergency);
    3744:	f106 0138 	add.w	r1, r6, #56	; 0x38
    3748:	e7f1      	b.n	372e <cosem_getLimiter+0xf2>
    else if (e->index == 6)
    374a:	2906      	cmp	r1, #6
    374c:	d104      	bne.n	3758 <cosem_getLimiter+0x11c>
        ret = cosem_setUInt32(e->value.byteArr, object->minOverThresholdDuration);
    374e:	6cb1      	ldr	r1, [r6, #72]	; 0x48
        ret = cosem_setUInt32(e->value.byteArr, object->minUnderThresholdDuration);
    3750:	4628      	mov	r0, r5
    3752:	f00b fd45 	bl	f1e0 <cosem_setUInt32>
    3756:	e7bd      	b.n	36d4 <cosem_getLimiter+0x98>
    else if (e->index == 7)
    3758:	2907      	cmp	r1, #7
    375a:	d101      	bne.n	3760 <cosem_getLimiter+0x124>
        ret = cosem_setUInt32(e->value.byteArr, object->minUnderThresholdDuration);
    375c:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    375e:	e7f7      	b.n	3750 <cosem_getLimiter+0x114>
    else if (e->index == 8)
    3760:	2908      	cmp	r1, #8
    3762:	d12a      	bne.n	37ba <cosem_getLimiter+0x17e>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3764:	2102      	movs	r1, #2
    3766:	4628      	mov	r0, r5
    3768:	f00a fe51 	bl	e40e <bb_setUInt8>
    376c:	4604      	mov	r4, r0
    376e:	bb68      	cbnz	r0, 37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    3770:	2103      	movs	r1, #3
    3772:	4628      	mov	r0, r5
    3774:	f00a fe4b 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3778:	4604      	mov	r4, r0
    377a:	bb38      	cbnz	r0, 37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    377c:	2112      	movs	r1, #18
    377e:	4628      	mov	r0, r5
    3780:	f00a fe45 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
    3784:	4604      	mov	r4, r0
    3786:	bb08      	cbnz	r0, 37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->emergencyProfile.id)) != 0 ||
    3788:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
    378c:	4628      	mov	r0, r5
    378e:	f00a fe60 	bl	e452 <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3792:	4604      	mov	r4, r0
    3794:	b9d0      	cbnz	r0, 37cc <cosem_getLimiter+0x190>
            (ret = cosem_setDateTimeAsOctetString(data, &object->emergencyProfile.activationTime)) != 0 ||
    3796:	f106 0154 	add.w	r1, r6, #84	; 0x54
    379a:	4628      	mov	r0, r5
    379c:	f00b fc11 	bl	efc2 <cosem_setDateTimeAsOctetString>
            (ret = bb_setUInt16(data, object->emergencyProfile.id)) != 0 ||
    37a0:	4604      	mov	r4, r0
    37a2:	b998      	cbnz	r0, 37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
    37a4:	2106      	movs	r1, #6
    37a6:	4628      	mov	r0, r5
    37a8:	f00a fe31 	bl	e40e <bb_setUInt8>
            (ret = cosem_setDateTimeAsOctetString(data, &object->emergencyProfile.activationTime)) != 0 ||
    37ac:	4604      	mov	r4, r0
    37ae:	b968      	cbnz	r0, 37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt32(data, object->emergencyProfile.duration)) != 0)
    37b0:	6e31      	ldr	r1, [r6, #96]	; 0x60
    37b2:	4628      	mov	r0, r5
    37b4:	f00a fe6f 	bl	e496 <bb_setUInt32>
    37b8:	e78c      	b.n	36d4 <cosem_getLimiter+0x98>
    else if (e->index == 9)
    37ba:	2909      	cmp	r1, #9
    37bc:	d124      	bne.n	3808 <cosem_getLimiter+0x1cc>
        if ((ret = cosem_setArray(data, object->emergencyProfileGroupIDs.size)) == 0)
    37be:	f8b6 106a 	ldrh.w	r1, [r6, #106]	; 0x6a
    37c2:	4628      	mov	r0, r5
    37c4:	f00b fd59 	bl	f27a <cosem_setArray>
    37c8:	4604      	mov	r4, r0
    37ca:	b1c8      	cbz	r0, 3800 <cosem_getLimiter+0x1c4>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    37cc:	4620      	mov	r0, r4
    37ce:	b002      	add	sp, #8
    37d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    37d4:	aa01      	add	r2, sp, #4
    37d6:	4641      	mov	r1, r8
    37d8:	4638      	mov	r0, r7
    37da:	f018 fc4a 	bl	1c072 <va_getByIndex>
    37de:	2800      	cmp	r0, #0
    37e0:	f47f af78 	bne.w	36d4 <cosem_getLimiter+0x98>
                    (ret = var_getBytes(it, data)) != 0)
    37e4:	9801      	ldr	r0, [sp, #4]
    37e6:	4629      	mov	r1, r5
    37e8:	f018 fd83 	bl	1c2f2 <var_getBytes>
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    37ec:	2800      	cmp	r0, #0
    37ee:	f47f af71 	bne.w	36d4 <cosem_getLimiter+0x98>
            for (pos = 0; pos != object->emergencyProfileGroupIDs.size; ++pos)
    37f2:	f108 0801 	add.w	r8, r8, #1
    37f6:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
    37fa:	4543      	cmp	r3, r8
    37fc:	d1ea      	bne.n	37d4 <cosem_getLimiter+0x198>
    37fe:	e7e5      	b.n	37cc <cosem_getLimiter+0x190>
    3800:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->emergencyProfileGroupIDs, pos, &it)) != 0 ||
    3802:	f106 0764 	add.w	r7, r6, #100	; 0x64
    3806:	e7f6      	b.n	37f6 <cosem_getLimiter+0x1ba>
    else if (e->index == 10)
    3808:	290a      	cmp	r1, #10
    380a:	d105      	bne.n	3818 <cosem_getLimiter+0x1dc>
        ret = cosem_setBoolean(e->value.byteArr, object->emergencyProfileActive);
    380c:	f896 106c 	ldrb.w	r1, [r6, #108]	; 0x6c
    3810:	4628      	mov	r0, r5
    3812:	f00b fd4e 	bl	f2b2 <cosem_setBoolean>
    3816:	e75d      	b.n	36d4 <cosem_getLimiter+0x98>
    else if (e->index == 11)
    3818:	290b      	cmp	r1, #11
    381a:	d17b      	bne.n	3914 <cosem_getLimiter+0x2d8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    381c:	2102      	movs	r1, #2
    381e:	4628      	mov	r0, r5
    3820:	f00a fdf5 	bl	e40e <bb_setUInt8>
    3824:	4604      	mov	r4, r0
    3826:	2800      	cmp	r0, #0
    3828:	d1d0      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    382a:	2102      	movs	r1, #2
    382c:	4628      	mov	r0, r5
    382e:	f00a fdee 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3832:	4604      	mov	r4, r0
    3834:	2800      	cmp	r0, #0
    3836:	d1c9      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3838:	2102      	movs	r1, #2
    383a:	4628      	mov	r0, r5
    383c:	f00a fde7 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3840:	4604      	mov	r4, r0
    3842:	2800      	cmp	r0, #0
    3844:	d1c2      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    3846:	2102      	movs	r1, #2
    3848:	4628      	mov	r0, r5
    384a:	f00a fde0 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    384e:	4604      	mov	r4, r0
    3850:	2800      	cmp	r0, #0
    3852:	d1bb      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3854:	2109      	movs	r1, #9
    3856:	4628      	mov	r0, r5
    3858:	f00a fdd9 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    385c:	4604      	mov	r4, r0
    385e:	2800      	cmp	r0, #0
    3860:	d1b4      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    3862:	2106      	movs	r1, #6
    3864:	4628      	mov	r0, r5
    3866:	f00a fdd2 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    386a:	4604      	mov	r4, r0
    386c:	2800      	cmp	r0, #0
    386e:	d1ad      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionOverThreshold.script), 6)) != 0 ||
    3870:	6f30      	ldr	r0, [r6, #112]	; 0x70
    3872:	f000 fc11 	bl	4098 <obj_getLogicalName>
    3876:	2206      	movs	r2, #6
    3878:	4601      	mov	r1, r0
    387a:	4628      	mov	r0, r5
    387c:	f00a fead 	bl	e5da <bb_set>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    3880:	4604      	mov	r4, r0
    3882:	2800      	cmp	r0, #0
    3884:	d1a2      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3886:	2112      	movs	r1, #18
    3888:	4628      	mov	r0, r5
    388a:	f00a fdc0 	bl	e40e <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionOverThreshold.script), 6)) != 0 ||
    388e:	4604      	mov	r4, r0
    3890:	2800      	cmp	r0, #0
    3892:	d19b      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->actionOverThreshold.scriptSelector)) != 0 ||
    3894:	f8b6 1074 	ldrh.w	r1, [r6, #116]	; 0x74
    3898:	4628      	mov	r0, r5
    389a:	f00a fdda 	bl	e452 <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    389e:	4604      	mov	r4, r0
    38a0:	2800      	cmp	r0, #0
    38a2:	d193      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    38a4:	2102      	movs	r1, #2
    38a6:	4628      	mov	r0, r5
    38a8:	f00a fdb1 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt16(data, object->actionOverThreshold.scriptSelector)) != 0 ||
    38ac:	4604      	mov	r4, r0
    38ae:	2800      	cmp	r0, #0
    38b0:	d18c      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    38b2:	2102      	movs	r1, #2
    38b4:	4628      	mov	r0, r5
    38b6:	f00a fdaa 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    38ba:	4604      	mov	r4, r0
    38bc:	2800      	cmp	r0, #0
    38be:	d185      	bne.n	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    38c0:	2109      	movs	r1, #9
    38c2:	4628      	mov	r0, r5
    38c4:	f00a fda3 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 2)) != 0 ||
    38c8:	4604      	mov	r4, r0
    38ca:	2800      	cmp	r0, #0
    38cc:	f47f af7e 	bne.w	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    38d0:	2106      	movs	r1, #6
    38d2:	4628      	mov	r0, r5
    38d4:	f00a fd9b 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    38d8:	4604      	mov	r4, r0
    38da:	2800      	cmp	r0, #0
    38dc:	f47f af76 	bne.w	37cc <cosem_getLimiter+0x190>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionUnderThreshold.script), 6)) != 0 ||
    38e0:	6fb0      	ldr	r0, [r6, #120]	; 0x78
    38e2:	f000 fbd9 	bl	4098 <obj_getLogicalName>
    38e6:	2206      	movs	r2, #6
    38e8:	4601      	mov	r1, r0
    38ea:	4628      	mov	r0, r5
    38ec:	f00a fe75 	bl	e5da <bb_set>
            (ret = bb_setUInt8(data, 6)) != 0 ||
    38f0:	4604      	mov	r4, r0
    38f2:	2800      	cmp	r0, #0
    38f4:	f47f af6a 	bne.w	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    38f8:	2112      	movs	r1, #18
    38fa:	4628      	mov	r0, r5
    38fc:	f00a fd87 	bl	e40e <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->actionUnderThreshold.script), 6)) != 0 ||
    3900:	4604      	mov	r4, r0
    3902:	2800      	cmp	r0, #0
    3904:	f47f af62 	bne.w	37cc <cosem_getLimiter+0x190>
            (ret = bb_setUInt16(data, object->actionUnderThreshold.scriptSelector)) != 0)
    3908:	f8b6 107c 	ldrh.w	r1, [r6, #124]	; 0x7c
    390c:	4628      	mov	r0, r5
    390e:	f00a fda0 	bl	e452 <bb_setUInt16>
    3912:	e6df      	b.n	36d4 <cosem_getLimiter+0x98>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3914:	f44f 7481 	mov.w	r4, #258	; 0x102
    3918:	e758      	b.n	37cc <cosem_getLimiter+0x190>
    391a:	bf00      	nop
    391c:	0001fa36 	.word	0x0001fa36

00003920 <cosem_getmMbusClient>:
#endif //DLMS_IGNORE_LIMITER
#ifndef DLMS_IGNORE_MBUS_CLIENT
int cosem_getmMbusClient(
    gxValueEventArg* e)
{
    3920:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef DLMS_IGNORE_MALLOC
    gxCaptureDefinition* it;
#else
    gxKey* it;
#endif //DLMS_IGNORE_MALLOC
    if (e->index == 2)
    3924:	7e03      	ldrb	r3, [r0, #24]
    gxMBusClient* object = (gxMBusClient*)e->target;
    3926:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3928:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    392a:	2b02      	cmp	r3, #2
    392c:	d10a      	bne.n	3944 <cosem_getmMbusClient+0x24>
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->mBusPort == NULL)
    392e:	69b1      	ldr	r1, [r6, #24]
        {
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3930:	2206      	movs	r2, #6
        if (object->mBusPort == NULL)
    3932:	b929      	cbnz	r1, 3940 <cosem_getmMbusClient+0x20>
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3934:	4959      	ldr	r1, [pc, #356]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
        }
        else
        {
            ret = cosem_setOctetString2(e->value.byteArr, object->mBusPort->logicalName, 6);
    3936:	4628      	mov	r0, r5
    3938:	f00b fc15 	bl	f166 <cosem_setOctetString2>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
                    //
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
                    (ret = bb_set2(data, (gxByteBuffer*)it->value, 0, bb_size((gxByteBuffer*)it->value))) != 0)
    393c:	4604      	mov	r4, r0
    393e:	e00a      	b.n	3956 <cosem_getmMbusClient+0x36>
            ret = cosem_setOctetString2(e->value.byteArr, object->mBusPort->logicalName, 6);
    3940:	4411      	add	r1, r2
    3942:	e7f8      	b.n	3936 <cosem_getmMbusClient+0x16>
    else if (e->index == 3)
    3944:	2b03      	cmp	r3, #3
    3946:	d162      	bne.n	3a0e <cosem_getmMbusClient+0xee>
        if ((ret = cosem_setArray(data, object->captureDefinition.size)) == 0)
    3948:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    394a:	4628      	mov	r0, r5
    394c:	f00b fc95 	bl	f27a <cosem_setArray>
    3950:	4604      	mov	r4, r0
    3952:	2800      	cmp	r0, #0
    3954:	d057      	beq.n	3a06 <cosem_getmMbusClient+0xe6>
    else
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    3956:	4620      	mov	r0, r4
    3958:	b002      	add	sp, #8
    395a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    395e:	aa01      	add	r2, sp, #4
    3960:	4648      	mov	r0, r9
    3962:	f00e f91a 	bl	11b9a <arr_getByIndex>
    3966:	2800      	cmp	r0, #0
    3968:	d1e8      	bne.n	393c <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    396a:	2102      	movs	r1, #2
    396c:	4628      	mov	r0, r5
    396e:	f00a fd4e 	bl	e40e <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    3972:	2800      	cmp	r0, #0
    3974:	d1e2      	bne.n	393c <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
    3976:	2102      	movs	r1, #2
    3978:	4628      	mov	r0, r5
    397a:	f00a fd48 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    397e:	2800      	cmp	r0, #0
    3980:	d1dc      	bne.n	393c <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3982:	2109      	movs	r1, #9
    3984:	4628      	mov	r0, r5
    3986:	f00a fd42 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
    398a:	2800      	cmp	r0, #0
    398c:	d1d6      	bne.n	393c <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
    398e:	9b01      	ldr	r3, [sp, #4]
    3990:	681b      	ldr	r3, [r3, #0]
    3992:	4629      	mov	r1, r5
    3994:	88d8      	ldrh	r0, [r3, #6]
    3996:	f017 fe36 	bl	1b606 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    399a:	4607      	mov	r7, r0
    399c:	2800      	cmp	r0, #0
    399e:	d178      	bne.n	3a92 <cosem_getmMbusClient+0x172>
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
    39a0:	9b01      	ldr	r3, [sp, #4]
    39a2:	f8d3 a000 	ldr.w	sl, [r3]
    39a6:	4650      	mov	r0, sl
    39a8:	f00a fcc5 	bl	e336 <bb_size>
    39ac:	463a      	mov	r2, r7
    39ae:	4603      	mov	r3, r0
    39b0:	4651      	mov	r1, sl
    39b2:	4628      	mov	r0, r5
    39b4:	f00a fe40 	bl	e638 <bb_set2>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->key)->size, data)) != 0 ||
    39b8:	2800      	cmp	r0, #0
    39ba:	d1bf      	bne.n	393c <cosem_getmMbusClient+0x1c>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    39bc:	2109      	movs	r1, #9
    39be:	4628      	mov	r0, r5
    39c0:	f00a fd25 	bl	e40e <bb_setUInt8>
                    (ret = bb_set2(data, (gxByteBuffer*)it->key, 0, bb_size((gxByteBuffer*)it->key))) != 0 ||
    39c4:	2800      	cmp	r0, #0
    39c6:	d1b9      	bne.n	393c <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    39c8:	9b01      	ldr	r3, [sp, #4]
    39ca:	685b      	ldr	r3, [r3, #4]
    39cc:	4629      	mov	r1, r5
    39ce:	88d8      	ldrh	r0, [r3, #6]
    39d0:	f017 fe19 	bl	1b606 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    39d4:	4607      	mov	r7, r0
    39d6:	2800      	cmp	r0, #0
    39d8:	d15b      	bne.n	3a92 <cosem_getmMbusClient+0x172>
                    (ret = bb_set2(data, (gxByteBuffer*)it->value, 0, bb_size((gxByteBuffer*)it->value))) != 0)
    39da:	9b01      	ldr	r3, [sp, #4]
    39dc:	f8d3 a004 	ldr.w	sl, [r3, #4]
    39e0:	4650      	mov	r0, sl
    39e2:	f00a fca8 	bl	e336 <bb_size>
    39e6:	463a      	mov	r2, r7
    39e8:	4603      	mov	r3, r0
    39ea:	4651      	mov	r1, sl
    39ec:	4628      	mov	r0, r5
    39ee:	f00a fe23 	bl	e638 <bb_set2>
    39f2:	f108 0801 	add.w	r8, r8, #1
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    39f6:	2800      	cmp	r0, #0
    39f8:	d1a0      	bne.n	393c <cosem_getmMbusClient+0x1c>
            for (pos = 0; pos != object->captureDefinition.size; ++pos)
    39fa:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    39fc:	fa1f f188 	uxth.w	r1, r8
    3a00:	428b      	cmp	r3, r1
    3a02:	d1ac      	bne.n	395e <cosem_getmMbusClient+0x3e>
    3a04:	e7a7      	b.n	3956 <cosem_getmMbusClient+0x36>
    3a06:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->captureDefinition, pos, (void**)&it)) != 0 ||
    3a08:	f106 091c 	add.w	r9, r6, #28
    3a0c:	e7f5      	b.n	39fa <cosem_getmMbusClient+0xda>
    else if (e->index == 4)
    3a0e:	2b04      	cmp	r3, #4
    3a10:	d104      	bne.n	3a1c <cosem_getmMbusClient+0xfc>
        ret = cosem_setUInt32(e->value.byteArr, object->capturePeriod);
    3a12:	6931      	ldr	r1, [r6, #16]
        ret = cosem_setUInt32(e->value.byteArr, object->identificationNumber);
    3a14:	4628      	mov	r0, r5
    3a16:	f00b fbe3 	bl	f1e0 <cosem_setUInt32>
    3a1a:	e78f      	b.n	393c <cosem_getmMbusClient+0x1c>
    else if (e->index == 5)
    3a1c:	2b05      	cmp	r3, #5
    3a1e:	d104      	bne.n	3a2a <cosem_getmMbusClient+0x10a>
        ret = cosem_setUInt8(e->value.byteArr, object->primaryAddress);
    3a20:	7d31      	ldrb	r1, [r6, #20]
        ret = cosem_setUInt8(e->value.byteArr, object->alarm);
    3a22:	4628      	mov	r0, r5
    3a24:	f00b fbc0 	bl	f1a8 <cosem_setUInt8>
    3a28:	e788      	b.n	393c <cosem_getmMbusClient+0x1c>
    else if (e->index == 6)
    3a2a:	2b06      	cmp	r3, #6
    3a2c:	d101      	bne.n	3a32 <cosem_getmMbusClient+0x112>
        ret = cosem_setUInt32(e->value.byteArr, object->identificationNumber);
    3a2e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3a30:	e7f0      	b.n	3a14 <cosem_getmMbusClient+0xf4>
    else if (e->index == 7)
    3a32:	2b07      	cmp	r3, #7
    3a34:	d104      	bne.n	3a40 <cosem_getmMbusClient+0x120>
        ret = cosem_setUInt16(e->value.byteArr, object->manufacturerID);
    3a36:	8db1      	ldrh	r1, [r6, #44]	; 0x2c
        ret = cosem_setUInt16(e->value.byteArr, object->configuration);
    3a38:	4628      	mov	r0, r5
    3a3a:	f00b fbc3 	bl	f1c4 <cosem_setUInt16>
    3a3e:	e77d      	b.n	393c <cosem_getmMbusClient+0x1c>
    else if (e->index == 8)
    3a40:	2b08      	cmp	r3, #8
    3a42:	d102      	bne.n	3a4a <cosem_getmMbusClient+0x12a>
        ret = cosem_setUInt8(e->value.byteArr, object->dataHeaderVersion);
    3a44:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
    3a48:	e7eb      	b.n	3a22 <cosem_getmMbusClient+0x102>
    else if (e->index == 9)
    3a4a:	2b09      	cmp	r3, #9
    3a4c:	d102      	bne.n	3a54 <cosem_getmMbusClient+0x134>
        ret = cosem_setUInt8(e->value.byteArr, object->deviceType);
    3a4e:	f896 102f 	ldrb.w	r1, [r6, #47]	; 0x2f
    3a52:	e7e6      	b.n	3a22 <cosem_getmMbusClient+0x102>
    else if (e->index == 10)
    3a54:	2b0a      	cmp	r3, #10
    3a56:	d102      	bne.n	3a5e <cosem_getmMbusClient+0x13e>
        ret = cosem_setUInt8(e->value.byteArr, object->accessNumber);
    3a58:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    3a5c:	e7e1      	b.n	3a22 <cosem_getmMbusClient+0x102>
    else if (e->index == 11)
    3a5e:	2b0b      	cmp	r3, #11
    3a60:	d102      	bne.n	3a68 <cosem_getmMbusClient+0x148>
        ret = cosem_setUInt8(e->value.byteArr, object->status);
    3a62:	f896 1031 	ldrb.w	r1, [r6, #49]	; 0x31
    3a66:	e7dc      	b.n	3a22 <cosem_getmMbusClient+0x102>
    else if (e->index == 12)
    3a68:	2b0c      	cmp	r3, #12
    3a6a:	d102      	bne.n	3a72 <cosem_getmMbusClient+0x152>
        ret = cosem_setUInt8(e->value.byteArr, object->alarm);
    3a6c:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
    3a70:	e7d7      	b.n	3a22 <cosem_getmMbusClient+0x102>
    else if (e->index == 13 && object->base.version != 0)
    3a72:	2b0d      	cmp	r3, #13
    3a74:	d103      	bne.n	3a7e <cosem_getmMbusClient+0x15e>
    3a76:	78b3      	ldrb	r3, [r6, #2]
    3a78:	b16b      	cbz	r3, 3a96 <cosem_getmMbusClient+0x176>
        ret = cosem_setUInt16(e->value.byteArr, object->configuration);
    3a7a:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
    3a7c:	e7dc      	b.n	3a38 <cosem_getmMbusClient+0x118>
    else if (e->index == 14 && object->base.version != 0)
    3a7e:	2b0e      	cmp	r3, #14
    3a80:	d109      	bne.n	3a96 <cosem_getmMbusClient+0x176>
    3a82:	78b3      	ldrb	r3, [r6, #2]
    3a84:	b13b      	cbz	r3, 3a96 <cosem_getmMbusClient+0x176>
        ret = cosem_setEnum(e->value.byteArr, object->encryptionKeyStatus);
    3a86:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
    3a8a:	4628      	mov	r0, r5
    3a8c:	f00b fc03 	bl	f296 <cosem_setEnum>
    3a90:	e754      	b.n	393c <cosem_getmMbusClient+0x1c>
                    (ret = hlp_setObjectCount(((gxByteBuffer*)it->value)->size, data)) != 0 ||
    3a92:	463c      	mov	r4, r7
    3a94:	e75f      	b.n	3956 <cosem_getmMbusClient+0x36>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    3a96:	f44f 7481 	mov.w	r4, #258	; 0x102
    3a9a:	e75c      	b.n	3956 <cosem_getmMbusClient+0x36>
    3a9c:	0001fa36 	.word	0x0001fa36

00003aa0 <cosem_getModemConfiguration>:
}

int cosem_getModemConfiguration(
    dlmsSettings* settings,
    gxValueEventArg* e)
{
    3aa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#else
    gxByteBuffer* ba;
#endif //DLMS_IGNORE_MALLOC
    gxModemConfiguration* target = ((gxModemConfiguration*)e->target);
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    3aa4:	7e0f      	ldrb	r7, [r1, #24]
    gxModemConfiguration* target = ((gxModemConfiguration*)e->target);
    3aa6:	694e      	ldr	r6, [r1, #20]
    gxByteBuffer* data = e->value.byteArr;
    3aa8:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
    3aaa:	2f02      	cmp	r7, #2
    3aac:	d106      	bne.n	3abc <cosem_getModemConfiguration+0x1c>
    {
        ret = cosem_setEnum(e->value.byteArr, target->communicationSpeed);
    3aae:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
    3ab2:	4628      	mov	r0, r5
    3ab4:	f00b fbef 	bl	f296 <cosem_setEnum>
                    }
#else
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
                        (ret = bb_set(data, ba->data, ba->size)) != 0)
    3ab8:	4604      	mov	r4, r0
    3aba:	e008      	b.n	3ace <cosem_getModemConfiguration+0x2e>
    else if (e->index == 3)
    3abc:	2f03      	cmp	r7, #3
    3abe:	d15d      	bne.n	3b7c <cosem_getModemConfiguration+0xdc>
        if ((ret = cosem_setArray(data, target->initialisationStrings.size)) == 0)
    3ac0:	8af1      	ldrh	r1, [r6, #22]
    3ac2:	4628      	mov	r0, r5
    3ac4:	f00b fbd9 	bl	f27a <cosem_setArray>
    3ac8:	4604      	mov	r4, r0
    3aca:	2800      	cmp	r0, #0
    3acc:	d052      	beq.n	3b74 <cosem_getModemConfiguration+0xd4>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    3ace:	4620      	mov	r0, r4
    3ad0:	b002      	add	sp, #8
    3ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    3ad6:	aa01      	add	r2, sp, #4
    3ad8:	4640      	mov	r0, r8
    3ada:	f00e f85e 	bl	11b9a <arr_getByIndex>
    3ade:	2800      	cmp	r0, #0
    3ae0:	d1ea      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3ae2:	2102      	movs	r1, #2
    3ae4:	4628      	mov	r0, r5
    3ae6:	f00a fc92 	bl	e40e <bb_setUInt8>
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    3aea:	2800      	cmp	r0, #0
    3aec:	d1e4      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3aee:	2103      	movs	r1, #3
    3af0:	4628      	mov	r0, r5
    3af2:	f00a fc8c 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3af6:	2800      	cmp	r0, #0
    3af8:	d1de      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3afa:	2109      	movs	r1, #9
    3afc:	4628      	mov	r0, r5
    3afe:	f00a fc86 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3b02:	2800      	cmp	r0, #0
    3b04:	d1d8      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
    3b06:	9b01      	ldr	r3, [sp, #4]
    3b08:	4629      	mov	r1, r5
    3b0a:	88d8      	ldrh	r0, [r3, #6]
    3b0c:	f017 fd7b 	bl	1b606 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3b10:	2800      	cmp	r0, #0
    3b12:	d1d1      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
    3b14:	9b01      	ldr	r3, [sp, #4]
    3b16:	4628      	mov	r0, r5
    3b18:	88da      	ldrh	r2, [r3, #6]
    3b1a:	6819      	ldr	r1, [r3, #0]
    3b1c:	f00a fd5d 	bl	e5da <bb_set>
                    (ret = hlp_setObjectCount(mi->request.size, data)) != 0 ||
    3b20:	2800      	cmp	r0, #0
    3b22:	d1c9      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3b24:	2109      	movs	r1, #9
    3b26:	4628      	mov	r0, r5
    3b28:	f00a fc71 	bl	e40e <bb_setUInt8>
                    (ret = bb_set(data, mi->request.data, mi->request.size)) != 0 ||
    3b2c:	2800      	cmp	r0, #0
    3b2e:	d1c3      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
    3b30:	9b01      	ldr	r3, [sp, #4]
    3b32:	4629      	mov	r1, r5
    3b34:	8a58      	ldrh	r0, [r3, #18]
    3b36:	f017 fd66 	bl	1b606 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3b3a:	2800      	cmp	r0, #0
    3b3c:	d1bc      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
    3b3e:	9b01      	ldr	r3, [sp, #4]
    3b40:	4628      	mov	r0, r5
    3b42:	8a5a      	ldrh	r2, [r3, #18]
    3b44:	68d9      	ldr	r1, [r3, #12]
    3b46:	f00a fd48 	bl	e5da <bb_set>
                    (ret = hlp_setObjectCount(mi->response.size, data)) != 0 ||
    3b4a:	2800      	cmp	r0, #0
    3b4c:	d1b4      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3b4e:	2112      	movs	r1, #18
    3b50:	4628      	mov	r0, r5
    3b52:	f00a fc5c 	bl	e40e <bb_setUInt8>
                    (ret = bb_set(data, mi->response.data, mi->response.size)) != 0 ||
    3b56:	2800      	cmp	r0, #0
    3b58:	d1ae      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
                    (ret = bb_setUInt16(data, mi->delay)) != 0)
    3b5a:	9b01      	ldr	r3, [sp, #4]
    3b5c:	4628      	mov	r0, r5
    3b5e:	8b19      	ldrh	r1, [r3, #24]
    3b60:	f00a fc77 	bl	e452 <bb_setUInt16>
    3b64:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
    3b66:	2800      	cmp	r0, #0
    3b68:	d1a6      	bne.n	3ab8 <cosem_getModemConfiguration+0x18>
            for (pos = 0; pos != target->initialisationStrings.size; ++pos)
    3b6a:	8af3      	ldrh	r3, [r6, #22]
    3b6c:	b2b9      	uxth	r1, r7
    3b6e:	428b      	cmp	r3, r1
    3b70:	d1b1      	bne.n	3ad6 <cosem_getModemConfiguration+0x36>
    3b72:	e7ac      	b.n	3ace <cosem_getModemConfiguration+0x2e>
    3b74:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&target->initialisationStrings, pos, (void**)&mi)) != 0 ||
    3b76:	f106 0810 	add.w	r8, r6, #16
    3b7a:	e7f6      	b.n	3b6a <cosem_getModemConfiguration+0xca>
    else if (e->index == 4)
    3b7c:	2f04      	cmp	r7, #4
    3b7e:	f040 80bf 	bne.w	3d00 <cosem_getModemConfiguration+0x260>
        if (settings->server && target->modemProfile.size == 0)
    3b82:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    3b86:	8c71      	ldrh	r1, [r6, #34]	; 0x22
    3b88:	2b00      	cmp	r3, #0
    3b8a:	f000 8089 	beq.w	3ca0 <cosem_getModemConfiguration+0x200>
    3b8e:	2900      	cmp	r1, #0
    3b90:	f040 8086 	bne.w	3ca0 <cosem_getModemConfiguration+0x200>
            if ((ret = cosem_setArray(data, 17)) != 0 ||
    3b94:	2111      	movs	r1, #17
    3b96:	4628      	mov	r0, r5
    3b98:	f00b fb6f 	bl	f27a <cosem_setArray>
    3b9c:	4604      	mov	r4, r0
    3b9e:	2800      	cmp	r0, #0
    3ba0:	d195      	bne.n	3ace <cosem_getModemConfiguration+0x2e>
                (ret = cosem_add(data, "OK", 2) != 0) ||
    3ba2:	495a      	ldr	r1, [pc, #360]	; (3d0c <cosem_getModemConfiguration+0x26c>)
    3ba4:	2202      	movs	r2, #2
    3ba6:	4628      	mov	r0, r5
    3ba8:	f00f fbc9 	bl	1333e <cosem_add>
            if ((ret = cosem_setArray(data, 17)) != 0 ||
    3bac:	2800      	cmp	r0, #0
    3bae:	f040 80aa 	bne.w	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT", 7) != 0) ||
    3bb2:	4957      	ldr	r1, [pc, #348]	; (3d10 <cosem_getModemConfiguration+0x270>)
    3bb4:	2207      	movs	r2, #7
    3bb6:	4628      	mov	r0, r5
    3bb8:	f00f fbc1 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "OK", 2) != 0) ||
    3bbc:	2800      	cmp	r0, #0
    3bbe:	f040 80a2 	bne.w	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "RING", 4) != 0) ||
    3bc2:	4954      	ldr	r1, [pc, #336]	; (3d14 <cosem_getModemConfiguration+0x274>)
    3bc4:	463a      	mov	r2, r7
    3bc6:	4628      	mov	r0, r5
    3bc8:	f00f fbb9 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "CONNECT", 7) != 0) ||
    3bcc:	2800      	cmp	r0, #0
    3bce:	f040 809a 	bne.w	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO CARRIER", 10) != 0) ||
    3bd2:	4951      	ldr	r1, [pc, #324]	; (3d18 <cosem_getModemConfiguration+0x278>)
    3bd4:	220a      	movs	r2, #10
    3bd6:	4628      	mov	r0, r5
    3bd8:	f00f fbb1 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "RING", 4) != 0) ||
    3bdc:	2800      	cmp	r0, #0
    3bde:	f040 8092 	bne.w	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "ERROR", 5) != 0) ||
    3be2:	494e      	ldr	r1, [pc, #312]	; (3d1c <cosem_getModemConfiguration+0x27c>)
    3be4:	2205      	movs	r2, #5
    3be6:	4628      	mov	r0, r5
    3be8:	f00f fba9 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "NO CARRIER", 10) != 0) ||
    3bec:	2800      	cmp	r0, #0
    3bee:	f040 808a 	bne.w	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 1200", 12) != 0) ||
    3bf2:	494b      	ldr	r1, [pc, #300]	; (3d20 <cosem_getModemConfiguration+0x280>)
    3bf4:	220c      	movs	r2, #12
    3bf6:	4628      	mov	r0, r5
    3bf8:	f00f fba1 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "ERROR", 5) != 0) ||
    3bfc:	2800      	cmp	r0, #0
    3bfe:	f040 8082 	bne.w	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO DIAL TONE", 12) != 0) ||
    3c02:	4948      	ldr	r1, [pc, #288]	; (3d24 <cosem_getModemConfiguration+0x284>)
    3c04:	220c      	movs	r2, #12
    3c06:	4628      	mov	r0, r5
    3c08:	f00f fb99 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "CONNECT 1200", 12) != 0) ||
    3c0c:	2800      	cmp	r0, #0
    3c0e:	d17a      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "BUSY", 4) != 0) ||
    3c10:	4945      	ldr	r1, [pc, #276]	; (3d28 <cosem_getModemConfiguration+0x288>)
    3c12:	2204      	movs	r2, #4
    3c14:	4628      	mov	r0, r5
    3c16:	f00f fb92 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "NO DIAL TONE", 12) != 0) ||
    3c1a:	2800      	cmp	r0, #0
    3c1c:	d173      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "NO ANSWER", 9) != 0) ||
    3c1e:	4943      	ldr	r1, [pc, #268]	; (3d2c <cosem_getModemConfiguration+0x28c>)
    3c20:	2209      	movs	r2, #9
    3c22:	4628      	mov	r0, r5
    3c24:	f00f fb8b 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "BUSY", 4) != 0) ||
    3c28:	2800      	cmp	r0, #0
    3c2a:	d16c      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 600", 11) != 0) ||
    3c2c:	4940      	ldr	r1, [pc, #256]	; (3d30 <cosem_getModemConfiguration+0x290>)
    3c2e:	220b      	movs	r2, #11
    3c30:	4628      	mov	r0, r5
    3c32:	f00f fb84 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "NO ANSWER", 9) != 0) ||
    3c36:	2800      	cmp	r0, #0
    3c38:	d165      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 2400", 12) != 0) ||
    3c3a:	493e      	ldr	r1, [pc, #248]	; (3d34 <cosem_getModemConfiguration+0x294>)
    3c3c:	220c      	movs	r2, #12
    3c3e:	4628      	mov	r0, r5
    3c40:	f00f fb7d 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "CONNECT 600", 11) != 0) ||
    3c44:	2800      	cmp	r0, #0
    3c46:	d15e      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 4800", 12) != 0) ||
    3c48:	493b      	ldr	r1, [pc, #236]	; (3d38 <cosem_getModemConfiguration+0x298>)
    3c4a:	220c      	movs	r2, #12
    3c4c:	4628      	mov	r0, r5
    3c4e:	f00f fb76 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "CONNECT 2400", 12) != 0) ||
    3c52:	2800      	cmp	r0, #0
    3c54:	d157      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 9600", 12) != 0) ||
    3c56:	4939      	ldr	r1, [pc, #228]	; (3d3c <cosem_getModemConfiguration+0x29c>)
    3c58:	220c      	movs	r2, #12
    3c5a:	4628      	mov	r0, r5
    3c5c:	f00f fb6f 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "CONNECT 4800", 12) != 0) ||
    3c60:	2800      	cmp	r0, #0
    3c62:	d150      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 14 400", 14) != 0) ||
    3c64:	4936      	ldr	r1, [pc, #216]	; (3d40 <cosem_getModemConfiguration+0x2a0>)
    3c66:	220e      	movs	r2, #14
    3c68:	4628      	mov	r0, r5
    3c6a:	f00f fb68 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "CONNECT 9600", 12) != 0) ||
    3c6e:	2800      	cmp	r0, #0
    3c70:	d149      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 28 800", 14) != 0) ||
    3c72:	4934      	ldr	r1, [pc, #208]	; (3d44 <cosem_getModemConfiguration+0x2a4>)
    3c74:	220e      	movs	r2, #14
    3c76:	4628      	mov	r0, r5
    3c78:	f00f fb61 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "CONNECT 14 400", 14) != 0) ||
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d142      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 33 600", 14) != 0) ||
    3c80:	4931      	ldr	r1, [pc, #196]	; (3d48 <cosem_getModemConfiguration+0x2a8>)
    3c82:	220e      	movs	r2, #14
    3c84:	4628      	mov	r0, r5
    3c86:	f00f fb5a 	bl	1333e <cosem_add>
                (ret = cosem_add(data, "CONNECT 28 800", 14) != 0) ||
    3c8a:	2800      	cmp	r0, #0
    3c8c:	d13b      	bne.n	3d06 <cosem_getModemConfiguration+0x266>
                (ret = cosem_add(data, "CONNECT 56 000", 14) != 0))
    3c8e:	492f      	ldr	r1, [pc, #188]	; (3d4c <cosem_getModemConfiguration+0x2ac>)
    3c90:	220e      	movs	r2, #14
    3c92:	4628      	mov	r0, r5
    3c94:	f00f fb53 	bl	1333e <cosem_add>
    3c98:	1e04      	subs	r4, r0, #0
    3c9a:	bf18      	it	ne
    3c9c:	2401      	movne	r4, #1
    3c9e:	e716      	b.n	3ace <cosem_getModemConfiguration+0x2e>
            if ((ret = cosem_setArray(data, target->modemProfile.size)) == 0)
    3ca0:	4628      	mov	r0, r5
    3ca2:	f00b faea 	bl	f27a <cosem_setArray>
    3ca6:	4604      	mov	r4, r0
    3ca8:	2800      	cmp	r0, #0
    3caa:	f47f af10 	bne.w	3ace <cosem_getModemConfiguration+0x2e>
    3cae:	4607      	mov	r7, r0
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
    3cb0:	f106 081c 	add.w	r8, r6, #28
    3cb4:	e01f      	b.n	3cf6 <cosem_getModemConfiguration+0x256>
    3cb6:	aa01      	add	r2, sp, #4
    3cb8:	4640      	mov	r0, r8
    3cba:	f00d ff6e 	bl	11b9a <arr_getByIndex>
    3cbe:	2800      	cmp	r0, #0
    3cc0:	f47f aefa 	bne.w	3ab8 <cosem_getModemConfiguration+0x18>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3cc4:	2109      	movs	r1, #9
    3cc6:	4628      	mov	r0, r5
    3cc8:	f00a fba1 	bl	e40e <bb_setUInt8>
                    if ((ret = arr_getByIndex(&target->modemProfile, pos, (void**)&ba)) != 0 ||
    3ccc:	2800      	cmp	r0, #0
    3cce:	f47f aef3 	bne.w	3ab8 <cosem_getModemConfiguration+0x18>
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
    3cd2:	9b01      	ldr	r3, [sp, #4]
    3cd4:	4629      	mov	r1, r5
    3cd6:	88d8      	ldrh	r0, [r3, #6]
    3cd8:	f017 fc95 	bl	1b606 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3cdc:	2800      	cmp	r0, #0
    3cde:	f47f aeeb 	bne.w	3ab8 <cosem_getModemConfiguration+0x18>
                        (ret = bb_set(data, ba->data, ba->size)) != 0)
    3ce2:	9b01      	ldr	r3, [sp, #4]
    3ce4:	4628      	mov	r0, r5
    3ce6:	88da      	ldrh	r2, [r3, #6]
    3ce8:	6819      	ldr	r1, [r3, #0]
    3cea:	f00a fc76 	bl	e5da <bb_set>
    3cee:	3701      	adds	r7, #1
                        (ret = hlp_setObjectCount(ba->size, data)) != 0 ||
    3cf0:	2800      	cmp	r0, #0
    3cf2:	f47f aee1 	bne.w	3ab8 <cosem_getModemConfiguration+0x18>
                for (pos = 0; pos != target->modemProfile.size; ++pos)
    3cf6:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    3cf8:	b2b9      	uxth	r1, r7
    3cfa:	428b      	cmp	r3, r1
    3cfc:	d1db      	bne.n	3cb6 <cosem_getModemConfiguration+0x216>
    3cfe:	e6e6      	b.n	3ace <cosem_getModemConfiguration+0x2e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3d00:	f44f 7481 	mov.w	r4, #258	; 0x102
    3d04:	e6e3      	b.n	3ace <cosem_getModemConfiguration+0x2e>
                (ret = cosem_add(data, "CONNECT 33 600", 14) != 0) ||
    3d06:	2401      	movs	r4, #1
    3d08:	e6e1      	b.n	3ace <cosem_getModemConfiguration+0x2e>
    3d0a:	bf00      	nop
    3d0c:	0001f97d 	.word	0x0001f97d
    3d10:	0001f980 	.word	0x0001f980
    3d14:	0001f988 	.word	0x0001f988
    3d18:	0001f98d 	.word	0x0001f98d
    3d1c:	0001f998 	.word	0x0001f998
    3d20:	0001f99e 	.word	0x0001f99e
    3d24:	0001f9ab 	.word	0x0001f9ab
    3d28:	0001f9b8 	.word	0x0001f9b8
    3d2c:	0001f9bd 	.word	0x0001f9bd
    3d30:	0001f9c7 	.word	0x0001f9c7
    3d34:	0001f9d3 	.word	0x0001f9d3
    3d38:	0001f9e0 	.word	0x0001f9e0
    3d3c:	0001f9ed 	.word	0x0001f9ed
    3d40:	0001f9fa 	.word	0x0001f9fa
    3d44:	0001fa09 	.word	0x0001fa09
    3d48:	0001fa18 	.word	0x0001fa18
    3d4c:	0001fa27 	.word	0x0001fa27

00003d50 <cosem_getPppSetup>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION
#ifndef DLMS_IGNORE_PPP_SETUP
int cosem_getPppSetup(
    gxValueEventArg* e)
{
    3d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t pos;
    gxpppSetupLcpOption* lcpItem;
    gxpppSetupIPCPOption* ipcpItem;
    gxPppSetup* object = (gxPppSetup*)e->target;
    gxByteBuffer* data = e->value.byteArr;
    if (e->index == 2)
    3d54:	7e03      	ldrb	r3, [r0, #24]
    gxPppSetup* object = (gxPppSetup*)e->target;
    3d56:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
    3d58:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
    3d5a:	2b02      	cmp	r3, #2
    3d5c:	d10a      	bne.n	3d74 <cosem_getPppSetup+0x24>
#else
        ret = cosem_setOctetString2(e->value.byteArr, object->PHYReference, sizeof(object->PHYReference));
#endif //DLMS_IGNORE_OBJECT_POINTERS
#else
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->phy == NULL)
    3d5e:	69f1      	ldr	r1, [r6, #28]
        {
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3d60:	2206      	movs	r2, #6
        if (object->phy == NULL)
    3d62:	b929      	cbnz	r1, 3d70 <cosem_getPppSetup+0x20>
            ret = cosem_setOctetString2(e->value.byteArr, EMPTY_LN, 6);
    3d64:	4981      	ldr	r1, [pc, #516]	; (3f6c <cosem_getPppSetup+0x21c>)
        }
        else
        {
            ret = cosem_setOctetString2(e->value.byteArr, object->phy->logicalName, 6);
    3d66:	4628      	mov	r0, r5
    3d68:	f00b f9fd 	bl	f166 <cosem_setOctetString2>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
                //Add pw.
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
                (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
                (ret = bb_set2(data, &object->password, 0, bb_size(&object->password))) != 0)
    3d6c:	4604      	mov	r4, r0
    3d6e:	e00a      	b.n	3d86 <cosem_getPppSetup+0x36>
            ret = cosem_setOctetString2(e->value.byteArr, object->phy->logicalName, 6);
    3d70:	4411      	add	r1, r2
    3d72:	e7f8      	b.n	3d66 <cosem_getPppSetup+0x16>
    else if (e->index == 3)
    3d74:	2b03      	cmp	r3, #3
    3d76:	d150      	bne.n	3e1a <cosem_getPppSetup+0xca>
        if ((ret = cosem_setArray(data, object->lcpOptions.size)) == 0)
    3d78:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
    3d7a:	4628      	mov	r0, r5
    3d7c:	f00b fa7d 	bl	f27a <cosem_setArray>
    3d80:	4604      	mov	r4, r0
    3d82:	2800      	cmp	r0, #0
    3d84:	d045      	beq.n	3e12 <cosem_getPppSetup+0xc2>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    3d86:	4620      	mov	r0, r4
    3d88:	b002      	add	sp, #8
    3d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3d8e:	aa01      	add	r2, sp, #4
    3d90:	4640      	mov	r0, r8
    3d92:	f00d ff02 	bl	11b9a <arr_getByIndex>
    3d96:	4604      	mov	r4, r0
    3d98:	2800      	cmp	r0, #0
    3d9a:	d1f4      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3d9c:	2102      	movs	r1, #2
    3d9e:	4628      	mov	r0, r5
    3da0:	f00a fb35 	bl	e40e <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3da4:	4604      	mov	r4, r0
    3da6:	2800      	cmp	r0, #0
    3da8:	d1ed      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3daa:	2103      	movs	r1, #3
    3dac:	4628      	mov	r0, r5
    3dae:	f00a fb2e 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3db2:	4604      	mov	r4, r0
    3db4:	2800      	cmp	r0, #0
    3db6:	d1e6      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3db8:	2111      	movs	r1, #17
    3dba:	4628      	mov	r0, r5
    3dbc:	f00a fb27 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3dc0:	4604      	mov	r4, r0
    3dc2:	2800      	cmp	r0, #0
    3dc4:	d1df      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
    3dc6:	9b01      	ldr	r3, [sp, #4]
    3dc8:	4628      	mov	r0, r5
    3dca:	7819      	ldrb	r1, [r3, #0]
    3dcc:	f00a fb1f 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3dd0:	4604      	mov	r4, r0
    3dd2:	2800      	cmp	r0, #0
    3dd4:	d1d7      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3dd6:	2111      	movs	r1, #17
    3dd8:	4628      	mov	r0, r5
    3dda:	f00a fb18 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, lcpItem->type)) != 0 ||
    3dde:	4604      	mov	r4, r0
    3de0:	2800      	cmp	r0, #0
    3de2:	d1d0      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
    3de4:	9b01      	ldr	r3, [sp, #4]
    3de6:	4628      	mov	r0, r5
    3de8:	7859      	ldrb	r1, [r3, #1]
    3dea:	f00a fb10 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3dee:	4604      	mov	r4, r0
    3df0:	2800      	cmp	r0, #0
    3df2:	d1c8      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = var_getBytes(&lcpItem->data, data)) != 0)
    3df4:	9801      	ldr	r0, [sp, #4]
    3df6:	4629      	mov	r1, r5
    3df8:	3008      	adds	r0, #8
    3dfa:	f018 fa7a 	bl	1c2f2 <var_getBytes>
    3dfe:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)lcpItem->length)) != 0 ||
    3e00:	4604      	mov	r4, r0
    3e02:	2800      	cmp	r0, #0
    3e04:	d1bf      	bne.n	3d86 <cosem_getPppSetup+0x36>
            for (pos = 0; pos != object->lcpOptions.size; ++pos)
    3e06:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    3e08:	b2b9      	uxth	r1, r7
    3e0a:	428b      	cmp	r3, r1
    3e0c:	d1bf      	bne.n	3d8e <cosem_getPppSetup+0x3e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3e0e:	2400      	movs	r4, #0
    3e10:	e7b9      	b.n	3d86 <cosem_getPppSetup+0x36>
    3e12:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->lcpOptions, pos, (void**)&lcpItem)) != 0 ||
    3e14:	f106 0820 	add.w	r8, r6, #32
    3e18:	e7f5      	b.n	3e06 <cosem_getPppSetup+0xb6>
    else if (e->index == 4)
    3e1a:	2b04      	cmp	r3, #4
    3e1c:	d14e      	bne.n	3ebc <cosem_getPppSetup+0x16c>
        if ((ret = cosem_setArray(data, object->ipcpOptions.size)) == 0)
    3e1e:	8af1      	ldrh	r1, [r6, #22]
    3e20:	4628      	mov	r0, r5
    3e22:	f00b fa2a 	bl	f27a <cosem_setArray>
    3e26:	4604      	mov	r4, r0
    3e28:	2800      	cmp	r0, #0
    3e2a:	d1ac      	bne.n	3d86 <cosem_getPppSetup+0x36>
    3e2c:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->ipcpOptions, pos, (void**)&ipcpItem)) != 0 ||
    3e2e:	f106 0810 	add.w	r8, r6, #16
    3e32:	e03e      	b.n	3eb2 <cosem_getPppSetup+0x162>
    3e34:	aa01      	add	r2, sp, #4
    3e36:	4640      	mov	r0, r8
    3e38:	f00d feaf 	bl	11b9a <arr_getByIndex>
    3e3c:	4604      	mov	r4, r0
    3e3e:	2800      	cmp	r0, #0
    3e40:	d1a1      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3e42:	2102      	movs	r1, #2
    3e44:	4628      	mov	r0, r5
    3e46:	f00a fae2 	bl	e40e <bb_setUInt8>
                if ((ret = arr_getByIndex(&object->ipcpOptions, pos, (void**)&ipcpItem)) != 0 ||
    3e4a:	4604      	mov	r4, r0
    3e4c:	2800      	cmp	r0, #0
    3e4e:	d19a      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3e50:	2103      	movs	r1, #3
    3e52:	4628      	mov	r0, r5
    3e54:	f00a fadb 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3e58:	4604      	mov	r4, r0
    3e5a:	2800      	cmp	r0, #0
    3e5c:	d193      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3e5e:	2111      	movs	r1, #17
    3e60:	4628      	mov	r0, r5
    3e62:	f00a fad4 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 3)) != 0 ||
    3e66:	4604      	mov	r4, r0
    3e68:	2800      	cmp	r0, #0
    3e6a:	d18c      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
    3e6c:	9b01      	ldr	r3, [sp, #4]
    3e6e:	4628      	mov	r0, r5
    3e70:	7819      	ldrb	r1, [r3, #0]
    3e72:	f00a facc 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3e76:	4604      	mov	r4, r0
    3e78:	2800      	cmp	r0, #0
    3e7a:	d184      	bne.n	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3e7c:	2111      	movs	r1, #17
    3e7e:	4628      	mov	r0, r5
    3e80:	f00a fac5 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, ipcpItem->type)) != 0 ||
    3e84:	4604      	mov	r4, r0
    3e86:	2800      	cmp	r0, #0
    3e88:	f47f af7d 	bne.w	3d86 <cosem_getPppSetup+0x36>
                    (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
    3e8c:	9b01      	ldr	r3, [sp, #4]
    3e8e:	4628      	mov	r0, r5
    3e90:	7859      	ldrb	r1, [r3, #1]
    3e92:	f00a fabc 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT8)) != 0 ||
    3e96:	4604      	mov	r4, r0
    3e98:	2800      	cmp	r0, #0
    3e9a:	f47f af74 	bne.w	3d86 <cosem_getPppSetup+0x36>
                    (ret = var_getBytes(&ipcpItem->data, data)) != 0)
    3e9e:	9801      	ldr	r0, [sp, #4]
    3ea0:	4629      	mov	r1, r5
    3ea2:	3008      	adds	r0, #8
    3ea4:	f018 fa25 	bl	1c2f2 <var_getBytes>
    3ea8:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, (unsigned char)ipcpItem->length)) != 0 ||
    3eaa:	4604      	mov	r4, r0
    3eac:	2800      	cmp	r0, #0
    3eae:	f47f af6a 	bne.w	3d86 <cosem_getPppSetup+0x36>
            for (pos = 0; pos != object->ipcpOptions.size; ++pos)
    3eb2:	8af3      	ldrh	r3, [r6, #22]
    3eb4:	b2b9      	uxth	r1, r7
    3eb6:	428b      	cmp	r3, r1
    3eb8:	d1bc      	bne.n	3e34 <cosem_getPppSetup+0xe4>
    3eba:	e7a8      	b.n	3e0e <cosem_getPppSetup+0xbe>
    else if (e->index == 5)
    3ebc:	2b05      	cmp	r3, #5
    3ebe:	d152      	bne.n	3f66 <cosem_getPppSetup+0x216>
        if (bb_size(&object->userName) == 0)
    3ec0:	f106 072c 	add.w	r7, r6, #44	; 0x2c
    3ec4:	4638      	mov	r0, r7
    3ec6:	f00a fa36 	bl	e336 <bb_size>
    3eca:	4601      	mov	r1, r0
    3ecc:	b918      	cbnz	r0, 3ed6 <cosem_getPppSetup+0x186>
            ret = bb_setUInt8(data, DLMS_DATA_TYPE_NONE);
    3ece:	4628      	mov	r0, r5
    3ed0:	f00a fa9d 	bl	e40e <bb_setUInt8>
    3ed4:	e74a      	b.n	3d6c <cosem_getPppSetup+0x1c>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3ed6:	2102      	movs	r1, #2
    3ed8:	4628      	mov	r0, r5
    3eda:	f00a fa98 	bl	e40e <bb_setUInt8>
    3ede:	4604      	mov	r4, r0
    3ee0:	2800      	cmp	r0, #0
    3ee2:	f47f af50 	bne.w	3d86 <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, 2)) != 0 ||
    3ee6:	2102      	movs	r1, #2
    3ee8:	4628      	mov	r0, r5
    3eea:	f00a fa90 	bl	e40e <bb_setUInt8>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3eee:	4604      	mov	r4, r0
    3ef0:	2800      	cmp	r0, #0
    3ef2:	f47f af48 	bne.w	3d86 <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3ef6:	2109      	movs	r1, #9
    3ef8:	4628      	mov	r0, r5
    3efa:	f00a fa88 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, 2)) != 0 ||
    3efe:	4604      	mov	r4, r0
    3f00:	2800      	cmp	r0, #0
    3f02:	f47f af40 	bne.w	3d86 <cosem_getPppSetup+0x36>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
    3f06:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    3f08:	4629      	mov	r1, r5
    3f0a:	f017 fb7c 	bl	1b606 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3f0e:	4604      	mov	r4, r0
    3f10:	2800      	cmp	r0, #0
    3f12:	f47f af38 	bne.w	3d86 <cosem_getPppSetup+0x36>
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
    3f16:	4638      	mov	r0, r7
    3f18:	f00a fa0d 	bl	e336 <bb_size>
    3f1c:	4622      	mov	r2, r4
    3f1e:	4603      	mov	r3, r0
    3f20:	4639      	mov	r1, r7
    3f22:	4628      	mov	r0, r5
    3f24:	f00a fb88 	bl	e638 <bb_set2>
                (ret = hlp_setObjectCount(object->userName.size, data)) != 0 ||
    3f28:	4604      	mov	r4, r0
    3f2a:	2800      	cmp	r0, #0
    3f2c:	f47f af2b 	bne.w	3d86 <cosem_getPppSetup+0x36>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3f30:	2109      	movs	r1, #9
    3f32:	4628      	mov	r0, r5
    3f34:	f00a fa6b 	bl	e40e <bb_setUInt8>
                (ret = bb_set2(data, &object->userName, 0, bb_size(&object->userName))) != 0 ||
    3f38:	4604      	mov	r4, r0
    3f3a:	2800      	cmp	r0, #0
    3f3c:	f47f af23 	bne.w	3d86 <cosem_getPppSetup+0x36>
                (ret = hlp_setObjectCount(object->password.size, data)) != 0 ||
    3f40:	8ff0      	ldrh	r0, [r6, #62]	; 0x3e
    3f42:	4629      	mov	r1, r5
    3f44:	f017 fb5f 	bl	1b606 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    3f48:	4604      	mov	r4, r0
    3f4a:	2800      	cmp	r0, #0
    3f4c:	f47f af1b 	bne.w	3d86 <cosem_getPppSetup+0x36>
                (ret = bb_set2(data, &object->password, 0, bb_size(&object->password))) != 0)
    3f50:	3638      	adds	r6, #56	; 0x38
    3f52:	4630      	mov	r0, r6
    3f54:	f00a f9ef 	bl	e336 <bb_size>
    3f58:	4622      	mov	r2, r4
    3f5a:	4603      	mov	r3, r0
    3f5c:	4631      	mov	r1, r6
    3f5e:	4628      	mov	r0, r5
    3f60:	f00a fb6a 	bl	e638 <bb_set2>
    3f64:	e702      	b.n	3d6c <cosem_getPppSetup+0x1c>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    3f66:	f44f 7481 	mov.w	r4, #258	; 0x102
    3f6a:	e70c      	b.n	3d86 <cosem_getPppSetup+0x36>
    3f6c:	0001fa36 	.word	0x0001fa36

00003f70 <cosem_getParameterMonitor>:
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC

#ifndef DLMS_IGNORE_PARAMETER_MONITOR
int cosem_getParameterMonitor(
    gxValueEventArg* e)
{
    3f70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint16_t pos;
    gxByteBuffer* data = e->value.byteArr;
    gxParameterMonitor* object = (gxParameterMonitor*)e->target;
    switch (e->index)
    3f74:	7e01      	ldrb	r1, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
    3f76:	6885      	ldr	r5, [r0, #8]
    gxParameterMonitor* object = (gxParameterMonitor*)e->target;
    3f78:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
    3f7a:	2903      	cmp	r1, #3
    3f7c:	d047      	beq.n	400e <cosem_getParameterMonitor+0x9e>
    3f7e:	2904      	cmp	r1, #4
    3f80:	d04b      	beq.n	401a <cosem_getParameterMonitor+0xaa>
    3f82:	2902      	cmp	r1, #2
    3f84:	f040 8083 	bne.w	408e <cosem_getParameterMonitor+0x11e>
    {
    case 2:
    {
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3f88:	4628      	mov	r0, r5
    3f8a:	f00a fa40 	bl	e40e <bb_setUInt8>
    3f8e:	4604      	mov	r4, r0
    3f90:	2800      	cmp	r0, #0
    3f92:	d149      	bne.n	4028 <cosem_getParameterMonitor+0xb8>
            (ret = bb_setUInt8(data, 4)) != 0)
    3f94:	2104      	movs	r1, #4
    3f96:	4628      	mov	r0, r5
    3f98:	f00a fa39 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    3f9c:	4604      	mov	r4, r0
    3f9e:	2800      	cmp	r0, #0
    3fa0:	d142      	bne.n	4028 <cosem_getParameterMonitor+0xb8>
        {
            return ret;
        }
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        if (object->changedParameter.target == NULL)
    3fa2:	6933      	ldr	r3, [r6, #16]
    3fa4:	b9cb      	cbnz	r3, 3fda <cosem_getParameterMonitor+0x6a>
        {
            if ((ret = cosem_setUInt16(data, 0)) != 0 ||
    3fa6:	4601      	mov	r1, r0
    3fa8:	4628      	mov	r0, r5
    3faa:	f00b f90b 	bl	f1c4 <cosem_setUInt16>
    3fae:	4604      	mov	r4, r0
    3fb0:	2800      	cmp	r0, #0
    3fb2:	d139      	bne.n	4028 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setOctetString2(data, EMPTY_LN, 6)) != 0 ||
    3fb4:	4937      	ldr	r1, [pc, #220]	; (4094 <cosem_getParameterMonitor+0x124>)
    3fb6:	2206      	movs	r2, #6
    3fb8:	4628      	mov	r0, r5
    3fba:	f00b f8d4 	bl	f166 <cosem_setOctetString2>
            if ((ret = cosem_setUInt16(data, 0)) != 0 ||
    3fbe:	4604      	mov	r4, r0
    3fc0:	bb90      	cbnz	r0, 4028 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setInt8(data, 0)) != 0 ||
    3fc2:	4601      	mov	r1, r0
    3fc4:	4628      	mov	r0, r5
    3fc6:	f00b f919 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setOctetString2(data, EMPTY_LN, 6)) != 0 ||
    3fca:	4604      	mov	r4, r0
    3fcc:	bb60      	cbnz	r0, 4028 <cosem_getParameterMonitor+0xb8>
                (ret = bb_setUInt8(data, 0)) != 0)
    3fce:	4601      	mov	r1, r0
    3fd0:	4628      	mov	r0, r5
    3fd2:	f00a fa1c 	bl	e40e <bb_setUInt8>
                    //Type.
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
                    //LN
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
                    //attributeIndex
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0)
    3fd6:	4604      	mov	r4, r0
                }
#endif //DLMS_IGNORE_MALLOC
            }
        }
    }
    break;
    3fd8:	e026      	b.n	4028 <cosem_getParameterMonitor+0xb8>
            if ((ret = cosem_setUInt16(data, object->changedParameter.target->objectType)) != 0 ||
    3fda:	8819      	ldrh	r1, [r3, #0]
    3fdc:	4628      	mov	r0, r5
    3fde:	f00b f8f1 	bl	f1c4 <cosem_setUInt16>
    3fe2:	4604      	mov	r4, r0
    3fe4:	bb00      	cbnz	r0, 4028 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setOctetString2(data, object->changedParameter.target->logicalName, 6)) != 0 ||
    3fe6:	6931      	ldr	r1, [r6, #16]
    3fe8:	2206      	movs	r2, #6
    3fea:	4411      	add	r1, r2
    3fec:	4628      	mov	r0, r5
    3fee:	f00b f8ba 	bl	f166 <cosem_setOctetString2>
            if ((ret = cosem_setUInt16(data, object->changedParameter.target->objectType)) != 0 ||
    3ff2:	4604      	mov	r4, r0
    3ff4:	b9c0      	cbnz	r0, 4028 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setInt8(data, object->changedParameter.attributeIndex)) != 0 ||
    3ff6:	7d31      	ldrb	r1, [r6, #20]
    3ff8:	4628      	mov	r0, r5
    3ffa:	f00b f8ff 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setOctetString2(data, object->changedParameter.target->logicalName, 6)) != 0 ||
    3ffe:	4604      	mov	r4, r0
    4000:	b990      	cbnz	r0, 4028 <cosem_getParameterMonitor+0xb8>
                (ret = cosem_setVariant(data, &object->changedParameter.value)) != 0)
    4002:	f106 0118 	add.w	r1, r6, #24
    4006:	4628      	mov	r0, r5
    4008:	f00b f922 	bl	f250 <cosem_setVariant>
    400c:	e7e3      	b.n	3fd6 <cosem_getParameterMonitor+0x66>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->captureTime);
    400e:	f106 0128 	add.w	r1, r6, #40	; 0x28
    4012:	4628      	mov	r0, r5
    4014:	f00a ffd5 	bl	efc2 <cosem_setDateTimeAsOctetString>
    4018:	e7dd      	b.n	3fd6 <cosem_getParameterMonitor+0x66>
        if ((ret = cosem_setArray(data, object->parameters.size)) == 0)
    401a:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
    401c:	4628      	mov	r0, r5
    401e:	f00b f92c 	bl	f27a <cosem_setArray>
    4022:	4604      	mov	r4, r0
    4024:	2800      	cmp	r0, #0
    4026:	d02e      	beq.n	4086 <cosem_getParameterMonitor+0x116>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
    4028:	4620      	mov	r0, r4
    402a:	b002      	add	sp, #8
    402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    4030:	aa01      	add	r2, sp, #4
    4032:	4640      	mov	r0, r8
    4034:	f00d fdb1 	bl	11b9a <arr_getByIndex>
    4038:	2800      	cmp	r0, #0
    403a:	d1cc      	bne.n	3fd6 <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
    403c:	2103      	movs	r1, #3
    403e:	4628      	mov	r0, r5
    4040:	f00b f90d 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    4044:	2800      	cmp	r0, #0
    4046:	d1c6      	bne.n	3fd6 <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
    4048:	9b01      	ldr	r3, [sp, #4]
    404a:	681b      	ldr	r3, [r3, #0]
    404c:	4628      	mov	r0, r5
    404e:	8819      	ldrh	r1, [r3, #0]
    4050:	f00b f8b8 	bl	f1c4 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
    4054:	2800      	cmp	r0, #0
    4056:	d1be      	bne.n	3fd6 <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
    4058:	9b01      	ldr	r3, [sp, #4]
    405a:	6819      	ldr	r1, [r3, #0]
    405c:	2206      	movs	r2, #6
    405e:	4411      	add	r1, r2
    4060:	4628      	mov	r0, r5
    4062:	f00b f880 	bl	f166 <cosem_setOctetString2>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
    4066:	2800      	cmp	r0, #0
    4068:	d1b5      	bne.n	3fd6 <cosem_getParameterMonitor+0x66>
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0)
    406a:	9b01      	ldr	r3, [sp, #4]
    406c:	685b      	ldr	r3, [r3, #4]
    406e:	4628      	mov	r0, r5
    4070:	7819      	ldrb	r1, [r3, #0]
    4072:	f00b f8c3 	bl	f1fc <cosem_setInt8>
    4076:	3701      	adds	r7, #1
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
    4078:	2800      	cmp	r0, #0
    407a:	d1ac      	bne.n	3fd6 <cosem_getParameterMonitor+0x66>
            for (pos = 0; pos != object->parameters.size; ++pos)
    407c:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
    407e:	b2b9      	uxth	r1, r7
    4080:	428b      	cmp	r3, r1
    4082:	d1d5      	bne.n	4030 <cosem_getParameterMonitor+0xc0>
    4084:	e7d0      	b.n	4028 <cosem_getParameterMonitor+0xb8>
    4086:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->parameters, pos, (void**)&it)) != 0 ||
    4088:	f106 0834 	add.w	r8, r6, #52	; 0x34
    408c:	e7f6      	b.n	407c <cosem_getParameterMonitor+0x10c>
    switch (e->index)
    408e:	f44f 7481 	mov.w	r4, #258	; 0x102
    4092:	e7c9      	b.n	4028 <cosem_getParameterMonitor+0xb8>
    4094:	0001fa36 	.word	0x0001fa36

00004098 <obj_getLogicalName>:
#include "../include/gxobjects.h"
#include "../include/objectarray.h"

const unsigned char* obj_getLogicalName(gxObject* target)
{
    if (target == NULL)
    4098:	b108      	cbz	r0, 409e <obj_getLogicalName+0x6>
    {
        return EMPTY_LN;
    }
    return target->logicalName;
    409a:	3006      	adds	r0, #6
    409c:	4770      	bx	lr
        return EMPTY_LN;
    409e:	4801      	ldr	r0, [pc, #4]	; (40a4 <obj_getLogicalName+0xc>)
}
    40a0:	4770      	bx	lr
    40a2:	bf00      	nop
    40a4:	0001fa3c 	.word	0x0001fa3c

000040a8 <cosem_setProfileGeneric>:
int cosem_setProfileGeneric(
    dlmsSettings* settings,
    gxProfileGeneric* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    40a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    uint16_t pos, pos2;
    DLMS_OBJECT_TYPE type;
    dlmsVARIANT* tmp, * row, * data;
    variantArray* va;
    if (index == 2)
    40ac:	2a02      	cmp	r2, #2
{
    40ae:	b08b      	sub	sp, #44	; 0x2c
    40b0:	4680      	mov	r8, r0
    40b2:	460c      	mov	r4, r1
    40b4:	461e      	mov	r6, r3
    if (index == 2)
    40b6:	f040 80e5 	bne.w	4284 <cosem_setProfileGeneric+0x1dc>
    {
        static unsigned char UNIX_TIME[6] = { 0, 0, 1, 1, 0, 255 };
        if (object->captureObjects.size == 0)
    40ba:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
    40bc:	b92b      	cbnz	r3, 40ca <cosem_setProfileGeneric+0x22>
                    {
                        uint16_t cCount = row->Arr->size;
                        if (cCount > object->captureObjects.size)
                        {
                            //Number of columns do not match.
                            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    40be:	f44f 7281 	mov.w	r2, #258	; 0x102
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
    40c2:	4610      	mov	r0, r2
    40c4:	b00b      	add	sp, #44	; 0x2c
    40c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ret = obj_clearProfileGenericBuffer(&object->buffer)) == 0)
    40ca:	f101 0710 	add.w	r7, r1, #16
    40ce:	4638      	mov	r0, r7
    40d0:	f011 f838 	bl	15144 <obj_clearProfileGenericBuffer>
    40d4:	4605      	mov	r5, r0
    40d6:	bb40      	cbnz	r0, 412a <cosem_setProfileGeneric+0x82>
            if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
    40d8:	7833      	ldrb	r3, [r6, #0]
    40da:	2b09      	cmp	r3, #9
    40dc:	d125      	bne.n	412a <cosem_setProfileGeneric+0x82>
                uint16_t rIndex, rCount = arr_getCapacity(&object->buffer);
    40de:	4638      	mov	r0, r7
    40e0:	f00d fcf4 	bl	11acc <arr_getCapacity>
                if ((ret = cosem_checkArray(value->byteArr, &rCount)) == 0)
    40e4:	a905      	add	r1, sp, #20
                uint16_t rIndex, rCount = arr_getCapacity(&object->buffer);
    40e6:	f8ad 0014 	strh.w	r0, [sp, #20]
                if ((ret = cosem_checkArray(value->byteArr, &rCount)) == 0)
    40ea:	68b0      	ldr	r0, [r6, #8]
    40ec:	f00a ff3e 	bl	ef6c <cosem_checkArray>
    40f0:	4605      	mov	r5, r0
    40f2:	b9d0      	cbnz	r0, 412a <cosem_setProfileGeneric+0x82>
                    object->buffer.size = rCount;
    40f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    40f8:	82e3      	strh	r3, [r4, #22]
                    if (rCount != 0 && (ret = arr_getByIndex(&object->buffer, 0, (void**)&row)) == 0)
    40fa:	b1b3      	cbz	r3, 412a <cosem_setProfileGeneric+0x82>
    40fc:	4601      	mov	r1, r0
    40fe:	aa06      	add	r2, sp, #24
    4100:	4638      	mov	r0, r7
    4102:	f00d fd4a 	bl	11b9a <arr_getByIndex>
    4106:	2800      	cmp	r0, #0
    4108:	d138      	bne.n	417c <cosem_setProfileGeneric+0xd4>
                        uint16_t cCount = row->Arr->size;
    410a:	9b06      	ldr	r3, [sp, #24]
    410c:	689b      	ldr	r3, [r3, #8]
    410e:	f8b3 9006 	ldrh.w	r9, [r3, #6]
                        if (cCount > object->captureObjects.size)
    4112:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    4114:	454b      	cmp	r3, r9
    4116:	d3d2      	bcc.n	40be <cosem_setProfileGeneric+0x16>
    4118:	46aa      	mov	sl, r5
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    411a:	fa5f f989 	uxtb.w	r9, r9
                        for (rIndex = 0; rIndex != rCount; ++rIndex)
    411e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    4122:	fa1f f18a 	uxth.w	r1, sl
    4126:	428b      	cmp	r3, r1
    4128:	d11b      	bne.n	4162 <cosem_setProfileGeneric+0xba>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
    412a:	7833      	ldrb	r3, [r6, #0]
    412c:	2b01      	cmp	r3, #1
    412e:	d10e      	bne.n	414e <cosem_setProfileGeneric+0xa6>
            arr_capacity(&object->buffer, value->Arr->size);
    4130:	68b3      	ldr	r3, [r6, #8]
                            memcmp(obj->logicalName, UNIX_TIME, 6) == 0)
    4132:	f8df b290 	ldr.w	fp, [pc, #656]	; 43c4 <cosem_setProfileGeneric+0x31c>
            arr_capacity(&object->buffer, value->Arr->size);
    4136:	88d9      	ldrh	r1, [r3, #6]
    4138:	4638      	mov	r0, r7
    413a:	f00d fccb 	bl	11ad4 <arr_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
    413e:	f04f 0900 	mov.w	r9, #0
    4142:	68b0      	ldr	r0, [r6, #8]
    4144:	88c2      	ldrh	r2, [r0, #6]
    4146:	fa1f f389 	uxth.w	r3, r9
    414a:	429a      	cmp	r2, r3
    414c:	d118      	bne.n	4180 <cosem_setProfileGeneric+0xd8>
        if (settings->server)
    414e:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
    4152:	8ae1      	ldrh	r1, [r4, #22]
    4154:	b103      	cbz	r3, 4158 <cosem_setProfileGeneric+0xb0>
            object->entriesInUse = object->buffer.size;
    4156:	63a1      	str	r1, [r4, #56]	; 0x38
        arr_capacity(&object->buffer, object->buffer.size);
    4158:	4638      	mov	r0, r7
    415a:	f00d fcbb 	bl	11ad4 <arr_capacity>
                ret = va_getByIndex(value->Arr, pos, &row);
    415e:	462a      	mov	r2, r5
    4160:	e7af      	b.n	40c2 <cosem_setProfileGeneric+0x1a>
                            if ((ret = arr_getByIndex(&object->buffer, rIndex, (void**)&row)) != 0 ||
    4162:	aa06      	add	r2, sp, #24
    4164:	4638      	mov	r0, r7
    4166:	f00d fd18 	bl	11b9a <arr_getByIndex>
    416a:	b938      	cbnz	r0, 417c <cosem_setProfileGeneric+0xd4>
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    416c:	68b0      	ldr	r0, [r6, #8]
    416e:	4649      	mov	r1, r9
    4170:	f00a fecd 	bl	ef0e <cosem_checkStructure>
    4174:	f10a 0a01 	add.w	sl, sl, #1
                            if ((ret = arr_getByIndex(&object->buffer, rIndex, (void**)&row)) != 0 ||
    4178:	2800      	cmp	r0, #0
    417a:	d0d0      	beq.n	411e <cosem_setProfileGeneric+0x76>
                                (ret = cosem_checkStructure(value->byteArr, (unsigned char)cCount)) != 0)
    417c:	4605      	mov	r5, r0
    417e:	e7d4      	b.n	412a <cosem_setProfileGeneric+0x82>
                ret = va_getByIndex(value->Arr, pos, &row);
    4180:	aa03      	add	r2, sp, #12
    4182:	fa1f f189 	uxth.w	r1, r9
    4186:	f017 ff74 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
    418a:	4605      	mov	r5, r0
    418c:	2800      	cmp	r0, #0
    418e:	d1e6      	bne.n	415e <cosem_setProfileGeneric+0xb6>
                if (row->Arr->size != object->captureObjects.size)
    4190:	9b03      	ldr	r3, [sp, #12]
    4192:	689b      	ldr	r3, [r3, #8]
    4194:	88da      	ldrh	r2, [r3, #6]
    4196:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    4198:	429a      	cmp	r2, r3
    419a:	d190      	bne.n	40be <cosem_setProfileGeneric+0x16>
    419c:	4682      	mov	sl, r0
                for (pos2 = 0; pos2 < row->Arr->size; ++pos2)
    419e:	9a03      	ldr	r2, [sp, #12]
    41a0:	6890      	ldr	r0, [r2, #8]
    41a2:	88c2      	ldrh	r2, [r0, #6]
    41a4:	fa1f f38a 	uxth.w	r3, sl
    41a8:	429a      	cmp	r2, r3
    41aa:	d811      	bhi.n	41d0 <cosem_setProfileGeneric+0x128>
                va = (variantArray*)gxmalloc(sizeof(variantArray));
    41ac:	2008      	movs	r0, #8
    41ae:	f009 f8a1 	bl	d2f4 <malloc>
    41b2:	4682      	mov	sl, r0
                va_init(va);
    41b4:	f017 fe65 	bl	1be82 <va_init>
                va_attach2(va, row->Arr);
    41b8:	9b03      	ldr	r3, [sp, #12]
    41ba:	4650      	mov	r0, sl
    41bc:	6899      	ldr	r1, [r3, #8]
    41be:	f017 ff4e 	bl	1c05e <va_attach2>
                arr_push(&object->buffer, va);
    41c2:	4651      	mov	r1, sl
    41c4:	4638      	mov	r0, r7
    41c6:	f00d fcab 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
    41ca:	f109 0901 	add.w	r9, r9, #1
    41ce:	e7b8      	b.n	4142 <cosem_setProfileGeneric+0x9a>
                    ret = va_getByIndex(row->Arr, pos2, &data);
    41d0:	aa04      	add	r2, sp, #16
    41d2:	fa1f f18a 	uxth.w	r1, sl
    41d6:	9301      	str	r3, [sp, #4]
    41d8:	f017 ff4b 	bl	1c072 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
    41dc:	4602      	mov	r2, r0
    41de:	2800      	cmp	r0, #0
    41e0:	f47f af6f 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
                    if (data->vt == DLMS_DATA_TYPE_OCTET_STRING || data->vt == DLMS_DATA_TYPE_UINT32)
    41e4:	9a04      	ldr	r2, [sp, #16]
    41e6:	9b01      	ldr	r3, [sp, #4]
    41e8:	7812      	ldrb	r2, [r2, #0]
    41ea:	2a09      	cmp	r2, #9
    41ec:	d001      	beq.n	41f2 <cosem_setProfileGeneric+0x14a>
    41ee:	2a06      	cmp	r2, #6
    41f0:	d12c      	bne.n	424c <cosem_setProfileGeneric+0x1a4>
                        if ((ret = arr_getByIndex(&object->captureObjects, pos2, (void**)&k)) != 0)
    41f2:	aa05      	add	r2, sp, #20
    41f4:	4619      	mov	r1, r3
    41f6:	f104 001c 	add.w	r0, r4, #28
    41fa:	f00d fcce 	bl	11b9a <arr_getByIndex>
    41fe:	4602      	mov	r2, r0
    4200:	2800      	cmp	r0, #0
    4202:	f47f af5e 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    4206:	9a04      	ldr	r2, [sp, #16]
                        obj = (gxObject*)k->key;
    4208:	9b05      	ldr	r3, [sp, #20]
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    420a:	7812      	ldrb	r2, [r2, #0]
    420c:	2a09      	cmp	r2, #9
                        t = (gxTarget*)k->value;
    420e:	e9d3 0300 	ldrd	r0, r3, [r3]
                        if (data->vt == DLMS_DATA_TYPE_OCTET_STRING && obj->objectType == DLMS_OBJECT_TYPE_CLOCK && t->attributeIndex == 2)
    4212:	d11e      	bne.n	4252 <cosem_setProfileGeneric+0x1aa>
    4214:	8802      	ldrh	r2, [r0, #0]
    4216:	2a08      	cmp	r2, #8
    4218:	d118      	bne.n	424c <cosem_setProfileGeneric+0x1a4>
    421a:	f993 3000 	ldrsb.w	r3, [r3]
    421e:	2b02      	cmp	r3, #2
    4220:	d114      	bne.n	424c <cosem_setProfileGeneric+0x1a4>
                            var_init(&tmp3);
    4222:	a806      	add	r0, sp, #24
    4224:	f017 fd4b 	bl	1bcbe <var_init>
                            var_attach(&tmp3, data->byteArr);
    4228:	9b04      	ldr	r3, [sp, #16]
    422a:	a806      	add	r0, sp, #24
    422c:	6899      	ldr	r1, [r3, #8]
    422e:	f018 f939 	bl	1c4a4 <var_attach>
                            ret = dlms_changeType(tmp3.byteArr, DLMS_DATA_TYPE_DATETIME, data);
    4232:	9a04      	ldr	r2, [sp, #16]
    4234:	9808      	ldr	r0, [sp, #32]
    4236:	2119      	movs	r1, #25
    4238:	f00d f91e 	bl	11478 <dlms_changeType>
    423c:	9001      	str	r0, [sp, #4]
                            var_clear(&tmp3);
    423e:	a806      	add	r0, sp, #24
    4240:	f017 fe99 	bl	1bf76 <var_clear>
                            if (ret != 0)
    4244:	9a01      	ldr	r2, [sp, #4]
    4246:	2a00      	cmp	r2, #0
    4248:	f47f af3b 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
                for (pos2 = 0; pos2 < row->Arr->size; ++pos2)
    424c:	f10a 0a01 	add.w	sl, sl, #1
    4250:	e7a5      	b.n	419e <cosem_setProfileGeneric+0xf6>
                        else if (data->vt == DLMS_DATA_TYPE_UINT32 && obj->objectType == DLMS_OBJECT_TYPE_DATA && t->attributeIndex == 2 &&
    4252:	2a06      	cmp	r2, #6
    4254:	d1fa      	bne.n	424c <cosem_setProfileGeneric+0x1a4>
    4256:	8801      	ldrh	r1, [r0, #0]
    4258:	2901      	cmp	r1, #1
    425a:	d1f7      	bne.n	424c <cosem_setProfileGeneric+0x1a4>
    425c:	f993 3000 	ldrsb.w	r3, [r3]
    4260:	2b02      	cmp	r3, #2
    4262:	d1f3      	bne.n	424c <cosem_setProfileGeneric+0x1a4>
                            memcmp(obj->logicalName, UNIX_TIME, 6) == 0)
    4264:	4659      	mov	r1, fp
    4266:	3006      	adds	r0, #6
    4268:	f019 ffbd 	bl	1e1e6 <memcmp>
                        else if (data->vt == DLMS_DATA_TYPE_UINT32 && obj->objectType == DLMS_OBJECT_TYPE_DATA && t->attributeIndex == 2 &&
    426c:	2800      	cmp	r0, #0
    426e:	d1ed      	bne.n	424c <cosem_setProfileGeneric+0x1a4>
                            time_initUnix(&tmp4, data->ulVal);
    4270:	9b04      	ldr	r3, [sp, #16]
    4272:	a806      	add	r0, sp, #24
    4274:	6899      	ldr	r1, [r3, #8]
    4276:	f00b f944 	bl	f502 <time_initUnix>
                            var_setDateTime(data, &tmp4);
    427a:	9804      	ldr	r0, [sp, #16]
    427c:	a906      	add	r1, sp, #24
    427e:	f018 f83c 	bl	1c2fa <var_setDateTime>
    4282:	e7e3      	b.n	424c <cosem_setProfileGeneric+0x1a4>
    else if (index == 3)
    4284:	2a03      	cmp	r2, #3
    4286:	d111      	bne.n	42ac <cosem_setProfileGeneric+0x204>
        object->entriesInUse = 0;
    4288:	2300      	movs	r3, #0
    428a:	638b      	str	r3, [r1, #56]	; 0x38
        ret = obj_clearProfileGenericBuffer(&object->buffer);
    428c:	f101 0010 	add.w	r0, r1, #16
    4290:	f010 ff58 	bl	15144 <obj_clearProfileGenericBuffer>
        if (ret == DLMS_ERROR_CODE_OK)
    4294:	4602      	mov	r2, r0
    4296:	2800      	cmp	r0, #0
    4298:	f47f af13 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
            ret = setCaptureObjects(settings, &object->captureObjects, value);
    429c:	4632      	mov	r2, r6
    429e:	f104 011c 	add.w	r1, r4, #28
    42a2:	4640      	mov	r0, r8
    42a4:	f015 fd9f 	bl	19de6 <setCaptureObjects>
    42a8:	4602      	mov	r2, r0
    42aa:	e70a      	b.n	40c2 <cosem_setProfileGeneric+0x1a>
    else if (index == 4)
    42ac:	2a04      	cmp	r2, #4
    42ae:	d105      	bne.n	42bc <cosem_setProfileGeneric+0x214>
        object->capturePeriod = var_toInteger(value);
    42b0:	4618      	mov	r0, r3
    42b2:	f018 f858 	bl	1c366 <var_toInteger>
    42b6:	62a0      	str	r0, [r4, #40]	; 0x28
    int ret = 0;
    42b8:	2200      	movs	r2, #0
    42ba:	e702      	b.n	40c2 <cosem_setProfileGeneric+0x1a>
    else if (index == 5)
    42bc:	2a05      	cmp	r2, #5
    42be:	d105      	bne.n	42cc <cosem_setProfileGeneric+0x224>
        object->sortMethod = (DLMS_SORT_METHOD)var_toInteger(value);
    42c0:	4618      	mov	r0, r3
    42c2:	f018 f850 	bl	1c366 <var_toInteger>
    42c6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    42ca:	e7f5      	b.n	42b8 <cosem_setProfileGeneric+0x210>
    else if (index == 6)
    42cc:	2a06      	cmp	r2, #6
    42ce:	d169      	bne.n	43a4 <cosem_setProfileGeneric+0x2fc>
        if (value->vt == DLMS_DATA_TYPE_NONE)
    42d0:	781a      	ldrb	r2, [r3, #0]
    42d2:	b90a      	cbnz	r2, 42d8 <cosem_setProfileGeneric+0x230>
            object->sortObject = NULL;
    42d4:	630a      	str	r2, [r1, #48]	; 0x30
    42d6:	e6f4      	b.n	40c2 <cosem_setProfileGeneric+0x1a>
            if (value->Arr == NULL || value->Arr->size != 4)
    42d8:	6898      	ldr	r0, [r3, #8]
    42da:	2800      	cmp	r0, #0
    42dc:	f43f aeef 	beq.w	40be <cosem_setProfileGeneric+0x16>
    42e0:	88c3      	ldrh	r3, [r0, #6]
    42e2:	2b04      	cmp	r3, #4
    42e4:	f47f aeeb 	bne.w	40be <cosem_setProfileGeneric+0x16>
            ret = va_getByIndex(value->Arr, 0, &tmp);
    42e8:	aa06      	add	r2, sp, #24
    42ea:	2100      	movs	r1, #0
    42ec:	f017 fec1 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    42f0:	4602      	mov	r2, r0
    42f2:	2800      	cmp	r0, #0
    42f4:	f47f aee5 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    42f8:	9806      	ldr	r0, [sp, #24]
    42fa:	f018 f834 	bl	1c366 <var_toInteger>
            ret = va_getByIndex(value->Arr, 1, &tmp);
    42fe:	aa06      	add	r2, sp, #24
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    4300:	4605      	mov	r5, r0
            ret = va_getByIndex(value->Arr, 1, &tmp);
    4302:	2101      	movs	r1, #1
    4304:	68b0      	ldr	r0, [r6, #8]
    4306:	f017 feb4 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    430a:	4602      	mov	r2, r0
    430c:	2800      	cmp	r0, #0
    430e:	f47f aed8 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
            object->sortObject = NULL;
    4312:	4627      	mov	r7, r4
    4314:	2300      	movs	r3, #0
    4316:	f847 3f30 	str.w	r3, [r7, #48]!
            ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->sortObject);
    431a:	9b06      	ldr	r3, [sp, #24]
    431c:	689a      	ldr	r2, [r3, #8]
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
    431e:	b2ad      	uxth	r5, r5
            ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->sortObject);
    4320:	6812      	ldr	r2, [r2, #0]
    4322:	463b      	mov	r3, r7
    4324:	4629      	mov	r1, r5
    4326:	f108 0098 	add.w	r0, r8, #152	; 0x98
    432a:	f017 fc5f 	bl	1bbec <oa_findByLN>
            if (ret != DLMS_ERROR_CODE_OK)
    432e:	4602      	mov	r2, r0
    4330:	2800      	cmp	r0, #0
    4332:	f47f aec6 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
            if (object->sortObject == NULL)
    4336:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4338:	b9b3      	cbnz	r3, 4368 <cosem_setProfileGeneric+0x2c0>
                ret = cosem_createObject(type, &object->sortObject);
    433a:	4639      	mov	r1, r7
    433c:	4628      	mov	r0, r5
    433e:	f7fd fee7 	bl	2110 <cosem_createObject>
                if (ret != DLMS_ERROR_CODE_OK)
    4342:	4602      	mov	r2, r0
    4344:	2800      	cmp	r0, #0
    4346:	f47f aebc 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
                ret = cosem_setLogicalName(object->sortObject, tmp->byteArr->data);
    434a:	9b06      	ldr	r3, [sp, #24]
    434c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    434e:	689b      	ldr	r3, [r3, #8]
    4350:	6819      	ldr	r1, [r3, #0]
    4352:	f00a fdb7 	bl	eec4 <cosem_setLogicalName>
                if (ret != DLMS_ERROR_CODE_OK)
    4356:	4602      	mov	r2, r0
    4358:	2800      	cmp	r0, #0
    435a:	f47f aeb2 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
                ret = oa_push(&settings->releasedObjects, object->sortObject);
    435e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4360:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
    4364:	f017 fbb3 	bl	1bace <oa_push>
            ret = va_getByIndex(value->Arr, 2, &tmp);
    4368:	aa06      	add	r2, sp, #24
    436a:	68b0      	ldr	r0, [r6, #8]
    436c:	2102      	movs	r1, #2
    436e:	f017 fe80 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    4372:	4602      	mov	r2, r0
    4374:	2800      	cmp	r0, #0
    4376:	f47f aea4 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
            object->sortObjectAttributeIndex = (char)var_toInteger(tmp);
    437a:	9806      	ldr	r0, [sp, #24]
    437c:	f017 fff3 	bl	1c366 <var_toInteger>
    4380:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
            ret = va_getByIndex(value->Arr, 3, &tmp);
    4384:	aa06      	add	r2, sp, #24
    4386:	68b0      	ldr	r0, [r6, #8]
    4388:	2103      	movs	r1, #3
    438a:	f017 fe72 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
    438e:	4602      	mov	r2, r0
    4390:	2800      	cmp	r0, #0
    4392:	f47f ae96 	bne.w	40c2 <cosem_setProfileGeneric+0x1a>
    4396:	9001      	str	r0, [sp, #4]
            object->sortObjectDataIndex = (uint16_t)var_toInteger(tmp);
    4398:	9806      	ldr	r0, [sp, #24]
    439a:	f017 ffe4 	bl	1c366 <var_toInteger>
    439e:	9a01      	ldr	r2, [sp, #4]
    43a0:	87e0      	strh	r0, [r4, #62]	; 0x3e
    43a2:	e68e      	b.n	40c2 <cosem_setProfileGeneric+0x1a>
    else if (index == 7)
    43a4:	2a07      	cmp	r2, #7
    43a6:	d104      	bne.n	43b2 <cosem_setProfileGeneric+0x30a>
        object->entriesInUse = var_toInteger(value);
    43a8:	4618      	mov	r0, r3
    43aa:	f017 ffdc 	bl	1c366 <var_toInteger>
    43ae:	63a0      	str	r0, [r4, #56]	; 0x38
    43b0:	e782      	b.n	42b8 <cosem_setProfileGeneric+0x210>
    else if (index == 8)
    43b2:	2a08      	cmp	r2, #8
    43b4:	f47f ae83 	bne.w	40be <cosem_setProfileGeneric+0x16>
        object->profileEntries = var_toInteger(value);
    43b8:	4618      	mov	r0, r3
    43ba:	f017 ffd4 	bl	1c366 <var_toInteger>
    43be:	6360      	str	r0, [r4, #52]	; 0x34
    43c0:	e77a      	b.n	42b8 <cosem_setProfileGeneric+0x210>
    43c2:	bf00      	nop
    43c4:	2000026c 	.word	0x2000026c

000043c8 <hlp_bytesToHex>:
    return ret;
}

#ifndef DLMS_IGNORE_MALLOC
char* hlp_bytesToHex(const unsigned char* bytes, int count)
{
    43c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    43ca:	4b1c      	ldr	r3, [pc, #112]	; (443c <hlp_bytesToHex+0x74>)
{
    43cc:	b085      	sub	sp, #20
    43ce:	4605      	mov	r5, r0
    43d0:	460c      	mov	r4, r1
    const char hexArray[] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F' };
    43d2:	466e      	mov	r6, sp
    43d4:	f103 0710 	add.w	r7, r3, #16
    43d8:	6818      	ldr	r0, [r3, #0]
    43da:	6859      	ldr	r1, [r3, #4]
    43dc:	4632      	mov	r2, r6
    43de:	c203      	stmia	r2!, {r0, r1}
    43e0:	3308      	adds	r3, #8
    43e2:	42bb      	cmp	r3, r7
    43e4:	4616      	mov	r6, r2
    43e6:	d1f7      	bne.n	43d8 <hlp_bytesToHex+0x10>
    unsigned char tmp;
    int pos;
    char* hexChars;
    if (count != 0)
    43e8:	b31c      	cbz	r4, 4432 <hlp_bytesToHex+0x6a>
    {
        hexChars = (char*)gxmalloc(3 * count);
    43ea:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    43ee:	4630      	mov	r0, r6
    43f0:	f008 ff80 	bl	d2f4 <malloc>
        if (hexChars != NULL)
    43f4:	b1d8      	cbz	r0, 442e <hlp_bytesToHex+0x66>
    43f6:	462b      	mov	r3, r5
    43f8:	441c      	add	r4, r3
    43fa:	4605      	mov	r5, r0
            for (pos = 0; pos != count; ++pos)
            {
                tmp = bytes[pos] & 0xFF;
                hexChars[pos * 3] = hexArray[tmp >> 4];
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
                hexChars[pos * 3 + 2] = ' ';
    43fc:	2120      	movs	r1, #32
                tmp = bytes[pos] & 0xFF;
    43fe:	f813 2b01 	ldrb.w	r2, [r3], #1
                hexChars[pos * 3 + 2] = ' ';
    4402:	70a9      	strb	r1, [r5, #2]
                hexChars[pos * 3] = hexArray[tmp >> 4];
    4404:	af04      	add	r7, sp, #16
    4406:	eb07 1712 	add.w	r7, r7, r2, lsr #4
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    440a:	f002 020f 	and.w	r2, r2, #15
                hexChars[pos * 3] = hexArray[tmp >> 4];
    440e:	f817 7c10 	ldrb.w	r7, [r7, #-16]
    4412:	702f      	strb	r7, [r5, #0]
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    4414:	af04      	add	r7, sp, #16
    4416:	443a      	add	r2, r7
            for (pos = 0; pos != count; ++pos)
    4418:	429c      	cmp	r4, r3
                hexChars[pos * 3 + 1] = hexArray[tmp & 0x0F];
    441a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
    441e:	706a      	strb	r2, [r5, #1]
            for (pos = 0; pos != count; ++pos)
    4420:	f105 0503 	add.w	r5, r5, #3
    4424:	d1eb      	bne.n	43fe <hlp_bytesToHex+0x36>
            }
            hexChars[(3 * count) - 1] = '\0';
    4426:	1983      	adds	r3, r0, r6
    4428:	2200      	movs	r2, #0
    442a:	f803 2c01 	strb.w	r2, [r3, #-1]
    {
        hexChars = (char*)gxmalloc(1);
        hexChars[0] = '\0';
    }
    return hexChars;
}
    442e:	b005      	add	sp, #20
    4430:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hexChars = (char*)gxmalloc(1);
    4432:	2001      	movs	r0, #1
    4434:	f008 ff5e 	bl	d2f4 <malloc>
        hexChars[0] = '\0';
    4438:	7004      	strb	r4, [r0, #0]
    return hexChars;
    443a:	e7f8      	b.n	442e <hlp_bytesToHex+0x66>
    443c:	0001fa42 	.word	0x0001fa42

00004440 <hlp_getDataTypeSize>:
}

int hlp_getDataTypeSize(DLMS_DATA_TYPE type)
{
    int size = -1;
    switch (type)
    4440:	281b      	cmp	r0, #27
    4442:	bf9a      	itte	ls
    4444:	4b02      	ldrls	r3, [pc, #8]	; (4450 <hlp_getDataTypeSize+0x10>)
    4446:	5618      	ldrsbls	r0, [r3, r0]
{
    4448:	f04f 30ff 	movhi.w	r0, #4294967295
        break;
    default:
        break;
    }
    return size;
}
    444c:	4770      	bx	lr
    444e:	bf00      	nop
    4450:	0001fa53 	.word	0x0001fa53

00004454 <var_getDateTime2>:
}

int var_getDateTime2(
    gxtime* dateTime,
    gxByteBuffer* ba)
{
    4454:	b570      	push	{r4, r5, r6, lr}
    4456:	b086      	sub	sp, #24
    uint16_t year = 0xFFFF;
    unsigned char month = 0xFF, day = 0xFF, hour = 0xFF, minute = 0xFF, second = 0xFF, dayOfWeek = 0xFF;
    4458:	23ff      	movs	r3, #255	; 0xff
    445a:	f88d 3011 	strb.w	r3, [sp, #17]
#ifdef DLMS_USE_EPOCH_TIME
    time_fromUnixTime2(dateTime->value, &year, &month,
    445e:	f10d 0315 	add.w	r3, sp, #21
    4462:	9303      	str	r3, [sp, #12]
    4464:	ab05      	add	r3, sp, #20
    4466:	9302      	str	r3, [sp, #8]
    4468:	f10d 0313 	add.w	r3, sp, #19
    446c:	9301      	str	r3, [sp, #4]
    446e:	f10d 0312 	add.w	r3, sp, #18
{
    4472:	4605      	mov	r5, r0
    time_fromUnixTime2(dateTime->value, &year, &month,
    4474:	9300      	str	r3, [sp, #0]
    uint16_t year = 0xFFFF;
    4476:	f64f 76ff 	movw	r6, #65535	; 0xffff
    time_fromUnixTime2(dateTime->value, &year, &month,
    447a:	aa04      	add	r2, sp, #16
{
    447c:	460c      	mov	r4, r1
    time_fromUnixTime2(dateTime->value, &year, &month,
    447e:	f10d 0311 	add.w	r3, sp, #17
    4482:	f10d 0116 	add.w	r1, sp, #22
    4486:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0xFFFF;
    4488:	f8ad 6016 	strh.w	r6, [sp, #22]
    unsigned char month = 0xFF, day = 0xFF, hour = 0xFF, minute = 0xFF, second = 0xFF, dayOfWeek = 0xFF;
    448c:	f88d 6010 	strb.w	r6, [sp, #16]
    4490:	f88d 6012 	strb.w	r6, [sp, #18]
    4494:	f88d 6013 	strb.w	r6, [sp, #19]
    4498:	f88d 6014 	strb.w	r6, [sp, #20]
    449c:	f88d 6015 	strb.w	r6, [sp, #21]
    time_fromUnixTime2(dateTime->value, &year, &month,
    44a0:	f7fd fffc 	bl	249c <time_fromUnixTime2>
        &day, &hour, &minute, &second, &dayOfWeek);
    //Add year.
    if ((dateTime->skip & DATETIME_SKIPS_YEAR) != 0)
    44a4:	88eb      	ldrh	r3, [r5, #6]
    44a6:	07d8      	lsls	r0, r3, #31
    {
        year = 0xFFFF;
    44a8:	bf48      	it	mi
    44aa:	f8ad 6016 	strhmi.w	r6, [sp, #22]
    }
    if ((dateTime->skip & (DATETIME_SKIPS_YEAR | DATETIME_SKIPS_MONTH | DATETIME_SKIPS_DAY)) != 0)
    44ae:	0759      	lsls	r1, r3, #29
    {
        dayOfWeek = 0xFF;
    44b0:	bf18      	it	ne
    44b2:	23ff      	movne	r3, #255	; 0xff
    {
        second = (unsigned char)dateTime->value.tm_sec;
    }
#endif // DLMS_USE_EPOCH_TIME
    //Add year.
    bb_setUInt16(ba, year);
    44b4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        dayOfWeek = 0xFF;
    44b8:	bf18      	it	ne
    44ba:	f88d 3015 	strbne.w	r3, [sp, #21]
    bb_setUInt16(ba, year);
    44be:	4620      	mov	r0, r4
    44c0:	f009 ffc7 	bl	e452 <bb_setUInt16>
    //Add month
    if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
    44c4:	7a2b      	ldrb	r3, [r5, #8]
    44c6:	07da      	lsls	r2, r3, #31
    44c8:	d553      	bpl.n	4572 <var_getDateTime2+0x11e>
    {
        bb_setUInt8(ba, 0xFE);
    44ca:	21fe      	movs	r1, #254	; 0xfe
    {
        bb_setUInt8(ba, month);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    44cc:	4620      	mov	r0, r4
    44ce:	f009 ff9e 	bl	e40e <bb_setUInt8>
    }
    //Add day
    if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
    44d2:	7a2b      	ldrb	r3, [r5, #8]
    44d4:	0758      	lsls	r0, r3, #29
    44d6:	d557      	bpl.n	4588 <var_getDateTime2+0x134>
    {
        bb_setUInt8(ba, 0xFE);
    44d8:	21fe      	movs	r1, #254	; 0xfe
    {
        bb_setUInt8(ba, day);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    44da:	4620      	mov	r0, r4
    44dc:	f009 ff97 	bl	e40e <bb_setUInt8>
    }
    //Add week day
    if ((dateTime->skip & DATETIME_SKIPS_DAYOFWEEK) == 0)
    44e0:	88eb      	ldrh	r3, [r5, #6]
    44e2:	071b      	lsls	r3, r3, #28
    44e4:	d45b      	bmi.n	459e <var_getDateTime2+0x14a>
    {
        //If Sunday.
        if (dayOfWeek == 0)
    44e6:	f89d 3015 	ldrb.w	r3, [sp, #21]
    44ea:	b913      	cbnz	r3, 44f2 <var_getDateTime2+0x9e>
        {
            dayOfWeek = 7;
    44ec:	2307      	movs	r3, #7
    44ee:	f88d 3015 	strb.w	r3, [sp, #21]
        }
        bb_setUInt8(ba, dayOfWeek);
    44f2:	f89d 1015 	ldrb.w	r1, [sp, #21]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    44f6:	4620      	mov	r0, r4
    44f8:	f009 ff89 	bl	e40e <bb_setUInt8>
    }

    //Add Hours
    if ((dateTime->skip & DATETIME_SKIPS_HOUR) == 0)
    44fc:	88eb      	ldrh	r3, [r5, #6]
    44fe:	06de      	lsls	r6, r3, #27
    {
        bb_setUInt8(ba, hour);
    4500:	bf54      	ite	pl
    4502:	f89d 1012 	ldrbpl.w	r1, [sp, #18]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4506:	21ff      	movmi	r1, #255	; 0xff
    4508:	4620      	mov	r0, r4
    450a:	f009 ff80 	bl	e40e <bb_setUInt8>
    }
    //Add Minutes
    if ((dateTime->skip & DATETIME_SKIPS_MINUTE) == 0)
    450e:	88eb      	ldrh	r3, [r5, #6]
    4510:	0698      	lsls	r0, r3, #26
    {
        bb_setUInt8(ba, minute);
    4512:	bf54      	ite	pl
    4514:	f89d 1013 	ldrbpl.w	r1, [sp, #19]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4518:	21ff      	movmi	r1, #255	; 0xff
    451a:	4620      	mov	r0, r4
    451c:	f009 ff77 	bl	e40e <bb_setUInt8>
    }
    //Add seconds.
    if ((dateTime->skip & DATETIME_SKIPS_SECOND) == 0)
    4520:	88eb      	ldrh	r3, [r5, #6]
    4522:	0659      	lsls	r1, r3, #25
    {
        bb_setUInt8(ba, second);
    4524:	bf54      	ite	pl
    4526:	f89d 1014 	ldrbpl.w	r1, [sp, #20]
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    452a:	21ff      	movmi	r1, #255	; 0xff
    452c:	4620      	mov	r0, r4
    452e:	f009 ff6e 	bl	e40e <bb_setUInt8>
    //Add ms.
#ifdef DLMS_ITALIAN_STANDARD
    //Italian standard uses 0 for ms.
    bb_setUInt8(ba, 0x00);
#else
    if ((dateTime->skip & DATETIME_SKIPS_MS) == 0)
    4532:	88e9      	ldrh	r1, [r5, #6]
    4534:	f011 0180 	ands.w	r1, r1, #128	; 0x80
    {
        bb_setUInt8(ba, 0x00);
    }
    else
    {
        bb_setUInt8(ba, 0xFF);
    4538:	bf18      	it	ne
    453a:	21ff      	movne	r1, #255	; 0xff
    453c:	4620      	mov	r0, r4
    453e:	f009 ff66 	bl	e40e <bb_setUInt8>
    }
#endif //DLMS_ITALIAN_STANDARD
    //Add Deviation
    if (year == 0xFFFF || (dateTime->skip & DATETIME_SKIPS_DEVITATION) != 0)
    4542:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    4546:	f64f 73ff 	movw	r3, #65535	; 0xffff
    454a:	429a      	cmp	r2, r3
    454c:	d002      	beq.n	4554 <var_getDateTime2+0x100>
    454e:	88eb      	ldrh	r3, [r5, #6]
    4550:	05da      	lsls	r2, r3, #23
    4552:	d526      	bpl.n	45a2 <var_getDateTime2+0x14e>
    {
        bb_setInt16(ba, 0x8000);//(not specified)
    4554:	4914      	ldr	r1, [pc, #80]	; (45a8 <var_getDateTime2+0x154>)
    }
    else
    {
        bb_setInt16(ba, dateTime->deviation);
    4556:	4620      	mov	r0, r4
    4558:	f00a f838 	bl	e5cc <bb_setInt16>
    }
    //Add clock status
    if ((dateTime->skip & DATETIME_SKIPS_STATUS) != 0)
    455c:	88eb      	ldrh	r3, [r5, #6]
    455e:	059b      	lsls	r3, r3, #22
    {
        bb_setUInt8(ba, 0xFF);
    }
    else
    {
        bb_setUInt8(ba, dateTime->status);
    4560:	bf54      	ite	pl
    4562:	7a69      	ldrbpl	r1, [r5, #9]
        bb_setUInt8(ba, 0xFF);
    4564:	21ff      	movmi	r1, #255	; 0xff
        bb_setUInt8(ba, dateTime->status);
    4566:	4620      	mov	r0, r4
    4568:	f009 ff51 	bl	e40e <bb_setUInt8>
    }
    return 0;
}
    456c:	2000      	movs	r0, #0
    456e:	b006      	add	sp, #24
    4570:	bd70      	pop	{r4, r5, r6, pc}
    else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
    4572:	079b      	lsls	r3, r3, #30
    4574:	d501      	bpl.n	457a <var_getDateTime2+0x126>
        bb_setUInt8(ba, 0xFD);
    4576:	21fd      	movs	r1, #253	; 0xfd
    4578:	e7a8      	b.n	44cc <var_getDateTime2+0x78>
    else if ((dateTime->skip & DATETIME_SKIPS_MONTH) == 0)
    457a:	88eb      	ldrh	r3, [r5, #6]
    457c:	079e      	lsls	r6, r3, #30
        bb_setUInt8(ba, month);
    457e:	bf54      	ite	pl
    4580:	f89d 1010 	ldrbpl.w	r1, [sp, #16]
        bb_setUInt8(ba, 0xFF);
    4584:	21ff      	movmi	r1, #255	; 0xff
    4586:	e7a1      	b.n	44cc <var_getDateTime2+0x78>
    else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
    4588:	0719      	lsls	r1, r3, #28
    458a:	d501      	bpl.n	4590 <var_getDateTime2+0x13c>
        bb_setUInt8(ba, 0xFD);
    458c:	21fd      	movs	r1, #253	; 0xfd
    458e:	e7a4      	b.n	44da <var_getDateTime2+0x86>
    else if ((dateTime->skip & DATETIME_SKIPS_DAY) == 0)
    4590:	88eb      	ldrh	r3, [r5, #6]
    4592:	075a      	lsls	r2, r3, #29
        bb_setUInt8(ba, day);
    4594:	bf54      	ite	pl
    4596:	f89d 1011 	ldrbpl.w	r1, [sp, #17]
        bb_setUInt8(ba, 0xFF);
    459a:	21ff      	movmi	r1, #255	; 0xff
    459c:	e79d      	b.n	44da <var_getDateTime2+0x86>
        bb_setUInt8(ba, 0xFF);
    459e:	21ff      	movs	r1, #255	; 0xff
    45a0:	e7a9      	b.n	44f6 <var_getDateTime2+0xa2>
        bb_setInt16(ba, dateTime->deviation);
    45a2:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
    45a6:	e7d6      	b.n	4556 <var_getDateTime2+0x102>
    45a8:	ffff8000 	.word	0xffff8000

000045ac <var_copy>:
}
#endif //DLMS_IGNORE_MALLOC

//copy variant.
int var_copy(dlmsVARIANT* target, dlmsVARIANT* source)
{
    45ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    45b0:	4688      	mov	r8, r1
    45b2:	4605      	mov	r5, r0
#ifndef DLMS_IGNORE_MALLOC
    dlmsVARIANT* it;
    dlmsVARIANT* item;
#endif //DLMS_IGNORE_MALLOC
    int ret = DLMS_ERROR_CODE_OK;
    if ((source->vt & DLMS_DATA_TYPE_BYREF) != 0)
    45b4:	f998 3000 	ldrsb.w	r3, [r8]
    45b8:	7809      	ldrb	r1, [r1, #0]
    45ba:	2b00      	cmp	r3, #0
    45bc:	da26      	bge.n	460c <var_copy+0x60>
    {
        if (source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_ARRAY) ||
    45be:	f101 037f 	add.w	r3, r1, #127	; 0x7f
    45c2:	b2db      	uxtb	r3, r3
    45c4:	2b01      	cmp	r3, #1
    45c6:	d807      	bhi.n	45d8 <var_copy+0x2c>
            source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_STRUCTURE))
        {
            target->vt = source->vt & ~DLMS_DATA_TYPE_BYREF;
    45c8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    45cc:	7001      	strb	r1, [r0, #0]
            target->pVal = source->pVal;
    45ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
    45d2:	6083      	str	r3, [r0, #8]
        ret = var_getSize(source->vt);
        if (ret > 0)
        {
            memcpy(&target->pVal, &source->pVal, ret);
        }
        ret = 0;
    45d4:	2400      	movs	r4, #0
    45d6:	e034      	b.n	4642 <var_copy+0x96>
            source->vt == (DLMS_DATA_TYPE_BYREF | DLMS_DATA_TYPE_STRING) ||
    45d8:	f101 037c 	add.w	r3, r1, #124	; 0x7c
    45dc:	b2db      	uxtb	r3, r3
    45de:	2b17      	cmp	r3, #23
    45e0:	d804      	bhi.n	45ec <var_copy+0x40>
    45e2:	4a7d      	ldr	r2, [pc, #500]	; (47d8 <var_copy+0x22c>)
    45e4:	fa22 f303 	lsr.w	r3, r2, r3
    45e8:	07db      	lsls	r3, r3, #31
    45ea:	d409      	bmi.n	4600 <var_copy+0x54>
        target->vt = source->vt & ~DLMS_DATA_TYPE_BYREF;
    45ec:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    45f0:	7029      	strb	r1, [r5, #0]
        target->ullVal = *source->pullVal;
    45f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
    45f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    45fa:	e9c5 2302 	strd	r2, r3, [r5, #8]
        return 0;
    45fe:	e7e9      	b.n	45d4 <var_copy+0x28>
            return var_getBytes2(source, source->vt, target->byteArr);
    4600:	6882      	ldr	r2, [r0, #8]
    4602:	4640      	mov	r0, r8
    4604:	f017 fe72 	bl	1c2ec <var_getBytes2>
        ret = ba_copy(target->bitArr, source->bitArr->data, (uint16_t)source->bitArr->size);
    4608:	4604      	mov	r4, r0
    460a:	e01a      	b.n	4642 <var_copy+0x96>
    if ((target->vt & DLMS_DATA_TYPE_BYREF) != 0)
    460c:	f990 2000 	ldrsb.w	r2, [r0]
    4610:	7803      	ldrb	r3, [r0, #0]
    4612:	2a00      	cmp	r2, #0
    4614:	da32      	bge.n	467c <var_copy+0xd0>
        if (source->vt == DLMS_DATA_TYPE_OCTET_STRING || source->vt == DLMS_DATA_TYPE_STRING)
    4616:	f1a1 0309 	sub.w	r3, r1, #9
    461a:	2b01      	cmp	r3, #1
    461c:	d815      	bhi.n	464a <var_copy+0x9e>
            if ((ret = hlp_getObjectCount2(source->byteArr, &count)) != 0)
    461e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    4622:	a901      	add	r1, sp, #4
    4624:	f016 ffbe 	bl	1b5a4 <hlp_getObjectCount2>
    4628:	4604      	mov	r4, r0
    462a:	b950      	cbnz	r0, 4642 <var_copy+0x96>
            memcpy(target->pVal, source->byteArr + source->byteArr->position, count);
    462c:	f8d8 3008 	ldr.w	r3, [r8, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4630:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4634:	8919      	ldrh	r1, [r3, #8]
    4636:	200c      	movs	r0, #12
    4638:	fb00 3101 	mla	r1, r0, r1, r3
    463c:	68a8      	ldr	r0, [r5, #8]
    463e:	f019 fde0 	bl	1e202 <memcpy>
    }
    return ret;
}
    4642:	4620      	mov	r0, r4
    4644:	b002      	add	sp, #8
    4646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            count = (uint16_t)hlp_getDataTypeSize(source->vt);
    464a:	4608      	mov	r0, r1
    464c:	f7ff fef8 	bl	4440 <hlp_getDataTypeSize>
    4650:	4604      	mov	r4, r0
    4652:	f8ad 0004 	strh.w	r0, [sp, #4]
            if (count != hlp_getDataTypeSize(target->vt ^ DLMS_DATA_TYPE_BYREF))
    4656:	7828      	ldrb	r0, [r5, #0]
    4658:	f080 0080 	eor.w	r0, r0, #128	; 0x80
    465c:	f7ff fef0 	bl	4440 <hlp_getDataTypeSize>
    4660:	b2a4      	uxth	r4, r4
    4662:	42a0      	cmp	r0, r4
    4664:	d107      	bne.n	4676 <var_copy+0xca>
    4666:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    466a:	68a8      	ldr	r0, [r5, #8]
    466c:	f108 0108 	add.w	r1, r8, #8
    4670:	f019 fdc7 	bl	1e202 <memcpy>
    4674:	e7ae      	b.n	45d4 <var_copy+0x28>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4676:	f44f 7481 	mov.w	r4, #258	; 0x102
    467a:	e7e2      	b.n	4642 <var_copy+0x96>
    if ((target->vt == DLMS_DATA_TYPE_ARRAY || target->vt == DLMS_DATA_TYPE_STRUCTURE) && va_isAttached(target->Arr))
    467c:	3b01      	subs	r3, #1
    467e:	2b01      	cmp	r3, #1
    4680:	d804      	bhi.n	468c <var_copy+0xe0>
    return (arr->capacity & 0x8000) == 0x8000;
    4682:	6883      	ldr	r3, [r0, #8]
    if ((target->vt == DLMS_DATA_TYPE_ARRAY || target->vt == DLMS_DATA_TYPE_STRUCTURE) && va_isAttached(target->Arr))
    4684:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    4688:	2b00      	cmp	r3, #0
    468a:	db1f      	blt.n	46cc <var_copy+0x120>
        ret = var_clear(target);
    468c:	4628      	mov	r0, r5
    468e:	f017 fc72 	bl	1bf76 <var_clear>
        if (ret != DLMS_ERROR_CODE_OK)
    4692:	4604      	mov	r4, r0
    4694:	2800      	cmp	r0, #0
    4696:	d1d4      	bne.n	4642 <var_copy+0x96>
        target->vt = source->vt;
    4698:	f898 3000 	ldrb.w	r3, [r8]
    469c:	702b      	strb	r3, [r5, #0]
    unsigned char attaced = 0;
    469e:	4607      	mov	r7, r0
    if (source->vt == DLMS_DATA_TYPE_STRING)
    46a0:	f898 3000 	ldrb.w	r3, [r8]
    46a4:	2b0a      	cmp	r3, #10
    46a6:	d113      	bne.n	46d0 <var_copy+0x124>
        if (source->byteArr != 0)
    46a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    46ac:	2b00      	cmp	r3, #0
    46ae:	d091      	beq.n	45d4 <var_copy+0x28>
            target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    46b0:	200c      	movs	r0, #12
    46b2:	f008 fe1f 	bl	d2f4 <malloc>
    46b6:	60a8      	str	r0, [r5, #8]
            BYTE_BUFFER_INIT(target->byteArr);
    46b8:	f009 fe40 	bl	e33c <bb_init>
            bb_set(target->byteArr, source->byteArr->data, source->byteArr->size);
    46bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    46c0:	68a8      	ldr	r0, [r5, #8]
    46c2:	88da      	ldrh	r2, [r3, #6]
    46c4:	6819      	ldr	r1, [r3, #0]
    46c6:	f009 ff88 	bl	e5da <bb_set>
    46ca:	e783      	b.n	45d4 <var_copy+0x28>
        attaced = 1;
    46cc:	2701      	movs	r7, #1
    46ce:	e7e7      	b.n	46a0 <var_copy+0xf4>
    else if (source->vt == DLMS_DATA_TYPE_OCTET_STRING)
    46d0:	2b09      	cmp	r3, #9
    46d2:	d0e9      	beq.n	46a8 <var_copy+0xfc>
    else if (source->vt == DLMS_DATA_TYPE_ARRAY ||
    46d4:	1e5a      	subs	r2, r3, #1
    46d6:	2a01      	cmp	r2, #1
    46d8:	d848      	bhi.n	476c <var_copy+0x1c0>
        if (source->Arr != NULL && source->Arr->size != 0)
    46da:	f8d8 3008 	ldr.w	r3, [r8, #8]
    46de:	2b00      	cmp	r3, #0
    46e0:	f43f af78 	beq.w	45d4 <var_copy+0x28>
    46e4:	88db      	ldrh	r3, [r3, #6]
    46e6:	2b00      	cmp	r3, #0
    46e8:	f43f af74 	beq.w	45d4 <var_copy+0x28>
            if (target->Arr == NULL)
    46ec:	68ac      	ldr	r4, [r5, #8]
    46ee:	b92c      	cbnz	r4, 46fc <var_copy+0x150>
                target->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    46f0:	2008      	movs	r0, #8
    46f2:	f008 fdff 	bl	d2f4 <malloc>
    arr->capacity = 0;
    46f6:	e9c0 4400 	strd	r4, r4, [r0]
                target->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    46fa:	60a8      	str	r0, [r5, #8]
            va_capacity(target->Arr, source->Arr->size);
    46fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4700:	68a8      	ldr	r0, [r5, #8]
    4702:	88d9      	ldrh	r1, [r3, #6]
    4704:	f017 fbc1 	bl	1be8a <va_capacity>
            for (pos = 0; pos != source->Arr->size; ++pos)
    4708:	2600      	movs	r6, #0
    470a:	f8d8 0008 	ldr.w	r0, [r8, #8]
    470e:	88c3      	ldrh	r3, [r0, #6]
    4710:	42b3      	cmp	r3, r6
    4712:	f43f af5f 	beq.w	45d4 <var_copy+0x28>
                if ((ret = va_getByIndex(source->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
    4716:	466a      	mov	r2, sp
    4718:	4631      	mov	r1, r6
    471a:	f017 fcaa 	bl	1c072 <va_getByIndex>
    471e:	4604      	mov	r4, r0
    4720:	2800      	cmp	r0, #0
    4722:	d18e      	bne.n	4642 <var_copy+0x96>
                if (attaced)
    4724:	b187      	cbz	r7, 4748 <var_copy+0x19c>
                    if ((ret = va_getByIndex(target->Arr, pos, &item)) != DLMS_ERROR_CODE_OK ||
    4726:	68a8      	ldr	r0, [r5, #8]
    4728:	aa01      	add	r2, sp, #4
    472a:	f017 fca2 	bl	1c072 <va_getByIndex>
    472e:	4604      	mov	r4, r0
    4730:	2800      	cmp	r0, #0
    4732:	d186      	bne.n	4642 <var_copy+0x96>
                        (ret = var_copy(item, it)) != DLMS_ERROR_CODE_OK)
    4734:	e9dd 1000 	ldrd	r1, r0, [sp]
    4738:	f7ff ff38 	bl	45ac <var_copy>
                    if ((ret = va_getByIndex(target->Arr, pos, &item)) != DLMS_ERROR_CODE_OK ||
    473c:	4604      	mov	r4, r0
    473e:	2800      	cmp	r0, #0
    4740:	f47f af7f 	bne.w	4642 <var_copy+0x96>
            for (pos = 0; pos != source->Arr->size; ++pos)
    4744:	3601      	adds	r6, #1
    4746:	e7e0      	b.n	470a <var_copy+0x15e>
                    item = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    4748:	2010      	movs	r0, #16
    474a:	f008 fdd3 	bl	d2f4 <malloc>
                    ret = var_copy(item, it);
    474e:	9900      	ldr	r1, [sp, #0]
    data->vt = DLMS_DATA_TYPE_NONE;
    4750:	7007      	strb	r7, [r0, #0]
    data->byteArr = NULL;
    4752:	6087      	str	r7, [r0, #8]
                    item = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    4754:	9001      	str	r0, [sp, #4]
                    ret = var_copy(item, it);
    4756:	f7ff ff29 	bl	45ac <var_copy>
                    if (ret != DLMS_ERROR_CODE_OK)
    475a:	4604      	mov	r4, r0
    475c:	2800      	cmp	r0, #0
    475e:	f47f af70 	bne.w	4642 <var_copy+0x96>
                    va_push(target->Arr, item);
    4762:	9901      	ldr	r1, [sp, #4]
    4764:	68a8      	ldr	r0, [r5, #8]
    4766:	f017 fbb8 	bl	1beda <va_push>
    476a:	e7eb      	b.n	4744 <var_copy+0x198>
    else if (source->vt == DLMS_DATA_TYPE_DATETIME)
    476c:	2b19      	cmp	r3, #25
    476e:	d105      	bne.n	477c <var_copy+0x1d0>
        ret = var_setDateTime(target, source->dateTime);
    4770:	f8d8 1008 	ldr.w	r1, [r8, #8]
    4774:	4628      	mov	r0, r5
    4776:	f017 fdc0 	bl	1c2fa <var_setDateTime>
    477a:	e745      	b.n	4608 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_DATE)
    477c:	2b1a      	cmp	r3, #26
    477e:	d105      	bne.n	478c <var_copy+0x1e0>
        ret = var_setDate(target, source->dateTime);
    4780:	f8d8 1008 	ldr.w	r1, [r8, #8]
    4784:	4628      	mov	r0, r5
    4786:	f017 fdca 	bl	1c31e <var_setDate>
    478a:	e73d      	b.n	4608 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_TIME)
    478c:	2b1b      	cmp	r3, #27
    478e:	d105      	bne.n	479c <var_copy+0x1f0>
        ret = var_setTime(target, source->dateTime);
    4790:	f8d8 1008 	ldr.w	r1, [r8, #8]
    4794:	4628      	mov	r0, r5
    4796:	f017 fdd4 	bl	1c342 <var_setTime>
    479a:	e735      	b.n	4608 <var_copy+0x5c>
    else if (source->vt == DLMS_DATA_TYPE_BIT_STRING)
    479c:	2b04      	cmp	r3, #4
    479e:	d10d      	bne.n	47bc <var_copy+0x210>
        target->bitArr = (bitArray*)gxmalloc(sizeof(bitArray));
    47a0:	2008      	movs	r0, #8
    47a2:	f008 fda7 	bl	d2f4 <malloc>
    47a6:	60a8      	str	r0, [r5, #8]
        ba_init(target->bitArr);
    47a8:	f009 fcc1 	bl	e12e <ba_init>
        ret = ba_copy(target->bitArr, source->bitArr->data, (uint16_t)source->bitArr->size);
    47ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
    47b0:	68a8      	ldr	r0, [r5, #8]
    47b2:	88da      	ldrh	r2, [r3, #6]
    47b4:	6819      	ldr	r1, [r3, #0]
    47b6:	f009 fd35 	bl	e224 <ba_copy>
    47ba:	e725      	b.n	4608 <var_copy+0x5c>
    switch (vt)
    47bc:	2b19      	cmp	r3, #25
    47be:	f63f af09 	bhi.w	45d4 <var_copy+0x28>
    47c2:	4a06      	ldr	r2, [pc, #24]	; (47dc <var_copy+0x230>)
    47c4:	56d2      	ldrsb	r2, [r2, r3]
        if (ret > 0)
    47c6:	2a00      	cmp	r2, #0
    47c8:	f77f af04 	ble.w	45d4 <var_copy+0x28>
    47cc:	f108 0108 	add.w	r1, r8, #8
    47d0:	f105 0008 	add.w	r0, r5, #8
    47d4:	e74c      	b.n	4670 <var_copy+0xc4>
    47d6:	bf00      	nop
    47d8:	00e00061 	.word	0x00e00061
    47dc:	0001fa81 	.word	0x0001fa81

000047e0 <convert.part.0>:
static int convert(dlmsVARIANT* item, DLMS_DATA_TYPE type)
    47e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47e4:	b0ca      	sub	sp, #296	; 0x128
    data->vt = DLMS_DATA_TYPE_NONE;
    47e6:	2300      	movs	r3, #0
static int convert(dlmsVARIANT* item, DLMS_DATA_TYPE type)
    47e8:	4604      	mov	r4, r0
    47ea:	460d      	mov	r5, r1
    ret = var_copy(&tmp, item);
    47ec:	4601      	mov	r1, r0
    47ee:	a802      	add	r0, sp, #8
    data->vt = DLMS_DATA_TYPE_NONE;
    47f0:	f88d 3008 	strb.w	r3, [sp, #8]
    data->byteArr = NULL;
    47f4:	9304      	str	r3, [sp, #16]
    data->vt = DLMS_DATA_TYPE_NONE;
    47f6:	f88d 3018 	strb.w	r3, [sp, #24]
    data->byteArr = NULL;
    47fa:	9308      	str	r3, [sp, #32]
    ret = var_copy(&tmp, item);
    47fc:	f7ff fed6 	bl	45ac <var_copy>
    if (ret != DLMS_ERROR_CODE_OK)
    4800:	4606      	mov	r6, r0
    4802:	2800      	cmp	r0, #0
    4804:	d170      	bne.n	48e8 <convert.part.0+0x108>
    var_clear(item);
    4806:	4620      	mov	r0, r4
    4808:	f017 fbb5 	bl	1bf76 <var_clear>
    if (type == DLMS_DATA_TYPE_STRING)
    480c:	2d0a      	cmp	r5, #10
    480e:	f040 80d6 	bne.w	49be <convert.part.0+0x1de>
        item->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    4812:	200c      	movs	r0, #12
    4814:	f008 fd6e 	bl	d2f4 <malloc>
    4818:	60a0      	str	r0, [r4, #8]
        BYTE_BUFFER_INIT(item->strVal);
    481a:	f009 fd8f 	bl	e33c <bb_init>
        switch (tmp.vt)
    481e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    4822:	2b1b      	cmp	r3, #27
    4824:	f200 815f 	bhi.w	4ae6 <convert.part.0+0x306>
    4828:	e8df f013 	tbh	[pc, r3, lsl #1]
    482c:	001c0032 	.word	0x001c0032
    4830:	0062001c 	.word	0x0062001c
    4834:	006c00ad 	.word	0x006c00ad
    4838:	015d0077 	.word	0x015d0077
    483c:	00ba015d 	.word	0x00ba015d
    4840:	015d015d 	.word	0x015d015d
    4844:	015d015d 	.word	0x015d015d
    4848:	007a015d 	.word	0x007a015d
    484c:	00860080 	.word	0x00860080
    4850:	015d008b 	.word	0x015d008b
    4854:	00990090 	.word	0x00990090
    4858:	009b0086 	.word	0x009b0086
    485c:	00b500a7 	.word	0x00b500a7
    4860:	00b500b5 	.word	0x00b500b5
            bb_setUInt8(item->strVal, '{');
    4864:	68a0      	ldr	r0, [r4, #8]
    4866:	217b      	movs	r1, #123	; 0x7b
    4868:	f009 fdd1 	bl	e40e <bb_setUInt8>
            for (pos = 0; pos != tmp.Arr->size; ++pos)
    486c:	2500      	movs	r5, #0
    486e:	9804      	ldr	r0, [sp, #16]
    4870:	88c3      	ldrh	r3, [r0, #6]
    4872:	b2af      	uxth	r7, r5
    4874:	42bb      	cmp	r3, r7
    4876:	d111      	bne.n	489c <convert.part.0+0xbc>
            bb_setUInt8(item->strVal, '}');
    4878:	217d      	movs	r1, #125	; 0x7d
    487a:	68a0      	ldr	r0, [r4, #8]
    487c:	f009 fdc7 	bl	e40e <bb_setUInt8>
            bb_setUInt8(item->strVal, '\0');
    4880:	68a0      	ldr	r0, [r4, #8]
    4882:	2100      	movs	r1, #0
    4884:	f009 fdc3 	bl	e40e <bb_setUInt8>
            --item->strVal->size;
    4888:	68a2      	ldr	r2, [r4, #8]
    488a:	88d3      	ldrh	r3, [r2, #6]
    488c:	3b01      	subs	r3, #1
    488e:	80d3      	strh	r3, [r2, #6]
            item->vt = type;
    4890:	230a      	movs	r3, #10
            item->vt = type;
    4892:	7023      	strb	r3, [r4, #0]
    var_clear(&tmp);
    4894:	a802      	add	r0, sp, #8
    4896:	f017 fb6e 	bl	1bf76 <var_clear>
    return DLMS_ERROR_CODE_OK;
    489a:	e025      	b.n	48e8 <convert.part.0+0x108>
                ret = va_getByIndex(tmp.Arr, pos, &it);
    489c:	aa0b      	add	r2, sp, #44	; 0x2c
    489e:	b2a9      	uxth	r1, r5
    48a0:	f017 fbe7 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
    48a4:	2800      	cmp	r0, #0
    48a6:	f040 811c 	bne.w	4ae2 <convert.part.0+0x302>
                if (pos != 0)
    48aa:	b13f      	cbz	r7, 48bc <convert.part.0+0xdc>
                    bb_setUInt8(item->strVal, ',');
    48ac:	212c      	movs	r1, #44	; 0x2c
    48ae:	68a0      	ldr	r0, [r4, #8]
    48b0:	f009 fdad 	bl	e40e <bb_setUInt8>
                    bb_setUInt8(item->strVal, ' ');
    48b4:	68a0      	ldr	r0, [r4, #8]
    48b6:	2120      	movs	r1, #32
    48b8:	f009 fda9 	bl	e40e <bb_setUInt8>
                ret = var_copy(&tmp3, it);
    48bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    48be:	a806      	add	r0, sp, #24
    48c0:	f7ff fe74 	bl	45ac <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
    48c4:	2800      	cmp	r0, #0
    48c6:	f040 810c 	bne.w	4ae2 <convert.part.0+0x302>
                ret = var_toString(&tmp3, item->strVal);
    48ca:	68a1      	ldr	r1, [r4, #8]
    48cc:	a806      	add	r0, sp, #24
    48ce:	f017 fd94 	bl	1c3fa <var_toString>
    48d2:	4607      	mov	r7, r0
                var_clear(&tmp3);
    48d4:	a806      	add	r0, sp, #24
    48d6:	f017 fb4e 	bl	1bf76 <var_clear>
                if (ret != DLMS_ERROR_CODE_OK)
    48da:	3501      	adds	r5, #1
    48dc:	2f00      	cmp	r7, #0
    48de:	d0c6      	beq.n	486e <convert.part.0+0x8e>
                    var_clear(&tmp);
    48e0:	a802      	add	r0, sp, #8
    48e2:	f017 fb48 	bl	1bf76 <var_clear>
                ret = var_toString(&tmp3, item->strVal);
    48e6:	463e      	mov	r6, r7
}
    48e8:	4630      	mov	r0, r6
    48ea:	b04a      	add	sp, #296	; 0x128
    48ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (tmp.boolVal == 0)
    48f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    48f4:	68a0      	ldr	r0, [r4, #8]
    48f6:	b91b      	cbnz	r3, 4900 <convert.part.0+0x120>
                bb_addString(item->strVal, "False");
    48f8:	4980      	ldr	r1, [pc, #512]	; (4afc <convert.part.0+0x31c>)
            bb_addString(item->strVal, buff);
    48fa:	f009 feb9 	bl	e670 <bb_addString>
            item->vt = type;
    48fe:	e7c7      	b.n	4890 <convert.part.0+0xb0>
                bb_addString(item->strVal, "True");
    4900:	497f      	ldr	r1, [pc, #508]	; (4b00 <convert.part.0+0x320>)
    4902:	e7fa      	b.n	48fa <convert.part.0+0x11a>
            hlp_intToString(buff, 250, tmp.lVal, 1, 0);
    4904:	2300      	movs	r3, #0
    4906:	9300      	str	r3, [sp, #0]
    4908:	2301      	movs	r3, #1
            hlp_intToString(buff, 250, tmp.ulVal, 0, 0);
    490a:	9a04      	ldr	r2, [sp, #16]
            hlp_intToString(buff, 250, tmp.uiVal, 0, 0);
    490c:	21fa      	movs	r1, #250	; 0xfa
    490e:	a80b      	add	r0, sp, #44	; 0x2c
    4910:	f016 ff04 	bl	1b71c <hlp_intToString>
            bb_addString(item->strVal, buff);
    4914:	68a0      	ldr	r0, [r4, #8]
    4916:	a90b      	add	r1, sp, #44	; 0x2c
    4918:	e7ef      	b.n	48fa <convert.part.0+0x11a>
            hlp_intToString(buff, 250, tmp.ulVal, 0, 0);
    491a:	2300      	movs	r3, #0
    491c:	9300      	str	r3, [sp, #0]
    491e:	e7f4      	b.n	490a <convert.part.0+0x12a>
            hlp_intToString(buff, 250, tmp.cVal, 1, 0);
    4920:	2300      	movs	r3, #0
    4922:	9300      	str	r3, [sp, #0]
    4924:	f99d 2010 	ldrsb.w	r2, [sp, #16]
    4928:	2301      	movs	r3, #1
    492a:	e7ef      	b.n	490c <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.iVal, 1, 0);
    492c:	2300      	movs	r3, #0
    492e:	9300      	str	r3, [sp, #0]
    4930:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    4934:	2301      	movs	r3, #1
    4936:	e7e9      	b.n	490c <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.bVal, 0, 0);
    4938:	2300      	movs	r3, #0
    493a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    493e:	9300      	str	r3, [sp, #0]
    4940:	e7e4      	b.n	490c <convert.part.0+0x12c>
            hlp_intToString(buff, 250, tmp.uiVal, 0, 0);
    4942:	2300      	movs	r3, #0
    4944:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    4948:	9300      	str	r3, [sp, #0]
    494a:	e7df      	b.n	490c <convert.part.0+0x12c>
            hlp_int64ToString(buff, 250, tmp.llVal, 1);
    494c:	2301      	movs	r3, #1
            hlp_int64ToString(buff, 250, tmp.ullVal, 0);
    494e:	9300      	str	r3, [sp, #0]
    4950:	21fa      	movs	r1, #250	; 0xfa
    4952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4956:	a80b      	add	r0, sp, #44	; 0x2c
    4958:	f016 ff41 	bl	1b7de <hlp_int64ToString>
            bb_addString(item->strVal, buff);
    495c:	e7da      	b.n	4914 <convert.part.0+0x134>
            hlp_int64ToString(buff, 250, tmp.ullVal, 0);
    495e:	2300      	movs	r3, #0
    4960:	e7f5      	b.n	494e <convert.part.0+0x16e>
            sprintf(buff, "%f", tmp.fltVal);
    4962:	9804      	ldr	r0, [sp, #16]
    4964:	f7fb fd80 	bl	468 <__aeabi_f2d>
    4968:	e9cd 0100 	strd	r0, r1, [sp]
    496c:	4b65      	ldr	r3, [pc, #404]	; (4b04 <convert.part.0+0x324>)
            sprintf(buff, "%lf", tmp.dblVal);
    496e:	22fa      	movs	r2, #250	; 0xfa
    4970:	2100      	movs	r1, #0
    4972:	a80b      	add	r0, sp, #44	; 0x2c
    4974:	f019 fc96 	bl	1e2a4 <__sprintf_chk>
    4978:	e7cc      	b.n	4914 <convert.part.0+0x134>
    497a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    497e:	e9cd 2300 	strd	r2, r3, [sp]
    4982:	4b61      	ldr	r3, [pc, #388]	; (4b08 <convert.part.0+0x328>)
    4984:	e7f3      	b.n	496e <convert.part.0+0x18e>
            char* str = ba_toString(tmp.bitArr);
    4986:	9804      	ldr	r0, [sp, #16]
    4988:	f009 fca8 	bl	e2dc <ba_toString>
    498c:	4601      	mov	r1, r0
            bb_attachString(item->strVal, str);
    498e:	68a0      	ldr	r0, [r4, #8]
    4990:	f009 fe86 	bl	e6a0 <bb_attachString>
            item->vt = type;
    4994:	e77c      	b.n	4890 <convert.part.0+0xb0>
            time_toString(tmp.dateTime, item->strVal);
    4996:	68a1      	ldr	r1, [r4, #8]
    4998:	9804      	ldr	r0, [sp, #16]
    499a:	f7fd fdfd 	bl	2598 <time_toString>
            item->vt = type;
    499e:	e777      	b.n	4890 <convert.part.0+0xb0>
            if (tmp.byteArr != NULL)
    49a0:	9804      	ldr	r0, [sp, #16]
    49a2:	2800      	cmp	r0, #0
    49a4:	f43f af74 	beq.w	4890 <convert.part.0+0xb0>
                char* str = bb_toHexString(tmp.byteArr);
    49a8:	f009 fffa 	bl	e9a0 <bb_toHexString>
    49ac:	4605      	mov	r5, r0
                bb_addString(item->strVal, str);
    49ae:	4601      	mov	r1, r0
    49b0:	68a0      	ldr	r0, [r4, #8]
    49b2:	f009 fe5d 	bl	e670 <bb_addString>
                gxfree(str);
    49b6:	4628      	mov	r0, r5
    49b8:	f008 fca4 	bl	d304 <free>
    49bc:	e768      	b.n	4890 <convert.part.0+0xb0>
    else if (item->vt == DLMS_DATA_TYPE_STRING)
    49be:	7823      	ldrb	r3, [r4, #0]
    49c0:	2b0a      	cmp	r3, #10
    49c2:	d164      	bne.n	4a8e <convert.part.0+0x2ae>
        if (type == DLMS_DATA_TYPE_BOOLEAN)
    49c4:	2d03      	cmp	r5, #3
    49c6:	d109      	bne.n	49dc <convert.part.0+0x1fc>
            item->boolVal = strcmp((char*)tmp.strVal->data, "False") == 0 ? 0 : 1;
    49c8:	9b04      	ldr	r3, [sp, #16]
    49ca:	494c      	ldr	r1, [pc, #304]	; (4afc <convert.part.0+0x31c>)
    49cc:	6818      	ldr	r0, [r3, #0]
    49ce:	f7fc f9ed 	bl	dac <strcmp>
    49d2:	3800      	subs	r0, #0
    49d4:	bf18      	it	ne
    49d6:	2001      	movne	r0, #1
            item->bVal = (unsigned char)hlp_stringToInt((char*)tmp.strVal->data);
    49d8:	7220      	strb	r0, [r4, #8]
            item->vt = type;
    49da:	e006      	b.n	49ea <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_INT32)
    49dc:	2d05      	cmp	r5, #5
    49de:	d106      	bne.n	49ee <convert.part.0+0x20e>
            item->ulVal = hlp_stringToInt((char*)tmp.strVal->data) & 0xFFFFFFFF;
    49e0:	9b04      	ldr	r3, [sp, #16]
    49e2:	6818      	ldr	r0, [r3, #0]
    49e4:	f016 fede 	bl	1b7a4 <hlp_stringToInt>
    49e8:	60a0      	str	r0, [r4, #8]
    item->vt = type;
    49ea:	7025      	strb	r5, [r4, #0]
    49ec:	e752      	b.n	4894 <convert.part.0+0xb4>
        else if (type == DLMS_DATA_TYPE_UINT32)
    49ee:	2d06      	cmp	r5, #6
    49f0:	d0f6      	beq.n	49e0 <convert.part.0+0x200>
        else if (type == DLMS_DATA_TYPE_INT8)
    49f2:	2d0f      	cmp	r5, #15
    49f4:	d104      	bne.n	4a00 <convert.part.0+0x220>
            item->bVal = (unsigned char)hlp_stringToInt((char*)tmp.strVal->data);
    49f6:	9b04      	ldr	r3, [sp, #16]
    49f8:	6818      	ldr	r0, [r3, #0]
    49fa:	f016 fed3 	bl	1b7a4 <hlp_stringToInt>
    49fe:	e7eb      	b.n	49d8 <convert.part.0+0x1f8>
        else if (type == DLMS_DATA_TYPE_INT16)
    4a00:	2d10      	cmp	r5, #16
    4a02:	d105      	bne.n	4a10 <convert.part.0+0x230>
            item->iVal = (short)hlp_stringToInt((char*)tmp.strVal->data);
    4a04:	9b04      	ldr	r3, [sp, #16]
    4a06:	6818      	ldr	r0, [r3, #0]
    4a08:	f016 fecc 	bl	1b7a4 <hlp_stringToInt>
    4a0c:	8120      	strh	r0, [r4, #8]
            item->vt = type;
    4a0e:	e7ec      	b.n	49ea <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_UINT8)
    4a10:	2d11      	cmp	r5, #17
    4a12:	d0f0      	beq.n	49f6 <convert.part.0+0x216>
        else if (type == DLMS_DATA_TYPE_UINT16)
    4a14:	2d12      	cmp	r5, #18
    4a16:	d106      	bne.n	4a26 <convert.part.0+0x246>
            item->uiVal = (uint16_t)hlp_stringToInt((char*)tmp.strVal->data);
    4a18:	9b04      	ldr	r3, [sp, #16]
    4a1a:	6818      	ldr	r0, [r3, #0]
    4a1c:	f016 fec2 	bl	1b7a4 <hlp_stringToInt>
            item->vt = type;
    4a20:	2312      	movs	r3, #18
            item->uiVal = (uint16_t)hlp_stringToInt((char*)tmp.strVal->data);
    4a22:	8120      	strh	r0, [r4, #8]
            item->vt = type;
    4a24:	e735      	b.n	4892 <convert.part.0+0xb2>
        else if (type == DLMS_DATA_TYPE_INT64)
    4a26:	2d14      	cmp	r5, #20
    4a28:	d106      	bne.n	4a38 <convert.part.0+0x258>
            item->ullVal = (uint64_t)hlp_stringToInt64((char*)tmp.strVal->data);
    4a2a:	9b04      	ldr	r3, [sp, #16]
    4a2c:	6818      	ldr	r0, [r3, #0]
    4a2e:	f016 ff28 	bl	1b882 <hlp_stringToInt64>
    4a32:	e9c4 0102 	strd	r0, r1, [r4, #8]
            item->vt = type;
    4a36:	e7d8      	b.n	49ea <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_UINT64)
    4a38:	2d15      	cmp	r5, #21
    4a3a:	d0f6      	beq.n	4a2a <convert.part.0+0x24a>
        else if (type == DLMS_DATA_TYPE_ENUM)
    4a3c:	2d16      	cmp	r5, #22
    4a3e:	d0da      	beq.n	49f6 <convert.part.0+0x216>
        else if (type == DLMS_DATA_TYPE_FLOAT32)
    4a40:	2d17      	cmp	r5, #23
    4a42:	d107      	bne.n	4a54 <convert.part.0+0x274>
            sscanf((char*)tmp.strVal->data, "%f", &item->fltVal);
    4a44:	9b04      	ldr	r3, [sp, #16]
    4a46:	492f      	ldr	r1, [pc, #188]	; (4b04 <convert.part.0+0x324>)
    4a48:	f104 0208 	add.w	r2, r4, #8
            sscanf((char*)tmp.strVal->data, "%lf", &item->dblVal);
    4a4c:	6818      	ldr	r0, [r3, #0]
    4a4e:	f008 fd21 	bl	d494 <siscanf>
            item->vt = type;
    4a52:	e7ca      	b.n	49ea <convert.part.0+0x20a>
        else if (type == DLMS_DATA_TYPE_FLOAT64)
    4a54:	2d18      	cmp	r5, #24
    4a56:	d104      	bne.n	4a62 <convert.part.0+0x282>
            sscanf((char*)tmp.strVal->data, "%lf", &item->dblVal);
    4a58:	9b04      	ldr	r3, [sp, #16]
    4a5a:	492b      	ldr	r1, [pc, #172]	; (4b08 <convert.part.0+0x328>)
    4a5c:	f104 0208 	add.w	r2, r4, #8
    4a60:	e7f4      	b.n	4a4c <convert.part.0+0x26c>
        else if (type == DLMS_DATA_TYPE_OCTET_STRING)
    4a62:	2d09      	cmp	r5, #9
    4a64:	d13f      	bne.n	4ae6 <convert.part.0+0x306>
            char* pBuff = (char*)tmp.strVal->data;
    4a66:	9b04      	ldr	r3, [sp, #16]
            item->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    4a68:	200c      	movs	r0, #12
            char* pBuff = (char*)tmp.strVal->data;
    4a6a:	681f      	ldr	r7, [r3, #0]
            item->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    4a6c:	f008 fc42 	bl	d2f4 <malloc>
    4a70:	60a0      	str	r0, [r4, #8]
            BYTE_BUFFER_INIT(item->byteArr);
    4a72:	f009 fc63 	bl	e33c <bb_init>
            bb_addHexString(item->byteArr, pBuff);
    4a76:	4639      	mov	r1, r7
    4a78:	68a0      	ldr	r0, [r4, #8]
    4a7a:	f009 ff78 	bl	e96e <bb_addHexString>
            item->vt = type;
    4a7e:	7025      	strb	r5, [r4, #0]
            var_clear(&tmp);
    4a80:	a802      	add	r0, sp, #8
    4a82:	f017 fa78 	bl	1bf76 <var_clear>
            bb_trim(item->byteArr);
    4a86:	68a0      	ldr	r0, [r4, #8]
    4a88:	f009 fffd 	bl	ea86 <bb_trim>
            return DLMS_ERROR_CODE_OK;
    4a8c:	e72c      	b.n	48e8 <convert.part.0+0x108>
    fromSize = var_getSize(tmp.vt);
    4a8e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    switch (vt)
    4a92:	2a19      	cmp	r2, #25
    4a94:	f10d 0810 	add.w	r8, sp, #16
    4a98:	d82a      	bhi.n	4af0 <convert.part.0+0x310>
    4a9a:	491c      	ldr	r1, [pc, #112]	; (4b0c <convert.part.0+0x32c>)
    4a9c:	2b19      	cmp	r3, #25
    4a9e:	568f      	ldrsb	r7, [r1, r2]
    4aa0:	d80e      	bhi.n	4ac0 <convert.part.0+0x2e0>
    4aa2:	4a1a      	ldr	r2, [pc, #104]	; (4b0c <convert.part.0+0x32c>)
    4aa4:	56d2      	ldrsb	r2, [r2, r3]
    if (fromSize > toSize)
    4aa6:	42ba      	cmp	r2, r7
    4aa8:	db0d      	blt.n	4ac6 <convert.part.0+0x2e6>
        memset(&item->bVal, 0, toSize);
    4aaa:	f104 0308 	add.w	r3, r4, #8
__ssp_bos_icheck3(memset, void *, int)
    4aae:	2100      	movs	r1, #0
    4ab0:	4618      	mov	r0, r3
    4ab2:	f019 fbe1 	bl	1e278 <memset>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4ab6:	463a      	mov	r2, r7
    4ab8:	4641      	mov	r1, r8
    4aba:	f019 fba2 	bl	1e202 <memcpy>
    4abe:	e794      	b.n	49ea <convert.part.0+0x20a>
    fromSize = var_getSize(tmp.vt);
    4ac0:	f04f 32ff 	mov.w	r2, #4294967295
    4ac4:	e7ef      	b.n	4aa6 <convert.part.0+0x2c6>
        for (pos = (unsigned char)toSize; pos != (unsigned char)fromSize; ++pos)
    4ac6:	b2d3      	uxtb	r3, r2
    4ac8:	b2bf      	uxth	r7, r7
    4aca:	429f      	cmp	r7, r3
    4acc:	d103      	bne.n	4ad6 <convert.part.0+0x2f6>
    4ace:	4641      	mov	r1, r8
    4ad0:	f104 0008 	add.w	r0, r4, #8
    4ad4:	e7f1      	b.n	4aba <convert.part.0+0x2da>
            if (pValue[pos] != 0)
    4ad6:	f818 1003 	ldrb.w	r1, [r8, r3]
    4ada:	b931      	cbnz	r1, 4aea <convert.part.0+0x30a>
        for (pos = (unsigned char)toSize; pos != (unsigned char)fromSize; ++pos)
    4adc:	3301      	adds	r3, #1
    4ade:	b29b      	uxth	r3, r3
    4ae0:	e7f3      	b.n	4aca <convert.part.0+0x2ea>
                ret = var_copy(&tmp3, it);
    4ae2:	4606      	mov	r6, r0
    4ae4:	e700      	b.n	48e8 <convert.part.0+0x108>
        return DLMS_ERROR_CODE_NOT_IMPLEMENTED;
    4ae6:	26fe      	movs	r6, #254	; 0xfe
    4ae8:	e6fe      	b.n	48e8 <convert.part.0+0x108>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4aea:	f44f 7681 	mov.w	r6, #258	; 0x102
    4aee:	e6fb      	b.n	48e8 <convert.part.0+0x108>
    switch (vt)
    4af0:	2b19      	cmp	r3, #25
    fromSize = var_getSize(tmp.vt);
    4af2:	f04f 37ff 	mov.w	r7, #4294967295
    4af6:	d9d4      	bls.n	4aa2 <convert.part.0+0x2c2>
    4af8:	463a      	mov	r2, r7
    4afa:	e7d6      	b.n	4aaa <convert.part.0+0x2ca>
    4afc:	0001fa6f 	.word	0x0001fa6f
    4b00:	0001fa75 	.word	0x0001fa75
    4b04:	0001fa7a 	.word	0x0001fa7a
    4b08:	0001fa7d 	.word	0x0001fa7d
    4b0c:	0001fa81 	.word	0x0001fa81

00004b10 <var_changeType>:
{
    4b10:	b410      	push	{r4}
    if (newType == value->vt)
    4b12:	7802      	ldrb	r2, [r0, #0]
    4b14:	428a      	cmp	r2, r1
{
    4b16:	4604      	mov	r4, r0
    4b18:	460b      	mov	r3, r1
    if (newType == value->vt)
    4b1a:	d007      	beq.n	4b2c <var_changeType+0x1c>
    if (newType == DLMS_DATA_TYPE_NONE)
    4b1c:	b911      	cbnz	r1, 4b24 <var_changeType+0x14>
}
    4b1e:	bc10      	pop	{r4}
        return var_clear(value);
    4b20:	f017 ba29 	b.w	1bf76 <var_clear>
    if (value->vt == DLMS_DATA_TYPE_ARRAY && newType == DLMS_DATA_TYPE_OCTET_STRING)
    4b24:	2a01      	cmp	r2, #1
    4b26:	d103      	bne.n	4b30 <var_changeType+0x20>
    4b28:	2909      	cmp	r1, #9
    4b2a:	d17c      	bne.n	4c26 <var_changeType+0x116>
    return DLMS_ERROR_CODE_OK;
    4b2c:	2000      	movs	r0, #0
    4b2e:	e02d      	b.n	4b8c <var_changeType+0x7c>
    if (value->vt == DLMS_DATA_TYPE_STRING)
    4b30:	2a0a      	cmp	r2, #10
    4b32:	d102      	bne.n	4b3a <var_changeType+0x2a>
}
    4b34:	bc10      	pop	{r4}
    4b36:	f7ff be53 	b.w	47e0 <convert.part.0>
    switch (newType)
    4b3a:	3903      	subs	r1, #3
    4b3c:	2915      	cmp	r1, #21
    4b3e:	d80f      	bhi.n	4b60 <var_changeType+0x50>
    4b40:	e8df f001 	tbb	[pc, r1]
    4b44:	0b0b0e0b 	.word	0x0b0b0e0b
    4b48:	0b0e0e0e 	.word	0x0b0e0e0e
    4b4c:	0e0e0e0e 	.word	0x0e0e0e0e
    4b50:	0b0b0b0b 	.word	0x0b0b0b0b
    4b54:	0b0b0b0e 	.word	0x0b0b0b0e
    4b58:	0b0b      	.short	0x0b0b
    if (item->vt == type)
    4b5a:	4619      	mov	r1, r3
    4b5c:	4620      	mov	r0, r4
    4b5e:	e7e9      	b.n	4b34 <var_changeType+0x24>
    switch (value->vt)
    4b60:	3a05      	subs	r2, #5
    4b62:	2a16      	cmp	r2, #22
    4b64:	d85c      	bhi.n	4c20 <var_changeType+0x110>
    4b66:	e8df f002 	tbb	[pc, r2]
    4b6a:	0c0c      	.short	0x0c0c
    4b6c:	5b135b5b 	.word	0x5b135b5b
    4b70:	5b1b5b5b 	.word	0x5b1b5b5b
    4b74:	0c0c0c0c 	.word	0x0c0c0c0c
    4b78:	0c0c0c5b 	.word	0x0c0c0c5b
    4b7c:	56490c0c 	.word	0x56490c0c
    4b80:	56          	.byte	0x56
    4b81:	00          	.byte	0x00
        switch (newType)
    4b82:	2b0d      	cmp	r3, #13
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4b84:	bf0c      	ite	eq
    4b86:	20fe      	moveq	r0, #254	; 0xfe
    4b88:	f44f 7081 	movne.w	r0, #258	; 0x102
}
    4b8c:	bc10      	pop	{r4}
    4b8e:	4770      	bx	lr
        switch (newType)
    4b90:	3b19      	subs	r3, #25
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    4b92:	2b02      	cmp	r3, #2
    4b94:	bf98      	it	ls
    4b96:	20fe      	movls	r0, #254	; 0xfe
    4b98:	bf88      	it	hi
    4b9a:	f44f 7081 	movhi.w	r0, #258	; 0x102
    4b9e:	e7f5      	b.n	4b8c <var_changeType+0x7c>
        switch (newType)
    4ba0:	3b05      	subs	r3, #5
    4ba2:	2b13      	cmp	r3, #19
    4ba4:	d83c      	bhi.n	4c20 <var_changeType+0x110>
    4ba6:	a201      	add	r2, pc, #4	; (adr r2, 4bac <var_changeType+0x9c>)
    4ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4bac:	00004b2d 	.word	0x00004b2d
    4bb0:	00004b2d 	.word	0x00004b2d
    4bb4:	00004c21 	.word	0x00004c21
    4bb8:	00004c21 	.word	0x00004c21
    4bbc:	00004c21 	.word	0x00004c21
    4bc0:	00004b2d 	.word	0x00004b2d
    4bc4:	00004c21 	.word	0x00004c21
    4bc8:	00004c21 	.word	0x00004c21
    4bcc:	00004c21 	.word	0x00004c21
    4bd0:	00004c21 	.word	0x00004c21
    4bd4:	00004b2d 	.word	0x00004b2d
    4bd8:	00004b2d 	.word	0x00004b2d
    4bdc:	00004b2d 	.word	0x00004b2d
    4be0:	00004b2d 	.word	0x00004b2d
    4be4:	00004c21 	.word	0x00004c21
    4be8:	00004b2d 	.word	0x00004b2d
    4bec:	00004b2d 	.word	0x00004b2d
    4bf0:	00004b2d 	.word	0x00004b2d
    4bf4:	00004b2d 	.word	0x00004b2d
    4bf8:	00004b2d 	.word	0x00004b2d
        switch (newType)
    4bfc:	2b0a      	cmp	r3, #10
    4bfe:	d805      	bhi.n	4c0c <var_changeType+0xfc>
    return DLMS_ERROR_CODE_OK;
    4c00:	2b09      	cmp	r3, #9
    4c02:	bf34      	ite	cc
    4c04:	f44f 7081 	movcc.w	r0, #258	; 0x102
    4c08:	2000      	movcs	r0, #0
    4c0a:	e7bf      	b.n	4b8c <var_changeType+0x7c>
    4c0c:	3b1a      	subs	r3, #26
    4c0e:	2b01      	cmp	r3, #1
    4c10:	bf98      	it	ls
    4c12:	2000      	movls	r0, #0
    4c14:	e7c0      	b.n	4b98 <var_changeType+0x88>
        switch (newType)
    4c16:	2b0a      	cmp	r3, #10
    4c18:	d9f2      	bls.n	4c00 <var_changeType+0xf0>
    4c1a:	3b19      	subs	r3, #25
    4c1c:	2b02      	cmp	r3, #2
    4c1e:	e7f7      	b.n	4c10 <var_changeType+0x100>
    if (value->vt == DLMS_DATA_TYPE_ARRAY && newType == DLMS_DATA_TYPE_OCTET_STRING)
    4c20:	f44f 7081 	mov.w	r0, #258	; 0x102
    4c24:	e7b2      	b.n	4b8c <var_changeType+0x7c>
    switch (newType)
    4c26:	1eca      	subs	r2, r1, #3
    4c28:	2a15      	cmp	r2, #21
    4c2a:	d8f9      	bhi.n	4c20 <var_changeType+0x110>
    4c2c:	a101      	add	r1, pc, #4	; (adr r1, 4c34 <var_changeType+0x124>)
    4c2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4c32:	bf00      	nop
    4c34:	00004b5b 	.word	0x00004b5b
    4c38:	00004c21 	.word	0x00004c21
    4c3c:	00004b5b 	.word	0x00004b5b
    4c40:	00004b5b 	.word	0x00004b5b
    4c44:	00004c21 	.word	0x00004c21
    4c48:	00004c21 	.word	0x00004c21
    4c4c:	00004c21 	.word	0x00004c21
    4c50:	00004b5b 	.word	0x00004b5b
    4c54:	00004c21 	.word	0x00004c21
    4c58:	00004c21 	.word	0x00004c21
    4c5c:	00004c21 	.word	0x00004c21
    4c60:	00004c21 	.word	0x00004c21
    4c64:	00004b5b 	.word	0x00004b5b
    4c68:	00004b5b 	.word	0x00004b5b
    4c6c:	00004b5b 	.word	0x00004b5b
    4c70:	00004b5b 	.word	0x00004b5b
    4c74:	00004c21 	.word	0x00004c21
    4c78:	00004b5b 	.word	0x00004b5b
    4c7c:	00004b5b 	.word	0x00004b5b
    4c80:	00004b5b 	.word	0x00004b5b
    4c84:	00004b5b 	.word	0x00004b5b
    4c88:	00004b5b 	.word	0x00004b5b

00004c8c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4c8c:	680b      	ldr	r3, [r1, #0]
    4c8e:	3301      	adds	r3, #1
    4c90:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    4c92:	4b01      	ldr	r3, [pc, #4]	; (4c98 <char_out+0xc>)
    4c94:	681b      	ldr	r3, [r3, #0]
    4c96:	4718      	bx	r3
    4c98:	20000008 	.word	0x20000008

00004c9c <__printk_hook_install>:
	_char_out = fn;
    4c9c:	4b01      	ldr	r3, [pc, #4]	; (4ca4 <__printk_hook_install+0x8>)
    4c9e:	6018      	str	r0, [r3, #0]
}
    4ca0:	4770      	bx	lr
    4ca2:	bf00      	nop
    4ca4:	20000008 	.word	0x20000008

00004ca8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4ca8:	b507      	push	{r0, r1, r2, lr}
    4caa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    4cac:	2100      	movs	r1, #0
{
    4cae:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    4cb0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    4cb2:	4803      	ldr	r0, [pc, #12]	; (4cc0 <vprintk+0x18>)
    4cb4:	a901      	add	r1, sp, #4
    4cb6:	f000 f965 	bl	4f84 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    4cba:	b003      	add	sp, #12
    4cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    4cc0:	00004c8d 	.word	0x00004c8d

00004cc4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4cc4:	b530      	push	{r4, r5, lr}
    4cc6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4cc8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4ccc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4cce:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4cd0:	a901      	add	r1, sp, #4
    4cd2:	4805      	ldr	r0, [pc, #20]	; (4ce8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4cd4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4cd6:	f000 f955 	bl	4f84 <cbvprintf>

	if (ctx.count < ctx.max) {
    4cda:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4cde:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4ce0:	bfb8      	it	lt
    4ce2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4ce4:	b005      	add	sp, #20
    4ce6:	bd30      	pop	{r4, r5, pc}
    4ce8:	0001c551 	.word	0x0001c551

00004cec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4cf0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4cf4:	f019 0808 	ands.w	r8, r9, #8
{
    4cf8:	4604      	mov	r4, r0
    4cfa:	4693      	mov	fp, r2
	if (processing) {
    4cfc:	d00d      	beq.n	4d1a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4cfe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4d00:	bf0c      	ite	eq
    4d02:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4d06:	f049 0920 	orrne.w	r9, r9, #32
    4d0a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4d0e:	f38b 8811 	msr	BASEPRI, fp
    4d12:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d1a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4d1e:	2902      	cmp	r1, #2
    4d20:	d107      	bne.n	4d32 <process_event+0x46>
			evt = process_recheck(mgr);
    4d22:	4620      	mov	r0, r4
    4d24:	f017 fc41 	bl	1c5aa <process_recheck>
		if (evt == EVT_NOP) {
    4d28:	2800      	cmp	r0, #0
    4d2a:	d0f0      	beq.n	4d0e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4d2c:	2801      	cmp	r0, #1
    4d2e:	8b23      	ldrh	r3, [r4, #24]
    4d30:	d150      	bne.n	4dd4 <process_event+0xe8>
			res = mgr->last_res;
    4d32:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d34:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4d36:	2f00      	cmp	r7, #0
    4d38:	da15      	bge.n	4d66 <process_event+0x7a>
		*clients = mgr->clients;
    4d3a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4d3c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4d40:	e9c4 8800 	strd	r8, r8, [r4]
    4d44:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4d48:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4d4a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4d4c:	8b21      	ldrh	r1, [r4, #24]
    4d4e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4d52:	45ca      	cmp	sl, r9
    4d54:	d002      	beq.n	4d5c <process_event+0x70>
		if (do_monitors
    4d56:	68a3      	ldr	r3, [r4, #8]
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d15c      	bne.n	4e16 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    4d5c:	b90d      	cbnz	r5, 4d62 <process_event+0x76>
		    || (transit != NULL)) {
    4d5e:	2e00      	cmp	r6, #0
    4d60:	d074      	beq.n	4e4c <process_event+0x160>
    4d62:	2300      	movs	r3, #0
    4d64:	e058      	b.n	4e18 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4d66:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4d6a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4d6c:	2a01      	cmp	r2, #1
    4d6e:	d820      	bhi.n	4db2 <process_event+0xc6>
		*clients = mgr->clients;
    4d70:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4d74:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4d76:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    4d78:	b289      	uxth	r1, r1
	list->tail = NULL;
    4d7a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4d7e:	d10c      	bne.n	4d9a <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    4d80:	2d00      	cmp	r5, #0
    4d82:	462b      	mov	r3, r5
    4d84:	bf38      	it	cc
    4d86:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4d88:	b12b      	cbz	r3, 4d96 <process_event+0xaa>
				mgr->refs += 1U;
    4d8a:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4d8c:	681b      	ldr	r3, [r3, #0]
    4d8e:	3201      	adds	r2, #1
    4d90:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4d92:	2b00      	cmp	r3, #0
    4d94:	d1f8      	bne.n	4d88 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4d96:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4d9a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4d9c:	4620      	mov	r0, r4
    4d9e:	f017 fc04 	bl	1c5aa <process_recheck>
    4da2:	4606      	mov	r6, r0
    4da4:	2800      	cmp	r0, #0
    4da6:	d0d1      	beq.n	4d4c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4da8:	8b23      	ldrh	r3, [r4, #24]
    4daa:	f043 0320 	orr.w	r3, r3, #32
    4dae:	8323      	strh	r3, [r4, #24]
    4db0:	e7cb      	b.n	4d4a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4db2:	2b04      	cmp	r3, #4
    4db4:	d10c      	bne.n	4dd0 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4db6:	f021 0107 	bic.w	r1, r1, #7
    4dba:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4dbc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4dbe:	4620      	mov	r0, r4
    4dc0:	f017 fbf3 	bl	1c5aa <process_recheck>
    4dc4:	4605      	mov	r5, r0
    4dc6:	2800      	cmp	r0, #0
    4dc8:	d0bf      	beq.n	4d4a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4dca:	f041 0120 	orr.w	r1, r1, #32
    4dce:	8321      	strh	r1, [r4, #24]
    4dd0:	2500      	movs	r5, #0
    4dd2:	e7ba      	b.n	4d4a <process_event+0x5e>
		} else if (evt == EVT_START) {
    4dd4:	2803      	cmp	r0, #3
    4dd6:	d109      	bne.n	4dec <process_event+0x100>
			transit = mgr->transitions->start;
    4dd8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4dda:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4dde:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4de0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4de4:	8323      	strh	r3, [r4, #24]
}
    4de6:	2500      	movs	r5, #0
		res = 0;
    4de8:	462f      	mov	r7, r5
    4dea:	e7af      	b.n	4d4c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4dec:	2804      	cmp	r0, #4
    4dee:	d106      	bne.n	4dfe <process_event+0x112>
			transit = mgr->transitions->stop;
    4df0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4df2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4df6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4df8:	f043 0304 	orr.w	r3, r3, #4
    4dfc:	e7f2      	b.n	4de4 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    4dfe:	2805      	cmp	r0, #5
    4e00:	d106      	bne.n	4e10 <process_event+0x124>
			transit = mgr->transitions->reset;
    4e02:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e04:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4e08:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4e0a:	f043 0305 	orr.w	r3, r3, #5
    4e0e:	e7e9      	b.n	4de4 <process_event+0xf8>
    4e10:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4e12:	462e      	mov	r6, r5
    4e14:	e7e8      	b.n	4de8 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    4e16:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4e18:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4e1c:	8321      	strh	r1, [r4, #24]
    4e1e:	f38b 8811 	msr	BASEPRI, fp
    4e22:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4e26:	bb03      	cbnz	r3, 4e6a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    4e28:	2d00      	cmp	r5, #0
    4e2a:	d133      	bne.n	4e94 <process_event+0x1a8>
			if (transit != NULL) {
    4e2c:	b116      	cbz	r6, 4e34 <process_event+0x148>
				transit(mgr, transition_complete);
    4e2e:	4921      	ldr	r1, [pc, #132]	; (4eb4 <process_event+0x1c8>)
    4e30:	4620      	mov	r0, r4
    4e32:	47b0      	blx	r6
	__asm__ volatile(
    4e34:	f04f 0320 	mov.w	r3, #32
    4e38:	f3ef 8b11 	mrs	fp, BASEPRI
    4e3c:	f383 8812 	msr	BASEPRI_MAX, r3
    4e40:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4e44:	8b23      	ldrh	r3, [r4, #24]
    4e46:	f023 0308 	bic.w	r3, r3, #8
    4e4a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4e4c:	8b23      	ldrh	r3, [r4, #24]
    4e4e:	06da      	lsls	r2, r3, #27
    4e50:	d528      	bpl.n	4ea4 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4e52:	f023 0310 	bic.w	r3, r3, #16
    4e56:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    4e58:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4e5a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    4e5e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    4e62:	2900      	cmp	r1, #0
    4e64:	f47f af5b 	bne.w	4d1e <process_event+0x32>
out:
    4e68:	e751      	b.n	4d0e <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4e6a:	68a1      	ldr	r1, [r4, #8]
    4e6c:	2900      	cmp	r1, #0
    4e6e:	d0db      	beq.n	4e28 <process_event+0x13c>
	return node->next;
    4e70:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    4e72:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4e76:	2b00      	cmp	r3, #0
    4e78:	bf38      	it	cc
    4e7a:	2300      	movcc	r3, #0
    4e7c:	4699      	mov	r9, r3
    4e7e:	4652      	mov	r2, sl
    4e80:	463b      	mov	r3, r7
    4e82:	4620      	mov	r0, r4
    4e84:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4e86:	f1b9 0f00 	cmp.w	r9, #0
    4e8a:	d0cd      	beq.n	4e28 <process_event+0x13c>
    4e8c:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4e90:	4649      	mov	r1, r9
    4e92:	e7ee      	b.n	4e72 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4e94:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4e96:	463b      	mov	r3, r7
    4e98:	4652      	mov	r2, sl
    4e9a:	4620      	mov	r0, r4
    4e9c:	682d      	ldr	r5, [r5, #0]
    4e9e:	f017 fba0 	bl	1c5e2 <notify_one>
    4ea2:	e7c1      	b.n	4e28 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4ea4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4ea8:	bf1e      	ittt	ne
    4eaa:	f023 0320 	bicne.w	r3, r3, #32
    4eae:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4eb0:	2102      	movne	r1, #2
    4eb2:	e7d2      	b.n	4e5a <process_event+0x16e>
    4eb4:	0001c60f 	.word	0x0001c60f

00004eb8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    4eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    4eba:	4e09      	ldr	r6, [pc, #36]	; (4ee0 <extract_decimal+0x28>)
    4ebc:	6801      	ldr	r1, [r0, #0]
{
    4ebe:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    4ec0:	270a      	movs	r7, #10
	size_t val = 0;
    4ec2:	2000      	movs	r0, #0
    4ec4:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    4ec6:	3101      	adds	r1, #1
    4ec8:	7823      	ldrb	r3, [r4, #0]
    4eca:	5d9d      	ldrb	r5, [r3, r6]
    4ecc:	076d      	lsls	r5, r5, #29
    4ece:	d401      	bmi.n	4ed4 <extract_decimal+0x1c>
	}
	*str = sp;
    4ed0:	6014      	str	r4, [r2, #0]
	return val;
}
    4ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    4ed4:	fb07 3300 	mla	r3, r7, r0, r3
    4ed8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4edc:	e7f2      	b.n	4ec4 <extract_decimal+0xc>
    4ede:	bf00      	nop
    4ee0:	00020575 	.word	0x00020575

00004ee4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ee8:	4614      	mov	r4, r2
    4eea:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    4eec:	78d3      	ldrb	r3, [r2, #3]
    4eee:	4a24      	ldr	r2, [pc, #144]	; (4f80 <encode_uint+0x9c>)
    4ef0:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    4ef4:	2b6f      	cmp	r3, #111	; 0x6f
    4ef6:	f00a 0203 	and.w	r2, sl, #3
{
    4efa:	4606      	mov	r6, r0
    4efc:	460f      	mov	r7, r1
    4efe:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    4f00:	d02d      	beq.n	4f5e <encode_uint+0x7a>
    4f02:	d828      	bhi.n	4f56 <encode_uint+0x72>
		return 16;
    4f04:	2b58      	cmp	r3, #88	; 0x58
    4f06:	bf14      	ite	ne
    4f08:	250a      	movne	r5, #10
    4f0a:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    4f0c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    4f10:	46aa      	mov	sl, r5
    4f12:	f04f 0b00 	mov.w	fp, #0
    4f16:	4652      	mov	r2, sl
    4f18:	465b      	mov	r3, fp
    4f1a:	4630      	mov	r0, r6
    4f1c:	4639      	mov	r1, r7
    4f1e:	f7fb fdcb 	bl	ab8 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f22:	2a09      	cmp	r2, #9
    4f24:	b2d3      	uxtb	r3, r2
    4f26:	d81f      	bhi.n	4f68 <encode_uint+0x84>
    4f28:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    4f2a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f2c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    4f2e:	bf08      	it	eq
    4f30:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f32:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    4f36:	d301      	bcc.n	4f3c <encode_uint+0x58>
    4f38:	45c8      	cmp	r8, r9
    4f3a:	d812      	bhi.n	4f62 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4f3c:	7823      	ldrb	r3, [r4, #0]
    4f3e:	069b      	lsls	r3, r3, #26
    4f40:	d505      	bpl.n	4f4e <encode_uint+0x6a>
		if (radix == 8) {
    4f42:	2d08      	cmp	r5, #8
    4f44:	d116      	bne.n	4f74 <encode_uint+0x90>
			conv->altform_0 = true;
    4f46:	78a3      	ldrb	r3, [r4, #2]
    4f48:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    4f4c:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
    4f4e:	4640      	mov	r0, r8
    4f50:	b003      	add	sp, #12
    4f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4f56:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    4f5a:	2b70      	cmp	r3, #112	; 0x70
    4f5c:	e7d3      	b.n	4f06 <encode_uint+0x22>
	switch (specifier) {
    4f5e:	2508      	movs	r5, #8
    4f60:	e7d4      	b.n	4f0c <encode_uint+0x28>
		value /= radix;
    4f62:	4606      	mov	r6, r0
    4f64:	460f      	mov	r7, r1
    4f66:	e7d6      	b.n	4f16 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4f68:	9a01      	ldr	r2, [sp, #4]
    4f6a:	2a01      	cmp	r2, #1
    4f6c:	bf0c      	ite	eq
    4f6e:	3337      	addeq	r3, #55	; 0x37
    4f70:	3357      	addne	r3, #87	; 0x57
    4f72:	e7da      	b.n	4f2a <encode_uint+0x46>
		} else if (radix == 16) {
    4f74:	2d10      	cmp	r5, #16
    4f76:	d1ea      	bne.n	4f4e <encode_uint+0x6a>
			conv->altform_0c = true;
    4f78:	78a3      	ldrb	r3, [r4, #2]
    4f7a:	f043 0310 	orr.w	r3, r3, #16
    4f7e:	e7e5      	b.n	4f4c <encode_uint+0x68>
    4f80:	00020575 	.word	0x00020575

00004f84 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f88:	4682      	mov	sl, r0
    4f8a:	b093      	sub	sp, #76	; 0x4c
    4f8c:	468b      	mov	fp, r1
    4f8e:	4691      	mov	r9, r2
    4f90:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4f92:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4f94:	f899 0000 	ldrb.w	r0, [r9]
    4f98:	b908      	cbnz	r0, 4f9e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4f9a:	4628      	mov	r0, r5
    4f9c:	e33a      	b.n	5614 <cbvprintf+0x690>
		if (*fp != '%') {
    4f9e:	f109 0301 	add.w	r3, r9, #1
    4fa2:	2825      	cmp	r0, #37	; 0x25
    4fa4:	9302      	str	r3, [sp, #8]
    4fa6:	d006      	beq.n	4fb6 <cbvprintf+0x32>
			OUTC('%');
    4fa8:	4659      	mov	r1, fp
    4faa:	47d0      	blx	sl
    4fac:	2800      	cmp	r0, #0
    4fae:	f2c0 8331 	blt.w	5614 <cbvprintf+0x690>
    4fb2:	3501      	adds	r5, #1
			break;
    4fb4:	e1f1      	b.n	539a <cbvprintf+0x416>
		} state = {
    4fb6:	2218      	movs	r2, #24
    4fb8:	2100      	movs	r1, #0
    4fba:	a80c      	add	r0, sp, #48	; 0x30
    4fbc:	f019 f95c 	bl	1e278 <memset>
	if (*sp == '%') {
    4fc0:	f899 3001 	ldrb.w	r3, [r9, #1]
    4fc4:	2b25      	cmp	r3, #37	; 0x25
    4fc6:	d059      	beq.n	507c <cbvprintf+0xf8>
    4fc8:	9a02      	ldr	r2, [sp, #8]
    4fca:	4616      	mov	r6, r2
		switch (*sp) {
    4fcc:	f812 3b01 	ldrb.w	r3, [r2], #1
    4fd0:	2b2b      	cmp	r3, #43	; 0x2b
    4fd2:	f000 808b 	beq.w	50ec <cbvprintf+0x168>
    4fd6:	d879      	bhi.n	50cc <cbvprintf+0x148>
    4fd8:	2b20      	cmp	r3, #32
    4fda:	f000 808c 	beq.w	50f6 <cbvprintf+0x172>
    4fde:	2b23      	cmp	r3, #35	; 0x23
    4fe0:	f000 808e 	beq.w	5100 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    4fe4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fe8:	f003 0244 	and.w	r2, r3, #68	; 0x44
    4fec:	2a44      	cmp	r2, #68	; 0x44
    4fee:	d103      	bne.n	4ff8 <cbvprintf+0x74>
		conv->flag_zero = false;
    4ff0:	f36f 1386 	bfc	r3, #6, #1
    4ff4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    4ff8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4ffc:	9605      	str	r6, [sp, #20]
    4ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5002:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    5006:	7833      	ldrb	r3, [r6, #0]
    5008:	2b2a      	cmp	r3, #42	; 0x2a
    500a:	d17e      	bne.n	510a <cbvprintf+0x186>
		conv->width_star = true;
    500c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5010:	f043 0301 	orr.w	r3, r3, #1
    5014:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    5018:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    501a:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    501c:	781a      	ldrb	r2, [r3, #0]
    501e:	2a2e      	cmp	r2, #46	; 0x2e
    5020:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5024:	bf0c      	ite	eq
    5026:	2101      	moveq	r1, #1
    5028:	2100      	movne	r1, #0
    502a:	f361 0241 	bfi	r2, r1, #1, #1
    502e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    5032:	d10b      	bne.n	504c <cbvprintf+0xc8>
	++sp;
    5034:	1c5a      	adds	r2, r3, #1
    5036:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    5038:	785a      	ldrb	r2, [r3, #1]
    503a:	2a2a      	cmp	r2, #42	; 0x2a
    503c:	d17b      	bne.n	5136 <cbvprintf+0x1b2>
		conv->prec_star = true;
    503e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5042:	f042 0204 	orr.w	r2, r2, #4
    5046:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    504a:	3302      	adds	r3, #2
	switch (*sp) {
    504c:	4619      	mov	r1, r3
    504e:	f811 0b01 	ldrb.w	r0, [r1], #1
    5052:	286c      	cmp	r0, #108	; 0x6c
    5054:	f000 80b6 	beq.w	51c4 <cbvprintf+0x240>
    5058:	d87d      	bhi.n	5156 <cbvprintf+0x1d2>
    505a:	2868      	cmp	r0, #104	; 0x68
    505c:	f000 8084 	beq.w	5168 <cbvprintf+0x1e4>
    5060:	286a      	cmp	r0, #106	; 0x6a
    5062:	f000 80b9 	beq.w	51d8 <cbvprintf+0x254>
    5066:	284c      	cmp	r0, #76	; 0x4c
    5068:	f000 80bd 	beq.w	51e6 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    506c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5070:	f36f 02c6 	bfc	r2, #3, #4
    5074:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    5078:	4619      	mov	r1, r3
    507a:	e080      	b.n	517e <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    507c:	f109 0202 	add.w	r2, r9, #2
    5080:	9202      	str	r2, [sp, #8]
    5082:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    5086:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    508a:	07d9      	lsls	r1, r3, #31
    508c:	f140 8149 	bpl.w	5322 <cbvprintf+0x39e>
			width = va_arg(ap, int);
    5090:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    5094:	f1b8 0f00 	cmp.w	r8, #0
    5098:	da07      	bge.n	50aa <cbvprintf+0x126>
				conv->flag_dash = true;
    509a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    509e:	f042 0204 	orr.w	r2, r2, #4
    50a2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    50a6:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    50aa:	075a      	lsls	r2, r3, #29
    50ac:	f140 8142 	bpl.w	5334 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    50b0:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    50b4:	2f00      	cmp	r7, #0
    50b6:	f280 8141 	bge.w	533c <cbvprintf+0x3b8>
				conv->prec_present = false;
    50ba:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    50be:	f36f 0341 	bfc	r3, #1, #1
    50c2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    50c6:	f04f 37ff 	mov.w	r7, #4294967295
    50ca:	e137      	b.n	533c <cbvprintf+0x3b8>
		switch (*sp) {
    50cc:	2b2d      	cmp	r3, #45	; 0x2d
    50ce:	d006      	beq.n	50de <cbvprintf+0x15a>
    50d0:	2b30      	cmp	r3, #48	; 0x30
    50d2:	d187      	bne.n	4fe4 <cbvprintf+0x60>
			conv->flag_zero = true;
    50d4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    50dc:	e003      	b.n	50e6 <cbvprintf+0x162>
			conv->flag_dash = true;
    50de:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50e2:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    50e6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    50ea:	e76e      	b.n	4fca <cbvprintf+0x46>
			conv->flag_plus = true;
    50ec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50f0:	f043 0308 	orr.w	r3, r3, #8
    50f4:	e7f7      	b.n	50e6 <cbvprintf+0x162>
			conv->flag_space = true;
    50f6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50fa:	f043 0310 	orr.w	r3, r3, #16
    50fe:	e7f2      	b.n	50e6 <cbvprintf+0x162>
			conv->flag_hash = true;
    5100:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5104:	f043 0320 	orr.w	r3, r3, #32
    5108:	e7ed      	b.n	50e6 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    510a:	a805      	add	r0, sp, #20
    510c:	f7ff fed4 	bl	4eb8 <extract_decimal>
	if (sp != wp) {
    5110:	9b05      	ldr	r3, [sp, #20]
    5112:	42b3      	cmp	r3, r6
    5114:	d081      	beq.n	501a <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    5116:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    511a:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    511c:	f3c1 0240 	ubfx	r2, r1, #1, #1
    5120:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    5124:	0052      	lsls	r2, r2, #1
    5126:	f062 027f 	orn	r2, r2, #127	; 0x7f
    512a:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    512e:	430a      	orrs	r2, r1
    5130:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    5134:	e771      	b.n	501a <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    5136:	a805      	add	r0, sp, #20
    5138:	f7ff febe 	bl	4eb8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    513c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    5140:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    5142:	f3c3 0240 	ubfx	r2, r3, #1, #1
    5146:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    514a:	f360 0341 	bfi	r3, r0, #1, #1
    514e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    5152:	9b05      	ldr	r3, [sp, #20]
    5154:	e77a      	b.n	504c <cbvprintf+0xc8>
	switch (*sp) {
    5156:	2874      	cmp	r0, #116	; 0x74
    5158:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    515c:	d040      	beq.n	51e0 <cbvprintf+0x25c>
    515e:	287a      	cmp	r0, #122	; 0x7a
    5160:	d184      	bne.n	506c <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    5162:	4613      	mov	r3, r2
    5164:	2206      	movs	r2, #6
    5166:	e028      	b.n	51ba <cbvprintf+0x236>
		if (*++sp == 'h') {
    5168:	785a      	ldrb	r2, [r3, #1]
    516a:	2a68      	cmp	r2, #104	; 0x68
    516c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5170:	d121      	bne.n	51b6 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    5172:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    5174:	f361 02c6 	bfi	r2, r1, #3, #4
    5178:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    517c:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    517e:	460b      	mov	r3, r1
    5180:	f813 2b01 	ldrb.w	r2, [r3], #1
    5184:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    5186:	2a78      	cmp	r2, #120	; 0x78
    5188:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    518c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    5190:	f200 80bf 	bhi.w	5312 <cbvprintf+0x38e>
    5194:	2a57      	cmp	r2, #87	; 0x57
    5196:	d833      	bhi.n	5200 <cbvprintf+0x27c>
    5198:	2a41      	cmp	r2, #65	; 0x41
    519a:	d003      	beq.n	51a4 <cbvprintf+0x220>
    519c:	3a45      	subs	r2, #69	; 0x45
    519e:	2a02      	cmp	r2, #2
    51a0:	f200 80b7 	bhi.w	5312 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    51a4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    51a8:	2204      	movs	r2, #4
    51aa:	f362 0302 	bfi	r3, r2, #0, #3
    51ae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    51b2:	2301      	movs	r3, #1
			break;
    51b4:	e084      	b.n	52c0 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    51b6:	4613      	mov	r3, r2
    51b8:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    51ba:	f362 03c6 	bfi	r3, r2, #3, #4
    51be:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    51c2:	e7dc      	b.n	517e <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    51c4:	785a      	ldrb	r2, [r3, #1]
    51c6:	2a6c      	cmp	r2, #108	; 0x6c
    51c8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    51cc:	d101      	bne.n	51d2 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    51ce:	2104      	movs	r1, #4
    51d0:	e7d0      	b.n	5174 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    51d2:	4613      	mov	r3, r2
    51d4:	2203      	movs	r2, #3
    51d6:	e7f0      	b.n	51ba <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    51d8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    51dc:	2205      	movs	r2, #5
    51de:	e7ec      	b.n	51ba <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    51e0:	4613      	mov	r3, r2
    51e2:	2207      	movs	r2, #7
    51e4:	e7e9      	b.n	51ba <cbvprintf+0x236>
		conv->unsupported = true;
    51e6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    51ea:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    51ee:	f023 0302 	bic.w	r3, r3, #2
    51f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    51f6:	f043 0302 	orr.w	r3, r3, #2
    51fa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    51fe:	e7be      	b.n	517e <cbvprintf+0x1fa>
    5200:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    5204:	2920      	cmp	r1, #32
    5206:	f200 8084 	bhi.w	5312 <cbvprintf+0x38e>
    520a:	a001      	add	r0, pc, #4	; (adr r0, 5210 <cbvprintf+0x28c>)
    520c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    5210:	000052d5 	.word	0x000052d5
    5214:	00005313 	.word	0x00005313
    5218:	00005313 	.word	0x00005313
    521c:	00005313 	.word	0x00005313
    5220:	00005313 	.word	0x00005313
    5224:	00005313 	.word	0x00005313
    5228:	00005313 	.word	0x00005313
    522c:	00005313 	.word	0x00005313
    5230:	00005313 	.word	0x00005313
    5234:	000051a5 	.word	0x000051a5
    5238:	00005313 	.word	0x00005313
    523c:	000052d5 	.word	0x000052d5
    5240:	00005295 	.word	0x00005295
    5244:	000051a5 	.word	0x000051a5
    5248:	000051a5 	.word	0x000051a5
    524c:	000051a5 	.word	0x000051a5
    5250:	00005313 	.word	0x00005313
    5254:	00005295 	.word	0x00005295
    5258:	00005313 	.word	0x00005313
    525c:	00005313 	.word	0x00005313
    5260:	00005313 	.word	0x00005313
    5264:	00005313 	.word	0x00005313
    5268:	000052dd 	.word	0x000052dd
    526c:	000052d5 	.word	0x000052d5
    5270:	000052f9 	.word	0x000052f9
    5274:	00005313 	.word	0x00005313
    5278:	00005313 	.word	0x00005313
    527c:	000052f9 	.word	0x000052f9
    5280:	00005313 	.word	0x00005313
    5284:	000052d5 	.word	0x000052d5
    5288:	00005313 	.word	0x00005313
    528c:	00005313 	.word	0x00005313
    5290:	000052d5 	.word	0x000052d5
		conv->specifier_cat = SPECIFIER_SINT;
    5294:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    5298:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    529a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    529e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    52a2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    52a4:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    52a8:	bf02      	ittt	eq
    52aa:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    52ae:	f041 0101 	orreq.w	r1, r1, #1
    52b2:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    52b6:	2a63      	cmp	r2, #99	; 0x63
    52b8:	d131      	bne.n	531e <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    52ba:	3b00      	subs	r3, #0
    52bc:	bf18      	it	ne
    52be:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    52c0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    52c4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    52c8:	430b      	orrs	r3, r1
    52ca:	f363 0241 	bfi	r2, r3, #1, #1
    52ce:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    52d2:	e6d8      	b.n	5086 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    52d4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    52d8:	2002      	movs	r0, #2
    52da:	e7de      	b.n	529a <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    52dc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    52e0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    52e4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    52e8:	2103      	movs	r1, #3
    52ea:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    52ee:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    52f0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    52f4:	4143      	adcs	r3, r0
    52f6:	e7e3      	b.n	52c0 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    52f8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    52fc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    52fe:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    5302:	f361 0202 	bfi	r2, r1, #0, #3
    5306:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    530a:	bf14      	ite	ne
    530c:	2301      	movne	r3, #1
    530e:	2300      	moveq	r3, #0
    5310:	e7d6      	b.n	52c0 <cbvprintf+0x33c>
		conv->invalid = true;
    5312:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5316:	f043 0301 	orr.w	r3, r3, #1
    531a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    531e:	2300      	movs	r3, #0
    5320:	e7ce      	b.n	52c0 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    5322:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    5326:	2a00      	cmp	r2, #0
			width = conv->width_value;
    5328:	bfb4      	ite	lt
    532a:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    532e:	f04f 38ff 	movge.w	r8, #4294967295
    5332:	e6ba      	b.n	50aa <cbvprintf+0x126>
		} else if (conv->prec_present) {
    5334:	079f      	lsls	r7, r3, #30
    5336:	f57f aec6 	bpl.w	50c6 <cbvprintf+0x142>
			precision = conv->prec_value;
    533a:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    533c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    5340:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    5342:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    5346:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    534a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    534e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    5350:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    5354:	d137      	bne.n	53c6 <cbvprintf+0x442>
			switch (length_mod) {
    5356:	1ecb      	subs	r3, r1, #3
    5358:	2b04      	cmp	r3, #4
    535a:	d821      	bhi.n	53a0 <cbvprintf+0x41c>
    535c:	e8df f003 	tbb	[pc, r3]
    5360:	20070703 	.word	0x20070703
    5364:	20          	.byte	0x20
    5365:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    5366:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    536a:	17d3      	asrs	r3, r2, #31
    536c:	e004      	b.n	5378 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    536e:	3407      	adds	r4, #7
    5370:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    5374:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    5378:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    537c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5380:	f013 0603 	ands.w	r6, r3, #3
    5384:	d055      	beq.n	5432 <cbvprintf+0x4ae>
			OUTS(sp, fp);
    5386:	9b02      	ldr	r3, [sp, #8]
    5388:	464a      	mov	r2, r9
    538a:	4659      	mov	r1, fp
    538c:	4650      	mov	r0, sl
    538e:	f017 fa9f 	bl	1c8d0 <outs>
    5392:	2800      	cmp	r0, #0
    5394:	f2c0 813e 	blt.w	5614 <cbvprintf+0x690>
    5398:	4405      	add	r5, r0
			OUTS(bps, bpe);
    539a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    539e:	e5f9      	b.n	4f94 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    53a0:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    53a4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    53a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
    53aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    53ae:	d105      	bne.n	53bc <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    53b0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    53b4:	930c      	str	r3, [sp, #48]	; 0x30
    53b6:	2300      	movs	r3, #0
    53b8:	930d      	str	r3, [sp, #52]	; 0x34
    53ba:	e7df      	b.n	537c <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    53bc:	2902      	cmp	r1, #2
    53be:	d1dd      	bne.n	537c <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    53c0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    53c4:	e7d1      	b.n	536a <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    53c6:	2b02      	cmp	r3, #2
    53c8:	d123      	bne.n	5412 <cbvprintf+0x48e>
			switch (length_mod) {
    53ca:	1ecb      	subs	r3, r1, #3
    53cc:	2b04      	cmp	r3, #4
    53ce:	d813      	bhi.n	53f8 <cbvprintf+0x474>
    53d0:	e8df f003 	tbb	[pc, r3]
    53d4:	120a0a03 	.word	0x120a0a03
    53d8:	12          	.byte	0x12
    53d9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    53da:	6822      	ldr	r2, [r4, #0]
    53dc:	920c      	str	r2, [sp, #48]	; 0x30
    53de:	2300      	movs	r3, #0
    53e0:	1d20      	adds	r0, r4, #4
    53e2:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    53e4:	4604      	mov	r4, r0
    53e6:	e7c9      	b.n	537c <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    53e8:	3407      	adds	r4, #7
    53ea:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    53ee:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    53f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    53f6:	e7f5      	b.n	53e4 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    53f8:	f854 3b04 	ldr.w	r3, [r4], #4
    53fc:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    53fe:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    5400:	f04f 0300 	mov.w	r3, #0
    5404:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    5406:	d0d3      	beq.n	53b0 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    5408:	2902      	cmp	r1, #2
    540a:	d1b7      	bne.n	537c <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    540c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5410:	e7d0      	b.n	53b4 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    5412:	2b04      	cmp	r3, #4
    5414:	d107      	bne.n	5426 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    5416:	3407      	adds	r4, #7
    5418:	f024 0407 	bic.w	r4, r4, #7
    541c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    5420:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    5424:	e7aa      	b.n	537c <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    5426:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    5428:	bf04      	itt	eq
    542a:	f854 3b04 	ldreq.w	r3, [r4], #4
    542e:	930c      	streq	r3, [sp, #48]	; 0x30
    5430:	e7a4      	b.n	537c <cbvprintf+0x3f8>
		switch (conv->specifier) {
    5432:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5436:	2878      	cmp	r0, #120	; 0x78
    5438:	d8af      	bhi.n	539a <cbvprintf+0x416>
    543a:	2862      	cmp	r0, #98	; 0x62
    543c:	d820      	bhi.n	5480 <cbvprintf+0x4fc>
    543e:	2825      	cmp	r0, #37	; 0x25
    5440:	f43f adb2 	beq.w	4fa8 <cbvprintf+0x24>
    5444:	2858      	cmp	r0, #88	; 0x58
    5446:	d1a8      	bne.n	539a <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    5448:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    544c:	9300      	str	r3, [sp, #0]
    544e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    5452:	ab06      	add	r3, sp, #24
    5454:	aa0e      	add	r2, sp, #56	; 0x38
    5456:	f7ff fd45 	bl	4ee4 <encode_uint>
    545a:	4681      	mov	r9, r0
			if (precision >= 0) {
    545c:	2f00      	cmp	r7, #0
    545e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    5462:	db0b      	blt.n	547c <cbvprintf+0x4f8>
				conv->flag_zero = false;
    5464:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    5468:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    546c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    5470:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    5472:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    5476:	d901      	bls.n	547c <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    5478:	1aff      	subs	r7, r7, r3
    547a:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    547c:	4607      	mov	r7, r0
    547e:	e03c      	b.n	54fa <cbvprintf+0x576>
    5480:	3863      	subs	r0, #99	; 0x63
    5482:	2815      	cmp	r0, #21
    5484:	d889      	bhi.n	539a <cbvprintf+0x416>
    5486:	a201      	add	r2, pc, #4	; (adr r2, 548c <cbvprintf+0x508>)
    5488:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    548c:	0000550b 	.word	0x0000550b
    5490:	0000556d 	.word	0x0000556d
    5494:	0000539b 	.word	0x0000539b
    5498:	0000539b 	.word	0x0000539b
    549c:	0000539b 	.word	0x0000539b
    54a0:	0000539b 	.word	0x0000539b
    54a4:	0000556d 	.word	0x0000556d
    54a8:	0000539b 	.word	0x0000539b
    54ac:	0000539b 	.word	0x0000539b
    54b0:	0000539b 	.word	0x0000539b
    54b4:	0000539b 	.word	0x0000539b
    54b8:	000055cb 	.word	0x000055cb
    54bc:	00005599 	.word	0x00005599
    54c0:	0000559d 	.word	0x0000559d
    54c4:	0000539b 	.word	0x0000539b
    54c8:	0000539b 	.word	0x0000539b
    54cc:	000054e5 	.word	0x000054e5
    54d0:	0000539b 	.word	0x0000539b
    54d4:	00005599 	.word	0x00005599
    54d8:	0000539b 	.word	0x0000539b
    54dc:	0000539b 	.word	0x0000539b
    54e0:	00005599 	.word	0x00005599
			if (precision >= 0) {
    54e4:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    54e6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    54ea:	db0a      	blt.n	5502 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    54ec:	4639      	mov	r1, r7
    54ee:	4648      	mov	r0, r9
    54f0:	f018 ff0f 	bl	1e312 <strnlen>
			bpe = bps + len;
    54f4:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    54f8:	2600      	movs	r6, #0
		if (bps == NULL) {
    54fa:	f1b9 0f00 	cmp.w	r9, #0
    54fe:	d10c      	bne.n	551a <cbvprintf+0x596>
    5500:	e74b      	b.n	539a <cbvprintf+0x416>
				len = strlen(bps);
    5502:	4648      	mov	r0, r9
    5504:	f7fb fc5c 	bl	dc0 <strlen>
    5508:	e7f4      	b.n	54f4 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    550a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    550c:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    5510:	2600      	movs	r6, #0
			bpe = buf + 1;
    5512:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    5516:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    551a:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    551e:	b106      	cbz	r6, 5522 <cbvprintf+0x59e>
			nj_len += 1U;
    5520:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    5522:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5526:	06d0      	lsls	r0, r2, #27
    5528:	d569      	bpl.n	55fe <cbvprintf+0x67a>
			nj_len += 2U;
    552a:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    552c:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    552e:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    5530:	bf48      	it	mi
    5532:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    5534:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    5536:	bf48      	it	mi
    5538:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    553a:	f1b8 0f00 	cmp.w	r8, #0
    553e:	dd76      	ble.n	562e <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    5540:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    5544:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    5548:	f3c2 0380 	ubfx	r3, r2, #2, #1
    554c:	9303      	str	r3, [sp, #12]
    554e:	0753      	lsls	r3, r2, #29
    5550:	d46d      	bmi.n	562e <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    5552:	0650      	lsls	r0, r2, #25
    5554:	d561      	bpl.n	561a <cbvprintf+0x696>
					if (sign != 0) {
    5556:	b13e      	cbz	r6, 5568 <cbvprintf+0x5e4>
						OUTC(sign);
    5558:	4659      	mov	r1, fp
    555a:	4630      	mov	r0, r6
    555c:	47d0      	blx	sl
    555e:	2800      	cmp	r0, #0
    5560:	db58      	blt.n	5614 <cbvprintf+0x690>
						sign = 0;
    5562:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    5564:	3501      	adds	r5, #1
						sign = 0;
    5566:	461e      	mov	r6, r3
					pad = '0';
    5568:	2330      	movs	r3, #48	; 0x30
    556a:	e057      	b.n	561c <cbvprintf+0x698>
			if (conv->flag_plus) {
    556c:	071e      	lsls	r6, r3, #28
    556e:	d411      	bmi.n	5594 <cbvprintf+0x610>
				sign = ' ';
    5570:	f013 0610 	ands.w	r6, r3, #16
    5574:	bf18      	it	ne
    5576:	2620      	movne	r6, #32
			sint = value->sint;
    5578:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    557c:	2a00      	cmp	r2, #0
    557e:	f173 0100 	sbcs.w	r1, r3, #0
    5582:	f6bf af61 	bge.w	5448 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    5586:	4252      	negs	r2, r2
    5588:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    558c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    5590:	262d      	movs	r6, #45	; 0x2d
    5592:	e759      	b.n	5448 <cbvprintf+0x4c4>
				sign = '+';
    5594:	262b      	movs	r6, #43	; 0x2b
    5596:	e7ef      	b.n	5578 <cbvprintf+0x5f4>
		switch (conv->specifier) {
    5598:	2600      	movs	r6, #0
    559a:	e755      	b.n	5448 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    559c:	980c      	ldr	r0, [sp, #48]	; 0x30
    559e:	b348      	cbz	r0, 55f4 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    55a0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    55a4:	9300      	str	r3, [sp, #0]
    55a6:	aa0e      	add	r2, sp, #56	; 0x38
    55a8:	ab06      	add	r3, sp, #24
    55aa:	2100      	movs	r1, #0
    55ac:	f7ff fc9a 	bl	4ee4 <encode_uint>
				conv->altform_0c = true;
    55b0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    55b4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    55b8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    55bc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    55c0:	4681      	mov	r9, r0
				conv->altform_0c = true;
    55c2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    55c6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    55c8:	e748      	b.n	545c <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    55ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    55cc:	2907      	cmp	r1, #7
    55ce:	f63f aee4 	bhi.w	539a <cbvprintf+0x416>
    55d2:	e8df f001 	tbb	[pc, r1]
    55d6:	040d      	.short	0x040d
    55d8:	08080d06 	.word	0x08080d06
    55dc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    55de:	701d      	strb	r5, [r3, #0]
		break;
    55e0:	e6db      	b.n	539a <cbvprintf+0x416>
		*(short *)dp = (short)count;
    55e2:	801d      	strh	r5, [r3, #0]
		break;
    55e4:	e6d9      	b.n	539a <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    55e6:	4628      	mov	r0, r5
    55e8:	17e9      	asrs	r1, r5, #31
    55ea:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    55ee:	e6d4      	b.n	539a <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    55f0:	601d      	str	r5, [r3, #0]
		break;
    55f2:	e6d2      	b.n	539a <cbvprintf+0x416>
			bpe = bps + 5;
    55f4:	4f2e      	ldr	r7, [pc, #184]	; (56b0 <cbvprintf+0x72c>)
    55f6:	4606      	mov	r6, r0
			bps = "(nil)";
    55f8:	f1a7 0905 	sub.w	r9, r7, #5
    55fc:	e78d      	b.n	551a <cbvprintf+0x596>
		} else if (conv->altform_0) {
    55fe:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    5600:	bf48      	it	mi
    5602:	3301      	addmi	r3, #1
    5604:	e792      	b.n	552c <cbvprintf+0x5a8>
					OUTC(pad);
    5606:	4618      	mov	r0, r3
    5608:	4659      	mov	r1, fp
    560a:	9303      	str	r3, [sp, #12]
    560c:	47d0      	blx	sl
    560e:	2800      	cmp	r0, #0
    5610:	9b03      	ldr	r3, [sp, #12]
    5612:	da04      	bge.n	561e <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    5614:	b013      	add	sp, #76	; 0x4c
    5616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    561a:	2320      	movs	r3, #32
    561c:	4445      	add	r5, r8
    561e:	4642      	mov	r2, r8
				while (width-- > 0) {
    5620:	2a00      	cmp	r2, #0
    5622:	eba5 0108 	sub.w	r1, r5, r8
    5626:	f108 38ff 	add.w	r8, r8, #4294967295
    562a:	dcec      	bgt.n	5606 <cbvprintf+0x682>
    562c:	460d      	mov	r5, r1
		if (sign != 0) {
    562e:	b12e      	cbz	r6, 563c <cbvprintf+0x6b8>
			OUTC(sign);
    5630:	4659      	mov	r1, fp
    5632:	4630      	mov	r0, r6
    5634:	47d0      	blx	sl
    5636:	2800      	cmp	r0, #0
    5638:	dbec      	blt.n	5614 <cbvprintf+0x690>
    563a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    563c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5640:	06d9      	lsls	r1, r3, #27
    5642:	d401      	bmi.n	5648 <cbvprintf+0x6c4>
    5644:	071a      	lsls	r2, r3, #28
    5646:	d505      	bpl.n	5654 <cbvprintf+0x6d0>
				OUTC('0');
    5648:	4659      	mov	r1, fp
    564a:	2030      	movs	r0, #48	; 0x30
    564c:	47d0      	blx	sl
    564e:	2800      	cmp	r0, #0
    5650:	dbe0      	blt.n	5614 <cbvprintf+0x690>
    5652:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    5654:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5658:	06db      	lsls	r3, r3, #27
    565a:	d506      	bpl.n	566a <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    565c:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5660:	4659      	mov	r1, fp
    5662:	47d0      	blx	sl
    5664:	2800      	cmp	r0, #0
    5666:	dbd5      	blt.n	5614 <cbvprintf+0x690>
    5668:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    566a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    566c:	442e      	add	r6, r5
    566e:	1b73      	subs	r3, r6, r5
    5670:	2b00      	cmp	r3, #0
    5672:	dc15      	bgt.n	56a0 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    5674:	463b      	mov	r3, r7
    5676:	464a      	mov	r2, r9
    5678:	4659      	mov	r1, fp
    567a:	4650      	mov	r0, sl
    567c:	f017 f928 	bl	1c8d0 <outs>
    5680:	2800      	cmp	r0, #0
    5682:	dbc7      	blt.n	5614 <cbvprintf+0x690>
    5684:	4405      	add	r5, r0
		while (width > 0) {
    5686:	44a8      	add	r8, r5
    5688:	eba8 0305 	sub.w	r3, r8, r5
    568c:	2b00      	cmp	r3, #0
    568e:	f77f ae84 	ble.w	539a <cbvprintf+0x416>
			OUTC(' ');
    5692:	4659      	mov	r1, fp
    5694:	2020      	movs	r0, #32
    5696:	47d0      	blx	sl
    5698:	2800      	cmp	r0, #0
    569a:	dbbb      	blt.n	5614 <cbvprintf+0x690>
    569c:	3501      	adds	r5, #1
			--width;
    569e:	e7f3      	b.n	5688 <cbvprintf+0x704>
				OUTC('0');
    56a0:	4659      	mov	r1, fp
    56a2:	2030      	movs	r0, #48	; 0x30
    56a4:	47d0      	blx	sl
    56a6:	2800      	cmp	r0, #0
    56a8:	dbb4      	blt.n	5614 <cbvprintf+0x690>
    56aa:	3501      	adds	r5, #1
    56ac:	e7df      	b.n	566e <cbvprintf+0x6ea>
    56ae:	bf00      	nop
    56b0:	0001faa0 	.word	0x0001faa0

000056b4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    56b4:	b508      	push	{r3, lr}
    56b6:	4604      	mov	r4, r0
    56b8:	f04f 0220 	mov.w	r2, #32
    56bc:	f3ef 8311 	mrs	r3, BASEPRI
    56c0:	f382 8812 	msr	BASEPRI_MAX, r2
    56c4:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    56c8:	f018 f998 	bl	1d9fc <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    56cc:	4620      	mov	r0, r4
    56ce:	f001 fd21 	bl	7114 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    56d2:	4803      	ldr	r0, [pc, #12]	; (56e0 <sys_reboot+0x2c>)
    56d4:	f016 ff4f 	bl	1c576 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    56d8:	f000 ff8a 	bl	65f0 <arch_cpu_idle>
    56dc:	e7fc      	b.n	56d8 <sys_reboot+0x24>
    56de:	bf00      	nop
    56e0:	0001faa1 	.word	0x0001faa1

000056e4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    56e4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    56e6:	4910      	ldr	r1, [pc, #64]	; (5728 <enable_logger+0x44>)
    56e8:	4810      	ldr	r0, [pc, #64]	; (572c <enable_logger+0x48>)
{
    56ea:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    56ec:	2200      	movs	r2, #0
    56ee:	f018 fc06 	bl	1defe <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    56f2:	4d0f      	ldr	r5, [pc, #60]	; (5730 <enable_logger+0x4c>)
    56f4:	490f      	ldr	r1, [pc, #60]	; (5734 <enable_logger+0x50>)
    56f6:	2200      	movs	r2, #0
    56f8:	2300      	movs	r3, #0
    56fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    56fe:	2400      	movs	r4, #0
    5700:	230e      	movs	r3, #14
    5702:	e9cd 3403 	strd	r3, r4, [sp, #12]
    5706:	e9cd 4401 	strd	r4, r4, [sp, #4]
    570a:	4b0b      	ldr	r3, [pc, #44]	; (5738 <enable_logger+0x54>)
    570c:	9400      	str	r4, [sp, #0]
    570e:	f44f 7240 	mov.w	r2, #768	; 0x300
    5712:	4628      	mov	r0, r5
    5714:	f006 fad8 	bl	bcc8 <z_impl_k_thread_create>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    5718:	4908      	ldr	r1, [pc, #32]	; (573c <enable_logger+0x58>)
    571a:	4628      	mov	r0, r5
    571c:	f018 fa4b 	bl	1dbb6 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5720:	4620      	mov	r0, r4
    5722:	b009      	add	sp, #36	; 0x24
    5724:	bd30      	pop	{r4, r5, pc}
    5726:	bf00      	nop
    5728:	00005741 	.word	0x00005741
    572c:	200003b0 	.word	0x200003b0
    5730:	200003e8 	.word	0x200003e8
    5734:	20002460 	.word	0x20002460
    5738:	00005ba9 	.word	0x00005ba9
    573c:	0001faca 	.word	0x0001faca

00005740 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5740:	4801      	ldr	r0, [pc, #4]	; (5748 <log_process_thread_timer_expiry_fn+0x8>)
    5742:	f006 bc25 	b.w	bf90 <z_impl_k_sem_give>
    5746:	bf00      	nop
    5748:	20000348 	.word	0x20000348

0000574c <z_log_get_s_mask>:
{
    574c:	b5f0      	push	{r4, r5, r6, r7, lr}
    574e:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    5750:	4e0f      	ldr	r6, [pc, #60]	; (5790 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0U;
    5752:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    5754:	4603      	mov	r3, r0
	bool arm = false;
    5756:	4602      	mov	r2, r0
				mask |= BIT(arg);
    5758:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    575a:	f815 4b01 	ldrb.w	r4, [r5], #1
    575e:	b10c      	cbz	r4, 5764 <z_log_get_s_mask+0x18>
    5760:	428b      	cmp	r3, r1
    5762:	d300      	bcc.n	5766 <z_log_get_s_mask+0x1a>
}
    5764:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    5766:	2c25      	cmp	r4, #37	; 0x25
    5768:	d102      	bne.n	5770 <z_log_get_s_mask+0x24>
			arm = !arm;
    576a:	f082 0201 	eor.w	r2, r2, #1
    576e:	e7f4      	b.n	575a <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    5770:	2a00      	cmp	r2, #0
    5772:	d0f2      	beq.n	575a <z_log_get_s_mask+0xe>
    5774:	f814 c006 	ldrb.w	ip, [r4, r6]
    5778:	f01c 0f03 	tst.w	ip, #3
    577c:	d0ed      	beq.n	575a <z_log_get_s_mask+0xe>
			if (curr == 's') {
    577e:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    5780:	bf04      	itt	eq
    5782:	fa07 f203 	lsleq.w	r2, r7, r3
    5786:	4310      	orreq	r0, r2
			arg++;
    5788:	3301      	adds	r3, #1
			arm = false;
    578a:	2200      	movs	r2, #0
    578c:	e7e5      	b.n	575a <z_log_get_s_mask+0xe>
    578e:	bf00      	nop
    5790:	00020575 	.word	0x00020575

00005794 <log_core_init>:
	panic_mode = false;
    5794:	4a0c      	ldr	r2, [pc, #48]	; (57c8 <log_core_init+0x34>)
    5796:	2300      	movs	r3, #0
{
    5798:	b510      	push	{r4, lr}
	panic_mode = false;
    579a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    579c:	4a0b      	ldr	r2, [pc, #44]	; (57cc <log_core_init+0x38>)
    579e:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    57a0:	4b0b      	ldr	r3, [pc, #44]	; (57d0 <log_core_init+0x3c>)
    57a2:	4a0c      	ldr	r2, [pc, #48]	; (57d4 <log_core_init+0x40>)
    57a4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    57a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    57aa:	f000 fcc9 	bl	6140 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    57ae:	f000 fa79 	bl	5ca4 <log_msg_pool_init>
		log_list_init(&list);
    57b2:	4809      	ldr	r0, [pc, #36]	; (57d8 <log_core_init+0x44>)
    57b4:	f017 f8a3 	bl	1c8fe <log_list_init>
}
    57b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    57bc:	4907      	ldr	r1, [pc, #28]	; (57dc <log_core_init+0x48>)
    57be:	4808      	ldr	r0, [pc, #32]	; (57e0 <log_core_init+0x4c>)
    57c0:	2304      	movs	r3, #4
    57c2:	2228      	movs	r2, #40	; 0x28
    57c4:	f018 b9ad 	b.w	1db22 <k_mem_slab_init>
    57c8:	20001d38 	.word	0x20001d38
    57cc:	200007bc 	.word	0x200007bc
    57d0:	2000000c 	.word	0x2000000c
    57d4:	0001c93d 	.word	0x0001c93d
    57d8:	200007c4 	.word	0x200007c4
    57dc:	20004540 	.word	0x20004540
    57e0:	200007cc 	.word	0x200007cc

000057e4 <log_init>:
{
    57e4:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    57e6:	4b12      	ldr	r3, [pc, #72]	; (5830 <log_init+0x4c>)
    57e8:	f3bf 8f5b 	dmb	ish
    57ec:	e853 5f00 	ldrex	r5, [r3]
    57f0:	1c6a      	adds	r2, r5, #1
    57f2:	e843 2100 	strex	r1, r2, [r3]
    57f6:	2900      	cmp	r1, #0
    57f8:	d1f8      	bne.n	57ec <log_init+0x8>
    57fa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    57fe:	b92d      	cbnz	r5, 580c <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    5800:	4c0c      	ldr	r4, [pc, #48]	; (5834 <log_init+0x50>)
    5802:	4e0d      	ldr	r6, [pc, #52]	; (5838 <log_init+0x54>)
    5804:	1b36      	subs	r6, r6, r4
    5806:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5808:	42b5      	cmp	r5, r6
    580a:	db00      	blt.n	580e <log_init+0x2a>
}
    580c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    580e:	7b23      	ldrb	r3, [r4, #12]
    5810:	b153      	cbz	r3, 5828 <log_init+0x44>
			if (backend->api->init != NULL) {
    5812:	6823      	ldr	r3, [r4, #0]
    5814:	699b      	ldr	r3, [r3, #24]
    5816:	b10b      	cbz	r3, 581c <log_init+0x38>
				backend->api->init(backend);
    5818:	4620      	mov	r0, r4
    581a:	4798      	blx	r3
			log_backend_enable(backend,
    581c:	6863      	ldr	r3, [r4, #4]
    581e:	2204      	movs	r2, #4
    5820:	6819      	ldr	r1, [r3, #0]
    5822:	4620      	mov	r0, r4
    5824:	f000 fa30 	bl	5c88 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5828:	3501      	adds	r5, #1
    582a:	3410      	adds	r4, #16
    582c:	e7ec      	b.n	5808 <log_init+0x24>
    582e:	bf00      	nop
    5830:	200007c0 	.word	0x200007c0
    5834:	0001ea70 	.word	0x0001ea70
    5838:	0001ea90 	.word	0x0001ea90

0000583c <get_msg>:
{
    583c:	b510      	push	{r4, lr}
    583e:	f04f 0320 	mov.w	r3, #32
    5842:	f3ef 8411 	mrs	r4, BASEPRI
    5846:	f383 8812 	msr	BASEPRI_MAX, r3
    584a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    584e:	4804      	ldr	r0, [pc, #16]	; (5860 <get_msg+0x24>)
    5850:	f017 f865 	bl	1c91e <log_list_head_get>
	__asm__ volatile(
    5854:	f384 8811 	msr	BASEPRI, r4
    5858:	f3bf 8f6f 	isb	sy
}
    585c:	bd10      	pop	{r4, pc}
    585e:	bf00      	nop
    5860:	200007c4 	.word	0x200007c4

00005864 <z_log_notify_backend_enabled>:
{
    5864:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    5866:	4c04      	ldr	r4, [pc, #16]	; (5878 <z_log_notify_backend_enabled+0x14>)
    5868:	7822      	ldrb	r2, [r4, #0]
    586a:	b912      	cbnz	r2, 5872 <z_log_notify_backend_enabled+0xe>
    586c:	4803      	ldr	r0, [pc, #12]	; (587c <z_log_notify_backend_enabled+0x18>)
    586e:	f006 fb8f 	bl	bf90 <z_impl_k_sem_give>
	backend_attached = true;
    5872:	2301      	movs	r3, #1
    5874:	7023      	strb	r3, [r4, #0]
}
    5876:	bd10      	pop	{r4, pc}
    5878:	20001d37 	.word	0x20001d37
    587c:	20000348 	.word	0x20000348

00005880 <z_log_dropped>:
    5880:	4b0c      	ldr	r3, [pc, #48]	; (58b4 <z_log_dropped+0x34>)
    5882:	f3bf 8f5b 	dmb	ish
    5886:	e853 2f00 	ldrex	r2, [r3]
    588a:	3201      	adds	r2, #1
    588c:	e843 2100 	strex	r1, r2, [r3]
    5890:	2900      	cmp	r1, #0
    5892:	d1f8      	bne.n	5886 <z_log_dropped+0x6>
    5894:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5898:	f3bf 8f5b 	dmb	ish
    589c:	4b06      	ldr	r3, [pc, #24]	; (58b8 <z_log_dropped+0x38>)
    589e:	e853 2f00 	ldrex	r2, [r3]
    58a2:	3a01      	subs	r2, #1
    58a4:	e843 2100 	strex	r1, r2, [r3]
    58a8:	2900      	cmp	r1, #0
    58aa:	d1f8      	bne.n	589e <z_log_dropped+0x1e>
    58ac:	f3bf 8f5b 	dmb	ish
}
    58b0:	4770      	bx	lr
    58b2:	bf00      	nop
    58b4:	200007bc 	.word	0x200007bc
    58b8:	200007b8 	.word	0x200007b8

000058bc <z_log_dropped_read_and_clear>:
}
    58bc:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    58be:	4b06      	ldr	r3, [pc, #24]	; (58d8 <z_log_dropped_read_and_clear+0x1c>)
    58c0:	f3bf 8f5b 	dmb	ish
    58c4:	4602      	mov	r2, r0
    58c6:	e853 0f00 	ldrex	r0, [r3]
    58ca:	e843 2100 	strex	r1, r2, [r3]
    58ce:	2900      	cmp	r1, #0
    58d0:	d1f9      	bne.n	58c6 <z_log_dropped_read_and_clear+0xa>
    58d2:	f3bf 8f5b 	dmb	ish
    58d6:	4770      	bx	lr
    58d8:	200007bc 	.word	0x200007bc

000058dc <dropped_notify>:
{
    58dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    58de:	f7ff ffed 	bl	58bc <z_log_dropped_read_and_clear>
    58e2:	4c0a      	ldr	r4, [pc, #40]	; (590c <dropped_notify+0x30>)
    58e4:	4d0a      	ldr	r5, [pc, #40]	; (5910 <dropped_notify+0x34>)
    58e6:	1b2d      	subs	r5, r5, r4
    58e8:	4607      	mov	r7, r0
    58ea:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    58ec:	2600      	movs	r6, #0
    58ee:	42ae      	cmp	r6, r5
    58f0:	db00      	blt.n	58f4 <dropped_notify+0x18>
}
    58f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    58f4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    58f6:	795b      	ldrb	r3, [r3, #5]
    58f8:	b12b      	cbz	r3, 5906 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    58fa:	6823      	ldr	r3, [r4, #0]
    58fc:	691b      	ldr	r3, [r3, #16]
    58fe:	b113      	cbz	r3, 5906 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    5900:	4639      	mov	r1, r7
    5902:	4620      	mov	r0, r4
    5904:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5906:	3601      	adds	r6, #1
    5908:	3410      	adds	r4, #16
    590a:	e7f0      	b.n	58ee <dropped_notify+0x12>
    590c:	0001ea70 	.word	0x0001ea70
    5910:	0001ea90 	.word	0x0001ea90

00005914 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    5914:	4b17      	ldr	r3, [pc, #92]	; (5974 <z_log_strdup+0x60>)
    5916:	4298      	cmp	r0, r3
{
    5918:	b573      	push	{r0, r1, r4, r5, r6, lr}
    591a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    591c:	d302      	bcc.n	5924 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    591e:	4b16      	ldr	r3, [pc, #88]	; (5978 <z_log_strdup+0x64>)
    5920:	4298      	cmp	r0, r3
    5922:	d321      	bcc.n	5968 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    5924:	4815      	ldr	r0, [pc, #84]	; (597c <z_log_strdup+0x68>)
    5926:	2200      	movs	r2, #0
    5928:	2300      	movs	r3, #0
    592a:	a901      	add	r1, sp, #4
    592c:	f006 f96a 	bl	bc04 <k_mem_slab_alloc>
	if (err != 0) {
    5930:	4605      	mov	r5, r0
    5932:	b9e0      	cbnz	r0, 596e <z_log_strdup+0x5a>
    5934:	2201      	movs	r2, #1
    5936:	9b01      	ldr	r3, [sp, #4]
    5938:	f3bf 8f5b 	dmb	ish
    593c:	e853 1f00 	ldrex	r1, [r3]
    5940:	e843 2000 	strex	r0, r2, [r3]
    5944:	2800      	cmp	r0, #0
    5946:	d1f9      	bne.n	593c <z_log_strdup+0x28>
    5948:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    594c:	9e01      	ldr	r6, [sp, #4]
    594e:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    5950:	221f      	movs	r2, #31
    5952:	4618      	mov	r0, r3
    5954:	4621      	mov	r1, r4
    5956:	f018 fcc9 	bl	1e2ec <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    595a:	227e      	movs	r2, #126	; 0x7e
    595c:	4603      	mov	r3, r0
    595e:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    5962:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    5966:	461c      	mov	r4, r3
}
    5968:	4620      	mov	r0, r4
    596a:	b002      	add	sp, #8
    596c:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    596e:	4b04      	ldr	r3, [pc, #16]	; (5980 <z_log_strdup+0x6c>)
    5970:	e7f9      	b.n	5966 <z_log_strdup+0x52>
    5972:	bf00      	nop
    5974:	0001e720 	.word	0x0001e720
    5978:	000206b0 	.word	0x000206b0
    597c:	200007cc 	.word	0x200007cc
    5980:	0001fad2 	.word	0x0001fad2

00005984 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    5984:	b148      	cbz	r0, 599a <log_is_strdup+0x16>
    5986:	4b05      	ldr	r3, [pc, #20]	; (599c <log_is_strdup+0x18>)
    5988:	4298      	cmp	r0, r3
    598a:	d305      	bcc.n	5998 <log_is_strdup+0x14>
    598c:	33a0      	adds	r3, #160	; 0xa0
    598e:	4298      	cmp	r0, r3
    5990:	bf2c      	ite	cs
    5992:	2000      	movcs	r0, #0
    5994:	2001      	movcc	r0, #1
    5996:	4770      	bx	lr
    5998:	2000      	movs	r0, #0
}
    599a:	4770      	bx	lr
    599c:	20004540 	.word	0x20004540

000059a0 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    59a0:	4b43      	ldr	r3, [pc, #268]	; (5ab0 <z_impl_log_process+0x110>)
    59a2:	781b      	ldrb	r3, [r3, #0]
{
    59a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59a8:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    59aa:	b903      	cbnz	r3, 59ae <z_impl_log_process+0xe>
    59ac:	b300      	cbz	r0, 59f0 <z_impl_log_process+0x50>
	msg = get_msg();
    59ae:	f7ff ff45 	bl	583c <get_msg>
	if (msg.msg) {
    59b2:	4605      	mov	r5, r0
    59b4:	b178      	cbz	r0, 59d6 <z_impl_log_process+0x36>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    59b6:	f3bf 8f5b 	dmb	ish
    59ba:	4b3e      	ldr	r3, [pc, #248]	; (5ab4 <z_impl_log_process+0x114>)
    59bc:	e853 2f00 	ldrex	r2, [r3]
    59c0:	3a01      	subs	r2, #1
    59c2:	e843 2100 	strex	r1, r2, [r3]
    59c6:	2900      	cmp	r1, #0
    59c8:	d1f8      	bne.n	59bc <z_impl_log_process+0x1c>
    59ca:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    59ce:	b19c      	cbz	r4, 59f8 <z_impl_log_process+0x58>
			log_msg_put(msg.msg);
    59d0:	4628      	mov	r0, r5
    59d2:	f017 f892 	bl	1cafa <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    59d6:	b92c      	cbnz	r4, 59e4 <z_impl_log_process+0x44>
	return dropped_cnt > 0;
    59d8:	4b37      	ldr	r3, [pc, #220]	; (5ab8 <z_impl_log_process+0x118>)
	if (!bypass && z_log_dropped_pending()) {
    59da:	681b      	ldr	r3, [r3, #0]
    59dc:	2b00      	cmp	r3, #0
    59de:	dd01      	ble.n	59e4 <z_impl_log_process+0x44>
		dropped_notify();
    59e0:	f7ff ff7c 	bl	58dc <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    59e4:	4835      	ldr	r0, [pc, #212]	; (5abc <z_impl_log_process+0x11c>)
    59e6:	f016 ff98 	bl	1c91a <log_list_head_peek>
    59ea:	1e04      	subs	r4, r0, #0
    59ec:	bf18      	it	ne
    59ee:	2401      	movne	r4, #1
}
    59f0:	4620      	mov	r0, r4
    59f2:	b003      	add	sp, #12
    59f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    59f8:	4b31      	ldr	r3, [pc, #196]	; (5ac0 <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    59fa:	781b      	ldrb	r3, [r3, #0]
    59fc:	b9bb      	cbnz	r3, 5a2e <z_impl_log_process+0x8e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    59fe:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    5a00:	07db      	lsls	r3, r3, #31
    5a02:	d414      	bmi.n	5a2e <z_impl_log_process+0x8e>
	msg_str = log_msg_str_get(msg);
    5a04:	f017 f88c 	bl	1cb20 <log_msg_str_get>
    5a08:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5a0a:	4628      	mov	r0, r5
    5a0c:	f017 f853 	bl	1cab6 <log_msg_nargs_get>
    5a10:	4601      	mov	r1, r0
    5a12:	4640      	mov	r0, r8
    5a14:	f7ff fe9a 	bl	574c <z_log_get_s_mask>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5a18:	4b2a      	ldr	r3, [pc, #168]	; (5ac4 <z_impl_log_process+0x124>)
    5a1a:	4a2b      	ldr	r2, [pc, #172]	; (5ac8 <z_impl_log_process+0x128>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
    5a1c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 5adc <z_impl_log_process+0x13c>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5a20:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 5ae0 <z_impl_log_process+0x140>
    5a24:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5a26:	4606      	mov	r6, r0
    5a28:	ea4f 09d3 	mov.w	r9, r3, lsr #3
	while (mask) {
    5a2c:	b936      	cbnz	r6, 5a3c <z_impl_log_process+0x9c>
	return __log_backends_end - __log_backends_start;
    5a2e:	4e27      	ldr	r6, [pc, #156]	; (5acc <z_impl_log_process+0x12c>)
    5a30:	4f27      	ldr	r7, [pc, #156]	; (5ad0 <z_impl_log_process+0x130>)
    5a32:	1bbf      	subs	r7, r7, r6
    5a34:	113f      	asrs	r7, r7, #4
    5a36:	f04f 0800 	mov.w	r8, #0
    5a3a:	e036      	b.n	5aaa <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
    5a3c:	fab6 f786 	clz	r7, r6
    5a40:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    5a44:	4639      	mov	r1, r7
    5a46:	4628      	mov	r0, r5
    5a48:	f017 f838 	bl	1cabc <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    5a4c:	4b21      	ldr	r3, [pc, #132]	; (5ad4 <z_impl_log_process+0x134>)
    5a4e:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    5a50:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    5a52:	d302      	bcc.n	5a5a <z_impl_log_process+0xba>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    5a54:	4b20      	ldr	r3, [pc, #128]	; (5ad8 <z_impl_log_process+0x138>)
    5a56:	4298      	cmp	r0, r3
    5a58:	d316      	bcc.n	5a88 <z_impl_log_process+0xe8>
    5a5a:	4610      	mov	r0, r2
    5a5c:	f7ff ff92 	bl	5984 <log_is_strdup>
    5a60:	b990      	cbnz	r0, 5a88 <z_impl_log_process+0xe8>
    5a62:	4552      	cmp	r2, sl
    5a64:	d010      	beq.n	5a88 <z_impl_log_process+0xe8>
	return msg->hdr.ids.source_id;
    5a66:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    5a68:	f3c1 1189 	ubfx	r1, r1, #6, #10
    5a6c:	f000 f8fe 	bl	5c6c <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5a70:	ea4f 1389 	mov.w	r3, r9, lsl #6
    5a74:	f043 0301 	orr.w	r3, r3, #1
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    5a78:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5a7a:	f8ad 3000 	strh.w	r3, [sp]
    5a7e:	4639      	mov	r1, r7
    5a80:	4643      	mov	r3, r8
    5a82:	4658      	mov	r0, fp
    5a84:	f016 ff98 	bl	1c9b8 <log_3>
		mask &= ~BIT(idx);
    5a88:	2301      	movs	r3, #1
    5a8a:	fa03 f707 	lsl.w	r7, r3, r7
    5a8e:	ea26 0607 	bic.w	r6, r6, r7
    5a92:	e7cb      	b.n	5a2c <z_impl_log_process+0x8c>
	return backend->cb->active;
    5a94:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    5a96:	795b      	ldrb	r3, [r3, #5]
    5a98:	b123      	cbz	r3, 5aa4 <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
    5a9a:	6833      	ldr	r3, [r6, #0]
    5a9c:	4629      	mov	r1, r5
    5a9e:	685b      	ldr	r3, [r3, #4]
    5aa0:	4630      	mov	r0, r6
    5aa2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    5aa4:	f108 0801 	add.w	r8, r8, #1
    5aa8:	3610      	adds	r6, #16
    5aaa:	45b8      	cmp	r8, r7
    5aac:	dbf2      	blt.n	5a94 <z_impl_log_process+0xf4>
    5aae:	e78f      	b.n	59d0 <z_impl_log_process+0x30>
    5ab0:	20001d37 	.word	0x20001d37
    5ab4:	200007b8 	.word	0x200007b8
    5ab8:	200007bc 	.word	0x200007bc
    5abc:	200007c4 	.word	0x200007c4
    5ac0:	20001d38 	.word	0x20001d38
    5ac4:	0001ea20 	.word	0x0001ea20
    5ac8:	0001ea10 	.word	0x0001ea10
    5acc:	0001ea70 	.word	0x0001ea70
    5ad0:	0001ea90 	.word	0x0001ea90
    5ad4:	0001e720 	.word	0x0001e720
    5ad8:	000206b0 	.word	0x000206b0
    5adc:	0001fad2 	.word	0x0001fad2
    5ae0:	0001faec 	.word	0x0001faec

00005ae4 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    5ae4:	4b29      	ldr	r3, [pc, #164]	; (5b8c <msg_finalize+0xa8>)
{
    5ae6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    5ae8:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    5aea:	8141      	strh	r1, [r0, #10]
{
    5aec:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5aee:	4798      	blx	r3
    5af0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5af2:	f04f 0320 	mov.w	r3, #32
    5af6:	f3ef 8511 	mrs	r5, BASEPRI
    5afa:	f383 8812 	msr	BASEPRI_MAX, r3
    5afe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    5b02:	4823      	ldr	r0, [pc, #140]	; (5b90 <msg_finalize+0xac>)
    5b04:	4621      	mov	r1, r4
    5b06:	f016 fefe 	bl	1c906 <log_list_add_tail>
	__asm__ volatile(
    5b0a:	f385 8811 	msr	BASEPRI, r5
    5b0e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5b12:	f3bf 8f5b 	dmb	ish
    5b16:	4b1f      	ldr	r3, [pc, #124]	; (5b94 <msg_finalize+0xb0>)
    5b18:	e853 2f00 	ldrex	r2, [r3]
    5b1c:	3201      	adds	r2, #1
    5b1e:	e843 2100 	strex	r1, r2, [r3]
    5b22:	2900      	cmp	r1, #0
    5b24:	d1f8      	bne.n	5b18 <msg_finalize+0x34>
    5b26:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    5b2a:	4a1b      	ldr	r2, [pc, #108]	; (5b98 <msg_finalize+0xb4>)
    5b2c:	7812      	ldrb	r2, [r2, #0]
    5b2e:	b182      	cbz	r2, 5b52 <msg_finalize+0x6e>
	__asm__ volatile(
    5b30:	f04f 0320 	mov.w	r3, #32
    5b34:	f3ef 8411 	mrs	r4, BASEPRI
    5b38:	f383 8812 	msr	BASEPRI_MAX, r3
    5b3c:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    5b40:	2000      	movs	r0, #0
    5b42:	f7ff ff2d 	bl	59a0 <z_impl_log_process>
	__asm__ volatile(
    5b46:	f384 8811 	msr	BASEPRI, r4
    5b4a:	f3bf 8f6f 	isb	sy
}
    5b4e:	b003      	add	sp, #12
    5b50:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    5b52:	4a12      	ldr	r2, [pc, #72]	; (5b9c <msg_finalize+0xb8>)
    5b54:	681b      	ldr	r3, [r3, #0]
    5b56:	6812      	ldr	r2, [r2, #0]
    5b58:	2a00      	cmp	r2, #0
    5b5a:	d0f8      	beq.n	5b4e <msg_finalize+0x6a>
    5b5c:	2b01      	cmp	r3, #1
    5b5e:	d10a      	bne.n	5b76 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    5b60:	2200      	movs	r2, #0
    5b62:	2300      	movs	r3, #0
    5b64:	e9cd 2300 	strd	r2, r3, [sp]
    5b68:	480d      	ldr	r0, [pc, #52]	; (5ba0 <msg_finalize+0xbc>)
    5b6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5b6e:	2300      	movs	r3, #0
    5b70:	f007 f8bc 	bl	ccec <z_impl_k_timer_start>
    5b74:	e7eb      	b.n	5b4e <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    5b76:	2b0a      	cmp	r3, #10
    5b78:	d1e9      	bne.n	5b4e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    5b7a:	4809      	ldr	r0, [pc, #36]	; (5ba0 <msg_finalize+0xbc>)
    5b7c:	f018 f9cb 	bl	1df16 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    5b80:	4808      	ldr	r0, [pc, #32]	; (5ba4 <msg_finalize+0xc0>)
}
    5b82:	b003      	add	sp, #12
    5b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5b88:	f006 ba02 	b.w	bf90 <z_impl_k_sem_give>
    5b8c:	2000000c 	.word	0x2000000c
    5b90:	200007c4 	.word	0x200007c4
    5b94:	200007b8 	.word	0x200007b8
    5b98:	20001d38 	.word	0x20001d38
    5b9c:	200007e8 	.word	0x200007e8
    5ba0:	200003b0 	.word	0x200003b0
    5ba4:	20000348 	.word	0x20000348

00005ba8 <log_process_thread_func>:
{
    5ba8:	b510      	push	{r4, lr}
	log_init();
    5baa:	f7ff fe1b 	bl	57e4 <log_init>
	return z_impl_z_current_get();
    5bae:	f006 fe6f 	bl	c890 <z_impl_z_current_get>
	proc_tid = process_tid;
    5bb2:	4b0c      	ldr	r3, [pc, #48]	; (5be4 <log_process_thread_func+0x3c>)
    5bb4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    5bb6:	b130      	cbz	r0, 5bc6 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5bb8:	4b0b      	ldr	r3, [pc, #44]	; (5be8 <log_process_thread_func+0x40>)
	    process_tid &&
    5bba:	681b      	ldr	r3, [r3, #0]
    5bbc:	2b09      	cmp	r3, #9
    5bbe:	dd02      	ble.n	5bc6 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5bc0:	480a      	ldr	r0, [pc, #40]	; (5bec <log_process_thread_func+0x44>)
    5bc2:	f006 f9e5 	bl	bf90 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    5bc6:	4c09      	ldr	r4, [pc, #36]	; (5bec <log_process_thread_func+0x44>)
    5bc8:	2000      	movs	r0, #0
    5bca:	f7ff fee9 	bl	59a0 <z_impl_log_process>
		if (log_process(false) == false) {
    5bce:	2800      	cmp	r0, #0
    5bd0:	d1fa      	bne.n	5bc8 <log_process_thread_func+0x20>
    5bd2:	f04f 32ff 	mov.w	r2, #4294967295
    5bd6:	f04f 33ff 	mov.w	r3, #4294967295
    5bda:	4620      	mov	r0, r4
    5bdc:	f006 f9fe 	bl	bfdc <z_impl_k_sem_take>
    5be0:	e7f2      	b.n	5bc8 <log_process_thread_func+0x20>
    5be2:	bf00      	nop
    5be4:	200007e8 	.word	0x200007e8
    5be8:	200007b8 	.word	0x200007b8
    5bec:	20000348 	.word	0x20000348

00005bf0 <z_impl_log_panic>:
{
    5bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    5bf2:	4f0e      	ldr	r7, [pc, #56]	; (5c2c <z_impl_log_panic+0x3c>)
    5bf4:	783d      	ldrb	r5, [r7, #0]
    5bf6:	b975      	cbnz	r5, 5c16 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    5bf8:	4c0d      	ldr	r4, [pc, #52]	; (5c30 <z_impl_log_panic+0x40>)
    5bfa:	4e0e      	ldr	r6, [pc, #56]	; (5c34 <z_impl_log_panic+0x44>)
	log_init();
    5bfc:	f7ff fdf2 	bl	57e4 <log_init>
    5c00:	1b36      	subs	r6, r6, r4
    5c02:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5c04:	42b5      	cmp	r5, r6
    5c06:	db07      	blt.n	5c18 <z_impl_log_panic+0x28>
    5c08:	2000      	movs	r0, #0
    5c0a:	f7ff fec9 	bl	59a0 <z_impl_log_process>
		while (log_process(false) == true) {
    5c0e:	2800      	cmp	r0, #0
    5c10:	d1fa      	bne.n	5c08 <z_impl_log_panic+0x18>
	panic_mode = true;
    5c12:	2301      	movs	r3, #1
    5c14:	703b      	strb	r3, [r7, #0]
}
    5c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    5c18:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5c1a:	795b      	ldrb	r3, [r3, #5]
    5c1c:	b11b      	cbz	r3, 5c26 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5c1e:	6823      	ldr	r3, [r4, #0]
    5c20:	4620      	mov	r0, r4
    5c22:	695b      	ldr	r3, [r3, #20]
    5c24:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5c26:	3501      	adds	r5, #1
    5c28:	3410      	adds	r4, #16
    5c2a:	e7eb      	b.n	5c04 <z_impl_log_panic+0x14>
    5c2c:	20001d38 	.word	0x20001d38
    5c30:	0001ea70 	.word	0x0001ea70
    5c34:	0001ea90 	.word	0x0001ea90

00005c38 <log_free>:
{
    5c38:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    5c3a:	3804      	subs	r0, #4
    5c3c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5c3e:	f3bf 8f5b 	dmb	ish
    5c42:	e850 3f00 	ldrex	r3, [r0]
    5c46:	1e5a      	subs	r2, r3, #1
    5c48:	e840 2100 	strex	r1, r2, [r0]
    5c4c:	2900      	cmp	r1, #0
    5c4e:	d1f8      	bne.n	5c42 <log_free+0xa>
    5c50:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    5c54:	2b01      	cmp	r3, #1
    5c56:	d103      	bne.n	5c60 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    5c58:	4803      	ldr	r0, [pc, #12]	; (5c68 <log_free+0x30>)
    5c5a:	a901      	add	r1, sp, #4
    5c5c:	f017 ff7c 	bl	1db58 <k_mem_slab_free>
}
    5c60:	b003      	add	sp, #12
    5c62:	f85d fb04 	ldr.w	pc, [sp], #4
    5c66:	bf00      	nop
    5c68:	200007cc 	.word	0x200007cc

00005c6c <log_source_name_get>:
    5c6c:	4a04      	ldr	r2, [pc, #16]	; (5c80 <log_source_name_get+0x14>)
    5c6e:	4b05      	ldr	r3, [pc, #20]	; (5c84 <log_source_name_get+0x18>)
    5c70:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    5c72:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    5c76:	bf34      	ite	cc
    5c78:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    5c7c:	2000      	movcs	r0, #0
}
    5c7e:	4770      	bx	lr
    5c80:	0001ea10 	.word	0x0001ea10
    5c84:	0001ea70 	.word	0x0001ea70

00005c88 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    5c88:	4b05      	ldr	r3, [pc, #20]	; (5ca0 <log_backend_enable+0x18>)

	log_backend_id_set(backend, id);
    5c8a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    5c8c:	1ac3      	subs	r3, r0, r3
    5c8e:	111b      	asrs	r3, r3, #4
    5c90:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
    5c92:	7113      	strb	r3, [r2, #4]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
    5c94:	6843      	ldr	r3, [r0, #4]
	backend->cb->active = true;
    5c96:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    5c98:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    5c9a:	715a      	strb	r2, [r3, #5]

	z_log_notify_backend_enabled();
    5c9c:	f7ff bde2 	b.w	5864 <z_log_notify_backend_enabled>
    5ca0:	0001ea70 	.word	0x0001ea70

00005ca4 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5ca4:	2320      	movs	r3, #32
    5ca6:	4902      	ldr	r1, [pc, #8]	; (5cb0 <log_msg_pool_init+0xc>)
    5ca8:	4802      	ldr	r0, [pc, #8]	; (5cb4 <log_msg_pool_init+0x10>)
    5caa:	461a      	mov	r2, r3
    5cac:	f017 bf39 	b.w	1db22 <k_mem_slab_init>
    5cb0:	200045e0 	.word	0x200045e0
    5cb4:	200007ec 	.word	0x200007ec

00005cb8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    5cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    5cba:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5cbc:	4d09      	ldr	r5, [pc, #36]	; (5ce4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    5cbe:	9301      	str	r3, [sp, #4]
    5cc0:	2001      	movs	r0, #1
    5cc2:	f7ff fe6d 	bl	59a0 <z_impl_log_process>
    5cc6:	4604      	mov	r4, r0
			z_log_dropped();
    5cc8:	f7ff fdda 	bl	5880 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5ccc:	2200      	movs	r2, #0
    5cce:	2300      	movs	r3, #0
    5cd0:	a901      	add	r1, sp, #4
    5cd2:	4628      	mov	r0, r5
    5cd4:	f005 ff96 	bl	bc04 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    5cd8:	b108      	cbz	r0, 5cde <log_msg_no_space_handle+0x26>
    5cda:	2c00      	cmp	r4, #0
    5cdc:	d1f0      	bne.n	5cc0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    5cde:	9801      	ldr	r0, [sp, #4]
    5ce0:	b003      	add	sp, #12
    5ce2:	bd30      	pop	{r4, r5, pc}
    5ce4:	200007ec 	.word	0x200007ec

00005ce8 <log_msg_chunk_alloc>:
{
    5ce8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    5cea:	2300      	movs	r3, #0
    5cec:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    5cee:	4807      	ldr	r0, [pc, #28]	; (5d0c <log_msg_chunk_alloc+0x24>)
    5cf0:	2200      	movs	r2, #0
    5cf2:	2300      	movs	r3, #0
    5cf4:	a901      	add	r1, sp, #4
    5cf6:	f005 ff85 	bl	bc04 <k_mem_slab_alloc>
	if (err != 0) {
    5cfa:	b110      	cbz	r0, 5d02 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    5cfc:	f7ff ffdc 	bl	5cb8 <log_msg_no_space_handle>
    5d00:	9001      	str	r0, [sp, #4]
}
    5d02:	9801      	ldr	r0, [sp, #4]
    5d04:	b003      	add	sp, #12
    5d06:	f85d fb04 	ldr.w	pc, [sp], #4
    5d0a:	bf00      	nop
    5d0c:	200007ec 	.word	0x200007ec

00005d10 <msg_free>:
{
    5d10:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5d12:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    5d14:	7a45      	ldrb	r5, [r0, #9]
{
    5d16:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    5d18:	092d      	lsrs	r5, r5, #4
{
    5d1a:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    5d1c:	07d8      	lsls	r0, r3, #31
    5d1e:	d41c      	bmi.n	5d5a <msg_free+0x4a>
    5d20:	b1dd      	cbz	r5, 5d5a <msg_free+0x4a>
		uint32_t smask = 0U;
    5d22:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    5d24:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    5d26:	9801      	ldr	r0, [sp, #4]
    5d28:	4631      	mov	r1, r6
    5d2a:	f016 fec7 	bl	1cabc <log_msg_arg_get>
    5d2e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    5d30:	f7ff fe28 	bl	5984 <log_is_strdup>
    5d34:	b170      	cbz	r0, 5d54 <msg_free+0x44>
				if (smask == 0U) {
    5d36:	b934      	cbnz	r4, 5d46 <msg_free+0x36>
					smask = z_log_get_s_mask(
    5d38:	9b01      	ldr	r3, [sp, #4]
    5d3a:	4629      	mov	r1, r5
    5d3c:	6918      	ldr	r0, [r3, #16]
    5d3e:	f7ff fd05 	bl	574c <z_log_get_s_mask>
					if (smask == 0U) {
    5d42:	4604      	mov	r4, r0
    5d44:	b148      	cbz	r0, 5d5a <msg_free+0x4a>
				if (smask & BIT(i)) {
    5d46:	fa24 f306 	lsr.w	r3, r4, r6
    5d4a:	07d9      	lsls	r1, r3, #31
    5d4c:	d502      	bpl.n	5d54 <msg_free+0x44>
					log_free(buf);
    5d4e:	4638      	mov	r0, r7
    5d50:	f7ff ff72 	bl	5c38 <log_free>
		for (i = 0U; i < nargs; i++) {
    5d54:	3601      	adds	r6, #1
    5d56:	42ae      	cmp	r6, r5
    5d58:	d3e5      	bcc.n	5d26 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    5d5a:	9b01      	ldr	r3, [sp, #4]
    5d5c:	7a1a      	ldrb	r2, [r3, #8]
    5d5e:	0792      	lsls	r2, r2, #30
    5d60:	d504      	bpl.n	5d6c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5d62:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5d64:	4c08      	ldr	r4, [pc, #32]	; (5d88 <msg_free+0x78>)
    5d66:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5d68:	9b03      	ldr	r3, [sp, #12]
    5d6a:	b92b      	cbnz	r3, 5d78 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5d6c:	4806      	ldr	r0, [pc, #24]	; (5d88 <msg_free+0x78>)
    5d6e:	a901      	add	r1, sp, #4
    5d70:	f017 fef2 	bl	1db58 <k_mem_slab_free>
}
    5d74:	b005      	add	sp, #20
    5d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5d78:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5d7a:	a903      	add	r1, sp, #12
    5d7c:	4620      	mov	r0, r4
    5d7e:	f017 feeb 	bl	1db58 <k_mem_slab_free>
		cont = next;
    5d82:	9503      	str	r5, [sp, #12]
    5d84:	e7f0      	b.n	5d68 <msg_free+0x58>
    5d86:	bf00      	nop
    5d88:	200007ec 	.word	0x200007ec

00005d8c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    5d8c:	b40e      	push	{r1, r2, r3}
    5d8e:	b503      	push	{r0, r1, lr}
    5d90:	ab03      	add	r3, sp, #12
    5d92:	4601      	mov	r1, r0
    5d94:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5d98:	4804      	ldr	r0, [pc, #16]	; (5dac <print_formatted+0x20>)
	va_start(args, fmt);
    5d9a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5d9c:	f7ff f8f2 	bl	4f84 <cbvprintf>
	va_end(args);

	return length;
}
    5da0:	b002      	add	sp, #8
    5da2:	f85d eb04 	ldr.w	lr, [sp], #4
    5da6:	b003      	add	sp, #12
    5da8:	4770      	bx	lr
    5daa:	bf00      	nop
    5dac:	0001ce21 	.word	0x0001ce21

00005db0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    5db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5db4:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5db6:	f011 0602 	ands.w	r6, r1, #2
{
    5dba:	9205      	str	r2, [sp, #20]
    5dbc:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    5dc0:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    5dc4:	4607      	mov	r7, r0
    5dc6:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5dc8:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5dcc:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5dd0:	d006      	beq.n	5de0 <prefix_print+0x30>
	if (!format) {
    5dd2:	f011 0f44 	tst.w	r1, #68	; 0x44
    5dd6:	d138      	bne.n	5e4a <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    5dd8:	4932      	ldr	r1, [pc, #200]	; (5ea4 <prefix_print+0xf4>)
    5dda:	f7ff ffd7 	bl	5d8c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    5dde:	4606      	mov	r6, r0
	if (color) {
    5de0:	f1ba 0f00 	cmp.w	sl, #0
    5de4:	d00a      	beq.n	5dfc <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    5de6:	4b30      	ldr	r3, [pc, #192]	; (5ea8 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
    5de8:	4930      	ldr	r1, [pc, #192]	; (5eac <prefix_print+0xfc>)
		const char *log_color = start && (colors[level] != NULL) ?
    5dea:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    5dee:	4b30      	ldr	r3, [pc, #192]	; (5eb0 <prefix_print+0x100>)
    5df0:	4638      	mov	r0, r7
    5df2:	2a00      	cmp	r2, #0
    5df4:	bf08      	it	eq
    5df6:	461a      	moveq	r2, r3
    5df8:	f7ff ffc8 	bl	5d8c <print_formatted>
	if (level_on) {
    5dfc:	b13d      	cbz	r5, 5e0e <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    5dfe:	4b2d      	ldr	r3, [pc, #180]	; (5eb4 <prefix_print+0x104>)
    5e00:	492d      	ldr	r1, [pc, #180]	; (5eb8 <prefix_print+0x108>)
    5e02:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    5e06:	4638      	mov	r0, r7
    5e08:	f7ff ffc0 	bl	5d8c <print_formatted>
    5e0c:	4605      	mov	r5, r0
	if (source_id >= 0) {
    5e0e:	f1b9 0f00 	cmp.w	r9, #0
    5e12:	db16      	blt.n	5e42 <prefix_print+0x92>
		total += print_formatted(output,
    5e14:	9b05      	ldr	r3, [sp, #20]
    5e16:	2b00      	cmp	r3, #0
    5e18:	d041      	beq.n	5e9e <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5e1a:	2301      	movs	r3, #1
    5e1c:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    5e20:	4b26      	ldr	r3, [pc, #152]	; (5ebc <prefix_print+0x10c>)
    5e22:	4c27      	ldr	r4, [pc, #156]	; (5ec0 <prefix_print+0x110>)
    5e24:	f018 0f10 	tst.w	r8, #16
    5e28:	bf18      	it	ne
    5e2a:	461c      	movne	r4, r3
    5e2c:	4649      	mov	r1, r9
    5e2e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    5e32:	f7ff ff1b 	bl	5c6c <log_source_name_get>
    5e36:	4621      	mov	r1, r4
    5e38:	4602      	mov	r2, r0
    5e3a:	4638      	mov	r0, r7
    5e3c:	f7ff ffa6 	bl	5d8c <print_formatted>
    5e40:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    5e42:	19a8      	adds	r0, r5, r6
    5e44:	b007      	add	sp, #28
    5e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    5e4a:	4b1e      	ldr	r3, [pc, #120]	; (5ec4 <prefix_print+0x114>)
    5e4c:	6819      	ldr	r1, [r3, #0]
    5e4e:	b321      	cbz	r1, 5e9a <prefix_print+0xea>
		timestamp /= timestamp_div;
    5e50:	4b1d      	ldr	r3, [pc, #116]	; (5ec8 <prefix_print+0x118>)
    5e52:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    5e56:	681b      	ldr	r3, [r3, #0]
    5e58:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    5e5c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    5e60:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    5e64:	fbb4 f2fc 	udiv	r2, r4, ip
    5e68:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    5e6c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5e70:	4374      	muls	r4, r6
		mins = seconds / 60U;
    5e72:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5e76:	fbb4 fbf1 	udiv	fp, r4, r1
    5e7a:	fb01 441b 	mls	r4, r1, fp, r4
    5e7e:	4374      	muls	r4, r6
		mins = seconds / 60U;
    5e80:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5e84:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    5e88:	e9cd b101 	strd	fp, r1, [sp, #4]
    5e8c:	fb0e c113 	mls	r1, lr, r3, ip
    5e90:	9100      	str	r1, [sp, #0]
    5e92:	490e      	ldr	r1, [pc, #56]	; (5ecc <prefix_print+0x11c>)
    5e94:	f7ff ff7a 	bl	5d8c <print_formatted>
    5e98:	e7a1      	b.n	5dde <prefix_print+0x2e>
		length = 0;
    5e9a:	4608      	mov	r0, r1
    5e9c:	e79f      	b.n	5dde <prefix_print+0x2e>
		total += print_formatted(output,
    5e9e:	4c08      	ldr	r4, [pc, #32]	; (5ec0 <prefix_print+0x110>)
    5ea0:	e7c4      	b.n	5e2c <prefix_print+0x7c>
    5ea2:	bf00      	nop
    5ea4:	0001fb3e 	.word	0x0001fb3e
    5ea8:	0001f0ac 	.word	0x0001f0ac
    5eac:	000200e3 	.word	0x000200e3
    5eb0:	0001fb30 	.word	0x0001fb30
    5eb4:	0001f0c0 	.word	0x0001f0c0
    5eb8:	0001fb63 	.word	0x0001fb63
    5ebc:	0001fb3a 	.word	0x0001fb3a
    5ec0:	0001fb35 	.word	0x0001fb35
    5ec4:	20000808 	.word	0x20000808
    5ec8:	2000080c 	.word	0x2000080c
    5ecc:	0001fb47 	.word	0x0001fb47

00005ed0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    5ed0:	b538      	push	{r3, r4, r5, lr}
    5ed2:	460c      	mov	r4, r1
	if (color) {
    5ed4:	07e1      	lsls	r1, r4, #31
{
    5ed6:	4605      	mov	r5, r0
	if (color) {
    5ed8:	d503      	bpl.n	5ee2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    5eda:	4a08      	ldr	r2, [pc, #32]	; (5efc <postfix_print+0x2c>)
    5edc:	4908      	ldr	r1, [pc, #32]	; (5f00 <postfix_print+0x30>)
    5ede:	f7ff ff55 	bl	5d8c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5ee2:	06e2      	lsls	r2, r4, #27
    5ee4:	d408      	bmi.n	5ef8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5ee6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5ee8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5eea:	bf4c      	ite	mi
    5eec:	4905      	ldrmi	r1, [pc, #20]	; (5f04 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    5eee:	4906      	ldrpl	r1, [pc, #24]	; (5f08 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    5ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5ef4:	f7ff bf4a 	b.w	5d8c <print_formatted>
}
    5ef8:	bd38      	pop	{r3, r4, r5, pc}
    5efa:	bf00      	nop
    5efc:	0001fb30 	.word	0x0001fb30
    5f00:	000200e3 	.word	0x000200e3
    5f04:	0001fb6a 	.word	0x0001fb6a
    5f08:	0001fb69 	.word	0x0001fb69

00005f0c <hexdump_line_print>:
{
    5f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f10:	461d      	mov	r5, r3
    5f12:	9b08      	ldr	r3, [sp, #32]
    5f14:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5f16:	06da      	lsls	r2, r3, #27
{
    5f18:	4604      	mov	r4, r0
    5f1a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5f1c:	d405      	bmi.n	5f2a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5f1e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5f20:	bf4c      	ite	mi
    5f22:	492b      	ldrmi	r1, [pc, #172]	; (5fd0 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    5f24:	492b      	ldrpl	r1, [pc, #172]	; (5fd4 <hexdump_line_print+0xc8>)
    5f26:	f7ff ff31 	bl	5d8c <print_formatted>
		print_formatted(output, " ");
    5f2a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5fdc <hexdump_line_print+0xd0>
{
    5f2e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    5f32:	45a8      	cmp	r8, r5
    5f34:	db2d      	blt.n	5f92 <hexdump_line_print+0x86>
			print_formatted(output, "   ");
    5f36:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 5fe0 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
    5f3a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 5fe4 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
    5f3e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5fdc <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f42:	2500      	movs	r5, #0
		if (i < length) {
    5f44:	42bd      	cmp	r5, r7
    5f46:	d232      	bcs.n	5fae <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    5f48:	5d72      	ldrb	r2, [r6, r5]
    5f4a:	4649      	mov	r1, r9
    5f4c:	4620      	mov	r0, r4
    5f4e:	f7ff ff1d 	bl	5d8c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f52:	3501      	adds	r5, #1
    5f54:	2d10      	cmp	r5, #16
    5f56:	d123      	bne.n	5fa0 <hexdump_line_print+0x94>
	print_formatted(output, "|");
    5f58:	491f      	ldr	r1, [pc, #124]	; (5fd8 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
    5f5a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 5fdc <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    5f5e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 5fe8 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    5f62:	f8df a088 	ldr.w	sl, [pc, #136]	; 5fec <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    5f66:	4620      	mov	r0, r4
    5f68:	f7ff ff10 	bl	5d8c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f6c:	2500      	movs	r5, #0
		if (i < length) {
    5f6e:	42af      	cmp	r7, r5
    5f70:	d929      	bls.n	5fc6 <hexdump_line_print+0xba>
			char c = (char)data[i];
    5f72:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    5f74:	f812 3009 	ldrb.w	r3, [r2, r9]
    5f78:	f013 0f97 	tst.w	r3, #151	; 0x97
    5f7c:	bf08      	it	eq
    5f7e:	222e      	moveq	r2, #46	; 0x2e
    5f80:	4651      	mov	r1, sl
    5f82:	4620      	mov	r0, r4
    5f84:	f7ff ff02 	bl	5d8c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f88:	3501      	adds	r5, #1
    5f8a:	2d10      	cmp	r5, #16
    5f8c:	d114      	bne.n	5fb8 <hexdump_line_print+0xac>
}
    5f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    5f92:	4649      	mov	r1, r9
    5f94:	4620      	mov	r0, r4
    5f96:	f7ff fef9 	bl	5d8c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5f9a:	f108 0801 	add.w	r8, r8, #1
    5f9e:	e7c8      	b.n	5f32 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5fa0:	076a      	lsls	r2, r5, #29
    5fa2:	d1cf      	bne.n	5f44 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    5fa4:	4651      	mov	r1, sl
    5fa6:	4620      	mov	r0, r4
    5fa8:	f7ff fef0 	bl	5d8c <print_formatted>
    5fac:	e7ca      	b.n	5f44 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    5fae:	4641      	mov	r1, r8
    5fb0:	4620      	mov	r0, r4
    5fb2:	f7ff feeb 	bl	5d8c <print_formatted>
    5fb6:	e7cc      	b.n	5f52 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5fb8:	076b      	lsls	r3, r5, #29
    5fba:	d1d8      	bne.n	5f6e <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5fbc:	4641      	mov	r1, r8
    5fbe:	4620      	mov	r0, r4
    5fc0:	f7ff fee4 	bl	5d8c <print_formatted>
    5fc4:	e7d3      	b.n	5f6e <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5fc6:	4641      	mov	r1, r8
    5fc8:	4620      	mov	r0, r4
    5fca:	f7ff fedf 	bl	5d8c <print_formatted>
    5fce:	e7db      	b.n	5f88 <hexdump_line_print+0x7c>
    5fd0:	0001fb6a 	.word	0x0001fb6a
    5fd4:	0001fb69 	.word	0x0001fb69
    5fd8:	0001fb76 	.word	0x0001fb76
    5fdc:	0001fb74 	.word	0x0001fb74
    5fe0:	0001fb72 	.word	0x0001fb72
    5fe4:	0001fb6c 	.word	0x0001fb6c
    5fe8:	00020575 	.word	0x00020575
    5fec:	0001fb78 	.word	0x0001fb78

00005ff0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5ff4:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    5ff6:	f013 0807 	ands.w	r8, r3, #7
{
    5ffa:	4617      	mov	r7, r2
    5ffc:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5ffe:	7a0a      	ldrb	r2, [r1, #8]
    6000:	4605      	mov	r5, r0
    6002:	460e      	mov	r6, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
    6004:	d021      	beq.n	604a <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    6006:	8949      	ldrh	r1, [r1, #10]
    6008:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    600c:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    6010:	43d2      	mvns	r2, r2
    6012:	e9cd 8300 	strd	r8, r3, [sp]
    6016:	9102      	str	r1, [sp, #8]
    6018:	68f3      	ldr	r3, [r6, #12]
    601a:	f002 0201 	and.w	r2, r2, #1
    601e:	4639      	mov	r1, r7
    6020:	f7ff fec6 	bl	5db0 <prefix_print>
    6024:	4681      	mov	r9, r0
    6026:	7a34      	ldrb	r4, [r6, #8]
    6028:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    602a:	f014 0401 	ands.w	r4, r4, #1
    602e:	d00e      	beq.n	604e <log_output_msg_process+0x5e>
		std_print(msg, output);
    6030:	4629      	mov	r1, r5
    6032:	4630      	mov	r0, r6
    6034:	f016 fd8a 	bl	1cb4c <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    6038:	f1b8 0f00 	cmp.w	r8, #0
    603c:	d02b      	beq.n	6096 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    603e:	4642      	mov	r2, r8
    6040:	4639      	mov	r1, r7
    6042:	4628      	mov	r0, r5
    6044:	f7ff ff44 	bl	5ed0 <postfix_print>
    6048:	e025      	b.n	6096 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    604a:	46c1      	mov	r9, r8
    604c:	e7eb      	b.n	6026 <log_output_msg_process+0x36>
	} else if (raw_string) {
    604e:	f1b8 0f00 	cmp.w	r8, #0
    6052:	d126      	bne.n	60a2 <log_output_msg_process+0xb2>
	size_t offset = 0;
    6054:	4627      	mov	r7, r4
		length = output->size;
    6056:	68eb      	ldr	r3, [r5, #12]
    6058:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    605a:	aa06      	add	r2, sp, #24
    605c:	463b      	mov	r3, r7
    605e:	68a9      	ldr	r1, [r5, #8]
    6060:	4630      	mov	r0, r6
    6062:	f016 fd5f 	bl	1cb24 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    6066:	9a06      	ldr	r2, [sp, #24]
    6068:	686b      	ldr	r3, [r5, #4]
    606a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    606c:	b13a      	cbz	r2, 607e <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    606e:	68ab      	ldr	r3, [r5, #8]
    6070:	4413      	add	r3, r2
    6072:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    6076:	f1a4 030a 	sub.w	r3, r4, #10
    607a:	425c      	negs	r4, r3
    607c:	415c      	adcs	r4, r3
		log_output_flush(output);
    607e:	4628      	mov	r0, r5
    6080:	f016 fec1 	bl	1ce06 <log_output_flush>
		offset += length;
    6084:	9b06      	ldr	r3, [sp, #24]
    6086:	441f      	add	r7, r3
	} while (length > 0);
    6088:	2b00      	cmp	r3, #0
    608a:	d1e4      	bne.n	6056 <log_output_msg_process+0x66>
	if (eol) {
    608c:	b11c      	cbz	r4, 6096 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    608e:	4914      	ldr	r1, [pc, #80]	; (60e0 <log_output_msg_process+0xf0>)
    6090:	4628      	mov	r0, r5
    6092:	f7ff fe7b 	bl	5d8c <print_formatted>
	}

	log_output_flush(output);
    6096:	4628      	mov	r0, r5
    6098:	f016 feb5 	bl	1ce06 <log_output_flush>
}
    609c:	b00a      	add	sp, #40	; 0x28
    609e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
    60a2:	4630      	mov	r0, r6
    60a4:	f016 fd3c 	bl	1cb20 <log_msg_str_get>
    60a8:	490e      	ldr	r1, [pc, #56]	; (60e4 <log_output_msg_process+0xf4>)
    60aa:	4602      	mov	r2, r0
    60ac:	4628      	mov	r0, r5
    60ae:	f7ff fe6d 	bl	5d8c <print_formatted>
		length = sizeof(buf);
    60b2:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    60b6:	aa05      	add	r2, sp, #20
    60b8:	4623      	mov	r3, r4
    60ba:	a906      	add	r1, sp, #24
    60bc:	4630      	mov	r0, r6
		length = sizeof(buf);
    60be:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    60c2:	f016 fd2f 	bl	1cb24 <log_msg_hexdump_data_get>
		if (length) {
    60c6:	9a05      	ldr	r2, [sp, #20]
    60c8:	2a00      	cmp	r2, #0
    60ca:	d0b8      	beq.n	603e <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    60cc:	464b      	mov	r3, r9
    60ce:	9700      	str	r7, [sp, #0]
    60d0:	a906      	add	r1, sp, #24
    60d2:	4628      	mov	r0, r5
    60d4:	f7ff ff1a 	bl	5f0c <hexdump_line_print>
			offset += length;
    60d8:	9b05      	ldr	r3, [sp, #20]
    60da:	441c      	add	r4, r3
		length = sizeof(buf);
    60dc:	e7eb      	b.n	60b6 <log_output_msg_process+0xc6>
    60de:	bf00      	nop
    60e0:	0001fb7b 	.word	0x0001fb7b
    60e4:	000200e3 	.word	0x000200e3

000060e8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    60e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    60ea:	f242 730f 	movw	r3, #9999	; 0x270f
    60ee:	428b      	cmp	r3, r1
    60f0:	bf28      	it	cs
    60f2:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    60f4:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    60f6:	4a0f      	ldr	r2, [pc, #60]	; (6134 <log_output_dropped_process+0x4c>)
{
    60f8:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    60fa:	2105      	movs	r1, #5
    60fc:	4668      	mov	r0, sp
    60fe:	f016 fa47 	bl	1c590 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    6102:	6863      	ldr	r3, [r4, #4]
    6104:	490c      	ldr	r1, [pc, #48]	; (6138 <log_output_dropped_process+0x50>)
    6106:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6108:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    610a:	220b      	movs	r2, #11
    610c:	4628      	mov	r0, r5
    610e:	f016 fd10 	bl	1cb32 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    6112:	6863      	ldr	r3, [r4, #4]
    6114:	4632      	mov	r2, r6
    6116:	4669      	mov	r1, sp
    6118:	4628      	mov	r0, r5
    611a:	685b      	ldr	r3, [r3, #4]
    611c:	f016 fd09 	bl	1cb32 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    6120:	6863      	ldr	r3, [r4, #4]
    6122:	4906      	ldr	r1, [pc, #24]	; (613c <log_output_dropped_process+0x54>)
    6124:	685b      	ldr	r3, [r3, #4]
    6126:	221b      	movs	r2, #27
    6128:	4628      	mov	r0, r5
    612a:	f016 fd02 	bl	1cb32 <buffer_write>
		     output->control_block->ctx);
}
    612e:	b002      	add	sp, #8
    6130:	bd70      	pop	{r4, r5, r6, pc}
    6132:	bf00      	nop
    6134:	0002027d 	.word	0x0002027d
    6138:	0001fbb9 	.word	0x0001fbb9
    613c:	0001fb9d 	.word	0x0001fb9d

00006140 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    6140:	4a08      	ldr	r2, [pc, #32]	; (6164 <log_output_timestamp_freq_set+0x24>)
{
    6142:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    6144:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    6146:	4c08      	ldr	r4, [pc, #32]	; (6168 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    6148:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    614a:	2100      	movs	r1, #0
    614c:	42a0      	cmp	r0, r4
    614e:	d804      	bhi.n	615a <log_output_timestamp_freq_set+0x1a>
    6150:	b101      	cbz	r1, 6154 <log_output_timestamp_freq_set+0x14>
    6152:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    6154:	4b05      	ldr	r3, [pc, #20]	; (616c <log_output_timestamp_freq_set+0x2c>)
    6156:	6018      	str	r0, [r3, #0]
}
    6158:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    615a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    615c:	005b      	lsls	r3, r3, #1
    615e:	2101      	movs	r1, #1
    6160:	e7f4      	b.n	614c <log_output_timestamp_freq_set+0xc>
    6162:	bf00      	nop
    6164:	2000080c 	.word	0x2000080c
    6168:	000f4240 	.word	0x000f4240
    616c:	20000808 	.word	0x20000808

00006170 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    6170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    6172:	4f07      	ldr	r7, [pc, #28]	; (6190 <char_out+0x20>)
{
    6174:	460d      	mov	r5, r1
    6176:	4604      	mov	r4, r0
    6178:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    617a:	42b4      	cmp	r4, r6
    617c:	d101      	bne.n	6182 <char_out+0x12>
#endif
	}

	return length;
}
    617e:	4628      	mov	r0, r5
    6180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    6182:	6838      	ldr	r0, [r7, #0]
    6184:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    6188:	6883      	ldr	r3, [r0, #8]
    618a:	685b      	ldr	r3, [r3, #4]
    618c:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    618e:	e7f4      	b.n	617a <char_out+0xa>
    6190:	20000824 	.word	0x20000824

00006194 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    6194:	4b01      	ldr	r3, [pc, #4]	; (619c <log_backend_uart_init+0x8>)
    6196:	4a02      	ldr	r2, [pc, #8]	; (61a0 <log_backend_uart_init+0xc>)
    6198:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    619a:	4770      	bx	lr
    619c:	20000824 	.word	0x20000824
    61a0:	0001e7e8 	.word	0x0001e7e8

000061a4 <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    61a4:	4801      	ldr	r0, [pc, #4]	; (61ac <panic+0x8>)
    61a6:	f016 be2e 	b.w	1ce06 <log_output_flush>
    61aa:	bf00      	nop
    61ac:	0001f0f0 	.word	0x0001f0f0

000061b0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    61b0:	4801      	ldr	r0, [pc, #4]	; (61b8 <dropped+0x8>)
    61b2:	f7ff bf99 	b.w	60e8 <log_output_dropped_process>
    61b6:	bf00      	nop
    61b8:	0001f0f0 	.word	0x0001f0f0

000061bc <put>:
{
    61bc:	b510      	push	{r4, lr}
	log_msg_get(msg);
    61be:	4608      	mov	r0, r1
    61c0:	460c      	mov	r4, r1
    61c2:	f016 fc6b 	bl	1ca9c <log_msg_get>
	log_output_msg_process(output, msg, flags);
    61c6:	4805      	ldr	r0, [pc, #20]	; (61dc <put+0x20>)
    61c8:	4621      	mov	r1, r4
    61ca:	220f      	movs	r2, #15
    61cc:	f7ff ff10 	bl	5ff0 <log_output_msg_process>
	log_msg_put(msg);
    61d0:	4620      	mov	r0, r4
}
    61d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    61d6:	f016 bc90 	b.w	1cafa <log_msg_put>
    61da:	bf00      	nop
    61dc:	0001f0f0 	.word	0x0001f0f0

000061e0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    61e0:	4b01      	ldr	r3, [pc, #4]	; (61e8 <log_backend_rtt_init+0x8>)
    61e2:	2201      	movs	r2, #1
    61e4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    61e6:	4770      	bx	lr
    61e8:	20001d4a 	.word	0x20001d4a

000061ec <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    61ec:	4b02      	ldr	r3, [pc, #8]	; (61f8 <panic+0xc>)
	log_output_flush(output);
    61ee:	4803      	ldr	r0, [pc, #12]	; (61fc <panic+0x10>)
    61f0:	2201      	movs	r2, #1
    61f2:	701a      	strb	r2, [r3, #0]
    61f4:	f016 be07 	b.w	1ce06 <log_output_flush>
    61f8:	20001d4b 	.word	0x20001d4b
    61fc:	0001f11c 	.word	0x0001f11c

00006200 <dropped>:
	log_output_dropped_process(output, cnt);
    6200:	4801      	ldr	r0, [pc, #4]	; (6208 <dropped+0x8>)
    6202:	f7ff bf71 	b.w	60e8 <log_output_dropped_process>
    6206:	bf00      	nop
    6208:	0001f11c 	.word	0x0001f11c

0000620c <put>:
{
    620c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    620e:	4608      	mov	r0, r1
    6210:	460c      	mov	r4, r1
    6212:	f016 fc43 	bl	1ca9c <log_msg_get>
	log_output_msg_process(output, msg, flags);
    6216:	4805      	ldr	r0, [pc, #20]	; (622c <put+0x20>)
    6218:	4621      	mov	r1, r4
    621a:	220f      	movs	r2, #15
    621c:	f7ff fee8 	bl	5ff0 <log_output_msg_process>
	log_msg_put(msg);
    6220:	4620      	mov	r0, r4
}
    6222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6226:	f016 bc68 	b.w	1cafa <log_msg_put>
    622a:	bf00      	nop
    622c:	0001f11c 	.word	0x0001f11c

00006230 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    6230:	4b05      	ldr	r3, [pc, #20]	; (6248 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    6232:	781b      	ldrb	r3, [r3, #0]
    6234:	b11b      	cbz	r3, 623e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    6236:	f241 3088 	movw	r0, #5000	; 0x1388
    623a:	f017 be5c 	b.w	1def6 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    623e:	20a4      	movs	r0, #164	; 0xa4
    6240:	2100      	movs	r1, #0
    6242:	f006 bb0b 	b.w	c85c <z_impl_k_sleep>
    6246:	bf00      	nop
    6248:	20001d4b 	.word	0x20001d4b

0000624c <data_out_block_mode>:
{
    624c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    6250:	f8df 9094 	ldr.w	r9, [pc, #148]	; 62e8 <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    6254:	f8df a094 	ldr.w	sl, [pc, #148]	; 62ec <data_out_block_mode+0xa0>
{
    6258:	4680      	mov	r8, r0
    625a:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    625c:	2404      	movs	r4, #4
    625e:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
    6260:	f899 5000 	ldrb.w	r5, [r9]
    6264:	b9cd      	cbnz	r5, 629a <data_out_block_mode+0x4e>
    6266:	f04f 33ff 	mov.w	r3, #4294967295
    626a:	f04f 32ff 	mov.w	r2, #4294967295
    626e:	4650      	mov	r0, sl
    6270:	f005 fdca 	bl	be08 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6274:	463a      	mov	r2, r7
    6276:	4641      	mov	r1, r8
    6278:	4628      	mov	r0, r5
    627a:	f005 fadd 	bl	b838 <SEGGER_RTT_WriteSkipNoLock>
    627e:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    6280:	4650      	mov	r0, sl
    6282:	f005 fe3f 	bl	bf04 <z_impl_k_mutex_unlock>
		if (ret) {
    6286:	4d17      	ldr	r5, [pc, #92]	; (62e4 <data_out_block_mode+0x98>)
    6288:	b1fe      	cbz	r6, 62ca <data_out_block_mode+0x7e>
	host_present = true;
    628a:	2301      	movs	r3, #1
    628c:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    628e:	f89b 3000 	ldrb.w	r3, [fp]
    6292:	b96b      	cbnz	r3, 62b0 <data_out_block_mode+0x64>
}
    6294:	4638      	mov	r0, r7
    6296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    629a:	463a      	mov	r2, r7
    629c:	4641      	mov	r1, r8
    629e:	2000      	movs	r0, #0
    62a0:	f005 faca 	bl	b838 <SEGGER_RTT_WriteSkipNoLock>
    62a4:	4606      	mov	r6, r0
    62a6:	e7ee      	b.n	6286 <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
    62a8:	b95c      	cbnz	r4, 62c2 <data_out_block_mode+0x76>
		host_present = false;
    62aa:	702c      	strb	r4, [r5, #0]
    62ac:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    62b0:	2000      	movs	r0, #0
    62b2:	f005 fb0d 	bl	b8d0 <SEGGER_RTT_HasDataUp>
    62b6:	2800      	cmp	r0, #0
    62b8:	d0ec      	beq.n	6294 <data_out_block_mode+0x48>
    62ba:	782b      	ldrb	r3, [r5, #0]
    62bc:	2b00      	cmp	r3, #0
    62be:	d1f3      	bne.n	62a8 <data_out_block_mode+0x5c>
    62c0:	e7e8      	b.n	6294 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
    62c2:	3c01      	subs	r4, #1
    62c4:	f7ff ffb4 	bl	6230 <on_failed_write.part.0>
    62c8:	e7f2      	b.n	62b0 <data_out_block_mode+0x64>
		} else if (host_present) {
    62ca:	782b      	ldrb	r3, [r5, #0]
    62cc:	b113      	cbz	r3, 62d4 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
    62ce:	3c01      	subs	r4, #1
    62d0:	d104      	bne.n	62dc <data_out_block_mode+0x90>
		host_present = false;
    62d2:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    62d4:	782b      	ldrb	r3, [r5, #0]
    62d6:	2b00      	cmp	r3, #0
    62d8:	d1c2      	bne.n	6260 <data_out_block_mode+0x14>
    62da:	e7db      	b.n	6294 <data_out_block_mode+0x48>
    62dc:	f7ff ffa8 	bl	6230 <on_failed_write.part.0>
    62e0:	e7f8      	b.n	62d4 <data_out_block_mode+0x88>
    62e2:	bf00      	nop
    62e4:	20001d4a 	.word	0x20001d4a
    62e8:	20001d4b 	.word	0x20001d4b
    62ec:	20000320 	.word	0x20000320

000062f0 <tty_init>:

	return out_size;
}

int tty_init(struct tty_serial *tty, const struct device *uart_dev)
{
    62f0:	4602      	mov	r2, r0
    62f2:	b510      	push	{r4, lr}
	if (!uart_dev) {
    62f4:	4608      	mov	r0, r1
    62f6:	b199      	cbz	r1, 6320 <tty_init+0x30>
	}

	tty->uart_dev = uart_dev;

	/* We start in unbuffer mode. */
	tty->rx_ringbuf = NULL;
    62f8:	2400      	movs	r4, #0
	tty->tx_ringbuf = NULL;
	tty->tx_ringbuf_sz = 0U;

	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;

	tty->rx_timeout = SYS_FOREVER_MS;
    62fa:	f04f 33ff 	mov.w	r3, #4294967295
	tty->tx_timeout = SYS_FOREVER_MS;
    62fe:	e9c2 4313 	strd	r4, r3, [r2, #76]	; 0x4c
	tty->rx_timeout = SYS_FOREVER_MS;
    6302:	6293      	str	r3, [r2, #40]	; 0x28
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    6304:	688b      	ldr	r3, [r1, #8]
	tty->uart_dev = uart_dev;
    6306:	6011      	str	r1, [r2, #0]
	tty->rx_ringbuf_sz = 0U;
    6308:	e9c2 4407 	strd	r4, r4, [r2, #28]
	tty->tx_ringbuf_sz = 0U;
    630c:	e9c2 4411 	strd	r4, r4, [r2, #68]	; 0x44
	tty->rx_get = tty->rx_put = tty->tx_get = tty->tx_put = 0U;
    6310:	6254      	str	r4, [r2, #36]	; 0x24
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    6312:	b143      	cbz	r3, 6326 <tty_init+0x36>
    6314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6316:	b133      	cbz	r3, 6326 <tty_init+0x36>
		api->irq_callback_set(dev, cb, user_data);
    6318:	4904      	ldr	r1, [pc, #16]	; (632c <tty_init+0x3c>)
    631a:	4798      	blx	r3

	uart_irq_callback_user_data_set(uart_dev, tty_uart_isr, tty);

	return 0;
    631c:	4620      	mov	r0, r4
}
    631e:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6320:	f06f 0012 	mvn.w	r0, #18
    6324:	e7fb      	b.n	631e <tty_init+0x2e>
	return 0;
    6326:	4618      	mov	r0, r3
    6328:	e7f9      	b.n	631e <tty_init+0x2e>
    632a:	bf00      	nop
    632c:	0001cf0d 	.word	0x0001cf0d

00006330 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6332:	4605      	mov	r5, r0
	__asm__ volatile(
    6334:	f04f 0320 	mov.w	r3, #32
    6338:	f3ef 8611 	mrs	r6, BASEPRI
    633c:	f383 8812 	msr	BASEPRI_MAX, r3
    6340:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6344:	4b0b      	ldr	r3, [pc, #44]	; (6374 <pm_state_notify+0x44>)
    6346:	681c      	ldr	r4, [r3, #0]
    6348:	2c00      	cmp	r4, #0
    634a:	bf38      	it	cc
    634c:	2400      	movcc	r4, #0
    634e:	b15c      	cbz	r4, 6368 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    6350:	4f09      	ldr	r7, [pc, #36]	; (6378 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    6352:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    6356:	2d00      	cmp	r5, #0
    6358:	bf08      	it	eq
    635a:	4613      	moveq	r3, r2
		if (callback) {
    635c:	b10b      	cbz	r3, 6362 <pm_state_notify+0x32>
			callback(z_power_state.state);
    635e:	7838      	ldrb	r0, [r7, #0]
    6360:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6362:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6364:	2c00      	cmp	r4, #0
    6366:	d1f4      	bne.n	6352 <pm_state_notify+0x22>
	__asm__ volatile(
    6368:	f386 8811 	msr	BASEPRI, r6
    636c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6372:	bf00      	nop
    6374:	2000083c 	.word	0x2000083c
    6378:	20000844 	.word	0x20000844

0000637c <pm_system_resume>:

void pm_system_resume(void)
{
    637c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    637e:	4b0f      	ldr	r3, [pc, #60]	; (63bc <pm_system_resume+0x40>)
    6380:	681a      	ldr	r2, [r3, #0]
    6382:	b9ba      	cbnz	r2, 63b4 <pm_system_resume+0x38>
		post_ops_done = 1;
    6384:	2201      	movs	r2, #1
    6386:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    6388:	4a0d      	ldr	r2, [pc, #52]	; (63c0 <pm_system_resume+0x44>)
    638a:	ca07      	ldmia	r2, {r0, r1, r2}
    638c:	ab01      	add	r3, sp, #4
    638e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    6392:	4a0c      	ldr	r2, [pc, #48]	; (63c4 <pm_system_resume+0x48>)
    6394:	b14a      	cbz	r2, 63aa <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    6396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    639a:	f016 fe76 	bl	1d08a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    639e:	2000      	movs	r0, #0
	}
}
    63a0:	b005      	add	sp, #20
    63a2:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    63a6:	f7ff bfc3 	b.w	6330 <pm_state_notify>
    63aa:	f382 8811 	msr	BASEPRI, r2
    63ae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    63b2:	e7f4      	b.n	639e <pm_system_resume+0x22>
}
    63b4:	b005      	add	sp, #20
    63b6:	f85d fb04 	ldr.w	pc, [sp], #4
    63ba:	bf00      	nop
    63bc:	20000010 	.word	0x20000010
    63c0:	20000844 	.word	0x20000844
    63c4:	0001d08b 	.word	0x0001d08b

000063c8 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    63c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ca:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    63cc:	466e      	mov	r6, sp
    63ce:	4601      	mov	r1, r0
{
    63d0:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    63d2:	4630      	mov	r0, r6
    63d4:	f016 fe21 	bl	1d01a <pm_policy_next_state>
    63d8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    63dc:	4c17      	ldr	r4, [pc, #92]	; (643c <pm_system_suspend+0x74>)
    63de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    63e2:	7820      	ldrb	r0, [r4, #0]
    63e4:	b340      	cbz	r0, 6438 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    63e6:	4b16      	ldr	r3, [pc, #88]	; (6440 <pm_system_suspend+0x78>)
    63e8:	2100      	movs	r1, #0
    63ea:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    63ec:	1c6b      	adds	r3, r5, #1
    63ee:	d00e      	beq.n	640e <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    63f0:	4814      	ldr	r0, [pc, #80]	; (6444 <pm_system_suspend+0x7c>)
    63f2:	4617      	mov	r7, r2
    63f4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    63f8:	2100      	movs	r1, #0
    63fa:	4a13      	ldr	r2, [pc, #76]	; (6448 <pm_system_suspend+0x80>)
    63fc:	2300      	movs	r3, #0
    63fe:	fbe6 0107 	umlal	r0, r1, r6, r7
    6402:	f7fa fb59 	bl	ab8 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    6406:	2101      	movs	r1, #1
    6408:	1a28      	subs	r0, r5, r0
    640a:	f017 fd54 	bl	1deb6 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    640e:	f005 ff95 	bl	c33c <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    6412:	2001      	movs	r0, #1
    6414:	f7ff ff8c 	bl	6330 <pm_state_notify>
	pm_state_set(z_power_state);
    6418:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    641c:	ab05      	add	r3, sp, #20
    641e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    6422:	4a0a      	ldr	r2, [pc, #40]	; (644c <pm_system_suspend+0x84>)
    6424:	b11a      	cbz	r2, 642e <pm_system_suspend+0x66>
		pm_power_state_set(info);
    6426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    642a:	f016 fe1b 	bl	1d064 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    642e:	f7ff ffa5 	bl	637c <pm_system_resume>
	k_sched_unlock();
    6432:	f006 f95d 	bl	c6f0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    6436:	7820      	ldrb	r0, [r4, #0]
}
    6438:	b009      	add	sp, #36	; 0x24
    643a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    643c:	20000844 	.word	0x20000844
    6440:	20000010 	.word	0x20000010
    6444:	000f423f 	.word	0x000f423f
    6448:	000f4240 	.word	0x000f4240
    644c:	0001d065 	.word	0x0001d065

00006450 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    6450:	4801      	ldr	r0, [pc, #4]	; (6458 <nrf_cc3xx_platform_abort_init+0x8>)
    6452:	f006 bdb5 	b.w	cfc0 <nrf_cc3xx_platform_set_abort>
    6456:	bf00      	nop
    6458:	0001f12c 	.word	0x0001f12c

0000645c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    645c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    645e:	b1d0      	cbz	r0, 6496 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    6460:	6843      	ldr	r3, [r0, #4]
    6462:	2b04      	cmp	r3, #4
    6464:	d111      	bne.n	648a <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6466:	2200      	movs	r2, #0
    6468:	6803      	ldr	r3, [r0, #0]
    646a:	f3bf 8f5b 	dmb	ish
    646e:	e853 1f00 	ldrex	r1, [r3]
    6472:	2901      	cmp	r1, #1
    6474:	d103      	bne.n	647e <mutex_unlock_platform+0x22>
    6476:	e843 2000 	strex	r0, r2, [r3]
    647a:	2800      	cmp	r0, #0
    647c:	d1f7      	bne.n	646e <mutex_unlock_platform+0x12>
    647e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    6482:	4807      	ldr	r0, [pc, #28]	; (64a0 <mutex_unlock_platform+0x44>)
    6484:	bf08      	it	eq
    6486:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    6488:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    648a:	b13b      	cbz	r3, 649c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    648c:	6800      	ldr	r0, [r0, #0]
    648e:	f005 fd39 	bl	bf04 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    6492:	2000      	movs	r0, #0
    6494:	e7f8      	b.n	6488 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    6496:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    649a:	e7f5      	b.n	6488 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    649c:	4801      	ldr	r0, [pc, #4]	; (64a4 <mutex_unlock_platform+0x48>)
    649e:	e7f3      	b.n	6488 <mutex_unlock_platform+0x2c>
    64a0:	ffff8fe9 	.word	0xffff8fe9
    64a4:	ffff8fea 	.word	0xffff8fea

000064a8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    64a8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    64aa:	4604      	mov	r4, r0
    64ac:	b918      	cbnz	r0, 64b6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    64ae:	4b0d      	ldr	r3, [pc, #52]	; (64e4 <mutex_free_platform+0x3c>)
    64b0:	480d      	ldr	r0, [pc, #52]	; (64e8 <mutex_free_platform+0x40>)
    64b2:	685b      	ldr	r3, [r3, #4]
    64b4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    64b6:	6861      	ldr	r1, [r4, #4]
    64b8:	2908      	cmp	r1, #8
    64ba:	d00d      	beq.n	64d8 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    64bc:	f031 0304 	bics.w	r3, r1, #4
    64c0:	d00a      	beq.n	64d8 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    64c2:	f011 0102 	ands.w	r1, r1, #2
    64c6:	d008      	beq.n	64da <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    64c8:	4808      	ldr	r0, [pc, #32]	; (64ec <mutex_free_platform+0x44>)
    64ca:	4621      	mov	r1, r4
    64cc:	f017 fb44 	bl	1db58 <k_mem_slab_free>
        mutex->mutex = NULL;
    64d0:	2300      	movs	r3, #0
    64d2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    64d4:	2300      	movs	r3, #0
    64d6:	6063      	str	r3, [r4, #4]
}
    64d8:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
    64da:	6820      	ldr	r0, [r4, #0]
    64dc:	2214      	movs	r2, #20
    64de:	f017 fecb 	bl	1e278 <memset>
    64e2:	e7f7      	b.n	64d4 <mutex_free_platform+0x2c>
    64e4:	200001a8 	.word	0x200001a8
    64e8:	0001fbec 	.word	0x0001fbec
    64ec:	20000850 	.word	0x20000850

000064f0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    64f0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    64f2:	4604      	mov	r4, r0
    64f4:	b918      	cbnz	r0, 64fe <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    64f6:	4b16      	ldr	r3, [pc, #88]	; (6550 <mutex_init_platform+0x60>)
    64f8:	4816      	ldr	r0, [pc, #88]	; (6554 <mutex_init_platform+0x64>)
    64fa:	685b      	ldr	r3, [r3, #4]
    64fc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    64fe:	6863      	ldr	r3, [r4, #4]
    6500:	2b04      	cmp	r3, #4
    6502:	d023      	beq.n	654c <mutex_init_platform+0x5c>
    6504:	2b08      	cmp	r3, #8
    6506:	d021      	beq.n	654c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    6508:	b9cb      	cbnz	r3, 653e <mutex_init_platform+0x4e>
    650a:	6823      	ldr	r3, [r4, #0]
    650c:	b9bb      	cbnz	r3, 653e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    650e:	4812      	ldr	r0, [pc, #72]	; (6558 <mutex_init_platform+0x68>)
    6510:	f04f 32ff 	mov.w	r2, #4294967295
    6514:	f04f 33ff 	mov.w	r3, #4294967295
    6518:	4621      	mov	r1, r4
    651a:	f005 fb73 	bl	bc04 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    651e:	b908      	cbnz	r0, 6524 <mutex_init_platform+0x34>
    6520:	6823      	ldr	r3, [r4, #0]
    6522:	b91b      	cbnz	r3, 652c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    6524:	4b0a      	ldr	r3, [pc, #40]	; (6550 <mutex_init_platform+0x60>)
    6526:	480d      	ldr	r0, [pc, #52]	; (655c <mutex_init_platform+0x6c>)
    6528:	685b      	ldr	r3, [r3, #4]
    652a:	4798      	blx	r3
    652c:	6820      	ldr	r0, [r4, #0]
    652e:	2214      	movs	r2, #20
    6530:	2100      	movs	r1, #0
    6532:	f017 fea1 	bl	1e278 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    6536:	6863      	ldr	r3, [r4, #4]
    6538:	f043 0302 	orr.w	r3, r3, #2
    653c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    653e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    6540:	f017 fb47 	bl	1dbd2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    6544:	6863      	ldr	r3, [r4, #4]
    6546:	f043 0301 	orr.w	r3, r3, #1
    654a:	6063      	str	r3, [r4, #4]
}
    654c:	bd10      	pop	{r4, pc}
    654e:	bf00      	nop
    6550:	200001a8 	.word	0x200001a8
    6554:	0001fbec 	.word	0x0001fbec
    6558:	20000850 	.word	0x20000850
    655c:	0001fc12 	.word	0x0001fc12

00006560 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6560:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    6562:	b308      	cbz	r0, 65a8 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    6564:	6843      	ldr	r3, [r0, #4]
    6566:	2b04      	cmp	r3, #4
    6568:	d110      	bne.n	658c <mutex_lock_platform+0x2c>
    656a:	2201      	movs	r2, #1
    656c:	6803      	ldr	r3, [r0, #0]
    656e:	f3bf 8f5b 	dmb	ish
    6572:	e853 1f00 	ldrex	r1, [r3]
    6576:	2900      	cmp	r1, #0
    6578:	d103      	bne.n	6582 <mutex_lock_platform+0x22>
    657a:	e843 2000 	strex	r0, r2, [r3]
    657e:	2800      	cmp	r0, #0
    6580:	d1f7      	bne.n	6572 <mutex_lock_platform+0x12>
    6582:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    6586:	d10b      	bne.n	65a0 <mutex_lock_platform+0x40>
    6588:	2000      	movs	r0, #0
}
    658a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    658c:	b153      	cbz	r3, 65a4 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    658e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    6590:	f04f 32ff 	mov.w	r2, #4294967295
    6594:	f04f 33ff 	mov.w	r3, #4294967295
    6598:	f005 fc36 	bl	be08 <z_impl_k_mutex_lock>
        if (ret == 0) {
    659c:	2800      	cmp	r0, #0
    659e:	d0f3      	beq.n	6588 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    65a0:	4803      	ldr	r0, [pc, #12]	; (65b0 <mutex_lock_platform+0x50>)
    65a2:	e7f2      	b.n	658a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    65a4:	4803      	ldr	r0, [pc, #12]	; (65b4 <mutex_lock_platform+0x54>)
    65a6:	e7f0      	b.n	658a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    65a8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    65ac:	e7ed      	b.n	658a <mutex_lock_platform+0x2a>
    65ae:	bf00      	nop
    65b0:	ffff8fe9 	.word	0xffff8fe9
    65b4:	ffff8fea 	.word	0xffff8fea

000065b8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    65b8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    65ba:	4906      	ldr	r1, [pc, #24]	; (65d4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    65bc:	4806      	ldr	r0, [pc, #24]	; (65d8 <nrf_cc3xx_platform_mutex_init+0x20>)
    65be:	2340      	movs	r3, #64	; 0x40
    65c0:	2214      	movs	r2, #20
    65c2:	f017 faae 	bl	1db22 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    65c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    65ca:	4904      	ldr	r1, [pc, #16]	; (65dc <nrf_cc3xx_platform_mutex_init+0x24>)
    65cc:	4804      	ldr	r0, [pc, #16]	; (65e0 <nrf_cc3xx_platform_mutex_init+0x28>)
    65ce:	f006 bd59 	b.w	d084 <nrf_cc3xx_platform_set_mutexes>
    65d2:	bf00      	nop
    65d4:	2000086c 	.word	0x2000086c
    65d8:	20000850 	.word	0x20000850
    65dc:	0001f144 	.word	0x0001f144
    65e0:	0001f134 	.word	0x0001f134

000065e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    65e4:	4901      	ldr	r1, [pc, #4]	; (65ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    65e6:	2210      	movs	r2, #16
	str	r2, [r1]
    65e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    65ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    65ec:	e000ed10 	.word	0xe000ed10

000065f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    65f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    65f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    65f4:	f380 8811 	msr	BASEPRI, r0
	isb
    65f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    65fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6600:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6602:	b662      	cpsie	i
	isb
    6604:	f3bf 8f6f 	isb	sy

	bx	lr
    6608:	4770      	bx	lr
    660a:	bf00      	nop

0000660c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    660c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    660e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6610:	f381 8811 	msr	BASEPRI, r1

	wfe
    6614:	bf20      	wfe

	msr	BASEPRI, r0
    6616:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    661a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    661c:	4770      	bx	lr
    661e:	bf00      	nop

00006620 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6620:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6622:	4606      	mov	r6, r0

	if (esf != NULL) {
    6624:	460c      	mov	r4, r1
    6626:	b301      	cbz	r1, 666a <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    6628:	4b13      	ldr	r3, [pc, #76]	; (6678 <z_arm_fatal_error+0x58>)
    662a:	4d14      	ldr	r5, [pc, #80]	; (667c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    662c:	4814      	ldr	r0, [pc, #80]	; (6680 <z_arm_fatal_error+0x60>)
    662e:	1aed      	subs	r5, r5, r3
    6630:	08ed      	lsrs	r5, r5, #3
    6632:	01ad      	lsls	r5, r5, #6
    6634:	f045 0501 	orr.w	r5, r5, #1
    6638:	f8ad 5000 	strh.w	r5, [sp]
    663c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    6640:	6809      	ldr	r1, [r1, #0]
    6642:	f016 f9b9 	bl	1c9b8 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6646:	f8ad 5000 	strh.w	r5, [sp]
    664a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    664e:	68e1      	ldr	r1, [r4, #12]
    6650:	480c      	ldr	r0, [pc, #48]	; (6684 <z_arm_fatal_error+0x64>)
    6652:	f016 f9b1 	bl	1c9b8 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6656:	69e1      	ldr	r1, [r4, #28]
    6658:	480b      	ldr	r0, [pc, #44]	; (6688 <z_arm_fatal_error+0x68>)
    665a:	462a      	mov	r2, r5
    665c:	f016 f97f 	bl	1c95e <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6660:	69a1      	ldr	r1, [r4, #24]
    6662:	480a      	ldr	r0, [pc, #40]	; (668c <z_arm_fatal_error+0x6c>)
    6664:	462a      	mov	r2, r5
    6666:	f016 f97a 	bl	1c95e <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    666a:	4621      	mov	r1, r4
    666c:	4630      	mov	r0, r6
}
    666e:	b002      	add	sp, #8
    6670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    6674:	f005 b982 	b.w	b97c <z_fatal_error>
    6678:	0001ea10 	.word	0x0001ea10
    667c:	0001ea30 	.word	0x0001ea30
    6680:	0001fc3f 	.word	0x0001fc3f
    6684:	0001fc6e 	.word	0x0001fc6e
    6688:	0001fc9d 	.word	0x0001fc9d
    668c:	0001fcac 	.word	0x0001fcac

00006690 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6690:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6692:	2b00      	cmp	r3, #0
    6694:	db08      	blt.n	66a8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6696:	2201      	movs	r2, #1
    6698:	f000 001f 	and.w	r0, r0, #31
    669c:	fa02 f000 	lsl.w	r0, r2, r0
    66a0:	095b      	lsrs	r3, r3, #5
    66a2:	4a02      	ldr	r2, [pc, #8]	; (66ac <arch_irq_enable+0x1c>)
    66a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    66a8:	4770      	bx	lr
    66aa:	bf00      	nop
    66ac:	e000e100 	.word	0xe000e100

000066b0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    66b0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    66b2:	2b00      	cmp	r3, #0
    66b4:	db0d      	blt.n	66d2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    66b6:	2201      	movs	r2, #1
    66b8:	095b      	lsrs	r3, r3, #5
    66ba:	f000 001f 	and.w	r0, r0, #31
    66be:	fa02 f000 	lsl.w	r0, r2, r0
    66c2:	3320      	adds	r3, #32
    66c4:	4a03      	ldr	r2, [pc, #12]	; (66d4 <arch_irq_disable+0x24>)
    66c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    66ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    66ce:	f3bf 8f6f 	isb	sy
}
    66d2:	4770      	bx	lr
    66d4:	e000e100 	.word	0xe000e100

000066d8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    66d8:	4b05      	ldr	r3, [pc, #20]	; (66f0 <arch_irq_is_enabled+0x18>)
    66da:	0942      	lsrs	r2, r0, #5
    66dc:	f000 001f 	and.w	r0, r0, #31
    66e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    66e4:	2301      	movs	r3, #1
    66e6:	fa03 f000 	lsl.w	r0, r3, r0
}
    66ea:	4010      	ands	r0, r2
    66ec:	4770      	bx	lr
    66ee:	bf00      	nop
    66f0:	e000e100 	.word	0xe000e100

000066f4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    66f4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    66f6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    66f8:	bfa8      	it	ge
    66fa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    66fe:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6702:	bfb8      	it	lt
    6704:	4b06      	ldrlt	r3, [pc, #24]	; (6720 <z_arm_irq_priority_set+0x2c>)
    6706:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    670a:	bfac      	ite	ge
    670c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6710:	f000 000f 	andlt.w	r0, r0, #15
    6714:	b2c9      	uxtb	r1, r1
    6716:	bfb4      	ite	lt
    6718:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    671a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    671e:	4770      	bx	lr
    6720:	e000ed14 	.word	0xe000ed14

00006724 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6724:	bf30      	wfi
    b z_SysNmiOnReset
    6726:	f7ff bffd 	b.w	6724 <z_SysNmiOnReset>
    672a:	bf00      	nop

0000672c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    672c:	4a0b      	ldr	r2, [pc, #44]	; (675c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    672e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6730:	4b0b      	ldr	r3, [pc, #44]	; (6760 <z_arm_prep_c+0x34>)
    6732:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6736:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    673c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6740:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6744:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    674c:	f005 f9ba 	bl	bac4 <z_bss_zero>
	z_data_copy();
    6750:	f006 f918 	bl	c984 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6754:	f000 fb24 	bl	6da0 <z_arm_interrupt_init>
	z_cstart();
    6758:	f005 f9be 	bl	bad8 <z_cstart>
    675c:	00000000 	.word	0x00000000
    6760:	e000ed00 	.word	0xe000ed00

00006764 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6764:	4a09      	ldr	r2, [pc, #36]	; (678c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6766:	490a      	ldr	r1, [pc, #40]	; (6790 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    6768:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    676a:	6809      	ldr	r1, [r1, #0]
    676c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    676e:	4909      	ldr	r1, [pc, #36]	; (6794 <arch_swap+0x30>)
	_current->arch.basepri = key;
    6770:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6772:	684b      	ldr	r3, [r1, #4]
    6774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6778:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    677a:	2300      	movs	r3, #0
    677c:	f383 8811 	msr	BASEPRI, r3
    6780:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6784:	6893      	ldr	r3, [r2, #8]
}
    6786:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    6788:	4770      	bx	lr
    678a:	bf00      	nop
    678c:	200011d0 	.word	0x200011d0
    6790:	0001f428 	.word	0x0001f428
    6794:	e000ed00 	.word	0xe000ed00

00006798 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6798:	4912      	ldr	r1, [pc, #72]	; (67e4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    679a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    679c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    67a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    67a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    67a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    67aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    67ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    67b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    67b4:	4f0c      	ldr	r7, [pc, #48]	; (67e8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    67b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    67ba:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    67bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    67be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    67c0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    67c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    67c4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    67c6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    67ca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    67cc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    67ce:	f000 fb7d 	bl	6ecc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    67d2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    67d6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    67da:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    67de:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    67e2:	4770      	bx	lr
    ldr r1, =_kernel
    67e4:	200011d0 	.word	0x200011d0
    ldr v4, =_SCS_ICSR
    67e8:	e000ed04 	.word	0xe000ed04

000067ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    67ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    67f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    67f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    67f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    67fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    67fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6800:	2902      	cmp	r1, #2
    beq _oops
    6802:	d0ff      	beq.n	6804 <_oops>

00006804 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    6804:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    6806:	f016 fc11 	bl	1d02c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    680a:	bd01      	pop	{r0, pc}

0000680c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    680c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6810:	9b00      	ldr	r3, [sp, #0]
    6812:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    6816:	490a      	ldr	r1, [pc, #40]	; (6840 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6818:	9b01      	ldr	r3, [sp, #4]
    681a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    681e:	9b02      	ldr	r3, [sp, #8]
    6820:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6824:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    682c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6830:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6834:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    6836:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6838:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    683a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    683c:	4770      	bx	lr
    683e:	bf00      	nop
    6840:	0001c701 	.word	0x0001c701

00006844 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    6844:	4a0b      	ldr	r2, [pc, #44]	; (6874 <z_check_thread_stack_fail+0x30>)
{
    6846:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    6848:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    684a:	b190      	cbz	r0, 6872 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    684c:	f113 0f16 	cmn.w	r3, #22
    6850:	6e80      	ldr	r0, [r0, #104]	; 0x68
    6852:	d005      	beq.n	6860 <z_check_thread_stack_fail+0x1c>
    6854:	f1a0 0220 	sub.w	r2, r0, #32
    6858:	429a      	cmp	r2, r3
    685a:	d806      	bhi.n	686a <z_check_thread_stack_fail+0x26>
    685c:	4283      	cmp	r3, r0
    685e:	d204      	bcs.n	686a <z_check_thread_stack_fail+0x26>
    6860:	4281      	cmp	r1, r0
    6862:	bf2c      	ite	cs
    6864:	2100      	movcs	r1, #0
    6866:	2101      	movcc	r1, #1
    6868:	e000      	b.n	686c <z_check_thread_stack_fail+0x28>
    686a:	2100      	movs	r1, #0
    686c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    686e:	bf08      	it	eq
    6870:	2000      	moveq	r0, #0
}
    6872:	4770      	bx	lr
    6874:	200011d0 	.word	0x200011d0

00006878 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6878:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    687a:	4b09      	ldr	r3, [pc, #36]	; (68a0 <arch_switch_to_main_thread+0x28>)
    687c:	6098      	str	r0, [r3, #8]
{
    687e:	460d      	mov	r5, r1
    6880:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    6882:	f000 fb23 	bl	6ecc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6886:	4620      	mov	r0, r4
    6888:	f385 8809 	msr	PSP, r5
    688c:	2100      	movs	r1, #0
    688e:	b663      	cpsie	if
    6890:	f381 8811 	msr	BASEPRI, r1
    6894:	f3bf 8f6f 	isb	sy
    6898:	2200      	movs	r2, #0
    689a:	2300      	movs	r3, #0
    689c:	f015 ff30 	bl	1c700 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    68a0:	200011d0 	.word	0x200011d0

000068a4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    68a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    68a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    68a8:	4a0b      	ldr	r2, [pc, #44]	; (68d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    68aa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    68ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    68ae:	bf1e      	ittt	ne
	movne	r1, #0
    68b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    68b2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    68b4:	f017 f986 	blne	1dbc4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    68b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    68ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    68be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    68c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    68c6:	4905      	ldr	r1, [pc, #20]	; (68dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    68c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    68ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    68cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    68ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    68d2:	4903      	ldr	r1, [pc, #12]	; (68e0 <_isr_wrapper+0x3c>)
	bx r1
    68d4:	4708      	bx	r1
    68d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    68d8:	200011d0 	.word	0x200011d0
	ldr r1, =_sw_isr_table
    68dc:	0001e890 	.word	0x0001e890
	ldr r1, =z_arm_int_exit
    68e0:	000068e5 	.word	0x000068e5

000068e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    68e4:	4b04      	ldr	r3, [pc, #16]	; (68f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    68e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    68e8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    68ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    68ec:	d003      	beq.n	68f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    68ee:	4903      	ldr	r1, [pc, #12]	; (68fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    68f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    68f4:	600a      	str	r2, [r1, #0]

000068f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    68f6:	4770      	bx	lr
	ldr r3, =_kernel
    68f8:	200011d0 	.word	0x200011d0
	ldr r1, =_SCS_ICSR
    68fc:	e000ed04 	.word	0xe000ed04

00006900 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    6900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6904:	4b35      	ldr	r3, [pc, #212]	; (69dc <mem_manage_fault+0xdc>)
    6906:	4c36      	ldr	r4, [pc, #216]	; (69e0 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6908:	4d36      	ldr	r5, [pc, #216]	; (69e4 <mem_manage_fault+0xe4>)
    690a:	1ae4      	subs	r4, r4, r3
    690c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    690e:	01a4      	lsls	r4, r4, #6
    6910:	f044 0901 	orr.w	r9, r4, #1
{
    6914:	4607      	mov	r7, r0
    6916:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6918:	4833      	ldr	r0, [pc, #204]	; (69e8 <mem_manage_fault+0xe8>)
    691a:	4649      	mov	r1, r9
{
    691c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    691e:	f016 f811 	bl	1c944 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6922:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6924:	06d3      	lsls	r3, r2, #27
    6926:	d503      	bpl.n	6930 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6928:	4830      	ldr	r0, [pc, #192]	; (69ec <mem_manage_fault+0xec>)
    692a:	4649      	mov	r1, r9
    692c:	f016 f80a 	bl	1c944 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6930:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6932:	0718      	lsls	r0, r3, #28
    6934:	d504      	bpl.n	6940 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    6936:	482e      	ldr	r0, [pc, #184]	; (69f0 <mem_manage_fault+0xf0>)
    6938:	f044 0101 	orr.w	r1, r4, #1
    693c:	f016 f802 	bl	1c944 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6940:	4d28      	ldr	r5, [pc, #160]	; (69e4 <mem_manage_fault+0xe4>)
    6942:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6944:	0799      	lsls	r1, r3, #30
    6946:	d423      	bmi.n	6990 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    6948:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    694c:	4d25      	ldr	r5, [pc, #148]	; (69e4 <mem_manage_fault+0xe4>)
    694e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6950:	07d3      	lsls	r3, r2, #31
    6952:	d504      	bpl.n	695e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    6954:	4827      	ldr	r0, [pc, #156]	; (69f4 <mem_manage_fault+0xf4>)
    6956:	f044 0101 	orr.w	r1, r4, #1
    695a:	f015 fff3 	bl	1c944 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    695e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6960:	0698      	lsls	r0, r3, #26
    6962:	d504      	bpl.n	696e <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    6964:	4824      	ldr	r0, [pc, #144]	; (69f8 <mem_manage_fault+0xf8>)
    6966:	f044 0101 	orr.w	r1, r4, #1
    696a:	f015 ffeb 	bl	1c944 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    696e:	4b1d      	ldr	r3, [pc, #116]	; (69e4 <mem_manage_fault+0xe4>)
    6970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6972:	06d1      	lsls	r1, r2, #27
    6974:	d424      	bmi.n	69c0 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6978:	0792      	lsls	r2, r2, #30
    697a:	d421      	bmi.n	69c0 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    697c:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    697e:	4a19      	ldr	r2, [pc, #100]	; (69e4 <mem_manage_fault+0xe4>)
    6980:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6982:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6986:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    6988:	2300      	movs	r3, #0
    698a:	7033      	strb	r3, [r6, #0]

	return reason;
}
    698c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    6990:	f044 0a01 	orr.w	sl, r4, #1
    6994:	4819      	ldr	r0, [pc, #100]	; (69fc <mem_manage_fault+0xfc>)
    6996:	4651      	mov	r1, sl
    6998:	f015 ffd4 	bl	1c944 <log_0>
		uint32_t temp = SCB->MMFAR;
    699c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    69a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69a2:	061a      	lsls	r2, r3, #24
    69a4:	d5d0      	bpl.n	6948 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    69a6:	4816      	ldr	r0, [pc, #88]	; (6a00 <mem_manage_fault+0x100>)
    69a8:	4652      	mov	r2, sl
    69aa:	4649      	mov	r1, r9
    69ac:	f015 ffd7 	bl	1c95e <log_1>
			if (from_hard_fault != 0) {
    69b0:	f1b8 0f00 	cmp.w	r8, #0
    69b4:	d0ca      	beq.n	694c <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    69b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    69b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    69bc:	62ab      	str	r3, [r5, #40]	; 0x28
    69be:	e7c5      	b.n	694c <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    69c0:	685b      	ldr	r3, [r3, #4]
    69c2:	051b      	lsls	r3, r3, #20
    69c4:	d5da      	bpl.n	697c <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    69c6:	4639      	mov	r1, r7
    69c8:	4648      	mov	r0, r9
    69ca:	f7ff ff3b 	bl	6844 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    69ce:	2800      	cmp	r0, #0
    69d0:	d0d4      	beq.n	697c <mem_manage_fault+0x7c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    69d2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    69d6:	2002      	movs	r0, #2
    69d8:	e7d1      	b.n	697e <mem_manage_fault+0x7e>
    69da:	bf00      	nop
    69dc:	0001ea10 	.word	0x0001ea10
    69e0:	0001ea30 	.word	0x0001ea30
    69e4:	e000ed00 	.word	0xe000ed00
    69e8:	0001fcda 	.word	0x0001fcda
    69ec:	0001fcf0 	.word	0x0001fcf0
    69f0:	0001fd23 	.word	0x0001fd23
    69f4:	0001fd64 	.word	0x0001fd64
    69f8:	0001fd83 	.word	0x0001fd83
    69fc:	0001fd36 	.word	0x0001fd36
    6a00:	0001fd4e 	.word	0x0001fd4e

00006a04 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6a04:	b570      	push	{r4, r5, r6, lr}
    6a06:	4b23      	ldr	r3, [pc, #140]	; (6a94 <usage_fault.isra.0+0x90>)
    6a08:	4c23      	ldr	r4, [pc, #140]	; (6a98 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6a0a:	4d24      	ldr	r5, [pc, #144]	; (6a9c <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    6a0c:	4824      	ldr	r0, [pc, #144]	; (6aa0 <usage_fault.isra.0+0x9c>)
    6a0e:	1ae4      	subs	r4, r4, r3
    6a10:	08e4      	lsrs	r4, r4, #3
    6a12:	01a4      	lsls	r4, r4, #6
    6a14:	f044 0601 	orr.w	r6, r4, #1
    6a18:	4631      	mov	r1, r6
    6a1a:	f015 ff93 	bl	1c944 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6a1e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6a20:	0193      	lsls	r3, r2, #6
    6a22:	d503      	bpl.n	6a2c <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    6a24:	481f      	ldr	r0, [pc, #124]	; (6aa4 <usage_fault.isra.0+0xa0>)
    6a26:	4631      	mov	r1, r6
    6a28:	f015 ff8c 	bl	1c944 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6a2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a2e:	01dd      	lsls	r5, r3, #7
    6a30:	d504      	bpl.n	6a3c <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    6a32:	481d      	ldr	r0, [pc, #116]	; (6aa8 <usage_fault.isra.0+0xa4>)
    6a34:	f044 0101 	orr.w	r1, r4, #1
    6a38:	f015 ff84 	bl	1c944 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6a3c:	4d17      	ldr	r5, [pc, #92]	; (6a9c <usage_fault.isra.0+0x98>)
    6a3e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6a40:	0310      	lsls	r0, r2, #12
    6a42:	d504      	bpl.n	6a4e <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    6a44:	4819      	ldr	r0, [pc, #100]	; (6aac <usage_fault.isra.0+0xa8>)
    6a46:	f044 0101 	orr.w	r1, r4, #1
    6a4a:	f015 ff7b 	bl	1c944 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6a4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a50:	0359      	lsls	r1, r3, #13
    6a52:	d504      	bpl.n	6a5e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6a54:	4816      	ldr	r0, [pc, #88]	; (6ab0 <usage_fault.isra.0+0xac>)
    6a56:	f044 0101 	orr.w	r1, r4, #1
    6a5a:	f015 ff73 	bl	1c944 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6a5e:	4d0f      	ldr	r5, [pc, #60]	; (6a9c <usage_fault.isra.0+0x98>)
    6a60:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6a62:	0392      	lsls	r2, r2, #14
    6a64:	d504      	bpl.n	6a70 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6a66:	4813      	ldr	r0, [pc, #76]	; (6ab4 <usage_fault.isra.0+0xb0>)
    6a68:	f044 0101 	orr.w	r1, r4, #1
    6a6c:	f015 ff6a 	bl	1c944 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6a70:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6a72:	03db      	lsls	r3, r3, #15
    6a74:	d504      	bpl.n	6a80 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6a76:	4810      	ldr	r0, [pc, #64]	; (6ab8 <usage_fault.isra.0+0xb4>)
    6a78:	f044 0101 	orr.w	r1, r4, #1
    6a7c:	f015 ff62 	bl	1c944 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6a80:	4a06      	ldr	r2, [pc, #24]	; (6a9c <usage_fault.isra.0+0x98>)
    6a82:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6a84:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6a88:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6a8c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6a8e:	2000      	movs	r0, #0
    6a90:	bd70      	pop	{r4, r5, r6, pc}
    6a92:	bf00      	nop
    6a94:	0001ea10 	.word	0x0001ea10
    6a98:	0001ea30 	.word	0x0001ea30
    6a9c:	e000ed00 	.word	0xe000ed00
    6aa0:	0001fdb2 	.word	0x0001fdb2
    6aa4:	0001fdca 	.word	0x0001fdca
    6aa8:	0001fddd 	.word	0x0001fddd
    6aac:	0001fdf7 	.word	0x0001fdf7
    6ab0:	0001fe15 	.word	0x0001fe15
    6ab4:	0001fe3a 	.word	0x0001fe3a
    6ab8:	0001fe54 	.word	0x0001fe54

00006abc <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ac0:	4b2a      	ldr	r3, [pc, #168]	; (6b6c <bus_fault.isra.0+0xb0>)
    6ac2:	4c2b      	ldr	r4, [pc, #172]	; (6b70 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6ac4:	4d2b      	ldr	r5, [pc, #172]	; (6b74 <bus_fault.isra.0+0xb8>)
    6ac6:	1ae4      	subs	r4, r4, r3
    6ac8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    6aca:	01a4      	lsls	r4, r4, #6
    6acc:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6ad0:	4607      	mov	r7, r0
    6ad2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6ad4:	4828      	ldr	r0, [pc, #160]	; (6b78 <bus_fault.isra.0+0xbc>)
    6ad6:	4641      	mov	r1, r8
    6ad8:	f015 ff34 	bl	1c944 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6adc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    6ade:	04d1      	lsls	r1, r2, #19
    6ae0:	d503      	bpl.n	6aea <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    6ae2:	4826      	ldr	r0, [pc, #152]	; (6b7c <bus_fault.isra.0+0xc0>)
    6ae4:	4641      	mov	r1, r8
    6ae6:	f015 ff2d 	bl	1c944 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6aea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6aec:	051a      	lsls	r2, r3, #20
    6aee:	d504      	bpl.n	6afa <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    6af0:	4823      	ldr	r0, [pc, #140]	; (6b80 <bus_fault.isra.0+0xc4>)
    6af2:	f044 0101 	orr.w	r1, r4, #1
    6af6:	f015 ff25 	bl	1c944 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6afa:	4d1e      	ldr	r5, [pc, #120]	; (6b74 <bus_fault.isra.0+0xb8>)
    6afc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6afe:	059b      	lsls	r3, r3, #22
    6b00:	d512      	bpl.n	6b28 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    6b02:	f044 0801 	orr.w	r8, r4, #1
    6b06:	481f      	ldr	r0, [pc, #124]	; (6b84 <bus_fault.isra.0+0xc8>)
    6b08:	4641      	mov	r1, r8
    6b0a:	f015 ff1b 	bl	1c944 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    6b0e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6b10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b12:	0418      	lsls	r0, r3, #16
    6b14:	d508      	bpl.n	6b28 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6b16:	481c      	ldr	r0, [pc, #112]	; (6b88 <bus_fault.isra.0+0xcc>)
    6b18:	4642      	mov	r2, r8
    6b1a:	f015 ff20 	bl	1c95e <log_1>
			if (from_hard_fault != 0) {
    6b1e:	b11f      	cbz	r7, 6b28 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6b20:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6b26:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6b28:	4d12      	ldr	r5, [pc, #72]	; (6b74 <bus_fault.isra.0+0xb8>)
    6b2a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b2c:	0559      	lsls	r1, r3, #21
    6b2e:	d504      	bpl.n	6b3a <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    6b30:	4816      	ldr	r0, [pc, #88]	; (6b8c <bus_fault.isra.0+0xd0>)
    6b32:	f044 0101 	orr.w	r1, r4, #1
    6b36:	f015 ff05 	bl	1c944 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6b3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b3c:	05da      	lsls	r2, r3, #23
    6b3e:	d50d      	bpl.n	6b5c <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    6b40:	4813      	ldr	r0, [pc, #76]	; (6b90 <bus_fault.isra.0+0xd4>)
    6b42:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6b46:	f015 fefd 	bl	1c944 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6b4a:	4a0a      	ldr	r2, [pc, #40]	; (6b74 <bus_fault.isra.0+0xb8>)
    6b4c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6b4e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6b50:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6b54:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6b56:	7030      	strb	r0, [r6, #0]
}
    6b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6b5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6b5e:	049b      	lsls	r3, r3, #18
    6b60:	d5f3      	bpl.n	6b4a <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6b62:	480c      	ldr	r0, [pc, #48]	; (6b94 <bus_fault.isra.0+0xd8>)
    6b64:	f044 0101 	orr.w	r1, r4, #1
    6b68:	e7ed      	b.n	6b46 <bus_fault.isra.0+0x8a>
    6b6a:	bf00      	nop
    6b6c:	0001ea10 	.word	0x0001ea10
    6b70:	0001ea30 	.word	0x0001ea30
    6b74:	e000ed00 	.word	0xe000ed00
    6b78:	0001fe7f 	.word	0x0001fe7f
    6b7c:	0001fe95 	.word	0x0001fe95
    6b80:	0001fd23 	.word	0x0001fd23
    6b84:	0001fea6 	.word	0x0001fea6
    6b88:	0001febf 	.word	0x0001febf
    6b8c:	0001fed4 	.word	0x0001fed4
    6b90:	0001feef 	.word	0x0001feef
    6b94:	0001fd83 	.word	0x0001fd83

00006b98 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6b9c:	4b68      	ldr	r3, [pc, #416]	; (6d40 <z_arm_fault+0x1a8>)
    6b9e:	685e      	ldr	r6, [r3, #4]
{
    6ba0:	b08a      	sub	sp, #40	; 0x28
    6ba2:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6ba4:	f3c6 0408 	ubfx	r4, r6, #0, #9
    6ba8:	2700      	movs	r7, #0
    6baa:	f387 8811 	msr	BASEPRI, r7
    6bae:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6bb2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6bb6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6bba:	d10d      	bne.n	6bd8 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6bbc:	f002 030c 	and.w	r3, r2, #12
    6bc0:	2b08      	cmp	r3, #8
    6bc2:	d10b      	bne.n	6bdc <z_arm_fault+0x44>
    6bc4:	495f      	ldr	r1, [pc, #380]	; (6d44 <z_arm_fault+0x1ac>)
    6bc6:	4b60      	ldr	r3, [pc, #384]	; (6d48 <z_arm_fault+0x1b0>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6bc8:	4860      	ldr	r0, [pc, #384]	; (6d4c <z_arm_fault+0x1b4>)
    6bca:	1ac9      	subs	r1, r1, r3
    6bcc:	08c9      	lsrs	r1, r1, #3
    6bce:	0189      	lsls	r1, r1, #6
    6bd0:	f041 0101 	orr.w	r1, r1, #1
    6bd4:	f015 feb6 	bl	1c944 <log_0>
		return NULL;
    6bd8:	463d      	mov	r5, r7
    6bda:	e003      	b.n	6be4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6bdc:	0712      	lsls	r2, r2, #28
    6bde:	d401      	bmi.n	6be4 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    6be0:	4605      	mov	r5, r0
			*nested_exc = true;
    6be2:	2701      	movs	r7, #1
	*recoverable = false;
    6be4:	2300      	movs	r3, #0
    6be6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6bea:	1ee3      	subs	r3, r4, #3
    6bec:	2b09      	cmp	r3, #9
    6bee:	f200 808d 	bhi.w	6d0c <z_arm_fault+0x174>
    6bf2:	e8df f003 	tbb	[pc, r3]
    6bf6:	7a05      	.short	0x7a05
    6bf8:	8b8b777e 	.word	0x8b8b777e
    6bfc:	828b8b8b 	.word	0x828b8b8b
    6c00:	4a51      	ldr	r2, [pc, #324]	; (6d48 <z_arm_fault+0x1b0>)
    6c02:	4e50      	ldr	r6, [pc, #320]	; (6d44 <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    6c04:	4852      	ldr	r0, [pc, #328]	; (6d50 <z_arm_fault+0x1b8>)
    6c06:	1ab6      	subs	r6, r6, r2
    6c08:	08f6      	lsrs	r6, r6, #3
    6c0a:	01b6      	lsls	r6, r6, #6
    6c0c:	f046 0601 	orr.w	r6, r6, #1
    6c10:	4631      	mov	r1, r6
    6c12:	f015 fe97 	bl	1c944 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6c16:	4b4a      	ldr	r3, [pc, #296]	; (6d40 <z_arm_fault+0x1a8>)
    6c18:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    6c1a:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6c1e:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    6c22:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6c26:	d005      	beq.n	6c34 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
    6c28:	484a      	ldr	r0, [pc, #296]	; (6d54 <z_arm_fault+0x1bc>)
    6c2a:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    6c2c:	f015 fe8a 	bl	1c944 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6c30:	2400      	movs	r4, #0
}
    6c32:	e006      	b.n	6c42 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    6c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6c36:	2a00      	cmp	r2, #0
    6c38:	da23      	bge.n	6c82 <z_arm_fault+0xea>
		PR_EXC("  Debug event");
    6c3a:	4847      	ldr	r0, [pc, #284]	; (6d58 <z_arm_fault+0x1c0>)
    6c3c:	4631      	mov	r1, r6
    6c3e:	f015 fe81 	bl	1c944 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6c42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c46:	b9cb      	cbnz	r3, 6c7c <z_arm_fault+0xe4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6c48:	aa02      	add	r2, sp, #8
    6c4a:	f105 0620 	add.w	r6, r5, #32
    6c4e:	6828      	ldr	r0, [r5, #0]
    6c50:	6869      	ldr	r1, [r5, #4]
    6c52:	4613      	mov	r3, r2
    6c54:	c303      	stmia	r3!, {r0, r1}
    6c56:	3508      	adds	r5, #8
    6c58:	42b5      	cmp	r5, r6
    6c5a:	461a      	mov	r2, r3
    6c5c:	d1f7      	bne.n	6c4e <z_arm_fault+0xb6>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6c60:	2f00      	cmp	r7, #0
    6c62:	d067      	beq.n	6d34 <z_arm_fault+0x19c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6c64:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6c68:	b922      	cbnz	r2, 6c74 <z_arm_fault+0xdc>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6c6a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6c6e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6c72:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6c74:	a902      	add	r1, sp, #8
    6c76:	4620      	mov	r0, r4
    6c78:	f7ff fcd2 	bl	6620 <z_arm_fatal_error>
}
    6c7c:	b00a      	add	sp, #40	; 0x28
    6c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6c84:	005b      	lsls	r3, r3, #1
    6c86:	d5dc      	bpl.n	6c42 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    6c88:	4834      	ldr	r0, [pc, #208]	; (6d5c <z_arm_fault+0x1c4>)
    6c8a:	4631      	mov	r1, r6
    6c8c:	f015 fe5a 	bl	1c944 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
    6c90:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    6c92:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    6c96:	f64d 7302 	movw	r3, #57090	; 0xdf02
    6c9a:	429a      	cmp	r2, r3
    6c9c:	d00d      	beq.n	6cba <z_arm_fault+0x122>
		} else if (SCB_MMFSR != 0) {
    6c9e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6ca2:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    6ca6:	781b      	ldrb	r3, [r3, #0]
    6ca8:	b173      	cbz	r3, 6cc8 <z_arm_fault+0x130>
			reason = mem_manage_fault(esf, 1, recoverable);
    6caa:	f10d 0207 	add.w	r2, sp, #7
    6cae:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6cb0:	4628      	mov	r0, r5
    6cb2:	f7ff fe25 	bl	6900 <mem_manage_fault>
    6cb6:	4604      	mov	r4, r0
		break;
    6cb8:	e7c3      	b.n	6c42 <z_arm_fault+0xaa>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    6cba:	6829      	ldr	r1, [r5, #0]
    6cbc:	4828      	ldr	r0, [pc, #160]	; (6d60 <z_arm_fault+0x1c8>)
    6cbe:	4632      	mov	r2, r6
    6cc0:	f015 fe4d 	bl	1c95e <log_1>
			reason = esf->basic.r0;
    6cc4:	682c      	ldr	r4, [r5, #0]
    6cc6:	e7bc      	b.n	6c42 <z_arm_fault+0xaa>
		} else if (SCB_BFSR != 0) {
    6cc8:	4b26      	ldr	r3, [pc, #152]	; (6d64 <z_arm_fault+0x1cc>)
    6cca:	781b      	ldrb	r3, [r3, #0]
    6ccc:	b12b      	cbz	r3, 6cda <z_arm_fault+0x142>
			reason = bus_fault(esf, 1, recoverable);
    6cce:	f10d 0107 	add.w	r1, sp, #7
    6cd2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6cd4:	f7ff fef2 	bl	6abc <bus_fault.isra.0>
    6cd8:	e7ed      	b.n	6cb6 <z_arm_fault+0x11e>
		} else if (SCB_UFSR != 0) {
    6cda:	4b23      	ldr	r3, [pc, #140]	; (6d68 <z_arm_fault+0x1d0>)
    6cdc:	881b      	ldrh	r3, [r3, #0]
    6cde:	b29b      	uxth	r3, r3
    6ce0:	2b00      	cmp	r3, #0
    6ce2:	d0ae      	beq.n	6c42 <z_arm_fault+0xaa>
		reason = usage_fault(esf);
    6ce4:	f7ff fe8e 	bl	6a04 <usage_fault.isra.0>
    6ce8:	e7e5      	b.n	6cb6 <z_arm_fault+0x11e>
		reason = mem_manage_fault(esf, 0, recoverable);
    6cea:	f10d 0207 	add.w	r2, sp, #7
    6cee:	2100      	movs	r1, #0
    6cf0:	e7de      	b.n	6cb0 <z_arm_fault+0x118>
		reason = bus_fault(esf, 0, recoverable);
    6cf2:	f10d 0107 	add.w	r1, sp, #7
    6cf6:	2000      	movs	r0, #0
    6cf8:	e7ec      	b.n	6cd4 <z_arm_fault+0x13c>
    6cfa:	4912      	ldr	r1, [pc, #72]	; (6d44 <z_arm_fault+0x1ac>)
    6cfc:	4b12      	ldr	r3, [pc, #72]	; (6d48 <z_arm_fault+0x1b0>)
	PR_FAULT_INFO(
    6cfe:	481b      	ldr	r0, [pc, #108]	; (6d6c <z_arm_fault+0x1d4>)
    6d00:	1ac9      	subs	r1, r1, r3
    6d02:	08c9      	lsrs	r1, r1, #3
    6d04:	0189      	lsls	r1, r1, #6
    6d06:	f041 0101 	orr.w	r1, r1, #1
    6d0a:	e78f      	b.n	6c2c <z_arm_fault+0x94>
    6d0c:	4a0e      	ldr	r2, [pc, #56]	; (6d48 <z_arm_fault+0x1b0>)
    6d0e:	4b0d      	ldr	r3, [pc, #52]	; (6d44 <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** %s %d) *****",
    6d10:	4817      	ldr	r0, [pc, #92]	; (6d70 <z_arm_fault+0x1d8>)
    6d12:	4918      	ldr	r1, [pc, #96]	; (6d74 <z_arm_fault+0x1dc>)
    6d14:	1a9b      	subs	r3, r3, r2
    6d16:	08db      	lsrs	r3, r3, #3
    6d18:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    6d1c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6d20:	bf18      	it	ne
    6d22:	4601      	movne	r1, r0
    6d24:	f043 0301 	orr.w	r3, r3, #1
    6d28:	4813      	ldr	r0, [pc, #76]	; (6d78 <z_arm_fault+0x1e0>)
    6d2a:	f1a4 0210 	sub.w	r2, r4, #16
    6d2e:	f015 fe2a 	bl	1c986 <log_2>
    6d32:	e77d      	b.n	6c30 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6d34:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6d38:	f023 0301 	bic.w	r3, r3, #1
    6d3c:	e799      	b.n	6c72 <z_arm_fault+0xda>
    6d3e:	bf00      	nop
    6d40:	e000ed00 	.word	0xe000ed00
    6d44:	0001ea30 	.word	0x0001ea30
    6d48:	0001ea10 	.word	0x0001ea10
    6d4c:	0001ff07 	.word	0x0001ff07
    6d50:	0001ff32 	.word	0x0001ff32
    6d54:	0001ff49 	.word	0x0001ff49
    6d58:	0001ff6a 	.word	0x0001ff6a
    6d5c:	0001ff78 	.word	0x0001ff78
    6d60:	0001ff97 	.word	0x0001ff97
    6d64:	e000ed29 	.word	0xe000ed29
    6d68:	e000ed2a 	.word	0xe000ed2a
    6d6c:	0001ffb3 	.word	0x0001ffb3
    6d70:	0001ffec 	.word	0x0001ffec
    6d74:	0001ffd7 	.word	0x0001ffd7
    6d78:	00020005 	.word	0x00020005

00006d7c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6d7c:	4a02      	ldr	r2, [pc, #8]	; (6d88 <z_arm_fault_init+0xc>)
    6d7e:	6953      	ldr	r3, [r2, #20]
    6d80:	f043 0310 	orr.w	r3, r3, #16
    6d84:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6d86:	4770      	bx	lr
    6d88:	e000ed00 	.word	0xe000ed00

00006d8c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6d8c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6d90:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6d94:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6d96:	4672      	mov	r2, lr
	bl z_arm_fault
    6d98:	f7ff fefe 	bl	6b98 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6d9c:	bd01      	pop	{r0, pc}
    6d9e:	bf00      	nop

00006da0 <z_arm_interrupt_init>:
    6da0:	4804      	ldr	r0, [pc, #16]	; (6db4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6da2:	2300      	movs	r3, #0
    6da4:	2120      	movs	r1, #32
    6da6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6da8:	3301      	adds	r3, #1
    6daa:	2b30      	cmp	r3, #48	; 0x30
    6dac:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6db0:	d1f9      	bne.n	6da6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6db2:	4770      	bx	lr
    6db4:	e000e100 	.word	0xe000e100

00006db8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    6db8:	2000      	movs	r0, #0
    msr CONTROL, r0
    6dba:	f380 8814 	msr	CONTROL, r0
    isb
    6dbe:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    6dc2:	f017 fca7 	bl	1e714 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    6dc6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    6dc8:	490d      	ldr	r1, [pc, #52]	; (6e00 <__start+0x48>)
    str r0, [r1]
    6dca:	6008      	str	r0, [r1, #0]
    dsb
    6dcc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6dd0:	480c      	ldr	r0, [pc, #48]	; (6e04 <__start+0x4c>)
    msr msp, r0
    6dd2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    6dd6:	f000 f829 	bl	6e2c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6dda:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6ddc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6de0:	4809      	ldr	r0, [pc, #36]	; (6e08 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6de2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    6de6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6de8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6dec:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6df0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6df2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6df4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6df8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6dfc:	f7ff fc96 	bl	672c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    6e00:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6e04:	20003780 	.word	0x20003780
    ldr r0, =z_interrupt_stacks
    6e08:	20003900 	.word	0x20003900

00006e0c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    6e0c:	4a06      	ldr	r2, [pc, #24]	; (6e28 <z_arm_clear_arm_mpu_config+0x1c>)
    6e0e:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    6e10:	2300      	movs	r3, #0
	int num_regions =
    6e12:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    6e16:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    6e18:	428b      	cmp	r3, r1
    6e1a:	d100      	bne.n	6e1e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    6e1c:	4770      	bx	lr
  MPU->RNR = rnr;
    6e1e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    6e20:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    6e22:	3301      	adds	r3, #1
    6e24:	e7f8      	b.n	6e18 <z_arm_clear_arm_mpu_config+0xc>
    6e26:	bf00      	nop
    6e28:	e000ed90 	.word	0xe000ed90

00006e2c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    6e2c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    6e2e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6e30:	2300      	movs	r3, #0
    6e32:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    6e36:	f7ff ffe9 	bl	6e0c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    6e3a:	4b14      	ldr	r3, [pc, #80]	; (6e8c <z_arm_init_arch_hw_at_boot+0x60>)
    6e3c:	f04f 32ff 	mov.w	r2, #4294967295
    6e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    6e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    6e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    6e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    6e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    6e54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    6e58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    6e5c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6e60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6e64:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    6e68:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    6e6c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    6e70:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    6e74:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    6e78:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    6e7c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    6e80:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    6e82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e86:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6e8a:	bd08      	pop	{r3, pc}
    6e8c:	e000e100 	.word	0xe000e100

00006e90 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    6e90:	4b06      	ldr	r3, [pc, #24]	; (6eac <z_impl_k_thread_abort+0x1c>)
    6e92:	689b      	ldr	r3, [r3, #8]
    6e94:	4283      	cmp	r3, r0
    6e96:	d107      	bne.n	6ea8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6e98:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6e9c:	b123      	cbz	r3, 6ea8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6e9e:	4a04      	ldr	r2, [pc, #16]	; (6eb0 <z_impl_k_thread_abort+0x20>)
    6ea0:	6853      	ldr	r3, [r2, #4]
    6ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6ea6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    6ea8:	f005 bd08 	b.w	c8bc <z_thread_abort>
    6eac:	200011d0 	.word	0x200011d0
    6eb0:	e000ed00 	.word	0xe000ed00

00006eb4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6eb4:	4b02      	ldr	r3, [pc, #8]	; (6ec0 <z_arm_configure_static_mpu_regions+0xc>)
    6eb6:	4a03      	ldr	r2, [pc, #12]	; (6ec4 <z_arm_configure_static_mpu_regions+0x10>)
    6eb8:	4803      	ldr	r0, [pc, #12]	; (6ec8 <z_arm_configure_static_mpu_regions+0x14>)
    6eba:	2101      	movs	r1, #1
    6ebc:	f000 b884 	b.w	6fc8 <arm_core_mpu_configure_static_mpu_regions>
    6ec0:	20040000 	.word	0x20040000
    6ec4:	20000000 	.word	0x20000000
    6ec8:	0001f158 	.word	0x0001f158

00006ecc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    6ecc:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    6ece:	4b05      	ldr	r3, [pc, #20]	; (6ee4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    6ed0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    6ed2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6ed4:	4a04      	ldr	r2, [pc, #16]	; (6ee8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    6ed6:	2120      	movs	r1, #32
    6ed8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6edc:	4618      	mov	r0, r3
    6ede:	2101      	movs	r1, #1
    6ee0:	f000 b87c 	b.w	6fdc <arm_core_mpu_configure_dynamic_mpu_regions>
    6ee4:	20000d6c 	.word	0x20000d6c
    6ee8:	150b0000 	.word	0x150b0000

00006eec <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    6eee:	4f28      	ldr	r7, [pc, #160]	; (6f90 <mpu_configure_regions+0xa4>)
    6ef0:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6ef2:	2100      	movs	r1, #0
    6ef4:	42b1      	cmp	r1, r6
    6ef6:	da14      	bge.n	6f22 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    6ef8:	6844      	ldr	r4, [r0, #4]
    6efa:	2c00      	cmp	r4, #0
    6efc:	d045      	beq.n	6f8a <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6efe:	b1c3      	cbz	r3, 6f32 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    6f00:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6f04:	ea14 0f0c 	tst.w	r4, ip
    6f08:	d00d      	beq.n	6f26 <mpu_configure_regions+0x3a>
    6f0a:	4a22      	ldr	r2, [pc, #136]	; (6f94 <mpu_configure_regions+0xa8>)
    6f0c:	4b22      	ldr	r3, [pc, #136]	; (6f98 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    6f0e:	4823      	ldr	r0, [pc, #140]	; (6f9c <mpu_configure_regions+0xb0>)
    6f10:	1ad2      	subs	r2, r2, r3
    6f12:	08d2      	lsrs	r2, r2, #3
    6f14:	0192      	lsls	r2, r2, #6
    6f16:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6f1a:	f015 fd20 	bl	1c95e <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6f1e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6f22:	4610      	mov	r0, r2
    6f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    6f26:	2c1f      	cmp	r4, #31
    6f28:	d9ef      	bls.n	6f0a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    6f2a:	6805      	ldr	r5, [r0, #0]
		&&
    6f2c:	ea1c 0f05 	tst.w	ip, r5
    6f30:	d1eb      	bne.n	6f0a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6f32:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6f34:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    6f36:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    6f3a:	6802      	ldr	r2, [r0, #0]
    6f3c:	d916      	bls.n	6f6c <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    6f3e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6f42:	d815      	bhi.n	6f70 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6f44:	3c01      	subs	r4, #1
    6f46:	fab4 f484 	clz	r4, r4
    6f4a:	f1c4 041f 	rsb	r4, r4, #31
    6f4e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6f50:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6f52:	ea4c 0404 	orr.w	r4, ip, r4
    6f56:	d90d      	bls.n	6f74 <mpu_configure_regions+0x88>
    6f58:	4a0e      	ldr	r2, [pc, #56]	; (6f94 <mpu_configure_regions+0xa8>)
    6f5a:	4b0f      	ldr	r3, [pc, #60]	; (6f98 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6f5c:	4810      	ldr	r0, [pc, #64]	; (6fa0 <mpu_configure_regions+0xb4>)
    6f5e:	1ad2      	subs	r2, r2, r3
    6f60:	08d2      	lsrs	r2, r2, #3
    6f62:	0192      	lsls	r2, r2, #6
    6f64:	f042 0201 	orr.w	r2, r2, #1
    6f68:	4629      	mov	r1, r5
    6f6a:	e7d6      	b.n	6f1a <mpu_configure_regions+0x2e>
		return REGION_32B;
    6f6c:	2408      	movs	r4, #8
    6f6e:	e7ef      	b.n	6f50 <mpu_configure_regions+0x64>
		return REGION_4G;
    6f70:	243e      	movs	r4, #62	; 0x3e
    6f72:	e7ed      	b.n	6f50 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6f74:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    6f78:	432a      	orrs	r2, r5
    6f7a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6f7e:	f044 0401 	orr.w	r4, r4, #1
    6f82:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6f84:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6f86:	613c      	str	r4, [r7, #16]
		reg_index++;
    6f88:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    6f8a:	3101      	adds	r1, #1
    6f8c:	300c      	adds	r0, #12
    6f8e:	e7b1      	b.n	6ef4 <mpu_configure_regions+0x8>
    6f90:	e000ed90 	.word	0xe000ed90
    6f94:	0001ea28 	.word	0x0001ea28
    6f98:	0001ea10 	.word	0x0001ea10
    6f9c:	0002001c 	.word	0x0002001c
    6fa0:	0002003f 	.word	0x0002003f

00006fa4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6fa4:	4b03      	ldr	r3, [pc, #12]	; (6fb4 <arm_core_mpu_enable+0x10>)
    6fa6:	2205      	movs	r2, #5
    6fa8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6faa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6fae:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6fb2:	4770      	bx	lr
    6fb4:	e000ed90 	.word	0xe000ed90

00006fb8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6fb8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6fbc:	4b01      	ldr	r3, [pc, #4]	; (6fc4 <arm_core_mpu_disable+0xc>)
    6fbe:	2200      	movs	r2, #0
    6fc0:	605a      	str	r2, [r3, #4]
}
    6fc2:	4770      	bx	lr
    6fc4:	e000ed90 	.word	0xe000ed90

00006fc8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6fc8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6fca:	4c03      	ldr	r4, [pc, #12]	; (6fd8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6fcc:	2301      	movs	r3, #1
    6fce:	7822      	ldrb	r2, [r4, #0]
    6fd0:	f7ff ff8c 	bl	6eec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6fd4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    6fd6:	bd10      	pop	{r4, pc}
    6fd8:	20001d4c 	.word	0x20001d4c

00006fdc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6fdc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6fde:	4a08      	ldr	r2, [pc, #32]	; (7000 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    6fe0:	2300      	movs	r3, #0
    6fe2:	7812      	ldrb	r2, [r2, #0]
    6fe4:	f7ff ff82 	bl	6eec <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6fe8:	f110 0f16 	cmn.w	r0, #22
    6fec:	d003      	beq.n	6ff6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    6fee:	4b05      	ldr	r3, [pc, #20]	; (7004 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    6ff0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6ff2:	2807      	cmp	r0, #7
    6ff4:	dd00      	ble.n	6ff8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    6ff6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    6ff8:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    6ffa:	611a      	str	r2, [r3, #16]
    6ffc:	3001      	adds	r0, #1
    6ffe:	e7f8      	b.n	6ff2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    7000:	20001d4c 	.word	0x20001d4c
    7004:	e000ed90 	.word	0xe000ed90

00007008 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7008:	4913      	ldr	r1, [pc, #76]	; (7058 <z_arm_mpu_init+0x50>)
    700a:	6808      	ldr	r0, [r1, #0]
    700c:	2808      	cmp	r0, #8
{
    700e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7010:	d81e      	bhi.n	7050 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7012:	f7ff ffd1 	bl	6fb8 <arm_core_mpu_disable>
    7016:	4c11      	ldr	r4, [pc, #68]	; (705c <z_arm_mpu_init+0x54>)
    7018:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    701a:	2200      	movs	r2, #0
    701c:	4290      	cmp	r0, r2
    701e:	f101 010c 	add.w	r1, r1, #12
    7022:	d105      	bne.n	7030 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7024:	4b0e      	ldr	r3, [pc, #56]	; (7060 <z_arm_mpu_init+0x58>)
    7026:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7028:	f7ff ffbc 	bl	6fa4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    702c:	2000      	movs	r0, #0
}
    702e:	bd10      	pop	{r4, pc}
    7030:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7032:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7036:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    703a:	4313      	orrs	r3, r2
    703c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7040:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7042:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7046:	f043 0301 	orr.w	r3, r3, #1
    704a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    704c:	3201      	adds	r2, #1
    704e:	e7e5      	b.n	701c <z_arm_mpu_init+0x14>
		return -1;
    7050:	f04f 30ff 	mov.w	r0, #4294967295
    7054:	e7eb      	b.n	702e <z_arm_mpu_init+0x26>
    7056:	bf00      	nop
    7058:	0001f164 	.word	0x0001f164
    705c:	e000ed90 	.word	0xe000ed90
    7060:	20001d4c 	.word	0x20001d4c

00007064 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7064:	4b01      	ldr	r3, [pc, #4]	; (706c <__stdout_hook_install+0x8>)
    7066:	6018      	str	r0, [r3, #0]
}
    7068:	4770      	bx	lr
    706a:	bf00      	nop
    706c:	20000034 	.word	0x20000034

00007070 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    7070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7072:	4f0a      	ldr	r7, [pc, #40]	; (709c <z_impl_zephyr_write_stdout+0x2c>)
    7074:	460d      	mov	r5, r1
    7076:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    7078:	f1c0 0401 	rsb	r4, r0, #1
    707c:	19a3      	adds	r3, r4, r6
    707e:	429d      	cmp	r5, r3
    7080:	dc01      	bgt.n	7086 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    7082:	4628      	mov	r0, r5
    7084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    7086:	7873      	ldrb	r3, [r6, #1]
    7088:	2b0a      	cmp	r3, #10
    708a:	d102      	bne.n	7092 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    708c:	683b      	ldr	r3, [r7, #0]
    708e:	200d      	movs	r0, #13
    7090:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    7092:	683b      	ldr	r3, [r7, #0]
    7094:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    7098:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    709a:	e7ef      	b.n	707c <z_impl_zephyr_write_stdout+0xc>
    709c:	20000034 	.word	0x20000034

000070a0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    70a0:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    70a2:	4c07      	ldr	r4, [pc, #28]	; (70c0 <_sbrk+0x20>)
    70a4:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    70a6:	18c2      	adds	r2, r0, r3
    70a8:	4806      	ldr	r0, [pc, #24]	; (70c4 <_sbrk+0x24>)
    70aa:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    70ae:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    70b2:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    70b4:	bf3a      	itte	cc
    70b6:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    70b8:	6022      	strcc	r2, [r4, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    70ba:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
    70be:	bd10      	pop	{r4, pc}
    70c0:	20000d78 	.word	0x20000d78
    70c4:	200049e0 	.word	0x200049e0

000070c8 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    70c8:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    70ca:	211d      	movs	r1, #29
    70cc:	4804      	ldr	r0, [pc, #16]	; (70e0 <__chk_fail+0x18>)
    70ce:	f7ff ffcf 	bl	7070 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    70d2:	4040      	eors	r0, r0
    70d4:	f380 8811 	msr	BASEPRI, r0
    70d8:	f04f 0003 	mov.w	r0, #3
    70dc:	df02      	svc	2
	CODE_UNREACHABLE;
    70de:	bf00      	nop
    70e0:	00020065 	.word	0x00020065

000070e4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    70e4:	f04f 0320 	mov.w	r3, #32
    70e8:	f3ef 8211 	mrs	r2, BASEPRI
    70ec:	f383 8812 	msr	BASEPRI_MAX, r3
    70f0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    70f4:	4906      	ldr	r1, [pc, #24]	; (7110 <nordicsemi_nrf52_init+0x2c>)
    70f6:	2301      	movs	r3, #1
    70f8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    70fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7100:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7104:	f382 8811 	msr	BASEPRI, r2
    7108:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    710c:	2000      	movs	r0, #0
    710e:	4770      	bx	lr
    7110:	4001e000 	.word	0x4001e000

00007114 <sys_arch_reboot>:
    *p_gpregret = val;
    7114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7118:	b2c0      	uxtb	r0, r0
    711a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    711e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7122:	4905      	ldr	r1, [pc, #20]	; (7138 <sys_arch_reboot+0x24>)
    7124:	4b05      	ldr	r3, [pc, #20]	; (713c <sys_arch_reboot+0x28>)
    7126:	68ca      	ldr	r2, [r1, #12]
    7128:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    712c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    712e:	60cb      	str	r3, [r1, #12]
    7130:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    7134:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    7136:	e7fd      	b.n	7134 <sys_arch_reboot+0x20>
    7138:	e000ed00 	.word	0xe000ed00
    713c:	05fa0004 	.word	0x05fa0004

00007140 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7140:	b120      	cbz	r0, 714c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    7142:	4b03      	ldr	r3, [pc, #12]	; (7150 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7144:	0180      	lsls	r0, r0, #6
    7146:	f043 0301 	orr.w	r3, r3, #1
    714a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    714c:	4770      	bx	lr
    714e:	bf00      	nop
    7150:	0001ec90 	.word	0x0001ec90

00007154 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    7154:	b570      	push	{r4, r5, r6, lr}
    7156:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    7158:	480d      	ldr	r0, [pc, #52]	; (7190 <onoff_stop+0x3c>)
    715a:	1a23      	subs	r3, r4, r0
    715c:	109a      	asrs	r2, r3, #2
    715e:	4b0d      	ldr	r3, [pc, #52]	; (7194 <onoff_stop+0x40>)
    7160:	4353      	muls	r3, r2
    7162:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    7164:	250c      	movs	r5, #12
    7166:	435d      	muls	r5, r3
    7168:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    716c:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    716e:	4418      	add	r0, r3
    7170:	2140      	movs	r1, #64	; 0x40
    7172:	f015 ff9e 	bl	1d0b2 <set_off_state>
	if (err < 0) {
    7176:	1e01      	subs	r1, r0, #0
    7178:	db04      	blt.n	7184 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    717a:	4b07      	ldr	r3, [pc, #28]	; (7198 <onoff_stop+0x44>)
    717c:	442b      	add	r3, r5
    717e:	685b      	ldr	r3, [r3, #4]
    7180:	4798      	blx	r3
	return 0;
    7182:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    7184:	4620      	mov	r0, r4
    7186:	4633      	mov	r3, r6
}
    7188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    718c:	4718      	bx	r3
    718e:	bf00      	nop
    7190:	20000d8c 	.word	0x20000d8c
    7194:	b6db6db7 	.word	0xb6db6db7
    7198:	0001f198 	.word	0x0001f198

0000719c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    71a0:	4c0f      	ldr	r4, [pc, #60]	; (71e0 <onoff_start+0x44>)
    71a2:	4d10      	ldr	r5, [pc, #64]	; (71e4 <onoff_start+0x48>)
    71a4:	1b03      	subs	r3, r0, r4
    71a6:	109b      	asrs	r3, r3, #2
    71a8:	435d      	muls	r5, r3
    71aa:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    71ac:	250c      	movs	r5, #12
    71ae:	435d      	muls	r5, r3
{
    71b0:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    71b2:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    71b6:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    71b8:	4420      	add	r0, r4
    71ba:	2140      	movs	r1, #64	; 0x40
    71bc:	f015 ff92 	bl	1d0e4 <set_starting_state>
	if (err < 0) {
    71c0:	1e01      	subs	r1, r0, #0
    71c2:	db08      	blt.n	71d6 <onoff_start+0x3a>
	subdata->cb = cb;
    71c4:	4b08      	ldr	r3, [pc, #32]	; (71e8 <onoff_start+0x4c>)
    71c6:	442c      	add	r4, r5
	subdata->user_data = user_data;
    71c8:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    71cc:	4b07      	ldr	r3, [pc, #28]	; (71ec <onoff_start+0x50>)
    71ce:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    71d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    71d4:	4718      	bx	r3
		notify(mgr, err);
    71d6:	4638      	mov	r0, r7
    71d8:	4633      	mov	r3, r6
}
    71da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    71de:	4718      	bx	r3
    71e0:	20000d8c 	.word	0x20000d8c
    71e4:	b6db6db7 	.word	0xb6db6db7
    71e8:	0001d147 	.word	0x0001d147
    71ec:	0001f198 	.word	0x0001f198

000071f0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    71f0:	2200      	movs	r2, #0
{
    71f2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    71f4:	2101      	movs	r1, #1
{
    71f6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    71f8:	4610      	mov	r0, r2
    71fa:	f7ff fa7b 	bl	66f4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    71fe:	2000      	movs	r0, #0
    7200:	f7ff fa46 	bl	6690 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7204:	480f      	ldr	r0, [pc, #60]	; (7244 <clk_init+0x54>)
    7206:	f003 fc57 	bl	aab8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    720a:	4b0f      	ldr	r3, [pc, #60]	; (7248 <clk_init+0x58>)
    720c:	4298      	cmp	r0, r3
    720e:	d115      	bne.n	723c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    7210:	f016 fc07 	bl	1da22 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    7214:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    7216:	490d      	ldr	r1, [pc, #52]	; (724c <clk_init+0x5c>)
    7218:	4630      	mov	r0, r6
    721a:	f015 fa15 	bl	1c648 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    721e:	2800      	cmp	r0, #0
    7220:	db0b      	blt.n	723a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7222:	2501      	movs	r5, #1
    7224:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    7226:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    7228:	4908      	ldr	r1, [pc, #32]	; (724c <clk_init+0x5c>)
    722a:	f104 001c 	add.w	r0, r4, #28
    722e:	f015 fa0b 	bl	1c648 <onoff_manager_init>
		if (err < 0) {
    7232:	2800      	cmp	r0, #0
    7234:	db01      	blt.n	723a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7236:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    7238:	2000      	movs	r0, #0
}
    723a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    723c:	f06f 0004 	mvn.w	r0, #4
    7240:	e7fb      	b.n	723a <clk_init+0x4a>
    7242:	bf00      	nop
    7244:	00007285 	.word	0x00007285
    7248:	0bad0000 	.word	0x0bad0000
    724c:	0001f1b0 	.word	0x0001f1b0

00007250 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    7250:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    7252:	230c      	movs	r3, #12
    7254:	4809      	ldr	r0, [pc, #36]	; (727c <clkstarted_handle.constprop.0+0x2c>)
    7256:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    7258:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    725a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    725c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    7260:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    7262:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    7264:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    7266:	4418      	add	r0, r3
    7268:	f015 ff5a 	bl	1d120 <set_on_state>
	if (callback) {
    726c:	b12d      	cbz	r5, 727a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    726e:	4632      	mov	r2, r6
    7270:	462b      	mov	r3, r5
    7272:	4803      	ldr	r0, [pc, #12]	; (7280 <clkstarted_handle.constprop.0+0x30>)
}
    7274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    7278:	4718      	bx	r3
}
    727a:	bd70      	pop	{r4, r5, r6, pc}
    727c:	20000d8c 	.word	0x20000d8c
    7280:	0001e7b8 	.word	0x0001e7b8

00007284 <clock_event_handler>:
	switch (event) {
    7284:	b110      	cbz	r0, 728c <clock_event_handler+0x8>
    7286:	2801      	cmp	r0, #1
    7288:	d004      	beq.n	7294 <clock_event_handler+0x10>
    728a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    728c:	4b03      	ldr	r3, [pc, #12]	; (729c <clock_event_handler+0x18>)
    728e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7290:	075b      	lsls	r3, r3, #29
    7292:	d101      	bne.n	7298 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    7294:	f7ff bfdc 	b.w	7250 <clkstarted_handle.constprop.0>
}
    7298:	4770      	bx	lr
    729a:	bf00      	nop
    729c:	20000d8c 	.word	0x20000d8c

000072a0 <generic_hfclk_start>:
{
    72a0:	b508      	push	{r3, lr}
	__asm__ volatile(
    72a2:	f04f 0320 	mov.w	r3, #32
    72a6:	f3ef 8111 	mrs	r1, BASEPRI
    72aa:	f383 8812 	msr	BASEPRI_MAX, r3
    72ae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    72b2:	4a12      	ldr	r2, [pc, #72]	; (72fc <generic_hfclk_start+0x5c>)
    72b4:	6813      	ldr	r3, [r2, #0]
    72b6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    72ba:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    72be:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    72c0:	d00c      	beq.n	72dc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    72c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    72c6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    72ca:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    72ce:	f013 0301 	ands.w	r3, r3, #1
    72d2:	d003      	beq.n	72dc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    72d4:	480a      	ldr	r0, [pc, #40]	; (7300 <generic_hfclk_start+0x60>)
    72d6:	f015 ff23 	bl	1d120 <set_on_state>
			already_started = true;
    72da:	2301      	movs	r3, #1
	__asm__ volatile(
    72dc:	f381 8811 	msr	BASEPRI, r1
    72e0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    72e4:	b123      	cbz	r3, 72f0 <generic_hfclk_start+0x50>
}
    72e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    72ea:	2000      	movs	r0, #0
    72ec:	f7ff bfb0 	b.w	7250 <clkstarted_handle.constprop.0>
}
    72f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    72f4:	2001      	movs	r0, #1
    72f6:	f003 bbef 	b.w	aad8 <nrfx_clock_start>
    72fa:	bf00      	nop
    72fc:	20000ddc 	.word	0x20000ddc
    7300:	20000dcc 	.word	0x20000dcc

00007304 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7304:	4b09      	ldr	r3, [pc, #36]	; (732c <generic_hfclk_stop+0x28>)
    7306:	f3bf 8f5b 	dmb	ish
    730a:	e853 2f00 	ldrex	r2, [r3]
    730e:	f022 0102 	bic.w	r1, r2, #2
    7312:	e843 1000 	strex	r0, r1, [r3]
    7316:	2800      	cmp	r0, #0
    7318:	d1f7      	bne.n	730a <generic_hfclk_stop+0x6>
    731a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    731e:	07d3      	lsls	r3, r2, #31
    7320:	d402      	bmi.n	7328 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7322:	2001      	movs	r0, #1
    7324:	f003 bc0a 	b.w	ab3c <nrfx_clock_stop>
}
    7328:	4770      	bx	lr
    732a:	bf00      	nop
    732c:	20000ddc 	.word	0x20000ddc

00007330 <api_blocking_start>:
{
    7330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7332:	2200      	movs	r2, #0
    7334:	2301      	movs	r3, #1
    7336:	e9cd 2302 	strd	r2, r3, [sp, #8]
    733a:	ab04      	add	r3, sp, #16
    733c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7340:	4a09      	ldr	r2, [pc, #36]	; (7368 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7342:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7346:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7348:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    734c:	f015 ff21 	bl	1d192 <api_start>
	if (err < 0) {
    7350:	2800      	cmp	r0, #0
    7352:	db05      	blt.n	7360 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    7354:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7358:	2300      	movs	r3, #0
    735a:	4668      	mov	r0, sp
    735c:	f004 fe3e 	bl	bfdc <z_impl_k_sem_take>
}
    7360:	b007      	add	sp, #28
    7362:	f85d fb04 	ldr.w	pc, [sp], #4
    7366:	bf00      	nop
    7368:	0001d165 	.word	0x0001d165

0000736c <z_nrf_clock_control_lf_on>:
{
    736c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7370:	493a      	ldr	r1, [pc, #232]	; (745c <z_nrf_clock_control_lf_on+0xf0>)
    7372:	f3bf 8f5b 	dmb	ish
    7376:	4606      	mov	r6, r0
    7378:	2201      	movs	r2, #1
    737a:	e851 3f00 	ldrex	r3, [r1]
    737e:	e841 2000 	strex	r0, r2, [r1]
    7382:	2800      	cmp	r0, #0
    7384:	d1f9      	bne.n	737a <z_nrf_clock_control_lf_on+0xe>
    7386:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    738a:	b933      	cbnz	r3, 739a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    738c:	4934      	ldr	r1, [pc, #208]	; (7460 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    738e:	4835      	ldr	r0, [pc, #212]	; (7464 <z_nrf_clock_control_lf_on+0xf8>)
    7390:	604b      	str	r3, [r1, #4]
    7392:	60cb      	str	r3, [r1, #12]
    7394:	608a      	str	r2, [r1, #8]
    7396:	f015 f96a 	bl	1c66e <onoff_request>
	switch (start_mode) {
    739a:	1e73      	subs	r3, r6, #1
    739c:	2b01      	cmp	r3, #1
    739e:	d832      	bhi.n	7406 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    73a0:	2e01      	cmp	r6, #1
    73a2:	d107      	bne.n	73b4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    73a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    73ac:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    73b0:	2b01      	cmp	r3, #1
    73b2:	d028      	beq.n	7406 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    73b4:	f016 fbf9 	bl	1dbaa <k_is_in_isr>
    73b8:	4604      	mov	r4, r0
    73ba:	b918      	cbnz	r0, 73c4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    73bc:	4b2a      	ldr	r3, [pc, #168]	; (7468 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    73be:	781b      	ldrb	r3, [r3, #0]
    73c0:	2b00      	cmp	r3, #0
    73c2:	d144      	bne.n	744e <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    73c4:	f04f 0320 	mov.w	r3, #32
    73c8:	f3ef 8511 	mrs	r5, BASEPRI
    73cc:	f383 8812 	msr	BASEPRI_MAX, r3
    73d0:	f3bf 8f6f 	isb	sy
    73d4:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    73d6:	4f25      	ldr	r7, [pc, #148]	; (746c <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    73d8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 7470 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    73dc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 7474 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    73e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    73e4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    73e8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    73ec:	03d2      	lsls	r2, r2, #15
    73ee:	d50c      	bpl.n	740a <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    73f0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    73f4:	2b01      	cmp	r3, #1
    73f6:	d001      	beq.n	73fc <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    73f8:	2e01      	cmp	r6, #1
    73fa:	d106      	bne.n	740a <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    73fc:	b30c      	cbz	r4, 7442 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    73fe:	f385 8811 	msr	BASEPRI, r5
    7402:	f3bf 8f6f 	isb	sy
}
    7406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    740a:	b1ac      	cbz	r4, 7438 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    740c:	4628      	mov	r0, r5
    740e:	f7ff f8fd 	bl	660c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7416:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    741a:	2b00      	cmp	r3, #0
    741c:	d1e0      	bne.n	73e0 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    741e:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    7420:	2900      	cmp	r1, #0
    7422:	d0dd      	beq.n	73e0 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7424:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    7426:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    7428:	2301      	movs	r3, #1
    742a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    742e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7432:	f8c9 3000 	str.w	r3, [r9]
}
    7436:	e7d3      	b.n	73e0 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    7438:	2100      	movs	r1, #0
    743a:	2021      	movs	r0, #33	; 0x21
    743c:	f005 fa0e 	bl	c85c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7440:	e7e7      	b.n	7412 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    7442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7446:	2202      	movs	r2, #2
    7448:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    744c:	e7db      	b.n	7406 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    744e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7452:	2202      	movs	r2, #2
    7454:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    7458:	4605      	mov	r5, r0
}
    745a:	e7bc      	b.n	73d6 <z_nrf_clock_control_lf_on+0x6a>
    745c:	20000de0 	.word	0x20000de0
    7460:	20000d7c 	.word	0x20000d7c
    7464:	20000da8 	.word	0x20000da8
    7468:	2000229f 	.word	0x2000229f
    746c:	40000104 	.word	0x40000104
    7470:	e000e100 	.word	0xe000e100
    7474:	40000008 	.word	0x40000008

00007478 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    7478:	4b0a      	ldr	r3, [pc, #40]	; (74a4 <console_out+0x2c>)
{
    747a:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    747c:	b2c6      	uxtb	r6, r0
    747e:	681b      	ldr	r3, [r3, #0]
{
    7480:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
    7482:	4630      	mov	r0, r6
    7484:	4798      	blx	r3

	if (handled_by_debug_server) {
    7486:	2801      	cmp	r0, #1
    7488:	d00a      	beq.n	74a0 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    748a:	2c0a      	cmp	r4, #10
    748c:	4d06      	ldr	r5, [pc, #24]	; (74a8 <console_out+0x30>)
    748e:	d103      	bne.n	7498 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
    7490:	6828      	ldr	r0, [r5, #0]
    7492:	210d      	movs	r1, #13
    7494:	f015 fe97 	bl	1d1c6 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    7498:	6828      	ldr	r0, [r5, #0]
    749a:	4631      	mov	r1, r6
    749c:	f015 fe93 	bl	1d1c6 <uart_poll_out>

	return c;
}
    74a0:	4620      	mov	r0, r4
    74a2:	bd70      	pop	{r4, r5, r6, pc}
    74a4:	20000038 	.word	0x20000038
    74a8:	20000de4 	.word	0x20000de4

000074ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    74ac:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    74ae:	4b08      	ldr	r3, [pc, #32]	; (74d0 <uart_console_init+0x24>)
    74b0:	4808      	ldr	r0, [pc, #32]	; (74d4 <uart_console_init+0x28>)
    74b2:	6018      	str	r0, [r3, #0]
    74b4:	f016 fb2b 	bl	1db0e <z_device_ready>
    74b8:	b138      	cbz	r0, 74ca <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    74ba:	4807      	ldr	r0, [pc, #28]	; (74d8 <uart_console_init+0x2c>)
    74bc:	f7ff fdd2 	bl	7064 <__stdout_hook_install>
	__printk_hook_install(console_out);
    74c0:	4805      	ldr	r0, [pc, #20]	; (74d8 <uart_console_init+0x2c>)
    74c2:	f7fd fbeb 	bl	4c9c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    74c6:	2000      	movs	r0, #0
}
    74c8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    74ca:	f06f 0012 	mvn.w	r0, #18
    74ce:	e7fb      	b.n	74c8 <uart_console_init+0x1c>
    74d0:	20000de4 	.word	0x20000de4
    74d4:	0001e7e8 	.word	0x0001e7e8
    74d8:	00007479 	.word	0x00007479

000074dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    74dc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    74de:	4b09      	ldr	r3, [pc, #36]	; (7504 <gpio_nrfx_init+0x28>)
    74e0:	781a      	ldrb	r2, [r3, #0]
    74e2:	b96a      	cbnz	r2, 7500 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    74e4:	2101      	movs	r1, #1
    74e6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    74e8:	2006      	movs	r0, #6
    74ea:	2105      	movs	r1, #5
    74ec:	f7ff f902 	bl	66f4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    74f0:	2006      	movs	r0, #6
    74f2:	f7ff f8cd 	bl	6690 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    74f6:	4b04      	ldr	r3, [pc, #16]	; (7508 <gpio_nrfx_init+0x2c>)
    74f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    74fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    7500:	2000      	movs	r0, #0
    7502:	bd08      	pop	{r3, pc}
    7504:	20001d4d 	.word	0x20001d4d
    7508:	40006000 	.word	0x40006000

0000750c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    750c:	4b2b      	ldr	r3, [pc, #172]	; (75bc <gpio_nrfx_config+0xb0>)
{
    750e:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7510:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7512:	482b      	ldr	r0, [pc, #172]	; (75c0 <gpio_nrfx_config+0xb4>)
    7514:	4013      	ands	r3, r2
    7516:	4283      	cmp	r3, r0
    7518:	d041      	beq.n	759e <gpio_nrfx_config+0x92>
    751a:	d80d      	bhi.n	7538 <gpio_nrfx_config+0x2c>
    751c:	2b06      	cmp	r3, #6
    751e:	d015      	beq.n	754c <gpio_nrfx_config+0x40>
    7520:	d805      	bhi.n	752e <gpio_nrfx_config+0x22>
    7522:	b19b      	cbz	r3, 754c <gpio_nrfx_config+0x40>
    7524:	2b02      	cmp	r3, #2
    7526:	d03c      	beq.n	75a2 <gpio_nrfx_config+0x96>
    7528:	f06f 0015 	mvn.w	r0, #21
    752c:	e036      	b.n	759c <gpio_nrfx_config+0x90>
    752e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7532:	d1f9      	bne.n	7528 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    7534:	2301      	movs	r3, #1
    7536:	e009      	b.n	754c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7538:	4822      	ldr	r0, [pc, #136]	; (75c4 <gpio_nrfx_config+0xb8>)
    753a:	4283      	cmp	r3, r0
    753c:	d033      	beq.n	75a6 <gpio_nrfx_config+0x9a>
    753e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    7542:	d032      	beq.n	75aa <gpio_nrfx_config+0x9e>
    7544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    7548:	d1ee      	bne.n	7528 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    754a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    754c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    754e:	bf54      	ite	pl
    7550:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    7554:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    7556:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    755a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    755c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    7560:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    7564:	d507      	bpl.n	7576 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    7566:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    756a:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    756c:	d01f      	beq.n	75ae <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
    756e:	2201      	movs	r2, #1
    7570:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    7572:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    7576:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
    7578:	4c13      	ldr	r4, [pc, #76]	; (75c8 <gpio_nrfx_config+0xbc>)
    757a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    757c:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7580:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
    7584:	bf18      	it	ne
    7586:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    758a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    758e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7592:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    7596:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
    759a:	2000      	movs	r0, #0
}
    759c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    759e:	2307      	movs	r3, #7
    75a0:	e7d4      	b.n	754c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    75a2:	2304      	movs	r3, #4
    75a4:	e7d2      	b.n	754c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    75a6:	2305      	movs	r3, #5
    75a8:	e7d0      	b.n	754c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    75aa:	2303      	movs	r3, #3
    75ac:	e7ce      	b.n	754c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    75ae:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    75b0:	bf42      	ittt	mi
    75b2:	2201      	movmi	r2, #1
    75b4:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    75b6:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
    75ba:	e7dc      	b.n	7576 <gpio_nrfx_config+0x6a>
    75bc:	00f00006 	.word	0x00f00006
    75c0:	00100006 	.word	0x00100006
    75c4:	00400002 	.word	0x00400002
    75c8:	50000300 	.word	0x50000300

000075cc <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    75cc:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    75d0:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    75d2:	4b08      	ldr	r3, [pc, #32]	; (75f4 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    75d4:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    75d6:	bf18      	it	ne
    75d8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    75dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    75e0:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
    75e4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    75e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    75ec:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
    75f0:	4770      	bx	lr
    75f2:	bf00      	nop
    75f4:	50000300 	.word	0x50000300

000075f8 <check_level_trigger_pins>:
{
    75f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    75fc:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    75fe:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
    7602:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
    7604:	f8df b07c 	ldr.w	fp, [pc, #124]	; 7684 <check_level_trigger_pins+0x8c>
{
    7608:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    760a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    760e:	430a      	orrs	r2, r1
    7610:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    7614:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    7618:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    761a:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
    761e:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    7620:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    7624:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    7626:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    7628:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
    762c:	b917      	cbnz	r7, 7634 <check_level_trigger_pins+0x3c>
}
    762e:	4628      	mov	r0, r5
    7630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    7634:	423c      	tst	r4, r7
    7636:	d021      	beq.n	767c <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7638:	f89a 3008 	ldrb.w	r3, [sl, #8]
    763c:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
    7640:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7642:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
    7646:	d114      	bne.n	7672 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
    7648:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
    764a:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    764c:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
    7650:	bf14      	ite	ne
    7652:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    7656:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7658:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    7660:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    7664:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    7666:	bf02      	ittt	eq
    7668:	f8d8 3000 	ldreq.w	r3, [r8]
    766c:	4323      	orreq	r3, r4
    766e:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    7672:	2100      	movs	r1, #0
    7674:	f7ff ffaa 	bl	75cc <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    7678:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    767c:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    7680:	0064      	lsls	r4, r4, #1
    7682:	e7d3      	b.n	762c <check_level_trigger_pins+0x34>
    7684:	50000300 	.word	0x50000300

00007688 <gpio_nrfx_pin_interrupt_configure>:
{
    7688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    768a:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    768c:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    768e:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7690:	7a09      	ldrb	r1, [r1, #8]
    7692:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    7696:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    769a:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    769e:	d110      	bne.n	76c2 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
    76a0:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    76a2:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
    76a4:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
    76a8:	485d      	ldr	r0, [pc, #372]	; (7820 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    76aa:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    76ae:	bf18      	it	ne
    76b0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    76b4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    76b8:	07c8      	lsls	r0, r1, #31
    76ba:	d507      	bpl.n	76cc <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
    76bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    76c0:	e093      	b.n	77ea <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    76c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    76c6:	68f9      	ldr	r1, [r7, #12]
    76c8:	f000 8091 	beq.w	77ee <gpio_nrfx_pin_interrupt_configure+0x166>
    76cc:	68f8      	ldr	r0, [r7, #12]
    76ce:	2101      	movs	r1, #1
    76d0:	40b1      	lsls	r1, r6
    76d2:	4301      	orrs	r1, r0
    76d4:	6978      	ldr	r0, [r7, #20]
    76d6:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    76d8:	2101      	movs	r1, #1
    76da:	40b1      	lsls	r1, r6
    76dc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    76e0:	69ba      	ldr	r2, [r7, #24]
    76e2:	bf0c      	ite	eq
    76e4:	4308      	orreq	r0, r1
    76e6:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    76e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    76ec:	bf0c      	ite	eq
    76ee:	430a      	orreq	r2, r1
    76f0:	438a      	bicne	r2, r1
    76f2:	61ba      	str	r2, [r7, #24]
    76f4:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    76f6:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    76f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    76fc:	bf0c      	ite	eq
    76fe:	4311      	orreq	r1, r2
    7700:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    7704:	4a47      	ldr	r2, [pc, #284]	; (7824 <gpio_nrfx_pin_interrupt_configure+0x19c>)
    7706:	6139      	str	r1, [r7, #16]
    7708:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    770c:	2000      	movs	r0, #0
    770e:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7710:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    7714:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    7718:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    771c:	428d      	cmp	r5, r1
    771e:	d16b      	bne.n	77f8 <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
    7720:	fa23 f100 	lsr.w	r1, r3, r0
    7724:	07c9      	lsls	r1, r1, #31
    7726:	d567      	bpl.n	77f8 <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    7728:	0083      	lsls	r3, r0, #2
    772a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    772e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7732:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    7736:	f021 0101 	bic.w	r1, r1, #1
    773a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    773e:	2301      	movs	r3, #1
    7740:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    7742:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    7746:	b2c0      	uxtb	r0, r0
    7748:	f003 fb44 	bl	add4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    774c:	4628      	mov	r0, r5
    774e:	2100      	movs	r1, #0
    7750:	f7ff ff3c 	bl	75cc <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    7754:	68f8      	ldr	r0, [r7, #12]
    7756:	40f0      	lsrs	r0, r6
    7758:	f010 0001 	ands.w	r0, r0, #1
    775c:	d045      	beq.n	77ea <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
    775e:	6978      	ldr	r0, [r7, #20]
    7760:	40f0      	lsrs	r0, r6
    7762:	f010 0401 	ands.w	r4, r0, #1
    7766:	d04e      	beq.n	7806 <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
    7768:	69bb      	ldr	r3, [r7, #24]
    776a:	40f3      	lsrs	r3, r6
    776c:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    776e:	bf5f      	itttt	pl
    7770:	6939      	ldrpl	r1, [r7, #16]
    7772:	fa21 f606 	lsrpl.w	r6, r1, r6
    7776:	f006 0601 	andpl.w	r6, r6, #1
    777a:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    777e:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    7782:	bf54      	ite	pl
    7784:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    7786:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    7788:	f003 fb46 	bl	ae18 <nrfx_gpiote_channel_alloc>
    778c:	4b26      	ldr	r3, [pc, #152]	; (7828 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    778e:	4298      	cmp	r0, r3
    7790:	d136      	bne.n	7800 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    7792:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7796:	008b      	lsls	r3, r1, #2
    7798:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    779c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    77a0:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    77a2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    77a6:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    77aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    77ae:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    77b2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    77b6:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    77ba:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    77bc:	008a      	lsls	r2, r1, #2
    77be:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    77c2:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    77c6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    77ca:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    77cc:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    77d0:	6010      	str	r0, [r2, #0]
    77d2:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    77d4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    77d8:	f042 0201 	orr.w	r2, r2, #1
    77dc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    77e0:	4a10      	ldr	r2, [pc, #64]	; (7824 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    77e2:	2301      	movs	r3, #1
    77e4:	408b      	lsls	r3, r1
    77e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    77ea:	b003      	add	sp, #12
    77ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    77ee:	2001      	movs	r0, #1
    77f0:	40b0      	lsls	r0, r6
    77f2:	ea21 0100 	bic.w	r1, r1, r0
    77f6:	e76d      	b.n	76d4 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    77f8:	3001      	adds	r0, #1
    77fa:	2808      	cmp	r0, #8
    77fc:	d188      	bne.n	7710 <gpio_nrfx_pin_interrupt_configure+0x88>
    77fe:	e7a5      	b.n	774c <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
    7800:	f06f 0012 	mvn.w	r0, #18
    7804:	e7f1      	b.n	77ea <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    7806:	6939      	ldr	r1, [r7, #16]
    7808:	40f1      	lsrs	r1, r6
    780a:	f001 0101 	and.w	r1, r1, #1
    780e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    7812:	4628      	mov	r0, r5
    7814:	b2c9      	uxtb	r1, r1
    7816:	f7ff fed9 	bl	75cc <nrf_gpio_cfg_sense_set>
	int res = 0;
    781a:	4620      	mov	r0, r4
    781c:	e7e5      	b.n	77ea <gpio_nrfx_pin_interrupt_configure+0x162>
    781e:	bf00      	nop
    7820:	50000300 	.word	0x50000300
    7824:	40006000 	.word	0x40006000
    7828:	0bad0000 	.word	0x0bad0000

0000782c <gpiote_event_handler>:
{
    782c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    782e:	2400      	movs	r4, #0
{
    7830:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    7832:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    7836:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    783a:	4e26      	ldr	r6, [pc, #152]	; (78d4 <gpiote_event_handler+0xa8>)
    783c:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    783e:	b15d      	cbz	r5, 7858 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    7840:	a902      	add	r1, sp, #8
    7842:	4825      	ldr	r0, [pc, #148]	; (78d8 <gpiote_event_handler+0xac>)
    7844:	f7ff fed8 	bl	75f8 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    7848:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    784a:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    784c:	4823      	ldr	r0, [pc, #140]	; (78dc <gpiote_event_handler+0xb0>)
    784e:	f7ff fed3 	bl	75f8 <check_level_trigger_pins>
		fired_triggers[1] =
    7852:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7854:	6034      	str	r4, [r6, #0]
    7856:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    7858:	4c21      	ldr	r4, [pc, #132]	; (78e0 <gpiote_event_handler+0xb4>)
{
    785a:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    785c:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    785e:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    7860:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    7864:	fa06 f102 	lsl.w	r1, r6, r2
    7868:	4219      	tst	r1, r3
    786a:	d01b      	beq.n	78a4 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    786c:	0091      	lsls	r1, r2, #2
    786e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    7872:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    7876:	680b      	ldr	r3, [r1, #0]
    7878:	b1a3      	cbz	r3, 78a4 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    787a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    787e:	af04      	add	r7, sp, #16
    7880:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7884:	f8c1 c000 	str.w	ip, [r1]
    7888:	f3c3 3040 	ubfx	r0, r3, #13, #1
    788c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    7890:	f3c3 2304 	ubfx	r3, r3, #8, #5
    7894:	f850 7c10 	ldr.w	r7, [r0, #-16]
    7898:	fa06 f303 	lsl.w	r3, r6, r3
    789c:	433b      	orrs	r3, r7
    789e:	f840 3c10 	str.w	r3, [r0, #-16]
    78a2:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    78a4:	3201      	adds	r2, #1
    78a6:	2a08      	cmp	r2, #8
    78a8:	d1da      	bne.n	7860 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    78aa:	9a00      	ldr	r2, [sp, #0]
    78ac:	b11a      	cbz	r2, 78b6 <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    78ae:	490a      	ldr	r1, [pc, #40]	; (78d8 <gpiote_event_handler+0xac>)
    78b0:	480c      	ldr	r0, [pc, #48]	; (78e4 <gpiote_event_handler+0xb8>)
    78b2:	f015 fc8d 	bl	1d1d0 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    78b6:	9a01      	ldr	r2, [sp, #4]
    78b8:	b11a      	cbz	r2, 78c2 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    78ba:	4908      	ldr	r1, [pc, #32]	; (78dc <gpiote_event_handler+0xb0>)
    78bc:	480a      	ldr	r0, [pc, #40]	; (78e8 <gpiote_event_handler+0xbc>)
    78be:	f015 fc87 	bl	1d1d0 <gpio_fire_callbacks>
	if (port_event) {
    78c2:	b12d      	cbz	r5, 78d0 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    78c4:	4804      	ldr	r0, [pc, #16]	; (78d8 <gpiote_event_handler+0xac>)
    78c6:	f015 fced 	bl	1d2a4 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    78ca:	4804      	ldr	r0, [pc, #16]	; (78dc <gpiote_event_handler+0xb0>)
    78cc:	f015 fcea 	bl	1d2a4 <cfg_level_pins>
}
    78d0:	b005      	add	sp, #20
    78d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78d4:	4000617c 	.word	0x4000617c
    78d8:	0001e818 	.word	0x0001e818
    78dc:	0001e830 	.word	0x0001e830
    78e0:	40006000 	.word	0x40006000
    78e4:	20000dec 	.word	0x20000dec
    78e8:	20000e08 	.word	0x20000e08

000078ec <transfer_next_chunk>:

	return 0;
}

static void transfer_next_chunk(const struct device *dev)
{
    78ec:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    78ee:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    78f0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    78f2:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
    78f4:	b085      	sub	sp, #20
    78f6:	b982      	cbnz	r2, 791a <transfer_next_chunk+0x2e>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    78f8:	bb73      	cbnz	r3, 7958 <transfer_next_chunk+0x6c>
	int error = 0;
    78fa:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    78fc:	2200      	movs	r2, #0
    78fe:	4611      	mov	r1, r2
    7900:	4628      	mov	r0, r5
    7902:	f015 fd05 	bl	1d310 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    7906:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
    7908:	f105 0020 	add.w	r0, r5, #32
    790c:	f004 fb40 	bl	bf90 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    7910:	2300      	movs	r3, #0
    7912:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    7916:	b005      	add	sp, #20
    7918:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
    791a:	4611      	mov	r1, r2
    791c:	b113      	cbz	r3, 7924 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    791e:	429a      	cmp	r2, r3
    7920:	bf28      	it	cs
    7922:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    7924:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
    7926:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
    7928:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
    792a:	b1bc      	cbz	r4, 795c <transfer_next_chunk+0x70>
    792c:	2a00      	cmp	r2, #0
    792e:	bf18      	it	ne
    7930:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7932:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    7934:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    7936:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    7938:	b192      	cbz	r2, 7960 <transfer_next_chunk+0x74>
    793a:	2b00      	cmp	r3, #0
    793c:	bf18      	it	ne
    793e:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    7940:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7942:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
    7944:	2200      	movs	r2, #0
    7946:	4669      	mov	r1, sp
    7948:	f003 fc78 	bl	b23c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    794c:	4b05      	ldr	r3, [pc, #20]	; (7964 <transfer_next_chunk+0x78>)
    794e:	4298      	cmp	r0, r3
    7950:	d0e1      	beq.n	7916 <transfer_next_chunk+0x2a>
		error = -EIO;
    7952:	f06f 0404 	mvn.w	r4, #4
    7956:	e7d1      	b.n	78fc <transfer_next_chunk+0x10>
    7958:	4619      	mov	r1, r3
    795a:	e7e3      	b.n	7924 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    795c:	4622      	mov	r2, r4
    795e:	e7e8      	b.n	7932 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7960:	4613      	mov	r3, r2
    7962:	e7ed      	b.n	7940 <transfer_next_chunk+0x54>
    7964:	0bad0000 	.word	0x0bad0000

00007968 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    7968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    796c:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    796e:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    7970:	6904      	ldr	r4, [r0, #16]
{
    7972:	460d      	mov	r5, r1
    7974:	0459      	lsls	r1, r3, #17
    7976:	b087      	sub	sp, #28
    7978:	4680      	mov	r8, r0
    797a:	4617      	mov	r7, r2
    797c:	d436      	bmi.n	79ec <spi_nrfx_transceive+0x84>
	return z_impl_k_sem_take(sem, timeout);
    797e:	f04f 32ff 	mov.w	r2, #4294967295
    7982:	f04f 33ff 	mov.w	r3, #4294967295
    7986:	f104 0008 	add.w	r0, r4, #8
    798a:	f004 fb27 	bl	bfdc <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    798e:	6065      	str	r5, [r4, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    7990:	f8d8 9010 	ldr.w	r9, [r8, #16]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    7994:	f8d8 b004 	ldr.w	fp, [r8, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    7998:	f899 3065 	ldrb.w	r3, [r9, #101]	; 0x65
    799c:	9301      	str	r3, [sp, #4]
    799e:	b123      	cbz	r3, 79aa <spi_nrfx_transceive+0x42>
    79a0:	f8d9 3000 	ldr.w	r3, [r9]
    79a4:	429d      	cmp	r5, r3
    79a6:	f000 80e6 	beq.w	7b76 <spi_nrfx_transceive+0x20e>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    79aa:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    79ae:	f01e 0f01 	tst.w	lr, #1
    79b2:	d022      	beq.n	79fa <spi_nrfx_transceive+0x92>
    79b4:	4aa3      	ldr	r2, [pc, #652]	; (7c44 <spi_nrfx_transceive+0x2dc>)
    79b6:	4ba4      	ldr	r3, [pc, #656]	; (7c48 <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    79b8:	f8d8 1000 	ldr.w	r1, [r8]
    79bc:	48a3      	ldr	r0, [pc, #652]	; (7c4c <spi_nrfx_transceive+0x2e4>)
    79be:	1ad2      	subs	r2, r2, r3
    79c0:	08d2      	lsrs	r2, r2, #3
    79c2:	0192      	lsls	r2, r2, #6
    79c4:	f042 0201 	orr.w	r2, r2, #1
    79c8:	f014 ffc9 	bl	1c95e <log_1>
		return -EINVAL;
    79cc:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    79d0:	6823      	ldr	r3, [r4, #0]
    79d2:	889b      	ldrh	r3, [r3, #4]
    79d4:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    79d8:	d104      	bne.n	79e4 <spi_nrfx_transceive+0x7c>
		ctx->owner = NULL;
    79da:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    79dc:	f104 0008 	add.w	r0, r4, #8
    79e0:	f004 fad6 	bl	bf90 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
    79e4:	4628      	mov	r0, r5
    79e6:	b007      	add	sp, #28
    79e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    79ec:	6923      	ldr	r3, [r4, #16]
    79ee:	2b00      	cmp	r3, #0
    79f0:	d1c5      	bne.n	797e <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
    79f2:	6863      	ldr	r3, [r4, #4]
    79f4:	429d      	cmp	r5, r3
    79f6:	d1c2      	bne.n	797e <spi_nrfx_transceive+0x16>
    79f8:	e7ca      	b.n	7990 <spi_nrfx_transceive+0x28>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    79fa:	f01e 0f08 	tst.w	lr, #8
    79fe:	d00a      	beq.n	7a16 <spi_nrfx_transceive+0xae>
    7a00:	4990      	ldr	r1, [pc, #576]	; (7c44 <spi_nrfx_transceive+0x2dc>)
    7a02:	4b91      	ldr	r3, [pc, #580]	; (7c48 <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Loopback mode is not supported");
    7a04:	4892      	ldr	r0, [pc, #584]	; (7c50 <spi_nrfx_transceive+0x2e8>)
    7a06:	1ac9      	subs	r1, r1, r3
    7a08:	08c9      	lsrs	r1, r1, #3
    7a0a:	0189      	lsls	r1, r1, #6
    7a0c:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7a10:	f014 ff98 	bl	1c944 <log_0>
    7a14:	e7da      	b.n	79cc <spi_nrfx_transceive+0x64>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    7a16:	f41e 5fc0 	tst.w	lr, #6144	; 0x1800
    7a1a:	d008      	beq.n	7a2e <spi_nrfx_transceive+0xc6>
    7a1c:	4989      	ldr	r1, [pc, #548]	; (7c44 <spi_nrfx_transceive+0x2dc>)
    7a1e:	4b8a      	ldr	r3, [pc, #552]	; (7c48 <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Only single line mode is supported");
    7a20:	488c      	ldr	r0, [pc, #560]	; (7c54 <spi_nrfx_transceive+0x2ec>)
    7a22:	1ac9      	subs	r1, r1, r3
    7a24:	08c9      	lsrs	r1, r1, #3
    7a26:	0189      	lsls	r1, r1, #6
    7a28:	f041 0101 	orr.w	r1, r1, #1
    7a2c:	e7f0      	b.n	7a10 <spi_nrfx_transceive+0xa8>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    7a2e:	f3ce 1345 	ubfx	r3, lr, #5, #6
    7a32:	2b08      	cmp	r3, #8
    7a34:	d008      	beq.n	7a48 <spi_nrfx_transceive+0xe0>
    7a36:	4983      	ldr	r1, [pc, #524]	; (7c44 <spi_nrfx_transceive+0x2dc>)
    7a38:	4b83      	ldr	r3, [pc, #524]	; (7c48 <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    7a3a:	4887      	ldr	r0, [pc, #540]	; (7c58 <spi_nrfx_transceive+0x2f0>)
    7a3c:	1ac9      	subs	r1, r1, r3
    7a3e:	08c9      	lsrs	r1, r1, #3
    7a40:	0189      	lsls	r1, r1, #6
    7a42:	f041 0101 	orr.w	r1, r1, #1
    7a46:	e7e3      	b.n	7a10 <spi_nrfx_transceive+0xa8>
	if (spi_cfg->frequency < 125000) {
    7a48:	f8d5 c000 	ldr.w	ip, [r5]
    7a4c:	4b83      	ldr	r3, [pc, #524]	; (7c5c <spi_nrfx_transceive+0x2f4>)
    7a4e:	459c      	cmp	ip, r3
    7a50:	d808      	bhi.n	7a64 <spi_nrfx_transceive+0xfc>
    7a52:	497c      	ldr	r1, [pc, #496]	; (7c44 <spi_nrfx_transceive+0x2dc>)
    7a54:	4b7c      	ldr	r3, [pc, #496]	; (7c48 <spi_nrfx_transceive+0x2e0>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7a56:	4882      	ldr	r0, [pc, #520]	; (7c60 <spi_nrfx_transceive+0x2f8>)
    7a58:	1ac9      	subs	r1, r1, r3
    7a5a:	08c9      	lsrs	r1, r1, #3
    7a5c:	0189      	lsls	r1, r1, #6
    7a5e:	f041 0101 	orr.w	r1, r1, #1
    7a62:	e7d5      	b.n	7a10 <spi_nrfx_transceive+0xa8>
	config = dev_config->def_config;
    7a64:	f10b 0308 	add.w	r3, fp, #8
    7a68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7a6a:	f10d 0a08 	add.w	sl, sp, #8
    7a6e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
	if (frequency < 250000) {
    7a72:	4b7c      	ldr	r3, [pc, #496]	; (7c64 <spi_nrfx_transceive+0x2fc>)
    7a74:	459c      	cmp	ip, r3
    7a76:	d941      	bls.n	7afc <spi_nrfx_transceive+0x194>
	} else if (frequency < 500000) {
    7a78:	4b7b      	ldr	r3, [pc, #492]	; (7c68 <spi_nrfx_transceive+0x300>)
    7a7a:	459c      	cmp	ip, r3
    7a7c:	d941      	bls.n	7b02 <spi_nrfx_transceive+0x19a>
	} else if (frequency < 1000000) {
    7a7e:	4b7b      	ldr	r3, [pc, #492]	; (7c6c <spi_nrfx_transceive+0x304>)
    7a80:	459c      	cmp	ip, r3
    7a82:	d941      	bls.n	7b08 <spi_nrfx_transceive+0x1a0>
	} else if (frequency < 2000000) {
    7a84:	4b7a      	ldr	r3, [pc, #488]	; (7c70 <spi_nrfx_transceive+0x308>)
    7a86:	459c      	cmp	ip, r3
    7a88:	d941      	bls.n	7b0e <spi_nrfx_transceive+0x1a6>
	} else if (frequency < 4000000) {
    7a8a:	4b7a      	ldr	r3, [pc, #488]	; (7c74 <spi_nrfx_transceive+0x30c>)
    7a8c:	459c      	cmp	ip, r3
    7a8e:	d941      	bls.n	7b14 <spi_nrfx_transceive+0x1ac>
		return NRF_SPI_FREQ_8M;
    7a90:	4b79      	ldr	r3, [pc, #484]	; (7c78 <spi_nrfx_transceive+0x310>)
    7a92:	459c      	cmp	ip, r3
    7a94:	bf34      	ite	cc
    7a96:	f04f 4380 	movcc.w	r3, #1073741824	; 0x40000000
    7a9a:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7a9e:	f01e 0f02 	tst.w	lr, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    7aa2:	9304      	str	r3, [sp, #16]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7aa4:	f00e 0304 	and.w	r3, lr, #4
    7aa8:	d037      	beq.n	7b1a <spi_nrfx_transceive+0x1b2>
			return NRF_SPI_MODE_2;
    7aaa:	2b00      	cmp	r3, #0
    7aac:	bf14      	ite	ne
    7aae:	2303      	movne	r3, #3
    7ab0:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    7ab2:	f88d 3014 	strb.w	r3, [sp, #20]
	if (dev_data->initialized) {
    7ab6:	9b01      	ldr	r3, [sp, #4]
	if (operation & SPI_TRANSFER_LSB) {
    7ab8:	f3ce 1e00 	ubfx	lr, lr, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    7abc:	f88d e015 	strb.w	lr, [sp, #21]
	if (dev_data->initialized) {
    7ac0:	b12b      	cbz	r3, 7ace <spi_nrfx_transceive+0x166>
		nrfx_spi_uninit(&dev_config->spi);
    7ac2:	4658      	mov	r0, fp
    7ac4:	f003 fb88 	bl	b1d8 <nrfx_spi_uninit>
		dev_data->initialized = false;
    7ac8:	2300      	movs	r3, #0
    7aca:	f889 3065 	strb.w	r3, [r9, #101]	; 0x65
	result = nrfx_spi_init(&dev_config->spi, &config,
    7ace:	464b      	mov	r3, r9
    7ad0:	4651      	mov	r1, sl
    7ad2:	4a6a      	ldr	r2, [pc, #424]	; (7c7c <spi_nrfx_transceive+0x314>)
    7ad4:	4658      	mov	r0, fp
    7ad6:	f003 fadd 	bl	b094 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    7ada:	4b69      	ldr	r3, [pc, #420]	; (7c80 <spi_nrfx_transceive+0x318>)
    7adc:	4298      	cmp	r0, r3
	result = nrfx_spi_init(&dev_config->spi, &config,
    7ade:	4601      	mov	r1, r0
	if (result != NRFX_SUCCESS) {
    7ae0:	d01f      	beq.n	7b22 <spi_nrfx_transceive+0x1ba>
    7ae2:	4b59      	ldr	r3, [pc, #356]	; (7c48 <spi_nrfx_transceive+0x2e0>)
    7ae4:	4a57      	ldr	r2, [pc, #348]	; (7c44 <spi_nrfx_transceive+0x2dc>)
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    7ae6:	4867      	ldr	r0, [pc, #412]	; (7c84 <spi_nrfx_transceive+0x31c>)
    7ae8:	1ad2      	subs	r2, r2, r3
    7aea:	08d2      	lsrs	r2, r2, #3
    7aec:	0192      	lsls	r2, r2, #6
    7aee:	f042 0201 	orr.w	r2, r2, #1
    7af2:	f014 ff34 	bl	1c95e <log_1>
		return -EIO;
    7af6:	f06f 0504 	mvn.w	r5, #4
    7afa:	e769      	b.n	79d0 <spi_nrfx_transceive+0x68>
		return NRF_SPI_FREQ_125K;
    7afc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    7b00:	e7cd      	b.n	7a9e <spi_nrfx_transceive+0x136>
		return NRF_SPI_FREQ_250K;
    7b02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7b06:	e7ca      	b.n	7a9e <spi_nrfx_transceive+0x136>
		return NRF_SPI_FREQ_500K;
    7b08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    7b0c:	e7c7      	b.n	7a9e <spi_nrfx_transceive+0x136>
		return NRF_SPI_FREQ_1M;
    7b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7b12:	e7c4      	b.n	7a9e <spi_nrfx_transceive+0x136>
		return NRF_SPI_FREQ_2M;
    7b14:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    7b18:	e7c1      	b.n	7a9e <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_0;
    7b1a:	3b00      	subs	r3, #0
    7b1c:	bf18      	it	ne
    7b1e:	2301      	movne	r3, #1
    7b20:	e7c7      	b.n	7ab2 <spi_nrfx_transceive+0x14a>
	dev_data->initialized = true;
    7b22:	2301      	movs	r3, #1
    7b24:	f889 3065 	strb.w	r3, [r9, #101]	; 0x65
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    7b28:	68ab      	ldr	r3, [r5, #8]
	ctx->config = spi_cfg;
    7b2a:	f8c9 5000 	str.w	r5, [r9]
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d071      	beq.n	7c16 <spi_nrfx_transceive+0x2ae>
    7b32:	6818      	ldr	r0, [r3, #0]
    7b34:	2800      	cmp	r0, #0
    7b36:	d06e      	beq.n	7c16 <spi_nrfx_transceive+0x2ae>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    7b38:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_dt_flags |
    7b3a:	7a5b      	ldrb	r3, [r3, #9]
	struct gpio_driver_data *data =
    7b3c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    7b40:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    7b44:	f8de 5000 	ldr.w	r5, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7b48:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    7b4a:	bf54      	ite	pl
    7b4c:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7b50:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7b54:	f04f 0c01 	mov.w	ip, #1
    7b58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7b5c:	fa0c fc01 	lsl.w	ip, ip, r1
    7b60:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7b62:	bf4c      	ite	mi
    7b64:	ea4c 0505 	orrmi.w	r5, ip, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7b68:	ea25 050c 	bicpl.w	r5, r5, ip
	return api->pin_configure(port, pin, flags);
    7b6c:	f8d9 3000 	ldr.w	r3, [r9]
    7b70:	f8ce 5000 	str.w	r5, [lr]
    7b74:	4798      	blx	r3
		dev_data->busy = true;
    7b76:	2301      	movs	r3, #1
    7b78:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
    7b7c:	2f00      	cmp	r7, #0
    7b7e:	d055      	beq.n	7c2c <spi_nrfx_transceive+0x2c4>
		ctx->current_tx = tx_bufs->buffers;
    7b80:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
    7b82:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
    7b84:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
    7b86:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7b88:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    7b8a:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7b8c:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
    7b8e:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
    7b90:	2e00      	cmp	r6, #0
    7b92:	d050      	beq.n	7c36 <spi_nrfx_transceive+0x2ce>
		ctx->current_rx = rx_bufs->buffers;
    7b94:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
    7b96:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
    7b98:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
    7b9a:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7b9c:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    7b9e:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7ba0:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
    7ba2:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
    7ba4:	2200      	movs	r2, #0
    7ba6:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
    7ba8:	2101      	movs	r1, #1
    7baa:	4620      	mov	r0, r4
    7bac:	f015 fbb0 	bl	1d310 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    7bb0:	4640      	mov	r0, r8
    7bb2:	f7ff fe9b 	bl	78ec <transfer_next_chunk>
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7bb6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7bb8:	6da1      	ldr	r1, [r4, #88]	; 0x58
		     ctx->config->frequency;
    7bba:	4625      	mov	r5, r4
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7bbc:	428b      	cmp	r3, r1
    7bbe:	bf38      	it	cc
    7bc0:	460b      	movcc	r3, r1
    7bc2:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
    7bc6:	4359      	muls	r1, r3
		     ctx->config->frequency;
    7bc8:	f855 3b20 	ldr.w	r3, [r5], #32
		} else {
			return (t * to_hz + off) / from_hz;
    7bcc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    7bd0:	681b      	ldr	r3, [r3, #0]
    7bd2:	fbb1 f1f3 	udiv	r1, r1, r3
    7bd6:	f240 36e7 	movw	r6, #999	; 0x3e7
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    7bda:	31c8      	adds	r1, #200	; 0xc8
    7bdc:	2700      	movs	r7, #0
    7bde:	fbe0 6701 	umlal	r6, r7, r0, r1
    7be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7be6:	2300      	movs	r3, #0
    7be8:	4630      	mov	r0, r6
    7bea:	4639      	mov	r1, r7
    7bec:	f7f8 ff64 	bl	ab8 <__aeabi_uldivmod>
    7bf0:	4602      	mov	r2, r0
    7bf2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    7bf4:	4628      	mov	r0, r5
    7bf6:	f004 f9f1 	bl	bfdc <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
    7bfa:	b308      	cbz	r0, 7c40 <spi_nrfx_transceive+0x2d8>
    7bfc:	4b12      	ldr	r3, [pc, #72]	; (7c48 <spi_nrfx_transceive+0x2e0>)
    7bfe:	4911      	ldr	r1, [pc, #68]	; (7c44 <spi_nrfx_transceive+0x2dc>)
		LOG_ERR("Timeout waiting for transfer complete");
    7c00:	4821      	ldr	r0, [pc, #132]	; (7c88 <spi_nrfx_transceive+0x320>)
    7c02:	1ac9      	subs	r1, r1, r3
    7c04:	08c9      	lsrs	r1, r1, #3
    7c06:	0189      	lsls	r1, r1, #6
    7c08:	f041 0101 	orr.w	r1, r1, #1
    7c0c:	f014 fe9a 	bl	1c944 <log_0>
		return -ETIMEDOUT;
    7c10:	f06f 0573 	mvn.w	r5, #115	; 0x73
    7c14:	e6dc      	b.n	79d0 <spi_nrfx_transceive+0x68>
    7c16:	4b0c      	ldr	r3, [pc, #48]	; (7c48 <spi_nrfx_transceive+0x2e0>)
    7c18:	490a      	ldr	r1, [pc, #40]	; (7c44 <spi_nrfx_transceive+0x2dc>)
		LOG_INF("CS control inhibited (no GPIO device)");
    7c1a:	481c      	ldr	r0, [pc, #112]	; (7c8c <spi_nrfx_transceive+0x324>)
    7c1c:	1ac9      	subs	r1, r1, r3
    7c1e:	08c9      	lsrs	r1, r1, #3
    7c20:	0189      	lsls	r1, r1, #6
    7c22:	f041 0103 	orr.w	r1, r1, #3
    7c26:	f014 fe8d 	bl	1c944 <log_0>
	if (error == 0) {
    7c2a:	e7a4      	b.n	7b76 <spi_nrfx_transceive+0x20e>
		ctx->tx_count = 0;
    7c2c:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
    7c30:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
    7c34:	e7ac      	b.n	7b90 <spi_nrfx_transceive+0x228>
		ctx->rx_count = 0;
    7c36:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
    7c3a:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
    7c3e:	e7b1      	b.n	7ba4 <spi_nrfx_transceive+0x23c>
	status = ctx->sync_status;
    7c40:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
    7c42:	e6c5      	b.n	79d0 <spi_nrfx_transceive+0x68>
    7c44:	0001ea48 	.word	0x0001ea48
    7c48:	0001ea10 	.word	0x0001ea10
    7c4c:	000200c4 	.word	0x000200c4
    7c50:	000200e6 	.word	0x000200e6
    7c54:	00020105 	.word	0x00020105
    7c58:	00020128 	.word	0x00020128
    7c5c:	0001e847 	.word	0x0001e847
    7c60:	00020157 	.word	0x00020157
    7c64:	0003d08f 	.word	0x0003d08f
    7c68:	0007a11f 	.word	0x0007a11f
    7c6c:	000f423f 	.word	0x000f423f
    7c70:	001e847f 	.word	0x001e847f
    7c74:	003d08ff 	.word	0x003d08ff
    7c78:	007a1200 	.word	0x007a1200
    7c7c:	00007c91 	.word	0x00007c91
    7c80:	0bad0000 	.word	0x0bad0000
    7c84:	00020188 	.word	0x00020188
    7c88:	000201d5 	.word	0x000201d5
    7c8c:	000201af 	.word	0x000201af

00007c90 <event_handler>:
{
    7c90:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    7c92:	7803      	ldrb	r3, [r0, #0]
{
    7c94:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    7c96:	2b00      	cmp	r3, #0
    7c98:	d14e      	bne.n	7d38 <event_handler+0xa8>
	if (!ctx->tx_len) {
    7c9a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    7c9c:	b163      	cbz	r3, 7cb8 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    7c9e:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
    7ca0:	429a      	cmp	r2, r3
    7ca2:	d91d      	bls.n	7ce0 <event_handler+0x50>
    7ca4:	4925      	ldr	r1, [pc, #148]	; (7d3c <event_handler+0xac>)
    7ca6:	4b26      	ldr	r3, [pc, #152]	; (7d40 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    7ca8:	4826      	ldr	r0, [pc, #152]	; (7d44 <event_handler+0xb4>)
    7caa:	1ac9      	subs	r1, r1, r3
    7cac:	08c9      	lsrs	r1, r1, #3
    7cae:	0189      	lsls	r1, r1, #6
    7cb0:	f041 0101 	orr.w	r1, r1, #1
    7cb4:	f014 fe46 	bl	1c944 <log_0>
	if (!ctx->rx_len) {
    7cb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7cba:	b163      	cbz	r3, 7cd6 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    7cbc:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
    7cbe:	429a      	cmp	r2, r3
    7cc0:	d924      	bls.n	7d0c <event_handler+0x7c>
    7cc2:	491e      	ldr	r1, [pc, #120]	; (7d3c <event_handler+0xac>)
    7cc4:	4b1e      	ldr	r3, [pc, #120]	; (7d40 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    7cc6:	481f      	ldr	r0, [pc, #124]	; (7d44 <event_handler+0xb4>)
    7cc8:	1ac9      	subs	r1, r1, r3
    7cca:	08c9      	lsrs	r1, r1, #3
    7ccc:	0189      	lsls	r1, r1, #6
    7cce:	f041 0101 	orr.w	r1, r1, #1
    7cd2:	f014 fe37 	bl	1c944 <log_0>
		transfer_next_chunk(dev_data->dev);
    7cd6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
    7cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    7cdc:	f7ff be06 	b.w	78ec <transfer_next_chunk>
	ctx->tx_len -= len;
    7ce0:	1a9b      	subs	r3, r3, r2
    7ce2:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
    7ce4:	b963      	cbnz	r3, 7d00 <event_handler+0x70>
		ctx->tx_count--;
    7ce6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    7ce8:	3b01      	subs	r3, #1
    7cea:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
    7cec:	b163      	cbz	r3, 7d08 <event_handler+0x78>
			ctx->current_tx++;
    7cee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7cf0:	f103 0208 	add.w	r2, r3, #8
    7cf4:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7cf6:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    7cf8:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    7cfa:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
    7cfc:	650b      	str	r3, [r1, #80]	; 0x50
    7cfe:	e7db      	b.n	7cb8 <event_handler+0x28>
	} else if (ctx->tx_buf) {
    7d00:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    7d02:	2b00      	cmp	r3, #0
    7d04:	d0d8      	beq.n	7cb8 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    7d06:	4413      	add	r3, r2
    7d08:	64e3      	str	r3, [r4, #76]	; 0x4c
    7d0a:	e7d5      	b.n	7cb8 <event_handler+0x28>
	ctx->rx_len -= len;
    7d0c:	1a9b      	subs	r3, r3, r2
    7d0e:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
    7d10:	b963      	cbnz	r3, 7d2c <event_handler+0x9c>
		ctx->rx_count--;
    7d12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7d14:	3b01      	subs	r3, #1
    7d16:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
    7d18:	b163      	cbz	r3, 7d34 <event_handler+0xa4>
			ctx->current_rx++;
    7d1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7d1c:	f103 0208 	add.w	r2, r3, #8
    7d20:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7d22:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    7d24:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    7d26:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
    7d28:	65a3      	str	r3, [r4, #88]	; 0x58
    7d2a:	e7d4      	b.n	7cd6 <event_handler+0x46>
	} else if (ctx->rx_buf) {
    7d2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7d2e:	2b00      	cmp	r3, #0
    7d30:	d0d1      	beq.n	7cd6 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    7d32:	4413      	add	r3, r2
    7d34:	6563      	str	r3, [r4, #84]	; 0x54
    7d36:	e7ce      	b.n	7cd6 <event_handler+0x46>
}
    7d38:	bd10      	pop	{r4, pc}
    7d3a:	bf00      	nop
    7d3c:	0001ea48 	.word	0x0001ea48
    7d40:	0001ea10 	.word	0x0001ea10
    7d44:	000201fb 	.word	0x000201fb

00007d48 <transfer_next_chunk>:

	return 0;
}

static void transfer_next_chunk(const struct device *dev)
{
    7d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    7d4c:	6905      	ldr	r5, [r0, #16]
	if (!ctx->tx_len) {
    7d4e:	6d2f      	ldr	r7, [r5, #80]	; 0x50
    7d50:	6dac      	ldr	r4, [r5, #88]	; 0x58
{
    7d52:	b085      	sub	sp, #20
    7d54:	b98f      	cbnz	r7, 7d7a <transfer_next_chunk+0x32>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    7d56:	2c00      	cmp	r4, #0
    7d58:	d14c      	bne.n	7df4 <transfer_next_chunk+0xac>
	_spi_context_cs_control(ctx, on, false);
    7d5a:	2200      	movs	r2, #0
    7d5c:	4611      	mov	r1, r2
    7d5e:	4628      	mov	r0, r5
    7d60:	f015 fb39 	bl	1d3d6 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
    7d64:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
    7d66:	f105 0020 	add.w	r0, r5, #32
    7d6a:	f004 f911 	bl	bf90 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    7d6e:	2300      	movs	r3, #0
    7d70:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    7d74:	b005      	add	sp, #20
    7d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (!ctx->rx_len) {
    7d7a:	463e      	mov	r6, r7
    7d7c:	b114      	cbz	r4, 7d84 <transfer_next_chunk+0x3c>
	return MIN(ctx->tx_len, ctx->rx_len);
    7d7e:	42a7      	cmp	r7, r4
    7d80:	bf28      	it	cs
    7d82:	4626      	movcs	r6, r4
		const uint8_t *tx_buf = ctx->tx_buf;
    7d84:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    7d88:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    7d8c:	f1b8 0f00 	cmp.w	r8, #0
    7d90:	d032      	beq.n	7df8 <transfer_next_chunk+0xb0>
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    7d92:	b38f      	cbz	r7, 7df8 <transfer_next_chunk+0xb0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    7d94:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
    7d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    7d9c:	d02c      	beq.n	7df8 <transfer_next_chunk+0xb0>
			if (chunk_len > sizeof(dev_data->buffer)) {
    7d9e:	2e08      	cmp	r6, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    7da0:	f105 0366 	add.w	r3, r5, #102	; 0x66
    7da4:	bf28      	it	cs
    7da6:	2608      	movcs	r6, #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7da8:	4618      	mov	r0, r3
    7daa:	4632      	mov	r2, r6
    7dac:	4641      	mov	r1, r8
    7dae:	f016 fa28 	bl	1e202 <memcpy>
    7db2:	4603      	mov	r3, r0
		if (chunk_len > dev_config->max_chunk_len) {
    7db4:	f8d9 2008 	ldr.w	r2, [r9, #8]
		xfer.p_tx_buffer = tx_buf;
    7db8:	9300      	str	r3, [sp, #0]
    7dba:	4296      	cmp	r6, r2
    7dbc:	bf28      	it	cs
    7dbe:	4616      	movcs	r6, r2
		dev_data->chunk_len = chunk_len;
    7dc0:	662e      	str	r6, [r5, #96]	; 0x60
    7dc2:	f1b8 0f00 	cmp.w	r8, #0
    7dc6:	d019      	beq.n	7dfc <transfer_next_chunk+0xb4>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7dc8:	2f00      	cmp	r7, #0
    7dca:	bf18      	it	ne
    7dcc:	4637      	movne	r7, r6
		xfer.p_rx_buffer = ctx->rx_buf;
    7dce:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7dd0:	9701      	str	r7, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    7dd2:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    7dd4:	b1a3      	cbz	r3, 7e00 <transfer_next_chunk+0xb8>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7dd6:	2c00      	cmp	r4, #0
    7dd8:	bf18      	it	ne
    7dda:	4634      	movne	r4, r6
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    7ddc:	2200      	movs	r2, #0
    7dde:	4669      	mov	r1, sp
    7de0:	4648      	mov	r0, r9
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7de2:	9403      	str	r4, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    7de4:	f003 fc3c 	bl	b660 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    7de8:	4b06      	ldr	r3, [pc, #24]	; (7e04 <transfer_next_chunk+0xbc>)
    7dea:	4298      	cmp	r0, r3
    7dec:	d0c2      	beq.n	7d74 <transfer_next_chunk+0x2c>
			error = -EIO;
    7dee:	f06f 0404 	mvn.w	r4, #4
    7df2:	e7b2      	b.n	7d5a <transfer_next_chunk+0x12>
    7df4:	4626      	mov	r6, r4
    7df6:	e7c5      	b.n	7d84 <transfer_next_chunk+0x3c>
    7df8:	4643      	mov	r3, r8
    7dfa:	e7db      	b.n	7db4 <transfer_next_chunk+0x6c>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    7dfc:	4647      	mov	r7, r8
    7dfe:	e7e6      	b.n	7dce <transfer_next_chunk+0x86>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    7e00:	461c      	mov	r4, r3
    7e02:	e7eb      	b.n	7ddc <transfer_next_chunk+0x94>
    7e04:	0bad0000 	.word	0x0bad0000

00007e08 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    7e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e0c:	461f      	mov	r7, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    7e0e:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    7e10:	6904      	ldr	r4, [r0, #16]
{
    7e12:	460e      	mov	r6, r1
    7e14:	0459      	lsls	r1, r3, #17
    7e16:	b08b      	sub	sp, #44	; 0x2c
    7e18:	4682      	mov	sl, r0
    7e1a:	4690      	mov	r8, r2
    7e1c:	d439      	bmi.n	7e92 <spi_nrfx_transceive+0x8a>
	return z_impl_k_sem_take(sem, timeout);
    7e1e:	f04f 32ff 	mov.w	r2, #4294967295
    7e22:	f04f 33ff 	mov.w	r3, #4294967295
    7e26:	f104 0008 	add.w	r0, r4, #8
    7e2a:	f004 f8d7 	bl	bfdc <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    7e2e:	6066      	str	r6, [r4, #4]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    7e30:	f8da 3004 	ldr.w	r3, [sl, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
    7e34:	f8da 9010 	ldr.w	r9, [sl, #16]
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
    7e38:	9301      	str	r3, [sp, #4]
	uint32_t max_freq = dev_config->max_freq;
    7e3a:	68db      	ldr	r3, [r3, #12]
    7e3c:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    7e3e:	f899 3065 	ldrb.w	r3, [r9, #101]	; 0x65
    7e42:	9302      	str	r3, [sp, #8]
    7e44:	b123      	cbz	r3, 7e50 <spi_nrfx_transceive+0x48>
    7e46:	f8d9 3000 	ldr.w	r3, [r9]
    7e4a:	429e      	cmp	r6, r3
    7e4c:	f000 80f8 	beq.w	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    7e50:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    7e54:	f01c 0f01 	tst.w	ip, #1
    7e58:	d022      	beq.n	7ea0 <spi_nrfx_transceive+0x98>
    7e5a:	4aae      	ldr	r2, [pc, #696]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    7e5c:	4bae      	ldr	r3, [pc, #696]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    7e5e:	f8da 1000 	ldr.w	r1, [sl]
    7e62:	48ae      	ldr	r0, [pc, #696]	; (811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>)
    7e64:	1ad2      	subs	r2, r2, r3
    7e66:	08d2      	lsrs	r2, r2, #3
    7e68:	0192      	lsls	r2, r2, #6
    7e6a:	f042 0201 	orr.w	r2, r2, #1
    7e6e:	f014 fd76 	bl	1c95e <log_1>
		return -EINVAL;
    7e72:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    7e76:	6823      	ldr	r3, [r4, #0]
    7e78:	889b      	ldrh	r3, [r3, #4]
    7e7a:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
    7e7e:	d104      	bne.n	7e8a <spi_nrfx_transceive+0x82>
		ctx->owner = NULL;
    7e80:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    7e82:	f104 0008 	add.w	r0, r4, #8
    7e86:	f004 f883 	bl	bf90 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
    7e8a:	4628      	mov	r0, r5
    7e8c:	b00b      	add	sp, #44	; 0x2c
    7e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    7e92:	6923      	ldr	r3, [r4, #16]
    7e94:	2b00      	cmp	r3, #0
    7e96:	d1c2      	bne.n	7e1e <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
    7e98:	6863      	ldr	r3, [r4, #4]
    7e9a:	429e      	cmp	r6, r3
    7e9c:	d1bf      	bne.n	7e1e <spi_nrfx_transceive+0x16>
    7e9e:	e7c7      	b.n	7e30 <spi_nrfx_transceive+0x28>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    7ea0:	f01c 0f08 	tst.w	ip, #8
    7ea4:	d00a      	beq.n	7ebc <spi_nrfx_transceive+0xb4>
    7ea6:	499b      	ldr	r1, [pc, #620]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    7ea8:	4b9b      	ldr	r3, [pc, #620]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
		LOG_ERR("Loopback mode is not supported");
    7eaa:	489d      	ldr	r0, [pc, #628]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    7eac:	1ac9      	subs	r1, r1, r3
    7eae:	08c9      	lsrs	r1, r1, #3
    7eb0:	0189      	lsls	r1, r1, #6
    7eb2:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7eb6:	f014 fd45 	bl	1c944 <log_0>
    7eba:	e7da      	b.n	7e72 <spi_nrfx_transceive+0x6a>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
    7ebc:	f41c 5fc0 	tst.w	ip, #6144	; 0x1800
    7ec0:	d008      	beq.n	7ed4 <spi_nrfx_transceive+0xcc>
    7ec2:	4994      	ldr	r1, [pc, #592]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    7ec4:	4b94      	ldr	r3, [pc, #592]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
		LOG_ERR("Only single line mode is supported");
    7ec6:	4897      	ldr	r0, [pc, #604]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    7ec8:	1ac9      	subs	r1, r1, r3
    7eca:	08c9      	lsrs	r1, r1, #3
    7ecc:	0189      	lsls	r1, r1, #6
    7ece:	f041 0101 	orr.w	r1, r1, #1
    7ed2:	e7f0      	b.n	7eb6 <spi_nrfx_transceive+0xae>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    7ed4:	f3cc 1345 	ubfx	r3, ip, #5, #6
    7ed8:	2b08      	cmp	r3, #8
    7eda:	d008      	beq.n	7eee <spi_nrfx_transceive+0xe6>
    7edc:	498d      	ldr	r1, [pc, #564]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    7ede:	4b8e      	ldr	r3, [pc, #568]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    7ee0:	4891      	ldr	r0, [pc, #580]	; (8128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x128>)
    7ee2:	1ac9      	subs	r1, r1, r3
    7ee4:	08c9      	lsrs	r1, r1, #3
    7ee6:	0189      	lsls	r1, r1, #6
    7ee8:	f041 0101 	orr.w	r1, r1, #1
    7eec:	e7e3      	b.n	7eb6 <spi_nrfx_transceive+0xae>
	if (spi_cfg->frequency < 125000) {
    7eee:	6835      	ldr	r5, [r6, #0]
    7ef0:	4b8e      	ldr	r3, [pc, #568]	; (812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>)
    7ef2:	429d      	cmp	r5, r3
    7ef4:	d808      	bhi.n	7f08 <spi_nrfx_transceive+0x100>
    7ef6:	4987      	ldr	r1, [pc, #540]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    7ef8:	4b87      	ldr	r3, [pc, #540]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    7efa:	488d      	ldr	r0, [pc, #564]	; (8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>)
    7efc:	1ac9      	subs	r1, r1, r3
    7efe:	08c9      	lsrs	r1, r1, #3
    7f00:	0189      	lsls	r1, r1, #6
    7f02:	f041 0101 	orr.w	r1, r1, #1
    7f06:	e7d6      	b.n	7eb6 <spi_nrfx_transceive+0xae>
	config = dev_config->def_config;
    7f08:	9b01      	ldr	r3, [sp, #4]
    7f0a:	f103 0b10 	add.w	fp, r3, #16
    7f0e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    7f12:	f10d 0e14 	add.w	lr, sp, #20
    7f16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7f1a:	f8db 3000 	ldr.w	r3, [fp]
    7f1e:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    7f22:	9b03      	ldr	r3, [sp, #12]
    7f24:	42ab      	cmp	r3, r5
    7f26:	bf28      	it	cs
    7f28:	462b      	movcs	r3, r5
    7f2a:	461d      	mov	r5, r3
	if (frequency < 250000) {
    7f2c:	4b81      	ldr	r3, [pc, #516]	; (8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>)
    7f2e:	429d      	cmp	r5, r3
    7f30:	d947      	bls.n	7fc2 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 500000) {
    7f32:	4b81      	ldr	r3, [pc, #516]	; (8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>)
    7f34:	429d      	cmp	r5, r3
    7f36:	d947      	bls.n	7fc8 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 1000000) {
    7f38:	4b80      	ldr	r3, [pc, #512]	; (813c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c>)
    7f3a:	429d      	cmp	r5, r3
    7f3c:	d947      	bls.n	7fce <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 2000000) {
    7f3e:	4b80      	ldr	r3, [pc, #512]	; (8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>)
    7f40:	429d      	cmp	r5, r3
    7f42:	d947      	bls.n	7fd4 <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 4000000) {
    7f44:	4b7f      	ldr	r3, [pc, #508]	; (8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
    7f46:	429d      	cmp	r5, r3
    7f48:	d947      	bls.n	7fda <spi_nrfx_transceive+0x1d2>
	} else if (frequency < 8000000) {
    7f4a:	4b7f      	ldr	r3, [pc, #508]	; (8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>)
    7f4c:	429d      	cmp	r5, r3
    7f4e:	d347      	bcc.n	7fe0 <spi_nrfx_transceive+0x1d8>
	} else if (frequency < 16000000) {
    7f50:	4b7e      	ldr	r3, [pc, #504]	; (814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>)
    7f52:	429d      	cmp	r5, r3
    7f54:	d347      	bcc.n	7fe6 <spi_nrfx_transceive+0x1de>
		return NRF_SPIM_FREQ_32M;
    7f56:	4b7e      	ldr	r3, [pc, #504]	; (8150 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x150>)
    7f58:	429d      	cmp	r5, r3
    7f5a:	bf34      	ite	cc
    7f5c:	f04f 6520 	movcc.w	r5, #167772160	; 0xa000000
    7f60:	f04f 55a0 	movcs.w	r5, #335544320	; 0x14000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7f64:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    7f68:	9507      	str	r5, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    7f6a:	f00c 0304 	and.w	r3, ip, #4
    7f6e:	d03d      	beq.n	7fec <spi_nrfx_transceive+0x1e4>
			return NRF_SPIM_MODE_2;
    7f70:	2b00      	cmp	r3, #0
    7f72:	bf14      	ite	ne
    7f74:	2303      	movne	r3, #3
    7f76:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    7f78:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    7f7c:	9b02      	ldr	r3, [sp, #8]
	if (operation & SPI_TRANSFER_LSB) {
    7f7e:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    7f82:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    7f86:	b12b      	cbz	r3, 7f94 <spi_nrfx_transceive+0x18c>
		nrfx_spim_uninit(&dev_config->spim);
    7f88:	9801      	ldr	r0, [sp, #4]
    7f8a:	f003 fb11 	bl	b5b0 <nrfx_spim_uninit>
		dev_data->initialized = false;
    7f8e:	2300      	movs	r3, #0
    7f90:	f889 3065 	strb.w	r3, [r9, #101]	; 0x65
	result = nrfx_spim_init(&dev_config->spim, &config,
    7f94:	464b      	mov	r3, r9
    7f96:	a905      	add	r1, sp, #20
    7f98:	4a6e      	ldr	r2, [pc, #440]	; (8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>)
    7f9a:	9801      	ldr	r0, [sp, #4]
    7f9c:	f003 fa1c 	bl	b3d8 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    7fa0:	4b6d      	ldr	r3, [pc, #436]	; (8158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>)
    7fa2:	4298      	cmp	r0, r3
	result = nrfx_spim_init(&dev_config->spim, &config,
    7fa4:	4601      	mov	r1, r0
	if (result != NRFX_SUCCESS) {
    7fa6:	d025      	beq.n	7ff4 <spi_nrfx_transceive+0x1ec>
    7fa8:	4b5b      	ldr	r3, [pc, #364]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    7faa:	4a5a      	ldr	r2, [pc, #360]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    7fac:	486b      	ldr	r0, [pc, #428]	; (815c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15c>)
    7fae:	1ad2      	subs	r2, r2, r3
    7fb0:	08d2      	lsrs	r2, r2, #3
    7fb2:	0192      	lsls	r2, r2, #6
    7fb4:	f042 0201 	orr.w	r2, r2, #1
    7fb8:	f014 fcd1 	bl	1c95e <log_1>
		return -EIO;
    7fbc:	f06f 0504 	mvn.w	r5, #4
    7fc0:	e759      	b.n	7e76 <spi_nrfx_transceive+0x6e>
		return NRF_SPIM_FREQ_125K;
    7fc2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    7fc6:	e7cd      	b.n	7f64 <spi_nrfx_transceive+0x15c>
		return NRF_SPIM_FREQ_250K;
    7fc8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    7fcc:	e7ca      	b.n	7f64 <spi_nrfx_transceive+0x15c>
		return NRF_SPIM_FREQ_500K;
    7fce:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    7fd2:	e7c7      	b.n	7f64 <spi_nrfx_transceive+0x15c>
		return NRF_SPIM_FREQ_1M;
    7fd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    7fd8:	e7c4      	b.n	7f64 <spi_nrfx_transceive+0x15c>
		return NRF_SPIM_FREQ_2M;
    7fda:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    7fde:	e7c1      	b.n	7f64 <spi_nrfx_transceive+0x15c>
		return NRF_SPIM_FREQ_4M;
    7fe0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7fe4:	e7be      	b.n	7f64 <spi_nrfx_transceive+0x15c>
		return NRF_SPIM_FREQ_8M;
    7fe6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    7fea:	e7bb      	b.n	7f64 <spi_nrfx_transceive+0x15c>
			return NRF_SPIM_MODE_0;
    7fec:	3b00      	subs	r3, #0
    7fee:	bf18      	it	ne
    7ff0:	2301      	movne	r3, #1
    7ff2:	e7c1      	b.n	7f78 <spi_nrfx_transceive+0x170>
	dev_data->initialized = true;
    7ff4:	2301      	movs	r3, #1
    7ff6:	f889 3065 	strb.w	r3, [r9, #101]	; 0x65
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
    7ffa:	68b3      	ldr	r3, [r6, #8]
	ctx->config = spi_cfg;
    7ffc:	f8c9 6000 	str.w	r6, [r9]
    8000:	2b00      	cmp	r3, #0
    8002:	d070      	beq.n	80e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    8004:	6818      	ldr	r0, [r3, #0]
    8006:	2800      	cmp	r0, #0
    8008:	d06d      	beq.n	80e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    800a:	7a19      	ldrb	r1, [r3, #8]
				   ctx->config->cs->gpio_dt_flags |
    800c:	7a5b      	ldrb	r3, [r3, #9]
	struct gpio_driver_data *data =
    800e:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    8012:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    8016:	f8dc 5000 	ldr.w	r5, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    801a:	07da      	lsls	r2, r3, #31
		gpio_pin_configure(ctx->config->cs->gpio_dev,
    801c:	bf54      	ite	pl
    801e:	f443 53b0 	orrpl.w	r3, r3, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    8022:	f483 53d0 	eormi.w	r3, r3, #6656	; 0x1a00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    8026:	2601      	movs	r6, #1
    8028:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    802c:	408e      	lsls	r6, r1
    802e:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    8030:	bf4c      	ite	mi
    8032:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8034:	43b5      	bicpl	r5, r6
	return api->pin_configure(port, pin, flags);
    8036:	f8de 3000 	ldr.w	r3, [lr]
    803a:	f8cc 5000 	str.w	r5, [ip]
    803e:	4798      	blx	r3
		dev_data->busy = true;
    8040:	2301      	movs	r3, #1
    8042:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
    8046:	f1b8 0f00 	cmp.w	r8, #0
    804a:	d057      	beq.n	80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>
		ctx->current_tx = tx_bufs->buffers;
    804c:	f8d8 3000 	ldr.w	r3, [r8]
		ctx->tx_count = tx_bufs->count;
    8050:	f8d8 2004 	ldr.w	r2, [r8, #4]
		ctx->current_tx = tx_bufs->buffers;
    8054:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
    8056:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    8058:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
    805a:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    805c:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
    805e:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
    8060:	2f00      	cmp	r7, #0
    8062:	d050      	beq.n	8106 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x106>
		ctx->current_rx = rx_bufs->buffers;
    8064:	683b      	ldr	r3, [r7, #0]
		ctx->rx_count = rx_bufs->count;
    8066:	687a      	ldr	r2, [r7, #4]
		ctx->current_rx = rx_bufs->buffers;
    8068:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
    806a:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    806c:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
    806e:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    8070:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
    8072:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
    8074:	2200      	movs	r2, #0
    8076:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
    8078:	2101      	movs	r1, #1
    807a:	4620      	mov	r0, r4
    807c:	f015 f9ab 	bl	1d3d6 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
    8080:	4650      	mov	r0, sl
    8082:	f7ff fe61 	bl	7d48 <transfer_next_chunk>
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    8086:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8088:	6da1      	ldr	r1, [r4, #88]	; 0x58
		     ctx->config->frequency;
    808a:	4625      	mov	r5, r4
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    808c:	428b      	cmp	r3, r1
    808e:	bf38      	it	cc
    8090:	460b      	movcc	r3, r1
    8092:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
    8096:	4359      	muls	r1, r3
		     ctx->config->frequency;
    8098:	f855 3b20 	ldr.w	r3, [r5], #32
    809c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    80a0:	681b      	ldr	r3, [r3, #0]
    80a2:	fbb1 f1f3 	udiv	r1, r1, r3
    80a6:	f240 36e7 	movw	r6, #999	; 0x3e7
	timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    80aa:	31c8      	adds	r1, #200	; 0xc8
    80ac:	2700      	movs	r7, #0
    80ae:	fbe0 6701 	umlal	r6, r7, r0, r1
    80b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    80b6:	2300      	movs	r3, #0
    80b8:	4630      	mov	r0, r6
    80ba:	4639      	mov	r1, r7
    80bc:	f7f8 fcfc 	bl	ab8 <__aeabi_uldivmod>
    80c0:	4602      	mov	r2, r0
    80c2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    80c4:	4628      	mov	r0, r5
    80c6:	f003 ff89 	bl	bfdc <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, K_MSEC(timeout_ms))) {
    80ca:	b308      	cbz	r0, 8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
    80cc:	4b12      	ldr	r3, [pc, #72]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    80ce:	4911      	ldr	r1, [pc, #68]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
		LOG_ERR("Timeout waiting for transfer complete");
    80d0:	4823      	ldr	r0, [pc, #140]	; (8160 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x160>)
    80d2:	1ac9      	subs	r1, r1, r3
    80d4:	08c9      	lsrs	r1, r1, #3
    80d6:	0189      	lsls	r1, r1, #6
    80d8:	f041 0101 	orr.w	r1, r1, #1
    80dc:	f014 fc32 	bl	1c944 <log_0>
		return -ETIMEDOUT;
    80e0:	f06f 0573 	mvn.w	r5, #115	; 0x73
    80e4:	e6c7      	b.n	7e76 <spi_nrfx_transceive+0x6e>
    80e6:	4b0c      	ldr	r3, [pc, #48]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    80e8:	490a      	ldr	r1, [pc, #40]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
		LOG_INF("CS control inhibited (no GPIO device)");
    80ea:	481e      	ldr	r0, [pc, #120]	; (8164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>)
    80ec:	1ac9      	subs	r1, r1, r3
    80ee:	08c9      	lsrs	r1, r1, #3
    80f0:	0189      	lsls	r1, r1, #6
    80f2:	f041 0103 	orr.w	r1, r1, #3
    80f6:	f014 fc25 	bl	1c944 <log_0>
	if (error == 0) {
    80fa:	e7a1      	b.n	8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
		ctx->tx_count = 0;
    80fc:	e9c4 880f 	strd	r8, r8, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
    8100:	e9c4 8813 	strd	r8, r8, [r4, #76]	; 0x4c
    8104:	e7ac      	b.n	8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>
		ctx->rx_count = 0;
    8106:	e9c4 7711 	strd	r7, r7, [r4, #68]	; 0x44
		ctx->rx_len = 0;
    810a:	e9c4 7715 	strd	r7, r7, [r4, #84]	; 0x54
    810e:	e7b1      	b.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
	status = ctx->sync_status;
    8110:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
    8112:	e6b0      	b.n	7e76 <spi_nrfx_transceive+0x6e>
    8114:	0001ea50 	.word	0x0001ea50
    8118:	0001ea10 	.word	0x0001ea10
    811c:	000200c4 	.word	0x000200c4
    8120:	000200e6 	.word	0x000200e6
    8124:	00020105 	.word	0x00020105
    8128:	00020128 	.word	0x00020128
    812c:	0001e847 	.word	0x0001e847
    8130:	00020157 	.word	0x00020157
    8134:	0003d08f 	.word	0x0003d08f
    8138:	0007a11f 	.word	0x0007a11f
    813c:	000f423f 	.word	0x000f423f
    8140:	001e847f 	.word	0x001e847f
    8144:	003d08ff 	.word	0x003d08ff
    8148:	007a1200 	.word	0x007a1200
    814c:	00f42400 	.word	0x00f42400
    8150:	01e84800 	.word	0x01e84800
    8154:	00008169 	.word	0x00008169
    8158:	0bad0000 	.word	0x0bad0000
    815c:	00020188 	.word	0x00020188
    8160:	000201d5 	.word	0x000201d5
    8164:	000201af 	.word	0x000201af

00008168 <event_handler>:
{
    8168:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    816a:	7803      	ldrb	r3, [r0, #0]
{
    816c:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    816e:	2b00      	cmp	r3, #0
    8170:	d14e      	bne.n	8210 <event_handler+0xa8>
	if (!ctx->tx_len) {
    8172:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    8174:	b163      	cbz	r3, 8190 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    8176:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
    8178:	429a      	cmp	r2, r3
    817a:	d91d      	bls.n	81b8 <event_handler+0x50>
    817c:	4925      	ldr	r1, [pc, #148]	; (8214 <event_handler+0xac>)
    817e:	4b26      	ldr	r3, [pc, #152]	; (8218 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    8180:	4826      	ldr	r0, [pc, #152]	; (821c <event_handler+0xb4>)
    8182:	1ac9      	subs	r1, r1, r3
    8184:	08c9      	lsrs	r1, r1, #3
    8186:	0189      	lsls	r1, r1, #6
    8188:	f041 0101 	orr.w	r1, r1, #1
    818c:	f014 fbda 	bl	1c944 <log_0>
	if (!ctx->rx_len) {
    8190:	6da3      	ldr	r3, [r4, #88]	; 0x58
    8192:	b163      	cbz	r3, 81ae <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    8194:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
    8196:	429a      	cmp	r2, r3
    8198:	d924      	bls.n	81e4 <event_handler+0x7c>
    819a:	491e      	ldr	r1, [pc, #120]	; (8214 <event_handler+0xac>)
    819c:	4b1e      	ldr	r3, [pc, #120]	; (8218 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
    819e:	481f      	ldr	r0, [pc, #124]	; (821c <event_handler+0xb4>)
    81a0:	1ac9      	subs	r1, r1, r3
    81a2:	08c9      	lsrs	r1, r1, #3
    81a4:	0189      	lsls	r1, r1, #6
    81a6:	f041 0101 	orr.w	r1, r1, #1
    81aa:	f014 fbcb 	bl	1c944 <log_0>
		transfer_next_chunk(dev_data->dev);
    81ae:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
    81b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    81b4:	f7ff bdc8 	b.w	7d48 <transfer_next_chunk>
	ctx->tx_len -= len;
    81b8:	1a9b      	subs	r3, r3, r2
    81ba:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
    81bc:	b963      	cbnz	r3, 81d8 <event_handler+0x70>
		ctx->tx_count--;
    81be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    81c0:	3b01      	subs	r3, #1
    81c2:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
    81c4:	b163      	cbz	r3, 81e0 <event_handler+0x78>
			ctx->current_tx++;
    81c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    81c8:	f103 0208 	add.w	r2, r3, #8
    81cc:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    81ce:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
    81d0:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
    81d2:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
    81d4:	650b      	str	r3, [r1, #80]	; 0x50
    81d6:	e7db      	b.n	8190 <event_handler+0x28>
	} else if (ctx->tx_buf) {
    81d8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    81da:	2b00      	cmp	r3, #0
    81dc:	d0d8      	beq.n	8190 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
    81de:	4413      	add	r3, r2
    81e0:	64e3      	str	r3, [r4, #76]	; 0x4c
    81e2:	e7d5      	b.n	8190 <event_handler+0x28>
	ctx->rx_len -= len;
    81e4:	1a9b      	subs	r3, r3, r2
    81e6:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
    81e8:	b963      	cbnz	r3, 8204 <event_handler+0x9c>
		ctx->rx_count--;
    81ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    81ec:	3b01      	subs	r3, #1
    81ee:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
    81f0:	b163      	cbz	r3, 820c <event_handler+0xa4>
			ctx->current_rx++;
    81f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    81f4:	f103 0208 	add.w	r2, r3, #8
    81f8:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    81fa:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
    81fc:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
    81fe:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
    8200:	65a3      	str	r3, [r4, #88]	; 0x58
    8202:	e7d4      	b.n	81ae <event_handler+0x46>
	} else if (ctx->rx_buf) {
    8204:	6d63      	ldr	r3, [r4, #84]	; 0x54
    8206:	2b00      	cmp	r3, #0
    8208:	d0d1      	beq.n	81ae <event_handler+0x46>
		ctx->rx_buf += dfs * len;
    820a:	4413      	add	r3, r2
    820c:	6563      	str	r3, [r4, #84]	; 0x54
    820e:	e7ce      	b.n	81ae <event_handler+0x46>
}
    8210:	bd10      	pop	{r4, pc}
    8212:	bf00      	nop
    8214:	0001ea50 	.word	0x0001ea50
    8218:	0001ea10 	.word	0x0001ea10
    821c:	000201fb 	.word	0x000201fb

00008220 <timer_callback>:

static void timer_callback(struct k_timer *_timer)
{
	ARG_UNUSED(_timer);

	k_work_submit(&timer_work);
    8220:	4801      	ldr	r0, [pc, #4]	; (8228 <timer_callback+0x8>)
    8222:	f003 bff3 	b.w	c20c <k_work_submit>
    8226:	bf00      	nop
    8228:	20000114 	.word	0x20000114

0000822c <RtcGetTimerElapsedTime>:
{
	return k_uptime_get_32();
}

uint32_t RtcGetTimerElapsedTime(void)
{
    822c:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
    822e:	f015 f927 	bl	1d480 <k_uptime_get>
	return (k_uptime_get_32() - saved_time);
    8232:	4b02      	ldr	r3, [pc, #8]	; (823c <RtcGetTimerElapsedTime+0x10>)
    8234:	681b      	ldr	r3, [r3, #0]
}
    8236:	1ac0      	subs	r0, r0, r3
    8238:	bd08      	pop	{r3, pc}
    823a:	bf00      	nop
    823c:	20000e20 	.word	0x20000e20

00008240 <RtcStopAlarm>:
	z_impl_k_timer_stop(timer);
    8240:	4801      	ldr	r0, [pc, #4]	; (8248 <RtcStopAlarm+0x8>)
    8242:	f015 be68 	b.w	1df16 <z_impl_k_timer_stop>
    8246:	bf00      	nop
    8248:	20000298 	.word	0x20000298

0000824c <RtcSetAlarm>:
{
	k_timer_stop(&lora_timer);
}

void RtcSetAlarm(uint32_t timeout)
{
    824c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    824e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8252:	f240 34e7 	movw	r4, #999	; 0x3e7
    8256:	2500      	movs	r5, #0
    8258:	fbe1 4500 	umlal	r4, r5, r1, r0
    825c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8260:	2300      	movs	r3, #0
    8262:	4620      	mov	r0, r4
    8264:	4629      	mov	r1, r5
    8266:	f7f8 fc27 	bl	ab8 <__aeabi_uldivmod>
    826a:	4602      	mov	r2, r0
    826c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    826e:	2100      	movs	r1, #0
    8270:	2000      	movs	r0, #0
    8272:	e9cd 0100 	strd	r0, r1, [sp]
    8276:	4802      	ldr	r0, [pc, #8]	; (8280 <RtcSetAlarm+0x34>)
    8278:	f004 fd38 	bl	ccec <z_impl_k_timer_start>
	k_timer_start(&lora_timer, K_MSEC(timeout), K_NO_WAIT);
}
    827c:	b003      	add	sp, #12
    827e:	bd30      	pop	{r4, r5, pc}
    8280:	20000298 	.word	0x20000298

00008284 <RtcSetTimerContext>:

uint32_t RtcSetTimerContext(void)
{
    8284:	b508      	push	{r3, lr}
    8286:	f015 f8fb 	bl	1d480 <k_uptime_get>
	saved_time = k_uptime_get_32();
    828a:	4b01      	ldr	r3, [pc, #4]	; (8290 <RtcSetTimerContext+0xc>)
    828c:	6018      	str	r0, [r3, #0]

	return saved_time;
}
    828e:	bd08      	pop	{r3, pc}
    8290:	20000e20 	.word	0x20000e20

00008294 <RtcGetTimerContext>:

/* For us, 1 tick = 1 milli second. So no need to do any conversion here */
uint32_t RtcGetTimerContext(void)
{
	return saved_time;
}
    8294:	4b01      	ldr	r3, [pc, #4]	; (829c <RtcGetTimerContext+0x8>)
    8296:	6818      	ldr	r0, [r3, #0]
    8298:	4770      	bx	lr
    829a:	bf00      	nop
    829c:	20000e20 	.word	0x20000e20

000082a0 <modem_release.constprop.0>:
 * @param data common sx12xx data struct
 *
 * @retval true if modem was released by this function
 * @retval false otherwise
 */
static bool modem_release(struct sx12xx_data *data)
    82a0:	b570      	push	{r4, r5, r6, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    82a2:	4e13      	ldr	r6, [pc, #76]	; (82f0 <modem_release.constprop.0+0x50>)
    82a4:	f3bf 8f5b 	dmb	ish
    82a8:	f106 0434 	add.w	r4, r6, #52	; 0x34
    82ac:	2302      	movs	r3, #2
    82ae:	e854 2f00 	ldrex	r2, [r4]
    82b2:	2a01      	cmp	r2, #1
    82b4:	d103      	bne.n	82be <modem_release.constprop.0+0x1e>
    82b6:	e844 3100 	strex	r1, r3, [r4]
    82ba:	2900      	cmp	r1, #0
    82bc:	d1f7      	bne.n	82ae <modem_release.constprop.0+0xe>
    82be:	f3bf 8f5b 	dmb	ish
    82c2:	bf0c      	ite	eq
    82c4:	2001      	moveq	r0, #1
    82c6:	2000      	movne	r0, #0
    82c8:	f04f 0500 	mov.w	r5, #0
{
	/* Increment atomic so both acquire and release will fail */
	if (!atomic_cas(&data->modem_usage, STATE_BUSY, STATE_CLEANUP)) {
    82cc:	d10e      	bne.n	82ec <modem_release.constprop.0+0x4c>
		return false;
	}
	/* Put radio back into sleep mode */
	Radio.Sleep();
    82ce:	4b09      	ldr	r3, [pc, #36]	; (82f4 <modem_release.constprop.0+0x54>)
    82d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    82d2:	4798      	blx	r3
	/* Completely release modem */
	data->operation_done = NULL;
    82d4:	6035      	str	r5, [r6, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    82d6:	f3bf 8f5b 	dmb	ish
    82da:	e854 3f00 	ldrex	r3, [r4]
    82de:	e844 5200 	strex	r2, r5, [r4]
    82e2:	2a00      	cmp	r2, #0
    82e4:	d1f9      	bne.n	82da <modem_release.constprop.0+0x3a>
    82e6:	f3bf 8f5b 	dmb	ish
	atomic_clear(&data->modem_usage);
	return true;
    82ea:	2001      	movs	r0, #1
}
    82ec:	bd70      	pop	{r4, r5, r6, pc}
    82ee:	bf00      	nop
    82f0:	20000e24 	.word	0x20000e24
    82f4:	0001f244 	.word	0x0001f244

000082f8 <sx12xx_ev_tx_done>:
	k_poll_signal_raise(sig, 0);
}

static void sx12xx_ev_tx_done(void)
{
	struct k_poll_signal *sig = dev_data.operation_done;
    82f8:	4b06      	ldr	r3, [pc, #24]	; (8314 <sx12xx_ev_tx_done+0x1c>)
{
    82fa:	b510      	push	{r4, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
    82fc:	681c      	ldr	r4, [r3, #0]

	if (modem_release(&dev_data)) {
    82fe:	f7ff ffcf 	bl	82a0 <modem_release.constprop.0>
    8302:	b130      	cbz	r0, 8312 <sx12xx_ev_tx_done+0x1a>
		/* Raise signal if provided */
		if (sig) {
    8304:	b12c      	cbz	r4, 8312 <sx12xx_ev_tx_done+0x1a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    8306:	2100      	movs	r1, #0
    8308:	4620      	mov	r0, r4
			k_poll_signal_raise(sig, 0);
		}
	}
}
    830a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    830e:	f004 bda9 	b.w	ce64 <z_impl_k_poll_signal_raise>
    8312:	bd10      	pop	{r4, pc}
    8314:	20000e24 	.word	0x20000e24

00008318 <sx12xx_ev_rx_done>:
{
    8318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct k_poll_signal *sig = dev_data.operation_done;
    831c:	4c1d      	ldr	r4, [pc, #116]	; (8394 <sx12xx_ev_rx_done+0x7c>)
    831e:	4625      	mov	r5, r4
{
    8320:	461e      	mov	r6, r3
    8322:	4617      	mov	r7, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8324:	2302      	movs	r3, #2
	struct k_poll_signal *sig = dev_data.operation_done;
    8326:	f855 8b34 	ldr.w	r8, [r5], #52
    832a:	f3bf 8f5b 	dmb	ish
    832e:	e855 2f00 	ldrex	r2, [r5]
    8332:	2a01      	cmp	r2, #1
    8334:	d104      	bne.n	8340 <sx12xx_ev_rx_done+0x28>
    8336:	e845 3c00 	strex	ip, r3, [r5]
    833a:	f1bc 0f00 	cmp.w	ip, #0
    833e:	d1f6      	bne.n	832e <sx12xx_ev_rx_done+0x16>
    8340:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&dev_data.modem_usage, STATE_BUSY, STATE_CLEANUP)) {
    8344:	d124      	bne.n	8390 <sx12xx_ev_rx_done+0x78>
	if (size < *dev_data.rx_params.size) {
    8346:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8348:	781a      	ldrb	r2, [r3, #0]
    834a:	428a      	cmp	r2, r1
		*dev_data.rx_params.size = size;
    834c:	bf88      	it	hi
    834e:	7019      	strbhi	r1, [r3, #0]
	memcpy(dev_data.rx_params.buf, payload,
    8350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8352:	4601      	mov	r1, r0
    8354:	781a      	ldrb	r2, [r3, #0]
    8356:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    8358:	f015 ff53 	bl	1e202 <memcpy>
	if (dev_data.rx_params.rssi) {
    835c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    835e:	b103      	cbz	r3, 8362 <sx12xx_ev_rx_done+0x4a>
		*dev_data.rx_params.rssi = rssi;
    8360:	801f      	strh	r7, [r3, #0]
	if (dev_data.rx_params.snr) {
    8362:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8364:	b103      	cbz	r3, 8368 <sx12xx_ev_rx_done+0x50>
		*dev_data.rx_params.snr = snr;
    8366:	701e      	strb	r6, [r3, #0]
	Radio.Sleep();
    8368:	4b0b      	ldr	r3, [pc, #44]	; (8398 <sx12xx_ev_rx_done+0x80>)
    836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    836c:	4798      	blx	r3
	dev_data.operation_done = NULL;
    836e:	2100      	movs	r1, #0
    8370:	6021      	str	r1, [r4, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8372:	f3bf 8f5b 	dmb	ish
    8376:	e855 3f00 	ldrex	r3, [r5]
    837a:	e845 1200 	strex	r2, r1, [r5]
    837e:	2a00      	cmp	r2, #0
    8380:	d1f9      	bne.n	8376 <sx12xx_ev_rx_done+0x5e>
    8382:	f3bf 8f5b 	dmb	ish
    8386:	4640      	mov	r0, r8
}
    8388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    838c:	f004 bd6a 	b.w	ce64 <z_impl_k_poll_signal_raise>
    8390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8394:	20000e24 	.word	0x20000e24
    8398:	0001f244 	.word	0x0001f244

0000839c <__sx12xx_configure_pin>:
{
    839c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    839e:	4607      	mov	r7, r0
    83a0:	460d      	mov	r5, r1
    83a2:	4616      	mov	r6, r2
    83a4:	461c      	mov	r4, r3
    83a6:	4608      	mov	r0, r1
    83a8:	f003 fabc 	bl	b924 <z_impl_device_get_binding>
	*dev = device_get_binding(controller);
    83ac:	6038      	str	r0, [r7, #0]
	if (!(*dev)) {
    83ae:	b978      	cbnz	r0, 83d0 <__sx12xx_configure_pin+0x34>
    83b0:	4b1e      	ldr	r3, [pc, #120]	; (842c <__sx12xx_configure_pin+0x90>)
    83b2:	4a1f      	ldr	r2, [pc, #124]	; (8430 <__sx12xx_configure_pin+0x94>)
		LOG_ERR("Cannot get pointer to %s device", controller);
    83b4:	481f      	ldr	r0, [pc, #124]	; (8434 <__sx12xx_configure_pin+0x98>)
    83b6:	1ad2      	subs	r2, r2, r3
    83b8:	08d2      	lsrs	r2, r2, #3
    83ba:	0192      	lsls	r2, r2, #6
    83bc:	f042 0201 	orr.w	r2, r2, #1
    83c0:	4629      	mov	r1, r5
    83c2:	f014 facc 	bl	1c95e <log_1>
		return -EIO;
    83c6:	f06f 0704 	mvn.w	r7, #4
}
    83ca:	4638      	mov	r0, r7
    83cc:	b003      	add	sp, #12
    83ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    83d0:	04e2      	lsls	r2, r4, #19
	const struct gpio_driver_api *api =
    83d2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	struct gpio_driver_data *data =
    83d6:	6907      	ldr	r7, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    83d8:	d506      	bpl.n	83e8 <__sx12xx_configure_pin+0x4c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    83da:	f414 6f40 	tst.w	r4, #3072	; 0xc00
    83de:	d003      	beq.n	83e8 <__sx12xx_configure_pin+0x4c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    83e0:	07e3      	lsls	r3, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    83e2:	bf48      	it	mi
    83e4:	f484 6440 	eormi.w	r4, r4, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    83e8:	683b      	ldr	r3, [r7, #0]
    83ea:	2101      	movs	r1, #1
    83ec:	40b1      	lsls	r1, r6
    83ee:	f424 5280 	bic.w	r2, r4, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    83f2:	07e4      	lsls	r4, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    83f4:	bf4c      	ite	mi
    83f6:	430b      	orrmi	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    83f8:	438b      	bicpl	r3, r1
    83fa:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
    83fc:	4631      	mov	r1, r6
    83fe:	f8dc 3000 	ldr.w	r3, [ip]
    8402:	4798      	blx	r3
	if (err) {
    8404:	4607      	mov	r7, r0
    8406:	2800      	cmp	r0, #0
    8408:	d0df      	beq.n	83ca <__sx12xx_configure_pin+0x2e>
    840a:	4b08      	ldr	r3, [pc, #32]	; (842c <__sx12xx_configure_pin+0x90>)
    840c:	4c08      	ldr	r4, [pc, #32]	; (8430 <__sx12xx_configure_pin+0x94>)
    840e:	1ae4      	subs	r4, r4, r3
    8410:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("Cannot configure gpio %s %d: %d", controller, pin,
    8412:	01a4      	lsls	r4, r4, #6
    8414:	f044 0401 	orr.w	r4, r4, #1
    8418:	4603      	mov	r3, r0
    841a:	f8ad 4000 	strh.w	r4, [sp]
    841e:	4806      	ldr	r0, [pc, #24]	; (8438 <__sx12xx_configure_pin+0x9c>)
    8420:	4632      	mov	r2, r6
    8422:	4629      	mov	r1, r5
    8424:	f014 fac8 	bl	1c9b8 <log_3>
		return err;
    8428:	e7cf      	b.n	83ca <__sx12xx_configure_pin+0x2e>
    842a:	bf00      	nop
    842c:	0001ea10 	.word	0x0001ea10
    8430:	0001ea60 	.word	0x0001ea60
    8434:	00020240 	.word	0x00020240
    8438:	00020260 	.word	0x00020260

0000843c <sx12xx_lora_send_async>:
	return 0;
}

int sx12xx_lora_send_async(const struct device *dev, uint8_t *data,
			   uint32_t data_len, struct k_poll_signal *async)
{
    843c:	b570      	push	{r4, r5, r6, lr}
    843e:	460d      	mov	r5, r1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8440:	4910      	ldr	r1, [pc, #64]	; (8484 <sx12xx_lora_send_async+0x48>)
    8442:	f3bf 8f5b 	dmb	ish
    8446:	f101 0434 	add.w	r4, r1, #52	; 0x34
    844a:	2001      	movs	r0, #1
    844c:	e854 6f00 	ldrex	r6, [r4]
    8450:	2e00      	cmp	r6, #0
    8452:	d104      	bne.n	845e <sx12xx_lora_send_async+0x22>
    8454:	e844 0c00 	strex	ip, r0, [r4]
    8458:	f1bc 0f00 	cmp.w	ip, #0
    845c:	d1f6      	bne.n	844c <sx12xx_lora_send_async+0x10>
    845e:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed by sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
    8462:	d10b      	bne.n	847c <sx12xx_lora_send_async+0x40>
	}

	/* Store signal */
	dev_data.operation_done = async;

	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    8464:	4e08      	ldr	r6, [pc, #32]	; (8488 <sx12xx_lora_send_async+0x4c>)
	dev_data.operation_done = async;
    8466:	600b      	str	r3, [r1, #0]
	Radio.SetMaxPayloadLength(MODEM_LORA, data_len);
    8468:	b2d4      	uxtb	r4, r2
    846a:	6d73      	ldr	r3, [r6, #84]	; 0x54
    846c:	4621      	mov	r1, r4
    846e:	4798      	blx	r3

	Radio.Send(data, data_len);
    8470:	4628      	mov	r0, r5
    8472:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8474:	4621      	mov	r1, r4
    8476:	4798      	blx	r3

	return 0;
    8478:	2000      	movs	r0, #0
}
    847a:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    847c:	f06f 000f 	mvn.w	r0, #15
    8480:	e7fb      	b.n	847a <sx12xx_lora_send_async+0x3e>
    8482:	bf00      	nop
    8484:	20000e24 	.word	0x20000e24
    8488:	0001f244 	.word	0x0001f244

0000848c <sx12xx_lora_send>:
{
    848c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    8490:	2700      	movs	r7, #0
{
    8492:	b08f      	sub	sp, #60	; 0x3c
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    8494:	ab05      	add	r3, sp, #20
	if (!dev_data.tx_cfg.frequency) {
    8496:	4e31      	ldr	r6, [pc, #196]	; (855c <sx12xx_lora_send+0xd0>)
{
    8498:	4680      	mov	r8, r0
    849a:	4689      	mov	r9, r1
    849c:	4614      	mov	r4, r2
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    849e:	4639      	mov	r1, r7
    84a0:	2210      	movs	r2, #16
    84a2:	a809      	add	r0, sp, #36	; 0x24
    84a4:	2501      	movs	r5, #1
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    84a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
    84aa:	e9cd 7707 	strd	r7, r7, [sp, #28]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    84ae:	f015 fee3 	bl	1e278 <memset>
    84b2:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
	if (!dev_data.tx_cfg.frequency) {
    84b6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    84b8:	ab05      	add	r3, sp, #20
    84ba:	930d      	str	r3, [sp, #52]	; 0x34
	if (!dev_data.tx_cfg.frequency) {
    84bc:	2a00      	cmp	r2, #0
    84be:	d049      	beq.n	8554 <sx12xx_lora_send+0xc8>
	ret = sx12xx_lora_send_async(dev, data, data_len, &done);
    84c0:	4622      	mov	r2, r4
    84c2:	4649      	mov	r1, r9
    84c4:	4640      	mov	r0, r8
    84c6:	f7ff ffb9 	bl	843c <sx12xx_lora_send_async>
	if (ret < 0) {
    84ca:	2800      	cmp	r0, #0
    84cc:	db28      	blt.n	8520 <sx12xx_lora_send+0x94>
	air_time = Radio.TimeOnAir(MODEM_LORA,
    84ce:	b2e4      	uxtb	r4, r4
    84d0:	e9cd 7401 	strd	r7, r4, [sp, #4]
    84d4:	9503      	str	r5, [sp, #12]
    84d6:	8e33      	ldrh	r3, [r6, #48]	; 0x30
    84d8:	4c21      	ldr	r4, [pc, #132]	; (8560 <sx12xx_lora_send+0xd4>)
    84da:	9300      	str	r3, [sp, #0]
    84dc:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
    84e0:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
    84e4:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
    84e8:	6a64      	ldr	r4, [r4, #36]	; 0x24
    84ea:	4628      	mov	r0, r5
    84ec:	47a0      	blx	r4
    84ee:	f240 36e7 	movw	r6, #999	; 0x3e7
	ret = k_poll(&evt, 1, K_MSEC(2 * air_time));
    84f2:	fa00 f105 	lsl.w	r1, r0, r5
    84f6:	2700      	movs	r7, #0
    84f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    84fc:	fbe0 6701 	umlal	r6, r7, r0, r1
    8500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8504:	2300      	movs	r3, #0
    8506:	4630      	mov	r0, r6
    8508:	4639      	mov	r1, r7
    850a:	f7f8 fad5 	bl	ab8 <__aeabi_uldivmod>
    850e:	4602      	mov	r2, r0
    8510:	460b      	mov	r3, r1
	return z_impl_k_poll(events, num_events, timeout);
    8512:	4629      	mov	r1, r5
    8514:	a809      	add	r0, sp, #36	; 0x24
    8516:	f004 fc49 	bl	cdac <z_impl_k_poll>
	if (ret < 0) {
    851a:	2800      	cmp	r0, #0
    851c:	db03      	blt.n	8526 <sx12xx_lora_send+0x9a>
	return 0;
    851e:	2000      	movs	r0, #0
}
    8520:	b00f      	add	sp, #60	; 0x3c
    8522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8526:	4b0f      	ldr	r3, [pc, #60]	; (8564 <sx12xx_lora_send+0xd8>)
    8528:	490f      	ldr	r1, [pc, #60]	; (8568 <sx12xx_lora_send+0xdc>)
		LOG_ERR("Packet transmission failed!");
    852a:	4810      	ldr	r0, [pc, #64]	; (856c <sx12xx_lora_send+0xe0>)
    852c:	1ac9      	subs	r1, r1, r3
    852e:	08c9      	lsrs	r1, r1, #3
    8530:	0189      	lsls	r1, r1, #6
    8532:	f041 0101 	orr.w	r1, r1, #1
    8536:	f014 fa05 	bl	1c944 <log_0>
		if (!modem_release(&dev_data)) {
    853a:	f7ff feb1 	bl	82a0 <modem_release.constprop.0>
    853e:	2800      	cmp	r0, #0
    8540:	d1ed      	bne.n	851e <sx12xx_lora_send+0x92>
    8542:	f04f 32ff 	mov.w	r2, #4294967295
    8546:	f04f 33ff 	mov.w	r3, #4294967295
    854a:	4629      	mov	r1, r5
    854c:	a809      	add	r0, sp, #36	; 0x24
    854e:	f004 fc2d 	bl	cdac <z_impl_k_poll>
    8552:	e7e4      	b.n	851e <sx12xx_lora_send+0x92>
		return -EINVAL;
    8554:	f06f 0015 	mvn.w	r0, #21
    8558:	e7e2      	b.n	8520 <sx12xx_lora_send+0x94>
    855a:	bf00      	nop
    855c:	20000e24 	.word	0x20000e24
    8560:	0001f244 	.word	0x0001f244
    8564:	0001ea10 	.word	0x0001ea10
    8568:	0001ea60 	.word	0x0001ea60
    856c:	00020280 	.word	0x00020280

00008570 <sx12xx_lora_recv>:

int sx12xx_lora_recv(const struct device *dev, uint8_t *data, uint8_t size,
		     k_timeout_t timeout, int16_t *rssi, int8_t *snr)
{
    8570:	b5f0      	push	{r4, r5, r6, r7, lr}
    8572:	b08d      	sub	sp, #52	; 0x34
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    8574:	2400      	movs	r4, #0
{
    8576:	f88d 2007 	strb.w	r2, [sp, #7]
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    857a:	ae03      	add	r6, sp, #12
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    857c:	2210      	movs	r2, #16
{
    857e:	460f      	mov	r7, r1
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    8580:	a807      	add	r0, sp, #28
    8582:	4621      	mov	r1, r4
	struct k_poll_signal done = K_POLL_SIGNAL_INITIALIZER(done);
    8584:	e9cd 6603 	strd	r6, r6, [sp, #12]
    8588:	e9cd 4405 	strd	r4, r4, [sp, #20]
	struct k_poll_event evt = K_POLL_EVENT_INITIALIZER(
    858c:	f015 fe74 	bl	1e278 <memset>
    8590:	4b25      	ldr	r3, [pc, #148]	; (8628 <sx12xx_lora_recv+0xb8>)
    8592:	960b      	str	r6, [sp, #44]	; 0x2c
    8594:	2501      	movs	r5, #1
    8596:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
    859a:	f103 0234 	add.w	r2, r3, #52	; 0x34
    859e:	f3bf 8f5b 	dmb	ish
    85a2:	e852 1f00 	ldrex	r1, [r2]
    85a6:	42a1      	cmp	r1, r4
    85a8:	d103      	bne.n	85b2 <sx12xx_lora_recv+0x42>
    85aa:	e842 5000 	strex	r0, r5, [r2]
    85ae:	2800      	cmp	r0, #0
    85b0:	d1f7      	bne.n	85a2 <sx12xx_lora_recv+0x32>
    85b2:	f3bf 8f5b 	dmb	ish
		K_POLL_MODE_NOTIFY_ONLY,
		&done);
	int ret;

	/* Ensure available, decremented by sx12xx_ev_rx_done or on timeout */
	if (!modem_acquire(&dev_data)) {
    85b6:	d133      	bne.n	8620 <sx12xx_lora_recv+0xb0>

	/* Store operation signal */
	dev_data.operation_done = &done;
	/* Set data output location */
	dev_data.rx_params.buf = data;
	dev_data.rx_params.size = &size;
    85b8:	f10d 0207 	add.w	r2, sp, #7
	dev_data.operation_done = &done;
    85bc:	601e      	str	r6, [r3, #0]
	dev_data.rx_params.size = &size;
    85be:	63da      	str	r2, [r3, #60]	; 0x3c
	dev_data.rx_params.rssi = rssi;
	dev_data.rx_params.snr = snr;

	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    85c0:	4e1a      	ldr	r6, [pc, #104]	; (862c <sx12xx_lora_recv+0xbc>)
	dev_data.rx_params.rssi = rssi;
    85c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    85c4:	641a      	str	r2, [r3, #64]	; 0x40
	dev_data.rx_params.snr = snr;
    85c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    85c8:	645a      	str	r2, [r3, #68]	; 0x44
	dev_data.rx_params.buf = data;
    85ca:	639f      	str	r7, [r3, #56]	; 0x38
	Radio.SetMaxPayloadLength(MODEM_LORA, 255);
    85cc:	21ff      	movs	r1, #255	; 0xff
    85ce:	6d73      	ldr	r3, [r6, #84]	; 0x54
    85d0:	4628      	mov	r0, r5
    85d2:	4798      	blx	r3
	Radio.Rx(0);
    85d4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    85d6:	4620      	mov	r0, r4
    85d8:	4798      	blx	r3
    85da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    85de:	4629      	mov	r1, r5
    85e0:	a807      	add	r0, sp, #28
    85e2:	f004 fbe3 	bl	cdac <z_impl_k_poll>

	ret = k_poll(&evt, 1, timeout);
	if (ret < 0) {
    85e6:	1e04      	subs	r4, r0, #0
    85e8:	da0a      	bge.n	8600 <sx12xx_lora_recv+0x90>
		if (!modem_release(&dev_data)) {
    85ea:	f7ff fe59 	bl	82a0 <modem_release.constprop.0>
    85ee:	b950      	cbnz	r0, 8606 <sx12xx_lora_recv+0x96>
    85f0:	f04f 32ff 	mov.w	r2, #4294967295
    85f4:	f04f 33ff 	mov.w	r3, #4294967295
    85f8:	4629      	mov	r1, r5
    85fa:	a807      	add	r0, sp, #28
    85fc:	f004 fbd6 	bl	cdac <z_impl_k_poll>
		}
		LOG_INF("Receive timeout");
		return ret;
	}

	return size;
    8600:	f89d 4007 	ldrb.w	r4, [sp, #7]
    8604:	e009      	b.n	861a <sx12xx_lora_recv+0xaa>
    8606:	490a      	ldr	r1, [pc, #40]	; (8630 <sx12xx_lora_recv+0xc0>)
    8608:	4b0a      	ldr	r3, [pc, #40]	; (8634 <sx12xx_lora_recv+0xc4>)
		LOG_INF("Receive timeout");
    860a:	480b      	ldr	r0, [pc, #44]	; (8638 <sx12xx_lora_recv+0xc8>)
    860c:	1ac9      	subs	r1, r1, r3
    860e:	08c9      	lsrs	r1, r1, #3
    8610:	0189      	lsls	r1, r1, #6
    8612:	f041 0103 	orr.w	r1, r1, #3
    8616:	f014 f995 	bl	1c944 <log_0>
}
    861a:	4620      	mov	r0, r4
    861c:	b00d      	add	sp, #52	; 0x34
    861e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
    8620:	f06f 040f 	mvn.w	r4, #15
    8624:	e7f9      	b.n	861a <sx12xx_lora_recv+0xaa>
    8626:	bf00      	nop
    8628:	20000e24 	.word	0x20000e24
    862c:	0001f244 	.word	0x0001f244
    8630:	0001ea60 	.word	0x0001ea60
    8634:	0001ea10 	.word	0x0001ea10
    8638:	0002029c 	.word	0x0002029c

0000863c <sx12xx_lora_config>:

int sx12xx_lora_config(const struct device *dev,
		       struct lora_modem_config *config)
{
    863c:	b5f0      	push	{r4, r5, r6, r7, lr}
    863e:	4d27      	ldr	r5, [pc, #156]	; (86dc <sx12xx_lora_config+0xa0>)
    8640:	f3bf 8f5b 	dmb	ish
    8644:	b08b      	sub	sp, #44	; 0x2c
    8646:	460c      	mov	r4, r1
    8648:	2601      	movs	r6, #1
    864a:	e855 3f00 	ldrex	r3, [r5]
    864e:	2b00      	cmp	r3, #0
    8650:	d103      	bne.n	865a <sx12xx_lora_config+0x1e>
    8652:	e845 6200 	strex	r2, r6, [r5]
    8656:	2a00      	cmp	r2, #0
    8658:	d1f7      	bne.n	864a <sx12xx_lora_config+0xe>
    865a:	f3bf 8f5b 	dmb	ish
	/* Ensure available, decremented after configuration */
	if (!modem_acquire(&dev_data)) {
    865e:	d139      	bne.n	86d4 <sx12xx_lora_config+0x98>
		return -EBUSY;
	}

	Radio.SetChannel(config->frequency);
    8660:	4f1f      	ldr	r7, [pc, #124]	; (86e0 <sx12xx_lora_config+0xa4>)
    8662:	6820      	ldr	r0, [r4, #0]
    8664:	68fb      	ldr	r3, [r7, #12]
    8666:	4798      	blx	r3

	if (config->tx) {
    8668:	7ae3      	ldrb	r3, [r4, #11]
    866a:	b303      	cbz	r3, 86ae <sx12xx_lora_config+0x72>
		/* Store TX config locally for airtime calculations */
		memcpy(&dev_data.tx_cfg, config, sizeof(dev_data.tx_cfg));
    866c:	6820      	ldr	r0, [r4, #0]
    866e:	6861      	ldr	r1, [r4, #4]
    8670:	f1a5 030c 	sub.w	r3, r5, #12
    8674:	c303      	stmia	r3!, {r0, r1}
    8676:	68a0      	ldr	r0, [r4, #8]
    8678:	6018      	str	r0, [r3, #0]
		/* Configure radio driver */
		Radio.SetTxConfig(MODEM_LORA, config->tx_power, 0,
    867a:	2200      	movs	r2, #0
    867c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
    8680:	e9cd 2307 	strd	r2, r3, [sp, #28]
    8684:	8923      	ldrh	r3, [r4, #8]
    8686:	9302      	str	r3, [sp, #8]
    8688:	79a3      	ldrb	r3, [r4, #6]
    868a:	9301      	str	r3, [sp, #4]
    868c:	7963      	ldrb	r3, [r4, #5]
    868e:	9300      	str	r3, [sp, #0]
    8690:	e9cd 2205 	strd	r2, r2, [sp, #20]
    8694:	e9cd 2603 	strd	r2, r6, [sp, #12]
    8698:	69fd      	ldr	r5, [r7, #28]
    869a:	7923      	ldrb	r3, [r4, #4]
    869c:	f994 100a 	ldrsb.w	r1, [r4, #10]
    86a0:	4630      	mov	r0, r6
    86a2:	47a8      	blx	r5
				  config->datarate, config->coding_rate,
				  0, config->preamble_len, 10, false, 0,
				  false, 0, 0, false, true);
	}

	modem_release(&dev_data);
    86a4:	f7ff fdfc 	bl	82a0 <modem_release.constprop.0>
	return 0;
    86a8:	2000      	movs	r0, #0
}
    86aa:	b00b      	add	sp, #44	; 0x2c
    86ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Radio.SetRxConfig(MODEM_LORA, config->bandwidth,
    86ae:	220a      	movs	r2, #10
    86b0:	9202      	str	r2, [sp, #8]
    86b2:	8922      	ldrh	r2, [r4, #8]
    86b4:	9303      	str	r3, [sp, #12]
    86b6:	e9cd 3200 	strd	r3, r2, [sp]
    86ba:	e9cd 3608 	strd	r3, r6, [sp, #32]
    86be:	e9cd 3306 	strd	r3, r3, [sp, #24]
    86c2:	e9cd 3304 	strd	r3, r3, [sp, #16]
    86c6:	69bd      	ldr	r5, [r7, #24]
    86c8:	79a3      	ldrb	r3, [r4, #6]
    86ca:	7962      	ldrb	r2, [r4, #5]
    86cc:	7921      	ldrb	r1, [r4, #4]
    86ce:	4630      	mov	r0, r6
    86d0:	47a8      	blx	r5
    86d2:	e7e7      	b.n	86a4 <sx12xx_lora_config+0x68>
		return -EBUSY;
    86d4:	f06f 000f 	mvn.w	r0, #15
    86d8:	e7e7      	b.n	86aa <sx12xx_lora_config+0x6e>
    86da:	bf00      	nop
    86dc:	20000e58 	.word	0x20000e58
    86e0:	0001f244 	.word	0x0001f244

000086e4 <sx12xx_lora_test_cw>:

int sx12xx_lora_test_cw(const struct device *dev, uint32_t frequency,
			int8_t tx_power,
			uint16_t duration)
{
    86e4:	b538      	push	{r3, r4, r5, lr}
    86e6:	4608      	mov	r0, r1
    86e8:	4611      	mov	r1, r2
    86ea:	461a      	mov	r2, r3
    86ec:	4b0b      	ldr	r3, [pc, #44]	; (871c <sx12xx_lora_test_cw+0x38>)
    86ee:	f3bf 8f5b 	dmb	ish
    86f2:	2401      	movs	r4, #1
    86f4:	e853 5f00 	ldrex	r5, [r3]
    86f8:	2d00      	cmp	r5, #0
    86fa:	d104      	bne.n	8706 <sx12xx_lora_test_cw+0x22>
    86fc:	e843 4c00 	strex	ip, r4, [r3]
    8700:	f1bc 0f00 	cmp.w	ip, #0
    8704:	d1f6      	bne.n	86f4 <sx12xx_lora_test_cw+0x10>
    8706:	f3bf 8f5b 	dmb	ish
	/* Ensure available, freed in sx12xx_ev_tx_done */
	if (!modem_acquire(&dev_data)) {
    870a:	d104      	bne.n	8716 <sx12xx_lora_test_cw+0x32>
		return -EBUSY;
	}

	Radio.SetTxContinuousWave(frequency, tx_power, duration);
    870c:	4b04      	ldr	r3, [pc, #16]	; (8720 <sx12xx_lora_test_cw+0x3c>)
    870e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8710:	4798      	blx	r3
	return 0;
    8712:	2000      	movs	r0, #0
}
    8714:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    8716:	f06f 000f 	mvn.w	r0, #15
    871a:	e7fb      	b.n	8714 <sx12xx_lora_test_cw+0x30>
    871c:	20000e58 	.word	0x20000e58
    8720:	0001f244 	.word	0x0001f244

00008724 <sx12xx_init>:

int sx12xx_init(const struct device *dev)
{
    8724:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8726:	480d      	ldr	r0, [pc, #52]	; (875c <sx12xx_init+0x38>)
    8728:	f3bf 8f5b 	dmb	ish
    872c:	f100 0334 	add.w	r3, r0, #52	; 0x34
    8730:	2400      	movs	r4, #0
    8732:	e853 2f00 	ldrex	r2, [r3]
    8736:	e843 4100 	strex	r1, r4, [r3]
    873a:	2900      	cmp	r1, #0
    873c:	d1f9      	bne.n	8732 <sx12xx_init+0xe>
    873e:	f3bf 8f5b 	dmb	ish
	atomic_set(&dev_data.modem_usage, 0);

	dev_data.events.TxDone = sx12xx_ev_tx_done;
	dev_data.events.RxDone = sx12xx_ev_rx_done;
	Radio.Init(&dev_data.events);
    8742:	4d07      	ldr	r5, [pc, #28]	; (8760 <sx12xx_init+0x3c>)
	dev_data.events.TxDone = sx12xx_ev_tx_done;
    8744:	4b07      	ldr	r3, [pc, #28]	; (8764 <sx12xx_init+0x40>)
    8746:	6043      	str	r3, [r0, #4]
	dev_data.events.RxDone = sx12xx_ev_rx_done;
    8748:	4b07      	ldr	r3, [pc, #28]	; (8768 <sx12xx_init+0x44>)
    874a:	60c3      	str	r3, [r0, #12]
	Radio.Init(&dev_data.events);
    874c:	682b      	ldr	r3, [r5, #0]
    874e:	3004      	adds	r0, #4
    8750:	4798      	blx	r3
	 * The required `lora_config` call before transmission or reception
	 * will bring the radio out of sleep mode before it is used. The radio
	 * is automatically placed back into sleep mode upon TX or RX
	 * completion.
	 */
	Radio.Sleep();
    8752:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    8754:	4798      	blx	r3

	return 0;
}
    8756:	4620      	mov	r0, r4
    8758:	bd38      	pop	{r3, r4, r5, pc}
    875a:	bf00      	nop
    875c:	20000e24 	.word	0x20000e24
    8760:	0001f244 	.word	0x0001f244
    8764:	000082f9 	.word	0x000082f9
    8768:	00008319 	.word	0x00008319

0000876c <sx127x_dio_work_handle>:
	k_sleep(K_MSEC(6));
}

static void sx127x_dio_work_handle(struct k_work *work)
{
	int dio = work - dev_data.dio_work;
    876c:	4b03      	ldr	r3, [pc, #12]	; (877c <sx127x_dio_work_handle+0x10>)
    876e:	1ac0      	subs	r0, r0, r3
    8770:	1100      	asrs	r0, r0, #4

	(*DioIrq[dio])(NULL);
    8772:	4b03      	ldr	r3, [pc, #12]	; (8780 <sx127x_dio_work_handle+0x14>)
    8774:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8778:	2000      	movs	r0, #0
    877a:	4718      	bx	r3
    877c:	20000ea0 	.word	0x20000ea0
    8780:	20000124 	.word	0x20000124

00008784 <sx127x_irq_callback>:
}

static void sx127x_irq_callback(const struct device *dev,
				struct gpio_callback *cb, uint32_t pins)
{
    8784:	b570      	push	{r4, r5, r6, lr}
	unsigned int i, pin;

	pin = find_lsb_set(pins) - 1;

	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (dev == dev_data.dio_dev[i] &&
    8786:	4c0f      	ldr	r4, [pc, #60]	; (87c4 <sx127x_irq_callback+0x40>)
    8788:	6963      	ldr	r3, [r4, #20]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    878a:	2a00      	cmp	r2, #0
    878c:	fa92 f5a2 	rbit	r5, r2
    8790:	fab5 f585 	clz	r5, r5
    8794:	bf08      	it	eq
    8796:	f04f 35ff 	moveq.w	r5, #4294967295
    879a:	4298      	cmp	r0, r3
{
    879c:	4606      	mov	r6, r0
		if (dev == dev_data.dio_dev[i] &&
    879e:	d105      	bne.n	87ac <sx127x_irq_callback+0x28>
    87a0:	2d0a      	cmp	r5, #10
    87a2:	d103      	bne.n	87ac <sx127x_irq_callback+0x28>
		    pin == sx127x_dios[i].pin) {
			k_work_submit(&dev_data.dio_work[i]);
    87a4:	f104 001c 	add.w	r0, r4, #28
    87a8:	f003 fd30 	bl	c20c <k_work_submit>
		if (dev == dev_data.dio_dev[i] &&
    87ac:	69a3      	ldr	r3, [r4, #24]
    87ae:	429e      	cmp	r6, r3
    87b0:	d106      	bne.n	87c0 <sx127x_irq_callback+0x3c>
    87b2:	2d0a      	cmp	r5, #10
    87b4:	d104      	bne.n	87c0 <sx127x_irq_callback+0x3c>
		}
	}
}
    87b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_submit(&dev_data.dio_work[i]);
    87ba:	4803      	ldr	r0, [pc, #12]	; (87c8 <sx127x_irq_callback+0x44>)
    87bc:	f003 bd26 	b.w	c20c <k_work_submit>
}
    87c0:	bd70      	pop	{r4, r5, r6, pc}
    87c2:	bf00      	nop
    87c4:	20000e84 	.word	0x20000e84
    87c8:	20000eb0 	.word	0x20000eb0

000087cc <SX1276Reset>:
{
    87cc:	b510      	push	{r4, lr}
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 1);
    87ce:	4c09      	ldr	r4, [pc, #36]	; (87f4 <SX1276Reset+0x28>)
    87d0:	2101      	movs	r1, #1
    87d2:	6820      	ldr	r0, [r4, #0]
    87d4:	f014 fe8f 	bl	1d4f6 <gpio_pin_set.constprop.0>
	return z_impl_k_sleep(timeout);
    87d8:	2100      	movs	r1, #0
    87da:	2021      	movs	r0, #33	; 0x21
    87dc:	f004 f83e 	bl	c85c <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
    87e0:	6820      	ldr	r0, [r4, #0]
    87e2:	2100      	movs	r1, #0
    87e4:	f014 fe87 	bl	1d4f6 <gpio_pin_set.constprop.0>
    87e8:	20c5      	movs	r0, #197	; 0xc5
}
    87ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87ee:	2100      	movs	r1, #0
    87f0:	f004 b834 	b.w	c85c <z_impl_k_sleep>
    87f4:	20000e84 	.word	0x20000e84

000087f8 <SX1276IoIrqInit>:

void SX127xIoIrqInit(DioIrqHandler **irqHandlers)
{
    87f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87fc:	4c3e      	ldr	r4, [pc, #248]	; (88f8 <SX1276IoIrqInit+0x100>)
    87fe:	4e3f      	ldr	r6, [pc, #252]	; (88fc <SX1276IoIrqInit+0x104>)
    8800:	4d3f      	ldr	r5, [pc, #252]	; (8900 <SX1276IoIrqInit+0x108>)
    8802:	4680      	mov	r8, r0
    8804:	f1a0 0a04 	sub.w	sl, r0, #4
    8808:	f1a4 0914 	sub.w	r9, r4, #20
	unsigned int i;
	static struct gpio_callback callbacks[SX127X_MAX_DIO];

	/* Setup DIO gpios */
	for (i = 0; i < SX127X_MAX_DIO; i++) {
		if (!irqHandlers[i]) {
    880c:	f8cd a004 	str.w	sl, [sp, #4]
    8810:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    8814:	2b00      	cmp	r3, #0
    8816:	d061      	beq.n	88dc <SX1276IoIrqInit+0xe4>
			continue;
		}

		dev_data.dio_dev[i] = device_get_binding(sx127x_dios[i].port);
    8818:	682f      	ldr	r7, [r5, #0]
    881a:	4638      	mov	r0, r7
    881c:	f003 f882 	bl	b924 <z_impl_device_get_binding>
    8820:	6020      	str	r0, [r4, #0]
		if (dev_data.dio_dev[i] == NULL) {
    8822:	b968      	cbnz	r0, 8840 <SX1276IoIrqInit+0x48>
    8824:	4b37      	ldr	r3, [pc, #220]	; (8904 <SX1276IoIrqInit+0x10c>)
    8826:	4a38      	ldr	r2, [pc, #224]	; (8908 <SX1276IoIrqInit+0x110>)
			LOG_ERR("Cannot get pointer to %s device",
    8828:	4838      	ldr	r0, [pc, #224]	; (890c <SX1276IoIrqInit+0x114>)
    882a:	1ad2      	subs	r2, r2, r3
    882c:	08d2      	lsrs	r2, r2, #3
    882e:	0192      	lsls	r2, r2, #6
    8830:	f042 0201 	orr.w	r2, r2, #1
    8834:	4639      	mov	r1, r7
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
					     sx127x_dios[i].pin,
					     GPIO_INT_EDGE_TO_ACTIVE);
	}

}
    8836:	b003      	add	sp, #12
    8838:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot get pointer to %s device",
    883c:	f014 b88f 	b.w	1c95e <log_1>
		k_work_init(&dev_data.dio_work[i], sx127x_dio_work_handle);
    8840:	f109 001c 	add.w	r0, r9, #28
    8844:	4932      	ldr	r1, [pc, #200]	; (8910 <SX1276IoIrqInit+0x118>)
    8846:	f015 f9e2 	bl	1dc0e <k_work_init>
				   | sx127x_dios[i].flags);
    884a:	796b      	ldrb	r3, [r5, #5]
		gpio_pin_configure(dev_data.dio_dev[i], sx127x_dios[i].pin,
    884c:	6820      	ldr	r0, [r4, #0]
    884e:	792f      	ldrb	r7, [r5, #4]
    8850:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    8854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	struct gpio_driver_data *data =
    8858:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    885c:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    8860:	f8dc 1000 	ldr.w	r1, [ip]
    8864:	f013 0f01 	tst.w	r3, #1
    8868:	f04f 0301 	mov.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    886c:	fa03 f307 	lsl.w	r3, r3, r7
    8870:	bf14      	ite	ne
    8872:	430b      	orrne	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    8874:	ea21 0303 	biceq.w	r3, r1, r3
    8878:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
    887c:	4639      	mov	r1, r7
    887e:	f8de 3000 	ldr.w	r3, [lr]
    8882:	4798      	blx	r3
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    8884:	4b23      	ldr	r3, [pc, #140]	; (8914 <SX1276IoIrqInit+0x11c>)
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
    8886:	6820      	ldr	r0, [r4, #0]
				   BIT(sx127x_dios[i].pin));
    8888:	2201      	movs	r2, #1
    888a:	fa02 fb07 	lsl.w	fp, r2, r7
	callback->pin_mask = pin_mask;
    888e:	e9c6 3b01 	strd	r3, fp, [r6, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    8892:	6883      	ldr	r3, [r0, #8]
    8894:	69db      	ldr	r3, [r3, #28]
    8896:	b963      	cbnz	r3, 88b2 <SX1276IoIrqInit+0xba>
    8898:	4b1a      	ldr	r3, [pc, #104]	; (8904 <SX1276IoIrqInit+0x10c>)
    889a:	491b      	ldr	r1, [pc, #108]	; (8908 <SX1276IoIrqInit+0x110>)
			LOG_ERR("Could not set gpio callback.");
    889c:	481e      	ldr	r0, [pc, #120]	; (8918 <SX1276IoIrqInit+0x120>)
    889e:	1ac9      	subs	r1, r1, r3
    88a0:	08c9      	lsrs	r1, r1, #3
    88a2:	0189      	lsls	r1, r1, #6
    88a4:	f041 0101 	orr.w	r1, r1, #1
}
    88a8:	b003      	add	sp, #12
    88aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Could not set gpio callback.");
    88ae:	f014 b849 	b.w	1c944 <log_0>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    88b2:	4631      	mov	r1, r6
    88b4:	4798      	blx	r3
		if (gpio_add_callback(dev_data.dio_dev[i], &callbacks[i]) < 0) {
    88b6:	2800      	cmp	r0, #0
    88b8:	dbee      	blt.n	8898 <SX1276IoIrqInit+0xa0>
		gpio_pin_interrupt_configure(dev_data.dio_dev[i],
    88ba:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    88bc:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    88be:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    88c0:	6812      	ldr	r2, [r2, #0]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    88c2:	ea1b 0f02 	tst.w	fp, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
    88c6:	4639      	mov	r1, r7
    88c8:	f8d3 b018 	ldr.w	fp, [r3, #24]
    88cc:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    88d0:	bf14      	ite	ne
    88d2:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    88d6:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    88da:	47d8      	blx	fp
	for (i = 0; i < SX127X_MAX_DIO; i++) {
    88dc:	9b01      	ldr	r3, [sp, #4]
    88de:	4543      	cmp	r3, r8
    88e0:	f104 0404 	add.w	r4, r4, #4
    88e4:	f106 060c 	add.w	r6, r6, #12
    88e8:	f109 0910 	add.w	r9, r9, #16
    88ec:	f105 0508 	add.w	r5, r5, #8
    88f0:	d18c      	bne.n	880c <SX1276IoIrqInit+0x14>
}
    88f2:	b003      	add	sp, #12
    88f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88f8:	20000e98 	.word	0x20000e98
    88fc:	20000e6c 	.word	0x20000e6c
    8900:	0001f2b0 	.word	0x0001f2b0
    8904:	0001ea10 	.word	0x0001ea10
    8908:	0001ea58 	.word	0x0001ea58
    890c:	00020240 	.word	0x00020240
    8910:	0000876d 	.word	0x0000876d
    8914:	00008785 	.word	0x00008785
    8918:	000202ba 	.word	0x000202ba

0000891c <sx127x_read>:

	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
}

int sx127x_read(uint8_t reg_addr, uint8_t *data, uint8_t len)
{
    891c:	b510      	push	{r4, lr}
    891e:	b08a      	sub	sp, #40	; 0x28
	const struct spi_buf buf[2] = {
    8920:	f10d 0307 	add.w	r3, sp, #7
    8924:	9306      	str	r3, [sp, #24]
    8926:	2301      	movs	r3, #1
    8928:	e9cd 3107 	strd	r3, r1, [sp, #28]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
    892c:	4909      	ldr	r1, [pc, #36]	; (8954 <sx127x_read+0x38>)
	return sx127x_transceive(reg_addr, false, data, len);
    892e:	9209      	str	r2, [sp, #36]	; 0x24
	struct spi_buf_set tx = {
    8930:	2302      	movs	r3, #2
    8932:	aa06      	add	r2, sp, #24
    8934:	f88d 0007 	strb.w	r0, [sp, #7]
		const struct spi_buf_set rx = {
    8938:	e9cd 3203 	strd	r3, r2, [sp, #12]
		return spi_transceive(dev_data.spi, &dev_data.spi_cfg, &tx, &rx);
    893c:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
    893e:	9202      	str	r2, [sp, #8]
		const struct spi_buf_set rx = {
    8940:	9305      	str	r3, [sp, #20]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    8942:	6883      	ldr	r3, [r0, #8]
    8944:	aa02      	add	r2, sp, #8
    8946:	681c      	ldr	r4, [r3, #0]
    8948:	3108      	adds	r1, #8
    894a:	ab04      	add	r3, sp, #16
    894c:	47a0      	blx	r4
}
    894e:	b00a      	add	sp, #40	; 0x28
    8950:	bd10      	pop	{r4, pc}
    8952:	bf00      	nop
    8954:	20000e84 	.word	0x20000e84

00008958 <SX1276ReadBuffer>:
		LOG_ERR("Unable to write address: 0x%x", addr);
	}
}

void SX127xReadBuffer(uint32_t addr, uint8_t *buffer, uint8_t size)
{
    8958:	b510      	push	{r4, lr}
    895a:	4604      	mov	r4, r0
	int ret;

	ret = sx127x_read(addr, buffer, size);
    895c:	b2c0      	uxtb	r0, r0
    895e:	f7ff ffdd 	bl	891c <sx127x_read>
	if (ret < 0) {
    8962:	2800      	cmp	r0, #0
    8964:	da0c      	bge.n	8980 <SX1276ReadBuffer+0x28>
    8966:	4a07      	ldr	r2, [pc, #28]	; (8984 <SX1276ReadBuffer+0x2c>)
    8968:	4b07      	ldr	r3, [pc, #28]	; (8988 <SX1276ReadBuffer+0x30>)
		LOG_ERR("Unable to read address: 0x%x", addr);
    896a:	4808      	ldr	r0, [pc, #32]	; (898c <SX1276ReadBuffer+0x34>)
    896c:	1ad2      	subs	r2, r2, r3
    896e:	08d2      	lsrs	r2, r2, #3
    8970:	0192      	lsls	r2, r2, #6
    8972:	4621      	mov	r1, r4
    8974:	f042 0201 	orr.w	r2, r2, #1
	}
}
    8978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to read address: 0x%x", addr);
    897c:	f013 bfef 	b.w	1c95e <log_1>
}
    8980:	bd10      	pop	{r4, pc}
    8982:	bf00      	nop
    8984:	0001ea58 	.word	0x0001ea58
    8988:	0001ea10 	.word	0x0001ea10
    898c:	000202d7 	.word	0x000202d7

00008990 <sx127x_lora_init>:

	return 0;
}

static int sx127x_lora_init(const struct device *dev)
{
    8990:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8992:	4606      	mov	r6, r0
    8994:	4839      	ldr	r0, [pc, #228]	; (8a7c <sx127x_lora_init+0xec>)
	static struct spi_cs_control spi_cs;
#endif
	int ret;
	uint8_t regval;

	dev_data.spi = device_get_binding(DT_INST_BUS_LABEL(0));
    8996:	4d3a      	ldr	r5, [pc, #232]	; (8a80 <sx127x_lora_init+0xf0>)
    8998:	f002 ffc4 	bl	b924 <z_impl_device_get_binding>
    899c:	6068      	str	r0, [r5, #4]
	if (!dev_data.spi) {
    899e:	b978      	cbnz	r0, 89c0 <sx127x_lora_init+0x30>
    89a0:	4b38      	ldr	r3, [pc, #224]	; (8a84 <sx127x_lora_init+0xf4>)
    89a2:	4a39      	ldr	r2, [pc, #228]	; (8a88 <sx127x_lora_init+0xf8>)
		LOG_ERR("Cannot get pointer to %s device",
    89a4:	4935      	ldr	r1, [pc, #212]	; (8a7c <sx127x_lora_init+0xec>)
    89a6:	4839      	ldr	r0, [pc, #228]	; (8a8c <sx127x_lora_init+0xfc>)
    89a8:	1ad2      	subs	r2, r2, r3
    89aa:	08d2      	lsrs	r2, r2, #3
    89ac:	0192      	lsls	r2, r2, #6
    89ae:	f042 0201 	orr.w	r2, r2, #1
    89b2:	f013 ffd4 	bl	1c95e <log_1>
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
    89b6:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Failed to initialize SX12xx common");
		return ret;
	}

	return 0;
}
    89ba:	4620      	mov	r0, r4
    89bc:	b002      	add	sp, #8
    89be:	bd70      	pop	{r4, r5, r6, pc}
	dev_data.spi_cfg.operation = SPI_WORD_SET(8) | SPI_TRANSFER_MSB;
    89c0:	4a33      	ldr	r2, [pc, #204]	; (8a90 <sx127x_lora_init+0x100>)
    89c2:	f44f 7380 	mov.w	r3, #256	; 0x100
    89c6:	e9c5 2302 	strd	r2, r3, [r5, #8]
    89ca:	4832      	ldr	r0, [pc, #200]	; (8a94 <sx127x_lora_init+0x104>)
    89cc:	f002 ffaa 	bl	b924 <z_impl_device_get_binding>
	spi_cs.gpio_dev = device_get_binding(DT_INST_SPI_DEV_CS_GPIOS_LABEL(0));
    89d0:	4b31      	ldr	r3, [pc, #196]	; (8a98 <sx127x_lora_init+0x108>)
    89d2:	6018      	str	r0, [r3, #0]
	if (!spi_cs.gpio_dev) {
    89d4:	b968      	cbnz	r0, 89f2 <sx127x_lora_init+0x62>
    89d6:	4a2c      	ldr	r2, [pc, #176]	; (8a88 <sx127x_lora_init+0xf8>)
    89d8:	4b2a      	ldr	r3, [pc, #168]	; (8a84 <sx127x_lora_init+0xf4>)
		LOG_ERR("Cannot get pointer to %s device",
    89da:	492e      	ldr	r1, [pc, #184]	; (8a94 <sx127x_lora_init+0x104>)
    89dc:	482b      	ldr	r0, [pc, #172]	; (8a8c <sx127x_lora_init+0xfc>)
    89de:	1ad2      	subs	r2, r2, r3
    89e0:	08d2      	lsrs	r2, r2, #3
    89e2:	0192      	lsls	r2, r2, #6
    89e4:	f042 0201 	orr.w	r2, r2, #1
    89e8:	f013 ffb9 	bl	1c95e <log_1>
		return -EIO;
    89ec:	f06f 0404 	mvn.w	r4, #4
    89f0:	e7e3      	b.n	89ba <sx127x_lora_init+0x2a>
	spi_cs.delay = 0U;
    89f2:	2200      	movs	r2, #0
    89f4:	605a      	str	r2, [r3, #4]
	spi_cs.gpio_pin = GPIO_CS_PIN;
    89f6:	f240 120d 	movw	r2, #269	; 0x10d
    89fa:	811a      	strh	r2, [r3, #8]
	dev_data.spi_cfg.cs = &spi_cs;
    89fc:	612b      	str	r3, [r5, #16]
	ret = sx12xx_configure_pin(reset, GPIO_OUTPUT_ACTIVE);
    89fe:	4927      	ldr	r1, [pc, #156]	; (8a9c <sx127x_lora_init+0x10c>)
    8a00:	f641 2301 	movw	r3, #6657	; 0x1a01
    8a04:	221f      	movs	r2, #31
    8a06:	4628      	mov	r0, r5
    8a08:	f7ff fcc8 	bl	839c <__sx12xx_configure_pin>
	if (ret) {
    8a0c:	4604      	mov	r4, r0
    8a0e:	2800      	cmp	r0, #0
    8a10:	d1d3      	bne.n	89ba <sx127x_lora_init+0x2a>
    8a12:	2100      	movs	r1, #0
    8a14:	f640 40cd 	movw	r0, #3277	; 0xccd
    8a18:	f003 ff20 	bl	c85c <z_impl_k_sleep>
	gpio_pin_set(dev_data.reset, GPIO_RESET_PIN, 0);
    8a1c:	6828      	ldr	r0, [r5, #0]
    8a1e:	4621      	mov	r1, r4
    8a20:	f014 fd69 	bl	1d4f6 <gpio_pin_set.constprop.0>
    8a24:	2100      	movs	r1, #0
    8a26:	f640 40cd 	movw	r0, #3277	; 0xccd
    8a2a:	f003 ff17 	bl	c85c <z_impl_k_sleep>
	ret = sx127x_read(REG_VERSION, &regval, 1);
    8a2e:	2201      	movs	r2, #1
    8a30:	f10d 0107 	add.w	r1, sp, #7
    8a34:	2042      	movs	r0, #66	; 0x42
    8a36:	f7ff ff71 	bl	891c <sx127x_read>
	if (ret < 0) {
    8a3a:	4d13      	ldr	r5, [pc, #76]	; (8a88 <sx127x_lora_init+0xf8>)
    8a3c:	4b11      	ldr	r3, [pc, #68]	; (8a84 <sx127x_lora_init+0xf4>)
    8a3e:	1aed      	subs	r5, r5, r3
    8a40:	08ed      	lsrs	r5, r5, #3
    8a42:	2800      	cmp	r0, #0
    8a44:	ea4f 1585 	mov.w	r5, r5, lsl #6
    8a48:	da05      	bge.n	8a56 <sx127x_lora_init+0xc6>
		LOG_ERR("Unable to read version info");
    8a4a:	4815      	ldr	r0, [pc, #84]	; (8aa0 <sx127x_lora_init+0x110>)
    8a4c:	f045 0101 	orr.w	r1, r5, #1
    8a50:	f013 ff78 	bl	1c944 <log_0>
    8a54:	e7ca      	b.n	89ec <sx127x_lora_init+0x5c>
	LOG_INF("SX127x version 0x%02x found", regval);
    8a56:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8a5a:	4812      	ldr	r0, [pc, #72]	; (8aa4 <sx127x_lora_init+0x114>)
    8a5c:	f045 0203 	orr.w	r2, r5, #3
    8a60:	f013 ff7d 	bl	1c95e <log_1>
	ret = sx12xx_init(dev);
    8a64:	4630      	mov	r0, r6
    8a66:	f7ff fe5d 	bl	8724 <sx12xx_init>
	if (ret < 0) {
    8a6a:	1e06      	subs	r6, r0, #0
    8a6c:	daa5      	bge.n	89ba <sx127x_lora_init+0x2a>
		LOG_ERR("Failed to initialize SX12xx common");
    8a6e:	480e      	ldr	r0, [pc, #56]	; (8aa8 <sx127x_lora_init+0x118>)
    8a70:	f045 0101 	orr.w	r1, r5, #1
    8a74:	f013 ff66 	bl	1c944 <log_0>
		return ret;
    8a78:	4634      	mov	r4, r6
    8a7a:	e79e      	b.n	89ba <sx127x_lora_init+0x2a>
    8a7c:	00020219 	.word	0x00020219
    8a80:	20000e84 	.word	0x20000e84
    8a84:	0001ea10 	.word	0x0001ea10
    8a88:	0001ea58 	.word	0x0001ea58
    8a8c:	00020240 	.word	0x00020240
    8a90:	000f4240 	.word	0x000f4240
    8a94:	000200b6 	.word	0x000200b6
    8a98:	20000ec0 	.word	0x20000ec0
    8a9c:	000200bd 	.word	0x000200bd
    8aa0:	000202f4 	.word	0x000202f4
    8aa4:	00020310 	.word	0x00020310
    8aa8:	0002032c 	.word	0x0002032c

00008aac <sx127x_write>:
{
    8aac:	b510      	push	{r4, lr}
    8aae:	b088      	sub	sp, #32
	const struct spi_buf buf[2] = {
    8ab0:	f10d 0307 	add.w	r3, sp, #7
    8ab4:	9304      	str	r3, [sp, #16]
    8ab6:	2301      	movs	r3, #1
    8ab8:	e9cd 3105 	strd	r3, r1, [sp, #20]
	struct spi_buf_set tx = {
    8abc:	ab04      	add	r3, sp, #16
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
    8abe:	4909      	ldr	r1, [pc, #36]	; (8ae4 <sx127x_write+0x38>)
	struct spi_buf_set tx = {
    8ac0:	9302      	str	r3, [sp, #8]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    8ac2:	f060 007f 	orn	r0, r0, #127	; 0x7f
	struct spi_buf_set tx = {
    8ac6:	2302      	movs	r3, #2
    8ac8:	f88d 0007 	strb.w	r0, [sp, #7]
	return sx127x_transceive(reg_addr | BIT(7), true, data, len);
    8acc:	9207      	str	r2, [sp, #28]
	return spi_write(dev_data.spi, &dev_data.spi_cfg, &tx);
    8ace:	6848      	ldr	r0, [r1, #4]
	struct spi_buf_set tx = {
    8ad0:	9303      	str	r3, [sp, #12]
    8ad2:	6883      	ldr	r3, [r0, #8]
    8ad4:	aa02      	add	r2, sp, #8
    8ad6:	681c      	ldr	r4, [r3, #0]
    8ad8:	3108      	adds	r1, #8
    8ada:	2300      	movs	r3, #0
    8adc:	47a0      	blx	r4
}
    8ade:	b008      	add	sp, #32
    8ae0:	bd10      	pop	{r4, pc}
    8ae2:	bf00      	nop
    8ae4:	20000e84 	.word	0x20000e84

00008ae8 <SX1276WriteBuffer>:
{
    8ae8:	b510      	push	{r4, lr}
    8aea:	4604      	mov	r4, r0
	ret = sx127x_write(addr, buffer, size);
    8aec:	b2c0      	uxtb	r0, r0
    8aee:	f7ff ffdd 	bl	8aac <sx127x_write>
	if (ret < 0) {
    8af2:	2800      	cmp	r0, #0
    8af4:	da0c      	bge.n	8b10 <SX1276WriteBuffer+0x28>
    8af6:	4a07      	ldr	r2, [pc, #28]	; (8b14 <SX1276WriteBuffer+0x2c>)
    8af8:	4b07      	ldr	r3, [pc, #28]	; (8b18 <SX1276WriteBuffer+0x30>)
		LOG_ERR("Unable to write address: 0x%x", addr);
    8afa:	4808      	ldr	r0, [pc, #32]	; (8b1c <SX1276WriteBuffer+0x34>)
    8afc:	1ad2      	subs	r2, r2, r3
    8afe:	08d2      	lsrs	r2, r2, #3
    8b00:	0192      	lsls	r2, r2, #6
    8b02:	4621      	mov	r1, r4
    8b04:	f042 0201 	orr.w	r2, r2, #1
}
    8b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to write address: 0x%x", addr);
    8b0c:	f013 bf27 	b.w	1c95e <log_1>
}
    8b10:	bd10      	pop	{r4, pc}
    8b12:	bf00      	nop
    8b14:	0001ea58 	.word	0x0001ea58
    8b18:	0001ea10 	.word	0x0001ea10
    8b1c:	0002034f 	.word	0x0002034f

00008b20 <SX1276SetRfTxPower>:
{
    8b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t pa_config = 0;
    8b22:	2300      	movs	r3, #0
{
    8b24:	4605      	mov	r5, r0
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    8b26:	2201      	movs	r2, #1
    8b28:	f10d 0107 	add.w	r1, sp, #7
    8b2c:	204d      	movs	r0, #77	; 0x4d
	uint8_t pa_config = 0;
    8b2e:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t pa_dac = 0;
    8b32:	f88d 3007 	strb.w	r3, [sp, #7]
	ret = sx127x_read(REG_PADAC, &pa_dac, 1);
    8b36:	f7ff fef1 	bl	891c <sx127x_read>
	if (ret < 0) {
    8b3a:	2800      	cmp	r0, #0
    8b3c:	da0b      	bge.n	8b56 <SX1276SetRfTxPower+0x36>
    8b3e:	4928      	ldr	r1, [pc, #160]	; (8be0 <SX1276SetRfTxPower+0xc0>)
    8b40:	4b28      	ldr	r3, [pc, #160]	; (8be4 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to read PA dac");
    8b42:	4829      	ldr	r0, [pc, #164]	; (8be8 <SX1276SetRfTxPower+0xc8>)
    8b44:	1ac9      	subs	r1, r1, r3
    8b46:	08c9      	lsrs	r1, r1, #3
    8b48:	0189      	lsls	r1, r1, #6
    8b4a:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Unable to write PA dac");
    8b4e:	f013 fef9 	bl	1c944 <log_0>
}
    8b52:	b003      	add	sp, #12
    8b54:	bd30      	pop	{r4, r5, pc}
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    8b56:	2d14      	cmp	r5, #20
    8b58:	4629      	mov	r1, r5
    8b5a:	bfa8      	it	ge
    8b5c:	2114      	movge	r1, #20
    8b5e:	2902      	cmp	r1, #2
    8b60:	f89d 4007 	ldrb.w	r4, [sp, #7]
		pa_config |= SX127X_PACONFIG_PASELECT_PABOOST;
    8b64:	f99d 2006 	ldrsb.w	r2, [sp, #6]
    8b68:	bfb8      	it	lt
    8b6a:	2102      	movlt	r1, #2
		if (power > 17) {
    8b6c:	2d11      	cmp	r5, #17
	pa_dac &= ~SX127X_PADAC_20DBM_MASK;
    8b6e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
			pa_config |= (power - 5) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    8b72:	bfcc      	ite	gt
    8b74:	3905      	subgt	r1, #5
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    8b76:	3902      	suble	r1, #2
    8b78:	f062 037f 	orn	r3, r2, #127	; 0x7f
			pa_dac |= SX127X_PADAC_20DBM_ON;
    8b7c:	bfcc      	ite	gt
    8b7e:	f044 0407 	orrgt.w	r4, r4, #7
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    8b82:	f044 0404 	orrle.w	r4, r4, #4
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    8b86:	ea43 0301 	orr.w	r3, r3, r1
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    8b8a:	f04f 0201 	mov.w	r2, #1
    8b8e:	f10d 0106 	add.w	r1, sp, #6
    8b92:	f04f 0009 	mov.w	r0, #9
			pa_dac |= SX127X_PADAC_20DBM_ON;
    8b96:	bfcc      	ite	gt
    8b98:	f88d 4007 	strbgt.w	r4, [sp, #7]
			pa_dac |= SX127X_PADAC_20DBM_OFF;
    8b9c:	f88d 4007 	strble.w	r4, [sp, #7]
			pa_config |= (power - 2) & SX127X_PACONFIG_OUTPUTPOWER_MASK;
    8ba0:	f88d 3006 	strb.w	r3, [sp, #6]
	ret = sx127x_write(REG_PACONFIG, &pa_config, 1);
    8ba4:	f7ff ff82 	bl	8aac <sx127x_write>
	if (ret < 0) {
    8ba8:	2800      	cmp	r0, #0
    8baa:	da08      	bge.n	8bbe <SX1276SetRfTxPower+0x9e>
    8bac:	490c      	ldr	r1, [pc, #48]	; (8be0 <SX1276SetRfTxPower+0xc0>)
    8bae:	4b0d      	ldr	r3, [pc, #52]	; (8be4 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA config");
    8bb0:	480e      	ldr	r0, [pc, #56]	; (8bec <SX1276SetRfTxPower+0xcc>)
    8bb2:	1ac9      	subs	r1, r1, r3
    8bb4:	08c9      	lsrs	r1, r1, #3
    8bb6:	0189      	lsls	r1, r1, #6
    8bb8:	f041 0101 	orr.w	r1, r1, #1
    8bbc:	e7c7      	b.n	8b4e <SX1276SetRfTxPower+0x2e>
	ret = sx127x_write(REG_PADAC, &pa_dac, 1);
    8bbe:	2201      	movs	r2, #1
    8bc0:	f10d 0107 	add.w	r1, sp, #7
    8bc4:	204d      	movs	r0, #77	; 0x4d
    8bc6:	f7ff ff71 	bl	8aac <sx127x_write>
	if (ret < 0) {
    8bca:	2800      	cmp	r0, #0
    8bcc:	dac1      	bge.n	8b52 <SX1276SetRfTxPower+0x32>
    8bce:	4904      	ldr	r1, [pc, #16]	; (8be0 <SX1276SetRfTxPower+0xc0>)
    8bd0:	4b04      	ldr	r3, [pc, #16]	; (8be4 <SX1276SetRfTxPower+0xc4>)
		LOG_ERR("Unable to write PA dac");
    8bd2:	4807      	ldr	r0, [pc, #28]	; (8bf0 <SX1276SetRfTxPower+0xd0>)
    8bd4:	1ac9      	subs	r1, r1, r3
    8bd6:	08c9      	lsrs	r1, r1, #3
    8bd8:	0189      	lsls	r1, r1, #6
    8bda:	f041 0101 	orr.w	r1, r1, #1
    8bde:	e7b6      	b.n	8b4e <SX1276SetRfTxPower+0x2e>
    8be0:	0001ea58 	.word	0x0001ea58
    8be4:	0001ea10 	.word	0x0001ea10
    8be8:	0002036d 	.word	0x0002036d
    8bec:	00020383 	.word	0x00020383
    8bf0:	0002039d 	.word	0x0002039d

00008bf4 <SX1276GetDio1PinState>:
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
    8bf4:	4b09      	ldr	r3, [pc, #36]	; (8c1c <SX1276GetDio1PinState+0x28>)
{
    8bf6:	b513      	push	{r0, r1, r4, lr}
	if (gpio_pin_get(dev_data.dio_dev[1], sx127x_dios[1].pin) > 0) {
    8bf8:	6998      	ldr	r0, [r3, #24]
	const struct gpio_driver_data *const data =
    8bfa:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
    8bfc:	6883      	ldr	r3, [r0, #8]
    8bfe:	a901      	add	r1, sp, #4
    8c00:	685b      	ldr	r3, [r3, #4]
    8c02:	4798      	blx	r3
	if (ret == 0) {
    8c04:	b920      	cbnz	r0, 8c10 <SX1276GetDio1PinState+0x1c>
		*value ^= data->invert;
    8c06:	6823      	ldr	r3, [r4, #0]
    8c08:	9801      	ldr	r0, [sp, #4]
    8c0a:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    8c0c:	f3c0 2080 	ubfx	r0, r0, #10, #1
}
    8c10:	2800      	cmp	r0, #0
    8c12:	bfd4      	ite	le
    8c14:	2000      	movle	r0, #0
    8c16:	2001      	movgt	r0, #1
    8c18:	b002      	add	sp, #8
    8c1a:	bd10      	pop	{r4, pc}
    8c1c:	20000e84 	.word	0x20000e84

00008c20 <TimerInsertNewHeadTimer>:
    obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    8c20:	4b04      	ldr	r3, [pc, #16]	; (8c34 <TimerInsertNewHeadTimer+0x14>)
    8c22:	681a      	ldr	r2, [r3, #0]

    if( cur != NULL )
    8c24:	b10a      	cbz	r2, 8c2a <TimerInsertNewHeadTimer+0xa>
    {
        cur->IsNext2Expire = false;
    8c26:	2100      	movs	r1, #0
    8c28:	7251      	strb	r1, [r2, #9]
    }

    obj->Next = cur;
    8c2a:	6142      	str	r2, [r0, #20]
    TimerListHead = obj;
    8c2c:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
    8c2e:	f014 bc80 	b.w	1d532 <TimerSetTimeout>
    8c32:	bf00      	nop
    8c34:	20000ecc 	.word	0x20000ecc

00008c38 <TimerStart>:
{
    8c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8c3a:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    8c3c:	a801      	add	r0, sp, #4
    8c3e:	f014 fc48 	bl	1d4d2 <BoardCriticalSectionBegin>
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
    8c42:	b16c      	cbz	r4, 8c60 <TimerStart+0x28>
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
    8c44:	4d17      	ldr	r5, [pc, #92]	; (8ca4 <TimerStart+0x6c>)
    8c46:	6829      	ldr	r1, [r5, #0]
    8c48:	460a      	mov	r2, r1

    while( cur != NULL )
    8c4a:	b972      	cbnz	r2, 8c6a <TimerStart+0x32>
    obj->Timestamp = obj->ReloadValue;
    8c4c:	6863      	ldr	r3, [r4, #4]
    8c4e:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
    8c50:	2301      	movs	r3, #1
    8c52:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
    8c54:	b969      	cbnz	r1, 8c72 <TimerStart+0x3a>
        RtcSetTimerContext( );
    8c56:	f7ff fb15 	bl	8284 <RtcSetTimerContext>
            TimerInsertNewHeadTimer( obj );
    8c5a:	4620      	mov	r0, r4
    8c5c:	f7ff ffe0 	bl	8c20 <TimerInsertNewHeadTimer>
        CRITICAL_SECTION_END( );
    8c60:	a801      	add	r0, sp, #4
    8c62:	f014 fc40 	bl	1d4e6 <BoardCriticalSectionEnd>
}
    8c66:	b003      	add	sp, #12
    8c68:	bd30      	pop	{r4, r5, pc}
    {
        if( cur == obj )
    8c6a:	4294      	cmp	r4, r2
    8c6c:	d0f8      	beq.n	8c60 <TimerStart+0x28>
        {
            return true;
        }
        cur = cur->Next;
    8c6e:	6952      	ldr	r2, [r2, #20]
    8c70:	e7eb      	b.n	8c4a <TimerStart+0x12>
        elapsedTime = RtcGetTimerElapsedTime( );
    8c72:	f7ff fadb 	bl	822c <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
    8c76:	6823      	ldr	r3, [r4, #0]
    8c78:	4418      	add	r0, r3
        if( obj->Timestamp < TimerListHead->Timestamp )
    8c7a:	682b      	ldr	r3, [r5, #0]
        obj->Timestamp += elapsedTime;
    8c7c:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
    8c7e:	681a      	ldr	r2, [r3, #0]
    8c80:	4290      	cmp	r0, r2
    8c82:	d3ea      	bcc.n	8c5a <TimerStart+0x22>
    TimerEvent_t* next = TimerListHead->Next;
    8c84:	695a      	ldr	r2, [r3, #20]
    while( cur->Next != NULL )
    8c86:	6959      	ldr	r1, [r3, #20]
    8c88:	b911      	cbnz	r1, 8c90 <TimerStart+0x58>
    cur->Next = obj;
    8c8a:	615c      	str	r4, [r3, #20]
    obj->Next = NULL;
    8c8c:	6161      	str	r1, [r4, #20]
    8c8e:	e7e7      	b.n	8c60 <TimerStart+0x28>
        if( obj->Timestamp > next->Timestamp )
    8c90:	6811      	ldr	r1, [r2, #0]
    8c92:	4288      	cmp	r0, r1
    8c94:	d902      	bls.n	8c9c <TimerStart+0x64>
            next = next->Next;
    8c96:	4613      	mov	r3, r2
    8c98:	6952      	ldr	r2, [r2, #20]
    8c9a:	e7f4      	b.n	8c86 <TimerStart+0x4e>
            cur->Next = obj;
    8c9c:	615c      	str	r4, [r3, #20]
            obj->Next = next;
    8c9e:	6162      	str	r2, [r4, #20]
            return;
    8ca0:	e7de      	b.n	8c60 <TimerStart+0x28>
    8ca2:	bf00      	nop
    8ca4:	20000ecc 	.word	0x20000ecc

00008ca8 <TimerIrqHandler>:
{
    8ca8:	b570      	push	{r4, r5, r6, lr}
    uint32_t old =  RtcGetTimerContext( );
    8caa:	f7ff faf3 	bl	8294 <RtcGetTimerContext>
    if( TimerListHead != NULL )
    8cae:	4c1b      	ldr	r4, [pc, #108]	; (8d1c <TimerIrqHandler+0x74>)
    uint32_t old =  RtcGetTimerContext( );
    8cb0:	4605      	mov	r5, r0
    uint32_t now =  RtcSetTimerContext( );
    8cb2:	f7ff fae7 	bl	8284 <RtcSetTimerContext>
    if( TimerListHead != NULL )
    8cb6:	6822      	ldr	r2, [r4, #0]
    8cb8:	b19a      	cbz	r2, 8ce2 <TimerIrqHandler+0x3a>
    uint32_t deltaContext = now - old; // intentional wrap around
    8cba:	1b46      	subs	r6, r0, r5
    8cbc:	4611      	mov	r1, r2
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
    8cbe:	6949      	ldr	r1, [r1, #20]
    8cc0:	b929      	cbnz	r1, 8cce <TimerIrqHandler+0x26>
        TimerListHead = TimerListHead->Next;
    8cc2:	6953      	ldr	r3, [r2, #20]
    8cc4:	6023      	str	r3, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    8cc6:	68d3      	ldr	r3, [r2, #12]
        cur->IsStarted = false;
    8cc8:	7211      	strb	r1, [r2, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    8cca:	b943      	cbnz	r3, 8cde <TimerIrqHandler+0x36>
    8ccc:	e7fe      	b.n	8ccc <TimerIrqHandler+0x24>
            if( next->Timestamp > deltaContext )
    8cce:	680b      	ldr	r3, [r1, #0]
    8cd0:	42b3      	cmp	r3, r6
                next->Timestamp -= deltaContext;
    8cd2:	bf86      	itte	hi
    8cd4:	195b      	addhi	r3, r3, r5
    8cd6:	1a1b      	subhi	r3, r3, r0
                next->Timestamp = 0;
    8cd8:	2300      	movls	r3, #0
    8cda:	600b      	str	r3, [r1, #0]
    8cdc:	e7ef      	b.n	8cbe <TimerIrqHandler+0x16>
        ExecuteCallBack( cur->Callback, cur->Context );
    8cde:	6910      	ldr	r0, [r2, #16]
    8ce0:	4798      	blx	r3
        cur->IsStarted = false;
    8ce2:	2600      	movs	r6, #0
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    8ce4:	6823      	ldr	r3, [r4, #0]
    8ce6:	b92b      	cbnz	r3, 8cf4 <TimerIrqHandler+0x4c>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    8ce8:	6820      	ldr	r0, [r4, #0]
    8cea:	b980      	cbnz	r0, 8d0e <TimerIrqHandler+0x66>
}
    8cec:	bd70      	pop	{r4, r5, r6, pc}
        ExecuteCallBack( cur->Callback, cur->Context );
    8cee:	6918      	ldr	r0, [r3, #16]
    8cf0:	4790      	blx	r2
    8cf2:	e7f7      	b.n	8ce4 <TimerIrqHandler+0x3c>
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
    8cf4:	681d      	ldr	r5, [r3, #0]
    8cf6:	f7ff fa99 	bl	822c <RtcGetTimerElapsedTime>
    8cfa:	4285      	cmp	r5, r0
    8cfc:	d2f4      	bcs.n	8ce8 <TimerIrqHandler+0x40>
        cur = TimerListHead;
    8cfe:	6823      	ldr	r3, [r4, #0]
        TimerListHead = TimerListHead->Next;
    8d00:	695a      	ldr	r2, [r3, #20]
    8d02:	6022      	str	r2, [r4, #0]
        ExecuteCallBack( cur->Callback, cur->Context );
    8d04:	68da      	ldr	r2, [r3, #12]
        cur->IsStarted = false;
    8d06:	721e      	strb	r6, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
    8d08:	2a00      	cmp	r2, #0
    8d0a:	d1f0      	bne.n	8cee <TimerIrqHandler+0x46>
    8d0c:	e7fe      	b.n	8d0c <TimerIrqHandler+0x64>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
    8d0e:	7a43      	ldrb	r3, [r0, #9]
    8d10:	2b00      	cmp	r3, #0
    8d12:	d1eb      	bne.n	8cec <TimerIrqHandler+0x44>
}
    8d14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TimerSetTimeout( TimerListHead );
    8d18:	f014 bc0b 	b.w	1d532 <TimerSetTimeout>
    8d1c:	20000ecc 	.word	0x20000ecc

00008d20 <TimerStop>:
{
    8d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TimerEvent_t* prev = TimerListHead;
    8d22:	4d14      	ldr	r5, [pc, #80]	; (8d74 <TimerStop+0x54>)
{
    8d24:	4604      	mov	r4, r0
    CRITICAL_SECTION_BEGIN( );
    8d26:	a801      	add	r0, sp, #4
    8d28:	f014 fbd3 	bl	1d4d2 <BoardCriticalSectionBegin>
    TimerEvent_t* prev = TimerListHead;
    8d2c:	682b      	ldr	r3, [r5, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
    8d2e:	b103      	cbz	r3, 8d32 <TimerStop+0x12>
    8d30:	b924      	cbnz	r4, 8d3c <TimerStop+0x1c>
        CRITICAL_SECTION_END( );
    8d32:	a801      	add	r0, sp, #4
    8d34:	f014 fbd7 	bl	1d4e6 <BoardCriticalSectionEnd>
}
    8d38:	b003      	add	sp, #12
    8d3a:	bd30      	pop	{r4, r5, pc}
    obj->IsStarted = false;
    8d3c:	2200      	movs	r2, #0
    if( TimerListHead == obj ) // Stop the Head
    8d3e:	42a3      	cmp	r3, r4
    obj->IsStarted = false;
    8d40:	7222      	strb	r2, [r4, #8]
    if( TimerListHead == obj ) // Stop the Head
    8d42:	d10d      	bne.n	8d60 <TimerStop+0x40>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
    8d44:	7a59      	ldrb	r1, [r3, #9]
    8d46:	695c      	ldr	r4, [r3, #20]
    8d48:	b141      	cbz	r1, 8d5c <TimerStop+0x3c>
            TimerListHead->IsNext2Expire = false;
    8d4a:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
    8d4c:	b124      	cbz	r4, 8d58 <TimerStop+0x38>
                TimerSetTimeout( TimerListHead );
    8d4e:	4620      	mov	r0, r4
                TimerListHead = TimerListHead->Next;
    8d50:	602c      	str	r4, [r5, #0]
                TimerSetTimeout( TimerListHead );
    8d52:	f014 fbee 	bl	1d532 <TimerSetTimeout>
    8d56:	e7ec      	b.n	8d32 <TimerStop+0x12>
                RtcStopAlarm( );
    8d58:	f7ff fa72 	bl	8240 <RtcStopAlarm>
                TimerListHead = NULL;
    8d5c:	602c      	str	r4, [r5, #0]
    8d5e:	e7e8      	b.n	8d32 <TimerStop+0x12>
                cur = cur->Next;
    8d60:	461a      	mov	r2, r3
    8d62:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
    8d64:	2b00      	cmp	r3, #0
    8d66:	d0e4      	beq.n	8d32 <TimerStop+0x12>
            if( cur == obj )
    8d68:	429c      	cmp	r4, r3
    8d6a:	d1f9      	bne.n	8d60 <TimerStop+0x40>
                if( cur->Next != NULL )
    8d6c:	6963      	ldr	r3, [r4, #20]
                    prev->Next = cur;
    8d6e:	6153      	str	r3, [r2, #20]
    8d70:	e7df      	b.n	8d32 <TimerStop+0x12>
    8d72:	bf00      	nop
    8d74:	20000ecc 	.word	0x20000ecc

00008d78 <GetFskBandwidthRegValue>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
             SX1276_PLL_STEP_SCALED );
}

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    8d78:	b510      	push	{r4, lr}
    8d7a:	4b09      	ldr	r3, [pc, #36]	; (8da0 <GetFskBandwidthRegValue+0x28>)
    8d7c:	2200      	movs	r2, #0
    8d7e:	4619      	mov	r1, r3
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
    8d80:	681c      	ldr	r4, [r3, #0]
    8d82:	4284      	cmp	r4, r0
    8d84:	d806      	bhi.n	8d94 <GetFskBandwidthRegValue+0x1c>
    8d86:	689c      	ldr	r4, [r3, #8]
    8d88:	4284      	cmp	r4, r0
    8d8a:	d903      	bls.n	8d94 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
    8d8c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    8d90:	7910      	ldrb	r0, [r2, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
    8d92:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    8d94:	3201      	adds	r2, #1
    8d96:	2a15      	cmp	r2, #21
    8d98:	f103 0308 	add.w	r3, r3, #8
    8d9c:	d1f0      	bne.n	8d80 <GetFskBandwidthRegValue+0x8>
    while( 1 );
    8d9e:	e7fe      	b.n	8d9e <GetFskBandwidthRegValue+0x26>
    8da0:	0001f2e0 	.word	0x0001f2e0

00008da4 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
    8da4:	4b05      	ldr	r3, [pc, #20]	; (8dbc <SX1276OnDio4Irq+0x18>)
    8da6:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    8daa:	b92a      	cbnz	r2, 8db8 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
    8dac:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    8db0:	b912      	cbnz	r2, 8db8 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    8db2:	2201      	movs	r2, #1
    8db4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
    8db8:	4770      	bx	lr
    8dba:	bf00      	nop
    8dbc:	20000f04 	.word	0x20000f04

00008dc0 <SX1276GetStatus>:
}
    8dc0:	4b01      	ldr	r3, [pc, #4]	; (8dc8 <SX1276GetStatus+0x8>)
    8dc2:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    8dc6:	4770      	bx	lr
    8dc8:	20000f04 	.word	0x20000f04

00008dcc <SX1276GetTimeOnAir>:
{
    8dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dce:	f8bd 5014 	ldrh.w	r5, [sp, #20]
    8dd2:	f89d e018 	ldrb.w	lr, [sp, #24]
    8dd6:	f89d 601c 	ldrb.w	r6, [sp, #28]
    8dda:	f89d 4020 	ldrb.w	r4, [sp, #32]
    switch( modem )
    8dde:	b140      	cbz	r0, 8df2 <SX1276GetTimeOnAir+0x26>
    8de0:	2801      	cmp	r0, #1
    8de2:	d019      	beq.n	8e18 <SX1276GetTimeOnAir+0x4c>
    8de4:	2201      	movs	r2, #1
    8de6:	2300      	movs	r3, #0
    return ( numerator + denominator - 1 ) / denominator;
    8de8:	4413      	add	r3, r2
    8dea:	1e58      	subs	r0, r3, #1
    8dec:	fbb0 f0f2 	udiv	r0, r0, r2
}
    8df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           ( ( fixLen == false ) ? 8 : 0 ) +
    8df2:	f1be 0f00 	cmp.w	lr, #0
    8df6:	bf0c      	ite	eq
    8df8:	2308      	moveq	r3, #8
    8dfa:	2300      	movne	r3, #0
               ( ( crcOn == true ) ? 2 : 0 ) 
    8dfc:	2c00      	cmp	r4, #0
    8dfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    8e02:	bf14      	ite	ne
    8e04:	2402      	movne	r4, #2
    8e06:	2400      	moveq	r4, #0
             ( syncWordLength << 3 ) +
    8e08:	3318      	adds	r3, #24
               ( 0 ) + // Address filter size
    8e0a:	4434      	add	r4, r6
             ( syncWordLength << 3 ) +
    8e0c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
    8e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8e14:	4363      	muls	r3, r4
        break;
    8e16:	e7e7      	b.n	8de8 <SX1276GetTimeOnAir+0x1c>
    int32_t crDenom           = coderate + 4;
    8e18:	1d1f      	adds	r7, r3, #4
    if( ( datarate == 5 ) || ( datarate == 6 ) )
    8e1a:	1f53      	subs	r3, r2, #5
    8e1c:	2b01      	cmp	r3, #1
    8e1e:	d802      	bhi.n	8e26 <SX1276GetTimeOnAir+0x5a>
        if( preambleLen < 12 )
    8e20:	2d0c      	cmp	r5, #12
    8e22:	bf38      	it	cc
    8e24:	250c      	movcc	r5, #12
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    8e26:	2900      	cmp	r1, #0
    8e28:	d139      	bne.n	8e9e <SX1276GetTimeOnAir+0xd2>
    8e2a:	f1a2 0c0b 	sub.w	ip, r2, #11
    8e2e:	f1bc 0f01 	cmp.w	ip, #1
    8e32:	bf8c      	ite	hi
    8e34:	f04f 0c00 	movhi.w	ip, #0
    8e38:	f04f 0c01 	movls.w	ip, #1
                            ( crcOn ? 16 : 0 ) -
    8e3c:	2c00      	cmp	r4, #0
    8e3e:	bf14      	ite	ne
    8e40:	2410      	movne	r4, #16
    8e42:	2400      	moveq	r4, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
    8e44:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
                            ( fixLen ? 0 : 20 );
    8e48:	f1be 0f00 	cmp.w	lr, #0
    8e4c:	bf14      	ite	ne
    8e4e:	2000      	movne	r0, #0
    8e50:	2014      	moveq	r0, #20
                            ( crcOn ? 16 : 0 ) -
    8e52:	eba4 0482 	sub.w	r4, r4, r2, lsl #2
    if( datarate <= 6 )
    8e56:	2a06      	cmp	r2, #6
                            ( 4 * datarate ) +
    8e58:	ea4f 0382 	mov.w	r3, r2, lsl #2
    8e5c:	4420      	add	r0, r4
    if( datarate <= 6 )
    8e5e:	f1a2 0602 	sub.w	r6, r2, #2
    8e62:	d904      	bls.n	8e6e <SX1276GetTimeOnAir+0xa2>
        ceilNumerator += 8;
    8e64:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
    8e66:	f1bc 0f00 	cmp.w	ip, #0
    8e6a:	d000      	beq.n	8e6e <SX1276GetTimeOnAir+0xa2>
            ceilDenominator = 4 * ( datarate - 2 );
    8e6c:	00b3      	lsls	r3, r6, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    8e6e:	1e5c      	subs	r4, r3, #1
    8e70:	2800      	cmp	r0, #0
    8e72:	bfa8      	it	ge
    8e74:	1824      	addge	r4, r4, r0
    if( datarate <= 6 )
    8e76:	2a06      	cmp	r2, #6
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
    8e78:	fb94 f3f3 	sdiv	r3, r4, r3
    8e7c:	fb07 5303 	mla	r3, r7, r3, r5
    int32_t intermediate =
    8e80:	bf8c      	ite	hi
    8e82:	330c      	addhi	r3, #12
        intermediate += 2;
    8e84:	330e      	addls	r3, #14
    switch( bw )
    8e86:	2902      	cmp	r1, #2
    8e88:	d815      	bhi.n	8eb6 <SX1276GetTimeOnAir+0xea>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    8e8a:	009b      	lsls	r3, r3, #2
    8e8c:	3301      	adds	r3, #1
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    8e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
    8e92:	40b3      	lsls	r3, r6
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
    8e94:	4353      	muls	r3, r2
    8e96:	4a08      	ldr	r2, [pc, #32]	; (8eb8 <SX1276GetTimeOnAir+0xec>)
    8e98:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8e9c:	e7a4      	b.n	8de8 <SX1276GetTimeOnAir+0x1c>
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    8e9e:	2901      	cmp	r1, #1
    8ea0:	d106      	bne.n	8eb0 <SX1276GetTimeOnAir+0xe4>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
    8ea2:	f1a2 030c 	sub.w	r3, r2, #12
    8ea6:	f1d3 0c00 	rsbs	ip, r3, #0
    8eaa:	eb4c 0c03 	adc.w	ip, ip, r3
    8eae:	e7c5      	b.n	8e3c <SX1276GetTimeOnAir+0x70>
    bool    lowDatareOptimize = false;
    8eb0:	f04f 0c00 	mov.w	ip, #0
    8eb4:	e7c2      	b.n	8e3c <SX1276GetTimeOnAir+0x70>
    return ( numerator + denominator - 1 ) / denominator;
    8eb6:	deff      	udf	#255	; 0xff
    8eb8:	0001f2d4 	.word	0x0001f2d4

00008ebc <SX1276SetChannel>:
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    8ebc:	f643 5309 	movw	r3, #15625	; 0x3d09
{
    8ec0:	b510      	push	{r4, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    8ec2:	fbb0 f2f3 	udiv	r2, r0, r3
    8ec6:	f641 6484 	movw	r4, #7812	; 0x1e84
    8eca:	fb03 0112 	mls	r1, r3, r2, r0
    8ece:	eb04 2401 	add.w	r4, r4, r1, lsl #8
    8ed2:	fbb4 f4f3 	udiv	r4, r4, r3
    SX1276.Settings.Channel = freq;
    8ed6:	4b0a      	ldr	r3, [pc, #40]	; (8f00 <SX1276SetChannel+0x44>)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    8ed8:	eb04 2402 	add.w	r4, r4, r2, lsl #8
    SX1276.Settings.Channel = freq;
    8edc:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
    8ee0:	f3c4 4107 	ubfx	r1, r4, #16, #8
    8ee4:	2006      	movs	r0, #6
    8ee6:	f014 fb6b 	bl	1d5c0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
    8eea:	f3c4 2107 	ubfx	r1, r4, #8, #8
    8eee:	2007      	movs	r0, #7
    8ef0:	f014 fb66 	bl	1d5c0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    8ef4:	b2e1      	uxtb	r1, r4
    8ef6:	2008      	movs	r0, #8
}
    8ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
    8efc:	f014 bb60 	b.w	1d5c0 <SX1276Write>
    8f00:	20000f04 	.word	0x20000f04

00008f04 <SX1276OnDio3Irq>:
{
    8f04:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
    8f06:	4b11      	ldr	r3, [pc, #68]	; (8f4c <SX1276OnDio3Irq+0x48>)
    8f08:	f893 60e1 	ldrb.w	r6, [r3, #225]	; 0xe1
    8f0c:	2e01      	cmp	r6, #1
    8f0e:	d11c      	bne.n	8f4a <SX1276OnDio3Irq+0x46>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
    8f10:	2012      	movs	r0, #18
    8f12:	f014 fb60 	bl	1d5d6 <SX1276Read>
    8f16:	f010 0401 	ands.w	r4, r0, #1
    8f1a:	4d0d      	ldr	r5, [pc, #52]	; (8f50 <SX1276OnDio3Irq+0x4c>)
    8f1c:	d00b      	beq.n	8f36 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
    8f1e:	2105      	movs	r1, #5
    8f20:	2012      	movs	r0, #18
    8f22:	f014 fb4d 	bl	1d5c0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    8f26:	682b      	ldr	r3, [r5, #0]
    8f28:	b17b      	cbz	r3, 8f4a <SX1276OnDio3Irq+0x46>
    8f2a:	699b      	ldr	r3, [r3, #24]
    8f2c:	b16b      	cbz	r3, 8f4a <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( true );
    8f2e:	4630      	mov	r0, r6
}
    8f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                RadioEvents->CadDone( false );
    8f34:	4718      	bx	r3
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
    8f36:	2104      	movs	r1, #4
    8f38:	2012      	movs	r0, #18
    8f3a:	f014 fb41 	bl	1d5c0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
    8f3e:	682b      	ldr	r3, [r5, #0]
    8f40:	b11b      	cbz	r3, 8f4a <SX1276OnDio3Irq+0x46>
    8f42:	699b      	ldr	r3, [r3, #24]
    8f44:	b10b      	cbz	r3, 8f4a <SX1276OnDio3Irq+0x46>
                RadioEvents->CadDone( false );
    8f46:	4620      	mov	r0, r4
    8f48:	e7f2      	b.n	8f30 <SX1276OnDio3Irq+0x2c>
}
    8f4a:	bd70      	pop	{r4, r5, r6, pc}
    8f4c:	20000f04 	.word	0x20000f04
    8f50:	20000ed0 	.word	0x20000ed0

00008f54 <SX1276OnDio2Irq>:
{
    8f54:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    8f56:	4b32      	ldr	r3, [pc, #200]	; (9020 <SX1276OnDio2Irq+0xcc>)
    8f58:	f893 10e0 	ldrb.w	r1, [r3, #224]	; 0xe0
    8f5c:	2901      	cmp	r1, #1
    8f5e:	461c      	mov	r4, r3
    8f60:	d002      	beq.n	8f68 <SX1276OnDio2Irq+0x14>
    8f62:	2902      	cmp	r1, #2
    8f64:	d052      	beq.n	900c <SX1276OnDio2Irq+0xb8>
}
    8f66:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    8f68:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    8f6c:	b1ca      	cbz	r2, 8fa2 <SX1276OnDio2Irq+0x4e>
    8f6e:	2a01      	cmp	r2, #1
    8f70:	d1f9      	bne.n	8f66 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    8f72:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    8f76:	2b00      	cmp	r3, #0
    8f78:	d0f5      	beq.n	8f66 <SX1276OnDio2Irq+0x12>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    8f7a:	2102      	movs	r1, #2
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
    8f7c:	2012      	movs	r0, #18
    8f7e:	f014 fb1f 	bl	1d5c0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
    8f82:	4b28      	ldr	r3, [pc, #160]	; (9024 <SX1276OnDio2Irq+0xd0>)
    8f84:	681b      	ldr	r3, [r3, #0]
    8f86:	2b00      	cmp	r3, #0
    8f88:	d0ed      	beq.n	8f66 <SX1276OnDio2Irq+0x12>
    8f8a:	695c      	ldr	r4, [r3, #20]
    8f8c:	2c00      	cmp	r4, #0
    8f8e:	d0ea      	beq.n	8f66 <SX1276OnDio2Irq+0x12>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    8f90:	201c      	movs	r0, #28
    8f92:	f014 fb20 	bl	1d5d6 <SX1276Read>
    8f96:	4623      	mov	r3, r4
    8f98:	f000 003f 	and.w	r0, r0, #63	; 0x3f
}
    8f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
    8fa0:	4718      	bx	r3
                if( SX1276.DIO4.port == NULL )
    8fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    8fa4:	bb6b      	cbnz	r3, 9002 <SX1276OnDio2Irq+0xae>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
    8fa6:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    8faa:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d1d9      	bne.n	8f66 <SX1276OnDio2Irq+0x12>
                    TimerStop( &RxTimeoutSyncWord );
    8fb2:	481d      	ldr	r0, [pc, #116]	; (9028 <SX1276OnDio2Irq+0xd4>)
    8fb4:	f7ff feb4 	bl	8d20 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    8fb8:	2301      	movs	r3, #1
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    8fba:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
    8fbc:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    8fc0:	f014 fb09 	bl	1d5d6 <SX1276Read>
    8fc4:	0840      	lsrs	r0, r0, #1
    8fc6:	4240      	negs	r0, r0
    8fc8:	f884 010e 	strb.w	r0, [r4, #270]	; 0x10e
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    8fcc:	201b      	movs	r0, #27
    8fce:	f014 fb02 	bl	1d5d6 <SX1276Read>
    8fd2:	4605      	mov	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
    8fd4:	201c      	movs	r0, #28
    8fd6:	f014 fafe 	bl	1d5d6 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8fda:	f643 5209 	movw	r2, #15625	; 0x3d09
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    8fde:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8fe2:	b2c3      	uxtb	r3, r0
    8fe4:	4353      	muls	r3, r2
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    8fe6:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8fe8:	4355      	muls	r5, r2
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    8fea:	3380      	adds	r3, #128	; 0x80
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    8fec:	eb05 2313 	add.w	r3, r5, r3, lsr #8
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    8ff0:	200c      	movs	r0, #12
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
    8ff2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
    8ff6:	f014 faee 	bl	1d5d6 <SX1276Read>
    8ffa:	0940      	lsrs	r0, r0, #5
    8ffc:	f884 0114 	strb.w	r0, [r4, #276]	; 0x114
    9000:	e7b1      	b.n	8f66 <SX1276OnDio2Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
    9002:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
    9006:	2b00      	cmp	r3, #0
    9008:	d0ad      	beq.n	8f66 <SX1276OnDio2Irq+0x12>
    900a:	e7ce      	b.n	8faa <SX1276OnDio2Irq+0x56>
            switch( SX1276.Settings.Modem )
    900c:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
    9010:	2a01      	cmp	r2, #1
    9012:	d1a8      	bne.n	8f66 <SX1276OnDio2Irq+0x12>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
    9014:	f893 312f 	ldrb.w	r3, [r3, #303]	; 0x12f
    9018:	2b00      	cmp	r3, #0
    901a:	d0a4      	beq.n	8f66 <SX1276OnDio2Irq+0x12>
    901c:	e7ae      	b.n	8f7c <SX1276OnDio2Irq+0x28>
    901e:	bf00      	nop
    9020:	20000f04 	.word	0x20000f04
    9024:	20000ed0 	.word	0x20000ed0
    9028:	20000ed4 	.word	0x20000ed4

0000902c <SX1276OnDio1Irq>:
{
    902c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    902e:	4c43      	ldr	r4, [pc, #268]	; (913c <SX1276OnDio1Irq+0x110>)
    9030:	f894 60e0 	ldrb.w	r6, [r4, #224]	; 0xe0
    9034:	2e01      	cmp	r6, #1
    9036:	4625      	mov	r5, r4
    9038:	d002      	beq.n	9040 <SX1276OnDio1Irq+0x14>
    903a:	2e02      	cmp	r6, #2
    903c:	d059      	beq.n	90f2 <SX1276OnDio1Irq+0xc6>
}
    903e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    9040:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9044:	b1cb      	cbz	r3, 907a <SX1276OnDio1Irq+0x4e>
    9046:	2b01      	cmp	r3, #1
    9048:	d1f9      	bne.n	903e <SX1276OnDio1Irq+0x12>
                if( SX1276GetDio1PinState( ) == 0 )
    904a:	f7ff fdd3 	bl	8bf4 <SX1276GetDio1PinState>
    904e:	2800      	cmp	r0, #0
    9050:	d0f5      	beq.n	903e <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutTimer );
    9052:	483b      	ldr	r0, [pc, #236]	; (9140 <SX1276OnDio1Irq+0x114>)
    9054:	f7ff fe64 	bl	8d20 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
    9058:	2180      	movs	r1, #128	; 0x80
    905a:	2012      	movs	r0, #18
    905c:	f014 fab0 	bl	1d5c0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    9060:	2300      	movs	r3, #0
    9062:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    9066:	4b37      	ldr	r3, [pc, #220]	; (9144 <SX1276OnDio1Irq+0x118>)
    9068:	681b      	ldr	r3, [r3, #0]
    906a:	2b00      	cmp	r3, #0
    906c:	d0e7      	beq.n	903e <SX1276OnDio1Irq+0x12>
    906e:	68db      	ldr	r3, [r3, #12]
    9070:	2b00      	cmp	r3, #0
    9072:	d0e4      	beq.n	903e <SX1276OnDio1Irq+0x12>
}
    9074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->RxTimeout( );
    9078:	4718      	bx	r3
                if( SX1276GetDio1PinState( ) == 0 )
    907a:	f7ff fdbb 	bl	8bf4 <SX1276GetDio1PinState>
    907e:	2800      	cmp	r0, #0
    9080:	d0dd      	beq.n	903e <SX1276OnDio1Irq+0x12>
                TimerStop( &RxTimeoutSyncWord );
    9082:	4831      	ldr	r0, [pc, #196]	; (9148 <SX1276OnDio1Irq+0x11c>)
    9084:	f7ff fe4c 	bl	8d20 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    9088:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    908c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    9090:	4313      	orrs	r3, r2
    9092:	b29b      	uxth	r3, r3
    9094:	b93b      	cbnz	r3, 90a6 <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
    9096:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    909a:	b9e8      	cbnz	r0, 90d8 <SX1276OnDio1Irq+0xac>
    SX1276ReadBuffer( 0, buffer, size );
    909c:	4632      	mov	r2, r6
    909e:	f504 718b 	add.w	r1, r4, #278	; 0x116
    90a2:	f7ff fc59 	bl	8958 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
    90a6:	f8b5 0118 	ldrh.w	r0, [r5, #280]	; 0x118
    90aa:	f8b5 2116 	ldrh.w	r2, [r5, #278]	; 0x116
    90ae:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
    90b2:	4926      	ldr	r1, [pc, #152]	; (914c <SX1276OnDio1Irq+0x120>)
    90b4:	1a12      	subs	r2, r2, r0
    90b6:	429a      	cmp	r2, r3
    90b8:	4401      	add	r1, r0
    90ba:	db13      	blt.n	90e4 <SX1276OnDio1Irq+0xb8>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
    90bc:	1e5a      	subs	r2, r3, #1
    SX1276ReadBuffer( 0, buffer, size );
    90be:	b2d2      	uxtb	r2, r2
    90c0:	2000      	movs	r0, #0
    90c2:	f7ff fc49 	bl	8958 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
    90c6:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
    90ca:	f8b5 2118 	ldrh.w	r2, [r5, #280]	; 0x118
    90ce:	4413      	add	r3, r2
    90d0:	3b01      	subs	r3, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    90d2:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
    90d6:	e7b2      	b.n	903e <SX1276OnDio1Irq+0x12>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    90d8:	2032      	movs	r0, #50	; 0x32
    90da:	f014 fa7c 	bl	1d5d6 <SX1276Read>
    90de:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    90e2:	e7e0      	b.n	90a6 <SX1276OnDio1Irq+0x7a>
    SX1276ReadBuffer( 0, buffer, size );
    90e4:	b2d2      	uxtb	r2, r2
    90e6:	2000      	movs	r0, #0
    90e8:	f7ff fc36 	bl	8958 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    90ec:	f8b5 3116 	ldrh.w	r3, [r5, #278]	; 0x116
    90f0:	e7ef      	b.n	90d2 <SX1276OnDio1Irq+0xa6>
            switch( SX1276.Settings.Modem )
    90f2:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    90f6:	2d00      	cmp	r5, #0
    90f8:	d1a1      	bne.n	903e <SX1276OnDio1Irq+0x12>
                if( SX1276GetDio1PinState( ) == 1 )
    90fa:	f7ff fd7b 	bl	8bf4 <SX1276GetDio1PinState>
    90fe:	2801      	cmp	r0, #1
    9100:	d09d      	beq.n	903e <SX1276OnDio1Irq+0x12>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
    9102:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    9106:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    910a:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
    910e:	490f      	ldr	r1, [pc, #60]	; (914c <SX1276OnDio1Irq+0x120>)
    9110:	1a1b      	subs	r3, r3, r0
    9112:	4293      	cmp	r3, r2
    9114:	4401      	add	r1, r0
    9116:	dd0a      	ble.n	912e <SX1276OnDio1Irq+0x102>
    SX1276WriteBuffer( 0, buffer, size );
    9118:	4628      	mov	r0, r5
    911a:	f7ff fce5 	bl	8ae8 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    911e:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
    9122:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    9126:	4413      	add	r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    9128:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
}
    912c:	e787      	b.n	903e <SX1276OnDio1Irq+0x12>
    SX1276WriteBuffer( 0, buffer, size );
    912e:	b2da      	uxtb	r2, r3
    9130:	4628      	mov	r0, r5
    9132:	f7ff fcd9 	bl	8ae8 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
    9136:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
    913a:	e7f5      	b.n	9128 <SX1276OnDio1Irq+0xfc>
    913c:	20000f04 	.word	0x20000f04
    9140:	20000eec 	.word	0x20000eec
    9144:	20000ed0 	.word	0x20000ed0
    9148:	20000ed4 	.word	0x20000ed4
    914c:	20001d4e 	.word	0x20001d4e

00009150 <SX1276OnDio0Irq>:
{
    9150:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    9152:	4e8f      	ldr	r6, [pc, #572]	; (9390 <SX1276OnDio0Irq+0x240>)
    volatile uint8_t irqFlags = 0;
    9154:	2300      	movs	r3, #0
    9156:	f88d 3007 	strb.w	r3, [sp, #7]
    switch( SX1276.Settings.State )
    915a:	f896 30e0 	ldrb.w	r3, [r6, #224]	; 0xe0
    915e:	2b01      	cmp	r3, #1
    9160:	4634      	mov	r4, r6
    9162:	d004      	beq.n	916e <SX1276OnDio0Irq+0x1e>
    9164:	2b02      	cmp	r3, #2
    9166:	f000 80fd 	beq.w	9364 <SX1276OnDio0Irq+0x214>
}
    916a:	b002      	add	sp, #8
    916c:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
    916e:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    9172:	b33b      	cbz	r3, 91c4 <SX1276OnDio0Irq+0x74>
    9174:	2b01      	cmp	r3, #1
    9176:	d1f8      	bne.n	916a <SX1276OnDio0Irq+0x1a>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
    9178:	2140      	movs	r1, #64	; 0x40
    917a:	2012      	movs	r0, #18
    917c:	f014 fa20 	bl	1d5c0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
    9180:	2012      	movs	r0, #18
    9182:	f014 fa28 	bl	1d5d6 <SX1276Read>
    9186:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
    918a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    918e:	4d81      	ldr	r5, [pc, #516]	; (9394 <SX1276OnDio0Irq+0x244>)
    9190:	f013 0f20 	tst.w	r3, #32
    9194:	f000 8093 	beq.w	92be <SX1276OnDio0Irq+0x16e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
    9198:	2120      	movs	r1, #32
    919a:	2012      	movs	r0, #18
    919c:	f014 fa10 	bl	1d5c0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
    91a0:	f896 3132 	ldrb.w	r3, [r6, #306]	; 0x132
    91a4:	b90b      	cbnz	r3, 91aa <SX1276OnDio0Irq+0x5a>
                            SX1276.Settings.State = RF_IDLE;
    91a6:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
                        TimerStop( &RxTimeoutTimer );
    91aa:	487b      	ldr	r0, [pc, #492]	; (9398 <SX1276OnDio0Irq+0x248>)
    91ac:	f7ff fdb8 	bl	8d20 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    91b0:	682b      	ldr	r3, [r5, #0]
    91b2:	2b00      	cmp	r3, #0
    91b4:	d0d9      	beq.n	916a <SX1276OnDio0Irq+0x1a>
    91b6:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    91b8:	2b00      	cmp	r3, #0
    91ba:	d0d6      	beq.n	916a <SX1276OnDio0Irq+0x1a>
}
    91bc:	b002      	add	sp, #8
    91be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    RadioEvents->TxDone( );
    91c2:	4718      	bx	r3
                if( SX1276.Settings.Fsk.CrcOn == true )
    91c4:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    91c8:	4d72      	ldr	r5, [pc, #456]	; (9394 <SX1276OnDio0Irq+0x244>)
    91ca:	b393      	cbz	r3, 9232 <SX1276OnDio0Irq+0xe2>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
    91cc:	203f      	movs	r0, #63	; 0x3f
    91ce:	f014 fa02 	bl	1d5d6 <SX1276Read>
    91d2:	f88d 0007 	strb.w	r0, [sp, #7]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
    91d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91da:	079b      	lsls	r3, r3, #30
    91dc:	d429      	bmi.n	9232 <SX1276OnDio0Irq+0xe2>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    91de:	210b      	movs	r1, #11
    91e0:	203e      	movs	r0, #62	; 0x3e
    91e2:	f014 f9ed 	bl	1d5c0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    91e6:	2110      	movs	r1, #16
    91e8:	203f      	movs	r0, #63	; 0x3f
    91ea:	f014 f9e9 	bl	1d5c0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
    91ee:	486a      	ldr	r0, [pc, #424]	; (9398 <SX1276OnDio0Irq+0x248>)
    91f0:	f7ff fd96 	bl	8d20 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
    91f4:	f896 6102 	ldrb.w	r6, [r6, #258]	; 0x102
    91f8:	b98e      	cbnz	r6, 921e <SX1276OnDio0Irq+0xce>
                            TimerStop( &RxTimeoutSyncWord );
    91fa:	4868      	ldr	r0, [pc, #416]	; (939c <SX1276OnDio0Irq+0x24c>)
    91fc:	f7ff fd90 	bl	8d20 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
    9200:	f884 60e0 	strb.w	r6, [r4, #224]	; 0xe0
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
    9204:	682b      	ldr	r3, [r5, #0]
    9206:	b113      	cbz	r3, 920e <SX1276OnDio0Irq+0xbe>
    9208:	691b      	ldr	r3, [r3, #16]
    920a:	b103      	cbz	r3, 920e <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
    920c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    920e:	2300      	movs	r3, #0
    9210:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
    9214:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                        SX1276.Settings.FskPacketHandler.Size = 0;
    9218:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
                        break;
    921c:	e7a5      	b.n	916a <SX1276OnDio0Irq+0x1a>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    921e:	200d      	movs	r0, #13
    9220:	f014 f9d9 	bl	1d5d6 <SX1276Read>
    9224:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    9228:	b2c9      	uxtb	r1, r1
    922a:	200d      	movs	r0, #13
    922c:	f014 f9c8 	bl	1d5c0 <SX1276Write>
    9230:	e7e8      	b.n	9204 <SX1276OnDio0Irq+0xb4>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
    9232:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
    9236:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    923a:	4e59      	ldr	r6, [pc, #356]	; (93a0 <SX1276OnDio0Irq+0x250>)
    923c:	ea52 0301 	orrs.w	r3, r2, r1
    9240:	d10a      	bne.n	9258 <SX1276OnDio0Irq+0x108>
                    if( SX1276.Settings.Fsk.FixLen == false )
    9242:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
    9246:	bb50      	cbnz	r0, 929e <SX1276OnDio0Irq+0x14e>
    SX1276ReadBuffer( 0, buffer, size );
    9248:	4956      	ldr	r1, [pc, #344]	; (93a4 <SX1276OnDio0Irq+0x254>)
    924a:	2201      	movs	r2, #1
    924c:	f7ff fb84 	bl	8958 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    9250:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
    9254:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    9258:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
    925a:	b2d2      	uxtb	r2, r2
    925c:	4431      	add	r1, r6
    925e:	2000      	movs	r0, #0
    9260:	f7ff fb7a 	bl	8958 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    9264:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
                TimerStop( &RxTimeoutTimer );
    9268:	484b      	ldr	r0, [pc, #300]	; (9398 <SX1276OnDio0Irq+0x248>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
    926a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
                TimerStop( &RxTimeoutTimer );
    926e:	f7ff fd57 	bl	8d20 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
    9272:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    9276:	b9c3      	cbnz	r3, 92aa <SX1276OnDio0Irq+0x15a>
                    TimerStop( &RxTimeoutSyncWord );
    9278:	4848      	ldr	r0, [pc, #288]	; (939c <SX1276OnDio0Irq+0x24c>)
                    SX1276.Settings.State = RF_IDLE;
    927a:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutSyncWord );
    927e:	f7ff fd4f 	bl	8d20 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    9282:	682b      	ldr	r3, [r5, #0]
    9284:	2b00      	cmp	r3, #0
    9286:	d0c2      	beq.n	920e <SX1276OnDio0Irq+0xbe>
    9288:	689d      	ldr	r5, [r3, #8]
    928a:	2d00      	cmp	r5, #0
    928c:	d0bf      	beq.n	920e <SX1276OnDio0Irq+0xbe>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
    928e:	f994 210e 	ldrsb.w	r2, [r4, #270]	; 0x10e
    9292:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    9296:	4842      	ldr	r0, [pc, #264]	; (93a0 <SX1276OnDio0Irq+0x250>)
    9298:	2300      	movs	r3, #0
    929a:	47a8      	blx	r5
    929c:	e7b7      	b.n	920e <SX1276OnDio0Irq+0xbe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
    929e:	2032      	movs	r0, #50	; 0x32
    92a0:	f014 f999 	bl	1d5d6 <SX1276Read>
    92a4:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
    92a8:	e7d2      	b.n	9250 <SX1276OnDio0Irq+0x100>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    92aa:	200d      	movs	r0, #13
    92ac:	f014 f993 	bl	1d5d6 <SX1276Read>
    92b0:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    92b4:	b2c9      	uxtb	r1, r1
    92b6:	200d      	movs	r0, #13
    92b8:	f014 f982 	bl	1d5c0 <SX1276Write>
    92bc:	e7e1      	b.n	9282 <SX1276OnDio0Irq+0x132>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
    92be:	2019      	movs	r0, #25
    92c0:	f014 f989 	bl	1d5d6 <SX1276Read>
    92c4:	b240      	sxtb	r0, r0
    92c6:	3002      	adds	r0, #2
    92c8:	1080      	asrs	r0, r0, #2
    92ca:	f886 013c 	strb.w	r0, [r6, #316]	; 0x13c
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    92ce:	201a      	movs	r0, #26
    92d0:	f014 f981 	bl	1d5d6 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    92d4:	f996 213c 	ldrsb.w	r2, [r6, #316]	; 0x13c
    92d8:	4933      	ldr	r1, [pc, #204]	; (93a8 <SX1276OnDio0Irq+0x258>)
    92da:	2a00      	cmp	r2, #0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
    92dc:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
    92de:	f340 100b 	sbfx	r0, r0, #4, #12
    92e2:	da38      	bge.n	9356 <SX1276OnDio0Irq+0x206>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    92e4:	f8d6 60e4 	ldr.w	r6, [r6, #228]	; 0xe4
    92e8:	b212      	sxth	r2, r2
    92ea:	428e      	cmp	r6, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
    92ec:	bf8c      	ite	hi
    92ee:	3a9d      	subhi	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
    92f0:	3aa4      	subls	r2, #164	; 0xa4
    92f2:	4413      	add	r3, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    92f4:	4403      	add	r3, r0
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    92f6:	2013      	movs	r0, #19
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    92f8:	f8a4 313e 	strh.w	r3, [r4, #318]	; 0x13e
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
    92fc:	f014 f96b 	bl	1d5d6 <SX1276Read>
    9300:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
    9304:	2010      	movs	r0, #16
    9306:	f014 f966 	bl	1d5d6 <SX1276Read>
    930a:	4601      	mov	r1, r0
    930c:	200d      	movs	r0, #13
    930e:	f014 f957 	bl	1d5c0 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
    9312:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
    9316:	4922      	ldr	r1, [pc, #136]	; (93a0 <SX1276OnDio0Irq+0x250>)
    9318:	2000      	movs	r0, #0
    931a:	f7ff fb1d 	bl	8958 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
    931e:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
    9322:	b90b      	cbnz	r3, 9328 <SX1276OnDio0Irq+0x1d8>
                        SX1276.Settings.State = RF_IDLE;
    9324:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                    TimerStop( &RxTimeoutTimer );
    9328:	481b      	ldr	r0, [pc, #108]	; (9398 <SX1276OnDio0Irq+0x248>)
    932a:	f7ff fcf9 	bl	8d20 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
    932e:	682b      	ldr	r3, [r5, #0]
    9330:	2b00      	cmp	r3, #0
    9332:	f43f af1a 	beq.w	916a <SX1276OnDio0Irq+0x1a>
    9336:	689d      	ldr	r5, [r3, #8]
    9338:	2d00      	cmp	r5, #0
    933a:	f43f af16 	beq.w	916a <SX1276OnDio0Irq+0x1a>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    933e:	f994 313c 	ldrsb.w	r3, [r4, #316]	; 0x13c
    9342:	f9b4 213e 	ldrsh.w	r2, [r4, #318]	; 0x13e
    9346:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    934a:	4815      	ldr	r0, [pc, #84]	; (93a0 <SX1276OnDio0Irq+0x250>)
    934c:	46ac      	mov	ip, r5
}
    934e:	b002      	add	sp, #8
    9350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
    9354:	4760      	bx	ip
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    9356:	f8d6 20e4 	ldr.w	r2, [r6, #228]	; 0xe4
    935a:	428a      	cmp	r2, r1
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
    935c:	bf8c      	ite	hi
    935e:	3b9d      	subhi	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
    9360:	3ba4      	subls	r3, #164	; 0xa4
    9362:	e7c7      	b.n	92f4 <SX1276OnDio0Irq+0x1a4>
            TimerStop( &TxTimeoutTimer );
    9364:	4811      	ldr	r0, [pc, #68]	; (93ac <SX1276OnDio0Irq+0x25c>)
    9366:	f7ff fcdb 	bl	8d20 <TimerStop>
            switch( SX1276.Settings.Modem )
    936a:	f896 30e1 	ldrb.w	r3, [r6, #225]	; 0xe1
    936e:	2b01      	cmp	r3, #1
    9370:	d103      	bne.n	937a <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
    9372:	2108      	movs	r1, #8
    9374:	2012      	movs	r0, #18
    9376:	f014 f923 	bl	1d5c0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
    937a:	2300      	movs	r3, #0
    937c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
    9380:	4b04      	ldr	r3, [pc, #16]	; (9394 <SX1276OnDio0Irq+0x244>)
    9382:	681b      	ldr	r3, [r3, #0]
    9384:	2b00      	cmp	r3, #0
    9386:	f43f aef0 	beq.w	916a <SX1276OnDio0Irq+0x1a>
    938a:	681b      	ldr	r3, [r3, #0]
    938c:	e714      	b.n	91b8 <SX1276OnDio0Irq+0x68>
    938e:	bf00      	nop
    9390:	20000f04 	.word	0x20000f04
    9394:	20000ed0 	.word	0x20000ed0
    9398:	20000eec 	.word	0x20000eec
    939c:	20000ed4 	.word	0x20000ed4
    93a0:	20001d4e 	.word	0x20001d4e
    93a4:	2000101a 	.word	0x2000101a
    93a8:	1f4add40 	.word	0x1f4add40
    93ac:	20001048 	.word	0x20001048

000093b0 <RxChainCalibration>:
{
    93b0:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
    93b2:	2009      	movs	r0, #9
    93b4:	f014 f90f 	bl	1d5d6 <SX1276Read>
    93b8:	4605      	mov	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    93ba:	2006      	movs	r0, #6
    93bc:	f014 f90b 	bl	1d5d6 <SX1276Read>
    93c0:	4606      	mov	r6, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
    93c2:	2007      	movs	r0, #7
    93c4:	f014 f907 	bl	1d5d6 <SX1276Read>
    93c8:	0204      	lsls	r4, r0, #8
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
    93ca:	2008      	movs	r0, #8
    93cc:	f014 f903 	bl	1d5d6 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
    93d0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    93d4:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    93d6:	b2c3      	uxtb	r3, r0
    93d8:	f643 5009 	movw	r0, #15625	; 0x3d09
    93dc:	4343      	muls	r3, r0
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
    93de:	0a24      	lsrs	r4, r4, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
    93e0:	3380      	adds	r3, #128	; 0x80
    SX1276Write( REG_PACONFIG, 0x00 );
    93e2:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    93e4:	4344      	muls	r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
    93e6:	2009      	movs	r0, #9
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
    93e8:	eb04 2413 	add.w	r4, r4, r3, lsr #8
    SX1276Write( REG_PACONFIG, 0x00 );
    93ec:	f014 f8e8 	bl	1d5c0 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    93f0:	203b      	movs	r0, #59	; 0x3b
    93f2:	f014 f8f0 	bl	1d5d6 <SX1276Read>
    93f6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    93fa:	b2c9      	uxtb	r1, r1
    93fc:	203b      	movs	r0, #59	; 0x3b
    93fe:	f014 f8df 	bl	1d5c0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    9402:	203b      	movs	r0, #59	; 0x3b
    9404:	f014 f8e7 	bl	1d5d6 <SX1276Read>
    9408:	0682      	lsls	r2, r0, #26
    940a:	d4fa      	bmi.n	9402 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
    940c:	480c      	ldr	r0, [pc, #48]	; (9440 <RxChainCalibration+0x90>)
    940e:	f7ff fd55 	bl	8ebc <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
    9412:	203b      	movs	r0, #59	; 0x3b
    9414:	f014 f8df 	bl	1d5d6 <SX1276Read>
    9418:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    941c:	b2c9      	uxtb	r1, r1
    941e:	203b      	movs	r0, #59	; 0x3b
    9420:	f014 f8ce 	bl	1d5c0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
    9424:	203b      	movs	r0, #59	; 0x3b
    9426:	f014 f8d6 	bl	1d5d6 <SX1276Read>
    942a:	0683      	lsls	r3, r0, #26
    942c:	d4fa      	bmi.n	9424 <RxChainCalibration+0x74>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
    942e:	4629      	mov	r1, r5
    9430:	2009      	movs	r0, #9
    9432:	f014 f8c5 	bl	1d5c0 <SX1276Write>
    SX1276SetChannel( initialFreq );
    9436:	4620      	mov	r0, r4
}
    9438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SX1276SetChannel( initialFreq );
    943c:	f7ff bd3e 	b.w	8ebc <SX1276SetChannel>
    9440:	33bca100 	.word	0x33bca100

00009444 <SX1276SetSleep>:
{
    9444:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    9446:	480a      	ldr	r0, [pc, #40]	; (9470 <SX1276SetSleep+0x2c>)
    9448:	f7ff fc6a 	bl	8d20 <TimerStop>
    TimerStop( &TxTimeoutTimer );
    944c:	4809      	ldr	r0, [pc, #36]	; (9474 <SX1276SetSleep+0x30>)
    944e:	f7ff fc67 	bl	8d20 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    9452:	4809      	ldr	r0, [pc, #36]	; (9478 <SX1276SetSleep+0x34>)
    9454:	f7ff fc64 	bl	8d20 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    9458:	2000      	movs	r0, #0
    945a:	f014 f8c7 	bl	1d5ec <SX1276SetOpMode>
    SX1276SetBoardTcxo( false );
    945e:	2000      	movs	r0, #0
    9460:	f014 f85b 	bl	1d51a <SX1276SetBoardTcxo>
    SX1276.Settings.State = RF_IDLE;
    9464:	4b05      	ldr	r3, [pc, #20]	; (947c <SX1276SetSleep+0x38>)
    9466:	2200      	movs	r2, #0
    9468:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    946c:	bd08      	pop	{r3, pc}
    946e:	bf00      	nop
    9470:	20000eec 	.word	0x20000eec
    9474:	20001048 	.word	0x20001048
    9478:	20000ed4 	.word	0x20000ed4
    947c:	20000f04 	.word	0x20000f04

00009480 <SX1276SetStby>:
{
    9480:	b508      	push	{r3, lr}
    TimerStop( &RxTimeoutTimer );
    9482:	4808      	ldr	r0, [pc, #32]	; (94a4 <SX1276SetStby+0x24>)
    9484:	f7ff fc4c 	bl	8d20 <TimerStop>
    TimerStop( &TxTimeoutTimer );
    9488:	4807      	ldr	r0, [pc, #28]	; (94a8 <SX1276SetStby+0x28>)
    948a:	f7ff fc49 	bl	8d20 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
    948e:	4807      	ldr	r0, [pc, #28]	; (94ac <SX1276SetStby+0x2c>)
    9490:	f7ff fc46 	bl	8d20 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
    9494:	2001      	movs	r0, #1
    9496:	f014 f8a9 	bl	1d5ec <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
    949a:	4b05      	ldr	r3, [pc, #20]	; (94b0 <SX1276SetStby+0x30>)
    949c:	2200      	movs	r2, #0
    949e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    94a2:	bd08      	pop	{r3, pc}
    94a4:	20000eec 	.word	0x20000eec
    94a8:	20001048 	.word	0x20001048
    94ac:	20000ed4 	.word	0x20000ed4
    94b0:	20000f04 	.word	0x20000f04

000094b4 <SX1276Send>:
{
    94b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch( SX1276.Settings.Modem )
    94b6:	4c62      	ldr	r4, [pc, #392]	; (9640 <SX1276Send+0x18c>)
{
    94b8:	f88d 1007 	strb.w	r1, [sp, #7]
    switch( SX1276.Settings.Modem )
    94bc:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    94c0:	4605      	mov	r5, r0
    switch( SX1276.Settings.Modem )
    94c2:	b1db      	cbz	r3, 94fc <SX1276Send+0x48>
    94c4:	2b01      	cmp	r3, #1
    94c6:	d04a      	beq.n	955e <SX1276Send+0xaa>
    94c8:	2500      	movs	r5, #0
    TimerStop( &RxTimeoutTimer );
    94ca:	485e      	ldr	r0, [pc, #376]	; (9644 <SX1276Send+0x190>)
    94cc:	f7ff fc28 	bl	8d20 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
    94d0:	485d      	ldr	r0, [pc, #372]	; (9648 <SX1276Send+0x194>)
    94d2:	4629      	mov	r1, r5
    94d4:	f014 f84b 	bl	1d56e <TimerSetValue>
    switch( SX1276.Settings.Modem )
    94d8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    94dc:	2b00      	cmp	r3, #0
    94de:	d07b      	beq.n	95d8 <SX1276Send+0x124>
    94e0:	2b01      	cmp	r3, #1
    94e2:	f000 8091 	beq.w	9608 <SX1276Send+0x154>
    SX1276.Settings.State = RF_TX_RUNNING;
    94e6:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
    94e8:	4857      	ldr	r0, [pc, #348]	; (9648 <SX1276Send+0x194>)
    SX1276.Settings.State = RF_TX_RUNNING;
    94ea:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    94ee:	f7ff fba3 	bl	8c38 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    94f2:	2003      	movs	r0, #3
    94f4:	f014 f87a 	bl	1d5ec <SX1276SetOpMode>
}
    94f8:	b003      	add	sp, #12
    94fa:	bd30      	pop	{r4, r5, pc}
            if( SX1276.Settings.Fsk.FixLen == false )
    94fc:	f894 00fe 	ldrb.w	r0, [r4, #254]	; 0xfe
            SX1276.Settings.FskPacketHandler.Size = size;
    9500:	f89d 1007 	ldrb.w	r1, [sp, #7]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    9504:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = size;
    9508:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
            if( SX1276.Settings.Fsk.FixLen == false )
    950c:	b9d8      	cbnz	r0, 9546 <SX1276Send+0x92>
    SX1276WriteBuffer( 0, buffer, size );
    950e:	2201      	movs	r2, #1
    9510:	f10d 0107 	add.w	r1, sp, #7
    9514:	f7ff fae8 	bl	8ae8 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
    9518:	f89d 2007 	ldrb.w	r2, [sp, #7]
    951c:	1e53      	subs	r3, r2, #1
    951e:	2b3f      	cmp	r3, #63	; 0x3f
    9520:	d815      	bhi.n	954e <SX1276Send+0x9a>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
    9522:	f884 211b 	strb.w	r2, [r4, #283]	; 0x11b
    SX1276WriteBuffer( 0, buffer, size );
    9526:	f894 211b 	ldrb.w	r2, [r4, #283]	; 0x11b
    952a:	4629      	mov	r1, r5
    952c:	2000      	movs	r0, #0
    952e:	f7ff fadb 	bl	8ae8 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    9532:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    9536:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
    953a:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
    953e:	4413      	add	r3, r2
    9540:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
        break;
    9544:	e7c1      	b.n	94ca <SX1276Send+0x16>
                SX1276Write( REG_PAYLOADLENGTH, size );
    9546:	2032      	movs	r0, #50	; 0x32
    9548:	f014 f83a 	bl	1d5c0 <SX1276Write>
    954c:	e7e4      	b.n	9518 <SX1276Send+0x64>
                memcpy1( RxTxBuffer, buffer, size );
    954e:	483f      	ldr	r0, [pc, #252]	; (964c <SX1276Send+0x198>)
    9550:	4629      	mov	r1, r5
    9552:	f013 ffe4 	bl	1d51e <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
    9556:	2320      	movs	r3, #32
    9558:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b
    955c:	e7e3      	b.n	9526 <SX1276Send+0x72>
            if( SX1276.Settings.LoRa.IqInverted == true )
    955e:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    9562:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    9564:	b36b      	cbz	r3, 95c2 <SX1276Send+0x10e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
    9566:	f014 f836 	bl	1d5d6 <SX1276Read>
    956a:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    956e:	2033      	movs	r0, #51	; 0x33
    9570:	f014 f826 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    9574:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    9576:	203b      	movs	r0, #59	; 0x3b
    9578:	f014 f822 	bl	1d5c0 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
    957c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9580:	f884 1140 	strb.w	r1, [r4, #320]	; 0x140
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
    9584:	2022      	movs	r0, #34	; 0x22
    9586:	f014 f81b 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
    958a:	2100      	movs	r1, #0
    958c:	200e      	movs	r0, #14
    958e:	f014 f817 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    9592:	2100      	movs	r1, #0
    9594:	200d      	movs	r0, #13
    9596:	f014 f813 	bl	1d5c0 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
    959a:	2001      	movs	r0, #1
    959c:	f014 f81b 	bl	1d5d6 <SX1276Read>
    95a0:	f030 03f8 	bics.w	r3, r0, #248	; 0xf8
    95a4:	d104      	bne.n	95b0 <SX1276Send+0xfc>
                SX1276SetStby( );
    95a6:	f7ff ff6b 	bl	9480 <SX1276SetStby>
                DelayMs( 1 );
    95aa:	2001      	movs	r0, #1
    95ac:	f014 f806 	bl	1d5bc <DelayMs>
    SX1276WriteBuffer( 0, buffer, size );
    95b0:	4629      	mov	r1, r5
    95b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    95b6:	2000      	movs	r0, #0
    95b8:	f7ff fa96 	bl	8ae8 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
    95bc:	f8d4 5134 	ldr.w	r5, [r4, #308]	; 0x134
        break;
    95c0:	e783      	b.n	94ca <SX1276Send+0x16>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    95c2:	f014 f808 	bl	1d5d6 <SX1276Read>
    95c6:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    95ca:	f041 0101 	orr.w	r1, r1, #1
    95ce:	2033      	movs	r0, #51	; 0x33
    95d0:	f013 fff6 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    95d4:	211d      	movs	r1, #29
    95d6:	e7ce      	b.n	9576 <SX1276Send+0xc2>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    95d8:	2040      	movs	r0, #64	; 0x40
    95da:	f013 fffc 	bl	1d5d6 <SX1276Read>
    95de:	f000 0103 	and.w	r1, r0, #3
    95e2:	2040      	movs	r0, #64	; 0x40
    95e4:	f013 ffec 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    95e8:	2041      	movs	r0, #65	; 0x41
    95ea:	f013 fff4 	bl	1d5d6 <SX1276Read>
    95ee:	f000 013e 	and.w	r1, r0, #62	; 0x3e
    95f2:	2041      	movs	r0, #65	; 0x41
    95f4:	f013 ffe4 	bl	1d5c0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    95f8:	2035      	movs	r0, #53	; 0x35
    95fa:	f013 ffec 	bl	1d5d6 <SX1276Read>
    95fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9602:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
        break;
    9606:	e76e      	b.n	94e6 <SX1276Send+0x32>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9608:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    960c:	b173      	cbz	r3, 962c <SX1276Send+0x178>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    960e:	21f5      	movs	r1, #245	; 0xf5
    9610:	2011      	movs	r0, #17
    9612:	f013 ffd5 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
    9616:	2040      	movs	r0, #64	; 0x40
    9618:	f013 ffdd 	bl	1d5d6 <SX1276Read>
    961c:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    9620:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    9624:	2040      	movs	r0, #64	; 0x40
    9626:	f013 ffcb 	bl	1d5c0 <SX1276Write>
    962a:	e75c      	b.n	94e6 <SX1276Send+0x32>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
    962c:	21f7      	movs	r1, #247	; 0xf7
    962e:	2011      	movs	r0, #17
    9630:	f013 ffc6 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
    9634:	2040      	movs	r0, #64	; 0x40
    9636:	f013 ffce 	bl	1d5d6 <SX1276Read>
    963a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    963e:	e7ef      	b.n	9620 <SX1276Send+0x16c>
    9640:	20000f04 	.word	0x20000f04
    9644:	20000eec 	.word	0x20000eec
    9648:	20001048 	.word	0x20001048
    964c:	20001d4e 	.word	0x20001d4e

00009650 <SX1276SetRx>:
{
    9650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
    9652:	4c83      	ldr	r4, [pc, #524]	; (9860 <SX1276SetRx+0x210>)
{
    9654:	4607      	mov	r7, r0
    TimerStop( &TxTimeoutTimer );
    9656:	4883      	ldr	r0, [pc, #524]	; (9864 <SX1276SetRx+0x214>)
    9658:	f7ff fb62 	bl	8d20 <TimerStop>
    switch( SX1276.Settings.Modem )
    965c:	f894 50e1 	ldrb.w	r5, [r4, #225]	; 0xe1
    9660:	b345      	cbz	r5, 96b4 <SX1276SetRx+0x64>
    9662:	2d01      	cmp	r5, #1
    9664:	d04d      	beq.n	9702 <SX1276SetRx+0xb2>
    9666:	2600      	movs	r6, #0
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
    9668:	487f      	ldr	r0, [pc, #508]	; (9868 <SX1276SetRx+0x218>)
    966a:	f44f 7280 	mov.w	r2, #256	; 0x100
    966e:	2100      	movs	r1, #0
    9670:	f014 fe02 	bl	1e278 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
    9674:	2301      	movs	r3, #1
    9676:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    if( timeout != 0 )
    967a:	b137      	cbz	r7, 968a <SX1276SetRx+0x3a>
        TimerSetValue( &RxTimeoutTimer, timeout );
    967c:	487b      	ldr	r0, [pc, #492]	; (986c <SX1276SetRx+0x21c>)
    967e:	4639      	mov	r1, r7
    9680:	f013 ff75 	bl	1d56e <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
    9684:	4879      	ldr	r0, [pc, #484]	; (986c <SX1276SetRx+0x21c>)
    9686:	f7ff fad7 	bl	8c38 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
    968a:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    968e:	2b00      	cmp	r3, #0
    9690:	f040 80dc 	bne.w	984c <SX1276SetRx+0x1fc>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
    9694:	2005      	movs	r0, #5
    9696:	f013 ffa9 	bl	1d5ec <SX1276SetOpMode>
        if( rxContinuous == false )
    969a:	2e00      	cmp	r6, #0
    969c:	f040 80de 	bne.w	985c <SX1276SetRx+0x20c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
    96a0:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    96a4:	4872      	ldr	r0, [pc, #456]	; (9870 <SX1276SetRx+0x220>)
    96a6:	f013 ff62 	bl	1d56e <TimerSetValue>
}
    96aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            TimerStart( &RxTimeoutSyncWord );
    96ae:	4870      	ldr	r0, [pc, #448]	; (9870 <SX1276SetRx+0x220>)
    96b0:	f7ff bac2 	b.w	8c38 <TimerStart>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    96b4:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
    96b6:	f894 6102 	ldrb.w	r6, [r4, #258]	; 0x102
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    96ba:	f013 ff8c 	bl	1d5d6 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
    96be:	f000 0103 	and.w	r1, r0, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
    96c2:	f041 010c 	orr.w	r1, r1, #12
    96c6:	2040      	movs	r0, #64	; 0x40
    96c8:	f013 ff7a 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
    96cc:	2041      	movs	r0, #65	; 0x41
    96ce:	f013 ff82 	bl	1d5d6 <SX1276Read>
    96d2:	f060 013e 	orn	r1, r0, #62	; 0x3e
    96d6:	b2c9      	uxtb	r1, r1
    96d8:	2041      	movs	r0, #65	; 0x41
    96da:	f013 ff71 	bl	1d5c0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
    96de:	2035      	movs	r0, #53	; 0x35
    96e0:	f013 ff79 	bl	1d5d6 <SX1276Read>
    96e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    96e8:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
    96ec:	211e      	movs	r1, #30
    96ee:	200d      	movs	r0, #13
    96f0:	f013 ff66 	bl	1d5c0 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    96f4:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    96f8:	f8a4 5118 	strh.w	r5, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    96fc:	f8a4 5116 	strh.w	r5, [r4, #278]	; 0x116
        break;
    9700:	e7b2      	b.n	9668 <SX1276SetRx+0x18>
            if( SX1276.Settings.LoRa.IqInverted == true )
    9702:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    9706:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
    9708:	b33b      	cbz	r3, 975a <SX1276SetRx+0x10a>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
    970a:	f013 ff64 	bl	1d5d6 <SX1276Read>
    970e:	f040 0141 	orr.w	r1, r0, #65	; 0x41
    9712:	b2c9      	uxtb	r1, r1
    9714:	2033      	movs	r0, #51	; 0x33
    9716:	f013 ff53 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
    971a:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    971c:	203b      	movs	r0, #59	; 0x3b
    971e:	f013 ff4f 	bl	1d5c0 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    9722:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9726:	2b08      	cmp	r3, #8
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    9728:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
    972c:	d87d      	bhi.n	982a <SX1276SetRx+0x1da>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
    972e:	f013 ff52 	bl	1d5d6 <SX1276Read>
    9732:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    9736:	2031      	movs	r0, #49	; 0x31
    9738:	f013 ff42 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
    973c:	2100      	movs	r1, #0
    973e:	2030      	movs	r0, #48	; 0x30
    9740:	f013 ff3e 	bl	1d5c0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
    9744:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    9748:	2b08      	cmp	r3, #8
    974a:	d81c      	bhi.n	9786 <SX1276SetRx+0x136>
    974c:	e8df f003 	tbb	[pc, r3]
    9750:	4a403610 	.word	0x4a403610
    9754:	68685e54 	.word	0x68685e54
    9758:	68          	.byte	0x68
    9759:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
    975a:	f013 ff3c 	bl	1d5d6 <SX1276Read>
    975e:	f000 01be 	and.w	r1, r0, #190	; 0xbe
    9762:	f041 0101 	orr.w	r1, r1, #1
    9766:	2033      	movs	r0, #51	; 0x33
    9768:	f013 ff2a 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
    976c:	211d      	movs	r1, #29
    976e:	e7d5      	b.n	971c <SX1276SetRx+0xcc>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
    9770:	202f      	movs	r0, #47	; 0x2f
    9772:	2148      	movs	r1, #72	; 0x48
    9774:	f013 ff24 	bl	1d5c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
    9778:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    977c:	f500 50f4 	add.w	r0, r0, #7808	; 0x1e80
    9780:	3002      	adds	r0, #2
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    9782:	f7ff fb9b 	bl	8ebc <SX1276SetChannel>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9786:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
    978a:	f894 6132 	ldrb.w	r6, [r4, #306]	; 0x132
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    978e:	2b00      	cmp	r3, #0
    9790:	d052      	beq.n	9838 <SX1276SetRx+0x1e8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    9792:	211d      	movs	r1, #29
    9794:	2011      	movs	r0, #17
    9796:	f013 ff13 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
    979a:	2040      	movs	r0, #64	; 0x40
    979c:	f013 ff1b 	bl	1d5d6 <SX1276Read>
    97a0:	f000 0133 	and.w	r1, r0, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    97a4:	2040      	movs	r0, #64	; 0x40
    97a6:	f013 ff0b 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
    97aa:	2100      	movs	r1, #0
    97ac:	200f      	movs	r0, #15
    97ae:	f013 ff07 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
    97b2:	2100      	movs	r1, #0
    97b4:	200d      	movs	r0, #13
    97b6:	f013 ff03 	bl	1d5c0 <SX1276Write>
        break;
    97ba:	e755      	b.n	9668 <SX1276SetRx+0x18>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    97bc:	202f      	movs	r0, #47	; 0x2f
    97be:	2144      	movs	r1, #68	; 0x44
    97c0:	f013 fefe 	bl	1d5c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
    97c4:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    97c8:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
    97cc:	3034      	adds	r0, #52	; 0x34
    97ce:	e7d8      	b.n	9782 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    97d0:	202f      	movs	r0, #47	; 0x2f
    97d2:	2144      	movs	r1, #68	; 0x44
    97d4:	f013 fef4 	bl	1d5c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
    97d8:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    97dc:	f500 5074 	add.w	r0, r0, #15616	; 0x3d00
    97e0:	3004      	adds	r0, #4
    97e2:	e7ce      	b.n	9782 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    97e4:	202f      	movs	r0, #47	; 0x2f
    97e6:	2144      	movs	r1, #68	; 0x44
    97e8:	f013 feea 	bl	1d5c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
    97ec:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    97f0:	f500 40a2 	add.w	r0, r0, #20736	; 0x5100
    97f4:	305e      	adds	r0, #94	; 0x5e
    97f6:	e7c4      	b.n	9782 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    97f8:	202f      	movs	r0, #47	; 0x2f
    97fa:	2144      	movs	r1, #68	; 0x44
    97fc:	f013 fee0 	bl	1d5c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
    9800:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    9804:	f500 40f4 	add.w	r0, r0, #31232	; 0x7a00
    9808:	3012      	adds	r0, #18
    980a:	e7ba      	b.n	9782 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
    980c:	202f      	movs	r0, #47	; 0x2f
    980e:	2144      	movs	r1, #68	; 0x44
    9810:	f013 fed6 	bl	1d5c0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
    9814:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
    9818:	f500 4022 	add.w	r0, r0, #41472	; 0xa200
    981c:	30c6      	adds	r0, #198	; 0xc6
    981e:	e7b0      	b.n	9782 <SX1276SetRx+0x132>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
    9820:	2140      	movs	r1, #64	; 0x40
    9822:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
    9824:	f013 fecc 	bl	1d5c0 <SX1276Write>
    9828:	e7ad      	b.n	9786 <SX1276SetRx+0x136>
    982a:	f013 fed4 	bl	1d5d6 <SX1276Read>
    982e:	f060 017f 	orn	r1, r0, #127	; 0x7f
    9832:	b2c9      	uxtb	r1, r1
    9834:	2031      	movs	r0, #49	; 0x31
    9836:	e7f5      	b.n	9824 <SX1276SetRx+0x1d4>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
    9838:	211f      	movs	r1, #31
    983a:	2011      	movs	r0, #17
    983c:	f013 fec0 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
    9840:	2040      	movs	r0, #64	; 0x40
    9842:	f013 fec8 	bl	1d5d6 <SX1276Read>
    9846:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    984a:	e7ab      	b.n	97a4 <SX1276SetRx+0x154>
        if( rxContinuous == true )
    984c:	b126      	cbz	r6, 9858 <SX1276SetRx+0x208>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
    984e:	2005      	movs	r0, #5
}
    9850:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
    9854:	f013 beca 	b.w	1d5ec <SX1276SetOpMode>
    9858:	2006      	movs	r0, #6
    985a:	e7f9      	b.n	9850 <SX1276SetRx+0x200>
}
    985c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    985e:	bf00      	nop
    9860:	20000f04 	.word	0x20000f04
    9864:	20001048 	.word	0x20001048
    9868:	20001d4e 	.word	0x20001d4e
    986c:	20000eec 	.word	0x20000eec
    9870:	20000ed4 	.word	0x20000ed4

00009874 <SX1276ReadRssi>:
{
    9874:	b508      	push	{r3, lr}
    switch( modem )
    9876:	b120      	cbz	r0, 9882 <SX1276ReadRssi+0xe>
    9878:	2801      	cmp	r0, #1
    987a:	d00a      	beq.n	9892 <SX1276ReadRssi+0x1e>
    987c:	f04f 30ff 	mov.w	r0, #4294967295
}
    9880:	bd08      	pop	{r3, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
    9882:	2011      	movs	r0, #17
    9884:	f013 fea7 	bl	1d5d6 <SX1276Read>
    9888:	f3c0 0047 	ubfx	r0, r0, #1, #8
    988c:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    988e:	b200      	sxth	r0, r0
    9890:	e7f6      	b.n	9880 <SX1276ReadRssi+0xc>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    9892:	4b08      	ldr	r3, [pc, #32]	; (98b4 <SX1276ReadRssi+0x40>)
    9894:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    9898:	4b07      	ldr	r3, [pc, #28]	; (98b8 <SX1276ReadRssi+0x44>)
    989a:	429a      	cmp	r2, r3
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    989c:	f04f 001b 	mov.w	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
    98a0:	d903      	bls.n	98aa <SX1276ReadRssi+0x36>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
    98a2:	f013 fe98 	bl	1d5d6 <SX1276Read>
    98a6:	389d      	subs	r0, #157	; 0x9d
    98a8:	e7f1      	b.n	988e <SX1276ReadRssi+0x1a>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
    98aa:	f013 fe94 	bl	1d5d6 <SX1276Read>
    98ae:	38a4      	subs	r0, #164	; 0xa4
    98b0:	e7ed      	b.n	988e <SX1276ReadRssi+0x1a>
    98b2:	bf00      	nop
    98b4:	20000f04 	.word	0x20000f04
    98b8:	1f4add40 	.word	0x1f4add40

000098bc <SX1276SetModem>:
{
    98bc:	b510      	push	{r4, lr}
    98be:	4604      	mov	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
    98c0:	2001      	movs	r0, #1
    98c2:	f013 fe88 	bl	1d5d6 <SX1276Read>
        SX1276.Settings.Modem = MODEM_LORA;
    98c6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    if( SX1276.Settings.Modem == modem )
    98ca:	42a0      	cmp	r0, r4
    98cc:	4b17      	ldr	r3, [pc, #92]	; (992c <SX1276SetModem+0x70>)
    98ce:	d102      	bne.n	98d6 <SX1276SetModem+0x1a>
    98d0:	f883 00e1 	strb.w	r0, [r3, #225]	; 0xe1
}
    98d4:	bd10      	pop	{r4, pc}
    switch( SX1276.Settings.Modem )
    98d6:	2c01      	cmp	r4, #1
    SX1276.Settings.Modem = modem;
    98d8:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    98dc:	f04f 0000 	mov.w	r0, #0
    switch( SX1276.Settings.Modem )
    98e0:	d013      	beq.n	990a <SX1276SetModem+0x4e>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    98e2:	f013 fe83 	bl	1d5ec <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
    98e6:	2001      	movs	r0, #1
    98e8:	f013 fe75 	bl	1d5d6 <SX1276Read>
    98ec:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    98f0:	2001      	movs	r0, #1
    98f2:	f013 fe65 	bl	1d5c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    98f6:	2100      	movs	r1, #0
    98f8:	2040      	movs	r0, #64	; 0x40
    98fa:	f013 fe61 	bl	1d5c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
    98fe:	2130      	movs	r1, #48	; 0x30
}
    9900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    9904:	2041      	movs	r0, #65	; 0x41
    9906:	f013 be5b 	b.w	1d5c0 <SX1276Write>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    990a:	f013 fe6f 	bl	1d5ec <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
    990e:	4620      	mov	r0, r4
    9910:	f013 fe61 	bl	1d5d6 <SX1276Read>
    9914:	f060 017f 	orn	r1, r0, #127	; 0x7f
    9918:	b2c9      	uxtb	r1, r1
    991a:	4620      	mov	r0, r4
    991c:	f013 fe50 	bl	1d5c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
    9920:	2100      	movs	r1, #0
    9922:	2040      	movs	r0, #64	; 0x40
    9924:	f013 fe4c 	bl	1d5c0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
    9928:	2100      	movs	r1, #0
    992a:	e7e9      	b.n	9900 <SX1276SetModem+0x44>
    992c:	20000f04 	.word	0x20000f04

00009930 <SX1276Init>:
{
    9930:	b538      	push	{r3, r4, r5, lr}
    RadioEvents = events;
    9932:	4b17      	ldr	r3, [pc, #92]	; (9990 <SX1276Init+0x60>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    9934:	4917      	ldr	r1, [pc, #92]	; (9994 <SX1276Init+0x64>)
    RadioEvents = events;
    9936:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
    9938:	4817      	ldr	r0, [pc, #92]	; (9998 <SX1276Init+0x68>)
    993a:	4c18      	ldr	r4, [pc, #96]	; (999c <SX1276Init+0x6c>)
    993c:	f013 fe0f 	bl	1d55e <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
    9940:	4914      	ldr	r1, [pc, #80]	; (9994 <SX1276Init+0x64>)
    9942:	4817      	ldr	r0, [pc, #92]	; (99a0 <SX1276Init+0x70>)
    9944:	f013 fe0b 	bl	1d55e <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
    9948:	4912      	ldr	r1, [pc, #72]	; (9994 <SX1276Init+0x64>)
    994a:	4816      	ldr	r0, [pc, #88]	; (99a4 <SX1276Init+0x74>)
    994c:	f013 fe07 	bl	1d55e <TimerInit>
    SX1276Reset( );
    9950:	f7fe ff3c 	bl	87cc <SX1276Reset>
    RxChainCalibration( );
    9954:	f7ff fd2c 	bl	93b0 <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
    9958:	2000      	movs	r0, #0
    995a:	f013 fe47 	bl	1d5ec <SX1276SetOpMode>
    SX1276IoIrqInit( DioIrq );
    995e:	4812      	ldr	r0, [pc, #72]	; (99a8 <SX1276Init+0x78>)
    9960:	f7fe ff4a 	bl	87f8 <SX1276IoIrqInit>
    9964:	2500      	movs	r5, #0
        SX1276SetModem( RadioRegsInit[i].Modem );
    9966:	7820      	ldrb	r0, [r4, #0]
    9968:	f7ff ffa8 	bl	98bc <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    996c:	3501      	adds	r5, #1
    996e:	78a1      	ldrb	r1, [r4, #2]
    9970:	7860      	ldrb	r0, [r4, #1]
    9972:	f013 fe25 	bl	1d5c0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    9976:	2d10      	cmp	r5, #16
    9978:	f104 0403 	add.w	r4, r4, #3
    997c:	d1f3      	bne.n	9966 <SX1276Init+0x36>
    SX1276SetModem( MODEM_FSK );
    997e:	2000      	movs	r0, #0
    9980:	f7ff ff9c 	bl	98bc <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
    9984:	4b09      	ldr	r3, [pc, #36]	; (99ac <SX1276Init+0x7c>)
    9986:	2200      	movs	r2, #0
    9988:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
    998c:	bd38      	pop	{r3, r4, r5, pc}
    998e:	bf00      	nop
    9990:	20000ed0 	.word	0x20000ed0
    9994:	00009f75 	.word	0x00009f75
    9998:	20001048 	.word	0x20001048
    999c:	000203bb 	.word	0x000203bb
    99a0:	20000eec 	.word	0x20000eec
    99a4:	20000ed4 	.word	0x20000ed4
    99a8:	20000124 	.word	0x20000124
    99ac:	20000f04 	.word	0x20000f04

000099b0 <SX1276SetRxConfig>:
{
    99b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99b4:	b087      	sub	sp, #28
    99b6:	4681      	mov	r9, r0
    99b8:	9300      	str	r3, [sp, #0]
    99ba:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    99be:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
    99c2:	9301      	str	r3, [sp, #4]
    99c4:	460c      	mov	r4, r1
    99c6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    99ca:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    99ce:	9104      	str	r1, [sp, #16]
    99d0:	4615      	mov	r5, r2
    99d2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    99d6:	9205      	str	r2, [sp, #20]
    99d8:	f8cd c00c 	str.w	ip, [sp, #12]
    99dc:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    99e0:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
    99e4:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
    99e8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    99ec:	f89d 8054 	ldrb.w	r8, [sp, #84]	; 0x54
    99f0:	9302      	str	r3, [sp, #8]
    SX1276SetModem( modem );
    99f2:	f7ff ff63 	bl	98bc <SX1276SetModem>
    switch( modem )
    99f6:	e9dd c103 	ldrd	ip, r1, [sp, #12]
    99fa:	9a05      	ldr	r2, [sp, #20]
    99fc:	f1b9 0f00 	cmp.w	r9, #0
    9a00:	d005      	beq.n	9a0e <SX1276SetRxConfig+0x5e>
    9a02:	f1b9 0f01 	cmp.w	r9, #1
    9a06:	d064      	beq.n	9ad2 <SX1276SetRxConfig+0x122>
}
    9a08:	b007      	add	sp, #28
    9a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    9a0e:	488f      	ldr	r0, [pc, #572]	; (9c4c <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    9a10:	9200      	str	r2, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    9a12:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
    9a16:	f880 20ff 	strb.w	r2, [r0, #255]	; 0xff
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
    9a1a:	f880 c102 	strb.w	ip, [r0, #258]	; 0x102
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
    9a1e:	e9c0 b53d 	strd	fp, r5, [r0, #244]	; 0xf4
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    9a22:	f880 1101 	strb.w	r1, [r0, #257]	; 0x101
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    9a26:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
            SX1276.Settings.Fsk.FixLen = fixLen;
    9a2a:	f880 60fe 	strb.w	r6, [r0, #254]	; 0xfe
            SX1276.Settings.Fsk.CrcOn = crcOn;
    9a2e:	f880 8100 	strb.w	r8, [r0, #256]	; 0x100
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    9a32:	f8a0 70fc 	strh.w	r7, [r0, #252]	; 0xfc
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
    9a36:	fb03 fa0a 	mul.w	sl, r3, sl
    9a3a:	fbba f3f5 	udiv	r3, sl, r5
    9a3e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    9a42:	4b83      	ldr	r3, [pc, #524]	; (9c50 <SX1276SetRxConfig+0x2a0>)
    9a44:	fbb3 f5f5 	udiv	r5, r3, r5
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    9a48:	2002      	movs	r0, #2
    9a4a:	f3c5 2107 	ubfx	r1, r5, #8, #8
    9a4e:	f013 fdb7 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    9a52:	b2e9      	uxtb	r1, r5
    9a54:	2003      	movs	r0, #3
    9a56:	f013 fdb3 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
    9a5a:	4620      	mov	r0, r4
    9a5c:	f7ff f98c 	bl	8d78 <GetFskBandwidthRegValue>
    9a60:	4601      	mov	r1, r0
    9a62:	2012      	movs	r0, #18
    9a64:	f013 fdac 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
    9a68:	4658      	mov	r0, fp
    9a6a:	f7ff f985 	bl	8d78 <GetFskBandwidthRegValue>
    9a6e:	4601      	mov	r1, r0
    9a70:	2013      	movs	r0, #19
    9a72:	f013 fda5 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    9a76:	0a39      	lsrs	r1, r7, #8
    9a78:	2025      	movs	r0, #37	; 0x25
    9a7a:	f013 fda1 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    9a7e:	b2f9      	uxtb	r1, r7
    9a80:	2026      	movs	r0, #38	; 0x26
    9a82:	f013 fd9d 	bl	1d5c0 <SX1276Write>
            if( fixLen == 1 )
    9a86:	b316      	cbz	r6, 9ace <SX1276SetRxConfig+0x11e>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
    9a88:	9a00      	ldr	r2, [sp, #0]
    9a8a:	4611      	mov	r1, r2
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    9a8c:	2032      	movs	r0, #50	; 0x32
    9a8e:	f013 fd97 	bl	1d5c0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    9a92:	2030      	movs	r0, #48	; 0x30
    9a94:	f013 fd9f 	bl	1d5d6 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    9a98:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    9a9a:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    9a9e:	bf14      	ite	ne
    9aa0:	2100      	movne	r1, #0
    9aa2:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    9aa6:	ea40 1808 	orr.w	r8, r0, r8, lsl #4
    9aaa:	ea41 0108 	orr.w	r1, r1, r8
            SX1276Write( REG_PACKETCONFIG1,
    9aae:	b2c9      	uxtb	r1, r1
    9ab0:	2030      	movs	r0, #48	; 0x30
    9ab2:	f013 fd85 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    9ab6:	2031      	movs	r0, #49	; 0x31
    9ab8:	f013 fd8d 	bl	1d5d6 <SX1276Read>
    9abc:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    9ac0:	b2c9      	uxtb	r1, r1
    9ac2:	2031      	movs	r0, #49	; 0x31
}
    9ac4:	b007      	add	sp, #28
    9ac6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9aca:	f013 bd79 	b.w	1d5c0 <SX1276Write>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
    9ace:	21ff      	movs	r1, #255	; 0xff
    9ad0:	e7dc      	b.n	9a8c <SX1276SetRxConfig+0xdc>
            if( bandwidth > 2 )
    9ad2:	2c02      	cmp	r4, #2
    9ad4:	d900      	bls.n	9ad8 <SX1276SetRxConfig+0x128>
                while( 1 );
    9ad6:	e7fe      	b.n	9ad6 <SX1276SetRxConfig+0x126>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    9ad8:	485c      	ldr	r0, [pc, #368]	; (9c4c <SX1276SetRxConfig+0x29c>)
            SX1276.Settings.LoRa.Coderate = coderate;
    9ada:	9b00      	ldr	r3, [sp, #0]
    9adc:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
    9ae0:	2d06      	cmp	r5, #6
    9ae2:	46ab      	mov	fp, r5
    9ae4:	bf38      	it	cc
    9ae6:	f04f 0b06 	movcc.w	fp, #6
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    9aea:	9b01      	ldr	r3, [sp, #4]
    9aec:	f880 312f 	strb.w	r3, [r0, #303]	; 0x12f
            bandwidth += 7;
    9af0:	3407      	adds	r4, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    9af2:	f1bb 0f0c 	cmp.w	fp, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    9af6:	9b02      	ldr	r3, [sp, #8]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    9af8:	f8a0 712a 	strh.w	r7, [r0, #298]	; 0x12a
    9afc:	bf28      	it	cs
    9afe:	f04f 0b0c 	movcs.w	fp, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    9b02:	2c07      	cmp	r4, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    9b04:	e9c0 4548 	strd	r4, r5, [r0, #288]	; 0x120
            SX1276.Settings.LoRa.FixLen = fixLen;
    9b08:	f880 612c 	strb.w	r6, [r0, #300]	; 0x12c
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
    9b0c:	f880 212d 	strb.w	r2, [r0, #301]	; 0x12d
            SX1276.Settings.LoRa.CrcOn = crcOn;
    9b10:	f880 812e 	strb.w	r8, [r0, #302]	; 0x12e
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    9b14:	f880 3130 	strb.w	r3, [r0, #304]	; 0x130
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    9b18:	f880 1131 	strb.w	r1, [r0, #305]	; 0x131
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
    9b1c:	f880 c132 	strb.w	ip, [r0, #306]	; 0x132
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    9b20:	4681      	mov	r9, r0
    9b22:	d178      	bne.n	9c16 <SX1276SetRxConfig+0x266>
    9b24:	f1ab 030b 	sub.w	r3, fp, #11
    9b28:	2b01      	cmp	r3, #1
    9b2a:	bf8c      	ite	hi
    9b2c:	2300      	movhi	r3, #0
    9b2e:	2301      	movls	r3, #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    9b30:	201d      	movs	r0, #29
    9b32:	9201      	str	r2, [sp, #4]
    9b34:	f889 3128 	strb.w	r3, [r9, #296]	; 0x128
    9b38:	f013 fd4d 	bl	1d5d6 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    9b3c:	9b00      	ldr	r3, [sp, #0]
    9b3e:	ea46 0143 	orr.w	r1, r6, r3, lsl #1
    9b42:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
            SX1276Write( REG_LR_MODEMCONFIG1,
    9b46:	b2c9      	uxtb	r1, r1
    9b48:	201d      	movs	r0, #29
    9b4a:	f013 fd39 	bl	1d5c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    9b4e:	201e      	movs	r0, #30
    9b50:	f013 fd41 	bl	1d5d6 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
    9b54:	f3ca 2101 	ubfx	r1, sl, #8, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
    9b58:	ea41 0888 	orr.w	r8, r1, r8, lsl #2
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
    9b5c:	f000 0008 	and.w	r0, r0, #8
            SX1276Write( REG_LR_MODEMCONFIG2,
    9b60:	ea48 1b0b 	orr.w	fp, r8, fp, lsl #4
    9b64:	ea4b 0b00 	orr.w	fp, fp, r0
    9b68:	fa5f f18b 	uxtb.w	r1, fp
    9b6c:	201e      	movs	r0, #30
    9b6e:	f013 fd27 	bl	1d5c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    9b72:	2026      	movs	r0, #38	; 0x26
    9b74:	f013 fd2f 	bl	1d5d6 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    9b78:	f899 3128 	ldrb.w	r3, [r9, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    9b7c:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    9b80:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    9b84:	b2c9      	uxtb	r1, r1
    9b86:	2026      	movs	r0, #38	; 0x26
    9b88:	f013 fd1a 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
    9b8c:	fa5f f18a 	uxtb.w	r1, sl
    9b90:	201f      	movs	r0, #31
    9b92:	f013 fd15 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
    9b96:	0a39      	lsrs	r1, r7, #8
    9b98:	2020      	movs	r0, #32
    9b9a:	f013 fd11 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
    9b9e:	b2f9      	uxtb	r1, r7
    9ba0:	2021      	movs	r0, #33	; 0x21
    9ba2:	f013 fd0d 	bl	1d5c0 <SX1276Write>
            if( fixLen == 1 )
    9ba6:	9a01      	ldr	r2, [sp, #4]
    9ba8:	b11e      	cbz	r6, 9bb2 <SX1276SetRxConfig+0x202>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
    9baa:	4611      	mov	r1, r2
    9bac:	2022      	movs	r0, #34	; 0x22
    9bae:	f013 fd07 	bl	1d5c0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9bb2:	f899 312f 	ldrb.w	r3, [r9, #303]	; 0x12f
    9bb6:	b16b      	cbz	r3, 9bd4 <SX1276SetRxConfig+0x224>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    9bb8:	2044      	movs	r0, #68	; 0x44
    9bba:	f013 fd0c 	bl	1d5d6 <SX1276Read>
    9bbe:	f060 017f 	orn	r1, r0, #127	; 0x7f
    9bc2:	b2c9      	uxtb	r1, r1
    9bc4:	2044      	movs	r0, #68	; 0x44
    9bc6:	f013 fcfb 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    9bca:	f899 1130 	ldrb.w	r1, [r9, #304]	; 0x130
    9bce:	2024      	movs	r0, #36	; 0x24
    9bd0:	f013 fcf6 	bl	1d5c0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    9bd4:	2c09      	cmp	r4, #9
    9bd6:	d12b      	bne.n	9c30 <SX1276SetRxConfig+0x280>
    9bd8:	f8d9 20e4 	ldr.w	r2, [r9, #228]	; 0xe4
    9bdc:	4b1d      	ldr	r3, [pc, #116]	; (9c54 <SX1276SetRxConfig+0x2a4>)
    9bde:	429a      	cmp	r2, r3
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    9be0:	f04f 0102 	mov.w	r1, #2
    9be4:	f04f 0036 	mov.w	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
    9be8:	d91e      	bls.n	9c28 <SX1276SetRxConfig+0x278>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    9bea:	f013 fce9 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
    9bee:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    9bf0:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    9bf2:	f013 fce5 	bl	1d5c0 <SX1276Write>
            if( datarate == 6 )
    9bf6:	2d06      	cmp	r5, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9bf8:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    9bfc:	d81b      	bhi.n	9c36 <SX1276SetRxConfig+0x286>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9bfe:	f013 fcea 	bl	1d5d6 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    9c02:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    9c06:	f041 0105 	orr.w	r1, r1, #5
    9c0a:	2031      	movs	r0, #49	; 0x31
    9c0c:	f013 fcd8 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9c10:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9c12:	2037      	movs	r0, #55	; 0x37
    9c14:	e756      	b.n	9ac4 <SX1276SetRxConfig+0x114>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    9c16:	2c08      	cmp	r4, #8
    9c18:	d104      	bne.n	9c24 <SX1276SetRxConfig+0x274>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    9c1a:	2d0b      	cmp	r5, #11
    9c1c:	bf94      	ite	ls
    9c1e:	2300      	movls	r3, #0
    9c20:	2301      	movhi	r3, #1
    9c22:	e785      	b.n	9b30 <SX1276SetRxConfig+0x180>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    9c24:	2300      	movs	r3, #0
    9c26:	e783      	b.n	9b30 <SX1276SetRxConfig+0x180>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
    9c28:	f013 fcca 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
    9c2c:	217f      	movs	r1, #127	; 0x7f
    9c2e:	e7df      	b.n	9bf0 <SX1276SetRxConfig+0x240>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
    9c30:	2103      	movs	r1, #3
    9c32:	2036      	movs	r0, #54	; 0x36
    9c34:	e7dd      	b.n	9bf2 <SX1276SetRxConfig+0x242>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9c36:	f013 fcce 	bl	1d5d6 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    9c3a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    9c3e:	f041 0103 	orr.w	r1, r1, #3
    9c42:	2031      	movs	r0, #49	; 0x31
    9c44:	f013 fcbc 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9c48:	210a      	movs	r1, #10
    9c4a:	e7e2      	b.n	9c12 <SX1276SetRxConfig+0x262>
    9c4c:	20000f04 	.word	0x20000f04
    9c50:	01e84800 	.word	0x01e84800
    9c54:	1f4add40 	.word	0x1f4add40

00009c58 <SX1276SetTxConfig>:
{
    9c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c5c:	b087      	sub	sp, #28
    9c5e:	461d      	mov	r5, r3
    9c60:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    9c64:	9302      	str	r3, [sp, #8]
    9c66:	468a      	mov	sl, r1
    9c68:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    9c6c:	9918      	ldr	r1, [sp, #96]	; 0x60
    9c6e:	9304      	str	r3, [sp, #16]
    9c70:	4617      	mov	r7, r2
    9c72:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    9c76:	9205      	str	r2, [sp, #20]
    9c78:	9103      	str	r1, [sp, #12]
    9c7a:	9001      	str	r0, [sp, #4]
    9c7c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    9c80:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    9c84:	f8bd 9048 	ldrh.w	r9, [sp, #72]	; 0x48
    9c88:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
    9c8c:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    SX1276SetModem( modem );
    9c90:	f7ff fe14 	bl	98bc <SX1276SetModem>
    SX1276SetRfTxPower( power );
    9c94:	4650      	mov	r0, sl
    9c96:	f7fe ff43 	bl	8b20 <SX1276SetRfTxPower>
    switch( modem )
    9c9a:	9a01      	ldr	r2, [sp, #4]
    9c9c:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    9ca0:	b12a      	cbz	r2, 9cae <SX1276SetTxConfig+0x56>
    9ca2:	2a01      	cmp	r2, #1
    9ca4:	9a05      	ldr	r2, [sp, #20]
    9ca6:	d05e      	beq.n	9d66 <SX1276SetTxConfig+0x10e>
}
    9ca8:	b007      	add	sp, #28
    9caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SX1276.Settings.Fsk.Power = power;
    9cae:	4a78      	ldr	r2, [pc, #480]	; (9e90 <SX1276SetTxConfig+0x238>)
            SX1276.Settings.Fsk.IqInverted = iqInverted;
    9cb0:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9cb4:	f643 5309 	movw	r3, #15625	; 0x3d09
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
    9cb8:	e9c2 753b 	strd	r7, r5, [r2, #236]	; 0xec
            SX1276.Settings.Fsk.Datarate = datarate;
    9cbc:	f8c2 80f8 	str.w	r8, [r2, #248]	; 0xf8
            SX1276.Settings.Fsk.CrcOn = crcOn;
    9cc0:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
            SX1276.Settings.Fsk.TxTimeout = timeout;
    9cc4:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            SX1276.Settings.Fsk.Power = power;
    9cc8:	f882 a0e8 	strb.w	sl, [r2, #232]	; 0xe8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9ccc:	fbb7 f1f3 	udiv	r1, r7, r3
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
    9cd0:	f8a2 90fc 	strh.w	r9, [r2, #252]	; 0xfc
            SX1276.Settings.Fsk.FixLen = fixLen;
    9cd4:	f882 60fe 	strb.w	r6, [r2, #254]	; 0xfe
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
    9cd8:	fb03 7211 	mls	r2, r3, r1, r7
    9cdc:	f641 6784 	movw	r7, #7812	; 0x1e84
    9ce0:	eb07 2702 	add.w	r7, r7, r2, lsl #8
    9ce4:	fbb7 f7f3 	udiv	r7, r7, r3
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
    9ce8:	eb07 2701 	add.w	r7, r7, r1, lsl #8
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
    9cec:	f3c7 2107 	ubfx	r1, r7, #8, #8
    9cf0:	2004      	movs	r0, #4
    9cf2:	f013 fc65 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
    9cf6:	b2f9      	uxtb	r1, r7
    9cf8:	2005      	movs	r0, #5
    9cfa:	f013 fc61 	bl	1d5c0 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
    9cfe:	4b65      	ldr	r3, [pc, #404]	; (9e94 <SX1276SetTxConfig+0x23c>)
    9d00:	fbb3 f8f8 	udiv	r8, r3, r8
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
    9d04:	2002      	movs	r0, #2
    9d06:	f3c8 2107 	ubfx	r1, r8, #8, #8
    9d0a:	f013 fc59 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
    9d0e:	fa5f f188 	uxtb.w	r1, r8
    9d12:	2003      	movs	r0, #3
    9d14:	f013 fc54 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    9d18:	ea4f 2119 	mov.w	r1, r9, lsr #8
    9d1c:	2025      	movs	r0, #37	; 0x25
    9d1e:	f013 fc4f 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
    9d22:	fa5f f189 	uxtb.w	r1, r9
    9d26:	2026      	movs	r0, #38	; 0x26
    9d28:	f013 fc4a 	bl	1d5c0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
    9d2c:	2030      	movs	r0, #48	; 0x30
    9d2e:	f013 fc52 	bl	1d5d6 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    9d32:	2e00      	cmp	r6, #0
                           RF_PACKETCONFIG1_CRC_MASK &
    9d34:	f000 006f 	and.w	r0, r0, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
    9d38:	bf14      	ite	ne
    9d3a:	2100      	movne	r1, #0
    9d3c:	f06f 017f 	mvneq.w	r1, #127	; 0x7f
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
    9d40:	ea40 1404 	orr.w	r4, r0, r4, lsl #4
    9d44:	4321      	orrs	r1, r4
            SX1276Write( REG_PACKETCONFIG1,
    9d46:	b2c9      	uxtb	r1, r1
    9d48:	2030      	movs	r0, #48	; 0x30
    9d4a:	f013 fc39 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
    9d4e:	2031      	movs	r0, #49	; 0x31
    9d50:	f013 fc41 	bl	1d5d6 <SX1276Read>
    9d54:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    9d58:	b2c9      	uxtb	r1, r1
    9d5a:	2031      	movs	r0, #49	; 0x31
}
    9d5c:	b007      	add	sp, #28
    9d5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9d62:	f013 bc2d 	b.w	1d5c0 <SX1276Write>
            SX1276.Settings.LoRa.Power = power;
    9d66:	4f4a      	ldr	r7, [pc, #296]	; (9e90 <SX1276SetTxConfig+0x238>)
            if( bandwidth > 2 )
    9d68:	2d02      	cmp	r5, #2
            SX1276.Settings.LoRa.Power = power;
    9d6a:	f887 a11c 	strb.w	sl, [r7, #284]	; 0x11c
            if( bandwidth > 2 )
    9d6e:	d900      	bls.n	9d72 <SX1276SetTxConfig+0x11a>
                while( 1 );
    9d70:	e7fe      	b.n	9d70 <SX1276SetTxConfig+0x118>
            bandwidth += 7;
    9d72:	f1b8 0f06 	cmp.w	r8, #6
    9d76:	46c2      	mov	sl, r8
    9d78:	bf38      	it	cc
    9d7a:	f04f 0a06 	movcc.w	sl, #6
    9d7e:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
    9d80:	f1ba 0f0c 	cmp.w	sl, #12
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    9d84:	9802      	ldr	r0, [sp, #8]
            SX1276.Settings.LoRa.Coderate = coderate;
    9d86:	f887 b129 	strb.w	fp, [r7, #297]	; 0x129
    9d8a:	bf28      	it	cs
    9d8c:	f04f 0a0c 	movcs.w	sl, #12
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    9d90:	2d07      	cmp	r5, #7
            SX1276.Settings.LoRa.Datarate = datarate;
    9d92:	e9c7 5848 	strd	r5, r8, [r7, #288]	; 0x120
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
    9d96:	f8a7 912a 	strh.w	r9, [r7, #298]	; 0x12a
            SX1276.Settings.LoRa.FixLen = fixLen;
    9d9a:	f887 612c 	strb.w	r6, [r7, #300]	; 0x12c
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
    9d9e:	f887 212f 	strb.w	r2, [r7, #303]	; 0x12f
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
    9da2:	f887 0130 	strb.w	r0, [r7, #304]	; 0x130
            SX1276.Settings.LoRa.CrcOn = crcOn;
    9da6:	f887 412e 	strb.w	r4, [r7, #302]	; 0x12e
            SX1276.Settings.LoRa.IqInverted = iqInverted;
    9daa:	f887 3131 	strb.w	r3, [r7, #305]	; 0x131
            SX1276.Settings.LoRa.TxTimeout = timeout;
    9dae:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    9db2:	d158      	bne.n	9e66 <SX1276SetTxConfig+0x20e>
    9db4:	f1aa 030b 	sub.w	r3, sl, #11
    9db8:	2b01      	cmp	r3, #1
    9dba:	bf8c      	ite	hi
    9dbc:	2300      	movhi	r3, #0
    9dbe:	2301      	movls	r3, #1
    9dc0:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
            if( SX1276.Settings.LoRa.FreqHopOn == true )
    9dc4:	b16a      	cbz	r2, 9de2 <SX1276SetTxConfig+0x18a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
    9dc6:	2044      	movs	r0, #68	; 0x44
    9dc8:	f013 fc05 	bl	1d5d6 <SX1276Read>
    9dcc:	f060 017f 	orn	r1, r0, #127	; 0x7f
    9dd0:	b2c9      	uxtb	r1, r1
    9dd2:	2044      	movs	r0, #68	; 0x44
    9dd4:	f013 fbf4 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
    9dd8:	f897 1130 	ldrb.w	r1, [r7, #304]	; 0x130
    9ddc:	2024      	movs	r0, #36	; 0x24
    9dde:	f013 fbef 	bl	1d5c0 <SX1276Write>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    9de2:	ea46 064b 	orr.w	r6, r6, fp, lsl #1
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    9de6:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
    9de8:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
    9dec:	f013 fbf3 	bl	1d5d6 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG1,
    9df0:	b2e9      	uxtb	r1, r5
    9df2:	201d      	movs	r0, #29
    9df4:	f013 fbe4 	bl	1d5c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
    9df8:	201e      	movs	r0, #30
    9dfa:	f013 fbec 	bl	1d5d6 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
    9dfe:	00a4      	lsls	r4, r4, #2
                           RFLR_MODEMCONFIG2_SF_MASK &
    9e00:	f000 000b 	and.w	r0, r0, #11
            SX1276Write( REG_LR_MODEMCONFIG2,
    9e04:	ea44 1a0a 	orr.w	sl, r4, sl, lsl #4
    9e08:	ea4a 0a00 	orr.w	sl, sl, r0
    9e0c:	fa5f f18a 	uxtb.w	r1, sl
    9e10:	201e      	movs	r0, #30
    9e12:	f013 fbd5 	bl	1d5c0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    9e16:	2026      	movs	r0, #38	; 0x26
    9e18:	f013 fbdd 	bl	1d5d6 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
    9e1c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
    9e20:	f020 0108 	bic.w	r1, r0, #8
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
    9e24:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
            SX1276Write( REG_LR_MODEMCONFIG3,
    9e28:	b2c9      	uxtb	r1, r1
    9e2a:	2026      	movs	r0, #38	; 0x26
    9e2c:	f013 fbc8 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
    9e30:	ea4f 2119 	mov.w	r1, r9, lsr #8
    9e34:	2020      	movs	r0, #32
    9e36:	f013 fbc3 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
    9e3a:	2021      	movs	r0, #33	; 0x21
    9e3c:	fa5f f189 	uxtb.w	r1, r9
    9e40:	f013 fbbe 	bl	1d5c0 <SX1276Write>
            if( datarate == 6 )
    9e44:	f1b8 0f06 	cmp.w	r8, #6
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9e48:	f04f 0031 	mov.w	r0, #49	; 0x31
            if( datarate == 6 )
    9e4c:	d815      	bhi.n	9e7a <SX1276SetTxConfig+0x222>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9e4e:	f013 fbc2 	bl	1d5d6 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
    9e52:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    9e56:	f041 0105 	orr.w	r1, r1, #5
    9e5a:	2031      	movs	r0, #49	; 0x31
    9e5c:	f013 fbb0 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9e60:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9e62:	2037      	movs	r0, #55	; 0x37
    9e64:	e77a      	b.n	9d5c <SX1276SetTxConfig+0x104>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
    9e66:	2d08      	cmp	r5, #8
    9e68:	d105      	bne.n	9e76 <SX1276SetTxConfig+0x21e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
    9e6a:	f1b8 0f0b 	cmp.w	r8, #11
    9e6e:	bf94      	ite	ls
    9e70:	2300      	movls	r3, #0
    9e72:	2301      	movhi	r3, #1
    9e74:	e7a4      	b.n	9dc0 <SX1276SetTxConfig+0x168>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
    9e76:	2300      	movs	r3, #0
    9e78:	e7a2      	b.n	9dc0 <SX1276SetTxConfig+0x168>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
    9e7a:	f013 fbac 	bl	1d5d6 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
    9e7e:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
                SX1276Write( REG_LR_DETECTOPTIMIZE,
    9e82:	f041 0103 	orr.w	r1, r1, #3
    9e86:	2031      	movs	r0, #49	; 0x31
    9e88:	f013 fb9a 	bl	1d5c0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
    9e8c:	210a      	movs	r1, #10
    9e8e:	e7e8      	b.n	9e62 <SX1276SetTxConfig+0x20a>
    9e90:	20000f04 	.word	0x20000f04
    9e94:	01e84800 	.word	0x01e84800

00009e98 <SX1276SetTxContinuousWave>:
{
    9e98:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
    9e9a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
    9e9e:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
    9ea0:	4354      	muls	r4, r2
{
    9ea2:	460d      	mov	r5, r1
    SX1276SetChannel( freq );
    9ea4:	f7ff f80a 	bl	8ebc <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
    9ea8:	2300      	movs	r3, #0
    9eaa:	2205      	movs	r2, #5
    9eac:	e9cd 3201 	strd	r3, r2, [sp, #4]
    9eb0:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
    9eb4:	e9cd 3306 	strd	r3, r3, [sp, #24]
    9eb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
    9ebc:	9303      	str	r3, [sp, #12]
    9ebe:	4618      	mov	r0, r3
    9ec0:	4629      	mov	r1, r5
    9ec2:	9200      	str	r2, [sp, #0]
    9ec4:	9408      	str	r4, [sp, #32]
    9ec6:	461a      	mov	r2, r3
    9ec8:	f7ff fec6 	bl	9c58 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
    9ecc:	2031      	movs	r0, #49	; 0x31
    9ece:	f013 fb82 	bl	1d5d6 <SX1276Read>
    9ed2:	f000 01bf 	and.w	r1, r0, #191	; 0xbf
    9ed6:	2031      	movs	r0, #49	; 0x31
    9ed8:	f013 fb72 	bl	1d5c0 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    9edc:	4d0c      	ldr	r5, [pc, #48]	; (9f10 <SX1276SetTxContinuousWave+0x78>)
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
    9ede:	21f0      	movs	r1, #240	; 0xf0
    9ee0:	2040      	movs	r0, #64	; 0x40
    9ee2:	f013 fb6d 	bl	1d5c0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
    9ee6:	21a0      	movs	r1, #160	; 0xa0
    9ee8:	2041      	movs	r0, #65	; 0x41
    9eea:	f013 fb69 	bl	1d5c0 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
    9eee:	4621      	mov	r1, r4
    9ef0:	4628      	mov	r0, r5
    9ef2:	f013 fb3c 	bl	1d56e <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
    9ef6:	4b07      	ldr	r3, [pc, #28]	; (9f14 <SX1276SetTxContinuousWave+0x7c>)
    9ef8:	2202      	movs	r2, #2
    TimerStart( &TxTimeoutTimer );
    9efa:	4628      	mov	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
    9efc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    TimerStart( &TxTimeoutTimer );
    9f00:	f7fe fe9a 	bl	8c38 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    9f04:	2003      	movs	r0, #3
}
    9f06:	b00b      	add	sp, #44	; 0x2c
    9f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
    9f0c:	f013 bb6e 	b.w	1d5ec <SX1276SetOpMode>
    9f10:	20001048 	.word	0x20001048
    9f14:	20000f04 	.word	0x20000f04

00009f18 <SX1276SetMaxPayloadLength>:
{
    9f18:	b538      	push	{r3, r4, r5, lr}
    9f1a:	4605      	mov	r5, r0
    9f1c:	460c      	mov	r4, r1
    SX1276SetModem( modem );
    9f1e:	f7ff fccd 	bl	98bc <SX1276SetModem>
    switch( modem )
    9f22:	b115      	cbz	r5, 9f2a <SX1276SetMaxPayloadLength+0x12>
    9f24:	2d01      	cmp	r5, #1
    9f26:	d00b      	beq.n	9f40 <SX1276SetMaxPayloadLength+0x28>
}
    9f28:	bd38      	pop	{r3, r4, r5, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
    9f2a:	4b07      	ldr	r3, [pc, #28]	; (9f48 <SX1276SetMaxPayloadLength+0x30>)
    9f2c:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    9f30:	2b00      	cmp	r3, #0
    9f32:	d1f9      	bne.n	9f28 <SX1276SetMaxPayloadLength+0x10>
            SX1276Write( REG_PAYLOADLENGTH, max );
    9f34:	4621      	mov	r1, r4
    9f36:	2032      	movs	r0, #50	; 0x32
}
    9f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
    9f3c:	f013 bb40 	b.w	1d5c0 <SX1276Write>
    9f40:	4621      	mov	r1, r4
    9f42:	2023      	movs	r0, #35	; 0x23
    9f44:	e7f8      	b.n	9f38 <SX1276SetMaxPayloadLength+0x20>
    9f46:	bf00      	nop
    9f48:	20000f04 	.word	0x20000f04

00009f4c <SX1276SetPublicNetwork>:
{
    9f4c:	b510      	push	{r4, lr}
    9f4e:	4604      	mov	r4, r0
    SX1276SetModem( MODEM_LORA );
    9f50:	2001      	movs	r0, #1
    9f52:	f7ff fcb3 	bl	98bc <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
    9f56:	4b06      	ldr	r3, [pc, #24]	; (9f70 <SX1276SetPublicNetwork+0x24>)
    9f58:	f883 4138 	strb.w	r4, [r3, #312]	; 0x138
    if( enable == true )
    9f5c:	b12c      	cbz	r4, 9f6a <SX1276SetPublicNetwork+0x1e>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
    9f5e:	2134      	movs	r1, #52	; 0x34
}
    9f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    9f64:	2039      	movs	r0, #57	; 0x39
    9f66:	f013 bb2b 	b.w	1d5c0 <SX1276Write>
    9f6a:	2112      	movs	r1, #18
    9f6c:	e7f8      	b.n	9f60 <SX1276SetPublicNetwork+0x14>
    9f6e:	bf00      	nop
    9f70:	20000f04 	.word	0x20000f04

00009f74 <SX1276OnTimeoutIrq>:
{
    9f74:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
    9f76:	4c2d      	ldr	r4, [pc, #180]	; (a02c <SX1276OnTimeoutIrq+0xb8>)
    9f78:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9f7c:	2b01      	cmp	r3, #1
    9f7e:	4626      	mov	r6, r4
    9f80:	d002      	beq.n	9f88 <SX1276OnTimeoutIrq+0x14>
    9f82:	2b02      	cmp	r3, #2
    9f84:	d02d      	beq.n	9fe2 <SX1276OnTimeoutIrq+0x6e>
}
    9f86:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
    9f88:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9f8c:	b9cb      	cbnz	r3, 9fc2 <SX1276OnTimeoutIrq+0x4e>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
    9f8e:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    9f92:	210b      	movs	r1, #11
    9f94:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
    9f96:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
            SX1276.Settings.FskPacketHandler.Size = 0;
    9f9a:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
    9f9e:	f013 fb0f 	bl	1d5c0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
    9fa2:	2110      	movs	r1, #16
    9fa4:	203f      	movs	r0, #63	; 0x3f
    9fa6:	f013 fb0b 	bl	1d5c0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
    9faa:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
    9fae:	b193      	cbz	r3, 9fd6 <SX1276OnTimeoutIrq+0x62>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
    9fb0:	200d      	movs	r0, #13
    9fb2:	f013 fb10 	bl	1d5d6 <SX1276Read>
    9fb6:	f040 0140 	orr.w	r1, r0, #64	; 0x40
    9fba:	b2c9      	uxtb	r1, r1
    9fbc:	200d      	movs	r0, #13
    9fbe:	f013 faff 	bl	1d5c0 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
    9fc2:	4b1b      	ldr	r3, [pc, #108]	; (a030 <SX1276OnTimeoutIrq+0xbc>)
    9fc4:	681b      	ldr	r3, [r3, #0]
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	d0dd      	beq.n	9f86 <SX1276OnTimeoutIrq+0x12>
    9fca:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    9fcc:	2b00      	cmp	r3, #0
    9fce:	d0da      	beq.n	9f86 <SX1276OnTimeoutIrq+0x12>
}
    9fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            RadioEvents->TxTimeout( );
    9fd4:	4718      	bx	r3
                TimerStop( &RxTimeoutSyncWord );
    9fd6:	4817      	ldr	r0, [pc, #92]	; (a034 <SX1276OnTimeoutIrq+0xc0>)
                SX1276.Settings.State = RF_IDLE;
    9fd8:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
                TimerStop( &RxTimeoutSyncWord );
    9fdc:	f7fe fea0 	bl	8d20 <TimerStop>
    9fe0:	e7ef      	b.n	9fc2 <SX1276OnTimeoutIrq+0x4e>
        SX1276Reset( );
    9fe2:	f7fe fbf3 	bl	87cc <SX1276Reset>
        RxChainCalibration( );
    9fe6:	f7ff f9e3 	bl	93b0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    9fea:	2000      	movs	r0, #0
    9fec:	f013 fafe 	bl	1d5ec <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    9ff0:	4c11      	ldr	r4, [pc, #68]	; (a038 <SX1276OnTimeoutIrq+0xc4>)
        SX1276SetOpMode( RF_OPMODE_SLEEP );
    9ff2:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
    9ff4:	7820      	ldrb	r0, [r4, #0]
    9ff6:	f7ff fc61 	bl	98bc <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
    9ffa:	3501      	adds	r5, #1
    9ffc:	78a1      	ldrb	r1, [r4, #2]
    9ffe:	7860      	ldrb	r0, [r4, #1]
    a000:	f013 fade 	bl	1d5c0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
    a004:	2d10      	cmp	r5, #16
    a006:	f104 0403 	add.w	r4, r4, #3
    a00a:	d1f3      	bne.n	9ff4 <SX1276OnTimeoutIrq+0x80>
        SX1276SetModem( MODEM_FSK );
    a00c:	2000      	movs	r0, #0
    a00e:	f7ff fc55 	bl	98bc <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
    a012:	f896 0138 	ldrb.w	r0, [r6, #312]	; 0x138
    a016:	f7ff ff99 	bl	9f4c <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
    a01a:	2300      	movs	r3, #0
    a01c:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
    a020:	4b03      	ldr	r3, [pc, #12]	; (a030 <SX1276OnTimeoutIrq+0xbc>)
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	2b00      	cmp	r3, #0
    a026:	d0ae      	beq.n	9f86 <SX1276OnTimeoutIrq+0x12>
    a028:	685b      	ldr	r3, [r3, #4]
    a02a:	e7cf      	b.n	9fcc <SX1276OnTimeoutIrq+0x58>
    a02c:	20000f04 	.word	0x20000f04
    a030:	20000ed0 	.word	0x20000ed0
    a034:	20000ed4 	.word	0x20000ed4
    a038:	000203bb 	.word	0x000203bb

0000a03c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    a03e:	794b      	ldrb	r3, [r1, #5]
    a040:	2b01      	cmp	r3, #1
    a042:	d02a      	beq.n	a09a <uarte_nrfx_configure+0x5e>
    a044:	2b03      	cmp	r3, #3
    a046:	d125      	bne.n	a094 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    a048:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    a04a:	798b      	ldrb	r3, [r1, #6]
    a04c:	2b03      	cmp	r3, #3
    a04e:	d121      	bne.n	a094 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    a050:	79cc      	ldrb	r4, [r1, #7]
    a052:	b12c      	cbz	r4, a060 <uarte_nrfx_configure+0x24>
    a054:	2c01      	cmp	r4, #1
    a056:	d11d      	bne.n	a094 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    a058:	6843      	ldr	r3, [r0, #4]
    a05a:	685b      	ldr	r3, [r3, #4]
    a05c:	079b      	lsls	r3, r3, #30
    a05e:	d019      	beq.n	a094 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    a060:	790a      	ldrb	r2, [r1, #4]
    a062:	b112      	cbz	r2, a06a <uarte_nrfx_configure+0x2e>
    a064:	2a02      	cmp	r2, #2
    a066:	d115      	bne.n	a094 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    a068:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    a06a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    a06c:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    a06e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    a072:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    a074:	d065      	beq.n	a142 <uarte_nrfx_configure+0x106>
    a076:	d82d      	bhi.n	a0d4 <uarte_nrfx_configure+0x98>
    a078:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    a07c:	d064      	beq.n	a148 <uarte_nrfx_configure+0x10c>
    a07e:	d816      	bhi.n	a0ae <uarte_nrfx_configure+0x72>
    a080:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    a084:	d062      	beq.n	a14c <uarte_nrfx_configure+0x110>
    a086:	d80a      	bhi.n	a09e <uarte_nrfx_configure+0x62>
    a088:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a08c:	d061      	beq.n	a152 <uarte_nrfx_configure+0x116>
    a08e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    a092:	d061      	beq.n	a158 <uarte_nrfx_configure+0x11c>
    a094:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a098:	e052      	b.n	a140 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    a09a:	2600      	movs	r6, #0
    a09c:	e7d5      	b.n	a04a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    a09e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    a0a2:	d05c      	beq.n	a15e <uarte_nrfx_configure+0x122>
    a0a4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    a0a8:	d1f4      	bne.n	a094 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    a0aa:	4b37      	ldr	r3, [pc, #220]	; (a188 <uarte_nrfx_configure+0x14c>)
    a0ac:	e03c      	b.n	a128 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    a0ae:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    a0b2:	d057      	beq.n	a164 <uarte_nrfx_configure+0x128>
    a0b4:	d807      	bhi.n	a0c6 <uarte_nrfx_configure+0x8a>
    a0b6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    a0ba:	d055      	beq.n	a168 <uarte_nrfx_configure+0x12c>
    a0bc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    a0c0:	d1e8      	bne.n	a094 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    a0c2:	4b32      	ldr	r3, [pc, #200]	; (a18c <uarte_nrfx_configure+0x150>)
    a0c4:	e030      	b.n	a128 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    a0c6:	f647 2712 	movw	r7, #31250	; 0x7a12
    a0ca:	42bb      	cmp	r3, r7
    a0cc:	d1e2      	bne.n	a094 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    a0ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    a0d2:	e029      	b.n	a128 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    a0d4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    a0d8:	d048      	beq.n	a16c <uarte_nrfx_configure+0x130>
    a0da:	d813      	bhi.n	a104 <uarte_nrfx_configure+0xc8>
    a0dc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    a0e0:	d047      	beq.n	a172 <uarte_nrfx_configure+0x136>
    a0e2:	d809      	bhi.n	a0f8 <uarte_nrfx_configure+0xbc>
    a0e4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    a0e8:	42bb      	cmp	r3, r7
    a0ea:	d044      	beq.n	a176 <uarte_nrfx_configure+0x13a>
    a0ec:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    a0f0:	d1d0      	bne.n	a094 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    a0f2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    a0f6:	e017      	b.n	a128 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    a0f8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    a0fc:	d1ca      	bne.n	a094 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    a0fe:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    a102:	e011      	b.n	a128 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    a104:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    a108:	d038      	beq.n	a17c <uarte_nrfx_configure+0x140>
    a10a:	d808      	bhi.n	a11e <uarte_nrfx_configure+0xe2>
    a10c:	4f20      	ldr	r7, [pc, #128]	; (a190 <uarte_nrfx_configure+0x154>)
    a10e:	42bb      	cmp	r3, r7
    a110:	d037      	beq.n	a182 <uarte_nrfx_configure+0x146>
    a112:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    a116:	d1bd      	bne.n	a094 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    a118:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    a11c:	e004      	b.n	a128 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    a11e:	4f1d      	ldr	r7, [pc, #116]	; (a194 <uarte_nrfx_configure+0x158>)
    a120:	42bb      	cmp	r3, r7
    a122:	d1b7      	bne.n	a094 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    a124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    a128:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    a12c:	6903      	ldr	r3, [r0, #16]
    a12e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    a130:	4334      	orrs	r4, r6
    a132:	4322      	orrs	r2, r4
    a134:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a136:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    a13a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    a13e:	2000      	movs	r0, #0
}
    a140:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    a142:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    a146:	e7ef      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    a148:	4b13      	ldr	r3, [pc, #76]	; (a198 <uarte_nrfx_configure+0x15c>)
    a14a:	e7ed      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    a14c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    a150:	e7ea      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    a152:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    a156:	e7e7      	b.n	a128 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    a158:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    a15c:	e7e4      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    a15e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    a162:	e7e1      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    a164:	4b0d      	ldr	r3, [pc, #52]	; (a19c <uarte_nrfx_configure+0x160>)
    a166:	e7df      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    a168:	4b0d      	ldr	r3, [pc, #52]	; (a1a0 <uarte_nrfx_configure+0x164>)
    a16a:	e7dd      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    a16c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    a170:	e7da      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    a172:	4b0c      	ldr	r3, [pc, #48]	; (a1a4 <uarte_nrfx_configure+0x168>)
    a174:	e7d8      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    a176:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    a17a:	e7d5      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    a17c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    a180:	e7d2      	b.n	a128 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    a182:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a186:	e7cf      	b.n	a128 <uarte_nrfx_configure+0xec>
    a188:	0013b000 	.word	0x0013b000
    a18c:	004ea000 	.word	0x004ea000
    a190:	0003d090 	.word	0x0003d090
    a194:	000f4240 	.word	0x000f4240
    a198:	00275000 	.word	0x00275000
    a19c:	0075c000 	.word	0x0075c000
    a1a0:	003af000 	.word	0x003af000
    a1a4:	013a9000 	.word	0x013a9000

0000a1a8 <nrf_gpio_cfg_input>:
    *p_pin = pin_number & 0x1F;
    a1a8:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    a1ac:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a1ae:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    a1b0:	4b04      	ldr	r3, [pc, #16]	; (a1c4 <nrf_gpio_cfg_input+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    a1b2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    a1b6:	bf18      	it	ne
    a1b8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a1bc:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    a1be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    a1c2:	4770      	bx	lr
    a1c4:	50000300 	.word	0x50000300

0000a1c8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    a1ca:	6906      	ldr	r6, [r0, #16]
{
    a1cc:	4605      	mov	r5, r0
    a1ce:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a1d0:	f013 fceb 	bl	1dbaa <k_is_in_isr>
    a1d4:	b910      	cbnz	r0, a1dc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    a1d6:	4b20      	ldr	r3, [pc, #128]	; (a258 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
    a1d8:	781b      	ldrb	r3, [r3, #0]
    a1da:	b983      	cbnz	r3, a1fe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    a1dc:	f04f 0320 	mov.w	r3, #32
    a1e0:	f3ef 8411 	mrs	r4, BASEPRI
    a1e4:	f383 8812 	msr	BASEPRI_MAX, r3
    a1e8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    a1ec:	4628      	mov	r0, r5
    a1ee:	f013 fadb 	bl	1d7a8 <is_tx_ready>
    a1f2:	bb28      	cbnz	r0, a240 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    a1f4:	f384 8811 	msr	BASEPRI, r4
    a1f8:	f3bf 8f6f 	isb	sy
}
    a1fc:	e7ee      	b.n	a1dc <uarte_nrfx_poll_out+0x14>
{
    a1fe:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    a200:	4628      	mov	r0, r5
    a202:	f013 fad1 	bl	1d7a8 <is_tx_ready>
    a206:	b970      	cbnz	r0, a226 <uarte_nrfx_poll_out+0x5e>
    a208:	2001      	movs	r0, #1
    a20a:	f013 fc08 	bl	1da1e <nrfx_busy_wait>
    a20e:	3c01      	subs	r4, #1
    a210:	d1f6      	bne.n	a200 <uarte_nrfx_poll_out+0x38>
    a212:	2100      	movs	r1, #0
    a214:	2021      	movs	r0, #33	; 0x21
    a216:	f002 fb21 	bl	c85c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    a21a:	e7f0      	b.n	a1fe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    a21c:	f384 8811 	msr	BASEPRI, r4
    a220:	f3bf 8f6f 	isb	sy
}
    a224:	e7f5      	b.n	a212 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    a226:	f04f 0320 	mov.w	r3, #32
    a22a:	f3ef 8411 	mrs	r4, BASEPRI
    a22e:	f383 8812 	msr	BASEPRI_MAX, r3
    a232:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a236:	4628      	mov	r0, r5
    a238:	f013 fab6 	bl	1d7a8 <is_tx_ready>
    a23c:	2800      	cmp	r0, #0
    a23e:	d0ed      	beq.n	a21c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    a240:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    a242:	2201      	movs	r2, #1
	data->char_out = c;
    a244:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    a248:	4628      	mov	r0, r5
    a24a:	f013 fb40 	bl	1d8ce <tx_start>
	__asm__ volatile(
    a24e:	f384 8811 	msr	BASEPRI, r4
    a252:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    a256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a258:	2000229f 	.word	0x2000229f

0000a25c <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
    a25c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    a260:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a262:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    a264:	4b04      	ldr	r3, [pc, #16]	; (a278 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    a266:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    a26a:	bf18      	it	ne
    a26c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    a270:	2103      	movs	r1, #3
    a272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    a276:	4770      	bx	lr
    a278:	50000300 	.word	0x50000300

0000a27c <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    a27c:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    a280:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a282:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    a284:	4b04      	ldr	r3, [pc, #16]	; (a298 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a286:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    a28a:	bf18      	it	ne
    a28c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a290:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    a292:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    a296:	4770      	bx	lr
    a298:	50000300 	.word	0x50000300

0000a29c <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    a29e:	6845      	ldr	r5, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    a2a0:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    a2a2:	682c      	ldr	r4, [r5, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a2a4:	2300      	movs	r3, #0
    a2a6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    a2aa:	4607      	mov	r7, r0
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    a2ac:	6030      	str	r0, [r6, #0]
        nrf_gpio_pin_set(pin_number);
    a2ae:	68a8      	ldr	r0, [r5, #8]
    a2b0:	f7ff ffe4 	bl	a27c <nrf_gpio_pin_set>

	nrf_gpio_pin_write(cfg->pseltxd, 1);
	nrf_gpio_cfg_output(cfg->pseltxd);
    a2b4:	68a8      	ldr	r0, [r5, #8]
    a2b6:	f7ff ffd1 	bl	a25c <nrf_gpio_cfg_output>

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    a2ba:	68e8      	ldr	r0, [r5, #12]
    a2bc:	1c41      	adds	r1, r0, #1
    a2be:	d002      	beq.n	a2c6 <uarte_instance_init.isra.0+0x2a>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    a2c0:	7e29      	ldrb	r1, [r5, #24]
    a2c2:	f7ff ff71 	bl	a1a8 <nrf_gpio_cfg_input>
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    a2c6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    a2ca:	6928      	ldr	r0, [r5, #16]
    p_reg->PSEL.TXD = pseltxd;
    a2cc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    a2d0:	1c42      	adds	r2, r0, #1
    p_reg->PSEL.RXD = pselrxd;
    a2d2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    a2d6:	d002      	beq.n	a2de <uarte_instance_init.isra.0+0x42>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    a2d8:	7e69      	ldrb	r1, [r5, #25]
    a2da:	f7ff ff65 	bl	a1a8 <nrf_gpio_cfg_input>
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    a2de:	6968      	ldr	r0, [r5, #20]
    a2e0:	1c43      	adds	r3, r0, #1
    a2e2:	d004      	beq.n	a2ee <uarte_instance_init.isra.0+0x52>
    a2e4:	f7ff ffca 	bl	a27c <nrf_gpio_pin_set>
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    a2e8:	6968      	ldr	r0, [r5, #20]
    a2ea:	f7ff ffb7 	bl	a25c <nrf_gpio_cfg_output>
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    a2ee:	e9d5 3204 	ldrd	r3, r2, [r5, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    a2f2:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.RTS = pselrts;
    a2f4:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    a2f8:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
    a2fa:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    a2fe:	3104      	adds	r1, #4
    a300:	f7ff fe9c 	bl	a03c <uarte_nrfx_configure>
	if (err) {
    a304:	4607      	mov	r7, r0
    a306:	b9a8      	cbnz	r0, a334 <uarte_instance_init.isra.0+0x98>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    a308:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    a30a:	0719      	lsls	r1, r3, #28
    a30c:	d527      	bpl.n	a35e <uarte_instance_init.isra.0+0xc2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    a30e:	f106 0016 	add.w	r0, r6, #22
    a312:	f000 fe63 	bl	afdc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    a316:	4b27      	ldr	r3, [pc, #156]	; (a3b4 <uarte_instance_init.isra.0+0x118>)
    a318:	4298      	cmp	r0, r3
    a31a:	d00d      	beq.n	a338 <uarte_instance_init.isra.0+0x9c>
    a31c:	4b26      	ldr	r3, [pc, #152]	; (a3b8 <uarte_instance_init.isra.0+0x11c>)
    a31e:	4927      	ldr	r1, [pc, #156]	; (a3bc <uarte_instance_init.isra.0+0x120>)
		LOG_ERR("Failed to allocate PPI Channel");
    a320:	4827      	ldr	r0, [pc, #156]	; (a3c0 <uarte_instance_init.isra.0+0x124>)
    a322:	1ac9      	subs	r1, r1, r3
    a324:	08c9      	lsrs	r1, r1, #3
    a326:	0189      	lsls	r1, r1, #6
    a328:	f041 0101 	orr.w	r1, r1, #1
    a32c:	f012 fb0a 	bl	1c944 <log_0>
		return -EIO;
    a330:	f06f 0704 	mvn.w	r7, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    a334:	4638      	mov	r0, r7
    a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    a338:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    a33a:	00c3      	lsls	r3, r0, #3
    a33c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a340:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    a344:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    a348:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
    a34c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    a350:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    a354:	4a1b      	ldr	r2, [pc, #108]	; (a3c4 <uarte_instance_init.isra.0+0x128>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    a356:	2301      	movs	r3, #1
    a358:	4083      	lsls	r3, r0
    a35a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a35e:	2308      	movs	r3, #8
    a360:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    a364:	68eb      	ldr	r3, [r5, #12]
    a366:	3301      	adds	r3, #1
    a368:	d00c      	beq.n	a384 <uarte_instance_init.isra.0+0xe8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a36a:	2300      	movs	r3, #0
    a36c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    a370:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    a374:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a378:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a37c:	2301      	movs	r3, #1
    a37e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a382:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    a384:	686b      	ldr	r3, [r5, #4]
    a386:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    a388:	bf5c      	itt	pl
    a38a:	f44f 7280 	movpl.w	r2, #256	; 0x100
    a38e:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a392:	06db      	lsls	r3, r3, #27
    a394:	bf44      	itt	mi
    a396:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    a39a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    a39e:	3614      	adds	r6, #20
    p_reg->TXD.MAXCNT = length;
    a3a0:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a3a2:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a3a6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a3aa:	2301      	movs	r3, #1
    a3ac:	60a3      	str	r3, [r4, #8]
    a3ae:	60e3      	str	r3, [r4, #12]
	return 0;
    a3b0:	e7c0      	b.n	a334 <uarte_instance_init.isra.0+0x98>
    a3b2:	bf00      	nop
    a3b4:	0bad0000 	.word	0x0bad0000
    a3b8:	0001ea10 	.word	0x0001ea10
    a3bc:	0001ea68 	.word	0x0001ea68
    a3c0:	000203eb 	.word	0x000203eb
    a3c4:	4001f000 	.word	0x4001f000

0000a3c8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a3c8:	4919      	ldr	r1, [pc, #100]	; (a430 <sys_clock_timeout_handler+0x68>)
{
    a3ca:	b570      	push	{r4, r5, r6, lr}
    a3cc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    a3ce:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a3d2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    a3d4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    a3d8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    a3dc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    a3de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    a3e2:	f04f 0500 	mov.w	r5, #0
    a3e6:	d20a      	bcs.n	a3fe <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    a3e8:	4b12      	ldr	r3, [pc, #72]	; (a434 <sys_clock_timeout_handler+0x6c>)
    a3ea:	6819      	ldr	r1, [r3, #0]
    a3ec:	060a      	lsls	r2, r1, #24
    a3ee:	0a0b      	lsrs	r3, r1, #8
    a3f0:	1992      	adds	r2, r2, r6
    a3f2:	4911      	ldr	r1, [pc, #68]	; (a438 <sys_clock_timeout_handler+0x70>)
    a3f4:	f143 0300 	adc.w	r3, r3, #0
    a3f8:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    a3fc:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    a3fe:	f002 fbb3 	bl	cb68 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    a402:	00a3      	lsls	r3, r4, #2
    a404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a408:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    a40c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    a410:	42b2      	cmp	r2, r6
    a412:	d10b      	bne.n	a42c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    a414:	b91d      	cbnz	r5, a41e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    a416:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    a41a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    a41e:	4b07      	ldr	r3, [pc, #28]	; (a43c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a420:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    a424:	fa00 f404 	lsl.w	r4, r0, r4
    a428:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    a42c:	bd70      	pop	{r4, r5, r6, pc}
    a42e:	bf00      	nop
    a430:	20000480 	.word	0x20000480
    a434:	20001068 	.word	0x20001068
    a438:	20000468 	.word	0x20000468
    a43c:	40011000 	.word	0x40011000

0000a440 <compare_int_lock>:
{
    a440:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    a442:	2301      	movs	r3, #1
    a444:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a446:	4a11      	ldr	r2, [pc, #68]	; (a48c <compare_int_lock+0x4c>)
    a448:	f3bf 8f5b 	dmb	ish
    a44c:	43dc      	mvns	r4, r3
    a44e:	e852 1f00 	ldrex	r1, [r2]
    a452:	ea01 0c04 	and.w	ip, r1, r4
    a456:	e842 ce00 	strex	lr, ip, [r2]
    a45a:	f1be 0f00 	cmp.w	lr, #0
    a45e:	d1f6      	bne.n	a44e <compare_int_lock+0xe>
    a460:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a464:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a468:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    a46c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    a470:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    a474:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    a478:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a47c:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    a480:	420b      	tst	r3, r1
}
    a482:	bf14      	ite	ne
    a484:	2001      	movne	r0, #1
    a486:	2000      	moveq	r0, #0
    a488:	bd10      	pop	{r4, pc}
    a48a:	bf00      	nop
    a48c:	20001064 	.word	0x20001064

0000a490 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    a490:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a492:	4a12      	ldr	r2, [pc, #72]	; (a4dc <compare_int_unlock.part.0+0x4c>)
    a494:	f3bf 8f5b 	dmb	ish
    a498:	4083      	lsls	r3, r0
    a49a:	e852 1f00 	ldrex	r1, [r2]
    a49e:	4319      	orrs	r1, r3
    a4a0:	e842 1c00 	strex	ip, r1, [r2]
    a4a4:	f1bc 0f00 	cmp.w	ip, #0
    a4a8:	d1f7      	bne.n	a49a <compare_int_unlock.part.0+0xa>
    a4aa:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    a4ae:	4a0c      	ldr	r2, [pc, #48]	; (a4e0 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a4b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a4b4:	4083      	lsls	r3, r0
    a4b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a4ba:	4b0a      	ldr	r3, [pc, #40]	; (a4e4 <compare_int_unlock.part.0+0x54>)
    a4bc:	f3bf 8f5b 	dmb	ish
    a4c0:	681b      	ldr	r3, [r3, #0]
    a4c2:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    a4c6:	fa23 f000 	lsr.w	r0, r3, r0
    a4ca:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a4cc:	bf42      	ittt	mi
    a4ce:	4b06      	ldrmi	r3, [pc, #24]	; (a4e8 <compare_int_unlock.part.0+0x58>)
    a4d0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    a4d4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    a4d8:	4770      	bx	lr
    a4da:	bf00      	nop
    a4dc:	20001064 	.word	0x20001064
    a4e0:	40011000 	.word	0x40011000
    a4e4:	20001060 	.word	0x20001060
    a4e8:	e000e100 	.word	0xe000e100

0000a4ec <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    a4ec:	4b0d      	ldr	r3, [pc, #52]	; (a524 <z_nrf_rtc_timer_read+0x38>)
    a4ee:	681b      	ldr	r3, [r3, #0]
    a4f0:	0a19      	lsrs	r1, r3, #8
    a4f2:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    a4f4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    a4f8:	4b0b      	ldr	r3, [pc, #44]	; (a528 <z_nrf_rtc_timer_read+0x3c>)
    a4fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    a4fe:	18c0      	adds	r0, r0, r3
    a500:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    a504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    a508:	d20a      	bcs.n	a520 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    a50a:	4b08      	ldr	r3, [pc, #32]	; (a52c <z_nrf_rtc_timer_read+0x40>)
    a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a510:	4299      	cmp	r1, r3
    a512:	bf08      	it	eq
    a514:	4290      	cmpeq	r0, r2
    a516:	d203      	bcs.n	a520 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    a518:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    a51c:	f141 0100 	adc.w	r1, r1, #0
}
    a520:	4770      	bx	lr
    a522:	bf00      	nop
    a524:	20001068 	.word	0x20001068
    a528:	40011000 	.word	0x40011000
    a52c:	20000468 	.word	0x20000468

0000a530 <compare_set>:
{
    a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a534:	b085      	sub	sp, #20
    a536:	4616      	mov	r6, r2
    a538:	461f      	mov	r7, r3
    a53a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    a53c:	f7ff ff80 	bl	a440 <compare_int_lock>
    a540:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    a542:	f7ff ffd3 	bl	a4ec <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    a546:	42b9      	cmp	r1, r7
    a548:	bf08      	it	eq
    a54a:	42b0      	cmpeq	r0, r6
    a54c:	d27f      	bcs.n	a64e <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    a54e:	ebb6 0800 	subs.w	r8, r6, r0
    a552:	eb67 0901 	sbc.w	r9, r7, r1
    a556:	2300      	movs	r3, #0
    a558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a55c:	454b      	cmp	r3, r9
    a55e:	bf08      	it	eq
    a560:	4542      	cmpeq	r2, r8
    a562:	f0c0 8085 	bcc.w	a670 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    a566:	4b44      	ldr	r3, [pc, #272]	; (a678 <compare_set+0x148>)
    a568:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    a56c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    a570:	429f      	cmp	r7, r3
    a572:	bf08      	it	eq
    a574:	4296      	cmpeq	r6, r2
    a576:	d054      	beq.n	a622 <compare_set+0xf2>
    a578:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a57c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    a580:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a584:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a588:	fa0b f205 	lsl.w	r2, fp, r5
    a58c:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a590:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a594:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    a598:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    a59a:	4a38      	ldr	r2, [pc, #224]	; (a67c <compare_set+0x14c>)
    return p_reg->CC[ch];
    a59c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    a5a0:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a5a4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    a5a8:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    a5ac:	461c      	mov	r4, r3
    a5ae:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    a5b0:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    a5b4:	eba0 000a 	sub.w	r0, r0, sl
    a5b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a5bc:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    a5c0:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    a5c2:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    a5c6:	d105      	bne.n	a5d4 <compare_set+0xa4>
    a5c8:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    a5ca:	2013      	movs	r0, #19
    a5cc:	f013 fc93 	bl	1def6 <z_impl_k_busy_wait>
    a5d0:	4a2a      	ldr	r2, [pc, #168]	; (a67c <compare_set+0x14c>)
    a5d2:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    a5d4:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    a5d6:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    a5da:	eba4 000c 	sub.w	r0, r4, ip
    a5de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    a5e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a5e6:	bf88      	it	hi
    a5e8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a5ea:	2000      	movs	r0, #0
    a5ec:	f8c8 0000 	str.w	r0, [r8]
    a5f0:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    a5f4:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    a5f8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    a5fc:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    a600:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    a604:	4582      	cmp	sl, r0
    a606:	d006      	beq.n	a616 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    a608:	1a20      	subs	r0, r4, r0
    a60a:	3802      	subs	r0, #2
    a60c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    a610:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a614:	d819      	bhi.n	a64a <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    a616:	1ae4      	subs	r4, r4, r3
    a618:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    a61c:	1932      	adds	r2, r6, r4
    a61e:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    a622:	4c15      	ldr	r4, [pc, #84]	; (a678 <compare_set+0x148>)
    a624:	0129      	lsls	r1, r5, #4
    a626:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    a62a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    a62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    a630:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    a632:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    a634:	6043      	str	r3, [r0, #4]
	return ret;
    a636:	2400      	movs	r4, #0
	if (key) {
    a638:	9b01      	ldr	r3, [sp, #4]
    a63a:	b113      	cbz	r3, a642 <compare_set+0x112>
    a63c:	4628      	mov	r0, r5
    a63e:	f7ff ff27 	bl	a490 <compare_int_unlock.part.0>
}
    a642:	4620      	mov	r0, r4
    a644:	b005      	add	sp, #20
    a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a64a:	4620      	mov	r0, r4
    a64c:	e7b0      	b.n	a5b0 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    a64e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a650:	4a0b      	ldr	r2, [pc, #44]	; (a680 <compare_set+0x150>)
    a652:	f3bf 8f5b 	dmb	ish
    a656:	40ab      	lsls	r3, r5
    a658:	e852 1f00 	ldrex	r1, [r2]
    a65c:	4319      	orrs	r1, r3
    a65e:	e842 1000 	strex	r0, r1, [r2]
    a662:	2800      	cmp	r0, #0
    a664:	d1f8      	bne.n	a658 <compare_set+0x128>
    a666:	f3bf 8f5b 	dmb	ish
    a66a:	4632      	mov	r2, r6
    a66c:	463b      	mov	r3, r7
    a66e:	e7d8      	b.n	a622 <compare_set+0xf2>
			return -EINVAL;
    a670:	f06f 0415 	mvn.w	r4, #21
    a674:	e7e0      	b.n	a638 <compare_set+0x108>
    a676:	bf00      	nop
    a678:	20000470 	.word	0x20000470
    a67c:	40011000 	.word	0x40011000
    a680:	20001060 	.word	0x20001060

0000a684 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    a684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    a688:	4c34      	ldr	r4, [pc, #208]	; (a75c <rtc_nrf_isr+0xd8>)
    a68a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    a68e:	079a      	lsls	r2, r3, #30
    a690:	d509      	bpl.n	a6a6 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a692:	4b33      	ldr	r3, [pc, #204]	; (a760 <rtc_nrf_isr+0xdc>)
    a694:	681a      	ldr	r2, [r3, #0]
    a696:	b132      	cbz	r2, a6a6 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a698:	2200      	movs	r2, #0
    a69a:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    a69c:	4a31      	ldr	r2, [pc, #196]	; (a764 <rtc_nrf_isr+0xe0>)
    a69e:	681b      	ldr	r3, [r3, #0]
    a6a0:	6813      	ldr	r3, [r2, #0]
    a6a2:	3301      	adds	r3, #1
    a6a4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a6a6:	f04f 0320 	mov.w	r3, #32
    a6aa:	f3ef 8211 	mrs	r2, BASEPRI
    a6ae:	f383 8812 	msr	BASEPRI_MAX, r3
    a6b2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    a6b6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    a6ba:	03db      	lsls	r3, r3, #15
    a6bc:	d512      	bpl.n	a6e4 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a6be:	f3bf 8f5b 	dmb	ish
    a6c2:	4b29      	ldr	r3, [pc, #164]	; (a768 <rtc_nrf_isr+0xe4>)
    a6c4:	e853 1f00 	ldrex	r1, [r3]
    a6c8:	f021 0001 	bic.w	r0, r1, #1
    a6cc:	e843 0600 	strex	r6, r0, [r3]
    a6d0:	2e00      	cmp	r6, #0
    a6d2:	d1f7      	bne.n	a6c4 <rtc_nrf_isr+0x40>
    a6d4:	f3bf 8f5b 	dmb	ish
    a6d8:	4b24      	ldr	r3, [pc, #144]	; (a76c <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    a6da:	2900      	cmp	r1, #0
    a6dc:	d136      	bne.n	a74c <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6de:	6819      	ldr	r1, [r3, #0]
		if (result) {
    a6e0:	2900      	cmp	r1, #0
    a6e2:	d133      	bne.n	a74c <rtc_nrf_isr+0xc8>
{
    a6e4:	2300      	movs	r3, #0
	__asm__ volatile(
    a6e6:	f382 8811 	msr	BASEPRI, r2
    a6ea:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    a6ee:	b353      	cbz	r3, a746 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    a6f0:	f7ff fefc 	bl	a4ec <z_nrf_rtc_timer_read>
    a6f4:	4606      	mov	r6, r0
	__asm__ volatile(
    a6f6:	f04f 0320 	mov.w	r3, #32
    a6fa:	f3ef 8011 	mrs	r0, BASEPRI
    a6fe:	f383 8812 	msr	BASEPRI_MAX, r3
    a702:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    a706:	4b1a      	ldr	r3, [pc, #104]	; (a770 <rtc_nrf_isr+0xec>)
    a708:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    a70c:	4549      	cmp	r1, r9
    a70e:	bf08      	it	eq
    a710:	4546      	cmpeq	r6, r8
    a712:	f04f 0200 	mov.w	r2, #0
    a716:	d31e      	bcc.n	a756 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a718:	f04f 36ff 	mov.w	r6, #4294967295
    a71c:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    a720:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    a724:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    a728:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    a72a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a72e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    a732:	f380 8811 	msr	BASEPRI, r0
    a736:	f3bf 8f6f 	isb	sy
		if (handler) {
    a73a:	b121      	cbz	r1, a746 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    a73c:	9500      	str	r5, [sp, #0]
    a73e:	4642      	mov	r2, r8
    a740:	464b      	mov	r3, r9
    a742:	2000      	movs	r0, #0
    a744:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
    a746:	b003      	add	sp, #12
    a748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    a74c:	2100      	movs	r1, #0
    a74e:	6019      	str	r1, [r3, #0]
    a750:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    a752:	2301      	movs	r3, #1
}
    a754:	e7c7      	b.n	a6e6 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    a756:	4611      	mov	r1, r2
    a758:	e7eb      	b.n	a732 <rtc_nrf_isr+0xae>
    a75a:	bf00      	nop
    a75c:	40011000 	.word	0x40011000
    a760:	40011104 	.word	0x40011104
    a764:	20001068 	.word	0x20001068
    a768:	20001060 	.word	0x20001060
    a76c:	40011140 	.word	0x40011140
    a770:	20000470 	.word	0x20000470

0000a774 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    a774:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    a776:	4b1a      	ldr	r3, [pc, #104]	; (a7e0 <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
    a778:	4d1a      	ldr	r5, [pc, #104]	; (a7e4 <sys_clock_driver_init+0x70>)
    a77a:	2400      	movs	r4, #0
    a77c:	f04f 30ff 	mov.w	r0, #4294967295
    a780:	f04f 31ff 	mov.w	r1, #4294967295
    a784:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    a788:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    a78c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a790:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a794:	4b14      	ldr	r3, [pc, #80]	; (a7e8 <sys_clock_driver_init+0x74>)
    a796:	2602      	movs	r6, #2
    a798:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    a79c:	2101      	movs	r1, #1
    a79e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    a7a2:	2011      	movs	r0, #17
    a7a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    a7a8:	4622      	mov	r2, r4
    a7aa:	f7fb ffa3 	bl	66f4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    a7ae:	2011      	movs	r0, #17
    a7b0:	f7fb ff6e 	bl	6690 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    a7b4:	4a0d      	ldr	r2, [pc, #52]	; (a7ec <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
    a7b6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    a7ba:	2301      	movs	r3, #1
    a7bc:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    a7be:	4a0c      	ldr	r2, [pc, #48]	; (a7f0 <sys_clock_driver_init+0x7c>)
    a7c0:	602b      	str	r3, [r5, #0]
    a7c2:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    a7c4:	4b0b      	ldr	r3, [pc, #44]	; (a7f4 <sys_clock_driver_init+0x80>)
    a7c6:	4a0c      	ldr	r2, [pc, #48]	; (a7f8 <sys_clock_driver_init+0x84>)
    a7c8:	9300      	str	r3, [sp, #0]
    a7ca:	9401      	str	r4, [sp, #4]
    a7cc:	2300      	movs	r3, #0
    a7ce:	4620      	mov	r0, r4
    a7d0:	f7ff feae 	bl	a530 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    a7d4:	4630      	mov	r0, r6
    a7d6:	f7fc fdc9 	bl	736c <z_nrf_clock_control_lf_on>

	return 0;
}
    a7da:	4620      	mov	r0, r4
    a7dc:	b002      	add	sp, #8
    a7de:	bd70      	pop	{r4, r5, r6, pc}
    a7e0:	20000470 	.word	0x20000470
    a7e4:	40011000 	.word	0x40011000
    a7e8:	e000e100 	.word	0xe000e100
    a7ec:	40011008 	.word	0x40011008
    a7f0:	20001064 	.word	0x20001064
    a7f4:	0000a3c9 	.word	0x0000a3c9
    a7f8:	007fffff 	.word	0x007fffff

0000a7fc <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    a7fc:	4b14      	ldr	r3, [pc, #80]	; (a850 <sys_clock_set_timeout+0x54>)
{
    a7fe:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    a800:	f1b0 3fff 	cmp.w	r0, #4294967295
    a804:	bf08      	it	eq
    a806:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    a808:	1e44      	subs	r4, r0, #1
    a80a:	2c00      	cmp	r4, #0
    a80c:	dd1e      	ble.n	a84c <sys_clock_set_timeout+0x50>
    a80e:	429c      	cmp	r4, r3
    a810:	bfa8      	it	ge
    a812:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a814:	f7ff fe6a 	bl	a4ec <z_nrf_rtc_timer_read>
    a818:	4b0e      	ldr	r3, [pc, #56]	; (a854 <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a81a:	490f      	ldr	r1, [pc, #60]	; (a858 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a820:	1a80      	subs	r0, r0, r2
		ticks = 0;
    a822:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a826:	bf28      	it	cs
    a828:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    a82a:	3001      	adds	r0, #1
    a82c:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    a82e:	4808      	ldr	r0, [pc, #32]	; (a850 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a830:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    a832:	4284      	cmp	r4, r0
    a834:	bf28      	it	cs
    a836:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a838:	1912      	adds	r2, r2, r4
    a83a:	f04f 0000 	mov.w	r0, #0
    a83e:	9001      	str	r0, [sp, #4]
    a840:	f143 0300 	adc.w	r3, r3, #0
    a844:	f7ff fe74 	bl	a530 <compare_set>
}
    a848:	b002      	add	sp, #8
    a84a:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    a84c:	2400      	movs	r4, #0
    a84e:	e7e1      	b.n	a814 <sys_clock_set_timeout+0x18>
    a850:	007fffff 	.word	0x007fffff
    a854:	20000480 	.word	0x20000480
    a858:	0000a3c9 	.word	0x0000a3c9

0000a85c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    a85c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    a85e:	f7ff fe45 	bl	a4ec <z_nrf_rtc_timer_read>
    a862:	4b02      	ldr	r3, [pc, #8]	; (a86c <sys_clock_elapsed+0x10>)
    a864:	681b      	ldr	r3, [r3, #0]
}
    a866:	1ac0      	subs	r0, r0, r3
    a868:	bd08      	pop	{r3, pc}
    a86a:	bf00      	nop
    a86c:	20000480 	.word	0x20000480

0000a870 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    a870:	b508      	push	{r3, lr}
	z_impl_log_panic();
    a872:	f7fb f9bd 	bl	5bf0 <z_impl_log_panic>
    a876:	4b06      	ldr	r3, [pc, #24]	; (a890 <k_sys_fatal_error_handler+0x20>)
    a878:	4906      	ldr	r1, [pc, #24]	; (a894 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    a87a:	4807      	ldr	r0, [pc, #28]	; (a898 <k_sys_fatal_error_handler+0x28>)
    a87c:	1ac9      	subs	r1, r1, r3
    a87e:	08c9      	lsrs	r1, r1, #3
    a880:	0189      	lsls	r1, r1, #6
    a882:	f041 0101 	orr.w	r1, r1, #1
    a886:	f012 f85d 	bl	1c944 <log_0>
		sys_arch_reboot(0);
    a88a:	2000      	movs	r0, #0
    a88c:	f7fc fc42 	bl	7114 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    a890:	0001ea10 	.word	0x0001ea10
    a894:	0001ea18 	.word	0x0001ea18
    a898:	00020432 	.word	0x00020432

0000a89c <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a89c:	4b03      	ldr	r3, [pc, #12]	; (a8ac <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a89e:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    a8a0:	f1a0 0308 	sub.w	r3, r0, #8
    a8a4:	4258      	negs	r0, r3
    a8a6:	4158      	adcs	r0, r3
    a8a8:	4770      	bx	lr
    a8aa:	bf00      	nop
    a8ac:	10000130 	.word	0x10000130

0000a8b0 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a8b0:	4b06      	ldr	r3, [pc, #24]	; (a8cc <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a8b2:	681b      	ldr	r3, [r3, #0]
    a8b4:	2b08      	cmp	r3, #8
    a8b6:	d106      	bne.n	a8c6 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a8b8:	4b05      	ldr	r3, [pc, #20]	; (a8d0 <nrf52_errata_103+0x20>)
    a8ba:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    a8bc:	2b05      	cmp	r3, #5
    a8be:	d802      	bhi.n	a8c6 <nrf52_errata_103+0x16>
    a8c0:	4a04      	ldr	r2, [pc, #16]	; (a8d4 <nrf52_errata_103+0x24>)
    a8c2:	5cd0      	ldrb	r0, [r2, r3]
    a8c4:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    a8c6:	2000      	movs	r0, #0
    #endif
}
    a8c8:	4770      	bx	lr
    a8ca:	bf00      	nop
    a8cc:	10000130 	.word	0x10000130
    a8d0:	10000134 	.word	0x10000134
    a8d4:	00020455 	.word	0x00020455

0000a8d8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    a8d8:	4a02      	ldr	r2, [pc, #8]	; (a8e4 <nvmc_wait+0xc>)
    a8da:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    a8de:	2b00      	cmp	r3, #0
    a8e0:	d0fb      	beq.n	a8da <nvmc_wait+0x2>
}
    a8e2:	4770      	bx	lr
    a8e4:	4001e000 	.word	0x4001e000

0000a8e8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    a8e8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    a8ea:	f7ff ffd7 	bl	a89c <nrf52_errata_136>
    a8ee:	b140      	cbz	r0, a902 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    a8f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a8f4:	2200      	movs	r2, #0
    a8f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    a8fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    a8fe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    a902:	f7ff ffcb 	bl	a89c <nrf52_errata_136>
    a906:	2800      	cmp	r0, #0
    a908:	d046      	beq.n	a998 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    a90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a90e:	4b5b      	ldr	r3, [pc, #364]	; (aa7c <SystemInit+0x194>)
    a910:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    a914:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    a918:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    a91c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    a920:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    a924:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    a928:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    a92c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    a930:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    a934:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    a938:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    a93c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    a940:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    a944:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    a948:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    a94c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    a950:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    a954:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    a958:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    a95c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    a960:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    a964:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    a968:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    a96c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    a970:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    a974:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    a978:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    a97c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    a980:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    a984:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    a988:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    a98c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    a990:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    a994:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    a998:	f7ff ff8a 	bl	a8b0 <nrf52_errata_103>
    a99c:	b110      	cbz	r0, a9a4 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    a99e:	4b38      	ldr	r3, [pc, #224]	; (aa80 <SystemInit+0x198>)
    a9a0:	4a38      	ldr	r2, [pc, #224]	; (aa84 <SystemInit+0x19c>)
    a9a2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    a9a4:	f7ff ff84 	bl	a8b0 <nrf52_errata_103>
    a9a8:	b118      	cbz	r0, a9b2 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    a9aa:	4b37      	ldr	r3, [pc, #220]	; (aa88 <SystemInit+0x1a0>)
    a9ac:	22fb      	movs	r2, #251	; 0xfb
    a9ae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    a9b2:	f7ff ff7d 	bl	a8b0 <nrf52_errata_103>
    a9b6:	b148      	cbz	r0, a9cc <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    a9b8:	4934      	ldr	r1, [pc, #208]	; (aa8c <SystemInit+0x1a4>)
    a9ba:	4b35      	ldr	r3, [pc, #212]	; (aa90 <SystemInit+0x1a8>)
    a9bc:	680a      	ldr	r2, [r1, #0]
    a9be:	681b      	ldr	r3, [r3, #0]
    a9c0:	f022 020f 	bic.w	r2, r2, #15
    a9c4:	f003 030f 	and.w	r3, r3, #15
    a9c8:	4313      	orrs	r3, r2
    a9ca:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    a9cc:	f7ff ff70 	bl	a8b0 <nrf52_errata_103>
    a9d0:	b118      	cbz	r0, a9da <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    a9d2:	4b30      	ldr	r3, [pc, #192]	; (aa94 <SystemInit+0x1ac>)
    a9d4:	f44f 7200 	mov.w	r2, #512	; 0x200
    a9d8:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    a9da:	f7ff ff5f 	bl	a89c <nrf52_errata_136>
    a9de:	b148      	cbz	r0, a9f4 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    a9e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a9e4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    a9e8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    a9ea:	bf44      	itt	mi
    a9ec:	f06f 0201 	mvnmi.w	r2, #1
    a9f0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a9f4:	4b28      	ldr	r3, [pc, #160]	; (aa98 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a9f6:	681b      	ldr	r3, [r3, #0]
    a9f8:	2b08      	cmp	r3, #8
    a9fa:	d10e      	bne.n	aa1a <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a9fc:	4b27      	ldr	r3, [pc, #156]	; (aa9c <SystemInit+0x1b4>)
    a9fe:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    aa00:	2b05      	cmp	r3, #5
    aa02:	d802      	bhi.n	aa0a <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    aa04:	4a26      	ldr	r2, [pc, #152]	; (aaa0 <SystemInit+0x1b8>)
    aa06:	5cd3      	ldrb	r3, [r2, r3]
    aa08:	b13b      	cbz	r3, aa1a <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    aa0a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    aa0e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    aa12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    aa16:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    aa1a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    aa1e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    aa22:	2a00      	cmp	r2, #0
    aa24:	db03      	blt.n	aa2e <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    aa26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	da22      	bge.n	aa74 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    aa2e:	491d      	ldr	r1, [pc, #116]	; (aaa4 <SystemInit+0x1bc>)
    aa30:	2301      	movs	r3, #1
    aa32:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    aa36:	f7ff ff4f 	bl	a8d8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    aa3a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    aa3e:	2412      	movs	r4, #18
    aa40:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    aa44:	f7ff ff48 	bl	a8d8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    aa48:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    aa4c:	f7ff ff44 	bl	a8d8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    aa50:	2300      	movs	r3, #0
    aa52:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    aa56:	f7ff ff3f 	bl	a8d8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    aa5a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    aa5e:	4912      	ldr	r1, [pc, #72]	; (aaa8 <SystemInit+0x1c0>)
    aa60:	4b12      	ldr	r3, [pc, #72]	; (aaac <SystemInit+0x1c4>)
    aa62:	68ca      	ldr	r2, [r1, #12]
    aa64:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    aa68:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    aa6a:	60cb      	str	r3, [r1, #12]
    aa6c:	f3bf 8f4f 	dsb	sy
    __NOP();
    aa70:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    aa72:	e7fd      	b.n	aa70 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    aa74:	4b0e      	ldr	r3, [pc, #56]	; (aab0 <SystemInit+0x1c8>)
    aa76:	4a0f      	ldr	r2, [pc, #60]	; (aab4 <SystemInit+0x1cc>)
    aa78:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    aa7a:	bd10      	pop	{r4, pc}
    aa7c:	4000c000 	.word	0x4000c000
    aa80:	4000568c 	.word	0x4000568c
    aa84:	00038148 	.word	0x00038148
    aa88:	4000f000 	.word	0x4000f000
    aa8c:	40000ee4 	.word	0x40000ee4
    aa90:	10000258 	.word	0x10000258
    aa94:	40029640 	.word	0x40029640
    aa98:	10000130 	.word	0x10000130
    aa9c:	10000134 	.word	0x10000134
    aaa0:	0002044f 	.word	0x0002044f
    aaa4:	4001e000 	.word	0x4001e000
    aaa8:	e000ed00 	.word	0xe000ed00
    aaac:	05fa0004 	.word	0x05fa0004
    aab0:	20000194 	.word	0x20000194
    aab4:	03d09000 	.word	0x03d09000

0000aab8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    aab8:	4b04      	ldr	r3, [pc, #16]	; (aacc <nrfx_clock_init+0x14>)
    aaba:	791a      	ldrb	r2, [r3, #4]
    aabc:	b922      	cbnz	r2, aac8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    aabe:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    aac0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    aac2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    aac4:	4802      	ldr	r0, [pc, #8]	; (aad0 <nrfx_clock_init+0x18>)
    aac6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    aac8:	4802      	ldr	r0, [pc, #8]	; (aad4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    aaca:	4770      	bx	lr
    aacc:	2000106c 	.word	0x2000106c
    aad0:	0bad0000 	.word	0x0bad0000
    aad4:	0bad000c 	.word	0x0bad000c

0000aad8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    aad8:	b110      	cbz	r0, aae0 <nrfx_clock_start+0x8>
    aada:	2801      	cmp	r0, #1
    aadc:	d020      	beq.n	ab20 <nrfx_clock_start+0x48>
    aade:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    aae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    aae4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    aae8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    aaec:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    aaf0:	4619      	mov	r1, r3
    aaf2:	d011      	beq.n	ab18 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    aaf4:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    aaf8:	2a01      	cmp	r2, #1
    aafa:	d10d      	bne.n	ab18 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
    aafc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab00:	4b0c      	ldr	r3, [pc, #48]	; (ab34 <nrfx_clock_start+0x5c>)
    ab02:	2200      	movs	r2, #0
    ab04:	601a      	str	r2, [r3, #0]
    ab06:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    ab08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ab0c:	2202      	movs	r2, #2
    ab0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ab12:	2201      	movs	r2, #1
    ab14:	609a      	str	r2, [r3, #8]
}
    ab16:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    ab18:	2300      	movs	r3, #0
    ab1a:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    ab1e:	e7ef      	b.n	ab00 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab20:	4b05      	ldr	r3, [pc, #20]	; (ab38 <nrfx_clock_start+0x60>)
    ab22:	2200      	movs	r2, #0
    ab24:	601a      	str	r2, [r3, #0]
    ab26:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    ab28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ab2c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ab30:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    ab32:	4770      	bx	lr
    ab34:	40000104 	.word	0x40000104
    ab38:	40000100 	.word	0x40000100

0000ab3c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    ab3c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    ab3e:	b110      	cbz	r0, ab46 <nrfx_clock_stop+0xa>
    ab40:	2801      	cmp	r0, #1
    ab42:	d018      	beq.n	ab76 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    ab44:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    ab46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ab4a:	2202      	movs	r2, #2
    ab4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab50:	4a18      	ldr	r2, [pc, #96]	; (abb4 <nrfx_clock_stop+0x78>)
    ab52:	6010      	str	r0, [r2, #0]
    ab54:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ab56:	4a18      	ldr	r2, [pc, #96]	; (abb8 <nrfx_clock_stop+0x7c>)
    ab58:	2101      	movs	r1, #1
    ab5a:	6011      	str	r1, [r2, #0]
    ab5c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ab60:	461c      	mov	r4, r3
    ab62:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    ab66:	03db      	lsls	r3, r3, #15
    ab68:	d5ec      	bpl.n	ab44 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    ab6a:	2001      	movs	r0, #1
    ab6c:	f012 ff57 	bl	1da1e <nrfx_busy_wait>
    ab70:	3d01      	subs	r5, #1
    ab72:	d1f6      	bne.n	ab62 <nrfx_clock_stop+0x26>
    ab74:	e7e6      	b.n	ab44 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab76:	4b11      	ldr	r3, [pc, #68]	; (abbc <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    ab78:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab7c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    ab7e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ab82:	601a      	str	r2, [r3, #0]
    ab84:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ab86:	4b0e      	ldr	r3, [pc, #56]	; (abc0 <nrfx_clock_stop+0x84>)
    ab88:	f242 7510 	movw	r5, #10000	; 0x2710
    ab8c:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ab8e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ab92:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    ab96:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ab98:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ab9c:	d505      	bpl.n	abaa <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    ab9e:	b123      	cbz	r3, abaa <nrfx_clock_stop+0x6e>
    aba0:	2001      	movs	r0, #1
    aba2:	f012 ff3c 	bl	1da1e <nrfx_busy_wait>
    aba6:	3d01      	subs	r5, #1
    aba8:	d1f1      	bne.n	ab8e <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    abaa:	4b06      	ldr	r3, [pc, #24]	; (abc4 <nrfx_clock_stop+0x88>)
    abac:	2200      	movs	r2, #0
    abae:	715a      	strb	r2, [r3, #5]
    abb0:	e7c8      	b.n	ab44 <nrfx_clock_stop+0x8>
    abb2:	bf00      	nop
    abb4:	40000104 	.word	0x40000104
    abb8:	4000000c 	.word	0x4000000c
    abbc:	40000100 	.word	0x40000100
    abc0:	40000004 	.word	0x40000004
    abc4:	2000106c 	.word	0x2000106c

0000abc8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    abc8:	4b16      	ldr	r3, [pc, #88]	; (ac24 <nrfx_power_clock_irq_handler+0x5c>)
    abca:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    abcc:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    abce:	b16a      	cbz	r2, abec <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    abd0:	2200      	movs	r2, #0
    abd2:	601a      	str	r2, [r3, #0]
    abd4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    abd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    abda:	2201      	movs	r2, #1
    abdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    abe0:	4b11      	ldr	r3, [pc, #68]	; (ac28 <nrfx_power_clock_irq_handler+0x60>)
    abe2:	7958      	ldrb	r0, [r3, #5]
    abe4:	b910      	cbnz	r0, abec <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    abe6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    abe8:	681b      	ldr	r3, [r3, #0]
    abea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    abec:	4b0f      	ldr	r3, [pc, #60]	; (ac2c <nrfx_power_clock_irq_handler+0x64>)
    abee:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    abf0:	b172      	cbz	r2, ac10 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    abf2:	2200      	movs	r2, #0
    abf4:	601a      	str	r2, [r3, #0]
    abf6:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    abf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    abfc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ac00:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    ac04:	0792      	lsls	r2, r2, #30
    ac06:	d104      	bne.n	ac12 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ac08:	2201      	movs	r2, #1
    ac0a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ac0e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    ac10:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    ac12:	2202      	movs	r2, #2
    ac14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    ac18:	4b03      	ldr	r3, [pc, #12]	; (ac28 <nrfx_power_clock_irq_handler+0x60>)
}
    ac1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    ac1e:	681b      	ldr	r3, [r3, #0]
    ac20:	2001      	movs	r0, #1
    ac22:	4718      	bx	r3
    ac24:	40000100 	.word	0x40000100
    ac28:	2000106c 	.word	0x2000106c
    ac2c:	40000104 	.word	0x40000104

0000ac30 <nrfx_comp_init>:
}


nrfx_err_t nrfx_comp_init(nrfx_comp_config_t const * p_config,
                          nrfx_comp_event_handler_t  event_handler)
{
    ac30:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_state != NRFX_DRV_STATE_UNINITIALIZED)
    ac32:	4c29      	ldr	r4, [pc, #164]	; (acd8 <nrfx_comp_init+0xa8>)
    ac34:	7823      	ldrb	r3, [r4, #0]
    ac36:	2b00      	cmp	r3, #0
    ac38:	d14b      	bne.n	acd2 <nrfx_comp_init+0xa2>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_comp_event_handler = event_handler;
    ac3a:	4b28      	ldr	r3, [pc, #160]	; (acdc <nrfx_comp_init+0xac>)
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    nrf_comp_ref_set(NRF_COMP, p_config->reference);
    ac3c:	7802      	ldrb	r2, [r0, #0]
    m_comp_event_handler = event_handler;
    ac3e:	6019      	str	r1, [r3, #0]
    return ((p_reg->ENABLE) & COMP_ENABLE_ENABLE_Enabled);
}

NRF_STATIC_INLINE void nrf_comp_ref_set(NRF_COMP_Type * p_reg, nrf_comp_ref_t reference)
{
    p_reg->REFSEL = (reference << COMP_REFSEL_REFSEL_Pos);
    ac40:	4b27      	ldr	r3, [pc, #156]	; (ace0 <nrfx_comp_init+0xb0>)

    //If external source is chosen, write to appropriate register.
    if (p_config->reference == COMP_REFSEL_REFSEL_ARef)
    ac42:	2a05      	cmp	r2, #5
    ac44:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_comp_ext_ref_set(NRF_COMP_Type * p_reg, nrf_comp_ext_ref_t ext_ref)
{
    p_reg->EXTREFSEL = (ext_ref << COMP_EXTREFSEL_EXTREFSEL_Pos);
    ac48:	bf04      	itt	eq
    ac4a:	7842      	ldrbeq	r2, [r0, #1]
    ac4c:	f8c3 250c 	streq.w	r2, [r3, #1292]	; 0x50c

NRF_STATIC_INLINE void nrf_comp_th_set(NRF_COMP_Type * p_reg, nrf_comp_th_t threshold)
{
    p_reg->TH =
        (((uint32_t)threshold.th_down << COMP_TH_THDOWN_Pos) & COMP_TH_THDOWN_Msk) |
        (((uint32_t)threshold.th_up << COMP_TH_THUP_Pos) & COMP_TH_THUP_Msk);
    ac50:	7902      	ldrb	r2, [r0, #4]
        (((uint32_t)threshold.th_down << COMP_TH_THDOWN_Pos) & COMP_TH_THDOWN_Msk) |
    ac52:	78c3      	ldrb	r3, [r0, #3]
        (((uint32_t)threshold.th_up << COMP_TH_THUP_Pos) & COMP_TH_THUP_Msk);
    ac54:	0212      	lsls	r2, r2, #8
        (((uint32_t)threshold.th_down << COMP_TH_THDOWN_Pos) & COMP_TH_THDOWN_Msk) |
    ac56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        (((uint32_t)threshold.th_up << COMP_TH_THUP_Pos) & COMP_TH_THUP_Msk);
    ac5a:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
        (((uint32_t)threshold.th_down << COMP_TH_THDOWN_Pos) & COMP_TH_THDOWN_Msk) |
    ac5e:	431a      	orrs	r2, r3
    p_reg->TH =
    ac60:	4b1f      	ldr	r3, [pc, #124]	; (ace0 <nrfx_comp_init+0xb0>)
    ac62:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
}

NRF_STATIC_INLINE void nrf_comp_main_mode_set(NRF_COMP_Type *      p_reg,
                                              nrf_comp_main_mode_t main_mode)
{
    p_reg->MODE |= (main_mode << COMP_MODE_MAIN_Pos);
    ac66:	f8d3 2534 	ldr.w	r2, [r3, #1332]	; 0x534
    ac6a:	7881      	ldrb	r1, [r0, #2]
    ac6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ac70:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
}

NRF_STATIC_INLINE void nrf_comp_speed_mode_set(NRF_COMP_Type *    p_reg,
                                               nrf_comp_sp_mode_t speed_mode)
{
    p_reg->MODE |= (speed_mode << COMP_MODE_SP_Pos);
    ac74:	f8d3 1534 	ldr.w	r1, [r3, #1332]	; 0x534
    ac78:	7942      	ldrb	r2, [r0, #5]
    ac7a:	430a      	orrs	r2, r1
    ac7c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
}

NRF_STATIC_INLINE void nrf_comp_hysteresis_set(NRF_COMP_Type * p_reg, nrf_comp_hyst_t hyst)
{
    p_reg->HYST = (hyst << COMP_HYST_HYST_Pos) & COMP_HYST_HYST_Msk;
    ac80:	7982      	ldrb	r2, [r0, #6]
    ac82:	f002 0201 	and.w	r2, r2, #1
    ac86:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
}

NRF_STATIC_INLINE void nrf_comp_shorts_disable(NRF_COMP_Type * p_reg, uint32_t mask)
{
    p_reg->SHORTS &= ~mask;
    ac8a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ac8e:	f022 021c 	bic.w	r2, r2, #28
    ac92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->INTENCLR = mask;
    ac96:	220f      	movs	r2, #15
    ac98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->PSEL   = ((uint32_t)input << COMP_PSEL_PSEL_Pos);
    ac9c:	79c2      	ldrb	r2, [r0, #7]
    ac9e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->ENABLE = (COMP_ENABLE_ENABLE_Enabled << COMP_ENABLE_ENABLE_Pos);
    aca2:	2202      	movs	r2, #2
    aca4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_comp_task_trigger(NRF_COMP_Type * p_reg, nrf_comp_task_t task)
{
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    aca8:	2501      	movs	r5, #1
}

NRF_STATIC_INLINE void nrf_comp_event_clear(NRF_COMP_Type * p_reg, nrf_comp_event_t event)
{
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    acaa:	4a0e      	ldr	r2, [pc, #56]	; (ace4 <nrfx_comp_init+0xb4>)
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    acac:	605d      	str	r5, [r3, #4]
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    acae:	2300      	movs	r3, #0
    acb0:	6013      	str	r3, [r2, #0]
    acb2:	6812      	ldr	r2, [r2, #0]
    acb4:	4a0c      	ldr	r2, [pc, #48]	; (ace8 <nrfx_comp_init+0xb8>)
    acb6:	6013      	str	r3, [r2, #0]
    acb8:	6812      	ldr	r2, [r2, #0]
    acba:	4a0c      	ldr	r2, [pc, #48]	; (acec <nrfx_comp_init+0xbc>)
    acbc:	6013      	str	r3, [r2, #0]
    acbe:	6812      	ldr	r2, [r2, #0]
    acc0:	4a0b      	ldr	r2, [pc, #44]	; (acf0 <nrfx_comp_init+0xc0>)
    nrf_comp_event_clear(NRF_COMP, NRF_COMP_EVENT_DOWN);
    nrf_comp_event_clear(NRF_COMP, NRF_COMP_EVENT_UP);
    nrf_comp_event_clear(NRF_COMP, NRF_COMP_EVENT_CROSS);

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_COMP), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_COMP));
    acc2:	2013      	movs	r0, #19
    acc4:	6013      	str	r3, [r2, #0]
    acc6:	6813      	ldr	r3, [r2, #0]
    acc8:	f7fb fce2 	bl	6690 <arch_irq_enable>

    m_state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    accc:	4809      	ldr	r0, [pc, #36]	; (acf4 <nrfx_comp_init+0xc4>)
    m_state = NRFX_DRV_STATE_INITIALIZED;
    acce:	7025      	strb	r5, [r4, #0]
}
    acd0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    acd2:	4809      	ldr	r0, [pc, #36]	; (acf8 <nrfx_comp_init+0xc8>)
    acd4:	e7fc      	b.n	acd0 <nrfx_comp_init+0xa0>
    acd6:	bf00      	nop
    acd8:	20001e8e 	.word	0x20001e8e
    acdc:	20001074 	.word	0x20001074
    ace0:	40013000 	.word	0x40013000
    ace4:	40013100 	.word	0x40013100
    ace8:	40013104 	.word	0x40013104
    acec:	40013108 	.word	0x40013108
    acf0:	4001310c 	.word	0x4001310c
    acf4:	0bad0000 	.word	0x0bad0000
    acf8:	0bad0005 	.word	0x0bad0005

0000acfc <nrfx_comp_start>:
    p_reg->INTENSET = mask;
    acfc:	4b06      	ldr	r3, [pc, #24]	; (ad18 <nrfx_comp_start+0x1c>)
    acfe:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    p_reg->SHORTS |= mask;
    ad02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ad06:	430a      	orrs	r2, r1
    ad08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
void nrfx_comp_start(uint32_t comp_int_mask, uint32_t comp_shorts_mask)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_INITIALIZED);
    nrf_comp_int_enable(NRF_COMP, comp_int_mask);
    nrf_comp_shorts_enable(NRF_COMP, comp_shorts_mask);
    m_state = NRFX_DRV_STATE_POWERED_ON;
    ad0c:	4a03      	ldr	r2, [pc, #12]	; (ad1c <nrfx_comp_start+0x20>)
    ad0e:	2102      	movs	r1, #2
    ad10:	7011      	strb	r1, [r2, #0]
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    ad12:	2201      	movs	r2, #1
    ad14:	601a      	str	r2, [r3, #0]
    nrf_comp_task_trigger(NRF_COMP, NRF_COMP_TASK_START);
    NRFX_LOG_INFO("Enabled.");
}
    ad16:	4770      	bx	lr
    ad18:	40013000 	.word	0x40013000
    ad1c:	20001e8e 	.word	0x20001e8e

0000ad20 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    ad20:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    ad22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    ad26:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ad28:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    ad2a:	6002      	str	r2, [r0, #0]
}
    ad2c:	4802      	ldr	r0, [pc, #8]	; (ad38 <nrf_gpio_pin_port_decode+0x18>)
    ad2e:	bf18      	it	ne
    ad30:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    ad34:	4770      	bx	lr
    ad36:	bf00      	nop
    ad38:	50000300 	.word	0x50000300

0000ad3c <nrfx_gpiote_init>:
    NRFX_CRITICAL_SECTION_EXIT();
}


nrfx_err_t nrfx_gpiote_init(uint8_t interrupt_priority)
{
    ad3c:	b538      	push	{r3, r4, r5, lr}
    nrfx_err_t err_code;

    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    ad3e:	4c1f      	ldr	r4, [pc, #124]	; (adbc <nrfx_gpiote_init+0x80>)
    ad40:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
    ad44:	2b00      	cmp	r3, #0
    ad46:	d137      	bne.n	adb8 <nrfx_gpiote_init+0x7c>
            mask = P1_FEATURE_PINS_PRESENT;
    ad48:	f64f 71ff 	movw	r1, #65535	; 0xffff
    m_cb.pin_assignments[pin] = PIN_NOT_USED;
    ad4c:	20ff      	movs	r0, #255	; 0xff
    uint32_t port = pin_number >> 5;
    ad4e:	095a      	lsrs	r2, r3, #5
            mask = P1_FEATURE_PINS_PRESENT;
    ad50:	2a01      	cmp	r2, #1
    ad52:	bf14      	ite	ne
    ad54:	f04f 32ff 	movne.w	r2, #4294967295
    ad58:	460a      	moveq	r2, r1
    pin_number &= 0x1F;
    ad5a:	f003 051f 	and.w	r5, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    ad5e:	40ea      	lsrs	r2, r5

    uint8_t i;

    for (i = 0; i < MAX_PIN_NUMBER; i++)
    {
        if (nrf_gpio_pin_present_check(i))
    ad60:	07d2      	lsls	r2, r2, #31
    m_cb.pin_assignments[pin] = PIN_NOT_USED;
    ad62:	bf48      	it	mi
    ad64:	18e2      	addmi	r2, r4, r3
    ad66:	f103 0301 	add.w	r3, r3, #1
    ad6a:	bf48      	it	mi
    ad6c:	f882 0024 	strbmi.w	r0, [r2, #36]	; 0x24
    for (i = 0; i < MAX_PIN_NUMBER; i++)
    ad70:	2b30      	cmp	r3, #48	; 0x30
    ad72:	d1ec      	bne.n	ad4e <nrfx_gpiote_init+0x12>
        }
    }

    for (i = 0; i < (GPIOTE_CH_NUM + NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS); i++)
    {
        m_cb.handlers[i] = UNALLOCATED_HANDLER_ADDRESS;
    ad74:	f04f 33ff 	mov.w	r3, #4294967295
    ad78:	e9c4 3300 	strd	r3, r3, [r4]
    ad7c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    ad80:	e9c4 3304 	strd	r3, r3, [r4, #16]
    ad84:	e9c4 3306 	strd	r3, r3, [r4, #24]
    ad88:	6223      	str	r3, [r4, #32]
    for (i = 0; i < (GPIOTE_CH_NUM + NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS); i++)
    ad8a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        {
            m_cb.port_handlers_pins[i - GPIOTE_CH_NUM] = (int8_t)PIN_NOT_USED;
        }
    }

    memset(m_cb.configured_pins, 0, sizeof(m_cb.configured_pins));
    ad8e:	4b0c      	ldr	r3, [pc, #48]	; (adc0 <nrfx_gpiote_init+0x84>)
    ad90:	2500      	movs	r5, #0
    ad92:	f8c4 5055 	str.w	r5, [r4, #85]	; 0x55

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_GPIOTE), interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    ad96:	2006      	movs	r0, #6
    memset(m_cb.configured_pins, 0, sizeof(m_cb.configured_pins));
    ad98:	809d      	strh	r5, [r3, #4]
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    ad9a:	f7fb fc79 	bl	6690 <arch_irq_enable>
    ad9e:	4b09      	ldr	r3, [pc, #36]	; (adc4 <nrfx_gpiote_init+0x88>)
    nrf_gpiote_int_enable(NRF_GPIOTE, GPIOTE_INTENSET_PORT_Msk);
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    ada0:	4809      	ldr	r0, [pc, #36]	; (adc8 <nrfx_gpiote_init+0x8c>)
    ada2:	601d      	str	r5, [r3, #0]
    ada4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    ada6:	4b09      	ldr	r3, [pc, #36]	; (adcc <nrfx_gpiote_init+0x90>)
    ada8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    adac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    adb0:	2301      	movs	r3, #1
    adb2:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
}
    adb6:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    adb8:	4805      	ldr	r0, [pc, #20]	; (add0 <nrfx_gpiote_init+0x94>)
    adba:	e7fc      	b.n	adb6 <nrfx_gpiote_init+0x7a>
    adbc:	20001078 	.word	0x20001078
    adc0:	200010cd 	.word	0x200010cd
    adc4:	4000617c 	.word	0x4000617c
    adc8:	0bad0000 	.word	0x0bad0000
    adcc:	40006000 	.word	0x40006000
    add0:	0bad0005 	.word	0x0bad0005

0000add4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    add4:	2301      	movs	r3, #1
    add6:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    adda:	f010 0fff 	tst.w	r0, #255	; 0xff
    adde:	d012      	beq.n	ae06 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    ade0:	f04f 0320 	mov.w	r3, #32
    ade4:	f3ef 8111 	mrs	r1, BASEPRI
    ade8:	f383 8812 	msr	BASEPRI_MAX, r3
    adec:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    adf0:	4a06      	ldr	r2, [pc, #24]	; (ae0c <nrfx_gpiote_channel_free+0x38>)
    adf2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    adf4:	ea23 0000 	bic.w	r0, r3, r0
    adf8:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    adfa:	f381 8811 	msr	BASEPRI, r1
    adfe:	f3bf 8f6f 	isb	sy
    ae02:	4803      	ldr	r0, [pc, #12]	; (ae10 <nrfx_gpiote_channel_free+0x3c>)
    ae04:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    ae06:	4803      	ldr	r0, [pc, #12]	; (ae14 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ae08:	4770      	bx	lr
    ae0a:	bf00      	nop
    ae0c:	20001078 	.word	0x20001078
    ae10:	0bad0000 	.word	0x0bad0000
    ae14:	0bad0004 	.word	0x0bad0004

0000ae18 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    ae18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae1c:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    ae1e:	f8df e060 	ldr.w	lr, [pc, #96]	; ae80 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    ae22:	4816      	ldr	r0, [pc, #88]	; (ae7c <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    ae24:	f8df 805c 	ldr.w	r8, [pc, #92]	; ae84 <nrfx_gpiote_channel_alloc+0x6c>
{
    ae28:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    ae2a:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    ae2c:	2601      	movs	r6, #1
    ae2e:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    ae30:	f04f 0120 	mov.w	r1, #32
    ae34:	f3ef 8c11 	mrs	ip, BASEPRI
    ae38:	f381 8812 	msr	BASEPRI_MAX, r1
    ae3c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    ae40:	fa22 f103 	lsr.w	r1, r2, r3
    ae44:	07c9      	lsls	r1, r1, #31
    ae46:	d50a      	bpl.n	ae5e <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    ae48:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    ae4c:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    ae50:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    ae52:	bf01      	itttt	eq
    ae54:	4339      	orreq	r1, r7
    ae56:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    ae5a:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    ae5c:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    ae5e:	f38c 8811 	msr	BASEPRI, ip
    ae62:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    ae66:	4540      	cmp	r0, r8
    ae68:	d005      	beq.n	ae76 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    ae6a:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    ae6e:	439a      	bics	r2, r3
    ae70:	f104 0401 	add.w	r4, r4, #1
    ae74:	d1db      	bne.n	ae2e <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ae76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae7a:	bf00      	nop
    ae7c:	0bad0002 	.word	0x0bad0002
    ae80:	20001078 	.word	0x20001078
    ae84:	0bad0000 	.word	0x0bad0000

0000ae88 <gpiote_out_init>:

static nrfx_err_t gpiote_out_init(nrfx_gpiote_pin_t                pin,
                                  nrfx_gpiote_out_config_t const * p_config,
                                  bool                             prealloc,
                                  uint8_t                          channel)
{
    ae88:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (m_cb.pin_assignments[pin] != PIN_NOT_USED);
    ae8a:	4e39      	ldr	r6, [pc, #228]	; (af70 <gpiote_out_init+0xe8>)
{
    ae8c:	460d      	mov	r5, r1
    return (m_cb.pin_assignments[pin] != PIN_NOT_USED);
    ae8e:	1831      	adds	r1, r6, r0
{
    ae90:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb.state == NRFX_DRV_STATE_INITIALIZED);
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (pin_in_use(pin))
    ae92:	f991 0024 	ldrsb.w	r0, [r1, #36]	; 0x24
    ae96:	3001      	adds	r0, #1
    ae98:	d166      	bne.n	af68 <gpiote_out_init+0xe0>
    {
        err_code = NRFX_ERROR_BUSY;
    }
    else
    {
        if (p_config->task_pin)
    ae9a:	78a8      	ldrb	r0, [r5, #2]
    ae9c:	2800      	cmp	r0, #0
    ae9e:	d056      	beq.n	af4e <gpiote_out_init+0xc6>
        {
            int8_t ch = NO_CHANNELS;

            if (prealloc)
    aea0:	2a00      	cmp	r2, #0
    aea2:	d049      	beq.n	af38 <gpiote_out_init+0xb0>
            {
                ch = channel;
    aea4:	b25b      	sxtb	r3, r3
            else
            {
                ch = accuracy_channel_alloc(true);
            }

            if (ch != NO_CHANNELS)
    aea6:	1c5a      	adds	r2, r3, #1
    aea8:	d04c      	beq.n	af44 <gpiote_out_init+0xbc>
    m_cb.pin_assignments[pin] = channel_id;
    aeaa:	1932      	adds	r2, r6, r4
    aeac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    m_cb.handlers[channel_id] = handler;
    aeb0:	2200      	movs	r2, #0
    aeb2:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
            {
                pin_in_use_by_te_set(pin, ch, NULL, true);
                nrf_gpiote_task_configure(NRF_GPIOTE,
    aeb6:	009b      	lsls	r3, r3, #2
    aeb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    aebc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    aec0:	782a      	ldrb	r2, [r5, #0]
                                                 uint32_t              idx,
                                                 uint32_t              pin,
                                                 nrf_gpiote_polarity_t polarity,
                                                 nrf_gpiote_outinit_t  init_val)
{
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    aec2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    aec6:	7869      	ldrb	r1, [r5, #1]
    aec8:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
                          GPIOTE_CONFIG_POLARITY_Msk |
                          GPIOTE_CONFIG_OUTINIT_Msk);

  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    aecc:	0412      	lsls	r2, r2, #16
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    aece:	0509      	lsls	r1, r1, #20
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    aed0:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    aed4:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    aed8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    aedc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    aee0:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    aee2:	0221      	lsls	r1, r4, #8
    aee4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    aee8:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    aeec:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    aeee:	4302      	orrs	r2, r0
    aef0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
            pin_in_use_set(pin);
        }

        if (err_code == NRFX_SUCCESS)
        {
            if (p_config->init_state == NRF_GPIOTE_INITIAL_VALUE_HIGH)
    aef4:	7869      	ldrb	r1, [r5, #1]
    aef6:	9401      	str	r4, [sp, #4]
    aef8:	2901      	cmp	r1, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    aefa:	a801      	add	r0, sp, #4
    aefc:	d12c      	bne.n	af58 <gpiote_out_init+0xd0>
    aefe:	f7ff ff0f 	bl	ad20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    af02:	9b01      	ldr	r3, [sp, #4]
    af04:	4099      	lsls	r1, r3
    p_reg->OUTSET = set_mask;
    af06:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    af0a:	a801      	add	r0, sp, #4
    af0c:	9401      	str	r4, [sp, #4]
    af0e:	f7ff ff07 	bl	ad20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    af12:	9b01      	ldr	r3, [sp, #4]
    af14:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    af18:	2203      	movs	r2, #3
    af1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_set(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    af1e:	08e3      	lsrs	r3, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] |= (1 << bit);
    af20:	4a14      	ldr	r2, [pc, #80]	; (af74 <gpiote_out_init+0xec>)
    af22:	2001      	movs	r0, #1
    af24:	5cd1      	ldrb	r1, [r2, r3]
    bit = BITMASK_RELBIT_GET(bit);
    af26:	f004 0407 	and.w	r4, r4, #7
    p_mask8[byte_idx] |= (1 << bit);
    af2a:	fa00 f404 	lsl.w	r4, r0, r4
    af2e:	430c      	orrs	r4, r1
    af30:	54d4      	strb	r4, [r2, r3]
    af32:	4811      	ldr	r0, [pc, #68]	; (af78 <gpiote_out_init+0xf0>)
            pin_configured_set(pin);
        }
    }

    return err_code;
}
    af34:	b002      	add	sp, #8
    af36:	bd70      	pop	{r4, r5, r6, pc}
        if (nrfx_gpiote_channel_alloc(&i) == NRFX_SUCCESS)
    af38:	a801      	add	r0, sp, #4
    af3a:	f7ff ff6d 	bl	ae18 <nrfx_gpiote_channel_alloc>
    af3e:	4b0e      	ldr	r3, [pc, #56]	; (af78 <gpiote_out_init+0xf0>)
    af40:	4298      	cmp	r0, r3
    af42:	d001      	beq.n	af48 <gpiote_out_init+0xc0>
                err_code = NRFX_ERROR_NO_MEM;
    af44:	480d      	ldr	r0, [pc, #52]	; (af7c <gpiote_out_init+0xf4>)
    af46:	e7f5      	b.n	af34 <gpiote_out_init+0xac>
            channel_id = i;
    af48:	f99d 3004 	ldrsb.w	r3, [sp, #4]
    return channel_id;
    af4c:	e7ab      	b.n	aea6 <gpiote_out_init+0x1e>
        else if (prealloc)
    af4e:	b96a      	cbnz	r2, af6c <gpiote_out_init+0xe4>
    m_cb.pin_assignments[pin] = PIN_USED;
    af50:	23fe      	movs	r3, #254	; 0xfe
    af52:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
        if (err_code == NRFX_SUCCESS)
    af56:	e7cd      	b.n	aef4 <gpiote_out_init+0x6c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    af58:	f7ff fee2 	bl	ad20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    af5c:	9a01      	ldr	r2, [sp, #4]
    af5e:	2301      	movs	r3, #1
    af60:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    af62:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    af66:	e7d0      	b.n	af0a <gpiote_out_init+0x82>
        err_code = NRFX_ERROR_BUSY;
    af68:	4805      	ldr	r0, [pc, #20]	; (af80 <gpiote_out_init+0xf8>)
    af6a:	e7e3      	b.n	af34 <gpiote_out_init+0xac>
            err_code = NRFX_ERROR_INVALID_PARAM;
    af6c:	4805      	ldr	r0, [pc, #20]	; (af84 <gpiote_out_init+0xfc>)
    return err_code;
    af6e:	e7e1      	b.n	af34 <gpiote_out_init+0xac>
    af70:	20001078 	.word	0x20001078
    af74:	200010cd 	.word	0x200010cd
    af78:	0bad0000 	.word	0x0bad0000
    af7c:	0bad0002 	.word	0x0bad0002
    af80:	0bad000b 	.word	0x0bad000b
    af84:	0bad0004 	.word	0x0bad0004

0000af88 <nrfx_gpiote_out_task_enable>:
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
    NRFX_ASSERT(pin_in_use(pin));
    NRFX_ASSERT(pin_in_use_by_te(pin));

    nrf_gpiote_task_enable(NRF_GPIOTE, (uint32_t)m_cb.pin_assignments[pin]);
    af88:	4b07      	ldr	r3, [pc, #28]	; (afa8 <nrfx_gpiote_out_task_enable+0x20>)
    af8a:	4403      	add	r3, r0
    af8c:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
    af90:	009b      	lsls	r3, r3, #2
    af92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    af96:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    uint32_t final_config = p_reg->CONFIG[idx] | GPIOTE_CONFIG_MODE_Task;
    af9a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    af9e:	f042 0203 	orr.w	r2, r2, #3
    p_reg->CONFIG[idx] = final_config;
    afa2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    afa6:	4770      	bx	lr
    afa8:	20001078 	.word	0x20001078

0000afac <nrfx_gpiote_set_task_get>:
    return m_cb.pin_assignments[pin];
    afac:	4b04      	ldr	r3, [pc, #16]	; (afc0 <nrfx_gpiote_set_task_get+0x14>)
    afae:	4403      	add	r3, r0

#if defined(GPIOTE_FEATURE_SET_PRESENT)
NRF_STATIC_INLINE nrf_gpiote_task_t nrf_gpiote_set_task_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_task_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, TASKS_SET[index]);
    afb0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    afb4:	0080      	lsls	r0, r0, #2
    afb6:	3030      	adds	r0, #48	; 0x30
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
    NRFX_ASSERT(pin_in_use_by_te(pin));

    return nrf_gpiote_set_task_get((uint8_t)channel_port_get(pin));
}
    afb8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    afbc:	4770      	bx	lr
    afbe:	bf00      	nop
    afc0:	20001078 	.word	0x20001078

0000afc4 <nrfx_gpiote_clr_task_get>:
    return m_cb.pin_assignments[pin];
    afc4:	4b04      	ldr	r3, [pc, #16]	; (afd8 <nrfx_gpiote_clr_task_get+0x14>)
    afc6:	4403      	add	r3, r0

#if defined(GPIOTE_FEATURE_CLR_PRESENT)
NRF_STATIC_INLINE nrf_gpiote_task_t nrf_gpiote_clr_task_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_task_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, TASKS_CLR[index]);
    afc8:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    afcc:	0080      	lsls	r0, r0, #2
    afce:	3060      	adds	r0, #96	; 0x60
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(pin));
    NRFX_ASSERT(pin_in_use_by_te(pin));

    return nrf_gpiote_clr_task_get((uint8_t)channel_port_get(pin));
}
    afd0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
    afd4:	4770      	bx	lr
    afd6:	bf00      	nop
    afd8:	20001078 	.word	0x20001078

0000afdc <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    afe0:	4a14      	ldr	r2, [pc, #80]	; (b034 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    afe2:	4e15      	ldr	r6, [pc, #84]	; (b038 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    afe4:	4f15      	ldr	r7, [pc, #84]	; (b03c <nrfx_ppi_channel_alloc+0x60>)
{
    afe6:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    afe8:	4815      	ldr	r0, [pc, #84]	; (b040 <nrfx_ppi_channel_alloc+0x64>)
{
    afea:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    afec:	f04f 0e01 	mov.w	lr, #1
    aff0:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    aff4:	f04f 0320 	mov.w	r3, #32
    aff8:	f3ef 8811 	mrs	r8, BASEPRI
    affc:	f383 8812 	msr	BASEPRI_MAX, r3
    b000:	f3bf 8f6f 	isb	sy
    b004:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    b008:	4213      	tst	r3, r2
    b00a:	d007      	beq.n	b01c <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    b00c:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    b00e:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    b010:	bf01      	itttt	eq
    b012:	4319      	orreq	r1, r3
    b014:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    b016:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    b01a:	4638      	moveq	r0, r7
	__asm__ volatile(
    b01c:	f388 8811 	msr	BASEPRI, r8
    b020:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    b024:	42b8      	cmp	r0, r7
    b026:	d003      	beq.n	b030 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    b028:	439a      	bics	r2, r3
    b02a:	f104 0401 	add.w	r4, r4, #1
    b02e:	d1df      	bne.n	aff0 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b034:	000fffff 	.word	0x000fffff
    b038:	200010d8 	.word	0x200010d8
    b03c:	0bad0000 	.word	0x0bad0000
    b040:	0bad0002 	.word	0x0bad0002

0000b044 <nrfx_ppi_channel_enable>:
    b044:	2301      	movs	r3, #1
    b046:	fa03 f000 	lsl.w	r0, r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    b04a:	f3c0 0313 	ubfx	r3, r0, #0, #20

    if (!is_app_channel(channel))
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (is_programmable_app_channel(channel) && !is_allocated_channel(channel))
    b04e:	b11b      	cbz	r3, b058 <nrfx_ppi_channel_enable+0x14>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    b050:	4b05      	ldr	r3, [pc, #20]	; (b068 <nrfx_ppi_channel_enable+0x24>)
    b052:	681b      	ldr	r3, [r3, #0]
    else if (is_programmable_app_channel(channel) && !is_allocated_channel(channel))
    b054:	4218      	tst	r0, r3
    b056:	d004      	beq.n	b062 <nrfx_ppi_channel_enable+0x1e>
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    b058:	4b04      	ldr	r3, [pc, #16]	; (b06c <nrfx_ppi_channel_enable+0x28>)
    b05a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
    b05e:	4804      	ldr	r0, [pc, #16]	; (b070 <nrfx_ppi_channel_enable+0x2c>)
}
    b060:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_STATE;
    b062:	4804      	ldr	r0, [pc, #16]	; (b074 <nrfx_ppi_channel_enable+0x30>)
    {
        nrf_ppi_channel_enable(NRF_PPI, channel);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    b064:	4770      	bx	lr
    b066:	bf00      	nop
    b068:	200010d8 	.word	0x200010d8
    b06c:	4001f000 	.word	0x4001f000
    b070:	0bad0000 	.word	0x0bad0000
    b074:	0bad0005 	.word	0x0bad0005

0000b078 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    b078:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    b07a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    b07e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b080:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    b082:	6002      	str	r2, [r0, #0]
}
    b084:	4802      	ldr	r0, [pc, #8]	; (b090 <nrf_gpio_pin_port_decode+0x18>)
    b086:	bf18      	it	ne
    b088:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    b08c:	4770      	bx	lr
    b08e:	bf00      	nop
    b090:	50000300 	.word	0x50000300

0000b094 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    b094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    b098:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b09a:	4c4c      	ldr	r4, [pc, #304]	; (b1cc <nrfx_spi_init+0x138>)
{
    b09c:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b09e:	2028      	movs	r0, #40	; 0x28
    b0a0:	4370      	muls	r0, r6
    b0a2:	1825      	adds	r5, r4, r0
    b0a4:	7f2f      	ldrb	r7, [r5, #28]
    b0a6:	2f00      	cmp	r7, #0
    b0a8:	f040 808e 	bne.w	b1c8 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    b0ac:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
    b0ae:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
    b0b0:	7b0b      	ldrb	r3, [r1, #12]
    b0b2:	7808      	ldrb	r0, [r1, #0]
    b0b4:	2b01      	cmp	r3, #1
    b0b6:	d878      	bhi.n	b1aa <nrfx_spi_init+0x116>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    b0b8:	f012 fcdc 	bl	1da74 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
    b0bc:	780b      	ldrb	r3, [r1, #0]
    b0be:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b0c0:	a801      	add	r0, sp, #4
    b0c2:	f7ff ffd9 	bl	b078 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b0c6:	9b01      	ldr	r3, [sp, #4]
    b0c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b0cc:	2201      	movs	r2, #1
    b0ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    b0d2:	784d      	ldrb	r5, [r1, #1]
    b0d4:	2dff      	cmp	r5, #255	; 0xff
    b0d6:	d06b      	beq.n	b1b0 <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
    b0d8:	4628      	mov	r0, r5
    b0da:	f012 fccb 	bl	1da74 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b0de:	a801      	add	r0, sp, #4
    b0e0:	9501      	str	r5, [sp, #4]
    b0e2:	f7ff ffc9 	bl	b078 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b0e6:	9b01      	ldr	r3, [sp, #4]
    b0e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b0ec:	2203      	movs	r2, #3
    b0ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    b0f2:	788f      	ldrb	r7, [r1, #2]
    b0f4:	2fff      	cmp	r7, #255	; 0xff
    b0f6:	d05e      	beq.n	b1b6 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b0f8:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
    b0fa:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
    b0fe:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b100:	f7ff ffba 	bl	b078 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b104:	9b01      	ldr	r3, [sp, #4]
    b106:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b10a:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    b10e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b112:	78c8      	ldrb	r0, [r1, #3]
    b114:	28ff      	cmp	r0, #255	; 0xff
    b116:	d00c      	beq.n	b132 <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
    b118:	f012 fc9f 	bl	1da5a <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b11c:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_output(p_config->ss_pin);
    b11e:	78cb      	ldrb	r3, [r1, #3]
    b120:	9301      	str	r3, [sp, #4]
    b122:	f7ff ffa9 	bl	b078 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    b126:	9b01      	ldr	r3, [sp, #4]
    b128:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    b12c:	2203      	movs	r2, #3
    b12e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
    b132:	f898 2004 	ldrb.w	r2, [r8, #4]
    b136:	78c8      	ldrb	r0, [r1, #3]
    b138:	2328      	movs	r3, #40	; 0x28
    b13a:	fb03 4302 	mla	r3, r3, r2, r4
    b13e:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
    b140:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    b144:	780b      	ldrb	r3, [r1, #0]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    b146:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    b14a:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    b14c:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    b150:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    b154:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    b158:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    b15a:	7b0d      	ldrb	r5, [r1, #12]
    b15c:	3b00      	subs	r3, #0
    b15e:	bf18      	it	ne
    b160:	2301      	movne	r3, #1
    switch (spi_mode)
    b162:	2d02      	cmp	r5, #2
    b164:	d02a      	beq.n	b1bc <nrfx_spi_init+0x128>
    b166:	2d03      	cmp	r5, #3
    b168:	d02b      	beq.n	b1c2 <nrfx_spi_init+0x12e>
    b16a:	2d01      	cmp	r5, #1
    b16c:	d101      	bne.n	b172 <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    b16e:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    b172:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    b176:	2328      	movs	r3, #40	; 0x28
    b178:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    b17c:	4373      	muls	r3, r6
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    b17e:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
    b180:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
    b182:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    b184:	2201      	movs	r2, #1
    b186:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
    b18a:	b11b      	cbz	r3, b194 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    b18c:	f340 3007 	sbfx	r0, r0, #12, #8
    b190:	f7fb fa7e 	bl	6690 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    b194:	2328      	movs	r3, #40	; 0x28
    b196:	fb03 4406 	mla	r4, r3, r6, r4
    b19a:	2300      	movs	r3, #0
    b19c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    b19e:	480c      	ldr	r0, [pc, #48]	; (b1d0 <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b1a0:	2301      	movs	r3, #1
    b1a2:	7723      	strb	r3, [r4, #28]
}
    b1a4:	b003      	add	sp, #12
    b1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    b1aa:	f012 fc56 	bl	1da5a <nrf_gpio_pin_set>
    b1ae:	e785      	b.n	b0bc <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    b1b0:	f04f 35ff 	mov.w	r5, #4294967295
    b1b4:	e79d      	b.n	b0f2 <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    b1b6:	f04f 37ff 	mov.w	r7, #4294967295
    b1ba:	e7aa      	b.n	b112 <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    b1bc:	f043 0304 	orr.w	r3, r3, #4
        break;
    b1c0:	e7d7      	b.n	b172 <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    b1c2:	f043 0306 	orr.w	r3, r3, #6
        break;
    b1c6:	e7d4      	b.n	b172 <nrfx_spi_init+0xde>
        return err_code;
    b1c8:	4802      	ldr	r0, [pc, #8]	; (b1d4 <nrfx_spi_init+0x140>)
    b1ca:	e7eb      	b.n	b1a4 <nrfx_spi_init+0x110>
    b1cc:	200010dc 	.word	0x200010dc
    b1d0:	0bad0000 	.word	0x0bad0000
    b1d4:	0bad0005 	.word	0x0bad0005

0000b1d8 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    b1d8:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b1da:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    b1dc:	4e16      	ldr	r6, [pc, #88]	; (b238 <nrfx_spi_uninit+0x60>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    b1de:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    b1e0:	2328      	movs	r3, #40	; 0x28
    b1e2:	436b      	muls	r3, r5
    b1e4:	58f3      	ldr	r3, [r6, r3]
    b1e6:	b133      	cbz	r3, b1f6 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    b1e8:	f344 3007 	sbfx	r0, r4, #12, #8
    b1ec:	f7fb fa60 	bl	66b0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    b1f0:	2304      	movs	r3, #4
    b1f2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    b1f6:	2300      	movs	r3, #0
    b1f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return p_reg->PSEL.SCK;
    b1fc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
    b200:	f012 fc1d 	bl	1da3e <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    b204:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510

    uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
    if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    b208:	1c42      	adds	r2, r0, #1
    b20a:	d001      	beq.n	b210 <nrfx_spi_uninit+0x38>
    {
        nrf_gpio_cfg_default(miso_pin);
    b20c:	f012 fc17 	bl	1da3e <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    b210:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
    }

    uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
    if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    b214:	1c43      	adds	r3, r0, #1
    b216:	d001      	beq.n	b21c <nrfx_spi_uninit+0x44>
    {
        nrf_gpio_cfg_default(mosi_pin);
    b218:	f012 fc11 	bl	1da3e <nrf_gpio_cfg_default>
    }

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b21c:	2328      	movs	r3, #40	; 0x28
    b21e:	fb03 6205 	mla	r2, r3, r5, r6
    b222:	4619      	mov	r1, r3
    b224:	7f90      	ldrb	r0, [r2, #30]
    b226:	28ff      	cmp	r0, #255	; 0xff
    b228:	d001      	beq.n	b22e <nrfx_spi_uninit+0x56>
    {
        nrf_gpio_cfg_default(p_cb->ss_pin);
    b22a:	f012 fc08 	bl	1da3e <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    b22e:	fb01 6505 	mla	r5, r1, r5, r6
    b232:	2300      	movs	r3, #0
    b234:	772b      	strb	r3, [r5, #28]
}
    b236:	bd70      	pop	{r4, r5, r6, pc}
    b238:	200010dc 	.word	0x200010dc

0000b23c <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    b240:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    b242:	4d39      	ldr	r5, [pc, #228]	; (b328 <nrfx_spi_xfer+0xec>)
    b244:	2328      	movs	r3, #40	; 0x28
    b246:	4363      	muls	r3, r4
{
    b248:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    b24a:	18ea      	adds	r2, r5, r3
{
    b24c:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
    b24e:	7f51      	ldrb	r1, [r2, #29]
{
    b250:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    b252:	2900      	cmp	r1, #0
    b254:	d165      	bne.n	b322 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    b256:	58eb      	ldr	r3, [r5, r3]
    b258:	b10b      	cbz	r3, b25e <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    b25a:	2301      	movs	r3, #1
    b25c:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    b25e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    b262:	2628      	movs	r6, #40	; 0x28
    b264:	fb06 5604 	mla	r6, r6, r4, r5
    b268:	f106 0c0c 	add.w	ip, r6, #12
    b26c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b270:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
    b272:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b274:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    b276:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b27a:	d001      	beq.n	b280 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    b27c:	f012 fbfa 	bl	1da74 <nrf_gpio_pin_clear>
    }
    if (flags)
    b280:	2328      	movs	r3, #40	; 0x28
    b282:	f1b8 0f00 	cmp.w	r8, #0
    b286:	d006      	beq.n	b296 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    b288:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    b28c:	4827      	ldr	r0, [pc, #156]	; (b32c <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    b28e:	2300      	movs	r3, #0
    b290:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    b292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    b296:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
    b29a:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
    b29e:	2204      	movs	r2, #4
    b2a0:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
    b2a4:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b2a8:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
    b2ac:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    b2b0:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
    b2b2:	b192      	cbz	r2, b2da <nrfx_spi_xfer+0x9e>
    b2b4:	683b      	ldr	r3, [r7, #0]
    b2b6:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    b2b8:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    b2bc:	2a01      	cmp	r2, #1
    b2be:	d90e      	bls.n	b2de <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    b2c0:	683b      	ldr	r3, [r7, #0]
    b2c2:	785b      	ldrb	r3, [r3, #1]
    b2c4:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
    b2c8:	2328      	movs	r3, #40	; 0x28
    b2ca:	4363      	muls	r3, r4
    b2cc:	58ef      	ldr	r7, [r5, r3]
    b2ce:	b177      	cbz	r7, b2ee <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
    b2d0:	2304      	movs	r3, #4
    b2d2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    b2d6:	4816      	ldr	r0, [pc, #88]	; (b330 <nrfx_spi_xfer+0xf4>)
    b2d8:	e7db      	b.n	b292 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    b2da:	7fdb      	ldrb	r3, [r3, #31]
    b2dc:	e7ec      	b.n	b2b8 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    b2de:	68fb      	ldr	r3, [r7, #12]
    b2e0:	2b01      	cmp	r3, #1
    b2e2:	d9f1      	bls.n	b2c8 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    b2e4:	2328      	movs	r3, #40	; 0x28
    b2e6:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
    b2ea:	7fdb      	ldrb	r3, [r3, #31]
    b2ec:	e7ea      	b.n	b2c4 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    b2ee:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    b2f2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b2f6:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d0fb      	beq.n	b2f6 <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b2fe:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    b302:	4630      	mov	r0, r6
    b304:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    b308:	f012 fbc1 	bl	1da8e <transfer_byte>
    b30c:	2800      	cmp	r0, #0
    b30e:	d1f2      	bne.n	b2f6 <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b310:	2328      	movs	r3, #40	; 0x28
    b312:	fb03 5404 	mla	r4, r3, r4, r5
    b316:	7fa0      	ldrb	r0, [r4, #30]
    b318:	28ff      	cmp	r0, #255	; 0xff
    b31a:	d0dc      	beq.n	b2d6 <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
    b31c:	f012 fb9d 	bl	1da5a <nrf_gpio_pin_set>
    b320:	e7d9      	b.n	b2d6 <nrfx_spi_xfer+0x9a>
        return err_code;
    b322:	4804      	ldr	r0, [pc, #16]	; (b334 <nrfx_spi_xfer+0xf8>)
    b324:	e7b5      	b.n	b292 <nrfx_spi_xfer+0x56>
    b326:	bf00      	nop
    b328:	200010dc 	.word	0x200010dc
    b32c:	0bad0003 	.word	0x0bad0003
    b330:	0bad0000 	.word	0x0bad0000
    b334:	0bad000b 	.word	0x0bad000b

0000b338 <nrfx_spi_1_irq_handler>:
    b338:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b33c:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    b33e:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
    b340:	490b      	ldr	r1, [pc, #44]	; (b370 <nrfx_spi_1_irq_handler+0x38>)
    b342:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    b346:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    b34a:	f012 fba0 	bl	1da8e <transfer_byte>
    b34e:	b968      	cbnz	r0, b36c <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    b350:	7f88      	ldrb	r0, [r1, #30]
    b352:	28ff      	cmp	r0, #255	; 0xff
    b354:	d001      	beq.n	b35a <nrfx_spi_1_irq_handler+0x22>
        nrf_gpio_pin_set(p_cb->ss_pin);
    b356:	f012 fb80 	bl	1da5a <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    b35a:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    b35c:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
    b35e:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
    b360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b364:	e9d1 3100 	ldrd	r3, r1, [r1]
    b368:	4802      	ldr	r0, [pc, #8]	; (b374 <nrfx_spi_1_irq_handler+0x3c>)
    b36a:	4718      	bx	r3
}
    b36c:	bd10      	pop	{r4, pc}
    b36e:	bf00      	nop
    b370:	200010dc 	.word	0x200010dc
    b374:	200010e4 	.word	0x200010e4

0000b378 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    b378:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    b37c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b37e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    b380:	4b04      	ldr	r3, [pc, #16]	; (b394 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b382:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    b386:	bf18      	it	ne
    b388:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b38c:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    b38e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    b392:	4770      	bx	lr
    b394:	50000300 	.word	0x50000300

0000b398 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    b398:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    b39c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b39e:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    b3a0:	4b04      	ldr	r3, [pc, #16]	; (b3b4 <nrf_gpio_cfg_default+0x1c>)
    reg->PIN_CNF[pin_number] = cnf;
    b3a2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    b3a6:	bf18      	it	ne
    b3a8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    b3ac:	2102      	movs	r1, #2
    b3ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    b3b2:	4770      	bx	lr
    b3b4:	50000300 	.word	0x50000300

0000b3b8 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    b3b8:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    b3bc:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    b3be:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
    b3c0:	4b04      	ldr	r3, [pc, #16]	; (b3d4 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b3c2:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    b3c6:	bf18      	it	ne
    b3c8:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b3cc:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    b3ce:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    b3d2:	4770      	bx	lr
    b3d4:	50000300 	.word	0x50000300

0000b3d8 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    b3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b3dc:	4e6f      	ldr	r6, [pc, #444]	; (b59c <nrfx_spim_init+0x1c4>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b3de:	7905      	ldrb	r5, [r0, #4]
{
    b3e0:	460c      	mov	r4, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b3e2:	2124      	movs	r1, #36	; 0x24
    b3e4:	fb01 6105 	mla	r1, r1, r5, r6
{
    b3e8:	4607      	mov	r7, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    b3ea:	7f09      	ldrb	r1, [r1, #28]
    b3ec:	2900      	cmp	r1, #0
    b3ee:	f040 80d1 	bne.w	b594 <nrfx_spim_init+0x1bc>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
    b3f2:	2d00      	cmp	r5, #0
    b3f4:	f040 80d0 	bne.w	b598 <nrfx_spim_init+0x1c0>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    b3f8:	f8d0 8000 	ldr.w	r8, [r0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    b3fc:	e9c6 2300 	strd	r2, r3, [r6]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
    b400:	7b23      	ldrb	r3, [r4, #12]
    b402:	7820      	ldrb	r0, [r4, #0]
    b404:	2b01      	cmp	r3, #1
    b406:	f200 80b3 	bhi.w	b570 <nrfx_spim_init+0x198>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
    b40a:	f7ff ffb5 	bl	b378 <nrf_gpio_pin_clear>
    }

    nrf_gpio_pin_drive_t pin_drive;
    // Configure pin drive - high drive for 32 MHz clock frequency.
#if NRF_SPIM_HAS_32_MHZ_FREQ
    pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M) ? NRF_GPIO_PIN_H0H1 : NRF_GPIO_PIN_S0S1;
    b40e:	68a3      	ldr	r3, [r4, #8]
        case 1: return NRF_P1;
    b410:	f8df a18c 	ldr.w	sl, [pc, #396]	; b5a0 <nrfx_spim_init+0x1c8>
    b414:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
#else
    pin_drive = NRF_GPIO_PIN_S0S1;
#endif

    nrf_gpio_cfg(p_config->sck_pin,
    b418:	7823      	ldrb	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    b41a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    b41e:	ea4f 1353 	mov.w	r3, r3, lsr #5
    pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M) ? NRF_GPIO_PIN_H0H1 : NRF_GPIO_PIN_S0S1;
    b422:	bf08      	it	eq
    b424:	2503      	moveq	r5, #3
        case 1: return NRF_P1;
    b426:	2b01      	cmp	r3, #1
    b428:	bf14      	ite	ne
    b42a:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    b42e:	4651      	moveq	r1, sl
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    b430:	022d      	lsls	r5, r5, #8
    reg->PIN_CNF[pin_number] = cnf;
    b432:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b436:	f045 0001 	orr.w	r0, r5, #1
    reg->PIN_CNF[pin_number] = cnf;
    b43a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 pin_drive,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    b43e:	f894 9001 	ldrb.w	r9, [r4, #1]
    b442:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    b446:	f000 8096 	beq.w	b576 <nrfx_spim_init+0x19e>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
    b44a:	4648      	mov	r0, r9
    b44c:	f7ff ff94 	bl	b378 <nrf_gpio_pin_clear>
    return pin_number >> 5;
    b450:	ea4f 1259 	mov.w	r2, r9, lsr #5
        case 1: return NRF_P1;
    b454:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    b456:	f009 031f 	and.w	r3, r9, #31
        case 1: return NRF_P1;
    b45a:	bf18      	it	ne
    b45c:	f04f 4aa0 	movne.w	sl, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    b460:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b464:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    b468:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    b46c:	f894 a002 	ldrb.w	sl, [r4, #2]
    b470:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    b474:	f000 8082 	beq.w	b57c <nrfx_spim_init+0x1a4>
    return pin_number >> 5;
    b478:	ea4f 135a 	mov.w	r3, sl, lsr #5
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg(miso_pin,
    b47c:	7ba1      	ldrb	r1, [r4, #14]
        case 1: return NRF_P1;
    b47e:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    b480:	f00a 021f 	and.w	r2, sl, #31
        case 1: return NRF_P1;
    b484:	4b46      	ldr	r3, [pc, #280]	; (b5a0 <nrfx_spim_init+0x1c8>)
    reg->PIN_CNF[pin_number] = cnf;
    b486:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
    b48a:	bf18      	it	ne
    b48c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b490:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    b494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
    b498:	78e0      	ldrb	r0, [r4, #3]
    b49a:	f886 0020 	strb.w	r0, [r6, #32]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    b49e:	28ff      	cmp	r0, #255	; 0xff
    b4a0:	d020      	beq.n	b4e4 <nrfx_spim_init+0x10c>
    {
        if (p_config->ss_active_high)
    b4a2:	7923      	ldrb	r3, [r4, #4]
    b4a4:	2b00      	cmp	r3, #0
    b4a6:	d06c      	beq.n	b582 <nrfx_spim_init+0x1aa>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
    b4a8:	f7ff ff66 	bl	b378 <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg(p_config->ss_pin,
    b4ac:	78e3      	ldrb	r3, [r4, #3]
    return pin_number >> 5;
    b4ae:	095a      	lsrs	r2, r3, #5
        case 1: return NRF_P1;
    b4b0:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    b4b2:	f003 011f 	and.w	r1, r3, #31
        case 1: return NRF_P1;
    b4b6:	4a3a      	ldr	r2, [pc, #232]	; (b5a0 <nrfx_spim_init+0x1c8>)
    reg->PIN_CNF[pin_number] = cnf;
    b4b8:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    b4bc:	bf18      	it	ne
    b4be:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b4c2:	f045 0003 	orr.w	r0, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    b4c6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
                     NRF_GPIO_PIN_INPUT_DISCONNECT,
                     NRF_GPIO_PIN_NOPULL,
                     pin_drive,
                     NRF_GPIO_PIN_NOSENSE);
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (p_config->use_hw_ss)
    b4ca:	7c61      	ldrb	r1, [r4, #17]
    b4cc:	7922      	ldrb	r2, [r4, #4]
    b4ce:	b141      	cbz	r1, b4e2 <nrfx_spim_init+0x10a>
        {
            p_cb->use_hw_ss = p_config->use_hw_ss;
    b4d0:	2101      	movs	r1, #1
    b4d2:	77b1      	strb	r1, [r6, #30]
            nrf_spim_csn_configure(p_spim,
    b4d4:	7ca1      	ldrb	r1, [r4, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
    b4d6:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
    b4da:	f8c8 2568 	str.w	r2, [r8, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
    b4de:	f8c8 1564 	str.w	r1, [r8, #1380]	; 0x564
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
    b4e2:	77f2      	strb	r2, [r6, #31]
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // - DCX (optional) - output.
    if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
    b4e4:	7be0      	ldrb	r0, [r4, #15]
    b4e6:	28ff      	cmp	r0, #255	; 0xff
    b4e8:	d012      	beq.n	b510 <nrfx_spim_init+0x138>
    {
        nrf_gpio_pin_set(p_config->dcx_pin);
    b4ea:	f7ff ff65 	bl	b3b8 <nrf_gpio_pin_set>
        nrf_gpio_cfg(p_config->dcx_pin,
    b4ee:	7be3      	ldrb	r3, [r4, #15]
    return pin_number >> 5;
    b4f0:	095a      	lsrs	r2, r3, #5
        case 1: return NRF_P1;
    b4f2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    b4f4:	f003 011f 	and.w	r1, r3, #31
        case 1: return NRF_P1;
    b4f8:	4a29      	ldr	r2, [pc, #164]	; (b5a0 <nrfx_spim_init+0x1c8>)
    reg->PIN_CNF[pin_number] = cnf;
    b4fa:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
    b4fe:	bf18      	it	ne
    b500:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b504:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    b508:	f842 5021 	str.w	r5, [r2, r1, lsl #2]

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
    b50c:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c
                     NRF_GPIO_PIN_NOSENSE);
        nrf_spim_dcx_pin_set(p_spim, p_config->dcx_pin);
    }

    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
    b510:	7c23      	ldrb	r3, [r4, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
    b512:	f8c8 3560 	str.w	r3, [r8, #1376]	; 0x560
#endif

    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    b516:	7823      	ldrb	r3, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
    b518:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    b51c:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.MOSI = mosi_pin;
    b51e:	f8c8 950c 	str.w	r9, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    b522:	f8c8 a510 	str.w	sl, [r8, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
    b526:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    b52a:	7b63      	ldrb	r3, [r4, #13]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    b52c:	7b22      	ldrb	r2, [r4, #12]
    b52e:	3b00      	subs	r3, #0
    b530:	bf18      	it	ne
    b532:	2301      	movne	r3, #1
    switch (spi_mode)
    b534:	2a02      	cmp	r2, #2
    b536:	d027      	beq.n	b588 <nrfx_spim_init+0x1b0>
    b538:	2a03      	cmp	r2, #3
    b53a:	d028      	beq.n	b58e <nrfx_spim_init+0x1b6>
    b53c:	2a01      	cmp	r2, #1
    b53e:	d101      	bne.n	b544 <nrfx_spim_init+0x16c>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    b540:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    b544:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    b548:	79a3      	ldrb	r3, [r4, #6]
    b54a:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    b54e:	2307      	movs	r3, #7
    b550:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    b554:	6833      	ldr	r3, [r6, #0]
    b556:	b123      	cbz	r3, b562 <nrfx_spim_init+0x18a>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    b558:	6838      	ldr	r0, [r7, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    b55a:	f340 3007 	sbfx	r0, r0, #12, #8
    b55e:	f7fb f897 	bl	6690 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    b562:	2300      	movs	r3, #0
    b564:	7773      	strb	r3, [r6, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    b566:	480f      	ldr	r0, [pc, #60]	; (b5a4 <nrfx_spim_init+0x1cc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    b568:	2301      	movs	r3, #1
    b56a:	7733      	strb	r3, [r6, #28]
}
    b56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
    b570:	f7ff ff22 	bl	b3b8 <nrf_gpio_pin_set>
    b574:	e74b      	b.n	b40e <nrfx_spim_init+0x36>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    b576:	f04f 39ff 	mov.w	r9, #4294967295
    b57a:	e777      	b.n	b46c <nrfx_spim_init+0x94>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    b57c:	f04f 3aff 	mov.w	sl, #4294967295
    b580:	e78a      	b.n	b498 <nrfx_spim_init+0xc0>
            nrf_gpio_pin_set(p_config->ss_pin);
    b582:	f7ff ff19 	bl	b3b8 <nrf_gpio_pin_set>
    b586:	e791      	b.n	b4ac <nrfx_spim_init+0xd4>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    b588:	f043 0304 	orr.w	r3, r3, #4
        break;
    b58c:	e7da      	b.n	b544 <nrfx_spim_init+0x16c>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    b58e:	f043 0306 	orr.w	r3, r3, #6
        break;
    b592:	e7d7      	b.n	b544 <nrfx_spim_init+0x16c>
        return err_code;
    b594:	4804      	ldr	r0, [pc, #16]	; (b5a8 <nrfx_spim_init+0x1d0>)
    b596:	e7e9      	b.n	b56c <nrfx_spim_init+0x194>
        return err_code;
    b598:	4804      	ldr	r0, [pc, #16]	; (b5ac <nrfx_spim_init+0x1d4>)
    b59a:	e7e7      	b.n	b56c <nrfx_spim_init+0x194>
    b59c:	20001104 	.word	0x20001104
    b5a0:	50000300 	.word	0x50000300
    b5a4:	0bad0000 	.word	0x0bad0000
    b5a8:	0bad0005 	.word	0x0bad0005
    b5ac:	0bad0003 	.word	0x0bad0003

0000b5b0 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    b5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b5b4:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    b5b6:	4d27      	ldr	r5, [pc, #156]	; (b654 <nrfx_spim_uninit+0xa4>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    b5b8:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    b5ba:	2324      	movs	r3, #36	; 0x24
    b5bc:	4373      	muls	r3, r6
    b5be:	eb05 0803 	add.w	r8, r5, r3
    b5c2:	58eb      	ldr	r3, [r5, r3]
{
    b5c4:	4607      	mov	r7, r0
    if (p_cb->handler)
    b5c6:	b1db      	cbz	r3, b600 <nrfx_spim_uninit+0x50>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    b5c8:	f344 3007 	sbfx	r0, r4, #12, #8
    b5cc:	f7fb f870 	bl	66b0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    b5d0:	4b21      	ldr	r3, [pc, #132]	; (b658 <nrfx_spim_uninit+0xa8>)
    b5d2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    b5d6:	f898 301d 	ldrb.w	r3, [r8, #29]
    b5da:	b18b      	cbz	r3, b600 <nrfx_spim_uninit+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b5dc:	2301      	movs	r3, #1
    b5de:	6163      	str	r3, [r4, #20]
    b5e0:	f04f 0864 	mov.w	r8, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b5e4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    b5e8:	b92b      	cbnz	r3, b5f6 <nrfx_spim_uninit+0x46>
    b5ea:	2001      	movs	r0, #1
    b5ec:	f012 fa17 	bl	1da1e <nrfx_busy_wait>
    b5f0:	f1b8 0801 	subs.w	r8, r8, #1
    b5f4:	d1f6      	bne.n	b5e4 <nrfx_spim_uninit+0x34>
    p_cb->transfer_in_progress = false;
    b5f6:	2324      	movs	r3, #36	; 0x24
    b5f8:	fb03 5306 	mla	r3, r3, r6, r5
    b5fc:	2200      	movs	r2, #0
    b5fe:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    b600:	2300      	movs	r3, #0
    b602:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return p_reg->PSEL.SCK;
    b606:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
        }
    }

    nrf_spim_disable(p_spim);

    spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    b60a:	f012 fa73 	bl	1daf4 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    b60e:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
    spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    b612:	f012 fa6f 	bl	1daf4 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    b616:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
    spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    b61a:	f012 fa6b 	bl	1daf4 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
    b61e:	793b      	ldrb	r3, [r7, #4]
    b620:	b91b      	cbnz	r3, b62a <nrfx_spim_uninit+0x7a>
    return p_reg->PSELDCX;
    b622:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
    {
        spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
    b626:	f012 fa65 	bl	1daf4 <spim_pin_uninit>
    }
#endif
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    b62a:	2324      	movs	r3, #36	; 0x24
    b62c:	fb03 5306 	mla	r3, r3, r6, r5
    b630:	f893 0020 	ldrb.w	r0, [r3, #32]
    b634:	28ff      	cmp	r0, #255	; 0xff
    b636:	d001      	beq.n	b63c <nrfx_spim_uninit+0x8c>
    {
        nrf_gpio_cfg_default(p_cb->ss_pin);
    b638:	f7ff feae 	bl	b398 <nrf_gpio_cfg_default>
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_195)
    if (p_spim == NRF_SPIM3)
    b63c:	4b07      	ldr	r3, [pc, #28]	; (b65c <nrfx_spim_uninit+0xac>)
    b63e:	429c      	cmp	r4, r3
    {
        *(volatile uint32_t *)0x4002F004 = 1;
    b640:	bf04      	itt	eq
    b642:	2201      	moveq	r2, #1
    b644:	605a      	streq	r2, [r3, #4]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    b646:	2324      	movs	r3, #36	; 0x24
    b648:	fb03 5506 	mla	r5, r3, r6, r5
    b64c:	2300      	movs	r3, #0
    b64e:	772b      	strb	r3, [r5, #28]
}
    b650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b654:	20001104 	.word	0x20001104
    b658:	00080152 	.word	0x00080152
    b65c:	4002f000 	.word	0x4002f000

0000b660 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    b664:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    b666:	4f44      	ldr	r7, [pc, #272]	; (b778 <nrfx_spim_xfer+0x118>)
    b668:	2324      	movs	r3, #36	; 0x24
    b66a:	4373      	muls	r3, r6
{
    b66c:	4614      	mov	r4, r2
    if (p_cb->transfer_in_progress)
    b66e:	18fa      	adds	r2, r7, r3
{
    b670:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    b672:	7f51      	ldrb	r1, [r2, #29]
{
    b674:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
    b676:	2900      	cmp	r1, #0
    b678:	d17c      	bne.n	b774 <nrfx_spim_xfer+0x114>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    b67a:	58fb      	ldr	r3, [r7, r3]
    b67c:	b123      	cbz	r3, b688 <nrfx_spim_xfer+0x28>
    b67e:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    b682:	bf04      	itt	eq
    b684:	2301      	moveq	r3, #1
    b686:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    b688:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    b68c:	f04f 0c24 	mov.w	ip, #36	; 0x24
    b690:	fb0c 7c06 	mla	ip, ip, r6, r7
    b694:	f10c 0e0c 	add.w	lr, ip, #12
    b698:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    b69c:	f89c 0020 	ldrb.w	r0, [ip, #32]
    b6a0:	28ff      	cmp	r0, #255	; 0xff
    b6a2:	d007      	beq.n	b6b4 <nrfx_spim_xfer+0x54>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
    b6a4:	f89c 301e 	ldrb.w	r3, [ip, #30]
    b6a8:	b923      	cbnz	r3, b6b4 <nrfx_spim_xfer+0x54>
#endif
        {
            if (p_cb->ss_active_high)
    b6aa:	f89c 301f 	ldrb.w	r3, [ip, #31]
    b6ae:	b1bb      	cbz	r3, b6e0 <nrfx_spim_xfer+0x80>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
    b6b0:	f7ff fe82 	bl	b3b8 <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    b6b4:	6829      	ldr	r1, [r5, #0]
    b6b6:	b121      	cbz	r1, b6c2 <nrfx_spim_xfer+0x62>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    b6b8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    b6bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b6c0:	d106      	bne.n	b6d0 <nrfx_spim_xfer+0x70>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    b6c2:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    b6c4:	b17a      	cbz	r2, b6e6 <nrfx_spim_xfer+0x86>
    b6c6:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    b6ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    b6ce:	d00a      	beq.n	b6e6 <nrfx_spim_xfer+0x86>
        p_cb->transfer_in_progress = false;
    b6d0:	2324      	movs	r3, #36	; 0x24
    b6d2:	fb03 7606 	mla	r6, r3, r6, r7
        return err_code;
    b6d6:	4829      	ldr	r0, [pc, #164]	; (b77c <nrfx_spim_xfer+0x11c>)
        p_cb->transfer_in_progress = false;
    b6d8:	2300      	movs	r3, #0
    b6da:	7773      	strb	r3, [r6, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    b6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
    b6e0:	f7ff fe4a 	bl	b378 <nrf_gpio_pin_clear>
    b6e4:	e7e6      	b.n	b6b4 <nrfx_spim_xfer+0x54>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    b6e6:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    b6ea:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b6ec:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    b6f0:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    b6f2:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b6f6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b6fa:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    b6fc:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b700:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    b704:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    b708:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    b70c:	bf18      	it	ne
    b70e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    b710:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    b714:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    b718:	bf18      	it	ne
    b71a:	2201      	movne	r2, #1
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    b71c:	f014 0108 	ands.w	r1, r4, #8
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    b720:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b724:	bf04      	itt	eq
    b726:	2201      	moveq	r2, #1
    b728:	611a      	streq	r2, [r3, #16]
    if (!p_cb->handler)
    b72a:	2224      	movs	r2, #36	; 0x24
    b72c:	4372      	muls	r2, r6
    b72e:	58ba      	ldr	r2, [r7, r2]
    b730:	b9b2      	cbnz	r2, b760 <nrfx_spim_xfer+0x100>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    b732:	b919      	cbnz	r1, b73c <nrfx_spim_xfer+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b734:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    b738:	2a00      	cmp	r2, #0
    b73a:	d0fb      	beq.n	b734 <nrfx_spim_xfer+0xd4>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    b73c:	2324      	movs	r3, #36	; 0x24
    b73e:	fb03 7606 	mla	r6, r3, r6, r7
    b742:	f896 0020 	ldrb.w	r0, [r6, #32]
    b746:	28ff      	cmp	r0, #255	; 0xff
    b748:	d005      	beq.n	b756 <nrfx_spim_xfer+0xf6>
            if (!p_cb->use_hw_ss)
    b74a:	7fb3      	ldrb	r3, [r6, #30]
    b74c:	b91b      	cbnz	r3, b756 <nrfx_spim_xfer+0xf6>
                if (p_cb->ss_active_high)
    b74e:	7ff3      	ldrb	r3, [r6, #31]
    b750:	b11b      	cbz	r3, b75a <nrfx_spim_xfer+0xfa>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
    b752:	f7ff fe11 	bl	b378 <nrf_gpio_pin_clear>
    return err_code;
    b756:	480a      	ldr	r0, [pc, #40]	; (b780 <nrfx_spim_xfer+0x120>)
    b758:	e7c0      	b.n	b6dc <nrfx_spim_xfer+0x7c>
                    nrf_gpio_pin_set(p_cb->ss_pin);
    b75a:	f7ff fe2d 	bl	b3b8 <nrf_gpio_pin_set>
    b75e:	e7fa      	b.n	b756 <nrfx_spim_xfer+0xf6>
    if (!enable)
    b760:	f014 0f04 	tst.w	r4, #4
    b764:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
    b768:	bf14      	ite	ne
    b76a:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    b76e:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    b772:	e7f0      	b.n	b756 <nrfx_spim_xfer+0xf6>
        return err_code;
    b774:	4803      	ldr	r0, [pc, #12]	; (b784 <nrfx_spim_xfer+0x124>)
    b776:	e7b1      	b.n	b6dc <nrfx_spim_xfer+0x7c>
    b778:	20001104 	.word	0x20001104
    b77c:	0bad000a 	.word	0x0bad000a
    b780:	0bad0000 	.word	0x0bad0000
    b784:	0bad000b 	.word	0x0bad000b

0000b788 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b788:	4b10      	ldr	r3, [pc, #64]	; (b7cc <nrfx_spim_3_irq_handler+0x44>)
    b78a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
    b78e:	b510      	push	{r4, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    b790:	b1da      	cbz	r2, b7ca <nrfx_spim_3_irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    b792:	4c0f      	ldr	r4, [pc, #60]	; (b7d0 <nrfx_spim_3_irq_handler+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b794:	2200      	movs	r2, #0
    b796:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    b79a:	f894 0020 	ldrb.w	r0, [r4, #32]
    b79e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    b7a2:	28ff      	cmp	r0, #255	; 0xff
    b7a4:	d005      	beq.n	b7b2 <nrfx_spim_3_irq_handler+0x2a>
        if (!p_cb->use_hw_ss)
    b7a6:	7fa3      	ldrb	r3, [r4, #30]
    b7a8:	b91b      	cbnz	r3, b7b2 <nrfx_spim_3_irq_handler+0x2a>
            if (p_cb->ss_active_high)
    b7aa:	7fe3      	ldrb	r3, [r4, #31]
    b7ac:	b153      	cbz	r3, b7c4 <nrfx_spim_3_irq_handler+0x3c>
                nrf_gpio_pin_clear(p_cb->ss_pin);
    b7ae:	f7ff fde3 	bl	b378 <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
    b7b2:	2300      	movs	r3, #0
    b7b4:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    b7b6:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b7b8:	4806      	ldr	r0, [pc, #24]	; (b7d4 <nrfx_spim_3_irq_handler+0x4c>)
    b7ba:	e9d4 3100 	ldrd	r3, r1, [r4]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
    b7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    b7c2:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
    b7c4:	f7ff fdf8 	bl	b3b8 <nrf_gpio_pin_set>
    b7c8:	e7f3      	b.n	b7b2 <nrfx_spim_3_irq_handler+0x2a>
}
    b7ca:	bd10      	pop	{r4, pc}
    b7cc:	4002f000 	.word	0x4002f000
    b7d0:	20001104 	.word	0x20001104
    b7d4:	2000110c 	.word	0x2000110c

0000b7d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    b7d8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    b7da:	4c11      	ldr	r4, [pc, #68]	; (b820 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    b7dc:	4a11      	ldr	r2, [pc, #68]	; (b824 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    b7de:	4912      	ldr	r1, [pc, #72]	; (b828 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    b7e0:	2303      	movs	r3, #3
    b7e2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    b7e4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    b7e6:	4b11      	ldr	r3, [pc, #68]	; (b82c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    b7e8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    b7ea:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    b7ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b7f0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    b7f2:	2300      	movs	r3, #0
    b7f4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    b7f6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    b7f8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    b7fa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    b7fc:	4a0c      	ldr	r2, [pc, #48]	; (b830 <_DoInit+0x58>)
    b7fe:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    b800:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    b802:	2210      	movs	r2, #16
    b804:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    b806:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    b808:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    b80a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    b80c:	f012 fd66 	bl	1e2dc <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    b810:	4908      	ldr	r1, [pc, #32]	; (b834 <_DoInit+0x5c>)
    b812:	4620      	mov	r0, r4
    b814:	f012 fd62 	bl	1e2dc <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    b818:	2320      	movs	r3, #32
    b81a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    b81c:	bd10      	pop	{r4, pc}
    b81e:	bf00      	nop
    b820:	20001128 	.word	0x20001128
    b824:	0002045b 	.word	0x0002045b
    b828:	00020464 	.word	0x00020464
    b82c:	20001e9f 	.word	0x20001e9f
    b830:	20001e8f 	.word	0x20001e8f
    b834:	00020468 	.word	0x00020468

0000b838 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    b838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    b83c:	4f23      	ldr	r7, [pc, #140]	; (b8cc <SEGGER_RTT_WriteSkipNoLock+0x94>)
    b83e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    b842:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    b844:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    b848:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    b84a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    b84c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    b84e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    b850:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    b852:	d834      	bhi.n	b8be <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    b854:	f8d2 a020 	ldr.w	sl, [r2, #32]
    b858:	ebaa 0905 	sub.w	r9, sl, r5
    b85c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    b860:	4294      	cmp	r4, r2
    b862:	d811      	bhi.n	b888 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b864:	f04f 0918 	mov.w	r9, #24
    b868:	fb06 9309 	mla	r3, r6, r9, r9
    b86c:	443b      	add	r3, r7
    b86e:	4622      	mov	r2, r4
    b870:	6858      	ldr	r0, [r3, #4]
    b872:	4641      	mov	r1, r8
    b874:	4428      	add	r0, r5
    b876:	f012 fcc4 	bl	1e202 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    b87a:	fb09 7606 	mla	r6, r9, r6, r7
    b87e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    b880:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    b882:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    b884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    b888:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    b88a:	429c      	cmp	r4, r3
    b88c:	d81b      	bhi.n	b8c6 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b88e:	fb00 bb0b 	mla	fp, r0, fp, fp
    b892:	44bb      	add	fp, r7
    b894:	464a      	mov	r2, r9
    b896:	f8db 0004 	ldr.w	r0, [fp, #4]
    b89a:	442c      	add	r4, r5
    b89c:	4428      	add	r0, r5
    b89e:	f012 fcb0 	bl	1e202 <memcpy>
      if (NumBytes) {
    b8a2:	ebb4 040a 	subs.w	r4, r4, sl
    b8a6:	d006      	beq.n	b8b6 <SEGGER_RTT_WriteSkipNoLock+0x7e>
    b8a8:	f8db 0004 	ldr.w	r0, [fp, #4]
    b8ac:	4622      	mov	r2, r4
    b8ae:	eb08 0109 	add.w	r1, r8, r9
    b8b2:	f012 fca6 	bl	1e202 <memcpy>
      pRing->WrOff = NumBytes;
    b8b6:	2018      	movs	r0, #24
    b8b8:	fb00 7606 	mla	r6, r0, r6, r7
    b8bc:	e7e0      	b.n	b880 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    b8be:	3b01      	subs	r3, #1
    b8c0:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    b8c2:	42a3      	cmp	r3, r4
    b8c4:	d2ce      	bcs.n	b864 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    b8c6:	2000      	movs	r0, #0
    b8c8:	e7dc      	b.n	b884 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    b8ca:	bf00      	nop
    b8cc:	20001128 	.word	0x20001128

0000b8d0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    b8d0:	4b03      	ldr	r3, [pc, #12]	; (b8e0 <SEGGER_RTT_HasDataUp+0x10>)
    b8d2:	2218      	movs	r2, #24
    b8d4:	fb02 3300 	mla	r3, r2, r0, r3
    b8d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    b8da:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    b8dc:	1a80      	subs	r0, r0, r2
    b8de:	4770      	bx	lr
    b8e0:	20001128 	.word	0x20001128

0000b8e4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b8e4:	4b0e      	ldr	r3, [pc, #56]	; (b920 <z_sys_init_run_level+0x3c>)
{
    b8e6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b8e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b8ec:	3001      	adds	r0, #1
    b8ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    b8f2:	42a6      	cmp	r6, r4
    b8f4:	d800      	bhi.n	b8f8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    b8f6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    b8f8:	e9d4 3500 	ldrd	r3, r5, [r4]
    b8fc:	4628      	mov	r0, r5
    b8fe:	4798      	blx	r3
		if (dev != NULL) {
    b900:	b165      	cbz	r5, b91c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    b902:	68eb      	ldr	r3, [r5, #12]
    b904:	b130      	cbz	r0, b914 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    b906:	2800      	cmp	r0, #0
    b908:	bfb8      	it	lt
    b90a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    b90c:	28ff      	cmp	r0, #255	; 0xff
    b90e:	bfa8      	it	ge
    b910:	20ff      	movge	r0, #255	; 0xff
    b912:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    b914:	785a      	ldrb	r2, [r3, #1]
    b916:	f042 0201 	orr.w	r2, r2, #1
    b91a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b91c:	3408      	adds	r4, #8
    b91e:	e7e8      	b.n	b8f2 <z_sys_init_run_level+0xe>
    b920:	0001f414 	.word	0x0001f414

0000b924 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    b924:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    b926:	4605      	mov	r5, r0
    b928:	b910      	cbnz	r0, b930 <z_impl_device_get_binding+0xc>
		return NULL;
    b92a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    b92c:	4620      	mov	r0, r4
    b92e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    b930:	7803      	ldrb	r3, [r0, #0]
    b932:	2b00      	cmp	r3, #0
    b934:	d0f9      	beq.n	b92a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    b936:	4a0f      	ldr	r2, [pc, #60]	; (b974 <z_impl_device_get_binding+0x50>)
    b938:	4c0f      	ldr	r4, [pc, #60]	; (b978 <z_impl_device_get_binding+0x54>)
    b93a:	4616      	mov	r6, r2
    b93c:	4294      	cmp	r4, r2
    b93e:	d108      	bne.n	b952 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    b940:	4c0d      	ldr	r4, [pc, #52]	; (b978 <z_impl_device_get_binding+0x54>)
    b942:	42b4      	cmp	r4, r6
    b944:	d0f1      	beq.n	b92a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    b946:	4620      	mov	r0, r4
    b948:	f012 f8e1 	bl	1db0e <z_device_ready>
    b94c:	b950      	cbnz	r0, b964 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    b94e:	3418      	adds	r4, #24
    b950:	e7f7      	b.n	b942 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    b952:	4620      	mov	r0, r4
    b954:	f012 f8db 	bl	1db0e <z_device_ready>
    b958:	b110      	cbz	r0, b960 <z_impl_device_get_binding+0x3c>
    b95a:	6823      	ldr	r3, [r4, #0]
    b95c:	42ab      	cmp	r3, r5
    b95e:	d0e5      	beq.n	b92c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    b960:	3418      	adds	r4, #24
    b962:	e7eb      	b.n	b93c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    b964:	6821      	ldr	r1, [r4, #0]
    b966:	4628      	mov	r0, r5
    b968:	f7f5 fa20 	bl	dac <strcmp>
    b96c:	2800      	cmp	r0, #0
    b96e:	d1ee      	bne.n	b94e <z_impl_device_get_binding+0x2a>
    b970:	e7dc      	b.n	b92c <z_impl_device_get_binding+0x8>
    b972:	bf00      	nop
    b974:	0001e890 	.word	0x0001e890
    b978:	0001e7b8 	.word	0x0001e7b8

0000b97c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b97c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b980:	4606      	mov	r6, r0
    b982:	460f      	mov	r7, r1
	__asm__ volatile(
    b984:	f04f 0320 	mov.w	r3, #32
    b988:	f3ef 8811 	mrs	r8, BASEPRI
    b98c:	f383 8812 	msr	BASEPRI_MAX, r3
    b990:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    b994:	f000 ff7c 	bl	c890 <z_impl_z_current_get>
    b998:	4c1f      	ldr	r4, [pc, #124]	; (ba18 <z_fatal_error+0x9c>)
    b99a:	4b20      	ldr	r3, [pc, #128]	; (ba1c <z_fatal_error+0xa0>)
    b99c:	1ae4      	subs	r4, r4, r3
    b99e:	2e04      	cmp	r6, #4
    b9a0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    b9a4:	bf96      	itet	ls
    b9a6:	4a1e      	ldrls	r2, [pc, #120]	; (ba20 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    b9a8:	4a1e      	ldrhi	r2, [pc, #120]	; (ba24 <z_fatal_error+0xa8>)
    b9aa:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    b9ae:	01a4      	lsls	r4, r4, #6
    b9b0:	f044 0301 	orr.w	r3, r4, #1
    b9b4:	4605      	mov	r5, r0
    b9b6:	f8ad 3000 	strh.w	r3, [sp]
    b9ba:	481b      	ldr	r0, [pc, #108]	; (ba28 <z_fatal_error+0xac>)
    b9bc:	2300      	movs	r3, #0
    b9be:	4631      	mov	r1, r6
    b9c0:	f010 fffa 	bl	1c9b8 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    b9c4:	b147      	cbz	r7, b9d8 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    b9c6:	69fb      	ldr	r3, [r7, #28]
    b9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    b9cc:	b123      	cbz	r3, b9d8 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    b9ce:	4817      	ldr	r0, [pc, #92]	; (ba2c <z_fatal_error+0xb0>)
    b9d0:	f044 0101 	orr.w	r1, r4, #1
    b9d4:	f010 ffb6 	bl	1c944 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    b9d8:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    b9dc:	b12d      	cbz	r5, b9ea <z_fatal_error+0x6e>
    b9de:	4628      	mov	r0, r5
    b9e0:	f012 f8ec 	bl	1dbbc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    b9e4:	b108      	cbz	r0, b9ea <z_fatal_error+0x6e>
    b9e6:	7803      	ldrb	r3, [r0, #0]
    b9e8:	b903      	cbnz	r3, b9ec <z_fatal_error+0x70>
		thread_name = "unknown";
    b9ea:	4811      	ldr	r0, [pc, #68]	; (ba30 <z_fatal_error+0xb4>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    b9ec:	f7f9 ff92 	bl	5914 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
    b9f0:	4623      	mov	r3, r4
    b9f2:	4602      	mov	r2, r0
    b9f4:	4629      	mov	r1, r5
    b9f6:	480f      	ldr	r0, [pc, #60]	; (ba34 <z_fatal_error+0xb8>)
    b9f8:	f010 ffc5 	bl	1c986 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    b9fc:	4639      	mov	r1, r7
    b9fe:	4630      	mov	r0, r6
    ba00:	f7fe ff36 	bl	a870 <k_sys_fatal_error_handler>
	__asm__ volatile(
    ba04:	f388 8811 	msr	BASEPRI, r8
    ba08:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    ba0c:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    ba0e:	b002      	add	sp, #8
    ba10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ba14:	f7fb ba3c 	b.w	6e90 <z_impl_k_thread_abort>
    ba18:	0001ea30 	.word	0x0001ea30
    ba1c:	0001ea10 	.word	0x0001ea10
    ba20:	0001f42c 	.word	0x0001f42c
    ba24:	0002046f 	.word	0x0002046f
    ba28:	00020485 	.word	0x00020485
    ba2c:	000204ad 	.word	0x000204ad
    ba30:	0002047d 	.word	0x0002047d
    ba34:	000204ce 	.word	0x000204ce

0000ba38 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    ba38:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    ba3a:	2300      	movs	r3, #0
{
    ba3c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    ba3e:	2201      	movs	r2, #1
    ba40:	e9cd 2304 	strd	r2, r3, [sp, #16]
    ba44:	220f      	movs	r2, #15
    ba46:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    ba4a:	4c0d      	ldr	r4, [pc, #52]	; (ba80 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    ba4c:	4a0d      	ldr	r2, [pc, #52]	; (ba84 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    ba4e:	9301      	str	r3, [sp, #4]
    ba50:	490d      	ldr	r1, [pc, #52]	; (ba88 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    ba52:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    ba54:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    ba58:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    ba5c:	f44f 75b0 	mov.w	r5, #352	; 0x160
    ba60:	9300      	str	r3, [sp, #0]
    ba62:	fb05 1100 	mla	r1, r5, r0, r1
    ba66:	4b09      	ldr	r3, [pc, #36]	; (ba8c <init_idle_thread+0x54>)
    ba68:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ba6c:	4620      	mov	r0, r4
    ba6e:	f000 f8f9 	bl	bc64 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba72:	7b63      	ldrb	r3, [r4, #13]
    ba74:	f023 0304 	bic.w	r3, r3, #4
    ba78:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    ba7a:	b007      	add	sp, #28
    ba7c:	bd30      	pop	{r4, r5, pc}
    ba7e:	bf00      	nop
    ba80:	20000488 	.word	0x20000488
    ba84:	200011d0 	.word	0x200011d0
    ba88:	200037a0 	.word	0x200037a0
    ba8c:	0000bddd 	.word	0x0000bddd

0000ba90 <bg_thread_main>:
{
    ba90:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    ba92:	4b0a      	ldr	r3, [pc, #40]	; (babc <bg_thread_main+0x2c>)
    ba94:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ba96:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    ba98:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    ba9a:	f7ff ff23 	bl	b8e4 <z_sys_init_run_level>
	boot_banner();
    ba9e:	f001 fa09 	bl	ceb4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    baa2:	2003      	movs	r0, #3
    baa4:	f7ff ff1e 	bl	b8e4 <z_sys_init_run_level>
	z_init_static_threads();
    baa8:	f000 f93a 	bl	bd20 <z_init_static_threads>
	main();
    baac:	f7f5 fd38 	bl	1520 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    bab0:	4a03      	ldr	r2, [pc, #12]	; (bac0 <bg_thread_main+0x30>)
    bab2:	7b13      	ldrb	r3, [r2, #12]
    bab4:	f023 0301 	bic.w	r3, r3, #1
    bab8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    baba:	bd08      	pop	{r3, pc}
    babc:	2000229f 	.word	0x2000229f
    bac0:	20000508 	.word	0x20000508

0000bac4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    bac4:	4802      	ldr	r0, [pc, #8]	; (bad0 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
    bac6:	4a03      	ldr	r2, [pc, #12]	; (bad4 <z_bss_zero+0x10>)
    bac8:	2100      	movs	r1, #0
    baca:	1a12      	subs	r2, r2, r0
    bacc:	f012 bbd4 	b.w	1e278 <memset>
    bad0:	20000360 	.word	0x20000360
    bad4:	20002460 	.word	0x20002460

0000bad8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    bad8:	b580      	push	{r7, lr}
    bada:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    badc:	f7f9 fe5a 	bl	5794 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    bae0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; bbb8 <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    bae4:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    bae8:	4d2d      	ldr	r5, [pc, #180]	; (bba0 <z_cstart+0xc8>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    baea:	4e2e      	ldr	r6, [pc, #184]	; (bba4 <z_cstart+0xcc>)
    baec:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    baee:	f8df 90cc 	ldr.w	r9, [pc, #204]	; bbbc <z_cstart+0xe4>
    baf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    baf6:	2400      	movs	r4, #0
    baf8:	616b      	str	r3, [r5, #20]
    bafa:	23e0      	movs	r3, #224	; 0xe0
    bafc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    bb00:	77ec      	strb	r4, [r5, #31]
    bb02:	762c      	strb	r4, [r5, #24]
    bb04:	766c      	strb	r4, [r5, #25]
    bb06:	76ac      	strb	r4, [r5, #26]
    bb08:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    bb0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bb0e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    bb12:	626b      	str	r3, [r5, #36]	; 0x24
    bb14:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    bb18:	f7fb f930 	bl	6d7c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    bb1c:	f7fa fd62 	bl	65e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    bb20:	f04f 33ff 	mov.w	r3, #4294967295
    bb24:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    bb26:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    bb28:	f7fb fa6e 	bl	7008 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    bb2c:	f7fb f9c2 	bl	6eb4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    bb30:	f240 1301 	movw	r3, #257	; 0x101
    bb34:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    bb38:	ab06      	add	r3, sp, #24
    bb3a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    bb3c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    bb40:	f011 ffe4 	bl	1db0c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    bb44:	4620      	mov	r0, r4
    bb46:	f7ff fecd 	bl	b8e4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    bb4a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    bb4c:	4d16      	ldr	r5, [pc, #88]	; (bba8 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    bb4e:	f7ff fec9 	bl	b8e4 <z_sys_init_run_level>
	z_sched_init();
    bb52:	f000 fde9 	bl	c728 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    bb56:	4b15      	ldr	r3, [pc, #84]	; (bbac <z_cstart+0xd4>)
    bb58:	9305      	str	r3, [sp, #20]
    bb5a:	2301      	movs	r3, #1
    bb5c:	4914      	ldr	r1, [pc, #80]	; (bbb0 <z_cstart+0xd8>)
    bb5e:	9400      	str	r4, [sp, #0]
    bb60:	e9cd 4303 	strd	r4, r3, [sp, #12]
    bb64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    bb68:	464b      	mov	r3, r9
    bb6a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    bb6e:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    bb70:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    bb72:	f000 f877 	bl	bc64 <z_setup_new_thread>
    bb76:	7b6a      	ldrb	r2, [r5, #13]
    bb78:	f022 0204 	bic.w	r2, r2, #4
    bb7c:	736a      	strb	r2, [r5, #13]
    bb7e:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    bb80:	4628      	mov	r0, r5
    bb82:	f012 f8c9 	bl	1dd18 <z_ready_thread>
		init_idle_thread(i);
    bb86:	4620      	mov	r0, r4
    bb88:	f7ff ff56 	bl	ba38 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    bb8c:	4b09      	ldr	r3, [pc, #36]	; (bbb4 <z_cstart+0xdc>)
    bb8e:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    bb90:	464a      	mov	r2, r9
    bb92:	4639      	mov	r1, r7
    bb94:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    bb96:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    bb98:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    bb9c:	f7fa fe6c 	bl	6878 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    bba0:	e000ed00 	.word	0xe000ed00
    bba4:	200011d0 	.word	0x200011d0
    bba8:	20000508 	.word	0x20000508
    bbac:	00020530 	.word	0x00020530
    bbb0:	20002780 	.word	0x20002780
    bbb4:	20000488 	.word	0x20000488
    bbb8:	20004120 	.word	0x20004120
    bbbc:	0000ba91 	.word	0x0000ba91

0000bbc0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    bbc0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    bbc2:	4b0e      	ldr	r3, [pc, #56]	; (bbfc <init_mem_slab_module+0x3c>)
    bbc4:	4c0e      	ldr	r4, [pc, #56]	; (bc00 <init_mem_slab_module+0x40>)
    bbc6:	42a3      	cmp	r3, r4
    bbc8:	d301      	bcc.n	bbce <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    bbca:	2000      	movs	r0, #0
	return rc;
}
    bbcc:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    bbce:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    bbd2:	ea41 0200 	orr.w	r2, r1, r0
    bbd6:	f012 0203 	ands.w	r2, r2, #3
    bbda:	d10b      	bne.n	bbf4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    bbdc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    bbde:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    bbe0:	42aa      	cmp	r2, r5
    bbe2:	d101      	bne.n	bbe8 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    bbe4:	331c      	adds	r3, #28
    bbe6:	e7ee      	b.n	bbc6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    bbe8:	695e      	ldr	r6, [r3, #20]
    bbea:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    bbec:	3201      	adds	r2, #1
		slab->free_list = p;
    bbee:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    bbf0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    bbf2:	e7f5      	b.n	bbe0 <init_mem_slab_module+0x20>
		return -EINVAL;
    bbf4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    bbf8:	e7e8      	b.n	bbcc <init_mem_slab_module+0xc>
    bbfa:	bf00      	nop
    bbfc:	200002d0 	.word	0x200002d0
    bc00:	200002d0 	.word	0x200002d0

0000bc04 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    bc04:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    bc06:	460c      	mov	r4, r1
    bc08:	4616      	mov	r6, r2
    bc0a:	461f      	mov	r7, r3
	__asm__ volatile(
    bc0c:	f04f 0320 	mov.w	r3, #32
    bc10:	f3ef 8111 	mrs	r1, BASEPRI
    bc14:	f383 8812 	msr	BASEPRI_MAX, r3
    bc18:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    bc1c:	6943      	ldr	r3, [r0, #20]
    bc1e:	b15b      	cbz	r3, bc38 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    bc20:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    bc22:	681b      	ldr	r3, [r3, #0]
    bc24:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    bc26:	6983      	ldr	r3, [r0, #24]
    bc28:	3301      	adds	r3, #1
    bc2a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    bc2c:	2000      	movs	r0, #0
	__asm__ volatile(
    bc2e:	f381 8811 	msr	BASEPRI, r1
    bc32:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    bc36:	e011      	b.n	bc5c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    bc38:	ea56 0207 	orrs.w	r2, r6, r7
    bc3c:	d103      	bne.n	bc46 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    bc3e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    bc40:	f06f 000b 	mvn.w	r0, #11
    bc44:	e7f3      	b.n	bc2e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    bc46:	4602      	mov	r2, r0
    bc48:	e9cd 6700 	strd	r6, r7, [sp]
    bc4c:	3008      	adds	r0, #8
    bc4e:	f000 fcbd 	bl	c5cc <z_pend_curr>
		if (result == 0) {
    bc52:	b918      	cbnz	r0, bc5c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    bc54:	4b02      	ldr	r3, [pc, #8]	; (bc60 <k_mem_slab_alloc+0x5c>)
    bc56:	689b      	ldr	r3, [r3, #8]
    bc58:	695b      	ldr	r3, [r3, #20]
    bc5a:	6023      	str	r3, [r4, #0]
}
    bc5c:	b002      	add	sp, #8
    bc5e:	bdd0      	pop	{r4, r6, r7, pc}
    bc60:	200011d0 	.word	0x200011d0

0000bc64 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    bc64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    bc68:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    bc6a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    bc6c:	2604      	movs	r6, #4
    bc6e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    bc70:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    bc72:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    bc74:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    bc78:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bc7a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    bc7c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    bc80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    bc82:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bc84:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    bc88:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    bc8a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    bc8e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    bc92:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    bc94:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    bc96:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bc98:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    bc9c:	9202      	str	r2, [sp, #8]
    bc9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bca0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    bca2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    bca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bca6:	9200      	str	r2, [sp, #0]
    bca8:	4642      	mov	r2, r8
{
    bcaa:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    bcac:	f7fa fdae 	bl	680c <arch_new_thread>
	if (!_current) {
    bcb0:	4b04      	ldr	r3, [pc, #16]	; (bcc4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    bcb2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    bcb4:	689b      	ldr	r3, [r3, #8]
    bcb6:	b103      	cbz	r3, bcba <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    bcb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    bcba:	6763      	str	r3, [r4, #116]	; 0x74
}
    bcbc:	4640      	mov	r0, r8
    bcbe:	b004      	add	sp, #16
    bcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcc4:	200011d0 	.word	0x200011d0

0000bcc8 <z_impl_k_thread_create>:
{
    bcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcca:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bccc:	2500      	movs	r5, #0
    bcce:	9505      	str	r5, [sp, #20]
    bcd0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    bcd2:	9504      	str	r5, [sp, #16]
    bcd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    bcd6:	9503      	str	r5, [sp, #12]
    bcd8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    bcda:	9502      	str	r5, [sp, #8]
{
    bcdc:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bce0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    bce2:	9501      	str	r5, [sp, #4]
    bce4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    bce6:	9500      	str	r5, [sp, #0]
{
    bce8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    bcea:	f7ff ffbb 	bl	bc64 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    bcee:	1c7b      	adds	r3, r7, #1
    bcf0:	bf08      	it	eq
    bcf2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    bcf6:	d005      	beq.n	bd04 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    bcf8:	ea56 0307 	orrs.w	r3, r6, r7
    bcfc:	d105      	bne.n	bd0a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    bcfe:	4620      	mov	r0, r4
    bd00:	f000 fc08 	bl	c514 <z_sched_start>
}
    bd04:	4620      	mov	r0, r4
    bd06:	b007      	add	sp, #28
    bd08:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bd0a:	4904      	ldr	r1, [pc, #16]	; (bd1c <z_impl_k_thread_create+0x54>)
    bd0c:	4632      	mov	r2, r6
    bd0e:	463b      	mov	r3, r7
    bd10:	f104 0018 	add.w	r0, r4, #24
    bd14:	f000 fea0 	bl	ca58 <z_add_timeout>
    bd18:	e7f4      	b.n	bd04 <z_impl_k_thread_create+0x3c>
    bd1a:	bf00      	nop
    bd1c:	0001dd39 	.word	0x0001dd39

0000bd20 <z_init_static_threads>:
{
    bd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    bd24:	4e2a      	ldr	r6, [pc, #168]	; (bdd0 <z_init_static_threads+0xb0>)
    bd26:	4d2b      	ldr	r5, [pc, #172]	; (bdd4 <z_init_static_threads+0xb4>)
{
    bd28:	b086      	sub	sp, #24
    bd2a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    bd2c:	42b5      	cmp	r5, r6
    bd2e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    bd32:	d310      	bcc.n	bd56 <z_init_static_threads+0x36>
	k_sched_lock();
    bd34:	f000 fb02 	bl	c33c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    bd38:	4c26      	ldr	r4, [pc, #152]	; (bdd4 <z_init_static_threads+0xb4>)
    bd3a:	f8df a09c 	ldr.w	sl, [pc, #156]	; bdd8 <z_init_static_threads+0xb8>
    bd3e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    bd42:	f240 36e7 	movw	r6, #999	; 0x3e7
    bd46:	2700      	movs	r7, #0
    bd48:	4544      	cmp	r4, r8
    bd4a:	d321      	bcc.n	bd90 <z_init_static_threads+0x70>
}
    bd4c:	b006      	add	sp, #24
    bd4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    bd52:	f000 bccd 	b.w	c6f0 <k_sched_unlock>
		z_setup_new_thread(
    bd56:	f854 3c04 	ldr.w	r3, [r4, #-4]
    bd5a:	9305      	str	r3, [sp, #20]
    bd5c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    bd60:	9304      	str	r3, [sp, #16]
    bd62:	f854 3c14 	ldr.w	r3, [r4, #-20]
    bd66:	9303      	str	r3, [sp, #12]
    bd68:	f854 3c18 	ldr.w	r3, [r4, #-24]
    bd6c:	9302      	str	r3, [sp, #8]
    bd6e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    bd72:	9301      	str	r3, [sp, #4]
    bd74:	f854 3c20 	ldr.w	r3, [r4, #-32]
    bd78:	9300      	str	r3, [sp, #0]
    bd7a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    bd7e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    bd82:	f7ff ff6f 	bl	bc64 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    bd86:	f854 3c30 	ldr.w	r3, [r4, #-48]
    bd8a:	655d      	str	r5, [r3, #84]	; 0x54
    bd8c:	4625      	mov	r5, r4
    bd8e:	e7cd      	b.n	bd2c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    bd90:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bd92:	1c5a      	adds	r2, r3, #1
    bd94:	d00d      	beq.n	bdb2 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    bd96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    bd9a:	4630      	mov	r0, r6
    bd9c:	4639      	mov	r1, r7
    bd9e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    bda2:	42b9      	cmp	r1, r7
    bda4:	bf08      	it	eq
    bda6:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    bda8:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    bdaa:	d104      	bne.n	bdb6 <z_init_static_threads+0x96>
	z_sched_start(thread);
    bdac:	4628      	mov	r0, r5
    bdae:	f000 fbb1 	bl	c514 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    bdb2:	3430      	adds	r4, #48	; 0x30
    bdb4:	e7c8      	b.n	bd48 <z_init_static_threads+0x28>
    bdb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bdba:	2300      	movs	r3, #0
    bdbc:	f7f4 fe7c 	bl	ab8 <__aeabi_uldivmod>
    bdc0:	4602      	mov	r2, r0
    bdc2:	460b      	mov	r3, r1
    bdc4:	f105 0018 	add.w	r0, r5, #24
    bdc8:	4651      	mov	r1, sl
    bdca:	f000 fe45 	bl	ca58 <z_add_timeout>
    bdce:	e7f0      	b.n	bdb2 <z_init_static_threads+0x92>
    bdd0:	20000298 	.word	0x20000298
    bdd4:	20000298 	.word	0x20000298
    bdd8:	0001dd39 	.word	0x0001dd39

0000bddc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    bddc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    bdde:	4c09      	ldr	r4, [pc, #36]	; (be04 <idle+0x28>)
	__asm__ volatile(
    bde0:	f04f 0220 	mov.w	r2, #32
    bde4:	f3ef 8311 	mrs	r3, BASEPRI
    bde8:	f382 8812 	msr	BASEPRI_MAX, r2
    bdec:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    bdf0:	f012 f851 	bl	1de96 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    bdf4:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    bdf6:	f7fa fae7 	bl	63c8 <pm_system_suspend>
    bdfa:	2800      	cmp	r0, #0
    bdfc:	d1f0      	bne.n	bde0 <idle+0x4>
	arch_cpu_idle();
    bdfe:	f7fa fbf7 	bl	65f0 <arch_cpu_idle>
}
    be02:	e7ed      	b.n	bde0 <idle+0x4>
    be04:	200011d0 	.word	0x200011d0

0000be08 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    be08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    be0c:	4604      	mov	r4, r0
    be0e:	4616      	mov	r6, r2
    be10:	461f      	mov	r7, r3
    be12:	f04f 0320 	mov.w	r3, #32
    be16:	f3ef 8811 	mrs	r8, BASEPRI
    be1a:	f383 8812 	msr	BASEPRI_MAX, r3
    be1e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    be22:	68c3      	ldr	r3, [r0, #12]
    be24:	4a35      	ldr	r2, [pc, #212]	; (befc <z_impl_k_mutex_lock+0xf4>)
    be26:	b16b      	cbz	r3, be44 <z_impl_k_mutex_lock+0x3c>
    be28:	6880      	ldr	r0, [r0, #8]
    be2a:	6891      	ldr	r1, [r2, #8]
    be2c:	4288      	cmp	r0, r1
    be2e:	d019      	beq.n	be64 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    be30:	ea56 0307 	orrs.w	r3, r6, r7
    be34:	d118      	bne.n	be68 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    be36:	f388 8811 	msr	BASEPRI, r8
    be3a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    be3e:	f06f 000f 	mvn.w	r0, #15
    be42:	e00c      	b.n	be5e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    be44:	6891      	ldr	r1, [r2, #8]
    be46:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    be4a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    be4c:	3301      	adds	r3, #1
    be4e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    be50:	6893      	ldr	r3, [r2, #8]
    be52:	60a3      	str	r3, [r4, #8]
    be54:	f388 8811 	msr	BASEPRI, r8
    be58:	f3bf 8f6f 	isb	sy
		return 0;
    be5c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    be5e:	b002      	add	sp, #8
    be60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    be64:	6921      	ldr	r1, [r4, #16]
    be66:	e7f0      	b.n	be4a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    be68:	f991 100e 	ldrsb.w	r1, [r1, #14]
    be6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    be70:	4299      	cmp	r1, r3
    be72:	bfa8      	it	ge
    be74:	4619      	movge	r1, r3
    be76:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    be7a:	4291      	cmp	r1, r2
    be7c:	bfb8      	it	lt
    be7e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    be80:	428b      	cmp	r3, r1
    be82:	dd2f      	ble.n	bee4 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
    be84:	f000 fbb6 	bl	c5f4 <z_set_prio>
    be88:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    be8a:	e9cd 6700 	strd	r6, r7, [sp]
    be8e:	481c      	ldr	r0, [pc, #112]	; (bf00 <z_impl_k_mutex_lock+0xf8>)
    be90:	4622      	mov	r2, r4
    be92:	4641      	mov	r1, r8
    be94:	f000 fb9a 	bl	c5cc <z_pend_curr>
	if (got_mutex == 0) {
    be98:	2800      	cmp	r0, #0
    be9a:	d0e0      	beq.n	be5e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    be9c:	f04f 0320 	mov.w	r3, #32
    bea0:	f3ef 8611 	mrs	r6, BASEPRI
    bea4:	f383 8812 	msr	BASEPRI_MAX, r3
    bea8:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    beac:	6823      	ldr	r3, [r4, #0]
    beae:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    beb0:	429c      	cmp	r4, r3
    beb2:	d00a      	beq.n	beca <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    beb4:	b14b      	cbz	r3, beca <z_impl_k_mutex_lock+0xc2>
    beb6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    beba:	4299      	cmp	r1, r3
    bebc:	bfa8      	it	ge
    bebe:	4619      	movge	r1, r3
    bec0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    bec4:	4299      	cmp	r1, r3
    bec6:	bfb8      	it	lt
    bec8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    beca:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    becc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    bed0:	4299      	cmp	r1, r3
    bed2:	d109      	bne.n	bee8 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
    bed4:	b16d      	cbz	r5, bef2 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
    bed6:	480a      	ldr	r0, [pc, #40]	; (bf00 <z_impl_k_mutex_lock+0xf8>)
    bed8:	4631      	mov	r1, r6
    beda:	f000 fa1d 	bl	c318 <z_reschedule>
	return -EAGAIN;
    bede:	f06f 000a 	mvn.w	r0, #10
    bee2:	e7bc      	b.n	be5e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    bee4:	2500      	movs	r5, #0
    bee6:	e7d0      	b.n	be8a <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
    bee8:	f000 fb84 	bl	c5f4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    beec:	2800      	cmp	r0, #0
    beee:	d1f2      	bne.n	bed6 <z_impl_k_mutex_lock+0xce>
    bef0:	e7f0      	b.n	bed4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    bef2:	f386 8811 	msr	BASEPRI, r6
    bef6:	f3bf 8f6f 	isb	sy
    befa:	e7f0      	b.n	bede <z_impl_k_mutex_lock+0xd6>
    befc:	200011d0 	.word	0x200011d0
    bf00:	200022a0 	.word	0x200022a0

0000bf04 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    bf04:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    bf06:	6883      	ldr	r3, [r0, #8]
{
    bf08:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	d036      	beq.n	bf7c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    bf0e:	4a1e      	ldr	r2, [pc, #120]	; (bf88 <z_impl_k_mutex_unlock+0x84>)
    bf10:	6892      	ldr	r2, [r2, #8]
    bf12:	4293      	cmp	r3, r2
    bf14:	d135      	bne.n	bf82 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    bf16:	7bda      	ldrb	r2, [r3, #15]
    bf18:	3a01      	subs	r2, #1
    bf1a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    bf1c:	68c3      	ldr	r3, [r0, #12]
    bf1e:	2b01      	cmp	r3, #1
    bf20:	d905      	bls.n	bf2e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    bf22:	3b01      	subs	r3, #1
    bf24:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    bf26:	f000 fbe3 	bl	c6f0 <k_sched_unlock>

	return 0;
    bf2a:	2000      	movs	r0, #0
}
    bf2c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    bf2e:	f04f 0320 	mov.w	r3, #32
    bf32:	f3ef 8511 	mrs	r5, BASEPRI
    bf36:	f383 8812 	msr	BASEPRI_MAX, r3
    bf3a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    bf3e:	6901      	ldr	r1, [r0, #16]
    bf40:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    bf42:	f990 300e 	ldrsb.w	r3, [r0, #14]
    bf46:	4299      	cmp	r1, r3
    bf48:	d001      	beq.n	bf4e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    bf4a:	f000 fb53 	bl	c5f4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    bf4e:	4620      	mov	r0, r4
    bf50:	f011 ff56 	bl	1de00 <z_unpend_first_thread>
	mutex->owner = new_owner;
    bf54:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    bf56:	b158      	cbz	r0, bf70 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    bf58:	f990 200e 	ldrsb.w	r2, [r0, #14]
    bf5c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    bf5e:	2200      	movs	r2, #0
    bf60:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    bf62:	f011 fed9 	bl	1dd18 <z_ready_thread>
		z_reschedule(&lock, key);
    bf66:	4809      	ldr	r0, [pc, #36]	; (bf8c <z_impl_k_mutex_unlock+0x88>)
    bf68:	4629      	mov	r1, r5
    bf6a:	f000 f9d5 	bl	c318 <z_reschedule>
    bf6e:	e7da      	b.n	bf26 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    bf70:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    bf72:	f385 8811 	msr	BASEPRI, r5
    bf76:	f3bf 8f6f 	isb	sy
    bf7a:	e7d4      	b.n	bf26 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    bf7c:	f06f 0015 	mvn.w	r0, #21
    bf80:	e7d4      	b.n	bf2c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    bf82:	f04f 30ff 	mov.w	r0, #4294967295
    bf86:	e7d1      	b.n	bf2c <z_impl_k_mutex_unlock+0x28>
    bf88:	200011d0 	.word	0x200011d0
    bf8c:	200022a0 	.word	0x200022a0

0000bf90 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    bf90:	b538      	push	{r3, r4, r5, lr}
    bf92:	4604      	mov	r4, r0
	__asm__ volatile(
    bf94:	f04f 0320 	mov.w	r3, #32
    bf98:	f3ef 8511 	mrs	r5, BASEPRI
    bf9c:	f383 8812 	msr	BASEPRI_MAX, r3
    bfa0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    bfa4:	f011 ff2c 	bl	1de00 <z_unpend_first_thread>

	if (thread != NULL) {
    bfa8:	b148      	cbz	r0, bfbe <z_impl_k_sem_give+0x2e>
    bfaa:	2200      	movs	r2, #0
    bfac:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    bfae:	f011 feb3 	bl	1dd18 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    bfb2:	4629      	mov	r1, r5
    bfb4:	4808      	ldr	r0, [pc, #32]	; (bfd8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    bfb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    bfba:	f000 b9ad 	b.w	c318 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    bfbe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    bfc2:	429a      	cmp	r2, r3
    bfc4:	bf18      	it	ne
    bfc6:	3301      	addne	r3, #1
    bfc8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    bfca:	2102      	movs	r1, #2
    bfcc:	f104 0010 	add.w	r0, r4, #16
    bfd0:	f012 f8f3 	bl	1e1ba <z_handle_obj_poll_events>
}
    bfd4:	e7ed      	b.n	bfb2 <z_impl_k_sem_give+0x22>
    bfd6:	bf00      	nop
    bfd8:	200022a0 	.word	0x200022a0

0000bfdc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    bfdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bfde:	4614      	mov	r4, r2
    bfe0:	461d      	mov	r5, r3
    bfe2:	f04f 0320 	mov.w	r3, #32
    bfe6:	f3ef 8111 	mrs	r1, BASEPRI
    bfea:	f383 8812 	msr	BASEPRI_MAX, r3
    bfee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    bff2:	6883      	ldr	r3, [r0, #8]
    bff4:	b143      	cbz	r3, c008 <z_impl_k_sem_take+0x2c>
		sem->count--;
    bff6:	3b01      	subs	r3, #1
    bff8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    bffa:	f381 8811 	msr	BASEPRI, r1
    bffe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    c002:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    c004:	b003      	add	sp, #12
    c006:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    c008:	ea54 0305 	orrs.w	r3, r4, r5
    c00c:	d106      	bne.n	c01c <z_impl_k_sem_take+0x40>
    c00e:	f381 8811 	msr	BASEPRI, r1
    c012:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    c016:	f06f 000f 	mvn.w	r0, #15
    c01a:	e7f3      	b.n	c004 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    c01c:	4602      	mov	r2, r0
    c01e:	e9cd 4500 	strd	r4, r5, [sp]
    c022:	4802      	ldr	r0, [pc, #8]	; (c02c <z_impl_k_sem_take+0x50>)
    c024:	f000 fad2 	bl	c5cc <z_pend_curr>
	return ret;
    c028:	e7ec      	b.n	c004 <z_impl_k_sem_take+0x28>
    c02a:	bf00      	nop
    c02c:	200022a0 	.word	0x200022a0

0000c030 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    c030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    c034:	4e4b      	ldr	r6, [pc, #300]	; (c164 <work_queue_main+0x134>)
{
    c036:	b085      	sub	sp, #20
    c038:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    c03a:	f04f 38ff 	mov.w	r8, #4294967295
    c03e:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    c042:	f04f 0320 	mov.w	r3, #32
    c046:	f3ef 8711 	mrs	r7, BASEPRI
    c04a:	f383 8812 	msr	BASEPRI_MAX, r3
    c04e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    c052:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    c056:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    c05a:	b985      	cbnz	r5, c07e <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
    c05c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
    c060:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
    c062:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    c066:	d433      	bmi.n	c0d0 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    c068:	2300      	movs	r3, #0
    c06a:	e9cd 8900 	strd	r8, r9, [sp]
    c06e:	9302      	str	r3, [sp, #8]
    c070:	f104 0288 	add.w	r2, r4, #136	; 0x88
    c074:	4639      	mov	r1, r7
    c076:	483c      	ldr	r0, [pc, #240]	; (c168 <work_queue_main+0x138>)
    c078:	f000 fc72 	bl	c960 <z_sched_wait>
			continue;
    c07c:	e7e1      	b.n	c042 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c07e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    c082:	6829      	ldr	r1, [r5, #0]
	list->head = node;
    c084:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c088:	4295      	cmp	r5, r2
    c08a:	d101      	bne.n	c090 <work_queue_main+0x60>
	list->tail = node;
    c08c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    c090:	f043 0302 	orr.w	r3, r3, #2
    c094:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    c098:	68eb      	ldr	r3, [r5, #12]
    c09a:	f023 0304 	bic.w	r3, r3, #4
    c09e:	f043 0301 	orr.w	r3, r3, #1
    c0a2:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    c0a4:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    c0a6:	f387 8811 	msr	BASEPRI, r7
    c0aa:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    c0ae:	4628      	mov	r0, r5
    c0b0:	4798      	blx	r3
	__asm__ volatile(
    c0b2:	f04f 0320 	mov.w	r3, #32
    c0b6:	f3ef 8b11 	mrs	fp, BASEPRI
    c0ba:	f383 8812 	msr	BASEPRI_MAX, r3
    c0be:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    c0c2:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    c0c4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    c0c6:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    c0ca:	d40b      	bmi.n	c0e4 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
    c0cc:	60ea      	str	r2, [r5, #12]
    c0ce:	e00e      	b.n	c0ee <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    c0d0:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    c0d4:	2200      	movs	r2, #0
    c0d6:	2101      	movs	r1, #1
    c0d8:	4628      	mov	r0, r5
    c0da:	f011 fea9 	bl	1de30 <z_sched_wake>
    c0de:	2800      	cmp	r0, #0
    c0e0:	d1f8      	bne.n	c0d4 <work_queue_main+0xa4>
    c0e2:	e7c1      	b.n	c068 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    c0e4:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    c0e6:	f023 0303 	bic.w	r3, r3, #3
    c0ea:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    c0ec:	b970      	cbnz	r0, c10c <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
    c0ee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    c0f2:	f023 0302 	bic.w	r3, r3, #2
    c0f6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    c0fa:	f38b 8811 	msr	BASEPRI, fp
    c0fe:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    c102:	05d8      	lsls	r0, r3, #23
    c104:	d49d      	bmi.n	c042 <work_queue_main+0x12>
	z_impl_k_yield();
    c106:	f000 fb1b 	bl	c740 <z_impl_k_yield>
}
    c10a:	e79a      	b.n	c042 <work_queue_main+0x12>
	return node->next;
    c10c:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c10e:	f04f 0a00 	mov.w	sl, #0
    c112:	2f00      	cmp	r7, #0
    c114:	bf38      	it	cc
    c116:	2700      	movcc	r7, #0
	parent->next = child;
    c118:	4653      	mov	r3, sl
		if (wc->work == work) {
    c11a:	6842      	ldr	r2, [r0, #4]
    c11c:	4295      	cmp	r5, r2
    c11e:	4601      	mov	r1, r0
    c120:	d10e      	bne.n	c140 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    c122:	6801      	ldr	r1, [r0, #0]
    c124:	f1ba 0f00 	cmp.w	sl, #0
    c128:	d114      	bne.n	c154 <work_queue_main+0x124>
    c12a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    c12c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    c12e:	4290      	cmp	r0, r2
    c130:	d100      	bne.n	c134 <work_queue_main+0x104>
	list->tail = node;
    c132:	6071      	str	r1, [r6, #4]
	parent->next = child;
    c134:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    c138:	f7ff ff2a 	bl	bf90 <z_impl_k_sem_give>
}
    c13c:	4651      	mov	r1, sl
    c13e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    c140:	2f00      	cmp	r7, #0
    c142:	d0d4      	beq.n	c0ee <work_queue_main+0xbe>
	return node->next;
    c144:	683a      	ldr	r2, [r7, #0]
    c146:	2a00      	cmp	r2, #0
    c148:	bf38      	it	cc
    c14a:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c14c:	4638      	mov	r0, r7
    c14e:	468a      	mov	sl, r1
    c150:	4617      	mov	r7, r2
    c152:	e7e2      	b.n	c11a <work_queue_main+0xea>
	parent->next = child;
    c154:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
    c158:	6872      	ldr	r2, [r6, #4]
    c15a:	4290      	cmp	r0, r2
	list->tail = node;
    c15c:	bf08      	it	eq
    c15e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
    c162:	e7e7      	b.n	c134 <work_queue_main+0x104>
    c164:	200011f8 	.word	0x200011f8
    c168:	200022a0 	.word	0x200022a0

0000c16c <submit_to_queue_locked>:
{
    c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    c16e:	68c3      	ldr	r3, [r0, #12]
    c170:	079a      	lsls	r2, r3, #30
{
    c172:	4604      	mov	r4, r0
    c174:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    c176:	f3c3 0540 	ubfx	r5, r3, #1, #1
    c17a:	d41f      	bmi.n	c1bc <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    c17c:	075f      	lsls	r7, r3, #29
    c17e:	d41f      	bmi.n	c1c0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    c180:	680a      	ldr	r2, [r1, #0]
    c182:	b90a      	cbnz	r2, c188 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    c184:	6882      	ldr	r2, [r0, #8]
    c186:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    c188:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    c18a:	bf44      	itt	mi
    c18c:	68a3      	ldrmi	r3, [r4, #8]
    c18e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    c190:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    c192:	bf4c      	ite	mi
    c194:	2502      	movmi	r5, #2
		ret = 1;
    c196:	2501      	movpl	r5, #1
	if (queue == NULL) {
    c198:	b37f      	cbz	r7, c1fa <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    c19a:	4b1b      	ldr	r3, [pc, #108]	; (c208 <submit_to_queue_locked+0x9c>)
    c19c:	689b      	ldr	r3, [r3, #8]
    c19e:	42bb      	cmp	r3, r7
    c1a0:	d111      	bne.n	c1c6 <submit_to_queue_locked+0x5a>
    c1a2:	f011 fd02 	bl	1dbaa <k_is_in_isr>
    c1a6:	f080 0001 	eor.w	r0, r0, #1
    c1aa:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    c1ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    c1b0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    c1b2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    c1b6:	d523      	bpl.n	c200 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    c1b8:	b13a      	cbz	r2, c1ca <submit_to_queue_locked+0x5e>
    c1ba:	b940      	cbnz	r0, c1ce <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    c1bc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    c1c0:	2300      	movs	r3, #0
    c1c2:	6033      	str	r3, [r6, #0]
	return ret;
    c1c4:	e013      	b.n	c1ee <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    c1c6:	2000      	movs	r0, #0
    c1c8:	e7f0      	b.n	c1ac <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    c1ca:	071b      	lsls	r3, r3, #28
    c1cc:	d4f6      	bmi.n	c1bc <submit_to_queue_locked+0x50>
	parent->next = child;
    c1ce:	2300      	movs	r3, #0
    c1d0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    c1d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    c1d6:	b963      	cbnz	r3, c1f2 <submit_to_queue_locked+0x86>
	list->head = node;
    c1d8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    c1dc:	4638      	mov	r0, r7
    c1de:	f011 fd0f 	bl	1dc00 <notify_queue_locked>
	*flagp |= BIT(bit);
    c1e2:	68e3      	ldr	r3, [r4, #12]
    c1e4:	f043 0304 	orr.w	r3, r3, #4
    c1e8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    c1ea:	6833      	ldr	r3, [r6, #0]
    c1ec:	60a3      	str	r3, [r4, #8]
}
    c1ee:	4628      	mov	r0, r5
    c1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    c1f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    c1f4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    c1f8:	e7f0      	b.n	c1dc <submit_to_queue_locked+0x70>
		return -EINVAL;
    c1fa:	f06f 0515 	mvn.w	r5, #21
    c1fe:	e7df      	b.n	c1c0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    c200:	f06f 0512 	mvn.w	r5, #18
    c204:	e7dc      	b.n	c1c0 <submit_to_queue_locked+0x54>
    c206:	bf00      	nop
    c208:	200011d0 	.word	0x200011d0

0000c20c <k_work_submit>:
{
    c20c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    c20e:	4801      	ldr	r0, [pc, #4]	; (c214 <k_work_submit+0x8>)
    c210:	f011 bd06 	b.w	1dc20 <k_work_submit_to_queue>
    c214:	20000590 	.word	0x20000590

0000c218 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    c218:	b5f0      	push	{r4, r5, r6, r7, lr}
    c21a:	b089      	sub	sp, #36	; 0x24
    c21c:	4604      	mov	r4, r0
	list->head = NULL;
    c21e:	2000      	movs	r0, #0
	list->tail = NULL;
    c220:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    c224:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    c226:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    c22a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    c22e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    c232:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    c236:	b31d      	cbz	r5, c280 <k_work_queue_start+0x68>
    c238:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    c23a:	2800      	cmp	r0, #0
    c23c:	f240 1001 	movw	r0, #257	; 0x101
    c240:	bf08      	it	eq
    c242:	2001      	moveq	r0, #1
	*flagp = flags;
    c244:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c248:	2000      	movs	r0, #0
    c24a:	f04f 36ff 	mov.w	r6, #4294967295
    c24e:	f04f 37ff 	mov.w	r7, #4294967295
    c252:	e9cd 3003 	strd	r3, r0, [sp, #12]
    c256:	e9cd 0001 	strd	r0, r0, [sp, #4]
    c25a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    c25e:	4b09      	ldr	r3, [pc, #36]	; (c284 <k_work_queue_start+0x6c>)
    c260:	9400      	str	r4, [sp, #0]
    c262:	4620      	mov	r0, r4
    c264:	f7ff fd30 	bl	bcc8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    c268:	b125      	cbz	r5, c274 <k_work_queue_start+0x5c>
    c26a:	6829      	ldr	r1, [r5, #0]
    c26c:	b111      	cbz	r1, c274 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    c26e:	4620      	mov	r0, r4
    c270:	f011 fca1 	bl	1dbb6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    c274:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    c276:	b009      	add	sp, #36	; 0x24
    c278:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c27c:	f011 bca0 	b.w	1dbc0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    c280:	2001      	movs	r0, #1
    c282:	e7df      	b.n	c244 <k_work_queue_start+0x2c>
    c284:	0000c031 	.word	0x0000c031

0000c288 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    c288:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    c28a:	4c08      	ldr	r4, [pc, #32]	; (c2ac <z_reset_time_slice+0x24>)
    c28c:	6823      	ldr	r3, [r4, #0]
    c28e:	b15b      	cbz	r3, c2a8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    c290:	f7fe fae4 	bl	a85c <sys_clock_elapsed>
    c294:	4603      	mov	r3, r0
    c296:	6820      	ldr	r0, [r4, #0]
    c298:	4a05      	ldr	r2, [pc, #20]	; (c2b0 <z_reset_time_slice+0x28>)
    c29a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    c29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    c2a0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    c2a2:	2100      	movs	r1, #0
    c2a4:	f011 be07 	b.w	1deb6 <z_set_timeout_expiry>
}
    c2a8:	bd10      	pop	{r4, pc}
    c2aa:	bf00      	nop
    c2ac:	20001208 	.word	0x20001208
    c2b0:	200011d0 	.word	0x200011d0

0000c2b4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2b6:	4604      	mov	r4, r0
    c2b8:	460d      	mov	r5, r1
	__asm__ volatile(
    c2ba:	f04f 0320 	mov.w	r3, #32
    c2be:	f3ef 8611 	mrs	r6, BASEPRI
    c2c2:	f383 8812 	msr	BASEPRI_MAX, r3
    c2c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    c2ca:	4b10      	ldr	r3, [pc, #64]	; (c30c <k_sched_time_slice_set+0x58>)
    c2cc:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    c2ce:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c2d2:	f240 30e7 	movw	r0, #999	; 0x3e7
    c2d6:	2100      	movs	r1, #0
    c2d8:	611a      	str	r2, [r3, #16]
    c2da:	fbe7 0104 	umlal	r0, r1, r7, r4
    c2de:	2300      	movs	r3, #0
    c2e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c2e4:	f7f4 fbe8 	bl	ab8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    c2e8:	2c00      	cmp	r4, #0
    c2ea:	4b09      	ldr	r3, [pc, #36]	; (c310 <k_sched_time_slice_set+0x5c>)
    c2ec:	dc09      	bgt.n	c302 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    c2ee:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    c2f0:	4b08      	ldr	r3, [pc, #32]	; (c314 <k_sched_time_slice_set+0x60>)
    c2f2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    c2f4:	f7ff ffc8 	bl	c288 <z_reset_time_slice>
	__asm__ volatile(
    c2f8:	f386 8811 	msr	BASEPRI, r6
    c2fc:	f3bf 8f6f 	isb	sy
	}
}
    c300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    c302:	2802      	cmp	r0, #2
    c304:	bfb8      	it	lt
    c306:	2002      	movlt	r0, #2
    c308:	e7f1      	b.n	c2ee <k_sched_time_slice_set+0x3a>
    c30a:	bf00      	nop
    c30c:	200011d0 	.word	0x200011d0
    c310:	20001208 	.word	0x20001208
    c314:	20001204 	.word	0x20001204

0000c318 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    c318:	b949      	cbnz	r1, c32e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c31a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    c31e:	b930      	cbnz	r0, c32e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    c320:	4b05      	ldr	r3, [pc, #20]	; (c338 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    c322:	69da      	ldr	r2, [r3, #28]
    c324:	689b      	ldr	r3, [r3, #8]
    c326:	429a      	cmp	r2, r3
    c328:	d001      	beq.n	c32e <z_reschedule+0x16>
	ret = arch_swap(key);
    c32a:	f7fa ba1b 	b.w	6764 <arch_swap>
    c32e:	f381 8811 	msr	BASEPRI, r1
    c332:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    c336:	4770      	bx	lr
    c338:	200011d0 	.word	0x200011d0

0000c33c <k_sched_lock>:
	__asm__ volatile(
    c33c:	f04f 0320 	mov.w	r3, #32
    c340:	f3ef 8111 	mrs	r1, BASEPRI
    c344:	f383 8812 	msr	BASEPRI_MAX, r3
    c348:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    c34c:	4b04      	ldr	r3, [pc, #16]	; (c360 <k_sched_lock+0x24>)
    c34e:	689a      	ldr	r2, [r3, #8]
    c350:	7bd3      	ldrb	r3, [r2, #15]
    c352:	3b01      	subs	r3, #1
    c354:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    c356:	f381 8811 	msr	BASEPRI, r1
    c35a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    c35e:	4770      	bx	lr
    c360:	200011d0 	.word	0x200011d0

0000c364 <update_cache>:
{
    c364:	b538      	push	{r3, r4, r5, lr}
    c366:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    c368:	480c      	ldr	r0, [pc, #48]	; (c39c <update_cache+0x38>)
    c36a:	4d0d      	ldr	r5, [pc, #52]	; (c3a0 <update_cache+0x3c>)
    c36c:	f011 fcca 	bl	1dd04 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    c370:	4604      	mov	r4, r0
    c372:	b900      	cbnz	r0, c376 <update_cache+0x12>
    c374:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    c376:	68ab      	ldr	r3, [r5, #8]
    c378:	b94a      	cbnz	r2, c38e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    c37a:	7b5a      	ldrb	r2, [r3, #13]
    c37c:	06d2      	lsls	r2, r2, #27
    c37e:	d106      	bne.n	c38e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    c380:	69a2      	ldr	r2, [r4, #24]
    c382:	b922      	cbnz	r2, c38e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    c384:	89da      	ldrh	r2, [r3, #14]
    c386:	2a7f      	cmp	r2, #127	; 0x7f
    c388:	d901      	bls.n	c38e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    c38a:	61eb      	str	r3, [r5, #28]
}
    c38c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    c38e:	429c      	cmp	r4, r3
    c390:	d001      	beq.n	c396 <update_cache+0x32>
			z_reset_time_slice();
    c392:	f7ff ff79 	bl	c288 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    c396:	61ec      	str	r4, [r5, #28]
}
    c398:	e7f8      	b.n	c38c <update_cache+0x28>
    c39a:	bf00      	nop
    c39c:	200011f0 	.word	0x200011f0
    c3a0:	200011d0 	.word	0x200011d0

0000c3a4 <move_thread_to_end_of_prio_q>:
{
    c3a4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    c3a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    c3aa:	7b43      	ldrb	r3, [r0, #13]
    c3ac:	2a00      	cmp	r2, #0
{
    c3ae:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    c3b0:	da04      	bge.n	c3bc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c3b6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    c3b8:	f011 fc4f 	bl	1dc5a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    c3bc:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    c3be:	4a17      	ldr	r2, [pc, #92]	; (c41c <move_thread_to_end_of_prio_q+0x78>)
    c3c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c3c4:	4610      	mov	r0, r2
    c3c6:	734b      	strb	r3, [r1, #13]
    c3c8:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c3cc:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c3ce:	4283      	cmp	r3, r0
    c3d0:	bf08      	it	eq
    c3d2:	2300      	moveq	r3, #0
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	bf38      	it	cc
    c3d8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c3da:	b1cb      	cbz	r3, c410 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
    c3dc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    c3e0:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    c3e4:	42a6      	cmp	r6, r4
    c3e6:	d00f      	beq.n	c408 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
    c3e8:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    c3ea:	2c00      	cmp	r4, #0
    c3ec:	dd0c      	ble.n	c408 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    c3ee:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    c3f0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    c3f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    c3f6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    c3f8:	6890      	ldr	r0, [r2, #8]
    c3fa:	1a43      	subs	r3, r0, r1
    c3fc:	4258      	negs	r0, r3
}
    c3fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    c402:	4158      	adcs	r0, r3
    c404:	f7ff bfae 	b.w	c364 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    c408:	42ab      	cmp	r3, r5
    c40a:	d001      	beq.n	c410 <move_thread_to_end_of_prio_q+0x6c>
    c40c:	681b      	ldr	r3, [r3, #0]
    c40e:	e7e4      	b.n	c3da <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
    c410:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
    c414:	6029      	str	r1, [r5, #0]
	list->tail = node;
    c416:	6251      	str	r1, [r2, #36]	; 0x24
}
    c418:	e7ee      	b.n	c3f8 <move_thread_to_end_of_prio_q+0x54>
    c41a:	bf00      	nop
    c41c:	200011d0 	.word	0x200011d0

0000c420 <z_time_slice>:
{
    c420:	b570      	push	{r4, r5, r6, lr}
    c422:	4601      	mov	r1, r0
	__asm__ volatile(
    c424:	f04f 0320 	mov.w	r3, #32
    c428:	f3ef 8411 	mrs	r4, BASEPRI
    c42c:	f383 8812 	msr	BASEPRI_MAX, r3
    c430:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    c434:	4b16      	ldr	r3, [pc, #88]	; (c490 <z_time_slice+0x70>)
    c436:	4a17      	ldr	r2, [pc, #92]	; (c494 <z_time_slice+0x74>)
    c438:	6898      	ldr	r0, [r3, #8]
    c43a:	6815      	ldr	r5, [r2, #0]
    c43c:	42a8      	cmp	r0, r5
    c43e:	461d      	mov	r5, r3
    c440:	d106      	bne.n	c450 <z_time_slice+0x30>
			z_reset_time_slice();
    c442:	f7ff ff21 	bl	c288 <z_reset_time_slice>
	__asm__ volatile(
    c446:	f384 8811 	msr	BASEPRI, r4
    c44a:	f3bf 8f6f 	isb	sy
}
    c44e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    c450:	2600      	movs	r6, #0
    c452:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    c454:	4a10      	ldr	r2, [pc, #64]	; (c498 <z_time_slice+0x78>)
    c456:	6812      	ldr	r2, [r2, #0]
    c458:	b1ba      	cbz	r2, c48a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    c45a:	89c2      	ldrh	r2, [r0, #14]
    c45c:	2a7f      	cmp	r2, #127	; 0x7f
    c45e:	d814      	bhi.n	c48a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    c460:	7b42      	ldrb	r2, [r0, #13]
    c462:	06d2      	lsls	r2, r2, #27
    c464:	d111      	bne.n	c48a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    c466:	4a0d      	ldr	r2, [pc, #52]	; (c49c <z_time_slice+0x7c>)
    c468:	f990 600e 	ldrsb.w	r6, [r0, #14]
    c46c:	6812      	ldr	r2, [r2, #0]
    c46e:	4296      	cmp	r6, r2
    c470:	db0b      	blt.n	c48a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    c472:	4a0b      	ldr	r2, [pc, #44]	; (c4a0 <z_time_slice+0x80>)
    c474:	4290      	cmp	r0, r2
    c476:	d008      	beq.n	c48a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    c478:	691a      	ldr	r2, [r3, #16]
    c47a:	428a      	cmp	r2, r1
    c47c:	dc02      	bgt.n	c484 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    c47e:	f7ff ff91 	bl	c3a4 <move_thread_to_end_of_prio_q>
    c482:	e7de      	b.n	c442 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    c484:	1a52      	subs	r2, r2, r1
    c486:	611a      	str	r2, [r3, #16]
    c488:	e7dd      	b.n	c446 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    c48a:	2300      	movs	r3, #0
    c48c:	612b      	str	r3, [r5, #16]
    c48e:	e7da      	b.n	c446 <z_time_slice+0x26>
    c490:	200011d0 	.word	0x200011d0
    c494:	20001200 	.word	0x20001200
    c498:	20001208 	.word	0x20001208
    c49c:	20001204 	.word	0x20001204
    c4a0:	20000488 	.word	0x20000488

0000c4a4 <ready_thread>:
{
    c4a4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    c4a6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    c4aa:	7b42      	ldrb	r2, [r0, #13]
    c4ac:	2b00      	cmp	r3, #0
    c4ae:	db2d      	blt.n	c50c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    c4b0:	06d3      	lsls	r3, r2, #27
    c4b2:	d12b      	bne.n	c50c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
    c4b4:	6983      	ldr	r3, [r0, #24]
    c4b6:	bb4b      	cbnz	r3, c50c <ready_thread+0x68>
	return list->head == list;
    c4b8:	4915      	ldr	r1, [pc, #84]	; (c510 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
    c4ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c4be:	7342      	strb	r2, [r0, #13]
    c4c0:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c4c2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
    c4c4:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c4c8:	4294      	cmp	r4, r2
    c4ca:	bf18      	it	ne
    c4cc:	4623      	movne	r3, r4
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	bf38      	it	cc
    c4d2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c4d4:	b1ab      	cbz	r3, c502 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
    c4d6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    c4da:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
    c4de:	42a6      	cmp	r6, r4
    c4e0:	d00b      	beq.n	c4fa <ready_thread+0x56>
		return b2 - b1;
    c4e2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    c4e4:	2c00      	cmp	r4, #0
    c4e6:	dd08      	ble.n	c4fa <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
    c4e8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c4ea:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    c4ee:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    c4f0:	6058      	str	r0, [r3, #4]
}
    c4f2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    c4f4:	2000      	movs	r0, #0
    c4f6:	f7ff bf35 	b.w	c364 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    c4fa:	42ab      	cmp	r3, r5
    c4fc:	d001      	beq.n	c502 <ready_thread+0x5e>
    c4fe:	681b      	ldr	r3, [r3, #0]
    c500:	e7e8      	b.n	c4d4 <ready_thread+0x30>
	node->prev = tail;
    c502:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
    c506:	6028      	str	r0, [r5, #0]
	list->tail = node;
    c508:	6248      	str	r0, [r1, #36]	; 0x24
}
    c50a:	e7f2      	b.n	c4f2 <ready_thread+0x4e>
}
    c50c:	bc70      	pop	{r4, r5, r6}
    c50e:	4770      	bx	lr
    c510:	200011d0 	.word	0x200011d0

0000c514 <z_sched_start>:
{
    c514:	b510      	push	{r4, lr}
	__asm__ volatile(
    c516:	f04f 0220 	mov.w	r2, #32
    c51a:	f3ef 8411 	mrs	r4, BASEPRI
    c51e:	f382 8812 	msr	BASEPRI_MAX, r2
    c522:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    c526:	7b42      	ldrb	r2, [r0, #13]
    c528:	0751      	lsls	r1, r2, #29
    c52a:	d404      	bmi.n	c536 <z_sched_start+0x22>
	__asm__ volatile(
    c52c:	f384 8811 	msr	BASEPRI, r4
    c530:	f3bf 8f6f 	isb	sy
}
    c534:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c536:	f022 0204 	bic.w	r2, r2, #4
    c53a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    c53c:	f7ff ffb2 	bl	c4a4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    c540:	4621      	mov	r1, r4
    c542:	4802      	ldr	r0, [pc, #8]	; (c54c <z_sched_start+0x38>)
}
    c544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    c548:	f7ff bee6 	b.w	c318 <z_reschedule>
    c54c:	200022a0 	.word	0x200022a0

0000c550 <unready_thread>:
{
    c550:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    c552:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    c556:	7b43      	ldrb	r3, [r0, #13]
    c558:	2a00      	cmp	r2, #0
{
    c55a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    c55c:	da04      	bge.n	c568 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c562:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c564:	f011 fb79 	bl	1dc5a <sys_dlist_remove>
	update_cache(thread == _current);
    c568:	4b04      	ldr	r3, [pc, #16]	; (c57c <unready_thread+0x2c>)
    c56a:	6898      	ldr	r0, [r3, #8]
    c56c:	1a43      	subs	r3, r0, r1
    c56e:	4258      	negs	r0, r3
    c570:	4158      	adcs	r0, r3
}
    c572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    c576:	f7ff bef5 	b.w	c364 <update_cache>
    c57a:	bf00      	nop
    c57c:	200011d0 	.word	0x200011d0

0000c580 <pend>:
{
    c580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c584:	4606      	mov	r6, r0
    c586:	4614      	mov	r4, r2
    c588:	461d      	mov	r5, r3
	__asm__ volatile(
    c58a:	f04f 0320 	mov.w	r3, #32
    c58e:	f3ef 8711 	mrs	r7, BASEPRI
    c592:	f383 8812 	msr	BASEPRI_MAX, r3
    c596:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    c59a:	f011 fbef 	bl	1dd7c <add_to_waitq_locked>
	__asm__ volatile(
    c59e:	f387 8811 	msr	BASEPRI, r7
    c5a2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c5a6:	1c6b      	adds	r3, r5, #1
    c5a8:	bf08      	it	eq
    c5aa:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    c5ae:	d008      	beq.n	c5c2 <pend+0x42>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c5b0:	4622      	mov	r2, r4
    c5b2:	462b      	mov	r3, r5
    c5b4:	f106 0018 	add.w	r0, r6, #24
    c5b8:	4903      	ldr	r1, [pc, #12]	; (c5c8 <pend+0x48>)
}
    c5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c5be:	f000 ba4b 	b.w	ca58 <z_add_timeout>
    c5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5c6:	bf00      	nop
    c5c8:	0001dd39 	.word	0x0001dd39

0000c5cc <z_pend_curr>:
{
    c5cc:	b510      	push	{r4, lr}
	pending_current = _current;
    c5ce:	4b07      	ldr	r3, [pc, #28]	; (c5ec <z_pend_curr+0x20>)
    c5d0:	6898      	ldr	r0, [r3, #8]
    c5d2:	4b07      	ldr	r3, [pc, #28]	; (c5f0 <z_pend_curr+0x24>)
{
    c5d4:	460c      	mov	r4, r1
	pending_current = _current;
    c5d6:	6018      	str	r0, [r3, #0]
{
    c5d8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    c5da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5de:	f7ff ffcf 	bl	c580 <pend>
    c5e2:	4620      	mov	r0, r4
}
    c5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c5e8:	f7fa b8bc 	b.w	6764 <arch_swap>
    c5ec:	200011d0 	.word	0x200011d0
    c5f0:	20001200 	.word	0x20001200

0000c5f4 <z_set_prio>:
{
    c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5f6:	4604      	mov	r4, r0
	__asm__ volatile(
    c5f8:	f04f 0320 	mov.w	r3, #32
    c5fc:	f3ef 8611 	mrs	r6, BASEPRI
    c600:	f383 8812 	msr	BASEPRI_MAX, r3
    c604:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    c608:	7b43      	ldrb	r3, [r0, #13]
    c60a:	06da      	lsls	r2, r3, #27
    c60c:	b249      	sxtb	r1, r1
    c60e:	d138      	bne.n	c682 <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
    c610:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    c612:	2d00      	cmp	r5, #0
    c614:	d135      	bne.n	c682 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c61a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c61c:	f011 fb1d 	bl	1dc5a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    c620:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    c622:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    c624:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c628:	7343      	strb	r3, [r0, #13]
	return list->head == list;
    c62a:	4817      	ldr	r0, [pc, #92]	; (c688 <z_set_prio+0x94>)
    c62c:	4603      	mov	r3, r0
    c62e:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c632:	429f      	cmp	r7, r3
    c634:	bf18      	it	ne
    c636:	463d      	movne	r5, r7
    c638:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c63a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    c63c:	461a      	mov	r2, r3
    c63e:	462b      	mov	r3, r5
    c640:	bf38      	it	cc
    c642:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c644:	b1c3      	cbz	r3, c678 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
    c646:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    c64a:	42a9      	cmp	r1, r5
    c64c:	d010      	beq.n	c670 <z_set_prio+0x7c>
		return b2 - b1;
    c64e:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    c650:	2d00      	cmp	r5, #0
    c652:	dd0d      	ble.n	c670 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
    c654:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    c656:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    c65a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    c65c:	605c      	str	r4, [r3, #4]
			update_cache(1);
    c65e:	2001      	movs	r0, #1
    c660:	f7ff fe80 	bl	c364 <update_cache>
    c664:	2001      	movs	r0, #1
	__asm__ volatile(
    c666:	f386 8811 	msr	BASEPRI, r6
    c66a:	f3bf 8f6f 	isb	sy
}
    c66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    c670:	42bb      	cmp	r3, r7
    c672:	d001      	beq.n	c678 <z_set_prio+0x84>
    c674:	681b      	ldr	r3, [r3, #0]
    c676:	e7e5      	b.n	c644 <z_set_prio+0x50>
	node->prev = tail;
    c678:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
    c67c:	603c      	str	r4, [r7, #0]
	list->tail = node;
    c67e:	6244      	str	r4, [r0, #36]	; 0x24
}
    c680:	e7ed      	b.n	c65e <z_set_prio+0x6a>
			thread->base.prio = prio;
    c682:	73a1      	strb	r1, [r4, #14]
    c684:	2000      	movs	r0, #0
    c686:	e7ee      	b.n	c666 <z_set_prio+0x72>
    c688:	200011d0 	.word	0x200011d0

0000c68c <z_impl_k_thread_suspend>:
{
    c68c:	b570      	push	{r4, r5, r6, lr}
    c68e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    c690:	3018      	adds	r0, #24
    c692:	f011 fbea 	bl	1de6a <z_abort_timeout>
	__asm__ volatile(
    c696:	f04f 0320 	mov.w	r3, #32
    c69a:	f3ef 8611 	mrs	r6, BASEPRI
    c69e:	f383 8812 	msr	BASEPRI_MAX, r3
    c6a2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    c6a6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    c6aa:	7b63      	ldrb	r3, [r4, #13]
    c6ac:	2a00      	cmp	r2, #0
    c6ae:	da05      	bge.n	c6bc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c6b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c6b4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c6b6:	4620      	mov	r0, r4
    c6b8:	f011 facf 	bl	1dc5a <sys_dlist_remove>
		update_cache(thread == _current);
    c6bc:	4d0b      	ldr	r5, [pc, #44]	; (c6ec <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    c6be:	7b63      	ldrb	r3, [r4, #13]
    c6c0:	68a8      	ldr	r0, [r5, #8]
    c6c2:	f043 0310 	orr.w	r3, r3, #16
    c6c6:	7363      	strb	r3, [r4, #13]
    c6c8:	1b03      	subs	r3, r0, r4
    c6ca:	4258      	negs	r0, r3
    c6cc:	4158      	adcs	r0, r3
    c6ce:	f7ff fe49 	bl	c364 <update_cache>
	__asm__ volatile(
    c6d2:	f386 8811 	msr	BASEPRI, r6
    c6d6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    c6da:	68ab      	ldr	r3, [r5, #8]
    c6dc:	42a3      	cmp	r3, r4
    c6de:	d103      	bne.n	c6e8 <z_impl_k_thread_suspend+0x5c>
}
    c6e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    c6e4:	f011 bb04 	b.w	1dcf0 <z_reschedule_unlocked>
}
    c6e8:	bd70      	pop	{r4, r5, r6, pc}
    c6ea:	bf00      	nop
    c6ec:	200011d0 	.word	0x200011d0

0000c6f0 <k_sched_unlock>:
{
    c6f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    c6f2:	f04f 0320 	mov.w	r3, #32
    c6f6:	f3ef 8411 	mrs	r4, BASEPRI
    c6fa:	f383 8812 	msr	BASEPRI_MAX, r3
    c6fe:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    c702:	4b08      	ldr	r3, [pc, #32]	; (c724 <k_sched_unlock+0x34>)
    c704:	689a      	ldr	r2, [r3, #8]
    c706:	7bd3      	ldrb	r3, [r2, #15]
    c708:	3301      	adds	r3, #1
    c70a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    c70c:	2000      	movs	r0, #0
    c70e:	f7ff fe29 	bl	c364 <update_cache>
	__asm__ volatile(
    c712:	f384 8811 	msr	BASEPRI, r4
    c716:	f3bf 8f6f 	isb	sy
}
    c71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    c71e:	f011 bae7 	b.w	1dcf0 <z_reschedule_unlocked>
    c722:	bf00      	nop
    c724:	200011d0 	.word	0x200011d0

0000c728 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    c728:	4b04      	ldr	r3, [pc, #16]	; (c73c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    c72a:	2100      	movs	r1, #0
    c72c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    c730:	e9c3 2208 	strd	r2, r2, [r3, #32]
    c734:	4608      	mov	r0, r1
    c736:	f7ff bdbd 	b.w	c2b4 <k_sched_time_slice_set>
    c73a:	bf00      	nop
    c73c:	200011d0 	.word	0x200011d0

0000c740 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    c742:	f04f 0320 	mov.w	r3, #32
    c746:	f3ef 8411 	mrs	r4, BASEPRI
    c74a:	f383 8812 	msr	BASEPRI_MAX, r3
    c74e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    c752:	491b      	ldr	r1, [pc, #108]	; (c7c0 <z_impl_k_yield+0x80>)
    c754:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c756:	7b43      	ldrb	r3, [r0, #13]
    c758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c75c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c75e:	f011 fa7c 	bl	1dc5a <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    c762:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    c764:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
    c766:	4608      	mov	r0, r1
    c768:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c76c:	7353      	strb	r3, [r2, #13]
    c76e:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c772:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c774:	4283      	cmp	r3, r0
    c776:	bf08      	it	eq
    c778:	2300      	moveq	r3, #0
    c77a:	2b00      	cmp	r3, #0
    c77c:	bf38      	it	cc
    c77e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c780:	b1cb      	cbz	r3, c7b6 <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
    c782:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
    c786:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    c78a:	42af      	cmp	r7, r5
    c78c:	d00f      	beq.n	c7ae <z_impl_k_yield+0x6e>
		return b2 - b1;
    c78e:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    c790:	2d00      	cmp	r5, #0
    c792:	dd0c      	ble.n	c7ae <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    c794:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    c796:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
    c79a:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    c79c:	605a      	str	r2, [r3, #4]
	update_cache(1);
    c79e:	2001      	movs	r0, #1
    c7a0:	f7ff fde0 	bl	c364 <update_cache>
    c7a4:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
    c7a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c7aa:	f7f9 bfdb 	b.w	6764 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    c7ae:	42b3      	cmp	r3, r6
    c7b0:	d001      	beq.n	c7b6 <z_impl_k_yield+0x76>
    c7b2:	681b      	ldr	r3, [r3, #0]
    c7b4:	e7e4      	b.n	c780 <z_impl_k_yield+0x40>
	node->prev = tail;
    c7b6:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
    c7ba:	6032      	str	r2, [r6, #0]
	list->tail = node;
    c7bc:	624a      	str	r2, [r1, #36]	; 0x24
}
    c7be:	e7ee      	b.n	c79e <z_impl_k_yield+0x5e>
    c7c0:	200011d0 	.word	0x200011d0

0000c7c4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7c8:	4604      	mov	r4, r0
    c7ca:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    c7cc:	ea54 0105 	orrs.w	r1, r4, r5
    c7d0:	d104      	bne.n	c7dc <z_tick_sleep+0x18>
	z_impl_k_yield();
    c7d2:	f7ff ffb5 	bl	c740 <z_impl_k_yield>
		k_yield();
		return 0;
    c7d6:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    c7dc:	f06f 0101 	mvn.w	r1, #1
    c7e0:	1a0a      	subs	r2, r1, r0
    c7e2:	f04f 31ff 	mov.w	r1, #4294967295
    c7e6:	eb61 0305 	sbc.w	r3, r1, r5
    c7ea:	2a01      	cmp	r2, #1
    c7ec:	f173 0300 	sbcs.w	r3, r3, #0
    c7f0:	da2a      	bge.n	c848 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    c7f2:	f011 fb7a 	bl	1deea <sys_clock_tick_get_32>
    c7f6:	1906      	adds	r6, r0, r4
    c7f8:	f04f 0320 	mov.w	r3, #32
    c7fc:	f3ef 8811 	mrs	r8, BASEPRI
    c800:	f383 8812 	msr	BASEPRI_MAX, r3
    c804:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    c808:	4f11      	ldr	r7, [pc, #68]	; (c850 <z_tick_sleep+0x8c>)
    c80a:	4b12      	ldr	r3, [pc, #72]	; (c854 <z_tick_sleep+0x90>)
    c80c:	68b8      	ldr	r0, [r7, #8]
    c80e:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    c810:	f7ff fe9e 	bl	c550 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    c814:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c816:	4910      	ldr	r1, [pc, #64]	; (c858 <z_tick_sleep+0x94>)
    c818:	4622      	mov	r2, r4
    c81a:	462b      	mov	r3, r5
    c81c:	3018      	adds	r0, #24
    c81e:	f000 f91b 	bl	ca58 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    c822:	68ba      	ldr	r2, [r7, #8]
    c824:	7b53      	ldrb	r3, [r2, #13]
    c826:	f043 0310 	orr.w	r3, r3, #16
    c82a:	7353      	strb	r3, [r2, #13]
    c82c:	4640      	mov	r0, r8
    c82e:	f7f9 ff99 	bl	6764 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    c832:	f011 fb5a 	bl	1deea <sys_clock_tick_get_32>
    c836:	1a30      	subs	r0, r6, r0
    c838:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
    c83c:	2801      	cmp	r0, #1
    c83e:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
    c842:	bfb8      	it	lt
    c844:	2000      	movlt	r0, #0
    c846:	e7c7      	b.n	c7d8 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    c848:	f06f 0601 	mvn.w	r6, #1
    c84c:	1a36      	subs	r6, r6, r0
    c84e:	e7d3      	b.n	c7f8 <z_tick_sleep+0x34>
    c850:	200011d0 	.word	0x200011d0
    c854:	20001200 	.word	0x20001200
    c858:	0001dd39 	.word	0x0001dd39

0000c85c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    c85c:	b508      	push	{r3, lr}
    c85e:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c860:	3301      	adds	r3, #1
    c862:	bf08      	it	eq
    c864:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    c868:	d106      	bne.n	c878 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    c86a:	4b08      	ldr	r3, [pc, #32]	; (c88c <z_impl_k_sleep+0x30>)
    c86c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    c86e:	f7ff ff0d 	bl	c68c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    c872:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    c876:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    c878:	f7ff ffa4 	bl	c7c4 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    c87c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c880:	fb80 2303 	smull	r2, r3, r0, r3
    c884:	0bd0      	lsrs	r0, r2, #15
    c886:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    c88a:	e7f4      	b.n	c876 <z_impl_k_sleep+0x1a>
    c88c:	200011d0 	.word	0x200011d0

0000c890 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    c890:	4b01      	ldr	r3, [pc, #4]	; (c898 <z_impl_z_current_get+0x8>)
    c892:	6898      	ldr	r0, [r3, #8]
    c894:	4770      	bx	lr
    c896:	bf00      	nop
    c898:	200011d0 	.word	0x200011d0

0000c89c <z_impl_k_is_preempt_thread>:
    c89c:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    c8a0:	b93b      	cbnz	r3, c8b2 <z_impl_k_is_preempt_thread+0x16>
    c8a2:	4b05      	ldr	r3, [pc, #20]	; (c8b8 <z_impl_k_is_preempt_thread+0x1c>)
    c8a4:	689b      	ldr	r3, [r3, #8]
    c8a6:	89d8      	ldrh	r0, [r3, #14]
    c8a8:	287f      	cmp	r0, #127	; 0x7f
    c8aa:	bf8c      	ite	hi
    c8ac:	2000      	movhi	r0, #0
    c8ae:	2001      	movls	r0, #1
    c8b0:	4770      	bx	lr
    c8b2:	2000      	movs	r0, #0
}
    c8b4:	4770      	bx	lr
    c8b6:	bf00      	nop
    c8b8:	200011d0 	.word	0x200011d0

0000c8bc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8c0:	4604      	mov	r4, r0
    c8c2:	f04f 0320 	mov.w	r3, #32
    c8c6:	f3ef 8611 	mrs	r6, BASEPRI
    c8ca:	f383 8812 	msr	BASEPRI_MAX, r3
    c8ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    c8d2:	7b43      	ldrb	r3, [r0, #13]
    c8d4:	071a      	lsls	r2, r3, #28
    c8d6:	d505      	bpl.n	c8e4 <z_thread_abort+0x28>
	__asm__ volatile(
    c8d8:	f386 8811 	msr	BASEPRI, r6
    c8dc:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    c8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c8e4:	f023 0220 	bic.w	r2, r3, #32
    c8e8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    c8ec:	09d2      	lsrs	r2, r2, #7
    c8ee:	d120      	bne.n	c932 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c8f0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    c8f2:	68a3      	ldr	r3, [r4, #8]
    c8f4:	b113      	cbz	r3, c8fc <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    c8f6:	4620      	mov	r0, r4
    c8f8:	f011 f9b7 	bl	1dc6a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    c8fc:	f104 0018 	add.w	r0, r4, #24
    c900:	f011 fab3 	bl	1de6a <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    c904:	f104 0758 	add.w	r7, r4, #88	; 0x58
    c908:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    c90c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c90e:	42bd      	cmp	r5, r7
    c910:	d000      	beq.n	c914 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c912:	b9b5      	cbnz	r5, c942 <z_thread_abort+0x86>
		update_cache(1);
    c914:	2001      	movs	r0, #1
    c916:	f7ff fd25 	bl	c364 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    c91a:	4b10      	ldr	r3, [pc, #64]	; (c95c <z_thread_abort+0xa0>)
    c91c:	689b      	ldr	r3, [r3, #8]
    c91e:	42a3      	cmp	r3, r4
    c920:	d1da      	bne.n	c8d8 <z_thread_abort+0x1c>
    c922:	f3ef 8305 	mrs	r3, IPSR
    c926:	2b00      	cmp	r3, #0
    c928:	d1d6      	bne.n	c8d8 <z_thread_abort+0x1c>
    c92a:	4630      	mov	r0, r6
    c92c:	f7f9 ff1a 	bl	6764 <arch_swap>
	return ret;
    c930:	e7d2      	b.n	c8d8 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c932:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    c936:	f043 0308 	orr.w	r3, r3, #8
    c93a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c93c:	f011 f98d 	bl	1dc5a <sys_dlist_remove>
}
    c940:	e7d7      	b.n	c8f2 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    c942:	4628      	mov	r0, r5
    c944:	f011 f991 	bl	1dc6a <unpend_thread_no_timeout>
    c948:	f105 0018 	add.w	r0, r5, #24
    c94c:	f011 fa8d 	bl	1de6a <z_abort_timeout>
    c950:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    c954:	4628      	mov	r0, r5
    c956:	f7ff fda5 	bl	c4a4 <ready_thread>
    c95a:	e7d7      	b.n	c90c <z_thread_abort+0x50>
    c95c:	200011d0 	.word	0x200011d0

0000c960 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    c960:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    c962:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    c966:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    c968:	e9cd 6700 	strd	r6, r7, [sp]
    c96c:	f7ff fe2e 	bl	c5cc <z_pend_curr>

	if (data != NULL) {
    c970:	b11c      	cbz	r4, c97a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    c972:	4b03      	ldr	r3, [pc, #12]	; (c980 <z_sched_wait+0x20>)
    c974:	689b      	ldr	r3, [r3, #8]
    c976:	695b      	ldr	r3, [r3, #20]
    c978:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    c97a:	b002      	add	sp, #8
    c97c:	bdd0      	pop	{r4, r6, r7, pc}
    c97e:	bf00      	nop
    c980:	200011d0 	.word	0x200011d0

0000c984 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    c984:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c986:	4806      	ldr	r0, [pc, #24]	; (c9a0 <z_data_copy+0x1c>)
    c988:	4a06      	ldr	r2, [pc, #24]	; (c9a4 <z_data_copy+0x20>)
    c98a:	4907      	ldr	r1, [pc, #28]	; (c9a8 <z_data_copy+0x24>)
    c98c:	1a12      	subs	r2, r2, r0
    c98e:	f011 fc38 	bl	1e202 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    c992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c996:	4a05      	ldr	r2, [pc, #20]	; (c9ac <z_data_copy+0x28>)
    c998:	4905      	ldr	r1, [pc, #20]	; (c9b0 <z_data_copy+0x2c>)
    c99a:	4806      	ldr	r0, [pc, #24]	; (c9b4 <z_data_copy+0x30>)
    c99c:	f011 bc31 	b.w	1e202 <memcpy>
    c9a0:	20000000 	.word	0x20000000
    c9a4:	20000360 	.word	0x20000360
    c9a8:	000206b0 	.word	0x000206b0
    c9ac:	00000000 	.word	0x00000000
    c9b0:	000206b0 	.word	0x000206b0
    c9b4:	20000000 	.word	0x20000000

0000c9b8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c9b8:	4b03      	ldr	r3, [pc, #12]	; (c9c8 <elapsed+0x10>)
    c9ba:	681b      	ldr	r3, [r3, #0]
    c9bc:	b90b      	cbnz	r3, c9c2 <elapsed+0xa>
    c9be:	f7fd bf4d 	b.w	a85c <sys_clock_elapsed>
}
    c9c2:	2000      	movs	r0, #0
    c9c4:	4770      	bx	lr
    c9c6:	bf00      	nop
    c9c8:	2000120c 	.word	0x2000120c

0000c9cc <remove_timeout>:
{
    c9cc:	b530      	push	{r4, r5, lr}
    c9ce:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c9d0:	b168      	cbz	r0, c9ee <remove_timeout+0x22>
    c9d2:	4a0a      	ldr	r2, [pc, #40]	; (c9fc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    c9d4:	6852      	ldr	r2, [r2, #4]
    c9d6:	4290      	cmp	r0, r2
    c9d8:	d009      	beq.n	c9ee <remove_timeout+0x22>
	if (next(t) != NULL) {
    c9da:	b143      	cbz	r3, c9ee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    c9dc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    c9e0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    c9e4:	1912      	adds	r2, r2, r4
    c9e6:	eb45 0101 	adc.w	r1, r5, r1
    c9ea:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    c9ee:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    c9f0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c9f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c9f4:	2300      	movs	r3, #0
	node->prev = NULL;
    c9f6:	e9c0 3300 	strd	r3, r3, [r0]
}
    c9fa:	bd30      	pop	{r4, r5, pc}
    c9fc:	20000198 	.word	0x20000198

0000ca00 <next_timeout>:

static int32_t next_timeout(void)
{
    ca00:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    ca02:	4b13      	ldr	r3, [pc, #76]	; (ca50 <next_timeout+0x50>)
    ca04:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ca06:	429c      	cmp	r4, r3
    ca08:	bf08      	it	eq
    ca0a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    ca0c:	f7ff ffd4 	bl	c9b8 <elapsed>
    ca10:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    ca12:	b1bc      	cbz	r4, ca44 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ca14:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    ca18:	1b40      	subs	r0, r0, r5
    ca1a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    ca1e:	2801      	cmp	r0, #1
    ca20:	f171 0300 	sbcs.w	r3, r1, #0
    ca24:	db11      	blt.n	ca4a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ca26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ca2a:	2300      	movs	r3, #0
    ca2c:	4282      	cmp	r2, r0
    ca2e:	eb73 0401 	sbcs.w	r4, r3, r1
    ca32:	da00      	bge.n	ca36 <next_timeout+0x36>
    ca34:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    ca36:	4b07      	ldr	r3, [pc, #28]	; (ca54 <next_timeout+0x54>)
    ca38:	691b      	ldr	r3, [r3, #16]
    ca3a:	b113      	cbz	r3, ca42 <next_timeout+0x42>
    ca3c:	4298      	cmp	r0, r3
    ca3e:	bfa8      	it	ge
    ca40:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    ca42:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    ca44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ca48:	e7f5      	b.n	ca36 <next_timeout+0x36>
    ca4a:	2000      	movs	r0, #0
    ca4c:	e7f3      	b.n	ca36 <next_timeout+0x36>
    ca4e:	bf00      	nop
    ca50:	20000198 	.word	0x20000198
    ca54:	200011d0 	.word	0x200011d0

0000ca58 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ca58:	f1b3 3fff 	cmp.w	r3, #4294967295
    ca5c:	bf08      	it	eq
    ca5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    ca62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca66:	4604      	mov	r4, r0
    ca68:	4692      	mov	sl, r2
    ca6a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ca6c:	d073      	beq.n	cb56 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    ca6e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    ca70:	f04f 0320 	mov.w	r3, #32
    ca74:	f3ef 8511 	mrs	r5, BASEPRI
    ca78:	f383 8812 	msr	BASEPRI_MAX, r3
    ca7c:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    ca80:	f06f 0301 	mvn.w	r3, #1
    ca84:	ebb3 080a 	subs.w	r8, r3, sl
    ca88:	f04f 32ff 	mov.w	r2, #4294967295
    ca8c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    ca90:	f1b8 0f00 	cmp.w	r8, #0
    ca94:	f179 0100 	sbcs.w	r1, r9, #0
    ca98:	db1c      	blt.n	cad4 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    ca9a:	4830      	ldr	r0, [pc, #192]	; (cb5c <z_add_timeout+0x104>)
    ca9c:	e9d0 1000 	ldrd	r1, r0, [r0]
    caa0:	1a5b      	subs	r3, r3, r1
    caa2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    caa6:	ebb3 060a 	subs.w	r6, r3, sl
    caaa:	eb62 070b 	sbc.w	r7, r2, fp
    caae:	2e01      	cmp	r6, #1
    cab0:	f177 0300 	sbcs.w	r3, r7, #0
    cab4:	bfbc      	itt	lt
    cab6:	2601      	movlt	r6, #1
    cab8:	2700      	movlt	r7, #0
    caba:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
    cabe:	4a28      	ldr	r2, [pc, #160]	; (cb60 <z_add_timeout+0x108>)
    cac0:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cac4:	4293      	cmp	r3, r2
    cac6:	d11e      	bne.n	cb06 <z_add_timeout+0xae>
	node->prev = tail;
    cac8:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    cacc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    cad0:	6054      	str	r4, [r2, #4]
}
    cad2:	e02d      	b.n	cb30 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    cad4:	f7ff ff70 	bl	c9b8 <elapsed>
    cad8:	f11a 0301 	adds.w	r3, sl, #1
    cadc:	9300      	str	r3, [sp, #0]
    cade:	f14b 0300 	adc.w	r3, fp, #0
    cae2:	9301      	str	r3, [sp, #4]
    cae4:	e9dd 2300 	ldrd	r2, r3, [sp]
    cae8:	1812      	adds	r2, r2, r0
    caea:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    caee:	e9c4 2304 	strd	r2, r3, [r4, #16]
    caf2:	e7e4      	b.n	cabe <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    caf4:	ebb6 0008 	subs.w	r0, r6, r8
    caf8:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
    cafc:	4563      	cmp	r3, ip
    cafe:	e9c4 0104 	strd	r0, r1, [r4, #16]
    cb02:	d0e1      	beq.n	cac8 <z_add_timeout+0x70>
    cb04:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    cb06:	2b00      	cmp	r3, #0
    cb08:	d0de      	beq.n	cac8 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
    cb0a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    cb0e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
    cb12:	4546      	cmp	r6, r8
    cb14:	eb77 0109 	sbcs.w	r1, r7, r9
    cb18:	daec      	bge.n	caf4 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
    cb1a:	ebb8 0006 	subs.w	r0, r8, r6
    cb1e:	eb69 0107 	sbc.w	r1, r9, r7
    cb22:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    cb26:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    cb28:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    cb2c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    cb2e:	605c      	str	r4, [r3, #4]
	return list->head == list;
    cb30:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb32:	4293      	cmp	r3, r2
    cb34:	d00b      	beq.n	cb4e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    cb36:	429c      	cmp	r4, r3
    cb38:	d109      	bne.n	cb4e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    cb3a:	f7ff ff61 	bl	ca00 <next_timeout>

			if (next_time == 0 ||
    cb3e:	b118      	cbz	r0, cb48 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
    cb40:	4b08      	ldr	r3, [pc, #32]	; (cb64 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
    cb42:	691b      	ldr	r3, [r3, #16]
    cb44:	4283      	cmp	r3, r0
    cb46:	d002      	beq.n	cb4e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
    cb48:	2100      	movs	r1, #0
    cb4a:	f7fd fe57 	bl	a7fc <sys_clock_set_timeout>
	__asm__ volatile(
    cb4e:	f385 8811 	msr	BASEPRI, r5
    cb52:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    cb56:	b003      	add	sp, #12
    cb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb5c:	20000588 	.word	0x20000588
    cb60:	20000198 	.word	0x20000198
    cb64:	200011d0 	.word	0x200011d0

0000cb68 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    cb68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb6c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    cb6e:	f7ff fc57 	bl	c420 <z_time_slice>
	__asm__ volatile(
    cb72:	f04f 0320 	mov.w	r3, #32
    cb76:	f3ef 8411 	mrs	r4, BASEPRI
    cb7a:	f383 8812 	msr	BASEPRI_MAX, r3
    cb7e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    cb82:	4d2c      	ldr	r5, [pc, #176]	; (cc34 <sys_clock_announce+0xcc>)
    cb84:	f8df a0b0 	ldr.w	sl, [pc, #176]	; cc38 <sys_clock_announce+0xd0>
	return list->head == list;
    cb88:	f8df b0b0 	ldr.w	fp, [pc, #176]	; cc3c <sys_clock_announce+0xd4>
    cb8c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    cb8e:	4651      	mov	r1, sl
    cb90:	f8d5 c000 	ldr.w	ip, [r5]
    cb94:	f8db 0000 	ldr.w	r0, [fp]
    cb98:	4662      	mov	r2, ip
    cb9a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb9c:	4558      	cmp	r0, fp
    cb9e:	e9da 8900 	ldrd	r8, r9, [sl]
    cba2:	e9cd 2300 	strd	r2, r3, [sp]
    cba6:	d00d      	beq.n	cbc4 <sys_clock_announce+0x5c>
    cba8:	b160      	cbz	r0, cbc4 <sys_clock_announce+0x5c>
    cbaa:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    cbae:	45b4      	cmp	ip, r6
    cbb0:	41bb      	sbcs	r3, r7
    cbb2:	da1e      	bge.n	cbf2 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    cbb4:	9b00      	ldr	r3, [sp, #0]
    cbb6:	ebb6 0c03 	subs.w	ip, r6, r3
    cbba:	9b01      	ldr	r3, [sp, #4]
    cbbc:	eb67 0603 	sbc.w	r6, r7, r3
    cbc0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    cbc4:	9b00      	ldr	r3, [sp, #0]
    cbc6:	eb13 0208 	adds.w	r2, r3, r8
    cbca:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    cbcc:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    cbd0:	eb43 0309 	adc.w	r3, r3, r9
    cbd4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    cbd8:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    cbda:	f7ff ff11 	bl	ca00 <next_timeout>
    cbde:	4631      	mov	r1, r6
    cbe0:	f7fd fe0c 	bl	a7fc <sys_clock_set_timeout>
	__asm__ volatile(
    cbe4:	f384 8811 	msr	BASEPRI, r4
    cbe8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    cbec:	b003      	add	sp, #12
    cbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    cbf2:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    cbf6:	f04f 0200 	mov.w	r2, #0
    cbfa:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    cbfe:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    cc02:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    cc06:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    cc0a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    cc0e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    cc10:	f7ff fedc 	bl	c9cc <remove_timeout>
    cc14:	f384 8811 	msr	BASEPRI, r4
    cc18:	f3bf 8f6f 	isb	sy
		t->fn(t);
    cc1c:	6883      	ldr	r3, [r0, #8]
    cc1e:	4798      	blx	r3
	__asm__ volatile(
    cc20:	f04f 0320 	mov.w	r3, #32
    cc24:	f3ef 8411 	mrs	r4, BASEPRI
    cc28:	f383 8812 	msr	BASEPRI_MAX, r3
    cc2c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    cc30:	4901      	ldr	r1, [pc, #4]	; (cc38 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    cc32:	e7ad      	b.n	cb90 <sys_clock_announce+0x28>
    cc34:	2000120c 	.word	0x2000120c
    cc38:	20000588 	.word	0x20000588
    cc3c:	20000198 	.word	0x20000198

0000cc40 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    cc40:	b510      	push	{r4, lr}
    cc42:	f04f 0320 	mov.w	r3, #32
    cc46:	f3ef 8411 	mrs	r4, BASEPRI
    cc4a:	f383 8812 	msr	BASEPRI_MAX, r3
    cc4e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    cc52:	f7fd fe03 	bl	a85c <sys_clock_elapsed>
    cc56:	4b06      	ldr	r3, [pc, #24]	; (cc70 <sys_clock_tick_get+0x30>)
    cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc5c:	1812      	adds	r2, r2, r0
    cc5e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    cc62:	f384 8811 	msr	BASEPRI, r4
    cc66:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    cc6a:	4610      	mov	r0, r2
    cc6c:	4619      	mov	r1, r3
    cc6e:	bd10      	pop	{r4, pc}
    cc70:	20000588 	.word	0x20000588

0000cc74 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    cc74:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    cc78:	4604      	mov	r4, r0
	__asm__ volatile(
    cc7a:	f04f 0320 	mov.w	r3, #32
    cc7e:	f3ef 8611 	mrs	r6, BASEPRI
    cc82:	f383 8812 	msr	BASEPRI_MAX, r3
    cc86:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    cc8a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    cc8e:	f112 0801 	adds.w	r8, r2, #1
    cc92:	f143 0900 	adc.w	r9, r3, #0
    cc96:	f1b9 0f00 	cmp.w	r9, #0
    cc9a:	bf08      	it	eq
    cc9c:	f1b8 0f02 	cmpeq.w	r8, #2
    cca0:	d302      	bcc.n	cca8 <z_timer_expiration_handler+0x34>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    cca2:	4911      	ldr	r1, [pc, #68]	; (cce8 <z_timer_expiration_handler+0x74>)
    cca4:	f7ff fed8 	bl	ca58 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    cca8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ccaa:	3301      	adds	r3, #1
    ccac:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    ccae:	6a23      	ldr	r3, [r4, #32]
    ccb0:	b10b      	cbz	r3, ccb6 <z_timer_expiration_handler+0x42>
		timer->expiry_fn(timer);
    ccb2:	4620      	mov	r0, r4
    ccb4:	4798      	blx	r3
	return list->head == list;
    ccb6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ccba:	42a5      	cmp	r5, r4
    ccbc:	d000      	beq.n	ccc0 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    ccbe:	b92d      	cbnz	r5, cccc <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    ccc0:	f386 8811 	msr	BASEPRI, r6
    ccc4:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    ccc8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	z_unpend_thread_no_timeout(thread);
    cccc:	4628      	mov	r0, r5
    ccce:	f010 ffdf 	bl	1dc90 <z_unpend_thread_no_timeout>
    ccd2:	2300      	movs	r3, #0
    ccd4:	67eb      	str	r3, [r5, #124]	; 0x7c
    ccd6:	f386 8811 	msr	BASEPRI, r6
    ccda:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    ccde:	4628      	mov	r0, r5
}
    cce0:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
	z_ready_thread(thread);
    cce4:	f011 b818 	b.w	1dd18 <z_ready_thread>
    cce8:	0000cc75 	.word	0x0000cc75

0000ccec <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    ccec:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    ccf0:	4619      	mov	r1, r3
    ccf2:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    ccf4:	1c4c      	adds	r4, r1, #1
{
    ccf6:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    ccf8:	bf08      	it	eq
    ccfa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    ccfe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    cd02:	4680      	mov	r8, r0
    cd04:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    cd06:	d04c      	beq.n	cda2 <z_impl_k_timer_start+0xb6>
    cd08:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    cd0a:	1c6b      	adds	r3, r5, #1
    cd0c:	bf08      	it	eq
    cd0e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    cd12:	4614      	mov	r4, r2
    cd14:	d019      	beq.n	cd4a <z_impl_k_timer_start+0x5e>
    cd16:	ea54 0305 	orrs.w	r3, r4, r5
    cd1a:	d016      	beq.n	cd4a <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    cd1c:	f06f 0301 	mvn.w	r3, #1
    cd20:	ebb3 0a02 	subs.w	sl, r3, r2
    cd24:	f04f 33ff 	mov.w	r3, #4294967295
    cd28:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    cd2c:	f1ba 0f00 	cmp.w	sl, #0
    cd30:	f17b 0300 	sbcs.w	r3, fp, #0
    cd34:	da09      	bge.n	cd4a <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    cd36:	f112 34ff 	adds.w	r4, r2, #4294967295
    cd3a:	f145 35ff 	adc.w	r5, r5, #4294967295
    cd3e:	2c01      	cmp	r4, #1
    cd40:	f175 0300 	sbcs.w	r3, r5, #0
    cd44:	bfbc      	itt	lt
    cd46:	2401      	movlt	r4, #1
    cd48:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    cd4a:	f06f 0301 	mvn.w	r3, #1
    cd4e:	1a1b      	subs	r3, r3, r0
    cd50:	9300      	str	r3, [sp, #0]
    cd52:	f04f 33ff 	mov.w	r3, #4294967295
    cd56:	eb63 0301 	sbc.w	r3, r3, r1
    cd5a:	9301      	str	r3, [sp, #4]
    cd5c:	e9dd 2300 	ldrd	r2, r3, [sp]
    cd60:	2a00      	cmp	r2, #0
    cd62:	f173 0300 	sbcs.w	r3, r3, #0
    cd66:	da0c      	bge.n	cd82 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    cd68:	f110 38ff 	adds.w	r8, r0, #4294967295
    cd6c:	f141 39ff 	adc.w	r9, r1, #4294967295
    cd70:	f1b8 0f00 	cmp.w	r8, #0
    cd74:	f179 0300 	sbcs.w	r3, r9, #0
    cd78:	bfbc      	itt	lt
    cd7a:	f04f 0800 	movlt.w	r8, #0
    cd7e:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    cd82:	4630      	mov	r0, r6
    cd84:	f011 f871 	bl	1de6a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    cd88:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    cd8a:	4907      	ldr	r1, [pc, #28]	; (cda8 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    cd8c:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    cd8e:	4642      	mov	r2, r8
    cd90:	464b      	mov	r3, r9
    cd92:	4630      	mov	r0, r6
	timer->period = period;
    cd94:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    cd98:	b002      	add	sp, #8
    cd9a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    cd9e:	f7ff be5b 	b.w	ca58 <z_add_timeout>
}
    cda2:	b002      	add	sp, #8
    cda4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    cda8:	0000cc75 	.word	0x0000cc75

0000cdac <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
    cdac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    cdb0:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
    cdb2:	4b29      	ldr	r3, [pc, #164]	; (ce58 <z_impl_k_poll+0xac>)
    cdb4:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
    cdb6:	2301      	movs	r3, #1
    cdb8:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
    cdbc:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
    cdc0:	ea52 0307 	orrs.w	r3, r2, r7
{
    cdc4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
    cdc6:	bf0c      	ite	eq
    cdc8:	2301      	moveq	r3, #1
    cdca:	2300      	movne	r3, #0
    cdcc:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
    cdd0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
    cdd2:	f011 f91f 	bl	1e014 <register_events>
    cdd6:	4681      	mov	r9, r0
	__asm__ volatile(
    cdd8:	f04f 0320 	mov.w	r3, #32
    cddc:	f3ef 8a11 	mrs	sl, BASEPRI
    cde0:	f383 8812 	msr	BASEPRI_MAX, r3
    cde4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
    cde8:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
    cdec:	b964      	cbnz	r4, ce08 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
    cdee:	4601      	mov	r1, r0
    cdf0:	4652      	mov	r2, sl
    cdf2:	4640      	mov	r0, r8
    cdf4:	f011 f8ac 	bl	1df50 <clear_event_registrations>
	__asm__ volatile(
    cdf8:	f38a 8811 	msr	BASEPRI, sl
    cdfc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
    ce00:	4620      	mov	r0, r4
    ce02:	b002      	add	sp, #8
    ce04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
    ce08:	2300      	movs	r3, #0
    ce0a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ce0e:	ea56 0307 	orrs.w	r3, r6, r7
    ce12:	d106      	bne.n	ce22 <z_impl_k_poll+0x76>
    ce14:	f38a 8811 	msr	BASEPRI, sl
    ce18:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
    ce1c:	f06f 040a 	mvn.w	r4, #10
    ce20:	e7ee      	b.n	ce00 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
    ce22:	e9cd 6700 	strd	r6, r7, [sp]
    ce26:	4a0d      	ldr	r2, [pc, #52]	; (ce5c <z_impl_k_poll+0xb0>)
    ce28:	480d      	ldr	r0, [pc, #52]	; (ce60 <z_impl_k_poll+0xb4>)
    ce2a:	4651      	mov	r1, sl
    ce2c:	f7ff fbce 	bl	c5cc <z_pend_curr>
    ce30:	4604      	mov	r4, r0
	__asm__ volatile(
    ce32:	f04f 0320 	mov.w	r3, #32
    ce36:	f3ef 8511 	mrs	r5, BASEPRI
    ce3a:	f383 8812 	msr	BASEPRI_MAX, r3
    ce3e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
    ce42:	462a      	mov	r2, r5
    ce44:	4649      	mov	r1, r9
    ce46:	4640      	mov	r0, r8
    ce48:	f011 f882 	bl	1df50 <clear_event_registrations>
	__asm__ volatile(
    ce4c:	f385 8811 	msr	BASEPRI, r5
    ce50:	f3bf 8f6f 	isb	sy
	return swap_rc;
    ce54:	e7d4      	b.n	ce00 <z_impl_k_poll+0x54>
    ce56:	bf00      	nop
    ce58:	200011d0 	.word	0x200011d0
    ce5c:	200001a0 	.word	0x200001a0
    ce60:	200022a0 	.word	0x200022a0

0000ce64 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    ce64:	b538      	push	{r3, r4, r5, lr}
    ce66:	4603      	mov	r3, r0
	__asm__ volatile(
    ce68:	f04f 0220 	mov.w	r2, #32
    ce6c:	f3ef 8511 	mrs	r5, BASEPRI
    ce70:	f382 8812 	msr	BASEPRI_MAX, r2
    ce74:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    ce78:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    ce7a:	2101      	movs	r1, #1
    ce7c:	6081      	str	r1, [r0, #8]
	return list->head == list;
    ce7e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    ce80:	4283      	cmp	r3, r0
    ce82:	d106      	bne.n	ce92 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    ce84:	f385 8811 	msr	BASEPRI, r5
    ce88:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    ce8c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    ce8e:	4620      	mov	r0, r4
    ce90:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    ce92:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    ce96:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ce98:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ce9a:	2300      	movs	r3, #0
	node->prev = NULL;
    ce9c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    cea0:	f011 f92f 	bl	1e102 <signal_poll_event>
	z_reschedule(&lock, key);
    cea4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    cea6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    cea8:	4801      	ldr	r0, [pc, #4]	; (ceb0 <z_impl_k_poll_signal_raise+0x4c>)
    ceaa:	f7ff fa35 	bl	c318 <z_reschedule>
	return rc;
    ceae:	e7ee      	b.n	ce8e <z_impl_k_poll_signal_raise+0x2a>
    ceb0:	200022a0 	.word	0x200022a0

0000ceb4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    ceb4:	4a02      	ldr	r2, [pc, #8]	; (cec0 <boot_banner+0xc>)
    ceb6:	4903      	ldr	r1, [pc, #12]	; (cec4 <boot_banner+0x10>)
    ceb8:	4803      	ldr	r0, [pc, #12]	; (cec8 <boot_banner+0x14>)
    ceba:	f00f bb5c 	b.w	1c576 <printk>
    cebe:	bf00      	nop
    cec0:	0001fb6b 	.word	0x0001fb6b
    cec4:	00020538 	.word	0x00020538
    cec8:	00020544 	.word	0x00020544

0000cecc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    cecc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    cece:	4c06      	ldr	r4, [pc, #24]	; (cee8 <statics_init+0x1c>)
    ced0:	4d06      	ldr	r5, [pc, #24]	; (ceec <statics_init+0x20>)
    ced2:	42ac      	cmp	r4, r5
    ced4:	d301      	bcc.n	ceda <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    ced6:	2000      	movs	r0, #0
    ced8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ceda:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    cede:	4620      	mov	r0, r4
    cee0:	f011 f979 	bl	1e1d6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    cee4:	3414      	adds	r4, #20
    cee6:	e7f4      	b.n	ced2 <statics_init+0x6>
    cee8:	200002d0 	.word	0x200002d0
    ceec:	200002d0 	.word	0x200002d0

0000cef0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    cef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    cef2:	4b09      	ldr	r3, [pc, #36]	; (cf18 <k_sys_work_q_init+0x28>)
    cef4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    cef6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    cef8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    cefa:	9300      	str	r3, [sp, #0]
    cefc:	4907      	ldr	r1, [pc, #28]	; (cf1c <k_sys_work_q_init+0x2c>)
    cefe:	4808      	ldr	r0, [pc, #32]	; (cf20 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    cf00:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    cf04:	f04f 33ff 	mov.w	r3, #4294967295
    cf08:	f44f 6280 	mov.w	r2, #1024	; 0x400
    cf0c:	f7ff f984 	bl	c218 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    cf10:	4620      	mov	r0, r4
    cf12:	b004      	add	sp, #16
    cf14:	bd10      	pop	{r4, pc}
    cf16:	bf00      	nop
    cf18:	0002056b 	.word	0x0002056b
    cf1c:	20004120 	.word	0x20004120
    cf20:	20000590 	.word	0x20000590

0000cf24 <nrf_cc3xx_platform_init_no_rng>:
    cf24:	b510      	push	{r4, lr}
    cf26:	4c0a      	ldr	r4, [pc, #40]	; (cf50 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    cf28:	6823      	ldr	r3, [r4, #0]
    cf2a:	b11b      	cbz	r3, cf34 <nrf_cc3xx_platform_init_no_rng+0x10>
    cf2c:	2301      	movs	r3, #1
    cf2e:	6023      	str	r3, [r4, #0]
    cf30:	2000      	movs	r0, #0
    cf32:	bd10      	pop	{r4, pc}
    cf34:	f000 f8d6 	bl	d0e4 <CC_LibInitNoRng>
    cf38:	2800      	cmp	r0, #0
    cf3a:	d0f7      	beq.n	cf2c <nrf_cc3xx_platform_init_no_rng+0x8>
    cf3c:	3801      	subs	r0, #1
    cf3e:	2806      	cmp	r0, #6
    cf40:	d803      	bhi.n	cf4a <nrf_cc3xx_platform_init_no_rng+0x26>
    cf42:	4b04      	ldr	r3, [pc, #16]	; (cf54 <nrf_cc3xx_platform_init_no_rng+0x30>)
    cf44:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    cf48:	bd10      	pop	{r4, pc}
    cf4a:	4803      	ldr	r0, [pc, #12]	; (cf58 <nrf_cc3xx_platform_init_no_rng+0x34>)
    cf4c:	bd10      	pop	{r4, pc}
    cf4e:	bf00      	nop
    cf50:	20001210 	.word	0x20001210
    cf54:	0001f440 	.word	0x0001f440
    cf58:	ffff8ffe 	.word	0xffff8ffe

0000cf5c <nrf_cc3xx_platform_abort>:
    cf5c:	f3bf 8f4f 	dsb	sy
    cf60:	4905      	ldr	r1, [pc, #20]	; (cf78 <nrf_cc3xx_platform_abort+0x1c>)
    cf62:	4b06      	ldr	r3, [pc, #24]	; (cf7c <nrf_cc3xx_platform_abort+0x20>)
    cf64:	68ca      	ldr	r2, [r1, #12]
    cf66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    cf6a:	4313      	orrs	r3, r2
    cf6c:	60cb      	str	r3, [r1, #12]
    cf6e:	f3bf 8f4f 	dsb	sy
    cf72:	bf00      	nop
    cf74:	e7fd      	b.n	cf72 <nrf_cc3xx_platform_abort+0x16>
    cf76:	bf00      	nop
    cf78:	e000ed00 	.word	0xe000ed00
    cf7c:	05fa0004 	.word	0x05fa0004

0000cf80 <CC_PalAbort>:
    cf80:	b4f0      	push	{r4, r5, r6, r7}
    cf82:	4f09      	ldr	r7, [pc, #36]	; (cfa8 <CC_PalAbort+0x28>)
    cf84:	4e09      	ldr	r6, [pc, #36]	; (cfac <CC_PalAbort+0x2c>)
    cf86:	4c0a      	ldr	r4, [pc, #40]	; (cfb0 <CC_PalAbort+0x30>)
    cf88:	4a0a      	ldr	r2, [pc, #40]	; (cfb4 <CC_PalAbort+0x34>)
    cf8a:	4d0b      	ldr	r5, [pc, #44]	; (cfb8 <CC_PalAbort+0x38>)
    cf8c:	490b      	ldr	r1, [pc, #44]	; (cfbc <CC_PalAbort+0x3c>)
    cf8e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    cf92:	603b      	str	r3, [r7, #0]
    cf94:	6852      	ldr	r2, [r2, #4]
    cf96:	6033      	str	r3, [r6, #0]
    cf98:	6023      	str	r3, [r4, #0]
    cf9a:	2400      	movs	r4, #0
    cf9c:	602b      	str	r3, [r5, #0]
    cf9e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    cfa2:	bcf0      	pop	{r4, r5, r6, r7}
    cfa4:	4710      	bx	r2
    cfa6:	bf00      	nop
    cfa8:	5002b400 	.word	0x5002b400
    cfac:	5002b404 	.word	0x5002b404
    cfb0:	5002b408 	.word	0x5002b408
    cfb4:	200001a8 	.word	0x200001a8
    cfb8:	5002b40c 	.word	0x5002b40c
    cfbc:	5002a000 	.word	0x5002a000

0000cfc0 <nrf_cc3xx_platform_set_abort>:
    cfc0:	e9d0 1200 	ldrd	r1, r2, [r0]
    cfc4:	4b01      	ldr	r3, [pc, #4]	; (cfcc <nrf_cc3xx_platform_set_abort+0xc>)
    cfc6:	e9c3 1200 	strd	r1, r2, [r3]
    cfca:	4770      	bx	lr
    cfcc:	200001a8 	.word	0x200001a8

0000cfd0 <mutex_free>:
    cfd0:	b510      	push	{r4, lr}
    cfd2:	4604      	mov	r4, r0
    cfd4:	b130      	cbz	r0, cfe4 <mutex_free+0x14>
    cfd6:	6863      	ldr	r3, [r4, #4]
    cfd8:	06db      	lsls	r3, r3, #27
    cfda:	d502      	bpl.n	cfe2 <mutex_free+0x12>
    cfdc:	2300      	movs	r3, #0
    cfde:	6023      	str	r3, [r4, #0]
    cfe0:	6063      	str	r3, [r4, #4]
    cfe2:	bd10      	pop	{r4, pc}
    cfe4:	4b02      	ldr	r3, [pc, #8]	; (cff0 <mutex_free+0x20>)
    cfe6:	4803      	ldr	r0, [pc, #12]	; (cff4 <mutex_free+0x24>)
    cfe8:	685b      	ldr	r3, [r3, #4]
    cfea:	4798      	blx	r3
    cfec:	e7f3      	b.n	cfd6 <mutex_free+0x6>
    cfee:	bf00      	nop
    cff0:	200001a8 	.word	0x200001a8
    cff4:	0001f45c 	.word	0x0001f45c

0000cff8 <mutex_unlock>:
    cff8:	b168      	cbz	r0, d016 <mutex_unlock+0x1e>
    cffa:	6843      	ldr	r3, [r0, #4]
    cffc:	b13b      	cbz	r3, d00e <mutex_unlock+0x16>
    cffe:	06db      	lsls	r3, r3, #27
    d000:	d507      	bpl.n	d012 <mutex_unlock+0x1a>
    d002:	f3bf 8f5f 	dmb	sy
    d006:	2300      	movs	r3, #0
    d008:	6003      	str	r3, [r0, #0]
    d00a:	4618      	mov	r0, r3
    d00c:	4770      	bx	lr
    d00e:	4803      	ldr	r0, [pc, #12]	; (d01c <mutex_unlock+0x24>)
    d010:	4770      	bx	lr
    d012:	4803      	ldr	r0, [pc, #12]	; (d020 <mutex_unlock+0x28>)
    d014:	4770      	bx	lr
    d016:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d01a:	4770      	bx	lr
    d01c:	ffff8fea 	.word	0xffff8fea
    d020:	ffff8fe9 	.word	0xffff8fe9

0000d024 <mutex_init>:
    d024:	b510      	push	{r4, lr}
    d026:	4604      	mov	r4, r0
    d028:	b120      	cbz	r0, d034 <mutex_init+0x10>
    d02a:	2200      	movs	r2, #0
    d02c:	2311      	movs	r3, #17
    d02e:	6022      	str	r2, [r4, #0]
    d030:	6063      	str	r3, [r4, #4]
    d032:	bd10      	pop	{r4, pc}
    d034:	4801      	ldr	r0, [pc, #4]	; (d03c <mutex_init+0x18>)
    d036:	f7ff ffa3 	bl	cf80 <CC_PalAbort>
    d03a:	e7f6      	b.n	d02a <mutex_init+0x6>
    d03c:	0001f484 	.word	0x0001f484

0000d040 <mutex_lock>:
    d040:	b1c0      	cbz	r0, d074 <mutex_lock+0x34>
    d042:	6843      	ldr	r3, [r0, #4]
    d044:	b1a3      	cbz	r3, d070 <mutex_lock+0x30>
    d046:	06db      	lsls	r3, r3, #27
    d048:	d510      	bpl.n	d06c <mutex_lock+0x2c>
    d04a:	2201      	movs	r2, #1
    d04c:	f3bf 8f5b 	dmb	ish
    d050:	e850 3f00 	ldrex	r3, [r0]
    d054:	e840 2100 	strex	r1, r2, [r0]
    d058:	2900      	cmp	r1, #0
    d05a:	d1f9      	bne.n	d050 <mutex_lock+0x10>
    d05c:	f3bf 8f5b 	dmb	ish
    d060:	2b01      	cmp	r3, #1
    d062:	d0f3      	beq.n	d04c <mutex_lock+0xc>
    d064:	f3bf 8f5f 	dmb	sy
    d068:	2000      	movs	r0, #0
    d06a:	4770      	bx	lr
    d06c:	4803      	ldr	r0, [pc, #12]	; (d07c <mutex_lock+0x3c>)
    d06e:	4770      	bx	lr
    d070:	4803      	ldr	r0, [pc, #12]	; (d080 <mutex_lock+0x40>)
    d072:	4770      	bx	lr
    d074:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    d078:	4770      	bx	lr
    d07a:	bf00      	nop
    d07c:	ffff8fe9 	.word	0xffff8fe9
    d080:	ffff8fea 	.word	0xffff8fea

0000d084 <nrf_cc3xx_platform_set_mutexes>:
    d084:	b570      	push	{r4, r5, r6, lr}
    d086:	e9d0 2300 	ldrd	r2, r3, [r0]
    d08a:	4c13      	ldr	r4, [pc, #76]	; (d0d8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    d08c:	4d13      	ldr	r5, [pc, #76]	; (d0dc <nrf_cc3xx_platform_set_mutexes+0x58>)
    d08e:	e9c4 2300 	strd	r2, r3, [r4]
    d092:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    d096:	e9c4 6302 	strd	r6, r3, [r4, #8]
    d09a:	4b11      	ldr	r3, [pc, #68]	; (d0e0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    d09c:	6808      	ldr	r0, [r1, #0]
    d09e:	6018      	str	r0, [r3, #0]
    d0a0:	6848      	ldr	r0, [r1, #4]
    d0a2:	6058      	str	r0, [r3, #4]
    d0a4:	6888      	ldr	r0, [r1, #8]
    d0a6:	6098      	str	r0, [r3, #8]
    d0a8:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    d0ac:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    d0b0:	60de      	str	r6, [r3, #12]
    d0b2:	6118      	str	r0, [r3, #16]
    d0b4:	06cb      	lsls	r3, r1, #27
    d0b6:	d50d      	bpl.n	d0d4 <nrf_cc3xx_platform_set_mutexes+0x50>
    d0b8:	2300      	movs	r3, #0
    d0ba:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    d0be:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    d0c2:	f505 7088 	add.w	r0, r5, #272	; 0x110
    d0c6:	4790      	blx	r2
    d0c8:	6823      	ldr	r3, [r4, #0]
    d0ca:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    d0ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d0d2:	4718      	bx	r3
    d0d4:	bd70      	pop	{r4, r5, r6, pc}
    d0d6:	bf00      	nop
    d0d8:	200001b8 	.word	0x200001b8
    d0dc:	200022a0 	.word	0x200022a0
    d0e0:	200001c8 	.word	0x200001c8

0000d0e4 <CC_LibInitNoRng>:
    d0e4:	b510      	push	{r4, lr}
    d0e6:	f000 f833 	bl	d150 <CC_HalInit>
    d0ea:	b120      	cbz	r0, d0f6 <CC_LibInitNoRng+0x12>
    d0ec:	2403      	movs	r4, #3
    d0ee:	f000 f867 	bl	d1c0 <CC_PalTerminate>
    d0f2:	4620      	mov	r0, r4
    d0f4:	bd10      	pop	{r4, pc}
    d0f6:	f000 f835 	bl	d164 <CC_PalInit>
    d0fa:	b990      	cbnz	r0, d122 <CC_LibInitNoRng+0x3e>
    d0fc:	f000 f8b0 	bl	d260 <CC_PalPowerSaveModeSelect>
    d100:	b990      	cbnz	r0, d128 <CC_LibInitNoRng+0x44>
    d102:	4b0f      	ldr	r3, [pc, #60]	; (d140 <CC_LibInitNoRng+0x5c>)
    d104:	681b      	ldr	r3, [r3, #0]
    d106:	0e1b      	lsrs	r3, r3, #24
    d108:	2bf0      	cmp	r3, #240	; 0xf0
    d10a:	d108      	bne.n	d11e <CC_LibInitNoRng+0x3a>
    d10c:	4a0d      	ldr	r2, [pc, #52]	; (d144 <CC_LibInitNoRng+0x60>)
    d10e:	4b0e      	ldr	r3, [pc, #56]	; (d148 <CC_LibInitNoRng+0x64>)
    d110:	6812      	ldr	r2, [r2, #0]
    d112:	429a      	cmp	r2, r3
    d114:	d00a      	beq.n	d12c <CC_LibInitNoRng+0x48>
    d116:	2407      	movs	r4, #7
    d118:	f000 f81c 	bl	d154 <CC_HalTerminate>
    d11c:	e7e7      	b.n	d0ee <CC_LibInitNoRng+0xa>
    d11e:	2406      	movs	r4, #6
    d120:	e7fa      	b.n	d118 <CC_LibInitNoRng+0x34>
    d122:	2404      	movs	r4, #4
    d124:	4620      	mov	r0, r4
    d126:	bd10      	pop	{r4, pc}
    d128:	2400      	movs	r4, #0
    d12a:	e7f5      	b.n	d118 <CC_LibInitNoRng+0x34>
    d12c:	2001      	movs	r0, #1
    d12e:	f000 f897 	bl	d260 <CC_PalPowerSaveModeSelect>
    d132:	4604      	mov	r4, r0
    d134:	2800      	cmp	r0, #0
    d136:	d1f7      	bne.n	d128 <CC_LibInitNoRng+0x44>
    d138:	4b04      	ldr	r3, [pc, #16]	; (d14c <CC_LibInitNoRng+0x68>)
    d13a:	6018      	str	r0, [r3, #0]
    d13c:	e7d9      	b.n	d0f2 <CC_LibInitNoRng+0xe>
    d13e:	bf00      	nop
    d140:	5002b928 	.word	0x5002b928
    d144:	5002ba24 	.word	0x5002ba24
    d148:	20e00000 	.word	0x20e00000
    d14c:	5002ba0c 	.word	0x5002ba0c

0000d150 <CC_HalInit>:
    d150:	2000      	movs	r0, #0
    d152:	4770      	bx	lr

0000d154 <CC_HalTerminate>:
    d154:	2000      	movs	r0, #0
    d156:	4770      	bx	lr

0000d158 <CC_HalMaskInterrupt>:
    d158:	4b01      	ldr	r3, [pc, #4]	; (d160 <CC_HalMaskInterrupt+0x8>)
    d15a:	6018      	str	r0, [r3, #0]
    d15c:	4770      	bx	lr
    d15e:	bf00      	nop
    d160:	5002ba04 	.word	0x5002ba04

0000d164 <CC_PalInit>:
    d164:	b510      	push	{r4, lr}
    d166:	4811      	ldr	r0, [pc, #68]	; (d1ac <CC_PalInit+0x48>)
    d168:	f000 f848 	bl	d1fc <CC_PalMutexCreate>
    d16c:	b100      	cbz	r0, d170 <CC_PalInit+0xc>
    d16e:	bd10      	pop	{r4, pc}
    d170:	480f      	ldr	r0, [pc, #60]	; (d1b0 <CC_PalInit+0x4c>)
    d172:	f000 f843 	bl	d1fc <CC_PalMutexCreate>
    d176:	2800      	cmp	r0, #0
    d178:	d1f9      	bne.n	d16e <CC_PalInit+0xa>
    d17a:	4c0e      	ldr	r4, [pc, #56]	; (d1b4 <CC_PalInit+0x50>)
    d17c:	4620      	mov	r0, r4
    d17e:	f000 f83d 	bl	d1fc <CC_PalMutexCreate>
    d182:	2800      	cmp	r0, #0
    d184:	d1f3      	bne.n	d16e <CC_PalInit+0xa>
    d186:	4b0c      	ldr	r3, [pc, #48]	; (d1b8 <CC_PalInit+0x54>)
    d188:	480c      	ldr	r0, [pc, #48]	; (d1bc <CC_PalInit+0x58>)
    d18a:	601c      	str	r4, [r3, #0]
    d18c:	f000 f836 	bl	d1fc <CC_PalMutexCreate>
    d190:	4601      	mov	r1, r0
    d192:	2800      	cmp	r0, #0
    d194:	d1eb      	bne.n	d16e <CC_PalInit+0xa>
    d196:	f000 f82d 	bl	d1f4 <CC_PalDmaInit>
    d19a:	4604      	mov	r4, r0
    d19c:	b108      	cbz	r0, d1a2 <CC_PalInit+0x3e>
    d19e:	4620      	mov	r0, r4
    d1a0:	bd10      	pop	{r4, pc}
    d1a2:	f000 f83f 	bl	d224 <CC_PalPowerSaveModeInit>
    d1a6:	4620      	mov	r0, r4
    d1a8:	e7fa      	b.n	d1a0 <CC_PalInit+0x3c>
    d1aa:	bf00      	nop
    d1ac:	20000200 	.word	0x20000200
    d1b0:	200001f4 	.word	0x200001f4
    d1b4:	200001fc 	.word	0x200001fc
    d1b8:	20000204 	.word	0x20000204
    d1bc:	200001f8 	.word	0x200001f8

0000d1c0 <CC_PalTerminate>:
    d1c0:	b508      	push	{r3, lr}
    d1c2:	4808      	ldr	r0, [pc, #32]	; (d1e4 <CC_PalTerminate+0x24>)
    d1c4:	f000 f824 	bl	d210 <CC_PalMutexDestroy>
    d1c8:	4807      	ldr	r0, [pc, #28]	; (d1e8 <CC_PalTerminate+0x28>)
    d1ca:	f000 f821 	bl	d210 <CC_PalMutexDestroy>
    d1ce:	4807      	ldr	r0, [pc, #28]	; (d1ec <CC_PalTerminate+0x2c>)
    d1d0:	f000 f81e 	bl	d210 <CC_PalMutexDestroy>
    d1d4:	4806      	ldr	r0, [pc, #24]	; (d1f0 <CC_PalTerminate+0x30>)
    d1d6:	f000 f81b 	bl	d210 <CC_PalMutexDestroy>
    d1da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d1de:	f000 b80b 	b.w	d1f8 <CC_PalDmaTerminate>
    d1e2:	bf00      	nop
    d1e4:	20000200 	.word	0x20000200
    d1e8:	200001f4 	.word	0x200001f4
    d1ec:	200001fc 	.word	0x200001fc
    d1f0:	200001f8 	.word	0x200001f8

0000d1f4 <CC_PalDmaInit>:
    d1f4:	2000      	movs	r0, #0
    d1f6:	4770      	bx	lr

0000d1f8 <CC_PalDmaTerminate>:
    d1f8:	4770      	bx	lr
    d1fa:	bf00      	nop

0000d1fc <CC_PalMutexCreate>:
    d1fc:	b508      	push	{r3, lr}
    d1fe:	4b03      	ldr	r3, [pc, #12]	; (d20c <CC_PalMutexCreate+0x10>)
    d200:	6802      	ldr	r2, [r0, #0]
    d202:	681b      	ldr	r3, [r3, #0]
    d204:	6810      	ldr	r0, [r2, #0]
    d206:	4798      	blx	r3
    d208:	2000      	movs	r0, #0
    d20a:	bd08      	pop	{r3, pc}
    d20c:	200001b8 	.word	0x200001b8

0000d210 <CC_PalMutexDestroy>:
    d210:	b508      	push	{r3, lr}
    d212:	4b03      	ldr	r3, [pc, #12]	; (d220 <CC_PalMutexDestroy+0x10>)
    d214:	6802      	ldr	r2, [r0, #0]
    d216:	685b      	ldr	r3, [r3, #4]
    d218:	6810      	ldr	r0, [r2, #0]
    d21a:	4798      	blx	r3
    d21c:	2000      	movs	r0, #0
    d21e:	bd08      	pop	{r3, pc}
    d220:	200001b8 	.word	0x200001b8

0000d224 <CC_PalPowerSaveModeInit>:
    d224:	b570      	push	{r4, r5, r6, lr}
    d226:	4c09      	ldr	r4, [pc, #36]	; (d24c <CC_PalPowerSaveModeInit+0x28>)
    d228:	4d09      	ldr	r5, [pc, #36]	; (d250 <CC_PalPowerSaveModeInit+0x2c>)
    d22a:	6920      	ldr	r0, [r4, #16]
    d22c:	68ab      	ldr	r3, [r5, #8]
    d22e:	4798      	blx	r3
    d230:	b118      	cbz	r0, d23a <CC_PalPowerSaveModeInit+0x16>
    d232:	4b08      	ldr	r3, [pc, #32]	; (d254 <CC_PalPowerSaveModeInit+0x30>)
    d234:	4808      	ldr	r0, [pc, #32]	; (d258 <CC_PalPowerSaveModeInit+0x34>)
    d236:	685b      	ldr	r3, [r3, #4]
    d238:	4798      	blx	r3
    d23a:	4a08      	ldr	r2, [pc, #32]	; (d25c <CC_PalPowerSaveModeInit+0x38>)
    d23c:	68eb      	ldr	r3, [r5, #12]
    d23e:	6920      	ldr	r0, [r4, #16]
    d240:	2100      	movs	r1, #0
    d242:	6011      	str	r1, [r2, #0]
    d244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d248:	4718      	bx	r3
    d24a:	bf00      	nop
    d24c:	200001c8 	.word	0x200001c8
    d250:	200001b8 	.word	0x200001b8
    d254:	200001a8 	.word	0x200001a8
    d258:	0001f4a8 	.word	0x0001f4a8
    d25c:	20001224 	.word	0x20001224

0000d260 <CC_PalPowerSaveModeSelect>:
    d260:	b570      	push	{r4, r5, r6, lr}
    d262:	4d1a      	ldr	r5, [pc, #104]	; (d2cc <CC_PalPowerSaveModeSelect+0x6c>)
    d264:	4e1a      	ldr	r6, [pc, #104]	; (d2d0 <CC_PalPowerSaveModeSelect+0x70>)
    d266:	4604      	mov	r4, r0
    d268:	68b2      	ldr	r2, [r6, #8]
    d26a:	6928      	ldr	r0, [r5, #16]
    d26c:	4790      	blx	r2
    d26e:	b9f0      	cbnz	r0, d2ae <CC_PalPowerSaveModeSelect+0x4e>
    d270:	b15c      	cbz	r4, d28a <CC_PalPowerSaveModeSelect+0x2a>
    d272:	4c18      	ldr	r4, [pc, #96]	; (d2d4 <CC_PalPowerSaveModeSelect+0x74>)
    d274:	6823      	ldr	r3, [r4, #0]
    d276:	b1ab      	cbz	r3, d2a4 <CC_PalPowerSaveModeSelect+0x44>
    d278:	2b01      	cmp	r3, #1
    d27a:	d01a      	beq.n	d2b2 <CC_PalPowerSaveModeSelect+0x52>
    d27c:	3b01      	subs	r3, #1
    d27e:	6023      	str	r3, [r4, #0]
    d280:	6928      	ldr	r0, [r5, #16]
    d282:	68f3      	ldr	r3, [r6, #12]
    d284:	4798      	blx	r3
    d286:	2000      	movs	r0, #0
    d288:	bd70      	pop	{r4, r5, r6, pc}
    d28a:	4c12      	ldr	r4, [pc, #72]	; (d2d4 <CC_PalPowerSaveModeSelect+0x74>)
    d28c:	6821      	ldr	r1, [r4, #0]
    d28e:	b939      	cbnz	r1, d2a0 <CC_PalPowerSaveModeSelect+0x40>
    d290:	4b11      	ldr	r3, [pc, #68]	; (d2d8 <CC_PalPowerSaveModeSelect+0x78>)
    d292:	4a12      	ldr	r2, [pc, #72]	; (d2dc <CC_PalPowerSaveModeSelect+0x7c>)
    d294:	2001      	movs	r0, #1
    d296:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    d29a:	6813      	ldr	r3, [r2, #0]
    d29c:	2b00      	cmp	r3, #0
    d29e:	d1fc      	bne.n	d29a <CC_PalPowerSaveModeSelect+0x3a>
    d2a0:	3101      	adds	r1, #1
    d2a2:	6021      	str	r1, [r4, #0]
    d2a4:	68f3      	ldr	r3, [r6, #12]
    d2a6:	6928      	ldr	r0, [r5, #16]
    d2a8:	4798      	blx	r3
    d2aa:	2000      	movs	r0, #0
    d2ac:	bd70      	pop	{r4, r5, r6, pc}
    d2ae:	480c      	ldr	r0, [pc, #48]	; (d2e0 <CC_PalPowerSaveModeSelect+0x80>)
    d2b0:	bd70      	pop	{r4, r5, r6, pc}
    d2b2:	4a0a      	ldr	r2, [pc, #40]	; (d2dc <CC_PalPowerSaveModeSelect+0x7c>)
    d2b4:	6813      	ldr	r3, [r2, #0]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d1fc      	bne.n	d2b4 <CC_PalPowerSaveModeSelect+0x54>
    d2ba:	4a07      	ldr	r2, [pc, #28]	; (d2d8 <CC_PalPowerSaveModeSelect+0x78>)
    d2bc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    d2c0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    d2c4:	f7ff ff48 	bl	d158 <CC_HalMaskInterrupt>
    d2c8:	6823      	ldr	r3, [r4, #0]
    d2ca:	e7d7      	b.n	d27c <CC_PalPowerSaveModeSelect+0x1c>
    d2cc:	200001c8 	.word	0x200001c8
    d2d0:	200001b8 	.word	0x200001b8
    d2d4:	20001224 	.word	0x20001224
    d2d8:	5002a000 	.word	0x5002a000
    d2dc:	5002b910 	.word	0x5002b910
    d2e0:	ffff8fe9 	.word	0xffff8fe9

0000d2e4 <calloc>:
    d2e4:	4b02      	ldr	r3, [pc, #8]	; (d2f0 <calloc+0xc>)
    d2e6:	460a      	mov	r2, r1
    d2e8:	4601      	mov	r1, r0
    d2ea:	6818      	ldr	r0, [r3, #0]
    d2ec:	f010 bfcc 	b.w	1e288 <_calloc_r>
    d2f0:	20000208 	.word	0x20000208

0000d2f4 <malloc>:
    d2f4:	4b02      	ldr	r3, [pc, #8]	; (d300 <malloc+0xc>)
    d2f6:	4601      	mov	r1, r0
    d2f8:	6818      	ldr	r0, [r3, #0]
    d2fa:	f000 b859 	b.w	d3b0 <_malloc_r>
    d2fe:	bf00      	nop
    d300:	20000208 	.word	0x20000208

0000d304 <free>:
    d304:	4b02      	ldr	r3, [pc, #8]	; (d310 <free+0xc>)
    d306:	4601      	mov	r1, r0
    d308:	6818      	ldr	r0, [r3, #0]
    d30a:	f000 b803 	b.w	d314 <_free_r>
    d30e:	bf00      	nop
    d310:	20000208 	.word	0x20000208

0000d314 <_free_r>:
    d314:	b538      	push	{r3, r4, r5, lr}
    d316:	4605      	mov	r5, r0
    d318:	2900      	cmp	r1, #0
    d31a:	d045      	beq.n	d3a8 <_free_r+0x94>
    d31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d320:	1f0c      	subs	r4, r1, #4
    d322:	2b00      	cmp	r3, #0
    d324:	bfb8      	it	lt
    d326:	18e4      	addlt	r4, r4, r3
    d328:	f000 f90c 	bl	d544 <__malloc_lock>
    d32c:	4a1f      	ldr	r2, [pc, #124]	; (d3ac <_free_r+0x98>)
    d32e:	6813      	ldr	r3, [r2, #0]
    d330:	4610      	mov	r0, r2
    d332:	b933      	cbnz	r3, d342 <_free_r+0x2e>
    d334:	6063      	str	r3, [r4, #4]
    d336:	6014      	str	r4, [r2, #0]
    d338:	4628      	mov	r0, r5
    d33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d33e:	f000 b907 	b.w	d550 <__malloc_unlock>
    d342:	42a3      	cmp	r3, r4
    d344:	d90b      	bls.n	d35e <_free_r+0x4a>
    d346:	6821      	ldr	r1, [r4, #0]
    d348:	1862      	adds	r2, r4, r1
    d34a:	4293      	cmp	r3, r2
    d34c:	bf04      	itt	eq
    d34e:	681a      	ldreq	r2, [r3, #0]
    d350:	685b      	ldreq	r3, [r3, #4]
    d352:	6063      	str	r3, [r4, #4]
    d354:	bf04      	itt	eq
    d356:	1852      	addeq	r2, r2, r1
    d358:	6022      	streq	r2, [r4, #0]
    d35a:	6004      	str	r4, [r0, #0]
    d35c:	e7ec      	b.n	d338 <_free_r+0x24>
    d35e:	461a      	mov	r2, r3
    d360:	685b      	ldr	r3, [r3, #4]
    d362:	b10b      	cbz	r3, d368 <_free_r+0x54>
    d364:	42a3      	cmp	r3, r4
    d366:	d9fa      	bls.n	d35e <_free_r+0x4a>
    d368:	6811      	ldr	r1, [r2, #0]
    d36a:	1850      	adds	r0, r2, r1
    d36c:	42a0      	cmp	r0, r4
    d36e:	d10b      	bne.n	d388 <_free_r+0x74>
    d370:	6820      	ldr	r0, [r4, #0]
    d372:	4401      	add	r1, r0
    d374:	1850      	adds	r0, r2, r1
    d376:	4283      	cmp	r3, r0
    d378:	6011      	str	r1, [r2, #0]
    d37a:	d1dd      	bne.n	d338 <_free_r+0x24>
    d37c:	6818      	ldr	r0, [r3, #0]
    d37e:	685b      	ldr	r3, [r3, #4]
    d380:	6053      	str	r3, [r2, #4]
    d382:	4401      	add	r1, r0
    d384:	6011      	str	r1, [r2, #0]
    d386:	e7d7      	b.n	d338 <_free_r+0x24>
    d388:	d902      	bls.n	d390 <_free_r+0x7c>
    d38a:	230c      	movs	r3, #12
    d38c:	602b      	str	r3, [r5, #0]
    d38e:	e7d3      	b.n	d338 <_free_r+0x24>
    d390:	6820      	ldr	r0, [r4, #0]
    d392:	1821      	adds	r1, r4, r0
    d394:	428b      	cmp	r3, r1
    d396:	bf04      	itt	eq
    d398:	6819      	ldreq	r1, [r3, #0]
    d39a:	685b      	ldreq	r3, [r3, #4]
    d39c:	6063      	str	r3, [r4, #4]
    d39e:	bf04      	itt	eq
    d3a0:	1809      	addeq	r1, r1, r0
    d3a2:	6021      	streq	r1, [r4, #0]
    d3a4:	6054      	str	r4, [r2, #4]
    d3a6:	e7c7      	b.n	d338 <_free_r+0x24>
    d3a8:	bd38      	pop	{r3, r4, r5, pc}
    d3aa:	bf00      	nop
    d3ac:	20001228 	.word	0x20001228

0000d3b0 <_malloc_r>:
    d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3b2:	1ccd      	adds	r5, r1, #3
    d3b4:	f025 0503 	bic.w	r5, r5, #3
    d3b8:	3508      	adds	r5, #8
    d3ba:	2d0c      	cmp	r5, #12
    d3bc:	bf38      	it	cc
    d3be:	250c      	movcc	r5, #12
    d3c0:	2d00      	cmp	r5, #0
    d3c2:	4606      	mov	r6, r0
    d3c4:	db01      	blt.n	d3ca <_malloc_r+0x1a>
    d3c6:	42a9      	cmp	r1, r5
    d3c8:	d903      	bls.n	d3d2 <_malloc_r+0x22>
    d3ca:	230c      	movs	r3, #12
    d3cc:	6033      	str	r3, [r6, #0]
    d3ce:	2000      	movs	r0, #0
    d3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3d2:	f000 f8b7 	bl	d544 <__malloc_lock>
    d3d6:	4921      	ldr	r1, [pc, #132]	; (d45c <_malloc_r+0xac>)
    d3d8:	680a      	ldr	r2, [r1, #0]
    d3da:	4614      	mov	r4, r2
    d3dc:	b99c      	cbnz	r4, d406 <_malloc_r+0x56>
    d3de:	4f20      	ldr	r7, [pc, #128]	; (d460 <_malloc_r+0xb0>)
    d3e0:	683b      	ldr	r3, [r7, #0]
    d3e2:	b923      	cbnz	r3, d3ee <_malloc_r+0x3e>
    d3e4:	4621      	mov	r1, r4
    d3e6:	4630      	mov	r0, r6
    d3e8:	f000 f844 	bl	d474 <_sbrk_r>
    d3ec:	6038      	str	r0, [r7, #0]
    d3ee:	4629      	mov	r1, r5
    d3f0:	4630      	mov	r0, r6
    d3f2:	f000 f83f 	bl	d474 <_sbrk_r>
    d3f6:	1c43      	adds	r3, r0, #1
    d3f8:	d123      	bne.n	d442 <_malloc_r+0x92>
    d3fa:	230c      	movs	r3, #12
    d3fc:	6033      	str	r3, [r6, #0]
    d3fe:	4630      	mov	r0, r6
    d400:	f000 f8a6 	bl	d550 <__malloc_unlock>
    d404:	e7e3      	b.n	d3ce <_malloc_r+0x1e>
    d406:	6823      	ldr	r3, [r4, #0]
    d408:	1b5b      	subs	r3, r3, r5
    d40a:	d417      	bmi.n	d43c <_malloc_r+0x8c>
    d40c:	2b0b      	cmp	r3, #11
    d40e:	d903      	bls.n	d418 <_malloc_r+0x68>
    d410:	6023      	str	r3, [r4, #0]
    d412:	441c      	add	r4, r3
    d414:	6025      	str	r5, [r4, #0]
    d416:	e004      	b.n	d422 <_malloc_r+0x72>
    d418:	6863      	ldr	r3, [r4, #4]
    d41a:	42a2      	cmp	r2, r4
    d41c:	bf0c      	ite	eq
    d41e:	600b      	streq	r3, [r1, #0]
    d420:	6053      	strne	r3, [r2, #4]
    d422:	4630      	mov	r0, r6
    d424:	f000 f894 	bl	d550 <__malloc_unlock>
    d428:	f104 000b 	add.w	r0, r4, #11
    d42c:	1d23      	adds	r3, r4, #4
    d42e:	f020 0007 	bic.w	r0, r0, #7
    d432:	1ac2      	subs	r2, r0, r3
    d434:	d0cc      	beq.n	d3d0 <_malloc_r+0x20>
    d436:	1a1b      	subs	r3, r3, r0
    d438:	50a3      	str	r3, [r4, r2]
    d43a:	e7c9      	b.n	d3d0 <_malloc_r+0x20>
    d43c:	4622      	mov	r2, r4
    d43e:	6864      	ldr	r4, [r4, #4]
    d440:	e7cc      	b.n	d3dc <_malloc_r+0x2c>
    d442:	1cc4      	adds	r4, r0, #3
    d444:	f024 0403 	bic.w	r4, r4, #3
    d448:	42a0      	cmp	r0, r4
    d44a:	d0e3      	beq.n	d414 <_malloc_r+0x64>
    d44c:	1a21      	subs	r1, r4, r0
    d44e:	4630      	mov	r0, r6
    d450:	f000 f810 	bl	d474 <_sbrk_r>
    d454:	3001      	adds	r0, #1
    d456:	d1dd      	bne.n	d414 <_malloc_r+0x64>
    d458:	e7cf      	b.n	d3fa <_malloc_r+0x4a>
    d45a:	bf00      	nop
    d45c:	20001228 	.word	0x20001228
    d460:	2000122c 	.word	0x2000122c

0000d464 <realloc>:
    d464:	4b02      	ldr	r3, [pc, #8]	; (d470 <realloc+0xc>)
    d466:	460a      	mov	r2, r1
    d468:	4601      	mov	r1, r0
    d46a:	6818      	ldr	r0, [r3, #0]
    d46c:	f010 bf8a 	b.w	1e384 <_realloc_r>
    d470:	20000208 	.word	0x20000208

0000d474 <_sbrk_r>:
    d474:	b538      	push	{r3, r4, r5, lr}
    d476:	4d06      	ldr	r5, [pc, #24]	; (d490 <_sbrk_r+0x1c>)
    d478:	2300      	movs	r3, #0
    d47a:	4604      	mov	r4, r0
    d47c:	4608      	mov	r0, r1
    d47e:	602b      	str	r3, [r5, #0]
    d480:	f7f9 fe0e 	bl	70a0 <_sbrk>
    d484:	1c43      	adds	r3, r0, #1
    d486:	d102      	bne.n	d48e <_sbrk_r+0x1a>
    d488:	682b      	ldr	r3, [r5, #0]
    d48a:	b103      	cbz	r3, d48e <_sbrk_r+0x1a>
    d48c:	6023      	str	r3, [r4, #0]
    d48e:	bd38      	pop	{r3, r4, r5, pc}
    d490:	2000245c 	.word	0x2000245c

0000d494 <siscanf>:
    d494:	b40e      	push	{r1, r2, r3}
    d496:	b530      	push	{r4, r5, lr}
    d498:	b09c      	sub	sp, #112	; 0x70
    d49a:	ac1f      	add	r4, sp, #124	; 0x7c
    d49c:	f44f 7201 	mov.w	r2, #516	; 0x204
    d4a0:	f854 5b04 	ldr.w	r5, [r4], #4
    d4a4:	f8ad 2014 	strh.w	r2, [sp, #20]
    d4a8:	9002      	str	r0, [sp, #8]
    d4aa:	9006      	str	r0, [sp, #24]
    d4ac:	f7f3 fc88 	bl	dc0 <strlen>
    d4b0:	4b0b      	ldr	r3, [pc, #44]	; (d4e0 <siscanf+0x4c>)
    d4b2:	9003      	str	r0, [sp, #12]
    d4b4:	9007      	str	r0, [sp, #28]
    d4b6:	930b      	str	r3, [sp, #44]	; 0x2c
    d4b8:	480a      	ldr	r0, [pc, #40]	; (d4e4 <siscanf+0x50>)
    d4ba:	9401      	str	r4, [sp, #4]
    d4bc:	2300      	movs	r3, #0
    d4be:	930f      	str	r3, [sp, #60]	; 0x3c
    d4c0:	9314      	str	r3, [sp, #80]	; 0x50
    d4c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d4c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    d4ca:	462a      	mov	r2, r5
    d4cc:	4623      	mov	r3, r4
    d4ce:	a902      	add	r1, sp, #8
    d4d0:	6800      	ldr	r0, [r0, #0]
    d4d2:	f000 f943 	bl	d75c <__ssvfiscanf_r>
    d4d6:	b01c      	add	sp, #112	; 0x70
    d4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d4dc:	b003      	add	sp, #12
    d4de:	4770      	bx	lr
    d4e0:	0001e2d9 	.word	0x0001e2d9
    d4e4:	20000208 	.word	0x20000208

0000d4e8 <vsniprintf>:
    d4e8:	b507      	push	{r0, r1, r2, lr}
    d4ea:	9300      	str	r3, [sp, #0]
    d4ec:	4613      	mov	r3, r2
    d4ee:	460a      	mov	r2, r1
    d4f0:	4601      	mov	r1, r0
    d4f2:	4803      	ldr	r0, [pc, #12]	; (d500 <vsniprintf+0x18>)
    d4f4:	6800      	ldr	r0, [r0, #0]
    d4f6:	f010 ff19 	bl	1e32c <_vsniprintf_r>
    d4fa:	b003      	add	sp, #12
    d4fc:	f85d fb04 	ldr.w	pc, [sp], #4
    d500:	20000208 	.word	0x20000208

0000d504 <_vsiprintf_r>:
    d504:	b500      	push	{lr}
    d506:	b09b      	sub	sp, #108	; 0x6c
    d508:	9100      	str	r1, [sp, #0]
    d50a:	9104      	str	r1, [sp, #16]
    d50c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d510:	9105      	str	r1, [sp, #20]
    d512:	9102      	str	r1, [sp, #8]
    d514:	4905      	ldr	r1, [pc, #20]	; (d52c <_vsiprintf_r+0x28>)
    d516:	9103      	str	r1, [sp, #12]
    d518:	4669      	mov	r1, sp
    d51a:	f000 f81f 	bl	d55c <_svfiprintf_r>
    d51e:	9b00      	ldr	r3, [sp, #0]
    d520:	2200      	movs	r2, #0
    d522:	701a      	strb	r2, [r3, #0]
    d524:	b01b      	add	sp, #108	; 0x6c
    d526:	f85d fb04 	ldr.w	pc, [sp], #4
    d52a:	bf00      	nop
    d52c:	ffff0208 	.word	0xffff0208

0000d530 <vsiprintf>:
    d530:	4613      	mov	r3, r2
    d532:	460a      	mov	r2, r1
    d534:	4601      	mov	r1, r0
    d536:	4802      	ldr	r0, [pc, #8]	; (d540 <vsiprintf+0x10>)
    d538:	6800      	ldr	r0, [r0, #0]
    d53a:	f7ff bfe3 	b.w	d504 <_vsiprintf_r>
    d53e:	bf00      	nop
    d540:	20000208 	.word	0x20000208

0000d544 <__malloc_lock>:
    d544:	4801      	ldr	r0, [pc, #4]	; (d54c <__malloc_lock+0x8>)
    d546:	f00f bd85 	b.w	1d054 <__retarget_lock_acquire_recursive>
    d54a:	bf00      	nop
    d54c:	200002d0 	.word	0x200002d0

0000d550 <__malloc_unlock>:
    d550:	4801      	ldr	r0, [pc, #4]	; (d558 <__malloc_unlock+0x8>)
    d552:	f00f bd85 	b.w	1d060 <__retarget_lock_release_recursive>
    d556:	bf00      	nop
    d558:	200002d0 	.word	0x200002d0

0000d55c <_svfiprintf_r>:
    d55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d560:	4698      	mov	r8, r3
    d562:	898b      	ldrh	r3, [r1, #12]
    d564:	061b      	lsls	r3, r3, #24
    d566:	b09d      	sub	sp, #116	; 0x74
    d568:	4607      	mov	r7, r0
    d56a:	460d      	mov	r5, r1
    d56c:	4614      	mov	r4, r2
    d56e:	d50e      	bpl.n	d58e <_svfiprintf_r+0x32>
    d570:	690b      	ldr	r3, [r1, #16]
    d572:	b963      	cbnz	r3, d58e <_svfiprintf_r+0x32>
    d574:	2140      	movs	r1, #64	; 0x40
    d576:	f7ff ff1b 	bl	d3b0 <_malloc_r>
    d57a:	6028      	str	r0, [r5, #0]
    d57c:	6128      	str	r0, [r5, #16]
    d57e:	b920      	cbnz	r0, d58a <_svfiprintf_r+0x2e>
    d580:	230c      	movs	r3, #12
    d582:	603b      	str	r3, [r7, #0]
    d584:	f04f 30ff 	mov.w	r0, #4294967295
    d588:	e0d1      	b.n	d72e <_svfiprintf_r+0x1d2>
    d58a:	2340      	movs	r3, #64	; 0x40
    d58c:	616b      	str	r3, [r5, #20]
    d58e:	2300      	movs	r3, #0
    d590:	9309      	str	r3, [sp, #36]	; 0x24
    d592:	2320      	movs	r3, #32
    d594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    d598:	f8cd 800c 	str.w	r8, [sp, #12]
    d59c:	2330      	movs	r3, #48	; 0x30
    d59e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; d748 <_svfiprintf_r+0x1ec>
    d5a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    d5a6:	f04f 0901 	mov.w	r9, #1
    d5aa:	4623      	mov	r3, r4
    d5ac:	469a      	mov	sl, r3
    d5ae:	f813 2b01 	ldrb.w	r2, [r3], #1
    d5b2:	b10a      	cbz	r2, d5b8 <_svfiprintf_r+0x5c>
    d5b4:	2a25      	cmp	r2, #37	; 0x25
    d5b6:	d1f9      	bne.n	d5ac <_svfiprintf_r+0x50>
    d5b8:	ebba 0b04 	subs.w	fp, sl, r4
    d5bc:	d00b      	beq.n	d5d6 <_svfiprintf_r+0x7a>
    d5be:	465b      	mov	r3, fp
    d5c0:	4622      	mov	r2, r4
    d5c2:	4629      	mov	r1, r5
    d5c4:	4638      	mov	r0, r7
    d5c6:	f010 ff03 	bl	1e3d0 <__ssputs_r>
    d5ca:	3001      	adds	r0, #1
    d5cc:	f000 80aa 	beq.w	d724 <_svfiprintf_r+0x1c8>
    d5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d5d2:	445a      	add	r2, fp
    d5d4:	9209      	str	r2, [sp, #36]	; 0x24
    d5d6:	f89a 3000 	ldrb.w	r3, [sl]
    d5da:	2b00      	cmp	r3, #0
    d5dc:	f000 80a2 	beq.w	d724 <_svfiprintf_r+0x1c8>
    d5e0:	2300      	movs	r3, #0
    d5e2:	f04f 32ff 	mov.w	r2, #4294967295
    d5e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    d5ea:	f10a 0a01 	add.w	sl, sl, #1
    d5ee:	9304      	str	r3, [sp, #16]
    d5f0:	9307      	str	r3, [sp, #28]
    d5f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    d5f6:	931a      	str	r3, [sp, #104]	; 0x68
    d5f8:	4654      	mov	r4, sl
    d5fa:	2205      	movs	r2, #5
    d5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
    d600:	4851      	ldr	r0, [pc, #324]	; (d748 <_svfiprintf_r+0x1ec>)
    d602:	f7f2 fd7d 	bl	100 <memchr>
    d606:	9a04      	ldr	r2, [sp, #16]
    d608:	b9d8      	cbnz	r0, d642 <_svfiprintf_r+0xe6>
    d60a:	06d0      	lsls	r0, r2, #27
    d60c:	bf44      	itt	mi
    d60e:	2320      	movmi	r3, #32
    d610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    d614:	0711      	lsls	r1, r2, #28
    d616:	bf44      	itt	mi
    d618:	232b      	movmi	r3, #43	; 0x2b
    d61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    d61e:	f89a 3000 	ldrb.w	r3, [sl]
    d622:	2b2a      	cmp	r3, #42	; 0x2a
    d624:	d015      	beq.n	d652 <_svfiprintf_r+0xf6>
    d626:	9a07      	ldr	r2, [sp, #28]
    d628:	4654      	mov	r4, sl
    d62a:	2000      	movs	r0, #0
    d62c:	f04f 0c0a 	mov.w	ip, #10
    d630:	4621      	mov	r1, r4
    d632:	f811 3b01 	ldrb.w	r3, [r1], #1
    d636:	3b30      	subs	r3, #48	; 0x30
    d638:	2b09      	cmp	r3, #9
    d63a:	d94e      	bls.n	d6da <_svfiprintf_r+0x17e>
    d63c:	b1b0      	cbz	r0, d66c <_svfiprintf_r+0x110>
    d63e:	9207      	str	r2, [sp, #28]
    d640:	e014      	b.n	d66c <_svfiprintf_r+0x110>
    d642:	eba0 0308 	sub.w	r3, r0, r8
    d646:	fa09 f303 	lsl.w	r3, r9, r3
    d64a:	4313      	orrs	r3, r2
    d64c:	9304      	str	r3, [sp, #16]
    d64e:	46a2      	mov	sl, r4
    d650:	e7d2      	b.n	d5f8 <_svfiprintf_r+0x9c>
    d652:	9b03      	ldr	r3, [sp, #12]
    d654:	1d19      	adds	r1, r3, #4
    d656:	681b      	ldr	r3, [r3, #0]
    d658:	9103      	str	r1, [sp, #12]
    d65a:	2b00      	cmp	r3, #0
    d65c:	bfbb      	ittet	lt
    d65e:	425b      	neglt	r3, r3
    d660:	f042 0202 	orrlt.w	r2, r2, #2
    d664:	9307      	strge	r3, [sp, #28]
    d666:	9307      	strlt	r3, [sp, #28]
    d668:	bfb8      	it	lt
    d66a:	9204      	strlt	r2, [sp, #16]
    d66c:	7823      	ldrb	r3, [r4, #0]
    d66e:	2b2e      	cmp	r3, #46	; 0x2e
    d670:	d10c      	bne.n	d68c <_svfiprintf_r+0x130>
    d672:	7863      	ldrb	r3, [r4, #1]
    d674:	2b2a      	cmp	r3, #42	; 0x2a
    d676:	d135      	bne.n	d6e4 <_svfiprintf_r+0x188>
    d678:	9b03      	ldr	r3, [sp, #12]
    d67a:	1d1a      	adds	r2, r3, #4
    d67c:	681b      	ldr	r3, [r3, #0]
    d67e:	9203      	str	r2, [sp, #12]
    d680:	2b00      	cmp	r3, #0
    d682:	bfb8      	it	lt
    d684:	f04f 33ff 	movlt.w	r3, #4294967295
    d688:	3402      	adds	r4, #2
    d68a:	9305      	str	r3, [sp, #20]
    d68c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; d758 <_svfiprintf_r+0x1fc>
    d690:	7821      	ldrb	r1, [r4, #0]
    d692:	2203      	movs	r2, #3
    d694:	4650      	mov	r0, sl
    d696:	f7f2 fd33 	bl	100 <memchr>
    d69a:	b140      	cbz	r0, d6ae <_svfiprintf_r+0x152>
    d69c:	2340      	movs	r3, #64	; 0x40
    d69e:	eba0 000a 	sub.w	r0, r0, sl
    d6a2:	fa03 f000 	lsl.w	r0, r3, r0
    d6a6:	9b04      	ldr	r3, [sp, #16]
    d6a8:	4303      	orrs	r3, r0
    d6aa:	3401      	adds	r4, #1
    d6ac:	9304      	str	r3, [sp, #16]
    d6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
    d6b2:	4826      	ldr	r0, [pc, #152]	; (d74c <_svfiprintf_r+0x1f0>)
    d6b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d6b8:	2206      	movs	r2, #6
    d6ba:	f7f2 fd21 	bl	100 <memchr>
    d6be:	2800      	cmp	r0, #0
    d6c0:	d038      	beq.n	d734 <_svfiprintf_r+0x1d8>
    d6c2:	4b23      	ldr	r3, [pc, #140]	; (d750 <_svfiprintf_r+0x1f4>)
    d6c4:	bb1b      	cbnz	r3, d70e <_svfiprintf_r+0x1b2>
    d6c6:	9b03      	ldr	r3, [sp, #12]
    d6c8:	3307      	adds	r3, #7
    d6ca:	f023 0307 	bic.w	r3, r3, #7
    d6ce:	3308      	adds	r3, #8
    d6d0:	9303      	str	r3, [sp, #12]
    d6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6d4:	4433      	add	r3, r6
    d6d6:	9309      	str	r3, [sp, #36]	; 0x24
    d6d8:	e767      	b.n	d5aa <_svfiprintf_r+0x4e>
    d6da:	fb0c 3202 	mla	r2, ip, r2, r3
    d6de:	460c      	mov	r4, r1
    d6e0:	2001      	movs	r0, #1
    d6e2:	e7a5      	b.n	d630 <_svfiprintf_r+0xd4>
    d6e4:	2300      	movs	r3, #0
    d6e6:	3401      	adds	r4, #1
    d6e8:	9305      	str	r3, [sp, #20]
    d6ea:	4619      	mov	r1, r3
    d6ec:	f04f 0c0a 	mov.w	ip, #10
    d6f0:	4620      	mov	r0, r4
    d6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
    d6f6:	3a30      	subs	r2, #48	; 0x30
    d6f8:	2a09      	cmp	r2, #9
    d6fa:	d903      	bls.n	d704 <_svfiprintf_r+0x1a8>
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d0c5      	beq.n	d68c <_svfiprintf_r+0x130>
    d700:	9105      	str	r1, [sp, #20]
    d702:	e7c3      	b.n	d68c <_svfiprintf_r+0x130>
    d704:	fb0c 2101 	mla	r1, ip, r1, r2
    d708:	4604      	mov	r4, r0
    d70a:	2301      	movs	r3, #1
    d70c:	e7f0      	b.n	d6f0 <_svfiprintf_r+0x194>
    d70e:	ab03      	add	r3, sp, #12
    d710:	9300      	str	r3, [sp, #0]
    d712:	462a      	mov	r2, r5
    d714:	4b0f      	ldr	r3, [pc, #60]	; (d754 <_svfiprintf_r+0x1f8>)
    d716:	a904      	add	r1, sp, #16
    d718:	4638      	mov	r0, r7
    d71a:	f3af 8000 	nop.w
    d71e:	1c42      	adds	r2, r0, #1
    d720:	4606      	mov	r6, r0
    d722:	d1d6      	bne.n	d6d2 <_svfiprintf_r+0x176>
    d724:	89ab      	ldrh	r3, [r5, #12]
    d726:	065b      	lsls	r3, r3, #25
    d728:	f53f af2c 	bmi.w	d584 <_svfiprintf_r+0x28>
    d72c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d72e:	b01d      	add	sp, #116	; 0x74
    d730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d734:	ab03      	add	r3, sp, #12
    d736:	9300      	str	r3, [sp, #0]
    d738:	462a      	mov	r2, r5
    d73a:	4b06      	ldr	r3, [pc, #24]	; (d754 <_svfiprintf_r+0x1f8>)
    d73c:	a904      	add	r1, sp, #16
    d73e:	4638      	mov	r0, r7
    d740:	f000 f984 	bl	da4c <_printf_i>
    d744:	e7eb      	b.n	d71e <_svfiprintf_r+0x1c2>
    d746:	bf00      	nop
    d748:	00020675 	.word	0x00020675
    d74c:	0002067f 	.word	0x0002067f
    d750:	00000000 	.word	0x00000000
    d754:	0001e3d1 	.word	0x0001e3d1
    d758:	0002067b 	.word	0x0002067b

0000d75c <__ssvfiscanf_r>:
    d75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d760:	460c      	mov	r4, r1
    d762:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
    d766:	2100      	movs	r1, #0
    d768:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
    d76c:	49b2      	ldr	r1, [pc, #712]	; (da38 <__ssvfiscanf_r+0x2dc>)
    d76e:	91a0      	str	r1, [sp, #640]	; 0x280
    d770:	f10d 0804 	add.w	r8, sp, #4
    d774:	49b1      	ldr	r1, [pc, #708]	; (da3c <__ssvfiscanf_r+0x2e0>)
    d776:	4fb2      	ldr	r7, [pc, #712]	; (da40 <__ssvfiscanf_r+0x2e4>)
    d778:	f8df 92c8 	ldr.w	r9, [pc, #712]	; da44 <__ssvfiscanf_r+0x2e8>
    d77c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
    d780:	4606      	mov	r6, r0
    d782:	91a1      	str	r1, [sp, #644]	; 0x284
    d784:	9300      	str	r3, [sp, #0]
    d786:	f892 a000 	ldrb.w	sl, [r2]
    d78a:	f1ba 0f00 	cmp.w	sl, #0
    d78e:	f000 8151 	beq.w	da34 <__ssvfiscanf_r+0x2d8>
    d792:	f81a 3007 	ldrb.w	r3, [sl, r7]
    d796:	f013 0308 	ands.w	r3, r3, #8
    d79a:	f102 0501 	add.w	r5, r2, #1
    d79e:	d019      	beq.n	d7d4 <__ssvfiscanf_r+0x78>
    d7a0:	6863      	ldr	r3, [r4, #4]
    d7a2:	2b00      	cmp	r3, #0
    d7a4:	dd0f      	ble.n	d7c6 <__ssvfiscanf_r+0x6a>
    d7a6:	6823      	ldr	r3, [r4, #0]
    d7a8:	781a      	ldrb	r2, [r3, #0]
    d7aa:	5cba      	ldrb	r2, [r7, r2]
    d7ac:	0712      	lsls	r2, r2, #28
    d7ae:	d401      	bmi.n	d7b4 <__ssvfiscanf_r+0x58>
    d7b0:	462a      	mov	r2, r5
    d7b2:	e7e8      	b.n	d786 <__ssvfiscanf_r+0x2a>
    d7b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    d7b6:	3201      	adds	r2, #1
    d7b8:	9245      	str	r2, [sp, #276]	; 0x114
    d7ba:	6862      	ldr	r2, [r4, #4]
    d7bc:	3301      	adds	r3, #1
    d7be:	3a01      	subs	r2, #1
    d7c0:	6062      	str	r2, [r4, #4]
    d7c2:	6023      	str	r3, [r4, #0]
    d7c4:	e7ec      	b.n	d7a0 <__ssvfiscanf_r+0x44>
    d7c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    d7c8:	4621      	mov	r1, r4
    d7ca:	4630      	mov	r0, r6
    d7cc:	4798      	blx	r3
    d7ce:	2800      	cmp	r0, #0
    d7d0:	d0e9      	beq.n	d7a6 <__ssvfiscanf_r+0x4a>
    d7d2:	e7ed      	b.n	d7b0 <__ssvfiscanf_r+0x54>
    d7d4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
    d7d8:	f040 8083 	bne.w	d8e2 <__ssvfiscanf_r+0x186>
    d7dc:	9341      	str	r3, [sp, #260]	; 0x104
    d7de:	9343      	str	r3, [sp, #268]	; 0x10c
    d7e0:	7853      	ldrb	r3, [r2, #1]
    d7e2:	2b2a      	cmp	r3, #42	; 0x2a
    d7e4:	bf02      	ittt	eq
    d7e6:	2310      	moveq	r3, #16
    d7e8:	1c95      	addeq	r5, r2, #2
    d7ea:	9341      	streq	r3, [sp, #260]	; 0x104
    d7ec:	220a      	movs	r2, #10
    d7ee:	46ab      	mov	fp, r5
    d7f0:	f81b 1b01 	ldrb.w	r1, [fp], #1
    d7f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    d7f8:	2b09      	cmp	r3, #9
    d7fa:	d91d      	bls.n	d838 <__ssvfiscanf_r+0xdc>
    d7fc:	4891      	ldr	r0, [pc, #580]	; (da44 <__ssvfiscanf_r+0x2e8>)
    d7fe:	2203      	movs	r2, #3
    d800:	f7f2 fc7e 	bl	100 <memchr>
    d804:	b140      	cbz	r0, d818 <__ssvfiscanf_r+0xbc>
    d806:	2301      	movs	r3, #1
    d808:	eba0 0009 	sub.w	r0, r0, r9
    d80c:	fa03 f000 	lsl.w	r0, r3, r0
    d810:	9b41      	ldr	r3, [sp, #260]	; 0x104
    d812:	4318      	orrs	r0, r3
    d814:	9041      	str	r0, [sp, #260]	; 0x104
    d816:	465d      	mov	r5, fp
    d818:	f815 3b01 	ldrb.w	r3, [r5], #1
    d81c:	2b78      	cmp	r3, #120	; 0x78
    d81e:	d806      	bhi.n	d82e <__ssvfiscanf_r+0xd2>
    d820:	2b57      	cmp	r3, #87	; 0x57
    d822:	d810      	bhi.n	d846 <__ssvfiscanf_r+0xea>
    d824:	2b25      	cmp	r3, #37	; 0x25
    d826:	d05c      	beq.n	d8e2 <__ssvfiscanf_r+0x186>
    d828:	d856      	bhi.n	d8d8 <__ssvfiscanf_r+0x17c>
    d82a:	2b00      	cmp	r3, #0
    d82c:	d074      	beq.n	d918 <__ssvfiscanf_r+0x1bc>
    d82e:	2303      	movs	r3, #3
    d830:	9347      	str	r3, [sp, #284]	; 0x11c
    d832:	230a      	movs	r3, #10
    d834:	9342      	str	r3, [sp, #264]	; 0x108
    d836:	e081      	b.n	d93c <__ssvfiscanf_r+0x1e0>
    d838:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    d83a:	fb02 1303 	mla	r3, r2, r3, r1
    d83e:	3b30      	subs	r3, #48	; 0x30
    d840:	9343      	str	r3, [sp, #268]	; 0x10c
    d842:	465d      	mov	r5, fp
    d844:	e7d3      	b.n	d7ee <__ssvfiscanf_r+0x92>
    d846:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
    d84a:	2a20      	cmp	r2, #32
    d84c:	d8ef      	bhi.n	d82e <__ssvfiscanf_r+0xd2>
    d84e:	a101      	add	r1, pc, #4	; (adr r1, d854 <__ssvfiscanf_r+0xf8>)
    d850:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    d854:	0000d927 	.word	0x0000d927
    d858:	0000d82f 	.word	0x0000d82f
    d85c:	0000d82f 	.word	0x0000d82f
    d860:	0000d985 	.word	0x0000d985
    d864:	0000d82f 	.word	0x0000d82f
    d868:	0000d82f 	.word	0x0000d82f
    d86c:	0000d82f 	.word	0x0000d82f
    d870:	0000d82f 	.word	0x0000d82f
    d874:	0000d82f 	.word	0x0000d82f
    d878:	0000d82f 	.word	0x0000d82f
    d87c:	0000d82f 	.word	0x0000d82f
    d880:	0000d99b 	.word	0x0000d99b
    d884:	0000d971 	.word	0x0000d971
    d888:	0000d8df 	.word	0x0000d8df
    d88c:	0000d8df 	.word	0x0000d8df
    d890:	0000d8df 	.word	0x0000d8df
    d894:	0000d82f 	.word	0x0000d82f
    d898:	0000d975 	.word	0x0000d975
    d89c:	0000d82f 	.word	0x0000d82f
    d8a0:	0000d82f 	.word	0x0000d82f
    d8a4:	0000d82f 	.word	0x0000d82f
    d8a8:	0000d82f 	.word	0x0000d82f
    d8ac:	0000d9ab 	.word	0x0000d9ab
    d8b0:	0000d97d 	.word	0x0000d97d
    d8b4:	0000d91f 	.word	0x0000d91f
    d8b8:	0000d82f 	.word	0x0000d82f
    d8bc:	0000d82f 	.word	0x0000d82f
    d8c0:	0000d9a7 	.word	0x0000d9a7
    d8c4:	0000d82f 	.word	0x0000d82f
    d8c8:	0000d971 	.word	0x0000d971
    d8cc:	0000d82f 	.word	0x0000d82f
    d8d0:	0000d82f 	.word	0x0000d82f
    d8d4:	0000d927 	.word	0x0000d927
    d8d8:	3b45      	subs	r3, #69	; 0x45
    d8da:	2b02      	cmp	r3, #2
    d8dc:	d8a7      	bhi.n	d82e <__ssvfiscanf_r+0xd2>
    d8de:	2305      	movs	r3, #5
    d8e0:	e02b      	b.n	d93a <__ssvfiscanf_r+0x1de>
    d8e2:	6863      	ldr	r3, [r4, #4]
    d8e4:	2b00      	cmp	r3, #0
    d8e6:	dd0d      	ble.n	d904 <__ssvfiscanf_r+0x1a8>
    d8e8:	6823      	ldr	r3, [r4, #0]
    d8ea:	781a      	ldrb	r2, [r3, #0]
    d8ec:	4552      	cmp	r2, sl
    d8ee:	f040 80a1 	bne.w	da34 <__ssvfiscanf_r+0x2d8>
    d8f2:	3301      	adds	r3, #1
    d8f4:	6862      	ldr	r2, [r4, #4]
    d8f6:	6023      	str	r3, [r4, #0]
    d8f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
    d8fa:	3a01      	subs	r2, #1
    d8fc:	3301      	adds	r3, #1
    d8fe:	6062      	str	r2, [r4, #4]
    d900:	9345      	str	r3, [sp, #276]	; 0x114
    d902:	e755      	b.n	d7b0 <__ssvfiscanf_r+0x54>
    d904:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    d906:	4621      	mov	r1, r4
    d908:	4630      	mov	r0, r6
    d90a:	4798      	blx	r3
    d90c:	2800      	cmp	r0, #0
    d90e:	d0eb      	beq.n	d8e8 <__ssvfiscanf_r+0x18c>
    d910:	9844      	ldr	r0, [sp, #272]	; 0x110
    d912:	2800      	cmp	r0, #0
    d914:	f040 8084 	bne.w	da20 <__ssvfiscanf_r+0x2c4>
    d918:	f04f 30ff 	mov.w	r0, #4294967295
    d91c:	e086      	b.n	da2c <__ssvfiscanf_r+0x2d0>
    d91e:	9a41      	ldr	r2, [sp, #260]	; 0x104
    d920:	f042 0220 	orr.w	r2, r2, #32
    d924:	9241      	str	r2, [sp, #260]	; 0x104
    d926:	9a41      	ldr	r2, [sp, #260]	; 0x104
    d928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    d92c:	9241      	str	r2, [sp, #260]	; 0x104
    d92e:	2210      	movs	r2, #16
    d930:	2b6f      	cmp	r3, #111	; 0x6f
    d932:	9242      	str	r2, [sp, #264]	; 0x108
    d934:	bf34      	ite	cc
    d936:	2303      	movcc	r3, #3
    d938:	2304      	movcs	r3, #4
    d93a:	9347      	str	r3, [sp, #284]	; 0x11c
    d93c:	6863      	ldr	r3, [r4, #4]
    d93e:	2b00      	cmp	r3, #0
    d940:	dd41      	ble.n	d9c6 <__ssvfiscanf_r+0x26a>
    d942:	9b41      	ldr	r3, [sp, #260]	; 0x104
    d944:	0659      	lsls	r1, r3, #25
    d946:	d404      	bmi.n	d952 <__ssvfiscanf_r+0x1f6>
    d948:	6823      	ldr	r3, [r4, #0]
    d94a:	781a      	ldrb	r2, [r3, #0]
    d94c:	5cba      	ldrb	r2, [r7, r2]
    d94e:	0712      	lsls	r2, r2, #28
    d950:	d440      	bmi.n	d9d4 <__ssvfiscanf_r+0x278>
    d952:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    d954:	2b02      	cmp	r3, #2
    d956:	dc4f      	bgt.n	d9f8 <__ssvfiscanf_r+0x29c>
    d958:	466b      	mov	r3, sp
    d95a:	4622      	mov	r2, r4
    d95c:	a941      	add	r1, sp, #260	; 0x104
    d95e:	4630      	mov	r0, r6
    d960:	f000 f99a 	bl	dc98 <_scanf_chars>
    d964:	2801      	cmp	r0, #1
    d966:	d065      	beq.n	da34 <__ssvfiscanf_r+0x2d8>
    d968:	2802      	cmp	r0, #2
    d96a:	f47f af21 	bne.w	d7b0 <__ssvfiscanf_r+0x54>
    d96e:	e7cf      	b.n	d910 <__ssvfiscanf_r+0x1b4>
    d970:	220a      	movs	r2, #10
    d972:	e7dd      	b.n	d930 <__ssvfiscanf_r+0x1d4>
    d974:	2300      	movs	r3, #0
    d976:	9342      	str	r3, [sp, #264]	; 0x108
    d978:	2303      	movs	r3, #3
    d97a:	e7de      	b.n	d93a <__ssvfiscanf_r+0x1de>
    d97c:	2308      	movs	r3, #8
    d97e:	9342      	str	r3, [sp, #264]	; 0x108
    d980:	2304      	movs	r3, #4
    d982:	e7da      	b.n	d93a <__ssvfiscanf_r+0x1de>
    d984:	4629      	mov	r1, r5
    d986:	4640      	mov	r0, r8
    d988:	f010 fe44 	bl	1e614 <__sccl>
    d98c:	9b41      	ldr	r3, [sp, #260]	; 0x104
    d98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d992:	9341      	str	r3, [sp, #260]	; 0x104
    d994:	4605      	mov	r5, r0
    d996:	2301      	movs	r3, #1
    d998:	e7cf      	b.n	d93a <__ssvfiscanf_r+0x1de>
    d99a:	9b41      	ldr	r3, [sp, #260]	; 0x104
    d99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d9a0:	9341      	str	r3, [sp, #260]	; 0x104
    d9a2:	2300      	movs	r3, #0
    d9a4:	e7c9      	b.n	d93a <__ssvfiscanf_r+0x1de>
    d9a6:	2302      	movs	r3, #2
    d9a8:	e7c7      	b.n	d93a <__ssvfiscanf_r+0x1de>
    d9aa:	9841      	ldr	r0, [sp, #260]	; 0x104
    d9ac:	06c3      	lsls	r3, r0, #27
    d9ae:	f53f aeff 	bmi.w	d7b0 <__ssvfiscanf_r+0x54>
    d9b2:	9b00      	ldr	r3, [sp, #0]
    d9b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    d9b6:	1d19      	adds	r1, r3, #4
    d9b8:	9100      	str	r1, [sp, #0]
    d9ba:	681b      	ldr	r3, [r3, #0]
    d9bc:	07c0      	lsls	r0, r0, #31
    d9be:	bf4c      	ite	mi
    d9c0:	801a      	strhmi	r2, [r3, #0]
    d9c2:	601a      	strpl	r2, [r3, #0]
    d9c4:	e6f4      	b.n	d7b0 <__ssvfiscanf_r+0x54>
    d9c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    d9c8:	4621      	mov	r1, r4
    d9ca:	4630      	mov	r0, r6
    d9cc:	4798      	blx	r3
    d9ce:	2800      	cmp	r0, #0
    d9d0:	d0b7      	beq.n	d942 <__ssvfiscanf_r+0x1e6>
    d9d2:	e79d      	b.n	d910 <__ssvfiscanf_r+0x1b4>
    d9d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
    d9d6:	3201      	adds	r2, #1
    d9d8:	9245      	str	r2, [sp, #276]	; 0x114
    d9da:	6862      	ldr	r2, [r4, #4]
    d9dc:	3a01      	subs	r2, #1
    d9de:	2a00      	cmp	r2, #0
    d9e0:	6062      	str	r2, [r4, #4]
    d9e2:	dd02      	ble.n	d9ea <__ssvfiscanf_r+0x28e>
    d9e4:	3301      	adds	r3, #1
    d9e6:	6023      	str	r3, [r4, #0]
    d9e8:	e7ae      	b.n	d948 <__ssvfiscanf_r+0x1ec>
    d9ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
    d9ec:	4621      	mov	r1, r4
    d9ee:	4630      	mov	r0, r6
    d9f0:	4798      	blx	r3
    d9f2:	2800      	cmp	r0, #0
    d9f4:	d0a8      	beq.n	d948 <__ssvfiscanf_r+0x1ec>
    d9f6:	e78b      	b.n	d910 <__ssvfiscanf_r+0x1b4>
    d9f8:	2b04      	cmp	r3, #4
    d9fa:	dc06      	bgt.n	da0a <__ssvfiscanf_r+0x2ae>
    d9fc:	466b      	mov	r3, sp
    d9fe:	4622      	mov	r2, r4
    da00:	a941      	add	r1, sp, #260	; 0x104
    da02:	4630      	mov	r0, r6
    da04:	f000 f9a0 	bl	dd48 <_scanf_i>
    da08:	e7ac      	b.n	d964 <__ssvfiscanf_r+0x208>
    da0a:	4b0f      	ldr	r3, [pc, #60]	; (da48 <__ssvfiscanf_r+0x2ec>)
    da0c:	2b00      	cmp	r3, #0
    da0e:	f43f aecf 	beq.w	d7b0 <__ssvfiscanf_r+0x54>
    da12:	466b      	mov	r3, sp
    da14:	4622      	mov	r2, r4
    da16:	a941      	add	r1, sp, #260	; 0x104
    da18:	4630      	mov	r0, r6
    da1a:	f3af 8000 	nop.w
    da1e:	e7a1      	b.n	d964 <__ssvfiscanf_r+0x208>
    da20:	89a3      	ldrh	r3, [r4, #12]
    da22:	f013 0f40 	tst.w	r3, #64	; 0x40
    da26:	bf18      	it	ne
    da28:	f04f 30ff 	movne.w	r0, #4294967295
    da2c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
    da30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da34:	9844      	ldr	r0, [sp, #272]	; 0x110
    da36:	e7f9      	b.n	da2c <__ssvfiscanf_r+0x2d0>
    da38:	0001e487 	.word	0x0001e487
    da3c:	0001e501 	.word	0x0001e501
    da40:	00020575 	.word	0x00020575
    da44:	0002067b 	.word	0x0002067b
    da48:	00000000 	.word	0x00000000

0000da4c <_printf_i>:
    da4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    da50:	460c      	mov	r4, r1
    da52:	4691      	mov	r9, r2
    da54:	7e27      	ldrb	r7, [r4, #24]
    da56:	990c      	ldr	r1, [sp, #48]	; 0x30
    da58:	2f78      	cmp	r7, #120	; 0x78
    da5a:	4680      	mov	r8, r0
    da5c:	469a      	mov	sl, r3
    da5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    da62:	d807      	bhi.n	da74 <_printf_i+0x28>
    da64:	2f62      	cmp	r7, #98	; 0x62
    da66:	d80a      	bhi.n	da7e <_printf_i+0x32>
    da68:	2f00      	cmp	r7, #0
    da6a:	f000 80d8 	beq.w	dc1e <_printf_i+0x1d2>
    da6e:	2f58      	cmp	r7, #88	; 0x58
    da70:	f000 80a3 	beq.w	dbba <_printf_i+0x16e>
    da74:	f104 0642 	add.w	r6, r4, #66	; 0x42
    da78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    da7c:	e03a      	b.n	daf4 <_printf_i+0xa8>
    da7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    da82:	2b15      	cmp	r3, #21
    da84:	d8f6      	bhi.n	da74 <_printf_i+0x28>
    da86:	a001      	add	r0, pc, #4	; (adr r0, da8c <_printf_i+0x40>)
    da88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    da8c:	0000dae5 	.word	0x0000dae5
    da90:	0000daf9 	.word	0x0000daf9
    da94:	0000da75 	.word	0x0000da75
    da98:	0000da75 	.word	0x0000da75
    da9c:	0000da75 	.word	0x0000da75
    daa0:	0000da75 	.word	0x0000da75
    daa4:	0000daf9 	.word	0x0000daf9
    daa8:	0000da75 	.word	0x0000da75
    daac:	0000da75 	.word	0x0000da75
    dab0:	0000da75 	.word	0x0000da75
    dab4:	0000da75 	.word	0x0000da75
    dab8:	0000dc05 	.word	0x0000dc05
    dabc:	0000db29 	.word	0x0000db29
    dac0:	0000dbe7 	.word	0x0000dbe7
    dac4:	0000da75 	.word	0x0000da75
    dac8:	0000da75 	.word	0x0000da75
    dacc:	0000dc27 	.word	0x0000dc27
    dad0:	0000da75 	.word	0x0000da75
    dad4:	0000db29 	.word	0x0000db29
    dad8:	0000da75 	.word	0x0000da75
    dadc:	0000da75 	.word	0x0000da75
    dae0:	0000dbef 	.word	0x0000dbef
    dae4:	680b      	ldr	r3, [r1, #0]
    dae6:	1d1a      	adds	r2, r3, #4
    dae8:	681b      	ldr	r3, [r3, #0]
    daea:	600a      	str	r2, [r1, #0]
    daec:	f104 0642 	add.w	r6, r4, #66	; 0x42
    daf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    daf4:	2301      	movs	r3, #1
    daf6:	e0a3      	b.n	dc40 <_printf_i+0x1f4>
    daf8:	6825      	ldr	r5, [r4, #0]
    dafa:	6808      	ldr	r0, [r1, #0]
    dafc:	062e      	lsls	r6, r5, #24
    dafe:	f100 0304 	add.w	r3, r0, #4
    db02:	d50a      	bpl.n	db1a <_printf_i+0xce>
    db04:	6805      	ldr	r5, [r0, #0]
    db06:	600b      	str	r3, [r1, #0]
    db08:	2d00      	cmp	r5, #0
    db0a:	da03      	bge.n	db14 <_printf_i+0xc8>
    db0c:	232d      	movs	r3, #45	; 0x2d
    db0e:	426d      	negs	r5, r5
    db10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    db14:	485e      	ldr	r0, [pc, #376]	; (dc90 <_printf_i+0x244>)
    db16:	230a      	movs	r3, #10
    db18:	e019      	b.n	db4e <_printf_i+0x102>
    db1a:	f015 0f40 	tst.w	r5, #64	; 0x40
    db1e:	6805      	ldr	r5, [r0, #0]
    db20:	600b      	str	r3, [r1, #0]
    db22:	bf18      	it	ne
    db24:	b22d      	sxthne	r5, r5
    db26:	e7ef      	b.n	db08 <_printf_i+0xbc>
    db28:	680b      	ldr	r3, [r1, #0]
    db2a:	6825      	ldr	r5, [r4, #0]
    db2c:	1d18      	adds	r0, r3, #4
    db2e:	6008      	str	r0, [r1, #0]
    db30:	0628      	lsls	r0, r5, #24
    db32:	d501      	bpl.n	db38 <_printf_i+0xec>
    db34:	681d      	ldr	r5, [r3, #0]
    db36:	e002      	b.n	db3e <_printf_i+0xf2>
    db38:	0669      	lsls	r1, r5, #25
    db3a:	d5fb      	bpl.n	db34 <_printf_i+0xe8>
    db3c:	881d      	ldrh	r5, [r3, #0]
    db3e:	4854      	ldr	r0, [pc, #336]	; (dc90 <_printf_i+0x244>)
    db40:	2f6f      	cmp	r7, #111	; 0x6f
    db42:	bf0c      	ite	eq
    db44:	2308      	moveq	r3, #8
    db46:	230a      	movne	r3, #10
    db48:	2100      	movs	r1, #0
    db4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    db4e:	6866      	ldr	r6, [r4, #4]
    db50:	60a6      	str	r6, [r4, #8]
    db52:	2e00      	cmp	r6, #0
    db54:	bfa2      	ittt	ge
    db56:	6821      	ldrge	r1, [r4, #0]
    db58:	f021 0104 	bicge.w	r1, r1, #4
    db5c:	6021      	strge	r1, [r4, #0]
    db5e:	b90d      	cbnz	r5, db64 <_printf_i+0x118>
    db60:	2e00      	cmp	r6, #0
    db62:	d04d      	beq.n	dc00 <_printf_i+0x1b4>
    db64:	4616      	mov	r6, r2
    db66:	fbb5 f1f3 	udiv	r1, r5, r3
    db6a:	fb03 5711 	mls	r7, r3, r1, r5
    db6e:	5dc7      	ldrb	r7, [r0, r7]
    db70:	f806 7d01 	strb.w	r7, [r6, #-1]!
    db74:	462f      	mov	r7, r5
    db76:	42bb      	cmp	r3, r7
    db78:	460d      	mov	r5, r1
    db7a:	d9f4      	bls.n	db66 <_printf_i+0x11a>
    db7c:	2b08      	cmp	r3, #8
    db7e:	d10b      	bne.n	db98 <_printf_i+0x14c>
    db80:	6823      	ldr	r3, [r4, #0]
    db82:	07df      	lsls	r7, r3, #31
    db84:	d508      	bpl.n	db98 <_printf_i+0x14c>
    db86:	6923      	ldr	r3, [r4, #16]
    db88:	6861      	ldr	r1, [r4, #4]
    db8a:	4299      	cmp	r1, r3
    db8c:	bfde      	ittt	le
    db8e:	2330      	movle	r3, #48	; 0x30
    db90:	f806 3c01 	strble.w	r3, [r6, #-1]
    db94:	f106 36ff 	addle.w	r6, r6, #4294967295
    db98:	1b92      	subs	r2, r2, r6
    db9a:	6122      	str	r2, [r4, #16]
    db9c:	f8cd a000 	str.w	sl, [sp]
    dba0:	464b      	mov	r3, r9
    dba2:	aa03      	add	r2, sp, #12
    dba4:	4621      	mov	r1, r4
    dba6:	4640      	mov	r0, r8
    dba8:	f010 fcc7 	bl	1e53a <_printf_common>
    dbac:	3001      	adds	r0, #1
    dbae:	d14c      	bne.n	dc4a <_printf_i+0x1fe>
    dbb0:	f04f 30ff 	mov.w	r0, #4294967295
    dbb4:	b004      	add	sp, #16
    dbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbba:	4835      	ldr	r0, [pc, #212]	; (dc90 <_printf_i+0x244>)
    dbbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    dbc0:	6823      	ldr	r3, [r4, #0]
    dbc2:	680e      	ldr	r6, [r1, #0]
    dbc4:	061f      	lsls	r7, r3, #24
    dbc6:	f856 5b04 	ldr.w	r5, [r6], #4
    dbca:	600e      	str	r6, [r1, #0]
    dbcc:	d514      	bpl.n	dbf8 <_printf_i+0x1ac>
    dbce:	07d9      	lsls	r1, r3, #31
    dbd0:	bf44      	itt	mi
    dbd2:	f043 0320 	orrmi.w	r3, r3, #32
    dbd6:	6023      	strmi	r3, [r4, #0]
    dbd8:	b91d      	cbnz	r5, dbe2 <_printf_i+0x196>
    dbda:	6823      	ldr	r3, [r4, #0]
    dbdc:	f023 0320 	bic.w	r3, r3, #32
    dbe0:	6023      	str	r3, [r4, #0]
    dbe2:	2310      	movs	r3, #16
    dbe4:	e7b0      	b.n	db48 <_printf_i+0xfc>
    dbe6:	6823      	ldr	r3, [r4, #0]
    dbe8:	f043 0320 	orr.w	r3, r3, #32
    dbec:	6023      	str	r3, [r4, #0]
    dbee:	2378      	movs	r3, #120	; 0x78
    dbf0:	4828      	ldr	r0, [pc, #160]	; (dc94 <_printf_i+0x248>)
    dbf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    dbf6:	e7e3      	b.n	dbc0 <_printf_i+0x174>
    dbf8:	065e      	lsls	r6, r3, #25
    dbfa:	bf48      	it	mi
    dbfc:	b2ad      	uxthmi	r5, r5
    dbfe:	e7e6      	b.n	dbce <_printf_i+0x182>
    dc00:	4616      	mov	r6, r2
    dc02:	e7bb      	b.n	db7c <_printf_i+0x130>
    dc04:	680b      	ldr	r3, [r1, #0]
    dc06:	6826      	ldr	r6, [r4, #0]
    dc08:	6960      	ldr	r0, [r4, #20]
    dc0a:	1d1d      	adds	r5, r3, #4
    dc0c:	600d      	str	r5, [r1, #0]
    dc0e:	0635      	lsls	r5, r6, #24
    dc10:	681b      	ldr	r3, [r3, #0]
    dc12:	d501      	bpl.n	dc18 <_printf_i+0x1cc>
    dc14:	6018      	str	r0, [r3, #0]
    dc16:	e002      	b.n	dc1e <_printf_i+0x1d2>
    dc18:	0671      	lsls	r1, r6, #25
    dc1a:	d5fb      	bpl.n	dc14 <_printf_i+0x1c8>
    dc1c:	8018      	strh	r0, [r3, #0]
    dc1e:	2300      	movs	r3, #0
    dc20:	6123      	str	r3, [r4, #16]
    dc22:	4616      	mov	r6, r2
    dc24:	e7ba      	b.n	db9c <_printf_i+0x150>
    dc26:	680b      	ldr	r3, [r1, #0]
    dc28:	1d1a      	adds	r2, r3, #4
    dc2a:	600a      	str	r2, [r1, #0]
    dc2c:	681e      	ldr	r6, [r3, #0]
    dc2e:	6862      	ldr	r2, [r4, #4]
    dc30:	2100      	movs	r1, #0
    dc32:	4630      	mov	r0, r6
    dc34:	f7f2 fa64 	bl	100 <memchr>
    dc38:	b108      	cbz	r0, dc3e <_printf_i+0x1f2>
    dc3a:	1b80      	subs	r0, r0, r6
    dc3c:	6060      	str	r0, [r4, #4]
    dc3e:	6863      	ldr	r3, [r4, #4]
    dc40:	6123      	str	r3, [r4, #16]
    dc42:	2300      	movs	r3, #0
    dc44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    dc48:	e7a8      	b.n	db9c <_printf_i+0x150>
    dc4a:	6923      	ldr	r3, [r4, #16]
    dc4c:	4632      	mov	r2, r6
    dc4e:	4649      	mov	r1, r9
    dc50:	4640      	mov	r0, r8
    dc52:	47d0      	blx	sl
    dc54:	3001      	adds	r0, #1
    dc56:	d0ab      	beq.n	dbb0 <_printf_i+0x164>
    dc58:	6823      	ldr	r3, [r4, #0]
    dc5a:	079b      	lsls	r3, r3, #30
    dc5c:	d413      	bmi.n	dc86 <_printf_i+0x23a>
    dc5e:	68e0      	ldr	r0, [r4, #12]
    dc60:	9b03      	ldr	r3, [sp, #12]
    dc62:	4298      	cmp	r0, r3
    dc64:	bfb8      	it	lt
    dc66:	4618      	movlt	r0, r3
    dc68:	e7a4      	b.n	dbb4 <_printf_i+0x168>
    dc6a:	2301      	movs	r3, #1
    dc6c:	4632      	mov	r2, r6
    dc6e:	4649      	mov	r1, r9
    dc70:	4640      	mov	r0, r8
    dc72:	47d0      	blx	sl
    dc74:	3001      	adds	r0, #1
    dc76:	d09b      	beq.n	dbb0 <_printf_i+0x164>
    dc78:	3501      	adds	r5, #1
    dc7a:	68e3      	ldr	r3, [r4, #12]
    dc7c:	9903      	ldr	r1, [sp, #12]
    dc7e:	1a5b      	subs	r3, r3, r1
    dc80:	42ab      	cmp	r3, r5
    dc82:	dcf2      	bgt.n	dc6a <_printf_i+0x21e>
    dc84:	e7eb      	b.n	dc5e <_printf_i+0x212>
    dc86:	2500      	movs	r5, #0
    dc88:	f104 0619 	add.w	r6, r4, #25
    dc8c:	e7f5      	b.n	dc7a <_printf_i+0x22e>
    dc8e:	bf00      	nop
    dc90:	0001fa42 	.word	0x0001fa42
    dc94:	00020686 	.word	0x00020686

0000dc98 <_scanf_chars>:
    dc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc9c:	4615      	mov	r5, r2
    dc9e:	688a      	ldr	r2, [r1, #8]
    dca0:	4680      	mov	r8, r0
    dca2:	460c      	mov	r4, r1
    dca4:	b932      	cbnz	r2, dcb4 <_scanf_chars+0x1c>
    dca6:	698a      	ldr	r2, [r1, #24]
    dca8:	2a00      	cmp	r2, #0
    dcaa:	bf0c      	ite	eq
    dcac:	2201      	moveq	r2, #1
    dcae:	f04f 32ff 	movne.w	r2, #4294967295
    dcb2:	608a      	str	r2, [r1, #8]
    dcb4:	6822      	ldr	r2, [r4, #0]
    dcb6:	f8df 908c 	ldr.w	r9, [pc, #140]	; dd44 <_scanf_chars+0xac>
    dcba:	06d1      	lsls	r1, r2, #27
    dcbc:	bf5f      	itttt	pl
    dcbe:	681a      	ldrpl	r2, [r3, #0]
    dcc0:	1d11      	addpl	r1, r2, #4
    dcc2:	6019      	strpl	r1, [r3, #0]
    dcc4:	6816      	ldrpl	r6, [r2, #0]
    dcc6:	2700      	movs	r7, #0
    dcc8:	69a0      	ldr	r0, [r4, #24]
    dcca:	b188      	cbz	r0, dcf0 <_scanf_chars+0x58>
    dccc:	2801      	cmp	r0, #1
    dcce:	d107      	bne.n	dce0 <_scanf_chars+0x48>
    dcd0:	682b      	ldr	r3, [r5, #0]
    dcd2:	781a      	ldrb	r2, [r3, #0]
    dcd4:	6963      	ldr	r3, [r4, #20]
    dcd6:	5c9b      	ldrb	r3, [r3, r2]
    dcd8:	b953      	cbnz	r3, dcf0 <_scanf_chars+0x58>
    dcda:	bb27      	cbnz	r7, dd26 <_scanf_chars+0x8e>
    dcdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dce0:	2802      	cmp	r0, #2
    dce2:	d120      	bne.n	dd26 <_scanf_chars+0x8e>
    dce4:	682b      	ldr	r3, [r5, #0]
    dce6:	781b      	ldrb	r3, [r3, #0]
    dce8:	f813 3009 	ldrb.w	r3, [r3, r9]
    dcec:	071b      	lsls	r3, r3, #28
    dcee:	d41a      	bmi.n	dd26 <_scanf_chars+0x8e>
    dcf0:	6823      	ldr	r3, [r4, #0]
    dcf2:	06da      	lsls	r2, r3, #27
    dcf4:	bf5e      	ittt	pl
    dcf6:	682b      	ldrpl	r3, [r5, #0]
    dcf8:	781b      	ldrbpl	r3, [r3, #0]
    dcfa:	f806 3b01 	strbpl.w	r3, [r6], #1
    dcfe:	682a      	ldr	r2, [r5, #0]
    dd00:	686b      	ldr	r3, [r5, #4]
    dd02:	3201      	adds	r2, #1
    dd04:	602a      	str	r2, [r5, #0]
    dd06:	68a2      	ldr	r2, [r4, #8]
    dd08:	3b01      	subs	r3, #1
    dd0a:	3a01      	subs	r2, #1
    dd0c:	606b      	str	r3, [r5, #4]
    dd0e:	3701      	adds	r7, #1
    dd10:	60a2      	str	r2, [r4, #8]
    dd12:	b142      	cbz	r2, dd26 <_scanf_chars+0x8e>
    dd14:	2b00      	cmp	r3, #0
    dd16:	dcd7      	bgt.n	dcc8 <_scanf_chars+0x30>
    dd18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    dd1c:	4629      	mov	r1, r5
    dd1e:	4640      	mov	r0, r8
    dd20:	4798      	blx	r3
    dd22:	2800      	cmp	r0, #0
    dd24:	d0d0      	beq.n	dcc8 <_scanf_chars+0x30>
    dd26:	6823      	ldr	r3, [r4, #0]
    dd28:	f013 0310 	ands.w	r3, r3, #16
    dd2c:	d105      	bne.n	dd3a <_scanf_chars+0xa2>
    dd2e:	68e2      	ldr	r2, [r4, #12]
    dd30:	3201      	adds	r2, #1
    dd32:	60e2      	str	r2, [r4, #12]
    dd34:	69a2      	ldr	r2, [r4, #24]
    dd36:	b102      	cbz	r2, dd3a <_scanf_chars+0xa2>
    dd38:	7033      	strb	r3, [r6, #0]
    dd3a:	6923      	ldr	r3, [r4, #16]
    dd3c:	441f      	add	r7, r3
    dd3e:	6127      	str	r7, [r4, #16]
    dd40:	2000      	movs	r0, #0
    dd42:	e7cb      	b.n	dcdc <_scanf_chars+0x44>
    dd44:	00020575 	.word	0x00020575

0000dd48 <_scanf_i>:
    dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd4c:	4698      	mov	r8, r3
    dd4e:	4b74      	ldr	r3, [pc, #464]	; (df20 <_scanf_i+0x1d8>)
    dd50:	460c      	mov	r4, r1
    dd52:	4682      	mov	sl, r0
    dd54:	4616      	mov	r6, r2
    dd56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    dd5a:	b087      	sub	sp, #28
    dd5c:	ab03      	add	r3, sp, #12
    dd5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    dd62:	4b70      	ldr	r3, [pc, #448]	; (df24 <_scanf_i+0x1dc>)
    dd64:	69a1      	ldr	r1, [r4, #24]
    dd66:	4a70      	ldr	r2, [pc, #448]	; (df28 <_scanf_i+0x1e0>)
    dd68:	2903      	cmp	r1, #3
    dd6a:	bf18      	it	ne
    dd6c:	461a      	movne	r2, r3
    dd6e:	68a3      	ldr	r3, [r4, #8]
    dd70:	9201      	str	r2, [sp, #4]
    dd72:	1e5a      	subs	r2, r3, #1
    dd74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
    dd78:	bf88      	it	hi
    dd7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
    dd7e:	4627      	mov	r7, r4
    dd80:	bf82      	ittt	hi
    dd82:	eb03 0905 	addhi.w	r9, r3, r5
    dd86:	f240 135d 	movwhi	r3, #349	; 0x15d
    dd8a:	60a3      	strhi	r3, [r4, #8]
    dd8c:	f857 3b1c 	ldr.w	r3, [r7], #28
    dd90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
    dd94:	bf98      	it	ls
    dd96:	f04f 0900 	movls.w	r9, #0
    dd9a:	6023      	str	r3, [r4, #0]
    dd9c:	463d      	mov	r5, r7
    dd9e:	f04f 0b00 	mov.w	fp, #0
    dda2:	6831      	ldr	r1, [r6, #0]
    dda4:	ab03      	add	r3, sp, #12
    dda6:	7809      	ldrb	r1, [r1, #0]
    dda8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
    ddac:	2202      	movs	r2, #2
    ddae:	f7f2 f9a7 	bl	100 <memchr>
    ddb2:	b328      	cbz	r0, de00 <_scanf_i+0xb8>
    ddb4:	f1bb 0f01 	cmp.w	fp, #1
    ddb8:	d159      	bne.n	de6e <_scanf_i+0x126>
    ddba:	6862      	ldr	r2, [r4, #4]
    ddbc:	b92a      	cbnz	r2, ddca <_scanf_i+0x82>
    ddbe:	6822      	ldr	r2, [r4, #0]
    ddc0:	2308      	movs	r3, #8
    ddc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ddc6:	6063      	str	r3, [r4, #4]
    ddc8:	6022      	str	r2, [r4, #0]
    ddca:	6822      	ldr	r2, [r4, #0]
    ddcc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
    ddd0:	6022      	str	r2, [r4, #0]
    ddd2:	68a2      	ldr	r2, [r4, #8]
    ddd4:	1e51      	subs	r1, r2, #1
    ddd6:	60a1      	str	r1, [r4, #8]
    ddd8:	b192      	cbz	r2, de00 <_scanf_i+0xb8>
    ddda:	6832      	ldr	r2, [r6, #0]
    dddc:	1c51      	adds	r1, r2, #1
    ddde:	6031      	str	r1, [r6, #0]
    dde0:	7812      	ldrb	r2, [r2, #0]
    dde2:	f805 2b01 	strb.w	r2, [r5], #1
    dde6:	6872      	ldr	r2, [r6, #4]
    dde8:	3a01      	subs	r2, #1
    ddea:	2a00      	cmp	r2, #0
    ddec:	6072      	str	r2, [r6, #4]
    ddee:	dc07      	bgt.n	de00 <_scanf_i+0xb8>
    ddf0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
    ddf4:	4631      	mov	r1, r6
    ddf6:	4650      	mov	r0, sl
    ddf8:	4790      	blx	r2
    ddfa:	2800      	cmp	r0, #0
    ddfc:	f040 8085 	bne.w	df0a <_scanf_i+0x1c2>
    de00:	f10b 0b01 	add.w	fp, fp, #1
    de04:	f1bb 0f03 	cmp.w	fp, #3
    de08:	d1cb      	bne.n	dda2 <_scanf_i+0x5a>
    de0a:	6863      	ldr	r3, [r4, #4]
    de0c:	b90b      	cbnz	r3, de12 <_scanf_i+0xca>
    de0e:	230a      	movs	r3, #10
    de10:	6063      	str	r3, [r4, #4]
    de12:	6863      	ldr	r3, [r4, #4]
    de14:	4945      	ldr	r1, [pc, #276]	; (df2c <_scanf_i+0x1e4>)
    de16:	6960      	ldr	r0, [r4, #20]
    de18:	1ac9      	subs	r1, r1, r3
    de1a:	f010 fbfb 	bl	1e614 <__sccl>
    de1e:	f04f 0b00 	mov.w	fp, #0
    de22:	68a3      	ldr	r3, [r4, #8]
    de24:	6822      	ldr	r2, [r4, #0]
    de26:	2b00      	cmp	r3, #0
    de28:	d03d      	beq.n	dea6 <_scanf_i+0x15e>
    de2a:	6831      	ldr	r1, [r6, #0]
    de2c:	6960      	ldr	r0, [r4, #20]
    de2e:	f891 c000 	ldrb.w	ip, [r1]
    de32:	f810 000c 	ldrb.w	r0, [r0, ip]
    de36:	2800      	cmp	r0, #0
    de38:	d035      	beq.n	dea6 <_scanf_i+0x15e>
    de3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
    de3e:	d124      	bne.n	de8a <_scanf_i+0x142>
    de40:	0510      	lsls	r0, r2, #20
    de42:	d522      	bpl.n	de8a <_scanf_i+0x142>
    de44:	f10b 0b01 	add.w	fp, fp, #1
    de48:	f1b9 0f00 	cmp.w	r9, #0
    de4c:	d003      	beq.n	de56 <_scanf_i+0x10e>
    de4e:	3301      	adds	r3, #1
    de50:	f109 39ff 	add.w	r9, r9, #4294967295
    de54:	60a3      	str	r3, [r4, #8]
    de56:	6873      	ldr	r3, [r6, #4]
    de58:	3b01      	subs	r3, #1
    de5a:	2b00      	cmp	r3, #0
    de5c:	6073      	str	r3, [r6, #4]
    de5e:	dd1b      	ble.n	de98 <_scanf_i+0x150>
    de60:	6833      	ldr	r3, [r6, #0]
    de62:	3301      	adds	r3, #1
    de64:	6033      	str	r3, [r6, #0]
    de66:	68a3      	ldr	r3, [r4, #8]
    de68:	3b01      	subs	r3, #1
    de6a:	60a3      	str	r3, [r4, #8]
    de6c:	e7d9      	b.n	de22 <_scanf_i+0xda>
    de6e:	f1bb 0f02 	cmp.w	fp, #2
    de72:	d1ae      	bne.n	ddd2 <_scanf_i+0x8a>
    de74:	6822      	ldr	r2, [r4, #0]
    de76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
    de7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    de7e:	d1bf      	bne.n	de00 <_scanf_i+0xb8>
    de80:	2310      	movs	r3, #16
    de82:	6063      	str	r3, [r4, #4]
    de84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    de88:	e7a2      	b.n	ddd0 <_scanf_i+0x88>
    de8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
    de8e:	6022      	str	r2, [r4, #0]
    de90:	780b      	ldrb	r3, [r1, #0]
    de92:	f805 3b01 	strb.w	r3, [r5], #1
    de96:	e7de      	b.n	de56 <_scanf_i+0x10e>
    de98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
    de9c:	4631      	mov	r1, r6
    de9e:	4650      	mov	r0, sl
    dea0:	4798      	blx	r3
    dea2:	2800      	cmp	r0, #0
    dea4:	d0df      	beq.n	de66 <_scanf_i+0x11e>
    dea6:	6823      	ldr	r3, [r4, #0]
    dea8:	05d9      	lsls	r1, r3, #23
    deaa:	d50d      	bpl.n	dec8 <_scanf_i+0x180>
    deac:	42bd      	cmp	r5, r7
    deae:	d909      	bls.n	dec4 <_scanf_i+0x17c>
    deb0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
    deb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
    deb8:	4632      	mov	r2, r6
    deba:	4650      	mov	r0, sl
    debc:	4798      	blx	r3
    debe:	f105 39ff 	add.w	r9, r5, #4294967295
    dec2:	464d      	mov	r5, r9
    dec4:	42bd      	cmp	r5, r7
    dec6:	d028      	beq.n	df1a <_scanf_i+0x1d2>
    dec8:	6822      	ldr	r2, [r4, #0]
    deca:	f012 0210 	ands.w	r2, r2, #16
    dece:	d113      	bne.n	def8 <_scanf_i+0x1b0>
    ded0:	702a      	strb	r2, [r5, #0]
    ded2:	6863      	ldr	r3, [r4, #4]
    ded4:	9e01      	ldr	r6, [sp, #4]
    ded6:	4639      	mov	r1, r7
    ded8:	4650      	mov	r0, sl
    deda:	47b0      	blx	r6
    dedc:	f8d8 3000 	ldr.w	r3, [r8]
    dee0:	6821      	ldr	r1, [r4, #0]
    dee2:	1d1a      	adds	r2, r3, #4
    dee4:	f8c8 2000 	str.w	r2, [r8]
    dee8:	f011 0f20 	tst.w	r1, #32
    deec:	681b      	ldr	r3, [r3, #0]
    deee:	d00f      	beq.n	df10 <_scanf_i+0x1c8>
    def0:	6018      	str	r0, [r3, #0]
    def2:	68e3      	ldr	r3, [r4, #12]
    def4:	3301      	adds	r3, #1
    def6:	60e3      	str	r3, [r4, #12]
    def8:	1bed      	subs	r5, r5, r7
    defa:	44ab      	add	fp, r5
    defc:	6925      	ldr	r5, [r4, #16]
    defe:	445d      	add	r5, fp
    df00:	6125      	str	r5, [r4, #16]
    df02:	2000      	movs	r0, #0
    df04:	b007      	add	sp, #28
    df06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df0a:	f04f 0b00 	mov.w	fp, #0
    df0e:	e7ca      	b.n	dea6 <_scanf_i+0x15e>
    df10:	07ca      	lsls	r2, r1, #31
    df12:	bf4c      	ite	mi
    df14:	8018      	strhmi	r0, [r3, #0]
    df16:	6018      	strpl	r0, [r3, #0]
    df18:	e7eb      	b.n	def2 <_scanf_i+0x1aa>
    df1a:	2001      	movs	r0, #1
    df1c:	e7f2      	b.n	df04 <_scanf_i+0x1bc>
    df1e:	bf00      	nop
    df20:	0001eae0 	.word	0x0001eae0
    df24:	0001e68d 	.word	0x0001e68d
    df28:	0001e689 	.word	0x0001e689
    df2c:	000206ad 	.word	0x000206ad

0000df30 <_strtol_l.isra.0>:
    df30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df34:	4e3a      	ldr	r6, [pc, #232]	; (e020 <_strtol_l.isra.0+0xf0>)
    df36:	4686      	mov	lr, r0
    df38:	468c      	mov	ip, r1
    df3a:	4660      	mov	r0, ip
    df3c:	f81c 4b01 	ldrb.w	r4, [ip], #1
    df40:	5da5      	ldrb	r5, [r4, r6]
    df42:	f015 0508 	ands.w	r5, r5, #8
    df46:	d1f8      	bne.n	df3a <_strtol_l.isra.0+0xa>
    df48:	2c2d      	cmp	r4, #45	; 0x2d
    df4a:	d133      	bne.n	dfb4 <_strtol_l.isra.0+0x84>
    df4c:	f89c 4000 	ldrb.w	r4, [ip]
    df50:	f04f 0801 	mov.w	r8, #1
    df54:	f100 0c02 	add.w	ip, r0, #2
    df58:	2b00      	cmp	r3, #0
    df5a:	d05c      	beq.n	e016 <_strtol_l.isra.0+0xe6>
    df5c:	2b10      	cmp	r3, #16
    df5e:	d10c      	bne.n	df7a <_strtol_l.isra.0+0x4a>
    df60:	2c30      	cmp	r4, #48	; 0x30
    df62:	d10a      	bne.n	df7a <_strtol_l.isra.0+0x4a>
    df64:	f89c 0000 	ldrb.w	r0, [ip]
    df68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    df6c:	2858      	cmp	r0, #88	; 0x58
    df6e:	d14d      	bne.n	e00c <_strtol_l.isra.0+0xdc>
    df70:	f89c 4001 	ldrb.w	r4, [ip, #1]
    df74:	2310      	movs	r3, #16
    df76:	f10c 0c02 	add.w	ip, ip, #2
    df7a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
    df7e:	3f01      	subs	r7, #1
    df80:	2600      	movs	r6, #0
    df82:	fbb7 f9f3 	udiv	r9, r7, r3
    df86:	4630      	mov	r0, r6
    df88:	fb03 7a19 	mls	sl, r3, r9, r7
    df8c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
    df90:	2d09      	cmp	r5, #9
    df92:	d818      	bhi.n	dfc6 <_strtol_l.isra.0+0x96>
    df94:	462c      	mov	r4, r5
    df96:	42a3      	cmp	r3, r4
    df98:	dd24      	ble.n	dfe4 <_strtol_l.isra.0+0xb4>
    df9a:	1c75      	adds	r5, r6, #1
    df9c:	d007      	beq.n	dfae <_strtol_l.isra.0+0x7e>
    df9e:	4581      	cmp	r9, r0
    dfa0:	d31d      	bcc.n	dfde <_strtol_l.isra.0+0xae>
    dfa2:	d101      	bne.n	dfa8 <_strtol_l.isra.0+0x78>
    dfa4:	45a2      	cmp	sl, r4
    dfa6:	db1a      	blt.n	dfde <_strtol_l.isra.0+0xae>
    dfa8:	fb00 4003 	mla	r0, r0, r3, r4
    dfac:	2601      	movs	r6, #1
    dfae:	f81c 4b01 	ldrb.w	r4, [ip], #1
    dfb2:	e7eb      	b.n	df8c <_strtol_l.isra.0+0x5c>
    dfb4:	2c2b      	cmp	r4, #43	; 0x2b
    dfb6:	bf08      	it	eq
    dfb8:	f89c 4000 	ldrbeq.w	r4, [ip]
    dfbc:	46a8      	mov	r8, r5
    dfbe:	bf08      	it	eq
    dfc0:	f100 0c02 	addeq.w	ip, r0, #2
    dfc4:	e7c8      	b.n	df58 <_strtol_l.isra.0+0x28>
    dfc6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
    dfca:	2d19      	cmp	r5, #25
    dfcc:	d801      	bhi.n	dfd2 <_strtol_l.isra.0+0xa2>
    dfce:	3c37      	subs	r4, #55	; 0x37
    dfd0:	e7e1      	b.n	df96 <_strtol_l.isra.0+0x66>
    dfd2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
    dfd6:	2d19      	cmp	r5, #25
    dfd8:	d804      	bhi.n	dfe4 <_strtol_l.isra.0+0xb4>
    dfda:	3c57      	subs	r4, #87	; 0x57
    dfdc:	e7db      	b.n	df96 <_strtol_l.isra.0+0x66>
    dfde:	f04f 36ff 	mov.w	r6, #4294967295
    dfe2:	e7e4      	b.n	dfae <_strtol_l.isra.0+0x7e>
    dfe4:	1c73      	adds	r3, r6, #1
    dfe6:	d106      	bne.n	dff6 <_strtol_l.isra.0+0xc6>
    dfe8:	2322      	movs	r3, #34	; 0x22
    dfea:	f8ce 3000 	str.w	r3, [lr]
    dfee:	4638      	mov	r0, r7
    dff0:	b942      	cbnz	r2, e004 <_strtol_l.isra.0+0xd4>
    dff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dff6:	f1b8 0f00 	cmp.w	r8, #0
    dffa:	d000      	beq.n	dffe <_strtol_l.isra.0+0xce>
    dffc:	4240      	negs	r0, r0
    dffe:	2a00      	cmp	r2, #0
    e000:	d0f7      	beq.n	dff2 <_strtol_l.isra.0+0xc2>
    e002:	b10e      	cbz	r6, e008 <_strtol_l.isra.0+0xd8>
    e004:	f10c 31ff 	add.w	r1, ip, #4294967295
    e008:	6011      	str	r1, [r2, #0]
    e00a:	e7f2      	b.n	dff2 <_strtol_l.isra.0+0xc2>
    e00c:	2430      	movs	r4, #48	; 0x30
    e00e:	2b00      	cmp	r3, #0
    e010:	d1b3      	bne.n	df7a <_strtol_l.isra.0+0x4a>
    e012:	2308      	movs	r3, #8
    e014:	e7b1      	b.n	df7a <_strtol_l.isra.0+0x4a>
    e016:	2c30      	cmp	r4, #48	; 0x30
    e018:	d0a4      	beq.n	df64 <_strtol_l.isra.0+0x34>
    e01a:	230a      	movs	r3, #10
    e01c:	e7ad      	b.n	df7a <_strtol_l.isra.0+0x4a>
    e01e:	bf00      	nop
    e020:	00020575 	.word	0x00020575

0000e024 <_strtoul_l.isra.0>:
    e024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e028:	4e3b      	ldr	r6, [pc, #236]	; (e118 <_strtoul_l.isra.0+0xf4>)
    e02a:	4686      	mov	lr, r0
    e02c:	468c      	mov	ip, r1
    e02e:	4660      	mov	r0, ip
    e030:	f81c 4b01 	ldrb.w	r4, [ip], #1
    e034:	5da5      	ldrb	r5, [r4, r6]
    e036:	f015 0508 	ands.w	r5, r5, #8
    e03a:	d1f8      	bne.n	e02e <_strtoul_l.isra.0+0xa>
    e03c:	2c2d      	cmp	r4, #45	; 0x2d
    e03e:	d134      	bne.n	e0aa <_strtoul_l.isra.0+0x86>
    e040:	f89c 4000 	ldrb.w	r4, [ip]
    e044:	f04f 0801 	mov.w	r8, #1
    e048:	f100 0c02 	add.w	ip, r0, #2
    e04c:	2b00      	cmp	r3, #0
    e04e:	d05e      	beq.n	e10e <_strtoul_l.isra.0+0xea>
    e050:	2b10      	cmp	r3, #16
    e052:	d10c      	bne.n	e06e <_strtoul_l.isra.0+0x4a>
    e054:	2c30      	cmp	r4, #48	; 0x30
    e056:	d10a      	bne.n	e06e <_strtoul_l.isra.0+0x4a>
    e058:	f89c 0000 	ldrb.w	r0, [ip]
    e05c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    e060:	2858      	cmp	r0, #88	; 0x58
    e062:	d14f      	bne.n	e104 <_strtoul_l.isra.0+0xe0>
    e064:	f89c 4001 	ldrb.w	r4, [ip, #1]
    e068:	2310      	movs	r3, #16
    e06a:	f10c 0c02 	add.w	ip, ip, #2
    e06e:	f04f 37ff 	mov.w	r7, #4294967295
    e072:	2500      	movs	r5, #0
    e074:	fbb7 f7f3 	udiv	r7, r7, r3
    e078:	fb03 f907 	mul.w	r9, r3, r7
    e07c:	ea6f 0909 	mvn.w	r9, r9
    e080:	4628      	mov	r0, r5
    e082:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    e086:	2e09      	cmp	r6, #9
    e088:	d818      	bhi.n	e0bc <_strtoul_l.isra.0+0x98>
    e08a:	4634      	mov	r4, r6
    e08c:	42a3      	cmp	r3, r4
    e08e:	dd24      	ble.n	e0da <_strtoul_l.isra.0+0xb6>
    e090:	2d00      	cmp	r5, #0
    e092:	db1f      	blt.n	e0d4 <_strtoul_l.isra.0+0xb0>
    e094:	4287      	cmp	r7, r0
    e096:	d31d      	bcc.n	e0d4 <_strtoul_l.isra.0+0xb0>
    e098:	d101      	bne.n	e09e <_strtoul_l.isra.0+0x7a>
    e09a:	45a1      	cmp	r9, r4
    e09c:	db1a      	blt.n	e0d4 <_strtoul_l.isra.0+0xb0>
    e09e:	fb00 4003 	mla	r0, r0, r3, r4
    e0a2:	2501      	movs	r5, #1
    e0a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
    e0a8:	e7eb      	b.n	e082 <_strtoul_l.isra.0+0x5e>
    e0aa:	2c2b      	cmp	r4, #43	; 0x2b
    e0ac:	bf08      	it	eq
    e0ae:	f89c 4000 	ldrbeq.w	r4, [ip]
    e0b2:	46a8      	mov	r8, r5
    e0b4:	bf08      	it	eq
    e0b6:	f100 0c02 	addeq.w	ip, r0, #2
    e0ba:	e7c7      	b.n	e04c <_strtoul_l.isra.0+0x28>
    e0bc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
    e0c0:	2e19      	cmp	r6, #25
    e0c2:	d801      	bhi.n	e0c8 <_strtoul_l.isra.0+0xa4>
    e0c4:	3c37      	subs	r4, #55	; 0x37
    e0c6:	e7e1      	b.n	e08c <_strtoul_l.isra.0+0x68>
    e0c8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
    e0cc:	2e19      	cmp	r6, #25
    e0ce:	d804      	bhi.n	e0da <_strtoul_l.isra.0+0xb6>
    e0d0:	3c57      	subs	r4, #87	; 0x57
    e0d2:	e7db      	b.n	e08c <_strtoul_l.isra.0+0x68>
    e0d4:	f04f 35ff 	mov.w	r5, #4294967295
    e0d8:	e7e4      	b.n	e0a4 <_strtoul_l.isra.0+0x80>
    e0da:	2d00      	cmp	r5, #0
    e0dc:	da07      	bge.n	e0ee <_strtoul_l.isra.0+0xca>
    e0de:	2322      	movs	r3, #34	; 0x22
    e0e0:	f8ce 3000 	str.w	r3, [lr]
    e0e4:	f04f 30ff 	mov.w	r0, #4294967295
    e0e8:	b942      	cbnz	r2, e0fc <_strtoul_l.isra.0+0xd8>
    e0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e0ee:	f1b8 0f00 	cmp.w	r8, #0
    e0f2:	d000      	beq.n	e0f6 <_strtoul_l.isra.0+0xd2>
    e0f4:	4240      	negs	r0, r0
    e0f6:	2a00      	cmp	r2, #0
    e0f8:	d0f7      	beq.n	e0ea <_strtoul_l.isra.0+0xc6>
    e0fa:	b10d      	cbz	r5, e100 <_strtoul_l.isra.0+0xdc>
    e0fc:	f10c 31ff 	add.w	r1, ip, #4294967295
    e100:	6011      	str	r1, [r2, #0]
    e102:	e7f2      	b.n	e0ea <_strtoul_l.isra.0+0xc6>
    e104:	2430      	movs	r4, #48	; 0x30
    e106:	2b00      	cmp	r3, #0
    e108:	d1b1      	bne.n	e06e <_strtoul_l.isra.0+0x4a>
    e10a:	2308      	movs	r3, #8
    e10c:	e7af      	b.n	e06e <_strtoul_l.isra.0+0x4a>
    e10e:	2c30      	cmp	r4, #48	; 0x30
    e110:	d0a2      	beq.n	e058 <_strtoul_l.isra.0+0x34>
    e112:	230a      	movs	r3, #10
    e114:	e7ab      	b.n	e06e <_strtoul_l.isra.0+0x4a>
    e116:	bf00      	nop
    e118:	00020575 	.word	0x00020575

0000e11c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e11c:	4770      	bx	lr

0000e11e <svr_getAttributeAccess>:
}
    e11e:	2000      	movs	r0, #0
    e120:	4770      	bx	lr

0000e122 <svr_getMethodAccess>:
    e122:	2000      	movs	r0, #0
    e124:	4770      	bx	lr

0000e126 <svr_connected>:
}
    e126:	2000      	movs	r0, #0
    e128:	4770      	bx	lr

0000e12a <svr_isTarget>:
}
    e12a:	2000      	movs	r0, #0
    e12c:	4770      	bx	lr

0000e12e <ba_init>:

//Initialize bit array.
void ba_init(bitArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
    e12e:	2300      	movs	r3, #0
    arr->capacity = 0;
    e130:	e9c0 3300 	strd	r3, r3, [r0]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
    arr->size = 0;
}
    e134:	4770      	bx	lr

0000e136 <ba_attach>:
    unsigned char* value,
    uint16_t count,
    uint16_t capacity)
{
    arr->data = value;
    arr->capacity = (uint16_t)(0x8000 | capacity);
    e136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    e13a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    arr->data = value;
    e13e:	6001      	str	r1, [r0, #0]
    arr->capacity = (uint16_t)(0x8000 | capacity);
    e140:	8083      	strh	r3, [r0, #4]
    arr->size = count;
    e142:	80c2      	strh	r2, [r0, #6]
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
}
    e144:	4770      	bx	lr

0000e146 <ba_capacity>:

//Allocate new size for the array in bytes.
int ba_capacity(bitArray* arr, uint16_t capacity)
{
#ifndef DLMS_IGNORE_MALLOC
    if (!ba_isAttached(arr))
    e146:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    e14a:	2b00      	cmp	r3, #0
{
    e14c:	b570      	push	{r4, r5, r6, lr}
    e14e:	4605      	mov	r5, r0
    e150:	460c      	mov	r4, r1
    if (!ba_isAttached(arr))
    e152:	db1b      	blt.n	e18c <ba_capacity+0x46>
    {
        arr->capacity = capacity;
    e154:	6806      	ldr	r6, [r0, #0]
    e156:	8081      	strh	r1, [r0, #4]
        if (capacity == 0)
    e158:	b931      	cbnz	r1, e168 <ba_capacity+0x22>
        {
            if (arr->data != NULL)
    e15a:	b11e      	cbz	r6, e164 <ba_capacity+0x1e>
            {
                gxfree(arr->data);
    e15c:	4630      	mov	r0, r6
    e15e:	f7ff f8d1 	bl	d304 <free>
                arr->data = NULL;
    e162:	602c      	str	r4, [r5, #0]
#endif //DLMS_IGNORE_MALLOC
    if (ba_getCapacity(arr) < capacity)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
    e164:	2000      	movs	r0, #0
    e166:	e00a      	b.n	e17e <ba_capacity+0x38>
            if (arr->data == NULL)
    e168:	4608      	mov	r0, r1
    e16a:	f7f3 fa0b 	bl	1584 <ba_getByteCount>
    e16e:	4601      	mov	r1, r0
    e170:	b936      	cbnz	r6, e180 <ba_capacity+0x3a>
                arr->data = (unsigned char*)gxmalloc(ba_getByteCount(arr->capacity));
    e172:	f7ff f8bf 	bl	d2f4 <malloc>
    e176:	6028      	str	r0, [r5, #0]
                if (arr->data == NULL)
    e178:	b940      	cbnz	r0, e18c <ba_capacity+0x46>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    e17a:	f44f 7082 	mov.w	r0, #260	; 0x104
}
    e17e:	bd70      	pop	{r4, r5, r6, pc}
                unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, ba_getByteCount(arr->capacity));
    e180:	4630      	mov	r0, r6
    e182:	f7ff f96f 	bl	d464 <realloc>
                if (tmp == NULL)
    e186:	2800      	cmp	r0, #0
    e188:	d0f7      	beq.n	e17a <ba_capacity+0x34>
                arr->data = tmp;
    e18a:	6028      	str	r0, [r5, #0]
    return arr->capacity & 0x7FFF;
    e18c:	88ab      	ldrh	r3, [r5, #4]
    if (ba_getCapacity(arr) < capacity)
    e18e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    e192:	429c      	cmp	r4, r3
    e194:	d9e6      	bls.n	e164 <ba_capacity+0x1e>
    e196:	e7f0      	b.n	e17a <ba_capacity+0x34>

0000e198 <ba_setByIndex>:
    return ret;
}

//Set bit by index.
int ba_setByIndex(bitArray* arr, uint16_t index, unsigned char item)
{
    e198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e19a:	4607      	mov	r7, r0
    e19c:	460e      	mov	r6, r1
    e19e:	4615      	mov	r5, r2
    return (arr->capacity & 0x8000) == 0x8000;
    e1a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
    e1a4:	88bb      	ldrh	r3, [r7, #4]
    int ret;
    unsigned char newItem = 0;
    int byteIndex;
    item = item == 0 ? 0 : 1;
    e1a6:	3d00      	subs	r5, #0
    e1a8:	bf18      	it	ne
    e1aa:	2501      	movne	r5, #1
    if (!ba_isAttached(arr))
    e1ac:	2900      	cmp	r1, #0
    e1ae:	db20      	blt.n	e1f2 <ba_setByIndex+0x5a>
    {
        if (index >= arr->capacity)
    e1b0:	42b3      	cmp	r3, r6
    e1b2:	d81e      	bhi.n	e1f2 <ba_setByIndex+0x5a>
        {
            if ((ret = ba_capacity(arr, arr->capacity + BIT_ARRAY_CAPACITY)) != 0)
    e1b4:	3108      	adds	r1, #8
    e1b6:	b289      	uxth	r1, r1
    e1b8:	4638      	mov	r0, r7
    e1ba:	f7ff ffc4 	bl	e146 <ba_capacity>
    e1be:	b9b8      	cbnz	r0, e1f0 <ba_setByIndex+0x58>
            {
                return ret;
            }
            //If we are adding a bit to the higher than next byte.
            if (index >= arr->capacity)
    e1c0:	88bb      	ldrh	r3, [r7, #4]
    e1c2:	42b3      	cmp	r3, r6
    e1c4:	d9ec      	bls.n	e1a0 <ba_setByIndex+0x8>
            {
                return ba_setByIndex(arr, index, item);
            }
            newItem = 1;
    e1c6:	2401      	movs	r4, #1
        }
    }
    if (index >= arr->capacity)
    e1c8:	88bb      	ldrh	r3, [r7, #4]
    e1ca:	42b3      	cmp	r3, r6
    e1cc:	d91c      	bls.n	e208 <ba_setByIndex+0x70>
    double d = bitCount;
    e1ce:	4630      	mov	r0, r6
    e1d0:	f7f2 f938 	bl	444 <__aeabi_i2d>
    d /= 8;
    e1d4:	2200      	movs	r2, #0
    e1d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    e1da:	f7f2 f99d 	bl	518 <__aeabi_dmul>
    return (int)d;
    e1de:	f7f2 fbad 	bl	93c <__aeabi_d2iz>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    byteIndex = getByteIndex(index);
    if (index % 8 == 0 || newItem)
    e1e2:	0772      	lsls	r2, r6, #29
    e1e4:	683b      	ldr	r3, [r7, #0]
    e1e6:	d000      	beq.n	e1ea <ba_setByIndex+0x52>
    e1e8:	b12c      	cbz	r4, e1f6 <ba_setByIndex+0x5e>
    {
        arr->data[byteIndex] = (unsigned char)(item << 7);
    e1ea:	01ed      	lsls	r5, r5, #7
    e1ec:	541d      	strb	r5, [r3, r0]
    }
    else
    {
        arr->data[byteIndex] |= (item << (7 - (index % 8)));
    }
    return 0;
    e1ee:	2000      	movs	r0, #0
}
    e1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    unsigned char newItem = 0;
    e1f2:	2400      	movs	r4, #0
    e1f4:	e7e8      	b.n	e1c8 <ba_setByIndex+0x30>
        arr->data[byteIndex] |= (item << (7 - (index % 8)));
    e1f6:	43f6      	mvns	r6, r6
    e1f8:	f006 0607 	and.w	r6, r6, #7
    e1fc:	fa05 f606 	lsl.w	r6, r5, r6
    e200:	5c1d      	ldrb	r5, [r3, r0]
    e202:	432e      	orrs	r6, r5
    e204:	541e      	strb	r6, [r3, r0]
    e206:	e7f2      	b.n	e1ee <ba_setByIndex+0x56>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e208:	f44f 7082 	mov.w	r0, #260	; 0x104
    e20c:	e7f0      	b.n	e1f0 <ba_setByIndex+0x58>

0000e20e <ba_clear>:
    }
    return ret;
}

void ba_clear(bitArray* arr)
{
    e20e:	b510      	push	{r4, lr}
    e210:	4604      	mov	r4, r0
#ifndef DLMS_IGNORE_MALLOC
    if (arr->data != NULL)
    e212:	6800      	ldr	r0, [r0, #0]
    e214:	b118      	cbz	r0, e21e <ba_clear+0x10>
    {
        gxfree(arr->data);
    e216:	f7ff f875 	bl	d304 <free>
        arr->data = NULL;
    e21a:	2300      	movs	r3, #0
    e21c:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
    e21e:	2300      	movs	r3, #0
    e220:	6063      	str	r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
#ifndef GX_DLMS_MICROCONTROLLER
    arr->position = 0;
#endif //GX_DLMS_MICROCONTROLLER
}
    e222:	bd10      	pop	{r4, pc}

0000e224 <ba_copy>:
{
    e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e226:	4614      	mov	r4, r2
    e228:	4606      	mov	r6, r0
    e22a:	460f      	mov	r7, r1
    ba_clear(target);
    e22c:	f7ff ffef 	bl	e20e <ba_clear>
    if (count != 0)
    e230:	b184      	cbz	r4, e254 <ba_copy+0x30>
        if ((ret = ba_capacity(target, count)) == 0)
    e232:	4621      	mov	r1, r4
    e234:	4630      	mov	r0, r6
    e236:	f7ff ff86 	bl	e146 <ba_capacity>
    e23a:	4605      	mov	r5, r0
    e23c:	b940      	cbnz	r0, e250 <ba_copy+0x2c>
            memcpy(target->data, source, ba_getByteCount(count));
    e23e:	4620      	mov	r0, r4
    e240:	f7f3 f9a0 	bl	1584 <ba_getByteCount>
    e244:	4639      	mov	r1, r7
    e246:	4602      	mov	r2, r0
    e248:	6830      	ldr	r0, [r6, #0]
    e24a:	f00f ffda 	bl	1e202 <memcpy>
            target->size = count;
    e24e:	80f4      	strh	r4, [r6, #6]
}
    e250:	4628      	mov	r0, r5
    e252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int ret = 0;
    e254:	4625      	mov	r5, r4
    return ret;
    e256:	e7fb      	b.n	e250 <ba_copy+0x2c>

0000e258 <ba_getByIndex>:
#endif //GX_DLMS_MICROCONTROLLER

int ba_getByIndex(bitArray* arr, int index, unsigned char* value)
{
    char ch;
    if (index >= arr->size)
    e258:	88c3      	ldrh	r3, [r0, #6]
    e25a:	428b      	cmp	r3, r1
{
    e25c:	b570      	push	{r4, r5, r6, lr}
    e25e:	4605      	mov	r5, r0
    e260:	460c      	mov	r4, r1
    e262:	4616      	mov	r6, r2
    if (index >= arr->size)
    e264:	dd1b      	ble.n	e29e <ba_getByIndex+0x46>
    double d = bitCount;
    e266:	4608      	mov	r0, r1
    e268:	f7f2 f8ec 	bl	444 <__aeabi_i2d>
    d /= 8;
    e26c:	2200      	movs	r2, #0
    e26e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    e272:	f7f2 f951 	bl	518 <__aeabi_dmul>
    return (int)d;
    e276:	f7f2 fb61 	bl	93c <__aeabi_d2iz>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    ch = arr->data[getByteIndex(index)];
    *value = (ch & (1 << (7 - (index % 8)))) != 0;
    e27a:	4262      	negs	r2, r4
    ch = arr->data[getByteIndex(index)];
    e27c:	682b      	ldr	r3, [r5, #0]
    *value = (ch & (1 << (7 - (index % 8)))) != 0;
    e27e:	f002 0207 	and.w	r2, r2, #7
    e282:	5c1b      	ldrb	r3, [r3, r0]
    e284:	f004 0407 	and.w	r4, r4, #7
    e288:	bf58      	it	pl
    e28a:	4254      	negpl	r4, r2
    e28c:	f1c4 0407 	rsb	r4, r4, #7
    e290:	fa43 f404 	asr.w	r4, r3, r4
    e294:	f004 0401 	and.w	r4, r4, #1
    e298:	7034      	strb	r4, [r6, #0]
    return 0;
    e29a:	2000      	movs	r0, #0
}
    e29c:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e29e:	f44f 7082 	mov.w	r0, #260	; 0x104
    e2a2:	e7fb      	b.n	e29c <ba_getByIndex+0x44>

0000e2a4 <ba_toInteger>:

int ba_toInteger(bitArray* arr, uint32_t* value)
{
    e2a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    *value = 0;
    e2a6:	2400      	movs	r4, #0
{
    e2a8:	4606      	mov	r6, r0
    e2aa:	460d      	mov	r5, r1
    *value = 0;
    e2ac:	600c      	str	r4, [r1, #0]
    unsigned char ch;
    int pos, ret;
    for (pos = 0; pos != arr->size; ++pos)
    e2ae:	88f3      	ldrh	r3, [r6, #6]
    e2b0:	42a3      	cmp	r3, r4
    e2b2:	d102      	bne.n	e2ba <ba_toInteger+0x16>
        {
            return ret;
        }
        *value |= ch << pos;
    }
    return 0;
    e2b4:	2000      	movs	r0, #0
}
    e2b6:	b002      	add	sp, #8
    e2b8:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = ba_getByIndex(arr, pos, &ch)) != 0)
    e2ba:	f10d 0207 	add.w	r2, sp, #7
    e2be:	4621      	mov	r1, r4
    e2c0:	4630      	mov	r0, r6
    e2c2:	f7ff ffc9 	bl	e258 <ba_getByIndex>
    e2c6:	2800      	cmp	r0, #0
    e2c8:	d1f5      	bne.n	e2b6 <ba_toInteger+0x12>
        *value |= ch << pos;
    e2ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2ce:	fa03 f204 	lsl.w	r2, r3, r4
    e2d2:	682b      	ldr	r3, [r5, #0]
    e2d4:	4313      	orrs	r3, r2
    e2d6:	602b      	str	r3, [r5, #0]
    for (pos = 0; pos != arr->size; ++pos)
    e2d8:	3401      	adds	r4, #1
    e2da:	e7e8      	b.n	e2ae <ba_toInteger+0xa>

0000e2dc <ba_toString>:

#ifndef DLMS_IGNORE_MALLOC
char* ba_toString(bitArray* arr)
{
    e2dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e2de:	4606      	mov	r6, r0
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
    int pos, ret;
#else
    int pos;
#endif
    char* buff = (char*)gxmalloc(arr->size + 1);
    e2e0:	88c0      	ldrh	r0, [r0, #6]
    e2e2:	3001      	adds	r0, #1
    e2e4:	f7ff f806 	bl	d2f4 <malloc>
    for (pos = 0; pos != arr->size; ++pos)
    e2e8:	2400      	movs	r4, #0
    char* buff = (char*)gxmalloc(arr->size + 1);
    e2ea:	4605      	mov	r5, r0
    for (pos = 0; pos != arr->size; ++pos)
    e2ec:	88f3      	ldrh	r3, [r6, #6]
    e2ee:	42a3      	cmp	r3, r4
    e2f0:	d104      	bne.n	e2fc <ba_toString+0x20>
#else
        ba_getByIndex(arr, pos, &ch);
#endif
        buff[pos] = ch == 0 ? '0' : '1';
    }
    *(buff + arr->size) = 0;
    e2f2:	2300      	movs	r3, #0
    return buff;
}
    e2f4:	4628      	mov	r0, r5
    *(buff + arr->size) = 0;
    e2f6:	552b      	strb	r3, [r5, r4]
}
    e2f8:	b002      	add	sp, #8
    e2fa:	bd70      	pop	{r4, r5, r6, pc}
        ba_getByIndex(arr, pos, &ch);
    e2fc:	4621      	mov	r1, r4
    e2fe:	f10d 0207 	add.w	r2, sp, #7
    e302:	4630      	mov	r0, r6
    e304:	f7ff ffa8 	bl	e258 <ba_getByIndex>
        buff[pos] = ch == 0 ? '0' : '1';
    e308:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e30c:	2b00      	cmp	r3, #0
    e30e:	bf0c      	ite	eq
    e310:	2330      	moveq	r3, #48	; 0x30
    e312:	2331      	movne	r3, #49	; 0x31
    e314:	552b      	strb	r3, [r5, r4]
    for (pos = 0; pos != arr->size; ++pos)
    e316:	3401      	adds	r4, #1
    e318:	e7e8      	b.n	e2ec <ba_toString+0x10>

0000e31a <bb_isAttached>:
#include "../include/bytebuffer.h"
#include "../include/helpers.h"

char bb_isAttached(gxByteBuffer* arr)
{
    if (arr == NULL)
    e31a:	b108      	cbz	r0, e320 <bb_isAttached+0x6>
    }
#if defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
    //If byte buffer is attached.
    return (arr->capacity & 0x80000000) == 0x80000000;
#else
    return (arr->capacity & 0x8000) == 0x8000;
    e31c:	8880      	ldrh	r0, [r0, #4]
    e31e:	0bc0      	lsrs	r0, r0, #15
#endif
}
    e320:	4770      	bx	lr

0000e322 <bb_available>:
uint32_t bb_available(gxByteBuffer* arr)
#else
uint16_t bb_available(gxByteBuffer* arr)
#endif
{
    if (arr == NULL)
    e322:	b118      	cbz	r0, e32c <bb_available+0xa>
    {
        return 0;
    }
    return arr->size - arr->position;
    e324:	88c3      	ldrh	r3, [r0, #6]
    e326:	8900      	ldrh	r0, [r0, #8]
    e328:	1a18      	subs	r0, r3, r0
    e32a:	b280      	uxth	r0, r0
}
    e32c:	4770      	bx	lr

0000e32e <bb_getCapacity>:
{
#if defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER)&& (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
    //If byte buffer is attached.
    return arr->capacity & 0x7FFFFFFF;
#else
    return arr->capacity & 0x7FFF;
    e32e:	8880      	ldrh	r0, [r0, #4]
#endif
}
    e330:	f3c0 000e 	ubfx	r0, r0, #0, #15
    e334:	4770      	bx	lr

0000e336 <bb_size>:
uint32_t bb_size(gxByteBuffer* arr)
#else
uint16_t bb_size(gxByteBuffer* arr)
#endif
{
    return arr != NULL ? arr->size : 0;
    e336:	b100      	cbz	r0, e33a <bb_size+0x4>
    e338:	88c0      	ldrh	r0, [r0, #6]
}
    e33a:	4770      	bx	lr

0000e33c <bb_init>:

int BYTE_BUFFER_INIT(
    gxByteBuffer* arr)
{
    e33c:	4603      	mov	r3, r0
    arr->capacity = 0;
    arr->data = NULL;
    e33e:	2000      	movs	r0, #0
    arr->capacity = 0;
    e340:	e9c3 0000 	strd	r0, r0, [r3]
    arr->position = 0;
    e344:	8118      	strh	r0, [r3, #8]
    arr->size = 0;
    return 0;
}
    e346:	4770      	bx	lr

0000e348 <bb_capacity>:
#else
int bb_capacity(
    gxByteBuffer* arr,
    uint16_t capacity)
#endif
{
    e348:	b538      	push	{r3, r4, r5, lr}
    e34a:	4604      	mov	r4, r0
    e34c:	460d      	mov	r5, r1
#ifndef DLMS_IGNORE_MALLOC
    //Capacity can't change if it's attached.
    if (!bb_isAttached(arr))
    e34e:	f7ff ffe4 	bl	e31a <bb_isAttached>
    e352:	b9d8      	cbnz	r0, e38c <bb_capacity+0x44>
    {
        if (capacity == 0)
    e354:	b931      	cbnz	r1, e364 <bb_capacity+0x1c>
        {
            if (arr->data != NULL)
    e356:	6820      	ldr	r0, [r4, #0]
    e358:	b1b8      	cbz	r0, e38a <bb_capacity+0x42>
            {
                gxfree(arr->data);
    e35a:	f7fe ffd3 	bl	d304 <free>
                arr->data = NULL;
    e35e:	6025      	str	r5, [r4, #0]
                }
                arr->data = tmp;
            }
            if (arr->size > capacity)
            {
                arr->size = capacity;
    e360:	80e5      	strh	r5, [r4, #6]
    e362:	e012      	b.n	e38a <bb_capacity+0x42>
            if (arr->capacity == 0)
    e364:	88a3      	ldrh	r3, [r4, #4]
    e366:	b93b      	cbnz	r3, e378 <bb_capacity+0x30>
                arr->data = (unsigned char*)gxmalloc(capacity);
    e368:	4608      	mov	r0, r1
    e36a:	f7fe ffc3 	bl	d2f4 <malloc>
    e36e:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
    e370:	b940      	cbnz	r0, e384 <bb_capacity+0x3c>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    e372:	f44f 7082 	mov.w	r0, #260	; 0x104
    if (bb_getCapacity(arr) < capacity)
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return DLMS_ERROR_CODE_OK;
}
    e376:	bd38      	pop	{r3, r4, r5, pc}
                unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, capacity);
    e378:	6820      	ldr	r0, [r4, #0]
    e37a:	f7ff f873 	bl	d464 <realloc>
                if (tmp == NULL)
    e37e:	2800      	cmp	r0, #0
    e380:	d0f7      	beq.n	e372 <bb_capacity+0x2a>
                arr->data = tmp;
    e382:	6020      	str	r0, [r4, #0]
            if (arr->size > capacity)
    e384:	88e3      	ldrh	r3, [r4, #6]
    e386:	42ab      	cmp	r3, r5
    e388:	d8ea      	bhi.n	e360 <bb_capacity+0x18>
        arr->capacity = capacity;
    e38a:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
    e38c:	88a3      	ldrh	r3, [r4, #4]
    if (bb_getCapacity(arr) < capacity)
    e38e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    e392:	42ab      	cmp	r3, r5
    e394:	d3ed      	bcc.n	e372 <bb_capacity+0x2a>
    return DLMS_ERROR_CODE_OK;
    e396:	2000      	movs	r0, #0
    e398:	e7ed      	b.n	e376 <bb_capacity+0x2e>

0000e39a <bb_allocate>:
int bb_allocate(
    gxByteBuffer* arr,
    uint16_t index,
    uint16_t dataSize)
#endif
{
    e39a:	b570      	push	{r4, r5, r6, lr}
    e39c:	4604      	mov	r4, r0
    e39e:	460e      	mov	r6, r1
    e3a0:	4615      	mov	r5, r2
#ifndef DLMS_IGNORE_MALLOC
    if (!bb_isAttached(arr) && (arr->capacity == 0 || index + dataSize > arr->capacity))
    e3a2:	f7ff ffba 	bl	e31a <bb_isAttached>
    e3a6:	b920      	cbnz	r0, e3b2 <bb_allocate+0x18>
    e3a8:	88a3      	ldrh	r3, [r4, #4]
    e3aa:	b1a3      	cbz	r3, e3d6 <bb_allocate+0x3c>
    e3ac:	188a      	adds	r2, r1, r2
    e3ae:	429a      	cmp	r2, r3
    e3b0:	dc0f      	bgt.n	e3d2 <bb_allocate+0x38>
    return arr->capacity & 0x7FFF;
    e3b2:	88a3      	ldrh	r3, [r4, #4]
            }
            arr->data = tmp;
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (bb_getCapacity(arr) < index + dataSize)
    e3b4:	4435      	add	r5, r6
    e3b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
    e3ba:	42ab      	cmp	r3, r5
    e3bc:	db15      	blt.n	e3ea <bb_allocate+0x50>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
    e3be:	2000      	movs	r0, #0
    e3c0:	e015      	b.n	e3ee <bb_allocate+0x54>
            arr->capacity += VECTOR_CAPACITY;
    e3c2:	3332      	adds	r3, #50	; 0x32
    e3c4:	80a3      	strh	r3, [r4, #4]
        if (empty)
    e3c6:	e00a      	b.n	e3de <bb_allocate+0x44>
            arr->data = (unsigned char*)gxmalloc(arr->capacity);
    e3c8:	4628      	mov	r0, r5
    e3ca:	f7fe ff93 	bl	d2f4 <malloc>
            arr->data = tmp;
    e3ce:	6020      	str	r0, [r4, #0]
    e3d0:	e7ef      	b.n	e3b2 <bb_allocate+0x18>
        if (dataSize > VECTOR_CAPACITY || arr->capacity == 0)
    e3d2:	2d32      	cmp	r5, #50	; 0x32
    e3d4:	d9f5      	bls.n	e3c2 <bb_allocate+0x28>
            arr->capacity += dataSize;
    e3d6:	18ea      	adds	r2, r5, r3
    e3d8:	80a2      	strh	r2, [r4, #4]
        if (empty)
    e3da:	2b00      	cmp	r3, #0
    e3dc:	d0f4      	beq.n	e3c8 <bb_allocate+0x2e>
            unsigned char* tmp = (unsigned char*)gxrealloc(arr->data, arr->capacity);
    e3de:	88a1      	ldrh	r1, [r4, #4]
    e3e0:	6820      	ldr	r0, [r4, #0]
    e3e2:	f7ff f83f 	bl	d464 <realloc>
            if (tmp == NULL)
    e3e6:	2800      	cmp	r0, #0
    e3e8:	d1f1      	bne.n	e3ce <bb_allocate+0x34>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    e3ea:	f44f 7082 	mov.w	r0, #260	; 0x104
}
    e3ee:	bd70      	pop	{r4, r5, r6, pc}

0000e3f0 <bb_setUInt8ByIndex>:
int bb_setUInt8ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    unsigned char item)
#endif
{
    e3f0:	b570      	push	{r4, r5, r6, lr}
    e3f2:	460d      	mov	r5, r1
    e3f4:	4616      	mov	r6, r2
    if (arr == NULL)
    e3f6:	4604      	mov	r4, r0
    e3f8:	b130      	cbz	r0, e408 <bb_setUInt8ByIndex+0x18>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    int ret = bb_allocate(arr, index, 1);
    e3fa:	2201      	movs	r2, #1
    e3fc:	f7ff ffcd 	bl	e39a <bb_allocate>
    if (ret == 0)
    e400:	b908      	cbnz	r0, e406 <bb_setUInt8ByIndex+0x16>
    {
        arr->data[index] = item;
    e402:	6823      	ldr	r3, [r4, #0]
    e404:	555e      	strb	r6, [r3, r5]
    }
    return ret;
}
    e406:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    e408:	f44f 7081 	mov.w	r0, #258	; 0x102
    e40c:	e7fb      	b.n	e406 <bb_setUInt8ByIndex+0x16>

0000e40e <bb_setUInt8>:
{
    e40e:	b510      	push	{r4, lr}
    e410:	460a      	mov	r2, r1
    return arr != NULL ? arr->size : 0;
    e412:	4604      	mov	r4, r0
    e414:	b140      	cbz	r0, e428 <bb_setUInt8+0x1a>
    e416:	88c1      	ldrh	r1, [r0, #6]
    int ret = bb_setUInt8ByIndex(arr, bb_size(arr), item);
    e418:	4620      	mov	r0, r4
    e41a:	f7ff ffe9 	bl	e3f0 <bb_setUInt8ByIndex>
    if (ret == 0)
    e41e:	b910      	cbnz	r0, e426 <bb_setUInt8+0x18>
        ++arr->size;
    e420:	88e3      	ldrh	r3, [r4, #6]
    e422:	3301      	adds	r3, #1
    e424:	80e3      	strh	r3, [r4, #6]
}
    e426:	bd10      	pop	{r4, pc}
    return arr != NULL ? arr->size : 0;
    e428:	4601      	mov	r1, r0
    e42a:	e7f5      	b.n	e418 <bb_setUInt8+0xa>

0000e42c <bb_setUInt16ByIndex>:
int bb_setUInt16ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    uint16_t item)
#endif
{
    e42c:	b570      	push	{r4, r5, r6, lr}
    e42e:	460c      	mov	r4, r1
    int ret = 0;
    if (index + 2 > arr->size)
    e430:	88c1      	ldrh	r1, [r0, #6]
    e432:	1ca3      	adds	r3, r4, #2
    e434:	428b      	cmp	r3, r1
{
    e436:	4605      	mov	r5, r0
    e438:	4616      	mov	r6, r2
    if (index + 2 > arr->size)
    e43a:	dd02      	ble.n	e442 <bb_setUInt16ByIndex+0x16>
    {
        bb_allocate(arr, arr->size, 2);
    e43c:	2202      	movs	r2, #2
    e43e:	f7ff ffac 	bl	e39a <bb_allocate>
    }
    if (ret == 0)
    {
        arr->data[index] = (item >> 8) & 0xFF;
    e442:	682b      	ldr	r3, [r5, #0]
    e444:	0a32      	lsrs	r2, r6, #8
    e446:	551a      	strb	r2, [r3, r4]
        arr->data[index + 1] = item & 0xFF;
    e448:	6829      	ldr	r1, [r5, #0]
    e44a:	440c      	add	r4, r1
    }
    return ret;
}
    e44c:	2000      	movs	r0, #0
        arr->data[index + 1] = item & 0xFF;
    e44e:	7066      	strb	r6, [r4, #1]
}
    e450:	bd70      	pop	{r4, r5, r6, pc}

0000e452 <bb_setUInt16>:
{
    e452:	b510      	push	{r4, lr}
    e454:	460a      	mov	r2, r1
    int ret = bb_setUInt16ByIndex(arr, arr->size, item);
    e456:	88c1      	ldrh	r1, [r0, #6]
{
    e458:	4604      	mov	r4, r0
    int ret = bb_setUInt16ByIndex(arr, arr->size, item);
    e45a:	f7ff ffe7 	bl	e42c <bb_setUInt16ByIndex>
    if (ret == 0)
    e45e:	b910      	cbnz	r0, e466 <bb_setUInt16+0x14>
        arr->size += 2;
    e460:	88e3      	ldrh	r3, [r4, #6]
    e462:	3302      	adds	r3, #2
    e464:	80e3      	strh	r3, [r4, #6]
}
    e466:	bd10      	pop	{r4, pc}

0000e468 <bb_setUInt32ByIndex>:
int bb_setUInt32ByIndex(
    gxByteBuffer* arr,
    uint16_t index,
    uint32_t item)
#endif //defined(GX_DLMS_BYTE_BUFFER_SIZE_32) || (!defined(GX_DLMS_MICROCONTROLLER) && (defined(_WIN32) || defined(_WIN64) || defined(__linux__)))
{
    e468:	b570      	push	{r4, r5, r6, lr}
    e46a:	4614      	mov	r4, r2
    int ret = bb_allocate(arr, index, 4);
    e46c:	2204      	movs	r2, #4
{
    e46e:	4606      	mov	r6, r0
    e470:	460d      	mov	r5, r1
    int ret = bb_allocate(arr, index, 4);
    e472:	f7ff ff92 	bl	e39a <bb_allocate>
    if (ret == 0)
    e476:	b968      	cbnz	r0, e494 <bb_setUInt32ByIndex+0x2c>
    {
        PUT32(arr->data + index, item);
    e478:	6833      	ldr	r3, [r6, #0]
    e47a:	0e22      	lsrs	r2, r4, #24
    e47c:	555a      	strb	r2, [r3, r5]
    e47e:	6833      	ldr	r3, [r6, #0]
    e480:	442b      	add	r3, r5
    e482:	0c22      	lsrs	r2, r4, #16
    e484:	705a      	strb	r2, [r3, #1]
    e486:	6833      	ldr	r3, [r6, #0]
    e488:	442b      	add	r3, r5
    e48a:	0a22      	lsrs	r2, r4, #8
    e48c:	709a      	strb	r2, [r3, #2]
    e48e:	6831      	ldr	r1, [r6, #0]
    e490:	440d      	add	r5, r1
    e492:	70ec      	strb	r4, [r5, #3]
    }
    return ret;
}
    e494:	bd70      	pop	{r4, r5, r6, pc}

0000e496 <bb_setUInt32>:
{
    e496:	b510      	push	{r4, lr}
    e498:	460a      	mov	r2, r1
    int ret = bb_setUInt32ByIndex(arr, arr->size, item);
    e49a:	88c1      	ldrh	r1, [r0, #6]
{
    e49c:	4604      	mov	r4, r0
    int ret = bb_setUInt32ByIndex(arr, arr->size, item);
    e49e:	f7ff ffe3 	bl	e468 <bb_setUInt32ByIndex>
    if (ret == 0)
    e4a2:	b910      	cbnz	r0, e4aa <bb_setUInt32+0x14>
        arr->size += 4;
    e4a4:	88e3      	ldrh	r3, [r4, #6]
    e4a6:	3304      	adds	r3, #4
    e4a8:	80e3      	strh	r3, [r4, #6]
}
    e4aa:	bd10      	pop	{r4, pc}

0000e4ac <bb_setUInt64>:

int bb_setUInt64(
    gxByteBuffer* arr,
    uint64_t item)
{
    e4ac:	b570      	push	{r4, r5, r6, lr}
    int ret = bb_allocate(arr, arr->size, 8);
    e4ae:	88c1      	ldrh	r1, [r0, #6]
{
    e4b0:	4616      	mov	r6, r2
    int ret = bb_allocate(arr, arr->size, 8);
    e4b2:	2208      	movs	r2, #8
{
    e4b4:	4604      	mov	r4, r0
    e4b6:	461d      	mov	r5, r3
    int ret = bb_allocate(arr, arr->size, 8);
    e4b8:	f7ff ff6f 	bl	e39a <bb_allocate>
    if (ret == 0)
    e4bc:	bb38      	cbnz	r0, e50e <bb_setUInt64+0x62>
    {
        ((unsigned char*)arr->data)[arr->size + 7] = item & 0xFF;
    e4be:	88e2      	ldrh	r2, [r4, #6]
    e4c0:	6823      	ldr	r3, [r4, #0]
    e4c2:	4413      	add	r3, r2
    e4c4:	71de      	strb	r6, [r3, #7]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 6] = item & 0xFF;
    e4c6:	88e2      	ldrh	r2, [r4, #6]
    e4c8:	6823      	ldr	r3, [r4, #0]
    e4ca:	4413      	add	r3, r2
        item >>= 8;
    e4cc:	0a32      	lsrs	r2, r6, #8
        ((unsigned char*)arr->data)[arr->size + 6] = item & 0xFF;
    e4ce:	719a      	strb	r2, [r3, #6]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 5] = item & 0xFF;
    e4d0:	88e2      	ldrh	r2, [r4, #6]
    e4d2:	6823      	ldr	r3, [r4, #0]
    e4d4:	4413      	add	r3, r2
        item >>= 8;
    e4d6:	0c32      	lsrs	r2, r6, #16
        ((unsigned char*)arr->data)[arr->size + 5] = item & 0xFF;
    e4d8:	715a      	strb	r2, [r3, #5]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 4] = item & 0xFF;
    e4da:	88e2      	ldrh	r2, [r4, #6]
    e4dc:	6823      	ldr	r3, [r4, #0]
    e4de:	4413      	add	r3, r2
        item >>= 8;
    e4e0:	0e36      	lsrs	r6, r6, #24
        ((unsigned char*)arr->data)[arr->size + 4] = item & 0xFF;
    e4e2:	711e      	strb	r6, [r3, #4]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 3] = item & 0xFF;
    e4e4:	88e2      	ldrh	r2, [r4, #6]
    e4e6:	6823      	ldr	r3, [r4, #0]
    e4e8:	4413      	add	r3, r2
    e4ea:	70dd      	strb	r5, [r3, #3]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 2] = item & 0xFF;
    e4ec:	88e2      	ldrh	r2, [r4, #6]
    e4ee:	6823      	ldr	r3, [r4, #0]
    e4f0:	4413      	add	r3, r2
        item >>= 8;
    e4f2:	0a2a      	lsrs	r2, r5, #8
        ((unsigned char*)arr->data)[arr->size + 2] = item & 0xFF;
    e4f4:	709a      	strb	r2, [r3, #2]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size + 1] = item & 0xFF;
    e4f6:	88e2      	ldrh	r2, [r4, #6]
    e4f8:	6823      	ldr	r3, [r4, #0]
    e4fa:	4413      	add	r3, r2
        item >>= 8;
    e4fc:	0c2a      	lsrs	r2, r5, #16
        ((unsigned char*)arr->data)[arr->size + 1] = item & 0xFF;
    e4fe:	705a      	strb	r2, [r3, #1]
        item >>= 8;
        ((unsigned char*)arr->data)[arr->size] = item & 0xFF;
    e500:	88e3      	ldrh	r3, [r4, #6]
    e502:	6822      	ldr	r2, [r4, #0]
        item >>= 8;
    e504:	0e2d      	lsrs	r5, r5, #24
        ((unsigned char*)arr->data)[arr->size] = item & 0xFF;
    e506:	54d5      	strb	r5, [r2, r3]
        arr->size += 8;
    e508:	88e3      	ldrh	r3, [r4, #6]
    e50a:	3308      	adds	r3, #8
    e50c:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    e50e:	bd70      	pop	{r4, r5, r6, pc}

0000e510 <bb_setFloat>:

#ifndef DLMS_IGNORE_FLOAT32
int bb_setFloat(
    gxByteBuffer* arr,
    float value)
{
    e510:	b538      	push	{r3, r4, r5, lr}
        char b[sizeof(float)];
    } HELPER;

    HELPER tmp;
    tmp.value = value;
    int ret = bb_allocate(arr, arr->size, 4);
    e512:	2204      	movs	r2, #4
{
    e514:	460d      	mov	r5, r1
    int ret = bb_allocate(arr, arr->size, 4);
    e516:	88c1      	ldrh	r1, [r0, #6]
{
    e518:	4604      	mov	r4, r0
    int ret = bb_allocate(arr, arr->size, 4);
    e51a:	f7ff ff3e 	bl	e39a <bb_allocate>
    if (ret == 0)
    e51e:	b9c0      	cbnz	r0, e552 <bb_setFloat+0x42>
    {
        arr->data[arr->size] = tmp.b[3];
    e520:	88e3      	ldrh	r3, [r4, #6]
    e522:	6822      	ldr	r2, [r4, #0]
    e524:	4629      	mov	r1, r5
    e526:	f3c5 6507 	ubfx	r5, r5, #24, #8
    e52a:	54d5      	strb	r5, [r2, r3]
        arr->data[arr->size + 1] = tmp.b[2];
    e52c:	88e2      	ldrh	r2, [r4, #6]
    e52e:	6823      	ldr	r3, [r4, #0]
    e530:	4413      	add	r3, r2
    e532:	f3c1 4207 	ubfx	r2, r1, #16, #8
    e536:	705a      	strb	r2, [r3, #1]
        arr->data[arr->size + 2] = tmp.b[1];
    e538:	88e2      	ldrh	r2, [r4, #6]
    e53a:	6823      	ldr	r3, [r4, #0]
    e53c:	4413      	add	r3, r2
    e53e:	f3c1 2207 	ubfx	r2, r1, #8, #8
    e542:	709a      	strb	r2, [r3, #2]
        arr->data[arr->size + 3] = tmp.b[0];
    e544:	88e2      	ldrh	r2, [r4, #6]
    e546:	6823      	ldr	r3, [r4, #0]
    e548:	4413      	add	r3, r2
    e54a:	70d9      	strb	r1, [r3, #3]
        arr->size += 4;
    e54c:	88e3      	ldrh	r3, [r4, #6]
    e54e:	3304      	adds	r3, #4
    e550:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    e552:	bd38      	pop	{r3, r4, r5, pc}

0000e554 <bb_setDouble>:

#ifndef DLMS_IGNORE_FLOAT64
int bb_setDouble(
    gxByteBuffer* arr,
    double value)
{
    e554:	b570      	push	{r4, r5, r6, lr}
        char b[sizeof(double)];
    } HELPER;

    HELPER tmp;
    tmp.value = value;
    int ret = bb_allocate(arr, arr->size, 8);
    e556:	88c1      	ldrh	r1, [r0, #6]
{
    e558:	4615      	mov	r5, r2
    int ret = bb_allocate(arr, arr->size, 8);
    e55a:	2208      	movs	r2, #8
{
    e55c:	4604      	mov	r4, r0
    e55e:	461e      	mov	r6, r3
    int ret = bb_allocate(arr, arr->size, 8);
    e560:	f7ff ff1b 	bl	e39a <bb_allocate>
    if (ret == 0)
    e564:	2800      	cmp	r0, #0
    e566:	d12e      	bne.n	e5c6 <bb_setDouble+0x72>
    {
        arr->data[arr->size] = tmp.b[7];
    e568:	88e2      	ldrh	r2, [r4, #6]
    e56a:	6821      	ldr	r1, [r4, #0]
    e56c:	4633      	mov	r3, r6
    e56e:	f3c6 6607 	ubfx	r6, r6, #24, #8
    e572:	548e      	strb	r6, [r1, r2]
        arr->data[arr->size + 1] = tmp.b[6];
    e574:	88e1      	ldrh	r1, [r4, #6]
    e576:	6822      	ldr	r2, [r4, #0]
    e578:	440a      	add	r2, r1
    e57a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    e57e:	7051      	strb	r1, [r2, #1]
        arr->data[arr->size + 2] = tmp.b[5];
    e580:	88e1      	ldrh	r1, [r4, #6]
    e582:	6822      	ldr	r2, [r4, #0]
    e584:	440a      	add	r2, r1
    e586:	f3c3 2107 	ubfx	r1, r3, #8, #8
    e58a:	7091      	strb	r1, [r2, #2]
        arr->data[arr->size + 3] = tmp.b[4];
    e58c:	88e1      	ldrh	r1, [r4, #6]
    e58e:	6822      	ldr	r2, [r4, #0]
    e590:	440a      	add	r2, r1
        arr->data[arr->size + 4] = tmp.b[3];
    e592:	f3c5 6107 	ubfx	r1, r5, #24, #8
        arr->data[arr->size + 3] = tmp.b[4];
    e596:	70d3      	strb	r3, [r2, #3]
        arr->data[arr->size + 4] = tmp.b[3];
    e598:	88e2      	ldrh	r2, [r4, #6]
    e59a:	6823      	ldr	r3, [r4, #0]
    e59c:	441a      	add	r2, r3
    e59e:	7111      	strb	r1, [r2, #4]
        arr->data[arr->size + 5] = tmp.b[2];
    e5a0:	88e1      	ldrh	r1, [r4, #6]
    e5a2:	6822      	ldr	r2, [r4, #0]
    e5a4:	440a      	add	r2, r1
    e5a6:	f3c5 4107 	ubfx	r1, r5, #16, #8
    e5aa:	7151      	strb	r1, [r2, #5]
        arr->data[arr->size + 6] = tmp.b[1];
    e5ac:	88e1      	ldrh	r1, [r4, #6]
    e5ae:	6822      	ldr	r2, [r4, #0]
    e5b0:	440a      	add	r2, r1
    e5b2:	f3c5 2107 	ubfx	r1, r5, #8, #8
    e5b6:	7191      	strb	r1, [r2, #6]
        arr->data[arr->size + 7] = tmp.b[0];
    e5b8:	88e1      	ldrh	r1, [r4, #6]
    e5ba:	6822      	ldr	r2, [r4, #0]
    e5bc:	440a      	add	r2, r1
    e5be:	71d5      	strb	r5, [r2, #7]
        arr->size += 8;
    e5c0:	88e3      	ldrh	r3, [r4, #6]
    e5c2:	3308      	adds	r3, #8
    e5c4:	80e3      	strh	r3, [r4, #6]
    }
    return ret;
}
    e5c6:	bd70      	pop	{r4, r5, r6, pc}

0000e5c8 <bb_setInt8>:

int bb_setInt8(
    gxByteBuffer* arr,
    char item)
{
    return bb_setUInt8(arr, (unsigned char)item);
    e5c8:	f7ff bf21 	b.w	e40e <bb_setUInt8>

0000e5cc <bb_setInt16>:

int bb_setInt16(
    gxByteBuffer* arr,
    short item)
{
    return bb_setUInt16(arr, (uint16_t)item);
    e5cc:	b289      	uxth	r1, r1
    e5ce:	f7ff bf40 	b.w	e452 <bb_setUInt16>

0000e5d2 <bb_setInt32>:

int bb_setInt32(
    gxByteBuffer* arr,
    int32_t item)
{
    return bb_setUInt32(arr, (uint32_t)item);
    e5d2:	f7ff bf60 	b.w	e496 <bb_setUInt32>

0000e5d6 <bb_setInt64>:

int bb_setInt64(
    gxByteBuffer* arr,
    int64_t item)
{
    return bb_setUInt64(arr, (uint64_t)item);
    e5d6:	f7ff bf69 	b.w	e4ac <bb_setUInt64>

0000e5da <bb_set>:
int bb_set(
    gxByteBuffer* arr,
    const unsigned char* pSource,
    uint16_t count)
#endif
{
    e5da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5dc:	460f      	mov	r7, r1
    int ret = bb_allocate(arr, arr->size, count);
    e5de:	88c1      	ldrh	r1, [r0, #6]
{
    e5e0:	4604      	mov	r4, r0
    e5e2:	4615      	mov	r5, r2
    int ret = bb_allocate(arr, arr->size, count);
    e5e4:	f7ff fed9 	bl	e39a <bb_allocate>
    if (ret == 0)
    e5e8:	4606      	mov	r6, r0
    e5ea:	b948      	cbnz	r0, e600 <bb_set+0x26>
    {
        memcpy(arr->data + arr->size, pSource, count);
    e5ec:	88e3      	ldrh	r3, [r4, #6]
    e5ee:	6820      	ldr	r0, [r4, #0]
    e5f0:	462a      	mov	r2, r5
    e5f2:	4639      	mov	r1, r7
    e5f4:	4418      	add	r0, r3
    e5f6:	f00f fe04 	bl	1e202 <memcpy>
        arr->size += count;
    e5fa:	88e2      	ldrh	r2, [r4, #6]
    e5fc:	4415      	add	r5, r2
    e5fe:	80e5      	strh	r5, [r4, #6]
    }
    return ret;
}
    e600:	4630      	mov	r0, r6
    e602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e604 <bb_addString.part.0>:
        return ret;
}
    return 0;
}

int bb_addString(
    e604:	b538      	push	{r3, r4, r5, lr}
    e606:	4604      	mov	r4, r0
    gxByteBuffer* arr,
    const char* value)
{
    if (value != NULL)
    {
        int len = (int)strlen(value);
    e608:	4608      	mov	r0, r1
int bb_addString(
    e60a:	460d      	mov	r5, r1
        int len = (int)strlen(value);
    e60c:	f7f2 fbd8 	bl	dc0 <strlen>
        if (len > 0)
    e610:	2800      	cmp	r0, #0
    e612:	dd0f      	ble.n	e634 <bb_addString.part.0+0x30>
        {
            int ret = bb_set(arr, (const unsigned char*)value, (uint16_t)(len + 1));
    e614:	1c42      	adds	r2, r0, #1
    e616:	b292      	uxth	r2, r2
    e618:	4629      	mov	r1, r5
    e61a:	4620      	mov	r0, r4
    e61c:	f7ff ffdd 	bl	e5da <bb_set>
            if (ret == 0)
    e620:	b938      	cbnz	r0, e632 <bb_addString.part.0+0x2e>
            {
                //Add end of string, but that is not added to the length.
                arr->data[arr->size - 1] = '\0';
    e622:	88e2      	ldrh	r2, [r4, #6]
    e624:	6823      	ldr	r3, [r4, #0]
    e626:	4413      	add	r3, r2
    e628:	f803 0c01 	strb.w	r0, [r3, #-1]
                --arr->size;
    e62c:	88e3      	ldrh	r3, [r4, #6]
    e62e:	3b01      	subs	r3, #1
    e630:	80e3      	strh	r3, [r4, #6]
            }
            return ret;
        }
    }
    return 0;
}
    e632:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    e634:	2000      	movs	r0, #0
    e636:	e7fc      	b.n	e632 <bb_addString.part.0+0x2e>

0000e638 <bb_set2>:
{
    e638:	b570      	push	{r4, r5, r6, lr}
    e63a:	4616      	mov	r6, r2
    e63c:	461c      	mov	r4, r3
    if (data != NULL && count != 0)
    e63e:	460d      	mov	r5, r1
    e640:	b191      	cbz	r1, e668 <bb_set2+0x30>
    e642:	b19b      	cbz	r3, e66c <bb_set2+0x34>
        if (count == (uint16_t)-1)
    e644:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e648:	429c      	cmp	r4, r3
            count = data->size - index;
    e64a:	bf08      	it	eq
    e64c:	88cc      	ldrheq	r4, [r1, #6]
        int ret = bb_set(arr, data->data + index, count);
    e64e:	6809      	ldr	r1, [r1, #0]
            count = data->size - index;
    e650:	bf04      	itt	eq
    e652:	1aa4      	subeq	r4, r4, r2
    e654:	b2a4      	uxtheq	r4, r4
        int ret = bb_set(arr, data->data + index, count);
    e656:	4622      	mov	r2, r4
    e658:	4431      	add	r1, r6
    e65a:	f7ff ffbe 	bl	e5da <bb_set>
        if (ret == 0)
    e65e:	b910      	cbnz	r0, e666 <bb_set2+0x2e>
            data->position += count;
    e660:	892a      	ldrh	r2, [r5, #8]
    e662:	4414      	add	r4, r2
    e664:	812c      	strh	r4, [r5, #8]
}
    e666:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    e668:	4608      	mov	r0, r1
    e66a:	e7fc      	b.n	e666 <bb_set2+0x2e>
    e66c:	4618      	mov	r0, r3
    e66e:	e7fa      	b.n	e666 <bb_set2+0x2e>

0000e670 <bb_addString>:
    if (value != NULL)
    e670:	b109      	cbz	r1, e676 <bb_addString+0x6>
    e672:	f7ff bfc7 	b.w	e604 <bb_addString.part.0>
}
    e676:	4608      	mov	r0, r1
    e678:	4770      	bx	lr

0000e67a <bb_attach>:
    uint16_t count,
    uint16_t capacity)
#endif
{
    //If capacity is 1 value is cast t
    if (value == NULL || capacity < count)
    e67a:	b911      	cbnz	r1, e682 <bb_attach+0x8>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e67c:	f44f 7082 	mov.w	r0, #260	; 0x104
    e680:	4770      	bx	lr
    if (value == NULL || capacity < count)
    e682:	4293      	cmp	r3, r2
    e684:	d3fa      	bcc.n	e67c <bb_attach+0x2>
    }
    arr->data = value;
    e686:	6001      	str	r1, [r0, #0]
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->capacity = (0x80000000 | capacity);
#else
    if (capacity >= 0x8000)
    e688:	0419      	lsls	r1, r3, #16
    e68a:	d4f7      	bmi.n	e67c <bb_attach+0x2>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->capacity = (uint16_t)(0x8000 | capacity);
    e68c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    e690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    e694:	8083      	strh	r3, [r0, #4]
#endif
    arr->size = count;
    arr->position = 0;
    e696:	2300      	movs	r3, #0
    arr->size = count;
    e698:	80c2      	strh	r2, [r0, #6]
    arr->position = 0;
    e69a:	8103      	strh	r3, [r0, #8]
    return 0;
    e69c:	4618      	mov	r0, r3
}
    e69e:	4770      	bx	lr

0000e6a0 <bb_attachString>:

#ifndef DLMS_IGNORE_MALLOC
int bb_attachString(
    gxByteBuffer* arr,
    char* value)
{
    e6a0:	b538      	push	{r3, r4, r5, lr}
    e6a2:	4605      	mov	r5, r0
    int len = (int)strlen(value);
    e6a4:	4608      	mov	r0, r1
{
    e6a6:	460c      	mov	r4, r1
    int len = (int)strlen(value);
    e6a8:	f7f2 fb8a 	bl	dc0 <strlen>
    int ret = bb_set(arr, (const unsigned char*)value, (uint16_t)len);
    e6ac:	4621      	mov	r1, r4
    e6ae:	b282      	uxth	r2, r0
    e6b0:	4628      	mov	r0, r5
    e6b2:	f7ff ff92 	bl	e5da <bb_set>
    e6b6:	4605      	mov	r5, r0
    gxfree(value);
    e6b8:	4620      	mov	r0, r4
    e6ba:	f7fe fe23 	bl	d304 <free>
    return ret;
}
    e6be:	4628      	mov	r0, r5
    e6c0:	bd38      	pop	{r3, r4, r5, pc}

0000e6c2 <bb_clear>:
#endif //DLMS_IGNORE_MALLOC

int bb_clear(
    gxByteBuffer* arr)
{
    e6c2:	b538      	push	{r3, r4, r5, lr}
    e6c4:	4604      	mov	r4, r0
#ifndef DLMS_IGNORE_MALLOC
    //If byte buffer is attached.
    if (!bb_isAttached(arr))
    e6c6:	f7ff fe28 	bl	e31a <bb_isAttached>
    e6ca:	4605      	mov	r5, r0
    e6cc:	b930      	cbnz	r0, e6dc <bb_clear+0x1a>
    {
        if (arr->data != NULL)
    e6ce:	6820      	ldr	r0, [r4, #0]
    e6d0:	b110      	cbz	r0, e6d8 <bb_clear+0x16>
        {
            gxfree(arr->data);
    e6d2:	f7fe fe17 	bl	d304 <free>
            arr->data = NULL;
    e6d6:	6025      	str	r5, [r4, #0]
        }
        arr->capacity = 0;
    e6d8:	2300      	movs	r3, #0
    e6da:	80a3      	strh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
    e6dc:	2000      	movs	r0, #0
    e6de:	80e0      	strh	r0, [r4, #6]
    arr->position = 0;
    e6e0:	8120      	strh	r0, [r4, #8]
    return 0;
    }
    e6e2:	bd38      	pop	{r3, r4, r5, pc}

0000e6e4 <bb_empty>:

int bb_empty(
    gxByteBuffer* arr)
{
    e6e4:	4603      	mov	r3, r0
    arr->size = 0;
    e6e6:	2000      	movs	r0, #0
    e6e8:	80d8      	strh	r0, [r3, #6]
    arr->position = 0;
    e6ea:	8118      	strh	r0, [r3, #8]
    return 0;
}
    e6ec:	4770      	bx	lr

0000e6ee <bb_getUInt8>:

int bb_getUInt8(
    gxByteBuffer* arr,
    unsigned char* value)
{
    if (arr->position >= arr->size)
    e6ee:	8903      	ldrh	r3, [r0, #8]
    e6f0:	88c2      	ldrh	r2, [r0, #6]
    e6f2:	429a      	cmp	r2, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[arr->position];
    e6f4:	bf81      	itttt	hi
    e6f6:	6802      	ldrhi	r2, [r0, #0]
    e6f8:	5cd3      	ldrbhi	r3, [r2, r3]
    e6fa:	700b      	strbhi	r3, [r1, #0]
    ++arr->position;
    e6fc:	8903      	ldrhhi	r3, [r0, #8]
    e6fe:	bf83      	ittte	hi
    e700:	3301      	addhi	r3, #1
    e702:	8103      	strhhi	r3, [r0, #8]
    return 0;
    e704:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e706:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    e70a:	4770      	bx	lr

0000e70c <bb_getInt8>:

int bb_getInt8(
    gxByteBuffer* arr,
    signed char* value)
{
    if (arr->position >= arr->size)
    e70c:	8903      	ldrh	r3, [r0, #8]
    e70e:	88c2      	ldrh	r2, [r0, #6]
    e710:	429a      	cmp	r2, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (signed char)((unsigned char*)arr->data)[arr->position];
    e712:	bf81      	itttt	hi
    e714:	6802      	ldrhi	r2, [r0, #0]
    e716:	5cd3      	ldrbhi	r3, [r2, r3]
    e718:	700b      	strbhi	r3, [r1, #0]
    ++arr->position;
    e71a:	8903      	ldrhhi	r3, [r0, #8]
    e71c:	bf83      	ittte	hi
    e71e:	3301      	addhi	r3, #1
    e720:	8103      	strhhi	r3, [r0, #8]
    return 0;
    e722:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e724:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    e728:	4770      	bx	lr

0000e72a <bb_getUInt8ByIndex>:
int bb_getUInt8ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    unsigned char* value)
{
    if (index >= arr->size)
    e72a:	88c3      	ldrh	r3, [r0, #6]
    e72c:	428b      	cmp	r3, r1
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((unsigned char*)arr->data)[index];
    e72e:	bf81      	itttt	hi
    e730:	6803      	ldrhi	r3, [r0, #0]
    e732:	5c5b      	ldrbhi	r3, [r3, r1]
    e734:	7013      	strbhi	r3, [r2, #0]
    return 0;
    e736:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e738:	bf98      	it	ls
    e73a:	f44f 7082 	movls.w	r0, #260	; 0x104
}
    e73e:	4770      	bx	lr

0000e740 <bb_getUInt16>:

int bb_getUInt16(
    gxByteBuffer* arr,
    uint16_t* value)
{
    if (arr->position + 2 > arr->size)
    e740:	8902      	ldrh	r2, [r0, #8]
    e742:	88c3      	ldrh	r3, [r0, #6]
{
    e744:	b510      	push	{r4, lr}
    if (arr->position + 2 > arr->size)
    e746:	1c94      	adds	r4, r2, #2
    e748:	429c      	cmp	r4, r3
    e74a:	dc0b      	bgt.n	e764 <bb_getUInt16+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (uint16_t)(((unsigned char*)arr->data)[arr->position] << 8 |
    e74c:	6803      	ldr	r3, [r0, #0]
    e74e:	5c9c      	ldrb	r4, [r3, r2]
        ((unsigned char*)arr->data)[arr->position + 1]);
    e750:	4413      	add	r3, r2
    e752:	785b      	ldrb	r3, [r3, #1]
    *value = (uint16_t)(((unsigned char*)arr->data)[arr->position] << 8 |
    e754:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    e758:	800b      	strh	r3, [r1, #0]
    arr->position += 2;
    e75a:	8903      	ldrh	r3, [r0, #8]
    e75c:	3302      	adds	r3, #2
    e75e:	8103      	strh	r3, [r0, #8]
    return 0;
    e760:	2000      	movs	r0, #0
}
    e762:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e764:	f44f 7082 	mov.w	r0, #260	; 0x104
    e768:	e7fb      	b.n	e762 <bb_getUInt16+0x22>

0000e76a <bb_getUInt32>:

int bb_getUInt32(
    gxByteBuffer* arr,
    uint32_t* value)
{
    e76a:	b570      	push	{r4, r5, r6, lr}

    if (arr->position + 4 > arr->size)
    e76c:	8904      	ldrh	r4, [r0, #8]
    e76e:	88c3      	ldrh	r3, [r0, #6]
    e770:	1d25      	adds	r5, r4, #4
    e772:	429d      	cmp	r5, r3
    e774:	dc0f      	bgt.n	e796 <bb_getUInt32+0x2c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + arr->position);
    e776:	6802      	ldr	r2, [r0, #0]
    e778:	5d16      	ldrb	r6, [r2, r4]
    e77a:	4422      	add	r2, r4
    e77c:	78d3      	ldrb	r3, [r2, #3]
    e77e:	7854      	ldrb	r4, [r2, #1]
    e780:	7892      	ldrb	r2, [r2, #2]
    e782:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    e786:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    e78a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e78e:	600b      	str	r3, [r1, #0]
    arr->position += 4;
    e790:	8105      	strh	r5, [r0, #8]
    return 0;
    e792:	2000      	movs	r0, #0
}
    e794:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e796:	f44f 7082 	mov.w	r0, #260	; 0x104
    e79a:	e7fb      	b.n	e794 <bb_getUInt32+0x2a>

0000e79c <bb_getInt16>:
int bb_getInt16(
    gxByteBuffer* arr,
    short* value)
{

    if (arr->position + 2 > arr->size)
    e79c:	8902      	ldrh	r2, [r0, #8]
    e79e:	88c3      	ldrh	r3, [r0, #6]
{
    e7a0:	b510      	push	{r4, lr}
    if (arr->position + 2 > arr->size)
    e7a2:	1c94      	adds	r4, r2, #2
    e7a4:	429c      	cmp	r4, r3
    e7a6:	dc0b      	bgt.n	e7c0 <bb_getInt16+0x24>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (short)(((unsigned char*)arr->data)[arr->position] << 8 |
    e7a8:	6803      	ldr	r3, [r0, #0]
    e7aa:	5c9c      	ldrb	r4, [r3, r2]
        ((unsigned char*)arr->data)[arr->position + 1]);
    e7ac:	4413      	add	r3, r2
    e7ae:	785b      	ldrb	r3, [r3, #1]
    *value = (short)(((unsigned char*)arr->data)[arr->position] << 8 |
    e7b0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    e7b4:	800b      	strh	r3, [r1, #0]
    arr->position += 2;
    e7b6:	8903      	ldrh	r3, [r0, #8]
    e7b8:	3302      	adds	r3, #2
    e7ba:	8103      	strh	r3, [r0, #8]
    return 0;
    e7bc:	2000      	movs	r0, #0
}
    e7be:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e7c0:	f44f 7082 	mov.w	r0, #260	; 0x104
    e7c4:	e7fb      	b.n	e7be <bb_getInt16+0x22>

0000e7c6 <bb_getUInt24ByIndex>:

int bb_getUInt24ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint32_t* value)
{
    e7c6:	b510      	push	{r4, lr}
    if (index + 3 > bb_size(arr))
    e7c8:	1ccc      	adds	r4, r1, #3
    return arr != NULL ? arr->size : 0;
    e7ca:	b170      	cbz	r0, e7ea <bb_getUInt24ByIndex+0x24>
    e7cc:	88c3      	ldrh	r3, [r0, #6]
    if (index + 3 > bb_size(arr))
    e7ce:	429c      	cmp	r4, r3
    e7d0:	d80d      	bhi.n	e7ee <bb_getUInt24ByIndex+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = ((uint32_t)(arr->data)[index] << 16) |
    e7d2:	6800      	ldr	r0, [r0, #0]
    e7d4:	5c44      	ldrb	r4, [r0, r1]
        ((uint32_t)(arr->data)[index + 1] << 8) |
        ((uint32_t)(arr->data)[index + 2]);
    e7d6:	4401      	add	r1, r0
    return 0;
    e7d8:	2000      	movs	r0, #0
        ((uint32_t)(arr->data)[index + 2]);
    e7da:	788b      	ldrb	r3, [r1, #2]
        ((uint32_t)(arr->data)[index + 1] << 8) |
    e7dc:	7849      	ldrb	r1, [r1, #1]
    e7de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    e7e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *value = ((uint32_t)(arr->data)[index] << 16) |
    e7e6:	6013      	str	r3, [r2, #0]
}
    e7e8:	bd10      	pop	{r4, pc}
    return arr != NULL ? arr->size : 0;
    e7ea:	4603      	mov	r3, r0
    e7ec:	e7ef      	b.n	e7ce <bb_getUInt24ByIndex+0x8>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e7ee:	f44f 7082 	mov.w	r0, #260	; 0x104
    e7f2:	e7f9      	b.n	e7e8 <bb_getUInt24ByIndex+0x22>

0000e7f4 <bb_getUInt24>:
{
    e7f4:	b510      	push	{r4, lr}
    e7f6:	4604      	mov	r4, r0
    e7f8:	460a      	mov	r2, r1
    int ret = bb_getUInt24ByIndex(arr, arr->position, value);
    e7fa:	8901      	ldrh	r1, [r0, #8]
    e7fc:	f7ff ffe3 	bl	e7c6 <bb_getUInt24ByIndex>
    arr->position += 3;
    e800:	8923      	ldrh	r3, [r4, #8]
    e802:	3303      	adds	r3, #3
    e804:	8123      	strh	r3, [r4, #8]
}
    e806:	bd10      	pop	{r4, pc}

0000e808 <bb_getUInt32ByIndex>:
    gxByteBuffer* arr,
    uint32_t index,
    uint32_t* value)
{

    if (index + 4 > arr->size)
    e808:	88c3      	ldrh	r3, [r0, #6]
{
    e80a:	b510      	push	{r4, lr}
    if (index + 4 > arr->size)
    e80c:	1d0c      	adds	r4, r1, #4
    e80e:	429c      	cmp	r4, r3
    e810:	d80e      	bhi.n	e830 <bb_getUInt32ByIndex+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + index);
    e812:	6800      	ldr	r0, [r0, #0]
    e814:	5c44      	ldrb	r4, [r0, r1]
    e816:	4401      	add	r1, r0
    e818:	78cb      	ldrb	r3, [r1, #3]
    e81a:	7848      	ldrb	r0, [r1, #1]
    e81c:	7889      	ldrb	r1, [r1, #2]
    e81e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e822:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    e826:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    e82a:	6013      	str	r3, [r2, #0]
    return 0;
    e82c:	2000      	movs	r0, #0
}
    e82e:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e830:	f44f 7082 	mov.w	r0, #260	; 0x104
    e834:	e7fb      	b.n	e82e <bb_getUInt32ByIndex+0x26>

0000e836 <bb_getInt32>:
{
    e836:	b510      	push	{r4, lr}
    e838:	4604      	mov	r4, r0
    e83a:	460a      	mov	r2, r1
    int ret = bb_getUInt32ByIndex(arr, arr->position, (uint32_t*)value);
    e83c:	8901      	ldrh	r1, [r0, #8]
    e83e:	f7ff ffe3 	bl	e808 <bb_getUInt32ByIndex>
    arr->position += 4;
    e842:	8923      	ldrh	r3, [r4, #8]
    e844:	3304      	adds	r3, #4
    e846:	8123      	strh	r3, [r4, #8]
}
    e848:	bd10      	pop	{r4, pc}

0000e84a <bb_getUInt64ByIndex>:
int bb_getUInt64ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint64_t* value)
{
    if (index + 8 > arr->size)
    e84a:	88c3      	ldrh	r3, [r0, #6]
{
    e84c:	b510      	push	{r4, lr}
    if (index + 8 > arr->size)
    e84e:	f101 0408 	add.w	r4, r1, #8
    e852:	429c      	cmp	r4, r3
    e854:	d81a      	bhi.n	e88c <bb_getUInt64ByIndex+0x42>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = GETU32(arr->data + index);
    e856:	6800      	ldr	r0, [r0, #0]
    e858:	5c44      	ldrb	r4, [r0, r1]
    e85a:	4401      	add	r1, r0
    e85c:	78cb      	ldrb	r3, [r1, #3]
    e85e:	7848      	ldrb	r0, [r1, #1]
    e860:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e864:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    e868:	7888      	ldrb	r0, [r1, #2]
    e86a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    //Some 32 bit microcontrollers can't handle *value <<= 32;
    //For this reason value is sifted on two parts.
    *value <<= 16;
    *value <<= 16;
    e86e:	2000      	movs	r0, #0
    e870:	e9c2 0300 	strd	r0, r3, [r2]
    *value |= GETU32(arr->data + index + 4);
    e874:	794b      	ldrb	r3, [r1, #5]
    e876:	790c      	ldrb	r4, [r1, #4]
    e878:	041b      	lsls	r3, r3, #16
    e87a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    e87e:	79cc      	ldrb	r4, [r1, #7]
    e880:	7989      	ldrb	r1, [r1, #6]
    e882:	4323      	orrs	r3, r4
    e884:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    e888:	6013      	str	r3, [r2, #0]
    return 0;
}
    e88a:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e88c:	f44f 7082 	mov.w	r0, #260	; 0x104
    e890:	e7fb      	b.n	e88a <bb_getUInt64ByIndex+0x40>

0000e892 <bb_getInt64>:
{
    e892:	b510      	push	{r4, lr}
    e894:	460a      	mov	r2, r1
    int ret = bb_getUInt64ByIndex(arr, arr->position, (uint64_t*)value);
    e896:	8901      	ldrh	r1, [r0, #8]
{
    e898:	4604      	mov	r4, r0
    int ret = bb_getUInt64ByIndex(arr, arr->position, (uint64_t*)value);
    e89a:	f7ff ffd6 	bl	e84a <bb_getUInt64ByIndex>
    if (ret == 0)
    e89e:	b910      	cbnz	r0, e8a6 <bb_getInt64+0x14>
        arr->position += 8;
    e8a0:	8923      	ldrh	r3, [r4, #8]
    e8a2:	3308      	adds	r3, #8
    e8a4:	8123      	strh	r3, [r4, #8]
}
    e8a6:	bd10      	pop	{r4, pc}

0000e8a8 <bb_getUInt64>:
{
    e8a8:	b510      	push	{r4, lr}
    e8aa:	460a      	mov	r2, r1
    int ret = bb_getUInt64ByIndex(arr, arr->position, value);
    e8ac:	8901      	ldrh	r1, [r0, #8]
{
    e8ae:	4604      	mov	r4, r0
    int ret = bb_getUInt64ByIndex(arr, arr->position, value);
    e8b0:	f7ff ffcb 	bl	e84a <bb_getUInt64ByIndex>
    if (ret == 0)
    e8b4:	b910      	cbnz	r0, e8bc <bb_getUInt64+0x14>
        arr->position += 8;
    e8b6:	8923      	ldrh	r3, [r4, #8]
    e8b8:	3308      	adds	r3, #8
    e8ba:	8123      	strh	r3, [r4, #8]
}
    e8bc:	bd10      	pop	{r4, pc}

0000e8be <bb_getFloat>:

#ifndef DLMS_IGNORE_FLOAT32
int bb_getFloat(
    gxByteBuffer* arr,
    float* value)
{
    e8be:	b570      	push	{r4, r5, r6, lr}
    {
        float value;
        char b[sizeof(float)];
    } HELPER;
    HELPER tmp;
    if (arr->position + 4 > arr->size)
    e8c0:	8904      	ldrh	r4, [r0, #8]
    e8c2:	88c3      	ldrh	r3, [r0, #6]
    e8c4:	1d25      	adds	r5, r4, #4
    e8c6:	429d      	cmp	r5, r3
    e8c8:	dc12      	bgt.n	e8f0 <bb_getFloat+0x32>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    tmp.b[3] = arr->data[arr->position];
    e8ca:	6802      	ldr	r2, [r0, #0]
    e8cc:	5d16      	ldrb	r6, [r2, r4]
    tmp.b[2] = arr->data[arr->position + 1];
    e8ce:	4422      	add	r2, r4
    tmp.b[3] = arr->data[arr->position];
    e8d0:	2300      	movs	r3, #0
    tmp.b[2] = arr->data[arr->position + 1];
    e8d2:	7854      	ldrb	r4, [r2, #1]
    tmp.b[3] = arr->data[arr->position];
    e8d4:	f366 631f 	bfi	r3, r6, #24, #8
    tmp.b[2] = arr->data[arr->position + 1];
    e8d8:	f364 4317 	bfi	r3, r4, #16, #8
    tmp.b[1] = arr->data[arr->position + 2];
    e8dc:	7894      	ldrb	r4, [r2, #2]
    tmp.b[0] = arr->data[arr->position + 3];
    e8de:	78d2      	ldrb	r2, [r2, #3]
    tmp.b[1] = arr->data[arr->position + 2];
    e8e0:	f364 230f 	bfi	r3, r4, #8, #8
    tmp.b[0] = arr->data[arr->position + 3];
    e8e4:	f362 0307 	bfi	r3, r2, #0, #8
    *value = tmp.value;
    e8e8:	600b      	str	r3, [r1, #0]
    arr->position += 4;
    e8ea:	8105      	strh	r5, [r0, #8]
    return 0;
    e8ec:	2000      	movs	r0, #0
}
    e8ee:	bd70      	pop	{r4, r5, r6, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e8f0:	f44f 7082 	mov.w	r0, #260	; 0x104
    e8f4:	e7fb      	b.n	e8ee <bb_getFloat+0x30>

0000e8f6 <bb_getDouble>:

#ifndef DLMS_IGNORE_FLOAT64
int bb_getDouble(
    gxByteBuffer* arr,
    double* value)
{
    e8f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        double value;
        char b[sizeof(double)];
    } HELPER;
    HELPER tmp;
    if (arr->position + 8 > arr->size)
    e8f8:	8905      	ldrh	r5, [r0, #8]
    e8fa:	88c3      	ldrh	r3, [r0, #6]
    e8fc:	f105 0608 	add.w	r6, r5, #8
    e900:	429e      	cmp	r6, r3
    e902:	dc20      	bgt.n	e946 <bb_getDouble+0x50>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    tmp.b[7] = arr->data[arr->position];
    e904:	6804      	ldr	r4, [r0, #0]
    e906:	5d67      	ldrb	r7, [r4, r5]
    tmp.b[6] = arr->data[arr->position + 1];
    e908:	442c      	add	r4, r5
    tmp.b[7] = arr->data[arr->position];
    e90a:	2300      	movs	r3, #0
    tmp.b[6] = arr->data[arr->position + 1];
    e90c:	7865      	ldrb	r5, [r4, #1]
    tmp.b[7] = arr->data[arr->position];
    e90e:	f367 631f 	bfi	r3, r7, #24, #8
    tmp.b[6] = arr->data[arr->position + 1];
    e912:	f365 4317 	bfi	r3, r5, #16, #8
    tmp.b[5] = arr->data[arr->position + 2];
    e916:	78a5      	ldrb	r5, [r4, #2]
    e918:	f365 230f 	bfi	r3, r5, #8, #8
    tmp.b[4] = arr->data[arr->position + 3];
    e91c:	78e5      	ldrb	r5, [r4, #3]
    e91e:	f365 0307 	bfi	r3, r5, #0, #8
    tmp.b[3] = arr->data[arr->position + 4];
    e922:	7925      	ldrb	r5, [r4, #4]
    tmp.b[7] = arr->data[arr->position];
    e924:	2200      	movs	r2, #0
    tmp.b[3] = arr->data[arr->position + 4];
    e926:	f365 621f 	bfi	r2, r5, #24, #8
    tmp.b[2] = arr->data[arr->position + 5];
    e92a:	7965      	ldrb	r5, [r4, #5]
    e92c:	f365 4217 	bfi	r2, r5, #16, #8
    tmp.b[1] = arr->data[arr->position + 6];
    e930:	79a5      	ldrb	r5, [r4, #6]
    tmp.b[0] = arr->data[arr->position + 7];
    e932:	79e4      	ldrb	r4, [r4, #7]
    tmp.b[1] = arr->data[arr->position + 6];
    e934:	f365 220f 	bfi	r2, r5, #8, #8
    tmp.b[0] = arr->data[arr->position + 7];
    e938:	f364 0207 	bfi	r2, r4, #0, #8
    *value = tmp.value;
    e93c:	e9c1 2300 	strd	r2, r3, [r1]
    arr->position += 8;
    e940:	8106      	strh	r6, [r0, #8]
    return 0;
    e942:	2000      	movs	r0, #0
}
    e944:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e946:	f44f 7082 	mov.w	r0, #260	; 0x104
    e94a:	e7fb      	b.n	e944 <bb_getDouble+0x4e>

0000e94c <bb_getUInt16ByIndex>:
int bb_getUInt16ByIndex(
    gxByteBuffer* arr,
    uint32_t index,
    uint16_t* value)
{
    if (index + 2 > arr->size)
    e94c:	88c3      	ldrh	r3, [r0, #6]
{
    e94e:	b510      	push	{r4, lr}
    if (index + 2 > arr->size)
    e950:	1c8c      	adds	r4, r1, #2
    e952:	429c      	cmp	r4, r3
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = (uint16_t)(((unsigned char*)arr->data)[index] << 8 |
    e954:	bf9d      	ittte	ls
    e956:	6803      	ldrls	r3, [r0, #0]
    e958:	5c58      	ldrbls	r0, [r3, r1]
        ((unsigned char*)arr->data)[index + 1]);
    e95a:	18c9      	addls	r1, r1, r3
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    e95c:	f44f 7082 	movhi.w	r0, #260	; 0x104
        ((unsigned char*)arr->data)[index + 1]);
    e960:	bf9f      	itttt	ls
    e962:	784b      	ldrbls	r3, [r1, #1]
    *value = (uint16_t)(((unsigned char*)arr->data)[index] << 8 |
    e964:	ea43 2300 	orrls.w	r3, r3, r0, lsl #8
    e968:	8013      	strhls	r3, [r2, #0]
    return 0;
    e96a:	2000      	movls	r0, #0
}
    e96c:	bd10      	pop	{r4, pc}

0000e96e <bb_addHexString>:

#ifndef DLMS_IGNORE_MALLOC
int bb_addHexString(
    gxByteBuffer* arr,
    const char* str)
{
    e96e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint16_t count;
    int ret;
    unsigned char* buffer = NULL;
    e970:	2300      	movs	r3, #0
{
    e972:	4605      	mov	r5, r0
    ret = hlp_hexToBytes(str, &buffer, &count);
    e974:	f10d 0202 	add.w	r2, sp, #2
{
    e978:	4608      	mov	r0, r1
    ret = hlp_hexToBytes(str, &buffer, &count);
    e97a:	a901      	add	r1, sp, #4
    unsigned char* buffer = NULL;
    e97c:	9301      	str	r3, [sp, #4]
    ret = hlp_hexToBytes(str, &buffer, &count);
    e97e:	f00c fe7f 	bl	1b680 <hlp_hexToBytes>
    if (ret != 0)
    e982:	4604      	mov	r4, r0
    e984:	b948      	cbnz	r0, e99a <bb_addHexString+0x2c>
    {
        return ret;
    }
    if (buffer != NULL)
    e986:	9901      	ldr	r1, [sp, #4]
    e988:	b139      	cbz	r1, e99a <bb_addHexString+0x2c>
    {
        bb_set(arr, buffer, count);
    e98a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e98e:	4628      	mov	r0, r5
    e990:	f7ff fe23 	bl	e5da <bb_set>
        gxfree(buffer);
    e994:	9801      	ldr	r0, [sp, #4]
    e996:	f7fe fcb5 	bl	d304 <free>
    }
    return 0;
}
    e99a:	4620      	mov	r0, r4
    e99c:	b003      	add	sp, #12
    e99e:	bd30      	pop	{r4, r5, pc}

0000e9a0 <bb_toHexString>:
}

char* bb_toHexString(
    gxByteBuffer* arr)
{
    char* buff = hlp_bytesToHex(arr->data, arr->size);
    e9a0:	88c1      	ldrh	r1, [r0, #6]
    e9a2:	6800      	ldr	r0, [r0, #0]
    e9a4:	f7f5 bd10 	b.w	43c8 <hlp_bytesToHex>

0000e9a8 <bb_addIntAsString2>:
{
    return bb_addIntAsString2(bb, value, 0);
}

int bb_addIntAsString2(gxByteBuffer* bb, int value, unsigned char digits)
{
    e9a8:	b510      	push	{r4, lr}
    e9aa:	b088      	sub	sp, #32
    e9ac:	4604      	mov	r4, r0
    int ret;
    char str[20];
    hlp_intToString(str, 20, value, 1, digits);
    e9ae:	9200      	str	r2, [sp, #0]
    e9b0:	2301      	movs	r3, #1
    e9b2:	460a      	mov	r2, r1
    e9b4:	a803      	add	r0, sp, #12
    e9b6:	2114      	movs	r1, #20
    e9b8:	f00c feb0 	bl	1b71c <hlp_intToString>
    if (value != NULL)
    e9bc:	a903      	add	r1, sp, #12
    e9be:	4620      	mov	r0, r4
    e9c0:	f7ff fe20 	bl	e604 <bb_addString.part.0>
    if ((ret = bb_addString(bb, str)) != 0)
    {

    }
    return ret;
}
    e9c4:	b008      	add	sp, #32
    e9c6:	bd10      	pop	{r4, pc}

0000e9c8 <bb_addIntAsString>:
    return bb_addIntAsString2(bb, value, 0);
    e9c8:	2200      	movs	r2, #0
    e9ca:	f7ff bfed 	b.w	e9a8 <bb_addIntAsString2>

0000e9ce <bb_move>:
    uint16_t destPos,
    uint16_t count)
#endif
{
    //If items are removed.
    if (srcPos > destPos)
    e9ce:	4291      	cmp	r1, r2
{
    e9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9d4:	4604      	mov	r4, r0
    e9d6:	4688      	mov	r8, r1
    e9d8:	4616      	mov	r6, r2
    e9da:	461f      	mov	r7, r3
    e9dc:	eb03 0502 	add.w	r5, r3, r2
    if (srcPos > destPos)
    e9e0:	d905      	bls.n	e9ee <bb_move+0x20>
    {
        if (bb->size < destPos + count)
    e9e2:	88c3      	ldrh	r3, [r0, #6]
    e9e4:	42ab      	cmp	r3, r5
    e9e6:	db20      	blt.n	ea2a <bb_move+0x5c>
            {
                return ret;
            }
        }
    }
    if (count != 0)
    e9e8:	b98f      	cbnz	r7, ea0e <bb_move+0x40>
        //Do not use memcpy here!
        memmove(bb->data + destPos, bb->data + srcPos, count);
        bb->size = (destPos + count);
        if (bb->position > bb->size)
        {
            bb->position = bb->size;
    e9ea:	2000      	movs	r0, #0
    e9ec:	e00d      	b.n	ea0a <bb_move+0x3c>
    return arr->capacity & 0x7FFF;
    e9ee:	8883      	ldrh	r3, [r0, #4]
        if (bb_getCapacity(bb) < count + destPos)
    e9f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
    e9f4:	42ab      	cmp	r3, r5
    e9f6:	daf7      	bge.n	e9e8 <bb_move+0x1a>
            if (bb_isAttached(bb))
    e9f8:	f7ff fc8f 	bl	e31a <bb_isAttached>
    e9fc:	b9a8      	cbnz	r0, ea2a <bb_move+0x5c>
            if ((ret = bb_capacity(bb, count + destPos)) != 0)
    e9fe:	b2a9      	uxth	r1, r5
    ea00:	4620      	mov	r0, r4
    ea02:	f7ff fca1 	bl	e348 <bb_capacity>
    ea06:	2800      	cmp	r0, #0
    ea08:	d0ee      	beq.n	e9e8 <bb_move+0x1a>
        }
    }
    return DLMS_ERROR_CODE_OK;
}
    ea0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memmove(bb->data + destPos, bb->data + srcPos, count);
    ea0e:	6820      	ldr	r0, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
    ea10:	463a      	mov	r2, r7
    ea12:	eb00 0108 	add.w	r1, r0, r8
    ea16:	4430      	add	r0, r6
    ea18:	f00f fc14 	bl	1e244 <memmove>
        if (bb->position > bb->size)
    ea1c:	8923      	ldrh	r3, [r4, #8]
        bb->size = (destPos + count);
    ea1e:	b2ad      	uxth	r5, r5
        if (bb->position > bb->size)
    ea20:	42ab      	cmp	r3, r5
        bb->size = (destPos + count);
    ea22:	80e5      	strh	r5, [r4, #6]
            bb->position = bb->size;
    ea24:	bf88      	it	hi
    ea26:	8125      	strhhi	r5, [r4, #8]
    ea28:	e7df      	b.n	e9ea <bb_move+0x1c>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
    ea2a:	f44f 7081 	mov.w	r0, #258	; 0x102
    ea2e:	e7ec      	b.n	ea0a <bb_move+0x3c>

0000ea30 <bb_insert>:
{
    ea30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea34:	460f      	mov	r7, r1
    if (target->size == 0)
    ea36:	88d1      	ldrh	r1, [r2, #6]
{
    ea38:	4680      	mov	r8, r0
    ea3a:	4615      	mov	r5, r2
    ea3c:	461e      	mov	r6, r3
    if (target->size == 0)
    ea3e:	b931      	cbnz	r1, ea4e <bb_insert+0x1e>
        ret = bb_set(target, src, count);
    ea40:	463a      	mov	r2, r7
    ea42:	4601      	mov	r1, r0
    ea44:	4628      	mov	r0, r5
}
    ea46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        ret = bb_set(target, src, count);
    ea4a:	f7ff bdc6 	b.w	e5da <bb_set>
        if ((ret = bb_capacity(target, target->size + count)) == 0 &&
    ea4e:	4439      	add	r1, r7
    ea50:	b289      	uxth	r1, r1
    ea52:	4610      	mov	r0, r2
    ea54:	f7ff fc78 	bl	e348 <bb_capacity>
    ea58:	4604      	mov	r4, r0
    ea5a:	b988      	cbnz	r0, ea80 <bb_insert+0x50>
            (ret = bb_move(target, index, index + count, target->size - index)) == 0)
    ea5c:	88eb      	ldrh	r3, [r5, #6]
    ea5e:	19ba      	adds	r2, r7, r6
    ea60:	1b9b      	subs	r3, r3, r6
    ea62:	b29b      	uxth	r3, r3
    ea64:	b292      	uxth	r2, r2
    ea66:	4631      	mov	r1, r6
    ea68:	4628      	mov	r0, r5
    ea6a:	f7ff ffb0 	bl	e9ce <bb_move>
        if ((ret = bb_capacity(target, target->size + count)) == 0 &&
    ea6e:	4604      	mov	r4, r0
    ea70:	b930      	cbnz	r0, ea80 <bb_insert+0x50>
            memmove(target->data + index, src + index, count);
    ea72:	6828      	ldr	r0, [r5, #0]
    ea74:	463a      	mov	r2, r7
    ea76:	eb08 0106 	add.w	r1, r8, r6
    ea7a:	4430      	add	r0, r6
    ea7c:	f00f fbe2 	bl	1e244 <memmove>
}
    ea80:	4620      	mov	r0, r4
    ea82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ea86 <bb_trim>:

int bb_trim(
    gxByteBuffer* bb)
{
    int ret;
    if (bb->size == bb->position)
    ea86:	88c3      	ldrh	r3, [r0, #6]
    ea88:	8901      	ldrh	r1, [r0, #8]
    ea8a:	428b      	cmp	r3, r1
{
    ea8c:	b510      	push	{r4, lr}
    ea8e:	4604      	mov	r4, r0
    if (bb->size == bb->position)
    ea90:	d104      	bne.n	ea9c <bb_trim+0x16>
    {
        bb->size = 0;
    ea92:	2300      	movs	r3, #0
    ea94:	80c3      	strh	r3, [r0, #6]
        if ((ret = bb_move(bb, bb->position, 0, bb->size - bb->position)) != 0)
        {
            return ret;
        }
    }
    bb->position = 0;
    ea96:	2000      	movs	r0, #0
    ea98:	8120      	strh	r0, [r4, #8]
    return DLMS_ERROR_CODE_OK;
    ea9a:	e006      	b.n	eaaa <bb_trim+0x24>
        if ((ret = bb_move(bb, bb->position, 0, bb->size - bb->position)) != 0)
    ea9c:	1a5b      	subs	r3, r3, r1
    ea9e:	b29b      	uxth	r3, r3
    eaa0:	2200      	movs	r2, #0
    eaa2:	f7ff ff94 	bl	e9ce <bb_move>
    eaa6:	2800      	cmp	r0, #0
    eaa8:	d0f5      	beq.n	ea96 <bb_trim+0x10>
}
    eaaa:	bd10      	pop	{r4, pc}

0000eaac <bb_get>:
int bb_get(
    gxByteBuffer* bb,
    unsigned char* value,
    uint16_t count)
#endif
{
    eaac:	b538      	push	{r3, r4, r5, lr}
    eaae:	4604      	mov	r4, r0
    eab0:	4615      	mov	r5, r2
    eab2:	4608      	mov	r0, r1
    if (bb == NULL || value == NULL || bb->size - bb->position < count)
    eab4:	b174      	cbz	r4, ead4 <bb_get+0x28>
    eab6:	b169      	cbz	r1, ead4 <bb_get+0x28>
    eab8:	8921      	ldrh	r1, [r4, #8]
    eaba:	88e3      	ldrh	r3, [r4, #6]
    eabc:	1a5b      	subs	r3, r3, r1
    eabe:	4293      	cmp	r3, r2
    eac0:	db08      	blt.n	ead4 <bb_get+0x28>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    memcpy(value, bb->data + bb->position, count);
    eac2:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    eac4:	4419      	add	r1, r3
    eac6:	f00f fb9c 	bl	1e202 <memcpy>
    bb->position += count;
    eaca:	8922      	ldrh	r2, [r4, #8]
    eacc:	4415      	add	r5, r2
    eace:	8125      	strh	r5, [r4, #8]
    return 0;
    ead0:	2000      	movs	r0, #0
}
    ead2:	bd38      	pop	{r3, r4, r5, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    ead4:	f44f 7082 	mov.w	r0, #260	; 0x104
    ead8:	e7fb      	b.n	ead2 <bb_get+0x26>

0000eada <cip_xor>:
{
    eada:	b510      	push	{r4, lr}
    eadc:	1e43      	subs	r3, r0, #1
    eade:	3901      	subs	r1, #1
    eae0:	300f      	adds	r0, #15
        dst[pos] ^= src[pos];
    eae2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    eae6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    for (pos = 0; pos != 16; ++pos)
    eaea:	4283      	cmp	r3, r0
        dst[pos] ^= src[pos];
    eaec:	ea82 0204 	eor.w	r2, r2, r4
    eaf0:	701a      	strb	r2, [r3, #0]
    for (pos = 0; pos != 16; ++pos)
    eaf2:	d1f6      	bne.n	eae2 <cip_xor+0x8>
}
    eaf4:	bd10      	pop	{r4, pc}

0000eaf6 <shift_right_block>:
    uint32_t val = GETU32(v + 12);
    eaf6:	68c3      	ldr	r3, [r0, #12]
    if (v[11] & 0x01)
    eaf8:	7ac1      	ldrb	r1, [r0, #11]
    eafa:	ba1b      	rev	r3, r3
    eafc:	07ca      	lsls	r2, r1, #31
    val >>= 1;
    eafe:	ea4f 0353 	mov.w	r3, r3, lsr #1
        val |= 0x80000000;
    eb02:	bf48      	it	mi
    eb04:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    val = GETU32(v + 8);
    eb08:	7a42      	ldrb	r2, [r0, #9]
    eb0a:	ba1b      	rev	r3, r3
    PUT32(v + 12, val);
    eb0c:	60c3      	str	r3, [r0, #12]
    val = GETU32(v + 8);
    eb0e:	7a03      	ldrb	r3, [r0, #8]
    eb10:	0412      	lsls	r2, r2, #16
    eb12:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    eb16:	7a83      	ldrb	r3, [r0, #10]
    eb18:	430a      	orrs	r2, r1
    if (v[7] & 0x01)
    eb1a:	79c1      	ldrb	r1, [r0, #7]
    val = GETU32(v + 8);
    eb1c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    val >>= 1;
    eb20:	0852      	lsrs	r2, r2, #1
    if (v[7] & 0x01)
    eb22:	07cb      	lsls	r3, r1, #31
        val |= 0x80000000;
    eb24:	bf48      	it	mi
    eb26:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
    val = GETU32(v + 4);
    eb2a:	7943      	ldrb	r3, [r0, #5]
    eb2c:	ba12      	rev	r2, r2
    PUT32(v + 8, val);
    eb2e:	6082      	str	r2, [r0, #8]
    val = GETU32(v + 4);
    eb30:	7902      	ldrb	r2, [r0, #4]
    eb32:	041b      	lsls	r3, r3, #16
    eb34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    eb38:	7982      	ldrb	r2, [r0, #6]
    eb3a:	430b      	orrs	r3, r1
    eb3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (v[3] & 0x01)
    eb40:	78c2      	ldrb	r2, [r0, #3]
    val >>= 1;
    eb42:	085b      	lsrs	r3, r3, #1
    if (v[3] & 0x01)
    eb44:	07d1      	lsls	r1, r2, #31
        val |= 0x80000000;
    eb46:	bf48      	it	mi
    eb48:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    PUT32(v + 4, val);
    eb4c:	ba1b      	rev	r3, r3
    eb4e:	6043      	str	r3, [r0, #4]
    val = GETU32(v);
    eb50:	7843      	ldrb	r3, [r0, #1]
    eb52:	7801      	ldrb	r1, [r0, #0]
    eb54:	041b      	lsls	r3, r3, #16
    eb56:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    eb5a:	4313      	orrs	r3, r2
    eb5c:	7882      	ldrb	r2, [r0, #2]
    PUT32(v, val);
    eb5e:	0e59      	lsrs	r1, r3, #25
    val = GETU32(v);
    eb60:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    PUT32(v, val);
    eb64:	0c5b      	lsrs	r3, r3, #17
    eb66:	7043      	strb	r3, [r0, #1]
    eb68:	0a53      	lsrs	r3, r2, #9
    val >>= 1;
    eb6a:	0852      	lsrs	r2, r2, #1
    PUT32(v, val);
    eb6c:	7001      	strb	r1, [r0, #0]
    eb6e:	7083      	strb	r3, [r0, #2]
    eb70:	70c2      	strb	r2, [r0, #3]
}
    eb72:	4770      	bx	lr

0000eb74 <cip_inc32>:
    val = GETU32(block + 16 - 4);
    eb74:	68c3      	ldr	r3, [r0, #12]
    eb76:	ba1b      	rev	r3, r3
    val++;
    eb78:	3301      	adds	r3, #1
    eb7a:	ba1b      	rev	r3, r3
    PUT32(block + 16 - 4, val);
    eb7c:	60c3      	str	r3, [r0, #12]
}
    eb7e:	4770      	bx	lr

0000eb80 <cip_multiplyH>:
{
    eb80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    eb84:	4617      	mov	r7, r2
    eb86:	4604      	mov	r4, r0
    eb88:	460e      	mov	r6, r1
__ssp_bos_icheck3(memset, void *, int)
    eb8a:	2210      	movs	r2, #16
    eb8c:	2100      	movs	r1, #0
    eb8e:	4638      	mov	r0, r7
    eb90:	f00f fb72 	bl	1e278 <memset>
    memcpy(tmp, y, 16);
    eb94:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    eb98:	466d      	mov	r5, sp
    eb9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    for (i = 0; i < 16; i++)
    eb9e:	f104 0810 	add.w	r8, r4, #16
{
    eba2:	2607      	movs	r6, #7
            if (x[i] & 1 << (7 - j))
    eba4:	7823      	ldrb	r3, [r4, #0]
    eba6:	4133      	asrs	r3, r6
    eba8:	07da      	lsls	r2, r3, #31
    ebaa:	d503      	bpl.n	ebb4 <cip_multiplyH+0x34>
                cip_xor(z, tmp);
    ebac:	4629      	mov	r1, r5
    ebae:	4638      	mov	r0, r7
    ebb0:	f7ff ff93 	bl	eada <cip_xor>
            if (tmp[15] & 0x01)
    ebb4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ebb8:	07db      	lsls	r3, r3, #31
                shift_right_block(tmp);
    ebba:	4628      	mov	r0, r5
            if (tmp[15] & 0x01)
    ebbc:	d50f      	bpl.n	ebde <cip_multiplyH+0x5e>
                shift_right_block(tmp);
    ebbe:	f7ff ff9a 	bl	eaf6 <shift_right_block>
                tmp[0] ^= 0xe1;
    ebc2:	f89d 3000 	ldrb.w	r3, [sp]
    ebc6:	f083 03e1 	eor.w	r3, r3, #225	; 0xe1
    ebca:	f88d 3000 	strb.w	r3, [sp]
        for (j = 0; j < 8; j++)
    ebce:	3e01      	subs	r6, #1
    ebd0:	d2e8      	bcs.n	eba4 <cip_multiplyH+0x24>
    for (i = 0; i < 16; i++)
    ebd2:	3401      	adds	r4, #1
    ebd4:	45a0      	cmp	r8, r4
    ebd6:	d1e4      	bne.n	eba2 <cip_multiplyH+0x22>
}
    ebd8:	b004      	add	sp, #16
    ebda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                shift_right_block(tmp);
    ebde:	f7ff ff8a 	bl	eaf6 <shift_right_block>
    ebe2:	e7f4      	b.n	ebce <cip_multiplyH+0x4e>

0000ebe4 <cip_getGHash>:
{
    ebe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    m = xlen / 16;
    ebe8:	2a00      	cmp	r2, #0
    ebea:	4616      	mov	r6, r2
    ebec:	bfb8      	it	lt
    ebee:	f102 060f 	addlt.w	r6, r2, #15
{
    ebf2:	4607      	mov	r7, r0
    ebf4:	4688      	mov	r8, r1
    ebf6:	4615      	mov	r5, r2
    ebf8:	461c      	mov	r4, r3
    m = xlen / 16;
    ebfa:	1136      	asrs	r6, r6, #4
    for (i = 0; i < m; i++)
    ebfc:	f04f 0a00 	mov.w	sl, #0
        cip_multiplyH(y, h, tmp);
    ec00:	46e9      	mov	r9, sp
    for (i = 0; i < m; i++)
    ec02:	45b2      	cmp	sl, r6
    ec04:	eb08 110a 	add.w	r1, r8, sl, lsl #4
    ec08:	db25      	blt.n	ec56 <cip_getGHash+0x72>
    ec0a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    ec0e:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    if (x + xlen > xpos)
    ec12:	44a8      	add	r8, r5
    ec14:	4541      	cmp	r1, r8
    ec16:	ea4f 1206 	mov.w	r2, r6, lsl #4
    ec1a:	d219      	bcs.n	ec50 <cip_getGHash+0x6c>
        memcpy(tmp, xpos, last);
    ec1c:	466e      	mov	r6, sp
        size_t last = x + xlen - xpos;
    ec1e:	1aad      	subs	r5, r5, r2
        memcpy(tmp, xpos, last);
    ec20:	2310      	movs	r3, #16
    ec22:	462a      	mov	r2, r5
    ec24:	4630      	mov	r0, r6
    ec26:	f00f fafa 	bl	1e21e <__memcpy_chk>
    ec2a:	f1c5 0210 	rsb	r2, r5, #16
    ec2e:	2100      	movs	r1, #0
    ec30:	1970      	adds	r0, r6, r5
    ec32:	f00f fb21 	bl	1e278 <memset>
        cip_xor(y, tmp);
    ec36:	4631      	mov	r1, r6
    ec38:	4620      	mov	r0, r4
    ec3a:	f7ff ff4e 	bl	eada <cip_xor>
        cip_multiplyH(y, h, tmp);
    ec3e:	4632      	mov	r2, r6
    ec40:	4639      	mov	r1, r7
    ec42:	4620      	mov	r0, r4
    ec44:	f7ff ff9c 	bl	eb80 <cip_multiplyH>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ec48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    ec4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    ec50:	b004      	add	sp, #16
    ec52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        cip_xor(y, xpos);
    ec56:	4620      	mov	r0, r4
    ec58:	f7ff ff3f 	bl	eada <cip_xor>
        cip_multiplyH(y, h, tmp);
    ec5c:	464a      	mov	r2, r9
    ec5e:	4639      	mov	r1, r7
    ec60:	4620      	mov	r0, r4
    ec62:	f7ff ff8d 	bl	eb80 <cip_multiplyH>
    ec66:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
    for (i = 0; i < m; i++)
    ec6a:	f10a 0a01 	add.w	sl, sl, #1
    ec6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ec72:	e7c6      	b.n	ec02 <cip_getGHash+0x1e>

0000ec74 <aes_gcm_ghash>:
{
    ec74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ec78:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
    ec7c:	4606      	mov	r6, r0
    ec7e:	4698      	mov	r8, r3
    cip_getGHash(H, aad, aad_len, S);
    ec80:	463b      	mov	r3, r7
{
    ec82:	4615      	mov	r5, r2
    cip_getGHash(H, aad, aad_len, S);
    ec84:	f7ff ffae 	bl	ebe4 <cip_getGHash>
    cip_getGHash(H, crypt, crypt_len, S);
    ec88:	463b      	mov	r3, r7
    ec8a:	4622      	mov	r2, r4
    ec8c:	4641      	mov	r1, r8
    ec8e:	4630      	mov	r0, r6
    ec90:	f7ff ffa8 	bl	ebe4 <cip_getGHash>
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    ec94:	00ea      	lsls	r2, r5, #3
    PUT32(len_buf, (uint32_t)0);
    ec96:	2300      	movs	r3, #0
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    ec98:	f88d 2007 	strb.w	r2, [sp, #7]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    ec9c:	f3c4 5247 	ubfx	r2, r4, #21, #8
    PUT32(len_buf, (uint32_t)0);
    eca0:	9300      	str	r3, [sp, #0]
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    eca2:	f88d 3004 	strb.w	r3, [sp, #4]
    eca6:	f3c5 314f 	ubfx	r1, r5, #13, #16
    PUT32(len_buf + 8, (uint32_t)0);
    ecaa:	9302      	str	r3, [sp, #8]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    ecac:	f88d 200c 	strb.w	r2, [sp, #12]
    ecb0:	00e3      	lsls	r3, r4, #3
    ecb2:	f3c4 324f 	ubfx	r2, r4, #13, #16
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    ecb6:	f88d 1005 	strb.w	r1, [sp, #5]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    ecba:	f88d 200d 	strb.w	r2, [sp, #13]
    ecbe:	f88d 300f 	strb.w	r3, [sp, #15]
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    ecc2:	f3c5 1557 	ubfx	r5, r5, #5, #24
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    ecc6:	f3c4 1457 	ubfx	r4, r4, #5, #24
    cip_getGHash(H, len_buf, sizeof(len_buf), S);
    ecca:	463b      	mov	r3, r7
    eccc:	2210      	movs	r2, #16
    ecce:	4669      	mov	r1, sp
    ecd0:	4630      	mov	r0, r6
    PUT32(len_buf + 4, (uint32_t)(aad_len * 8));
    ecd2:	f88d 5006 	strb.w	r5, [sp, #6]
    PUT32(len_buf + 12, (uint32_t)(crypt_len * 8));
    ecd6:	f88d 400e 	strb.w	r4, [sp, #14]
    cip_getGHash(H, len_buf, sizeof(len_buf), S);
    ecda:	f7ff ff83 	bl	ebe4 <cip_getGHash>
}
    ecde:	b004      	add	sp, #16
    ece0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ece4 <cip_clear>:
{
    ece4:	b538      	push	{r3, r4, r5, lr}
    target->invocationCounter = 1;
    ece6:	2301      	movs	r3, #1
    target->security = DLMS_SECURITY_NONE;
    ece8:	2500      	movs	r5, #0
{
    ecea:	4604      	mov	r4, r0
    target->invocationCounter = 1;
    ecec:	61c3      	str	r3, [r0, #28]
    target->security = DLMS_SECURITY_NONE;
    ecee:	7005      	strb	r5, [r0, #0]
    target->encrypt = 0;
    ecf0:	7085      	strb	r5, [r0, #2]
    bb_clear(&target->blockCipherKey);
    ecf2:	3004      	adds	r0, #4
    ecf4:	f7ff fce5 	bl	e6c2 <bb_clear>
    bb_clear(&target->systemTitle);
    ecf8:	f104 0010 	add.w	r0, r4, #16
    ecfc:	f7ff fce1 	bl	e6c2 <bb_clear>
    bb_clear(&target->authenticationKey);
    ed00:	f104 0020 	add.w	r0, r4, #32
    ed04:	f7ff fcdd 	bl	e6c2 <bb_clear>
    if (target->dedicatedKey != NULL)
    ed08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed0a:	b128      	cbz	r0, ed18 <cip_clear+0x34>
        bb_clear(target->dedicatedKey);
    ed0c:	f7ff fcd9 	bl	e6c2 <bb_clear>
        gxfree(target->dedicatedKey);
    ed10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed12:	f7fe faf7 	bl	d304 <free>
        target->dedicatedKey = NULL;
    ed16:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    ed18:	bd38      	pop	{r3, r4, r5, pc}

0000ed1a <cip_gctr.part.0>:
static void cip_gctr(uint32_t* aes, const unsigned char* icb, unsigned char* in, int len, unsigned char* out)
    ed1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed1e:	4681      	mov	r9, r0
    ed20:	4693      	mov	fp, r2
    ed22:	461d      	mov	r5, r3
    n = len / 16;
    ed24:	111c      	asrs	r4, r3, #4
    memcpy(cb, icb, 16);
    ed26:	c90f      	ldmia	r1, {r0, r1, r2, r3}
static void cip_gctr(uint32_t* aes, const unsigned char* icb, unsigned char* in, int len, unsigned char* out)
    ed28:	b089      	sub	sp, #36	; 0x24
    ed2a:	466e      	mov	r6, sp
    ed2c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    ed30:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    for (i = 0; i < n; i++)
    ed34:	f04f 0a00 	mov.w	sl, #0
    ed38:	4554      	cmp	r4, sl
    ed3a:	ea4f 120a 	mov.w	r2, sl, lsl #4
    ed3e:	eb08 130a 	add.w	r3, r8, sl, lsl #4
    ed42:	eb0b 170a 	add.w	r7, fp, sl, lsl #4
    ed46:	d11c      	bne.n	ed82 <cip_gctr.part.0+0x68>
    if (last)
    ed48:	1aad      	subs	r5, r5, r2
    ed4a:	463c      	mov	r4, r7
    ed4c:	461f      	mov	r7, r3
    ed4e:	d015      	beq.n	ed7c <cip_gctr.part.0+0x62>
        aes_Encrypt(aes, aes[60], cb, tmp);
    ed50:	4632      	mov	r2, r6
    ed52:	f8d9 10f0 	ldr.w	r1, [r9, #240]	; 0xf0
    ed56:	ab04      	add	r3, sp, #16
    ed58:	4648      	mov	r0, r9
    ed5a:	f7f2 fd5d 	bl	1818 <aes_Encrypt>
        for (i = 0; i < last; i++)
    ed5e:	4425      	add	r5, r4
    ed60:	aa04      	add	r2, sp, #16
            if (out == NULL)
    ed62:	f814 3b01 	ldrb.w	r3, [r4], #1
                *pin ^= tmp[i];
    ed66:	7811      	ldrb	r1, [r2, #0]
    ed68:	404b      	eors	r3, r1
            if (out == NULL)
    ed6a:	f1b8 0f00 	cmp.w	r8, #0
    ed6e:	d123      	bne.n	edb8 <cip_gctr.part.0+0x9e>
                *pin ^= tmp[i];
    ed70:	f804 3c01 	strb.w	r3, [r4, #-1]
        for (i = 0; i < last; i++)
    ed74:	42a5      	cmp	r5, r4
    ed76:	f102 0201 	add.w	r2, r2, #1
    ed7a:	d1f2      	bne.n	ed62 <cip_gctr.part.0+0x48>
}
    ed7c:	b009      	add	sp, #36	; 0x24
    ed7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (out == NULL)
    ed82:	f8d9 10f0 	ldr.w	r1, [r9, #240]	; 0xf0
    ed86:	f1b8 0f00 	cmp.w	r8, #0
    ed8a:	d10e      	bne.n	edaa <cip_gctr.part.0+0x90>
            aes_Encrypt(aes, aes[60], cb, tmp);
    ed8c:	4648      	mov	r0, r9
    ed8e:	ab04      	add	r3, sp, #16
    ed90:	4632      	mov	r2, r6
    ed92:	f7f2 fd41 	bl	1818 <aes_Encrypt>
            cip_xor(pin, tmp);
    ed96:	a904      	add	r1, sp, #16
    ed98:	4638      	mov	r0, r7
            cip_xor(pout, pin);
    ed9a:	f7ff fe9e 	bl	eada <cip_xor>
        cip_inc32(cb);
    ed9e:	4630      	mov	r0, r6
    eda0:	f7ff fee8 	bl	eb74 <cip_inc32>
    for (i = 0; i < n; i++)
    eda4:	f10a 0a01 	add.w	sl, sl, #1
    eda8:	e7c6      	b.n	ed38 <cip_gctr.part.0+0x1e>
            aes_Encrypt(aes, aes[60], cb, pout);
    edaa:	4648      	mov	r0, r9
    edac:	4632      	mov	r2, r6
    edae:	f7f2 fd33 	bl	1818 <aes_Encrypt>
            cip_xor(pout, pin);
    edb2:	4639      	mov	r1, r7
    edb4:	4618      	mov	r0, r3
    edb6:	e7f0      	b.n	ed9a <cip_gctr.part.0+0x80>
                *pout = *pin++ ^ tmp[i];
    edb8:	f807 3b01 	strb.w	r3, [r7], #1
                ++pout;
    edbc:	e7da      	b.n	ed74 <cip_gctr.part.0+0x5a>

0000edbe <aes_gcm_gctr.constprop.0>:
static void aes_gcm_gctr(uint32_t* aes, const unsigned char* J0, unsigned char* in, int len, unsigned char* out)
    edbe:	b5f0      	push	{r4, r5, r6, r7, lr}
    edc0:	4606      	mov	r6, r0
    edc2:	b087      	sub	sp, #28
    edc4:	4617      	mov	r7, r2
    if (len == 0)
    edc6:	461d      	mov	r5, r3
    edc8:	b173      	cbz	r3, ede8 <aes_gcm_gctr.constprop.0+0x2a>
    memcpy(J0inc, J0, 16);
    edca:	c90f      	ldmia	r1, {r0, r1, r2, r3}
    edcc:	ac02      	add	r4, sp, #8
    edce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cip_inc32(J0inc);
    edd2:	4620      	mov	r0, r4
    edd4:	f7ff fece 	bl	eb74 <cip_inc32>
    if (len == 0)
    edd8:	2300      	movs	r3, #0
    edda:	9300      	str	r3, [sp, #0]
    eddc:	463a      	mov	r2, r7
    edde:	462b      	mov	r3, r5
    ede0:	4621      	mov	r1, r4
    ede2:	4630      	mov	r0, r6
    ede4:	f7ff ff99 	bl	ed1a <cip_gctr.part.0>
}
    ede8:	b007      	add	sp, #28
    edea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000edec <cosem_getObjectSize>:
    switch (type)
    edec:	3801      	subs	r0, #1
    edee:	2872      	cmp	r0, #114	; 0x72
    edf0:	d866      	bhi.n	eec0 <cosem_getObjectSize+0xd4>
    edf2:	e8df f000 	tbb	[pc, r0]
    edf6:	6563      	.short	0x6563
    edf8:	433f4f3a 	.word	0x433f4f3a
    edfc:	5f5f5b5d 	.word	0x5f5f5b5d
    ee00:	65653a5f 	.word	0x65653a5f
    ee04:	435f6553 	.word	0x435f6553
    ee08:	3a47455d 	.word	0x3a47455d
    ee0c:	634b5963 	.word	0x634b5963
    ee10:	4f473d59 	.word	0x4f473d59
    ee14:	65656565 	.word	0x65656565
    ee18:	65656565 	.word	0x65656565
    ee1c:	41634d65 	.word	0x41634d65
    ee20:	493a4d5f 	.word	0x493a4d5f
    ee24:	6165654f 	.word	0x6165654f
    ee28:	655b5763 	.word	0x655b5763
    ee2c:	634b5f65 	.word	0x634b5f65
    ee30:	553a655f 	.word	0x553a655f
    ee34:	654f5549 	.word	0x654f5549
    ee38:	4b655d65 	.word	0x4b655d65
    ee3c:	4b656145 	.word	0x4b656145
    ee40:	65656565 	.word	0x65656565
    ee44:	57574b65 	.word	0x57574b65
    ee48:	635b3a59 	.word	0x635b3a59
    ee4c:	65656565 	.word	0x65656565
    ee50:	65656565 	.word	0x65656565
    ee54:	65656565 	.word	0x65656565
    ee58:	49496565 	.word	0x49496565
    ee5c:	65656349 	.word	0x65656349
    ee60:	65656565 	.word	0x65656565
    ee64:	65536151 	.word	0x65536151
    ee68:	4f          	.byte	0x4f
    ee69:	00          	.byte	0x00
        size = sizeof(gxSapAssignment);
    ee6a:	2028      	movs	r0, #40	; 0x28
    return size;
    ee6c:	b280      	uxth	r0, r0
    ee6e:	4770      	bx	lr
        size = sizeof(gxAutoAnswer);
    ee70:	2024      	movs	r0, #36	; 0x24
        break;
    ee72:	e7fb      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxDemandRegister);
    ee74:	2068      	movs	r0, #104	; 0x68
        break;
    ee76:	e7f9      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxIp4Setup);
    ee78:	2050      	movs	r0, #80	; 0x50
        break;
    ee7a:	e7f7      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxImageTransfer);
    ee7c:	2030      	movs	r0, #48	; 0x30
        break;
    ee7e:	e7f5      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxLimiter);
    ee80:	2080      	movs	r0, #128	; 0x80
        break;
    ee82:	e7f3      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxRegisterMonitor);
    ee84:	2034      	movs	r0, #52	; 0x34
        break;
    ee86:	e7f1      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxZigBeeSasStartup);
    ee88:	2010      	movs	r0, #16
        break;
    ee8a:	e7ef      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxMBusMasterPortSetup);
    ee8c:	2014      	movs	r0, #20
        break;
    ee8e:	e7ed      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxPushSetup);
    ee90:	2048      	movs	r0, #72	; 0x48
        break;
    ee92:	e7eb      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxDataProtection);
    ee94:	2040      	movs	r0, #64	; 0x40
        break;
    ee96:	e7e9      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxAccount);
    ee98:	208c      	movs	r0, #140	; 0x8c
        break;
    ee9a:	e7e7      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxCharge);
    ee9c:	2074      	movs	r0, #116	; 0x74
        break;
    ee9e:	e7e5      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxCompactData);
    eea0:	203c      	movs	r0, #60	; 0x3c
        break;
    eea2:	e7e3      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcPhysicalLayerCounters);
    eea4:	2018      	movs	r0, #24
        break;
    eea6:	e7e1      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcMacFunctionalParameters);
    eea8:	202c      	movs	r0, #44	; 0x2c
        break;
    eeaa:	e7df      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxPrimeNbOfdmPlcMacNetworkAdministrationData);
    eeac:	204c      	movs	r0, #76	; 0x4c
        break;
    eeae:	e7dd      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxArbitrator);
    eeb0:	2044      	movs	r0, #68	; 0x44
        break;
    eeb2:	e7db      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxIec8802LlcType3Setup);
    eeb4:	201c      	movs	r0, #28
        break;
    eeb6:	e7d9      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxSFSKPhyMacSetUp);
    eeb8:	2038      	movs	r0, #56	; 0x38
        break;
    eeba:	e7d7      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxData);
    eebc:	2020      	movs	r0, #32
    eebe:	e7d5      	b.n	ee6c <cosem_getObjectSize+0x80>
        size = sizeof(gxSapAssignment);
    eec0:	2000      	movs	r0, #0
}
    eec2:	4770      	bx	lr

0000eec4 <cosem_setLogicalName>:
    eec4:	680b      	ldr	r3, [r1, #0]
    eec6:	f8c0 3006 	str.w	r3, [r0, #6]
    eeca:	888b      	ldrh	r3, [r1, #4]
    eecc:	8143      	strh	r3, [r0, #10]
}
    eece:	2000      	movs	r0, #0
    eed0:	4770      	bx	lr

0000eed2 <cosem_init2>:
{
    eed2:	4613      	mov	r3, r2
	return cosem_init4((void*) object, expectedSize, type, ln);
    eed4:	460a      	mov	r2, r1
    eed6:	2100      	movs	r1, #0
    eed8:	f7f3 b8a2 	b.w	2020 <cosem_init4>

0000eedc <cosem_getStructure>:
{
    eedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eede:	460c      	mov	r4, r1
    if ((ret = bb_getUInt8(bb, &value)) != 0)
    eee0:	f10d 0105 	add.w	r1, sp, #5
{
    eee4:	4605      	mov	r5, r0
    if ((ret = bb_getUInt8(bb, &value)) != 0)
    eee6:	f7ff fc02 	bl	e6ee <bb_getUInt8>
    eeea:	b960      	cbnz	r0, ef06 <cosem_getStructure+0x2a>
    if (value != DLMS_DATA_TYPE_STRUCTURE)
    eeec:	f89d 3005 	ldrb.w	r3, [sp, #5]
    eef0:	2b02      	cmp	r3, #2
    eef2:	d10a      	bne.n	ef0a <cosem_getStructure+0x2e>
    if ((ret = hlp_getObjectCount2(bb, &cnt)) != 0)
    eef4:	f10d 0106 	add.w	r1, sp, #6
    eef8:	4628      	mov	r0, r5
    eefa:	f00c fb53 	bl	1b5a4 <hlp_getObjectCount2>
    eefe:	b910      	cbnz	r0, ef06 <cosem_getStructure+0x2a>
    *count = cnt;
    ef00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ef04:	8023      	strh	r3, [r4, #0]
}
    ef06:	b003      	add	sp, #12
    ef08:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    ef0a:	200c      	movs	r0, #12
    ef0c:	e7fb      	b.n	ef06 <cosem_getStructure+0x2a>

0000ef0e <cosem_checkStructure>:
{
    ef0e:	b513      	push	{r0, r1, r4, lr}
    ef10:	460c      	mov	r4, r1
    if ((ret = cosem_getStructure(bb, &cnt)) == 0)
    ef12:	f10d 0106 	add.w	r1, sp, #6
    ef16:	f7ff ffe1 	bl	eedc <cosem_getStructure>
    ef1a:	b920      	cbnz	r0, ef26 <cosem_checkStructure+0x18>
        if (cnt != expectedItemCount)
    ef1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
    ef20:	42a3      	cmp	r3, r4
    ef22:	bf18      	it	ne
    ef24:	2009      	movne	r0, #9
}
    ef26:	b002      	add	sp, #8
    ef28:	bd10      	pop	{r4, pc}

0000ef2a <cosem_checkArray2>:
{
    ef2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ef2c:	4605      	mov	r5, r0
    ef2e:	460c      	mov	r4, r1
    if (checkDataType)
    ef30:	b93a      	cbnz	r2, ef42 <cosem_checkArray2+0x18>
    if ((ret = hlp_getObjectCount2(bb, &cnt)) != 0)
    ef32:	f10d 0106 	add.w	r1, sp, #6
    ef36:	4628      	mov	r0, r5
    ef38:	f00c fb34 	bl	1b5a4 <hlp_getObjectCount2>
    ef3c:	b168      	cbz	r0, ef5a <cosem_checkArray2+0x30>
}
    ef3e:	b003      	add	sp, #12
    ef40:	bd30      	pop	{r4, r5, pc}
        if ((ret = bb_getUInt8(bb, &ch)) != 0)
    ef42:	f10d 0105 	add.w	r1, sp, #5
    ef46:	f7ff fbd2 	bl	e6ee <bb_getUInt8>
    ef4a:	2800      	cmp	r0, #0
    ef4c:	d1f7      	bne.n	ef3e <cosem_checkArray2+0x14>
        if (ch != DLMS_DATA_TYPE_ARRAY)
    ef4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ef52:	2b01      	cmp	r3, #1
    ef54:	d0ed      	beq.n	ef32 <cosem_checkArray2+0x8>
            return DLMS_ERROR_CODE_UNMATCH_TYPE;
    ef56:	200c      	movs	r0, #12
    ef58:	e7f1      	b.n	ef3e <cosem_checkArray2+0x14>
    if (*count < cnt)
    ef5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ef5e:	8822      	ldrh	r2, [r4, #0]
    ef60:	429a      	cmp	r2, r3
    ef62:	d301      	bcc.n	ef68 <cosem_checkArray2+0x3e>
    * count = cnt;
    ef64:	8023      	strh	r3, [r4, #0]
    return 0;
    ef66:	e7ea      	b.n	ef3e <cosem_checkArray2+0x14>
        return DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
    ef68:	2009      	movs	r0, #9
    ef6a:	e7e8      	b.n	ef3e <cosem_checkArray2+0x14>

0000ef6c <cosem_checkArray>:
    return cosem_checkArray2(bb, count, 1);
    ef6c:	2201      	movs	r2, #1
    ef6e:	f7ff bfdc 	b.w	ef2a <cosem_checkArray2>

0000ef72 <cosem_getUInt8>:
{
    ef72:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ef74:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    ef76:	f10d 0107 	add.w	r1, sp, #7
{
    ef7a:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    ef7c:	f7ff fbb7 	bl	e6ee <bb_getUInt8>
    ef80:	b938      	cbnz	r0, ef92 <cosem_getUInt8+0x20>
    if (tmp != DLMS_DATA_TYPE_UINT8)
    ef82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef86:	2b11      	cmp	r3, #17
    ef88:	d105      	bne.n	ef96 <cosem_getUInt8+0x24>
    if ((ret = bb_getUInt8(bb, value)) != 0)
    ef8a:	4629      	mov	r1, r5
    ef8c:	4620      	mov	r0, r4
    ef8e:	f7ff fbae 	bl	e6ee <bb_getUInt8>
}
    ef92:	b003      	add	sp, #12
    ef94:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    ef96:	200c      	movs	r0, #12
    ef98:	e7fb      	b.n	ef92 <cosem_getUInt8+0x20>

0000ef9a <cosem_getUInt16>:
{
    ef9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ef9c:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    ef9e:	f10d 0107 	add.w	r1, sp, #7
{
    efa2:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(bb, &tmp)) != 0)
    efa4:	f7ff fba3 	bl	e6ee <bb_getUInt8>
    efa8:	b938      	cbnz	r0, efba <cosem_getUInt16+0x20>
    if (tmp != DLMS_DATA_TYPE_UINT16)
    efaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    efae:	2b12      	cmp	r3, #18
    efb0:	d105      	bne.n	efbe <cosem_getUInt16+0x24>
    if ((ret = bb_getUInt16(bb, value)) != 0)
    efb2:	4629      	mov	r1, r5
    efb4:	4620      	mov	r0, r4
    efb6:	f7ff fbc3 	bl	e740 <bb_getUInt16>
}
    efba:	b003      	add	sp, #12
    efbc:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_UNMATCH_TYPE;
    efbe:	200c      	movs	r0, #12
    efc0:	e7fb      	b.n	efba <cosem_getUInt16+0x20>

0000efc2 <cosem_setDateTimeAsOctetString>:
{
    efc2:	b538      	push	{r3, r4, r5, lr}
    efc4:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    efc6:	2109      	movs	r1, #9
{
    efc8:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    efca:	f7ff fa20 	bl	e40e <bb_setUInt8>
    efce:	b950      	cbnz	r0, efe6 <cosem_setDateTimeAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 12)) != 0 ||
    efd0:	210c      	movs	r1, #12
    efd2:	4620      	mov	r0, r4
    efd4:	f7ff fa1b 	bl	e40e <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    efd8:	b928      	cbnz	r0, efe6 <cosem_setDateTimeAsOctetString+0x24>
        (ret = var_getDateTime2(value, bb)) != 0)
    efda:	4621      	mov	r1, r4
    efdc:	4628      	mov	r0, r5
}
    efde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDateTime2(value, bb)) != 0)
    efe2:	f7f5 ba37 	b.w	4454 <var_getDateTime2>
}
    efe6:	bd38      	pop	{r3, r4, r5, pc}

0000efe8 <cosem_setDateAsOctetString>:
{
    efe8:	b538      	push	{r3, r4, r5, lr}
    efea:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    efec:	2109      	movs	r1, #9
{
    efee:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    eff0:	f7ff fa0d 	bl	e40e <bb_setUInt8>
    eff4:	b950      	cbnz	r0, f00c <cosem_setDateAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 5)) != 0 ||
    eff6:	2105      	movs	r1, #5
    eff8:	4620      	mov	r0, r4
    effa:	f7ff fa08 	bl	e40e <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    effe:	b928      	cbnz	r0, f00c <cosem_setDateAsOctetString+0x24>
        (ret = var_getDate(value, bb)) != 0)
    f000:	4621      	mov	r1, r4
    f002:	4628      	mov	r0, r5
}
    f004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDate(value, bb)) != 0)
    f008:	f00c be5e 	b.w	1bcc8 <var_getDate>
}
    f00c:	bd38      	pop	{r3, r4, r5, pc}

0000f00e <cosem_setBitString>:
{
    f00e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    f012:	4605      	mov	r5, r0
    f014:	460f      	mov	r7, r1
    uint16_t capacity = count == 0 ? 2 : (3 + (count / 8));
    f016:	4616      	mov	r6, r2
    f018:	b362      	cbz	r2, f074 <cosem_setBitString+0x66>
    f01a:	08d4      	lsrs	r4, r2, #3
    f01c:	3403      	adds	r4, #3
    capacity += (uint16_t)bb_size(bb);
    f01e:	4628      	mov	r0, r5
    f020:	f7ff f989 	bl	e336 <bb_size>
    f024:	4404      	add	r4, r0
    if (bb_getCapacity(bb) < capacity)
    f026:	4628      	mov	r0, r5
    f028:	f7ff f981 	bl	e32e <bb_getCapacity>
    capacity += (uint16_t)bb_size(bb);
    f02c:	b2a4      	uxth	r4, r4
    if (bb_getCapacity(bb) < capacity)
    f02e:	42a0      	cmp	r0, r4
    f030:	d322      	bcc.n	f078 <cosem_setBitString+0x6a>
        (ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BIT_STRING)) == 0 &&
    f032:	2104      	movs	r1, #4
    f034:	4628      	mov	r0, r5
    f036:	f7ff f9ea 	bl	e40e <bb_setUInt8>
    if (ret == 0 &&
    f03a:	4604      	mov	r4, r0
    f03c:	bb18      	cbnz	r0, f086 <cosem_setBitString+0x78>
        (ret = hlp_setObjectCount(count, bb)) == 0)
    f03e:	4629      	mov	r1, r5
    f040:	4630      	mov	r0, r6
    f042:	f00c fae0 	bl	1b606 <hlp_setObjectCount>
        (ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BIT_STRING)) == 0 &&
    f046:	4604      	mov	r4, r0
    f048:	b9e8      	cbnz	r0, f086 <cosem_setBitString+0x78>
        ba_attach(&ba, bb->data + bb->size, 0, (uint16_t)(8 * (bb->size - bb->size)));
    f04a:	6828      	ldr	r0, [r5, #0]
    f04c:	88e9      	ldrh	r1, [r5, #6]
    f04e:	4623      	mov	r3, r4
    f050:	4401      	add	r1, r0
    f052:	4622      	mov	r2, r4
    f054:	4668      	mov	r0, sp
    f056:	f7ff f86e 	bl	e136 <ba_attach>
        for (pos = 0; pos != count; ++pos)
    f05a:	46a0      	mov	r8, r4
    f05c:	4546      	cmp	r6, r8
    f05e:	fa1f f188 	uxth.w	r1, r8
    f062:	d114      	bne.n	f08e <cosem_setBitString+0x80>
    f064:	2400      	movs	r4, #0
        bb->size += ba_getByteCount(count);
    f066:	4630      	mov	r0, r6
    f068:	f7f2 fa8c 	bl	1584 <ba_getByteCount>
    f06c:	88eb      	ldrh	r3, [r5, #6]
    f06e:	4418      	add	r0, r3
    f070:	80e8      	strh	r0, [r5, #6]
    return ret;
    f072:	e008      	b.n	f086 <cosem_setBitString+0x78>
    uint16_t capacity = count == 0 ? 2 : (3 + (count / 8));
    f074:	2402      	movs	r4, #2
    f076:	e7d2      	b.n	f01e <cosem_setBitString+0x10>
        ret = bb_capacity(bb, capacity);
    f078:	4621      	mov	r1, r4
    f07a:	4628      	mov	r0, r5
    f07c:	f7ff f964 	bl	e348 <bb_capacity>
    if (ret == 0 &&
    f080:	4604      	mov	r4, r0
    f082:	2800      	cmp	r0, #0
    f084:	d0d5      	beq.n	f032 <cosem_setBitString+0x24>
}
    f086:	4620      	mov	r0, r4
    f088:	b002      	add	sp, #8
    f08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((ret = ba_setByIndex(&ba, pos, value & 01)) != 0)
    f08e:	f007 0201 	and.w	r2, r7, #1
    f092:	4668      	mov	r0, sp
    f094:	f7ff f880 	bl	e198 <ba_setByIndex>
    f098:	f108 0801 	add.w	r8, r8, #1
    f09c:	4604      	mov	r4, r0
    f09e:	2800      	cmp	r0, #0
    f0a0:	d1e1      	bne.n	f066 <cosem_setBitString+0x58>
            value >>= 1;
    f0a2:	087f      	lsrs	r7, r7, #1
        for (pos = 0; pos != count; ++pos)
    f0a4:	e7da      	b.n	f05c <cosem_setBitString+0x4e>

0000f0a6 <cosem_setTimeAsOctetString>:
{
    f0a6:	b538      	push	{r3, r4, r5, lr}
    f0a8:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f0aa:	2109      	movs	r1, #9
{
    f0ac:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f0ae:	f7ff f9ae 	bl	e40e <bb_setUInt8>
    f0b2:	b950      	cbnz	r0, f0ca <cosem_setTimeAsOctetString+0x24>
        (ret = bb_setUInt8(bb, 4)) != 0 ||
    f0b4:	2104      	movs	r1, #4
    f0b6:	4620      	mov	r0, r4
    f0b8:	f7ff f9a9 	bl	e40e <bb_setUInt8>
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f0bc:	b928      	cbnz	r0, f0ca <cosem_setTimeAsOctetString+0x24>
        (ret = var_getTime(value, bb)) != 0)
    f0be:	4621      	mov	r1, r4
    f0c0:	4628      	mov	r0, r5
}
    f0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getTime(value, bb)) != 0)
    f0c6:	f00c be62 	b.w	1bd8e <var_getTime>
}
    f0ca:	bd38      	pop	{r3, r4, r5, pc}

0000f0cc <cosem_setOctetString>:
{
    f0cc:	b538      	push	{r3, r4, r5, lr}
    if (value == NULL)
    f0ce:	460c      	mov	r4, r1
{
    f0d0:	4605      	mov	r5, r0
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f0d2:	2109      	movs	r1, #9
    if (value == NULL)
    f0d4:	b944      	cbnz	r4, f0e8 <cosem_setOctetString+0x1c>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f0d6:	f7ff f99a 	bl	e40e <bb_setUInt8>
    f0da:	b9a0      	cbnz	r0, f106 <cosem_setOctetString+0x3a>
            (ret = bb_setUInt8(bb, 0)) != 0)
    f0dc:	4601      	mov	r1, r0
    f0de:	4628      	mov	r0, r5
}
    f0e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    f0e4:	f7ff b993 	b.w	e40e <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f0e8:	f7ff f991 	bl	e40e <bb_setUInt8>
    f0ec:	b958      	cbnz	r0, f106 <cosem_setOctetString+0x3a>
        (ret = bb_setUInt8(bb, (unsigned char)value->size)) != 0 ||
    f0ee:	79a1      	ldrb	r1, [r4, #6]
    f0f0:	4628      	mov	r0, r5
    f0f2:	f7ff f98c 	bl	e40e <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f0f6:	b930      	cbnz	r0, f106 <cosem_setOctetString+0x3a>
        (ret = bb_set(bb, value->data, (uint16_t)value->size)) != 0)
    f0f8:	88e2      	ldrh	r2, [r4, #6]
    f0fa:	6821      	ldr	r1, [r4, #0]
    f0fc:	4628      	mov	r0, r5
}
    f0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_set(bb, value->data, (uint16_t)value->size)) != 0)
    f102:	f7ff ba6a 	b.w	e5da <bb_set>
}
    f106:	bd38      	pop	{r3, r4, r5, pc}

0000f108 <cosem_setString>:
{
    f108:	b570      	push	{r4, r5, r6, lr}
    if (value == NULL || len == 0)
    f10a:	460e      	mov	r6, r1
{
    f10c:	4604      	mov	r4, r0
    f10e:	4615      	mov	r5, r2
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    f110:	210a      	movs	r1, #10
    if (value == NULL || len == 0)
    f112:	b106      	cbz	r6, f116 <cosem_setString+0xe>
    f114:	b94a      	cbnz	r2, f12a <cosem_setString+0x22>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    f116:	4620      	mov	r0, r4
    f118:	f7ff f979 	bl	e40e <bb_setUInt8>
    f11c:	b9a0      	cbnz	r0, f148 <cosem_setString+0x40>
            (ret = bb_setUInt8(bb, 0)) != 0)
    f11e:	4601      	mov	r1, r0
    f120:	4620      	mov	r0, r4
}
    f122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    f126:	f7ff b972 	b.w	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    f12a:	f7ff f970 	bl	e40e <bb_setUInt8>
    f12e:	b958      	cbnz	r0, f148 <cosem_setString+0x40>
            (ret = hlp_setObjectCount(len, bb)) != 0 ||
    f130:	4621      	mov	r1, r4
    f132:	4628      	mov	r0, r5
    f134:	f00c fa67 	bl	1b606 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRING)) != 0 ||
    f138:	b930      	cbnz	r0, f148 <cosem_setString+0x40>
            (ret = bb_set(bb, (unsigned char*)value, len)) != 0)
    f13a:	462a      	mov	r2, r5
    f13c:	4631      	mov	r1, r6
    f13e:	4620      	mov	r0, r4
}
    f140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_set(bb, (unsigned char*)value, len)) != 0)
    f144:	f7ff ba49 	b.w	e5da <bb_set>
}
    f148:	bd70      	pop	{r4, r5, r6, pc}

0000f14a <cosem_setDateTime>:
{
    f14a:	b538      	push	{r3, r4, r5, lr}
    f14c:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_DATETIME)) != 0 ||
    f14e:	2119      	movs	r1, #25
{
    f150:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_DATETIME)) != 0 ||
    f152:	f7ff f95c 	bl	e40e <bb_setUInt8>
    f156:	b928      	cbnz	r0, f164 <cosem_setDateTime+0x1a>
        (ret = var_getDateTime2(value, bb)) != 0)
    f158:	4629      	mov	r1, r5
    f15a:	4620      	mov	r0, r4
}
    f15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = var_getDateTime2(value, bb)) != 0)
    f160:	f7f5 b978 	b.w	4454 <var_getDateTime2>
}
    f164:	bd38      	pop	{r3, r4, r5, pc}

0000f166 <cosem_setOctetString2>:
{
    f166:	b570      	push	{r4, r5, r6, lr}
    if (value == NULL || size == 0)
    f168:	460e      	mov	r6, r1
{
    f16a:	4604      	mov	r4, r0
    f16c:	4615      	mov	r5, r2
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f16e:	2109      	movs	r1, #9
    if (value == NULL || size == 0)
    f170:	b106      	cbz	r6, f174 <cosem_setOctetString2+0xe>
    f172:	b94a      	cbnz	r2, f188 <cosem_setOctetString2+0x22>
        if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f174:	4620      	mov	r0, r4
    f176:	f7ff f94a 	bl	e40e <bb_setUInt8>
    f17a:	b9a0      	cbnz	r0, f1a6 <cosem_setOctetString2+0x40>
            (ret = bb_setUInt8(bb, 0)) != 0)
    f17c:	4601      	mov	r1, r0
    f17e:	4620      	mov	r0, r4
}
    f180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            (ret = bb_setUInt8(bb, 0)) != 0)
    f184:	f7ff b943 	b.w	e40e <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f188:	f7ff f941 	bl	e40e <bb_setUInt8>
    f18c:	b958      	cbnz	r0, f1a6 <cosem_setOctetString2+0x40>
        (ret = bb_setUInt8(bb, (unsigned char)size)) != 0 ||
    f18e:	b2e9      	uxtb	r1, r5
    f190:	4620      	mov	r0, r4
    f192:	f7ff f93c 	bl	e40e <bb_setUInt8>
    else if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
    f196:	b930      	cbnz	r0, f1a6 <cosem_setOctetString2+0x40>
        (ret = bb_set(bb, value, size)) != 0)
    f198:	462a      	mov	r2, r5
    f19a:	4631      	mov	r1, r6
    f19c:	4620      	mov	r0, r4
}
    f19e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (ret = bb_set(bb, value, size)) != 0)
    f1a2:	f7ff ba1a 	b.w	e5da <bb_set>
}
    f1a6:	bd70      	pop	{r4, r5, r6, pc}

0000f1a8 <cosem_setUInt8>:
{
    f1a8:	b538      	push	{r3, r4, r5, lr}
    f1aa:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT8)) != 0 ||
    f1ac:	2111      	movs	r1, #17
{
    f1ae:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT8)) != 0 ||
    f1b0:	f7ff f92d 	bl	e40e <bb_setUInt8>
    f1b4:	b928      	cbnz	r0, f1c2 <cosem_setUInt8+0x1a>
        (ret = bb_setUInt8(bb, value)) != 0)
    f1b6:	4629      	mov	r1, r5
    f1b8:	4620      	mov	r0, r4
}
    f1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt8(bb, value)) != 0)
    f1be:	f7ff b926 	b.w	e40e <bb_setUInt8>
}
    f1c2:	bd38      	pop	{r3, r4, r5, pc}

0000f1c4 <cosem_setUInt16>:
{
    f1c4:	b538      	push	{r3, r4, r5, lr}
    f1c6:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT16)) != 0 ||
    f1c8:	2112      	movs	r1, #18
{
    f1ca:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT16)) != 0 ||
    f1cc:	f7ff f91f 	bl	e40e <bb_setUInt8>
    f1d0:	b928      	cbnz	r0, f1de <cosem_setUInt16+0x1a>
        (ret = bb_setUInt16(bb, value)) != 0)
    f1d2:	4629      	mov	r1, r5
    f1d4:	4620      	mov	r0, r4
}
    f1d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt16(bb, value)) != 0)
    f1da:	f7ff b93a 	b.w	e452 <bb_setUInt16>
}
    f1de:	bd38      	pop	{r3, r4, r5, pc}

0000f1e0 <cosem_setUInt32>:
{
    f1e0:	b538      	push	{r3, r4, r5, lr}
    f1e2:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT32)) != 0 ||
    f1e4:	2106      	movs	r1, #6
{
    f1e6:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_UINT32)) != 0 ||
    f1e8:	f7ff f911 	bl	e40e <bb_setUInt8>
    f1ec:	b928      	cbnz	r0, f1fa <cosem_setUInt32+0x1a>
        (ret = bb_setUInt32(bb, value)) != 0)
    f1ee:	4629      	mov	r1, r5
    f1f0:	4620      	mov	r0, r4
}
    f1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setUInt32(bb, value)) != 0)
    f1f6:	f7ff b94e 	b.w	e496 <bb_setUInt32>
}
    f1fa:	bd38      	pop	{r3, r4, r5, pc}

0000f1fc <cosem_setInt8>:
{
    f1fc:	b538      	push	{r3, r4, r5, lr}
    f1fe:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT8)) != 0 ||
    f200:	210f      	movs	r1, #15
{
    f202:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT8)) != 0 ||
    f204:	f7ff f903 	bl	e40e <bb_setUInt8>
    f208:	b928      	cbnz	r0, f216 <cosem_setInt8+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    f20a:	4629      	mov	r1, r5
    f20c:	4620      	mov	r0, r4
}
    f20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    f212:	f7ff b9d9 	b.w	e5c8 <bb_setInt8>
}
    f216:	bd38      	pop	{r3, r4, r5, pc}

0000f218 <cosem_setInt16>:
{
    f218:	b538      	push	{r3, r4, r5, lr}
    f21a:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT16)) != 0 ||
    f21c:	2110      	movs	r1, #16
{
    f21e:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT16)) != 0 ||
    f220:	f7ff f8f5 	bl	e40e <bb_setUInt8>
    f224:	b928      	cbnz	r0, f232 <cosem_setInt16+0x1a>
        (ret = bb_setInt16(bb, value)) != 0)
    f226:	4629      	mov	r1, r5
    f228:	4620      	mov	r0, r4
}
    f22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt16(bb, value)) != 0)
    f22e:	f7ff b9cd 	b.w	e5cc <bb_setInt16>
}
    f232:	bd38      	pop	{r3, r4, r5, pc}

0000f234 <cosem_setInt32>:
{
    f234:	b538      	push	{r3, r4, r5, lr}
    f236:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT32)) != 0 ||
    f238:	2105      	movs	r1, #5
{
    f23a:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_INT32)) != 0 ||
    f23c:	f7ff f8e7 	bl	e40e <bb_setUInt8>
    f240:	b928      	cbnz	r0, f24e <cosem_setInt32+0x1a>
        (ret = bb_setInt32(bb, value)) != 0)
    f242:	4629      	mov	r1, r5
    f244:	4620      	mov	r0, r4
}
    f246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt32(bb, value)) != 0)
    f24a:	f7ff b9c2 	b.w	e5d2 <bb_setInt32>
}
    f24e:	bd38      	pop	{r3, r4, r5, pc}

0000f250 <cosem_setVariant>:
{
    f250:	460a      	mov	r2, r1
    if (value->vt == DLMS_DATA_TYPE_NONE)
    f252:	7809      	ldrb	r1, [r1, #0]
    f254:	b909      	cbnz	r1, f25a <cosem_setVariant+0xa>
        return bb_setUInt8(bb, 0);
    f256:	f7ff b8da 	b.w	e40e <bb_setUInt8>
    return dlms_setData(bb, value->vt, value);
    f25a:	f000 ba03 	b.w	f664 <dlms_setData>

0000f25e <cosem_setStructure>:
{
    f25e:	b538      	push	{r3, r4, r5, lr}
    f260:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    f262:	2102      	movs	r1, #2
{
    f264:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
    f266:	f7ff f8d2 	bl	e40e <bb_setUInt8>
    f26a:	b928      	cbnz	r0, f278 <cosem_setStructure+0x1a>
        (ret = hlp_setObjectCount(count, bb)) != 0)
    f26c:	4629      	mov	r1, r5
    f26e:	4620      	mov	r0, r4
}
    f270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = hlp_setObjectCount(count, bb)) != 0)
    f274:	f00c b9c7 	b.w	1b606 <hlp_setObjectCount>
}
    f278:	bd38      	pop	{r3, r4, r5, pc}

0000f27a <cosem_setArray>:
{
    f27a:	b538      	push	{r3, r4, r5, lr}
    f27c:	460c      	mov	r4, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f27e:	2101      	movs	r1, #1
{
    f280:	4605      	mov	r5, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ARRAY)) != 0 ||
    f282:	f7ff f8c4 	bl	e40e <bb_setUInt8>
    f286:	b928      	cbnz	r0, f294 <cosem_setArray+0x1a>
        (ret = hlp_setObjectCount(count, bb)) != 0)
    f288:	4629      	mov	r1, r5
    f28a:	4620      	mov	r0, r4
}
    f28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = hlp_setObjectCount(count, bb)) != 0)
    f290:	f00c b9b9 	b.w	1b606 <hlp_setObjectCount>
}
    f294:	bd38      	pop	{r3, r4, r5, pc}

0000f296 <cosem_setEnum>:
{
    f296:	b538      	push	{r3, r4, r5, lr}
    f298:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ENUM)) != 0 ||
    f29a:	2116      	movs	r1, #22
{
    f29c:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_ENUM)) != 0 ||
    f29e:	f7ff f8b6 	bl	e40e <bb_setUInt8>
    f2a2:	b928      	cbnz	r0, f2b0 <cosem_setEnum+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    f2a4:	4629      	mov	r1, r5
    f2a6:	4620      	mov	r0, r4
}
    f2a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    f2ac:	f7ff b98c 	b.w	e5c8 <bb_setInt8>
}
    f2b0:	bd38      	pop	{r3, r4, r5, pc}

0000f2b2 <cosem_setBoolean>:
{
    f2b2:	b538      	push	{r3, r4, r5, lr}
    f2b4:	460d      	mov	r5, r1
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
    f2b6:	2103      	movs	r1, #3
{
    f2b8:	4604      	mov	r4, r0
    if ((ret = bb_setUInt8(bb, DLMS_DATA_TYPE_BOOLEAN)) != 0 ||
    f2ba:	f7ff f8a8 	bl	e40e <bb_setUInt8>
    f2be:	b928      	cbnz	r0, f2cc <cosem_setBoolean+0x1a>
        (ret = bb_setInt8(bb, value)) != 0)
    f2c0:	4629      	mov	r1, r5
    f2c2:	4620      	mov	r0, r4
}
    f2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = bb_setInt8(bb, value)) != 0)
    f2c8:	f7ff b97e 	b.w	e5c8 <bb_setInt8>
}
    f2cc:	bd38      	pop	{r3, r4, r5, pc}

0000f2ce <getSelectedColumns>:
{
    f2ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2d2:	4607      	mov	r7, r0
    f2d4:	b087      	sub	sp, #28
    f2d6:	460e      	mov	r6, r1
    f2d8:	4690      	mov	r8, r2
    for (pos = 0; pos != cols->size; ++pos)
    f2da:	2500      	movs	r5, #0
    f2dc:	88f2      	ldrh	r2, [r6, #6]
    f2de:	b2ab      	uxth	r3, r5
    f2e0:	429a      	cmp	r2, r3
    f2e2:	d006      	beq.n	f2f2 <getSelectedColumns+0x24>
        if ((ret = va_getByIndex(cols, pos, &it)) != 0 ||
    f2e4:	b2a9      	uxth	r1, r5
    f2e6:	aa04      	add	r2, sp, #16
    f2e8:	4630      	mov	r0, r6
    f2ea:	f00c fec2 	bl	1c072 <va_getByIndex>
    f2ee:	4601      	mov	r1, r0
    f2f0:	b118      	cbz	r0, f2fa <getSelectedColumns+0x2c>
    return 0;
    f2f2:	2000      	movs	r0, #0
}
    f2f4:	b007      	add	sp, #28
    f2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (ret = va_getByIndex(it->Arr, 0, &it2)) != 0)
    f2fa:	9b04      	ldr	r3, [sp, #16]
    f2fc:	aa05      	add	r2, sp, #20
    f2fe:	6898      	ldr	r0, [r3, #8]
    f300:	f00c feb7 	bl	1c072 <va_getByIndex>
        if ((ret = va_getByIndex(cols, pos, &it)) != 0 ||
    f304:	2800      	cmp	r0, #0
    f306:	d1f4      	bne.n	f2f2 <getSelectedColumns+0x24>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(it2);
    f308:	9805      	ldr	r0, [sp, #20]
    f30a:	f00d f82c 	bl	1c366 <var_toInteger>
    f30e:	b283      	uxth	r3, r0
    f310:	9301      	str	r3, [sp, #4]
        if ((ret = va_getByIndex(it->Arr, 1, &it2)) != 0)
    f312:	9b04      	ldr	r3, [sp, #16]
    f314:	aa05      	add	r2, sp, #20
    f316:	6898      	ldr	r0, [r3, #8]
    f318:	2101      	movs	r1, #1
    f31a:	f00c feaa 	bl	1c072 <va_getByIndex>
    f31e:	2800      	cmp	r0, #0
    f320:	d1e7      	bne.n	f2f2 <getSelectedColumns+0x24>
        ln = it2->byteArr->data;
    f322:	9b05      	ldr	r3, [sp, #20]
    f324:	689b      	ldr	r3, [r3, #8]
    f326:	f8d3 b000 	ldr.w	fp, [r3]
        if ((ret = va_getByIndex(it->Arr, 2, &it2)) != 0)
    f32a:	9b04      	ldr	r3, [sp, #16]
    f32c:	aa05      	add	r2, sp, #20
    f32e:	6898      	ldr	r0, [r3, #8]
    f330:	2102      	movs	r1, #2
    f332:	f00c fe9e 	bl	1c072 <va_getByIndex>
    f336:	2800      	cmp	r0, #0
    f338:	d1db      	bne.n	f2f2 <getSelectedColumns+0x24>
        attributeIndex = (char)var_toInteger(it2);
    f33a:	9805      	ldr	r0, [sp, #20]
    f33c:	f00d f813 	bl	1c366 <var_toInteger>
        if ((ret = va_getByIndex(it->Arr, 3, &it2)) != 0)
    f340:	9b04      	ldr	r3, [sp, #16]
        attributeIndex = (char)var_toInteger(it2);
    f342:	4604      	mov	r4, r0
        if ((ret = va_getByIndex(it->Arr, 3, &it2)) != 0)
    f344:	aa05      	add	r2, sp, #20
    f346:	6898      	ldr	r0, [r3, #8]
    f348:	2103      	movs	r1, #3
    f34a:	f00c fe92 	bl	1c072 <va_getByIndex>
    f34e:	4681      	mov	r9, r0
    f350:	2800      	cmp	r0, #0
    f352:	d1ce      	bne.n	f2f2 <getSelectedColumns+0x24>
        dataIndex = var_toInteger(it2);
    f354:	9805      	ldr	r0, [sp, #20]
    f356:	f00d f806 	bl	1c366 <var_toInteger>
            if (((gxObject*)c->key)->objectType == ot &&
    f35a:	b2e4      	uxtb	r4, r4
        dataIndex = var_toInteger(it2);
    f35c:	4682      	mov	sl, r0
        for (pos2 = 0; pos2 != captureObjects->size; ++pos2)
    f35e:	88fa      	ldrh	r2, [r7, #6]
    f360:	fa1f f189 	uxth.w	r1, r9
    f364:	428a      	cmp	r2, r1
    f366:	d01f      	beq.n	f3a8 <getSelectedColumns+0xda>
            if ((ret = arr_getByIndex(captureObjects, pos2, (void**)&c)) != 0)
    f368:	aa03      	add	r2, sp, #12
    f36a:	4638      	mov	r0, r7
    f36c:	f002 fc15 	bl	11b9a <arr_getByIndex>
    f370:	2800      	cmp	r0, #0
    f372:	d1bf      	bne.n	f2f4 <getSelectedColumns+0x26>
            if (((gxObject*)c->key)->objectType == ot &&
    f374:	9a03      	ldr	r2, [sp, #12]
    f376:	9b01      	ldr	r3, [sp, #4]
    f378:	6810      	ldr	r0, [r2, #0]
    f37a:	8801      	ldrh	r1, [r0, #0]
    f37c:	4299      	cmp	r1, r3
    f37e:	d115      	bne.n	f3ac <getSelectedColumns+0xde>
                ((gxTarget*)c->value)->attributeIndex == attributeIndex &&
    f380:	6852      	ldr	r2, [r2, #4]
    f382:	f992 1000 	ldrsb.w	r1, [r2]
            if (((gxObject*)c->key)->objectType == ot &&
    f386:	42a1      	cmp	r1, r4
    f388:	d110      	bne.n	f3ac <getSelectedColumns+0xde>
                ((gxTarget*)c->value)->dataIndex == dataIndex &&
    f38a:	8852      	ldrh	r2, [r2, #2]
                ((gxTarget*)c->value)->attributeIndex == attributeIndex &&
    f38c:	4552      	cmp	r2, sl
    f38e:	d10d      	bne.n	f3ac <getSelectedColumns+0xde>
                memcmp(((gxObject*)c->key)->logicalName, ln, 6) == 0)
    f390:	2206      	movs	r2, #6
    f392:	4659      	mov	r1, fp
    f394:	4410      	add	r0, r2
    f396:	f00e ff26 	bl	1e1e6 <memcmp>
                ((gxTarget*)c->value)->dataIndex == dataIndex &&
    f39a:	b938      	cbnz	r0, f3ac <getSelectedColumns+0xde>
                if ((ret = arr_push(columns, c)) != 0)
    f39c:	9903      	ldr	r1, [sp, #12]
    f39e:	4640      	mov	r0, r8
    f3a0:	f002 fbbe 	bl	11b20 <arr_push>
    f3a4:	2800      	cmp	r0, #0
    f3a6:	d1a5      	bne.n	f2f4 <getSelectedColumns+0x26>
    for (pos = 0; pos != cols->size; ++pos)
    f3a8:	3501      	adds	r5, #1
    f3aa:	e797      	b.n	f2dc <getSelectedColumns+0xe>
        for (pos2 = 0; pos2 != captureObjects->size; ++pos2)
    f3ac:	f109 0901 	add.w	r9, r9, #1
    f3b0:	e7d5      	b.n	f35e <getSelectedColumns+0x90>

0000f3b2 <cosem_getColumns>:
{
    f3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f3b4:	4617      	mov	r7, r2
    f3b6:	4604      	mov	r4, r0
    arr_empty(columns);
    f3b8:	4618      	mov	r0, r3
{
    f3ba:	461d      	mov	r5, r3
    f3bc:	460e      	mov	r6, r1
    arr_empty(columns);
    f3be:	f002 fbdf 	bl	11b80 <arr_empty>
    if (parameters->vt == DLMS_DATA_TYPE_STRUCTURE)
    f3c2:	783b      	ldrb	r3, [r7, #0]
    f3c4:	2b02      	cmp	r3, #2
    f3c6:	d002      	beq.n	f3ce <cosem_getColumns+0x1c>
    int ret = 0;
    f3c8:	2000      	movs	r0, #0
}
    f3ca:	b003      	add	sp, #12
    f3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (selector == 1) //Read by range
    f3ce:	2e01      	cmp	r6, #1
    f3d0:	d123      	bne.n	f41a <cosem_getColumns+0x68>
            if (parameters->Arr->size > 3)
    f3d2:	68b8      	ldr	r0, [r7, #8]
    f3d4:	88c3      	ldrh	r3, [r0, #6]
    f3d6:	2b03      	cmp	r3, #3
    f3d8:	d812      	bhi.n	f400 <cosem_getColumns+0x4e>
    uint16_t pos, start = 0, count = 0;
    f3da:	2600      	movs	r6, #0
            for (pos = 0; pos != captureObjects->size; ++pos)
    f3dc:	88e3      	ldrh	r3, [r4, #6]
    f3de:	b2b1      	uxth	r1, r6
    f3e0:	428b      	cmp	r3, r1
    f3e2:	d0f1      	beq.n	f3c8 <cosem_getColumns+0x16>
                if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    f3e4:	466a      	mov	r2, sp
    f3e6:	4620      	mov	r0, r4
    f3e8:	f002 fbd7 	bl	11b9a <arr_getByIndex>
    f3ec:	2800      	cmp	r0, #0
    f3ee:	d1ec      	bne.n	f3ca <cosem_getColumns+0x18>
                    (ret = arr_push(columns, k)) != 0)
    f3f0:	9900      	ldr	r1, [sp, #0]
    f3f2:	4628      	mov	r0, r5
    f3f4:	f002 fb94 	bl	11b20 <arr_push>
    f3f8:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    f3fa:	2800      	cmp	r0, #0
    f3fc:	d0ee      	beq.n	f3dc <cosem_getColumns+0x2a>
    f3fe:	e7e4      	b.n	f3ca <cosem_getColumns+0x18>
                if ((ret = va_getByIndex(parameters->Arr, 3, &it)) == 0)
    f400:	aa01      	add	r2, sp, #4
    f402:	2103      	movs	r1, #3
    f404:	f00c fe35 	bl	1c072 <va_getByIndex>
    f408:	2800      	cmp	r0, #0
    f40a:	d1de      	bne.n	f3ca <cosem_getColumns+0x18>
                    ret = getSelectedColumns(captureObjects, it->Arr, columns);
    f40c:	9b01      	ldr	r3, [sp, #4]
    f40e:	462a      	mov	r2, r5
    f410:	6899      	ldr	r1, [r3, #8]
    f412:	4620      	mov	r0, r4
    f414:	f7ff ff5b 	bl	f2ce <getSelectedColumns>
    f418:	e7d7      	b.n	f3ca <cosem_getColumns+0x18>
        else if (selector == 2) //Read by entry.
    f41a:	2e02      	cmp	r6, #2
    f41c:	d1dd      	bne.n	f3da <cosem_getColumns+0x28>
            if (parameters->Arr->size > 2)
    f41e:	68b8      	ldr	r0, [r7, #8]
    f420:	88c3      	ldrh	r3, [r0, #6]
    f422:	2b02      	cmp	r3, #2
    f424:	d91b      	bls.n	f45e <cosem_getColumns+0xac>
                if ((ret = va_getByIndex(parameters->Arr, 2, &it)) != 0)
    f426:	aa01      	add	r2, sp, #4
    f428:	4631      	mov	r1, r6
    f42a:	f00c fe22 	bl	1c072 <va_getByIndex>
    f42e:	2800      	cmp	r0, #0
    f430:	d1cb      	bne.n	f3ca <cosem_getColumns+0x18>
                start = (uint16_t)var_toInteger(it);
    f432:	9801      	ldr	r0, [sp, #4]
    f434:	f00c ff97 	bl	1c366 <var_toInteger>
    f438:	b286      	uxth	r6, r0
            if (parameters->Arr->size > 3)
    f43a:	68b8      	ldr	r0, [r7, #8]
    f43c:	88c3      	ldrh	r3, [r0, #6]
    f43e:	2b03      	cmp	r3, #3
    f440:	d90f      	bls.n	f462 <cosem_getColumns+0xb0>
                if ((ret = va_getByIndex(parameters->Arr, 3, &it)) != 0)
    f442:	aa01      	add	r2, sp, #4
    f444:	2103      	movs	r1, #3
    f446:	f00c fe14 	bl	1c072 <va_getByIndex>
    f44a:	2800      	cmp	r0, #0
    f44c:	d1bd      	bne.n	f3ca <cosem_getColumns+0x18>
                count = (uint16_t)var_toInteger(it);
    f44e:	9801      	ldr	r0, [sp, #4]
    f450:	f00c ff89 	bl	1c366 <var_toInteger>
            if (start != 1 || count != 0)
    f454:	2e01      	cmp	r6, #1
                count = (uint16_t)var_toInteger(it);
    f456:	b287      	uxth	r7, r0
            if (start != 1 || count != 0)
    f458:	d106      	bne.n	f468 <cosem_getColumns+0xb6>
    f45a:	b937      	cbnz	r7, f46a <cosem_getColumns+0xb8>
    f45c:	e7bd      	b.n	f3da <cosem_getColumns+0x28>
    uint16_t pos, start = 0, count = 0;
    f45e:	2600      	movs	r6, #0
    f460:	e7eb      	b.n	f43a <cosem_getColumns+0x88>
            else if (start != 1)
    f462:	2e01      	cmp	r6, #1
    f464:	d0b9      	beq.n	f3da <cosem_getColumns+0x28>
    f466:	88e7      	ldrh	r7, [r4, #6]
                if (count == 0)
    f468:	b197      	cbz	r7, f490 <cosem_getColumns+0xde>
                for (pos = start - 1; pos != count; ++pos)
    f46a:	3e01      	subs	r6, #1
    f46c:	b2b6      	uxth	r6, r6
    f46e:	42be      	cmp	r6, r7
    f470:	d0aa      	beq.n	f3c8 <cosem_getColumns+0x16>
                    if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    f472:	466a      	mov	r2, sp
    f474:	4631      	mov	r1, r6
    f476:	4620      	mov	r0, r4
    f478:	f002 fb8f 	bl	11b9a <arr_getByIndex>
    f47c:	2800      	cmp	r0, #0
    f47e:	d1a4      	bne.n	f3ca <cosem_getColumns+0x18>
                        (ret = arr_push(columns, k)) != 0)
    f480:	9900      	ldr	r1, [sp, #0]
    f482:	4628      	mov	r0, r5
    f484:	f002 fb4c 	bl	11b20 <arr_push>
                    if ((ret = arr_getByIndex(captureObjects, pos, (void**)&k)) != 0 ||
    f488:	2800      	cmp	r0, #0
    f48a:	d19e      	bne.n	f3ca <cosem_getColumns+0x18>
                for (pos = start - 1; pos != count; ++pos)
    f48c:	3601      	adds	r6, #1
    f48e:	e7ed      	b.n	f46c <cosem_getColumns+0xba>
                    count = captureObjects->size - start;
    f490:	88e7      	ldrh	r7, [r4, #6]
    f492:	1bbf      	subs	r7, r7, r6
    f494:	b2bf      	uxth	r7, r7
    f496:	e7e8      	b.n	f46a <cosem_getColumns+0xb8>

0000f498 <di_init>:

#include "../include/datainfo.h"

void di_init(gxDataInfo *info)
{
    info->index = 0;
    f498:	2300      	movs	r3, #0
    f49a:	8003      	strh	r3, [r0, #0]
    info->count = 0;
    f49c:	8043      	strh	r3, [r0, #2]
    info->type = DLMS_DATA_TYPE_NONE;
    f49e:	f44f 7380 	mov.w	r3, #256	; 0x100
    f4a2:	8083      	strh	r3, [r0, #4]
#ifdef DLMS_ITALIAN_STANDARD
        //Some meters require that there is a array count in data.
    info->appendAA = 0;
#endif //DLMS_ITALIAN_STANDARD

}
    f4a4:	4770      	bx	lr

0000f4a6 <time_getYears>:
    return time_getYears2(value->value);
    f4a6:	6800      	ldr	r0, [r0, #0]
    f4a8:	f7f2 bf42 	b.w	2330 <time_getYears2>

0000f4ac <time_getMonths>:
    return time_getMonths2(value->value);
    f4ac:	6800      	ldr	r0, [r0, #0]
    f4ae:	f7f2 bf75 	b.w	239c <time_getMonths2>

0000f4b2 <time_getDays>:
    return time_getDays2(value->value);
    f4b2:	6800      	ldr	r0, [r0, #0]
    f4b4:	f7f2 bfaa 	b.w	240c <time_getDays2>

0000f4b8 <time_getMinutes>:
    return (unsigned char)((value->value % 3600L) / 60L);
    f4b8:	6802      	ldr	r2, [r0, #0]
    f4ba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    f4be:	fbb2 f0f3 	udiv	r0, r2, r3
    f4c2:	fb03 2010 	mls	r0, r3, r0, r2
    f4c6:	233c      	movs	r3, #60	; 0x3c
    f4c8:	fbb0 f0f3 	udiv	r0, r0, r3
}
    f4cc:	b2c0      	uxtb	r0, r0
    f4ce:	4770      	bx	lr

0000f4d0 <time_getSeconds>:
    return (unsigned char)(value->value % 60);
    f4d0:	6802      	ldr	r2, [r0, #0]
    f4d2:	233c      	movs	r3, #60	; 0x3c
    f4d4:	fbb2 f0f3 	udiv	r0, r2, r3
    f4d8:	fb03 2010 	mls	r0, r3, r0, r2
}
    f4dc:	b2c0      	uxtb	r0, r0
    f4de:	4770      	bx	lr

0000f4e0 <time_addHours>:
    value->value += seconds;
    f4e0:	6803      	ldr	r3, [r0, #0]
    f4e2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    f4e6:	fb02 3101 	mla	r1, r2, r1, r3
    f4ea:	6001      	str	r1, [r0, #0]
}
    f4ec:	4770      	bx	lr

0000f4ee <time_addMinutes>:
    value->value += seconds;
    f4ee:	6803      	ldr	r3, [r0, #0]
    f4f0:	223c      	movs	r2, #60	; 0x3c
    f4f2:	fb02 3101 	mla	r1, r2, r1, r3
    f4f6:	6001      	str	r1, [r0, #0]
}
    f4f8:	4770      	bx	lr

0000f4fa <time_addSeconds>:
    value->value += seconds;
    f4fa:	6803      	ldr	r3, [r0, #0]
    f4fc:	440b      	add	r3, r1
    f4fe:	6003      	str	r3, [r0, #0]
}
    f500:	4770      	bx	lr

0000f502 <time_initUnix>:
    time->deviation = 0;
    f502:	2300      	movs	r3, #0
    time->value = value;
    f504:	6001      	str	r1, [r0, #0]
    time->deviation = 0;
    f506:	6043      	str	r3, [r0, #4]
    time->extraInfo = 0;
    f508:	8103      	strh	r3, [r0, #8]
}
    f50a:	4770      	bx	lr

0000f50c <time_clear>:
    time->value = 0;
    f50c:	2300      	movs	r3, #0
    f50e:	6003      	str	r3, [r0, #0]
    time->skip = DATETIME_SKIPS_NONE;
    f510:	80c3      	strh	r3, [r0, #6]
    time->extraInfo = 0;
    f512:	8103      	strh	r3, [r0, #8]
}
    f514:	4770      	bx	lr

0000f516 <date_isleap>:
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
    f516:	0783      	lsls	r3, r0, #30
    f518:	d106      	bne.n	f528 <date_isleap+0x12>
    f51a:	2264      	movs	r2, #100	; 0x64
    f51c:	fbb0 f3f2 	udiv	r3, r0, r2
    f520:	fb02 0313 	mls	r3, r2, r3, r0
    f524:	b29b      	uxth	r3, r3
    f526:	b953      	cbnz	r3, f53e <date_isleap+0x28>
    f528:	f44f 72c8 	mov.w	r2, #400	; 0x190
    f52c:	fbb0 f3f2 	udiv	r3, r0, r2
    f530:	fb02 0013 	mls	r0, r2, r3, r0
    f534:	b280      	uxth	r0, r0
    f536:	fab0 f080 	clz	r0, r0
    f53a:	0940      	lsrs	r0, r0, #5
    f53c:	4770      	bx	lr
    f53e:	2001      	movs	r0, #1
}
    f540:	4770      	bx	lr

0000f542 <date_daysInMonth>:
{
    f542:	b508      	push	{r3, lr}
    f544:	290b      	cmp	r1, #11
    f546:	d809      	bhi.n	f55c <date_daysInMonth+0x1a>
    f548:	e8df f001 	tbb	[pc, r1]
    f54c:	060f080f 	.word	0x060f080f
    f550:	0f0f060f 	.word	0x0f0f060f
    f554:	0f060f06 	.word	0x0f060f06
        return 28;
    f558:	201e      	movs	r0, #30
}
    f55a:	bd08      	pop	{r3, pc}
        if (date_isleap(year))
    f55c:	f7ff ffdb 	bl	f516 <date_isleap>
    f560:	2800      	cmp	r0, #0
            return 29;
    f562:	bf0c      	ite	eq
    f564:	201c      	moveq	r0, #28
    f566:	201d      	movne	r0, #29
    f568:	e7f7      	b.n	f55a <date_daysInMonth+0x18>
        return 31;
    f56a:	201f      	movs	r0, #31
    f56c:	e7f5      	b.n	f55a <date_daysInMonth+0x18>

0000f56e <time_copy>:
    trg->extraInfo = src->extraInfo;
    f56e:	7a0b      	ldrb	r3, [r1, #8]
    f570:	7203      	strb	r3, [r0, #8]
    trg->skip = src->skip;
    f572:	88cb      	ldrh	r3, [r1, #6]
    f574:	80c3      	strh	r3, [r0, #6]
    trg->status = src->status;
    f576:	7a4b      	ldrb	r3, [r1, #9]
    f578:	7243      	strb	r3, [r0, #9]
    trg->value = src->value;
    f57a:	680b      	ldr	r3, [r1, #0]
    f57c:	6003      	str	r3, [r0, #0]
    trg->deviation = src->deviation;
    f57e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    f582:	8083      	strh	r3, [r0, #4]
}
    f584:	4770      	bx	lr

0000f586 <time_dayOfWeek>:
    if (month <= 2)
    f586:	2902      	cmp	r1, #2
        year -= 1;
    f588:	bf9c      	itt	ls
    f58a:	f100 30ff 	addls.w	r0, r0, #4294967295
    f58e:	b280      	uxthls	r0, r0
{
    f590:	b530      	push	{r4, r5, lr}
    k = year % 100;
    f592:	f04f 0464 	mov.w	r4, #100	; 0x64
    f596:	fbb0 f5f4 	udiv	r5, r0, r4
    f59a:	fb04 0415 	mls	r4, r4, r5, r0
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    f59e:	f44f 73c8 	mov.w	r3, #400	; 0x190
    f5a2:	fbb0 f3f3 	udiv	r3, r0, r3
    f5a6:	fa13 f384 	uxtah	r3, r3, r4
    f5aa:	441a      	add	r2, r3
    f5ac:	f3c4 008d 	ubfx	r0, r4, #2, #14
        month += 12;
    f5b0:	bf98      	it	ls
    f5b2:	310c      	addls	r1, #12
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    f5b4:	4410      	add	r0, r2
    f5b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
        month += 12;
    f5ba:	bf98      	it	ls
    f5bc:	b2c9      	uxtbls	r1, r1
    h = day + (26 * (month + 1) / 10) + k + (k / 4) + (5 * j) + (j / 4);
    f5be:	4428      	add	r0, r5
    f5c0:	231a      	movs	r3, #26
    f5c2:	fb01 3103 	mla	r1, r1, r3, r3
    f5c6:	230a      	movs	r3, #10
    f5c8:	fbb1 f1f3 	udiv	r1, r1, r3
    f5cc:	4408      	add	r0, r1
    return ((h + 5) % 7) + 1;
    f5ce:	b200      	sxth	r0, r0
    f5d0:	3005      	adds	r0, #5
    f5d2:	2307      	movs	r3, #7
    f5d4:	fbb0 f3f3 	udiv	r3, r0, r3
    f5d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    f5dc:	1ac0      	subs	r0, r0, r3
    f5de:	3001      	adds	r0, #1
}
    f5e0:	b2c0      	uxtb	r0, r0
    f5e2:	bd30      	pop	{r4, r5, pc}

0000f5e4 <time_compare>:
{
    f5e4:	b510      	push	{r4, lr}
    f5e6:	4604      	mov	r4, r0
    return time_compareWithDiff(value1, time_toUnixTime2(value2), value1->deviation);
    f5e8:	4608      	mov	r0, r1
    f5ea:	f7f3 f915 	bl	2818 <time_toUnixTime2>
    f5ee:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    f5f2:	4601      	mov	r1, r0
    f5f4:	4620      	mov	r0, r4
}
    f5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return time_compareWithDiff(value1, time_toUnixTime2(value2), value1->deviation);
    f5fa:	f7f3 b933 	b.w	2864 <time_compareWithDiff>

0000f5fe <time_toUTC>:
}

int time_toUTC(gxtime* value)
{
    //Convert time to UCT if time zone is given.
    if (value->deviation != 0 && value->deviation != (short)0x8000)
    f5fe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    f602:	f3c3 020e 	ubfx	r2, r3, #0, #15
    f606:	b152      	cbz	r2, f61e <time_toUTC+0x20>
    value->value += seconds;
    f608:	6802      	ldr	r2, [r0, #0]
    f60a:	213c      	movs	r1, #60	; 0x3c
    f60c:	fb13 2301 	smlabb	r3, r3, r1, r2
    f610:	6003      	str	r3, [r0, #0]
    {
        time_addMinutes(value, time_getDeviation(value));
        value->deviation = 0;
    f612:	2300      	movs	r3, #0
    f614:	8083      	strh	r3, [r0, #4]
        //DST deviation is included to deviation. Remove status.
        value->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
    f616:	7a43      	ldrb	r3, [r0, #9]
    f618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f61c:	7243      	strb	r3, [r0, #9]
    }
    return 0;
}
    f61e:	2000      	movs	r0, #0
    f620:	4770      	bx	lr

0000f622 <dlms_useHdlc>:
        type == DLMS_INTERFACE_TYPE_HDLC_WITH_MODE_E ||
    f622:	f010 0ffb 	tst.w	r0, #251	; 0xfb
    f626:	d003      	beq.n	f630 <dlms_useHdlc+0xe>
    f628:	1f83      	subs	r3, r0, #6
    f62a:	4258      	negs	r0, r3
    f62c:	4158      	adcs	r0, r3
    f62e:	4770      	bx	lr
    f630:	2001      	movs	r0, #1
}
    f632:	4770      	bx	lr

0000f634 <dlms_getInvokeIDPriority>:
    if (settings->priority == DLMS_PRIORITY_HIGH)
    f634:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
        value |= 0x80;
    f638:	2b01      	cmp	r3, #1
    if (settings->serviceClass == DLMS_SERVICE_CLASS_CONFIRMED)
    f63a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
        value |= 0x80;
    f63e:	bf0c      	ite	eq
    f640:	2280      	moveq	r2, #128	; 0x80
    f642:	2200      	movne	r2, #0
    if (settings->serviceClass == DLMS_SERVICE_CLASS_CONFIRMED)
    f644:	2b01      	cmp	r3, #1
        value |= 0x40;
    f646:	bf08      	it	eq
    f648:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    if (increase)
    f64c:	b131      	cbz	r1, f65c <dlms_getInvokeIDPriority+0x28>
        settings->invokeID = (unsigned char)((1 + settings->invokeID) & 0xF);
    f64e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    f652:	3301      	adds	r3, #1
    f654:	f003 030f 	and.w	r3, r3, #15
    f658:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    value |= settings->invokeID;
    f65c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
}
    f660:	4310      	orrs	r0, r2
    f662:	4770      	bx	lr

0000f664 <dlms_setData>:
{
    f664:	b570      	push	{r4, r5, r6, lr}
    f666:	4606      	mov	r6, r0
    ret = var_changeType(value, type);
    f668:	4610      	mov	r0, r2
{
    f66a:	460d      	mov	r5, r1
    f66c:	4614      	mov	r4, r2
    ret = var_changeType(value, type);
    f66e:	f7f5 fa4f 	bl	4b10 <var_changeType>
    if (ret != DLMS_ERROR_CODE_OK)
    f672:	b930      	cbnz	r0, f682 <dlms_setData+0x1e>
    return var_getBytes2(value, type, buff);
    f674:	4632      	mov	r2, r6
    f676:	4629      	mov	r1, r5
    f678:	4620      	mov	r0, r4
}
    f67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return var_getBytes2(value, type, buff);
    f67e:	f00c be35 	b.w	1c2ec <var_getBytes2>
}
    f682:	bd70      	pop	{r4, r5, r6, pc}

0000f684 <getCount>:
{
    f684:	b570      	push	{r4, r5, r6, lr}
    f686:	460e      	mov	r6, r1
    if (hlp_getObjectCount2(buff, &info->count) != 0)
    f688:	3102      	adds	r1, #2
{
    f68a:	4615      	mov	r5, r2
    if (hlp_getObjectCount2(buff, &info->count) != 0)
    f68c:	f00b ff8a 	bl	1b5a4 <hlp_getObjectCount2>
    f690:	4604      	mov	r4, r0
    f692:	b118      	cbz	r0, f69c <getCount+0x18>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    f694:	f44f 7482 	mov.w	r4, #260	; 0x104
}
    f698:	4620      	mov	r0, r4
    f69a:	bd70      	pop	{r4, r5, r6, pc}
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    f69c:	2008      	movs	r0, #8
    f69e:	f7fd fe29 	bl	d2f4 <malloc>
    f6a2:	60a8      	str	r0, [r5, #8]
    if (value->Arr == NULL)
    f6a4:	2800      	cmp	r0, #0
    f6a6:	d0f5      	beq.n	f694 <getCount+0x10>
    va_init(value->Arr);
    f6a8:	f00c fbeb 	bl	1be82 <va_init>
    va_capacity(value->Arr, info->count);
    f6ac:	8871      	ldrh	r1, [r6, #2]
    f6ae:	68a8      	ldr	r0, [r5, #8]
    f6b0:	f00c fbeb 	bl	1be8a <va_capacity>
    value->vt = DLMS_DATA_TYPE_ARRAY;
    f6b4:	2301      	movs	r3, #1
    f6b6:	702b      	strb	r3, [r5, #0]
    return 0;
    f6b8:	e7ee      	b.n	f698 <getCount+0x14>

0000f6ba <getUInt32>:
{
    f6ba:	b410      	push	{r4}
    f6bc:	460b      	mov	r3, r1
    if (buff->size - buff->position < 4)
    f6be:	8904      	ldrh	r4, [r0, #8]
{
    f6c0:	4611      	mov	r1, r2
    if (buff->size - buff->position < 4)
    f6c2:	88c2      	ldrh	r2, [r0, #6]
    f6c4:	1b12      	subs	r2, r2, r4
    f6c6:	2a03      	cmp	r2, #3
    f6c8:	dc03      	bgt.n	f6d2 <getUInt32+0x18>
        info->complete = 0;
    f6ca:	2000      	movs	r0, #0
    f6cc:	7158      	strb	r0, [r3, #5]
}
    f6ce:	bc10      	pop	{r4}
    f6d0:	4770      	bx	lr
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f6d2:	f991 3000 	ldrsb.w	r3, [r1]
    f6d6:	2b00      	cmp	r3, #0
    f6d8:	db05      	blt.n	f6e6 <getUInt32+0x2c>
        value->vt = DLMS_DATA_TYPE_UINT32;
    f6da:	2306      	movs	r3, #6
    f6dc:	f801 3b08 	strb.w	r3, [r1], #8
}
    f6e0:	bc10      	pop	{r4}
    if ((ret = bb_getUInt32(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->ulVal : value->pulVal)) != 0)
    f6e2:	f7ff b842 	b.w	e76a <bb_getUInt32>
    f6e6:	6889      	ldr	r1, [r1, #8]
    f6e8:	e7fa      	b.n	f6e0 <getUInt32+0x26>

0000f6ea <getInt32>:
{
    f6ea:	b410      	push	{r4}
    f6ec:	460b      	mov	r3, r1
    if (buff->size - buff->position < 4)
    f6ee:	8904      	ldrh	r4, [r0, #8]
{
    f6f0:	4611      	mov	r1, r2
    if (buff->size - buff->position < 4)
    f6f2:	88c2      	ldrh	r2, [r0, #6]
    f6f4:	1b12      	subs	r2, r2, r4
    f6f6:	2a03      	cmp	r2, #3
    f6f8:	dc03      	bgt.n	f702 <getInt32+0x18>
        info->complete = 0;
    f6fa:	2000      	movs	r0, #0
    f6fc:	7158      	strb	r0, [r3, #5]
}
    f6fe:	bc10      	pop	{r4}
    f700:	4770      	bx	lr
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f702:	f991 3000 	ldrsb.w	r3, [r1]
    f706:	2b00      	cmp	r3, #0
    f708:	db05      	blt.n	f716 <getInt32+0x2c>
        value->vt = DLMS_DATA_TYPE_INT32;
    f70a:	2305      	movs	r3, #5
    f70c:	f801 3b08 	strb.w	r3, [r1], #8
}
    f710:	bc10      	pop	{r4}
    if ((ret = bb_getInt32(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->lVal : value->plVal)) != 0)
    f712:	f7ff b890 	b.w	e836 <bb_getInt32>
    f716:	6889      	ldr	r1, [r1, #8]
    f718:	e7fa      	b.n	f710 <getInt32+0x26>

0000f71a <getString>:
{
    f71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f71c:	461d      	mov	r5, r3
    uint16_t len = 0;
    f71e:	2300      	movs	r3, #0
{
    f720:	4604      	mov	r4, r0
    f722:	460e      	mov	r6, r1
    uint16_t len = 0;
    f724:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (knownType)
    f728:	b1aa      	cbz	r2, f756 <getString+0x3c>
        len = (uint16_t)buff->size;
    f72a:	88c3      	ldrh	r3, [r0, #6]
    f72c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len > 0)
    f730:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    value->vt = DLMS_DATA_TYPE_STRING;
    f734:	230a      	movs	r3, #10
    f736:	702b      	strb	r3, [r5, #0]
    if (len > 0)
    f738:	b1d0      	cbz	r0, f770 <getString+0x56>
        value->strVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    f73a:	200c      	movs	r0, #12
    f73c:	f7fd fdda 	bl	d2f4 <malloc>
    f740:	60a8      	str	r0, [r5, #8]
        BYTE_BUFFER_INIT(value->strVal);
    f742:	f7fe fdfb 	bl	e33c <bb_init>
        ret = bb_set2(value->strVal, buff, buff->position, len);
    f746:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f74a:	8922      	ldrh	r2, [r4, #8]
    f74c:	68a8      	ldr	r0, [r5, #8]
    f74e:	4621      	mov	r1, r4
    f750:	f7fe ff72 	bl	e638 <bb_set2>
    f754:	e00c      	b.n	f770 <getString+0x56>
        if (hlp_getObjectCount2(buff, &len) != 0)
    f756:	f10d 0106 	add.w	r1, sp, #6
    f75a:	f00b ff23 	bl	1b5a4 <hlp_getObjectCount2>
    f75e:	b948      	cbnz	r0, f774 <getString+0x5a>
        if (buff->size - buff->position < (uint16_t)len)
    f760:	8922      	ldrh	r2, [r4, #8]
    f762:	88e3      	ldrh	r3, [r4, #6]
    f764:	1a9b      	subs	r3, r3, r2
    f766:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f76a:	4293      	cmp	r3, r2
    f76c:	dae0      	bge.n	f730 <getString+0x16>
            info->complete = 0;
    f76e:	7170      	strb	r0, [r6, #5]
}
    f770:	b002      	add	sp, #8
    f772:	bd70      	pop	{r4, r5, r6, pc}
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    f774:	f44f 7082 	mov.w	r0, #260	; 0x104
    f778:	e7fa      	b.n	f770 <getString+0x56>

0000f77a <getUtfString>:
{
    f77a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f77c:	461d      	mov	r5, r3
    f77e:	4604      	mov	r4, r0
    f780:	4617      	mov	r7, r2
    uint16_t len = 0;
    f782:	2300      	movs	r3, #0
    var_clear(value);
    f784:	4628      	mov	r0, r5
{
    f786:	460e      	mov	r6, r1
    uint16_t len = 0;
    f788:	f8ad 3006 	strh.w	r3, [sp, #6]
    var_clear(value);
    f78c:	f00c fbf3 	bl	1bf76 <var_clear>
    if (knownType)
    f790:	b1af      	cbz	r7, f7be <getUtfString+0x44>
        len = (uint16_t)buff->size;
    f792:	88e3      	ldrh	r3, [r4, #6]
    f794:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len > 0)
    f798:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    f79c:	b308      	cbz	r0, f7e2 <getUtfString+0x68>
        value->strUtfVal = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
    f79e:	200c      	movs	r0, #12
    f7a0:	f7fd fda8 	bl	d2f4 <malloc>
    f7a4:	60a8      	str	r0, [r5, #8]
        BYTE_BUFFER_INIT(value->strUtfVal);
    f7a6:	f7fe fdc9 	bl	e33c <bb_init>
        ret = bb_set2(value->strUtfVal, buff, buff->position, len);
    f7aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f7ae:	8922      	ldrh	r2, [r4, #8]
    f7b0:	68a8      	ldr	r0, [r5, #8]
    f7b2:	4621      	mov	r1, r4
    f7b4:	f7fe ff40 	bl	e638 <bb_set2>
        value->vt = DLMS_DATA_TYPE_STRING_UTF8;
    f7b8:	230c      	movs	r3, #12
    f7ba:	702b      	strb	r3, [r5, #0]
    f7bc:	e00f      	b.n	f7de <getUtfString+0x64>
        if (hlp_getObjectCount2(buff, &len) != 0)
    f7be:	f10d 0106 	add.w	r1, sp, #6
    f7c2:	4620      	mov	r0, r4
    f7c4:	f00b feee 	bl	1b5a4 <hlp_getObjectCount2>
    f7c8:	b968      	cbnz	r0, f7e6 <getUtfString+0x6c>
        if (buff->size - buff->position < (uint16_t)(2 * len))
    f7ca:	8923      	ldrh	r3, [r4, #8]
    f7cc:	88e2      	ldrh	r2, [r4, #6]
    f7ce:	1ad2      	subs	r2, r2, r3
    f7d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f7d4:	005b      	lsls	r3, r3, #1
    f7d6:	b29b      	uxth	r3, r3
    f7d8:	429a      	cmp	r2, r3
    f7da:	dadd      	bge.n	f798 <getUtfString+0x1e>
            info->complete = 0;
    f7dc:	7170      	strb	r0, [r6, #5]
}
    f7de:	b003      	add	sp, #12
    f7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        value->strUtfVal = NULL;
    f7e2:	60a8      	str	r0, [r5, #8]
    f7e4:	e7fb      	b.n	f7de <getUtfString+0x64>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    f7e6:	f44f 7082 	mov.w	r0, #260	; 0x104
    f7ea:	e7f8      	b.n	f7de <getUtfString+0x64>

0000f7ec <getOctetString>:
{
    f7ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f7ee:	4605      	mov	r5, r0
    f7f0:	460c      	mov	r4, r1
    f7f2:	461e      	mov	r6, r3
    if (knownType)
    f7f4:	b152      	cbz	r2, f80c <getOctetString+0x20>
        len = (uint16_t)buff->size;
    f7f6:	88c3      	ldrh	r3, [r0, #6]
    f7f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (len == 0)
    f7fc:	f8bd 4006 	ldrh.w	r4, [sp, #6]
    f800:	b99c      	cbnz	r4, f82a <getOctetString+0x3e>
        var_clear(value);
    f802:	4630      	mov	r0, r6
    f804:	f00c fbb7 	bl	1bf76 <var_clear>
    int ret = 0;
    f808:	4620      	mov	r0, r4
    f80a:	e00c      	b.n	f826 <getOctetString+0x3a>
        if (hlp_getObjectCount2(buff, &len) != 0)
    f80c:	f10d 0106 	add.w	r1, sp, #6
    f810:	f00b fec8 	bl	1b5a4 <hlp_getObjectCount2>
    f814:	b9b0      	cbnz	r0, f844 <getOctetString+0x58>
        if (buff->size - buff->position < len)
    f816:	892a      	ldrh	r2, [r5, #8]
    f818:	88eb      	ldrh	r3, [r5, #6]
    f81a:	1a9b      	subs	r3, r3, r2
    f81c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f820:	4293      	cmp	r3, r2
    f822:	daeb      	bge.n	f7fc <getOctetString+0x10>
            info->complete = 0;
    f824:	7160      	strb	r0, [r4, #5]
}
    f826:	b002      	add	sp, #8
    f828:	bd70      	pop	{r4, r5, r6, pc}
        ret = var_addBytes(value, buff->data + buff->position, len);
    f82a:	892b      	ldrh	r3, [r5, #8]
    f82c:	6829      	ldr	r1, [r5, #0]
    f82e:	4622      	mov	r2, r4
    f830:	4419      	add	r1, r3
    f832:	4630      	mov	r0, r6
    f834:	f00c fbf7 	bl	1c026 <var_addBytes>
        buff->position += (uint16_t)len;
    f838:	892b      	ldrh	r3, [r5, #8]
    f83a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f83e:	4413      	add	r3, r2
    f840:	812b      	strh	r3, [r5, #8]
    f842:	e7f0      	b.n	f826 <getOctetString+0x3a>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
    f844:	f44f 7082 	mov.w	r0, #260	; 0x104
    f848:	e7ed      	b.n	f826 <getOctetString+0x3a>

0000f84a <getUInt8>:
{
    f84a:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    f84c:	88c3      	ldrh	r3, [r0, #6]
{
    f84e:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    f850:	8902      	ldrh	r2, [r0, #8]
    f852:	1a9b      	subs	r3, r3, r2
    f854:	2b00      	cmp	r3, #0
    f856:	dc02      	bgt.n	f85e <getUInt8+0x14>
        info->complete = 0;
    f858:	2000      	movs	r0, #0
    f85a:	7148      	strb	r0, [r1, #5]
}
    f85c:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->bVal : value->pbVal)) != 0)
    f85e:	f994 3000 	ldrsb.w	r3, [r4]
    f862:	2b00      	cmp	r3, #0
    f864:	bfb4      	ite	lt
    f866:	68a1      	ldrlt	r1, [r4, #8]
    f868:	f104 0108 	addge.w	r1, r4, #8
    f86c:	f7fe ff3f 	bl	e6ee <bb_getUInt8>
    f870:	2800      	cmp	r0, #0
    f872:	d1f3      	bne.n	f85c <getUInt8+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f874:	f994 3000 	ldrsb.w	r3, [r4]
    f878:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT8;
    f87a:	bfa4      	itt	ge
    f87c:	2311      	movge	r3, #17
    f87e:	7023      	strbge	r3, [r4, #0]
    f880:	e7ec      	b.n	f85c <getUInt8+0x12>

0000f882 <getInt16>:
{
    f882:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 2)
    f884:	88c3      	ldrh	r3, [r0, #6]
{
    f886:	4614      	mov	r4, r2
    if (buff->size - buff->position < 2)
    f888:	8902      	ldrh	r2, [r0, #8]
    f88a:	1a9b      	subs	r3, r3, r2
    f88c:	2b01      	cmp	r3, #1
    f88e:	dc02      	bgt.n	f896 <getInt16+0x14>
        info->complete = 0;
    f890:	2000      	movs	r0, #0
    f892:	7148      	strb	r0, [r1, #5]
}
    f894:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt16(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->iVal : value->piVal)) != 0)
    f896:	f994 3000 	ldrsb.w	r3, [r4]
    f89a:	2b00      	cmp	r3, #0
    f89c:	bfb4      	ite	lt
    f89e:	68a1      	ldrlt	r1, [r4, #8]
    f8a0:	f104 0108 	addge.w	r1, r4, #8
    f8a4:	f7fe ff7a 	bl	e79c <bb_getInt16>
    f8a8:	2800      	cmp	r0, #0
    f8aa:	d1f3      	bne.n	f894 <getInt16+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f8ac:	f994 3000 	ldrsb.w	r3, [r4]
    f8b0:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT16;
    f8b2:	bfa4      	itt	ge
    f8b4:	2310      	movge	r3, #16
    f8b6:	7023      	strbge	r3, [r4, #0]
    f8b8:	e7ec      	b.n	f894 <getInt16+0x12>

0000f8ba <getInt8>:
{
    f8ba:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    f8bc:	88c3      	ldrh	r3, [r0, #6]
{
    f8be:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    f8c0:	8902      	ldrh	r2, [r0, #8]
    f8c2:	1a9b      	subs	r3, r3, r2
    f8c4:	2b00      	cmp	r3, #0
    f8c6:	dc02      	bgt.n	f8ce <getInt8+0x14>
        info->complete = 0;
    f8c8:	2000      	movs	r0, #0
    f8ca:	7148      	strb	r0, [r1, #5]
}
    f8cc:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->cVal : value->pcVal)) != 0)
    f8ce:	f994 3000 	ldrsb.w	r3, [r4]
    f8d2:	2b00      	cmp	r3, #0
    f8d4:	bfb4      	ite	lt
    f8d6:	68a1      	ldrlt	r1, [r4, #8]
    f8d8:	f104 0108 	addge.w	r1, r4, #8
    f8dc:	f7fe ff16 	bl	e70c <bb_getInt8>
    f8e0:	2800      	cmp	r0, #0
    f8e2:	d1f3      	bne.n	f8cc <getInt8+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f8e4:	f994 3000 	ldrsb.w	r3, [r4]
    f8e8:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT8;
    f8ea:	bfa4      	itt	ge
    f8ec:	230f      	movge	r3, #15
    f8ee:	7023      	strbge	r3, [r4, #0]
    f8f0:	e7ec      	b.n	f8cc <getInt8+0x12>

0000f8f2 <getUInt16>:
{
    f8f2:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 2)
    f8f4:	88c3      	ldrh	r3, [r0, #6]
{
    f8f6:	4614      	mov	r4, r2
    if (buff->size - buff->position < 2)
    f8f8:	8902      	ldrh	r2, [r0, #8]
    f8fa:	1a9b      	subs	r3, r3, r2
    f8fc:	2b01      	cmp	r3, #1
    f8fe:	dc02      	bgt.n	f906 <getUInt16+0x14>
        info->complete = 0;
    f900:	2000      	movs	r0, #0
    f902:	7148      	strb	r0, [r1, #5]
}
    f904:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt16(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->uiVal : value->puiVal)) != 0)
    f906:	f994 3000 	ldrsb.w	r3, [r4]
    f90a:	2b00      	cmp	r3, #0
    f90c:	bfb4      	ite	lt
    f90e:	68a1      	ldrlt	r1, [r4, #8]
    f910:	f104 0108 	addge.w	r1, r4, #8
    f914:	f7fe ff14 	bl	e740 <bb_getUInt16>
    f918:	2800      	cmp	r0, #0
    f91a:	d1f3      	bne.n	f904 <getUInt16+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f91c:	f994 3000 	ldrsb.w	r3, [r4]
    f920:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT16;
    f922:	bfa4      	itt	ge
    f924:	2312      	movge	r3, #18
    f926:	7023      	strbge	r3, [r4, #0]
    f928:	e7ec      	b.n	f904 <getUInt16+0x12>

0000f92a <getInt64>:
{
    f92a:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    f92c:	88c3      	ldrh	r3, [r0, #6]
{
    f92e:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    f930:	8902      	ldrh	r2, [r0, #8]
    f932:	1a9b      	subs	r3, r3, r2
    f934:	2b07      	cmp	r3, #7
    f936:	dc02      	bgt.n	f93e <getInt64+0x14>
        info->complete = 0;
    f938:	2000      	movs	r0, #0
    f93a:	7148      	strb	r0, [r1, #5]
}
    f93c:	bd10      	pop	{r4, pc}
    if ((ret = bb_getInt64(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->llVal : value->pllVal)) != 0)
    f93e:	f994 3000 	ldrsb.w	r3, [r4]
    f942:	2b00      	cmp	r3, #0
    f944:	bfb4      	ite	lt
    f946:	68a1      	ldrlt	r1, [r4, #8]
    f948:	f104 0108 	addge.w	r1, r4, #8
    f94c:	f7fe ffa1 	bl	e892 <bb_getInt64>
    f950:	2800      	cmp	r0, #0
    f952:	d1f3      	bne.n	f93c <getInt64+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f954:	f994 3000 	ldrsb.w	r3, [r4]
    f958:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_INT64;
    f95a:	bfa4      	itt	ge
    f95c:	2314      	movge	r3, #20
    f95e:	7023      	strbge	r3, [r4, #0]
    f960:	e7ec      	b.n	f93c <getInt64+0x12>

0000f962 <getUInt64>:
{
    f962:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    f964:	88c3      	ldrh	r3, [r0, #6]
{
    f966:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    f968:	8902      	ldrh	r2, [r0, #8]
    f96a:	1a9b      	subs	r3, r3, r2
    f96c:	2b07      	cmp	r3, #7
    f96e:	dc02      	bgt.n	f976 <getUInt64+0x14>
        info->complete = 0;
    f970:	2000      	movs	r0, #0
    f972:	7148      	strb	r0, [r1, #5]
}
    f974:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt64(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->ullVal : value->pullVal)) != 0)
    f976:	f994 3000 	ldrsb.w	r3, [r4]
    f97a:	2b00      	cmp	r3, #0
    f97c:	bfb4      	ite	lt
    f97e:	68a1      	ldrlt	r1, [r4, #8]
    f980:	f104 0108 	addge.w	r1, r4, #8
    f984:	f7fe ff90 	bl	e8a8 <bb_getUInt64>
    f988:	2800      	cmp	r0, #0
    f98a:	d1f3      	bne.n	f974 <getUInt64+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f98c:	f994 3000 	ldrsb.w	r3, [r4]
    f990:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_UINT64;
    f992:	bfa4      	itt	ge
    f994:	2315      	movge	r3, #21
    f996:	7023      	strbge	r3, [r4, #0]
    f998:	e7ec      	b.n	f974 <getUInt64+0x12>

0000f99a <getEnum>:
{
    f99a:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 1)
    f99c:	88c3      	ldrh	r3, [r0, #6]
{
    f99e:	4614      	mov	r4, r2
    if (buff->size - buff->position < 1)
    f9a0:	8902      	ldrh	r2, [r0, #8]
    f9a2:	1a9b      	subs	r3, r3, r2
    f9a4:	2b00      	cmp	r3, #0
    f9a6:	dc02      	bgt.n	f9ae <getEnum+0x14>
        info->complete = 0;
    f9a8:	2000      	movs	r0, #0
    f9aa:	7148      	strb	r0, [r1, #5]
}
    f9ac:	bd10      	pop	{r4, pc}
    if ((ret = bb_getUInt8(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->bVal : value->pbVal)) != 0)
    f9ae:	f994 3000 	ldrsb.w	r3, [r4]
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	bfb4      	ite	lt
    f9b6:	68a1      	ldrlt	r1, [r4, #8]
    f9b8:	f104 0108 	addge.w	r1, r4, #8
    f9bc:	f7fe fe97 	bl	e6ee <bb_getUInt8>
    f9c0:	2800      	cmp	r0, #0
    f9c2:	d1f3      	bne.n	f9ac <getEnum+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f9c4:	f994 3000 	ldrsb.w	r3, [r4]
    f9c8:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_ENUM;
    f9ca:	bfa4      	itt	ge
    f9cc:	2316      	movge	r3, #22
    f9ce:	7023      	strbge	r3, [r4, #0]
    f9d0:	e7ec      	b.n	f9ac <getEnum+0x12>

0000f9d2 <getDouble>:
{
    f9d2:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 8)
    f9d4:	88c3      	ldrh	r3, [r0, #6]
{
    f9d6:	4614      	mov	r4, r2
    if (buff->size - buff->position < 8)
    f9d8:	8902      	ldrh	r2, [r0, #8]
    f9da:	1a9b      	subs	r3, r3, r2
    f9dc:	2b07      	cmp	r3, #7
    f9de:	dc02      	bgt.n	f9e6 <getDouble+0x14>
        info->complete = 0;
    f9e0:	2000      	movs	r0, #0
    f9e2:	7148      	strb	r0, [r1, #5]
}
    f9e4:	bd10      	pop	{r4, pc}
    if ((ret = bb_getDouble(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->dblVal : value->pdblVal)) != 0)
    f9e6:	f994 3000 	ldrsb.w	r3, [r4]
    f9ea:	2b00      	cmp	r3, #0
    f9ec:	bfb4      	ite	lt
    f9ee:	68a1      	ldrlt	r1, [r4, #8]
    f9f0:	f104 0108 	addge.w	r1, r4, #8
    f9f4:	f7fe ff7f 	bl	e8f6 <bb_getDouble>
    f9f8:	2800      	cmp	r0, #0
    f9fa:	d1f3      	bne.n	f9e4 <getDouble+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    f9fc:	f994 3000 	ldrsb.w	r3, [r4]
    fa00:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_FLOAT64;
    fa02:	bfa4      	itt	ge
    fa04:	2318      	movge	r3, #24
    fa06:	7023      	strbge	r3, [r4, #0]
    fa08:	e7ec      	b.n	f9e4 <getDouble+0x12>

0000fa0a <getFloat>:
{
    fa0a:	b510      	push	{r4, lr}
    if (buff->size - buff->position < 4)
    fa0c:	88c3      	ldrh	r3, [r0, #6]
{
    fa0e:	4614      	mov	r4, r2
    if (buff->size - buff->position < 4)
    fa10:	8902      	ldrh	r2, [r0, #8]
    fa12:	1a9b      	subs	r3, r3, r2
    fa14:	2b03      	cmp	r3, #3
    fa16:	dc02      	bgt.n	fa1e <getFloat+0x14>
        info->complete = 0;
    fa18:	2000      	movs	r0, #0
    fa1a:	7148      	strb	r0, [r1, #5]
}
    fa1c:	bd10      	pop	{r4, pc}
    if ((ret = bb_getFloat(buff, (value->vt & DLMS_DATA_TYPE_BYREF) == 0 ? &value->fltVal : value->pfltVal)) != 0)
    fa1e:	f994 3000 	ldrsb.w	r3, [r4]
    fa22:	2b00      	cmp	r3, #0
    fa24:	bfb4      	ite	lt
    fa26:	68a1      	ldrlt	r1, [r4, #8]
    fa28:	f104 0108 	addge.w	r1, r4, #8
    fa2c:	f7fe ff47 	bl	e8be <bb_getFloat>
    fa30:	2800      	cmp	r0, #0
    fa32:	d1f3      	bne.n	fa1c <getFloat+0x12>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    fa34:	f994 3000 	ldrsb.w	r3, [r4]
    fa38:	2b00      	cmp	r3, #0
        value->vt = DLMS_DATA_TYPE_FLOAT32;
    fa3a:	bfa4      	itt	ge
    fa3c:	2317      	movge	r3, #23
    fa3e:	7023      	strbge	r3, [r4, #0]
    fa40:	e7ec      	b.n	fa1c <getFloat+0x12>

0000fa42 <getDateTime>:
{
    fa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (buff->size - buff->position < 12)
    fa46:	88c3      	ldrh	r3, [r0, #6]
{
    fa48:	4617      	mov	r7, r2
    if (buff->size - buff->position < 12)
    fa4a:	8902      	ldrh	r2, [r0, #8]
    fa4c:	1a9b      	subs	r3, r3, r2
    fa4e:	2b0b      	cmp	r3, #11
{
    fa50:	b08a      	sub	sp, #40	; 0x28
    fa52:	4605      	mov	r5, r0
    if (buff->size - buff->position < 12)
    fa54:	dc06      	bgt.n	fa64 <getDateTime+0x22>
        info->complete = 0;
    fa56:	2000      	movs	r0, #0
    fa58:	7148      	strb	r0, [r1, #5]
        return 0;
    fa5a:	4604      	mov	r4, r0
}
    fa5c:	4620      	mov	r0, r4
    fa5e:	b00a      	add	sp, #40	; 0x28
    fa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ret = bb_getUInt16(buff, &year)) != 0)
    fa64:	a909      	add	r1, sp, #36	; 0x24
    fa66:	f7fe fe6b 	bl	e740 <bb_getUInt16>
    fa6a:	4604      	mov	r4, r0
    fa6c:	2800      	cmp	r0, #0
    fa6e:	d1f5      	bne.n	fa5c <getDateTime+0x1a>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) != 0)
    fa70:	f997 3000 	ldrsb.w	r3, [r7]
    fa74:	2b00      	cmp	r3, #0
    fa76:	f280 80c5 	bge.w	fc04 <getDateTime+0x1c2>
        t = value->pVal;
    fa7a:	68be      	ldr	r6, [r7, #8]
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0, wday = 0, skip = 0;
    fa7c:	2300      	movs	r3, #0
    if ((ret = bb_getUInt8(buff, &mon)) != 0)
    fa7e:	f10d 011f 	add.w	r1, sp, #31
    fa82:	4628      	mov	r0, r5
    unsigned char mon = 0, day = 0, hour = 0, min = 0, sec = 0, wday = 0, skip = 0;
    fa84:	f88d 301f 	strb.w	r3, [sp, #31]
    fa88:	f88d 3020 	strb.w	r3, [sp, #32]
    fa8c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    fa90:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    fa94:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    if ((ret = bb_getUInt8(buff, &mon)) != 0)
    fa98:	f7fe fe29 	bl	e6ee <bb_getUInt8>
    fa9c:	4604      	mov	r4, r0
    fa9e:	2800      	cmp	r0, #0
    faa0:	d1dc      	bne.n	fa5c <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &day)) != 0)
    faa2:	a908      	add	r1, sp, #32
    faa4:	4628      	mov	r0, r5
    faa6:	f7fe fe22 	bl	e6ee <bb_getUInt8>
    faaa:	4604      	mov	r4, r0
    faac:	2800      	cmp	r0, #0
    faae:	d1d5      	bne.n	fa5c <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    fab0:	f10d 011e 	add.w	r1, sp, #30
    fab4:	4628      	mov	r0, r5
    fab6:	f7fe fe1a 	bl	e6ee <bb_getUInt8>
    faba:	4604      	mov	r4, r0
    fabc:	2800      	cmp	r0, #0
    fabe:	d1cd      	bne.n	fa5c <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &hour)) != 0)
    fac0:	f10d 0121 	add.w	r1, sp, #33	; 0x21
    fac4:	4628      	mov	r0, r5
    fac6:	f7fe fe12 	bl	e6ee <bb_getUInt8>
    faca:	4604      	mov	r4, r0
    facc:	2800      	cmp	r0, #0
    face:	d1c5      	bne.n	fa5c <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &min)) != 0)
    fad0:	f10d 0122 	add.w	r1, sp, #34	; 0x22
    fad4:	4628      	mov	r0, r5
    fad6:	f7fe fe0a 	bl	e6ee <bb_getUInt8>
    fada:	4604      	mov	r4, r0
    fadc:	2800      	cmp	r0, #0
    fade:	d1bd      	bne.n	fa5c <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &sec)) != 0)
    fae0:	f10d 0123 	add.w	r1, sp, #35	; 0x23
    fae4:	4628      	mov	r0, r5
    fae6:	f7fe fe02 	bl	e6ee <bb_getUInt8>
    faea:	4604      	mov	r4, r0
    faec:	2800      	cmp	r0, #0
    faee:	d1b5      	bne.n	fa5c <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    faf0:	f10d 011e 	add.w	r1, sp, #30
    faf4:	4628      	mov	r0, r5
    faf6:	f7fe fdfa 	bl	e6ee <bb_getUInt8>
    fafa:	4604      	mov	r4, r0
    fafc:	2800      	cmp	r0, #0
    fafe:	d1ad      	bne.n	fa5c <getDateTime+0x1a>
    if ((ret = bb_getInt16(buff, &deviation)) != 0)
    fb00:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    fb04:	4628      	mov	r0, r5
    fb06:	f7fe fe49 	bl	e79c <bb_getInt16>
    fb0a:	4604      	mov	r4, r0
    fb0c:	2800      	cmp	r0, #0
    fb0e:	d1a5      	bne.n	fa5c <getDateTime+0x1a>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    fb10:	f10d 011e 	add.w	r1, sp, #30
    fb14:	4628      	mov	r0, r5
    fb16:	f7fe fdea 	bl	e6ee <bb_getUInt8>
    fb1a:	4604      	mov	r4, r0
    fb1c:	2800      	cmp	r0, #0
    fb1e:	d19d      	bne.n	fa5c <getDateTime+0x1a>
    if (year < 1 || year == 0xFFFF)
    fb20:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    status = ch;
    fb24:	f89d 701e 	ldrb.w	r7, [sp, #30]
    t->status = (DLMS_CLOCK_STATUS)status;
    fb28:	7277      	strb	r7, [r6, #9]
    if (year < 1 || year == 0xFFFF)
    fb2a:	3b01      	subs	r3, #1
    fb2c:	b29b      	uxth	r3, r3
    fb2e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    fb32:	4293      	cmp	r3, r2
        year = 1970;
    fb34:	bf84      	itt	hi
    fb36:	f240 73b2 	movwhi	r3, #1970	; 0x7b2
    fb3a:	f8ad 3024 	strhhi.w	r3, [sp, #36]	; 0x24
    if ((mon < 1 || mon > 12) && mon != 0xFE && mon != 0xFD)
    fb3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    fb42:	f103 32ff 	add.w	r2, r3, #4294967295
        skip |= DATETIME_SKIPS_YEAR;
    fb46:	bf8c      	ite	hi
    fb48:	2581      	movhi	r5, #129	; 0x81
    skip = DATETIME_SKIPS_MS;
    fb4a:	2580      	movls	r5, #128	; 0x80
    if ((mon < 1 || mon > 12) && mon != 0xFE && mon != 0xFD)
    fb4c:	2a0b      	cmp	r2, #11
    fb4e:	d908      	bls.n	fb62 <getDateTime+0x120>
    fb50:	3303      	adds	r3, #3
    fb52:	b2db      	uxtb	r3, r3
    fb54:	2b01      	cmp	r3, #1
        mon = 1;
    fb56:	bf82      	ittt	hi
    fb58:	2301      	movhi	r3, #1
        skip |= DATETIME_SKIPS_MONTH;
    fb5a:	f045 0502 	orrhi.w	r5, r5, #2
        mon = 1;
    fb5e:	f88d 301f 	strbhi.w	r3, [sp, #31]
    if ((day < 1 || day > 31) && day != 0xFE && day != 0xFD)
    fb62:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fb66:	1e5a      	subs	r2, r3, #1
    fb68:	2a1e      	cmp	r2, #30
    fb6a:	d908      	bls.n	fb7e <getDateTime+0x13c>
    fb6c:	3303      	adds	r3, #3
    fb6e:	b2db      	uxtb	r3, r3
    fb70:	2b01      	cmp	r3, #1
        day = 1;
    fb72:	bf82      	ittt	hi
    fb74:	2301      	movhi	r3, #1
        skip |= DATETIME_SKIPS_DAY;
    fb76:	f045 0504 	orrhi.w	r5, r5, #4
        day = 1;
    fb7a:	f88d 3020 	strbhi.w	r3, [sp, #32]
    if (hour > 24)
    fb7e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    fb82:	f89d 201f 	ldrb.w	r2, [sp, #31]
    fb86:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    if (hour > 24)
    fb8a:	2b18      	cmp	r3, #24
        hour = 0;
    fb8c:	bf84      	itt	hi
    fb8e:	2300      	movhi	r3, #0
    fb90:	f88d 3021 	strbhi.w	r3, [sp, #33]	; 0x21
    if (min > 60)
    fb94:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
        skip |= DATETIME_SKIPS_HOUR;
    fb98:	bf88      	it	hi
    fb9a:	f045 0510 	orrhi.w	r5, r5, #16
    if (min > 60)
    fb9e:	2b3c      	cmp	r3, #60	; 0x3c
        min = 0;
    fba0:	bf84      	itt	hi
    fba2:	2300      	movhi	r3, #0
    fba4:	f88d 3022 	strbhi.w	r3, [sp, #34]	; 0x22
    if (sec > 60)
    fba8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        skip |= DATETIME_SKIPS_MINUTE;
    fbac:	bf88      	it	hi
    fbae:	f045 0520 	orrhi.w	r5, r5, #32
    if (sec > 60)
    fbb2:	2b3c      	cmp	r3, #60	; 0x3c
        sec = 0;
    fbb4:	bf84      	itt	hi
    fbb6:	2300      	movhi	r3, #0
    fbb8:	f88d 3023 	strbhi.w	r3, [sp, #35]	; 0x23
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    fbbc:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
    fbc0:	9304      	str	r3, [sp, #16]
    fbc2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fbc6:	9302      	str	r3, [sp, #8]
    fbc8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    fbcc:	9301      	str	r3, [sp, #4]
    fbce:	f04f 0800 	mov.w	r8, #0
    fbd2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fbd6:	9300      	str	r3, [sp, #0]
        skip |= DATETIME_SKIPS_SECOND;
    fbd8:	bf88      	it	hi
    fbda:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
    time_init(t, year, mon, day, hour, min, sec, 0, deviation);
    fbde:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fbe2:	f8cd 800c 	str.w	r8, [sp, #12]
    fbe6:	4630      	mov	r0, r6
    fbe8:	f7f2 fafa 	bl	21e0 <time_init>
    t->skip = skip;
    fbec:	b2ad      	uxth	r5, r5
    if (status == 0xFF)
    fbee:	2fff      	cmp	r7, #255	; 0xff
    t->skip = skip;
    fbf0:	80f5      	strh	r5, [r6, #6]
        t->skip = (DATETIME_SKIPS)(t->skip | DATETIME_SKIPS_STATUS);
    fbf2:	bf08      	it	eq
    fbf4:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
    t->status = status;
    fbf8:	7277      	strb	r7, [r6, #9]
        t->skip = (DATETIME_SKIPS)(t->skip | DATETIME_SKIPS_STATUS);
    fbfa:	bf04      	itt	eq
    fbfc:	80f5      	strheq	r5, [r6, #6]
        t->status = 0;
    fbfe:	f886 8009 	strbeq.w	r8, [r6, #9]
    fc02:	e72b      	b.n	fa5c <getDateTime+0x1a>
        t = value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    fc04:	200c      	movs	r0, #12
    fc06:	f7fd fb75 	bl	d2f4 <malloc>
        value->vt = DLMS_DATA_TYPE_DATETIME;
    fc0a:	2319      	movs	r3, #25
        t = value->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
    fc0c:	4606      	mov	r6, r0
    fc0e:	60b8      	str	r0, [r7, #8]
        value->vt = DLMS_DATA_TYPE_DATETIME;
    fc10:	703b      	strb	r3, [r7, #0]
    fc12:	e733      	b.n	fa7c <getDateTime+0x3a>

0000fc14 <getDataTypes>:
{
    fc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (cols->size == 0)
    fc18:	88cb      	ldrh	r3, [r1, #6]
{
    fc1a:	b087      	sub	sp, #28
    fc1c:	4607      	mov	r7, r0
    fc1e:	460e      	mov	r6, r1
    fc20:	4691      	mov	r9, r2
    if (cols->size == 0)
    fc22:	b91b      	cbnz	r3, fc2c <getDataTypes+0x18>
        va_capacity(cols, (uint16_t)len);
    fc24:	b291      	uxth	r1, r2
    fc26:	4630      	mov	r0, r6
    fc28:	f00c f92f 	bl	1be8a <va_capacity>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    fc2c:	f04f 0a00 	mov.w	sl, #0
    for (int pos = 0; pos != len; ++pos)
    fc30:	45ca      	cmp	sl, r9
    fc32:	d101      	bne.n	fc38 <getDataTypes+0x24>
    return 0;
    fc34:	2400      	movs	r4, #0
    fc36:	e030      	b.n	fc9a <getDataTypes+0x86>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
    fc38:	f10d 0101 	add.w	r1, sp, #1
    fc3c:	4638      	mov	r0, r7
    fc3e:	f7fe fd56 	bl	e6ee <bb_getUInt8>
    fc42:	4604      	mov	r4, r0
    fc44:	bb48      	cbnz	r0, fc9a <getDataTypes+0x86>
        dt = (DLMS_DATA_TYPE)ch;
    fc46:	f89d 8001 	ldrb.w	r8, [sp, #1]
        if (dt == DLMS_DATA_TYPE_ARRAY)
    fc4a:	f1b8 0f01 	cmp.w	r8, #1
    fc4e:	d170      	bne.n	fd32 <getDataTypes+0x11e>
            if ((ret = bb_getUInt16(buff, &cnt)) != 0)
    fc50:	f10d 0102 	add.w	r1, sp, #2
    fc54:	4638      	mov	r0, r7
    fc56:	f7fe fd73 	bl	e740 <bb_getUInt16>
    fc5a:	4604      	mov	r4, r0
    fc5c:	b9e8      	cbnz	r0, fc9a <getDataTypes+0x86>
            var_init(&tmp);
    fc5e:	a802      	add	r0, sp, #8
    fc60:	f00c f82d 	bl	1bcbe <var_init>
            tmp.Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    fc64:	2008      	movs	r0, #8
    fc66:	f7fd fb45 	bl	d2f4 <malloc>
            tmp.vt = DLMS_DATA_TYPE_ARRAY;
    fc6a:	f88d 8008 	strb.w	r8, [sp, #8]
            tmp.Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    fc6e:	9004      	str	r0, [sp, #16]
            if (tmp.Arr == NULL)
    fc70:	b910      	cbnz	r0, fc78 <getDataTypes+0x64>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
    fc72:	f44f 7482 	mov.w	r4, #260	; 0x104
    fc76:	e010      	b.n	fc9a <getDataTypes+0x86>
            va_init(tmp.Arr);
    fc78:	f00c f903 	bl	1be82 <va_init>
            getDataTypes(buff, tmp.Arr, 1);
    fc7c:	9904      	ldr	r1, [sp, #16]
    fc7e:	4642      	mov	r2, r8
    fc80:	4638      	mov	r0, r7
    fc82:	f7ff ffc7 	bl	fc14 <getDataTypes>
            if ((ret = va_getByIndex(tmp.Arr, 0, &it)) != 0)
    fc86:	4621      	mov	r1, r4
    fc88:	9804      	ldr	r0, [sp, #16]
    fc8a:	aa01      	add	r2, sp, #4
    fc8c:	f00c f9f1 	bl	1c072 <va_getByIndex>
    fc90:	4604      	mov	r4, r0
    fc92:	b130      	cbz	r0, fca2 <getDataTypes+0x8e>
                va_clear(cols);
    fc94:	4630      	mov	r0, r6
    fc96:	f00c f949 	bl	1bf2c <va_clear>
}
    fc9a:	4620      	mov	r0, r4
    fc9c:	b007      	add	sp, #28
    fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            dlmsVARIANT* tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    fca2:	2010      	movs	r0, #16
    fca4:	f7fd fb26 	bl	d2f4 <malloc>
            if (tmp2 == NULL)
    fca8:	4605      	mov	r5, r0
    fcaa:	2800      	cmp	r0, #0
    fcac:	d0e1      	beq.n	fc72 <getDataTypes+0x5e>
            var_init(tmp2);
    fcae:	f00c f806 	bl	1bcbe <var_init>
            tmp2->vt = DLMS_DATA_TYPE_ARRAY;
    fcb2:	f885 8000 	strb.w	r8, [r5]
            tmp2->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    fcb6:	2008      	movs	r0, #8
    fcb8:	f7fd fb1c 	bl	d2f4 <malloc>
    fcbc:	60a8      	str	r0, [r5, #8]
            if (tmp2->Arr == NULL)
    fcbe:	b930      	cbnz	r0, fcce <getDataTypes+0xba>
                    var_clear(tmp2);
    fcc0:	4628      	mov	r0, r5
    fcc2:	f00c f958 	bl	1bf76 <var_clear>
                    gxfree(tmp2);
    fcc6:	4628      	mov	r0, r5
    fcc8:	f7fd fb1c 	bl	d304 <free>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
    fccc:	e7d1      	b.n	fc72 <getDataTypes+0x5e>
            va_init(tmp2->Arr);
    fcce:	f00c f8d8 	bl	1be82 <va_init>
            for (int i = 0; i != cnt; ++i)
    fcd2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fcd6:	42a3      	cmp	r3, r4
    fcd8:	d109      	bne.n	fcee <getDataTypes+0xda>
            var_clear(&tmp);
    fcda:	a802      	add	r0, sp, #8
    fcdc:	f00c f94b 	bl	1bf76 <var_clear>
            va_push(cols, tmp);
    fce0:	4629      	mov	r1, r5
            va_push(cols, tmp);
    fce2:	4630      	mov	r0, r6
    fce4:	f00c f8f9 	bl	1beda <va_push>
    for (int pos = 0; pos != len; ++pos)
    fce8:	f10a 0a01 	add.w	sl, sl, #1
    fcec:	e7a0      	b.n	fc30 <getDataTypes+0x1c>
                dlmsVARIANT* tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
    fcee:	2010      	movs	r0, #16
    fcf0:	f7fd fb00 	bl	d2f4 <malloc>
                if (tmp3 == NULL)
    fcf4:	4680      	mov	r8, r0
    fcf6:	2800      	cmp	r0, #0
    fcf8:	d0e2      	beq.n	fcc0 <getDataTypes+0xac>
                var_init(tmp3);
    fcfa:	f00b ffe0 	bl	1bcbe <var_init>
                if ((ret = var_copy(tmp3, it)) != 0)
    fcfe:	9901      	ldr	r1, [sp, #4]
    fd00:	4640      	mov	r0, r8
    fd02:	f7f4 fc53 	bl	45ac <var_copy>
    fd06:	4683      	mov	fp, r0
    fd08:	b168      	cbz	r0, fd26 <getDataTypes+0x112>
                    var_clear(tmp3);
    fd0a:	4640      	mov	r0, r8
    fd0c:	f00c f933 	bl	1bf76 <var_clear>
                    gxfree(tmp3);
    fd10:	4640      	mov	r0, r8
    fd12:	f7fd faf7 	bl	d304 <free>
                    var_clear(tmp2);
    fd16:	4628      	mov	r0, r5
    fd18:	f00c f92d 	bl	1bf76 <var_clear>
                    gxfree(tmp2);
    fd1c:	4628      	mov	r0, r5
    fd1e:	f7fd faf1 	bl	d304 <free>
                if ((ret = var_copy(tmp3, it)) != 0)
    fd22:	465c      	mov	r4, fp
                    return ret;
    fd24:	e7b9      	b.n	fc9a <getDataTypes+0x86>
                va_push(tmp2->Arr, tmp3);
    fd26:	68a8      	ldr	r0, [r5, #8]
    fd28:	4641      	mov	r1, r8
    fd2a:	f00c f8d6 	bl	1beda <va_push>
            for (int i = 0; i != cnt; ++i)
    fd2e:	3401      	adds	r4, #1
    fd30:	e7cf      	b.n	fcd2 <getDataTypes+0xbe>
        else if (dt == DLMS_DATA_TYPE_STRUCTURE)
    fd32:	f1b8 0f02 	cmp.w	r8, #2
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    fd36:	f04f 0010 	mov.w	r0, #16
        else if (dt == DLMS_DATA_TYPE_STRUCTURE)
    fd3a:	d129      	bne.n	fd90 <getDataTypes+0x17c>
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    fd3c:	f7fd fada 	bl	d2f4 <malloc>
            if (tmp == NULL)
    fd40:	4605      	mov	r5, r0
    fd42:	2800      	cmp	r0, #0
    fd44:	d095      	beq.n	fc72 <getDataTypes+0x5e>
            var_init(tmp);
    fd46:	f00b ffba 	bl	1bcbe <var_init>
            if ((ret = bb_getUInt8(buff, &ch)) != 0)
    fd4a:	f10d 0101 	add.w	r1, sp, #1
    fd4e:	4638      	mov	r0, r7
    fd50:	f7fe fccd 	bl	e6ee <bb_getUInt8>
    fd54:	4604      	mov	r4, r0
    fd56:	b148      	cbz	r0, fd6c <getDataTypes+0x158>
                va_clear(cols);
    fd58:	4630      	mov	r0, r6
    fd5a:	f00c f8e7 	bl	1bf2c <va_clear>
                var_clear(tmp);
    fd5e:	4628      	mov	r0, r5
    fd60:	f00c f909 	bl	1bf76 <var_clear>
                gxfree(tmp);
    fd64:	4628      	mov	r0, r5
    fd66:	f7fd facd 	bl	d304 <free>
                return ret;
    fd6a:	e796      	b.n	fc9a <getDataTypes+0x86>
            tmp->vt = DLMS_DATA_TYPE_STRUCTURE;
    fd6c:	f885 8000 	strb.w	r8, [r5]
            tmp->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
    fd70:	2008      	movs	r0, #8
    fd72:	f7fd fabf 	bl	d2f4 <malloc>
    fd76:	60a8      	str	r0, [r5, #8]
            if (tmp->Arr == NULL)
    fd78:	2800      	cmp	r0, #0
    fd7a:	f43f af7a 	beq.w	fc72 <getDataTypes+0x5e>
            va_init(tmp->Arr);
    fd7e:	f00c f880 	bl	1be82 <va_init>
            getDataTypes(buff, tmp->Arr, ch);
    fd82:	f89d 2001 	ldrb.w	r2, [sp, #1]
    fd86:	68a9      	ldr	r1, [r5, #8]
    fd88:	4638      	mov	r0, r7
    fd8a:	f7ff ff43 	bl	fc14 <getDataTypes>
    fd8e:	e7a7      	b.n	fce0 <getDataTypes+0xcc>
            dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
    fd90:	f7fd fab0 	bl	d2f4 <malloc>
            if (tmp == NULL)
    fd94:	4604      	mov	r4, r0
    fd96:	2800      	cmp	r0, #0
    fd98:	f43f af6b 	beq.w	fc72 <getDataTypes+0x5e>
            var_init(tmp);
    fd9c:	f00b ff8f 	bl	1bcbe <var_init>
            if (cols->size == 0)
    fda0:	88f3      	ldrh	r3, [r6, #6]
    fda2:	b91b      	cbnz	r3, fdac <getDataTypes+0x198>
                va_capacity(cols, 1);
    fda4:	2101      	movs	r1, #1
    fda6:	4630      	mov	r0, r6
    fda8:	f00c f86f 	bl	1be8a <va_capacity>
            var_setUInt8(tmp, dt);
    fdac:	4641      	mov	r1, r8
    fdae:	4620      	mov	r0, r4
    fdb0:	f00c f92f 	bl	1c012 <var_setUInt8>
            va_push(cols, tmp);
    fdb4:	4621      	mov	r1, r4
    fdb6:	e794      	b.n	fce2 <getDataTypes+0xce>

0000fdb8 <dlms_getData>:
{
    fdb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    fdbc:	4606      	mov	r6, r0
    uint32_t startIndex = data->position;
    fdbe:	f8b0 8008 	ldrh.w	r8, [r0, #8]
    var_clear(value);
    fdc2:	4610      	mov	r0, r2
{
    fdc4:	4615      	mov	r5, r2
    fdc6:	460c      	mov	r4, r1
    var_clear(value);
    fdc8:	f00c f8d5 	bl	1bf76 <var_clear>
    if (data->position == data->size)
    fdcc:	8932      	ldrh	r2, [r6, #8]
    fdce:	88f3      	ldrh	r3, [r6, #6]
    fdd0:	429a      	cmp	r2, r3
    fdd2:	d104      	bne.n	fdde <dlms_getData+0x26>
        info->complete = 0;
    fdd4:	2000      	movs	r0, #0
    fdd6:	7160      	strb	r0, [r4, #5]
}
    fdd8:	b004      	add	sp, #16
    fdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    knownType = info->type != DLMS_DATA_TYPE_NONE;
    fdde:	7927      	ldrb	r7, [r4, #4]
    info->complete = 1;
    fde0:	2301      	movs	r3, #1
    fde2:	7163      	strb	r3, [r4, #5]
    if (!knownType)
    fde4:	b94f      	cbnz	r7, fdfa <dlms_getData+0x42>
        ret = bb_getUInt8(data, &ch);
    fde6:	f10d 010d 	add.w	r1, sp, #13
    fdea:	4630      	mov	r0, r6
    fdec:	f7fe fc7f 	bl	e6ee <bb_getUInt8>
        if (ret != DLMS_ERROR_CODE_OK)
    fdf0:	2800      	cmp	r0, #0
    fdf2:	d1f1      	bne.n	fdd8 <dlms_getData+0x20>
        info->type = (DLMS_DATA_TYPE)ch;
    fdf4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    fdf8:	7123      	strb	r3, [r4, #4]
    if (info->type == DLMS_DATA_TYPE_NONE)
    fdfa:	7923      	ldrb	r3, [r4, #4]
    fdfc:	b90b      	cbnz	r3, fe02 <dlms_getData+0x4a>
        value->vt = info->type;
    fdfe:	2000      	movs	r0, #0
    fe00:	e7ea      	b.n	fdd8 <dlms_getData+0x20>
    if (data->position == data->size)
    fe02:	8930      	ldrh	r0, [r6, #8]
    fe04:	88f1      	ldrh	r1, [r6, #6]
    fe06:	4288      	cmp	r0, r1
    fe08:	d0e4      	beq.n	fdd4 <dlms_getData+0x1c>
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    fe0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    knownType = info->type != DLMS_DATA_TYPE_NONE;
    fe0e:	1e3a      	subs	r2, r7, #0
    fe10:	f103 33ff 	add.w	r3, r3, #4294967295
    fe14:	bf18      	it	ne
    fe16:	2201      	movne	r2, #1
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    fe18:	2b1a      	cmp	r3, #26
    fe1a:	f200 80d5 	bhi.w	ffc8 <dlms_getData+0x210>
    fe1e:	e8df f003 	tbb	[pc, r3]
    fe22:	0e0e      	.short	0x0e0e
    fe24:	655f3a19 	.word	0x655f3a19
    fe28:	6b77d3d3 	.word	0x6b77d3d3
    fe2c:	d37d71d3 	.word	0xd37d71d3
    fe30:	958f8983 	.word	0x958f8983
    fe34:	afa9a39b 	.word	0xafa9a39b
    fe38:	c7c1bbb5 	.word	0xc7c1bbb5
    fe3c:	cd          	.byte	0xcd
    fe3d:	00          	.byte	0x00
        ret = getArray(data, info, (uint16_t)startIndex, value);
    fe3e:	462b      	mov	r3, r5
    fe40:	4642      	mov	r2, r8
    fe42:	4621      	mov	r1, r4
    fe44:	4630      	mov	r0, r6
    fe46:	f000 f8c2 	bl	ffce <getArray>
        value->vt = info->type;
    fe4a:	7923      	ldrb	r3, [r4, #4]
    fe4c:	702b      	strb	r3, [r5, #0]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    fe4e:	2800      	cmp	r0, #0
    fe50:	d1c2      	bne.n	fdd8 <dlms_getData+0x20>
    fe52:	e004      	b.n	fe5e <dlms_getData+0xa6>
    if (buff->size - buff->position < 1)
    fe54:	1a09      	subs	r1, r1, r0
    fe56:	2900      	cmp	r1, #0
    fe58:	dc06      	bgt.n	fe68 <dlms_getData+0xb0>
        info->complete = 0;
    fe5a:	2300      	movs	r3, #0
    fe5c:	7163      	strb	r3, [r4, #5]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    fe5e:	f995 3000 	ldrsb.w	r3, [r5]
    fe62:	2b00      	cmp	r3, #0
    fe64:	da11      	bge.n	fe8a <dlms_getData+0xd2>
    fe66:	e7ca      	b.n	fdfe <dlms_getData+0x46>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
    fe68:	f10d 010e 	add.w	r1, sp, #14
    fe6c:	4630      	mov	r0, r6
    fe6e:	f7fe fc3e 	bl	e6ee <bb_getUInt8>
    fe72:	2800      	cmp	r0, #0
    fe74:	d1b0      	bne.n	fdd8 <dlms_getData+0x20>
    if ((value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    fe76:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fe7a:	f995 2000 	ldrsb.w	r2, [r5]
    fe7e:	3b00      	subs	r3, #0
    fe80:	bf18      	it	ne
    fe82:	2301      	movne	r3, #1
    fe84:	2a00      	cmp	r2, #0
    fe86:	db03      	blt.n	fe90 <dlms_getData+0xd8>
        value->boolVal = ch != 0;
    fe88:	722b      	strb	r3, [r5, #8]
        value->vt = info->type;
    fe8a:	7923      	ldrb	r3, [r4, #4]
    fe8c:	702b      	strb	r3, [r5, #0]
    fe8e:	e7b6      	b.n	fdfe <dlms_getData+0x46>
        *value->pboolVal = ch != 0;
    fe90:	68aa      	ldr	r2, [r5, #8]
    fe92:	7013      	strb	r3, [r2, #0]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    fe94:	e7e3      	b.n	fe5e <dlms_getData+0xa6>
    uint16_t cnt = 0;
    fe96:	2300      	movs	r3, #0
    if (hlp_getObjectCount2(buff, &cnt) != 0)
    fe98:	f10d 010e 	add.w	r1, sp, #14
    fe9c:	4630      	mov	r0, r6
    uint16_t cnt = 0;
    fe9e:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (hlp_getObjectCount2(buff, &cnt) != 0)
    fea2:	f00b fb7f 	bl	1b5a4 <hlp_getObjectCount2>
    fea6:	4607      	mov	r7, r0
    fea8:	b110      	cbz	r0, feb0 <dlms_getData+0xf8>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    feaa:	f44f 7082 	mov.w	r0, #260	; 0x104
    feae:	e793      	b.n	fdd8 <dlms_getData+0x20>
    uint16_t byteCnt = ba_getByteCount(cnt);
    feb0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    feb4:	f7f1 fb66 	bl	1584 <ba_getByteCount>
    if (buff->size - buff->position < byteCnt)
    feb8:	88f3      	ldrh	r3, [r6, #6]
    feba:	8932      	ldrh	r2, [r6, #8]
    febc:	1a9b      	subs	r3, r3, r2
    febe:	4283      	cmp	r3, r0
    fec0:	da01      	bge.n	fec6 <dlms_getData+0x10e>
        info->complete = 0;
    fec2:	7167      	strb	r7, [r4, #5]
    if (ret == 0 && (value->vt & DLMS_DATA_TYPE_BYREF) == 0)
    fec4:	e7cb      	b.n	fe5e <dlms_getData+0xa6>
    value->bitArr = (bitArray*)gxmalloc(sizeof(bitArray));
    fec6:	2008      	movs	r0, #8
    fec8:	f7fd fa14 	bl	d2f4 <malloc>
    fecc:	60a8      	str	r0, [r5, #8]
    ba_init(value->bitArr);
    fece:	f7fe f92e 	bl	e12e <ba_init>
    if ((ret = hlp_add(value->bitArr, buff, cnt)) != 0)
    fed2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fed6:	68a8      	ldr	r0, [r5, #8]
    fed8:	4631      	mov	r1, r6
    feda:	f00b fcf2 	bl	1b8c2 <hlp_add>
    fede:	e7b6      	b.n	fe4e <dlms_getData+0x96>
        ret = getInt32(data, info, value);
    fee0:	462a      	mov	r2, r5
    fee2:	4621      	mov	r1, r4
    fee4:	4630      	mov	r0, r6
    fee6:	f7ff fc00 	bl	f6ea <getInt32>
        break;
    feea:	e7b0      	b.n	fe4e <dlms_getData+0x96>
        ret = getUInt32(data, info, value);
    feec:	462a      	mov	r2, r5
    feee:	4621      	mov	r1, r4
    fef0:	4630      	mov	r0, r6
    fef2:	f7ff fbe2 	bl	f6ba <getUInt32>
        break;
    fef6:	e7aa      	b.n	fe4e <dlms_getData+0x96>
        ret = getString(data, info, knownType, value);
    fef8:	462b      	mov	r3, r5
    fefa:	4621      	mov	r1, r4
    fefc:	4630      	mov	r0, r6
    fefe:	f7ff fc0c 	bl	f71a <getString>
        break;
    ff02:	e7a4      	b.n	fe4e <dlms_getData+0x96>
        ret = getUtfString(data, info, knownType, value);
    ff04:	462b      	mov	r3, r5
    ff06:	4621      	mov	r1, r4
    ff08:	4630      	mov	r0, r6
    ff0a:	f7ff fc36 	bl	f77a <getUtfString>
        break;
    ff0e:	e79e      	b.n	fe4e <dlms_getData+0x96>
        ret = getOctetString(data, info, knownType, value);
    ff10:	462b      	mov	r3, r5
    ff12:	4621      	mov	r1, r4
    ff14:	4630      	mov	r0, r6
    ff16:	f7ff fc69 	bl	f7ec <getOctetString>
        break;
    ff1a:	e798      	b.n	fe4e <dlms_getData+0x96>
        ret = getBcd(data, info, knownType, value);
    ff1c:	462b      	mov	r3, r5
    ff1e:	4621      	mov	r1, r4
    ff20:	4630      	mov	r0, r6
    ff22:	f7f2 fd47 	bl	29b4 <getBcd>
        break;
    ff26:	e792      	b.n	fe4e <dlms_getData+0x96>
        ret = getInt8(data, info, value);
    ff28:	462a      	mov	r2, r5
    ff2a:	4621      	mov	r1, r4
    ff2c:	4630      	mov	r0, r6
    ff2e:	f7ff fcc4 	bl	f8ba <getInt8>
        break;
    ff32:	e78c      	b.n	fe4e <dlms_getData+0x96>
        ret = getInt16(data, info, value);
    ff34:	462a      	mov	r2, r5
    ff36:	4621      	mov	r1, r4
    ff38:	4630      	mov	r0, r6
    ff3a:	f7ff fca2 	bl	f882 <getInt16>
        break;
    ff3e:	e786      	b.n	fe4e <dlms_getData+0x96>
        ret = getUInt8(data, info, value);
    ff40:	462a      	mov	r2, r5
    ff42:	4621      	mov	r1, r4
    ff44:	4630      	mov	r0, r6
    ff46:	f7ff fc80 	bl	f84a <getUInt8>
        break;
    ff4a:	e780      	b.n	fe4e <dlms_getData+0x96>
        ret = getUInt16(data, info, value);
    ff4c:	462a      	mov	r2, r5
    ff4e:	4621      	mov	r1, r4
    ff50:	4630      	mov	r0, r6
    ff52:	f7ff fcce 	bl	f8f2 <getUInt16>
        break;
    ff56:	e77a      	b.n	fe4e <dlms_getData+0x96>
        ret = getCompactArray(NULL, data, info, value, 0);
    ff58:	2000      	movs	r0, #0
    ff5a:	9000      	str	r0, [sp, #0]
    ff5c:	462b      	mov	r3, r5
    ff5e:	4622      	mov	r2, r4
    ff60:	4631      	mov	r1, r6
    ff62:	f000 f953 	bl	1020c <getCompactArray>
        break;
    ff66:	e772      	b.n	fe4e <dlms_getData+0x96>
        ret = getInt64(data, info, value);
    ff68:	462a      	mov	r2, r5
    ff6a:	4621      	mov	r1, r4
    ff6c:	4630      	mov	r0, r6
    ff6e:	f7ff fcdc 	bl	f92a <getInt64>
        break;
    ff72:	e76c      	b.n	fe4e <dlms_getData+0x96>
        ret = getUInt64(data, info, value);
    ff74:	462a      	mov	r2, r5
    ff76:	4621      	mov	r1, r4
    ff78:	4630      	mov	r0, r6
    ff7a:	f7ff fcf2 	bl	f962 <getUInt64>
        break;
    ff7e:	e766      	b.n	fe4e <dlms_getData+0x96>
        ret = getEnum(data, info, value);
    ff80:	462a      	mov	r2, r5
    ff82:	4621      	mov	r1, r4
    ff84:	4630      	mov	r0, r6
    ff86:	f7ff fd08 	bl	f99a <getEnum>
        break;
    ff8a:	e760      	b.n	fe4e <dlms_getData+0x96>
        ret = getFloat(data, info, value);
    ff8c:	462a      	mov	r2, r5
    ff8e:	4621      	mov	r1, r4
    ff90:	4630      	mov	r0, r6
    ff92:	f7ff fd3a 	bl	fa0a <getFloat>
        break;
    ff96:	e75a      	b.n	fe4e <dlms_getData+0x96>
        ret = getDouble(data, info, value);
    ff98:	462a      	mov	r2, r5
    ff9a:	4621      	mov	r1, r4
    ff9c:	4630      	mov	r0, r6
    ff9e:	f7ff fd18 	bl	f9d2 <getDouble>
        break;
    ffa2:	e754      	b.n	fe4e <dlms_getData+0x96>
        ret = getDateTime(data, info, value);
    ffa4:	462a      	mov	r2, r5
    ffa6:	4621      	mov	r1, r4
    ffa8:	4630      	mov	r0, r6
    ffaa:	f7ff fd4a 	bl	fa42 <getDateTime>
        break;
    ffae:	e74e      	b.n	fe4e <dlms_getData+0x96>
        ret = getDate(data, info, value);
    ffb0:	462a      	mov	r2, r5
    ffb2:	4621      	mov	r1, r4
    ffb4:	4630      	mov	r0, r6
    ffb6:	f7f2 fda7 	bl	2b08 <getDate>
        break;
    ffba:	e748      	b.n	fe4e <dlms_getData+0x96>
        ret = getTime(data, info, value);
    ffbc:	462a      	mov	r2, r5
    ffbe:	4621      	mov	r1, r4
    ffc0:	4630      	mov	r0, r6
    ffc2:	f7f2 fd47 	bl	2a54 <getTime>
        break;
    ffc6:	e742      	b.n	fe4e <dlms_getData+0x96>
    switch (info->type & ~DLMS_DATA_TYPE_BYREF)
    ffc8:	f44f 7081 	mov.w	r0, #258	; 0x102
    ffcc:	e704      	b.n	fdd8 <dlms_getData+0x20>

0000ffce <getArray>:
{
    ffce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    ffd2:	4699      	mov	r9, r3
    if (info->count == 0)
    ffd4:	884b      	ldrh	r3, [r1, #2]
{
    ffd6:	4607      	mov	r7, r0
    ffd8:	460d      	mov	r5, r1
    ffda:	4690      	mov	r8, r2
    if (info->count == 0)
    ffdc:	b953      	cbnz	r3, fff4 <getArray+0x26>
        if ((ret = getCount(buff, info, value)) != 0)
    ffde:	464a      	mov	r2, r9
    ffe0:	f7ff fb50 	bl	f684 <getCount>
    ffe4:	4604      	mov	r4, r0
    ffe6:	b118      	cbz	r0, fff0 <getArray+0x22>
}
    ffe8:	4620      	mov	r0, r4
    ffea:	b002      	add	sp, #8
    ffec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (info->count != 0 && size < 1)
    fff0:	886b      	ldrh	r3, [r5, #2]
    fff2:	b133      	cbz	r3, 10002 <getArray+0x34>
    fff4:	88fa      	ldrh	r2, [r7, #6]
    fff6:	893b      	ldrh	r3, [r7, #8]
    fff8:	429a      	cmp	r2, r3
    fffa:	d102      	bne.n	10002 <getArray+0x34>
        info->complete = 0;
    fffc:	2400      	movs	r4, #0
    fffe:	716c      	strb	r4, [r5, #5]
        return 0;
   10000:	e7f2      	b.n	ffe8 <getArray+0x1a>
    for (pos = info->index; pos != info->count; ++pos)
   10002:	f8b5 a000 	ldrh.w	sl, [r5]
   10006:	886b      	ldrh	r3, [r5, #2]
   10008:	4553      	cmp	r3, sl
   1000a:	d023      	beq.n	10054 <getArray+0x86>
        tmp = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1000c:	2010      	movs	r0, #16
   1000e:	f7fd f971 	bl	d2f4 <malloc>
        if (tmp == NULL)
   10012:	4606      	mov	r6, r0
   10014:	b3a0      	cbz	r0, 10080 <getArray+0xb2>
        var_init(tmp);
   10016:	f00b fe52 	bl	1bcbe <var_init>
        di_init(&info2);
   1001a:	4668      	mov	r0, sp
   1001c:	f7ff fa3c 	bl	f498 <di_init>
        if ((ret = dlms_getData(buff, &info2, tmp)) != 0)
   10020:	4632      	mov	r2, r6
   10022:	4669      	mov	r1, sp
   10024:	4638      	mov	r0, r7
   10026:	f7ff fec7 	bl	fdb8 <dlms_getData>
   1002a:	4604      	mov	r4, r0
   1002c:	b130      	cbz	r0, 1003c <getArray+0x6e>
            var_clear(tmp);
   1002e:	4630      	mov	r0, r6
   10030:	f00b ffa1 	bl	1bf76 <var_clear>
            gxfree(tmp);
   10034:	4630      	mov	r0, r6
   10036:	f7fd f965 	bl	d304 <free>
            return ret;
   1003a:	e7d5      	b.n	ffe8 <getArray+0x1a>
        if (!info2.complete)
   1003c:	f89d 4005 	ldrb.w	r4, [sp, #5]
   10040:	b964      	cbnz	r4, 1005c <getArray+0x8e>
            var_clear(tmp);
   10042:	4630      	mov	r0, r6
   10044:	f00b ff97 	bl	1bf76 <var_clear>
            gxfree(tmp);
   10048:	4630      	mov	r0, r6
   1004a:	f7fd f95b 	bl	d304 <free>
            buff->position = startIndex;
   1004e:	f8a7 8008 	strh.w	r8, [r7, #8]
            info->complete = 0;
   10052:	716c      	strb	r4, [r5, #5]
    info->index = pos;
   10054:	f8a5 a000 	strh.w	sl, [r5]
    return DLMS_ERROR_CODE_OK;
   10058:	2400      	movs	r4, #0
   1005a:	e7c5      	b.n	ffe8 <getArray+0x1a>
            if (info2.count == info2.index)
   1005c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10060:	f8bd 3000 	ldrh.w	r3, [sp]
   10064:	429a      	cmp	r2, r3
   10066:	d106      	bne.n	10076 <getArray+0xa8>
                va_push(value->Arr, tmp);
   10068:	f8d9 0008 	ldr.w	r0, [r9, #8]
                startIndex = (uint16_t)buff->position;
   1006c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
                va_push(value->Arr, tmp);
   10070:	4631      	mov	r1, r6
   10072:	f00b ff32 	bl	1beda <va_push>
    for (pos = info->index; pos != info->count; ++pos)
   10076:	f10a 0a01 	add.w	sl, sl, #1
   1007a:	fa1f fa8a 	uxth.w	sl, sl
   1007e:	e7c2      	b.n	10006 <getArray+0x38>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
   10080:	f44f 7482 	mov.w	r4, #260	; 0x104
   10084:	e7b0      	b.n	ffe8 <getArray+0x1a>

00010086 <getCompactArrayItem>:
{
   10086:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1008a:	4605      	mov	r5, r0
    di_init(&tmp);
   1008c:	4668      	mov	r0, sp
{
   1008e:	4689      	mov	r9, r1
   10090:	4617      	mov	r7, r2
   10092:	461e      	mov	r6, r3
    di_init(&tmp);
   10094:	f7ff fa00 	bl	f498 <di_init>
    dlmsVARIANT* value = gxmalloc(sizeof(dlmsVARIANT));
   10098:	2010      	movs	r0, #16
    uint32_t start = buff->position;
   1009a:	f8b5 8008 	ldrh.w	r8, [r5, #8]
    tmp.type = dt;
   1009e:	f88d 9004 	strb.w	r9, [sp, #4]
    dlmsVARIANT* value = gxmalloc(sizeof(dlmsVARIANT));
   100a2:	f7fd f927 	bl	d2f4 <malloc>
    if (value == NULL)
   100a6:	4604      	mov	r4, r0
   100a8:	2800      	cmp	r0, #0
   100aa:	d062      	beq.n	10172 <getCompactArrayItem+0xec>
    var_init(value);
   100ac:	f00b fe07 	bl	1bcbe <var_init>
    if (dt == DLMS_DATA_TYPE_STRING)
   100b0:	f1b9 0f0a 	cmp.w	r9, #10
   100b4:	d11f      	bne.n	100f6 <getCompactArrayItem+0x70>
        while (buff->position - start < len)
   100b6:	892b      	ldrh	r3, [r5, #8]
   100b8:	eba3 0308 	sub.w	r3, r3, r8
   100bc:	42b3      	cmp	r3, r6
   100be:	d216      	bcs.n	100ee <getCompactArrayItem+0x68>
            var_clear(value);
   100c0:	4620      	mov	r0, r4
   100c2:	f00b ff58 	bl	1bf76 <var_clear>
            di_init(&tmp);
   100c6:	4668      	mov	r0, sp
   100c8:	f7ff f9e6 	bl	f498 <di_init>
            if ((ret = getString(buff, &tmp, 0, value)) != 0)
   100cc:	4623      	mov	r3, r4
   100ce:	2200      	movs	r2, #0
   100d0:	4669      	mov	r1, sp
   100d2:	4628      	mov	r0, r5
            tmp.type = dt;
   100d4:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = getString(buff, &tmp, 0, value)) != 0)
   100d8:	f7ff fb1f 	bl	f71a <getString>
   100dc:	b940      	cbnz	r0, 100f0 <getCompactArrayItem+0x6a>
            va_push(list, value);
   100de:	4621      	mov	r1, r4
   100e0:	4638      	mov	r0, r7
   100e2:	f00b fefa 	bl	1beda <va_push>
            if (!tmp.complete)
   100e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
   100ea:	2b00      	cmp	r3, #0
   100ec:	d1e3      	bne.n	100b6 <getCompactArrayItem+0x30>
    return 0;
   100ee:	2000      	movs	r0, #0
}
   100f0:	b003      	add	sp, #12
   100f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (dt == DLMS_DATA_TYPE_OCTET_STRING)
   100f6:	f1b9 0f09 	cmp.w	r9, #9
   100fa:	d134      	bne.n	10166 <getCompactArrayItem+0xe0>
        while (buff->position - start < len)
   100fc:	892b      	ldrh	r3, [r5, #8]
   100fe:	eba3 0308 	sub.w	r3, r3, r8
   10102:	42b3      	cmp	r3, r6
   10104:	d2f3      	bcs.n	100ee <getCompactArrayItem+0x68>
            var_clear(value);
   10106:	4620      	mov	r0, r4
   10108:	f00b ff35 	bl	1bf76 <var_clear>
            di_init(&tmp);
   1010c:	4668      	mov	r0, sp
   1010e:	f7ff f9c3 	bl	f498 <di_init>
            if ((ret = getOctetString(buff, &tmp, 0, value)) != 0)
   10112:	4623      	mov	r3, r4
   10114:	2200      	movs	r2, #0
   10116:	4669      	mov	r1, sp
   10118:	4628      	mov	r0, r5
            tmp.type = dt;
   1011a:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = getOctetString(buff, &tmp, 0, value)) != 0)
   1011e:	f7ff fb65 	bl	f7ec <getOctetString>
   10122:	2800      	cmp	r0, #0
   10124:	d1e4      	bne.n	100f0 <getCompactArrayItem+0x6a>
            va_push(list, value);
   10126:	4621      	mov	r1, r4
   10128:	4638      	mov	r0, r7
   1012a:	f00b fed6 	bl	1beda <va_push>
            if (!tmp.complete)
   1012e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10132:	2b00      	cmp	r3, #0
   10134:	d1e2      	bne.n	100fc <getCompactArrayItem+0x76>
   10136:	e7da      	b.n	100ee <getCompactArrayItem+0x68>
            var_clear(value);
   10138:	4620      	mov	r0, r4
   1013a:	f00b ff1c 	bl	1bf76 <var_clear>
            di_init(&tmp);
   1013e:	4668      	mov	r0, sp
   10140:	f7ff f9aa 	bl	f498 <di_init>
            if ((ret = dlms_getData(buff, &tmp, value)) != 0)
   10144:	4622      	mov	r2, r4
   10146:	4669      	mov	r1, sp
   10148:	4628      	mov	r0, r5
            tmp.type = dt;
   1014a:	f88d 9004 	strb.w	r9, [sp, #4]
            if ((ret = dlms_getData(buff, &tmp, value)) != 0)
   1014e:	f7ff fe33 	bl	fdb8 <dlms_getData>
   10152:	2800      	cmp	r0, #0
   10154:	d1cc      	bne.n	100f0 <getCompactArrayItem+0x6a>
            va_push(list, value);
   10156:	4621      	mov	r1, r4
   10158:	4638      	mov	r0, r7
   1015a:	f00b febe 	bl	1beda <va_push>
            if (!tmp.complete)
   1015e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10162:	2b00      	cmp	r3, #0
   10164:	d0c3      	beq.n	100ee <getCompactArrayItem+0x68>
        while (buff->position - start < len)
   10166:	892b      	ldrh	r3, [r5, #8]
   10168:	eba3 0308 	sub.w	r3, r3, r8
   1016c:	42b3      	cmp	r3, r6
   1016e:	d3e3      	bcc.n	10138 <getCompactArrayItem+0xb2>
   10170:	e7bd      	b.n	100ee <getCompactArrayItem+0x68>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   10172:	f44f 7082 	mov.w	r0, #260	; 0x104
   10176:	e7bb      	b.n	100f0 <getCompactArrayItem+0x6a>

00010178 <getCompactArrayItem2>:
{
   10178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1017c:	4680      	mov	r8, r0
    dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
   1017e:	2010      	movs	r0, #16
{
   10180:	460f      	mov	r7, r1
   10182:	4691      	mov	r9, r2
    dlmsVARIANT* tmp = gxmalloc(sizeof(dlmsVARIANT));
   10184:	f7fd f8b6 	bl	d2f4 <malloc>
    if (tmp == NULL)
   10188:	4605      	mov	r5, r0
   1018a:	b928      	cbnz	r0, 10198 <getCompactArrayItem2+0x20>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1018c:	f44f 7482 	mov.w	r4, #260	; 0x104
}
   10190:	4620      	mov	r0, r4
   10192:	b003      	add	sp, #12
   10194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    var_init(tmp);
   10198:	f00b fd91 	bl	1bcbe <var_init>
    tmp->vt = DLMS_DATA_TYPE_ARRAY;
   1019c:	2301      	movs	r3, #1
   1019e:	702b      	strb	r3, [r5, #0]
    tmp->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
   101a0:	2008      	movs	r0, #8
   101a2:	f7fd f8a7 	bl	d2f4 <malloc>
   101a6:	60a8      	str	r0, [r5, #8]
    if (tmp->Arr == NULL)
   101a8:	2800      	cmp	r0, #0
   101aa:	d0ef      	beq.n	1018c <getCompactArrayItem2+0x14>
    va_init(tmp->Arr);
   101ac:	f00b fe69 	bl	1be82 <va_init>
    for (pos = 0; pos != dt->size; ++pos)
   101b0:	2600      	movs	r6, #0
   101b2:	88fb      	ldrh	r3, [r7, #6]
   101b4:	42b3      	cmp	r3, r6
   101b6:	d105      	bne.n	101c4 <getCompactArrayItem2+0x4c>
    va_push(list, tmp);
   101b8:	4629      	mov	r1, r5
   101ba:	4648      	mov	r0, r9
   101bc:	f00b fe8d 	bl	1beda <va_push>
    return 0;
   101c0:	2400      	movs	r4, #0
   101c2:	e7e5      	b.n	10190 <getCompactArrayItem2+0x18>
        if ((ret = va_getByIndex(dt, pos, &it)) != 0)
   101c4:	aa01      	add	r2, sp, #4
   101c6:	4631      	mov	r1, r6
   101c8:	4638      	mov	r0, r7
   101ca:	f00b ff52 	bl	1c072 <va_getByIndex>
   101ce:	4604      	mov	r4, r0
   101d0:	b130      	cbz	r0, 101e0 <getCompactArrayItem2+0x68>
                var_clear(tmp);
   101d2:	4628      	mov	r0, r5
   101d4:	f00b fecf 	bl	1bf76 <var_clear>
                gxfree(tmp);
   101d8:	4628      	mov	r0, r5
   101da:	f7fd f893 	bl	d304 <free>
                return ret;
   101de:	e7d7      	b.n	10190 <getCompactArrayItem2+0x18>
        if (it->vt == DLMS_DATA_TYPE_ARRAY || it->vt == DLMS_DATA_TYPE_STRUCTURE)
   101e0:	9901      	ldr	r1, [sp, #4]
   101e2:	68aa      	ldr	r2, [r5, #8]
   101e4:	780b      	ldrb	r3, [r1, #0]
   101e6:	3b01      	subs	r3, #1
   101e8:	2b01      	cmp	r3, #1
            if ((ret = getCompactArrayItem2(buff, it->Arr, tmp->Arr, 1)) != 0)
   101ea:	f04f 0301 	mov.w	r3, #1
        if (it->vt == DLMS_DATA_TYPE_ARRAY || it->vt == DLMS_DATA_TYPE_STRUCTURE)
   101ee:	d808      	bhi.n	10202 <getCompactArrayItem2+0x8a>
            if ((ret = getCompactArrayItem2(buff, it->Arr, tmp->Arr, 1)) != 0)
   101f0:	6889      	ldr	r1, [r1, #8]
   101f2:	4640      	mov	r0, r8
   101f4:	f7ff ffc0 	bl	10178 <getCompactArrayItem2>
            if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, tmp->Arr, 1)) != 0)
   101f8:	4604      	mov	r4, r0
   101fa:	2800      	cmp	r0, #0
   101fc:	d1e9      	bne.n	101d2 <getCompactArrayItem2+0x5a>
    for (pos = 0; pos != dt->size; ++pos)
   101fe:	3601      	adds	r6, #1
   10200:	e7d7      	b.n	101b2 <getCompactArrayItem2+0x3a>
            if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, tmp->Arr, 1)) != 0)
   10202:	7a09      	ldrb	r1, [r1, #8]
   10204:	4640      	mov	r0, r8
   10206:	f7ff ff3e 	bl	10086 <getCompactArrayItem>
   1020a:	e7f5      	b.n	101f8 <getCompactArrayItem2+0x80>

0001020c <getCompactArray>:
{
   1020c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10210:	460e      	mov	r6, r1
   10212:	b08b      	sub	sp, #44	; 0x2c
    var_clear(value);
   10214:	4618      	mov	r0, r3
{
   10216:	4615      	mov	r5, r2
   10218:	4698      	mov	r8, r3
   1021a:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    var_clear(value);
   1021e:	f00b feaa 	bl	1bf76 <var_clear>
    if (buff->size - buff->position < 2)
   10222:	88f3      	ldrh	r3, [r6, #6]
   10224:	8932      	ldrh	r2, [r6, #8]
   10226:	1a9b      	subs	r3, r3, r2
   10228:	2b01      	cmp	r3, #1
   1022a:	dc03      	bgt.n	10234 <getCompactArray+0x28>
        info->complete = 0;
   1022c:	2000      	movs	r0, #0
   1022e:	7168      	strb	r0, [r5, #5]
    return getCompactArrayItem(buff, dt, value->Arr, len);
   10230:	4604      	mov	r4, r0
   10232:	e037      	b.n	102a4 <getCompactArray+0x98>
    if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10234:	f10d 0109 	add.w	r1, sp, #9
   10238:	4630      	mov	r0, r6
   1023a:	f7fe fa58 	bl	e6ee <bb_getUInt8>
   1023e:	4604      	mov	r4, r0
   10240:	bb80      	cbnz	r0, 102a4 <getCompactArray+0x98>
    DLMS_DATA_TYPE dt = (DLMS_DATA_TYPE)ch;
   10242:	f89d 5009 	ldrb.w	r5, [sp, #9]
    if (dt == DLMS_DATA_TYPE_ARRAY)
   10246:	2d01      	cmp	r5, #1
   10248:	f000 80f4 	beq.w	10434 <getCompactArray+0x228>
    if ((ret = hlp_getObjectCount2(buff, &len)) != 0)
   1024c:	f10d 010a 	add.w	r1, sp, #10
   10250:	4630      	mov	r0, r6
   10252:	f00b f9a7 	bl	1b5a4 <hlp_getObjectCount2>
   10256:	4604      	mov	r4, r0
   10258:	bb20      	cbnz	r0, 102a4 <getCompactArray+0x98>
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
   1025a:	2008      	movs	r0, #8
   1025c:	f7fd f84a 	bl	d2f4 <malloc>
    value->vt = DLMS_DATA_TYPE_ARRAY;
   10260:	2201      	movs	r2, #1
    value->Arr = (variantArray*)gxmalloc(sizeof(variantArray));
   10262:	f8c8 0008 	str.w	r0, [r8, #8]
    value->vt = DLMS_DATA_TYPE_ARRAY;
   10266:	f888 2000 	strb.w	r2, [r8]
    if (value->Arr == NULL)
   1026a:	2800      	cmp	r0, #0
   1026c:	f000 80e5 	beq.w	1043a <getCompactArray+0x22e>
    va_init(value->Arr);
   10270:	f00b fe07 	bl	1be82 <va_init>
    if (dt == DLMS_DATA_TYPE_STRUCTURE)
   10274:	2d02      	cmp	r5, #2
   10276:	f040 80d4 	bne.w	10422 <getCompactArray+0x216>
        va_init(&cols);
   1027a:	a806      	add	r0, sp, #24
   1027c:	f00b fe01 	bl	1be82 <va_init>
        if ((ret = getDataTypes(buff, &cols, len)) != 0)
   10280:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   10284:	a906      	add	r1, sp, #24
   10286:	4630      	mov	r0, r6
   10288:	f7ff fcc4 	bl	fc14 <getDataTypes>
   1028c:	4604      	mov	r4, r0
   1028e:	b118      	cbz	r0, 10298 <getCompactArray+0x8c>
        va_clear(&cols);
   10290:	a806      	add	r0, sp, #24
   10292:	f00b fe4b 	bl	1bf2c <va_clear>
        return 0;
   10296:	e005      	b.n	102a4 <getCompactArray+0x98>
        if (onlyDataTypes)
   10298:	b147      	cbz	r7, 102ac <getCompactArray+0xa0>
            va_attach2(value->Arr, &cols);
   1029a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1029e:	a906      	add	r1, sp, #24
   102a0:	f00b fedd 	bl	1c05e <va_attach2>
}
   102a4:	4620      	mov	r0, r4
   102a6:	b00b      	add	sp, #44	; 0x2c
   102a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (buff->position == buff->size)
   102ac:	8932      	ldrh	r2, [r6, #8]
   102ae:	88f3      	ldrh	r3, [r6, #6]
   102b0:	429a      	cmp	r2, r3
   102b2:	d12a      	bne.n	1030a <getCompactArray+0xfe>
            len = 0;
   102b4:	f8ad 000a 	strh.w	r0, [sp, #10]
        int start = buff->position;
   102b8:	8933      	ldrh	r3, [r6, #8]
   102ba:	9301      	str	r3, [sp, #4]
        while (buff->position - start < len)
   102bc:	9a01      	ldr	r2, [sp, #4]
   102be:	8933      	ldrh	r3, [r6, #8]
   102c0:	1a9b      	subs	r3, r3, r2
   102c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   102c6:	4293      	cmp	r3, r2
   102c8:	dae2      	bge.n	10290 <getCompactArray+0x84>
            variantArray* row = (variantArray*)gxmalloc(sizeof(variantArray));
   102ca:	2008      	movs	r0, #8
   102cc:	f7fd f812 	bl	d2f4 <malloc>
            if (row == NULL)
   102d0:	4607      	mov	r7, r0
   102d2:	2800      	cmp	r0, #0
   102d4:	f000 80a2 	beq.w	1041c <getCompactArray+0x210>
            va_init(row);
   102d8:	f00b fdd3 	bl	1be82 <va_init>
            for (pos = 0; pos != cols.size; ++pos)
   102dc:	f04f 0900 	mov.w	r9, #0
   102e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   102e4:	4599      	cmp	r9, r3
   102e6:	d079      	beq.n	103dc <getCompactArray+0x1d0>
                if ((ret = va_getByIndex(&cols, pos, &it)) != 0)
   102e8:	aa03      	add	r2, sp, #12
   102ea:	4649      	mov	r1, r9
   102ec:	a806      	add	r0, sp, #24
   102ee:	f00b fec0 	bl	1c072 <va_getByIndex>
   102f2:	4605      	mov	r5, r0
   102f4:	b1b0      	cbz	r0, 10324 <getCompactArray+0x118>
                            va_clear(&cols);
   102f6:	a806      	add	r0, sp, #24
   102f8:	f00b fe18 	bl	1bf2c <va_clear>
                            va_clear(row);
   102fc:	4638      	mov	r0, r7
   102fe:	f00b fe15 	bl	1bf2c <va_clear>
                            gxfree(row);
   10302:	4638      	mov	r0, r7
   10304:	f7fc fffe 	bl	d304 <free>
                            return ret;
   10308:	e00a      	b.n	10320 <getCompactArray+0x114>
            if ((ret = hlp_getObjectCount2(buff, &len)) != 0)
   1030a:	f10d 010a 	add.w	r1, sp, #10
   1030e:	4630      	mov	r0, r6
   10310:	f00b f948 	bl	1b5a4 <hlp_getObjectCount2>
   10314:	4605      	mov	r5, r0
   10316:	2800      	cmp	r0, #0
   10318:	d0ce      	beq.n	102b8 <getCompactArray+0xac>
                va_clear(&cols);
   1031a:	a806      	add	r0, sp, #24
   1031c:	f00b fe06 	bl	1bf2c <va_clear>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
   10320:	462c      	mov	r4, r5
   10322:	e7bf      	b.n	102a4 <getCompactArray+0x98>
                if (it->vt == DLMS_DATA_TYPE_STRUCTURE)
   10324:	9903      	ldr	r1, [sp, #12]
   10326:	780d      	ldrb	r5, [r1, #0]
   10328:	2d02      	cmp	r5, #2
   1032a:	d109      	bne.n	10340 <getCompactArray+0x134>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, row, 1)) != 0)
   1032c:	6889      	ldr	r1, [r1, #8]
   1032e:	2301      	movs	r3, #1
   10330:	463a      	mov	r2, r7
   10332:	4630      	mov	r0, r6
   10334:	f7ff ff20 	bl	10178 <getCompactArrayItem2>
                    if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, row, 1)) != 0)
   10338:	4605      	mov	r5, r0
   1033a:	2800      	cmp	r0, #0
   1033c:	d04a      	beq.n	103d4 <getCompactArray+0x1c8>
   1033e:	e7da      	b.n	102f6 <getCompactArray+0xea>
                else if (it->vt == DLMS_DATA_TYPE_ARRAY)
   10340:	2d01      	cmp	r5, #1
   10342:	d161      	bne.n	10408 <getCompactArray+0x1fc>
                    va_init(&tmp2);
   10344:	a808      	add	r0, sp, #32
   10346:	f00b fd9c 	bl	1be82 <va_init>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, &tmp2, 1)) != 0 ||
   1034a:	9903      	ldr	r1, [sp, #12]
   1034c:	462b      	mov	r3, r5
   1034e:	6889      	ldr	r1, [r1, #8]
   10350:	aa08      	add	r2, sp, #32
   10352:	4630      	mov	r0, r6
   10354:	f7ff ff10 	bl	10178 <getCompactArrayItem2>
   10358:	4683      	mov	fp, r0
   1035a:	b930      	cbnz	r0, 1036a <getCompactArray+0x15e>
                        (ret = va_getByIndex(&tmp2, 0, &it2)) != 0)
   1035c:	4601      	mov	r1, r0
   1035e:	aa04      	add	r2, sp, #16
   10360:	a808      	add	r0, sp, #32
   10362:	f00b fe86 	bl	1c072 <va_getByIndex>
                    if ((ret = getCompactArrayItem2(buff, it->Arr, &tmp2, 1)) != 0 ||
   10366:	4683      	mov	fp, r0
   10368:	b360      	cbz	r0, 103c4 <getCompactArray+0x1b8>
                        va_clear(&tmp2);
   1036a:	a808      	add	r0, sp, #32
   1036c:	f00b fdde 	bl	1bf2c <va_clear>
                        va_clear(&cols);
   10370:	a806      	add	r0, sp, #24
   10372:	f00b fddb 	bl	1bf2c <va_clear>
                        va_clear(row);
   10376:	4638      	mov	r0, r7
   10378:	f00b fdd8 	bl	1bf2c <va_clear>
                        gxfree(row);
   1037c:	4638      	mov	r0, r7
   1037e:	f7fc ffc1 	bl	d304 <free>
                        return ret;
   10382:	465d      	mov	r5, fp
   10384:	e7cc      	b.n	10320 <getCompactArray+0x114>
                        if ((ret = va_getByIndex(it2->Arr, pos1, &it3)) != 0)
   10386:	aa05      	add	r2, sp, #20
   10388:	4659      	mov	r1, fp
   1038a:	f00b fe72 	bl	1c072 <va_getByIndex>
   1038e:	4605      	mov	r5, r0
   10390:	b118      	cbz	r0, 1039a <getCompactArray+0x18e>
                            va_clear(&tmp2);
   10392:	a808      	add	r0, sp, #32
   10394:	f00b fdca 	bl	1bf2c <va_clear>
   10398:	e7ad      	b.n	102f6 <getCompactArray+0xea>
                        it4 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1039a:	2010      	movs	r0, #16
   1039c:	f7fc ffaa 	bl	d2f4 <malloc>
                        if (it4 == NULL)
   103a0:	4682      	mov	sl, r0
   103a2:	2800      	cmp	r0, #0
   103a4:	d03a      	beq.n	1041c <getCompactArray+0x210>
                        var_init(it4);
   103a6:	f00b fc8a 	bl	1bcbe <var_init>
                        if ((ret = var_copy(it4, it3)) != 0)
   103aa:	9905      	ldr	r1, [sp, #20]
   103ac:	4650      	mov	r0, sl
   103ae:	f7f4 f8fd 	bl	45ac <var_copy>
   103b2:	4605      	mov	r5, r0
   103b4:	2800      	cmp	r0, #0
   103b6:	d1b3      	bne.n	10320 <getCompactArray+0x114>
                        va_push(row, it4);
   103b8:	4651      	mov	r1, sl
   103ba:	4638      	mov	r0, r7
   103bc:	f00b fd8d 	bl	1beda <va_push>
                    for (pos1 = 0; pos1 != it2->Arr->size; ++pos1)
   103c0:	f10b 0b01 	add.w	fp, fp, #1
   103c4:	9b04      	ldr	r3, [sp, #16]
   103c6:	6898      	ldr	r0, [r3, #8]
   103c8:	88c3      	ldrh	r3, [r0, #6]
   103ca:	459b      	cmp	fp, r3
   103cc:	d1db      	bne.n	10386 <getCompactArray+0x17a>
                    va_clear(&tmp2);
   103ce:	a808      	add	r0, sp, #32
   103d0:	f00b fdac 	bl	1bf2c <va_clear>
                if (buff->position == buff->size)
   103d4:	8932      	ldrh	r2, [r6, #8]
   103d6:	88f3      	ldrh	r3, [r6, #6]
   103d8:	429a      	cmp	r2, r3
   103da:	d11c      	bne.n	10416 <getCompactArray+0x20a>
            if (row->size >= cols.size)
   103dc:	88fa      	ldrh	r2, [r7, #6]
   103de:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   103e2:	429a      	cmp	r2, r3
   103e4:	f4ff af54 	bcc.w	10290 <getCompactArray+0x84>
                dlmsVARIANT* tmp = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   103e8:	2010      	movs	r0, #16
   103ea:	f7fc ff83 	bl	d2f4 <malloc>
                if (tmp == NULL)
   103ee:	4605      	mov	r5, r0
   103f0:	b1a0      	cbz	r0, 1041c <getCompactArray+0x210>
                var_clear(tmp);
   103f2:	f00b fdc0 	bl	1bf76 <var_clear>
                tmp->vt = DLMS_DATA_TYPE_ARRAY;
   103f6:	2301      	movs	r3, #1
                va_push(value->Arr, tmp);
   103f8:	f8d8 0008 	ldr.w	r0, [r8, #8]
                tmp->Arr = row;
   103fc:	60af      	str	r7, [r5, #8]
                tmp->vt = DLMS_DATA_TYPE_ARRAY;
   103fe:	702b      	strb	r3, [r5, #0]
                va_push(value->Arr, tmp);
   10400:	4629      	mov	r1, r5
   10402:	f00b fd6a 	bl	1beda <va_push>
   10406:	e759      	b.n	102bc <getCompactArray+0xb0>
                    if ((ret = getCompactArrayItem(buff, (DLMS_DATA_TYPE)it->bVal, row, 1)) != 0)
   10408:	7a09      	ldrb	r1, [r1, #8]
   1040a:	2301      	movs	r3, #1
   1040c:	463a      	mov	r2, r7
   1040e:	4630      	mov	r0, r6
   10410:	f7ff fe39 	bl	10086 <getCompactArrayItem>
   10414:	e790      	b.n	10338 <getCompactArray+0x12c>
            for (pos = 0; pos != cols.size; ++pos)
   10416:	f109 0901 	add.w	r9, r9, #1
   1041a:	e761      	b.n	102e0 <getCompactArray+0xd4>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
   1041c:	f44f 7582 	mov.w	r5, #260	; 0x104
   10420:	e77e      	b.n	10320 <getCompactArray+0x114>
    return getCompactArrayItem(buff, dt, value->Arr, len);
   10422:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   10426:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1042a:	4629      	mov	r1, r5
   1042c:	4630      	mov	r0, r6
   1042e:	f7ff fe2a 	bl	10086 <getCompactArrayItem>
   10432:	e6fd      	b.n	10230 <getCompactArray+0x24>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   10434:	f44f 7481 	mov.w	r4, #258	; 0x102
   10438:	e734      	b.n	102a4 <getCompactArray+0x98>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1043a:	f44f 7482 	mov.w	r4, #260	; 0x104
   1043e:	e731      	b.n	102a4 <getCompactArray+0x98>

00010440 <dlms_getHDLCAddress>:
{
   10440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for (pos = (uint16_t)buff->position; pos != (uint16_t)buff->size; ++pos)
   10444:	f8b0 8008 	ldrh.w	r8, [r0, #8]
{
   10448:	4604      	mov	r4, r0
   1044a:	460d      	mov	r5, r1
   1044c:	4617      	mov	r7, r2
    int ret, size = 0;
   1044e:	2600      	movs	r6, #0
    for (pos = (uint16_t)buff->position; pos != (uint16_t)buff->size; ++pos)
   10450:	88e3      	ldrh	r3, [r4, #6]
   10452:	eb08 0106 	add.w	r1, r8, r6
   10456:	b289      	uxth	r1, r1
   10458:	428b      	cmp	r3, r1
   1045a:	d00a      	beq.n	10472 <dlms_getHDLCAddress+0x32>
        if ((ret = bb_getUInt8ByIndex(buff, pos, &ch)) != 0)
   1045c:	f10d 0203 	add.w	r2, sp, #3
   10460:	4620      	mov	r0, r4
        ++size;
   10462:	3601      	adds	r6, #1
        if ((ret = bb_getUInt8ByIndex(buff, pos, &ch)) != 0)
   10464:	f7fe f961 	bl	e72a <bb_getUInt8ByIndex>
   10468:	b9a8      	cbnz	r0, 10496 <dlms_getHDLCAddress+0x56>
        if ((ch & 0x1) == 1)
   1046a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1046e:	07db      	lsls	r3, r3, #31
   10470:	d5ee      	bpl.n	10450 <dlms_getHDLCAddress+0x10>
    if (checkClientAddress && size != 1)
   10472:	b127      	cbz	r7, 1047e <dlms_getHDLCAddress+0x3e>
   10474:	2e01      	cmp	r6, #1
   10476:	d004      	beq.n	10482 <dlms_getHDLCAddress+0x42>
        return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
   10478:	f240 1007 	movw	r0, #263	; 0x107
   1047c:	e00b      	b.n	10496 <dlms_getHDLCAddress+0x56>
    if (size == 1)
   1047e:	2e01      	cmp	r6, #1
   10480:	d10c      	bne.n	1049c <dlms_getHDLCAddress+0x5c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10482:	f10d 0103 	add.w	r1, sp, #3
   10486:	4620      	mov	r0, r4
   10488:	f7fe f931 	bl	e6ee <bb_getUInt8>
   1048c:	b918      	cbnz	r0, 10496 <dlms_getHDLCAddress+0x56>
        *address = ((ch & 0xFE) >> 1);
   1048e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10492:	085b      	lsrs	r3, r3, #1
        *address = ((l & 0xFE) >> 1) | ((l & 0xFE00) >> 2)
   10494:	602b      	str	r3, [r5, #0]
}
   10496:	b002      	add	sp, #8
   10498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (size == 2)
   1049c:	2e02      	cmp	r6, #2
   1049e:	d10e      	bne.n	104be <dlms_getHDLCAddress+0x7e>
        if ((ret = bb_getUInt16(buff, &s)) != 0)
   104a0:	a901      	add	r1, sp, #4
   104a2:	4620      	mov	r0, r4
   104a4:	f7fe f94c 	bl	e740 <bb_getUInt16>
   104a8:	2800      	cmp	r0, #0
   104aa:	d1f4      	bne.n	10496 <dlms_getHDLCAddress+0x56>
        *address = ((s & 0xFE) >> 1) | ((s & 0xFE00) >> 2);
   104ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   104b0:	f3c3 0246 	ubfx	r2, r3, #1, #7
   104b4:	109b      	asrs	r3, r3, #2
   104b6:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
            | ((l & 0xFE0000) >> 3) | ((l & 0xFE000000) >> 4);
   104ba:	4313      	orrs	r3, r2
   104bc:	e7ea      	b.n	10494 <dlms_getHDLCAddress+0x54>
    else if (size == 4)
   104be:	2e04      	cmp	r6, #4
   104c0:	d114      	bne.n	104ec <dlms_getHDLCAddress+0xac>
        if ((ret = bb_getUInt32(buff, &l)) != 0)
   104c2:	a901      	add	r1, sp, #4
   104c4:	4620      	mov	r0, r4
   104c6:	f7fe f950 	bl	e76a <bb_getUInt32>
   104ca:	2800      	cmp	r0, #0
   104cc:	d1e3      	bne.n	10496 <dlms_getHDLCAddress+0x56>
        *address = ((l & 0xFE) >> 1) | ((l & 0xFE00) >> 2)
   104ce:	9b01      	ldr	r3, [sp, #4]
   104d0:	0899      	lsrs	r1, r3, #2
   104d2:	f3c3 0246 	ubfx	r2, r3, #1, #7
   104d6:	f401 517e 	and.w	r1, r1, #16256	; 0x3f80
   104da:	430a      	orrs	r2, r1
            | ((l & 0xFE0000) >> 3) | ((l & 0xFE000000) >> 4);
   104dc:	08d9      	lsrs	r1, r3, #3
   104de:	f401 11fe 	and.w	r1, r1, #2080768	; 0x1fc000
   104e2:	091b      	lsrs	r3, r3, #4
   104e4:	430a      	orrs	r2, r1
   104e6:	f003 637e 	and.w	r3, r3, #266338304	; 0xfe00000
   104ea:	e7e6      	b.n	104ba <dlms_getHDLCAddress+0x7a>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   104ec:	f44f 7081 	mov.w	r0, #258	; 0x102
   104f0:	e7d1      	b.n	10496 <dlms_getHDLCAddress+0x56>

000104f2 <dlms_checkHdlcAddress>:
{
   104f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   104f4:	4615      	mov	r5, r2
   104f6:	b085      	sub	sp, #20
   104f8:	4606      	mov	r6, r0
   104fa:	460c      	mov	r4, r1
    if ((ret = dlms_getHDLCAddress(reply, &target, 0)) != 0)
   104fc:	2200      	movs	r2, #0
   104fe:	a903      	add	r1, sp, #12
   10500:	4628      	mov	r0, r5
{
   10502:	461f      	mov	r7, r3
    if ((ret = dlms_getHDLCAddress(reply, &target, 0)) != 0)
   10504:	f7ff ff9c 	bl	10440 <dlms_getHDLCAddress>
   10508:	b998      	cbnz	r0, 10532 <dlms_checkHdlcAddress+0x40>
    if ((ret = dlms_getHDLCAddress(reply, &source, server)) != 0)
   1050a:	4632      	mov	r2, r6
   1050c:	a902      	add	r1, sp, #8
   1050e:	4628      	mov	r0, r5
   10510:	f7ff ff96 	bl	10440 <dlms_getHDLCAddress>
   10514:	b968      	cbnz	r0, 10532 <dlms_checkHdlcAddress+0x40>
    if (server)
   10516:	9a03      	ldr	r2, [sp, #12]
   10518:	b316      	cbz	r6, 10560 <dlms_checkHdlcAddress+0x6e>
        if (settings->serverAddress != 0 && settings->serverAddress != target)
   1051a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1051c:	b15b      	cbz	r3, 10536 <dlms_checkHdlcAddress+0x44>
   1051e:	4293      	cmp	r3, r2
   10520:	d009      	beq.n	10536 <dlms_checkHdlcAddress+0x44>
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
   10522:	8929      	ldrh	r1, [r5, #8]
   10524:	f10d 0207 	add.w	r2, sp, #7
   10528:	4628      	mov	r0, r5
   1052a:	f7fe f8fe 	bl	e72a <bb_getUInt8ByIndex>
                return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
   1052e:	f44f 7084 	mov.w	r0, #264	; 0x108
}
   10532:	b005      	add	sp, #20
   10534:	bdf0      	pop	{r4, r5, r6, r7, pc}
            settings->serverAddress = (uint16_t)target;
   10536:	b292      	uxth	r2, r2
   10538:	6322      	str	r2, [r4, #48]	; 0x30
        if (settings->clientAddress != 0 && settings->clientAddress != source)
   1053a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1053c:	9b02      	ldr	r3, [sp, #8]
   1053e:	b16a      	cbz	r2, 1055c <dlms_checkHdlcAddress+0x6a>
   10540:	429a      	cmp	r2, r3
   10542:	d00b      	beq.n	1055c <dlms_checkHdlcAddress+0x6a>
            if (bb_getUInt8ByIndex(reply, reply->position, &ch) != 0)
   10544:	8929      	ldrh	r1, [r5, #8]
   10546:	f10d 0207 	add.w	r2, sp, #7
   1054a:	4628      	mov	r0, r5
   1054c:	f7fe f8ed 	bl	e72a <bb_getUInt8ByIndex>
   10550:	bb20      	cbnz	r0, 1059c <dlms_checkHdlcAddress+0xaa>
            if (ch == DLMS_COMMAND_SNRM)
   10552:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10556:	2b93      	cmp	r3, #147	; 0x93
   10558:	d120      	bne.n	1059c <dlms_checkHdlcAddress+0xaa>
                settings->clientAddress = (uint16_t)source;
   1055a:	9b02      	ldr	r3, [sp, #8]
            settings->clientAddress = (uint16_t)source;
   1055c:	85e3      	strh	r3, [r4, #46]	; 0x2e
   1055e:	e7e8      	b.n	10532 <dlms_checkHdlcAddress+0x40>
        if (settings->clientAddress != target)
   10560:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
   10562:	9902      	ldr	r1, [sp, #8]
   10564:	4296      	cmp	r6, r2
   10566:	d009      	beq.n	1057c <dlms_checkHdlcAddress+0x8a>
            if (settings->clientAddress == source && settings->serverAddress == target)
   10568:	428e      	cmp	r6, r1
   1056a:	d104      	bne.n	10576 <dlms_checkHdlcAddress+0x84>
   1056c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1056e:	4293      	cmp	r3, r2
   10570:	d101      	bne.n	10576 <dlms_checkHdlcAddress+0x84>
                reply->position = index + 1;
   10572:	1c7b      	adds	r3, r7, #1
   10574:	812b      	strh	r3, [r5, #8]
            return DLMS_ERROR_CODE_FALSE;
   10576:	f04f 30ff 	mov.w	r0, #4294967295
   1057a:	e7da      	b.n	10532 <dlms_checkHdlcAddress+0x40>
        if (settings->serverAddress != source &&
   1057c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1057e:	428b      	cmp	r3, r1
   10580:	d0d7      	beq.n	10532 <dlms_checkHdlcAddress+0x40>
            (settings->serverAddress & 0x7F) != 0x7F && (settings->serverAddress & 0x3FFF) != 0x3FFF)
   10582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        if (settings->serverAddress != source &&
   10586:	2a7f      	cmp	r2, #127	; 0x7f
   10588:	d0d3      	beq.n	10532 <dlms_checkHdlcAddress+0x40>
            (settings->serverAddress & 0x7F) != 0x7F && (settings->serverAddress & 0x3FFF) != 0x3FFF)
   1058a:	f3c3 030d 	ubfx	r3, r3, #0, #14
   1058e:	f643 70ff 	movw	r0, #16383	; 0x3fff
   10592:	1a18      	subs	r0, r3, r0
   10594:	bf18      	it	ne
   10596:	f04f 30ff 	movne.w	r0, #4294967295
   1059a:	e7ca      	b.n	10532 <dlms_checkHdlcAddress+0x40>
                return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
   1059c:	f240 1007 	movw	r0, #263	; 0x107
   105a0:	e7c7      	b.n	10532 <dlms_checkHdlcAddress+0x40>

000105a2 <dlms_getDataFromFrame>:
{
   105a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (data->packetLength < reply->position)
   105a6:	8d8c      	ldrh	r4, [r1, #44]	; 0x2c
   105a8:	8903      	ldrh	r3, [r0, #8]
    uint16_t offset = data->data.size;
   105aa:	f8b1 800a 	ldrh.w	r8, [r1, #10]
    if (data->packetLength < reply->position)
   105ae:	429c      	cmp	r4, r3
{
   105b0:	4605      	mov	r5, r0
   105b2:	460e      	mov	r6, r1
   105b4:	4617      	mov	r7, r2
    if (data->packetLength < reply->position)
   105b6:	d316      	bcc.n	105e6 <dlms_getDataFromFrame+0x44>
        cnt = data->packetLength - reply->position;
   105b8:	1ae4      	subs	r4, r4, r3
   105ba:	b2a4      	uxth	r4, r4
    if (cnt != 0)
   105bc:	b19c      	cbz	r4, 105e6 <dlms_getDataFromFrame+0x44>
        if ((ret = bb_capacity(&data->data, offset + cnt)) != 0 ||
   105be:	f101 0904 	add.w	r9, r1, #4
   105c2:	eb08 0104 	add.w	r1, r8, r4
   105c6:	b289      	uxth	r1, r1
   105c8:	4648      	mov	r0, r9
   105ca:	f7fd febd 	bl	e348 <bb_capacity>
   105ce:	b968      	cbnz	r0, 105ec <dlms_getDataFromFrame+0x4a>
            (ret = bb_set2(&data->data, reply, reply->position, cnt)) != 0)
   105d0:	892a      	ldrh	r2, [r5, #8]
   105d2:	4623      	mov	r3, r4
   105d4:	4629      	mov	r1, r5
   105d6:	4648      	mov	r0, r9
   105d8:	f7fe f82e 	bl	e638 <bb_set2>
        if ((ret = bb_capacity(&data->data, offset + cnt)) != 0 ||
   105dc:	b930      	cbnz	r0, 105ec <dlms_getDataFromFrame+0x4a>
        if (hdlc)
   105de:	b117      	cbz	r7, 105e6 <dlms_getDataFromFrame+0x44>
            reply->position += 3;
   105e0:	892b      	ldrh	r3, [r5, #8]
   105e2:	3303      	adds	r3, #3
   105e4:	812b      	strh	r3, [r5, #8]
    data->data.position = offset;
   105e6:	f8a6 800c 	strh.w	r8, [r6, #12]
    return 0;
   105ea:	2000      	movs	r0, #0
}
   105ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000105f0 <dlms_getHdlcData>:
{
   105f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105f4:	b08d      	sub	sp, #52	; 0x34
   105f6:	461f      	mov	r7, r3
   105f8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   105fc:	9305      	str	r3, [sp, #20]
   105fe:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    uint16_t packetStartID = (uint16_t)reply->position;
   10602:	f8b2 b008 	ldrh.w	fp, [r2, #8]
{
   10606:	9306      	str	r3, [sp, #24]
    if (reply->size - reply->position < 9)
   10608:	88d3      	ldrh	r3, [r2, #6]
{
   1060a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    if (reply->size - reply->position < 9)
   1060e:	eba3 030b 	sub.w	r3, r3, fp
   10612:	2b08      	cmp	r3, #8
{
   10614:	4682      	mov	sl, r0
   10616:	460e      	mov	r6, r1
   10618:	4615      	mov	r5, r2
    if (reply->size - reply->position < 9)
   1061a:	dc03      	bgt.n	10624 <dlms_getHdlcData+0x34>
        data->complete = 0;
   1061c:	2000      	movs	r0, #0
   1061e:	7438      	strb	r0, [r7, #16]
        return 0;
   10620:	4604      	mov	r4, r0
   10622:	e086      	b.n	10732 <dlms_getHdlcData+0x142>
    data->complete = 1;
   10624:	2301      	movs	r3, #1
   10626:	743b      	strb	r3, [r7, #16]
    for (pos = (uint16_t)reply->position; pos < reply->size; ++pos)
   10628:	f8b2 8008 	ldrh.w	r8, [r2, #8]
   1062c:	88eb      	ldrh	r3, [r5, #6]
   1062e:	4543      	cmp	r3, r8
   10630:	d820      	bhi.n	10674 <dlms_getHdlcData+0x84>
    uint16_t packetStartID = (uint16_t)reply->position;
   10632:	46d8      	mov	r8, fp
    if (reply->position == reply->size)
   10634:	892a      	ldrh	r2, [r5, #8]
   10636:	88eb      	ldrh	r3, [r5, #6]
   10638:	429a      	cmp	r2, r3
   1063a:	d0ef      	beq.n	1061c <dlms_getHdlcData+0x2c>
    if ((ret = bb_getUInt8(reply, frame)) != 0)
   1063c:	4649      	mov	r1, r9
   1063e:	4628      	mov	r0, r5
   10640:	f7fe f855 	bl	e6ee <bb_getUInt8>
   10644:	4604      	mov	r4, r0
   10646:	2800      	cmp	r0, #0
   10648:	d173      	bne.n	10732 <dlms_getHdlcData+0x142>
    if ((*frame & 0xF0) != 0xA0)
   1064a:	f899 3000 	ldrb.w	r3, [r9]
   1064e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   10652:	2aa0      	cmp	r2, #160	; 0xa0
   10654:	d01f      	beq.n	10696 <dlms_getHdlcData+0xa6>
        --reply->position;
   10656:	892b      	ldrh	r3, [r5, #8]
   10658:	3b01      	subs	r3, #1
        reply->position -= 2;
   1065a:	812b      	strh	r3, [r5, #8]
        return dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
   1065c:	9b06      	ldr	r3, [sp, #24]
   1065e:	9302      	str	r3, [sp, #8]
   10660:	9b05      	ldr	r3, [sp, #20]
   10662:	462a      	mov	r2, r5
   10664:	e9cd 9300 	strd	r9, r3, [sp]
   10668:	4631      	mov	r1, r6
   1066a:	463b      	mov	r3, r7
   1066c:	4650      	mov	r0, sl
   1066e:	f7ff ffbf 	bl	105f0 <dlms_getHdlcData>
   10672:	e7d5      	b.n	10620 <dlms_getHdlcData+0x30>
        if ((ret = bb_getUInt8(reply, &ch)) != 0)
   10674:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
   10678:	4628      	mov	r0, r5
   1067a:	f7fe f838 	bl	e6ee <bb_getUInt8>
   1067e:	4604      	mov	r4, r0
   10680:	2800      	cmp	r0, #0
   10682:	d156      	bne.n	10732 <dlms_getHdlcData+0x142>
        if (ch == HDLC_FRAME_START_END)
   10684:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   10688:	2b7e      	cmp	r3, #126	; 0x7e
   1068a:	d0d3      	beq.n	10634 <dlms_getHdlcData+0x44>
    for (pos = (uint16_t)reply->position; pos < reply->size; ++pos)
   1068c:	f108 0801 	add.w	r8, r8, #1
   10690:	fa1f f888 	uxth.w	r8, r8
   10694:	e7ca      	b.n	1062c <dlms_getHdlcData+0x3c>
    if ((*frame & 0x7) != 0)
   10696:	f013 0b07 	ands.w	fp, r3, #7
        frameLen = ((*frame & 0x7) << 8);
   1069a:	bf18      	it	ne
   1069c:	021b      	lslne	r3, r3, #8
    if ((ret = bb_getUInt8(reply, &ch)) != 0)
   1069e:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
   106a2:	4628      	mov	r0, r5
        frameLen = ((*frame & 0x7) << 8);
   106a4:	bf18      	it	ne
   106a6:	f403 6be0 	andne.w	fp, r3, #1792	; 0x700
    if ((ret = bb_getUInt8(reply, &ch)) != 0)
   106aa:	f7fe f820 	bl	e6ee <bb_getUInt8>
   106ae:	4604      	mov	r4, r0
   106b0:	2800      	cmp	r0, #0
   106b2:	d13e      	bne.n	10732 <dlms_getHdlcData+0x142>
    frameLen += ch;
   106b4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    if ((reply->size - reply->position + 1) < frameLen)
   106b8:	892a      	ldrh	r2, [r5, #8]
    frameLen += ch;
   106ba:	445b      	add	r3, fp
   106bc:	9307      	str	r3, [sp, #28]
    if ((reply->size - reply->position + 1) < frameLen)
   106be:	88eb      	ldrh	r3, [r5, #6]
   106c0:	3301      	adds	r3, #1
   106c2:	1a9b      	subs	r3, r3, r2
   106c4:	9a07      	ldr	r2, [sp, #28]
   106c6:	4293      	cmp	r3, r2
   106c8:	da03      	bge.n	106d2 <dlms_getHdlcData+0xe2>
        data->complete = 0;
   106ca:	7438      	strb	r0, [r7, #16]
                    reply->position = pos;
   106cc:	f8a5 8008 	strh.w	r8, [r5, #8]
   106d0:	e02f      	b.n	10732 <dlms_getHdlcData+0x142>
    eopPos = (uint16_t)(frameLen + packetStartID + 1);
   106d2:	9b07      	ldr	r3, [sp, #28]
   106d4:	4443      	add	r3, r8
   106d6:	b21b      	sxth	r3, r3
   106d8:	f103 0b01 	add.w	fp, r3, #1
   106dc:	fa1f fb8b 	uxth.w	fp, fp
    if ((ret = bb_getUInt8ByIndex(reply, eopPos, &ch)) != 0)
   106e0:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
   106e4:	4659      	mov	r1, fp
   106e6:	4628      	mov	r0, r5
    eopPos = (uint16_t)(frameLen + packetStartID + 1);
   106e8:	9308      	str	r3, [sp, #32]
    if ((ret = bb_getUInt8ByIndex(reply, eopPos, &ch)) != 0)
   106ea:	f7fe f81e 	bl	e72a <bb_getUInt8ByIndex>
   106ee:	4604      	mov	r4, r0
   106f0:	b9f8      	cbnz	r0, 10732 <dlms_getHdlcData+0x142>
    if (ch != HDLC_FRAME_START_END)
   106f2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   106f6:	2b7e      	cmp	r3, #126	; 0x7e
   106f8:	d002      	beq.n	10700 <dlms_getHdlcData+0x110>
        reply->position -= 2;
   106fa:	892b      	ldrh	r3, [r5, #8]
   106fc:	3b02      	subs	r3, #2
   106fe:	e7ac      	b.n	1065a <dlms_getHdlcData+0x6a>
    ret = dlms_checkHdlcAddress(server, settings, reply, eopPos);
   10700:	465b      	mov	r3, fp
   10702:	462a      	mov	r2, r5
   10704:	4631      	mov	r1, r6
   10706:	4650      	mov	r0, sl
   10708:	f7ff fef3 	bl	104f2 <dlms_checkHdlcAddress>
    if (ret != 0)
   1070c:	4604      	mov	r4, r0
   1070e:	b1d8      	cbz	r0, 10748 <dlms_getHdlcData+0x158>
        if (ret == DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS)
   10710:	f240 1307 	movw	r3, #263	; 0x107
   10714:	4298      	cmp	r0, r3
   10716:	d00c      	beq.n	10732 <dlms_getHdlcData+0x142>
            if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS &&
   10718:	f5b0 7f84 	cmp.w	r0, #264	; 0x108
   1071c:	d10d      	bne.n	1073a <dlms_getHdlcData+0x14a>
                reply->position + 4 == reply->size)
   1071e:	892b      	ldrh	r3, [r5, #8]
   10720:	88ea      	ldrh	r2, [r5, #6]
   10722:	3304      	adds	r3, #4
            if (ret == DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS &&
   10724:	4293      	cmp	r3, r2
   10726:	d10a      	bne.n	1073e <dlms_getHdlcData+0x14e>
                data->packetLength = 0;
   10728:	2300      	movs	r3, #0
   1072a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                bb_clear(reply);
   1072c:	4628      	mov	r0, r5
   1072e:	f7fd ffc8 	bl	e6c2 <bb_clear>
}
   10732:	4620      	mov	r0, r4
   10734:	b00d      	add	sp, #52	; 0x34
   10736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (ret == DLMS_ERROR_CODE_FALSE)
   1073a:	3401      	adds	r4, #1
   1073c:	d08e      	beq.n	1065c <dlms_getHdlcData+0x6c>
            reply->position = packetStartID + 1;
   1073e:	f108 0801 	add.w	r8, r8, #1
   10742:	f8a5 8008 	strh.w	r8, [r5, #8]
            ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
   10746:	e789      	b.n	1065c <dlms_getHdlcData+0x6c>
    if ((ret = bb_getUInt8(reply, frame)) != 0)
   10748:	4649      	mov	r1, r9
   1074a:	4628      	mov	r0, r5
    unsigned char moreData = (*frame & 0x8) != 0;
   1074c:	f899 b000 	ldrb.w	fp, [r9]
    if ((ret = bb_getUInt8(reply, frame)) != 0)
   10750:	f7fd ffcd 	bl	e6ee <bb_getUInt8>
   10754:	4604      	mov	r4, r0
   10756:	2800      	cmp	r0, #0
   10758:	d1eb      	bne.n	10732 <dlms_getHdlcData+0x142>
    if (moreData)
   1075a:	783b      	ldrb	r3, [r7, #0]
   1075c:	f01b 0f08 	tst.w	fp, #8
        data->moreData |= DLMS_DATA_REQUEST_TYPES_FRAME;
   10760:	bf14      	ite	ne
   10762:	f043 0301 	orrne.w	r3, r3, #1
        data->moreData = ((DLMS_DATA_REQUEST_TYPES)(data->moreData & ~DLMS_DATA_REQUEST_TYPES_FRAME));
   10766:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
   1076a:	703b      	strb	r3, [r7, #0]
    if (!preEstablished && !checkFrame(settings, *frame))
   1076c:	9b05      	ldr	r3, [sp, #20]
   1076e:	b983      	cbnz	r3, 10792 <dlms_getHdlcData+0x1a2>
   10770:	f899 1000 	ldrb.w	r1, [r9]
   10774:	4630      	mov	r0, r6
   10776:	f001 f96b 	bl	11a50 <checkFrame>
   1077a:	b950      	cbnz	r0, 10792 <dlms_getHdlcData+0x1a2>
        reply->position = eopPos + 1;
   1077c:	9b08      	ldr	r3, [sp, #32]
   1077e:	3302      	adds	r3, #2
   10780:	812b      	strh	r3, [r5, #8]
        if (settings->server)
   10782:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   10786:	2b00      	cmp	r3, #0
   10788:	f43f af68 	beq.w	1065c <dlms_getHdlcData+0x6c>
            return DLMS_ERROR_CODE_INVALID_FRAME_NUMBER;
   1078c:	f240 1419 	movw	r4, #281	; 0x119
   10790:	e7cf      	b.n	10732 <dlms_getHdlcData+0x142>
        reply->position - packetStartID - 1);
   10792:	892a      	ldrh	r2, [r5, #8]
    crc = countCRC(reply, packetStartID + 1,
   10794:	f108 0b01 	add.w	fp, r8, #1
        reply->position - packetStartID - 1);
   10798:	3a01      	subs	r2, #1
    crc = countCRC(reply, packetStartID + 1,
   1079a:	eba2 0208 	sub.w	r2, r2, r8
   1079e:	4659      	mov	r1, fp
   107a0:	4628      	mov	r0, r5
   107a2:	f7f2 f8ed 	bl	2980 <countCRC.isra.0>
    if ((ret = bb_getUInt16(reply, &crcRead)) != 0)
   107a6:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
    crc = countCRC(reply, packetStartID + 1,
   107aa:	9009      	str	r0, [sp, #36]	; 0x24
    if ((ret = bb_getUInt16(reply, &crcRead)) != 0)
   107ac:	4628      	mov	r0, r5
   107ae:	f7fd ffc7 	bl	e740 <bb_getUInt16>
   107b2:	4604      	mov	r4, r0
   107b4:	2800      	cmp	r0, #0
   107b6:	d1bc      	bne.n	10732 <dlms_getHdlcData+0x142>
    if (crc != crcRead)
   107b8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
   107bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   107be:	8929      	ldrh	r1, [r5, #8]
   107c0:	4293      	cmp	r3, r2
   107c2:	d007      	beq.n	107d4 <dlms_getHdlcData+0x1e4>
        if (reply->size - reply->position > 8)
   107c4:	88eb      	ldrh	r3, [r5, #6]
   107c6:	1a5b      	subs	r3, r3, r1
   107c8:	2b08      	cmp	r3, #8
   107ca:	f73f af47 	bgt.w	1065c <dlms_getHdlcData+0x6c>
        return DLMS_ERROR_CODE_WRONG_CRC;
   107ce:	f240 140d 	movw	r4, #269	; 0x10d
   107d2:	e7ae      	b.n	10732 <dlms_getHdlcData+0x142>
    if (reply->position != packetStartID + frameLen + 1)
   107d4:	9b07      	ldr	r3, [sp, #28]
   107d6:	4498      	add	r8, r3
   107d8:	f108 0301 	add.w	r3, r8, #1
   107dc:	428b      	cmp	r3, r1
   107de:	d033      	beq.n	10848 <dlms_getHdlcData+0x258>
   107e0:	9309      	str	r3, [sp, #36]	; 0x24
        crc = countCRC(reply, packetStartID + 1, frameLen - 2);
   107e2:	9b07      	ldr	r3, [sp, #28]
   107e4:	4659      	mov	r1, fp
   107e6:	1e9a      	subs	r2, r3, #2
   107e8:	4628      	mov	r0, r5
   107ea:	f7f2 f8c9 	bl	2980 <countCRC.isra.0>
        if ((ret = bb_getUInt16ByIndex(reply, packetStartID + frameLen - 1, &crcRead)) != 0)
   107ee:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
        crc = countCRC(reply, packetStartID + 1, frameLen - 2);
   107f2:	4683      	mov	fp, r0
        if ((ret = bb_getUInt16ByIndex(reply, packetStartID + frameLen - 1, &crcRead)) != 0)
   107f4:	f108 31ff 	add.w	r1, r8, #4294967295
   107f8:	4628      	mov	r0, r5
   107fa:	f7fe f8a7 	bl	e94c <bb_getUInt16ByIndex>
   107fe:	2800      	cmp	r0, #0
   10800:	f47f af0e 	bne.w	10620 <dlms_getHdlcData+0x30>
        if (crc != crcRead)
   10804:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
   10808:	455a      	cmp	r2, fp
   1080a:	d1e0      	bne.n	107ce <dlms_getHdlcData+0x1de>
        data->packetLength = eopPos - 2;
   1080c:	9b08      	ldr	r3, [sp, #32]
   1080e:	1e5a      	subs	r2, r3, #1
   10810:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10812:	85ba      	strh	r2, [r7, #44]	; 0x2c
    if (*frame != 0x13 && *frame != 0x3 && (*frame & HDLC_FRAME_TYPE_U_FRAME) == HDLC_FRAME_TYPE_U_FRAME)
   10814:	f899 2000 	ldrb.w	r2, [r9]
   10818:	f002 01ef 	and.w	r1, r2, #239	; 0xef
   1081c:	2903      	cmp	r1, #3
   1081e:	d066      	beq.n	108ee <dlms_getHdlcData+0x2fe>
   10820:	f002 0103 	and.w	r1, r2, #3
   10824:	2903      	cmp	r1, #3
   10826:	d11f      	bne.n	10868 <dlms_getHdlcData+0x278>
        if (reply->position == packetStartID + frameLen + 1)
   10828:	892a      	ldrh	r2, [r5, #8]
   1082a:	4293      	cmp	r3, r2
   1082c:	d014      	beq.n	10858 <dlms_getHdlcData+0x268>
        data->command = (DLMS_COMMAND)*frame;
   1082e:	f899 3000 	ldrb.w	r3, [r9]
   10832:	707b      	strb	r3, [r7, #1]
        switch (data->command)
   10834:	2b73      	cmp	r3, #115	; 0x73
   10836:	d029      	beq.n	1088c <dlms_getHdlcData+0x29c>
   10838:	d80a      	bhi.n	10850 <dlms_getHdlcData+0x260>
   1083a:	2b1f      	cmp	r3, #31
   1083c:	d026      	beq.n	1088c <dlms_getHdlcData+0x29c>
   1083e:	2b53      	cmp	r3, #83	; 0x53
   10840:	d024      	beq.n	1088c <dlms_getHdlcData+0x29c>
            return DLMS_ERROR_CODE_REJECTED;
   10842:	f06f 0401 	mvn.w	r4, #1
   10846:	e774      	b.n	10732 <dlms_getHdlcData+0x142>
        data->packetLength = eopPos - 2;
   10848:	9a08      	ldr	r2, [sp, #32]
   1084a:	3a01      	subs	r2, #1
   1084c:	85ba      	strh	r2, [r7, #44]	; 0x2c
   1084e:	e7e1      	b.n	10814 <dlms_getHdlcData+0x224>
        switch (data->command)
   10850:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   10854:	2b93      	cmp	r3, #147	; 0x93
   10856:	e7f3      	b.n	10840 <dlms_getHdlcData+0x250>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
   10858:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
   1085c:	4628      	mov	r0, r5
   1085e:	f7fd ff46 	bl	e6ee <bb_getUInt8>
   10862:	2800      	cmp	r0, #0
   10864:	d0e3      	beq.n	1082e <dlms_getHdlcData+0x23e>
   10866:	e6db      	b.n	10620 <dlms_getHdlcData+0x30>
    else if (*frame != 0x13 && *frame != 0x3 && (*frame & HDLC_FRAME_TYPE_S_FRAME) == HDLC_FRAME_TYPE_S_FRAME)
   10868:	07d1      	lsls	r1, r2, #31
   1086a:	d540      	bpl.n	108ee <dlms_getHdlcData+0x2fe>
        else if (tmp == HDLC_CONTROL_FRAME_RECEIVE_NOT_READY)
   1086c:	f3c2 0281 	ubfx	r2, r2, #2, #2
   10870:	3a01      	subs	r2, #1
   10872:	2a01      	cmp	r2, #1
   10874:	d9e5      	bls.n	10842 <dlms_getHdlcData+0x252>
        if (reply->position == packetStartID + frameLen + 1)
   10876:	892a      	ldrh	r2, [r5, #8]
   10878:	4293      	cmp	r3, r2
   1087a:	d107      	bne.n	1088c <dlms_getHdlcData+0x29c>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
   1087c:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
   10880:	4628      	mov	r0, r5
   10882:	f7fd ff34 	bl	e6ee <bb_getUInt8>
   10886:	2800      	cmp	r0, #0
   10888:	f47f aeca 	bne.w	10620 <dlms_getHdlcData+0x30>
    if (settings->server && (first || data->command == DLMS_COMMAND_SNRM))
   1088c:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   10890:	2b00      	cmp	r3, #0
   10892:	f43f af4e 	beq.w	10732 <dlms_getHdlcData+0x142>
   10896:	9b06      	ldr	r3, [sp, #24]
   10898:	b91b      	cbnz	r3, 108a2 <dlms_getHdlcData+0x2b2>
   1089a:	787b      	ldrb	r3, [r7, #1]
   1089c:	2b93      	cmp	r3, #147	; 0x93
   1089e:	f47f af48 	bne.w	10732 <dlms_getHdlcData+0x142>
        if (!svr_isTarget(settings, settings->serverAddress, settings->clientAddress))
   108a2:	8df2      	ldrh	r2, [r6, #46]	; 0x2e
   108a4:	6b31      	ldr	r1, [r6, #48]	; 0x30
   108a6:	4630      	mov	r0, r6
   108a8:	f7fd fc3f 	bl	e12a <svr_isTarget>
   108ac:	2800      	cmp	r0, #0
   108ae:	f47f af40 	bne.w	10732 <dlms_getHdlcData+0x142>
            if (reply->size - reply->position > 8)
   108b2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
   108b6:	88eb      	ldrh	r3, [r5, #6]
            settings->serverAddress = 0;
   108b8:	6330      	str	r0, [r6, #48]	; 0x30
            if (reply->size - reply->position > 8)
   108ba:	eba3 0308 	sub.w	r3, r3, r8
   108be:	2b08      	cmp	r3, #8
            settings->clientAddress = 0;
   108c0:	85f0      	strh	r0, [r6, #46]	; 0x2e
            if (reply->size - reply->position > 8)
   108c2:	dd2b      	ble.n	1091c <dlms_getHdlcData+0x32c>
                ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
   108c4:	9b06      	ldr	r3, [sp, #24]
   108c6:	9302      	str	r3, [sp, #8]
   108c8:	9b05      	ldr	r3, [sp, #20]
   108ca:	462a      	mov	r2, r5
   108cc:	e9cd 9300 	strd	r9, r3, [sp]
   108d0:	4631      	mov	r1, r6
   108d2:	463b      	mov	r3, r7
   108d4:	4650      	mov	r0, sl
   108d6:	f7ff fe8b 	bl	105f0 <dlms_getHdlcData>
                if (settings->serverAddress != 0 && settings->clientAddress != 0)
   108da:	6b33      	ldr	r3, [r6, #48]	; 0x30
                ret = dlms_getHdlcData(server, settings, reply, data, frame, preEstablished, first);
   108dc:	4604      	mov	r4, r0
                if (settings->serverAddress != 0 && settings->clientAddress != 0)
   108de:	2b00      	cmp	r3, #0
   108e0:	f43f af27 	beq.w	10732 <dlms_getHdlcData+0x142>
   108e4:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   108e6:	2b00      	cmp	r3, #0
   108e8:	f43f af23 	beq.w	10732 <dlms_getHdlcData+0x142>
   108ec:	e6ee      	b.n	106cc <dlms_getHdlcData+0xdc>
        if (reply->position == packetStartID + frameLen + 1)
   108ee:	892a      	ldrh	r2, [r5, #8]
   108f0:	4293      	cmp	r3, r2
   108f2:	d10e      	bne.n	10912 <dlms_getHdlcData+0x322>
            if ((ret = bb_getUInt8(reply, &ch)) != 0)
   108f4:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
   108f8:	4628      	mov	r0, r5
   108fa:	f7fd fef8 	bl	e6ee <bb_getUInt8>
   108fe:	2800      	cmp	r0, #0
   10900:	f47f ae8e 	bne.w	10620 <dlms_getHdlcData+0x30>
            if ((*frame & 0x1) == 0x1)
   10904:	f899 3000 	ldrb.w	r3, [r9]
   10908:	07db      	lsls	r3, r3, #31
   1090a:	d5bf      	bpl.n	1088c <dlms_getHdlcData+0x29c>
                data->moreData = DLMS_DATA_REQUEST_TYPES_FRAME;
   1090c:	2301      	movs	r3, #1
   1090e:	703b      	strb	r3, [r7, #0]
   10910:	e7bc      	b.n	1088c <dlms_getHdlcData+0x29c>
            dlms_checkLLCBytes(settings, reply);
   10912:	4629      	mov	r1, r5
   10914:	4630      	mov	r0, r6
   10916:	f7f2 f94f 	bl	2bb8 <dlms_checkLLCBytes>
   1091a:	e7b7      	b.n	1088c <dlms_getHdlcData+0x29c>
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
   1091c:	f240 1407 	movw	r4, #263	; 0x107
   10920:	e707      	b.n	10732 <dlms_getHdlcData+0x142>

00010922 <dlms_checkWrapperAddress>:
{
   10922:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (settings->server)
   10924:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
   10928:	460d      	mov	r5, r1
   1092a:	4604      	mov	r4, r0
        if ((ret = bb_getUInt16(buff, &value)) != 0)
   1092c:	f10d 0106 	add.w	r1, sp, #6
   10930:	4628      	mov	r0, r5
    if (settings->server)
   10932:	b1c3      	cbz	r3, 10966 <dlms_checkWrapperAddress+0x44>
        if ((ret = bb_getUInt16(buff, &value)) != 0)
   10934:	f7fd ff04 	bl	e740 <bb_getUInt16>
   10938:	b998      	cbnz	r0, 10962 <dlms_checkWrapperAddress+0x40>
        if (settings->clientAddress != 0 && settings->clientAddress != value)
   1093a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1093c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10940:	b10a      	cbz	r2, 10946 <dlms_checkWrapperAddress+0x24>
   10942:	429a      	cmp	r2, r3
   10944:	d12c      	bne.n	109a0 <dlms_checkWrapperAddress+0x7e>
            settings->clientAddress = value;
   10946:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if ((ret = bb_getUInt16(buff, &value)) != 0)
   10948:	f10d 0106 	add.w	r1, sp, #6
   1094c:	4628      	mov	r0, r5
   1094e:	f7fd fef7 	bl	e740 <bb_getUInt16>
   10952:	b930      	cbnz	r0, 10962 <dlms_checkWrapperAddress+0x40>
        if (settings->serverAddress != 0 && settings->serverAddress != value)
   10954:	6b22      	ldr	r2, [r4, #48]	; 0x30
   10956:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1095a:	b10a      	cbz	r2, 10960 <dlms_checkWrapperAddress+0x3e>
   1095c:	429a      	cmp	r2, r3
   1095e:	d11c      	bne.n	1099a <dlms_checkWrapperAddress+0x78>
            settings->serverAddress = value;
   10960:	6323      	str	r3, [r4, #48]	; 0x30
}
   10962:	b003      	add	sp, #12
   10964:	bd30      	pop	{r4, r5, pc}
        if ((ret = bb_getUInt16(buff, &value)) != 0)
   10966:	f7fd feeb 	bl	e740 <bb_getUInt16>
   1096a:	2800      	cmp	r0, #0
   1096c:	d1f9      	bne.n	10962 <dlms_checkWrapperAddress+0x40>
        if (settings->serverAddress != 0 && settings->serverAddress != value)
   1096e:	6b22      	ldr	r2, [r4, #48]	; 0x30
   10970:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10974:	b10a      	cbz	r2, 1097a <dlms_checkWrapperAddress+0x58>
   10976:	429a      	cmp	r2, r3
   10978:	d10f      	bne.n	1099a <dlms_checkWrapperAddress+0x78>
            settings->serverAddress = value;
   1097a:	6323      	str	r3, [r4, #48]	; 0x30
        if ((ret = bb_getUInt16(buff, &value)) != 0)
   1097c:	f10d 0106 	add.w	r1, sp, #6
   10980:	4628      	mov	r0, r5
   10982:	f7fd fedd 	bl	e740 <bb_getUInt16>
   10986:	2800      	cmp	r0, #0
   10988:	d1eb      	bne.n	10962 <dlms_checkWrapperAddress+0x40>
        if (settings->clientAddress != 0 && settings->clientAddress != value)
   1098a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1098c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10990:	b10a      	cbz	r2, 10996 <dlms_checkWrapperAddress+0x74>
   10992:	429a      	cmp	r2, r3
   10994:	d104      	bne.n	109a0 <dlms_checkWrapperAddress+0x7e>
            settings->clientAddress = value;
   10996:	85e3      	strh	r3, [r4, #46]	; 0x2e
   10998:	e7e3      	b.n	10962 <dlms_checkWrapperAddress+0x40>
            return DLMS_ERROR_CODE_INVALID_SERVER_ADDRESS;
   1099a:	f44f 7084 	mov.w	r0, #264	; 0x108
   1099e:	e7e0      	b.n	10962 <dlms_checkWrapperAddress+0x40>
            return DLMS_ERROR_CODE_INVALID_CLIENT_ADDRESS;
   109a0:	f240 1007 	movw	r0, #263	; 0x107
   109a4:	e7dd      	b.n	10962 <dlms_checkWrapperAddress+0x40>

000109a6 <dlms_getTcpData>:
{
   109a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (buff->size - buff->position < 8)
   109a8:	88cb      	ldrh	r3, [r1, #6]
   109aa:	890e      	ldrh	r6, [r1, #8]
   109ac:	1b9b      	subs	r3, r3, r6
{
   109ae:	4607      	mov	r7, r0
    if (buff->size - buff->position < 8)
   109b0:	2b07      	cmp	r3, #7
   109b2:	f04f 0000 	mov.w	r0, #0
{
   109b6:	460c      	mov	r4, r1
   109b8:	4615      	mov	r5, r2
        data->complete = 0;
   109ba:	7410      	strb	r0, [r2, #16]
    if (buff->size - buff->position < 8)
   109bc:	dc2c      	bgt.n	10a18 <dlms_getTcpData+0x72>
}
   109be:	b003      	add	sp, #12
   109c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((ret = bb_getUInt16(buff, &value)) != 0)
   109c2:	f10d 0106 	add.w	r1, sp, #6
   109c6:	4620      	mov	r0, r4
   109c8:	f7fd feba 	bl	e740 <bb_getUInt16>
   109cc:	2800      	cmp	r0, #0
   109ce:	d1f6      	bne.n	109be <dlms_getTcpData+0x18>
        if (value == 1)
   109d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   109d4:	2b01      	cmp	r3, #1
   109d6:	d11c      	bne.n	10a12 <dlms_getTcpData+0x6c>
            if ((ret = dlms_checkWrapperAddress(settings, buff)) != 0)
   109d8:	4621      	mov	r1, r4
   109da:	4638      	mov	r0, r7
   109dc:	f7ff ffa1 	bl	10922 <dlms_checkWrapperAddress>
   109e0:	2800      	cmp	r0, #0
   109e2:	d1ec      	bne.n	109be <dlms_getTcpData+0x18>
            if ((ret = bb_getUInt16(buff, &value)) != 0)
   109e4:	f10d 0106 	add.w	r1, sp, #6
   109e8:	4620      	mov	r0, r4
   109ea:	f7fd fea9 	bl	e740 <bb_getUInt16>
   109ee:	2800      	cmp	r0, #0
   109f0:	d1e5      	bne.n	109be <dlms_getTcpData+0x18>
            data->complete = !((buff->size - buff->position) < value);
   109f2:	8923      	ldrh	r3, [r4, #8]
   109f4:	88e2      	ldrh	r2, [r4, #6]
   109f6:	1ad2      	subs	r2, r2, r3
   109f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   109fc:	429a      	cmp	r2, r3
   109fe:	bfac      	ite	ge
   10a00:	2201      	movge	r2, #1
   10a02:	2200      	movlt	r2, #0
   10a04:	742a      	strb	r2, [r5, #16]
                data->packetLength = buff->position + value;
   10a06:	bfa9      	itett	ge
   10a08:	8922      	ldrhge	r2, [r4, #8]
                buff->position = pos;
   10a0a:	8126      	strhlt	r6, [r4, #8]
                data->packetLength = buff->position + value;
   10a0c:	189b      	addge	r3, r3, r2
   10a0e:	85ab      	strhge	r3, [r5, #44]	; 0x2c
   10a10:	e7d5      	b.n	109be <dlms_getTcpData+0x18>
            --buff->position;
   10a12:	8923      	ldrh	r3, [r4, #8]
   10a14:	3b01      	subs	r3, #1
   10a16:	8123      	strh	r3, [r4, #8]
    while (buff->position != buff->size)
   10a18:	8922      	ldrh	r2, [r4, #8]
   10a1a:	88e3      	ldrh	r3, [r4, #6]
   10a1c:	429a      	cmp	r2, r3
   10a1e:	d1d0      	bne.n	109c2 <dlms_getTcpData+0x1c>
    return DLMS_ERROR_CODE_OK;
   10a20:	2000      	movs	r0, #0
   10a22:	e7cc      	b.n	109be <dlms_getTcpData+0x18>

00010a24 <dlms_getMBusData>:
{
   10a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a26:	460d      	mov	r5, r1
   10a28:	b085      	sub	sp, #20
   10a2a:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(buff, &len)) != 0)
   10a2c:	f10d 0103 	add.w	r1, sp, #3
   10a30:	4628      	mov	r0, r5
{
   10a32:	4616      	mov	r6, r2
    if ((ret = bb_getUInt8(buff, &len)) != 0)
   10a34:	f7fd fe5b 	bl	e6ee <bb_getUInt8>
   10a38:	b950      	cbnz	r0, 10a50 <dlms_getMBusData+0x2c>
    if (buff->size < (unsigned char)(len - 1))
   10a3a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10a3e:	88e9      	ldrh	r1, [r5, #6]
   10a40:	1e53      	subs	r3, r2, #1
   10a42:	b2df      	uxtb	r7, r3
   10a44:	428f      	cmp	r7, r1
   10a46:	d905      	bls.n	10a54 <dlms_getMBusData+0x30>
        data->complete = 0;
   10a48:	7430      	strb	r0, [r6, #16]
        buff->position = buff->position - 1;
   10a4a:	892b      	ldrh	r3, [r5, #8]
   10a4c:	3b01      	subs	r3, #1
   10a4e:	812b      	strh	r3, [r5, #8]
}
   10a50:	b005      	add	sp, #20
   10a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (buff->size < len)
   10a54:	4291      	cmp	r1, r2
            --len;
   10a56:	bf38      	it	cc
   10a58:	f88d 3003 	strbcc.w	r3, [sp, #3]
        data->packetLength = len;
   10a5c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a60:	85b3      	strh	r3, [r6, #44]	; 0x2c
        data->complete = 1;
   10a62:	2301      	movs	r3, #1
   10a64:	7433      	strb	r3, [r6, #16]
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10a66:	a901      	add	r1, sp, #4
   10a68:	4628      	mov	r0, r5
   10a6a:	f7fd fe40 	bl	e6ee <bb_getUInt8>
   10a6e:	2800      	cmp	r0, #0
   10a70:	d1ee      	bne.n	10a50 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt16(buff, &manufacturerID)) != 0)
   10a72:	a902      	add	r1, sp, #8
   10a74:	4628      	mov	r0, r5
   10a76:	f7fd fe63 	bl	e740 <bb_getUInt16>
   10a7a:	2800      	cmp	r0, #0
   10a7c:	d1e8      	bne.n	10a50 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt32(buff, &id)) != 0)
   10a7e:	a903      	add	r1, sp, #12
   10a80:	4628      	mov	r0, r5
   10a82:	f7fd fe72 	bl	e76a <bb_getUInt32>
   10a86:	2800      	cmp	r0, #0
   10a88:	d1e2      	bne.n	10a50 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &meterVersion)) != 0 ||
   10a8a:	f10d 0105 	add.w	r1, sp, #5
   10a8e:	4628      	mov	r0, r5
   10a90:	f7fd fe2d 	bl	e6ee <bb_getUInt8>
   10a94:	2800      	cmp	r0, #0
   10a96:	d1db      	bne.n	10a50 <dlms_getMBusData+0x2c>
            (ret = bb_getUInt8(buff, &ch)) != 0)
   10a98:	a901      	add	r1, sp, #4
   10a9a:	4628      	mov	r0, r5
   10a9c:	f7fd fe27 	bl	e6ee <bb_getUInt8>
        if ((ret = bb_getUInt8(buff, &meterVersion)) != 0 ||
   10aa0:	2800      	cmp	r0, #0
   10aa2:	d1d5      	bne.n	10a50 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10aa4:	a901      	add	r1, sp, #4
   10aa6:	4628      	mov	r0, r5
   10aa8:	f7fd fe21 	bl	e6ee <bb_getUInt8>
   10aac:	2800      	cmp	r0, #0
   10aae:	d1cf      	bne.n	10a50 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &frameId)) != 0)
   10ab0:	f10d 0106 	add.w	r1, sp, #6
   10ab4:	4628      	mov	r0, r5
   10ab6:	f7fd fe1a 	bl	e6ee <bb_getUInt8>
   10aba:	2800      	cmp	r0, #0
   10abc:	d1c8      	bne.n	10a50 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &state)) != 0)
   10abe:	f10d 0107 	add.w	r1, sp, #7
   10ac2:	4628      	mov	r0, r5
   10ac4:	f7fd fe13 	bl	e6ee <bb_getUInt8>
   10ac8:	2800      	cmp	r0, #0
   10aca:	d1c1      	bne.n	10a50 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt16(buff, &configurationWord)) != 0)
   10acc:	f10d 010a 	add.w	r1, sp, #10
   10ad0:	4628      	mov	r0, r5
   10ad2:	f7fd fe35 	bl	e740 <bb_getUInt16>
   10ad6:	2800      	cmp	r0, #0
   10ad8:	d1ba      	bne.n	10a50 <dlms_getMBusData+0x2c>
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10ada:	a901      	add	r1, sp, #4
   10adc:	4628      	mov	r0, r5
   10ade:	f7fd fe06 	bl	e6ee <bb_getUInt8>
   10ae2:	2800      	cmp	r0, #0
   10ae4:	d1b4      	bne.n	10a50 <dlms_getMBusData+0x2c>
        settings->clientAddress = ch;
   10ae6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10aea:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10aec:	a901      	add	r1, sp, #4
   10aee:	4628      	mov	r0, r5
   10af0:	f7fd fdfd 	bl	e6ee <bb_getUInt8>
   10af4:	2800      	cmp	r0, #0
   10af6:	d1ab      	bne.n	10a50 <dlms_getMBusData+0x2c>
        settings->serverAddress = ch;
   10af8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10afc:	6323      	str	r3, [r4, #48]	; 0x30
   10afe:	e7a7      	b.n	10a50 <dlms_getMBusData+0x2c>

00010b00 <dlms_getPlcData>:
{
   10b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b04:	4680      	mov	r8, r0
   10b06:	b085      	sub	sp, #20
    if (bb_available(buff) < 9)
   10b08:	4608      	mov	r0, r1
{
   10b0a:	460d      	mov	r5, r1
   10b0c:	4616      	mov	r6, r2
    if (bb_available(buff) < 9)
   10b0e:	f7fd fc08 	bl	e322 <bb_available>
   10b12:	2808      	cmp	r0, #8
   10b14:	d803      	bhi.n	10b1e <dlms_getPlcData+0x1e>
        data->complete = 0;
   10b16:	2000      	movs	r0, #0
   10b18:	7430      	strb	r0, [r6, #16]
                return ret;
   10b1a:	4604      	mov	r4, r0
   10b1c:	e030      	b.n	10b80 <dlms_getPlcData+0x80>
    int packetStartID = buff->position;
   10b1e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    for (pos = (unsigned short)buff->position; pos < buff->size; ++pos)
   10b22:	464f      	mov	r7, r9
   10b24:	88eb      	ldrh	r3, [r5, #6]
   10b26:	42bb      	cmp	r3, r7
   10b28:	d808      	bhi.n	10b3c <dlms_getPlcData+0x3c>
    int packetStartID = buff->position;
   10b2a:	464f      	mov	r7, r9
    if (buff->position == buff->size)
   10b2c:	892a      	ldrh	r2, [r5, #8]
   10b2e:	88eb      	ldrh	r3, [r5, #6]
   10b30:	429a      	cmp	r2, r3
   10b32:	d111      	bne.n	10b58 <dlms_getPlcData+0x58>
        data->complete = 0;
   10b34:	2000      	movs	r0, #0
   10b36:	7430      	strb	r0, [r6, #16]
        buff->position = packetStartID;
   10b38:	812f      	strh	r7, [r5, #8]
        return 0;
   10b3a:	e7ee      	b.n	10b1a <dlms_getPlcData+0x1a>
        if ((ret = bb_getUInt8(buff, &stx)) != 0)
   10b3c:	f10d 0103 	add.w	r1, sp, #3
   10b40:	4628      	mov	r0, r5
   10b42:	f7fd fdd4 	bl	e6ee <bb_getUInt8>
   10b46:	4604      	mov	r4, r0
   10b48:	b9d0      	cbnz	r0, 10b80 <dlms_getPlcData+0x80>
        if (stx == 2)
   10b4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10b4e:	2b02      	cmp	r3, #2
   10b50:	d0ec      	beq.n	10b2c <dlms_getPlcData+0x2c>
    for (pos = (unsigned short)buff->position; pos < buff->size; ++pos)
   10b52:	1c7b      	adds	r3, r7, #1
   10b54:	b29f      	uxth	r7, r3
   10b56:	e7e5      	b.n	10b24 <dlms_getPlcData+0x24>
    if ((ret = bb_getUInt8(buff, &len)) != 0)
   10b58:	f10d 0105 	add.w	r1, sp, #5
   10b5c:	4628      	mov	r0, r5
   10b5e:	f7fd fdc6 	bl	e6ee <bb_getUInt8>
   10b62:	4604      	mov	r4, r0
   10b64:	b960      	cbnz	r0, 10b80 <dlms_getPlcData+0x80>
    if (bb_available(buff) < len)
   10b66:	4628      	mov	r0, r5
    int index = buff->position;
   10b68:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (bb_available(buff) < len)
   10b6c:	f7fd fbd9 	bl	e322 <bb_available>
   10b70:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10b74:	4283      	cmp	r3, r0
   10b76:	d907      	bls.n	10b88 <dlms_getPlcData+0x88>
        data->complete = 0;
   10b78:	7434      	strb	r4, [r6, #16]
        buff->position = buff->position - 2;
   10b7a:	892b      	ldrh	r3, [r5, #8]
   10b7c:	3b02      	subs	r3, #2
            buff->position = buff->position - index - 6;
   10b7e:	812b      	strh	r3, [r5, #8]
}
   10b80:	4620      	mov	r0, r4
   10b82:	b005      	add	sp, #20
   10b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10b88:	a901      	add	r1, sp, #4
   10b8a:	4628      	mov	r0, r5
   10b8c:	f7fd fdaf 	bl	e6ee <bb_getUInt8>
   10b90:	4604      	mov	r4, r0
   10b92:	2800      	cmp	r0, #0
   10b94:	d1f4      	bne.n	10b80 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
   10b96:	f10d 0106 	add.w	r1, sp, #6
   10b9a:	4628      	mov	r0, r5
   10b9c:	f7fd fda7 	bl	e6ee <bb_getUInt8>
   10ba0:	4604      	mov	r4, r0
   10ba2:	2800      	cmp	r0, #0
   10ba4:	d1ec      	bne.n	10b80 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt24(buff, &mac)) != 0)
   10ba6:	a903      	add	r1, sp, #12
   10ba8:	4628      	mov	r0, r5
   10baa:	f7fd fe23 	bl	e7f4 <bb_getUInt24>
   10bae:	4604      	mov	r4, r0
   10bb0:	2800      	cmp	r0, #0
   10bb2:	d1e5      	bne.n	10b80 <dlms_getPlcData+0x80>
        if ((ret = bb_getUInt8(buff, &padLen)) != 0)
   10bb4:	f10d 0107 	add.w	r1, sp, #7
   10bb8:	4628      	mov	r0, r5
        short macSa = (short)(mac >> 12);
   10bba:	9f03      	ldr	r7, [sp, #12]
        if ((ret = bb_getUInt8(buff, &padLen)) != 0)
   10bbc:	f7fd fd97 	bl	e6ee <bb_getUInt8>
   10bc0:	4604      	mov	r4, r0
   10bc2:	2800      	cmp	r0, #0
   10bc4:	d1dc      	bne.n	10b80 <dlms_getPlcData+0x80>
        if (buff->size < (unsigned short)(len + padLen + 2))
   10bc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10bca:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10bce:	4413      	add	r3, r2
   10bd0:	88ea      	ldrh	r2, [r5, #6]
   10bd2:	3302      	adds	r3, #2
   10bd4:	429a      	cmp	r2, r3
   10bd6:	d205      	bcs.n	10be4 <dlms_getPlcData+0xe4>
            data->complete = 0;
   10bd8:	7430      	strb	r0, [r6, #16]
            buff->position = buff->position - index - 6;
   10bda:	892b      	ldrh	r3, [r5, #8]
   10bdc:	3b06      	subs	r3, #6
   10bde:	eba3 0309 	sub.w	r3, r3, r9
   10be2:	e7cc      	b.n	10b7e <dlms_getPlcData+0x7e>
            if ((ret = bb_getUInt8(buff, &ch)) != 0)
   10be4:	a901      	add	r1, sp, #4
   10be6:	4628      	mov	r0, r5
   10be8:	f7fd fd81 	bl	e6ee <bb_getUInt8>
   10bec:	2800      	cmp	r0, #0
   10bee:	d194      	bne.n	10b1a <dlms_getPlcData+0x1a>
            if (ch != DLMS_PLC_DATA_LINK_DATA_REQUEST)
   10bf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10bf4:	2b90      	cmp	r3, #144	; 0x90
   10bf6:	d161      	bne.n	10cbc <dlms_getPlcData+0x1bc>
            if ((ret = bb_getUInt8(buff, &da)) != 0 ||
   10bf8:	a902      	add	r1, sp, #8
   10bfa:	4628      	mov	r0, r5
   10bfc:	f7fd fd77 	bl	e6ee <bb_getUInt8>
   10c00:	2800      	cmp	r0, #0
   10c02:	d18a      	bne.n	10b1a <dlms_getPlcData+0x1a>
                (ret = bb_getUInt8(buff, &sa)) != 0)
   10c04:	f10d 0109 	add.w	r1, sp, #9
   10c08:	4628      	mov	r0, r5
   10c0a:	f7fd fd70 	bl	e6ee <bb_getUInt8>
            if ((ret = bb_getUInt8(buff, &da)) != 0 ||
   10c0e:	2800      	cmp	r0, #0
   10c10:	d183      	bne.n	10b1a <dlms_getPlcData+0x1a>
            if (settings->server)
   10c12:	f898 1058 	ldrb.w	r1, [r8, #88]	; 0x58
        short macSa = (short)(mac >> 12);
   10c16:	0b3a      	lsrs	r2, r7, #12
        short macDa = (short)(mac & 0xFFF);
   10c18:	f640 73ff 	movw	r3, #4095	; 0xfff
   10c1c:	f3c7 070b 	ubfx	r7, r7, #0, #12
            if (settings->server)
   10c20:	b3b9      	cbz	r1, 10c92 <dlms_getPlcData+0x192>
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
   10c22:	429f      	cmp	r7, r3
   10c24:	d003      	beq.n	10c2e <dlms_getPlcData+0x12e>
   10c26:	f8b8 307c 	ldrh.w	r3, [r8, #124]	; 0x7c
   10c2a:	429f      	cmp	r7, r3
   10c2c:	d10b      	bne.n	10c46 <dlms_getPlcData+0x146>
        short macSa = (short)(mac >> 12);
   10c2e:	b213      	sxth	r3, r2
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
   10c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
   10c34:	d02b      	beq.n	10c8e <dlms_getPlcData+0x18e>
                    (macSa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR || macSa == settings->plcSettings.macDestinationAddress);
   10c36:	f8b8 007e 	ldrh.w	r0, [r8, #126]	; 0x7e
   10c3a:	eba0 0c03 	sub.w	ip, r0, r3
   10c3e:	f1dc 0000 	rsbs	r0, ip, #0
   10c42:	eb40 000c 	adc.w	r0, r0, ip
                data->complete =
   10c46:	7430      	strb	r0, [r6, #16]
                data->serverAddress = macDa;
   10c48:	f8a6 7048 	strh.w	r7, [r6, #72]	; 0x48
                data->clientAddress = macSa;
   10c4c:	f8a6 204a 	strh.w	r2, [r6, #74]	; 0x4a
            if (data->complete)
   10c50:	7c33      	ldrb	r3, [r6, #16]
   10c52:	2b00      	cmp	r3, #0
   10c54:	d094      	beq.n	10b80 <dlms_getPlcData+0x80>
                crcCount = countCRC(buff, 0, len + padLen);
   10c56:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10c5a:	f89d 7005 	ldrb.w	r7, [sp, #5]
   10c5e:	441f      	add	r7, r3
   10c60:	463a      	mov	r2, r7
   10c62:	2100      	movs	r1, #0
   10c64:	4628      	mov	r0, r5
   10c66:	f7f1 fe8b 	bl	2980 <countCRC.isra.0>
                if ((ret = bb_getUInt16ByIndex(buff, len + padLen, &crc)) != 0)
   10c6a:	f10d 020a 	add.w	r2, sp, #10
                crcCount = countCRC(buff, 0, len + padLen);
   10c6e:	4680      	mov	r8, r0
                if ((ret = bb_getUInt16ByIndex(buff, len + padLen, &crc)) != 0)
   10c70:	4639      	mov	r1, r7
   10c72:	4628      	mov	r0, r5
   10c74:	f7fd fe6a 	bl	e94c <bb_getUInt16ByIndex>
   10c78:	2800      	cmp	r0, #0
   10c7a:	f47f af4e 	bne.w	10b1a <dlms_getPlcData+0x1a>
                if (crc != crcCount)
   10c7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   10c82:	4543      	cmp	r3, r8
   10c84:	d117      	bne.n	10cb6 <dlms_getPlcData+0x1b6>
                data->packetLength = len;
   10c86:	f89d 3005 	ldrb.w	r3, [sp, #5]
   10c8a:	85b3      	strh	r3, [r6, #44]	; 0x2c
   10c8c:	e778      	b.n	10b80 <dlms_getPlcData+0x80>
                    (macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || macDa == settings->plcSettings.macSourceAddress) &&
   10c8e:	2001      	movs	r0, #1
   10c90:	e7d9      	b.n	10c46 <dlms_getPlcData+0x146>
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
   10c92:	429f      	cmp	r7, r3
   10c94:	d00d      	beq.n	10cb2 <dlms_getPlcData+0x1b2>
                    macDa == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL ||
   10c96:	f5b7 6f40 	cmp.w	r7, #3072	; 0xc00
   10c9a:	d00a      	beq.n	10cb2 <dlms_getPlcData+0x1b2>
                    macDa == settings->plcSettings.macDestinationAddress;
   10c9c:	f8b8 307e 	ldrh.w	r3, [r8, #126]	; 0x7e
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
   10ca0:	1bd9      	subs	r1, r3, r7
   10ca2:	424b      	negs	r3, r1
   10ca4:	414b      	adcs	r3, r1
                data->complete =
   10ca6:	7433      	strb	r3, [r6, #16]
                data->clientAddress = macDa;
   10ca8:	f8a6 704a 	strh.w	r7, [r6, #74]	; 0x4a
                data->serverAddress = macSa;
   10cac:	f8a6 2048 	strh.w	r2, [r6, #72]	; 0x48
   10cb0:	e7ce      	b.n	10c50 <dlms_getPlcData+0x150>
                    macDa == DLMS_PLC_SOURCE_ADDRESS_INITIATOR ||
   10cb2:	2301      	movs	r3, #1
   10cb4:	e7f7      	b.n	10ca6 <dlms_getPlcData+0x1a6>
                    return DLMS_ERROR_CODE_WRONG_CRC;
   10cb6:	f240 100d 	movw	r0, #269	; 0x10d
   10cba:	e72e      	b.n	10b1a <dlms_getPlcData+0x1a>
                return DLMS_ERROR_CODE_INVALID_COMMAND;
   10cbc:	f44f 7080 	mov.w	r0, #256	; 0x100
   10cc0:	e72b      	b.n	10b1a <dlms_getPlcData+0x1a>

00010cc2 <dlms_getPlcHdlcData>:
{
   10cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cc6:	4680      	mov	r8, r0
   10cc8:	b088      	sub	sp, #32
    if (bb_available(buff) < 2)
   10cca:	4608      	mov	r0, r1
{
   10ccc:	460d      	mov	r5, r1
   10cce:	4616      	mov	r6, r2
   10cd0:	4699      	mov	r9, r3
    if (bb_available(buff) < 2)
   10cd2:	f7fd fb26 	bl	e322 <bb_available>
   10cd6:	2801      	cmp	r0, #1
   10cd8:	f04f 0400 	mov.w	r4, #0
   10cdc:	d804      	bhi.n	10ce8 <dlms_getPlcHdlcData+0x26>
        data->complete = 0;
   10cde:	7434      	strb	r4, [r6, #16]
}
   10ce0:	4620      	mov	r0, r4
   10ce2:	b008      	add	sp, #32
   10ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *frame = 0;
   10ce8:	f889 4000 	strb.w	r4, [r9]
    if ((ret = bb_getUInt16(buff, &ns)) != 0)
   10cec:	f10d 0116 	add.w	r1, sp, #22
   10cf0:	4628      	mov	r0, r5
   10cf2:	f7fd fd25 	bl	e740 <bb_getUInt16>
   10cf6:	4604      	mov	r4, r0
   10cf8:	2800      	cmp	r0, #0
   10cfa:	d1f1      	bne.n	10ce0 <dlms_getPlcHdlcData+0x1e>
    switch (ns)
   10cfc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   10d00:	f644 324b 	movw	r2, #19275	; 0x4b4b
   10d04:	4293      	cmp	r3, r2
   10d06:	d029      	beq.n	10d5c <dlms_getPlcHdlcData+0x9a>
   10d08:	d80e      	bhi.n	10d28 <dlms_getPlcHdlcData+0x66>
   10d0a:	f242 7227 	movw	r2, #10023	; 0x2727
   10d0e:	4293      	cmp	r3, r2
   10d10:	d027      	beq.n	10d62 <dlms_getPlcHdlcData+0xa0>
   10d12:	f643 223a 	movw	r2, #14906	; 0x3a3a
   10d16:	4293      	cmp	r3, r2
   10d18:	d026      	beq.n	10d68 <dlms_getPlcHdlcData+0xa6>
   10d1a:	f641 521d 	movw	r2, #7453	; 0x1d1d
   10d1e:	4293      	cmp	r3, r2
   10d20:	d025      	beq.n	10d6e <dlms_getPlcHdlcData+0xac>
   10d22:	f44f 7481 	mov.w	r4, #258	; 0x102
   10d26:	e7db      	b.n	10ce0 <dlms_getPlcHdlcData+0x1e>
   10d28:	f646 426c 	movw	r2, #27756	; 0x6c6c
   10d2c:	4293      	cmp	r3, r2
   10d2e:	d021      	beq.n	10d74 <dlms_getPlcHdlcData+0xb2>
   10d30:	f247 1271 	movw	r2, #29041	; 0x7171
   10d34:	4293      	cmp	r3, r2
   10d36:	d020      	beq.n	10d7a <dlms_getPlcHdlcData+0xb8>
   10d38:	f245 6256 	movw	r2, #22102	; 0x5656
   10d3c:	4293      	cmp	r3, r2
   10d3e:	d1f0      	bne.n	10d22 <dlms_getPlcHdlcData+0x60>
        frameLen = 3 * 36;
   10d40:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    if (bb_available(buff) < (unsigned char)(frameLen - 2))
   10d44:	4628      	mov	r0, r5
   10d46:	f7fd faec 	bl	e322 <bb_available>
   10d4a:	f1aa 0302 	sub.w	r3, sl, #2
   10d4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   10d52:	4283      	cmp	r3, r0
   10d54:	d914      	bls.n	10d80 <dlms_getPlcHdlcData+0xbe>
        data->complete = 0;
   10d56:	2300      	movs	r3, #0
   10d58:	7433      	strb	r3, [r6, #16]
   10d5a:	e7c1      	b.n	10ce0 <dlms_getPlcHdlcData+0x1e>
        frameLen = 6 * 36;
   10d5c:	f04f 0ad8 	mov.w	sl, #216	; 0xd8
   10d60:	e7f0      	b.n	10d44 <dlms_getPlcHdlcData+0x82>
        frameLen = 7 * 36;
   10d62:	f04f 0afc 	mov.w	sl, #252	; 0xfc
   10d66:	e7ed      	b.n	10d44 <dlms_getPlcHdlcData+0x82>
    switch (ns)
   10d68:	f04f 0a48 	mov.w	sl, #72	; 0x48
   10d6c:	e7ea      	b.n	10d44 <dlms_getPlcHdlcData+0x82>
        frameLen = 5 * 36;
   10d6e:	f04f 0ab4 	mov.w	sl, #180	; 0xb4
   10d72:	e7e7      	b.n	10d44 <dlms_getPlcHdlcData+0x82>
        frameLen = 36;
   10d74:	f04f 0a24 	mov.w	sl, #36	; 0x24
   10d78:	e7e4      	b.n	10d44 <dlms_getPlcHdlcData+0x82>
        frameLen = 4 * 36;
   10d7a:	f04f 0a90 	mov.w	sl, #144	; 0x90
   10d7e:	e7e1      	b.n	10d44 <dlms_getPlcHdlcData+0x82>
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
   10d80:	a905      	add	r1, sp, #20
   10d82:	4628      	mov	r0, r5
        unsigned long index = buff->position;
   10d84:	892f      	ldrh	r7, [r5, #8]
        if ((ret = bb_getUInt8(buff, &credit)) != 0)
   10d86:	f7fd fcb2 	bl	e6ee <bb_getUInt8>
   10d8a:	4604      	mov	r4, r0
   10d8c:	2800      	cmp	r0, #0
   10d8e:	d1a7      	bne.n	10ce0 <dlms_getPlcHdlcData+0x1e>
        if ((ret = bb_getUInt24(buff, &mac)) != 0)
   10d90:	a906      	add	r1, sp, #24
   10d92:	4628      	mov	r0, r5
   10d94:	f7fd fd2e 	bl	e7f4 <bb_getUInt24>
   10d98:	4604      	mov	r4, r0
   10d9a:	2800      	cmp	r0, #0
   10d9c:	d1a0      	bne.n	10ce0 <dlms_getPlcHdlcData+0x1e>
        unsigned short sa = (unsigned short)(mac >> 12);
   10d9e:	9b06      	ldr	r3, [sp, #24]
        if (settings->server)
   10da0:	f898 2058 	ldrb.w	r2, [r8, #88]	; 0x58
        unsigned short sa = (unsigned short)(mac >> 12);
   10da4:	f3c3 310f 	ubfx	r1, r3, #12, #16
        unsigned short da = (unsigned short)(mac & 0xFFF);
   10da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
        if (settings->server)
   10dac:	2a00      	cmp	r2, #0
   10dae:	d055      	beq.n	10e5c <dlms_getPlcHdlcData+0x19a>
            data->complete = (da == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || da == settings->plcSettings.macSourceAddress) &&
   10db0:	f640 72ff 	movw	r2, #4095	; 0xfff
   10db4:	4293      	cmp	r3, r2
   10db6:	d003      	beq.n	10dc0 <dlms_getPlcHdlcData+0xfe>
   10db8:	f8b8 207c 	ldrh.w	r2, [r8, #124]	; 0x7c
   10dbc:	429a      	cmp	r2, r3
   10dbe:	d10a      	bne.n	10dd6 <dlms_getPlcHdlcData+0x114>
   10dc0:	f640 4201 	movw	r2, #3073	; 0xc01
   10dc4:	4291      	cmp	r1, r2
   10dc6:	d051      	beq.n	10e6c <dlms_getPlcHdlcData+0x1aa>
                (sa == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || sa == settings->plcSettings.macDestinationAddress);
   10dc8:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
   10dcc:	428a      	cmp	r2, r1
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
   10dce:	bf14      	ite	ne
   10dd0:	2200      	movne	r2, #0
   10dd2:	2201      	moveq	r2, #1
   10dd4:	e000      	b.n	10dd8 <dlms_getPlcHdlcData+0x116>
            data->complete = (da == DLMS_PLC_DESTINATION_ADDRESS_ALL_PHYSICAL || da == settings->plcSettings.macSourceAddress) &&
   10dd6:	4602      	mov	r2, r0
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
   10dd8:	7432      	strb	r2, [r6, #16]
            data->serverAddress = da;
   10dda:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        if (data->complete)
   10dde:	7c33      	ldrb	r3, [r6, #16]
            data->clientAddress = sa;
   10de0:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
        if (data->complete)
   10de4:	2b00      	cmp	r3, #0
   10de6:	d047      	beq.n	10e78 <dlms_getPlcHdlcData+0x1b6>
            if ((ret = bb_getUInt8(buff, &padLen)) != 0)
   10de8:	f10d 0115 	add.w	r1, sp, #21
   10dec:	4628      	mov	r0, r5
   10dee:	f7fd fc7e 	bl	e6ee <bb_getUInt8>
   10df2:	2800      	cmp	r0, #0
   10df4:	d13e      	bne.n	10e74 <dlms_getPlcHdlcData+0x1b2>
            if ((ret = dlms_getHdlcData(settings->server, settings, buff, data, frame, 0, 1)) != 0)
   10df6:	2301      	movs	r3, #1
   10df8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   10dfc:	f8cd 9000 	str.w	r9, [sp]
   10e00:	f898 0058 	ldrb.w	r0, [r8, #88]	; 0x58
   10e04:	4633      	mov	r3, r6
   10e06:	462a      	mov	r2, r5
   10e08:	4641      	mov	r1, r8
   10e0a:	f7ff fbf1 	bl	105f0 <dlms_getHdlcData>
   10e0e:	bb88      	cbnz	r0, 10e74 <dlms_getPlcHdlcData+0x1b2>
            dlms_getDataFromFrame(buff, data, dlms_useHdlc(settings->interfaceType));
   10e10:	f898 0035 	ldrb.w	r0, [r8, #53]	; 0x35
   10e14:	f7fe fc05 	bl	f622 <dlms_useHdlc>
   10e18:	4631      	mov	r1, r6
   10e1a:	4602      	mov	r2, r0
   10e1c:	4628      	mov	r0, r5
   10e1e:	f7ff fbc0 	bl	105a2 <dlms_getDataFromFrame>
            buff->position = buff->position + padLen;
   10e22:	892b      	ldrh	r3, [r5, #8]
   10e24:	f89d 8015 	ldrb.w	r8, [sp, #21]
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
   10e28:	6828      	ldr	r0, [r5, #0]
            buff->position = buff->position + padLen;
   10e2a:	4498      	add	r8, r3
   10e2c:	fa1f f888 	uxth.w	r8, r8
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
   10e30:	eba8 0207 	sub.w	r2, r8, r7
   10e34:	4639      	mov	r1, r7
            buff->position = buff->position + padLen;
   10e36:	f8a5 8008 	strh.w	r8, [r5, #8]
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
   10e3a:	f7f1 fed9 	bl	2bf0 <dlms_countFCS24>
            if ((ret = bb_getUInt24ByIndex(buff, buff->position, &crc)) != 0)
   10e3e:	aa07      	add	r2, sp, #28
            uint32_t crcCount = dlms_countFCS24(buff->data, index, buff->position - index);
   10e40:	4681      	mov	r9, r0
            if ((ret = bb_getUInt24ByIndex(buff, buff->position, &crc)) != 0)
   10e42:	4641      	mov	r1, r8
   10e44:	4628      	mov	r0, r5
   10e46:	f7fd fcbe 	bl	e7c6 <bb_getUInt24ByIndex>
   10e4a:	b998      	cbnz	r0, 10e74 <dlms_getPlcHdlcData+0x1b2>
            if (crc != crcCount)
   10e4c:	9b07      	ldr	r3, [sp, #28]
   10e4e:	4599      	cmp	r9, r3
   10e50:	d10e      	bne.n	10e70 <dlms_getPlcHdlcData+0x1ae>
            data->packetLength = (uint16_t)(2 + buff->position - index);
   10e52:	892b      	ldrh	r3, [r5, #8]
   10e54:	3302      	adds	r3, #2
   10e56:	1bdf      	subs	r7, r3, r7
   10e58:	85b7      	strh	r7, [r6, #44]	; 0x2c
   10e5a:	e741      	b.n	10ce0 <dlms_getPlcHdlcData+0x1e>
            data->complete = da == DLMS_PLC_HDLC_SOURCE_ADDRESS_INITIATOR || da == settings->plcSettings.macDestinationAddress;
   10e5c:	f640 4201 	movw	r2, #3073	; 0xc01
   10e60:	4293      	cmp	r3, r2
   10e62:	d003      	beq.n	10e6c <dlms_getPlcHdlcData+0x1aa>
   10e64:	f8b8 207e 	ldrh.w	r2, [r8, #126]	; 0x7e
   10e68:	429a      	cmp	r2, r3
   10e6a:	e7b0      	b.n	10dce <dlms_getPlcHdlcData+0x10c>
   10e6c:	2201      	movs	r2, #1
   10e6e:	e7b3      	b.n	10dd8 <dlms_getPlcHdlcData+0x116>
                return DLMS_ERROR_CODE_WRONG_CRC;
   10e70:	f240 100d 	movw	r0, #269	; 0x10d
                return ret;
   10e74:	4604      	mov	r4, r0
   10e76:	e733      	b.n	10ce0 <dlms_getPlcHdlcData+0x1e>
            buff->position = (uint16_t)(buff->position + frameLen - index - 4);
   10e78:	892b      	ldrh	r3, [r5, #8]
   10e7a:	3b04      	subs	r3, #4
   10e7c:	1bdf      	subs	r7, r3, r7
   10e7e:	44ba      	add	sl, r7
   10e80:	f8a5 a008 	strh.w	sl, [r5, #8]
   10e84:	e72c      	b.n	10ce0 <dlms_getPlcHdlcData+0x1e>

00010e86 <dlms_getDataFromBlock>:
{
   10e86:	b538      	push	{r3, r4, r5, lr}
    if (data->size == data->position)
   10e88:	88c3      	ldrh	r3, [r0, #6]
{
   10e8a:	460d      	mov	r5, r1
    uint16_t pos, len = data->position - index;
   10e8c:	8901      	ldrh	r1, [r0, #8]
    if (data->size == data->position)
   10e8e:	4299      	cmp	r1, r3
{
   10e90:	4604      	mov	r4, r0
    if (data->size == data->position)
   10e92:	d103      	bne.n	10e9c <dlms_getDataFromBlock+0x16>
        bb_clear(data);
   10e94:	f7fd fc15 	bl	e6c2 <bb_clear>
}
   10e98:	2000      	movs	r0, #0
   10e9a:	bd38      	pop	{r3, r4, r5, pc}
    bb_move(data, data->position, data->position - len, data->size - data->position);
   10e9c:	1a5b      	subs	r3, r3, r1
   10e9e:	b29b      	uxth	r3, r3
   10ea0:	462a      	mov	r2, r5
   10ea2:	f7fd fd94 	bl	e9ce <bb_move>
    data->position = pos - len;
   10ea6:	8125      	strh	r5, [r4, #8]
    return 0;
   10ea8:	e7f6      	b.n	10e98 <dlms_getDataFromBlock+0x12>

00010eaa <dlms_verifyInvokeId>:
{
   10eaa:	b510      	push	{r4, lr}
    if (settings->autoIncreaseInvokeID && reply->invokeId != dlms_getInvokeIDPriority(settings, 0))
   10eac:	f890 30e0 	ldrb.w	r3, [r0, #224]	; 0xe0
   10eb0:	b90b      	cbnz	r3, 10eb6 <dlms_verifyInvokeId+0xc>
    return 0;
   10eb2:	2000      	movs	r0, #0
}
   10eb4:	bd10      	pop	{r4, pc}
    if (settings->autoIncreaseInvokeID && reply->invokeId != dlms_getInvokeIDPriority(settings, 0))
   10eb6:	f891 4039 	ldrb.w	r4, [r1, #57]	; 0x39
   10eba:	2100      	movs	r1, #0
   10ebc:	f7fe fbba 	bl	f634 <dlms_getInvokeIDPriority>
   10ec0:	4284      	cmp	r4, r0
   10ec2:	d0f6      	beq.n	10eb2 <dlms_verifyInvokeId+0x8>
        return DLMS_ERROR_CODE_INVALID_INVOKE_ID;
   10ec4:	f240 101b 	movw	r0, #283	; 0x11b
   10ec8:	e7f4      	b.n	10eb4 <dlms_verifyInvokeId+0xa>

00010eca <dlms_handleGetResponse>:
{
   10eca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10ece:	1d0e      	adds	r6, r1, #4
{
   10ed0:	4607      	mov	r7, r0
   10ed2:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10ed4:	4630      	mov	r0, r6
   10ed6:	f10d 0101 	add.w	r1, sp, #1
{
   10eda:	4690      	mov	r8, r2
    if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10edc:	f7fd fc07 	bl	e6ee <bb_getUInt8>
   10ee0:	4604      	mov	r4, r0
   10ee2:	bb30      	cbnz	r0, 10f32 <dlms_handleGetResponse+0x68>
    if ((ret = bb_getUInt8(&reply->data, &reply->invokeId)) != 0)
   10ee4:	f105 0139 	add.w	r1, r5, #57	; 0x39
   10ee8:	4630      	mov	r0, r6
    type = ch;
   10eea:	f89d 9001 	ldrb.w	r9, [sp, #1]
    if ((ret = bb_getUInt8(&reply->data, &reply->invokeId)) != 0)
   10eee:	f7fd fbfe 	bl	e6ee <bb_getUInt8>
   10ef2:	4604      	mov	r4, r0
   10ef4:	b9e8      	cbnz	r0, 10f32 <dlms_handleGetResponse+0x68>
    if ((ret = dlms_verifyInvokeId(settings, reply)) != 0)
   10ef6:	4629      	mov	r1, r5
   10ef8:	4638      	mov	r0, r7
   10efa:	f7ff ffd6 	bl	10eaa <dlms_verifyInvokeId>
   10efe:	4604      	mov	r4, r0
   10f00:	b9b8      	cbnz	r0, 10f32 <dlms_handleGetResponse+0x68>
    if (type == 1)
   10f02:	f1b9 0f01 	cmp.w	r9, #1
    type = ch;
   10f06:	fa0f f389 	sxth.w	r3, r9
    if (type == 1)
   10f0a:	d11c      	bne.n	10f46 <dlms_handleGetResponse+0x7c>
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10f0c:	f10d 0101 	add.w	r1, sp, #1
   10f10:	4630      	mov	r0, r6
   10f12:	f7fd fbec 	bl	e6ee <bb_getUInt8>
   10f16:	4604      	mov	r4, r0
   10f18:	b958      	cbnz	r0, 10f32 <dlms_handleGetResponse+0x68>
        if (ch != 0)
   10f1a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   10f1e:	b163      	cbz	r3, 10f3a <dlms_handleGetResponse+0x70>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10f20:	f10d 0101 	add.w	r1, sp, #1
   10f24:	4630      	mov	r0, r6
   10f26:	f7fd fbe2 	bl	e6ee <bb_getUInt8>
   10f2a:	4604      	mov	r4, r0
   10f2c:	b908      	cbnz	r0, 10f32 <dlms_handleGetResponse+0x68>
            return ch;
   10f2e:	f89d 4001 	ldrb.w	r4, [sp, #1]
}
   10f32:	4620      	mov	r0, r4
   10f34:	b003      	add	sp, #12
   10f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = dlms_getDataFromBlock(&reply->data, 0);
   10f3a:	4601      	mov	r1, r0
   10f3c:	4630      	mov	r0, r6
   10f3e:	f7ff ffa2 	bl	10e86 <dlms_getDataFromBlock>
   10f42:	4604      	mov	r4, r0
   10f44:	e7f5      	b.n	10f32 <dlms_handleGetResponse+0x68>
    else if (type == 2)
   10f46:	2b02      	cmp	r3, #2
   10f48:	d15d      	bne.n	11006 <dlms_handleGetResponse+0x13c>
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10f4a:	f10d 0101 	add.w	r1, sp, #1
   10f4e:	4630      	mov	r0, r6
   10f50:	f7fd fbcd 	bl	e6ee <bb_getUInt8>
   10f54:	4604      	mov	r4, r0
   10f56:	2800      	cmp	r0, #0
   10f58:	d1eb      	bne.n	10f32 <dlms_handleGetResponse+0x68>
        if (ch == 0)
   10f5a:	f89d 2001 	ldrb.w	r2, [sp, #1]
   10f5e:	782b      	ldrb	r3, [r5, #0]
   10f60:	2a00      	cmp	r2, #0
   10f62:	d142      	bne.n	10fea <dlms_handleGetResponse+0x120>
            reply->moreData = (DLMS_DATA_REQUEST_TYPES)(reply->moreData | DLMS_DATA_REQUEST_TYPES_BLOCK);
   10f64:	f043 0302 	orr.w	r3, r3, #2
   10f68:	702b      	strb	r3, [r5, #0]
        if ((ret = bb_getUInt32(&reply->data, &number)) != 0)
   10f6a:	a901      	add	r1, sp, #4
   10f6c:	4630      	mov	r0, r6
   10f6e:	f7fd fbfc 	bl	e76a <bb_getUInt32>
   10f72:	4604      	mov	r4, r0
   10f74:	2800      	cmp	r0, #0
   10f76:	d1dc      	bne.n	10f32 <dlms_handleGetResponse+0x68>
        if (number != 1 && settings->blockIndex == 1)
   10f78:	9b01      	ldr	r3, [sp, #4]
   10f7a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   10f7e:	2b01      	cmp	r3, #1
   10f80:	d036      	beq.n	10ff0 <dlms_handleGetResponse+0x126>
   10f82:	2a01      	cmp	r2, #1
   10f84:	d134      	bne.n	10ff0 <dlms_handleGetResponse+0x126>
            settings->blockIndex = number;
   10f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   10f8a:	f10d 0101 	add.w	r1, sp, #1
   10f8e:	4630      	mov	r0, r6
   10f90:	f7fd fbad 	bl	e6ee <bb_getUInt8>
   10f94:	4604      	mov	r4, r0
   10f96:	2800      	cmp	r0, #0
   10f98:	d1cb      	bne.n	10f32 <dlms_handleGetResponse+0x68>
        if (ch != 0)
   10f9a:	f89d 3001 	ldrb.w	r3, [sp, #1]
   10f9e:	2b00      	cmp	r3, #0
   10fa0:	d1be      	bne.n	10f20 <dlms_handleGetResponse+0x56>
            if ((ret = hlp_getObjectCount2(&reply->data, &count)) != 0)
   10fa2:	f10d 0102 	add.w	r1, sp, #2
   10fa6:	4630      	mov	r0, r6
   10fa8:	f00a fafc 	bl	1b5a4 <hlp_getObjectCount2>
   10fac:	4604      	mov	r4, r0
   10fae:	2800      	cmp	r0, #0
   10fb0:	d1bf      	bne.n	10f32 <dlms_handleGetResponse+0x68>
            if ((reply->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   10fb2:	782b      	ldrb	r3, [r5, #0]
   10fb4:	07db      	lsls	r3, r3, #31
   10fb6:	d407      	bmi.n	10fc8 <dlms_handleGetResponse+0xfe>
                if (count > (uint16_t)(bb_available(&reply->data)))
   10fb8:	4630      	mov	r0, r6
   10fba:	f7fd f9b2 	bl	e322 <bb_available>
   10fbe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10fc2:	4283      	cmp	r3, r0
   10fc4:	d826      	bhi.n	11014 <dlms_handleGetResponse+0x14a>
                reply->command = DLMS_COMMAND_NONE;
   10fc6:	706c      	strb	r4, [r5, #1]
            if (count == 0)
   10fc8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   10fcc:	b9a3      	cbnz	r3, 10ff8 <dlms_handleGetResponse+0x12e>
                reply->data.size = index;
   10fce:	f8a5 800a 	strh.w	r8, [r5, #10]
            if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
   10fd2:	782b      	ldrb	r3, [r5, #0]
   10fd4:	2b00      	cmp	r3, #0
   10fd6:	d1ac      	bne.n	10f32 <dlms_handleGetResponse+0x68>
                if (!reply->peek)
   10fd8:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   10fdc:	2b00      	cmp	r3, #0
   10fde:	d1a8      	bne.n	10f32 <dlms_handleGetResponse+0x68>
                    reply->data.position = 0;
   10fe0:	81ab      	strh	r3, [r5, #12]
                    resetBlockIndex(settings);
   10fe2:	4638      	mov	r0, r7
   10fe4:	f000 fcd0 	bl	11988 <resetBlockIndex>
   10fe8:	e7a3      	b.n	10f32 <dlms_handleGetResponse+0x68>
                (DLMS_DATA_REQUEST_TYPES)(reply->moreData & ~DLMS_DATA_REQUEST_TYPES_BLOCK);
   10fea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   10fee:	e7bb      	b.n	10f68 <dlms_handleGetResponse+0x9e>
        else if (number != settings->blockIndex)
   10ff0:	4293      	cmp	r3, r2
   10ff2:	d0ca      	beq.n	10f8a <dlms_handleGetResponse+0xc0>
            return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
   10ff4:	2413      	movs	r4, #19
   10ff6:	e79c      	b.n	10f32 <dlms_handleGetResponse+0x68>
                if ((ret = dlms_getDataFromBlock(&reply->data, index)) != 0)
   10ff8:	4641      	mov	r1, r8
   10ffa:	4630      	mov	r0, r6
   10ffc:	f7ff ff43 	bl	10e86 <dlms_getDataFromBlock>
   11000:	2800      	cmp	r0, #0
   11002:	d0e6      	beq.n	10fd2 <dlms_handleGetResponse+0x108>
   11004:	e79d      	b.n	10f42 <dlms_handleGetResponse+0x78>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   11006:	2b03      	cmp	r3, #3
   11008:	bf0c      	ite	eq
   1100a:	f04f 34ff 	moveq.w	r4, #4294967295
   1100e:	f44f 7481 	movne.w	r4, #258	; 0x102
   11012:	e78e      	b.n	10f32 <dlms_handleGetResponse+0x68>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   11014:	f44f 7482 	mov.w	r4, #260	; 0x104
   11018:	e78b      	b.n	10f32 <dlms_handleGetResponse+0x68>

0001101a <handleWriteResponse>:
{
   1101a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (hlp_getObjectCount2(&data->data, &count) != 0)
   1101c:	1d05      	adds	r5, r0, #4
   1101e:	f10d 0106 	add.w	r1, sp, #6
   11022:	4628      	mov	r0, r5
   11024:	f00a fabe 	bl	1b5a4 <hlp_getObjectCount2>
   11028:	4604      	mov	r4, r0
   1102a:	b9d8      	cbnz	r0, 11064 <handleWriteResponse+0x4a>
    for (pos = 0; pos != count; ++pos)
   1102c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11030:	b2a3      	uxth	r3, r4
   11032:	429a      	cmp	r2, r3
   11034:	d101      	bne.n	1103a <handleWriteResponse+0x20>
    return DLMS_ERROR_CODE_OK;
   11036:	2000      	movs	r0, #0
   11038:	e012      	b.n	11060 <handleWriteResponse+0x46>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   1103a:	f10d 0105 	add.w	r1, sp, #5
   1103e:	4628      	mov	r0, r5
   11040:	f7fd fb55 	bl	e6ee <bb_getUInt8>
   11044:	b960      	cbnz	r0, 11060 <handleWriteResponse+0x46>
        if (ch != 0)
   11046:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1104a:	3401      	adds	r4, #1
   1104c:	2b00      	cmp	r3, #0
   1104e:	d0ed      	beq.n	1102c <handleWriteResponse+0x12>
            if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   11050:	f10d 0105 	add.w	r1, sp, #5
   11054:	4628      	mov	r0, r5
   11056:	f7fd fb4a 	bl	e6ee <bb_getUInt8>
   1105a:	b908      	cbnz	r0, 11060 <handleWriteResponse+0x46>
            return ch;
   1105c:	f89d 0005 	ldrb.w	r0, [sp, #5]
}
   11060:	b003      	add	sp, #12
   11062:	bd30      	pop	{r4, r5, pc}
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   11064:	f44f 7082 	mov.w	r0, #260	; 0x104
   11068:	e7fa      	b.n	11060 <handleWriteResponse+0x46>

0001106a <dlms_getValueFromData>:
{
   1106a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1106e:	b089      	sub	sp, #36	; 0x24
   11070:	460c      	mov	r4, r1
   11072:	4680      	mov	r8, r0
    var_init(&value);
   11074:	ad04      	add	r5, sp, #16
    di_init(&info);
   11076:	a802      	add	r0, sp, #8
   11078:	f7fe fa0e 	bl	f498 <di_init>
    var_init(&value);
   1107c:	4628      	mov	r0, r5
   1107e:	f00a fe1e 	bl	1bcbe <var_init>
    if (reply->dataValue.vt == DLMS_DATA_TYPE_ARRAY)
   11082:	7e23      	ldrb	r3, [r4, #24]
   11084:	2b01      	cmp	r3, #1
   11086:	d107      	bne.n	11098 <dlms_getValueFromData+0x2e>
        info.type = DLMS_DATA_TYPE_ARRAY;
   11088:	f88d 300c 	strb.w	r3, [sp, #12]
        info.count = (uint16_t)reply->totalCount;
   1108c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1108e:	f8ad 300a 	strh.w	r3, [sp, #10]
        info.index = (uint16_t)reply->data.size;
   11092:	8963      	ldrh	r3, [r4, #10]
   11094:	f8ad 3008 	strh.w	r3, [sp, #8]
    reply->data.position = reply->readPosition;
   11098:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    index = (uint16_t)(reply->data.position);
   1109a:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    reply->data.position = reply->readPosition;
   1109e:	81a3      	strh	r3, [r4, #12]
    if ((ret = dlms_getData(&reply->data, &info, &value)) != 0)
   110a0:	462a      	mov	r2, r5
   110a2:	a902      	add	r1, sp, #8
   110a4:	1d20      	adds	r0, r4, #4
   110a6:	f7fe fe87 	bl	fdb8 <dlms_getData>
   110aa:	4606      	mov	r6, r0
   110ac:	b130      	cbz	r0, 110bc <dlms_getValueFromData+0x52>
        var_clear(&value);
   110ae:	4628      	mov	r0, r5
   110b0:	f00a ff61 	bl	1bf76 <var_clear>
}
   110b4:	4630      	mov	r0, r6
   110b6:	b009      	add	sp, #36	; 0x24
   110b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (value.vt != DLMS_DATA_TYPE_NONE)
   110bc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   110c0:	2b00      	cmp	r3, #0
   110c2:	d036      	beq.n	11132 <dlms_getValueFromData+0xc8>
        if (value.vt != DLMS_DATA_TYPE_ARRAY && value.vt != DLMS_DATA_TYPE_STRUCTURE)
   110c4:	3b01      	subs	r3, #1
   110c6:	2b01      	cmp	r3, #1
   110c8:	d91f      	bls.n	1110a <dlms_getValueFromData+0xa0>
            reply->dataType = info.type;
   110ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
   110ce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                reply->dataValue = value;
   110d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   110d6:	f104 0718 	add.w	r7, r4, #24
   110da:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        reply->readPosition = reply->data.position;
   110de:	89a3      	ldrh	r3, [r4, #12]
   110e0:	8563      	strh	r3, [r4, #42]	; 0x2a
        reply->totalCount = info.count;
   110e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   110e6:	8523      	strh	r3, [r4, #40]	; 0x28
    if (reply->command != DLMS_COMMAND_DATA_NOTIFICATION
   110e8:	7863      	ldrb	r3, [r4, #1]
    reply->data.position = index;
   110ea:	f8a4 900c 	strh.w	r9, [r4, #12]
    if (reply->command != DLMS_COMMAND_DATA_NOTIFICATION
   110ee:	2b0f      	cmp	r3, #15
   110f0:	d0e0      	beq.n	110b4 <dlms_getValueFromData+0x4a>
        && info.complete && reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
   110f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   110f6:	2b00      	cmp	r3, #0
   110f8:	d0dc      	beq.n	110b4 <dlms_getValueFromData+0x4a>
   110fa:	7825      	ldrb	r5, [r4, #0]
   110fc:	2d00      	cmp	r5, #0
   110fe:	d1d9      	bne.n	110b4 <dlms_getValueFromData+0x4a>
        resetBlockIndex(settings);
   11100:	4640      	mov	r0, r8
   11102:	f000 fc41 	bl	11988 <resetBlockIndex>
        reply->data.position = 0;
   11106:	81a5      	strh	r5, [r4, #12]
   11108:	e7d4      	b.n	110b4 <dlms_getValueFromData+0x4a>
            if (reply->dataValue.vt == DLMS_DATA_TYPE_NONE)
   1110a:	7e23      	ldrb	r3, [r4, #24]
   1110c:	2b00      	cmp	r3, #0
   1110e:	d0e0      	beq.n	110d2 <dlms_getValueFromData+0x68>
                for (pos = 0; pos != value.Arr->size; ++pos)
   11110:	4605      	mov	r5, r0
   11112:	e009      	b.n	11128 <dlms_getValueFromData+0xbe>
                    if ((ret = va_getByIndex(value.Arr, pos, &tmp)) != 0)
   11114:	aa01      	add	r2, sp, #4
   11116:	4629      	mov	r1, r5
   11118:	f00a ffab 	bl	1c072 <va_getByIndex>
   1111c:	b998      	cbnz	r0, 11146 <dlms_getValueFromData+0xdc>
                    va_push(reply->dataValue.Arr, tmp);
   1111e:	9901      	ldr	r1, [sp, #4]
   11120:	6a20      	ldr	r0, [r4, #32]
   11122:	f00a feda 	bl	1beda <va_push>
                for (pos = 0; pos != value.Arr->size; ++pos)
   11126:	3501      	adds	r5, #1
   11128:	9806      	ldr	r0, [sp, #24]
   1112a:	88c3      	ldrh	r3, [r0, #6]
   1112c:	42ab      	cmp	r3, r5
   1112e:	d1f1      	bne.n	11114 <dlms_getValueFromData+0xaa>
   11130:	e7d5      	b.n	110de <dlms_getValueFromData+0x74>
    else if (info.complete
   11132:	f89d 300d 	ldrb.w	r3, [sp, #13]
   11136:	2b00      	cmp	r3, #0
   11138:	d0d6      	beq.n	110e8 <dlms_getValueFromData+0x7e>
        && reply->command == DLMS_COMMAND_DATA_NOTIFICATION)
   1113a:	7863      	ldrb	r3, [r4, #1]
   1113c:	2b0f      	cmp	r3, #15
        reply->readPosition = reply->data.position;
   1113e:	bf04      	itt	eq
   11140:	89a3      	ldrheq	r3, [r4, #12]
   11142:	8563      	strheq	r3, [r4, #42]	; 0x2a
   11144:	e7d0      	b.n	110e8 <dlms_getValueFromData+0x7e>
                    if ((ret = va_getByIndex(value.Arr, pos, &tmp)) != 0)
   11146:	4606      	mov	r6, r0
   11148:	e7b4      	b.n	110b4 <dlms_getValueFromData+0x4a>

0001114a <dlms_readResponseDataBlockResult>:
{
   1114a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
   1114e:	1d0f      	adds	r7, r1, #4
{
   11150:	4680      	mov	r8, r0
   11152:	460e      	mov	r6, r1
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
   11154:	4638      	mov	r0, r7
   11156:	f10d 0103 	add.w	r1, sp, #3
{
   1115a:	4691      	mov	r9, r2
    if ((ret = bb_getUInt8(&reply->data, &lastBlock)) != 0)
   1115c:	f7fd fac7 	bl	e6ee <bb_getUInt8>
   11160:	4604      	mov	r4, r0
   11162:	bb30      	cbnz	r0, 111b2 <dlms_readResponseDataBlockResult+0x68>
    if ((ret = bb_getUInt16(&reply->data, &number)) != 0)
   11164:	a901      	add	r1, sp, #4
   11166:	4638      	mov	r0, r7
   11168:	f7fd faea 	bl	e740 <bb_getUInt16>
   1116c:	4604      	mov	r4, r0
   1116e:	bb00      	cbnz	r0, 111b2 <dlms_readResponseDataBlockResult+0x68>
    if (hlp_getObjectCount2(&reply->data, &blockLength) != 0)
   11170:	f10d 0106 	add.w	r1, sp, #6
   11174:	4638      	mov	r0, r7
   11176:	f00a fa15 	bl	1b5a4 <hlp_getObjectCount2>
   1117a:	4604      	mov	r4, r0
   1117c:	bbc0      	cbnz	r0, 111f0 <dlms_readResponseDataBlockResult+0xa6>
    if (!lastBlock)
   1117e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   11182:	7833      	ldrb	r3, [r6, #0]
   11184:	b9ca      	cbnz	r2, 111ba <dlms_readResponseDataBlockResult+0x70>
        reply->moreData |= DLMS_DATA_REQUEST_TYPES_BLOCK;
   11186:	f043 0302 	orr.w	r3, r3, #2
    if (number != 1 && settings->blockIndex == 1)
   1118a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1118e:	7033      	strb	r3, [r6, #0]
   11190:	2a01      	cmp	r2, #1
   11192:	f8d8 10a0 	ldr.w	r1, [r8, #160]	; 0xa0
   11196:	d013      	beq.n	111c0 <dlms_readResponseDataBlockResult+0x76>
   11198:	2901      	cmp	r1, #1
   1119a:	d111      	bne.n	111c0 <dlms_readResponseDataBlockResult+0x76>
        settings->blockIndex = number;
   1119c:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
    if ((reply->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) != 0)
   111a0:	f013 0501 	ands.w	r5, r3, #1
   111a4:	d010      	beq.n	111c8 <dlms_readResponseDataBlockResult+0x7e>
        dlms_getDataFromBlock(&reply->data, index);
   111a6:	4649      	mov	r1, r9
   111a8:	4638      	mov	r0, r7
   111aa:	f7ff fe6c 	bl	10e86 <dlms_getDataFromBlock>
        return DLMS_ERROR_CODE_FALSE;
   111ae:	f04f 34ff 	mov.w	r4, #4294967295
}
   111b2:	4620      	mov	r0, r4
   111b4:	b003      	add	sp, #12
   111b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        reply->moreData &= ~DLMS_DATA_REQUEST_TYPES_BLOCK;
   111ba:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   111be:	e7e4      	b.n	1118a <dlms_readResponseDataBlockResult+0x40>
    if (number != settings->blockIndex)
   111c0:	428a      	cmp	r2, r1
   111c2:	d0ed      	beq.n	111a0 <dlms_readResponseDataBlockResult+0x56>
        return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
   111c4:	2413      	movs	r4, #19
   111c6:	e7f4      	b.n	111b2 <dlms_readResponseDataBlockResult+0x68>
    if (blockLength != bb_available(&reply->data))
   111c8:	4638      	mov	r0, r7
   111ca:	f7fd f8aa 	bl	e322 <bb_available>
   111ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   111d2:	4283      	cmp	r3, r0
   111d4:	d10f      	bne.n	111f6 <dlms_readResponseDataBlockResult+0xac>
    reply->command = DLMS_COMMAND_NONE;
   111d6:	7075      	strb	r5, [r6, #1]
    dlms_getDataFromBlock(&reply->data, index);
   111d8:	4649      	mov	r1, r9
   111da:	4638      	mov	r0, r7
   111dc:	f7ff fe53 	bl	10e86 <dlms_getDataFromBlock>
    if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
   111e0:	7833      	ldrb	r3, [r6, #0]
    reply->totalCount = 0;
   111e2:	8535      	strh	r5, [r6, #40]	; 0x28
    if (reply->moreData == DLMS_DATA_REQUEST_TYPES_NONE)
   111e4:	2b00      	cmp	r3, #0
   111e6:	d1e4      	bne.n	111b2 <dlms_readResponseDataBlockResult+0x68>
        resetBlockIndex(settings);
   111e8:	4640      	mov	r0, r8
   111ea:	f000 fbcd 	bl	11988 <resetBlockIndex>
   111ee:	e7e0      	b.n	111b2 <dlms_readResponseDataBlockResult+0x68>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   111f0:	f44f 7482 	mov.w	r4, #260	; 0x104
   111f4:	e7dd      	b.n	111b2 <dlms_readResponseDataBlockResult+0x68>
        return DLMS_ERROR_CODE_DATA_BLOCK_UNAVAILABLE;
   111f6:	240e      	movs	r4, #14
   111f8:	e7db      	b.n	111b2 <dlms_readResponseDataBlockResult+0x68>

000111fa <dlms_handleReadResponse>:
{
   111fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t pos, cnt = reply->totalCount;
   111fe:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
   11200:	f8ad 3006 	strh.w	r3, [sp, #6]
{
   11204:	4605      	mov	r5, r0
   11206:	4689      	mov	r9, r1
   11208:	4617      	mov	r7, r2
    unsigned char first = reply->totalCount == 0 || reply->commandType == DLMS_SINGLE_READ_RESPONSE_DATA_BLOCK_RESULT;
   1120a:	b113      	cbz	r3, 11212 <dlms_handleReadResponse+0x18>
    if (first)
   1120c:	78cb      	ldrb	r3, [r1, #3]
   1120e:	2b02      	cmp	r3, #2
   11210:	d120      	bne.n	11254 <dlms_handleReadResponse+0x5a>
        if (hlp_getObjectCount2(&reply->data, &cnt) != 0)
   11212:	f10d 0106 	add.w	r1, sp, #6
   11216:	f109 0004 	add.w	r0, r9, #4
   1121a:	f00a f9c3 	bl	1b5a4 <hlp_getObjectCount2>
   1121e:	2800      	cmp	r0, #0
   11220:	f040 809d 	bne.w	1135e <dlms_handleReadResponse+0x164>
        reply->totalCount = cnt;
   11224:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11228:	f8a9 3028 	strh.w	r3, [r9, #40]	; 0x28
   1122c:	2401      	movs	r4, #1
    if (cnt != 1)
   1122e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11232:	2a01      	cmp	r2, #1
   11234:	d014      	beq.n	11260 <dlms_handleReadResponse+0x66>
        if (reply->moreData != DLMS_DATA_REQUEST_TYPES_NONE)
   11236:	f899 2000 	ldrb.w	r2, [r9]
   1123a:	b16a      	cbz	r2, 11258 <dlms_handleReadResponse+0x5e>
            if ((ret = dlms_getDataFromBlock(&reply->data, 0)) == 0)
   1123c:	2100      	movs	r1, #0
   1123e:	f109 0004 	add.w	r0, r9, #4
   11242:	f7ff fe20 	bl	10e86 <dlms_getDataFromBlock>
                ret = DLMS_ERROR_CODE_FALSE;
   11246:	2800      	cmp	r0, #0
   11248:	bf08      	it	eq
   1124a:	f04f 30ff 	moveq.w	r0, #4294967295
}
   1124e:	b004      	add	sp, #16
   11250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11254:	2400      	movs	r4, #0
   11256:	e7ea      	b.n	1122e <dlms_handleReadResponse+0x34>
        if (!first)
   11258:	b90c      	cbnz	r4, 1125e <dlms_handleReadResponse+0x64>
            reply->data.position = 0;
   1125a:	f8a9 400c 	strh.w	r4, [r9, #12]
            first = 1;
   1125e:	2401      	movs	r4, #1
    va_init(&values);
   11260:	a802      	add	r0, sp, #8
   11262:	f00a fe0e 	bl	1be82 <va_init>
    for (pos = 0; pos != cnt; ++pos)
   11266:	2600      	movs	r6, #0
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   11268:	f109 0804 	add.w	r8, r9, #4
    for (pos = 0; pos != cnt; ++pos)
   1126c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11270:	b2b3      	uxth	r3, r6
   11272:	429a      	cmp	r2, r3
   11274:	d115      	bne.n	112a2 <dlms_handleReadResponse+0xa8>
    if (values.size != 0)
   11276:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1127a:	b15b      	cbz	r3, 11294 <dlms_handleReadResponse+0x9a>
        reply->dataValue.Arr = gxmalloc(sizeof(variantArray));
   1127c:	2008      	movs	r0, #8
   1127e:	f7fc f839 	bl	d2f4 <malloc>
   11282:	f8c9 0020 	str.w	r0, [r9, #32]
        va_init(reply->dataValue.Arr);
   11286:	f00a fdfc 	bl	1be82 <va_init>
        va_attach2(reply->dataValue.Arr, &values);
   1128a:	f8d9 0020 	ldr.w	r0, [r9, #32]
   1128e:	a902      	add	r1, sp, #8
   11290:	f00a fee5 	bl	1c05e <va_attach2>
    if (cnt != 1)
   11294:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   11298:	3801      	subs	r0, #1
   1129a:	bf18      	it	ne
   1129c:	f04f 30ff 	movne.w	r0, #4294967295
   112a0:	e7d5      	b.n	1124e <dlms_handleReadResponse+0x54>
        if (first)
   112a2:	b184      	cbz	r4, 112c6 <dlms_handleReadResponse+0xcc>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   112a4:	f10d 0103 	add.w	r1, sp, #3
   112a8:	4640      	mov	r0, r8
   112aa:	f7fd fa20 	bl	e6ee <bb_getUInt8>
   112ae:	2800      	cmp	r0, #0
   112b0:	d1cd      	bne.n	1124e <dlms_handleReadResponse+0x54>
            reply->commandType = ch;
   112b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   112b6:	f889 3003 	strb.w	r3, [r9, #3]
        switch (type)
   112ba:	2b03      	cmp	r3, #3
   112bc:	d852      	bhi.n	11364 <dlms_handleReadResponse+0x16a>
   112be:	e8df f003 	tbb	[pc, r3]
   112c2:	2505      	.short	0x2505
   112c4:	3830      	.short	0x3830
            type = (DLMS_SINGLE_READ_RESPONSE)reply->commandType;
   112c6:	f899 3003 	ldrb.w	r3, [r9, #3]
   112ca:	e7f6      	b.n	112ba <dlms_handleReadResponse+0xc0>
            if (cnt == 1)
   112cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   112d0:	2b01      	cmp	r3, #1
   112d2:	d105      	bne.n	112e0 <dlms_handleReadResponse+0xe6>
                ret = dlms_getDataFromBlock(&reply->data, 0);
   112d4:	2100      	movs	r1, #0
   112d6:	4640      	mov	r0, r8
   112d8:	f7ff fdd5 	bl	10e86 <dlms_getDataFromBlock>
    for (pos = 0; pos != cnt; ++pos)
   112dc:	3601      	adds	r6, #1
   112de:	e7c5      	b.n	1126c <dlms_handleReadResponse+0x72>
                reply->readPosition = reply->data.position;
   112e0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   112e4:	f8a9 302a 	strh.w	r3, [r9, #42]	; 0x2a
                dlms_getValueFromData(settings, reply);
   112e8:	4649      	mov	r1, r9
   112ea:	4628      	mov	r0, r5
   112ec:	f7ff febd 	bl	1106a <dlms_getValueFromData>
                va_push(&values, &reply->dataValue);
   112f0:	f109 0a18 	add.w	sl, r9, #24
                reply->data.position = reply->readPosition;
   112f4:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   112f8:	f8a9 300c 	strh.w	r3, [r9, #12]
                va_push(&values, &reply->dataValue);
   112fc:	4651      	mov	r1, sl
   112fe:	a802      	add	r0, sp, #8
   11300:	f00a fdeb 	bl	1beda <va_push>
                var_clear(&reply->dataValue);
   11304:	4650      	mov	r0, sl
   11306:	f00a fe36 	bl	1bf76 <var_clear>
   1130a:	e7e7      	b.n	112dc <dlms_handleReadResponse+0xe2>
            if ((ret = bb_getUInt8(&reply->data, &ch)) != 0)
   1130c:	f10d 0103 	add.w	r1, sp, #3
   11310:	f109 0004 	add.w	r0, r9, #4
   11314:	f7fd f9eb 	bl	e6ee <bb_getUInt8>
   11318:	2800      	cmp	r0, #0
   1131a:	d198      	bne.n	1124e <dlms_handleReadResponse+0x54>
            return ch;
   1131c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   11320:	e795      	b.n	1124e <dlms_handleReadResponse+0x54>
            if ((ret = dlms_readResponseDataBlockResult(settings, reply, index)) != 0)
   11322:	463a      	mov	r2, r7
   11324:	4649      	mov	r1, r9
   11326:	4628      	mov	r0, r5
   11328:	f7ff ff0f 	bl	1114a <dlms_readResponseDataBlockResult>
   1132c:	2800      	cmp	r0, #0
   1132e:	d0d5      	beq.n	112dc <dlms_handleReadResponse+0xe2>
   11330:	e78d      	b.n	1124e <dlms_handleReadResponse+0x54>
            if ((ret = bb_getUInt16(&reply->data, &number)) != 0)
   11332:	a901      	add	r1, sp, #4
   11334:	4640      	mov	r0, r8
   11336:	f7fd fa03 	bl	e740 <bb_getUInt16>
   1133a:	2800      	cmp	r0, #0
   1133c:	d187      	bne.n	1124e <dlms_handleReadResponse+0x54>
            if (number != settings->blockIndex)
   1133e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
   11342:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11346:	4293      	cmp	r3, r2
   11348:	d10f      	bne.n	1136a <dlms_handleReadResponse+0x170>
            ++settings->blockIndex;
   1134a:	3301      	adds	r3, #1
   1134c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
            reply->moreData |= DLMS_DATA_REQUEST_TYPES_BLOCK;
   11350:	f899 3000 	ldrb.w	r3, [r9]
   11354:	f043 0302 	orr.w	r3, r3, #2
   11358:	f889 3000 	strb.w	r3, [r9]
            break;
   1135c:	e7be      	b.n	112dc <dlms_handleReadResponse+0xe2>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
   1135e:	f44f 7082 	mov.w	r0, #260	; 0x104
   11362:	e774      	b.n	1124e <dlms_handleReadResponse+0x54>
    for (pos = 0; pos != cnt; ++pos)
   11364:	f240 100f 	movw	r0, #271	; 0x10f
   11368:	e771      	b.n	1124e <dlms_handleReadResponse+0x54>
                return DLMS_ERROR_CODE_DATA_BLOCK_NUMBER_INVALID;
   1136a:	2013      	movs	r0, #19
   1136c:	e76f      	b.n	1124e <dlms_handleReadResponse+0x54>

0001136e <dlms_handleMethodResponse>:
{
   1136e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
   11370:	1d0c      	adds	r4, r1, #4
{
   11372:	4606      	mov	r6, r0
   11374:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
   11376:	4620      	mov	r0, r4
   11378:	f10d 0107 	add.w	r1, sp, #7
   1137c:	f7fd f9b7 	bl	e6ee <bb_getUInt8>
   11380:	b9c0      	cbnz	r0, 113b4 <dlms_handleMethodResponse+0x46>
    if ((ret = bb_getUInt8(&data->data, &data->invokeId)) != 0)
   11382:	f105 0139 	add.w	r1, r5, #57	; 0x39
   11386:	4620      	mov	r0, r4
   11388:	f7fd f9b1 	bl	e6ee <bb_getUInt8>
   1138c:	b990      	cbnz	r0, 113b4 <dlms_handleMethodResponse+0x46>
    if ((ret = dlms_verifyInvokeId(settings, data)) != 0)
   1138e:	4629      	mov	r1, r5
   11390:	4630      	mov	r0, r6
   11392:	f7ff fd8a 	bl	10eaa <dlms_verifyInvokeId>
   11396:	b968      	cbnz	r0, 113b4 <dlms_handleMethodResponse+0x46>
    if (type == 1)
   11398:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1139c:	2b01      	cmp	r3, #1
   1139e:	d135      	bne.n	1140c <dlms_handleMethodResponse+0x9e>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   113a0:	f10d 0106 	add.w	r1, sp, #6
   113a4:	4620      	mov	r0, r4
   113a6:	f7fd f9a2 	bl	e6ee <bb_getUInt8>
   113aa:	b918      	cbnz	r0, 113b4 <dlms_handleMethodResponse+0x46>
        if (ch != 0)
   113ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
   113b0:	b113      	cbz	r3, 113b8 <dlms_handleMethodResponse+0x4a>
            return ch;
   113b2:	4618      	mov	r0, r3
}
   113b4:	b002      	add	sp, #8
   113b6:	bd70      	pop	{r4, r5, r6, pc}
        if (data->data.position < data->data.size)
   113b8:	89aa      	ldrh	r2, [r5, #12]
   113ba:	896b      	ldrh	r3, [r5, #10]
   113bc:	429a      	cmp	r2, r3
   113be:	d2f9      	bcs.n	113b4 <dlms_handleMethodResponse+0x46>
            if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   113c0:	f10d 0106 	add.w	r1, sp, #6
   113c4:	4620      	mov	r0, r4
   113c6:	f7fd f992 	bl	e6ee <bb_getUInt8>
   113ca:	2800      	cmp	r0, #0
   113cc:	d1f2      	bne.n	113b4 <dlms_handleMethodResponse+0x46>
            if (ch == 0)
   113ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
   113d2:	b923      	cbnz	r3, 113de <dlms_handleMethodResponse+0x70>
                return dlms_getDataFromBlock(&data->data, 0);
   113d4:	4601      	mov	r1, r0
   113d6:	4620      	mov	r0, r4
   113d8:	f7ff fd55 	bl	10e86 <dlms_getDataFromBlock>
   113dc:	e7ea      	b.n	113b4 <dlms_handleMethodResponse+0x46>
            else if (ch == 1) //Data-Access-Result
   113de:	2b01      	cmp	r3, #1
   113e0:	d117      	bne.n	11412 <dlms_handleMethodResponse+0xa4>
                if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   113e2:	f10d 0106 	add.w	r1, sp, #6
   113e6:	4620      	mov	r0, r4
   113e8:	f7fd f981 	bl	e6ee <bb_getUInt8>
   113ec:	2800      	cmp	r0, #0
   113ee:	d1e1      	bne.n	113b4 <dlms_handleMethodResponse+0x46>
                if (ch != 0)
   113f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   113f4:	2b00      	cmp	r3, #0
   113f6:	d0ed      	beq.n	113d4 <dlms_handleMethodResponse+0x66>
                    if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   113f8:	f10d 0106 	add.w	r1, sp, #6
   113fc:	4620      	mov	r0, r4
   113fe:	f7fd f976 	bl	e6ee <bb_getUInt8>
   11402:	2800      	cmp	r0, #0
   11404:	d1d6      	bne.n	113b4 <dlms_handleMethodResponse+0x46>
                    return ch;
   11406:	f89d 0006 	ldrb.w	r0, [sp, #6]
   1140a:	e7d3      	b.n	113b4 <dlms_handleMethodResponse+0x46>
        return DLMS_ERROR_CODE_INVALID_COMMAND;
   1140c:	f44f 7080 	mov.w	r0, #256	; 0x100
   11410:	e7d0      	b.n	113b4 <dlms_handleMethodResponse+0x46>
                return DLMS_ERROR_CODE_INVALID_TAG;
   11412:	f240 100f 	movw	r0, #271	; 0x10f
   11416:	e7cd      	b.n	113b4 <dlms_handleMethodResponse+0x46>

00011418 <dlms_handleSetResponse>:
{
   11418:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
   1141a:	1d0d      	adds	r5, r1, #4
{
   1141c:	4606      	mov	r6, r0
   1141e:	460c      	mov	r4, r1
    if ((ret = bb_getUInt8(&data->data, &type)) != 0)
   11420:	4628      	mov	r0, r5
   11422:	f10d 0103 	add.w	r1, sp, #3
   11426:	f7fd f962 	bl	e6ee <bb_getUInt8>
   1142a:	b9c0      	cbnz	r0, 1145e <dlms_handleSetResponse+0x46>
    if ((ret = bb_getUInt8(&data->data, &data->invokeId)) != 0)
   1142c:	f104 0139 	add.w	r1, r4, #57	; 0x39
   11430:	4628      	mov	r0, r5
   11432:	f7fd f95c 	bl	e6ee <bb_getUInt8>
   11436:	b990      	cbnz	r0, 1145e <dlms_handleSetResponse+0x46>
    if ((ret = dlms_verifyInvokeId(settings, data)) != 0)
   11438:	4621      	mov	r1, r4
   1143a:	4630      	mov	r0, r6
   1143c:	f7ff fd35 	bl	10eaa <dlms_verifyInvokeId>
   11440:	b968      	cbnz	r0, 1145e <dlms_handleSetResponse+0x46>
    if (type == DLMS_SET_RESPONSE_TYPE_NORMAL)
   11442:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11446:	2b01      	cmp	r3, #1
   11448:	d10b      	bne.n	11462 <dlms_handleSetResponse+0x4a>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   1144a:	a901      	add	r1, sp, #4
   1144c:	4628      	mov	r0, r5
   1144e:	f7fd f94e 	bl	e6ee <bb_getUInt8>
   11452:	b920      	cbnz	r0, 1145e <dlms_handleSetResponse+0x46>
        if (ch != 0)
   11454:	f89d 3004 	ldrb.w	r3, [sp, #4]
            return ch;
   11458:	2b00      	cmp	r3, #0
   1145a:	bf18      	it	ne
   1145c:	4618      	movne	r0, r3
}
   1145e:	b002      	add	sp, #8
   11460:	bd70      	pop	{r4, r5, r6, pc}
    else if (type == DLMS_SET_RESPONSE_TYPE_DATA_BLOCK || type == DLMS_SET_RESPONSE_TYPE_LAST_DATA_BLOCK)
   11462:	3b02      	subs	r3, #2
   11464:	2b01      	cmp	r3, #1
   11466:	d804      	bhi.n	11472 <dlms_handleSetResponse+0x5a>
        if ((ret = bb_getUInt32(&data->data, &tmp)) != 0)
   11468:	a901      	add	r1, sp, #4
   1146a:	4628      	mov	r0, r5
   1146c:	f7fd f97d 	bl	e76a <bb_getUInt32>
   11470:	e7f5      	b.n	1145e <dlms_handleSetResponse+0x46>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   11472:	f44f 7081 	mov.w	r0, #258	; 0x102
   11476:	e7f2      	b.n	1145e <dlms_handleSetResponse+0x46>

00011478 <dlms_changeType>:
{
   11478:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1147a:	4615      	mov	r5, r2
   1147c:	4606      	mov	r6, r0
    di_init(&info);
   1147e:	4668      	mov	r0, sp
{
   11480:	460c      	mov	r4, r1
    di_init(&info);
   11482:	f7fe f809 	bl	f498 <di_init>
    var_clear(newValue);
   11486:	4628      	mov	r0, r5
   11488:	f00a fd75 	bl	1bf76 <var_clear>
    if (value->size == 0)
   1148c:	88f3      	ldrh	r3, [r6, #6]
   1148e:	b943      	cbnz	r3, 114a2 <dlms_changeType+0x2a>
        if (type == DLMS_DATA_TYPE_STRING || type == DLMS_DATA_TYPE_STRING_UTF8)
   11490:	2c0a      	cmp	r4, #10
   11492:	d004      	beq.n	1149e <dlms_changeType+0x26>
   11494:	2c0c      	cmp	r4, #12
   11496:	d002      	beq.n	1149e <dlms_changeType+0x26>
        return DLMS_ERROR_CODE_OK;
   11498:	2000      	movs	r0, #0
}
   1149a:	b002      	add	sp, #8
   1149c:	bd70      	pop	{r4, r5, r6, pc}
            newValue->vt = type;
   1149e:	702c      	strb	r4, [r5, #0]
   114a0:	e7fa      	b.n	11498 <dlms_changeType+0x20>
    if (type == DLMS_DATA_TYPE_NONE)
   114a2:	b18c      	cbz	r4, 114c8 <dlms_changeType+0x50>
    if ((ret = dlms_getData(value, &info, newValue)) != 0)
   114a4:	462a      	mov	r2, r5
   114a6:	4669      	mov	r1, sp
   114a8:	4630      	mov	r0, r6
    info.type = type;
   114aa:	f88d 4004 	strb.w	r4, [sp, #4]
    if ((ret = dlms_getData(value, &info, newValue)) != 0)
   114ae:	f7fe fc83 	bl	fdb8 <dlms_getData>
   114b2:	2800      	cmp	r0, #0
   114b4:	d1f1      	bne.n	1149a <dlms_changeType+0x22>
    if (!info.complete)
   114b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    value->position = 0;
   114ba:	8130      	strh	r0, [r6, #8]
    if (!info.complete)
   114bc:	b13b      	cbz	r3, 114ce <dlms_changeType+0x56>
    if (type == DLMS_DATA_TYPE_OCTET_STRING && newValue->vt == DLMS_DATA_TYPE_OCTET_STRING)
   114be:	2c09      	cmp	r4, #9
   114c0:	d1ea      	bne.n	11498 <dlms_changeType+0x20>
   114c2:	782b      	ldrb	r3, [r5, #0]
   114c4:	2b09      	cmp	r3, #9
   114c6:	d1e7      	bne.n	11498 <dlms_changeType+0x20>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   114c8:	f44f 7081 	mov.w	r0, #258	; 0x102
   114cc:	e7e5      	b.n	1149a <dlms_changeType+0x22>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   114ce:	f44f 7082 	mov.w	r0, #260	; 0x104
   114d2:	e7e2      	b.n	1149a <dlms_changeType+0x22>

000114d4 <dlms_changeType2>:
{
   114d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   114d6:	460d      	mov	r5, r1
    if (value->byteArr != NULL)
   114d8:	6881      	ldr	r1, [r0, #8]
{
   114da:	4604      	mov	r4, r0
   114dc:	4616      	mov	r6, r2
    if (value->byteArr != NULL)
   114de:	b149      	cbz	r1, 114f4 <dlms_changeType2+0x20>
        bb_attach(&bb, value->byteArr->data, value->byteArr->size, value->byteArr->size);
   114e0:	88cb      	ldrh	r3, [r1, #6]
   114e2:	6809      	ldr	r1, [r1, #0]
   114e4:	461a      	mov	r2, r3
   114e6:	a801      	add	r0, sp, #4
   114e8:	f7fd f8c7 	bl	e67a <bb_attach>
        bb.position = value->byteArr->position;
   114ec:	68a3      	ldr	r3, [r4, #8]
   114ee:	891b      	ldrh	r3, [r3, #8]
   114f0:	f8ad 300c 	strh.w	r3, [sp, #12]
    return dlms_changeType(&bb, type, newValue);
   114f4:	4632      	mov	r2, r6
   114f6:	4629      	mov	r1, r5
   114f8:	a801      	add	r0, sp, #4
   114fa:	f7ff ffbd 	bl	11478 <dlms_changeType>
}
   114fe:	b004      	add	sp, #16
   11500:	bd70      	pop	{r4, r5, r6, pc}

00011502 <dlms_handleDataNotification>:
{
   11502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ((ret = bb_getUInt32(&reply->data, &id)) != 0)
   11506:	1d0e      	adds	r6, r1, #4
{
   11508:	b08c      	sub	sp, #48	; 0x30
    uint16_t start = (uint16_t)(reply->data.position - 1);
   1150a:	f8b1 800c 	ldrh.w	r8, [r1, #12]
{
   1150e:	4607      	mov	r7, r0
   11510:	460d      	mov	r5, r1
    if ((ret = bb_getUInt32(&reply->data, &id)) != 0)
   11512:	4630      	mov	r0, r6
   11514:	a901      	add	r1, sp, #4
   11516:	f7fd f928 	bl	e76a <bb_getUInt32>
   1151a:	4604      	mov	r4, r0
   1151c:	bb98      	cbnz	r0, 11586 <dlms_handleDataNotification+0x84>
    reply->time = 0;
   1151e:	6368      	str	r0, [r5, #52]	; 0x34
    if ((ret = bb_getUInt8(&reply->data, &len)) != 0)
   11520:	f10d 0103 	add.w	r1, sp, #3
   11524:	4630      	mov	r0, r6
   11526:	f7fd f8e2 	bl	e6ee <bb_getUInt8>
   1152a:	4604      	mov	r4, r0
   1152c:	bb58      	cbnz	r0, 11586 <dlms_handleDataNotification+0x84>
    if (len != 0)
   1152e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   11532:	b1db      	cbz	r3, 1156c <dlms_handleDataNotification+0x6a>
        var_init(&t);
   11534:	a808      	add	r0, sp, #32
   11536:	f00a fbc2 	bl	1bcbe <var_init>
        bb_attach(&tmp, buff, 0, sizeof(buff));
   1153a:	4622      	mov	r2, r4
   1153c:	230c      	movs	r3, #12
   1153e:	a905      	add	r1, sp, #20
   11540:	a802      	add	r0, sp, #8
   11542:	f7fd f89a 	bl	e67a <bb_attach>
        if ((ret = bb_set2(&tmp, &reply->data, reply->data.position, len)) != 0 ||
   11546:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1154a:	89aa      	ldrh	r2, [r5, #12]
   1154c:	4631      	mov	r1, r6
   1154e:	a802      	add	r0, sp, #8
   11550:	f7fd f872 	bl	e638 <bb_set2>
   11554:	4604      	mov	r4, r0
   11556:	b9b0      	cbnz	r0, 11586 <dlms_handleDataNotification+0x84>
            (ret = dlms_changeType(&tmp, DLMS_DATA_TYPE_DATETIME, &t)) != 0)
   11558:	aa08      	add	r2, sp, #32
   1155a:	2119      	movs	r1, #25
   1155c:	a802      	add	r0, sp, #8
   1155e:	f7ff ff8b 	bl	11478 <dlms_changeType>
        if ((ret = bb_set2(&tmp, &reply->data, reply->data.position, len)) != 0 ||
   11562:	4604      	mov	r4, r0
   11564:	b978      	cbnz	r0, 11586 <dlms_handleDataNotification+0x84>
        reply->time = t.dateTime->value;
   11566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11568:	681b      	ldr	r3, [r3, #0]
   1156a:	636b      	str	r3, [r5, #52]	; 0x34
    uint16_t start = (uint16_t)(reply->data.position - 1);
   1156c:	f108 31ff 	add.w	r1, r8, #4294967295
    if ((ret = dlms_getDataFromBlock(&reply->data, start)) != 0)
   11570:	b289      	uxth	r1, r1
   11572:	4630      	mov	r0, r6
   11574:	f7ff fc87 	bl	10e86 <dlms_getDataFromBlock>
   11578:	4604      	mov	r4, r0
   1157a:	b920      	cbnz	r0, 11586 <dlms_handleDataNotification+0x84>
    return dlms_getValueFromData(settings, reply);
   1157c:	4629      	mov	r1, r5
   1157e:	4638      	mov	r0, r7
   11580:	f7ff fd73 	bl	1106a <dlms_getValueFromData>
   11584:	4604      	mov	r4, r0
}
   11586:	4620      	mov	r0, r4
   11588:	b00c      	add	sp, #48	; 0x30
   1158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001158e <dlms_handleConfirmedServiceError>:
{
   1158e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   11590:	f10d 0107 	add.w	r1, sp, #7
{
   11594:	4605      	mov	r5, r0
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   11596:	f7fd f8aa 	bl	e6ee <bb_getUInt8>
   1159a:	b9b8      	cbnz	r0, 115cc <dlms_handleConfirmedServiceError+0x3e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   1159c:	f10d 0107 	add.w	r1, sp, #7
   115a0:	4628      	mov	r0, r5
    DLMS_CONFIRMED_SERVICE_ERROR service = (DLMS_CONFIRMED_SERVICE_ERROR)ch;
   115a2:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   115a6:	f7fd f8a2 	bl	e6ee <bb_getUInt8>
   115aa:	b978      	cbnz	r0, 115cc <dlms_handleConfirmedServiceError+0x3e>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   115ac:	f10d 0107 	add.w	r1, sp, #7
   115b0:	4628      	mov	r0, r5
    DLMS_SERVICE_ERROR type = (DLMS_SERVICE_ERROR)ch;
   115b2:	f89d 6007 	ldrb.w	r6, [sp, #7]
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   115b6:	f7fd f89a 	bl	e6ee <bb_getUInt8>
   115ba:	b938      	cbnz	r0, 115cc <dlms_handleConfirmedServiceError+0x3e>
    ret <<= 16;
   115bc:	0420      	lsls	r0, r4, #16
    ret |= ch;
   115be:	f89d 4007 	ldrb.w	r4, [sp, #7]
   115c2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   115c6:	4320      	orrs	r0, r4
   115c8:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
}
   115cc:	b002      	add	sp, #8
   115ce:	bd70      	pop	{r4, r5, r6, pc}

000115d0 <dlms_handleExceptionResponse>:
{
   115d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   115d2:	f10d 0103 	add.w	r1, sp, #3
{
   115d6:	4604      	mov	r4, r0
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   115d8:	f7fd f889 	bl	e6ee <bb_getUInt8>
   115dc:	b9c0      	cbnz	r0, 11610 <dlms_handleExceptionResponse+0x40>
    if ((ret = bb_getUInt8(data, &ch)) != 0)
   115de:	f10d 0103 	add.w	r1, sp, #3
   115e2:	4620      	mov	r0, r4
   115e4:	f7fd f883 	bl	e6ee <bb_getUInt8>
   115e8:	b990      	cbnz	r0, 11610 <dlms_handleExceptionResponse+0x40>
    error = (DLMS_EXCEPTION_SERVICE_ERROR)ch;
   115ea:	f89d 5003 	ldrb.w	r5, [sp, #3]
    unsigned long value = 0;
   115ee:	9001      	str	r0, [sp, #4]
    if (error == DLMS_EXCEPTION_SERVICE_ERROR_INVOCATION_COUNTER_ERROR && bb_available(data) > 3)
   115f0:	2d06      	cmp	r5, #6
   115f2:	d108      	bne.n	11606 <dlms_handleExceptionResponse+0x36>
   115f4:	4620      	mov	r0, r4
   115f6:	f7fc fe94 	bl	e322 <bb_available>
   115fa:	2803      	cmp	r0, #3
   115fc:	d903      	bls.n	11606 <dlms_handleExceptionResponse+0x36>
        bb_getUInt32(data, &value);
   115fe:	a901      	add	r1, sp, #4
   11600:	4620      	mov	r0, r4
   11602:	f7fd f8b2 	bl	e76a <bb_getUInt32>
    return DLMS_ERROR_TYPE_EXCEPTION_RESPONSE | value << 8 | error;
   11606:	9801      	ldr	r0, [sp, #4]
   11608:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   1160c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
}
   11610:	b003      	add	sp, #12
   11612:	bd30      	pop	{r4, r5, pc}

00011614 <dlms_handleGbt>:
{
   11614:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if ((ret = bb_getUInt8(&data->data, &bc)) != 0)
   11618:	f101 0804 	add.w	r8, r1, #4
    uint16_t index = (uint16_t)(data->data.position - 1);
   1161c:	898e      	ldrh	r6, [r1, #12]
{
   1161e:	4607      	mov	r7, r0
   11620:	460d      	mov	r5, r1
    if ((ret = bb_getUInt8(&data->data, &bc)) != 0)
   11622:	4640      	mov	r0, r8
   11624:	f10d 0101 	add.w	r1, sp, #1
   11628:	f7fd f861 	bl	e6ee <bb_getUInt8>
   1162c:	4604      	mov	r4, r0
   1162e:	bb18      	cbnz	r0, 11678 <dlms_handleGbt+0x64>
    data->streaming = (bc & 0x40) != 0;
   11630:	f89d 3001 	ldrb.w	r3, [sp, #1]
   11634:	f3c3 1280 	ubfx	r2, r3, #6, #1
    data->windowSize = (bc & 0x3F);
   11638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    data->streaming = (bc & 0x40) != 0;
   1163c:	642a      	str	r2, [r5, #64]	; 0x40
    data->windowSize = (bc & 0x3F);
   1163e:	646b      	str	r3, [r5, #68]	; 0x44
    if ((ret = bb_getUInt16(&data->data, &bn)) != 0)
   11640:	f10d 0102 	add.w	r1, sp, #2
   11644:	4640      	mov	r0, r8
   11646:	f7fd f87b 	bl	e740 <bb_getUInt16>
   1164a:	4604      	mov	r4, r0
   1164c:	b9a0      	cbnz	r0, 11678 <dlms_handleGbt+0x64>
    if ((ret = bb_getUInt16(&data->data, &bna)) != 0)
   1164e:	a901      	add	r1, sp, #4
   11650:	4640      	mov	r0, r8
   11652:	f7fd f875 	bl	e740 <bb_getUInt16>
   11656:	4604      	mov	r4, r0
   11658:	b970      	cbnz	r0, 11678 <dlms_handleGbt+0x64>
    if (bn == 1)
   1165a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   1165e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   11662:	2901      	cmp	r1, #1
   11664:	d00c      	beq.n	11680 <dlms_handleGbt+0x6c>
    else if (bna != settings->blockIndex - 1)
   11666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1166a:	3b01      	subs	r3, #1
    uint16_t index = (uint16_t)(data->data.position - 1);
   1166c:	3e01      	subs	r6, #1
    else if (bna != settings->blockIndex - 1)
   1166e:	429a      	cmp	r2, r3
    uint16_t index = (uint16_t)(data->data.position - 1);
   11670:	b2b6      	uxth	r6, r6
    else if (bna != settings->blockIndex - 1)
   11672:	d006      	beq.n	11682 <dlms_handleGbt+0x6e>
        data->data.size = index;
   11674:	816e      	strh	r6, [r5, #10]
        data->command = DLMS_COMMAND_NONE;
   11676:	7068      	strb	r0, [r5, #1]
}
   11678:	4620      	mov	r0, r4
   1167a:	b002      	add	sp, #8
   1167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        index = 0;
   11680:	4606      	mov	r6, r0
    data->command = DLMS_COMMAND_NONE;
   11682:	2300      	movs	r3, #0
    data->blockNumber = bn;
   11684:	8769      	strh	r1, [r5, #58]	; 0x3a
    data->blockNumberAck = bna;
   11686:	87aa      	strh	r2, [r5, #60]	; 0x3c
    data->command = DLMS_COMMAND_NONE;
   11688:	706b      	strb	r3, [r5, #1]
    if (hlp_getObjectCount2(&data->data, &len) != 0)
   1168a:	f10d 0106 	add.w	r1, sp, #6
   1168e:	4640      	mov	r0, r8
   11690:	f009 ff88 	bl	1b5a4 <hlp_getObjectCount2>
   11694:	4604      	mov	r4, r0
   11696:	2800      	cmp	r0, #0
   11698:	d13c      	bne.n	11714 <dlms_handleGbt+0x100>
    if (len != (data->data.size - data->data.position))
   1169a:	896b      	ldrh	r3, [r5, #10]
   1169c:	89a9      	ldrh	r1, [r5, #12]
   1169e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   116a2:	1a5b      	subs	r3, r3, r1
   116a4:	429a      	cmp	r2, r3
   116a6:	d001      	beq.n	116ac <dlms_handleGbt+0x98>
        data->complete = 0;
   116a8:	7428      	strb	r0, [r5, #16]
        return 0;
   116aa:	e7e5      	b.n	11678 <dlms_handleGbt+0x64>
    if ((ret = dlms_getDataFromBlock(&data->data, index)) != 0)
   116ac:	4631      	mov	r1, r6
   116ae:	4640      	mov	r0, r8
   116b0:	f7ff fbe9 	bl	10e86 <dlms_getDataFromBlock>
   116b4:	4604      	mov	r4, r0
   116b6:	2800      	cmp	r0, #0
   116b8:	d1de      	bne.n	11678 <dlms_handleGbt+0x64>
    if ((bc & 0x80) == 0) {
   116ba:	f99d 2001 	ldrsb.w	r2, [sp, #1]
   116be:	782b      	ldrb	r3, [r5, #0]
   116c0:	2a00      	cmp	r2, #0
   116c2:	db03      	blt.n	116cc <dlms_handleGbt+0xb8>
        data->moreData |= DLMS_DATA_REQUEST_TYPES_GBT;
   116c4:	f043 0304 	orr.w	r3, r3, #4
   116c8:	702b      	strb	r3, [r5, #0]
   116ca:	e7d5      	b.n	11678 <dlms_handleGbt+0x64>
        data->moreData &= ~DLMS_DATA_REQUEST_TYPES_GBT;
   116cc:	f023 0304 	bic.w	r3, r3, #4
   116d0:	702b      	strb	r3, [r5, #0]
        if (data->data.size != 0)
   116d2:	896b      	ldrh	r3, [r5, #10]
   116d4:	2b00      	cmp	r3, #0
   116d6:	d0cf      	beq.n	11678 <dlms_handleGbt+0x64>
            data->data.position = 0;
   116d8:	81a8      	strh	r0, [r5, #12]
            if ((ret = dlms_getPdu(settings, data, 0)) != 0)
   116da:	4602      	mov	r2, r0
   116dc:	4629      	mov	r1, r5
   116de:	4638      	mov	r0, r7
   116e0:	f7f1 fb42 	bl	2d68 <dlms_getPdu>
   116e4:	b9a0      	cbnz	r0, 11710 <dlms_handleGbt+0xfc>
            if (data->data.position != data->data.size
   116e6:	89aa      	ldrh	r2, [r5, #12]
   116e8:	896b      	ldrh	r3, [r5, #10]
   116ea:	429a      	cmp	r2, r3
   116ec:	d0c4      	beq.n	11678 <dlms_handleGbt+0x64>
                    data->command == DLMS_COMMAND_READ_RESPONSE ||
   116ee:	786b      	ldrb	r3, [r5, #1]
                && (
   116f0:	2b0c      	cmp	r3, #12
   116f2:	d001      	beq.n	116f8 <dlms_handleGbt+0xe4>
                    data->command == DLMS_COMMAND_READ_RESPONSE ||
   116f4:	2bc4      	cmp	r3, #196	; 0xc4
   116f6:	d1bf      	bne.n	11678 <dlms_handleGbt+0x64>
                && (data->moreData == DLMS_DATA_REQUEST_TYPES_NONE || data->peek))
   116f8:	782b      	ldrb	r3, [r5, #0]
   116fa:	b11b      	cbz	r3, 11704 <dlms_handleGbt+0xf0>
   116fc:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   11700:	2b00      	cmp	r3, #0
   11702:	d0b9      	beq.n	11678 <dlms_handleGbt+0x64>
                data->data.position = 0;
   11704:	2300      	movs	r3, #0
   11706:	81ab      	strh	r3, [r5, #12]
                ret = dlms_getValueFromData(settings, data);
   11708:	4629      	mov	r1, r5
   1170a:	4638      	mov	r0, r7
   1170c:	f7ff fcad 	bl	1106a <dlms_getValueFromData>
   11710:	4604      	mov	r4, r0
   11712:	e7b1      	b.n	11678 <dlms_handleGbt+0x64>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   11714:	f44f 7482 	mov.w	r4, #260	; 0x104
   11718:	e7ae      	b.n	11678 <dlms_handleGbt+0x64>

0001171a <dlms_handleGloDedResponse>:
{
   1171a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   1171e:	780b      	ldrb	r3, [r1, #0]
   11720:	07db      	lsls	r3, r3, #31
{
   11722:	b08d      	sub	sp, #52	; 0x34
   11724:	4605      	mov	r5, r0
   11726:	460c      	mov	r4, r1
   11728:	4616      	mov	r6, r2
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   1172a:	d461      	bmi.n	117f0 <dlms_handleGloDedResponse+0xd6>
        bb_attach(&bb, data->data.data + index, bb_available(&data->data), bb_getCapacity(&data->data));
   1172c:	460f      	mov	r7, r1
        data->data.position = index;
   1172e:	818a      	strh	r2, [r1, #12]
        bb_attach(&bb, data->data.data + index, bb_available(&data->data), bb_getCapacity(&data->data));
   11730:	f857 1f04 	ldr.w	r1, [r7, #4]!
   11734:	4638      	mov	r0, r7
   11736:	eb01 0802 	add.w	r8, r1, r2
   1173a:	f7fc fdf2 	bl	e322 <bb_available>
   1173e:	4681      	mov	r9, r0
   11740:	4638      	mov	r0, r7
   11742:	f7fc fdf4 	bl	e32e <bb_getCapacity>
   11746:	464a      	mov	r2, r9
   11748:	4603      	mov	r3, r0
   1174a:	4641      	mov	r1, r8
   1174c:	a809      	add	r0, sp, #36	; 0x24
   1174e:	f7fc ff94 	bl	e67a <bb_attach>
    return settings->cipher.dedicatedKey != NULL;
   11752:	f8d5 c0d4 	ldr.w	ip, [r5, #212]	; 0xd4
   11756:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
   1175a:	f105 011c 	add.w	r1, r5, #28
   1175e:	aa06      	add	r2, sp, #24
   11760:	f10d 0716 	add.w	r7, sp, #22
   11764:	f10d 0317 	add.w	r3, sp, #23
        if (dlms_useDedicatedKey(settings) && (settings->connected & DLMS_CONNECTION_STATE_DLMS) != 0)
   11768:	f1bc 0f00 	cmp.w	ip, #0
   1176c:	d033      	beq.n	117d6 <dlms_handleGloDedResponse+0xbc>
   1176e:	f895 e0a4 	ldrb.w	lr, [r5, #164]	; 0xa4
   11772:	f01e 0f02 	tst.w	lr, #2
   11776:	d02e      	beq.n	117d6 <dlms_handleGloDedResponse+0xbc>
            if ((ret = cip_decrypt(&settings->cipher,
   11778:	e9cd 7201 	strd	r7, r2, [sp, #4]
   1177c:	9300      	str	r3, [sp, #0]
   1177e:	4662      	mov	r2, ip
   11780:	ab09      	add	r3, sp, #36	; 0x24
   11782:	f7f0 fb87 	bl	1e94 <cip_decrypt>
   11786:	bb18      	cbnz	r0, 117d0 <dlms_handleGloDedResponse+0xb6>
        data->data.size = bb.size + index;
   11788:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
        data->data.position += bb.position;
   1178c:	89a3      	ldrh	r3, [r4, #12]
        data->data.size = bb.size + index;
   1178e:	4416      	add	r6, r2
        data->data.position += bb.position;
   11790:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
        data->data.size = bb.size + index;
   11794:	8166      	strh	r6, [r4, #10]
        data->data.position += bb.position;
   11796:	4413      	add	r3, r2
   11798:	81a3      	strh	r3, [r4, #12]
        if (settings->cipher.security != security)
   1179a:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
   1179e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   117a2:	429a      	cmp	r2, r3
   117a4:	d11e      	bne.n	117e4 <dlms_handleGloDedResponse+0xca>
        if (settings->expectedInvocationCounter != NULL)
   117a6:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   117aa:	b148      	cbz	r0, 117c0 <dlms_handleGloDedResponse+0xa6>
            if (invocationCounter != *settings->expectedInvocationCounter)
   117ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   117b0:	6801      	ldr	r1, [r0, #0]
   117b2:	2700      	movs	r7, #0
   117b4:	429f      	cmp	r7, r3
   117b6:	bf08      	it	eq
   117b8:	4291      	cmpeq	r1, r2
   117ba:	d116      	bne.n	117ea <dlms_handleGloDedResponse+0xd0>
            * settings->expectedInvocationCounter = (uint32_t)(1 + invocationCounter);
   117bc:	3101      	adds	r1, #1
   117be:	6001      	str	r1, [r0, #0]
        data->command = DLMS_COMMAND_NONE;
   117c0:	2200      	movs	r2, #0
   117c2:	7062      	strb	r2, [r4, #1]
        ret = dlms_getPdu(settings, data, 0);
   117c4:	4621      	mov	r1, r4
   117c6:	4628      	mov	r0, r5
   117c8:	f7f1 face 	bl	2d68 <dlms_getPdu>
        data->cipherIndex = (uint16_t)data->data.size;
   117cc:	8963      	ldrh	r3, [r4, #10]
   117ce:	8663      	strh	r3, [r4, #50]	; 0x32
}
   117d0:	b00d      	add	sp, #52	; 0x34
   117d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if ((ret = cip_decrypt(&settings->cipher,
   117d6:	e9cd 7201 	strd	r7, r2, [sp, #4]
   117da:	9300      	str	r3, [sp, #0]
   117dc:	f105 02ac 	add.w	r2, r5, #172	; 0xac
   117e0:	ab09      	add	r3, sp, #36	; 0x24
   117e2:	e7ce      	b.n	11782 <dlms_handleGloDedResponse+0x68>
            return DLMS_ERROR_CODE_INVALID_DECIPHERING_ERROR;
   117e4:	f240 101d 	movw	r0, #285	; 0x11d
   117e8:	e7f2      	b.n	117d0 <dlms_handleGloDedResponse+0xb6>
                return DLMS_ERROR_CODE_INVOCATION_COUNTER_TOO_SMALL;
   117ea:	f44f 708e 	mov.w	r0, #284	; 0x11c
   117ee:	e7ef      	b.n	117d0 <dlms_handleGloDedResponse+0xb6>
    int ret = 0;
   117f0:	2000      	movs	r0, #0
   117f2:	e7ed      	b.n	117d0 <dlms_handleGloDedResponse+0xb6>

000117f4 <dlms_handleGeneralCiphering>:
{
   117f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   117f6:	780b      	ldrb	r3, [r1, #0]
   117f8:	07db      	lsls	r3, r3, #31
{
   117fa:	b089      	sub	sp, #36	; 0x24
   117fc:	4606      	mov	r6, r0
   117fe:	460d      	mov	r5, r1
    if ((data->moreData & DLMS_DATA_REQUEST_TYPES_FRAME) == 0)
   11800:	d42b      	bmi.n	1185a <dlms_handleGeneralCiphering+0x66>
        --data->data.position;
   11802:	898b      	ldrh	r3, [r1, #12]
   11804:	3b01      	subs	r3, #1
   11806:	818b      	strh	r3, [r1, #12]
        if ((ret = cip_decrypt(&settings->cipher,
   11808:	ab06      	add	r3, sp, #24
   1180a:	9302      	str	r3, [sp, #8]
   1180c:	f10d 0317 	add.w	r3, sp, #23
   11810:	1d0f      	adds	r7, r1, #4
   11812:	9301      	str	r3, [sp, #4]
   11814:	f10d 0316 	add.w	r3, sp, #22
   11818:	9300      	str	r3, [sp, #0]
   1181a:	f100 02ac 	add.w	r2, r0, #172	; 0xac
   1181e:	f100 011c 	add.w	r1, r0, #28
   11822:	463b      	mov	r3, r7
   11824:	30a8      	adds	r0, #168	; 0xa8
   11826:	f7f0 fb35 	bl	1e94 <cip_decrypt>
   1182a:	4604      	mov	r4, r0
   1182c:	b990      	cbnz	r0, 11854 <dlms_handleGeneralCiphering+0x60>
        if ((ret = bb_getUInt8(&data->data, &ch)) != 0)
   1182e:	f10d 0115 	add.w	r1, sp, #21
   11832:	4638      	mov	r0, r7
   11834:	f7fc ff5b 	bl	e6ee <bb_getUInt8>
   11838:	4604      	mov	r4, r0
   1183a:	b958      	cbnz	r0, 11854 <dlms_handleGeneralCiphering+0x60>
        if (security != DLMS_SECURITY_NONE)
   1183c:	f89d 3016 	ldrb.w	r3, [sp, #22]
        data->command = DLMS_COMMAND_NONE;
   11840:	7068      	strb	r0, [r5, #1]
        if (security != DLMS_SECURITY_NONE)
   11842:	b13b      	cbz	r3, 11854 <dlms_handleGeneralCiphering+0x60>
            if ((ret = dlms_getPdu(settings, data, 0)) != 0)
   11844:	4602      	mov	r2, r0
   11846:	4629      	mov	r1, r5
   11848:	4630      	mov	r0, r6
   1184a:	f7f1 fa8d 	bl	2d68 <dlms_getPdu>
   1184e:	2800      	cmp	r0, #0
   11850:	bf18      	it	ne
   11852:	4604      	movne	r4, r0
}
   11854:	4620      	mov	r0, r4
   11856:	b009      	add	sp, #36	; 0x24
   11858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 0;
   1185a:	2400      	movs	r4, #0
   1185c:	e7fa      	b.n	11854 <dlms_handleGeneralCiphering+0x60>

0001185e <dlms_getData2>:
int dlms_getData2(
    dlmsSettings* settings,
    gxByteBuffer* reply,
    gxReplyData* data,
    unsigned char first)
{
   1185e:	b5f0      	push	{r4, r5, r6, r7, lr}
   11860:	b087      	sub	sp, #28
   11862:	461f      	mov	r7, r3
    int ret;
    unsigned char frame = 0;
   11864:	2300      	movs	r3, #0
   11866:	f88d 3017 	strb.w	r3, [sp, #23]
    switch (settings->interfaceType)
   1186a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
   1186e:	4605      	mov	r5, r0
   11870:	460e      	mov	r6, r1
   11872:	4614      	mov	r4, r2
   11874:	2b06      	cmp	r3, #6
   11876:	d862      	bhi.n	1193e <dlms_getData2+0xe0>
   11878:	e8df f003 	tbb	[pc, r3]
   1187c:	191d1504 	.word	0x191d1504
   11880:	4704      	.short	0x4704
   11882:	4b          	.byte	0x4b
   11883:	00          	.byte	0x00
    {
#ifndef DLMS_IGNORE_HDLC
    case DLMS_INTERFACE_TYPE_HDLC:
    case DLMS_INTERFACE_TYPE_HDLC_WITH_MODE_E:
        ret = dlms_getHdlcData(settings->server, settings, reply, data, &frame, data->preEstablished, first);
   11884:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11888:	9301      	str	r3, [sp, #4]
   1188a:	f10d 0317 	add.w	r3, sp, #23
   1188e:	9300      	str	r3, [sp, #0]
   11890:	9702      	str	r7, [sp, #8]
   11892:	460a      	mov	r2, r1
   11894:	4623      	mov	r3, r4
   11896:	4601      	mov	r1, r0
   11898:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
   1189c:	f7fe fea8 	bl	105f0 <dlms_getHdlcData>
    default:
        // Invalid Interface type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    if (ret != 0)
   118a0:	b178      	cbz	r0, 118c2 <dlms_getData2+0x64>
            return DLMS_ERROR_CODE_REJECTED;
        }
        return DLMS_ERROR_CODE_OK;
    }
    return dlms_getPdu(settings, data, first);
}
   118a2:	b007      	add	sp, #28
   118a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = dlms_getTcpData(settings, reply, data);
   118a6:	4622      	mov	r2, r4
   118a8:	f7ff f87d 	bl	109a6 <dlms_getTcpData>
        break;
   118ac:	e7f8      	b.n	118a0 <dlms_getData2+0x42>
        ret = dlms_getMBusData(settings, reply, data);
   118ae:	4622      	mov	r2, r4
   118b0:	f7ff f8b8 	bl	10a24 <dlms_getMBusData>
        break;
   118b4:	e7f4      	b.n	118a0 <dlms_getData2+0x42>
        data->packetLength = reply->size;
   118b6:	88cb      	ldrh	r3, [r1, #6]
   118b8:	85a3      	strh	r3, [r4, #44]	; 0x2c
        data->complete = reply->size != 0;
   118ba:	3b00      	subs	r3, #0
   118bc:	bf18      	it	ne
   118be:	2301      	movne	r3, #1
   118c0:	7423      	strb	r3, [r4, #16]
    if (!data->complete)
   118c2:	7c23      	ldrb	r3, [r4, #16]
   118c4:	b1fb      	cbz	r3, 11906 <dlms_getData2+0xa8>
    if (settings->interfaceType != DLMS_INTERFACE_TYPE_PLC_HDLC)
   118c6:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   118ca:	2806      	cmp	r0, #6
   118cc:	d127      	bne.n	1191e <dlms_getData2+0xc0>
    if (((frame != 0x13 && frame != 0x3) || (data->moreData != DLMS_DATA_REQUEST_TYPES_NONE && data->moreData != DLMS_DATA_REQUEST_TYPES_GBT)) && (frame & 0x1) != 0)
   118ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
   118d2:	f003 02ef 	and.w	r2, r3, #239	; 0xef
   118d6:	2a03      	cmp	r2, #3
   118d8:	d103      	bne.n	118e2 <dlms_getData2+0x84>
   118da:	7822      	ldrb	r2, [r4, #0]
   118dc:	f012 0ffb 	tst.w	r2, #251	; 0xfb
   118e0:	d027      	beq.n	11932 <dlms_getData2+0xd4>
   118e2:	07db      	lsls	r3, r3, #31
   118e4:	d525      	bpl.n	11932 <dlms_getData2+0xd4>
        if (dlms_useHdlc(settings->interfaceType) && data->data.size != 0)
   118e6:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
   118ea:	f7fd fe9a 	bl	f622 <dlms_useHdlc>
   118ee:	b138      	cbz	r0, 11900 <dlms_getData2+0xa2>
   118f0:	8963      	ldrh	r3, [r4, #10]
   118f2:	b12b      	cbz	r3, 11900 <dlms_getData2+0xa2>
            if (reply->position != reply->size)
   118f4:	8933      	ldrh	r3, [r6, #8]
   118f6:	88f2      	ldrh	r2, [r6, #6]
   118f8:	429a      	cmp	r2, r3
                reply->position += 3;
   118fa:	bf1c      	itt	ne
   118fc:	3303      	addne	r3, #3
   118fe:	8133      	strhne	r3, [r6, #8]
        if (data->command == DLMS_COMMAND_REJECTED)
   11900:	7863      	ldrb	r3, [r4, #1]
   11902:	2b97      	cmp	r3, #151	; 0x97
   11904:	d01e      	beq.n	11944 <dlms_getData2+0xe6>
        return DLMS_ERROR_CODE_OK;
   11906:	2000      	movs	r0, #0
   11908:	e7cb      	b.n	118a2 <dlms_getData2+0x44>
        ret = dlms_getPlcData(settings, reply, data);
   1190a:	4622      	mov	r2, r4
   1190c:	f7ff f8f8 	bl	10b00 <dlms_getPlcData>
        break;
   11910:	e7c6      	b.n	118a0 <dlms_getData2+0x42>
        ret = dlms_getPlcHdlcData(settings, reply, data, &frame);
   11912:	f10d 0317 	add.w	r3, sp, #23
   11916:	4622      	mov	r2, r4
   11918:	f7ff f9d3 	bl	10cc2 <dlms_getPlcHdlcData>
        break;
   1191c:	e7c0      	b.n	118a0 <dlms_getData2+0x42>
        if ((ret = dlms_getDataFromFrame(reply, data, dlms_useHdlc(settings->interfaceType))) != 0)
   1191e:	f7fd fe80 	bl	f622 <dlms_useHdlc>
   11922:	4621      	mov	r1, r4
   11924:	4602      	mov	r2, r0
   11926:	4630      	mov	r0, r6
   11928:	f7fe fe3b 	bl	105a2 <dlms_getDataFromFrame>
   1192c:	2800      	cmp	r0, #0
   1192e:	d0ce      	beq.n	118ce <dlms_getData2+0x70>
   11930:	e7b7      	b.n	118a2 <dlms_getData2+0x44>
    return dlms_getPdu(settings, data, first);
   11932:	463a      	mov	r2, r7
   11934:	4621      	mov	r1, r4
   11936:	4628      	mov	r0, r5
   11938:	f7f1 fa16 	bl	2d68 <dlms_getPdu>
   1193c:	e7b1      	b.n	118a2 <dlms_getData2+0x44>
    switch (settings->interfaceType)
   1193e:	f44f 7081 	mov.w	r0, #258	; 0x102
   11942:	e7ae      	b.n	118a2 <dlms_getData2+0x44>
            return DLMS_ERROR_CODE_REJECTED;
   11944:	f06f 0001 	mvn.w	r0, #1
   11948:	e7ab      	b.n	118a2 <dlms_getData2+0x44>

0001194a <dlms_isPduFull>:
    }
    return 0;
}

int dlms_isPduFull(dlmsSettings* settings, gxByteBuffer* data, uint16_t* size)
{
   1194a:	b570      	push	{r4, r5, r6, lr}
   1194c:	4605      	mov	r5, r0
    unsigned char ret;
    if (bb_isAttached(data))
   1194e:	4608      	mov	r0, r1
{
   11950:	460e      	mov	r6, r1
   11952:	4614      	mov	r4, r2
    if (bb_isAttached(data))
   11954:	f7fc fce1 	bl	e31a <bb_isAttached>
   11958:	b198      	cbz	r0, 11982 <dlms_isPduFull+0x38>
    {
        uint16_t len = 0;
        if (size != NULL)
   1195a:	b124      	cbz	r4, 11966 <dlms_isPduFull+0x1c>
        {
            if (*size == 0)
   1195c:	8823      	ldrh	r3, [r4, #0]
   1195e:	b90b      	cbnz	r3, 11964 <dlms_isPduFull+0x1a>
   11960:	88f3      	ldrh	r3, [r6, #6]
            {
                *size = (uint16_t)data->size;
   11962:	8023      	strh	r3, [r4, #0]
            }
            len = *size;
   11964:	8824      	ldrh	r4, [r4, #0]
        }
#ifndef DLMS_IGNORE_HIGH_GMAC
        if (settings->cipher.security != DLMS_SECURITY_NONE)
   11966:	88f3      	ldrh	r3, [r6, #6]
   11968:	f895 20a8 	ldrb.w	r2, [r5, #168]	; 0xa8
   1196c:	441c      	add	r4, r3
   1196e:	b223      	sxth	r3, r4
   11970:	b142      	cbz	r2, 11984 <dlms_isPduFull+0x3a>
        {
            len += 20 + CIPHERING_HEADER_SIZE + (uint16_t)data->size;
   11972:	332a      	adds	r3, #42	; 0x2a
        else
#endif //DLMS_IGNORE_HIGH_GMAC
        {
            len += 20 + (uint16_t)data->size;
        }
        ret = settings->maxPduSize < len;
   11974:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
            len += 20 + (uint16_t)data->size;
   11978:	b29b      	uxth	r3, r3
        ret = settings->maxPduSize < len;
   1197a:	4298      	cmp	r0, r3
   1197c:	bf2c      	ite	cs
   1197e:	2000      	movcs	r0, #0
   11980:	2001      	movcc	r0, #1
    else
    {
        ret = 0;
    }
    return ret;
}
   11982:	bd70      	pop	{r4, r5, r6, pc}
            len += 20 + (uint16_t)data->size;
   11984:	3314      	adds	r3, #20
   11986:	e7f5      	b.n	11974 <dlms_isPduFull+0x2a>

00011988 <resetBlockIndex>:
#endif //DLMS_IGNORE_PLC

void resetBlockIndex(
    dlmsSettings* settings)
{
    settings->blockIndex = 1;
   11988:	2301      	movs	r3, #1
   1198a:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
   1198e:	4770      	bx	lr

00011990 <resetFrameSequence>:

void resetFrameSequence(
    dlmsSettings* settings)
{
    if (settings->server)
   11990:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
   11994:	b123      	cbz	r3, 119a0 <resetFrameSequence+0x10>
    {
        settings->senderFrame = SERVER_START_SENDER_FRAME_SEQUENCE;
   11996:	f64f 631e 	movw	r3, #65054	; 0xfe1e
        settings->receiverFrame = SERVER_START_RECEIVER_FRAME_SEQUENCE;
    }
    else
    {
        settings->senderFrame = CLIENT_START_SENDER_FRAME_SEQUENCE;
   1199a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
        settings->receiverFrame = CLIENT_START_RCEIVER_FRAME_SEQUENCE;
    }
}
   1199e:	4770      	bx	lr
        settings->senderFrame = CLIENT_START_SENDER_FRAME_SEQUENCE;
   119a0:	f640 63fe 	movw	r3, #3838	; 0xefe
   119a4:	e7f9      	b.n	1199a <resetFrameSequence+0xa>

000119a6 <cl_clear>:
{
   119a6:	b570      	push	{r4, r5, r6, lr}
    settings->protocolVersion = 0;
   119a8:	2500      	movs	r5, #0
{
   119aa:	4604      	mov	r4, r0
    settings->protocolVersion = 0;
   119ac:	f880 50da 	strb.w	r5, [r0, #218]	; 0xda
    if (settings->preEstablishedSystemTitle != NULL)
   119b0:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
   119b4:	b138      	cbz	r0, 119c6 <cl_clear+0x20>
        bb_clear(settings->preEstablishedSystemTitle);
   119b6:	f7fc fe84 	bl	e6c2 <bb_clear>
        gxfree(settings->preEstablishedSystemTitle);
   119ba:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   119be:	f7fb fca1 	bl	d304 <free>
        settings->preEstablishedSystemTitle = NULL;
   119c2:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
__ssp_bos_icheck3(memset, void *, int)
   119c6:	2500      	movs	r5, #0
   119c8:	61e5      	str	r5, [r4, #28]
   119ca:	6225      	str	r5, [r4, #32]
    bb_clear(&settings->password);
   119cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   119d0:	f7fc fe77 	bl	e6c2 <bb_clear>
    bb_clear(&settings->kek);
   119d4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   119d8:	f7fc fe73 	bl	e6c2 <bb_clear>
    settings->invokeID = 1;
   119dc:	2601      	movs	r6, #1
    oa_clear(&settings->objects, 0);
   119de:	4629      	mov	r1, r5
   119e0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   119e4:	f00a f89b 	bl	1bb1e <oa_clear>
    settings->connected = DLMS_CONNECTION_STATE_NONE;
   119e8:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    settings->customChallenges = 0;
   119ec:	7025      	strb	r5, [r4, #0]
    settings->invokeID = 1;
   119ee:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    bb_clear(&settings->ctoSChallenge);
   119f2:	1d20      	adds	r0, r4, #4
   119f4:	f7fc fe65 	bl	e6c2 <bb_clear>
    bb_clear(&settings->stoCChallenge);
   119f8:	f104 0010 	add.w	r0, r4, #16
   119fc:	f7fc fe61 	bl	e6c2 <bb_clear>
    cip_clear(&settings->cipher);
   11a00:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
    settings->priority = DLMS_PRIORITY_HIGH;
   11a04:	85a6      	strh	r6, [r4, #44]	; 0x2c
    cip_clear(&settings->cipher);
   11a06:	f7fd f96d 	bl	ece4 <cip_clear>
    settings->maxPduSize = 0xFFFF;
   11a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11a0e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    settings->userId = -1;
   11a12:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
    oa_clear(&settings->releasedObjects, 1);
   11a16:	4631      	mov	r1, r6
   11a18:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
   11a1c:	f00a f87f 	bl	1bb1e <oa_clear>
    resetFrameSequence(settings);
   11a20:	4620      	mov	r0, r4
   11a22:	f7ff ffb5 	bl	11990 <resetFrameSequence>
    settings->expectedInvocationCounter = NULL;
   11a26:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
}
   11a2a:	bd70      	pop	{r4, r5, r6, pc}

00011a2c <increaseReceiverSequence>:

unsigned char increaseReceiverSequence(
    unsigned char value)
{
    return ((value + 0x20) | 0x10 | (value & 0xE));
   11a2c:	b240      	sxtb	r0, r0
   11a2e:	f100 0320 	add.w	r3, r0, #32
   11a32:	f000 000e 	and.w	r0, r0, #14
   11a36:	4318      	orrs	r0, r3
   11a38:	f040 0010 	orr.w	r0, r0, #16
}
   11a3c:	b2c0      	uxtb	r0, r0
   11a3e:	4770      	bx	lr

00011a40 <increaseSendSequence>:
//            Frame value.
// Increased sender frame sequence.
unsigned char increaseSendSequence(
    unsigned char value)
{
    return (unsigned char)((value & 0xF0) | ((value + 0x2) & 0xE));
   11a40:	b243      	sxtb	r3, r0
   11a42:	1c98      	adds	r0, r3, #2
   11a44:	f000 000e 	and.w	r0, r0, #14
   11a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
   11a4c:	4318      	orrs	r0, r3
   11a4e:	4770      	bx	lr

00011a50 <checkFrame>:
unsigned char checkFrame(
    dlmsSettings* settings,
    unsigned char frame)
{
    //If notify
    if (frame == 0x13)
   11a50:	2913      	cmp	r1, #19
{
   11a52:	b538      	push	{r3, r4, r5, lr}
   11a54:	4604      	mov	r4, r0
    if (frame == 0x13)
   11a56:	d00a      	beq.n	11a6e <checkFrame+0x1e>
    {
        return 1;
    }
    // If U frame.
    if ((frame & 0x3) == 3)
   11a58:	f001 0203 	and.w	r2, r1, #3
   11a5c:	2a03      	cmp	r2, #3
   11a5e:	d108      	bne.n	11a72 <checkFrame+0x22>
    {
        if (frame == 0x73 || frame == 0x93)
   11a60:	2973      	cmp	r1, #115	; 0x73
   11a62:	d001      	beq.n	11a68 <checkFrame+0x18>
   11a64:	2993      	cmp	r1, #147	; 0x93
   11a66:	d102      	bne.n	11a6e <checkFrame+0x1e>
        {
            resetFrameSequence(settings);
   11a68:	4620      	mov	r0, r4
   11a6a:	f7ff ff91 	bl	11990 <resetFrameSequence>
        return 1;
   11a6e:	2201      	movs	r2, #1
   11a70:	e00c      	b.n	11a8c <checkFrame+0x3c>
        }
        return 1;
    }
    // If S -frame
    if ((frame & 0x3) == 1)
   11a72:	f890 5057 	ldrb.w	r5, [r0, #87]	; 0x57
   11a76:	2a01      	cmp	r2, #1
    {
        unsigned char ch = increaseReceiverSequence(settings->receiverFrame);
   11a78:	4628      	mov	r0, r5
    if ((frame & 0x3) == 1)
   11a7a:	d109      	bne.n	11a90 <checkFrame+0x40>
        unsigned char ch = increaseReceiverSequence(settings->receiverFrame);
   11a7c:	f7ff ffd6 	bl	11a2c <increaseReceiverSequence>
        if ((frame & 0xE0) != (ch & 0xE0))
   11a80:	4041      	eors	r1, r0
   11a82:	f011 0fe0 	tst.w	r1, #224	; 0xe0
   11a86:	d11a      	bne.n	11abe <checkFrame+0x6e>
        {
            return 0;
        }
        settings->receiverFrame = increaseReceiverSequence(settings->receiverFrame);
   11a88:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
    }
#if defined(_WIN32) || defined(_WIN64) || defined(__linux__)//If Windows or Linux
    printf("Invalid frame %X. Expected %X.\r\n", frame, expected);
#endif
    return 0;
}
   11a8c:	4610      	mov	r0, r2
   11a8e:	bd38      	pop	{r3, r4, r5, pc}
    if ((settings->senderFrame & 0x1) == 0)
   11a90:	f7ff ffd6 	bl	11a40 <increaseSendSequence>
   11a94:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   11a98:	07d2      	lsls	r2, r2, #31
   11a9a:	d406      	bmi.n	11aaa <checkFrame+0x5a>
        expected = increaseReceiverSequence(increaseSendSequence(settings->receiverFrame));
   11a9c:	f7ff ffc6 	bl	11a2c <increaseReceiverSequence>
        if (frame == expected)
   11aa0:	4281      	cmp	r1, r0
   11aa2:	d104      	bne.n	11aae <checkFrame+0x5e>
            settings->receiverFrame = frame;
   11aa4:	f884 1057 	strb.w	r1, [r4, #87]	; 0x57
            return 1;
   11aa8:	e7e1      	b.n	11a6e <checkFrame+0x1e>
        if (frame == expected)
   11aaa:	4288      	cmp	r0, r1
   11aac:	e7f9      	b.n	11aa2 <checkFrame+0x52>
    if ((!settings->server && settings->receiverFrame == SERVER_START_RECEIVER_FRAME_SEQUENCE) ||
   11aae:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
   11ab2:	b912      	cbnz	r2, 11aba <checkFrame+0x6a>
   11ab4:	2dfe      	cmp	r5, #254	; 0xfe
   11ab6:	d1e9      	bne.n	11a8c <checkFrame+0x3c>
   11ab8:	e7f4      	b.n	11aa4 <checkFrame+0x54>
        (settings->server && settings->receiverFrame == CLIENT_START_RCEIVER_FRAME_SEQUENCE))
   11aba:	2d0e      	cmp	r5, #14
   11abc:	d0f2      	beq.n	11aa4 <checkFrame+0x54>
            return 0;
   11abe:	2200      	movs	r2, #0
   11ac0:	e7e4      	b.n	11a8c <checkFrame+0x3c>

00011ac2 <arr_init>:

//Initialize gxArray.
void arr_init(gxArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   11ac2:	2300      	movs	r3, #0
    arr->capacity = 0;
   11ac4:	e9c0 3300 	strd	r3, r3, [r0]
    arr->size = 0;
#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   11ac8:	6083      	str	r3, [r0, #8]
#endif //DLMS_IGNORE_MALLOC
}
   11aca:	4770      	bx	lr

00011acc <arr_getCapacity>:
    return (arr->capacity & 0x8000) == 0x8000;
}

uint16_t arr_getCapacity(gxArray* arr)
{
    return arr->capacity & 0x7FFF;
   11acc:	8880      	ldrh	r0, [r0, #4]
}
   11ace:	f3c0 000e 	ubfx	r0, r0, #0, #15
   11ad2:	4770      	bx	lr

00011ad4 <arr_capacity>:
}


//Allocate new size for the array in bytes.
int arr_capacity(gxArray* arr, int capacity)
{
   11ad4:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!arr_isAttached(arr))
   11ad6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   11ada:	2b00      	cmp	r3, #0
{
   11adc:	4604      	mov	r4, r0
   11ade:	460d      	mov	r5, r1
    if (!arr_isAttached(arr))
   11ae0:	db06      	blt.n	11af0 <arr_capacity+0x1c>
    {
        if (capacity == 0)
   11ae2:	6800      	ldr	r0, [r0, #0]
   11ae4:	b959      	cbnz	r1, 11afe <arr_capacity+0x2a>
        {
            if (arr->data != NULL)
   11ae6:	b110      	cbz	r0, 11aee <arr_capacity+0x1a>
            {
                gxfree(arr->data);
   11ae8:	f7fb fc0c 	bl	d304 <free>
                arr->data = NULL;
   11aec:	6025      	str	r5, [r4, #0]
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
                }
                arr->data = tmp;
            }
        }
        arr->capacity = (uint16_t)capacity;
   11aee:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
   11af0:	88a3      	ldrh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    if (arr_getCapacity(arr) < capacity)
   11af2:	f3c3 030e 	ubfx	r3, r3, #0, #15
   11af6:	42ab      	cmp	r3, r5
   11af8:	db09      	blt.n	11b0e <arr_capacity+0x3a>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
   11afa:	2000      	movs	r0, #0
   11afc:	e009      	b.n	11b12 <arr_capacity+0x3e>
            if (arr->data == NULL)
   11afe:	0089      	lsls	r1, r1, #2
   11b00:	b940      	cbnz	r0, 11b14 <arr_capacity+0x40>
                arr->data = (void**)gxmalloc(capacity * sizeof(void*));
   11b02:	4608      	mov	r0, r1
   11b04:	f7fb fbf6 	bl	d2f4 <malloc>
   11b08:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
   11b0a:	2800      	cmp	r0, #0
   11b0c:	d1ef      	bne.n	11aee <arr_capacity+0x1a>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   11b0e:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   11b12:	bd38      	pop	{r3, r4, r5, pc}
                void* tmp = (void**)gxrealloc(arr->data, capacity * sizeof(void*));
   11b14:	f7fb fca6 	bl	d464 <realloc>
                if (tmp == NULL)
   11b18:	2800      	cmp	r0, #0
   11b1a:	d0f8      	beq.n	11b0e <arr_capacity+0x3a>
                arr->data = tmp;
   11b1c:	6020      	str	r0, [r4, #0]
   11b1e:	e7e6      	b.n	11aee <arr_capacity+0x1a>

00011b20 <arr_push>:


#ifndef DLMS_IGNORE_MALLOC
int arr_push(gxArray* arr, void* item)
{
   11b20:	b538      	push	{r3, r4, r5, lr}
    if (arr->size >= arr->capacity)
   11b22:	88c3      	ldrh	r3, [r0, #6]
{
   11b24:	460d      	mov	r5, r1
    if (arr->size >= arr->capacity)
   11b26:	8881      	ldrh	r1, [r0, #4]
   11b28:	428b      	cmp	r3, r1
{
   11b2a:	4604      	mov	r4, r0
    if (arr->size >= arr->capacity)
   11b2c:	d207      	bcs.n	11b3e <arr_push+0x1e>
        if (ret != 0)
        {
            return ret;
        }
    }
    arr->data[arr->size] = item;
   11b2e:	88e3      	ldrh	r3, [r4, #6]
   11b30:	6822      	ldr	r2, [r4, #0]
   11b32:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   11b36:	3301      	adds	r3, #1
   11b38:	80e3      	strh	r3, [r4, #6]
    return 0;
   11b3a:	2000      	movs	r0, #0
}
   11b3c:	bd38      	pop	{r3, r4, r5, pc}
        int ret = arr_capacity(arr, arr->capacity + GXARRAY_CAPACITY);
   11b3e:	310a      	adds	r1, #10
   11b40:	f7ff ffc8 	bl	11ad4 <arr_capacity>
        if (ret != 0)
   11b44:	2800      	cmp	r0, #0
   11b46:	d0f2      	beq.n	11b2e <arr_push+0xe>
   11b48:	e7f8      	b.n	11b3c <arr_push+0x1c>

00011b4a <arr_clear>:
#endif //DLMS_IGNORE_MALLOC

void arr_clear(
    gxArray* arr)
{
   11b4a:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    if (arr->size != 0)
   11b4c:	88c3      	ldrh	r3, [r0, #6]
{
   11b4e:	4604      	mov	r4, r0
    if (arr->size != 0)
   11b50:	b9a3      	cbnz	r3, 11b7c <arr_clear+0x32>
        for (pos = 0; pos != arr->size; ++pos)
        {
            gxfree(arr->data[pos]);
        }
    }
    if (arr->capacity != 0)
   11b52:	88a3      	ldrh	r3, [r4, #4]
   11b54:	b123      	cbz	r3, 11b60 <arr_clear+0x16>
    {
        gxfree(arr->data);
   11b56:	6820      	ldr	r0, [r4, #0]
   11b58:	f7fb fbd4 	bl	d304 <free>
        arr->data = NULL;
   11b5c:	2300      	movs	r3, #0
   11b5e:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
   11b60:	2300      	movs	r3, #0
#else
    arr->size = 0;
#endif //DLMS_IGNORE_MALLOC

#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   11b62:	e9c4 3301 	strd	r3, r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
}
   11b66:	bd38      	pop	{r3, r4, r5, pc}
            gxfree(arr->data[pos]);
   11b68:	6823      	ldr	r3, [r4, #0]
   11b6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   11b6e:	f7fb fbc9 	bl	d304 <free>
        for (pos = 0; pos != arr->size; ++pos)
   11b72:	3501      	adds	r5, #1
   11b74:	88e3      	ldrh	r3, [r4, #6]
   11b76:	42ab      	cmp	r3, r5
   11b78:	d1f6      	bne.n	11b68 <arr_clear+0x1e>
   11b7a:	e7ea      	b.n	11b52 <arr_clear+0x8>
   11b7c:	2500      	movs	r5, #0
   11b7e:	e7f9      	b.n	11b74 <arr_clear+0x2a>

00011b80 <arr_empty>:

void arr_empty(
    gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    if (arr->size != 0)
   11b80:	88c3      	ldrh	r3, [r0, #6]
{
   11b82:	b510      	push	{r4, lr}
   11b84:	4604      	mov	r4, r0
    if (arr->size != 0)
   11b86:	b123      	cbz	r3, 11b92 <arr_empty+0x12>
    {
        gxfree(arr->data);
   11b88:	6800      	ldr	r0, [r0, #0]
   11b8a:	f7fb fbbb 	bl	d304 <free>
        arr->data = NULL;
   11b8e:	2300      	movs	r3, #0
   11b90:	6023      	str	r3, [r4, #0]
    }
    arr->capacity = 0;
   11b92:	2300      	movs	r3, #0
    }
#else
    arr->size = 0;
#endif //DLMS_IGNORE_MALLOC
#ifndef DLMS_IGNORE_MALLOC
    arr->position = 0;
   11b94:	e9c4 3301 	strd	r3, r3, [r4, #4]
#endif //DLMS_IGNORE_MALLOC
}
   11b98:	bd10      	pop	{r4, pc}

00011b9a <arr_getByIndex>:


#ifndef DLMS_IGNORE_MALLOC
int arr_getByIndex(gxArray* arr, uint16_t index, void** value)
{
    if (arr == NULL || value == NULL)
   11b9a:	b148      	cbz	r0, 11bb0 <arr_getByIndex+0x16>
   11b9c:	b142      	cbz	r2, 11bb0 <arr_getByIndex+0x16>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    if (index >= arr->size)
   11b9e:	88c3      	ldrh	r3, [r0, #6]
   11ba0:	428b      	cmp	r3, r1
   11ba2:	d908      	bls.n	11bb6 <arr_getByIndex+0x1c>
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *value = arr->data[index];
   11ba4:	6803      	ldr	r3, [r0, #0]
   11ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11baa:	6013      	str	r3, [r2, #0]
    return 0;
   11bac:	2000      	movs	r0, #0
   11bae:	4770      	bx	lr
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   11bb0:	f44f 7081 	mov.w	r0, #258	; 0x102
   11bb4:	4770      	bx	lr
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   11bb6:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   11bba:	4770      	bx	lr

00011bbc <arr_clearKeyValuePair>:
void arr_clearKeyValuePair(gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    gxKey* k;
    int pos;
    if (arr->capacity != 0)
   11bbc:	8883      	ldrh	r3, [r0, #4]
{
   11bbe:	b570      	push	{r4, r5, r6, lr}
   11bc0:	4604      	mov	r4, r0
    if (arr->capacity != 0)
   11bc2:	b9bb      	cbnz	r3, 11bf4 <arr_clearKeyValuePair+0x38>
        arr->position = 0;
    }
#else
    arr_clear(arr);
#endif //DLMS_IGNORE_MALLOC
}
   11bc4:	bd70      	pop	{r4, r5, r6, pc}
            k = (gxKey*)arr->data[pos];
   11bc6:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
            gxfree(k->key);
   11bca:	6830      	ldr	r0, [r6, #0]
   11bcc:	f7fb fb9a 	bl	d304 <free>
            gxfree(k->value);
   11bd0:	6870      	ldr	r0, [r6, #4]
   11bd2:	f7fb fb97 	bl	d304 <free>
            gxfree(k);
   11bd6:	4630      	mov	r0, r6
   11bd8:	f7fb fb94 	bl	d304 <free>
        for (pos = 0; pos != arr->size; ++pos)
   11bdc:	3501      	adds	r5, #1
   11bde:	88e3      	ldrh	r3, [r4, #6]
   11be0:	6820      	ldr	r0, [r4, #0]
   11be2:	42ab      	cmp	r3, r5
   11be4:	d1ef      	bne.n	11bc6 <arr_clearKeyValuePair+0xa>
        gxfree(arr->data);
   11be6:	f7fb fb8d 	bl	d304 <free>
        arr->data = NULL;
   11bea:	2300      	movs	r3, #0
        arr->capacity = 0;
   11bec:	e9c4 3300 	strd	r3, r3, [r4]
        arr->position = 0;
   11bf0:	60a3      	str	r3, [r4, #8]
}
   11bf2:	e7e7      	b.n	11bc4 <arr_clearKeyValuePair+0x8>
        for (pos = 0; pos != arr->size; ++pos)
   11bf4:	2500      	movs	r5, #0
   11bf6:	e7f2      	b.n	11bde <arr_clearKeyValuePair+0x22>

00011bf8 <arr_clearStrings>:
void arr_clearStrings(gxArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    gxByteBuffer* it;
    int pos;
    if (arr->capacity != 0)
   11bf8:	8883      	ldrh	r3, [r0, #4]
{
   11bfa:	b570      	push	{r4, r5, r6, lr}
   11bfc:	4604      	mov	r4, r0
    if (arr->capacity != 0)
   11bfe:	b9a3      	cbnz	r3, 11c2a <arr_clearStrings+0x32>
        arr->position = 0;
    }
#else
    arr_clear(arr);
#endif //DLMS_IGNORE_MALLOC
}
   11c00:	bd70      	pop	{r4, r5, r6, pc}
            it = (gxByteBuffer*)arr->data[pos];
   11c02:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
            gxfree(it->data);
   11c06:	6830      	ldr	r0, [r6, #0]
   11c08:	f7fb fb7c 	bl	d304 <free>
            gxfree(it);
   11c0c:	4630      	mov	r0, r6
   11c0e:	f7fb fb79 	bl	d304 <free>
        for (pos = 0; pos != arr->size; ++pos)
   11c12:	3501      	adds	r5, #1
   11c14:	88e3      	ldrh	r3, [r4, #6]
   11c16:	6820      	ldr	r0, [r4, #0]
   11c18:	42ab      	cmp	r3, r5
   11c1a:	d1f2      	bne.n	11c02 <arr_clearStrings+0xa>
        gxfree(arr->data);
   11c1c:	f7fb fb72 	bl	d304 <free>
        arr->data = NULL;
   11c20:	2300      	movs	r3, #0
        arr->capacity = 0;
   11c22:	e9c4 3300 	strd	r3, r3, [r4]
        arr->position = 0;
   11c26:	60a3      	str	r3, [r4, #8]
}
   11c28:	e7ea      	b.n	11c00 <arr_clearStrings+0x8>
        for (pos = 0; pos != arr->size; ++pos)
   11c2a:	2500      	movs	r5, #0
   11c2c:	e7f2      	b.n	11c14 <arr_clearStrings+0x1c>

00011c2e <cosem_getByteBuffer>:
{
   11c2e:	b510      	push	{r4, lr}
    if (e->value.vt != DLMS_DATA_TYPE_OCTET_STRING)
   11c30:	7803      	ldrb	r3, [r0, #0]
   11c32:	2b09      	cmp	r3, #9
{
   11c34:	4604      	mov	r4, r0
    if (e->value.vt != DLMS_DATA_TYPE_OCTET_STRING)
   11c36:	d00a      	beq.n	11c4e <cosem_getByteBuffer+0x20>
        e->value.vt = DLMS_DATA_TYPE_OCTET_STRING;
   11c38:	2309      	movs	r3, #9
   11c3a:	7003      	strb	r3, [r0, #0]
        if (e->value.byteArr == NULL)
   11c3c:	6883      	ldr	r3, [r0, #8]
   11c3e:	b933      	cbnz	r3, 11c4e <cosem_getByteBuffer+0x20>
            e->value.byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   11c40:	200c      	movs	r0, #12
   11c42:	f7fb fb57 	bl	d2f4 <malloc>
   11c46:	60a0      	str	r0, [r4, #8]
            if (e->value.byteArr == NULL)
   11c48:	b130      	cbz	r0, 11c58 <cosem_getByteBuffer+0x2a>
            BYTE_BUFFER_INIT(e->value.byteArr);
   11c4a:	f7fc fb77 	bl	e33c <bb_init>
    e->byteArray = 1;
   11c4e:	2301      	movs	r3, #1
   11c50:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return 0;
   11c54:	2000      	movs	r0, #0
}
   11c56:	bd10      	pop	{r4, pc}
                return DLMS_ERROR_CODE_OUTOFMEMORY;
   11c58:	f44f 7082 	mov.w	r0, #260	; 0x104
   11c5c:	e7fb      	b.n	11c56 <cosem_getByteBuffer+0x28>

00011c5e <cosem_getData>:
    if (e->index == 2)
   11c5e:	7e02      	ldrb	r2, [r0, #24]
   11c60:	2a02      	cmp	r2, #2
   11c62:	d109      	bne.n	11c78 <cosem_getData+0x1a>
        if (e->action)
   11c64:	6941      	ldr	r1, [r0, #20]
   11c66:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
   11c6a:	3110      	adds	r1, #16
   11c6c:	b10a      	cbz	r2, 11c72 <cosem_getData+0x14>
            ret = var_copy(&e->value, &((gxData*)e->target)->value);
   11c6e:	f7f2 bc9d 	b.w	45ac <var_copy>
            ret = cosem_setVariant(e->value.byteArr, &((gxData*)e->target)->value);
   11c72:	6880      	ldr	r0, [r0, #8]
   11c74:	f7fd baec 	b.w	f250 <cosem_setVariant>
}
   11c78:	f44f 7081 	mov.w	r0, #258	; 0x102
   11c7c:	4770      	bx	lr

00011c7e <cosem_getRegister>:
{
   11c7e:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   11c80:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   11c82:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11c84:	2b02      	cmp	r3, #2
{
   11c86:	4604      	mov	r4, r0
    if (e->index == 2)
   11c88:	d10d      	bne.n	11ca6 <cosem_getRegister+0x28>
        if (e->action)
   11c8a:	6941      	ldr	r1, [r0, #20]
   11c8c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   11c90:	3110      	adds	r1, #16
   11c92:	b11b      	cbz	r3, 11c9c <cosem_getRegister+0x1e>
}
   11c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &((gxRegister*)e->target)->value);
   11c98:	f7f2 bc88 	b.w	45ac <var_copy>
            ret = cosem_setVariant(e->value.byteArr, &((gxRegister*)e->target)->value);
   11c9c:	4628      	mov	r0, r5
}
   11c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(e->value.byteArr, &((gxRegister*)e->target)->value);
   11ca2:	f7fd bad5 	b.w	f250 <cosem_setVariant>
    else if (e->index == 3)
   11ca6:	2b03      	cmp	r3, #3
   11ca8:	d113      	bne.n	11cd2 <cosem_getRegister+0x54>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11caa:	2102      	movs	r1, #2
   11cac:	4628      	mov	r0, r5
   11cae:	f7fd fad6 	bl	f25e <cosem_setStructure>
   11cb2:	b980      	cbnz	r0, 11cd6 <cosem_getRegister+0x58>
            (ret = cosem_setInt8(data, ((gxRegister*)e->target)->scaler)) != 0 ||
   11cb4:	6963      	ldr	r3, [r4, #20]
   11cb6:	4628      	mov	r0, r5
   11cb8:	f893 1020 	ldrb.w	r1, [r3, #32]
   11cbc:	f7fd fa9e 	bl	f1fc <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11cc0:	b948      	cbnz	r0, 11cd6 <cosem_getRegister+0x58>
            (ret = cosem_setEnum(data, ((gxRegister*)e->target)->unit)) != 0)
   11cc2:	6963      	ldr	r3, [r4, #20]
   11cc4:	4628      	mov	r0, r5
   11cc6:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
}
   11cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, ((gxRegister*)e->target)->unit)) != 0)
   11cce:	f7fd bae2 	b.w	f296 <cosem_setEnum>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11cd2:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   11cd6:	bd38      	pop	{r3, r4, r5, pc}

00011cd8 <cosem_getRegisterTable>:
{
   11cd8:	b538      	push	{r3, r4, r5, lr}
    else if (e->index == 4)
   11cda:	7e03      	ldrb	r3, [r0, #24]
   11cdc:	2b04      	cmp	r3, #4
{
   11cde:	4604      	mov	r4, r0
    else if (e->index == 4)
   11ce0:	d114      	bne.n	11d0c <cosem_getRegisterTable+0x34>
        gxByteBuffer* data = e->value.byteArr;
   11ce2:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11ce4:	2102      	movs	r1, #2
   11ce6:	4628      	mov	r0, r5
   11ce8:	f7fd fab9 	bl	f25e <cosem_setStructure>
   11cec:	b980      	cbnz	r0, 11d10 <cosem_getRegisterTable+0x38>
            (ret = cosem_setInt8(data, ((gxRegisterTable*)e->target)->scaler)) != 0 ||
   11cee:	6963      	ldr	r3, [r4, #20]
   11cf0:	4628      	mov	r0, r5
   11cf2:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   11cf6:	f7fd fa81 	bl	f1fc <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11cfa:	b948      	cbnz	r0, 11d10 <cosem_getRegisterTable+0x38>
            (ret = cosem_setEnum(data, ((gxRegisterTable*)e->target)->unit)) != 0)
   11cfc:	6963      	ldr	r3, [r4, #20]
   11cfe:	4628      	mov	r0, r5
   11d00:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
}
   11d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, ((gxRegisterTable*)e->target)->unit)) != 0)
   11d08:	f7fd bac5 	b.w	f296 <cosem_setEnum>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11d0c:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   11d10:	bd38      	pop	{r3, r4, r5, pc}

00011d12 <cosem_getClock>:
    if (e->index == 2)
   11d12:	7e03      	ldrb	r3, [r0, #24]
   11d14:	2b02      	cmp	r3, #2
   11d16:	d104      	bne.n	11d22 <cosem_getClock+0x10>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->time);
   11d18:	6941      	ldr	r1, [r0, #20]
   11d1a:	3134      	adds	r1, #52	; 0x34
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->begin);
   11d1c:	6880      	ldr	r0, [r0, #8]
   11d1e:	f7fd b950 	b.w	efc2 <cosem_setDateTimeAsOctetString>
    else if (e->index == 3)
   11d22:	2b03      	cmp	r3, #3
   11d24:	d105      	bne.n	11d32 <cosem_getClock+0x20>
        ret = cosem_setInt16(e->value.byteArr, ((gxClock*)e->target)->timeZone);
   11d26:	6943      	ldr	r3, [r0, #20]
   11d28:	6880      	ldr	r0, [r0, #8]
   11d2a:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
   11d2e:	f7fd ba73 	b.w	f218 <cosem_setInt16>
    else if (e->index == 4)
   11d32:	2b04      	cmp	r3, #4
   11d34:	d105      	bne.n	11d42 <cosem_getClock+0x30>
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->status);
   11d36:	6943      	ldr	r3, [r0, #20]
   11d38:	f893 1020 	ldrb.w	r1, [r3, #32]
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->clockBase);
   11d3c:	6880      	ldr	r0, [r0, #8]
   11d3e:	f7fd baaa 	b.w	f296 <cosem_setEnum>
    else if (e->index == 5)
   11d42:	2b05      	cmp	r3, #5
   11d44:	d102      	bne.n	11d4c <cosem_getClock+0x3a>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->begin);
   11d46:	6941      	ldr	r1, [r0, #20]
   11d48:	3124      	adds	r1, #36	; 0x24
   11d4a:	e7e7      	b.n	11d1c <cosem_getClock+0xa>
    else if (e->index == 6)
   11d4c:	2b06      	cmp	r3, #6
   11d4e:	d102      	bne.n	11d56 <cosem_getClock+0x44>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &((gxClock*)e->target)->end);
   11d50:	6941      	ldr	r1, [r0, #20]
   11d52:	3114      	adds	r1, #20
   11d54:	e7e2      	b.n	11d1c <cosem_getClock+0xa>
    else if (e->index == 7)
   11d56:	2b07      	cmp	r3, #7
   11d58:	d104      	bne.n	11d64 <cosem_getClock+0x52>
        ret = cosem_setInt8(e->value.byteArr, ((gxClock*)e->target)->deviation);
   11d5a:	6943      	ldr	r3, [r0, #20]
   11d5c:	6880      	ldr	r0, [r0, #8]
   11d5e:	7c59      	ldrb	r1, [r3, #17]
   11d60:	f7fd ba4c 	b.w	f1fc <cosem_setInt8>
    else if (e->index == 8)
   11d64:	2b08      	cmp	r3, #8
   11d66:	d104      	bne.n	11d72 <cosem_getClock+0x60>
        ret = cosem_setBoolean(e->value.byteArr, ((gxClock*)e->target)->enabled);
   11d68:	6943      	ldr	r3, [r0, #20]
   11d6a:	6880      	ldr	r0, [r0, #8]
   11d6c:	7c99      	ldrb	r1, [r3, #18]
   11d6e:	f7fd baa0 	b.w	f2b2 <cosem_setBoolean>
    else if (e->index == 9)
   11d72:	2b09      	cmp	r3, #9
   11d74:	d102      	bne.n	11d7c <cosem_getClock+0x6a>
        ret = cosem_setEnum(e->value.byteArr, ((gxClock*)e->target)->clockBase);
   11d76:	6943      	ldr	r3, [r0, #20]
   11d78:	7c19      	ldrb	r1, [r3, #16]
   11d7a:	e7df      	b.n	11d3c <cosem_getClock+0x2a>
}
   11d7c:	f44f 7081 	mov.w	r0, #258	; 0x102
   11d80:	4770      	bx	lr

00011d82 <cosem_getActionSchedule>:
{
   11d82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   11d86:	7e01      	ldrb	r1, [r0, #24]
    gxActionSchedule* object = (gxActionSchedule*)e->target;
   11d88:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   11d8a:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   11d8c:	2902      	cmp	r1, #2
   11d8e:	d120      	bne.n	11dd2 <cosem_getActionSchedule+0x50>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11d90:	4628      	mov	r0, r5
   11d92:	f7fd fa64 	bl	f25e <cosem_setStructure>
   11d96:	4604      	mov	r4, r0
   11d98:	bb50      	cbnz	r0, 11df0 <cosem_getActionSchedule+0x6e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11d9a:	2109      	movs	r1, #9
   11d9c:	4628      	mov	r0, r5
   11d9e:	f7fc fb36 	bl	e40e <bb_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11da2:	4604      	mov	r4, r0
   11da4:	bb20      	cbnz	r0, 11df0 <cosem_getActionSchedule+0x6e>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   11da6:	4629      	mov	r1, r5
   11da8:	2006      	movs	r0, #6
   11daa:	f009 fc2c 	bl	1b606 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   11dae:	4604      	mov	r4, r0
   11db0:	b9f0      	cbnz	r0, 11df0 <cosem_getActionSchedule+0x6e>
            (ret = bb_set(data, obj_getLogicalName((gxObject*)object->executedScript), 6)) != 0 ||
   11db2:	6930      	ldr	r0, [r6, #16]
   11db4:	f7f2 f970 	bl	4098 <obj_getLogicalName>
   11db8:	2206      	movs	r2, #6
   11dba:	4601      	mov	r1, r0
   11dbc:	4628      	mov	r0, r5
   11dbe:	f7fc fc0c 	bl	e5da <bb_set>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   11dc2:	4604      	mov	r4, r0
   11dc4:	b9a0      	cbnz	r0, 11df0 <cosem_getActionSchedule+0x6e>
            (ret = cosem_setUInt16(data, object->executedScriptSelector)) != 0)
   11dc6:	8ab1      	ldrh	r1, [r6, #20]
   11dc8:	4628      	mov	r0, r5
   11dca:	f7fd f9fb 	bl	f1c4 <cosem_setUInt16>
                    (ret = cosem_setDateAsOctetString(data, tm)) != 0)
   11dce:	4604      	mov	r4, r0
    return ret;
   11dd0:	e00e      	b.n	11df0 <cosem_getActionSchedule+0x6e>
    else if (e->index == 3)
   11dd2:	2903      	cmp	r1, #3
   11dd4:	d104      	bne.n	11de0 <cosem_getActionSchedule+0x5e>
        ret = cosem_setEnum(e->value.byteArr, object->type);
   11dd6:	7db1      	ldrb	r1, [r6, #22]
   11dd8:	4628      	mov	r0, r5
   11dda:	f7fd fa5c 	bl	f296 <cosem_setEnum>
   11dde:	e7f6      	b.n	11dce <cosem_getActionSchedule+0x4c>
    else if (e->index == 4)
   11de0:	2904      	cmp	r1, #4
   11de2:	d12d      	bne.n	11e40 <cosem_getActionSchedule+0xbe>
        if ((ret = cosem_setArray(data, object->executionTime.size)) == 0)
   11de4:	8bf1      	ldrh	r1, [r6, #30]
   11de6:	4628      	mov	r0, r5
   11de8:	f7fd fa47 	bl	f27a <cosem_setArray>
   11dec:	4604      	mov	r4, r0
   11dee:	b318      	cbz	r0, 11e38 <cosem_getActionSchedule+0xb6>
}
   11df0:	4620      	mov	r0, r4
   11df2:	b003      	add	sp, #12
   11df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = cosem_setStructure(data, 2)) != 0)
   11df8:	2102      	movs	r1, #2
   11dfa:	4628      	mov	r0, r5
   11dfc:	f7fd fa2f 	bl	f25e <cosem_setStructure>
   11e00:	2800      	cmp	r0, #0
   11e02:	d1e4      	bne.n	11dce <cosem_getActionSchedule+0x4c>
                if ((ret = arr_getByIndex(&object->executionTime, pos, (void**)&tm)) != 0)
   11e04:	aa01      	add	r2, sp, #4
   11e06:	4649      	mov	r1, r9
   11e08:	4640      	mov	r0, r8
   11e0a:	f7ff fec6 	bl	11b9a <arr_getByIndex>
   11e0e:	2800      	cmp	r0, #0
   11e10:	d1dd      	bne.n	11dce <cosem_getActionSchedule+0x4c>
                if ((ret = cosem_setTimeAsOctetString(data, tm)) != 0 ||
   11e12:	9901      	ldr	r1, [sp, #4]
   11e14:	4628      	mov	r0, r5
   11e16:	f7fd f946 	bl	f0a6 <cosem_setTimeAsOctetString>
   11e1a:	2800      	cmp	r0, #0
   11e1c:	d1d7      	bne.n	11dce <cosem_getActionSchedule+0x4c>
                    (ret = cosem_setDateAsOctetString(data, tm)) != 0)
   11e1e:	9901      	ldr	r1, [sp, #4]
   11e20:	4628      	mov	r0, r5
   11e22:	f7fd f8e1 	bl	efe8 <cosem_setDateAsOctetString>
   11e26:	3701      	adds	r7, #1
                if ((ret = cosem_setTimeAsOctetString(data, tm)) != 0 ||
   11e28:	2800      	cmp	r0, #0
   11e2a:	d1d0      	bne.n	11dce <cosem_getActionSchedule+0x4c>
            for (pos = 0; pos != object->executionTime.size; ++pos)
   11e2c:	8bf3      	ldrh	r3, [r6, #30]
   11e2e:	fa1f f987 	uxth.w	r9, r7
   11e32:	454b      	cmp	r3, r9
   11e34:	d1e0      	bne.n	11df8 <cosem_getActionSchedule+0x76>
   11e36:	e7db      	b.n	11df0 <cosem_getActionSchedule+0x6e>
   11e38:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->executionTime, pos, (void**)&tm)) != 0)
   11e3a:	f106 0818 	add.w	r8, r6, #24
   11e3e:	e7f5      	b.n	11e2c <cosem_getActionSchedule+0xaa>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   11e40:	f44f 7481 	mov.w	r4, #258	; 0x102
   11e44:	e7d4      	b.n	11df0 <cosem_getActionSchedule+0x6e>

00011e46 <getActivityCalendarWeekProfileTable>:
{
   11e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11e48:	460c      	mov	r4, r1
   11e4a:	4605      	mov	r5, r0
    if ((ret = cosem_setArray(ba, list->size)) != 0)
   11e4c:	88c1      	ldrh	r1, [r0, #6]
   11e4e:	4620      	mov	r0, r4
   11e50:	f7fd fa13 	bl	f27a <cosem_setArray>
   11e54:	2800      	cmp	r0, #0
   11e56:	d144      	bne.n	11ee2 <getActivityCalendarWeekProfileTable+0x9c>
   11e58:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
   11e5a:	88eb      	ldrh	r3, [r5, #6]
   11e5c:	b2b7      	uxth	r7, r6
   11e5e:	42bb      	cmp	r3, r7
   11e60:	d101      	bne.n	11e66 <getActivityCalendarWeekProfileTable+0x20>
   11e62:	2000      	movs	r0, #0
   11e64:	e03d      	b.n	11ee2 <getActivityCalendarWeekProfileTable+0x9c>
        if ((ret = cosem_setStructure(ba, 8)) != 0 ||
   11e66:	2108      	movs	r1, #8
   11e68:	4620      	mov	r0, r4
   11e6a:	f7fd f9f8 	bl	f25e <cosem_setStructure>
   11e6e:	2800      	cmp	r0, #0
   11e70:	d137      	bne.n	11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
   11e72:	aa01      	add	r2, sp, #4
   11e74:	4639      	mov	r1, r7
   11e76:	4628      	mov	r0, r5
   11e78:	f7ff fe8f 	bl	11b9a <arr_getByIndex>
        if ((ret = cosem_setStructure(ba, 8)) != 0 ||
   11e7c:	2800      	cmp	r0, #0
   11e7e:	d130      	bne.n	11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setOctetString(ba, &wp->name)) != 0 ||
   11e80:	9901      	ldr	r1, [sp, #4]
   11e82:	4620      	mov	r0, r4
   11e84:	f7fd f922 	bl	f0cc <cosem_setOctetString>
            (ret = arr_getByIndex(list, pos, (void**)&wp)) != 0 ||
   11e88:	bb58      	cbnz	r0, 11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->monday)) != 0 ||
   11e8a:	9b01      	ldr	r3, [sp, #4]
   11e8c:	4620      	mov	r0, r4
   11e8e:	7b19      	ldrb	r1, [r3, #12]
   11e90:	f7fd f98a 	bl	f1a8 <cosem_setUInt8>
            (ret = cosem_setOctetString(ba, &wp->name)) != 0 ||
   11e94:	bb28      	cbnz	r0, 11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->tuesday)) != 0 ||
   11e96:	9b01      	ldr	r3, [sp, #4]
   11e98:	4620      	mov	r0, r4
   11e9a:	7b59      	ldrb	r1, [r3, #13]
   11e9c:	f7fd f984 	bl	f1a8 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->monday)) != 0 ||
   11ea0:	b9f8      	cbnz	r0, 11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->wednesday)) != 0 ||
   11ea2:	9b01      	ldr	r3, [sp, #4]
   11ea4:	4620      	mov	r0, r4
   11ea6:	7b99      	ldrb	r1, [r3, #14]
   11ea8:	f7fd f97e 	bl	f1a8 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->tuesday)) != 0 ||
   11eac:	b9c8      	cbnz	r0, 11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->thursday)) != 0 ||
   11eae:	9b01      	ldr	r3, [sp, #4]
   11eb0:	4620      	mov	r0, r4
   11eb2:	7bd9      	ldrb	r1, [r3, #15]
   11eb4:	f7fd f978 	bl	f1a8 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->wednesday)) != 0 ||
   11eb8:	b998      	cbnz	r0, 11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->friday)) != 0 ||
   11eba:	9b01      	ldr	r3, [sp, #4]
   11ebc:	4620      	mov	r0, r4
   11ebe:	7c19      	ldrb	r1, [r3, #16]
   11ec0:	f7fd f972 	bl	f1a8 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->thursday)) != 0 ||
   11ec4:	b968      	cbnz	r0, 11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->saturday)) != 0 ||
   11ec6:	9b01      	ldr	r3, [sp, #4]
   11ec8:	4620      	mov	r0, r4
   11eca:	7c59      	ldrb	r1, [r3, #17]
   11ecc:	f7fd f96c 	bl	f1a8 <cosem_setUInt8>
            (ret = cosem_setUInt8(ba, wp->friday)) != 0 ||
   11ed0:	b938      	cbnz	r0, 11ee2 <getActivityCalendarWeekProfileTable+0x9c>
            (ret = cosem_setUInt8(ba, wp->sunday)) != 0)
   11ed2:	9b01      	ldr	r3, [sp, #4]
   11ed4:	4620      	mov	r0, r4
   11ed6:	7c99      	ldrb	r1, [r3, #18]
   11ed8:	f7fd f966 	bl	f1a8 <cosem_setUInt8>
   11edc:	3601      	adds	r6, #1
            (ret = cosem_setUInt8(ba, wp->saturday)) != 0 ||
   11ede:	2800      	cmp	r0, #0
   11ee0:	d0bb      	beq.n	11e5a <getActivityCalendarWeekProfileTable+0x14>
}
   11ee2:	b003      	add	sp, #12
   11ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011ee6 <getActivityCalendarSeasonProfile>:
{
   11ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11ee8:	460c      	mov	r4, r1
   11eea:	4605      	mov	r5, r0
    if ((ret = cosem_setArray(ba, list->size)) != 0)
   11eec:	88c1      	ldrh	r1, [r0, #6]
   11eee:	4620      	mov	r0, r4
   11ef0:	f7fd f9c3 	bl	f27a <cosem_setArray>
   11ef4:	bb20      	cbnz	r0, 11f40 <getActivityCalendarSeasonProfile+0x5a>
   11ef6:	4606      	mov	r6, r0
    for (pos = 0; pos != list->size; ++pos)
   11ef8:	88eb      	ldrh	r3, [r5, #6]
   11efa:	b2b7      	uxth	r7, r6
   11efc:	42bb      	cmp	r3, r7
   11efe:	d101      	bne.n	11f04 <getActivityCalendarSeasonProfile+0x1e>
   11f00:	2000      	movs	r0, #0
   11f02:	e01d      	b.n	11f40 <getActivityCalendarSeasonProfile+0x5a>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   11f04:	2103      	movs	r1, #3
   11f06:	4620      	mov	r0, r4
   11f08:	f7fd f9a9 	bl	f25e <cosem_setStructure>
   11f0c:	b9c0      	cbnz	r0, 11f40 <getActivityCalendarSeasonProfile+0x5a>
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
   11f0e:	aa01      	add	r2, sp, #4
   11f10:	4639      	mov	r1, r7
   11f12:	4628      	mov	r0, r5
   11f14:	f7ff fe41 	bl	11b9a <arr_getByIndex>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   11f18:	b990      	cbnz	r0, 11f40 <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setOctetString(ba, &sp->name)) != 0 ||
   11f1a:	9901      	ldr	r1, [sp, #4]
   11f1c:	4620      	mov	r0, r4
   11f1e:	f7fd f8d5 	bl	f0cc <cosem_setOctetString>
            (ret = arr_getByIndex(list, pos, (void**)&sp)) != 0 ||
   11f22:	b968      	cbnz	r0, 11f40 <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setDateTimeAsOctetString(ba, &sp->start)) != 0 ||
   11f24:	9901      	ldr	r1, [sp, #4]
   11f26:	4620      	mov	r0, r4
   11f28:	310c      	adds	r1, #12
   11f2a:	f7fd f84a 	bl	efc2 <cosem_setDateTimeAsOctetString>
            (ret = cosem_setOctetString(ba, &sp->name)) != 0 ||
   11f2e:	b938      	cbnz	r0, 11f40 <getActivityCalendarSeasonProfile+0x5a>
            (ret = cosem_setOctetString(ba, &sp->weekName)) != 0)
   11f30:	9901      	ldr	r1, [sp, #4]
   11f32:	4620      	mov	r0, r4
   11f34:	3118      	adds	r1, #24
   11f36:	f7fd f8c9 	bl	f0cc <cosem_setOctetString>
   11f3a:	3601      	adds	r6, #1
            (ret = cosem_setDateTimeAsOctetString(ba, &sp->start)) != 0 ||
   11f3c:	2800      	cmp	r0, #0
   11f3e:	d0db      	beq.n	11ef8 <getActivityCalendarSeasonProfile+0x12>
}
   11f40:	b003      	add	sp, #12
   11f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011f44 <cosem_getActivityCalendar>:
{
   11f44:	4602      	mov	r2, r0
    gxByteBuffer* data = e->value.byteArr;
   11f46:	6880      	ldr	r0, [r0, #8]
    gxActivityCalendar* object = (gxActivityCalendar*)e->target;
   11f48:	6953      	ldr	r3, [r2, #20]
    if (e->index == 2)
   11f4a:	7e12      	ldrb	r2, [r2, #24]
   11f4c:	2a02      	cmp	r2, #2
   11f4e:	d103      	bne.n	11f58 <cosem_getActivityCalendar+0x14>
    return cosem_setOctetString(ba, name);
   11f50:	f103 0110 	add.w	r1, r3, #16
   11f54:	f7fd b8ba 	b.w	f0cc <cosem_setOctetString>
    else if (e->index == 3)
   11f58:	2a03      	cmp	r2, #3
   11f5a:	d104      	bne.n	11f66 <cosem_getActivityCalendar+0x22>
        ret = getActivityCalendarSeasonProfile(&object->seasonProfileActive, data);
   11f5c:	4601      	mov	r1, r0
   11f5e:	f103 0028 	add.w	r0, r3, #40	; 0x28
        ret = getActivityCalendarSeasonProfile(&object->seasonProfilePassive, data);
   11f62:	f7ff bfc0 	b.w	11ee6 <getActivityCalendarSeasonProfile>
    else if (e->index == 4)
   11f66:	2a04      	cmp	r2, #4
   11f68:	d104      	bne.n	11f74 <cosem_getActivityCalendar+0x30>
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTableActive, data);
   11f6a:	4601      	mov	r1, r0
   11f6c:	f103 0034 	add.w	r0, r3, #52	; 0x34
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTablePassive, data);
   11f70:	f7ff bf69 	b.w	11e46 <getActivityCalendarWeekProfileTable>
    else if (e->index == 5)
   11f74:	2a05      	cmp	r2, #5
   11f76:	d104      	bne.n	11f82 <cosem_getActivityCalendar+0x3e>
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTableActive, data);
   11f78:	4601      	mov	r1, r0
   11f7a:	f103 0040 	add.w	r0, r3, #64	; 0x40
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTablePassive, data);
   11f7e:	f7f1 b93b 	b.w	31f8 <getActivityCalendarDayProfileTable>
    else if (e->index == 6)
   11f82:	2a06      	cmp	r2, #6
   11f84:	d102      	bne.n	11f8c <cosem_getActivityCalendar+0x48>
    return cosem_setOctetString(ba, name);
   11f86:	f103 011c 	add.w	r1, r3, #28
   11f8a:	e7e3      	b.n	11f54 <cosem_getActivityCalendar+0x10>
    else if (e->index == 7)
   11f8c:	2a07      	cmp	r2, #7
   11f8e:	d103      	bne.n	11f98 <cosem_getActivityCalendar+0x54>
        ret = getActivityCalendarSeasonProfile(&object->seasonProfilePassive, data);
   11f90:	4601      	mov	r1, r0
   11f92:	f103 004c 	add.w	r0, r3, #76	; 0x4c
   11f96:	e7e4      	b.n	11f62 <cosem_getActivityCalendar+0x1e>
    else if (e->index == 8)
   11f98:	2a08      	cmp	r2, #8
   11f9a:	d103      	bne.n	11fa4 <cosem_getActivityCalendar+0x60>
        ret = getActivityCalendarWeekProfileTable(&object->weekProfileTablePassive, data);
   11f9c:	4601      	mov	r1, r0
   11f9e:	f103 0064 	add.w	r0, r3, #100	; 0x64
   11fa2:	e7e5      	b.n	11f70 <cosem_getActivityCalendar+0x2c>
    else if (e->index == 9)
   11fa4:	2a09      	cmp	r2, #9
   11fa6:	d103      	bne.n	11fb0 <cosem_getActivityCalendar+0x6c>
        ret = getActivityCalendarDayProfileTable(&object->dayProfileTablePassive, data);
   11fa8:	4601      	mov	r1, r0
   11faa:	f103 0058 	add.w	r0, r3, #88	; 0x58
   11fae:	e7e6      	b.n	11f7e <cosem_getActivityCalendar+0x3a>
    else if (e->index == 10)
   11fb0:	2a0a      	cmp	r2, #10
   11fb2:	d103      	bne.n	11fbc <cosem_getActivityCalendar+0x78>
        ret = cosem_setDateTimeAsOctetString(data, &object->time);
   11fb4:	f103 0170 	add.w	r1, r3, #112	; 0x70
   11fb8:	f7fd b803 	b.w	efc2 <cosem_setDateTimeAsOctetString>
}
   11fbc:	f44f 7081 	mov.w	r0, #258	; 0x102
   11fc0:	4770      	bx	lr

00011fc2 <getLNAccessRights>:
{
   11fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11fc6:	4681      	mov	r9, r0
    cnt = obj_attributeCount(object);
   11fc8:	4608      	mov	r0, r1
{
   11fca:	4615      	mov	r5, r2
   11fcc:	4688      	mov	r8, r1
    cnt = obj_attributeCount(object);
   11fce:	f003 fd86 	bl	15ade <obj_attributeCount>
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11fd2:	2102      	movs	r1, #2
    cnt = obj_attributeCount(object);
   11fd4:	4607      	mov	r7, r0
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11fd6:	4628      	mov	r0, r5
   11fd8:	f7fd f941 	bl	f25e <cosem_setStructure>
   11fdc:	4604      	mov	r4, r0
   11fde:	b9b8      	cbnz	r0, 12010 <getLNAccessRights+0x4e>
        (ret = cosem_setArray(data, cnt)) != 0)
   11fe0:	b2b9      	uxth	r1, r7
   11fe2:	4628      	mov	r0, r5
   11fe4:	f7fd f949 	bl	f27a <cosem_setArray>
    if ((ret = cosem_setStructure(data, 2)) != 0 ||
   11fe8:	4604      	mov	r4, r0
   11fea:	b988      	cbnz	r0, 12010 <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   11fec:	2601      	movs	r6, #1
   11fee:	4437      	add	r7, r6
   11ff0:	42be      	cmp	r6, r7
   11ff2:	d110      	bne.n	12016 <getLNAccessRights+0x54>
    cnt = obj_methodCount(object);
   11ff4:	4640      	mov	r0, r8
   11ff6:	f003 fde6 	bl	15bc6 <obj_methodCount>
    if ((ret = cosem_setArray(data, cnt)) != 0)
   11ffa:	b281      	uxth	r1, r0
    cnt = obj_methodCount(object);
   11ffc:	4607      	mov	r7, r0
    if ((ret = cosem_setArray(data, cnt)) != 0)
   11ffe:	4628      	mov	r0, r5
   12000:	f7fd f93b 	bl	f27a <cosem_setArray>
   12004:	4604      	mov	r4, r0
   12006:	b918      	cbnz	r0, 12010 <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   12008:	2601      	movs	r6, #1
   1200a:	4437      	add	r7, r6
   1200c:	42be      	cmp	r6, r7
   1200e:	d127      	bne.n	12060 <getLNAccessRights+0x9e>
}
   12010:	4620      	mov	r0, r4
   12012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   12016:	4632      	mov	r2, r6
   12018:	4641      	mov	r1, r8
   1201a:	4648      	mov	r0, r9
   1201c:	f7fc f87f 	bl	e11e <svr_getAttributeAccess>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   12020:	2103      	movs	r1, #3
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   12022:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   12024:	4628      	mov	r0, r5
   12026:	f7fd f91a 	bl	f25e <cosem_setStructure>
   1202a:	4604      	mov	r4, r0
   1202c:	2800      	cmp	r0, #0
   1202e:	d1ef      	bne.n	12010 <getLNAccessRights+0x4e>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   12030:	4631      	mov	r1, r6
   12032:	4628      	mov	r0, r5
   12034:	f7fd f8e2 	bl	f1fc <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   12038:	4604      	mov	r4, r0
   1203a:	2800      	cmp	r0, #0
   1203c:	d1e8      	bne.n	12010 <getLNAccessRights+0x4e>
            (ret = cosem_setEnum(data, ch)) != 0 ||
   1203e:	4651      	mov	r1, sl
   12040:	4628      	mov	r0, r5
   12042:	f7fd f928 	bl	f296 <cosem_setEnum>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   12046:	4604      	mov	r4, r0
   12048:	2800      	cmp	r0, #0
   1204a:	d1e1      	bne.n	12010 <getLNAccessRights+0x4e>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_NONE)) != 0)
   1204c:	4601      	mov	r1, r0
   1204e:	4628      	mov	r0, r5
   12050:	f7fc f9dd 	bl	e40e <bb_setUInt8>
            (ret = cosem_setEnum(data, ch)) != 0 ||
   12054:	4604      	mov	r4, r0
   12056:	2800      	cmp	r0, #0
   12058:	d1da      	bne.n	12010 <getLNAccessRights+0x4e>
    for (pos = 1; pos != cnt + 1; ++pos)
   1205a:	3601      	adds	r6, #1
   1205c:	b2f6      	uxtb	r6, r6
   1205e:	e7c7      	b.n	11ff0 <getLNAccessRights+0x2e>
        ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   12060:	4641      	mov	r1, r8
   12062:	4632      	mov	r2, r6
   12064:	4648      	mov	r0, r9
   12066:	f7fc f85c 	bl	e122 <svr_getMethodAccess>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1206a:	2102      	movs	r1, #2
        ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   1206c:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1206e:	4628      	mov	r0, r5
   12070:	f7fd f8f5 	bl	f25e <cosem_setStructure>
   12074:	b960      	cbnz	r0, 12090 <getLNAccessRights+0xce>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   12076:	4631      	mov	r1, r6
   12078:	4628      	mov	r0, r5
   1207a:	f7fd f8bf 	bl	f1fc <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1207e:	b938      	cbnz	r0, 12090 <getLNAccessRights+0xce>
            (ret = cosem_setEnum(data, ch)) != 0)
   12080:	4651      	mov	r1, sl
   12082:	4628      	mov	r0, r5
   12084:	f7fd f907 	bl	f296 <cosem_setEnum>
            (ret = cosem_setInt8(data, pos)) != 0 ||
   12088:	b910      	cbnz	r0, 12090 <getLNAccessRights+0xce>
    for (pos = 1; pos != cnt + 1; ++pos)
   1208a:	3601      	adds	r6, #1
   1208c:	b2f6      	uxtb	r6, r6
   1208e:	e7bd      	b.n	1200c <getLNAccessRights+0x4a>
            (ret = cosem_setEnum(data, ch)) != 0)
   12090:	4604      	mov	r4, r0
   12092:	e7bd      	b.n	12010 <getLNAccessRights+0x4e>

00012094 <getUserList>:
    if (e->transactionStartIndex == 0)
   12094:	6b8b      	ldr	r3, [r1, #56]	; 0x38
{
   12096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    gxAssociationLogicalName* target = (gxAssociationLogicalName*)e->target;
   1209a:	694f      	ldr	r7, [r1, #20]
{
   1209c:	460c      	mov	r4, r1
   1209e:	4616      	mov	r6, r2
    if (e->transactionStartIndex == 0)
   120a0:	b173      	cbz	r3, 120c0 <getUserList+0x2c>
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   120a2:	8f25      	ldrh	r5, [r4, #56]	; 0x38
        if ((ret = arr_getByIndex(&target->userList, pos, (void**)&it)) != 0)
   120a4:	f107 0860 	add.w	r8, r7, #96	; 0x60
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   120a8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
   120ac:	42ab      	cmp	r3, r5
   120ae:	d905      	bls.n	120bc <getUserList+0x28>
        if ((ret = arr_getByIndex(&target->userList, pos, (void**)&it)) != 0)
   120b0:	aa01      	add	r2, sp, #4
   120b2:	4629      	mov	r1, r5
   120b4:	4640      	mov	r0, r8
   120b6:	f7ff fd70 	bl	11b9a <arr_getByIndex>
   120ba:	b160      	cbz	r0, 120d6 <getUserList+0x42>
    return 0;
   120bc:	2000      	movs	r0, #0
   120be:	e007      	b.n	120d0 <getUserList+0x3c>
   120c0:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
        e->transactionEndIndex = target->userList.size;
   120c4:	63e1      	str	r1, [r4, #60]	; 0x3c
        if ((ret = cosem_setArray(data, target->userList.size)) != 0)
   120c6:	4610      	mov	r0, r2
   120c8:	f7fd f8d7 	bl	f27a <cosem_setArray>
   120cc:	2800      	cmp	r0, #0
   120ce:	d0e8      	beq.n	120a2 <getUserList+0xe>
}
   120d0:	b003      	add	sp, #12
   120d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        id = it->key;
   120d6:	9b01      	ldr	r3, [sp, #4]
        name = it->value;
   120d8:	f8d3 a004 	ldr.w	sl, [r3, #4]
        id = it->key;
   120dc:	f893 b000 	ldrb.w	fp, [r3]
        len = (unsigned char)strlen(name);
   120e0:	4650      	mov	r0, sl
   120e2:	f7ee fe6d 	bl	dc0 <strlen>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   120e6:	2102      	movs	r1, #2
        len = (unsigned char)strlen(name);
   120e8:	fa5f f980 	uxtb.w	r9, r0
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   120ec:	4630      	mov	r0, r6
   120ee:	f7fd f8b6 	bl	f25e <cosem_setStructure>
   120f2:	2800      	cmp	r0, #0
   120f4:	d1ec      	bne.n	120d0 <getUserList+0x3c>
            (ret = cosem_setUInt8(data, (unsigned char)id)) != 0 ||
   120f6:	4659      	mov	r1, fp
   120f8:	4630      	mov	r0, r6
   120fa:	f7fd f855 	bl	f1a8 <cosem_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   120fe:	2800      	cmp	r0, #0
   12100:	d1e6      	bne.n	120d0 <getUserList+0x3c>
            (ret = cosem_setOctetString2(data, (unsigned char*)name, len)) != 0)
   12102:	464a      	mov	r2, r9
   12104:	4651      	mov	r1, sl
   12106:	4630      	mov	r0, r6
   12108:	f7fd f82d 	bl	f166 <cosem_setOctetString2>
            (ret = cosem_setUInt8(data, (unsigned char)id)) != 0 ||
   1210c:	2800      	cmp	r0, #0
   1210e:	d1df      	bne.n	120d0 <getUserList+0x3c>
        ++e->transactionStartIndex;
   12110:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   12112:	3501      	adds	r5, #1
        ++e->transactionStartIndex;
   12114:	3301      	adds	r3, #1
   12116:	63a3      	str	r3, [r4, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos < target->userList.size; ++pos)
   12118:	b2ad      	uxth	r5, r5
   1211a:	e7c5      	b.n	120a8 <getUserList+0x14>

0001211c <cosem_getAssociationLogicalName>:
{
   1211c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (e->index == 2)
   1211e:	7e0b      	ldrb	r3, [r1, #24]
    gxByteBuffer* data = e->value.byteArr;
   12120:	688c      	ldr	r4, [r1, #8]
    if (e->index == 2)
   12122:	2b02      	cmp	r3, #2
{
   12124:	b085      	sub	sp, #20
    if (e->index == 2)
   12126:	d104      	bne.n	12132 <cosem_getAssociationLogicalName+0x16>
        ret = getLNObjects(settings, e, data);
   12128:	4622      	mov	r2, r4
   1212a:	f7f1 f8c1 	bl	32b0 <getLNObjects>
}
   1212e:	b005      	add	sp, #20
   12130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 3)
   12132:	2b03      	cmp	r3, #3
    gxAssociationLogicalName* object = ((gxAssociationLogicalName*)e->target);
   12134:	694d      	ldr	r5, [r1, #20]
    else if (e->index == 3)
   12136:	d110      	bne.n	1215a <cosem_getAssociationLogicalName+0x3e>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   12138:	2102      	movs	r1, #2
   1213a:	4620      	mov	r0, r4
   1213c:	f7fd f88f 	bl	f25e <cosem_setStructure>
   12140:	2800      	cmp	r0, #0
   12142:	d1f4      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setInt8(data, object->clientSAP)) != 0 ||
   12144:	7f29      	ldrb	r1, [r5, #28]
   12146:	4620      	mov	r0, r4
   12148:	f7fd f858 	bl	f1fc <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1214c:	2800      	cmp	r0, #0
   1214e:	d1ee      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->serverSAP)) != 0)
   12150:	8be9      	ldrh	r1, [r5, #30]
   12152:	4620      	mov	r0, r4
   12154:	f7fd f836 	bl	f1c4 <cosem_setUInt16>
   12158:	e7e9      	b.n	1212e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 4)
   1215a:	2b04      	cmp	r3, #4
   1215c:	d138      	bne.n	121d0 <cosem_getAssociationLogicalName+0xb4>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1215e:	2109      	movs	r1, #9
   12160:	4620      	mov	r0, r4
   12162:	f7fc f954 	bl	e40e <bb_setUInt8>
   12166:	2800      	cmp	r0, #0
   12168:	d1e1      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   1216a:	2107      	movs	r1, #7
   1216c:	4620      	mov	r0, r4
   1216e:	f7fc f94e 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12172:	2800      	cmp	r0, #0
   12174:	d1db      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   12176:	2160      	movs	r1, #96	; 0x60
   12178:	4620      	mov	r0, r4
   1217a:	f7fc f948 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   1217e:	2800      	cmp	r0, #0
   12180:	d1d5      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   12182:	2185      	movs	r1, #133	; 0x85
   12184:	4620      	mov	r0, r4
   12186:	f7fc f942 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   1218a:	2800      	cmp	r0, #0
   1218c:	d1cf      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   1218e:	2174      	movs	r1, #116	; 0x74
   12190:	4620      	mov	r0, r4
   12192:	f7fc f93c 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   12196:	2800      	cmp	r0, #0
   12198:	d1c9      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.identifiedOrganization)) != 0 ||
   1219a:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   1219e:	4620      	mov	r0, r4
   121a0:	f7fc f935 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   121a4:	2800      	cmp	r0, #0
   121a6:	d1c2      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.dlmsUA)) != 0 ||
   121a8:	f895 102b 	ldrb.w	r1, [r5, #43]	; 0x2b
   121ac:	4620      	mov	r0, r4
   121ae:	f7fc f92e 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, object->applicationContextName.identifiedOrganization)) != 0 ||
   121b2:	2800      	cmp	r0, #0
   121b4:	d1bb      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.applicationContext)) != 0 ||
   121b6:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   121ba:	4620      	mov	r0, r4
   121bc:	f7fc f927 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, object->applicationContextName.dlmsUA)) != 0 ||
   121c0:	2800      	cmp	r0, #0
   121c2:	d1b4      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->applicationContextName.contextId)) != 0)
   121c4:	f895 102d 	ldrb.w	r1, [r5, #45]	; 0x2d
                (ret = bb_setUInt8(data, 0)) != 0)
   121c8:	4620      	mov	r0, r4
   121ca:	f7fc f920 	bl	e40e <bb_setUInt8>
   121ce:	e7ae      	b.n	1212e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 5)
   121d0:	2b05      	cmp	r3, #5
   121d2:	d134      	bne.n	1223e <cosem_getAssociationLogicalName+0x122>
        bb_attach(&tmp, buff, 0, sizeof(buff));
   121d4:	2304      	movs	r3, #4
   121d6:	4669      	mov	r1, sp
   121d8:	2200      	movs	r2, #0
   121da:	eb0d 0003 	add.w	r0, sp, r3
   121de:	f7fc fa4c 	bl	e67a <bb_attach>
        if ((ret = cosem_setStructure(data, 6)) != 0 ||
   121e2:	2106      	movs	r1, #6
   121e4:	4620      	mov	r0, r4
   121e6:	f7fd f83a 	bl	f25e <cosem_setStructure>
   121ea:	2800      	cmp	r0, #0
   121ec:	d19f      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setBitString(data, object->xDLMSContextInfo.conformance, 24)) != 0 ||
   121ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   121f0:	2218      	movs	r2, #24
   121f2:	4620      	mov	r0, r4
   121f4:	f7fc ff0b 	bl	f00e <cosem_setBitString>
        if ((ret = cosem_setStructure(data, 6)) != 0 ||
   121f8:	2800      	cmp	r0, #0
   121fa:	d198      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
   121fc:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
   121fe:	4620      	mov	r0, r4
   12200:	f7fc ffe0 	bl	f1c4 <cosem_setUInt16>
            (ret = cosem_setBitString(data, object->xDLMSContextInfo.conformance, 24)) != 0 ||
   12204:	2800      	cmp	r0, #0
   12206:	d192      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxSendPduSize)) != 0 ||
   12208:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
   1220a:	4620      	mov	r0, r4
   1220c:	f7fc ffda 	bl	f1c4 <cosem_setUInt16>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxReceivePduSize)) != 0 ||
   12210:	2800      	cmp	r0, #0
   12212:	d18c      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setUInt8(data, object->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
   12214:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
   12218:	4620      	mov	r0, r4
   1221a:	f7fc ffc5 	bl	f1a8 <cosem_setUInt8>
            (ret = cosem_setUInt16(data, object->xDLMSContextInfo.maxSendPduSize)) != 0 ||
   1221e:	2800      	cmp	r0, #0
   12220:	d185      	bne.n	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setInt8(data, object->xDLMSContextInfo.qualityOfService)) != 0 ||
   12222:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
   12226:	4620      	mov	r0, r4
   12228:	f7fc ffe8 	bl	f1fc <cosem_setInt8>
            (ret = cosem_setUInt8(data, object->xDLMSContextInfo.dlmsVersionNumber)) != 0 ||
   1222c:	2800      	cmp	r0, #0
   1222e:	f47f af7e 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = cosem_setOctetString(data, &object->xDLMSContextInfo.cypheringInfo)) != 0)
   12232:	f105 013c 	add.w	r1, r5, #60	; 0x3c
        ret = cosem_setOctetString(e->value.byteArr, &object->secret);
   12236:	4620      	mov	r0, r4
   12238:	f7fc ff48 	bl	f0cc <cosem_setOctetString>
   1223c:	e777      	b.n	1212e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 6)
   1223e:	2b06      	cmp	r3, #6
   12240:	d13d      	bne.n	122be <cosem_getAssociationLogicalName+0x1a2>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12242:	2109      	movs	r1, #9
   12244:	4620      	mov	r0, r4
   12246:	f7fc f8e2 	bl	e40e <bb_setUInt8>
   1224a:	2800      	cmp	r0, #0
   1224c:	f47f af6f 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   12250:	2107      	movs	r1, #7
   12252:	4620      	mov	r0, r4
   12254:	f7fc f8db 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12258:	2800      	cmp	r0, #0
   1225a:	f47f af68 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   1225e:	2160      	movs	r1, #96	; 0x60
   12260:	4620      	mov	r0, r4
   12262:	f7fc f8d4 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x7)) != 0 ||
   12266:	2800      	cmp	r0, #0
   12268:	f47f af61 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   1226c:	2185      	movs	r1, #133	; 0x85
   1226e:	4620      	mov	r0, r4
   12270:	f7fc f8cd 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x60)) != 0 ||
   12274:	2800      	cmp	r0, #0
   12276:	f47f af5a 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   1227a:	2174      	movs	r1, #116	; 0x74
   1227c:	4620      	mov	r0, r4
   1227e:	f7fc f8c6 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x85)) != 0 ||
   12282:	2800      	cmp	r0, #0
   12284:	f47f af53 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.identifiedOrganization)) != 0 ||
   12288:	f895 104c 	ldrb.w	r1, [r5, #76]	; 0x4c
   1228c:	4620      	mov	r0, r4
   1228e:	f7fc f8be 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 0x74)) != 0 ||
   12292:	2800      	cmp	r0, #0
   12294:	f47f af4b 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.dlmsUA)) != 0 ||
   12298:	f895 104d 	ldrb.w	r1, [r5, #77]	; 0x4d
   1229c:	4620      	mov	r0, r4
   1229e:	f7fc f8b6 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.identifiedOrganization)) != 0 ||
   122a2:	2800      	cmp	r0, #0
   122a4:	f47f af43 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.authenticationMechanismName)) != 0 ||
   122a8:	f895 104e 	ldrb.w	r1, [r5, #78]	; 0x4e
   122ac:	4620      	mov	r0, r4
   122ae:	f7fc f8ae 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, object->authenticationMechanismName.dlmsUA)) != 0 ||
   122b2:	2800      	cmp	r0, #0
   122b4:	f47f af3b 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
            (ret = bb_setUInt8(data, (unsigned char)object->authenticationMechanismName.mechanismId)) != 0)
   122b8:	f895 104f 	ldrb.w	r1, [r5, #79]	; 0x4f
   122bc:	e784      	b.n	121c8 <cosem_getAssociationLogicalName+0xac>
    else if (e->index == 7)
   122be:	2b07      	cmp	r3, #7
   122c0:	d102      	bne.n	122c8 <cosem_getAssociationLogicalName+0x1ac>
        ret = cosem_setOctetString(e->value.byteArr, &object->secret);
   122c2:	f105 0150 	add.w	r1, r5, #80	; 0x50
   122c6:	e7b6      	b.n	12236 <cosem_getAssociationLogicalName+0x11a>
    else if (e->index == 8)
   122c8:	2b08      	cmp	r3, #8
   122ca:	d104      	bne.n	122d6 <cosem_getAssociationLogicalName+0x1ba>
        ret = cosem_setEnum(e->value.byteArr, object->associationStatus);
   122cc:	7c29      	ldrb	r1, [r5, #16]
   122ce:	4620      	mov	r0, r4
   122d0:	f7fc ffe1 	bl	f296 <cosem_setEnum>
   122d4:	e72b      	b.n	1212e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 9)
   122d6:	2b09      	cmp	r3, #9
   122d8:	d108      	bne.n	122ec <cosem_getAssociationLogicalName+0x1d0>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName((gxObject*)object->securitySetup), 6);
   122da:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   122dc:	f7f1 fedc 	bl	4098 <obj_getLogicalName>
   122e0:	2206      	movs	r2, #6
   122e2:	4601      	mov	r1, r0
                (ret = cosem_setOctetString2(data, (unsigned char*)str, len)) != 0)
   122e4:	4620      	mov	r0, r4
   122e6:	f7fc ff3e 	bl	f166 <cosem_setOctetString2>
   122ea:	e720      	b.n	1212e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 10)
   122ec:	2b0a      	cmp	r3, #10
   122ee:	d103      	bne.n	122f8 <cosem_getAssociationLogicalName+0x1dc>
        ret = getUserList(settings, e, e->value.byteArr);
   122f0:	4622      	mov	r2, r4
   122f2:	f7ff fecf 	bl	12094 <getUserList>
   122f6:	e71a      	b.n	1212e <cosem_getAssociationLogicalName+0x12>
    else if (e->index == 11)
   122f8:	2b0b      	cmp	r3, #11
   122fa:	d127      	bne.n	1234c <cosem_getAssociationLogicalName+0x230>
        if ((ret = cosem_setStructure(data, 2)) != 0)
   122fc:	2102      	movs	r1, #2
   122fe:	4620      	mov	r0, r4
   12300:	f7fc ffad 	bl	f25e <cosem_setStructure>
   12304:	2800      	cmp	r0, #0
   12306:	f47f af12 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
        if (object->currentUser.value == NULL)
   1230a:	6f2e      	ldr	r6, [r5, #112]	; 0x70
   1230c:	b97e      	cbnz	r6, 1232e <cosem_getAssociationLogicalName+0x212>
            if ((ret = cosem_setUInt8(data, 0)) != 0 ||
   1230e:	4601      	mov	r1, r0
   12310:	4620      	mov	r0, r4
   12312:	f7fc ff49 	bl	f1a8 <cosem_setUInt8>
   12316:	2800      	cmp	r0, #0
   12318:	f47f af09 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING)) != 0 ||
   1231c:	210a      	movs	r1, #10
   1231e:	4620      	mov	r0, r4
   12320:	f7fc f875 	bl	e40e <bb_setUInt8>
            if ((ret = cosem_setUInt8(data, 0)) != 0 ||
   12324:	2800      	cmp	r0, #0
   12326:	f47f af02 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
                (ret = bb_setUInt8(data, 0)) != 0)
   1232a:	4601      	mov	r1, r0
   1232c:	e74c      	b.n	121c8 <cosem_getAssociationLogicalName+0xac>
            unsigned char len = (unsigned char)strlen(str);
   1232e:	4630      	mov	r0, r6
   12330:	f7ee fd46 	bl	dc0 <strlen>
            if ((ret = cosem_setUInt8(data, object->currentUser.key)) != 0 ||
   12334:	f895 106c 	ldrb.w	r1, [r5, #108]	; 0x6c
            unsigned char len = (unsigned char)strlen(str);
   12338:	4607      	mov	r7, r0
            if ((ret = cosem_setUInt8(data, object->currentUser.key)) != 0 ||
   1233a:	4620      	mov	r0, r4
   1233c:	f7fc ff34 	bl	f1a8 <cosem_setUInt8>
   12340:	2800      	cmp	r0, #0
   12342:	f47f aef4 	bne.w	1212e <cosem_getAssociationLogicalName+0x12>
                (ret = cosem_setOctetString2(data, (unsigned char*)str, len)) != 0)
   12346:	b2fa      	uxtb	r2, r7
   12348:	4631      	mov	r1, r6
   1234a:	e7cb      	b.n	122e4 <cosem_getAssociationLogicalName+0x1c8>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1234c:	f44f 7081 	mov.w	r0, #258	; 0x102
   12350:	e6ed      	b.n	1212e <cosem_getAssociationLogicalName+0x12>

00012352 <getSNObjects>:
{
   12352:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    objectArray* list = &((gxAssociationShortName*)e->target)->objectList;
   12356:	f8d1 9014 	ldr.w	r9, [r1, #20]
{
   1235a:	4680      	mov	r8, r0
   1235c:	460d      	mov	r5, r1
    if ((ret = bb_capacity(ba, settings->maxPduSize)) != 0)
   1235e:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
   12362:	4610      	mov	r0, r2
{
   12364:	4614      	mov	r4, r2
    if ((ret = bb_capacity(ba, settings->maxPduSize)) != 0)
   12366:	f7fb ffef 	bl	e348 <bb_capacity>
   1236a:	4606      	mov	r6, r0
   1236c:	2800      	cmp	r0, #0
   1236e:	d150      	bne.n	12412 <getSNObjects+0xc0>
    if (!e->transaction)
   12370:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
   12374:	2b00      	cmp	r3, #0
   12376:	d039      	beq.n	123ec <getSNObjects+0x9a>
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   12378:	8f2f      	ldrh	r7, [r5, #56]	; 0x38
    objectArray* list = &((gxAssociationShortName*)e->target)->objectList;
   1237a:	f109 0b10 	add.w	fp, r9, #16
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   1237e:	f8b9 3016 	ldrh.w	r3, [r9, #22]
   12382:	42bb      	cmp	r3, r7
   12384:	d045      	beq.n	12412 <getSNObjects+0xc0>
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   12386:	aa01      	add	r2, sp, #4
   12388:	4639      	mov	r1, r7
   1238a:	4658      	mov	r0, fp
        pduSize = (uint16_t)ba->size;
   1238c:	f8b4 a006 	ldrh.w	sl, [r4, #6]
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   12390:	f009 fc05 	bl	1bb9e <oa_getByIndex>
   12394:	2800      	cmp	r0, #0
   12396:	d140      	bne.n	1241a <getSNObjects+0xc8>
            (ret = cosem_setStructure(ba, 4)) != 0 ||
   12398:	2104      	movs	r1, #4
   1239a:	4620      	mov	r0, r4
   1239c:	f7fc ff5f 	bl	f25e <cosem_setStructure>
        if ((ret = oa_getByIndex(list, pos, &it)) != 0 ||
   123a0:	2800      	cmp	r0, #0
   123a2:	d13a      	bne.n	1241a <getSNObjects+0xc8>
            (ret = cosem_setInt16(ba, it->shortName)) != 0 ||
   123a4:	9b01      	ldr	r3, [sp, #4]
   123a6:	4620      	mov	r0, r4
   123a8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   123ac:	f7fc ff34 	bl	f218 <cosem_setInt16>
            (ret = cosem_setStructure(ba, 4)) != 0 ||
   123b0:	2800      	cmp	r0, #0
   123b2:	d132      	bne.n	1241a <getSNObjects+0xc8>
            (ret = cosem_setUInt16(ba, it->objectType)) != 0 ||
   123b4:	9b01      	ldr	r3, [sp, #4]
   123b6:	4620      	mov	r0, r4
   123b8:	8819      	ldrh	r1, [r3, #0]
   123ba:	f7fc ff03 	bl	f1c4 <cosem_setUInt16>
            (ret = cosem_setInt16(ba, it->shortName)) != 0 ||
   123be:	bb60      	cbnz	r0, 1241a <getSNObjects+0xc8>
            (ret = cosem_setUInt8(ba, (unsigned char)it->version)) != 0 ||
   123c0:	9b01      	ldr	r3, [sp, #4]
   123c2:	4620      	mov	r0, r4
   123c4:	7899      	ldrb	r1, [r3, #2]
   123c6:	f7fc feef 	bl	f1a8 <cosem_setUInt8>
            (ret = cosem_setUInt16(ba, it->objectType)) != 0 ||
   123ca:	bb30      	cbnz	r0, 1241a <getSNObjects+0xc8>
            (ret = cosem_setOctetString2(ba, it->logicalName, 6)) != 0)
   123cc:	9901      	ldr	r1, [sp, #4]
   123ce:	2206      	movs	r2, #6
   123d0:	4411      	add	r1, r2
   123d2:	4620      	mov	r0, r4
   123d4:	f7fc fec7 	bl	f166 <cosem_setOctetString2>
            (ret = cosem_setUInt8(ba, (unsigned char)it->version)) != 0 ||
   123d8:	b9f8      	cbnz	r0, 1241a <getSNObjects+0xc8>
        if (settings->server)
   123da:	f898 3058 	ldrb.w	r3, [r8, #88]	; 0x58
   123de:	b97b      	cbnz	r3, 12400 <getSNObjects+0xae>
        ++e->transactionStartIndex;
   123e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   123e2:	3701      	adds	r7, #1
        ++e->transactionStartIndex;
   123e4:	3301      	adds	r3, #1
   123e6:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = (uint16_t)e->transactionStartIndex; pos != list->size; ++pos)
   123e8:	b2bf      	uxth	r7, r7
   123ea:	e7c8      	b.n	1237e <getSNObjects+0x2c>
   123ec:	f8b9 1016 	ldrh.w	r1, [r9, #22]
        e->transactionEndIndex = list->size;
   123f0:	63e9      	str	r1, [r5, #60]	; 0x3c
        if ((ret = cosem_setArray(ba, list->size)) != 0)
   123f2:	4620      	mov	r0, r4
   123f4:	f7fc ff41 	bl	f27a <cosem_setArray>
   123f8:	2800      	cmp	r0, #0
   123fa:	d0bd      	beq.n	12378 <getSNObjects+0x26>
   123fc:	4606      	mov	r6, r0
   123fe:	e008      	b.n	12412 <getSNObjects+0xc0>
            if (dlms_isPduFull(settings, ba, NULL))
   12400:	4602      	mov	r2, r0
   12402:	4621      	mov	r1, r4
   12404:	4640      	mov	r0, r8
   12406:	f7ff faa0 	bl	1194a <dlms_isPduFull>
   1240a:	2800      	cmp	r0, #0
   1240c:	d0e8      	beq.n	123e0 <getSNObjects+0x8e>
        ba->size = pduSize;
   1240e:	f8a4 a006 	strh.w	sl, [r4, #6]
}
   12412:	4630      	mov	r0, r6
   12414:	b003      	add	sp, #12
   12416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   1241a:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   1241e:	d1ed      	bne.n	123fc <getSNObjects+0xaa>
   12420:	e7f5      	b.n	1240e <getSNObjects+0xbc>

00012422 <getSNAccessRights>:
{
   12422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12426:	4681      	mov	r9, r0
    cnt = obj_attributeCount(object);
   12428:	4608      	mov	r0, r1
{
   1242a:	4615      	mov	r5, r2
   1242c:	460f      	mov	r7, r1
    cnt = obj_attributeCount(object);
   1242e:	f003 fb56 	bl	15ade <obj_attributeCount>
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   12432:	2103      	movs	r1, #3
    cnt = obj_attributeCount(object);
   12434:	4680      	mov	r8, r0
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   12436:	4628      	mov	r0, r5
   12438:	f7fc ff11 	bl	f25e <cosem_setStructure>
   1243c:	4604      	mov	r4, r0
   1243e:	b9d8      	cbnz	r0, 12478 <getSNAccessRights+0x56>
        (ret = cosem_setUInt16(ba, object->shortName)) != 0 ||
   12440:	88b9      	ldrh	r1, [r7, #4]
   12442:	4628      	mov	r0, r5
   12444:	f7fc febe 	bl	f1c4 <cosem_setUInt16>
    if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   12448:	4604      	mov	r4, r0
   1244a:	b9a8      	cbnz	r0, 12478 <getSNAccessRights+0x56>
        (ret = cosem_setArray(ba, cnt)) != 0)
   1244c:	fa1f f188 	uxth.w	r1, r8
   12450:	4628      	mov	r0, r5
   12452:	f7fc ff12 	bl	f27a <cosem_setArray>
        (ret = cosem_setUInt16(ba, object->shortName)) != 0 ||
   12456:	4604      	mov	r4, r0
   12458:	b970      	cbnz	r0, 12478 <getSNAccessRights+0x56>
    for (pos = 1; pos != cnt + 1; ++pos)
   1245a:	2601      	movs	r6, #1
   1245c:	44b0      	add	r8, r6
   1245e:	4546      	cmp	r6, r8
   12460:	d10d      	bne.n	1247e <getSNAccessRights+0x5c>
    cnt = obj_methodCount(object);
   12462:	4638      	mov	r0, r7
   12464:	f003 fbaf 	bl	15bc6 <obj_methodCount>
    if ((ret = cosem_setArray(ba, cnt)) == 0)
   12468:	b281      	uxth	r1, r0
    cnt = obj_methodCount(object);
   1246a:	4680      	mov	r8, r0
    if ((ret = cosem_setArray(ba, cnt)) == 0)
   1246c:	4628      	mov	r0, r5
   1246e:	f7fc ff04 	bl	f27a <cosem_setArray>
   12472:	4604      	mov	r4, r0
   12474:	2800      	cmp	r0, #0
   12476:	d041      	beq.n	124fc <getSNAccessRights+0xda>
}
   12478:	4620      	mov	r0, r4
   1247a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   1247e:	4632      	mov	r2, r6
   12480:	4639      	mov	r1, r7
   12482:	4648      	mov	r0, r9
   12484:	f7fb fe4b 	bl	e11e <svr_getAttributeAccess>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   12488:	2103      	movs	r1, #3
        ch = (unsigned char)svr_getAttributeAccess(settings, object, pos);
   1248a:	4682      	mov	sl, r0
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   1248c:	4628      	mov	r0, r5
   1248e:	f7fc fee6 	bl	f25e <cosem_setStructure>
   12492:	4604      	mov	r4, r0
   12494:	2800      	cmp	r0, #0
   12496:	d1ef      	bne.n	12478 <getSNAccessRights+0x56>
            (ret = cosem_setInt8(ba, pos)) != 0 ||
   12498:	4631      	mov	r1, r6
   1249a:	4628      	mov	r0, r5
   1249c:	f7fc feae 	bl	f1fc <cosem_setInt8>
        if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   124a0:	4604      	mov	r4, r0
   124a2:	2800      	cmp	r0, #0
   124a4:	d1e8      	bne.n	12478 <getSNAccessRights+0x56>
            (ret = cosem_setEnum(ba, ch)) != 0 ||
   124a6:	4651      	mov	r1, sl
   124a8:	4628      	mov	r0, r5
   124aa:	f7fc fef4 	bl	f296 <cosem_setEnum>
            (ret = cosem_setInt8(ba, pos)) != 0 ||
   124ae:	4604      	mov	r4, r0
   124b0:	2800      	cmp	r0, #0
   124b2:	d1e1      	bne.n	12478 <getSNAccessRights+0x56>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_NONE)) != 0)
   124b4:	4601      	mov	r1, r0
   124b6:	4628      	mov	r0, r5
   124b8:	f7fb ffa9 	bl	e40e <bb_setUInt8>
            (ret = cosem_setEnum(ba, ch)) != 0 ||
   124bc:	4604      	mov	r4, r0
   124be:	2800      	cmp	r0, #0
   124c0:	d1da      	bne.n	12478 <getSNAccessRights+0x56>
    for (pos = 1; pos != cnt + 1; ++pos)
   124c2:	3601      	adds	r6, #1
   124c4:	b2f6      	uxtb	r6, r6
   124c6:	e7ca      	b.n	1245e <getSNAccessRights+0x3c>
            ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   124c8:	4639      	mov	r1, r7
   124ca:	4632      	mov	r2, r6
   124cc:	4648      	mov	r0, r9
   124ce:	f7fb fe28 	bl	e122 <svr_getMethodAccess>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   124d2:	2103      	movs	r1, #3
            ch = (unsigned char)svr_getMethodAccess(settings, object, pos);
   124d4:	4682      	mov	sl, r0
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   124d6:	4628      	mov	r0, r5
   124d8:	f7fc fec1 	bl	f25e <cosem_setStructure>
   124dc:	b988      	cbnz	r0, 12502 <getSNAccessRights+0xe0>
                (ret = cosem_setInt8(ba, pos)) != 0 ||
   124de:	4631      	mov	r1, r6
   124e0:	4628      	mov	r0, r5
   124e2:	f7fc fe8b 	bl	f1fc <cosem_setInt8>
            if ((ret = cosem_setStructure(ba, 3)) != 0 ||
   124e6:	b960      	cbnz	r0, 12502 <getSNAccessRights+0xe0>
                (ret = cosem_setEnum(ba, ch)) != 0)
   124e8:	4651      	mov	r1, sl
   124ea:	4628      	mov	r0, r5
   124ec:	f7fc fed3 	bl	f296 <cosem_setEnum>
                (ret = cosem_setInt8(ba, pos)) != 0 ||
   124f0:	b938      	cbnz	r0, 12502 <getSNAccessRights+0xe0>
        for (pos = 1; pos != cnt + 1; ++pos)
   124f2:	3601      	adds	r6, #1
   124f4:	b2f6      	uxtb	r6, r6
   124f6:	4546      	cmp	r6, r8
   124f8:	d1e6      	bne.n	124c8 <getSNAccessRights+0xa6>
   124fa:	e7bd      	b.n	12478 <getSNAccessRights+0x56>
   124fc:	2601      	movs	r6, #1
   124fe:	44b0      	add	r8, r6
   12500:	e7f9      	b.n	124f6 <getSNAccessRights+0xd4>
                (ret = cosem_setEnum(ba, ch)) != 0)
   12502:	4604      	mov	r4, r0
   12504:	e7b8      	b.n	12478 <getSNAccessRights+0x56>

00012506 <cosem_getAssociationShortName>:
{
   12506:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   1250a:	7e0a      	ldrb	r2, [r1, #24]
    gxByteBuffer* data = e->value.byteArr;
   1250c:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
   1250e:	2a02      	cmp	r2, #2
{
   12510:	4606      	mov	r6, r0
    if (e->index == 2)
   12512:	d104      	bne.n	1251e <cosem_getAssociationShortName+0x18>
        ret = getSNObjects(settings, e, data);
   12514:	462a      	mov	r2, r5
   12516:	f7ff ff1c 	bl	12352 <getSNObjects>
                    (ret = getSNAccessRights(settings, it, data)) != 0)
   1251a:	4604      	mov	r4, r0
   1251c:	e008      	b.n	12530 <cosem_getAssociationShortName+0x2a>
    else if (e->index == 3)
   1251e:	2a03      	cmp	r2, #3
    gxAssociationShortName* object = (gxAssociationShortName*)e->target;
   12520:	694f      	ldr	r7, [r1, #20]
    else if (e->index == 3)
   12522:	d122      	bne.n	1256a <cosem_getAssociationShortName+0x64>
        if ((ret = cosem_setArray(data, object->objectList.size)) == 0)
   12524:	8af9      	ldrh	r1, [r7, #22]
   12526:	4628      	mov	r0, r5
   12528:	f7fc fea7 	bl	f27a <cosem_setArray>
   1252c:	4604      	mov	r4, r0
   1252e:	b1c0      	cbz	r0, 12562 <cosem_getAssociationShortName+0x5c>
}
   12530:	4620      	mov	r0, r4
   12532:	b003      	add	sp, #12
   12534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   12538:	aa01      	add	r2, sp, #4
   1253a:	4640      	mov	r0, r8
   1253c:	f009 fb2f 	bl	1bb9e <oa_getByIndex>
   12540:	2800      	cmp	r0, #0
   12542:	d1ea      	bne.n	1251a <cosem_getAssociationShortName+0x14>
                    (ret = getSNAccessRights(settings, it, data)) != 0)
   12544:	9901      	ldr	r1, [sp, #4]
   12546:	462a      	mov	r2, r5
   12548:	4630      	mov	r0, r6
   1254a:	f7ff ff6a 	bl	12422 <getSNAccessRights>
   1254e:	f109 0901 	add.w	r9, r9, #1
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   12552:	2800      	cmp	r0, #0
   12554:	d1e1      	bne.n	1251a <cosem_getAssociationShortName+0x14>
            for (pos = 0; pos != object->objectList.size; ++pos)
   12556:	8afb      	ldrh	r3, [r7, #22]
   12558:	fa1f f189 	uxth.w	r1, r9
   1255c:	428b      	cmp	r3, r1
   1255e:	d1eb      	bne.n	12538 <cosem_getAssociationShortName+0x32>
   12560:	e7e6      	b.n	12530 <cosem_getAssociationShortName+0x2a>
   12562:	4681      	mov	r9, r0
                if ((ret = oa_getByIndex(&object->objectList, pos, &it)) != 0 ||
   12564:	f107 0810 	add.w	r8, r7, #16
   12568:	e7f5      	b.n	12556 <cosem_getAssociationShortName+0x50>
    else if (e->index == 4)
   1256a:	2a04      	cmp	r2, #4
   1256c:	d108      	bne.n	12580 <cosem_getAssociationShortName+0x7a>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName((gxObject*)object->securitySetup), 6);
   1256e:	69b8      	ldr	r0, [r7, #24]
   12570:	f7f1 fd92 	bl	4098 <obj_getLogicalName>
   12574:	2206      	movs	r2, #6
   12576:	4601      	mov	r1, r0
   12578:	4628      	mov	r0, r5
   1257a:	f7fc fdf4 	bl	f166 <cosem_setOctetString2>
   1257e:	e7cc      	b.n	1251a <cosem_getAssociationShortName+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12580:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   12584:	e7d4      	b.n	12530 <cosem_getAssociationShortName+0x2a>

00012586 <cosem_getAutoAnswer>:
{
   12586:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   1258a:	7e03      	ldrb	r3, [r0, #24]
    gxAutoAnswer* object = (gxAutoAnswer*)e->target;
   1258c:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   1258e:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   12590:	2b02      	cmp	r3, #2
   12592:	d104      	bne.n	1259e <cosem_getAutoAnswer+0x18>
        ret = cosem_setEnum(data, object->mode);
   12594:	7cb1      	ldrb	r1, [r6, #18]
        ret = cosem_setEnum(data, object->status);
   12596:	4628      	mov	r0, r5
   12598:	f7fc fe7d 	bl	f296 <cosem_setEnum>
   1259c:	e02c      	b.n	125f8 <cosem_getAutoAnswer+0x72>
    else if (e->index == 3)
   1259e:	2b03      	cmp	r3, #3
   125a0:	d12c      	bne.n	125fc <cosem_getAutoAnswer+0x76>
        if ((ret = cosem_setArray(data, object->listeningWindow.size)) == 0)
   125a2:	8b71      	ldrh	r1, [r6, #26]
   125a4:	4628      	mov	r0, r5
   125a6:	f7fc fe68 	bl	f27a <cosem_setArray>
   125aa:	4604      	mov	r4, r0
   125ac:	b118      	cbz	r0, 125b6 <cosem_getAutoAnswer+0x30>
}
   125ae:	4620      	mov	r0, r4
   125b0:	b003      	add	sp, #12
   125b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   125b6:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   125b8:	f106 0814 	add.w	r8, r6, #20
            for (pos = 0; pos != object->listeningWindow.size; ++pos)
   125bc:	8b73      	ldrh	r3, [r6, #26]
   125be:	fa1f f987 	uxth.w	r9, r7
   125c2:	454b      	cmp	r3, r9
   125c4:	d0f3      	beq.n	125ae <cosem_getAutoAnswer+0x28>
                if ((ret = cosem_setStructure(data, 2)) != 0)
   125c6:	2102      	movs	r1, #2
   125c8:	4628      	mov	r0, r5
   125ca:	f7fc fe48 	bl	f25e <cosem_setStructure>
   125ce:	b998      	cbnz	r0, 125f8 <cosem_getAutoAnswer+0x72>
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   125d0:	aa01      	add	r2, sp, #4
   125d2:	4649      	mov	r1, r9
   125d4:	4640      	mov	r0, r8
   125d6:	f7ff fae0 	bl	11b9a <arr_getByIndex>
   125da:	b968      	cbnz	r0, 125f8 <cosem_getAutoAnswer+0x72>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->key)) != 0 ||
   125dc:	9b01      	ldr	r3, [sp, #4]
   125de:	4628      	mov	r0, r5
   125e0:	6819      	ldr	r1, [r3, #0]
   125e2:	f7fc fcee 	bl	efc2 <cosem_setDateTimeAsOctetString>
                if ((ret = arr_getByIndex(&object->listeningWindow, pos, (void**)&kv)) != 0 ||
   125e6:	b938      	cbnz	r0, 125f8 <cosem_getAutoAnswer+0x72>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->value)) != 0)
   125e8:	9b01      	ldr	r3, [sp, #4]
   125ea:	4628      	mov	r0, r5
   125ec:	6859      	ldr	r1, [r3, #4]
   125ee:	f7fc fce8 	bl	efc2 <cosem_setDateTimeAsOctetString>
   125f2:	3701      	adds	r7, #1
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)kv->key)) != 0 ||
   125f4:	2800      	cmp	r0, #0
   125f6:	d0e1      	beq.n	125bc <cosem_getAutoAnswer+0x36>
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   125f8:	4604      	mov	r4, r0
   125fa:	e7d8      	b.n	125ae <cosem_getAutoAnswer+0x28>
    else if (e->index == 4)
   125fc:	2b04      	cmp	r3, #4
   125fe:	d102      	bne.n	12606 <cosem_getAutoAnswer+0x80>
        ret = cosem_setEnum(data, object->status);
   12600:	f896 1020 	ldrb.w	r1, [r6, #32]
   12604:	e7c7      	b.n	12596 <cosem_getAutoAnswer+0x10>
    else if (e->index == 5)
   12606:	2b05      	cmp	r3, #5
   12608:	d105      	bne.n	12616 <cosem_getAutoAnswer+0x90>
        ret = cosem_setUInt8(data, object->numberOfCalls);
   1260a:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   1260e:	4628      	mov	r0, r5
   12610:	f7fc fdca 	bl	f1a8 <cosem_setUInt8>
   12614:	e7f0      	b.n	125f8 <cosem_getAutoAnswer+0x72>
    else if (e->index == 6)
   12616:	2b06      	cmp	r3, #6
   12618:	d10f      	bne.n	1263a <cosem_getAutoAnswer+0xb4>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1261a:	2102      	movs	r1, #2
   1261c:	4628      	mov	r0, r5
   1261e:	f7fc fe1e 	bl	f25e <cosem_setStructure>
   12622:	4604      	mov	r4, r0
   12624:	2800      	cmp	r0, #0
   12626:	d1c2      	bne.n	125ae <cosem_getAutoAnswer+0x28>
            (ret = cosem_setUInt8(data, object->numberOfRingsInListeningWindow)) != 0 ||
   12628:	7c31      	ldrb	r1, [r6, #16]
   1262a:	4628      	mov	r0, r5
   1262c:	f7fc fdbc 	bl	f1a8 <cosem_setUInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   12630:	4604      	mov	r4, r0
   12632:	2800      	cmp	r0, #0
   12634:	d1bb      	bne.n	125ae <cosem_getAutoAnswer+0x28>
            (ret = cosem_setUInt8(data, object->numberOfRingsOutListeningWindow)) != 0)
   12636:	7c71      	ldrb	r1, [r6, #17]
   12638:	e7e9      	b.n	1260e <cosem_getAutoAnswer+0x88>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1263a:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1263e:	e7b6      	b.n	125ae <cosem_getAutoAnswer+0x28>

00012640 <cosem_getAutoConnect>:
{
   12640:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   12644:	7e03      	ldrb	r3, [r0, #24]
    gxAutoConnect* object = (gxAutoConnect*)e->target;
   12646:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12648:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   1264a:	2b02      	cmp	r3, #2
   1264c:	d106      	bne.n	1265c <cosem_getAutoConnect+0x1c>
        ret = cosem_setEnum(data, object->mode);
   1264e:	7c21      	ldrb	r1, [r4, #16]
   12650:	4628      	mov	r0, r5
   12652:	f7fc fe20 	bl	f296 <cosem_setEnum>
}
   12656:	b002      	add	sp, #8
   12658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (e->index == 3)
   1265c:	2b03      	cmp	r3, #3
   1265e:	d105      	bne.n	1266c <cosem_getAutoConnect+0x2c>
        ret = cosem_setUInt8(data, object->repetitions);
   12660:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   12664:	4628      	mov	r0, r5
   12666:	f7fc fd9f 	bl	f1a8 <cosem_setUInt8>
   1266a:	e7f4      	b.n	12656 <cosem_getAutoConnect+0x16>
    else if (e->index == 4)
   1266c:	2b04      	cmp	r3, #4
   1266e:	d104      	bne.n	1267a <cosem_getAutoConnect+0x3a>
        ret = cosem_setUInt16(data, object->repetitionDelay);
   12670:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   12672:	4628      	mov	r0, r5
   12674:	f7fc fda6 	bl	f1c4 <cosem_setUInt16>
   12678:	e7ed      	b.n	12656 <cosem_getAutoConnect+0x16>
    else if (e->index == 5)
   1267a:	2b05      	cmp	r3, #5
   1267c:	d12c      	bne.n	126d8 <cosem_getAutoConnect+0x98>
        if ((ret = cosem_setArray(data, object->callingWindow.size)) != 0)
   1267e:	8b61      	ldrh	r1, [r4, #26]
   12680:	4628      	mov	r0, r5
   12682:	f7fc fdfa 	bl	f27a <cosem_setArray>
   12686:	2800      	cmp	r0, #0
   12688:	d1e5      	bne.n	12656 <cosem_getAutoConnect+0x16>
   1268a:	4606      	mov	r6, r0
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   1268c:	f104 0714 	add.w	r7, r4, #20
        for (pos = 0; pos != object->callingWindow.size; ++pos)
   12690:	8b63      	ldrh	r3, [r4, #26]
   12692:	fa1f f886 	uxth.w	r8, r6
   12696:	4543      	cmp	r3, r8
   12698:	d101      	bne.n	1269e <cosem_getAutoConnect+0x5e>
   1269a:	2000      	movs	r0, #0
   1269c:	e7db      	b.n	12656 <cosem_getAutoConnect+0x16>
            if ((ret = cosem_setStructure(data, 2)) != 0)
   1269e:	2102      	movs	r1, #2
   126a0:	4628      	mov	r0, r5
   126a2:	f7fc fddc 	bl	f25e <cosem_setStructure>
   126a6:	2800      	cmp	r0, #0
   126a8:	d1d5      	bne.n	12656 <cosem_getAutoConnect+0x16>
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   126aa:	aa01      	add	r2, sp, #4
   126ac:	4641      	mov	r1, r8
   126ae:	4638      	mov	r0, r7
   126b0:	f7ff fa73 	bl	11b9a <arr_getByIndex>
   126b4:	2800      	cmp	r0, #0
   126b6:	d1ce      	bne.n	12656 <cosem_getAutoConnect+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->key)) != 0 ||
   126b8:	9b01      	ldr	r3, [sp, #4]
   126ba:	4628      	mov	r0, r5
   126bc:	6819      	ldr	r1, [r3, #0]
   126be:	f7fc fc80 	bl	efc2 <cosem_setDateTimeAsOctetString>
            if ((ret = arr_getByIndex(&object->callingWindow, pos, (void**)&k)) != 0 ||
   126c2:	2800      	cmp	r0, #0
   126c4:	d1c7      	bne.n	12656 <cosem_getAutoConnect+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->value)) != 0)
   126c6:	9b01      	ldr	r3, [sp, #4]
   126c8:	4628      	mov	r0, r5
   126ca:	6859      	ldr	r1, [r3, #4]
   126cc:	f7fc fc79 	bl	efc2 <cosem_setDateTimeAsOctetString>
   126d0:	3601      	adds	r6, #1
                (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)k->key)) != 0 ||
   126d2:	2800      	cmp	r0, #0
   126d4:	d0dc      	beq.n	12690 <cosem_getAutoConnect+0x50>
   126d6:	e7be      	b.n	12656 <cosem_getAutoConnect+0x16>
    else if (e->index == 6)
   126d8:	2b06      	cmp	r3, #6
   126da:	d11a      	bne.n	12712 <cosem_getAutoConnect+0xd2>
        if ((ret = cosem_setArray(data, object->destinations.size)) != 0)
   126dc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   126de:	4628      	mov	r0, r5
   126e0:	f7fc fdcb 	bl	f27a <cosem_setArray>
   126e4:	2800      	cmp	r0, #0
   126e6:	d1b6      	bne.n	12656 <cosem_getAutoConnect+0x16>
   126e8:	4606      	mov	r6, r0
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   126ea:	f104 0720 	add.w	r7, r4, #32
        for (pos = 0; pos != object->destinations.size; ++pos)
   126ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   126f0:	b2b1      	uxth	r1, r6
   126f2:	428b      	cmp	r3, r1
   126f4:	d0d1      	beq.n	1269a <cosem_getAutoConnect+0x5a>
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   126f6:	aa01      	add	r2, sp, #4
   126f8:	4638      	mov	r0, r7
   126fa:	f7ff fa4e 	bl	11b9a <arr_getByIndex>
   126fe:	2800      	cmp	r0, #0
   12700:	d1a9      	bne.n	12656 <cosem_getAutoConnect+0x16>
                (ret = cosem_setOctetString(data, it)) != 0)
   12702:	9901      	ldr	r1, [sp, #4]
   12704:	4628      	mov	r0, r5
   12706:	f7fc fce1 	bl	f0cc <cosem_setOctetString>
   1270a:	3601      	adds	r6, #1
            if ((ret = arr_getByIndex(&object->destinations, pos, (void**)&it)) != 0 ||
   1270c:	2800      	cmp	r0, #0
   1270e:	d0ee      	beq.n	126ee <cosem_getAutoConnect+0xae>
   12710:	e7a1      	b.n	12656 <cosem_getAutoConnect+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12712:	f44f 7081 	mov.w	r0, #258	; 0x102
   12716:	e79e      	b.n	12656 <cosem_getAutoConnect+0x16>

00012718 <cosem_getDemandRegister>:
{
   12718:	b538      	push	{r3, r4, r5, lr}
   1271a:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   1271c:	6885      	ldr	r5, [r0, #8]
    gxDemandRegister* object = (gxDemandRegister*)e->target;
   1271e:	6944      	ldr	r4, [r0, #20]
    switch (e->index)
   12720:	3b02      	subs	r3, #2
   12722:	2b07      	cmp	r3, #7
   12724:	d842      	bhi.n	127ac <cosem_getDemandRegister+0x94>
   12726:	e8df f003 	tbb	[pc, r3]
   1272a:	0d04      	.short	0x0d04
   1272c:	312a2210 	.word	0x312a2210
   12730:	3a34      	.short	0x3a34
        if (e->action)
   12732:	f104 0110 	add.w	r1, r4, #16
        if (e->action)
   12736:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   1273a:	b1db      	cbz	r3, 12774 <cosem_getDemandRegister+0x5c>
}
   1273c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &object->status);
   12740:	f7f1 bf34 	b.w	45ac <var_copy>
        if (e->action)
   12744:	f104 0120 	add.w	r1, r4, #32
   12748:	e7f5      	b.n	12736 <cosem_getDemandRegister+0x1e>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1274a:	2102      	movs	r1, #2
   1274c:	4628      	mov	r0, r5
   1274e:	f7fc fd86 	bl	f25e <cosem_setStructure>
   12752:	bb68      	cbnz	r0, 127b0 <cosem_getDemandRegister+0x98>
            (ret = cosem_setInt8(data, object->scaler)) != 0 ||
   12754:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
   12758:	4628      	mov	r0, r5
   1275a:	f7fc fd4f 	bl	f1fc <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   1275e:	bb38      	cbnz	r0, 127b0 <cosem_getDemandRegister+0x98>
            (ret = cosem_setEnum(data, object->unit)) != 0)
   12760:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
   12764:	4628      	mov	r0, r5
}
   12766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setEnum(data, object->unit)) != 0)
   1276a:	f7fc bd94 	b.w	f296 <cosem_setEnum>
        if (e->action)
   1276e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   12772:	e7e0      	b.n	12736 <cosem_getDemandRegister+0x1e>
            ret = cosem_setVariant(data, &object->status);
   12774:	4628      	mov	r0, r5
}
   12776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(data, &object->status);
   1277a:	f7fc bd69 	b.w	f250 <cosem_setVariant>
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   1277e:	f104 0148 	add.w	r1, r4, #72	; 0x48
        ret = cosem_setDateTimeAsOctetString(data, &object->startTimeCurrent);
   12782:	4628      	mov	r0, r5
}
   12784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setDateTimeAsOctetString(data, &object->startTimeCurrent);
   12788:	f7fc bc1b 	b.w	efc2 <cosem_setDateTimeAsOctetString>
   1278c:	f104 0154 	add.w	r1, r4, #84	; 0x54
   12790:	e7f7      	b.n	12782 <cosem_getDemandRegister+0x6a>
        ret = cosem_setUInt32(data, object->period);
   12792:	6e61      	ldr	r1, [r4, #100]	; 0x64
   12794:	4628      	mov	r0, r5
}
   12796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt32(data, object->period);
   1279a:	f7fc bd21 	b.w	f1e0 <cosem_setUInt32>
        ret = cosem_setUInt16(data, object->numberOfPeriods);
   1279e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
   127a2:	4628      	mov	r0, r5
}
   127a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt16(data, object->numberOfPeriods);
   127a8:	f7fc bd0c 	b.w	f1c4 <cosem_setUInt16>
    switch (e->index)
   127ac:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   127b0:	bd38      	pop	{r3, r4, r5, pc}

000127b2 <cosem_getMacAddressSetup>:
    if (e->index == 2)
   127b2:	7e03      	ldrb	r3, [r0, #24]
   127b4:	2b02      	cmp	r3, #2
   127b6:	d104      	bne.n	127c2 <cosem_getMacAddressSetup+0x10>
        ret = cosem_setOctetString(e->value.byteArr, &object->macAddress);
   127b8:	6941      	ldr	r1, [r0, #20]
   127ba:	6880      	ldr	r0, [r0, #8]
   127bc:	3110      	adds	r1, #16
   127be:	f7fc bc85 	b.w	f0cc <cosem_setOctetString>
}
   127c2:	f44f 7081 	mov.w	r0, #258	; 0x102
   127c6:	4770      	bx	lr

000127c8 <cosem_getExtendedRegister>:
{
   127c8:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   127ca:	7e02      	ldrb	r2, [r0, #24]
    gxExtendedRegister* object = (gxExtendedRegister*)e->target;
   127cc:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   127ce:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   127d0:	2a02      	cmp	r2, #2
{
   127d2:	4603      	mov	r3, r0
    if (e->index == 2)
   127d4:	d108      	bne.n	127e8 <cosem_getExtendedRegister+0x20>
        if (e->action)
   127d6:	f104 0110 	add.w	r1, r4, #16
        if (e->action)
   127da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   127de:	b1e3      	cbz	r3, 1281a <cosem_getExtendedRegister+0x52>
}
   127e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = var_copy(&e->value, &object->status);
   127e4:	f7f1 bee2 	b.w	45ac <var_copy>
    else if (e->index == 3)
   127e8:	2a03      	cmp	r2, #3
   127ea:	d111      	bne.n	12810 <cosem_getExtendedRegister+0x48>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   127ec:	2102      	movs	r1, #2
   127ee:	4628      	mov	r0, r5
   127f0:	f7fc fd35 	bl	f25e <cosem_setStructure>
   127f4:	bb08      	cbnz	r0, 1283a <cosem_getExtendedRegister+0x72>
            (ret = cosem_setInt8(data, object->scaler)) != 0 ||
   127f6:	f894 1020 	ldrb.w	r1, [r4, #32]
   127fa:	4628      	mov	r0, r5
   127fc:	f7fc fcfe 	bl	f1fc <cosem_setInt8>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   12800:	b9d8      	cbnz	r0, 1283a <cosem_getExtendedRegister+0x72>
            (ret = cosem_setUInt8(data, object->unit)) != 0)
   12802:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   12806:	4628      	mov	r0, r5
}
   12808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setUInt8(data, object->unit)) != 0)
   1280c:	f7fc bccc 	b.w	f1a8 <cosem_setUInt8>
    else if (e->index == 4)
   12810:	2a04      	cmp	r2, #4
   12812:	d107      	bne.n	12824 <cosem_getExtendedRegister+0x5c>
        if (e->action)
   12814:	f104 0130 	add.w	r1, r4, #48	; 0x30
   12818:	e7df      	b.n	127da <cosem_getExtendedRegister+0x12>
            ret = cosem_setVariant(data, &object->status);
   1281a:	4628      	mov	r0, r5
}
   1281c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = cosem_setVariant(data, &object->status);
   12820:	f7fc bd16 	b.w	f250 <cosem_setVariant>
    else if (e->index == 5)
   12824:	2a05      	cmp	r2, #5
   12826:	d106      	bne.n	12836 <cosem_getExtendedRegister+0x6e>
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   12828:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1282c:	4628      	mov	r0, r5
}
   1282e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setDateTimeAsOctetString(data, &object->captureTime);
   12832:	f7fc bbc6 	b.w	efc2 <cosem_setDateTimeAsOctetString>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12836:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   1283a:	bd38      	pop	{r3, r4, r5, pc}

0001283c <cosem_getQualityOfService>:
{
   1283c:	b538      	push	{r3, r4, r5, lr}
   1283e:	460c      	mov	r4, r1
   12840:	4605      	mov	r5, r0
    if ((ret = cosem_setStructure(ba, 5)) != 0 ||
   12842:	2105      	movs	r1, #5
   12844:	4620      	mov	r0, r4
   12846:	f7fc fd0a 	bl	f25e <cosem_setStructure>
   1284a:	b9c8      	cbnz	r0, 12880 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->precedence)) != 0 ||
   1284c:	7829      	ldrb	r1, [r5, #0]
   1284e:	4620      	mov	r0, r4
   12850:	f7fc fcaa 	bl	f1a8 <cosem_setUInt8>
    if ((ret = cosem_setStructure(ba, 5)) != 0 ||
   12854:	b9a0      	cbnz	r0, 12880 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->delay)) != 0 ||
   12856:	7869      	ldrb	r1, [r5, #1]
   12858:	4620      	mov	r0, r4
   1285a:	f7fc fca5 	bl	f1a8 <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->precedence)) != 0 ||
   1285e:	b978      	cbnz	r0, 12880 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->reliability)) != 0 ||
   12860:	78a9      	ldrb	r1, [r5, #2]
   12862:	4620      	mov	r0, r4
   12864:	f7fc fca0 	bl	f1a8 <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->delay)) != 0 ||
   12868:	b950      	cbnz	r0, 12880 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->peakThroughput)) != 0 ||
   1286a:	78e9      	ldrb	r1, [r5, #3]
   1286c:	4620      	mov	r0, r4
   1286e:	f7fc fc9b 	bl	f1a8 <cosem_setUInt8>
        (ret = cosem_setUInt8(ba, service->reliability)) != 0 ||
   12872:	b928      	cbnz	r0, 12880 <cosem_getQualityOfService+0x44>
        (ret = cosem_setUInt8(ba, service->meanThroughput)) != 0)
   12874:	7929      	ldrb	r1, [r5, #4]
   12876:	4620      	mov	r0, r4
}
   12878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        (ret = cosem_setUInt8(ba, service->meanThroughput)) != 0)
   1287c:	f7fc bc94 	b.w	f1a8 <cosem_setUInt8>
}
   12880:	bd38      	pop	{r3, r4, r5, pc}

00012882 <cosem_getGprsSetup>:
{
   12882:	b538      	push	{r3, r4, r5, lr}
    if (e->index == 2)
   12884:	7e03      	ldrb	r3, [r0, #24]
    gxGPRSSetup* object = (gxGPRSSetup*)e->target;
   12886:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12888:	6884      	ldr	r4, [r0, #8]
    if (e->index == 2)
   1288a:	2b02      	cmp	r3, #2
   1288c:	d106      	bne.n	1289c <cosem_getGprsSetup+0x1a>
        ret = cosem_setOctetString(data, &object->apn);
   1288e:	f105 0110 	add.w	r1, r5, #16
   12892:	4620      	mov	r0, r4
}
   12894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setOctetString(data, &object->apn);
   12898:	f7fc bc18 	b.w	f0cc <cosem_setOctetString>
    else if (e->index == 3)
   1289c:	2b03      	cmp	r3, #3
   1289e:	d105      	bne.n	128ac <cosem_getGprsSetup+0x2a>
        ret = cosem_setUInt16(data, object->pinCode);
   128a0:	8ba9      	ldrh	r1, [r5, #28]
   128a2:	4620      	mov	r0, r4
}
   128a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_setUInt16(data, object->pinCode);
   128a8:	f7fc bc8c 	b.w	f1c4 <cosem_setUInt16>
    else if (e->index == 4)
   128ac:	2b04      	cmp	r3, #4
   128ae:	d111      	bne.n	128d4 <cosem_getGprsSetup+0x52>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   128b0:	2102      	movs	r1, #2
   128b2:	4620      	mov	r0, r4
   128b4:	f7fc fcd3 	bl	f25e <cosem_setStructure>
   128b8:	b970      	cbnz	r0, 128d8 <cosem_getGprsSetup+0x56>
            (ret = cosem_getQualityOfService(&object->defaultQualityOfService, data)) != 0 ||
   128ba:	4621      	mov	r1, r4
   128bc:	f105 001e 	add.w	r0, r5, #30
   128c0:	f7ff ffbc 	bl	1283c <cosem_getQualityOfService>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   128c4:	b940      	cbnz	r0, 128d8 <cosem_getGprsSetup+0x56>
            (ret = cosem_getQualityOfService(&object->requestedQualityOfService, data)) != 0)
   128c6:	4621      	mov	r1, r4
   128c8:	f105 0023 	add.w	r0, r5, #35	; 0x23
}
   128cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_getQualityOfService(&object->requestedQualityOfService, data)) != 0)
   128d0:	f7ff bfb4 	b.w	1283c <cosem_getQualityOfService>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   128d4:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   128d8:	bd38      	pop	{r3, r4, r5, pc}

000128da <cosem_getSecuritySetup>:
{
   128da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   128de:	7e03      	ldrb	r3, [r0, #24]
    gxSecuritySetup* object = (gxSecuritySetup*)e->target;
   128e0:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   128e2:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   128e4:	2b02      	cmp	r3, #2
   128e6:	d105      	bne.n	128f4 <cosem_getSecuritySetup+0x1a>
        ret = cosem_setEnum(data, object->securityPolicy);
   128e8:	7c31      	ldrb	r1, [r6, #16]
        ret = cosem_setEnum(data, object->securitySuite);
   128ea:	4628      	mov	r0, r5
   128ec:	f7fc fcd3 	bl	f296 <cosem_setEnum>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subjectAltName, len)) != 0)
   128f0:	4604      	mov	r4, r0
   128f2:	e019      	b.n	12928 <cosem_getSecuritySetup+0x4e>
    else if (e->index == 3)
   128f4:	2b03      	cmp	r3, #3
   128f6:	d101      	bne.n	128fc <cosem_getSecuritySetup+0x22>
        ret = cosem_setEnum(data, object->securitySuite);
   128f8:	7c71      	ldrb	r1, [r6, #17]
   128fa:	e7f6      	b.n	128ea <cosem_getSecuritySetup+0x10>
    else if (e->index == 4)
   128fc:	2b04      	cmp	r3, #4
   128fe:	d105      	bne.n	1290c <cosem_getSecuritySetup+0x32>
        ret = cosem_setOctetString(data, &object->clientSystemTitle);
   12900:	f106 0120 	add.w	r1, r6, #32
        ret = cosem_setOctetString(data, &object->serverSystemTitle);
   12904:	4628      	mov	r0, r5
   12906:	f7fc fbe1 	bl	f0cc <cosem_setOctetString>
   1290a:	e7f1      	b.n	128f0 <cosem_getSecuritySetup+0x16>
    else if (e->index == 5)
   1290c:	2b05      	cmp	r3, #5
   1290e:	d102      	bne.n	12916 <cosem_getSecuritySetup+0x3c>
        ret = cosem_setOctetString(data, &object->serverSystemTitle);
   12910:	f106 0114 	add.w	r1, r6, #20
   12914:	e7f6      	b.n	12904 <cosem_getSecuritySetup+0x2a>
    else if (e->index == 6)
   12916:	2b06      	cmp	r3, #6
   12918:	d15e      	bne.n	129d8 <cosem_getSecuritySetup+0xfe>
        if ((ret = cosem_setArray(data, object->certificates.size)) == 0)
   1291a:	8e71      	ldrh	r1, [r6, #50]	; 0x32
   1291c:	4628      	mov	r0, r5
   1291e:	f7fc fcac 	bl	f27a <cosem_setArray>
   12922:	4604      	mov	r4, r0
   12924:	2800      	cmp	r0, #0
   12926:	d053      	beq.n	129d0 <cosem_getSecuritySetup+0xf6>
}
   12928:	4620      	mov	r0, r4
   1292a:	b002      	add	sp, #8
   1292c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   12930:	aa01      	add	r2, sp, #4
   12932:	4640      	mov	r0, r8
   12934:	f7ff f931 	bl	11b9a <arr_getByIndex>
   12938:	2800      	cmp	r0, #0
   1293a:	d1d9      	bne.n	128f0 <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setStructure(data, 6)) != 0 ||
   1293c:	2106      	movs	r1, #6
   1293e:	4628      	mov	r0, r5
   12940:	f7fc fc8d 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   12944:	2800      	cmp	r0, #0
   12946:	d1d3      	bne.n	128f0 <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setEnum(data, it->entity)) != 0 ||
   12948:	9b01      	ldr	r3, [sp, #4]
   1294a:	4628      	mov	r0, r5
   1294c:	7819      	ldrb	r1, [r3, #0]
   1294e:	f7fc fca2 	bl	f296 <cosem_setEnum>
                    (ret = cosem_setStructure(data, 6)) != 0 ||
   12952:	2800      	cmp	r0, #0
   12954:	d1cc      	bne.n	128f0 <cosem_getSecuritySetup+0x16>
                    (ret = cosem_setEnum(data, it->type)) != 0)
   12956:	9b01      	ldr	r3, [sp, #4]
   12958:	4628      	mov	r0, r5
   1295a:	7859      	ldrb	r1, [r3, #1]
   1295c:	f7fc fc9b 	bl	f296 <cosem_setEnum>
                    (ret = cosem_setEnum(data, it->entity)) != 0 ||
   12960:	2800      	cmp	r0, #0
   12962:	d1c5      	bne.n	128f0 <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->serialNumber);
   12964:	9b01      	ldr	r3, [sp, #4]
   12966:	6858      	ldr	r0, [r3, #4]
   12968:	f7ee fa2a 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->serialNumber, len)) != 0)
   1296c:	9b01      	ldr	r3, [sp, #4]
   1296e:	b282      	uxth	r2, r0
   12970:	6859      	ldr	r1, [r3, #4]
   12972:	4628      	mov	r0, r5
   12974:	f7fc fbf7 	bl	f166 <cosem_setOctetString2>
   12978:	2800      	cmp	r0, #0
   1297a:	d1b9      	bne.n	128f0 <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->issuer);
   1297c:	9b01      	ldr	r3, [sp, #4]
   1297e:	6898      	ldr	r0, [r3, #8]
   12980:	f7ee fa1e 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->issuer, len)) != 0)
   12984:	9b01      	ldr	r3, [sp, #4]
   12986:	b282      	uxth	r2, r0
   12988:	6899      	ldr	r1, [r3, #8]
   1298a:	4628      	mov	r0, r5
   1298c:	f7fc fbeb 	bl	f166 <cosem_setOctetString2>
   12990:	2800      	cmp	r0, #0
   12992:	d1ad      	bne.n	128f0 <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->subject);
   12994:	9b01      	ldr	r3, [sp, #4]
   12996:	68d8      	ldr	r0, [r3, #12]
   12998:	f7ee fa12 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subject, len)) != 0)
   1299c:	9b01      	ldr	r3, [sp, #4]
   1299e:	b282      	uxth	r2, r0
   129a0:	68d9      	ldr	r1, [r3, #12]
   129a2:	4628      	mov	r0, r5
   129a4:	f7fc fbdf 	bl	f166 <cosem_setOctetString2>
   129a8:	2800      	cmp	r0, #0
   129aa:	d1a1      	bne.n	128f0 <cosem_getSecuritySetup+0x16>
                len = (uint16_t)strlen(it->subjectAltName);
   129ac:	9b01      	ldr	r3, [sp, #4]
   129ae:	6918      	ldr	r0, [r3, #16]
   129b0:	f7ee fa06 	bl	dc0 <strlen>
                if ((ret = cosem_setOctetString2(data, (unsigned char*)it->subjectAltName, len)) != 0)
   129b4:	9b01      	ldr	r3, [sp, #4]
   129b6:	b282      	uxth	r2, r0
   129b8:	6919      	ldr	r1, [r3, #16]
   129ba:	4628      	mov	r0, r5
   129bc:	f7fc fbd3 	bl	f166 <cosem_setOctetString2>
   129c0:	3701      	adds	r7, #1
   129c2:	2800      	cmp	r0, #0
   129c4:	d194      	bne.n	128f0 <cosem_getSecuritySetup+0x16>
            for (pos = 0; pos != object->certificates.size; ++pos)
   129c6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
   129c8:	b2b9      	uxth	r1, r7
   129ca:	428b      	cmp	r3, r1
   129cc:	d1b0      	bne.n	12930 <cosem_getSecuritySetup+0x56>
   129ce:	e7ab      	b.n	12928 <cosem_getSecuritySetup+0x4e>
   129d0:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->certificates, pos, (void**)&it)) != 0 ||
   129d2:	f106 082c 	add.w	r8, r6, #44	; 0x2c
   129d6:	e7f6      	b.n	129c6 <cosem_getSecuritySetup+0xec>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   129d8:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   129dc:	e7a4      	b.n	12928 <cosem_getSecuritySetup+0x4e>

000129de <cosem_getIecHdlcSetup>:
    gxIecHdlcSetup* object = (gxIecHdlcSetup*)e->target;
   129de:	7e02      	ldrb	r2, [r0, #24]
   129e0:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   129e2:	3a02      	subs	r2, #2
   129e4:	2a07      	cmp	r2, #7
   129e6:	d81b      	bhi.n	12a20 <cosem_getIecHdlcSetup+0x42>
   129e8:	e8df f002 	tbb	[pc, r2]
   129ec:	0e0c0804 	.word	0x0e0c0804
   129f0:	18161412 	.word	0x18161412
        ret = cosem_setEnum(e->value.byteArr, object->communicationSpeed);
   129f4:	7d99      	ldrb	r1, [r3, #22]
   129f6:	6880      	ldr	r0, [r0, #8]
   129f8:	f7fc bc4d 	b.w	f296 <cosem_setEnum>
        ret = cosem_setUInt8(e->value.byteArr, object->windowSizeTransmit);
   129fc:	7dd9      	ldrb	r1, [r3, #23]
        ret = cosem_setUInt8(e->value.byteArr, object->windowSizeReceive);
   129fe:	6880      	ldr	r0, [r0, #8]
   12a00:	f7fc bbd2 	b.w	f1a8 <cosem_setUInt8>
   12a04:	7e19      	ldrb	r1, [r3, #24]
   12a06:	e7fa      	b.n	129fe <cosem_getIecHdlcSetup+0x20>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumInfoLengthTransmit);
   12a08:	8a99      	ldrh	r1, [r3, #20]
        ret = cosem_setUInt16(e->value.byteArr, object->deviceAddress);
   12a0a:	6880      	ldr	r0, [r0, #8]
   12a0c:	f7fc bbda 	b.w	f1c4 <cosem_setUInt16>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumInfoLengthReceive);
   12a10:	8b99      	ldrh	r1, [r3, #28]
   12a12:	e7fa      	b.n	12a0a <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->interCharachterTimeout);
   12a14:	8b59      	ldrh	r1, [r3, #26]
   12a16:	e7f8      	b.n	12a0a <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   12a18:	8a19      	ldrh	r1, [r3, #16]
   12a1a:	e7f6      	b.n	12a0a <cosem_getIecHdlcSetup+0x2c>
        ret = cosem_setUInt16(e->value.byteArr, object->deviceAddress);
   12a1c:	8a59      	ldrh	r1, [r3, #18]
   12a1e:	e7f4      	b.n	12a0a <cosem_getIecHdlcSetup+0x2c>
}
   12a20:	f44f 7081 	mov.w	r0, #258	; 0x102
   12a24:	4770      	bx	lr

00012a26 <cosem_getIecLocalPortSetup>:
    if (e->index == 2)
   12a26:	7e03      	ldrb	r3, [r0, #24]
    gxLocalPortSetup* object = (gxLocalPortSetup*)e->target;
   12a28:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   12a2a:	2b02      	cmp	r3, #2
   12a2c:	d104      	bne.n	12a38 <cosem_getIecLocalPortSetup+0x12>
        ret = cosem_setEnum(e->value.byteArr, object->defaultMode);
   12a2e:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaudrate);
   12a32:	6880      	ldr	r0, [r0, #8]
   12a34:	f7fc bc2f 	b.w	f296 <cosem_setEnum>
    else if (e->index == 3)
   12a38:	2b03      	cmp	r3, #3
   12a3a:	d102      	bne.n	12a42 <cosem_getIecLocalPortSetup+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaudrate);
   12a3c:	f891 1035 	ldrb.w	r1, [r1, #53]	; 0x35
   12a40:	e7f7      	b.n	12a32 <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 4)
   12a42:	2b04      	cmp	r3, #4
   12a44:	d102      	bne.n	12a4c <cosem_getIecLocalPortSetup+0x26>
        ret = cosem_setEnum(e->value.byteArr, object->proposedBaudrate);
   12a46:	f891 1036 	ldrb.w	r1, [r1, #54]	; 0x36
   12a4a:	e7f2      	b.n	12a32 <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 5)
   12a4c:	2b05      	cmp	r3, #5
   12a4e:	d102      	bne.n	12a56 <cosem_getIecLocalPortSetup+0x30>
        ret = cosem_setEnum(e->value.byteArr, object->responseTime);
   12a50:	f891 1037 	ldrb.w	r1, [r1, #55]	; 0x37
   12a54:	e7ed      	b.n	12a32 <cosem_getIecLocalPortSetup+0xc>
    else if (e->index == 6)
   12a56:	2b06      	cmp	r3, #6
   12a58:	d103      	bne.n	12a62 <cosem_getIecLocalPortSetup+0x3c>
        ret = cosem_setOctetString(e->value.byteArr, &object->deviceAddress);
   12a5a:	3138      	adds	r1, #56	; 0x38
        ret = cosem_setOctetString(e->value.byteArr, &object->password5);
   12a5c:	6880      	ldr	r0, [r0, #8]
   12a5e:	f7fc bb35 	b.w	f0cc <cosem_setOctetString>
    else if (e->index == 7)
   12a62:	2b07      	cmp	r3, #7
   12a64:	d101      	bne.n	12a6a <cosem_getIecLocalPortSetup+0x44>
        ret = cosem_setOctetString(e->value.byteArr, &object->password1);
   12a66:	3110      	adds	r1, #16
   12a68:	e7f8      	b.n	12a5c <cosem_getIecLocalPortSetup+0x36>
    else if (e->index == 8)
   12a6a:	2b08      	cmp	r3, #8
   12a6c:	d101      	bne.n	12a72 <cosem_getIecLocalPortSetup+0x4c>
        ret = cosem_setOctetString(e->value.byteArr, &object->password2);
   12a6e:	311c      	adds	r1, #28
   12a70:	e7f4      	b.n	12a5c <cosem_getIecLocalPortSetup+0x36>
    else if (e->index == 9)
   12a72:	2b09      	cmp	r3, #9
   12a74:	d101      	bne.n	12a7a <cosem_getIecLocalPortSetup+0x54>
        ret = cosem_setOctetString(e->value.byteArr, &object->password5);
   12a76:	3128      	adds	r1, #40	; 0x28
   12a78:	e7f0      	b.n	12a5c <cosem_getIecLocalPortSetup+0x36>
}
   12a7a:	f44f 7081 	mov.w	r0, #258	; 0x102
   12a7e:	4770      	bx	lr

00012a80 <cosem_getIecTwistedPairSetup>:
{
   12a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   12a82:	7e03      	ldrb	r3, [r0, #24]
    gxIecTwistedPairSetup* object = (gxIecTwistedPairSetup*)e->target;
   12a84:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12a86:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   12a88:	2b02      	cmp	r3, #2
   12a8a:	d105      	bne.n	12a98 <cosem_getIecTwistedPairSetup+0x18>
        ret = cosem_setEnum(e->value.byteArr, object->mode);
   12a8c:	7c21      	ldrb	r1, [r4, #16]
        ret = cosem_setEnum(e->value.byteArr, object->speed);
   12a8e:	4628      	mov	r0, r5
   12a90:	f7fc fc01 	bl	f296 <cosem_setEnum>
}
   12a94:	b003      	add	sp, #12
   12a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 3)
   12a98:	2b03      	cmp	r3, #3
   12a9a:	d101      	bne.n	12aa0 <cosem_getIecTwistedPairSetup+0x20>
        ret = cosem_setEnum(e->value.byteArr, object->speed);
   12a9c:	7c61      	ldrb	r1, [r4, #17]
   12a9e:	e7f6      	b.n	12a8e <cosem_getIecTwistedPairSetup+0xe>
    else if (e->index == 4)
   12aa0:	2b04      	cmp	r3, #4
   12aa2:	d11e      	bne.n	12ae2 <cosem_getIecTwistedPairSetup+0x62>
        if ((ret = cosem_setArray(data, (unsigned short)object->primaryAddresses.size)) == 0)
   12aa4:	8b61      	ldrh	r1, [r4, #26]
   12aa6:	4628      	mov	r0, r5
   12aa8:	f7fc fbe7 	bl	f27a <cosem_setArray>
   12aac:	2800      	cmp	r0, #0
   12aae:	d1f1      	bne.n	12a94 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->primaryAddresses.size; ++pos)
   12ab0:	4606      	mov	r6, r0
                if ((ret = bb_getUInt8ByIndex(&object->primaryAddresses, pos, &ch)) != 0 ||
   12ab2:	f104 0714 	add.w	r7, r4, #20
   12ab6:	e00f      	b.n	12ad8 <cosem_getIecTwistedPairSetup+0x58>
   12ab8:	f10d 0207 	add.w	r2, sp, #7
   12abc:	4631      	mov	r1, r6
   12abe:	4638      	mov	r0, r7
   12ac0:	f7fb fe33 	bl	e72a <bb_getUInt8ByIndex>
   12ac4:	2800      	cmp	r0, #0
   12ac6:	d1e5      	bne.n	12a94 <cosem_getIecTwistedPairSetup+0x14>
                    (ret = cosem_setUInt8(data, ch)) != 0)
   12ac8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   12acc:	4628      	mov	r0, r5
   12ace:	f7fc fb6b 	bl	f1a8 <cosem_setUInt8>
                if ((ret = bb_getUInt8ByIndex(&object->primaryAddresses, pos, &ch)) != 0 ||
   12ad2:	2800      	cmp	r0, #0
   12ad4:	d1de      	bne.n	12a94 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->primaryAddresses.size; ++pos)
   12ad6:	3601      	adds	r6, #1
   12ad8:	8b63      	ldrh	r3, [r4, #26]
   12ada:	42b3      	cmp	r3, r6
   12adc:	d1ec      	bne.n	12ab8 <cosem_getIecTwistedPairSetup+0x38>
            for (pos = 0; pos != object->tabis.size; ++pos)
   12ade:	2000      	movs	r0, #0
   12ae0:	e7d8      	b.n	12a94 <cosem_getIecTwistedPairSetup+0x14>
    else if (e->index == 5)
   12ae2:	2b05      	cmp	r3, #5
   12ae4:	d11d      	bne.n	12b22 <cosem_getIecTwistedPairSetup+0xa2>
        if ((ret = cosem_setArray(data, (unsigned short)object->tabis.size)) == 0)
   12ae6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   12ae8:	4628      	mov	r0, r5
   12aea:	f7fc fbc6 	bl	f27a <cosem_setArray>
   12aee:	2800      	cmp	r0, #0
   12af0:	d1d0      	bne.n	12a94 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->tabis.size; ++pos)
   12af2:	4606      	mov	r6, r0
                if ((ret = bb_getUInt8ByIndex(&object->tabis, pos, &ch)) != 0 ||
   12af4:	f104 0720 	add.w	r7, r4, #32
   12af8:	e00f      	b.n	12b1a <cosem_getIecTwistedPairSetup+0x9a>
   12afa:	f10d 0207 	add.w	r2, sp, #7
   12afe:	4631      	mov	r1, r6
   12b00:	4638      	mov	r0, r7
   12b02:	f7fb fe12 	bl	e72a <bb_getUInt8ByIndex>
   12b06:	2800      	cmp	r0, #0
   12b08:	d1c4      	bne.n	12a94 <cosem_getIecTwistedPairSetup+0x14>
                    (ret = cosem_setInt8(data, (char)ch)) != 0)
   12b0a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   12b0e:	4628      	mov	r0, r5
   12b10:	f7fc fb74 	bl	f1fc <cosem_setInt8>
                if ((ret = bb_getUInt8ByIndex(&object->tabis, pos, &ch)) != 0 ||
   12b14:	2800      	cmp	r0, #0
   12b16:	d1bd      	bne.n	12a94 <cosem_getIecTwistedPairSetup+0x14>
            for (pos = 0; pos != object->tabis.size; ++pos)
   12b18:	3601      	adds	r6, #1
   12b1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   12b1c:	42b3      	cmp	r3, r6
   12b1e:	d1ec      	bne.n	12afa <cosem_getIecTwistedPairSetup+0x7a>
   12b20:	e7dd      	b.n	12ade <cosem_getIecTwistedPairSetup+0x5e>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   12b22:	f44f 7081 	mov.w	r0, #258	; 0x102
   12b26:	e7b5      	b.n	12a94 <cosem_getIecTwistedPairSetup+0x14>

00012b28 <cosem_getMbusSlavePortSetup>:
    if (e->index == 2)
   12b28:	7e02      	ldrb	r2, [r0, #24]
    gxMbusSlavePortSetup* object = (gxMbusSlavePortSetup*)e->target;
   12b2a:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   12b2c:	2a02      	cmp	r2, #2
   12b2e:	d103      	bne.n	12b38 <cosem_getMbusSlavePortSetup+0x10>
        ret = cosem_setEnum(e->value.byteArr, object->defaultBaud);
   12b30:	7c19      	ldrb	r1, [r3, #16]
        ret = cosem_setEnum(e->value.byteArr, object->availableBaud);
   12b32:	6880      	ldr	r0, [r0, #8]
   12b34:	f7fc bbaf 	b.w	f296 <cosem_setEnum>
    else if (e->index == 3)
   12b38:	2a03      	cmp	r2, #3
   12b3a:	d101      	bne.n	12b40 <cosem_getMbusSlavePortSetup+0x18>
        ret = cosem_setEnum(e->value.byteArr, object->availableBaud);
   12b3c:	7c59      	ldrb	r1, [r3, #17]
   12b3e:	e7f8      	b.n	12b32 <cosem_getMbusSlavePortSetup+0xa>
    else if (e->index == 4)
   12b40:	2a04      	cmp	r2, #4
   12b42:	d101      	bne.n	12b48 <cosem_getMbusSlavePortSetup+0x20>
        ret = cosem_setEnum(e->value.byteArr, object->addressState);
   12b44:	7c99      	ldrb	r1, [r3, #18]
   12b46:	e7f4      	b.n	12b32 <cosem_getMbusSlavePortSetup+0xa>
    else if (e->index == 5)
   12b48:	2a05      	cmp	r2, #5
   12b4a:	d103      	bne.n	12b54 <cosem_getMbusSlavePortSetup+0x2c>
        ret = cosem_setUInt8(e->value.byteArr, object->busAddress);
   12b4c:	7cd9      	ldrb	r1, [r3, #19]
   12b4e:	6880      	ldr	r0, [r0, #8]
   12b50:	f7fc bb2a 	b.w	f1a8 <cosem_setUInt8>
}
   12b54:	f44f 7081 	mov.w	r0, #258	; 0x102
   12b58:	4770      	bx	lr

00012b5a <cosem_getImageTransfer>:
{
   12b5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   12b5e:	7e03      	ldrb	r3, [r0, #24]
    gxImageTransfer* object = (gxImageTransfer*)e->target;
   12b60:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   12b62:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   12b64:	2b02      	cmp	r3, #2
{
   12b66:	4607      	mov	r7, r0
    if (e->index == 2)
   12b68:	d104      	bne.n	12b74 <cosem_getImageTransfer+0x1a>
        ret = cosem_setUInt32(e->value.byteArr, object->imageBlockSize);
   12b6a:	6931      	ldr	r1, [r6, #16]
        ret = cosem_setUInt32(e->value.byteArr, object->imageFirstNotTransferredBlockNumber);
   12b6c:	4628      	mov	r0, r5
   12b6e:	f7fc fb37 	bl	f1e0 <cosem_setUInt32>
   12b72:	e019      	b.n	12ba8 <cosem_getImageTransfer+0x4e>
    else if (e->index == 3)
   12b74:	2b03      	cmp	r3, #3
   12b76:	d119      	bne.n	12bac <cosem_getImageTransfer+0x52>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   12b78:	2104      	movs	r1, #4
   12b7a:	4628      	mov	r0, r5
   12b7c:	f7fb fc47 	bl	e40e <bb_setUInt8>
   12b80:	4604      	mov	r4, r0
   12b82:	2800      	cmp	r0, #0
   12b84:	d138      	bne.n	12bf8 <cosem_getImageTransfer+0x9e>
            (ret = hlp_setObjectCount(object->imageTransferredBlocksStatus.size, e->value.byteArr)) != 0)
   12b86:	68b9      	ldr	r1, [r7, #8]
   12b88:	8b70      	ldrh	r0, [r6, #26]
   12b8a:	f008 fd3c 	bl	1b606 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   12b8e:	4604      	mov	r4, r0
   12b90:	bb90      	cbnz	r0, 12bf8 <cosem_getImageTransfer+0x9e>
        if (object->imageTransferredBlocksStatus.size != 0)
   12b92:	8b70      	ldrh	r0, [r6, #26]
   12b94:	b380      	cbz	r0, 12bf8 <cosem_getImageTransfer+0x9e>
            ret = bb_set(e->value.byteArr, object->imageTransferredBlocksStatus.data,
   12b96:	68bc      	ldr	r4, [r7, #8]
   12b98:	6975      	ldr	r5, [r6, #20]
   12b9a:	f7ee fcf3 	bl	1584 <ba_getByteCount>
   12b9e:	4629      	mov	r1, r5
   12ba0:	4602      	mov	r2, r0
   12ba2:	4620      	mov	r0, r4
   12ba4:	f7fb fd19 	bl	e5da <bb_set>
                        (ret = bb_set(data, ai->signature.data, ai->signature.size)) != 0)
   12ba8:	4604      	mov	r4, r0
   12baa:	e025      	b.n	12bf8 <cosem_getImageTransfer+0x9e>
    else if (e->index == 4)
   12bac:	2b04      	cmp	r3, #4
   12bae:	d101      	bne.n	12bb4 <cosem_getImageTransfer+0x5a>
        ret = cosem_setUInt32(e->value.byteArr, object->imageFirstNotTransferredBlockNumber);
   12bb0:	69f1      	ldr	r1, [r6, #28]
   12bb2:	e7db      	b.n	12b6c <cosem_getImageTransfer+0x12>
    else if (e->index == 5)
   12bb4:	2b05      	cmp	r3, #5
   12bb6:	d105      	bne.n	12bc4 <cosem_getImageTransfer+0x6a>
        ret = cosem_setBoolean(e->value.byteArr, object->imageTransferEnabled);
   12bb8:	f896 1020 	ldrb.w	r1, [r6, #32]
   12bbc:	4628      	mov	r0, r5
   12bbe:	f7fc fb78 	bl	f2b2 <cosem_setBoolean>
   12bc2:	e7f1      	b.n	12ba8 <cosem_getImageTransfer+0x4e>
    else if (e->index == 6)
   12bc4:	2b06      	cmp	r3, #6
   12bc6:	d105      	bne.n	12bd4 <cosem_getImageTransfer+0x7a>
        ret = cosem_setEnum(e->value.byteArr, object->imageTransferStatus);
   12bc8:	f896 1021 	ldrb.w	r1, [r6, #33]	; 0x21
   12bcc:	4628      	mov	r0, r5
   12bce:	f7fc fb62 	bl	f296 <cosem_setEnum>
   12bd2:	e7e9      	b.n	12ba8 <cosem_getImageTransfer+0x4e>
    else if (e->index == 7)
   12bd4:	2b07      	cmp	r3, #7
   12bd6:	d166      	bne.n	12ca6 <cosem_getImageTransfer+0x14c>
        if (object->imageTransferStatus != DLMS_IMAGE_TRANSFER_STATUS_VERIFICATION_SUCCESSFUL)
   12bd8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   12bdc:	2b03      	cmp	r3, #3
   12bde:	d004      	beq.n	12bea <cosem_getImageTransfer+0x90>
            if ((ret = cosem_setArray(data, 0)) != 0)
   12be0:	2100      	movs	r1, #0
   12be2:	4628      	mov	r0, r5
   12be4:	f7fc fb49 	bl	f27a <cosem_setArray>
   12be8:	e7de      	b.n	12ba8 <cosem_getImageTransfer+0x4e>
            if ((ret = cosem_setArray(data, object->imageActivateInfo.size)) == 0)
   12bea:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   12bec:	4628      	mov	r0, r5
   12bee:	f7fc fb44 	bl	f27a <cosem_setArray>
   12bf2:	4604      	mov	r4, r0
   12bf4:	2800      	cmp	r0, #0
   12bf6:	d052      	beq.n	12c9e <cosem_getImageTransfer+0x144>
}
   12bf8:	4620      	mov	r0, r4
   12bfa:	b002      	add	sp, #8
   12bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   12c00:	aa01      	add	r2, sp, #4
   12c02:	4640      	mov	r0, r8
   12c04:	f7fe ffc9 	bl	11b9a <arr_getByIndex>
   12c08:	2800      	cmp	r0, #0
   12c0a:	d1cd      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12c0c:	2102      	movs	r1, #2
   12c0e:	4628      	mov	r0, r5
   12c10:	f7fb fbfd 	bl	e40e <bb_setUInt8>
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   12c14:	2800      	cmp	r0, #0
   12c16:	d1c7      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, 3)) != 0 ||
   12c18:	2103      	movs	r1, #3
   12c1a:	4628      	mov	r0, r5
   12c1c:	f7fb fbf7 	bl	e40e <bb_setUInt8>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12c20:	2800      	cmp	r0, #0
   12c22:	d1c1      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   12c24:	2106      	movs	r1, #6
   12c26:	4628      	mov	r0, r5
   12c28:	f7fb fbf1 	bl	e40e <bb_setUInt8>
                        (ret = bb_setUInt8(data, 3)) != 0 ||
   12c2c:	2800      	cmp	r0, #0
   12c2e:	d1bb      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt32(data, ai->size)) != 0 ||
   12c30:	9b01      	ldr	r3, [sp, #4]
   12c32:	4628      	mov	r0, r5
   12c34:	6819      	ldr	r1, [r3, #0]
   12c36:	f7fb fc2e 	bl	e496 <bb_setUInt32>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT32)) != 0 ||
   12c3a:	2800      	cmp	r0, #0
   12c3c:	d1b4      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12c3e:	2109      	movs	r1, #9
   12c40:	4628      	mov	r0, r5
   12c42:	f7fb fbe4 	bl	e40e <bb_setUInt8>
                        (ret = bb_setUInt32(data, ai->size)) != 0 ||
   12c46:	2800      	cmp	r0, #0
   12c48:	d1ae      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
   12c4a:	9b01      	ldr	r3, [sp, #4]
   12c4c:	4629      	mov	r1, r5
   12c4e:	8958      	ldrh	r0, [r3, #10]
   12c50:	f008 fcd9 	bl	1b606 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12c54:	2800      	cmp	r0, #0
   12c56:	d1a7      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
   12c58:	9b01      	ldr	r3, [sp, #4]
   12c5a:	4628      	mov	r0, r5
   12c5c:	895a      	ldrh	r2, [r3, #10]
   12c5e:	6859      	ldr	r1, [r3, #4]
   12c60:	f7fb fcbb 	bl	e5da <bb_set>
                        (ret = hlp_setObjectCount(ai->identification.size, data)) != 0 ||
   12c64:	2800      	cmp	r0, #0
   12c66:	d19f      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12c68:	2109      	movs	r1, #9
   12c6a:	4628      	mov	r0, r5
   12c6c:	f7fb fbcf 	bl	e40e <bb_setUInt8>
                        (ret = bb_set(data, ai->identification.data, ai->identification.size)) != 0 ||
   12c70:	2800      	cmp	r0, #0
   12c72:	d199      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
   12c74:	9b01      	ldr	r3, [sp, #4]
   12c76:	4629      	mov	r1, r5
   12c78:	8ad8      	ldrh	r0, [r3, #22]
   12c7a:	f008 fcc4 	bl	1b606 <hlp_setObjectCount>
                        (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12c7e:	2800      	cmp	r0, #0
   12c80:	d192      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                        (ret = bb_set(data, ai->signature.data, ai->signature.size)) != 0)
   12c82:	9b01      	ldr	r3, [sp, #4]
   12c84:	4628      	mov	r0, r5
   12c86:	8ada      	ldrh	r2, [r3, #22]
   12c88:	6919      	ldr	r1, [r3, #16]
   12c8a:	f7fb fca6 	bl	e5da <bb_set>
   12c8e:	3701      	adds	r7, #1
                        (ret = hlp_setObjectCount(ai->signature.size, data)) != 0 ||
   12c90:	2800      	cmp	r0, #0
   12c92:	d189      	bne.n	12ba8 <cosem_getImageTransfer+0x4e>
                for (pos = 0; pos != object->imageActivateInfo.size; ++pos)
   12c94:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   12c96:	b2b9      	uxth	r1, r7
   12c98:	428b      	cmp	r3, r1
   12c9a:	d1b1      	bne.n	12c00 <cosem_getImageTransfer+0xa6>
   12c9c:	e7ac      	b.n	12bf8 <cosem_getImageTransfer+0x9e>
   12c9e:	4607      	mov	r7, r0
                    if ((ret = arr_getByIndex(&object->imageActivateInfo, pos, (void**)&ai)) != 0 ||
   12ca0:	f106 0824 	add.w	r8, r6, #36	; 0x24
   12ca4:	e7f6      	b.n	12c94 <cosem_getImageTransfer+0x13a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   12ca6:	f44f 7481 	mov.w	r4, #258	; 0x102
   12caa:	e7a5      	b.n	12bf8 <cosem_getImageTransfer+0x9e>

00012cac <getColumns>:
{
   12cac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12cb0:	460f      	mov	r7, r1
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   12cb2:	88c9      	ldrh	r1, [r1, #6]
{
   12cb4:	461d      	mov	r5, r3
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   12cb6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   12cba:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   12cbe:	3102      	adds	r1, #2
{
   12cc0:	4681      	mov	r9, r0
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   12cc2:	b289      	uxth	r1, r1
   12cc4:	4610      	mov	r0, r2
{
   12cc6:	4614      	mov	r4, r2
    if ((ret = bb_capacity(ba, (list->size * 19) + 2)) != 0)
   12cc8:	f7fb fb3e 	bl	e348 <bb_capacity>
   12ccc:	4606      	mov	r6, r0
   12cce:	2800      	cmp	r0, #0
   12cd0:	d175      	bne.n	12dbe <getColumns+0x112>
    if (!e->transaction)
   12cd2:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
   12cd6:	2b00      	cmp	r3, #0
   12cd8:	d05f      	beq.n	12d9a <getColumns+0xee>
    for (pos = e->transactionStartIndex; pos != list->size; ++pos)
   12cda:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
   12cde:	88fb      	ldrh	r3, [r7, #6]
   12ce0:	4598      	cmp	r8, r3
   12ce2:	d06c      	beq.n	12dbe <getColumns+0x112>
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   12ce4:	aa01      	add	r2, sp, #4
   12ce6:	fa1f f188 	uxth.w	r1, r8
   12cea:	4638      	mov	r0, r7
        pduSize = (uint16_t)ba->size;
   12cec:	f8b4 a006 	ldrh.w	sl, [r4, #6]
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   12cf0:	f7fe ff53 	bl	11b9a <arr_getByIndex>
   12cf4:	2800      	cmp	r0, #0
   12cf6:	d166      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12cf8:	2102      	movs	r1, #2
   12cfa:	4620      	mov	r0, r4
   12cfc:	f7fb fb87 	bl	e40e <bb_setUInt8>
        if ((ret = arr_getByIndex(list, (uint16_t)pos, (void**)&it)) != 0 ||
   12d00:	2800      	cmp	r0, #0
   12d02:	d160      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, 4)) != 0 ||
   12d04:	2104      	movs	r1, #4
   12d06:	4620      	mov	r0, r4
   12d08:	f7fb fb81 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   12d0c:	2800      	cmp	r0, #0
   12d0e:	d15a      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12d10:	2112      	movs	r1, #18
   12d12:	4620      	mov	r0, r4
   12d14:	f7fb fb7b 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(ba, 4)) != 0 ||
   12d18:	2800      	cmp	r0, #0
   12d1a:	d154      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
   12d1c:	9b01      	ldr	r3, [sp, #4]
   12d1e:	681b      	ldr	r3, [r3, #0]
   12d20:	4620      	mov	r0, r4
   12d22:	8819      	ldrh	r1, [r3, #0]
   12d24:	f7fb fb95 	bl	e452 <bb_setUInt16>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12d28:	2800      	cmp	r0, #0
   12d2a:	d14c      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12d2c:	2109      	movs	r1, #9
   12d2e:	4620      	mov	r0, r4
   12d30:	f7fb fb6d 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt16(ba, ((gxObject*)it->key)->objectType)) != 0 ||
   12d34:	2800      	cmp	r0, #0
   12d36:	d146      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, 6)) != 0 ||
   12d38:	2106      	movs	r1, #6
   12d3a:	4620      	mov	r0, r4
   12d3c:	f7fb fb67 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   12d40:	2800      	cmp	r0, #0
   12d42:	d140      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   12d44:	9b01      	ldr	r3, [sp, #4]
   12d46:	6819      	ldr	r1, [r3, #0]
   12d48:	2206      	movs	r2, #6
   12d4a:	4411      	add	r1, r2
   12d4c:	4620      	mov	r0, r4
   12d4e:	f7fb fc44 	bl	e5da <bb_set>
            (ret = bb_setUInt8(ba, 6)) != 0 ||
   12d52:	2800      	cmp	r0, #0
   12d54:	d137      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
   12d56:	210f      	movs	r1, #15
   12d58:	4620      	mov	r0, r4
   12d5a:	f7fb fb58 	bl	e40e <bb_setUInt8>
            (ret = bb_set(ba, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   12d5e:	2800      	cmp	r0, #0
   12d60:	d131      	bne.n	12dc6 <getColumns+0x11a>
            (ret = bb_setInt8(ba, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   12d62:	9b01      	ldr	r3, [sp, #4]
   12d64:	685b      	ldr	r3, [r3, #4]
   12d66:	4620      	mov	r0, r4
   12d68:	7819      	ldrb	r1, [r3, #0]
   12d6a:	f7fb fc2d 	bl	e5c8 <bb_setInt8>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_INT8)) != 0 ||
   12d6e:	bb50      	cbnz	r0, 12dc6 <getColumns+0x11a>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12d70:	2112      	movs	r1, #18
   12d72:	4620      	mov	r0, r4
   12d74:	f7fb fb4b 	bl	e40e <bb_setUInt8>
            (ret = bb_setInt8(ba, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   12d78:	bb28      	cbnz	r0, 12dc6 <getColumns+0x11a>
            (ret = bb_setUInt16(ba, ((gxTarget*)it->value)->dataIndex)) != 0)
   12d7a:	9b01      	ldr	r3, [sp, #4]
   12d7c:	685b      	ldr	r3, [r3, #4]
   12d7e:	4620      	mov	r0, r4
   12d80:	8859      	ldrh	r1, [r3, #2]
   12d82:	f7fb fb66 	bl	e452 <bb_setUInt16>
            (ret = bb_setUInt8(ba, DLMS_DATA_TYPE_UINT16)) != 0 ||
   12d86:	b9f0      	cbnz	r0, 12dc6 <getColumns+0x11a>
        if (settings->server)
   12d88:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
   12d8c:	b973      	cbnz	r3, 12dac <getColumns+0x100>
        ++e->transactionStartIndex;
   12d8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   12d90:	3301      	adds	r3, #1
   12d92:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = e->transactionStartIndex; pos != list->size; ++pos)
   12d94:	f108 0801 	add.w	r8, r8, #1
   12d98:	e7a1      	b.n	12cde <getColumns+0x32>
   12d9a:	88f9      	ldrh	r1, [r7, #6]
        e->transactionEndIndex = list->size;
   12d9c:	63e9      	str	r1, [r5, #60]	; 0x3c
        if ((ret = cosem_setArray(ba, list->size)) != 0)
   12d9e:	4620      	mov	r0, r4
   12da0:	f7fc fa6b 	bl	f27a <cosem_setArray>
   12da4:	2800      	cmp	r0, #0
   12da6:	d098      	beq.n	12cda <getColumns+0x2e>
   12da8:	4606      	mov	r6, r0
   12daa:	e008      	b.n	12dbe <getColumns+0x112>
            if (dlms_isPduFull(settings, ba, NULL))
   12dac:	4602      	mov	r2, r0
   12dae:	4621      	mov	r1, r4
   12db0:	4648      	mov	r0, r9
   12db2:	f7fe fdca 	bl	1194a <dlms_isPduFull>
   12db6:	2800      	cmp	r0, #0
   12db8:	d0e9      	beq.n	12d8e <getColumns+0xe2>
        ba->size = pduSize;
   12dba:	f8a4 a006 	strh.w	sl, [r4, #6]
}
   12dbe:	4630      	mov	r0, r6
   12dc0:	b002      	add	sp, #8
   12dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   12dc6:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   12dca:	d1ed      	bne.n	12da8 <getColumns+0xfc>
   12dcc:	e7f5      	b.n	12dba <getColumns+0x10e>

00012dce <cosem_getRow>:
{
   12dce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12dd2:	4616      	mov	r6, r2
    if ((ret = arr_getByIndex(table, (uint16_t)index, (void**)&row)) != 0)
   12dd4:	b289      	uxth	r1, r1
   12dd6:	aa01      	add	r2, sp, #4
{
   12dd8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   12ddc:	461f      	mov	r7, r3
    if ((ret = arr_getByIndex(table, (uint16_t)index, (void**)&row)) != 0)
   12dde:	f7fe fedc 	bl	11b9a <arr_getByIndex>
   12de2:	4604      	mov	r4, r0
   12de4:	b998      	cbnz	r0, 12e0e <cosem_getRow+0x40>
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0)
   12de6:	2102      	movs	r1, #2
   12de8:	4640      	mov	r0, r8
   12dea:	f7fb fb10 	bl	e40e <bb_setUInt8>
   12dee:	4604      	mov	r4, r0
   12df0:	b968      	cbnz	r0, 12e0e <cosem_getRow+0x40>
    if (columns->size != 0)
   12df2:	88f8      	ldrh	r0, [r7, #6]
        if ((ret = hlp_setObjectCount(columns->size, data)) != 0)
   12df4:	4641      	mov	r1, r8
    if (columns->size != 0)
   12df6:	b170      	cbz	r0, 12e16 <cosem_getRow+0x48>
        if ((ret = hlp_setObjectCount(captureObjects->size, data)) != 0)
   12df8:	f008 fc05 	bl	1b606 <hlp_setObjectCount>
   12dfc:	b108      	cbz	r0, 12e02 <cosem_getRow+0x34>
   12dfe:	4604      	mov	r4, r0
   12e00:	e005      	b.n	12e0e <cosem_getRow+0x40>
{
   12e02:	f04f 0900 	mov.w	r9, #0
   12e06:	464d      	mov	r5, r9
    for (pos = 0; pos != captureObjects->size; ++pos)
   12e08:	88f3      	ldrh	r3, [r6, #6]
   12e0a:	42ab      	cmp	r3, r5
   12e0c:	d105      	bne.n	12e1a <cosem_getRow+0x4c>
}
   12e0e:	4620      	mov	r0, r4
   12e10:	b003      	add	sp, #12
   12e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((ret = hlp_setObjectCount(captureObjects->size, data)) != 0)
   12e16:	88f0      	ldrh	r0, [r6, #6]
   12e18:	e7ee      	b.n	12df8 <cosem_getRow+0x2a>
        if (columns->size != 0)
   12e1a:	88fb      	ldrh	r3, [r7, #6]
   12e1c:	b14b      	cbz	r3, 12e32 <cosem_getRow+0x64>
            if (captureObjects->data[pos] != columns->data[colPos])
   12e1e:	6832      	ldr	r2, [r6, #0]
   12e20:	683b      	ldr	r3, [r7, #0]
   12e22:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   12e26:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   12e2a:	429a      	cmp	r2, r3
   12e2c:	d112      	bne.n	12e54 <cosem_getRow+0x86>
            ++colPos;
   12e2e:	f109 0901 	add.w	r9, r9, #1
        if ((ret = va_getByIndex(row, pos, &col)) != 0)
   12e32:	9801      	ldr	r0, [sp, #4]
   12e34:	466a      	mov	r2, sp
   12e36:	4629      	mov	r1, r5
   12e38:	f009 f91b 	bl	1c072 <va_getByIndex>
   12e3c:	2800      	cmp	r0, #0
   12e3e:	d1de      	bne.n	12dfe <cosem_getRow+0x30>
        if (col->vt == DLMS_DATA_TYPE_DATETIME)
   12e40:	9800      	ldr	r0, [sp, #0]
   12e42:	7801      	ldrb	r1, [r0, #0]
   12e44:	2919      	cmp	r1, #25
   12e46:	d107      	bne.n	12e58 <cosem_getRow+0x8a>
            if ((ret = var_getBytes2(col, DLMS_DATA_TYPE_OCTET_STRING, data)) != 0)
   12e48:	4642      	mov	r2, r8
   12e4a:	2109      	movs	r1, #9
   12e4c:	f009 fa4e 	bl	1c2ec <var_getBytes2>
            if ((ret = dlms_setData(data, col->vt, col)) != 0)
   12e50:	2800      	cmp	r0, #0
   12e52:	d1d4      	bne.n	12dfe <cosem_getRow+0x30>
    for (pos = 0; pos != captureObjects->size; ++pos)
   12e54:	3501      	adds	r5, #1
   12e56:	e7d7      	b.n	12e08 <cosem_getRow+0x3a>
            if ((ret = dlms_setData(data, col->vt, col)) != 0)
   12e58:	4602      	mov	r2, r0
   12e5a:	4640      	mov	r0, r8
   12e5c:	f7fc fc02 	bl	f664 <dlms_setData>
   12e60:	e7f6      	b.n	12e50 <cosem_getRow+0x82>

00012e62 <profileGeneric_getData>:
{
   12e62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e66:	4698      	mov	r8, r3
   12e68:	b087      	sub	sp, #28
    if (!e->transaction)
   12e6a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
{
   12e6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   12e70:	4681      	mov	r9, r0
   12e72:	460d      	mov	r5, r1
   12e74:	4617      	mov	r7, r2
    if (!e->transaction)
   12e76:	b1f3      	cbz	r3, 12eb6 <profileGeneric_getData+0x54>
    arr_init(&columns);
   12e78:	a803      	add	r0, sp, #12
   12e7a:	f7fe fe22 	bl	11ac2 <arr_init>
    if (e->selector == 2)
   12e7e:	7e69      	ldrb	r1, [r5, #25]
   12e80:	2902      	cmp	r1, #2
   12e82:	d107      	bne.n	12e94 <profileGeneric_getData+0x32>
        if ((ret = cosem_getColumns(captureObjects, e->selector, &e->parameters, &columns)) != 0)
   12e84:	ab03      	add	r3, sp, #12
   12e86:	f105 0220 	add.w	r2, r5, #32
   12e8a:	4640      	mov	r0, r8
   12e8c:	f7fc fa91 	bl	f3b2 <cosem_getColumns>
   12e90:	4604      	mov	r4, r0
   12e92:	bb00      	cbnz	r0, 12ed6 <profileGeneric_getData+0x74>
{
   12e94:	f04f 0b00 	mov.w	fp, #0
   12e98:	46da      	mov	sl, fp
    for (pos = 0; pos != table->size; ++pos)
   12e9a:	88fb      	ldrh	r3, [r7, #6]
   12e9c:	455b      	cmp	r3, fp
   12e9e:	d122      	bne.n	12ee6 <profileGeneric_getData+0x84>
   12ea0:	2400      	movs	r4, #0
    arr_empty(&columns);
   12ea2:	a803      	add	r0, sp, #12
   12ea4:	f7fe fe6c 	bl	11b80 <arr_empty>
    if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   12ea8:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
        data->size = pduSize;
   12eac:	bf04      	itt	eq
   12eae:	f8a6 a006 	strheq.w	sl, [r6, #6]
        ret = 0;
   12eb2:	2400      	moveq	r4, #0
   12eb4:	e00f      	b.n	12ed6 <profileGeneric_getData+0x74>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0)
   12eb6:	2101      	movs	r1, #1
   12eb8:	4630      	mov	r0, r6
   12eba:	f7fb faa8 	bl	e40e <bb_setUInt8>
   12ebe:	4604      	mov	r4, r0
   12ec0:	b948      	cbnz	r0, 12ed6 <profileGeneric_getData+0x74>
        if (e->transactionEndIndex != 0)
   12ec2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   12ec4:	b15b      	cbz	r3, 12ede <profileGeneric_getData+0x7c>
            if ((ret = hlp_setObjectCount(e->transactionEndIndex - e->transactionStartIndex, data)) != 0)
   12ec6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   12ec8:	4631      	mov	r1, r6
   12eca:	1a18      	subs	r0, r3, r0
            if ((ret = hlp_setObjectCount(e->transactionEndIndex, data)) != 0)
   12ecc:	f008 fb9b 	bl	1b606 <hlp_setObjectCount>
   12ed0:	4604      	mov	r4, r0
   12ed2:	2800      	cmp	r0, #0
   12ed4:	d0d0      	beq.n	12e78 <profileGeneric_getData+0x16>
}
   12ed6:	4620      	mov	r0, r4
   12ed8:	b007      	add	sp, #28
   12eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            e->transactionEndIndex = table->size;
   12ede:	88f8      	ldrh	r0, [r7, #6]
   12ee0:	63e8      	str	r0, [r5, #60]	; 0x3c
            if ((ret = hlp_setObjectCount(e->transactionEndIndex, data)) != 0)
   12ee2:	4631      	mov	r1, r6
   12ee4:	e7f2      	b.n	12ecc <profileGeneric_getData+0x6a>
        pduSize = (uint16_t)data->size;
   12ee6:	f8b6 a006 	ldrh.w	sl, [r6, #6]
        if ((ret = cosem_getRow(table, pos, captureObjects, &columns, data)) != 0)
   12eea:	9600      	str	r6, [sp, #0]
   12eec:	ab03      	add	r3, sp, #12
   12eee:	4642      	mov	r2, r8
   12ef0:	4659      	mov	r1, fp
   12ef2:	4638      	mov	r0, r7
   12ef4:	f7ff ff6b 	bl	12dce <cosem_getRow>
   12ef8:	4604      	mov	r4, r0
   12efa:	2800      	cmp	r0, #0
   12efc:	d1d1      	bne.n	12ea2 <profileGeneric_getData+0x40>
        if (data->size > (uint16_t)(settings->maxPduSize - PDU_MAX_HEADER_SIZE))
   12efe:	f8b9 3052 	ldrh.w	r3, [r9, #82]	; 0x52
   12f02:	88f2      	ldrh	r2, [r6, #6]
   12f04:	3b46      	subs	r3, #70	; 0x46
   12f06:	b29b      	uxth	r3, r3
   12f08:	429a      	cmp	r2, r3
   12f0a:	d805      	bhi.n	12f18 <profileGeneric_getData+0xb6>
        ++e->transactionStartIndex;
   12f0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   12f0e:	3301      	adds	r3, #1
   12f10:	63ab      	str	r3, [r5, #56]	; 0x38
    for (pos = 0; pos != table->size; ++pos)
   12f12:	f10b 0b01 	add.w	fp, fp, #1
   12f16:	e7c0      	b.n	12e9a <profileGeneric_getData+0x38>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   12f18:	f44f 7482 	mov.w	r4, #260	; 0x104
   12f1c:	e7c1      	b.n	12ea2 <profileGeneric_getData+0x40>

00012f1e <getProfileGenericData>:
{
   12f1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f22:	461e      	mov	r6, r3
   12f24:	b097      	sub	sp, #92	; 0x5c
    if (e->selector == 0 || e->parameters.vt == DLMS_DATA_TYPE_NONE || e->transactionEndIndex != 0)
   12f26:	7e53      	ldrb	r3, [r2, #25]
{
   12f28:	9003      	str	r0, [sp, #12]
   12f2a:	460f      	mov	r7, r1
   12f2c:	4615      	mov	r5, r2
   12f2e:	f101 0a1c 	add.w	sl, r1, #28
    if (e->selector == 0 || e->parameters.vt == DLMS_DATA_TYPE_NONE || e->transactionEndIndex != 0)
   12f32:	b13b      	cbz	r3, 12f44 <getProfileGenericData+0x26>
   12f34:	f892 3020 	ldrb.w	r3, [r2, #32]
   12f38:	b123      	cbz	r3, 12f44 <getProfileGenericData+0x26>
   12f3a:	f8d2 903c 	ldr.w	r9, [r2, #60]	; 0x3c
   12f3e:	f1b9 0f00 	cmp.w	r9, #0
   12f42:	d009      	beq.n	12f58 <getProfileGenericData+0x3a>
        return profileGeneric_getData(settings, e, &object->buffer, &object->captureObjects, reply);
   12f44:	9803      	ldr	r0, [sp, #12]
   12f46:	9600      	str	r6, [sp, #0]
   12f48:	4653      	mov	r3, sl
   12f4a:	f107 0210 	add.w	r2, r7, #16
   12f4e:	4629      	mov	r1, r5
   12f50:	f7ff ff87 	bl	12e62 <profileGeneric_getData>
   12f54:	4680      	mov	r8, r0
   12f56:	e089      	b.n	1306c <getProfileGenericData+0x14e>
    arr_init(&captureObjects);
   12f58:	a809      	add	r0, sp, #36	; 0x24
   12f5a:	f7fe fdb2 	bl	11ac2 <arr_init>
    if ((ret = cosem_getColumns(&object->captureObjects, e->selector, &e->parameters, &captureObjects)) == 0)
   12f5e:	7e69      	ldrb	r1, [r5, #25]
   12f60:	ab09      	add	r3, sp, #36	; 0x24
   12f62:	f105 0220 	add.w	r2, r5, #32
   12f66:	4650      	mov	r0, sl
   12f68:	f7fc fa23 	bl	f3b2 <cosem_getColumns>
   12f6c:	4604      	mov	r4, r0
   12f6e:	2800      	cmp	r0, #0
   12f70:	d168      	bne.n	13044 <getProfileGenericData+0x126>
        arr_init(&items);
   12f72:	a806      	add	r0, sp, #24
   12f74:	f7fe fda5 	bl	11ac2 <arr_init>
        if (e->selector == 1) //Read by range
   12f78:	f895 8019 	ldrb.w	r8, [r5, #25]
   12f7c:	f1b8 0f01 	cmp.w	r8, #1
   12f80:	f040 80b9 	bne.w	130f6 <getProfileGenericData+0x1d8>
            var_init(&value);
   12f84:	a812      	add	r0, sp, #72	; 0x48
   12f86:	f008 fe9a 	bl	1bcbe <var_init>
            if ((ret = va_getByIndex(e->parameters.Arr, 1, &it)) == 0)
   12f8a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   12f8c:	aa05      	add	r2, sp, #20
   12f8e:	4641      	mov	r1, r8
   12f90:	f009 f86f 	bl	1c072 <va_getByIndex>
   12f94:	4604      	mov	r4, r0
   12f96:	2800      	cmp	r0, #0
   12f98:	d154      	bne.n	13044 <getProfileGenericData+0x126>
                if (it->vt == DLMS_DATA_TYPE_UINT32)
   12f9a:	9b05      	ldr	r3, [sp, #20]
   12f9c:	6898      	ldr	r0, [r3, #8]
   12f9e:	781b      	ldrb	r3, [r3, #0]
   12fa0:	2b06      	cmp	r3, #6
   12fa2:	d157      	bne.n	13054 <getProfileGenericData+0x136>
                    time_initUnix(&start, it->ulVal);
   12fa4:	4601      	mov	r1, r0
   12fa6:	a80c      	add	r0, sp, #48	; 0x30
   12fa8:	f7fc faab 	bl	f502 <time_initUnix>
                if ((ret = va_getByIndex(e->parameters.Arr, 2, &it)) != 0)
   12fac:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   12fae:	aa05      	add	r2, sp, #20
   12fb0:	2102      	movs	r1, #2
   12fb2:	f009 f85e 	bl	1c072 <va_getByIndex>
   12fb6:	2800      	cmp	r0, #0
   12fb8:	d1cc      	bne.n	12f54 <getProfileGenericData+0x36>
                if (it->vt == DLMS_DATA_TYPE_UINT32)
   12fba:	9b05      	ldr	r3, [sp, #20]
   12fbc:	6898      	ldr	r0, [r3, #8]
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	2b06      	cmp	r3, #6
   12fc2:	d160      	bne.n	13086 <getProfileGenericData+0x168>
                    time_initUnix(&end, it->ulVal);
   12fc4:	4601      	mov	r1, r0
   12fc6:	a80f      	add	r0, sp, #60	; 0x3c
   12fc8:	f7fc fa9b 	bl	f502 <time_initUnix>
{
   12fcc:	f04f 0800 	mov.w	r8, #0
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   12fd0:	f107 0b10 	add.w	fp, r7, #16
                for (pos = 0; pos != object->buffer.size; ++pos)
   12fd4:	8afb      	ldrh	r3, [r7, #22]
   12fd6:	fa1f f189 	uxth.w	r1, r9
   12fda:	428b      	cmp	r3, r1
   12fdc:	d067      	beq.n	130ae <getProfileGenericData+0x190>
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   12fde:	aa04      	add	r2, sp, #16
   12fe0:	4658      	mov	r0, fp
   12fe2:	f7fe fdda 	bl	11b9a <arr_getByIndex>
   12fe6:	4604      	mov	r4, r0
   12fe8:	bb60      	cbnz	r0, 13044 <getProfileGenericData+0x126>
                        (ret = va_getByIndex(row, 0, &it)) != 0)
   12fea:	4601      	mov	r1, r0
   12fec:	aa05      	add	r2, sp, #20
   12fee:	9804      	ldr	r0, [sp, #16]
   12ff0:	f009 f83f 	bl	1c072 <va_getByIndex>
                    if ((ret = arr_getByIndex(&object->buffer, pos, (void**)&row)) != 0 ||
   12ff4:	4604      	mov	r4, r0
   12ff6:	bb28      	cbnz	r0, 13044 <getProfileGenericData+0x126>
                    t = it->dateTime;
   12ff8:	9b05      	ldr	r3, [sp, #20]
   12ffa:	689c      	ldr	r4, [r3, #8]
                    if (time_compare(&start, t) != -1 && time_compare(t, &end) != -1)
   12ffc:	a80c      	add	r0, sp, #48	; 0x30
   12ffe:	4621      	mov	r1, r4
   13000:	f7fc faf0 	bl	f5e4 <time_compare>
   13004:	3001      	adds	r0, #1
   13006:	d058      	beq.n	130ba <getProfileGenericData+0x19c>
   13008:	a90f      	add	r1, sp, #60	; 0x3c
   1300a:	4620      	mov	r0, r4
   1300c:	f7fc faea 	bl	f5e4 <time_compare>
   13010:	3001      	adds	r0, #1
   13012:	d052      	beq.n	130ba <getProfileGenericData+0x19c>
                        if (reply->size < settings->maxPduSize)
   13014:	9a03      	ldr	r2, [sp, #12]
   13016:	88f1      	ldrh	r1, [r6, #6]
   13018:	f8b2 2052 	ldrh.w	r2, [r2, #82]	; 0x52
   1301c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
                        ++cnt;
   1301e:	f108 0801 	add.w	r8, r8, #1
                        if (reply->size < settings->maxPduSize)
   13022:	4291      	cmp	r1, r2
                        ++cnt;
   13024:	fa1f f888 	uxth.w	r8, r8
                        if (reply->size < settings->maxPduSize)
   13028:	d23d      	bcs.n	130a6 <getProfileGenericData+0x188>
                            ++e->transactionEndIndex;
   1302a:	3301      	adds	r3, #1
   1302c:	63eb      	str	r3, [r5, #60]	; 0x3c
                            if ((ret = cosem_getRow(&object->buffer, pos, &captureObjects, &object->captureObjects, reply)) != 0)
   1302e:	9600      	str	r6, [sp, #0]
   13030:	4653      	mov	r3, sl
   13032:	aa09      	add	r2, sp, #36	; 0x24
   13034:	fa1f f189 	uxth.w	r1, r9
   13038:	4658      	mov	r0, fp
   1303a:	f7ff fec8 	bl	12dce <cosem_getRow>
   1303e:	4604      	mov	r4, r0
   13040:	2800      	cmp	r0, #0
   13042:	d03a      	beq.n	130ba <getProfileGenericData+0x19c>
    arr_empty(&captureObjects);
   13044:	a809      	add	r0, sp, #36	; 0x24
   13046:	f7fe fd9b 	bl	11b80 <arr_empty>
    arr_empty(&items);
   1304a:	a806      	add	r0, sp, #24
   1304c:	f7fe fd98 	bl	11b80 <arr_empty>
    return ret;
   13050:	46a0      	mov	r8, r4
   13052:	e00b      	b.n	1306c <getProfileGenericData+0x14e>
                    if ((ret = dlms_changeType(it->byteArr, DLMS_DATA_TYPE_DATETIME, &value)) != 0)
   13054:	aa12      	add	r2, sp, #72	; 0x48
   13056:	2119      	movs	r1, #25
   13058:	f7fe fa0e 	bl	11478 <dlms_changeType>
   1305c:	4680      	mov	r8, r0
   1305e:	b148      	cbz	r0, 13074 <getProfileGenericData+0x156>
                        arr_empty(&items);
   13060:	a806      	add	r0, sp, #24
   13062:	f7fe fd8d 	bl	11b80 <arr_empty>
                        var_clear(&value);
   13066:	a812      	add	r0, sp, #72	; 0x48
   13068:	f008 ff85 	bl	1bf76 <var_clear>
}
   1306c:	4640      	mov	r0, r8
   1306e:	b017      	add	sp, #92	; 0x5c
   13070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    start = *value.dateTime;
   13074:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13076:	ca07      	ldmia	r2, {r0, r1, r2}
   13078:	ab0c      	add	r3, sp, #48	; 0x30
   1307a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    var_clear(&value);
   1307e:	a812      	add	r0, sp, #72	; 0x48
   13080:	f008 ff79 	bl	1bf76 <var_clear>
   13084:	e792      	b.n	12fac <getProfileGenericData+0x8e>
                    if ((ret = dlms_changeType(it->byteArr, DLMS_DATA_TYPE_DATETIME, &value)) != 0)
   13086:	aa12      	add	r2, sp, #72	; 0x48
   13088:	2119      	movs	r1, #25
   1308a:	f7fe f9f5 	bl	11478 <dlms_changeType>
   1308e:	4680      	mov	r8, r0
   13090:	2800      	cmp	r0, #0
   13092:	d1e5      	bne.n	13060 <getProfileGenericData+0x142>
                    end = *value.dateTime;
   13094:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13096:	ca07      	ldmia	r2, {r0, r1, r2}
   13098:	ab0f      	add	r3, sp, #60	; 0x3c
   1309a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    var_clear(&value);
   1309e:	a812      	add	r0, sp, #72	; 0x48
   130a0:	f008 ff69 	bl	1bf76 <var_clear>
   130a4:	e792      	b.n	12fcc <getProfileGenericData+0xae>
                        else if (e->transactionEndIndex != 0)
   130a6:	b143      	cbz	r3, 130ba <getProfileGenericData+0x19c>
                            ++e->transactionStartIndex;
   130a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   130aa:	3301      	adds	r3, #1
   130ac:	63ab      	str	r3, [r5, #56]	; 0x38
                if (ret == 0 && bb_size(e->value.byteArr) == 0)
   130ae:	68a8      	ldr	r0, [r5, #8]
   130b0:	f7fb f941 	bl	e336 <bb_size>
   130b4:	b120      	cbz	r0, 130c0 <getProfileGenericData+0x1a2>
{
   130b6:	2400      	movs	r4, #0
   130b8:	e7c4      	b.n	13044 <getProfileGenericData+0x126>
                for (pos = 0; pos != object->buffer.size; ++pos)
   130ba:	f109 0901 	add.w	r9, r9, #1
   130be:	e789      	b.n	12fd4 <getProfileGenericData+0xb6>
                    if ((ret = cosem_setArray(e->value.byteArr, cnt)) != 0 ||
   130c0:	4641      	mov	r1, r8
   130c2:	68a8      	ldr	r0, [r5, #8]
   130c4:	f7fc f8d9 	bl	f27a <cosem_setArray>
   130c8:	4680      	mov	r8, r0
   130ca:	2800      	cmp	r0, #0
   130cc:	d1ce      	bne.n	1306c <getProfileGenericData+0x14e>
                        (ret = bb_set(e->value.byteArr, reply->data, reply->size)) != 0)
   130ce:	88f2      	ldrh	r2, [r6, #6]
   130d0:	6831      	ldr	r1, [r6, #0]
   130d2:	68a8      	ldr	r0, [r5, #8]
   130d4:	f7fb fa81 	bl	e5da <bb_set>
                    if ((ret = cosem_setArray(e->value.byteArr, cnt)) != 0 ||
   130d8:	4680      	mov	r8, r0
   130da:	2800      	cmp	r0, #0
   130dc:	d1c6      	bne.n	1306c <getProfileGenericData+0x14e>
                    if ((ret = bb_set(reply, e->value.byteArr->data, e->value.byteArr->size)) != 0)
   130de:	68ab      	ldr	r3, [r5, #8]
                    reply->position = reply->size = 0;
   130e0:	80f0      	strh	r0, [r6, #6]
   130e2:	8130      	strh	r0, [r6, #8]
                    if ((ret = bb_set(reply, e->value.byteArr->data, e->value.byteArr->size)) != 0)
   130e4:	88da      	ldrh	r2, [r3, #6]
   130e6:	6819      	ldr	r1, [r3, #0]
   130e8:	4630      	mov	r0, r6
   130ea:	f7fb fa76 	bl	e5da <bb_set>
   130ee:	4680      	mov	r8, r0
   130f0:	2800      	cmp	r0, #0
   130f2:	d0e0      	beq.n	130b6 <getProfileGenericData+0x198>
   130f4:	e7ba      	b.n	1306c <getProfileGenericData+0x14e>
        else if (e->selector == 2) //Read by entry.
   130f6:	f1b8 0f02 	cmp.w	r8, #2
   130fa:	d153      	bne.n	131a4 <getProfileGenericData+0x286>
            if ((ret = va_getByIndex(e->parameters.Arr, 0, &it)) == 0)
   130fc:	4621      	mov	r1, r4
   130fe:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   13100:	aa05      	add	r2, sp, #20
   13102:	f008 ffb6 	bl	1c072 <va_getByIndex>
   13106:	4604      	mov	r4, r0
   13108:	2800      	cmp	r0, #0
   1310a:	d19b      	bne.n	13044 <getProfileGenericData+0x126>
                e->transactionStartIndex = (uint16_t)var_toInteger(it);
   1310c:	9805      	ldr	r0, [sp, #20]
   1310e:	f009 f92a 	bl	1c366 <var_toInteger>
   13112:	b280      	uxth	r0, r0
                if (e->transactionStartIndex == 0)
   13114:	2800      	cmp	r0, #0
   13116:	d031      	beq.n	1317c <getProfileGenericData+0x25e>
                e->transactionStartIndex = (uint16_t)var_toInteger(it);
   13118:	63a8      	str	r0, [r5, #56]	; 0x38
                if ((ret = va_getByIndex(e->parameters.Arr, 1, &it)) == 0)
   1311a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1311c:	aa05      	add	r2, sp, #20
   1311e:	2101      	movs	r1, #1
   13120:	f008 ffa7 	bl	1c072 <va_getByIndex>
   13124:	4604      	mov	r4, r0
   13126:	2800      	cmp	r0, #0
   13128:	d18c      	bne.n	13044 <getProfileGenericData+0x126>
                    e->transactionEndIndex = (uint16_t)var_toInteger(it);
   1312a:	9805      	ldr	r0, [sp, #20]
   1312c:	f009 f91b 	bl	1c366 <var_toInteger>
   13130:	8afb      	ldrh	r3, [r7, #22]
                    if (e->transactionStartIndex + e->transactionEndIndex > (uint32_t)(object->buffer.size + 1))
   13132:	6baa      	ldr	r2, [r5, #56]	; 0x38
   13134:	b280      	uxth	r0, r0
                        e->transactionEndIndex = object->buffer.size;
   13136:	2800      	cmp	r0, #0
   13138:	bf08      	it	eq
   1313a:	4618      	moveq	r0, r3
                    if (e->transactionStartIndex + e->transactionEndIndex > (uint32_t)(object->buffer.size + 1))
   1313c:	eb02 0c00 	add.w	ip, r2, r0
   13140:	1c59      	adds	r1, r3, #1
                        e->transactionEndIndex = object->buffer.size;
   13142:	458c      	cmp	ip, r1
   13144:	bf88      	it	hi
   13146:	4618      	movhi	r0, r3
   13148:	63e8      	str	r0, [r5, #60]	; 0x3c
                    if (e->transactionStartIndex == 0)
   1314a:	b1d2      	cbz	r2, 13182 <getProfileGenericData+0x264>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   1314c:	3710      	adds	r7, #16
                    for (; e->transactionStartIndex < e->transactionEndIndex; ++e->transactionStartIndex)
   1314e:	e9d5 130e 	ldrd	r1, r3, [r5, #56]	; 0x38
   13152:	4299      	cmp	r1, r3
   13154:	f4bf af76 	bcs.w	13044 <getProfileGenericData+0x126>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   13158:	aa04      	add	r2, sp, #16
   1315a:	b289      	uxth	r1, r1
   1315c:	4638      	mov	r0, r7
   1315e:	f7fe fd1c 	bl	11b9a <arr_getByIndex>
   13162:	bb10      	cbnz	r0, 131aa <getProfileGenericData+0x28c>
                            (ret = cosem_getRow(&object->buffer, e->transactionStartIndex, &captureObjects, &object->captureObjects, reply)) != 0)
   13164:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   13166:	9600      	str	r6, [sp, #0]
   13168:	4653      	mov	r3, sl
   1316a:	aa09      	add	r2, sp, #36	; 0x24
   1316c:	4638      	mov	r0, r7
   1316e:	f7ff fe2e 	bl	12dce <cosem_getRow>
                        if ((ret = arr_getByIndex(&object->buffer, (uint16_t)e->transactionStartIndex, (void**)&row)) != 0 ||
   13172:	b9d0      	cbnz	r0, 131aa <getProfileGenericData+0x28c>
                    for (; e->transactionStartIndex < e->transactionEndIndex; ++e->transactionStartIndex)
   13174:	6bab      	ldr	r3, [r5, #56]	; 0x38
   13176:	3301      	adds	r3, #1
   13178:	63ab      	str	r3, [r5, #56]	; 0x38
   1317a:	e7e8      	b.n	1314e <getProfileGenericData+0x230>
                    e->transactionStartIndex = 1;
   1317c:	2301      	movs	r3, #1
   1317e:	63ab      	str	r3, [r5, #56]	; 0x38
   13180:	e7cb      	b.n	1311a <getProfileGenericData+0x1fc>
                        e->transactionEndIndex = (uint16_t)object->buffer.size;
   13182:	63eb      	str	r3, [r5, #60]	; 0x3c
                        if ((ret = bb_setUInt8(reply, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   13184:	2101      	movs	r1, #1
   13186:	4630      	mov	r0, r6
   13188:	f7fb f941 	bl	e40e <bb_setUInt8>
   1318c:	4680      	mov	r8, r0
   1318e:	2800      	cmp	r0, #0
   13190:	f47f af6c 	bne.w	1306c <getProfileGenericData+0x14e>
                            (ret = hlp_setObjectCount(e->transactionEndIndex, reply)) != 0)
   13194:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   13196:	4631      	mov	r1, r6
   13198:	f008 fa35 	bl	1b606 <hlp_setObjectCount>
                        if ((ret = bb_setUInt8(reply, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   1319c:	4680      	mov	r8, r0
   1319e:	2800      	cmp	r0, #0
   131a0:	d0d4      	beq.n	1314c <getProfileGenericData+0x22e>
   131a2:	e763      	b.n	1306c <getProfileGenericData+0x14e>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   131a4:	f44f 7481 	mov.w	r4, #258	; 0x102
   131a8:	e74c      	b.n	13044 <getProfileGenericData+0x126>
                            (ret = cosem_getRow(&object->buffer, e->transactionStartIndex, &captureObjects, &object->captureObjects, reply)) != 0)
   131aa:	4604      	mov	r4, r0
   131ac:	e74a      	b.n	13044 <getProfileGenericData+0x126>

000131ae <cosem_getProfileGeneric>:
{
   131ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char empty[6] = { 0 };
   131b0:	2300      	movs	r3, #0
   131b2:	9300      	str	r3, [sp, #0]
   131b4:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (e->index == 2)
   131b8:	7e0b      	ldrb	r3, [r1, #24]
    gxProfileGeneric* object = (gxProfileGeneric*)e->target;
   131ba:	694c      	ldr	r4, [r1, #20]
    if (e->index == 2)
   131bc:	2b02      	cmp	r3, #2
{
   131be:	460a      	mov	r2, r1
    if (e->index == 2)
   131c0:	d105      	bne.n	131ce <cosem_getProfileGeneric+0x20>
        ret = getProfileGenericData(settings, object, e, e->value.byteArr);
   131c2:	688b      	ldr	r3, [r1, #8]
   131c4:	4621      	mov	r1, r4
   131c6:	f7ff feaa 	bl	12f1e <getProfileGenericData>
}
   131ca:	b003      	add	sp, #12
   131cc:	bd30      	pop	{r4, r5, pc}
    else if (e->index == 3)
   131ce:	2b03      	cmp	r3, #3
   131d0:	d106      	bne.n	131e0 <cosem_getProfileGeneric+0x32>
        ret = getColumns(settings, &object->captureObjects, e->value.byteArr, e);
   131d2:	688a      	ldr	r2, [r1, #8]
   131d4:	460b      	mov	r3, r1
   131d6:	f104 011c 	add.w	r1, r4, #28
   131da:	f7ff fd67 	bl	12cac <getColumns>
   131de:	e7f4      	b.n	131ca <cosem_getProfileGeneric+0x1c>
    else if (e->index == 4)
   131e0:	2b04      	cmp	r3, #4
   131e2:	d104      	bne.n	131ee <cosem_getProfileGeneric+0x40>
        ret = cosem_setUInt32(e->value.byteArr, object->capturePeriod);
   131e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
        ret = cosem_setUInt32(e->value.byteArr, object->profileEntries);
   131e6:	6890      	ldr	r0, [r2, #8]
   131e8:	f7fb fffa 	bl	f1e0 <cosem_setUInt32>
   131ec:	e7ed      	b.n	131ca <cosem_getProfileGeneric+0x1c>
    else if (e->index == 5)
   131ee:	2b05      	cmp	r3, #5
   131f0:	d105      	bne.n	131fe <cosem_getProfileGeneric+0x50>
        ret = cosem_setEnum(e->value.byteArr, object->sortMethod);
   131f2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   131f6:	6890      	ldr	r0, [r2, #8]
   131f8:	f7fc f84d 	bl	f296 <cosem_setEnum>
   131fc:	e7e5      	b.n	131ca <cosem_getProfileGeneric+0x1c>
    else  if (e->index == 6)
   131fe:	2b06      	cmp	r3, #6
   13200:	d17d      	bne.n	132fe <cosem_getProfileGeneric+0x150>
        gxByteBuffer* data = e->value.byteArr;
   13202:	688d      	ldr	r5, [r1, #8]
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13204:	2102      	movs	r1, #2
   13206:	4628      	mov	r0, r5
   13208:	f7fb f901 	bl	e40e <bb_setUInt8>
   1320c:	2800      	cmp	r0, #0
   1320e:	d1dc      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
            (ret = bb_setUInt8(data, 4)) != 0)
   13210:	2104      	movs	r1, #4
   13212:	4628      	mov	r0, r5
   13214:	f7fb f8fb 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13218:	2800      	cmp	r0, #0
   1321a:	d1d6      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
        if (object->sortObject == NULL)
   1321c:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1321e:	2112      	movs	r1, #18
   13220:	4628      	mov	r0, r5
        if (object->sortObject == NULL)
   13222:	2b00      	cmp	r3, #0
   13224:	d133      	bne.n	1328e <cosem_getProfileGeneric+0xe0>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   13226:	f7fb f8f2 	bl	e40e <bb_setUInt8>
   1322a:	2800      	cmp	r0, #0
   1322c:	d1cd      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, 0)) != 0 ||
   1322e:	4601      	mov	r1, r0
   13230:	4628      	mov	r0, r5
   13232:	f7fb f90e 	bl	e452 <bb_setUInt16>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   13236:	2800      	cmp	r0, #0
   13238:	d1c7      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1323a:	2109      	movs	r1, #9
   1323c:	4628      	mov	r0, r5
   1323e:	f7fb f8e6 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt16(data, 0)) != 0 ||
   13242:	2800      	cmp	r0, #0
   13244:	d1c1      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   13246:	2106      	movs	r1, #6
   13248:	4628      	mov	r0, r5
   1324a:	f7fb f8e0 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1324e:	2800      	cmp	r0, #0
   13250:	d1bb      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_set(data, empty, 6)) != 0 ||
   13252:	2206      	movs	r2, #6
   13254:	4669      	mov	r1, sp
   13256:	4628      	mov	r0, r5
   13258:	f7fb f9bf 	bl	e5da <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   1325c:	2800      	cmp	r0, #0
   1325e:	d1b4      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   13260:	210f      	movs	r1, #15
   13262:	4628      	mov	r0, r5
   13264:	f7fb f8d3 	bl	e40e <bb_setUInt8>
                (ret = bb_set(data, empty, 6)) != 0 ||
   13268:	2800      	cmp	r0, #0
   1326a:	d1ae      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 0)) != 0 ||
   1326c:	4601      	mov	r1, r0
   1326e:	4628      	mov	r0, r5
   13270:	f7fb f8cd 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   13274:	2800      	cmp	r0, #0
   13276:	d1a8      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   13278:	2112      	movs	r1, #18
   1327a:	4628      	mov	r0, r5
   1327c:	f7fb f8c7 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, 0)) != 0 ||
   13280:	2800      	cmp	r0, #0
   13282:	d1a2      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, 0)) != 0)
   13284:	4601      	mov	r1, r0
                (ret = bb_setUInt16(data, object->sortObjectDataIndex)) != 0)
   13286:	4628      	mov	r0, r5
   13288:	f7fb f8e3 	bl	e452 <bb_setUInt16>
   1328c:	e79d      	b.n	131ca <cosem_getProfileGeneric+0x1c>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1328e:	f7fb f8be 	bl	e40e <bb_setUInt8>
   13292:	2800      	cmp	r0, #0
   13294:	d199      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
   13296:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13298:	4628      	mov	r0, r5
   1329a:	8819      	ldrh	r1, [r3, #0]
   1329c:	f7fb f8d9 	bl	e452 <bb_setUInt16>
            if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   132a0:	2800      	cmp	r0, #0
   132a2:	d192      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   132a4:	2109      	movs	r1, #9
   132a6:	4628      	mov	r0, r5
   132a8:	f7fb f8b1 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt16(data, object->sortObject->objectType)) != 0 ||
   132ac:	2800      	cmp	r0, #0
   132ae:	d18c      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   132b0:	2106      	movs	r1, #6
   132b2:	4628      	mov	r0, r5
   132b4:	f7fb f8ab 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   132b8:	2800      	cmp	r0, #0
   132ba:	d186      	bne.n	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
   132bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   132be:	2206      	movs	r2, #6
   132c0:	4411      	add	r1, r2
   132c2:	4628      	mov	r0, r5
   132c4:	f7fb f989 	bl	e5da <bb_set>
                (ret = bb_setUInt8(data, 6)) != 0 ||
   132c8:	2800      	cmp	r0, #0
   132ca:	f47f af7e 	bne.w	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   132ce:	210f      	movs	r1, #15
   132d0:	4628      	mov	r0, r5
   132d2:	f7fb f89c 	bl	e40e <bb_setUInt8>
                (ret = bb_set(data, object->sortObject->logicalName, 6)) != 0 ||
   132d6:	2800      	cmp	r0, #0
   132d8:	f47f af77 	bne.w	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
   132dc:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
   132e0:	4628      	mov	r0, r5
   132e2:	f7fb f894 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   132e6:	2800      	cmp	r0, #0
   132e8:	f47f af6f 	bne.w	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   132ec:	2112      	movs	r1, #18
   132ee:	4628      	mov	r0, r5
   132f0:	f7fb f88d 	bl	e40e <bb_setUInt8>
                (ret = bb_setUInt8(data, object->sortObjectAttributeIndex)) != 0 ||
   132f4:	2800      	cmp	r0, #0
   132f6:	f47f af68 	bne.w	131ca <cosem_getProfileGeneric+0x1c>
                (ret = bb_setUInt16(data, object->sortObjectDataIndex)) != 0)
   132fa:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   132fc:	e7c3      	b.n	13286 <cosem_getProfileGeneric+0xd8>
    else if (e->index == 7)
   132fe:	2b07      	cmp	r3, #7
   13300:	d101      	bne.n	13306 <cosem_getProfileGeneric+0x158>
        ret = cosem_setUInt32(e->value.byteArr, object->entriesInUse);
   13302:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   13304:	e76f      	b.n	131e6 <cosem_getProfileGeneric+0x38>
    else if (e->index == 8)
   13306:	2b08      	cmp	r3, #8
   13308:	d101      	bne.n	1330e <cosem_getProfileGeneric+0x160>
        ret = cosem_setUInt32(e->value.byteArr, object->profileEntries);
   1330a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1330c:	e76b      	b.n	131e6 <cosem_getProfileGeneric+0x38>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1330e:	f44f 7081 	mov.w	r0, #258	; 0x102
   13312:	e75a      	b.n	131ca <cosem_getProfileGeneric+0x1c>

00013314 <cosem_getDisconnectControl>:
    if (e->index == 2)
   13314:	7e02      	ldrb	r2, [r0, #24]
    gxDisconnectControl* object = (gxDisconnectControl*)e->target;
   13316:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   13318:	2a02      	cmp	r2, #2
   1331a:	d103      	bne.n	13324 <cosem_getDisconnectControl+0x10>
        ret = cosem_setBoolean(e->value.byteArr, object->outputState);
   1331c:	7c19      	ldrb	r1, [r3, #16]
   1331e:	6880      	ldr	r0, [r0, #8]
   13320:	f7fb bfc7 	b.w	f2b2 <cosem_setBoolean>
    else if (e->index == 3)
   13324:	2a03      	cmp	r2, #3
   13326:	d103      	bne.n	13330 <cosem_getDisconnectControl+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->controlState);
   13328:	7c59      	ldrb	r1, [r3, #17]
        ret = cosem_setEnum(e->value.byteArr, object->controlMode);
   1332a:	6880      	ldr	r0, [r0, #8]
   1332c:	f7fb bfb3 	b.w	f296 <cosem_setEnum>
    else if (e->index == 4)
   13330:	2a04      	cmp	r2, #4
   13332:	d101      	bne.n	13338 <cosem_getDisconnectControl+0x24>
        ret = cosem_setEnum(e->value.byteArr, object->controlMode);
   13334:	7c99      	ldrb	r1, [r3, #18]
   13336:	e7f8      	b.n	1332a <cosem_getDisconnectControl+0x16>
}
   13338:	f44f 7081 	mov.w	r0, #258	; 0x102
   1333c:	4770      	bx	lr

0001333e <cosem_add>:
{
   1333e:	b570      	push	{r4, r5, r6, lr}
   13340:	460e      	mov	r6, r1
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13342:	2109      	movs	r1, #9
{
   13344:	4604      	mov	r4, r0
   13346:	4615      	mov	r5, r2
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13348:	f7fb f861 	bl	e40e <bb_setUInt8>
   1334c:	b958      	cbnz	r0, 13366 <cosem_add+0x28>
        (ret = hlp_setObjectCount(len, data)) != 0 ||
   1334e:	4621      	mov	r1, r4
   13350:	4628      	mov	r0, r5
   13352:	f008 f958 	bl	1b606 <hlp_setObjectCount>
    if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13356:	b930      	cbnz	r0, 13366 <cosem_add+0x28>
        (ret = bb_set(data, (unsigned char*)value, len)) != 0)
   13358:	462a      	mov	r2, r5
   1335a:	4631      	mov	r1, r6
   1335c:	4620      	mov	r0, r4
}
   1335e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (ret = bb_set(data, (unsigned char*)value, len)) != 0)
   13362:	f7fb b93a 	b.w	e5da <bb_set>
}
   13366:	bd70      	pop	{r4, r5, r6, pc}

00013368 <cosem_getRegisterActivation>:
{
   13368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (e->index == 2)
   1336c:	7e0b      	ldrb	r3, [r1, #24]
    gxRegisterActivation* object = (gxRegisterActivation*)e->target;
   1336e:	694e      	ldr	r6, [r1, #20]
    gxByteBuffer* data = e->value.byteArr;
   13370:	688d      	ldr	r5, [r1, #8]
    if (e->index == 2)
   13372:	2b02      	cmp	r3, #2
{
   13374:	4681      	mov	r9, r0
   13376:	460f      	mov	r7, r1
    if (e->index == 2)
   13378:	d16e      	bne.n	13458 <cosem_getRegisterActivation+0xf0>
        if (!e->transaction)
   1337a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
   1337e:	2b00      	cmp	r3, #0
   13380:	d04c      	beq.n	1341c <cosem_getRegisterActivation+0xb4>
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   13382:	f8b7 8038 	ldrh.w	r8, [r7, #56]	; 0x38
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   13386:	f106 0a10 	add.w	sl, r6, #16
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   1338a:	8af3      	ldrh	r3, [r6, #22]
   1338c:	4543      	cmp	r3, r8
   1338e:	d05d      	beq.n	1344c <cosem_getRegisterActivation+0xe4>
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   13390:	aa01      	add	r2, sp, #4
   13392:	4641      	mov	r1, r8
   13394:	4650      	mov	r0, sl
                pduSize = (uint16_t)data->size;
   13396:	f8b5 b006 	ldrh.w	fp, [r5, #6]
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   1339a:	f008 fc00 	bl	1bb9e <oa_getByIndex>
   1339e:	4604      	mov	r4, r0
   133a0:	2800      	cmp	r0, #0
   133a2:	d155      	bne.n	13450 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   133a4:	2102      	movs	r1, #2
   133a6:	4628      	mov	r0, r5
   133a8:	f7fb f831 	bl	e40e <bb_setUInt8>
                if ((ret = oa_getByIndex(&object->registerAssignment, pos, &od)) != 0 ||
   133ac:	4604      	mov	r4, r0
   133ae:	2800      	cmp	r0, #0
   133b0:	d14e      	bne.n	13450 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   133b2:	2102      	movs	r1, #2
   133b4:	4628      	mov	r0, r5
   133b6:	f7fb f82a 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   133ba:	4604      	mov	r4, r0
   133bc:	2800      	cmp	r0, #0
   133be:	d147      	bne.n	13450 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   133c0:	2112      	movs	r1, #18
   133c2:	4628      	mov	r0, r5
   133c4:	f7fb f823 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   133c8:	4604      	mov	r4, r0
   133ca:	2800      	cmp	r0, #0
   133cc:	d140      	bne.n	13450 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt16(data, od->objectType)) != 0 ||
   133ce:	9b01      	ldr	r3, [sp, #4]
   133d0:	4628      	mov	r0, r5
   133d2:	8819      	ldrh	r1, [r3, #0]
   133d4:	f7fb f83d 	bl	e452 <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   133d8:	4604      	mov	r4, r0
   133da:	2800      	cmp	r0, #0
   133dc:	d138      	bne.n	13450 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   133de:	2109      	movs	r1, #9
   133e0:	4628      	mov	r0, r5
   133e2:	f7fb f814 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt16(data, od->objectType)) != 0 ||
   133e6:	4604      	mov	r4, r0
   133e8:	bb90      	cbnz	r0, 13450 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   133ea:	2106      	movs	r1, #6
   133ec:	4628      	mov	r0, r5
   133ee:	f7fb f80e 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   133f2:	4604      	mov	r4, r0
   133f4:	bb60      	cbnz	r0, 13450 <cosem_getRegisterActivation+0xe8>
                    (ret = bb_set(data, od->logicalName, 6)) != 0)
   133f6:	9901      	ldr	r1, [sp, #4]
   133f8:	2206      	movs	r2, #6
   133fa:	4411      	add	r1, r2
   133fc:	4628      	mov	r0, r5
   133fe:	f7fb f8ec 	bl	e5da <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   13402:	4604      	mov	r4, r0
   13404:	bb20      	cbnz	r0, 13450 <cosem_getRegisterActivation+0xe8>
                if (settings->server)
   13406:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
   1340a:	b99b      	cbnz	r3, 13434 <cosem_getRegisterActivation+0xcc>
                ++e->transactionStartIndex;
   1340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   1340e:	f108 0801 	add.w	r8, r8, #1
                ++e->transactionStartIndex;
   13412:	3301      	adds	r3, #1
   13414:	63bb      	str	r3, [r7, #56]	; 0x38
            for (pos = (uint16_t)e->transactionStartIndex; pos != object->registerAssignment.size; ++pos)
   13416:	fa1f f888 	uxth.w	r8, r8
   1341a:	e7b6      	b.n	1338a <cosem_getRegisterActivation+0x22>
   1341c:	8af1      	ldrh	r1, [r6, #22]
            e->transactionEndIndex = object->registerAssignment.size;
   1341e:	63f9      	str	r1, [r7, #60]	; 0x3c
            ret = cosem_setArray(data, object->registerAssignment.size);
   13420:	4628      	mov	r0, r5
   13422:	f7fb ff2a 	bl	f27a <cosem_setArray>
        if (ret == 0)
   13426:	4604      	mov	r4, r0
   13428:	2800      	cmp	r0, #0
   1342a:	d0aa      	beq.n	13382 <cosem_getRegisterActivation+0x1a>
}
   1342c:	4620      	mov	r0, r4
   1342e:	b003      	add	sp, #12
   13430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if (!e->skipMaxPduSize && dlms_isPduFull(settings, data, NULL))
   13434:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
   13438:	2a00      	cmp	r2, #0
   1343a:	d1e7      	bne.n	1340c <cosem_getRegisterActivation+0xa4>
   1343c:	4629      	mov	r1, r5
   1343e:	4648      	mov	r0, r9
   13440:	f7fe fa83 	bl	1194a <dlms_isPduFull>
   13444:	2800      	cmp	r0, #0
   13446:	d0e1      	beq.n	1340c <cosem_getRegisterActivation+0xa4>
                data->size = pduSize;
   13448:	f8a5 b006 	strh.w	fp, [r5, #6]
                ret = 0;
   1344c:	2400      	movs	r4, #0
   1344e:	e7ed      	b.n	1342c <cosem_getRegisterActivation+0xc4>
            if (ret == DLMS_ERROR_CODE_OUTOFMEMORY)
   13450:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
   13454:	d1ea      	bne.n	1342c <cosem_getRegisterActivation+0xc4>
   13456:	e7f7      	b.n	13448 <cosem_getRegisterActivation+0xe0>
    else if (e->index == 3)
   13458:	2b03      	cmp	r3, #3
   1345a:	d146      	bne.n	134ea <cosem_getRegisterActivation+0x182>
        if ((ret = cosem_setArray(data, object->maskList.size)) == 0)
   1345c:	8bf1      	ldrh	r1, [r6, #30]
   1345e:	4628      	mov	r0, r5
   13460:	f7fb ff0b 	bl	f27a <cosem_setArray>
   13464:	4604      	mov	r4, r0
   13466:	2800      	cmp	r0, #0
   13468:	d1e0      	bne.n	1342c <cosem_getRegisterActivation+0xc4>
   1346a:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   1346c:	f106 0918 	add.w	r9, r6, #24
            for (pos = 0; pos != object->maskList.size; ++pos)
   13470:	8bf3      	ldrh	r3, [r6, #30]
   13472:	fa1f f188 	uxth.w	r1, r8
   13476:	428b      	cmp	r3, r1
   13478:	d0d8      	beq.n	1342c <cosem_getRegisterActivation+0xc4>
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   1347a:	aa01      	add	r2, sp, #4
   1347c:	4648      	mov	r0, r9
   1347e:	f7fe fb8c 	bl	11b9a <arr_getByIndex>
   13482:	2800      	cmp	r0, #0
   13484:	d14b      	bne.n	1351e <cosem_getRegisterActivation+0x1b6>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   13486:	2102      	movs	r1, #2
   13488:	4628      	mov	r0, r5
   1348a:	f7fb fee8 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->maskList, pos, (void**)&a)) != 0 ||
   1348e:	2800      	cmp	r0, #0
   13490:	d145      	bne.n	1351e <cosem_getRegisterActivation+0x1b6>
                    (ret = cosem_setOctetString(data, ((gxByteBuffer*)a->key))) != 0 ||
   13492:	9b01      	ldr	r3, [sp, #4]
   13494:	4628      	mov	r0, r5
   13496:	6819      	ldr	r1, [r3, #0]
   13498:	f7fb fe18 	bl	f0cc <cosem_setOctetString>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   1349c:	2800      	cmp	r0, #0
   1349e:	d13e      	bne.n	1351e <cosem_getRegisterActivation+0x1b6>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   134a0:	2101      	movs	r1, #1
   134a2:	4628      	mov	r0, r5
   134a4:	f7fa ffb3 	bl	e40e <bb_setUInt8>
                    (ret = cosem_setOctetString(data, ((gxByteBuffer*)a->key))) != 0 ||
   134a8:	2800      	cmp	r0, #0
   134aa:	d138      	bne.n	1351e <cosem_getRegisterActivation+0x1b6>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size((gxByteBuffer*)a->value))) != 0)
   134ac:	9b01      	ldr	r3, [sp, #4]
   134ae:	6858      	ldr	r0, [r3, #4]
   134b0:	f7fa ff41 	bl	e336 <bb_size>
   134b4:	b2c1      	uxtb	r1, r0
   134b6:	4628      	mov	r0, r5
   134b8:	f7fa ffa9 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_ARRAY)) != 0 ||
   134bc:	4607      	mov	r7, r0
   134be:	b990      	cbnz	r0, 134e6 <cosem_getRegisterActivation+0x17e>
                for (pos2 = 0; pos2 != bb_size((gxByteBuffer*)a->value); ++pos2)
   134c0:	9b01      	ldr	r3, [sp, #4]
   134c2:	6858      	ldr	r0, [r3, #4]
   134c4:	f7fa ff37 	bl	e336 <bb_size>
   134c8:	42b8      	cmp	r0, r7
   134ca:	d102      	bne.n	134d2 <cosem_getRegisterActivation+0x16a>
            for (pos = 0; pos != object->maskList.size; ++pos)
   134cc:	f108 0801 	add.w	r8, r8, #1
   134d0:	e7ce      	b.n	13470 <cosem_getRegisterActivation+0x108>
                    if ((ret = cosem_setUInt8(data, ((gxByteBuffer*)a->value)->data[pos2])) != 0)
   134d2:	9b01      	ldr	r3, [sp, #4]
   134d4:	685b      	ldr	r3, [r3, #4]
   134d6:	681b      	ldr	r3, [r3, #0]
   134d8:	4628      	mov	r0, r5
   134da:	5dd9      	ldrb	r1, [r3, r7]
   134dc:	f7fb fe64 	bl	f1a8 <cosem_setUInt8>
   134e0:	b9e8      	cbnz	r0, 1351e <cosem_getRegisterActivation+0x1b6>
                for (pos2 = 0; pos2 != bb_size((gxByteBuffer*)a->value); ++pos2)
   134e2:	3701      	adds	r7, #1
   134e4:	e7ec      	b.n	134c0 <cosem_getRegisterActivation+0x158>
                    (ret = bb_setUInt8(data, (unsigned char)bb_size((gxByteBuffer*)a->value))) != 0)
   134e6:	4604      	mov	r4, r0
   134e8:	e7a0      	b.n	1342c <cosem_getRegisterActivation+0xc4>
    else if (e->index == 4)
   134ea:	2b04      	cmp	r3, #4
   134ec:	d119      	bne.n	13522 <cosem_getRegisterActivation+0x1ba>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   134ee:	2109      	movs	r1, #9
   134f0:	4628      	mov	r0, r5
   134f2:	f7fa ff8c 	bl	e40e <bb_setUInt8>
   134f6:	4604      	mov	r4, r0
   134f8:	2800      	cmp	r0, #0
   134fa:	d197      	bne.n	1342c <cosem_getRegisterActivation+0xc4>
            (ret = hlp_setObjectCount(object->activeMask.size, data)) != 0 ||
   134fc:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   134fe:	4629      	mov	r1, r5
   13500:	f008 f881 	bl	1b606 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13504:	4604      	mov	r4, r0
   13506:	2800      	cmp	r0, #0
   13508:	d190      	bne.n	1342c <cosem_getRegisterActivation+0xc4>
            (ret = bb_set2(data, &object->activeMask, 0, bb_size(&object->activeMask))) != 0)
   1350a:	3624      	adds	r6, #36	; 0x24
   1350c:	4630      	mov	r0, r6
   1350e:	f7fa ff12 	bl	e336 <bb_size>
   13512:	4622      	mov	r2, r4
   13514:	4603      	mov	r3, r0
   13516:	4631      	mov	r1, r6
   13518:	4628      	mov	r0, r5
   1351a:	f7fb f88d 	bl	e638 <bb_set2>
   1351e:	4604      	mov	r4, r0
   13520:	e784      	b.n	1342c <cosem_getRegisterActivation+0xc4>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13522:	f44f 7481 	mov.w	r4, #258	; 0x102
   13526:	e781      	b.n	1342c <cosem_getRegisterActivation+0xc4>

00013528 <cosem_getRegisterMonitor>:
{
   13528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if (e->index == 2)
   1352c:	7e07      	ldrb	r7, [r0, #24]
    gxRegisterMonitor* object = (gxRegisterMonitor*)e->target;
   1352e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13530:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   13532:	2f02      	cmp	r7, #2
   13534:	d122      	bne.n	1357c <cosem_getRegisterMonitor+0x54>
        if ((ret = cosem_setArray(data, object->thresholds.size)) == 0)
   13536:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   13538:	4628      	mov	r0, r5
   1353a:	f7fb fe9e 	bl	f27a <cosem_setArray>
   1353e:	4604      	mov	r4, r0
   13540:	b118      	cbz	r0, 1354a <cosem_getRegisterMonitor+0x22>
}
   13542:	4620      	mov	r0, r4
   13544:	b003      	add	sp, #12
   13546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1354a:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   1354c:	f106 0724 	add.w	r7, r6, #36	; 0x24
            for (pos = 0; pos != object->thresholds.size; ++pos)
   13550:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   13552:	fa1f f388 	uxth.w	r3, r8
   13556:	429a      	cmp	r2, r3
   13558:	d0f3      	beq.n	13542 <cosem_getRegisterMonitor+0x1a>
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   1355a:	aa01      	add	r2, sp, #4
   1355c:	fa1f f188 	uxth.w	r1, r8
   13560:	4638      	mov	r0, r7
   13562:	f008 fd86 	bl	1c072 <va_getByIndex>
   13566:	b938      	cbnz	r0, 13578 <cosem_getRegisterMonitor+0x50>
                    (ret = var_getBytes(tmp, data)) != 0)
   13568:	9801      	ldr	r0, [sp, #4]
   1356a:	4629      	mov	r1, r5
   1356c:	f008 fec1 	bl	1c2f2 <var_getBytes>
   13570:	f108 0801 	add.w	r8, r8, #1
                if ((ret = va_getByIndex(&object->thresholds, pos, &tmp)) != 0 ||
   13574:	2800      	cmp	r0, #0
   13576:	d0eb      	beq.n	13550 <cosem_getRegisterMonitor+0x28>
                    (ret = bb_setUInt16(data, actionSet->actionDown.scriptSelector)) != 0)
   13578:	4604      	mov	r4, r0
    return ret;
   1357a:	e7e2      	b.n	13542 <cosem_getRegisterMonitor+0x1a>
    else if (e->index == 3)
   1357c:	2f03      	cmp	r7, #3
   1357e:	d143      	bne.n	13608 <cosem_getRegisterMonitor+0xe0>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13580:	2102      	movs	r1, #2
   13582:	4628      	mov	r0, r5
   13584:	f7fa ff43 	bl	e40e <bb_setUInt8>
   13588:	4604      	mov	r4, r0
   1358a:	2800      	cmp	r0, #0
   1358c:	d1d9      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   1358e:	4639      	mov	r1, r7
   13590:	4628      	mov	r0, r5
   13592:	f7fa ff3c 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13596:	4604      	mov	r4, r0
   13598:	2800      	cmp	r0, #0
   1359a:	d1d2      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1359c:	2112      	movs	r1, #18
   1359e:	4628      	mov	r0, r5
   135a0:	f7fa ff35 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt8(data, 3)) != 0 ||
   135a4:	4604      	mov	r4, r0
   135a6:	2800      	cmp	r0, #0
   135a8:	d1cb      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt16(data, object->monitoredValue.target != NULL ? object->monitoredValue.target->objectType : 0)) != 0 ||
   135aa:	69f1      	ldr	r1, [r6, #28]
   135ac:	b101      	cbz	r1, 135b0 <cosem_getRegisterMonitor+0x88>
   135ae:	8809      	ldrh	r1, [r1, #0]
   135b0:	4628      	mov	r0, r5
   135b2:	f7fa ff4e 	bl	e452 <bb_setUInt16>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   135b6:	4604      	mov	r4, r0
   135b8:	2800      	cmp	r0, #0
   135ba:	d1c2      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   135bc:	2109      	movs	r1, #9
   135be:	4628      	mov	r0, r5
   135c0:	f7fa ff25 	bl	e40e <bb_setUInt8>
            (ret = bb_setUInt16(data, object->monitoredValue.target != NULL ? object->monitoredValue.target->objectType : 0)) != 0 ||
   135c4:	4604      	mov	r4, r0
   135c6:	2800      	cmp	r0, #0
   135c8:	d1bb      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   135ca:	4629      	mov	r1, r5
   135cc:	2006      	movs	r0, #6
   135ce:	f008 f81a 	bl	1b606 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   135d2:	4604      	mov	r4, r0
   135d4:	2800      	cmp	r0, #0
   135d6:	d1b4      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_set(data, obj_getLogicalName(object->monitoredValue.target), 6)) != 0 ||
   135d8:	69f0      	ldr	r0, [r6, #28]
   135da:	f7f0 fd5d 	bl	4098 <obj_getLogicalName>
   135de:	2206      	movs	r2, #6
   135e0:	4601      	mov	r1, r0
   135e2:	4628      	mov	r0, r5
   135e4:	f7fa fff9 	bl	e5da <bb_set>
            (ret = hlp_setObjectCount(6, data)) != 0 ||
   135e8:	4604      	mov	r4, r0
   135ea:	2800      	cmp	r0, #0
   135ec:	d1a9      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_INT8)) != 0 ||
   135ee:	210f      	movs	r1, #15
   135f0:	4628      	mov	r0, r5
   135f2:	f7fa ff0c 	bl	e40e <bb_setUInt8>
            (ret = bb_set(data, obj_getLogicalName(object->monitoredValue.target), 6)) != 0 ||
   135f6:	4604      	mov	r4, r0
   135f8:	2800      	cmp	r0, #0
   135fa:	d1a2      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
            (ret = bb_setUInt8(data, object->monitoredValue.attributeIndex)) != 0)
   135fc:	f896 1020 	ldrb.w	r1, [r6, #32]
   13600:	4628      	mov	r0, r5
   13602:	f7fa ff04 	bl	e40e <bb_setUInt8>
   13606:	e7b7      	b.n	13578 <cosem_getRegisterMonitor+0x50>
    else if (e->index == 4)
   13608:	2f04      	cmp	r7, #4
   1360a:	f040 8091 	bne.w	13730 <cosem_getRegisterMonitor+0x208>
        if ((ret = cosem_setArray(data, object->actions.size)) == 0)
   1360e:	8af1      	ldrh	r1, [r6, #22]
   13610:	4628      	mov	r0, r5
   13612:	f7fb fe32 	bl	f27a <cosem_setArray>
   13616:	4604      	mov	r4, r0
   13618:	2800      	cmp	r0, #0
   1361a:	d192      	bne.n	13542 <cosem_getRegisterMonitor+0x1a>
   1361c:	4607      	mov	r7, r0
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   1361e:	f106 0810 	add.w	r8, r6, #16
   13622:	e07e      	b.n	13722 <cosem_getRegisterMonitor+0x1fa>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13624:	2102      	movs	r1, #2
   13626:	4628      	mov	r0, r5
   13628:	f7fa fef1 	bl	e40e <bb_setUInt8>
   1362c:	2800      	cmp	r0, #0
   1362e:	d1a3      	bne.n	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   13630:	2102      	movs	r1, #2
   13632:	4628      	mov	r0, r5
   13634:	f7fa feeb 	bl	e40e <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13638:	2800      	cmp	r0, #0
   1363a:	d19d      	bne.n	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   1363c:	aa01      	add	r2, sp, #4
   1363e:	4649      	mov	r1, r9
   13640:	4640      	mov	r0, r8
   13642:	f7fe faaa 	bl	11b9a <arr_getByIndex>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   13646:	2800      	cmp	r0, #0
   13648:	d196      	bne.n	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1364a:	2102      	movs	r1, #2
   1364c:	4628      	mov	r0, r5
   1364e:	f7fa fede 	bl	e40e <bb_setUInt8>
                    (ret = arr_getByIndex(&object->actions, pos, (void**)&actionSet)) != 0 ||
   13652:	2800      	cmp	r0, #0
   13654:	d190      	bne.n	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   13656:	2102      	movs	r1, #2
   13658:	4628      	mov	r0, r5
   1365a:	f7fa fed8 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1365e:	2800      	cmp	r0, #0
   13660:	d18a      	bne.n	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13662:	2109      	movs	r1, #9
   13664:	4628      	mov	r0, r5
   13666:	f7fa fed2 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   1366a:	2800      	cmp	r0, #0
   1366c:	d184      	bne.n	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   1366e:	2106      	movs	r1, #6
   13670:	4628      	mov	r0, r5
   13672:	f7fa fecc 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   13676:	2800      	cmp	r0, #0
   13678:	f47f af7e 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionUp.script), 6)) != 0 ||
   1367c:	9b01      	ldr	r3, [sp, #4]
   1367e:	6818      	ldr	r0, [r3, #0]
   13680:	f7f0 fd0a 	bl	4098 <obj_getLogicalName>
   13684:	2206      	movs	r2, #6
   13686:	4601      	mov	r1, r0
   13688:	4628      	mov	r0, r5
   1368a:	f7fa ffa6 	bl	e5da <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   1368e:	2800      	cmp	r0, #0
   13690:	f47f af72 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   13694:	2112      	movs	r1, #18
   13696:	4628      	mov	r0, r5
   13698:	f7fa feb9 	bl	e40e <bb_setUInt8>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionUp.script), 6)) != 0 ||
   1369c:	2800      	cmp	r0, #0
   1369e:	f47f af6b 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
   136a2:	9b01      	ldr	r3, [sp, #4]
   136a4:	4628      	mov	r0, r5
   136a6:	8899      	ldrh	r1, [r3, #4]
   136a8:	f7fa fed3 	bl	e452 <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   136ac:	2800      	cmp	r0, #0
   136ae:	f47f af63 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   136b2:	2102      	movs	r1, #2
   136b4:	4628      	mov	r0, r5
   136b6:	f7fa feaa 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt16(data, actionSet->actionUp.scriptSelector)) != 0 ||
   136ba:	2800      	cmp	r0, #0
   136bc:	f47f af5c 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   136c0:	2102      	movs	r1, #2
   136c2:	4628      	mov	r0, r5
   136c4:	f7fa fea3 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   136c8:	2800      	cmp	r0, #0
   136ca:	f47f af55 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   136ce:	2109      	movs	r1, #9
   136d0:	4628      	mov	r0, r5
   136d2:	f7fa fe9c 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   136d6:	2800      	cmp	r0, #0
   136d8:	f47f af4e 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   136dc:	2106      	movs	r1, #6
   136de:	4628      	mov	r0, r5
   136e0:	f7fa fe95 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   136e4:	2800      	cmp	r0, #0
   136e6:	f47f af47 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionDown.script), 6)) != 0 ||
   136ea:	9b01      	ldr	r3, [sp, #4]
   136ec:	6898      	ldr	r0, [r3, #8]
   136ee:	f7f0 fcd3 	bl	4098 <obj_getLogicalName>
   136f2:	2206      	movs	r2, #6
   136f4:	4601      	mov	r1, r0
   136f6:	4628      	mov	r0, r5
   136f8:	f7fa ff6f 	bl	e5da <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   136fc:	2800      	cmp	r0, #0
   136fe:	f47f af3b 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   13702:	2112      	movs	r1, #18
   13704:	4628      	mov	r0, r5
   13706:	f7fa fe82 	bl	e40e <bb_setUInt8>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)actionSet->actionDown.script), 6)) != 0 ||
   1370a:	2800      	cmp	r0, #0
   1370c:	f47f af34 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
                    (ret = bb_setUInt16(data, actionSet->actionDown.scriptSelector)) != 0)
   13710:	9b01      	ldr	r3, [sp, #4]
   13712:	4628      	mov	r0, r5
   13714:	8999      	ldrh	r1, [r3, #12]
   13716:	f7fa fe9c 	bl	e452 <bb_setUInt16>
   1371a:	3701      	adds	r7, #1
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1371c:	2800      	cmp	r0, #0
   1371e:	f47f af2b 	bne.w	13578 <cosem_getRegisterMonitor+0x50>
            for (pos = 0; pos != object->actions.size; ++pos)
   13722:	8af3      	ldrh	r3, [r6, #22]
   13724:	fa1f f987 	uxth.w	r9, r7
   13728:	454b      	cmp	r3, r9
   1372a:	f47f af7b 	bne.w	13624 <cosem_getRegisterMonitor+0xfc>
   1372e:	e708      	b.n	13542 <cosem_getRegisterMonitor+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13730:	f44f 7481 	mov.w	r4, #258	; 0x102
   13734:	e705      	b.n	13542 <cosem_getRegisterMonitor+0x1a>

00013736 <cosem_getSapAssignment>:
{
   13736:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    if (e->index == 2)
   1373a:	7e03      	ldrb	r3, [r0, #24]
   1373c:	2b02      	cmp	r3, #2
   1373e:	d14c      	bne.n	137da <cosem_getSapAssignment+0xa4>
    gxSapAssignment* object = (gxSapAssignment*)e->target;
   13740:	6947      	ldr	r7, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13742:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setArray(data, object->sapAssignmentList.size)) == 0)
   13744:	8af9      	ldrh	r1, [r7, #22]
   13746:	4628      	mov	r0, r5
   13748:	f7fb fd97 	bl	f27a <cosem_setArray>
   1374c:	4604      	mov	r4, r0
   1374e:	b118      	cbz	r0, 13758 <cosem_getSapAssignment+0x22>
}
   13750:	4620      	mov	r0, r4
   13752:	b002      	add	sp, #8
   13754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13758:	4680      	mov	r8, r0
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   1375a:	f107 0910 	add.w	r9, r7, #16
            for (pos = 0; pos != object->sapAssignmentList.size; ++pos)
   1375e:	8afb      	ldrh	r3, [r7, #22]
   13760:	fa1f f688 	uxth.w	r6, r8
   13764:	42b3      	cmp	r3, r6
   13766:	d0f3      	beq.n	13750 <cosem_getSapAssignment+0x1a>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   13768:	2102      	movs	r1, #2
   1376a:	4628      	mov	r0, r5
   1376c:	f7fa fe4f 	bl	e40e <bb_setUInt8>
   13770:	bb88      	cbnz	r0, 137d6 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   13772:	2102      	movs	r1, #2
   13774:	4628      	mov	r0, r5
   13776:	f7fa fe4a 	bl	e40e <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1377a:	bb60      	cbnz	r0, 137d6 <cosem_getSapAssignment+0xa0>
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   1377c:	aa01      	add	r2, sp, #4
   1377e:	4631      	mov	r1, r6
   13780:	4648      	mov	r0, r9
   13782:	f7fe fa0a 	bl	11b9a <arr_getByIndex>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   13786:	bb30      	cbnz	r0, 137d6 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   13788:	2112      	movs	r1, #18
   1378a:	4628      	mov	r0, r5
   1378c:	f7fa fe3f 	bl	e40e <bb_setUInt8>
                    (ret = arr_getByIndex(&object->sapAssignmentList, pos, (void**)&it)) != 0 ||
   13790:	bb08      	cbnz	r0, 137d6 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt16(data, it->id)) != 0 ||
   13792:	9b01      	ldr	r3, [sp, #4]
   13794:	4628      	mov	r0, r5
   13796:	8819      	ldrh	r1, [r3, #0]
   13798:	f7fa fe5b 	bl	e452 <bb_setUInt16>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_UINT16)) != 0 ||
   1379c:	b9d8      	cbnz	r0, 137d6 <cosem_getSapAssignment+0xa0>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   1379e:	2109      	movs	r1, #9
   137a0:	4628      	mov	r0, r5
   137a2:	f7fa fe34 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt16(data, it->id)) != 0 ||
   137a6:	b9b0      	cbnz	r0, 137d6 <cosem_getSapAssignment+0xa0>
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   137a8:	9b01      	ldr	r3, [sp, #4]
   137aa:	4629      	mov	r1, r5
   137ac:	8958      	ldrh	r0, [r3, #10]
   137ae:	f007 ff2a 	bl	1b606 <hlp_setObjectCount>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   137b2:	4606      	mov	r6, r0
   137b4:	b9a0      	cbnz	r0, 137e0 <cosem_getSapAssignment+0xaa>
                    (ret = bb_set2(data, &it->name, 0, bb_size(&it->name))) != 0)
   137b6:	9901      	ldr	r1, [sp, #4]
   137b8:	f101 0a04 	add.w	sl, r1, #4
   137bc:	4650      	mov	r0, sl
   137be:	f7fa fdba 	bl	e336 <bb_size>
   137c2:	4632      	mov	r2, r6
   137c4:	4603      	mov	r3, r0
   137c6:	4651      	mov	r1, sl
   137c8:	4628      	mov	r0, r5
   137ca:	f7fa ff35 	bl	e638 <bb_set2>
   137ce:	f108 0801 	add.w	r8, r8, #1
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   137d2:	2800      	cmp	r0, #0
   137d4:	d0c3      	beq.n	1375e <cosem_getSapAssignment+0x28>
                    (ret = bb_set2(data, &it->name, 0, bb_size(&it->name))) != 0)
   137d6:	4604      	mov	r4, r0
    return ret;
   137d8:	e7ba      	b.n	13750 <cosem_getSapAssignment+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   137da:	f44f 7481 	mov.w	r4, #258	; 0x102
   137de:	e7b7      	b.n	13750 <cosem_getSapAssignment+0x1a>
                    (ret = hlp_setObjectCount(it->name.size, data)) != 0 ||
   137e0:	4604      	mov	r4, r0
   137e2:	e7b5      	b.n	13750 <cosem_getSapAssignment+0x1a>

000137e4 <cosem_getSchedule>:
{
   137e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   137e8:	7e03      	ldrb	r3, [r0, #24]
   137ea:	2b02      	cmp	r3, #2
   137ec:	f040 8081 	bne.w	138f2 <cosem_getSchedule+0x10e>
    gxSchedule* object = (gxSchedule*)e->target;
   137f0:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   137f2:	6885      	ldr	r5, [r0, #8]
        if ((ret = cosem_setArray(data, object->entries.size)) != 0)
   137f4:	8af1      	ldrh	r1, [r6, #22]
   137f6:	4628      	mov	r0, r5
   137f8:	f7fb fd3f 	bl	f27a <cosem_setArray>
   137fc:	4604      	mov	r4, r0
   137fe:	2800      	cmp	r0, #0
   13800:	d173      	bne.n	138ea <cosem_getSchedule+0x106>
        ba_init(&ba);
   13802:	a802      	add	r0, sp, #8
   13804:	f7fa fc93 	bl	e12e <ba_init>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   13808:	f106 0710 	add.w	r7, r6, #16
        for (pos = 0; pos != object->entries.size; ++pos)
   1380c:	8af3      	ldrh	r3, [r6, #22]
   1380e:	fa1f f884 	uxth.w	r8, r4
   13812:	4543      	cmp	r3, r8
   13814:	d101      	bne.n	1381a <cosem_getSchedule+0x36>
   13816:	2000      	movs	r0, #0
   13818:	e066      	b.n	138e8 <cosem_getSchedule+0x104>
            if ((ret = cosem_setStructure(data, 10)) != 0 ||
   1381a:	210a      	movs	r1, #10
   1381c:	4628      	mov	r0, r5
   1381e:	f7fb fd1e 	bl	f25e <cosem_setStructure>
   13822:	2800      	cmp	r0, #0
   13824:	d160      	bne.n	138e8 <cosem_getSchedule+0x104>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   13826:	aa01      	add	r2, sp, #4
   13828:	4641      	mov	r1, r8
   1382a:	4638      	mov	r0, r7
   1382c:	f7fe f9b5 	bl	11b9a <arr_getByIndex>
            if ((ret = cosem_setStructure(data, 10)) != 0 ||
   13830:	2800      	cmp	r0, #0
   13832:	d159      	bne.n	138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->index)) != 0 ||
   13834:	9b01      	ldr	r3, [sp, #4]
   13836:	4628      	mov	r0, r5
   13838:	8819      	ldrh	r1, [r3, #0]
   1383a:	f7fb fcc3 	bl	f1c4 <cosem_setUInt16>
                (ret = arr_getByIndex(&object->entries, pos, (void**)&se)) != 0 ||
   1383e:	2800      	cmp	r0, #0
   13840:	d152      	bne.n	138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setBoolean(data, se->enable)) != 0 ||
   13842:	9b01      	ldr	r3, [sp, #4]
   13844:	4628      	mov	r0, r5
   13846:	7899      	ldrb	r1, [r3, #2]
   13848:	f7fb fd33 	bl	f2b2 <cosem_setBoolean>
                (ret = cosem_setUInt16(data, se->index)) != 0 ||
   1384c:	2800      	cmp	r0, #0
   1384e:	d14b      	bne.n	138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setOctetString2(data, obj_getLogicalName((gxObject*)se->scriptTable), 6)) != 0 ||
   13850:	9b01      	ldr	r3, [sp, #4]
   13852:	6858      	ldr	r0, [r3, #4]
   13854:	f7f0 fc20 	bl	4098 <obj_getLogicalName>
   13858:	2206      	movs	r2, #6
   1385a:	4601      	mov	r1, r0
   1385c:	4628      	mov	r0, r5
   1385e:	f7fb fc82 	bl	f166 <cosem_setOctetString2>
                (ret = cosem_setBoolean(data, se->enable)) != 0 ||
   13862:	2800      	cmp	r0, #0
   13864:	d140      	bne.n	138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->scriptSelector)) != 0 ||
   13866:	9b01      	ldr	r3, [sp, #4]
   13868:	4628      	mov	r0, r5
   1386a:	8919      	ldrh	r1, [r3, #8]
   1386c:	f7fb fcaa 	bl	f1c4 <cosem_setUInt16>
                (ret = cosem_setOctetString2(data, obj_getLogicalName((gxObject*)se->scriptTable), 6)) != 0 ||
   13870:	2800      	cmp	r0, #0
   13872:	d139      	bne.n	138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setTimeAsOctetString(data, &se->switchTime)) != 0 ||
   13874:	9901      	ldr	r1, [sp, #4]
   13876:	4628      	mov	r0, r5
   13878:	310c      	adds	r1, #12
   1387a:	f7fb fc14 	bl	f0a6 <cosem_setTimeAsOctetString>
                (ret = cosem_setUInt16(data, se->scriptSelector)) != 0 ||
   1387e:	bb98      	cbnz	r0, 138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setUInt16(data, se->validityWindow)) != 0 ||
   13880:	9b01      	ldr	r3, [sp, #4]
   13882:	4628      	mov	r0, r5
   13884:	8b19      	ldrh	r1, [r3, #24]
   13886:	f7fb fc9d 	bl	f1c4 <cosem_setUInt16>
                (ret = cosem_setTimeAsOctetString(data, &se->switchTime)) != 0 ||
   1388a:	bb68      	cbnz	r0, 138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setBitString(data, se->execWeekdays, 7)) != 0 ||
   1388c:	9b01      	ldr	r3, [sp, #4]
   1388e:	7e99      	ldrb	r1, [r3, #26]
   13890:	2207      	movs	r2, #7
   13892:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   13896:	4628      	mov	r0, r5
   13898:	f7fb fbb9 	bl	f00e <cosem_setBitString>
                (ret = cosem_setUInt16(data, se->validityWindow)) != 0 ||
   1389c:	bb20      	cbnz	r0, 138e8 <cosem_getSchedule+0x104>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   1389e:	2104      	movs	r1, #4
   138a0:	4628      	mov	r0, r5
   138a2:	f7fa fdb4 	bl	e40e <bb_setUInt8>
                (ret = cosem_setBitString(data, se->execWeekdays, 7)) != 0 ||
   138a6:	b9f8      	cbnz	r0, 138e8 <cosem_getSchedule+0x104>
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
   138a8:	9b01      	ldr	r3, [sp, #4]
   138aa:	4629      	mov	r1, r5
   138ac:	8c58      	ldrh	r0, [r3, #34]	; 0x22
   138ae:	f007 feaa 	bl	1b606 <hlp_setObjectCount>
                (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   138b2:	b9c8      	cbnz	r0, 138e8 <cosem_getSchedule+0x104>
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
   138b4:	9b01      	ldr	r3, [sp, #4]
   138b6:	8c58      	ldrh	r0, [r3, #34]	; 0x22
   138b8:	f8d3 801c 	ldr.w	r8, [r3, #28]
   138bc:	f7ed fe62 	bl	1584 <ba_getByteCount>
   138c0:	4641      	mov	r1, r8
   138c2:	4602      	mov	r2, r0
   138c4:	4628      	mov	r0, r5
   138c6:	f7fa fe88 	bl	e5da <bb_set>
                (ret = hlp_setObjectCount(se->execSpecDays.size, data)) != 0 ||
   138ca:	b968      	cbnz	r0, 138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setDateTimeAsOctetString(data, &se->beginDate)) != 0 ||
   138cc:	9901      	ldr	r1, [sp, #4]
   138ce:	4628      	mov	r0, r5
   138d0:	3124      	adds	r1, #36	; 0x24
   138d2:	f7fb fb76 	bl	efc2 <cosem_setDateTimeAsOctetString>
                (ret = bb_set(data, se->execSpecDays.data, ba_getByteCount(se->execSpecDays.size))) != 0 ||
   138d6:	b938      	cbnz	r0, 138e8 <cosem_getSchedule+0x104>
                (ret = cosem_setDateTimeAsOctetString(data, &se->endDate)) != 0)
   138d8:	9901      	ldr	r1, [sp, #4]
   138da:	4628      	mov	r0, r5
   138dc:	3130      	adds	r1, #48	; 0x30
   138de:	f7fb fb70 	bl	efc2 <cosem_setDateTimeAsOctetString>
   138e2:	3401      	adds	r4, #1
                (ret = cosem_setDateTimeAsOctetString(data, &se->beginDate)) != 0 ||
   138e4:	2800      	cmp	r0, #0
   138e6:	d091      	beq.n	1380c <cosem_getSchedule+0x28>
   138e8:	4604      	mov	r4, r0
}
   138ea:	4620      	mov	r0, r4
   138ec:	b004      	add	sp, #16
   138ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   138f2:	f44f 7481 	mov.w	r4, #258	; 0x102
   138f6:	e7f8      	b.n	138ea <cosem_getSchedule+0x106>

000138f8 <cosem_getScriptTable>:
{
   138f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   138fa:	7e03      	ldrb	r3, [r0, #24]
   138fc:	2b02      	cmp	r3, #2
   138fe:	d162      	bne.n	139c6 <cosem_getScriptTable+0xce>
    gxScriptTable* object = (gxScriptTable*)e->target;
   13900:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13902:	6884      	ldr	r4, [r0, #8]
        if ((ret = cosem_setArray(data, object->scripts.size)) == 0)
   13904:	8ae9      	ldrh	r1, [r5, #22]
   13906:	4620      	mov	r0, r4
   13908:	f7fb fcb7 	bl	f27a <cosem_setArray>
   1390c:	2800      	cmp	r0, #0
   1390e:	d058      	beq.n	139c2 <cosem_getScriptTable+0xca>
}
   13910:	b003      	add	sp, #12
   13912:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if ((ret = arr_getByIndex(&it->actions, pos2, (void**)&a)) != 0 ||
   13914:	aa01      	add	r2, sp, #4
   13916:	3004      	adds	r0, #4
   13918:	f7fe f93f 	bl	11b9a <arr_getByIndex>
   1391c:	bb48      	cbnz	r0, 13972 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setStructure(data, 5)) != 0 ||
   1391e:	2105      	movs	r1, #5
   13920:	4620      	mov	r0, r4
   13922:	f7fb fc9c 	bl	f25e <cosem_setStructure>
                    if ((ret = arr_getByIndex(&it->actions, pos2, (void**)&a)) != 0 ||
   13926:	bb20      	cbnz	r0, 13972 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setEnum(data, a->type)) != 0 ||
   13928:	9b01      	ldr	r3, [sp, #4]
   1392a:	4620      	mov	r0, r4
   1392c:	7919      	ldrb	r1, [r3, #4]
   1392e:	f7fb fcb2 	bl	f296 <cosem_setEnum>
                        (ret = cosem_setStructure(data, 5)) != 0 ||
   13932:	b9f0      	cbnz	r0, 13972 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setUInt16(data, a->target == NULL ? 0 : a->target->objectType)) != 0 ||
   13934:	9b01      	ldr	r3, [sp, #4]
   13936:	6819      	ldr	r1, [r3, #0]
   13938:	b101      	cbz	r1, 1393c <cosem_getScriptTable+0x44>
   1393a:	8809      	ldrh	r1, [r1, #0]
   1393c:	4620      	mov	r0, r4
   1393e:	f7fb fc41 	bl	f1c4 <cosem_setUInt16>
                        (ret = cosem_setEnum(data, a->type)) != 0 ||
   13942:	b9b0      	cbnz	r0, 13972 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setOctetString2(data, obj_getLogicalName(a->target), 6)) != 0 ||
   13944:	9b01      	ldr	r3, [sp, #4]
   13946:	6818      	ldr	r0, [r3, #0]
   13948:	f7f0 fba6 	bl	4098 <obj_getLogicalName>
   1394c:	2206      	movs	r2, #6
   1394e:	4601      	mov	r1, r0
   13950:	4620      	mov	r0, r4
   13952:	f7fb fc08 	bl	f166 <cosem_setOctetString2>
                        (ret = cosem_setUInt16(data, a->target == NULL ? 0 : a->target->objectType)) != 0 ||
   13956:	b960      	cbnz	r0, 13972 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setInt8(data, a->index)) != 0 ||
   13958:	9b01      	ldr	r3, [sp, #4]
   1395a:	4620      	mov	r0, r4
   1395c:	7e19      	ldrb	r1, [r3, #24]
   1395e:	f7fb fc4d 	bl	f1fc <cosem_setInt8>
                        (ret = cosem_setOctetString2(data, obj_getLogicalName(a->target), 6)) != 0 ||
   13962:	b930      	cbnz	r0, 13972 <cosem_getScriptTable+0x7a>
                        (ret = cosem_setVariant(data, &a->parameter)) != 0)
   13964:	9901      	ldr	r1, [sp, #4]
   13966:	4620      	mov	r0, r4
   13968:	3108      	adds	r1, #8
   1396a:	f7fb fc71 	bl	f250 <cosem_setVariant>
   1396e:	3701      	adds	r7, #1
                        (ret = cosem_setInt8(data, a->index)) != 0 ||
   13970:	b300      	cbz	r0, 139b4 <cosem_getScriptTable+0xbc>
            for (pos = 0; pos != object->scripts.size; ++pos)
   13972:	3601      	adds	r6, #1
   13974:	8aeb      	ldrh	r3, [r5, #22]
   13976:	b2b1      	uxth	r1, r6
   13978:	428b      	cmp	r3, r1
   1397a:	d0c9      	beq.n	13910 <cosem_getScriptTable+0x18>
                if ((ret = arr_getByIndex(&object->scripts, pos, (void**)&it)) != 0 ||
   1397c:	466a      	mov	r2, sp
   1397e:	f105 0010 	add.w	r0, r5, #16
   13982:	f7fe f90a 	bl	11b9a <arr_getByIndex>
   13986:	2800      	cmp	r0, #0
   13988:	d1c2      	bne.n	13910 <cosem_getScriptTable+0x18>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   1398a:	2102      	movs	r1, #2
   1398c:	4620      	mov	r0, r4
   1398e:	f7fb fc66 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->scripts, pos, (void**)&it)) != 0 ||
   13992:	2800      	cmp	r0, #0
   13994:	d1bc      	bne.n	13910 <cosem_getScriptTable+0x18>
                    (ret = cosem_setUInt16(data, it->id)) != 0 ||
   13996:	9b00      	ldr	r3, [sp, #0]
   13998:	4620      	mov	r0, r4
   1399a:	8819      	ldrh	r1, [r3, #0]
   1399c:	f7fb fc12 	bl	f1c4 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   139a0:	2800      	cmp	r0, #0
   139a2:	d1b5      	bne.n	13910 <cosem_getScriptTable+0x18>
                    (ret = cosem_setArray(data, it->actions.size)) != 0)
   139a4:	9b00      	ldr	r3, [sp, #0]
   139a6:	4620      	mov	r0, r4
   139a8:	8959      	ldrh	r1, [r3, #10]
   139aa:	f7fb fc66 	bl	f27a <cosem_setArray>
                    (ret = cosem_setUInt16(data, it->id)) != 0 ||
   139ae:	2800      	cmp	r0, #0
   139b0:	d1ae      	bne.n	13910 <cosem_getScriptTable+0x18>
   139b2:	4607      	mov	r7, r0
                for (pos2 = 0; pos2 != it->actions.size; ++pos2)
   139b4:	9800      	ldr	r0, [sp, #0]
   139b6:	8943      	ldrh	r3, [r0, #10]
   139b8:	b2b9      	uxth	r1, r7
   139ba:	428b      	cmp	r3, r1
   139bc:	d1aa      	bne.n	13914 <cosem_getScriptTable+0x1c>
   139be:	2000      	movs	r0, #0
   139c0:	e7d7      	b.n	13972 <cosem_getScriptTable+0x7a>
   139c2:	4606      	mov	r6, r0
   139c4:	e7d6      	b.n	13974 <cosem_getScriptTable+0x7c>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   139c6:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   139ca:	e7a1      	b.n	13910 <cosem_getScriptTable+0x18>

000139cc <cosem_getSpecialDaysTable>:
{
   139cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (e->index == 2)
   139ce:	7e03      	ldrb	r3, [r0, #24]
   139d0:	2b02      	cmp	r3, #2
{
   139d2:	b087      	sub	sp, #28
    if (e->index == 2)
   139d4:	d131      	bne.n	13a3a <cosem_getSpecialDaysTable+0x6e>
    gxSpecialDaysTable* object = (gxSpecialDaysTable*)e->target;
   139d6:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   139d8:	6884      	ldr	r4, [r0, #8]
        if ((ret = var_init(&tmp)) != 0 ||
   139da:	a802      	add	r0, sp, #8
   139dc:	f008 f96f 	bl	1bcbe <var_init>
   139e0:	b920      	cbnz	r0, 139ec <cosem_getSpecialDaysTable+0x20>
            (ret = cosem_setArray(data, object->entries.size)) == 0)
   139e2:	8ae9      	ldrh	r1, [r5, #22]
   139e4:	4620      	mov	r0, r4
   139e6:	f7fb fc48 	bl	f27a <cosem_setArray>
        if ((ret = var_init(&tmp)) != 0 ||
   139ea:	bb20      	cbnz	r0, 13a36 <cosem_getSpecialDaysTable+0x6a>
{
   139ec:	2600      	movs	r6, #0
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   139ee:	f105 0710 	add.w	r7, r5, #16
            for (pos = 0; pos != object->entries.size; ++pos)
   139f2:	8aeb      	ldrh	r3, [r5, #22]
   139f4:	b2b1      	uxth	r1, r6
   139f6:	428b      	cmp	r3, r1
   139f8:	d01d      	beq.n	13a36 <cosem_getSpecialDaysTable+0x6a>
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   139fa:	aa01      	add	r2, sp, #4
   139fc:	4638      	mov	r0, r7
   139fe:	f7fe f8cc 	bl	11b9a <arr_getByIndex>
   13a02:	b9c0      	cbnz	r0, 13a36 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
   13a04:	2103      	movs	r1, #3
   13a06:	4620      	mov	r0, r4
   13a08:	f7fb fc29 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->entries, pos, (void**)&sd)) != 0 ||
   13a0c:	b998      	cbnz	r0, 13a36 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setUInt16(data, sd->index)) != 0 ||
   13a0e:	9b01      	ldr	r3, [sp, #4]
   13a10:	4620      	mov	r0, r4
   13a12:	8819      	ldrh	r1, [r3, #0]
   13a14:	f7fb fbd6 	bl	f1c4 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 3)) != 0 ||
   13a18:	b968      	cbnz	r0, 13a36 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setDateAsOctetString(data, &sd->date)) != 0 ||
   13a1a:	9901      	ldr	r1, [sp, #4]
   13a1c:	4620      	mov	r0, r4
   13a1e:	3104      	adds	r1, #4
   13a20:	f7fb fae2 	bl	efe8 <cosem_setDateAsOctetString>
                    (ret = cosem_setUInt16(data, sd->index)) != 0 ||
   13a24:	b938      	cbnz	r0, 13a36 <cosem_getSpecialDaysTable+0x6a>
                    (ret = cosem_setUInt8(data, sd->dayId)) != 0)
   13a26:	9b01      	ldr	r3, [sp, #4]
   13a28:	4620      	mov	r0, r4
   13a2a:	7c19      	ldrb	r1, [r3, #16]
   13a2c:	f7fb fbbc 	bl	f1a8 <cosem_setUInt8>
   13a30:	3601      	adds	r6, #1
                    (ret = cosem_setDateAsOctetString(data, &sd->date)) != 0 ||
   13a32:	2800      	cmp	r0, #0
   13a34:	d0dd      	beq.n	139f2 <cosem_getSpecialDaysTable+0x26>
}
   13a36:	b007      	add	sp, #28
   13a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13a3a:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   13a3e:	e7fa      	b.n	13a36 <cosem_getSpecialDaysTable+0x6a>

00013a40 <cosem_getTcpUdpSetup>:
{
   13a40:	b510      	push	{r4, lr}
    if (e->index == 2)
   13a42:	7e02      	ldrb	r2, [r0, #24]
    gxTcpUdpSetup* object = (gxTcpUdpSetup*)e->target;
   13a44:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   13a46:	2a02      	cmp	r2, #2
   13a48:	d105      	bne.n	13a56 <cosem_getTcpUdpSetup+0x16>
        ret = cosem_setUInt16(e->value.byteArr, object->port);
   13a4a:	8a19      	ldrh	r1, [r3, #16]
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   13a4c:	6880      	ldr	r0, [r0, #8]
}
   13a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   13a52:	f7fb bbb7 	b.w	f1c4 <cosem_setUInt16>
    else if (e->index == 3)
   13a56:	2a03      	cmp	r2, #3
   13a58:	d10a      	bne.n	13a70 <cosem_getTcpUdpSetup+0x30>
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName(object->ipSetup), 6);
   13a5a:	6884      	ldr	r4, [r0, #8]
   13a5c:	6958      	ldr	r0, [r3, #20]
   13a5e:	f7f0 fb1b 	bl	4098 <obj_getLogicalName>
   13a62:	2206      	movs	r2, #6
   13a64:	4601      	mov	r1, r0
   13a66:	4620      	mov	r0, r4
}
   13a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setOctetString2(e->value.byteArr, obj_getLogicalName(object->ipSetup), 6);
   13a6c:	f7fb bb7b 	b.w	f166 <cosem_setOctetString2>
    else if (e->index == 4)
   13a70:	2a04      	cmp	r2, #4
   13a72:	d101      	bne.n	13a78 <cosem_getTcpUdpSetup+0x38>
        ret = cosem_setUInt16(e->value.byteArr, object->maximumSegmentSize);
   13a74:	8b99      	ldrh	r1, [r3, #28]
   13a76:	e7e9      	b.n	13a4c <cosem_getTcpUdpSetup+0xc>
    else if (e->index == 5)
   13a78:	2a05      	cmp	r2, #5
   13a7a:	d105      	bne.n	13a88 <cosem_getTcpUdpSetup+0x48>
}
   13a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ret = cosem_setUInt8(e->value.byteArr, object->maximumSimultaneousConnections);
   13a80:	7e19      	ldrb	r1, [r3, #24]
   13a82:	6880      	ldr	r0, [r0, #8]
   13a84:	f7fb bb90 	b.w	f1a8 <cosem_setUInt8>
    else if (e->index == 6)
   13a88:	2a06      	cmp	r2, #6
   13a8a:	d101      	bne.n	13a90 <cosem_getTcpUdpSetup+0x50>
        ret = cosem_setUInt16(e->value.byteArr, object->inactivityTimeout);
   13a8c:	8b59      	ldrh	r1, [r3, #26]
   13a8e:	e7dd      	b.n	13a4c <cosem_getTcpUdpSetup+0xc>
}
   13a90:	f44f 7081 	mov.w	r0, #258	; 0x102
   13a94:	bd10      	pop	{r4, pc}

00013a96 <cosem_getUtilityTables>:
    if (e->index == 2)
   13a96:	7e03      	ldrb	r3, [r0, #24]
    gxUtilityTables* object = (gxUtilityTables*)e->target;
   13a98:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   13a9a:	2b02      	cmp	r3, #2
   13a9c:	d103      	bne.n	13aa6 <cosem_getUtilityTables+0x10>
        ret = cosem_setUInt16(e->value.byteArr, object->tableId);
   13a9e:	8a09      	ldrh	r1, [r1, #16]
   13aa0:	6880      	ldr	r0, [r0, #8]
   13aa2:	f7fb bb8f 	b.w	f1c4 <cosem_setUInt16>
    else if (e->index == 3)
   13aa6:	2b03      	cmp	r3, #3
   13aa8:	d005      	beq.n	13ab6 <cosem_getUtilityTables+0x20>
    else if (e->index == 4)
   13aaa:	2b04      	cmp	r3, #4
   13aac:	d105      	bne.n	13aba <cosem_getUtilityTables+0x24>
        ret = cosem_setOctetString(e->value.byteArr, &object->buffer);
   13aae:	6880      	ldr	r0, [r0, #8]
   13ab0:	3114      	adds	r1, #20
   13ab2:	f7fb bb0b 	b.w	f0cc <cosem_setOctetString>
    int ret = 0;
   13ab6:	2000      	movs	r0, #0
   13ab8:	4770      	bx	lr
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13aba:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   13abe:	4770      	bx	lr

00013ac0 <cosem_getMbusMasterPortSetup>:
    if (e->index == 2)
   13ac0:	7e03      	ldrb	r3, [r0, #24]
   13ac2:	2b02      	cmp	r3, #2
   13ac4:	d104      	bne.n	13ad0 <cosem_getMbusMasterPortSetup+0x10>
        ret = cosem_setEnum(e->value.byteArr, object->commSpeed);
   13ac6:	6943      	ldr	r3, [r0, #20]
   13ac8:	6880      	ldr	r0, [r0, #8]
   13aca:	7c19      	ldrb	r1, [r3, #16]
   13acc:	f7fb bbe3 	b.w	f296 <cosem_setEnum>
}
   13ad0:	f44f 7081 	mov.w	r0, #258	; 0x102
   13ad4:	4770      	bx	lr

00013ad6 <cosem_getPushSetup>:
{
   13ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   13ad8:	7e01      	ldrb	r1, [r0, #24]
    gxPushSetup* object = (gxPushSetup*)e->target;
   13ada:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13adc:	6887      	ldr	r7, [r0, #8]
    if (e->index == 2)
   13ade:	2902      	cmp	r1, #2
   13ae0:	d13f      	bne.n	13b62 <cosem_getPushSetup+0x8c>
        if ((ret = cosem_setArray(data, object->pushObjectList.size)) == 0)
   13ae2:	8ae1      	ldrh	r1, [r4, #22]
   13ae4:	4638      	mov	r0, r7
   13ae6:	f7fb fbc8 	bl	f27a <cosem_setArray>
   13aea:	2800      	cmp	r0, #0
   13aec:	d035      	beq.n	13b5a <cosem_getPushSetup+0x84>
}
   13aee:	b003      	add	sp, #12
   13af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   13af2:	aa01      	add	r2, sp, #4
   13af4:	4630      	mov	r0, r6
   13af6:	f7fe f850 	bl	11b9a <arr_getByIndex>
   13afa:	2800      	cmp	r0, #0
   13afc:	d1f7      	bne.n	13aee <cosem_getPushSetup+0x18>
                    (ret = cosem_setStructure(data, 4)) != 0 ||
   13afe:	2104      	movs	r1, #4
   13b00:	4638      	mov	r0, r7
   13b02:	f7fb fbac 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   13b06:	2800      	cmp	r0, #0
   13b08:	d1f1      	bne.n	13aee <cosem_getPushSetup+0x18>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
   13b0a:	9b01      	ldr	r3, [sp, #4]
   13b0c:	681b      	ldr	r3, [r3, #0]
   13b0e:	4638      	mov	r0, r7
   13b10:	8819      	ldrh	r1, [r3, #0]
   13b12:	f7fb fb57 	bl	f1c4 <cosem_setUInt16>
                    (ret = cosem_setStructure(data, 4)) != 0 ||
   13b16:	2800      	cmp	r0, #0
   13b18:	d1e9      	bne.n	13aee <cosem_getPushSetup+0x18>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   13b1a:	9b01      	ldr	r3, [sp, #4]
   13b1c:	6819      	ldr	r1, [r3, #0]
   13b1e:	2206      	movs	r2, #6
   13b20:	4411      	add	r1, r2
   13b22:	4638      	mov	r0, r7
   13b24:	f7fb fb1f 	bl	f166 <cosem_setOctetString2>
                    (ret = cosem_setUInt16(data, ((gxObject*)it->key)->objectType)) != 0 ||
   13b28:	2800      	cmp	r0, #0
   13b2a:	d1e0      	bne.n	13aee <cosem_getPushSetup+0x18>
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   13b2c:	9b01      	ldr	r3, [sp, #4]
   13b2e:	685b      	ldr	r3, [r3, #4]
   13b30:	4638      	mov	r0, r7
   13b32:	7819      	ldrb	r1, [r3, #0]
   13b34:	f7fb fb62 	bl	f1fc <cosem_setInt8>
                    (ret = cosem_setOctetString2(data, ((gxObject*)it->key)->logicalName, 6)) != 0 ||
   13b38:	2800      	cmp	r0, #0
   13b3a:	d1d8      	bne.n	13aee <cosem_getPushSetup+0x18>
                    (ret = cosem_setUInt16(data, ((gxTarget*)it->value)->dataIndex)) != 0)
   13b3c:	9b01      	ldr	r3, [sp, #4]
   13b3e:	685b      	ldr	r3, [r3, #4]
   13b40:	4638      	mov	r0, r7
   13b42:	8859      	ldrh	r1, [r3, #2]
   13b44:	f7fb fb3e 	bl	f1c4 <cosem_setUInt16>
   13b48:	3501      	adds	r5, #1
                    (ret = cosem_setInt8(data, ((gxTarget*)it->value)->attributeIndex)) != 0 ||
   13b4a:	2800      	cmp	r0, #0
   13b4c:	d1cf      	bne.n	13aee <cosem_getPushSetup+0x18>
            for (pos = 0; pos != object->pushObjectList.size; ++pos)
   13b4e:	8ae3      	ldrh	r3, [r4, #22]
   13b50:	b2a9      	uxth	r1, r5
   13b52:	428b      	cmp	r3, r1
   13b54:	d1cd      	bne.n	13af2 <cosem_getPushSetup+0x1c>
   13b56:	2000      	movs	r0, #0
   13b58:	e7c9      	b.n	13aee <cosem_getPushSetup+0x18>
   13b5a:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->pushObjectList, pos, (void**)&it)) != 0 ||
   13b5c:	f104 0610 	add.w	r6, r4, #16
   13b60:	e7f5      	b.n	13b4e <cosem_getPushSetup+0x78>
    else if (e->index == 3)
   13b62:	2903      	cmp	r1, #3
   13b64:	d117      	bne.n	13b96 <cosem_getPushSetup+0xc0>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   13b66:	4638      	mov	r0, r7
   13b68:	f7fb fb79 	bl	f25e <cosem_setStructure>
   13b6c:	2800      	cmp	r0, #0
   13b6e:	d1be      	bne.n	13aee <cosem_getPushSetup+0x18>
            (ret = cosem_setEnum(data, object->service)) != 0 ||
   13b70:	7f21      	ldrb	r1, [r4, #28]
   13b72:	4638      	mov	r0, r7
   13b74:	f7fb fb8f 	bl	f296 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   13b78:	2800      	cmp	r0, #0
   13b7a:	d1b8      	bne.n	13aee <cosem_getPushSetup+0x18>
            (ret = cosem_setOctetString(data, &object->destination)) != 0 ||
   13b7c:	f104 0120 	add.w	r1, r4, #32
   13b80:	4638      	mov	r0, r7
   13b82:	f7fb faa3 	bl	f0cc <cosem_setOctetString>
            (ret = cosem_setEnum(data, object->service)) != 0 ||
   13b86:	2800      	cmp	r0, #0
   13b88:	d1b1      	bne.n	13aee <cosem_getPushSetup+0x18>
            (ret = cosem_setEnum(data, object->message)) != 0)
   13b8a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   13b8e:	4638      	mov	r0, r7
   13b90:	f7fb fb81 	bl	f296 <cosem_setEnum>
   13b94:	e7ab      	b.n	13aee <cosem_getPushSetup+0x18>
    else if (e->index == 4)
   13b96:	2904      	cmp	r1, #4
   13b98:	d129      	bne.n	13bee <cosem_getPushSetup+0x118>
        if ((ret = cosem_setArray(data, object->communicationWindow.size)) == 0)
   13b9a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   13b9c:	4638      	mov	r0, r7
   13b9e:	f7fb fb6c 	bl	f27a <cosem_setArray>
   13ba2:	2800      	cmp	r0, #0
   13ba4:	d1a3      	bne.n	13aee <cosem_getPushSetup+0x18>
   13ba6:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->communicationWindow, pos, (void**)&it)) != 0 ||
   13ba8:	f104 0630 	add.w	r6, r4, #48	; 0x30
   13bac:	e01a      	b.n	13be4 <cosem_getPushSetup+0x10e>
   13bae:	aa01      	add	r2, sp, #4
   13bb0:	4630      	mov	r0, r6
   13bb2:	f7fd fff2 	bl	11b9a <arr_getByIndex>
   13bb6:	2800      	cmp	r0, #0
   13bb8:	d199      	bne.n	13aee <cosem_getPushSetup+0x18>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   13bba:	2102      	movs	r1, #2
   13bbc:	4638      	mov	r0, r7
   13bbe:	f7fb fb4e 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->communicationWindow, pos, (void**)&it)) != 0 ||
   13bc2:	2800      	cmp	r0, #0
   13bc4:	d193      	bne.n	13aee <cosem_getPushSetup+0x18>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->key)) != 0 ||
   13bc6:	9b01      	ldr	r3, [sp, #4]
   13bc8:	4638      	mov	r0, r7
   13bca:	6819      	ldr	r1, [r3, #0]
   13bcc:	f7fb f9f9 	bl	efc2 <cosem_setDateTimeAsOctetString>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   13bd0:	2800      	cmp	r0, #0
   13bd2:	d18c      	bne.n	13aee <cosem_getPushSetup+0x18>
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->value)) != 0)
   13bd4:	9b01      	ldr	r3, [sp, #4]
   13bd6:	4638      	mov	r0, r7
   13bd8:	6859      	ldr	r1, [r3, #4]
   13bda:	f7fb f9f2 	bl	efc2 <cosem_setDateTimeAsOctetString>
   13bde:	3501      	adds	r5, #1
                    (ret = cosem_setDateTimeAsOctetString(data, (gxtime*)it->key)) != 0 ||
   13be0:	2800      	cmp	r0, #0
   13be2:	d184      	bne.n	13aee <cosem_getPushSetup+0x18>
            for (pos = 0; pos != object->communicationWindow.size; ++pos)
   13be4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   13be6:	b2a9      	uxth	r1, r5
   13be8:	428b      	cmp	r3, r1
   13bea:	d1e0      	bne.n	13bae <cosem_getPushSetup+0xd8>
   13bec:	e7b3      	b.n	13b56 <cosem_getPushSetup+0x80>
    else if (e->index == 5)
   13bee:	2905      	cmp	r1, #5
   13bf0:	d104      	bne.n	13bfc <cosem_getPushSetup+0x126>
        ret = cosem_setUInt16(e->value.byteArr, object->randomisationStartInterval);
   13bf2:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
        ret = cosem_setUInt16(e->value.byteArr, object->repetitionDelay);
   13bf4:	4638      	mov	r0, r7
   13bf6:	f7fb fae5 	bl	f1c4 <cosem_setUInt16>
   13bfa:	e778      	b.n	13aee <cosem_getPushSetup+0x18>
    else if (e->index == 6)
   13bfc:	2906      	cmp	r1, #6
   13bfe:	d105      	bne.n	13c0c <cosem_getPushSetup+0x136>
        ret = cosem_setUInt8(e->value.byteArr, object->numberOfRetries);
   13c00:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
   13c04:	4638      	mov	r0, r7
   13c06:	f7fb facf 	bl	f1a8 <cosem_setUInt8>
   13c0a:	e770      	b.n	13aee <cosem_getPushSetup+0x18>
    else if (e->index == 7)
   13c0c:	2907      	cmp	r1, #7
   13c0e:	d102      	bne.n	13c16 <cosem_getPushSetup+0x140>
        ret = cosem_setUInt16(e->value.byteArr, object->repetitionDelay);
   13c10:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
   13c14:	e7ee      	b.n	13bf4 <cosem_getPushSetup+0x11e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13c16:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   13c1a:	e768      	b.n	13aee <cosem_getPushSetup+0x18>

00013c1c <cosem_getZigbeeNetworkControl>:
{
   13c1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (e->index == 2)
   13c20:	7e03      	ldrb	r3, [r0, #24]
    gxZigBeeNetworkControl* object = (gxZigBeeNetworkControl*)e->target;
   13c22:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   13c24:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   13c26:	2b02      	cmp	r3, #2
   13c28:	d105      	bne.n	13c36 <cosem_getZigbeeNetworkControl+0x1a>
        ret = cosem_setUInt8(e->value.byteArr, object->enableDisableJoining);
   13c2a:	7c31      	ldrb	r1, [r6, #16]
   13c2c:	4628      	mov	r0, r5
   13c2e:	f7fb fabb 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->stackVersion)) != 0)
   13c32:	4604      	mov	r4, r0
   13c34:	e016      	b.n	13c64 <cosem_getZigbeeNetworkControl+0x48>
    else if (e->index == 3)
   13c36:	2b03      	cmp	r3, #3
   13c38:	d104      	bne.n	13c44 <cosem_getZigbeeNetworkControl+0x28>
        ret = cosem_setUInt16(e->value.byteArr, object->joinTimeout);
   13c3a:	8a71      	ldrh	r1, [r6, #18]
   13c3c:	4628      	mov	r0, r5
   13c3e:	f7fb fac1 	bl	f1c4 <cosem_setUInt16>
   13c42:	e7f6      	b.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
    else if (e->index == 4)
   13c44:	2b04      	cmp	r3, #4
   13c46:	f040 8088 	bne.w	13d5a <cosem_getZigbeeNetworkControl+0x13e>
        if ((ret = cosem_setArray(data, object->activeDevices.size)) != 0)
   13c4a:	8b71      	ldrh	r1, [r6, #26]
   13c4c:	4628      	mov	r0, r5
   13c4e:	f7fb fb14 	bl	f27a <cosem_setArray>
   13c52:	4604      	mov	r4, r0
   13c54:	b930      	cbnz	r0, 13c64 <cosem_getZigbeeNetworkControl+0x48>
   13c56:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   13c58:	f106 0814 	add.w	r8, r6, #20
        for (pos = 0; pos != object->activeDevices.size; ++pos)
   13c5c:	8b73      	ldrh	r3, [r6, #26]
   13c5e:	b2b9      	uxth	r1, r7
   13c60:	428b      	cmp	r3, r1
   13c62:	d103      	bne.n	13c6c <cosem_getZigbeeNetworkControl+0x50>
}
   13c64:	4620      	mov	r0, r4
   13c66:	b002      	add	sp, #8
   13c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   13c6c:	aa01      	add	r2, sp, #4
   13c6e:	4640      	mov	r0, r8
   13c70:	f7fd ff93 	bl	11b9a <arr_getByIndex>
   13c74:	2800      	cmp	r0, #0
   13c76:	d1dc      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setStructure(data, 14)) != 0 ||
   13c78:	210e      	movs	r1, #14
   13c7a:	4628      	mov	r0, r5
   13c7c:	f7fb faef 	bl	f25e <cosem_setStructure>
            if ((ret = arr_getByIndex(&object->activeDevices, pos, (void**)&it)) != 0 ||
   13c80:	2800      	cmp	r0, #0
   13c82:	d1d6      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setOctetString(data, &it->macAddress)) != 0 ||
   13c84:	9901      	ldr	r1, [sp, #4]
   13c86:	4628      	mov	r0, r5
   13c88:	f7fb fa20 	bl	f0cc <cosem_setOctetString>
                (ret = cosem_setStructure(data, 14)) != 0 ||
   13c8c:	2800      	cmp	r0, #0
   13c8e:	d1d0      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setBitString(data, it->status, 5)) != 0 ||
   13c90:	9b01      	ldr	r3, [sp, #4]
   13c92:	2205      	movs	r2, #5
   13c94:	7b19      	ldrb	r1, [r3, #12]
   13c96:	4628      	mov	r0, r5
   13c98:	f7fb f9b9 	bl	f00e <cosem_setBitString>
                (ret = cosem_setOctetString(data, &it->macAddress)) != 0 ||
   13c9c:	2800      	cmp	r0, #0
   13c9e:	d1c8      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->maxRSSI)) != 0 ||
   13ca0:	9b01      	ldr	r3, [sp, #4]
   13ca2:	4628      	mov	r0, r5
   13ca4:	7b59      	ldrb	r1, [r3, #13]
   13ca6:	f7fb faa9 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setBitString(data, it->status, 5)) != 0 ||
   13caa:	2800      	cmp	r0, #0
   13cac:	d1c1      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->averageRSSI)) != 0 ||
   13cae:	9b01      	ldr	r3, [sp, #4]
   13cb0:	4628      	mov	r0, r5
   13cb2:	7b99      	ldrb	r1, [r3, #14]
   13cb4:	f7fb faa2 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->maxRSSI)) != 0 ||
   13cb8:	2800      	cmp	r0, #0
   13cba:	d1ba      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setInt8(data, it->minRSSI)) != 0 ||
   13cbc:	9b01      	ldr	r3, [sp, #4]
   13cbe:	4628      	mov	r0, r5
   13cc0:	7bd9      	ldrb	r1, [r3, #15]
   13cc2:	f7fb fa9b 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->averageRSSI)) != 0 ||
   13cc6:	2800      	cmp	r0, #0
   13cc8:	d1b3      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->maxLQI)) != 0 ||
   13cca:	9b01      	ldr	r3, [sp, #4]
   13ccc:	4628      	mov	r0, r5
   13cce:	7c19      	ldrb	r1, [r3, #16]
   13cd0:	f7fb fa6a 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setInt8(data, it->minRSSI)) != 0 ||
   13cd4:	2800      	cmp	r0, #0
   13cd6:	d1ac      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->averageLQI)) != 0 ||
   13cd8:	9b01      	ldr	r3, [sp, #4]
   13cda:	4628      	mov	r0, r5
   13cdc:	7c59      	ldrb	r1, [r3, #17]
   13cde:	f7fb fa63 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->maxLQI)) != 0 ||
   13ce2:	2800      	cmp	r0, #0
   13ce4:	d1a5      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->minLQI)) != 0 ||
   13ce6:	9b01      	ldr	r3, [sp, #4]
   13ce8:	4628      	mov	r0, r5
   13cea:	7c99      	ldrb	r1, [r3, #18]
   13cec:	f7fb fa5c 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->averageLQI)) != 0 ||
   13cf0:	2800      	cmp	r0, #0
   13cf2:	d19e      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setDateTimeAsOctetString(data, &it->lastCommunicationDateTime)) != 0 ||
   13cf4:	9901      	ldr	r1, [sp, #4]
   13cf6:	4628      	mov	r0, r5
   13cf8:	3114      	adds	r1, #20
   13cfa:	f7fb f962 	bl	efc2 <cosem_setDateTimeAsOctetString>
                (ret = cosem_setUInt8(data, it->minLQI)) != 0 ||
   13cfe:	2800      	cmp	r0, #0
   13d00:	d197      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->numberOfHops)) != 0 ||
   13d02:	9b01      	ldr	r3, [sp, #4]
   13d04:	4628      	mov	r0, r5
   13d06:	f893 1020 	ldrb.w	r1, [r3, #32]
   13d0a:	f7fb fa4d 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setDateTimeAsOctetString(data, &it->lastCommunicationDateTime)) != 0 ||
   13d0e:	2800      	cmp	r0, #0
   13d10:	d18f      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->transmissionFailures)) != 0 ||
   13d12:	9b01      	ldr	r3, [sp, #4]
   13d14:	4628      	mov	r0, r5
   13d16:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   13d1a:	f7fb fa45 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->numberOfHops)) != 0 ||
   13d1e:	2800      	cmp	r0, #0
   13d20:	d187      	bne.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->transmissionSuccesses)) != 0 ||
   13d22:	9b01      	ldr	r3, [sp, #4]
   13d24:	4628      	mov	r0, r5
   13d26:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
   13d2a:	f7fb fa3d 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->transmissionFailures)) != 0 ||
   13d2e:	2800      	cmp	r0, #0
   13d30:	f47f af7f 	bne.w	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->applicationVersion)) != 0 ||
   13d34:	9b01      	ldr	r3, [sp, #4]
   13d36:	4628      	mov	r0, r5
   13d38:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
   13d3c:	f7fb fa34 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, it->transmissionSuccesses)) != 0 ||
   13d40:	2800      	cmp	r0, #0
   13d42:	f47f af76 	bne.w	13c32 <cosem_getZigbeeNetworkControl+0x16>
                (ret = cosem_setUInt8(data, it->stackVersion)) != 0)
   13d46:	9b01      	ldr	r3, [sp, #4]
   13d48:	4628      	mov	r0, r5
   13d4a:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   13d4e:	f7fb fa2b 	bl	f1a8 <cosem_setUInt8>
   13d52:	3701      	adds	r7, #1
                (ret = cosem_setUInt8(data, it->applicationVersion)) != 0 ||
   13d54:	2800      	cmp	r0, #0
   13d56:	d081      	beq.n	13c5c <cosem_getZigbeeNetworkControl+0x40>
   13d58:	e76b      	b.n	13c32 <cosem_getZigbeeNetworkControl+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   13d5a:	f44f 7481 	mov.w	r4, #258	; 0x102
   13d5e:	e781      	b.n	13c64 <cosem_getZigbeeNetworkControl+0x48>

00013d60 <getUnitCharge>:
{
   13d60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxByteBuffer* data = e->value.byteArr;
   13d64:	688d      	ldr	r5, [r1, #8]
{
   13d66:	4606      	mov	r6, r0
    if ((ret = cosem_setStructure(data, 3)) != 0 ||
   13d68:	2103      	movs	r1, #3
   13d6a:	4628      	mov	r0, r5
   13d6c:	f7fb fa77 	bl	f25e <cosem_setStructure>
   13d70:	4604      	mov	r4, r0
   13d72:	2800      	cmp	r0, #0
   13d74:	d13c      	bne.n	13df0 <getUnitCharge+0x90>
        (ret = cosem_setStructure(data, 2)) != 0 ||
   13d76:	2102      	movs	r1, #2
   13d78:	4628      	mov	r0, r5
   13d7a:	f7fb fa70 	bl	f25e <cosem_setStructure>
    if ((ret = cosem_setStructure(data, 3)) != 0 ||
   13d7e:	4604      	mov	r4, r0
   13d80:	bbb0      	cbnz	r0, 13df0 <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
   13d82:	7831      	ldrb	r1, [r6, #0]
   13d84:	4628      	mov	r0, r5
   13d86:	f7fb fa39 	bl	f1fc <cosem_setInt8>
        (ret = cosem_setStructure(data, 2)) != 0 ||
   13d8a:	4604      	mov	r4, r0
   13d8c:	bb80      	cbnz	r0, 13df0 <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.priceScale)) != 0 ||
   13d8e:	7871      	ldrb	r1, [r6, #1]
   13d90:	4628      	mov	r0, r5
   13d92:	f7fb fa33 	bl	f1fc <cosem_setInt8>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.commodityScale)) != 0 ||
   13d96:	4604      	mov	r4, r0
   13d98:	bb50      	cbnz	r0, 13df0 <getUnitCharge+0x90>
        (ret = cosem_setStructure(data, 3)) != 0 ||
   13d9a:	2103      	movs	r1, #3
   13d9c:	4628      	mov	r0, r5
   13d9e:	f7fb fa5e 	bl	f25e <cosem_setStructure>
        (ret = cosem_setInt8(data, target->chargePerUnitScaling.priceScale)) != 0 ||
   13da2:	4604      	mov	r4, r0
   13da4:	bb20      	cbnz	r0, 13df0 <getUnitCharge+0x90>
        (ret = cosem_setUInt16(data, target->commodity.target == 0 ? 0 : target->commodity.target->objectType)) != 0 ||
   13da6:	6871      	ldr	r1, [r6, #4]
   13da8:	b101      	cbz	r1, 13dac <getUnitCharge+0x4c>
   13daa:	8809      	ldrh	r1, [r1, #0]
   13dac:	4628      	mov	r0, r5
   13dae:	f7fb fa09 	bl	f1c4 <cosem_setUInt16>
        (ret = cosem_setStructure(data, 3)) != 0 ||
   13db2:	4604      	mov	r4, r0
   13db4:	b9e0      	cbnz	r0, 13df0 <getUnitCharge+0x90>
        (ret = cosem_setOctetString2(data, obj_getLogicalName(target->commodity.target), 6)) != 0 ||
   13db6:	6870      	ldr	r0, [r6, #4]
   13db8:	f7f0 f96e 	bl	4098 <obj_getLogicalName>
   13dbc:	2206      	movs	r2, #6
   13dbe:	4601      	mov	r1, r0
   13dc0:	4628      	mov	r0, r5
   13dc2:	f7fb f9d0 	bl	f166 <cosem_setOctetString2>
        (ret = cosem_setUInt16(data, target->commodity.target == 0 ? 0 : target->commodity.target->objectType)) != 0 ||
   13dc6:	4604      	mov	r4, r0
   13dc8:	b990      	cbnz	r0, 13df0 <getUnitCharge+0x90>
        (ret = cosem_setInt8(data, target->commodity.attributeIndex)) != 0 ||
   13dca:	7a31      	ldrb	r1, [r6, #8]
   13dcc:	4628      	mov	r0, r5
   13dce:	f7fb fa15 	bl	f1fc <cosem_setInt8>
        (ret = cosem_setOctetString2(data, obj_getLogicalName(target->commodity.target), 6)) != 0 ||
   13dd2:	4604      	mov	r4, r0
   13dd4:	b960      	cbnz	r0, 13df0 <getUnitCharge+0x90>
        (ret = cosem_setArray(data, target->chargeTables.size)) != 0)
   13dd6:	8a71      	ldrh	r1, [r6, #18]
   13dd8:	4628      	mov	r0, r5
   13dda:	f7fb fa4e 	bl	f27a <cosem_setArray>
        (ret = cosem_setInt8(data, target->commodity.attributeIndex)) != 0 ||
   13dde:	4604      	mov	r4, r0
   13de0:	b930      	cbnz	r0, 13df0 <getUnitCharge+0x90>
   13de2:	4607      	mov	r7, r0
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   13de4:	f106 080c 	add.w	r8, r6, #12
    for (pos = 0; pos != target->chargeTables.size; ++pos)
   13de8:	8a73      	ldrh	r3, [r6, #18]
   13dea:	b2b9      	uxth	r1, r7
   13dec:	428b      	cmp	r3, r1
   13dee:	d103      	bne.n	13df8 <getUnitCharge+0x98>
}
   13df0:	4620      	mov	r0, r4
   13df2:	b002      	add	sp, #8
   13df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   13df8:	aa01      	add	r2, sp, #4
   13dfa:	4640      	mov	r0, r8
   13dfc:	f7fd fecd 	bl	11b9a <arr_getByIndex>
   13e00:	b990      	cbnz	r0, 13e28 <getUnitCharge+0xc8>
            (ret = cosem_setStructure(data, 2)) != 0 ||
   13e02:	2102      	movs	r1, #2
   13e04:	4628      	mov	r0, r5
   13e06:	f7fb fa2a 	bl	f25e <cosem_setStructure>
        if ((ret = arr_getByIndex(&target->chargeTables, pos, (void**)&it)) != 0 ||
   13e0a:	b968      	cbnz	r0, 13e28 <getUnitCharge+0xc8>
            (ret = cosem_setOctetString(data, &it->index)) != 0 ||
   13e0c:	9901      	ldr	r1, [sp, #4]
   13e0e:	4628      	mov	r0, r5
   13e10:	f7fb f95c 	bl	f0cc <cosem_setOctetString>
            (ret = cosem_setStructure(data, 2)) != 0 ||
   13e14:	b940      	cbnz	r0, 13e28 <getUnitCharge+0xc8>
            (ret = cosem_setInt16(data, it->chargePerUnit)) != 0)
   13e16:	9b01      	ldr	r3, [sp, #4]
   13e18:	4628      	mov	r0, r5
   13e1a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   13e1e:	f7fb f9fb 	bl	f218 <cosem_setInt16>
   13e22:	3701      	adds	r7, #1
            (ret = cosem_setOctetString(data, &it->index)) != 0 ||
   13e24:	2800      	cmp	r0, #0
   13e26:	d0df      	beq.n	13de8 <getUnitCharge+0x88>
            (ret = cosem_setInt16(data, it->chargePerUnit)) != 0)
   13e28:	4604      	mov	r4, r0
   13e2a:	e7e1      	b.n	13df0 <getUnitCharge+0x90>

00013e2c <cosem_getCharge>:
    if (e->index == 2)
   13e2c:	7e02      	ldrb	r2, [r0, #24]
    gxCharge* object = (gxCharge*)e->target;
   13e2e:	6943      	ldr	r3, [r0, #20]
    if (e->index == 2)
   13e30:	2a02      	cmp	r2, #2
   13e32:	d103      	bne.n	13e3c <cosem_getCharge+0x10>
        ret = cosem_setInt32(e->value.byteArr, object->totalAmountPaid);
   13e34:	6919      	ldr	r1, [r3, #16]
        ret = cosem_setInt32(e->value.byteArr, object->lastCollectionAmount);
   13e36:	6880      	ldr	r0, [r0, #8]
   13e38:	f7fb b9fc 	b.w	f234 <cosem_setInt32>
    else if (e->index == 3)
   13e3c:	2a03      	cmp	r2, #3
   13e3e:	d103      	bne.n	13e48 <cosem_getCharge+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->chargeType);
   13e40:	7d19      	ldrb	r1, [r3, #20]
   13e42:	6880      	ldr	r0, [r0, #8]
   13e44:	f7fb ba27 	b.w	f296 <cosem_setEnum>
    else if (e->index == 4)
   13e48:	2a04      	cmp	r2, #4
   13e4a:	d103      	bne.n	13e54 <cosem_getCharge+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->priority);
   13e4c:	7d59      	ldrb	r1, [r3, #21]
   13e4e:	6880      	ldr	r0, [r0, #8]
   13e50:	f7fb b9aa 	b.w	f1a8 <cosem_setUInt8>
    else if (e->index == 5)
   13e54:	2a05      	cmp	r2, #5
   13e56:	d104      	bne.n	13e62 <cosem_getCharge+0x36>
        ret = getUnitCharge(&object->unitChargeActive, e);
   13e58:	4601      	mov	r1, r0
   13e5a:	f103 0018 	add.w	r0, r3, #24
        ret = getUnitCharge(&object->unitChargePassive, e);
   13e5e:	f7ff bf7f 	b.w	13d60 <getUnitCharge>
    else if (e->index == 6)
   13e62:	2a06      	cmp	r2, #6
   13e64:	d103      	bne.n	13e6e <cosem_getCharge+0x42>
        ret = getUnitCharge(&object->unitChargePassive, e);
   13e66:	4601      	mov	r1, r0
   13e68:	f103 0030 	add.w	r0, r3, #48	; 0x30
   13e6c:	e7f7      	b.n	13e5e <cosem_getCharge+0x32>
    else if (e->index == 7)
   13e6e:	2a07      	cmp	r2, #7
   13e70:	d104      	bne.n	13e7c <cosem_getCharge+0x50>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->unitChargeActivationTime);
   13e72:	6880      	ldr	r0, [r0, #8]
   13e74:	f103 0148 	add.w	r1, r3, #72	; 0x48
   13e78:	f7fb b8a3 	b.w	efc2 <cosem_setDateTimeAsOctetString>
    else if (e->index == 8)
   13e7c:	2a08      	cmp	r2, #8
   13e7e:	d103      	bne.n	13e88 <cosem_getCharge+0x5c>
        ret = cosem_setUInt32(e->value.byteArr, object->period);
   13e80:	6d59      	ldr	r1, [r3, #84]	; 0x54
   13e82:	6880      	ldr	r0, [r0, #8]
   13e84:	f7fb b9ac 	b.w	f1e0 <cosem_setUInt32>
    else if (e->index == 9)
   13e88:	2a09      	cmp	r2, #9
   13e8a:	d105      	bne.n	13e98 <cosem_getCharge+0x6c>
        ret = cosem_setBitString(e->value.byteArr, object->chargeConfiguration, 2);
   13e8c:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
   13e90:	6880      	ldr	r0, [r0, #8]
   13e92:	2202      	movs	r2, #2
   13e94:	f7fb b8bb 	b.w	f00e <cosem_setBitString>
    else if (e->index == 10)
   13e98:	2a0a      	cmp	r2, #10
   13e9a:	d104      	bne.n	13ea6 <cosem_getCharge+0x7a>
        ret = cosem_setDateTime(e->value.byteArr, &object->lastCollectionTime);
   13e9c:	6880      	ldr	r0, [r0, #8]
   13e9e:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   13ea2:	f7fb b952 	b.w	f14a <cosem_setDateTime>
    else if (e->index == 11)
   13ea6:	2a0b      	cmp	r2, #11
   13ea8:	d101      	bne.n	13eae <cosem_getCharge+0x82>
        ret = cosem_setInt32(e->value.byteArr, object->lastCollectionAmount);
   13eaa:	6e99      	ldr	r1, [r3, #104]	; 0x68
   13eac:	e7c3      	b.n	13e36 <cosem_getCharge+0xa>
    else if (e->index == 12)
   13eae:	2a0c      	cmp	r2, #12
   13eb0:	d101      	bne.n	13eb6 <cosem_getCharge+0x8a>
        ret = cosem_setInt32(e->value.byteArr, object->totalAmountRemaining);
   13eb2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   13eb4:	e7bf      	b.n	13e36 <cosem_getCharge+0xa>
    else if (e->index == 13)
   13eb6:	2a0d      	cmp	r2, #13
   13eb8:	d104      	bne.n	13ec4 <cosem_getCharge+0x98>
        ret = cosem_setUInt16(e->value.byteArr, object->proportion);
   13eba:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   13ebe:	6880      	ldr	r0, [r0, #8]
   13ec0:	f7fb b980 	b.w	f1c4 <cosem_setUInt16>
}
   13ec4:	f44f 7081 	mov.w	r0, #258	; 0x102
   13ec8:	4770      	bx	lr

00013eca <cosem_getTokenGateway>:
{
   13eca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13ece:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   13ed0:	6886      	ldr	r6, [r0, #8]
    gxTokenGateway* object = (gxTokenGateway*)e->target;
   13ed2:	6945      	ldr	r5, [r0, #20]
    switch (e->index)
   13ed4:	3b02      	subs	r3, #2
   13ed6:	2b04      	cmp	r3, #4
   13ed8:	d860      	bhi.n	13f9c <cosem_getTokenGateway+0xd2>
   13eda:	e8df f003 	tbb	[pc, r3]
   13ede:	0a03      	.short	0x0a03
   13ee0:	3210      	.short	0x3210
   13ee2:	38          	.byte	0x38
   13ee3:	00          	.byte	0x00
        ret = cosem_setOctetString2(data, object->token.data, (uint16_t)object->token.size);
   13ee4:	8aea      	ldrh	r2, [r5, #22]
   13ee6:	6929      	ldr	r1, [r5, #16]
   13ee8:	4630      	mov	r0, r6
   13eea:	f7fb f93c 	bl	f166 <cosem_setOctetString2>
                    (ret = cosem_setOctetString(data, it)) != 0)
   13eee:	4604      	mov	r4, r0
    return ret;
   13ef0:	e00b      	b.n	13f0a <cosem_getTokenGateway+0x40>
        ret = cosem_setDateTimeAsOctetString(data, &object->time);
   13ef2:	f105 011c 	add.w	r1, r5, #28
   13ef6:	4630      	mov	r0, r6
   13ef8:	f7fb f863 	bl	efc2 <cosem_setDateTimeAsOctetString>
   13efc:	e7f7      	b.n	13eee <cosem_getTokenGateway+0x24>
        if ((ret = cosem_setArray(data, object->descriptions.size)) == 0)
   13efe:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
   13f00:	4630      	mov	r0, r6
   13f02:	f7fb f9ba 	bl	f27a <cosem_setArray>
   13f06:	4604      	mov	r4, r0
   13f08:	b1b8      	cbz	r0, 13f3a <cosem_getTokenGateway+0x70>
}
   13f0a:	4620      	mov	r0, r4
   13f0c:	b002      	add	sp, #8
   13f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   13f12:	aa01      	add	r2, sp, #4
   13f14:	4638      	mov	r0, r7
   13f16:	f7fd fe40 	bl	11b9a <arr_getByIndex>
   13f1a:	2800      	cmp	r0, #0
   13f1c:	d1e7      	bne.n	13eee <cosem_getTokenGateway+0x24>
                    (ret = cosem_setOctetString(data, it)) != 0)
   13f1e:	9901      	ldr	r1, [sp, #4]
   13f20:	4630      	mov	r0, r6
   13f22:	f7fb f8d3 	bl	f0cc <cosem_setOctetString>
   13f26:	f108 0801 	add.w	r8, r8, #1
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   13f2a:	2800      	cmp	r0, #0
   13f2c:	d1df      	bne.n	13eee <cosem_getTokenGateway+0x24>
            for (pos = 0; pos != object->descriptions.size; ++pos)
   13f2e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   13f30:	fa1f f188 	uxth.w	r1, r8
   13f34:	428b      	cmp	r3, r1
   13f36:	d1ec      	bne.n	13f12 <cosem_getTokenGateway+0x48>
   13f38:	e7e7      	b.n	13f0a <cosem_getTokenGateway+0x40>
   13f3a:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->descriptions, pos, (void**)&it)) != 0 ||
   13f3c:	f105 0728 	add.w	r7, r5, #40	; 0x28
   13f40:	e7f5      	b.n	13f2e <cosem_getTokenGateway+0x64>
        ret = cosem_setEnum(e->value.byteArr, object->deliveryMethod);
   13f42:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   13f46:	4630      	mov	r0, r6
   13f48:	f7fb f9a5 	bl	f296 <cosem_setEnum>
   13f4c:	e7cf      	b.n	13eee <cosem_getTokenGateway+0x24>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   13f4e:	2102      	movs	r1, #2
   13f50:	4630      	mov	r0, r6
   13f52:	f7fb f984 	bl	f25e <cosem_setStructure>
   13f56:	4604      	mov	r4, r0
   13f58:	2800      	cmp	r0, #0
   13f5a:	d1d6      	bne.n	13f0a <cosem_getTokenGateway+0x40>
            (ret = cosem_setEnum(data, object->status)) != 0 ||
   13f5c:	f895 1035 	ldrb.w	r1, [r5, #53]	; 0x35
   13f60:	4630      	mov	r0, r6
   13f62:	f7fb f998 	bl	f296 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   13f66:	4604      	mov	r4, r0
   13f68:	2800      	cmp	r0, #0
   13f6a:	d1ce      	bne.n	13f0a <cosem_getTokenGateway+0x40>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13f6c:	2104      	movs	r1, #4
   13f6e:	4630      	mov	r0, r6
   13f70:	f7fa fa4d 	bl	e40e <bb_setUInt8>
            (ret = cosem_setEnum(data, object->status)) != 0 ||
   13f74:	4604      	mov	r4, r0
   13f76:	2800      	cmp	r0, #0
   13f78:	d1c7      	bne.n	13f0a <cosem_getTokenGateway+0x40>
            (ret = hlp_setObjectCount(object->dataValue.size, data)) != 0 ||
   13f7a:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
   13f7c:	4631      	mov	r1, r6
   13f7e:	f007 fb42 	bl	1b606 <hlp_setObjectCount>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   13f82:	4604      	mov	r4, r0
   13f84:	2800      	cmp	r0, #0
   13f86:	d1c0      	bne.n	13f0a <cosem_getTokenGateway+0x40>
            (ret = bb_set(data, object->dataValue.data, ba_getByteCount(object->dataValue.size))) != 0)
   13f88:	8fe8      	ldrh	r0, [r5, #62]	; 0x3e
   13f8a:	6bac      	ldr	r4, [r5, #56]	; 0x38
   13f8c:	f7ed fafa 	bl	1584 <ba_getByteCount>
   13f90:	4621      	mov	r1, r4
   13f92:	4602      	mov	r2, r0
   13f94:	4630      	mov	r0, r6
   13f96:	f7fa fb20 	bl	e5da <bb_set>
   13f9a:	e7a8      	b.n	13eee <cosem_getTokenGateway+0x24>
    switch (e->index)
   13f9c:	f44f 7481 	mov.w	r4, #258	; 0x102
   13fa0:	e7b3      	b.n	13f0a <cosem_getTokenGateway+0x40>

00013fa2 <cosem_getCredit>:
    if (e->index == 2)
   13fa2:	7e03      	ldrb	r3, [r0, #24]
    gxCredit* object = (gxCredit*)e->target;
   13fa4:	6941      	ldr	r1, [r0, #20]
    if (e->index == 2)
   13fa6:	2b02      	cmp	r3, #2
   13fa8:	d103      	bne.n	13fb2 <cosem_getCredit+0x10>
        ret = cosem_setInt32(e->value.byteArr, object->currentCreditAmount);
   13faa:	6909      	ldr	r1, [r1, #16]
        ret = cosem_setInt32(e->value.byteArr, object->warningThreshold);
   13fac:	6880      	ldr	r0, [r0, #8]
   13fae:	f7fb b941 	b.w	f234 <cosem_setInt32>
    else if (e->index == 3)
   13fb2:	2b03      	cmp	r3, #3
   13fb4:	d103      	bne.n	13fbe <cosem_getCredit+0x1c>
        ret = cosem_setEnum(e->value.byteArr, object->type);
   13fb6:	7d09      	ldrb	r1, [r1, #20]
        ret = cosem_setEnum(e->value.byteArr, object->status);
   13fb8:	6880      	ldr	r0, [r0, #8]
   13fba:	f7fb b96c 	b.w	f296 <cosem_setEnum>
    else if (e->index == 4)
   13fbe:	2b04      	cmp	r3, #4
   13fc0:	d103      	bne.n	13fca <cosem_getCredit+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->priority);
   13fc2:	7d49      	ldrb	r1, [r1, #21]
   13fc4:	6880      	ldr	r0, [r0, #8]
   13fc6:	f7fb b8ef 	b.w	f1a8 <cosem_setUInt8>
    else if (e->index == 5)
   13fca:	2b05      	cmp	r3, #5
   13fcc:	d101      	bne.n	13fd2 <cosem_getCredit+0x30>
        ret = cosem_setInt32(e->value.byteArr, object->warningThreshold);
   13fce:	6989      	ldr	r1, [r1, #24]
   13fd0:	e7ec      	b.n	13fac <cosem_getCredit+0xa>
    else if (e->index == 6)
   13fd2:	2b06      	cmp	r3, #6
   13fd4:	d101      	bne.n	13fda <cosem_getCredit+0x38>
        ret = cosem_setInt32(e->value.byteArr, object->limit);
   13fd6:	69c9      	ldr	r1, [r1, #28]
   13fd8:	e7e8      	b.n	13fac <cosem_getCredit+0xa>
    else if (e->index == 7)
   13fda:	2b07      	cmp	r3, #7
   13fdc:	d105      	bne.n	13fea <cosem_getCredit+0x48>
        ret = cosem_setBitString(e->value.byteArr, object->creditConfiguration, 5);
   13fde:	f891 1020 	ldrb.w	r1, [r1, #32]
   13fe2:	6880      	ldr	r0, [r0, #8]
   13fe4:	2205      	movs	r2, #5
   13fe6:	f7fb b812 	b.w	f00e <cosem_setBitString>
    else if (e->index == 8)
   13fea:	2b08      	cmp	r3, #8
   13fec:	d102      	bne.n	13ff4 <cosem_getCredit+0x52>
        ret = cosem_setEnum(e->value.byteArr, object->status);
   13fee:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
   13ff2:	e7e1      	b.n	13fb8 <cosem_getCredit+0x16>
    else if (e->index == 9)
   13ff4:	2b09      	cmp	r3, #9
   13ff6:	d101      	bne.n	13ffc <cosem_getCredit+0x5a>
        ret = cosem_setInt32(e->value.byteArr, object->presetCreditAmount);
   13ff8:	6a49      	ldr	r1, [r1, #36]	; 0x24
   13ffa:	e7d7      	b.n	13fac <cosem_getCredit+0xa>
    else if (e->index == 10)
   13ffc:	2b0a      	cmp	r3, #10
   13ffe:	d101      	bne.n	14004 <cosem_getCredit+0x62>
        ret = cosem_setInt32(e->value.byteArr, object->creditAvailableThreshold);
   14000:	6a89      	ldr	r1, [r1, #40]	; 0x28
   14002:	e7d3      	b.n	13fac <cosem_getCredit+0xa>
    else if (e->index == 11)
   14004:	2b0b      	cmp	r3, #11
   14006:	d103      	bne.n	14010 <cosem_getCredit+0x6e>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->period);
   14008:	6880      	ldr	r0, [r0, #8]
   1400a:	312c      	adds	r1, #44	; 0x2c
   1400c:	f7fa bfd9 	b.w	efc2 <cosem_setDateTimeAsOctetString>
}
   14010:	f44f 7081 	mov.w	r0, #258	; 0x102
   14014:	4770      	bx	lr

00014016 <cosem_getAccount>:
{
   14016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (e->index == 2)
   14018:	7e01      	ldrb	r1, [r0, #24]
    gxAccount* object = (gxAccount*)e->target;
   1401a:	6944      	ldr	r4, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   1401c:	6885      	ldr	r5, [r0, #8]
    if (e->index == 2)
   1401e:	2902      	cmp	r1, #2
   14020:	d111      	bne.n	14046 <cosem_getAccount+0x30>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   14022:	4628      	mov	r0, r5
   14024:	f7fb f91b 	bl	f25e <cosem_setStructure>
   14028:	b998      	cbnz	r0, 14052 <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->paymentMode & 0x3)) != 0 ||
   1402a:	7c21      	ldrb	r1, [r4, #16]
   1402c:	4628      	mov	r0, r5
   1402e:	f001 0103 	and.w	r1, r1, #3
   14032:	f7fb f930 	bl	f296 <cosem_setEnum>
        if ((ret = cosem_setStructure(data, 2)) != 0 ||
   14036:	b960      	cbnz	r0, 14052 <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->accountStatus & 0x3)) != 0)
   14038:	7c61      	ldrb	r1, [r4, #17]
   1403a:	f001 0103 	and.w	r1, r1, #3
            (ret = cosem_setEnum(data, object->currency.unit)) != 0)
   1403e:	4628      	mov	r0, r5
   14040:	f7fb f929 	bl	f296 <cosem_setEnum>
   14044:	e005      	b.n	14052 <cosem_getAccount+0x3c>
    else if (e->index == 3)
   14046:	2903      	cmp	r1, #3
   14048:	d105      	bne.n	14056 <cosem_getAccount+0x40>
        ret = cosem_setUInt8(e->value.byteArr, object->currentCreditInUse);
   1404a:	7ca1      	ldrb	r1, [r4, #18]
   1404c:	4628      	mov	r0, r5
   1404e:	f7fb f8ab 	bl	f1a8 <cosem_setUInt8>
}
   14052:	b003      	add	sp, #12
   14054:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (e->index == 4)
   14056:	2904      	cmp	r1, #4
   14058:	d105      	bne.n	14066 <cosem_getAccount+0x50>
        ret = cosem_setBitString(e->value.byteArr, object->currentCreditStatus, 7);
   1405a:	7ce1      	ldrb	r1, [r4, #19]
   1405c:	2207      	movs	r2, #7
   1405e:	4628      	mov	r0, r5
   14060:	f7fa ffd5 	bl	f00e <cosem_setBitString>
   14064:	e7f5      	b.n	14052 <cosem_getAccount+0x3c>
    else if (e->index == 5)
   14066:	2905      	cmp	r1, #5
   14068:	d104      	bne.n	14074 <cosem_getAccount+0x5e>
        ret = cosem_setInt32(e->value.byteArr, object->availableCredit);
   1406a:	6961      	ldr	r1, [r4, #20]
        ret = cosem_setInt32(e->value.byteArr, object->maxProvisionPeriod);
   1406c:	4628      	mov	r0, r5
   1406e:	f7fb f8e1 	bl	f234 <cosem_setInt32>
   14072:	e7ee      	b.n	14052 <cosem_getAccount+0x3c>
    else if (e->index == 6)
   14074:	2906      	cmp	r1, #6
   14076:	d101      	bne.n	1407c <cosem_getAccount+0x66>
        ret = cosem_setInt32(e->value.byteArr, object->amountToClear);
   14078:	69a1      	ldr	r1, [r4, #24]
   1407a:	e7f7      	b.n	1406c <cosem_getAccount+0x56>
    else if (e->index == 7)
   1407c:	2907      	cmp	r1, #7
   1407e:	d101      	bne.n	14084 <cosem_getAccount+0x6e>
        ret = cosem_setInt32(e->value.byteArr, object->clearanceThreshold);
   14080:	69e1      	ldr	r1, [r4, #28]
   14082:	e7f3      	b.n	1406c <cosem_getAccount+0x56>
    else if (e->index == 8)
   14084:	2908      	cmp	r1, #8
   14086:	d101      	bne.n	1408c <cosem_getAccount+0x76>
        ret = cosem_setInt32(e->value.byteArr, object->aggregatedDebt);
   14088:	6a21      	ldr	r1, [r4, #32]
   1408a:	e7ef      	b.n	1406c <cosem_getAccount+0x56>
    else if (e->index == 9)
   1408c:	2909      	cmp	r1, #9
   1408e:	d11d      	bne.n	140cc <cosem_getAccount+0xb6>
        if ((ret = cosem_setArray(data, object->creditReferences.size)) == 0)
   14090:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   14092:	4628      	mov	r0, r5
   14094:	f7fb f8f1 	bl	f27a <cosem_setArray>
   14098:	2800      	cmp	r0, #0
   1409a:	d1da      	bne.n	14052 <cosem_getAccount+0x3c>
   1409c:	4606      	mov	r6, r0
                if ((ret = arr_getByIndex(&object->creditReferences, pos, (void**)&it)) != 0 ||
   1409e:	f104 0724 	add.w	r7, r4, #36	; 0x24
   140a2:	e00d      	b.n	140c0 <cosem_getAccount+0xaa>
   140a4:	aa01      	add	r2, sp, #4
   140a6:	4638      	mov	r0, r7
   140a8:	f7fd fd77 	bl	11b9a <arr_getByIndex>
   140ac:	2800      	cmp	r0, #0
   140ae:	d1d0      	bne.n	14052 <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, it, 6)) != 0)
   140b0:	9901      	ldr	r1, [sp, #4]
   140b2:	2206      	movs	r2, #6
   140b4:	4628      	mov	r0, r5
   140b6:	f7fb f856 	bl	f166 <cosem_setOctetString2>
   140ba:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(&object->creditReferences, pos, (void**)&it)) != 0 ||
   140bc:	2800      	cmp	r0, #0
   140be:	d1c8      	bne.n	14052 <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->creditReferences.size; ++pos)
   140c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   140c2:	b2b1      	uxth	r1, r6
   140c4:	428b      	cmp	r3, r1
   140c6:	d1ed      	bne.n	140a4 <cosem_getAccount+0x8e>
   140c8:	2000      	movs	r0, #0
   140ca:	e7c2      	b.n	14052 <cosem_getAccount+0x3c>
    else if (e->index == 10)
   140cc:	290a      	cmp	r1, #10
   140ce:	d11c      	bne.n	1410a <cosem_getAccount+0xf4>
        if ((ret = cosem_setArray(data, object->chargeReferences.size)) == 0)
   140d0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   140d2:	4628      	mov	r0, r5
   140d4:	f7fb f8d1 	bl	f27a <cosem_setArray>
   140d8:	2800      	cmp	r0, #0
   140da:	d1ba      	bne.n	14052 <cosem_getAccount+0x3c>
   140dc:	2600      	movs	r6, #0
                if ((ret = arr_getByIndex(&object->chargeReferences, pos, (void**)&it)) != 0 ||
   140de:	f104 0730 	add.w	r7, r4, #48	; 0x30
   140e2:	e00d      	b.n	14100 <cosem_getAccount+0xea>
   140e4:	aa01      	add	r2, sp, #4
   140e6:	4638      	mov	r0, r7
   140e8:	f7fd fd57 	bl	11b9a <arr_getByIndex>
   140ec:	2800      	cmp	r0, #0
   140ee:	d1b0      	bne.n	14052 <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, it, 6)) != 0)
   140f0:	9901      	ldr	r1, [sp, #4]
   140f2:	2206      	movs	r2, #6
   140f4:	4628      	mov	r0, r5
   140f6:	f7fb f836 	bl	f166 <cosem_setOctetString2>
   140fa:	3601      	adds	r6, #1
                if ((ret = arr_getByIndex(&object->chargeReferences, pos, (void**)&it)) != 0 ||
   140fc:	2800      	cmp	r0, #0
   140fe:	d1a8      	bne.n	14052 <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->chargeReferences.size; ++pos)
   14100:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   14102:	b2b1      	uxth	r1, r6
   14104:	428b      	cmp	r3, r1
   14106:	d1ed      	bne.n	140e4 <cosem_getAccount+0xce>
   14108:	e7de      	b.n	140c8 <cosem_getAccount+0xb2>
    else if (e->index == 11)
   1410a:	290b      	cmp	r1, #11
   1410c:	d136      	bne.n	1417c <cosem_getAccount+0x166>
        if ((ret = cosem_setArray(data, object->creditChargeConfigurations.size)) == 0)
   1410e:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
   14112:	4628      	mov	r0, r5
   14114:	f7fb f8b1 	bl	f27a <cosem_setArray>
   14118:	2800      	cmp	r0, #0
   1411a:	d19a      	bne.n	14052 <cosem_getAccount+0x3c>
   1411c:	4606      	mov	r6, r0
                    if ((ret = arr_getByIndex(&object->creditChargeConfigurations, pos, (void**)&ccc)) != 0 ||
   1411e:	f104 073c 	add.w	r7, r4, #60	; 0x3c
   14122:	e025      	b.n	14170 <cosem_getAccount+0x15a>
   14124:	aa01      	add	r2, sp, #4
   14126:	4638      	mov	r0, r7
   14128:	f7fd fd37 	bl	11b9a <arr_getByIndex>
   1412c:	2800      	cmp	r0, #0
   1412e:	d190      	bne.n	14052 <cosem_getAccount+0x3c>
                        (ret = cosem_setStructure(data, 3)) != 0 ||
   14130:	2103      	movs	r1, #3
   14132:	4628      	mov	r0, r5
   14134:	f7fb f893 	bl	f25e <cosem_setStructure>
                    if ((ret = arr_getByIndex(&object->creditChargeConfigurations, pos, (void**)&ccc)) != 0 ||
   14138:	2800      	cmp	r0, #0
   1413a:	d18a      	bne.n	14052 <cosem_getAccount+0x3c>
                        (ret = cosem_setOctetString2(data, ccc->creditReference, 6)) != 0 ||
   1413c:	9901      	ldr	r1, [sp, #4]
   1413e:	2206      	movs	r2, #6
   14140:	4628      	mov	r0, r5
   14142:	f7fb f810 	bl	f166 <cosem_setOctetString2>
                        (ret = cosem_setStructure(data, 3)) != 0 ||
   14146:	2800      	cmp	r0, #0
   14148:	d183      	bne.n	14052 <cosem_getAccount+0x3c>
                        (ret = cosem_setOctetString2(data, ccc->chargeReference, 6)) != 0 ||
   1414a:	9901      	ldr	r1, [sp, #4]
   1414c:	2206      	movs	r2, #6
   1414e:	4411      	add	r1, r2
   14150:	4628      	mov	r0, r5
   14152:	f7fb f808 	bl	f166 <cosem_setOctetString2>
                        (ret = cosem_setOctetString2(data, ccc->creditReference, 6)) != 0 ||
   14156:	2800      	cmp	r0, #0
   14158:	f47f af7b 	bne.w	14052 <cosem_getAccount+0x3c>
                        (ret = cosem_setBitString(data, ccc->collectionConfiguration, 3)) != 0)
   1415c:	9b01      	ldr	r3, [sp, #4]
   1415e:	2203      	movs	r2, #3
   14160:	7b19      	ldrb	r1, [r3, #12]
   14162:	4628      	mov	r0, r5
   14164:	f7fa ff53 	bl	f00e <cosem_setBitString>
   14168:	3601      	adds	r6, #1
                        (ret = cosem_setOctetString2(data, ccc->chargeReference, 6)) != 0 ||
   1416a:	2800      	cmp	r0, #0
   1416c:	f47f af71 	bne.w	14052 <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->creditChargeConfigurations.size; ++pos)
   14170:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   14174:	b2b1      	uxth	r1, r6
   14176:	428b      	cmp	r3, r1
   14178:	d1d4      	bne.n	14124 <cosem_getAccount+0x10e>
   1417a:	e7a5      	b.n	140c8 <cosem_getAccount+0xb2>
    else if (e->index == 12)
   1417c:	290c      	cmp	r1, #12
   1417e:	d130      	bne.n	141e2 <cosem_getAccount+0x1cc>
        if ((ret = cosem_setArray(data, object->tokenGatewayConfigurations.size)) == 0)
   14180:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
   14184:	4628      	mov	r0, r5
   14186:	f7fb f878 	bl	f27a <cosem_setArray>
   1418a:	2800      	cmp	r0, #0
   1418c:	f47f af61 	bne.w	14052 <cosem_getAccount+0x3c>
   14190:	4606      	mov	r6, r0
                if ((ret = arr_getByIndex(&object->tokenGatewayConfigurations, pos, (void**)&gwc)) != 0 ||
   14192:	f104 0748 	add.w	r7, r4, #72	; 0x48
   14196:	e01e      	b.n	141d6 <cosem_getAccount+0x1c0>
   14198:	aa01      	add	r2, sp, #4
   1419a:	4638      	mov	r0, r7
   1419c:	f7fd fcfd 	bl	11b9a <arr_getByIndex>
   141a0:	2800      	cmp	r0, #0
   141a2:	f47f af56 	bne.w	14052 <cosem_getAccount+0x3c>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   141a6:	2102      	movs	r1, #2
   141a8:	4628      	mov	r0, r5
   141aa:	f7fb f858 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->tokenGatewayConfigurations, pos, (void**)&gwc)) != 0 ||
   141ae:	2800      	cmp	r0, #0
   141b0:	f47f af4f 	bne.w	14052 <cosem_getAccount+0x3c>
                    (ret = cosem_setOctetString2(data, gwc->creditReference, 6)) != 0 ||
   141b4:	9901      	ldr	r1, [sp, #4]
   141b6:	2206      	movs	r2, #6
   141b8:	4628      	mov	r0, r5
   141ba:	f7fa ffd4 	bl	f166 <cosem_setOctetString2>
                    (ret = cosem_setStructure(data, 2)) != 0 ||
   141be:	2800      	cmp	r0, #0
   141c0:	f47f af47 	bne.w	14052 <cosem_getAccount+0x3c>
                    (ret = cosem_setUInt8(data, gwc->tokenProportion)) != 0)
   141c4:	9b01      	ldr	r3, [sp, #4]
   141c6:	4628      	mov	r0, r5
   141c8:	7999      	ldrb	r1, [r3, #6]
   141ca:	f7fa ffed 	bl	f1a8 <cosem_setUInt8>
   141ce:	3601      	adds	r6, #1
                    (ret = cosem_setOctetString2(data, gwc->creditReference, 6)) != 0 ||
   141d0:	2800      	cmp	r0, #0
   141d2:	f47f af3e 	bne.w	14052 <cosem_getAccount+0x3c>
            for (pos = 0; pos != object->tokenGatewayConfigurations.size; ++pos)
   141d6:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
   141da:	b2b1      	uxth	r1, r6
   141dc:	428b      	cmp	r3, r1
   141de:	d1db      	bne.n	14198 <cosem_getAccount+0x182>
   141e0:	e772      	b.n	140c8 <cosem_getAccount+0xb2>
    else if (e->index == 13)
   141e2:	290d      	cmp	r1, #13
   141e4:	d105      	bne.n	141f2 <cosem_getAccount+0x1dc>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountActivationTime);
   141e6:	f104 0154 	add.w	r1, r4, #84	; 0x54
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountClosureTime);
   141ea:	4628      	mov	r0, r5
   141ec:	f7fa fee9 	bl	efc2 <cosem_setDateTimeAsOctetString>
   141f0:	e72f      	b.n	14052 <cosem_getAccount+0x3c>
    else if (e->index == 14)
   141f2:	290e      	cmp	r1, #14
   141f4:	d102      	bne.n	141fc <cosem_getAccount+0x1e6>
        ret = cosem_setDateTimeAsOctetString(e->value.byteArr, &object->accountClosureTime);
   141f6:	f104 0160 	add.w	r1, r4, #96	; 0x60
   141fa:	e7f6      	b.n	141ea <cosem_getAccount+0x1d4>
    else if (e->index == 15)
   141fc:	290f      	cmp	r1, #15
   141fe:	d129      	bne.n	14254 <cosem_getAccount+0x23e>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   14200:	2103      	movs	r1, #3
   14202:	4628      	mov	r0, r5
   14204:	f7fb f82b 	bl	f25e <cosem_setStructure>
   14208:	2800      	cmp	r0, #0
   1420a:	f47f af22 	bne.w	14052 <cosem_getAccount+0x3c>
            (ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRING_UTF8)) != 0)
   1420e:	210c      	movs	r1, #12
   14210:	4628      	mov	r0, r5
   14212:	f7fa f8fc 	bl	e40e <bb_setUInt8>
        if ((ret = cosem_setStructure(data, 3)) != 0 ||
   14216:	2800      	cmp	r0, #0
   14218:	f47f af1b 	bne.w	14052 <cosem_getAccount+0x3c>
        if ((ret = hlp_setObjectCount(object->currency.name.size, data)) != 0 ||
   1421c:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
   14220:	4629      	mov	r1, r5
   14222:	f007 f9f0 	bl	1b606 <hlp_setObjectCount>
   14226:	2800      	cmp	r0, #0
   14228:	f47f af13 	bne.w	14052 <cosem_getAccount+0x3c>
            (ret = bb_set(data, object->currency.name.data, object->currency.name.size)) != 0)
   1422c:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
   14230:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
   14232:	4628      	mov	r0, r5
   14234:	f7fa f9d1 	bl	e5da <bb_set>
        if ((ret = hlp_setObjectCount(object->currency.name.size, data)) != 0 ||
   14238:	2800      	cmp	r0, #0
   1423a:	f47f af0a 	bne.w	14052 <cosem_getAccount+0x3c>
        if ((ret = cosem_setInt8(data, object->currency.scale)) != 0 ||
   1423e:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   14242:	4628      	mov	r0, r5
   14244:	f7fa ffda 	bl	f1fc <cosem_setInt8>
   14248:	2800      	cmp	r0, #0
   1424a:	f47f af02 	bne.w	14052 <cosem_getAccount+0x3c>
            (ret = cosem_setEnum(data, object->currency.unit)) != 0)
   1424e:	f894 1079 	ldrb.w	r1, [r4, #121]	; 0x79
   14252:	e6f4      	b.n	1403e <cosem_getAccount+0x28>
    else if (e->index == 16)
   14254:	2910      	cmp	r1, #16
   14256:	d101      	bne.n	1425c <cosem_getAccount+0x246>
        ret = cosem_setInt32(e->value.byteArr, object->lowCreditThreshold);
   14258:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   1425a:	e707      	b.n	1406c <cosem_getAccount+0x56>
    else if (e->index == 17)
   1425c:	2911      	cmp	r1, #17
   1425e:	d102      	bne.n	14266 <cosem_getAccount+0x250>
        ret = cosem_setInt32(e->value.byteArr, object->nextCreditAvailableThreshold);
   14260:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   14264:	e702      	b.n	1406c <cosem_getAccount+0x56>
    else if (e->index == 18)
   14266:	2912      	cmp	r1, #18
   14268:	d105      	bne.n	14276 <cosem_getAccount+0x260>
        ret = cosem_setUInt16(e->value.byteArr, object->maxProvision);
   1426a:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
   1426e:	4628      	mov	r0, r5
   14270:	f7fa ffa8 	bl	f1c4 <cosem_setUInt16>
   14274:	e6ed      	b.n	14052 <cosem_getAccount+0x3c>
    else if (e->index == 19)
   14276:	2913      	cmp	r1, #19
   14278:	d102      	bne.n	14280 <cosem_getAccount+0x26a>
        ret = cosem_setInt32(e->value.byteArr, object->maxProvisionPeriod);
   1427a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   1427e:	e6f5      	b.n	1406c <cosem_getAccount+0x56>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14280:	f44f 7081 	mov.w	r0, #258	; 0x102
   14284:	e6e5      	b.n	14052 <cosem_getAccount+0x3c>

00014286 <cosem_getCompactData>:
{
   14286:	460b      	mov	r3, r1
   14288:	b410      	push	{r4}
   1428a:	7e1a      	ldrb	r2, [r3, #24]
   1428c:	3a02      	subs	r2, #2
   1428e:	4604      	mov	r4, r0
    gxByteBuffer* data = data = e->value.byteArr;
   14290:	6888      	ldr	r0, [r1, #8]
    gxCompactData* object = (gxCompactData*)e->target;
   14292:	6949      	ldr	r1, [r1, #20]
    switch (e->index)
   14294:	2a04      	cmp	r2, #4
   14296:	d81a      	bhi.n	142ce <cosem_getCompactData+0x48>
   14298:	e8df f002 	tbb	[pc, r2]
   1429c:	120d0703 	.word	0x120d0703
   142a0:	14          	.byte	0x14
   142a1:	00          	.byte	0x00
        ret = cosem_setOctetString(data, &object->buffer);
   142a2:	3110      	adds	r1, #16
}
   142a4:	bc10      	pop	{r4}
        ret = cosem_setOctetString(data, &object->templateDescription);
   142a6:	f7fa bf11 	b.w	f0cc <cosem_setOctetString>
        ret = getColumns(settings, &object->captureObjects, data, e);
   142aa:	4602      	mov	r2, r0
   142ac:	311c      	adds	r1, #28
   142ae:	4620      	mov	r0, r4
}
   142b0:	bc10      	pop	{r4}
        ret = getColumns(settings, &object->captureObjects, data, e);
   142b2:	f7fe bcfb 	b.w	12cac <getColumns>
        ret = cosem_setUInt8(e->value.byteArr, object->templateId);
   142b6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
}
   142ba:	bc10      	pop	{r4}
        ret = cosem_setUInt8(e->value.byteArr, object->templateId);
   142bc:	f7fa bf74 	b.w	f1a8 <cosem_setUInt8>
        ret = cosem_setOctetString(data, &object->templateDescription);
   142c0:	312c      	adds	r1, #44	; 0x2c
   142c2:	e7ef      	b.n	142a4 <cosem_getCompactData+0x1e>
        ret = cosem_setEnum(e->value.byteArr, object->captureMethod);
   142c4:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
}
   142c8:	bc10      	pop	{r4}
        ret = cosem_setEnum(e->value.byteArr, object->captureMethod);
   142ca:	f7fa bfe4 	b.w	f296 <cosem_setEnum>
}
   142ce:	f44f 7081 	mov.w	r0, #258	; 0x102
   142d2:	bc10      	pop	{r4}
   142d4:	4770      	bx	lr

000142d6 <cosem_getGsmDiagnostic>:
{
   142d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   142d8:	7e03      	ldrb	r3, [r0, #24]
    gxByteBuffer* data = e->value.byteArr;
   142da:	6887      	ldr	r7, [r0, #8]
    gxGsmDiagnostic* object = (gxGsmDiagnostic*)e->target;
   142dc:	6944      	ldr	r4, [r0, #20]
    switch (e->index)
   142de:	3b02      	subs	r3, #2
   142e0:	2b06      	cmp	r3, #6
   142e2:	f200 809a 	bhi.w	1441a <cosem_getGsmDiagnostic+0x144>
   142e6:	e8df f003 	tbb	[pc, r3]
   142ea:	1204      	.short	0x1204
   142ec:	611b1917 	.word	0x611b1917
   142f0:	92          	.byte	0x92
   142f1:	00          	.byte	0x00
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   142f2:	6924      	ldr	r4, [r4, #16]
   142f4:	b14c      	cbz	r4, 1430a <cosem_getGsmDiagnostic+0x34>
            object->operatorName != NULL ? (uint16_t)strlen(object->operatorName) : 0);
   142f6:	4620      	mov	r0, r4
   142f8:	f7ec fd62 	bl	dc0 <strlen>
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   142fc:	b282      	uxth	r2, r0
   142fe:	4621      	mov	r1, r4
   14300:	4638      	mov	r0, r7
   14302:	f7fa ff01 	bl	f108 <cosem_setString>
}
   14306:	b003      	add	sp, #12
   14308:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = cosem_setString(e->value.byteArr, object->operatorName,  
   1430a:	4622      	mov	r2, r4
   1430c:	e7f7      	b.n	142fe <cosem_getGsmDiagnostic+0x28>
        ret = cosem_setEnum(e->value.byteArr, object->status);
   1430e:	7d21      	ldrb	r1, [r4, #20]
        ret = cosem_setEnum(e->value.byteArr, object->circuitSwitchStatus);
   14310:	4638      	mov	r0, r7
   14312:	f7fa ffc0 	bl	f296 <cosem_setEnum>
        break;
   14316:	e7f6      	b.n	14306 <cosem_getGsmDiagnostic+0x30>
        ret = cosem_setEnum(e->value.byteArr, object->circuitSwitchStatus);
   14318:	7d61      	ldrb	r1, [r4, #21]
   1431a:	e7f9      	b.n	14310 <cosem_getGsmDiagnostic+0x3a>
        ret = cosem_setEnum(e->value.byteArr, object->packetSwitchStatus);
   1431c:	7da1      	ldrb	r1, [r4, #22]
   1431e:	e7f7      	b.n	14310 <cosem_getGsmDiagnostic+0x3a>
        if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) == 0)
   14320:	2102      	movs	r1, #2
   14322:	4638      	mov	r0, r7
   14324:	f7fa f873 	bl	e40e <bb_setUInt8>
   14328:	2800      	cmp	r0, #0
   1432a:	d1ec      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
            if (object->base.version == 0)
   1432c:	78a3      	ldrb	r3, [r4, #2]
   1432e:	bb0b      	cbnz	r3, 14374 <cosem_getGsmDiagnostic+0x9e>
                if ((ret = bb_setUInt8(data, 4)) != 0 ||
   14330:	2104      	movs	r1, #4
   14332:	4638      	mov	r0, r7
   14334:	f7fa f86b 	bl	e40e <bb_setUInt8>
   14338:	2800      	cmp	r0, #0
   1433a:	d1e4      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt16(data, (uint16_t)object->cellInfo.cellId)) != 0)
   1433c:	8b21      	ldrh	r1, [r4, #24]
   1433e:	4638      	mov	r0, r7
   14340:	f7fa ff40 	bl	f1c4 <cosem_setUInt16>
                if ((ret = bb_setUInt8(data, 4)) != 0 ||
   14344:	2800      	cmp	r0, #0
   14346:	d1de      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
            if ((ret = cosem_setUInt16(data, object->cellInfo.locationId)) != 0 ||
   14348:	8ba1      	ldrh	r1, [r4, #28]
   1434a:	4638      	mov	r0, r7
   1434c:	f7fa ff3a 	bl	f1c4 <cosem_setUInt16>
   14350:	2800      	cmp	r0, #0
   14352:	d1d8      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                (ret = cosem_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
   14354:	7fa1      	ldrb	r1, [r4, #30]
   14356:	4638      	mov	r0, r7
   14358:	f7fa ff26 	bl	f1a8 <cosem_setUInt8>
            if ((ret = cosem_setUInt16(data, object->cellInfo.locationId)) != 0 ||
   1435c:	2800      	cmp	r0, #0
   1435e:	d1d2      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                (ret = cosem_setUInt8(data, object->cellInfo.ber)) != 0)
   14360:	7fe1      	ldrb	r1, [r4, #31]
   14362:	4638      	mov	r0, r7
   14364:	f7fa ff20 	bl	f1a8 <cosem_setUInt8>
                (ret = cosem_setUInt8(data, object->cellInfo.signalQuality)) != 0 ||
   14368:	2800      	cmp	r0, #0
   1436a:	d1cc      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
            if (object->base.version > 0)
   1436c:	78a3      	ldrb	r3, [r4, #2]
   1436e:	b963      	cbnz	r3, 1438a <cosem_getGsmDiagnostic+0xb4>
                (ret = cosem_setUInt8(data, object->cellInfo.ber)) != 0)
   14370:	2000      	movs	r0, #0
   14372:	e7c8      	b.n	14306 <cosem_getGsmDiagnostic+0x30>
                if ((ret = bb_setUInt8(data, 7)) != 0 ||
   14374:	2107      	movs	r1, #7
   14376:	4638      	mov	r0, r7
   14378:	f7fa f849 	bl	e40e <bb_setUInt8>
   1437c:	2800      	cmp	r0, #0
   1437e:	d1c2      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt32(data, object->cellInfo.cellId)) != 0)
   14380:	69a1      	ldr	r1, [r4, #24]
   14382:	4638      	mov	r0, r7
   14384:	f7fa ff2c 	bl	f1e0 <cosem_setUInt32>
   14388:	e7dc      	b.n	14344 <cosem_getGsmDiagnostic+0x6e>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
   1438a:	8c21      	ldrh	r1, [r4, #32]
   1438c:	4638      	mov	r0, r7
   1438e:	f7fa ff19 	bl	f1c4 <cosem_setUInt16>
                if (//mobileCountryCode.
   14392:	2800      	cmp	r0, #0
   14394:	d1b7      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileNetworkCode)) != 0 ||
   14396:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   14398:	4638      	mov	r0, r7
   1439a:	f7fa ff13 	bl	f1c4 <cosem_setUInt16>
                    (ret = cosem_setUInt16(data, object->cellInfo.mobileCountryCode)) != 0 ||
   1439e:	2800      	cmp	r0, #0
   143a0:	d1b1      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setUInt32(data, object->cellInfo.channelNumber)) != 0)
   143a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   143a4:	4638      	mov	r0, r7
   143a6:	f7fa ff1b 	bl	f1e0 <cosem_setUInt32>
   143aa:	e7ac      	b.n	14306 <cosem_getGsmDiagnostic+0x30>
        if ((ret = cosem_setArray(data, object->adjacentCells.size)) == 0)
   143ac:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   143ae:	4638      	mov	r0, r7
   143b0:	f7fa ff63 	bl	f27a <cosem_setArray>
   143b4:	2800      	cmp	r0, #0
   143b6:	d1a6      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
   143b8:	4605      	mov	r5, r0
                if ((ret = arr_getByIndex(&object->adjacentCells, pos, (void**)&it)) != 0 ||
   143ba:	f104 0628 	add.w	r6, r4, #40	; 0x28
   143be:	e01d      	b.n	143fc <cosem_getGsmDiagnostic+0x126>
   143c0:	aa01      	add	r2, sp, #4
   143c2:	4630      	mov	r0, r6
   143c4:	f7fd fbe9 	bl	11b9a <arr_getByIndex>
   143c8:	2800      	cmp	r0, #0
   143ca:	d19c      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                    (ret = cosem_setStructure(data, 2)) != 0)
   143cc:	2102      	movs	r1, #2
   143ce:	4638      	mov	r0, r7
   143d0:	f7fa ff45 	bl	f25e <cosem_setStructure>
                if ((ret = arr_getByIndex(&object->adjacentCells, pos, (void**)&it)) != 0 ||
   143d4:	2800      	cmp	r0, #0
   143d6:	d196      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                if (object->base.version == 0)
   143d8:	9b01      	ldr	r3, [sp, #4]
   143da:	6819      	ldr	r1, [r3, #0]
   143dc:	78a3      	ldrb	r3, [r4, #2]
   143de:	b993      	cbnz	r3, 14406 <cosem_getGsmDiagnostic+0x130>
                    if ((ret = cosem_setUInt16(data, (uint16_t)it->cellId)) != 0)
   143e0:	b289      	uxth	r1, r1
   143e2:	4638      	mov	r0, r7
   143e4:	f7fa feee 	bl	f1c4 <cosem_setUInt16>
   143e8:	2800      	cmp	r0, #0
   143ea:	d18c      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
                if ((ret = cosem_setUInt8(data, it->signalQuality)) != 0)
   143ec:	9b01      	ldr	r3, [sp, #4]
   143ee:	4638      	mov	r0, r7
   143f0:	7919      	ldrb	r1, [r3, #4]
   143f2:	f7fa fed9 	bl	f1a8 <cosem_setUInt8>
   143f6:	3501      	adds	r5, #1
   143f8:	2800      	cmp	r0, #0
   143fa:	d184      	bne.n	14306 <cosem_getGsmDiagnostic+0x30>
            for (pos = 0; pos != object->adjacentCells.size; ++pos)
   143fc:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   143fe:	b2a9      	uxth	r1, r5
   14400:	428b      	cmp	r3, r1
   14402:	d1dd      	bne.n	143c0 <cosem_getGsmDiagnostic+0xea>
   14404:	e7b4      	b.n	14370 <cosem_getGsmDiagnostic+0x9a>
                    if ((ret = cosem_setUInt32(data, it->cellId)) != 0)
   14406:	4638      	mov	r0, r7
   14408:	f7fa feea 	bl	f1e0 <cosem_setUInt32>
   1440c:	e7ec      	b.n	143e8 <cosem_getGsmDiagnostic+0x112>
        ret = cosem_setDateTime(e->value.byteArr, &object->captureTime);
   1440e:	f104 0134 	add.w	r1, r4, #52	; 0x34
   14412:	4638      	mov	r0, r7
   14414:	f7fa fe99 	bl	f14a <cosem_setDateTime>
        break;
   14418:	e775      	b.n	14306 <cosem_getGsmDiagnostic+0x30>
    switch (e->index)
   1441a:	f44f 7081 	mov.w	r0, #258	; 0x102
   1441e:	e772      	b.n	14306 <cosem_getGsmDiagnostic+0x30>

00014420 <cosem_getLlcSscsSetup>:
int cosem_getLlcSscsSetup(
    gxValueEventArg* e)
{
    int ret;
    gxLlcSscsSetup* object = (gxLlcSscsSetup*)e->target;
    switch (e->index)
   14420:	7e02      	ldrb	r2, [r0, #24]
    gxLlcSscsSetup* object = (gxLlcSscsSetup*)e->target;
   14422:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   14424:	2a02      	cmp	r2, #2
   14426:	d004      	beq.n	14432 <cosem_getLlcSscsSetup+0x12>
   14428:	2a03      	cmp	r2, #3
   1442a:	d006      	beq.n	1443a <cosem_getLlcSscsSetup+0x1a>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1442c:	f44f 7081 	mov.w	r0, #258	; 0x102
   14430:	4770      	bx	lr
        ret = cosem_setUInt16(e->value.byteArr, object->serviceNodeAddress);
   14432:	8a19      	ldrh	r1, [r3, #16]
        ret = cosem_setUInt16(e->value.byteArr, object->baseNodeAddress);
   14434:	6880      	ldr	r0, [r0, #8]
   14436:	f7fa bec5 	b.w	f1c4 <cosem_setUInt16>
   1443a:	8a59      	ldrh	r1, [r3, #18]
   1443c:	e7fa      	b.n	14434 <cosem_getLlcSscsSetup+0x14>

0001443e <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS
int cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcPhysicalLayerCounters* object = (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target;
   1443e:	7e02      	ldrb	r2, [r0, #24]
   14440:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   14442:	3a02      	subs	r2, #2
   14444:	2a03      	cmp	r2, #3
   14446:	d80d      	bhi.n	14464 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x26>
   14448:	e8df f002 	tbb	[pc, r2]
   1444c:	0a080602 	.word	0x0a080602
    {
    case 2:
        ret = cosem_setUInt16(e->value.byteArr, object->crcIncorrectCount);
   14450:	8a19      	ldrh	r1, [r3, #16]
        break;
    case 4:
        ret = cosem_setUInt16(e->value.byteArr, object->txDropCount);
        break;
    case 5:
        ret = cosem_setUInt16(e->value.byteArr, object->rxDropCount);
   14452:	6880      	ldr	r0, [r0, #8]
   14454:	f7fa beb6 	b.w	f1c4 <cosem_setUInt16>
        ret = cosem_setUInt16(e->value.byteArr, object->crcFailedCount);
   14458:	8a59      	ldrh	r1, [r3, #18]
   1445a:	e7fa      	b.n	14452 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
        ret = cosem_setUInt16(e->value.byteArr, object->txDropCount);
   1445c:	8a99      	ldrh	r1, [r3, #20]
   1445e:	e7f8      	b.n	14452 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
        ret = cosem_setUInt16(e->value.byteArr, object->rxDropCount);
   14460:	8ad9      	ldrh	r1, [r3, #22]
   14462:	e7f6      	b.n	14452 <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters+0x14>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   14464:	f44f 7081 	mov.w	r0, #258	; 0x102
   14468:	4770      	bx	lr

0001446a <cosem_getPrimeNbOfdmPlcMacSetup>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_SETUP
int cosem_getPrimeNbOfdmPlcMacSetup(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacSetup* object = (gxPrimeNbOfdmPlcMacSetup*)e->target;
   1446a:	7e02      	ldrb	r2, [r0, #24]
   1446c:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   1446e:	3a02      	subs	r2, #2
   14470:	2a06      	cmp	r2, #6
   14472:	d815      	bhi.n	144a0 <cosem_getPrimeNbOfdmPlcMacSetup+0x36>
   14474:	e8df f002 	tbb	[pc, r2]
   14478:	0c0a0804 	.word	0x0c0a0804
   1447c:	100e      	.short	0x100e
   1447e:	12          	.byte	0x12
   1447f:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setUInt8(e->value.byteArr, object->macMinSwitchSearchTime);
   14480:	7c19      	ldrb	r1, [r3, #16]
        break;
    case 7:
        ret = cosem_setUInt8(e->value.byteArr, object->macCtlReTxTimer);
        break;
    case 8:
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxCtlReTx);
   14482:	6880      	ldr	r0, [r0, #8]
   14484:	f7fa be90 	b.w	f1a8 <cosem_setUInt8>
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxPromotionPdu);
   14488:	7c59      	ldrb	r1, [r3, #17]
   1448a:	e7fa      	b.n	14482 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macPromotionPduTxPeriod);
   1448c:	7c99      	ldrb	r1, [r3, #18]
   1448e:	e7f8      	b.n	14482 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macBeaconsPerFrame);
   14490:	7cd9      	ldrb	r1, [r3, #19]
   14492:	e7f6      	b.n	14482 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macScpMaxTxAttempts);
   14494:	7d19      	ldrb	r1, [r3, #20]
   14496:	e7f4      	b.n	14482 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macCtlReTxTimer);
   14498:	7d59      	ldrb	r1, [r3, #21]
   1449a:	e7f2      	b.n	14482 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
        ret = cosem_setUInt8(e->value.byteArr, object->macMaxCtlReTx);
   1449c:	7d99      	ldrb	r1, [r3, #22]
   1449e:	e7f0      	b.n	14482 <cosem_getPrimeNbOfdmPlcMacSetup+0x18>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   144a0:	f44f 7081 	mov.w	r0, #258	; 0x102
   144a4:	4770      	bx	lr

000144a6 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS
int cosem_getPrimeNbOfdmPlcMacFunctionalParameters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacFunctionalParameters* object = (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target;
   144a6:	7e03      	ldrb	r3, [r0, #24]
   144a8:	6941      	ldr	r1, [r0, #20]
    switch (e->index)
   144aa:	3b02      	subs	r3, #2
   144ac:	2b0c      	cmp	r3, #12
   144ae:	d835      	bhi.n	1451c <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x76>
   144b0:	e8df f003 	tbb	[pc, r3]
   144b4:	12100c07 	.word	0x12100c07
   144b8:	221f1b16 	.word	0x221f1b16
   144bc:	2e2b2825 	.word	0x2e2b2825
   144c0:	31          	.byte	0x31
   144c1:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setInt16(e->value.byteArr, object->lnId);
   144c2:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
   144c6:	6880      	ldr	r0, [r0, #8]
   144c8:	f7fa bea6 	b.w	f218 <cosem_setInt16>
        break;
    case 3:
        ret = cosem_setUInt8(e->value.byteArr, object->lsId);
   144cc:	7c89      	ldrb	r1, [r1, #18]
        break;
    case 4:
        ret = cosem_setUInt8(e->value.byteArr, object->sId);
   144ce:	6880      	ldr	r0, [r0, #8]
   144d0:	f7fa be6a 	b.w	f1a8 <cosem_setUInt8>
   144d4:	7cc9      	ldrb	r1, [r1, #19]
   144d6:	e7fa      	b.n	144ce <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        break;
    case 5:
    {
        ret = cosem_setOctetString(e->value.byteArr, &object->sna);
   144d8:	6880      	ldr	r0, [r0, #8]
   144da:	3114      	adds	r1, #20
   144dc:	f7fa bdf6 	b.w	f0cc <cosem_setOctetString>
    }
    break;
    case 6:
        ret = cosem_setEnum(e->value.byteArr, object->state);
   144e0:	f891 1020 	ldrb.w	r1, [r1, #32]
        break;
    case 13:
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxFrequency);
        break;
    case 14:
        ret = cosem_setEnum(e->value.byteArr, (unsigned char)object->capabilities);
   144e4:	6880      	ldr	r0, [r0, #8]
   144e6:	f7fa bed6 	b.w	f296 <cosem_setEnum>
        ret = cosem_setUInt16(e->value.byteArr, object->scpLength);
   144ea:	8c49      	ldrh	r1, [r1, #34]	; 0x22
   144ec:	6880      	ldr	r0, [r0, #8]
   144ee:	f7fa be69 	b.w	f1c4 <cosem_setUInt16>
        ret = cosem_setUInt8(e->value.byteArr, object->nodeHierarchyLevel);
   144f2:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
   144f6:	e7ea      	b.n	144ce <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconSlotCount);
   144f8:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
   144fc:	e7e7      	b.n	144ce <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconRxSlot);
   144fe:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
   14502:	e7e4      	b.n	144ce <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxSlot);
   14504:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
   14508:	e7e1      	b.n	144ce <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconRxFrequency);
   1450a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
   1450e:	e7de      	b.n	144ce <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setUInt8(e->value.byteArr, object->beaconTxFrequency);
   14510:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
   14514:	e7db      	b.n	144ce <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x28>
        ret = cosem_setEnum(e->value.byteArr, (unsigned char)object->capabilities);
   14516:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
   1451a:	e7e3      	b.n	144e4 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters+0x3e>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1451c:	f44f 7081 	mov.w	r0, #258	; 0x102
   14520:	4770      	bx	lr

00014522 <cosem_getPrimeNbOfdmPlcMacCounters>:
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS
int cosem_getPrimeNbOfdmPlcMacCounters(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcMacCounters* object = (gxPrimeNbOfdmPlcMacCounters*)e->target;
   14522:	7e02      	ldrb	r2, [r0, #24]
   14524:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   14526:	3a02      	subs	r2, #2
   14528:	2a05      	cmp	r2, #5
   1452a:	d812      	bhi.n	14552 <cosem_getPrimeNbOfdmPlcMacCounters+0x30>
   1452c:	e8df f002 	tbb	[pc, r2]
   14530:	0b090703 	.word	0x0b090703
   14534:	0f0d      	.short	0x0f0d
    {
    case 2:
        ret = cosem_setUInt32(e->value.byteArr, object->txDataPktCount);
   14536:	6919      	ldr	r1, [r3, #16]
        break;
    case 6:
        ret = cosem_setUInt32(e->value.byteArr, object->csmaFailCount);
        break;
    case 7:
        ret = cosem_setUInt32(e->value.byteArr, object->csmaChBusyCount);
   14538:	6880      	ldr	r0, [r0, #8]
   1453a:	f7fa be51 	b.w	f1e0 <cosem_setUInt32>
        ret = cosem_setUInt32(e->value.byteArr, object->rxDataPktCount);
   1453e:	6959      	ldr	r1, [r3, #20]
   14540:	e7fa      	b.n	14538 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->txCtrlPktCount);
   14542:	6999      	ldr	r1, [r3, #24]
   14544:	e7f8      	b.n	14538 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->rxCtrlPktCount);
   14546:	69d9      	ldr	r1, [r3, #28]
   14548:	e7f6      	b.n	14538 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->csmaFailCount);
   1454a:	6a19      	ldr	r1, [r3, #32]
   1454c:	e7f4      	b.n	14538 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
        ret = cosem_setUInt32(e->value.byteArr, object->csmaChBusyCount);
   1454e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   14550:	e7f2      	b.n	14538 <cosem_getPrimeNbOfdmPlcMacCounters+0x16>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   14552:	f44f 7081 	mov.w	r0, #258	; 0x102
   14556:	4770      	bx	lr

00014558 <cosem_getMulticastEntries>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

int cosem_getMulticastEntries(gxValueEventArg* e)
{
   14558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    gxMacMulticastEntry* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   1455c:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   1455e:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->multicastEntries.size)) == 0)
   14560:	8af1      	ldrh	r1, [r6, #22]
   14562:	4628      	mov	r0, r5
   14564:	f7fa fe89 	bl	f27a <cosem_setArray>
   14568:	4604      	mov	r4, r0
   1456a:	b118      	cbz	r0, 14574 <cosem_getMulticastEntries+0x1c>
                break;
            }
        }
    }
    return ret;
}
   1456c:	4620      	mov	r0, r4
   1456e:	b003      	add	sp, #12
   14570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14574:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->multicastEntries, pos, (void**)&it)) != 0)
   14576:	f106 0810 	add.w	r8, r6, #16
        for (pos = 0; pos != object->multicastEntries.size; ++pos)
   1457a:	8af3      	ldrh	r3, [r6, #22]
   1457c:	fa1f f987 	uxth.w	r9, r7
   14580:	454b      	cmp	r3, r9
   14582:	d0f3      	beq.n	1456c <cosem_getMulticastEntries+0x14>
            if ((ret = cosem_setStructure(data, 2)) != 0)
   14584:	2102      	movs	r1, #2
   14586:	4628      	mov	r0, r5
   14588:	f7fa fe69 	bl	f25e <cosem_setStructure>
   1458c:	b9a0      	cbnz	r0, 145b8 <cosem_getMulticastEntries+0x60>
            if ((ret = arr_getByIndex(&object->multicastEntries, pos, (void**)&it)) != 0)
   1458e:	aa01      	add	r2, sp, #4
   14590:	4649      	mov	r1, r9
   14592:	4640      	mov	r0, r8
   14594:	f7fd fb01 	bl	11b9a <arr_getByIndex>
   14598:	b970      	cbnz	r0, 145b8 <cosem_getMulticastEntries+0x60>
            if ((ret = cosem_setInt8(data, it->id)) != 0 ||
   1459a:	9b01      	ldr	r3, [sp, #4]
   1459c:	4628      	mov	r0, r5
   1459e:	7819      	ldrb	r1, [r3, #0]
   145a0:	f7fa fe2c 	bl	f1fc <cosem_setInt8>
   145a4:	b940      	cbnz	r0, 145b8 <cosem_getMulticastEntries+0x60>
                (ret = cosem_setInt16(data, it->members)) != 0)
   145a6:	9b01      	ldr	r3, [sp, #4]
   145a8:	4628      	mov	r0, r5
   145aa:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   145ae:	f7fa fe33 	bl	f218 <cosem_setInt16>
   145b2:	3701      	adds	r7, #1
            if ((ret = cosem_setInt8(data, it->id)) != 0 ||
   145b4:	2800      	cmp	r0, #0
   145b6:	d0e0      	beq.n	1457a <cosem_getMulticastEntries+0x22>
                (ret = cosem_setInt16(data, it->members)) != 0)
   145b8:	4604      	mov	r4, r0
    return ret;
   145ba:	e7d7      	b.n	1456c <cosem_getMulticastEntries+0x14>

000145bc <cosem_getSwitchTable>:

int cosem_getSwitchTable(gxValueEventArg* e)
{
   145bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   145c0:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   145c2:	6886      	ldr	r6, [r0, #8]
    if ((ret = cosem_setArray(data, object->switchTable.size)) == 0)
   145c4:	8c69      	ldrh	r1, [r5, #34]	; 0x22
   145c6:	4630      	mov	r0, r6
   145c8:	f7fa fe57 	bl	f27a <cosem_setArray>
   145cc:	4604      	mov	r4, r0
   145ce:	b118      	cbz	r0, 145d8 <cosem_getSwitchTable+0x1c>
                break;
            }
        }
    }
    return ret;
}
   145d0:	4620      	mov	r0, r4
   145d2:	b002      	add	sp, #8
   145d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   145d8:	4680      	mov	r8, r0
            if ((ret = arr_getByIndex(&object->switchTable, pos, (void**)&it)) != 0)
   145da:	f105 071c 	add.w	r7, r5, #28
        for (pos = 0; pos != object->switchTable.size; ++pos)
   145de:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   145e0:	fa1f f188 	uxth.w	r1, r8
   145e4:	428b      	cmp	r3, r1
   145e6:	d0f3      	beq.n	145d0 <cosem_getSwitchTable+0x14>
            if ((ret = arr_getByIndex(&object->switchTable, pos, (void**)&it)) != 0)
   145e8:	aa01      	add	r2, sp, #4
   145ea:	4638      	mov	r0, r7
   145ec:	f7fd fad5 	bl	11b9a <arr_getByIndex>
   145f0:	b948      	cbnz	r0, 14606 <cosem_getSwitchTable+0x4a>
            if ((ret = cosem_setInt16(data, *it)) != 0)
   145f2:	9b01      	ldr	r3, [sp, #4]
   145f4:	4630      	mov	r0, r6
   145f6:	f9b3 1000 	ldrsh.w	r1, [r3]
   145fa:	f7fa fe0d 	bl	f218 <cosem_setInt16>
   145fe:	f108 0801 	add.w	r8, r8, #1
   14602:	2800      	cmp	r0, #0
   14604:	d0eb      	beq.n	145de <cosem_getSwitchTable+0x22>
   14606:	4604      	mov	r4, r0
    return ret;
   14608:	e7e2      	b.n	145d0 <cosem_getSwitchTable+0x14>

0001460a <cosem_getDirectTable>:

int cosem_getDirectTable(gxValueEventArg* e)
{
   1460a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacDirectTable* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   1460e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   14610:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->directTable.size)) == 0)
   14612:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
   14614:	4628      	mov	r0, r5
   14616:	f7fa fe30 	bl	f27a <cosem_setArray>
   1461a:	4604      	mov	r4, r0
   1461c:	b118      	cbz	r0, 14626 <cosem_getDirectTable+0x1c>
                break;
            }
        }
    }
    return ret;
}
   1461e:	4620      	mov	r0, r4
   14620:	b002      	add	sp, #8
   14622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14626:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->directTable, pos, (void**)&it)) != 0)
   14628:	f106 0828 	add.w	r8, r6, #40	; 0x28
        for (pos = 0; pos != object->directTable.size; ++pos)
   1462c:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   1462e:	b2b9      	uxth	r1, r7
   14630:	428b      	cmp	r3, r1
   14632:	d0f4      	beq.n	1461e <cosem_getDirectTable+0x14>
            if ((ret = arr_getByIndex(&object->directTable, pos, (void**)&it)) != 0)
   14634:	aa01      	add	r2, sp, #4
   14636:	4640      	mov	r0, r8
   14638:	f7fd faaf 	bl	11b9a <arr_getByIndex>
   1463c:	2800      	cmp	r0, #0
   1463e:	d137      	bne.n	146b0 <cosem_getDirectTable+0xa6>
            if ((ret = cosem_setStructure(data, 7)) != 0 ||
   14640:	2107      	movs	r1, #7
   14642:	4628      	mov	r0, r5
   14644:	f7fa fe0b 	bl	f25e <cosem_setStructure>
   14648:	bb90      	cbnz	r0, 146b0 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceSId)) != 0 ||
   1464a:	9b01      	ldr	r3, [sp, #4]
   1464c:	4628      	mov	r0, r5
   1464e:	f9b3 1000 	ldrsh.w	r1, [r3]
   14652:	f7fa fde1 	bl	f218 <cosem_setInt16>
            if ((ret = cosem_setStructure(data, 7)) != 0 ||
   14656:	bb58      	cbnz	r0, 146b0 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceLnId)) != 0 ||
   14658:	9b01      	ldr	r3, [sp, #4]
   1465a:	4628      	mov	r0, r5
   1465c:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
   14660:	f7fa fdda 	bl	f218 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceSId)) != 0 ||
   14664:	bb20      	cbnz	r0, 146b0 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->sourceLcId)) != 0 ||
   14666:	9b01      	ldr	r3, [sp, #4]
   14668:	4628      	mov	r0, r5
   1466a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
   1466e:	f7fa fdd3 	bl	f218 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceLnId)) != 0 ||
   14672:	b9e8      	cbnz	r0, 146b0 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationSId)) != 0 ||
   14674:	9b01      	ldr	r3, [sp, #4]
   14676:	4628      	mov	r0, r5
   14678:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
   1467c:	f7fa fdcc 	bl	f218 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->sourceLcId)) != 0 ||
   14680:	b9b0      	cbnz	r0, 146b0 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationLnId)) != 0 ||
   14682:	9b01      	ldr	r3, [sp, #4]
   14684:	4628      	mov	r0, r5
   14686:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
   1468a:	f7fa fdc5 	bl	f218 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->destinationSId)) != 0 ||
   1468e:	b978      	cbnz	r0, 146b0 <cosem_getDirectTable+0xa6>
                (ret = cosem_setInt16(data, it->destinationLcId)) != 0 ||
   14690:	9b01      	ldr	r3, [sp, #4]
   14692:	4628      	mov	r0, r5
   14694:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
   14698:	f7fa fdbe 	bl	f218 <cosem_setInt16>
                (ret = cosem_setInt16(data, it->destinationLnId)) != 0 ||
   1469c:	b940      	cbnz	r0, 146b0 <cosem_getDirectTable+0xa6>
                (ret = cosem_setOctetString2(data, it->did, sizeof(it->did))) != 0)
   1469e:	9901      	ldr	r1, [sp, #4]
   146a0:	2206      	movs	r2, #6
   146a2:	310c      	adds	r1, #12
   146a4:	4628      	mov	r0, r5
   146a6:	f7fa fd5e 	bl	f166 <cosem_setOctetString2>
   146aa:	3701      	adds	r7, #1
                (ret = cosem_setInt16(data, it->destinationLcId)) != 0 ||
   146ac:	2800      	cmp	r0, #0
   146ae:	d0bd      	beq.n	1462c <cosem_getDirectTable+0x22>
                (ret = cosem_setOctetString2(data, it->did, sizeof(it->did))) != 0)
   146b0:	4604      	mov	r4, r0
    return ret;
   146b2:	e7b4      	b.n	1461e <cosem_getDirectTable+0x14>

000146b4 <cosem_getAvailableSwitches>:

int cosem_getAvailableSwitches(gxValueEventArg* e)
{
   146b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacAvailableSwitch* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   146b8:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   146ba:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->availableSwitches.size)) == 0)
   146bc:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
   146be:	4628      	mov	r0, r5
   146c0:	f7fa fddb 	bl	f27a <cosem_setArray>
   146c4:	4604      	mov	r4, r0
   146c6:	b118      	cbz	r0, 146d0 <cosem_getAvailableSwitches+0x1c>
                break;
            }
        }
    }
    return ret;
}
   146c8:	4620      	mov	r0, r4
   146ca:	b002      	add	sp, #8
   146cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146d0:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->availableSwitches, pos, (void**)&it)) != 0)
   146d2:	f106 0834 	add.w	r8, r6, #52	; 0x34
        for (pos = 0; pos != object->availableSwitches.size; ++pos)
   146d6:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   146d8:	b2b9      	uxth	r1, r7
   146da:	428b      	cmp	r3, r1
   146dc:	d0f4      	beq.n	146c8 <cosem_getAvailableSwitches+0x14>
            if ((ret = arr_getByIndex(&object->availableSwitches, pos, (void**)&it)) != 0)
   146de:	aa01      	add	r2, sp, #4
   146e0:	4640      	mov	r0, r8
   146e2:	f7fd fa5a 	bl	11b9a <arr_getByIndex>
   146e6:	bb30      	cbnz	r0, 14736 <cosem_getAvailableSwitches+0x82>
            if ((ret = cosem_setStructure(data, 5)) != 0 ||
   146e8:	2105      	movs	r1, #5
   146ea:	4628      	mov	r0, r5
   146ec:	f7fa fdb7 	bl	f25e <cosem_setStructure>
   146f0:	bb08      	cbnz	r0, 14736 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setOctetString2(data, it->sna.data, (uint16_t)it->sna.size)) != 0 ||
   146f2:	9b01      	ldr	r3, [sp, #4]
   146f4:	4628      	mov	r0, r5
   146f6:	88da      	ldrh	r2, [r3, #6]
   146f8:	6819      	ldr	r1, [r3, #0]
   146fa:	f7fa fd34 	bl	f166 <cosem_setOctetString2>
            if ((ret = cosem_setStructure(data, 5)) != 0 ||
   146fe:	b9d0      	cbnz	r0, 14736 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt16(data, it->lsId)) != 0 ||
   14700:	9b01      	ldr	r3, [sp, #4]
   14702:	4628      	mov	r0, r5
   14704:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   14708:	f7fa fd86 	bl	f218 <cosem_setInt16>
                (ret = cosem_setOctetString2(data, it->sna.data, (uint16_t)it->sna.size)) != 0 ||
   1470c:	b998      	cbnz	r0, 14736 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->level)) != 0 ||
   1470e:	9b01      	ldr	r3, [sp, #4]
   14710:	4628      	mov	r0, r5
   14712:	7b99      	ldrb	r1, [r3, #14]
   14714:	f7fa fd72 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt16(data, it->lsId)) != 0 ||
   14718:	b968      	cbnz	r0, 14736 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->rxLevel)) != 0 ||
   1471a:	9b01      	ldr	r3, [sp, #4]
   1471c:	4628      	mov	r0, r5
   1471e:	7bd9      	ldrb	r1, [r3, #15]
   14720:	f7fa fd6c 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->level)) != 0 ||
   14724:	b938      	cbnz	r0, 14736 <cosem_getAvailableSwitches+0x82>
                (ret = cosem_setInt8(data, it->rxSnr)) != 0)
   14726:	9b01      	ldr	r3, [sp, #4]
   14728:	4628      	mov	r0, r5
   1472a:	7c19      	ldrb	r1, [r3, #16]
   1472c:	f7fa fd66 	bl	f1fc <cosem_setInt8>
   14730:	3701      	adds	r7, #1
                (ret = cosem_setInt8(data, it->rxLevel)) != 0 ||
   14732:	2800      	cmp	r0, #0
   14734:	d0cf      	beq.n	146d6 <cosem_getAvailableSwitches+0x22>
                (ret = cosem_setInt8(data, it->rxSnr)) != 0)
   14736:	4604      	mov	r4, r0
    return ret;
   14738:	e7c6      	b.n	146c8 <cosem_getAvailableSwitches+0x14>

0001473a <cosem_getCommunications>:

int cosem_getCommunications(gxValueEventArg* e)
{
   1473a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    gxMacPhyCommunication* it;
    int ret;
    uint16_t pos;
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object = (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target;
   1473e:	6946      	ldr	r6, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   14740:	6885      	ldr	r5, [r0, #8]
    if ((ret = cosem_setArray(data, object->communications.size)) == 0)
   14742:	f8b6 1046 	ldrh.w	r1, [r6, #70]	; 0x46
   14746:	4628      	mov	r0, r5
   14748:	f7fa fd97 	bl	f27a <cosem_setArray>
   1474c:	4604      	mov	r4, r0
   1474e:	b118      	cbz	r0, 14758 <cosem_getCommunications+0x1e>
                break;
            }
        }
    }
    return ret;
}
   14750:	4620      	mov	r0, r4
   14752:	b002      	add	sp, #8
   14754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14758:	4607      	mov	r7, r0
            if ((ret = arr_getByIndex(&object->communications, pos, (void**)&it)) != 0)
   1475a:	f106 0840 	add.w	r8, r6, #64	; 0x40
        for (pos = 0; pos != object->communications.size; ++pos)
   1475e:	f8b6 3046 	ldrh.w	r3, [r6, #70]	; 0x46
   14762:	b2b9      	uxth	r1, r7
   14764:	428b      	cmp	r3, r1
   14766:	d0f3      	beq.n	14750 <cosem_getCommunications+0x16>
            if ((ret = arr_getByIndex(&object->communications, pos, (void**)&it)) != 0)
   14768:	aa01      	add	r2, sp, #4
   1476a:	4640      	mov	r0, r8
   1476c:	f7fd fa15 	bl	11b9a <arr_getByIndex>
   14770:	2800      	cmp	r0, #0
   14772:	d13e      	bne.n	147f2 <cosem_getCommunications+0xb8>
            if ((ret = cosem_setStructure(data, 9)) != 0 ||
   14774:	2109      	movs	r1, #9
   14776:	4628      	mov	r0, r5
   14778:	f7fa fd71 	bl	f25e <cosem_setStructure>
   1477c:	2800      	cmp	r0, #0
   1477e:	d138      	bne.n	147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setOctetString2(data, it->eui, sizeof(it->eui))) != 0 ||
   14780:	9901      	ldr	r1, [sp, #4]
   14782:	2206      	movs	r2, #6
   14784:	4628      	mov	r0, r5
   14786:	f7fa fcee 	bl	f166 <cosem_setOctetString2>
            if ((ret = cosem_setStructure(data, 9)) != 0 ||
   1478a:	2800      	cmp	r0, #0
   1478c:	d131      	bne.n	147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txPower)) != 0 ||
   1478e:	9b01      	ldr	r3, [sp, #4]
   14790:	4628      	mov	r0, r5
   14792:	7999      	ldrb	r1, [r3, #6]
   14794:	f7fa fd32 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setOctetString2(data, it->eui, sizeof(it->eui))) != 0 ||
   14798:	bb58      	cbnz	r0, 147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txCoding)) != 0 ||
   1479a:	9b01      	ldr	r3, [sp, #4]
   1479c:	4628      	mov	r0, r5
   1479e:	79d9      	ldrb	r1, [r3, #7]
   147a0:	f7fa fd2c 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txPower)) != 0 ||
   147a4:	bb28      	cbnz	r0, 147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxCoding)) != 0 ||
   147a6:	9b01      	ldr	r3, [sp, #4]
   147a8:	4628      	mov	r0, r5
   147aa:	7a19      	ldrb	r1, [r3, #8]
   147ac:	f7fa fd26 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txCoding)) != 0 ||
   147b0:	b9f8      	cbnz	r0, 147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxLvl)) != 0 ||
   147b2:	9b01      	ldr	r3, [sp, #4]
   147b4:	4628      	mov	r0, r5
   147b6:	7a59      	ldrb	r1, [r3, #9]
   147b8:	f7fa fd20 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->rxCoding)) != 0 ||
   147bc:	b9c8      	cbnz	r0, 147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->snr)) != 0 ||
   147be:	9b01      	ldr	r3, [sp, #4]
   147c0:	4628      	mov	r0, r5
   147c2:	7a99      	ldrb	r1, [r3, #10]
   147c4:	f7fa fd1a 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->rxLvl)) != 0 ||
   147c8:	b998      	cbnz	r0, 147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txPowerModified)) != 0 ||
   147ca:	9b01      	ldr	r3, [sp, #4]
   147cc:	4628      	mov	r0, r5
   147ce:	7ad9      	ldrb	r1, [r3, #11]
   147d0:	f7fa fd14 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->snr)) != 0 ||
   147d4:	b968      	cbnz	r0, 147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->txCodingModified)) != 0 ||
   147d6:	9b01      	ldr	r3, [sp, #4]
   147d8:	4628      	mov	r0, r5
   147da:	7b19      	ldrb	r1, [r3, #12]
   147dc:	f7fa fd0e 	bl	f1fc <cosem_setInt8>
                (ret = cosem_setInt8(data, it->txPowerModified)) != 0 ||
   147e0:	b938      	cbnz	r0, 147f2 <cosem_getCommunications+0xb8>
                (ret = cosem_setInt8(data, it->rxCodingModified)) != 0)
   147e2:	9b01      	ldr	r3, [sp, #4]
   147e4:	4628      	mov	r0, r5
   147e6:	7b59      	ldrb	r1, [r3, #13]
   147e8:	f7fa fd08 	bl	f1fc <cosem_setInt8>
   147ec:	3701      	adds	r7, #1
                (ret = cosem_setInt8(data, it->txCodingModified)) != 0 ||
   147ee:	2800      	cmp	r0, #0
   147f0:	d0b5      	beq.n	1475e <cosem_getCommunications+0x24>
                (ret = cosem_setInt8(data, it->rxCodingModified)) != 0)
   147f2:	4604      	mov	r4, r0
    return ret;
   147f4:	e7ac      	b.n	14750 <cosem_getCommunications+0x16>

000147f6 <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData>:

int  cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(
    gxValueEventArg* e)
{
    int ret;
    switch (e->index)
   147f6:	7e03      	ldrb	r3, [r0, #24]
   147f8:	3b02      	subs	r3, #2
   147fa:	2b04      	cmp	r3, #4
   147fc:	d80e      	bhi.n	1481c <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData+0x26>
   147fe:	e8df f003 	tbb	[pc, r3]
   14802:	0503      	.short	0x0503
   14804:	0907      	.short	0x0907
   14806:	0b          	.byte	0x0b
   14807:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_getMulticastEntries(e);
   14808:	f7ff bea6 	b.w	14558 <cosem_getMulticastEntries>
        break;
    case 3:
        ret = cosem_getSwitchTable(e);
   1480c:	f7ff bed6 	b.w	145bc <cosem_getSwitchTable>
        break;
    case 4:
        ret = cosem_getDirectTable(e);
   14810:	f7ff befb 	b.w	1460a <cosem_getDirectTable>
        break;
    case 5:
        ret = cosem_getAvailableSwitches(e);
   14814:	f7ff bf4e 	b.w	146b4 <cosem_getAvailableSwitches>
        break;
    case 6:
        ret = cosem_getCommunications(e);
   14818:	f7ff bf8f 	b.w	1473a <cosem_getCommunications>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1481c:	f44f 7081 	mov.w	r0, #258	; 0x102
   14820:	4770      	bx	lr

00014822 <cosem_getPrimeNbOfdmPlcApplicationsIdentification>:
int  cosem_getPrimeNbOfdmPlcApplicationsIdentification(
    gxValueEventArg* e)
{
    int ret;
    gxPrimeNbOfdmPlcApplicationsIdentification* object = (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target;
    switch (e->index)
   14822:	7e02      	ldrb	r2, [r0, #24]
    gxPrimeNbOfdmPlcApplicationsIdentification* object = (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target;
   14824:	6943      	ldr	r3, [r0, #20]
    switch (e->index)
   14826:	2a03      	cmp	r2, #3
   14828:	d008      	beq.n	1483c <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x1a>
   1482a:	2a04      	cmp	r2, #4
   1482c:	d00a      	beq.n	14844 <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x22>
   1482e:	2a02      	cmp	r2, #2
   14830:	d10a      	bne.n	14848 <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x26>
    {
    case 2:
    {
        ret = cosem_setOctetString2(e->value.byteArr, object->firmwareVersion.data, (uint16_t)object->firmwareVersion.size);
   14832:	8ada      	ldrh	r2, [r3, #22]
   14834:	6919      	ldr	r1, [r3, #16]
   14836:	6880      	ldr	r0, [r0, #8]
   14838:	f7fa bc95 	b.w	f166 <cosem_setOctetString2>
    }
    break;
    case 3:
        ret = cosem_setUInt16(e->value.byteArr, object->vendorId);
   1483c:	8b99      	ldrh	r1, [r3, #28]
        break;
    case 4:
        ret = cosem_setUInt16(e->value.byteArr, object->productId);
   1483e:	6880      	ldr	r0, [r0, #8]
   14840:	f7fa bcc0 	b.w	f1c4 <cosem_setUInt16>
   14844:	8bd9      	ldrh	r1, [r3, #30]
   14846:	e7fa      	b.n	1483e <cosem_getPrimeNbOfdmPlcApplicationsIdentification+0x1c>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   14848:	f44f 7081 	mov.w	r0, #258	; 0x102
   1484c:	4770      	bx	lr

0001484e <cosem_getArbitrator>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_APPLICATIONS_IDENTIFICATION
#ifndef DLMS_IGNORE_ARBITRATOR
int cosem_getArbitrator(gxValueEventArg* e)
{
   1484e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14852:	7e03      	ldrb	r3, [r0, #24]
    int ret;
    uint16_t pos;
    gxActionItem* it;
    gxByteBuffer* data = e->value.byteArr;
   14854:	6885      	ldr	r5, [r0, #8]
    gxArbitrator* object = (gxArbitrator*)e->target;
   14856:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   14858:	3b02      	subs	r3, #2
{
   1485a:	4607      	mov	r7, r0
   1485c:	2b04      	cmp	r3, #4
   1485e:	f200 80da 	bhi.w	14a16 <cosem_getArbitrator+0x1c8>
   14862:	e8df f013 	tbh	[pc, r3, lsl #1]
   14866:	0005      	.short	0x0005
   14868:	00790043 	.word	0x00790043
   1486c:	00d20098 	.word	0x00d20098
    {
    case 2:
    {
        if ((ret = cosem_setArray(data, object->actions.size)) == 0)
   14870:	8af1      	ldrh	r1, [r6, #22]
   14872:	4628      	mov	r0, r5
   14874:	f7fa fd01 	bl	f27a <cosem_setArray>
   14878:	4604      	mov	r4, r0
   1487a:	b118      	cbz	r0, 14884 <cosem_getArbitrator+0x36>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1487c:	4620      	mov	r0, r4
   1487e:	b002      	add	sp, #8
   14880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14884:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->actions, pos, (void**)&it)) != 0)
   14886:	f106 0810 	add.w	r8, r6, #16
            for (pos = 0; pos != object->actions.size; ++pos)
   1488a:	8af3      	ldrh	r3, [r6, #22]
   1488c:	b2b9      	uxth	r1, r7
   1488e:	428b      	cmp	r3, r1
   14890:	d0f4      	beq.n	1487c <cosem_getArbitrator+0x2e>
                if ((ret = arr_getByIndex(&object->actions, pos, (void**)&it)) != 0)
   14892:	aa01      	add	r2, sp, #4
   14894:	4640      	mov	r0, r8
   14896:	f7fd f980 	bl	11b9a <arr_getByIndex>
   1489a:	bb28      	cbnz	r0, 148e8 <cosem_getArbitrator+0x9a>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   1489c:	2102      	movs	r1, #2
   1489e:	4628      	mov	r0, r5
   148a0:	f7f9 fdb5 	bl	e40e <bb_setUInt8>
   148a4:	bb00      	cbnz	r0, 148e8 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   148a6:	2102      	movs	r1, #2
   148a8:	4628      	mov	r0, r5
   148aa:	f7f9 fdb0 	bl	e40e <bb_setUInt8>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_STRUCTURE)) != 0 ||
   148ae:	b9d8      	cbnz	r0, 148e8 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   148b0:	2109      	movs	r1, #9
   148b2:	4628      	mov	r0, r5
   148b4:	f7f9 fdab 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, 2)) != 0 ||
   148b8:	b9b0      	cbnz	r0, 148e8 <cosem_getArbitrator+0x9a>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   148ba:	2106      	movs	r1, #6
   148bc:	4628      	mov	r0, r5
   148be:	f7f9 fda6 	bl	e40e <bb_setUInt8>
                    (ret = bb_setUInt8(data, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   148c2:	b988      	cbnz	r0, 148e8 <cosem_getArbitrator+0x9a>
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)it->script), 6)) != 0 ||
   148c4:	9b01      	ldr	r3, [sp, #4]
   148c6:	6818      	ldr	r0, [r3, #0]
   148c8:	f7ef fbe6 	bl	4098 <obj_getLogicalName>
   148cc:	2206      	movs	r2, #6
   148ce:	4601      	mov	r1, r0
   148d0:	4628      	mov	r0, r5
   148d2:	f7f9 fe82 	bl	e5da <bb_set>
                    (ret = bb_setUInt8(data, 6)) != 0 ||
   148d6:	b938      	cbnz	r0, 148e8 <cosem_getArbitrator+0x9a>
                    (ret = cosem_setUInt16(data, it->scriptSelector)) != 0)
   148d8:	9b01      	ldr	r3, [sp, #4]
   148da:	4628      	mov	r0, r5
   148dc:	8899      	ldrh	r1, [r3, #4]
   148de:	f7fa fc71 	bl	f1c4 <cosem_setUInt16>
   148e2:	3701      	adds	r7, #1
                    (ret = bb_set(data, obj_getLogicalName((gxObject*)it->script), 6)) != 0 ||
   148e4:	2800      	cmp	r0, #0
   148e6:	d0d0      	beq.n	1488a <cosem_getArbitrator+0x3c>
                    (ret = cosem_setUInt16(data, it->scriptSelector)) != 0)
   148e8:	4604      	mov	r4, r0
    return ret;
   148ea:	e7c7      	b.n	1487c <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->permissionsTable.size)) == 0)
   148ec:	8c71      	ldrh	r1, [r6, #34]	; 0x22
   148ee:	4628      	mov	r0, r5
   148f0:	f7fa fcc3 	bl	f27a <cosem_setArray>
   148f4:	4604      	mov	r4, r0
   148f6:	2800      	cmp	r0, #0
   148f8:	d1c0      	bne.n	1487c <cosem_getArbitrator+0x2e>
   148fa:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->permissionsTable, pos, (void**)&a)) != 0)
   148fc:	f106 091c 	add.w	r9, r6, #28
   14900:	e024      	b.n	1494c <cosem_getArbitrator+0xfe>
   14902:	aa01      	add	r2, sp, #4
   14904:	4648      	mov	r0, r9
   14906:	f7fd f948 	bl	11b9a <arr_getByIndex>
   1490a:	4604      	mov	r4, r0
   1490c:	2800      	cmp	r0, #0
   1490e:	d1b5      	bne.n	1487c <cosem_getArbitrator+0x2e>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   14910:	2104      	movs	r1, #4
   14912:	4628      	mov	r0, r5
   14914:	f7f9 fd7b 	bl	e40e <bb_setUInt8>
   14918:	4604      	mov	r4, r0
   1491a:	2800      	cmp	r0, #0
   1491c:	d1ae      	bne.n	1487c <cosem_getArbitrator+0x2e>
                    (ret = hlp_setObjectCount(a->size, data)) != 0)
   1491e:	9b01      	ldr	r3, [sp, #4]
   14920:	4629      	mov	r1, r5
   14922:	88d8      	ldrh	r0, [r3, #6]
   14924:	f006 fe6f 	bl	1b606 <hlp_setObjectCount>
   14928:	f108 0801 	add.w	r8, r8, #1
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   1492c:	4604      	mov	r4, r0
   1492e:	2800      	cmp	r0, #0
   14930:	d1a4      	bne.n	1487c <cosem_getArbitrator+0x2e>
                ret = bb_set(e->value.byteArr, a->data, ba_getByteCount(a->size));
   14932:	9b01      	ldr	r3, [sp, #4]
   14934:	68bc      	ldr	r4, [r7, #8]
   14936:	88d8      	ldrh	r0, [r3, #6]
   14938:	f8d3 a000 	ldr.w	sl, [r3]
   1493c:	f7ec fe22 	bl	1584 <ba_getByteCount>
   14940:	4651      	mov	r1, sl
   14942:	4602      	mov	r2, r0
   14944:	4620      	mov	r0, r4
   14946:	f7f9 fe48 	bl	e5da <bb_set>
   1494a:	4604      	mov	r4, r0
            for (pos = 0; pos != object->permissionsTable.size; ++pos)
   1494c:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   1494e:	fa1f f188 	uxth.w	r1, r8
   14952:	428b      	cmp	r3, r1
   14954:	d1d5      	bne.n	14902 <cosem_getArbitrator+0xb4>
   14956:	e791      	b.n	1487c <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->weightingsTable.size)) == 0)
   14958:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
   1495a:	4628      	mov	r0, r5
   1495c:	f7fa fc8d 	bl	f27a <cosem_setArray>
   14960:	4604      	mov	r4, r0
   14962:	2800      	cmp	r0, #0
   14964:	d18a      	bne.n	1487c <cosem_getArbitrator+0x2e>
   14966:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->weightingsTable, pos, (void**)&v)) != 0)
   14968:	f106 0728 	add.w	r7, r6, #40	; 0x28
   1496c:	e00d      	b.n	1498a <cosem_getArbitrator+0x13c>
   1496e:	aa01      	add	r2, sp, #4
   14970:	4638      	mov	r0, r7
   14972:	f7fd f912 	bl	11b9a <arr_getByIndex>
   14976:	2800      	cmp	r0, #0
   14978:	d1b6      	bne.n	148e8 <cosem_getArbitrator+0x9a>
                if ((ret = cosem_setVariant(data, v)) != 0)
   1497a:	9901      	ldr	r1, [sp, #4]
   1497c:	4628      	mov	r0, r5
   1497e:	f7fa fc67 	bl	f250 <cosem_setVariant>
   14982:	f108 0801 	add.w	r8, r8, #1
   14986:	2800      	cmp	r0, #0
   14988:	d1ae      	bne.n	148e8 <cosem_getArbitrator+0x9a>
            for (pos = 0; pos != object->weightingsTable.size; ++pos)
   1498a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
   1498c:	fa1f f188 	uxth.w	r1, r8
   14990:	428b      	cmp	r3, r1
   14992:	d1ec      	bne.n	1496e <cosem_getArbitrator+0x120>
   14994:	e772      	b.n	1487c <cosem_getArbitrator+0x2e>
        if ((ret = cosem_setArray(data, object->mostRecentRequestsTable.size)) == 0)
   14996:	8f71      	ldrh	r1, [r6, #58]	; 0x3a
   14998:	4628      	mov	r0, r5
   1499a:	f7fa fc6e 	bl	f27a <cosem_setArray>
   1499e:	4604      	mov	r4, r0
   149a0:	2800      	cmp	r0, #0
   149a2:	f47f af6b 	bne.w	1487c <cosem_getArbitrator+0x2e>
   149a6:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->mostRecentRequestsTable, pos, (void**)&a)) != 0)
   149a8:	f106 0934 	add.w	r9, r6, #52	; 0x34
   149ac:	e027      	b.n	149fe <cosem_getArbitrator+0x1b0>
   149ae:	aa01      	add	r2, sp, #4
   149b0:	4648      	mov	r0, r9
   149b2:	f7fd f8f2 	bl	11b9a <arr_getByIndex>
   149b6:	4604      	mov	r4, r0
   149b8:	2800      	cmp	r0, #0
   149ba:	f47f af5f 	bne.w	1487c <cosem_getArbitrator+0x2e>
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   149be:	2104      	movs	r1, #4
   149c0:	4628      	mov	r0, r5
   149c2:	f7f9 fd24 	bl	e40e <bb_setUInt8>
   149c6:	4604      	mov	r4, r0
   149c8:	2800      	cmp	r0, #0
   149ca:	f47f af57 	bne.w	1487c <cosem_getArbitrator+0x2e>
                    (ret = hlp_setObjectCount(a->size, data)) != 0)
   149ce:	9b01      	ldr	r3, [sp, #4]
   149d0:	4629      	mov	r1, r5
   149d2:	88d8      	ldrh	r0, [r3, #6]
   149d4:	f006 fe17 	bl	1b606 <hlp_setObjectCount>
   149d8:	f108 0801 	add.w	r8, r8, #1
                if ((ret = bb_setUInt8(data, DLMS_DATA_TYPE_BIT_STRING)) != 0 ||
   149dc:	4604      	mov	r4, r0
   149de:	2800      	cmp	r0, #0
   149e0:	f47f af4c 	bne.w	1487c <cosem_getArbitrator+0x2e>
                ret = bb_set(e->value.byteArr, a->data, ba_getByteCount(a->size));
   149e4:	9b01      	ldr	r3, [sp, #4]
   149e6:	68bc      	ldr	r4, [r7, #8]
   149e8:	88d8      	ldrh	r0, [r3, #6]
   149ea:	f8d3 a000 	ldr.w	sl, [r3]
   149ee:	f7ec fdc9 	bl	1584 <ba_getByteCount>
   149f2:	4651      	mov	r1, sl
   149f4:	4602      	mov	r2, r0
   149f6:	4620      	mov	r0, r4
   149f8:	f7f9 fdef 	bl	e5da <bb_set>
   149fc:	4604      	mov	r4, r0
            for (pos = 0; pos != object->mostRecentRequestsTable.size; ++pos)
   149fe:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   14a00:	fa1f f188 	uxth.w	r1, r8
   14a04:	428b      	cmp	r3, r1
   14a06:	d1d2      	bne.n	149ae <cosem_getArbitrator+0x160>
   14a08:	e738      	b.n	1487c <cosem_getArbitrator+0x2e>
        ret = cosem_setUInt8(data, object->lastOutcome);
   14a0a:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
   14a0e:	4628      	mov	r0, r5
   14a10:	f7fa fbca 	bl	f1a8 <cosem_setUInt8>
   14a14:	e768      	b.n	148e8 <cosem_getArbitrator+0x9a>
    switch (e->index)
   14a16:	f44f 7481 	mov.w	r4, #258	; 0x102
   14a1a:	e72f      	b.n	1487c <cosem_getArbitrator+0x2e>

00014a1c <cosem_getIec8802LlcType1Setup>:
    gxValueEventArg* e)
{
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
    gxIec8802LlcType1Setup* object = (gxIec8802LlcType1Setup*)e->target;
    if (e->index == 2)
   14a1c:	7e03      	ldrb	r3, [r0, #24]
   14a1e:	2b02      	cmp	r3, #2
   14a20:	d104      	bne.n	14a2c <cosem_getIec8802LlcType1Setup+0x10>
    {
        ret = cosem_setUInt16(data, object->maximumOctetsUiPdu);
   14a22:	6943      	ldr	r3, [r0, #20]
   14a24:	6880      	ldr	r0, [r0, #8]
   14a26:	8a19      	ldrh	r1, [r3, #16]
   14a28:	f7fa bbcc 	b.w	f1c4 <cosem_setUInt16>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   14a2c:	f44f 7081 	mov.w	r0, #258	; 0x102
   14a30:	4770      	bx	lr

00014a32 <cosem_getIec8802LlcType2Setup>:
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
int cosem_getIec8802LlcType2Setup(
    gxValueEventArg* e)
{
   14a32:	4602      	mov	r2, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   14a34:	6880      	ldr	r0, [r0, #8]
    gxIec8802LlcType2Setup* object = (gxIec8802LlcType2Setup*)e->target;
   14a36:	6953      	ldr	r3, [r2, #20]
    switch (e->index)
   14a38:	7e12      	ldrb	r2, [r2, #24]
   14a3a:	3a02      	subs	r2, #2
   14a3c:	2a07      	cmp	r2, #7
   14a3e:	d817      	bhi.n	14a70 <cosem_getIec8802LlcType2Setup+0x3e>
   14a40:	e8df f002 	tbb	[pc, r2]
   14a44:	0c090704 	.word	0x0c090704
   14a48:	1412100e 	.word	0x1412100e
    {
    case 2:
        ret = cosem_setUInt8(data, object->transmitWindowSizeK);
   14a4c:	7c19      	ldrb	r1, [r3, #16]
        break;
    case 3:
        ret = cosem_setUInt8(data, object->transmitWindowSizeRW);
   14a4e:	f7fa bbab 	b.w	f1a8 <cosem_setUInt8>
   14a52:	7c59      	ldrb	r1, [r3, #17]
   14a54:	e7fb      	b.n	14a4e <cosem_getIec8802LlcType2Setup+0x1c>
        break;
    case 4:
        ret = cosem_setUInt16(data, object->maximumOctetsPdu);
   14a56:	8a59      	ldrh	r1, [r3, #18]
        break;
    case 8:
        ret = cosem_setUInt16(data, object->rejectTimer);
        break;
    case 9:
        ret = cosem_setUInt16(data, object->busyStateTimer);
   14a58:	f7fa bbb4 	b.w	f1c4 <cosem_setUInt16>
        ret = cosem_setUInt8(data, object->maximumNumberTransmissions);
   14a5c:	7d19      	ldrb	r1, [r3, #20]
   14a5e:	e7f6      	b.n	14a4e <cosem_getIec8802LlcType2Setup+0x1c>
        ret = cosem_setUInt16(data, object->acknowledgementTimer);
   14a60:	8ad9      	ldrh	r1, [r3, #22]
   14a62:	e7f9      	b.n	14a58 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->bitTimer);
   14a64:	8b19      	ldrh	r1, [r3, #24]
   14a66:	e7f7      	b.n	14a58 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->rejectTimer);
   14a68:	8b59      	ldrh	r1, [r3, #26]
   14a6a:	e7f5      	b.n	14a58 <cosem_getIec8802LlcType2Setup+0x26>
        ret = cosem_setUInt16(data, object->busyStateTimer);
   14a6c:	8b99      	ldrh	r1, [r3, #28]
   14a6e:	e7f3      	b.n	14a58 <cosem_getIec8802LlcType2Setup+0x26>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   14a70:	f44f 7081 	mov.w	r0, #258	; 0x102
   14a74:	4770      	bx	lr

00014a76 <cosem_getIec8802LlcType3Setup>:

#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE3_SETUP
int cosem_getIec8802LlcType3Setup(
    gxValueEventArg* e)
{
   14a76:	4602      	mov	r2, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   14a78:	6880      	ldr	r0, [r0, #8]
    gxIec8802LlcType3Setup* object = (gxIec8802LlcType3Setup*)e->target;
   14a7a:	6953      	ldr	r3, [r2, #20]
    switch (e->index)
   14a7c:	7e12      	ldrb	r2, [r2, #24]
   14a7e:	3a02      	subs	r2, #2
   14a80:	2a04      	cmp	r2, #4
   14a82:	d810      	bhi.n	14aa6 <cosem_getIec8802LlcType3Setup+0x30>
   14a84:	e8df f002 	tbb	[pc, r2]
   14a88:	0b090603 	.word	0x0b090603
   14a8c:	0d          	.byte	0x0d
   14a8d:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setUInt16(data, object->maximumOctetsACnPdu);
   14a8e:	8a19      	ldrh	r1, [r3, #16]
        break;
    case 5:
        ret = cosem_setUInt16(data, object->receiveLifetime);
        break;
    case 6:
        ret = cosem_setUInt16(data, object->transmitLifetime);
   14a90:	f7fa bb98 	b.w	f1c4 <cosem_setUInt16>
        ret = cosem_setUInt8(data, object->maximumTransmissions);
   14a94:	7c99      	ldrb	r1, [r3, #18]
   14a96:	f7fa bb87 	b.w	f1a8 <cosem_setUInt8>
        ret = cosem_setUInt16(data, object->acknowledgementTime);
   14a9a:	8a99      	ldrh	r1, [r3, #20]
   14a9c:	e7f8      	b.n	14a90 <cosem_getIec8802LlcType3Setup+0x1a>
        ret = cosem_setUInt16(data, object->receiveLifetime);
   14a9e:	8ad9      	ldrh	r1, [r3, #22]
   14aa0:	e7f6      	b.n	14a90 <cosem_getIec8802LlcType3Setup+0x1a>
        ret = cosem_setUInt16(data, object->transmitLifetime);
   14aa2:	8b19      	ldrh	r1, [r3, #24]
   14aa4:	e7f4      	b.n	14a90 <cosem_getIec8802LlcType3Setup+0x1a>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   14aa6:	f44f 7081 	mov.w	r0, #258	; 0x102
   14aaa:	4770      	bx	lr

00014aac <cosem_getSFSKActiveInitiator>:
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE3_SETUP
#ifndef DLMS_IGNORE_SFSK_ACTIVE_INITIATOR
int cosem_getSFSKActiveInitiator(
    gxValueEventArg* e)
{
   14aac:	b538      	push	{r3, r4, r5, lr}
    int ret;
    gxByteBuffer* data = e->value.byteArr;
    gxSFSKActiveInitiator* object = (gxSFSKActiveInitiator*)e->target;
    if (e->index == 2)
   14aae:	7e03      	ldrb	r3, [r0, #24]
   14ab0:	2b02      	cmp	r3, #2
   14ab2:	d117      	bne.n	14ae4 <cosem_getSFSKActiveInitiator+0x38>
    gxByteBuffer* data = e->value.byteArr;
   14ab4:	6884      	ldr	r4, [r0, #8]
    gxSFSKActiveInitiator* object = (gxSFSKActiveInitiator*)e->target;
   14ab6:	6945      	ldr	r5, [r0, #20]
    {
        if ((ret = cosem_setStructure(data, 3)) == 0 &&
   14ab8:	2103      	movs	r1, #3
   14aba:	4620      	mov	r0, r4
   14abc:	f7fa fbcf 	bl	f25e <cosem_setStructure>
   14ac0:	b990      	cbnz	r0, 14ae8 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setOctetString(data, &object->systemTitle)) == 0 &&
   14ac2:	f105 0110 	add.w	r1, r5, #16
   14ac6:	4620      	mov	r0, r4
   14ac8:	f7fa fb00 	bl	f0cc <cosem_setOctetString>
        if ((ret = cosem_setStructure(data, 3)) == 0 &&
   14acc:	b960      	cbnz	r0, 14ae8 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setUInt16(data, object->macAddress)) == 0 &&
   14ace:	8ba9      	ldrh	r1, [r5, #28]
   14ad0:	4620      	mov	r0, r4
   14ad2:	f7fa fb77 	bl	f1c4 <cosem_setUInt16>
            (ret = cosem_setOctetString(data, &object->systemTitle)) == 0 &&
   14ad6:	b938      	cbnz	r0, 14ae8 <cosem_getSFSKActiveInitiator+0x3c>
            (ret = cosem_setUInt8(data, object->lSapSelector)) == 0)
   14ad8:	7fa9      	ldrb	r1, [r5, #30]
   14ada:	4620      	mov	r0, r4
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   14adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = cosem_setUInt8(data, object->lSapSelector)) == 0)
   14ae0:	f7fa bb62 	b.w	f1a8 <cosem_setUInt8>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14ae4:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   14ae8:	bd38      	pop	{r3, r4, r5, pc}

00014aea <cosem_getFSKMacCounters>:
#endif //DLMS_IGNORE_SFSK_ACTIVE_INITIATOR
#ifndef DLMS_IGNORE_SFSK_MAC_COUNTERS
int cosem_getFSKMacCounters(
    gxValueEventArg* e)
{
   14aea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14aee:	7e03      	ldrb	r3, [r0, #24]
    int ret = 0;
    uint16_t pos;
    gxByteBuffer* data = e->value.byteArr;
   14af0:	6885      	ldr	r5, [r0, #8]
    gxFSKMacCounters* object = (gxFSKMacCounters*)e->target;
   14af2:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   14af4:	3b02      	subs	r3, #2
   14af6:	2b06      	cmp	r3, #6
   14af8:	f200 808c 	bhi.w	14c14 <cosem_getFSKMacCounters+0x12a>
   14afc:	e8df f003 	tbb	[pc, r3]
   14b00:	82572f04 	.word	0x82572f04
   14b04:	8684      	.short	0x8684
   14b06:	88          	.byte	0x88
   14b07:	00          	.byte	0x00
    {
    case 2:
    {
        gxUint16PairUint32* it;
        if ((ret = cosem_setArray(data, object->synchronizationRegister.size)) == 0)
   14b08:	8af1      	ldrh	r1, [r6, #22]
   14b0a:	4628      	mov	r0, r5
   14b0c:	f7fa fbb5 	bl	f27a <cosem_setArray>
   14b10:	4604      	mov	r4, r0
   14b12:	b118      	cbz	r0, 14b1c <cosem_getFSKMacCounters+0x32>
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   14b14:	4620      	mov	r0, r4
   14b16:	b002      	add	sp, #8
   14b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b1c:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->synchronizationRegister, pos, (void**)&it)) != 0)
   14b1e:	f106 0810 	add.w	r8, r6, #16
            for (pos = 0; pos != object->synchronizationRegister.size; ++pos)
   14b22:	8af3      	ldrh	r3, [r6, #22]
   14b24:	b2b9      	uxth	r1, r7
   14b26:	428b      	cmp	r3, r1
   14b28:	d0f4      	beq.n	14b14 <cosem_getFSKMacCounters+0x2a>
                if ((ret = arr_getByIndex(&object->synchronizationRegister, pos, (void**)&it)) != 0)
   14b2a:	aa01      	add	r2, sp, #4
   14b2c:	4640      	mov	r0, r8
   14b2e:	f7fd f834 	bl	11b9a <arr_getByIndex>
   14b32:	b990      	cbnz	r0, 14b5a <cosem_getFSKMacCounters+0x70>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   14b34:	2102      	movs	r1, #2
   14b36:	4628      	mov	r0, r5
   14b38:	f7fa fb91 	bl	f25e <cosem_setStructure>
   14b3c:	b968      	cbnz	r0, 14b5a <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   14b3e:	9b01      	ldr	r3, [sp, #4]
   14b40:	4628      	mov	r0, r5
   14b42:	8819      	ldrh	r1, [r3, #0]
   14b44:	f7fa fb3e 	bl	f1c4 <cosem_setUInt16>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   14b48:	b938      	cbnz	r0, 14b5a <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt32(data, it->second)) != 0)
   14b4a:	9b01      	ldr	r3, [sp, #4]
   14b4c:	4628      	mov	r0, r5
   14b4e:	6859      	ldr	r1, [r3, #4]
   14b50:	f7fa fb46 	bl	f1e0 <cosem_setUInt32>
   14b54:	3701      	adds	r7, #1
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   14b56:	2800      	cmp	r0, #0
   14b58:	d0e3      	beq.n	14b22 <cosem_getFSKMacCounters+0x38>
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   14b5a:	4604      	mov	r4, r0
        break;
   14b5c:	e7da      	b.n	14b14 <cosem_getFSKMacCounters+0x2a>
        if ((ret = cosem_setStructure(data, 5)) == 0 &&
   14b5e:	2105      	movs	r1, #5
   14b60:	4628      	mov	r0, r5
   14b62:	f7fa fb7c 	bl	f25e <cosem_setStructure>
   14b66:	4604      	mov	r4, r0
   14b68:	2800      	cmp	r0, #0
   14b6a:	d1d3      	bne.n	14b14 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->physicalLayerDesynchronization)) == 0 &&
   14b6c:	69f1      	ldr	r1, [r6, #28]
   14b6e:	4628      	mov	r0, r5
   14b70:	f7fa fb36 	bl	f1e0 <cosem_setUInt32>
        if ((ret = cosem_setStructure(data, 5)) == 0 &&
   14b74:	4604      	mov	r4, r0
   14b76:	2800      	cmp	r0, #0
   14b78:	d1cc      	bne.n	14b14 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->timeOutNotAddressedDesynchronization)) == 0 &&
   14b7a:	6a31      	ldr	r1, [r6, #32]
   14b7c:	4628      	mov	r0, r5
   14b7e:	f7fa fb2f 	bl	f1e0 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->physicalLayerDesynchronization)) == 0 &&
   14b82:	4604      	mov	r4, r0
   14b84:	2800      	cmp	r0, #0
   14b86:	d1c5      	bne.n	14b14 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->timeOutFrameNotOkDesynchronization)) == 0 &&
   14b88:	6a71      	ldr	r1, [r6, #36]	; 0x24
   14b8a:	4628      	mov	r0, r5
   14b8c:	f7fa fb28 	bl	f1e0 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->timeOutNotAddressedDesynchronization)) == 0 &&
   14b90:	4604      	mov	r4, r0
   14b92:	2800      	cmp	r0, #0
   14b94:	d1be      	bne.n	14b14 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->writeRequestDesynchronization)) == 0 &&
   14b96:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   14b98:	4628      	mov	r0, r5
   14b9a:	f7fa fb21 	bl	f1e0 <cosem_setUInt32>
            (ret = cosem_setUInt32(data, object->timeOutFrameNotOkDesynchronization)) == 0 &&
   14b9e:	4604      	mov	r4, r0
   14ba0:	2800      	cmp	r0, #0
   14ba2:	d1b7      	bne.n	14b14 <cosem_getFSKMacCounters+0x2a>
            (ret = cosem_setUInt32(data, object->wrongInitiatorDesynchronization)) == 0)
   14ba4:	6af1      	ldr	r1, [r6, #44]	; 0x2c
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   14ba6:	4628      	mov	r0, r5
   14ba8:	f7fa fb1a 	bl	f1e0 <cosem_setUInt32>
   14bac:	e7d5      	b.n	14b5a <cosem_getFSKMacCounters+0x70>
        if ((ret = cosem_setArray(data, object->broadcastFramesCounter.size)) == 0)
   14bae:	8ef1      	ldrh	r1, [r6, #54]	; 0x36
   14bb0:	4628      	mov	r0, r5
   14bb2:	f7fa fb62 	bl	f27a <cosem_setArray>
   14bb6:	4604      	mov	r4, r0
   14bb8:	2800      	cmp	r0, #0
   14bba:	d1ab      	bne.n	14b14 <cosem_getFSKMacCounters+0x2a>
   14bbc:	4607      	mov	r7, r0
                if ((ret = arr_getByIndex(&object->broadcastFramesCounter, pos, (void**)&it)) != 0)
   14bbe:	f106 0830 	add.w	r8, r6, #48	; 0x30
   14bc2:	e01a      	b.n	14bfa <cosem_getFSKMacCounters+0x110>
   14bc4:	aa01      	add	r2, sp, #4
   14bc6:	4640      	mov	r0, r8
   14bc8:	f7fc ffe7 	bl	11b9a <arr_getByIndex>
   14bcc:	2800      	cmp	r0, #0
   14bce:	d1c4      	bne.n	14b5a <cosem_getFSKMacCounters+0x70>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   14bd0:	2102      	movs	r1, #2
   14bd2:	4628      	mov	r0, r5
   14bd4:	f7fa fb43 	bl	f25e <cosem_setStructure>
   14bd8:	2800      	cmp	r0, #0
   14bda:	d1be      	bne.n	14b5a <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	4628      	mov	r0, r5
   14be0:	8819      	ldrh	r1, [r3, #0]
   14be2:	f7fa faef 	bl	f1c4 <cosem_setUInt16>
                if ((ret = cosem_setStructure(data, 2)) != 0 ||
   14be6:	2800      	cmp	r0, #0
   14be8:	d1b7      	bne.n	14b5a <cosem_getFSKMacCounters+0x70>
                    (ret = cosem_setUInt32(data, it->second)) != 0)
   14bea:	9b01      	ldr	r3, [sp, #4]
   14bec:	4628      	mov	r0, r5
   14bee:	6859      	ldr	r1, [r3, #4]
   14bf0:	f7fa faf6 	bl	f1e0 <cosem_setUInt32>
   14bf4:	3701      	adds	r7, #1
                    (ret = cosem_setUInt16(data, it->first)) != 0 ||
   14bf6:	2800      	cmp	r0, #0
   14bf8:	d1af      	bne.n	14b5a <cosem_getFSKMacCounters+0x70>
            for (pos = 0; pos != object->broadcastFramesCounter.size; ++pos)
   14bfa:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
   14bfc:	b2b9      	uxth	r1, r7
   14bfe:	428b      	cmp	r3, r1
   14c00:	d1e0      	bne.n	14bc4 <cosem_getFSKMacCounters+0xda>
   14c02:	e787      	b.n	14b14 <cosem_getFSKMacCounters+0x2a>
        ret = cosem_setUInt32(data, object->repetitionsCounter);
   14c04:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   14c06:	e7ce      	b.n	14ba6 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->transmissionsCounter);
   14c08:	6c31      	ldr	r1, [r6, #64]	; 0x40
   14c0a:	e7cc      	b.n	14ba6 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->crcOkFramesCounter);
   14c0c:	6c71      	ldr	r1, [r6, #68]	; 0x44
   14c0e:	e7ca      	b.n	14ba6 <cosem_getFSKMacCounters+0xbc>
        ret = cosem_setUInt32(data, object->crcNOkFramesCounter);
   14c10:	6cb1      	ldr	r1, [r6, #72]	; 0x48
   14c12:	e7c8      	b.n	14ba6 <cosem_getFSKMacCounters+0xbc>
    switch (e->index)
   14c14:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   14c18:	e77c      	b.n	14b14 <cosem_getFSKMacCounters+0x2a>

00014c1a <cosem_getSFSKMacSynchronizationTimeouts>:
#endif //DLMS_IGNORE_SFSK_MAC_COUNTERS

#ifndef DLMS_IGNORE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS
int cosem_getSFSKMacSynchronizationTimeouts(
    gxValueEventArg* e)
{
   14c1a:	4603      	mov	r3, r0
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   14c1c:	6880      	ldr	r0, [r0, #8]
    gxSFSKMacSynchronizationTimeouts* object = (gxSFSKMacSynchronizationTimeouts*)e->target;
   14c1e:	695a      	ldr	r2, [r3, #20]
    switch (e->index)
   14c20:	7e1b      	ldrb	r3, [r3, #24]
   14c22:	3b02      	subs	r3, #2
   14c24:	2b03      	cmp	r3, #3
   14c26:	d80c      	bhi.n	14c42 <cosem_getSFSKMacSynchronizationTimeouts+0x28>
   14c28:	e8df f003 	tbb	[pc, r3]
   14c2c:	09070502 	.word	0x09070502
    {
    case 2:
        ret = cosem_setUInt16(data, object->searchInitiatorTimeout);
   14c30:	8a11      	ldrh	r1, [r2, #16]
        break;
    case 4:
        ret = cosem_setUInt16(data, object->timeOutNotAddressed);
        break;
    case 5:
        ret = cosem_setUInt16(data, object->timeOutFrameNotOK);
   14c32:	f7fa bac7 	b.w	f1c4 <cosem_setUInt16>
        ret = cosem_setUInt16(data, object->synchronizationConfirmationTimeout);
   14c36:	8a51      	ldrh	r1, [r2, #18]
   14c38:	e7fb      	b.n	14c32 <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        ret = cosem_setUInt16(data, object->timeOutNotAddressed);
   14c3a:	8a91      	ldrh	r1, [r2, #20]
   14c3c:	e7f9      	b.n	14c32 <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        ret = cosem_setUInt16(data, object->timeOutFrameNotOK);
   14c3e:	8ad1      	ldrh	r1, [r2, #22]
   14c40:	e7f7      	b.n	14c32 <cosem_getSFSKMacSynchronizationTimeouts+0x18>
        break;
    default:
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   14c42:	f44f 7081 	mov.w	r0, #258	; 0x102
   14c46:	4770      	bx	lr

00014c48 <cosem_getSFSKPhyMacSetUp>:
#endif //DLMS_IGNORE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS
#ifndef DLMS_IGNORE_SFSK_PHY_MAC_SETUP
int cosem_getSFSKPhyMacSetUp(
    gxValueEventArg* e)
{
   14c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14c4c:	7e03      	ldrb	r3, [r0, #24]
    int ret = 0;
    gxByteBuffer* data = e->value.byteArr;
   14c4e:	6885      	ldr	r5, [r0, #8]
    gxSFSKPhyMacSetUp* object = (gxSFSKPhyMacSetUp*)e->target;
   14c50:	6946      	ldr	r6, [r0, #20]
    switch (e->index)
   14c52:	3b02      	subs	r3, #2
   14c54:	2b0d      	cmp	r3, #13
   14c56:	d866      	bhi.n	14d26 <cosem_getSFSKPhyMacSetUp+0xde>
   14c58:	e8df f003 	tbb	[pc, r3]
   14c5c:	130e0c07 	.word	0x130e0c07
   14c60:	2e291715 	.word	0x2e291715
   14c64:	5d5a5451 	.word	0x5d5a5451
   14c68:	625f      	.short	0x625f
    {
    case 2:
        ret = cosem_setEnum(data, object->initiatorElectricalPhase);
   14c6a:	7c31      	ldrb	r1, [r6, #16]
        break;
    case 14:
        ret = cosem_setBoolean(data, object->synchronizationLocked);
        break;
    case 15:
        ret = cosem_setEnum(data, object->transmissionSpeed);
   14c6c:	4628      	mov	r0, r5
   14c6e:	f7fa fb12 	bl	f296 <cosem_setEnum>
   14c72:	e01a      	b.n	14caa <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setEnum(data, object->deltaElectricalPhase);
   14c74:	7c71      	ldrb	r1, [r6, #17]
   14c76:	e7f9      	b.n	14c6c <cosem_getSFSKPhyMacSetUp+0x24>
        ret = cosem_setUInt8(data, object->maxReceivingGain);
   14c78:	7cb1      	ldrb	r1, [r6, #18]
        ret = cosem_setUInt8(data, object->minDeltaCredit);
   14c7a:	4628      	mov	r0, r5
   14c7c:	f7fa fa94 	bl	f1a8 <cosem_setUInt8>
   14c80:	e013      	b.n	14caa <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setUInt8(data, object->maxTransmittingGain);
   14c82:	7cf1      	ldrb	r1, [r6, #19]
   14c84:	e7f9      	b.n	14c7a <cosem_getSFSKPhyMacSetUp+0x32>
        ret = cosem_setUInt8(data, object->searchInitiatorThreshold);
   14c86:	7d31      	ldrb	r1, [r6, #20]
   14c88:	e7f7      	b.n	14c7a <cosem_getSFSKPhyMacSetUp+0x32>
        if ((ret = cosem_setStructure(data, 2)) == 0 &&
   14c8a:	2102      	movs	r1, #2
   14c8c:	4628      	mov	r0, r5
   14c8e:	f7fa fae6 	bl	f25e <cosem_setStructure>
   14c92:	4604      	mov	r4, r0
   14c94:	b9b0      	cbnz	r0, 14cc4 <cosem_getSFSKPhyMacSetUp+0x7c>
            (ret = cosem_setUInt32(data, object->markFrequency)) == 0 &&
   14c96:	69b1      	ldr	r1, [r6, #24]
   14c98:	4628      	mov	r0, r5
   14c9a:	f7fa faa1 	bl	f1e0 <cosem_setUInt32>
        if ((ret = cosem_setStructure(data, 2)) == 0 &&
   14c9e:	4604      	mov	r4, r0
   14ca0:	b980      	cbnz	r0, 14cc4 <cosem_getSFSKPhyMacSetUp+0x7c>
            (ret = cosem_setUInt32(data, object->spaceFrequency)) == 0)
   14ca2:	69f1      	ldr	r1, [r6, #28]
   14ca4:	4628      	mov	r0, r5
   14ca6:	f7fa fa9b 	bl	f1e0 <cosem_setUInt32>
        ret = cosem_setEnum(data, object->transmissionSpeed);
   14caa:	4604      	mov	r4, r0
        break;
   14cac:	e00a      	b.n	14cc4 <cosem_getSFSKPhyMacSetUp+0x7c>
        ret = cosem_setUInt16(data, object->macAddress);
   14cae:	8c31      	ldrh	r1, [r6, #32]
        ret = cosem_setUInt16(data, object->initiatorMacAddress);
   14cb0:	4628      	mov	r0, r5
   14cb2:	f7fa fa87 	bl	f1c4 <cosem_setUInt16>
   14cb6:	e7f8      	b.n	14caa <cosem_getSFSKPhyMacSetUp+0x62>
        if ((ret = cosem_setArray(data, object->macGroupAddresses.size)) == 0)
   14cb8:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   14cba:	4628      	mov	r0, r5
   14cbc:	f7fa fadd 	bl	f27a <cosem_setArray>
   14cc0:	4604      	mov	r4, r0
   14cc2:	b1c0      	cbz	r0, 14cf6 <cosem_getSFSKPhyMacSetUp+0xae>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   14cc4:	4620      	mov	r0, r4
   14cc6:	b002      	add	sp, #8
   14cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if ((ret = arr_getByIndex(&object->macGroupAddresses, pos, (void**)&it)) != 0)
   14ccc:	aa01      	add	r2, sp, #4
   14cce:	4638      	mov	r0, r7
   14cd0:	f7fc ff63 	bl	11b9a <arr_getByIndex>
   14cd4:	2800      	cmp	r0, #0
   14cd6:	d1e8      	bne.n	14caa <cosem_getSFSKPhyMacSetUp+0x62>
                if ((ret = cosem_setUInt16(data, *it)) != 0)
   14cd8:	9b01      	ldr	r3, [sp, #4]
   14cda:	4628      	mov	r0, r5
   14cdc:	8819      	ldrh	r1, [r3, #0]
   14cde:	f7fa fa71 	bl	f1c4 <cosem_setUInt16>
   14ce2:	f108 0801 	add.w	r8, r8, #1
   14ce6:	2800      	cmp	r0, #0
   14ce8:	d1df      	bne.n	14caa <cosem_getSFSKPhyMacSetUp+0x62>
            for (pos = 0; pos != object->macGroupAddresses.size; ++pos)
   14cea:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
   14cec:	fa1f f188 	uxth.w	r1, r8
   14cf0:	428b      	cmp	r3, r1
   14cf2:	d1eb      	bne.n	14ccc <cosem_getSFSKPhyMacSetUp+0x84>
   14cf4:	e7e6      	b.n	14cc4 <cosem_getSFSKPhyMacSetUp+0x7c>
   14cf6:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->macGroupAddresses, pos, (void**)&it)) != 0)
   14cf8:	f106 0724 	add.w	r7, r6, #36	; 0x24
   14cfc:	e7f5      	b.n	14cea <cosem_getSFSKPhyMacSetUp+0xa2>
        ret = cosem_setEnum(data, object->repeater);
   14cfe:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   14d02:	e7b3      	b.n	14c6c <cosem_getSFSKPhyMacSetUp+0x24>
        ret = cosem_setBoolean(data, object->repeaterStatus);
   14d04:	f896 1031 	ldrb.w	r1, [r6, #49]	; 0x31
        ret = cosem_setBoolean(data, object->synchronizationLocked);
   14d08:	4628      	mov	r0, r5
   14d0a:	f7fa fad2 	bl	f2b2 <cosem_setBoolean>
   14d0e:	e7cc      	b.n	14caa <cosem_getSFSKPhyMacSetUp+0x62>
        ret = cosem_setUInt8(data, object->minDeltaCredit);
   14d10:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   14d14:	e7b1      	b.n	14c7a <cosem_getSFSKPhyMacSetUp+0x32>
        ret = cosem_setUInt16(data, object->initiatorMacAddress);
   14d16:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
   14d18:	e7ca      	b.n	14cb0 <cosem_getSFSKPhyMacSetUp+0x68>
        ret = cosem_setBoolean(data, object->synchronizationLocked);
   14d1a:	f896 1036 	ldrb.w	r1, [r6, #54]	; 0x36
   14d1e:	e7f3      	b.n	14d08 <cosem_getSFSKPhyMacSetUp+0xc0>
        ret = cosem_setEnum(data, object->transmissionSpeed);
   14d20:	f896 1037 	ldrb.w	r1, [r6, #55]	; 0x37
   14d24:	e7a2      	b.n	14c6c <cosem_getSFSKPhyMacSetUp+0x24>
    switch (e->index)
   14d26:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   14d2a:	e7cb      	b.n	14cc4 <cosem_getSFSKPhyMacSetUp+0x7c>

00014d2c <cosem_getSFSKReportingSystemList>:
#endif //DLMS_IGNORE_SFSK_PHY_MAC_SETUP
#ifndef DLMS_IGNORE_SFSK_REPORTING_SYSTEM_LIST
int cosem_getSFSKReportingSystemList(
    gxValueEventArg* e)
{
   14d2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    int ret = DLMS_ERROR_CODE_OK;
    gxByteBuffer* data = e->value.byteArr;
    gxSFSKReportingSystemList* object = (gxSFSKReportingSystemList*)e->target;
    if (e->index == 2)
   14d30:	7e03      	ldrb	r3, [r0, #24]
   14d32:	2b02      	cmp	r3, #2
   14d34:	d122      	bne.n	14d7c <cosem_getSFSKReportingSystemList+0x50>
    gxSFSKReportingSystemList* object = (gxSFSKReportingSystemList*)e->target;
   14d36:	6945      	ldr	r5, [r0, #20]
    gxByteBuffer* data = e->value.byteArr;
   14d38:	6886      	ldr	r6, [r0, #8]
    {
        uint16_t pos;
        gxByteBuffer* it;
        if ((ret = cosem_setArray(data, object->reportingSystemList.size)) == 0)
   14d3a:	8ae9      	ldrh	r1, [r5, #22]
   14d3c:	4630      	mov	r0, r6
   14d3e:	f7fa fa9c 	bl	f27a <cosem_setArray>
   14d42:	4604      	mov	r4, r0
   14d44:	b118      	cbz	r0, 14d4e <cosem_getSFSKReportingSystemList+0x22>
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   14d46:	4620      	mov	r0, r4
   14d48:	b002      	add	sp, #8
   14d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d4e:	4680      	mov	r8, r0
                if ((ret = arr_getByIndex(&object->reportingSystemList, pos, (void**)&it)) != 0)
   14d50:	f105 0710 	add.w	r7, r5, #16
            for (pos = 0; pos != object->reportingSystemList.size; ++pos)
   14d54:	8aeb      	ldrh	r3, [r5, #22]
   14d56:	fa1f f188 	uxth.w	r1, r8
   14d5a:	428b      	cmp	r3, r1
   14d5c:	d0f3      	beq.n	14d46 <cosem_getSFSKReportingSystemList+0x1a>
                if ((ret = arr_getByIndex(&object->reportingSystemList, pos, (void**)&it)) != 0)
   14d5e:	aa01      	add	r2, sp, #4
   14d60:	4638      	mov	r0, r7
   14d62:	f7fc ff1a 	bl	11b9a <arr_getByIndex>
   14d66:	b938      	cbnz	r0, 14d78 <cosem_getSFSKReportingSystemList+0x4c>
                if ((ret = cosem_setOctetString(data, it)) != 0)
   14d68:	9901      	ldr	r1, [sp, #4]
   14d6a:	4630      	mov	r0, r6
   14d6c:	f7fa f9ae 	bl	f0cc <cosem_setOctetString>
   14d70:	f108 0801 	add.w	r8, r8, #1
   14d74:	2800      	cmp	r0, #0
   14d76:	d0ed      	beq.n	14d54 <cosem_getSFSKReportingSystemList+0x28>
   14d78:	4604      	mov	r4, r0
   14d7a:	e7e4      	b.n	14d46 <cosem_getSFSKReportingSystemList+0x1a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   14d7c:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   14d80:	e7e1      	b.n	14d46 <cosem_getSFSKReportingSystemList+0x1a>

00014d82 <cosem_getValue>:
{
   14d82:	b538      	push	{r3, r4, r5, lr}
   14d84:	4605      	mov	r5, r0
    if ((ret = cosem_getByteBuffer(e)) != 0)
   14d86:	4608      	mov	r0, r1
{
   14d88:	460c      	mov	r4, r1
    if ((ret = cosem_getByteBuffer(e)) != 0)
   14d8a:	f7fc ff50 	bl	11c2e <cosem_getByteBuffer>
   14d8e:	2800      	cmp	r0, #0
   14d90:	f040 8095 	bne.w	14ebe <cosem_getValue+0x13c>
    if (e->index == 1)
   14d94:	7e23      	ldrb	r3, [r4, #24]
   14d96:	2b01      	cmp	r3, #1
   14d98:	d115      	bne.n	14dc6 <cosem_getValue+0x44>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   14d9a:	68a0      	ldr	r0, [r4, #8]
   14d9c:	2109      	movs	r1, #9
   14d9e:	f7f9 fb36 	bl	e40e <bb_setUInt8>
   14da2:	2800      	cmp	r0, #0
   14da4:	f040 808b 	bne.w	14ebe <cosem_getValue+0x13c>
            (ret = bb_setUInt8(e->value.byteArr, 6)) != 0 ||
   14da8:	68a0      	ldr	r0, [r4, #8]
   14daa:	2106      	movs	r1, #6
   14dac:	f7f9 fb2f 	bl	e40e <bb_setUInt8>
        if ((ret = bb_setUInt8(e->value.byteArr, DLMS_DATA_TYPE_OCTET_STRING)) != 0 ||
   14db0:	2800      	cmp	r0, #0
   14db2:	f040 8084 	bne.w	14ebe <cosem_getValue+0x13c>
            (ret = bb_set(e->value.byteArr, e->target->logicalName, 6)) != 0)
   14db6:	6961      	ldr	r1, [r4, #20]
   14db8:	68a0      	ldr	r0, [r4, #8]
   14dba:	2206      	movs	r2, #6
}
   14dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            (ret = bb_set(e->value.byteArr, e->target->logicalName, 6)) != 0)
   14dc0:	4411      	add	r1, r2
   14dc2:	f7f9 bc0a 	b.w	e5da <bb_set>
    switch (e->target->objectType)
   14dc6:	6963      	ldr	r3, [r4, #20]
   14dc8:	881b      	ldrh	r3, [r3, #0]
   14dca:	3b01      	subs	r3, #1
   14dcc:	2b72      	cmp	r3, #114	; 0x72
   14dce:	d874      	bhi.n	14eba <cosem_getValue+0x138>
   14dd0:	e8df f013 	tbh	[pc, r3, lsl #1]
   14dd4:	00730076 	.word	0x00730076
   14dd8:	00af007b 	.word	0x00af007b
   14ddc:	00fc00a5 	.word	0x00fc00a5
   14de0:	008000f6 	.word	0x008000f6
   14de4:	0116011b 	.word	0x0116011b
   14de8:	00950120 	.word	0x00950120
   14dec:	00730073 	.word	0x00730073
   14df0:	0073008f 	.word	0x0073008f
   14df4:	00d70111 	.word	0x00d70111
   14df8:	008a00c3 	.word	0x008a00c3
   14dfc:	00850102 	.word	0x00850102
   14e00:	00c800be 	.word	0x00c800be
   14e04:	012a00d2 	.word	0x012a00d2
   14e08:	009b00eb 	.word	0x009b00eb
   14e0c:	01ad00a0 	.word	0x01ad00a0
   14e10:	00730073 	.word	0x00730073
   14e14:	00730073 	.word	0x00730073
   14e18:	00730073 	.word	0x00730073
   14e1c:	00730073 	.word	0x00730073
   14e20:	01340073 	.word	0x01340073
   14e24:	00cd0125 	.word	0x00cd0125
   14e28:	00f100aa 	.word	0x00f100aa
   14e2c:	007300b4 	.word	0x007300b4
   14e30:	0073014d 	.word	0x0073014d
   14e34:	01a30073 	.word	0x01a30073
   14e38:	019e0194 	.word	0x019e0194
   14e3c:	00730199 	.word	0x00730199
   14e40:	01a80073 	.word	0x01a80073
   14e44:	018a0185 	.word	0x018a0185
   14e48:	0073018f 	.word	0x0073018f
   14e4c:	01520107 	.word	0x01520107
   14e50:	00b901ad 	.word	0x00b901ad
   14e54:	00730158 	.word	0x00730158
   14e58:	01800073 	.word	0x01800073
   14e5c:	00dc0073 	.word	0x00dc0073
   14e60:	00e600e1 	.word	0x00e600e1
   14e64:	012f0073 	.word	0x012f0073
   14e68:	00730073 	.word	0x00730073
   14e6c:	00730073 	.word	0x00730073
   14e70:	015d0073 	.word	0x015d0073
   14e74:	01670162 	.word	0x01670162
   14e78:	0171016c 	.word	0x0171016c
   14e7c:	017b0176 	.word	0x017b0176
   14e80:	00730073 	.word	0x00730073
   14e84:	00730073 	.word	0x00730073
   14e88:	00730073 	.word	0x00730073
   14e8c:	00730073 	.word	0x00730073
   14e90:	00730073 	.word	0x00730073
   14e94:	00730073 	.word	0x00730073
   14e98:	00730073 	.word	0x00730073
   14e9c:	01ad01ad 	.word	0x01ad01ad
   14ea0:	010c01ad 	.word	0x010c01ad
   14ea4:	00730073 	.word	0x00730073
   14ea8:	00730073 	.word	0x00730073
   14eac:	00730073 	.word	0x00730073
   14eb0:	013e0139 	.word	0x013e0139
   14eb4:	00730143 	.word	0x00730143
   14eb8:	0148      	.short	0x0148
   14eba:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   14ebe:	bd38      	pop	{r3, r4, r5, pc}
        ret = cosem_getData(e);
   14ec0:	4620      	mov	r0, r4
}
   14ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getData(e);
   14ec6:	f7fc beca 	b.w	11c5e <cosem_getData>
        ret = cosem_getRegister(e);
   14eca:	4620      	mov	r0, r4
}
   14ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegister(e);
   14ed0:	f7fc bed5 	b.w	11c7e <cosem_getRegister>
        ret = cosem_getClock(e);
   14ed4:	4620      	mov	r0, r4
}
   14ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getClock(e);
   14eda:	f7fc bf1a 	b.w	11d12 <cosem_getClock>
        ret = cosem_getActionSchedule(e);
   14ede:	4620      	mov	r0, r4
}
   14ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getActionSchedule(e);
   14ee4:	f7fc bf4d 	b.w	11d82 <cosem_getActionSchedule>
        ret = cosem_getActivityCalendar(e);
   14ee8:	4620      	mov	r0, r4
}
   14eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getActivityCalendar(e);
   14eee:	f7fd b829 	b.w	11f44 <cosem_getActivityCalendar>
        ret = cosem_getAssociationLogicalName(settings, e);
   14ef2:	4621      	mov	r1, r4
   14ef4:	4628      	mov	r0, r5
}
   14ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAssociationLogicalName(settings, e);
   14efa:	f7fd b90f 	b.w	1211c <cosem_getAssociationLogicalName>
        ret = cosem_getAssociationShortName(settings, e);
   14efe:	4621      	mov	r1, r4
   14f00:	4628      	mov	r0, r5
}
   14f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAssociationShortName(settings, e);
   14f06:	f7fd bafe 	b.w	12506 <cosem_getAssociationShortName>
        ret = cosem_getAutoAnswer(e);
   14f0a:	4620      	mov	r0, r4
}
   14f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAutoAnswer(e);
   14f10:	f7fd bb39 	b.w	12586 <cosem_getAutoAnswer>
        ret = cosem_getAutoConnect(e);
   14f14:	4620      	mov	r0, r4
}
   14f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAutoConnect(e);
   14f1a:	f7fd bb91 	b.w	12640 <cosem_getAutoConnect>
        ret = cosem_getDemandRegister(e);
   14f1e:	4620      	mov	r0, r4
}
   14f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getDemandRegister(e);
   14f24:	f7fd bbf8 	b.w	12718 <cosem_getDemandRegister>
        ret = cosem_getMacAddressSetup(e);
   14f28:	4620      	mov	r0, r4
}
   14f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMacAddressSetup(e);
   14f2e:	f7fd bc40 	b.w	127b2 <cosem_getMacAddressSetup>
        ret = cosem_getExtendedRegister(e);
   14f32:	4620      	mov	r0, r4
}
   14f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getExtendedRegister(e);
   14f38:	f7fd bc46 	b.w	127c8 <cosem_getExtendedRegister>
        ret = cosem_getGprsSetup(e);
   14f3c:	4620      	mov	r0, r4
}
   14f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getGprsSetup(e);
   14f42:	f7fd bc9e 	b.w	12882 <cosem_getGprsSetup>
        ret = cosem_getSecuritySetup(e);
   14f46:	4620      	mov	r0, r4
}
   14f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSecuritySetup(e);
   14f4c:	f7fd bcc5 	b.w	128da <cosem_getSecuritySetup>
        ret = cosem_getIecHdlcSetup(e);
   14f50:	4620      	mov	r0, r4
}
   14f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecHdlcSetup(e);
   14f56:	f7fd bd42 	b.w	129de <cosem_getIecHdlcSetup>
        ret = cosem_getIecLocalPortSetup(e);
   14f5a:	4620      	mov	r0, r4
}
   14f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecLocalPortSetup(e);
   14f60:	f7fd bd61 	b.w	12a26 <cosem_getIecLocalPortSetup>
        ret = cosem_getIecTwistedPairSetup(e);
   14f64:	4620      	mov	r0, r4
}
   14f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIecTwistedPairSetup(e);
   14f6a:	f7fd bd89 	b.w	12a80 <cosem_getIecTwistedPairSetup>
        ret = cosem_getIP4Setup(e);
   14f6e:	4620      	mov	r0, r4
}
   14f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIP4Setup(e);
   14f74:	f7ee baa8 	b.w	34c8 <cosem_getIP4Setup>
        ret = cosem_getMbusSlavePortSetup(e);
   14f78:	4620      	mov	r0, r4
}
   14f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMbusSlavePortSetup(e);
   14f7e:	f7fd bdd3 	b.w	12b28 <cosem_getMbusSlavePortSetup>
        ret = cosem_getImageTransfer(e);
   14f82:	4620      	mov	r0, r4
}
   14f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getImageTransfer(e);
   14f88:	f7fd bde7 	b.w	12b5a <cosem_getImageTransfer>
        ret = cosem_getDisconnectControl(e);
   14f8c:	4620      	mov	r0, r4
}
   14f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getDisconnectControl(e);
   14f92:	f7fe b9bf 	b.w	13314 <cosem_getDisconnectControl>
        ret = cosem_getLimiter(e);
   14f96:	4620      	mov	r0, r4
}
   14f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getLimiter(e);
   14f9c:	f7ee bb4e 	b.w	363c <cosem_getLimiter>
        ret = cosem_getmMbusClient(e);
   14fa0:	4620      	mov	r0, r4
}
   14fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getmMbusClient(e);
   14fa6:	f7ee bcbb 	b.w	3920 <cosem_getmMbusClient>
        ret = cosem_getModemConfiguration(settings, e);
   14faa:	4621      	mov	r1, r4
   14fac:	4628      	mov	r0, r5
}
   14fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getModemConfiguration(settings, e);
   14fb2:	f7ee bd75 	b.w	3aa0 <cosem_getModemConfiguration>
        ret = cosem_getPppSetup(e);
   14fb6:	4620      	mov	r0, r4
}
   14fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPppSetup(e);
   14fbc:	f7ee bec8 	b.w	3d50 <cosem_getPppSetup>
        ret = cosem_getProfileGeneric(settings, e);
   14fc0:	4621      	mov	r1, r4
   14fc2:	4628      	mov	r0, r5
}
   14fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getProfileGeneric(settings, e);
   14fc8:	f7fe b8f1 	b.w	131ae <cosem_getProfileGeneric>
        ret = cosem_getRegisterActivation(settings, e);
   14fcc:	4621      	mov	r1, r4
   14fce:	4628      	mov	r0, r5
}
   14fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterActivation(settings, e);
   14fd4:	f7fe b9c8 	b.w	13368 <cosem_getRegisterActivation>
        ret = cosem_getRegisterMonitor(e);
   14fd8:	4620      	mov	r0, r4
}
   14fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterMonitor(e);
   14fde:	f7fe baa3 	b.w	13528 <cosem_getRegisterMonitor>
        ret = cosem_getRegisterTable(e);
   14fe2:	4620      	mov	r0, r4
}
   14fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getRegisterTable(e);
   14fe8:	f7fc be76 	b.w	11cd8 <cosem_getRegisterTable>
        ret = cosem_getZigbeeNetworkControl(e);
   14fec:	4620      	mov	r0, r4
}
   14fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getZigbeeNetworkControl(e);
   14ff2:	f7fe be13 	b.w	13c1c <cosem_getZigbeeNetworkControl>
        ret = cosem_getSapAssignment(e);
   14ff6:	4620      	mov	r0, r4
}
   14ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSapAssignment(e);
   14ffc:	f7fe bb9b 	b.w	13736 <cosem_getSapAssignment>
        ret = cosem_getSchedule(e);
   15000:	4620      	mov	r0, r4
}
   15002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSchedule(e);
   15006:	f7fe bbed 	b.w	137e4 <cosem_getSchedule>
        ret = cosem_getScriptTable(e);
   1500a:	4620      	mov	r0, r4
}
   1500c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getScriptTable(e);
   15010:	f7fe bc72 	b.w	138f8 <cosem_getScriptTable>
        ret = cosem_getSpecialDaysTable(e);
   15014:	4620      	mov	r0, r4
}
   15016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSpecialDaysTable(e);
   1501a:	f7fe bcd7 	b.w	139cc <cosem_getSpecialDaysTable>
        ret = cosem_getTcpUdpSetup(e);
   1501e:	4620      	mov	r0, r4
}
   15020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getTcpUdpSetup(e);
   15024:	f7fe bd0c 	b.w	13a40 <cosem_getTcpUdpSetup>
        ret = cosem_getUtilityTables(e);
   15028:	4620      	mov	r0, r4
}
   1502a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getUtilityTables(e);
   1502e:	f7fe bd32 	b.w	13a96 <cosem_getUtilityTables>
        ret = cosem_getMbusMasterPortSetup(e);
   15032:	4620      	mov	r0, r4
}
   15034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getMbusMasterPortSetup(e);
   15038:	f7fe bd42 	b.w	13ac0 <cosem_getMbusMasterPortSetup>
        ret = cosem_getPushSetup(e);
   1503c:	4620      	mov	r0, r4
}
   1503e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPushSetup(e);
   15042:	f7fe bd48 	b.w	13ad6 <cosem_getPushSetup>
        ret = cosem_getAccount(e);
   15046:	4620      	mov	r0, r4
}
   15048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getAccount(e);
   1504c:	f7fe bfe3 	b.w	14016 <cosem_getAccount>
        ret = cosem_getCredit(e);
   15050:	4620      	mov	r0, r4
}
   15052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCredit(e);
   15056:	f7fe bfa4 	b.w	13fa2 <cosem_getCredit>
        ret = cosem_getCharge(e);
   1505a:	4620      	mov	r0, r4
}
   1505c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCharge(e);
   15060:	f7fe bee4 	b.w	13e2c <cosem_getCharge>
        ret = cosem_getTokenGateway(e);
   15064:	4620      	mov	r0, r4
}
   15066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getTokenGateway(e);
   1506a:	f7fe bf2e 	b.w	13eca <cosem_getTokenGateway>
        ret = cosem_getGsmDiagnostic(e);
   1506e:	4620      	mov	r0, r4
}
   15070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getGsmDiagnostic(e);
   15074:	f7ff b92f 	b.w	142d6 <cosem_getGsmDiagnostic>
        ret = cosem_getCompactData(settings, e);
   15078:	4621      	mov	r1, r4
   1507a:	4628      	mov	r0, r5
}
   1507c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getCompactData(settings, e);
   15080:	f7ff b901 	b.w	14286 <cosem_getCompactData>
        ret = cosem_getParameterMonitor(e);
   15084:	4620      	mov	r0, r4
}
   15086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getParameterMonitor(e);
   1508a:	f7ee bf71 	b.w	3f70 <cosem_getParameterMonitor>
        ret = cosem_getLlcSscsSetup(e);
   1508e:	4620      	mov	r0, r4
}
   15090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getLlcSscsSetup(e);
   15094:	f7ff b9c4 	b.w	14420 <cosem_getLlcSscsSetup>
        ret = cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(e);
   15098:	4620      	mov	r0, r4
}
   1509a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcPhysicalLayerCounters(e);
   1509e:	f7ff b9ce 	b.w	1443e <cosem_getPrimeNbOfdmPlcPhysicalLayerCounters>
        ret = cosem_getPrimeNbOfdmPlcMacSetup(e);
   150a2:	4620      	mov	r0, r4
}
   150a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacSetup(e);
   150a8:	f7ff b9df 	b.w	1446a <cosem_getPrimeNbOfdmPlcMacSetup>
        ret = cosem_getPrimeNbOfdmPlcMacFunctionalParameters(e);
   150ac:	4620      	mov	r0, r4
}
   150ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacFunctionalParameters(e);
   150b2:	f7ff b9f8 	b.w	144a6 <cosem_getPrimeNbOfdmPlcMacFunctionalParameters>
        ret = cosem_getPrimeNbOfdmPlcMacCounters(e);
   150b6:	4620      	mov	r0, r4
}
   150b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacCounters(e);
   150bc:	f7ff ba31 	b.w	14522 <cosem_getPrimeNbOfdmPlcMacCounters>
        ret = cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(e);
   150c0:	4620      	mov	r0, r4
}
   150c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData(e);
   150c6:	f7ff bb96 	b.w	147f6 <cosem_getPrimeNbOfdmPlcMacNetworkAdministrationData>
        ret = cosem_getPrimeNbOfdmPlcApplicationsIdentification(e);
   150ca:	4620      	mov	r0, r4
}
   150cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getPrimeNbOfdmPlcApplicationsIdentification(e);
   150d0:	f7ff bba7 	b.w	14822 <cosem_getPrimeNbOfdmPlcApplicationsIdentification>
        ret = cosem_getArbitrator(e);
   150d4:	4620      	mov	r0, r4
}
   150d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getArbitrator(e);
   150da:	f7ff bbb8 	b.w	1484e <cosem_getArbitrator>
        ret = cosem_getIec8802LlcType1Setup(e);
   150de:	4620      	mov	r0, r4
}
   150e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType1Setup(e);
   150e4:	f7ff bc9a 	b.w	14a1c <cosem_getIec8802LlcType1Setup>
        ret = cosem_getIec8802LlcType2Setup(e);
   150e8:	4620      	mov	r0, r4
}
   150ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType2Setup(e);
   150ee:	f7ff bca0 	b.w	14a32 <cosem_getIec8802LlcType2Setup>
        ret = cosem_getIec8802LlcType3Setup(e);
   150f2:	4620      	mov	r0, r4
}
   150f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getIec8802LlcType3Setup(e);
   150f8:	f7ff bcbd 	b.w	14a76 <cosem_getIec8802LlcType3Setup>
        ret = cosem_getSFSKActiveInitiator(e);
   150fc:	4620      	mov	r0, r4
}
   150fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKActiveInitiator(e);
   15102:	f7ff bcd3 	b.w	14aac <cosem_getSFSKActiveInitiator>
        ret = cosem_getFSKMacCounters(e);
   15106:	4620      	mov	r0, r4
}
   15108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getFSKMacCounters(e);
   1510c:	f7ff bced 	b.w	14aea <cosem_getFSKMacCounters>
        ret = cosem_getSFSKMacSynchronizationTimeouts(e);
   15110:	4620      	mov	r0, r4
}
   15112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKMacSynchronizationTimeouts(e);
   15116:	f7ff bd80 	b.w	14c1a <cosem_getSFSKMacSynchronizationTimeouts>
        ret = cosem_getSFSKPhyMacSetUp(e);
   1511a:	4620      	mov	r0, r4
}
   1511c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKPhyMacSetUp(e);
   15120:	f7ff bd92 	b.w	14c48 <cosem_getSFSKPhyMacSetUp>
        ret = cosem_getSFSKReportingSystemList(e);
   15124:	4620      	mov	r0, r4
}
   15126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = cosem_getSFSKReportingSystemList(e);
   1512a:	f7ff bdff 	b.w	14d2c <cosem_getSFSKReportingSystemList>
        ret = DLMS_ERROR_CODE_NOT_IMPLEMENTED;
   1512e:	20fe      	movs	r0, #254	; 0xfe
   15130:	e6c5      	b.n	14ebe <cosem_getValue+0x13c>

00015132 <key_init>:

#include "../include/gxmem.h"
#include "../include/gxkey.h"
#ifndef DLMS_IGNORE_MALLOC
gxKey* key_init(void* key, void* value)
{
   15132:	b538      	push	{r3, r4, r5, lr}
   15134:	4605      	mov	r5, r0
    gxKey* obj = (gxKey*) gxmalloc(sizeof(gxKey));
   15136:	2008      	movs	r0, #8
{
   15138:	460c      	mov	r4, r1
    gxKey* obj = (gxKey*) gxmalloc(sizeof(gxKey));
   1513a:	f7f8 f8db 	bl	d2f4 <malloc>
    obj->key = key;
    obj->value = value;
   1513e:	e9c0 5400 	strd	r5, r4, [r0]
    return obj;
}
   15142:	bd38      	pop	{r3, r4, r5, pc}

00015144 <obj_clearProfileGenericBuffer>:
    return obj;
}
#endif //DLMS_IGNORE_MALLOC

int obj_clearProfileGenericBuffer(gxArray* buffer)
{
   15144:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15146:	4604      	mov	r4, r0
    //Clear data rows.
#ifndef DLMS_IGNORE_MALLOC
    variantArray* va;
    int pos, ret;
    for (pos = 0; pos != buffer->size; ++pos)
   15148:	2500      	movs	r5, #0
   1514a:	88e3      	ldrh	r3, [r4, #6]
   1514c:	42ab      	cmp	r3, r5
   1514e:	d105      	bne.n	1515c <obj_clearProfileGenericBuffer+0x18>
            return ret;
        }
        va_clear(va);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(buffer);
   15150:	4620      	mov	r0, r4
   15152:	f7fc fcfa 	bl	11b4a <arr_clear>
    return 0;
   15156:	2000      	movs	r0, #0
}
   15158:	b003      	add	sp, #12
   1515a:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&va);
   1515c:	aa01      	add	r2, sp, #4
   1515e:	b2a9      	uxth	r1, r5
   15160:	4620      	mov	r0, r4
   15162:	f7fc fd1a 	bl	11b9a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15166:	2800      	cmp	r0, #0
   15168:	d1f6      	bne.n	15158 <obj_clearProfileGenericBuffer+0x14>
        va_clear(va);
   1516a:	9801      	ldr	r0, [sp, #4]
   1516c:	f006 fede 	bl	1bf2c <va_clear>
    for (pos = 0; pos != buffer->size; ++pos)
   15170:	3501      	adds	r5, #1
   15172:	e7ea      	b.n	1514a <obj_clearProfileGenericBuffer+0x6>

00015174 <obj_clearPushObjectList>:
#endif //DLMS_IGNORE_PROFILE_GENERIC

#if !(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_IGNORE_COMPACT_DATA) && defined(DLMS_IGNORE_PUSH_SETUP))
int obj_clearPushObjectList(gxArray* buffer)
{
   15174:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15176:	4605      	mov	r5, r0
    int ret = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    int pos;
    gxKey* kv;
    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != buffer->size; ++pos)
   15178:	2600      	movs	r6, #0
   1517a:	88eb      	ldrh	r3, [r5, #6]
   1517c:	42b3      	cmp	r3, r6
   1517e:	d106      	bne.n	1518e <obj_clearPushObjectList+0x1a>
   15180:	2400      	movs	r4, #0
            break;
        }
        gxfree(kv->value);
    }
#endif // !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    arr_clear(buffer);
   15182:	4628      	mov	r0, r5
   15184:	f7fc fce1 	bl	11b4a <arr_clear>
    return ret;
}
   15188:	4620      	mov	r0, r4
   1518a:	b002      	add	sp, #8
   1518c:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&kv);
   1518e:	aa01      	add	r2, sp, #4
   15190:	b2b1      	uxth	r1, r6
   15192:	4628      	mov	r0, r5
   15194:	f7fc fd01 	bl	11b9a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15198:	4604      	mov	r4, r0
   1519a:	2800      	cmp	r0, #0
   1519c:	d1f1      	bne.n	15182 <obj_clearPushObjectList+0xe>
        gxfree(kv->value);
   1519e:	9b01      	ldr	r3, [sp, #4]
   151a0:	6858      	ldr	r0, [r3, #4]
   151a2:	f7f8 f8af 	bl	d304 <free>
    for (pos = 0; pos != buffer->size; ++pos)
   151a6:	3601      	adds	r6, #1
   151a8:	e7e7      	b.n	1517a <obj_clearPushObjectList+0x6>

000151aa <obj_clearCreditChargeConfigurations>:
#endif //!(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_OBJECT_TYPE_PUSH_SETUP) && defined(DLMS_IGNORE_PUSH_SETUP))

#ifndef DLMS_IGNORE_ACCOUNT

int obj_clearCreditChargeConfigurations(gxArray* list)
{
   151aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   151ac:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    gxCreditChargeConfiguration* it;
    int pos;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   151ae:	2600      	movs	r6, #0
        {
            break;
        }
        memset(it->creditReference, 0, sizeof(it->creditReference));
        memset(it->chargeReference, 0, sizeof(it->creditReference));
        it->collectionConfiguration = DLMS_CREDIT_COLLECTION_CONFIGURATION_DISCONNECTED;
   151b0:	2701      	movs	r7, #1
    for (pos = 0; pos != list->size; ++pos)
   151b2:	88eb      	ldrh	r3, [r5, #6]
   151b4:	42b3      	cmp	r3, r6
   151b6:	d106      	bne.n	151c6 <obj_clearCreditChargeConfigurations+0x1c>
   151b8:	2400      	movs	r4, #0
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   151ba:	4628      	mov	r0, r5
   151bc:	f7fc fcc5 	bl	11b4a <arr_clear>
    return ret;
}
   151c0:	4620      	mov	r0, r4
   151c2:	b003      	add	sp, #12
   151c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   151c6:	aa01      	add	r2, sp, #4
   151c8:	b2b1      	uxth	r1, r6
   151ca:	4628      	mov	r0, r5
   151cc:	f7fc fce5 	bl	11b9a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   151d0:	4604      	mov	r4, r0
   151d2:	2800      	cmp	r0, #0
   151d4:	d1f1      	bne.n	151ba <obj_clearCreditChargeConfigurations+0x10>
   151d6:	9b01      	ldr	r3, [sp, #4]
   151d8:	6018      	str	r0, [r3, #0]
   151da:	8098      	strh	r0, [r3, #4]
        memset(it->chargeReference, 0, sizeof(it->creditReference));
   151dc:	9b01      	ldr	r3, [sp, #4]
    for (pos = 0; pos != list->size; ++pos)
   151de:	3601      	adds	r6, #1
   151e0:	f8c3 0006 	str.w	r0, [r3, #6]
   151e4:	8158      	strh	r0, [r3, #10]
        it->collectionConfiguration = DLMS_CREDIT_COLLECTION_CONFIGURATION_DISCONNECTED;
   151e6:	731f      	strb	r7, [r3, #12]
    for (pos = 0; pos != list->size; ++pos)
   151e8:	e7e3      	b.n	151b2 <obj_clearCreditChargeConfigurations+0x8>

000151ea <obj_clearTokenGatewayConfigurations>:

int obj_clearTokenGatewayConfigurations(gxArray* list)
{
   151ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   151ec:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    gxTokenGatewayConfiguration* it;
    int pos;
    //Clear push objects.
    for (pos = 0; pos != list->size; ++pos)
   151ee:	2600      	movs	r6, #0
   151f0:	88eb      	ldrh	r3, [r5, #6]
   151f2:	42b3      	cmp	r3, r6
   151f4:	d106      	bne.n	15204 <obj_clearTokenGatewayConfigurations+0x1a>
   151f6:	2400      	movs	r4, #0
            break;
        }
        memset(it->creditReference, 0, 6);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   151f8:	4628      	mov	r0, r5
   151fa:	f7fc fca6 	bl	11b4a <arr_clear>
    return ret;
}
   151fe:	4620      	mov	r0, r4
   15200:	b002      	add	sp, #8
   15202:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   15204:	aa01      	add	r2, sp, #4
   15206:	b2b1      	uxth	r1, r6
   15208:	4628      	mov	r0, r5
   1520a:	f7fc fcc6 	bl	11b9a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1520e:	4604      	mov	r4, r0
   15210:	2800      	cmp	r0, #0
   15212:	d1f1      	bne.n	151f8 <obj_clearTokenGatewayConfigurations+0xe>
   15214:	9b01      	ldr	r3, [sp, #4]
    for (pos = 0; pos != list->size; ++pos)
   15216:	3601      	adds	r6, #1
   15218:	6018      	str	r0, [r3, #0]
   1521a:	8098      	strh	r0, [r3, #4]
   1521c:	e7e8      	b.n	151f0 <obj_clearTokenGatewayConfigurations+0x6>

0001521e <obj_clearSapList>:
#endif //DLMS_IGNORE_ACCOUNT
#ifndef DLMS_IGNORE_SAP_ASSIGNMENT
int obj_clearSapList(gxArray* buffer)
{
   1521e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15220:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxSapItem* it;
    //Objects are not cleared because client owns them and clears them later.
    for (pos = 0; pos != buffer->size; ++pos)
   15222:	2600      	movs	r6, #0
   15224:	88eb      	ldrh	r3, [r5, #6]
   15226:	42b3      	cmp	r3, r6
   15228:	d106      	bne.n	15238 <obj_clearSapList+0x1a>
   1522a:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&it->name);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(buffer);
   1522c:	4628      	mov	r0, r5
   1522e:	f7fc fc8c 	bl	11b4a <arr_clear>
    return ret;
}
   15232:	4620      	mov	r0, r4
   15234:	b002      	add	sp, #8
   15236:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(buffer, pos, (void**)&it);
   15238:	aa01      	add	r2, sp, #4
   1523a:	b2b1      	uxth	r1, r6
   1523c:	4628      	mov	r0, r5
   1523e:	f7fc fcac 	bl	11b9a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   15242:	4604      	mov	r4, r0
   15244:	2800      	cmp	r0, #0
   15246:	d1f1      	bne.n	1522c <obj_clearSapList+0xe>
        bb_clear(&it->name);
   15248:	9801      	ldr	r0, [sp, #4]
   1524a:	3004      	adds	r0, #4
   1524c:	f7f9 fa39 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != buffer->size; ++pos)
   15250:	3601      	adds	r6, #1
   15252:	e7e7      	b.n	15224 <obj_clearSapList+0x6>

00015254 <obj_clearProfileGenericCaptureObjects>:
   15254:	f7ff bf8e 	b.w	15174 <obj_clearPushObjectList>

00015258 <obj_clearSeasonProfile>:
}
#endif //!(defined(DLMS_IGNORE_PROFILE_GENERIC) && defined(DLMS_IGNORE_COMPACT_DATA))

#ifndef DLMS_IGNORE_ACTIVITY_CALENDAR
int obj_clearSeasonProfile(gxArray* list)
{
   15258:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1525a:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxSeasonProfile* sp;
    for (pos = 0; pos != list->size; ++pos)
   1525c:	2600      	movs	r6, #0
   1525e:	88eb      	ldrh	r3, [r5, #6]
   15260:	42b3      	cmp	r3, r6
   15262:	d106      	bne.n	15272 <obj_clearSeasonProfile+0x1a>
   15264:	2400      	movs	r4, #0
        }
        bb_clear(&sp->name);
        bb_clear(&sp->weekName);
    };
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   15266:	4628      	mov	r0, r5
   15268:	f7fc fc6f 	bl	11b4a <arr_clear>
    return ret;
}
   1526c:	4620      	mov	r0, r4
   1526e:	b002      	add	sp, #8
   15270:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&sp);
   15272:	aa01      	add	r2, sp, #4
   15274:	b2b1      	uxth	r1, r6
   15276:	4628      	mov	r0, r5
   15278:	f7fc fc8f 	bl	11b9a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1527c:	4604      	mov	r4, r0
   1527e:	2800      	cmp	r0, #0
   15280:	d1f1      	bne.n	15266 <obj_clearSeasonProfile+0xe>
        bb_clear(&sp->name);
   15282:	9801      	ldr	r0, [sp, #4]
   15284:	f7f9 fa1d 	bl	e6c2 <bb_clear>
        bb_clear(&sp->weekName);
   15288:	9801      	ldr	r0, [sp, #4]
   1528a:	3018      	adds	r0, #24
   1528c:	f7f9 fa19 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   15290:	3601      	adds	r6, #1
   15292:	e7e4      	b.n	1525e <obj_clearSeasonProfile+0x6>

00015294 <obj_clearWeekProfileTable>:

int obj_clearWeekProfileTable(gxArray* list)
{
   15294:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15296:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxWeekProfile* wp;
    for (pos = 0; pos != list->size; ++pos)
   15298:	2600      	movs	r6, #0
   1529a:	88eb      	ldrh	r3, [r5, #6]
   1529c:	42b3      	cmp	r3, r6
   1529e:	d106      	bne.n	152ae <obj_clearWeekProfileTable+0x1a>
   152a0:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&wp->name);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   152a2:	4628      	mov	r0, r5
   152a4:	f7fc fc51 	bl	11b4a <arr_clear>
    return ret;
}
   152a8:	4620      	mov	r0, r4
   152aa:	b002      	add	sp, #8
   152ac:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&wp);
   152ae:	aa01      	add	r2, sp, #4
   152b0:	b2b1      	uxth	r1, r6
   152b2:	4628      	mov	r0, r5
   152b4:	f7fc fc71 	bl	11b9a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   152b8:	4604      	mov	r4, r0
   152ba:	2800      	cmp	r0, #0
   152bc:	d1f1      	bne.n	152a2 <obj_clearWeekProfileTable+0xe>
        bb_clear(&wp->name);
   152be:	9801      	ldr	r0, [sp, #4]
   152c0:	f7f9 f9ff 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   152c4:	3601      	adds	r6, #1
   152c6:	e7e8      	b.n	1529a <obj_clearWeekProfileTable+0x6>

000152c8 <obj_clearDayProfileTable>:

int obj_clearDayProfileTable(gxArray* list)
{
   152c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos, pos2;
    gxDayProfile* it;
    gxDayProfileAction* dp;
    for (pos = 0; pos != list->size; ++pos)
   152ca:	2600      	movs	r6, #0
{
   152cc:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
   152ce:	4634      	mov	r4, r6
    for (pos = 0; pos != list->size; ++pos)
   152d0:	88eb      	ldrh	r3, [r5, #6]
   152d2:	42b3      	cmp	r3, r6
   152d4:	d105      	bne.n	152e2 <obj_clearDayProfileTable+0x1a>
            }
        }
        arr_clear(&it->daySchedules);
    };
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   152d6:	4628      	mov	r0, r5
   152d8:	f7fc fc37 	bl	11b4a <arr_clear>
    return ret;
}
   152dc:	4620      	mov	r0, r4
   152de:	b003      	add	sp, #12
   152e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != DLMS_ERROR_CODE_OK)
   152e2:	466a      	mov	r2, sp
   152e4:	b2b1      	uxth	r1, r6
   152e6:	4628      	mov	r0, r5
   152e8:	f7fc fc57 	bl	11b9a <arr_getByIndex>
   152ec:	4604      	mov	r4, r0
   152ee:	2800      	cmp	r0, #0
   152f0:	d1f1      	bne.n	152d6 <obj_clearDayProfileTable+0xe>
        for (pos2 = 0; pos2 != it->daySchedules.size; ++pos2)
   152f2:	4607      	mov	r7, r0
   152f4:	9b00      	ldr	r3, [sp, #0]
   152f6:	1d18      	adds	r0, r3, #4
   152f8:	895b      	ldrh	r3, [r3, #10]
   152fa:	42bb      	cmp	r3, r7
   152fc:	d106      	bne.n	1530c <obj_clearDayProfileTable+0x44>
   152fe:	2400      	movs	r4, #0
        arr_clear(&it->daySchedules);
   15300:	9800      	ldr	r0, [sp, #0]
   15302:	3004      	adds	r0, #4
   15304:	f7fc fc21 	bl	11b4a <arr_clear>
    for (pos = 0; pos != list->size; ++pos)
   15308:	3601      	adds	r6, #1
   1530a:	e7e1      	b.n	152d0 <obj_clearDayProfileTable+0x8>
            if ((ret = arr_getByIndex(&it->daySchedules, pos2, (void**)&dp)) != DLMS_ERROR_CODE_OK)
   1530c:	aa01      	add	r2, sp, #4
   1530e:	b2b9      	uxth	r1, r7
   15310:	f7fc fc43 	bl	11b9a <arr_getByIndex>
   15314:	4604      	mov	r4, r0
   15316:	2800      	cmp	r0, #0
   15318:	d1f2      	bne.n	15300 <obj_clearDayProfileTable+0x38>
        for (pos2 = 0; pos2 != it->daySchedules.size; ++pos2)
   1531a:	3701      	adds	r7, #1
   1531c:	e7ea      	b.n	152f4 <obj_clearDayProfileTable+0x2c>

0001531e <obj_clearRegisterMonitorActions>:
#endif //DLMS_IGNORE_ACTIVITY_CALENDAR
#ifndef DLMS_IGNORE_REGISTER_MONITOR
int obj_clearRegisterMonitorActions(gxArray* list)
{
   1531e:	b508      	push	{r3, lr}
    arr_clear(list);
   15320:	f7fc fc13 	bl	11b4a <arr_clear>
    return 0;
}
   15324:	2000      	movs	r0, #0
   15326:	bd08      	pop	{r3, pc}

00015328 <obj_clearModemConfigurationInitialisationStrings>:
#endif //DLMS_IGNORE_REGISTER_MONITOR
#ifndef DLMS_IGNORE_MODEM_CONFIGURATION
int obj_clearModemConfigurationInitialisationStrings(gxArray* list)
{
   15328:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1532a:	4604      	mov	r4, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxModemInitialisation* it;
    for (pos = 0; pos != list->size; ++pos)
   1532c:	2500      	movs	r5, #0
   1532e:	88e3      	ldrh	r3, [r4, #6]
   15330:	42ab      	cmp	r3, r5
   15332:	d105      	bne.n	15340 <obj_clearModemConfigurationInitialisationStrings+0x18>
        }
        bb_clear(&it->request);
        bb_clear(&it->response);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   15334:	4620      	mov	r0, r4
   15336:	f7fc fc08 	bl	11b4a <arr_clear>
    return ret;
   1533a:	2000      	movs	r0, #0
}
   1533c:	b003      	add	sp, #12
   1533e:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   15340:	aa01      	add	r2, sp, #4
   15342:	b2a9      	uxth	r1, r5
   15344:	4620      	mov	r0, r4
   15346:	f7fc fc28 	bl	11b9a <arr_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1534a:	2800      	cmp	r0, #0
   1534c:	d1f6      	bne.n	1533c <obj_clearModemConfigurationInitialisationStrings+0x14>
        bb_clear(&it->request);
   1534e:	9801      	ldr	r0, [sp, #4]
   15350:	f7f9 f9b7 	bl	e6c2 <bb_clear>
        bb_clear(&it->response);
   15354:	9801      	ldr	r0, [sp, #4]
   15356:	300c      	adds	r0, #12
   15358:	f7f9 f9b3 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   1535c:	3501      	adds	r5, #1
   1535e:	e7e6      	b.n	1532e <obj_clearModemConfigurationInitialisationStrings+0x6>

00015360 <obj_clearScheduleEntries>:
#endif //DLMS_IGNORE_MODEM_CONFIGURATION

#ifndef DLMS_IGNORE_SCHEDULE
int obj_clearScheduleEntries(gxArray* list)
{
   15360:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15362:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxScheduleEntry* it;
    for (pos = 0; pos != list->size; ++pos)
   15364:	2600      	movs	r6, #0
   15366:	88eb      	ldrh	r3, [r5, #6]
   15368:	42b3      	cmp	r3, r6
   1536a:	d106      	bne.n	1537a <obj_clearScheduleEntries+0x1a>
   1536c:	2400      	movs	r4, #0
            break;
        }
        ba_clear(&it->execSpecDays);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   1536e:	4628      	mov	r0, r5
   15370:	f7fc fbeb 	bl	11b4a <arr_clear>
    return ret;
}
   15374:	4620      	mov	r0, r4
   15376:	b002      	add	sp, #8
   15378:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != 0)
   1537a:	aa01      	add	r2, sp, #4
   1537c:	b2b1      	uxth	r1, r6
   1537e:	4628      	mov	r0, r5
   15380:	f7fc fc0b 	bl	11b9a <arr_getByIndex>
   15384:	4604      	mov	r4, r0
   15386:	2800      	cmp	r0, #0
   15388:	d1f1      	bne.n	1536e <obj_clearScheduleEntries+0xe>
        ba_clear(&it->execSpecDays);
   1538a:	9801      	ldr	r0, [sp, #4]
   1538c:	301c      	adds	r0, #28
   1538e:	f7f8 ff3e 	bl	e20e <ba_clear>
    for (pos = 0; pos != list->size; ++pos)
   15392:	3601      	adds	r6, #1
   15394:	e7e7      	b.n	15366 <obj_clearScheduleEntries+0x6>

00015396 <obj_clearByteBufferList>:
#endif //DLMS_IGNORE_SCHEDULE

int obj_clearByteBufferList(gxArray* list)
{
   15396:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15398:	4604      	mov	r4, r0
    list->size = 0;
    return 0;
#else
    int pos, ret = 0;
    gxByteBuffer* it;
    for (pos = 0; pos != list->size; ++pos)
   1539a:	2500      	movs	r5, #0
   1539c:	88e3      	ldrh	r3, [r4, #6]
   1539e:	42ab      	cmp	r3, r5
   153a0:	d105      	bne.n	153ae <obj_clearByteBufferList+0x18>
        {
            return ret;
        }
        bb_clear(it);
    }
    arr_clear(list);
   153a2:	4620      	mov	r0, r4
   153a4:	f7fc fbd1 	bl	11b4a <arr_clear>
    return ret;
   153a8:	2000      	movs	r0, #0
#endif //DLMS_IGNORE_MALLOC
}
   153aa:	b003      	add	sp, #12
   153ac:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   153ae:	aa01      	add	r2, sp, #4
   153b0:	b2a9      	uxth	r1, r5
   153b2:	4620      	mov	r0, r4
   153b4:	f7fc fbf1 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   153b8:	2800      	cmp	r0, #0
   153ba:	d1f6      	bne.n	153aa <obj_clearByteBufferList+0x14>
        bb_clear(it);
   153bc:	9801      	ldr	r0, [sp, #4]
   153be:	f7f9 f980 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   153c2:	3501      	adds	r5, #1
   153c4:	e7ea      	b.n	1539c <obj_clearByteBufferList+0x6>

000153c6 <obj_clearScriptTable>:

#ifndef DLMS_IGNORE_SCRIPT_TABLE
int obj_clearScriptTable(gxArray* list)
{
   153c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos, pos2;
    gxScript* s;
    gxScriptAction* sa;
    for (pos = 0; pos != list->size; ++pos)
   153c8:	2600      	movs	r6, #0
{
   153ca:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
   153cc:	4634      	mov	r4, r6
    for (pos = 0; pos != list->size; ++pos)
   153ce:	88eb      	ldrh	r3, [r5, #6]
   153d0:	42b3      	cmp	r3, r6
   153d2:	d105      	bne.n	153e0 <obj_clearScriptTable+0x1a>
            var_clear(&sa->parameter);
        }
        arr_clear(&s->actions);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   153d4:	4628      	mov	r0, r5
   153d6:	f7fc fbb8 	bl	11b4a <arr_clear>
    return ret;
}
   153da:	4620      	mov	r0, r4
   153dc:	b003      	add	sp, #12
   153de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = arr_getByIndex(list, pos, (void**)&s);
   153e0:	466a      	mov	r2, sp
   153e2:	b2b1      	uxth	r1, r6
   153e4:	4628      	mov	r0, r5
   153e6:	f7fc fbd8 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   153ea:	4604      	mov	r4, r0
   153ec:	2800      	cmp	r0, #0
   153ee:	d1f1      	bne.n	153d4 <obj_clearScriptTable+0xe>
        for (pos2 = 0; pos2 != s->actions.size; ++pos2)
   153f0:	4607      	mov	r7, r0
   153f2:	9b00      	ldr	r3, [sp, #0]
   153f4:	1d18      	adds	r0, r3, #4
   153f6:	895b      	ldrh	r3, [r3, #10]
   153f8:	42bb      	cmp	r3, r7
   153fa:	d106      	bne.n	1540a <obj_clearScriptTable+0x44>
   153fc:	2400      	movs	r4, #0
        arr_clear(&s->actions);
   153fe:	9800      	ldr	r0, [sp, #0]
   15400:	3004      	adds	r0, #4
   15402:	f7fc fba2 	bl	11b4a <arr_clear>
    for (pos = 0; pos != list->size; ++pos)
   15406:	3601      	adds	r6, #1
   15408:	e7e1      	b.n	153ce <obj_clearScriptTable+0x8>
            ret = arr_getByIndex(&s->actions, pos2, (void**)&sa);
   1540a:	aa01      	add	r2, sp, #4
   1540c:	b2b9      	uxth	r1, r7
   1540e:	f7fc fbc4 	bl	11b9a <arr_getByIndex>
            if (ret != 0)
   15412:	4604      	mov	r4, r0
   15414:	2800      	cmp	r0, #0
   15416:	d1f2      	bne.n	153fe <obj_clearScriptTable+0x38>
            var_clear(&sa->parameter);
   15418:	9801      	ldr	r0, [sp, #4]
   1541a:	3008      	adds	r0, #8
   1541c:	f006 fdab 	bl	1bf76 <var_clear>
        for (pos2 = 0; pos2 != s->actions.size; ++pos2)
   15420:	3701      	adds	r7, #1
   15422:	e7e6      	b.n	153f2 <obj_clearScriptTable+0x2c>

00015424 <obj_clearChargeTables>:
#endif //DLMS_IGNORE_SCRIPT_TABLE

#ifndef DLMS_IGNORE_CHARGE
int obj_clearChargeTables(gxArray* list)
{
   15424:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15426:	4605      	mov	r5, r0
    int ret = DLMS_ERROR_CODE_OK;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxChargeTable* it;
    for (pos = 0; pos != list->size; ++pos)
   15428:	2600      	movs	r6, #0
   1542a:	88eb      	ldrh	r3, [r5, #6]
   1542c:	42b3      	cmp	r3, r6
   1542e:	d106      	bne.n	1543e <obj_clearChargeTables+0x1a>
   15430:	2400      	movs	r4, #0
            break;
        }
        bb_clear(&it->index);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   15432:	4628      	mov	r0, r5
   15434:	f7fc fb89 	bl	11b4a <arr_clear>
    return ret;
}
   15438:	4620      	mov	r0, r4
   1543a:	b002      	add	sp, #8
   1543c:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(list, pos, (void**)&it)) != 0)
   1543e:	aa01      	add	r2, sp, #4
   15440:	b2b1      	uxth	r1, r6
   15442:	4628      	mov	r0, r5
   15444:	f7fc fba9 	bl	11b9a <arr_getByIndex>
   15448:	4604      	mov	r4, r0
   1544a:	2800      	cmp	r0, #0
   1544c:	d1f1      	bne.n	15432 <obj_clearChargeTables+0xe>
        bb_clear(&it->index);
   1544e:	9801      	ldr	r0, [sp, #4]
   15450:	f7f9 f937 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   15454:	3601      	adds	r6, #1
   15456:	e7e8      	b.n	1542a <obj_clearChargeTables+0x6>

00015458 <obj_clearRegisterActivationAssignment>:
#endif //DLMS_IGNORE_CHARGE

#ifndef DLMS_IGNORE_REGISTER_ACTIVATION
#if !(defined(DLMS_IGNORE_OBJECT_POINTERS) || defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES))
int obj_clearRegisterActivationAssignment(objectArray* list)
{
   15458:	b508      	push	{r3, lr}
    oa_empty(list);
   1545a:	f006 fb8f 	bl	1bb7c <oa_empty>
    return 0;
}
   1545e:	2000      	movs	r0, #0
   15460:	bd08      	pop	{r3, pc}

00015462 <obj_clearRegisterActivationMaskList>:
    return 0;
}
#endif //!(defined(DLMS_IGNORE_OBJECT_POINTERS) || defined(DLMS_IGNORE_MALLOC))

int obj_clearRegisterActivationMaskList(gxArray* list)
{
   15462:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15464:	4605      	mov	r5, r0
    arr_clear(list);
    return ret;
#else
    int ret = 0, pos;
    gxKey* it;
    for (pos = 0; pos != list->size; ++pos)
   15466:	2600      	movs	r6, #0
   15468:	88eb      	ldrh	r3, [r5, #6]
   1546a:	42b3      	cmp	r3, r6
   1546c:	d106      	bne.n	1547c <obj_clearRegisterActivationMaskList+0x1a>
   1546e:	2400      	movs	r4, #0
            break;
        }
        bb_clear((gxByteBuffer*)it->key);
        bb_clear((gxByteBuffer*)it->value);
    }
    arr_clearKeyValuePair(list);
   15470:	4628      	mov	r0, r5
   15472:	f7fc fba3 	bl	11bbc <arr_clearKeyValuePair>
    return ret;
#endif //DLMS_COSEM_EXACT_DATA_TYPES
#endif //DLMS_IGNORE_MALLOC
}
   15476:	4620      	mov	r0, r4
   15478:	b002      	add	sp, #8
   1547a:	bd70      	pop	{r4, r5, r6, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   1547c:	aa01      	add	r2, sp, #4
   1547e:	b2b1      	uxth	r1, r6
   15480:	4628      	mov	r0, r5
   15482:	f7fc fb8a 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   15486:	4604      	mov	r4, r0
   15488:	2800      	cmp	r0, #0
   1548a:	d1f1      	bne.n	15470 <obj_clearRegisterActivationMaskList+0xe>
        bb_clear((gxByteBuffer*)it->key);
   1548c:	9b01      	ldr	r3, [sp, #4]
   1548e:	6818      	ldr	r0, [r3, #0]
   15490:	f7f9 f917 	bl	e6c2 <bb_clear>
        bb_clear((gxByteBuffer*)it->value);
   15494:	9b01      	ldr	r3, [sp, #4]
   15496:	6858      	ldr	r0, [r3, #4]
   15498:	f7f9 f913 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   1549c:	3601      	adds	r6, #1
   1549e:	e7e3      	b.n	15468 <obj_clearRegisterActivationMaskList+0x6>

000154a0 <obj_clearIP4SetupOptions>:
#endif //DLMS_IGNORE_REGISTER_ACTIVATION
#ifndef DLMS_IGNORE_IP4_SETUP
int obj_clearIP4SetupOptions(gxArray* list)
{
   154a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   154a2:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxip4SetupIpOption* it;
    for (pos = 0; pos != list->size; ++pos)
   154a4:	2500      	movs	r5, #0
   154a6:	88e3      	ldrh	r3, [r4, #6]
   154a8:	42ab      	cmp	r3, r5
   154aa:	d105      	bne.n	154b8 <obj_clearIP4SetupOptions+0x18>
            return ret;
        }
        bb_clear(&it->data);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   154ac:	4620      	mov	r0, r4
   154ae:	f7fc fb4c 	bl	11b4a <arr_clear>
    return ret;
   154b2:	2000      	movs	r0, #0
}
   154b4:	b003      	add	sp, #12
   154b6:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   154b8:	aa01      	add	r2, sp, #4
   154ba:	b2a9      	uxth	r1, r5
   154bc:	4620      	mov	r0, r4
   154be:	f7fc fb6c 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   154c2:	2800      	cmp	r0, #0
   154c4:	d1f6      	bne.n	154b4 <obj_clearIP4SetupOptions+0x14>
        bb_clear(&it->data);
   154c6:	9801      	ldr	r0, [sp, #4]
   154c8:	3004      	adds	r0, #4
   154ca:	f7f9 f8fa 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   154ce:	3501      	adds	r5, #1
   154d0:	e7e9      	b.n	154a6 <obj_clearIP4SetupOptions+0x6>

000154d2 <obj_clearPPPSetupIPCPOptions>:
#endif //DLMS_IGNORE_IP4_SETUP

#ifndef DLMS_IGNORE_PPP_SETUP
int obj_clearPPPSetupIPCPOptions(gxArray* list)
{
   154d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   154d4:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxpppSetupIPCPOption* it;
    for (pos = 0; pos != list->size; ++pos)
   154d6:	2500      	movs	r5, #0
   154d8:	88e3      	ldrh	r3, [r4, #6]
   154da:	42ab      	cmp	r3, r5
   154dc:	d105      	bne.n	154ea <obj_clearPPPSetupIPCPOptions+0x18>
            return ret;
        }
        var_clear(&it->data);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   154de:	4620      	mov	r0, r4
   154e0:	f7fc fb33 	bl	11b4a <arr_clear>
    return ret;
   154e4:	2000      	movs	r0, #0
}
   154e6:	b003      	add	sp, #12
   154e8:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   154ea:	aa01      	add	r2, sp, #4
   154ec:	b2a9      	uxth	r1, r5
   154ee:	4620      	mov	r0, r4
   154f0:	f7fc fb53 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   154f4:	2800      	cmp	r0, #0
   154f6:	d1f6      	bne.n	154e6 <obj_clearPPPSetupIPCPOptions+0x14>
        var_clear(&it->data);
   154f8:	9801      	ldr	r0, [sp, #4]
   154fa:	3008      	adds	r0, #8
   154fc:	f006 fd3b 	bl	1bf76 <var_clear>
    for (pos = 0; pos != list->size; ++pos)
   15500:	3501      	adds	r5, #1
   15502:	e7e9      	b.n	154d8 <obj_clearPPPSetupIPCPOptions+0x6>

00015504 <obj_clearPPPSetupLCPOptions>:

int obj_clearPPPSetupLCPOptions(gxArray* list)
{
   15504:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15506:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxpppSetupLcpOption* it;
    for (pos = 0; pos != list->size; ++pos)
   15508:	2500      	movs	r5, #0
   1550a:	88e3      	ldrh	r3, [r4, #6]
   1550c:	42ab      	cmp	r3, r5
   1550e:	d105      	bne.n	1551c <obj_clearPPPSetupLCPOptions+0x18>
            return ret;
        }
        var_clear(&it->data);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   15510:	4620      	mov	r0, r4
   15512:	f7fc fb1a 	bl	11b4a <arr_clear>
    return ret;
   15516:	2000      	movs	r0, #0
}
   15518:	b003      	add	sp, #12
   1551a:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   1551c:	aa01      	add	r2, sp, #4
   1551e:	b2a9      	uxth	r1, r5
   15520:	4620      	mov	r0, r4
   15522:	f7fc fb3a 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   15526:	2800      	cmp	r0, #0
   15528:	d1f6      	bne.n	15518 <obj_clearPPPSetupLCPOptions+0x14>
        var_clear(&it->data);
   1552a:	9801      	ldr	r0, [sp, #4]
   1552c:	3008      	adds	r0, #8
   1552e:	f006 fd22 	bl	1bf76 <var_clear>
    for (pos = 0; pos != list->size; ++pos)
   15532:	3501      	adds	r5, #1
   15534:	e7e9      	b.n	1550a <obj_clearPPPSetupLCPOptions+0x6>

00015536 <obj_clearActiveDevices>:
#endif //DLMS_IGNORE_PPP_SETUP
#ifndef DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL
int obj_clearActiveDevices(gxArray* list)
{
   15536:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15538:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxActiveDevice* it;
    for (pos = 0; pos != list->size; ++pos)
   1553a:	2500      	movs	r5, #0
   1553c:	88e3      	ldrh	r3, [r4, #6]
   1553e:	42ab      	cmp	r3, r5
   15540:	d105      	bne.n	1554e <obj_clearActiveDevices+0x18>
            return ret;
        }
        bb_clear(&it->macAddress);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   15542:	4620      	mov	r0, r4
   15544:	f7fc fb01 	bl	11b4a <arr_clear>
    return ret;
   15548:	2000      	movs	r0, #0
}
   1554a:	b003      	add	sp, #12
   1554c:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   1554e:	aa01      	add	r2, sp, #4
   15550:	b2a9      	uxth	r1, r5
   15552:	4620      	mov	r0, r4
   15554:	f7fc fb21 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   15558:	2800      	cmp	r0, #0
   1555a:	d1f6      	bne.n	1554a <obj_clearActiveDevices+0x14>
        bb_clear(&it->macAddress);
   1555c:	9801      	ldr	r0, [sp, #4]
   1555e:	f7f9 f8b0 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   15562:	3501      	adds	r5, #1
   15564:	e7ea      	b.n	1553c <obj_clearActiveDevices+0x6>

00015566 <obj_clearUserList>:
#endif //DLMS_IGNORE_ZIG_BEE_NETWORK_CONTROL

int obj_clearUserList(gxArray* list)
{
   15566:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15568:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxKey2* it;
    for (pos = 0; pos != list->size; ++pos)
   1556a:	2500      	movs	r5, #0
   1556c:	88e3      	ldrh	r3, [r4, #6]
   1556e:	42ab      	cmp	r3, r5
   15570:	d105      	bne.n	1557e <obj_clearUserList+0x18>
            return ret;
        }
        gxfree(it->value);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   15572:	4620      	mov	r0, r4
   15574:	f7fc fae9 	bl	11b4a <arr_clear>
    return ret;
   15578:	2000      	movs	r0, #0
}
   1557a:	b003      	add	sp, #12
   1557c:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   1557e:	aa01      	add	r2, sp, #4
   15580:	b2a9      	uxth	r1, r5
   15582:	4620      	mov	r0, r4
   15584:	f7fc fb09 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   15588:	2800      	cmp	r0, #0
   1558a:	d1f6      	bne.n	1557a <obj_clearUserList+0x14>
        gxfree(it->value);
   1558c:	9b01      	ldr	r3, [sp, #4]
   1558e:	6858      	ldr	r0, [r3, #4]
   15590:	f7f7 feb8 	bl	d304 <free>
    for (pos = 0; pos != list->size; ++pos)
   15594:	3501      	adds	r5, #1
   15596:	e7e9      	b.n	1556c <obj_clearUserList+0x6>

00015598 <obj_clearBitArrayList>:

int obj_clearBitArrayList(
    gxArray* list)
{
   15598:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1559a:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    bitArray* it;
    for (pos = 0; pos != list->size; ++pos)
   1559c:	2500      	movs	r5, #0
   1559e:	88e3      	ldrh	r3, [r4, #6]
   155a0:	42ab      	cmp	r3, r5
   155a2:	d105      	bne.n	155b0 <obj_clearBitArrayList+0x18>
            return ret;
        }
        ba_clear(it);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   155a4:	4620      	mov	r0, r4
   155a6:	f7fc fad0 	bl	11b4a <arr_clear>
    return ret;
   155aa:	2000      	movs	r0, #0
}
   155ac:	b003      	add	sp, #12
   155ae:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   155b0:	aa01      	add	r2, sp, #4
   155b2:	b2a9      	uxth	r1, r5
   155b4:	4620      	mov	r0, r4
   155b6:	f7fc faf0 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   155ba:	2800      	cmp	r0, #0
   155bc:	d1f6      	bne.n	155ac <obj_clearBitArrayList+0x14>
        ba_clear(it);
   155be:	9801      	ldr	r0, [sp, #4]
   155c0:	f7f8 fe25 	bl	e20e <ba_clear>
    for (pos = 0; pos != list->size; ++pos)
   155c4:	3501      	adds	r5, #1
   155c6:	e7ea      	b.n	1559e <obj_clearBitArrayList+0x6>

000155c8 <obj_clearVariantList>:

int obj_clearVariantList(
    gxArray* list)
{
   155c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   155ca:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    dlmsVARIANT* it;
    for (pos = 0; pos != list->size; ++pos)
   155cc:	2500      	movs	r5, #0
   155ce:	88e3      	ldrh	r3, [r4, #6]
   155d0:	42ab      	cmp	r3, r5
   155d2:	d105      	bne.n	155e0 <obj_clearVariantList+0x18>
            return ret;
        }
        var_clear(it);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   155d4:	4620      	mov	r0, r4
   155d6:	f7fc fab8 	bl	11b4a <arr_clear>
    return ret;
   155da:	2000      	movs	r0, #0
}
   155dc:	b003      	add	sp, #12
   155de:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   155e0:	aa01      	add	r2, sp, #4
   155e2:	b2a9      	uxth	r1, r5
   155e4:	4620      	mov	r0, r4
   155e6:	f7fc fad8 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   155ea:	2800      	cmp	r0, #0
   155ec:	d1f6      	bne.n	155dc <obj_clearVariantList+0x14>
        var_clear(it);
   155ee:	9801      	ldr	r0, [sp, #4]
   155f0:	f006 fcc1 	bl	1bf76 <var_clear>
    for (pos = 0; pos != list->size; ++pos)
   155f4:	3501      	adds	r5, #1
   155f6:	e7ea      	b.n	155ce <obj_clearVariantList+0x6>

000155f8 <obj_clearAvailableSwitches>:

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA
//Clear available switches.
int obj_clearAvailableSwitches(
    gxArray* list)
{
   155f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   155fa:	4604      	mov	r4, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    int pos;
    gxMacAvailableSwitch* it;
    for (pos = 0; pos != list->size; ++pos)
   155fc:	2500      	movs	r5, #0
   155fe:	88e3      	ldrh	r3, [r4, #6]
   15600:	42ab      	cmp	r3, r5
   15602:	d105      	bne.n	15610 <obj_clearAvailableSwitches+0x18>
            return ret;
        }
        bb_clear(&it->sna);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(list);
   15604:	4620      	mov	r0, r4
   15606:	f7fc faa0 	bl	11b4a <arr_clear>
    return ret;
   1560a:	2000      	movs	r0, #0
}
   1560c:	b003      	add	sp, #12
   1560e:	bd30      	pop	{r4, r5, pc}
        ret = arr_getByIndex(list, pos, (void**)&it);
   15610:	aa01      	add	r2, sp, #4
   15612:	b2a9      	uxth	r1, r5
   15614:	4620      	mov	r0, r4
   15616:	f7fc fac0 	bl	11b9a <arr_getByIndex>
        if (ret != 0)
   1561a:	2800      	cmp	r0, #0
   1561c:	d1f6      	bne.n	1560c <obj_clearAvailableSwitches+0x14>
        bb_clear(&it->sna);
   1561e:	9801      	ldr	r0, [sp, #4]
   15620:	f7f9 f84f 	bl	e6c2 <bb_clear>
    for (pos = 0; pos != list->size; ++pos)
   15624:	3501      	adds	r5, #1
   15626:	e7ea      	b.n	155fe <obj_clearAvailableSwitches+0x6>

00015628 <obj_clearCertificateInfo>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

#ifndef DLMS_IGNORE_SECURITY_SETUP
int obj_clearCertificateInfo(gxArray* arr)
{
   15628:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1562a:	4605      	mov	r5, r0
    int ret = 0;
#ifndef DLMS_IGNORE_MALLOC
    gxCertificateInfo* it;
    uint16_t pos;
    for (pos = 0; pos != arr->size; ++pos)
   1562c:	2600      	movs	r6, #0
   1562e:	88eb      	ldrh	r3, [r5, #6]
   15630:	b2b1      	uxth	r1, r6
   15632:	428b      	cmp	r3, r1
   15634:	d106      	bne.n	15644 <obj_clearCertificateInfo+0x1c>
   15636:	2400      	movs	r4, #0
        gxfree(it->issuer);
        gxfree(it->subject);
        gxfree(it->subjectAltName);
    }
#endif //DLMS_IGNORE_MALLOC
    arr_clear(arr);
   15638:	4628      	mov	r0, r5
   1563a:	f7fc fa86 	bl	11b4a <arr_clear>
    return ret;
}
   1563e:	4620      	mov	r0, r4
   15640:	b002      	add	sp, #8
   15642:	bd70      	pop	{r4, r5, r6, pc}
        if ((ret = arr_getByIndex(arr, pos, (void**)&it)) != 0)
   15644:	aa01      	add	r2, sp, #4
   15646:	4628      	mov	r0, r5
   15648:	f7fc faa7 	bl	11b9a <arr_getByIndex>
   1564c:	3601      	adds	r6, #1
   1564e:	4604      	mov	r4, r0
   15650:	2800      	cmp	r0, #0
   15652:	d1f1      	bne.n	15638 <obj_clearCertificateInfo+0x10>
        gxfree(it->serialNumber);
   15654:	9b01      	ldr	r3, [sp, #4]
   15656:	6858      	ldr	r0, [r3, #4]
   15658:	f7f7 fe54 	bl	d304 <free>
        gxfree(it->issuer);
   1565c:	9b01      	ldr	r3, [sp, #4]
   1565e:	6898      	ldr	r0, [r3, #8]
   15660:	f7f7 fe50 	bl	d304 <free>
        gxfree(it->subject);
   15664:	9b01      	ldr	r3, [sp, #4]
   15666:	68d8      	ldr	r0, [r3, #12]
   15668:	f7f7 fe4c 	bl	d304 <free>
        gxfree(it->subjectAltName);
   1566c:	9b01      	ldr	r3, [sp, #4]
   1566e:	6918      	ldr	r0, [r3, #16]
   15670:	f7f7 fe48 	bl	d304 <free>
    for (pos = 0; pos != arr->size; ++pos)
   15674:	e7db      	b.n	1562e <obj_clearCertificateInfo+0x6>

00015676 <obj_clear>:
#endif //DLMS_IGNORE_SECURITY_SETUP

void obj_clear(gxObject* object)
{
   15676:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = 0;
    if (object != NULL)
   15678:	4604      	mov	r4, r0
   1567a:	2800      	cmp	r0, #0
   1567c:	f000 80b8 	beq.w	157f0 <obj_clear+0x17a>
    {
        if (object->access != NULL)
   15680:	68c0      	ldr	r0, [r0, #12]
   15682:	b150      	cbz	r0, 1569a <obj_clear+0x24>
        {
            bb_clear(&object->access->attributeAccessModes);
   15684:	f7f9 f81d 	bl	e6c2 <bb_clear>
            bb_clear(&object->access->methodAccessModes);
   15688:	68e0      	ldr	r0, [r4, #12]
   1568a:	300c      	adds	r0, #12
   1568c:	f7f9 f819 	bl	e6c2 <bb_clear>
#ifndef DLMS_IGNORE_MALLOC
            gxfree(object->access);
   15690:	68e0      	ldr	r0, [r4, #12]
   15692:	f7f7 fe37 	bl	d304 <free>
            object->access = NULL;
   15696:	2300      	movs	r3, #0
   15698:	60e3      	str	r3, [r4, #12]
#endif //DLMS_IGNORE_MALLOC
        }
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        object->shortName = 0;
   1569a:	8823      	ldrh	r3, [r4, #0]
   1569c:	2500      	movs	r5, #0
   1569e:	3b01      	subs	r3, #1
   156a0:	80a5      	strh	r5, [r4, #4]
#endif //DLMS_IGNORE_ASSOCIATION_SHORT_NAME
        switch (object->objectType)
   156a2:	2b72      	cmp	r3, #114	; 0x72
   156a4:	f200 80a4 	bhi.w	157f0 <obj_clear+0x17a>
   156a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   156ac:	00a20073 	.word	0x00a20073
   156b0:	00e10073 	.word	0x00e10073
   156b4:	016800d3 	.word	0x016800d3
   156b8:	00a2015f 	.word	0x00a2015f
   156bc:	01840189 	.word	0x01840189
   156c0:	00bc0177 	.word	0x00bc0177
   156c4:	00a200a2 	.word	0x00a200a2
   156c8:	00a200a4 	.word	0x00a200a4
   156cc:	012d017f 	.word	0x012d017f
   156d0:	007d00f1 	.word	0x007d00f1
   156d4:	00780173 	.word	0x00780173
   156d8:	010000a2 	.word	0x010000a2
   156dc:	019000a2 	.word	0x019000a2
   156e0:	00c50146 	.word	0x00c50146
   156e4:	00a200ca 	.word	0x00a200ca
   156e8:	00a200a2 	.word	0x00a200a2
   156ec:	00a200a2 	.word	0x00a200a2
   156f0:	00a200a2 	.word	0x00a200a2
   156f4:	00a200a2 	.word	0x00a200a2
   156f8:	019300a2 	.word	0x019300a2
   156fc:	0107018e 	.word	0x0107018e
   15700:	014d00de 	.word	0x014d00de
   15704:	00a200de 	.word	0x00a200de
   15708:	00a201cc 	.word	0x00a201cc
   1570c:	021100a2 	.word	0x021100a2
   15710:	00a200de 	.word	0x00a200de
   15714:	00a2020a 	.word	0x00a2020a
   15718:	021400a2 	.word	0x021400a2
   1571c:	00a200a2 	.word	0x00a200a2
   15720:	00a200a2 	.word	0x00a200a2
   15724:	01d300a2 	.word	0x01d300a2
   15728:	00e400a2 	.word	0x00e400a2
   1572c:	00a201de 	.word	0x00a201de
   15730:	01f900a2 	.word	0x01f900a2
   15734:	00a200a2 	.word	0x00a200a2
   15738:	01420131 	.word	0x01420131
   1573c:	00a200a2 	.word	0x00a200a2
   15740:	00a200a2 	.word	0x00a200a2
   15744:	00a200a2 	.word	0x00a200a2
   15748:	00a200a2 	.word	0x00a200a2
   1574c:	00a200a2 	.word	0x00a200a2
   15750:	00a20190 	.word	0x00a20190
   15754:	00de01e6 	.word	0x00de01e6
   15758:	00a200a2 	.word	0x00a200a2
   1575c:	00a200a2 	.word	0x00a200a2
   15760:	00a200a2 	.word	0x00a200a2
   15764:	00a200a2 	.word	0x00a200a2
   15768:	00a200a2 	.word	0x00a200a2
   1576c:	00a200a2 	.word	0x00a200a2
   15770:	00a200a2 	.word	0x00a200a2
   15774:	00a200a2 	.word	0x00a200a2
   15778:	017a00a2 	.word	0x017a00a2
   1577c:	00a200a2 	.word	0x00a200a2
   15780:	00a200a2 	.word	0x00a200a2
   15784:	00a200a2 	.word	0x00a200a2
   15788:	01b1019e 	.word	0x01b1019e
   1578c:	00a201b4 	.word	0x00a201b4
   15790:	01bf      	.short	0x01bf
        {
#ifndef DLMS_IGNORE_DATA
        case DLMS_OBJECT_TYPE_DATA:
            var_clear(&((gxData*)object)->value);
   15792:	f104 0010 	add.w	r0, r4, #16
#endif //DLMS_IGNORE_AUTO_CONNECT
#ifndef DLMS_IGNORE_DEMAND_REGISTER
        case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
            var_clear(&((gxDemandRegister*)object)->currentAverageValue);
            var_clear(&((gxDemandRegister*)object)->lastAverageValue);
            var_clear(&((gxDemandRegister*)object)->status);
   15796:	f006 fbee 	bl	1bf76 <var_clear>
            break;
   1579a:	e029      	b.n	157f0 <obj_clear+0x17a>
            arr_clear(&((gxActionSchedule*)object)->executionTime);
   1579c:	f104 0018 	add.w	r0, r4, #24
        case DLMS_OBJECT_TYPE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS:
            break;
#endif //DLMS_IGNORE_SFSK_MAC_SYNCHRONIZATION_TIMEOUTS
#ifndef DLMS_IGNORE_SFSK_PHY_MAC_SETUP
        case DLMS_OBJECT_TYPE_SFSK_PHY_MAC_SETUP:
            arr_clear(&((gxSFSKPhyMacSetUp*)object)->macGroupAddresses);
   157a0:	f7fc f9d3 	bl	11b4a <arr_clear>
            break;
   157a4:	e024      	b.n	157f0 <obj_clear+0x17a>
            bb_clear(&((gxActivityCalendar*)object)->calendarNameActive);
   157a6:	f104 0010 	add.w	r0, r4, #16
   157aa:	f7f8 ff8a 	bl	e6c2 <bb_clear>
            bb_clear(&((gxActivityCalendar*)object)->calendarNamePassive);
   157ae:	f104 001c 	add.w	r0, r4, #28
   157b2:	f7f8 ff86 	bl	e6c2 <bb_clear>
            if ((ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfileActive)) != 0 ||
   157b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   157ba:	f7ff fd4d 	bl	15258 <obj_clearSeasonProfile>
   157be:	b9b8      	cbnz	r0, 157f0 <obj_clear+0x17a>
                (ret = obj_clearWeekProfileTable(&((gxActivityCalendar*)object)->weekProfileTableActive)) != 0 ||
   157c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   157c4:	f7ff fd66 	bl	15294 <obj_clearWeekProfileTable>
            if ((ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfileActive)) != 0 ||
   157c8:	b990      	cbnz	r0, 157f0 <obj_clear+0x17a>
                (ret = obj_clearDayProfileTable(&((gxActivityCalendar*)object)->dayProfileTableActive)) != 0 ||
   157ca:	f104 0040 	add.w	r0, r4, #64	; 0x40
   157ce:	f7ff fd7b 	bl	152c8 <obj_clearDayProfileTable>
                (ret = obj_clearWeekProfileTable(&((gxActivityCalendar*)object)->weekProfileTableActive)) != 0 ||
   157d2:	b968      	cbnz	r0, 157f0 <obj_clear+0x17a>
                (ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfilePassive)) != 0 ||
   157d4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   157d8:	f7ff fd3e 	bl	15258 <obj_clearSeasonProfile>
                (ret = obj_clearDayProfileTable(&((gxActivityCalendar*)object)->dayProfileTableActive)) != 0 ||
   157dc:	b940      	cbnz	r0, 157f0 <obj_clear+0x17a>
                (ret = obj_clearWeekProfileTable(&((gxActivityCalendar*)object)->weekProfileTablePassive)) != 0 ||
   157de:	f104 0064 	add.w	r0, r4, #100	; 0x64
   157e2:	f7ff fd57 	bl	15294 <obj_clearWeekProfileTable>
                (ret = obj_clearSeasonProfile(&((gxActivityCalendar*)object)->seasonProfilePassive)) != 0 ||
   157e6:	b918      	cbnz	r0, 157f0 <obj_clear+0x17a>
                (ret = obj_clearDayProfileTable(&((gxActivityCalendar*)object)->dayProfileTablePassive)) != 0)
   157e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   157ec:	f7ff fd6c 	bl	152c8 <obj_clearDayProfileTable>
    {
        //Remove warning.
    }
#endif

}
   157f0:	b002      	add	sp, #8
   157f2:	bd70      	pop	{r4, r5, r6, pc}
            oa_empty(&((gxAssociationLogicalName*)object)->objectList);
   157f4:	f104 0014 	add.w	r0, r4, #20
   157f8:	f006 f9c0 	bl	1bb7c <oa_empty>
            ((gxAssociationLogicalName*)object)->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)0;
   157fc:	6325      	str	r5, [r4, #48]	; 0x30
            bb_clear(&((gxAssociationLogicalName*)object)->xDLMSContextInfo.cypheringInfo);
   157fe:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   15802:	f7f8 ff5e 	bl	e6c2 <bb_clear>
            bb_clear(&((gxAssociationLogicalName*)object)->secret);
   15806:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1580a:	f7f8 ff5a 	bl	e6c2 <bb_clear>
            obj_clearUserList(&((gxAssociationLogicalName*)object)->userList);
   1580e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   15812:	f7ff fea8 	bl	15566 <obj_clearUserList>
            if (((gxAssociationLogicalName*)object)->currentUser.value != NULL)
   15816:	6f20      	ldr	r0, [r4, #112]	; 0x70
   15818:	2800      	cmp	r0, #0
   1581a:	d0e9      	beq.n	157f0 <obj_clear+0x17a>
                gxfree(((gxAssociationLogicalName*)object)->currentUser.value);
   1581c:	f7f7 fd72 	bl	d304 <free>
                ((gxAssociationLogicalName*)object)->currentUser.value = NULL;
   15820:	6725      	str	r5, [r4, #112]	; 0x70
   15822:	e7e5      	b.n	157f0 <obj_clear+0x17a>
            oa_empty(&((gxAssociationShortName*)object)->objectList);
   15824:	f104 0010 	add.w	r0, r4, #16
   15828:	f006 f9a8 	bl	1bb7c <oa_empty>
            bb_clear(&((gxAssociationShortName*)object)->secret);
   1582c:	f104 001c 	add.w	r0, r4, #28
            bb_clear(&((gxMacAddressSetup*)object)->macAddress);
   15830:	f7f8 ff47 	bl	e6c2 <bb_clear>
            break;
   15834:	e7dc      	b.n	157f0 <obj_clear+0x17a>
            arr_clearKeyValuePair(&((gxAutoAnswer*)object)->listeningWindow);
   15836:	f104 0014 	add.w	r0, r4, #20
            arr_clearKeyValuePair(&((gxMBusClient*)object)->captureDefinition);
   1583a:	f7fc f9bf 	bl	11bbc <arr_clearKeyValuePair>
            break;
   1583e:	e7d7      	b.n	157f0 <obj_clear+0x17a>
            arr_clearKeyValuePair(&((gxAutoConnect*)object)->callingWindow);
   15840:	f104 0014 	add.w	r0, r4, #20
   15844:	f7fc f9ba 	bl	11bbc <arr_clearKeyValuePair>
            arr_clearStrings(&((gxAutoConnect*)object)->destinations);
   15848:	f104 0020 	add.w	r0, r4, #32
            arr_clearStrings(&((gxModemConfiguration*)object)->modemProfile);
   1584c:	f7fc f9d4 	bl	11bf8 <arr_clearStrings>
            break;
   15850:	e7ce      	b.n	157f0 <obj_clear+0x17a>
            var_clear(&((gxDemandRegister*)object)->currentAverageValue);
   15852:	f104 0010 	add.w	r0, r4, #16
   15856:	f006 fb8e 	bl	1bf76 <var_clear>
            var_clear(&((gxDemandRegister*)object)->lastAverageValue);
   1585a:	f104 0020 	add.w	r0, r4, #32
   1585e:	f006 fb8a 	bl	1bf76 <var_clear>
            var_clear(&((gxDemandRegister*)object)->status);
   15862:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15866:	e796      	b.n	15796 <obj_clear+0x120>
            bb_clear(&((gxMacAddressSetup*)object)->macAddress);
   15868:	f104 0010 	add.w	r0, r4, #16
   1586c:	e7e0      	b.n	15830 <obj_clear+0x1ba>
            var_clear(&((gxExtendedRegister*)object)->status);
   1586e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15872:	e790      	b.n	15796 <obj_clear+0x120>
            bb_clear(&((gxSecuritySetup*)object)->clientSystemTitle);
   15874:	f104 0020 	add.w	r0, r4, #32
   15878:	f7f8 ff23 	bl	e6c2 <bb_clear>
            bb_clear(&((gxSecuritySetup*)object)->serverSystemTitle);
   1587c:	f104 0014 	add.w	r0, r4, #20
   15880:	f7f8 ff1f 	bl	e6c2 <bb_clear>
            obj_clearCertificateInfo(&((gxSecuritySetup*)object)->certificates);
   15884:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   15888:	f7ff fece 	bl	15628 <obj_clearCertificateInfo>
            break;
   1588c:	e7b0      	b.n	157f0 <obj_clear+0x17a>
            bb_clear(&((gxLocalPortSetup*)object)->password1);
   1588e:	f104 0010 	add.w	r0, r4, #16
   15892:	f7f8 ff16 	bl	e6c2 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->password2);
   15896:	f104 001c 	add.w	r0, r4, #28
   1589a:	f7f8 ff12 	bl	e6c2 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->password5);
   1589e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   158a2:	f7f8 ff0e 	bl	e6c2 <bb_clear>
            bb_clear(&((gxLocalPortSetup*)object)->deviceAddress);
   158a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   158aa:	e7c1      	b.n	15830 <obj_clear+0x1ba>
            bb_clear(&((gxIecTwistedPairSetup*)object)->primaryAddresses);
   158ac:	f104 0014 	add.w	r0, r4, #20
   158b0:	f7f8 ff07 	bl	e6c2 <bb_clear>
            bb_clear(&((gxIecTwistedPairSetup*)object)->tabis);
   158b4:	f104 0020 	add.w	r0, r4, #32
   158b8:	e7ba      	b.n	15830 <obj_clear+0x1ba>
            ((gxIp4Setup*)object)->dataLinkLayer = NULL;
   158ba:	6125      	str	r5, [r4, #16]
            var_clear(&((gxIp4Setup*)object)->value);
   158bc:	f104 0040 	add.w	r0, r4, #64	; 0x40
   158c0:	f006 fb59 	bl	1bf76 <var_clear>
            va_clear(&((gxIp4Setup*)object)->multicastIPAddress);
   158c4:	f104 0018 	add.w	r0, r4, #24
   158c8:	f006 fb30 	bl	1bf2c <va_clear>
            obj_clearIP4SetupOptions(&((gxIp4Setup*)object)->ipOptions);
   158cc:	f104 0020 	add.w	r0, r4, #32
   158d0:	f7ff fde6 	bl	154a0 <obj_clearIP4SetupOptions>
            break;
   158d4:	e78c      	b.n	157f0 <obj_clear+0x17a>
                if (arr_getByIndex(&((gxImageTransfer*)object)->imageActivateInfo, pos, (void**)&it) == 0)
   158d6:	aa01      	add	r2, sp, #4
   158d8:	b2a9      	uxth	r1, r5
   158da:	4630      	mov	r0, r6
   158dc:	f7fc f95d 	bl	11b9a <arr_getByIndex>
   158e0:	b938      	cbnz	r0, 158f2 <obj_clear+0x27c>
                    bb_clear(&it->identification);
   158e2:	9801      	ldr	r0, [sp, #4]
   158e4:	3004      	adds	r0, #4
   158e6:	f7f8 feec 	bl	e6c2 <bb_clear>
                    bb_clear(&it->signature);
   158ea:	9801      	ldr	r0, [sp, #4]
   158ec:	3010      	adds	r0, #16
   158ee:	f7f8 fee8 	bl	e6c2 <bb_clear>
                ++pos;
   158f2:	3501      	adds	r5, #1
            while (pos != ((gxImageTransfer*)object)->imageActivateInfo.size)
   158f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   158f6:	42ab      	cmp	r3, r5
   158f8:	d1ed      	bne.n	158d6 <obj_clear+0x260>
            ba_clear(&((gxImageTransfer*)object)->imageTransferredBlocksStatus);
   158fa:	f104 0014 	add.w	r0, r4, #20
   158fe:	f7f8 fc86 	bl	e20e <ba_clear>
            arr_clear(&((gxImageTransfer*)object)->imageActivateInfo);
   15902:	4630      	mov	r0, r6
   15904:	e74c      	b.n	157a0 <obj_clear+0x12a>
        switch (object->objectType)
   15906:	2500      	movs	r5, #0
   15908:	f104 0624 	add.w	r6, r4, #36	; 0x24
   1590c:	e7f2      	b.n	158f4 <obj_clear+0x27e>
            var_clear(&((gxLimiter*)object)->thresholdActive);
   1590e:	f104 0018 	add.w	r0, r4, #24
   15912:	f006 fb30 	bl	1bf76 <var_clear>
            var_clear(&((gxLimiter*)object)->thresholdNormal);
   15916:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1591a:	f006 fb2c 	bl	1bf76 <var_clear>
            var_clear(&((gxLimiter*)object)->thresholdEmergency);
   1591e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15922:	f006 fb28 	bl	1bf76 <var_clear>
            va_clear(&((gxLimiter*)object)->emergencyProfileGroupIDs);
   15926:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1592a:	f006 faff 	bl	1bf2c <va_clear>
            break;
   1592e:	e75f      	b.n	157f0 <obj_clear+0x17a>
            ((gxMBusClient*)object)->mBusPort = NULL;
   15930:	61a5      	str	r5, [r4, #24]
            arr_clearKeyValuePair(&((gxMBusClient*)object)->captureDefinition);
   15932:	f104 001c 	add.w	r0, r4, #28
   15936:	e780      	b.n	1583a <obj_clear+0x1c4>
            ret = obj_clearModemConfigurationInitialisationStrings(&((gxModemConfiguration*)object)->initialisationStrings);
   15938:	f104 0010 	add.w	r0, r4, #16
   1593c:	f7ff fcf4 	bl	15328 <obj_clearModemConfigurationInitialisationStrings>
            arr_clearStrings(&((gxModemConfiguration*)object)->modemProfile);
   15940:	f104 001c 	add.w	r0, r4, #28
   15944:	e782      	b.n	1584c <obj_clear+0x1d6>
            ((gxPppSetup*)object)->phy = NULL;
   15946:	61e5      	str	r5, [r4, #28]
            bb_clear(&((gxPppSetup*)object)->userName);
   15948:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1594c:	f7f8 feb9 	bl	e6c2 <bb_clear>
            bb_clear(&((gxPppSetup*)object)->password);
   15950:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15954:	f7f8 feb5 	bl	e6c2 <bb_clear>
            obj_clearPPPSetupIPCPOptions(&((gxPppSetup*)object)->ipcpOptions);
   15958:	f104 0010 	add.w	r0, r4, #16
   1595c:	f7ff fdb9 	bl	154d2 <obj_clearPPPSetupIPCPOptions>
            obj_clearPPPSetupLCPOptions(&((gxPppSetup*)object)->lcpOptions);
   15960:	f104 0020 	add.w	r0, r4, #32
   15964:	f7ff fdce 	bl	15504 <obj_clearPPPSetupLCPOptions>
            break;
   15968:	e742      	b.n	157f0 <obj_clear+0x17a>
            obj_clearProfileGenericBuffer(&((gxProfileGeneric*)object)->buffer);
   1596a:	f104 0010 	add.w	r0, r4, #16
   1596e:	f7ff fbe9 	bl	15144 <obj_clearProfileGenericBuffer>
            obj_clearProfileGenericCaptureObjects(&((gxProfileGeneric*)object)->captureObjects);
   15972:	f104 001c 	add.w	r0, r4, #28
            obj_clearParametersList(&((gxParameterMonitor*)object)->parameters);
   15976:	f7ff fbfd 	bl	15174 <obj_clearPushObjectList>
            break;
   1597a:	e739      	b.n	157f0 <obj_clear+0x17a>
            oa_empty(&((gxRegisterActivation*)object)->registerAssignment);
   1597c:	f104 0010 	add.w	r0, r4, #16
   15980:	f006 f8fc 	bl	1bb7c <oa_empty>
            obj_clearRegisterActivationMaskList(&((gxRegisterActivation*)object)->maskList);
   15984:	f104 0018 	add.w	r0, r4, #24
   15988:	f7ff fd6b 	bl	15462 <obj_clearRegisterActivationMaskList>
            bb_clear(&((gxRegisterActivation*)object)->activeMask);
   1598c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15990:	e74e      	b.n	15830 <obj_clear+0x1ba>
            va_clear(&((gxRegisterMonitor*)object)->thresholds);
   15992:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15996:	f006 fac9 	bl	1bf2c <va_clear>
            arr_clear(&((gxSpecialDaysTable*)object)->entries);
   1599a:	f104 0010 	add.w	r0, r4, #16
   1599e:	e6ff      	b.n	157a0 <obj_clear+0x12a>
            obj_clearActiveDevices(&((gxZigBeeNetworkControl*)object)->activeDevices);
   159a0:	f104 0014 	add.w	r0, r4, #20
   159a4:	f7ff fdc7 	bl	15536 <obj_clearActiveDevices>
            break;
   159a8:	e722      	b.n	157f0 <obj_clear+0x17a>
            obj_clearSapList(&((gxSapAssignment*)object)->sapAssignmentList);
   159aa:	f104 0010 	add.w	r0, r4, #16
   159ae:	f7ff fc36 	bl	1521e <obj_clearSapList>
            break;
   159b2:	e71d      	b.n	157f0 <obj_clear+0x17a>
            obj_clearScheduleEntries(&((gxSchedule*)object)->entries);
   159b4:	f104 0010 	add.w	r0, r4, #16
   159b8:	f7ff fcd2 	bl	15360 <obj_clearScheduleEntries>
            break;
   159bc:	e718      	b.n	157f0 <obj_clear+0x17a>
            obj_clearScriptTable(&((gxScriptTable*)object)->scripts);
   159be:	f104 0010 	add.w	r0, r4, #16
   159c2:	f7ff fd00 	bl	153c6 <obj_clearScriptTable>
            break;
   159c6:	e713      	b.n	157f0 <obj_clear+0x17a>
            ((gxTcpUdpSetup*)object)->ipSetup = NULL;
   159c8:	6165      	str	r5, [r4, #20]
            break;
   159ca:	e711      	b.n	157f0 <obj_clear+0x17a>
            bb_clear(&((gxUtilityTables*)object)->buffer);
   159cc:	f104 0014 	add.w	r0, r4, #20
   159d0:	e72e      	b.n	15830 <obj_clear+0x1ba>
            obj_clearPushObjectList(&((gxPushSetup*)object)->pushObjectList);
   159d2:	f104 0010 	add.w	r0, r4, #16
   159d6:	f7ff fbcd 	bl	15174 <obj_clearPushObjectList>
            bb_clear(&((gxPushSetup*)object)->destination);
   159da:	f104 0020 	add.w	r0, r4, #32
   159de:	f7f8 fe70 	bl	e6c2 <bb_clear>
            arr_clearKeyValuePair(&((gxPushSetup*)object)->communicationWindow);
   159e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   159e6:	e728      	b.n	1583a <obj_clear+0x1c4>
            arr_clear(&((gxAccount*)object)->creditReferences);
   159e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   159ec:	f7fc f8ad 	bl	11b4a <arr_clear>
            arr_clear(&((gxAccount*)object)->chargeReferences);
   159f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   159f4:	f7fc f8a9 	bl	11b4a <arr_clear>
            arr_clear(&((gxAccount*)object)->creditChargeConfigurations);
   159f8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   159fc:	f7fc f8a5 	bl	11b4a <arr_clear>
            arr_clear(&((gxAccount*)object)->tokenGatewayConfigurations);
   15a00:	f104 0048 	add.w	r0, r4, #72	; 0x48
   15a04:	f7fc f8a1 	bl	11b4a <arr_clear>
            bb_clear(&((gxAccount*)object)->currency.name);
   15a08:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   15a0c:	e710      	b.n	15830 <obj_clear+0x1ba>
            ((gxCredit*)object)->creditConfiguration = DLMS_CREDIT_CONFIGURATION_NONE;
   15a0e:	f884 5020 	strb.w	r5, [r4, #32]
            break;
   15a12:	e6ed      	b.n	157f0 <obj_clear+0x17a>
            ((gxCharge*)object)->chargeConfiguration = DLMS_CHARGE_CONFIGURATION_NONE;
   15a14:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
            obj_clearChargeTables(&((gxCharge*)object)->unitChargeActive.chargeTables);
   15a18:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15a1c:	f7ff fd02 	bl	15424 <obj_clearChargeTables>
            obj_clearChargeTables(&((gxCharge*)object)->unitChargePassive.chargeTables);
   15a20:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   15a24:	f7ff fcfe 	bl	15424 <obj_clearChargeTables>
            break;
   15a28:	e6e2      	b.n	157f0 <obj_clear+0x17a>
            bb_clear(&((gxTokenGateway*)object)->token);
   15a2a:	f104 0010 	add.w	r0, r4, #16
   15a2e:	f7f8 fe48 	bl	e6c2 <bb_clear>
            obj_clearByteBufferList(&((gxTokenGateway*)object)->descriptions);
   15a32:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15a36:	f7ff fcae 	bl	15396 <obj_clearByteBufferList>
            ba_clear(&((gxTokenGateway*)object)->dataValue);
   15a3a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15a3e:	f7f8 fbe6 	bl	e20e <ba_clear>
            break;
   15a42:	e6d5      	b.n	157f0 <obj_clear+0x17a>
            gxfree(((gxGsmDiagnostic*)object)->operatorName);
   15a44:	6920      	ldr	r0, [r4, #16]
   15a46:	f7f7 fc5d 	bl	d304 <free>
            ((gxGsmDiagnostic*)object)->operatorName = NULL;
   15a4a:	6125      	str	r5, [r4, #16]
            arr_clear(&((gxGsmDiagnostic*)object)->adjacentCells);
   15a4c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15a50:	e6a6      	b.n	157a0 <obj_clear+0x12a>
            bb_clear(&((gxCompactData*)object)->buffer);
   15a52:	f104 0010 	add.w	r0, r4, #16
   15a56:	f7f8 fe34 	bl	e6c2 <bb_clear>
            obj_clearProfileGenericCaptureObjects(&((gxCompactData*)object)->captureObjects);
   15a5a:	f104 001c 	add.w	r0, r4, #28
   15a5e:	f7ff fb89 	bl	15174 <obj_clearPushObjectList>
            bb_clear(&((gxCompactData*)object)->templateDescription);
   15a62:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   15a66:	e6e3      	b.n	15830 <obj_clear+0x1ba>
            ((gxParameterMonitor*)object)->changedParameter.target = NULL;
   15a68:	6125      	str	r5, [r4, #16]
            var_clear(&((gxParameterMonitor*)object)->changedParameter.value);
   15a6a:	f104 0018 	add.w	r0, r4, #24
   15a6e:	f006 fa82 	bl	1bf76 <var_clear>
            obj_clearParametersList(&((gxParameterMonitor*)object)->parameters);
   15a72:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15a76:	e77e      	b.n	15976 <obj_clear+0x300>
            arr_clear(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->multicastEntries);
   15a78:	f104 0010 	add.w	r0, r4, #16
   15a7c:	f7fc f865 	bl	11b4a <arr_clear>
            arr_clear(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->switchTable);
   15a80:	f104 001c 	add.w	r0, r4, #28
   15a84:	f7fc f861 	bl	11b4a <arr_clear>
            arr_clear(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->directTable);
   15a88:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15a8c:	f7fc f85d 	bl	11b4a <arr_clear>
            obj_clearAvailableSwitches(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->availableSwitches);
   15a90:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15a94:	f7ff fdb0 	bl	155f8 <obj_clearAvailableSwitches>
            arr_clear(&((gxPrimeNbOfdmPlcMacNetworkAdministrationData*)object)->communications);
   15a98:	f104 0040 	add.w	r0, r4, #64	; 0x40
   15a9c:	e680      	b.n	157a0 <obj_clear+0x12a>
            arr_clear(&((gxArbitrator*)object)->actions);
   15a9e:	f104 0010 	add.w	r0, r4, #16
   15aa2:	f7fc f852 	bl	11b4a <arr_clear>
            obj_clearBitArrayList(&((gxArbitrator*)object)->permissionsTable);
   15aa6:	f104 001c 	add.w	r0, r4, #28
   15aaa:	f7ff fd75 	bl	15598 <obj_clearBitArrayList>
            obj_clearVariantList(&((gxArbitrator*)object)->weightingsTable);
   15aae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15ab2:	f7ff fd89 	bl	155c8 <obj_clearVariantList>
            obj_clearBitArrayList(&((gxArbitrator*)object)->mostRecentRequestsTable);
   15ab6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15aba:	f7ff fd6d 	bl	15598 <obj_clearBitArrayList>
            break;
   15abe:	e697      	b.n	157f0 <obj_clear+0x17a>
            arr_clear(&((gxFSKMacCounters*)object)->synchronizationRegister);
   15ac0:	f104 0010 	add.w	r0, r4, #16
   15ac4:	f7fc f841 	bl	11b4a <arr_clear>
            arr_clear(&((gxFSKMacCounters*)object)->broadcastFramesCounter);
   15ac8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   15acc:	e668      	b.n	157a0 <obj_clear+0x12a>
            arr_clear(&((gxSFSKPhyMacSetUp*)object)->macGroupAddresses);
   15ace:	f104 0024 	add.w	r0, r4, #36	; 0x24
   15ad2:	e665      	b.n	157a0 <obj_clear+0x12a>
            obj_clearByteBufferList(&((gxSFSKReportingSystemList*)object)->reportingSystemList);
   15ad4:	f104 0010 	add.w	r0, r4, #16
   15ad8:	f7ff fc5d 	bl	15396 <obj_clearByteBufferList>
}
   15adc:	e688      	b.n	157f0 <obj_clear+0x17a>

00015ade <obj_attributeCount>:

unsigned char obj_attributeCount(gxObject* object)
{
    unsigned char ret;
    switch (object->objectType)
   15ade:	8803      	ldrh	r3, [r0, #0]
   15ae0:	3b01      	subs	r3, #1
   15ae2:	2b72      	cmp	r3, #114	; 0x72
   15ae4:	d865      	bhi.n	15bb2 <obj_attributeCount+0xd4>
   15ae6:	e8df f003 	tbb	[pc, r3]
   15aea:	646c      	.short	0x646c
   15aec:	3a66605e 	.word	0x3a66605e
   15af0:	6c6c665c 	.word	0x6c6c665c
   15af4:	6464466c 	.word	0x6464466c
   15af8:	566c643e 	.word	0x566c643e
   15afc:	3a3a3c66 	.word	0x3a3a3c66
   15b00:	3a606066 	.word	0x3a606066
   15b04:	6868683a 	.word	0x6868683a
   15b08:	64646464 	.word	0x64646464
   15b0c:	64646464 	.word	0x64646464
   15b10:	3c685664 	.word	0x3c685664
   15b14:	643a606c 	.word	0x643a606c
   15b18:	62643c5c 	.word	0x62643c5c
   15b1c:	645c606c 	.word	0x645c606c
   15b20:	66646c64 	.word	0x66646c64
   15b24:	68646468 	.word	0x68646468
   15b28:	643a4e64 	.word	0x643a4e64
   15b2c:	3a646864 	.word	0x3a646864
   15b30:	6c64546a 	.word	0x6c64546a
   15b34:	64646464 	.word	0x64646464
   15b38:	5c605e64 	.word	0x5c605e64
   15b3c:	3a685662 	.word	0x3a685662
   15b40:	64646464 	.word	0x64646464
   15b44:	64646464 	.word	0x64646464
   15b48:	64646464 	.word	0x64646464
   15b4c:	60546464 	.word	0x60546464
   15b50:	64643a5e 	.word	0x64643a5e
   15b54:	64646464 	.word	0x64646464
   15b58:	645a6a58 	.word	0x645a6a58
   15b5c:	68          	.byte	0x68
   15b5d:	00          	.byte	0x00
        break;
    case DLMS_OBJECT_TYPE_REGISTER:
        ret = 3;
        break;
    case DLMS_OBJECT_TYPE_ACTION_SCHEDULE:
        ret = 4;
   15b5e:	2004      	movs	r0, #4
        break;
   15b60:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        ret = 10;
   15b62:	200a      	movs	r0, #10
        break;
   15b64:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        //user_list and current_user are in version 2.
        if (object->version > 1)
   15b66:	7883      	ldrb	r3, [r0, #2]
   15b68:	2b01      	cmp	r3, #1
   15b6a:	d828      	bhi.n	15bbe <obj_attributeCount+0xe0>
        {
            ret = 11;
        }
        //Security Setup Reference is from version 1.
        else if (object->version > 0)
   15b6c:	2b00      	cmp	r3, #0
            ret = 9;
        }

        else
        {
            ret = 8;
   15b6e:	bf14      	ite	ne
   15b70:	2009      	movne	r0, #9
   15b72:	2008      	moveq	r0, #8
   15b74:	4770      	bx	lr
        }
        break;
    case DLMS_OBJECT_TYPE_ASSOCIATION_SHORT_NAME:
        if (object->version < 2)
   15b76:	7883      	ldrb	r3, [r0, #2]
   15b78:	2b01      	cmp	r3, #1
   15b7a:	d922      	bls.n	15bc2 <obj_attributeCount+0xe4>
        {
            ret = 2;
        }
        else if (object->version < 3)
   15b7c:	2b02      	cmp	r3, #2
        {
            ret = 4;
   15b7e:	bf14      	ite	ne
   15b80:	2006      	movne	r0, #6
   15b82:	2004      	moveq	r0, #4
   15b84:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_GPRS_SETUP:
        ret = 4;
        break;
    case DLMS_OBJECT_TYPE_SECURITY_SETUP:
        if (object->version == 0)
   15b86:	7883      	ldrb	r3, [r0, #2]
   15b88:	2b00      	cmp	r3, #0
        {
            ret = 5;
   15b8a:	bf14      	ite	ne
   15b8c:	2006      	movne	r0, #6
   15b8e:	2005      	moveq	r0, #5
   15b90:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_LIMITER:
        ret = 11;
        break;
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        ret = 12;
   15b92:	200c      	movs	r0, #12
        break;
   15b94:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP:
        ret = 2;
        break;
    case DLMS_OBJECT_TYPE_PUSH_SETUP:
        ret = 7;
   15b96:	2007      	movs	r0, #7
        break;
   15b98:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_DATA_PROTECTION:
        ret = 6;
        break;
    case DLMS_OBJECT_TYPE_ACCOUNT:
        ret = 19;
   15b9a:	2013      	movs	r0, #19
        break;
   15b9c:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_CREDIT:
        ret = 11;
        break;
    case DLMS_OBJECT_TYPE_CHARGE:
        ret = 13;
   15b9e:	200d      	movs	r0, #13
        break;
   15ba0:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_TARIFF_PLAN:
        ret = 5;
        break;
#endif //DLMS_ITALIAN_STANDARD
    case DLMS_OBJECT_TYPE_GSM_DIAGNOSTIC:
        ret = 8;
   15ba2:	2008      	movs	r0, #8
        break;
   15ba4:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_PARAMETER_MONITOR:
        ret = 4;
        break;
#ifndef DLMS_IGNORE_LLC_SSCS_SETUP
    case DLMS_OBJECT_TYPE_LLC_SSCS_SETUP:
        ret = 3;
   15ba6:	2003      	movs	r0, #3
        break;
   15ba8:	4770      	bx	lr
#endif //DLMS_IGNORE_LLC_SSCS_SETUP
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS
    case DLMS_OBJECT_TYPE_PRIME_NB_OFDM_PLC_PHYSICAL_LAYER_COUNTERS:
        ret = 5;
   15baa:	2005      	movs	r0, #5
        break;
   15bac:	4770      	bx	lr
        ret = 8;
        break;
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_SETUP
#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS
    case DLMS_OBJECT_TYPE_PRIME_NB_OFDM_PLC_MAC_FUNCTIONAL_PARAMETERS:
        ret = 14;
   15bae:	200e      	movs	r0, #14
        break;
   15bb0:	4770      	bx	lr
        ret = 6;
        break;
#endif //DLMS_IGNORE_ARBITRATOR
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
    case DLMS_OBJECT_TYPE_IEC_8802_LLC_TYPE1_SETUP:
        ret = 1;
   15bb2:	2001      	movs	r0, #1
        break;
   15bb4:	4770      	bx	lr
#endif //DLMS_IGNORE_IEC_8802_LLC_TYPE1_SETUP
#ifndef DLMS_IGNORE_IEC_8802_LLC_TYPE2_SETUP
    case DLMS_OBJECT_TYPE_IEC_8802_LLC_TYPE2_SETUP:
        ret = 9;
   15bb6:	2009      	movs	r0, #9
        break;
   15bb8:	4770      	bx	lr
        return 6;
   15bba:	2006      	movs	r0, #6
   15bbc:	4770      	bx	lr
            ret = 11;
   15bbe:	200b      	movs	r0, #11
   15bc0:	4770      	bx	lr
            ret = 2;
   15bc2:	2002      	movs	r0, #2
#endif
        ret = 1;
        break;
    }
    return ret;
}
   15bc4:	4770      	bx	lr

00015bc6 <obj_methodCount>:


unsigned char obj_methodCount(gxObject* object)
{
    unsigned char ret;
    switch (object->objectType)
   15bc6:	8803      	ldrh	r3, [r0, #0]
   15bc8:	3b03      	subs	r3, #3
   15bca:	2b70      	cmp	r3, #112	; 0x70
   15bcc:	d850      	bhi.n	15c70 <obj_methodCount+0xaa>
   15bce:	e8df f003 	tbb	[pc, r3]
   15bd2:	3939      	.short	0x3939
   15bd4:	41434543 	.word	0x41434543
   15bd8:	49434539 	.word	0x49434539
   15bdc:	4f3b4f4f 	.word	0x4f3b4f4f
   15be0:	394f4739 	.word	0x394f4739
   15be4:	394f4f4f 	.word	0x394f4f4f
   15be8:	4f4f394f 	.word	0x4f4f394f
   15bec:	4f4f4539 	.word	0x4f4f4539
   15bf0:	4f4f4f4f 	.word	0x4f4f4f4f
   15bf4:	394f4f4f 	.word	0x394f4f4f
   15bf8:	4f4f454f 	.word	0x4f4f454f
   15bfc:	434f394f 	.word	0x434f394f
   15c00:	4f394f4f 	.word	0x4f394f4f
   15c04:	4f4f4f39 	.word	0x4f4f4f39
   15c08:	4f4f4f4f 	.word	0x4f4f4f4f
   15c0c:	43394339 	.word	0x43394339
   15c10:	434f4f43 	.word	0x434f4f43
   15c14:	494f434f 	.word	0x494f434f
   15c18:	4f4f4f4f 	.word	0x4f4f4f4f
   15c1c:	394f4f4f 	.word	0x394f4f4f
   15c20:	394f4f39 	.word	0x394f4f39
   15c24:	4f4f4f39 	.word	0x4f4f4f39
   15c28:	4f4f4f4f 	.word	0x4f4f4f4f
   15c2c:	4f4f4f4f 	.word	0x4f4f4f4f
   15c30:	4f4f4f4f 	.word	0x4f4f4f4f
   15c34:	4d4f4f4f 	.word	0x4d4f4f4f
   15c38:	4f4f4f4f 	.word	0x4f4f4f4f
   15c3c:	45454f4f 	.word	0x45454f4f
   15c40:	4f4b      	.short	0x4f4b
   15c42:	39          	.byte	0x39
   15c43:	00          	.byte	0x00
   15c44:	2001      	movs	r0, #1
   15c46:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_ACTIVITY_CALENDAR:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_ASSOCIATION_LOGICAL_NAME:
        if (object->version > 1)
   15c48:	7883      	ldrb	r3, [r0, #2]
   15c4a:	2b01      	cmp	r3, #1
        {
            ret = 6;
        }
        else
        {
            ret = 4;
   15c4c:	bf8c      	ite	hi
   15c4e:	2006      	movhi	r0, #6
   15c50:	2004      	movls	r0, #4
   15c52:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_AUTO_CONNECT:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_CLOCK:
        ret = 6;
   15c54:	2006      	movs	r0, #6
        break;
   15c56:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_DEMAND_REGISTER:
        ret = 2;
   15c58:	2002      	movs	r0, #2
        break;
   15c5a:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_IEC_TWISTED_PAIR_SETUP:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_IP4_SETUP:
        ret = 3;
   15c5c:	2003      	movs	r0, #3
        break;
   15c5e:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_MBUS_SLAVE_PORT_SETUP:
        ret = 0;
        break;
    case DLMS_OBJECT_TYPE_IMAGE_TRANSFER:
        ret = 4;
   15c60:	2004      	movs	r0, #4
        break;
   15c62:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_LIMITER:
        ret = 0;
        break;
    case DLMS_OBJECT_TYPE_MBUS_CLIENT:
        ret = 8;
   15c64:	2008      	movs	r0, #8
        break;
   15c66:	4770      	bx	lr
        break;
    case DLMS_OBJECT_TYPE_CREDIT:
        ret = 3;
        break;
    case DLMS_OBJECT_TYPE_CHARGE:
        ret = 5;
   15c68:	2005      	movs	r0, #5
        break;
   15c6a:	4770      	bx	lr
    case DLMS_OBJECT_TYPE_TOKEN_GATEWAY:
        ret = 1;
        break;
    case DLMS_OBJECT_TYPE_ZIG_BEE_NETWORK_CONTROL:
        ret = 11;
   15c6c:	200b      	movs	r0, #11
        break;
   15c6e:	4770      	bx	lr
        ret = 0;
   15c70:	2000      	movs	r0, #0
        assert(0);
#endif
        ret = 0;
    }
    return ret;
}
   15c72:	4770      	bx	lr

00015c74 <obj_clearParametersList>:
   15c74:	f7ff ba7e 	b.w	15174 <obj_clearPushObjectList>

00015c78 <clock_updateDST>:
#endif //DLMS_IGNORE_PARAMETER_MONITOR

#ifndef DLMS_IGNORE_CLOCK
#ifndef DLMS_IGNORE_SERVER
void clock_updateDST(gxClock* object, gxtime* value)
{
   15c78:	b538      	push	{r3, r4, r5, lr}
    if (object->enabled && time_compare(&object->begin, value) != 1 && time_compare(&object->end, value) != -1)
   15c7a:	7c83      	ldrb	r3, [r0, #18]
{
   15c7c:	4604      	mov	r4, r0
   15c7e:	460d      	mov	r5, r1
    if (object->enabled && time_compare(&object->begin, value) != 1 && time_compare(&object->end, value) != -1)
   15c80:	b1a3      	cbz	r3, 15cac <clock_updateDST+0x34>
   15c82:	3024      	adds	r0, #36	; 0x24
   15c84:	f7f9 fcae 	bl	f5e4 <time_compare>
   15c88:	2801      	cmp	r0, #1
   15c8a:	d00f      	beq.n	15cac <clock_updateDST+0x34>
   15c8c:	4629      	mov	r1, r5
   15c8e:	f104 0014 	add.w	r0, r4, #20
   15c92:	f7f9 fca7 	bl	f5e4 <time_compare>
   15c96:	3001      	adds	r0, #1
   15c98:	d008      	beq.n	15cac <clock_updateDST+0x34>
    {
        object->status |= DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
   15c9a:	f894 3020 	ldrb.w	r3, [r4, #32]
   15c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15ca2:	f884 3020 	strb.w	r3, [r4, #32]
    }
    else
    {
        object->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
    }
    object->time.status = object->status;
   15ca6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
   15caa:	bd38      	pop	{r3, r4, r5, pc}
        object->status &= ~DLMS_CLOCK_STATUS_DAYLIGHT_SAVE_ACTIVE;
   15cac:	f894 3020 	ldrb.w	r3, [r4, #32]
   15cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15cb4:	e7f5      	b.n	15ca2 <clock_updateDST+0x2a>

00015cb6 <cosem_setValue>:
#endif
#include "../include/gxset.h"
#include "../include/cosem.h"

int cosem_setValue(dlmsSettings* settings, gxValueEventArg* e)
{
   15cb6:	b410      	push	{r4}
   15cb8:	460b      	mov	r3, r1
    int ret = DLMS_ERROR_CODE_OK;
    if (e->index == 1)
   15cba:	7e09      	ldrb	r1, [r1, #24]
   15cbc:	2901      	cmp	r1, #1
   15cbe:	d10e      	bne.n	15cde <cosem_setValue+0x28>
    {
#if defined(DLMS_IGNORE_MALLOC) || defined(DLMS_COSEM_EXACT_DATA_TYPES)
        ret = cosem_getOctetString2(e->value.byteArr, e->target->logicalName, 6, NULL);
#else
        if (e->value.byteArr == NULL || e->value.byteArr->size - e->value.byteArr->position != 6)
   15cc0:	6898      	ldr	r0, [r3, #8]
   15cc2:	2800      	cmp	r0, #0
   15cc4:	f000 81b0 	beq.w	16028 <cosem_setValue+0x372>
   15cc8:	88c2      	ldrh	r2, [r0, #6]
   15cca:	8901      	ldrh	r1, [r0, #8]
   15ccc:	1a52      	subs	r2, r2, r1
   15cce:	2a06      	cmp	r2, #6
   15cd0:	f040 81aa 	bne.w	16028 <cosem_setValue+0x372>
        {
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        else
        {
            ret = bb_get(e->value.byteArr, e->target->logicalName, 6);
   15cd4:	6959      	ldr	r1, [r3, #20]
    default:
        //Unknown type.
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   15cd6:	bc10      	pop	{r4}
            ret = bb_get(e->value.byteArr, e->target->logicalName, 6);
   15cd8:	3106      	adds	r1, #6
   15cda:	f7f8 bee7 	b.w	eaac <bb_get>
    switch (e->target->objectType)
   15cde:	695c      	ldr	r4, [r3, #20]
   15ce0:	8822      	ldrh	r2, [r4, #0]
   15ce2:	3a01      	subs	r2, #1
   15ce4:	2a72      	cmp	r2, #114	; 0x72
   15ce6:	f200 819f 	bhi.w	16028 <cosem_setValue+0x372>
   15cea:	e8df f012 	tbh	[pc, r2, lsl #1]
   15cee:	0073      	.short	0x0073
   15cf0:	0077019d 	.word	0x0077019d
   15cf4:	009f00a9 	.word	0x009f00a9
   15cf8:	00ef00f4 	.word	0x00ef00f4
   15cfc:	010c007c 	.word	0x010c007c
   15d00:	01110107 	.word	0x01110107
   15d04:	019d0090 	.word	0x019d0090
   15d08:	008b019d 	.word	0x008b019d
   15d0c:	0102019d 	.word	0x0102019d
   15d10:	00bd00d1 	.word	0x00bd00d1
   15d14:	00f80086 	.word	0x00f80086
   15d18:	00b80081 	.word	0x00b80081
   15d1c:	00cc00c2 	.word	0x00cc00c2
   15d20:	00e5011b 	.word	0x00e5011b
   15d24:	009a0095 	.word	0x009a0095
   15d28:	019d019d 	.word	0x019d019d
   15d2c:	019d019d 	.word	0x019d019d
   15d30:	019d019d 	.word	0x019d019d
   15d34:	019d019d 	.word	0x019d019d
   15d38:	019d019d 	.word	0x019d019d
   15d3c:	01160125 	.word	0x01160125
   15d40:	00a400c7 	.word	0x00a400c7
   15d44:	00ae00ea 	.word	0x00ae00ea
   15d48:	013e019d 	.word	0x013e019d
   15d4c:	019d019d 	.word	0x019d019d
   15d50:	01840193 	.word	0x01840193
   15d54:	0189018e 	.word	0x0189018e
   15d58:	019d019d 	.word	0x019d019d
   15d5c:	01750198 	.word	0x01750198
   15d60:	017f017a 	.word	0x017f017a
   15d64:	00fd019d 	.word	0x00fd019d
   15d68:	01a10143 	.word	0x01a10143
   15d6c:	014800b3 	.word	0x014800b3
   15d70:	019d019d 	.word	0x019d019d
   15d74:	019d0170 	.word	0x019d0170
   15d78:	00db00d6 	.word	0x00db00d6
   15d7c:	019d00e0 	.word	0x019d00e0
   15d80:	019d0120 	.word	0x019d0120
   15d84:	019d019d 	.word	0x019d019d
   15d88:	019d019d 	.word	0x019d019d
   15d8c:	0152014d 	.word	0x0152014d
   15d90:	015c0157 	.word	0x015c0157
   15d94:	01660161 	.word	0x01660161
   15d98:	019d016b 	.word	0x019d016b
   15d9c:	019d019d 	.word	0x019d019d
   15da0:	019d019d 	.word	0x019d019d
   15da4:	019d019d 	.word	0x019d019d
   15da8:	019d019d 	.word	0x019d019d
   15dac:	019d019d 	.word	0x019d019d
   15db0:	019d019d 	.word	0x019d019d
   15db4:	01a1019d 	.word	0x01a1019d
   15db8:	01a101a1 	.word	0x01a101a1
   15dbc:	019d01a1 	.word	0x019d01a1
   15dc0:	019d019d 	.word	0x019d019d
   15dc4:	019d019d 	.word	0x019d019d
   15dc8:	012a019d 	.word	0x012a019d
   15dcc:	0134012f 	.word	0x0134012f
   15dd0:	0139019d 	.word	0x0139019d
}
   15dd4:	bc10      	pop	{r4}
        ret = cosem_setData(e);
   15dd6:	4618      	mov	r0, r3
   15dd8:	f000 b92c 	b.w	16034 <cosem_setData>
        ret = cosem_setRegister((gxRegister*)e->target, e->index, &e->value);
   15ddc:	4620      	mov	r0, r4
   15dde:	461a      	mov	r2, r3
}
   15de0:	bc10      	pop	{r4}
        ret = cosem_setRegister((gxRegister*)e->target, e->index, &e->value);
   15de2:	f000 b932 	b.w	1604a <cosem_setRegister>
        ret = cosem_setClock(settings, (gxClock*)e->target, e->index, &e->value);
   15de6:	460a      	mov	r2, r1
   15de8:	4621      	mov	r1, r4
}
   15dea:	bc10      	pop	{r4}
        ret = cosem_setClock(settings, (gxClock*)e->target, e->index, &e->value);
   15dec:	f000 b9b4 	b.w	16158 <cosem_setClock>
        ret = cosem_setActionSchedule(settings, (gxActionSchedule*)e->target, e->index, &e->value);
   15df0:	460a      	mov	r2, r1
   15df2:	4621      	mov	r1, r4
}
   15df4:	bc10      	pop	{r4}
        ret = cosem_setActionSchedule(settings, (gxActionSchedule*)e->target, e->index, &e->value);
   15df6:	f000 bc86 	b.w	16706 <cosem_setActionSchedule>
        ret = cosem_setActivityCalendar(settings, (gxActivityCalendar*)e->target, e->index, &e->value);
   15dfa:	460a      	mov	r2, r1
   15dfc:	4621      	mov	r1, r4
}
   15dfe:	bc10      	pop	{r4}
        ret = cosem_setActivityCalendar(settings, (gxActivityCalendar*)e->target, e->index, &e->value);
   15e00:	f000 bc19 	b.w	16636 <cosem_setActivityCalendar>
        ret = cosem_setAssociationLogicalName(settings, (gxAssociationLogicalName*)e->target, e->index, &e->value);
   15e04:	460a      	mov	r2, r1
   15e06:	4621      	mov	r1, r4
}
   15e08:	bc10      	pop	{r4}
        ret = cosem_setAssociationLogicalName(settings, (gxAssociationLogicalName*)e->target, e->index, &e->value);
   15e0a:	f000 bdef 	b.w	169ec <cosem_setAssociationLogicalName>
        ret = cosem_setAssociationShortName(settings, (gxAssociationShortName*)e->target, e->index, &e->value);
   15e0e:	460a      	mov	r2, r1
   15e10:	4621      	mov	r1, r4
}
   15e12:	bc10      	pop	{r4}
        ret = cosem_setAssociationShortName(settings, (gxAssociationShortName*)e->target, e->index, &e->value);
   15e14:	f001 ba7a 	b.w	1730c <cosem_setAssociationShortName>
        ret = cosem_setAutoAnswer((gxAutoAnswer*)e->target, e->index, &e->value);
   15e18:	4620      	mov	r0, r4
   15e1a:	461a      	mov	r2, r3
}
   15e1c:	bc10      	pop	{r4}
        ret = cosem_setAutoAnswer((gxAutoAnswer*)e->target, e->index, &e->value);
   15e1e:	f001 baa6 	b.w	1736e <cosem_setAutoAnswer>
        ret = cosem_setAutoConnect((gxAutoConnect*)e->target, e->index, &e->value);
   15e22:	4620      	mov	r0, r4
   15e24:	461a      	mov	r2, r3
}
   15e26:	bc10      	pop	{r4}
        ret = cosem_setAutoConnect((gxAutoConnect*)e->target, e->index, &e->value);
   15e28:	f001 bb3e 	b.w	174a8 <cosem_setAutoConnect>
        ret = cosem_setDemandRegister((gxDemandRegister*)e->target, e->index, &e->value);
   15e2c:	4620      	mov	r0, r4
   15e2e:	461a      	mov	r2, r3
}
   15e30:	bc10      	pop	{r4}
        ret = cosem_setDemandRegister((gxDemandRegister*)e->target, e->index, &e->value);
   15e32:	f001 bbe7 	b.w	17604 <cosem_setDemandRegister>
        ret = cosem_setMacAddressSetup((gxMacAddressSetup*)e->target, e->index, &e->value);
   15e36:	4620      	mov	r0, r4
   15e38:	461a      	mov	r2, r3
}
   15e3a:	bc10      	pop	{r4}
        ret = cosem_setMacAddressSetup((gxMacAddressSetup*)e->target, e->index, &e->value);
   15e3c:	f001 bc6e 	b.w	1771c <cosem_setMacAddressSetup>
        ret = cosem_setExtendedRegister((gxExtendedRegister*)e->target, e->index, &e->value);
   15e40:	4620      	mov	r0, r4
   15e42:	461a      	mov	r2, r3
}
   15e44:	bc10      	pop	{r4}
        ret = cosem_setExtendedRegister((gxExtendedRegister*)e->target, e->index, &e->value);
   15e46:	f001 bc81 	b.w	1774c <cosem_setExtendedRegister>
        ret = cosem_setGprsSetup((gxGPRSSetup*)e->target, e->index, &e->value);
   15e4a:	4620      	mov	r0, r4
   15e4c:	461a      	mov	r2, r3
}
   15e4e:	bc10      	pop	{r4}
        ret = cosem_setGprsSetup((gxGPRSSetup*)e->target, e->index, &e->value);
   15e50:	f001 bcd1 	b.w	177f6 <cosem_setGprsSetup>
        ret = cosem_setSecuritySetup((gxSecuritySetup*)e->target, e->index, &e->value);
   15e54:	4620      	mov	r0, r4
   15e56:	461a      	mov	r2, r3
}
   15e58:	bc10      	pop	{r4}
        ret = cosem_setSecuritySetup((gxSecuritySetup*)e->target, e->index, &e->value);
   15e5a:	f001 bd98 	b.w	1798e <cosem_setSecuritySetup>
        ret = cosem_setIecHdlcSetup((gxIecHdlcSetup*)e->target, e->index, &e->value);
   15e5e:	4620      	mov	r0, r4
   15e60:	461a      	mov	r2, r3
}
   15e62:	bc10      	pop	{r4}
        ret = cosem_setIecHdlcSetup((gxIecHdlcSetup*)e->target, e->index, &e->value);
   15e64:	f001 bec8 	b.w	17bf8 <cosem_setIecHdlcSetup>
        ret = cosem_setIecLocalPortSetup((gxLocalPortSetup*)e->target, e->index, &e->value);
   15e68:	4620      	mov	r0, r4
   15e6a:	461a      	mov	r2, r3
}
   15e6c:	bc10      	pop	{r4}
        ret = cosem_setIecLocalPortSetup((gxLocalPortSetup*)e->target, e->index, &e->value);
   15e6e:	f001 befa 	b.w	17c66 <cosem_setIecLocalPortSetup>
        ret = cosem_setIecTwistedPairSetup((gxIecTwistedPairSetup*)e->target, e->index, &e->value);
   15e72:	4620      	mov	r0, r4
   15e74:	461a      	mov	r2, r3
}
   15e76:	bc10      	pop	{r4}
        ret = cosem_setIecTwistedPairSetup((gxIecTwistedPairSetup*)e->target, e->index, &e->value);
   15e78:	f001 bf3a 	b.w	17cf0 <cosem_setIecTwistedPairSetup>
        ret = cosem_setIP4Setup(settings, (gxIp4Setup*)e->target, e->index, &e->value);
   15e7c:	460a      	mov	r2, r1
   15e7e:	4621      	mov	r1, r4
}
   15e80:	bc10      	pop	{r4}
        ret = cosem_setIP4Setup(settings, (gxIp4Setup*)e->target, e->index, &e->value);
   15e82:	f001 bf87 	b.w	17d94 <cosem_setIP4Setup>
        ret = cosem_setMbusSlavePortSetup((gxMbusSlavePortSetup*)e->target, e->index, &e->value);
   15e86:	4620      	mov	r0, r4
   15e88:	461a      	mov	r2, r3
}
   15e8a:	bc10      	pop	{r4}
        ret = cosem_setMbusSlavePortSetup((gxMbusSlavePortSetup*)e->target, e->index, &e->value);
   15e8c:	f002 b86c 	b.w	17f68 <cosem_setMbusSlavePortSetup>
        ret = cosem_setImageTransfer((gxImageTransfer*)e->target, e->index, &e->value);
   15e90:	4620      	mov	r0, r4
   15e92:	461a      	mov	r2, r3
}
   15e94:	bc10      	pop	{r4}
        ret = cosem_setImageTransfer((gxImageTransfer*)e->target, e->index, &e->value);
   15e96:	f003 befd 	b.w	19c94 <cosem_setImageTransfer>
        ret = cosem_setDisconnectControl((gxDisconnectControl*)e->target, e->index, &e->value);
   15e9a:	4620      	mov	r0, r4
   15e9c:	461a      	mov	r2, r3
}
   15e9e:	bc10      	pop	{r4}
        ret = cosem_setDisconnectControl((gxDisconnectControl*)e->target, e->index, &e->value);
   15ea0:	f002 b881 	b.w	17fa6 <cosem_setDisconnectControl>
        ret = cosem_setLimiter(settings, (gxLimiter*)e->target, e->index, &e->value);
   15ea4:	460a      	mov	r2, r1
   15ea6:	4621      	mov	r1, r4
}
   15ea8:	bc10      	pop	{r4}
        ret = cosem_setLimiter(settings, (gxLimiter*)e->target, e->index, &e->value);
   15eaa:	f002 b894 	b.w	17fd6 <cosem_setLimiter>
        ret = cosem_setmMbusClient(settings, (gxMBusClient*)e->target, e->index, &e->value);
   15eae:	460a      	mov	r2, r1
   15eb0:	4621      	mov	r1, r4
}
   15eb2:	bc10      	pop	{r4}
        ret = cosem_setmMbusClient(settings, (gxMBusClient*)e->target, e->index, &e->value);
   15eb4:	f002 ba17 	b.w	182e6 <cosem_setmMbusClient>
        ret = cosem_setModemConfiguration((gxModemConfiguration*)e->target, e->index, &e->value);
   15eb8:	4620      	mov	r0, r4
   15eba:	461a      	mov	r2, r3
}
   15ebc:	bc10      	pop	{r4}
        ret = cosem_setModemConfiguration((gxModemConfiguration*)e->target, e->index, &e->value);
   15ebe:	f002 baef 	b.w	184a0 <cosem_setModemConfiguration>
        ret = cosem_setPppSetup(settings, (gxPppSetup*)e->target, e->index, &e->value);
   15ec2:	460a      	mov	r2, r1
   15ec4:	4621      	mov	r1, r4
}
   15ec6:	bc10      	pop	{r4}
        ret = cosem_setPppSetup(settings, (gxPppSetup*)e->target, e->index, &e->value);
   15ec8:	f002 bb88 	b.w	185dc <cosem_setPppSetup>
        ret = cosem_setProfileGeneric(settings, (gxProfileGeneric*)e->target, e->index, &e->value);
   15ecc:	460a      	mov	r2, r1
   15ece:	4621      	mov	r1, r4
}
   15ed0:	bc10      	pop	{r4}
        ret = cosem_setProfileGeneric(settings, (gxProfileGeneric*)e->target, e->index, &e->value);
   15ed2:	f7ee b8e9 	b.w	40a8 <cosem_setProfileGeneric>
}
   15ed6:	bc10      	pop	{r4}
        ret = cosem_setRegisterActivation(settings, e);
   15ed8:	4619      	mov	r1, r3
   15eda:	f002 bc93 	b.w	18804 <cosem_setRegisterActivation>
        ret = cosem_setRegisterMonitor(settings, (gxRegisterMonitor*)e->target, e->index, &e->value);
   15ede:	460a      	mov	r2, r1
   15ee0:	4621      	mov	r1, r4
}
   15ee2:	bc10      	pop	{r4}
        ret = cosem_setRegisterMonitor(settings, (gxRegisterMonitor*)e->target, e->index, &e->value);
   15ee4:	f002 bd60 	b.w	189a8 <cosem_setRegisterMonitor>
        ret = cosem_setRegistertable((gxRegisterTable*)e->target, e->index, &e->value);
   15ee8:	4620      	mov	r0, r4
   15eea:	461a      	mov	r2, r3
}
   15eec:	bc10      	pop	{r4}
        ret = cosem_setRegistertable((gxRegisterTable*)e->target, e->index, &e->value);
   15eee:	f000 b8df 	b.w	160b0 <cosem_setRegistertable>
        ret = cosem_setSapAssignment((gxSapAssignment*)e->target, e->index, &e->value);
   15ef2:	4620      	mov	r0, r4
   15ef4:	461a      	mov	r2, r3
}
   15ef6:	bc10      	pop	{r4}
        ret = cosem_setSapAssignment((gxSapAssignment*)e->target, e->index, &e->value);
   15ef8:	f002 bea9 	b.w	18c4e <cosem_setSapAssignment>
        ret = cosem_setSchedule(settings, (gxSchedule*)e->target, e->index, &e->value);
   15efc:	460a      	mov	r2, r1
   15efe:	4621      	mov	r1, r4
}
   15f00:	bc10      	pop	{r4}
        ret = cosem_setSchedule(settings, (gxSchedule*)e->target, e->index, &e->value);
   15f02:	f002 befb 	b.w	18cfc <cosem_setSchedule>
        ret = cosem_setScriptTable(settings, (gxScriptTable*)e->target, e->index, &e->value);
   15f06:	460a      	mov	r2, r1
   15f08:	4621      	mov	r1, r4
}
   15f0a:	bc10      	pop	{r4}
        ret = cosem_setScriptTable(settings, (gxScriptTable*)e->target, e->index, &e->value);
   15f0c:	f003 b811 	b.w	18f32 <cosem_setScriptTable>
        ret = cosem_setSpecialDaysTable((gxSpecialDaysTable*)e->target, e->index, &e->value);
   15f10:	4620      	mov	r0, r4
   15f12:	461a      	mov	r2, r3
}
   15f14:	bc10      	pop	{r4}
        ret = cosem_setSpecialDaysTable((gxSpecialDaysTable*)e->target, e->index, &e->value);
   15f16:	f003 b97b 	b.w	19210 <cosem_setSpecialDaysTable>
        ret = cosem_setTcpUdpSetup(settings, (gxTcpUdpSetup*)e->target, e->index, &e->value);
   15f1a:	460a      	mov	r2, r1
   15f1c:	4621      	mov	r1, r4
}
   15f1e:	bc10      	pop	{r4}
        ret = cosem_setTcpUdpSetup(settings, (gxTcpUdpSetup*)e->target, e->index, &e->value);
   15f20:	f003 b9df 	b.w	192e2 <cosem_setTcpUdpSetup>
        ret = cosem_setUtilityTables((gxUtilityTables*)e->target, e->index, &e->value);
   15f24:	4620      	mov	r0, r4
   15f26:	461a      	mov	r2, r3
}
   15f28:	bc10      	pop	{r4}
        ret = cosem_setUtilityTables((gxUtilityTables*)e->target, e->index, &e->value);
   15f2a:	f001 bffc 	b.w	17f26 <cosem_setUtilityTables>
        ret = cosem_setMbusMasterPortSetup((gxMBusMasterPortSetup*)e->target, e->index, &e->value);
   15f2e:	4620      	mov	r0, r4
   15f30:	461a      	mov	r2, r3
}
   15f32:	bc10      	pop	{r4}
        ret = cosem_setMbusMasterPortSetup((gxMBusMasterPortSetup*)e->target, e->index, &e->value);
   15f34:	f003 ba0b 	b.w	1934e <cosem_setMbusMasterPortSetup>
        ret = cosem_setPushSetup(settings, (gxPushSetup*)e->target, e->index, &e->value);
   15f38:	460a      	mov	r2, r1
   15f3a:	4621      	mov	r1, r4
}
   15f3c:	bc10      	pop	{r4}
        ret = cosem_setPushSetup(settings, (gxPushSetup*)e->target, e->index, &e->value);
   15f3e:	f003 ba13 	b.w	19368 <cosem_setPushSetup>
        ret = cosem_setAccount((gxAccount*)e->target, e->index, &e->value);
   15f42:	4620      	mov	r0, r4
   15f44:	461a      	mov	r2, r3
}
   15f46:	bc10      	pop	{r4}
        ret = cosem_setAccount((gxAccount*)e->target, e->index, &e->value);
   15f48:	f003 bcd5 	b.w	198f6 <cosem_setAccount>
        ret = cosem_setCredit((gxCredit*)e->target, e->index, &e->value);
   15f4c:	4620      	mov	r0, r4
   15f4e:	461a      	mov	r2, r3
}
   15f50:	bc10      	pop	{r4}
        ret = cosem_setCredit((gxCredit*)e->target, e->index, &e->value);
   15f52:	f003 bc70 	b.w	19836 <cosem_setCredit>
        ret = cosem_setCharge(settings, (gxCharge*)e->target, e->index, &e->value);
   15f56:	460a      	mov	r2, r1
   15f58:	4621      	mov	r1, r4
}
   15f5a:	bc10      	pop	{r4}
        ret = cosem_setCharge(settings, (gxCharge*)e->target, e->index, &e->value);
   15f5c:	f003 bbed 	b.w	1973a <cosem_setCharge>
        ret = cosem_setTokenGateway((gxTokenGateway*)e->target, e->index, &e->value);
   15f60:	4620      	mov	r0, r4
   15f62:	461a      	mov	r2, r3
}
   15f64:	bc10      	pop	{r4}
        ret = cosem_setTokenGateway((gxTokenGateway*)e->target, e->index, &e->value);
   15f66:	f004 b90f 	b.w	1a188 <cosem_setTokenGateway>
        ret = cosem_setGsmDiagnostic((gxGsmDiagnostic*)e->target, e->index, &e->value);
   15f6a:	4620      	mov	r0, r4
   15f6c:	461a      	mov	r2, r3
}
   15f6e:	bc10      	pop	{r4}
        ret = cosem_setGsmDiagnostic((gxGsmDiagnostic*)e->target, e->index, &e->value);
   15f70:	f003 bfd3 	b.w	19f1a <cosem_setGsmDiagnostic>
        ret = cosem_setCompactData(settings, (gxCompactData*)e->target, e->index, &e->value);
   15f74:	460a      	mov	r2, r1
   15f76:	4621      	mov	r1, r4
}
   15f78:	bc10      	pop	{r4}
        ret = cosem_setCompactData(settings, (gxCompactData*)e->target, e->index, &e->value);
   15f7a:	f004 baf4 	b.w	1a566 <cosem_setCompactData>
        ret = cosem_setParameterMonitor(settings, (gxParameterMonitor*)e->target, e->index, &e->value);
   15f7e:	460a      	mov	r2, r1
   15f80:	4621      	mov	r1, r4
}
   15f82:	bc10      	pop	{r4}
        ret = cosem_setParameterMonitor(settings, (gxParameterMonitor*)e->target, e->index, &e->value);
   15f84:	f004 bb28 	b.w	1a5d8 <cosem_setParameterMonitor>
        ret = cosem_setLlcSscsSetup(settings, (gxLlcSscsSetup*)e->target, e->index, &e->value);
   15f88:	460a      	mov	r2, r1
   15f8a:	4621      	mov	r1, r4
}
   15f8c:	bc10      	pop	{r4}
        ret = cosem_setLlcSscsSetup(settings, (gxLlcSscsSetup*)e->target, e->index, &e->value);
   15f8e:	f004 bc24 	b.w	1a7da <cosem_setLlcSscsSetup>
        ret = cosem_setPrimeNbOfdmPlcPhysicalLayerCounters(settings, (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target, e->index, &e->value);
   15f92:	460a      	mov	r2, r1
   15f94:	4621      	mov	r1, r4
}
   15f96:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcPhysicalLayerCounters(settings, (gxPrimeNbOfdmPlcPhysicalLayerCounters*)e->target, e->index, &e->value);
   15f98:	f004 bc32 	b.w	1a800 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters>
        ret = cosem_setPrimeNbOfdmPlcMacSetup(settings, (gxPrimeNbOfdmPlcMacSetup*)e->target, e->index, &e->value);
   15f9c:	460a      	mov	r2, r1
   15f9e:	4621      	mov	r1, r4
}
   15fa0:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacSetup(settings, (gxPrimeNbOfdmPlcMacSetup*)e->target, e->index, &e->value);
   15fa2:	f004 bc4b 	b.w	1a83c <cosem_setPrimeNbOfdmPlcMacSetup>
        ret = cosem_setPrimeNbOfdmPlcMacFunctionalParameters(settings, (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target, e->index, &e->value);
   15fa6:	460a      	mov	r2, r1
   15fa8:	4621      	mov	r1, r4
}
   15faa:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacFunctionalParameters(settings, (gxPrimeNbOfdmPlcMacFunctionalParameters*)e->target, e->index, &e->value);
   15fac:	f004 bc72 	b.w	1a894 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters>
        ret = cosem_setPrimeNbOfdmPlcMacCounters(settings, (gxPrimeNbOfdmPlcMacCounters*)e->target, e->index, &e->value);
   15fb0:	460a      	mov	r2, r1
   15fb2:	4621      	mov	r1, r4
}
   15fb4:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacCounters(settings, (gxPrimeNbOfdmPlcMacCounters*)e->target, e->index, &e->value);
   15fb6:	f004 bcc6 	b.w	1a946 <cosem_setPrimeNbOfdmPlcMacCounters>
        ret = cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData(settings, (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target, e->index, &e->value);
   15fba:	460a      	mov	r2, r1
   15fbc:	4621      	mov	r1, r4
}
   15fbe:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData(settings, (gxPrimeNbOfdmPlcMacNetworkAdministrationData*)e->target, e->index, &e->value);
   15fc0:	f004 bed2 	b.w	1ad68 <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData>
        ret = cosem_setPrimeNbOfdmPlcApplicationsIdentification(settings, (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target, e->index, &e->value);
   15fc4:	460a      	mov	r2, r1
   15fc6:	4621      	mov	r1, r4
}
   15fc8:	bc10      	pop	{r4}
        ret = cosem_setPrimeNbOfdmPlcApplicationsIdentification(settings, (gxPrimeNbOfdmPlcApplicationsIdentification*)e->target, e->index, &e->value);
   15fca:	f004 bee4 	b.w	1ad96 <cosem_setPrimeNbOfdmPlcApplicationsIdentification>
        ret = cosem_setArbitrator(settings, (gxArbitrator*)e->target, e->index, &e->value);
   15fce:	460a      	mov	r2, r1
   15fd0:	4621      	mov	r1, r4
}
   15fd2:	bc10      	pop	{r4}
        ret = cosem_setArbitrator(settings, (gxArbitrator*)e->target, e->index, &e->value);
   15fd4:	f004 bf05 	b.w	1ade2 <cosem_setArbitrator>
        ret = cosem_setIec8802LlcType1Setup(settings, (gxIec8802LlcType1Setup*)e->target, e->index, &e->value);
   15fd8:	460a      	mov	r2, r1
   15fda:	4621      	mov	r1, r4
}
   15fdc:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType1Setup(settings, (gxIec8802LlcType1Setup*)e->target, e->index, &e->value);
   15fde:	f004 bfea 	b.w	1afb6 <cosem_setIec8802LlcType1Setup>
        ret = cosem_setIec8802LlcType2Setup(settings, (gxIec8802LlcType2Setup*)e->target, e->index, &e->value);
   15fe2:	460a      	mov	r2, r1
   15fe4:	4621      	mov	r1, r4
}
   15fe6:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType2Setup(settings, (gxIec8802LlcType2Setup*)e->target, e->index, &e->value);
   15fe8:	f004 bff2 	b.w	1afd0 <cosem_setIec8802LlcType2Setup>
        ret = cosem_setIec8802LlcType3Setup(settings, (gxIec8802LlcType3Setup*)e->target, e->index, &e->value);
   15fec:	460a      	mov	r2, r1
   15fee:	4621      	mov	r1, r4
}
   15ff0:	bc10      	pop	{r4}
        ret = cosem_setIec8802LlcType3Setup(settings, (gxIec8802LlcType3Setup*)e->target, e->index, &e->value);
   15ff2:	f005 b81d 	b.w	1b030 <cosem_setIec8802LlcType3Setup>
        ret = cosem_setSFSKActiveInitiator(settings, (gxSFSKActiveInitiator*)e->target, e->index, &e->value);
   15ff6:	460a      	mov	r2, r1
   15ff8:	4621      	mov	r1, r4
}
   15ffa:	bc10      	pop	{r4}
        ret = cosem_setSFSKActiveInitiator(settings, (gxSFSKActiveInitiator*)e->target, e->index, &e->value);
   15ffc:	f005 b83b 	b.w	1b076 <cosem_setSFSKActiveInitiator>
        ret = cosem_setFSKMacCounters(settings, (gxFSKMacCounters*)e->target, e->index, &e->value);
   16000:	460a      	mov	r2, r1
   16002:	4621      	mov	r1, r4
}
   16004:	bc10      	pop	{r4}
        ret = cosem_setFSKMacCounters(settings, (gxFSKMacCounters*)e->target, e->index, &e->value);
   16006:	f005 b87c 	b.w	1b102 <cosem_setFSKMacCounters>
        ret = cosem_setSFSKMacSynchronizationTimeouts(settings, (gxSFSKMacSynchronizationTimeouts*)e->target, e->index, &e->value);
   1600a:	460a      	mov	r2, r1
   1600c:	4621      	mov	r1, r4
}
   1600e:	bc10      	pop	{r4}
        ret = cosem_setSFSKMacSynchronizationTimeouts(settings, (gxSFSKMacSynchronizationTimeouts*)e->target, e->index, &e->value);
   16010:	f005 b963 	b.w	1b2da <cosem_setSFSKMacSynchronizationTimeouts>
        ret = cosem_setSFSKPhyMacSetUp(settings, (gxSFSKPhyMacSetUp*)e->target, e->index, &e->value);
   16014:	460a      	mov	r2, r1
   16016:	4621      	mov	r1, r4
}
   16018:	bc10      	pop	{r4}
        ret = cosem_setSFSKPhyMacSetUp(settings, (gxSFSKPhyMacSetUp*)e->target, e->index, &e->value);
   1601a:	f005 b97c 	b.w	1b316 <cosem_setSFSKPhyMacSetUp>
        ret = cosem_setSFSKReportingSystemList(settings, (gxSFSKReportingSystemList*)e->target, e->index, &e->value);
   1601e:	460a      	mov	r2, r1
   16020:	4621      	mov	r1, r4
}
   16022:	bc10      	pop	{r4}
        ret = cosem_setSFSKReportingSystemList(settings, (gxSFSKReportingSystemList*)e->target, e->index, &e->value);
   16024:	f005 ba0c 	b.w	1b440 <cosem_setSFSKReportingSystemList>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16028:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   1602c:	bc10      	pop	{r4}
   1602e:	4770      	bx	lr
    int ret = DLMS_ERROR_CODE_OK;
   16030:	2000      	movs	r0, #0
   16032:	e7fb      	b.n	1602c <cosem_setValue+0x376>

00016034 <cosem_setData>:
    if (e->index == 2)
   16034:	7e03      	ldrb	r3, [r0, #24]
   16036:	2b02      	cmp	r3, #2
{
   16038:	4601      	mov	r1, r0
    if (e->index == 2)
   1603a:	d103      	bne.n	16044 <cosem_setData+0x10>
        ret = var_copy(&((gxData*)e->target)->value, &e->value);
   1603c:	6940      	ldr	r0, [r0, #20]
   1603e:	3010      	adds	r0, #16
   16040:	f7ee bab4 	b.w	45ac <var_copy>
}
   16044:	f44f 7081 	mov.w	r0, #258	; 0x102
   16048:	4770      	bx	lr

0001604a <cosem_setRegister>:
    if (index == 2)
   1604a:	2902      	cmp	r1, #2
{
   1604c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1604e:	4605      	mov	r5, r0
   16050:	4616      	mov	r6, r2
    if (index == 2)
   16052:	d107      	bne.n	16064 <cosem_setRegister+0x1a>
        ret = var_copy(&object->value, value);
   16054:	4611      	mov	r1, r2
   16056:	3010      	adds	r0, #16
   16058:	f7ee faa8 	bl	45ac <var_copy>
   1605c:	4604      	mov	r4, r0
}
   1605e:	4620      	mov	r0, r4
   16060:	b002      	add	sp, #8
   16062:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   16064:	2903      	cmp	r1, #3
   16066:	d120      	bne.n	160aa <cosem_setRegister+0x60>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   16068:	7813      	ldrb	r3, [r2, #0]
   1606a:	2b02      	cmp	r3, #2
   1606c:	d11d      	bne.n	160aa <cosem_setRegister+0x60>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1606e:	68b0      	ldr	r0, [r6, #8]
   16070:	aa01      	add	r2, sp, #4
   16072:	2100      	movs	r1, #0
   16074:	f005 fffd 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16078:	4604      	mov	r4, r0
   1607a:	2800      	cmp	r0, #0
   1607c:	d1ef      	bne.n	1605e <cosem_setRegister+0x14>
        object->scaler = (char)var_toInteger(tmp);
   1607e:	9801      	ldr	r0, [sp, #4]
   16080:	f006 f971 	bl	1c366 <var_toInteger>
   16084:	f885 0020 	strb.w	r0, [r5, #32]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16088:	68b0      	ldr	r0, [r6, #8]
   1608a:	aa01      	add	r2, sp, #4
   1608c:	2101      	movs	r1, #1
   1608e:	f005 fff0 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16092:	4604      	mov	r4, r0
   16094:	2800      	cmp	r0, #0
   16096:	d1e2      	bne.n	1605e <cosem_setRegister+0x14>
        object->unit = (unsigned char)var_toInteger(tmp);
   16098:	9801      	ldr	r0, [sp, #4]
   1609a:	f006 f964 	bl	1c366 <var_toInteger>
        object->unitRead = 1;
   1609e:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   160a0:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
        object->unitRead = 1;
   160a4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   160a8:	e7d9      	b.n	1605e <cosem_setRegister+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   160aa:	f44f 7481 	mov.w	r4, #258	; 0x102
   160ae:	e7d6      	b.n	1605e <cosem_setRegister+0x14>

000160b0 <cosem_setRegistertable>:
    if (index == 2)
   160b0:	2902      	cmp	r1, #2
{
   160b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   160b6:	4605      	mov	r5, r0
   160b8:	4616      	mov	r6, r2
    if (index == 2)
   160ba:	d127      	bne.n	1610c <cosem_setRegistertable+0x5c>
        if (value->Arr != NULL)
   160bc:	6893      	ldr	r3, [r2, #8]
   160be:	bb13      	cbnz	r3, 16106 <cosem_setRegistertable+0x56>
    int pos, ret = 0;
   160c0:	2400      	movs	r4, #0
}
   160c2:	4620      	mov	r0, r4
   160c4:	b002      	add	sp, #8
   160c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   160ca:	aa01      	add	r2, sp, #4
   160cc:	4639      	mov	r1, r7
   160ce:	f005 ffd0 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   160d2:	4604      	mov	r4, r0
   160d4:	2800      	cmp	r0, #0
   160d6:	d1f4      	bne.n	160c2 <cosem_setRegistertable+0x12>
                tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   160d8:	2010      	movs	r0, #16
   160da:	f7f7 f90b 	bl	d2f4 <malloc>
   160de:	4680      	mov	r8, r0
                var_init(tmp2);
   160e0:	f005 fded 	bl	1bcbe <var_init>
                ret = var_copy(tmp2, tmp);
   160e4:	9901      	ldr	r1, [sp, #4]
   160e6:	4640      	mov	r0, r8
   160e8:	f7ee fa60 	bl	45ac <var_copy>
                if (ret != 0)
   160ec:	4604      	mov	r4, r0
   160ee:	2800      	cmp	r0, #0
   160f0:	d1e7      	bne.n	160c2 <cosem_setRegistertable+0x12>
                va_push(&object->tableCellValues, tmp2);
   160f2:	4641      	mov	r1, r8
   160f4:	4628      	mov	r0, r5
   160f6:	f005 fef0 	bl	1beda <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   160fa:	3701      	adds	r7, #1
   160fc:	68b0      	ldr	r0, [r6, #8]
   160fe:	88c3      	ldrh	r3, [r0, #6]
   16100:	42bb      	cmp	r3, r7
   16102:	d1e2      	bne.n	160ca <cosem_setRegistertable+0x1a>
   16104:	e7dc      	b.n	160c0 <cosem_setRegistertable+0x10>
   16106:	2700      	movs	r7, #0
                va_push(&object->tableCellValues, tmp2);
   16108:	3510      	adds	r5, #16
   1610a:	e7f7      	b.n	160fc <cosem_setRegistertable+0x4c>
    else if (index == 4)
   1610c:	2904      	cmp	r1, #4
   1610e:	d120      	bne.n	16152 <cosem_setRegistertable+0xa2>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   16110:	7813      	ldrb	r3, [r2, #0]
   16112:	2b02      	cmp	r3, #2
   16114:	d11d      	bne.n	16152 <cosem_setRegistertable+0xa2>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16116:	68b0      	ldr	r0, [r6, #8]
   16118:	aa01      	add	r2, sp, #4
   1611a:	2100      	movs	r1, #0
   1611c:	f005 ffa9 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16120:	4604      	mov	r4, r0
   16122:	2800      	cmp	r0, #0
   16124:	d1cd      	bne.n	160c2 <cosem_setRegistertable+0x12>
        object->scaler = (char)var_toInteger(tmp);
   16126:	9801      	ldr	r0, [sp, #4]
   16128:	f006 f91d 	bl	1c366 <var_toInteger>
   1612c:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16130:	68b0      	ldr	r0, [r6, #8]
   16132:	aa01      	add	r2, sp, #4
   16134:	2101      	movs	r1, #1
   16136:	f005 ff9c 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1613a:	4604      	mov	r4, r0
   1613c:	2800      	cmp	r0, #0
   1613e:	d1c0      	bne.n	160c2 <cosem_setRegistertable+0x12>
        object->unit = (unsigned char)var_toInteger(tmp);
   16140:	9801      	ldr	r0, [sp, #4]
   16142:	f006 f910 	bl	1c366 <var_toInteger>
        object->unitRead = 1;
   16146:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   16148:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        object->unitRead = 1;
   1614c:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
   16150:	e7b7      	b.n	160c2 <cosem_setRegistertable+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16152:	f44f 7481 	mov.w	r4, #258	; 0x102
   16156:	e7b4      	b.n	160c2 <cosem_setRegistertable+0x12>

00016158 <cosem_setClock>:
{
   16158:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (index == 2)
   1615a:	2a02      	cmp	r2, #2
{
   1615c:	b085      	sub	sp, #20
   1615e:	4606      	mov	r6, r0
   16160:	460d      	mov	r5, r1
   16162:	461c      	mov	r4, r3
    if (index == 2)
   16164:	d129      	bne.n	161ba <cosem_setClock+0x62>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   16166:	781b      	ldrb	r3, [r3, #0]
   16168:	2b09      	cmp	r3, #9
   1616a:	d121      	bne.n	161b0 <cosem_setClock+0x58>
   1616c:	68a3      	ldr	r3, [r4, #8]
   1616e:	b1fb      	cbz	r3, 161b0 <cosem_setClock+0x58>
            var_init(&tmp);
   16170:	4668      	mov	r0, sp
   16172:	f005 fda4 	bl	1bcbe <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   16176:	4620      	mov	r0, r4
   16178:	466a      	mov	r2, sp
   1617a:	2119      	movs	r1, #25
   1617c:	f7fb f9aa 	bl	114d4 <dlms_changeType2>
            if (ret != 0)
   16180:	4604      	mov	r4, r0
   16182:	b990      	cbnz	r0, 161aa <cosem_setClock+0x52>
            time_copy(&object->time, tmp.dateTime);
   16184:	f105 0734 	add.w	r7, r5, #52	; 0x34
   16188:	9902      	ldr	r1, [sp, #8]
   1618a:	4638      	mov	r0, r7
   1618c:	f7f9 f9ef 	bl	f56e <time_copy>
            if (settings->server)
   16190:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   16194:	b133      	cbz	r3, 161a4 <cosem_setClock+0x4c>
                time_toUTC(&object->time);
   16196:	4638      	mov	r0, r7
   16198:	f7f9 fa31 	bl	f5fe <time_toUTC>
                clock_updateDST(object, &object->time);
   1619c:	4639      	mov	r1, r7
   1619e:	4628      	mov	r0, r5
   161a0:	f7ff fd6a 	bl	15c78 <clock_updateDST>
            var_clear(&tmp);
   161a4:	4668      	mov	r0, sp
   161a6:	f005 fee6 	bl	1bf76 <var_clear>
}
   161aa:	4620      	mov	r0, r4
   161ac:	b005      	add	sp, #20
   161ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
            time_clear(&object->time);
   161b0:	f105 0034 	add.w	r0, r5, #52	; 0x34
            time_clear(&object->end);
   161b4:	f7f9 f9aa 	bl	f50c <time_clear>
   161b8:	e005      	b.n	161c6 <cosem_setClock+0x6e>
    else if (index == 3)
   161ba:	2a03      	cmp	r2, #3
   161bc:	d105      	bne.n	161ca <cosem_setClock+0x72>
        object->timeZone = (short)var_toInteger(value);
   161be:	4618      	mov	r0, r3
   161c0:	f006 f8d1 	bl	1c366 <var_toInteger>
   161c4:	8628      	strh	r0, [r5, #48]	; 0x30
    int ret = DLMS_ERROR_CODE_OK;
   161c6:	2400      	movs	r4, #0
   161c8:	e7ef      	b.n	161aa <cosem_setClock+0x52>
    else if (index == 4)
   161ca:	2a04      	cmp	r2, #4
   161cc:	d105      	bne.n	161da <cosem_setClock+0x82>
        object->status = (DLMS_CLOCK_STATUS)var_toInteger(value);
   161ce:	4618      	mov	r0, r3
   161d0:	f006 f8c9 	bl	1c366 <var_toInteger>
   161d4:	f885 0020 	strb.w	r0, [r5, #32]
   161d8:	e7f5      	b.n	161c6 <cosem_setClock+0x6e>
    else if (index == 5)
   161da:	2a05      	cmp	r2, #5
   161dc:	d118      	bne.n	16210 <cosem_setClock+0xb8>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   161de:	781b      	ldrb	r3, [r3, #0]
   161e0:	2b09      	cmp	r3, #9
   161e2:	d112      	bne.n	1620a <cosem_setClock+0xb2>
   161e4:	68a3      	ldr	r3, [r4, #8]
   161e6:	b183      	cbz	r3, 1620a <cosem_setClock+0xb2>
            var_init(&tmp);
   161e8:	4668      	mov	r0, sp
   161ea:	f005 fd68 	bl	1bcbe <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   161ee:	4620      	mov	r0, r4
   161f0:	466a      	mov	r2, sp
   161f2:	2119      	movs	r1, #25
   161f4:	f7fb f96e 	bl	114d4 <dlms_changeType2>
            if (ret != 0)
   161f8:	4604      	mov	r4, r0
   161fa:	2800      	cmp	r0, #0
   161fc:	d1d5      	bne.n	161aa <cosem_setClock+0x52>
            time_copy(&object->begin, tmp.dateTime);
   161fe:	9902      	ldr	r1, [sp, #8]
   16200:	f105 0024 	add.w	r0, r5, #36	; 0x24
   16204:	f7f9 f9b3 	bl	f56e <time_copy>
   16208:	e7cc      	b.n	161a4 <cosem_setClock+0x4c>
            time_clear(&object->begin);
   1620a:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1620e:	e7d1      	b.n	161b4 <cosem_setClock+0x5c>
    else if (index == 6)
   16210:	2a06      	cmp	r2, #6
   16212:	d116      	bne.n	16242 <cosem_setClock+0xea>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   16214:	781b      	ldrb	r3, [r3, #0]
   16216:	2b09      	cmp	r3, #9
   16218:	d110      	bne.n	1623c <cosem_setClock+0xe4>
   1621a:	68a3      	ldr	r3, [r4, #8]
   1621c:	b173      	cbz	r3, 1623c <cosem_setClock+0xe4>
            var_init(&tmp);
   1621e:	4668      	mov	r0, sp
   16220:	f005 fd4d 	bl	1bcbe <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp);
   16224:	4620      	mov	r0, r4
   16226:	466a      	mov	r2, sp
   16228:	2119      	movs	r1, #25
   1622a:	f7fb f953 	bl	114d4 <dlms_changeType2>
            if (ret != 0)
   1622e:	4604      	mov	r4, r0
   16230:	2800      	cmp	r0, #0
   16232:	d1ba      	bne.n	161aa <cosem_setClock+0x52>
            time_copy(&object->end, tmp.dateTime);
   16234:	9902      	ldr	r1, [sp, #8]
   16236:	f105 0014 	add.w	r0, r5, #20
   1623a:	e7e3      	b.n	16204 <cosem_setClock+0xac>
            time_clear(&object->end);
   1623c:	f105 0014 	add.w	r0, r5, #20
   16240:	e7b8      	b.n	161b4 <cosem_setClock+0x5c>
    else if (index == 7)
   16242:	2a07      	cmp	r2, #7
   16244:	d10d      	bne.n	16262 <cosem_setClock+0x10a>
        object->deviation = (char)var_toInteger(value);
   16246:	4618      	mov	r0, r3
   16248:	f006 f88d 	bl	1c366 <var_toInteger>
   1624c:	7468      	strb	r0, [r5, #17]
        if (settings->server)
   1624e:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   16252:	2b00      	cmp	r3, #0
   16254:	d0b7      	beq.n	161c6 <cosem_setClock+0x6e>
            clock_updateDST(object, &object->time);
   16256:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1625a:	4628      	mov	r0, r5
   1625c:	f7ff fd0c 	bl	15c78 <clock_updateDST>
   16260:	e7b1      	b.n	161c6 <cosem_setClock+0x6e>
    else if (index == 8)
   16262:	2a08      	cmp	r2, #8
   16264:	d104      	bne.n	16270 <cosem_setClock+0x118>
        object->enabled = (unsigned char)var_toInteger(value);
   16266:	4618      	mov	r0, r3
   16268:	f006 f87d 	bl	1c366 <var_toInteger>
   1626c:	74a8      	strb	r0, [r5, #18]
        if (settings->server)
   1626e:	e7ee      	b.n	1624e <cosem_setClock+0xf6>
    else if (index == 9)
   16270:	2a09      	cmp	r2, #9
   16272:	d104      	bne.n	1627e <cosem_setClock+0x126>
        object->clockBase = (DLMS_CLOCK_BASE)var_toInteger(value);
   16274:	4618      	mov	r0, r3
   16276:	f006 f876 	bl	1c366 <var_toInteger>
   1627a:	7428      	strb	r0, [r5, #16]
   1627c:	e7a3      	b.n	161c6 <cosem_setClock+0x6e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1627e:	f44f 7481 	mov.w	r4, #258	; 0x102
   16282:	e792      	b.n	161aa <cosem_setClock+0x52>

00016284 <updateSeasonProfile>:
{
   16284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16288:	b086      	sub	sp, #24
   1628a:	460f      	mov	r7, r1
   1628c:	4680      	mov	r8, r0
    obj_clearSeasonProfile(profile);
   1628e:	f7fe ffe3 	bl	15258 <obj_clearSeasonProfile>
    var_init(&tm);
   16292:	a802      	add	r0, sp, #8
   16294:	f005 fd13 	bl	1bcbe <var_init>
    for (pos = 0; pos != data->Arr->size; ++pos)
   16298:	2600      	movs	r6, #0
   1629a:	68bb      	ldr	r3, [r7, #8]
   1629c:	88db      	ldrh	r3, [r3, #6]
   1629e:	42b3      	cmp	r3, r6
   162a0:	d104      	bne.n	162ac <updateSeasonProfile+0x28>
   162a2:	2400      	movs	r4, #0
}
   162a4:	4620      	mov	r0, r4
   162a6:	b006      	add	sp, #24
   162a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sp = (gxSeasonProfile*)gxmalloc(sizeof(gxSeasonProfile));
   162ac:	2024      	movs	r0, #36	; 0x24
   162ae:	f7f7 f821 	bl	d2f4 <malloc>
        if (sp == NULL)
   162b2:	4605      	mov	r5, r0
   162b4:	2800      	cmp	r0, #0
   162b6:	d055      	beq.n	16364 <updateSeasonProfile+0xe0>
        ret = va_getByIndex(data->Arr, pos, &it);
   162b8:	68b8      	ldr	r0, [r7, #8]
   162ba:	aa01      	add	r2, sp, #4
   162bc:	4631      	mov	r1, r6
   162be:	f005 fed8 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   162c2:	4604      	mov	r4, r0
   162c4:	2800      	cmp	r0, #0
   162c6:	d150      	bne.n	1636a <updateSeasonProfile+0xe6>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   162c8:	9b01      	ldr	r3, [sp, #4]
   162ca:	4601      	mov	r1, r0
   162cc:	466a      	mov	r2, sp
   162ce:	6898      	ldr	r0, [r3, #8]
   162d0:	f005 fecf 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   162d4:	4604      	mov	r4, r0
   162d6:	2800      	cmp	r0, #0
   162d8:	d147      	bne.n	1636a <updateSeasonProfile+0xe6>
        BYTE_BUFFER_INIT(&sp->name);
   162da:	4628      	mov	r0, r5
   162dc:	f7f8 f82e 	bl	e33c <bb_init>
        bb_set2(&sp->name, tmp->byteArr, 0, bb_size(tmp->byteArr));
   162e0:	9b00      	ldr	r3, [sp, #0]
   162e2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   162e6:	4648      	mov	r0, r9
   162e8:	f7f8 f825 	bl	e336 <bb_size>
   162ec:	4622      	mov	r2, r4
   162ee:	4603      	mov	r3, r0
   162f0:	4649      	mov	r1, r9
   162f2:	4628      	mov	r0, r5
   162f4:	f7f8 f9a0 	bl	e638 <bb_set2>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   162f8:	9b01      	ldr	r3, [sp, #4]
   162fa:	466a      	mov	r2, sp
   162fc:	6898      	ldr	r0, [r3, #8]
   162fe:	2101      	movs	r1, #1
   16300:	f005 feb7 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16304:	4604      	mov	r4, r0
   16306:	bb80      	cbnz	r0, 1636a <updateSeasonProfile+0xe6>
        ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &tm);
   16308:	9800      	ldr	r0, [sp, #0]
   1630a:	aa02      	add	r2, sp, #8
   1630c:	2119      	movs	r1, #25
   1630e:	f7fb f8e1 	bl	114d4 <dlms_changeType2>
        if (ret != DLMS_ERROR_CODE_OK)
   16312:	4604      	mov	r4, r0
   16314:	bb48      	cbnz	r0, 1636a <updateSeasonProfile+0xe6>
        time_copy(&sp->start, tm.dateTime);
   16316:	9904      	ldr	r1, [sp, #16]
   16318:	f105 000c 	add.w	r0, r5, #12
   1631c:	f7f9 f927 	bl	f56e <time_copy>
        var_clear(&tm);
   16320:	a802      	add	r0, sp, #8
   16322:	f005 fe28 	bl	1bf76 <var_clear>
        ret = va_getByIndex(it->Arr, 2, &tmp);
   16326:	9b01      	ldr	r3, [sp, #4]
   16328:	466a      	mov	r2, sp
   1632a:	6898      	ldr	r0, [r3, #8]
   1632c:	2102      	movs	r1, #2
   1632e:	f005 fea0 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16332:	4604      	mov	r4, r0
   16334:	b9c8      	cbnz	r0, 1636a <updateSeasonProfile+0xe6>
        BYTE_BUFFER_INIT(&sp->weekName);
   16336:	f105 0918 	add.w	r9, r5, #24
   1633a:	4648      	mov	r0, r9
   1633c:	f7f7 fffe 	bl	e33c <bb_init>
        bb_set2(&sp->weekName, tmp->byteArr, 0, bb_size(tmp->byteArr));
   16340:	9b00      	ldr	r3, [sp, #0]
   16342:	f8d3 a008 	ldr.w	sl, [r3, #8]
   16346:	4650      	mov	r0, sl
   16348:	f7f7 fff5 	bl	e336 <bb_size>
   1634c:	4622      	mov	r2, r4
   1634e:	4603      	mov	r3, r0
   16350:	4651      	mov	r1, sl
   16352:	4648      	mov	r0, r9
   16354:	f7f8 f970 	bl	e638 <bb_set2>
        arr_push(profile, sp);
   16358:	4629      	mov	r1, r5
   1635a:	4640      	mov	r0, r8
   1635c:	f7fb fbe0 	bl	11b20 <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   16360:	3601      	adds	r6, #1
   16362:	e79a      	b.n	1629a <updateSeasonProfile+0x16>
            return DLMS_ERROR_CODE_OUTOFMEMORY;
   16364:	f44f 7482 	mov.w	r4, #260	; 0x104
   16368:	e79c      	b.n	162a4 <updateSeasonProfile+0x20>
        gxfree(sp);
   1636a:	4628      	mov	r0, r5
   1636c:	f7f6 ffca 	bl	d304 <free>
   16370:	e798      	b.n	162a4 <updateSeasonProfile+0x20>

00016372 <updateWeekProfileTable>:
{
   16372:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   16376:	4680      	mov	r8, r0
   16378:	460f      	mov	r7, r1
    obj_clearWeekProfileTable(profile);
   1637a:	f7fe ff8b 	bl	15294 <obj_clearWeekProfileTable>
    for (pos = 0; pos != data->Arr->size; ++pos)
   1637e:	2600      	movs	r6, #0
   16380:	68bb      	ldr	r3, [r7, #8]
   16382:	88db      	ldrh	r3, [r3, #6]
   16384:	42b3      	cmp	r3, r6
   16386:	d104      	bne.n	16392 <updateWeekProfileTable+0x20>
   16388:	2400      	movs	r4, #0
}
   1638a:	4620      	mov	r0, r4
   1638c:	b003      	add	sp, #12
   1638e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        wp = (gxWeekProfile*)gxmalloc(sizeof(gxWeekProfile));
   16392:	2014      	movs	r0, #20
   16394:	f7f6 ffae 	bl	d2f4 <malloc>
        if (wp == NULL)
   16398:	4605      	mov	r5, r0
   1639a:	2800      	cmp	r0, #0
   1639c:	d07c      	beq.n	16498 <updateWeekProfileTable+0x126>
        ret = va_getByIndex(data->Arr, pos, &it);
   1639e:	68b8      	ldr	r0, [r7, #8]
   163a0:	aa01      	add	r2, sp, #4
   163a2:	4631      	mov	r1, r6
   163a4:	f005 fe65 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   163a8:	4604      	mov	r4, r0
   163aa:	2800      	cmp	r0, #0
   163ac:	d177      	bne.n	1649e <updateWeekProfileTable+0x12c>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   163ae:	9b01      	ldr	r3, [sp, #4]
   163b0:	4601      	mov	r1, r0
   163b2:	466a      	mov	r2, sp
   163b4:	6898      	ldr	r0, [r3, #8]
   163b6:	f005 fe5c 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   163ba:	4604      	mov	r4, r0
   163bc:	2800      	cmp	r0, #0
   163be:	d16e      	bne.n	1649e <updateWeekProfileTable+0x12c>
        BYTE_BUFFER_INIT(&wp->name);
   163c0:	4628      	mov	r0, r5
   163c2:	f7f7 ffbb 	bl	e33c <bb_init>
        bb_set2(&wp->name, tmp->byteArr, 0, bb_size(tmp->byteArr));
   163c6:	9b00      	ldr	r3, [sp, #0]
   163c8:	f8d3 9008 	ldr.w	r9, [r3, #8]
   163cc:	4648      	mov	r0, r9
   163ce:	f7f7 ffb2 	bl	e336 <bb_size>
   163d2:	4622      	mov	r2, r4
   163d4:	4603      	mov	r3, r0
   163d6:	4649      	mov	r1, r9
   163d8:	4628      	mov	r0, r5
   163da:	f7f8 f92d 	bl	e638 <bb_set2>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   163de:	9b01      	ldr	r3, [sp, #4]
   163e0:	466a      	mov	r2, sp
   163e2:	6898      	ldr	r0, [r3, #8]
   163e4:	2101      	movs	r1, #1
   163e6:	f005 fe44 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   163ea:	4604      	mov	r4, r0
   163ec:	2800      	cmp	r0, #0
   163ee:	d156      	bne.n	1649e <updateWeekProfileTable+0x12c>
        wp->monday = (unsigned char)var_toInteger(tmp);
   163f0:	9800      	ldr	r0, [sp, #0]
   163f2:	f005 ffb8 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(it->Arr, 2, &tmp);
   163f6:	9b01      	ldr	r3, [sp, #4]
        wp->monday = (unsigned char)var_toInteger(tmp);
   163f8:	7328      	strb	r0, [r5, #12]
        ret = va_getByIndex(it->Arr, 2, &tmp);
   163fa:	6898      	ldr	r0, [r3, #8]
   163fc:	466a      	mov	r2, sp
   163fe:	2102      	movs	r1, #2
   16400:	f005 fe37 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16404:	4604      	mov	r4, r0
   16406:	2800      	cmp	r0, #0
   16408:	d149      	bne.n	1649e <updateWeekProfileTable+0x12c>
        wp->tuesday = (unsigned char)var_toInteger(tmp);
   1640a:	9800      	ldr	r0, [sp, #0]
   1640c:	f005 ffab 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(it->Arr, 3, &tmp);
   16410:	9b01      	ldr	r3, [sp, #4]
        wp->tuesday = (unsigned char)var_toInteger(tmp);
   16412:	7368      	strb	r0, [r5, #13]
        ret = va_getByIndex(it->Arr, 3, &tmp);
   16414:	6898      	ldr	r0, [r3, #8]
   16416:	466a      	mov	r2, sp
   16418:	2103      	movs	r1, #3
   1641a:	f005 fe2a 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1641e:	4604      	mov	r4, r0
   16420:	2800      	cmp	r0, #0
   16422:	d13c      	bne.n	1649e <updateWeekProfileTable+0x12c>
        wp->wednesday = (unsigned char)var_toInteger(tmp);
   16424:	9800      	ldr	r0, [sp, #0]
   16426:	f005 ff9e 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(it->Arr, 4, &tmp);
   1642a:	9b01      	ldr	r3, [sp, #4]
        wp->wednesday = (unsigned char)var_toInteger(tmp);
   1642c:	73a8      	strb	r0, [r5, #14]
        ret = va_getByIndex(it->Arr, 4, &tmp);
   1642e:	6898      	ldr	r0, [r3, #8]
   16430:	466a      	mov	r2, sp
   16432:	2104      	movs	r1, #4
   16434:	f005 fe1d 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16438:	4604      	mov	r4, r0
   1643a:	bb80      	cbnz	r0, 1649e <updateWeekProfileTable+0x12c>
        wp->thursday = (unsigned char)var_toInteger(tmp);
   1643c:	9800      	ldr	r0, [sp, #0]
   1643e:	f005 ff92 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(it->Arr, 5, &tmp);
   16442:	9b01      	ldr	r3, [sp, #4]
        wp->thursday = (unsigned char)var_toInteger(tmp);
   16444:	73e8      	strb	r0, [r5, #15]
        ret = va_getByIndex(it->Arr, 5, &tmp);
   16446:	6898      	ldr	r0, [r3, #8]
   16448:	466a      	mov	r2, sp
   1644a:	2105      	movs	r1, #5
   1644c:	f005 fe11 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16450:	4604      	mov	r4, r0
   16452:	bb20      	cbnz	r0, 1649e <updateWeekProfileTable+0x12c>
        wp->friday = (unsigned char)var_toInteger(tmp);
   16454:	9800      	ldr	r0, [sp, #0]
   16456:	f005 ff86 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(it->Arr, 6, &tmp);
   1645a:	9b01      	ldr	r3, [sp, #4]
        wp->friday = (unsigned char)var_toInteger(tmp);
   1645c:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(it->Arr, 6, &tmp);
   1645e:	6898      	ldr	r0, [r3, #8]
   16460:	466a      	mov	r2, sp
   16462:	2106      	movs	r1, #6
   16464:	f005 fe05 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16468:	4604      	mov	r4, r0
   1646a:	b9c0      	cbnz	r0, 1649e <updateWeekProfileTable+0x12c>
        wp->saturday = (unsigned char)var_toInteger(tmp);
   1646c:	9800      	ldr	r0, [sp, #0]
   1646e:	f005 ff7a 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(it->Arr, 7, &tmp);
   16472:	9b01      	ldr	r3, [sp, #4]
        wp->saturday = (unsigned char)var_toInteger(tmp);
   16474:	7468      	strb	r0, [r5, #17]
        ret = va_getByIndex(it->Arr, 7, &tmp);
   16476:	6898      	ldr	r0, [r3, #8]
   16478:	466a      	mov	r2, sp
   1647a:	2107      	movs	r1, #7
   1647c:	f005 fdf9 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16480:	4604      	mov	r4, r0
   16482:	b960      	cbnz	r0, 1649e <updateWeekProfileTable+0x12c>
        wp->sunday = (unsigned char)var_toInteger(tmp);
   16484:	9800      	ldr	r0, [sp, #0]
   16486:	f005 ff6e 	bl	1c366 <var_toInteger>
        arr_push(profile, wp);
   1648a:	4629      	mov	r1, r5
        wp->sunday = (unsigned char)var_toInteger(tmp);
   1648c:	74a8      	strb	r0, [r5, #18]
        arr_push(profile, wp);
   1648e:	4640      	mov	r0, r8
   16490:	f7fb fb46 	bl	11b20 <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   16494:	3601      	adds	r6, #1
   16496:	e773      	b.n	16380 <updateWeekProfileTable+0xe>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   16498:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   1649c:	e775      	b.n	1638a <updateWeekProfileTable+0x18>
        gxfree(wp);
   1649e:	4628      	mov	r0, r5
   164a0:	f7f6 ff30 	bl	d304 <free>
   164a4:	e771      	b.n	1638a <updateWeekProfileTable+0x18>

000164a6 <updateDayProfileTable>:
{
   164a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164aa:	4680      	mov	r8, r0
   164ac:	b08b      	sub	sp, #44	; 0x2c
    obj_clearDayProfileTable(profile);
   164ae:	4608      	mov	r0, r1
{
   164b0:	460f      	mov	r7, r1
   164b2:	4691      	mov	r9, r2
    obj_clearDayProfileTable(profile);
   164b4:	f7fe ff08 	bl	152c8 <obj_clearDayProfileTable>
    gxDayProfileAction* ac = NULL;
   164b8:	2400      	movs	r4, #0
    for (pos = 0; pos != data->Arr->size; ++pos)
   164ba:	4626      	mov	r6, r4
   164bc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   164c0:	88db      	ldrh	r3, [r3, #6]
   164c2:	42b3      	cmp	r3, r6
   164c4:	d101      	bne.n	164ca <updateDayProfileTable+0x24>
   164c6:	2100      	movs	r1, #0
   164c8:	e099      	b.n	165fe <updateDayProfileTable+0x158>
        dp = (gxDayProfile*)gxmalloc(sizeof(gxDayProfile));
   164ca:	2010      	movs	r0, #16
   164cc:	f7f6 ff12 	bl	d2f4 <malloc>
        if (dp == NULL)
   164d0:	4605      	mov	r5, r0
   164d2:	2800      	cmp	r0, #0
   164d4:	f000 80a2 	beq.w	1661c <updateDayProfileTable+0x176>
        arr_init(&dp->daySchedules);
   164d8:	f100 0b04 	add.w	fp, r0, #4
   164dc:	4658      	mov	r0, fp
   164de:	f7fb faf0 	bl	11ac2 <arr_init>
        ret = va_getByIndex(data->Arr, pos, &it);
   164e2:	4631      	mov	r1, r6
   164e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   164e8:	aa04      	add	r2, sp, #16
   164ea:	f005 fdc2 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   164ee:	4601      	mov	r1, r0
   164f0:	2800      	cmp	r0, #0
   164f2:	d168      	bne.n	165c6 <updateDayProfileTable+0x120>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   164f4:	9b04      	ldr	r3, [sp, #16]
   164f6:	aa02      	add	r2, sp, #8
   164f8:	6898      	ldr	r0, [r3, #8]
   164fa:	f005 fdba 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   164fe:	4601      	mov	r1, r0
   16500:	2800      	cmp	r0, #0
   16502:	d160      	bne.n	165c6 <updateDayProfileTable+0x120>
        dp->dayId = (unsigned char)var_toInteger(tmp);
   16504:	9802      	ldr	r0, [sp, #8]
   16506:	f005 ff2e 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(it->Arr, 1, &tmp);
   1650a:	9b04      	ldr	r3, [sp, #16]
        dp->dayId = (unsigned char)var_toInteger(tmp);
   1650c:	7028      	strb	r0, [r5, #0]
        ret = va_getByIndex(it->Arr, 1, &tmp);
   1650e:	2101      	movs	r1, #1
   16510:	6898      	ldr	r0, [r3, #8]
   16512:	aa02      	add	r2, sp, #8
   16514:	f005 fdad 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16518:	4601      	mov	r1, r0
   1651a:	2800      	cmp	r0, #0
   1651c:	d153      	bne.n	165c6 <updateDayProfileTable+0x120>
        for (pos2 = 0; pos2 != tmp->Arr->size; ++pos2)
   1651e:	4682      	mov	sl, r0
   16520:	9b02      	ldr	r3, [sp, #8]
   16522:	689b      	ldr	r3, [r3, #8]
   16524:	88db      	ldrh	r3, [r3, #6]
   16526:	4553      	cmp	r3, sl
   16528:	d105      	bne.n	16536 <updateDayProfileTable+0x90>
        arr_push(profile, dp);
   1652a:	4629      	mov	r1, r5
   1652c:	4638      	mov	r0, r7
   1652e:	f7fb faf7 	bl	11b20 <arr_push>
    for (pos = 0; pos != data->Arr->size; ++pos)
   16532:	3601      	adds	r6, #1
   16534:	e7c2      	b.n	164bc <updateDayProfileTable+0x16>
            ac = (gxDayProfileAction*)gxmalloc(sizeof(gxDayProfileAction));
   16536:	2014      	movs	r0, #20
   16538:	f7f6 fedc 	bl	d2f4 <malloc>
            if (ac == NULL)
   1653c:	4604      	mov	r4, r0
   1653e:	2800      	cmp	r0, #0
   16540:	d076      	beq.n	16630 <updateDayProfileTable+0x18a>
            ret = va_getByIndex(tmp->Arr, pos2, &it2);
   16542:	9b02      	ldr	r3, [sp, #8]
   16544:	4651      	mov	r1, sl
   16546:	6898      	ldr	r0, [r3, #8]
   16548:	aa05      	add	r2, sp, #20
   1654a:	f005 fd92 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1654e:	4601      	mov	r1, r0
   16550:	2800      	cmp	r0, #0
   16552:	d138      	bne.n	165c6 <updateDayProfileTable+0x120>
            ret = va_getByIndex(it2->Arr, 0, &tmp2);
   16554:	9b05      	ldr	r3, [sp, #20]
   16556:	aa03      	add	r2, sp, #12
   16558:	6898      	ldr	r0, [r3, #8]
   1655a:	f005 fd8a 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1655e:	4601      	mov	r1, r0
   16560:	2800      	cmp	r0, #0
   16562:	d130      	bne.n	165c6 <updateDayProfileTable+0x120>
            var_init(&tm);
   16564:	a806      	add	r0, sp, #24
   16566:	f005 fbaa 	bl	1bcbe <var_init>
            ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_TIME, &tm);
   1656a:	211b      	movs	r1, #27
   1656c:	9803      	ldr	r0, [sp, #12]
   1656e:	aa06      	add	r2, sp, #24
   16570:	f7fa ffb0 	bl	114d4 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   16574:	4601      	mov	r1, r0
   16576:	bb30      	cbnz	r0, 165c6 <updateDayProfileTable+0x120>
            time_copy(&ac->startTime, tm.dateTime);
   16578:	9908      	ldr	r1, [sp, #32]
   1657a:	4620      	mov	r0, r4
   1657c:	f7f8 fff7 	bl	f56e <time_copy>
            var_clear(&tm);
   16580:	a806      	add	r0, sp, #24
   16582:	f005 fcf8 	bl	1bf76 <var_clear>
            ret = va_getByIndex(it2->Arr, 1, &tmp2);
   16586:	9b05      	ldr	r3, [sp, #20]
   16588:	2101      	movs	r1, #1
   1658a:	6898      	ldr	r0, [r3, #8]
   1658c:	aa03      	add	r2, sp, #12
   1658e:	f005 fd70 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16592:	4601      	mov	r1, r0
   16594:	b9b8      	cbnz	r0, 165c6 <updateDayProfileTable+0x120>
            if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp2->byteArr->data, &ac->script)) != 0)
   16596:	9a03      	ldr	r2, [sp, #12]
   16598:	6892      	ldr	r2, [r2, #8]
   1659a:	f104 030c 	add.w	r3, r4, #12
   1659e:	2109      	movs	r1, #9
   165a0:	6812      	ldr	r2, [r2, #0]
   165a2:	9301      	str	r3, [sp, #4]
   165a4:	f108 0098 	add.w	r0, r8, #152	; 0x98
   165a8:	f005 fb20 	bl	1bbec <oa_findByLN>
   165ac:	4601      	mov	r1, r0
   165ae:	b950      	cbnz	r0, 165c6 <updateDayProfileTable+0x120>
            if (ac->script == NULL)
   165b0:	68e2      	ldr	r2, [r4, #12]
   165b2:	9b01      	ldr	r3, [sp, #4]
   165b4:	b16a      	cbz	r2, 165d2 <updateDayProfileTable+0x12c>
            ret = va_getByIndex(it2->Arr, 2, &tmp2);
   165b6:	9b05      	ldr	r3, [sp, #20]
   165b8:	2102      	movs	r1, #2
   165ba:	6898      	ldr	r0, [r3, #8]
   165bc:	aa03      	add	r2, sp, #12
   165be:	f005 fd58 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   165c2:	4601      	mov	r1, r0
   165c4:	b1f8      	cbz	r0, 16606 <updateDayProfileTable+0x160>
            gxfree(dp);
   165c6:	4628      	mov	r0, r5
   165c8:	9101      	str	r1, [sp, #4]
   165ca:	f7f6 fe9b 	bl	d304 <free>
   165ce:	9901      	ldr	r1, [sp, #4]
   165d0:	e026      	b.n	16620 <updateDayProfileTable+0x17a>
                if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, &ac->script)) != 0)
   165d2:	4619      	mov	r1, r3
   165d4:	2009      	movs	r0, #9
   165d6:	f7eb fd9b 	bl	2110 <cosem_createObject>
   165da:	4601      	mov	r1, r0
   165dc:	b978      	cbnz	r0, 165fe <updateDayProfileTable+0x158>
                memcpy(ac->script->logicalName, tmp2->byteArr->data, tmp2->byteArr->size);
   165de:	9b03      	ldr	r3, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   165e0:	68e0      	ldr	r0, [r4, #12]
   165e2:	689b      	ldr	r3, [r3, #8]
   165e4:	3006      	adds	r0, #6
   165e6:	6819      	ldr	r1, [r3, #0]
   165e8:	88da      	ldrh	r2, [r3, #6]
   165ea:	f007 fe0a 	bl	1e202 <memcpy>
                ret = oa_push(&settings->releasedObjects, ac->script);
   165ee:	68e1      	ldr	r1, [r4, #12]
   165f0:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   165f4:	f005 fa6b 	bl	1bace <oa_push>
                if (ret != DLMS_ERROR_CODE_OK)
   165f8:	4601      	mov	r1, r0
   165fa:	2800      	cmp	r0, #0
   165fc:	d0db      	beq.n	165b6 <updateDayProfileTable+0x110>
}
   165fe:	4608      	mov	r0, r1
   16600:	b00b      	add	sp, #44	; 0x2c
   16602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ac->scriptSelector = (uint16_t)var_toInteger(tmp2);
   16606:	9803      	ldr	r0, [sp, #12]
   16608:	f005 fead 	bl	1c366 <var_toInteger>
            arr_push(&dp->daySchedules, ac);
   1660c:	4621      	mov	r1, r4
            ac->scriptSelector = (uint16_t)var_toInteger(tmp2);
   1660e:	8220      	strh	r0, [r4, #16]
            arr_push(&dp->daySchedules, ac);
   16610:	4658      	mov	r0, fp
   16612:	f7fb fa85 	bl	11b20 <arr_push>
        for (pos2 = 0; pos2 != tmp->Arr->size; ++pos2)
   16616:	f10a 0a01 	add.w	sl, sl, #1
   1661a:	e781      	b.n	16520 <updateDayProfileTable+0x7a>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1661c:	f44f 7182 	mov.w	r1, #260	; 0x104
        if (ac)
   16620:	2c00      	cmp	r4, #0
   16622:	d0ec      	beq.n	165fe <updateDayProfileTable+0x158>
            gxfree(ac);
   16624:	4620      	mov	r0, r4
   16626:	9101      	str	r1, [sp, #4]
   16628:	f7f6 fe6c 	bl	d304 <free>
   1662c:	9901      	ldr	r1, [sp, #4]
   1662e:	e7e6      	b.n	165fe <updateDayProfileTable+0x158>
                return DLMS_ERROR_CODE_OUTOFMEMORY;
   16630:	f44f 7182 	mov.w	r1, #260	; 0x104
   16634:	e7e3      	b.n	165fe <updateDayProfileTable+0x158>

00016636 <cosem_setActivityCalendar>:
{
   16636:	b530      	push	{r4, r5, lr}
    if (index == 2)
   16638:	2a02      	cmp	r2, #2
{
   1663a:	b085      	sub	sp, #20
   1663c:	460d      	mov	r5, r1
   1663e:	461c      	mov	r4, r3
    if (index == 2)
   16640:	d10e      	bne.n	16660 <cosem_setActivityCalendar+0x2a>
        bb_clear(&object->calendarNameActive);
   16642:	3510      	adds	r5, #16
        bb_clear(&object->calendarNamePassive);
   16644:	4628      	mov	r0, r5
   16646:	f7f8 f83c 	bl	e6c2 <bb_clear>
        ret = bb_set2(&object->calendarNamePassive, value->byteArr, 0, bb_size(value->byteArr));
   1664a:	68a4      	ldr	r4, [r4, #8]
   1664c:	4620      	mov	r0, r4
   1664e:	f7f7 fe72 	bl	e336 <bb_size>
   16652:	2200      	movs	r2, #0
   16654:	4603      	mov	r3, r0
   16656:	4621      	mov	r1, r4
   16658:	4628      	mov	r0, r5
   1665a:	f7f7 ffed 	bl	e638 <bb_set2>
   1665e:	e006      	b.n	1666e <cosem_setActivityCalendar+0x38>
    else if (index == 3)
   16660:	2a03      	cmp	r2, #3
   16662:	d108      	bne.n	16676 <cosem_setActivityCalendar+0x40>
        ret = updateSeasonProfile(&object->seasonProfileActive, value);
   16664:	4619      	mov	r1, r3
   16666:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1666a:	f7ff fe0b 	bl	16284 <updateSeasonProfile>
   1666e:	4604      	mov	r4, r0
}
   16670:	4620      	mov	r0, r4
   16672:	b005      	add	sp, #20
   16674:	bd30      	pop	{r4, r5, pc}
    else if (index == 4)
   16676:	2a04      	cmp	r2, #4
   16678:	d105      	bne.n	16686 <cosem_setActivityCalendar+0x50>
        ret = updateWeekProfileTable(&object->weekProfileTableActive, value);
   1667a:	4619      	mov	r1, r3
   1667c:	f105 0034 	add.w	r0, r5, #52	; 0x34
        ret = updateWeekProfileTable(&object->weekProfileTablePassive, value);
   16680:	f7ff fe77 	bl	16372 <updateWeekProfileTable>
   16684:	e7f3      	b.n	1666e <cosem_setActivityCalendar+0x38>
    else if (index == 5)
   16686:	2a05      	cmp	r2, #5
   16688:	d104      	bne.n	16694 <cosem_setActivityCalendar+0x5e>
        ret = updateDayProfileTable(settings, &object->dayProfileTableActive, value);
   1668a:	461a      	mov	r2, r3
   1668c:	3140      	adds	r1, #64	; 0x40
        ret = updateDayProfileTable(settings, &object->dayProfileTablePassive, value);
   1668e:	f7ff ff0a 	bl	164a6 <updateDayProfileTable>
   16692:	e7ec      	b.n	1666e <cosem_setActivityCalendar+0x38>
    else if (index == 6)
   16694:	2a06      	cmp	r2, #6
   16696:	d101      	bne.n	1669c <cosem_setActivityCalendar+0x66>
        bb_clear(&object->calendarNamePassive);
   16698:	351c      	adds	r5, #28
   1669a:	e7d3      	b.n	16644 <cosem_setActivityCalendar+0xe>
    else if (index == 7)
   1669c:	2a07      	cmp	r2, #7
   1669e:	d103      	bne.n	166a8 <cosem_setActivityCalendar+0x72>
        ret = updateSeasonProfile(&object->seasonProfilePassive, value);
   166a0:	4619      	mov	r1, r3
   166a2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   166a6:	e7e0      	b.n	1666a <cosem_setActivityCalendar+0x34>
    else if (index == 8)
   166a8:	2a08      	cmp	r2, #8
   166aa:	d103      	bne.n	166b4 <cosem_setActivityCalendar+0x7e>
        ret = updateWeekProfileTable(&object->weekProfileTablePassive, value);
   166ac:	4619      	mov	r1, r3
   166ae:	f105 0064 	add.w	r0, r5, #100	; 0x64
   166b2:	e7e5      	b.n	16680 <cosem_setActivityCalendar+0x4a>
    else if (index == 9)
   166b4:	2a09      	cmp	r2, #9
   166b6:	d102      	bne.n	166be <cosem_setActivityCalendar+0x88>
        ret = updateDayProfileTable(settings, &object->dayProfileTablePassive, value);
   166b8:	461a      	mov	r2, r3
   166ba:	3158      	adds	r1, #88	; 0x58
   166bc:	e7e7      	b.n	1668e <cosem_setActivityCalendar+0x58>
    else if (index == 10)
   166be:	2a0a      	cmp	r2, #10
   166c0:	d11e      	bne.n	16700 <cosem_setActivityCalendar+0xca>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   166c2:	781b      	ldrb	r3, [r3, #0]
   166c4:	2b09      	cmp	r3, #9
   166c6:	d115      	bne.n	166f4 <cosem_setActivityCalendar+0xbe>
   166c8:	68a3      	ldr	r3, [r4, #8]
   166ca:	b19b      	cbz	r3, 166f4 <cosem_setActivityCalendar+0xbe>
            var_init(&tm);
   166cc:	4668      	mov	r0, sp
   166ce:	f005 faf6 	bl	1bcbe <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tm);
   166d2:	4620      	mov	r0, r4
   166d4:	466a      	mov	r2, sp
   166d6:	2119      	movs	r1, #25
   166d8:	f7fa fefc 	bl	114d4 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   166dc:	4604      	mov	r4, r0
   166de:	2800      	cmp	r0, #0
   166e0:	d1c6      	bne.n	16670 <cosem_setActivityCalendar+0x3a>
            time_copy(&object->time, tm.dateTime);
   166e2:	f105 0070 	add.w	r0, r5, #112	; 0x70
   166e6:	9902      	ldr	r1, [sp, #8]
   166e8:	f7f8 ff41 	bl	f56e <time_copy>
            var_clear(&tm);
   166ec:	4668      	mov	r0, sp
   166ee:	f005 fc42 	bl	1bf76 <var_clear>
   166f2:	e7bd      	b.n	16670 <cosem_setActivityCalendar+0x3a>
            time_clear(&object->time);
   166f4:	f105 0070 	add.w	r0, r5, #112	; 0x70
   166f8:	f7f8 ff08 	bl	f50c <time_clear>
    int ret = DLMS_ERROR_CODE_OK;
   166fc:	2400      	movs	r4, #0
   166fe:	e7b7      	b.n	16670 <cosem_setActivityCalendar+0x3a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16700:	f44f 7481 	mov.w	r4, #258	; 0x102
   16704:	e7b4      	b.n	16670 <cosem_setActivityCalendar+0x3a>

00016706 <cosem_setActionSchedule>:
{
   16706:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (index == 2)
   16708:	2a02      	cmp	r2, #2
{
   1670a:	b08b      	sub	sp, #44	; 0x2c
   1670c:	4607      	mov	r7, r0
   1670e:	460d      	mov	r5, r1
   16710:	461e      	mov	r6, r3
    if (index == 2)
   16712:	d132      	bne.n	1677a <cosem_setActionSchedule+0x74>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16714:	6898      	ldr	r0, [r3, #8]
   16716:	466a      	mov	r2, sp
   16718:	2100      	movs	r1, #0
   1671a:	f005 fcaa 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1671e:	4604      	mov	r4, r0
   16720:	bb40      	cbnz	r0, 16774 <cosem_setActionSchedule+0x6e>
            if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&object->executedScript)) != 0)
   16722:	9b00      	ldr	r3, [sp, #0]
   16724:	689a      	ldr	r2, [r3, #8]
   16726:	f105 0410 	add.w	r4, r5, #16
   1672a:	4623      	mov	r3, r4
   1672c:	6812      	ldr	r2, [r2, #0]
   1672e:	2109      	movs	r1, #9
   16730:	f107 0098 	add.w	r0, r7, #152	; 0x98
   16734:	f005 fa5a 	bl	1bbec <oa_findByLN>
            if (object->executedScript == NULL)
   16738:	692b      	ldr	r3, [r5, #16]
   1673a:	b983      	cbnz	r3, 1675e <cosem_setActionSchedule+0x58>
                ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->executedScript);
   1673c:	4621      	mov	r1, r4
   1673e:	2009      	movs	r0, #9
   16740:	f7eb fce6 	bl	2110 <cosem_createObject>
                if (ret == DLMS_ERROR_CODE_OK)
   16744:	b958      	cbnz	r0, 1675e <cosem_setActionSchedule+0x58>
                    ret = cosem_setLogicalName((gxObject*)object->executedScript, tmp->byteArr->data);
   16746:	9b00      	ldr	r3, [sp, #0]
   16748:	6928      	ldr	r0, [r5, #16]
   1674a:	689b      	ldr	r3, [r3, #8]
   1674c:	6819      	ldr	r1, [r3, #0]
   1674e:	f7f8 fbb9 	bl	eec4 <cosem_setLogicalName>
                    if (ret == DLMS_ERROR_CODE_OK)
   16752:	b920      	cbnz	r0, 1675e <cosem_setActionSchedule+0x58>
                        ret = oa_push(&settings->releasedObjects, (gxObject*)object->executedScript);
   16754:	6929      	ldr	r1, [r5, #16]
   16756:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1675a:	f005 f9b8 	bl	1bace <oa_push>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1675e:	68b0      	ldr	r0, [r6, #8]
   16760:	466a      	mov	r2, sp
   16762:	2101      	movs	r1, #1
   16764:	f005 fc85 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16768:	4604      	mov	r4, r0
   1676a:	b918      	cbnz	r0, 16774 <cosem_setActionSchedule+0x6e>
        object->executedScriptSelector = (uint16_t)var_toInteger(tmp);
   1676c:	9800      	ldr	r0, [sp, #0]
   1676e:	f005 fdfa 	bl	1c366 <var_toInteger>
   16772:	82a8      	strh	r0, [r5, #20]
}
   16774:	4620      	mov	r0, r4
   16776:	b00b      	add	sp, #44	; 0x2c
   16778:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (index == 3)
   1677a:	2a03      	cmp	r2, #3
   1677c:	d105      	bne.n	1678a <cosem_setActionSchedule+0x84>
        object->type = (DLMS_SINGLE_ACTION_SCHEDULE_TYPE)var_toInteger(value);
   1677e:	4618      	mov	r0, r3
   16780:	f005 fdf1 	bl	1c366 <var_toInteger>
   16784:	75a8      	strb	r0, [r5, #22]
    int ret = 0, pos;
   16786:	2400      	movs	r4, #0
   16788:	e7f4      	b.n	16774 <cosem_setActionSchedule+0x6e>
    else if (index == 4)
   1678a:	2a04      	cmp	r2, #4
   1678c:	d178      	bne.n	16880 <cosem_setActionSchedule+0x17a>
        arr_clear(&object->executionTime);
   1678e:	3518      	adds	r5, #24
   16790:	4628      	mov	r0, r5
   16792:	f7fb f9da 	bl	11b4a <arr_clear>
        var_init(&time);
   16796:	a802      	add	r0, sp, #8
   16798:	f005 fa91 	bl	1bcbe <var_init>
        var_init(&date);
   1679c:	a806      	add	r0, sp, #24
   1679e:	f005 fa8e 	bl	1bcbe <var_init>
        if (value->Arr != NULL)
   167a2:	68b3      	ldr	r3, [r6, #8]
   167a4:	2b00      	cmp	r3, #0
   167a6:	d0ee      	beq.n	16786 <cosem_setActionSchedule+0x80>
            arr_capacity(&object->executionTime, value->Arr->size);
   167a8:	88d9      	ldrh	r1, [r3, #6]
   167aa:	4628      	mov	r0, r5
   167ac:	f7fb f992 	bl	11ad4 <arr_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   167b0:	2700      	movs	r7, #0
   167b2:	68b0      	ldr	r0, [r6, #8]
   167b4:	88c3      	ldrh	r3, [r0, #6]
   167b6:	42bb      	cmp	r3, r7
   167b8:	d0e5      	beq.n	16786 <cosem_setActionSchedule+0x80>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   167ba:	466a      	mov	r2, sp
   167bc:	4639      	mov	r1, r7
   167be:	f005 fc58 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   167c2:	4604      	mov	r4, r0
   167c4:	2800      	cmp	r0, #0
   167c6:	d1d5      	bne.n	16774 <cosem_setActionSchedule+0x6e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   167c8:	9b00      	ldr	r3, [sp, #0]
   167ca:	4601      	mov	r1, r0
   167cc:	aa01      	add	r2, sp, #4
   167ce:	6898      	ldr	r0, [r3, #8]
   167d0:	f005 fc4f 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   167d4:	4604      	mov	r4, r0
   167d6:	2800      	cmp	r0, #0
   167d8:	d1cc      	bne.n	16774 <cosem_setActionSchedule+0x6e>
                ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_TIME, &time);
   167da:	9801      	ldr	r0, [sp, #4]
   167dc:	aa02      	add	r2, sp, #8
   167de:	211b      	movs	r1, #27
   167e0:	f7fa fe78 	bl	114d4 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   167e4:	4604      	mov	r4, r0
   167e6:	2800      	cmp	r0, #0
   167e8:	d1c4      	bne.n	16774 <cosem_setActionSchedule+0x6e>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   167ea:	9b00      	ldr	r3, [sp, #0]
   167ec:	aa01      	add	r2, sp, #4
   167ee:	6898      	ldr	r0, [r3, #8]
   167f0:	2101      	movs	r1, #1
   167f2:	f005 fc3e 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   167f6:	4604      	mov	r4, r0
   167f8:	2800      	cmp	r0, #0
   167fa:	d1bb      	bne.n	16774 <cosem_setActionSchedule+0x6e>
                ret = dlms_changeType2(tmp2, DLMS_DATA_TYPE_DATE, &date);
   167fc:	9801      	ldr	r0, [sp, #4]
   167fe:	aa06      	add	r2, sp, #24
   16800:	211a      	movs	r1, #26
   16802:	f7fa fe67 	bl	114d4 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   16806:	4604      	mov	r4, r0
   16808:	2800      	cmp	r0, #0
   1680a:	d1b3      	bne.n	16774 <cosem_setActionSchedule+0x6e>
                time_addHours(date.dateTime, time_getHours(time.dateTime));
   1680c:	9804      	ldr	r0, [sp, #16]
   1680e:	9c08      	ldr	r4, [sp, #32]
   16810:	f7eb fe36 	bl	2480 <time_getHours>
   16814:	4601      	mov	r1, r0
   16816:	4620      	mov	r0, r4
   16818:	f7f8 fe62 	bl	f4e0 <time_addHours>
                time_addMinutes(date.dateTime, time_getMinutes(time.dateTime));
   1681c:	9804      	ldr	r0, [sp, #16]
   1681e:	9c08      	ldr	r4, [sp, #32]
   16820:	f7f8 fe4a 	bl	f4b8 <time_getMinutes>
   16824:	4601      	mov	r1, r0
   16826:	4620      	mov	r0, r4
   16828:	f7f8 fe61 	bl	f4ee <time_addMinutes>
                time_addSeconds(date.dateTime, time_getSeconds(time.dateTime));
   1682c:	9804      	ldr	r0, [sp, #16]
   1682e:	9c08      	ldr	r4, [sp, #32]
   16830:	f7f8 fe4e 	bl	f4d0 <time_getSeconds>
   16834:	4601      	mov	r1, r0
   16836:	4620      	mov	r0, r4
   16838:	f7f8 fe5f 	bl	f4fa <time_addSeconds>
                date.dateTime->skip = (DATETIME_SKIPS)(date.dateTime->skip & time.dateTime->skip);
   1683c:	9a08      	ldr	r2, [sp, #32]
   1683e:	9b04      	ldr	r3, [sp, #16]
   16840:	88d1      	ldrh	r1, [r2, #6]
   16842:	88db      	ldrh	r3, [r3, #6]
   16844:	400b      	ands	r3, r1
                date.dateTime->skip |= DATETIME_SKIPS_DEVITATION;
   16846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
                date.dateTime->deviation = (short)0x8000;
   1684a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1684e:	8091      	strh	r1, [r2, #4]
                date.dateTime->skip |= DATETIME_SKIPS_DEVITATION;
   16850:	80d3      	strh	r3, [r2, #6]
                tm = (gxtime*)gxmalloc(sizeof(gxtime));
   16852:	200c      	movs	r0, #12
   16854:	f7f6 fd4e 	bl	d2f4 <malloc>
                if (tm == NULL)
   16858:	4604      	mov	r4, r0
   1685a:	b170      	cbz	r0, 1687a <cosem_setActionSchedule+0x174>
                time_copy(tm, date.dateTime);
   1685c:	9908      	ldr	r1, [sp, #32]
   1685e:	f7f8 fe86 	bl	f56e <time_copy>
                arr_push(&object->executionTime, tm);
   16862:	4621      	mov	r1, r4
   16864:	4628      	mov	r0, r5
   16866:	f7fb f95b 	bl	11b20 <arr_push>
                var_clear(&time);
   1686a:	a802      	add	r0, sp, #8
   1686c:	f005 fb83 	bl	1bf76 <var_clear>
                var_clear(&date);
   16870:	a806      	add	r0, sp, #24
   16872:	f005 fb80 	bl	1bf76 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16876:	3701      	adds	r7, #1
   16878:	e79b      	b.n	167b2 <cosem_setActionSchedule+0xac>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1687a:	f44f 7482 	mov.w	r4, #260	; 0x104
   1687e:	e779      	b.n	16774 <cosem_setActionSchedule+0x6e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16880:	f44f 7481 	mov.w	r4, #258	; 0x102
   16884:	e776      	b.n	16774 <cosem_setActionSchedule+0x6e>

00016886 <cosem_updateAttributeAccessModes>:
{
   16886:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (arr->size != 2)
   1688a:	88cb      	ldrh	r3, [r1, #6]
   1688c:	2b02      	cmp	r3, #2
{
   1688e:	4605      	mov	r5, r0
   16890:	460e      	mov	r6, r1
    if (arr->size != 2)
   16892:	f040 80a9 	bne.w	169e8 <cosem_updateAttributeAccessModes+0x162>
    ret = va_getByIndex(arr, 0, &tmp);
   16896:	aa01      	add	r2, sp, #4
   16898:	2100      	movs	r1, #0
   1689a:	4630      	mov	r0, r6
   1689c:	f005 fbe9 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   168a0:	4604      	mov	r4, r0
   168a2:	2800      	cmp	r0, #0
   168a4:	d171      	bne.n	1698a <cosem_updateAttributeAccessModes+0x104>
    if (object->access == NULL || object->access->attributeAccessModes.size == 0)
   168a6:	68eb      	ldr	r3, [r5, #12]
   168a8:	2b00      	cmp	r3, #0
   168aa:	d046      	beq.n	1693a <cosem_updateAttributeAccessModes+0xb4>
   168ac:	88db      	ldrh	r3, [r3, #6]
   168ae:	2b00      	cmp	r3, #0
   168b0:	d048      	beq.n	16944 <cosem_updateAttributeAccessModes+0xbe>
{
   168b2:	2700      	movs	r7, #0
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   168b4:	9b01      	ldr	r3, [sp, #4]
   168b6:	6898      	ldr	r0, [r3, #8]
   168b8:	88c2      	ldrh	r2, [r0, #6]
   168ba:	b2bb      	uxth	r3, r7
   168bc:	429a      	cmp	r2, r3
   168be:	d158      	bne.n	16972 <cosem_updateAttributeAccessModes+0xec>
    ret = va_getByIndex(arr, 1, &tmp);
   168c0:	aa01      	add	r2, sp, #4
   168c2:	2101      	movs	r1, #1
   168c4:	4630      	mov	r0, r6
   168c6:	f005 fbd4 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   168ca:	4604      	mov	r4, r0
   168cc:	2800      	cmp	r0, #0
   168ce:	d15c      	bne.n	1698a <cosem_updateAttributeAccessModes+0x104>
   168d0:	4606      	mov	r6, r0
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   168d2:	9b01      	ldr	r3, [sp, #4]
   168d4:	6898      	ldr	r0, [r3, #8]
   168d6:	88c2      	ldrh	r2, [r0, #6]
   168d8:	b2b3      	uxth	r3, r6
   168da:	429a      	cmp	r2, r3
   168dc:	d055      	beq.n	1698a <cosem_updateAttributeAccessModes+0x104>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   168de:	b2b1      	uxth	r1, r6
   168e0:	aa02      	add	r2, sp, #8
   168e2:	f005 fbc6 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   168e6:	4601      	mov	r1, r0
   168e8:	2800      	cmp	r0, #0
   168ea:	d179      	bne.n	169e0 <cosem_updateAttributeAccessModes+0x15a>
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   168ec:	9b02      	ldr	r3, [sp, #8]
   168ee:	781a      	ldrb	r2, [r3, #0]
   168f0:	2a02      	cmp	r2, #2
   168f2:	d148      	bne.n	16986 <cosem_updateAttributeAccessModes+0x100>
            it->Arr->size != 2)
   168f4:	6898      	ldr	r0, [r3, #8]
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   168f6:	88c3      	ldrh	r3, [r0, #6]
   168f8:	2b02      	cmp	r3, #2
   168fa:	d144      	bne.n	16986 <cosem_updateAttributeAccessModes+0x100>
        ret = va_getByIndex(it->Arr, 0, &value);
   168fc:	aa03      	add	r2, sp, #12
   168fe:	f005 fbb8 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   16902:	2800      	cmp	r0, #0
   16904:	d16e      	bne.n	169e4 <cosem_updateAttributeAccessModes+0x15e>
        id = (unsigned char)var_toInteger(value);
   16906:	9803      	ldr	r0, [sp, #12]
   16908:	f005 fd2d 	bl	1c366 <var_toInteger>
        if (!(id > object->access->methodAccessModes.size))
   1690c:	68eb      	ldr	r3, [r5, #12]
   1690e:	8a5b      	ldrh	r3, [r3, #18]
   16910:	b2c7      	uxtb	r7, r0
   16912:	429f      	cmp	r7, r3
   16914:	d80f      	bhi.n	16936 <cosem_updateAttributeAccessModes+0xb0>
            ret = va_getByIndex(it->Arr, 1, &value);
   16916:	9b02      	ldr	r3, [sp, #8]
   16918:	aa03      	add	r2, sp, #12
   1691a:	6898      	ldr	r0, [r3, #8]
   1691c:	2101      	movs	r1, #1
   1691e:	f005 fba8 	bl	1c072 <va_getByIndex>
            if (ret != 0)
   16922:	2800      	cmp	r0, #0
   16924:	d15e      	bne.n	169e4 <cosem_updateAttributeAccessModes+0x15e>
            object->access->methodAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
   16926:	9803      	ldr	r0, [sp, #12]
   16928:	f005 fd1d 	bl	1c366 <var_toInteger>
   1692c:	68eb      	ldr	r3, [r5, #12]
   1692e:	68db      	ldr	r3, [r3, #12]
   16930:	443b      	add	r3, r7
   16932:	f803 0c01 	strb.w	r0, [r3, #-1]
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   16936:	3601      	adds	r6, #1
   16938:	e7cb      	b.n	168d2 <cosem_updateAttributeAccessModes+0x4c>
            object->access = (gxAccess*)gxcalloc(1, sizeof(gxAccess));
   1693a:	2118      	movs	r1, #24
   1693c:	2001      	movs	r0, #1
   1693e:	f7f6 fcd1 	bl	d2e4 <calloc>
   16942:	60e8      	str	r0, [r5, #12]
        cnt = obj_attributeCount(object);
   16944:	4628      	mov	r0, r5
   16946:	f7ff f8ca 	bl	15ade <obj_attributeCount>
        bb_capacity(&object->access->attributeAccessModes, cnt);
   1694a:	b281      	uxth	r1, r0
   1694c:	68e8      	ldr	r0, [r5, #12]
   1694e:	f7f7 fcfb 	bl	e348 <bb_capacity>
        object->access->attributeAccessModes.size = object->access->attributeAccessModes.capacity;
   16952:	68eb      	ldr	r3, [r5, #12]
   16954:	889a      	ldrh	r2, [r3, #4]
   16956:	80da      	strh	r2, [r3, #6]
        cnt = obj_methodCount(object);
   16958:	4628      	mov	r0, r5
   1695a:	f7ff f934 	bl	15bc6 <obj_methodCount>
        bb_capacity(&object->access->methodAccessModes, cnt);
   1695e:	68eb      	ldr	r3, [r5, #12]
   16960:	b281      	uxth	r1, r0
   16962:	f103 000c 	add.w	r0, r3, #12
   16966:	f7f7 fcef 	bl	e348 <bb_capacity>
        object->access->methodAccessModes.size = object->access->methodAccessModes.capacity;
   1696a:	68eb      	ldr	r3, [r5, #12]
   1696c:	8a1a      	ldrh	r2, [r3, #16]
   1696e:	825a      	strh	r2, [r3, #18]
   16970:	e79f      	b.n	168b2 <cosem_updateAttributeAccessModes+0x2c>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   16972:	aa02      	add	r2, sp, #8
   16974:	b2b9      	uxth	r1, r7
   16976:	f005 fb7c 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   1697a:	4604      	mov	r4, r0
   1697c:	b928      	cbnz	r0, 1698a <cosem_updateAttributeAccessModes+0x104>
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   1697e:	9b02      	ldr	r3, [sp, #8]
   16980:	781a      	ldrb	r2, [r3, #0]
   16982:	2a02      	cmp	r2, #2
   16984:	d005      	beq.n	16992 <cosem_updateAttributeAccessModes+0x10c>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   16986:	f44f 7481 	mov.w	r4, #258	; 0x102
}
   1698a:	4620      	mov	r0, r4
   1698c:	b004      	add	sp, #16
   1698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            it->Arr->size != 3)
   16992:	6898      	ldr	r0, [r3, #8]
        if (it->vt != DLMS_DATA_TYPE_STRUCTURE ||
   16994:	88c3      	ldrh	r3, [r0, #6]
   16996:	2b03      	cmp	r3, #3
   16998:	d1f5      	bne.n	16986 <cosem_updateAttributeAccessModes+0x100>
        ret = va_getByIndex(it->Arr, 0, &value);
   1699a:	4621      	mov	r1, r4
   1699c:	aa03      	add	r2, sp, #12
   1699e:	f005 fb68 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   169a2:	4604      	mov	r4, r0
   169a4:	2800      	cmp	r0, #0
   169a6:	d1f0      	bne.n	1698a <cosem_updateAttributeAccessModes+0x104>
        id = (unsigned char)var_toInteger(value);
   169a8:	9803      	ldr	r0, [sp, #12]
   169aa:	f005 fcdc 	bl	1c366 <var_toInteger>
        if (!(id > object->access->attributeAccessModes.size))
   169ae:	68eb      	ldr	r3, [r5, #12]
   169b0:	88db      	ldrh	r3, [r3, #6]
   169b2:	fa5f f880 	uxtb.w	r8, r0
   169b6:	4598      	cmp	r8, r3
   169b8:	d810      	bhi.n	169dc <cosem_updateAttributeAccessModes+0x156>
            ret = va_getByIndex(it->Arr, 1, &value);
   169ba:	9b02      	ldr	r3, [sp, #8]
   169bc:	aa03      	add	r2, sp, #12
   169be:	6898      	ldr	r0, [r3, #8]
   169c0:	2101      	movs	r1, #1
   169c2:	f005 fb56 	bl	1c072 <va_getByIndex>
            if (ret != 0)
   169c6:	4604      	mov	r4, r0
   169c8:	2800      	cmp	r0, #0
   169ca:	d1de      	bne.n	1698a <cosem_updateAttributeAccessModes+0x104>
            object->access->attributeAccessModes.data[id - 1] = (unsigned char)var_toInteger(value);
   169cc:	9803      	ldr	r0, [sp, #12]
   169ce:	f005 fcca 	bl	1c366 <var_toInteger>
   169d2:	68eb      	ldr	r3, [r5, #12]
   169d4:	681b      	ldr	r3, [r3, #0]
   169d6:	4443      	add	r3, r8
   169d8:	f803 0c01 	strb.w	r0, [r3, #-1]
    for (pos = 0; pos != tmp->Arr->size; ++pos)
   169dc:	3701      	adds	r7, #1
   169de:	e769      	b.n	168b4 <cosem_updateAttributeAccessModes+0x2e>
        ret = va_getByIndex(tmp->Arr, pos, &it);
   169e0:	4604      	mov	r4, r0
   169e2:	e7d2      	b.n	1698a <cosem_updateAttributeAccessModes+0x104>
            ret = va_getByIndex(it->Arr, 1, &value);
   169e4:	4604      	mov	r4, r0
   169e6:	e7d0      	b.n	1698a <cosem_updateAttributeAccessModes+0x104>
        return 0;
   169e8:	2400      	movs	r4, #0
   169ea:	e7ce      	b.n	1698a <cosem_updateAttributeAccessModes+0x104>

000169ec <cosem_setAssociationLogicalName>:
    if (index == 2)
   169ec:	2a02      	cmp	r2, #2
{
   169ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   169f2:	4680      	mov	r8, r0
   169f4:	460d      	mov	r5, r1
   169f6:	4617      	mov	r7, r2
   169f8:	461e      	mov	r6, r3
    if (index == 2)
   169fa:	f040 8082 	bne.w	16b02 <cosem_setAssociationLogicalName+0x116>
        oa_empty(&object->objectList);
   169fe:	3514      	adds	r5, #20
        gxObject* obj = NULL;
   16a00:	2700      	movs	r7, #0
        oa_empty(&object->objectList);
   16a02:	4628      	mov	r0, r5
        gxObject* obj = NULL;
   16a04:	9703      	str	r7, [sp, #12]
        oa_empty(&object->objectList);
   16a06:	f005 f8b9 	bl	1bb7c <oa_empty>
        if (value->Arr != NULL)
   16a0a:	68b4      	ldr	r4, [r6, #8]
   16a0c:	2c00      	cmp	r4, #0
   16a0e:	d176      	bne.n	16afe <cosem_setAssociationLogicalName+0x112>
}
   16a10:	4620      	mov	r0, r4
   16a12:	b004      	add	sp, #16
   16a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    ret = cosem_createObject(type, &obj);
   16a18:	a903      	add	r1, sp, #12
   16a1a:	4648      	mov	r0, r9
   16a1c:	f7eb fb78 	bl	2110 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   16a20:	4604      	mov	r4, r0
   16a22:	2800      	cmp	r0, #0
   16a24:	d057      	beq.n	16ad6 <cosem_setAssociationLogicalName+0xea>
                        if (ret == DLMS_ERROR_CODE_INVALID_PARAMETER)
   16a26:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   16a2a:	d1f1      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
            for (pos = 0; pos != value->Arr->size; ++pos)
   16a2c:	3701      	adds	r7, #1
   16a2e:	68b0      	ldr	r0, [r6, #8]
   16a30:	88c3      	ldrh	r3, [r0, #6]
   16a32:	42bb      	cmp	r3, r7
   16a34:	d0ec      	beq.n	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   16a36:	aa01      	add	r2, sp, #4
   16a38:	4639      	mov	r1, r7
   16a3a:	f005 fb1a 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16a3e:	4604      	mov	r4, r0
   16a40:	2800      	cmp	r0, #0
   16a42:	d1e5      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   16a44:	9b01      	ldr	r3, [sp, #4]
   16a46:	4601      	mov	r1, r0
   16a48:	aa02      	add	r2, sp, #8
   16a4a:	6898      	ldr	r0, [r3, #8]
   16a4c:	f005 fb11 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16a50:	4604      	mov	r4, r0
   16a52:	2800      	cmp	r0, #0
   16a54:	d1dc      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   16a56:	9802      	ldr	r0, [sp, #8]
   16a58:	f005 fc85 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   16a5c:	9b01      	ldr	r3, [sp, #4]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   16a5e:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   16a62:	aa02      	add	r2, sp, #8
   16a64:	6898      	ldr	r0, [r3, #8]
   16a66:	2101      	movs	r1, #1
   16a68:	f005 fb03 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16a6c:	4604      	mov	r4, r0
   16a6e:	2800      	cmp	r0, #0
   16a70:	d1ce      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
                version = (unsigned char) var_toInteger(tmp2);
   16a72:	9802      	ldr	r0, [sp, #8]
   16a74:	f005 fc77 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   16a78:	9b01      	ldr	r3, [sp, #4]
                version = (unsigned char) var_toInteger(tmp2);
   16a7a:	4682      	mov	sl, r0
                ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   16a7c:	aa02      	add	r2, sp, #8
   16a7e:	6898      	ldr	r0, [r3, #8]
   16a80:	2102      	movs	r1, #2
   16a82:	f005 faf6 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16a86:	4604      	mov	r4, r0
   16a88:	2800      	cmp	r0, #0
   16a8a:	d1c1      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = oa_findByLN(&settings->objects, type, tmp2->byteArr->data, &obj);
   16a8c:	9b02      	ldr	r3, [sp, #8]
   16a8e:	689a      	ldr	r2, [r3, #8]
   16a90:	4649      	mov	r1, r9
   16a92:	6812      	ldr	r2, [r2, #0]
   16a94:	ab03      	add	r3, sp, #12
   16a96:	f108 0098 	add.w	r0, r8, #152	; 0x98
   16a9a:	f005 f8a7 	bl	1bbec <oa_findByLN>
                if (ret != DLMS_ERROR_CODE_OK)
   16a9e:	4604      	mov	r4, r0
   16aa0:	2800      	cmp	r0, #0
   16aa2:	d1b5      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
                if (obj == NULL)
   16aa4:	9b03      	ldr	r3, [sp, #12]
   16aa6:	2b00      	cmp	r3, #0
   16aa8:	d0b6      	beq.n	16a18 <cosem_setAssociationLogicalName+0x2c>
                ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   16aaa:	9b01      	ldr	r3, [sp, #4]
   16aac:	aa02      	add	r2, sp, #8
   16aae:	6898      	ldr	r0, [r3, #8]
   16ab0:	2103      	movs	r1, #3
   16ab2:	f005 fade 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16ab6:	4604      	mov	r4, r0
   16ab8:	2800      	cmp	r0, #0
   16aba:	d1a9      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = cosem_updateAttributeAccessModes(obj, tmp2->Arr);
   16abc:	9b02      	ldr	r3, [sp, #8]
   16abe:	9803      	ldr	r0, [sp, #12]
   16ac0:	6899      	ldr	r1, [r3, #8]
   16ac2:	f7ff fee0 	bl	16886 <cosem_updateAttributeAccessModes>
                if (ret != DLMS_ERROR_CODE_OK)
   16ac6:	4604      	mov	r4, r0
   16ac8:	2800      	cmp	r0, #0
   16aca:	d1a1      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
                oa_push(&object->objectList, obj);
   16acc:	9903      	ldr	r1, [sp, #12]
   16ace:	4628      	mov	r0, r5
   16ad0:	f004 fffd 	bl	1bace <oa_push>
   16ad4:	e7aa      	b.n	16a2c <cosem_setAssociationLogicalName+0x40>
                    ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   16ad6:	9b02      	ldr	r3, [sp, #8]
   16ad8:	9803      	ldr	r0, [sp, #12]
   16ada:	689b      	ldr	r3, [r3, #8]
   16adc:	6819      	ldr	r1, [r3, #0]
   16ade:	f7f8 f9f1 	bl	eec4 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   16ae2:	4604      	mov	r4, r0
   16ae4:	2800      	cmp	r0, #0
   16ae6:	d193      	bne.n	16a10 <cosem_setAssociationLogicalName+0x24>
                    obj->version = (unsigned char)version;
   16ae8:	9903      	ldr	r1, [sp, #12]
                    ret = oa_push(&settings->releasedObjects, obj);
   16aea:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
                version = (unsigned char) var_toInteger(tmp2);
   16aee:	f881 a002 	strb.w	sl, [r1, #2]
                    ret = oa_push(&settings->releasedObjects, obj);
   16af2:	f004 ffec 	bl	1bace <oa_push>
                    if (ret != DLMS_ERROR_CODE_OK)
   16af6:	4604      	mov	r4, r0
   16af8:	2800      	cmp	r0, #0
   16afa:	d0d6      	beq.n	16aaa <cosem_setAssociationLogicalName+0xbe>
   16afc:	e788      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
    int ret = 0, pos = 0;
   16afe:	463c      	mov	r4, r7
   16b00:	e795      	b.n	16a2e <cosem_setAssociationLogicalName+0x42>
    else if (index == 3)
   16b02:	2a03      	cmp	r2, #3
   16b04:	d11a      	bne.n	16b3c <cosem_setAssociationLogicalName+0x150>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16b06:	6898      	ldr	r0, [r3, #8]
   16b08:	aa01      	add	r2, sp, #4
   16b0a:	2100      	movs	r1, #0
   16b0c:	f005 fab1 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16b10:	4604      	mov	r4, r0
   16b12:	2800      	cmp	r0, #0
   16b14:	f47f af7c 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
        object->clientSAP = (unsigned char)var_toInteger(tmp);
   16b18:	9801      	ldr	r0, [sp, #4]
   16b1a:	f005 fc24 	bl	1c366 <var_toInteger>
   16b1e:	7728      	strb	r0, [r5, #28]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16b20:	68b0      	ldr	r0, [r6, #8]
   16b22:	aa01      	add	r2, sp, #4
   16b24:	2101      	movs	r1, #1
   16b26:	f005 faa4 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16b2a:	4604      	mov	r4, r0
   16b2c:	2800      	cmp	r0, #0
   16b2e:	f47f af6f 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
        object->serverSAP = (uint16_t)var_toInteger(tmp);
   16b32:	9801      	ldr	r0, [sp, #4]
   16b34:	f005 fc17 	bl	1c366 <var_toInteger>
   16b38:	83e8      	strh	r0, [r5, #30]
   16b3a:	e769      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
    else if (index == 4)
   16b3c:	2a04      	cmp	r2, #4
   16b3e:	f040 812e 	bne.w	16d9e <cosem_setAssociationLogicalName+0x3b2>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   16b42:	f893 8000 	ldrb.w	r8, [r3]
   16b46:	f1b8 0f09 	cmp.w	r8, #9
   16b4a:	f040 80c2 	bne.w	16cd2 <cosem_setAssociationLogicalName+0x2e6>
            if (value->byteArr->data[0] == 0x60)
   16b4e:	6898      	ldr	r0, [r3, #8]
   16b50:	6803      	ldr	r3, [r0, #0]
   16b52:	781b      	ldrb	r3, [r3, #0]
   16b54:	2b60      	cmp	r3, #96	; 0x60
   16b56:	d127      	bne.n	16ba8 <cosem_setAssociationLogicalName+0x1bc>
                object->applicationContextName.jointIsoCtt = 0;
   16b58:	2300      	movs	r3, #0
   16b5a:	84cb      	strh	r3, [r1, #38]	; 0x26
                object->applicationContextName.countryName = 0;
   16b5c:	850b      	strh	r3, [r1, #40]	; 0x28
                ret = bb_getUInt8ByIndex(value->byteArr, 3, &object->applicationContextName.identifiedOrganization);
   16b5e:	f101 022a 	add.w	r2, r1, #42	; 0x2a
   16b62:	2103      	movs	r1, #3
   16b64:	f7f7 fde1 	bl	e72a <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16b68:	4604      	mov	r4, r0
   16b6a:	2800      	cmp	r0, #0
   16b6c:	f47f af50 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 4, &object->applicationContextName.dlmsUA);
   16b70:	68b0      	ldr	r0, [r6, #8]
   16b72:	f105 022b 	add.w	r2, r5, #43	; 0x2b
   16b76:	4639      	mov	r1, r7
   16b78:	f7f7 fdd7 	bl	e72a <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16b7c:	4604      	mov	r4, r0
   16b7e:	2800      	cmp	r0, #0
   16b80:	f47f af46 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 5, &object->applicationContextName.applicationContext);
   16b84:	68b0      	ldr	r0, [r6, #8]
   16b86:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   16b8a:	2105      	movs	r1, #5
   16b8c:	f7f7 fdcd 	bl	e72a <bb_getUInt8ByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   16b90:	4604      	mov	r4, r0
   16b92:	2800      	cmp	r0, #0
   16b94:	f47f af3c 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8ByIndex(value->byteArr, 6, &object->applicationContextName.contextId);
   16b98:	68b0      	ldr	r0, [r6, #8]
   16b9a:	f105 022d 	add.w	r2, r5, #45	; 0x2d
   16b9e:	2106      	movs	r1, #6
   16ba0:	f7f7 fdc3 	bl	e72a <bb_getUInt8ByIndex>
            ret = bb_set2(&object->secret, value->byteArr, 0, bb_size(value->byteArr));
   16ba4:	4604      	mov	r4, r0
   16ba6:	e733      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = bb_getUInt8(value->byteArr, &ch);
   16ba8:	a903      	add	r1, sp, #12
   16baa:	f7f7 fda0 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 2)
   16bae:	b110      	cbz	r0, 16bb6 <cosem_setAssociationLogicalName+0x1ca>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   16bb0:	f44f 7481 	mov.w	r4, #258	; 0x102
   16bb4:	e72c      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
                if (ret != DLMS_ERROR_CODE_OK || ch != 2)
   16bb6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16bba:	2b02      	cmp	r3, #2
   16bbc:	d1f8      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16bbe:	68b0      	ldr	r0, [r6, #8]
   16bc0:	a903      	add	r1, sp, #12
   16bc2:	f7f7 fd94 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 7)
   16bc6:	2800      	cmp	r0, #0
   16bc8:	d1f2      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16bca:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16bce:	2b07      	cmp	r3, #7
   16bd0:	d1ee      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16bd2:	68b0      	ldr	r0, [r6, #8]
   16bd4:	a903      	add	r1, sp, #12
   16bd6:	f7f7 fd8a 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   16bda:	2800      	cmp	r0, #0
   16bdc:	d1e8      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16bde:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16be2:	2b11      	cmp	r3, #17
   16be4:	d1e4      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.jointIsoCtt);
   16be6:	68b0      	ldr	r0, [r6, #8]
   16be8:	f105 0126 	add.w	r1, r5, #38	; 0x26
   16bec:	f7f7 fd7f 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16bf0:	2800      	cmp	r0, #0
   16bf2:	d1dd      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16bf4:	68b0      	ldr	r0, [r6, #8]
   16bf6:	a903      	add	r1, sp, #12
   16bf8:	f7f7 fd79 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   16bfc:	2800      	cmp	r0, #0
   16bfe:	d1d7      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16c00:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16c04:	2b11      	cmp	r3, #17
   16c06:	d1d3      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.country);
   16c08:	68b0      	ldr	r0, [r6, #8]
   16c0a:	f105 0127 	add.w	r1, r5, #39	; 0x27
   16c0e:	f7f7 fd6e 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16c12:	2800      	cmp	r0, #0
   16c14:	d1cc      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16c16:	68b0      	ldr	r0, [r6, #8]
   16c18:	a903      	add	r1, sp, #12
   16c1a:	f7f7 fd68 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   16c1e:	2800      	cmp	r0, #0
   16c20:	d1c6      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16c22:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16c26:	2b12      	cmp	r3, #18
   16c28:	d1c2      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt16(value->byteArr, &object->applicationContextName.countryName);
   16c2a:	68b0      	ldr	r0, [r6, #8]
   16c2c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   16c30:	f7f7 fd86 	bl	e740 <bb_getUInt16>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x12)
   16c34:	2800      	cmp	r0, #0
   16c36:	d1bb      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16c38:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16c3c:	2b12      	cmp	r3, #18
   16c3e:	d1b7      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16c40:	68b0      	ldr	r0, [r6, #8]
   16c42:	a903      	add	r1, sp, #12
   16c44:	f7f7 fd53 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   16c48:	2800      	cmp	r0, #0
   16c4a:	d1b1      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16c4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16c50:	2b11      	cmp	r3, #17
   16c52:	d1ad      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.identifiedOrganization);
   16c54:	68b0      	ldr	r0, [r6, #8]
   16c56:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   16c5a:	f7f7 fd48 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16c5e:	2800      	cmp	r0, #0
   16c60:	d1a6      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16c62:	68b0      	ldr	r0, [r6, #8]
   16c64:	a903      	add	r1, sp, #12
   16c66:	f7f7 fd42 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   16c6a:	2800      	cmp	r0, #0
   16c6c:	d1a0      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16c6e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16c72:	2b11      	cmp	r3, #17
   16c74:	d19c      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.dlmsUA);
   16c76:	68b0      	ldr	r0, [r6, #8]
   16c78:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   16c7c:	f7f7 fd37 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16c80:	2800      	cmp	r0, #0
   16c82:	d195      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16c84:	68b0      	ldr	r0, [r6, #8]
   16c86:	a903      	add	r1, sp, #12
   16c88:	f7f7 fd31 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   16c8c:	2800      	cmp	r0, #0
   16c8e:	d18f      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16c90:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16c94:	2b11      	cmp	r3, #17
   16c96:	d18b      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.applicationContext);
   16c98:	68b0      	ldr	r0, [r6, #8]
   16c9a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   16c9e:	f7f7 fd26 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16ca2:	2800      	cmp	r0, #0
   16ca4:	d184      	bne.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &ch);
   16ca6:	68b0      	ldr	r0, [r6, #8]
   16ca8:	a903      	add	r1, sp, #12
   16caa:	f7f7 fd20 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK || ch != 0x11)
   16cae:	2800      	cmp	r0, #0
   16cb0:	f47f af7e 	bne.w	16bb0 <cosem_setAssociationLogicalName+0x1c4>
   16cb4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16cb8:	2b11      	cmp	r3, #17
   16cba:	f47f af79 	bne.w	16bb0 <cosem_setAssociationLogicalName+0x1c4>
                ret = bb_getUInt8(value->byteArr, &object->applicationContextName.contextId);
   16cbe:	68b0      	ldr	r0, [r6, #8]
   16cc0:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   16cc4:	f7f7 fd13 	bl	e6ee <bb_getUInt8>
                if (ret != DLMS_ERROR_CODE_OK)
   16cc8:	4604      	mov	r4, r0
   16cca:	2800      	cmp	r0, #0
   16ccc:	f43f aea0 	beq.w	16a10 <cosem_setAssociationLogicalName+0x24>
   16cd0:	e76e      	b.n	16bb0 <cosem_setAssociationLogicalName+0x1c4>
        else if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   16cd2:	f1b8 0f02 	cmp.w	r8, #2
   16cd6:	f040 80b7 	bne.w	16e48 <cosem_setAssociationLogicalName+0x45c>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   16cda:	6898      	ldr	r0, [r3, #8]
   16cdc:	aa01      	add	r2, sp, #4
   16cde:	2100      	movs	r1, #0
   16ce0:	f005 f9c7 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16ce4:	4604      	mov	r4, r0
   16ce6:	2800      	cmp	r0, #0
   16ce8:	f47f ae92 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.jointIsoCtt = (unsigned char)var_toInteger(tmp);
   16cec:	9801      	ldr	r0, [sp, #4]
   16cee:	f005 fb3a 	bl	1c366 <var_toInteger>
   16cf2:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
            ret = va_getByIndex(value->Arr, 1, &tmp);
   16cf6:	68b0      	ldr	r0, [r6, #8]
   16cf8:	aa01      	add	r2, sp, #4
   16cfa:	2101      	movs	r1, #1
   16cfc:	f005 f9b9 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16d00:	4604      	mov	r4, r0
   16d02:	2800      	cmp	r0, #0
   16d04:	f47f ae84 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.country = (unsigned char)var_toInteger(tmp);
   16d08:	9801      	ldr	r0, [sp, #4]
   16d0a:	f005 fb2c 	bl	1c366 <var_toInteger>
   16d0e:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
            ret = va_getByIndex(value->Arr, 2, &tmp);
   16d12:	68b0      	ldr	r0, [r6, #8]
   16d14:	aa01      	add	r2, sp, #4
   16d16:	4641      	mov	r1, r8
   16d18:	f005 f9ab 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16d1c:	4604      	mov	r4, r0
   16d1e:	2800      	cmp	r0, #0
   16d20:	f47f ae76 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.countryName = (uint16_t)var_toInteger(tmp);
   16d24:	9801      	ldr	r0, [sp, #4]
   16d26:	f005 fb1e 	bl	1c366 <var_toInteger>
            ret = va_getByIndex(value->Arr, 3, &tmp);
   16d2a:	aa01      	add	r2, sp, #4
            object->applicationContextName.countryName = (uint16_t)var_toInteger(tmp);
   16d2c:	8528      	strh	r0, [r5, #40]	; 0x28
            ret = va_getByIndex(value->Arr, 3, &tmp);
   16d2e:	2103      	movs	r1, #3
   16d30:	68b0      	ldr	r0, [r6, #8]
   16d32:	f005 f99e 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16d36:	4604      	mov	r4, r0
   16d38:	2800      	cmp	r0, #0
   16d3a:	f47f ae69 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.identifiedOrganization = (unsigned char)var_toInteger(tmp);
   16d3e:	9801      	ldr	r0, [sp, #4]
   16d40:	f005 fb11 	bl	1c366 <var_toInteger>
   16d44:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
            ret = va_getByIndex(value->Arr, 4, &tmp);
   16d48:	68b0      	ldr	r0, [r6, #8]
   16d4a:	aa01      	add	r2, sp, #4
   16d4c:	4639      	mov	r1, r7
   16d4e:	f005 f990 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16d52:	4604      	mov	r4, r0
   16d54:	2800      	cmp	r0, #0
   16d56:	f47f ae5b 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.dlmsUA = (unsigned char)var_toInteger(tmp);
   16d5a:	9801      	ldr	r0, [sp, #4]
   16d5c:	f005 fb03 	bl	1c366 <var_toInteger>
   16d60:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
            ret = va_getByIndex(value->Arr, 5, &tmp);
   16d64:	68b0      	ldr	r0, [r6, #8]
   16d66:	aa01      	add	r2, sp, #4
   16d68:	2105      	movs	r1, #5
   16d6a:	f005 f982 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16d6e:	4604      	mov	r4, r0
   16d70:	2800      	cmp	r0, #0
   16d72:	f47f ae4d 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.applicationContext = (unsigned char)var_toInteger(tmp);
   16d76:	9801      	ldr	r0, [sp, #4]
   16d78:	f005 faf5 	bl	1c366 <var_toInteger>
   16d7c:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
            ret = va_getByIndex(value->Arr, 6, &tmp);
   16d80:	68b0      	ldr	r0, [r6, #8]
   16d82:	aa01      	add	r2, sp, #4
   16d84:	2106      	movs	r1, #6
   16d86:	f005 f974 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16d8a:	4604      	mov	r4, r0
   16d8c:	2800      	cmp	r0, #0
   16d8e:	f47f ae3f 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->applicationContextName.contextId = (unsigned char)var_toInteger(tmp);
   16d92:	9801      	ldr	r0, [sp, #4]
   16d94:	f005 fae7 	bl	1c366 <var_toInteger>
   16d98:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
   16d9c:	e638      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
    else if (index == 5)
   16d9e:	2a05      	cmp	r2, #5
   16da0:	d15a      	bne.n	16e58 <cosem_setAssociationLogicalName+0x46c>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   16da2:	6898      	ldr	r0, [r3, #8]
   16da4:	aa01      	add	r2, sp, #4
   16da6:	2100      	movs	r1, #0
   16da8:	f005 f963 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16dac:	4604      	mov	r4, r0
   16dae:	2800      	cmp	r0, #0
   16db0:	f47f ae2e 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)var_toInteger(tmp);
   16db4:	9801      	ldr	r0, [sp, #4]
   16db6:	f005 fad6 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16dba:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.conformance = (DLMS_CONFORMANCE)var_toInteger(tmp);
   16dbc:	6328      	str	r0, [r5, #48]	; 0x30
        ret = va_getByIndex(value->Arr, 1, &tmp);
   16dbe:	2101      	movs	r1, #1
   16dc0:	68b0      	ldr	r0, [r6, #8]
   16dc2:	f005 f956 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16dc6:	4604      	mov	r4, r0
   16dc8:	2800      	cmp	r0, #0
   16dca:	f47f ae21 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.maxReceivePduSize = (uint16_t)var_toInteger(tmp);
   16dce:	9801      	ldr	r0, [sp, #4]
   16dd0:	f005 fac9 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   16dd4:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.maxReceivePduSize = (uint16_t)var_toInteger(tmp);
   16dd6:	86a8      	strh	r0, [r5, #52]	; 0x34
        ret = va_getByIndex(value->Arr, 2, &tmp);
   16dd8:	2102      	movs	r1, #2
   16dda:	68b0      	ldr	r0, [r6, #8]
   16ddc:	f005 f949 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16de0:	4604      	mov	r4, r0
   16de2:	2800      	cmp	r0, #0
   16de4:	f47f ae14 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.maxSendPduSize = (uint16_t)var_toInteger(tmp);
   16de8:	9801      	ldr	r0, [sp, #4]
   16dea:	f005 fabc 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(value->Arr, 3, &tmp);
   16dee:	aa01      	add	r2, sp, #4
        object->xDLMSContextInfo.maxSendPduSize = (uint16_t)var_toInteger(tmp);
   16df0:	86e8      	strh	r0, [r5, #54]	; 0x36
        ret = va_getByIndex(value->Arr, 3, &tmp);
   16df2:	2103      	movs	r1, #3
   16df4:	68b0      	ldr	r0, [r6, #8]
   16df6:	f005 f93c 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16dfa:	4604      	mov	r4, r0
   16dfc:	2800      	cmp	r0, #0
   16dfe:	f47f ae07 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.dlmsVersionNumber = (unsigned char)var_toInteger(tmp);
   16e02:	9801      	ldr	r0, [sp, #4]
   16e04:	f005 faaf 	bl	1c366 <var_toInteger>
   16e08:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
        ret = va_getByIndex(value->Arr, 4, &tmp);
   16e0c:	68b0      	ldr	r0, [r6, #8]
   16e0e:	aa01      	add	r2, sp, #4
   16e10:	2104      	movs	r1, #4
   16e12:	f005 f92e 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16e16:	4604      	mov	r4, r0
   16e18:	2800      	cmp	r0, #0
   16e1a:	f47f adf9 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
        object->xDLMSContextInfo.qualityOfService = (unsigned char)var_toInteger(tmp);
   16e1e:	9801      	ldr	r0, [sp, #4]
   16e20:	f005 faa1 	bl	1c366 <var_toInteger>
   16e24:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        ret = va_getByIndex(value->Arr, 5, &tmp);
   16e28:	68b0      	ldr	r0, [r6, #8]
   16e2a:	aa01      	add	r2, sp, #4
   16e2c:	4639      	mov	r1, r7
   16e2e:	f005 f920 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   16e32:	4604      	mov	r4, r0
   16e34:	2800      	cmp	r0, #0
   16e36:	f47f adeb 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
        bb_clear(&object->xDLMSContextInfo.cypheringInfo);
   16e3a:	353c      	adds	r5, #60	; 0x3c
   16e3c:	4628      	mov	r0, r5
   16e3e:	f7f7 fc40 	bl	e6c2 <bb_clear>
        if (tmp->byteArr != NULL)
   16e42:	9b01      	ldr	r3, [sp, #4]
   16e44:	6899      	ldr	r1, [r3, #8]
   16e46:	b909      	cbnz	r1, 16e4c <cosem_setAssociationLogicalName+0x460>
    int ret = 0, pos = 0;
   16e48:	2400      	movs	r4, #0
   16e4a:	e5e1      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
            bb_set2(&object->xDLMSContextInfo.cypheringInfo, tmp->byteArr, 0, tmp->byteArr->size);
   16e4c:	88cb      	ldrh	r3, [r1, #6]
   16e4e:	2200      	movs	r2, #0
   16e50:	4628      	mov	r0, r5
   16e52:	f7f7 fbf1 	bl	e638 <bb_set2>
   16e56:	e5db      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
    else if (index == 6)
   16e58:	2a06      	cmp	r2, #6
   16e5a:	f040 80c9 	bne.w	16ff0 <cosem_setAssociationLogicalName+0x604>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   16e5e:	781f      	ldrb	r7, [r3, #0]
   16e60:	2f09      	cmp	r7, #9
   16e62:	d160      	bne.n	16f26 <cosem_setAssociationLogicalName+0x53a>
            if (value->byteArr->data[0] == 0x60)
   16e64:	689b      	ldr	r3, [r3, #8]
   16e66:	681a      	ldr	r2, [r3, #0]
   16e68:	7812      	ldrb	r2, [r2, #0]
   16e6a:	2a60      	cmp	r2, #96	; 0x60
   16e6c:	d112      	bne.n	16e94 <cosem_setAssociationLogicalName+0x4a8>
                object->authenticationMechanismName.jointIsoCtt = 0;
   16e6e:	2400      	movs	r4, #0
   16e70:	648c      	str	r4, [r1, #72]	; 0x48
                object->authenticationMechanismName.identifiedOrganization = value->byteArr->data[++pos];
   16e72:	681a      	ldr	r2, [r3, #0]
   16e74:	78d2      	ldrb	r2, [r2, #3]
   16e76:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
                object->authenticationMechanismName.dlmsUA = value->byteArr->data[++pos];
   16e7a:	681a      	ldr	r2, [r3, #0]
   16e7c:	7912      	ldrb	r2, [r2, #4]
   16e7e:	f881 204d 	strb.w	r2, [r1, #77]	; 0x4d
                object->authenticationMechanismName.authenticationMechanismName = value->byteArr->data[++pos];
   16e82:	681a      	ldr	r2, [r3, #0]
   16e84:	7952      	ldrb	r2, [r2, #5]
   16e86:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
                object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)value->byteArr->data[++pos];
   16e8a:	681b      	ldr	r3, [r3, #0]
   16e8c:	799b      	ldrb	r3, [r3, #6]
                    object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)ch;
   16e8e:	f885 304f 	strb.w	r3, [r5, #79]	; 0x4f
   16e92:	e5bd      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
                if ((ret = cosem_checkStructure(value->byteArr, 7)) == 0 &&
   16e94:	2107      	movs	r1, #7
   16e96:	4618      	mov	r0, r3
   16e98:	f7f8 f839 	bl	ef0e <cosem_checkStructure>
   16e9c:	4604      	mov	r4, r0
   16e9e:	2800      	cmp	r0, #0
   16ea0:	f47f adb6 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.jointIsoCtt)) == 0 &&
   16ea4:	68b0      	ldr	r0, [r6, #8]
   16ea6:	f105 0148 	add.w	r1, r5, #72	; 0x48
   16eaa:	f7f8 f862 	bl	ef72 <cosem_getUInt8>
                if ((ret = cosem_checkStructure(value->byteArr, 7)) == 0 &&
   16eae:	4604      	mov	r4, r0
   16eb0:	2800      	cmp	r0, #0
   16eb2:	f47f adad 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.country)) == 0 &&
   16eb6:	68b0      	ldr	r0, [r6, #8]
   16eb8:	f105 0149 	add.w	r1, r5, #73	; 0x49
   16ebc:	f7f8 f859 	bl	ef72 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.jointIsoCtt)) == 0 &&
   16ec0:	4604      	mov	r4, r0
   16ec2:	2800      	cmp	r0, #0
   16ec4:	f47f ada4 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt16(value->byteArr, &object->authenticationMechanismName.countryName)) == 0 &&
   16ec8:	68b0      	ldr	r0, [r6, #8]
   16eca:	f105 014a 	add.w	r1, r5, #74	; 0x4a
   16ece:	f7f8 f864 	bl	ef9a <cosem_getUInt16>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.country)) == 0 &&
   16ed2:	4604      	mov	r4, r0
   16ed4:	2800      	cmp	r0, #0
   16ed6:	f47f ad9b 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.identifiedOrganization)) == 0 &&
   16eda:	68b0      	ldr	r0, [r6, #8]
   16edc:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   16ee0:	f7f8 f847 	bl	ef72 <cosem_getUInt8>
                    (ret = cosem_getUInt16(value->byteArr, &object->authenticationMechanismName.countryName)) == 0 &&
   16ee4:	4604      	mov	r4, r0
   16ee6:	2800      	cmp	r0, #0
   16ee8:	f47f ad92 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.dlmsUA)) == 0 &&
   16eec:	68b0      	ldr	r0, [r6, #8]
   16eee:	f105 014d 	add.w	r1, r5, #77	; 0x4d
   16ef2:	f7f8 f83e 	bl	ef72 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.identifiedOrganization)) == 0 &&
   16ef6:	4604      	mov	r4, r0
   16ef8:	2800      	cmp	r0, #0
   16efa:	f47f ad89 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.authenticationMechanismName)) == 0 &&
   16efe:	68b0      	ldr	r0, [r6, #8]
   16f00:	f105 014e 	add.w	r1, r5, #78	; 0x4e
   16f04:	f7f8 f835 	bl	ef72 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.dlmsUA)) == 0 &&
   16f08:	4604      	mov	r4, r0
   16f0a:	2800      	cmp	r0, #0
   16f0c:	f47f ad80 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                    (ret = cosem_getUInt8(value->byteArr, &ch)) == 0)
   16f10:	68b0      	ldr	r0, [r6, #8]
   16f12:	a903      	add	r1, sp, #12
   16f14:	f7f8 f82d 	bl	ef72 <cosem_getUInt8>
                    (ret = cosem_getUInt8(value->byteArr, &object->authenticationMechanismName.authenticationMechanismName)) == 0 &&
   16f18:	4604      	mov	r4, r0
   16f1a:	2800      	cmp	r0, #0
   16f1c:	f47f ad78 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                    object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)ch;
   16f20:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16f24:	e7b3      	b.n	16e8e <cosem_setAssociationLogicalName+0x4a2>
        else  if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   16f26:	2f02      	cmp	r7, #2
   16f28:	d18e      	bne.n	16e48 <cosem_setAssociationLogicalName+0x45c>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   16f2a:	6898      	ldr	r0, [r3, #8]
   16f2c:	aa01      	add	r2, sp, #4
   16f2e:	2100      	movs	r1, #0
   16f30:	f005 f89f 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16f34:	4604      	mov	r4, r0
   16f36:	2800      	cmp	r0, #0
   16f38:	f47f ad6a 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.jointIsoCtt = (unsigned char)var_toInteger(tmp);
   16f3c:	9801      	ldr	r0, [sp, #4]
   16f3e:	f005 fa12 	bl	1c366 <var_toInteger>
   16f42:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
            ret = va_getByIndex(value->Arr, 1, &tmp);
   16f46:	68b0      	ldr	r0, [r6, #8]
   16f48:	aa01      	add	r2, sp, #4
   16f4a:	2101      	movs	r1, #1
   16f4c:	f005 f891 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16f50:	4604      	mov	r4, r0
   16f52:	2800      	cmp	r0, #0
   16f54:	f47f ad5c 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.country = (unsigned char)var_toInteger(tmp);
   16f58:	9801      	ldr	r0, [sp, #4]
   16f5a:	f005 fa04 	bl	1c366 <var_toInteger>
   16f5e:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            ret = va_getByIndex(value->Arr, 2, &tmp);
   16f62:	68b0      	ldr	r0, [r6, #8]
   16f64:	aa01      	add	r2, sp, #4
   16f66:	4639      	mov	r1, r7
   16f68:	f005 f883 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16f6c:	4604      	mov	r4, r0
   16f6e:	2800      	cmp	r0, #0
   16f70:	f47f ad4e 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.countryName = (uint16_t)var_toInteger(tmp);
   16f74:	9801      	ldr	r0, [sp, #4]
   16f76:	f005 f9f6 	bl	1c366 <var_toInteger>
            ret = va_getByIndex(value->Arr, 3, &tmp);
   16f7a:	aa01      	add	r2, sp, #4
            object->authenticationMechanismName.countryName = (uint16_t)var_toInteger(tmp);
   16f7c:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
            ret = va_getByIndex(value->Arr, 3, &tmp);
   16f80:	2103      	movs	r1, #3
   16f82:	68b0      	ldr	r0, [r6, #8]
   16f84:	f005 f875 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16f88:	4604      	mov	r4, r0
   16f8a:	2800      	cmp	r0, #0
   16f8c:	f47f ad40 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.identifiedOrganization = (unsigned char)var_toInteger(tmp);
   16f90:	9801      	ldr	r0, [sp, #4]
   16f92:	f005 f9e8 	bl	1c366 <var_toInteger>
   16f96:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
            ret = va_getByIndex(value->Arr, 4, &tmp);
   16f9a:	68b0      	ldr	r0, [r6, #8]
   16f9c:	aa01      	add	r2, sp, #4
   16f9e:	2104      	movs	r1, #4
   16fa0:	f005 f867 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16fa4:	4604      	mov	r4, r0
   16fa6:	2800      	cmp	r0, #0
   16fa8:	f47f ad32 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.dlmsUA = (unsigned char)var_toInteger(tmp);
   16fac:	9801      	ldr	r0, [sp, #4]
   16fae:	f005 f9da 	bl	1c366 <var_toInteger>
   16fb2:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
            ret = va_getByIndex(value->Arr, 5, &tmp);
   16fb6:	68b0      	ldr	r0, [r6, #8]
   16fb8:	aa01      	add	r2, sp, #4
   16fba:	2105      	movs	r1, #5
   16fbc:	f005 f859 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16fc0:	4604      	mov	r4, r0
   16fc2:	2800      	cmp	r0, #0
   16fc4:	f47f ad24 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.authenticationMechanismName = (unsigned char)var_toInteger(tmp);
   16fc8:	9801      	ldr	r0, [sp, #4]
   16fca:	f005 f9cc 	bl	1c366 <var_toInteger>
   16fce:	f885 004e 	strb.w	r0, [r5, #78]	; 0x4e
            ret = va_getByIndex(value->Arr, 6, &tmp);
   16fd2:	68b0      	ldr	r0, [r6, #8]
   16fd4:	aa01      	add	r2, sp, #4
   16fd6:	2106      	movs	r1, #6
   16fd8:	f005 f84b 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   16fdc:	4604      	mov	r4, r0
   16fde:	2800      	cmp	r0, #0
   16fe0:	f47f ad16 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->authenticationMechanismName.mechanismId = (DLMS_AUTHENTICATION)var_toInteger(tmp);
   16fe4:	9801      	ldr	r0, [sp, #4]
   16fe6:	f005 f9be 	bl	1c366 <var_toInteger>
   16fea:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
   16fee:	e50f      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
    else if (index == 7)
   16ff0:	2a07      	cmp	r2, #7
   16ff2:	d111      	bne.n	17018 <cosem_setAssociationLogicalName+0x62c>
        bb_clear(&object->secret);
   16ff4:	3550      	adds	r5, #80	; 0x50
   16ff6:	4628      	mov	r0, r5
   16ff8:	f7f7 fb63 	bl	e6c2 <bb_clear>
        if (value->byteArr != NULL)
   16ffc:	68b4      	ldr	r4, [r6, #8]
   16ffe:	2c00      	cmp	r4, #0
   17000:	f43f af22 	beq.w	16e48 <cosem_setAssociationLogicalName+0x45c>
            ret = bb_set2(&object->secret, value->byteArr, 0, bb_size(value->byteArr));
   17004:	4620      	mov	r0, r4
   17006:	f7f7 f996 	bl	e336 <bb_size>
   1700a:	2200      	movs	r2, #0
   1700c:	4603      	mov	r3, r0
   1700e:	4621      	mov	r1, r4
   17010:	4628      	mov	r0, r5
   17012:	f7f7 fb11 	bl	e638 <bb_set2>
   17016:	e5c5      	b.n	16ba4 <cosem_setAssociationLogicalName+0x1b8>
    else if (index == 8)
   17018:	2a08      	cmp	r2, #8
   1701a:	d104      	bne.n	17026 <cosem_setAssociationLogicalName+0x63a>
        object->associationStatus = (DLMS_ASSOCIATION_STATUS)var_toInteger(value);
   1701c:	4618      	mov	r0, r3
   1701e:	f005 f9a2 	bl	1c366 <var_toInteger>
   17022:	7428      	strb	r0, [r5, #16]
   17024:	e710      	b.n	16e48 <cosem_setAssociationLogicalName+0x45c>
    else if (index == 9)
   17026:	2a09      	cmp	r2, #9
   17028:	d10f      	bne.n	1704a <cosem_setAssociationLogicalName+0x65e>
        if (bb_size(value->byteArr) != 6)
   1702a:	6898      	ldr	r0, [r3, #8]
   1702c:	f7f7 f983 	bl	e336 <bb_size>
   17030:	2806      	cmp	r0, #6
   17032:	f040 8093 	bne.w	1715c <cosem_setAssociationLogicalName+0x770>
        ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   17036:	68b2      	ldr	r2, [r6, #8]
   17038:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   1703c:	6812      	ldr	r2, [r2, #0]
   1703e:	2140      	movs	r1, #64	; 0x40
   17040:	f108 0098 	add.w	r0, r8, #152	; 0x98
   17044:	f004 fdd2 	bl	1bbec <oa_findByLN>
   17048:	e5ac      	b.n	16ba4 <cosem_setAssociationLogicalName+0x1b8>
    else if (index == 10)
   1704a:	2a0a      	cmp	r2, #10
   1704c:	d14f      	bne.n	170ee <cosem_setAssociationLogicalName+0x702>
        obj_clearUserList(&object->userList);
   1704e:	3560      	adds	r5, #96	; 0x60
   17050:	4628      	mov	r0, r5
   17052:	f7fe fa88 	bl	15566 <obj_clearUserList>
        if (value->Arr != NULL)
   17056:	68b3      	ldr	r3, [r6, #8]
   17058:	2b00      	cmp	r3, #0
   1705a:	f43f aef5 	beq.w	16e48 <cosem_setAssociationLogicalName+0x45c>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1705e:	f04f 0800 	mov.w	r8, #0
   17062:	e024      	b.n	170ae <cosem_setAssociationLogicalName+0x6c2>
                it->key = (unsigned char)var_toInteger(tmp2);
   17064:	9802      	ldr	r0, [sp, #8]
   17066:	f005 f97e 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   1706a:	9b01      	ldr	r3, [sp, #4]
                it->key = (unsigned char)var_toInteger(tmp2);
   1706c:	7038      	strb	r0, [r7, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   1706e:	6898      	ldr	r0, [r3, #8]
   17070:	aa02      	add	r2, sp, #8
   17072:	2101      	movs	r1, #1
   17074:	f004 fffd 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17078:	4604      	mov	r4, r0
   1707a:	2800      	cmp	r0, #0
   1707c:	f47f acc8 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                it->value = (char*)gxmalloc(tmp->strVal->size + 1);
   17080:	9b01      	ldr	r3, [sp, #4]
   17082:	689b      	ldr	r3, [r3, #8]
   17084:	88d8      	ldrh	r0, [r3, #6]
   17086:	3001      	adds	r0, #1
   17088:	f7f6 f934 	bl	d2f4 <malloc>
   1708c:	6078      	str	r0, [r7, #4]
                if (it->value == NULL)
   1708e:	b358      	cbz	r0, 170e8 <cosem_setAssociationLogicalName+0x6fc>
                ((char*)it->value)[tmp->strVal->size] = 0;
   17090:	9a01      	ldr	r2, [sp, #4]
   17092:	6891      	ldr	r1, [r2, #8]
   17094:	88c9      	ldrh	r1, [r1, #6]
   17096:	5444      	strb	r4, [r0, r1]
                memcpy(it->value, tmp->strVal->data, tmp->strVal->size);
   17098:	6893      	ldr	r3, [r2, #8]
   1709a:	6819      	ldr	r1, [r3, #0]
   1709c:	88da      	ldrh	r2, [r3, #6]
   1709e:	f007 f8b0 	bl	1e202 <memcpy>
                arr_push(&object->userList, it);
   170a2:	4639      	mov	r1, r7
   170a4:	4628      	mov	r0, r5
   170a6:	f7fa fd3b 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   170aa:	f108 0801 	add.w	r8, r8, #1
   170ae:	68b0      	ldr	r0, [r6, #8]
   170b0:	88c3      	ldrh	r3, [r0, #6]
   170b2:	4543      	cmp	r3, r8
   170b4:	f43f aec8 	beq.w	16e48 <cosem_setAssociationLogicalName+0x45c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   170b8:	aa01      	add	r2, sp, #4
   170ba:	4641      	mov	r1, r8
   170bc:	f004 ffd9 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   170c0:	4604      	mov	r4, r0
   170c2:	2800      	cmp	r0, #0
   170c4:	f47f aca4 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   170c8:	9b01      	ldr	r3, [sp, #4]
   170ca:	4601      	mov	r1, r0
   170cc:	aa02      	add	r2, sp, #8
   170ce:	6898      	ldr	r0, [r3, #8]
   170d0:	f004 ffcf 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   170d4:	4604      	mov	r4, r0
   170d6:	2800      	cmp	r0, #0
   170d8:	f47f ac9a 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
                it = (gxKey2*)gxmalloc(sizeof(gxKey2));
   170dc:	2008      	movs	r0, #8
   170de:	f7f6 f909 	bl	d2f4 <malloc>
                if (it == NULL)
   170e2:	4607      	mov	r7, r0
   170e4:	2800      	cmp	r0, #0
   170e6:	d1bd      	bne.n	17064 <cosem_setAssociationLogicalName+0x678>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   170e8:	f44f 7482 	mov.w	r4, #260	; 0x104
   170ec:	e490      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
    else if (index == 11)
   170ee:	2a0b      	cmp	r2, #11
   170f0:	f47f ad5e 	bne.w	16bb0 <cosem_setAssociationLogicalName+0x1c4>
        if (object->currentUser.value != NULL)
   170f4:	6f08      	ldr	r0, [r1, #112]	; 0x70
   170f6:	b108      	cbz	r0, 170fc <cosem_setAssociationLogicalName+0x710>
            gxfree(object->currentUser.value);
   170f8:	f7f6 f904 	bl	d304 <free>
        if (value->Arr->size == 2)
   170fc:	68b0      	ldr	r0, [r6, #8]
   170fe:	88c3      	ldrh	r3, [r0, #6]
   17100:	2b02      	cmp	r3, #2
   17102:	f47f ad55 	bne.w	16bb0 <cosem_setAssociationLogicalName+0x1c4>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   17106:	aa01      	add	r2, sp, #4
   17108:	2100      	movs	r1, #0
   1710a:	f004 ffb2 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1710e:	4604      	mov	r4, r0
   17110:	2800      	cmp	r0, #0
   17112:	f47f ac7d 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            object->currentUser.key = (unsigned char)var_toInteger(tmp);
   17116:	9801      	ldr	r0, [sp, #4]
   17118:	f005 f925 	bl	1c366 <var_toInteger>
   1711c:	f885 006c 	strb.w	r0, [r5, #108]	; 0x6c
            ret = va_getByIndex(value->Arr, 1, &tmp);
   17120:	68b0      	ldr	r0, [r6, #8]
   17122:	aa01      	add	r2, sp, #4
   17124:	2101      	movs	r1, #1
   17126:	f004 ffa4 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1712a:	4604      	mov	r4, r0
   1712c:	2800      	cmp	r0, #0
   1712e:	f47f ac6f 	bne.w	16a10 <cosem_setAssociationLogicalName+0x24>
            if (tmp->strVal != NULL && tmp->strVal->size != 0)
   17132:	9b01      	ldr	r3, [sp, #4]
   17134:	689b      	ldr	r3, [r3, #8]
   17136:	2b00      	cmp	r3, #0
   17138:	f43f ae86 	beq.w	16e48 <cosem_setAssociationLogicalName+0x45c>
   1713c:	88d8      	ldrh	r0, [r3, #6]
   1713e:	2800      	cmp	r0, #0
   17140:	f43f ae82 	beq.w	16e48 <cosem_setAssociationLogicalName+0x45c>
                object->currentUser.value = gxmalloc(tmp->strVal->size + 1);
   17144:	3001      	adds	r0, #1
   17146:	f7f6 f8d5 	bl	d2f4 <malloc>
   1714a:	6728      	str	r0, [r5, #112]	; 0x70
                if (object->currentUser.value == NULL)
   1714c:	2800      	cmp	r0, #0
   1714e:	d0cb      	beq.n	170e8 <cosem_setAssociationLogicalName+0x6fc>
                memcpy(object->currentUser.value, tmp->strVal, tmp->strVal->size);
   17150:	9b01      	ldr	r3, [sp, #4]
   17152:	6899      	ldr	r1, [r3, #8]
   17154:	88ca      	ldrh	r2, [r1, #6]
   17156:	f007 f854 	bl	1e202 <memcpy>
   1715a:	e459      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>
            return DLMS_ERROR_CODE_UNMATCH_TYPE;
   1715c:	240c      	movs	r4, #12
   1715e:	e457      	b.n	16a10 <cosem_setAssociationLogicalName+0x24>

00017160 <updateSNAccessRights>:
{
   17160:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    gxObject* obj = NULL;
   17162:	2400      	movs	r4, #0
{
   17164:	4606      	mov	r6, r0
   17166:	460d      	mov	r5, r1
    gxObject* obj = NULL;
   17168:	9403      	str	r4, [sp, #12]
    for (pos = 0; pos != data->size; ++pos)
   1716a:	88eb      	ldrh	r3, [r5, #6]
   1716c:	42a3      	cmp	r3, r4
   1716e:	d101      	bne.n	17174 <updateSNAccessRights+0x14>
    return DLMS_ERROR_CODE_OK;
   17170:	2000      	movs	r0, #0
   17172:	e01f      	b.n	171b4 <updateSNAccessRights+0x54>
        ret = va_getByIndex(data, pos, &it);
   17174:	aa01      	add	r2, sp, #4
   17176:	4621      	mov	r1, r4
   17178:	4628      	mov	r0, r5
   1717a:	f004 ff7a 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1717e:	b9c8      	cbnz	r0, 171b4 <updateSNAccessRights+0x54>
        ret = va_getByIndex(it->Arr, 0, &tmp);
   17180:	9b01      	ldr	r3, [sp, #4]
   17182:	4601      	mov	r1, r0
   17184:	aa02      	add	r2, sp, #8
   17186:	6898      	ldr	r0, [r3, #8]
   17188:	f004 ff73 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1718c:	b990      	cbnz	r0, 171b4 <updateSNAccessRights+0x54>
        sn = (uint16_t)var_toInteger(tmp);
   1718e:	9802      	ldr	r0, [sp, #8]
   17190:	f005 f8e9 	bl	1c366 <var_toInteger>
        ret = oa_findBySN(objectList, sn, &obj);
   17194:	aa03      	add	r2, sp, #12
   17196:	b281      	uxth	r1, r0
   17198:	4630      	mov	r0, r6
   1719a:	f004 fd0c 	bl	1bbb6 <oa_findBySN>
        if (ret != DLMS_ERROR_CODE_OK)
   1719e:	b948      	cbnz	r0, 171b4 <updateSNAccessRights+0x54>
        if (obj != NULL)
   171a0:	9803      	ldr	r0, [sp, #12]
   171a2:	b908      	cbnz	r0, 171a8 <updateSNAccessRights+0x48>
    for (pos = 0; pos != data->size; ++pos)
   171a4:	3401      	adds	r4, #1
   171a6:	e7e0      	b.n	1716a <updateSNAccessRights+0xa>
            ret = cosem_updateAttributeAccessModes(obj, it->Arr);
   171a8:	9b01      	ldr	r3, [sp, #4]
   171aa:	6899      	ldr	r1, [r3, #8]
   171ac:	f7ff fb6b 	bl	16886 <cosem_updateAttributeAccessModes>
            if (ret != DLMS_ERROR_CODE_OK)
   171b0:	2800      	cmp	r0, #0
   171b2:	d0f7      	beq.n	171a4 <updateSNAccessRights+0x44>
}
   171b4:	b004      	add	sp, #16
   171b6:	bd70      	pop	{r4, r5, r6, pc}

000171b8 <cosem_parseSNObjects>:
{
   171b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171bc:	b08d      	sub	sp, #52	; 0x34
   171be:	460d      	mov	r5, r1
    dlmsVARIANT* it1 = NULL, * it2 = NULL, * it3 = NULL, * ln = NULL;
   171c0:	2400      	movs	r4, #0
{
   171c2:	4680      	mov	r8, r0
    var_init(&value);
   171c4:	a808      	add	r0, sp, #32
    dlmsVARIANT* it1 = NULL, * it2 = NULL, * it3 = NULL, * ln = NULL;
   171c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   171ca:	e9cd 4403 	strd	r4, r4, [sp, #12]
{
   171ce:	4617      	mov	r7, r2
    var_init(&value);
   171d0:	f004 fd75 	bl	1bcbe <var_init>
    if ((ret = bb_getUInt8(data, &size)) != DLMS_ERROR_CODE_OK)
   171d4:	f10d 0101 	add.w	r1, sp, #1
   171d8:	4628      	mov	r0, r5
   171da:	f7f7 fa88 	bl	e6ee <bb_getUInt8>
   171de:	bb90      	cbnz	r0, 17246 <cosem_parseSNObjects+0x8e>
    if (size != 0x01)
   171e0:	f89d 3001 	ldrb.w	r3, [sp, #1]
   171e4:	2b01      	cmp	r3, #1
   171e6:	f040 808e 	bne.w	17306 <cosem_parseSNObjects+0x14e>
    if ((ret = hlp_getObjectCount2(data, &count)) != 0)
   171ea:	f10d 0102 	add.w	r1, sp, #2
   171ee:	4628      	mov	r0, r5
   171f0:	f004 f9d8 	bl	1b5a4 <hlp_getObjectCount2>
   171f4:	4604      	mov	r4, r0
   171f6:	bb30      	cbnz	r0, 17246 <cosem_parseSNObjects+0x8e>
    oa_capacity(objects, (uint16_t)count);
   171f8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   171fc:	4638      	mov	r0, r7
   171fe:	f004 fc4b 	bl	1ba98 <oa_capacity>
    for (pos = 0; pos != count; ++pos)
   17202:	4626      	mov	r6, r4
   17204:	46a2      	mov	sl, r4
   17206:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1720a:	b2b3      	uxth	r3, r6
   1720c:	429a      	cmp	r2, r3
   1720e:	d101      	bne.n	17214 <cosem_parseSNObjects+0x5c>
   17210:	2400      	movs	r4, #0
   17212:	e015      	b.n	17240 <cosem_parseSNObjects+0x88>
        var_clear(&value);
   17214:	a808      	add	r0, sp, #32
   17216:	f004 feae 	bl	1bf76 <var_clear>
        di_init(&info);
   1721a:	a806      	add	r0, sp, #24
        object = NULL;
   1721c:	f8cd a014 	str.w	sl, [sp, #20]
        di_init(&info);
   17220:	f7f8 f93a 	bl	f498 <di_init>
        if ((ret = dlms_getData(data, &info, &value)) != 0)
   17224:	aa08      	add	r2, sp, #32
   17226:	a906      	add	r1, sp, #24
   17228:	4628      	mov	r0, r5
   1722a:	f7f8 fdc5 	bl	fdb8 <dlms_getData>
   1722e:	4604      	mov	r4, r0
   17230:	b930      	cbnz	r0, 17240 <cosem_parseSNObjects+0x88>
        if (value.vt != DLMS_DATA_TYPE_STRUCTURE || value.Arr->size != 4)
   17232:	f89d 9020 	ldrb.w	r9, [sp, #32]
   17236:	f1b9 0f02 	cmp.w	r9, #2
   1723a:	d008      	beq.n	1724e <cosem_parseSNObjects+0x96>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1723c:	f44f 7481 	mov.w	r4, #258	; 0x102
    var_clear(&value);
   17240:	a808      	add	r0, sp, #32
   17242:	f004 fe98 	bl	1bf76 <var_clear>
}
   17246:	4620      	mov	r0, r4
   17248:	b00d      	add	sp, #52	; 0x34
   1724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (value.vt != DLMS_DATA_TYPE_STRUCTURE || value.Arr->size != 4)
   1724e:	980a      	ldr	r0, [sp, #40]	; 0x28
   17250:	88c3      	ldrh	r3, [r0, #6]
   17252:	2b04      	cmp	r3, #4
   17254:	d1f2      	bne.n	1723c <cosem_parseSNObjects+0x84>
        if ((ret = va_getByIndex(value.Arr, 0, &it1)) != 0 ||
   17256:	4621      	mov	r1, r4
   17258:	aa01      	add	r2, sp, #4
   1725a:	f004 ff0a 	bl	1c072 <va_getByIndex>
   1725e:	4604      	mov	r4, r0
   17260:	2800      	cmp	r0, #0
   17262:	d1ed      	bne.n	17240 <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 1, &it2)) != 0 ||
   17264:	980a      	ldr	r0, [sp, #40]	; 0x28
   17266:	aa02      	add	r2, sp, #8
   17268:	2101      	movs	r1, #1
   1726a:	f004 ff02 	bl	1c072 <va_getByIndex>
        if ((ret = va_getByIndex(value.Arr, 0, &it1)) != 0 ||
   1726e:	4604      	mov	r4, r0
   17270:	2800      	cmp	r0, #0
   17272:	d1e5      	bne.n	17240 <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 2, &it3)) != 0 ||
   17274:	980a      	ldr	r0, [sp, #40]	; 0x28
   17276:	aa03      	add	r2, sp, #12
   17278:	4649      	mov	r1, r9
   1727a:	f004 fefa 	bl	1c072 <va_getByIndex>
            (ret = va_getByIndex(value.Arr, 1, &it2)) != 0 ||
   1727e:	4604      	mov	r4, r0
   17280:	2800      	cmp	r0, #0
   17282:	d1dd      	bne.n	17240 <cosem_parseSNObjects+0x88>
            (ret = va_getByIndex(value.Arr, 3, &ln)) != 0)
   17284:	980a      	ldr	r0, [sp, #40]	; 0x28
   17286:	aa04      	add	r2, sp, #16
   17288:	2103      	movs	r1, #3
   1728a:	f004 fef2 	bl	1c072 <va_getByIndex>
            (ret = va_getByIndex(value.Arr, 2, &it3)) != 0 ||
   1728e:	4604      	mov	r4, r0
   17290:	2800      	cmp	r0, #0
   17292:	d1d5      	bne.n	17240 <cosem_parseSNObjects+0x88>
        if (it1->vt != DLMS_DATA_TYPE_INT16 ||
   17294:	9801      	ldr	r0, [sp, #4]
   17296:	7803      	ldrb	r3, [r0, #0]
   17298:	2b10      	cmp	r3, #16
   1729a:	d1cf      	bne.n	1723c <cosem_parseSNObjects+0x84>
            it2->vt != DLMS_DATA_TYPE_UINT16 ||
   1729c:	9b02      	ldr	r3, [sp, #8]
        if (it1->vt != DLMS_DATA_TYPE_INT16 ||
   1729e:	781b      	ldrb	r3, [r3, #0]
   172a0:	2b12      	cmp	r3, #18
   172a2:	d1cb      	bne.n	1723c <cosem_parseSNObjects+0x84>
            it3->vt != DLMS_DATA_TYPE_UINT8 ||
   172a4:	9b03      	ldr	r3, [sp, #12]
            it2->vt != DLMS_DATA_TYPE_UINT16 ||
   172a6:	781b      	ldrb	r3, [r3, #0]
   172a8:	2b11      	cmp	r3, #17
   172aa:	d1c7      	bne.n	1723c <cosem_parseSNObjects+0x84>
            ln->vt != DLMS_DATA_TYPE_OCTET_STRING)
   172ac:	9b04      	ldr	r3, [sp, #16]
            it3->vt != DLMS_DATA_TYPE_UINT8 ||
   172ae:	781b      	ldrb	r3, [r3, #0]
   172b0:	2b09      	cmp	r3, #9
   172b2:	d1c3      	bne.n	1723c <cosem_parseSNObjects+0x84>
        sn = (short)var_toInteger(it1);
   172b4:	f005 f857 	bl	1c366 <var_toInteger>
   172b8:	4683      	mov	fp, r0
        class_id = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   172ba:	9802      	ldr	r0, [sp, #8]
   172bc:	f005 f853 	bl	1c366 <var_toInteger>
   172c0:	4604      	mov	r4, r0
        version = (unsigned char)var_toInteger(it3);
   172c2:	9803      	ldr	r0, [sp, #12]
   172c4:	f005 f84f 	bl	1c366 <var_toInteger>
        ret = cosem_createObject(class_id, &object);
   172c8:	a905      	add	r1, sp, #20
        version = (unsigned char)var_toInteger(it3);
   172ca:	4681      	mov	r9, r0
        ret = cosem_createObject(class_id, &object);
   172cc:	b2a0      	uxth	r0, r4
   172ce:	f7ea ff1f 	bl	2110 <cosem_createObject>
        if (ret == 0)
   172d2:	4604      	mov	r4, r0
   172d4:	b9a0      	cbnz	r0, 17300 <cosem_parseSNObjects+0x148>
            object->shortName = sn;
   172d6:	9805      	ldr	r0, [sp, #20]
        version = (unsigned char)var_toInteger(it3);
   172d8:	f880 9002 	strb.w	r9, [r0, #2]
            cosem_setLogicalName(object, ln->byteArr->data);
   172dc:	9b04      	ldr	r3, [sp, #16]
            object->shortName = sn;
   172de:	f8a0 b004 	strh.w	fp, [r0, #4]
            cosem_setLogicalName(object, ln->byteArr->data);
   172e2:	689b      	ldr	r3, [r3, #8]
   172e4:	6819      	ldr	r1, [r3, #0]
   172e6:	f7f7 fded 	bl	eec4 <cosem_setLogicalName>
            oa_push(objects, object);
   172ea:	9905      	ldr	r1, [sp, #20]
   172ec:	4638      	mov	r0, r7
   172ee:	f004 fbee 	bl	1bace <oa_push>
            oa_push(&settings->releasedObjects, object);
   172f2:	9905      	ldr	r1, [sp, #20]
   172f4:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   172f8:	f004 fbe9 	bl	1bace <oa_push>
    for (pos = 0; pos != count; ++pos)
   172fc:	3601      	adds	r6, #1
   172fe:	e782      	b.n	17206 <cosem_parseSNObjects+0x4e>
            if (ret != DLMS_ERROR_CODE_UNAVAILABLE_OBJECT)
   17300:	280b      	cmp	r0, #11
   17302:	d0fb      	beq.n	172fc <cosem_parseSNObjects+0x144>
   17304:	e79c      	b.n	17240 <cosem_parseSNObjects+0x88>
        return DLMS_ERROR_CODE_INVALID_RESPONSE;
   17306:	f44f 7487 	mov.w	r4, #270	; 0x10e
   1730a:	e79c      	b.n	17246 <cosem_parseSNObjects+0x8e>

0001730c <cosem_setAssociationShortName>:
    if (index == 2)
   1730c:	2a02      	cmp	r2, #2
{
   1730e:	b570      	push	{r4, r5, r6, lr}
   17310:	4606      	mov	r6, r0
   17312:	460c      	mov	r4, r1
   17314:	461d      	mov	r5, r3
    if (index == 2)
   17316:	d10a      	bne.n	1732e <cosem_setAssociationShortName+0x22>
        oa_empty(&object->objectList);
   17318:	3410      	adds	r4, #16
   1731a:	4620      	mov	r0, r4
   1731c:	f004 fc2e 	bl	1bb7c <oa_empty>
        ret = cosem_parseSNObjects(settings, value->byteArr, &object->objectList);
   17320:	68a9      	ldr	r1, [r5, #8]
   17322:	4622      	mov	r2, r4
   17324:	4630      	mov	r0, r6
}
   17326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = cosem_parseSNObjects(settings, value->byteArr, &object->objectList);
   1732a:	f7ff bf45 	b.w	171b8 <cosem_parseSNObjects>
    else if (index == 3)
   1732e:	2a03      	cmp	r2, #3
   17330:	d106      	bne.n	17340 <cosem_setAssociationShortName+0x34>
        ret = updateSNAccessRights(&object->objectList, value->Arr);
   17332:	f104 0010 	add.w	r0, r4, #16
   17336:	6899      	ldr	r1, [r3, #8]
}
   17338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = updateSNAccessRights(&object->objectList, value->Arr);
   1733c:	f7ff bf10 	b.w	17160 <updateSNAccessRights>
    else if (index == 4)
   17340:	2a04      	cmp	r2, #4
   17342:	d10f      	bne.n	17364 <cosem_setAssociationShortName+0x58>
        if (bb_size(value->byteArr) != 6)
   17344:	6898      	ldr	r0, [r3, #8]
   17346:	f7f6 fff6 	bl	e336 <bb_size>
   1734a:	2806      	cmp	r0, #6
   1734c:	d10d      	bne.n	1736a <cosem_setAssociationShortName+0x5e>
            ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   1734e:	68aa      	ldr	r2, [r5, #8]
   17350:	f104 0318 	add.w	r3, r4, #24
   17354:	f106 0098 	add.w	r0, r6, #152	; 0x98
   17358:	6812      	ldr	r2, [r2, #0]
}
   1735a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SECURITY_SETUP, value->byteArr->data, (gxObject**)&object->securitySetup);
   1735e:	2140      	movs	r1, #64	; 0x40
   17360:	f004 bc44 	b.w	1bbec <oa_findByLN>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17364:	f44f 7081 	mov.w	r0, #258	; 0x102
}
   17368:	bd70      	pop	{r4, r5, r6, pc}
            ret = DLMS_ERROR_CODE_UNMATCH_TYPE;
   1736a:	200c      	movs	r0, #12
    return ret;
   1736c:	e7fc      	b.n	17368 <cosem_setAssociationShortName+0x5c>

0001736e <cosem_setAutoAnswer>:
{
   1736e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   17372:	2902      	cmp	r1, #2
{
   17374:	b08a      	sub	sp, #40	; 0x28
   17376:	4605      	mov	r5, r0
   17378:	4616      	mov	r6, r2
    if (index == 2)
   1737a:	d108      	bne.n	1738e <cosem_setAutoAnswer+0x20>
        object->mode = (DLMS_AUTO_ANSWER_MODE)var_toInteger(value);
   1737c:	4610      	mov	r0, r2
   1737e:	f004 fff2 	bl	1c366 <var_toInteger>
   17382:	74a8      	strb	r0, [r5, #18]
    int ret = 0, pos;
   17384:	2400      	movs	r4, #0
}
   17386:	4620      	mov	r0, r4
   17388:	b00a      	add	sp, #40	; 0x28
   1738a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (index == 3)
   1738e:	2903      	cmp	r1, #3
   17390:	d15b      	bne.n	1744a <cosem_setAutoAnswer+0xdc>
        arr_clearKeyValuePair(&object->listeningWindow);
   17392:	3514      	adds	r5, #20
   17394:	4628      	mov	r0, r5
   17396:	f7fa fc11 	bl	11bbc <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   1739a:	68b3      	ldr	r3, [r6, #8]
   1739c:	2b00      	cmp	r3, #0
   1739e:	d0f1      	beq.n	17384 <cosem_setAutoAnswer+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   173a0:	2700      	movs	r7, #0
   173a2:	e04d      	b.n	17440 <cosem_setAutoAnswer+0xd2>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   173a4:	466a      	mov	r2, sp
   173a6:	4639      	mov	r1, r7
   173a8:	f004 fe63 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   173ac:	4604      	mov	r4, r0
   173ae:	2800      	cmp	r0, #0
   173b0:	d1e9      	bne.n	17386 <cosem_setAutoAnswer+0x18>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   173b2:	9b00      	ldr	r3, [sp, #0]
   173b4:	4601      	mov	r1, r0
   173b6:	aa01      	add	r2, sp, #4
   173b8:	6898      	ldr	r0, [r3, #8]
   173ba:	f004 fe5a 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   173be:	4604      	mov	r4, r0
   173c0:	2800      	cmp	r0, #0
   173c2:	d1e0      	bne.n	17386 <cosem_setAutoAnswer+0x18>
                var_init(&start);
   173c4:	a802      	add	r0, sp, #8
   173c6:	f004 fc7a 	bl	1bcbe <var_init>
                var_init(&end);
   173ca:	a806      	add	r0, sp, #24
   173cc:	f004 fc77 	bl	1bcbe <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start);
   173d0:	9801      	ldr	r0, [sp, #4]
   173d2:	aa02      	add	r2, sp, #8
   173d4:	2119      	movs	r1, #25
   173d6:	f7fa f87d 	bl	114d4 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   173da:	4604      	mov	r4, r0
   173dc:	2800      	cmp	r0, #0
   173de:	d1d2      	bne.n	17386 <cosem_setAutoAnswer+0x18>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   173e0:	9b00      	ldr	r3, [sp, #0]
   173e2:	aa01      	add	r2, sp, #4
   173e4:	6898      	ldr	r0, [r3, #8]
   173e6:	2101      	movs	r1, #1
   173e8:	f004 fe43 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   173ec:	4604      	mov	r4, r0
   173ee:	2800      	cmp	r0, #0
   173f0:	d1c9      	bne.n	17386 <cosem_setAutoAnswer+0x18>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end);
   173f2:	9801      	ldr	r0, [sp, #4]
   173f4:	aa06      	add	r2, sp, #24
   173f6:	2119      	movs	r1, #25
   173f8:	f7fa f86c 	bl	114d4 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   173fc:	4604      	mov	r4, r0
   173fe:	2800      	cmp	r0, #0
   17400:	d1c1      	bne.n	17386 <cosem_setAutoAnswer+0x18>
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   17402:	200c      	movs	r0, #12
   17404:	f7f5 ff76 	bl	d2f4 <malloc>
   17408:	4604      	mov	r4, r0
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   1740a:	200c      	movs	r0, #12
   1740c:	f7f5 ff72 	bl	d2f4 <malloc>
                time_copy(s, start.dateTime);
   17410:	9904      	ldr	r1, [sp, #16]
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   17412:	4680      	mov	r8, r0
                time_copy(s, start.dateTime);
   17414:	4620      	mov	r0, r4
   17416:	f7f8 f8aa 	bl	f56e <time_copy>
                time_copy(e, end.dateTime);
   1741a:	9908      	ldr	r1, [sp, #32]
   1741c:	4640      	mov	r0, r8
   1741e:	f7f8 f8a6 	bl	f56e <time_copy>
                arr_push(&object->listeningWindow, key_init(s, e));
   17422:	4641      	mov	r1, r8
   17424:	4620      	mov	r0, r4
   17426:	f7fd fe84 	bl	15132 <key_init>
   1742a:	4601      	mov	r1, r0
   1742c:	4628      	mov	r0, r5
   1742e:	f7fa fb77 	bl	11b20 <arr_push>
                var_clear(&start);
   17432:	a802      	add	r0, sp, #8
   17434:	f004 fd9f 	bl	1bf76 <var_clear>
                var_clear(&end);
   17438:	a806      	add	r0, sp, #24
   1743a:	f004 fd9c 	bl	1bf76 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1743e:	3701      	adds	r7, #1
   17440:	68b0      	ldr	r0, [r6, #8]
   17442:	88c3      	ldrh	r3, [r0, #6]
   17444:	42bb      	cmp	r3, r7
   17446:	d1ad      	bne.n	173a4 <cosem_setAutoAnswer+0x36>
   17448:	e79c      	b.n	17384 <cosem_setAutoAnswer+0x16>
    else if (index == 4)
   1744a:	2904      	cmp	r1, #4
   1744c:	d105      	bne.n	1745a <cosem_setAutoAnswer+0xec>
        object->status = (DLMS_AUTO_ANSWER_STATUS)var_toInteger(value);
   1744e:	4610      	mov	r0, r2
   17450:	f004 ff89 	bl	1c366 <var_toInteger>
   17454:	f885 0020 	strb.w	r0, [r5, #32]
   17458:	e794      	b.n	17384 <cosem_setAutoAnswer+0x16>
    else if (index == 5)
   1745a:	2905      	cmp	r1, #5
   1745c:	d105      	bne.n	1746a <cosem_setAutoAnswer+0xfc>
        object->numberOfCalls = (unsigned char)var_toInteger(value);
   1745e:	4610      	mov	r0, r2
   17460:	f004 ff81 	bl	1c366 <var_toInteger>
   17464:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
   17468:	e78c      	b.n	17384 <cosem_setAutoAnswer+0x16>
    else if (index == 6)
   1746a:	2906      	cmp	r1, #6
   1746c:	d119      	bne.n	174a2 <cosem_setAutoAnswer+0x134>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1746e:	68b0      	ldr	r0, [r6, #8]
   17470:	466a      	mov	r2, sp
   17472:	2100      	movs	r1, #0
   17474:	f004 fdfd 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17478:	4604      	mov	r4, r0
   1747a:	2800      	cmp	r0, #0
   1747c:	d183      	bne.n	17386 <cosem_setAutoAnswer+0x18>
        object->numberOfRingsInListeningWindow = (unsigned char)var_toInteger(tmp);
   1747e:	9800      	ldr	r0, [sp, #0]
   17480:	f004 ff71 	bl	1c366 <var_toInteger>
   17484:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   17486:	68b0      	ldr	r0, [r6, #8]
   17488:	466a      	mov	r2, sp
   1748a:	2101      	movs	r1, #1
   1748c:	f004 fdf1 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17490:	4604      	mov	r4, r0
   17492:	2800      	cmp	r0, #0
   17494:	f47f af77 	bne.w	17386 <cosem_setAutoAnswer+0x18>
        object->numberOfRingsOutListeningWindow = (unsigned char)var_toInteger(tmp);
   17498:	9800      	ldr	r0, [sp, #0]
   1749a:	f004 ff64 	bl	1c366 <var_toInteger>
   1749e:	7468      	strb	r0, [r5, #17]
   174a0:	e771      	b.n	17386 <cosem_setAutoAnswer+0x18>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   174a2:	f44f 7481 	mov.w	r4, #258	; 0x102
   174a6:	e76e      	b.n	17386 <cosem_setAutoAnswer+0x18>

000174a8 <cosem_setAutoConnect>:
{
   174a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   174ac:	2902      	cmp	r1, #2
{
   174ae:	b08b      	sub	sp, #44	; 0x2c
   174b0:	4605      	mov	r5, r0
   174b2:	4616      	mov	r6, r2
    if (index == 2)
   174b4:	d108      	bne.n	174c8 <cosem_setAutoConnect+0x20>
        object->mode = (DLMS_AUTO_CONNECT_MODE)var_toInteger(value);
   174b6:	4610      	mov	r0, r2
   174b8:	f004 ff55 	bl	1c366 <var_toInteger>
   174bc:	7428      	strb	r0, [r5, #16]
    int ret = 0, pos;
   174be:	2400      	movs	r4, #0
}
   174c0:	4620      	mov	r0, r4
   174c2:	b00b      	add	sp, #44	; 0x2c
   174c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   174c8:	2903      	cmp	r1, #3
   174ca:	d105      	bne.n	174d8 <cosem_setAutoConnect+0x30>
        object->repetitions = (unsigned char)var_toInteger(value);
   174cc:	4610      	mov	r0, r2
   174ce:	f004 ff4a 	bl	1c366 <var_toInteger>
   174d2:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   174d6:	e7f2      	b.n	174be <cosem_setAutoConnect+0x16>
    else if (index == 4)
   174d8:	2904      	cmp	r1, #4
   174da:	d104      	bne.n	174e6 <cosem_setAutoConnect+0x3e>
        object->repetitionDelay = (uint16_t)var_toInteger(value);
   174dc:	4610      	mov	r0, r2
   174de:	f004 ff42 	bl	1c366 <var_toInteger>
   174e2:	85a8      	strh	r0, [r5, #44]	; 0x2c
   174e4:	e7eb      	b.n	174be <cosem_setAutoConnect+0x16>
    else if (index == 5)
   174e6:	2905      	cmp	r1, #5
   174e8:	d15a      	bne.n	175a0 <cosem_setAutoConnect+0xf8>
        arr_clearKeyValuePair(&object->callingWindow);
   174ea:	3514      	adds	r5, #20
   174ec:	4628      	mov	r0, r5
   174ee:	f7fa fb65 	bl	11bbc <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   174f2:	68b3      	ldr	r3, [r6, #8]
   174f4:	2b00      	cmp	r3, #0
   174f6:	d0e2      	beq.n	174be <cosem_setAutoConnect+0x16>
            if ((ret = arr_capacity(&object->callingWindow, value->Arr->size)) == 0)
   174f8:	88d9      	ldrh	r1, [r3, #6]
   174fa:	4628      	mov	r0, r5
   174fc:	f7fa faea 	bl	11ad4 <arr_capacity>
   17500:	4604      	mov	r4, r0
   17502:	2800      	cmp	r0, #0
   17504:	d1dc      	bne.n	174c0 <cosem_setAutoConnect+0x18>
                for (pos = 0; pos != value->Arr->size; ++pos)
   17506:	68b0      	ldr	r0, [r6, #8]
   17508:	88c3      	ldrh	r3, [r0, #6]
   1750a:	42a3      	cmp	r3, r4
   1750c:	d0d7      	beq.n	174be <cosem_setAutoConnect+0x16>
                    ret = va_getByIndex(value->Arr, pos, &tmp);
   1750e:	466a      	mov	r2, sp
   17510:	4621      	mov	r1, r4
   17512:	f004 fdae 	bl	1c072 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   17516:	2800      	cmp	r0, #0
   17518:	d140      	bne.n	1759c <cosem_setAutoConnect+0xf4>
                    ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   1751a:	9b00      	ldr	r3, [sp, #0]
   1751c:	4601      	mov	r1, r0
   1751e:	aa01      	add	r2, sp, #4
   17520:	6898      	ldr	r0, [r3, #8]
   17522:	f004 fda6 	bl	1c072 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   17526:	2800      	cmp	r0, #0
   17528:	d138      	bne.n	1759c <cosem_setAutoConnect+0xf4>
                    var_init(&start);
   1752a:	a802      	add	r0, sp, #8
   1752c:	f004 fbc7 	bl	1bcbe <var_init>
                    var_init(&end);
   17530:	a806      	add	r0, sp, #24
   17532:	f004 fbc4 	bl	1bcbe <var_init>
                    ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start);
   17536:	9801      	ldr	r0, [sp, #4]
   17538:	aa02      	add	r2, sp, #8
   1753a:	2119      	movs	r1, #25
   1753c:	f7f9 ffca 	bl	114d4 <dlms_changeType2>
                    if (ret != DLMS_ERROR_CODE_OK)
   17540:	bb60      	cbnz	r0, 1759c <cosem_setAutoConnect+0xf4>
                    ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17542:	9b00      	ldr	r3, [sp, #0]
   17544:	aa01      	add	r2, sp, #4
   17546:	6898      	ldr	r0, [r3, #8]
   17548:	2101      	movs	r1, #1
   1754a:	f004 fd92 	bl	1c072 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   1754e:	bb28      	cbnz	r0, 1759c <cosem_setAutoConnect+0xf4>
                    ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end);
   17550:	9801      	ldr	r0, [sp, #4]
   17552:	aa06      	add	r2, sp, #24
   17554:	2119      	movs	r1, #25
   17556:	f7f9 ffbd 	bl	114d4 <dlms_changeType2>
                    if (ret != DLMS_ERROR_CODE_OK)
   1755a:	b9f8      	cbnz	r0, 1759c <cosem_setAutoConnect+0xf4>
                    s = (gxtime*)gxmalloc(sizeof(gxtime));
   1755c:	200c      	movs	r0, #12
   1755e:	f7f5 fec9 	bl	d2f4 <malloc>
   17562:	4680      	mov	r8, r0
                    e = (gxtime*)gxmalloc(sizeof(gxtime));
   17564:	200c      	movs	r0, #12
   17566:	f7f5 fec5 	bl	d2f4 <malloc>
                    arr_push(&object->callingWindow, key_init(s, e));
   1756a:	4601      	mov	r1, r0
                    e = (gxtime*)gxmalloc(sizeof(gxtime));
   1756c:	4607      	mov	r7, r0
                    arr_push(&object->callingWindow, key_init(s, e));
   1756e:	4640      	mov	r0, r8
   17570:	f7fd fddf 	bl	15132 <key_init>
   17574:	4601      	mov	r1, r0
   17576:	4628      	mov	r0, r5
   17578:	f7fa fad2 	bl	11b20 <arr_push>
                    time_copy(s, start.dateTime);
   1757c:	9904      	ldr	r1, [sp, #16]
   1757e:	4640      	mov	r0, r8
   17580:	f7f7 fff5 	bl	f56e <time_copy>
                    time_copy(e, end.dateTime);
   17584:	9908      	ldr	r1, [sp, #32]
   17586:	4638      	mov	r0, r7
   17588:	f7f7 fff1 	bl	f56e <time_copy>
                    var_clear(&start);
   1758c:	a802      	add	r0, sp, #8
   1758e:	f004 fcf2 	bl	1bf76 <var_clear>
                    var_clear(&end);
   17592:	a806      	add	r0, sp, #24
   17594:	f004 fcef 	bl	1bf76 <var_clear>
                for (pos = 0; pos != value->Arr->size; ++pos)
   17598:	3401      	adds	r4, #1
   1759a:	e7b4      	b.n	17506 <cosem_setAutoConnect+0x5e>
                        return ret;
   1759c:	4604      	mov	r4, r0
   1759e:	e78f      	b.n	174c0 <cosem_setAutoConnect+0x18>
    else if (index == 6)
   175a0:	2906      	cmp	r1, #6
   175a2:	d12c      	bne.n	175fe <cosem_setAutoConnect+0x156>
        arr_clearStrings(&object->destinations);
   175a4:	3520      	adds	r5, #32
   175a6:	4628      	mov	r0, r5
   175a8:	f7fa fb26 	bl	11bf8 <arr_clearStrings>
        if (value->Arr != NULL)
   175ac:	68b3      	ldr	r3, [r6, #8]
   175ae:	2b00      	cmp	r3, #0
   175b0:	d085      	beq.n	174be <cosem_setAutoConnect+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   175b2:	2700      	movs	r7, #0
   175b4:	e01e      	b.n	175f4 <cosem_setAutoConnect+0x14c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   175b6:	aa06      	add	r2, sp, #24
   175b8:	4639      	mov	r1, r7
   175ba:	f004 fd5a 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   175be:	4604      	mov	r4, r0
   175c0:	2800      	cmp	r0, #0
   175c2:	f47f af7d 	bne.w	174c0 <cosem_setAutoConnect+0x18>
                str = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   175c6:	200c      	movs	r0, #12
   175c8:	f7f5 fe94 	bl	d2f4 <malloc>
   175cc:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(str);
   175ce:	f7f6 feb5 	bl	e33c <bb_init>
                bb_set2(str, tmp->byteArr, 0, bb_size(tmp->byteArr));
   175d2:	9b06      	ldr	r3, [sp, #24]
   175d4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   175d8:	4648      	mov	r0, r9
   175da:	f7f6 feac 	bl	e336 <bb_size>
   175de:	4622      	mov	r2, r4
   175e0:	4603      	mov	r3, r0
   175e2:	4649      	mov	r1, r9
   175e4:	4640      	mov	r0, r8
   175e6:	f7f7 f827 	bl	e638 <bb_set2>
                arr_push(&object->destinations, str);
   175ea:	4641      	mov	r1, r8
   175ec:	4628      	mov	r0, r5
   175ee:	f7fa fa97 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   175f2:	3701      	adds	r7, #1
   175f4:	68b0      	ldr	r0, [r6, #8]
   175f6:	88c3      	ldrh	r3, [r0, #6]
   175f8:	42bb      	cmp	r3, r7
   175fa:	d1dc      	bne.n	175b6 <cosem_setAutoConnect+0x10e>
   175fc:	e75f      	b.n	174be <cosem_setAutoConnect+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   175fe:	f44f 7481 	mov.w	r4, #258	; 0x102
   17602:	e75d      	b.n	174c0 <cosem_setAutoConnect+0x18>

00017604 <cosem_setDemandRegister>:
    if (index == 2)
   17604:	2902      	cmp	r1, #2
{
   17606:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   17608:	4605      	mov	r5, r0
   1760a:	4616      	mov	r6, r2
    if (index == 2)
   1760c:	d107      	bne.n	1761e <cosem_setDemandRegister+0x1a>
        ret = var_copy(&object->currentAverageValue, value);
   1760e:	4611      	mov	r1, r2
   17610:	3010      	adds	r0, #16
        ret = var_copy(&object->lastAverageValue, value);
   17612:	f7ec ffcb 	bl	45ac <var_copy>
   17616:	4604      	mov	r4, r0
}
   17618:	4620      	mov	r0, r4
   1761a:	b004      	add	sp, #16
   1761c:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   1761e:	2903      	cmp	r1, #3
   17620:	d102      	bne.n	17628 <cosem_setDemandRegister+0x24>
        ret = var_copy(&object->lastAverageValue, value);
   17622:	4611      	mov	r1, r2
   17624:	3020      	adds	r0, #32
   17626:	e7f4      	b.n	17612 <cosem_setDemandRegister+0xe>
    else if (index == 4)
   17628:	2904      	cmp	r1, #4
   1762a:	d120      	bne.n	1766e <cosem_setDemandRegister+0x6a>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   1762c:	7813      	ldrb	r3, [r2, #0]
   1762e:	2b02      	cmp	r3, #2
   17630:	d171      	bne.n	17716 <cosem_setDemandRegister+0x112>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   17632:	68b0      	ldr	r0, [r6, #8]
   17634:	466a      	mov	r2, sp
   17636:	2100      	movs	r1, #0
   17638:	f004 fd1b 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1763c:	4604      	mov	r4, r0
   1763e:	2800      	cmp	r0, #0
   17640:	d1ea      	bne.n	17618 <cosem_setDemandRegister+0x14>
        object->scaler = (char)var_toInteger(tmp);
   17642:	9800      	ldr	r0, [sp, #0]
   17644:	f004 fe8f 	bl	1c366 <var_toInteger>
   17648:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
        ret = va_getByIndex(value->Arr, 1, &tmp);
   1764c:	68b0      	ldr	r0, [r6, #8]
   1764e:	466a      	mov	r2, sp
   17650:	2101      	movs	r1, #1
   17652:	f004 fd0e 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17656:	4604      	mov	r4, r0
   17658:	2800      	cmp	r0, #0
   1765a:	d1dd      	bne.n	17618 <cosem_setDemandRegister+0x14>
        object->unit = (unsigned char)var_toInteger(tmp);
   1765c:	9800      	ldr	r0, [sp, #0]
   1765e:	f004 fe82 	bl	1c366 <var_toInteger>
        object->unitRead = 1;
   17662:	2301      	movs	r3, #1
        object->unit = (unsigned char)var_toInteger(tmp);
   17664:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
        object->unitRead = 1;
   17668:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
   1766c:	e7d4      	b.n	17618 <cosem_setDemandRegister+0x14>
    else if (index == 5)
   1766e:	2905      	cmp	r1, #5
   17670:	d102      	bne.n	17678 <cosem_setDemandRegister+0x74>
        ret = var_copy(&object->status, value);
   17672:	4611      	mov	r1, r2
   17674:	3038      	adds	r0, #56	; 0x38
   17676:	e7cc      	b.n	17612 <cosem_setDemandRegister+0xe>
    else if (index == 6)
   17678:	2906      	cmp	r1, #6
   1767a:	d121      	bne.n	176c0 <cosem_setDemandRegister+0xbc>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1767c:	7813      	ldrb	r3, [r2, #0]
   1767e:	2b09      	cmp	r3, #9
   17680:	d118      	bne.n	176b4 <cosem_setDemandRegister+0xb0>
   17682:	6893      	ldr	r3, [r2, #8]
   17684:	b1b3      	cbz	r3, 176b4 <cosem_setDemandRegister+0xb0>
            ret = var_init(&tmp2);
   17686:	4668      	mov	r0, sp
   17688:	f004 fb19 	bl	1bcbe <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   1768c:	4604      	mov	r4, r0
   1768e:	2800      	cmp	r0, #0
   17690:	d1c2      	bne.n	17618 <cosem_setDemandRegister+0x14>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   17692:	466a      	mov	r2, sp
   17694:	2119      	movs	r1, #25
   17696:	4630      	mov	r0, r6
   17698:	f7f9 ff1c 	bl	114d4 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   1769c:	4604      	mov	r4, r0
   1769e:	2800      	cmp	r0, #0
   176a0:	d1ba      	bne.n	17618 <cosem_setDemandRegister+0x14>
            time_copy(&object->captureTime, tmp2.dateTime);
   176a2:	9902      	ldr	r1, [sp, #8]
   176a4:	f105 0048 	add.w	r0, r5, #72	; 0x48
            time_copy(&object->startTimeCurrent, tmp2.dateTime);
   176a8:	f7f7 ff61 	bl	f56e <time_copy>
            var_clear(&tmp2);
   176ac:	4668      	mov	r0, sp
   176ae:	f004 fc62 	bl	1bf76 <var_clear>
   176b2:	e7b1      	b.n	17618 <cosem_setDemandRegister+0x14>
            time_clear(&object->captureTime);
   176b4:	f105 0048 	add.w	r0, r5, #72	; 0x48
            time_clear(&object->startTimeCurrent);
   176b8:	f7f7 ff28 	bl	f50c <time_clear>
    int ret = DLMS_ERROR_CODE_OK;
   176bc:	2400      	movs	r4, #0
   176be:	e7ab      	b.n	17618 <cosem_setDemandRegister+0x14>
    else if (index == 7)
   176c0:	2907      	cmp	r1, #7
   176c2:	d119      	bne.n	176f8 <cosem_setDemandRegister+0xf4>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   176c4:	7813      	ldrb	r3, [r2, #0]
   176c6:	2b09      	cmp	r3, #9
   176c8:	d113      	bne.n	176f2 <cosem_setDemandRegister+0xee>
   176ca:	6893      	ldr	r3, [r2, #8]
   176cc:	b18b      	cbz	r3, 176f2 <cosem_setDemandRegister+0xee>
            ret = var_init(&tmp2);
   176ce:	4668      	mov	r0, sp
   176d0:	f004 faf5 	bl	1bcbe <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   176d4:	4604      	mov	r4, r0
   176d6:	2800      	cmp	r0, #0
   176d8:	d19e      	bne.n	17618 <cosem_setDemandRegister+0x14>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   176da:	466a      	mov	r2, sp
   176dc:	2119      	movs	r1, #25
   176de:	4630      	mov	r0, r6
   176e0:	f7f9 fef8 	bl	114d4 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   176e4:	4604      	mov	r4, r0
   176e6:	2800      	cmp	r0, #0
   176e8:	d196      	bne.n	17618 <cosem_setDemandRegister+0x14>
            time_copy(&object->startTimeCurrent, tmp2.dateTime);
   176ea:	9902      	ldr	r1, [sp, #8]
   176ec:	f105 0054 	add.w	r0, r5, #84	; 0x54
   176f0:	e7da      	b.n	176a8 <cosem_setDemandRegister+0xa4>
            time_clear(&object->startTimeCurrent);
   176f2:	f105 0054 	add.w	r0, r5, #84	; 0x54
   176f6:	e7df      	b.n	176b8 <cosem_setDemandRegister+0xb4>
    else if (index == 8)
   176f8:	2908      	cmp	r1, #8
   176fa:	d104      	bne.n	17706 <cosem_setDemandRegister+0x102>
        object->period = var_toInteger(value);
   176fc:	4610      	mov	r0, r2
   176fe:	f004 fe32 	bl	1c366 <var_toInteger>
   17702:	6668      	str	r0, [r5, #100]	; 0x64
   17704:	e7da      	b.n	176bc <cosem_setDemandRegister+0xb8>
    else if (index == 9)
   17706:	2909      	cmp	r1, #9
   17708:	d105      	bne.n	17716 <cosem_setDemandRegister+0x112>
        object->numberOfPeriods = (uint16_t)var_toInteger(value);
   1770a:	4610      	mov	r0, r2
   1770c:	f004 fe2b 	bl	1c366 <var_toInteger>
   17710:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
   17714:	e7d2      	b.n	176bc <cosem_setDemandRegister+0xb8>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17716:	f44f 7481 	mov.w	r4, #258	; 0x102
   1771a:	e77d      	b.n	17618 <cosem_setDemandRegister+0x14>

0001771c <cosem_setMacAddressSetup>:
    if (index == 2)
   1771c:	2902      	cmp	r1, #2
{
   1771e:	b570      	push	{r4, r5, r6, lr}
   17720:	4615      	mov	r5, r2
    if (index == 2)
   17722:	d110      	bne.n	17746 <cosem_setMacAddressSetup+0x2a>
        bb_clear(&object->macAddress);
   17724:	f100 0410 	add.w	r4, r0, #16
   17728:	4620      	mov	r0, r4
   1772a:	f7f6 ffca 	bl	e6c2 <bb_clear>
        ret = bb_set2(&object->macAddress, value->byteArr, 0, bb_size(value->byteArr));
   1772e:	68ad      	ldr	r5, [r5, #8]
   17730:	4628      	mov	r0, r5
   17732:	f7f6 fe00 	bl	e336 <bb_size>
   17736:	4629      	mov	r1, r5
   17738:	4603      	mov	r3, r0
   1773a:	2200      	movs	r2, #0
   1773c:	4620      	mov	r0, r4
}
   1773e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->macAddress, value->byteArr, 0, bb_size(value->byteArr));
   17742:	f7f6 bf79 	b.w	e638 <bb_set2>
}
   17746:	f44f 7081 	mov.w	r0, #258	; 0x102
   1774a:	bd70      	pop	{r4, r5, r6, pc}

0001774c <cosem_setExtendedRegister>:
    if (index == 2)
   1774c:	2902      	cmp	r1, #2
{
   1774e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   17750:	4606      	mov	r6, r0
   17752:	4615      	mov	r5, r2
    if (index == 2)
   17754:	d105      	bne.n	17762 <cosem_setExtendedRegister+0x16>
        ret = var_copy(&object->value, value);
   17756:	4611      	mov	r1, r2
   17758:	3010      	adds	r0, #16
        ret = var_copy(&object->status, value);
   1775a:	f7ec ff27 	bl	45ac <var_copy>
   1775e:	4604      	mov	r4, r0
   17760:	e01c      	b.n	1779c <cosem_setExtendedRegister+0x50>
    else if (index == 3)
   17762:	2903      	cmp	r1, #3
   17764:	d11d      	bne.n	177a2 <cosem_setExtendedRegister+0x56>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   17766:	7813      	ldrb	r3, [r2, #0]
   17768:	2b02      	cmp	r3, #2
   1776a:	d141      	bne.n	177f0 <cosem_setExtendedRegister+0xa4>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1776c:	68a8      	ldr	r0, [r5, #8]
   1776e:	466a      	mov	r2, sp
   17770:	2100      	movs	r1, #0
   17772:	f004 fc7e 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17776:	4604      	mov	r4, r0
   17778:	b980      	cbnz	r0, 1779c <cosem_setExtendedRegister+0x50>
        object->scaler = (char)var_toInteger(tmp);
   1777a:	9800      	ldr	r0, [sp, #0]
   1777c:	f004 fdf3 	bl	1c366 <var_toInteger>
   17780:	f886 0020 	strb.w	r0, [r6, #32]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   17784:	68a8      	ldr	r0, [r5, #8]
   17786:	466a      	mov	r2, sp
   17788:	2101      	movs	r1, #1
   1778a:	f004 fc72 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1778e:	4604      	mov	r4, r0
   17790:	b920      	cbnz	r0, 1779c <cosem_setExtendedRegister+0x50>
        object->unit = (unsigned char)var_toInteger(tmp);
   17792:	9800      	ldr	r0, [sp, #0]
   17794:	f004 fde7 	bl	1c366 <var_toInteger>
   17798:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
}
   1779c:	4620      	mov	r0, r4
   1779e:	b004      	add	sp, #16
   177a0:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 4)
   177a2:	2904      	cmp	r1, #4
   177a4:	d102      	bne.n	177ac <cosem_setExtendedRegister+0x60>
        ret = var_copy(&object->status, value);
   177a6:	4611      	mov	r1, r2
   177a8:	3030      	adds	r0, #48	; 0x30
   177aa:	e7d6      	b.n	1775a <cosem_setExtendedRegister+0xe>
    else if (index == 5)
   177ac:	2905      	cmp	r1, #5
   177ae:	d11f      	bne.n	177f0 <cosem_setExtendedRegister+0xa4>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   177b0:	7813      	ldrb	r3, [r2, #0]
   177b2:	2b09      	cmp	r3, #9
   177b4:	d116      	bne.n	177e4 <cosem_setExtendedRegister+0x98>
            ret = var_init(&tmp2);
   177b6:	4668      	mov	r0, sp
   177b8:	f004 fa81 	bl	1bcbe <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   177bc:	4604      	mov	r4, r0
   177be:	2800      	cmp	r0, #0
   177c0:	d1ec      	bne.n	1779c <cosem_setExtendedRegister+0x50>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   177c2:	466a      	mov	r2, sp
   177c4:	2119      	movs	r1, #25
   177c6:	4628      	mov	r0, r5
   177c8:	f7f9 fe84 	bl	114d4 <dlms_changeType2>
            if (ret == 0)
   177cc:	4604      	mov	r4, r0
   177ce:	2800      	cmp	r0, #0
   177d0:	d1e4      	bne.n	1779c <cosem_setExtendedRegister+0x50>
                time_copy(&object->captureTime, tmp2.dateTime);
   177d2:	f106 0024 	add.w	r0, r6, #36	; 0x24
   177d6:	9902      	ldr	r1, [sp, #8]
   177d8:	f7f7 fec9 	bl	f56e <time_copy>
                var_clear(&tmp2);
   177dc:	4668      	mov	r0, sp
   177de:	f004 fbca 	bl	1bf76 <var_clear>
   177e2:	e7db      	b.n	1779c <cosem_setExtendedRegister+0x50>
            time_copy(&object->captureTime, value->dateTime);
   177e4:	6891      	ldr	r1, [r2, #8]
   177e6:	3024      	adds	r0, #36	; 0x24
   177e8:	f7f7 fec1 	bl	f56e <time_copy>
    int ret = DLMS_ERROR_CODE_OK;
   177ec:	2400      	movs	r4, #0
   177ee:	e7d5      	b.n	1779c <cosem_setExtendedRegister+0x50>
            return DLMS_ERROR_CODE_INVALID_PARAMETER;
   177f0:	f44f 7481 	mov.w	r4, #258	; 0x102
   177f4:	e7d2      	b.n	1779c <cosem_setExtendedRegister+0x50>

000177f6 <cosem_setGprsSetup>:
    if (index == 2)
   177f6:	2902      	cmp	r1, #2
{
   177f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   177fa:	4605      	mov	r5, r0
   177fc:	460f      	mov	r7, r1
   177fe:	4616      	mov	r6, r2
    if (index == 2)
   17800:	d11b      	bne.n	1783a <cosem_setGprsSetup+0x44>
        bb_clear(&object->apn);
   17802:	3510      	adds	r5, #16
   17804:	4628      	mov	r0, r5
   17806:	f7f6 ff5c 	bl	e6c2 <bb_clear>
        if (value->vt == DLMS_DATA_TYPE_STRING)
   1780a:	7833      	ldrb	r3, [r6, #0]
   1780c:	2b0a      	cmp	r3, #10
   1780e:	d109      	bne.n	17824 <cosem_setGprsSetup+0x2e>
            bb_set(&object->apn, (unsigned char*)value->strVal->data, value->strVal->size);
   17810:	68b3      	ldr	r3, [r6, #8]
   17812:	4628      	mov	r0, r5
   17814:	88da      	ldrh	r2, [r3, #6]
   17816:	6819      	ldr	r1, [r3, #0]
   17818:	f7f6 fedf 	bl	e5da <bb_set>
    return DLMS_ERROR_CODE_OK;
   1781c:	2400      	movs	r4, #0
}
   1781e:	4620      	mov	r0, r4
   17820:	b003      	add	sp, #12
   17822:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bb_set2(&object->apn, value->byteArr, 0, bb_size(value->byteArr));
   17824:	68b4      	ldr	r4, [r6, #8]
   17826:	4620      	mov	r0, r4
   17828:	f7f6 fd85 	bl	e336 <bb_size>
   1782c:	2200      	movs	r2, #0
   1782e:	4603      	mov	r3, r0
   17830:	4621      	mov	r1, r4
   17832:	4628      	mov	r0, r5
   17834:	f7f6 ff00 	bl	e638 <bb_set2>
   17838:	e7f0      	b.n	1781c <cosem_setGprsSetup+0x26>
    else if (index == 3)
   1783a:	2903      	cmp	r1, #3
   1783c:	d102      	bne.n	17844 <cosem_setGprsSetup+0x4e>
        object->pinCode = value->uiVal;
   1783e:	8913      	ldrh	r3, [r2, #8]
   17840:	8383      	strh	r3, [r0, #28]
   17842:	e7eb      	b.n	1781c <cosem_setGprsSetup+0x26>
    else if (index == 4)
   17844:	2904      	cmp	r1, #4
   17846:	f040 809f 	bne.w	17988 <cosem_setGprsSetup+0x192>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1784a:	68b0      	ldr	r0, [r6, #8]
   1784c:	466a      	mov	r2, sp
   1784e:	2100      	movs	r1, #0
   17850:	f004 fc0f 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17854:	4604      	mov	r4, r0
   17856:	2800      	cmp	r0, #0
   17858:	d1e1      	bne.n	1781e <cosem_setGprsSetup+0x28>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   1785a:	9b00      	ldr	r3, [sp, #0]
   1785c:	4601      	mov	r1, r0
   1785e:	aa01      	add	r2, sp, #4
   17860:	6898      	ldr	r0, [r3, #8]
   17862:	f004 fc06 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17866:	4604      	mov	r4, r0
   17868:	2800      	cmp	r0, #0
   1786a:	d1d8      	bne.n	1781e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   1786c:	9801      	ldr	r0, [sp, #4]
   1786e:	f004 fd7a 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17872:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   17874:	77a8      	strb	r0, [r5, #30]
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17876:	6898      	ldr	r0, [r3, #8]
   17878:	aa01      	add	r2, sp, #4
   1787a:	2101      	movs	r1, #1
   1787c:	f004 fbf9 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17880:	4604      	mov	r4, r0
   17882:	2800      	cmp	r0, #0
   17884:	d1cb      	bne.n	1781e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   17886:	9801      	ldr	r0, [sp, #4]
   17888:	f004 fd6d 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1788c:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   1788e:	77e8      	strb	r0, [r5, #31]
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17890:	6898      	ldr	r0, [r3, #8]
   17892:	aa01      	add	r2, sp, #4
   17894:	2102      	movs	r1, #2
   17896:	f004 fbec 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1789a:	4604      	mov	r4, r0
   1789c:	2800      	cmp	r0, #0
   1789e:	d1be      	bne.n	1781e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   178a0:	9801      	ldr	r0, [sp, #4]
   178a2:	f004 fd60 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   178a6:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   178a8:	f885 0020 	strb.w	r0, [r5, #32]
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   178ac:	6898      	ldr	r0, [r3, #8]
   178ae:	aa01      	add	r2, sp, #4
   178b0:	2103      	movs	r1, #3
   178b2:	f004 fbde 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   178b6:	4604      	mov	r4, r0
   178b8:	2800      	cmp	r0, #0
   178ba:	d1b0      	bne.n	1781e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   178bc:	9801      	ldr	r0, [sp, #4]
   178be:	f004 fd52 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   178c2:	9b00      	ldr	r3, [sp, #0]
        object->defaultQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   178c4:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   178c8:	6898      	ldr	r0, [r3, #8]
   178ca:	aa01      	add	r2, sp, #4
   178cc:	4639      	mov	r1, r7
   178ce:	f004 fbd0 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   178d2:	4604      	mov	r4, r0
   178d4:	2800      	cmp	r0, #0
   178d6:	d1a2      	bne.n	1781e <cosem_setGprsSetup+0x28>
        object->defaultQualityOfService.meanThroughput = (unsigned char)var_toInteger(tmp3);
   178d8:	9801      	ldr	r0, [sp, #4]
   178da:	f004 fd44 	bl	1c366 <var_toInteger>
   178de:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
        ret = va_getByIndex(value->Arr, 1, &tmp);
   178e2:	68b0      	ldr	r0, [r6, #8]
   178e4:	466a      	mov	r2, sp
   178e6:	2101      	movs	r1, #1
   178e8:	f004 fbc3 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   178ec:	4604      	mov	r4, r0
   178ee:	2800      	cmp	r0, #0
   178f0:	d195      	bne.n	1781e <cosem_setGprsSetup+0x28>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   178f2:	9b00      	ldr	r3, [sp, #0]
   178f4:	aa01      	add	r2, sp, #4
   178f6:	6898      	ldr	r0, [r3, #8]
   178f8:	2100      	movs	r1, #0
   178fa:	f004 fbba 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   178fe:	4604      	mov	r4, r0
   17900:	2800      	cmp	r0, #0
   17902:	d18c      	bne.n	1781e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   17904:	9801      	ldr	r0, [sp, #4]
   17906:	f004 fd2e 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1790a:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.precedence = (unsigned char)var_toInteger(tmp3);
   1790c:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17910:	6898      	ldr	r0, [r3, #8]
   17912:	aa01      	add	r2, sp, #4
   17914:	2101      	movs	r1, #1
   17916:	f004 fbac 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1791a:	4604      	mov	r4, r0
   1791c:	2800      	cmp	r0, #0
   1791e:	f47f af7e 	bne.w	1781e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   17922:	9801      	ldr	r0, [sp, #4]
   17924:	f004 fd1f 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17928:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.delay = (unsigned char)var_toInteger(tmp3);
   1792a:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1792e:	6898      	ldr	r0, [r3, #8]
   17930:	aa01      	add	r2, sp, #4
   17932:	2102      	movs	r1, #2
   17934:	f004 fb9d 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17938:	4604      	mov	r4, r0
   1793a:	2800      	cmp	r0, #0
   1793c:	f47f af6f 	bne.w	1781e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   17940:	9801      	ldr	r0, [sp, #4]
   17942:	f004 fd10 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   17946:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.reliability = (unsigned char)var_toInteger(tmp3);
   17948:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   1794c:	6898      	ldr	r0, [r3, #8]
   1794e:	aa01      	add	r2, sp, #4
   17950:	2103      	movs	r1, #3
   17952:	f004 fb8e 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17956:	4604      	mov	r4, r0
   17958:	2800      	cmp	r0, #0
   1795a:	f47f af60 	bne.w	1781e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   1795e:	9801      	ldr	r0, [sp, #4]
   17960:	f004 fd01 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   17964:	9b00      	ldr	r3, [sp, #0]
        object->requestedQualityOfService.peakThroughput = (unsigned char)var_toInteger(tmp3);
   17966:	f885 0026 	strb.w	r0, [r5, #38]	; 0x26
        ret = va_getByIndex(tmp->Arr, 4, &tmp3);
   1796a:	6898      	ldr	r0, [r3, #8]
   1796c:	aa01      	add	r2, sp, #4
   1796e:	2104      	movs	r1, #4
   17970:	f004 fb7f 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17974:	4604      	mov	r4, r0
   17976:	2800      	cmp	r0, #0
   17978:	f47f af51 	bne.w	1781e <cosem_setGprsSetup+0x28>
        object->requestedQualityOfService.meanThroughput = (unsigned char)var_toInteger(tmp3);
   1797c:	9801      	ldr	r0, [sp, #4]
   1797e:	f004 fcf2 	bl	1c366 <var_toInteger>
   17982:	f885 0027 	strb.w	r0, [r5, #39]	; 0x27
   17986:	e74a      	b.n	1781e <cosem_setGprsSetup+0x28>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17988:	f44f 7481 	mov.w	r4, #258	; 0x102
   1798c:	e747      	b.n	1781e <cosem_setGprsSetup+0x28>

0001798e <cosem_setSecuritySetup>:
{
   1798e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17992:	3902      	subs	r1, #2
   17994:	4606      	mov	r6, r0
   17996:	4617      	mov	r7, r2
   17998:	2904      	cmp	r1, #4
   1799a:	f200 8124 	bhi.w	17be6 <cosem_setSecuritySetup+0x258>
   1799e:	e8df f001 	tbb	[pc, r1]
   179a2:	0c03      	.short	0x0c03
   179a4:	2911      	.short	0x2911
   179a6:	33          	.byte	0x33
   179a7:	00          	.byte	0x00
        object->securityPolicy = (DLMS_SECURITY_POLICY)var_toInteger(value);
   179a8:	4610      	mov	r0, r2
   179aa:	f004 fcdc 	bl	1c366 <var_toInteger>
   179ae:	7430      	strb	r0, [r6, #16]
    int pos, ret = 0;
   179b0:	2400      	movs	r4, #0
}
   179b2:	4620      	mov	r0, r4
   179b4:	b002      	add	sp, #8
   179b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        object->securitySuite = (DLMS_SECURITY_SUITE)var_toInteger(value);
   179ba:	4610      	mov	r0, r2
   179bc:	f004 fcd3 	bl	1c366 <var_toInteger>
   179c0:	7470      	strb	r0, [r6, #17]
   179c2:	e7f5      	b.n	179b0 <cosem_setSecuritySetup+0x22>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   179c4:	6890      	ldr	r0, [r2, #8]
   179c6:	b908      	cbnz	r0, 179cc <cosem_setSecuritySetup+0x3e>
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
   179c8:	2409      	movs	r4, #9
   179ca:	e7f2      	b.n	179b2 <cosem_setSecuritySetup+0x24>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   179cc:	f7f6 fca9 	bl	e322 <bb_available>
   179d0:	2808      	cmp	r0, #8
   179d2:	4605      	mov	r5, r0
   179d4:	d1f8      	bne.n	179c8 <cosem_setSecuritySetup+0x3a>
            if ((ret = bb_clear(&object->clientSystemTitle)) != 0 ||
   179d6:	3620      	adds	r6, #32
            if ((ret = bb_clear(&object->serverSystemTitle)) != 0 ||
   179d8:	4630      	mov	r0, r6
   179da:	f7f6 fe72 	bl	e6c2 <bb_clear>
   179de:	4604      	mov	r4, r0
   179e0:	2800      	cmp	r0, #0
   179e2:	d1e6      	bne.n	179b2 <cosem_setSecuritySetup+0x24>
                (ret = bb_set2(&object->serverSystemTitle, value->byteArr, value->byteArr->position, 8)) != 0)
   179e4:	68b9      	ldr	r1, [r7, #8]
   179e6:	462b      	mov	r3, r5
   179e8:	890a      	ldrh	r2, [r1, #8]
   179ea:	4630      	mov	r0, r6
   179ec:	f7f6 fe24 	bl	e638 <bb_set2>
   179f0:	4604      	mov	r4, r0
   179f2:	e7de      	b.n	179b2 <cosem_setSecuritySetup+0x24>
        if (value->byteArr == NULL || bb_available(value->byteArr) != 8)
   179f4:	6890      	ldr	r0, [r2, #8]
   179f6:	2800      	cmp	r0, #0
   179f8:	d0e6      	beq.n	179c8 <cosem_setSecuritySetup+0x3a>
   179fa:	f7f6 fc92 	bl	e322 <bb_available>
   179fe:	2808      	cmp	r0, #8
   17a00:	4605      	mov	r5, r0
   17a02:	d1e1      	bne.n	179c8 <cosem_setSecuritySetup+0x3a>
            if ((ret = bb_clear(&object->serverSystemTitle)) != 0 ||
   17a04:	3614      	adds	r6, #20
   17a06:	e7e7      	b.n	179d8 <cosem_setSecuritySetup+0x4a>
        obj_clearCertificateInfo(&object->certificates);
   17a08:	362c      	adds	r6, #44	; 0x2c
   17a0a:	4630      	mov	r0, r6
   17a0c:	f7fd fe0c 	bl	15628 <obj_clearCertificateInfo>
        if (value->Arr != NULL)
   17a10:	68bb      	ldr	r3, [r7, #8]
   17a12:	2b00      	cmp	r3, #0
   17a14:	d0cc      	beq.n	179b0 <cosem_setSecuritySetup+0x22>
    gxCertificateInfo* it = NULL;
   17a16:	2500      	movs	r5, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   17a18:	46a9      	mov	r9, r5
   17a1a:	e064      	b.n	17ae6 <cosem_setSecuritySetup+0x158>
                    it->serialNumber = NULL;
   17a1c:	2300      	movs	r3, #0
   17a1e:	606b      	str	r3, [r5, #4]
   17a20:	e0b1      	b.n	17b86 <cosem_setSecuritySetup+0x1f8>
                    memcpy(it->issuer, tmp3->byteArr->data, tmp3->byteArr->size);
   17a22:	f8dd a004 	ldr.w	sl, [sp, #4]
   17a26:	f8da 3008 	ldr.w	r3, [sl, #8]
   17a2a:	88da      	ldrh	r2, [r3, #6]
   17a2c:	6819      	ldr	r1, [r3, #0]
   17a2e:	f006 fbe8 	bl	1e202 <memcpy>
                    it->issuer[tmp3->byteArr->size] = 0;
   17a32:	f8da 3008 	ldr.w	r3, [sl, #8]
   17a36:	88db      	ldrh	r3, [r3, #6]
   17a38:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 4, &tmp3)) != DLMS_ERROR_CODE_OK)
   17a3c:	9b00      	ldr	r3, [sp, #0]
   17a3e:	aa01      	add	r2, sp, #4
   17a40:	6898      	ldr	r0, [r3, #8]
   17a42:	2104      	movs	r1, #4
   17a44:	f004 fb15 	bl	1c072 <va_getByIndex>
   17a48:	4604      	mov	r4, r0
   17a4a:	2800      	cmp	r0, #0
   17a4c:	f040 80b2 	bne.w	17bb4 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   17a50:	9b01      	ldr	r3, [sp, #4]
   17a52:	689b      	ldr	r3, [r3, #8]
   17a54:	2b00      	cmp	r3, #0
   17a56:	f000 80c0 	beq.w	17bda <cosem_setSecuritySetup+0x24c>
   17a5a:	88d8      	ldrh	r0, [r3, #6]
   17a5c:	2800      	cmp	r0, #0
   17a5e:	f000 80bc 	beq.w	17bda <cosem_setSecuritySetup+0x24c>
                    it->subject = gxmalloc(tmp3->byteArr->size + 1);
   17a62:	3001      	adds	r0, #1
   17a64:	f7f5 fc46 	bl	d2f4 <malloc>
   17a68:	4680      	mov	r8, r0
   17a6a:	60e8      	str	r0, [r5, #12]
                    if (it->subject == NULL)
   17a6c:	2800      	cmp	r0, #0
   17a6e:	f000 809f 	beq.w	17bb0 <cosem_setSecuritySetup+0x222>
                    memcpy(it->subject, tmp3->byteArr->data, tmp3->byteArr->size);
   17a72:	f8dd a004 	ldr.w	sl, [sp, #4]
   17a76:	f8da 3008 	ldr.w	r3, [sl, #8]
   17a7a:	88da      	ldrh	r2, [r3, #6]
   17a7c:	6819      	ldr	r1, [r3, #0]
   17a7e:	f006 fbc0 	bl	1e202 <memcpy>
                    it->subject[tmp3->byteArr->size] = 0;
   17a82:	f8da 3008 	ldr.w	r3, [sl, #8]
   17a86:	88db      	ldrh	r3, [r3, #6]
   17a88:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 5, &tmp3)) != DLMS_ERROR_CODE_OK)
   17a8c:	9b00      	ldr	r3, [sp, #0]
   17a8e:	aa01      	add	r2, sp, #4
   17a90:	6898      	ldr	r0, [r3, #8]
   17a92:	2105      	movs	r1, #5
   17a94:	f004 faed 	bl	1c072 <va_getByIndex>
   17a98:	4604      	mov	r4, r0
   17a9a:	2800      	cmp	r0, #0
   17a9c:	f040 808a 	bne.w	17bb4 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   17aa0:	9b01      	ldr	r3, [sp, #4]
   17aa2:	689b      	ldr	r3, [r3, #8]
   17aa4:	2b00      	cmp	r3, #0
   17aa6:	f000 809b 	beq.w	17be0 <cosem_setSecuritySetup+0x252>
   17aaa:	88d8      	ldrh	r0, [r3, #6]
   17aac:	2800      	cmp	r0, #0
   17aae:	f000 8097 	beq.w	17be0 <cosem_setSecuritySetup+0x252>
                    it->subjectAltName = gxmalloc(tmp3->byteArr->size + 1);
   17ab2:	3001      	adds	r0, #1
   17ab4:	f7f5 fc1e 	bl	d2f4 <malloc>
   17ab8:	4680      	mov	r8, r0
   17aba:	6128      	str	r0, [r5, #16]
                    if (it->subjectAltName == NULL)
   17abc:	2800      	cmp	r0, #0
   17abe:	d077      	beq.n	17bb0 <cosem_setSecuritySetup+0x222>
                    memcpy(it->subjectAltName, tmp3->byteArr->data, tmp3->byteArr->size);
   17ac0:	f8dd a004 	ldr.w	sl, [sp, #4]
   17ac4:	f8da 3008 	ldr.w	r3, [sl, #8]
   17ac8:	88da      	ldrh	r2, [r3, #6]
   17aca:	6819      	ldr	r1, [r3, #0]
   17acc:	f006 fb99 	bl	1e202 <memcpy>
                    it->subjectAltName[tmp3->byteArr->size] = 0;
   17ad0:	f8da 3008 	ldr.w	r3, [sl, #8]
   17ad4:	88db      	ldrh	r3, [r3, #6]
   17ad6:	f808 4003 	strb.w	r4, [r8, r3]
                arr_push(&object->certificates, it);
   17ada:	4629      	mov	r1, r5
   17adc:	4630      	mov	r0, r6
   17ade:	f7fa f81f 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17ae2:	f109 0901 	add.w	r9, r9, #1
   17ae6:	68b8      	ldr	r0, [r7, #8]
   17ae8:	88c3      	ldrh	r3, [r0, #6]
   17aea:	454b      	cmp	r3, r9
   17aec:	f43f af60 	beq.w	179b0 <cosem_setSecuritySetup+0x22>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   17af0:	466a      	mov	r2, sp
   17af2:	4649      	mov	r1, r9
   17af4:	f004 fabd 	bl	1c072 <va_getByIndex>
   17af8:	4604      	mov	r4, r0
   17afa:	2800      	cmp	r0, #0
   17afc:	d178      	bne.n	17bf0 <cosem_setSecuritySetup+0x262>
                it = (gxCertificateInfo*)gxmalloc(sizeof(gxCertificateInfo));
   17afe:	2014      	movs	r0, #20
   17b00:	f7f5 fbf8 	bl	d2f4 <malloc>
                if (it == NULL)
   17b04:	4605      	mov	r5, r0
   17b06:	2800      	cmp	r0, #0
   17b08:	d06f      	beq.n	17bea <cosem_setSecuritySetup+0x25c>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != DLMS_ERROR_CODE_OK)
   17b0a:	9b00      	ldr	r3, [sp, #0]
   17b0c:	4621      	mov	r1, r4
   17b0e:	6898      	ldr	r0, [r3, #8]
   17b10:	aa01      	add	r2, sp, #4
   17b12:	f004 faae 	bl	1c072 <va_getByIndex>
   17b16:	4604      	mov	r4, r0
   17b18:	2800      	cmp	r0, #0
   17b1a:	d14b      	bne.n	17bb4 <cosem_setSecuritySetup+0x226>
                it->entity = (DLMS_CERTIFICATE_ENTITY)var_toInteger(tmp3);
   17b1c:	9801      	ldr	r0, [sp, #4]
   17b1e:	f004 fc22 	bl	1c366 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != DLMS_ERROR_CODE_OK)
   17b22:	9b00      	ldr	r3, [sp, #0]
                it->entity = (DLMS_CERTIFICATE_ENTITY)var_toInteger(tmp3);
   17b24:	7028      	strb	r0, [r5, #0]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != DLMS_ERROR_CODE_OK)
   17b26:	6898      	ldr	r0, [r3, #8]
   17b28:	aa01      	add	r2, sp, #4
   17b2a:	2101      	movs	r1, #1
   17b2c:	f004 faa1 	bl	1c072 <va_getByIndex>
   17b30:	4604      	mov	r4, r0
   17b32:	2800      	cmp	r0, #0
   17b34:	d13e      	bne.n	17bb4 <cosem_setSecuritySetup+0x226>
                it->type = (DLMS_CERTIFICATE_TYPE)var_toInteger(tmp3);
   17b36:	9801      	ldr	r0, [sp, #4]
   17b38:	f004 fc15 	bl	1c366 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 2, &tmp3)) != DLMS_ERROR_CODE_OK)
   17b3c:	9b00      	ldr	r3, [sp, #0]
                it->type = (DLMS_CERTIFICATE_TYPE)var_toInteger(tmp3);
   17b3e:	7068      	strb	r0, [r5, #1]
                if ((ret = va_getByIndex(tmp->Arr, 2, &tmp3)) != DLMS_ERROR_CODE_OK)
   17b40:	6898      	ldr	r0, [r3, #8]
   17b42:	aa01      	add	r2, sp, #4
   17b44:	2102      	movs	r1, #2
   17b46:	f004 fa94 	bl	1c072 <va_getByIndex>
   17b4a:	4604      	mov	r4, r0
   17b4c:	2800      	cmp	r0, #0
   17b4e:	d131      	bne.n	17bb4 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   17b50:	9b01      	ldr	r3, [sp, #4]
   17b52:	689b      	ldr	r3, [r3, #8]
   17b54:	2b00      	cmp	r3, #0
   17b56:	f43f af61 	beq.w	17a1c <cosem_setSecuritySetup+0x8e>
   17b5a:	88d8      	ldrh	r0, [r3, #6]
   17b5c:	2800      	cmp	r0, #0
   17b5e:	f43f af5d 	beq.w	17a1c <cosem_setSecuritySetup+0x8e>
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   17b62:	3001      	adds	r0, #1
   17b64:	f7f5 fbc6 	bl	d2f4 <malloc>
                    memcpy(it->serialNumber, tmp3->byteArr->data, tmp3->byteArr->size);
   17b68:	f8dd a004 	ldr.w	sl, [sp, #4]
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   17b6c:	6068      	str	r0, [r5, #4]
                    memcpy(it->serialNumber, tmp3->byteArr->data, tmp3->byteArr->size);
   17b6e:	f8da 3008 	ldr.w	r3, [sl, #8]
   17b72:	88da      	ldrh	r2, [r3, #6]
   17b74:	6819      	ldr	r1, [r3, #0]
                    it->serialNumber = gxmalloc(tmp3->byteArr->size + 1);
   17b76:	4680      	mov	r8, r0
   17b78:	f006 fb43 	bl	1e202 <memcpy>
                    it->serialNumber[tmp3->byteArr->size] = 0;
   17b7c:	f8da 3008 	ldr.w	r3, [sl, #8]
   17b80:	88db      	ldrh	r3, [r3, #6]
   17b82:	f808 4003 	strb.w	r4, [r8, r3]
                if ((ret = va_getByIndex(tmp->Arr, 3, &tmp3)) != DLMS_ERROR_CODE_OK)
   17b86:	9b00      	ldr	r3, [sp, #0]
   17b88:	aa01      	add	r2, sp, #4
   17b8a:	6898      	ldr	r0, [r3, #8]
   17b8c:	2103      	movs	r1, #3
   17b8e:	f004 fa70 	bl	1c072 <va_getByIndex>
   17b92:	4604      	mov	r4, r0
   17b94:	b970      	cbnz	r0, 17bb4 <cosem_setSecuritySetup+0x226>
                if (tmp3->byteArr != NULL && tmp3->byteArr->size != 0)
   17b96:	9b01      	ldr	r3, [sp, #4]
   17b98:	689b      	ldr	r3, [r3, #8]
   17b9a:	b1db      	cbz	r3, 17bd4 <cosem_setSecuritySetup+0x246>
   17b9c:	88d8      	ldrh	r0, [r3, #6]
   17b9e:	b1c8      	cbz	r0, 17bd4 <cosem_setSecuritySetup+0x246>
                    it->issuer = gxmalloc(tmp3->byteArr->size + 1);
   17ba0:	3001      	adds	r0, #1
   17ba2:	f7f5 fba7 	bl	d2f4 <malloc>
   17ba6:	4680      	mov	r8, r0
   17ba8:	60a8      	str	r0, [r5, #8]
                    if (it->issuer == NULL)
   17baa:	2800      	cmp	r0, #0
   17bac:	f47f af39 	bne.w	17a22 <cosem_setSecuritySetup+0x94>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17bb0:	f44f 7482 	mov.w	r4, #260	; 0x104
                if (it->serialNumber != NULL)
   17bb4:	6868      	ldr	r0, [r5, #4]
   17bb6:	b108      	cbz	r0, 17bbc <cosem_setSecuritySetup+0x22e>
                    gxfree(it->serialNumber);
   17bb8:	f7f5 fba4 	bl	d304 <free>
                if (it->subject != NULL)
   17bbc:	68e8      	ldr	r0, [r5, #12]
   17bbe:	b108      	cbz	r0, 17bc4 <cosem_setSecuritySetup+0x236>
                    gxfree(it->subject);
   17bc0:	f7f5 fba0 	bl	d304 <free>
                if (it->issuer != NULL)
   17bc4:	68a8      	ldr	r0, [r5, #8]
   17bc6:	b108      	cbz	r0, 17bcc <cosem_setSecuritySetup+0x23e>
                    gxfree(it->issuer);
   17bc8:	f7f5 fb9c 	bl	d304 <free>
                gxfree(it);
   17bcc:	4628      	mov	r0, r5
   17bce:	f7f5 fb99 	bl	d304 <free>
   17bd2:	e6ee      	b.n	179b2 <cosem_setSecuritySetup+0x24>
                    it->issuer = NULL;
   17bd4:	2300      	movs	r3, #0
   17bd6:	60ab      	str	r3, [r5, #8]
   17bd8:	e730      	b.n	17a3c <cosem_setSecuritySetup+0xae>
                    it->subject = NULL;
   17bda:	2300      	movs	r3, #0
   17bdc:	60eb      	str	r3, [r5, #12]
   17bde:	e755      	b.n	17a8c <cosem_setSecuritySetup+0xfe>
                    it->subjectAltName = NULL;
   17be0:	2300      	movs	r3, #0
   17be2:	612b      	str	r3, [r5, #16]
   17be4:	e779      	b.n	17ada <cosem_setSecuritySetup+0x14c>
            ret = DLMS_ERROR_CODE_INCONSISTENT_CLASS_OR_OBJECT;
   17be6:	2403      	movs	r4, #3
   17be8:	e6e3      	b.n	179b2 <cosem_setSecuritySetup+0x24>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17bea:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   17bee:	e6e0      	b.n	179b2 <cosem_setSecuritySetup+0x24>
            if (ret != 0 && it != NULL)
   17bf0:	2d00      	cmp	r5, #0
   17bf2:	f43f aede 	beq.w	179b2 <cosem_setSecuritySetup+0x24>
   17bf6:	e7dd      	b.n	17bb4 <cosem_setSecuritySetup+0x226>

00017bf8 <cosem_setIecHdlcSetup>:
    if (index == 2)
   17bf8:	2902      	cmp	r1, #2
{
   17bfa:	b510      	push	{r4, lr}
   17bfc:	4604      	mov	r4, r0
   17bfe:	4610      	mov	r0, r2
    if (index == 2)
   17c00:	d104      	bne.n	17c0c <cosem_setIecHdlcSetup+0x14>
        object->communicationSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   17c02:	f004 fbb0 	bl	1c366 <var_toInteger>
   17c06:	75a0      	strb	r0, [r4, #22]
    return DLMS_ERROR_CODE_OK;
   17c08:	2000      	movs	r0, #0
}
   17c0a:	bd10      	pop	{r4, pc}
    else if (index == 3)
   17c0c:	2903      	cmp	r1, #3
   17c0e:	d103      	bne.n	17c18 <cosem_setIecHdlcSetup+0x20>
        object->windowSizeTransmit = (unsigned char)var_toInteger(value);
   17c10:	f004 fba9 	bl	1c366 <var_toInteger>
   17c14:	75e0      	strb	r0, [r4, #23]
   17c16:	e7f7      	b.n	17c08 <cosem_setIecHdlcSetup+0x10>
    else if (index == 4)
   17c18:	2904      	cmp	r1, #4
   17c1a:	d103      	bne.n	17c24 <cosem_setIecHdlcSetup+0x2c>
        object->windowSizeReceive = (unsigned char)var_toInteger(value);
   17c1c:	f004 fba3 	bl	1c366 <var_toInteger>
   17c20:	7620      	strb	r0, [r4, #24]
   17c22:	e7f1      	b.n	17c08 <cosem_setIecHdlcSetup+0x10>
    else if (index == 5)
   17c24:	2905      	cmp	r1, #5
   17c26:	d103      	bne.n	17c30 <cosem_setIecHdlcSetup+0x38>
        object->maximumInfoLengthTransmit = (uint16_t)var_toInteger(value);
   17c28:	f004 fb9d 	bl	1c366 <var_toInteger>
   17c2c:	82a0      	strh	r0, [r4, #20]
   17c2e:	e7eb      	b.n	17c08 <cosem_setIecHdlcSetup+0x10>
    else if (index == 6)
   17c30:	2906      	cmp	r1, #6
   17c32:	d103      	bne.n	17c3c <cosem_setIecHdlcSetup+0x44>
        object->maximumInfoLengthReceive = (uint16_t)var_toInteger(value);
   17c34:	f004 fb97 	bl	1c366 <var_toInteger>
   17c38:	83a0      	strh	r0, [r4, #28]
   17c3a:	e7e5      	b.n	17c08 <cosem_setIecHdlcSetup+0x10>
    else if (index == 7)
   17c3c:	2907      	cmp	r1, #7
   17c3e:	d103      	bne.n	17c48 <cosem_setIecHdlcSetup+0x50>
        object->interCharachterTimeout = (uint16_t)var_toInteger(value);
   17c40:	f004 fb91 	bl	1c366 <var_toInteger>
   17c44:	8360      	strh	r0, [r4, #26]
   17c46:	e7df      	b.n	17c08 <cosem_setIecHdlcSetup+0x10>
    else if (index == 8)
   17c48:	2908      	cmp	r1, #8
   17c4a:	d103      	bne.n	17c54 <cosem_setIecHdlcSetup+0x5c>
        object->inactivityTimeout = (uint16_t)var_toInteger(value);
   17c4c:	f004 fb8b 	bl	1c366 <var_toInteger>
   17c50:	8220      	strh	r0, [r4, #16]
   17c52:	e7d9      	b.n	17c08 <cosem_setIecHdlcSetup+0x10>
    else if (index == 9)
   17c54:	2909      	cmp	r1, #9
   17c56:	d103      	bne.n	17c60 <cosem_setIecHdlcSetup+0x68>
        object->deviceAddress = (uint16_t)var_toInteger(value);
   17c58:	f004 fb85 	bl	1c366 <var_toInteger>
   17c5c:	8260      	strh	r0, [r4, #18]
   17c5e:	e7d3      	b.n	17c08 <cosem_setIecHdlcSetup+0x10>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17c60:	f44f 7081 	mov.w	r0, #258	; 0x102
   17c64:	e7d1      	b.n	17c0a <cosem_setIecHdlcSetup+0x12>

00017c66 <cosem_setIecLocalPortSetup>:
    if (index == 2)
   17c66:	2902      	cmp	r1, #2
{
   17c68:	b570      	push	{r4, r5, r6, lr}
   17c6a:	4604      	mov	r4, r0
   17c6c:	4615      	mov	r5, r2
    if (index == 2)
   17c6e:	d106      	bne.n	17c7e <cosem_setIecLocalPortSetup+0x18>
        object->defaultMode = (DLMS_OPTICAL_PROTOCOL_MODE)var_toInteger(value);
   17c70:	4610      	mov	r0, r2
   17c72:	f004 fb78 	bl	1c366 <var_toInteger>
   17c76:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    int ret = 0;
   17c7a:	2000      	movs	r0, #0
}
   17c7c:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   17c7e:	2903      	cmp	r1, #3
   17c80:	d105      	bne.n	17c8e <cosem_setIecLocalPortSetup+0x28>
        object->defaultBaudrate = (DLMS_BAUD_RATE)var_toInteger(value);
   17c82:	4610      	mov	r0, r2
   17c84:	f004 fb6f 	bl	1c366 <var_toInteger>
   17c88:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
   17c8c:	e7f5      	b.n	17c7a <cosem_setIecLocalPortSetup+0x14>
    else if (index == 4)
   17c8e:	2904      	cmp	r1, #4
   17c90:	d105      	bne.n	17c9e <cosem_setIecLocalPortSetup+0x38>
        object->proposedBaudrate = (DLMS_BAUD_RATE)var_toInteger(value);
   17c92:	4610      	mov	r0, r2
   17c94:	f004 fb67 	bl	1c366 <var_toInteger>
   17c98:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   17c9c:	e7ed      	b.n	17c7a <cosem_setIecLocalPortSetup+0x14>
    else if (index == 5)
   17c9e:	2905      	cmp	r1, #5
   17ca0:	d105      	bne.n	17cae <cosem_setIecLocalPortSetup+0x48>
        object->responseTime = (DLMS_LOCAL_PORT_RESPONSE_TIME)var_toInteger(value);
   17ca2:	4610      	mov	r0, r2
   17ca4:	f004 fb5f 	bl	1c366 <var_toInteger>
   17ca8:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   17cac:	e7e5      	b.n	17c7a <cosem_setIecLocalPortSetup+0x14>
    else if (index == 6)
   17cae:	2906      	cmp	r1, #6
   17cb0:	d10f      	bne.n	17cd2 <cosem_setIecLocalPortSetup+0x6c>
        bb_clear(&object->deviceAddress);
   17cb2:	3438      	adds	r4, #56	; 0x38
        bb_clear(&object->password5);
   17cb4:	4620      	mov	r0, r4
   17cb6:	f7f6 fd04 	bl	e6c2 <bb_clear>
        ret = bb_set2(&object->password5, value->byteArr, 0, bb_size(value->byteArr));
   17cba:	68ad      	ldr	r5, [r5, #8]
   17cbc:	4628      	mov	r0, r5
   17cbe:	f7f6 fb3a 	bl	e336 <bb_size>
   17cc2:	4629      	mov	r1, r5
   17cc4:	4603      	mov	r3, r0
   17cc6:	2200      	movs	r2, #0
   17cc8:	4620      	mov	r0, r4
}
   17cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->password5, value->byteArr, 0, bb_size(value->byteArr));
   17cce:	f7f6 bcb3 	b.w	e638 <bb_set2>
    else if (index == 7)
   17cd2:	2907      	cmp	r1, #7
   17cd4:	d101      	bne.n	17cda <cosem_setIecLocalPortSetup+0x74>
        bb_clear(&object->password1);
   17cd6:	3410      	adds	r4, #16
   17cd8:	e7ec      	b.n	17cb4 <cosem_setIecLocalPortSetup+0x4e>
    else if (index == 8)
   17cda:	2908      	cmp	r1, #8
   17cdc:	d101      	bne.n	17ce2 <cosem_setIecLocalPortSetup+0x7c>
        bb_clear(&object->password2);
   17cde:	341c      	adds	r4, #28
   17ce0:	e7e8      	b.n	17cb4 <cosem_setIecLocalPortSetup+0x4e>
    else if (index == 9)
   17ce2:	2909      	cmp	r1, #9
   17ce4:	d101      	bne.n	17cea <cosem_setIecLocalPortSetup+0x84>
        bb_clear(&object->password5);
   17ce6:	3428      	adds	r4, #40	; 0x28
   17ce8:	e7e4      	b.n	17cb4 <cosem_setIecLocalPortSetup+0x4e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17cea:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   17cee:	e7c5      	b.n	17c7c <cosem_setIecLocalPortSetup+0x16>

00017cf0 <cosem_setIecTwistedPairSetup>:
    if (index == 2)
   17cf0:	2902      	cmp	r1, #2
{
   17cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17cf4:	4604      	mov	r4, r0
   17cf6:	4615      	mov	r5, r2
    if (index == 2)
   17cf8:	d106      	bne.n	17d08 <cosem_setIecTwistedPairSetup+0x18>
        object->mode = var_toInteger(value);
   17cfa:	4610      	mov	r0, r2
   17cfc:	f004 fb33 	bl	1c366 <var_toInteger>
   17d00:	7420      	strb	r0, [r4, #16]
    int pos, ret = 0;
   17d02:	2000      	movs	r0, #0
}
   17d04:	b002      	add	sp, #8
   17d06:	bd70      	pop	{r4, r5, r6, pc}
    else if (index == 3)
   17d08:	2903      	cmp	r1, #3
   17d0a:	d104      	bne.n	17d16 <cosem_setIecTwistedPairSetup+0x26>
        object->speed = var_toInteger(value);
   17d0c:	4610      	mov	r0, r2
   17d0e:	f004 fb2a 	bl	1c366 <var_toInteger>
   17d12:	7460      	strb	r0, [r4, #17]
   17d14:	e7f5      	b.n	17d02 <cosem_setIecTwistedPairSetup+0x12>
    else if (index == 4)
   17d16:	2904      	cmp	r1, #4
   17d18:	d11b      	bne.n	17d52 <cosem_setIecTwistedPairSetup+0x62>
        bb_clear(&object->primaryAddresses);
   17d1a:	3414      	adds	r4, #20
   17d1c:	4620      	mov	r0, r4
   17d1e:	f7f6 fcd0 	bl	e6c2 <bb_clear>
        if (value->Arr != NULL)
   17d22:	68ab      	ldr	r3, [r5, #8]
   17d24:	2b00      	cmp	r3, #0
   17d26:	d0ec      	beq.n	17d02 <cosem_setIecTwistedPairSetup+0x12>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17d28:	2600      	movs	r6, #0
   17d2a:	e00d      	b.n	17d48 <cosem_setIecTwistedPairSetup+0x58>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   17d2c:	aa01      	add	r2, sp, #4
   17d2e:	4631      	mov	r1, r6
   17d30:	f004 f99f 	bl	1c072 <va_getByIndex>
   17d34:	2800      	cmp	r0, #0
   17d36:	d1e5      	bne.n	17d04 <cosem_setIecTwistedPairSetup+0x14>
                    (ret = bb_setUInt8(&object->primaryAddresses, tmp->bVal)) != DLMS_ERROR_CODE_OK)
   17d38:	9b01      	ldr	r3, [sp, #4]
   17d3a:	4620      	mov	r0, r4
   17d3c:	7a19      	ldrb	r1, [r3, #8]
   17d3e:	f7f6 fb66 	bl	e40e <bb_setUInt8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   17d42:	2800      	cmp	r0, #0
   17d44:	d1de      	bne.n	17d04 <cosem_setIecTwistedPairSetup+0x14>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17d46:	3601      	adds	r6, #1
   17d48:	68a8      	ldr	r0, [r5, #8]
   17d4a:	88c3      	ldrh	r3, [r0, #6]
   17d4c:	42b3      	cmp	r3, r6
   17d4e:	d1ed      	bne.n	17d2c <cosem_setIecTwistedPairSetup+0x3c>
   17d50:	e7d7      	b.n	17d02 <cosem_setIecTwistedPairSetup+0x12>
    else if (index == 5)
   17d52:	2905      	cmp	r1, #5
   17d54:	d11b      	bne.n	17d8e <cosem_setIecTwistedPairSetup+0x9e>
        bb_clear(&object->tabis);
   17d56:	3420      	adds	r4, #32
   17d58:	4620      	mov	r0, r4
   17d5a:	f7f6 fcb2 	bl	e6c2 <bb_clear>
        if (value->Arr != NULL)
   17d5e:	68ab      	ldr	r3, [r5, #8]
   17d60:	2b00      	cmp	r3, #0
   17d62:	d0ce      	beq.n	17d02 <cosem_setIecTwistedPairSetup+0x12>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17d64:	2600      	movs	r6, #0
   17d66:	e00d      	b.n	17d84 <cosem_setIecTwistedPairSetup+0x94>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   17d68:	aa01      	add	r2, sp, #4
   17d6a:	4631      	mov	r1, r6
   17d6c:	f004 f981 	bl	1c072 <va_getByIndex>
   17d70:	2800      	cmp	r0, #0
   17d72:	d1c7      	bne.n	17d04 <cosem_setIecTwistedPairSetup+0x14>
                    (ret = bb_setUInt8(&object->tabis, tmp->bVal)) != DLMS_ERROR_CODE_OK)
   17d74:	9b01      	ldr	r3, [sp, #4]
   17d76:	4620      	mov	r0, r4
   17d78:	7a19      	ldrb	r1, [r3, #8]
   17d7a:	f7f6 fb48 	bl	e40e <bb_setUInt8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   17d7e:	2800      	cmp	r0, #0
   17d80:	d1c0      	bne.n	17d04 <cosem_setIecTwistedPairSetup+0x14>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17d82:	3601      	adds	r6, #1
   17d84:	68a8      	ldr	r0, [r5, #8]
   17d86:	88c3      	ldrh	r3, [r0, #6]
   17d88:	42b3      	cmp	r3, r6
   17d8a:	d1ed      	bne.n	17d68 <cosem_setIecTwistedPairSetup+0x78>
   17d8c:	e7b9      	b.n	17d02 <cosem_setIecTwistedPairSetup+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17d8e:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   17d92:	e7b7      	b.n	17d04 <cosem_setIecTwistedPairSetup+0x14>

00017d94 <cosem_setIP4Setup>:
    if (index == 2)
   17d94:	2a02      	cmp	r2, #2
{
   17d96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17d9a:	460e      	mov	r6, r1
   17d9c:	461d      	mov	r5, r3
    if (index == 2)
   17d9e:	d10c      	bne.n	17dba <cosem_setIP4Setup+0x26>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_NONE, value->byteArr->data, &object->dataLinkLayer)) != 0)
   17da0:	689a      	ldr	r2, [r3, #8]
   17da2:	3098      	adds	r0, #152	; 0x98
   17da4:	f101 0310 	add.w	r3, r1, #16
   17da8:	6812      	ldr	r2, [r2, #0]
   17daa:	2100      	movs	r1, #0
   17dac:	f003 ff1e 	bl	1bbec <oa_findByLN>
   17db0:	4604      	mov	r4, r0
}
   17db2:	4620      	mov	r0, r4
   17db4:	b003      	add	sp, #12
   17db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   17dba:	2a03      	cmp	r2, #3
   17dbc:	d105      	bne.n	17dca <cosem_setIP4Setup+0x36>
        object->ipAddress = var_toInteger(value);
   17dbe:	4618      	mov	r0, r3
   17dc0:	f004 fad1 	bl	1c366 <var_toInteger>
   17dc4:	6170      	str	r0, [r6, #20]
    int ret = 0, pos;
   17dc6:	2400      	movs	r4, #0
   17dc8:	e7f3      	b.n	17db2 <cosem_setIP4Setup+0x1e>
    else if (index == 4)
   17dca:	2a04      	cmp	r2, #4
   17dcc:	d12c      	bne.n	17e28 <cosem_setIP4Setup+0x94>
        va_clear(&object->multicastIPAddress);
   17dce:	3618      	adds	r6, #24
   17dd0:	4630      	mov	r0, r6
   17dd2:	f004 f8ab 	bl	1bf2c <va_clear>
        if (value->Arr != NULL)
   17dd6:	68ab      	ldr	r3, [r5, #8]
   17dd8:	2b00      	cmp	r3, #0
   17dda:	d0f4      	beq.n	17dc6 <cosem_setIP4Setup+0x32>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17ddc:	2700      	movs	r7, #0
   17dde:	e01e      	b.n	17e1e <cosem_setIP4Setup+0x8a>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   17de0:	466a      	mov	r2, sp
   17de2:	4639      	mov	r1, r7
   17de4:	f004 f945 	bl	1c072 <va_getByIndex>
   17de8:	4604      	mov	r4, r0
   17dea:	2800      	cmp	r0, #0
   17dec:	d1e1      	bne.n	17db2 <cosem_setIP4Setup+0x1e>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   17dee:	2010      	movs	r0, #16
   17df0:	f7f5 fa80 	bl	d2f4 <malloc>
   17df4:	9001      	str	r0, [sp, #4]
                if ((ret = var_init(tmp3)) != 0 ||
   17df6:	f003 ff62 	bl	1bcbe <var_init>
   17dfa:	4604      	mov	r4, r0
   17dfc:	2800      	cmp	r0, #0
   17dfe:	d1d8      	bne.n	17db2 <cosem_setIP4Setup+0x1e>
                    (ret = var_copy(tmp, tmp3)) != 0 ||
   17e00:	e9dd 0100 	ldrd	r0, r1, [sp]
   17e04:	f7ec fbd2 	bl	45ac <var_copy>
                if ((ret = var_init(tmp3)) != 0 ||
   17e08:	4604      	mov	r4, r0
   17e0a:	2800      	cmp	r0, #0
   17e0c:	d1d1      	bne.n	17db2 <cosem_setIP4Setup+0x1e>
                    (ret = va_push(&object->multicastIPAddress, tmp3)) != 0)
   17e0e:	9901      	ldr	r1, [sp, #4]
   17e10:	4630      	mov	r0, r6
   17e12:	f004 f862 	bl	1beda <va_push>
                    (ret = var_copy(tmp, tmp3)) != 0 ||
   17e16:	4604      	mov	r4, r0
   17e18:	2800      	cmp	r0, #0
   17e1a:	d1ca      	bne.n	17db2 <cosem_setIP4Setup+0x1e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17e1c:	3701      	adds	r7, #1
   17e1e:	68a8      	ldr	r0, [r5, #8]
   17e20:	88c3      	ldrh	r3, [r0, #6]
   17e22:	42bb      	cmp	r3, r7
   17e24:	d1dc      	bne.n	17de0 <cosem_setIP4Setup+0x4c>
   17e26:	e7ce      	b.n	17dc6 <cosem_setIP4Setup+0x32>
    else if (index == 5)
   17e28:	2a05      	cmp	r2, #5
   17e2a:	d150      	bne.n	17ece <cosem_setIP4Setup+0x13a>
        arr_clear(&object->ipOptions);
   17e2c:	3620      	adds	r6, #32
   17e2e:	4630      	mov	r0, r6
   17e30:	f7f9 fe8b 	bl	11b4a <arr_clear>
        if (value->Arr != NULL)
   17e34:	68ab      	ldr	r3, [r5, #8]
   17e36:	2b00      	cmp	r3, #0
   17e38:	d0c5      	beq.n	17dc6 <cosem_setIP4Setup+0x32>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17e3a:	2700      	movs	r7, #0
   17e3c:	e042      	b.n	17ec4 <cosem_setIP4Setup+0x130>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   17e3e:	466a      	mov	r2, sp
   17e40:	4639      	mov	r1, r7
   17e42:	f004 f916 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17e46:	4604      	mov	r4, r0
   17e48:	2800      	cmp	r0, #0
   17e4a:	d1b2      	bne.n	17db2 <cosem_setIP4Setup+0x1e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   17e4c:	9b00      	ldr	r3, [sp, #0]
   17e4e:	4601      	mov	r1, r0
   17e50:	aa01      	add	r2, sp, #4
   17e52:	6898      	ldr	r0, [r3, #8]
   17e54:	f004 f90d 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17e58:	4604      	mov	r4, r0
   17e5a:	2800      	cmp	r0, #0
   17e5c:	d1a9      	bne.n	17db2 <cosem_setIP4Setup+0x1e>
                ipItem = (gxip4SetupIpOption*)gxmalloc(sizeof(gxip4SetupIpOption));
   17e5e:	2010      	movs	r0, #16
   17e60:	f7f5 fa48 	bl	d2f4 <malloc>
                if (ipItem == NULL)
   17e64:	4680      	mov	r8, r0
   17e66:	2800      	cmp	r0, #0
   17e68:	d05a      	beq.n	17f20 <cosem_setIP4Setup+0x18c>
                BYTE_BUFFER_INIT(&ipItem->data);
   17e6a:	f100 0904 	add.w	r9, r0, #4
   17e6e:	4648      	mov	r0, r9
   17e70:	f7f6 fa64 	bl	e33c <bb_init>
                ipItem->type = (DLMS_IP_OPTION_TYPE)var_toInteger(tmp3);
   17e74:	9801      	ldr	r0, [sp, #4]
   17e76:	f004 fa76 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17e7a:	9b00      	ldr	r3, [sp, #0]
                ipItem->type = (DLMS_IP_OPTION_TYPE)var_toInteger(tmp3);
   17e7c:	f888 0000 	strb.w	r0, [r8]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   17e80:	6898      	ldr	r0, [r3, #8]
   17e82:	aa01      	add	r2, sp, #4
   17e84:	2101      	movs	r1, #1
   17e86:	f004 f8f4 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17e8a:	4604      	mov	r4, r0
   17e8c:	2800      	cmp	r0, #0
   17e8e:	d143      	bne.n	17f18 <cosem_setIP4Setup+0x184>
                ipItem->length = (unsigned char)var_toInteger(tmp3);
   17e90:	9801      	ldr	r0, [sp, #4]
   17e92:	f004 fa68 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17e96:	9b00      	ldr	r3, [sp, #0]
                ipItem->length = (unsigned char)var_toInteger(tmp3);
   17e98:	f888 0001 	strb.w	r0, [r8, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   17e9c:	6898      	ldr	r0, [r3, #8]
   17e9e:	aa01      	add	r2, sp, #4
   17ea0:	2102      	movs	r1, #2
   17ea2:	f004 f8e6 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   17ea6:	4604      	mov	r4, r0
   17ea8:	2800      	cmp	r0, #0
   17eaa:	d135      	bne.n	17f18 <cosem_setIP4Setup+0x184>
                bb_set(&ipItem->data, tmp3->byteArr->data, tmp3->byteArr->size);
   17eac:	9b01      	ldr	r3, [sp, #4]
   17eae:	689b      	ldr	r3, [r3, #8]
   17eb0:	4648      	mov	r0, r9
   17eb2:	6819      	ldr	r1, [r3, #0]
   17eb4:	88da      	ldrh	r2, [r3, #6]
   17eb6:	f7f6 fb90 	bl	e5da <bb_set>
                arr_push(&object->ipOptions, ipItem);
   17eba:	4641      	mov	r1, r8
   17ebc:	4630      	mov	r0, r6
   17ebe:	f7f9 fe2f 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   17ec2:	3701      	adds	r7, #1
   17ec4:	68a8      	ldr	r0, [r5, #8]
   17ec6:	88c3      	ldrh	r3, [r0, #6]
   17ec8:	42bb      	cmp	r3, r7
   17eca:	d1b8      	bne.n	17e3e <cosem_setIP4Setup+0xaa>
   17ecc:	e77b      	b.n	17dc6 <cosem_setIP4Setup+0x32>
    else if (index == 6)
   17ece:	2a06      	cmp	r2, #6
   17ed0:	d104      	bne.n	17edc <cosem_setIP4Setup+0x148>
        object->subnetMask = var_toInteger(value);
   17ed2:	4618      	mov	r0, r3
   17ed4:	f004 fa47 	bl	1c366 <var_toInteger>
   17ed8:	62f0      	str	r0, [r6, #44]	; 0x2c
   17eda:	e774      	b.n	17dc6 <cosem_setIP4Setup+0x32>
    else if (index == 7)
   17edc:	2a07      	cmp	r2, #7
   17ede:	d104      	bne.n	17eea <cosem_setIP4Setup+0x156>
        object->gatewayIPAddress = var_toInteger(value);
   17ee0:	4618      	mov	r0, r3
   17ee2:	f004 fa40 	bl	1c366 <var_toInteger>
   17ee6:	6330      	str	r0, [r6, #48]	; 0x30
   17ee8:	e76d      	b.n	17dc6 <cosem_setIP4Setup+0x32>
    else if (index == 8)
   17eea:	2a08      	cmp	r2, #8
   17eec:	d103      	bne.n	17ef6 <cosem_setIP4Setup+0x162>
        object->useDHCP = value->boolVal;
   17eee:	7a1b      	ldrb	r3, [r3, #8]
   17ef0:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
   17ef4:	e767      	b.n	17dc6 <cosem_setIP4Setup+0x32>
    else if (index == 9)
   17ef6:	2a09      	cmp	r2, #9
   17ef8:	d104      	bne.n	17f04 <cosem_setIP4Setup+0x170>
        object->primaryDNSAddress = var_toInteger(value);
   17efa:	4618      	mov	r0, r3
   17efc:	f004 fa33 	bl	1c366 <var_toInteger>
   17f00:	63b0      	str	r0, [r6, #56]	; 0x38
   17f02:	e760      	b.n	17dc6 <cosem_setIP4Setup+0x32>
    else if (index == 10)
   17f04:	2a0a      	cmp	r2, #10
   17f06:	d104      	bne.n	17f12 <cosem_setIP4Setup+0x17e>
        object->secondaryDNSAddress = var_toInteger(value);
   17f08:	4618      	mov	r0, r3
   17f0a:	f004 fa2c 	bl	1c366 <var_toInteger>
   17f0e:	63f0      	str	r0, [r6, #60]	; 0x3c
   17f10:	e759      	b.n	17dc6 <cosem_setIP4Setup+0x32>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   17f12:	f44f 7481 	mov.w	r4, #258	; 0x102
   17f16:	e74c      	b.n	17db2 <cosem_setIP4Setup+0x1e>
                gxfree(ipItem);
   17f18:	4640      	mov	r0, r8
   17f1a:	f7f5 f9f3 	bl	d304 <free>
   17f1e:	e748      	b.n	17db2 <cosem_setIP4Setup+0x1e>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   17f20:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != DLMS_ERROR_CODE_OK && ipItem != NULL)
   17f24:	e745      	b.n	17db2 <cosem_setIP4Setup+0x1e>

00017f26 <cosem_setUtilityTables>:
    if (index == 2)
   17f26:	2902      	cmp	r1, #2
{
   17f28:	b538      	push	{r3, r4, r5, lr}
   17f2a:	4604      	mov	r4, r0
   17f2c:	4615      	mov	r5, r2
    if (index == 2)
   17f2e:	d105      	bne.n	17f3c <cosem_setUtilityTables+0x16>
        object->tableId = (uint16_t)var_toInteger(value);
   17f30:	4610      	mov	r0, r2
   17f32:	f004 fa18 	bl	1c366 <var_toInteger>
   17f36:	8220      	strh	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   17f38:	2000      	movs	r0, #0
}
   17f3a:	bd38      	pop	{r3, r4, r5, pc}
    else if (index == 3)
   17f3c:	2903      	cmp	r1, #3
   17f3e:	d0fb      	beq.n	17f38 <cosem_setUtilityTables+0x12>
    else if (index == 4)
   17f40:	2904      	cmp	r1, #4
   17f42:	d10e      	bne.n	17f62 <cosem_setUtilityTables+0x3c>
        bb_clear(&object->buffer);
   17f44:	3414      	adds	r4, #20
   17f46:	4620      	mov	r0, r4
   17f48:	f7f6 fbbb 	bl	e6c2 <bb_clear>
        bb_set2(&object->buffer, value->byteArr, 0, bb_size(value->byteArr));
   17f4c:	68ad      	ldr	r5, [r5, #8]
   17f4e:	4628      	mov	r0, r5
   17f50:	f7f6 f9f1 	bl	e336 <bb_size>
   17f54:	2200      	movs	r2, #0
   17f56:	4603      	mov	r3, r0
   17f58:	4629      	mov	r1, r5
   17f5a:	4620      	mov	r0, r4
   17f5c:	f7f6 fb6c 	bl	e638 <bb_set2>
   17f60:	e7ea      	b.n	17f38 <cosem_setUtilityTables+0x12>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17f62:	f44f 7081 	mov.w	r0, #258	; 0x102
   17f66:	e7e8      	b.n	17f3a <cosem_setUtilityTables+0x14>

00017f68 <cosem_setMbusSlavePortSetup>:
    if (index == 2)
   17f68:	2902      	cmp	r1, #2
{
   17f6a:	b510      	push	{r4, lr}
   17f6c:	4604      	mov	r4, r0
   17f6e:	4610      	mov	r0, r2
    if (index == 2)
   17f70:	d104      	bne.n	17f7c <cosem_setMbusSlavePortSetup+0x14>
        object->defaultBaud = (DLMS_BAUD_RATE)var_toInteger(value);
   17f72:	f004 f9f8 	bl	1c366 <var_toInteger>
   17f76:	7420      	strb	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   17f78:	2000      	movs	r0, #0
}
   17f7a:	bd10      	pop	{r4, pc}
    else if (index == 3)
   17f7c:	2903      	cmp	r1, #3
   17f7e:	d103      	bne.n	17f88 <cosem_setMbusSlavePortSetup+0x20>
        object->availableBaud = (DLMS_BAUD_RATE)var_toInteger(value);
   17f80:	f004 f9f1 	bl	1c366 <var_toInteger>
   17f84:	7460      	strb	r0, [r4, #17]
   17f86:	e7f7      	b.n	17f78 <cosem_setMbusSlavePortSetup+0x10>
    else if (index == 4)
   17f88:	2904      	cmp	r1, #4
   17f8a:	d103      	bne.n	17f94 <cosem_setMbusSlavePortSetup+0x2c>
        object->addressState = (DLMS_ADDRESS_STATE)var_toInteger(value);
   17f8c:	f004 f9eb 	bl	1c366 <var_toInteger>
   17f90:	74a0      	strb	r0, [r4, #18]
   17f92:	e7f1      	b.n	17f78 <cosem_setMbusSlavePortSetup+0x10>
    else if (index == 5)
   17f94:	2905      	cmp	r1, #5
   17f96:	d103      	bne.n	17fa0 <cosem_setMbusSlavePortSetup+0x38>
        object->busAddress = (unsigned char)var_toInteger(value);
   17f98:	f004 f9e5 	bl	1c366 <var_toInteger>
   17f9c:	74e0      	strb	r0, [r4, #19]
   17f9e:	e7eb      	b.n	17f78 <cosem_setMbusSlavePortSetup+0x10>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17fa0:	f44f 7081 	mov.w	r0, #258	; 0x102
   17fa4:	e7e9      	b.n	17f7a <cosem_setMbusSlavePortSetup+0x12>

00017fa6 <cosem_setDisconnectControl>:
    if (index == 2)
   17fa6:	2902      	cmp	r1, #2
{
   17fa8:	b510      	push	{r4, lr}
   17faa:	4604      	mov	r4, r0
   17fac:	4610      	mov	r0, r2
    if (index == 2)
   17fae:	d103      	bne.n	17fb8 <cosem_setDisconnectControl+0x12>
        object->outputState = value->boolVal;
   17fb0:	7a13      	ldrb	r3, [r2, #8]
   17fb2:	7423      	strb	r3, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   17fb4:	2000      	movs	r0, #0
}
   17fb6:	bd10      	pop	{r4, pc}
    else if (index == 3)
   17fb8:	2903      	cmp	r1, #3
   17fba:	d103      	bne.n	17fc4 <cosem_setDisconnectControl+0x1e>
        object->controlState = (DLMS_CONTROL_STATE)var_toInteger(value);
   17fbc:	f004 f9d3 	bl	1c366 <var_toInteger>
   17fc0:	7460      	strb	r0, [r4, #17]
   17fc2:	e7f7      	b.n	17fb4 <cosem_setDisconnectControl+0xe>
    else if (index == 4)
   17fc4:	2904      	cmp	r1, #4
   17fc6:	d103      	bne.n	17fd0 <cosem_setDisconnectControl+0x2a>
        object->controlMode = (DLMS_CONTROL_MODE)var_toInteger(value);
   17fc8:	f004 f9cd 	bl	1c366 <var_toInteger>
   17fcc:	74a0      	strb	r0, [r4, #18]
   17fce:	e7f1      	b.n	17fb4 <cosem_setDisconnectControl+0xe>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   17fd0:	f44f 7081 	mov.w	r0, #258	; 0x102
   17fd4:	e7ef      	b.n	17fb6 <cosem_setDisconnectControl+0x10>

00017fd6 <cosem_setLimiter>:
{
   17fd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   17fda:	2a02      	cmp	r2, #2
{
   17fdc:	b087      	sub	sp, #28
   17fde:	4607      	mov	r7, r0
   17fe0:	460d      	mov	r5, r1
   17fe2:	461e      	mov	r6, r3
    if (index == 2)
   17fe4:	d152      	bne.n	1808c <cosem_setLimiter+0xb6>
        if (value->vt != DLMS_DATA_TYPE_STRUCTURE)
   17fe6:	f893 9000 	ldrb.w	r9, [r3]
   17fea:	f1b9 0f02 	cmp.w	r9, #2
   17fee:	f040 8177 	bne.w	182e0 <cosem_setLimiter+0x30a>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   17ff2:	6898      	ldr	r0, [r3, #8]
   17ff4:	aa01      	add	r2, sp, #4
   17ff6:	2100      	movs	r1, #0
   17ff8:	f004 f83b 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   17ffc:	4604      	mov	r4, r0
   17ffe:	2800      	cmp	r0, #0
   18000:	d140      	bne.n	18084 <cosem_setLimiter+0xae>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   18002:	9801      	ldr	r0, [sp, #4]
   18004:	f004 f9af 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp3);
   18008:	aa02      	add	r2, sp, #8
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   1800a:	4680      	mov	r8, r0
        ret = va_getByIndex(value->Arr, 1, &tmp3);
   1800c:	2101      	movs	r1, #1
   1800e:	68b0      	ldr	r0, [r6, #8]
   18010:	f004 f82f 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18014:	4604      	mov	r4, r0
   18016:	2800      	cmp	r0, #0
   18018:	d134      	bne.n	18084 <cosem_setLimiter+0xae>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   1801a:	68b0      	ldr	r0, [r6, #8]
   1801c:	aa01      	add	r2, sp, #4
   1801e:	4649      	mov	r1, r9
   18020:	f004 f827 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18024:	4604      	mov	r4, r0
   18026:	bb68      	cbnz	r0, 18084 <cosem_setLimiter+0xae>
        object->selectedAttributeIndex = (unsigned char)var_toInteger(tmp);
   18028:	9801      	ldr	r0, [sp, #4]
   1802a:	f004 f99c 	bl	1c366 <var_toInteger>
        ot = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   1802e:	fa1f f688 	uxth.w	r6, r8
        object->selectedAttributeIndex = (unsigned char)var_toInteger(tmp);
   18032:	7528      	strb	r0, [r5, #20]
        if (ot != 0)
   18034:	b32e      	cbz	r6, 18082 <cosem_setLimiter+0xac>
            if ((ret = oa_findByLN(&settings->objects, ot, tmp3->byteArr->data, &object->monitoredValue)) == 0 &&
   18036:	9b02      	ldr	r3, [sp, #8]
   18038:	689a      	ldr	r2, [r3, #8]
   1803a:	f105 0810 	add.w	r8, r5, #16
   1803e:	6812      	ldr	r2, [r2, #0]
   18040:	4643      	mov	r3, r8
   18042:	4631      	mov	r1, r6
   18044:	f107 0098 	add.w	r0, r7, #152	; 0x98
   18048:	f003 fdd0 	bl	1bbec <oa_findByLN>
   1804c:	4604      	mov	r4, r0
   1804e:	b9c8      	cbnz	r0, 18084 <cosem_setLimiter+0xae>
   18050:	692b      	ldr	r3, [r5, #16]
   18052:	b10b      	cbz	r3, 18058 <cosem_setLimiter+0x82>
    int ret = DLMS_ERROR_CODE_OK, pos;
   18054:	2400      	movs	r4, #0
   18056:	e015      	b.n	18084 <cosem_setLimiter+0xae>
                if ((ret = cosem_createObject(ot, &object->monitoredValue)) != 0)
   18058:	4641      	mov	r1, r8
   1805a:	4630      	mov	r0, r6
   1805c:	f7ea f858 	bl	2110 <cosem_createObject>
   18060:	4604      	mov	r4, r0
   18062:	b978      	cbnz	r0, 18084 <cosem_setLimiter+0xae>
                memcpy(object->monitoredValue->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   18064:	9b02      	ldr	r3, [sp, #8]
   18066:	6928      	ldr	r0, [r5, #16]
   18068:	689b      	ldr	r3, [r3, #8]
   1806a:	3006      	adds	r0, #6
   1806c:	6819      	ldr	r1, [r3, #0]
   1806e:	88da      	ldrh	r2, [r3, #6]
   18070:	f006 f8c7 	bl	1e202 <memcpy>
                ret = oa_push(&settings->releasedObjects, object->monitoredValue);
   18074:	6929      	ldr	r1, [r5, #16]
   18076:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1807a:	f003 fd28 	bl	1bace <oa_push>
        ret = var_copy(&object->thresholdActive, value);
   1807e:	4604      	mov	r4, r0
   18080:	e000      	b.n	18084 <cosem_setLimiter+0xae>
            object->monitoredValue = NULL;
   18082:	612c      	str	r4, [r5, #16]
}
   18084:	4620      	mov	r0, r4
   18086:	b007      	add	sp, #28
   18088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   1808c:	2a03      	cmp	r2, #3
   1808e:	d105      	bne.n	1809c <cosem_setLimiter+0xc6>
        ret = var_copy(&object->thresholdActive, value);
   18090:	4619      	mov	r1, r3
   18092:	f105 0018 	add.w	r0, r5, #24
   18096:	f7ec fa89 	bl	45ac <var_copy>
   1809a:	e7f0      	b.n	1807e <cosem_setLimiter+0xa8>
    else if (index == 4)
   1809c:	2a04      	cmp	r2, #4
   1809e:	d103      	bne.n	180a8 <cosem_setLimiter+0xd2>
        ret = var_copy(&object->thresholdNormal, value);
   180a0:	4619      	mov	r1, r3
   180a2:	f105 0028 	add.w	r0, r5, #40	; 0x28
   180a6:	e7f6      	b.n	18096 <cosem_setLimiter+0xc0>
    else if (index == 5)
   180a8:	2a05      	cmp	r2, #5
   180aa:	d103      	bne.n	180b4 <cosem_setLimiter+0xde>
        ret = var_copy(&object->thresholdEmergency, value);
   180ac:	4619      	mov	r1, r3
   180ae:	f105 0038 	add.w	r0, r5, #56	; 0x38
   180b2:	e7f0      	b.n	18096 <cosem_setLimiter+0xc0>
    else if (index == 6)
   180b4:	2a06      	cmp	r2, #6
   180b6:	d104      	bne.n	180c2 <cosem_setLimiter+0xec>
        object->minOverThresholdDuration = var_toInteger(value);
   180b8:	4618      	mov	r0, r3
   180ba:	f004 f954 	bl	1c366 <var_toInteger>
   180be:	64a8      	str	r0, [r5, #72]	; 0x48
   180c0:	e7c8      	b.n	18054 <cosem_setLimiter+0x7e>
    else if (index == 7)
   180c2:	2a07      	cmp	r2, #7
   180c4:	d104      	bne.n	180d0 <cosem_setLimiter+0xfa>
        object->minUnderThresholdDuration = var_toInteger(value);
   180c6:	4618      	mov	r0, r3
   180c8:	f004 f94d 	bl	1c366 <var_toInteger>
   180cc:	64e8      	str	r0, [r5, #76]	; 0x4c
   180ce:	e7c1      	b.n	18054 <cosem_setLimiter+0x7e>
    else if (index == 8)
   180d0:	2a08      	cmp	r2, #8
   180d2:	d137      	bne.n	18144 <cosem_setLimiter+0x16e>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   180d4:	6898      	ldr	r0, [r3, #8]
   180d6:	aa01      	add	r2, sp, #4
   180d8:	2100      	movs	r1, #0
   180da:	f003 ffca 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   180de:	4604      	mov	r4, r0
   180e0:	2800      	cmp	r0, #0
   180e2:	d1cf      	bne.n	18084 <cosem_setLimiter+0xae>
        object->emergencyProfile.id = (uint16_t)var_toInteger(tmp);
   180e4:	9801      	ldr	r0, [sp, #4]
   180e6:	f004 f93e 	bl	1c366 <var_toInteger>
   180ea:	f8a5 0050 	strh.w	r0, [r5, #80]	; 0x50
        ret = va_getByIndex(value->Arr, 1, &tmp);
   180ee:	68b0      	ldr	r0, [r6, #8]
   180f0:	aa01      	add	r2, sp, #4
   180f2:	2101      	movs	r1, #1
   180f4:	f003 ffbd 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   180f8:	4604      	mov	r4, r0
   180fa:	2800      	cmp	r0, #0
   180fc:	d1c2      	bne.n	18084 <cosem_setLimiter+0xae>
        ret = var_init(&tmp2);
   180fe:	a802      	add	r0, sp, #8
   18100:	f003 fddd 	bl	1bcbe <var_init>
        if (ret != DLMS_ERROR_CODE_OK)
   18104:	4604      	mov	r4, r0
   18106:	2800      	cmp	r0, #0
   18108:	d1bc      	bne.n	18084 <cosem_setLimiter+0xae>
        ret = dlms_changeType2(tmp, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1810a:	9801      	ldr	r0, [sp, #4]
   1810c:	aa02      	add	r2, sp, #8
   1810e:	2119      	movs	r1, #25
   18110:	f7f9 f9e0 	bl	114d4 <dlms_changeType2>
        if (ret != DLMS_ERROR_CODE_OK)
   18114:	4604      	mov	r4, r0
   18116:	2800      	cmp	r0, #0
   18118:	d1b4      	bne.n	18084 <cosem_setLimiter+0xae>
        time_copy(&object->emergencyProfile.activationTime, tmp2.dateTime);
   1811a:	9904      	ldr	r1, [sp, #16]
   1811c:	f105 0054 	add.w	r0, r5, #84	; 0x54
   18120:	f7f7 fa25 	bl	f56e <time_copy>
        var_clear(&tmp2);
   18124:	a802      	add	r0, sp, #8
   18126:	f003 ff26 	bl	1bf76 <var_clear>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   1812a:	68b0      	ldr	r0, [r6, #8]
   1812c:	aa01      	add	r2, sp, #4
   1812e:	2102      	movs	r1, #2
   18130:	f003 ff9f 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18134:	4604      	mov	r4, r0
   18136:	2800      	cmp	r0, #0
   18138:	d1a4      	bne.n	18084 <cosem_setLimiter+0xae>
        object->emergencyProfile.duration = var_toInteger(tmp);
   1813a:	9801      	ldr	r0, [sp, #4]
   1813c:	f004 f913 	bl	1c366 <var_toInteger>
   18140:	6628      	str	r0, [r5, #96]	; 0x60
   18142:	e79f      	b.n	18084 <cosem_setLimiter+0xae>
    else if (index == 9)
   18144:	2a09      	cmp	r2, #9
   18146:	d128      	bne.n	1819a <cosem_setLimiter+0x1c4>
        va_clear(&object->emergencyProfileGroupIDs);
   18148:	3564      	adds	r5, #100	; 0x64
   1814a:	4628      	mov	r0, r5
   1814c:	f003 feee 	bl	1bf2c <va_clear>
        if (value->Arr != NULL)
   18150:	68b3      	ldr	r3, [r6, #8]
   18152:	2b00      	cmp	r3, #0
   18154:	f43f af7e 	beq.w	18054 <cosem_setLimiter+0x7e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18158:	2700      	movs	r7, #0
   1815a:	e019      	b.n	18190 <cosem_setLimiter+0x1ba>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1815c:	aa01      	add	r2, sp, #4
   1815e:	4639      	mov	r1, r7
   18160:	f003 ff87 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18164:	4604      	mov	r4, r0
   18166:	2800      	cmp	r0, #0
   18168:	d18c      	bne.n	18084 <cosem_setLimiter+0xae>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1816a:	2010      	movs	r0, #16
   1816c:	f7f5 f8c2 	bl	d2f4 <malloc>
   18170:	9002      	str	r0, [sp, #8]
                var_init(tmp3);
   18172:	f003 fda4 	bl	1bcbe <var_init>
                ret = var_copy(tmp3, tmp);
   18176:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
   1817a:	f7ec fa17 	bl	45ac <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   1817e:	4604      	mov	r4, r0
   18180:	2800      	cmp	r0, #0
   18182:	f47f af7f 	bne.w	18084 <cosem_setLimiter+0xae>
                va_push(&object->emergencyProfileGroupIDs, tmp3);
   18186:	9902      	ldr	r1, [sp, #8]
   18188:	4628      	mov	r0, r5
   1818a:	f003 fea6 	bl	1beda <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1818e:	3701      	adds	r7, #1
   18190:	68b0      	ldr	r0, [r6, #8]
   18192:	88c3      	ldrh	r3, [r0, #6]
   18194:	42bb      	cmp	r3, r7
   18196:	d1e1      	bne.n	1815c <cosem_setLimiter+0x186>
   18198:	e75c      	b.n	18054 <cosem_setLimiter+0x7e>
    else if (index == 10)
   1819a:	2a0a      	cmp	r2, #10
   1819c:	d103      	bne.n	181a6 <cosem_setLimiter+0x1d0>
        object->emergencyProfileActive = value->boolVal;
   1819e:	7a1b      	ldrb	r3, [r3, #8]
   181a0:	f881 306c 	strb.w	r3, [r1, #108]	; 0x6c
   181a4:	e756      	b.n	18054 <cosem_setLimiter+0x7e>
    else if (index == 11)
   181a6:	2a0b      	cmp	r2, #11
   181a8:	f040 809a 	bne.w	182e0 <cosem_setLimiter+0x30a>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   181ac:	6898      	ldr	r0, [r3, #8]
   181ae:	aa01      	add	r2, sp, #4
   181b0:	2100      	movs	r1, #0
   181b2:	f003 ff5e 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   181b6:	4604      	mov	r4, r0
   181b8:	2800      	cmp	r0, #0
   181ba:	f47f af63 	bne.w	18084 <cosem_setLimiter+0xae>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   181be:	9b01      	ldr	r3, [sp, #4]
   181c0:	4601      	mov	r1, r0
   181c2:	aa02      	add	r2, sp, #8
   181c4:	6898      	ldr	r0, [r3, #8]
   181c6:	f003 ff54 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   181ca:	4604      	mov	r4, r0
   181cc:	2800      	cmp	r0, #0
   181ce:	f47f af59 	bne.w	18084 <cosem_setLimiter+0xae>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp3->byteArr->data, (gxObject**)&object->actionOverThreshold.script)) != 0)
   181d2:	9b02      	ldr	r3, [sp, #8]
   181d4:	689a      	ldr	r2, [r3, #8]
   181d6:	f107 0898 	add.w	r8, r7, #152	; 0x98
   181da:	f105 0970 	add.w	r9, r5, #112	; 0x70
   181de:	6812      	ldr	r2, [r2, #0]
   181e0:	464b      	mov	r3, r9
   181e2:	2109      	movs	r1, #9
   181e4:	4640      	mov	r0, r8
   181e6:	f003 fd01 	bl	1bbec <oa_findByLN>
   181ea:	4604      	mov	r4, r0
   181ec:	2800      	cmp	r0, #0
   181ee:	f47f af49 	bne.w	18084 <cosem_setLimiter+0xae>
        if (object->actionOverThreshold.script == NULL)
   181f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   181f4:	2b00      	cmp	r3, #0
   181f6:	d041      	beq.n	1827c <cosem_setLimiter+0x2a6>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   181f8:	9b01      	ldr	r3, [sp, #4]
   181fa:	aa02      	add	r2, sp, #8
   181fc:	6898      	ldr	r0, [r3, #8]
   181fe:	2101      	movs	r1, #1
   18200:	f003 ff37 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18204:	4604      	mov	r4, r0
   18206:	2800      	cmp	r0, #0
   18208:	f47f af3c 	bne.w	18084 <cosem_setLimiter+0xae>
        object->actionOverThreshold.scriptSelector = (uint16_t)var_toInteger(tmp3);
   1820c:	9802      	ldr	r0, [sp, #8]
   1820e:	f004 f8aa 	bl	1c366 <var_toInteger>
   18212:	f8a5 0074 	strh.w	r0, [r5, #116]	; 0x74
        ret = va_getByIndex(value->Arr, 1, &tmp);
   18216:	68b0      	ldr	r0, [r6, #8]
   18218:	aa01      	add	r2, sp, #4
   1821a:	2101      	movs	r1, #1
   1821c:	f003 ff29 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18220:	4604      	mov	r4, r0
   18222:	2800      	cmp	r0, #0
   18224:	f47f af2e 	bne.w	18084 <cosem_setLimiter+0xae>
        ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   18228:	9b01      	ldr	r3, [sp, #4]
   1822a:	4601      	mov	r1, r0
   1822c:	aa02      	add	r2, sp, #8
   1822e:	6898      	ldr	r0, [r3, #8]
   18230:	f003 ff1f 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18234:	4604      	mov	r4, r0
   18236:	2800      	cmp	r0, #0
   18238:	f47f af24 	bne.w	18084 <cosem_setLimiter+0xae>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp3->byteArr->data, (gxObject**)&object->actionUnderThreshold.script)) != 0)
   1823c:	9b02      	ldr	r3, [sp, #8]
   1823e:	689a      	ldr	r2, [r3, #8]
   18240:	f105 0678 	add.w	r6, r5, #120	; 0x78
   18244:	6812      	ldr	r2, [r2, #0]
   18246:	4633      	mov	r3, r6
   18248:	2109      	movs	r1, #9
   1824a:	4640      	mov	r0, r8
   1824c:	f003 fcce 	bl	1bbec <oa_findByLN>
   18250:	4604      	mov	r4, r0
   18252:	2800      	cmp	r0, #0
   18254:	f47f af16 	bne.w	18084 <cosem_setLimiter+0xae>
        if (object->actionUnderThreshold.script == NULL)
   18258:	6fab      	ldr	r3, [r5, #120]	; 0x78
   1825a:	b343      	cbz	r3, 182ae <cosem_setLimiter+0x2d8>
        ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1825c:	9b01      	ldr	r3, [sp, #4]
   1825e:	aa02      	add	r2, sp, #8
   18260:	6898      	ldr	r0, [r3, #8]
   18262:	2101      	movs	r1, #1
   18264:	f003 ff05 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18268:	4604      	mov	r4, r0
   1826a:	2800      	cmp	r0, #0
   1826c:	f47f af0a 	bne.w	18084 <cosem_setLimiter+0xae>
        object->actionUnderThreshold.scriptSelector = (uint16_t)var_toInteger(tmp3);
   18270:	9802      	ldr	r0, [sp, #8]
   18272:	f004 f878 	bl	1c366 <var_toInteger>
   18276:	f8a5 007c 	strh.w	r0, [r5, #124]	; 0x7c
   1827a:	e703      	b.n	18084 <cosem_setLimiter+0xae>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->actionOverThreshold.script)) != 0)
   1827c:	4649      	mov	r1, r9
   1827e:	2009      	movs	r0, #9
   18280:	f7e9 ff46 	bl	2110 <cosem_createObject>
   18284:	4604      	mov	r4, r0
   18286:	2800      	cmp	r0, #0
   18288:	f47f aefc 	bne.w	18084 <cosem_setLimiter+0xae>
            memcpy(object->actionOverThreshold.script->base.logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   1828c:	9b02      	ldr	r3, [sp, #8]
   1828e:	6f28      	ldr	r0, [r5, #112]	; 0x70
   18290:	689b      	ldr	r3, [r3, #8]
   18292:	3006      	adds	r0, #6
   18294:	6819      	ldr	r1, [r3, #0]
   18296:	88da      	ldrh	r2, [r3, #6]
   18298:	f005 ffb3 	bl	1e202 <memcpy>
            ret = oa_push(&settings->releasedObjects, (gxObject*)object->actionOverThreshold.script);
   1829c:	6f29      	ldr	r1, [r5, #112]	; 0x70
   1829e:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   182a2:	f003 fc14 	bl	1bace <oa_push>
            if (ret != DLMS_ERROR_CODE_OK)
   182a6:	4604      	mov	r4, r0
   182a8:	2800      	cmp	r0, #0
   182aa:	d0a5      	beq.n	181f8 <cosem_setLimiter+0x222>
   182ac:	e6ea      	b.n	18084 <cosem_setLimiter+0xae>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&object->actionUnderThreshold.script)) != 0)
   182ae:	4631      	mov	r1, r6
   182b0:	2009      	movs	r0, #9
   182b2:	f7e9 ff2d 	bl	2110 <cosem_createObject>
   182b6:	4604      	mov	r4, r0
   182b8:	2800      	cmp	r0, #0
   182ba:	f47f aee3 	bne.w	18084 <cosem_setLimiter+0xae>
            memcpy(object->actionUnderThreshold.script->base.logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   182be:	9b02      	ldr	r3, [sp, #8]
   182c0:	6fa8      	ldr	r0, [r5, #120]	; 0x78
   182c2:	689b      	ldr	r3, [r3, #8]
   182c4:	3006      	adds	r0, #6
   182c6:	6819      	ldr	r1, [r3, #0]
   182c8:	88da      	ldrh	r2, [r3, #6]
   182ca:	f005 ff9a 	bl	1e202 <memcpy>
            ret = oa_push(&settings->releasedObjects, (gxObject*)object->actionUnderThreshold.script);
   182ce:	6fa9      	ldr	r1, [r5, #120]	; 0x78
   182d0:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   182d4:	f003 fbfb 	bl	1bace <oa_push>
            if (ret != DLMS_ERROR_CODE_OK)
   182d8:	4604      	mov	r4, r0
   182da:	2800      	cmp	r0, #0
   182dc:	d0be      	beq.n	1825c <cosem_setLimiter+0x286>
   182de:	e6d1      	b.n	18084 <cosem_setLimiter+0xae>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   182e0:	f44f 7481 	mov.w	r4, #258	; 0x102
   182e4:	e6ce      	b.n	18084 <cosem_setLimiter+0xae>

000182e6 <cosem_setmMbusClient>:
    if (index == 2)
   182e6:	2a02      	cmp	r2, #2
{
   182e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   182ec:	4607      	mov	r7, r0
   182ee:	460d      	mov	r5, r1
   182f0:	461e      	mov	r6, r3
    if (index == 2)
   182f2:	d123      	bne.n	1833c <cosem_setmMbusClient+0x56>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP, value->byteArr->data, &object->mBusPort)) != 0)
   182f4:	689a      	ldr	r2, [r3, #8]
   182f6:	f101 0818 	add.w	r8, r1, #24
   182fa:	6812      	ldr	r2, [r2, #0]
   182fc:	4643      	mov	r3, r8
   182fe:	214a      	movs	r1, #74	; 0x4a
   18300:	3098      	adds	r0, #152	; 0x98
   18302:	f003 fc73 	bl	1bbec <oa_findByLN>
   18306:	4604      	mov	r4, r0
   18308:	b9a0      	cbnz	r0, 18334 <cosem_setmMbusClient+0x4e>
        if (object->mBusPort == NULL)
   1830a:	69ab      	ldr	r3, [r5, #24]
   1830c:	b993      	cbnz	r3, 18334 <cosem_setmMbusClient+0x4e>
            if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_MBUS_MASTER_PORT_SETUP, &object->mBusPort)) != 0)
   1830e:	4641      	mov	r1, r8
   18310:	204a      	movs	r0, #74	; 0x4a
   18312:	f7e9 fefd 	bl	2110 <cosem_createObject>
   18316:	4604      	mov	r4, r0
   18318:	b960      	cbnz	r0, 18334 <cosem_setmMbusClient+0x4e>
            memcpy(object->mBusPort->logicalName, value->byteArr->data, value->byteArr->size);
   1831a:	68b3      	ldr	r3, [r6, #8]
   1831c:	69a8      	ldr	r0, [r5, #24]
   1831e:	6819      	ldr	r1, [r3, #0]
   18320:	88da      	ldrh	r2, [r3, #6]
   18322:	3006      	adds	r0, #6
   18324:	f005 ff6d 	bl	1e202 <memcpy>
            ret = oa_push(&settings->releasedObjects, object->mBusPort);
   18328:	69a9      	ldr	r1, [r5, #24]
   1832a:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1832e:	f003 fbce 	bl	1bace <oa_push>
   18332:	4604      	mov	r4, r0
}
   18334:	4620      	mov	r0, r4
   18336:	b003      	add	sp, #12
   18338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   1833c:	2a03      	cmp	r2, #3
   1833e:	d155      	bne.n	183ec <cosem_setmMbusClient+0x106>
        arr_clearKeyValuePair(&object->captureDefinition);
   18340:	351c      	adds	r5, #28
   18342:	4628      	mov	r0, r5
   18344:	f7f9 fc3a 	bl	11bbc <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   18348:	68b3      	ldr	r3, [r6, #8]
   1834a:	2b00      	cmp	r3, #0
   1834c:	d14b      	bne.n	183e6 <cosem_setmMbusClient+0x100>
    int ret = DLMS_ERROR_CODE_OK, pos;
   1834e:	2400      	movs	r4, #0
        object->encryptionKeyStatus = (DLMS_MBUS_ENCRYPTION_KEY_STATUS)var_toInteger(value);
   18350:	e7f0      	b.n	18334 <cosem_setmMbusClient+0x4e>
                bb_set(end, tmp3->byteArr->data, tmp3->byteArr->size);
   18352:	9b01      	ldr	r3, [sp, #4]
   18354:	689b      	ldr	r3, [r3, #8]
   18356:	4648      	mov	r0, r9
   18358:	6819      	ldr	r1, [r3, #0]
   1835a:	88da      	ldrh	r2, [r3, #6]
   1835c:	f7f6 f93d 	bl	e5da <bb_set>
                arr_push(&object->captureDefinition, key_init(start, end));
   18360:	4649      	mov	r1, r9
   18362:	4638      	mov	r0, r7
   18364:	f7fc fee5 	bl	15132 <key_init>
   18368:	4601      	mov	r1, r0
   1836a:	4628      	mov	r0, r5
   1836c:	f7f9 fbd8 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18370:	f108 0801 	add.w	r8, r8, #1
   18374:	68b0      	ldr	r0, [r6, #8]
   18376:	88c3      	ldrh	r3, [r0, #6]
   18378:	4543      	cmp	r3, r8
   1837a:	d0e8      	beq.n	1834e <cosem_setmMbusClient+0x68>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1837c:	466a      	mov	r2, sp
   1837e:	4641      	mov	r1, r8
   18380:	f003 fe77 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18384:	4604      	mov	r4, r0
   18386:	2800      	cmp	r0, #0
   18388:	d1d4      	bne.n	18334 <cosem_setmMbusClient+0x4e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   1838a:	9b00      	ldr	r3, [sp, #0]
   1838c:	4601      	mov	r1, r0
   1838e:	aa01      	add	r2, sp, #4
   18390:	6898      	ldr	r0, [r3, #8]
   18392:	f003 fe6e 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18396:	4604      	mov	r4, r0
   18398:	2800      	cmp	r0, #0
   1839a:	d1cb      	bne.n	18334 <cosem_setmMbusClient+0x4e>
                start = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1839c:	200c      	movs	r0, #12
   1839e:	f7f4 ffa9 	bl	d2f4 <malloc>
   183a2:	4607      	mov	r7, r0
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   183a4:	200c      	movs	r0, #12
   183a6:	f7f4 ffa5 	bl	d2f4 <malloc>
   183aa:	4681      	mov	r9, r0
                BYTE_BUFFER_INIT(start);
   183ac:	4638      	mov	r0, r7
   183ae:	f7f5 ffc5 	bl	e33c <bb_init>
                BYTE_BUFFER_INIT(end);
   183b2:	4648      	mov	r0, r9
   183b4:	f7f5 ffc2 	bl	e33c <bb_init>
                bb_set(start, tmp3->byteArr->data, tmp3->byteArr->size);
   183b8:	9b01      	ldr	r3, [sp, #4]
   183ba:	689b      	ldr	r3, [r3, #8]
   183bc:	4638      	mov	r0, r7
   183be:	88da      	ldrh	r2, [r3, #6]
   183c0:	6819      	ldr	r1, [r3, #0]
   183c2:	f7f6 f90a 	bl	e5da <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   183c6:	9b00      	ldr	r3, [sp, #0]
   183c8:	aa01      	add	r2, sp, #4
   183ca:	6898      	ldr	r0, [r3, #8]
   183cc:	2101      	movs	r1, #1
   183ce:	f003 fe50 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   183d2:	4604      	mov	r4, r0
   183d4:	2800      	cmp	r0, #0
   183d6:	d0bc      	beq.n	18352 <cosem_setmMbusClient+0x6c>
                    gxfree(start);
   183d8:	4638      	mov	r0, r7
   183da:	f7f4 ff93 	bl	d304 <free>
                    gxfree(end);
   183de:	4648      	mov	r0, r9
   183e0:	f7f4 ff90 	bl	d304 <free>
                    break;
   183e4:	e7a6      	b.n	18334 <cosem_setmMbusClient+0x4e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   183e6:	f04f 0800 	mov.w	r8, #0
   183ea:	e7c3      	b.n	18374 <cosem_setmMbusClient+0x8e>
    else if (index == 4)
   183ec:	2a04      	cmp	r2, #4
   183ee:	d104      	bne.n	183fa <cosem_setmMbusClient+0x114>
        object->capturePeriod = var_toInteger(value);
   183f0:	4618      	mov	r0, r3
   183f2:	f003 ffb8 	bl	1c366 <var_toInteger>
   183f6:	6128      	str	r0, [r5, #16]
   183f8:	e7a9      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 5)
   183fa:	2a05      	cmp	r2, #5
   183fc:	d104      	bne.n	18408 <cosem_setmMbusClient+0x122>
        object->primaryAddress = (unsigned char)var_toInteger(value);
   183fe:	4618      	mov	r0, r3
   18400:	f003 ffb1 	bl	1c366 <var_toInteger>
   18404:	7528      	strb	r0, [r5, #20]
   18406:	e7a2      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 6)
   18408:	2a06      	cmp	r2, #6
   1840a:	d104      	bne.n	18416 <cosem_setmMbusClient+0x130>
        object->identificationNumber = var_toInteger(value);
   1840c:	4618      	mov	r0, r3
   1840e:	f003 ffaa 	bl	1c366 <var_toInteger>
   18412:	62a8      	str	r0, [r5, #40]	; 0x28
   18414:	e79b      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 7)
   18416:	2a07      	cmp	r2, #7
   18418:	d104      	bne.n	18424 <cosem_setmMbusClient+0x13e>
        object->manufacturerID = (uint16_t)var_toInteger(value);
   1841a:	4618      	mov	r0, r3
   1841c:	f003 ffa3 	bl	1c366 <var_toInteger>
   18420:	85a8      	strh	r0, [r5, #44]	; 0x2c
   18422:	e794      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 8)
   18424:	2a08      	cmp	r2, #8
   18426:	d105      	bne.n	18434 <cosem_setmMbusClient+0x14e>
        object->dataHeaderVersion = (unsigned char)var_toInteger(value);
   18428:	4618      	mov	r0, r3
   1842a:	f003 ff9c 	bl	1c366 <var_toInteger>
   1842e:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
   18432:	e78c      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 9)
   18434:	2a09      	cmp	r2, #9
   18436:	d105      	bne.n	18444 <cosem_setmMbusClient+0x15e>
        object->deviceType = (unsigned char)var_toInteger(value);
   18438:	4618      	mov	r0, r3
   1843a:	f003 ff94 	bl	1c366 <var_toInteger>
   1843e:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   18442:	e784      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 10)
   18444:	2a0a      	cmp	r2, #10
   18446:	d105      	bne.n	18454 <cosem_setmMbusClient+0x16e>
        object->accessNumber = (unsigned char)var_toInteger(value);
   18448:	4618      	mov	r0, r3
   1844a:	f003 ff8c 	bl	1c366 <var_toInteger>
   1844e:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
   18452:	e77c      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 11)
   18454:	2a0b      	cmp	r2, #11
   18456:	d105      	bne.n	18464 <cosem_setmMbusClient+0x17e>
        object->status = (unsigned char)var_toInteger(value);
   18458:	4618      	mov	r0, r3
   1845a:	f003 ff84 	bl	1c366 <var_toInteger>
   1845e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
   18462:	e774      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 12)
   18464:	2a0c      	cmp	r2, #12
   18466:	d105      	bne.n	18474 <cosem_setmMbusClient+0x18e>
        object->alarm = (unsigned char)var_toInteger(value);
   18468:	4618      	mov	r0, r3
   1846a:	f003 ff7c 	bl	1c366 <var_toInteger>
   1846e:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
   18472:	e76c      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 13 && object->base.version != 0)
   18474:	2a0d      	cmp	r2, #13
   18476:	d106      	bne.n	18486 <cosem_setmMbusClient+0x1a0>
   18478:	788b      	ldrb	r3, [r1, #2]
   1847a:	b173      	cbz	r3, 1849a <cosem_setmMbusClient+0x1b4>
        object->configuration = (uint16_t)var_toInteger(value);
   1847c:	4630      	mov	r0, r6
   1847e:	f003 ff72 	bl	1c366 <var_toInteger>
   18482:	86a8      	strh	r0, [r5, #52]	; 0x34
   18484:	e763      	b.n	1834e <cosem_setmMbusClient+0x68>
    else if (index == 14 && object->base.version != 0)
   18486:	2a0e      	cmp	r2, #14
   18488:	d107      	bne.n	1849a <cosem_setmMbusClient+0x1b4>
   1848a:	788b      	ldrb	r3, [r1, #2]
   1848c:	b12b      	cbz	r3, 1849a <cosem_setmMbusClient+0x1b4>
        object->encryptionKeyStatus = (DLMS_MBUS_ENCRYPTION_KEY_STATUS)var_toInteger(value);
   1848e:	4630      	mov	r0, r6
   18490:	f003 ff69 	bl	1c366 <var_toInteger>
   18494:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
   18498:	e759      	b.n	1834e <cosem_setmMbusClient+0x68>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1849a:	f44f 7481 	mov.w	r4, #258	; 0x102
   1849e:	e749      	b.n	18334 <cosem_setmMbusClient+0x4e>

000184a0 <cosem_setModemConfiguration>:
    if (index == 2)
   184a0:	2902      	cmp	r1, #2
{
   184a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   184a6:	4605      	mov	r5, r0
   184a8:	4616      	mov	r6, r2
    if (index == 2)
   184aa:	d109      	bne.n	184c0 <cosem_setModemConfiguration+0x20>
        object->communicationSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   184ac:	4610      	mov	r0, r2
   184ae:	f003 ff5a 	bl	1c366 <var_toInteger>
   184b2:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    int ret = 0, pos;
   184b6:	2400      	movs	r4, #0
}
   184b8:	4620      	mov	r0, r4
   184ba:	b003      	add	sp, #12
   184bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   184c0:	2903      	cmp	r1, #3
   184c2:	d157      	bne.n	18574 <cosem_setModemConfiguration+0xd4>
        obj_clearModemConfigurationInitialisationStrings(&object->initialisationStrings);
   184c4:	3510      	adds	r5, #16
   184c6:	4628      	mov	r0, r5
   184c8:	f7fc ff2e 	bl	15328 <obj_clearModemConfigurationInitialisationStrings>
        if (value->Arr != NULL)
   184cc:	68b3      	ldr	r3, [r6, #8]
   184ce:	2b00      	cmp	r3, #0
   184d0:	d0f1      	beq.n	184b6 <cosem_setModemConfiguration+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   184d2:	f04f 0800 	mov.w	r8, #0
   184d6:	e048      	b.n	1856a <cosem_setModemConfiguration+0xca>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   184d8:	466a      	mov	r2, sp
   184da:	4641      	mov	r1, r8
   184dc:	f003 fdc9 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   184e0:	4604      	mov	r4, r0
   184e2:	2800      	cmp	r0, #0
   184e4:	d1e8      	bne.n	184b8 <cosem_setModemConfiguration+0x18>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   184e6:	9b00      	ldr	r3, [sp, #0]
   184e8:	4601      	mov	r1, r0
   184ea:	aa01      	add	r2, sp, #4
   184ec:	6898      	ldr	r0, [r3, #8]
   184ee:	f003 fdc0 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   184f2:	4604      	mov	r4, r0
   184f4:	2800      	cmp	r0, #0
   184f6:	d1df      	bne.n	184b8 <cosem_setModemConfiguration+0x18>
                modemInit = (gxModemInitialisation*)gxmalloc(sizeof(gxModemInitialisation));
   184f8:	201c      	movs	r0, #28
   184fa:	f7f4 fefb 	bl	d2f4 <malloc>
                if (modemInit == NULL)
   184fe:	4607      	mov	r7, r0
   18500:	2800      	cmp	r0, #0
   18502:	d065      	beq.n	185d0 <cosem_setModemConfiguration+0x130>
                BYTE_BUFFER_INIT(&modemInit->response);
   18504:	f107 090c 	add.w	r9, r7, #12
                BYTE_BUFFER_INIT(&modemInit->request);
   18508:	f7f5 ff18 	bl	e33c <bb_init>
                BYTE_BUFFER_INIT(&modemInit->response);
   1850c:	4648      	mov	r0, r9
   1850e:	f7f5 ff15 	bl	e33c <bb_init>
                bb_set(&modemInit->request, tmp3->byteArr->data, tmp3->byteArr->size);
   18512:	9b01      	ldr	r3, [sp, #4]
   18514:	689b      	ldr	r3, [r3, #8]
   18516:	4638      	mov	r0, r7
   18518:	88da      	ldrh	r2, [r3, #6]
   1851a:	6819      	ldr	r1, [r3, #0]
   1851c:	f7f6 f85d 	bl	e5da <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18520:	9b00      	ldr	r3, [sp, #0]
   18522:	aa01      	add	r2, sp, #4
   18524:	6898      	ldr	r0, [r3, #8]
   18526:	2101      	movs	r1, #1
   18528:	f003 fda3 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1852c:	4604      	mov	r4, r0
   1852e:	2800      	cmp	r0, #0
   18530:	d1c2      	bne.n	184b8 <cosem_setModemConfiguration+0x18>
                bb_set(&modemInit->response, tmp3->byteArr->data, tmp3->byteArr->size);
   18532:	9b01      	ldr	r3, [sp, #4]
   18534:	689b      	ldr	r3, [r3, #8]
   18536:	4648      	mov	r0, r9
   18538:	88da      	ldrh	r2, [r3, #6]
   1853a:	6819      	ldr	r1, [r3, #0]
   1853c:	f7f6 f84d 	bl	e5da <bb_set>
                if (tmp->Arr->size > 2)
   18540:	9b00      	ldr	r3, [sp, #0]
   18542:	6898      	ldr	r0, [r3, #8]
   18544:	88c3      	ldrh	r3, [r0, #6]
   18546:	2b02      	cmp	r3, #2
   18548:	d909      	bls.n	1855e <cosem_setModemConfiguration+0xbe>
                    ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1854a:	aa01      	add	r2, sp, #4
   1854c:	2102      	movs	r1, #2
   1854e:	f003 fd90 	bl	1c072 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   18552:	4604      	mov	r4, r0
   18554:	2800      	cmp	r0, #0
   18556:	d1af      	bne.n	184b8 <cosem_setModemConfiguration+0x18>
                    modemInit->delay = tmp3->uiVal;
   18558:	9b01      	ldr	r3, [sp, #4]
   1855a:	891b      	ldrh	r3, [r3, #8]
   1855c:	833b      	strh	r3, [r7, #24]
                arr_push(&object->initialisationStrings, modemInit);
   1855e:	4639      	mov	r1, r7
   18560:	4628      	mov	r0, r5
   18562:	f7f9 fadd 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18566:	f108 0801 	add.w	r8, r8, #1
   1856a:	68b0      	ldr	r0, [r6, #8]
   1856c:	88c3      	ldrh	r3, [r0, #6]
   1856e:	4543      	cmp	r3, r8
   18570:	d1b2      	bne.n	184d8 <cosem_setModemConfiguration+0x38>
   18572:	e7a0      	b.n	184b6 <cosem_setModemConfiguration+0x16>
    else if (index == 4)
   18574:	2904      	cmp	r1, #4
   18576:	d12e      	bne.n	185d6 <cosem_setModemConfiguration+0x136>
        arr_clearStrings(&object->modemProfile);
   18578:	351c      	adds	r5, #28
   1857a:	4628      	mov	r0, r5
   1857c:	f7f9 fb3c 	bl	11bf8 <arr_clearStrings>
        if (value->Arr != NULL)
   18580:	68b3      	ldr	r3, [r6, #8]
   18582:	2b00      	cmp	r3, #0
   18584:	d097      	beq.n	184b6 <cosem_setModemConfiguration+0x16>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18586:	2700      	movs	r7, #0
   18588:	e01d      	b.n	185c6 <cosem_setModemConfiguration+0x126>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1858a:	466a      	mov	r2, sp
   1858c:	4639      	mov	r1, r7
   1858e:	f003 fd70 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18592:	4604      	mov	r4, r0
   18594:	2800      	cmp	r0, #0
   18596:	d18f      	bne.n	184b8 <cosem_setModemConfiguration+0x18>
                str = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   18598:	200c      	movs	r0, #12
   1859a:	f7f4 feab 	bl	d2f4 <malloc>
   1859e:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(str);
   185a0:	f7f5 fecc 	bl	e33c <bb_init>
                bb_set2(str, tmp->byteArr, 0, bb_size(tmp->byteArr));
   185a4:	9b00      	ldr	r3, [sp, #0]
   185a6:	f8d3 9008 	ldr.w	r9, [r3, #8]
   185aa:	4648      	mov	r0, r9
   185ac:	f7f5 fec3 	bl	e336 <bb_size>
   185b0:	4622      	mov	r2, r4
   185b2:	4603      	mov	r3, r0
   185b4:	4649      	mov	r1, r9
   185b6:	4640      	mov	r0, r8
   185b8:	f7f6 f83e 	bl	e638 <bb_set2>
                arr_push(&object->modemProfile, str);
   185bc:	4641      	mov	r1, r8
   185be:	4628      	mov	r0, r5
   185c0:	f7f9 faae 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   185c4:	3701      	adds	r7, #1
   185c6:	68b0      	ldr	r0, [r6, #8]
   185c8:	88c3      	ldrh	r3, [r0, #6]
   185ca:	42bb      	cmp	r3, r7
   185cc:	d1dd      	bne.n	1858a <cosem_setModemConfiguration+0xea>
   185ce:	e772      	b.n	184b6 <cosem_setModemConfiguration+0x16>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   185d0:	f44f 7482 	mov.w	r4, #260	; 0x104
   185d4:	e770      	b.n	184b8 <cosem_setModemConfiguration+0x18>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   185d6:	f44f 7481 	mov.w	r4, #258	; 0x102
   185da:	e76d      	b.n	184b8 <cosem_setModemConfiguration+0x18>

000185dc <cosem_setPppSetup>:
    if (index == 2)
   185dc:	2a02      	cmp	r2, #2
{
   185de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   185e2:	460d      	mov	r5, r1
   185e4:	461f      	mov	r7, r3
    if (index == 2)
   185e6:	d112      	bne.n	1860e <cosem_setPppSetup+0x32>
        if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_NONE, value->byteArr->data, &object->phy)) != 0)
   185e8:	689a      	ldr	r2, [r3, #8]
   185ea:	3098      	adds	r0, #152	; 0x98
   185ec:	f101 031c 	add.w	r3, r1, #28
   185f0:	6812      	ldr	r2, [r2, #0]
   185f2:	2100      	movs	r1, #0
   185f4:	f003 fafa 	bl	1bbec <oa_findByLN>
   185f8:	4604      	mov	r4, r0
   185fa:	b920      	cbnz	r0, 18606 <cosem_setPppSetup+0x2a>
        if (object->phy == NULL)
   185fc:	69eb      	ldr	r3, [r5, #28]
   185fe:	2b00      	cmp	r3, #0
   18600:	f000 80fd 	beq.w	187fe <cosem_setPppSetup+0x222>
    int ret = DLMS_ERROR_CODE_OK, pos;
   18604:	2400      	movs	r4, #0
}
   18606:	4620      	mov	r0, r4
   18608:	b003      	add	sp, #12
   1860a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 3)
   1860e:	2a03      	cmp	r2, #3
   18610:	d154      	bne.n	186bc <cosem_setPppSetup+0xe0>
        arr_clear(&object->lcpOptions);
   18612:	3520      	adds	r5, #32
   18614:	4628      	mov	r0, r5
   18616:	f7f9 fa98 	bl	11b4a <arr_clear>
        if (value->Arr != NULL)
   1861a:	68bb      	ldr	r3, [r7, #8]
   1861c:	2b00      	cmp	r3, #0
   1861e:	d0f1      	beq.n	18604 <cosem_setPppSetup+0x28>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18620:	f04f 0800 	mov.w	r8, #0
   18624:	e045      	b.n	186b2 <cosem_setPppSetup+0xd6>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   18626:	466a      	mov	r2, sp
   18628:	4641      	mov	r1, r8
   1862a:	f003 fd22 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1862e:	4604      	mov	r4, r0
   18630:	2800      	cmp	r0, #0
   18632:	d1e8      	bne.n	18606 <cosem_setPppSetup+0x2a>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   18634:	9b00      	ldr	r3, [sp, #0]
   18636:	4601      	mov	r1, r0
   18638:	aa01      	add	r2, sp, #4
   1863a:	6898      	ldr	r0, [r3, #8]
   1863c:	f003 fd19 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18640:	4604      	mov	r4, r0
   18642:	2800      	cmp	r0, #0
   18644:	d1df      	bne.n	18606 <cosem_setPppSetup+0x2a>
                lcpItem = (gxpppSetupLcpOption*)gxmalloc(sizeof(gxpppSetupLcpOption));
   18646:	2018      	movs	r0, #24
   18648:	f7f4 fe54 	bl	d2f4 <malloc>
                if (lcpItem == NULL)
   1864c:	4606      	mov	r6, r0
   1864e:	2800      	cmp	r0, #0
   18650:	f000 80d5 	beq.w	187fe <cosem_setPppSetup+0x222>
                var_init(&lcpItem->data);
   18654:	f100 0908 	add.w	r9, r0, #8
   18658:	4648      	mov	r0, r9
   1865a:	f003 fb30 	bl	1bcbe <var_init>
                lcpItem->type = (DLMS_PPP_SETUP_LCP_OPTION_TYPE)var_toInteger(tmp3);
   1865e:	9801      	ldr	r0, [sp, #4]
   18660:	f003 fe81 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18664:	9b00      	ldr	r3, [sp, #0]
                lcpItem->type = (DLMS_PPP_SETUP_LCP_OPTION_TYPE)var_toInteger(tmp3);
   18666:	7030      	strb	r0, [r6, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18668:	6898      	ldr	r0, [r3, #8]
   1866a:	aa01      	add	r2, sp, #4
   1866c:	2101      	movs	r1, #1
   1866e:	f003 fd00 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18672:	4604      	mov	r4, r0
   18674:	2800      	cmp	r0, #0
   18676:	f040 80be 	bne.w	187f6 <cosem_setPppSetup+0x21a>
                lcpItem->length = (unsigned char)var_toInteger(tmp3);
   1867a:	9801      	ldr	r0, [sp, #4]
   1867c:	f003 fe73 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   18680:	9b00      	ldr	r3, [sp, #0]
                lcpItem->length = (unsigned char)var_toInteger(tmp3);
   18682:	7070      	strb	r0, [r6, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   18684:	6898      	ldr	r0, [r3, #8]
   18686:	aa01      	add	r2, sp, #4
   18688:	2102      	movs	r1, #2
   1868a:	f003 fcf2 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1868e:	4604      	mov	r4, r0
   18690:	2800      	cmp	r0, #0
   18692:	f040 80b0 	bne.w	187f6 <cosem_setPppSetup+0x21a>
                ret = var_copy(&lcpItem->data, tmp3);
   18696:	9901      	ldr	r1, [sp, #4]
   18698:	4648      	mov	r0, r9
   1869a:	f7eb ff87 	bl	45ac <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   1869e:	4604      	mov	r4, r0
   186a0:	2800      	cmp	r0, #0
   186a2:	f040 80a8 	bne.w	187f6 <cosem_setPppSetup+0x21a>
                arr_push(&object->lcpOptions, lcpItem);
   186a6:	4631      	mov	r1, r6
   186a8:	4628      	mov	r0, r5
   186aa:	f7f9 fa39 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   186ae:	f108 0801 	add.w	r8, r8, #1
   186b2:	68b8      	ldr	r0, [r7, #8]
   186b4:	88c3      	ldrh	r3, [r0, #6]
   186b6:	4543      	cmp	r3, r8
   186b8:	d1b5      	bne.n	18626 <cosem_setPppSetup+0x4a>
   186ba:	e7a3      	b.n	18604 <cosem_setPppSetup+0x28>
    else if (index == 4)
   186bc:	2a04      	cmp	r2, #4
   186be:	d151      	bne.n	18764 <cosem_setPppSetup+0x188>
        arr_clear(&object->ipcpOptions);
   186c0:	3510      	adds	r5, #16
   186c2:	4628      	mov	r0, r5
   186c4:	f7f9 fa41 	bl	11b4a <arr_clear>
        if (value->Arr != NULL)
   186c8:	68bb      	ldr	r3, [r7, #8]
   186ca:	2b00      	cmp	r3, #0
   186cc:	d09a      	beq.n	18604 <cosem_setPppSetup+0x28>
    gxpppSetupIPCPOption* ipcpItem = NULL;
   186ce:	2600      	movs	r6, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   186d0:	46b0      	mov	r8, r6
   186d2:	e042      	b.n	1875a <cosem_setPppSetup+0x17e>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   186d4:	466a      	mov	r2, sp
   186d6:	4641      	mov	r1, r8
   186d8:	f003 fccb 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   186dc:	4604      	mov	r4, r0
   186de:	2800      	cmp	r0, #0
   186e0:	f040 8086 	bne.w	187f0 <cosem_setPppSetup+0x214>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   186e4:	9b00      	ldr	r3, [sp, #0]
   186e6:	4601      	mov	r1, r0
   186e8:	aa01      	add	r2, sp, #4
   186ea:	6898      	ldr	r0, [r3, #8]
   186ec:	f003 fcc1 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   186f0:	4604      	mov	r4, r0
   186f2:	2800      	cmp	r0, #0
   186f4:	d17c      	bne.n	187f0 <cosem_setPppSetup+0x214>
                ipcpItem = (gxpppSetupIPCPOption*)gxmalloc(sizeof(gxpppSetupIPCPOption));
   186f6:	2018      	movs	r0, #24
   186f8:	f7f4 fdfc 	bl	d2f4 <malloc>
                if (ipcpItem == NULL)
   186fc:	4606      	mov	r6, r0
   186fe:	2800      	cmp	r0, #0
   18700:	d07d      	beq.n	187fe <cosem_setPppSetup+0x222>
                var_init(&ipcpItem->data);
   18702:	f100 0908 	add.w	r9, r0, #8
   18706:	4648      	mov	r0, r9
   18708:	f003 fad9 	bl	1bcbe <var_init>
                ipcpItem->type = (DLMS_PPP_SETUP_IPCP_OPTION_TYPE)var_toInteger(tmp3);
   1870c:	9801      	ldr	r0, [sp, #4]
   1870e:	f003 fe2a 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18712:	9b00      	ldr	r3, [sp, #0]
                ipcpItem->type = (DLMS_PPP_SETUP_IPCP_OPTION_TYPE)var_toInteger(tmp3);
   18714:	7030      	strb	r0, [r6, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18716:	6898      	ldr	r0, [r3, #8]
   18718:	aa01      	add	r2, sp, #4
   1871a:	2101      	movs	r1, #1
   1871c:	f003 fca9 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18720:	4604      	mov	r4, r0
   18722:	2800      	cmp	r0, #0
   18724:	d167      	bne.n	187f6 <cosem_setPppSetup+0x21a>
                ipcpItem->length = (unsigned char)var_toInteger(tmp3);
   18726:	9801      	ldr	r0, [sp, #4]
   18728:	f003 fe1d 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1872c:	9b00      	ldr	r3, [sp, #0]
                ipcpItem->length = (unsigned char)var_toInteger(tmp3);
   1872e:	7070      	strb	r0, [r6, #1]
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   18730:	6898      	ldr	r0, [r3, #8]
   18732:	aa01      	add	r2, sp, #4
   18734:	2102      	movs	r1, #2
   18736:	f003 fc9c 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1873a:	4604      	mov	r4, r0
   1873c:	2800      	cmp	r0, #0
   1873e:	d15a      	bne.n	187f6 <cosem_setPppSetup+0x21a>
                ret = var_copy(&ipcpItem->data, tmp3);
   18740:	9901      	ldr	r1, [sp, #4]
   18742:	4648      	mov	r0, r9
   18744:	f7eb ff32 	bl	45ac <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   18748:	4604      	mov	r4, r0
   1874a:	2800      	cmp	r0, #0
   1874c:	d153      	bne.n	187f6 <cosem_setPppSetup+0x21a>
                arr_push(&object->ipcpOptions, ipcpItem);
   1874e:	4631      	mov	r1, r6
   18750:	4628      	mov	r0, r5
   18752:	f7f9 f9e5 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18756:	f108 0801 	add.w	r8, r8, #1
   1875a:	68b8      	ldr	r0, [r7, #8]
   1875c:	88c3      	ldrh	r3, [r0, #6]
   1875e:	4543      	cmp	r3, r8
   18760:	d1b8      	bne.n	186d4 <cosem_setPppSetup+0xf8>
   18762:	e74f      	b.n	18604 <cosem_setPppSetup+0x28>
    else if (index == 5)
   18764:	2a05      	cmp	r2, #5
   18766:	d140      	bne.n	187ea <cosem_setPppSetup+0x20e>
        if (value->Arr == NULL || value->Arr->size == 0)
   18768:	6898      	ldr	r0, [r3, #8]
   1876a:	b108      	cbz	r0, 18770 <cosem_setPppSetup+0x194>
   1876c:	88c3      	ldrh	r3, [r0, #6]
   1876e:	b943      	cbnz	r3, 18782 <cosem_setPppSetup+0x1a6>
            bb_clear(&object->userName);
   18770:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   18774:	f7f5 ffa5 	bl	e6c2 <bb_clear>
            bb_clear(&object->password);
   18778:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1877c:	f7f5 ffa1 	bl	e6c2 <bb_clear>
   18780:	e740      	b.n	18604 <cosem_setPppSetup+0x28>
        else if (value->Arr->size == 2)
   18782:	2b02      	cmp	r3, #2
   18784:	d131      	bne.n	187ea <cosem_setPppSetup+0x20e>
            ret = va_getByIndex(value->Arr, 0, &tmp);
   18786:	466a      	mov	r2, sp
   18788:	2100      	movs	r1, #0
   1878a:	f003 fc72 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1878e:	4604      	mov	r4, r0
   18790:	2800      	cmp	r0, #0
   18792:	f47f af38 	bne.w	18606 <cosem_setPppSetup+0x2a>
            bb_clear(&object->userName);
   18796:	f105 062c 	add.w	r6, r5, #44	; 0x2c
   1879a:	4630      	mov	r0, r6
   1879c:	f7f5 ff91 	bl	e6c2 <bb_clear>
            bb_set2(&object->userName, tmp->byteArr, 0, bb_size(tmp->byteArr));
   187a0:	9b00      	ldr	r3, [sp, #0]
   187a2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   187a6:	4640      	mov	r0, r8
   187a8:	f7f5 fdc5 	bl	e336 <bb_size>
   187ac:	4622      	mov	r2, r4
   187ae:	4603      	mov	r3, r0
   187b0:	4641      	mov	r1, r8
   187b2:	4630      	mov	r0, r6
   187b4:	f7f5 ff40 	bl	e638 <bb_set2>
            ret = va_getByIndex(value->Arr, 1, &tmp);
   187b8:	68b8      	ldr	r0, [r7, #8]
   187ba:	466a      	mov	r2, sp
   187bc:	2101      	movs	r1, #1
   187be:	f003 fc58 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   187c2:	4604      	mov	r4, r0
   187c4:	2800      	cmp	r0, #0
   187c6:	f47f af1e 	bne.w	18606 <cosem_setPppSetup+0x2a>
            bb_clear(&object->password);
   187ca:	3538      	adds	r5, #56	; 0x38
   187cc:	4628      	mov	r0, r5
   187ce:	f7f5 ff78 	bl	e6c2 <bb_clear>
            bb_set2(&object->password, tmp->byteArr, 0, bb_size(tmp->byteArr));
   187d2:	9b00      	ldr	r3, [sp, #0]
   187d4:	689e      	ldr	r6, [r3, #8]
   187d6:	4630      	mov	r0, r6
   187d8:	f7f5 fdad 	bl	e336 <bb_size>
   187dc:	4622      	mov	r2, r4
   187de:	4603      	mov	r3, r0
   187e0:	4631      	mov	r1, r6
   187e2:	4628      	mov	r0, r5
   187e4:	f7f5 ff28 	bl	e638 <bb_set2>
   187e8:	e70d      	b.n	18606 <cosem_setPppSetup+0x2a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   187ea:	f44f 7481 	mov.w	r4, #258	; 0x102
   187ee:	e70a      	b.n	18606 <cosem_setPppSetup+0x2a>
            if (ret != 0 && ipcpItem != NULL)
   187f0:	2e00      	cmp	r6, #0
   187f2:	f43f af08 	beq.w	18606 <cosem_setPppSetup+0x2a>
                gxfree(lcpItem);
   187f6:	4630      	mov	r0, r6
   187f8:	f7f4 fd84 	bl	d304 <free>
   187fc:	e703      	b.n	18606 <cosem_setPppSetup+0x2a>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   187fe:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && lcpItem != NULL)
   18802:	e700      	b.n	18606 <cosem_setPppSetup+0x2a>

00018804 <cosem_setRegisterActivation>:
{
   18804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char index = e->index;
   18808:	7e0b      	ldrb	r3, [r1, #24]
    gxRegisterActivation* object = (gxRegisterActivation*)e->target;
   1880a:	694d      	ldr	r5, [r1, #20]
    if (index == 2)
   1880c:	2b02      	cmp	r3, #2
{
   1880e:	b085      	sub	sp, #20
   18810:	4680      	mov	r8, r0
   18812:	460f      	mov	r7, r1
    if (index == 2)
   18814:	d148      	bne.n	188a8 <cosem_setRegisterActivation+0xa4>
        obj_clearRegisterActivationAssignment(&object->registerAssignment);
   18816:	3510      	adds	r5, #16
   18818:	4628      	mov	r0, r5
   1881a:	f7fc fe1d 	bl	15458 <obj_clearRegisterActivationAssignment>
        if (value->Arr != NULL)
   1881e:	68bb      	ldr	r3, [r7, #8]
   18820:	2b00      	cmp	r3, #0
   18822:	d13e      	bne.n	188a2 <cosem_setRegisterActivation+0x9e>
    int ret = 0, pos;
   18824:	2400      	movs	r4, #0
}
   18826:	4620      	mov	r0, r4
   18828:	b005      	add	sp, #20
   1882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1882e:	aa02      	add	r2, sp, #8
   18830:	4631      	mov	r1, r6
                objectDefinition = NULL;
   18832:	f8cd 9004 	str.w	r9, [sp, #4]
                ret = va_getByIndex(value->Arr, pos, &tmp);
   18836:	f003 fc1c 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1883a:	4604      	mov	r4, r0
   1883c:	2800      	cmp	r0, #0
   1883e:	d1f2      	bne.n	18826 <cosem_setRegisterActivation+0x22>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   18840:	9b02      	ldr	r3, [sp, #8]
   18842:	4601      	mov	r1, r0
   18844:	aa03      	add	r2, sp, #12
   18846:	6898      	ldr	r0, [r3, #8]
   18848:	f003 fc13 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1884c:	4604      	mov	r4, r0
   1884e:	2800      	cmp	r0, #0
   18850:	d1e9      	bne.n	18826 <cosem_setRegisterActivation+0x22>
                type = (short) var_toInteger(tmp3);
   18852:	9803      	ldr	r0, [sp, #12]
   18854:	f003 fd87 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18858:	9b02      	ldr	r3, [sp, #8]
                type = (short) var_toInteger(tmp3);
   1885a:	4682      	mov	sl, r0
   1885c:	fa0f fb80 	sxth.w	fp, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18860:	aa03      	add	r2, sp, #12
   18862:	6898      	ldr	r0, [r3, #8]
   18864:	2101      	movs	r1, #1
   18866:	f003 fc04 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1886a:	4604      	mov	r4, r0
   1886c:	2800      	cmp	r0, #0
   1886e:	d1da      	bne.n	18826 <cosem_setRegisterActivation+0x22>
                if (type != 0)
   18870:	f1bb 0f00 	cmp.w	fp, #0
   18874:	d00f      	beq.n	18896 <cosem_setRegisterActivation+0x92>
                unsigned char* ln = tmp3->byteArr->data;
   18876:	9b03      	ldr	r3, [sp, #12]
   18878:	689a      	ldr	r2, [r3, #8]
                    if ((ret = cosem_findObjectByLN(settings, type, ln, &objectDefinition)) != 0)
   1887a:	fa1f f18a 	uxth.w	r1, sl
   1887e:	6812      	ldr	r2, [r2, #0]
   18880:	ab01      	add	r3, sp, #4
   18882:	4640      	mov	r0, r8
   18884:	f7e9 fc6e 	bl	2164 <cosem_findObjectByLN>
   18888:	4604      	mov	r4, r0
   1888a:	2800      	cmp	r0, #0
   1888c:	d1cb      	bne.n	18826 <cosem_setRegisterActivation+0x22>
                    oa_push(&object->registerAssignment, objectDefinition);
   1888e:	9901      	ldr	r1, [sp, #4]
   18890:	4628      	mov	r0, r5
   18892:	f003 f91c 	bl	1bace <oa_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18896:	3601      	adds	r6, #1
   18898:	68b8      	ldr	r0, [r7, #8]
   1889a:	88c3      	ldrh	r3, [r0, #6]
   1889c:	42b3      	cmp	r3, r6
   1889e:	d1c6      	bne.n	1882e <cosem_setRegisterActivation+0x2a>
   188a0:	e7c0      	b.n	18824 <cosem_setRegisterActivation+0x20>
   188a2:	2600      	movs	r6, #0
                objectDefinition = NULL;
   188a4:	46b1      	mov	r9, r6
   188a6:	e7f7      	b.n	18898 <cosem_setRegisterActivation+0x94>
    else if (index == 3)
   188a8:	2b03      	cmp	r3, #3
   188aa:	d15b      	bne.n	18964 <cosem_setRegisterActivation+0x160>
        obj_clearRegisterActivationMaskList(&object->maskList);
   188ac:	3518      	adds	r5, #24
   188ae:	4628      	mov	r0, r5
   188b0:	f7fc fdd7 	bl	15462 <obj_clearRegisterActivationMaskList>
        if (value->Arr != NULL)
   188b4:	68bb      	ldr	r3, [r7, #8]
   188b6:	2b00      	cmp	r3, #0
   188b8:	d0b4      	beq.n	18824 <cosem_setRegisterActivation+0x20>
        gxByteBuffer* start = NULL, * end= NULL;
   188ba:	2600      	movs	r6, #0
   188bc:	46b0      	mov	r8, r6
            for (pos = 0; pos != value->Arr->size; ++pos)
   188be:	46b1      	mov	r9, r6
   188c0:	68b8      	ldr	r0, [r7, #8]
   188c2:	88c3      	ldrh	r3, [r0, #6]
   188c4:	454b      	cmp	r3, r9
   188c6:	d0ad      	beq.n	18824 <cosem_setRegisterActivation+0x20>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   188c8:	aa02      	add	r2, sp, #8
   188ca:	4649      	mov	r1, r9
   188cc:	f003 fbd1 	bl	1c072 <va_getByIndex>
   188d0:	4604      	mov	r4, r0
   188d2:	2800      	cmp	r0, #0
   188d4:	d15b      	bne.n	1898e <cosem_setRegisterActivation+0x18a>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   188d6:	9b02      	ldr	r3, [sp, #8]
   188d8:	4601      	mov	r1, r0
   188da:	aa03      	add	r2, sp, #12
   188dc:	6898      	ldr	r0, [r3, #8]
   188de:	f003 fbc8 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   188e2:	4604      	mov	r4, r0
   188e4:	2800      	cmp	r0, #0
   188e6:	d152      	bne.n	1898e <cosem_setRegisterActivation+0x18a>
                start = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   188e8:	200c      	movs	r0, #12
   188ea:	f7f4 fd03 	bl	d2f4 <malloc>
   188ee:	4680      	mov	r8, r0
                BYTE_BUFFER_INIT(start);
   188f0:	f7f5 fd24 	bl	e33c <bb_init>
                end = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   188f4:	200c      	movs	r0, #12
   188f6:	f7f4 fcfd 	bl	d2f4 <malloc>
   188fa:	4606      	mov	r6, r0
                BYTE_BUFFER_INIT(end);
   188fc:	f7f5 fd1e 	bl	e33c <bb_init>
                bb_set(start, tmp3->byteArr->data, tmp3->byteArr->size);
   18900:	9b03      	ldr	r3, [sp, #12]
   18902:	689b      	ldr	r3, [r3, #8]
   18904:	4640      	mov	r0, r8
   18906:	88da      	ldrh	r2, [r3, #6]
   18908:	6819      	ldr	r1, [r3, #0]
   1890a:	f7f5 fe66 	bl	e5da <bb_set>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1890e:	9b02      	ldr	r3, [sp, #8]
   18910:	aa03      	add	r2, sp, #12
   18912:	6898      	ldr	r0, [r3, #8]
   18914:	2101      	movs	r1, #1
   18916:	f003 fbac 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1891a:	4604      	mov	r4, r0
   1891c:	bbb8      	cbnz	r0, 1898e <cosem_setRegisterActivation+0x18a>
                for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   1891e:	4682      	mov	sl, r0
   18920:	9b03      	ldr	r3, [sp, #12]
   18922:	6898      	ldr	r0, [r3, #8]
   18924:	88c3      	ldrh	r3, [r0, #6]
   18926:	4553      	cmp	r3, sl
   18928:	d10a      	bne.n	18940 <cosem_setRegisterActivation+0x13c>
                arr_push(&object->maskList, key_init(start, end));
   1892a:	4631      	mov	r1, r6
   1892c:	4640      	mov	r0, r8
   1892e:	f7fc fc00 	bl	15132 <key_init>
   18932:	4601      	mov	r1, r0
   18934:	4628      	mov	r0, r5
   18936:	f7f9 f8f3 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1893a:	f109 0901 	add.w	r9, r9, #1
   1893e:	e7bf      	b.n	188c0 <cosem_setRegisterActivation+0xbc>
                    if ((ret = va_getByIndex(tmp3->Arr, pos2, &tmp)) != 0 ||
   18940:	aa02      	add	r2, sp, #8
   18942:	4651      	mov	r1, sl
   18944:	f003 fb95 	bl	1c072 <va_getByIndex>
   18948:	4604      	mov	r4, r0
   1894a:	bb00      	cbnz	r0, 1898e <cosem_setRegisterActivation+0x18a>
                        (ret = bb_setUInt8(end, (unsigned char)var_toInteger(tmp))) != 0)
   1894c:	9802      	ldr	r0, [sp, #8]
   1894e:	f003 fd0a 	bl	1c366 <var_toInteger>
   18952:	b2c1      	uxtb	r1, r0
   18954:	4630      	mov	r0, r6
   18956:	f7f5 fd5a 	bl	e40e <bb_setUInt8>
                    if ((ret = va_getByIndex(tmp3->Arr, pos2, &tmp)) != 0 ||
   1895a:	4604      	mov	r4, r0
   1895c:	b9b8      	cbnz	r0, 1898e <cosem_setRegisterActivation+0x18a>
                for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   1895e:	f10a 0a01 	add.w	sl, sl, #1
   18962:	e7dd      	b.n	18920 <cosem_setRegisterActivation+0x11c>
    else if (index == 4)
   18964:	2b04      	cmp	r3, #4
   18966:	d10f      	bne.n	18988 <cosem_setRegisterActivation+0x184>
        bb_clear(&object->activeMask);
   18968:	3524      	adds	r5, #36	; 0x24
   1896a:	4628      	mov	r0, r5
   1896c:	f7f5 fea9 	bl	e6c2 <bb_clear>
        ret = bb_set2(&object->activeMask, value->byteArr, 0, bb_size(value->byteArr));
   18970:	68bc      	ldr	r4, [r7, #8]
   18972:	4620      	mov	r0, r4
   18974:	f7f5 fcdf 	bl	e336 <bb_size>
   18978:	4621      	mov	r1, r4
   1897a:	4603      	mov	r3, r0
   1897c:	2200      	movs	r2, #0
   1897e:	4628      	mov	r0, r5
   18980:	f7f5 fe5a 	bl	e638 <bb_set2>
   18984:	4604      	mov	r4, r0
   18986:	e74e      	b.n	18826 <cosem_setRegisterActivation+0x22>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   18988:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1898c:	e74b      	b.n	18826 <cosem_setRegisterActivation+0x22>
                if (start != NULL)
   1898e:	f1b8 0f00 	cmp.w	r8, #0
   18992:	d002      	beq.n	1899a <cosem_setRegisterActivation+0x196>
                    gxfree(start);
   18994:	4640      	mov	r0, r8
   18996:	f7f4 fcb5 	bl	d304 <free>
                if (end != NULL)
   1899a:	2e00      	cmp	r6, #0
   1899c:	f43f af43 	beq.w	18826 <cosem_setRegisterActivation+0x22>
                    gxfree(end);
   189a0:	4630      	mov	r0, r6
   189a2:	f7f4 fcaf 	bl	d304 <free>
   189a6:	e73e      	b.n	18826 <cosem_setRegisterActivation+0x22>

000189a8 <cosem_setRegisterMonitor>:
{
   189a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (index == 2)
   189ac:	2a02      	cmp	r2, #2
{
   189ae:	b085      	sub	sp, #20
   189b0:	4607      	mov	r7, r0
   189b2:	460d      	mov	r5, r1
   189b4:	461e      	mov	r6, r3
    if (index == 2)
   189b6:	d133      	bne.n	18a20 <cosem_setRegisterMonitor+0x78>
        va_clear(&object->thresholds);
   189b8:	3524      	adds	r5, #36	; 0x24
   189ba:	4628      	mov	r0, r5
   189bc:	f003 fab6 	bl	1bf2c <va_clear>
        if (value->Arr != NULL)
   189c0:	68b3      	ldr	r3, [r6, #8]
   189c2:	b923      	cbnz	r3, 189ce <cosem_setRegisterMonitor+0x26>
    int ret = 0, pos;
   189c4:	2400      	movs	r4, #0
}
   189c6:	4620      	mov	r0, r4
   189c8:	b005      	add	sp, #20
   189ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            va_capacity(&object->thresholds, value->Arr->size);
   189ce:	88d9      	ldrh	r1, [r3, #6]
   189d0:	4628      	mov	r0, r5
   189d2:	f003 fa5a 	bl	1be8a <va_capacity>
            for (pos = 0; pos != value->Arr->size; ++pos)
   189d6:	2700      	movs	r7, #0
                tmp3 = NULL;
   189d8:	46b8      	mov	r8, r7
            for (pos = 0; pos != value->Arr->size; ++pos)
   189da:	68b0      	ldr	r0, [r6, #8]
   189dc:	88c3      	ldrh	r3, [r0, #6]
   189de:	42bb      	cmp	r3, r7
   189e0:	d0f0      	beq.n	189c4 <cosem_setRegisterMonitor+0x1c>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   189e2:	aa01      	add	r2, sp, #4
   189e4:	4639      	mov	r1, r7
                tmp3 = NULL;
   189e6:	f8cd 8008 	str.w	r8, [sp, #8]
                ret = va_getByIndex(value->Arr, pos, &tmp);
   189ea:	f003 fb42 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   189ee:	4604      	mov	r4, r0
   189f0:	2800      	cmp	r0, #0
   189f2:	d1e8      	bne.n	189c6 <cosem_setRegisterMonitor+0x1e>
                tmp3 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   189f4:	2010      	movs	r0, #16
   189f6:	f7f4 fc7d 	bl	d2f4 <malloc>
   189fa:	9002      	str	r0, [sp, #8]
                if (tmp3 == NULL)
   189fc:	2800      	cmp	r0, #0
   189fe:	f000 8118 	beq.w	18c32 <cosem_setRegisterMonitor+0x28a>
                var_init(tmp3);
   18a02:	f003 f95c 	bl	1bcbe <var_init>
                ret = var_copy(tmp3, tmp);
   18a06:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
   18a0a:	f7eb fdcf 	bl	45ac <var_copy>
                if (ret != DLMS_ERROR_CODE_OK)
   18a0e:	4604      	mov	r4, r0
   18a10:	2800      	cmp	r0, #0
   18a12:	d1d8      	bne.n	189c6 <cosem_setRegisterMonitor+0x1e>
                va_push(&object->thresholds, tmp3);
   18a14:	9902      	ldr	r1, [sp, #8]
   18a16:	4628      	mov	r0, r5
   18a18:	f003 fa5f 	bl	1beda <va_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18a1c:	3701      	adds	r7, #1
   18a1e:	e7dc      	b.n	189da <cosem_setRegisterMonitor+0x32>
    else if (index == 3)
   18a20:	2a03      	cmp	r2, #3
   18a22:	d148      	bne.n	18ab6 <cosem_setRegisterMonitor+0x10e>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   18a24:	6898      	ldr	r0, [r3, #8]
   18a26:	aa01      	add	r2, sp, #4
   18a28:	2100      	movs	r1, #0
   18a2a:	f003 fb22 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18a2e:	4604      	mov	r4, r0
   18a30:	2800      	cmp	r0, #0
   18a32:	d1c8      	bne.n	189c6 <cosem_setRegisterMonitor+0x1e>
        type = (short) var_toInteger(tmp);
   18a34:	9801      	ldr	r0, [sp, #4]
   18a36:	f003 fc96 	bl	1c366 <var_toInteger>
        ret = va_getByIndex(value->Arr, 1, &tmp);
   18a3a:	aa01      	add	r2, sp, #4
        type = (short) var_toInteger(tmp);
   18a3c:	4680      	mov	r8, r0
        ret = va_getByIndex(value->Arr, 1, &tmp);
   18a3e:	2101      	movs	r1, #1
   18a40:	68b0      	ldr	r0, [r6, #8]
   18a42:	f003 fb16 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18a46:	4604      	mov	r4, r0
   18a48:	2800      	cmp	r0, #0
   18a4a:	d1bc      	bne.n	189c6 <cosem_setRegisterMonitor+0x1e>
        if ((ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &object->monitoredValue.target)) != 0)
   18a4c:	9b01      	ldr	r3, [sp, #4]
   18a4e:	689a      	ldr	r2, [r3, #8]
   18a50:	fa1f f888 	uxth.w	r8, r8
   18a54:	f105 091c 	add.w	r9, r5, #28
   18a58:	6812      	ldr	r2, [r2, #0]
   18a5a:	464b      	mov	r3, r9
   18a5c:	4641      	mov	r1, r8
   18a5e:	f107 0098 	add.w	r0, r7, #152	; 0x98
   18a62:	f003 f8c3 	bl	1bbec <oa_findByLN>
   18a66:	4604      	mov	r4, r0
   18a68:	2800      	cmp	r0, #0
   18a6a:	d1ac      	bne.n	189c6 <cosem_setRegisterMonitor+0x1e>
        if (object->monitoredValue.target == NULL)
   18a6c:	69eb      	ldr	r3, [r5, #28]
   18a6e:	b9a3      	cbnz	r3, 18a9a <cosem_setRegisterMonitor+0xf2>
            ret = cosem_createObject(type, &object->monitoredValue.target);
   18a70:	4649      	mov	r1, r9
   18a72:	4640      	mov	r0, r8
   18a74:	f7e9 fb4c 	bl	2110 <cosem_createObject>
            if (ret != DLMS_ERROR_CODE_OK)
   18a78:	4604      	mov	r4, r0
   18a7a:	2800      	cmp	r0, #0
   18a7c:	d1a3      	bne.n	189c6 <cosem_setRegisterMonitor+0x1e>
            ret = cosem_setLogicalName(object->monitoredValue.target, tmp->byteArr->data);
   18a7e:	9b01      	ldr	r3, [sp, #4]
   18a80:	69e8      	ldr	r0, [r5, #28]
   18a82:	689b      	ldr	r3, [r3, #8]
   18a84:	6819      	ldr	r1, [r3, #0]
   18a86:	f7f6 fa1d 	bl	eec4 <cosem_setLogicalName>
            if (ret != DLMS_ERROR_CODE_OK)
   18a8a:	4604      	mov	r4, r0
   18a8c:	2800      	cmp	r0, #0
   18a8e:	d19a      	bne.n	189c6 <cosem_setRegisterMonitor+0x1e>
            ret = oa_push(&settings->releasedObjects, object->monitoredValue.target);
   18a90:	69e9      	ldr	r1, [r5, #28]
   18a92:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   18a96:	f003 f81a 	bl	1bace <oa_push>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   18a9a:	68b0      	ldr	r0, [r6, #8]
   18a9c:	aa01      	add	r2, sp, #4
   18a9e:	2102      	movs	r1, #2
   18aa0:	f003 fae7 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   18aa4:	4604      	mov	r4, r0
   18aa6:	2800      	cmp	r0, #0
   18aa8:	d18d      	bne.n	189c6 <cosem_setRegisterMonitor+0x1e>
        object->monitoredValue.attributeIndex = (unsigned char)var_toInteger(tmp);
   18aaa:	9801      	ldr	r0, [sp, #4]
   18aac:	f003 fc5b 	bl	1c366 <var_toInteger>
   18ab0:	f885 0020 	strb.w	r0, [r5, #32]
   18ab4:	e787      	b.n	189c6 <cosem_setRegisterMonitor+0x1e>
    else if (index == 4)
   18ab6:	2a04      	cmp	r2, #4
   18ab8:	f040 80be 	bne.w	18c38 <cosem_setRegisterMonitor+0x290>
        obj_clearRegisterMonitorActions(&object->actions);
   18abc:	3510      	adds	r5, #16
   18abe:	4628      	mov	r0, r5
   18ac0:	f7fc fc2d 	bl	1531e <obj_clearRegisterMonitorActions>
        if (value->Arr != NULL)
   18ac4:	68b3      	ldr	r3, [r6, #8]
   18ac6:	2b00      	cmp	r3, #0
   18ac8:	f43f af7c 	beq.w	189c4 <cosem_setRegisterMonitor+0x1c>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18acc:	f04f 0800 	mov.w	r8, #0
   18ad0:	e0a9      	b.n	18c26 <cosem_setRegisterMonitor+0x27e>
                ret = va_getByIndex(value->Arr, pos, &tmp4);
   18ad2:	aa03      	add	r2, sp, #12
   18ad4:	4641      	mov	r1, r8
   18ad6:	f003 facc 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18ada:	4604      	mov	r4, r0
   18adc:	2800      	cmp	r0, #0
   18ade:	f47f af72 	bne.w	189c6 <cosem_setRegisterMonitor+0x1e>
                actionSet = (gxActionSet*)gxmalloc(sizeof(gxActionSet));
   18ae2:	2010      	movs	r0, #16
   18ae4:	f7f4 fc06 	bl	d2f4 <malloc>
                ret = va_getByIndex(tmp4->Arr, 0, &tmp3);
   18ae8:	9b03      	ldr	r3, [sp, #12]
   18aea:	4621      	mov	r1, r4
                actionSet = (gxActionSet*)gxmalloc(sizeof(gxActionSet));
   18aec:	4681      	mov	r9, r0
                ret = va_getByIndex(tmp4->Arr, 0, &tmp3);
   18aee:	aa02      	add	r2, sp, #8
   18af0:	6898      	ldr	r0, [r3, #8]
   18af2:	f003 fabe 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18af6:	4604      	mov	r4, r0
   18af8:	2800      	cmp	r0, #0
   18afa:	f040 80a0 	bne.w	18c3e <cosem_setRegisterMonitor+0x296>
                ret = va_getByIndex(tmp3->Arr, 0, &tmp);
   18afe:	9b02      	ldr	r3, [sp, #8]
   18b00:	4601      	mov	r1, r0
   18b02:	aa01      	add	r2, sp, #4
   18b04:	6898      	ldr	r0, [r3, #8]
   18b06:	f003 fab4 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18b0a:	4604      	mov	r4, r0
   18b0c:	2800      	cmp	r0, #0
   18b0e:	f040 8096 	bne.w	18c3e <cosem_setRegisterMonitor+0x296>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionUp.script)) != 0)
   18b12:	9b01      	ldr	r3, [sp, #4]
                actionSet->actionUp.script = NULL;
   18b14:	f8c9 0000 	str.w	r0, [r9]
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionUp.script)) != 0)
   18b18:	689a      	ldr	r2, [r3, #8]
   18b1a:	f107 0b98 	add.w	fp, r7, #152	; 0x98
   18b1e:	6812      	ldr	r2, [r2, #0]
   18b20:	464b      	mov	r3, r9
   18b22:	2109      	movs	r1, #9
   18b24:	4658      	mov	r0, fp
   18b26:	f003 f861 	bl	1bbec <oa_findByLN>
   18b2a:	4604      	mov	r4, r0
   18b2c:	2800      	cmp	r0, #0
   18b2e:	f47f af4a 	bne.w	189c6 <cosem_setRegisterMonitor+0x1e>
                if (actionSet->actionUp.script == NULL)
   18b32:	f8d9 3000 	ldr.w	r3, [r9]
   18b36:	b9c3      	cbnz	r3, 18b6a <cosem_setRegisterMonitor+0x1c2>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&actionSet->actionUp.script);
   18b38:	4649      	mov	r1, r9
   18b3a:	2009      	movs	r0, #9
   18b3c:	f7e9 fae8 	bl	2110 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   18b40:	4604      	mov	r4, r0
   18b42:	2800      	cmp	r0, #0
   18b44:	f47f af3f 	bne.w	189c6 <cosem_setRegisterMonitor+0x1e>
                    ret = cosem_setLogicalName((gxObject*)actionSet->actionUp.script, tmp->byteArr->data);
   18b48:	9b01      	ldr	r3, [sp, #4]
   18b4a:	f8d9 0000 	ldr.w	r0, [r9]
   18b4e:	689b      	ldr	r3, [r3, #8]
   18b50:	6819      	ldr	r1, [r3, #0]
   18b52:	f7f6 f9b7 	bl	eec4 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   18b56:	4604      	mov	r4, r0
   18b58:	2800      	cmp	r0, #0
   18b5a:	f47f af34 	bne.w	189c6 <cosem_setRegisterMonitor+0x1e>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)actionSet->actionUp.script);
   18b5e:	f8d9 1000 	ldr.w	r1, [r9]
   18b62:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   18b66:	f002 ffb2 	bl	1bace <oa_push>
                ret = va_getByIndex(tmp3->Arr, 1, &tmp);
   18b6a:	9b02      	ldr	r3, [sp, #8]
   18b6c:	aa01      	add	r2, sp, #4
   18b6e:	6898      	ldr	r0, [r3, #8]
   18b70:	2101      	movs	r1, #1
   18b72:	f003 fa7e 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18b76:	4604      	mov	r4, r0
   18b78:	2800      	cmp	r0, #0
   18b7a:	d164      	bne.n	18c46 <cosem_setRegisterMonitor+0x29e>
                actionSet->actionUp.scriptSelector = (uint16_t)var_toInteger(tmp);
   18b7c:	9801      	ldr	r0, [sp, #4]
   18b7e:	f003 fbf2 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp4->Arr, 1, &tmp3);
   18b82:	9b03      	ldr	r3, [sp, #12]
                actionSet->actionUp.scriptSelector = (uint16_t)var_toInteger(tmp);
   18b84:	f8a9 0004 	strh.w	r0, [r9, #4]
                ret = va_getByIndex(tmp4->Arr, 1, &tmp3);
   18b88:	aa02      	add	r2, sp, #8
   18b8a:	6898      	ldr	r0, [r3, #8]
   18b8c:	2101      	movs	r1, #1
   18b8e:	f003 fa70 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18b92:	4604      	mov	r4, r0
   18b94:	2800      	cmp	r0, #0
   18b96:	d156      	bne.n	18c46 <cosem_setRegisterMonitor+0x29e>
                ret = va_getByIndex(tmp3->Arr, 0, &tmp);
   18b98:	9b02      	ldr	r3, [sp, #8]
   18b9a:	4601      	mov	r1, r0
   18b9c:	aa01      	add	r2, sp, #4
   18b9e:	6898      	ldr	r0, [r3, #8]
   18ba0:	f003 fa67 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18ba4:	4604      	mov	r4, r0
   18ba6:	2800      	cmp	r0, #0
   18ba8:	d14d      	bne.n	18c46 <cosem_setRegisterMonitor+0x29e>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   18baa:	9b01      	ldr	r3, [sp, #4]
                actionSet->actionDown.script = NULL;
   18bac:	46ca      	mov	sl, r9
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   18bae:	689a      	ldr	r2, [r3, #8]
                actionSet->actionDown.script = NULL;
   18bb0:	f84a 0f08 	str.w	r0, [sl, #8]!
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp->byteArr->data, (gxObject**)&actionSet->actionDown.script)) != 0)
   18bb4:	6812      	ldr	r2, [r2, #0]
   18bb6:	4653      	mov	r3, sl
   18bb8:	2109      	movs	r1, #9
   18bba:	4658      	mov	r0, fp
   18bbc:	f003 f816 	bl	1bbec <oa_findByLN>
   18bc0:	4604      	mov	r4, r0
   18bc2:	2800      	cmp	r0, #0
   18bc4:	f47f aeff 	bne.w	189c6 <cosem_setRegisterMonitor+0x1e>
                if (actionSet->actionDown.script == NULL)
   18bc8:	f8d9 2008 	ldr.w	r2, [r9, #8]
   18bcc:	b9c2      	cbnz	r2, 18c00 <cosem_setRegisterMonitor+0x258>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&actionSet->actionDown.script);
   18bce:	4651      	mov	r1, sl
   18bd0:	2009      	movs	r0, #9
   18bd2:	f7e9 fa9d 	bl	2110 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   18bd6:	4604      	mov	r4, r0
   18bd8:	2800      	cmp	r0, #0
   18bda:	f47f aef4 	bne.w	189c6 <cosem_setRegisterMonitor+0x1e>
                    ret = cosem_setLogicalName((gxObject*)actionSet->actionDown.script, tmp->byteArr->data);
   18bde:	9b01      	ldr	r3, [sp, #4]
   18be0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   18be4:	689b      	ldr	r3, [r3, #8]
   18be6:	6819      	ldr	r1, [r3, #0]
   18be8:	f7f6 f96c 	bl	eec4 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   18bec:	4604      	mov	r4, r0
   18bee:	2800      	cmp	r0, #0
   18bf0:	f47f aee9 	bne.w	189c6 <cosem_setRegisterMonitor+0x1e>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)actionSet->actionDown.script);
   18bf4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   18bf8:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   18bfc:	f002 ff67 	bl	1bace <oa_push>
                ret = va_getByIndex(tmp3->Arr, 1, &tmp);
   18c00:	9b02      	ldr	r3, [sp, #8]
   18c02:	aa01      	add	r2, sp, #4
   18c04:	6898      	ldr	r0, [r3, #8]
   18c06:	2101      	movs	r1, #1
   18c08:	f003 fa33 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18c0c:	4604      	mov	r4, r0
   18c0e:	b9d0      	cbnz	r0, 18c46 <cosem_setRegisterMonitor+0x29e>
                actionSet->actionDown.scriptSelector = (uint16_t)var_toInteger(tmp);
   18c10:	9801      	ldr	r0, [sp, #4]
   18c12:	f003 fba8 	bl	1c366 <var_toInteger>
                arr_push(&object->actions, actionSet);
   18c16:	4649      	mov	r1, r9
                actionSet->actionDown.scriptSelector = (uint16_t)var_toInteger(tmp);
   18c18:	f8a9 000c 	strh.w	r0, [r9, #12]
                arr_push(&object->actions, actionSet);
   18c1c:	4628      	mov	r0, r5
   18c1e:	f7f8 ff7f 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18c22:	f108 0801 	add.w	r8, r8, #1
   18c26:	68b0      	ldr	r0, [r6, #8]
   18c28:	88c3      	ldrh	r3, [r0, #6]
   18c2a:	4543      	cmp	r3, r8
   18c2c:	f47f af51 	bne.w	18ad2 <cosem_setRegisterMonitor+0x12a>
   18c30:	e6c8      	b.n	189c4 <cosem_setRegisterMonitor+0x1c>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18c32:	f44f 7482 	mov.w	r4, #260	; 0x104
   18c36:	e6c6      	b.n	189c6 <cosem_setRegisterMonitor+0x1e>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   18c38:	f44f 7481 	mov.w	r4, #258	; 0x102
   18c3c:	e6c3      	b.n	189c6 <cosem_setRegisterMonitor+0x1e>
            if (ret != 0 && actionSet != NULL)
   18c3e:	f1b9 0f00 	cmp.w	r9, #0
   18c42:	f43f aec0 	beq.w	189c6 <cosem_setRegisterMonitor+0x1e>
                gxfree(actionSet);
   18c46:	4648      	mov	r0, r9
   18c48:	f7f4 fb5c 	bl	d304 <free>
   18c4c:	e6bb      	b.n	189c6 <cosem_setRegisterMonitor+0x1e>

00018c4e <cosem_setSapAssignment>:
    if (index == 2)
   18c4e:	2902      	cmp	r1, #2
{
   18c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18c54:	4690      	mov	r8, r2
    if (index == 2)
   18c56:	d147      	bne.n	18ce8 <cosem_setSapAssignment+0x9a>
        obj_clearSapList(&object->sapAssignmentList);
   18c58:	f100 0610 	add.w	r6, r0, #16
   18c5c:	4630      	mov	r0, r6
   18c5e:	f7fc fade 	bl	1521e <obj_clearSapList>
        if (value->Arr != NULL)
   18c62:	f8d8 3008 	ldr.w	r3, [r8, #8]
   18c66:	2b00      	cmp	r3, #0
   18c68:	d13c      	bne.n	18ce4 <cosem_setSapAssignment+0x96>
    int ret = DLMS_ERROR_CODE_OK, pos;
   18c6a:	2400      	movs	r4, #0
}
   18c6c:	4620      	mov	r0, r4
   18c6e:	b003      	add	sp, #12
   18c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   18c74:	466a      	mov	r2, sp
   18c76:	4639      	mov	r1, r7
   18c78:	f003 f9fb 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18c7c:	4604      	mov	r4, r0
   18c7e:	2800      	cmp	r0, #0
   18c80:	d1f4      	bne.n	18c6c <cosem_setSapAssignment+0x1e>
                ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   18c82:	9b00      	ldr	r3, [sp, #0]
   18c84:	4601      	mov	r1, r0
   18c86:	aa01      	add	r2, sp, #4
   18c88:	6898      	ldr	r0, [r3, #8]
   18c8a:	f003 f9f2 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18c8e:	4604      	mov	r4, r0
   18c90:	2800      	cmp	r0, #0
   18c92:	d1eb      	bne.n	18c6c <cosem_setSapAssignment+0x1e>
                it = (gxSapItem*)gxmalloc(sizeof(gxSapItem));
   18c94:	2010      	movs	r0, #16
   18c96:	f7f4 fb2d 	bl	d2f4 <malloc>
                if (it == NULL)
   18c9a:	4605      	mov	r5, r0
   18c9c:	b358      	cbz	r0, 18cf6 <cosem_setSapAssignment+0xa8>
                BYTE_BUFFER_INIT(&it->name);
   18c9e:	f100 0904 	add.w	r9, r0, #4
   18ca2:	4648      	mov	r0, r9
   18ca4:	f7f5 fb4a 	bl	e33c <bb_init>
                it->id = (uint16_t)var_toInteger(tmp2);
   18ca8:	9801      	ldr	r0, [sp, #4]
   18caa:	f003 fb5c 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   18cae:	9b00      	ldr	r3, [sp, #0]
                it->id = (uint16_t)var_toInteger(tmp2);
   18cb0:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   18cb2:	aa01      	add	r2, sp, #4
   18cb4:	6898      	ldr	r0, [r3, #8]
   18cb6:	2101      	movs	r1, #1
   18cb8:	f003 f9db 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18cbc:	4604      	mov	r4, r0
   18cbe:	b9b0      	cbnz	r0, 18cee <cosem_setSapAssignment+0xa0>
                bb_set(&it->name, tmp2->byteArr->data, tmp2->byteArr->size);
   18cc0:	9b01      	ldr	r3, [sp, #4]
   18cc2:	689b      	ldr	r3, [r3, #8]
   18cc4:	4648      	mov	r0, r9
   18cc6:	6819      	ldr	r1, [r3, #0]
   18cc8:	88da      	ldrh	r2, [r3, #6]
   18cca:	f7f5 fc86 	bl	e5da <bb_set>
                arr_push(&object->sapAssignmentList, it);
   18cce:	4629      	mov	r1, r5
   18cd0:	4630      	mov	r0, r6
   18cd2:	f7f8 ff25 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18cd6:	3701      	adds	r7, #1
   18cd8:	f8d8 0008 	ldr.w	r0, [r8, #8]
   18cdc:	88c3      	ldrh	r3, [r0, #6]
   18cde:	42bb      	cmp	r3, r7
   18ce0:	d1c8      	bne.n	18c74 <cosem_setSapAssignment+0x26>
   18ce2:	e7c2      	b.n	18c6a <cosem_setSapAssignment+0x1c>
   18ce4:	2700      	movs	r7, #0
   18ce6:	e7f7      	b.n	18cd8 <cosem_setSapAssignment+0x8a>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   18ce8:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   18cec:	e7be      	b.n	18c6c <cosem_setSapAssignment+0x1e>
                gxfree(it);
   18cee:	4628      	mov	r0, r5
   18cf0:	f7f4 fb08 	bl	d304 <free>
   18cf4:	e7ba      	b.n	18c6c <cosem_setSapAssignment+0x1e>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18cf6:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && it != NULL)
   18cfa:	e7b7      	b.n	18c6c <cosem_setSapAssignment+0x1e>

00018cfc <cosem_setSchedule>:
{
   18cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (index == 2)
   18d00:	2a02      	cmp	r2, #2
{
   18d02:	b089      	sub	sp, #36	; 0x24
   18d04:	4681      	mov	r9, r0
   18d06:	4698      	mov	r8, r3
    if (index == 2)
   18d08:	f040 8109 	bne.w	18f1e <cosem_setSchedule+0x222>
        obj_clearScheduleEntries(&object->entries);
   18d0c:	f101 0610 	add.w	r6, r1, #16
   18d10:	4630      	mov	r0, r6
   18d12:	f7fc fb25 	bl	15360 <obj_clearScheduleEntries>
        var_init(&tmp3);
   18d16:	a804      	add	r0, sp, #16
   18d18:	f002 ffd1 	bl	1bcbe <var_init>
        if (value->Arr != NULL)
   18d1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   18d20:	2b00      	cmp	r3, #0
   18d22:	f040 80fa 	bne.w	18f1a <cosem_setSchedule+0x21e>
    int ret = 0, pos;
   18d26:	2400      	movs	r4, #0
}
   18d28:	4620      	mov	r0, r4
   18d2a:	b009      	add	sp, #36	; 0x24
   18d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   18d30:	aa01      	add	r2, sp, #4
   18d32:	4639      	mov	r1, r7
   18d34:	f003 f99d 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18d38:	4604      	mov	r4, r0
   18d3a:	2800      	cmp	r0, #0
   18d3c:	d1f4      	bne.n	18d28 <cosem_setSchedule+0x2c>
                se = (gxScheduleEntry*)gxmalloc(sizeof(gxScheduleEntry));
   18d3e:	203c      	movs	r0, #60	; 0x3c
   18d40:	f7f4 fad8 	bl	d2f4 <malloc>
                if (se == NULL)
   18d44:	4605      	mov	r5, r0
   18d46:	2800      	cmp	r0, #0
   18d48:	f000 80f0 	beq.w	18f2c <cosem_setSchedule+0x230>
                se->execWeekdays = 0;
   18d4c:	7e83      	ldrb	r3, [r0, #26]
                ba_init(&se->execSpecDays);
   18d4e:	f100 0a1c 	add.w	sl, r0, #28
                se->execWeekdays = 0;
   18d52:	f364 0306 	bfi	r3, r4, #0, #7
   18d56:	7683      	strb	r3, [r0, #26]
                ba_init(&se->execSpecDays);
   18d58:	4650      	mov	r0, sl
   18d5a:	f7f5 f9e8 	bl	e12e <ba_init>
                ret = va_getByIndex(tmp->Arr, 0, &it);
   18d5e:	9b01      	ldr	r3, [sp, #4]
   18d60:	4621      	mov	r1, r4
   18d62:	6898      	ldr	r0, [r3, #8]
   18d64:	aa02      	add	r2, sp, #8
   18d66:	f003 f984 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18d6a:	4604      	mov	r4, r0
   18d6c:	2800      	cmp	r0, #0
   18d6e:	f040 80d9 	bne.w	18f24 <cosem_setSchedule+0x228>
                se->index = (uint16_t)var_toInteger(it);
   18d72:	9802      	ldr	r0, [sp, #8]
   18d74:	f003 faf7 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &it);
   18d78:	9b01      	ldr	r3, [sp, #4]
                se->index = (uint16_t)var_toInteger(it);
   18d7a:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &it);
   18d7c:	aa02      	add	r2, sp, #8
   18d7e:	6898      	ldr	r0, [r3, #8]
   18d80:	2101      	movs	r1, #1
   18d82:	f003 f976 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18d86:	4604      	mov	r4, r0
   18d88:	2800      	cmp	r0, #0
   18d8a:	f040 80cb 	bne.w	18f24 <cosem_setSchedule+0x228>
                se->enable = (unsigned char)var_toInteger(it);
   18d8e:	9802      	ldr	r0, [sp, #8]
   18d90:	f003 fae9 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 2, &it);
   18d94:	9b01      	ldr	r3, [sp, #4]
                se->enable = (unsigned char)var_toInteger(it);
   18d96:	70a8      	strb	r0, [r5, #2]
                ret = va_getByIndex(tmp->Arr, 2, &it);
   18d98:	6898      	ldr	r0, [r3, #8]
   18d9a:	aa02      	add	r2, sp, #8
   18d9c:	2102      	movs	r1, #2
   18d9e:	f003 f968 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18da2:	4604      	mov	r4, r0
   18da4:	2800      	cmp	r0, #0
   18da6:	f040 80bd 	bne.w	18f24 <cosem_setSchedule+0x228>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, it->byteArr->data, (gxObject**)&se->scriptTable)) != 0)
   18daa:	9b02      	ldr	r3, [sp, #8]
   18dac:	689a      	ldr	r2, [r3, #8]
   18dae:	f105 0b04 	add.w	fp, r5, #4
   18db2:	6812      	ldr	r2, [r2, #0]
   18db4:	465b      	mov	r3, fp
   18db6:	2109      	movs	r1, #9
   18db8:	f109 0098 	add.w	r0, r9, #152	; 0x98
   18dbc:	f002 ff16 	bl	1bbec <oa_findByLN>
   18dc0:	4604      	mov	r4, r0
   18dc2:	2800      	cmp	r0, #0
   18dc4:	f040 80ae 	bne.w	18f24 <cosem_setSchedule+0x228>
                if (se->scriptTable == NULL)
   18dc8:	686b      	ldr	r3, [r5, #4]
   18dca:	b9a3      	cbnz	r3, 18df6 <cosem_setSchedule+0xfa>
                    ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&se->scriptTable);
   18dcc:	4659      	mov	r1, fp
   18dce:	2009      	movs	r0, #9
   18dd0:	f7e9 f99e 	bl	2110 <cosem_createObject>
                    if (ret != DLMS_ERROR_CODE_OK)
   18dd4:	4604      	mov	r4, r0
   18dd6:	2800      	cmp	r0, #0
   18dd8:	d1a6      	bne.n	18d28 <cosem_setSchedule+0x2c>
                    ret = cosem_setLogicalName((gxObject*)se->scriptTable, tmp->byteArr->data);
   18dda:	9b01      	ldr	r3, [sp, #4]
   18ddc:	6868      	ldr	r0, [r5, #4]
   18dde:	689b      	ldr	r3, [r3, #8]
   18de0:	6819      	ldr	r1, [r3, #0]
   18de2:	f7f6 f86f 	bl	eec4 <cosem_setLogicalName>
                    if (ret != DLMS_ERROR_CODE_OK)
   18de6:	4604      	mov	r4, r0
   18de8:	2800      	cmp	r0, #0
   18dea:	d19d      	bne.n	18d28 <cosem_setSchedule+0x2c>
                    ret = oa_push(&settings->releasedObjects, (gxObject*)se->scriptTable);
   18dec:	6869      	ldr	r1, [r5, #4]
   18dee:	f109 00e4 	add.w	r0, r9, #228	; 0xe4
   18df2:	f002 fe6c 	bl	1bace <oa_push>
                ret = va_getByIndex(tmp->Arr, 3, &it);
   18df6:	9b01      	ldr	r3, [sp, #4]
   18df8:	aa02      	add	r2, sp, #8
   18dfa:	6898      	ldr	r0, [r3, #8]
   18dfc:	2103      	movs	r1, #3
   18dfe:	f003 f938 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18e02:	4604      	mov	r4, r0
   18e04:	2800      	cmp	r0, #0
   18e06:	f040 808d 	bne.w	18f24 <cosem_setSchedule+0x228>
                se->scriptSelector = (uint16_t)var_toInteger(it);
   18e0a:	9802      	ldr	r0, [sp, #8]
   18e0c:	f003 faab 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 4, &it);
   18e10:	9b01      	ldr	r3, [sp, #4]
                se->scriptSelector = (uint16_t)var_toInteger(it);
   18e12:	8128      	strh	r0, [r5, #8]
                ret = va_getByIndex(tmp->Arr, 4, &it);
   18e14:	aa02      	add	r2, sp, #8
   18e16:	6898      	ldr	r0, [r3, #8]
   18e18:	2104      	movs	r1, #4
   18e1a:	f003 f92a 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18e1e:	4604      	mov	r4, r0
   18e20:	2800      	cmp	r0, #0
   18e22:	d17f      	bne.n	18f24 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_TIME, &tmp3);
   18e24:	9802      	ldr	r0, [sp, #8]
   18e26:	aa04      	add	r2, sp, #16
   18e28:	211b      	movs	r1, #27
   18e2a:	f7f8 fb53 	bl	114d4 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   18e2e:	4604      	mov	r4, r0
   18e30:	2800      	cmp	r0, #0
   18e32:	d177      	bne.n	18f24 <cosem_setSchedule+0x228>
                time_copy(&se->switchTime, tmp3.dateTime);
   18e34:	9906      	ldr	r1, [sp, #24]
   18e36:	f105 000c 	add.w	r0, r5, #12
   18e3a:	f7f6 fb98 	bl	f56e <time_copy>
                ret = va_getByIndex(tmp->Arr, 5, &it);
   18e3e:	9b01      	ldr	r3, [sp, #4]
   18e40:	aa02      	add	r2, sp, #8
   18e42:	6898      	ldr	r0, [r3, #8]
   18e44:	2105      	movs	r1, #5
   18e46:	f003 f914 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18e4a:	4604      	mov	r4, r0
   18e4c:	2800      	cmp	r0, #0
   18e4e:	d169      	bne.n	18f24 <cosem_setSchedule+0x228>
                se->validityWindow = (uint16_t)var_toInteger(it);
   18e50:	9802      	ldr	r0, [sp, #8]
   18e52:	f003 fa88 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 6, &it);
   18e56:	9b01      	ldr	r3, [sp, #4]
                se->validityWindow = (uint16_t)var_toInteger(it);
   18e58:	8328      	strh	r0, [r5, #24]
                ret = va_getByIndex(tmp->Arr, 6, &it);
   18e5a:	aa02      	add	r2, sp, #8
   18e5c:	6898      	ldr	r0, [r3, #8]
   18e5e:	2106      	movs	r1, #6
   18e60:	f003 f907 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18e64:	4604      	mov	r4, r0
   18e66:	2800      	cmp	r0, #0
   18e68:	d15c      	bne.n	18f24 <cosem_setSchedule+0x228>
                if (it->bitArr != NULL)
   18e6a:	9b02      	ldr	r3, [sp, #8]
   18e6c:	6898      	ldr	r0, [r3, #8]
   18e6e:	b140      	cbz	r0, 18e82 <cosem_setSchedule+0x186>
                    if ((ret = ba_toInteger(it->bitArr, &val)) == 0)
   18e70:	a903      	add	r1, sp, #12
   18e72:	f7f5 fa17 	bl	e2a4 <ba_toInteger>
   18e76:	b920      	cbnz	r0, 18e82 <cosem_setSchedule+0x186>
                        se->execWeekdays = val;
   18e78:	7eab      	ldrb	r3, [r5, #26]
   18e7a:	9a03      	ldr	r2, [sp, #12]
   18e7c:	f362 0306 	bfi	r3, r2, #0, #7
   18e80:	76ab      	strb	r3, [r5, #26]
                ret = va_getByIndex(tmp->Arr, 7, &it);
   18e82:	9b01      	ldr	r3, [sp, #4]
   18e84:	aa02      	add	r2, sp, #8
   18e86:	6898      	ldr	r0, [r3, #8]
   18e88:	2107      	movs	r1, #7
   18e8a:	f003 f8f2 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18e8e:	4604      	mov	r4, r0
   18e90:	2800      	cmp	r0, #0
   18e92:	d147      	bne.n	18f24 <cosem_setSchedule+0x228>
                if (it->bitArr != NULL)
   18e94:	9b02      	ldr	r3, [sp, #8]
   18e96:	689b      	ldr	r3, [r3, #8]
   18e98:	b123      	cbz	r3, 18ea4 <cosem_setSchedule+0x1a8>
                    ba_copy(&se->execSpecDays, it->bitArr->data, (uint16_t)it->bitArr->size);
   18e9a:	88da      	ldrh	r2, [r3, #6]
   18e9c:	6819      	ldr	r1, [r3, #0]
   18e9e:	4650      	mov	r0, sl
   18ea0:	f7f5 f9c0 	bl	e224 <ba_copy>
                ret = va_getByIndex(tmp->Arr, 8, &it);
   18ea4:	9b01      	ldr	r3, [sp, #4]
   18ea6:	aa02      	add	r2, sp, #8
   18ea8:	6898      	ldr	r0, [r3, #8]
   18eaa:	2108      	movs	r1, #8
   18eac:	f003 f8e1 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18eb0:	4604      	mov	r4, r0
   18eb2:	2800      	cmp	r0, #0
   18eb4:	d136      	bne.n	18f24 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   18eb6:	9802      	ldr	r0, [sp, #8]
   18eb8:	aa04      	add	r2, sp, #16
   18eba:	211a      	movs	r1, #26
   18ebc:	f7f8 fb0a 	bl	114d4 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   18ec0:	4604      	mov	r4, r0
   18ec2:	bb78      	cbnz	r0, 18f24 <cosem_setSchedule+0x228>
                time_copy(&se->beginDate, tmp3.dateTime);
   18ec4:	9906      	ldr	r1, [sp, #24]
   18ec6:	f105 0024 	add.w	r0, r5, #36	; 0x24
   18eca:	f7f6 fb50 	bl	f56e <time_copy>
                var_clear(&tmp3);
   18ece:	a804      	add	r0, sp, #16
   18ed0:	f003 f851 	bl	1bf76 <var_clear>
                ret = va_getByIndex(tmp->Arr, 9, &it);
   18ed4:	9b01      	ldr	r3, [sp, #4]
   18ed6:	aa02      	add	r2, sp, #8
   18ed8:	6898      	ldr	r0, [r3, #8]
   18eda:	2109      	movs	r1, #9
   18edc:	f003 f8c9 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   18ee0:	4604      	mov	r4, r0
   18ee2:	b9f8      	cbnz	r0, 18f24 <cosem_setSchedule+0x228>
                ret = dlms_changeType2(it, DLMS_DATA_TYPE_DATE, &tmp3);
   18ee4:	9802      	ldr	r0, [sp, #8]
   18ee6:	aa04      	add	r2, sp, #16
   18ee8:	211a      	movs	r1, #26
   18eea:	f7f8 faf3 	bl	114d4 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   18eee:	4604      	mov	r4, r0
   18ef0:	b9c0      	cbnz	r0, 18f24 <cosem_setSchedule+0x228>
                time_copy(&se->endDate, tmp3.dateTime);
   18ef2:	9906      	ldr	r1, [sp, #24]
   18ef4:	f105 0030 	add.w	r0, r5, #48	; 0x30
   18ef8:	f7f6 fb39 	bl	f56e <time_copy>
                arr_push(&object->entries, se);
   18efc:	4629      	mov	r1, r5
   18efe:	4630      	mov	r0, r6
   18f00:	f7f8 fe0e 	bl	11b20 <arr_push>
                var_clear(&tmp3);
   18f04:	a804      	add	r0, sp, #16
   18f06:	f003 f836 	bl	1bf76 <var_clear>
            for (pos = 0; pos != value->Arr->size; ++pos)
   18f0a:	3701      	adds	r7, #1
   18f0c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   18f10:	88c3      	ldrh	r3, [r0, #6]
   18f12:	42bb      	cmp	r3, r7
   18f14:	f47f af0c 	bne.w	18d30 <cosem_setSchedule+0x34>
   18f18:	e705      	b.n	18d26 <cosem_setSchedule+0x2a>
   18f1a:	2700      	movs	r7, #0
   18f1c:	e7f6      	b.n	18f0c <cosem_setSchedule+0x210>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   18f1e:	f44f 7481 	mov.w	r4, #258	; 0x102
   18f22:	e701      	b.n	18d28 <cosem_setSchedule+0x2c>
                gxfree(se);
   18f24:	4628      	mov	r0, r5
   18f26:	f7f4 f9ed 	bl	d304 <free>
   18f2a:	e6fd      	b.n	18d28 <cosem_setSchedule+0x2c>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   18f2c:	f44f 7482 	mov.w	r4, #260	; 0x104
            if (ret != 0 && se != NULL)
   18f30:	e6fa      	b.n	18d28 <cosem_setSchedule+0x2c>

00018f32 <cosem_setScriptTable>:
{
   18f32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f36:	b089      	sub	sp, #36	; 0x24
    if (index == 2)
   18f38:	2a02      	cmp	r2, #2
{
   18f3a:	9002      	str	r0, [sp, #8]
   18f3c:	4615      	mov	r5, r2
   18f3e:	469a      	mov	sl, r3
    if (index == 2)
   18f40:	f040 8154 	bne.w	191ec <cosem_setScriptTable+0x2ba>
        obj_clearScriptTable(&object->scripts);
   18f44:	f101 0910 	add.w	r9, r1, #16
   18f48:	4648      	mov	r0, r9
   18f4a:	f7fc fa3c 	bl	153c6 <obj_clearScriptTable>
        if (value->Arr->size != 0)
   18f4e:	f8da 0008 	ldr.w	r0, [sl, #8]
   18f52:	88c3      	ldrh	r3, [r0, #6]
   18f54:	b923      	cbnz	r3, 18f60 <cosem_setScriptTable+0x2e>
    int ret = 0, pos, pos2;
   18f56:	2400      	movs	r4, #0
}
   18f58:	4620      	mov	r0, r4
   18f5a:	b009      	add	sp, #36	; 0x24
   18f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = va_getByIndex(value->Arr, 0, &tmp);
   18f60:	ae05      	add	r6, sp, #20
   18f62:	4632      	mov	r2, r6
   18f64:	2100      	movs	r1, #0
   18f66:	f003 f884 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   18f6a:	4604      	mov	r4, r0
   18f6c:	2800      	cmp	r0, #0
   18f6e:	d1f3      	bne.n	18f58 <cosem_setScriptTable+0x26>
            if (value->vt == DLMS_DATA_TYPE_ARRAY)
   18f70:	f89a 3000 	ldrb.w	r3, [sl]
   18f74:	2b01      	cmp	r3, #1
   18f76:	f040 80a8 	bne.w	190ca <cosem_setScriptTable+0x198>
                for (pos = 0; pos != value->Arr->size; ++pos)
   18f7a:	f8da 0008 	ldr.w	r0, [sl, #8]
   18f7e:	88c3      	ldrh	r3, [r0, #6]
   18f80:	42a3      	cmp	r3, r4
   18f82:	d0e8      	beq.n	18f56 <cosem_setScriptTable+0x24>
                    ret = va_getByIndex(value->Arr, pos, &tmp);
   18f84:	4621      	mov	r1, r4
   18f86:	4632      	mov	r2, r6
   18f88:	f003 f873 	bl	1c072 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   18f8c:	4601      	mov	r1, r0
   18f8e:	2800      	cmp	r0, #0
   18f90:	f040 8131 	bne.w	191f6 <cosem_setScriptTable+0x2c4>
                    ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   18f94:	9b05      	ldr	r3, [sp, #20]
   18f96:	aa07      	add	r2, sp, #28
   18f98:	6898      	ldr	r0, [r3, #8]
   18f9a:	f003 f86a 	bl	1c072 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   18f9e:	4601      	mov	r1, r0
   18fa0:	2800      	cmp	r0, #0
   18fa2:	f040 8128 	bne.w	191f6 <cosem_setScriptTable+0x2c4>
                    script = (gxScript*)gxmalloc(sizeof(gxScript));
   18fa6:	2010      	movs	r0, #16
   18fa8:	f7f4 f9a4 	bl	d2f4 <malloc>
                    if (script == NULL)
   18fac:	4680      	mov	r8, r0
   18fae:	2800      	cmp	r0, #0
   18fb0:	f000 811f 	beq.w	191f2 <cosem_setScriptTable+0x2c0>
                    arr_init(&script->actions);
   18fb4:	1d03      	adds	r3, r0, #4
   18fb6:	4618      	mov	r0, r3
   18fb8:	9301      	str	r3, [sp, #4]
   18fba:	f7f8 fd82 	bl	11ac2 <arr_init>
                    script->id = (uint16_t)var_toInteger(tmp3);
   18fbe:	9807      	ldr	r0, [sp, #28]
   18fc0:	f003 f9d1 	bl	1c366 <var_toInteger>
                    arr_push(&object->scripts, script);
   18fc4:	4641      	mov	r1, r8
                    script->id = (uint16_t)var_toInteger(tmp3);
   18fc6:	f8a8 0000 	strh.w	r0, [r8]
                    arr_push(&object->scripts, script);
   18fca:	4648      	mov	r0, r9
   18fcc:	f7f8 fda8 	bl	11b20 <arr_push>
                    ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   18fd0:	9b05      	ldr	r3, [sp, #20]
   18fd2:	aa07      	add	r2, sp, #28
   18fd4:	6898      	ldr	r0, [r3, #8]
   18fd6:	2101      	movs	r1, #1
   18fd8:	f003 f84b 	bl	1c072 <va_getByIndex>
                    if (ret != DLMS_ERROR_CODE_OK)
   18fdc:	4605      	mov	r5, r0
   18fde:	2800      	cmp	r0, #0
   18fe0:	d06c      	beq.n	190bc <cosem_setScriptTable+0x18a>
                    gxfree(script);
   18fe2:	4640      	mov	r0, r8
   18fe4:	f7f4 f98e 	bl	d304 <free>
   18fe8:	462c      	mov	r4, r5
   18fea:	e7b5      	b.n	18f58 <cosem_setScriptTable+0x26>
                        ret = va_getByIndex(tmp3->Arr, pos2, &tmp2);
   18fec:	4629      	mov	r1, r5
   18fee:	aa06      	add	r2, sp, #24
   18ff0:	f003 f83f 	bl	1c072 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   18ff4:	4601      	mov	r1, r0
   18ff6:	2800      	cmp	r0, #0
   18ff8:	f040 8101 	bne.w	191fe <cosem_setScriptTable+0x2cc>
                        ret = va_getByIndex(tmp2->Arr, 0, &tmp);
   18ffc:	9b06      	ldr	r3, [sp, #24]
   18ffe:	4632      	mov	r2, r6
   19000:	6898      	ldr	r0, [r3, #8]
   19002:	f003 f836 	bl	1c072 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   19006:	4601      	mov	r1, r0
   19008:	2800      	cmp	r0, #0
   1900a:	f040 80f8 	bne.w	191fe <cosem_setScriptTable+0x2cc>
                        scriptAction = (gxScriptAction*)gxmalloc(sizeof(gxScriptAction));
   1900e:	2020      	movs	r0, #32
   19010:	f7f4 f970 	bl	d2f4 <malloc>
                        if (scriptAction == NULL)
   19014:	4607      	mov	r7, r0
   19016:	2800      	cmp	r0, #0
   19018:	f000 80ef 	beq.w	191fa <cosem_setScriptTable+0x2c8>
                        var_init(&scriptAction->parameter);
   1901c:	f100 0b08 	add.w	fp, r0, #8
   19020:	4658      	mov	r0, fp
   19022:	f002 fe4c 	bl	1bcbe <var_init>
                        scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp);
   19026:	9805      	ldr	r0, [sp, #20]
   19028:	f003 f99d 	bl	1c366 <var_toInteger>
                        ret = va_getByIndex(tmp2->Arr, 1, &tmp);
   1902c:	9b06      	ldr	r3, [sp, #24]
                        scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp);
   1902e:	7138      	strb	r0, [r7, #4]
                        ret = va_getByIndex(tmp2->Arr, 1, &tmp);
   19030:	6898      	ldr	r0, [r3, #8]
   19032:	4632      	mov	r2, r6
   19034:	2101      	movs	r1, #1
   19036:	f003 f81c 	bl	1c072 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   1903a:	4603      	mov	r3, r0
   1903c:	2800      	cmp	r0, #0
   1903e:	f040 80e0 	bne.w	19202 <cosem_setScriptTable+0x2d0>
                        type = (DLMS_OBJECT_TYPE)var_toInteger(tmp);
   19042:	9805      	ldr	r0, [sp, #20]
   19044:	f003 f98f 	bl	1c366 <var_toInteger>
   19048:	b283      	uxth	r3, r0
   1904a:	9303      	str	r3, [sp, #12]
                        ret = va_getByIndex(tmp2->Arr, 2, &tmp);
   1904c:	9b06      	ldr	r3, [sp, #24]
   1904e:	4632      	mov	r2, r6
   19050:	6898      	ldr	r0, [r3, #8]
   19052:	2102      	movs	r1, #2
   19054:	f003 f80d 	bl	1c072 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   19058:	4603      	mov	r3, r0
   1905a:	2800      	cmp	r0, #0
   1905c:	f040 80d1 	bne.w	19202 <cosem_setScriptTable+0x2d0>
                        if ((ret = oa_findByLN(&settings->objects, type, tmp->byteArr->data, &scriptAction->target)) != 0)
   19060:	9b05      	ldr	r3, [sp, #20]
   19062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   19066:	689a      	ldr	r2, [r3, #8]
   19068:	3098      	adds	r0, #152	; 0x98
   1906a:	463b      	mov	r3, r7
   1906c:	6812      	ldr	r2, [r2, #0]
   1906e:	f002 fdbd 	bl	1bbec <oa_findByLN>
   19072:	4603      	mov	r3, r0
   19074:	2800      	cmp	r0, #0
   19076:	f040 80c4 	bne.w	19202 <cosem_setScriptTable+0x2d0>
                        ret = va_getByIndex(tmp2->Arr, 3, &tmp);
   1907a:	9b06      	ldr	r3, [sp, #24]
   1907c:	4632      	mov	r2, r6
   1907e:	6898      	ldr	r0, [r3, #8]
   19080:	2103      	movs	r1, #3
   19082:	f002 fff6 	bl	1c072 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   19086:	4603      	mov	r3, r0
   19088:	2800      	cmp	r0, #0
   1908a:	f040 80ba 	bne.w	19202 <cosem_setScriptTable+0x2d0>
                        scriptAction->index = (char)var_toInteger(tmp);
   1908e:	9805      	ldr	r0, [sp, #20]
   19090:	f003 f969 	bl	1c366 <var_toInteger>
                        ret = va_getByIndex(tmp2->Arr, 4, &tmp);
   19094:	9b06      	ldr	r3, [sp, #24]
                        scriptAction->index = (char)var_toInteger(tmp);
   19096:	7638      	strb	r0, [r7, #24]
                        ret = va_getByIndex(tmp2->Arr, 4, &tmp);
   19098:	6898      	ldr	r0, [r3, #8]
   1909a:	4632      	mov	r2, r6
   1909c:	2104      	movs	r1, #4
   1909e:	f002 ffe8 	bl	1c072 <va_getByIndex>
                        if (ret != DLMS_ERROR_CODE_OK)
   190a2:	4603      	mov	r3, r0
   190a4:	2800      	cmp	r0, #0
   190a6:	f040 80ac 	bne.w	19202 <cosem_setScriptTable+0x2d0>
                        var_copy(&scriptAction->parameter, tmp);
   190aa:	9905      	ldr	r1, [sp, #20]
   190ac:	4658      	mov	r0, fp
   190ae:	f7eb fa7d 	bl	45ac <var_copy>
                        arr_push(&script->actions, scriptAction);
   190b2:	9801      	ldr	r0, [sp, #4]
   190b4:	4639      	mov	r1, r7
   190b6:	f7f8 fd33 	bl	11b20 <arr_push>
                    for (pos2 = 0; pos2 != tmp3->Arr->size; ++pos2)
   190ba:	3501      	adds	r5, #1
   190bc:	9b07      	ldr	r3, [sp, #28]
   190be:	6898      	ldr	r0, [r3, #8]
   190c0:	88c3      	ldrh	r3, [r0, #6]
   190c2:	42ab      	cmp	r3, r5
   190c4:	d192      	bne.n	18fec <cosem_setScriptTable+0xba>
                for (pos = 0; pos != value->Arr->size; ++pos)
   190c6:	3401      	adds	r4, #1
   190c8:	e757      	b.n	18f7a <cosem_setScriptTable+0x48>
                ret = va_getByIndex(value->Arr, 0, &tmp);
   190ca:	4601      	mov	r1, r0
   190cc:	4632      	mov	r2, r6
   190ce:	f8da 0008 	ldr.w	r0, [sl, #8]
   190d2:	f002 ffce 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   190d6:	4604      	mov	r4, r0
   190d8:	2800      	cmp	r0, #0
   190da:	f47f af3d 	bne.w	18f58 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   190de:	9b05      	ldr	r3, [sp, #20]
   190e0:	aa06      	add	r2, sp, #24
   190e2:	6898      	ldr	r0, [r3, #8]
   190e4:	2101      	movs	r1, #1
   190e6:	f002 ffc4 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   190ea:	4604      	mov	r4, r0
   190ec:	2800      	cmp	r0, #0
   190ee:	f47f af33 	bne.w	18f58 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp2->Arr, 2, &tmp3);
   190f2:	9b06      	ldr	r3, [sp, #24]
   190f4:	aa07      	add	r2, sp, #28
   190f6:	6898      	ldr	r0, [r3, #8]
   190f8:	4629      	mov	r1, r5
   190fa:	f002 ffba 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   190fe:	4604      	mov	r4, r0
   19100:	2800      	cmp	r0, #0
   19102:	f47f af29 	bne.w	18f58 <cosem_setScriptTable+0x26>
                script = (gxScript*)gxmalloc(sizeof(gxScript));
   19106:	2010      	movs	r0, #16
   19108:	f7f4 f8f4 	bl	d2f4 <malloc>
                if (script == NULL)
   1910c:	4604      	mov	r4, r0
   1910e:	b910      	cbnz	r0, 19116 <cosem_setScriptTable+0x1e4>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   19110:	f44f 7482 	mov.w	r4, #260	; 0x104
   19114:	e720      	b.n	18f58 <cosem_setScriptTable+0x26>
                arr_init(&script->actions);
   19116:	1d07      	adds	r7, r0, #4
   19118:	4638      	mov	r0, r7
   1911a:	f7f8 fcd2 	bl	11ac2 <arr_init>
                script->id = (uint16_t)var_toInteger(tmp3);
   1911e:	9807      	ldr	r0, [sp, #28]
   19120:	f003 f921 	bl	1c366 <var_toInteger>
                arr_push(&object->scripts, script);
   19124:	4621      	mov	r1, r4
                script->id = (uint16_t)var_toInteger(tmp3);
   19126:	8020      	strh	r0, [r4, #0]
                arr_push(&object->scripts, script);
   19128:	4648      	mov	r0, r9
   1912a:	f7f8 fcf9 	bl	11b20 <arr_push>
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   1912e:	9b05      	ldr	r3, [sp, #20]
   19130:	aa07      	add	r2, sp, #28
   19132:	6898      	ldr	r0, [r3, #8]
   19134:	2103      	movs	r1, #3
   19136:	f002 ff9c 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1913a:	4604      	mov	r4, r0
   1913c:	2800      	cmp	r0, #0
   1913e:	f47f af0b 	bne.w	18f58 <cosem_setScriptTable+0x26>
                scriptAction = (gxScriptAction*)gxmalloc(sizeof(gxScriptAction));
   19142:	2020      	movs	r0, #32
   19144:	f7f4 f8d6 	bl	d2f4 <malloc>
                if (scriptAction == NULL)
   19148:	4605      	mov	r5, r0
   1914a:	2800      	cmp	r0, #0
   1914c:	d0e0      	beq.n	19110 <cosem_setScriptTable+0x1de>
                var_init(&scriptAction->parameter);
   1914e:	f100 0808 	add.w	r8, r0, #8
   19152:	4640      	mov	r0, r8
   19154:	f002 fdb3 	bl	1bcbe <var_init>
                scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp3);
   19158:	9807      	ldr	r0, [sp, #28]
   1915a:	f003 f904 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 4, &tmp3);
   1915e:	9b06      	ldr	r3, [sp, #24]
                scriptAction->type = (DLMS_SCRIPT_ACTION_TYPE)var_toInteger(tmp3);
   19160:	7128      	strb	r0, [r5, #4]
                ret = va_getByIndex(tmp2->Arr, 4, &tmp3);
   19162:	6898      	ldr	r0, [r3, #8]
   19164:	aa07      	add	r2, sp, #28
   19166:	2104      	movs	r1, #4
   19168:	f002 ff83 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1916c:	4604      	mov	r4, r0
   1916e:	2800      	cmp	r0, #0
   19170:	f47f aef2 	bne.w	18f58 <cosem_setScriptTable+0x26>
                type = (uint16_t)var_toInteger(tmp3);
   19174:	9807      	ldr	r0, [sp, #28]
   19176:	f003 f8f6 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 5, &tmp3);
   1917a:	9b06      	ldr	r3, [sp, #24]
                type = (uint16_t)var_toInteger(tmp3);
   1917c:	4606      	mov	r6, r0
                ret = va_getByIndex(tmp2->Arr, 5, &tmp3);
   1917e:	aa07      	add	r2, sp, #28
   19180:	6898      	ldr	r0, [r3, #8]
   19182:	2105      	movs	r1, #5
   19184:	f002 ff75 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19188:	4604      	mov	r4, r0
   1918a:	2800      	cmp	r0, #0
   1918c:	f47f aee4 	bne.w	18f58 <cosem_setScriptTable+0x26>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &scriptAction->target)) != 0)
   19190:	9b07      	ldr	r3, [sp, #28]
   19192:	9802      	ldr	r0, [sp, #8]
   19194:	689a      	ldr	r2, [r3, #8]
   19196:	b2b1      	uxth	r1, r6
   19198:	6812      	ldr	r2, [r2, #0]
   1919a:	462b      	mov	r3, r5
   1919c:	3098      	adds	r0, #152	; 0x98
   1919e:	f002 fd25 	bl	1bbec <oa_findByLN>
   191a2:	4604      	mov	r4, r0
   191a4:	2800      	cmp	r0, #0
   191a6:	f47f aed7 	bne.w	18f58 <cosem_setScriptTable+0x26>
                ret = va_getByIndex(tmp2->Arr, 6, &tmp3);
   191aa:	9b06      	ldr	r3, [sp, #24]
   191ac:	aa07      	add	r2, sp, #28
   191ae:	6898      	ldr	r0, [r3, #8]
   191b0:	2106      	movs	r1, #6
   191b2:	f002 ff5e 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   191b6:	4604      	mov	r4, r0
   191b8:	2800      	cmp	r0, #0
   191ba:	f47f aecd 	bne.w	18f58 <cosem_setScriptTable+0x26>
                scriptAction->index = (char)var_toInteger(tmp3);
   191be:	9807      	ldr	r0, [sp, #28]
   191c0:	f003 f8d1 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp2->Arr, 7, &tmp3);
   191c4:	9b06      	ldr	r3, [sp, #24]
                scriptAction->index = (char)var_toInteger(tmp3);
   191c6:	7628      	strb	r0, [r5, #24]
                ret = va_getByIndex(tmp2->Arr, 7, &tmp3);
   191c8:	6898      	ldr	r0, [r3, #8]
   191ca:	aa07      	add	r2, sp, #28
   191cc:	2107      	movs	r1, #7
   191ce:	f002 ff50 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   191d2:	4604      	mov	r4, r0
   191d4:	2800      	cmp	r0, #0
   191d6:	f47f aebf 	bne.w	18f58 <cosem_setScriptTable+0x26>
                var_copy(&scriptAction->parameter, tmp);
   191da:	9905      	ldr	r1, [sp, #20]
   191dc:	4640      	mov	r0, r8
   191de:	f7eb f9e5 	bl	45ac <var_copy>
                arr_push(&script->actions, scriptAction);
   191e2:	4629      	mov	r1, r5
   191e4:	4638      	mov	r0, r7
   191e6:	f7f8 fc9b 	bl	11b20 <arr_push>
   191ea:	e6b5      	b.n	18f58 <cosem_setScriptTable+0x26>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   191ec:	f44f 7481 	mov.w	r4, #258	; 0x102
   191f0:	e6b2      	b.n	18f58 <cosem_setScriptTable+0x26>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   191f2:	f44f 7182 	mov.w	r1, #260	; 0x104
    int ret = 0, pos, pos2;
   191f6:	460c      	mov	r4, r1
   191f8:	e6ae      	b.n	18f58 <cosem_setScriptTable+0x26>
                            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   191fa:	f44f 7182 	mov.w	r1, #260	; 0x104
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   191fe:	460d      	mov	r5, r1
   19200:	e6ef      	b.n	18fe2 <cosem_setScriptTable+0xb0>
                            gxfree(scriptAction);
   19202:	4638      	mov	r0, r7
   19204:	9301      	str	r3, [sp, #4]
   19206:	f7f4 f87d 	bl	d304 <free>
   1920a:	9b01      	ldr	r3, [sp, #4]
   1920c:	461d      	mov	r5, r3
   1920e:	e6e8      	b.n	18fe2 <cosem_setScriptTable+0xb0>

00019210 <cosem_setSpecialDaysTable>:
{
   19210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   19214:	2902      	cmp	r1, #2
{
   19216:	b086      	sub	sp, #24
   19218:	4690      	mov	r8, r2
    if (index == 2)
   1921a:	d15f      	bne.n	192dc <cosem_setSpecialDaysTable+0xcc>
        arr_clear(&object->entries);
   1921c:	f100 0610 	add.w	r6, r0, #16
   19220:	4630      	mov	r0, r6
   19222:	f7f8 fc92 	bl	11b4a <arr_clear>
        if (value->Arr != NULL)
   19226:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1922a:	2b00      	cmp	r3, #0
   1922c:	d151      	bne.n	192d2 <cosem_setSpecialDaysTable+0xc2>
    int ret = 0, pos;
   1922e:	2400      	movs	r4, #0
}
   19230:	4620      	mov	r0, r4
   19232:	b006      	add	sp, #24
   19234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ret = va_getByIndex(value->Arr, pos, &tmp);
   19238:	466a      	mov	r2, sp
   1923a:	4639      	mov	r1, r7
   1923c:	f002 ff19 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19240:	4604      	mov	r4, r0
   19242:	2800      	cmp	r0, #0
   19244:	d1f4      	bne.n	19230 <cosem_setSpecialDaysTable+0x20>
                specialDay = (gxSpecialDay*)gxmalloc(sizeof(gxSpecialDay));
   19246:	2014      	movs	r0, #20
   19248:	f7f4 f854 	bl	d2f4 <malloc>
                if (specialDay == NULL)
   1924c:	4605      	mov	r5, r0
   1924e:	2800      	cmp	r0, #0
   19250:	d041      	beq.n	192d6 <cosem_setSpecialDaysTable+0xc6>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   19252:	9b00      	ldr	r3, [sp, #0]
   19254:	4621      	mov	r1, r4
   19256:	6898      	ldr	r0, [r3, #8]
   19258:	aa01      	add	r2, sp, #4
   1925a:	f002 ff0a 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1925e:	4604      	mov	r4, r0
   19260:	2800      	cmp	r0, #0
   19262:	d1e5      	bne.n	19230 <cosem_setSpecialDaysTable+0x20>
                specialDay->index = (uint16_t)var_toInteger(tmp3);
   19264:	9801      	ldr	r0, [sp, #4]
   19266:	f003 f87e 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1926a:	9b00      	ldr	r3, [sp, #0]
                specialDay->index = (uint16_t)var_toInteger(tmp3);
   1926c:	8028      	strh	r0, [r5, #0]
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1926e:	aa01      	add	r2, sp, #4
   19270:	6898      	ldr	r0, [r3, #8]
   19272:	2101      	movs	r1, #1
   19274:	f002 fefd 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19278:	4604      	mov	r4, r0
   1927a:	2800      	cmp	r0, #0
   1927c:	d1d8      	bne.n	19230 <cosem_setSpecialDaysTable+0x20>
                var_init(&tmp2);
   1927e:	a802      	add	r0, sp, #8
   19280:	f002 fd1d 	bl	1bcbe <var_init>
                ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATE, &tmp2);
   19284:	9801      	ldr	r0, [sp, #4]
   19286:	aa02      	add	r2, sp, #8
   19288:	211a      	movs	r1, #26
   1928a:	f7f8 f923 	bl	114d4 <dlms_changeType2>
                if (ret != DLMS_ERROR_CODE_OK)
   1928e:	4604      	mov	r4, r0
   19290:	2800      	cmp	r0, #0
   19292:	d1cd      	bne.n	19230 <cosem_setSpecialDaysTable+0x20>
                time_copy(&specialDay->date, tmp2.dateTime);
   19294:	9904      	ldr	r1, [sp, #16]
   19296:	1d28      	adds	r0, r5, #4
   19298:	f7f6 f969 	bl	f56e <time_copy>
                var_clear(&tmp2);
   1929c:	a802      	add	r0, sp, #8
   1929e:	f002 fe6a 	bl	1bf76 <var_clear>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   192a2:	9b00      	ldr	r3, [sp, #0]
   192a4:	aa01      	add	r2, sp, #4
   192a6:	6898      	ldr	r0, [r3, #8]
   192a8:	2102      	movs	r1, #2
   192aa:	f002 fee2 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   192ae:	4604      	mov	r4, r0
   192b0:	2800      	cmp	r0, #0
   192b2:	d1bd      	bne.n	19230 <cosem_setSpecialDaysTable+0x20>
                specialDay->dayId = (unsigned char)var_toInteger(tmp3);
   192b4:	9801      	ldr	r0, [sp, #4]
   192b6:	f003 f856 	bl	1c366 <var_toInteger>
                arr_push(&object->entries, specialDay);
   192ba:	4629      	mov	r1, r5
                specialDay->dayId = (unsigned char)var_toInteger(tmp3);
   192bc:	7428      	strb	r0, [r5, #16]
                arr_push(&object->entries, specialDay);
   192be:	4630      	mov	r0, r6
   192c0:	f7f8 fc2e 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   192c4:	3701      	adds	r7, #1
   192c6:	f8d8 0008 	ldr.w	r0, [r8, #8]
   192ca:	88c3      	ldrh	r3, [r0, #6]
   192cc:	42bb      	cmp	r3, r7
   192ce:	d1b3      	bne.n	19238 <cosem_setSpecialDaysTable+0x28>
   192d0:	e7ad      	b.n	1922e <cosem_setSpecialDaysTable+0x1e>
   192d2:	2700      	movs	r7, #0
   192d4:	e7f7      	b.n	192c6 <cosem_setSpecialDaysTable+0xb6>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   192d6:	f44f 7482 	mov.w	r4, #260	; 0x104
   192da:	e7a9      	b.n	19230 <cosem_setSpecialDaysTable+0x20>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   192dc:	f44f 7481 	mov.w	r4, #258	; 0x102
   192e0:	e7a6      	b.n	19230 <cosem_setSpecialDaysTable+0x20>

000192e2 <cosem_setTcpUdpSetup>:
    if (index == 2)
   192e2:	2a02      	cmp	r2, #2
{
   192e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   192e6:	4605      	mov	r5, r0
   192e8:	460c      	mov	r4, r1
   192ea:	4618      	mov	r0, r3
    if (index == 2)
   192ec:	d104      	bne.n	192f8 <cosem_setTcpUdpSetup+0x16>
        object->port = (uint16_t)var_toInteger(value);
   192ee:	f003 f83a 	bl	1c366 <var_toInteger>
   192f2:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   192f4:	2000      	movs	r0, #0
   192f6:	e013      	b.n	19320 <cosem_setTcpUdpSetup+0x3e>
    else if (index == 3)
   192f8:	2a03      	cmp	r2, #3
   192fa:	d113      	bne.n	19324 <cosem_setTcpUdpSetup+0x42>
        if (value->vt == DLMS_DATA_TYPE_NONE)
   192fc:	781a      	ldrb	r2, [r3, #0]
   192fe:	b90a      	cbnz	r2, 19304 <cosem_setTcpUdpSetup+0x22>
            object->ipSetup = NULL;
   19300:	614a      	str	r2, [r1, #20]
   19302:	e7f7      	b.n	192f4 <cosem_setTcpUdpSetup+0x12>
            if ((ret = bb_get(value->byteArr, ln, 6)) != 0 ||
   19304:	6898      	ldr	r0, [r3, #8]
   19306:	2206      	movs	r2, #6
   19308:	4669      	mov	r1, sp
   1930a:	f7f5 fbcf 	bl	eaac <bb_get>
   1930e:	b938      	cbnz	r0, 19320 <cosem_setTcpUdpSetup+0x3e>
                (ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_IP4_SETUP, ln, &object->ipSetup)) != 0)
   19310:	f104 0314 	add.w	r3, r4, #20
   19314:	466a      	mov	r2, sp
   19316:	212a      	movs	r1, #42	; 0x2a
   19318:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1931c:	f002 fc66 	bl	1bbec <oa_findByLN>
}
   19320:	b003      	add	sp, #12
   19322:	bd30      	pop	{r4, r5, pc}
    else if (index == 4)
   19324:	2a04      	cmp	r2, #4
   19326:	d103      	bne.n	19330 <cosem_setTcpUdpSetup+0x4e>
        object->maximumSegmentSize = (uint16_t)var_toInteger(value);
   19328:	f003 f81d 	bl	1c366 <var_toInteger>
   1932c:	83a0      	strh	r0, [r4, #28]
   1932e:	e7e1      	b.n	192f4 <cosem_setTcpUdpSetup+0x12>
    else if (index == 5)
   19330:	2a05      	cmp	r2, #5
   19332:	d103      	bne.n	1933c <cosem_setTcpUdpSetup+0x5a>
        object->maximumSimultaneousConnections = (unsigned char)var_toInteger(value);
   19334:	f003 f817 	bl	1c366 <var_toInteger>
   19338:	7620      	strb	r0, [r4, #24]
   1933a:	e7db      	b.n	192f4 <cosem_setTcpUdpSetup+0x12>
    else if (index == 6)
   1933c:	2a06      	cmp	r2, #6
   1933e:	d103      	bne.n	19348 <cosem_setTcpUdpSetup+0x66>
        object->inactivityTimeout = (uint16_t)var_toInteger(value);
   19340:	f003 f811 	bl	1c366 <var_toInteger>
   19344:	8360      	strh	r0, [r4, #26]
   19346:	e7d5      	b.n	192f4 <cosem_setTcpUdpSetup+0x12>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   19348:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1934c:	e7e8      	b.n	19320 <cosem_setTcpUdpSetup+0x3e>

0001934e <cosem_setMbusMasterPortSetup>:
    if (index == 2)
   1934e:	2902      	cmp	r1, #2
{
   19350:	b510      	push	{r4, lr}
   19352:	4604      	mov	r4, r0
   19354:	4610      	mov	r0, r2
    if (index == 2)
   19356:	d104      	bne.n	19362 <cosem_setMbusMasterPortSetup+0x14>
        object->commSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   19358:	f003 f805 	bl	1c366 <var_toInteger>
   1935c:	7420      	strb	r0, [r4, #16]
    return DLMS_ERROR_CODE_OK;
   1935e:	2000      	movs	r0, #0
}
   19360:	bd10      	pop	{r4, pc}
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   19362:	f44f 7081 	mov.w	r0, #258	; 0x102
   19366:	e7fb      	b.n	19360 <cosem_setMbusMasterPortSetup+0x12>

00019368 <cosem_setPushSetup>:
{
   19368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (index == 2)
   1936c:	2a02      	cmp	r2, #2
{
   1936e:	b08b      	sub	sp, #44	; 0x2c
   19370:	4680      	mov	r8, r0
   19372:	460d      	mov	r5, r1
   19374:	461e      	mov	r6, r3
    if (index == 2)
   19376:	d17b      	bne.n	19470 <cosem_setPushSetup+0x108>
        obj_clearPushObjectList(&object->pushObjectList);
   19378:	3510      	adds	r5, #16
   1937a:	4628      	mov	r0, r5
   1937c:	f7fb fefa 	bl	15174 <obj_clearPushObjectList>
        if (value->Arr != NULL)
   19380:	68b3      	ldr	r3, [r6, #8]
   19382:	2b00      	cmp	r3, #0
   19384:	d172      	bne.n	1946c <cosem_setPushSetup+0x104>
    return DLMS_ERROR_CODE_OK;
   19386:	2400      	movs	r4, #0
   19388:	e0a6      	b.n	194d8 <cosem_setPushSetup+0x170>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1938a:	466a      	mov	r2, sp
   1938c:	4639      	mov	r1, r7
   1938e:	f002 fe70 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19392:	4604      	mov	r4, r0
   19394:	2800      	cmp	r0, #0
   19396:	f040 809f 	bne.w	194d8 <cosem_setPushSetup+0x170>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   1939a:	9b00      	ldr	r3, [sp, #0]
   1939c:	4601      	mov	r1, r0
   1939e:	aa01      	add	r2, sp, #4
   193a0:	6898      	ldr	r0, [r3, #8]
   193a2:	f002 fe66 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   193a6:	4604      	mov	r4, r0
   193a8:	2800      	cmp	r0, #0
   193aa:	f040 8095 	bne.w	194d8 <cosem_setPushSetup+0x170>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   193ae:	9801      	ldr	r0, [sp, #4]
   193b0:	f002 ffd9 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   193b4:	9b00      	ldr	r3, [sp, #0]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   193b6:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   193ba:	aa01      	add	r2, sp, #4
   193bc:	6898      	ldr	r0, [r3, #8]
   193be:	2101      	movs	r1, #1
   193c0:	f002 fe57 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   193c4:	4604      	mov	r4, r0
   193c6:	2800      	cmp	r0, #0
   193c8:	f040 8086 	bne.w	194d8 <cosem_setPushSetup+0x170>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   193cc:	9b01      	ldr	r3, [sp, #4]
                obj = NULL;
   193ce:	9006      	str	r0, [sp, #24]
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   193d0:	689a      	ldr	r2, [r3, #8]
   193d2:	4649      	mov	r1, r9
   193d4:	6812      	ldr	r2, [r2, #0]
   193d6:	ab06      	add	r3, sp, #24
   193d8:	f108 0098 	add.w	r0, r8, #152	; 0x98
   193dc:	f002 fc06 	bl	1bbec <oa_findByLN>
   193e0:	4604      	mov	r4, r0
   193e2:	2800      	cmp	r0, #0
   193e4:	d178      	bne.n	194d8 <cosem_setPushSetup+0x170>
                if (obj == NULL)
   193e6:	9b06      	ldr	r3, [sp, #24]
   193e8:	b99b      	cbnz	r3, 19412 <cosem_setPushSetup+0xaa>
                    if ((ret = cosem_createObject(type, &obj)) != 0)
   193ea:	a906      	add	r1, sp, #24
   193ec:	4648      	mov	r0, r9
   193ee:	f7e8 fe8f 	bl	2110 <cosem_createObject>
   193f2:	4604      	mov	r4, r0
   193f4:	2800      	cmp	r0, #0
   193f6:	d16f      	bne.n	194d8 <cosem_setPushSetup+0x170>
                    oa_push(&settings->releasedObjects, obj);
   193f8:	9906      	ldr	r1, [sp, #24]
   193fa:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   193fe:	f002 fb66 	bl	1bace <oa_push>
                    memcpy(obj->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   19402:	9b01      	ldr	r3, [sp, #4]
   19404:	9806      	ldr	r0, [sp, #24]
   19406:	689b      	ldr	r3, [r3, #8]
   19408:	3006      	adds	r0, #6
   1940a:	88da      	ldrh	r2, [r3, #6]
   1940c:	6819      	ldr	r1, [r3, #0]
   1940e:	f004 fef8 	bl	1e202 <memcpy>
                it = (gxTarget*)gxmalloc(sizeof(gxTarget));
   19412:	2004      	movs	r0, #4
   19414:	f7f3 ff6e 	bl	d2f4 <malloc>
                if (it == NULL)
   19418:	4604      	mov	r4, r0
   1941a:	2800      	cmp	r0, #0
   1941c:	d0b3      	beq.n	19386 <cosem_setPushSetup+0x1e>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1941e:	9b00      	ldr	r3, [sp, #0]
   19420:	aa01      	add	r2, sp, #4
   19422:	6898      	ldr	r0, [r3, #8]
   19424:	2102      	movs	r1, #2
   19426:	f002 fe24 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1942a:	2800      	cmp	r0, #0
   1942c:	d1ab      	bne.n	19386 <cosem_setPushSetup+0x1e>
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   1942e:	9801      	ldr	r0, [sp, #4]
   19430:	f002 ff99 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   19434:	9b00      	ldr	r3, [sp, #0]
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   19436:	7020      	strb	r0, [r4, #0]
                ret = va_getByIndex(tmp->Arr, 3, &tmp3);
   19438:	6898      	ldr	r0, [r3, #8]
   1943a:	aa01      	add	r2, sp, #4
   1943c:	2103      	movs	r1, #3
   1943e:	f002 fe18 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   19442:	2800      	cmp	r0, #0
   19444:	d19f      	bne.n	19386 <cosem_setPushSetup+0x1e>
                it->dataIndex = (unsigned char)var_toInteger(tmp3);
   19446:	9801      	ldr	r0, [sp, #4]
   19448:	f002 ff8d 	bl	1c366 <var_toInteger>
   1944c:	b2c0      	uxtb	r0, r0
   1944e:	8060      	strh	r0, [r4, #2]
                arr_push(&object->pushObjectList, key_init(obj, it));
   19450:	4621      	mov	r1, r4
   19452:	9806      	ldr	r0, [sp, #24]
   19454:	f7fb fe6d 	bl	15132 <key_init>
   19458:	4601      	mov	r1, r0
   1945a:	4628      	mov	r0, r5
   1945c:	f7f8 fb60 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19460:	3701      	adds	r7, #1
   19462:	68b0      	ldr	r0, [r6, #8]
   19464:	88c3      	ldrh	r3, [r0, #6]
   19466:	42bb      	cmp	r3, r7
   19468:	d18f      	bne.n	1938a <cosem_setPushSetup+0x22>
   1946a:	e78c      	b.n	19386 <cosem_setPushSetup+0x1e>
   1946c:	2700      	movs	r7, #0
   1946e:	e7f8      	b.n	19462 <cosem_setPushSetup+0xfa>
    else if (index == 3)
   19470:	2a03      	cmp	r2, #3
   19472:	d135      	bne.n	194e0 <cosem_setPushSetup+0x178>
        bb_clear(&object->destination);
   19474:	f101 0720 	add.w	r7, r1, #32
   19478:	4638      	mov	r0, r7
   1947a:	f7f5 f922 	bl	e6c2 <bb_clear>
        ret = va_getByIndex(value->Arr, 0, &tmp);
   1947e:	68b0      	ldr	r0, [r6, #8]
   19480:	466a      	mov	r2, sp
   19482:	2100      	movs	r1, #0
   19484:	f002 fdf5 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   19488:	4604      	mov	r4, r0
   1948a:	bb28      	cbnz	r0, 194d8 <cosem_setPushSetup+0x170>
        object->service = (DLMS_SERVICE_TYPE)var_toInteger(tmp);
   1948c:	9800      	ldr	r0, [sp, #0]
   1948e:	f002 ff6a 	bl	1c366 <var_toInteger>
   19492:	7728      	strb	r0, [r5, #28]
        ret = va_getByIndex(value->Arr, 1, &tmp);
   19494:	68b0      	ldr	r0, [r6, #8]
   19496:	466a      	mov	r2, sp
   19498:	2101      	movs	r1, #1
   1949a:	f002 fdea 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1949e:	4604      	mov	r4, r0
   194a0:	b9d0      	cbnz	r0, 194d8 <cosem_setPushSetup+0x170>
        if (tmp->byteArr != NULL && tmp->byteArr->size != 0)
   194a2:	9b00      	ldr	r3, [sp, #0]
   194a4:	689b      	ldr	r3, [r3, #8]
   194a6:	b15b      	cbz	r3, 194c0 <cosem_setPushSetup+0x158>
   194a8:	88db      	ldrh	r3, [r3, #6]
   194aa:	b14b      	cbz	r3, 194c0 <cosem_setPushSetup+0x158>
            bb_clear(&object->destination);
   194ac:	4638      	mov	r0, r7
   194ae:	f7f5 f908 	bl	e6c2 <bb_clear>
            bb_set(&object->destination, tmp->byteArr->data, tmp->byteArr->size);
   194b2:	9b00      	ldr	r3, [sp, #0]
   194b4:	689b      	ldr	r3, [r3, #8]
   194b6:	4638      	mov	r0, r7
   194b8:	88da      	ldrh	r2, [r3, #6]
   194ba:	6819      	ldr	r1, [r3, #0]
   194bc:	f7f5 f88d 	bl	e5da <bb_set>
        ret = va_getByIndex(value->Arr, 2, &tmp);
   194c0:	68b0      	ldr	r0, [r6, #8]
   194c2:	466a      	mov	r2, sp
   194c4:	2102      	movs	r1, #2
   194c6:	f002 fdd4 	bl	1c072 <va_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   194ca:	4604      	mov	r4, r0
   194cc:	b920      	cbnz	r0, 194d8 <cosem_setPushSetup+0x170>
        object->message = (DLMS_MESSAGE_TYPE)var_toInteger(tmp);
   194ce:	9800      	ldr	r0, [sp, #0]
   194d0:	f002 ff49 	bl	1c366 <var_toInteger>
   194d4:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
   194d8:	4620      	mov	r0, r4
   194da:	b00b      	add	sp, #44	; 0x2c
   194dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (index == 4)
   194e0:	2a04      	cmp	r2, #4
   194e2:	d156      	bne.n	19592 <cosem_setPushSetup+0x22a>
        arr_clearKeyValuePair(&object->communicationWindow);
   194e4:	3530      	adds	r5, #48	; 0x30
   194e6:	4628      	mov	r0, r5
   194e8:	f7f8 fb68 	bl	11bbc <arr_clearKeyValuePair>
        if (value->Arr != NULL)
   194ec:	68b3      	ldr	r3, [r6, #8]
   194ee:	2b00      	cmp	r3, #0
   194f0:	f43f af49 	beq.w	19386 <cosem_setPushSetup+0x1e>
            var_init(&start);
   194f4:	a802      	add	r0, sp, #8
   194f6:	f002 fbe2 	bl	1bcbe <var_init>
            var_init(&end);
   194fa:	a806      	add	r0, sp, #24
   194fc:	f002 fbdf 	bl	1bcbe <var_init>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19500:	2400      	movs	r4, #0
   19502:	68b0      	ldr	r0, [r6, #8]
   19504:	88c3      	ldrh	r3, [r0, #6]
   19506:	42a3      	cmp	r3, r4
   19508:	d005      	beq.n	19516 <cosem_setPushSetup+0x1ae>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != 0 ||
   1950a:	4621      	mov	r1, r4
   1950c:	466a      	mov	r2, sp
   1950e:	f002 fdb0 	bl	1c072 <va_getByIndex>
   19512:	4601      	mov	r1, r0
   19514:	b130      	cbz	r0, 19524 <cosem_setPushSetup+0x1bc>
            var_clear(&start);
   19516:	a802      	add	r0, sp, #8
   19518:	f002 fd2d 	bl	1bf76 <var_clear>
            var_clear(&end);
   1951c:	a806      	add	r0, sp, #24
   1951e:	f002 fd2a 	bl	1bf76 <var_clear>
   19522:	e730      	b.n	19386 <cosem_setPushSetup+0x1e>
                    (ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != 0 ||
   19524:	9b00      	ldr	r3, [sp, #0]
   19526:	aa01      	add	r2, sp, #4
   19528:	6898      	ldr	r0, [r3, #8]
   1952a:	f002 fda2 	bl	1c072 <va_getByIndex>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != 0 ||
   1952e:	2800      	cmp	r0, #0
   19530:	d1f1      	bne.n	19516 <cosem_setPushSetup+0x1ae>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start)) != 0 ||
   19532:	9801      	ldr	r0, [sp, #4]
   19534:	aa02      	add	r2, sp, #8
   19536:	2119      	movs	r1, #25
   19538:	f7f7 ffcc 	bl	114d4 <dlms_changeType2>
                    (ret = va_getByIndex(tmp->Arr, 0, &tmp3)) != 0 ||
   1953c:	2800      	cmp	r0, #0
   1953e:	d1ea      	bne.n	19516 <cosem_setPushSetup+0x1ae>
                    (ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != 0 ||
   19540:	9b00      	ldr	r3, [sp, #0]
   19542:	aa01      	add	r2, sp, #4
   19544:	6898      	ldr	r0, [r3, #8]
   19546:	2101      	movs	r1, #1
   19548:	f002 fd93 	bl	1c072 <va_getByIndex>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &start)) != 0 ||
   1954c:	2800      	cmp	r0, #0
   1954e:	d1e2      	bne.n	19516 <cosem_setPushSetup+0x1ae>
                    (ret = dlms_changeType2(tmp3, DLMS_DATA_TYPE_DATETIME, &end)) != 0)
   19550:	9801      	ldr	r0, [sp, #4]
   19552:	aa06      	add	r2, sp, #24
   19554:	2119      	movs	r1, #25
   19556:	f7f7 ffbd 	bl	114d4 <dlms_changeType2>
                    (ret = va_getByIndex(tmp->Arr, 1, &tmp3)) != 0 ||
   1955a:	2800      	cmp	r0, #0
   1955c:	d1db      	bne.n	19516 <cosem_setPushSetup+0x1ae>
                s = (gxtime*)gxmalloc(sizeof(gxtime));
   1955e:	200c      	movs	r0, #12
   19560:	f7f3 fec8 	bl	d2f4 <malloc>
   19564:	4607      	mov	r7, r0
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   19566:	200c      	movs	r0, #12
   19568:	f7f3 fec4 	bl	d2f4 <malloc>
                time_copy(s, start.dateTime);
   1956c:	9904      	ldr	r1, [sp, #16]
                e = (gxtime*)gxmalloc(sizeof(gxtime));
   1956e:	4680      	mov	r8, r0
                time_copy(s, start.dateTime);
   19570:	4638      	mov	r0, r7
   19572:	f7f5 fffc 	bl	f56e <time_copy>
                time_copy(e, end.dateTime);
   19576:	9908      	ldr	r1, [sp, #32]
   19578:	4640      	mov	r0, r8
   1957a:	f7f5 fff8 	bl	f56e <time_copy>
                arr_push(&object->communicationWindow, key_init(s, e));
   1957e:	4641      	mov	r1, r8
   19580:	4638      	mov	r0, r7
   19582:	f7fb fdd6 	bl	15132 <key_init>
   19586:	4601      	mov	r1, r0
   19588:	4628      	mov	r0, r5
   1958a:	f7f8 fac9 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1958e:	3401      	adds	r4, #1
   19590:	e7b7      	b.n	19502 <cosem_setPushSetup+0x19a>
    else if (index == 5)
   19592:	2a05      	cmp	r2, #5
   19594:	d104      	bne.n	195a0 <cosem_setPushSetup+0x238>
        object->randomisationStartInterval = (uint16_t)var_toInteger(value);
   19596:	4618      	mov	r0, r3
   19598:	f002 fee5 	bl	1c366 <var_toInteger>
   1959c:	87a8      	strh	r0, [r5, #60]	; 0x3c
   1959e:	e6f2      	b.n	19386 <cosem_setPushSetup+0x1e>
    else if (index == 6)
   195a0:	2a06      	cmp	r2, #6
   195a2:	d105      	bne.n	195b0 <cosem_setPushSetup+0x248>
        object->numberOfRetries = (unsigned char)var_toInteger(value);
   195a4:	4618      	mov	r0, r3
   195a6:	f002 fede 	bl	1c366 <var_toInteger>
   195aa:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
   195ae:	e6ea      	b.n	19386 <cosem_setPushSetup+0x1e>
    else if (index == 7)
   195b0:	2a07      	cmp	r2, #7
   195b2:	d105      	bne.n	195c0 <cosem_setPushSetup+0x258>
        object->repetitionDelay = (uint16_t)var_toInteger(value);
   195b4:	4618      	mov	r0, r3
   195b6:	f002 fed6 	bl	1c366 <var_toInteger>
   195ba:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
   195be:	e6e2      	b.n	19386 <cosem_setPushSetup+0x1e>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   195c0:	f44f 7481 	mov.w	r4, #258	; 0x102
   195c4:	e788      	b.n	194d8 <cosem_setPushSetup+0x170>

000195c6 <setUnitCharge>:
{
   195c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ret = obj_clearChargeTables(&target->chargeTables);
   195ca:	f101 070c 	add.w	r7, r1, #12
{
   195ce:	b085      	sub	sp, #20
   195d0:	4680      	mov	r8, r0
    ret = obj_clearChargeTables(&target->chargeTables);
   195d2:	4638      	mov	r0, r7
{
   195d4:	460d      	mov	r5, r1
   195d6:	4616      	mov	r6, r2
    ret = obj_clearChargeTables(&target->chargeTables);
   195d8:	f7fb ff24 	bl	15424 <obj_clearChargeTables>
    if (ret != 0)
   195dc:	4604      	mov	r4, r0
   195de:	2800      	cmp	r0, #0
   195e0:	d14d      	bne.n	1967e <setUnitCharge+0xb8>
    ret = va_getByIndex(value->Arr, 0, &it);
   195e2:	4601      	mov	r1, r0
   195e4:	aa01      	add	r2, sp, #4
   195e6:	68b0      	ldr	r0, [r6, #8]
   195e8:	f002 fd43 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   195ec:	4604      	mov	r4, r0
   195ee:	2800      	cmp	r0, #0
   195f0:	d145      	bne.n	1967e <setUnitCharge+0xb8>
    ret = va_getByIndex(it->Arr, 0, &it2);
   195f2:	9b01      	ldr	r3, [sp, #4]
   195f4:	4601      	mov	r1, r0
   195f6:	aa02      	add	r2, sp, #8
   195f8:	6898      	ldr	r0, [r3, #8]
   195fa:	f002 fd3a 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   195fe:	4604      	mov	r4, r0
   19600:	2800      	cmp	r0, #0
   19602:	d13c      	bne.n	1967e <setUnitCharge+0xb8>
    target->chargePerUnitScaling.commodityScale = (char)var_toInteger(it2);
   19604:	9802      	ldr	r0, [sp, #8]
   19606:	f002 feae 	bl	1c366 <var_toInteger>
    ret = va_getByIndex(it->Arr, 1, &it2);
   1960a:	9b01      	ldr	r3, [sp, #4]
    target->chargePerUnitScaling.commodityScale = (char)var_toInteger(it2);
   1960c:	7028      	strb	r0, [r5, #0]
    ret = va_getByIndex(it->Arr, 1, &it2);
   1960e:	6898      	ldr	r0, [r3, #8]
   19610:	aa02      	add	r2, sp, #8
   19612:	2101      	movs	r1, #1
   19614:	f002 fd2d 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   19618:	4604      	mov	r4, r0
   1961a:	bb80      	cbnz	r0, 1967e <setUnitCharge+0xb8>
    target->chargePerUnitScaling.priceScale = (char)var_toInteger(it2);
   1961c:	9802      	ldr	r0, [sp, #8]
   1961e:	f002 fea2 	bl	1c366 <var_toInteger>
   19622:	7068      	strb	r0, [r5, #1]
    ret = va_getByIndex(value->Arr, 1, &it);
   19624:	68b0      	ldr	r0, [r6, #8]
   19626:	aa01      	add	r2, sp, #4
   19628:	2101      	movs	r1, #1
   1962a:	f002 fd22 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   1962e:	4604      	mov	r4, r0
   19630:	bb28      	cbnz	r0, 1967e <setUnitCharge+0xb8>
    ret = va_getByIndex(it->Arr, 0, &it2);
   19632:	9b01      	ldr	r3, [sp, #4]
   19634:	4601      	mov	r1, r0
   19636:	aa02      	add	r2, sp, #8
   19638:	6898      	ldr	r0, [r3, #8]
   1963a:	f002 fd1a 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   1963e:	4604      	mov	r4, r0
   19640:	b9e8      	cbnz	r0, 1967e <setUnitCharge+0xb8>
    type = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   19642:	9802      	ldr	r0, [sp, #8]
   19644:	f002 fe8f 	bl	1c366 <var_toInteger>
    ret = va_getByIndex(it->Arr, 1, &it2);
   19648:	9b01      	ldr	r3, [sp, #4]
    type = (DLMS_OBJECT_TYPE)var_toInteger(it2);
   1964a:	4681      	mov	r9, r0
    ret = va_getByIndex(it->Arr, 1, &it2);
   1964c:	aa02      	add	r2, sp, #8
   1964e:	6898      	ldr	r0, [r3, #8]
   19650:	2101      	movs	r1, #1
   19652:	f002 fd0e 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   19656:	4604      	mov	r4, r0
   19658:	b988      	cbnz	r0, 1967e <setUnitCharge+0xb8>
    if (bb_size(it2->byteArr) == 6)
   1965a:	9b02      	ldr	r3, [sp, #8]
   1965c:	6898      	ldr	r0, [r3, #8]
   1965e:	f7f4 fe6a 	bl	e336 <bb_size>
   19662:	2806      	cmp	r0, #6
   19664:	d10f      	bne.n	19686 <setUnitCharge+0xc0>
        if ((ret = oa_findByLN(&settings->objects, type, it2->byteArr->data, &target->commodity.target)) != 0)
   19666:	9b02      	ldr	r3, [sp, #8]
   19668:	689a      	ldr	r2, [r3, #8]
   1966a:	fa1f f189 	uxth.w	r1, r9
   1966e:	6812      	ldr	r2, [r2, #0]
   19670:	1d2b      	adds	r3, r5, #4
   19672:	f108 0098 	add.w	r0, r8, #152	; 0x98
   19676:	f002 fab9 	bl	1bbec <oa_findByLN>
   1967a:	4604      	mov	r4, r0
   1967c:	b120      	cbz	r0, 19688 <setUnitCharge+0xc2>
}
   1967e:	4620      	mov	r0, r4
   19680:	b005      	add	sp, #20
   19682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        target->commodity.target = NULL;
   19686:	606c      	str	r4, [r5, #4]
    ret = va_getByIndex(it->Arr, 2, &it2);
   19688:	9b01      	ldr	r3, [sp, #4]
   1968a:	aa02      	add	r2, sp, #8
   1968c:	6898      	ldr	r0, [r3, #8]
   1968e:	2102      	movs	r1, #2
   19690:	f002 fcef 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   19694:	4604      	mov	r4, r0
   19696:	2800      	cmp	r0, #0
   19698:	d1f1      	bne.n	1967e <setUnitCharge+0xb8>
    target->commodity.attributeIndex = (unsigned char)var_toInteger(it2);
   1969a:	9802      	ldr	r0, [sp, #8]
   1969c:	f002 fe63 	bl	1c366 <var_toInteger>
   196a0:	7228      	strb	r0, [r5, #8]
    obj_clearChargeTables(&target->chargeTables);
   196a2:	4638      	mov	r0, r7
   196a4:	f7fb febe 	bl	15424 <obj_clearChargeTables>
    ret = va_getByIndex(value->Arr, 2, &it);
   196a8:	68b0      	ldr	r0, [r6, #8]
   196aa:	aa01      	add	r2, sp, #4
   196ac:	2102      	movs	r1, #2
   196ae:	f002 fce0 	bl	1c072 <va_getByIndex>
    if (ret != 0)
   196b2:	4604      	mov	r4, r0
   196b4:	2800      	cmp	r0, #0
   196b6:	d1e2      	bne.n	1967e <setUnitCharge+0xb8>
    for (pos = 0; pos != it->Arr->size; ++pos)
   196b8:	4680      	mov	r8, r0
   196ba:	9b01      	ldr	r3, [sp, #4]
   196bc:	6898      	ldr	r0, [r3, #8]
   196be:	88c3      	ldrh	r3, [r0, #6]
   196c0:	4543      	cmp	r3, r8
   196c2:	d0dc      	beq.n	1967e <setUnitCharge+0xb8>
        ret = va_getByIndex(it->Arr, pos, &it2);
   196c4:	aa02      	add	r2, sp, #8
   196c6:	4641      	mov	r1, r8
   196c8:	f002 fcd3 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   196cc:	4606      	mov	r6, r0
   196ce:	bb80      	cbnz	r0, 19732 <setUnitCharge+0x16c>
        ct = (gxChargeTable*)gxmalloc(sizeof(gxChargeTable));
   196d0:	2010      	movs	r0, #16
   196d2:	f7f3 fe0f 	bl	d2f4 <malloc>
        if (ct == NULL)
   196d6:	4605      	mov	r5, r0
   196d8:	b340      	cbz	r0, 1972c <setUnitCharge+0x166>
        arr_push(&target->chargeTables, ct);
   196da:	4601      	mov	r1, r0
   196dc:	4638      	mov	r0, r7
   196de:	f7f8 fa1f 	bl	11b20 <arr_push>
        BYTE_BUFFER_INIT(&ct->index);
   196e2:	4628      	mov	r0, r5
   196e4:	f7f4 fe2a 	bl	e33c <bb_init>
        ret = va_getByIndex(it2->Arr, 0, &tmp);
   196e8:	9b02      	ldr	r3, [sp, #8]
   196ea:	4631      	mov	r1, r6
   196ec:	6898      	ldr	r0, [r3, #8]
   196ee:	aa03      	add	r2, sp, #12
   196f0:	f002 fcbf 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   196f4:	4606      	mov	r6, r0
   196f6:	b9e0      	cbnz	r0, 19732 <setUnitCharge+0x16c>
        bb_set2(&ct->index, tmp->byteArr, 0, bb_size(tmp->byteArr));
   196f8:	9b03      	ldr	r3, [sp, #12]
   196fa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   196fe:	4648      	mov	r0, r9
   19700:	f7f4 fe19 	bl	e336 <bb_size>
   19704:	4632      	mov	r2, r6
   19706:	4603      	mov	r3, r0
   19708:	4649      	mov	r1, r9
   1970a:	4628      	mov	r0, r5
   1970c:	f7f4 ff94 	bl	e638 <bb_set2>
        ret = va_getByIndex(it2->Arr, 1, &tmp);
   19710:	9b02      	ldr	r3, [sp, #8]
   19712:	aa03      	add	r2, sp, #12
   19714:	6898      	ldr	r0, [r3, #8]
   19716:	2101      	movs	r1, #1
   19718:	f002 fcab 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   1971c:	b958      	cbnz	r0, 19736 <setUnitCharge+0x170>
        ct->chargePerUnit = (short)var_toInteger(tmp);
   1971e:	9803      	ldr	r0, [sp, #12]
   19720:	f002 fe21 	bl	1c366 <var_toInteger>
    for (pos = 0; pos != it->Arr->size; ++pos)
   19724:	f108 0801 	add.w	r8, r8, #1
        ct->chargePerUnit = (short)var_toInteger(tmp);
   19728:	81a8      	strh	r0, [r5, #12]
    for (pos = 0; pos != it->Arr->size; ++pos)
   1972a:	e7c6      	b.n	196ba <setUnitCharge+0xf4>
            ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1972c:	f44f 7482 	mov.w	r4, #260	; 0x104
   19730:	e7a5      	b.n	1967e <setUnitCharge+0xb8>
        ret = va_getByIndex(it2->Arr, 0, &tmp);
   19732:	4634      	mov	r4, r6
   19734:	e7a3      	b.n	1967e <setUnitCharge+0xb8>
        ret = va_getByIndex(it2->Arr, 1, &tmp);
   19736:	4604      	mov	r4, r0
   19738:	e7a1      	b.n	1967e <setUnitCharge+0xb8>

0001973a <cosem_setCharge>:
{
   1973a:	b530      	push	{r4, r5, lr}
    if (index == 2)
   1973c:	2a02      	cmp	r2, #2
{
   1973e:	b085      	sub	sp, #20
   19740:	460d      	mov	r5, r1
   19742:	461c      	mov	r4, r3
    if (index == 2)
   19744:	d106      	bne.n	19754 <cosem_setCharge+0x1a>
        object->totalAmountPaid = (short)var_toInteger(value);
   19746:	4618      	mov	r0, r3
   19748:	f002 fe0d 	bl	1c366 <var_toInteger>
   1974c:	b200      	sxth	r0, r0
   1974e:	6128      	str	r0, [r5, #16]
    int ret = 0;
   19750:	2400      	movs	r4, #0
   19752:	e014      	b.n	1977e <cosem_setCharge+0x44>
    else if (index == 3)
   19754:	2a03      	cmp	r2, #3
   19756:	d104      	bne.n	19762 <cosem_setCharge+0x28>
        object->chargeType = (unsigned char)var_toInteger(value);
   19758:	4618      	mov	r0, r3
   1975a:	f002 fe04 	bl	1c366 <var_toInteger>
   1975e:	7528      	strb	r0, [r5, #20]
   19760:	e7f6      	b.n	19750 <cosem_setCharge+0x16>
    else if (index == 4)
   19762:	2a04      	cmp	r2, #4
   19764:	d104      	bne.n	19770 <cosem_setCharge+0x36>
        object->priority = (unsigned char)var_toInteger(value);
   19766:	4618      	mov	r0, r3
   19768:	f002 fdfd 	bl	1c366 <var_toInteger>
   1976c:	7568      	strb	r0, [r5, #21]
   1976e:	e7ef      	b.n	19750 <cosem_setCharge+0x16>
    else if (index == 5)
   19770:	2a05      	cmp	r2, #5
   19772:	d107      	bne.n	19784 <cosem_setCharge+0x4a>
        ret = setUnitCharge(settings, &object->unitChargeActive, value);
   19774:	461a      	mov	r2, r3
   19776:	3118      	adds	r1, #24
        ret = setUnitCharge(settings, &object->unitChargePassive, value);
   19778:	f7ff ff25 	bl	195c6 <setUnitCharge>
   1977c:	4604      	mov	r4, r0
}
   1977e:	4620      	mov	r0, r4
   19780:	b005      	add	sp, #20
   19782:	bd30      	pop	{r4, r5, pc}
    else if (index == 6)
   19784:	2a06      	cmp	r2, #6
   19786:	d102      	bne.n	1978e <cosem_setCharge+0x54>
        ret = setUnitCharge(settings, &object->unitChargePassive, value);
   19788:	461a      	mov	r2, r3
   1978a:	3130      	adds	r1, #48	; 0x30
   1978c:	e7f4      	b.n	19778 <cosem_setCharge+0x3e>
    else if (index == 7)
   1978e:	2a07      	cmp	r2, #7
   19790:	d11d      	bne.n	197ce <cosem_setCharge+0x94>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   19792:	781b      	ldrb	r3, [r3, #0]
   19794:	2b09      	cmp	r3, #9
   19796:	d115      	bne.n	197c4 <cosem_setCharge+0x8a>
   19798:	68a3      	ldr	r3, [r4, #8]
   1979a:	b19b      	cbz	r3, 197c4 <cosem_setCharge+0x8a>
            var_init(&tmp);
   1979c:	4668      	mov	r0, sp
   1979e:	f002 fa8e 	bl	1bcbe <var_init>
            if ((ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp)) != 0)
   197a2:	4620      	mov	r0, r4
   197a4:	466a      	mov	r2, sp
   197a6:	2119      	movs	r1, #25
   197a8:	f7f7 fe94 	bl	114d4 <dlms_changeType2>
   197ac:	4604      	mov	r4, r0
   197ae:	b118      	cbz	r0, 197b8 <cosem_setCharge+0x7e>
            var_clear(&tmp);
   197b0:	4668      	mov	r0, sp
   197b2:	f002 fbe0 	bl	1bf76 <var_clear>
   197b6:	e7e2      	b.n	1977e <cosem_setCharge+0x44>
            time_copy(&object->unitChargeActivationTime, tmp.dateTime);
   197b8:	9902      	ldr	r1, [sp, #8]
   197ba:	f105 0048 	add.w	r0, r5, #72	; 0x48
   197be:	f7f5 fed6 	bl	f56e <time_copy>
   197c2:	e7f5      	b.n	197b0 <cosem_setCharge+0x76>
            time_clear(&object->unitChargeActivationTime);
   197c4:	f105 0048 	add.w	r0, r5, #72	; 0x48
   197c8:	f7f5 fea0 	bl	f50c <time_clear>
   197cc:	e7c0      	b.n	19750 <cosem_setCharge+0x16>
    else if (index == 8)
   197ce:	2a08      	cmp	r2, #8
   197d0:	d104      	bne.n	197dc <cosem_setCharge+0xa2>
        object->period = var_toInteger(value);
   197d2:	4618      	mov	r0, r3
   197d4:	f002 fdc7 	bl	1c366 <var_toInteger>
   197d8:	6568      	str	r0, [r5, #84]	; 0x54
   197da:	e7b9      	b.n	19750 <cosem_setCharge+0x16>
    else if (index == 9)
   197dc:	2a09      	cmp	r2, #9
   197de:	d105      	bne.n	197ec <cosem_setCharge+0xb2>
        object->chargeConfiguration = var_toInteger(value);
   197e0:	4618      	mov	r0, r3
   197e2:	f002 fdc0 	bl	1c366 <var_toInteger>
   197e6:	f885 0058 	strb.w	r0, [r5, #88]	; 0x58
   197ea:	e7b1      	b.n	19750 <cosem_setCharge+0x16>
    else if (index == 10)
   197ec:	2a0a      	cmp	r2, #10
   197ee:	d109      	bne.n	19804 <cosem_setCharge+0xca>
        if (value->vt == DLMS_DATA_TYPE_DATETIME)
   197f0:	781b      	ldrb	r3, [r3, #0]
   197f2:	2b19      	cmp	r3, #25
   197f4:	d11c      	bne.n	19830 <cosem_setCharge+0xf6>
            object->lastCollectionTime = *value->dateTime;
   197f6:	68a3      	ldr	r3, [r4, #8]
   197f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   197fc:	355c      	adds	r5, #92	; 0x5c
   197fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   19802:	e7a5      	b.n	19750 <cosem_setCharge+0x16>
    else if (index == 11)
   19804:	2a0b      	cmp	r2, #11
   19806:	d104      	bne.n	19812 <cosem_setCharge+0xd8>
        object->lastCollectionAmount = var_toInteger(value);
   19808:	4618      	mov	r0, r3
   1980a:	f002 fdac 	bl	1c366 <var_toInteger>
   1980e:	66a8      	str	r0, [r5, #104]	; 0x68
   19810:	e79e      	b.n	19750 <cosem_setCharge+0x16>
    else if (index == 12)
   19812:	2a0c      	cmp	r2, #12
   19814:	d104      	bne.n	19820 <cosem_setCharge+0xe6>
        object->totalAmountRemaining = var_toInteger(value);
   19816:	4618      	mov	r0, r3
   19818:	f002 fda5 	bl	1c366 <var_toInteger>
   1981c:	66e8      	str	r0, [r5, #108]	; 0x6c
   1981e:	e797      	b.n	19750 <cosem_setCharge+0x16>
    else if (index == 13)
   19820:	2a0d      	cmp	r2, #13
   19822:	d105      	bne.n	19830 <cosem_setCharge+0xf6>
        object->proportion = (uint16_t)var_toInteger(value);
   19824:	4618      	mov	r0, r3
   19826:	f002 fd9e 	bl	1c366 <var_toInteger>
   1982a:	f8a5 0070 	strh.w	r0, [r5, #112]	; 0x70
   1982e:	e78f      	b.n	19750 <cosem_setCharge+0x16>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   19830:	f44f 7481 	mov.w	r4, #258	; 0x102
   19834:	e7a3      	b.n	1977e <cosem_setCharge+0x44>

00019836 <cosem_setCredit>:
{
   19836:	b530      	push	{r4, r5, lr}
    if (index == 2)
   19838:	2902      	cmp	r1, #2
{
   1983a:	b085      	sub	sp, #20
   1983c:	4605      	mov	r5, r0
   1983e:	4614      	mov	r4, r2
    if (index == 2)
   19840:	d107      	bne.n	19852 <cosem_setCredit+0x1c>
        object->currentCreditAmount = var_toInteger(value);
   19842:	4610      	mov	r0, r2
   19844:	f002 fd8f 	bl	1c366 <var_toInteger>
   19848:	6128      	str	r0, [r5, #16]
    int ret = 0;
   1984a:	2400      	movs	r4, #0
}
   1984c:	4620      	mov	r0, r4
   1984e:	b005      	add	sp, #20
   19850:	bd30      	pop	{r4, r5, pc}
    else if (index == 3)
   19852:	2903      	cmp	r1, #3
   19854:	d104      	bne.n	19860 <cosem_setCredit+0x2a>
        object->type = (unsigned char)var_toInteger(value);
   19856:	4610      	mov	r0, r2
   19858:	f002 fd85 	bl	1c366 <var_toInteger>
   1985c:	7528      	strb	r0, [r5, #20]
   1985e:	e7f4      	b.n	1984a <cosem_setCredit+0x14>
    else if (index == 4)
   19860:	2904      	cmp	r1, #4
   19862:	d104      	bne.n	1986e <cosem_setCredit+0x38>
        object->priority = (unsigned char)var_toInteger(value);
   19864:	4610      	mov	r0, r2
   19866:	f002 fd7e 	bl	1c366 <var_toInteger>
   1986a:	7568      	strb	r0, [r5, #21]
   1986c:	e7ed      	b.n	1984a <cosem_setCredit+0x14>
    else if (index == 5)
   1986e:	2905      	cmp	r1, #5
   19870:	d104      	bne.n	1987c <cosem_setCredit+0x46>
        object->warningThreshold = var_toInteger(value);
   19872:	4610      	mov	r0, r2
   19874:	f002 fd77 	bl	1c366 <var_toInteger>
   19878:	61a8      	str	r0, [r5, #24]
   1987a:	e7e6      	b.n	1984a <cosem_setCredit+0x14>
    else if (index == 6)
   1987c:	2906      	cmp	r1, #6
   1987e:	d104      	bne.n	1988a <cosem_setCredit+0x54>
        object->limit = var_toInteger(value);
   19880:	4610      	mov	r0, r2
   19882:	f002 fd70 	bl	1c366 <var_toInteger>
   19886:	61e8      	str	r0, [r5, #28]
   19888:	e7df      	b.n	1984a <cosem_setCredit+0x14>
    else if (index == 7)
   1988a:	2907      	cmp	r1, #7
   1988c:	d105      	bne.n	1989a <cosem_setCredit+0x64>
        object->creditConfiguration = var_toInteger(value);
   1988e:	4610      	mov	r0, r2
   19890:	f002 fd69 	bl	1c366 <var_toInteger>
   19894:	f885 0020 	strb.w	r0, [r5, #32]
   19898:	e7d7      	b.n	1984a <cosem_setCredit+0x14>
    else if (index == 8)
   1989a:	2908      	cmp	r1, #8
   1989c:	d105      	bne.n	198aa <cosem_setCredit+0x74>
        object->status = (unsigned char)var_toInteger(value);
   1989e:	4610      	mov	r0, r2
   198a0:	f002 fd61 	bl	1c366 <var_toInteger>
   198a4:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
   198a8:	e7cf      	b.n	1984a <cosem_setCredit+0x14>
    else if (index == 9)
   198aa:	2909      	cmp	r1, #9
   198ac:	d104      	bne.n	198b8 <cosem_setCredit+0x82>
        object->presetCreditAmount = var_toInteger(value);
   198ae:	4610      	mov	r0, r2
   198b0:	f002 fd59 	bl	1c366 <var_toInteger>
   198b4:	6268      	str	r0, [r5, #36]	; 0x24
   198b6:	e7c8      	b.n	1984a <cosem_setCredit+0x14>
    else if (index == 10)
   198b8:	290a      	cmp	r1, #10
   198ba:	d104      	bne.n	198c6 <cosem_setCredit+0x90>
        object->creditAvailableThreshold = var_toInteger(value);
   198bc:	4610      	mov	r0, r2
   198be:	f002 fd52 	bl	1c366 <var_toInteger>
   198c2:	62a8      	str	r0, [r5, #40]	; 0x28
   198c4:	e7c1      	b.n	1984a <cosem_setCredit+0x14>
    else if (index == 11)
   198c6:	290b      	cmp	r1, #11
   198c8:	d112      	bne.n	198f0 <cosem_setCredit+0xba>
        var_init(&tmp);
   198ca:	4668      	mov	r0, sp
   198cc:	f002 f9f7 	bl	1bcbe <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   198d0:	68a0      	ldr	r0, [r4, #8]
   198d2:	466a      	mov	r2, sp
   198d4:	2119      	movs	r1, #25
   198d6:	f7f7 fdcf 	bl	11478 <dlms_changeType>
        if (ret == 0)
   198da:	4604      	mov	r4, r0
   198dc:	b920      	cbnz	r0, 198e8 <cosem_setCredit+0xb2>
            time_copy(&object->period, tmp.dateTime);
   198de:	9902      	ldr	r1, [sp, #8]
   198e0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   198e4:	f7f5 fe43 	bl	f56e <time_copy>
        var_clear(&tmp);
   198e8:	4668      	mov	r0, sp
   198ea:	f002 fb44 	bl	1bf76 <var_clear>
   198ee:	e7ad      	b.n	1984c <cosem_setCredit+0x16>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   198f0:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   198f4:	e7aa      	b.n	1984c <cosem_setCredit+0x16>

000198f6 <cosem_setAccount>:
{
   198f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (index == 2)
   198fa:	2902      	cmp	r1, #2
{
   198fc:	b086      	sub	sp, #24
   198fe:	4605      	mov	r5, r0
   19900:	4616      	mov	r6, r2
    if (index == 2)
   19902:	d119      	bne.n	19938 <cosem_setAccount+0x42>
        ret = va_getByIndex(value->Arr, 0, &it);
   19904:	68b0      	ldr	r0, [r6, #8]
   19906:	aa01      	add	r2, sp, #4
   19908:	2100      	movs	r1, #0
   1990a:	f002 fbb2 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   1990e:	4604      	mov	r4, r0
   19910:	b970      	cbnz	r0, 19930 <cosem_setAccount+0x3a>
        object->paymentMode = (DLMS_ACCOUNT_PAYMENT_MODE)var_toInteger(it);
   19912:	9801      	ldr	r0, [sp, #4]
   19914:	f002 fd27 	bl	1c366 <var_toInteger>
   19918:	7428      	strb	r0, [r5, #16]
        ret = va_getByIndex(value->Arr, 1, &it);
   1991a:	68b0      	ldr	r0, [r6, #8]
   1991c:	aa01      	add	r2, sp, #4
   1991e:	2101      	movs	r1, #1
   19920:	f002 fba7 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   19924:	4604      	mov	r4, r0
   19926:	b918      	cbnz	r0, 19930 <cosem_setAccount+0x3a>
        object->accountStatus = (DLMS_ACCOUNT_STATUS)var_toInteger(it);
   19928:	9801      	ldr	r0, [sp, #4]
   1992a:	f002 fd1c 	bl	1c366 <var_toInteger>
   1992e:	7468      	strb	r0, [r5, #17]
}
   19930:	4620      	mov	r0, r4
   19932:	b006      	add	sp, #24
   19934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (index == 3)
   19938:	2903      	cmp	r1, #3
   1993a:	d105      	bne.n	19948 <cosem_setAccount+0x52>
        object->currentCreditInUse = (unsigned char)var_toInteger(value);
   1993c:	4610      	mov	r0, r2
   1993e:	f002 fd12 	bl	1c366 <var_toInteger>
   19942:	74a8      	strb	r0, [r5, #18]
    int ret = 0, pos;
   19944:	2400      	movs	r4, #0
   19946:	e7f3      	b.n	19930 <cosem_setAccount+0x3a>
    else if (index == 4)
   19948:	2904      	cmp	r1, #4
   1994a:	d10c      	bne.n	19966 <cosem_setAccount+0x70>
        if (value->bitArr == NULL || value->bitArr->size == 0)
   1994c:	6893      	ldr	r3, [r2, #8]
   1994e:	2b00      	cmp	r3, #0
   19950:	f000 8194 	beq.w	19c7c <cosem_setAccount+0x386>
   19954:	88db      	ldrh	r3, [r3, #6]
   19956:	2b00      	cmp	r3, #0
   19958:	f000 8190 	beq.w	19c7c <cosem_setAccount+0x386>
            object->currentCreditStatus = (DLMS_ACCOUNT_CREDIT_STATUS)var_toInteger(value);
   1995c:	4610      	mov	r0, r2
   1995e:	f002 fd02 	bl	1c366 <var_toInteger>
   19962:	74e8      	strb	r0, [r5, #19]
   19964:	e7ee      	b.n	19944 <cosem_setAccount+0x4e>
    else if (index == 5)
   19966:	2905      	cmp	r1, #5
   19968:	d104      	bne.n	19974 <cosem_setAccount+0x7e>
        object->availableCredit = var_toInteger(value);
   1996a:	4610      	mov	r0, r2
   1996c:	f002 fcfb 	bl	1c366 <var_toInteger>
   19970:	6168      	str	r0, [r5, #20]
   19972:	e7e7      	b.n	19944 <cosem_setAccount+0x4e>
    else if (index == 6)
   19974:	2906      	cmp	r1, #6
   19976:	d104      	bne.n	19982 <cosem_setAccount+0x8c>
        object->amountToClear = var_toInteger(value);
   19978:	4610      	mov	r0, r2
   1997a:	f002 fcf4 	bl	1c366 <var_toInteger>
   1997e:	61a8      	str	r0, [r5, #24]
   19980:	e7e0      	b.n	19944 <cosem_setAccount+0x4e>
    else if (index == 7)
   19982:	2907      	cmp	r1, #7
   19984:	d104      	bne.n	19990 <cosem_setAccount+0x9a>
        object->clearanceThreshold = var_toInteger(value);
   19986:	4610      	mov	r0, r2
   19988:	f002 fced 	bl	1c366 <var_toInteger>
   1998c:	61e8      	str	r0, [r5, #28]
   1998e:	e7d9      	b.n	19944 <cosem_setAccount+0x4e>
    else if (index == 8)
   19990:	2908      	cmp	r1, #8
   19992:	d104      	bne.n	1999e <cosem_setAccount+0xa8>
        object->aggregatedDebt = var_toInteger(value);
   19994:	4610      	mov	r0, r2
   19996:	f002 fce6 	bl	1c366 <var_toInteger>
   1999a:	6228      	str	r0, [r5, #32]
   1999c:	e7d2      	b.n	19944 <cosem_setAccount+0x4e>
    else if (index == 9)
   1999e:	2909      	cmp	r1, #9
   199a0:	d127      	bne.n	199f2 <cosem_setAccount+0xfc>
        arr_clear(&object->creditReferences);
   199a2:	3524      	adds	r5, #36	; 0x24
   199a4:	4628      	mov	r0, r5
   199a6:	f7f8 f8d0 	bl	11b4a <arr_clear>
        for (pos = 0; pos != value->Arr->size; ++pos)
   199aa:	2700      	movs	r7, #0
   199ac:	68b0      	ldr	r0, [r6, #8]
   199ae:	88c3      	ldrh	r3, [r0, #6]
   199b0:	42bb      	cmp	r3, r7
   199b2:	d0c7      	beq.n	19944 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   199b4:	aa01      	add	r2, sp, #4
   199b6:	4639      	mov	r1, r7
   199b8:	f002 fb5b 	bl	1c072 <va_getByIndex>
            if (ret != 0)
   199bc:	4604      	mov	r4, r0
   199be:	2800      	cmp	r0, #0
   199c0:	d1b6      	bne.n	19930 <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   199c2:	9b01      	ldr	r3, [sp, #4]
   199c4:	689b      	ldr	r3, [r3, #8]
   199c6:	b913      	cbnz	r3, 199ce <cosem_setAccount+0xd8>
                return DLMS_ERROR_CODE_INVALID_PARAMETER;
   199c8:	f44f 7481 	mov.w	r4, #258	; 0x102
   199cc:	e7b0      	b.n	19930 <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   199ce:	88d8      	ldrh	r0, [r3, #6]
   199d0:	2806      	cmp	r0, #6
   199d2:	d1f9      	bne.n	199c8 <cosem_setAccount+0xd2>
            ba = (unsigned char*)gxmalloc(6);
   199d4:	f7f3 fc8e 	bl	d2f4 <malloc>
            memcpy(ba, it->byteArr->data, 6);
   199d8:	9b01      	ldr	r3, [sp, #4]
   199da:	689b      	ldr	r3, [r3, #8]
   199dc:	681b      	ldr	r3, [r3, #0]
   199de:	681a      	ldr	r2, [r3, #0]
   199e0:	6002      	str	r2, [r0, #0]
   199e2:	889b      	ldrh	r3, [r3, #4]
   199e4:	8083      	strh	r3, [r0, #4]
            ba = (unsigned char*)gxmalloc(6);
   199e6:	4601      	mov	r1, r0
            arr_push(&object->creditReferences, ba);
   199e8:	4628      	mov	r0, r5
   199ea:	f7f8 f899 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   199ee:	3701      	adds	r7, #1
   199f0:	e7dc      	b.n	199ac <cosem_setAccount+0xb6>
    else if (index == 10)
   199f2:	290a      	cmp	r1, #10
   199f4:	d125      	bne.n	19a42 <cosem_setAccount+0x14c>
        arr_clear(&object->chargeReferences);
   199f6:	3530      	adds	r5, #48	; 0x30
   199f8:	4628      	mov	r0, r5
   199fa:	f7f8 f8a6 	bl	11b4a <arr_clear>
        for (pos = 0; pos != value->Arr->size; ++pos)
   199fe:	2700      	movs	r7, #0
   19a00:	68b0      	ldr	r0, [r6, #8]
   19a02:	88c3      	ldrh	r3, [r0, #6]
   19a04:	42bb      	cmp	r3, r7
   19a06:	d09d      	beq.n	19944 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   19a08:	aa01      	add	r2, sp, #4
   19a0a:	4639      	mov	r1, r7
   19a0c:	f002 fb31 	bl	1c072 <va_getByIndex>
            if (ret != 0)
   19a10:	4604      	mov	r4, r0
   19a12:	2800      	cmp	r0, #0
   19a14:	d18c      	bne.n	19930 <cosem_setAccount+0x3a>
            if (it->byteArr == NULL || it->byteArr->size != 6)
   19a16:	9b01      	ldr	r3, [sp, #4]
   19a18:	689b      	ldr	r3, [r3, #8]
   19a1a:	2b00      	cmp	r3, #0
   19a1c:	d0d4      	beq.n	199c8 <cosem_setAccount+0xd2>
   19a1e:	88d8      	ldrh	r0, [r3, #6]
   19a20:	2806      	cmp	r0, #6
   19a22:	d1d1      	bne.n	199c8 <cosem_setAccount+0xd2>
            ba = (unsigned char*)gxmalloc(6);
   19a24:	f7f3 fc66 	bl	d2f4 <malloc>
            memcpy(ba, it->byteArr->data, 6);
   19a28:	9b01      	ldr	r3, [sp, #4]
   19a2a:	689b      	ldr	r3, [r3, #8]
   19a2c:	681b      	ldr	r3, [r3, #0]
   19a2e:	681a      	ldr	r2, [r3, #0]
   19a30:	6002      	str	r2, [r0, #0]
   19a32:	889b      	ldrh	r3, [r3, #4]
   19a34:	8083      	strh	r3, [r0, #4]
            ba = (unsigned char*)gxmalloc(6);
   19a36:	4601      	mov	r1, r0
            arr_push(&object->chargeReferences, ba);
   19a38:	4628      	mov	r0, r5
   19a3a:	f7f8 f871 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19a3e:	3701      	adds	r7, #1
   19a40:	e7de      	b.n	19a00 <cosem_setAccount+0x10a>
    else if (index == 11)
   19a42:	290b      	cmp	r1, #11
   19a44:	d152      	bne.n	19aec <cosem_setAccount+0x1f6>
        obj_clearCreditChargeConfigurations(&object->creditChargeConfigurations);
   19a46:	353c      	adds	r5, #60	; 0x3c
   19a48:	4628      	mov	r0, r5
   19a4a:	f7fb fbae 	bl	151aa <obj_clearCreditChargeConfigurations>
        ccc = NULL;
   19a4e:	2700      	movs	r7, #0
        for (pos = 0; pos != value->Arr->size; ++pos)
   19a50:	46b8      	mov	r8, r7
   19a52:	68b0      	ldr	r0, [r6, #8]
   19a54:	88c3      	ldrh	r3, [r0, #6]
   19a56:	4543      	cmp	r3, r8
   19a58:	f43f af74 	beq.w	19944 <cosem_setAccount+0x4e>
            ret = va_getByIndex(value->Arr, pos, &it);
   19a5c:	aa01      	add	r2, sp, #4
   19a5e:	4641      	mov	r1, r8
   19a60:	f002 fb07 	bl	1c072 <va_getByIndex>
            if (ret != 0)
   19a64:	4604      	mov	r4, r0
   19a66:	2800      	cmp	r0, #0
   19a68:	f040 810a 	bne.w	19c80 <cosem_setAccount+0x38a>
            ccc = (gxCreditChargeConfiguration*)gxmalloc(sizeof(gxCreditChargeConfiguration));
   19a6c:	200d      	movs	r0, #13
   19a6e:	f7f3 fc41 	bl	d2f4 <malloc>
            if (ccc == NULL)
   19a72:	4607      	mov	r7, r0
   19a74:	2800      	cmp	r0, #0
   19a76:	f000 810a 	beq.w	19c8e <cosem_setAccount+0x398>
            ret = va_getByIndex(it->Arr, 0, &tmp2);
   19a7a:	9b01      	ldr	r3, [sp, #4]
   19a7c:	4621      	mov	r1, r4
   19a7e:	6898      	ldr	r0, [r3, #8]
   19a80:	aa02      	add	r2, sp, #8
   19a82:	f002 faf6 	bl	1c072 <va_getByIndex>
            if (ret != 0)
   19a86:	4604      	mov	r4, r0
   19a88:	2800      	cmp	r0, #0
   19a8a:	f040 80fc 	bne.w	19c86 <cosem_setAccount+0x390>
            memcpy(ccc->creditReference, tmp2->byteArr->data, tmp2->byteArr->size);
   19a8e:	9b02      	ldr	r3, [sp, #8]
   19a90:	6899      	ldr	r1, [r3, #8]
   19a92:	4638      	mov	r0, r7
   19a94:	88ca      	ldrh	r2, [r1, #6]
   19a96:	6809      	ldr	r1, [r1, #0]
   19a98:	230d      	movs	r3, #13
   19a9a:	f004 fbc0 	bl	1e21e <__memcpy_chk>
            ret = va_getByIndex(it->Arr, 1, &tmp2);
   19a9e:	9b01      	ldr	r3, [sp, #4]
   19aa0:	aa02      	add	r2, sp, #8
   19aa2:	6898      	ldr	r0, [r3, #8]
   19aa4:	2101      	movs	r1, #1
   19aa6:	f002 fae4 	bl	1c072 <va_getByIndex>
            if (ret != 0)
   19aaa:	4604      	mov	r4, r0
   19aac:	2800      	cmp	r0, #0
   19aae:	f040 80ea 	bne.w	19c86 <cosem_setAccount+0x390>
            memcpy(ccc->chargeReference, tmp2->byteArr->data, tmp2->byteArr->size);
   19ab2:	9b02      	ldr	r3, [sp, #8]
   19ab4:	6899      	ldr	r1, [r3, #8]
   19ab6:	1db8      	adds	r0, r7, #6
   19ab8:	88ca      	ldrh	r2, [r1, #6]
   19aba:	6809      	ldr	r1, [r1, #0]
   19abc:	2307      	movs	r3, #7
   19abe:	f004 fbae 	bl	1e21e <__memcpy_chk>
            ret = va_getByIndex(it->Arr, 2, &tmp2);
   19ac2:	9b01      	ldr	r3, [sp, #4]
   19ac4:	aa02      	add	r2, sp, #8
   19ac6:	6898      	ldr	r0, [r3, #8]
   19ac8:	2102      	movs	r1, #2
   19aca:	f002 fad2 	bl	1c072 <va_getByIndex>
            if (ret != 0)
   19ace:	4604      	mov	r4, r0
   19ad0:	2800      	cmp	r0, #0
   19ad2:	f040 80d8 	bne.w	19c86 <cosem_setAccount+0x390>
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)var_toInteger(tmp2);
   19ad6:	9802      	ldr	r0, [sp, #8]
   19ad8:	f002 fc45 	bl	1c366 <var_toInteger>
            arr_push(&object->creditChargeConfigurations, ccc);
   19adc:	4639      	mov	r1, r7
            ccc->collectionConfiguration = (DLMS_CREDIT_COLLECTION_CONFIGURATION)var_toInteger(tmp2);
   19ade:	7338      	strb	r0, [r7, #12]
            arr_push(&object->creditChargeConfigurations, ccc);
   19ae0:	4628      	mov	r0, r5
   19ae2:	f7f8 f81d 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19ae6:	f108 0801 	add.w	r8, r8, #1
   19aea:	e7b2      	b.n	19a52 <cosem_setAccount+0x15c>
    else if (index == 12)
   19aec:	290c      	cmp	r1, #12
   19aee:	d144      	bne.n	19b7a <cosem_setAccount+0x284>
        obj_clearTokenGatewayConfigurations(&object->tokenGatewayConfigurations);
   19af0:	3548      	adds	r5, #72	; 0x48
   19af2:	4628      	mov	r0, r5
   19af4:	f7fb fb79 	bl	151ea <obj_clearTokenGatewayConfigurations>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19af8:	f04f 0800 	mov.w	r8, #0
   19afc:	68b0      	ldr	r0, [r6, #8]
   19afe:	88c3      	ldrh	r3, [r0, #6]
   19b00:	4543      	cmp	r3, r8
   19b02:	f43f af1f 	beq.w	19944 <cosem_setAccount+0x4e>
            if ((ret = va_getByIndex(value->Arr, pos, &it)) != 0)
   19b06:	aa01      	add	r2, sp, #4
   19b08:	4641      	mov	r1, r8
   19b0a:	f002 fab2 	bl	1c072 <va_getByIndex>
   19b0e:	4604      	mov	r4, r0
   19b10:	2800      	cmp	r0, #0
   19b12:	f47f af0d 	bne.w	19930 <cosem_setAccount+0x3a>
            gwc = (gxTokenGatewayConfiguration*)gxmalloc(sizeof(gxTokenGatewayConfiguration));
   19b16:	2007      	movs	r0, #7
   19b18:	f7f3 fbec 	bl	d2f4 <malloc>
            if (gwc == NULL)
   19b1c:	4607      	mov	r7, r0
   19b1e:	2800      	cmp	r0, #0
   19b20:	f000 80b5 	beq.w	19c8e <cosem_setAccount+0x398>
            if ((ret = va_getByIndex(it->Arr, 0, &tmp2)) != 0)
   19b24:	9b01      	ldr	r3, [sp, #4]
            memset(gwc->creditReference, 0, 6);
   19b26:	6004      	str	r4, [r0, #0]
   19b28:	8084      	strh	r4, [r0, #4]
            if ((ret = va_getByIndex(it->Arr, 0, &tmp2)) != 0)
   19b2a:	4621      	mov	r1, r4
   19b2c:	6898      	ldr	r0, [r3, #8]
   19b2e:	aa02      	add	r2, sp, #8
   19b30:	f002 fa9f 	bl	1c072 <va_getByIndex>
   19b34:	4604      	mov	r4, r0
   19b36:	2800      	cmp	r0, #0
   19b38:	f47f aefa 	bne.w	19930 <cosem_setAccount+0x3a>
            if (tmp2->byteArr->size == 6)
   19b3c:	9b02      	ldr	r3, [sp, #8]
   19b3e:	689b      	ldr	r3, [r3, #8]
   19b40:	88da      	ldrh	r2, [r3, #6]
   19b42:	2a06      	cmp	r2, #6
   19b44:	d104      	bne.n	19b50 <cosem_setAccount+0x25a>
                memcpy(gwc->creditReference, tmp2->byteArr->data, tmp2->byteArr->size);
   19b46:	681b      	ldr	r3, [r3, #0]
   19b48:	681a      	ldr	r2, [r3, #0]
   19b4a:	603a      	str	r2, [r7, #0]
   19b4c:	889b      	ldrh	r3, [r3, #4]
   19b4e:	80bb      	strh	r3, [r7, #4]
            if ((ret = va_getByIndex(it->Arr, 1, &tmp2)) != 0)
   19b50:	9b01      	ldr	r3, [sp, #4]
   19b52:	aa02      	add	r2, sp, #8
   19b54:	6898      	ldr	r0, [r3, #8]
   19b56:	2101      	movs	r1, #1
   19b58:	f002 fa8b 	bl	1c072 <va_getByIndex>
   19b5c:	4604      	mov	r4, r0
   19b5e:	2800      	cmp	r0, #0
   19b60:	f040 8091 	bne.w	19c86 <cosem_setAccount+0x390>
            gwc->tokenProportion = (unsigned char)var_toInteger(tmp2);
   19b64:	9802      	ldr	r0, [sp, #8]
   19b66:	f002 fbfe 	bl	1c366 <var_toInteger>
            arr_push(&object->tokenGatewayConfigurations, gwc);
   19b6a:	4639      	mov	r1, r7
            gwc->tokenProportion = (unsigned char)var_toInteger(tmp2);
   19b6c:	71b8      	strb	r0, [r7, #6]
            arr_push(&object->tokenGatewayConfigurations, gwc);
   19b6e:	4628      	mov	r0, r5
   19b70:	f7f7 ffd6 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19b74:	f108 0801 	add.w	r8, r8, #1
   19b78:	e7c0      	b.n	19afc <cosem_setAccount+0x206>
    else if (index == 13)
   19b7a:	290d      	cmp	r1, #13
   19b7c:	d112      	bne.n	19ba4 <cosem_setAccount+0x2ae>
        var_init(&tmp);
   19b7e:	a802      	add	r0, sp, #8
   19b80:	f002 f89d 	bl	1bcbe <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   19b84:	68b0      	ldr	r0, [r6, #8]
   19b86:	aa02      	add	r2, sp, #8
   19b88:	2119      	movs	r1, #25
   19b8a:	f7f7 fc75 	bl	11478 <dlms_changeType>
        if (ret == 0)
   19b8e:	4604      	mov	r4, r0
   19b90:	b920      	cbnz	r0, 19b9c <cosem_setAccount+0x2a6>
            time_copy(&object->accountActivationTime, tmp.dateTime);
   19b92:	9904      	ldr	r1, [sp, #16]
   19b94:	f105 0054 	add.w	r0, r5, #84	; 0x54
            time_copy(&object->accountClosureTime, tmp.dateTime);
   19b98:	f7f5 fce9 	bl	f56e <time_copy>
        var_clear(&tmp);
   19b9c:	a802      	add	r0, sp, #8
   19b9e:	f002 f9ea 	bl	1bf76 <var_clear>
   19ba2:	e6c5      	b.n	19930 <cosem_setAccount+0x3a>
    else if (index == 14)
   19ba4:	290e      	cmp	r1, #14
   19ba6:	d10e      	bne.n	19bc6 <cosem_setAccount+0x2d0>
        var_init(&tmp);
   19ba8:	a802      	add	r0, sp, #8
   19baa:	f002 f888 	bl	1bcbe <var_init>
        ret = dlms_changeType(value->byteArr, DLMS_DATA_TYPE_DATETIME, &tmp);
   19bae:	68b0      	ldr	r0, [r6, #8]
   19bb0:	aa02      	add	r2, sp, #8
   19bb2:	2119      	movs	r1, #25
   19bb4:	f7f7 fc60 	bl	11478 <dlms_changeType>
        if (ret == 0)
   19bb8:	4604      	mov	r4, r0
   19bba:	2800      	cmp	r0, #0
   19bbc:	d1ee      	bne.n	19b9c <cosem_setAccount+0x2a6>
            time_copy(&object->accountClosureTime, tmp.dateTime);
   19bbe:	9904      	ldr	r1, [sp, #16]
   19bc0:	f105 0060 	add.w	r0, r5, #96	; 0x60
   19bc4:	e7e8      	b.n	19b98 <cosem_setAccount+0x2a2>
    else if (index == 15)
   19bc6:	290f      	cmp	r1, #15
   19bc8:	d138      	bne.n	19c3c <cosem_setAccount+0x346>
        bb_clear(&object->currency.name);
   19bca:	f100 086c 	add.w	r8, r0, #108	; 0x6c
   19bce:	4640      	mov	r0, r8
   19bd0:	f7f4 fd77 	bl	e6c2 <bb_clear>
        ret = va_getByIndex(value->Arr, 0, &it);
   19bd4:	68b0      	ldr	r0, [r6, #8]
   19bd6:	aa01      	add	r2, sp, #4
   19bd8:	2100      	movs	r1, #0
   19bda:	f002 fa4a 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   19bde:	4604      	mov	r4, r0
   19be0:	2800      	cmp	r0, #0
   19be2:	f47f aea5 	bne.w	19930 <cosem_setAccount+0x3a>
        if (it->strVal != NULL && it->strVal->size != 0)
   19be6:	9b01      	ldr	r3, [sp, #4]
   19be8:	689f      	ldr	r7, [r3, #8]
   19bea:	b157      	cbz	r7, 19c02 <cosem_setAccount+0x30c>
   19bec:	88fb      	ldrh	r3, [r7, #6]
   19bee:	b143      	cbz	r3, 19c02 <cosem_setAccount+0x30c>
            bb_set2(&object->currency.name, it->strVal, 0, bb_size(it->strVal));
   19bf0:	4638      	mov	r0, r7
   19bf2:	f7f4 fba0 	bl	e336 <bb_size>
   19bf6:	4622      	mov	r2, r4
   19bf8:	4603      	mov	r3, r0
   19bfa:	4639      	mov	r1, r7
   19bfc:	4640      	mov	r0, r8
   19bfe:	f7f4 fd1b 	bl	e638 <bb_set2>
        ret = va_getByIndex(value->Arr, 1, &it);
   19c02:	68b0      	ldr	r0, [r6, #8]
   19c04:	aa01      	add	r2, sp, #4
   19c06:	2101      	movs	r1, #1
   19c08:	f002 fa33 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   19c0c:	4604      	mov	r4, r0
   19c0e:	2800      	cmp	r0, #0
   19c10:	f47f ae8e 	bne.w	19930 <cosem_setAccount+0x3a>
        object->currency.scale = (char)var_toInteger(it);
   19c14:	9801      	ldr	r0, [sp, #4]
   19c16:	f002 fba6 	bl	1c366 <var_toInteger>
   19c1a:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
        ret = va_getByIndex(value->Arr, 2, &it);
   19c1e:	68b0      	ldr	r0, [r6, #8]
   19c20:	aa01      	add	r2, sp, #4
   19c22:	2102      	movs	r1, #2
   19c24:	f002 fa25 	bl	1c072 <va_getByIndex>
        if (ret != 0)
   19c28:	4604      	mov	r4, r0
   19c2a:	2800      	cmp	r0, #0
   19c2c:	f47f ae80 	bne.w	19930 <cosem_setAccount+0x3a>
        object->currency.unit = (DLMS_CURRENCY)var_toInteger(it);
   19c30:	9801      	ldr	r0, [sp, #4]
   19c32:	f002 fb98 	bl	1c366 <var_toInteger>
   19c36:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
   19c3a:	e679      	b.n	19930 <cosem_setAccount+0x3a>
    else if (index == 16)
   19c3c:	2910      	cmp	r1, #16
   19c3e:	d104      	bne.n	19c4a <cosem_setAccount+0x354>
        object->lowCreditThreshold = var_toInteger(value);
   19c40:	4610      	mov	r0, r2
   19c42:	f002 fb90 	bl	1c366 <var_toInteger>
   19c46:	67e8      	str	r0, [r5, #124]	; 0x7c
   19c48:	e67c      	b.n	19944 <cosem_setAccount+0x4e>
    else if (index == 17)
   19c4a:	2911      	cmp	r1, #17
   19c4c:	d105      	bne.n	19c5a <cosem_setAccount+0x364>
        object->nextCreditAvailableThreshold = var_toInteger(value);
   19c4e:	4610      	mov	r0, r2
   19c50:	f002 fb89 	bl	1c366 <var_toInteger>
   19c54:	f8c5 0080 	str.w	r0, [r5, #128]	; 0x80
   19c58:	e674      	b.n	19944 <cosem_setAccount+0x4e>
    else if (index == 18)
   19c5a:	2912      	cmp	r1, #18
   19c5c:	d105      	bne.n	19c6a <cosem_setAccount+0x374>
        object->maxProvision = (uint16_t)var_toInteger(value);
   19c5e:	4610      	mov	r0, r2
   19c60:	f002 fb81 	bl	1c366 <var_toInteger>
   19c64:	f8a5 0084 	strh.w	r0, [r5, #132]	; 0x84
   19c68:	e66c      	b.n	19944 <cosem_setAccount+0x4e>
    else if (index == 19)
   19c6a:	2913      	cmp	r1, #19
   19c6c:	f47f aeac 	bne.w	199c8 <cosem_setAccount+0xd2>
        object->maxProvisionPeriod = var_toInteger(value);
   19c70:	4610      	mov	r0, r2
   19c72:	f002 fb78 	bl	1c366 <var_toInteger>
   19c76:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   19c7a:	e663      	b.n	19944 <cosem_setAccount+0x4e>
            return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   19c7c:	2403      	movs	r4, #3
   19c7e:	e657      	b.n	19930 <cosem_setAccount+0x3a>
        if (ret != 0 && ccc != NULL)
   19c80:	2f00      	cmp	r7, #0
   19c82:	f43f ae55 	beq.w	19930 <cosem_setAccount+0x3a>
            gxfree(gwc);
   19c86:	4638      	mov	r0, r7
   19c88:	f7f3 fb3c 	bl	d304 <free>
   19c8c:	e650      	b.n	19930 <cosem_setAccount+0x3a>
                ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19c8e:	f44f 7482 	mov.w	r4, #260	; 0x104
        if (ret != 0 && gwc != NULL)
   19c92:	e64d      	b.n	19930 <cosem_setAccount+0x3a>

00019c94 <cosem_setImageTransfer>:
    if (index == 2)
   19c94:	2902      	cmp	r1, #2
{
   19c96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c9a:	4604      	mov	r4, r0
   19c9c:	4617      	mov	r7, r2
    if (index == 2)
   19c9e:	d108      	bne.n	19cb2 <cosem_setImageTransfer+0x1e>
        object->imageBlockSize = var_toInteger(value);
   19ca0:	4610      	mov	r0, r2
   19ca2:	f002 fb60 	bl	1c366 <var_toInteger>
   19ca6:	6120      	str	r0, [r4, #16]
    int pos, ret = 0;
   19ca8:	2400      	movs	r4, #0
}
   19caa:	4620      	mov	r0, r4
   19cac:	b003      	add	sp, #12
   19cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (index == 3)
   19cb2:	2903      	cmp	r1, #3
   19cb4:	d10c      	bne.n	19cd0 <cosem_setImageTransfer+0x3c>
        ba_clear(&object->imageTransferredBlocksStatus);
   19cb6:	3414      	adds	r4, #20
   19cb8:	4620      	mov	r0, r4
   19cba:	f7f4 faa8 	bl	e20e <ba_clear>
        if (value->bitArr != NULL)
   19cbe:	68bb      	ldr	r3, [r7, #8]
   19cc0:	2b00      	cmp	r3, #0
   19cc2:	d0f1      	beq.n	19ca8 <cosem_setImageTransfer+0x14>
            ba_copy(&object->imageTransferredBlocksStatus, value->bitArr->data, (uint16_t)value->bitArr->size);
   19cc4:	88da      	ldrh	r2, [r3, #6]
   19cc6:	6819      	ldr	r1, [r3, #0]
   19cc8:	4620      	mov	r0, r4
   19cca:	f7f4 faab 	bl	e224 <ba_copy>
   19cce:	e7eb      	b.n	19ca8 <cosem_setImageTransfer+0x14>
    else if (index == 4)
   19cd0:	2904      	cmp	r1, #4
   19cd2:	d104      	bne.n	19cde <cosem_setImageTransfer+0x4a>
        object->imageFirstNotTransferredBlockNumber = var_toInteger(value);
   19cd4:	4610      	mov	r0, r2
   19cd6:	f002 fb46 	bl	1c366 <var_toInteger>
   19cda:	61e0      	str	r0, [r4, #28]
   19cdc:	e7e4      	b.n	19ca8 <cosem_setImageTransfer+0x14>
    else if (index == 5)
   19cde:	2905      	cmp	r1, #5
   19ce0:	d108      	bne.n	19cf4 <cosem_setImageTransfer+0x60>
        object->imageTransferEnabled = var_toInteger(value) == 0 ? 0 : 1;
   19ce2:	4610      	mov	r0, r2
   19ce4:	f002 fb3f 	bl	1c366 <var_toInteger>
   19ce8:	3800      	subs	r0, #0
   19cea:	bf18      	it	ne
   19cec:	2001      	movne	r0, #1
   19cee:	f884 0020 	strb.w	r0, [r4, #32]
   19cf2:	e7d9      	b.n	19ca8 <cosem_setImageTransfer+0x14>
    else if (index == 6)
   19cf4:	2906      	cmp	r1, #6
   19cf6:	d105      	bne.n	19d04 <cosem_setImageTransfer+0x70>
        object->imageTransferStatus = (DLMS_IMAGE_TRANSFER_STATUS)var_toInteger(value);
   19cf8:	4610      	mov	r0, r2
   19cfa:	f002 fb34 	bl	1c366 <var_toInteger>
   19cfe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
   19d02:	e7d1      	b.n	19ca8 <cosem_setImageTransfer+0x14>
    else if (index == 7)
   19d04:	2907      	cmp	r1, #7
   19d06:	d161      	bne.n	19dcc <cosem_setImageTransfer+0x138>
        arr_clear(&object->imageActivateInfo);
   19d08:	f100 0624 	add.w	r6, r0, #36	; 0x24
   19d0c:	4630      	mov	r0, r6
   19d0e:	f7f7 ff1c 	bl	11b4a <arr_clear>
        if (value->Arr != NULL)
   19d12:	68bb      	ldr	r3, [r7, #8]
   19d14:	2b00      	cmp	r3, #0
   19d16:	d0c7      	beq.n	19ca8 <cosem_setImageTransfer+0x14>
            item = NULL;
   19d18:	2500      	movs	r5, #0
            for (pos = 0; pos != value->Arr->size; ++pos)
   19d1a:	46a9      	mov	r9, r5
   19d1c:	e051      	b.n	19dc2 <cosem_setImageTransfer+0x12e>
                ret = va_getByIndex(value->Arr, pos, &it);
   19d1e:	466a      	mov	r2, sp
   19d20:	4649      	mov	r1, r9
   19d22:	f002 f9a6 	bl	1c072 <va_getByIndex>
                if (ret != 0)
   19d26:	4604      	mov	r4, r0
   19d28:	2800      	cmp	r0, #0
   19d2a:	d155      	bne.n	19dd8 <cosem_setImageTransfer+0x144>
                item = (gxImageActivateInfo*)gxmalloc(sizeof(gxImageActivateInfo));
   19d2c:	201c      	movs	r0, #28
   19d2e:	f7f3 fae1 	bl	d2f4 <malloc>
                if (item == NULL)
   19d32:	4605      	mov	r5, r0
   19d34:	2800      	cmp	r0, #0
   19d36:	d04c      	beq.n	19dd2 <cosem_setImageTransfer+0x13e>
                BYTE_BUFFER_INIT(&item->identification);
   19d38:	f100 0b04 	add.w	fp, r0, #4
   19d3c:	4658      	mov	r0, fp
                BYTE_BUFFER_INIT(&item->signature);
   19d3e:	f105 0a10 	add.w	sl, r5, #16
                BYTE_BUFFER_INIT(&item->identification);
   19d42:	f7f4 fafb 	bl	e33c <bb_init>
                BYTE_BUFFER_INIT(&item->signature);
   19d46:	4650      	mov	r0, sl
   19d48:	f7f4 faf8 	bl	e33c <bb_init>
                ret = va_getByIndex(it->Arr, 0, &tmp);
   19d4c:	9b00      	ldr	r3, [sp, #0]
   19d4e:	4621      	mov	r1, r4
   19d50:	6898      	ldr	r0, [r3, #8]
   19d52:	aa01      	add	r2, sp, #4
   19d54:	f002 f98d 	bl	1c072 <va_getByIndex>
                if (ret != 0)
   19d58:	4604      	mov	r4, r0
   19d5a:	2800      	cmp	r0, #0
   19d5c:	d13f      	bne.n	19dde <cosem_setImageTransfer+0x14a>
                item->size = var_toInteger(tmp);
   19d5e:	9801      	ldr	r0, [sp, #4]
   19d60:	f002 fb01 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(it->Arr, 1, &tmp);
   19d64:	9b00      	ldr	r3, [sp, #0]
                item->size = var_toInteger(tmp);
   19d66:	6028      	str	r0, [r5, #0]
                ret = va_getByIndex(it->Arr, 1, &tmp);
   19d68:	aa01      	add	r2, sp, #4
   19d6a:	6898      	ldr	r0, [r3, #8]
   19d6c:	2101      	movs	r1, #1
   19d6e:	f002 f980 	bl	1c072 <va_getByIndex>
                if (ret != 0)
   19d72:	4604      	mov	r4, r0
   19d74:	bb98      	cbnz	r0, 19dde <cosem_setImageTransfer+0x14a>
                bb_set2(&item->identification, tmp->byteArr, 0, bb_size(tmp->byteArr));
   19d76:	9b01      	ldr	r3, [sp, #4]
   19d78:	f8d3 8008 	ldr.w	r8, [r3, #8]
   19d7c:	4640      	mov	r0, r8
   19d7e:	f7f4 fada 	bl	e336 <bb_size>
   19d82:	4622      	mov	r2, r4
   19d84:	4603      	mov	r3, r0
   19d86:	4641      	mov	r1, r8
   19d88:	4658      	mov	r0, fp
   19d8a:	f7f4 fc55 	bl	e638 <bb_set2>
                ret = va_getByIndex(it->Arr, 2, &tmp);
   19d8e:	9b00      	ldr	r3, [sp, #0]
   19d90:	aa01      	add	r2, sp, #4
   19d92:	6898      	ldr	r0, [r3, #8]
   19d94:	2102      	movs	r1, #2
   19d96:	f002 f96c 	bl	1c072 <va_getByIndex>
                if (ret != 0)
   19d9a:	4604      	mov	r4, r0
   19d9c:	b9f8      	cbnz	r0, 19dde <cosem_setImageTransfer+0x14a>
                bb_set2(&item->signature, tmp->byteArr, 0, bb_size(tmp->byteArr));
   19d9e:	9b01      	ldr	r3, [sp, #4]
   19da0:	f8d3 8008 	ldr.w	r8, [r3, #8]
   19da4:	4640      	mov	r0, r8
   19da6:	f7f4 fac6 	bl	e336 <bb_size>
   19daa:	4622      	mov	r2, r4
   19dac:	4603      	mov	r3, r0
   19dae:	4641      	mov	r1, r8
   19db0:	4650      	mov	r0, sl
   19db2:	f7f4 fc41 	bl	e638 <bb_set2>
                arr_push(&object->imageActivateInfo, item);
   19db6:	4629      	mov	r1, r5
   19db8:	4630      	mov	r0, r6
   19dba:	f7f7 feb1 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   19dbe:	f109 0901 	add.w	r9, r9, #1
   19dc2:	68b8      	ldr	r0, [r7, #8]
   19dc4:	88c3      	ldrh	r3, [r0, #6]
   19dc6:	454b      	cmp	r3, r9
   19dc8:	d1a9      	bne.n	19d1e <cosem_setImageTransfer+0x8a>
   19dca:	e76d      	b.n	19ca8 <cosem_setImageTransfer+0x14>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   19dcc:	f44f 7481 	mov.w	r4, #258	; 0x102
   19dd0:	e76b      	b.n	19caa <cosem_setImageTransfer+0x16>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19dd2:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   19dd6:	e768      	b.n	19caa <cosem_setImageTransfer+0x16>
            if (ret != 0 && item != NULL)
   19dd8:	2d00      	cmp	r5, #0
   19dda:	f43f af66 	beq.w	19caa <cosem_setImageTransfer+0x16>
                gxfree(item);
   19dde:	4628      	mov	r0, r5
   19de0:	f7f3 fa90 	bl	d304 <free>
   19de4:	e761      	b.n	19caa <cosem_setImageTransfer+0x16>

00019de6 <setCaptureObjects>:
{
   19de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19dea:	4681      	mov	r9, r0
   19dec:	b085      	sub	sp, #20
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   19dee:	4608      	mov	r0, r1
{
   19df0:	460d      	mov	r5, r1
   19df2:	4617      	mov	r7, r2
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   19df4:	f7fb fa2e 	bl	15254 <obj_clearProfileGenericCaptureObjects>
   19df8:	4604      	mov	r4, r0
   19dfa:	bb20      	cbnz	r0, 19e46 <setCaptureObjects+0x60>
    arr_capacity(objects, value->Arr->size);
   19dfc:	68bb      	ldr	r3, [r7, #8]
   19dfe:	4628      	mov	r0, r5
   19e00:	88d9      	ldrh	r1, [r3, #6]
   19e02:	f7f7 fe67 	bl	11ad4 <arr_capacity>
    if (value->Arr != NULL)
   19e06:	68bb      	ldr	r3, [r7, #8]
   19e08:	2b00      	cmp	r3, #0
   19e0a:	f040 8081 	bne.w	19f10 <setCaptureObjects+0x12a>
    if ((ret = obj_clearProfileGenericCaptureObjects(objects)) != DLMS_ERROR_CODE_OK)
   19e0e:	2400      	movs	r4, #0
    arr_capacity(objects, objects->size);
   19e10:	88e9      	ldrh	r1, [r5, #6]
   19e12:	4628      	mov	r0, r5
   19e14:	f7f7 fe5e 	bl	11ad4 <arr_capacity>
    return ret;
   19e18:	e015      	b.n	19e46 <setCaptureObjects+0x60>
                ret = cosem_createObject(type, &obj);
   19e1a:	a901      	add	r1, sp, #4
   19e1c:	4630      	mov	r0, r6
   19e1e:	f7e8 f977 	bl	2110 <cosem_createObject>
                if (ret != DLMS_ERROR_CODE_OK)
   19e22:	4604      	mov	r4, r0
   19e24:	b978      	cbnz	r0, 19e46 <setCaptureObjects+0x60>
                ret = cosem_setLogicalName(obj, tmp2->byteArr->data);
   19e26:	9b03      	ldr	r3, [sp, #12]
   19e28:	9801      	ldr	r0, [sp, #4]
   19e2a:	689b      	ldr	r3, [r3, #8]
   19e2c:	6819      	ldr	r1, [r3, #0]
   19e2e:	f7f5 f849 	bl	eec4 <cosem_setLogicalName>
                if (ret != DLMS_ERROR_CODE_OK)
   19e32:	4604      	mov	r4, r0
   19e34:	b938      	cbnz	r0, 19e46 <setCaptureObjects+0x60>
                ret = oa_push(&settings->releasedObjects, obj);
   19e36:	9901      	ldr	r1, [sp, #4]
   19e38:	f109 00e4 	add.w	r0, r9, #228	; 0xe4
   19e3c:	f001 fe47 	bl	1bace <oa_push>
                if (ret != DLMS_ERROR_CODE_OK)
   19e40:	4604      	mov	r4, r0
   19e42:	2800      	cmp	r0, #0
   19e44:	d05b      	beq.n	19efe <setCaptureObjects+0x118>
}
   19e46:	4620      	mov	r0, r4
   19e48:	b005      	add	sp, #20
   19e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ret = va_getByIndex(tmp->Arr, 2, &tmp2);
   19e4e:	9b02      	ldr	r3, [sp, #8]
   19e50:	aa03      	add	r2, sp, #12
   19e52:	6898      	ldr	r0, [r3, #8]
   19e54:	2102      	movs	r1, #2
   19e56:	f002 f90c 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19e5a:	4604      	mov	r4, r0
   19e5c:	2800      	cmp	r0, #0
   19e5e:	d1f2      	bne.n	19e46 <setCaptureObjects+0x60>
            co->attributeIndex = (unsigned char)var_toInteger(tmp2);
   19e60:	9803      	ldr	r0, [sp, #12]
   19e62:	f002 fa80 	bl	1c366 <var_toInteger>
            ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   19e66:	9b02      	ldr	r3, [sp, #8]
            co->attributeIndex = (unsigned char)var_toInteger(tmp2);
   19e68:	7030      	strb	r0, [r6, #0]
            ret = va_getByIndex(tmp->Arr, 3, &tmp2);
   19e6a:	6898      	ldr	r0, [r3, #8]
   19e6c:	aa03      	add	r2, sp, #12
   19e6e:	2103      	movs	r1, #3
   19e70:	f002 f8ff 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19e74:	4604      	mov	r4, r0
   19e76:	2800      	cmp	r0, #0
   19e78:	d1e5      	bne.n	19e46 <setCaptureObjects+0x60>
            co->dataIndex = (unsigned char)var_toInteger(tmp2);
   19e7a:	9803      	ldr	r0, [sp, #12]
   19e7c:	f002 fa73 	bl	1c366 <var_toInteger>
   19e80:	b2c0      	uxtb	r0, r0
   19e82:	8070      	strh	r0, [r6, #2]
            arr_push(objects, key_init(obj, co));
   19e84:	4631      	mov	r1, r6
   19e86:	9801      	ldr	r0, [sp, #4]
   19e88:	f7fb f953 	bl	15132 <key_init>
   19e8c:	4601      	mov	r1, r0
   19e8e:	4628      	mov	r0, r5
   19e90:	f7f7 fe46 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19e94:	f108 0801 	add.w	r8, r8, #1
   19e98:	68b8      	ldr	r0, [r7, #8]
   19e9a:	88c3      	ldrh	r3, [r0, #6]
   19e9c:	4598      	cmp	r8, r3
   19e9e:	d0b6      	beq.n	19e0e <setCaptureObjects+0x28>
            ret = va_getByIndex(value->Arr, pos, &tmp);
   19ea0:	aa02      	add	r2, sp, #8
   19ea2:	4641      	mov	r1, r8
   19ea4:	f002 f8e5 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19ea8:	4604      	mov	r4, r0
   19eaa:	2800      	cmp	r0, #0
   19eac:	d1b0      	bne.n	19e10 <setCaptureObjects+0x2a>
            if (tmp->Arr->size != 4)
   19eae:	9b02      	ldr	r3, [sp, #8]
   19eb0:	6898      	ldr	r0, [r3, #8]
   19eb2:	88c3      	ldrh	r3, [r0, #6]
   19eb4:	2b04      	cmp	r3, #4
   19eb6:	d12d      	bne.n	19f14 <setCaptureObjects+0x12e>
            ret = va_getByIndex(tmp->Arr, 0, &tmp2);
   19eb8:	4621      	mov	r1, r4
   19eba:	aa03      	add	r2, sp, #12
   19ebc:	f002 f8d9 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19ec0:	4604      	mov	r4, r0
   19ec2:	2800      	cmp	r0, #0
   19ec4:	d1a4      	bne.n	19e10 <setCaptureObjects+0x2a>
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   19ec6:	9803      	ldr	r0, [sp, #12]
   19ec8:	f002 fa4d 	bl	1c366 <var_toInteger>
            ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   19ecc:	9b02      	ldr	r3, [sp, #8]
            type = (DLMS_OBJECT_TYPE)var_toInteger(tmp2);
   19ece:	b286      	uxth	r6, r0
            ret = va_getByIndex(tmp->Arr, 1, &tmp2);
   19ed0:	aa03      	add	r2, sp, #12
   19ed2:	6898      	ldr	r0, [r3, #8]
   19ed4:	2101      	movs	r1, #1
   19ed6:	f002 f8cc 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   19eda:	4604      	mov	r4, r0
   19edc:	2800      	cmp	r0, #0
   19ede:	d197      	bne.n	19e10 <setCaptureObjects+0x2a>
            ret = oa_findByLN(&settings->objects, type, tmp2->byteArr->data, &obj);
   19ee0:	9b03      	ldr	r3, [sp, #12]
   19ee2:	689a      	ldr	r2, [r3, #8]
   19ee4:	4631      	mov	r1, r6
   19ee6:	6812      	ldr	r2, [r2, #0]
   19ee8:	ab01      	add	r3, sp, #4
   19eea:	f109 0098 	add.w	r0, r9, #152	; 0x98
   19eee:	f001 fe7d 	bl	1bbec <oa_findByLN>
            if (ret != DLMS_ERROR_CODE_OK)
   19ef2:	4604      	mov	r4, r0
   19ef4:	2800      	cmp	r0, #0
   19ef6:	d18b      	bne.n	19e10 <setCaptureObjects+0x2a>
            if (obj == NULL)
   19ef8:	9b01      	ldr	r3, [sp, #4]
   19efa:	2b00      	cmp	r3, #0
   19efc:	d08d      	beq.n	19e1a <setCaptureObjects+0x34>
            co = (gxTarget*)gxmalloc(sizeof(gxTarget));
   19efe:	2004      	movs	r0, #4
   19f00:	f7f3 f9f8 	bl	d2f4 <malloc>
            if (co == NULL)
   19f04:	4606      	mov	r6, r0
   19f06:	2800      	cmp	r0, #0
   19f08:	d1a1      	bne.n	19e4e <setCaptureObjects+0x68>
                ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19f0a:	f44f 7482 	mov.w	r4, #260	; 0x104
   19f0e:	e77f      	b.n	19e10 <setCaptureObjects+0x2a>
        for (pos = 0; pos != value->Arr->size; ++pos)
   19f10:	46a0      	mov	r8, r4
   19f12:	e7c1      	b.n	19e98 <setCaptureObjects+0xb2>
                ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   19f14:	f44f 7481 	mov.w	r4, #258	; 0x102
   19f18:	e77a      	b.n	19e10 <setCaptureObjects+0x2a>

00019f1a <cosem_setGsmDiagnostic>:
#endif //DLMS_IGNORE_PROFILE_GENERIC
#ifndef DLMS_IGNORE_GSM_DIAGNOSTIC
int cosem_setGsmDiagnostic(gxGsmDiagnostic* object, unsigned char index, dlmsVARIANT* value)
{
   19f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f1e:	3902      	subs	r1, #2
   19f20:	b086      	sub	sp, #24
   19f22:	4606      	mov	r6, r0
   19f24:	4615      	mov	r5, r2
   19f26:	2906      	cmp	r1, #6
   19f28:	f200 8127 	bhi.w	1a17a <cosem_setGsmDiagnostic+0x260>
   19f2c:	e8df f011 	tbh	[pc, r1, lsl #1]
   19f30:	00500007 	.word	0x00500007
   19f34:	005a0055 	.word	0x005a0055
   19f38:	00bc005f 	.word	0x00bc005f
   19f3c:	00ff      	.short	0x00ff
    dlmsVARIANT* tmp, * it;
    gxAdjacentCell* ac;
    switch (index)
    {
    case 2:
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   19f3e:	7813      	ldrb	r3, [r2, #0]
   19f40:	2b09      	cmp	r3, #9
   19f42:	d121      	bne.n	19f88 <cosem_setGsmDiagnostic+0x6e>
        {
            if (object->operatorName != NULL)
   19f44:	6900      	ldr	r0, [r0, #16]
   19f46:	b118      	cbz	r0, 19f50 <cosem_setGsmDiagnostic+0x36>
            {
                gxfree(object->operatorName);
   19f48:	f7f3 f9dc 	bl	d304 <free>
                object->operatorName = NULL;
   19f4c:	2300      	movs	r3, #0
   19f4e:	6133      	str	r3, [r6, #16]
            }

            if (value->byteArr != NULL && bb_size(value->byteArr) != 0)
   19f50:	68a8      	ldr	r0, [r5, #8]
   19f52:	b908      	cbnz	r0, 19f58 <cosem_setGsmDiagnostic+0x3e>
    int ret = 0, pos;
   19f54:	2400      	movs	r4, #0
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        }
        break;
    case 3:
        object->status = (DLMS_GSM_STATUS)var_toInteger(value);
        break;
   19f56:	e037      	b.n	19fc8 <cosem_setGsmDiagnostic+0xae>
            if (value->byteArr != NULL && bb_size(value->byteArr) != 0)
   19f58:	f7f4 f9ed 	bl	e336 <bb_size>
   19f5c:	2800      	cmp	r0, #0
   19f5e:	d0f9      	beq.n	19f54 <cosem_setGsmDiagnostic+0x3a>
                object->operatorName = (char*)gxmalloc(value->byteArr->size + 1);
   19f60:	68ab      	ldr	r3, [r5, #8]
   19f62:	88d8      	ldrh	r0, [r3, #6]
   19f64:	3001      	adds	r0, #1
   19f66:	f7f3 f9c5 	bl	d2f4 <malloc>
   19f6a:	4604      	mov	r4, r0
   19f6c:	6130      	str	r0, [r6, #16]
                if (object->operatorName == NULL)
   19f6e:	b910      	cbnz	r0, 19f76 <cosem_setGsmDiagnostic+0x5c>
                    break;
                }
                ac = (gxAdjacentCell*)gxmalloc(sizeof(gxAdjacentCell));
                if (ac == NULL)
                {
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   19f70:	f44f 7482 	mov.w	r4, #260	; 0x104
                    break;
                }
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
                arr_push(&object->adjacentCells, ac);
            }
            if (ret != 0 && ac != NULL)
   19f74:	e028      	b.n	19fc8 <cosem_setGsmDiagnostic+0xae>
                memcpy(object->operatorName, value->strVal, value->byteArr->size);
   19f76:	68ad      	ldr	r5, [r5, #8]
   19f78:	88ea      	ldrh	r2, [r5, #6]
   19f7a:	4629      	mov	r1, r5
   19f7c:	f004 f941 	bl	1e202 <memcpy>
                object->operatorName[value->byteArr->size] = '\0';
   19f80:	88eb      	ldrh	r3, [r5, #6]
   19f82:	2000      	movs	r0, #0
   19f84:	54e0      	strb	r0, [r4, r3]
   19f86:	e7e5      	b.n	19f54 <cosem_setGsmDiagnostic+0x3a>
        else if (value->vt == DLMS_DATA_TYPE_STRING)
   19f88:	2b0a      	cmp	r3, #10
   19f8a:	f040 80f6 	bne.w	1a17a <cosem_setGsmDiagnostic+0x260>
            if (object->operatorName != NULL)
   19f8e:	6900      	ldr	r0, [r0, #16]
   19f90:	b108      	cbz	r0, 19f96 <cosem_setGsmDiagnostic+0x7c>
                gxfree(object->operatorName);
   19f92:	f7f3 f9b7 	bl	d304 <free>
            if (value->strVal != NULL && bb_size(value->strVal) != 0)
   19f96:	68a8      	ldr	r0, [r5, #8]
            object->operatorName = NULL;
   19f98:	2400      	movs	r4, #0
   19f9a:	6134      	str	r4, [r6, #16]
            if (value->strVal != NULL && bb_size(value->strVal) != 0)
   19f9c:	2800      	cmp	r0, #0
   19f9e:	d0d9      	beq.n	19f54 <cosem_setGsmDiagnostic+0x3a>
   19fa0:	f7f4 f9c9 	bl	e336 <bb_size>
   19fa4:	2800      	cmp	r0, #0
   19fa6:	d0d5      	beq.n	19f54 <cosem_setGsmDiagnostic+0x3a>
                object->operatorName = (char*)gxmalloc(value->strVal->size + 1);
   19fa8:	68ab      	ldr	r3, [r5, #8]
   19faa:	88d8      	ldrh	r0, [r3, #6]
   19fac:	3001      	adds	r0, #1
   19fae:	f7f3 f9a1 	bl	d2f4 <malloc>
   19fb2:	4607      	mov	r7, r0
   19fb4:	6130      	str	r0, [r6, #16]
                if (object->operatorName == NULL)
   19fb6:	2800      	cmp	r0, #0
   19fb8:	d0da      	beq.n	19f70 <cosem_setGsmDiagnostic+0x56>
                memcpy(object->operatorName, value->strVal, value->strVal->size);
   19fba:	68ad      	ldr	r5, [r5, #8]
   19fbc:	88ea      	ldrh	r2, [r5, #6]
   19fbe:	4629      	mov	r1, r5
   19fc0:	f004 f91f 	bl	1e202 <memcpy>
                object->operatorName[value->strVal->size] = '\0';
   19fc4:	88eb      	ldrh	r3, [r5, #6]
   19fc6:	54fc      	strb	r4, [r7, r3]
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   19fc8:	4620      	mov	r0, r4
   19fca:	b006      	add	sp, #24
   19fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        object->status = (DLMS_GSM_STATUS)var_toInteger(value);
   19fd0:	4610      	mov	r0, r2
   19fd2:	f002 f9c8 	bl	1c366 <var_toInteger>
   19fd6:	7530      	strb	r0, [r6, #20]
   19fd8:	e7bc      	b.n	19f54 <cosem_setGsmDiagnostic+0x3a>
        object->circuitSwitchStatus = (DLMS_GSM_CIRCUIT_SWITCH_STATUS)var_toInteger(value);
   19fda:	4610      	mov	r0, r2
   19fdc:	f002 f9c3 	bl	1c366 <var_toInteger>
   19fe0:	7570      	strb	r0, [r6, #21]
        break;
   19fe2:	e7b7      	b.n	19f54 <cosem_setGsmDiagnostic+0x3a>
        object->packetSwitchStatus = (DLMS_GSM_PACKET_SWITCH_STATUS)var_toInteger(value);
   19fe4:	4610      	mov	r0, r2
   19fe6:	f002 f9be 	bl	1c366 <var_toInteger>
   19fea:	75b0      	strb	r0, [r6, #22]
        break;
   19fec:	e7b2      	b.n	19f54 <cosem_setGsmDiagnostic+0x3a>
        if (value != NULL && value->vt == DLMS_DATA_TYPE_STRUCTURE)
   19fee:	2a00      	cmp	r2, #0
   19ff0:	d0b0      	beq.n	19f54 <cosem_setGsmDiagnostic+0x3a>
   19ff2:	7817      	ldrb	r7, [r2, #0]
   19ff4:	2f02      	cmp	r7, #2
   19ff6:	d1ad      	bne.n	19f54 <cosem_setGsmDiagnostic+0x3a>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != 0)
   19ff8:	68a8      	ldr	r0, [r5, #8]
   19ffa:	aa01      	add	r2, sp, #4
   19ffc:	2100      	movs	r1, #0
   19ffe:	f002 f838 	bl	1c072 <va_getByIndex>
   1a002:	4604      	mov	r4, r0
   1a004:	2800      	cmp	r0, #0
   1a006:	d1df      	bne.n	19fc8 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.cellId = (uint32_t)var_toInteger(tmp);
   1a008:	9801      	ldr	r0, [sp, #4]
   1a00a:	f002 f9ac 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   1a00e:	aa01      	add	r2, sp, #4
            object->cellInfo.cellId = (uint32_t)var_toInteger(tmp);
   1a010:	61b0      	str	r0, [r6, #24]
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   1a012:	2101      	movs	r1, #1
   1a014:	68a8      	ldr	r0, [r5, #8]
   1a016:	f002 f82c 	bl	1c072 <va_getByIndex>
   1a01a:	4604      	mov	r4, r0
   1a01c:	2800      	cmp	r0, #0
   1a01e:	d1d3      	bne.n	19fc8 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.locationId = (uint16_t)var_toInteger(tmp);
   1a020:	9801      	ldr	r0, [sp, #4]
   1a022:	f002 f9a0 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != 0)
   1a026:	aa01      	add	r2, sp, #4
            object->cellInfo.locationId = (uint16_t)var_toInteger(tmp);
   1a028:	83b0      	strh	r0, [r6, #28]
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != 0)
   1a02a:	4639      	mov	r1, r7
   1a02c:	68a8      	ldr	r0, [r5, #8]
   1a02e:	f002 f820 	bl	1c072 <va_getByIndex>
   1a032:	4604      	mov	r4, r0
   1a034:	2800      	cmp	r0, #0
   1a036:	d1c7      	bne.n	19fc8 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.signalQuality = (unsigned char)var_toInteger(tmp);
   1a038:	9801      	ldr	r0, [sp, #4]
   1a03a:	f002 f994 	bl	1c366 <var_toInteger>
   1a03e:	77b0      	strb	r0, [r6, #30]
            if ((ret = va_getByIndex(value->Arr, 3, &tmp)) != 0)
   1a040:	68a8      	ldr	r0, [r5, #8]
   1a042:	aa01      	add	r2, sp, #4
   1a044:	2103      	movs	r1, #3
   1a046:	f002 f814 	bl	1c072 <va_getByIndex>
   1a04a:	4604      	mov	r4, r0
   1a04c:	2800      	cmp	r0, #0
   1a04e:	d1bb      	bne.n	19fc8 <cosem_setGsmDiagnostic+0xae>
            object->cellInfo.ber = (unsigned char)var_toInteger(tmp);
   1a050:	9801      	ldr	r0, [sp, #4]
   1a052:	f002 f988 	bl	1c366 <var_toInteger>
            if (object->base.version != 0)
   1a056:	78b3      	ldrb	r3, [r6, #2]
            object->cellInfo.ber = (unsigned char)var_toInteger(tmp);
   1a058:	77f0      	strb	r0, [r6, #31]
            if (object->base.version != 0)
   1a05a:	2b00      	cmp	r3, #0
   1a05c:	f43f af7a 	beq.w	19f54 <cosem_setGsmDiagnostic+0x3a>
                if ((ret = va_getByIndex(value->Arr, 4, &tmp)) != 0)
   1a060:	68a8      	ldr	r0, [r5, #8]
   1a062:	aa01      	add	r2, sp, #4
   1a064:	2104      	movs	r1, #4
   1a066:	f002 f804 	bl	1c072 <va_getByIndex>
   1a06a:	4604      	mov	r4, r0
   1a06c:	2800      	cmp	r0, #0
   1a06e:	d1ab      	bne.n	19fc8 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.mobileCountryCode = (uint16_t)var_toInteger(tmp);
   1a070:	9801      	ldr	r0, [sp, #4]
   1a072:	f002 f978 	bl	1c366 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 5, &tmp)) != 0)
   1a076:	aa01      	add	r2, sp, #4
                object->cellInfo.mobileCountryCode = (uint16_t)var_toInteger(tmp);
   1a078:	8430      	strh	r0, [r6, #32]
                if ((ret = va_getByIndex(value->Arr, 5, &tmp)) != 0)
   1a07a:	2105      	movs	r1, #5
   1a07c:	68a8      	ldr	r0, [r5, #8]
   1a07e:	f001 fff8 	bl	1c072 <va_getByIndex>
   1a082:	4604      	mov	r4, r0
   1a084:	2800      	cmp	r0, #0
   1a086:	d19f      	bne.n	19fc8 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.mobileNetworkCode = (uint16_t)var_toInteger(tmp);
   1a088:	9801      	ldr	r0, [sp, #4]
   1a08a:	f002 f96c 	bl	1c366 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 6, &tmp)) != 0)
   1a08e:	aa01      	add	r2, sp, #4
                object->cellInfo.mobileNetworkCode = (uint16_t)var_toInteger(tmp);
   1a090:	8470      	strh	r0, [r6, #34]	; 0x22
                if ((ret = va_getByIndex(value->Arr, 6, &tmp)) != 0)
   1a092:	2106      	movs	r1, #6
   1a094:	68a8      	ldr	r0, [r5, #8]
   1a096:	f001 ffec 	bl	1c072 <va_getByIndex>
   1a09a:	4604      	mov	r4, r0
   1a09c:	2800      	cmp	r0, #0
   1a09e:	d193      	bne.n	19fc8 <cosem_setGsmDiagnostic+0xae>
                object->cellInfo.channelNumber = tmp->ulVal;
   1a0a0:	9b01      	ldr	r3, [sp, #4]
   1a0a2:	689b      	ldr	r3, [r3, #8]
   1a0a4:	6273      	str	r3, [r6, #36]	; 0x24
   1a0a6:	e78f      	b.n	19fc8 <cosem_setGsmDiagnostic+0xae>
        arr_clear(&object->adjacentCells);
   1a0a8:	3628      	adds	r6, #40	; 0x28
   1a0aa:	4630      	mov	r0, r6
   1a0ac:	f7f7 fd4d 	bl	11b4a <arr_clear>
        if (value != NULL && value->vt == DLMS_DATA_TYPE_ARRAY)
   1a0b0:	2d00      	cmp	r5, #0
   1a0b2:	f43f af4f 	beq.w	19f54 <cosem_setGsmDiagnostic+0x3a>
   1a0b6:	782b      	ldrb	r3, [r5, #0]
   1a0b8:	2b01      	cmp	r3, #1
   1a0ba:	f47f af4b 	bne.w	19f54 <cosem_setGsmDiagnostic+0x3a>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a0be:	f04f 0800 	mov.w	r8, #0
   1a0c2:	e02f      	b.n	1a124 <cosem_setGsmDiagnostic+0x20a>
                ret = va_getByIndex(value->Arr, pos, &it);
   1a0c4:	aa02      	add	r2, sp, #8
   1a0c6:	4641      	mov	r1, r8
   1a0c8:	f001 ffd3 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a0cc:	4604      	mov	r4, r0
   1a0ce:	2800      	cmp	r0, #0
   1a0d0:	f47f af7a 	bne.w	19fc8 <cosem_setGsmDiagnostic+0xae>
                ret = va_getByIndex(it->Arr, 0, &tmp);
   1a0d4:	9b02      	ldr	r3, [sp, #8]
   1a0d6:	4601      	mov	r1, r0
   1a0d8:	aa01      	add	r2, sp, #4
   1a0da:	6898      	ldr	r0, [r3, #8]
   1a0dc:	f001 ffc9 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a0e0:	4604      	mov	r4, r0
   1a0e2:	2800      	cmp	r0, #0
   1a0e4:	f47f af70 	bne.w	19fc8 <cosem_setGsmDiagnostic+0xae>
                ac = (gxAdjacentCell*)gxmalloc(sizeof(gxAdjacentCell));
   1a0e8:	2008      	movs	r0, #8
   1a0ea:	f7f3 f903 	bl	d2f4 <malloc>
                if (ac == NULL)
   1a0ee:	4607      	mov	r7, r0
   1a0f0:	2800      	cmp	r0, #0
   1a0f2:	f43f af3d 	beq.w	19f70 <cosem_setGsmDiagnostic+0x56>
                ac->cellId = var_toInteger(tmp);
   1a0f6:	9801      	ldr	r0, [sp, #4]
   1a0f8:	f002 f935 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(it->Arr, 1, &tmp);
   1a0fc:	9b02      	ldr	r3, [sp, #8]
                ac->cellId = var_toInteger(tmp);
   1a0fe:	6038      	str	r0, [r7, #0]
                ret = va_getByIndex(it->Arr, 1, &tmp);
   1a100:	aa01      	add	r2, sp, #4
   1a102:	6898      	ldr	r0, [r3, #8]
   1a104:	2101      	movs	r1, #1
   1a106:	f001 ffb4 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a10a:	4604      	mov	r4, r0
   1a10c:	2800      	cmp	r0, #0
   1a10e:	d137      	bne.n	1a180 <cosem_setGsmDiagnostic+0x266>
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
   1a110:	9801      	ldr	r0, [sp, #4]
   1a112:	f002 f928 	bl	1c366 <var_toInteger>
                arr_push(&object->adjacentCells, ac);
   1a116:	4639      	mov	r1, r7
                ac->signalQuality = (unsigned char)var_toInteger(tmp);
   1a118:	7138      	strb	r0, [r7, #4]
                arr_push(&object->adjacentCells, ac);
   1a11a:	4630      	mov	r0, r6
   1a11c:	f7f7 fd00 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a120:	f108 0801 	add.w	r8, r8, #1
   1a124:	68a8      	ldr	r0, [r5, #8]
   1a126:	88c3      	ldrh	r3, [r0, #6]
   1a128:	4543      	cmp	r3, r8
   1a12a:	d1cb      	bne.n	1a0c4 <cosem_setGsmDiagnostic+0x1aa>
   1a12c:	e712      	b.n	19f54 <cosem_setGsmDiagnostic+0x3a>
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1a12e:	7813      	ldrb	r3, [r2, #0]
   1a130:	2b09      	cmp	r3, #9
   1a132:	d116      	bne.n	1a162 <cosem_setGsmDiagnostic+0x248>
   1a134:	6893      	ldr	r3, [r2, #8]
   1a136:	b1db      	cbz	r3, 1a170 <cosem_setGsmDiagnostic+0x256>
            var_init(&tmp2);
   1a138:	a802      	add	r0, sp, #8
   1a13a:	f001 fdc0 	bl	1bcbe <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1a13e:	aa02      	add	r2, sp, #8
   1a140:	2119      	movs	r1, #25
   1a142:	4628      	mov	r0, r5
   1a144:	f7f7 f9c6 	bl	114d4 <dlms_changeType2>
            if (ret != 0)
   1a148:	4604      	mov	r4, r0
   1a14a:	2800      	cmp	r0, #0
   1a14c:	f47f af3c 	bne.w	19fc8 <cosem_setGsmDiagnostic+0xae>
            time_copy(&object->captureTime, tmp2.dateTime);
   1a150:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1a154:	9904      	ldr	r1, [sp, #16]
   1a156:	f7f5 fa0a 	bl	f56e <time_copy>
            var_clear(&tmp2);
   1a15a:	a802      	add	r0, sp, #8
   1a15c:	f001 ff0b 	bl	1bf76 <var_clear>
   1a160:	e732      	b.n	19fc8 <cosem_setGsmDiagnostic+0xae>
        else if (value->vt == DLMS_DATA_TYPE_DATETIME)
   1a162:	2b19      	cmp	r3, #25
   1a164:	d104      	bne.n	1a170 <cosem_setGsmDiagnostic+0x256>
            time_copy(&object->captureTime, value->dateTime);
   1a166:	6891      	ldr	r1, [r2, #8]
   1a168:	3034      	adds	r0, #52	; 0x34
   1a16a:	f7f5 fa00 	bl	f56e <time_copy>
   1a16e:	e6f1      	b.n	19f54 <cosem_setGsmDiagnostic+0x3a>
            time_clear(&object->captureTime);
   1a170:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1a174:	f7f5 f9ca 	bl	f50c <time_clear>
   1a178:	e6ec      	b.n	19f54 <cosem_setGsmDiagnostic+0x3a>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1a17a:	f44f 7481 	mov.w	r4, #258	; 0x102
   1a17e:	e723      	b.n	19fc8 <cosem_setGsmDiagnostic+0xae>
                gxfree(ac);
   1a180:	4638      	mov	r0, r7
   1a182:	f7f3 f8bf 	bl	d304 <free>
   1a186:	e71f      	b.n	19fc8 <cosem_setGsmDiagnostic+0xae>

0001a188 <cosem_setTokenGateway>:
#endif //DLMS_IGNORE_GSM_DIAGNOSTIC
#ifndef DLMS_IGNORE_TOKEN_GATEWAY
int cosem_setTokenGateway(gxTokenGateway* object, unsigned char index, dlmsVARIANT* value)
{
   1a188:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a18c:	3902      	subs	r1, #2
   1a18e:	4605      	mov	r5, r0
   1a190:	4616      	mov	r6, r2
   1a192:	2904      	cmp	r1, #4
   1a194:	f200 808b 	bhi.w	1a2ae <cosem_setTokenGateway+0x126>
   1a198:	e8df f001 	tbb	[pc, r1]
   1a19c:	5e331603 	.word	0x5e331603
   1a1a0:	64          	.byte	0x64
   1a1a1:	00          	.byte	0x00
    dlmsVARIANT tmp2;
    dlmsVARIANT* it;
    switch (index)
    {
    case 2:
        bb_clear(&object->token);
   1a1a2:	3510      	adds	r5, #16
   1a1a4:	4628      	mov	r0, r5
   1a1a6:	f7f4 fa8c 	bl	e6c2 <bb_clear>
        ret = bb_set2(&object->token, value->byteArr, 0, bb_size(value->byteArr));
   1a1aa:	68b4      	ldr	r4, [r6, #8]
   1a1ac:	4620      	mov	r0, r4
   1a1ae:	f7f4 f8c2 	bl	e336 <bb_size>
   1a1b2:	4621      	mov	r1, r4
   1a1b4:	4603      	mov	r3, r0
   1a1b6:	2200      	movs	r2, #0
   1a1b8:	4628      	mov	r0, r5
   1a1ba:	f7f4 fa3d 	bl	e638 <bb_set2>
   1a1be:	4604      	mov	r4, r0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a1c0:	4620      	mov	r0, r4
   1a1c2:	b004      	add	sp, #16
   1a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        time_clear(&object->time);
   1a1c8:	351c      	adds	r5, #28
   1a1ca:	4628      	mov	r0, r5
   1a1cc:	f7f5 f99e 	bl	f50c <time_clear>
        if (value->byteArr == NULL)
   1a1d0:	68b4      	ldr	r4, [r6, #8]
   1a1d2:	b91c      	cbnz	r4, 1a1dc <cosem_setTokenGateway+0x54>
            time_clear(&object->time);
   1a1d4:	4628      	mov	r0, r5
   1a1d6:	f7f5 f999 	bl	f50c <time_clear>
   1a1da:	e7f1      	b.n	1a1c0 <cosem_setTokenGateway+0x38>
            var_init(&tmp2);
   1a1dc:	4668      	mov	r0, sp
   1a1de:	f001 fd6e 	bl	1bcbe <var_init>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1a1e2:	466a      	mov	r2, sp
   1a1e4:	2119      	movs	r1, #25
   1a1e6:	4630      	mov	r0, r6
   1a1e8:	f7f7 f974 	bl	114d4 <dlms_changeType2>
            if (ret != 0)
   1a1ec:	4604      	mov	r4, r0
   1a1ee:	2800      	cmp	r0, #0
   1a1f0:	d1e6      	bne.n	1a1c0 <cosem_setTokenGateway+0x38>
            time_copy(&object->time, tmp2.dateTime);
   1a1f2:	4628      	mov	r0, r5
   1a1f4:	9902      	ldr	r1, [sp, #8]
   1a1f6:	f7f5 f9ba 	bl	f56e <time_copy>
            var_clear(&tmp2);
   1a1fa:	4668      	mov	r0, sp
   1a1fc:	f001 febb 	bl	1bf76 <var_clear>
   1a200:	e7de      	b.n	1a1c0 <cosem_setTokenGateway+0x38>
        obj_clearByteBufferList(&object->descriptions);
   1a202:	3528      	adds	r5, #40	; 0x28
   1a204:	4628      	mov	r0, r5
   1a206:	f7fb f8c6 	bl	15396 <obj_clearByteBufferList>
        if (value != NULL)
   1a20a:	bb16      	cbnz	r6, 1a252 <cosem_setTokenGateway+0xca>
    int ret = DLMS_ERROR_CODE_OK, pos;
   1a20c:	2400      	movs	r4, #0
        break;
   1a20e:	e7d7      	b.n	1a1c0 <cosem_setTokenGateway+0x38>
                if ((ret = va_getByIndex(value->Arr, pos, &it)) != 0)
   1a210:	466a      	mov	r2, sp
   1a212:	4641      	mov	r1, r8
   1a214:	f001 ff2d 	bl	1c072 <va_getByIndex>
   1a218:	4604      	mov	r4, r0
   1a21a:	2800      	cmp	r0, #0
   1a21c:	d1d0      	bne.n	1a1c0 <cosem_setTokenGateway+0x38>
                d = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1a21e:	200c      	movs	r0, #12
   1a220:	f7f3 f868 	bl	d2f4 <malloc>
                if (d == NULL)
   1a224:	4607      	mov	r7, r0
   1a226:	2800      	cmp	r0, #0
   1a228:	d044      	beq.n	1a2b4 <cosem_setTokenGateway+0x12c>
                BYTE_BUFFER_INIT(d);
   1a22a:	f7f4 f887 	bl	e33c <bb_init>
                bb_set2(d, it->strVal, 0, it->strVal->size);
   1a22e:	9b00      	ldr	r3, [sp, #0]
   1a230:	6899      	ldr	r1, [r3, #8]
   1a232:	4622      	mov	r2, r4
   1a234:	88cb      	ldrh	r3, [r1, #6]
   1a236:	4638      	mov	r0, r7
   1a238:	f7f4 f9fe 	bl	e638 <bb_set2>
                arr_push(&object->descriptions, d);
   1a23c:	4639      	mov	r1, r7
   1a23e:	4628      	mov	r0, r5
   1a240:	f7f7 fc6e 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a244:	f108 0801 	add.w	r8, r8, #1
   1a248:	68b0      	ldr	r0, [r6, #8]
   1a24a:	88c3      	ldrh	r3, [r0, #6]
   1a24c:	4543      	cmp	r3, r8
   1a24e:	d1df      	bne.n	1a210 <cosem_setTokenGateway+0x88>
   1a250:	e7dc      	b.n	1a20c <cosem_setTokenGateway+0x84>
   1a252:	f04f 0800 	mov.w	r8, #0
   1a256:	e7f7      	b.n	1a248 <cosem_setTokenGateway+0xc0>
        object->deliveryMethod = (DLMS_TOKEN_DELIVERY)var_toInteger(value);
   1a258:	4610      	mov	r0, r2
   1a25a:	f002 f884 	bl	1c366 <var_toInteger>
   1a25e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   1a262:	e7d3      	b.n	1a20c <cosem_setTokenGateway+0x84>
        if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != 0)
   1a264:	68b0      	ldr	r0, [r6, #8]
   1a266:	466a      	mov	r2, sp
   1a268:	2100      	movs	r1, #0
   1a26a:	f001 ff02 	bl	1c072 <va_getByIndex>
   1a26e:	4604      	mov	r4, r0
   1a270:	2800      	cmp	r0, #0
   1a272:	d1a5      	bne.n	1a1c0 <cosem_setTokenGateway+0x38>
        object->status = (DLMS_TOKEN_STATUS_CODE)var_toInteger(tmp);
   1a274:	9800      	ldr	r0, [sp, #0]
   1a276:	f002 f876 	bl	1c366 <var_toInteger>
   1a27a:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
        if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != 0)
   1a27e:	68b0      	ldr	r0, [r6, #8]
   1a280:	466a      	mov	r2, sp
   1a282:	2101      	movs	r1, #1
   1a284:	f001 fef5 	bl	1c072 <va_getByIndex>
   1a288:	4604      	mov	r4, r0
   1a28a:	2800      	cmp	r0, #0
   1a28c:	d198      	bne.n	1a1c0 <cosem_setTokenGateway+0x38>
        ba_clear(&object->dataValue);
   1a28e:	3538      	adds	r5, #56	; 0x38
   1a290:	4628      	mov	r0, r5
   1a292:	f7f3 ffbc 	bl	e20e <ba_clear>
        if (tmp->strVal != NULL && tmp->strVal->size != 0)
   1a296:	9b00      	ldr	r3, [sp, #0]
   1a298:	689b      	ldr	r3, [r3, #8]
   1a29a:	2b00      	cmp	r3, #0
   1a29c:	d0b6      	beq.n	1a20c <cosem_setTokenGateway+0x84>
   1a29e:	88da      	ldrh	r2, [r3, #6]
   1a2a0:	2a00      	cmp	r2, #0
   1a2a2:	d0b3      	beq.n	1a20c <cosem_setTokenGateway+0x84>
            ba_copy(&object->dataValue, tmp->bitArr->data, tmp->bitArr->size);
   1a2a4:	6819      	ldr	r1, [r3, #0]
   1a2a6:	4628      	mov	r0, r5
   1a2a8:	f7f3 ffbc 	bl	e224 <ba_copy>
   1a2ac:	e788      	b.n	1a1c0 <cosem_setTokenGateway+0x38>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1a2ae:	f44f 7481 	mov.w	r4, #258	; 0x102
   1a2b2:	e785      	b.n	1a1c0 <cosem_setTokenGateway+0x38>
   1a2b4:	f44f 7482 	mov.w	r4, #260	; 0x104
   1a2b8:	e782      	b.n	1a1c0 <cosem_setTokenGateway+0x38>

0001a2ba <compactData_updateTemplateDescription>:
#ifndef DLMS_IGNORE_COMPACT_DATA

int compactData_updateTemplateDescription(
    dlmsSettings* settings,
    gxCompactData* object)
{
   1a2ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2be:	460f      	mov	r7, r1
   1a2c0:	b0a1      	sub	sp, #132	; 0x84
   1a2c2:	4682      	mov	sl, r0
    gxByteBuffer tmp;
    gxValueEventCollection args;
    gxValueEventArg e;
    ve_init(&e);
    gxKey* kv;
    bb_clear(&object->buffer);
   1a2c4:	f107 0610 	add.w	r6, r7, #16
    ve_init(&e);
   1a2c8:	a80e      	add	r0, sp, #56	; 0x38
   1a2ca:	f001 f943 	bl	1b554 <ve_init>
    bb_clear(&object->templateDescription);
   1a2ce:	f107 052c 	add.w	r5, r7, #44	; 0x2c
    bb_clear(&object->buffer);
   1a2d2:	4630      	mov	r0, r6
   1a2d4:	f7f4 f9f5 	bl	e6c2 <bb_clear>
    bb_clear(&object->templateDescription);
   1a2d8:	4628      	mov	r0, r5
   1a2da:	f7f4 f9f2 	bl	e6c2 <bb_clear>
    e.action = 1;
    e.target = &object->base;
    e.index = 2;
   1a2de:	2402      	movs	r4, #2
    e.action = 1;
   1a2e0:	2301      	movs	r3, #1
    vec_init(&args);
   1a2e2:	a805      	add	r0, sp, #20
    e.action = 1;
   1a2e4:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    e.target = &object->base;
   1a2e8:	9713      	str	r7, [sp, #76]	; 0x4c
    e.index = 2;
   1a2ea:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    vec_init(&args);
   1a2ee:	f001 f8dc 	bl	1b4aa <vec_init>
    BYTE_BUFFER_INIT(&tmp);
   1a2f2:	a807      	add	r0, sp, #28
   1a2f4:	f7f4 f822 	bl	e33c <bb_init>
    vec_push(&args, &e);
   1a2f8:	a90e      	add	r1, sp, #56	; 0x38
   1a2fa:	a805      	add	r0, sp, #20
   1a2fc:	f001 f8f5 	bl	1b4ea <vec_push>
    if (!e.handled)
   1a300:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1a304:	b153      	cbz	r3, 1a31c <compactData_updateTemplateDescription+0x62>
            }
            var_clear(&e.value);
            ve_clear(&e);
        }
    }
    bb_clear(&tmp);
   1a306:	a807      	add	r0, sp, #28
   1a308:	f7f4 f9db 	bl	e6c2 <bb_clear>
    //svr_postGet(settings, &args);
    vec_empty(&args);
   1a30c:	a805      	add	r0, sp, #20
   1a30e:	f001 f90e 	bl	1b52e <vec_empty>
    return 0;
   1a312:	2400      	movs	r4, #0
}
   1a314:	4620      	mov	r0, r4
   1a316:	b021      	add	sp, #132	; 0x84
   1a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ret = bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE)) != DLMS_ERROR_CODE_OK)
   1a31c:	4621      	mov	r1, r4
   1a31e:	4628      	mov	r0, r5
   1a320:	f7f4 f875 	bl	e40e <bb_setUInt8>
   1a324:	4604      	mov	r4, r0
   1a326:	b118      	cbz	r0, 1a330 <compactData_updateTemplateDescription+0x76>
                    bb_clear(&object->buffer);
   1a328:	4630      	mov	r0, r6
   1a32a:	f7f4 f9ca 	bl	e6c2 <bb_clear>
                    return ret;
   1a32e:	e7f1      	b.n	1a314 <compactData_updateTemplateDescription+0x5a>
        hlp_setObjectCount(object->captureObjects.size, &object->templateDescription);
   1a330:	8c78      	ldrh	r0, [r7, #34]	; 0x22
   1a332:	4629      	mov	r1, r5
   1a334:	f001 f967 	bl	1b606 <hlp_setObjectCount>
        for (pos = 0; pos != object->captureObjects.size; ++pos)
   1a338:	46a1      	mov	r9, r4
   1a33a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   1a33c:	fa1f f189 	uxth.w	r1, r9
   1a340:	428b      	cmp	r3, r1
   1a342:	d0e0      	beq.n	1a306 <compactData_updateTemplateDescription+0x4c>
            ret = arr_getByIndex(&object->captureObjects, pos, (void**)&kv);
   1a344:	aa01      	add	r2, sp, #4
   1a346:	f107 001c 	add.w	r0, r7, #28
   1a34a:	f7f7 fc26 	bl	11b9a <arr_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1a34e:	4604      	mov	r4, r0
   1a350:	2800      	cmp	r0, #0
   1a352:	d1e9      	bne.n	1a328 <compactData_updateTemplateDescription+0x6e>
            e.target = (gxObject*)kv->key;
   1a354:	9b01      	ldr	r3, [sp, #4]
   1a356:	681a      	ldr	r2, [r3, #0]
            e.index = ((gxTarget*)kv->value)->attributeIndex;
   1a358:	685b      	ldr	r3, [r3, #4]
            e.target = (gxObject*)kv->key;
   1a35a:	9213      	str	r2, [sp, #76]	; 0x4c
            e.index = ((gxTarget*)kv->value)->attributeIndex;
   1a35c:	781b      	ldrb	r3, [r3, #0]
   1a35e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
            if ((ret = cosem_getValue(settings, &e)) != 0)
   1a362:	a90e      	add	r1, sp, #56	; 0x38
   1a364:	4650      	mov	r0, sl
   1a366:	f7fa fd0c 	bl	14d82 <cosem_getValue>
   1a36a:	4604      	mov	r4, r0
   1a36c:	b118      	cbz	r0, 1a376 <compactData_updateTemplateDescription+0xbc>
                                        var_clear(&e.value);
   1a36e:	a80e      	add	r0, sp, #56	; 0x38
   1a370:	f001 fe01 	bl	1bf76 <var_clear>
                                        bb_clear(&object->buffer);
   1a374:	e7d8      	b.n	1a328 <compactData_updateTemplateDescription+0x6e>
            if (e.byteArray)
   1a376:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
   1a37a:	2b00      	cmp	r3, #0
   1a37c:	f000 80db 	beq.w	1a536 <compactData_updateTemplateDescription+0x27c>
                if (bb_size(e.value.byteArr) == 0)
   1a380:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a382:	f7f3 ffd8 	bl	e336 <bb_size>
   1a386:	4601      	mov	r1, r0
   1a388:	b918      	cbnz	r0, 1a392 <compactData_updateTemplateDescription+0xd8>
                        bb_setUInt8(&object->templateDescription, e.value.byteArr->data[0]);
   1a38a:	4628      	mov	r0, r5
   1a38c:	f7f4 f83f 	bl	e40e <bb_setUInt8>
   1a390:	e06e      	b.n	1a470 <compactData_updateTemplateDescription+0x1b6>
                    if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY ||
   1a392:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a394:	681b      	ldr	r3, [r3, #0]
   1a396:	7819      	ldrb	r1, [r3, #0]
   1a398:	1e4b      	subs	r3, r1, #1
   1a39a:	2b01      	cmp	r3, #1
   1a39c:	d8f5      	bhi.n	1a38a <compactData_updateTemplateDescription+0xd0>
                        di_init(&info);
   1a39e:	a803      	add	r0, sp, #12
                        var_init(&value);
   1a3a0:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                        di_init(&info);
   1a3a4:	f7f5 f878 	bl	f498 <di_init>
                        var_init(&value);
   1a3a8:	4658      	mov	r0, fp
   1a3aa:	f001 fc88 	bl	1bcbe <var_init>
                        e.value.byteArr->position = 1;
   1a3ae:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a3b0:	2301      	movs	r3, #1
   1a3b2:	8103      	strh	r3, [r0, #8]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   1a3b4:	f10d 0102 	add.w	r1, sp, #2
   1a3b8:	f001 f8f4 	bl	1b5a4 <hlp_getObjectCount2>
   1a3bc:	b930      	cbnz	r0, 1a3cc <compactData_updateTemplateDescription+0x112>
                            ((gxTarget*)kv->value)->dataIndex > count)
   1a3be:	9b01      	ldr	r3, [sp, #4]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   1a3c0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
                            ((gxTarget*)kv->value)->dataIndex > count)
   1a3c4:	685b      	ldr	r3, [r3, #4]
   1a3c6:	885b      	ldrh	r3, [r3, #2]
                        if ((ret = hlp_getObjectCount2(e.value.byteArr, &count)) != 0 ||
   1a3c8:	429a      	cmp	r2, r3
   1a3ca:	d208      	bcs.n	1a3de <compactData_updateTemplateDescription+0x124>
                            var_clear(&e.value);
   1a3cc:	a80e      	add	r0, sp, #56	; 0x38
   1a3ce:	f001 fdd2 	bl	1bf76 <var_clear>
                            bb_clear(&object->buffer);
   1a3d2:	4630      	mov	r0, r6
   1a3d4:	f7f4 f975 	bl	e6c2 <bb_clear>
                            return DLMS_ERROR_CODE_OUTOFMEMORY;
   1a3d8:	f44f 7482 	mov.w	r4, #260	; 0x104
   1a3dc:	e79a      	b.n	1a314 <compactData_updateTemplateDescription+0x5a>
                        if (((gxTarget*)kv->value)->dataIndex == 0)
   1a3de:	2b00      	cmp	r3, #0
   1a3e0:	d17a      	bne.n	1a4d8 <compactData_updateTemplateDescription+0x21e>
                            bb_setUInt8(&object->templateDescription, e.value.byteArr->data[0]);
   1a3e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a3e4:	681b      	ldr	r3, [r3, #0]
   1a3e6:	4628      	mov	r0, r5
   1a3e8:	7819      	ldrb	r1, [r3, #0]
   1a3ea:	f7f4 f810 	bl	e40e <bb_setUInt8>
                            if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   1a3ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a3f0:	681b      	ldr	r3, [r3, #0]
   1a3f2:	781a      	ldrb	r2, [r3, #0]
   1a3f4:	7859      	ldrb	r1, [r3, #1]
   1a3f6:	2a01      	cmp	r2, #1
                                bb_setUInt16(&object->templateDescription, e.value.byteArr->data[1]);
   1a3f8:	4628      	mov	r0, r5
                            if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   1a3fa:	d118      	bne.n	1a42e <compactData_updateTemplateDescription+0x174>
                                bb_setUInt16(&object->templateDescription, e.value.byteArr->data[1]);
   1a3fc:	f7f4 f829 	bl	e452 <bb_setUInt16>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   1a400:	f04f 0b00 	mov.w	fp, #0
                            for (unsigned char pos = 0; pos < count; ++pos)
   1a404:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1a408:	fa5f f38b 	uxtb.w	r3, fp
   1a40c:	4293      	cmp	r3, r2
   1a40e:	d22c      	bcs.n	1a46a <compactData_updateTemplateDescription+0x1b0>
                                di_init(&info);
   1a410:	a803      	add	r0, sp, #12
   1a412:	f7f5 f841 	bl	f498 <di_init>
                                var_clear(&value);
   1a416:	a80a      	add	r0, sp, #40	; 0x28
   1a418:	f001 fdad 	bl	1bf76 <var_clear>
                                if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   1a41c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a41e:	aa0a      	add	r2, sp, #40	; 0x28
   1a420:	a903      	add	r1, sp, #12
   1a422:	f7f5 fcc9 	bl	fdb8 <dlms_getData>
   1a426:	4604      	mov	r4, r0
   1a428:	b120      	cbz	r0, 1a434 <compactData_updateTemplateDescription+0x17a>
                                        var_clear(&value);
   1a42a:	a80a      	add	r0, sp, #40	; 0x28
   1a42c:	e04a      	b.n	1a4c4 <compactData_updateTemplateDescription+0x20a>
                                bb_setUInt8(&object->templateDescription, e.value.byteArr->data[1]);
   1a42e:	f7f3 ffee 	bl	e40e <bb_setUInt8>
   1a432:	e7e5      	b.n	1a400 <compactData_updateTemplateDescription+0x146>
                                if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
   1a434:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1a438:	1e4b      	subs	r3, r1, #1
   1a43a:	2b01      	cmp	r3, #1
                                    bb_setUInt8(&object->templateDescription, info.type);
   1a43c:	4628      	mov	r0, r5
                                if (info.type == DLMS_DATA_TYPE_STRUCTURE || info.type == DLMS_DATA_TYPE_ARRAY)
   1a43e:	d830      	bhi.n	1a4a2 <compactData_updateTemplateDescription+0x1e8>
                                    bb_setUInt8(&object->templateDescription, info.type);
   1a440:	f7f3 ffe5 	bl	e40e <bb_setUInt8>
                                    bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
   1a444:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a446:	4628      	mov	r0, r5
   1a448:	7999      	ldrb	r1, [r3, #6]
   1a44a:	f7f3 ffe0 	bl	e40e <bb_setUInt8>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   1a44e:	46a0      	mov	r8, r4
   1a450:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a452:	88c2      	ldrh	r2, [r0, #6]
   1a454:	fa1f f388 	uxth.w	r3, r8
   1a458:	429a      	cmp	r2, r3
   1a45a:	d812      	bhi.n	1a482 <compactData_updateTemplateDescription+0x1c8>
                                if (e.value.byteArr->data[0] == DLMS_DATA_TYPE_ARRAY)
   1a45c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a45e:	681b      	ldr	r3, [r3, #0]
   1a460:	781b      	ldrb	r3, [r3, #0]
   1a462:	2b01      	cmp	r3, #1
   1a464:	f10b 0b01 	add.w	fp, fp, #1
   1a468:	d1cc      	bne.n	1a404 <compactData_updateTemplateDescription+0x14a>
                        var_clear(&value);
   1a46a:	a80a      	add	r0, sp, #40	; 0x28
   1a46c:	f001 fd83 	bl	1bf76 <var_clear>
            var_clear(&e.value);
   1a470:	a80e      	add	r0, sp, #56	; 0x38
   1a472:	f001 fd80 	bl	1bf76 <var_clear>
            ve_clear(&e);
   1a476:	a80e      	add	r0, sp, #56	; 0x38
   1a478:	f001 f880 	bl	1b57c <ve_clear>
        for (pos = 0; pos != object->captureObjects.size; ++pos)
   1a47c:	f109 0901 	add.w	r9, r9, #1
   1a480:	e75b      	b.n	1a33a <compactData_updateTemplateDescription+0x80>
                                        if ((ret = va_getByIndex(value.Arr, pos, &value2)) != 0)
   1a482:	fa1f f188 	uxth.w	r1, r8
   1a486:	aa02      	add	r2, sp, #8
   1a488:	f001 fdf3 	bl	1c072 <va_getByIndex>
   1a48c:	f108 0801 	add.w	r8, r8, #1
   1a490:	4604      	mov	r4, r0
   1a492:	2800      	cmp	r0, #0
   1a494:	d1c9      	bne.n	1a42a <compactData_updateTemplateDescription+0x170>
                                        bb_setUInt8(&object->templateDescription, value2->vt);
   1a496:	9b02      	ldr	r3, [sp, #8]
   1a498:	4628      	mov	r0, r5
   1a49a:	7819      	ldrb	r1, [r3, #0]
   1a49c:	f7f3 ffb7 	bl	e40e <bb_setUInt8>
                                    for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   1a4a0:	e7d6      	b.n	1a450 <compactData_updateTemplateDescription+0x196>
                                    bb_setUInt8(&object->templateDescription, info.type);
   1a4a2:	f7f3 ffb4 	bl	e40e <bb_setUInt8>
   1a4a6:	e7d9      	b.n	1a45c <compactData_updateTemplateDescription+0x1a2>
                                var_clear(&value);
   1a4a8:	4658      	mov	r0, fp
   1a4aa:	f001 fd64 	bl	1bf76 <var_clear>
                                di_init(&info);
   1a4ae:	a803      	add	r0, sp, #12
   1a4b0:	f7f4 fff2 	bl	f498 <di_init>
                                if ((ret = dlms_getData(e.value.byteArr, &info, &value)) != 0)
   1a4b4:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a4b6:	465a      	mov	r2, fp
   1a4b8:	a903      	add	r1, sp, #12
   1a4ba:	f7f5 fc7d 	bl	fdb8 <dlms_getData>
   1a4be:	4604      	mov	r4, r0
   1a4c0:	b118      	cbz	r0, 1a4ca <compactData_updateTemplateDescription+0x210>
                                    var_clear(&value);
   1a4c2:	4658      	mov	r0, fp
                                        var_clear(&value);
   1a4c4:	f001 fd57 	bl	1bf76 <var_clear>
   1a4c8:	e751      	b.n	1a36e <compactData_updateTemplateDescription+0xb4>
                                if (!info.complete)
   1a4ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1a4ce:	f108 0801 	add.w	r8, r8, #1
   1a4d2:	b913      	cbnz	r3, 1a4da <compactData_updateTemplateDescription+0x220>
                                    return DLMS_ERROR_CODE_READ_WRITE_DENIED;
   1a4d4:	2403      	movs	r4, #3
   1a4d6:	e71d      	b.n	1a314 <compactData_updateTemplateDescription+0x5a>
   1a4d8:	4680      	mov	r8, r0
                            for (unsigned char pos = 0; pos < ((gxTarget*)kv->value)->dataIndex; ++pos)
   1a4da:	9b01      	ldr	r3, [sp, #4]
   1a4dc:	685a      	ldr	r2, [r3, #4]
   1a4de:	8852      	ldrh	r2, [r2, #2]
   1a4e0:	fa5f f388 	uxtb.w	r3, r8
   1a4e4:	4293      	cmp	r3, r2
   1a4e6:	d3df      	bcc.n	1a4a8 <compactData_updateTemplateDescription+0x1ee>
                            if (info.type == DLMS_DATA_TYPE_STRUCTURE)
   1a4e8:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1a4ec:	2902      	cmp	r1, #2
                                bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE);
   1a4ee:	4628      	mov	r0, r5
                            if (info.type == DLMS_DATA_TYPE_STRUCTURE)
   1a4f0:	d11e      	bne.n	1a530 <compactData_updateTemplateDescription+0x276>
                                bb_setUInt8(&object->templateDescription, DLMS_DATA_TYPE_STRUCTURE);
   1a4f2:	f7f3 ff8c 	bl	e40e <bb_setUInt8>
                                bb_setUInt8(&object->templateDescription, (unsigned char)value.Arr->size);
   1a4f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a4f8:	4628      	mov	r0, r5
   1a4fa:	7999      	ldrb	r1, [r3, #6]
   1a4fc:	f7f3 ff87 	bl	e40e <bb_setUInt8>
                                for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   1a500:	f04f 0800 	mov.w	r8, #0
   1a504:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a506:	88c2      	ldrh	r2, [r0, #6]
   1a508:	fa1f f388 	uxth.w	r3, r8
   1a50c:	429a      	cmp	r2, r3
   1a50e:	d9ac      	bls.n	1a46a <compactData_updateTemplateDescription+0x1b0>
                                    if ((ret = va_getByIndex(value.Arr, pos, &value2)) != 0)
   1a510:	fa1f f188 	uxth.w	r1, r8
   1a514:	aa02      	add	r2, sp, #8
   1a516:	f001 fdac 	bl	1c072 <va_getByIndex>
   1a51a:	f108 0801 	add.w	r8, r8, #1
   1a51e:	4604      	mov	r4, r0
   1a520:	2800      	cmp	r0, #0
   1a522:	d182      	bne.n	1a42a <compactData_updateTemplateDescription+0x170>
                                    bb_setUInt8(&object->templateDescription, value2->vt);
   1a524:	9b02      	ldr	r3, [sp, #8]
   1a526:	4628      	mov	r0, r5
   1a528:	7819      	ldrb	r1, [r3, #0]
   1a52a:	f7f3 ff70 	bl	e40e <bb_setUInt8>
                                for (uint16_t pos = 0; pos < value.Arr->size; ++pos)
   1a52e:	e7e9      	b.n	1a504 <compactData_updateTemplateDescription+0x24a>
                                bb_setUInt8(&object->templateDescription, info.type);
   1a530:	f7f3 ff6d 	bl	e40e <bb_setUInt8>
   1a534:	e799      	b.n	1a46a <compactData_updateTemplateDescription+0x1b0>
                if ((ret = dlms_setData(&tmp, e.value.vt, &e.value)) != 0)
   1a536:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1a53a:	aa0e      	add	r2, sp, #56	; 0x38
   1a53c:	a807      	add	r0, sp, #28
   1a53e:	f7f5 f891 	bl	f664 <dlms_setData>
   1a542:	4604      	mov	r4, r0
   1a544:	b130      	cbz	r0, 1a554 <compactData_updateTemplateDescription+0x29a>
                    var_clear(&e.value);
   1a546:	a80e      	add	r0, sp, #56	; 0x38
   1a548:	f001 fd15 	bl	1bf76 <var_clear>
                    bb_clear(&tmp);
   1a54c:	a807      	add	r0, sp, #28
   1a54e:	f7f4 f8b8 	bl	e6c2 <bb_clear>
   1a552:	e6e9      	b.n	1a328 <compactData_updateTemplateDescription+0x6e>
                bb_setUInt8(&object->templateDescription, tmp.data[0]);
   1a554:	9b07      	ldr	r3, [sp, #28]
   1a556:	4628      	mov	r0, r5
   1a558:	7819      	ldrb	r1, [r3, #0]
   1a55a:	f7f3 ff58 	bl	e40e <bb_setUInt8>
                bb_clear(&tmp);
   1a55e:	a807      	add	r0, sp, #28
   1a560:	f7f4 f8af 	bl	e6c2 <bb_clear>
   1a564:	e784      	b.n	1a470 <compactData_updateTemplateDescription+0x1b6>

0001a566 <cosem_setCompactData>:
    gxCompactData* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   1a566:	3a02      	subs	r2, #2
{
   1a568:	b570      	push	{r4, r5, r6, lr}
   1a56a:	4606      	mov	r6, r0
   1a56c:	460c      	mov	r4, r1
   1a56e:	461d      	mov	r5, r3
   1a570:	2a04      	cmp	r2, #4
   1a572:	d82e      	bhi.n	1a5d2 <cosem_setCompactData+0x6c>
   1a574:	e8df f002 	tbb	[pc, r2]
   1a578:	251e1003 	.word	0x251e1003
   1a57c:	27          	.byte	0x27
   1a57d:	00          	.byte	0x00
    {
    case 2:
        bb_clear(&object->buffer);
   1a57e:	3410      	adds	r4, #16
        break;
    case 4:
        object->templateId = (unsigned char) var_toInteger(value);
        break;
    case 5:
        bb_clear(&object->templateDescription);
   1a580:	4620      	mov	r0, r4
   1a582:	f7f4 f89e 	bl	e6c2 <bb_clear>
        if (value->byteArr != NULL)
   1a586:	68ab      	ldr	r3, [r5, #8]
   1a588:	b1cb      	cbz	r3, 1a5be <cosem_setCompactData+0x58>
        {
            ret = bb_set(&object->templateDescription, value->byteArr->data, value->byteArr->size);
   1a58a:	4620      	mov	r0, r4
   1a58c:	88da      	ldrh	r2, [r3, #6]
   1a58e:	6819      	ldr	r1, [r3, #0]
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1a590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = bb_set(&object->templateDescription, value->byteArr->data, value->byteArr->size);
   1a594:	f7f4 b821 	b.w	e5da <bb_set>
        ret = setCaptureObjects(settings, &object->captureObjects, value);
   1a598:	462a      	mov	r2, r5
   1a59a:	311c      	adds	r1, #28
   1a59c:	f7ff fc23 	bl	19de6 <setCaptureObjects>
        if (ret == 0 && settings->server)
   1a5a0:	b970      	cbnz	r0, 1a5c0 <cosem_setCompactData+0x5a>
   1a5a2:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
   1a5a6:	b153      	cbz	r3, 1a5be <cosem_setCompactData+0x58>
            ret = compactData_updateTemplateDescription(settings, object);
   1a5a8:	4621      	mov	r1, r4
   1a5aa:	4630      	mov	r0, r6
}
   1a5ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            ret = compactData_updateTemplateDescription(settings, object);
   1a5b0:	f7ff be83 	b.w	1a2ba <compactData_updateTemplateDescription>
        object->templateId = (unsigned char) var_toInteger(value);
   1a5b4:	4628      	mov	r0, r5
   1a5b6:	f001 fed6 	bl	1c366 <var_toInteger>
   1a5ba:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    int ret = DLMS_ERROR_CODE_OK;
   1a5be:	2000      	movs	r0, #0
}
   1a5c0:	bd70      	pop	{r4, r5, r6, pc}
        bb_clear(&object->templateDescription);
   1a5c2:	342c      	adds	r4, #44	; 0x2c
   1a5c4:	e7dc      	b.n	1a580 <cosem_setCompactData+0x1a>
        object->captureMethod = (DLMS_CAPTURE_METHOD)var_toInteger(value);
   1a5c6:	4628      	mov	r0, r5
   1a5c8:	f001 fecd 	bl	1c366 <var_toInteger>
   1a5cc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
   1a5d0:	e7f5      	b.n	1a5be <cosem_setCompactData+0x58>
    int ret = DLMS_ERROR_CODE_OK;
   1a5d2:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a5d6:	e7f3      	b.n	1a5c0 <cosem_setCompactData+0x5a>

0001a5d8 <cosem_setParameterMonitor>:
int cosem_setParameterMonitor(
    dlmsSettings* settings,
    gxParameterMonitor* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   1a5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = 0, pos;
    dlmsVARIANT* tmp, * tmp3;
    dlmsVARIANT tmp2;
    DLMS_OBJECT_TYPE type;
    switch (index)
   1a5dc:	2a03      	cmp	r2, #3
{
   1a5de:	b086      	sub	sp, #24
   1a5e0:	4607      	mov	r7, r0
   1a5e2:	468a      	mov	sl, r1
   1a5e4:	461e      	mov	r6, r3
    switch (index)
   1a5e6:	d062      	beq.n	1a6ae <cosem_setParameterMonitor+0xd6>
   1a5e8:	2a04      	cmp	r2, #4
   1a5ea:	f000 8081 	beq.w	1a6f0 <cosem_setParameterMonitor+0x118>
   1a5ee:	2a02      	cmp	r2, #2
   1a5f0:	f040 80f0 	bne.w	1a7d4 <cosem_setParameterMonitor+0x1fc>
    {
    case 2:
    {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
        object->changedParameter.target = NULL;
   1a5f4:	2100      	movs	r1, #0
   1a5f6:	f8ca 1010 	str.w	r1, [sl, #16]
#else
        object->changedParameter.type = DLMS_OBJECT_TYPE_NONE;
        memset(object->changedParameter.logicalName, 0, 6);
#endif //DLMS_IGNORE_OBJECT_POINTERS
        if (value->Arr != NULL)
   1a5fa:	6898      	ldr	r0, [r3, #8]
   1a5fc:	b908      	cbnz	r0, 1a602 <cosem_setParameterMonitor+0x2a>
   1a5fe:	2400      	movs	r4, #0
   1a600:	e051      	b.n	1a6a6 <cosem_setParameterMonitor+0xce>
        {
            if ((ret = va_getByIndex(value->Arr, 0, &tmp3)) == DLMS_ERROR_CODE_OK)
   1a602:	aa01      	add	r2, sp, #4
   1a604:	f001 fd35 	bl	1c072 <va_getByIndex>
   1a608:	4604      	mov	r4, r0
   1a60a:	2800      	cmp	r0, #0
   1a60c:	d14b      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
            {
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1a60e:	9801      	ldr	r0, [sp, #4]
   1a610:	f001 fea9 	bl	1c366 <var_toInteger>
                //Get LN.
                if ((ret = va_getByIndex(value->Arr, 1, &tmp3)) == DLMS_ERROR_CODE_OK)
   1a614:	aa01      	add	r2, sp, #4
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1a616:	4680      	mov	r8, r0
                if ((ret = va_getByIndex(value->Arr, 1, &tmp3)) == DLMS_ERROR_CODE_OK)
   1a618:	2101      	movs	r1, #1
   1a61a:	68b0      	ldr	r0, [r6, #8]
   1a61c:	f001 fd29 	bl	1c072 <va_getByIndex>
   1a620:	4604      	mov	r4, r0
   1a622:	2800      	cmp	r0, #0
   1a624:	d13f      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
                {
#ifndef DLMS_IGNORE_OBJECT_POINTERS
                    if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &object->changedParameter.target)) != 0)
   1a626:	9b01      	ldr	r3, [sp, #4]
   1a628:	689a      	ldr	r2, [r3, #8]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1a62a:	fa1f f888 	uxth.w	r8, r8
                    if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &object->changedParameter.target)) != 0)
   1a62e:	f10a 0910 	add.w	r9, sl, #16
   1a632:	6812      	ldr	r2, [r2, #0]
   1a634:	464b      	mov	r3, r9
   1a636:	4641      	mov	r1, r8
   1a638:	f107 0098 	add.w	r0, r7, #152	; 0x98
   1a63c:	f001 fad6 	bl	1bbec <oa_findByLN>
   1a640:	4604      	mov	r4, r0
   1a642:	bb80      	cbnz	r0, 1a6a6 <cosem_setParameterMonitor+0xce>
                    {
                        return ret;
                    }
                    if (object->changedParameter.target == NULL)
   1a644:	f8da 3010 	ldr.w	r3, [sl, #16]
   1a648:	b9a3      	cbnz	r3, 1a674 <cosem_setParameterMonitor+0x9c>
                    {
                        if ((ret = cosem_createObject(type, &object->changedParameter.target)) != 0)
   1a64a:	4649      	mov	r1, r9
   1a64c:	4640      	mov	r0, r8
   1a64e:	f7e7 fd5f 	bl	2110 <cosem_createObject>
   1a652:	4604      	mov	r4, r0
   1a654:	bb38      	cbnz	r0, 1a6a6 <cosem_setParameterMonitor+0xce>
                        {
                            return ret;
                        }
                        oa_push(&settings->releasedObjects, object->changedParameter.target);
   1a656:	f8da 1010 	ldr.w	r1, [sl, #16]
   1a65a:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1a65e:	f001 fa36 	bl	1bace <oa_push>
                        memcpy(object->changedParameter.target->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   1a662:	9b01      	ldr	r3, [sp, #4]
   1a664:	f8da 0010 	ldr.w	r0, [sl, #16]
   1a668:	689b      	ldr	r3, [r3, #8]
   1a66a:	3006      	adds	r0, #6
   1a66c:	88da      	ldrh	r2, [r3, #6]
   1a66e:	6819      	ldr	r1, [r3, #0]
   1a670:	f003 fdc7 	bl	1e202 <memcpy>
                    }
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp3)) == DLMS_ERROR_CODE_OK)
   1a674:	68b0      	ldr	r0, [r6, #8]
   1a676:	aa01      	add	r2, sp, #4
   1a678:	2102      	movs	r1, #2
   1a67a:	f001 fcfa 	bl	1c072 <va_getByIndex>
   1a67e:	4604      	mov	r4, r0
   1a680:	b988      	cbnz	r0, 1a6a6 <cosem_setParameterMonitor+0xce>
                    {
                        object->changedParameter.attributeIndex = (unsigned char)var_toInteger(tmp3);
   1a682:	9801      	ldr	r0, [sp, #4]
   1a684:	f001 fe6f 	bl	1c366 <var_toInteger>
   1a688:	f88a 0014 	strb.w	r0, [sl, #20]
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp3)) == DLMS_ERROR_CODE_OK)
   1a68c:	68b0      	ldr	r0, [r6, #8]
   1a68e:	aa01      	add	r2, sp, #4
   1a690:	2103      	movs	r1, #3
   1a692:	f001 fcee 	bl	1c072 <va_getByIndex>
   1a696:	4604      	mov	r4, r0
   1a698:	b928      	cbnz	r0, 1a6a6 <cosem_setParameterMonitor+0xce>
                        {
                            ret = var_copy(&object->changedParameter.value, tmp3);
   1a69a:	9901      	ldr	r1, [sp, #4]
   1a69c:	f10a 0018 	add.w	r0, sl, #24
   1a6a0:	f7e9 ff84 	bl	45ac <var_copy>
   1a6a4:	4604      	mov	r4, r0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a6a6:	4620      	mov	r0, r4
   1a6a8:	b006      	add	sp, #24
   1a6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (value->vt == DLMS_DATA_TYPE_OCTET_STRING && value->byteArr != NULL)
   1a6ae:	781b      	ldrb	r3, [r3, #0]
   1a6b0:	2b09      	cmp	r3, #9
   1a6b2:	d118      	bne.n	1a6e6 <cosem_setParameterMonitor+0x10e>
   1a6b4:	68b3      	ldr	r3, [r6, #8]
   1a6b6:	b1b3      	cbz	r3, 1a6e6 <cosem_setParameterMonitor+0x10e>
            ret = var_init(&tmp2);
   1a6b8:	a802      	add	r0, sp, #8
   1a6ba:	f001 fb00 	bl	1bcbe <var_init>
            if (ret != DLMS_ERROR_CODE_OK)
   1a6be:	4604      	mov	r4, r0
   1a6c0:	2800      	cmp	r0, #0
   1a6c2:	d1f0      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
            ret = dlms_changeType2(value, DLMS_DATA_TYPE_DATETIME, &tmp2);
   1a6c4:	aa02      	add	r2, sp, #8
   1a6c6:	2119      	movs	r1, #25
   1a6c8:	4630      	mov	r0, r6
   1a6ca:	f7f6 ff03 	bl	114d4 <dlms_changeType2>
            if (ret != DLMS_ERROR_CODE_OK)
   1a6ce:	4604      	mov	r4, r0
   1a6d0:	2800      	cmp	r0, #0
   1a6d2:	d1e8      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
            time_copy(&object->captureTime, tmp2.dateTime);
   1a6d4:	f10a 0028 	add.w	r0, sl, #40	; 0x28
   1a6d8:	9904      	ldr	r1, [sp, #16]
   1a6da:	f7f4 ff48 	bl	f56e <time_copy>
            var_clear(&tmp2);
   1a6de:	a802      	add	r0, sp, #8
   1a6e0:	f001 fc49 	bl	1bf76 <var_clear>
   1a6e4:	e7df      	b.n	1a6a6 <cosem_setParameterMonitor+0xce>
            time_clear(&object->captureTime);
   1a6e6:	f10a 0028 	add.w	r0, sl, #40	; 0x28
   1a6ea:	f7f4 ff0f 	bl	f50c <time_clear>
   1a6ee:	e786      	b.n	1a5fe <cosem_setParameterMonitor+0x26>
        obj_clearParametersList(&object->parameters);
   1a6f0:	f101 0a34 	add.w	sl, r1, #52	; 0x34
   1a6f4:	4650      	mov	r0, sl
   1a6f6:	f7fb fabd 	bl	15c74 <obj_clearParametersList>
        if (value->Arr != NULL)
   1a6fa:	68b3      	ldr	r3, [r6, #8]
   1a6fc:	2b00      	cmp	r3, #0
   1a6fe:	f43f af7e 	beq.w	1a5fe <cosem_setParameterMonitor+0x26>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a702:	f04f 0800 	mov.w	r8, #0
   1a706:	e05d      	b.n	1a7c4 <cosem_setParameterMonitor+0x1ec>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1a708:	466a      	mov	r2, sp
   1a70a:	4641      	mov	r1, r8
   1a70c:	f001 fcb1 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a710:	4604      	mov	r4, r0
   1a712:	2800      	cmp	r0, #0
   1a714:	d1c7      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
                ret = va_getByIndex(tmp->Arr, 0, &tmp3);
   1a716:	9b00      	ldr	r3, [sp, #0]
   1a718:	4601      	mov	r1, r0
   1a71a:	aa01      	add	r2, sp, #4
   1a71c:	6898      	ldr	r0, [r3, #8]
   1a71e:	f001 fca8 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a722:	4604      	mov	r4, r0
   1a724:	2800      	cmp	r0, #0
   1a726:	d1be      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1a728:	9801      	ldr	r0, [sp, #4]
   1a72a:	f001 fe1c 	bl	1c366 <var_toInteger>
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1a72e:	9b00      	ldr	r3, [sp, #0]
                type = (DLMS_OBJECT_TYPE)var_toInteger(tmp3);
   1a730:	fa1f f980 	uxth.w	r9, r0
                ret = va_getByIndex(tmp->Arr, 1, &tmp3);
   1a734:	aa01      	add	r2, sp, #4
   1a736:	6898      	ldr	r0, [r3, #8]
   1a738:	2101      	movs	r1, #1
   1a73a:	f001 fc9a 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a73e:	4604      	mov	r4, r0
   1a740:	2800      	cmp	r0, #0
   1a742:	d1b0      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   1a744:	9b01      	ldr	r3, [sp, #4]
                obj = NULL;
   1a746:	9002      	str	r0, [sp, #8]
                if ((ret = oa_findByLN(&settings->objects, type, tmp3->byteArr->data, &obj)) != 0)
   1a748:	689a      	ldr	r2, [r3, #8]
   1a74a:	4649      	mov	r1, r9
   1a74c:	6812      	ldr	r2, [r2, #0]
   1a74e:	ab02      	add	r3, sp, #8
   1a750:	f107 0098 	add.w	r0, r7, #152	; 0x98
   1a754:	f001 fa4a 	bl	1bbec <oa_findByLN>
   1a758:	4604      	mov	r4, r0
   1a75a:	2800      	cmp	r0, #0
   1a75c:	d1a3      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
                if (obj == NULL)
   1a75e:	9b02      	ldr	r3, [sp, #8]
   1a760:	b99b      	cbnz	r3, 1a78a <cosem_setParameterMonitor+0x1b2>
                    if ((ret = cosem_createObject(type, &obj)) != 0)
   1a762:	a902      	add	r1, sp, #8
   1a764:	4648      	mov	r0, r9
   1a766:	f7e7 fcd3 	bl	2110 <cosem_createObject>
   1a76a:	4604      	mov	r4, r0
   1a76c:	2800      	cmp	r0, #0
   1a76e:	d19a      	bne.n	1a6a6 <cosem_setParameterMonitor+0xce>
                    oa_push(&settings->releasedObjects, obj);
   1a770:	9902      	ldr	r1, [sp, #8]
   1a772:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1a776:	f001 f9aa 	bl	1bace <oa_push>
                    memcpy(obj->logicalName, tmp3->byteArr->data, tmp3->byteArr->size);
   1a77a:	9b01      	ldr	r3, [sp, #4]
   1a77c:	9802      	ldr	r0, [sp, #8]
   1a77e:	689b      	ldr	r3, [r3, #8]
   1a780:	3006      	adds	r0, #6
   1a782:	88da      	ldrh	r2, [r3, #6]
   1a784:	6819      	ldr	r1, [r3, #0]
   1a786:	f003 fd3c 	bl	1e202 <memcpy>
                it = (gxTarget*)gxmalloc(sizeof(gxTarget));
   1a78a:	2004      	movs	r0, #4
   1a78c:	f7f2 fdb2 	bl	d2f4 <malloc>
                if (it == NULL)
   1a790:	4605      	mov	r5, r0
   1a792:	b1e0      	cbz	r0, 1a7ce <cosem_setParameterMonitor+0x1f6>
                ret = va_getByIndex(tmp->Arr, 2, &tmp3);
   1a794:	9b00      	ldr	r3, [sp, #0]
   1a796:	aa01      	add	r2, sp, #4
   1a798:	6898      	ldr	r0, [r3, #8]
   1a79a:	2102      	movs	r1, #2
   1a79c:	f001 fc69 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1a7a0:	4604      	mov	r4, r0
   1a7a2:	2800      	cmp	r0, #0
   1a7a4:	f47f af7f 	bne.w	1a6a6 <cosem_setParameterMonitor+0xce>
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   1a7a8:	9801      	ldr	r0, [sp, #4]
   1a7aa:	f001 fddc 	bl	1c366 <var_toInteger>
                arr_push(&object->parameters, key_init(obj, it));
   1a7ae:	4629      	mov	r1, r5
                it->attributeIndex = (unsigned char)var_toInteger(tmp3);
   1a7b0:	7028      	strb	r0, [r5, #0]
                arr_push(&object->parameters, key_init(obj, it));
   1a7b2:	9802      	ldr	r0, [sp, #8]
   1a7b4:	f7fa fcbd 	bl	15132 <key_init>
   1a7b8:	4601      	mov	r1, r0
   1a7ba:	4650      	mov	r0, sl
   1a7bc:	f7f7 f9b0 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1a7c0:	f108 0801 	add.w	r8, r8, #1
   1a7c4:	68b0      	ldr	r0, [r6, #8]
   1a7c6:	88c3      	ldrh	r3, [r0, #6]
   1a7c8:	4543      	cmp	r3, r8
   1a7ca:	d19d      	bne.n	1a708 <cosem_setParameterMonitor+0x130>
   1a7cc:	e717      	b.n	1a5fe <cosem_setParameterMonitor+0x26>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1a7ce:	f44f 7482 	mov.w	r4, #260	; 0x104
   1a7d2:	e768      	b.n	1a6a6 <cosem_setParameterMonitor+0xce>
    switch (index)
   1a7d4:	f44f 7481 	mov.w	r4, #258	; 0x102
   1a7d8:	e765      	b.n	1a6a6 <cosem_setParameterMonitor+0xce>

0001a7da <cosem_setLlcSscsSetup>:
    gxLlcSscsSetup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1a7da:	2a02      	cmp	r2, #2
{
   1a7dc:	b510      	push	{r4, lr}
   1a7de:	4618      	mov	r0, r3
   1a7e0:	460c      	mov	r4, r1
    switch (index)
   1a7e2:	d004      	beq.n	1a7ee <cosem_setLlcSscsSetup+0x14>
   1a7e4:	2a03      	cmp	r2, #3
   1a7e6:	d007      	beq.n	1a7f8 <cosem_setLlcSscsSetup+0x1e>
   1a7e8:	f44f 7081 	mov.w	r0, #258	; 0x102
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a7ec:	bd10      	pop	{r4, pc}
        object->serviceNodeAddress = (uint16_t)var_toInteger(value);
   1a7ee:	f001 fdba 	bl	1c366 <var_toInteger>
   1a7f2:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   1a7f4:	2000      	movs	r0, #0
    return ret;
   1a7f6:	e7f9      	b.n	1a7ec <cosem_setLlcSscsSetup+0x12>
        object->baseNodeAddress = (uint16_t)var_toInteger(value);
   1a7f8:	f001 fdb5 	bl	1c366 <var_toInteger>
   1a7fc:	8260      	strh	r0, [r4, #18]
   1a7fe:	e7f9      	b.n	1a7f4 <cosem_setLlcSscsSetup+0x1a>

0001a800 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters>:
    gxPrimeNbOfdmPlcPhysicalLayerCounters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1a800:	3a02      	subs	r2, #2
{
   1a802:	b510      	push	{r4, lr}
   1a804:	4618      	mov	r0, r3
   1a806:	460c      	mov	r4, r1
   1a808:	2a03      	cmp	r2, #3
   1a80a:	d814      	bhi.n	1a836 <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x36>
   1a80c:	e8df f002 	tbb	[pc, r2]
   1a810:	0f0b0702 	.word	0x0f0b0702
    {
    case 2:
        object->crcIncorrectCount =(uint16_t) var_toInteger(value);
   1a814:	f001 fda7 	bl	1c366 <var_toInteger>
   1a818:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   1a81a:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a81c:	bd10      	pop	{r4, pc}
        object->crcFailedCount = (uint16_t)var_toInteger(value);
   1a81e:	f001 fda2 	bl	1c366 <var_toInteger>
   1a822:	8260      	strh	r0, [r4, #18]
        break;
   1a824:	e7f9      	b.n	1a81a <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
        object->txDropCount = (uint16_t)var_toInteger(value);
   1a826:	f001 fd9e 	bl	1c366 <var_toInteger>
   1a82a:	82a0      	strh	r0, [r4, #20]
        break;
   1a82c:	e7f5      	b.n	1a81a <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
        object->rxDropCount = (uint16_t)var_toInteger(value);
   1a82e:	f001 fd9a 	bl	1c366 <var_toInteger>
   1a832:	82e0      	strh	r0, [r4, #22]
   1a834:	e7f1      	b.n	1a81a <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1a>
    int ret = 0;
   1a836:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a83a:	e7ef      	b.n	1a81c <cosem_setPrimeNbOfdmPlcPhysicalLayerCounters+0x1c>

0001a83c <cosem_setPrimeNbOfdmPlcMacSetup>:
    gxPrimeNbOfdmPlcMacSetup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1a83c:	3a02      	subs	r2, #2
{
   1a83e:	b510      	push	{r4, lr}
   1a840:	4618      	mov	r0, r3
   1a842:	460c      	mov	r4, r1
   1a844:	2a06      	cmp	r2, #6
   1a846:	d822      	bhi.n	1a88e <cosem_setPrimeNbOfdmPlcMacSetup+0x52>
   1a848:	e8df f002 	tbb	[pc, r2]
   1a84c:	110d0904 	.word	0x110d0904
   1a850:	1915      	.short	0x1915
   1a852:	1d          	.byte	0x1d
   1a853:	00          	.byte	0x00
    {
    case 2:
        object->macMinSwitchSearchTime = (unsigned char) var_toInteger(value);
   1a854:	f001 fd87 	bl	1c366 <var_toInteger>
   1a858:	7420      	strb	r0, [r4, #16]
    int ret = 0;
   1a85a:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a85c:	bd10      	pop	{r4, pc}
        object->macMaxPromotionPdu =(unsigned char)  var_toInteger(value);
   1a85e:	f001 fd82 	bl	1c366 <var_toInteger>
   1a862:	7460      	strb	r0, [r4, #17]
        break;
   1a864:	e7f9      	b.n	1a85a <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macPromotionPduTxPeriod = (unsigned char)var_toInteger(value);
   1a866:	f001 fd7e 	bl	1c366 <var_toInteger>
   1a86a:	74a0      	strb	r0, [r4, #18]
        break;
   1a86c:	e7f5      	b.n	1a85a <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macBeaconsPerFrame = (unsigned char)var_toInteger(value);
   1a86e:	f001 fd7a 	bl	1c366 <var_toInteger>
   1a872:	74e0      	strb	r0, [r4, #19]
        break;
   1a874:	e7f1      	b.n	1a85a <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macScpMaxTxAttempts = (unsigned char) var_toInteger(value);
   1a876:	f001 fd76 	bl	1c366 <var_toInteger>
   1a87a:	7520      	strb	r0, [r4, #20]
        break;
   1a87c:	e7ed      	b.n	1a85a <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macCtlReTxTimer =(unsigned char)  var_toInteger(value);
   1a87e:	f001 fd72 	bl	1c366 <var_toInteger>
   1a882:	7560      	strb	r0, [r4, #21]
        break;
   1a884:	e7e9      	b.n	1a85a <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
        object->macMaxCtlReTx = (unsigned char) var_toInteger(value);
   1a886:	f001 fd6e 	bl	1c366 <var_toInteger>
   1a88a:	75a0      	strb	r0, [r4, #22]
   1a88c:	e7e5      	b.n	1a85a <cosem_setPrimeNbOfdmPlcMacSetup+0x1e>
    int ret = 0;
   1a88e:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a892:	e7e3      	b.n	1a85c <cosem_setPrimeNbOfdmPlcMacSetup+0x20>

0001a894 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters>:
    gxPrimeNbOfdmPlcMacFunctionalParameters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1a894:	3a02      	subs	r2, #2
{
   1a896:	b570      	push	{r4, r5, r6, lr}
   1a898:	4618      	mov	r0, r3
   1a89a:	460c      	mov	r4, r1
   1a89c:	2a0c      	cmp	r2, #12
   1a89e:	d84f      	bhi.n	1a940 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0xac>
   1a8a0:	e8df f002 	tbb	[pc, r2]
   1a8a4:	14100c07 	.word	0x14100c07
   1a8a8:	312c2823 	.word	0x312c2823
   1a8ac:	45403b36 	.word	0x45403b36
   1a8b0:	4a          	.byte	0x4a
   1a8b1:	00          	.byte	0x00
    {
    case 2:
        object->lnId = (short)var_toInteger(value);
   1a8b2:	f001 fd58 	bl	1c366 <var_toInteger>
   1a8b6:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   1a8b8:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a8ba:	bd70      	pop	{r4, r5, r6, pc}
        object->lsId = (unsigned char) var_toInteger(value);
   1a8bc:	f001 fd53 	bl	1c366 <var_toInteger>
   1a8c0:	74a0      	strb	r0, [r4, #18]
        break;
   1a8c2:	e7f9      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->sId =(unsigned char)  var_toInteger(value);
   1a8c4:	f001 fd4f 	bl	1c366 <var_toInteger>
   1a8c8:	74e0      	strb	r0, [r4, #19]
        break;
   1a8ca:	e7f5      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   1a8cc:	6885      	ldr	r5, [r0, #8]
        object->sna.size = 0;
   1a8ce:	2600      	movs	r6, #0
   1a8d0:	834e      	strh	r6, [r1, #26]
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   1a8d2:	4628      	mov	r0, r5
   1a8d4:	f7f3 fd2f 	bl	e336 <bb_size>
   1a8d8:	4632      	mov	r2, r6
   1a8da:	4603      	mov	r3, r0
   1a8dc:	4629      	mov	r1, r5
   1a8de:	f104 0014 	add.w	r0, r4, #20
}
   1a8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = bb_set2(&object->sna, value->byteArr, 0, bb_size(value->byteArr));
   1a8e6:	f7f3 bea7 	b.w	e638 <bb_set2>
        object->state = (DLMS_MAC_STATE)var_toInteger(value);
   1a8ea:	f001 fd3c 	bl	1c366 <var_toInteger>
   1a8ee:	f884 0020 	strb.w	r0, [r4, #32]
        break;
   1a8f2:	e7e1      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->scpLength = (short)  var_toInteger(value);
   1a8f4:	f001 fd37 	bl	1c366 <var_toInteger>
   1a8f8:	8460      	strh	r0, [r4, #34]	; 0x22
        break;
   1a8fa:	e7dd      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->nodeHierarchyLevel = (unsigned char)var_toInteger(value);
   1a8fc:	f001 fd33 	bl	1c366 <var_toInteger>
   1a900:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
        break;
   1a904:	e7d8      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconSlotCount = (unsigned char)var_toInteger(value);
   1a906:	f001 fd2e 	bl	1c366 <var_toInteger>
   1a90a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
        break;
   1a90e:	e7d3      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconRxSlot = (unsigned char)var_toInteger(value);
   1a910:	f001 fd29 	bl	1c366 <var_toInteger>
   1a914:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
        break;
   1a918:	e7ce      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconTxSlot = (unsigned char)var_toInteger(value);
   1a91a:	f001 fd24 	bl	1c366 <var_toInteger>
   1a91e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
        break;
   1a922:	e7c9      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconRxFrequency =(unsigned char) var_toInteger(value);
   1a924:	f001 fd1f 	bl	1c366 <var_toInteger>
   1a928:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        break;
   1a92c:	e7c4      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->beaconTxFrequency = (unsigned char)var_toInteger(value);
   1a92e:	f001 fd1a 	bl	1c366 <var_toInteger>
   1a932:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
        break;
   1a936:	e7bf      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
        object->capabilities = (DLMS_MAC_CAPABILITIES)var_toInteger(value);
   1a938:	f001 fd15 	bl	1c366 <var_toInteger>
   1a93c:	8560      	strh	r0, [r4, #42]	; 0x2a
   1a93e:	e7bb      	b.n	1a8b8 <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x24>
    int ret = 0;
   1a940:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a944:	e7b9      	b.n	1a8ba <cosem_setPrimeNbOfdmPlcMacFunctionalParameters+0x26>

0001a946 <cosem_setPrimeNbOfdmPlcMacCounters>:
    gxPrimeNbOfdmPlcMacCounters* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1a946:	3a02      	subs	r2, #2
{
   1a948:	b510      	push	{r4, lr}
   1a94a:	4618      	mov	r0, r3
   1a94c:	460c      	mov	r4, r1
   1a94e:	2a05      	cmp	r2, #5
   1a950:	d81d      	bhi.n	1a98e <cosem_setPrimeNbOfdmPlcMacCounters+0x48>
   1a952:	e8df f002 	tbb	[pc, r2]
   1a956:	0803      	.short	0x0803
   1a958:	1814100c 	.word	0x1814100c
    {
    case 2:
        object->txDataPktCount = var_toInteger(value);
   1a95c:	f001 fd03 	bl	1c366 <var_toInteger>
   1a960:	6120      	str	r0, [r4, #16]
    int ret = 0;
   1a962:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1a964:	bd10      	pop	{r4, pc}
        object->rxDataPktCount = var_toInteger(value);
   1a966:	f001 fcfe 	bl	1c366 <var_toInteger>
   1a96a:	6160      	str	r0, [r4, #20]
        break;
   1a96c:	e7f9      	b.n	1a962 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->txCtrlPktCount = var_toInteger(value);
   1a96e:	f001 fcfa 	bl	1c366 <var_toInteger>
   1a972:	61a0      	str	r0, [r4, #24]
        break;
   1a974:	e7f5      	b.n	1a962 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->rxCtrlPktCount = var_toInteger(value);
   1a976:	f001 fcf6 	bl	1c366 <var_toInteger>
   1a97a:	61e0      	str	r0, [r4, #28]
        break;
   1a97c:	e7f1      	b.n	1a962 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->csmaFailCount = var_toInteger(value);
   1a97e:	f001 fcf2 	bl	1c366 <var_toInteger>
   1a982:	6220      	str	r0, [r4, #32]
        break;
   1a984:	e7ed      	b.n	1a962 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
        object->csmaChBusyCount = var_toInteger(value);
   1a986:	f001 fcee 	bl	1c366 <var_toInteger>
   1a98a:	6260      	str	r0, [r4, #36]	; 0x24
   1a98c:	e7e9      	b.n	1a962 <cosem_setPrimeNbOfdmPlcMacCounters+0x1c>
    int ret = 0;
   1a98e:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1a992:	e7e7      	b.n	1a964 <cosem_setPrimeNbOfdmPlcMacCounters+0x1e>

0001a994 <cosem_setMulticastEntries>:
#endif //DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_COUNTERS

#ifndef DLMS_IGNORE_PRIME_NB_OFDM_PLC_MAC_NETWORK_ADMINISTRATION_DATA

int cosem_setMulticastEntries(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   1a994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a998:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacMulticastEntry* it;
    arr_clear(&object->multicastEntries);
   1a99a:	f100 0710 	add.w	r7, r0, #16
   1a99e:	4638      	mov	r0, r7
   1a9a0:	f7f7 f8d3 	bl	11b4a <arr_clear>
    if (value->Arr != NULL)
   1a9a4:	68b3      	ldr	r3, [r6, #8]
   1a9a6:	2b00      	cmp	r3, #0
   1a9a8:	d130      	bne.n	1aa0c <cosem_setMulticastEntries+0x78>
            it->members = (short) var_toInteger(tmp2);
            arr_push(&object->multicastEntries, it);
        }
    }
    return 0;
}
   1a9aa:	2000      	movs	r0, #0
   1a9ac:	b002      	add	sp, #8
   1a9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   1a9b2:	466a      	mov	r2, sp
   1a9b4:	4629      	mov	r1, r5
   1a9b6:	f001 fb5c 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1a9ba:	4680      	mov	r8, r0
   1a9bc:	2800      	cmp	r0, #0
   1a9be:	d1f4      	bne.n	1a9aa <cosem_setMulticastEntries+0x16>
            it = (gxMacMulticastEntry*)gxmalloc(sizeof(gxMacMulticastEntry));
   1a9c0:	2004      	movs	r0, #4
   1a9c2:	f7f2 fc97 	bl	d2f4 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a9c6:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacMulticastEntry*)gxmalloc(sizeof(gxMacMulticastEntry));
   1a9c8:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a9ca:	aa01      	add	r2, sp, #4
   1a9cc:	6898      	ldr	r0, [r3, #8]
   1a9ce:	4641      	mov	r1, r8
   1a9d0:	f001 fb4f 	bl	1c072 <va_getByIndex>
   1a9d4:	2800      	cmp	r0, #0
   1a9d6:	d1e8      	bne.n	1a9aa <cosem_setMulticastEntries+0x16>
            it->id = (signed char) var_toInteger(tmp2);
   1a9d8:	9801      	ldr	r0, [sp, #4]
   1a9da:	f001 fcc4 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a9de:	9b00      	ldr	r3, [sp, #0]
            it->id = (signed char) var_toInteger(tmp2);
   1a9e0:	7020      	strb	r0, [r4, #0]
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1a9e2:	6898      	ldr	r0, [r3, #8]
   1a9e4:	aa01      	add	r2, sp, #4
   1a9e6:	2101      	movs	r1, #1
   1a9e8:	f001 fb43 	bl	1c072 <va_getByIndex>
   1a9ec:	2800      	cmp	r0, #0
   1a9ee:	d1dc      	bne.n	1a9aa <cosem_setMulticastEntries+0x16>
            it->members = (short) var_toInteger(tmp2);
   1a9f0:	9801      	ldr	r0, [sp, #4]
   1a9f2:	f001 fcb8 	bl	1c366 <var_toInteger>
            arr_push(&object->multicastEntries, it);
   1a9f6:	4621      	mov	r1, r4
            it->members = (short) var_toInteger(tmp2);
   1a9f8:	8060      	strh	r0, [r4, #2]
            arr_push(&object->multicastEntries, it);
   1a9fa:	4638      	mov	r0, r7
   1a9fc:	f7f7 f890 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1aa00:	3501      	adds	r5, #1
   1aa02:	68b0      	ldr	r0, [r6, #8]
   1aa04:	88c3      	ldrh	r3, [r0, #6]
   1aa06:	42ab      	cmp	r3, r5
   1aa08:	d1d3      	bne.n	1a9b2 <cosem_setMulticastEntries+0x1e>
   1aa0a:	e7ce      	b.n	1a9aa <cosem_setMulticastEntries+0x16>
   1aa0c:	2500      	movs	r5, #0
   1aa0e:	e7f8      	b.n	1aa02 <cosem_setMulticastEntries+0x6e>

0001aa10 <cosem_setSwitchTable>:


int cosem_setSwitchTable(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   1aa10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1aa12:	460d      	mov	r5, r1
    int ret = 0;
    int pos;
    arr_empty(&object->switchTable);
   1aa14:	f100 061c 	add.w	r6, r0, #28
   1aa18:	4630      	mov	r0, r6
   1aa1a:	f7f7 f8b1 	bl	11b80 <arr_empty>
    if (value->Arr != NULL)
   1aa1e:	68ab      	ldr	r3, [r5, #8]
   1aa20:	b9d3      	cbnz	r3, 1aa58 <cosem_setSwitchTable+0x48>
            *tmp = (uint16_t)var_toInteger(it);
            arr_push(&object->switchTable, tmp);
        }
    }
    return 0;
}
   1aa22:	2000      	movs	r0, #0
   1aa24:	b003      	add	sp, #12
   1aa26:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((ret = va_getByIndex(value->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
   1aa28:	aa01      	add	r2, sp, #4
   1aa2a:	4621      	mov	r1, r4
   1aa2c:	f001 fb21 	bl	1c072 <va_getByIndex>
   1aa30:	2800      	cmp	r0, #0
   1aa32:	d1f6      	bne.n	1aa22 <cosem_setSwitchTable+0x12>
            uint16_t* tmp = (uint16_t*)gxmalloc(sizeof(uint16_t));
   1aa34:	2002      	movs	r0, #2
   1aa36:	f7f2 fc5d 	bl	d2f4 <malloc>
   1aa3a:	4607      	mov	r7, r0
            *tmp = (uint16_t)var_toInteger(it);
   1aa3c:	9801      	ldr	r0, [sp, #4]
   1aa3e:	f001 fc92 	bl	1c366 <var_toInteger>
            arr_push(&object->switchTable, tmp);
   1aa42:	4639      	mov	r1, r7
            *tmp = (uint16_t)var_toInteger(it);
   1aa44:	8038      	strh	r0, [r7, #0]
            arr_push(&object->switchTable, tmp);
   1aa46:	4630      	mov	r0, r6
   1aa48:	f7f7 f86a 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1aa4c:	3401      	adds	r4, #1
   1aa4e:	68a8      	ldr	r0, [r5, #8]
   1aa50:	88c3      	ldrh	r3, [r0, #6]
   1aa52:	42a3      	cmp	r3, r4
   1aa54:	d1e8      	bne.n	1aa28 <cosem_setSwitchTable+0x18>
   1aa56:	e7e4      	b.n	1aa22 <cosem_setSwitchTable+0x12>
   1aa58:	2400      	movs	r4, #0
   1aa5a:	e7f8      	b.n	1aa4e <cosem_setSwitchTable+0x3e>

0001aa5c <cosem_setDirectTable>:

int cosem_setDirectTable(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   1aa5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aa60:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacDirectTable* it;
    arr_clear(&object->directTable);
   1aa62:	f100 0728 	add.w	r7, r0, #40	; 0x28
   1aa66:	4638      	mov	r0, r7
   1aa68:	f7f7 f86f 	bl	11b4a <arr_clear>
    if (value->Arr != NULL)
   1aa6c:	68b3      	ldr	r3, [r6, #8]
   1aa6e:	2b00      	cmp	r3, #0
   1aa70:	d171      	bne.n	1ab56 <cosem_setDirectTable+0xfa>
            }
            arr_push(&object->directTable, it);
        }
    }
    return 0;
}
   1aa72:	2000      	movs	r0, #0
   1aa74:	b002      	add	sp, #8
   1aa76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   1aa7a:	466a      	mov	r2, sp
   1aa7c:	4629      	mov	r1, r5
   1aa7e:	f001 faf8 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1aa82:	4680      	mov	r8, r0
   1aa84:	2800      	cmp	r0, #0
   1aa86:	d1f4      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            it = (gxMacDirectTable*)gxmalloc(sizeof(gxMacDirectTable));
   1aa88:	2012      	movs	r0, #18
   1aa8a:	f7f2 fc33 	bl	d2f4 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aa8e:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacDirectTable*)gxmalloc(sizeof(gxMacDirectTable));
   1aa90:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aa92:	aa01      	add	r2, sp, #4
   1aa94:	6898      	ldr	r0, [r3, #8]
   1aa96:	4641      	mov	r1, r8
   1aa98:	f001 faeb 	bl	1c072 <va_getByIndex>
   1aa9c:	2800      	cmp	r0, #0
   1aa9e:	d1e8      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            it->sourceSId = (short)var_toInteger(tmp2);
   1aaa0:	9801      	ldr	r0, [sp, #4]
   1aaa2:	f001 fc60 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aaa6:	9b00      	ldr	r3, [sp, #0]
            it->sourceSId = (short)var_toInteger(tmp2);
   1aaa8:	8020      	strh	r0, [r4, #0]
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aaaa:	aa01      	add	r2, sp, #4
   1aaac:	6898      	ldr	r0, [r3, #8]
   1aaae:	2101      	movs	r1, #1
   1aab0:	f001 fadf 	bl	1c072 <va_getByIndex>
   1aab4:	2800      	cmp	r0, #0
   1aab6:	d1dc      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            it->sourceLnId = (short)var_toInteger(tmp2);
   1aab8:	9801      	ldr	r0, [sp, #4]
   1aaba:	f001 fc54 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aabe:	9b00      	ldr	r3, [sp, #0]
            it->sourceLnId = (short)var_toInteger(tmp2);
   1aac0:	8060      	strh	r0, [r4, #2]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aac2:	aa01      	add	r2, sp, #4
   1aac4:	6898      	ldr	r0, [r3, #8]
   1aac6:	2102      	movs	r1, #2
   1aac8:	f001 fad3 	bl	1c072 <va_getByIndex>
   1aacc:	2800      	cmp	r0, #0
   1aace:	d1d0      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            it->sourceLcId = (short)var_toInteger(tmp2);
   1aad0:	9801      	ldr	r0, [sp, #4]
   1aad2:	f001 fc48 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aad6:	9b00      	ldr	r3, [sp, #0]
            it->sourceLcId = (short)var_toInteger(tmp2);
   1aad8:	80a0      	strh	r0, [r4, #4]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aada:	aa01      	add	r2, sp, #4
   1aadc:	6898      	ldr	r0, [r3, #8]
   1aade:	2103      	movs	r1, #3
   1aae0:	f001 fac7 	bl	1c072 <va_getByIndex>
   1aae4:	2800      	cmp	r0, #0
   1aae6:	d1c4      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            it->destinationSId = (short)var_toInteger(tmp2);
   1aae8:	9801      	ldr	r0, [sp, #4]
   1aaea:	f001 fc3c 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aaee:	9b00      	ldr	r3, [sp, #0]
            it->destinationSId = (short)var_toInteger(tmp2);
   1aaf0:	80e0      	strh	r0, [r4, #6]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aaf2:	aa01      	add	r2, sp, #4
   1aaf4:	6898      	ldr	r0, [r3, #8]
   1aaf6:	2104      	movs	r1, #4
   1aaf8:	f001 fabb 	bl	1c072 <va_getByIndex>
   1aafc:	2800      	cmp	r0, #0
   1aafe:	d1b8      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            it->destinationLnId = (short)var_toInteger(tmp2);
   1ab00:	9801      	ldr	r0, [sp, #4]
   1ab02:	f001 fc30 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ab06:	9b00      	ldr	r3, [sp, #0]
            it->destinationLnId = (short)var_toInteger(tmp2);
   1ab08:	8120      	strh	r0, [r4, #8]
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ab0a:	aa01      	add	r2, sp, #4
   1ab0c:	6898      	ldr	r0, [r3, #8]
   1ab0e:	2105      	movs	r1, #5
   1ab10:	f001 faaf 	bl	1c072 <va_getByIndex>
   1ab14:	2800      	cmp	r0, #0
   1ab16:	d1ac      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            it->destinationLcId = (short) var_toInteger(tmp2);
   1ab18:	9801      	ldr	r0, [sp, #4]
   1ab1a:	f001 fc24 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ab1e:	9b00      	ldr	r3, [sp, #0]
            it->destinationLcId = (short) var_toInteger(tmp2);
   1ab20:	8160      	strh	r0, [r4, #10]
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ab22:	aa01      	add	r2, sp, #4
   1ab24:	6898      	ldr	r0, [r3, #8]
   1ab26:	2106      	movs	r1, #6
   1ab28:	f001 faa3 	bl	1c072 <va_getByIndex>
   1ab2c:	2800      	cmp	r0, #0
   1ab2e:	d1a0      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            if ((ret = bb_get(tmp2->byteArr, it->did, sizeof(it->did))) != DLMS_ERROR_CODE_OK)
   1ab30:	9b01      	ldr	r3, [sp, #4]
   1ab32:	2206      	movs	r2, #6
   1ab34:	6898      	ldr	r0, [r3, #8]
   1ab36:	f104 010c 	add.w	r1, r4, #12
   1ab3a:	f7f3 ffb7 	bl	eaac <bb_get>
   1ab3e:	2800      	cmp	r0, #0
   1ab40:	d197      	bne.n	1aa72 <cosem_setDirectTable+0x16>
            arr_push(&object->directTable, it);
   1ab42:	4621      	mov	r1, r4
   1ab44:	4638      	mov	r0, r7
   1ab46:	f7f6 ffeb 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1ab4a:	3501      	adds	r5, #1
   1ab4c:	68b0      	ldr	r0, [r6, #8]
   1ab4e:	88c3      	ldrh	r3, [r0, #6]
   1ab50:	42ab      	cmp	r3, r5
   1ab52:	d192      	bne.n	1aa7a <cosem_setDirectTable+0x1e>
   1ab54:	e78d      	b.n	1aa72 <cosem_setDirectTable+0x16>
   1ab56:	2500      	movs	r5, #0
   1ab58:	e7f8      	b.n	1ab4c <cosem_setDirectTable+0xf0>

0001ab5a <cosem_setAvailableSwitches>:

int cosem_setAvailableSwitches(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   1ab5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab5c:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacAvailableSwitch* it;
    obj_clearAvailableSwitches(&object->availableSwitches);
   1ab5e:	f100 0734 	add.w	r7, r0, #52	; 0x34
   1ab62:	4638      	mov	r0, r7
   1ab64:	f7fa fd48 	bl	155f8 <obj_clearAvailableSwitches>
    if (value->Arr != NULL)
   1ab68:	68b3      	ldr	r3, [r6, #8]
   1ab6a:	2b00      	cmp	r3, #0
   1ab6c:	d162      	bne.n	1ac34 <cosem_setAvailableSwitches+0xda>
            it->rxSnr = (signed char) var_toInteger(tmp2);
            arr_push(&object->availableSwitches, it);
        }
    }
    return 0;
}
   1ab6e:	2000      	movs	r0, #0
   1ab70:	b003      	add	sp, #12
   1ab72:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ab74:	9b00      	ldr	r3, [sp, #0]
   1ab76:	aa01      	add	r2, sp, #4
   1ab78:	6898      	ldr	r0, [r3, #8]
   1ab7a:	2101      	movs	r1, #1
   1ab7c:	f001 fa79 	bl	1c072 <va_getByIndex>
   1ab80:	2800      	cmp	r0, #0
   1ab82:	d153      	bne.n	1ac2c <cosem_setAvailableSwitches+0xd2>
            it->lsId = (short)var_toInteger(tmp2);
   1ab84:	9801      	ldr	r0, [sp, #4]
   1ab86:	f001 fbee 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ab8a:	9b00      	ldr	r3, [sp, #0]
            it->lsId = (short)var_toInteger(tmp2);
   1ab8c:	81a0      	strh	r0, [r4, #12]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ab8e:	aa01      	add	r2, sp, #4
   1ab90:	6898      	ldr	r0, [r3, #8]
   1ab92:	2102      	movs	r1, #2
   1ab94:	f001 fa6d 	bl	1c072 <va_getByIndex>
   1ab98:	2800      	cmp	r0, #0
   1ab9a:	d147      	bne.n	1ac2c <cosem_setAvailableSwitches+0xd2>
            it->level = (signed char) var_toInteger(tmp2);
   1ab9c:	9801      	ldr	r0, [sp, #4]
   1ab9e:	f001 fbe2 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aba2:	9b00      	ldr	r3, [sp, #0]
            it->level = (signed char) var_toInteger(tmp2);
   1aba4:	73a0      	strb	r0, [r4, #14]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aba6:	6898      	ldr	r0, [r3, #8]
   1aba8:	aa01      	add	r2, sp, #4
   1abaa:	2103      	movs	r1, #3
   1abac:	f001 fa61 	bl	1c072 <va_getByIndex>
   1abb0:	2800      	cmp	r0, #0
   1abb2:	d13b      	bne.n	1ac2c <cosem_setAvailableSwitches+0xd2>
            it->rxLevel = (signed char) var_toInteger(tmp2);
   1abb4:	9801      	ldr	r0, [sp, #4]
   1abb6:	f001 fbd6 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1abba:	9b00      	ldr	r3, [sp, #0]
            it->rxLevel = (signed char) var_toInteger(tmp2);
   1abbc:	73e0      	strb	r0, [r4, #15]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1abbe:	6898      	ldr	r0, [r3, #8]
   1abc0:	aa01      	add	r2, sp, #4
   1abc2:	2104      	movs	r1, #4
   1abc4:	f001 fa55 	bl	1c072 <va_getByIndex>
   1abc8:	2800      	cmp	r0, #0
   1abca:	d12f      	bne.n	1ac2c <cosem_setAvailableSwitches+0xd2>
            it->rxSnr = (signed char) var_toInteger(tmp2);
   1abcc:	9801      	ldr	r0, [sp, #4]
   1abce:	f001 fbca 	bl	1c366 <var_toInteger>
            arr_push(&object->availableSwitches, it);
   1abd2:	4621      	mov	r1, r4
            it->rxSnr = (signed char) var_toInteger(tmp2);
   1abd4:	7420      	strb	r0, [r4, #16]
            arr_push(&object->availableSwitches, it);
   1abd6:	4638      	mov	r0, r7
   1abd8:	f7f6 ffa2 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1abdc:	3501      	adds	r5, #1
   1abde:	68b0      	ldr	r0, [r6, #8]
   1abe0:	88c3      	ldrh	r3, [r0, #6]
   1abe2:	42ab      	cmp	r3, r5
   1abe4:	d0c3      	beq.n	1ab6e <cosem_setAvailableSwitches+0x14>
            ret = va_getByIndex(value->Arr, pos, &tmp);
   1abe6:	4629      	mov	r1, r5
   1abe8:	466a      	mov	r2, sp
   1abea:	f001 fa42 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1abee:	4601      	mov	r1, r0
   1abf0:	2800      	cmp	r0, #0
   1abf2:	d1bc      	bne.n	1ab6e <cosem_setAvailableSwitches+0x14>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1abf4:	9b00      	ldr	r3, [sp, #0]
   1abf6:	aa01      	add	r2, sp, #4
   1abf8:	6898      	ldr	r0, [r3, #8]
   1abfa:	f001 fa3a 	bl	1c072 <va_getByIndex>
   1abfe:	2800      	cmp	r0, #0
   1ac00:	d1b5      	bne.n	1ab6e <cosem_setAvailableSwitches+0x14>
            it = (gxMacAvailableSwitch*)gxmalloc(sizeof(gxMacAvailableSwitch));
   1ac02:	2014      	movs	r0, #20
   1ac04:	f7f2 fb76 	bl	d2f4 <malloc>
   1ac08:	4604      	mov	r4, r0
            BYTE_BUFFER_INIT(&it->sna);
   1ac0a:	f7f3 fb97 	bl	e33c <bb_init>
            bb_capacity(&it->sna, tmp2->byteArr->size);
   1ac0e:	9b01      	ldr	r3, [sp, #4]
   1ac10:	689b      	ldr	r3, [r3, #8]
   1ac12:	4620      	mov	r0, r4
   1ac14:	88d9      	ldrh	r1, [r3, #6]
   1ac16:	f7f3 fb97 	bl	e348 <bb_capacity>
            if ((ret = bb_set(&it->sna, tmp2->byteArr->data, tmp2->byteArr->size)) != DLMS_ERROR_CODE_OK)
   1ac1a:	9b01      	ldr	r3, [sp, #4]
   1ac1c:	689b      	ldr	r3, [r3, #8]
   1ac1e:	4620      	mov	r0, r4
   1ac20:	88da      	ldrh	r2, [r3, #6]
   1ac22:	6819      	ldr	r1, [r3, #0]
   1ac24:	f7f3 fcd9 	bl	e5da <bb_set>
   1ac28:	2800      	cmp	r0, #0
   1ac2a:	d0a3      	beq.n	1ab74 <cosem_setAvailableSwitches+0x1a>
                gxfree(it);
   1ac2c:	4620      	mov	r0, r4
   1ac2e:	f7f2 fb69 	bl	d304 <free>
                break;
   1ac32:	e79c      	b.n	1ab6e <cosem_setAvailableSwitches+0x14>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1ac34:	2500      	movs	r5, #0
   1ac36:	e7d2      	b.n	1abde <cosem_setAvailableSwitches+0x84>

0001ac38 <cosem_setCommunications>:

int cosem_setCommunications(gxPrimeNbOfdmPlcMacNetworkAdministrationData* object, dlmsVARIANT* value)
{
   1ac38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ac3c:	460e      	mov	r6, r1
    int ret = 0;
    int pos;
    gxMacPhyCommunication* it;
    arr_clear(&object->communications);
   1ac3e:	f100 0740 	add.w	r7, r0, #64	; 0x40
   1ac42:	4638      	mov	r0, r7
   1ac44:	f7f6 ff81 	bl	11b4a <arr_clear>
    if (value->Arr != NULL)
   1ac48:	68b3      	ldr	r3, [r6, #8]
   1ac4a:	2b00      	cmp	r3, #0
   1ac4c:	f040 808a 	bne.w	1ad64 <cosem_setCommunications+0x12c>
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
            arr_push(&object->communications, it);
        }
    }
    return 0;
}
   1ac50:	2000      	movs	r0, #0
   1ac52:	b002      	add	sp, #8
   1ac54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ret = va_getByIndex(value->Arr, pos, &tmp);
   1ac58:	466a      	mov	r2, sp
   1ac5a:	4629      	mov	r1, r5
   1ac5c:	f001 fa09 	bl	1c072 <va_getByIndex>
            if (ret != DLMS_ERROR_CODE_OK)
   1ac60:	4680      	mov	r8, r0
   1ac62:	2800      	cmp	r0, #0
   1ac64:	d1f4      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it = (gxMacPhyCommunication*)gxmalloc(sizeof(gxMacPhyCommunication));
   1ac66:	200e      	movs	r0, #14
   1ac68:	f7f2 fb44 	bl	d2f4 <malloc>
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ac6c:	9b00      	ldr	r3, [sp, #0]
            it = (gxMacPhyCommunication*)gxmalloc(sizeof(gxMacPhyCommunication));
   1ac6e:	4604      	mov	r4, r0
            if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ac70:	aa01      	add	r2, sp, #4
   1ac72:	6898      	ldr	r0, [r3, #8]
   1ac74:	4641      	mov	r1, r8
   1ac76:	f001 f9fc 	bl	1c072 <va_getByIndex>
   1ac7a:	2800      	cmp	r0, #0
   1ac7c:	d1e8      	bne.n	1ac50 <cosem_setCommunications+0x18>
            if ((ret = bb_get(tmp2->byteArr, it->eui, sizeof(it->eui))) != DLMS_ERROR_CODE_OK)
   1ac7e:	9b01      	ldr	r3, [sp, #4]
   1ac80:	2206      	movs	r2, #6
   1ac82:	6898      	ldr	r0, [r3, #8]
   1ac84:	4621      	mov	r1, r4
   1ac86:	f7f3 ff11 	bl	eaac <bb_get>
   1ac8a:	2800      	cmp	r0, #0
   1ac8c:	d1e0      	bne.n	1ac50 <cosem_setCommunications+0x18>
            if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ac8e:	9b00      	ldr	r3, [sp, #0]
   1ac90:	aa01      	add	r2, sp, #4
   1ac92:	6898      	ldr	r0, [r3, #8]
   1ac94:	2101      	movs	r1, #1
   1ac96:	f001 f9ec 	bl	1c072 <va_getByIndex>
   1ac9a:	2800      	cmp	r0, #0
   1ac9c:	d1d8      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it->txPower = (signed char) var_toInteger(tmp2);
   1ac9e:	9801      	ldr	r0, [sp, #4]
   1aca0:	f001 fb61 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aca4:	9b00      	ldr	r3, [sp, #0]
            it->txPower = (signed char) var_toInteger(tmp2);
   1aca6:	71a0      	strb	r0, [r4, #6]
            if ((ret = va_getByIndex(tmp->Arr, 2, &tmp2)) != DLMS_ERROR_CODE_OK)
   1aca8:	6898      	ldr	r0, [r3, #8]
   1acaa:	aa01      	add	r2, sp, #4
   1acac:	2102      	movs	r1, #2
   1acae:	f001 f9e0 	bl	1c072 <va_getByIndex>
   1acb2:	2800      	cmp	r0, #0
   1acb4:	d1cc      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it->txCoding = (signed char) var_toInteger(tmp2);
   1acb6:	9801      	ldr	r0, [sp, #4]
   1acb8:	f001 fb55 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1acbc:	9b00      	ldr	r3, [sp, #0]
            it->txCoding = (signed char) var_toInteger(tmp2);
   1acbe:	71e0      	strb	r0, [r4, #7]
            if ((ret = va_getByIndex(tmp->Arr, 3, &tmp2)) != DLMS_ERROR_CODE_OK)
   1acc0:	6898      	ldr	r0, [r3, #8]
   1acc2:	aa01      	add	r2, sp, #4
   1acc4:	2103      	movs	r1, #3
   1acc6:	f001 f9d4 	bl	1c072 <va_getByIndex>
   1acca:	2800      	cmp	r0, #0
   1accc:	d1c0      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it->rxCoding = (signed char) var_toInteger(tmp2);
   1acce:	9801      	ldr	r0, [sp, #4]
   1acd0:	f001 fb49 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1acd4:	9b00      	ldr	r3, [sp, #0]
            it->rxCoding = (signed char) var_toInteger(tmp2);
   1acd6:	7220      	strb	r0, [r4, #8]
            if ((ret = va_getByIndex(tmp->Arr, 4, &tmp2)) != DLMS_ERROR_CODE_OK)
   1acd8:	6898      	ldr	r0, [r3, #8]
   1acda:	aa01      	add	r2, sp, #4
   1acdc:	2104      	movs	r1, #4
   1acde:	f001 f9c8 	bl	1c072 <va_getByIndex>
   1ace2:	2800      	cmp	r0, #0
   1ace4:	d1b4      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it->rxLvl = (signed char) var_toInteger(tmp2);
   1ace6:	9801      	ldr	r0, [sp, #4]
   1ace8:	f001 fb3d 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   1acec:	9b00      	ldr	r3, [sp, #0]
            it->rxLvl = (signed char) var_toInteger(tmp2);
   1acee:	7260      	strb	r0, [r4, #9]
            if ((ret = va_getByIndex(tmp->Arr, 5, &tmp2)) != DLMS_ERROR_CODE_OK)
   1acf0:	6898      	ldr	r0, [r3, #8]
   1acf2:	aa01      	add	r2, sp, #4
   1acf4:	2105      	movs	r1, #5
   1acf6:	f001 f9bc 	bl	1c072 <va_getByIndex>
   1acfa:	2800      	cmp	r0, #0
   1acfc:	d1a8      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it->snr = (signed char) var_toInteger(tmp2);
   1acfe:	9801      	ldr	r0, [sp, #4]
   1ad00:	f001 fb31 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ad04:	9b00      	ldr	r3, [sp, #0]
            it->snr = (signed char) var_toInteger(tmp2);
   1ad06:	72a0      	strb	r0, [r4, #10]
            if ((ret = va_getByIndex(tmp->Arr, 6, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ad08:	6898      	ldr	r0, [r3, #8]
   1ad0a:	aa01      	add	r2, sp, #4
   1ad0c:	2106      	movs	r1, #6
   1ad0e:	f001 f9b0 	bl	1c072 <va_getByIndex>
   1ad12:	2800      	cmp	r0, #0
   1ad14:	d19c      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it->txPowerModified = (signed char) var_toInteger(tmp2);
   1ad16:	9801      	ldr	r0, [sp, #4]
   1ad18:	f001 fb25 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 7, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ad1c:	9b00      	ldr	r3, [sp, #0]
            it->txPowerModified = (signed char) var_toInteger(tmp2);
   1ad1e:	72e0      	strb	r0, [r4, #11]
            if ((ret = va_getByIndex(tmp->Arr, 7, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ad20:	6898      	ldr	r0, [r3, #8]
   1ad22:	aa01      	add	r2, sp, #4
   1ad24:	2107      	movs	r1, #7
   1ad26:	f001 f9a4 	bl	1c072 <va_getByIndex>
   1ad2a:	2800      	cmp	r0, #0
   1ad2c:	d190      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it->txCodingModified = (signed char) var_toInteger(tmp2);
   1ad2e:	9801      	ldr	r0, [sp, #4]
   1ad30:	f001 fb19 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(tmp->Arr, 8, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ad34:	9b00      	ldr	r3, [sp, #0]
            it->txCodingModified = (signed char) var_toInteger(tmp2);
   1ad36:	7320      	strb	r0, [r4, #12]
            if ((ret = va_getByIndex(tmp->Arr, 8, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ad38:	6898      	ldr	r0, [r3, #8]
   1ad3a:	aa01      	add	r2, sp, #4
   1ad3c:	2108      	movs	r1, #8
   1ad3e:	f001 f998 	bl	1c072 <va_getByIndex>
   1ad42:	2800      	cmp	r0, #0
   1ad44:	d184      	bne.n	1ac50 <cosem_setCommunications+0x18>
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
   1ad46:	9801      	ldr	r0, [sp, #4]
   1ad48:	f001 fb0d 	bl	1c366 <var_toInteger>
            arr_push(&object->communications, it);
   1ad4c:	4621      	mov	r1, r4
            it->rxCodingModified = (signed char) var_toInteger(tmp2);
   1ad4e:	7360      	strb	r0, [r4, #13]
            arr_push(&object->communications, it);
   1ad50:	4638      	mov	r0, r7
   1ad52:	f7f6 fee5 	bl	11b20 <arr_push>
        for (pos = 0; pos != value->Arr->size; ++pos)
   1ad56:	3501      	adds	r5, #1
   1ad58:	68b0      	ldr	r0, [r6, #8]
   1ad5a:	88c3      	ldrh	r3, [r0, #6]
   1ad5c:	42ab      	cmp	r3, r5
   1ad5e:	f47f af7b 	bne.w	1ac58 <cosem_setCommunications+0x20>
   1ad62:	e775      	b.n	1ac50 <cosem_setCommunications+0x18>
   1ad64:	2500      	movs	r5, #0
   1ad66:	e7f7      	b.n	1ad58 <cosem_setCommunications+0x120>

0001ad68 <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData>:
    gxPrimeNbOfdmPlcMacNetworkAdministrationData* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1ad68:	3a02      	subs	r2, #2
{
   1ad6a:	4608      	mov	r0, r1
   1ad6c:	4619      	mov	r1, r3
   1ad6e:	2a04      	cmp	r2, #4
   1ad70:	d80e      	bhi.n	1ad90 <cosem_setPrimeNbOfdmPlcMacNetworkAdministrationData+0x28>
   1ad72:	e8df f002 	tbb	[pc, r2]
   1ad76:	0503      	.short	0x0503
   1ad78:	0907      	.short	0x0907
   1ad7a:	0b          	.byte	0x0b
   1ad7b:	00          	.byte	0x00
    {
    case 2:
        ret = cosem_setMulticastEntries(object, value);
   1ad7c:	f7ff be0a 	b.w	1a994 <cosem_setMulticastEntries>
        break;
    case 3:
        ret = cosem_setSwitchTable(object, value);
   1ad80:	f7ff be46 	b.w	1aa10 <cosem_setSwitchTable>
        break;
    case 4:
        ret = cosem_setDirectTable(object, value);
   1ad84:	f7ff be6a 	b.w	1aa5c <cosem_setDirectTable>
        break;
    case 5:
        ret = cosem_setAvailableSwitches(object, value);
   1ad88:	f7ff bee7 	b.w	1ab5a <cosem_setAvailableSwitches>
        break;
    case 6:
        ret = cosem_setCommunications(object, value);
   1ad8c:	f7ff bf54 	b.w	1ac38 <cosem_setCommunications>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1ad90:	f44f 7081 	mov.w	r0, #258	; 0x102
   1ad94:	4770      	bx	lr

0001ad96 <cosem_setPrimeNbOfdmPlcApplicationsIdentification>:
    gxPrimeNbOfdmPlcApplicationsIdentification* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1ad96:	2a03      	cmp	r2, #3
{
   1ad98:	b538      	push	{r3, r4, r5, lr}
   1ad9a:	460c      	mov	r4, r1
   1ad9c:	461d      	mov	r5, r3
    switch (index)
   1ad9e:	d013      	beq.n	1adc8 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x32>
   1ada0:	2a04      	cmp	r2, #4
   1ada2:	d016      	beq.n	1add2 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x3c>
   1ada4:	2a02      	cmp	r2, #2
   1ada6:	d119      	bne.n	1addc <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x46>
    {
    case 2:
    {
        bb_clear(&object->firmwareVersion);
   1ada8:	3410      	adds	r4, #16
   1adaa:	4620      	mov	r0, r4
   1adac:	f7f3 fc89 	bl	e6c2 <bb_clear>
        bb_set2(&object->firmwareVersion, value->byteArr, 0, bb_size(value->byteArr));
   1adb0:	68ad      	ldr	r5, [r5, #8]
   1adb2:	4628      	mov	r0, r5
   1adb4:	f7f3 fabf 	bl	e336 <bb_size>
   1adb8:	2200      	movs	r2, #0
   1adba:	4603      	mov	r3, r0
   1adbc:	4629      	mov	r1, r5
   1adbe:	4620      	mov	r0, r4
   1adc0:	f7f3 fc3a 	bl	e638 <bb_set2>
    int ret = 0;
   1adc4:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1adc6:	bd38      	pop	{r3, r4, r5, pc}
        object->vendorId = (uint16_t)var_toInteger(value);
   1adc8:	4618      	mov	r0, r3
   1adca:	f001 facc 	bl	1c366 <var_toInteger>
   1adce:	83a0      	strh	r0, [r4, #28]
        break;
   1add0:	e7f8      	b.n	1adc4 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x2e>
        object->productId = (uint16_t)var_toInteger(value);
   1add2:	4618      	mov	r0, r3
   1add4:	f001 fac7 	bl	1c366 <var_toInteger>
   1add8:	83e0      	strh	r0, [r4, #30]
   1adda:	e7f3      	b.n	1adc4 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x2e>
    switch (index)
   1addc:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1ade0:	e7f1      	b.n	1adc6 <cosem_setPrimeNbOfdmPlcApplicationsIdentification+0x30>

0001ade2 <cosem_setArbitrator>:
int cosem_setArbitrator(
    dlmsSettings* settings,
    gxArbitrator* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   1ade2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ade6:	3a02      	subs	r2, #2
   1ade8:	4680      	mov	r8, r0
   1adea:	460c      	mov	r4, r1
   1adec:	461d      	mov	r5, r3
   1adee:	2a04      	cmp	r2, #4
   1adf0:	f200 80de 	bhi.w	1afb0 <cosem_setArbitrator+0x1ce>
   1adf4:	e8df f012 	tbh	[pc, r2, lsl #1]
   1adf8:	005e0005 	.word	0x005e0005
   1adfc:	00ac0086 	.word	0x00ac0086
   1ae00:	00d6      	.short	0x00d6
    dlmsVARIANT* tmp, * tmp2;
    switch (index)
    {
    case 2:
    {
        arr_clear(&object->actions);
   1ae02:	3410      	adds	r4, #16
   1ae04:	4620      	mov	r0, r4
   1ae06:	f7f6 fea0 	bl	11b4a <arr_clear>
        if (value->Arr != NULL)
   1ae0a:	68ab      	ldr	r3, [r5, #8]
   1ae0c:	2b00      	cmp	r3, #0
   1ae0e:	d14e      	bne.n	1aeae <cosem_setArbitrator+0xcc>
    int pos, ret = 0;
   1ae10:	2000      	movs	r0, #0
        }
    }
    break;
    case 6:
        object->lastOutcome = (unsigned char)var_toInteger(value);
        break;
   1ae12:	e049      	b.n	1aea8 <cosem_setArbitrator+0xc6>
                    if ((ret = cosem_createObject(DLMS_OBJECT_TYPE_SCRIPT_TABLE, (gxObject**)&it->script)) != 0)
   1ae14:	4631      	mov	r1, r6
   1ae16:	2009      	movs	r0, #9
   1ae18:	f7e7 f97a 	bl	2110 <cosem_createObject>
   1ae1c:	2800      	cmp	r0, #0
   1ae1e:	d143      	bne.n	1aea8 <cosem_setArbitrator+0xc6>
                    memcpy(it->script->base.logicalName, tmp2->byteArr->data, tmp2->byteArr->size);
   1ae20:	9b01      	ldr	r3, [sp, #4]
   1ae22:	6830      	ldr	r0, [r6, #0]
   1ae24:	689b      	ldr	r3, [r3, #8]
   1ae26:	3006      	adds	r0, #6
   1ae28:	6819      	ldr	r1, [r3, #0]
   1ae2a:	88da      	ldrh	r2, [r3, #6]
   1ae2c:	f003 f9e9 	bl	1e202 <memcpy>
                    ret = oa_push(&settings->releasedObjects, &it->script->base);
   1ae30:	6831      	ldr	r1, [r6, #0]
   1ae32:	f108 00e4 	add.w	r0, r8, #228	; 0xe4
   1ae36:	f000 fe4a 	bl	1bace <oa_push>
                    if (ret != DLMS_ERROR_CODE_OK)
   1ae3a:	b368      	cbz	r0, 1ae98 <cosem_setArbitrator+0xb6>
   1ae3c:	e034      	b.n	1aea8 <cosem_setArbitrator+0xc6>
                it->scriptSelector = (uint16_t)var_toInteger(tmp2);
   1ae3e:	9801      	ldr	r0, [sp, #4]
   1ae40:	f001 fa91 	bl	1c366 <var_toInteger>
                arr_push(&object->actions, it);
   1ae44:	4631      	mov	r1, r6
                it->scriptSelector = (uint16_t)var_toInteger(tmp2);
   1ae46:	80b0      	strh	r0, [r6, #4]
                arr_push(&object->actions, it);
   1ae48:	4620      	mov	r0, r4
   1ae4a:	f7f6 fe69 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1ae4e:	3701      	adds	r7, #1
   1ae50:	68ab      	ldr	r3, [r5, #8]
   1ae52:	88db      	ldrh	r3, [r3, #6]
   1ae54:	42bb      	cmp	r3, r7
   1ae56:	d0db      	beq.n	1ae10 <cosem_setArbitrator+0x2e>
                it = (gxActionItem*)gxmalloc(sizeof(gxActionItem));
   1ae58:	2008      	movs	r0, #8
   1ae5a:	f7f2 fa4b 	bl	d2f4 <malloc>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1ae5e:	466a      	mov	r2, sp
                it = (gxActionItem*)gxmalloc(sizeof(gxActionItem));
   1ae60:	4606      	mov	r6, r0
                it->script = NULL;
   1ae62:	f8c0 9000 	str.w	r9, [r0]
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1ae66:	4639      	mov	r1, r7
   1ae68:	68a8      	ldr	r0, [r5, #8]
   1ae6a:	f001 f902 	bl	1c072 <va_getByIndex>
   1ae6e:	b9d8      	cbnz	r0, 1aea8 <cosem_setArbitrator+0xc6>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ae70:	9b00      	ldr	r3, [sp, #0]
   1ae72:	4601      	mov	r1, r0
   1ae74:	aa01      	add	r2, sp, #4
   1ae76:	6898      	ldr	r0, [r3, #8]
   1ae78:	f001 f8fb 	bl	1c072 <va_getByIndex>
   1ae7c:	b9a0      	cbnz	r0, 1aea8 <cosem_setArbitrator+0xc6>
                if ((ret = oa_findByLN(&settings->objects, DLMS_OBJECT_TYPE_SCRIPT_TABLE, tmp2->byteArr->data, (gxObject**)&it->script)) != 0)
   1ae7e:	9b01      	ldr	r3, [sp, #4]
   1ae80:	689a      	ldr	r2, [r3, #8]
   1ae82:	2109      	movs	r1, #9
   1ae84:	6812      	ldr	r2, [r2, #0]
   1ae86:	4633      	mov	r3, r6
   1ae88:	f108 0098 	add.w	r0, r8, #152	; 0x98
   1ae8c:	f000 feae 	bl	1bbec <oa_findByLN>
   1ae90:	b950      	cbnz	r0, 1aea8 <cosem_setArbitrator+0xc6>
                if (it->script == NULL)
   1ae92:	6833      	ldr	r3, [r6, #0]
   1ae94:	2b00      	cmp	r3, #0
   1ae96:	d0bd      	beq.n	1ae14 <cosem_setArbitrator+0x32>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1ae98:	9b00      	ldr	r3, [sp, #0]
   1ae9a:	aa01      	add	r2, sp, #4
   1ae9c:	6898      	ldr	r0, [r3, #8]
   1ae9e:	2101      	movs	r1, #1
   1aea0:	f001 f8e7 	bl	1c072 <va_getByIndex>
   1aea4:	2800      	cmp	r0, #0
   1aea6:	d0ca      	beq.n	1ae3e <cosem_setArbitrator+0x5c>
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1aea8:	b003      	add	sp, #12
   1aeaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            for (pos = 0; pos != value->Arr->size; ++pos)
   1aeae:	2700      	movs	r7, #0
                it->script = NULL;
   1aeb0:	46b9      	mov	r9, r7
   1aeb2:	e7cd      	b.n	1ae50 <cosem_setArbitrator+0x6e>
        obj_clearBitArrayList(&object->permissionsTable);
   1aeb4:	341c      	adds	r4, #28
   1aeb6:	4620      	mov	r0, r4
   1aeb8:	f7fa fb6e 	bl	15598 <obj_clearBitArrayList>
        if (value->Arr != NULL)
   1aebc:	68ab      	ldr	r3, [r5, #8]
   1aebe:	2b00      	cmp	r3, #0
   1aec0:	d0a6      	beq.n	1ae10 <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1aec2:	2600      	movs	r6, #0
   1aec4:	e019      	b.n	1aefa <cosem_setArbitrator+0x118>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1aec6:	466a      	mov	r2, sp
   1aec8:	4631      	mov	r1, r6
   1aeca:	f001 f8d2 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1aece:	2800      	cmp	r0, #0
   1aed0:	d1ea      	bne.n	1aea8 <cosem_setArbitrator+0xc6>
                ba = (bitArray*)gxmalloc(sizeof(bitArray));
   1aed2:	2008      	movs	r0, #8
   1aed4:	f7f2 fa0e 	bl	d2f4 <malloc>
   1aed8:	4607      	mov	r7, r0
                ba_init(ba);
   1aeda:	f7f3 f928 	bl	e12e <ba_init>
                if ((ba_copy(ba, tmp->bitArr->data, tmp->bitArr->size)) != 0)
   1aede:	9b00      	ldr	r3, [sp, #0]
   1aee0:	689b      	ldr	r3, [r3, #8]
   1aee2:	4638      	mov	r0, r7
   1aee4:	88da      	ldrh	r2, [r3, #6]
   1aee6:	6819      	ldr	r1, [r3, #0]
   1aee8:	f7f3 f99c 	bl	e224 <ba_copy>
   1aeec:	2800      	cmp	r0, #0
   1aeee:	d18f      	bne.n	1ae10 <cosem_setArbitrator+0x2e>
                arr_push(&object->permissionsTable, ba);
   1aef0:	4639      	mov	r1, r7
   1aef2:	4620      	mov	r0, r4
   1aef4:	f7f6 fe14 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1aef8:	3601      	adds	r6, #1
   1aefa:	68a8      	ldr	r0, [r5, #8]
   1aefc:	88c3      	ldrh	r3, [r0, #6]
   1aefe:	42b3      	cmp	r3, r6
   1af00:	d1e1      	bne.n	1aec6 <cosem_setArbitrator+0xe4>
   1af02:	e785      	b.n	1ae10 <cosem_setArbitrator+0x2e>
        arr_clear(&object->weightingsTable);
   1af04:	3428      	adds	r4, #40	; 0x28
   1af06:	4620      	mov	r0, r4
   1af08:	f7f6 fe1f 	bl	11b4a <arr_clear>
        if (value->Arr != NULL)
   1af0c:	68ab      	ldr	r3, [r5, #8]
   1af0e:	2b00      	cmp	r3, #0
   1af10:	f43f af7e 	beq.w	1ae10 <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1af14:	2600      	movs	r6, #0
   1af16:	e016      	b.n	1af46 <cosem_setArbitrator+0x164>
                ret = va_getByIndex(value->Arr, pos, &tmp);
   1af18:	466a      	mov	r2, sp
   1af1a:	4631      	mov	r1, r6
   1af1c:	f001 f8a9 	bl	1c072 <va_getByIndex>
                if (ret != DLMS_ERROR_CODE_OK)
   1af20:	2800      	cmp	r0, #0
   1af22:	d1c1      	bne.n	1aea8 <cosem_setArbitrator+0xc6>
                tmp2 = (dlmsVARIANT*)gxmalloc(sizeof(dlmsVARIANT));
   1af24:	2010      	movs	r0, #16
   1af26:	f7f2 f9e5 	bl	d2f4 <malloc>
   1af2a:	4607      	mov	r7, r0
                var_init(tmp2);
   1af2c:	f000 fec7 	bl	1bcbe <var_init>
                ret = var_copy(tmp2, tmp);
   1af30:	9900      	ldr	r1, [sp, #0]
   1af32:	4638      	mov	r0, r7
   1af34:	f7e9 fb3a 	bl	45ac <var_copy>
                if (ret != 0)
   1af38:	2800      	cmp	r0, #0
   1af3a:	d1b5      	bne.n	1aea8 <cosem_setArbitrator+0xc6>
                arr_push(&object->weightingsTable, tmp2);
   1af3c:	4639      	mov	r1, r7
   1af3e:	4620      	mov	r0, r4
   1af40:	f7f6 fdee 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1af44:	3601      	adds	r6, #1
   1af46:	68a8      	ldr	r0, [r5, #8]
   1af48:	88c3      	ldrh	r3, [r0, #6]
   1af4a:	42b3      	cmp	r3, r6
   1af4c:	d1e4      	bne.n	1af18 <cosem_setArbitrator+0x136>
   1af4e:	e75f      	b.n	1ae10 <cosem_setArbitrator+0x2e>
        obj_clearBitArrayList(&object->mostRecentRequestsTable);
   1af50:	3434      	adds	r4, #52	; 0x34
   1af52:	4620      	mov	r0, r4
   1af54:	f7fa fb20 	bl	15598 <obj_clearBitArrayList>
        if (value->Arr != NULL)
   1af58:	68ab      	ldr	r3, [r5, #8]
   1af5a:	2b00      	cmp	r3, #0
   1af5c:	f43f af58 	beq.w	1ae10 <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1af60:	2600      	movs	r6, #0
   1af62:	e01a      	b.n	1af9a <cosem_setArbitrator+0x1b8>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1af64:	466a      	mov	r2, sp
   1af66:	4631      	mov	r1, r6
   1af68:	f001 f883 	bl	1c072 <va_getByIndex>
   1af6c:	2800      	cmp	r0, #0
   1af6e:	d19b      	bne.n	1aea8 <cosem_setArbitrator+0xc6>
                it = (bitArray*)gxmalloc(sizeof(bitArray));
   1af70:	2008      	movs	r0, #8
   1af72:	f7f2 f9bf 	bl	d2f4 <malloc>
   1af76:	4607      	mov	r7, r0
                ba_init(it);
   1af78:	f7f3 f8d9 	bl	e12e <ba_init>
                if ((ba_copy(it, tmp->bitArr->data, tmp->bitArr->size)) != 0)
   1af7c:	9b00      	ldr	r3, [sp, #0]
   1af7e:	689b      	ldr	r3, [r3, #8]
   1af80:	4638      	mov	r0, r7
   1af82:	88da      	ldrh	r2, [r3, #6]
   1af84:	6819      	ldr	r1, [r3, #0]
   1af86:	f7f3 f94d 	bl	e224 <ba_copy>
   1af8a:	2800      	cmp	r0, #0
   1af8c:	f47f af40 	bne.w	1ae10 <cosem_setArbitrator+0x2e>
                arr_push(&object->mostRecentRequestsTable, it);
   1af90:	4639      	mov	r1, r7
   1af92:	4620      	mov	r0, r4
   1af94:	f7f6 fdc4 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1af98:	3601      	adds	r6, #1
   1af9a:	68a8      	ldr	r0, [r5, #8]
   1af9c:	88c3      	ldrh	r3, [r0, #6]
   1af9e:	42b3      	cmp	r3, r6
   1afa0:	d1e0      	bne.n	1af64 <cosem_setArbitrator+0x182>
   1afa2:	e735      	b.n	1ae10 <cosem_setArbitrator+0x2e>
        object->lastOutcome = (unsigned char)var_toInteger(value);
   1afa4:	4628      	mov	r0, r5
   1afa6:	f001 f9de 	bl	1c366 <var_toInteger>
   1afaa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   1afae:	e72f      	b.n	1ae10 <cosem_setArbitrator+0x2e>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1afb0:	f44f 7081 	mov.w	r0, #258	; 0x102
   1afb4:	e778      	b.n	1aea8 <cosem_setArbitrator+0xc6>

0001afb6 <cosem_setIec8802LlcType1Setup>:
    gxIec8802LlcType1Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   1afb6:	2a02      	cmp	r2, #2
{
   1afb8:	b510      	push	{r4, lr}
   1afba:	4618      	mov	r0, r3
   1afbc:	460c      	mov	r4, r1
    switch (index)
   1afbe:	d104      	bne.n	1afca <cosem_setIec8802LlcType1Setup+0x14>
    {
    case 2:
        object->maximumOctetsUiPdu = (uint16_t)var_toInteger(value);
   1afc0:	f001 f9d1 	bl	1c366 <var_toInteger>
   1afc4:	8220      	strh	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   1afc6:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1afc8:	bd10      	pop	{r4, pc}
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1afca:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1afce:	e7fb      	b.n	1afc8 <cosem_setIec8802LlcType1Setup+0x12>

0001afd0 <cosem_setIec8802LlcType2Setup>:
    gxIec8802LlcType2Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   1afd0:	3a02      	subs	r2, #2
{
   1afd2:	b510      	push	{r4, lr}
   1afd4:	4618      	mov	r0, r3
   1afd6:	460c      	mov	r4, r1
   1afd8:	2a07      	cmp	r2, #7
   1afda:	d826      	bhi.n	1b02a <cosem_setIec8802LlcType2Setup+0x5a>
   1afdc:	e8df f002 	tbb	[pc, r2]
   1afe0:	110d0904 	.word	0x110d0904
   1afe4:	211d1915 	.word	0x211d1915
    {
    case 2:
        object->transmitWindowSizeK = (unsigned char)var_toInteger(value);
   1afe8:	f001 f9bd 	bl	1c366 <var_toInteger>
   1afec:	7420      	strb	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   1afee:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1aff0:	bd10      	pop	{r4, pc}
        object->transmitWindowSizeRW = (unsigned char)var_toInteger(value);
   1aff2:	f001 f9b8 	bl	1c366 <var_toInteger>
   1aff6:	7460      	strb	r0, [r4, #17]
        break;
   1aff8:	e7f9      	b.n	1afee <cosem_setIec8802LlcType2Setup+0x1e>
        object->maximumOctetsPdu = (uint16_t)var_toInteger(value);
   1affa:	f001 f9b4 	bl	1c366 <var_toInteger>
   1affe:	8260      	strh	r0, [r4, #18]
        break;
   1b000:	e7f5      	b.n	1afee <cosem_setIec8802LlcType2Setup+0x1e>
        object->maximumNumberTransmissions = (unsigned char)var_toInteger(value);
   1b002:	f001 f9b0 	bl	1c366 <var_toInteger>
   1b006:	7520      	strb	r0, [r4, #20]
        break;
   1b008:	e7f1      	b.n	1afee <cosem_setIec8802LlcType2Setup+0x1e>
        object->acknowledgementTimer = (uint16_t)var_toInteger(value);
   1b00a:	f001 f9ac 	bl	1c366 <var_toInteger>
   1b00e:	82e0      	strh	r0, [r4, #22]
        break;
   1b010:	e7ed      	b.n	1afee <cosem_setIec8802LlcType2Setup+0x1e>
        object->bitTimer = (uint16_t)var_toInteger(value);
   1b012:	f001 f9a8 	bl	1c366 <var_toInteger>
   1b016:	8320      	strh	r0, [r4, #24]
        break;
   1b018:	e7e9      	b.n	1afee <cosem_setIec8802LlcType2Setup+0x1e>
        object->rejectTimer = (uint16_t)var_toInteger(value);
   1b01a:	f001 f9a4 	bl	1c366 <var_toInteger>
   1b01e:	8360      	strh	r0, [r4, #26]
        break;
   1b020:	e7e5      	b.n	1afee <cosem_setIec8802LlcType2Setup+0x1e>
        object->busyStateTimer = (uint16_t)var_toInteger(value);
   1b022:	f001 f9a0 	bl	1c366 <var_toInteger>
   1b026:	83a0      	strh	r0, [r4, #28]
   1b028:	e7e1      	b.n	1afee <cosem_setIec8802LlcType2Setup+0x1e>
    int ret = DLMS_ERROR_CODE_OK;
   1b02a:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1b02e:	e7df      	b.n	1aff0 <cosem_setIec8802LlcType2Setup+0x20>

0001b030 <cosem_setIec8802LlcType3Setup>:
    gxIec8802LlcType3Setup* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = DLMS_ERROR_CODE_OK;
    switch (index)
   1b030:	3a02      	subs	r2, #2
{
   1b032:	b510      	push	{r4, lr}
   1b034:	4618      	mov	r0, r3
   1b036:	460c      	mov	r4, r1
   1b038:	2a04      	cmp	r2, #4
   1b03a:	d819      	bhi.n	1b070 <cosem_setIec8802LlcType3Setup+0x40>
   1b03c:	e8df f002 	tbb	[pc, r2]
   1b040:	100c0803 	.word	0x100c0803
   1b044:	14          	.byte	0x14
   1b045:	00          	.byte	0x00
    {
    case 2:
        object->maximumOctetsACnPdu = (uint16_t)var_toInteger(value);
   1b046:	f001 f98e 	bl	1c366 <var_toInteger>
   1b04a:	8220      	strh	r0, [r4, #16]
    int ret = DLMS_ERROR_CODE_OK;
   1b04c:	2000      	movs	r0, #0
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1b04e:	bd10      	pop	{r4, pc}
        object->maximumTransmissions = (unsigned char)var_toInteger(value);
   1b050:	f001 f989 	bl	1c366 <var_toInteger>
   1b054:	74a0      	strb	r0, [r4, #18]
        break;
   1b056:	e7f9      	b.n	1b04c <cosem_setIec8802LlcType3Setup+0x1c>
        object->acknowledgementTime = (uint16_t)var_toInteger(value);
   1b058:	f001 f985 	bl	1c366 <var_toInteger>
   1b05c:	82a0      	strh	r0, [r4, #20]
        break;
   1b05e:	e7f5      	b.n	1b04c <cosem_setIec8802LlcType3Setup+0x1c>
        object->receiveLifetime = (uint16_t)var_toInteger(value);
   1b060:	f001 f981 	bl	1c366 <var_toInteger>
   1b064:	82e0      	strh	r0, [r4, #22]
        break;
   1b066:	e7f1      	b.n	1b04c <cosem_setIec8802LlcType3Setup+0x1c>
        object->transmitLifetime = (uint16_t)var_toInteger(value);
   1b068:	f001 f97d 	bl	1c366 <var_toInteger>
   1b06c:	8320      	strh	r0, [r4, #24]
   1b06e:	e7ed      	b.n	1b04c <cosem_setIec8802LlcType3Setup+0x1c>
    int ret = DLMS_ERROR_CODE_OK;
   1b070:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1b074:	e7eb      	b.n	1b04e <cosem_setIec8802LlcType3Setup+0x1e>

0001b076 <cosem_setSFSKActiveInitiator>:
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    dlmsVARIANT* tmp;
    switch (index)
   1b076:	2a02      	cmp	r2, #2
{
   1b078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b07a:	460d      	mov	r5, r1
   1b07c:	461e      	mov	r6, r3
    switch (index)
   1b07e:	d13d      	bne.n	1b0fc <cosem_setSFSKActiveInitiator+0x86>
    {
    case 2:
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1b080:	781b      	ldrb	r3, [r3, #0]
   1b082:	f101 0710 	add.w	r7, r1, #16
   1b086:	2b02      	cmp	r3, #2
        {
            bb_clear(&object->systemTitle);
   1b088:	4638      	mov	r0, r7
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1b08a:	d130      	bne.n	1b0ee <cosem_setSFSKActiveInitiator+0x78>
            bb_clear(&object->systemTitle);
   1b08c:	f7f3 fb19 	bl	e6c2 <bb_clear>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) != DLMS_ERROR_CODE_OK)
   1b090:	68b0      	ldr	r0, [r6, #8]
   1b092:	aa01      	add	r2, sp, #4
   1b094:	2100      	movs	r1, #0
   1b096:	f000 ffec 	bl	1c072 <va_getByIndex>
   1b09a:	4604      	mov	r4, r0
   1b09c:	bb20      	cbnz	r0, 1b0e8 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            if (tmp->byteArr != NULL)
   1b09e:	9b01      	ldr	r3, [sp, #4]
   1b0a0:	6898      	ldr	r0, [r3, #8]
   1b0a2:	b9b0      	cbnz	r0, 1b0d2 <cosem_setSFSKActiveInitiator+0x5c>
                if ((ret = bb_set(&object->systemTitle, tmp->byteArr->data, bb_size(tmp->byteArr))) != 0)
                {
                    break;
                }
            }
            if ((ret = va_getByIndex(value->Arr, 1, &tmp)) != DLMS_ERROR_CODE_OK)
   1b0a4:	68b0      	ldr	r0, [r6, #8]
   1b0a6:	aa01      	add	r2, sp, #4
   1b0a8:	2101      	movs	r1, #1
   1b0aa:	f000 ffe2 	bl	1c072 <va_getByIndex>
   1b0ae:	4604      	mov	r4, r0
   1b0b0:	b9d0      	cbnz	r0, 1b0e8 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            object->macAddress = (uint16_t)var_toInteger(tmp);
   1b0b2:	9801      	ldr	r0, [sp, #4]
   1b0b4:	f001 f957 	bl	1c366 <var_toInteger>
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != DLMS_ERROR_CODE_OK)
   1b0b8:	aa01      	add	r2, sp, #4
            object->macAddress = (uint16_t)var_toInteger(tmp);
   1b0ba:	83a8      	strh	r0, [r5, #28]
            if ((ret = va_getByIndex(value->Arr, 2, &tmp)) != DLMS_ERROR_CODE_OK)
   1b0bc:	2102      	movs	r1, #2
   1b0be:	68b0      	ldr	r0, [r6, #8]
   1b0c0:	f000 ffd7 	bl	1c072 <va_getByIndex>
   1b0c4:	4604      	mov	r4, r0
   1b0c6:	b978      	cbnz	r0, 1b0e8 <cosem_setSFSKActiveInitiator+0x72>
            {
                break;
            }
            object->lSapSelector = (unsigned char)var_toInteger(tmp);
   1b0c8:	9801      	ldr	r0, [sp, #4]
   1b0ca:	f001 f94c 	bl	1c366 <var_toInteger>
   1b0ce:	77a8      	strb	r0, [r5, #30]
   1b0d0:	e00a      	b.n	1b0e8 <cosem_setSFSKActiveInitiator+0x72>
                if ((ret = bb_set(&object->systemTitle, tmp->byteArr->data, bb_size(tmp->byteArr))) != 0)
   1b0d2:	6804      	ldr	r4, [r0, #0]
   1b0d4:	f7f3 f92f 	bl	e336 <bb_size>
   1b0d8:	4621      	mov	r1, r4
   1b0da:	4602      	mov	r2, r0
   1b0dc:	4638      	mov	r0, r7
   1b0de:	f7f3 fa7c 	bl	e5da <bb_set>
   1b0e2:	4604      	mov	r4, r0
   1b0e4:	2800      	cmp	r0, #0
   1b0e6:	d0dd      	beq.n	1b0a4 <cosem_setSFSKActiveInitiator+0x2e>
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1b0e8:	4620      	mov	r0, r4
   1b0ea:	b003      	add	sp, #12
   1b0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            bb_clear(&object->systemTitle);
   1b0ee:	f7f3 fae8 	bl	e6c2 <bb_clear>
            object->macAddress = 0;
   1b0f2:	2000      	movs	r0, #0
   1b0f4:	83a8      	strh	r0, [r5, #28]
            object->lSapSelector = 0;
   1b0f6:	77a8      	strb	r0, [r5, #30]
    int ret = 0;
   1b0f8:	4604      	mov	r4, r0
   1b0fa:	e7f5      	b.n	1b0e8 <cosem_setSFSKActiveInitiator+0x72>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b0fc:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1b100:	e7f2      	b.n	1b0e8 <cosem_setSFSKActiveInitiator+0x72>

0001b102 <cosem_setFSKMacCounters>:
    dlmsVARIANT* value)
{
    int pos, ret = DLMS_ERROR_CODE_OK;
    gxUint16PairUint32* it;
    dlmsVARIANT* tmp, * tmp2;
    switch (index)
   1b102:	3a02      	subs	r2, #2
{
   1b104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b108:	460d      	mov	r5, r1
   1b10a:	461e      	mov	r6, r3
   1b10c:	2a06      	cmp	r2, #6
   1b10e:	f200 80de 	bhi.w	1b2ce <cosem_setFSKMacCounters+0x1cc>
   1b112:	e8df f012 	tbh	[pc, r2, lsl #1]
   1b116:	0007      	.short	0x0007
   1b118:	008b0046 	.word	0x008b0046
   1b11c:	00cd00c8 	.word	0x00cd00c8
   1b120:	00d700d2 	.word	0x00d700d2
    {
    case 2:
    {
        arr_clear(&object->synchronizationRegister);
   1b124:	3510      	adds	r5, #16
   1b126:	4628      	mov	r0, r5
   1b128:	f7f6 fd0f 	bl	11b4a <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1b12c:	7833      	ldrb	r3, [r6, #0]
   1b12e:	2b01      	cmp	r3, #1
   1b130:	d034      	beq.n	1b19c <cosem_setFSKMacCounters+0x9a>
    int pos, ret = DLMS_ERROR_CODE_OK;
   1b132:	2400      	movs	r4, #0
        }
    }
    break;
    case 5:
        object->repetitionsCounter = var_toInteger(value);
        break;
   1b134:	e06f      	b.n	1b216 <cosem_setFSKMacCounters+0x114>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1b136:	466a      	mov	r2, sp
   1b138:	4641      	mov	r1, r8
   1b13a:	f000 ff9a 	bl	1c072 <va_getByIndex>
   1b13e:	4604      	mov	r4, r0
   1b140:	2800      	cmp	r0, #0
   1b142:	d168      	bne.n	1b216 <cosem_setFSKMacCounters+0x114>
                it = (gxUint16PairUint32*)gxmalloc(sizeof(gxUint16PairUint32));
   1b144:	2008      	movs	r0, #8
   1b146:	f7f2 f8d5 	bl	d2f4 <malloc>
                if (it == NULL)
   1b14a:	4607      	mov	r7, r0
   1b14c:	2800      	cmp	r0, #0
   1b14e:	f000 80c1 	beq.w	1b2d4 <cosem_setFSKMacCounters+0x1d2>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1b152:	9b00      	ldr	r3, [sp, #0]
   1b154:	4621      	mov	r1, r4
   1b156:	6898      	ldr	r0, [r3, #8]
   1b158:	aa01      	add	r2, sp, #4
   1b15a:	f000 ff8a 	bl	1c072 <va_getByIndex>
   1b15e:	4604      	mov	r4, r0
   1b160:	2800      	cmp	r0, #0
   1b162:	d158      	bne.n	1b216 <cosem_setFSKMacCounters+0x114>
                it->first = (uint16_t)var_toInteger(tmp2);
   1b164:	9801      	ldr	r0, [sp, #4]
   1b166:	f001 f8fe 	bl	1c366 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1b16a:	9b00      	ldr	r3, [sp, #0]
                it->first = (uint16_t)var_toInteger(tmp2);
   1b16c:	8038      	strh	r0, [r7, #0]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1b16e:	aa01      	add	r2, sp, #4
   1b170:	6898      	ldr	r0, [r3, #8]
   1b172:	2101      	movs	r1, #1
   1b174:	f000 ff7d 	bl	1c072 <va_getByIndex>
   1b178:	4604      	mov	r4, r0
   1b17a:	2800      	cmp	r0, #0
   1b17c:	d14b      	bne.n	1b216 <cosem_setFSKMacCounters+0x114>
                it->second = var_toInteger(tmp2);
   1b17e:	9801      	ldr	r0, [sp, #4]
   1b180:	f001 f8f1 	bl	1c366 <var_toInteger>
                arr_push(&object->synchronizationRegister, it);
   1b184:	4639      	mov	r1, r7
                it->second = var_toInteger(tmp2);
   1b186:	6078      	str	r0, [r7, #4]
                arr_push(&object->synchronizationRegister, it);
   1b188:	4628      	mov	r0, r5
   1b18a:	f7f6 fcc9 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b18e:	f108 0801 	add.w	r8, r8, #1
   1b192:	68b0      	ldr	r0, [r6, #8]
   1b194:	88c3      	ldrh	r3, [r0, #6]
   1b196:	4543      	cmp	r3, r8
   1b198:	d1cd      	bne.n	1b136 <cosem_setFSKMacCounters+0x34>
   1b19a:	e7ca      	b.n	1b132 <cosem_setFSKMacCounters+0x30>
   1b19c:	f04f 0800 	mov.w	r8, #0
   1b1a0:	e7f7      	b.n	1b192 <cosem_setFSKMacCounters+0x90>
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1b1a2:	7837      	ldrb	r7, [r6, #0]
   1b1a4:	2f02      	cmp	r7, #2
   1b1a6:	d13a      	bne.n	1b21e <cosem_setFSKMacCounters+0x11c>
            if ((ret = va_getByIndex(value->Arr, 0, &tmp)) == DLMS_ERROR_CODE_OK)
   1b1a8:	68b0      	ldr	r0, [r6, #8]
   1b1aa:	466a      	mov	r2, sp
   1b1ac:	2100      	movs	r1, #0
   1b1ae:	f000 ff60 	bl	1c072 <va_getByIndex>
   1b1b2:	4604      	mov	r4, r0
   1b1b4:	bb78      	cbnz	r0, 1b216 <cosem_setFSKMacCounters+0x114>
                object->physicalLayerDesynchronization = var_toInteger(tmp);
   1b1b6:	9800      	ldr	r0, [sp, #0]
   1b1b8:	f001 f8d5 	bl	1c366 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 1, &tmp)) == DLMS_ERROR_CODE_OK)
   1b1bc:	466a      	mov	r2, sp
                object->physicalLayerDesynchronization = var_toInteger(tmp);
   1b1be:	61e8      	str	r0, [r5, #28]
                if ((ret = va_getByIndex(value->Arr, 1, &tmp)) == DLMS_ERROR_CODE_OK)
   1b1c0:	2101      	movs	r1, #1
   1b1c2:	68b0      	ldr	r0, [r6, #8]
   1b1c4:	f000 ff55 	bl	1c072 <va_getByIndex>
   1b1c8:	4604      	mov	r4, r0
   1b1ca:	bb20      	cbnz	r0, 1b216 <cosem_setFSKMacCounters+0x114>
                    object->timeOutNotAddressedDesynchronization = var_toInteger(tmp);
   1b1cc:	9800      	ldr	r0, [sp, #0]
   1b1ce:	f001 f8ca 	bl	1c366 <var_toInteger>
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp)) == DLMS_ERROR_CODE_OK)
   1b1d2:	466a      	mov	r2, sp
                    object->timeOutNotAddressedDesynchronization = var_toInteger(tmp);
   1b1d4:	6228      	str	r0, [r5, #32]
                    if ((ret = va_getByIndex(value->Arr, 2, &tmp)) == DLMS_ERROR_CODE_OK)
   1b1d6:	4639      	mov	r1, r7
   1b1d8:	68b0      	ldr	r0, [r6, #8]
   1b1da:	f000 ff4a 	bl	1c072 <va_getByIndex>
   1b1de:	4604      	mov	r4, r0
   1b1e0:	b9c8      	cbnz	r0, 1b216 <cosem_setFSKMacCounters+0x114>
                        object->timeOutFrameNotOkDesynchronization = var_toInteger(tmp);
   1b1e2:	9800      	ldr	r0, [sp, #0]
   1b1e4:	f001 f8bf 	bl	1c366 <var_toInteger>
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp)) == DLMS_ERROR_CODE_OK)
   1b1e8:	466a      	mov	r2, sp
                        object->timeOutFrameNotOkDesynchronization = var_toInteger(tmp);
   1b1ea:	6268      	str	r0, [r5, #36]	; 0x24
                        if ((ret = va_getByIndex(value->Arr, 3, &tmp)) == DLMS_ERROR_CODE_OK)
   1b1ec:	2103      	movs	r1, #3
   1b1ee:	68b0      	ldr	r0, [r6, #8]
   1b1f0:	f000 ff3f 	bl	1c072 <va_getByIndex>
   1b1f4:	4604      	mov	r4, r0
   1b1f6:	b970      	cbnz	r0, 1b216 <cosem_setFSKMacCounters+0x114>
                            object->writeRequestDesynchronization = var_toInteger(tmp);
   1b1f8:	9800      	ldr	r0, [sp, #0]
   1b1fa:	f001 f8b4 	bl	1c366 <var_toInteger>
                            if ((ret = va_getByIndex(value->Arr, 4, &tmp)) == DLMS_ERROR_CODE_OK)
   1b1fe:	466a      	mov	r2, sp
                            object->writeRequestDesynchronization = var_toInteger(tmp);
   1b200:	62a8      	str	r0, [r5, #40]	; 0x28
                            if ((ret = va_getByIndex(value->Arr, 4, &tmp)) == DLMS_ERROR_CODE_OK)
   1b202:	2104      	movs	r1, #4
   1b204:	68b0      	ldr	r0, [r6, #8]
   1b206:	f000 ff34 	bl	1c072 <va_getByIndex>
   1b20a:	4604      	mov	r4, r0
   1b20c:	b918      	cbnz	r0, 1b216 <cosem_setFSKMacCounters+0x114>
                                object->wrongInitiatorDesynchronization = var_toInteger(tmp);
   1b20e:	9800      	ldr	r0, [sp, #0]
   1b210:	f001 f8a9 	bl	1c366 <var_toInteger>
   1b214:	62e8      	str	r0, [r5, #44]	; 0x2c
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1b216:	4620      	mov	r0, r4
   1b218:	b002      	add	sp, #8
   1b21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            object->physicalLayerDesynchronization = 0;
   1b21e:	2400      	movs	r4, #0
            object->timeOutNotAddressedDesynchronization = 0;
   1b220:	e9c1 4407 	strd	r4, r4, [r1, #28]
            object->writeRequestDesynchronization = 0;
   1b224:	e9c1 4409 	strd	r4, r4, [r1, #36]	; 0x24
            object->wrongInitiatorDesynchronization = 0;
   1b228:	62cc      	str	r4, [r1, #44]	; 0x2c
   1b22a:	e7f4      	b.n	1b216 <cosem_setFSKMacCounters+0x114>
        arr_clear(&object->broadcastFramesCounter);
   1b22c:	3530      	adds	r5, #48	; 0x30
   1b22e:	4628      	mov	r0, r5
   1b230:	f7f6 fc8b 	bl	11b4a <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1b234:	7833      	ldrb	r3, [r6, #0]
   1b236:	2b01      	cmp	r3, #1
   1b238:	f47f af7b 	bne.w	1b132 <cosem_setFSKMacCounters+0x30>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b23c:	2700      	movs	r7, #0
   1b23e:	e02d      	b.n	1b29c <cosem_setFSKMacCounters+0x19a>
                if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1b240:	466a      	mov	r2, sp
   1b242:	4639      	mov	r1, r7
   1b244:	f000 ff15 	bl	1c072 <va_getByIndex>
   1b248:	4604      	mov	r4, r0
   1b24a:	2800      	cmp	r0, #0
   1b24c:	d1e3      	bne.n	1b216 <cosem_setFSKMacCounters+0x114>
                it = (gxUint16PairUint32*)gxmalloc(sizeof(gxUint16PairUint32));
   1b24e:	2008      	movs	r0, #8
   1b250:	f7f2 f850 	bl	d2f4 <malloc>
                if (it == NULL)
   1b254:	4680      	mov	r8, r0
   1b256:	2800      	cmp	r0, #0
   1b258:	d03c      	beq.n	1b2d4 <cosem_setFSKMacCounters+0x1d2>
                if ((ret = va_getByIndex(tmp->Arr, 0, &tmp2)) != DLMS_ERROR_CODE_OK)
   1b25a:	9b00      	ldr	r3, [sp, #0]
   1b25c:	4621      	mov	r1, r4
   1b25e:	6898      	ldr	r0, [r3, #8]
   1b260:	aa01      	add	r2, sp, #4
   1b262:	f000 ff06 	bl	1c072 <va_getByIndex>
   1b266:	4604      	mov	r4, r0
   1b268:	2800      	cmp	r0, #0
   1b26a:	d1d4      	bne.n	1b216 <cosem_setFSKMacCounters+0x114>
                it->first = (uint16_t)var_toInteger(tmp2);
   1b26c:	9801      	ldr	r0, [sp, #4]
   1b26e:	f001 f87a 	bl	1c366 <var_toInteger>
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1b272:	9b00      	ldr	r3, [sp, #0]
                it->first = (uint16_t)var_toInteger(tmp2);
   1b274:	f8a8 0000 	strh.w	r0, [r8]
                if ((ret = va_getByIndex(tmp->Arr, 1, &tmp2)) != DLMS_ERROR_CODE_OK)
   1b278:	aa01      	add	r2, sp, #4
   1b27a:	6898      	ldr	r0, [r3, #8]
   1b27c:	2101      	movs	r1, #1
   1b27e:	f000 fef8 	bl	1c072 <va_getByIndex>
   1b282:	4604      	mov	r4, r0
   1b284:	2800      	cmp	r0, #0
   1b286:	d1c6      	bne.n	1b216 <cosem_setFSKMacCounters+0x114>
                it->second = var_toInteger(tmp2);
   1b288:	9801      	ldr	r0, [sp, #4]
   1b28a:	f001 f86c 	bl	1c366 <var_toInteger>
                arr_push(&object->broadcastFramesCounter, it);
   1b28e:	4641      	mov	r1, r8
                it->second = var_toInteger(tmp2);
   1b290:	f8c8 0004 	str.w	r0, [r8, #4]
                arr_push(&object->broadcastFramesCounter, it);
   1b294:	4628      	mov	r0, r5
   1b296:	f7f6 fc43 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b29a:	3701      	adds	r7, #1
   1b29c:	68b0      	ldr	r0, [r6, #8]
   1b29e:	88c3      	ldrh	r3, [r0, #6]
   1b2a0:	42bb      	cmp	r3, r7
   1b2a2:	d1cd      	bne.n	1b240 <cosem_setFSKMacCounters+0x13e>
   1b2a4:	e745      	b.n	1b132 <cosem_setFSKMacCounters+0x30>
        object->repetitionsCounter = var_toInteger(value);
   1b2a6:	4630      	mov	r0, r6
   1b2a8:	f001 f85d 	bl	1c366 <var_toInteger>
   1b2ac:	63e8      	str	r0, [r5, #60]	; 0x3c
   1b2ae:	e740      	b.n	1b132 <cosem_setFSKMacCounters+0x30>
        object->transmissionsCounter = var_toInteger(value);
   1b2b0:	4630      	mov	r0, r6
   1b2b2:	f001 f858 	bl	1c366 <var_toInteger>
   1b2b6:	6428      	str	r0, [r5, #64]	; 0x40
        break;
   1b2b8:	e73b      	b.n	1b132 <cosem_setFSKMacCounters+0x30>
        object->crcOkFramesCounter = var_toInteger(value);
   1b2ba:	4630      	mov	r0, r6
   1b2bc:	f001 f853 	bl	1c366 <var_toInteger>
   1b2c0:	6468      	str	r0, [r5, #68]	; 0x44
        break;
   1b2c2:	e736      	b.n	1b132 <cosem_setFSKMacCounters+0x30>
        object->crcNOkFramesCounter = var_toInteger(value);
   1b2c4:	4630      	mov	r0, r6
   1b2c6:	f001 f84e 	bl	1c366 <var_toInteger>
   1b2ca:	64a8      	str	r0, [r5, #72]	; 0x48
        break;
   1b2cc:	e731      	b.n	1b132 <cosem_setFSKMacCounters+0x30>
    int pos, ret = DLMS_ERROR_CODE_OK;
   1b2ce:	f44f 7481 	mov.w	r4, #258	; 0x102
   1b2d2:	e7a0      	b.n	1b216 <cosem_setFSKMacCounters+0x114>
                    ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1b2d4:	f44f 7482 	mov.w	r4, #260	; 0x104
    return ret;
   1b2d8:	e79d      	b.n	1b216 <cosem_setFSKMacCounters+0x114>

0001b2da <cosem_setSFSKMacSynchronizationTimeouts>:
    gxSFSKMacSynchronizationTimeouts* object,
    unsigned char index,
    dlmsVARIANT* value)
{
    int ret = 0;
    switch (index)
   1b2da:	3a02      	subs	r2, #2
{
   1b2dc:	b510      	push	{r4, lr}
   1b2de:	4618      	mov	r0, r3
   1b2e0:	460c      	mov	r4, r1
   1b2e2:	2a03      	cmp	r2, #3
   1b2e4:	d814      	bhi.n	1b310 <cosem_setSFSKMacSynchronizationTimeouts+0x36>
   1b2e6:	e8df f002 	tbb	[pc, r2]
   1b2ea:	0702      	.short	0x0702
   1b2ec:	0f0b      	.short	0x0f0b
    {
    case 2:
        object->searchInitiatorTimeout = (uint16_t)var_toInteger(value);
   1b2ee:	f001 f83a 	bl	1c366 <var_toInteger>
   1b2f2:	8220      	strh	r0, [r4, #16]
    int ret = 0;
   1b2f4:	2000      	movs	r0, #0
        break;
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1b2f6:	bd10      	pop	{r4, pc}
        object->synchronizationConfirmationTimeout = (uint16_t)var_toInteger(value);
   1b2f8:	f001 f835 	bl	1c366 <var_toInteger>
   1b2fc:	8260      	strh	r0, [r4, #18]
        break;
   1b2fe:	e7f9      	b.n	1b2f4 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
        object->timeOutNotAddressed = (uint16_t)var_toInteger(value);
   1b300:	f001 f831 	bl	1c366 <var_toInteger>
   1b304:	82a0      	strh	r0, [r4, #20]
        break;
   1b306:	e7f5      	b.n	1b2f4 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
        object->timeOutFrameNotOK = (uint16_t)var_toInteger(value);
   1b308:	f001 f82d 	bl	1c366 <var_toInteger>
   1b30c:	82e0      	strh	r0, [r4, #22]
   1b30e:	e7f1      	b.n	1b2f4 <cosem_setSFSKMacSynchronizationTimeouts+0x1a>
    int ret = 0;
   1b310:	f44f 7081 	mov.w	r0, #258	; 0x102
    return ret;
   1b314:	e7ef      	b.n	1b2f6 <cosem_setSFSKMacSynchronizationTimeouts+0x1c>

0001b316 <cosem_setSFSKPhyMacSetUp>:
int cosem_setSFSKPhyMacSetUp(
    dlmsSettings* settings,
    gxSFSKPhyMacSetUp* object,
    unsigned char index,
    dlmsVARIANT* value)
{
   1b316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b318:	3a02      	subs	r2, #2
   1b31a:	460d      	mov	r5, r1
   1b31c:	461e      	mov	r6, r3
   1b31e:	2a0d      	cmp	r2, #13
   1b320:	f200 808b 	bhi.w	1b43a <cosem_setSFSKPhyMacSetUp+0x124>
   1b324:	e8df f002 	tbb	[pc, r2]
   1b328:	17120d07 	.word	0x17120d07
   1b32c:	4641211c 	.word	0x4641211c
   1b330:	78726e68 	.word	0x78726e68
   1b334:	837d      	.short	0x837d
    int pos, ret = 0;
    dlmsVARIANT* it;
    switch (index)
    {
    case 2:
        object->initiatorElectricalPhase = (DLMS_INITIATOR_ELECTRICAL_PHASE)var_toInteger(value);
   1b336:	4630      	mov	r0, r6
   1b338:	f001 f815 	bl	1c366 <var_toInteger>
   1b33c:	7428      	strb	r0, [r5, #16]
    int pos, ret = 0;
   1b33e:	2400      	movs	r4, #0
    case 14:
        object->synchronizationLocked = (unsigned char)var_toInteger(value);
        break;
    case 15:
        object->transmissionSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
        break;
   1b340:	e02c      	b.n	1b39c <cosem_setSFSKPhyMacSetUp+0x86>
        object->deltaElectricalPhase = (DLMS_DELTA_ELECTRICAL_PHASE)var_toInteger(value);
   1b342:	4630      	mov	r0, r6
   1b344:	f001 f80f 	bl	1c366 <var_toInteger>
   1b348:	7468      	strb	r0, [r5, #17]
        break;
   1b34a:	e7f8      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->maxReceivingGain = (unsigned char)var_toInteger(value);
   1b34c:	4630      	mov	r0, r6
   1b34e:	f001 f80a 	bl	1c366 <var_toInteger>
   1b352:	74a8      	strb	r0, [r5, #18]
        break;
   1b354:	e7f3      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->maxTransmittingGain = (unsigned char)var_toInteger(value);
   1b356:	4630      	mov	r0, r6
   1b358:	f001 f805 	bl	1c366 <var_toInteger>
   1b35c:	74e8      	strb	r0, [r5, #19]
        break;
   1b35e:	e7ee      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->searchInitiatorThreshold = (unsigned char)var_toInteger(value);
   1b360:	4630      	mov	r0, r6
   1b362:	f001 f800 	bl	1c366 <var_toInteger>
   1b366:	7528      	strb	r0, [r5, #20]
        break;
   1b368:	e7e9      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        if (value->vt == DLMS_DATA_TYPE_STRUCTURE)
   1b36a:	7833      	ldrb	r3, [r6, #0]
   1b36c:	2b02      	cmp	r3, #2
   1b36e:	d118      	bne.n	1b3a2 <cosem_setSFSKPhyMacSetUp+0x8c>
            if ((ret = va_getByIndex(value->Arr, 0, &it)) == DLMS_ERROR_CODE_OK)
   1b370:	68b0      	ldr	r0, [r6, #8]
   1b372:	aa01      	add	r2, sp, #4
   1b374:	2100      	movs	r1, #0
   1b376:	f000 fe7c 	bl	1c072 <va_getByIndex>
   1b37a:	4604      	mov	r4, r0
   1b37c:	b970      	cbnz	r0, 1b39c <cosem_setSFSKPhyMacSetUp+0x86>
                object->markFrequency = var_toInteger(it);
   1b37e:	9801      	ldr	r0, [sp, #4]
   1b380:	f000 fff1 	bl	1c366 <var_toInteger>
                if ((ret = va_getByIndex(value->Arr, 1, &it)) == DLMS_ERROR_CODE_OK)
   1b384:	aa01      	add	r2, sp, #4
                object->markFrequency = var_toInteger(it);
   1b386:	61a8      	str	r0, [r5, #24]
                if ((ret = va_getByIndex(value->Arr, 1, &it)) == DLMS_ERROR_CODE_OK)
   1b388:	2101      	movs	r1, #1
   1b38a:	68b0      	ldr	r0, [r6, #8]
   1b38c:	f000 fe71 	bl	1c072 <va_getByIndex>
   1b390:	4604      	mov	r4, r0
   1b392:	b918      	cbnz	r0, 1b39c <cosem_setSFSKPhyMacSetUp+0x86>
                    object->spaceFrequency = var_toInteger(it);
   1b394:	9801      	ldr	r0, [sp, #4]
   1b396:	f000 ffe6 	bl	1c366 <var_toInteger>
   1b39a:	61e8      	str	r0, [r5, #28]
    default:
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
        break;
    }
    return ret;
}
   1b39c:	4620      	mov	r0, r4
   1b39e:	b003      	add	sp, #12
   1b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            object->markFrequency = 0;
   1b3a2:	2400      	movs	r4, #0
            object->spaceFrequency = 0;
   1b3a4:	e9c1 4406 	strd	r4, r4, [r1, #24]
   1b3a8:	e7f8      	b.n	1b39c <cosem_setSFSKPhyMacSetUp+0x86>
        object->macAddress = (uint16_t)var_toInteger(value);
   1b3aa:	4630      	mov	r0, r6
   1b3ac:	f000 ffdb 	bl	1c366 <var_toInteger>
   1b3b0:	8428      	strh	r0, [r5, #32]
        break;
   1b3b2:	e7c4      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        arr_clear(&object->macGroupAddresses);
   1b3b4:	3524      	adds	r5, #36	; 0x24
   1b3b6:	4628      	mov	r0, r5
   1b3b8:	f7f6 fbc7 	bl	11b4a <arr_clear>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1b3bc:	7833      	ldrb	r3, [r6, #0]
   1b3be:	2b01      	cmp	r3, #1
   1b3c0:	d1bd      	bne.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b3c2:	2700      	movs	r7, #0
   1b3c4:	e013      	b.n	1b3ee <cosem_setSFSKPhyMacSetUp+0xd8>
                if ((ret = va_getByIndex(value->Arr, pos, &it)) != DLMS_ERROR_CODE_OK)
   1b3c6:	aa01      	add	r2, sp, #4
   1b3c8:	4639      	mov	r1, r7
   1b3ca:	f000 fe52 	bl	1c072 <va_getByIndex>
   1b3ce:	4604      	mov	r4, r0
   1b3d0:	2800      	cmp	r0, #0
   1b3d2:	d1e3      	bne.n	1b39c <cosem_setSFSKPhyMacSetUp+0x86>
                uint16_t* v = gxmalloc(sizeof(uint16_t));
   1b3d4:	2002      	movs	r0, #2
   1b3d6:	f7f1 ff8d 	bl	d2f4 <malloc>
   1b3da:	4604      	mov	r4, r0
                *v = (uint16_t)var_toInteger(it);
   1b3dc:	9801      	ldr	r0, [sp, #4]
   1b3de:	f000 ffc2 	bl	1c366 <var_toInteger>
                arr_push(&object->macGroupAddresses, v);
   1b3e2:	4621      	mov	r1, r4
                *v = (uint16_t)var_toInteger(it);
   1b3e4:	8020      	strh	r0, [r4, #0]
                arr_push(&object->macGroupAddresses, v);
   1b3e6:	4628      	mov	r0, r5
   1b3e8:	f7f6 fb9a 	bl	11b20 <arr_push>
            for (pos = 0; pos != value->Arr->size; ++pos)
   1b3ec:	3701      	adds	r7, #1
   1b3ee:	68b0      	ldr	r0, [r6, #8]
   1b3f0:	88c3      	ldrh	r3, [r0, #6]
   1b3f2:	42bb      	cmp	r3, r7
   1b3f4:	d1e7      	bne.n	1b3c6 <cosem_setSFSKPhyMacSetUp+0xb0>
   1b3f6:	e7a2      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->repeater = (DLMS_REPEATER)var_toInteger(value);
   1b3f8:	4630      	mov	r0, r6
   1b3fa:	f000 ffb4 	bl	1c366 <var_toInteger>
   1b3fe:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
        break;
   1b402:	e79c      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->repeaterStatus = value->boolVal;
   1b404:	7a33      	ldrb	r3, [r6, #8]
   1b406:	f881 3031 	strb.w	r3, [r1, #49]	; 0x31
        break;
   1b40a:	e798      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->minDeltaCredit = (unsigned char)var_toInteger(value);
   1b40c:	4630      	mov	r0, r6
   1b40e:	f000 ffaa 	bl	1c366 <var_toInteger>
   1b412:	f885 0032 	strb.w	r0, [r5, #50]	; 0x32
        break;
   1b416:	e792      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->initiatorMacAddress = (uint16_t)var_toInteger(value);
   1b418:	4630      	mov	r0, r6
   1b41a:	f000 ffa4 	bl	1c366 <var_toInteger>
   1b41e:	86a8      	strh	r0, [r5, #52]	; 0x34
        break;
   1b420:	e78d      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->synchronizationLocked = (unsigned char)var_toInteger(value);
   1b422:	4630      	mov	r0, r6
   1b424:	f000 ff9f 	bl	1c366 <var_toInteger>
   1b428:	f885 0036 	strb.w	r0, [r5, #54]	; 0x36
        break;
   1b42c:	e787      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
        object->transmissionSpeed = (DLMS_BAUD_RATE)var_toInteger(value);
   1b42e:	4630      	mov	r0, r6
   1b430:	f000 ff99 	bl	1c366 <var_toInteger>
   1b434:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
   1b438:	e781      	b.n	1b33e <cosem_setSFSKPhyMacSetUp+0x28>
    int pos, ret = 0;
   1b43a:	f44f 7481 	mov.w	r4, #258	; 0x102
    return ret;
   1b43e:	e7ad      	b.n	1b39c <cosem_setSFSKPhyMacSetUp+0x86>

0001b440 <cosem_setSFSKReportingSystemList>:
    dlmsVARIANT* value)
{
    int pos, ret = 0;
    dlmsVARIANT* tmp;
    gxByteBuffer* it;
    if (index == 2)
   1b440:	2a02      	cmp	r2, #2
{
   1b442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b444:	461f      	mov	r7, r3
    if (index == 2)
   1b446:	d12a      	bne.n	1b49e <cosem_setSFSKReportingSystemList+0x5e>
    {
        obj_clearByteBufferList(&object->reportingSystemList);
   1b448:	f101 0410 	add.w	r4, r1, #16
   1b44c:	4620      	mov	r0, r4
   1b44e:	f7f9 ffa2 	bl	15396 <obj_clearByteBufferList>
        if (value->vt == DLMS_DATA_TYPE_ARRAY)
   1b452:	783b      	ldrb	r3, [r7, #0]
   1b454:	2b01      	cmp	r3, #1
   1b456:	d020      	beq.n	1b49a <cosem_setSFSKReportingSystemList+0x5a>
    int pos, ret = 0;
   1b458:	2000      	movs	r0, #0
    else
    {
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    return ret;
}
   1b45a:	b003      	add	sp, #12
   1b45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    if ((ret = va_getByIndex(value->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK)
   1b45e:	aa01      	add	r2, sp, #4
   1b460:	4631      	mov	r1, r6
   1b462:	f000 fe06 	bl	1c072 <va_getByIndex>
   1b466:	2800      	cmp	r0, #0
   1b468:	d1f7      	bne.n	1b45a <cosem_setSFSKReportingSystemList+0x1a>
                    it = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1b46a:	200c      	movs	r0, #12
   1b46c:	f7f1 ff42 	bl	d2f4 <malloc>
   1b470:	4605      	mov	r5, r0
                    BYTE_BUFFER_INIT(it);
   1b472:	f7f2 ff63 	bl	e33c <bb_init>
                    bb_set(it, tmp->byteArr->data, tmp->byteArr->size);
   1b476:	9b01      	ldr	r3, [sp, #4]
   1b478:	689b      	ldr	r3, [r3, #8]
   1b47a:	4628      	mov	r0, r5
   1b47c:	88da      	ldrh	r2, [r3, #6]
   1b47e:	6819      	ldr	r1, [r3, #0]
   1b480:	f7f3 f8ab 	bl	e5da <bb_set>
                    if (it == NULL)
   1b484:	b175      	cbz	r5, 1b4a4 <cosem_setSFSKReportingSystemList+0x64>
                    arr_push(&object->reportingSystemList, it);
   1b486:	4629      	mov	r1, r5
   1b488:	4620      	mov	r0, r4
   1b48a:	f7f6 fb49 	bl	11b20 <arr_push>
                for (pos = 0; pos != value->Arr->size; ++pos)
   1b48e:	3601      	adds	r6, #1
   1b490:	68b8      	ldr	r0, [r7, #8]
   1b492:	88c3      	ldrh	r3, [r0, #6]
   1b494:	42b3      	cmp	r3, r6
   1b496:	d1e2      	bne.n	1b45e <cosem_setSFSKReportingSystemList+0x1e>
   1b498:	e7de      	b.n	1b458 <cosem_setSFSKReportingSystemList+0x18>
   1b49a:	2600      	movs	r6, #0
   1b49c:	e7f8      	b.n	1b490 <cosem_setSFSKReportingSystemList+0x50>
        ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b49e:	f44f 7081 	mov.w	r0, #258	; 0x102
   1b4a2:	e7da      	b.n	1b45a <cosem_setSFSKReportingSystemList+0x1a>
                        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1b4a4:	f44f 7082 	mov.w	r0, #260	; 0x104
    return ret;
   1b4a8:	e7d7      	b.n	1b45a <cosem_setSFSKReportingSystemList+0x1a>

0001b4aa <vec_init>:
#include "../include/objectarray.h"

void vec_init(gxValueEventCollection* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   1b4aa:	2300      	movs	r3, #0
   1b4ac:	6003      	str	r3, [r0, #0]
    arr->capacity = 0;
   1b4ae:	8083      	strh	r3, [r0, #4]
    arr->position = 0;
   1b4b0:	7183      	strb	r3, [r0, #6]
    arr->size = 0;
}
   1b4b2:	4770      	bx	lr

0001b4b4 <vec_capacity>:
}
#endif //DLMS_IGNORE_MALLOC

//Allocate new size for the array in bytes.
int vec_capacity(gxValueEventCollection* arr, unsigned char capacity)
{
   1b4b4:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!vec_isAttached(arr))
   1b4b6:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1b4ba:	2b00      	cmp	r3, #0
{
   1b4bc:	4604      	mov	r4, r0
   1b4be:	460d      	mov	r5, r1
    if (!vec_isAttached(arr))
   1b4c0:	db07      	blt.n	1b4d2 <vec_capacity+0x1e>
    {
        arr->capacity = capacity;
   1b4c2:	7101      	strb	r1, [r0, #4]
        if (arr->data == NULL)
   1b4c4:	6800      	ldr	r0, [r0, #0]
   1b4c6:	0089      	lsls	r1, r1, #2
   1b4c8:	b960      	cbnz	r0, 1b4e4 <vec_capacity+0x30>
        {
            arr->data = (gxValueEventArg * *)gxmalloc(arr->capacity * sizeof(gxValueEventArg*));
   1b4ca:	4608      	mov	r0, r1
   1b4cc:	f7f1 ff12 	bl	d2f4 <malloc>
        }
        else
        {
            arr->data = (gxValueEventArg * *)gxrealloc(arr->data, arr->capacity * sizeof(gxValueEventArg*));
   1b4d0:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7F;
   1b4d2:	7920      	ldrb	r0, [r4, #4]
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (vec_getCapacity(arr) < capacity)
   1b4d4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
}
   1b4d8:	4285      	cmp	r5, r0
   1b4da:	bf8c      	ite	hi
   1b4dc:	f44f 7082 	movhi.w	r0, #260	; 0x104
   1b4e0:	2000      	movls	r0, #0
   1b4e2:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxValueEventArg * *)gxrealloc(arr->data, arr->capacity * sizeof(gxValueEventArg*));
   1b4e4:	f7f1 ffbe 	bl	d464 <realloc>
   1b4e8:	e7f2      	b.n	1b4d0 <vec_capacity+0x1c>

0001b4ea <vec_push>:

#ifndef DLMS_IGNORE_MALLOC
//Push new data to the gxValueEventCollection.
int vec_push(gxValueEventCollection * arr, gxValueEventArg* item)
{
   1b4ea:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x80) == 0x80;
   1b4ec:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1b4f0:	7902      	ldrb	r2, [r0, #4]
    int ret = 0;
    if (!vec_isAttached(arr))
   1b4f2:	2b00      	cmp	r3, #0
{
   1b4f4:	4604      	mov	r4, r0
   1b4f6:	460d      	mov	r5, r1
    if (!vec_isAttached(arr))
   1b4f8:	da08      	bge.n	1b50c <vec_push+0x22>
    return arr->capacity & 0x7F;
   1b4fa:	7922      	ldrb	r2, [r4, #4]
            {
                return ret;
            }
        }
    }
    if (vec_getCapacity(arr) <= arr->size)
   1b4fc:	7963      	ldrb	r3, [r4, #5]
   1b4fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b502:	4293      	cmp	r3, r2
   1b504:	d30c      	bcc.n	1b520 <vec_push+0x36>
    {
        ret = DLMS_ERROR_CODE_OUTOFMEMORY;
   1b506:	f44f 7082 	mov.w	r0, #260	; 0x104
   1b50a:	e008      	b.n	1b51e <vec_push+0x34>
        if (arr->size >= vec_getCapacity(arr))
   1b50c:	7941      	ldrb	r1, [r0, #5]
   1b50e:	4291      	cmp	r1, r2
   1b510:	d3f3      	bcc.n	1b4fa <vec_push+0x10>
            if ((ret = vec_capacity(arr, arr->capacity + 2)) != 0)
   1b512:	3302      	adds	r3, #2
   1b514:	b2d9      	uxtb	r1, r3
   1b516:	f7ff ffcd 	bl	1b4b4 <vec_capacity>
   1b51a:	2800      	cmp	r0, #0
   1b51c:	d0ed      	beq.n	1b4fa <vec_push+0x10>
    {
        arr->data[arr->size] = item;
        ++arr->size;
    }
    return ret;
}
   1b51e:	bd38      	pop	{r3, r4, r5, pc}
        arr->data[arr->size] = item;
   1b520:	6822      	ldr	r2, [r4, #0]
   1b522:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
        ++arr->size;
   1b526:	3301      	adds	r3, #1
   1b528:	7163      	strb	r3, [r4, #5]
   1b52a:	2000      	movs	r0, #0
   1b52c:	e7f7      	b.n	1b51e <vec_push+0x34>

0001b52e <vec_empty>:
#endif //DLMS_IGNORE_MALLOC

void vec_empty(
    gxValueEventCollection* arr)
{
   1b52e:	b510      	push	{r4, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!vec_isAttached(arr))
   1b530:	f990 3004 	ldrsb.w	r3, [r0, #4]
   1b534:	2b00      	cmp	r3, #0
{
   1b536:	4604      	mov	r4, r0
    if (!vec_isAttached(arr))
   1b538:	db08      	blt.n	1b54c <vec_empty+0x1e>
    {
        if (arr->size != 0)
   1b53a:	7943      	ldrb	r3, [r0, #5]
   1b53c:	b123      	cbz	r3, 1b548 <vec_empty+0x1a>
        {
            gxfree(arr->data);
   1b53e:	6800      	ldr	r0, [r0, #0]
   1b540:	f7f1 fee0 	bl	d304 <free>
            arr->data = NULL;
   1b544:	2300      	movs	r3, #0
   1b546:	6023      	str	r3, [r4, #0]
        }
        arr->capacity = 0;
   1b548:	2300      	movs	r3, #0
   1b54a:	7123      	strb	r3, [r4, #4]
}
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
   1b54c:	2300      	movs	r3, #0
   1b54e:	7163      	strb	r3, [r4, #5]
    arr->position = 0;
   1b550:	71a3      	strb	r3, [r4, #6]
}
   1b552:	bd10      	pop	{r4, pc}

0001b554 <ve_init>:
#endif //DLMS_IGNORE_MALLOC
    return 0;
}

void ve_init(gxValueEventArg * ve)
{
   1b554:	b538      	push	{r3, r4, r5, lr}
   1b556:	4604      	mov	r4, r0
    var_init(&ve->value);
    ve->handled = 0;
    ve->target = NULL;
    ve->index = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1b558:	2500      	movs	r5, #0
    var_init(&ve->value);
   1b55a:	f000 fbb0 	bl	1bcbe <var_init>
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1b55e:	8225      	strh	r5, [r4, #16]
    ve->target = NULL;
   1b560:	6165      	str	r5, [r4, #20]
    ve->index = 0;
   1b562:	8325      	strh	r5, [r4, #24]
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->selector = 0;
    var_init(&ve->parameters);
   1b564:	f104 0020 	add.w	r0, r4, #32
   1b568:	f000 fba9 	bl	1bcbe <var_init>
    ve->error = DLMS_ERROR_CODE_OK;
    ve->action = 0;
    ve->byteArray = 0;
    ve->skipMaxPduSize = 0;
    ve->transactionStartIndex = 0;
    ve->transactionEndIndex = 0;
   1b56c:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
    ve->error = DLMS_ERROR_CODE_OK;
   1b570:	6325      	str	r5, [r4, #48]	; 0x30
    ve->skipMaxPduSize = 0;
   1b572:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ve->transaction = 0;
   1b576:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
   1b57a:	bd38      	pop	{r3, r4, r5, pc}

0001b57c <ve_clear>:

void ve_clear(gxValueEventArg * ve)
{
   1b57c:	b538      	push	{r3, r4, r5, lr}
   1b57e:	4604      	mov	r4, r0
    var_clear(&ve->value);
    ve->handled = 0;
    ve->target = NULL;
    ve->index = 0;
#if !defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1b580:	2500      	movs	r5, #0
    var_clear(&ve->value);
   1b582:	f000 fcf8 	bl	1bf76 <var_clear>
    ve->dataType = DLMS_DATA_TYPE_NONE;
   1b586:	8225      	strh	r5, [r4, #16]
    ve->target = NULL;
   1b588:	6165      	str	r5, [r4, #20]
    ve->index = 0;
   1b58a:	8325      	strh	r5, [r4, #24]
#endif //!defined(DLMS_IGNORE_MALLOC) && !defined(DLMS_COSEM_EXACT_DATA_TYPES)
    ve->selector = 0;
    var_clear(&ve->parameters);
   1b58c:	f104 0020 	add.w	r0, r4, #32
   1b590:	f000 fcf1 	bl	1bf76 <var_clear>
    ve->error = DLMS_ERROR_CODE_OK;
    ve->action = 0;
    ve->byteArray = 0;
    ve->skipMaxPduSize = 0;
    ve->transactionStartIndex = 0;
    ve->transactionEndIndex = 0;
   1b594:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
    ve->error = DLMS_ERROR_CODE_OK;
   1b598:	6325      	str	r5, [r4, #48]	; 0x30
    ve->skipMaxPduSize = 0;
   1b59a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ve->transaction = 0;
   1b59e:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
}
   1b5a2:	bd38      	pop	{r3, r4, r5, pc}

0001b5a4 <hlp_getObjectCount2>:
{
   1b5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b5a6:	460c      	mov	r4, r1
    ret = bb_getUInt8(buff, &ch);
   1b5a8:	f10d 0103 	add.w	r1, sp, #3
{
   1b5ac:	4605      	mov	r5, r0
    ret = bb_getUInt8(buff, &ch);
   1b5ae:	f7f3 f89e 	bl	e6ee <bb_getUInt8>
    if (ret != 0)
   1b5b2:	b9a0      	cbnz	r0, 1b5de <hlp_getObjectCount2+0x3a>
    if (ch > 0x80)
   1b5b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b5b8:	2b80      	cmp	r3, #128	; 0x80
   1b5ba:	d908      	bls.n	1b5ce <hlp_getObjectCount2+0x2a>
        if (ch == 0x81)
   1b5bc:	2b81      	cmp	r3, #129	; 0x81
   1b5be:	d108      	bne.n	1b5d2 <hlp_getObjectCount2+0x2e>
            ret = bb_getUInt8(buff, &ch);
   1b5c0:	f10d 0103 	add.w	r1, sp, #3
   1b5c4:	4628      	mov	r0, r5
   1b5c6:	f7f3 f892 	bl	e6ee <bb_getUInt8>
            *count = ch;
   1b5ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
        *count = ch;
   1b5ce:	8023      	strh	r3, [r4, #0]
   1b5d0:	e005      	b.n	1b5de <hlp_getObjectCount2+0x3a>
        else if (ch == 0x82)
   1b5d2:	2b82      	cmp	r3, #130	; 0x82
   1b5d4:	d105      	bne.n	1b5e2 <hlp_getObjectCount2+0x3e>
            ret = bb_getUInt16(buff, count);
   1b5d6:	4621      	mov	r1, r4
   1b5d8:	4628      	mov	r0, r5
   1b5da:	f7f3 f8b1 	bl	e740 <bb_getUInt16>
}
   1b5de:	b003      	add	sp, #12
   1b5e0:	bd30      	pop	{r4, r5, pc}
        else if (ch == 0x83)
   1b5e2:	2b83      	cmp	r3, #131	; 0x83
   1b5e4:	d105      	bne.n	1b5f2 <hlp_getObjectCount2+0x4e>
            ret = bb_getUInt24(buff, &value);
   1b5e6:	a901      	add	r1, sp, #4
   1b5e8:	4628      	mov	r0, r5
   1b5ea:	f7f3 f903 	bl	e7f4 <bb_getUInt24>
            *count = (uint16_t)value;
   1b5ee:	9b01      	ldr	r3, [sp, #4]
   1b5f0:	e7ed      	b.n	1b5ce <hlp_getObjectCount2+0x2a>
        else if (ch == 0x84)
   1b5f2:	2b84      	cmp	r3, #132	; 0x84
   1b5f4:	d104      	bne.n	1b600 <hlp_getObjectCount2+0x5c>
            ret = bb_getUInt32(buff, &value);
   1b5f6:	a901      	add	r1, sp, #4
   1b5f8:	4628      	mov	r0, r5
   1b5fa:	f7f3 f8b6 	bl	e76a <bb_getUInt32>
   1b5fe:	e7f6      	b.n	1b5ee <hlp_getObjectCount2+0x4a>
            ret = DLMS_ERROR_CODE_INVALID_PARAMETER;
   1b600:	f44f 7081 	mov.w	r0, #258	; 0x102
   1b604:	e7eb      	b.n	1b5de <hlp_getObjectCount2+0x3a>

0001b606 <hlp_setObjectCount>:
    if (count < 0x80)
   1b606:	287f      	cmp	r0, #127	; 0x7f
{
   1b608:	b538      	push	{r3, r4, r5, lr}
   1b60a:	4605      	mov	r5, r0
   1b60c:	460c      	mov	r4, r1
    if (count < 0x80)
   1b60e:	d805      	bhi.n	1b61c <hlp_setObjectCount+0x16>
            ret = bb_setUInt8(buff, (unsigned char)count);
   1b610:	b2e9      	uxtb	r1, r5
   1b612:	4620      	mov	r0, r4
}
   1b614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt8(buff, (unsigned char)count);
   1b618:	f7f2 bef9 	b.w	e40e <bb_setUInt8>
    else if (count < 0x100)
   1b61c:	28ff      	cmp	r0, #255	; 0xff
   1b61e:	d806      	bhi.n	1b62e <hlp_setObjectCount+0x28>
        if ((ret = bb_setUInt8(buff, 0x81)) == 0)
   1b620:	2181      	movs	r1, #129	; 0x81
   1b622:	4620      	mov	r0, r4
   1b624:	f7f2 fef3 	bl	e40e <bb_setUInt8>
   1b628:	2800      	cmp	r0, #0
   1b62a:	d0f1      	beq.n	1b610 <hlp_setObjectCount+0xa>
}
   1b62c:	bd38      	pop	{r3, r4, r5, pc}
    else if (count < 0x10000)
   1b62e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1b632:	d20b      	bcs.n	1b64c <hlp_setObjectCount+0x46>
        if ((ret = bb_setUInt8(buff, 0x82)) == 0)
   1b634:	2182      	movs	r1, #130	; 0x82
   1b636:	4620      	mov	r0, r4
   1b638:	f7f2 fee9 	bl	e40e <bb_setUInt8>
   1b63c:	2800      	cmp	r0, #0
   1b63e:	d1f5      	bne.n	1b62c <hlp_setObjectCount+0x26>
            ret = bb_setUInt16(buff, (uint16_t)count);
   1b640:	b2a9      	uxth	r1, r5
   1b642:	4620      	mov	r0, r4
}
   1b644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt16(buff, (uint16_t)count);
   1b648:	f7f2 bf03 	b.w	e452 <bb_setUInt16>
        if ((ret = bb_setUInt8(buff, 0x84)) == 0)
   1b64c:	2184      	movs	r1, #132	; 0x84
   1b64e:	4620      	mov	r0, r4
   1b650:	f7f2 fedd 	bl	e40e <bb_setUInt8>
   1b654:	2800      	cmp	r0, #0
   1b656:	d1e9      	bne.n	1b62c <hlp_setObjectCount+0x26>
            ret = bb_setUInt32(buff, count);
   1b658:	4629      	mov	r1, r5
   1b65a:	4620      	mov	r0, r4
}
   1b65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ret = bb_setUInt32(buff, count);
   1b660:	f7f2 bf19 	b.w	e496 <bb_setUInt32>

0001b664 <hlp_getValue>:
    if (c > '9')
   1b664:	2839      	cmp	r0, #57	; 0x39
   1b666:	b243      	sxtb	r3, r0
   1b668:	d907      	bls.n	1b67a <hlp_getValue+0x16>
        if (c > 'Z')
   1b66a:	285a      	cmp	r0, #90	; 0x5a
            value = (c - 'a' + 10);
   1b66c:	bf8c      	ite	hi
   1b66e:	f1a3 0057 	subhi.w	r0, r3, #87	; 0x57
            value = (c - 'A' + 10);
   1b672:	f1a3 0037 	subls.w	r0, r3, #55	; 0x37
        value = (c - '0');
   1b676:	b2c0      	uxtb	r0, r0
}
   1b678:	4770      	bx	lr
        value = (c - '0');
   1b67a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1b67e:	e7fa      	b.n	1b676 <hlp_getValue+0x12>

0001b680 <hlp_hexToBytes>:
{
   1b680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *count = 0;
   1b684:	2300      	movs	r3, #0
{
   1b686:	4604      	mov	r4, r0
   1b688:	4617      	mov	r7, r2
    *count = 0;
   1b68a:	8013      	strh	r3, [r2, #0]
    if (buffer != NULL && *buffer != NULL)
   1b68c:	4688      	mov	r8, r1
   1b68e:	b119      	cbz	r1, 1b698 <hlp_hexToBytes+0x18>
   1b690:	6808      	ldr	r0, [r1, #0]
   1b692:	b108      	cbz	r0, 1b698 <hlp_hexToBytes+0x18>
        gxfree(*buffer);
   1b694:	f7f1 fe36 	bl	d304 <free>
    if (str == NULL)
   1b698:	b914      	cbnz	r4, 1b6a0 <hlp_hexToBytes+0x20>
    return 0;
   1b69a:	2000      	movs	r0, #0
}
   1b69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    int len = (int)strlen(str);
   1b6a0:	4620      	mov	r0, r4
   1b6a2:	f7e5 fb8d 	bl	dc0 <strlen>
    if (len == 0)
   1b6a6:	4605      	mov	r5, r0
   1b6a8:	2800      	cmp	r0, #0
   1b6aa:	d0f6      	beq.n	1b69a <hlp_hexToBytes+0x1a>
    unsigned char* tmp = (unsigned char*)gxmalloc(len / 2);
   1b6ac:	eb00 79d0 	add.w	r9, r0, r0, lsr #31
   1b6b0:	ea4f 0969 	mov.w	r9, r9, asr #1
   1b6b4:	4648      	mov	r0, r9
   1b6b6:	f7f1 fe1d 	bl	d2f4 <malloc>
    if (tmp == NULL)
   1b6ba:	4602      	mov	r2, r0
   1b6bc:	b358      	cbz	r0, 1b716 <hlp_hexToBytes+0x96>
    *buffer = tmp;
   1b6be:	1961      	adds	r1, r4, r5
   1b6c0:	f8c8 0000 	str.w	r0, [r8]
    int lastValue = -1;
   1b6c4:	f04f 35ff 	mov.w	r5, #4294967295
        if (*str >= '0' && *str < 'g')
   1b6c8:	f814 0b01 	ldrb.w	r0, [r4], #1
   1b6cc:	883e      	ldrh	r6, [r7, #0]
   1b6ce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b6d2:	2b36      	cmp	r3, #54	; 0x36
   1b6d4:	d819      	bhi.n	1b70a <hlp_hexToBytes+0x8a>
            if (lastValue == -1)
   1b6d6:	1c6b      	adds	r3, r5, #1
   1b6d8:	d10d      	bne.n	1b6f6 <hlp_hexToBytes+0x76>
                lastValue = hlp_getValue(*str);
   1b6da:	f7ff ffc3 	bl	1b664 <hlp_getValue>
   1b6de:	4605      	mov	r5, r0
    for (int pos = 0; pos != len; ++pos)
   1b6e0:	428c      	cmp	r4, r1
   1b6e2:	d1f1      	bne.n	1b6c8 <hlp_hexToBytes+0x48>
    if (len / 2 != *count)
   1b6e4:	8839      	ldrh	r1, [r7, #0]
   1b6e6:	4589      	cmp	r9, r1
   1b6e8:	d0d7      	beq.n	1b69a <hlp_hexToBytes+0x1a>
        *buffer = gxrealloc(*buffer, *count);
   1b6ea:	4610      	mov	r0, r2
   1b6ec:	f7f1 feba 	bl	d464 <realloc>
   1b6f0:	f8c8 0000 	str.w	r0, [r8]
   1b6f4:	e7d1      	b.n	1b69a <hlp_hexToBytes+0x1a>
                tmp[*count] = (unsigned char)(lastValue << 4 | hlp_getValue(*str));
   1b6f6:	f7ff ffb5 	bl	1b664 <hlp_getValue>
   1b6fa:	ea40 1505 	orr.w	r5, r0, r5, lsl #4
   1b6fe:	5595      	strb	r5, [r2, r6]
            ++* count;
   1b700:	3601      	adds	r6, #1
   1b702:	803e      	strh	r6, [r7, #0]
            lastValue = -1;
   1b704:	f04f 35ff 	mov.w	r5, #4294967295
   1b708:	e7ea      	b.n	1b6e0 <hlp_hexToBytes+0x60>
        else if (lastValue != -1)
   1b70a:	1c6b      	adds	r3, r5, #1
   1b70c:	d0e8      	beq.n	1b6e0 <hlp_hexToBytes+0x60>
            tmp[*count] = hlp_getValue(*str);
   1b70e:	f7ff ffa9 	bl	1b664 <hlp_getValue>
   1b712:	5590      	strb	r0, [r2, r6]
   1b714:	e7f4      	b.n	1b700 <hlp_hexToBytes+0x80>
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1b716:	f44f 7082 	mov.w	r0, #260	; 0x104
   1b71a:	e7bf      	b.n	1b69c <hlp_hexToBytes+0x1c>

0001b71c <hlp_intToString>:

int hlp_intToString(char* str, int bufsize, int32_t value, unsigned char isSigned, unsigned char digits)
{
   1b71c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b71e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    int cnt = 0;
    int32_t val = value;
    if (isSigned && value < 0)
   1b722:	b14b      	cbz	r3, 1b738 <hlp_intToString+0x1c>
   1b724:	2a00      	cmp	r2, #0
   1b726:	da2c      	bge.n	1b782 <hlp_intToString+0x66>
    {
        if (bufsize < 1)
   1b728:	2900      	cmp	r1, #0
   1b72a:	dd38      	ble.n	1b79e <hlp_intToString+0x82>
        {
            return -1;
        }
        *str = '-';
   1b72c:	232d      	movs	r3, #45	; 0x2d
   1b72e:	f800 3b01 	strb.w	r3, [r0], #1
        ++str;
        --bufsize;
   1b732:	3901      	subs	r1, #1
        value = -value;
   1b734:	4252      	negs	r2, r2
        val = value;
        ++cnt;
   1b736:	2301      	movs	r3, #1
    }
    if (digits != 0)
   1b738:	b10c      	cbz	r4, 1b73e <hlp_intToString+0x22>
    {
        --digits;
   1b73a:	3c01      	subs	r4, #1
   1b73c:	b2e4      	uxtb	r4, r4
    int cnt = 0;
   1b73e:	4615      	mov	r5, r2
    }
    //Find length.
    while ((val = (val / 10)) > 0)
   1b740:	270a      	movs	r7, #10
   1b742:	2d09      	cmp	r5, #9
   1b744:	fb95 f6f7 	sdiv	r6, r5, r7
   1b748:	dc1d      	bgt.n	1b786 <hlp_intToString+0x6a>
        if (digits != 0)
        {
            --digits;
        }
    }
    *(str + digits + 1) = '\0';
   1b74a:	4404      	add	r4, r0
   1b74c:	2500      	movs	r5, #0
   1b74e:	7065      	strb	r5, [r4, #1]
    while (digits != 0)
   1b750:	4626      	mov	r6, r4
   1b752:	1a1b      	subs	r3, r3, r0
    {
        if (bufsize < 1)
        {
            return -1;
        }
        *str = '0';
   1b754:	2730      	movs	r7, #48	; 0x30
    while (digits != 0)
   1b756:	42a0      	cmp	r0, r4
   1b758:	eb00 0503 	add.w	r5, r0, r3
   1b75c:	d119      	bne.n	1b792 <hlp_intToString+0x76>
    {
        if (bufsize < 1)
        {
            return -1;
        }
        *str = (value % 10) + '0';
   1b75e:	270a      	movs	r7, #10
   1b760:	194c      	adds	r4, r1, r5
        if (bufsize < 1)
   1b762:	2900      	cmp	r1, #0
   1b764:	dd1b      	ble.n	1b79e <hlp_intToString+0x82>
        *str = (value % 10) + '0';
   1b766:	fb92 f3f7 	sdiv	r3, r2, r7
   1b76a:	fb07 2213 	mls	r2, r7, r3, r2
   1b76e:	3230      	adds	r2, #48	; 0x30
   1b770:	7032      	strb	r2, [r6, #0]
        value /= 10;
		if (value != 0)
   1b772:	461a      	mov	r2, r3
   1b774:	b103      	cbz	r3, 1b778 <hlp_intToString+0x5c>
		{
        	--str;
   1b776:	3e01      	subs	r6, #1
		}
        --bufsize;
   1b778:	3901      	subs	r1, #1
        ++cnt;
   1b77a:	1a60      	subs	r0, r4, r1
    } while (value != 0);
   1b77c:	2b00      	cmp	r3, #0
   1b77e:	d1f0      	bne.n	1b762 <hlp_intToString+0x46>
    return cnt;
}
   1b780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int cnt = 0;
   1b782:	2300      	movs	r3, #0
   1b784:	e7d8      	b.n	1b738 <hlp_intToString+0x1c>
        ++str;
   1b786:	3001      	adds	r0, #1
        if (digits != 0)
   1b788:	b10c      	cbz	r4, 1b78e <hlp_intToString+0x72>
            --digits;
   1b78a:	3c01      	subs	r4, #1
   1b78c:	b2e4      	uxtb	r4, r4
    int cnt = 0;
   1b78e:	4635      	mov	r5, r6
   1b790:	e7d7      	b.n	1b742 <hlp_intToString+0x26>
        if (bufsize < 1)
   1b792:	2900      	cmp	r1, #0
   1b794:	dd03      	ble.n	1b79e <hlp_intToString+0x82>
        *str = '0';
   1b796:	f800 7b01 	strb.w	r7, [r0], #1
        --bufsize;
   1b79a:	3901      	subs	r1, #1
        ++cnt;
   1b79c:	e7db      	b.n	1b756 <hlp_intToString+0x3a>
            return -1;
   1b79e:	f04f 30ff 	mov.w	r0, #4294967295
   1b7a2:	e7ed      	b.n	1b780 <hlp_intToString+0x64>

0001b7a4 <hlp_stringToInt>:

int32_t hlp_stringToInt(const char* str)
{
   1b7a4:	b530      	push	{r4, r5, lr}
    if (str == NULL)
   1b7a6:	b1b8      	cbz	r0, 1b7d8 <hlp_stringToInt+0x34>
    {
        return -1;
    }
    int32_t value = 0;
    unsigned char minus = 0;
    if (*str == '-')
   1b7a8:	7803      	ldrb	r3, [r0, #0]
   1b7aa:	2b2d      	cmp	r3, #45	; 0x2d
   1b7ac:	d112      	bne.n	1b7d4 <hlp_stringToInt+0x30>
    {
        minus = 1;
        ++str;
   1b7ae:	3001      	adds	r0, #1
        minus = 1;
   1b7b0:	2101      	movs	r1, #1
   1b7b2:	1e43      	subs	r3, r0, #1
    {
        if (*str < '0' || *str > '9')
        {
            return -1;
        }
        value *= 10;
   1b7b4:	240a      	movs	r4, #10
    unsigned char minus = 0;
   1b7b6:	2000      	movs	r0, #0
   1b7b8:	e005      	b.n	1b7c6 <hlp_stringToInt+0x22>
        if (*str < '0' || *str > '9')
   1b7ba:	3a30      	subs	r2, #48	; 0x30
   1b7bc:	b2d5      	uxtb	r5, r2
   1b7be:	2d09      	cmp	r5, #9
   1b7c0:	d80a      	bhi.n	1b7d8 <hlp_stringToInt+0x34>
        value += *str - '0';
   1b7c2:	fb04 2000 	mla	r0, r4, r0, r2
    while (*str != '\0')
   1b7c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b7ca:	2a00      	cmp	r2, #0
   1b7cc:	d1f5      	bne.n	1b7ba <hlp_stringToInt+0x16>
        ++str;
    }
    if (minus)
   1b7ce:	b101      	cbz	r1, 1b7d2 <hlp_stringToInt+0x2e>
    {
        return -value;
   1b7d0:	4240      	negs	r0, r0
    }
    return value;
}
   1b7d2:	bd30      	pop	{r4, r5, pc}
    unsigned char minus = 0;
   1b7d4:	2100      	movs	r1, #0
   1b7d6:	e7ec      	b.n	1b7b2 <hlp_stringToInt+0xe>
        return -1;
   1b7d8:	f04f 30ff 	mov.w	r0, #4294967295
   1b7dc:	e7f9      	b.n	1b7d2 <hlp_stringToInt+0x2e>

0001b7de <hlp_int64ToString>:

int hlp_int64ToString(char* str, int bufsize, int64_t value, unsigned char isSigned)
{
   1b7de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b7e2:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1b7e6:	4604      	mov	r4, r0
   1b7e8:	468a      	mov	sl, r1
   1b7ea:	4690      	mov	r8, r2
   1b7ec:	4699      	mov	r9, r3
    int cnt = 0;
    int64_t val = value;
    if (isSigned && value < 0)
   1b7ee:	b3f5      	cbz	r5, 1b86e <hlp_int64ToString+0x90>
   1b7f0:	2a00      	cmp	r2, #0
   1b7f2:	f179 0300 	sbcs.w	r3, r9, #0
   1b7f6:	da3d      	bge.n	1b874 <hlp_int64ToString+0x96>
    {
        if (bufsize < 1)
   1b7f8:	2900      	cmp	r1, #0
   1b7fa:	dd3f      	ble.n	1b87c <hlp_int64ToString+0x9e>
        {
            return -1;
        }
        *str = '-';
   1b7fc:	232d      	movs	r3, #45	; 0x2d
        ++str;
        --bufsize;
        value = -value;
   1b7fe:	4256      	negs	r6, r2
        *str = '-';
   1b800:	f804 3b01 	strb.w	r3, [r4], #1
        --bufsize;
   1b804:	f101 3aff 	add.w	sl, r1, #4294967295
        value = -value;
   1b808:	eb69 0749 	sbc.w	r7, r9, r9, lsl #1
        ++cnt;
   1b80c:	2501      	movs	r5, #1
    }
    //Find length.
    while ((val = (val / 10)) > 0)
   1b80e:	2300      	movs	r3, #0
   1b810:	220a      	movs	r2, #10
   1b812:	4640      	mov	r0, r8
   1b814:	4649      	mov	r1, r9
   1b816:	f7e5 f8ff 	bl	a18 <__aeabi_ldivmod>
   1b81a:	f1b8 0f0a 	cmp.w	r8, #10
   1b81e:	f179 0300 	sbcs.w	r3, r9, #0
   1b822:	da20      	bge.n	1b866 <hlp_int64ToString+0x88>
    {
        ++str;
    }
    *(str + 1) = '\0';
   1b824:	2300      	movs	r3, #0
   1b826:	7063      	strb	r3, [r4, #1]
   1b828:	ebaa 0a04 	sub.w	sl, sl, r4
   1b82c:	4425      	add	r5, r4
    do
    {
        if (bufsize < 1)
   1b82e:	eb04 030a 	add.w	r3, r4, sl
   1b832:	2b00      	cmp	r3, #0
   1b834:	dd22      	ble.n	1b87c <hlp_int64ToString+0x9e>
        {
            return -1;
        }
        *str = (value % 10) + '0';
   1b836:	4630      	mov	r0, r6
   1b838:	4639      	mov	r1, r7
   1b83a:	220a      	movs	r2, #10
   1b83c:	2300      	movs	r3, #0
   1b83e:	f7e5 f8eb 	bl	a18 <__aeabi_ldivmod>
   1b842:	3230      	adds	r2, #48	; 0x30
   1b844:	f804 2901 	strb.w	r2, [r4], #-1
        --str;
        value /= 10;
   1b848:	2300      	movs	r3, #0
   1b84a:	4630      	mov	r0, r6
   1b84c:	4639      	mov	r1, r7
   1b84e:	220a      	movs	r2, #10
   1b850:	f7e5 f8e2 	bl	a18 <__aeabi_ldivmod>
   1b854:	4606      	mov	r6, r0
   1b856:	460f      	mov	r7, r1
        --bufsize;
        ++cnt;
    } while (value != 0);
   1b858:	ea56 0307 	orrs.w	r3, r6, r7
   1b85c:	eba5 0004 	sub.w	r0, r5, r4
   1b860:	d1e5      	bne.n	1b82e <hlp_int64ToString+0x50>
    return cnt;
}
   1b862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ++str;
   1b866:	3401      	adds	r4, #1
    while ((val = (val / 10)) > 0)
   1b868:	4680      	mov	r8, r0
   1b86a:	4689      	mov	r9, r1
   1b86c:	e7cf      	b.n	1b80e <hlp_int64ToString+0x30>
   1b86e:	4616      	mov	r6, r2
   1b870:	461f      	mov	r7, r3
   1b872:	e7cc      	b.n	1b80e <hlp_int64ToString+0x30>
   1b874:	4616      	mov	r6, r2
   1b876:	464f      	mov	r7, r9
    int cnt = 0;
   1b878:	2500      	movs	r5, #0
   1b87a:	e7c8      	b.n	1b80e <hlp_int64ToString+0x30>
            return -1;
   1b87c:	f04f 30ff 	mov.w	r0, #4294967295
   1b880:	e7ef      	b.n	1b862 <hlp_int64ToString+0x84>

0001b882 <hlp_stringToInt64>:

int64_t hlp_stringToInt64(const char* str)
{
   1b882:	b530      	push	{r4, r5, lr}
    if (str == NULL)
   1b884:	b1c0      	cbz	r0, 1b8b8 <hlp_stringToInt64+0x36>
    {
        return -1;
    }
    int32_t value = 0;
    unsigned char minus = 0;
    if (*str == '-')
   1b886:	7803      	ldrb	r3, [r0, #0]
   1b888:	2b2d      	cmp	r3, #45	; 0x2d
   1b88a:	d113      	bne.n	1b8b4 <hlp_stringToInt64+0x32>
    {
        minus = 1;
        ++str;
   1b88c:	3001      	adds	r0, #1
        minus = 1;
   1b88e:	2101      	movs	r1, #1
   1b890:	1e43      	subs	r3, r0, #1
    {
        if (*str < '0' || *str > '9')
        {
            return -1;
        }
        value *= 10;
   1b892:	240a      	movs	r4, #10
    unsigned char minus = 0;
   1b894:	2000      	movs	r0, #0
   1b896:	e005      	b.n	1b8a4 <hlp_stringToInt64+0x22>
        if (*str < '0' || *str > '9')
   1b898:	3a30      	subs	r2, #48	; 0x30
   1b89a:	b2d5      	uxtb	r5, r2
   1b89c:	2d09      	cmp	r5, #9
   1b89e:	d80b      	bhi.n	1b8b8 <hlp_stringToInt64+0x36>
        value += *str - '0';
   1b8a0:	fb04 2000 	mla	r0, r4, r0, r2
    while (*str != '\0')
   1b8a4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b8a8:	2a00      	cmp	r2, #0
   1b8aa:	d1f5      	bne.n	1b898 <hlp_stringToInt64+0x16>
        ++str;
    }
    if (minus)
   1b8ac:	b101      	cbz	r1, 1b8b0 <hlp_stringToInt64+0x2e>
    {
        return -value;
   1b8ae:	4240      	negs	r0, r0
    }
    return value;
   1b8b0:	17c1      	asrs	r1, r0, #31
}
   1b8b2:	bd30      	pop	{r4, r5, pc}
    unsigned char minus = 0;
   1b8b4:	2100      	movs	r1, #0
   1b8b6:	e7eb      	b.n	1b890 <hlp_stringToInt64+0xe>
        return -1;
   1b8b8:	f04f 30ff 	mov.w	r0, #4294967295
   1b8bc:	f04f 31ff 	mov.w	r1, #4294967295
   1b8c0:	e7f7      	b.n	1b8b2 <hlp_stringToInt64+0x30>

0001b8c2 <hlp_add>:
    }
    return ret;
}

int hlp_add(bitArray* arr, gxByteBuffer* bytes, uint16_t count)
{
   1b8c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t pos, bytePos = 0;
    int ret;
    unsigned char ch = 0;
   1b8c6:	2300      	movs	r3, #0
   1b8c8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (count == 0xFFFF)
   1b8cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b8d0:	429a      	cmp	r2, r3
{
   1b8d2:	4614      	mov	r4, r2
    {
        count = (uint16_t)(bytes->size - bytes->position);
   1b8d4:	bf04      	itt	eq
   1b8d6:	88cc      	ldrheq	r4, [r1, #6]
   1b8d8:	890a      	ldrheq	r2, [r1, #8]
    }
    for (pos = 0; pos != count; ++pos)
   1b8da:	f04f 0900 	mov.w	r9, #0
        count = (uint16_t)(bytes->size - bytes->position);
   1b8de:	bf08      	it	eq
   1b8e0:	1aa4      	subeq	r4, r4, r2
{
   1b8e2:	4607      	mov	r7, r0
   1b8e4:	460d      	mov	r5, r1
        count = (uint16_t)(bytes->size - bytes->position);
   1b8e6:	bf08      	it	eq
   1b8e8:	b2a4      	uxtheq	r4, r4
    uint16_t pos, bytePos = 0;
   1b8ea:	464e      	mov	r6, r9
            {
                return ret;
            }
            ++bytes->position;
        }
        if ((ret = ba_setByIndex(arr, pos, (unsigned char)(ch & (1 << bytePos)))) != 0)
   1b8ec:	f04f 0801 	mov.w	r8, #1
   1b8f0:	fa1f fa89 	uxth.w	sl, r9
    for (pos = 0; pos != count; ++pos)
   1b8f4:	4554      	cmp	r4, sl
   1b8f6:	d103      	bne.n	1b900 <hlp_add+0x3e>
            return ret;
        }
        --bytePos;
        ++arr->size;
    }
    return 0;
   1b8f8:	2000      	movs	r0, #0
   1b8fa:	b002      	add	sp, #8
   1b8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((pos % 8) == 0)
   1b900:	f01a 0f07 	tst.w	sl, #7
   1b904:	d10b      	bne.n	1b91e <hlp_add+0x5c>
            ret = bb_getUInt8ByIndex(bytes, bytes->position, &ch);
   1b906:	8929      	ldrh	r1, [r5, #8]
   1b908:	f10d 0207 	add.w	r2, sp, #7
   1b90c:	4628      	mov	r0, r5
   1b90e:	f7f2 ff0c 	bl	e72a <bb_getUInt8ByIndex>
            if (ret != 0)
   1b912:	2800      	cmp	r0, #0
   1b914:	d1f1      	bne.n	1b8fa <hlp_add+0x38>
            ++bytes->position;
   1b916:	892b      	ldrh	r3, [r5, #8]
   1b918:	3301      	adds	r3, #1
   1b91a:	812b      	strh	r3, [r5, #8]
            bytePos = 7;
   1b91c:	2607      	movs	r6, #7
        if ((ret = ba_setByIndex(arr, pos, (unsigned char)(ch & (1 << bytePos)))) != 0)
   1b91e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b922:	fa08 f206 	lsl.w	r2, r8, r6
   1b926:	401a      	ands	r2, r3
   1b928:	4651      	mov	r1, sl
   1b92a:	4638      	mov	r0, r7
   1b92c:	f7f2 fc34 	bl	e198 <ba_setByIndex>
   1b930:	f109 0901 	add.w	r9, r9, #1
   1b934:	2800      	cmp	r0, #0
   1b936:	d1e0      	bne.n	1b8fa <hlp_add+0x38>
        ++arr->size;
   1b938:	88fb      	ldrh	r3, [r7, #6]
        --bytePos;
   1b93a:	3e01      	subs	r6, #1
        ++arr->size;
   1b93c:	3301      	adds	r3, #1
        --bytePos;
   1b93e:	b2b6      	uxth	r6, r6
        ++arr->size;
   1b940:	80fb      	strh	r3, [r7, #6]
    for (pos = 0; pos != count; ++pos)
   1b942:	e7d5      	b.n	1b8f0 <hlp_add+0x2e>

0001b944 <notify_getData>:
int notify_getData(
    dlmsSettings* settings,
    gxByteBuffer* reply,
    gxReplyData* data)
{
    return dlms_getData2(settings, reply, data, 0);
   1b944:	2300      	movs	r3, #0
   1b946:	f7f5 bf8a 	b.w	1185e <dlms_getData2>

0001b94a <notify_parsePush>:

int notify_parsePush(
    dlmsSettings* settings,
    variantArray* data,
    gxArray* items)
{
   1b94a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b94e:	4688      	mov	r8, r1
   1b950:	b098      	sub	sp, #96	; 0x60
   1b952:	4607      	mov	r7, r0
   1b954:	4616      	mov	r6, r2
    unsigned char index;
    int classID, ret;
	uint16_t pos;
    gxValueEventArg e;
    dlmsVARIANT* it, * list, * tmp;
    if ((ret = va_getByIndex(data, 0, &list)) != 0)
   1b956:	2100      	movs	r1, #0
   1b958:	aa04      	add	r2, sp, #16
   1b95a:	4640      	mov	r0, r8
   1b95c:	f000 fb89 	bl	1c072 <va_getByIndex>
   1b960:	4604      	mov	r4, r0
   1b962:	b990      	cbnz	r0, 1b98a <notify_parsePush+0x40>
   1b964:	4681      	mov	r9, r0
    {
        return ret;
    }

    for (pos = 0; pos != list->Arr->size; ++pos)
   1b966:	9b04      	ldr	r3, [sp, #16]
   1b968:	6898      	ldr	r0, [r3, #8]
   1b96a:	88c2      	ldrh	r2, [r0, #6]
   1b96c:	fa1f f389 	uxth.w	r3, r9
   1b970:	429a      	cmp	r2, r3
   1b972:	d10e      	bne.n	1b992 <notify_parsePush+0x48>
            index = (unsigned char)var_toInteger(tmp);
            arr_push(items, key_init(obj, (void*)(uint64_t)index));
#endif //DLMS_IGNORE_MALLOC
        }
    }
    ve_init(&e);
   1b974:	ad06      	add	r5, sp, #24
   1b976:	4628      	mov	r0, r5
   1b978:	f7ff fdec 	bl	1b554 <ve_init>
    for (pos = 0; pos != items->size; ++pos)
   1b97c:	f04f 0900 	mov.w	r9, #0
   1b980:	88f3      	ldrh	r3, [r6, #6]
   1b982:	fa1f f189 	uxth.w	r1, r9
   1b986:	428b      	cmp	r3, r1
   1b988:	d15c      	bne.n	1ba44 <notify_parsePush+0xfa>
        {
            return ret;
        }
    }
    return ret;
}
   1b98a:	4620      	mov	r0, r4
   1b98c:	b018      	add	sp, #96	; 0x60
   1b98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((ret = va_getByIndex(list->Arr, pos, &it)) != 0)
   1b992:	fa1f f189 	uxth.w	r1, r9
   1b996:	aa03      	add	r2, sp, #12
   1b998:	f000 fb6b 	bl	1c072 <va_getByIndex>
   1b99c:	4601      	mov	r1, r0
   1b99e:	2800      	cmp	r0, #0
   1b9a0:	d174      	bne.n	1ba8c <notify_parsePush+0x142>
        if ((ret = va_getByIndex(it->Arr, 0, &tmp)) != 0)
   1b9a2:	9b03      	ldr	r3, [sp, #12]
   1b9a4:	aa05      	add	r2, sp, #20
   1b9a6:	6898      	ldr	r0, [r3, #8]
   1b9a8:	f000 fb63 	bl	1c072 <va_getByIndex>
   1b9ac:	2800      	cmp	r0, #0
   1b9ae:	d16b      	bne.n	1ba88 <notify_parsePush+0x13e>
        classID = var_toInteger(tmp) & 0xFFFF;
   1b9b0:	9805      	ldr	r0, [sp, #20]
   1b9b2:	f000 fcd8 	bl	1c366 <var_toInteger>
   1b9b6:	b283      	uxth	r3, r0
   1b9b8:	4605      	mov	r5, r0
        if (classID > 0)
   1b9ba:	2b00      	cmp	r3, #0
   1b9bc:	d03f      	beq.n	1ba3e <notify_parsePush+0xf4>
            if ((ret = va_getByIndex(it->Arr, 1, &tmp)) != 0)
   1b9be:	9b03      	ldr	r3, [sp, #12]
   1b9c0:	aa05      	add	r2, sp, #20
   1b9c2:	6898      	ldr	r0, [r3, #8]
   1b9c4:	2101      	movs	r1, #1
   1b9c6:	f000 fb54 	bl	1c072 <va_getByIndex>
   1b9ca:	2800      	cmp	r0, #0
   1b9cc:	d15c      	bne.n	1ba88 <notify_parsePush+0x13e>
            if ((ret = oa_findByLN(&settings->objects, (DLMS_OBJECT_TYPE)classID, tmp->byteArr->data, &obj)) != 0)
   1b9ce:	9b05      	ldr	r3, [sp, #20]
   1b9d0:	689a      	ldr	r2, [r3, #8]
   1b9d2:	f107 0a98 	add.w	sl, r7, #152	; 0x98
   1b9d6:	b2ad      	uxth	r5, r5
   1b9d8:	6812      	ldr	r2, [r2, #0]
   1b9da:	ab02      	add	r3, sp, #8
   1b9dc:	4629      	mov	r1, r5
   1b9de:	4650      	mov	r0, sl
   1b9e0:	f000 f904 	bl	1bbec <oa_findByLN>
   1b9e4:	2800      	cmp	r0, #0
   1b9e6:	d14f      	bne.n	1ba88 <notify_parsePush+0x13e>
            if (obj == NULL)
   1b9e8:	9b02      	ldr	r3, [sp, #8]
   1b9ea:	b9b3      	cbnz	r3, 1ba1a <notify_parsePush+0xd0>
                if ((ret = cosem_createObject((DLMS_OBJECT_TYPE)classID, &obj)) != 0)
   1b9ec:	a902      	add	r1, sp, #8
   1b9ee:	4628      	mov	r0, r5
   1b9f0:	f7e6 fb8e 	bl	2110 <cosem_createObject>
   1b9f4:	2800      	cmp	r0, #0
   1b9f6:	d147      	bne.n	1ba88 <notify_parsePush+0x13e>
                memcpy(obj->logicalName, tmp->byteArr->data, 6);
   1b9f8:	9b05      	ldr	r3, [sp, #20]
   1b9fa:	9902      	ldr	r1, [sp, #8]
   1b9fc:	689b      	ldr	r3, [r3, #8]
   1b9fe:	681b      	ldr	r3, [r3, #0]
   1ba00:	681a      	ldr	r2, [r3, #0]
   1ba02:	f8c1 2006 	str.w	r2, [r1, #6]
   1ba06:	889b      	ldrh	r3, [r3, #4]
   1ba08:	814b      	strh	r3, [r1, #10]
                oa_push(&settings->objects, obj);
   1ba0a:	4650      	mov	r0, sl
   1ba0c:	f000 f85f 	bl	1bace <oa_push>
                ret = oa_push(&settings->releasedObjects, obj);
   1ba10:	9902      	ldr	r1, [sp, #8]
   1ba12:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
   1ba16:	f000 f85a 	bl	1bace <oa_push>
            if ((ret = va_getByIndex(it->Arr, 2, &tmp)) != 0)
   1ba1a:	9b03      	ldr	r3, [sp, #12]
   1ba1c:	aa05      	add	r2, sp, #20
   1ba1e:	6898      	ldr	r0, [r3, #8]
   1ba20:	2102      	movs	r1, #2
   1ba22:	f000 fb26 	bl	1c072 <va_getByIndex>
   1ba26:	bb78      	cbnz	r0, 1ba88 <notify_parsePush+0x13e>
            index = (unsigned char)var_toInteger(tmp);
   1ba28:	9805      	ldr	r0, [sp, #20]
   1ba2a:	f000 fc9c 	bl	1c366 <var_toInteger>
            arr_push(items, key_init(obj, (void*)(uint64_t)index));
   1ba2e:	b2c1      	uxtb	r1, r0
   1ba30:	9802      	ldr	r0, [sp, #8]
   1ba32:	f7f9 fb7e 	bl	15132 <key_init>
   1ba36:	4601      	mov	r1, r0
   1ba38:	4630      	mov	r0, r6
   1ba3a:	f7f6 f871 	bl	11b20 <arr_push>
    for (pos = 0; pos != list->Arr->size; ++pos)
   1ba3e:	f109 0901 	add.w	r9, r9, #1
   1ba42:	e790      	b.n	1b966 <notify_parsePush+0x1c>
        if ((ret = arr_getByIndex(items, pos, (void**)&k)) != 0)
   1ba44:	aa01      	add	r2, sp, #4
   1ba46:	4630      	mov	r0, r6
   1ba48:	f7f6 f8a7 	bl	11b9a <arr_getByIndex>
   1ba4c:	b9e0      	cbnz	r0, 1ba88 <notify_parsePush+0x13e>
        obj = (gxObject*)k->key;
   1ba4e:	9b01      	ldr	r3, [sp, #4]
        if ((ret = va_getByIndex(data, pos, &it)) != 0)
   1ba50:	aa03      	add	r2, sp, #12
        obj = (gxObject*)k->key;
   1ba52:	681b      	ldr	r3, [r3, #0]
   1ba54:	9302      	str	r3, [sp, #8]
        if ((ret = va_getByIndex(data, pos, &it)) != 0)
   1ba56:	fa1f f189 	uxth.w	r1, r9
   1ba5a:	4640      	mov	r0, r8
   1ba5c:	f000 fb09 	bl	1c072 <va_getByIndex>
   1ba60:	b990      	cbnz	r0, 1ba88 <notify_parsePush+0x13e>
        index = k->value;
   1ba62:	9b01      	ldr	r3, [sp, #4]
        e.target = obj;
   1ba64:	9a02      	ldr	r2, [sp, #8]
        index = k->value;
   1ba66:	791b      	ldrb	r3, [r3, #4]
        e.index = index;
   1ba68:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        e.value = *it;
   1ba6c:	9b03      	ldr	r3, [sp, #12]
        e.target = obj;
   1ba6e:	920b      	str	r2, [sp, #44]	; 0x2c
        e.value = *it;
   1ba70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ba72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        if ((ret = cosem_setValue(settings, &e)) != 0)
   1ba76:	4629      	mov	r1, r5
   1ba78:	4638      	mov	r0, r7
   1ba7a:	f7fa f91c 	bl	15cb6 <cosem_setValue>
   1ba7e:	f109 0901 	add.w	r9, r9, #1
   1ba82:	2800      	cmp	r0, #0
   1ba84:	f43f af7c 	beq.w	1b980 <notify_parsePush+0x36>
   1ba88:	4604      	mov	r4, r0
   1ba8a:	e77e      	b.n	1b98a <notify_parsePush+0x40>
        if ((ret = va_getByIndex(list->Arr, pos, &it)) != 0)
   1ba8c:	4604      	mov	r4, r0
   1ba8e:	e77c      	b.n	1b98a <notify_parsePush+0x40>

0001ba90 <oa_init>:

//Initialize objectArray.
void oa_init(objectArray* arr)
{
    arr->capacity = 0;
    arr->data = NULL;
   1ba90:	2300      	movs	r3, #0
    arr->capacity = 0;
   1ba92:	e9c0 3300 	strd	r3, r3, [r0]
#if !(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->position = 0;
#endif //!(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->size = 0;
}
   1ba96:	4770      	bx	lr

0001ba98 <oa_capacity>:
    return arr->capacity & 0x7FFF;
}

//Allocate new size for the array in bytes.
int oa_capacity(objectArray* arr, const uint16_t capacity)
{
   1ba98:	b538      	push	{r3, r4, r5, lr}
#ifndef DLMS_IGNORE_MALLOC
    if (!oa_isAttached(arr))
   1ba9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1ba9e:	2b00      	cmp	r3, #0
{
   1baa0:	4604      	mov	r4, r0
   1baa2:	460d      	mov	r5, r1
    if (!oa_isAttached(arr))
   1baa4:	db07      	blt.n	1bab6 <oa_capacity+0x1e>
    {
        arr->capacity = capacity;
   1baa6:	8081      	strh	r1, [r0, #4]
        if (arr->data == NULL)
   1baa8:	6800      	ldr	r0, [r0, #0]
   1baaa:	0089      	lsls	r1, r1, #2
   1baac:	b960      	cbnz	r0, 1bac8 <oa_capacity+0x30>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
   1baae:	4608      	mov	r0, r1
   1bab0:	f7f1 fc20 	bl	d2f4 <malloc>
        }
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   1bab4:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   1bab6:	88a0      	ldrh	r0, [r4, #4]
        }
    }
#endif //DLMS_IGNORE_MALLOC
    if (oa_getCapacity(arr) < capacity)
   1bab8:	f3c0 000e 	ubfx	r0, r0, #0, #15
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    return 0;
}
   1babc:	4285      	cmp	r5, r0
   1babe:	bf8c      	ite	hi
   1bac0:	f44f 7082 	movhi.w	r0, #260	; 0x104
   1bac4:	2000      	movls	r0, #0
   1bac6:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   1bac8:	f7f1 fccc 	bl	d464 <realloc>
   1bacc:	e7f2      	b.n	1bab4 <oa_capacity+0x1c>

0001bace <oa_push>:
}

#ifndef DLMS_IGNORE_MALLOC
//Push new data to the objectArray.
int oa_push(objectArray* arr, gxObject* item)
{
   1bace:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1bad0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1bad4:	8882      	ldrh	r2, [r0, #4]
    if (!oa_isAttached(arr) && arr->size >= arr->capacity)
   1bad6:	2b00      	cmp	r3, #0
{
   1bad8:	4604      	mov	r4, r0
   1bada:	460d      	mov	r5, r1
    if (!oa_isAttached(arr) && arr->size >= arr->capacity)
   1badc:	db0c      	blt.n	1baf8 <oa_push+0x2a>
   1bade:	88c1      	ldrh	r1, [r0, #6]
   1bae0:	4291      	cmp	r1, r2
   1bae2:	d309      	bcc.n	1baf8 <oa_push+0x2a>
    {
        arr->capacity += OBJECT_ARRAY_CAPACITY;
   1bae4:	330a      	adds	r3, #10
   1bae6:	b29b      	uxth	r3, r3
   1bae8:	8083      	strh	r3, [r0, #4]
        if (arr->data == NULL)
   1baea:	6800      	ldr	r0, [r0, #0]
   1baec:	0099      	lsls	r1, r3, #2
   1baee:	b998      	cbnz	r0, 1bb18 <oa_push+0x4a>
        {
            arr->data = (gxObject**)gxmalloc(arr->capacity * sizeof(gxObject*));
   1baf0:	4608      	mov	r0, r1
   1baf2:	f7f1 fbff 	bl	d2f4 <malloc>
        }
        else
        {
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   1baf6:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   1baf8:	88a2      	ldrh	r2, [r4, #4]
        }
    }
    if (oa_getCapacity(arr) <= arr->size)
   1bafa:	88e3      	ldrh	r3, [r4, #6]
   1bafc:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1bb00:	4293      	cmp	r3, r2
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    arr->data[arr->size] = item;
   1bb02:	bf3f      	itttt	cc
   1bb04:	6822      	ldrcc	r2, [r4, #0]
   1bb06:	f842 5023 	strcc.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   1bb0a:	3301      	addcc	r3, #1
   1bb0c:	80e3      	strhcc	r3, [r4, #6]
    return DLMS_ERROR_CODE_OK;
   1bb0e:	bf34      	ite	cc
   1bb10:	2000      	movcc	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1bb12:	f44f 7082 	movcs.w	r0, #260	; 0x104
}
   1bb16:	bd38      	pop	{r3, r4, r5, pc}
            arr->data = (gxObject**)gxrealloc(arr->data, arr->capacity * sizeof(gxObject*));
   1bb18:	f7f1 fca4 	bl	d464 <realloc>
   1bb1c:	e7eb      	b.n	1baf6 <oa_push+0x28>

0001bb1e <oa_clear>:

void oa_clear(objectArray* arr, unsigned char releaseObjects)
{
#ifndef DLMS_IGNORE_MALLOC
    uint16_t pos;
    if (arr->data != NULL)
   1bb1e:	6803      	ldr	r3, [r0, #0]
{
   1bb20:	b570      	push	{r4, r5, r6, lr}
   1bb22:	4604      	mov	r4, r0
   1bb24:	460e      	mov	r6, r1
    if (arr->data != NULL)
   1bb26:	b9cb      	cbnz	r3, 1bb5c <oa_clear+0x3e>
            arr->data = NULL;
            arr->capacity = 0;
        }
    }
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
   1bb28:	2300      	movs	r3, #0
   1bb2a:	80e3      	strh	r3, [r4, #6]
#if !(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->position = 0;
#endif //!(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
}
   1bb2c:	bd70      	pop	{r4, r5, r6, pc}
            obj_clear(arr->data[pos]);
   1bb2e:	b2aa      	uxth	r2, r5
   1bb30:	6823      	ldr	r3, [r4, #0]
   1bb32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1bb36:	f7f9 fd9e 	bl	15676 <obj_clear>
        for (pos = 0; pos != arr->size; ++pos)
   1bb3a:	3501      	adds	r5, #1
   1bb3c:	88e2      	ldrh	r2, [r4, #6]
   1bb3e:	b2ab      	uxth	r3, r5
   1bb40:	429a      	cmp	r2, r3
   1bb42:	d1f4      	bne.n	1bb2e <oa_clear+0x10>
        if (releaseObjects)
   1bb44:	b9c6      	cbnz	r6, 1bb78 <oa_clear+0x5a>
        if (!oa_isAttached(arr))
   1bb46:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   1bb4a:	2b00      	cmp	r3, #0
   1bb4c:	dbec      	blt.n	1bb28 <oa_clear+0xa>
            gxfree(arr->data);
   1bb4e:	6820      	ldr	r0, [r4, #0]
   1bb50:	f7f1 fbd8 	bl	d304 <free>
            arr->data = NULL;
   1bb54:	2300      	movs	r3, #0
   1bb56:	6023      	str	r3, [r4, #0]
            arr->capacity = 0;
   1bb58:	80a3      	strh	r3, [r4, #4]
   1bb5a:	e7e5      	b.n	1bb28 <oa_clear+0xa>
   1bb5c:	2500      	movs	r5, #0
   1bb5e:	e7ed      	b.n	1bb3c <oa_clear+0x1e>
                gxfree(arr->data[pos]);
   1bb60:	b2aa      	uxth	r2, r5
   1bb62:	6823      	ldr	r3, [r4, #0]
   1bb64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1bb68:	f7f1 fbcc 	bl	d304 <free>
            for (pos = 0; pos != arr->size; ++pos)
   1bb6c:	3501      	adds	r5, #1
   1bb6e:	88e2      	ldrh	r2, [r4, #6]
   1bb70:	b2ab      	uxth	r3, r5
   1bb72:	429a      	cmp	r2, r3
   1bb74:	d1f4      	bne.n	1bb60 <oa_clear+0x42>
   1bb76:	e7e6      	b.n	1bb46 <oa_clear+0x28>
   1bb78:	2500      	movs	r5, #0
   1bb7a:	e7f8      	b.n	1bb6e <oa_clear+0x50>

0001bb7c <oa_empty>:

void oa_empty(objectArray* arr)
{
#ifndef DLMS_IGNORE_MALLOC
    if (!oa_isAttached(arr))
   1bb7c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   1bb80:	2b00      	cmp	r3, #0
{
   1bb82:	b510      	push	{r4, lr}
   1bb84:	4604      	mov	r4, r0
    if (!oa_isAttached(arr))
   1bb86:	db07      	blt.n	1bb98 <oa_empty+0x1c>
    {
        if (arr->data != NULL)
   1bb88:	6800      	ldr	r0, [r0, #0]
   1bb8a:	b118      	cbz	r0, 1bb94 <oa_empty+0x18>
        {
            gxfree(arr->data);
   1bb8c:	f7f1 fbba 	bl	d304 <free>
            arr->data = NULL;
   1bb90:	2300      	movs	r3, #0
   1bb92:	6023      	str	r3, [r4, #0]
        }
        arr->capacity = 0;
   1bb94:	2300      	movs	r3, #0
   1bb96:	80a3      	strh	r3, [r4, #4]
    }
#endif //DLMS_IGNORE_MALLOC
    arr->size = 0;
   1bb98:	2300      	movs	r3, #0
   1bb9a:	80e3      	strh	r3, [r4, #6]
#if !(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
    arr->position = 0;
#endif //!(defined(GX_DLMS_MICROCONTROLLER) || defined(DLMS_IGNORE_MALLOC))
}
   1bb9c:	bd10      	pop	{r4, pc}

0001bb9e <oa_getByIndex>:
int oa_getByIndex(
    const objectArray* arr,
    uint16_t index,
    gxObject** item)
{
    if (index >= arr->size)
   1bb9e:	88c3      	ldrh	r3, [r0, #6]
   1bba0:	428b      	cmp	r3, r1
    {
        return DLMS_ERROR_CODE_OUTOFMEMORY;
    }
    *item = (gxObject*)arr->data[index];
   1bba2:	bf81      	itttt	hi
   1bba4:	6803      	ldrhi	r3, [r0, #0]
   1bba6:	f853 3021 	ldrhi.w	r3, [r3, r1, lsl #2]
   1bbaa:	6013      	strhi	r3, [r2, #0]
    return DLMS_ERROR_CODE_OK;
   1bbac:	2000      	movhi	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1bbae:	bf98      	it	ls
   1bbb0:	f44f 7082 	movls.w	r0, #260	; 0x104
}
   1bbb4:	4770      	bx	lr

0001bbb6 <oa_findBySN>:
#ifndef DLMS_IGNORE_ASSOCIATION_SHORT_NAME
int oa_findBySN(
    objectArray* objects,
    uint16_t sn,
    gxObject** object)
{
   1bbb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t pos;
    int ret = DLMS_ERROR_CODE_OK;
    gxObject* obj = NULL;
   1bbb8:	2400      	movs	r4, #0
{
   1bbba:	4605      	mov	r5, r0
   1bbbc:	460f      	mov	r7, r1
   1bbbe:	4616      	mov	r6, r2
    gxObject* obj = NULL;
   1bbc0:	9401      	str	r4, [sp, #4]
    *object = NULL;
   1bbc2:	6014      	str	r4, [r2, #0]
    for (pos = 0; pos != objects->size; ++pos)
   1bbc4:	88eb      	ldrh	r3, [r5, #6]
   1bbc6:	b2a1      	uxth	r1, r4
   1bbc8:	428b      	cmp	r3, r1
   1bbca:	d101      	bne.n	1bbd0 <oa_findBySN+0x1a>
        {
            *object = obj;
            return 0;
        }
    }
    return ret;
   1bbcc:	2000      	movs	r0, #0
   1bbce:	e00b      	b.n	1bbe8 <oa_findBySN+0x32>
        ret = oa_getByIndex(objects, pos, &obj);
   1bbd0:	aa01      	add	r2, sp, #4
   1bbd2:	4628      	mov	r0, r5
   1bbd4:	f7ff ffe3 	bl	1bb9e <oa_getByIndex>
        if (ret != DLMS_ERROR_CODE_OK)
   1bbd8:	b930      	cbnz	r0, 1bbe8 <oa_findBySN+0x32>
        if (obj->shortName == sn)
   1bbda:	9b01      	ldr	r3, [sp, #4]
   1bbdc:	889a      	ldrh	r2, [r3, #4]
   1bbde:	42ba      	cmp	r2, r7
   1bbe0:	f104 0401 	add.w	r4, r4, #1
   1bbe4:	d1ee      	bne.n	1bbc4 <oa_findBySN+0xe>
            *object = obj;
   1bbe6:	6033      	str	r3, [r6, #0]
}
   1bbe8:	b003      	add	sp, #12
   1bbea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001bbec <oa_findByLN>:
int oa_findByLN(
    objectArray* objects,
    DLMS_OBJECT_TYPE type,
    const unsigned char* ln,
    gxObject** object)
{
   1bbec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint16_t pos;
    int ret = DLMS_ERROR_CODE_OK;
    gxObject* obj = NULL;
   1bbf0:	2400      	movs	r4, #0
{
   1bbf2:	4605      	mov	r5, r0
   1bbf4:	460e      	mov	r6, r1
   1bbf6:	4698      	mov	r8, r3
    gxObject* obj = NULL;
   1bbf8:	9401      	str	r4, [sp, #4]
    *object = NULL;
   1bbfa:	601c      	str	r4, [r3, #0]
    if (ln == NULL)
   1bbfc:	4617      	mov	r7, r2
   1bbfe:	b1ea      	cbz	r2, 1bc3c <oa_findByLN+0x50>
    {
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
    }
    for (pos = 0; pos != objects->size; ++pos)
   1bc00:	88eb      	ldrh	r3, [r5, #6]
   1bc02:	b2a1      	uxth	r1, r4
   1bc04:	428b      	cmp	r3, r1
   1bc06:	d101      	bne.n	1bc0c <oa_findByLN+0x20>
   1bc08:	2000      	movs	r0, #0
   1bc0a:	e012      	b.n	1bc32 <oa_findByLN+0x46>
    {
        if ((ret = oa_getByIndex(objects, pos, &obj)) != DLMS_ERROR_CODE_OK)
   1bc0c:	aa01      	add	r2, sp, #4
   1bc0e:	4628      	mov	r0, r5
   1bc10:	f7ff ffc5 	bl	1bb9e <oa_getByIndex>
   1bc14:	b968      	cbnz	r0, 1bc32 <oa_findByLN+0x46>
        {
            break;
        }
        if ((obj->objectType == type || DLMS_OBJECT_TYPE_NONE == type) && memcmp(obj->logicalName, ln, 6) == 0)
   1bc16:	9801      	ldr	r0, [sp, #4]
   1bc18:	8803      	ldrh	r3, [r0, #0]
   1bc1a:	42b3      	cmp	r3, r6
   1bc1c:	d000      	beq.n	1bc20 <oa_findByLN+0x34>
   1bc1e:	b95e      	cbnz	r6, 1bc38 <oa_findByLN+0x4c>
   1bc20:	2206      	movs	r2, #6
   1bc22:	4639      	mov	r1, r7
   1bc24:	4410      	add	r0, r2
   1bc26:	f002 fade 	bl	1e1e6 <memcmp>
   1bc2a:	b928      	cbnz	r0, 1bc38 <oa_findByLN+0x4c>
        {
            *object = obj;
   1bc2c:	9b01      	ldr	r3, [sp, #4]
   1bc2e:	f8c8 3000 	str.w	r3, [r8]
            break;
        }
    }
    return ret;
}
   1bc32:	b002      	add	sp, #8
   1bc34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (pos = 0; pos != objects->size; ++pos)
   1bc38:	3401      	adds	r4, #1
   1bc3a:	e7e1      	b.n	1bc00 <oa_findByLN+0x14>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1bc3c:	f44f 7081 	mov.w	r0, #258	; 0x102
   1bc40:	e7f7      	b.n	1bc32 <oa_findByLN+0x46>

0001bc42 <reply_init>:

/**
* Initialize reply structure.
*/
void reply_init(gxReplyData* reply)
{
   1bc42:	b538      	push	{r3, r4, r5, lr}
   1bc44:	4604      	mov	r4, r0
    reply->invokeId = 0;
   1bc46:	2500      	movs	r5, #0
   1bc48:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
    reply->commandType = 0;
    reply->moreData = DLMS_DATA_REQUEST_TYPES_NONE;
   1bc4c:	f840 5b04 	str.w	r5, [r0], #4
    reply->encryptedCommand = reply->command = DLMS_COMMAND_NONE;
    BYTE_BUFFER_INIT(&reply->data);
   1bc50:	f7f2 fb74 	bl	e33c <bb_init>
    reply->complete = 0;
   1bc54:	7425      	strb	r5, [r4, #16]
    var_init(&reply->dataValue);
   1bc56:	f104 0018 	add.w	r0, r4, #24
   1bc5a:	f000 f830 	bl	1bcbe <var_init>
    reply->totalCount = 0;
    reply->readPosition = 0;
    reply->packetLength = 0;
   1bc5e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
#endif // DLMS_USE_EPOCH_TIME
    reply->preEstablished = 0;
    reply->blockNumber = 0;
    reply->blockNumberAck = 0;
    reply->streaming = 0;
    reply->windowSize = 0;
   1bc62:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    reply->dataType = DLMS_DATA_TYPE_NONE;
   1bc66:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    reply->cipherIndex = 0;
   1bc6a:	8665      	strh	r5, [r4, #50]	; 0x32
    reply->time = 0;
   1bc6c:	6365      	str	r5, [r4, #52]	; 0x34
    reply->preEstablished = 0;
   1bc6e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    reply->blockNumber = 0;
   1bc72:	8765      	strh	r5, [r4, #58]	; 0x3a
    reply->blockNumberAck = 0;
   1bc74:	87a5      	strh	r5, [r4, #60]	; 0x3c
    reply->serverAddress = 0;
   1bc76:	64a5      	str	r5, [r4, #72]	; 0x48
    reply->clientAddress = 0;
}
   1bc78:	bd38      	pop	{r3, r4, r5, pc}

0001bc7a <reply_clear2>:

void reply_clear2(gxReplyData* reply, unsigned char clearData)
{
   1bc7a:	b538      	push	{r3, r4, r5, lr}
    reply->invokeId = 0;
   1bc7c:	2500      	movs	r5, #0
{
   1bc7e:	4604      	mov	r4, r0
    reply->invokeId = 0;
   1bc80:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
    reply->moreData = DLMS_DATA_REQUEST_TYPES_NONE;
   1bc84:	8005      	strh	r5, [r0, #0]
    reply->encryptedCommand = reply->command = DLMS_COMMAND_NONE;
   1bc86:	7085      	strb	r5, [r0, #2]
    if (clearData)
   1bc88:	b121      	cbz	r1, 1bc94 <reply_clear2+0x1a>
    {
        bb_clear(&reply->data);
   1bc8a:	3004      	adds	r0, #4
   1bc8c:	f7f2 fd19 	bl	e6c2 <bb_clear>
        reply->preEstablished = 0;
   1bc90:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    }
    reply->complete = 0;
   1bc94:	2500      	movs	r5, #0
   1bc96:	7425      	strb	r5, [r4, #16]
    var_clear(&reply->dataValue);
   1bc98:	f104 0018 	add.w	r0, r4, #24
   1bc9c:	f000 f96b 	bl	1bf76 <var_clear>
    reply->totalCount = 0;
    reply->readPosition = 0;
    reply->packetLength = 0;
   1bca0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    memset(&reply->time, 0, sizeof(struct tm));
#endif // DLMS_USE_EPOCH_TIME
    reply->blockNumber = 0;
    reply->blockNumberAck = 0;
    reply->streaming = 0;
    reply->windowSize = 0;
   1bca4:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
    reply->dataType = DLMS_DATA_TYPE_NONE;
   1bca8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    reply->cipherIndex = 0;
   1bcac:	8665      	strh	r5, [r4, #50]	; 0x32
    reply->time = 0;
   1bcae:	6365      	str	r5, [r4, #52]	; 0x34
    reply->blockNumber = 0;
   1bcb0:	8765      	strh	r5, [r4, #58]	; 0x3a
    reply->blockNumberAck = 0;
   1bcb2:	87a5      	strh	r5, [r4, #60]	; 0x3c
    reply->serverAddress = 0;
   1bcb4:	64a5      	str	r5, [r4, #72]	; 0x48
    reply->clientAddress = 0;
}
   1bcb6:	bd38      	pop	{r3, r4, r5, pc}

0001bcb8 <reply_clear>:

void reply_clear(gxReplyData* reply)
{
    reply_clear2(reply, 1);
   1bcb8:	2101      	movs	r1, #1
   1bcba:	f7ff bfde 	b.w	1bc7a <reply_clear2>

0001bcbe <var_init>:
{
   1bcbe:	4603      	mov	r3, r0
    data->vt = DLMS_DATA_TYPE_NONE;
   1bcc0:	2000      	movs	r0, #0
   1bcc2:	7018      	strb	r0, [r3, #0]
    data->byteArr = NULL;
   1bcc4:	6098      	str	r0, [r3, #8]
}
   1bcc6:	4770      	bx	lr

0001bcc8 <var_getDate>:
{
   1bcc8:	b570      	push	{r4, r5, r6, lr}
   1bcca:	b086      	sub	sp, #24
    unsigned char month = 0xFF, day = 0xFF, dayOfWeek = 0xFF;
   1bccc:	23ff      	movs	r3, #255	; 0xff
   1bcce:	f88d 3014 	strb.w	r3, [sp, #20]
    time_fromUnixTime2(dateTime->value, &year, &month,
   1bcd2:	f10d 0315 	add.w	r3, sp, #21
   1bcd6:	9303      	str	r3, [sp, #12]
   1bcd8:	2300      	movs	r3, #0
   1bcda:	e9cd 3301 	strd	r3, r3, [sp, #4]
{
   1bcde:	4605      	mov	r5, r0
    time_fromUnixTime2(dateTime->value, &year, &month,
   1bce0:	9300      	str	r3, [sp, #0]
    uint16_t year = 0xFFFF;
   1bce2:	f64f 76ff 	movw	r6, #65535	; 0xffff
{
   1bce6:	460c      	mov	r4, r1
    time_fromUnixTime2(dateTime->value, &year, &month,
   1bce8:	ab05      	add	r3, sp, #20
   1bcea:	f10d 0213 	add.w	r2, sp, #19
   1bcee:	f10d 0116 	add.w	r1, sp, #22
   1bcf2:	6800      	ldr	r0, [r0, #0]
    uint16_t year = 0xFFFF;
   1bcf4:	f8ad 6016 	strh.w	r6, [sp, #22]
    unsigned char month = 0xFF, day = 0xFF, dayOfWeek = 0xFF;
   1bcf8:	f88d 6013 	strb.w	r6, [sp, #19]
   1bcfc:	f88d 6015 	strb.w	r6, [sp, #21]
    time_fromUnixTime2(dateTime->value, &year, &month,
   1bd00:	f7e6 fbcc 	bl	249c <time_fromUnixTime2>
    if ((dateTime->skip & DATETIME_SKIPS_YEAR) != 0)
   1bd04:	88eb      	ldrh	r3, [r5, #6]
   1bd06:	07d8      	lsls	r0, r3, #31
        year = 0xFFFF;
   1bd08:	bf48      	it	mi
   1bd0a:	f8ad 6016 	strhmi.w	r6, [sp, #22]
    bb_setUInt16(ba, year);
   1bd0e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   1bd12:	4620      	mov	r0, r4
   1bd14:	f7f2 fb9d 	bl	e452 <bb_setUInt16>
    if ((dateTime->skip & DATETIME_SKIPS_MONTH) == 0)
   1bd18:	88eb      	ldrh	r3, [r5, #6]
   1bd1a:	0799      	lsls	r1, r3, #30
   1bd1c:	d42d      	bmi.n	1bd7a <var_getDate+0xb2>
        if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_BEGIN) != 0)
   1bd1e:	7a2b      	ldrb	r3, [r5, #8]
   1bd20:	07da      	lsls	r2, r3, #31
   1bd22:	d526      	bpl.n	1bd72 <var_getDate+0xaa>
            month = 0xFE;
   1bd24:	23fe      	movs	r3, #254	; 0xfe
            month = 0xFD;
   1bd26:	f88d 3013 	strb.w	r3, [sp, #19]
        bb_setUInt8(ba, month);
   1bd2a:	f89d 1013 	ldrb.w	r1, [sp, #19]
        bb_setUInt8(ba, 0xFF);
   1bd2e:	4620      	mov	r0, r4
   1bd30:	f7f2 fb6d 	bl	e40e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_DAY) == 0)
   1bd34:	88eb      	ldrh	r3, [r5, #6]
   1bd36:	0758      	lsls	r0, r3, #29
   1bd38:	d425      	bmi.n	1bd86 <var_getDate+0xbe>
        if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY) != 0)
   1bd3a:	7a2b      	ldrb	r3, [r5, #8]
   1bd3c:	0759      	lsls	r1, r3, #29
   1bd3e:	d51e      	bpl.n	1bd7e <var_getDate+0xb6>
            day = 0xFE;
   1bd40:	23fe      	movs	r3, #254	; 0xfe
            day = 0xFD;
   1bd42:	f88d 3014 	strb.w	r3, [sp, #20]
        bb_setUInt8(ba, day);
   1bd46:	f89d 1014 	ldrb.w	r1, [sp, #20]
        bb_setUInt8(ba, 0xFF);
   1bd4a:	4620      	mov	r0, r4
   1bd4c:	f7f2 fb5f 	bl	e40e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_DAYOFWEEK) == 0)
   1bd50:	88eb      	ldrh	r3, [r5, #6]
   1bd52:	071b      	lsls	r3, r3, #28
   1bd54:	d419      	bmi.n	1bd8a <var_getDate+0xc2>
        if (dayOfWeek == 0)
   1bd56:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1bd5a:	b913      	cbnz	r3, 1bd62 <var_getDate+0x9a>
            dayOfWeek = 7;
   1bd5c:	2307      	movs	r3, #7
   1bd5e:	f88d 3015 	strb.w	r3, [sp, #21]
        bb_setUInt8(ba, dayOfWeek);
   1bd62:	f89d 1015 	ldrb.w	r1, [sp, #21]
        bb_setUInt8(ba, 0xFF);
   1bd66:	4620      	mov	r0, r4
   1bd68:	f7f2 fb51 	bl	e40e <bb_setUInt8>
}
   1bd6c:	2000      	movs	r0, #0
   1bd6e:	b006      	add	sp, #24
   1bd70:	bd70      	pop	{r4, r5, r6, pc}
        else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_DST_END) != 0)
   1bd72:	079e      	lsls	r6, r3, #30
   1bd74:	d5d9      	bpl.n	1bd2a <var_getDate+0x62>
            month = 0xFD;
   1bd76:	23fd      	movs	r3, #253	; 0xfd
   1bd78:	e7d5      	b.n	1bd26 <var_getDate+0x5e>
        bb_setUInt8(ba, 0xFF);
   1bd7a:	21ff      	movs	r1, #255	; 0xff
   1bd7c:	e7d7      	b.n	1bd2e <var_getDate+0x66>
        else if ((dateTime->extraInfo & DLMS_DATE_TIME_EXTRA_INFO_LAST_DAY2) != 0)
   1bd7e:	071a      	lsls	r2, r3, #28
   1bd80:	d5e1      	bpl.n	1bd46 <var_getDate+0x7e>
            day = 0xFD;
   1bd82:	23fd      	movs	r3, #253	; 0xfd
   1bd84:	e7dd      	b.n	1bd42 <var_getDate+0x7a>
        bb_setUInt8(ba, 0xFF);
   1bd86:	21ff      	movs	r1, #255	; 0xff
   1bd88:	e7df      	b.n	1bd4a <var_getDate+0x82>
        bb_setUInt8(ba, 0xFF);
   1bd8a:	21ff      	movs	r1, #255	; 0xff
   1bd8c:	e7eb      	b.n	1bd66 <var_getDate+0x9e>

0001bd8e <var_getTime>:
{
   1bd8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd90:	b087      	sub	sp, #28
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   1bd92:	f10d 0217 	add.w	r2, sp, #23
   1bd96:	9202      	str	r2, [sp, #8]
   1bd98:	f10d 0216 	add.w	r2, sp, #22
   1bd9c:	2300      	movs	r3, #0
   1bd9e:	9201      	str	r2, [sp, #4]
   1bda0:	f10d 0215 	add.w	r2, sp, #21
   1bda4:	9200      	str	r2, [sp, #0]
   1bda6:	9303      	str	r3, [sp, #12]
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   1bda8:	27ff      	movs	r7, #255	; 0xff
{
   1bdaa:	4605      	mov	r5, r0
   1bdac:	460c      	mov	r4, r1
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   1bdae:	6800      	ldr	r0, [r0, #0]
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   1bdb0:	f88d 7015 	strb.w	r7, [sp, #21]
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   1bdb4:	461a      	mov	r2, r3
   1bdb6:	4619      	mov	r1, r3
    unsigned char hour = 0xFF, minute = 0xFF, second = 0xFF;
   1bdb8:	f88d 7016 	strb.w	r7, [sp, #22]
   1bdbc:	f88d 7017 	strb.w	r7, [sp, #23]
    int ret = time_fromUnixTime2(dateTime->value, NULL, NULL,
   1bdc0:	f7e6 fb6c 	bl	249c <time_fromUnixTime2>
    if (ret != 0)
   1bdc4:	4606      	mov	r6, r0
   1bdc6:	bb10      	cbnz	r0, 1be0e <var_getTime+0x80>
    if ((dateTime->skip & DATETIME_SKIPS_HOUR) == 0)
   1bdc8:	88eb      	ldrh	r3, [r5, #6]
   1bdca:	06d9      	lsls	r1, r3, #27
        bb_setUInt8(ba, hour);
   1bdcc:	bf54      	ite	pl
   1bdce:	f89d 1015 	ldrbpl.w	r1, [sp, #21]
        bb_setUInt8(ba, 0xFF);
   1bdd2:	4639      	movmi	r1, r7
   1bdd4:	4620      	mov	r0, r4
   1bdd6:	f7f2 fb1a 	bl	e40e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_MINUTE) == 0)
   1bdda:	88eb      	ldrh	r3, [r5, #6]
   1bddc:	069a      	lsls	r2, r3, #26
        bb_setUInt8(ba, minute);
   1bdde:	bf54      	ite	pl
   1bde0:	f89d 1016 	ldrbpl.w	r1, [sp, #22]
        bb_setUInt8(ba, 0xFF);
   1bde4:	21ff      	movmi	r1, #255	; 0xff
   1bde6:	4620      	mov	r0, r4
   1bde8:	f7f2 fb11 	bl	e40e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_SECOND) == 0)
   1bdec:	88eb      	ldrh	r3, [r5, #6]
   1bdee:	065b      	lsls	r3, r3, #25
        bb_setUInt8(ba, second);
   1bdf0:	bf54      	ite	pl
   1bdf2:	f89d 1017 	ldrbpl.w	r1, [sp, #23]
        bb_setUInt8(ba, 0xFF);
   1bdf6:	21ff      	movmi	r1, #255	; 0xff
   1bdf8:	4620      	mov	r0, r4
   1bdfa:	f7f2 fb08 	bl	e40e <bb_setUInt8>
    if ((dateTime->skip & DATETIME_SKIPS_MS) == 0)
   1bdfe:	88e9      	ldrh	r1, [r5, #6]
   1be00:	f011 0180 	ands.w	r1, r1, #128	; 0x80
        bb_setUInt8(ba, 0xFF);
   1be04:	bf18      	it	ne
   1be06:	21ff      	movne	r1, #255	; 0xff
   1be08:	4620      	mov	r0, r4
   1be0a:	f7f2 fb00 	bl	e40e <bb_setUInt8>
}
   1be0e:	4630      	mov	r0, r6
   1be10:	b007      	add	sp, #28
   1be12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001be14 <var_setOctetString>:
{
   1be14:	b530      	push	{r4, r5, lr}
    if (value->vt == DLMS_DATA_TYPE_STRING)
   1be16:	780b      	ldrb	r3, [r1, #0]
   1be18:	2b0a      	cmp	r3, #10
{
   1be1a:	b085      	sub	sp, #20
   1be1c:	4604      	mov	r4, r0
   1be1e:	460d      	mov	r5, r1
    if (value->vt == DLMS_DATA_TYPE_STRING)
   1be20:	d116      	bne.n	1be50 <var_setOctetString+0x3c>
        BYTE_BUFFER_INIT(&bb);
   1be22:	a801      	add	r0, sp, #4
   1be24:	f7f2 fa8a 	bl	e33c <bb_init>
        bb_addHexString(&bb, (char*)value->strVal->data);
   1be28:	68ab      	ldr	r3, [r5, #8]
   1be2a:	a801      	add	r0, sp, #4
   1be2c:	6819      	ldr	r1, [r3, #0]
   1be2e:	f7f2 fd9e 	bl	e96e <bb_addHexString>
        hlp_setObjectCount(bb.size, buff);
   1be32:	4621      	mov	r1, r4
   1be34:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1be38:	f7ff fbe5 	bl	1b606 <hlp_setObjectCount>
        bb_set2(buff, &bb, 0, bb.size);
   1be3c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1be40:	2200      	movs	r2, #0
   1be42:	a901      	add	r1, sp, #4
   1be44:	4620      	mov	r0, r4
   1be46:	f7f2 fbf7 	bl	e638 <bb_set2>
    return 0;
   1be4a:	2000      	movs	r0, #0
}
   1be4c:	b005      	add	sp, #20
   1be4e:	bd30      	pop	{r4, r5, pc}
    else if (value->vt == DLMS_DATA_TYPE_OCTET_STRING)
   1be50:	2b09      	cmp	r3, #9
   1be52:	d111      	bne.n	1be78 <var_setOctetString+0x64>
        if (value->byteArr == NULL)
   1be54:	688b      	ldr	r3, [r1, #8]
   1be56:	b923      	cbnz	r3, 1be62 <var_setOctetString+0x4e>
            hlp_setObjectCount(0, buff);
   1be58:	4621      	mov	r1, r4
   1be5a:	2000      	movs	r0, #0
   1be5c:	f7ff fbd3 	bl	1b606 <hlp_setObjectCount>
   1be60:	e7f3      	b.n	1be4a <var_setOctetString+0x36>
            hlp_setObjectCount(value->byteArr->size, buff);
   1be62:	4601      	mov	r1, r0
   1be64:	88d8      	ldrh	r0, [r3, #6]
   1be66:	f7ff fbce 	bl	1b606 <hlp_setObjectCount>
            bb_set(buff, value->byteArr->data, value->byteArr->size);
   1be6a:	68ab      	ldr	r3, [r5, #8]
   1be6c:	4620      	mov	r0, r4
   1be6e:	88da      	ldrh	r2, [r3, #6]
   1be70:	6819      	ldr	r1, [r3, #0]
   1be72:	f7f2 fbb2 	bl	e5da <bb_set>
   1be76:	e7e8      	b.n	1be4a <var_setOctetString+0x36>
    else if (value->vt == DLMS_DATA_TYPE_NONE)
   1be78:	2b00      	cmp	r3, #0
   1be7a:	d0ed      	beq.n	1be58 <var_setOctetString+0x44>
        return DLMS_ERROR_CODE_INVALID_PARAMETER;
   1be7c:	f44f 7081 	mov.w	r0, #258	; 0x102
   1be80:	e7e4      	b.n	1be4c <var_setOctetString+0x38>

0001be82 <va_init>:
    arr->data = NULL;
   1be82:	2300      	movs	r3, #0
    arr->capacity = 0;
   1be84:	e9c0 3300 	strd	r3, r3, [r0]
}
   1be88:	4770      	bx	lr

0001be8a <va_capacity>:
    if (!va_isAttached(arr))
   1be8a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   1be8e:	2a00      	cmp	r2, #0
{
   1be90:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1be92:	8883      	ldrh	r3, [r0, #4]
{
   1be94:	4604      	mov	r4, r0
   1be96:	460d      	mov	r5, r1
    if (!va_isAttached(arr))
   1be98:	db06      	blt.n	1bea8 <va_capacity+0x1e>
        if (capacity == 0)
   1be9a:	b961      	cbnz	r1, 1beb6 <va_capacity+0x2c>
            if (arr->capacity != 0)
   1be9c:	b11b      	cbz	r3, 1bea6 <va_capacity+0x1c>
                gxfree(arr->data);
   1be9e:	6800      	ldr	r0, [r0, #0]
   1bea0:	f7f1 fa30 	bl	d304 <free>
                arr->size = 0;
   1bea4:	80e5      	strh	r5, [r4, #6]
        arr->capacity = capacity;
   1bea6:	80a5      	strh	r5, [r4, #4]
    return arr->capacity & 0x7FFF;
   1bea8:	88a3      	ldrh	r3, [r4, #4]
    if (va_getCapacity(arr) < capacity)
   1beaa:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1beae:	429d      	cmp	r5, r3
   1beb0:	d809      	bhi.n	1bec6 <va_capacity+0x3c>
    return 0;
   1beb2:	2000      	movs	r0, #0
   1beb4:	e009      	b.n	1beca <va_capacity+0x40>
            if (arr->capacity == 0)
   1beb6:	0089      	lsls	r1, r1, #2
   1beb8:	b943      	cbnz	r3, 1becc <va_capacity+0x42>
                arr->data = (void**)gxmalloc(capacity * sizeof(dlmsVARIANT*));
   1beba:	4608      	mov	r0, r1
   1bebc:	f7f1 fa1a 	bl	d2f4 <malloc>
   1bec0:	6020      	str	r0, [r4, #0]
                if (arr->data == NULL)
   1bec2:	2800      	cmp	r0, #0
   1bec4:	d1ef      	bne.n	1bea6 <va_capacity+0x1c>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   1bec6:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1beca:	bd38      	pop	{r3, r4, r5, pc}
                void** tmp = (void**)gxrealloc(arr->data, capacity * sizeof(dlmsVARIANT*));
   1becc:	6800      	ldr	r0, [r0, #0]
   1bece:	f7f1 fac9 	bl	d464 <realloc>
                if (tmp == NULL)
   1bed2:	2800      	cmp	r0, #0
   1bed4:	d0f7      	beq.n	1bec6 <va_capacity+0x3c>
                arr->data = tmp;
   1bed6:	6020      	str	r0, [r4, #0]
   1bed8:	e7e5      	b.n	1bea6 <va_capacity+0x1c>

0001beda <va_push>:
{
   1beda:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1bedc:	8882      	ldrh	r2, [r0, #4]
{
   1bede:	4604      	mov	r4, r0
    return (arr->capacity & 0x8000) == 0x8000;
   1bee0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
    if (!va_isAttached(arr))
   1bee4:	2800      	cmp	r0, #0
{
   1bee6:	460d      	mov	r5, r1
    if (!va_isAttached(arr))
   1bee8:	db0a      	blt.n	1bf00 <va_push+0x26>
   1beea:	88e3      	ldrh	r3, [r4, #6]
        if (arr->size >= arr->capacity)
   1beec:	429a      	cmp	r2, r3
   1beee:	d807      	bhi.n	1bf00 <va_push+0x26>
            arr->capacity += VARIANT_ARRAY_CAPACITY;
   1bef0:	300a      	adds	r0, #10
   1bef2:	b280      	uxth	r0, r0
   1bef4:	80a0      	strh	r0, [r4, #4]
            if (arr->size == 0)
   1bef6:	0080      	lsls	r0, r0, #2
   1bef8:	b97b      	cbnz	r3, 1bf1a <va_push+0x40>
                arr->data = (void**)gxmalloc(arr->capacity * sizeof(dlmsVARIANT*));
   1befa:	f7f1 f9fb 	bl	d2f4 <malloc>
                arr->data = tmp;
   1befe:	6020      	str	r0, [r4, #0]
    return arr->capacity & 0x7FFF;
   1bf00:	88a2      	ldrh	r2, [r4, #4]
    if (va_getCapacity(arr) <= arr->size)
   1bf02:	88e3      	ldrh	r3, [r4, #6]
   1bf04:	f3c2 020e 	ubfx	r2, r2, #0, #15
   1bf08:	4293      	cmp	r3, r2
   1bf0a:	d20c      	bcs.n	1bf26 <va_push+0x4c>
    p[arr->size] = item;
   1bf0c:	6822      	ldr	r2, [r4, #0]
   1bf0e:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    ++arr->size;
   1bf12:	3301      	adds	r3, #1
   1bf14:	80e3      	strh	r3, [r4, #6]
    return 0;
   1bf16:	2000      	movs	r0, #0
   1bf18:	e007      	b.n	1bf2a <va_push+0x50>
                void** tmp = (void**)gxrealloc(arr->data, arr->capacity * sizeof(dlmsVARIANT*));
   1bf1a:	4601      	mov	r1, r0
   1bf1c:	6820      	ldr	r0, [r4, #0]
   1bf1e:	f7f1 faa1 	bl	d464 <realloc>
                if (tmp == NULL)
   1bf22:	2800      	cmp	r0, #0
   1bf24:	d1eb      	bne.n	1befe <va_push+0x24>
                    return DLMS_ERROR_CODE_OUTOFMEMORY;
   1bf26:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1bf2a:	bd38      	pop	{r3, r4, r5, pc}

0001bf2c <va_clear>:
    if (arr->data != NULL && !attached)
   1bf2c:	6802      	ldr	r2, [r0, #0]
{
   1bf2e:	b538      	push	{r3, r4, r5, lr}
    return (arr->capacity & 0x8000) == 0x8000;
   1bf30:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
{
   1bf34:	4604      	mov	r4, r0
    if (arr->data != NULL && !attached)
   1bf36:	b1da      	cbz	r2, 1bf70 <va_clear+0x44>
   1bf38:	2b00      	cmp	r3, #0
   1bf3a:	da17      	bge.n	1bf6c <va_clear+0x40>
    arr->size = 0;
   1bf3c:	2300      	movs	r3, #0
   1bf3e:	80e3      	strh	r3, [r4, #6]
}
   1bf40:	bd38      	pop	{r3, r4, r5, pc}
            var_clear((dlmsVARIANT*)arr->data[pos]);
   1bf42:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
   1bf46:	f000 f816 	bl	1bf76 <var_clear>
            gxfree(arr->data[pos]);
   1bf4a:	6823      	ldr	r3, [r4, #0]
   1bf4c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1bf50:	f7f1 f9d8 	bl	d304 <free>
        for (pos = 0; pos != arr->size; ++pos)
   1bf54:	3501      	adds	r5, #1
   1bf56:	88e3      	ldrh	r3, [r4, #6]
   1bf58:	6820      	ldr	r0, [r4, #0]
   1bf5a:	42ab      	cmp	r3, r5
   1bf5c:	d1f1      	bne.n	1bf42 <va_clear+0x16>
        gxfree(arr->data);
   1bf5e:	f7f1 f9d1 	bl	d304 <free>
        arr->data = NULL;
   1bf62:	2300      	movs	r3, #0
   1bf64:	6023      	str	r3, [r4, #0]
        arr->capacity = 0;
   1bf66:	2300      	movs	r3, #0
   1bf68:	80a3      	strh	r3, [r4, #4]
   1bf6a:	e7e7      	b.n	1bf3c <va_clear+0x10>
        for (pos = 0; pos != arr->size; ++pos)
   1bf6c:	2500      	movs	r5, #0
   1bf6e:	e7f2      	b.n	1bf56 <va_clear+0x2a>
    if (!attached)
   1bf70:	2b00      	cmp	r3, #0
   1bf72:	daf8      	bge.n	1bf66 <va_clear+0x3a>
   1bf74:	e7e2      	b.n	1bf3c <va_clear+0x10>

0001bf76 <var_clear>:
{
   1bf76:	b538      	push	{r3, r4, r5, lr}
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1bf78:	f990 2000 	ldrsb.w	r2, [r0]
   1bf7c:	7803      	ldrb	r3, [r0, #0]
   1bf7e:	2a00      	cmp	r2, #0
{
   1bf80:	4604      	mov	r4, r0
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1bf82:	db21      	blt.n	1bfc8 <var_clear+0x52>
    switch (data->vt)
   1bf84:	3b01      	subs	r3, #1
   1bf86:	2b1a      	cmp	r3, #26
   1bf88:	d83e      	bhi.n	1c008 <var_clear+0x92>
   1bf8a:	e8df f003 	tbb	[pc, r3]
   1bf8e:	2828      	.short	0x2828
   1bf90:	3d3d333d 	.word	0x3d3d333d
   1bf94:	1f0e3d3d 	.word	0x1f0e3d3d
   1bf98:	3d3d0e3d 	.word	0x3d3d0e3d
   1bf9c:	3d3d3d3d 	.word	0x3d3d3d3d
   1bfa0:	3d3d3d28 	.word	0x3d3d3d28
   1bfa4:	39393d3d 	.word	0x39393d3d
   1bfa8:	39          	.byte	0x39
   1bfa9:	00          	.byte	0x00
        if (data->strUtfVal != NULL)
   1bfaa:	6880      	ldr	r0, [r0, #8]
   1bfac:	b150      	cbz	r0, 1bfc4 <var_clear+0x4e>
            bb_clear(data->strUtfVal);
   1bfae:	f7f2 fb88 	bl	e6c2 <bb_clear>
            if (!bb_isAttached(data->strUtfVal))
   1bfb2:	68a0      	ldr	r0, [r4, #8]
   1bfb4:	f7f2 f9b1 	bl	e31a <bb_isAttached>
   1bfb8:	4605      	mov	r5, r0
   1bfba:	b918      	cbnz	r0, 1bfc4 <var_clear+0x4e>
                gxfree(data->strUtfVal);
   1bfbc:	68a0      	ldr	r0, [r4, #8]
   1bfbe:	f7f1 f9a1 	bl	d304 <free>
                data->strUtfVal = NULL;
   1bfc2:	60a5      	str	r5, [r4, #8]
    data->vt = DLMS_DATA_TYPE_NONE;
   1bfc4:	2300      	movs	r3, #0
   1bfc6:	7023      	strb	r3, [r4, #0]
}
   1bfc8:	2000      	movs	r0, #0
   1bfca:	bd38      	pop	{r3, r4, r5, pc}
        if (data->strVal != NULL)
   1bfcc:	6880      	ldr	r0, [r0, #8]
   1bfce:	2800      	cmp	r0, #0
   1bfd0:	d0f8      	beq.n	1bfc4 <var_clear+0x4e>
            bb_clear(data->strVal);
   1bfd2:	f7f2 fb76 	bl	e6c2 <bb_clear>
            gxfree(data->bitArr);
   1bfd6:	68a0      	ldr	r0, [r4, #8]
   1bfd8:	f7f1 f994 	bl	d304 <free>
   1bfdc:	e7f2      	b.n	1bfc4 <var_clear+0x4e>
        if (data->Arr != NULL)
   1bfde:	6880      	ldr	r0, [r0, #8]
   1bfe0:	2800      	cmp	r0, #0
   1bfe2:	d0ef      	beq.n	1bfc4 <var_clear+0x4e>
            va_clear(data->Arr);
   1bfe4:	f7ff ffa2 	bl	1bf2c <va_clear>
            gxfree(data->Arr);
   1bfe8:	68a0      	ldr	r0, [r4, #8]
   1bfea:	f7f1 f98b 	bl	d304 <free>
            data->Arr = NULL;
   1bfee:	2300      	movs	r3, #0
   1bff0:	60a3      	str	r3, [r4, #8]
   1bff2:	e7e7      	b.n	1bfc4 <var_clear+0x4e>
        if (data->bitArr != NULL)
   1bff4:	6880      	ldr	r0, [r0, #8]
   1bff6:	2800      	cmp	r0, #0
   1bff8:	d0e4      	beq.n	1bfc4 <var_clear+0x4e>
            ba_clear(data->bitArr);
   1bffa:	f7f2 f908 	bl	e20e <ba_clear>
   1bffe:	e7ea      	b.n	1bfd6 <var_clear+0x60>
        if (data->dateTime != NULL)
   1c000:	6880      	ldr	r0, [r0, #8]
   1c002:	b108      	cbz	r0, 1c008 <var_clear+0x92>
            gxfree(data->dateTime);
   1c004:	f7f1 f97e 	bl	d304 <free>
        data->llVal = 0;
   1c008:	2200      	movs	r2, #0
   1c00a:	2300      	movs	r3, #0
   1c00c:	e9c4 2302 	strd	r2, r3, [r4, #8]
        break;
   1c010:	e7d8      	b.n	1bfc4 <var_clear+0x4e>

0001c012 <var_setUInt8>:
{
   1c012:	b538      	push	{r3, r4, r5, lr}
   1c014:	4604      	mov	r4, r0
   1c016:	460d      	mov	r5, r1
    var_clear(data);
   1c018:	f7ff ffad 	bl	1bf76 <var_clear>
    data->vt = DLMS_DATA_TYPE_UINT8;
   1c01c:	2311      	movs	r3, #17
   1c01e:	7023      	strb	r3, [r4, #0]
    data->bVal = value;
   1c020:	7225      	strb	r5, [r4, #8]
}
   1c022:	2000      	movs	r0, #0
   1c024:	bd38      	pop	{r3, r4, r5, pc}

0001c026 <var_addBytes>:
{
   1c026:	b570      	push	{r4, r5, r6, lr}
    if (data->vt != DLMS_DATA_TYPE_OCTET_STRING)
   1c028:	7803      	ldrb	r3, [r0, #0]
   1c02a:	2b09      	cmp	r3, #9
{
   1c02c:	4604      	mov	r4, r0
   1c02e:	460d      	mov	r5, r1
   1c030:	4616      	mov	r6, r2
    if (data->vt != DLMS_DATA_TYPE_OCTET_STRING)
   1c032:	d010      	beq.n	1c056 <var_addBytes+0x30>
        var_clear(data);
   1c034:	f7ff ff9f 	bl	1bf76 <var_clear>
        data->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1c038:	200c      	movs	r0, #12
   1c03a:	f7f1 f95b 	bl	d2f4 <malloc>
   1c03e:	60a0      	str	r0, [r4, #8]
        BYTE_BUFFER_INIT(data->byteArr);
   1c040:	f7f2 f97c 	bl	e33c <bb_init>
        data->vt = DLMS_DATA_TYPE_OCTET_STRING;
   1c044:	2309      	movs	r3, #9
   1c046:	7023      	strb	r3, [r4, #0]
    return bb_set(data->byteArr, value, count);
   1c048:	68a0      	ldr	r0, [r4, #8]
   1c04a:	4632      	mov	r2, r6
   1c04c:	4629      	mov	r1, r5
}
   1c04e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return bb_set(data->byteArr, value, count);
   1c052:	f7f2 bac2 	b.w	e5da <bb_set>
        bb_clear(data->byteArr);
   1c056:	6880      	ldr	r0, [r0, #8]
   1c058:	f7f2 fb33 	bl	e6c2 <bb_clear>
   1c05c:	e7f4      	b.n	1c048 <var_addBytes+0x22>

0001c05e <va_attach2>:
    trg->capacity = src->capacity;
   1c05e:	888b      	ldrh	r3, [r1, #4]
   1c060:	8083      	strh	r3, [r0, #4]
    trg->data = src->data;
   1c062:	680b      	ldr	r3, [r1, #0]
   1c064:	6003      	str	r3, [r0, #0]
    trg->size = src->size;
   1c066:	88cb      	ldrh	r3, [r1, #6]
   1c068:	80c3      	strh	r3, [r0, #6]
    src->data = NULL;
   1c06a:	2300      	movs	r3, #0
    src->size = src->capacity = 0;
   1c06c:	e9c1 3300 	strd	r3, r3, [r1]
}
   1c070:	4770      	bx	lr

0001c072 <va_getByIndex>:
    if (index >= arr->size)
   1c072:	88c3      	ldrh	r3, [r0, #6]
   1c074:	428b      	cmp	r3, r1
    *item = p[index];
   1c076:	bfc1      	itttt	gt
   1c078:	6803      	ldrgt	r3, [r0, #0]
   1c07a:	f853 3021 	ldrgt.w	r3, [r3, r1, lsl #2]
   1c07e:	6013      	strgt	r3, [r2, #0]
    return DLMS_ERROR_CODE_OK;
   1c080:	2000      	movgt	r0, #0
        return DLMS_ERROR_CODE_OUTOFMEMORY;
   1c082:	bfd8      	it	le
   1c084:	f44f 7082 	movle.w	r0, #260	; 0x104
}
   1c088:	4770      	bx	lr

0001c08a <var_getBytes3>:
    if ((type & DLMS_DATA_TYPE_BYREF) != 0)
   1c08a:	f011 0f80 	tst.w	r1, #128	; 0x80
{
   1c08e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c090:	4605      	mov	r5, r0
   1c092:	460f      	mov	r7, r1
   1c094:	4616      	mov	r6, r2
   1c096:	461c      	mov	r4, r3
    if ((type & DLMS_DATA_TYPE_BYREF) != 0)
   1c098:	d005      	beq.n	1c0a6 <var_getBytes3+0x1c>
        return var_getBytes3(data, type & ~DLMS_DATA_TYPE_BYREF, ba, addType);
   1c09a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1c09e:	f7ff fff4 	bl	1c08a <var_getBytes3>
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1c0a2:	4604      	mov	r4, r0
   1c0a4:	e00e      	b.n	1c0c4 <var_getBytes3+0x3a>
    if (type == DLMS_DATA_TYPE_STRUCTURE ||
   1c0a6:	1e4b      	subs	r3, r1, #1
   1c0a8:	2b01      	cmp	r3, #1
   1c0aa:	d822      	bhi.n	1c0f2 <var_getBytes3+0x68>
        if ((ret = bb_setUInt8(ba, type)) == 0 &&
   1c0ac:	4610      	mov	r0, r2
   1c0ae:	f7f2 f9ae 	bl	e40e <bb_setUInt8>
   1c0b2:	4604      	mov	r4, r0
   1c0b4:	b930      	cbnz	r0, 1c0c4 <var_getBytes3+0x3a>
            (ret = hlp_setObjectCount(data->Arr->size, ba)) == 0)
   1c0b6:	68ab      	ldr	r3, [r5, #8]
   1c0b8:	4631      	mov	r1, r6
   1c0ba:	88d8      	ldrh	r0, [r3, #6]
   1c0bc:	f7ff faa3 	bl	1b606 <hlp_setObjectCount>
        if ((ret = bb_setUInt8(ba, type)) == 0 &&
   1c0c0:	4604      	mov	r4, r0
   1c0c2:	b1a0      	cbz	r0, 1c0ee <var_getBytes3+0x64>
}
   1c0c4:	4620      	mov	r0, r4
   1c0c6:	b003      	add	sp, #12
   1c0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1c0ca:	aa01      	add	r2, sp, #4
   1c0cc:	4639      	mov	r1, r7
   1c0ce:	f7ff ffd0 	bl	1c072 <va_getByIndex>
   1c0d2:	2800      	cmp	r0, #0
   1c0d4:	d1e5      	bne.n	1c0a2 <var_getBytes3+0x18>
                    (ret = var_getBytes(tmp, ba)) != DLMS_ERROR_CODE_OK)
   1c0d6:	9801      	ldr	r0, [sp, #4]
   1c0d8:	4631      	mov	r1, r6
   1c0da:	f000 f90a 	bl	1c2f2 <var_getBytes>
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1c0de:	2800      	cmp	r0, #0
   1c0e0:	d1df      	bne.n	1c0a2 <var_getBytes3+0x18>
            for (pos = 0; pos != data->Arr->size; ++pos)
   1c0e2:	3701      	adds	r7, #1
   1c0e4:	68a8      	ldr	r0, [r5, #8]
   1c0e6:	88c3      	ldrh	r3, [r0, #6]
   1c0e8:	42bb      	cmp	r3, r7
   1c0ea:	d1ee      	bne.n	1c0ca <var_getBytes3+0x40>
   1c0ec:	e7ea      	b.n	1c0c4 <var_getBytes3+0x3a>
   1c0ee:	4607      	mov	r7, r0
   1c0f0:	e7f8      	b.n	1c0e4 <var_getBytes3+0x5a>
    if (addType)
   1c0f2:	bb14      	cbnz	r4, 1c13a <var_getBytes3+0xb0>
    switch (type)
   1c0f4:	2f1b      	cmp	r7, #27
   1c0f6:	d81d      	bhi.n	1c134 <var_getBytes3+0xaa>
   1c0f8:	e8df f017 	tbh	[pc, r7, lsl #1]
   1c0fc:	001c00f6 	.word	0x001c00f6
   1c100:	0031001c 	.word	0x0031001c
   1c104:	006e00e5 	.word	0x006e00e5
   1c108:	001c006e 	.word	0x001c006e
   1c10c:	00b2001c 	.word	0x00b2001c
   1c110:	001c009e 	.word	0x001c009e
   1c114:	001c001c 	.word	0x001c001c
   1c118:	0056001c 	.word	0x0056001c
   1c11c:	00260061 	.word	0x00260061
   1c120:	001c003d 	.word	0x001c003d
   1c124:	00480078 	.word	0x00480078
   1c128:	00860026 	.word	0x00860026
   1c12c:	00bd0090 	.word	0x00bd0090
   1c130:	00db00cc 	.word	0x00db00cc
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1c134:	f44f 7481 	mov.w	r4, #258	; 0x102
   1c138:	e7c4      	b.n	1c0c4 <var_getBytes3+0x3a>
        if ((ret = bb_setUInt8(ba, type)) != 0)
   1c13a:	4610      	mov	r0, r2
   1c13c:	f7f2 f967 	bl	e40e <bb_setUInt8>
   1c140:	4604      	mov	r4, r0
   1c142:	2800      	cmp	r0, #0
   1c144:	d0d6      	beq.n	1c0f4 <var_getBytes3+0x6a>
   1c146:	e7bd      	b.n	1c0c4 <var_getBytes3+0x3a>
        ret = bb_setUInt8(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pbVal : data->bVal);
   1c148:	f995 3000 	ldrsb.w	r3, [r5]
   1c14c:	2b00      	cmp	r3, #0
   1c14e:	bfb6      	itet	lt
   1c150:	68ab      	ldrlt	r3, [r5, #8]
   1c152:	7a29      	ldrbge	r1, [r5, #8]
   1c154:	7819      	ldrblt	r1, [r3, #0]
            ret = bb_setUInt8(ba, *data->pbVal == 0 ? 0 : 1);
   1c156:	4630      	mov	r0, r6
   1c158:	f7f2 f959 	bl	e40e <bb_setUInt8>
   1c15c:	e7a1      	b.n	1c0a2 <var_getBytes3+0x18>
        if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1c15e:	f995 3000 	ldrsb.w	r3, [r5]
   1c162:	2b00      	cmp	r3, #0
   1c164:	da05      	bge.n	1c172 <var_getBytes3+0xe8>
            ret = bb_setUInt8(ba, *data->pbVal == 0 ? 0 : 1);
   1c166:	68ab      	ldr	r3, [r5, #8]
   1c168:	7819      	ldrb	r1, [r3, #0]
   1c16a:	3900      	subs	r1, #0
   1c16c:	bf18      	it	ne
   1c16e:	2101      	movne	r1, #1
   1c170:	e7f1      	b.n	1c156 <var_getBytes3+0xcc>
            ret = bb_setUInt8(ba, data->bVal == 0 ? 0 : 1);
   1c172:	7a29      	ldrb	r1, [r5, #8]
   1c174:	e7f9      	b.n	1c16a <var_getBytes3+0xe0>
        ret = bb_setUInt16(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->puiVal : data->uiVal);
   1c176:	f995 3000 	ldrsb.w	r3, [r5]
   1c17a:	2b00      	cmp	r3, #0
   1c17c:	bfb6      	itet	lt
   1c17e:	68ab      	ldrlt	r3, [r5, #8]
   1c180:	8929      	ldrhge	r1, [r5, #8]
   1c182:	8819      	ldrhlt	r1, [r3, #0]
   1c184:	4630      	mov	r0, r6
   1c186:	f7f2 f964 	bl	e452 <bb_setUInt16>
   1c18a:	e78a      	b.n	1c0a2 <var_getBytes3+0x18>
        ret = bb_setUInt64(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pullVal : data->ullVal);
   1c18c:	f995 3000 	ldrsb.w	r3, [r5]
   1c190:	2b00      	cmp	r3, #0
   1c192:	da06      	bge.n	1c1a2 <var_getBytes3+0x118>
   1c194:	68ab      	ldr	r3, [r5, #8]
   1c196:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c19a:	4630      	mov	r0, r6
   1c19c:	f7f2 f986 	bl	e4ac <bb_setUInt64>
   1c1a0:	e77f      	b.n	1c0a2 <var_getBytes3+0x18>
   1c1a2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1c1a6:	e7f8      	b.n	1c19a <var_getBytes3+0x110>
        ret = bb_setInt8(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pcVal : data->cVal);
   1c1a8:	f995 3000 	ldrsb.w	r3, [r5]
   1c1ac:	2b00      	cmp	r3, #0
   1c1ae:	bfb6      	itet	lt
   1c1b0:	68ab      	ldrlt	r3, [r5, #8]
   1c1b2:	7a29      	ldrbge	r1, [r5, #8]
   1c1b4:	7819      	ldrblt	r1, [r3, #0]
   1c1b6:	4630      	mov	r0, r6
   1c1b8:	f7f2 fa06 	bl	e5c8 <bb_setInt8>
   1c1bc:	e771      	b.n	1c0a2 <var_getBytes3+0x18>
        ret = bb_setInt16(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->puiVal : data->uiVal);
   1c1be:	f995 3000 	ldrsb.w	r3, [r5]
   1c1c2:	2b00      	cmp	r3, #0
   1c1c4:	bfb6      	itet	lt
   1c1c6:	68ab      	ldrlt	r3, [r5, #8]
   1c1c8:	f9b5 1008 	ldrshge.w	r1, [r5, #8]
   1c1cc:	f9b3 1000 	ldrshlt.w	r1, [r3]
   1c1d0:	4630      	mov	r0, r6
   1c1d2:	f7f2 f9fb 	bl	e5cc <bb_setInt16>
   1c1d6:	e764      	b.n	1c0a2 <var_getBytes3+0x18>
        ret = bb_setUInt32(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->plVal : data->lVal);
   1c1d8:	f995 3000 	ldrsb.w	r3, [r5]
   1c1dc:	68a9      	ldr	r1, [r5, #8]
   1c1de:	2b00      	cmp	r3, #0
   1c1e0:	bfb8      	it	lt
   1c1e2:	6809      	ldrlt	r1, [r1, #0]
   1c1e4:	4630      	mov	r0, r6
   1c1e6:	f7f2 f956 	bl	e496 <bb_setUInt32>
   1c1ea:	e75a      	b.n	1c0a2 <var_getBytes3+0x18>
        ret = bb_setInt64(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pllVal : data->llVal);
   1c1ec:	f995 3000 	ldrsb.w	r3, [r5]
   1c1f0:	2b00      	cmp	r3, #0
   1c1f2:	da06      	bge.n	1c202 <var_getBytes3+0x178>
   1c1f4:	68ab      	ldr	r3, [r5, #8]
   1c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1fa:	4630      	mov	r0, r6
   1c1fc:	f7f2 f9eb 	bl	e5d6 <bb_setInt64>
   1c200:	e74f      	b.n	1c0a2 <var_getBytes3+0x18>
   1c202:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1c206:	e7f8      	b.n	1c1fa <var_getBytes3+0x170>
        ret = bb_setFloat(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pfltVal : data->fltVal);
   1c208:	f995 3000 	ldrsb.w	r3, [r5]
   1c20c:	68a9      	ldr	r1, [r5, #8]
   1c20e:	2b00      	cmp	r3, #0
   1c210:	bfb8      	it	lt
   1c212:	6809      	ldrlt	r1, [r1, #0]
   1c214:	4630      	mov	r0, r6
   1c216:	f7f2 f97b 	bl	e510 <bb_setFloat>
   1c21a:	e742      	b.n	1c0a2 <var_getBytes3+0x18>
        ret = bb_setDouble(ba, (data->vt & DLMS_DATA_TYPE_BYREF) != 0 ? *data->pdblVal : data->dblVal);
   1c21c:	f995 3000 	ldrsb.w	r3, [r5]
   1c220:	2b00      	cmp	r3, #0
   1c222:	da06      	bge.n	1c232 <var_getBytes3+0x1a8>
   1c224:	68ab      	ldr	r3, [r5, #8]
   1c226:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c22a:	4630      	mov	r0, r6
   1c22c:	f7f2 f992 	bl	e554 <bb_setDouble>
   1c230:	e737      	b.n	1c0a2 <var_getBytes3+0x18>
   1c232:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1c236:	e7f8      	b.n	1c22a <var_getBytes3+0x1a0>
        if (data->strVal == NULL)
   1c238:	68a8      	ldr	r0, [r5, #8]
            ret = hlp_setObjectCount(0, ba);
   1c23a:	4631      	mov	r1, r6
        if (data->strVal == NULL)
   1c23c:	b910      	cbnz	r0, 1c244 <var_getBytes3+0x1ba>
            ret = hlp_setObjectCount(0, ba);
   1c23e:	f7ff f9e2 	bl	1b606 <hlp_setObjectCount>
   1c242:	e72e      	b.n	1c0a2 <var_getBytes3+0x18>
            if ((ret = hlp_setObjectCount(data->strVal->size, ba)) == 0)
   1c244:	88c0      	ldrh	r0, [r0, #6]
   1c246:	f7ff f9de 	bl	1b606 <hlp_setObjectCount>
   1c24a:	4604      	mov	r4, r0
   1c24c:	2800      	cmp	r0, #0
   1c24e:	f47f af39 	bne.w	1c0c4 <var_getBytes3+0x3a>
                ret = bb_set(ba, data->strVal->data, data->strVal->size);
   1c252:	68ab      	ldr	r3, [r5, #8]
   1c254:	88da      	ldrh	r2, [r3, #6]
   1c256:	6819      	ldr	r1, [r3, #0]
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1c258:	4630      	mov	r0, r6
   1c25a:	f7f2 f9be 	bl	e5da <bb_set>
   1c25e:	e720      	b.n	1c0a2 <var_getBytes3+0x18>
        if (data->vt == DLMS_DATA_TYPE_DATETIME)
   1c260:	782b      	ldrb	r3, [r5, #0]
   1c262:	2b19      	cmp	r3, #25
   1c264:	d10c      	bne.n	1c280 <var_getBytes3+0x1f6>
            if ((ret = bb_setUInt8(ba, 12)) == 0)
   1c266:	210c      	movs	r1, #12
   1c268:	4630      	mov	r0, r6
   1c26a:	f7f2 f8d0 	bl	e40e <bb_setUInt8>
   1c26e:	4604      	mov	r4, r0
   1c270:	2800      	cmp	r0, #0
   1c272:	f47f af27 	bne.w	1c0c4 <var_getBytes3+0x3a>
        ret = var_getDateTime2(data->dateTime, ba);
   1c276:	68a8      	ldr	r0, [r5, #8]
   1c278:	4631      	mov	r1, r6
   1c27a:	f7e8 f8eb 	bl	4454 <var_getDateTime2>
   1c27e:	e710      	b.n	1c0a2 <var_getBytes3+0x18>
        else if (data->vt == DLMS_DATA_TYPE_DATE)
   1c280:	2b1a      	cmp	r3, #26
   1c282:	d10c      	bne.n	1c29e <var_getBytes3+0x214>
            if ((ret = bb_setUInt8(ba, 5)) == 0)
   1c284:	2105      	movs	r1, #5
   1c286:	4630      	mov	r0, r6
   1c288:	f7f2 f8c1 	bl	e40e <bb_setUInt8>
   1c28c:	4604      	mov	r4, r0
   1c28e:	2800      	cmp	r0, #0
   1c290:	f47f af18 	bne.w	1c0c4 <var_getBytes3+0x3a>
        ret = var_getDate(data->dateTime, ba);
   1c294:	68a8      	ldr	r0, [r5, #8]
   1c296:	4631      	mov	r1, r6
   1c298:	f7ff fd16 	bl	1bcc8 <var_getDate>
   1c29c:	e701      	b.n	1c0a2 <var_getBytes3+0x18>
        else if (data->vt == DLMS_DATA_TYPE_TIME)
   1c29e:	2b1b      	cmp	r3, #27
   1c2a0:	d10c      	bne.n	1c2bc <var_getBytes3+0x232>
            if ((ret = bb_setUInt8(ba, 4)) == 0)
   1c2a2:	2104      	movs	r1, #4
   1c2a4:	4630      	mov	r0, r6
   1c2a6:	f7f2 f8b2 	bl	e40e <bb_setUInt8>
   1c2aa:	4604      	mov	r4, r0
   1c2ac:	2800      	cmp	r0, #0
   1c2ae:	f47f af09 	bne.w	1c0c4 <var_getBytes3+0x3a>
        ret = var_getTime(data->dateTime, ba);
   1c2b2:	68a8      	ldr	r0, [r5, #8]
   1c2b4:	4631      	mov	r1, r6
   1c2b6:	f7ff fd6a 	bl	1bd8e <var_getTime>
   1c2ba:	e6f2      	b.n	1c0a2 <var_getBytes3+0x18>
            ret = var_setOctetString(ba, data);
   1c2bc:	4629      	mov	r1, r5
   1c2be:	4630      	mov	r0, r6
   1c2c0:	f7ff fda8 	bl	1be14 <var_setOctetString>
   1c2c4:	e6ed      	b.n	1c0a2 <var_getBytes3+0x18>
        if ((ret = hlp_setObjectCount(data->bitArr->size, ba)) == 0)
   1c2c6:	68ab      	ldr	r3, [r5, #8]
   1c2c8:	4631      	mov	r1, r6
   1c2ca:	88d8      	ldrh	r0, [r3, #6]
   1c2cc:	f7ff f99b 	bl	1b606 <hlp_setObjectCount>
   1c2d0:	4604      	mov	r4, r0
   1c2d2:	2800      	cmp	r0, #0
   1c2d4:	f47f aef6 	bne.w	1c0c4 <var_getBytes3+0x3a>
            ret = bb_set(ba, data->bitArr->data, ba_getByteCount(data->bitArr->size));
   1c2d8:	68ab      	ldr	r3, [r5, #8]
   1c2da:	88d8      	ldrh	r0, [r3, #6]
   1c2dc:	681c      	ldr	r4, [r3, #0]
   1c2de:	f7e5 f951 	bl	1584 <ba_getByteCount>
   1c2e2:	4621      	mov	r1, r4
   1c2e4:	4602      	mov	r2, r0
   1c2e6:	e7b7      	b.n	1c258 <var_getBytes3+0x1ce>
                if ((ret = va_getByIndex(data->Arr, pos, &tmp)) != DLMS_ERROR_CODE_OK ||
   1c2e8:	2400      	movs	r4, #0
   1c2ea:	e6eb      	b.n	1c0c4 <var_getBytes3+0x3a>

0001c2ec <var_getBytes2>:
    return var_getBytes3(data, type, ba, 1);
   1c2ec:	2301      	movs	r3, #1
   1c2ee:	f7ff becc 	b.w	1c08a <var_getBytes3>

0001c2f2 <var_getBytes>:
{
   1c2f2:	460a      	mov	r2, r1
    return var_getBytes2(data, data->vt, ba);
   1c2f4:	7801      	ldrb	r1, [r0, #0]
   1c2f6:	f7ff bff9 	b.w	1c2ec <var_getBytes2>

0001c2fa <var_setDateTime>:

#ifndef DLMS_IGNORE_MALLOC
int var_setDateTime(dlmsVARIANT* target, gxtime* value)
{
   1c2fa:	b570      	push	{r4, r5, r6, lr}
   1c2fc:	4605      	mov	r5, r0
   1c2fe:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1c300:	f7ff fe39 	bl	1bf76 <var_clear>
   1c304:	4604      	mov	r4, r0
   1c306:	b940      	cbnz	r0, 1c31a <var_setDateTime+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1c308:	200c      	movs	r0, #12
   1c30a:	f7f0 fff3 	bl	d2f4 <malloc>
        time_copy(target->dateTime, value);
   1c30e:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1c310:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1c312:	f7f3 f92c 	bl	f56e <time_copy>
        target->vt = DLMS_DATA_TYPE_DATETIME;
   1c316:	2319      	movs	r3, #25
   1c318:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1c31a:	4620      	mov	r0, r4
   1c31c:	bd70      	pop	{r4, r5, r6, pc}

0001c31e <var_setDate>:

int var_setDate(dlmsVARIANT* target, gxtime* value)
{
   1c31e:	b570      	push	{r4, r5, r6, lr}
   1c320:	4605      	mov	r5, r0
   1c322:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1c324:	f7ff fe27 	bl	1bf76 <var_clear>
   1c328:	4604      	mov	r4, r0
   1c32a:	b940      	cbnz	r0, 1c33e <var_setDate+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1c32c:	200c      	movs	r0, #12
   1c32e:	f7f0 ffe1 	bl	d2f4 <malloc>
        time_copy(target->dateTime, value);
   1c332:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1c334:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1c336:	f7f3 f91a 	bl	f56e <time_copy>
        target->vt = DLMS_DATA_TYPE_DATE;
   1c33a:	231a      	movs	r3, #26
   1c33c:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1c33e:	4620      	mov	r0, r4
   1c340:	bd70      	pop	{r4, r5, r6, pc}

0001c342 <var_setTime>:

int var_setTime(dlmsVARIANT* target, gxtime* value)
{
   1c342:	b570      	push	{r4, r5, r6, lr}
   1c344:	4605      	mov	r5, r0
   1c346:	460e      	mov	r6, r1
    int ret;
    if ((ret = var_clear(target)) == DLMS_ERROR_CODE_OK)
   1c348:	f7ff fe15 	bl	1bf76 <var_clear>
   1c34c:	4604      	mov	r4, r0
   1c34e:	b940      	cbnz	r0, 1c362 <var_setTime+0x20>
    {
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1c350:	200c      	movs	r0, #12
   1c352:	f7f0 ffcf 	bl	d2f4 <malloc>
        time_copy(target->dateTime, value);
   1c356:	4631      	mov	r1, r6
        target->dateTime = (gxtime*)gxmalloc(sizeof(gxtime));
   1c358:	60a8      	str	r0, [r5, #8]
        time_copy(target->dateTime, value);
   1c35a:	f7f3 f908 	bl	f56e <time_copy>
        target->vt = DLMS_DATA_TYPE_TIME;
   1c35e:	231b      	movs	r3, #27
   1c360:	702b      	strb	r3, [r5, #0]
    }
    return ret;
}
   1c362:	4620      	mov	r0, r4
   1c364:	bd70      	pop	{r4, r5, r6, pc}

0001c366 <var_toInteger>:
{
   1c366:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1c368:	f990 2000 	ldrsb.w	r2, [r0]
   1c36c:	7803      	ldrb	r3, [r0, #0]
   1c36e:	2a00      	cmp	r2, #0
   1c370:	da0d      	bge.n	1c38e <var_toInteger+0x28>
        if ((ret = var_copy(&tmp, data)) == 0)
   1c372:	4601      	mov	r1, r0
   1c374:	4668      	mov	r0, sp
   1c376:	f7e8 f919 	bl	45ac <var_copy>
   1c37a:	b928      	cbnz	r0, 1c388 <var_toInteger+0x22>
            ret = var_toInteger(&tmp);
   1c37c:	4668      	mov	r0, sp
   1c37e:	f7ff fff2 	bl	1c366 <var_toInteger>
}
   1c382:	b005      	add	sp, #20
   1c384:	f85d fb04 	ldr.w	pc, [sp], #4
            ret = -1;
   1c388:	f04f 30ff 	mov.w	r0, #4294967295
        return ret;
   1c38c:	e7f9      	b.n	1c382 <var_toInteger+0x1c>
    switch (data->vt)
   1c38e:	3b03      	subs	r3, #3
   1c390:	2b15      	cmp	r3, #21
   1c392:	d830      	bhi.n	1c3f6 <var_toInteger+0x90>
   1c394:	e8df f003 	tbb	[pc, r3]
   1c398:	1a1a290b 	.word	0x1a1a290b
   1c39c:	252f2f2f 	.word	0x252f2f2f
   1c3a0:	2f2f2f2f 	.word	0x2f2f2f2f
   1c3a4:	18161310 	.word	0x18161310
   1c3a8:	161a1a2f 	.word	0x161a1a2f
   1c3ac:	201c      	.short	0x201c
        ret = data->boolVal ? 1 : 0;
   1c3ae:	7a00      	ldrb	r0, [r0, #8]
   1c3b0:	3800      	subs	r0, #0
   1c3b2:	bf18      	it	ne
   1c3b4:	2001      	movne	r0, #1
        break;
   1c3b6:	e7e4      	b.n	1c382 <var_toInteger+0x1c>
        ret = data->cVal;
   1c3b8:	f990 0008 	ldrsb.w	r0, [r0, #8]
        break;
   1c3bc:	e7e1      	b.n	1c382 <var_toInteger+0x1c>
        ret = data->iVal;
   1c3be:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
        break;
   1c3c2:	e7de      	b.n	1c382 <var_toInteger+0x1c>
        ret = data->bVal;
   1c3c4:	7a00      	ldrb	r0, [r0, #8]
        break;
   1c3c6:	e7dc      	b.n	1c382 <var_toInteger+0x1c>
        ret = data->uiVal;
   1c3c8:	8900      	ldrh	r0, [r0, #8]
        break;
   1c3ca:	e7da      	b.n	1c382 <var_toInteger+0x1c>
        ret = (int)data->ullVal;
   1c3cc:	6880      	ldr	r0, [r0, #8]
        break;
   1c3ce:	e7d8      	b.n	1c382 <var_toInteger+0x1c>
        ret = (int)data->fltVal;
   1c3d0:	6880      	ldr	r0, [r0, #8]
   1c3d2:	f7e4 fafb 	bl	9cc <__aeabi_f2iz>
        break;
   1c3d6:	e7d4      	b.n	1c382 <var_toInteger+0x1c>
        ret = (int)data->dblVal;
   1c3d8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1c3dc:	f7e4 faae 	bl	93c <__aeabi_d2iz>
        break;
   1c3e0:	e7cf      	b.n	1c382 <var_toInteger+0x1c>
        ret = hlp_stringToInt((const char*)data->strVal);
   1c3e2:	6880      	ldr	r0, [r0, #8]
   1c3e4:	f7ff f9de 	bl	1b7a4 <hlp_stringToInt>
        break;
   1c3e8:	e7cb      	b.n	1c382 <var_toInteger+0x1c>
        ba_toInteger(data->bitArr, &value);
   1c3ea:	6880      	ldr	r0, [r0, #8]
   1c3ec:	4669      	mov	r1, sp
   1c3ee:	f7f1 ff59 	bl	e2a4 <ba_toInteger>
        ret = (int)value;
   1c3f2:	9800      	ldr	r0, [sp, #0]
    break;
   1c3f4:	e7c5      	b.n	1c382 <var_toInteger+0x1c>
    if ((data->vt & DLMS_DATA_TYPE_BYREF) != 0)
   1c3f6:	2000      	movs	r0, #0
   1c3f8:	e7c3      	b.n	1c382 <var_toInteger+0x1c>

0001c3fa <var_toString>:
{
   1c3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (item->vt == DLMS_DATA_TYPE_ARRAY || item->vt == DLMS_DATA_TYPE_STRUCTURE)
   1c3fc:	7803      	ldrb	r3, [r0, #0]
   1c3fe:	1e5a      	subs	r2, r3, #1
   1c400:	2a01      	cmp	r2, #1
{
   1c402:	b085      	sub	sp, #20
   1c404:	4606      	mov	r6, r0
   1c406:	460d      	mov	r5, r1
    if (item->vt == DLMS_DATA_TYPE_ARRAY || item->vt == DLMS_DATA_TYPE_STRUCTURE)
   1c408:	d831      	bhi.n	1c46e <var_toString+0x74>
        bb_setInt8(value, item->vt == DLMS_DATA_TYPE_ARRAY ? '{' : '[');
   1c40a:	2b01      	cmp	r3, #1
   1c40c:	bf0c      	ite	eq
   1c40e:	217b      	moveq	r1, #123	; 0x7b
   1c410:	215b      	movne	r1, #91	; 0x5b
   1c412:	4628      	mov	r0, r5
   1c414:	f7f2 f8d8 	bl	e5c8 <bb_setInt8>
   1c418:	2700      	movs	r7, #0
        for (pos = 0; pos != item->Arr->size; ++pos)
   1c41a:	68b2      	ldr	r2, [r6, #8]
   1c41c:	88d2      	ldrh	r2, [r2, #6]
   1c41e:	b2bb      	uxth	r3, r7
   1c420:	429a      	cmp	r2, r3
   1c422:	d101      	bne.n	1c428 <var_toString+0x2e>
   1c424:	2400      	movs	r4, #0
   1c426:	e017      	b.n	1c458 <var_toString+0x5e>
            if (pos != 0)
   1c428:	b13b      	cbz	r3, 1c43a <var_toString+0x40>
                bb_setInt8(value, ',');
   1c42a:	212c      	movs	r1, #44	; 0x2c
   1c42c:	4628      	mov	r0, r5
   1c42e:	f7f2 f8cb 	bl	e5c8 <bb_setInt8>
                bb_setInt8(value, ' ');
   1c432:	2120      	movs	r1, #32
   1c434:	4628      	mov	r0, r5
   1c436:	f7f2 f8c7 	bl	e5c8 <bb_setInt8>
            if ((ret = va_getByIndex(item->Arr, pos, &it)) != 0 ||
   1c43a:	68b0      	ldr	r0, [r6, #8]
   1c43c:	466a      	mov	r2, sp
   1c43e:	b2b9      	uxth	r1, r7
   1c440:	f7ff fe17 	bl	1c072 <va_getByIndex>
   1c444:	4604      	mov	r4, r0
   1c446:	b938      	cbnz	r0, 1c458 <var_toString+0x5e>
                (ret = var_toString(it, value)) != 0)
   1c448:	9800      	ldr	r0, [sp, #0]
   1c44a:	4629      	mov	r1, r5
   1c44c:	f7ff ffd5 	bl	1c3fa <var_toString>
   1c450:	3701      	adds	r7, #1
            if ((ret = va_getByIndex(item->Arr, pos, &it)) != 0 ||
   1c452:	4604      	mov	r4, r0
   1c454:	2800      	cmp	r0, #0
   1c456:	d0e0      	beq.n	1c41a <var_toString+0x20>
        bb_setInt8(value, item->vt == DLMS_DATA_TYPE_ARRAY ? '}' : ']');
   1c458:	7833      	ldrb	r3, [r6, #0]
   1c45a:	2b01      	cmp	r3, #1
   1c45c:	bf0c      	ite	eq
   1c45e:	217d      	moveq	r1, #125	; 0x7d
   1c460:	215d      	movne	r1, #93	; 0x5d
   1c462:	4628      	mov	r0, r5
   1c464:	f7f2 f8b0 	bl	e5c8 <bb_setInt8>
}
   1c468:	4620      	mov	r0, r4
   1c46a:	b005      	add	sp, #20
   1c46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    data->vt = DLMS_DATA_TYPE_NONE;
   1c46e:	2300      	movs	r3, #0
        ret = var_copy(&tmp, item);
   1c470:	4601      	mov	r1, r0
   1c472:	4668      	mov	r0, sp
    data->vt = DLMS_DATA_TYPE_NONE;
   1c474:	f88d 3000 	strb.w	r3, [sp]
    data->byteArr = NULL;
   1c478:	9302      	str	r3, [sp, #8]
        ret = var_copy(&tmp, item);
   1c47a:	f7e8 f897 	bl	45ac <var_copy>
        if (ret == 0)
   1c47e:	4604      	mov	r4, r0
   1c480:	b960      	cbnz	r0, 1c49c <var_toString+0xa2>
            ret = var_changeType(&tmp, DLMS_DATA_TYPE_STRING);
   1c482:	210a      	movs	r1, #10
   1c484:	4668      	mov	r0, sp
   1c486:	f7e8 fb43 	bl	4b10 <var_changeType>
            if (ret == 0 && tmp.strVal != NULL)
   1c48a:	4604      	mov	r4, r0
   1c48c:	b930      	cbnz	r0, 1c49c <var_toString+0xa2>
   1c48e:	9b02      	ldr	r3, [sp, #8]
   1c490:	b123      	cbz	r3, 1c49c <var_toString+0xa2>
                bb_set(value, tmp.strVal->data, tmp.strVal->size);
   1c492:	88da      	ldrh	r2, [r3, #6]
   1c494:	6819      	ldr	r1, [r3, #0]
   1c496:	4628      	mov	r0, r5
   1c498:	f7f2 f89f 	bl	e5da <bb_set>
        var_clear(&tmp);
   1c49c:	4668      	mov	r0, sp
   1c49e:	f7ff fd6a 	bl	1bf76 <var_clear>
    return ret;
   1c4a2:	e7e1      	b.n	1c468 <var_toString+0x6e>

0001c4a4 <var_attach>:

#ifndef DLMS_IGNORE_MALLOC
void var_attach(
    dlmsVARIANT* target,
    gxByteBuffer* source)
{
   1c4a4:	b538      	push	{r3, r4, r5, lr}
   1c4a6:	4605      	mov	r5, r0
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1c4a8:	200c      	movs	r0, #12
{
   1c4aa:	460c      	mov	r4, r1
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1c4ac:	f7f0 ff22 	bl	d2f4 <malloc>
    target->byteArr->data = source->data;
    target->byteArr->capacity = source->capacity;
    target->byteArr->size = source->size;
    target->byteArr->position = source->position;
   1c4b0:	8923      	ldrh	r3, [r4, #8]
    target->byteArr->data = source->data;
   1c4b2:	6822      	ldr	r2, [r4, #0]
    target->byteArr = (gxByteBuffer*)gxmalloc(sizeof(gxByteBuffer));
   1c4b4:	60a8      	str	r0, [r5, #8]
    target->byteArr->position = source->position;
   1c4b6:	8103      	strh	r3, [r0, #8]
    source->data = 0;
   1c4b8:	2300      	movs	r3, #0
    source->size = source->position = source->capacity = 0;
   1c4ba:	8123      	strh	r3, [r4, #8]
    target->byteArr->data = source->data;
   1c4bc:	6002      	str	r2, [r0, #0]
    target->byteArr->capacity = source->capacity;
   1c4be:	6862      	ldr	r2, [r4, #4]
   1c4c0:	6042      	str	r2, [r0, #4]
    source->size = source->position = source->capacity = 0;
   1c4c2:	e9c4 3300 	strd	r3, r3, [r4]
    target->vt = DLMS_DATA_TYPE_OCTET_STRING;
   1c4c6:	2309      	movs	r3, #9
   1c4c8:	702b      	strb	r3, [r5, #0]
}
   1c4ca:	bd38      	pop	{r3, r4, r5, pc}

0001c4cc <crc16_ccitt>:

	return crc;
}

uint16_t crc16_ccitt(uint16_t seed, const uint8_t *src, size_t len)
{
   1c4cc:	b510      	push	{r4, lr}
   1c4ce:	440a      	add	r2, r1
	for (; len > 0; len--) {
   1c4d0:	428a      	cmp	r2, r1
   1c4d2:	d100      	bne.n	1c4d6 <crc16_ccitt+0xa>
		f = e ^ (e << 4);
		seed = (seed >> 8) ^ ((uint16_t)f << 8) ^ ((uint16_t)f << 3) ^ ((uint16_t)f >> 4);
	}

	return seed;
}
   1c4d4:	bd10      	pop	{r4, pc}
		e = seed ^ *src++;
   1c4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   1c4da:	4043      	eors	r3, r0
		f = e ^ (e << 4);
   1c4dc:	ea83 1303 	eor.w	r3, r3, r3, lsl #4
   1c4e0:	b2db      	uxtb	r3, r3
		seed = (seed >> 8) ^ ((uint16_t)f << 8) ^ ((uint16_t)f << 3) ^ ((uint16_t)f >> 4);
   1c4e2:	091c      	lsrs	r4, r3, #4
   1c4e4:	ea84 2010 	eor.w	r0, r4, r0, lsr #8
   1c4e8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   1c4ec:	ea80 00c3 	eor.w	r0, r0, r3, lsl #3
	for (; len > 0; len--) {
   1c4f0:	e7ee      	b.n	1c4d0 <crc16_ccitt+0x4>

0001c4f2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1c4f2:	4603      	mov	r3, r0
   1c4f4:	b140      	cbz	r0, 1c508 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c4f6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c4f8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1c4fc:	2a02      	cmp	r2, #2
   1c4fe:	d006      	beq.n	1c50e <sys_notify_validate+0x1c>
   1c500:	2a03      	cmp	r2, #3
   1c502:	d004      	beq.n	1c50e <sys_notify_validate+0x1c>
   1c504:	2a01      	cmp	r2, #1
   1c506:	d005      	beq.n	1c514 <sys_notify_validate+0x22>
		return -EINVAL;
   1c508:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1c50c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c50e:	681a      	ldr	r2, [r3, #0]
   1c510:	2a00      	cmp	r2, #0
   1c512:	d0f9      	beq.n	1c508 <sys_notify_validate+0x16>
		notify->result = 0;
   1c514:	2000      	movs	r0, #0
   1c516:	6098      	str	r0, [r3, #8]
   1c518:	4770      	bx	lr

0001c51a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c51a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c51c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1c520:	2a02      	cmp	r2, #2
{
   1c522:	b510      	push	{r4, lr}
   1c524:	4603      	mov	r3, r0
	notify->result = res;
   1c526:	6081      	str	r1, [r0, #8]
	switch (method) {
   1c528:	d00a      	beq.n	1c540 <sys_notify_finalize+0x26>
   1c52a:	2a03      	cmp	r2, #3
   1c52c:	d10b      	bne.n	1c546 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1c52e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1c530:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c532:	2200      	movs	r2, #0
   1c534:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1c536:	b108      	cbz	r0, 1c53c <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1c538:	f7f0 fc94 	bl	ce64 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1c53c:	4620      	mov	r0, r4
   1c53e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1c540:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1c542:	2400      	movs	r4, #0
		break;
   1c544:	e7f5      	b.n	1c532 <sys_notify_finalize+0x18>
	switch (method) {
   1c546:	2400      	movs	r4, #0
   1c548:	4620      	mov	r0, r4
   1c54a:	e7f2      	b.n	1c532 <sys_notify_finalize+0x18>

0001c54c <arch_printk_char_out>:
}
   1c54c:	2000      	movs	r0, #0
   1c54e:	4770      	bx	lr

0001c550 <str_out>:
{
   1c550:	b530      	push	{r4, r5, lr}
   1c552:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c554:	680c      	ldr	r4, [r1, #0]
   1c556:	1c55      	adds	r5, r2, #1
   1c558:	b114      	cbz	r4, 1c560 <str_out+0x10>
   1c55a:	684b      	ldr	r3, [r1, #4]
   1c55c:	4293      	cmp	r3, r2
   1c55e:	dc01      	bgt.n	1c564 <str_out+0x14>
		ctx->count++;
   1c560:	608d      	str	r5, [r1, #8]
}
   1c562:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c564:	3b01      	subs	r3, #1
   1c566:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c568:	bf08      	it	eq
   1c56a:	2200      	moveq	r2, #0
   1c56c:	608d      	str	r5, [r1, #8]
   1c56e:	bf0c      	ite	eq
   1c570:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c572:	54a0      	strbne	r0, [r4, r2]
   1c574:	e7f5      	b.n	1c562 <str_out+0x12>

0001c576 <printk>:
{
   1c576:	b40f      	push	{r0, r1, r2, r3}
   1c578:	b507      	push	{r0, r1, r2, lr}
   1c57a:	a904      	add	r1, sp, #16
   1c57c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c580:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c582:	f7e8 fb91 	bl	4ca8 <vprintk>
}
   1c586:	b003      	add	sp, #12
   1c588:	f85d eb04 	ldr.w	lr, [sp], #4
   1c58c:	b004      	add	sp, #16
   1c58e:	4770      	bx	lr

0001c590 <snprintk>:
{
   1c590:	b40c      	push	{r2, r3}
   1c592:	b507      	push	{r0, r1, r2, lr}
   1c594:	ab04      	add	r3, sp, #16
   1c596:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c59a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c59c:	f7e8 fb92 	bl	4cc4 <vsnprintk>
}
   1c5a0:	b003      	add	sp, #12
   1c5a2:	f85d eb04 	ldr.w	lr, [sp], #4
   1c5a6:	b002      	add	sp, #8
   1c5a8:	4770      	bx	lr

0001c5aa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c5aa:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1c5ac:	f013 0307 	ands.w	r3, r3, #7
   1c5b0:	d105      	bne.n	1c5be <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c5b2:	6803      	ldr	r3, [r0, #0]
   1c5b4:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1c5b6:	bf0c      	ite	eq
   1c5b8:	2000      	moveq	r0, #0
   1c5ba:	2003      	movne	r0, #3
   1c5bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c5be:	2b02      	cmp	r3, #2
   1c5c0:	d105      	bne.n	1c5ce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1c5c2:	8b43      	ldrh	r3, [r0, #26]
   1c5c4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1c5c6:	bf14      	ite	ne
   1c5c8:	2000      	movne	r0, #0
   1c5ca:	2004      	moveq	r0, #4
   1c5cc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c5ce:	2b01      	cmp	r3, #1
   1c5d0:	d105      	bne.n	1c5de <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c5d2:	6803      	ldr	r3, [r0, #0]
   1c5d4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1c5d6:	bf0c      	ite	eq
   1c5d8:	2000      	moveq	r0, #0
   1c5da:	2005      	movne	r0, #5
   1c5dc:	4770      	bx	lr
	int evt = EVT_NOP;
   1c5de:	2000      	movs	r0, #0
}
   1c5e0:	4770      	bx	lr

0001c5e2 <notify_one>:
{
   1c5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5e6:	460d      	mov	r5, r1
   1c5e8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c5ea:	4619      	mov	r1, r3
   1c5ec:	1d28      	adds	r0, r5, #4
{
   1c5ee:	4690      	mov	r8, r2
   1c5f0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c5f2:	f7ff ff92 	bl	1c51a <sys_notify_finalize>
	if (cb) {
   1c5f6:	4604      	mov	r4, r0
   1c5f8:	b138      	cbz	r0, 1c60a <notify_one+0x28>
		cb(mgr, cli, state, res);
   1c5fa:	4633      	mov	r3, r6
   1c5fc:	4642      	mov	r2, r8
   1c5fe:	4629      	mov	r1, r5
   1c600:	4638      	mov	r0, r7
   1c602:	46a4      	mov	ip, r4
}
   1c604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1c608:	4760      	bx	ip
}
   1c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c60e <transition_complete>:
{
   1c60e:	b410      	push	{r4}
	__asm__ volatile(
   1c610:	f04f 0420 	mov.w	r4, #32
   1c614:	f3ef 8211 	mrs	r2, BASEPRI
   1c618:	f384 8812 	msr	BASEPRI_MAX, r4
   1c61c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1c620:	6141      	str	r1, [r0, #20]
}
   1c622:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1c624:	2101      	movs	r1, #1
   1c626:	f7e8 bb61 	b.w	4cec <process_event>

0001c62a <validate_args>:
{
   1c62a:	b510      	push	{r4, lr}
   1c62c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c62e:	b140      	cbz	r0, 1c642 <validate_args+0x18>
   1c630:	b139      	cbz	r1, 1c642 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1c632:	1d08      	adds	r0, r1, #4
   1c634:	f7ff ff5d 	bl	1c4f2 <sys_notify_validate>
	if ((rv == 0)
   1c638:	b928      	cbnz	r0, 1c646 <validate_args+0x1c>
	    && ((cli->notify.flags
   1c63a:	68a3      	ldr	r3, [r4, #8]
   1c63c:	f033 0303 	bics.w	r3, r3, #3
   1c640:	d001      	beq.n	1c646 <validate_args+0x1c>
		rv = -EINVAL;
   1c642:	f06f 0015 	mvn.w	r0, #21
}
   1c646:	bd10      	pop	{r4, pc}

0001c648 <onoff_manager_init>:
{
   1c648:	b538      	push	{r3, r4, r5, lr}
   1c64a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c64c:	4605      	mov	r5, r0
   1c64e:	b158      	cbz	r0, 1c668 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c650:	b151      	cbz	r1, 1c668 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c652:	680b      	ldr	r3, [r1, #0]
   1c654:	b143      	cbz	r3, 1c668 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c656:	684b      	ldr	r3, [r1, #4]
   1c658:	b133      	cbz	r3, 1c668 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c65a:	221c      	movs	r2, #28
   1c65c:	2100      	movs	r1, #0
   1c65e:	f001 fe0b 	bl	1e278 <memset>
   1c662:	612c      	str	r4, [r5, #16]
	return 0;
   1c664:	2000      	movs	r0, #0
}
   1c666:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c668:	f06f 0015 	mvn.w	r0, #21
   1c66c:	e7fb      	b.n	1c666 <onoff_manager_init+0x1e>

0001c66e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1c66e:	b570      	push	{r4, r5, r6, lr}
   1c670:	4604      	mov	r4, r0
   1c672:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1c674:	f7ff ffd9 	bl	1c62a <validate_args>

	if (rv < 0) {
   1c678:	1e05      	subs	r5, r0, #0
   1c67a:	db31      	blt.n	1c6e0 <onoff_request+0x72>
   1c67c:	f04f 0320 	mov.w	r3, #32
   1c680:	f3ef 8111 	mrs	r1, BASEPRI
   1c684:	f383 8812 	msr	BASEPRI_MAX, r3
   1c688:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c68c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c68e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c690:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1c694:	42ab      	cmp	r3, r5
   1c696:	f000 0207 	and.w	r2, r0, #7
   1c69a:	d02e      	beq.n	1c6fa <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1c69c:	2a02      	cmp	r2, #2
   1c69e:	d10e      	bne.n	1c6be <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1c6a0:	3301      	adds	r3, #1
   1c6a2:	8363      	strh	r3, [r4, #26]
	rv = state;
   1c6a4:	4615      	mov	r5, r2
		notify = true;
   1c6a6:	2301      	movs	r3, #1
	__asm__ volatile(
   1c6a8:	f381 8811 	msr	BASEPRI, r1
   1c6ac:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1c6b0:	b1b3      	cbz	r3, 1c6e0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1c6b2:	2300      	movs	r3, #0
   1c6b4:	4631      	mov	r1, r6
   1c6b6:	4620      	mov	r0, r4
   1c6b8:	f7ff ff93 	bl	1c5e2 <notify_one>
   1c6bc:	e010      	b.n	1c6e0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1c6be:	0783      	lsls	r3, r0, #30
   1c6c0:	d001      	beq.n	1c6c6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1c6c2:	2a06      	cmp	r2, #6
   1c6c4:	d10e      	bne.n	1c6e4 <onoff_request+0x76>
	parent->next = child;
   1c6c6:	2300      	movs	r3, #0
   1c6c8:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   1c6ca:	6863      	ldr	r3, [r4, #4]
   1c6cc:	b993      	cbnz	r3, 1c6f4 <onoff_request+0x86>
	list->head = node;
   1c6ce:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1c6d2:	4615      	mov	r5, r2
   1c6d4:	b962      	cbnz	r2, 1c6f0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1c6d6:	460a      	mov	r2, r1
   1c6d8:	4620      	mov	r0, r4
   1c6da:	2102      	movs	r1, #2
   1c6dc:	f7e8 fb06 	bl	4cec <process_event>
		}
	}

	return rv;
}
   1c6e0:	4628      	mov	r0, r5
   1c6e2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1c6e4:	2a05      	cmp	r2, #5
   1c6e6:	bf0c      	ite	eq
   1c6e8:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1c6ec:	f06f 0504 	mvnne.w	r5, #4
   1c6f0:	2300      	movs	r3, #0
   1c6f2:	e7d9      	b.n	1c6a8 <onoff_request+0x3a>
	parent->next = child;
   1c6f4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1c6f6:	6066      	str	r6, [r4, #4]
}
   1c6f8:	e7eb      	b.n	1c6d2 <onoff_request+0x64>
		rv = -EAGAIN;
   1c6fa:	f06f 050a 	mvn.w	r5, #10
   1c6fe:	e7f7      	b.n	1c6f0 <onoff_request+0x82>

0001c700 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c700:	4604      	mov	r4, r0
   1c702:	b508      	push	{r3, lr}
   1c704:	4608      	mov	r0, r1
   1c706:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1c708:	461a      	mov	r2, r3
   1c70a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1c70c:	f7f0 f8c0 	bl	c890 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1c710:	f7ea fbbe 	bl	6e90 <z_impl_k_thread_abort>

0001c714 <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c714:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1c716:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c71a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1c71e:	bf2c      	ite	cs
   1c720:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1c724:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1c728:	4770      	bx	lr

0001c72a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1c72a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1c72e:	6880      	ldr	r0, [r0, #8]
   1c730:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1c734:	bf2c      	ite	cs
   1c736:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1c73a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1c73e:	4770      	bx	lr

0001c740 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1c740:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1c742:	2201      	movs	r2, #1
   1c744:	f7ff ffe6 	bl	1c714 <chunk_field>
}
   1c748:	0840      	lsrs	r0, r0, #1
   1c74a:	bd08      	pop	{r3, pc}

0001c74c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c74c:	6883      	ldr	r3, [r0, #8]
   1c74e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1c752:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c756:	d308      	bcc.n	1c76a <set_chunk_used+0x1e>
		if (used) {
   1c758:	684b      	ldr	r3, [r1, #4]
   1c75a:	b11a      	cbz	r2, 1c764 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c75c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c760:	604b      	str	r3, [r1, #4]
   1c762:	4770      	bx	lr
   1c764:	f023 0301 	bic.w	r3, r3, #1
   1c768:	e7fa      	b.n	1c760 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1c76a:	884b      	ldrh	r3, [r1, #2]
   1c76c:	b11a      	cbz	r2, 1c776 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1c76e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c772:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1c774:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1c776:	f023 0301 	bic.w	r3, r3, #1
   1c77a:	e7fa      	b.n	1c772 <set_chunk_used+0x26>

0001c77c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c77c:	0053      	lsls	r3, r2, #1
   1c77e:	2201      	movs	r2, #1
   1c780:	f7ff bfd3 	b.w	1c72a <chunk_set>

0001c784 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1c784:	6880      	ldr	r0, [r0, #8]
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1c786:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c788:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c78c:	bf2c      	ite	cs
   1c78e:	2002      	movcs	r0, #2
   1c790:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1c792:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1c794:	fab0 f080 	clz	r0, r0
}
   1c798:	f1c0 001f 	rsb	r0, r0, #31
   1c79c:	4770      	bx	lr

0001c79e <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1c79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7a2:	4604      	mov	r4, r0
   1c7a4:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1c7a6:	f7ff ffcb 	bl	1c740 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1c7aa:	68a3      	ldr	r3, [r4, #8]
   1c7ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1c7b0:	4601      	mov	r1, r0
   1c7b2:	d301      	bcc.n	1c7b8 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1c7b4:	2801      	cmp	r0, #1
   1c7b6:	d035      	beq.n	1c824 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1c7b8:	4620      	mov	r0, r4
   1c7ba:	f7ff ffe3 	bl	1c784 <bucket_idx>
	if (b->next == 0U) {
   1c7be:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1c7c2:	6916      	ldr	r6, [r2, #16]
   1c7c4:	b99e      	cbnz	r6, 1c7ee <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1c7c6:	2301      	movs	r3, #1
   1c7c8:	fa03 f000 	lsl.w	r0, r3, r0
   1c7cc:	68e3      	ldr	r3, [r4, #12]
   1c7ce:	4303      	orrs	r3, r0
   1c7d0:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1c7d2:	4629      	mov	r1, r5
		b->next = c;
   1c7d4:	6115      	str	r5, [r2, #16]
   1c7d6:	462b      	mov	r3, r5
   1c7d8:	2202      	movs	r2, #2
   1c7da:	4620      	mov	r0, r4
   1c7dc:	f7ff ffa5 	bl	1c72a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1c7e0:	2203      	movs	r2, #3
   1c7e2:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1c7e4:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   1c7e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c7ea:	f7ff bf9e 	b.w	1c72a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1c7ee:	2202      	movs	r2, #2
   1c7f0:	4631      	mov	r1, r6
   1c7f2:	4620      	mov	r0, r4
   1c7f4:	f7ff ff8e 	bl	1c714 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1c7f8:	2202      	movs	r2, #2
   1c7fa:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1c7fc:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1c7fe:	4629      	mov	r1, r5
   1c800:	4620      	mov	r0, r4
   1c802:	f7ff ff92 	bl	1c72a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1c806:	4633      	mov	r3, r6
   1c808:	2203      	movs	r2, #3
   1c80a:	4629      	mov	r1, r5
   1c80c:	4620      	mov	r0, r4
   1c80e:	f7ff ff8c 	bl	1c72a <chunk_set>
   1c812:	2203      	movs	r2, #3
   1c814:	4639      	mov	r1, r7
   1c816:	462b      	mov	r3, r5
   1c818:	4620      	mov	r0, r4
   1c81a:	f7ff ff86 	bl	1c72a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1c81e:	2202      	movs	r2, #2
   1c820:	4631      	mov	r1, r6
   1c822:	e7df      	b.n	1c7e4 <free_list_add+0x46>
   1c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c828 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1c828:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c82e:	bf2c      	ite	cs
   1c830:	2508      	movcs	r5, #8
   1c832:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1c834:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c836:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c838:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1c83a:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1c83e:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1c842:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1c844:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1c846:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   1c848:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c84a:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   1c84c:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1c84e:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c850:	4620      	mov	r0, r4
   1c852:	f7ff ff97 	bl	1c784 <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1c856:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1c858:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1c85a:	1c41      	adds	r1, r0, #1
   1c85c:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1c85e:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1c862:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1c864:	428b      	cmp	r3, r1
   1c866:	db2f      	blt.n	1c8c8 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1c868:	4632      	mov	r2, r6
   1c86a:	4620      	mov	r0, r4
   1c86c:	2100      	movs	r1, #0
   1c86e:	f7ff ff85 	bl	1c77c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1c872:	2300      	movs	r3, #0
   1c874:	461a      	mov	r2, r3
   1c876:	4619      	mov	r1, r3
   1c878:	4620      	mov	r0, r4
   1c87a:	f7ff ff56 	bl	1c72a <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1c87e:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1c880:	4620      	mov	r0, r4
   1c882:	2201      	movs	r2, #1
   1c884:	2100      	movs	r1, #0
   1c886:	f7ff ff61 	bl	1c74c <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1c88a:	463a      	mov	r2, r7
   1c88c:	4631      	mov	r1, r6
   1c88e:	f7ff ff75 	bl	1c77c <set_chunk_size>
   1c892:	4633      	mov	r3, r6
   1c894:	4631      	mov	r1, r6
   1c896:	4620      	mov	r0, r4
   1c898:	2200      	movs	r2, #0
   1c89a:	f7ff ff46 	bl	1c72a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1c89e:	4629      	mov	r1, r5
   1c8a0:	4620      	mov	r0, r4
   1c8a2:	2200      	movs	r2, #0
   1c8a4:	f7ff ff6a 	bl	1c77c <set_chunk_size>
   1c8a8:	463b      	mov	r3, r7
   1c8aa:	4629      	mov	r1, r5
   1c8ac:	4620      	mov	r0, r4
   1c8ae:	2200      	movs	r2, #0
   1c8b0:	f7ff ff3b 	bl	1c72a <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1c8b4:	4629      	mov	r1, r5
   1c8b6:	4620      	mov	r0, r4
   1c8b8:	2201      	movs	r2, #1
   1c8ba:	f7ff ff47 	bl	1c74c <set_chunk_used>

	free_list_add(h, chunk0_size);
   1c8be:	4631      	mov	r1, r6
}
   1c8c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1c8c4:	f7ff bf6b 	b.w	1c79e <free_list_add>
		h->buckets[i].next = 0;
   1c8c8:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1c8cc:	3301      	adds	r3, #1
   1c8ce:	e7c9      	b.n	1c864 <sys_heap_init+0x3c>

0001c8d0 <outs>:
{
   1c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c8d4:	4607      	mov	r7, r0
   1c8d6:	4688      	mov	r8, r1
   1c8d8:	4615      	mov	r5, r2
   1c8da:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1c8dc:	4614      	mov	r4, r2
   1c8de:	42b4      	cmp	r4, r6
   1c8e0:	eba4 0005 	sub.w	r0, r4, r5
   1c8e4:	d302      	bcc.n	1c8ec <outs+0x1c>
   1c8e6:	b93e      	cbnz	r6, 1c8f8 <outs+0x28>
   1c8e8:	7823      	ldrb	r3, [r4, #0]
   1c8ea:	b12b      	cbz	r3, 1c8f8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1c8ec:	f814 0b01 	ldrb.w	r0, [r4], #1
   1c8f0:	4641      	mov	r1, r8
   1c8f2:	47b8      	blx	r7
		if (rc < 0) {
   1c8f4:	2800      	cmp	r0, #0
   1c8f6:	daf2      	bge.n	1c8de <outs+0xe>
}
   1c8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c8fc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1c8fc:	4770      	bx	lr

0001c8fe <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1c8fe:	2300      	movs	r3, #0
	list->head = NULL;
   1c900:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c904:	4770      	bx	lr

0001c906 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1c906:	6803      	ldr	r3, [r0, #0]
   1c908:	b923      	cbnz	r3, 1c914 <log_list_add_tail+0xe>
		list->head = msg;
   1c90a:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1c90c:	2300      	movs	r3, #0
	list->tail = msg;
   1c90e:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1c910:	600b      	str	r3, [r1, #0]
}
   1c912:	4770      	bx	lr
		list->tail->next = msg;
   1c914:	6843      	ldr	r3, [r0, #4]
   1c916:	6019      	str	r1, [r3, #0]
   1c918:	e7f8      	b.n	1c90c <log_list_add_tail+0x6>

0001c91a <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1c91a:	6800      	ldr	r0, [r0, #0]
   1c91c:	4770      	bx	lr

0001c91e <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1c91e:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1c920:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1c922:	b108      	cbz	r0, 1c928 <log_list_head_get+0xa>
		list->head = list->head->next;
   1c924:	6802      	ldr	r2, [r0, #0]
   1c926:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1c928:	4770      	bx	lr

0001c92a <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1c92a:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c92c:	f7e9 f9dc 	bl	5ce8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1c930:	b118      	cbz	r0, 1c93a <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1c932:	2301      	movs	r3, #1
   1c934:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c936:	2300      	movs	r3, #0
   1c938:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1c93a:	bd08      	pop	{r3, pc}

0001c93c <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1c93c:	f001 b85f 	b.w	1d9fe <sys_clock_cycle_get_32>

0001c940 <dummy_timestamp>:
   1c940:	2000      	movs	r0, #0
   1c942:	4770      	bx	lr

0001c944 <log_0>:
{
   1c944:	b538      	push	{r3, r4, r5, lr}
   1c946:	4605      	mov	r5, r0
   1c948:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1c94a:	f7ff ffee 	bl	1c92a <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c94e:	b128      	cbz	r0, 1c95c <log_0+0x18>
		msg->str = str;
   1c950:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1c952:	4621      	mov	r1, r4
}
   1c954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1c958:	f7e9 b8c4 	b.w	5ae4 <msg_finalize>
}
   1c95c:	bd38      	pop	{r3, r4, r5, pc}

0001c95e <log_1>:
{
   1c95e:	b570      	push	{r4, r5, r6, lr}
   1c960:	4606      	mov	r6, r0
   1c962:	460d      	mov	r5, r1
   1c964:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c966:	f7ff ffe0 	bl	1c92a <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c96a:	b158      	cbz	r0, 1c984 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1c96c:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1c96e:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1c970:	2101      	movs	r1, #1
   1c972:	f361 1207 	bfi	r2, r1, #4, #4
   1c976:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1c978:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1c97a:	4621      	mov	r1, r4
}
   1c97c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1c980:	f7e9 b8b0 	b.w	5ae4 <msg_finalize>
}
   1c984:	bd70      	pop	{r4, r5, r6, pc}

0001c986 <log_2>:
{
   1c986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c98a:	4680      	mov	r8, r0
   1c98c:	460f      	mov	r7, r1
   1c98e:	4616      	mov	r6, r2
   1c990:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c992:	f7ff ffca 	bl	1c92a <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c996:	b168      	cbz	r0, 1c9b4 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c998:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1c99a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1c99e:	2202      	movs	r2, #2
   1c9a0:	f362 1307 	bfi	r3, r2, #4, #4
   1c9a4:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c9a6:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1c9aa:	4629      	mov	r1, r5
}
   1c9ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c9b0:	f7e9 b898 	b.w	5ae4 <msg_finalize>
}
   1c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c9b8 <log_3>:
{
   1c9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c9bc:	4680      	mov	r8, r0
   1c9be:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1c9c2:	460f      	mov	r7, r1
   1c9c4:	4616      	mov	r6, r2
   1c9c6:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c9c8:	f7ff ffaf 	bl	1c92a <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c9cc:	b170      	cbz	r0, 1c9ec <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c9ce:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1c9d0:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1c9d4:	2203      	movs	r2, #3
   1c9d6:	f362 1307 	bfi	r3, r2, #4, #4
   1c9da:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c9dc:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1c9e0:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1c9e2:	4649      	mov	r1, r9
}
   1c9e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1c9e8:	f7e9 b87c 	b.w	5ae4 <msg_finalize>
}
   1c9ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c9f0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1c9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c9f4:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1c9f6:	8903      	ldrh	r3, [r0, #8]
{
   1c9f8:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1c9fc:	460e      	mov	r6, r1
   1c9fe:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1ca00:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1ca04:	42a2      	cmp	r2, r4
   1ca06:	d803      	bhi.n	1ca10 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1ca08:	2300      	movs	r3, #0
   1ca0a:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1ca0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1ca10:	680b      	ldr	r3, [r1, #0]
   1ca12:	4423      	add	r3, r4
   1ca14:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1ca16:	bf84      	itt	hi
   1ca18:	1b13      	subhi	r3, r2, r4
   1ca1a:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ca1c:	2a0c      	cmp	r2, #12
	req_len = *length;
   1ca1e:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1ca22:	d92a      	bls.n	1ca7a <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1ca24:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1ca26:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1ca2a:	d82d      	bhi.n	1ca88 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1ca2c:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1ca2e:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ca30:	454a      	cmp	r2, r9
   1ca32:	bf28      	it	cs
   1ca34:	464a      	movcs	r2, r9
   1ca36:	4615      	mov	r5, r2
		if (put_op) {
   1ca38:	4420      	add	r0, r4
   1ca3a:	b317      	cbz	r7, 1ca82 <log_msg_hexdump_data_op+0x92>
   1ca3c:	4631      	mov	r1, r6
   1ca3e:	f001 fbe0 	bl	1e202 <memcpy>
		req_len -= cpy_len;
   1ca42:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1ca46:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1ca48:	f1b9 0f00 	cmp.w	r9, #0
   1ca4c:	d0de      	beq.n	1ca0c <log_msg_hexdump_data_op+0x1c>
   1ca4e:	f1b8 0f00 	cmp.w	r8, #0
   1ca52:	d0db      	beq.n	1ca0c <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1ca54:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1ca58:	454d      	cmp	r5, r9
   1ca5a:	bf28      	it	cs
   1ca5c:	464d      	movcs	r5, r9
		if (put_op) {
   1ca5e:	1d20      	adds	r0, r4, #4
   1ca60:	4440      	add	r0, r8
   1ca62:	462a      	mov	r2, r5
   1ca64:	b1bf      	cbz	r7, 1ca96 <log_msg_hexdump_data_op+0xa6>
   1ca66:	4631      	mov	r1, r6
   1ca68:	f001 fbcb 	bl	1e202 <memcpy>
		req_len -= cpy_len;
   1ca6c:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1ca70:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1ca74:	442e      	add	r6, r5
		offset = 0;
   1ca76:	2400      	movs	r4, #0
   1ca78:	e7e6      	b.n	1ca48 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1ca7a:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1ca7c:	f04f 0800 	mov.w	r8, #0
   1ca80:	e7d6      	b.n	1ca30 <log_msg_hexdump_data_op+0x40>
   1ca82:	4601      	mov	r1, r0
   1ca84:	4630      	mov	r0, r6
   1ca86:	e7da      	b.n	1ca3e <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1ca88:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1ca8a:	2c1b      	cmp	r4, #27
   1ca8c:	d9dc      	bls.n	1ca48 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1ca8e:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1ca92:	3c1c      	subs	r4, #28
   1ca94:	e7f9      	b.n	1ca8a <log_msg_hexdump_data_op+0x9a>
   1ca96:	4601      	mov	r1, r0
   1ca98:	4630      	mov	r0, r6
   1ca9a:	e7e5      	b.n	1ca68 <log_msg_hexdump_data_op+0x78>

0001ca9c <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ca9c:	3004      	adds	r0, #4
   1ca9e:	f3bf 8f5b 	dmb	ish
   1caa2:	e850 3f00 	ldrex	r3, [r0]
   1caa6:	3301      	adds	r3, #1
   1caa8:	e840 3200 	strex	r2, r3, [r0]
   1caac:	2a00      	cmp	r2, #0
   1caae:	d1f8      	bne.n	1caa2 <log_msg_get+0x6>
   1cab0:	f3bf 8f5b 	dmb	ish
}
   1cab4:	4770      	bx	lr

0001cab6 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1cab6:	7a40      	ldrb	r0, [r0, #9]
}
   1cab8:	0900      	lsrs	r0, r0, #4
   1caba:	4770      	bx	lr

0001cabc <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1cabc:	7a43      	ldrb	r3, [r0, #9]
   1cabe:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1cac2:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1cac6:	d216      	bcs.n	1caf6 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1cac8:	2a03      	cmp	r2, #3
   1caca:	d803      	bhi.n	1cad4 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1cacc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1cad0:	6948      	ldr	r0, [r1, #20]
   1cad2:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1cad4:	2901      	cmp	r1, #1
   1cad6:	d803      	bhi.n	1cae0 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1cad8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1cadc:	6988      	ldr	r0, [r1, #24]
   1cade:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1cae0:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1cae2:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1cae4:	2906      	cmp	r1, #6
   1cae6:	d803      	bhi.n	1caf0 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1cae8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1caec:	6848      	ldr	r0, [r1, #4]
   1caee:	4770      	bx	lr
		cont = cont->next;
   1caf0:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1caf2:	3907      	subs	r1, #7
		cont = cont->next;
   1caf4:	e7f6      	b.n	1cae4 <log_msg_arg_get+0x28>
		return 0;
   1caf6:	2000      	movs	r0, #0
}
   1caf8:	4770      	bx	lr

0001cafa <log_msg_put>:
{
   1cafa:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cafc:	1d02      	adds	r2, r0, #4
   1cafe:	f3bf 8f5b 	dmb	ish
   1cb02:	e852 1f00 	ldrex	r1, [r2]
   1cb06:	3901      	subs	r1, #1
   1cb08:	e842 1c00 	strex	ip, r1, [r2]
   1cb0c:	f1bc 0f00 	cmp.w	ip, #0
   1cb10:	d1f7      	bne.n	1cb02 <log_msg_put+0x8>
   1cb12:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1cb16:	685b      	ldr	r3, [r3, #4]
   1cb18:	b90b      	cbnz	r3, 1cb1e <log_msg_put+0x24>
		msg_free(msg);
   1cb1a:	f7e9 b8f9 	b.w	5d10 <msg_free>
}
   1cb1e:	4770      	bx	lr

0001cb20 <log_msg_str_get>:
}
   1cb20:	6900      	ldr	r0, [r0, #16]
   1cb22:	4770      	bx	lr

0001cb24 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1cb24:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1cb26:	2400      	movs	r4, #0
   1cb28:	9400      	str	r4, [sp, #0]
   1cb2a:	f7ff ff61 	bl	1c9f0 <log_msg_hexdump_data_op>
}
   1cb2e:	b002      	add	sp, #8
   1cb30:	bd10      	pop	{r4, pc}

0001cb32 <buffer_write>:
{
   1cb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb34:	4606      	mov	r6, r0
   1cb36:	460d      	mov	r5, r1
   1cb38:	4614      	mov	r4, r2
   1cb3a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1cb3c:	4621      	mov	r1, r4
   1cb3e:	4628      	mov	r0, r5
   1cb40:	463a      	mov	r2, r7
   1cb42:	47b0      	blx	r6
	} while (len != 0);
   1cb44:	1a24      	subs	r4, r4, r0
		buf += processed;
   1cb46:	4405      	add	r5, r0
	} while (len != 0);
   1cb48:	d1f8      	bne.n	1cb3c <buffer_write+0xa>
}
   1cb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cb4c <std_print>:
{
   1cb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb50:	b08e      	sub	sp, #56	; 0x38
   1cb52:	af0e      	add	r7, sp, #56	; 0x38
   1cb54:	4680      	mov	r8, r0
   1cb56:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1cb58:	f7ff ffe2 	bl	1cb20 <log_msg_str_get>
   1cb5c:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1cb5e:	4640      	mov	r0, r8
   1cb60:	f7ff ffa9 	bl	1cab6 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1cb64:	0083      	lsls	r3, r0, #2
   1cb66:	3307      	adds	r3, #7
   1cb68:	f023 0307 	bic.w	r3, r3, #7
   1cb6c:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1cb70:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1cb72:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1cb74:	f04f 0900 	mov.w	r9, #0
   1cb78:	45d1      	cmp	r9, sl
   1cb7a:	d116      	bne.n	1cbaa <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1cb7c:	4640      	mov	r0, r8
   1cb7e:	f7ff ff9a 	bl	1cab6 <log_msg_nargs_get>
   1cb82:	280f      	cmp	r0, #15
   1cb84:	d81e      	bhi.n	1cbc4 <std_print+0x78>
   1cb86:	e8df f010 	tbh	[pc, r0, lsl #1]
   1cb8a:	0019      	.short	0x0019
   1cb8c:	00260020 	.word	0x00260020
   1cb90:	0036002d 	.word	0x0036002d
   1cb94:	004e0041 	.word	0x004e0041
   1cb98:	006e005d 	.word	0x006e005d
   1cb9c:	00960081 	.word	0x00960081
   1cba0:	00c600ad 	.word	0x00c600ad
   1cba4:	00fe00e1 	.word	0x00fe00e1
   1cba8:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1cbaa:	4649      	mov	r1, r9
   1cbac:	4640      	mov	r0, r8
   1cbae:	f7ff ff85 	bl	1cabc <log_msg_arg_get>
   1cbb2:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1cbb6:	f109 0901 	add.w	r9, r9, #1
   1cbba:	e7dd      	b.n	1cb78 <std_print+0x2c>
		print_formatted(output, str);
   1cbbc:	4631      	mov	r1, r6
   1cbbe:	4628      	mov	r0, r5
   1cbc0:	f7e9 f8e4 	bl	5d8c <print_formatted>
}
   1cbc4:	46bd      	mov	sp, r7
   1cbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1cbca:	6822      	ldr	r2, [r4, #0]
   1cbcc:	4631      	mov	r1, r6
   1cbce:	4628      	mov	r0, r5
   1cbd0:	f7e9 f8dc 	bl	5d8c <print_formatted>
		break;
   1cbd4:	e7f6      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1cbd6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cbda:	4631      	mov	r1, r6
   1cbdc:	4628      	mov	r0, r5
   1cbde:	f7e9 f8d5 	bl	5d8c <print_formatted>
		break;
   1cbe2:	e7ef      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1cbe4:	68a3      	ldr	r3, [r4, #8]
   1cbe6:	9300      	str	r3, [sp, #0]
   1cbe8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cbec:	4631      	mov	r1, r6
   1cbee:	4628      	mov	r0, r5
   1cbf0:	f7e9 f8cc 	bl	5d8c <print_formatted>
		break;
   1cbf4:	e7e6      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cbf6:	68e3      	ldr	r3, [r4, #12]
   1cbf8:	9301      	str	r3, [sp, #4]
   1cbfa:	68a3      	ldr	r3, [r4, #8]
   1cbfc:	9300      	str	r3, [sp, #0]
   1cbfe:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc02:	4631      	mov	r1, r6
   1cc04:	4628      	mov	r0, r5
   1cc06:	f7e9 f8c1 	bl	5d8c <print_formatted>
		break;
   1cc0a:	e7db      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cc0c:	6923      	ldr	r3, [r4, #16]
   1cc0e:	9302      	str	r3, [sp, #8]
   1cc10:	68e3      	ldr	r3, [r4, #12]
   1cc12:	9301      	str	r3, [sp, #4]
   1cc14:	68a3      	ldr	r3, [r4, #8]
   1cc16:	9300      	str	r3, [sp, #0]
   1cc18:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc1c:	4631      	mov	r1, r6
   1cc1e:	4628      	mov	r0, r5
   1cc20:	f7e9 f8b4 	bl	5d8c <print_formatted>
		break;
   1cc24:	e7ce      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cc26:	6963      	ldr	r3, [r4, #20]
   1cc28:	9303      	str	r3, [sp, #12]
   1cc2a:	6923      	ldr	r3, [r4, #16]
   1cc2c:	9302      	str	r3, [sp, #8]
   1cc2e:	68e3      	ldr	r3, [r4, #12]
   1cc30:	9301      	str	r3, [sp, #4]
   1cc32:	68a3      	ldr	r3, [r4, #8]
   1cc34:	9300      	str	r3, [sp, #0]
   1cc36:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc3a:	4631      	mov	r1, r6
   1cc3c:	4628      	mov	r0, r5
   1cc3e:	f7e9 f8a5 	bl	5d8c <print_formatted>
		break;
   1cc42:	e7bf      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cc44:	69a3      	ldr	r3, [r4, #24]
   1cc46:	9304      	str	r3, [sp, #16]
   1cc48:	6963      	ldr	r3, [r4, #20]
   1cc4a:	9303      	str	r3, [sp, #12]
   1cc4c:	6923      	ldr	r3, [r4, #16]
   1cc4e:	9302      	str	r3, [sp, #8]
   1cc50:	68e3      	ldr	r3, [r4, #12]
   1cc52:	9301      	str	r3, [sp, #4]
   1cc54:	68a3      	ldr	r3, [r4, #8]
   1cc56:	9300      	str	r3, [sp, #0]
   1cc58:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc5c:	4631      	mov	r1, r6
   1cc5e:	4628      	mov	r0, r5
   1cc60:	f7e9 f894 	bl	5d8c <print_formatted>
		break;
   1cc64:	e7ae      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cc66:	69e3      	ldr	r3, [r4, #28]
   1cc68:	9305      	str	r3, [sp, #20]
   1cc6a:	69a3      	ldr	r3, [r4, #24]
   1cc6c:	9304      	str	r3, [sp, #16]
   1cc6e:	6963      	ldr	r3, [r4, #20]
   1cc70:	9303      	str	r3, [sp, #12]
   1cc72:	6923      	ldr	r3, [r4, #16]
   1cc74:	9302      	str	r3, [sp, #8]
   1cc76:	68e3      	ldr	r3, [r4, #12]
   1cc78:	9301      	str	r3, [sp, #4]
   1cc7a:	68a3      	ldr	r3, [r4, #8]
   1cc7c:	9300      	str	r3, [sp, #0]
   1cc7e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cc82:	4631      	mov	r1, r6
   1cc84:	4628      	mov	r0, r5
   1cc86:	f7e9 f881 	bl	5d8c <print_formatted>
		break;
   1cc8a:	e79b      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cc8c:	6a23      	ldr	r3, [r4, #32]
   1cc8e:	9306      	str	r3, [sp, #24]
   1cc90:	69e3      	ldr	r3, [r4, #28]
   1cc92:	9305      	str	r3, [sp, #20]
   1cc94:	69a3      	ldr	r3, [r4, #24]
   1cc96:	9304      	str	r3, [sp, #16]
   1cc98:	6963      	ldr	r3, [r4, #20]
   1cc9a:	9303      	str	r3, [sp, #12]
   1cc9c:	6923      	ldr	r3, [r4, #16]
   1cc9e:	9302      	str	r3, [sp, #8]
   1cca0:	68e3      	ldr	r3, [r4, #12]
   1cca2:	9301      	str	r3, [sp, #4]
   1cca4:	68a3      	ldr	r3, [r4, #8]
   1cca6:	9300      	str	r3, [sp, #0]
   1cca8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ccac:	4631      	mov	r1, r6
   1ccae:	4628      	mov	r0, r5
   1ccb0:	f7e9 f86c 	bl	5d8c <print_formatted>
		break;
   1ccb4:	e786      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1ccb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ccb8:	9307      	str	r3, [sp, #28]
   1ccba:	6a23      	ldr	r3, [r4, #32]
   1ccbc:	9306      	str	r3, [sp, #24]
   1ccbe:	69e3      	ldr	r3, [r4, #28]
   1ccc0:	9305      	str	r3, [sp, #20]
   1ccc2:	69a3      	ldr	r3, [r4, #24]
   1ccc4:	9304      	str	r3, [sp, #16]
   1ccc6:	6963      	ldr	r3, [r4, #20]
   1ccc8:	9303      	str	r3, [sp, #12]
   1ccca:	6923      	ldr	r3, [r4, #16]
   1cccc:	9302      	str	r3, [sp, #8]
   1ccce:	68e3      	ldr	r3, [r4, #12]
   1ccd0:	9301      	str	r3, [sp, #4]
   1ccd2:	68a3      	ldr	r3, [r4, #8]
   1ccd4:	9300      	str	r3, [sp, #0]
   1ccd6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ccda:	4631      	mov	r1, r6
   1ccdc:	4628      	mov	r0, r5
   1ccde:	f7e9 f855 	bl	5d8c <print_formatted>
		break;
   1cce2:	e76f      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cce4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cce6:	9308      	str	r3, [sp, #32]
   1cce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ccea:	9307      	str	r3, [sp, #28]
   1ccec:	6a23      	ldr	r3, [r4, #32]
   1ccee:	9306      	str	r3, [sp, #24]
   1ccf0:	69e3      	ldr	r3, [r4, #28]
   1ccf2:	9305      	str	r3, [sp, #20]
   1ccf4:	69a3      	ldr	r3, [r4, #24]
   1ccf6:	9304      	str	r3, [sp, #16]
   1ccf8:	6963      	ldr	r3, [r4, #20]
   1ccfa:	9303      	str	r3, [sp, #12]
   1ccfc:	6923      	ldr	r3, [r4, #16]
   1ccfe:	9302      	str	r3, [sp, #8]
   1cd00:	68e3      	ldr	r3, [r4, #12]
   1cd02:	9301      	str	r3, [sp, #4]
   1cd04:	68a3      	ldr	r3, [r4, #8]
   1cd06:	9300      	str	r3, [sp, #0]
   1cd08:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cd0c:	4631      	mov	r1, r6
   1cd0e:	4628      	mov	r0, r5
   1cd10:	f7e9 f83c 	bl	5d8c <print_formatted>
		break;
   1cd14:	e756      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cd16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cd18:	9309      	str	r3, [sp, #36]	; 0x24
   1cd1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cd1c:	9308      	str	r3, [sp, #32]
   1cd1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd20:	9307      	str	r3, [sp, #28]
   1cd22:	6a23      	ldr	r3, [r4, #32]
   1cd24:	9306      	str	r3, [sp, #24]
   1cd26:	69e3      	ldr	r3, [r4, #28]
   1cd28:	9305      	str	r3, [sp, #20]
   1cd2a:	69a3      	ldr	r3, [r4, #24]
   1cd2c:	9304      	str	r3, [sp, #16]
   1cd2e:	6963      	ldr	r3, [r4, #20]
   1cd30:	9303      	str	r3, [sp, #12]
   1cd32:	6923      	ldr	r3, [r4, #16]
   1cd34:	9302      	str	r3, [sp, #8]
   1cd36:	68e3      	ldr	r3, [r4, #12]
   1cd38:	9301      	str	r3, [sp, #4]
   1cd3a:	68a3      	ldr	r3, [r4, #8]
   1cd3c:	9300      	str	r3, [sp, #0]
   1cd3e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cd42:	4631      	mov	r1, r6
   1cd44:	4628      	mov	r0, r5
   1cd46:	f7e9 f821 	bl	5d8c <print_formatted>
		break;
   1cd4a:	e73b      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cd4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cd4e:	930a      	str	r3, [sp, #40]	; 0x28
   1cd50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cd52:	9309      	str	r3, [sp, #36]	; 0x24
   1cd54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cd56:	9308      	str	r3, [sp, #32]
   1cd58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd5a:	9307      	str	r3, [sp, #28]
   1cd5c:	6a23      	ldr	r3, [r4, #32]
   1cd5e:	9306      	str	r3, [sp, #24]
   1cd60:	69e3      	ldr	r3, [r4, #28]
   1cd62:	9305      	str	r3, [sp, #20]
   1cd64:	69a3      	ldr	r3, [r4, #24]
   1cd66:	9304      	str	r3, [sp, #16]
   1cd68:	6963      	ldr	r3, [r4, #20]
   1cd6a:	9303      	str	r3, [sp, #12]
   1cd6c:	6923      	ldr	r3, [r4, #16]
   1cd6e:	9302      	str	r3, [sp, #8]
   1cd70:	68e3      	ldr	r3, [r4, #12]
   1cd72:	9301      	str	r3, [sp, #4]
   1cd74:	68a3      	ldr	r3, [r4, #8]
   1cd76:	9300      	str	r3, [sp, #0]
   1cd78:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cd7c:	4631      	mov	r1, r6
   1cd7e:	4628      	mov	r0, r5
   1cd80:	f7e9 f804 	bl	5d8c <print_formatted>
		break;
   1cd84:	e71e      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cd86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cd88:	930b      	str	r3, [sp, #44]	; 0x2c
   1cd8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cd8c:	930a      	str	r3, [sp, #40]	; 0x28
   1cd8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cd90:	9309      	str	r3, [sp, #36]	; 0x24
   1cd92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cd94:	9308      	str	r3, [sp, #32]
   1cd96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd98:	9307      	str	r3, [sp, #28]
   1cd9a:	6a23      	ldr	r3, [r4, #32]
   1cd9c:	9306      	str	r3, [sp, #24]
   1cd9e:	69e3      	ldr	r3, [r4, #28]
   1cda0:	9305      	str	r3, [sp, #20]
   1cda2:	69a3      	ldr	r3, [r4, #24]
   1cda4:	9304      	str	r3, [sp, #16]
   1cda6:	6963      	ldr	r3, [r4, #20]
   1cda8:	9303      	str	r3, [sp, #12]
   1cdaa:	6923      	ldr	r3, [r4, #16]
   1cdac:	9302      	str	r3, [sp, #8]
   1cdae:	68e3      	ldr	r3, [r4, #12]
   1cdb0:	9301      	str	r3, [sp, #4]
   1cdb2:	68a3      	ldr	r3, [r4, #8]
   1cdb4:	9300      	str	r3, [sp, #0]
   1cdb6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cdba:	4631      	mov	r1, r6
   1cdbc:	4628      	mov	r0, r5
   1cdbe:	f7e8 ffe5 	bl	5d8c <print_formatted>
		break;
   1cdc2:	e6ff      	b.n	1cbc4 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1cdc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1cdc6:	930c      	str	r3, [sp, #48]	; 0x30
   1cdc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1cdca:	930b      	str	r3, [sp, #44]	; 0x2c
   1cdcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cdce:	930a      	str	r3, [sp, #40]	; 0x28
   1cdd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1cdd2:	9309      	str	r3, [sp, #36]	; 0x24
   1cdd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cdd6:	9308      	str	r3, [sp, #32]
   1cdd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cdda:	9307      	str	r3, [sp, #28]
   1cddc:	6a23      	ldr	r3, [r4, #32]
   1cdde:	9306      	str	r3, [sp, #24]
   1cde0:	69e3      	ldr	r3, [r4, #28]
   1cde2:	9305      	str	r3, [sp, #20]
   1cde4:	69a3      	ldr	r3, [r4, #24]
   1cde6:	9304      	str	r3, [sp, #16]
   1cde8:	6963      	ldr	r3, [r4, #20]
   1cdea:	9303      	str	r3, [sp, #12]
   1cdec:	6923      	ldr	r3, [r4, #16]
   1cdee:	9302      	str	r3, [sp, #8]
   1cdf0:	68e3      	ldr	r3, [r4, #12]
   1cdf2:	9301      	str	r3, [sp, #4]
   1cdf4:	68a3      	ldr	r3, [r4, #8]
   1cdf6:	9300      	str	r3, [sp, #0]
   1cdf8:	e9d4 2300 	ldrd	r2, r3, [r4]
   1cdfc:	4631      	mov	r1, r6
   1cdfe:	4628      	mov	r0, r5
   1ce00:	f7e8 ffc4 	bl	5d8c <print_formatted>
}
   1ce04:	e6de      	b.n	1cbc4 <std_print+0x78>

0001ce06 <log_output_flush>:
		     output->control_block->offset,
   1ce06:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1ce08:	6881      	ldr	r1, [r0, #8]
{
   1ce0a:	b510      	push	{r4, lr}
   1ce0c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1ce0e:	e9d2 2300 	ldrd	r2, r3, [r2]
   1ce12:	6800      	ldr	r0, [r0, #0]
   1ce14:	f7ff fe8d 	bl	1cb32 <buffer_write>
	output->control_block->offset = 0;
   1ce18:	6863      	ldr	r3, [r4, #4]
   1ce1a:	2200      	movs	r2, #0
   1ce1c:	601a      	str	r2, [r3, #0]
}
   1ce1e:	bd10      	pop	{r4, pc}

0001ce20 <out_func>:
{
   1ce20:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ce22:	684b      	ldr	r3, [r1, #4]
   1ce24:	681a      	ldr	r2, [r3, #0]
   1ce26:	68cb      	ldr	r3, [r1, #12]
   1ce28:	429a      	cmp	r2, r3
{
   1ce2a:	4605      	mov	r5, r0
   1ce2c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1ce2e:	d102      	bne.n	1ce36 <out_func+0x16>
		log_output_flush(out_ctx);
   1ce30:	4608      	mov	r0, r1
   1ce32:	f7ff ffe8 	bl	1ce06 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ce36:	6863      	ldr	r3, [r4, #4]
   1ce38:	f3bf 8f5b 	dmb	ish
   1ce3c:	e853 2f00 	ldrex	r2, [r3]
   1ce40:	1c51      	adds	r1, r2, #1
   1ce42:	e843 1000 	strex	r0, r1, [r3]
   1ce46:	2800      	cmp	r0, #0
   1ce48:	d1f8      	bne.n	1ce3c <out_func+0x1c>
   1ce4a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1ce4e:	68a3      	ldr	r3, [r4, #8]
   1ce50:	549d      	strb	r5, [r3, r2]
}
   1ce52:	2000      	movs	r0, #0
   1ce54:	bd38      	pop	{r3, r4, r5, pc}

0001ce56 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   1ce56:	6883      	ldr	r3, [r0, #8]
   1ce58:	6a1b      	ldr	r3, [r3, #32]
   1ce5a:	b103      	cbz	r3, 1ce5e <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   1ce5c:	4718      	bx	r3
}
   1ce5e:	4770      	bx	lr

0001ce60 <tty_putchar>:
{
   1ce60:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1ce64:	4604      	mov	r4, r0
   1ce66:	460d      	mov	r5, r1
	res = k_sem_take(&tty->tx_sem,
   1ce68:	f100 062c 	add.w	r6, r0, #44	; 0x2c
			 k_is_in_isr() ? K_NO_WAIT :
   1ce6c:	f000 fe9d 	bl	1dbaa <k_is_in_isr>
	res = k_sem_take(&tty->tx_sem,
   1ce70:	bba8      	cbnz	r0, 1cede <tty_putchar+0x7e>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1ce72:	6d21      	ldr	r1, [r4, #80]	; 0x50
	res = k_sem_take(&tty->tx_sem,
   1ce74:	1c4b      	adds	r3, r1, #1
   1ce76:	d035      	beq.n	1cee4 <tty_putchar+0x84>
					 SYS_TIMEOUT_MS(tty->tx_timeout));
   1ce78:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1ce7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1ce80:	f240 38e7 	movw	r8, #999	; 0x3e7
   1ce84:	f04f 0900 	mov.w	r9, #0
   1ce88:	fbc0 8901 	smlal	r8, r9, r0, r1
   1ce8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ce90:	2300      	movs	r3, #0
   1ce92:	4640      	mov	r0, r8
   1ce94:	4649      	mov	r1, r9
   1ce96:	f7e3 fe0f 	bl	ab8 <__aeabi_uldivmod>
   1ce9a:	4602      	mov	r2, r0
   1ce9c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1ce9e:	4630      	mov	r0, r6
   1cea0:	f7ef f89c 	bl	bfdc <z_impl_k_sem_take>
	if (res < 0) {
   1cea4:	2800      	cmp	r0, #0
   1cea6:	db18      	blt.n	1ceda <tty_putchar+0x7a>
	__asm__ volatile(
   1cea8:	f04f 0320 	mov.w	r3, #32
   1ceac:	f3ef 8211 	mrs	r2, BASEPRI
   1ceb0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ceb4:	f3bf 8f6f 	isb	sy
	tx_next = tty->tx_put + 1;
   1ceb8:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
	if (tx_next >= tty->tx_ringbuf_sz) {
   1cebc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	tx_next = tty->tx_put + 1;
   1cebe:	1c4b      	adds	r3, r1, #1
		tx_next = 0;
   1cec0:	4298      	cmp	r0, r3
   1cec2:	bf98      	it	ls
   1cec4:	2300      	movls	r3, #0
	if (tx_next == tty->tx_get) {
   1cec6:	f8b4 004c 	ldrh.w	r0, [r4, #76]	; 0x4c
   1ceca:	4298      	cmp	r0, r3
   1cecc:	d10d      	bne.n	1ceea <tty_putchar+0x8a>
	__asm__ volatile(
   1cece:	f382 8811 	msr	BASEPRI, r2
   1ced2:	f3bf 8f6f 	isb	sy
		return -ENOSPC;
   1ced6:	f06f 001b 	mvn.w	r0, #27
}
   1ceda:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	res = k_sem_take(&tty->tx_sem,
   1cede:	2200      	movs	r2, #0
   1cee0:	4613      	mov	r3, r2
   1cee2:	e7dc      	b.n	1ce9e <tty_putchar+0x3e>
   1cee4:	f04f 32ff 	mov.w	r2, #4294967295
   1cee8:	e7fa      	b.n	1cee0 <tty_putchar+0x80>
	tty->tx_ringbuf[tty->tx_put] = c;
   1ceea:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1ceec:	5445      	strb	r5, [r0, r1]
	tty->tx_put = tx_next;
   1ceee:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
   1cef2:	f382 8811 	msr	BASEPRI, r2
   1cef6:	f3bf 8f6f 	isb	sy
	uart_irq_tx_enable(tty->uart_dev);
   1cefa:	6820      	ldr	r0, [r4, #0]
	if (api->irq_tx_enable != NULL) {
   1cefc:	6883      	ldr	r3, [r0, #8]
   1cefe:	69db      	ldr	r3, [r3, #28]
   1cf00:	b113      	cbz	r3, 1cf08 <tty_putchar+0xa8>
		api->irq_tx_enable(dev);
   1cf02:	4798      	blx	r3
	return 0;
   1cf04:	2000      	movs	r0, #0
   1cf06:	e7e8      	b.n	1ceda <tty_putchar+0x7a>
   1cf08:	4618      	mov	r0, r3
   1cf0a:	e7e6      	b.n	1ceda <tty_putchar+0x7a>

0001cf0c <tty_uart_isr>:
{
   1cf0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1cf0e:	4605      	mov	r5, r0
   1cf10:	460c      	mov	r4, r1
	if (api->irq_update == NULL) {
   1cf12:	6883      	ldr	r3, [r0, #8]
   1cf14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cf16:	b103      	cbz	r3, 1cf1a <tty_uart_isr+0xe>
	return api->irq_update(dev);
   1cf18:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   1cf1a:	68ab      	ldr	r3, [r5, #8]
   1cf1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1cf1e:	b98b      	cbnz	r3, 1cf44 <tty_uart_isr+0x38>
	k_sem_give(&tty->rx_sem);
   1cf20:	1d26      	adds	r6, r4, #4
	if (api->fifo_read == NULL) {
   1cf22:	68ab      	ldr	r3, [r5, #8]
   1cf24:	699b      	ldr	r3, [r3, #24]
   1cf26:	b9f3      	cbnz	r3, 1cf66 <tty_uart_isr+0x5a>
	int rx_next = tty->rx_put + 1;
   1cf28:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
	if (rx_next >= tty->rx_ringbuf_sz) {
   1cf2a:	6a21      	ldr	r1, [r4, #32]
	int rx_next = tty->rx_put + 1;
   1cf2c:	1c53      	adds	r3, r2, #1
		rx_next = 0;
   1cf2e:	4299      	cmp	r1, r3
   1cf30:	bf98      	it	ls
   1cf32:	2300      	movls	r3, #0
	if (rx_next == tty->rx_get) {
   1cf34:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   1cf36:	4299      	cmp	r1, r3
   1cf38:	d11d      	bne.n	1cf76 <tty_uart_isr+0x6a>
		tty_putchar(tty, '~');
   1cf3a:	217e      	movs	r1, #126	; 0x7e
   1cf3c:	4620      	mov	r0, r4
   1cf3e:	f7ff ff8f 	bl	1ce60 <tty_putchar>
		return 1;
   1cf42:	e7ee      	b.n	1cf22 <tty_uart_isr+0x16>
	return api->irq_rx_ready(dev);
   1cf44:	4628      	mov	r0, r5
   1cf46:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   1cf48:	2800      	cmp	r0, #0
   1cf4a:	d1e9      	bne.n	1cf20 <tty_uart_isr+0x14>
	if (api->irq_tx_ready == NULL) {
   1cf4c:	68ab      	ldr	r3, [r5, #8]
   1cf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cf50:	b9d3      	cbnz	r3, 1cf88 <tty_uart_isr+0x7c>
		if (tty->tx_get == tty->tx_put) {
   1cf52:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   1cf56:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
   1cf5a:	429a      	cmp	r2, r3
   1cf5c:	d11a      	bne.n	1cf94 <tty_uart_isr+0x88>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   1cf5e:	4628      	mov	r0, r5
   1cf60:	f7ff ff79 	bl	1ce56 <z_impl_uart_irq_tx_disable>
}
   1cf64:	e014      	b.n	1cf90 <tty_uart_isr+0x84>
	return api->fifo_read(dev, rx_data, size);
   1cf66:	2201      	movs	r2, #1
   1cf68:	f10d 0107 	add.w	r1, sp, #7
   1cf6c:	4628      	mov	r0, r5
   1cf6e:	4798      	blx	r3
			if (uart_fifo_read(dev, &c, 1) == 0) {
   1cf70:	2800      	cmp	r0, #0
   1cf72:	d1d9      	bne.n	1cf28 <tty_uart_isr+0x1c>
   1cf74:	e7ea      	b.n	1cf4c <tty_uart_isr+0x40>
	tty->rx_ringbuf[tty->rx_put] = c;
   1cf76:	69e1      	ldr	r1, [r4, #28]
			tty_irq_input_hook(tty, c);
   1cf78:	f89d 0007 	ldrb.w	r0, [sp, #7]
	tty->rx_ringbuf[tty->rx_put] = c;
   1cf7c:	5488      	strb	r0, [r1, r2]
	tty->rx_put = rx_next;
   1cf7e:	84e3      	strh	r3, [r4, #38]	; 0x26
	z_impl_k_sem_give(sem);
   1cf80:	4630      	mov	r0, r6
   1cf82:	f7ef f805 	bl	bf90 <z_impl_k_sem_give>
}
   1cf86:	e7cc      	b.n	1cf22 <tty_uart_isr+0x16>
	return api->irq_tx_ready(dev);
   1cf88:	4628      	mov	r0, r5
   1cf8a:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   1cf8c:	2800      	cmp	r0, #0
   1cf8e:	d1e0      	bne.n	1cf52 <tty_uart_isr+0x46>
}
   1cf90:	b002      	add	sp, #8
   1cf92:	bd70      	pop	{r4, r5, r6, pc}
			uart_fifo_fill(dev, &tty->tx_ringbuf[tty->tx_get++], 1);
   1cf94:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1cf96:	1c5a      	adds	r2, r3, #1
   1cf98:	4419      	add	r1, r3
	if (api->fifo_fill == NULL) {
   1cf9a:	68ab      	ldr	r3, [r5, #8]
   1cf9c:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
   1cfa0:	695b      	ldr	r3, [r3, #20]
   1cfa2:	b113      	cbz	r3, 1cfaa <tty_uart_isr+0x9e>
	return api->fifo_fill(dev, tx_data, size);
   1cfa4:	2201      	movs	r2, #1
   1cfa6:	4628      	mov	r0, r5
   1cfa8:	4798      	blx	r3
			if (tty->tx_get >= tty->tx_ringbuf_sz) {
   1cfaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1cfac:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   1cfb0:	429a      	cmp	r2, r3
				tty->tx_get = 0U;
   1cfb2:	bf24      	itt	cs
   1cfb4:	2300      	movcs	r3, #0
   1cfb6:	f8a4 304c 	strhcs.w	r3, [r4, #76]	; 0x4c
	z_impl_k_sem_give(sem);
   1cfba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1cfbe:	f7ee ffe7 	bl	bf90 <z_impl_k_sem_give>
}
   1cfc2:	e7e5      	b.n	1cf90 <tty_uart_isr+0x84>

0001cfc4 <tty_set_rx_buf>:

int tty_set_rx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1cfc4:	b570      	push	{r4, r5, r6, lr}
   1cfc6:	4604      	mov	r4, r0
   1cfc8:	460e      	mov	r6, r1
	uart_irq_rx_disable(tty->uart_dev);
   1cfca:	6800      	ldr	r0, [r0, #0]
{
   1cfcc:	4615      	mov	r5, r2
	if (api->irq_rx_disable != NULL) {
   1cfce:	6883      	ldr	r3, [r0, #8]
   1cfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cfd2:	b103      	cbz	r3, 1cfd6 <tty_set_rx_buf+0x12>
		api->irq_rx_disable(dev);
   1cfd4:	4798      	blx	r3

	tty->rx_ringbuf = buf;
	tty->rx_ringbuf_sz = size;
   1cfd6:	e9c4 6507 	strd	r6, r5, [r4, #28]

	if (size > 0) {
   1cfda:	b155      	cbz	r5, 1cff2 <tty_set_rx_buf+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cfdc:	f04f 32ff 	mov.w	r2, #4294967295
   1cfe0:	2100      	movs	r1, #0
   1cfe2:	1d20      	adds	r0, r4, #4
   1cfe4:	f000 fdfc 	bl	1dbe0 <z_impl_k_sem_init>
		k_sem_init(&tty->rx_sem, 0, K_SEM_MAX_LIMIT);
		uart_irq_rx_enable(tty->uart_dev);
   1cfe8:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable != NULL) {
   1cfea:	6883      	ldr	r3, [r0, #8]
   1cfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cfee:	b103      	cbz	r3, 1cff2 <tty_set_rx_buf+0x2e>
		api->irq_rx_enable(dev);
   1cff0:	4798      	blx	r3
	}

	return 0;
}
   1cff2:	2000      	movs	r0, #0
   1cff4:	bd70      	pop	{r4, r5, r6, pc}

0001cff6 <tty_set_tx_buf>:

int tty_set_tx_buf(struct tty_serial *tty, void *buf, size_t size)
{
   1cff6:	b570      	push	{r4, r5, r6, lr}
   1cff8:	4604      	mov	r4, r0
   1cffa:	460e      	mov	r6, r1
   1cffc:	4615      	mov	r5, r2
	uart_irq_tx_disable(tty->uart_dev);
   1cffe:	6800      	ldr	r0, [r0, #0]
	z_impl_uart_irq_tx_disable(dev);
   1d000:	f7ff ff29 	bl	1ce56 <z_impl_uart_irq_tx_disable>

	tty->tx_ringbuf = buf;
	tty->tx_ringbuf_sz = size;
   1d004:	e9c4 6511 	strd	r6, r5, [r4, #68]	; 0x44
   1d008:	f04f 32ff 	mov.w	r2, #4294967295
   1d00c:	18a9      	adds	r1, r5, r2
   1d00e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1d012:	f000 fde5 	bl	1dbe0 <z_impl_k_sem_init>
	/* New buffer is initially empty, no need to re-enable interrupts,
	 * it will be done when needed (on first output char).
	 */

	return 0;
}
   1d016:	2000      	movs	r0, #0
   1d018:	bd70      	pop	{r4, r5, r6, pc}

0001d01a <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1d01a:	2200      	movs	r2, #0
   1d01c:	e9c0 2200 	strd	r2, r2, [r0]
   1d020:	6082      	str	r2, [r0, #8]
}
   1d022:	4770      	bx	lr

0001d024 <abort_function>:
{
   1d024:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   1d026:	2000      	movs	r0, #0
   1d028:	f7e8 fb44 	bl	56b4 <sys_reboot>

0001d02c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d02c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1d02e:	6800      	ldr	r0, [r0, #0]
   1d030:	f7e9 baf6 	b.w	6620 <z_arm_fatal_error>

0001d034 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1d034:	2100      	movs	r1, #0
   1d036:	2001      	movs	r0, #1
   1d038:	f7e9 baf2 	b.w	6620 <z_arm_fatal_error>

0001d03c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d03c:	b508      	push	{r3, lr}
	handler();
   1d03e:	f7e9 fb71 	bl	6724 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1d042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1d046:	f7e9 bc4d 	b.w	68e4 <z_arm_exc_exit>

0001d04a <malloc_prepare>:
}
   1d04a:	2000      	movs	r0, #0
   1d04c:	4770      	bx	lr

0001d04e <_stdout_hook_default>:
}
   1d04e:	f04f 30ff 	mov.w	r0, #4294967295
   1d052:	4770      	bx	lr

0001d054 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1d054:	f04f 32ff 	mov.w	r2, #4294967295
   1d058:	f04f 33ff 	mov.w	r3, #4294967295
   1d05c:	f7ee bed4 	b.w	be08 <z_impl_k_mutex_lock>

0001d060 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   1d060:	f7ee bf50 	b.w	bf04 <z_impl_k_mutex_unlock>

0001d064 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1d064:	b084      	sub	sp, #16
   1d066:	ab04      	add	r3, sp, #16
   1d068:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1d06c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1d070:	2b06      	cmp	r3, #6
   1d072:	d108      	bne.n	1d086 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1d074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d078:	2201      	movs	r2, #1
   1d07a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1d07e:	f3bf 8f4f 	dsb	sy
        __WFE();
   1d082:	bf20      	wfe
    while (true)
   1d084:	e7fd      	b.n	1d082 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1d086:	b004      	add	sp, #16
   1d088:	4770      	bx	lr

0001d08a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1d08a:	b084      	sub	sp, #16
   1d08c:	ab04      	add	r3, sp, #16
   1d08e:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1d092:	2300      	movs	r3, #0
   1d094:	f383 8811 	msr	BASEPRI, r3
   1d098:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1d09c:	b004      	add	sp, #16
   1d09e:	4770      	bx	lr

0001d0a0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d0a0:	6902      	ldr	r2, [r0, #16]
   1d0a2:	b2cb      	uxtb	r3, r1
   1d0a4:	210c      	movs	r1, #12
   1d0a6:	fb03 2101 	mla	r1, r3, r1, r2
   1d0aa:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1d0ac:	f000 0007 	and.w	r0, r0, #7
   1d0b0:	4770      	bx	lr

0001d0b2 <set_off_state>:
	__asm__ volatile(
   1d0b2:	f04f 0320 	mov.w	r3, #32
   1d0b6:	f3ef 8211 	mrs	r2, BASEPRI
   1d0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d0c2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d0c4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1d0c8:	d001      	beq.n	1d0ce <set_off_state+0x1c>
   1d0ca:	428b      	cmp	r3, r1
   1d0cc:	d107      	bne.n	1d0de <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d0ce:	2301      	movs	r3, #1
   1d0d0:	6003      	str	r3, [r0, #0]
	int err = 0;
   1d0d2:	2000      	movs	r0, #0
	__asm__ volatile(
   1d0d4:	f382 8811 	msr	BASEPRI, r2
   1d0d8:	f3bf 8f6f 	isb	sy
}
   1d0dc:	4770      	bx	lr
		err = -EPERM;
   1d0de:	f04f 30ff 	mov.w	r0, #4294967295
   1d0e2:	e7f7      	b.n	1d0d4 <set_off_state+0x22>

0001d0e4 <set_starting_state>:
{
   1d0e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d0e6:	f04f 0320 	mov.w	r3, #32
   1d0ea:	f3ef 8211 	mrs	r2, BASEPRI
   1d0ee:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0f2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d0f6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d0f8:	f003 0407 	and.w	r4, r3, #7
   1d0fc:	2c01      	cmp	r4, #1
   1d0fe:	d106      	bne.n	1d10e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d100:	6001      	str	r1, [r0, #0]
	int err = 0;
   1d102:	2000      	movs	r0, #0
	__asm__ volatile(
   1d104:	f382 8811 	msr	BASEPRI, r2
   1d108:	f3bf 8f6f 	isb	sy
}
   1d10c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d10e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1d112:	428b      	cmp	r3, r1
		err = -EALREADY;
   1d114:	bf14      	ite	ne
   1d116:	f04f 30ff 	movne.w	r0, #4294967295
   1d11a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   1d11e:	e7f1      	b.n	1d104 <set_starting_state+0x20>

0001d120 <set_on_state>:
	__asm__ volatile(
   1d120:	f04f 0320 	mov.w	r3, #32
   1d124:	f3ef 8211 	mrs	r2, BASEPRI
   1d128:	f383 8812 	msr	BASEPRI_MAX, r3
   1d12c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1d130:	6803      	ldr	r3, [r0, #0]
   1d132:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d136:	f043 0302 	orr.w	r3, r3, #2
   1d13a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1d13c:	f382 8811 	msr	BASEPRI, r2
   1d140:	f3bf 8f6f 	isb	sy
}
   1d144:	4770      	bx	lr

0001d146 <onoff_started_callback>:
	return &data->mgr[type];
   1d146:	6900      	ldr	r0, [r0, #16]
{
   1d148:	b410      	push	{r4}
	return &data->mgr[type];
   1d14a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1d14c:	241c      	movs	r4, #28
   1d14e:	fb03 0004 	mla	r0, r3, r4, r0
   1d152:	2100      	movs	r1, #0
}
   1d154:	bc10      	pop	{r4}
	notify(mgr, 0);
   1d156:	4710      	bx	r2

0001d158 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1d158:	2000      	movs	r0, #0
   1d15a:	f7ed bcbd 	b.w	aad8 <nrfx_clock_start>

0001d15e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d15e:	2000      	movs	r0, #0
   1d160:	f7ed bcec 	b.w	ab3c <nrfx_clock_stop>

0001d164 <blocking_start_callback>:
{
   1d164:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1d166:	f7ee bf13 	b.w	bf90 <z_impl_k_sem_give>

0001d16a <api_stop>:
{
   1d16a:	b538      	push	{r3, r4, r5, lr}
   1d16c:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1d16e:	240c      	movs	r4, #12
   1d170:	434c      	muls	r4, r1
{
   1d172:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1d174:	6900      	ldr	r0, [r0, #16]
   1d176:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1d17a:	2180      	movs	r1, #128	; 0x80
   1d17c:	4418      	add	r0, r3
   1d17e:	f7ff ff98 	bl	1d0b2 <set_off_state>
	if (err < 0) {
   1d182:	2800      	cmp	r0, #0
   1d184:	db04      	blt.n	1d190 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1d186:	6869      	ldr	r1, [r5, #4]
   1d188:	440c      	add	r4, r1
   1d18a:	6863      	ldr	r3, [r4, #4]
   1d18c:	4798      	blx	r3
	return 0;
   1d18e:	2000      	movs	r0, #0
}
   1d190:	bd38      	pop	{r3, r4, r5, pc}

0001d192 <api_start>:
{
   1d192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d196:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1d198:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1d19a:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   1d19c:	434c      	muls	r4, r1
{
   1d19e:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1d1a0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1d1a4:	2180      	movs	r1, #128	; 0x80
   1d1a6:	4428      	add	r0, r5
{
   1d1a8:	4690      	mov	r8, r2
   1d1aa:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1d1ac:	f7ff ff9a 	bl	1d0e4 <set_starting_state>
	if (err < 0) {
   1d1b0:	2800      	cmp	r0, #0
   1d1b2:	db06      	blt.n	1d1c2 <api_start+0x30>
	subdata->cb = cb;
   1d1b4:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1d1b6:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1d1ba:	6873      	ldr	r3, [r6, #4]
   1d1bc:	591b      	ldr	r3, [r3, r4]
   1d1be:	4798      	blx	r3
	return 0;
   1d1c0:	2000      	movs	r0, #0
}
   1d1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d1c6 <uart_poll_out>:
	api->poll_out(dev, out_char);
   1d1c6:	6883      	ldr	r3, [r0, #8]
   1d1c8:	685b      	ldr	r3, [r3, #4]
   1d1ca:	4718      	bx	r3

0001d1cc <debug_hook_out_nop>:
}
   1d1cc:	2000      	movs	r0, #0
   1d1ce:	4770      	bx	lr

0001d1d0 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1d1d0:	b570      	push	{r4, r5, r6, lr}
   1d1d2:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d1d4:	6801      	ldr	r1, [r0, #0]
{
   1d1d6:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d1d8:	b189      	cbz	r1, 1d1fe <gpio_fire_callbacks+0x2e>
	return node->next;
   1d1da:	680c      	ldr	r4, [r1, #0]
   1d1dc:	2c00      	cmp	r4, #0
   1d1de:	bf38      	it	cc
   1d1e0:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   1d1e2:	688a      	ldr	r2, [r1, #8]
   1d1e4:	402a      	ands	r2, r5
   1d1e6:	d002      	beq.n	1d1ee <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d1e8:	684b      	ldr	r3, [r1, #4]
   1d1ea:	4630      	mov	r0, r6
   1d1ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d1ee:	b134      	cbz	r4, 1d1fe <gpio_fire_callbacks+0x2e>
   1d1f0:	6823      	ldr	r3, [r4, #0]
   1d1f2:	2b00      	cmp	r3, #0
   1d1f4:	bf38      	it	cc
   1d1f6:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d1f8:	4621      	mov	r1, r4
   1d1fa:	461c      	mov	r4, r3
   1d1fc:	e7f1      	b.n	1d1e2 <gpio_fire_callbacks+0x12>
		}
	}
}
   1d1fe:	bd70      	pop	{r4, r5, r6, pc}

0001d200 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d200:	6843      	ldr	r3, [r0, #4]
   1d202:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d204:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1d208:	600b      	str	r3, [r1, #0]
}
   1d20a:	2000      	movs	r0, #0
   1d20c:	4770      	bx	lr

0001d20e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d20e:	6843      	ldr	r3, [r0, #4]
   1d210:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d212:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d216:	4042      	eors	r2, r0
   1d218:	400a      	ands	r2, r1
   1d21a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d21c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1d220:	2000      	movs	r0, #0
   1d222:	4770      	bx	lr

0001d224 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d224:	6843      	ldr	r3, [r0, #4]
   1d226:	685b      	ldr	r3, [r3, #4]
}
   1d228:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1d22a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1d22e:	4770      	bx	lr

0001d230 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d230:	6843      	ldr	r3, [r0, #4]
   1d232:	685b      	ldr	r3, [r3, #4]
}
   1d234:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1d236:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1d23a:	4770      	bx	lr

0001d23c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d23c:	6843      	ldr	r3, [r0, #4]
   1d23e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d240:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d244:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d246:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1d24a:	2000      	movs	r0, #0
   1d24c:	4770      	bx	lr

0001d24e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d24e:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   1d250:	6858      	ldr	r0, [r3, #4]
{
   1d252:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1d254:	b158      	cbz	r0, 1d26e <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d256:	2400      	movs	r4, #0
   1d258:	4281      	cmp	r1, r0
   1d25a:	d113      	bne.n	1d284 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1d25c:	6808      	ldr	r0, [r1, #0]
   1d25e:	b95c      	cbnz	r4, 1d278 <gpio_nrfx_manage_callback+0x2a>
   1d260:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1d262:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d264:	42a1      	cmp	r1, r4
   1d266:	d100      	bne.n	1d26a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1d268:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1d26a:	2000      	movs	r0, #0
   1d26c:	6008      	str	r0, [r1, #0]
	if (set) {
   1d26e:	b972      	cbnz	r2, 1d28e <gpio_nrfx_manage_callback+0x40>
	return 0;
   1d270:	2000      	movs	r0, #0
}
   1d272:	bd30      	pop	{r4, r5, pc}
   1d274:	4628      	mov	r0, r5
   1d276:	e7ef      	b.n	1d258 <gpio_nrfx_manage_callback+0xa>
   1d278:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d27a:	6898      	ldr	r0, [r3, #8]
   1d27c:	4281      	cmp	r1, r0
	list->tail = node;
   1d27e:	bf08      	it	eq
   1d280:	609c      	streq	r4, [r3, #8]
}
   1d282:	e7f2      	b.n	1d26a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d284:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d286:	4604      	mov	r4, r0
   1d288:	2d00      	cmp	r5, #0
   1d28a:	d1f3      	bne.n	1d274 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1d28c:	b13a      	cbz	r2, 1d29e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1d28e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1d290:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d292:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1d294:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d296:	2800      	cmp	r0, #0
   1d298:	d1ea      	bne.n	1d270 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1d29a:	6099      	str	r1, [r3, #8]
}
   1d29c:	e7e9      	b.n	1d272 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1d29e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d2a2:	e7e6      	b.n	1d272 <gpio_nrfx_manage_callback+0x24>

0001d2a4 <cfg_level_pins>:
{
   1d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   1d2a8:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1d2aa:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d2ae:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d2b0:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1d2b4:	4313      	orrs	r3, r2
   1d2b6:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1d2ba:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d2bc:	2500      	movs	r5, #0
	while (level_pins) {
   1d2be:	b90c      	cbnz	r4, 1d2c4 <cfg_level_pins+0x20>
}
   1d2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d2c4:	4226      	tst	r6, r4
   1d2c6:	d010      	beq.n	1d2ea <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d2c8:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d2ca:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d2ce:	40e9      	lsrs	r1, r5
   1d2d0:	f001 0101 	and.w	r1, r1, #1
   1d2d4:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d2d8:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d2dc:	b2c9      	uxtb	r1, r1
   1d2de:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1d2e2:	f7ea f973 	bl	75cc <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d2e6:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d2ea:	3501      	adds	r5, #1
		bit <<= 1;
   1d2ec:	0076      	lsls	r6, r6, #1
   1d2ee:	e7e6      	b.n	1d2be <cfg_level_pins+0x1a>

0001d2f0 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d2f0:	2301      	movs	r3, #1
   1d2f2:	fa03 f101 	lsl.w	r1, r3, r1
   1d2f6:	6903      	ldr	r3, [r0, #16]
   1d2f8:	681b      	ldr	r3, [r3, #0]
   1d2fa:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1d2fc:	bf18      	it	ne
   1d2fe:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1d302:	b112      	cbz	r2, 1d30a <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1d304:	6883      	ldr	r3, [r0, #8]
   1d306:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1d308:	4718      	bx	r3
   1d30a:	6883      	ldr	r3, [r0, #8]
   1d30c:	691b      	ldr	r3, [r3, #16]
   1d30e:	e7fb      	b.n	1d308 <gpio_pin_set+0x18>

0001d310 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1d310:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1d312:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1d314:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1d316:	b1fd      	cbz	r5, 1d358 <_spi_context_cs_control.isra.0+0x48>
   1d318:	68ab      	ldr	r3, [r5, #8]
   1d31a:	b1eb      	cbz	r3, 1d358 <_spi_context_cs_control.isra.0+0x48>
   1d31c:	6818      	ldr	r0, [r3, #0]
   1d31e:	b1d8      	cbz	r0, 1d358 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   1d320:	b151      	cbz	r1, 1d338 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1d322:	7a19      	ldrb	r1, [r3, #8]
   1d324:	2201      	movs	r2, #1
   1d326:	f7ff ffe3 	bl	1d2f0 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   1d32a:	6823      	ldr	r3, [r4, #0]
   1d32c:	689b      	ldr	r3, [r3, #8]
   1d32e:	6858      	ldr	r0, [r3, #4]
}
   1d330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1d334:	f000 bddf 	b.w	1def6 <z_impl_k_busy_wait>
			if (!force_off &&
   1d338:	b912      	cbnz	r2, 1d340 <_spi_context_cs_control.isra.0+0x30>
   1d33a:	88aa      	ldrh	r2, [r5, #4]
   1d33c:	0492      	lsls	r2, r2, #18
   1d33e:	d40b      	bmi.n	1d358 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   1d340:	6858      	ldr	r0, [r3, #4]
   1d342:	f000 fdd8 	bl	1def6 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1d346:	6823      	ldr	r3, [r4, #0]
   1d348:	689b      	ldr	r3, [r3, #8]
   1d34a:	2200      	movs	r2, #0
   1d34c:	7a19      	ldrb	r1, [r3, #8]
   1d34e:	6818      	ldr	r0, [r3, #0]
}
   1d350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1d354:	f7ff bfcc 	b.w	1d2f0 <gpio_pin_set>
}
   1d358:	bd38      	pop	{r3, r4, r5, pc}

0001d35a <spi_context_unlock_unconditionally>:
{
   1d35a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1d35c:	2201      	movs	r2, #1
   1d35e:	2100      	movs	r1, #0
{
   1d360:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   1d362:	f7ff ffd5 	bl	1d310 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   1d366:	6923      	ldr	r3, [r4, #16]
   1d368:	b933      	cbnz	r3, 1d378 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1d36a:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1d36c:	f104 0008 	add.w	r0, r4, #8
}
   1d370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d374:	f7ee be0c 	b.w	bf90 <z_impl_k_sem_give>
   1d378:	bd10      	pop	{r4, pc}

0001d37a <spi_nrfx_release>:
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1d37a:	6900      	ldr	r0, [r0, #16]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1d37c:	6803      	ldr	r3, [r0, #0]
   1d37e:	428b      	cmp	r3, r1
{
   1d380:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1d382:	d106      	bne.n	1d392 <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   1d384:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   1d388:	b934      	cbnz	r4, 1d398 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1d38a:	f7ff ffe6 	bl	1d35a <spi_context_unlock_unconditionally>

	return 0;
   1d38e:	4620      	mov	r0, r4
}
   1d390:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d392:	f06f 0015 	mvn.w	r0, #21
   1d396:	e7fb      	b.n	1d390 <spi_nrfx_release+0x16>
		return -EBUSY;
   1d398:	f06f 000f 	mvn.w	r0, #15
   1d39c:	e7f8      	b.n	1d390 <spi_nrfx_release+0x16>

0001d39e <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   1d39e:	b510      	push	{r4, lr}
   1d3a0:	4604      	mov	r4, r0
   1d3a2:	2200      	movs	r2, #0
   1d3a4:	2101      	movs	r1, #1
   1d3a6:	2004      	movs	r0, #4
   1d3a8:	f7e9 f9a4 	bl	66f4 <z_arm_irq_priority_set>
   1d3ac:	6920      	ldr	r0, [r4, #16]
   1d3ae:	f7ff ffd4 	bl	1d35a <spi_context_unlock_unconditionally>
   1d3b2:	2000      	movs	r0, #0
   1d3b4:	bd10      	pop	{r4, pc}

0001d3b6 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d3b6:	2301      	movs	r3, #1
   1d3b8:	fa03 f101 	lsl.w	r1, r3, r1
   1d3bc:	6903      	ldr	r3, [r0, #16]
   1d3be:	681b      	ldr	r3, [r3, #0]
   1d3c0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1d3c2:	bf18      	it	ne
   1d3c4:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1d3c8:	b112      	cbz	r2, 1d3d0 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   1d3ca:	6883      	ldr	r3, [r0, #8]
   1d3cc:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1d3ce:	4718      	bx	r3
   1d3d0:	6883      	ldr	r3, [r0, #8]
   1d3d2:	691b      	ldr	r3, [r3, #16]
   1d3d4:	e7fb      	b.n	1d3ce <gpio_pin_set+0x18>

0001d3d6 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1d3d6:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1d3d8:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   1d3da:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   1d3dc:	b1fd      	cbz	r5, 1d41e <_spi_context_cs_control.isra.0+0x48>
   1d3de:	68ab      	ldr	r3, [r5, #8]
   1d3e0:	b1eb      	cbz	r3, 1d41e <_spi_context_cs_control.isra.0+0x48>
   1d3e2:	6818      	ldr	r0, [r3, #0]
   1d3e4:	b1d8      	cbz	r0, 1d41e <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   1d3e6:	b151      	cbz	r1, 1d3fe <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1d3e8:	7a19      	ldrb	r1, [r3, #8]
   1d3ea:	2201      	movs	r2, #1
   1d3ec:	f7ff ffe3 	bl	1d3b6 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   1d3f0:	6823      	ldr	r3, [r4, #0]
   1d3f2:	689b      	ldr	r3, [r3, #8]
   1d3f4:	6858      	ldr	r0, [r3, #4]
}
   1d3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1d3fa:	f000 bd7c 	b.w	1def6 <z_impl_k_busy_wait>
			if (!force_off &&
   1d3fe:	b912      	cbnz	r2, 1d406 <_spi_context_cs_control.isra.0+0x30>
   1d400:	88aa      	ldrh	r2, [r5, #4]
   1d402:	0492      	lsls	r2, r2, #18
   1d404:	d40b      	bmi.n	1d41e <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   1d406:	6858      	ldr	r0, [r3, #4]
   1d408:	f000 fd75 	bl	1def6 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1d40c:	6823      	ldr	r3, [r4, #0]
   1d40e:	689b      	ldr	r3, [r3, #8]
   1d410:	2200      	movs	r2, #0
   1d412:	7a19      	ldrb	r1, [r3, #8]
   1d414:	6818      	ldr	r0, [r3, #0]
}
   1d416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   1d41a:	f7ff bfcc 	b.w	1d3b6 <gpio_pin_set>
}
   1d41e:	bd38      	pop	{r3, r4, r5, pc}

0001d420 <spi_context_unlock_unconditionally>:
{
   1d420:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   1d422:	2201      	movs	r2, #1
   1d424:	2100      	movs	r1, #0
{
   1d426:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   1d428:	f7ff ffd5 	bl	1d3d6 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   1d42c:	6923      	ldr	r3, [r4, #16]
   1d42e:	b933      	cbnz	r3, 1d43e <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   1d430:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1d432:	f104 0008 	add.w	r0, r4, #8
}
   1d436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d43a:	f7ee bda9 	b.w	bf90 <z_impl_k_sem_give>
   1d43e:	bd10      	pop	{r4, pc}

0001d440 <spi_nrfx_release>:
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   1d440:	6900      	ldr	r0, [r0, #16]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1d442:	6803      	ldr	r3, [r0, #0]
   1d444:	428b      	cmp	r3, r1
{
   1d446:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   1d448:	d106      	bne.n	1d458 <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   1d44a:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   1d44e:	b934      	cbnz	r4, 1d45e <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   1d450:	f7ff ffe6 	bl	1d420 <spi_context_unlock_unconditionally>

	return 0;
   1d454:	4620      	mov	r0, r4
}
   1d456:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1d458:	f06f 0015 	mvn.w	r0, #21
   1d45c:	e7fb      	b.n	1d456 <spi_nrfx_release+0x16>
		return -EBUSY;
   1d45e:	f06f 000f 	mvn.w	r0, #15
   1d462:	e7f8      	b.n	1d456 <spi_nrfx_release+0x16>

0001d464 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   1d464:	b510      	push	{r4, lr}
   1d466:	4604      	mov	r4, r0
   1d468:	2200      	movs	r2, #0
   1d46a:	2101      	movs	r1, #1
   1d46c:	202f      	movs	r0, #47	; 0x2f
   1d46e:	f7e9 f941 	bl	66f4 <z_arm_irq_priority_set>
   1d472:	6920      	ldr	r0, [r4, #16]
   1d474:	f7ff ffd4 	bl	1d420 <spi_context_unlock_unconditionally>
   1d478:	2000      	movs	r0, #0
   1d47a:	bd10      	pop	{r4, pc}

0001d47c <timer_work_handler>:
	TimerIrqHandler();
   1d47c:	f7eb bc14 	b.w	8ca8 <TimerIrqHandler>

0001d480 <k_uptime_get>:
{
   1d480:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1d482:	f000 fd36 	bl	1def2 <z_impl_k_uptime_ticks>
   1d486:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d48a:	fba0 2304 	umull	r2, r3, r0, r4
   1d48e:	fb04 3301 	mla	r3, r4, r1, r3
   1d492:	0bd0      	lsrs	r0, r2, #15
}
   1d494:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1d498:	0bd9      	lsrs	r1, r3, #15
   1d49a:	bd10      	pop	{r4, pc}

0001d49c <RtcGetTimerValue>:
{
   1d49c:	b508      	push	{r3, lr}
	return (uint32_t)k_uptime_get();
   1d49e:	f7ff ffef 	bl	1d480 <k_uptime_get>
}
   1d4a2:	bd08      	pop	{r3, pc}

0001d4a4 <RtcGetMinimumTimeout>:
}
   1d4a4:	2001      	movs	r0, #1
   1d4a6:	4770      	bx	lr

0001d4a8 <DelayMsMcu>:

void DelayMsMcu(uint32_t ms)
{
   1d4a8:	b538      	push	{r3, r4, r5, lr}
   1d4aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d4ae:	f240 34e7 	movw	r4, #999	; 0x3e7
   1d4b2:	2500      	movs	r5, #0
   1d4b4:	fbe1 4500 	umlal	r4, r5, r1, r0
   1d4b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d4bc:	2300      	movs	r3, #0
   1d4be:	4620      	mov	r0, r4
   1d4c0:	4629      	mov	r1, r5
   1d4c2:	f7e3 faf9 	bl	ab8 <__aeabi_uldivmod>
	k_sleep(K_MSEC(ms));
}
   1d4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
   1d4ca:	f7ef b9c7 	b.w	c85c <z_impl_k_sleep>

0001d4ce <RtcMs2Tick>:

uint32_t RtcMs2Tick(uint32_t milliseconds)
{
	return milliseconds;
}
   1d4ce:	4770      	bx	lr

0001d4d0 <RtcTick2Ms>:
   1d4d0:	4770      	bx	lr

0001d4d2 <BoardCriticalSectionBegin>:
	__asm__ volatile(
   1d4d2:	f04f 0220 	mov.w	r2, #32
   1d4d6:	f3ef 8311 	mrs	r3, BASEPRI
   1d4da:	f382 8812 	msr	BASEPRI_MAX, r2
   1d4de:	f3bf 8f6f 	isb	sy
	return tick;
}

void BoardCriticalSectionBegin(uint32_t *mask)
{
	*mask = irq_lock();
   1d4e2:	6003      	str	r3, [r0, #0]
}
   1d4e4:	4770      	bx	lr

0001d4e6 <BoardCriticalSectionEnd>:
	__asm__ volatile(
   1d4e6:	6803      	ldr	r3, [r0, #0]
   1d4e8:	f383 8811 	msr	BASEPRI, r3
   1d4ec:	f3bf 8f6f 	isb	sy

void BoardCriticalSectionEnd(uint32_t *mask)
{
	irq_unlock(*mask);
}
   1d4f0:	4770      	bx	lr

0001d4f2 <SX1276CheckRfFrequency>:
}
   1d4f2:	2001      	movs	r0, #1
   1d4f4:	4770      	bx	lr

0001d4f6 <gpio_pin_set.constprop.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d4f6:	6903      	ldr	r3, [r0, #16]
   1d4f8:	681b      	ldr	r3, [r3, #0]
   1d4fa:	2b00      	cmp	r3, #0
		value = (value != 0) ? 0 : 1;
   1d4fc:	bfb8      	it	lt
   1d4fe:	f081 0101 	eorlt.w	r1, r1, #1
	if (value != 0)	{
   1d502:	b121      	cbz	r1, 1d50e <gpio_pin_set.constprop.0+0x18>
	return api->port_set_bits_raw(port, pins);
   1d504:	6883      	ldr	r3, [r0, #8]
   1d506:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1d508:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1d50c:	4718      	bx	r3
   1d50e:	6883      	ldr	r3, [r0, #8]
   1d510:	691b      	ldr	r3, [r3, #16]
   1d512:	e7f9      	b.n	1d508 <gpio_pin_set.constprop.0+0x12>

0001d514 <SX1276GetBoardTcxoWakeupTime>:
}
   1d514:	2000      	movs	r0, #0
   1d516:	4770      	bx	lr

0001d518 <SX1276SetAntSwLowPower>:
}
   1d518:	4770      	bx	lr

0001d51a <SX1276SetBoardTcxo>:
}
   1d51a:	4770      	bx	lr

0001d51c <SX1276SetAntSw>:
   1d51c:	4770      	bx	lr

0001d51e <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
   1d51e:	3801      	subs	r0, #1
   1d520:	440a      	add	r2, r1
   1d522:	4291      	cmp	r1, r2
   1d524:	d100      	bne.n	1d528 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
   1d526:	4770      	bx	lr
        *dst++ = *src++;
   1d528:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d52c:	f800 3f01 	strb.w	r3, [r0, #1]!
   1d530:	e7f7      	b.n	1d522 <memcpy1+0x4>

0001d532 <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
   1d532:	b570      	push	{r4, r5, r6, lr}
   1d534:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
   1d536:	f7ff ffb5 	bl	1d4a4 <RtcGetMinimumTimeout>
    obj->IsNext2Expire = true;
   1d53a:	2301      	movs	r3, #1
   1d53c:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   1d53e:	6826      	ldr	r6, [r4, #0]
    int32_t minTicks= RtcGetMinimumTimeout( );
   1d540:	4605      	mov	r5, r0
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
   1d542:	f7ea fe73 	bl	822c <RtcGetTimerElapsedTime>
   1d546:	4428      	add	r0, r5
   1d548:	4286      	cmp	r6, r0
   1d54a:	d203      	bcs.n	1d554 <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
   1d54c:	f7ea fe6e 	bl	822c <RtcGetTimerElapsedTime>
   1d550:	4405      	add	r5, r0
   1d552:	6025      	str	r5, [r4, #0]
    }
    RtcSetAlarm( obj->Timestamp );
   1d554:	6820      	ldr	r0, [r4, #0]
}
   1d556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    RtcSetAlarm( obj->Timestamp );
   1d55a:	f7ea be77 	b.w	824c <RtcSetAlarm>

0001d55e <TimerInit>:
    obj->Timestamp = 0;
   1d55e:	2300      	movs	r3, #0
    obj->ReloadValue = 0;
   1d560:	e9c0 3300 	strd	r3, r3, [r0]
    obj->Context = NULL;
   1d564:	e9c0 1303 	strd	r1, r3, [r0, #12]
    obj->IsStarted = false;
   1d568:	8103      	strh	r3, [r0, #8]
    obj->Next = NULL;
   1d56a:	6143      	str	r3, [r0, #20]
}
   1d56c:	4770      	bx	lr

0001d56e <TimerSetValue>:
{
   1d56e:	b538      	push	{r3, r4, r5, lr}
   1d570:	4605      	mov	r5, r0
    uint32_t ticks = RtcMs2Tick( value );
   1d572:	4608      	mov	r0, r1
   1d574:	f7ff ffab 	bl	1d4ce <RtcMs2Tick>
   1d578:	4604      	mov	r4, r0
    TimerStop( obj );
   1d57a:	4628      	mov	r0, r5
   1d57c:	f7eb fbd0 	bl	8d20 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
   1d580:	f7ff ff90 	bl	1d4a4 <RtcGetMinimumTimeout>
    if( ticks < minValue )
   1d584:	42a0      	cmp	r0, r4
   1d586:	bf38      	it	cc
   1d588:	4620      	movcc	r0, r4
    obj->ReloadValue = ticks;
   1d58a:	e9c5 0000 	strd	r0, r0, [r5]
}
   1d58e:	bd38      	pop	{r3, r4, r5, pc}

0001d590 <TimerGetCurrentTime>:
{
   1d590:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
   1d592:	f7ff ff83 	bl	1d49c <RtcGetTimerValue>
}
   1d596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return  RtcTick2Ms( now );
   1d59a:	f7ff bf99 	b.w	1d4d0 <RtcTick2Ms>

0001d59e <TimerGetElapsedTime>:
{
   1d59e:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
   1d5a0:	4604      	mov	r4, r0
   1d5a2:	b150      	cbz	r0, 1d5ba <TimerGetElapsedTime+0x1c>
    uint32_t nowInTicks = RtcGetTimerValue( );
   1d5a4:	f7ff ff7a 	bl	1d49c <RtcGetTimerValue>
   1d5a8:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
   1d5aa:	4620      	mov	r0, r4
   1d5ac:	f7ff ff8f 	bl	1d4ce <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
   1d5b0:	1a28      	subs	r0, r5, r0
}
   1d5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return RtcTick2Ms( nowInTicks - pastInTicks );
   1d5b6:	f7ff bf8b 	b.w	1d4d0 <RtcTick2Ms>
}
   1d5ba:	bd38      	pop	{r3, r4, r5, pc}

0001d5bc <DelayMs>:
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
    DelayMsMcu( ms );
   1d5bc:	f7ff bf74 	b.w	1d4a8 <DelayMsMcu>

0001d5c0 <SX1276Write>:
{
   1d5c0:	b507      	push	{r0, r1, r2, lr}
    SX1276WriteBuffer( addr, &data, 1 );
   1d5c2:	2201      	movs	r2, #1
{
   1d5c4:	f88d 1007 	strb.w	r1, [sp, #7]
    SX1276WriteBuffer( addr, &data, 1 );
   1d5c8:	f10d 0107 	add.w	r1, sp, #7
   1d5cc:	f7eb fa8c 	bl	8ae8 <SX1276WriteBuffer>
}
   1d5d0:	b003      	add	sp, #12
   1d5d2:	f85d fb04 	ldr.w	pc, [sp], #4

0001d5d6 <SX1276Read>:
{
   1d5d6:	b507      	push	{r0, r1, r2, lr}
    SX1276ReadBuffer( addr, &data, 1 );
   1d5d8:	2201      	movs	r2, #1
   1d5da:	f10d 0107 	add.w	r1, sp, #7
   1d5de:	f7eb f9bb 	bl	8958 <SX1276ReadBuffer>
}
   1d5e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d5e6:	b003      	add	sp, #12
   1d5e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d5ec <SX1276SetOpMode>:
{
   1d5ec:	b510      	push	{r4, lr}
    if( opMode == RF_OPMODE_SLEEP )
   1d5ee:	4604      	mov	r4, r0
        SX1276SetAntSwLowPower( true );
   1d5f0:	2001      	movs	r0, #1
    if( opMode == RF_OPMODE_SLEEP )
   1d5f2:	b964      	cbnz	r4, 1d60e <SX1276SetOpMode+0x22>
        SX1276SetAntSwLowPower( true );
   1d5f4:	f7ff ff90 	bl	1d518 <SX1276SetAntSwLowPower>
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   1d5f8:	2001      	movs	r0, #1
   1d5fa:	f7ff ffec 	bl	1d5d6 <SX1276Read>
   1d5fe:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   1d602:	4321      	orrs	r1, r4
   1d604:	2001      	movs	r0, #1
}
   1d606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
   1d60a:	f7ff bfd9 	b.w	1d5c0 <SX1276Write>
        SX1276SetBoardTcxo( true );
   1d60e:	f7ff ff84 	bl	1d51a <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
   1d612:	2000      	movs	r0, #0
   1d614:	f7ff ff80 	bl	1d518 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
   1d618:	4620      	mov	r0, r4
   1d61a:	f7ff ff7f 	bl	1d51c <SX1276SetAntSw>
   1d61e:	e7eb      	b.n	1d5f8 <SX1276SetOpMode+0xc>

0001d620 <SX1276IsChannelFree>:
{
   1d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d622:	4616      	mov	r6, r2
   1d624:	461d      	mov	r5, r3
   1d626:	460c      	mov	r4, r1
   1d628:	4607      	mov	r7, r0
    SX1276SetSleep( );
   1d62a:	f7eb ff0b 	bl	9444 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
   1d62e:	2000      	movs	r0, #0
   1d630:	f7ec f944 	bl	98bc <SX1276SetModem>
    SX1276SetChannel( freq );
   1d634:	4638      	mov	r0, r7
   1d636:	f7eb fc41 	bl	8ebc <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
   1d63a:	4620      	mov	r0, r4
   1d63c:	f7eb fb9c 	bl	8d78 <GetFskBandwidthRegValue>
   1d640:	4604      	mov	r4, r0
   1d642:	4601      	mov	r1, r0
   1d644:	2012      	movs	r0, #18
   1d646:	f7ff ffbb 	bl	1d5c0 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
   1d64a:	4621      	mov	r1, r4
   1d64c:	2013      	movs	r0, #19
   1d64e:	f7ff ffb7 	bl	1d5c0 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1d652:	2005      	movs	r0, #5
   1d654:	f7ff ffca 	bl	1d5ec <SX1276SetOpMode>
    DelayMs( 1 );
   1d658:	2001      	movs	r0, #1
   1d65a:	f7ff ffaf 	bl	1d5bc <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
   1d65e:	f7ff ff97 	bl	1d590 <TimerGetCurrentTime>
   1d662:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
   1d664:	4620      	mov	r0, r4
   1d666:	f7ff ff9a 	bl	1d59e <TimerGetElapsedTime>
   1d66a:	42a8      	cmp	r0, r5
   1d66c:	d304      	bcc.n	1d678 <SX1276IsChannelFree+0x58>
    bool status = true;
   1d66e:	2401      	movs	r4, #1
    SX1276SetSleep( );
   1d670:	f7eb fee8 	bl	9444 <SX1276SetSleep>
}
   1d674:	4620      	mov	r0, r4
   1d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
   1d678:	2000      	movs	r0, #0
   1d67a:	f7ec f8fb 	bl	9874 <SX1276ReadRssi>
        if( rssi > rssiThresh )
   1d67e:	42b0      	cmp	r0, r6
   1d680:	ddf0      	ble.n	1d664 <SX1276IsChannelFree+0x44>
            status = false;
   1d682:	2400      	movs	r4, #0
   1d684:	e7f4      	b.n	1d670 <SX1276IsChannelFree+0x50>

0001d686 <SX1276Random>:
{
   1d686:	b538      	push	{r3, r4, r5, lr}
    SX1276SetModem( MODEM_LORA );
   1d688:	2001      	movs	r0, #1
   1d68a:	f7ec f917 	bl	98bc <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
   1d68e:	21ff      	movs	r1, #255	; 0xff
   1d690:	2011      	movs	r0, #17
   1d692:	f7ff ff95 	bl	1d5c0 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
   1d696:	2005      	movs	r0, #5
   1d698:	f7ff ffa8 	bl	1d5ec <SX1276SetOpMode>
   1d69c:	2400      	movs	r4, #0
    uint32_t rnd = 0;
   1d69e:	4625      	mov	r5, r4
        DelayMs( 1 );
   1d6a0:	2001      	movs	r0, #1
   1d6a2:	f7ff ff8b 	bl	1d5bc <DelayMs>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   1d6a6:	202c      	movs	r0, #44	; 0x2c
   1d6a8:	f7ff ff95 	bl	1d5d6 <SX1276Read>
   1d6ac:	f000 0001 	and.w	r0, r0, #1
   1d6b0:	40a0      	lsls	r0, r4
   1d6b2:	3401      	adds	r4, #1
    for( i = 0; i < 32; i++ )
   1d6b4:	2c20      	cmp	r4, #32
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
   1d6b6:	ea45 0500 	orr.w	r5, r5, r0
    for( i = 0; i < 32; i++ )
   1d6ba:	d1f1      	bne.n	1d6a0 <SX1276Random+0x1a>
    SX1276SetSleep( );
   1d6bc:	f7eb fec2 	bl	9444 <SX1276SetSleep>
}
   1d6c0:	4628      	mov	r0, r5
   1d6c2:	bd38      	pop	{r3, r4, r5, pc}

0001d6c4 <SX1276GetWakeupTime>:
{
   1d6c4:	b508      	push	{r3, lr}
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
   1d6c6:	f7ff ff25 	bl	1d514 <SX1276GetBoardTcxoWakeupTime>
}
   1d6ca:	3001      	adds	r0, #1
   1d6cc:	bd08      	pop	{r3, pc}

0001d6ce <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1d6ce:	6843      	ldr	r3, [r0, #4]
   1d6d0:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1d6d2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d6d6:	05d1      	lsls	r1, r2, #23
{
   1d6d8:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d6da:	d518      	bpl.n	1d70e <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6dc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1d6e0:	b1aa      	cbz	r2, 1d70e <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1d6e2:	f04f 0120 	mov.w	r1, #32
   1d6e6:	f3ef 8211 	mrs	r2, BASEPRI
   1d6ea:	f381 8812 	msr	BASEPRI_MAX, r1
   1d6ee:	f3bf 8f6f 	isb	sy
   1d6f2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d6f6:	b131      	cbz	r1, 1d706 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6f8:	2100      	movs	r1, #0
   1d6fa:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d6fe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d702:	2101      	movs	r1, #1
   1d704:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d706:	f382 8811 	msr	BASEPRI, r2
   1d70a:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d70e:	6842      	ldr	r2, [r0, #4]
   1d710:	6852      	ldr	r2, [r2, #4]
   1d712:	06d2      	lsls	r2, r2, #27
   1d714:	d51a      	bpl.n	1d74c <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   1d716:	f04f 0220 	mov.w	r2, #32
   1d71a:	f3ef 8111 	mrs	r1, BASEPRI
   1d71e:	f382 8812 	msr	BASEPRI_MAX, r2
   1d722:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d726:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d72a:	b112      	cbz	r2, 1d732 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d72c:	2200      	movs	r2, #0
   1d72e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1d732:	6902      	ldr	r2, [r0, #16]
   1d734:	68d2      	ldr	r2, [r2, #12]
   1d736:	b10a      	cbz	r2, 1d73c <uarte_nrfx_isr_int+0x6e>
   1d738:	6912      	ldr	r2, [r2, #16]
   1d73a:	b91a      	cbnz	r2, 1d744 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   1d73c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1d740:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   1d744:	f381 8811 	msr	BASEPRI, r1
   1d748:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1d74c:	6902      	ldr	r2, [r0, #16]
   1d74e:	68d2      	ldr	r2, [r2, #12]
   1d750:	b15a      	cbz	r2, 1d76a <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d752:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d756:	b151      	cbz	r1, 1d76e <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   1d758:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1d75a:	2100      	movs	r1, #0
   1d75c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1d75e:	b134      	cbz	r4, 1d76e <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   1d760:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1d764:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1d768:	7391      	strb	r1, [r2, #14]
}
   1d76a:	bc10      	pop	{r4}
   1d76c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d76e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d772:	b121      	cbz	r1, 1d77e <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d774:	2100      	movs	r1, #0
   1d776:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1d77a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d77e:	6813      	ldr	r3, [r2, #0]
   1d780:	2b00      	cmp	r3, #0
   1d782:	d0f2      	beq.n	1d76a <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d784:	6851      	ldr	r1, [r2, #4]
}
   1d786:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d788:	4718      	bx	r3

0001d78a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1d78a:	6902      	ldr	r2, [r0, #16]
{
   1d78c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d78e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d792:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d796:	2000      	movs	r0, #0
   1d798:	4770      	bx	lr

0001d79a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d79a:	6843      	ldr	r3, [r0, #4]
   1d79c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d79e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d7a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d7a6:	4770      	bx	lr

0001d7a8 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1d7a8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1d7aa:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7ac:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d7b0:	b940      	cbnz	r0, 1d7c4 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1d7b2:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d7b4:	0712      	lsls	r2, r2, #28
   1d7b6:	d406      	bmi.n	1d7c6 <is_tx_ready+0x1e>
   1d7b8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1d7bc:	3800      	subs	r0, #0
   1d7be:	bf18      	it	ne
   1d7c0:	2001      	movne	r0, #1
   1d7c2:	4770      	bx	lr
   1d7c4:	2001      	movs	r0, #1
}
   1d7c6:	4770      	bx	lr

0001d7c8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d7c8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1d7ca:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1d7cc:	681b      	ldr	r3, [r3, #0]
   1d7ce:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d7d2:	b148      	cbz	r0, 1d7e8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1d7d4:	7d52      	ldrb	r2, [r2, #21]
   1d7d6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d7d8:	2000      	movs	r0, #0
   1d7da:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d7de:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d7e2:	2201      	movs	r2, #1
   1d7e4:	601a      	str	r2, [r3, #0]
	return 0;
   1d7e6:	4770      	bx	lr
		return -1;
   1d7e8:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d7ec:	4770      	bx	lr

0001d7ee <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d7ee:	2a00      	cmp	r2, #0
{
   1d7f0:	b510      	push	{r4, lr}
   1d7f2:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d7f4:	dd0f      	ble.n	1d816 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   1d7f6:	6843      	ldr	r3, [r0, #4]
   1d7f8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7fa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d7fe:	b148      	cbz	r0, 1d814 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1d800:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d802:	2000      	movs	r0, #0
   1d804:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d808:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1d80c:	7d52      	ldrb	r2, [r2, #21]
   1d80e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d810:	2001      	movs	r0, #1
   1d812:	6018      	str	r0, [r3, #0]
}
   1d814:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   1d816:	2000      	movs	r0, #0
   1d818:	e7fc      	b.n	1d814 <uarte_nrfx_fifo_read+0x26>

0001d81a <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1d81a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d81c:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   1d81e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1d820:	f04f 0020 	mov.w	r0, #32
   1d824:	f3ef 8311 	mrs	r3, BASEPRI
   1d828:	f380 8812 	msr	BASEPRI_MAX, r0
   1d82c:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1d830:	68c9      	ldr	r1, [r1, #12]
   1d832:	2000      	movs	r0, #0
   1d834:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1d836:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d83a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1d83e:	f383 8811 	msr	BASEPRI, r3
   1d842:	f3bf 8f6f 	isb	sy
}
   1d846:	4770      	bx	lr

0001d848 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1d848:	6903      	ldr	r3, [r0, #16]
   1d84a:	68db      	ldr	r3, [r3, #12]
   1d84c:	2201      	movs	r2, #1
   1d84e:	739a      	strb	r2, [r3, #14]
}
   1d850:	4770      	bx	lr

0001d852 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1d852:	6903      	ldr	r3, [r0, #16]
   1d854:	68db      	ldr	r3, [r3, #12]
   1d856:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d858:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1d85c:	b962      	cbnz	r2, 1d878 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1d85e:	6842      	ldr	r2, [r0, #4]
   1d860:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d862:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1d866:	b140      	cbz	r0, 1d87a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1d868:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1d86c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1d870:	d003      	beq.n	1d87a <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   1d872:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d874:	2001      	movs	r0, #1
   1d876:	4770      	bx	lr
   1d878:	2000      	movs	r0, #0
}
   1d87a:	4770      	bx	lr

0001d87c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1d87c:	6843      	ldr	r3, [r0, #4]
   1d87e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d880:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1d884:	3800      	subs	r0, #0
   1d886:	bf18      	it	ne
   1d888:	2001      	movne	r0, #1
   1d88a:	4770      	bx	lr

0001d88c <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   1d88c:	6843      	ldr	r3, [r0, #4]
   1d88e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1d890:	2210      	movs	r2, #16
   1d892:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d896:	4770      	bx	lr

0001d898 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   1d898:	6843      	ldr	r3, [r0, #4]
   1d89a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1d89c:	2210      	movs	r2, #16
   1d89e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d8a2:	4770      	bx	lr

0001d8a4 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   1d8a4:	6843      	ldr	r3, [r0, #4]
   1d8a6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1d8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d8ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d8b0:	4770      	bx	lr

0001d8b2 <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   1d8b2:	6843      	ldr	r3, [r0, #4]
   1d8b4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1d8b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   1d8ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d8be:	4770      	bx	lr

0001d8c0 <uarte_nrfx_irq_update>:
}
   1d8c0:	2001      	movs	r0, #1
   1d8c2:	4770      	bx	lr

0001d8c4 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1d8c4:	6903      	ldr	r3, [r0, #16]
   1d8c6:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1d8c8:	e9c3 1200 	strd	r1, r2, [r3]
}
   1d8cc:	4770      	bx	lr

0001d8ce <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1d8ce:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   1d8d0:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d8d2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d8d6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d8da:	2200      	movs	r2, #0
   1d8dc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1d8e0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1d8e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1d8e8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d8ec:	6842      	ldr	r2, [r0, #4]
   1d8ee:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d8f0:	bf41      	itttt	mi
   1d8f2:	2208      	movmi	r2, #8
   1d8f4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1d8f8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1d8fc:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d900:	2201      	movs	r2, #1
   1d902:	609a      	str	r2, [r3, #8]
}
   1d904:	4770      	bx	lr

0001d906 <uarte_nrfx_fifo_fill>:
{
   1d906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1d908:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   1d90a:	68f3      	ldr	r3, [r6, #12]
   1d90c:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d90e:	f3bf 8f5b 	dmb	ish
   1d912:	4294      	cmp	r4, r2
   1d914:	bfa8      	it	ge
   1d916:	4614      	movge	r4, r2
{
   1d918:	4605      	mov	r5, r0
   1d91a:	3310      	adds	r3, #16
   1d91c:	2201      	movs	r2, #1
   1d91e:	e853 0f00 	ldrex	r0, [r3]
   1d922:	2800      	cmp	r0, #0
   1d924:	d103      	bne.n	1d92e <uarte_nrfx_fifo_fill+0x28>
   1d926:	e843 2700 	strex	r7, r2, [r3]
   1d92a:	2f00      	cmp	r7, #0
   1d92c:	d1f7      	bne.n	1d91e <uarte_nrfx_fifo_fill+0x18>
   1d92e:	f3bf 8f5b 	dmb	ish
   1d932:	bf0c      	ite	eq
   1d934:	4613      	moveq	r3, r2
   1d936:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1d938:	d01d      	beq.n	1d976 <uarte_nrfx_fifo_fill+0x70>
		return 0;
   1d93a:	461c      	mov	r4, r3
}
   1d93c:	4620      	mov	r0, r4
   1d93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d940:	68f2      	ldr	r2, [r6, #12]
   1d942:	5cc8      	ldrb	r0, [r1, r3]
   1d944:	6892      	ldr	r2, [r2, #8]
   1d946:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   1d948:	3301      	adds	r3, #1
   1d94a:	42a3      	cmp	r3, r4
   1d94c:	dbf8      	blt.n	1d940 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   1d94e:	f04f 0320 	mov.w	r3, #32
   1d952:	f3ef 8711 	mrs	r7, BASEPRI
   1d956:	f383 8812 	msr	BASEPRI_MAX, r3
   1d95a:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1d95e:	4628      	mov	r0, r5
   1d960:	f7ff ff22 	bl	1d7a8 <is_tx_ready>
   1d964:	68f3      	ldr	r3, [r6, #12]
   1d966:	b940      	cbnz	r0, 1d97a <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   1d968:	6118      	str	r0, [r3, #16]
		len = 0;
   1d96a:	4604      	mov	r4, r0
	__asm__ volatile(
   1d96c:	f387 8811 	msr	BASEPRI, r7
   1d970:	f3bf 8f6f 	isb	sy
	return len;
   1d974:	e7e2      	b.n	1d93c <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   1d976:	2300      	movs	r3, #0
   1d978:	e7e7      	b.n	1d94a <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   1d97a:	6899      	ldr	r1, [r3, #8]
   1d97c:	4622      	mov	r2, r4
   1d97e:	4628      	mov	r0, r5
   1d980:	f7ff ffa5 	bl	1d8ce <tx_start>
   1d984:	e7f2      	b.n	1d96c <uarte_nrfx_fifo_fill+0x66>

0001d986 <uarte_nrfx_irq_is_pending>:
{
   1d986:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1d988:	6843      	ldr	r3, [r0, #4]
   1d98a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1d98c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1d990:	025b      	lsls	r3, r3, #9
{
   1d992:	4604      	mov	r4, r0
		||
   1d994:	d405      	bmi.n	1d9a2 <uarte_nrfx_irq_is_pending+0x1c>
   1d996:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1d99a:	f010 0010 	ands.w	r0, r0, #16
   1d99e:	d106      	bne.n	1d9ae <uarte_nrfx_irq_is_pending+0x28>
}
   1d9a0:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d9a2:	f7ff ff56 	bl	1d852 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1d9a6:	2800      	cmp	r0, #0
   1d9a8:	d0f5      	beq.n	1d996 <uarte_nrfx_irq_is_pending+0x10>
		||
   1d9aa:	2001      	movs	r0, #1
   1d9ac:	e7f8      	b.n	1d9a0 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d9ae:	4620      	mov	r0, r4
   1d9b0:	f7ff ff64 	bl	1d87c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d9b4:	3800      	subs	r0, #0
   1d9b6:	bf18      	it	ne
   1d9b8:	2001      	movne	r0, #1
   1d9ba:	e7f1      	b.n	1d9a0 <uarte_nrfx_irq_is_pending+0x1a>

0001d9bc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d9bc:	b510      	push	{r4, lr}
   1d9be:	2200      	movs	r2, #0
   1d9c0:	4604      	mov	r4, r0
   1d9c2:	2101      	movs	r1, #1
   1d9c4:	2002      	movs	r0, #2
   1d9c6:	f7e8 fe95 	bl	66f4 <z_arm_irq_priority_set>
   1d9ca:	2002      	movs	r0, #2
   1d9cc:	f7e8 fe60 	bl	6690 <arch_irq_enable>
   1d9d0:	4620      	mov	r0, r4
   1d9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d9d6:	f7ec bc61 	b.w	a29c <uarte_instance_init.isra.0>

0001d9da <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1d9da:	b510      	push	{r4, lr}
   1d9dc:	2200      	movs	r2, #0
   1d9de:	4604      	mov	r4, r0
   1d9e0:	2101      	movs	r1, #1
   1d9e2:	2028      	movs	r0, #40	; 0x28
   1d9e4:	f7e8 fe86 	bl	66f4 <z_arm_irq_priority_set>
   1d9e8:	2028      	movs	r0, #40	; 0x28
   1d9ea:	f7e8 fe51 	bl	6690 <arch_irq_enable>
   1d9ee:	4620      	mov	r0, r4
   1d9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d9f4:	f7ec bc52 	b.w	a29c <uarte_instance_init.isra.0>

0001d9f8 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1d9f8:	4770      	bx	lr

0001d9fa <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d9fa:	4770      	bx	lr

0001d9fc <sys_clock_disable>:
   1d9fc:	4770      	bx	lr

0001d9fe <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   1d9fe:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1da00:	f7ec fd74 	bl	a4ec <z_nrf_rtc_timer_read>
}
   1da04:	bd08      	pop	{r3, pc}

0001da06 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1da06:	f7ef ba8d 	b.w	cf24 <nrf_cc3xx_platform_init_no_rng>

0001da0a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1da0a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1da0c:	f7e8 fd20 	bl	6450 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1da10:	f7e8 fdd2 	bl	65b8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   1da14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   1da18:	f7ef ba84 	b.w	cf24 <nrf_cc3xx_platform_init_no_rng>

0001da1c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1da1c:	4700      	bx	r0

0001da1e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1da1e:	f000 ba6a 	b.w	1def6 <z_impl_k_busy_wait>

0001da22 <nrfx_clock_enable>:
{
   1da22:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1da24:	2000      	movs	r0, #0
   1da26:	f7e8 fe57 	bl	66d8 <arch_irq_is_enabled>
   1da2a:	b918      	cbnz	r0, 1da34 <nrfx_clock_enable+0x12>
}
   1da2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1da30:	f7e8 be2e 	b.w	6690 <arch_irq_enable>
   1da34:	bd08      	pop	{r3, pc}

0001da36 <nrfx_gpiote_out_init>:
    nrfx_err_t err_code = gpiote_out_init(pin, p_config, false, 0);
   1da36:	2300      	movs	r3, #0
   1da38:	461a      	mov	r2, r3
   1da3a:	f7ed ba25 	b.w	ae88 <gpiote_out_init>

0001da3e <nrf_gpio_cfg_default>:
{
   1da3e:	b507      	push	{r0, r1, r2, lr}
   1da40:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1da42:	a801      	add	r0, sp, #4
   1da44:	f7ed fb18 	bl	b078 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1da48:	9b01      	ldr	r3, [sp, #4]
   1da4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1da4e:	2202      	movs	r2, #2
   1da50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   1da54:	b003      	add	sp, #12
   1da56:	f85d fb04 	ldr.w	pc, [sp], #4

0001da5a <nrf_gpio_pin_set>:
{
   1da5a:	b507      	push	{r0, r1, r2, lr}
   1da5c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1da5e:	a801      	add	r0, sp, #4
   1da60:	f7ed fb0a 	bl	b078 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1da64:	9a01      	ldr	r2, [sp, #4]
   1da66:	2301      	movs	r3, #1
   1da68:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1da6a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   1da6e:	b003      	add	sp, #12
   1da70:	f85d fb04 	ldr.w	pc, [sp], #4

0001da74 <nrf_gpio_pin_clear>:
{
   1da74:	b507      	push	{r0, r1, r2, lr}
   1da76:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1da78:	a801      	add	r0, sp, #4
   1da7a:	f7ed fafd 	bl	b078 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1da7e:	9a01      	ldr	r2, [sp, #4]
   1da80:	2301      	movs	r3, #1
   1da82:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1da84:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   1da88:	b003      	add	sp, #12
   1da8a:	f85d fb04 	ldr.w	pc, [sp], #4

0001da8e <transfer_byte>:
{
   1da8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   1da90:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1da94:	698a      	ldr	r2, [r1, #24]
   1da96:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   1da98:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1da9c:	6a0b      	ldr	r3, [r1, #32]
   1da9e:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1daa0:	bf3e      	ittt	cc
   1daa2:	694a      	ldrcc	r2, [r1, #20]
   1daa4:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   1daa8:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   1daaa:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   1daac:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   1dab0:	1c53      	adds	r3, r2, #1
   1dab2:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   1dab4:	3202      	adds	r2, #2
    if (p_cb->abort)
   1dab6:	b13c      	cbz	r4, 1dac8 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1dab8:	690c      	ldr	r4, [r1, #16]
   1daba:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1dabc:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   1dabe:	bf38      	it	cc
   1dac0:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1dac2:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   1dac4:	bf88      	it	hi
   1dac6:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1dac8:	690d      	ldr	r5, [r1, #16]
   1daca:	4295      	cmp	r5, r2
   1dacc:	d905      	bls.n	1dada <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   1dace:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   1dad0:	5c9b      	ldrb	r3, [r3, r2]
   1dad2:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1dad6:	2001      	movs	r0, #1
   1dad8:	e00a      	b.n	1daf0 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1dada:	698c      	ldr	r4, [r1, #24]
   1dadc:	4294      	cmp	r4, r2
   1dade:	d901      	bls.n	1dae4 <transfer_byte+0x56>
   1dae0:	7fcb      	ldrb	r3, [r1, #31]
   1dae2:	e7f6      	b.n	1dad2 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   1dae4:	42ab      	cmp	r3, r5
   1dae6:	d3f6      	bcc.n	1dad6 <transfer_byte+0x48>
   1dae8:	42a3      	cmp	r3, r4
   1daea:	bf2c      	ite	cs
   1daec:	2000      	movcs	r0, #0
   1daee:	2001      	movcc	r0, #1
}
   1daf0:	b003      	add	sp, #12
   1daf2:	bd30      	pop	{r4, r5, pc}

0001daf4 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   1daf4:	1c43      	adds	r3, r0, #1
   1daf6:	d001      	beq.n	1dafc <spim_pin_uninit+0x8>
    nrf_gpio_cfg_default(pin);
   1daf8:	f7ed bc4e 	b.w	b398 <nrf_gpio_cfg_default>
}
   1dafc:	4770      	bx	lr

0001dafe <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1dafe:	f7ed be6b 	b.w	b7d8 <_DoInit>

0001db02 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1db02:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1db04:	f7ff fffb 	bl	1dafe <SEGGER_RTT_Init>

	return 0;
}
   1db08:	2000      	movs	r0, #0
   1db0a:	bd08      	pop	{r3, pc}

0001db0c <z_device_state_init>:
}
   1db0c:	4770      	bx	lr

0001db0e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1db0e:	b138      	cbz	r0, 1db20 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1db10:	68c3      	ldr	r3, [r0, #12]
   1db12:	8818      	ldrh	r0, [r3, #0]
   1db14:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1db18:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1db1c:	4258      	negs	r0, r3
   1db1e:	4158      	adcs	r0, r3
}
   1db20:	4770      	bx	lr

0001db22 <k_mem_slab_init>:
{
   1db22:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1db24:	2400      	movs	r4, #0
   1db26:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1db28:	ea41 0402 	orr.w	r4, r1, r2
   1db2c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1db30:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1db34:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1db36:	d10c      	bne.n	1db52 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1db38:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1db3a:	42a3      	cmp	r3, r4
   1db3c:	d103      	bne.n	1db46 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   1db3e:	e9c0 0000 	strd	r0, r0, [r0]
}
   1db42:	2000      	movs	r0, #0
}
   1db44:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1db46:	6945      	ldr	r5, [r0, #20]
   1db48:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1db4a:	3401      	adds	r4, #1
		slab->free_list = p;
   1db4c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1db4e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1db50:	e7f3      	b.n	1db3a <k_mem_slab_init+0x18>
		return -EINVAL;
   1db52:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1db56:	e7f5      	b.n	1db44 <k_mem_slab_init+0x22>

0001db58 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db5a:	4604      	mov	r4, r0
   1db5c:	460d      	mov	r5, r1
	__asm__ volatile(
   1db5e:	f04f 0320 	mov.w	r3, #32
   1db62:	f3ef 8611 	mrs	r6, BASEPRI
   1db66:	f383 8812 	msr	BASEPRI_MAX, r3
   1db6a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1db6e:	6947      	ldr	r7, [r0, #20]
   1db70:	b977      	cbnz	r7, 1db90 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1db72:	f000 f945 	bl	1de00 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1db76:	b158      	cbz	r0, 1db90 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1db78:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1db7a:	6142      	str	r2, [r0, #20]
   1db7c:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1db7e:	f000 f8cb 	bl	1dd18 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1db82:	4631      	mov	r1, r6
   1db84:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1db88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1db8c:	f7ee bbc4 	b.w	c318 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1db90:	682b      	ldr	r3, [r5, #0]
   1db92:	6962      	ldr	r2, [r4, #20]
   1db94:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1db96:	682b      	ldr	r3, [r5, #0]
   1db98:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1db9a:	69a3      	ldr	r3, [r4, #24]
   1db9c:	3b01      	subs	r3, #1
   1db9e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1dba0:	f386 8811 	msr	BASEPRI, r6
   1dba4:	f3bf 8f6f 	isb	sy
}
   1dba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dbaa <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1dbaa:	f3ef 8005 	mrs	r0, IPSR
}
   1dbae:	3800      	subs	r0, #0
   1dbb0:	bf18      	it	ne
   1dbb2:	2001      	movne	r0, #1
   1dbb4:	4770      	bx	lr

0001dbb6 <z_impl_k_thread_name_set>:
}
   1dbb6:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1dbba:	4770      	bx	lr

0001dbbc <k_thread_name_get>:
}
   1dbbc:	2000      	movs	r0, #0
   1dbbe:	4770      	bx	lr

0001dbc0 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1dbc0:	f7ee bca8 	b.w	c514 <z_sched_start>

0001dbc4 <z_pm_save_idle_exit>:
{
   1dbc4:	b508      	push	{r3, lr}
	pm_system_resume();
   1dbc6:	f7e8 fbd9 	bl	637c <pm_system_resume>
}
   1dbca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1dbce:	f7ff bf14 	b.w	1d9fa <sys_clock_idle_exit>

0001dbd2 <z_impl_k_mutex_init>:
{
   1dbd2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1dbd4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   1dbd6:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1dbda:	e9c3 3300 	strd	r3, r3, [r3]
}
   1dbde:	4770      	bx	lr

0001dbe0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1dbe0:	b15a      	cbz	r2, 1dbfa <z_impl_k_sem_init+0x1a>
   1dbe2:	428a      	cmp	r2, r1
   1dbe4:	d309      	bcc.n	1dbfa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1dbe6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1dbea:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1dbee:	e9c0 0000 	strd	r0, r0, [r0]
   1dbf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1dbf6:	2000      	movs	r0, #0
   1dbf8:	4770      	bx	lr
		return -EINVAL;
   1dbfa:	f06f 0015 	mvn.w	r0, #21
}
   1dbfe:	4770      	bx	lr

0001dc00 <notify_queue_locked>:
	if (queue != NULL) {
   1dc00:	b120      	cbz	r0, 1dc0c <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1dc02:	2200      	movs	r2, #0
   1dc04:	4611      	mov	r1, r2
   1dc06:	3088      	adds	r0, #136	; 0x88
   1dc08:	f000 b912 	b.w	1de30 <z_sched_wake>
}
   1dc0c:	4770      	bx	lr

0001dc0e <k_work_init>:
{
   1dc0e:	b538      	push	{r3, r4, r5, lr}
   1dc10:	4604      	mov	r4, r0
   1dc12:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1dc14:	2210      	movs	r2, #16
   1dc16:	2100      	movs	r1, #0
   1dc18:	f000 fb2e 	bl	1e278 <memset>
   1dc1c:	6065      	str	r5, [r4, #4]
}
   1dc1e:	bd38      	pop	{r3, r4, r5, pc}

0001dc20 <k_work_submit_to_queue>:
{
   1dc20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dc22:	9001      	str	r0, [sp, #4]
   1dc24:	4608      	mov	r0, r1
	__asm__ volatile(
   1dc26:	f04f 0320 	mov.w	r3, #32
   1dc2a:	f3ef 8511 	mrs	r5, BASEPRI
   1dc2e:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc32:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1dc36:	a901      	add	r1, sp, #4
   1dc38:	f7ee fa98 	bl	c16c <submit_to_queue_locked>
   1dc3c:	4604      	mov	r4, r0
	__asm__ volatile(
   1dc3e:	f385 8811 	msr	BASEPRI, r5
   1dc42:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1dc46:	2800      	cmp	r0, #0
   1dc48:	dd04      	ble.n	1dc54 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1dc4a:	f7ee fe27 	bl	c89c <z_impl_k_is_preempt_thread>
   1dc4e:	b108      	cbz	r0, 1dc54 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1dc50:	f7ee fd76 	bl	c740 <z_impl_k_yield>
}
   1dc54:	4620      	mov	r0, r4
   1dc56:	b003      	add	sp, #12
   1dc58:	bd30      	pop	{r4, r5, pc}

0001dc5a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1dc5a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1dc5e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1dc60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1dc62:	2300      	movs	r3, #0
	node->prev = NULL;
   1dc64:	e9c0 3300 	strd	r3, r3, [r0]
}
   1dc68:	4770      	bx	lr

0001dc6a <unpend_thread_no_timeout>:
{
   1dc6a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1dc6c:	f7ff fff5 	bl	1dc5a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dc70:	7b43      	ldrb	r3, [r0, #13]
   1dc72:	f023 0302 	bic.w	r3, r3, #2
   1dc76:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1dc78:	2300      	movs	r3, #0
   1dc7a:	6083      	str	r3, [r0, #8]
}
   1dc7c:	bd08      	pop	{r3, pc}

0001dc7e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1dc7e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1dc82:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1dc86:	4283      	cmp	r3, r0
		return b2 - b1;
   1dc88:	bf14      	ite	ne
   1dc8a:	1ac0      	subne	r0, r0, r3
	return 0;
   1dc8c:	2000      	moveq	r0, #0
}
   1dc8e:	4770      	bx	lr

0001dc90 <z_unpend_thread_no_timeout>:
{
   1dc90:	b508      	push	{r3, lr}
	__asm__ volatile(
   1dc92:	f04f 0320 	mov.w	r3, #32
   1dc96:	f3ef 8111 	mrs	r1, BASEPRI
   1dc9a:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc9e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1dca2:	f7ff ffe2 	bl	1dc6a <unpend_thread_no_timeout>
	__asm__ volatile(
   1dca6:	f381 8811 	msr	BASEPRI, r1
   1dcaa:	f3bf 8f6f 	isb	sy
}
   1dcae:	bd08      	pop	{r3, pc}

0001dcb0 <z_unpend_thread>:
{
   1dcb0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1dcb2:	f04f 0320 	mov.w	r3, #32
   1dcb6:	f3ef 8411 	mrs	r4, BASEPRI
   1dcba:	f383 8812 	msr	BASEPRI_MAX, r3
   1dcbe:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1dcc2:	f7ff ffd2 	bl	1dc6a <unpend_thread_no_timeout>
	__asm__ volatile(
   1dcc6:	f384 8811 	msr	BASEPRI, r4
   1dcca:	f3bf 8f6f 	isb	sy
}
   1dcce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1dcd2:	3018      	adds	r0, #24
   1dcd4:	f000 b8c9 	b.w	1de6a <z_abort_timeout>

0001dcd8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1dcd8:	4603      	mov	r3, r0
   1dcda:	b920      	cbnz	r0, 1dce6 <z_reschedule_irqlock+0xe>
   1dcdc:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1dce0:	b90a      	cbnz	r2, 1dce6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1dce2:	f7e8 bd3f 	b.w	6764 <arch_swap>
   1dce6:	f383 8811 	msr	BASEPRI, r3
   1dcea:	f3bf 8f6f 	isb	sy
}
   1dcee:	4770      	bx	lr

0001dcf0 <z_reschedule_unlocked>:
	__asm__ volatile(
   1dcf0:	f04f 0320 	mov.w	r3, #32
   1dcf4:	f3ef 8011 	mrs	r0, BASEPRI
   1dcf8:	f383 8812 	msr	BASEPRI_MAX, r3
   1dcfc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1dd00:	f7ff bfea 	b.w	1dcd8 <z_reschedule_irqlock>

0001dd04 <z_priq_dumb_best>:
{
   1dd04:	4603      	mov	r3, r0
	return list->head == list;
   1dd06:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dd08:	4283      	cmp	r3, r0
   1dd0a:	d003      	beq.n	1dd14 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1dd0c:	2800      	cmp	r0, #0
   1dd0e:	bf38      	it	cc
   1dd10:	2000      	movcc	r0, #0
   1dd12:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1dd14:	2000      	movs	r0, #0
}
   1dd16:	4770      	bx	lr

0001dd18 <z_ready_thread>:
{
   1dd18:	b510      	push	{r4, lr}
   1dd1a:	f04f 0320 	mov.w	r3, #32
   1dd1e:	f3ef 8411 	mrs	r4, BASEPRI
   1dd22:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd26:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1dd2a:	f7ee fbbb 	bl	c4a4 <ready_thread>
	__asm__ volatile(
   1dd2e:	f384 8811 	msr	BASEPRI, r4
   1dd32:	f3bf 8f6f 	isb	sy
}
   1dd36:	bd10      	pop	{r4, pc}

0001dd38 <z_thread_timeout>:
{
   1dd38:	b510      	push	{r4, lr}
   1dd3a:	4601      	mov	r1, r0
	__asm__ volatile(
   1dd3c:	f04f 0320 	mov.w	r3, #32
   1dd40:	f3ef 8411 	mrs	r4, BASEPRI
   1dd44:	f383 8812 	msr	BASEPRI_MAX, r3
   1dd48:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1dd4c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1dd50:	f013 0f28 	tst.w	r3, #40	; 0x28
   1dd54:	d10d      	bne.n	1dd72 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1dd56:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1dd5a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1dd5c:	b10b      	cbz	r3, 1dd62 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1dd5e:	f7ff ff84 	bl	1dc6a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1dd62:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1dd66:	f023 0314 	bic.w	r3, r3, #20
   1dd6a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1dd6e:	f7ee fb99 	bl	c4a4 <ready_thread>
	__asm__ volatile(
   1dd72:	f384 8811 	msr	BASEPRI, r4
   1dd76:	f3bf 8f6f 	isb	sy
}
   1dd7a:	bd10      	pop	{r4, pc}

0001dd7c <add_to_waitq_locked>:
{
   1dd7c:	b538      	push	{r3, r4, r5, lr}
   1dd7e:	4604      	mov	r4, r0
   1dd80:	460d      	mov	r5, r1
	unready_thread(thread);
   1dd82:	f7ee fbe5 	bl	c550 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1dd86:	7b63      	ldrb	r3, [r4, #13]
   1dd88:	f043 0302 	orr.w	r3, r3, #2
   1dd8c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1dd8e:	b1b5      	cbz	r5, 1ddbe <add_to_waitq_locked+0x42>
	return list->head == list;
   1dd90:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1dd92:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dd94:	429d      	cmp	r5, r3
   1dd96:	bf08      	it	eq
   1dd98:	2300      	moveq	r3, #0
   1dd9a:	2b00      	cmp	r3, #0
   1dd9c:	bf38      	it	cc
   1dd9e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dda0:	b19b      	cbz	r3, 1ddca <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   1dda2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1dda6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1ddaa:	4291      	cmp	r1, r2
   1ddac:	d008      	beq.n	1ddc0 <add_to_waitq_locked+0x44>
		return b2 - b1;
   1ddae:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ddb0:	2a00      	cmp	r2, #0
   1ddb2:	dd05      	ble.n	1ddc0 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   1ddb4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ddb6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1ddba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ddbc:	605c      	str	r4, [r3, #4]
}
   1ddbe:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1ddc0:	686a      	ldr	r2, [r5, #4]
   1ddc2:	4293      	cmp	r3, r2
   1ddc4:	d001      	beq.n	1ddca <add_to_waitq_locked+0x4e>
   1ddc6:	681b      	ldr	r3, [r3, #0]
   1ddc8:	e7ea      	b.n	1dda0 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   1ddca:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1ddcc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1ddd0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ddd2:	606c      	str	r4, [r5, #4]
   1ddd4:	e7f3      	b.n	1ddbe <add_to_waitq_locked+0x42>

0001ddd6 <z_unpend1_no_timeout>:
{
   1ddd6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ddd8:	f04f 0320 	mov.w	r3, #32
   1dddc:	f3ef 8411 	mrs	r4, BASEPRI
   1dde0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dde4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1dde8:	f7ff ff8c 	bl	1dd04 <z_priq_dumb_best>
		if (thread != NULL) {
   1ddec:	4601      	mov	r1, r0
   1ddee:	b108      	cbz	r0, 1ddf4 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   1ddf0:	f7ff ff3b 	bl	1dc6a <unpend_thread_no_timeout>
	__asm__ volatile(
   1ddf4:	f384 8811 	msr	BASEPRI, r4
   1ddf8:	f3bf 8f6f 	isb	sy
}
   1ddfc:	4608      	mov	r0, r1
   1ddfe:	bd10      	pop	{r4, pc}

0001de00 <z_unpend_first_thread>:
{
   1de00:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1de02:	f04f 0320 	mov.w	r3, #32
   1de06:	f3ef 8511 	mrs	r5, BASEPRI
   1de0a:	f383 8812 	msr	BASEPRI_MAX, r3
   1de0e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1de12:	f7ff ff77 	bl	1dd04 <z_priq_dumb_best>
		if (thread != NULL) {
   1de16:	4604      	mov	r4, r0
   1de18:	b120      	cbz	r0, 1de24 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1de1a:	f7ff ff26 	bl	1dc6a <unpend_thread_no_timeout>
   1de1e:	3018      	adds	r0, #24
   1de20:	f000 f823 	bl	1de6a <z_abort_timeout>
	__asm__ volatile(
   1de24:	f385 8811 	msr	BASEPRI, r5
   1de28:	f3bf 8f6f 	isb	sy
}
   1de2c:	4620      	mov	r0, r4
   1de2e:	bd38      	pop	{r3, r4, r5, pc}

0001de30 <z_sched_wake>:
{
   1de30:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1de32:	f04f 0320 	mov.w	r3, #32
   1de36:	f3ef 8511 	mrs	r5, BASEPRI
   1de3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1de3e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1de42:	f7ff ff5f 	bl	1dd04 <z_priq_dumb_best>
		if (thread != NULL) {
   1de46:	4604      	mov	r4, r0
   1de48:	b150      	cbz	r0, 1de60 <z_sched_wake+0x30>
   1de4a:	67c1      	str	r1, [r0, #124]	; 0x7c
   1de4c:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1de4e:	f7ff ff0c 	bl	1dc6a <unpend_thread_no_timeout>
   1de52:	3018      	adds	r0, #24
   1de54:	f000 f809 	bl	1de6a <z_abort_timeout>
			ready_thread(thread);
   1de58:	4620      	mov	r0, r4
   1de5a:	f7ee fb23 	bl	c4a4 <ready_thread>
			ret = true;
   1de5e:	2001      	movs	r0, #1
	__asm__ volatile(
   1de60:	f385 8811 	msr	BASEPRI, r5
   1de64:	f3bf 8f6f 	isb	sy
}
   1de68:	bd38      	pop	{r3, r4, r5, pc}

0001de6a <z_abort_timeout>:
{
   1de6a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1de6c:	f04f 0220 	mov.w	r2, #32
   1de70:	f3ef 8411 	mrs	r4, BASEPRI
   1de74:	f382 8812 	msr	BASEPRI_MAX, r2
   1de78:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1de7c:	6803      	ldr	r3, [r0, #0]
   1de7e:	b13b      	cbz	r3, 1de90 <z_abort_timeout+0x26>
			remove_timeout(to);
   1de80:	f7ee fda4 	bl	c9cc <remove_timeout>
			ret = 0;
   1de84:	2000      	movs	r0, #0
	__asm__ volatile(
   1de86:	f384 8811 	msr	BASEPRI, r4
   1de8a:	f3bf 8f6f 	isb	sy
}
   1de8e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1de90:	f06f 0015 	mvn.w	r0, #21
   1de94:	e7f7      	b.n	1de86 <z_abort_timeout+0x1c>

0001de96 <z_get_next_timeout_expiry>:
{
   1de96:	b510      	push	{r4, lr}
	__asm__ volatile(
   1de98:	f04f 0320 	mov.w	r3, #32
   1de9c:	f3ef 8411 	mrs	r4, BASEPRI
   1dea0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dea4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1dea8:	f7ee fdaa 	bl	ca00 <next_timeout>
	__asm__ volatile(
   1deac:	f384 8811 	msr	BASEPRI, r4
   1deb0:	f3bf 8f6f 	isb	sy
}
   1deb4:	bd10      	pop	{r4, pc}

0001deb6 <z_set_timeout_expiry>:
{
   1deb6:	b570      	push	{r4, r5, r6, lr}
   1deb8:	4604      	mov	r4, r0
   1deba:	460d      	mov	r5, r1
	__asm__ volatile(
   1debc:	f04f 0320 	mov.w	r3, #32
   1dec0:	f3ef 8611 	mrs	r6, BASEPRI
   1dec4:	f383 8812 	msr	BASEPRI_MAX, r3
   1dec8:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1decc:	f7ee fd98 	bl	ca00 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1ded0:	2801      	cmp	r0, #1
   1ded2:	dd05      	ble.n	1dee0 <z_set_timeout_expiry+0x2a>
   1ded4:	42a0      	cmp	r0, r4
   1ded6:	db03      	blt.n	1dee0 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1ded8:	4629      	mov	r1, r5
   1deda:	4620      	mov	r0, r4
   1dedc:	f7ec fc8e 	bl	a7fc <sys_clock_set_timeout>
	__asm__ volatile(
   1dee0:	f386 8811 	msr	BASEPRI, r6
   1dee4:	f3bf 8f6f 	isb	sy
}
   1dee8:	bd70      	pop	{r4, r5, r6, pc}

0001deea <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1deea:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1deec:	f7ee fea8 	bl	cc40 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1def0:	bd08      	pop	{r3, pc}

0001def2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1def2:	f7ee bea5 	b.w	cc40 <sys_clock_tick_get>

0001def6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1def6:	b108      	cbz	r0, 1defc <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1def8:	f7e9 b922 	b.w	7140 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1defc:	4770      	bx	lr

0001defe <k_timer_init>:
	timer->status = 0U;
   1defe:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1df00:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   1df04:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1df08:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1df0c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1df10:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1df12:	6343      	str	r3, [r0, #52]	; 0x34
}
   1df14:	4770      	bx	lr

0001df16 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1df16:	b510      	push	{r4, lr}
   1df18:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1df1a:	f7ff ffa6 	bl	1de6a <z_abort_timeout>

	if (inactive) {
   1df1e:	b9b0      	cbnz	r0, 1df4e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1df20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1df22:	b10b      	cbz	r3, 1df28 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1df24:	4620      	mov	r0, r4
   1df26:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1df28:	f104 0018 	add.w	r0, r4, #24
   1df2c:	f7ff ff53 	bl	1ddd6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1df30:	b168      	cbz	r0, 1df4e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   1df32:	f7ff fef1 	bl	1dd18 <z_ready_thread>
	__asm__ volatile(
   1df36:	f04f 0320 	mov.w	r3, #32
   1df3a:	f3ef 8011 	mrs	r0, BASEPRI
   1df3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1df42:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   1df46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1df4a:	f7ff bec5 	b.w	1dcd8 <z_reschedule_irqlock>
   1df4e:	bd10      	pop	{r4, pc}

0001df50 <clear_event_registrations>:
	while (num_events--) {
   1df50:	2314      	movs	r3, #20
{
   1df52:	b570      	push	{r4, r5, r6, lr}
   1df54:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   1df58:	2400      	movs	r4, #0
   1df5a:	2601      	movs	r6, #1
	while (num_events--) {
   1df5c:	4281      	cmp	r1, r0
   1df5e:	d100      	bne.n	1df62 <clear_event_registrations+0x12>
}
   1df60:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   1df62:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1df66:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1df6a:	f003 031f 	and.w	r3, r3, #31
   1df6e:	2b08      	cmp	r3, #8
   1df70:	d80d      	bhi.n	1df8e <clear_event_registrations+0x3e>
   1df72:	fa06 f303 	lsl.w	r3, r6, r3
   1df76:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1df7a:	d008      	beq.n	1df8e <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1df7c:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1df80:	b12b      	cbz	r3, 1df8e <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   1df82:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   1df86:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1df88:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1df8a:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   1df8e:	f382 8811 	msr	BASEPRI, r2
   1df92:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1df96:	f04f 0320 	mov.w	r3, #32
   1df9a:	f3ef 8211 	mrs	r2, BASEPRI
   1df9e:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfa2:	f3bf 8f6f 	isb	sy
   1dfa6:	3914      	subs	r1, #20
   1dfa8:	e7d8      	b.n	1df5c <clear_event_registrations+0xc>

0001dfaa <add_event>:
{
   1dfaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dfac:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1dfae:	e9d0 2300 	ldrd	r2, r3, [r0]
   1dfb2:	4290      	cmp	r0, r2
   1dfb4:	4604      	mov	r4, r0
   1dfb6:	460d      	mov	r5, r1
   1dfb8:	d105      	bne.n	1dfc6 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   1dfba:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1dfbc:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1dfc0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1dfc2:	6065      	str	r5, [r4, #4]
}
   1dfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1dfc6:	2b00      	cmp	r3, #0
   1dfc8:	d0f7      	beq.n	1dfba <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1dfca:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1dfcc:	b100      	cbz	r0, 1dfd0 <add_event+0x26>
   1dfce:	3860      	subs	r0, #96	; 0x60
   1dfd0:	b107      	cbz	r7, 1dfd4 <add_event+0x2a>
   1dfd2:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1dfd4:	4639      	mov	r1, r7
   1dfd6:	f7ff fe52 	bl	1dc7e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1dfda:	2800      	cmp	r0, #0
   1dfdc:	dced      	bgt.n	1dfba <add_event+0x10>
	return list->head == list;
   1dfde:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dfe0:	42b4      	cmp	r4, r6
   1dfe2:	d0ea      	beq.n	1dfba <add_event+0x10>
   1dfe4:	2e00      	cmp	r6, #0
   1dfe6:	bf38      	it	cc
   1dfe8:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1dfea:	2e00      	cmp	r6, #0
   1dfec:	d0e5      	beq.n	1dfba <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   1dfee:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1dff0:	b101      	cbz	r1, 1dff4 <add_event+0x4a>
   1dff2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1dff4:	4638      	mov	r0, r7
   1dff6:	f7ff fe42 	bl	1dc7e <z_sched_prio_cmp>
   1dffa:	2800      	cmp	r0, #0
   1dffc:	dd05      	ble.n	1e00a <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   1dffe:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e000:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1e004:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e006:	6075      	str	r5, [r6, #4]
			return;
   1e008:	e7dc      	b.n	1dfc4 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   1e00a:	6863      	ldr	r3, [r4, #4]
   1e00c:	42b3      	cmp	r3, r6
   1e00e:	d0d4      	beq.n	1dfba <add_event+0x10>
   1e010:	6836      	ldr	r6, [r6, #0]
   1e012:	e7ea      	b.n	1dfea <add_event+0x40>

0001e014 <register_events>:
{
   1e014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1e018:	2500      	movs	r5, #0
{
   1e01a:	468b      	mov	fp, r1
   1e01c:	4614      	mov	r4, r2
   1e01e:	461f      	mov	r7, r3
   1e020:	4682      	mov	sl, r0
	int events_registered = 0;
   1e022:	462e      	mov	r6, r5
	event->poller = NULL;
   1e024:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1e026:	455d      	cmp	r5, fp
   1e028:	db02      	blt.n	1e030 <register_events+0x1c>
}
   1e02a:	4630      	mov	r0, r6
   1e02c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e030:	f04f 0320 	mov.w	r3, #32
   1e034:	f3ef 8911 	mrs	r9, BASEPRI
   1e038:	f383 8812 	msr	BASEPRI_MAX, r3
   1e03c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1e040:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1e044:	f003 031f 	and.w	r3, r3, #31
   1e048:	3b01      	subs	r3, #1
   1e04a:	2b07      	cmp	r3, #7
   1e04c:	d80f      	bhi.n	1e06e <register_events+0x5a>
   1e04e:	e8df f003 	tbb	[pc, r3]
   1e052:	041e      	.short	0x041e
   1e054:	0e0e0a0e 	.word	0x0e0e0a0e
   1e058:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   1e05a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e05e:	689b      	ldr	r3, [r3, #8]
   1e060:	b12b      	cbz	r3, 1e06e <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1e062:	2302      	movs	r3, #2
   1e064:	e020      	b.n	1e0a8 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1e066:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e06a:	681b      	ldr	r3, [r3, #0]
   1e06c:	bb8b      	cbnz	r3, 1e0d2 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1e06e:	bb47      	cbnz	r7, 1e0c2 <register_events+0xae>
   1e070:	7823      	ldrb	r3, [r4, #0]
   1e072:	b333      	cbz	r3, 1e0c2 <register_events+0xae>
	switch (event->type) {
   1e074:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1e078:	f003 031f 	and.w	r3, r3, #31
   1e07c:	3b01      	subs	r3, #1
   1e07e:	2b07      	cmp	r3, #7
   1e080:	d830      	bhi.n	1e0e4 <register_events+0xd0>
   1e082:	e8df f003 	tbb	[pc, r3]
   1e086:	2833      	.short	0x2833
   1e088:	2f2f282f 	.word	0x2f2f282f
   1e08c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1e08e:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e092:	689b      	ldr	r3, [r3, #8]
   1e094:	2b00      	cmp	r3, #0
   1e096:	d0ea      	beq.n	1e06e <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1e098:	2301      	movs	r3, #1
   1e09a:	e005      	b.n	1e0a8 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1e09c:	f8da 3010 	ldr.w	r3, [sl, #16]
   1e0a0:	6a1b      	ldr	r3, [r3, #32]
   1e0a2:	2b00      	cmp	r3, #0
   1e0a4:	d0e3      	beq.n	1e06e <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1e0a6:	2310      	movs	r3, #16
	event->state |= state;
   1e0a8:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1e0ac:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1e0b0:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1e0b4:	430b      	orrs	r3, r1
   1e0b6:	f363 3252 	bfi	r2, r3, #13, #6
   1e0ba:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1e0be:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1e0c2:	f389 8811 	msr	BASEPRI, r9
   1e0c6:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1e0ca:	3501      	adds	r5, #1
   1e0cc:	f10a 0a14 	add.w	sl, sl, #20
   1e0d0:	e7a9      	b.n	1e026 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1e0d2:	2304      	movs	r3, #4
   1e0d4:	e7e8      	b.n	1e0a8 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1e0d6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1e0da:	4622      	mov	r2, r4
   1e0dc:	4651      	mov	r1, sl
   1e0de:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1e0e0:	f7ff ff63 	bl	1dfaa <add_event>
	event->poller = poller;
   1e0e4:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1e0e8:	3601      	adds	r6, #1
   1e0ea:	e7ea      	b.n	1e0c2 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1e0ec:	f8da 0010 	ldr.w	r0, [sl, #16]
   1e0f0:	4622      	mov	r2, r4
   1e0f2:	4651      	mov	r1, sl
   1e0f4:	e7f4      	b.n	1e0e0 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1e0f6:	f8da 0010 	ldr.w	r0, [sl, #16]
   1e0fa:	4622      	mov	r2, r4
   1e0fc:	4651      	mov	r1, sl
   1e0fe:	3024      	adds	r0, #36	; 0x24
   1e100:	e7ee      	b.n	1e0e0 <register_events+0xcc>

0001e102 <signal_poll_event>:
{
   1e102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1e106:	6884      	ldr	r4, [r0, #8]
{
   1e108:	4605      	mov	r5, r0
   1e10a:	460e      	mov	r6, r1
	if (poller != NULL) {
   1e10c:	b144      	cbz	r4, 1e120 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1e10e:	7863      	ldrb	r3, [r4, #1]
   1e110:	2b01      	cmp	r3, #1
   1e112:	d138      	bne.n	1e186 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   1e114:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e118:	f013 0302 	ands.w	r3, r3, #2
   1e11c:	d10a      	bne.n	1e134 <signal_poll_event+0x32>
		poller->is_polling = false;
   1e11e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1e120:	68eb      	ldr	r3, [r5, #12]
   1e122:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1e126:	430e      	orrs	r6, r1
	event->poller = NULL;
   1e128:	2000      	movs	r0, #0
	event->state |= state;
   1e12a:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1e12e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1e130:	60eb      	str	r3, [r5, #12]
	return retcode;
   1e132:	e00d      	b.n	1e150 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1e134:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1e138:	f04f 31ff 	mov.w	r1, #4294967295
   1e13c:	f06f 0001 	mvn.w	r0, #1
   1e140:	428b      	cmp	r3, r1
   1e142:	bf08      	it	eq
   1e144:	4282      	cmpeq	r2, r0
   1e146:	d105      	bne.n	1e154 <signal_poll_event+0x52>
		poller->is_polling = false;
   1e148:	2300      	movs	r3, #0
   1e14a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1e14c:	f06f 000a 	mvn.w	r0, #10
}
   1e150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e154:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1e158:	4640      	mov	r0, r8
   1e15a:	f7ff fda9 	bl	1dcb0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e15e:	2e08      	cmp	r6, #8
   1e160:	bf0c      	ite	eq
   1e162:	f06f 0303 	mvneq.w	r3, #3
   1e166:	2300      	movne	r3, #0
   1e168:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e16a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1e16e:	06db      	lsls	r3, r3, #27
   1e170:	d102      	bne.n	1e178 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   1e172:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1e176:	b10f      	cbz	r7, 1e17c <signal_poll_event+0x7a>
		poller->is_polling = false;
   1e178:	2300      	movs	r3, #0
   1e17a:	e7d0      	b.n	1e11e <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1e17c:	4640      	mov	r0, r8
   1e17e:	f7ff fdcb 	bl	1dd18 <z_ready_thread>
		poller->is_polling = false;
   1e182:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1e184:	e7cc      	b.n	1e120 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1e186:	2b02      	cmp	r3, #2
   1e188:	d1f6      	bne.n	1e178 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1e18a:	7823      	ldrb	r3, [r4, #0]
   1e18c:	2b00      	cmp	r3, #0
   1e18e:	d0c7      	beq.n	1e120 <signal_poll_event+0x1e>
   1e190:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1e194:	2f00      	cmp	r7, #0
   1e196:	d0f4      	beq.n	1e182 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1e198:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1e19c:	f1a4 0914 	sub.w	r9, r4, #20
   1e1a0:	f104 0014 	add.w	r0, r4, #20
   1e1a4:	f7ff fe61 	bl	1de6a <z_abort_timeout>
		twork->poll_result = 0;
   1e1a8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1e1ac:	4649      	mov	r1, r9
   1e1ae:	4638      	mov	r0, r7
   1e1b0:	f7ff fd36 	bl	1dc20 <k_work_submit_to_queue>
		poller->is_polling = false;
   1e1b4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1e1b8:	e7b2      	b.n	1e120 <signal_poll_event+0x1e>

0001e1ba <z_handle_obj_poll_events>:
{
   1e1ba:	4603      	mov	r3, r0
	return list->head == list;
   1e1bc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e1be:	4283      	cmp	r3, r0
   1e1c0:	d008      	beq.n	1e1d4 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1e1c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1e1c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e1c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e1ca:	2300      	movs	r3, #0
	node->prev = NULL;
   1e1cc:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e1d0:	f7ff bf97 	b.w	1e102 <signal_poll_event>
}
   1e1d4:	4770      	bx	lr

0001e1d6 <k_heap_init>:
{
   1e1d6:	b410      	push	{r4}
   1e1d8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1e1dc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1e1e0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1e1e2:	f7fe bb21 	b.w	1c828 <sys_heap_init>

0001e1e6 <memcmp>:
   1e1e6:	b530      	push	{r4, r5, lr}
   1e1e8:	3901      	subs	r1, #1
   1e1ea:	2400      	movs	r4, #0
   1e1ec:	42a2      	cmp	r2, r4
   1e1ee:	d101      	bne.n	1e1f4 <memcmp+0xe>
   1e1f0:	2000      	movs	r0, #0
   1e1f2:	e005      	b.n	1e200 <memcmp+0x1a>
   1e1f4:	5d03      	ldrb	r3, [r0, r4]
   1e1f6:	3401      	adds	r4, #1
   1e1f8:	5d0d      	ldrb	r5, [r1, r4]
   1e1fa:	42ab      	cmp	r3, r5
   1e1fc:	d0f6      	beq.n	1e1ec <memcmp+0x6>
   1e1fe:	1b58      	subs	r0, r3, r5
   1e200:	bd30      	pop	{r4, r5, pc}

0001e202 <memcpy>:
   1e202:	440a      	add	r2, r1
   1e204:	4291      	cmp	r1, r2
   1e206:	f100 33ff 	add.w	r3, r0, #4294967295
   1e20a:	d100      	bne.n	1e20e <memcpy+0xc>
   1e20c:	4770      	bx	lr
   1e20e:	b510      	push	{r4, lr}
   1e210:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e214:	f803 4f01 	strb.w	r4, [r3, #1]!
   1e218:	4291      	cmp	r1, r2
   1e21a:	d1f9      	bne.n	1e210 <memcpy+0xe>
   1e21c:	bd10      	pop	{r4, pc}

0001e21e <__memcpy_chk>:
   1e21e:	429a      	cmp	r2, r3
   1e220:	b508      	push	{r3, lr}
   1e222:	d901      	bls.n	1e228 <__memcpy_chk+0xa>
   1e224:	f7e8 ff50 	bl	70c8 <__chk_fail>
   1e228:	4281      	cmp	r1, r0
   1e22a:	d804      	bhi.n	1e236 <__memcpy_chk+0x18>
   1e22c:	188b      	adds	r3, r1, r2
   1e22e:	4298      	cmp	r0, r3
   1e230:	d3f8      	bcc.n	1e224 <__memcpy_chk+0x6>
   1e232:	4281      	cmp	r1, r0
   1e234:	d102      	bne.n	1e23c <__memcpy_chk+0x1e>
   1e236:	1883      	adds	r3, r0, r2
   1e238:	4299      	cmp	r1, r3
   1e23a:	d3f3      	bcc.n	1e224 <__memcpy_chk+0x6>
   1e23c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e240:	f7ff bfdf 	b.w	1e202 <memcpy>

0001e244 <memmove>:
   1e244:	4288      	cmp	r0, r1
   1e246:	b510      	push	{r4, lr}
   1e248:	eb01 0402 	add.w	r4, r1, r2
   1e24c:	d902      	bls.n	1e254 <memmove+0x10>
   1e24e:	4284      	cmp	r4, r0
   1e250:	4623      	mov	r3, r4
   1e252:	d807      	bhi.n	1e264 <memmove+0x20>
   1e254:	1e43      	subs	r3, r0, #1
   1e256:	42a1      	cmp	r1, r4
   1e258:	d008      	beq.n	1e26c <memmove+0x28>
   1e25a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1e25e:	f803 2f01 	strb.w	r2, [r3, #1]!
   1e262:	e7f8      	b.n	1e256 <memmove+0x12>
   1e264:	4402      	add	r2, r0
   1e266:	4601      	mov	r1, r0
   1e268:	428a      	cmp	r2, r1
   1e26a:	d100      	bne.n	1e26e <memmove+0x2a>
   1e26c:	bd10      	pop	{r4, pc}
   1e26e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1e272:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1e276:	e7f7      	b.n	1e268 <memmove+0x24>

0001e278 <memset>:
   1e278:	4402      	add	r2, r0
   1e27a:	4603      	mov	r3, r0
   1e27c:	4293      	cmp	r3, r2
   1e27e:	d100      	bne.n	1e282 <memset+0xa>
   1e280:	4770      	bx	lr
   1e282:	f803 1b01 	strb.w	r1, [r3], #1
   1e286:	e7f9      	b.n	1e27c <memset+0x4>

0001e288 <_calloc_r>:
   1e288:	b538      	push	{r3, r4, r5, lr}
   1e28a:	fb02 f501 	mul.w	r5, r2, r1
   1e28e:	4629      	mov	r1, r5
   1e290:	f7ef f88e 	bl	d3b0 <_malloc_r>
   1e294:	4604      	mov	r4, r0
   1e296:	b118      	cbz	r0, 1e2a0 <_calloc_r+0x18>
   1e298:	462a      	mov	r2, r5
   1e29a:	2100      	movs	r1, #0
   1e29c:	f7ff ffec 	bl	1e278 <memset>
   1e2a0:	4620      	mov	r0, r4
   1e2a2:	bd38      	pop	{r3, r4, r5, pc}

0001e2a4 <__sprintf_chk>:
   1e2a4:	b408      	push	{r3}
   1e2a6:	b517      	push	{r0, r1, r2, r4, lr}
   1e2a8:	ab05      	add	r3, sp, #20
   1e2aa:	1e14      	subs	r4, r2, #0
   1e2ac:	f853 1b04 	ldr.w	r1, [r3], #4
   1e2b0:	9301      	str	r3, [sp, #4]
   1e2b2:	da07      	bge.n	1e2c4 <__sprintf_chk+0x20>
   1e2b4:	461a      	mov	r2, r3
   1e2b6:	f7ef f93b 	bl	d530 <vsiprintf>
   1e2ba:	b003      	add	sp, #12
   1e2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e2c0:	b001      	add	sp, #4
   1e2c2:	4770      	bx	lr
   1e2c4:	460a      	mov	r2, r1
   1e2c6:	4621      	mov	r1, r4
   1e2c8:	f7ef f90e 	bl	d4e8 <vsniprintf>
   1e2cc:	2800      	cmp	r0, #0
   1e2ce:	dbf4      	blt.n	1e2ba <__sprintf_chk+0x16>
   1e2d0:	42a0      	cmp	r0, r4
   1e2d2:	d3f2      	bcc.n	1e2ba <__sprintf_chk+0x16>
   1e2d4:	f7e8 fef8 	bl	70c8 <__chk_fail>

0001e2d8 <__seofread>:
   1e2d8:	2000      	movs	r0, #0
   1e2da:	4770      	bx	lr

0001e2dc <strcpy>:
   1e2dc:	4603      	mov	r3, r0
   1e2de:	f811 2b01 	ldrb.w	r2, [r1], #1
   1e2e2:	f803 2b01 	strb.w	r2, [r3], #1
   1e2e6:	2a00      	cmp	r2, #0
   1e2e8:	d1f9      	bne.n	1e2de <strcpy+0x2>
   1e2ea:	4770      	bx	lr

0001e2ec <strncpy>:
   1e2ec:	b510      	push	{r4, lr}
   1e2ee:	3901      	subs	r1, #1
   1e2f0:	4603      	mov	r3, r0
   1e2f2:	b132      	cbz	r2, 1e302 <strncpy+0x16>
   1e2f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1e2f8:	f803 4b01 	strb.w	r4, [r3], #1
   1e2fc:	3a01      	subs	r2, #1
   1e2fe:	2c00      	cmp	r4, #0
   1e300:	d1f7      	bne.n	1e2f2 <strncpy+0x6>
   1e302:	441a      	add	r2, r3
   1e304:	2100      	movs	r1, #0
   1e306:	4293      	cmp	r3, r2
   1e308:	d100      	bne.n	1e30c <strncpy+0x20>
   1e30a:	bd10      	pop	{r4, pc}
   1e30c:	f803 1b01 	strb.w	r1, [r3], #1
   1e310:	e7f9      	b.n	1e306 <strncpy+0x1a>

0001e312 <strnlen>:
   1e312:	b510      	push	{r4, lr}
   1e314:	4602      	mov	r2, r0
   1e316:	4401      	add	r1, r0
   1e318:	428a      	cmp	r2, r1
   1e31a:	4613      	mov	r3, r2
   1e31c:	d101      	bne.n	1e322 <strnlen+0x10>
   1e31e:	1a18      	subs	r0, r3, r0
   1e320:	bd10      	pop	{r4, pc}
   1e322:	781c      	ldrb	r4, [r3, #0]
   1e324:	3201      	adds	r2, #1
   1e326:	2c00      	cmp	r4, #0
   1e328:	d1f6      	bne.n	1e318 <strnlen+0x6>
   1e32a:	e7f8      	b.n	1e31e <strnlen+0xc>

0001e32c <_vsniprintf_r>:
   1e32c:	b530      	push	{r4, r5, lr}
   1e32e:	1e14      	subs	r4, r2, #0
   1e330:	4605      	mov	r5, r0
   1e332:	b09b      	sub	sp, #108	; 0x6c
   1e334:	4618      	mov	r0, r3
   1e336:	da05      	bge.n	1e344 <_vsniprintf_r+0x18>
   1e338:	238b      	movs	r3, #139	; 0x8b
   1e33a:	602b      	str	r3, [r5, #0]
   1e33c:	f04f 30ff 	mov.w	r0, #4294967295
   1e340:	b01b      	add	sp, #108	; 0x6c
   1e342:	bd30      	pop	{r4, r5, pc}
   1e344:	f44f 7302 	mov.w	r3, #520	; 0x208
   1e348:	f8ad 300c 	strh.w	r3, [sp, #12]
   1e34c:	bf14      	ite	ne
   1e34e:	f104 33ff 	addne.w	r3, r4, #4294967295
   1e352:	4623      	moveq	r3, r4
   1e354:	9302      	str	r3, [sp, #8]
   1e356:	9305      	str	r3, [sp, #20]
   1e358:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e35c:	9100      	str	r1, [sp, #0]
   1e35e:	9104      	str	r1, [sp, #16]
   1e360:	f8ad 300e 	strh.w	r3, [sp, #14]
   1e364:	4602      	mov	r2, r0
   1e366:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1e368:	4669      	mov	r1, sp
   1e36a:	4628      	mov	r0, r5
   1e36c:	f7ef f8f6 	bl	d55c <_svfiprintf_r>
   1e370:	1c43      	adds	r3, r0, #1
   1e372:	bfbc      	itt	lt
   1e374:	238b      	movlt	r3, #139	; 0x8b
   1e376:	602b      	strlt	r3, [r5, #0]
   1e378:	2c00      	cmp	r4, #0
   1e37a:	d0e1      	beq.n	1e340 <_vsniprintf_r+0x14>
   1e37c:	9b00      	ldr	r3, [sp, #0]
   1e37e:	2200      	movs	r2, #0
   1e380:	701a      	strb	r2, [r3, #0]
   1e382:	e7dd      	b.n	1e340 <_vsniprintf_r+0x14>

0001e384 <_realloc_r>:
   1e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e386:	4607      	mov	r7, r0
   1e388:	4614      	mov	r4, r2
   1e38a:	460e      	mov	r6, r1
   1e38c:	b921      	cbnz	r1, 1e398 <_realloc_r+0x14>
   1e38e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e392:	4611      	mov	r1, r2
   1e394:	f7ef b80c 	b.w	d3b0 <_malloc_r>
   1e398:	b922      	cbnz	r2, 1e3a4 <_realloc_r+0x20>
   1e39a:	f7ee ffbb 	bl	d314 <_free_r>
   1e39e:	4625      	mov	r5, r4
   1e3a0:	4628      	mov	r0, r5
   1e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e3a4:	f000 f9ae 	bl	1e704 <_malloc_usable_size_r>
   1e3a8:	42a0      	cmp	r0, r4
   1e3aa:	d20f      	bcs.n	1e3cc <_realloc_r+0x48>
   1e3ac:	4621      	mov	r1, r4
   1e3ae:	4638      	mov	r0, r7
   1e3b0:	f7ee fffe 	bl	d3b0 <_malloc_r>
   1e3b4:	4605      	mov	r5, r0
   1e3b6:	2800      	cmp	r0, #0
   1e3b8:	d0f2      	beq.n	1e3a0 <_realloc_r+0x1c>
   1e3ba:	4631      	mov	r1, r6
   1e3bc:	4622      	mov	r2, r4
   1e3be:	f7ff ff20 	bl	1e202 <memcpy>
   1e3c2:	4631      	mov	r1, r6
   1e3c4:	4638      	mov	r0, r7
   1e3c6:	f7ee ffa5 	bl	d314 <_free_r>
   1e3ca:	e7e9      	b.n	1e3a0 <_realloc_r+0x1c>
   1e3cc:	4635      	mov	r5, r6
   1e3ce:	e7e7      	b.n	1e3a0 <_realloc_r+0x1c>

0001e3d0 <__ssputs_r>:
   1e3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e3d4:	688e      	ldr	r6, [r1, #8]
   1e3d6:	429e      	cmp	r6, r3
   1e3d8:	4682      	mov	sl, r0
   1e3da:	460c      	mov	r4, r1
   1e3dc:	4690      	mov	r8, r2
   1e3de:	461f      	mov	r7, r3
   1e3e0:	d838      	bhi.n	1e454 <__ssputs_r+0x84>
   1e3e2:	898a      	ldrh	r2, [r1, #12]
   1e3e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1e3e8:	d032      	beq.n	1e450 <__ssputs_r+0x80>
   1e3ea:	6825      	ldr	r5, [r4, #0]
   1e3ec:	6909      	ldr	r1, [r1, #16]
   1e3ee:	eba5 0901 	sub.w	r9, r5, r1
   1e3f2:	6965      	ldr	r5, [r4, #20]
   1e3f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1e3f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1e3fc:	3301      	adds	r3, #1
   1e3fe:	444b      	add	r3, r9
   1e400:	106d      	asrs	r5, r5, #1
   1e402:	429d      	cmp	r5, r3
   1e404:	bf38      	it	cc
   1e406:	461d      	movcc	r5, r3
   1e408:	0553      	lsls	r3, r2, #21
   1e40a:	d531      	bpl.n	1e470 <__ssputs_r+0xa0>
   1e40c:	4629      	mov	r1, r5
   1e40e:	f7ee ffcf 	bl	d3b0 <_malloc_r>
   1e412:	4606      	mov	r6, r0
   1e414:	b950      	cbnz	r0, 1e42c <__ssputs_r+0x5c>
   1e416:	230c      	movs	r3, #12
   1e418:	f8ca 3000 	str.w	r3, [sl]
   1e41c:	89a3      	ldrh	r3, [r4, #12]
   1e41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e422:	81a3      	strh	r3, [r4, #12]
   1e424:	f04f 30ff 	mov.w	r0, #4294967295
   1e428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e42c:	6921      	ldr	r1, [r4, #16]
   1e42e:	464a      	mov	r2, r9
   1e430:	f7ff fee7 	bl	1e202 <memcpy>
   1e434:	89a3      	ldrh	r3, [r4, #12]
   1e436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1e43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e43e:	81a3      	strh	r3, [r4, #12]
   1e440:	6126      	str	r6, [r4, #16]
   1e442:	6165      	str	r5, [r4, #20]
   1e444:	444e      	add	r6, r9
   1e446:	eba5 0509 	sub.w	r5, r5, r9
   1e44a:	6026      	str	r6, [r4, #0]
   1e44c:	60a5      	str	r5, [r4, #8]
   1e44e:	463e      	mov	r6, r7
   1e450:	42be      	cmp	r6, r7
   1e452:	d900      	bls.n	1e456 <__ssputs_r+0x86>
   1e454:	463e      	mov	r6, r7
   1e456:	4632      	mov	r2, r6
   1e458:	6820      	ldr	r0, [r4, #0]
   1e45a:	4641      	mov	r1, r8
   1e45c:	f7ff fef2 	bl	1e244 <memmove>
   1e460:	68a3      	ldr	r3, [r4, #8]
   1e462:	6822      	ldr	r2, [r4, #0]
   1e464:	1b9b      	subs	r3, r3, r6
   1e466:	4432      	add	r2, r6
   1e468:	60a3      	str	r3, [r4, #8]
   1e46a:	6022      	str	r2, [r4, #0]
   1e46c:	2000      	movs	r0, #0
   1e46e:	e7db      	b.n	1e428 <__ssputs_r+0x58>
   1e470:	462a      	mov	r2, r5
   1e472:	f7ff ff87 	bl	1e384 <_realloc_r>
   1e476:	4606      	mov	r6, r0
   1e478:	2800      	cmp	r0, #0
   1e47a:	d1e1      	bne.n	1e440 <__ssputs_r+0x70>
   1e47c:	6921      	ldr	r1, [r4, #16]
   1e47e:	4650      	mov	r0, sl
   1e480:	f7ee ff48 	bl	d314 <_free_r>
   1e484:	e7c7      	b.n	1e416 <__ssputs_r+0x46>

0001e486 <_sungetc_r>:
   1e486:	b538      	push	{r3, r4, r5, lr}
   1e488:	1c4b      	adds	r3, r1, #1
   1e48a:	4614      	mov	r4, r2
   1e48c:	d103      	bne.n	1e496 <_sungetc_r+0x10>
   1e48e:	f04f 35ff 	mov.w	r5, #4294967295
   1e492:	4628      	mov	r0, r5
   1e494:	bd38      	pop	{r3, r4, r5, pc}
   1e496:	8993      	ldrh	r3, [r2, #12]
   1e498:	f023 0320 	bic.w	r3, r3, #32
   1e49c:	8193      	strh	r3, [r2, #12]
   1e49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e4a0:	6852      	ldr	r2, [r2, #4]
   1e4a2:	b2cd      	uxtb	r5, r1
   1e4a4:	b18b      	cbz	r3, 1e4ca <_sungetc_r+0x44>
   1e4a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e4a8:	4293      	cmp	r3, r2
   1e4aa:	dd08      	ble.n	1e4be <_sungetc_r+0x38>
   1e4ac:	6823      	ldr	r3, [r4, #0]
   1e4ae:	1e5a      	subs	r2, r3, #1
   1e4b0:	6022      	str	r2, [r4, #0]
   1e4b2:	f803 5c01 	strb.w	r5, [r3, #-1]
   1e4b6:	6863      	ldr	r3, [r4, #4]
   1e4b8:	3301      	adds	r3, #1
   1e4ba:	6063      	str	r3, [r4, #4]
   1e4bc:	e7e9      	b.n	1e492 <_sungetc_r+0xc>
   1e4be:	4621      	mov	r1, r4
   1e4c0:	f000 f8e6 	bl	1e690 <__submore>
   1e4c4:	2800      	cmp	r0, #0
   1e4c6:	d0f1      	beq.n	1e4ac <_sungetc_r+0x26>
   1e4c8:	e7e1      	b.n	1e48e <_sungetc_r+0x8>
   1e4ca:	6921      	ldr	r1, [r4, #16]
   1e4cc:	6823      	ldr	r3, [r4, #0]
   1e4ce:	b151      	cbz	r1, 1e4e6 <_sungetc_r+0x60>
   1e4d0:	4299      	cmp	r1, r3
   1e4d2:	d208      	bcs.n	1e4e6 <_sungetc_r+0x60>
   1e4d4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   1e4d8:	42a9      	cmp	r1, r5
   1e4da:	d104      	bne.n	1e4e6 <_sungetc_r+0x60>
   1e4dc:	3b01      	subs	r3, #1
   1e4de:	3201      	adds	r2, #1
   1e4e0:	6023      	str	r3, [r4, #0]
   1e4e2:	6062      	str	r2, [r4, #4]
   1e4e4:	e7d5      	b.n	1e492 <_sungetc_r+0xc>
   1e4e6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   1e4ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1e4ee:	6363      	str	r3, [r4, #52]	; 0x34
   1e4f0:	2303      	movs	r3, #3
   1e4f2:	63a3      	str	r3, [r4, #56]	; 0x38
   1e4f4:	4623      	mov	r3, r4
   1e4f6:	f803 5f46 	strb.w	r5, [r3, #70]!
   1e4fa:	6023      	str	r3, [r4, #0]
   1e4fc:	2301      	movs	r3, #1
   1e4fe:	e7dc      	b.n	1e4ba <_sungetc_r+0x34>

0001e500 <__ssrefill_r>:
   1e500:	b510      	push	{r4, lr}
   1e502:	460c      	mov	r4, r1
   1e504:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1e506:	b169      	cbz	r1, 1e524 <__ssrefill_r+0x24>
   1e508:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1e50c:	4299      	cmp	r1, r3
   1e50e:	d001      	beq.n	1e514 <__ssrefill_r+0x14>
   1e510:	f7ee ff00 	bl	d314 <_free_r>
   1e514:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1e516:	6063      	str	r3, [r4, #4]
   1e518:	2000      	movs	r0, #0
   1e51a:	6360      	str	r0, [r4, #52]	; 0x34
   1e51c:	b113      	cbz	r3, 1e524 <__ssrefill_r+0x24>
   1e51e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e520:	6023      	str	r3, [r4, #0]
   1e522:	bd10      	pop	{r4, pc}
   1e524:	6923      	ldr	r3, [r4, #16]
   1e526:	6023      	str	r3, [r4, #0]
   1e528:	2300      	movs	r3, #0
   1e52a:	6063      	str	r3, [r4, #4]
   1e52c:	89a3      	ldrh	r3, [r4, #12]
   1e52e:	f043 0320 	orr.w	r3, r3, #32
   1e532:	81a3      	strh	r3, [r4, #12]
   1e534:	f04f 30ff 	mov.w	r0, #4294967295
   1e538:	e7f3      	b.n	1e522 <__ssrefill_r+0x22>

0001e53a <_printf_common>:
   1e53a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e53e:	4616      	mov	r6, r2
   1e540:	4699      	mov	r9, r3
   1e542:	688a      	ldr	r2, [r1, #8]
   1e544:	690b      	ldr	r3, [r1, #16]
   1e546:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1e54a:	4293      	cmp	r3, r2
   1e54c:	bfb8      	it	lt
   1e54e:	4613      	movlt	r3, r2
   1e550:	6033      	str	r3, [r6, #0]
   1e552:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   1e556:	4607      	mov	r7, r0
   1e558:	460c      	mov	r4, r1
   1e55a:	b10a      	cbz	r2, 1e560 <_printf_common+0x26>
   1e55c:	3301      	adds	r3, #1
   1e55e:	6033      	str	r3, [r6, #0]
   1e560:	6823      	ldr	r3, [r4, #0]
   1e562:	0699      	lsls	r1, r3, #26
   1e564:	bf42      	ittt	mi
   1e566:	6833      	ldrmi	r3, [r6, #0]
   1e568:	3302      	addmi	r3, #2
   1e56a:	6033      	strmi	r3, [r6, #0]
   1e56c:	6825      	ldr	r5, [r4, #0]
   1e56e:	f015 0506 	ands.w	r5, r5, #6
   1e572:	d106      	bne.n	1e582 <_printf_common+0x48>
   1e574:	f104 0a19 	add.w	sl, r4, #25
   1e578:	68e3      	ldr	r3, [r4, #12]
   1e57a:	6832      	ldr	r2, [r6, #0]
   1e57c:	1a9b      	subs	r3, r3, r2
   1e57e:	42ab      	cmp	r3, r5
   1e580:	dc26      	bgt.n	1e5d0 <_printf_common+0x96>
   1e582:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   1e586:	1e13      	subs	r3, r2, #0
   1e588:	6822      	ldr	r2, [r4, #0]
   1e58a:	bf18      	it	ne
   1e58c:	2301      	movne	r3, #1
   1e58e:	0692      	lsls	r2, r2, #26
   1e590:	d42b      	bmi.n	1e5ea <_printf_common+0xb0>
   1e592:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1e596:	4649      	mov	r1, r9
   1e598:	4638      	mov	r0, r7
   1e59a:	47c0      	blx	r8
   1e59c:	3001      	adds	r0, #1
   1e59e:	d01e      	beq.n	1e5de <_printf_common+0xa4>
   1e5a0:	6823      	ldr	r3, [r4, #0]
   1e5a2:	68e5      	ldr	r5, [r4, #12]
   1e5a4:	6832      	ldr	r2, [r6, #0]
   1e5a6:	f003 0306 	and.w	r3, r3, #6
   1e5aa:	2b04      	cmp	r3, #4
   1e5ac:	bf08      	it	eq
   1e5ae:	1aad      	subeq	r5, r5, r2
   1e5b0:	68a3      	ldr	r3, [r4, #8]
   1e5b2:	6922      	ldr	r2, [r4, #16]
   1e5b4:	bf0c      	ite	eq
   1e5b6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   1e5ba:	2500      	movne	r5, #0
   1e5bc:	4293      	cmp	r3, r2
   1e5be:	bfc4      	itt	gt
   1e5c0:	1a9b      	subgt	r3, r3, r2
   1e5c2:	18ed      	addgt	r5, r5, r3
   1e5c4:	2600      	movs	r6, #0
   1e5c6:	341a      	adds	r4, #26
   1e5c8:	42b5      	cmp	r5, r6
   1e5ca:	d11a      	bne.n	1e602 <_printf_common+0xc8>
   1e5cc:	2000      	movs	r0, #0
   1e5ce:	e008      	b.n	1e5e2 <_printf_common+0xa8>
   1e5d0:	2301      	movs	r3, #1
   1e5d2:	4652      	mov	r2, sl
   1e5d4:	4649      	mov	r1, r9
   1e5d6:	4638      	mov	r0, r7
   1e5d8:	47c0      	blx	r8
   1e5da:	3001      	adds	r0, #1
   1e5dc:	d103      	bne.n	1e5e6 <_printf_common+0xac>
   1e5de:	f04f 30ff 	mov.w	r0, #4294967295
   1e5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e5e6:	3501      	adds	r5, #1
   1e5e8:	e7c6      	b.n	1e578 <_printf_common+0x3e>
   1e5ea:	18e1      	adds	r1, r4, r3
   1e5ec:	1c5a      	adds	r2, r3, #1
   1e5ee:	2030      	movs	r0, #48	; 0x30
   1e5f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   1e5f4:	4422      	add	r2, r4
   1e5f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1e5fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   1e5fe:	3302      	adds	r3, #2
   1e600:	e7c7      	b.n	1e592 <_printf_common+0x58>
   1e602:	2301      	movs	r3, #1
   1e604:	4622      	mov	r2, r4
   1e606:	4649      	mov	r1, r9
   1e608:	4638      	mov	r0, r7
   1e60a:	47c0      	blx	r8
   1e60c:	3001      	adds	r0, #1
   1e60e:	d0e6      	beq.n	1e5de <_printf_common+0xa4>
   1e610:	3601      	adds	r6, #1
   1e612:	e7d9      	b.n	1e5c8 <_printf_common+0x8e>

0001e614 <__sccl>:
   1e614:	b570      	push	{r4, r5, r6, lr}
   1e616:	780b      	ldrb	r3, [r1, #0]
   1e618:	4604      	mov	r4, r0
   1e61a:	2b5e      	cmp	r3, #94	; 0x5e
   1e61c:	bf0b      	itete	eq
   1e61e:	784b      	ldrbeq	r3, [r1, #1]
   1e620:	1c48      	addne	r0, r1, #1
   1e622:	1c88      	addeq	r0, r1, #2
   1e624:	2200      	movne	r2, #0
   1e626:	bf08      	it	eq
   1e628:	2201      	moveq	r2, #1
   1e62a:	1e61      	subs	r1, r4, #1
   1e62c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   1e630:	f801 2f01 	strb.w	r2, [r1, #1]!
   1e634:	42a9      	cmp	r1, r5
   1e636:	d1fb      	bne.n	1e630 <__sccl+0x1c>
   1e638:	b90b      	cbnz	r3, 1e63e <__sccl+0x2a>
   1e63a:	3801      	subs	r0, #1
   1e63c:	bd70      	pop	{r4, r5, r6, pc}
   1e63e:	f082 0101 	eor.w	r1, r2, #1
   1e642:	54e1      	strb	r1, [r4, r3]
   1e644:	1c42      	adds	r2, r0, #1
   1e646:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   1e64a:	2d2d      	cmp	r5, #45	; 0x2d
   1e64c:	f102 36ff 	add.w	r6, r2, #4294967295
   1e650:	4610      	mov	r0, r2
   1e652:	d006      	beq.n	1e662 <__sccl+0x4e>
   1e654:	2d5d      	cmp	r5, #93	; 0x5d
   1e656:	d0f1      	beq.n	1e63c <__sccl+0x28>
   1e658:	b90d      	cbnz	r5, 1e65e <__sccl+0x4a>
   1e65a:	4630      	mov	r0, r6
   1e65c:	e7ee      	b.n	1e63c <__sccl+0x28>
   1e65e:	462b      	mov	r3, r5
   1e660:	e7ef      	b.n	1e642 <__sccl+0x2e>
   1e662:	7816      	ldrb	r6, [r2, #0]
   1e664:	2e5d      	cmp	r6, #93	; 0x5d
   1e666:	d0fa      	beq.n	1e65e <__sccl+0x4a>
   1e668:	42b3      	cmp	r3, r6
   1e66a:	dcf8      	bgt.n	1e65e <__sccl+0x4a>
   1e66c:	4618      	mov	r0, r3
   1e66e:	3001      	adds	r0, #1
   1e670:	4286      	cmp	r6, r0
   1e672:	5421      	strb	r1, [r4, r0]
   1e674:	dcfb      	bgt.n	1e66e <__sccl+0x5a>
   1e676:	43d8      	mvns	r0, r3
   1e678:	4430      	add	r0, r6
   1e67a:	1c5d      	adds	r5, r3, #1
   1e67c:	42b3      	cmp	r3, r6
   1e67e:	bfa8      	it	ge
   1e680:	2000      	movge	r0, #0
   1e682:	182b      	adds	r3, r5, r0
   1e684:	3202      	adds	r2, #2
   1e686:	e7de      	b.n	1e646 <__sccl+0x32>

0001e688 <_strtol_r>:
   1e688:	f7ef bc52 	b.w	df30 <_strtol_l.isra.0>

0001e68c <_strtoul_r>:
   1e68c:	f7ef bcca 	b.w	e024 <_strtoul_l.isra.0>

0001e690 <__submore>:
   1e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e694:	460c      	mov	r4, r1
   1e696:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1e698:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1e69c:	4299      	cmp	r1, r3
   1e69e:	d11d      	bne.n	1e6dc <__submore+0x4c>
   1e6a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1e6a4:	f7ee fe84 	bl	d3b0 <_malloc_r>
   1e6a8:	b918      	cbnz	r0, 1e6b2 <__submore+0x22>
   1e6aa:	f04f 30ff 	mov.w	r0, #4294967295
   1e6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1e6b6:	63a3      	str	r3, [r4, #56]	; 0x38
   1e6b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   1e6bc:	6360      	str	r0, [r4, #52]	; 0x34
   1e6be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1e6c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1e6c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1e6ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1e6ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   1e6d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   1e6d6:	6020      	str	r0, [r4, #0]
   1e6d8:	2000      	movs	r0, #0
   1e6da:	e7e8      	b.n	1e6ae <__submore+0x1e>
   1e6dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   1e6de:	0077      	lsls	r7, r6, #1
   1e6e0:	463a      	mov	r2, r7
   1e6e2:	f7ff fe4f 	bl	1e384 <_realloc_r>
   1e6e6:	4605      	mov	r5, r0
   1e6e8:	2800      	cmp	r0, #0
   1e6ea:	d0de      	beq.n	1e6aa <__submore+0x1a>
   1e6ec:	eb00 0806 	add.w	r8, r0, r6
   1e6f0:	4601      	mov	r1, r0
   1e6f2:	4632      	mov	r2, r6
   1e6f4:	4640      	mov	r0, r8
   1e6f6:	f7ff fd84 	bl	1e202 <memcpy>
   1e6fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   1e6fe:	f8c4 8000 	str.w	r8, [r4]
   1e702:	e7e9      	b.n	1e6d8 <__submore+0x48>

0001e704 <_malloc_usable_size_r>:
   1e704:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1e708:	1f18      	subs	r0, r3, #4
   1e70a:	2b00      	cmp	r3, #0
   1e70c:	bfbc      	itt	lt
   1e70e:	580b      	ldrlt	r3, [r1, r0]
   1e710:	18c0      	addlt	r0, r0, r3
   1e712:	4770      	bx	lr

0001e714 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1e714:	f7ec b8e8 	b.w	a8e8 <SystemInit>
