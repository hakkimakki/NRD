
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20004f40 	.word	0x20004f40
    1004:	00006709 	.word	0x00006709
    1008:	00025f75 	.word	0x00025f75
    100c:	00006739 	.word	0x00006739
    1010:	00006739 	.word	0x00006739
    1014:	00006739 	.word	0x00006739
    1018:	00006739 	.word	0x00006739
	...
    102c:	00006455 	.word	0x00006455
    1030:	00006739 	.word	0x00006739
    1034:	00000000 	.word	0x00000000
    1038:	000063fd 	.word	0x000063fd
    103c:	00005ca9 	.word	0x00005ca9

00001040 <_irq_vector_table>:
    1040:	000066c9 0002924d 000066c9 000066c9     .f..M....f...f..
    1050:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    1060:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    1070:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    1080:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    1090:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    10a0:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    10b0:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    10c0:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    10d0:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    10e0:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..
    10f0:	000066c9 000066c9 000066c9 000066c9     .f...f...f...f..

Disassembly of section text:

00001100 <__aeabi_drsub>:
    1100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1104:	e002      	b.n	110c <__adddf3>
    1106:	bf00      	nop

00001108 <__aeabi_dsub>:
    1108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000110c <__adddf3>:
    110c:	b530      	push	{r4, r5, lr}
    110e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    1112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1116:	ea94 0f05 	teq	r4, r5
    111a:	bf08      	it	eq
    111c:	ea90 0f02 	teqeq	r0, r2
    1120:	bf1f      	itttt	ne
    1122:	ea54 0c00 	orrsne.w	ip, r4, r0
    1126:	ea55 0c02 	orrsne.w	ip, r5, r2
    112a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    112e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1132:	f000 80e2 	beq.w	12fa <__adddf3+0x1ee>
    1136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    113a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    113e:	bfb8      	it	lt
    1140:	426d      	neglt	r5, r5
    1142:	dd0c      	ble.n	115e <__adddf3+0x52>
    1144:	442c      	add	r4, r5
    1146:	ea80 0202 	eor.w	r2, r0, r2
    114a:	ea81 0303 	eor.w	r3, r1, r3
    114e:	ea82 0000 	eor.w	r0, r2, r0
    1152:	ea83 0101 	eor.w	r1, r3, r1
    1156:	ea80 0202 	eor.w	r2, r0, r2
    115a:	ea81 0303 	eor.w	r3, r1, r3
    115e:	2d36      	cmp	r5, #54	; 0x36
    1160:	bf88      	it	hi
    1162:	bd30      	pophi	{r4, r5, pc}
    1164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    116c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1174:	d002      	beq.n	117c <__adddf3+0x70>
    1176:	4240      	negs	r0, r0
    1178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    117c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1188:	d002      	beq.n	1190 <__adddf3+0x84>
    118a:	4252      	negs	r2, r2
    118c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1190:	ea94 0f05 	teq	r4, r5
    1194:	f000 80a7 	beq.w	12e6 <__adddf3+0x1da>
    1198:	f1a4 0401 	sub.w	r4, r4, #1
    119c:	f1d5 0e20 	rsbs	lr, r5, #32
    11a0:	db0d      	blt.n	11be <__adddf3+0xb2>
    11a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    11a6:	fa22 f205 	lsr.w	r2, r2, r5
    11aa:	1880      	adds	r0, r0, r2
    11ac:	f141 0100 	adc.w	r1, r1, #0
    11b0:	fa03 f20e 	lsl.w	r2, r3, lr
    11b4:	1880      	adds	r0, r0, r2
    11b6:	fa43 f305 	asr.w	r3, r3, r5
    11ba:	4159      	adcs	r1, r3
    11bc:	e00e      	b.n	11dc <__adddf3+0xd0>
    11be:	f1a5 0520 	sub.w	r5, r5, #32
    11c2:	f10e 0e20 	add.w	lr, lr, #32
    11c6:	2a01      	cmp	r2, #1
    11c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    11cc:	bf28      	it	cs
    11ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    11d2:	fa43 f305 	asr.w	r3, r3, r5
    11d6:	18c0      	adds	r0, r0, r3
    11d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    11dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    11e0:	d507      	bpl.n	11f2 <__adddf3+0xe6>
    11e2:	f04f 0e00 	mov.w	lr, #0
    11e6:	f1dc 0c00 	rsbs	ip, ip, #0
    11ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    11ee:	eb6e 0101 	sbc.w	r1, lr, r1
    11f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    11f6:	d31b      	bcc.n	1230 <__adddf3+0x124>
    11f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    11fc:	d30c      	bcc.n	1218 <__adddf3+0x10c>
    11fe:	0849      	lsrs	r1, r1, #1
    1200:	ea5f 0030 	movs.w	r0, r0, rrx
    1204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1208:	f104 0401 	add.w	r4, r4, #1
    120c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1214:	f080 809a 	bcs.w	134c <__adddf3+0x240>
    1218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    121c:	bf08      	it	eq
    121e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1222:	f150 0000 	adcs.w	r0, r0, #0
    1226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    122a:	ea41 0105 	orr.w	r1, r1, r5
    122e:	bd30      	pop	{r4, r5, pc}
    1230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1234:	4140      	adcs	r0, r0
    1236:	eb41 0101 	adc.w	r1, r1, r1
    123a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    123e:	f1a4 0401 	sub.w	r4, r4, #1
    1242:	d1e9      	bne.n	1218 <__adddf3+0x10c>
    1244:	f091 0f00 	teq	r1, #0
    1248:	bf04      	itt	eq
    124a:	4601      	moveq	r1, r0
    124c:	2000      	moveq	r0, #0
    124e:	fab1 f381 	clz	r3, r1
    1252:	bf08      	it	eq
    1254:	3320      	addeq	r3, #32
    1256:	f1a3 030b 	sub.w	r3, r3, #11
    125a:	f1b3 0220 	subs.w	r2, r3, #32
    125e:	da0c      	bge.n	127a <__adddf3+0x16e>
    1260:	320c      	adds	r2, #12
    1262:	dd08      	ble.n	1276 <__adddf3+0x16a>
    1264:	f102 0c14 	add.w	ip, r2, #20
    1268:	f1c2 020c 	rsb	r2, r2, #12
    126c:	fa01 f00c 	lsl.w	r0, r1, ip
    1270:	fa21 f102 	lsr.w	r1, r1, r2
    1274:	e00c      	b.n	1290 <__adddf3+0x184>
    1276:	f102 0214 	add.w	r2, r2, #20
    127a:	bfd8      	it	le
    127c:	f1c2 0c20 	rsble	ip, r2, #32
    1280:	fa01 f102 	lsl.w	r1, r1, r2
    1284:	fa20 fc0c 	lsr.w	ip, r0, ip
    1288:	bfdc      	itt	le
    128a:	ea41 010c 	orrle.w	r1, r1, ip
    128e:	4090      	lslle	r0, r2
    1290:	1ae4      	subs	r4, r4, r3
    1292:	bfa2      	ittt	ge
    1294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1298:	4329      	orrge	r1, r5
    129a:	bd30      	popge	{r4, r5, pc}
    129c:	ea6f 0404 	mvn.w	r4, r4
    12a0:	3c1f      	subs	r4, #31
    12a2:	da1c      	bge.n	12de <__adddf3+0x1d2>
    12a4:	340c      	adds	r4, #12
    12a6:	dc0e      	bgt.n	12c6 <__adddf3+0x1ba>
    12a8:	f104 0414 	add.w	r4, r4, #20
    12ac:	f1c4 0220 	rsb	r2, r4, #32
    12b0:	fa20 f004 	lsr.w	r0, r0, r4
    12b4:	fa01 f302 	lsl.w	r3, r1, r2
    12b8:	ea40 0003 	orr.w	r0, r0, r3
    12bc:	fa21 f304 	lsr.w	r3, r1, r4
    12c0:	ea45 0103 	orr.w	r1, r5, r3
    12c4:	bd30      	pop	{r4, r5, pc}
    12c6:	f1c4 040c 	rsb	r4, r4, #12
    12ca:	f1c4 0220 	rsb	r2, r4, #32
    12ce:	fa20 f002 	lsr.w	r0, r0, r2
    12d2:	fa01 f304 	lsl.w	r3, r1, r4
    12d6:	ea40 0003 	orr.w	r0, r0, r3
    12da:	4629      	mov	r1, r5
    12dc:	bd30      	pop	{r4, r5, pc}
    12de:	fa21 f004 	lsr.w	r0, r1, r4
    12e2:	4629      	mov	r1, r5
    12e4:	bd30      	pop	{r4, r5, pc}
    12e6:	f094 0f00 	teq	r4, #0
    12ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    12ee:	bf06      	itte	eq
    12f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    12f4:	3401      	addeq	r4, #1
    12f6:	3d01      	subne	r5, #1
    12f8:	e74e      	b.n	1198 <__adddf3+0x8c>
    12fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    12fe:	bf18      	it	ne
    1300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1304:	d029      	beq.n	135a <__adddf3+0x24e>
    1306:	ea94 0f05 	teq	r4, r5
    130a:	bf08      	it	eq
    130c:	ea90 0f02 	teqeq	r0, r2
    1310:	d005      	beq.n	131e <__adddf3+0x212>
    1312:	ea54 0c00 	orrs.w	ip, r4, r0
    1316:	bf04      	itt	eq
    1318:	4619      	moveq	r1, r3
    131a:	4610      	moveq	r0, r2
    131c:	bd30      	pop	{r4, r5, pc}
    131e:	ea91 0f03 	teq	r1, r3
    1322:	bf1e      	ittt	ne
    1324:	2100      	movne	r1, #0
    1326:	2000      	movne	r0, #0
    1328:	bd30      	popne	{r4, r5, pc}
    132a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    132e:	d105      	bne.n	133c <__adddf3+0x230>
    1330:	0040      	lsls	r0, r0, #1
    1332:	4149      	adcs	r1, r1
    1334:	bf28      	it	cs
    1336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    133a:	bd30      	pop	{r4, r5, pc}
    133c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1340:	bf3c      	itt	cc
    1342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1346:	bd30      	popcc	{r4, r5, pc}
    1348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    134c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1354:	f04f 0000 	mov.w	r0, #0
    1358:	bd30      	pop	{r4, r5, pc}
    135a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    135e:	bf1a      	itte	ne
    1360:	4619      	movne	r1, r3
    1362:	4610      	movne	r0, r2
    1364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1368:	bf1c      	itt	ne
    136a:	460b      	movne	r3, r1
    136c:	4602      	movne	r2, r0
    136e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1372:	bf06      	itte	eq
    1374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1378:	ea91 0f03 	teqeq	r1, r3
    137c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1380:	bd30      	pop	{r4, r5, pc}
    1382:	bf00      	nop

00001384 <__aeabi_ui2d>:
    1384:	f090 0f00 	teq	r0, #0
    1388:	bf04      	itt	eq
    138a:	2100      	moveq	r1, #0
    138c:	4770      	bxeq	lr
    138e:	b530      	push	{r4, r5, lr}
    1390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1398:	f04f 0500 	mov.w	r5, #0
    139c:	f04f 0100 	mov.w	r1, #0
    13a0:	e750      	b.n	1244 <__adddf3+0x138>
    13a2:	bf00      	nop

000013a4 <__aeabi_i2d>:
    13a4:	f090 0f00 	teq	r0, #0
    13a8:	bf04      	itt	eq
    13aa:	2100      	moveq	r1, #0
    13ac:	4770      	bxeq	lr
    13ae:	b530      	push	{r4, r5, lr}
    13b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    13b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    13b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    13bc:	bf48      	it	mi
    13be:	4240      	negmi	r0, r0
    13c0:	f04f 0100 	mov.w	r1, #0
    13c4:	e73e      	b.n	1244 <__adddf3+0x138>
    13c6:	bf00      	nop

000013c8 <__aeabi_f2d>:
    13c8:	0042      	lsls	r2, r0, #1
    13ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    13ce:	ea4f 0131 	mov.w	r1, r1, rrx
    13d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    13d6:	bf1f      	itttt	ne
    13d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    13dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    13e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    13e4:	4770      	bxne	lr
    13e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    13ea:	bf08      	it	eq
    13ec:	4770      	bxeq	lr
    13ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    13f2:	bf04      	itt	eq
    13f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    13f8:	4770      	bxeq	lr
    13fa:	b530      	push	{r4, r5, lr}
    13fc:	f44f 7460 	mov.w	r4, #896	; 0x380
    1400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1408:	e71c      	b.n	1244 <__adddf3+0x138>
    140a:	bf00      	nop

0000140c <__aeabi_ul2d>:
    140c:	ea50 0201 	orrs.w	r2, r0, r1
    1410:	bf08      	it	eq
    1412:	4770      	bxeq	lr
    1414:	b530      	push	{r4, r5, lr}
    1416:	f04f 0500 	mov.w	r5, #0
    141a:	e00a      	b.n	1432 <__aeabi_l2d+0x16>

0000141c <__aeabi_l2d>:
    141c:	ea50 0201 	orrs.w	r2, r0, r1
    1420:	bf08      	it	eq
    1422:	4770      	bxeq	lr
    1424:	b530      	push	{r4, r5, lr}
    1426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    142a:	d502      	bpl.n	1432 <__aeabi_l2d+0x16>
    142c:	4240      	negs	r0, r0
    142e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1432:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1436:	f104 0432 	add.w	r4, r4, #50	; 0x32
    143a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    143e:	f43f aed8 	beq.w	11f2 <__adddf3+0xe6>
    1442:	f04f 0203 	mov.w	r2, #3
    1446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    144a:	bf18      	it	ne
    144c:	3203      	addne	r2, #3
    144e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1452:	bf18      	it	ne
    1454:	3203      	addne	r2, #3
    1456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    145a:	f1c2 0320 	rsb	r3, r2, #32
    145e:	fa00 fc03 	lsl.w	ip, r0, r3
    1462:	fa20 f002 	lsr.w	r0, r0, r2
    1466:	fa01 fe03 	lsl.w	lr, r1, r3
    146a:	ea40 000e 	orr.w	r0, r0, lr
    146e:	fa21 f102 	lsr.w	r1, r1, r2
    1472:	4414      	add	r4, r2
    1474:	e6bd      	b.n	11f2 <__adddf3+0xe6>
    1476:	bf00      	nop

00001478 <__aeabi_dmul>:
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    147e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1486:	bf1d      	ittte	ne
    1488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    148c:	ea94 0f0c 	teqne	r4, ip
    1490:	ea95 0f0c 	teqne	r5, ip
    1494:	f000 f8de 	bleq	1654 <__aeabi_dmul+0x1dc>
    1498:	442c      	add	r4, r5
    149a:	ea81 0603 	eor.w	r6, r1, r3
    149e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    14a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    14a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    14aa:	bf18      	it	ne
    14ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    14b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    14b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    14b8:	d038      	beq.n	152c <__aeabi_dmul+0xb4>
    14ba:	fba0 ce02 	umull	ip, lr, r0, r2
    14be:	f04f 0500 	mov.w	r5, #0
    14c2:	fbe1 e502 	umlal	lr, r5, r1, r2
    14c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    14ca:	fbe0 e503 	umlal	lr, r5, r0, r3
    14ce:	f04f 0600 	mov.w	r6, #0
    14d2:	fbe1 5603 	umlal	r5, r6, r1, r3
    14d6:	f09c 0f00 	teq	ip, #0
    14da:	bf18      	it	ne
    14dc:	f04e 0e01 	orrne.w	lr, lr, #1
    14e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    14e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    14e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    14ec:	d204      	bcs.n	14f8 <__aeabi_dmul+0x80>
    14ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    14f2:	416d      	adcs	r5, r5
    14f4:	eb46 0606 	adc.w	r6, r6, r6
    14f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    14fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    1500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    1504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    1508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    150c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1510:	bf88      	it	hi
    1512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1516:	d81e      	bhi.n	1556 <__aeabi_dmul+0xde>
    1518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    151c:	bf08      	it	eq
    151e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    1522:	f150 0000 	adcs.w	r0, r0, #0
    1526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    152a:	bd70      	pop	{r4, r5, r6, pc}
    152c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    1530:	ea46 0101 	orr.w	r1, r6, r1
    1534:	ea40 0002 	orr.w	r0, r0, r2
    1538:	ea81 0103 	eor.w	r1, r1, r3
    153c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    1540:	bfc2      	ittt	gt
    1542:	ebd4 050c 	rsbsgt	r5, r4, ip
    1546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    154a:	bd70      	popgt	{r4, r5, r6, pc}
    154c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1550:	f04f 0e00 	mov.w	lr, #0
    1554:	3c01      	subs	r4, #1
    1556:	f300 80ab 	bgt.w	16b0 <__aeabi_dmul+0x238>
    155a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    155e:	bfde      	ittt	le
    1560:	2000      	movle	r0, #0
    1562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1566:	bd70      	pople	{r4, r5, r6, pc}
    1568:	f1c4 0400 	rsb	r4, r4, #0
    156c:	3c20      	subs	r4, #32
    156e:	da35      	bge.n	15dc <__aeabi_dmul+0x164>
    1570:	340c      	adds	r4, #12
    1572:	dc1b      	bgt.n	15ac <__aeabi_dmul+0x134>
    1574:	f104 0414 	add.w	r4, r4, #20
    1578:	f1c4 0520 	rsb	r5, r4, #32
    157c:	fa00 f305 	lsl.w	r3, r0, r5
    1580:	fa20 f004 	lsr.w	r0, r0, r4
    1584:	fa01 f205 	lsl.w	r2, r1, r5
    1588:	ea40 0002 	orr.w	r0, r0, r2
    158c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1598:	fa21 f604 	lsr.w	r6, r1, r4
    159c:	eb42 0106 	adc.w	r1, r2, r6
    15a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    15a4:	bf08      	it	eq
    15a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    15aa:	bd70      	pop	{r4, r5, r6, pc}
    15ac:	f1c4 040c 	rsb	r4, r4, #12
    15b0:	f1c4 0520 	rsb	r5, r4, #32
    15b4:	fa00 f304 	lsl.w	r3, r0, r4
    15b8:	fa20 f005 	lsr.w	r0, r0, r5
    15bc:	fa01 f204 	lsl.w	r2, r1, r4
    15c0:	ea40 0002 	orr.w	r0, r0, r2
    15c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    15c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    15cc:	f141 0100 	adc.w	r1, r1, #0
    15d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    15d4:	bf08      	it	eq
    15d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    15da:	bd70      	pop	{r4, r5, r6, pc}
    15dc:	f1c4 0520 	rsb	r5, r4, #32
    15e0:	fa00 f205 	lsl.w	r2, r0, r5
    15e4:	ea4e 0e02 	orr.w	lr, lr, r2
    15e8:	fa20 f304 	lsr.w	r3, r0, r4
    15ec:	fa01 f205 	lsl.w	r2, r1, r5
    15f0:	ea43 0302 	orr.w	r3, r3, r2
    15f4:	fa21 f004 	lsr.w	r0, r1, r4
    15f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    15fc:	fa21 f204 	lsr.w	r2, r1, r4
    1600:	ea20 0002 	bic.w	r0, r0, r2
    1604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    1608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    160c:	bf08      	it	eq
    160e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1612:	bd70      	pop	{r4, r5, r6, pc}
    1614:	f094 0f00 	teq	r4, #0
    1618:	d10f      	bne.n	163a <__aeabi_dmul+0x1c2>
    161a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    161e:	0040      	lsls	r0, r0, #1
    1620:	eb41 0101 	adc.w	r1, r1, r1
    1624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1628:	bf08      	it	eq
    162a:	3c01      	subeq	r4, #1
    162c:	d0f7      	beq.n	161e <__aeabi_dmul+0x1a6>
    162e:	ea41 0106 	orr.w	r1, r1, r6
    1632:	f095 0f00 	teq	r5, #0
    1636:	bf18      	it	ne
    1638:	4770      	bxne	lr
    163a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    163e:	0052      	lsls	r2, r2, #1
    1640:	eb43 0303 	adc.w	r3, r3, r3
    1644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    1648:	bf08      	it	eq
    164a:	3d01      	subeq	r5, #1
    164c:	d0f7      	beq.n	163e <__aeabi_dmul+0x1c6>
    164e:	ea43 0306 	orr.w	r3, r3, r6
    1652:	4770      	bx	lr
    1654:	ea94 0f0c 	teq	r4, ip
    1658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    165c:	bf18      	it	ne
    165e:	ea95 0f0c 	teqne	r5, ip
    1662:	d00c      	beq.n	167e <__aeabi_dmul+0x206>
    1664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1668:	bf18      	it	ne
    166a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    166e:	d1d1      	bne.n	1614 <__aeabi_dmul+0x19c>
    1670:	ea81 0103 	eor.w	r1, r1, r3
    1674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1678:	f04f 0000 	mov.w	r0, #0
    167c:	bd70      	pop	{r4, r5, r6, pc}
    167e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1682:	bf06      	itte	eq
    1684:	4610      	moveq	r0, r2
    1686:	4619      	moveq	r1, r3
    1688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    168c:	d019      	beq.n	16c2 <__aeabi_dmul+0x24a>
    168e:	ea94 0f0c 	teq	r4, ip
    1692:	d102      	bne.n	169a <__aeabi_dmul+0x222>
    1694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1698:	d113      	bne.n	16c2 <__aeabi_dmul+0x24a>
    169a:	ea95 0f0c 	teq	r5, ip
    169e:	d105      	bne.n	16ac <__aeabi_dmul+0x234>
    16a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    16a4:	bf1c      	itt	ne
    16a6:	4610      	movne	r0, r2
    16a8:	4619      	movne	r1, r3
    16aa:	d10a      	bne.n	16c2 <__aeabi_dmul+0x24a>
    16ac:	ea81 0103 	eor.w	r1, r1, r3
    16b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    16b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    16b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    16bc:	f04f 0000 	mov.w	r0, #0
    16c0:	bd70      	pop	{r4, r5, r6, pc}
    16c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    16c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    16ca:	bd70      	pop	{r4, r5, r6, pc}

000016cc <__aeabi_ddiv>:
    16cc:	b570      	push	{r4, r5, r6, lr}
    16ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    16d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    16d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    16da:	bf1d      	ittte	ne
    16dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    16e0:	ea94 0f0c 	teqne	r4, ip
    16e4:	ea95 0f0c 	teqne	r5, ip
    16e8:	f000 f8a7 	bleq	183a <__aeabi_ddiv+0x16e>
    16ec:	eba4 0405 	sub.w	r4, r4, r5
    16f0:	ea81 0e03 	eor.w	lr, r1, r3
    16f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    16f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    16fc:	f000 8088 	beq.w	1810 <__aeabi_ddiv+0x144>
    1700:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    1708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    170c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    1710:	ea4f 2202 	mov.w	r2, r2, lsl #8
    1714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    1718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    171c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    1720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    1724:	429d      	cmp	r5, r3
    1726:	bf08      	it	eq
    1728:	4296      	cmpeq	r6, r2
    172a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    172e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    1732:	d202      	bcs.n	173a <__aeabi_ddiv+0x6e>
    1734:	085b      	lsrs	r3, r3, #1
    1736:	ea4f 0232 	mov.w	r2, r2, rrx
    173a:	1ab6      	subs	r6, r6, r2
    173c:	eb65 0503 	sbc.w	r5, r5, r3
    1740:	085b      	lsrs	r3, r3, #1
    1742:	ea4f 0232 	mov.w	r2, r2, rrx
    1746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    174a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    174e:	ebb6 0e02 	subs.w	lr, r6, r2
    1752:	eb75 0e03 	sbcs.w	lr, r5, r3
    1756:	bf22      	ittt	cs
    1758:	1ab6      	subcs	r6, r6, r2
    175a:	4675      	movcs	r5, lr
    175c:	ea40 000c 	orrcs.w	r0, r0, ip
    1760:	085b      	lsrs	r3, r3, #1
    1762:	ea4f 0232 	mov.w	r2, r2, rrx
    1766:	ebb6 0e02 	subs.w	lr, r6, r2
    176a:	eb75 0e03 	sbcs.w	lr, r5, r3
    176e:	bf22      	ittt	cs
    1770:	1ab6      	subcs	r6, r6, r2
    1772:	4675      	movcs	r5, lr
    1774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1778:	085b      	lsrs	r3, r3, #1
    177a:	ea4f 0232 	mov.w	r2, r2, rrx
    177e:	ebb6 0e02 	subs.w	lr, r6, r2
    1782:	eb75 0e03 	sbcs.w	lr, r5, r3
    1786:	bf22      	ittt	cs
    1788:	1ab6      	subcs	r6, r6, r2
    178a:	4675      	movcs	r5, lr
    178c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1790:	085b      	lsrs	r3, r3, #1
    1792:	ea4f 0232 	mov.w	r2, r2, rrx
    1796:	ebb6 0e02 	subs.w	lr, r6, r2
    179a:	eb75 0e03 	sbcs.w	lr, r5, r3
    179e:	bf22      	ittt	cs
    17a0:	1ab6      	subcs	r6, r6, r2
    17a2:	4675      	movcs	r5, lr
    17a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    17a8:	ea55 0e06 	orrs.w	lr, r5, r6
    17ac:	d018      	beq.n	17e0 <__aeabi_ddiv+0x114>
    17ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
    17b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    17b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    17ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    17be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    17c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    17c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    17ca:	d1c0      	bne.n	174e <__aeabi_ddiv+0x82>
    17cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    17d0:	d10b      	bne.n	17ea <__aeabi_ddiv+0x11e>
    17d2:	ea41 0100 	orr.w	r1, r1, r0
    17d6:	f04f 0000 	mov.w	r0, #0
    17da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    17de:	e7b6      	b.n	174e <__aeabi_ddiv+0x82>
    17e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    17e4:	bf04      	itt	eq
    17e6:	4301      	orreq	r1, r0
    17e8:	2000      	moveq	r0, #0
    17ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    17ee:	bf88      	it	hi
    17f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    17f4:	f63f aeaf 	bhi.w	1556 <__aeabi_dmul+0xde>
    17f8:	ebb5 0c03 	subs.w	ip, r5, r3
    17fc:	bf04      	itt	eq
    17fe:	ebb6 0c02 	subseq.w	ip, r6, r2
    1802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1806:	f150 0000 	adcs.w	r0, r0, #0
    180a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    180e:	bd70      	pop	{r4, r5, r6, pc}
    1810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    1814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    1818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    181c:	bfc2      	ittt	gt
    181e:	ebd4 050c 	rsbsgt	r5, r4, ip
    1822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1826:	bd70      	popgt	{r4, r5, r6, pc}
    1828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    182c:	f04f 0e00 	mov.w	lr, #0
    1830:	3c01      	subs	r4, #1
    1832:	e690      	b.n	1556 <__aeabi_dmul+0xde>
    1834:	ea45 0e06 	orr.w	lr, r5, r6
    1838:	e68d      	b.n	1556 <__aeabi_dmul+0xde>
    183a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    183e:	ea94 0f0c 	teq	r4, ip
    1842:	bf08      	it	eq
    1844:	ea95 0f0c 	teqeq	r5, ip
    1848:	f43f af3b 	beq.w	16c2 <__aeabi_dmul+0x24a>
    184c:	ea94 0f0c 	teq	r4, ip
    1850:	d10a      	bne.n	1868 <__aeabi_ddiv+0x19c>
    1852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1856:	f47f af34 	bne.w	16c2 <__aeabi_dmul+0x24a>
    185a:	ea95 0f0c 	teq	r5, ip
    185e:	f47f af25 	bne.w	16ac <__aeabi_dmul+0x234>
    1862:	4610      	mov	r0, r2
    1864:	4619      	mov	r1, r3
    1866:	e72c      	b.n	16c2 <__aeabi_dmul+0x24a>
    1868:	ea95 0f0c 	teq	r5, ip
    186c:	d106      	bne.n	187c <__aeabi_ddiv+0x1b0>
    186e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1872:	f43f aefd 	beq.w	1670 <__aeabi_dmul+0x1f8>
    1876:	4610      	mov	r0, r2
    1878:	4619      	mov	r1, r3
    187a:	e722      	b.n	16c2 <__aeabi_dmul+0x24a>
    187c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1880:	bf18      	it	ne
    1882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1886:	f47f aec5 	bne.w	1614 <__aeabi_dmul+0x19c>
    188a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    188e:	f47f af0d 	bne.w	16ac <__aeabi_dmul+0x234>
    1892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    1896:	f47f aeeb 	bne.w	1670 <__aeabi_dmul+0x1f8>
    189a:	e712      	b.n	16c2 <__aeabi_dmul+0x24a>

0000189c <__aeabi_d2iz>:
    189c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    18a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    18a4:	d215      	bcs.n	18d2 <__aeabi_d2iz+0x36>
    18a6:	d511      	bpl.n	18cc <__aeabi_d2iz+0x30>
    18a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    18ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    18b0:	d912      	bls.n	18d8 <__aeabi_d2iz+0x3c>
    18b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    18b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    18ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    18be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    18c2:	fa23 f002 	lsr.w	r0, r3, r2
    18c6:	bf18      	it	ne
    18c8:	4240      	negne	r0, r0
    18ca:	4770      	bx	lr
    18cc:	f04f 0000 	mov.w	r0, #0
    18d0:	4770      	bx	lr
    18d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    18d6:	d105      	bne.n	18e4 <__aeabi_d2iz+0x48>
    18d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    18dc:	bf08      	it	eq
    18de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    18e2:	4770      	bx	lr
    18e4:	f04f 0000 	mov.w	r0, #0
    18e8:	4770      	bx	lr
    18ea:	bf00      	nop

000018ec <__aeabi_frsub>:
    18ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    18f0:	e002      	b.n	18f8 <__addsf3>
    18f2:	bf00      	nop

000018f4 <__aeabi_fsub>:
    18f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000018f8 <__addsf3>:
    18f8:	0042      	lsls	r2, r0, #1
    18fa:	bf1f      	itttt	ne
    18fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    1900:	ea92 0f03 	teqne	r2, r3
    1904:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    1908:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    190c:	d06a      	beq.n	19e4 <__addsf3+0xec>
    190e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    1912:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    1916:	bfc1      	itttt	gt
    1918:	18d2      	addgt	r2, r2, r3
    191a:	4041      	eorgt	r1, r0
    191c:	4048      	eorgt	r0, r1
    191e:	4041      	eorgt	r1, r0
    1920:	bfb8      	it	lt
    1922:	425b      	neglt	r3, r3
    1924:	2b19      	cmp	r3, #25
    1926:	bf88      	it	hi
    1928:	4770      	bxhi	lr
    192a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    192e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1932:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1936:	bf18      	it	ne
    1938:	4240      	negne	r0, r0
    193a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    193e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    1942:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1946:	bf18      	it	ne
    1948:	4249      	negne	r1, r1
    194a:	ea92 0f03 	teq	r2, r3
    194e:	d03f      	beq.n	19d0 <__addsf3+0xd8>
    1950:	f1a2 0201 	sub.w	r2, r2, #1
    1954:	fa41 fc03 	asr.w	ip, r1, r3
    1958:	eb10 000c 	adds.w	r0, r0, ip
    195c:	f1c3 0320 	rsb	r3, r3, #32
    1960:	fa01 f103 	lsl.w	r1, r1, r3
    1964:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    1968:	d502      	bpl.n	1970 <__addsf3+0x78>
    196a:	4249      	negs	r1, r1
    196c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    1970:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1974:	d313      	bcc.n	199e <__addsf3+0xa6>
    1976:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    197a:	d306      	bcc.n	198a <__addsf3+0x92>
    197c:	0840      	lsrs	r0, r0, #1
    197e:	ea4f 0131 	mov.w	r1, r1, rrx
    1982:	f102 0201 	add.w	r2, r2, #1
    1986:	2afe      	cmp	r2, #254	; 0xfe
    1988:	d251      	bcs.n	1a2e <__addsf3+0x136>
    198a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    198e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1992:	bf08      	it	eq
    1994:	f020 0001 	biceq.w	r0, r0, #1
    1998:	ea40 0003 	orr.w	r0, r0, r3
    199c:	4770      	bx	lr
    199e:	0049      	lsls	r1, r1, #1
    19a0:	eb40 0000 	adc.w	r0, r0, r0
    19a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    19a8:	f1a2 0201 	sub.w	r2, r2, #1
    19ac:	d1ed      	bne.n	198a <__addsf3+0x92>
    19ae:	fab0 fc80 	clz	ip, r0
    19b2:	f1ac 0c08 	sub.w	ip, ip, #8
    19b6:	ebb2 020c 	subs.w	r2, r2, ip
    19ba:	fa00 f00c 	lsl.w	r0, r0, ip
    19be:	bfaa      	itet	ge
    19c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    19c4:	4252      	neglt	r2, r2
    19c6:	4318      	orrge	r0, r3
    19c8:	bfbc      	itt	lt
    19ca:	40d0      	lsrlt	r0, r2
    19cc:	4318      	orrlt	r0, r3
    19ce:	4770      	bx	lr
    19d0:	f092 0f00 	teq	r2, #0
    19d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    19d8:	bf06      	itte	eq
    19da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    19de:	3201      	addeq	r2, #1
    19e0:	3b01      	subne	r3, #1
    19e2:	e7b5      	b.n	1950 <__addsf3+0x58>
    19e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    19e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    19ec:	bf18      	it	ne
    19ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    19f2:	d021      	beq.n	1a38 <__addsf3+0x140>
    19f4:	ea92 0f03 	teq	r2, r3
    19f8:	d004      	beq.n	1a04 <__addsf3+0x10c>
    19fa:	f092 0f00 	teq	r2, #0
    19fe:	bf08      	it	eq
    1a00:	4608      	moveq	r0, r1
    1a02:	4770      	bx	lr
    1a04:	ea90 0f01 	teq	r0, r1
    1a08:	bf1c      	itt	ne
    1a0a:	2000      	movne	r0, #0
    1a0c:	4770      	bxne	lr
    1a0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    1a12:	d104      	bne.n	1a1e <__addsf3+0x126>
    1a14:	0040      	lsls	r0, r0, #1
    1a16:	bf28      	it	cs
    1a18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    1a1c:	4770      	bx	lr
    1a1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    1a22:	bf3c      	itt	cc
    1a24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    1a28:	4770      	bxcc	lr
    1a2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    1a2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    1a32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1a36:	4770      	bx	lr
    1a38:	ea7f 6222 	mvns.w	r2, r2, asr #24
    1a3c:	bf16      	itet	ne
    1a3e:	4608      	movne	r0, r1
    1a40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    1a44:	4601      	movne	r1, r0
    1a46:	0242      	lsls	r2, r0, #9
    1a48:	bf06      	itte	eq
    1a4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    1a4e:	ea90 0f01 	teqeq	r0, r1
    1a52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    1a56:	4770      	bx	lr

00001a58 <__aeabi_ui2f>:
    1a58:	f04f 0300 	mov.w	r3, #0
    1a5c:	e004      	b.n	1a68 <__aeabi_i2f+0x8>
    1a5e:	bf00      	nop

00001a60 <__aeabi_i2f>:
    1a60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    1a64:	bf48      	it	mi
    1a66:	4240      	negmi	r0, r0
    1a68:	ea5f 0c00 	movs.w	ip, r0
    1a6c:	bf08      	it	eq
    1a6e:	4770      	bxeq	lr
    1a70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    1a74:	4601      	mov	r1, r0
    1a76:	f04f 0000 	mov.w	r0, #0
    1a7a:	e01c      	b.n	1ab6 <__aeabi_l2f+0x2a>

00001a7c <__aeabi_ul2f>:
    1a7c:	ea50 0201 	orrs.w	r2, r0, r1
    1a80:	bf08      	it	eq
    1a82:	4770      	bxeq	lr
    1a84:	f04f 0300 	mov.w	r3, #0
    1a88:	e00a      	b.n	1aa0 <__aeabi_l2f+0x14>
    1a8a:	bf00      	nop

00001a8c <__aeabi_l2f>:
    1a8c:	ea50 0201 	orrs.w	r2, r0, r1
    1a90:	bf08      	it	eq
    1a92:	4770      	bxeq	lr
    1a94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    1a98:	d502      	bpl.n	1aa0 <__aeabi_l2f+0x14>
    1a9a:	4240      	negs	r0, r0
    1a9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1aa0:	ea5f 0c01 	movs.w	ip, r1
    1aa4:	bf02      	ittt	eq
    1aa6:	4684      	moveq	ip, r0
    1aa8:	4601      	moveq	r1, r0
    1aaa:	2000      	moveq	r0, #0
    1aac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    1ab0:	bf08      	it	eq
    1ab2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    1ab6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    1aba:	fabc f28c 	clz	r2, ip
    1abe:	3a08      	subs	r2, #8
    1ac0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    1ac4:	db10      	blt.n	1ae8 <__aeabi_l2f+0x5c>
    1ac6:	fa01 fc02 	lsl.w	ip, r1, r2
    1aca:	4463      	add	r3, ip
    1acc:	fa00 fc02 	lsl.w	ip, r0, r2
    1ad0:	f1c2 0220 	rsb	r2, r2, #32
    1ad4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1ad8:	fa20 f202 	lsr.w	r2, r0, r2
    1adc:	eb43 0002 	adc.w	r0, r3, r2
    1ae0:	bf08      	it	eq
    1ae2:	f020 0001 	biceq.w	r0, r0, #1
    1ae6:	4770      	bx	lr
    1ae8:	f102 0220 	add.w	r2, r2, #32
    1aec:	fa01 fc02 	lsl.w	ip, r1, r2
    1af0:	f1c2 0220 	rsb	r2, r2, #32
    1af4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    1af8:	fa21 f202 	lsr.w	r2, r1, r2
    1afc:	eb43 0002 	adc.w	r0, r3, r2
    1b00:	bf08      	it	eq
    1b02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1b06:	4770      	bx	lr

00001b08 <__aeabi_fmul>:
    1b08:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1b0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1b10:	bf1e      	ittt	ne
    1b12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    1b16:	ea92 0f0c 	teqne	r2, ip
    1b1a:	ea93 0f0c 	teqne	r3, ip
    1b1e:	d06f      	beq.n	1c00 <__aeabi_fmul+0xf8>
    1b20:	441a      	add	r2, r3
    1b22:	ea80 0c01 	eor.w	ip, r0, r1
    1b26:	0240      	lsls	r0, r0, #9
    1b28:	bf18      	it	ne
    1b2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    1b2e:	d01e      	beq.n	1b6e <__aeabi_fmul+0x66>
    1b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    1b34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    1b38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    1b3c:	fba0 3101 	umull	r3, r1, r0, r1
    1b40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    1b44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    1b48:	bf3e      	ittt	cc
    1b4a:	0049      	lslcc	r1, r1, #1
    1b4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    1b50:	005b      	lslcc	r3, r3, #1
    1b52:	ea40 0001 	orr.w	r0, r0, r1
    1b56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    1b5a:	2afd      	cmp	r2, #253	; 0xfd
    1b5c:	d81d      	bhi.n	1b9a <__aeabi_fmul+0x92>
    1b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1b62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1b66:	bf08      	it	eq
    1b68:	f020 0001 	biceq.w	r0, r0, #1
    1b6c:	4770      	bx	lr
    1b6e:	f090 0f00 	teq	r0, #0
    1b72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    1b76:	bf08      	it	eq
    1b78:	0249      	lsleq	r1, r1, #9
    1b7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    1b7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    1b82:	3a7f      	subs	r2, #127	; 0x7f
    1b84:	bfc2      	ittt	gt
    1b86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    1b8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    1b8e:	4770      	bxgt	lr
    1b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1b94:	f04f 0300 	mov.w	r3, #0
    1b98:	3a01      	subs	r2, #1
    1b9a:	dc5d      	bgt.n	1c58 <__aeabi_fmul+0x150>
    1b9c:	f112 0f19 	cmn.w	r2, #25
    1ba0:	bfdc      	itt	le
    1ba2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    1ba6:	4770      	bxle	lr
    1ba8:	f1c2 0200 	rsb	r2, r2, #0
    1bac:	0041      	lsls	r1, r0, #1
    1bae:	fa21 f102 	lsr.w	r1, r1, r2
    1bb2:	f1c2 0220 	rsb	r2, r2, #32
    1bb6:	fa00 fc02 	lsl.w	ip, r0, r2
    1bba:	ea5f 0031 	movs.w	r0, r1, rrx
    1bbe:	f140 0000 	adc.w	r0, r0, #0
    1bc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    1bc6:	bf08      	it	eq
    1bc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    1bcc:	4770      	bx	lr
    1bce:	f092 0f00 	teq	r2, #0
    1bd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    1bd6:	bf02      	ittt	eq
    1bd8:	0040      	lsleq	r0, r0, #1
    1bda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    1bde:	3a01      	subeq	r2, #1
    1be0:	d0f9      	beq.n	1bd6 <__aeabi_fmul+0xce>
    1be2:	ea40 000c 	orr.w	r0, r0, ip
    1be6:	f093 0f00 	teq	r3, #0
    1bea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1bee:	bf02      	ittt	eq
    1bf0:	0049      	lsleq	r1, r1, #1
    1bf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    1bf6:	3b01      	subeq	r3, #1
    1bf8:	d0f9      	beq.n	1bee <__aeabi_fmul+0xe6>
    1bfa:	ea41 010c 	orr.w	r1, r1, ip
    1bfe:	e78f      	b.n	1b20 <__aeabi_fmul+0x18>
    1c00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    1c04:	ea92 0f0c 	teq	r2, ip
    1c08:	bf18      	it	ne
    1c0a:	ea93 0f0c 	teqne	r3, ip
    1c0e:	d00a      	beq.n	1c26 <__aeabi_fmul+0x11e>
    1c10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    1c14:	bf18      	it	ne
    1c16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    1c1a:	d1d8      	bne.n	1bce <__aeabi_fmul+0xc6>
    1c1c:	ea80 0001 	eor.w	r0, r0, r1
    1c20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    1c24:	4770      	bx	lr
    1c26:	f090 0f00 	teq	r0, #0
    1c2a:	bf17      	itett	ne
    1c2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    1c30:	4608      	moveq	r0, r1
    1c32:	f091 0f00 	teqne	r1, #0
    1c36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    1c3a:	d014      	beq.n	1c66 <__aeabi_fmul+0x15e>
    1c3c:	ea92 0f0c 	teq	r2, ip
    1c40:	d101      	bne.n	1c46 <__aeabi_fmul+0x13e>
    1c42:	0242      	lsls	r2, r0, #9
    1c44:	d10f      	bne.n	1c66 <__aeabi_fmul+0x15e>
    1c46:	ea93 0f0c 	teq	r3, ip
    1c4a:	d103      	bne.n	1c54 <__aeabi_fmul+0x14c>
    1c4c:	024b      	lsls	r3, r1, #9
    1c4e:	bf18      	it	ne
    1c50:	4608      	movne	r0, r1
    1c52:	d108      	bne.n	1c66 <__aeabi_fmul+0x15e>
    1c54:	ea80 0001 	eor.w	r0, r0, r1
    1c58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    1c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1c64:	4770      	bx	lr
    1c66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1c6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    1c6e:	4770      	bx	lr

00001c70 <__aeabi_fdiv>:
    1c70:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1c74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1c78:	bf1e      	ittt	ne
    1c7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    1c7e:	ea92 0f0c 	teqne	r2, ip
    1c82:	ea93 0f0c 	teqne	r3, ip
    1c86:	d069      	beq.n	1d5c <__aeabi_fdiv+0xec>
    1c88:	eba2 0203 	sub.w	r2, r2, r3
    1c8c:	ea80 0c01 	eor.w	ip, r0, r1
    1c90:	0249      	lsls	r1, r1, #9
    1c92:	ea4f 2040 	mov.w	r0, r0, lsl #9
    1c96:	d037      	beq.n	1d08 <__aeabi_fdiv+0x98>
    1c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1c9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    1ca0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    1ca4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    1ca8:	428b      	cmp	r3, r1
    1caa:	bf38      	it	cc
    1cac:	005b      	lslcc	r3, r3, #1
    1cae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    1cb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    1cb6:	428b      	cmp	r3, r1
    1cb8:	bf24      	itt	cs
    1cba:	1a5b      	subcs	r3, r3, r1
    1cbc:	ea40 000c 	orrcs.w	r0, r0, ip
    1cc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    1cc4:	bf24      	itt	cs
    1cc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    1cca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1cce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    1cd2:	bf24      	itt	cs
    1cd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    1cd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1cdc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    1ce0:	bf24      	itt	cs
    1ce2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    1ce6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1cea:	011b      	lsls	r3, r3, #4
    1cec:	bf18      	it	ne
    1cee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    1cf2:	d1e0      	bne.n	1cb6 <__aeabi_fdiv+0x46>
    1cf4:	2afd      	cmp	r2, #253	; 0xfd
    1cf6:	f63f af50 	bhi.w	1b9a <__aeabi_fmul+0x92>
    1cfa:	428b      	cmp	r3, r1
    1cfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1d00:	bf08      	it	eq
    1d02:	f020 0001 	biceq.w	r0, r0, #1
    1d06:	4770      	bx	lr
    1d08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    1d0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    1d10:	327f      	adds	r2, #127	; 0x7f
    1d12:	bfc2      	ittt	gt
    1d14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    1d18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    1d1c:	4770      	bxgt	lr
    1d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1d22:	f04f 0300 	mov.w	r3, #0
    1d26:	3a01      	subs	r2, #1
    1d28:	e737      	b.n	1b9a <__aeabi_fmul+0x92>
    1d2a:	f092 0f00 	teq	r2, #0
    1d2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    1d32:	bf02      	ittt	eq
    1d34:	0040      	lsleq	r0, r0, #1
    1d36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    1d3a:	3a01      	subeq	r2, #1
    1d3c:	d0f9      	beq.n	1d32 <__aeabi_fdiv+0xc2>
    1d3e:	ea40 000c 	orr.w	r0, r0, ip
    1d42:	f093 0f00 	teq	r3, #0
    1d46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    1d4a:	bf02      	ittt	eq
    1d4c:	0049      	lsleq	r1, r1, #1
    1d4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    1d52:	3b01      	subeq	r3, #1
    1d54:	d0f9      	beq.n	1d4a <__aeabi_fdiv+0xda>
    1d56:	ea41 010c 	orr.w	r1, r1, ip
    1d5a:	e795      	b.n	1c88 <__aeabi_fdiv+0x18>
    1d5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    1d60:	ea92 0f0c 	teq	r2, ip
    1d64:	d108      	bne.n	1d78 <__aeabi_fdiv+0x108>
    1d66:	0242      	lsls	r2, r0, #9
    1d68:	f47f af7d 	bne.w	1c66 <__aeabi_fmul+0x15e>
    1d6c:	ea93 0f0c 	teq	r3, ip
    1d70:	f47f af70 	bne.w	1c54 <__aeabi_fmul+0x14c>
    1d74:	4608      	mov	r0, r1
    1d76:	e776      	b.n	1c66 <__aeabi_fmul+0x15e>
    1d78:	ea93 0f0c 	teq	r3, ip
    1d7c:	d104      	bne.n	1d88 <__aeabi_fdiv+0x118>
    1d7e:	024b      	lsls	r3, r1, #9
    1d80:	f43f af4c 	beq.w	1c1c <__aeabi_fmul+0x114>
    1d84:	4608      	mov	r0, r1
    1d86:	e76e      	b.n	1c66 <__aeabi_fmul+0x15e>
    1d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    1d8c:	bf18      	it	ne
    1d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    1d92:	d1ca      	bne.n	1d2a <__aeabi_fdiv+0xba>
    1d94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    1d98:	f47f af5c 	bne.w	1c54 <__aeabi_fmul+0x14c>
    1d9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    1da0:	f47f af3c 	bne.w	1c1c <__aeabi_fmul+0x114>
    1da4:	e75f      	b.n	1c66 <__aeabi_fmul+0x15e>
    1da6:	bf00      	nop

00001da8 <__aeabi_ldivmod>:
    1da8:	b97b      	cbnz	r3, 1dca <__aeabi_ldivmod+0x22>
    1daa:	b972      	cbnz	r2, 1dca <__aeabi_ldivmod+0x22>
    1dac:	2900      	cmp	r1, #0
    1dae:	bfbe      	ittt	lt
    1db0:	2000      	movlt	r0, #0
    1db2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    1db6:	e006      	blt.n	1dc6 <__aeabi_ldivmod+0x1e>
    1db8:	bf08      	it	eq
    1dba:	2800      	cmpeq	r0, #0
    1dbc:	bf1c      	itt	ne
    1dbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    1dc2:	f04f 30ff 	movne.w	r0, #4294967295
    1dc6:	f000 b9d3 	b.w	2170 <__aeabi_idiv0>
    1dca:	f1ad 0c08 	sub.w	ip, sp, #8
    1dce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1dd2:	2900      	cmp	r1, #0
    1dd4:	db09      	blt.n	1dea <__aeabi_ldivmod+0x42>
    1dd6:	2b00      	cmp	r3, #0
    1dd8:	db1a      	blt.n	1e10 <__aeabi_ldivmod+0x68>
    1dda:	f000 f861 	bl	1ea0 <__udivmoddi4>
    1dde:	f8dd e004 	ldr.w	lr, [sp, #4]
    1de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1de6:	b004      	add	sp, #16
    1de8:	4770      	bx	lr
    1dea:	4240      	negs	r0, r0
    1dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1df0:	2b00      	cmp	r3, #0
    1df2:	db1b      	blt.n	1e2c <__aeabi_ldivmod+0x84>
    1df4:	f000 f854 	bl	1ea0 <__udivmoddi4>
    1df8:	f8dd e004 	ldr.w	lr, [sp, #4]
    1dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1e00:	b004      	add	sp, #16
    1e02:	4240      	negs	r0, r0
    1e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1e08:	4252      	negs	r2, r2
    1e0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1e0e:	4770      	bx	lr
    1e10:	4252      	negs	r2, r2
    1e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1e16:	f000 f843 	bl	1ea0 <__udivmoddi4>
    1e1a:	f8dd e004 	ldr.w	lr, [sp, #4]
    1e1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1e22:	b004      	add	sp, #16
    1e24:	4240      	negs	r0, r0
    1e26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1e2a:	4770      	bx	lr
    1e2c:	4252      	negs	r2, r2
    1e2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1e32:	f000 f835 	bl	1ea0 <__udivmoddi4>
    1e36:	f8dd e004 	ldr.w	lr, [sp, #4]
    1e3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1e3e:	b004      	add	sp, #16
    1e40:	4252      	negs	r2, r2
    1e42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1e46:	4770      	bx	lr

00001e48 <__aeabi_uldivmod>:
    1e48:	b953      	cbnz	r3, 1e60 <__aeabi_uldivmod+0x18>
    1e4a:	b94a      	cbnz	r2, 1e60 <__aeabi_uldivmod+0x18>
    1e4c:	2900      	cmp	r1, #0
    1e4e:	bf08      	it	eq
    1e50:	2800      	cmpeq	r0, #0
    1e52:	bf1c      	itt	ne
    1e54:	f04f 31ff 	movne.w	r1, #4294967295
    1e58:	f04f 30ff 	movne.w	r0, #4294967295
    1e5c:	f000 b988 	b.w	2170 <__aeabi_idiv0>
    1e60:	f1ad 0c08 	sub.w	ip, sp, #8
    1e64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1e68:	f000 f81a 	bl	1ea0 <__udivmoddi4>
    1e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
    1e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1e74:	b004      	add	sp, #16
    1e76:	4770      	bx	lr

00001e78 <__popcountsi2>:
    1e78:	0843      	lsrs	r3, r0, #1
    1e7a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1e7e:	1ac0      	subs	r0, r0, r3
    1e80:	0883      	lsrs	r3, r0, #2
    1e82:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    1e86:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    1e8a:	4418      	add	r0, r3
    1e8c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1e90:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1e94:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    1e98:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1e9c:	0e00      	lsrs	r0, r0, #24
    1e9e:	4770      	bx	lr

00001ea0 <__udivmoddi4>:
    1ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ea4:	9e08      	ldr	r6, [sp, #32]
    1ea6:	4604      	mov	r4, r0
    1ea8:	4688      	mov	r8, r1
    1eaa:	2b00      	cmp	r3, #0
    1eac:	f040 8085 	bne.w	1fba <__udivmoddi4+0x11a>
    1eb0:	428a      	cmp	r2, r1
    1eb2:	4615      	mov	r5, r2
    1eb4:	d948      	bls.n	1f48 <__udivmoddi4+0xa8>
    1eb6:	fab2 f282 	clz	r2, r2
    1eba:	b14a      	cbz	r2, 1ed0 <__udivmoddi4+0x30>
    1ebc:	f1c2 0720 	rsb	r7, r2, #32
    1ec0:	fa01 f302 	lsl.w	r3, r1, r2
    1ec4:	fa20 f707 	lsr.w	r7, r0, r7
    1ec8:	4095      	lsls	r5, r2
    1eca:	ea47 0803 	orr.w	r8, r7, r3
    1ece:	4094      	lsls	r4, r2
    1ed0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1ed4:	0c23      	lsrs	r3, r4, #16
    1ed6:	fbb8 f7fe 	udiv	r7, r8, lr
    1eda:	fa1f fc85 	uxth.w	ip, r5
    1ede:	fb0e 8817 	mls	r8, lr, r7, r8
    1ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    1ee6:	fb07 f10c 	mul.w	r1, r7, ip
    1eea:	4299      	cmp	r1, r3
    1eec:	d909      	bls.n	1f02 <__udivmoddi4+0x62>
    1eee:	18eb      	adds	r3, r5, r3
    1ef0:	f107 30ff 	add.w	r0, r7, #4294967295
    1ef4:	f080 80e3 	bcs.w	20be <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbe>
    1ef8:	4299      	cmp	r1, r3
    1efa:	f240 80e0 	bls.w	20be <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xbe>
    1efe:	3f02      	subs	r7, #2
    1f00:	442b      	add	r3, r5
    1f02:	1a5b      	subs	r3, r3, r1
    1f04:	b2a4      	uxth	r4, r4
    1f06:	fbb3 f0fe 	udiv	r0, r3, lr
    1f0a:	fb0e 3310 	mls	r3, lr, r0, r3
    1f0e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1f12:	fb00 fc0c 	mul.w	ip, r0, ip
    1f16:	45a4      	cmp	ip, r4
    1f18:	d909      	bls.n	1f2e <__udivmoddi4+0x8e>
    1f1a:	192c      	adds	r4, r5, r4
    1f1c:	f100 33ff 	add.w	r3, r0, #4294967295
    1f20:	f080 80cb 	bcs.w	20ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xba>
    1f24:	45a4      	cmp	ip, r4
    1f26:	f240 80c8 	bls.w	20ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xba>
    1f2a:	3802      	subs	r0, #2
    1f2c:	442c      	add	r4, r5
    1f2e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    1f32:	eba4 040c 	sub.w	r4, r4, ip
    1f36:	2700      	movs	r7, #0
    1f38:	b11e      	cbz	r6, 1f42 <__udivmoddi4+0xa2>
    1f3a:	40d4      	lsrs	r4, r2
    1f3c:	2300      	movs	r3, #0
    1f3e:	e9c6 4300 	strd	r4, r3, [r6]
    1f42:	4639      	mov	r1, r7
    1f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f48:	2a00      	cmp	r2, #0
    1f4a:	d053      	beq.n	1ff4 <__udivmoddi4+0x154>
    1f4c:	fab2 f282 	clz	r2, r2
    1f50:	2a00      	cmp	r2, #0
    1f52:	f040 80b6 	bne.w	20c2 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc2>
    1f56:	1b49      	subs	r1, r1, r5
    1f58:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1f5c:	fa1f f885 	uxth.w	r8, r5
    1f60:	2701      	movs	r7, #1
    1f62:	fbb1 fcfe 	udiv	ip, r1, lr
    1f66:	0c23      	lsrs	r3, r4, #16
    1f68:	fb0e 111c 	mls	r1, lr, ip, r1
    1f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    1f70:	fb08 f10c 	mul.w	r1, r8, ip
    1f74:	4299      	cmp	r1, r3
    1f76:	d907      	bls.n	1f88 <__udivmoddi4+0xe8>
    1f78:	18eb      	adds	r3, r5, r3
    1f7a:	f10c 30ff 	add.w	r0, ip, #4294967295
    1f7e:	d202      	bcs.n	1f86 <__udivmoddi4+0xe6>
    1f80:	4299      	cmp	r1, r3
    1f82:	f200 80ec 	bhi.w	215e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15e>
    1f86:	4684      	mov	ip, r0
    1f88:	1a59      	subs	r1, r3, r1
    1f8a:	b2a3      	uxth	r3, r4
    1f8c:	fbb1 f0fe 	udiv	r0, r1, lr
    1f90:	fb0e 1410 	mls	r4, lr, r0, r1
    1f94:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    1f98:	fb08 f800 	mul.w	r8, r8, r0
    1f9c:	45a0      	cmp	r8, r4
    1f9e:	d907      	bls.n	1fb0 <__udivmoddi4+0x110>
    1fa0:	192c      	adds	r4, r5, r4
    1fa2:	f100 33ff 	add.w	r3, r0, #4294967295
    1fa6:	d202      	bcs.n	1fae <__udivmoddi4+0x10e>
    1fa8:	45a0      	cmp	r8, r4
    1faa:	f200 80dc 	bhi.w	2166 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x166>
    1fae:	4618      	mov	r0, r3
    1fb0:	eba4 0408 	sub.w	r4, r4, r8
    1fb4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1fb8:	e7be      	b.n	1f38 <__udivmoddi4+0x98>
    1fba:	428b      	cmp	r3, r1
    1fbc:	d908      	bls.n	1fd0 <__udivmoddi4+0x130>
    1fbe:	2e00      	cmp	r6, #0
    1fc0:	d078      	beq.n	20b4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xb4>
    1fc2:	2700      	movs	r7, #0
    1fc4:	e9c6 0100 	strd	r0, r1, [r6]
    1fc8:	4638      	mov	r0, r7
    1fca:	4639      	mov	r1, r7
    1fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1fd0:	fab3 f783 	clz	r7, r3
    1fd4:	b97f      	cbnz	r7, 1ff6 <__udivmoddi4+0x156>
    1fd6:	428b      	cmp	r3, r1
    1fd8:	d302      	bcc.n	1fe0 <__udivmoddi4+0x140>
    1fda:	4282      	cmp	r2, r0
    1fdc:	f200 80bd 	bhi.w	215a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x15a>
    1fe0:	1a84      	subs	r4, r0, r2
    1fe2:	eb61 0303 	sbc.w	r3, r1, r3
    1fe6:	2001      	movs	r0, #1
    1fe8:	4698      	mov	r8, r3
    1fea:	2e00      	cmp	r6, #0
    1fec:	d0a9      	beq.n	1f42 <__udivmoddi4+0xa2>
    1fee:	e9c6 4800 	strd	r4, r8, [r6]
    1ff2:	e7a6      	b.n	1f42 <__udivmoddi4+0xa2>
    1ff4:	deff      	udf	#255	; 0xff
    1ff6:	f1c7 0520 	rsb	r5, r7, #32
    1ffa:	40bb      	lsls	r3, r7
    1ffc:	fa22 fc05 	lsr.w	ip, r2, r5
    2000:	ea4c 0c03 	orr.w	ip, ip, r3
    2004:	fa01 f407 	lsl.w	r4, r1, r7
    2008:	fa20 f805 	lsr.w	r8, r0, r5
    200c:	fa21 f305 	lsr.w	r3, r1, r5
    2010:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    2014:	ea48 0404 	orr.w	r4, r8, r4
    2018:	fbb3 f9fe 	udiv	r9, r3, lr
    201c:	0c21      	lsrs	r1, r4, #16
    201e:	fb0e 3319 	mls	r3, lr, r9, r3
    2022:	fa1f f88c 	uxth.w	r8, ip
    2026:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    202a:	fb09 fa08 	mul.w	sl, r9, r8
    202e:	459a      	cmp	sl, r3
    2030:	fa02 f207 	lsl.w	r2, r2, r7
    2034:	fa00 f107 	lsl.w	r1, r0, r7
    2038:	d90b      	bls.n	2052 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x52>
    203a:	eb1c 0303 	adds.w	r3, ip, r3
    203e:	f109 30ff 	add.w	r0, r9, #4294967295
    2042:	f080 8088 	bcs.w	2156 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x156>
    2046:	459a      	cmp	sl, r3
    2048:	f240 8085 	bls.w	2156 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x156>
    204c:	f1a9 0902 	sub.w	r9, r9, #2
    2050:	4463      	add	r3, ip
    2052:	eba3 030a 	sub.w	r3, r3, sl
    2056:	b2a4      	uxth	r4, r4
    2058:	fbb3 f0fe 	udiv	r0, r3, lr
    205c:	fb0e 3310 	mls	r3, lr, r0, r3
    2060:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    2064:	fb00 f808 	mul.w	r8, r0, r8
    2068:	45a0      	cmp	r8, r4
    206a:	d908      	bls.n	207e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e>
    206c:	eb1c 0404 	adds.w	r4, ip, r4
    2070:	f100 33ff 	add.w	r3, r0, #4294967295
    2074:	d26b      	bcs.n	214e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14e>
    2076:	45a0      	cmp	r8, r4
    2078:	d969      	bls.n	214e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14e>
    207a:	3802      	subs	r0, #2
    207c:	4464      	add	r4, ip
    207e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    2082:	eba4 0408 	sub.w	r4, r4, r8
    2086:	fba0 8902 	umull	r8, r9, r0, r2
    208a:	454c      	cmp	r4, r9
    208c:	46c6      	mov	lr, r8
    208e:	464b      	mov	r3, r9
    2090:	d354      	bcc.n	213c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x13c>
    2092:	d051      	beq.n	2138 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x138>
    2094:	2e00      	cmp	r6, #0
    2096:	d069      	beq.n	216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>
    2098:	ebb1 020e 	subs.w	r2, r1, lr
    209c:	eb64 0403 	sbc.w	r4, r4, r3
    20a0:	fa04 f505 	lsl.w	r5, r4, r5
    20a4:	fa22 f307 	lsr.w	r3, r2, r7
    20a8:	40fc      	lsrs	r4, r7
    20aa:	431d      	orrs	r5, r3
    20ac:	e9c6 5400 	strd	r5, r4, [r6]
    20b0:	2700      	movs	r7, #0
    20b2:	e746      	b.n	1f42 <__udivmoddi4+0xa2>
    20b4:	4637      	mov	r7, r6
    20b6:	4630      	mov	r0, r6
    20b8:	e743      	b.n	1f42 <__udivmoddi4+0xa2>
    20ba:	4618      	mov	r0, r3
    20bc:	e737      	b.n	1f2e <__udivmoddi4+0x8e>
    20be:	4607      	mov	r7, r0
    20c0:	e71f      	b.n	1f02 <__udivmoddi4+0x62>
    20c2:	f1c2 0320 	rsb	r3, r2, #32
    20c6:	fa20 f703 	lsr.w	r7, r0, r3
    20ca:	4095      	lsls	r5, r2
    20cc:	fa01 f002 	lsl.w	r0, r1, r2
    20d0:	fa21 f303 	lsr.w	r3, r1, r3
    20d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    20d8:	4338      	orrs	r0, r7
    20da:	0c01      	lsrs	r1, r0, #16
    20dc:	fbb3 f7fe 	udiv	r7, r3, lr
    20e0:	fa1f f885 	uxth.w	r8, r5
    20e4:	fb0e 3317 	mls	r3, lr, r7, r3
    20e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    20ec:	fb07 f308 	mul.w	r3, r7, r8
    20f0:	428b      	cmp	r3, r1
    20f2:	fa04 f402 	lsl.w	r4, r4, r2
    20f6:	d907      	bls.n	2108 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x108>
    20f8:	1869      	adds	r1, r5, r1
    20fa:	f107 3cff 	add.w	ip, r7, #4294967295
    20fe:	d228      	bcs.n	2152 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x152>
    2100:	428b      	cmp	r3, r1
    2102:	d926      	bls.n	2152 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x152>
    2104:	3f02      	subs	r7, #2
    2106:	4429      	add	r1, r5
    2108:	1acb      	subs	r3, r1, r3
    210a:	b281      	uxth	r1, r0
    210c:	fbb3 f0fe 	udiv	r0, r3, lr
    2110:	fb0e 3310 	mls	r3, lr, r0, r3
    2114:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    2118:	fb00 f308 	mul.w	r3, r0, r8
    211c:	428b      	cmp	r3, r1
    211e:	d907      	bls.n	2130 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x130>
    2120:	1869      	adds	r1, r5, r1
    2122:	f100 3cff 	add.w	ip, r0, #4294967295
    2126:	d210      	bcs.n	214a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14a>
    2128:	428b      	cmp	r3, r1
    212a:	d90e      	bls.n	214a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14a>
    212c:	3802      	subs	r0, #2
    212e:	4429      	add	r1, r5
    2130:	1ac9      	subs	r1, r1, r3
    2132:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    2136:	e714      	b.n	1f62 <__udivmoddi4+0xc2>
    2138:	4541      	cmp	r1, r8
    213a:	d2ab      	bcs.n	2094 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x94>
    213c:	ebb8 0e02 	subs.w	lr, r8, r2
    2140:	eb69 020c 	sbc.w	r2, r9, ip
    2144:	3801      	subs	r0, #1
    2146:	4613      	mov	r3, r2
    2148:	e7a4      	b.n	2094 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x94>
    214a:	4660      	mov	r0, ip
    214c:	e7f0      	b.n	2130 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x130>
    214e:	4618      	mov	r0, r3
    2150:	e795      	b.n	207e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x7e>
    2152:	4667      	mov	r7, ip
    2154:	e7d8      	b.n	2108 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x108>
    2156:	4681      	mov	r9, r0
    2158:	e77b      	b.n	2052 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x52>
    215a:	4638      	mov	r0, r7
    215c:	e745      	b.n	1fea <__udivmoddi4+0x14a>
    215e:	f1ac 0c02 	sub.w	ip, ip, #2
    2162:	442b      	add	r3, r5
    2164:	e710      	b.n	1f88 <__udivmoddi4+0xe8>
    2166:	3802      	subs	r0, #2
    2168:	442c      	add	r4, r5
    216a:	e721      	b.n	1fb0 <__udivmoddi4+0x110>
    216c:	4637      	mov	r7, r6
    216e:	e6e8      	b.n	1f42 <__udivmoddi4+0xa2>

00002170 <__aeabi_idiv0>:
    2170:	4770      	bx	lr
    2172:	bf00      	nop
    2174:	0000      	movs	r0, r0
	...

00002178 <doubleToSensorValue>:

static int rc;
static int32_t temperature, humidity;

// the good stuff
void doubleToSensorValue(double d, struct sensor_value *val) {
    2178:	b5d0      	push	{r4, r6, r7, lr}
    217a:	4614      	mov	r4, r2
    217c:	460f      	mov	r7, r1
    217e:	4606      	mov	r6, r0
  val->val1 = (int)d;
    2180:	f7ff fb8c 	bl	189c <__aeabi_d2iz>
    2184:	6020      	str	r0, [r4, #0]
  val->val2 = (d - val->val1) * 1000000;
    2186:	f7ff f90d 	bl	13a4 <__aeabi_i2d>
    218a:	4602      	mov	r2, r0
    218c:	460b      	mov	r3, r1
    218e:	4630      	mov	r0, r6
    2190:	4639      	mov	r1, r7
    2192:	f7fe ffb9 	bl	1108 <__aeabi_dsub>
    2196:	a304      	add	r3, pc, #16	; (adr r3, 21a8 <doubleToSensorValue+0x30>)
    2198:	e9d3 2300 	ldrd	r2, r3, [r3]
    219c:	f7ff f96c 	bl	1478 <__aeabi_dmul>
    21a0:	f7ff fb7c 	bl	189c <__aeabi_d2iz>
    21a4:	6060      	str	r0, [r4, #4]
}
    21a6:	bdd0      	pop	{r4, r6, r7, pc}
    21a8:	00000000 	.word	0x00000000
    21ac:	412e8480 	.word	0x412e8480

000021b0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    21b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21b4:	4689      	mov	r9, r1
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
    21b6:	e9d0 710a 	ldrd	r7, r1, [r0, #40]	; 0x28
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    21ba:	6b06      	ldr	r6, [r0, #48]	; 0x30
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
    21bc:	4d16      	ldr	r5, [pc, #88]	; (2218 <ull_drift_ticks_get+0x68>)
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    21be:	198c      	adds	r4, r1, r6
	start_to_address_expected_us = EVENT_JITTER_US +
    21c0:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    21c2:	42a7      	cmp	r7, r4
{
    21c4:	4690      	mov	r8, r2
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    21c6:	a312      	add	r3, pc, #72	; (adr r3, 2210 <ull_drift_ticks_get+0x60>)
    21c8:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    21cc:	d815      	bhi.n	21fa <ull_drift_ticks_get+0x4a>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    21ce:	fba1 0105 	umull	r0, r1, r1, r5
    21d2:	f7ff fe39 	bl	1e48 <__aeabi_uldivmod>
    21d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    21da:	f8c9 0000 	str.w	r0, [r9]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    21de:	1be0      	subs	r0, r4, r7
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    21e0:	a30b      	add	r3, pc, #44	; (adr r3, 2210 <ull_drift_ticks_get+0x60>)
    21e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    21e6:	fba0 0105 	umull	r0, r1, r0, r5
    21ea:	f7ff fe2d 	bl	1e48 <__aeabi_uldivmod>
    21ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    21f2:	f8c8 0000 	str.w	r0, [r8]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    21f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    21fa:	fba7 0105 	umull	r0, r1, r7, r5
    21fe:	f7ff fe23 	bl	1e48 <__aeabi_uldivmod>
    2202:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    2206:	f8c9 0000 	str.w	r0, [r9]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    220a:	f106 0030 	add.w	r0, r6, #48	; 0x30
    220e:	e7e7      	b.n	21e0 <ull_drift_ticks_get+0x30>
    2210:	1afd498d 	.word	0x1afd498d
    2214:	00000007 	.word	0x00000007
    2218:	3b9aca00 	.word	0x3b9aca00
    221c:	00000000 	.word	0x00000000

00002220 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    2220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2224:	b08d      	sub	sp, #52	; 0x34
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    2226:	b930      	cbnz	r0, 2236 <ll_adv_enable+0x16>
		return disable(handle);
    2228:	f017 f91a 	bl	19460 <disable.constprop.6>
    222c:	4606      	mov	r6, r0
		conn_release(adv);
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return BT_HCI_ERR_CMD_DISALLOWED;
}
    222e:	4630      	mov	r0, r6
    2230:	b00d      	add	sp, #52	; 0x34
    2232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    2236:	4bca      	ldr	r3, [pc, #808]	; (2560 <ll_adv_enable+0x340>)
    2238:	f893 604e 	ldrb.w	r6, [r3, #78]	; 0x4e
    223c:	f016 0601 	ands.w	r6, r6, #1
    2240:	461d      	mov	r5, r3
    2242:	d001      	beq.n	2248 <ll_adv_enable+0x28>
	return BT_HCI_ERR_CMD_DISALLOWED;
    2244:	260c      	movs	r6, #12
    2246:	e7f2      	b.n	222e <ll_adv_enable+0xe>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    2248:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
    224c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2250:	6b17      	ldr	r7, [r2, #48]	; 0x30
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    2252:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    2256:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    225a:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
	if (pdu_adv_to_update) {
    225e:	b147      	cbz	r7, 2272 <ll_adv_enable+0x52>
	adv_addr = adva_update(adv, pdu);
    2260:	4638      	mov	r0, r7
    2262:	f026 fd91 	bl	28d88 <adva_update.isra.4>
		if (pdu_adv_to_update->tx_addr &&
    2266:	783b      	ldrb	r3, [r7, #0]
    2268:	065a      	lsls	r2, r3, #25
    226a:	d417      	bmi.n	229c <ll_adv_enable+0x7c>
	adv_addr = adva_update(adv, pdu);
    226c:	4640      	mov	r0, r8
    226e:	f026 fd8b 	bl	28d88 <adva_update.isra.4>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    2272:	783b      	ldrb	r3, [r7, #0]
    2274:	f013 0f0e 	tst.w	r3, #14
    2278:	f040 8098 	bne.w	23ac <ll_adv_enable+0x18c>
		if (lll->conn) {
    227c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    227e:	2b00      	cmp	r3, #0
    2280:	d1e0      	bne.n	2244 <ll_adv_enable+0x24>
		link = ll_rx_link_alloc();
    2282:	f016 fb5b 	bl	1893c <ll_rx_link_alloc>
		if (!link) {
    2286:	4681      	mov	r9, r0
    2288:	b130      	cbz	r0, 2298 <ll_adv_enable+0x78>
		node_rx = ll_rx_alloc();
    228a:	f016 fb63 	bl	18954 <ll_rx_alloc>
		if (!node_rx) {
    228e:	4682      	mov	sl, r0
    2290:	b958      	cbnz	r0, 22aa <ll_adv_enable+0x8a>
			ll_rx_link_release(link);
    2292:	4648      	mov	r0, r9
    2294:	f016 fb58 	bl	18948 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    2298:	2607      	movs	r6, #7
    229a:	e7c8      	b.n	222e <ll_adv_enable+0xe>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    229c:	2106      	movs	r1, #6
    229e:	f026 fa40 	bl	28722 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    22a2:	2800      	cmp	r0, #0
    22a4:	d1e2      	bne.n	226c <ll_adv_enable+0x4c>
			return BT_HCI_ERR_INVALID_PARAM;
    22a6:	2612      	movs	r6, #18
    22a8:	e7c1      	b.n	222e <ll_adv_enable+0xe>
		conn = ll_conn_acquire();
    22aa:	f017 fb83 	bl	199b4 <ll_conn_acquire>
		if (!conn) {
    22ae:	4604      	mov	r4, r0
    22b0:	b918      	cbnz	r0, 22ba <ll_adv_enable+0x9a>
			ll_rx_release(node_rx);
    22b2:	4650      	mov	r0, sl
    22b4:	f016 fb54 	bl	18960 <ll_rx_release>
    22b8:	e7eb      	b.n	2292 <ll_adv_enable+0x72>
		conn_lll->handle = 0xFFFF;
    22ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    22be:	8583      	strh	r3, [r0, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
    22c0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
		conn_lll = &conn->lll;
    22c2:	f100 0b1c 	add.w	fp, r0, #28
		if (!conn_lll->link_tx_free) {
    22c6:	b913      	cbnz	r3, 22ce <ll_adv_enable+0xae>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    22c8:	f100 0364 	add.w	r3, r0, #100	; 0x64
    22cc:	66c3      	str	r3, [r0, #108]	; 0x6c
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    22ce:	f104 0260 	add.w	r2, r4, #96	; 0x60
    22d2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    22d6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    22d8:	f026 fa2e 	bl	28738 <memq_init>
		conn_lll->sn = 0;
    22dc:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
		conn->llcp_terminate.node_rx.hdr.link = link;
    22e0:	f8c4 90cc 	str.w	r9, [r4, #204]	; 0xcc
		conn_lll->sn = 0;
    22e4:	f022 0207 	bic.w	r2, r2, #7
    22e8:	f884 2072 	strb.w	r2, [r4, #114]	; 0x72
		conn_lll->data_chan_sel = 0;
    22ec:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    22f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    22f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    22f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
    22fc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
		conn_lll->link_tx_free = NULL;
    2300:	2300      	movs	r3, #0
		conn_lll->slave.latency_enabled = 0;
    2302:	f363 0200 	bfi	r2, r3, #0, #1
    2306:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
		conn->connect_expire = 6;
    230a:	2206      	movs	r2, #6
    230c:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
		conn->common.fex_valid = 0;
    2310:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
		conn_lll->link_tx_free = NULL;
    2314:	66e3      	str	r3, [r4, #108]	; 0x6c
		conn->common.fex_valid = 0;
    2316:	f022 0203 	bic.w	r2, r2, #3
    231a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
		conn->llcp_feature.features_conn = LL_FEAT;
    231e:	228e      	movs	r2, #142	; 0x8e
		conn->llcp_feature.features_peer = 0;
    2320:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    2324:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		conn_lll->packet_tx_head_len = 0;
    2328:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    232c:	f022 0203 	bic.w	r2, r2, #3
		conn_lll->data_chan_use = 0;
    2330:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    2334:	8663      	strh	r3, [r4, #50]	; 0x32
		conn_lll->latency_event = 0;
    2336:	6363      	str	r3, [r4, #52]	; 0x34
		conn_lll->slave.window_widening_event_us = 0;
    2338:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		conn_lll->slave.window_size_prepare_us = 0;
    233c:	6563      	str	r3, [r4, #84]	; 0x54
		conn->supervision_expire = 0;
    233e:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
		conn->procedure_expire = 0;
    2342:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    2346:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    234a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
		conn->llcp_rx = NULL;
    234e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    2352:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    2356:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    235a:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    235e:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp_terminate.reason_peer = 0;
    2362:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
		conn->llcp_conn_param.req = 0;
    2366:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
		conn->llcp_conn_param.disabled = 0;
    236a:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		lll->conn = conn_lll;
    236e:	f8c5 b024 	str.w	fp, [r5, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
    2372:	e9c5 9a11 	strd	r9, sl, [r5, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
    2376:	f363 1204 	bfi	r2, r3, #4, #1
    237a:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    237e:	f894 2020 	ldrb.w	r2, [r4, #32]
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    2382:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    2386:	f363 0200 	bfi	r2, r3, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
    238a:	e9c4 3348 	strd	r3, r3, [r4, #288]	; 0x120
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    238e:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    2392:	e9c4 3305 	strd	r3, r3, [r4, #20]
	hdr->parent = parent;
    2396:	61e4      	str	r4, [r4, #28]
	hdr->is_stop = 0U;
    2398:	f884 2020 	strb.w	r2, [r4, #32]
		err = lll_clock_wait();
    239c:	f019 f816 	bl	1b3cc <lll_clock_wait>
		if (err) {
    23a0:	b120      	cbz	r0, 23ac <ll_adv_enable+0x18c>
			conn_release(adv);
    23a2:	486f      	ldr	r0, [pc, #444]	; (2560 <ll_adv_enable+0x340>)
    23a4:	f016 fee2 	bl	1916c <conn_release>
			return BT_HCI_ERR_HW_FAILURE;
    23a8:	2603      	movs	r6, #3
    23aa:	e740      	b.n	222e <ll_adv_enable+0xe>
	uint8_t ch_map = lll->chan_map;
    23ac:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    23b0:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    23b2:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    23b6:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
	uint8_t ch_map = lll->chan_map;
    23ba:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    23be:	f026 f9e7 	bl	28790 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    23c2:	2800      	cmp	r0, #0
    23c4:	f000 80bf 	beq.w	2546 <ll_adv_enable+0x326>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    23c8:	783a      	ldrb	r2, [r7, #0]
    23ca:	f002 020f 	and.w	r2, r2, #15
    23ce:	2a02      	cmp	r2, #2
    23d0:	f100 34ff 	add.w	r4, r0, #4294967295
    23d4:	d172      	bne.n	24bc <ll_adv_enable+0x29c>
			adv_size += pdu_adv->len;
    23d6:	787a      	ldrb	r2, [r7, #1]
    23d8:	3210      	adds	r2, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    23da:	00d2      	lsls	r2, r2, #3
    23dc:	4350      	muls	r0, r2
    23de:	f500 72aa 	add.w	r2, r0, #340	; 0x154
    23e2:	2064      	movs	r0, #100	; 0x64
    23e4:	fb00 2004 	mla	r0, r0, r4, r2
    23e8:	f895 3020 	ldrb.w	r3, [r5, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    23ec:	495d      	ldr	r1, [pc, #372]	; (2564 <ll_adv_enable+0x344>)
	hdr->parent = parent;
    23ee:	61ed      	str	r5, [r5, #28]
    23f0:	2400      	movs	r4, #0
	hdr->is_stop = 0U;
    23f2:	f364 0300 	bfi	r3, r4, #0, #1
    23f6:	f885 3020 	strb.w	r3, [r5, #32]
	adv->evt.ticks_xtal_to_start =
    23fa:	2331      	movs	r3, #49	; 0x31
    23fc:	602b      	str	r3, [r5, #0]
    23fe:	e9c5 4405 	strd	r4, r4, [r5, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    2402:	a355      	add	r3, pc, #340	; (adr r3, 2558 <ll_adv_enable+0x338>)
    2404:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_active_to_start = 0;
    2408:	606c      	str	r4, [r5, #4]
	adv->evt.ticks_preempt_to_start =
    240a:	60ac      	str	r4, [r5, #8]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    240c:	fba0 0101 	umull	r0, r1, r0, r1
    2410:	f7ff fd1a 	bl	1e48 <__aeabi_uldivmod>
    2414:	60e8      	str	r0, [r5, #12]
	uint16_t interval = adv->interval;
    2416:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
	ticks_anchor = ticker_ticks_now_get();
    241a:	f026 fc21 	bl	28c60 <ticker_ticks_now_get>
    241e:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    2420:	f1b8 0f00 	cmp.w	r8, #0
    2424:	d105      	bne.n	2432 <ll_adv_enable+0x212>
    2426:	783c      	ldrb	r4, [r7, #0]
    2428:	f004 040f 	and.w	r4, r4, #15
    242c:	1e63      	subs	r3, r4, #1
    242e:	425c      	negs	r4, r3
    2430:	415c      	adcs	r4, r3
    2432:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    2436:	68eb      	ldr	r3, [r5, #12]
    2438:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2578 <ll_adv_enable+0x358>
    243c:	f364 0200 	bfi	r2, r4, #0, #1
	if (lll->is_hdcd) {
    2440:	f012 0401 	ands.w	r4, r2, #1
    2444:	f04f 0a02 	mov.w	sl, #2
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    2448:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	if (lll->is_hdcd) {
    244c:	af0b      	add	r7, sp, #44	; 0x2c
    244e:	4a46      	ldr	r2, [pc, #280]	; (2568 <ll_adv_enable+0x348>)
		ret_cb = TICKER_STATUS_BUSY;
    2450:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	if (lll->is_hdcd) {
    2454:	d053      	beq.n	24fe <ll_adv_enable+0x2de>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2456:	2000      	movs	r0, #0
    2458:	e9cd 2505 	strd	r2, r5, [sp, #20]
    245c:	9304      	str	r3, [sp, #16]
    245e:	e9cd 0300 	strd	r0, r3, [sp]
    2462:	2103      	movs	r1, #3
    2464:	e9cd b707 	strd	fp, r7, [sp, #28]
    2468:	e9cd 0002 	strd	r0, r0, [sp, #8]
    246c:	464b      	mov	r3, r9
    246e:	4652      	mov	r2, sl
    2470:	f026 fbc3 	bl	28bfa <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    2474:	4639      	mov	r1, r7
    2476:	f016 faff 	bl	18a78 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    247a:	2800      	cmp	r0, #0
    247c:	d163      	bne.n	2546 <ll_adv_enable+0x326>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    247e:	4a3b      	ldr	r2, [pc, #236]	; (256c <ll_adv_enable+0x34c>)
    2480:	9506      	str	r5, [sp, #24]
    2482:	f24a 33d8 	movw	r3, #41944	; 0xa3d8
    2486:	e9cd 0204 	strd	r0, r2, [sp, #16]
    248a:	9300      	str	r3, [sp, #0]
    248c:	e9cd b707 	strd	fp, r7, [sp, #28]
    2490:	e9cd 0002 	strd	r0, r0, [sp, #8]
    2494:	9001      	str	r0, [sp, #4]
    2496:	464b      	mov	r3, r9
    2498:	2201      	movs	r2, #1
    249a:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    249c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    24a0:	f026 fbab 	bl	28bfa <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    24a4:	4639      	mov	r1, r7
    24a6:	f016 fae7 	bl	18a78 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    24aa:	2800      	cmp	r0, #0
    24ac:	d14b      	bne.n	2546 <ll_adv_enable+0x326>
	adv->is_enabled = 1;
    24ae:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    24b2:	f043 0301 	orr.w	r3, r3, #1
    24b6:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
	return 0;
    24ba:	e6b8      	b.n	222e <ll_adv_enable+0xe>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    24bc:	2a01      	cmp	r2, #1
    24be:	d016      	beq.n	24ee <ll_adv_enable+0x2ce>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    24c0:	f898 3001 	ldrb.w	r3, [r8, #1]
    24c4:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
    24c6:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    24c8:	b95a      	cbnz	r2, 24e2 <ll_adv_enable+0x2c2>
				adv_size += pdu_adv->len;
    24ca:	787a      	ldrb	r2, [r7, #1]
    24cc:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    24ce:	f503 7327 	add.w	r3, r3, #668	; 0x29c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    24d2:	00d2      	lsls	r2, r2, #3
    24d4:	3398      	adds	r3, #152	; 0x98
    24d6:	4413      	add	r3, r2
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    24d8:	f502 729a 	add.w	r2, r2, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    24dc:	fb04 3002 	mla	r0, r4, r2, r3
    24e0:	e782      	b.n	23e8 <ll_adv_enable+0x1c8>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    24e2:	2a06      	cmp	r2, #6
    24e4:	d107      	bne.n	24f6 <ll_adv_enable+0x2d6>
				adv_size += pdu_adv->len;
    24e6:	7879      	ldrb	r1, [r7, #1]
    24e8:	f101 0210 	add.w	r2, r1, #16
    24ec:	e7ef      	b.n	24ce <ll_adv_enable+0x2ae>
				adv_size += TARGETA_SIZE;
    24ee:	2216      	movs	r2, #22
				slot_us += conn_ind_us;
    24f0:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    24f4:	e7ed      	b.n	24d2 <ll_adv_enable+0x2b2>
		uint32_t adv_size		= PDU_OVERHEAD_SIZE(phy) +
    24f6:	2210      	movs	r2, #16
	uint32_t slot_us = EVENT_OVERHEAD_START_US + EVENT_OVERHEAD_END_US;
    24f8:	f44f 73aa 	mov.w	r3, #340	; 0x154
    24fc:	e7e9      	b.n	24d2 <ll_adv_enable+0x2b2>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    24fe:	491c      	ldr	r1, [pc, #112]	; (2570 <ll_adv_enable+0x350>)
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    2500:	f203 1047 	addw	r0, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    2504:	6008      	str	r0, [r1, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    2506:	481b      	ldr	r0, [pc, #108]	; (2574 <ll_adv_enable+0x354>)
		ret = ticker_start_ext(
    2508:	e9cd 3204 	strd	r3, r2, [sp, #16]
    250c:	e9cd 5b06 	strd	r5, fp, [sp, #24]
    2510:	f64f 73ff 	movw	r3, #65535	; 0xffff
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    2514:	fa1f fb88 	uxth.w	fp, r8
		ret = ticker_start_ext(
    2518:	e9cd 7108 	strd	r7, r1, [sp, #32]
    251c:	e9cd 4302 	strd	r4, r3, [sp, #8]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    2520:	fbab 0100 	umull	r0, r1, fp, r0
    2524:	2391      	movs	r3, #145	; 0x91
    2526:	fb03 110b 	mla	r1, r3, fp, r1
    252a:	a30b      	add	r3, pc, #44	; (adr r3, 2558 <ll_adv_enable+0x338>)
    252c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2530:	f7ff fc8a 	bl	1e48 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    2534:	464b      	mov	r3, r9
    2536:	e9cd 4000 	strd	r4, r0, [sp]
    253a:	4652      	mov	r2, sl
    253c:	2103      	movs	r1, #3
    253e:	4620      	mov	r0, r4
    2540:	f014 fdd0 	bl	170e4 <ticker_start_ext>
    2544:	e7ae      	b.n	24a4 <ll_adv_enable+0x284>
	if (adv->lll.conn) {
    2546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2548:	2b00      	cmp	r3, #0
    254a:	f43f ae7b 	beq.w	2244 <ll_adv_enable+0x24>
		conn_release(adv);
    254e:	4804      	ldr	r0, [pc, #16]	; (2560 <ll_adv_enable+0x340>)
    2550:	f016 fe0c 	bl	1916c <conn_release>
    2554:	e676      	b.n	2244 <ll_adv_enable+0x24>
    2556:	bf00      	nop
    2558:	1afd498d 	.word	0x1afd498d
    255c:	00000007 	.word	0x00000007
    2560:	20002d70 	.word	0x20002d70
    2564:	3b9aca00 	.word	0x3b9aca00
    2568:	0001907d 	.word	0x0001907d
    256c:	000192bd 	.word	0x000192bd
    2570:	20002dc0 	.word	0x20002dc0
    2574:	84e72a00 	.word	0x84e72a00
    2578:	000183a1 	.word	0x000183a1
    257c:	00000000 	.word	0x00000000

00002580 <ull_scan_enable>:
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
						   SCAN_INT_UNIT_US);
}

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
    2580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t volatile ret_cb;
	uint32_t ticks_interval;
	uint32_t ticks_anchor;
	uint32_t ret;

	lll->chan = 0;
    2584:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    2588:	4f41      	ldr	r7, [pc, #260]	; (2690 <ull_scan_enable+0x110>)
{
    258a:	4604      	mov	r4, r0
	lll->init_addr_type = scan->own_addr_type;
    258c:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
    2590:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    2594:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2598:	f360 1386 	bfi	r3, r0, #6, #1
{
    259c:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
    259e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    25a2:	f104 0125 	add.w	r1, r4, #37	; 0x25
    25a6:	f014 fe6d 	bl	17284 <ll_addr_get>
    25aa:	f894 3020 	ldrb.w	r3, [r4, #32]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    25ae:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
	hdr->parent = parent;
    25b2:	61e4      	str	r4, [r4, #28]
    25b4:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    25b6:	f365 0300 	bfi	r3, r5, #0, #1
    25ba:	fba8 0107 	umull	r0, r1, r8, r7
    25be:	f884 3020 	strb.w	r3, [r4, #32]
    25c2:	2391      	movs	r3, #145	; 0x91
    25c4:	fb03 1108 	mla	r1, r3, r8, r1
    25c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
    25cc:	a32e      	add	r3, pc, #184	; (adr r3, 2688 <ull_scan_enable+0x108>)
    25ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    25d2:	f7ff fc39 	bl	1e48 <__aeabi_uldivmod>
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->evt.ticks_active_to_start = 0U;
	scan->evt.ticks_xtal_to_start =
    25d6:	2331      	movs	r3, #49	; 0x31
    25d8:	6023      	str	r3, [r4, #0]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
    25da:	6b63      	ldr	r3, [r4, #52]	; 0x34
	scan->evt.ticks_active_to_start = 0U;
    25dc:	6065      	str	r5, [r4, #4]
	if ((lll->ticks_window +
    25de:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
    25e0:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    25e4:	4293      	cmp	r3, r2
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->evt.ticks_slot =
    25e6:	bf32      	itee	cc
    25e8:	60e3      	strcc	r3, [r4, #12]
			(lll->ticks_window +
			 HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US));
	} else {
		if (IS_ENABLED(CONFIG_BT_CTLR_SCAN_UNRESERVED)) {
			scan->evt.ticks_slot = 0U;
    25ea:	60e5      	strcs	r5, [r4, #12]
		} else {
			scan->evt.ticks_slot = ticks_interval -
				HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
		}

		lll->ticks_window = 0U;
    25ec:	6365      	strcs	r5, [r4, #52]	; 0x34
	scan->evt.ticks_preempt_to_start =
    25ee:	60a5      	str	r5, [r4, #8]
	return &ll_scan[handle];
}

uint8_t ull_scan_handle_get(struct ll_scan_set *scan)
{
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    25f0:	4d28      	ldr	r5, [pc, #160]	; (2694 <ull_scan_enable+0x114>)
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    25f2:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    25f4:	f026 fb34 	bl	28c60 <ticker_ticks_now_get>
	ret_cb = TICKER_STATUS_BUSY;
    25f8:	2302      	movs	r3, #2
    25fa:	930b      	str	r3, [sp, #44]	; 0x2c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    25fc:	1b65      	subs	r5, r4, r5
    25fe:	233c      	movs	r3, #60	; 0x3c
    2600:	fbb5 f5f3 	udiv	r5, r5, r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2604:	4b24      	ldr	r3, [pc, #144]	; (2698 <ull_scan_enable+0x118>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    2606:	f8b4 b032 	ldrh.w	fp, [r4, #50]	; 0x32
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    260a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    260e:	4b23      	ldr	r3, [pc, #140]	; (269c <ull_scan_enable+0x11c>)
    2610:	9305      	str	r3, [sp, #20]
    2612:	46ba      	mov	sl, r7
    2614:	68e3      	ldr	r3, [r4, #12]
    2616:	9304      	str	r3, [sp, #16]
	ticks_anchor = ticker_ticks_now_get();
    2618:	4607      	mov	r7, r0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    261a:	2391      	movs	r3, #145	; 0x91
    261c:	fbab 010a 	umull	r0, r1, fp, sl
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2620:	f04f 0800 	mov.w	r8, #0
    2624:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    2628:	fb03 110b 	mla	r1, r3, fp, r1
    262c:	a316      	add	r3, pc, #88	; (adr r3, 2688 <ull_scan_enable+0x108>)
    262e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2632:	f8cd 9020 	str.w	r9, [sp, #32]
    2636:	f8cd 800c 	str.w	r8, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    263a:	f7ff fc05 	bl	1e48 <__aeabi_uldivmod>
    263e:	4610      	mov	r0, r2
    2640:	4619      	mov	r1, r3
    2642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2646:	2300      	movs	r3, #0
    2648:	f7ff fbfe 	bl	1e48 <__aeabi_uldivmod>
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    264c:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    264e:	b2ed      	uxtb	r5, r5
    2650:	e9cd 6001 	strd	r6, r0, [sp, #4]
    2654:	2103      	movs	r1, #3
    2656:	f8cd 8000 	str.w	r8, [sp]
    265a:	463b      	mov	r3, r7
    265c:	462a      	mov	r2, r5
    265e:	4640      	mov	r0, r8
    2660:	f026 facb 	bl	28bfa <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    2664:	4649      	mov	r1, r9
    2666:	f016 fa07 	bl	18a78 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    266a:	b940      	cbnz	r0, 267e <ull_scan_enable+0xfe>
	scan->is_enabled = 1U;
    266c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    2670:	f043 0301 	orr.w	r3, r3, #1
    2674:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
    2678:	b00d      	add	sp, #52	; 0x34
    267a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    267e:	200c      	movs	r0, #12
    2680:	e7fa      	b.n	2678 <ull_scan_enable+0xf8>
    2682:	bf00      	nop
    2684:	f3af 8000 	nop.w
    2688:	1afd498d 	.word	0x1afd498d
    268c:	00000007 	.word	0x00000007
    2690:	84e72a00 	.word	0x84e72a00
    2694:	20002de4 	.word	0x20002de4
    2698:	000183a1 	.word	0x000183a1
    269c:	00019651 	.word	0x00019651

000026a0 <ll_scan_params_set>:
{
    26a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26a2:	4606      	mov	r6, r0
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    26a4:	2000      	movs	r0, #0
{
    26a6:	4615      	mov	r5, r2
    26a8:	461f      	mov	r7, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    26aa:	f017 f83f 	bl	1972c <ull_scan_is_disabled_get>
	if (!scan) {
    26ae:	4604      	mov	r4, r0
    26b0:	b1f8      	cbz	r0, 26f2 <ll_scan_params_set+0x52>
	scan->own_addr_type = own_addr_type;
    26b2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
	lll->type = type;
    26b6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	lll->interval = interval;
    26ba:	8641      	strh	r1, [r0, #50]	; 0x32
	scan->own_addr_type = own_addr_type;
    26bc:	f367 0242 	bfi	r2, r7, #1, #2
    26c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	lll->filter_policy = filter_policy;
    26c4:	f89d 2018 	ldrb.w	r2, [sp, #24]
	lll->type = type;
    26c8:	f366 13c7 	bfi	r3, r6, #7, #1
	lll->filter_policy = filter_policy;
    26cc:	f362 03c4 	bfi	r3, r2, #3, #2
    26d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    26d4:	480a      	ldr	r0, [pc, #40]	; (2700 <ll_scan_params_set+0x60>)
    26d6:	b2ad      	uxth	r5, r5
    26d8:	fba5 0100 	umull	r0, r1, r5, r0
    26dc:	2391      	movs	r3, #145	; 0x91
    26de:	fb03 1105 	mla	r1, r3, r5, r1
    26e2:	a305      	add	r3, pc, #20	; (adr r3, 26f8 <ll_scan_params_set+0x58>)
    26e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    26e8:	f7ff fbae 	bl	1e48 <__aeabi_uldivmod>
    26ec:	6360      	str	r0, [r4, #52]	; 0x34
	return 0;
    26ee:	2000      	movs	r0, #0
}
    26f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    26f2:	200c      	movs	r0, #12
    26f4:	e7fc      	b.n	26f0 <ll_scan_params_set+0x50>
    26f6:	bf00      	nop
    26f8:	1afd498d 	.word	0x1afd498d
    26fc:	00000007 	.word	0x00000007
    2700:	84e72a00 	.word	0x84e72a00
    2704:	00000000 	.word	0x00000000

00002708 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    2708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    270c:	4693      	mov	fp, r2
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    270e:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    2712:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
    2716:	4293      	cmp	r3, r2
{
    2718:	b08d      	sub	sp, #52	; 0x34
    271a:	4604      	mov	r4, r0
    271c:	4688      	mov	r8, r1
	if ((conn->llcp_ack == conn->llcp_req) &&
    271e:	d10b      	bne.n	2738 <ull_conn_llcp+0x30>
#endif /* !CONFIG_BT_CTLR_LE_ENC */

		/* TODO: Optimize the checks below, maybe have common flag */

		/* check if connection update procedure is requested */
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    2720:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    2724:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    2728:	4291      	cmp	r1, r2
    272a:	d024      	beq.n	2776 <ull_conn_llcp+0x6e>
			/* switch to LLCP_CONN_UPD state machine */
			conn->llcp_type = LLCP_CONN_UPD;
    272c:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    272e:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
    2730:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
			conn->llcp_ack -= 2U;
    2734:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    2738:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    273c:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    2740:	1ad3      	subs	r3, r2, r3
    2742:	f003 0303 	and.w	r3, r3, #3
    2746:	2b02      	cmp	r3, #2
    2748:	f040 8265 	bne.w	2c16 <ull_conn_llcp+0x50e>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}

		/* Process procedures with instants or encryption setup */
		/* FIXME: Make LE Ping cacheable */
		switch (conn->llcp_type) {
    274c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    2750:	2b01      	cmp	r3, #1
    2752:	f000 820e 	beq.w	2b72 <ull_conn_llcp+0x46a>
    2756:	2b02      	cmp	r3, #2
    2758:	f000 8418 	beq.w	2f8c <ull_conn_llcp+0x884>
		}
		break;
#endif /* CONFIG_BT_CTLR_PHY */

		default:
			LL_ASSERT(0);
    275c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
    2760:	49ca      	ldr	r1, [pc, #808]	; (2a8c <ull_conn_llcp+0x384>)
    2762:	48cb      	ldr	r0, [pc, #812]	; (2a90 <ull_conn_llcp+0x388>)
    2764:	f021 fd6a 	bl	2423c <printk>
    2768:	4040      	eors	r0, r0
    276a:	f380 8811 	msr	BASEPRI, r0
    276e:	f04f 0003 	mov.w	r0, #3
    2772:	df02      	svc	2
			break;
    2774:	e24f      	b.n	2c16 <ull_conn_llcp+0x50e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    2776:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
    277a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    277e:	428b      	cmp	r3, r1
    2780:	d063      	beq.n	284a <ull_conn_llcp+0x142>
static inline void event_fex_prep(struct ll_conn *conn)
{
	struct node_tx *tx;

	/* If waiting for response, do nothing */
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    2782:	1a5b      	subs	r3, r3, r1
    2784:	07de      	lsls	r6, r3, #31
    2786:	d5d7      	bpl.n	2738 <ull_conn_llcp+0x30>
		return;
	}

	if (conn->common.fex_valid) {
    2788:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    278c:	f011 0601 	ands.w	r6, r1, #1
    2790:	d02a      	beq.n	27e8 <ull_conn_llcp+0xe0>
		struct node_rx_pdu *rx;
		struct pdu_data *pdu;

		/* get a rx node for ULL->LL */
		rx = ll_pdu_rx_alloc();
    2792:	f016 f913 	bl	189bc <ll_pdu_rx_alloc>
		if (!rx) {
    2796:	4605      	mov	r5, r0
    2798:	2800      	cmp	r0, #0
    279a:	d0cd      	beq.n	2738 <ull_conn_llcp+0x30>
			return;
		}

		/* procedure request acked */
		conn->llcp_feature.ack = conn->llcp_feature.req;
    279c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
    27a0:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5

		/* prepare feature rsp structure */
		rx->hdr.handle = conn->lll.handle;
    27a4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    27a6:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    27a8:	2303      	movs	r3, #3
    27aa:	7103      	strb	r3, [r0, #4]
		pdu = (void *)rx->pdu;
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    27ac:	7f03      	ldrb	r3, [r0, #28]
    27ae:	f043 0303 	orr.w	r3, r3, #3
    27b2:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    27b4:	2309      	movs	r3, #9
    27b6:	7743      	strb	r3, [r0, #29]
			   sizeof(struct pdu_data_llctrl_feature_rsp);
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    27b8:	77c3      	strb	r3, [r0, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    27ba:	2208      	movs	r2, #8
    27bc:	2100      	movs	r1, #0
    27be:	3020      	adds	r0, #32
    27c0:	f023 fcf8 	bl	261b4 <memset>
			sizeof(pdu->llctrl.feature_rsp.features));
		sys_put_le24(conn->llcp_feature.features_peer,
    27c4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    27c8:	f885 3020 	strb.w	r3, [r5, #32]
	dst[1] = val >> 8;
    27cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
    27d0:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    27d2:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	dst[2] = val >> 16;
    27d6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
			     pdu->llctrl.feature_req.features);

		/* enqueue feature rsp structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
    27da:	4629      	mov	r1, r5
			sys_cpu_to_le16(conn->llcp_version.company_id);
		pdu->llctrl.version_ind.sub_version_number =
			sys_cpu_to_le16(conn->llcp_version.sub_version_number);

		/* enqueue version ind structure into rx queue */
		ll_rx_put(rx->hdr.link, rx);
    27dc:	6808      	ldr	r0, [r1, #0]
    27de:	f016 f8c5 	bl	1896c <ll_rx_put>
		ll_rx_sched();
    27e2:	f016 f8cd 	bl	18980 <ll_rx_sched>
    27e6:	e7a7      	b.n	2738 <ull_conn_llcp+0x30>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    27e8:	48aa      	ldr	r0, [pc, #680]	; (2a94 <ull_conn_llcp+0x38c>)
    27ea:	f025 ff55 	bl	28698 <mem_acquire>
	if (tx) {
    27ee:	4605      	mov	r5, r0
    27f0:	2800      	cmp	r0, #0
    27f2:	d0a1      	beq.n	2738 <ull_conn_llcp+0x30>
		conn->llcp_feature.ack--;
    27f4:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    27f8:	3b01      	subs	r3, #1
    27fa:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
		conn->llcp_feature.features_conn = LL_FEAT;
    27fe:	238e      	movs	r3, #142	; 0x8e
    2800:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2804:	7903      	ldrb	r3, [r0, #4]
    2806:	f043 0303 	orr.w	r3, r3, #3
    280a:	7103      	strb	r3, [r0, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    280c:	2309      	movs	r3, #9
    280e:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    2810:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2814:	2b00      	cmp	r3, #0
    2816:	bfac      	ite	ge
    2818:	2308      	movge	r3, #8
    281a:	230e      	movlt	r3, #14
		(void)memset(&pdu->llctrl.feature_req.features[0],
    281c:	2208      	movs	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    281e:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2820:	4631      	mov	r1, r6
    2822:	4410      	add	r0, r2
    2824:	f023 fcc6 	bl	261b4 <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
    2828:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	dst[0] = val;
    282c:	722b      	strb	r3, [r5, #8]
	dst[1] = val >> 8;
    282e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    2832:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    2834:	726a      	strb	r2, [r5, #9]
	dst[2] = val >> 16;
    2836:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, tx);
    2838:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, tx);
    283a:	4620      	mov	r0, r4
    283c:	f026 fb97 	bl	28f6e <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    2840:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    2844:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    2848:	e776      	b.n	2738 <ull_conn_llcp+0x30>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    284a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    284e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    2852:	428b      	cmp	r3, r1
    2854:	d05e      	beq.n	2914 <ull_conn_llcp+0x20c>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    2856:	1a5b      	subs	r3, r3, r1
    2858:	07dd      	lsls	r5, r3, #31
    285a:	f57f af6d 	bpl.w	2738 <ull_conn_llcp+0x30>
	if (conn->llcp_version.tx == 0U) {
    285e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    2862:	f013 0501 	ands.w	r5, r3, #1
    2866:	d123      	bne.n	28b0 <ull_conn_llcp+0x1a8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2868:	488a      	ldr	r0, [pc, #552]	; (2a94 <ull_conn_llcp+0x38c>)
    286a:	f025 ff15 	bl	28698 <mem_acquire>
		if (tx) {
    286e:	4601      	mov	r1, r0
    2870:	2800      	cmp	r0, #0
    2872:	f43f af61 	beq.w	2738 <ull_conn_llcp+0x30>
			conn->llcp_version.ack--;
    2876:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
    287a:	3b01      	subs	r3, #1
    287c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
			conn->llcp_version.tx = 1U;
    2880:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    2884:	f043 0301 	orr.w	r3, r3, #1
    2888:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    288c:	7903      	ldrb	r3, [r0, #4]
			pdu->llctrl.version_ind.company_id = cid;
    288e:	7285      	strb	r5, [r0, #10]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2890:	f043 0303 	orr.w	r3, r3, #3
    2894:	7103      	strb	r3, [r0, #4]
			pdu->len =
    2896:	2306      	movs	r3, #6
    2898:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    289a:	230c      	movs	r3, #12
    289c:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    289e:	230b      	movs	r3, #11
    28a0:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    28a2:	2359      	movs	r3, #89	; 0x59
    28a4:	7243      	strb	r3, [r0, #9]
			pdu->llctrl.version_ind.sub_version_number = svn;
    28a6:	f04f 33ff 	mov.w	r3, #4294967295
    28aa:	72c3      	strb	r3, [r0, #11]
    28ac:	7303      	strb	r3, [r0, #12]
    28ae:	e7c4      	b.n	283a <ull_conn_llcp+0x132>
	} else if (conn->llcp_version.rx) {
    28b0:	0798      	lsls	r0, r3, #30
    28b2:	d522      	bpl.n	28fa <ull_conn_llcp+0x1f2>
		rx = ll_pdu_rx_alloc();
    28b4:	f016 f882 	bl	189bc <ll_pdu_rx_alloc>
		if (!rx) {
    28b8:	4601      	mov	r1, r0
    28ba:	2800      	cmp	r0, #0
    28bc:	f43f af3c 	beq.w	2738 <ull_conn_llcp+0x30>
		conn->llcp_version.ack = conn->llcp_version.req;
    28c0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    28c4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		rx->hdr.handle = conn->lll.handle;
    28c8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    28ca:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    28cc:	2303      	movs	r3, #3
    28ce:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    28d0:	7f03      	ldrb	r3, [r0, #28]
    28d2:	f043 0303 	orr.w	r3, r3, #3
    28d6:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    28d8:	2306      	movs	r3, #6
    28da:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    28dc:	230c      	movs	r3, #12
    28de:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    28e0:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    28e4:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    28e8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    28ec:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    28f0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    28f4:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
    28f8:	e770      	b.n	27dc <ull_conn_llcp+0xd4>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    28fa:	f640 327a 	movw	r2, #2938	; 0xb7a
	case LLCP_CPR_STATE_UPD:
		/* Do nothing */
		break;

	default:
		LL_ASSERT(0);
    28fe:	4963      	ldr	r1, [pc, #396]	; (2a8c <ull_conn_llcp+0x384>)
    2900:	4863      	ldr	r0, [pc, #396]	; (2a90 <ull_conn_llcp+0x388>)
    2902:	f021 fc9b 	bl	2423c <printk>
    2906:	4040      	eors	r0, r0
    2908:	f380 8811 	msr	BASEPRI, r0
    290c:	f04f 0003 	mov.w	r0, #3
    2910:	df02      	svc	2
		break;
    2912:	e711      	b.n	2738 <ull_conn_llcp+0x30>
		} else if (conn->llcp_conn_param.ack !=
    2914:	f890 10ed 	ldrb.w	r1, [r0, #237]	; 0xed
    2918:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
    291c:	4299      	cmp	r1, r3
    291e:	f43f af0b 	beq.w	2738 <ull_conn_llcp+0x30>
	conn_upd = conn_upd_curr;
    2922:	4d5d      	ldr	r5, [pc, #372]	; (2a98 <ull_conn_llcp+0x390>)
    2924:	682b      	ldr	r3, [r5, #0]
	if (conn_upd && (conn_upd != conn)) {
    2926:	b113      	cbz	r3, 292e <ull_conn_llcp+0x226>
    2928:	4298      	cmp	r0, r3
    292a:	f47f af05 	bne.w	2738 <ull_conn_llcp+0x30>
	switch (conn->llcp_conn_param.state) {
    292e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
    2932:	f003 0307 	and.w	r3, r3, #7
    2936:	2b05      	cmp	r3, #5
    2938:	f200 8118 	bhi.w	2b6c <ull_conn_llcp+0x464>
    293c:	a101      	add	r1, pc, #4	; (adr r1, 2944 <ull_conn_llcp+0x23c>)
    293e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    2942:	bf00      	nop
    2944:	0000295d 	.word	0x0000295d
    2948:	000029d7 	.word	0x000029d7
    294c:	00002b23 	.word	0x00002b23
    2950:	00002739 	.word	0x00002739
    2954:	00002739 	.word	0x00002739
    2958:	00002739 	.word	0x00002739
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    295c:	484d      	ldr	r0, [pc, #308]	; (2a94 <ull_conn_llcp+0x38c>)
			event_counter = lll->event_counter +
    295e:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    2960:	8e67      	ldrh	r7, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2962:	f025 fe99 	bl	28698 <mem_acquire>
	if (!tx) {
    2966:	4601      	mov	r1, r0
    2968:	2800      	cmp	r0, #0
    296a:	f43f aee5 	beq.w	2738 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    296e:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
    2972:	2204      	movs	r2, #4
    2974:	f362 0302 	bfi	r3, r2, #0, #3
    2978:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    297c:	7903      	ldrb	r3, [r0, #4]
    297e:	f043 0303 	orr.w	r3, r3, #3
    2982:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2984:	2318      	movs	r3, #24
    2986:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2988:	230f      	movs	r3, #15
    298a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    298c:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    2990:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2992:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    2996:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2998:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    299c:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    299e:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    29a2:	81c3      	strh	r3, [r0, #14]
			event_counter = lll->event_counter +
    29a4:	443e      	add	r6, r7
	p->preferred_periodicity = 0U;
    29a6:	2300      	movs	r3, #0
    29a8:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    29aa:	74c3      	strb	r3, [r0, #19]
    29ac:	7503      	strb	r3, [r0, #20]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    29ae:	445e      	add	r6, fp
	p->offset1 = sys_cpu_to_le16(0xffff);
    29b0:	f04f 33ff 	mov.w	r3, #4294967295
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    29b4:	f8a0 6011 	strh.w	r6, [r0, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    29b8:	7543      	strb	r3, [r0, #21]
    29ba:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    29bc:	75c3      	strb	r3, [r0, #23]
    29be:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    29c0:	7643      	strb	r3, [r0, #25]
    29c2:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    29c4:	76c3      	strb	r3, [r0, #27]
    29c6:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    29c8:	7743      	strb	r3, [r0, #29]
    29ca:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, tx);
    29cc:	4620      	mov	r0, r4
    29ce:	f026 face 	bl	28f6e <ctrl_tx_enqueue>
	conn_upd_curr = conn;
    29d2:	602c      	str	r4, [r5, #0]
	conn->procedure_expire = conn->procedure_reload;
    29d4:	e734      	b.n	2840 <ull_conn_llcp+0x138>
	if (conn->llcp_conn_param.status) {
    29d6:	f894 60ef 	ldrb.w	r6, [r4, #239]	; 0xef
    29da:	b1ee      	cbz	r6, 2a18 <ull_conn_llcp+0x310>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    29dc:	482d      	ldr	r0, [pc, #180]	; (2a94 <ull_conn_llcp+0x38c>)
    29de:	f025 fe5b 	bl	28698 <mem_acquire>
		if (!tx) {
    29e2:	4601      	mov	r1, r0
    29e4:	2800      	cmp	r0, #0
    29e6:	f43f aea7 	beq.w	2738 <ull_conn_llcp+0x30>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    29ea:	7903      	ldrb	r3, [r0, #4]
    29ec:	f043 0303 	orr.w	r3, r3, #3
    29f0:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    29f2:	2311      	movs	r3, #17
    29f4:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    29f6:	2303      	movs	r3, #3
    29f8:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    29fa:	230f      	movs	r3, #15
    29fc:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    29fe:	f894 30ef 	ldrb.w	r3, [r4, #239]	; 0xef
    2a02:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, tx);
    2a04:	4620      	mov	r0, r4
    2a06:	f026 fab2 	bl	28f6e <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2a0a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2a0e:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
    2a12:	2300      	movs	r3, #0
    2a14:	602b      	str	r3, [r5, #0]
		return;
    2a16:	e68f      	b.n	2738 <ull_conn_llcp+0x30>
	if (!conn->lll.role) {
    2a18:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	db3d      	blt.n	2a9c <ull_conn_llcp+0x394>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a20:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_offset_us = 0U;
    2a24:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a28:	2105      	movs	r1, #5
    2a2a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    2a2e:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2a32:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
    2a36:	2301      	movs	r3, #1
    2a38:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		if (conn->llcp_conn_param.preferred_periodicity) {
    2a3c:	b311      	cbz	r1, 2a84 <ull_conn_llcp+0x37c>
				((conn->llcp_conn_param.interval_min /
    2a3e:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    2a42:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
    2a46:	3301      	adds	r3, #1
			conn->llcp_cu.interval =
    2a48:	fb13 f301 	smulbb	r3, r3, r1
    2a4c:	b29b      	uxth	r3, r3
    2a4e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    2a52:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    2a56:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    2a5a:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    2a5e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2a62:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    2a66:	2102      	movs	r1, #2
    2a68:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2a6c:	f894 10ee 	ldrb.w	r1, [r4, #238]	; 0xee
    2a70:	f3c1 01c0 	ubfx	r1, r1, #3, #1
    2a74:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_cu.ack--;
    2a78:	3a01      	subs	r2, #1
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2a7a:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
    2a7e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
		return;
    2a82:	e659      	b.n	2738 <ull_conn_llcp+0x30>
				conn->llcp_conn_param.interval_max;
    2a84:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    2a88:	e7e1      	b.n	2a4e <ull_conn_llcp+0x346>
    2a8a:	bf00      	nop
    2a8c:	00030dc9 	.word	0x00030dc9
    2a90:	0002bced 	.word	0x0002bced
    2a94:	20002fe4 	.word	0x20002fe4
    2a98:	20002f60 	.word	0x20002f60
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2a9c:	4863      	ldr	r0, [pc, #396]	; (2c2c <ull_conn_llcp+0x524>)
    2a9e:	f025 fdfb 	bl	28698 <mem_acquire>
	if (!tx) {
    2aa2:	4601      	mov	r1, r0
    2aa4:	2800      	cmp	r0, #0
    2aa6:	f43f ae47 	beq.w	2738 <ull_conn_llcp+0x30>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2aaa:	7903      	ldrb	r3, [r0, #4]
    2aac:	f043 0303 	orr.w	r3, r3, #3
    2ab0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2ab2:	2318      	movs	r3, #24
    2ab4:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2ab6:	2310      	movs	r3, #16
    2ab8:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min =
    2aba:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    2abe:	8103      	strh	r3, [r0, #8]
	rsp->interval_max =
    2ac0:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    2ac4:	8143      	strh	r3, [r0, #10]
	rsp->latency =
    2ac6:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    2aca:	8183      	strh	r3, [r0, #12]
	rsp->timeout =
    2acc:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    2ad0:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    2ad2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    2ad6:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    2ad8:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
    2adc:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2ae0:	f8b4 30fc 	ldrh.w	r3, [r4, #252]	; 0xfc
    2ae4:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2ae8:	f8b4 30fe 	ldrh.w	r3, [r4, #254]	; 0xfe
    2aec:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2af0:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
    2af4:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2af8:	f8b4 3102 	ldrh.w	r3, [r4, #258]	; 0x102
    2afc:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2b00:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
    2b04:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2b08:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    2b0c:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, tx);
    2b10:	4620      	mov	r0, r4
    2b12:	f026 fa2c 	bl	28f6e <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2b16:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2b1a:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn_upd_curr = NULL;
    2b1e:	602e      	str	r6, [r5, #0]
    2b20:	e60a      	b.n	2738 <ull_conn_llcp+0x30>
	rx = ll_pdu_rx_alloc();
    2b22:	f015 ff4b 	bl	189bc <ll_pdu_rx_alloc>
	if (!rx) {
    2b26:	4601      	mov	r1, r0
    2b28:	2800      	cmp	r0, #0
    2b2a:	f43f ae05 	beq.w	2738 <ull_conn_llcp+0x30>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    2b2e:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
    2b32:	2303      	movs	r3, #3
    2b34:	f363 0202 	bfi	r2, r3, #0, #3
    2b38:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
	rx->hdr.handle = conn->lll.handle;
    2b3c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2b3e:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2b40:	7f03      	ldrb	r3, [r0, #28]
	rx->hdr.handle = conn->lll.handle;
    2b42:	80c2      	strh	r2, [r0, #6]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2b44:	f043 0303 	orr.w	r3, r3, #3
    2b48:	7703      	strb	r3, [r0, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2b4a:	2318      	movs	r3, #24
    2b4c:	7743      	strb	r3, [r0, #29]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2b4e:	230f      	movs	r3, #15
    2b50:	77c3      	strb	r3, [r0, #31]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2b52:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    2b56:	8403      	strh	r3, [r0, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2b58:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    2b5c:	8443      	strh	r3, [r0, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2b5e:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    2b62:	8483      	strh	r3, [r0, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2b64:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    2b68:	84c3      	strh	r3, [r0, #38]	; 0x26
	ll_rx_put(rx->hdr.link, rx);
    2b6a:	e637      	b.n	27dc <ull_conn_llcp+0xd4>
		LL_ASSERT(0);
    2b6c:	f640 4287 	movw	r2, #3207	; 0xc87
    2b70:	e6c5      	b.n	28fe <ull_conn_llcp+0x1f6>
	conn_upd = conn_upd_curr;
    2b72:	4b2f      	ldr	r3, [pc, #188]	; (2c30 <ull_conn_llcp+0x528>)
	if (!conn_upd) {
    2b74:	6819      	ldr	r1, [r3, #0]
    2b76:	b901      	cbnz	r1, 2b7a <ull_conn_llcp+0x472>
		conn_upd_curr = conn;
    2b78:	601c      	str	r4, [r3, #0]
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    2b7a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    2b7c:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    2b7e:	440e      	add	r6, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    2b80:	f894 10a2 	ldrb.w	r1, [r4, #162]	; 0xa2
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    2b84:	445e      	add	r6, fp
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    2b86:	f011 0003 	ands.w	r0, r1, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    2b8a:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    2b8c:	d052      	beq.n	2c34 <ull_conn_llcp+0x52c>
		rx = ll_pdu_rx_alloc_peek(1);
    2b8e:	2001      	movs	r0, #1
    2b90:	f015 fefc 	bl	1898c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    2b94:	4607      	mov	r7, r0
    2b96:	2800      	cmp	r0, #0
    2b98:	d03d      	beq.n	2c16 <ull_conn_llcp+0x50e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2b9a:	4824      	ldr	r0, [pc, #144]	; (2c2c <ull_conn_llcp+0x524>)
    2b9c:	f025 fd7c 	bl	28698 <mem_acquire>
		if (!tx) {
    2ba0:	4605      	mov	r5, r0
    2ba2:	b3c0      	cbz	r0, 2c16 <ull_conn_llcp+0x50e>
		(void)ll_pdu_rx_alloc();
    2ba4:	f015 ff0a 	bl	189bc <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    2ba8:	683b      	ldr	r3, [r7, #0]
    2baa:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    2bae:	605a      	str	r2, [r3, #4]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2bb0:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_rx = rx;
    2bb4:	f8c4 709c 	str.w	r7, [r4, #156]	; 0x9c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2bb8:	f36f 0301 	bfc	r3, #0, #2
    2bbc:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2bc0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2bc2:	441e      	add	r6, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2bc4:	792b      	ldrb	r3, [r5, #4]
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2bc6:	3606      	adds	r6, #6
    2bc8:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2bca:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2bce:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2bd2:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2bd4:	230c      	movs	r3, #12
    2bd6:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2bd8:	2300      	movs	r3, #0
    2bda:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    2bdc:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    2be0:	722b      	strb	r3, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2be2:	f240 42e2 	movw	r2, #1250	; 0x4e2
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2be6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2bea:	fbb3 f3f2 	udiv	r3, r3, r2
    2bee:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2bf2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    2bf6:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2bfa:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    2bfe:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2c02:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    2c06:	f8a5 300f 	strh.w	r3, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    2c0a:	f8a5 6011 	strh.w	r6, [r5, #17]
			ctrl_tx_enqueue(conn, tx);
    2c0e:	4629      	mov	r1, r5
    2c10:	4620      	mov	r0, r4
    2c12:	f026 f9ac 	bl	28f6e <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    2c16:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    2c1a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    2c1e:	429a      	cmp	r2, r3
    2c20:	f040 8204 	bne.w	302c <ull_conn_llcp+0x924>
	return 0;
    2c24:	2000      	movs	r0, #0
}
    2c26:	b00d      	add	sp, #52	; 0x34
    2c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c2c:	20002fe4 	.word	0x20002fe4
    2c30:	20002f60 	.word	0x20002f60
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    2c34:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
    2c38:	910a      	str	r1, [sp, #40]	; 0x28
    2c3a:	1a77      	subs	r7, r6, r1
    2c3c:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    2c3e:	0439      	lsls	r1, r7, #16
    2c40:	d4e9      	bmi.n	2c16 <ull_conn_llcp+0x50e>
		conn->llcp_cu.ack = conn->llcp_cu.req;
    2c42:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
    2c46:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
		conn->llcp_ack = conn->llcp_req;
    2c4a:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    2c4e:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    2c52:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
    2c56:	428a      	cmp	r2, r1
    2c58:	d009      	beq.n	2c6e <ull_conn_llcp+0x566>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    2c5a:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    2c5e:	f002 0207 	and.w	r2, r2, #7
    2c62:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2c64:	bf04      	itt	eq
    2c66:	f884 10ed 	strbeq.w	r1, [r4, #237]	; 0xed
			conn->procedure_expire = 0U;
    2c6a:	f8a4 007c 	strheq.w	r0, [r4, #124]	; 0x7c
		if (conn_upd_curr == conn) {
    2c6e:	681a      	ldr	r2, [r3, #0]
		rx = conn->llcp_rx;
    2c70:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
		if (conn_upd_curr == conn) {
    2c74:	4294      	cmp	r4, r2
	conn_upd_curr = NULL;
    2c76:	bf04      	itt	eq
    2c78:	2200      	moveq	r2, #0
    2c7a:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    2c7c:	b10d      	cbz	r5, 2c82 <ull_conn_llcp+0x57a>
    2c7e:	682b      	ldr	r3, [r5, #0]
    2c80:	b95b      	cbnz	r3, 2c9a <ull_conn_llcp+0x592>
    2c82:	f640 120e 	movw	r2, #2318	; 0x90e
    2c86:	49b8      	ldr	r1, [pc, #736]	; (2f68 <ull_conn_llcp+0x860>)
    2c88:	48b8      	ldr	r0, [pc, #736]	; (2f6c <ull_conn_llcp+0x864>)
    2c8a:	f021 fad7 	bl	2423c <printk>
    2c8e:	4040      	eors	r0, r0
    2c90:	f380 8811 	msr	BASEPRI, r0
    2c94:	f04f 0003 	mov.w	r0, #3
    2c98:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2c9a:	6828      	ldr	r0, [r5, #0]
		if ((conn->llcp_cu.interval != lll->interval) ||
    2c9c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
		conn->llcp_rx = rx->hdr.link->mem;
    2ca0:	6843      	ldr	r3, [r0, #4]
    2ca2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
		if ((conn->llcp_cu.interval != lll->interval) ||
    2ca6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    2ca8:	f8b4 c0a6 	ldrh.w	ip, [r4, #166]	; 0xa6
    2cac:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
    2cb0:	429a      	cmp	r2, r3
    2cb2:	d113      	bne.n	2cdc <ull_conn_llcp+0x5d4>
    2cb4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2cb6:	4563      	cmp	r3, ip
    2cb8:	d110      	bne.n	2cdc <ull_conn_llcp+0x5d4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2cba:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2cbe:	fb03 fe02 	mul.w	lr, r3, r2
    2cc2:	f242 7310 	movw	r3, #10000	; 0x2710
    2cc6:	fb03 e301 	mla	r3, r3, r1, lr
    2cca:	3b01      	subs	r3, #1
    2ccc:	fbb3 f3fe 	udiv	r3, r3, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2cd0:	f8b4 e076 	ldrh.w	lr, [r4, #118]	; 0x76
    2cd4:	b29b      	uxth	r3, r3
    2cd6:	459e      	cmp	lr, r3
    2cd8:	f000 8120 	beq.w	2f1c <ull_conn_llcp+0x814>
			rx->hdr.handle = lll->handle;
    2cdc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2cde:	80eb      	strh	r3, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    2ce0:	2315      	movs	r3, #21
    2ce2:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    2ce4:	2300      	movs	r3, #0
    2ce6:	772b      	strb	r3, [r5, #28]
			cu->interval = conn->llcp_cu.interval;
    2ce8:	83ea      	strh	r2, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
    2cea:	f8a5 c020 	strh.w	ip, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    2cee:	8469      	strh	r1, [r5, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    2cf0:	4629      	mov	r1, r5
    2cf2:	f015 fe3b 	bl	1896c <ll_rx_put>
		ll_rx_sched();
    2cf6:	f015 fe43 	bl	18980 <ll_rx_sched>
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    2cfa:	6823      	ldr	r3, [r4, #0]
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	da0a      	bge.n	2d16 <ull_conn_llcp+0x60e>
			uint32_t ticks_prepare_to_start =
    2d00:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    2d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    2d08:	4290      	cmp	r0, r2
    2d0a:	bf2c      	ite	cs
    2d0c:	4480      	addcs	r8, r0
    2d0e:	4490      	addcc	r8, r2
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    2d10:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    2d12:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * lll->interval;
    2d16:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    2d18:	f8b4 50a4 	ldrh.w	r5, [r4, #164]	; 0xa4
    2d1c:	f8df a268 	ldr.w	sl, [pc, #616]	; 2f88 <ull_conn_llcp+0x880>
		conn_interval_old = instant_latency * lll->interval;
    2d20:	fb13 f307 	smulbb	r3, r3, r7
    2d24:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    2d26:	fbb3 f1f5 	udiv	r1, r3, r5
    2d2a:	fa1f f981 	uxth.w	r9, r1
		conn_interval_new = latency * conn->llcp_cu.interval;
    2d2e:	fb15 f209 	smulbb	r2, r5, r9
    2d32:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    2d34:	4293      	cmp	r3, r2
    2d36:	f240 40e2 	movw	r0, #1250	; 0x4e2
    2d3a:	f080 80f2 	bcs.w	2f22 <ull_conn_llcp+0x81a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    2d3e:	1ad3      	subs	r3, r2, r3
    2d40:	4358      	muls	r0, r3
    2d42:	fba0 010a 	umull	r0, r1, r0, sl
    2d46:	a386      	add	r3, pc, #536	; (adr r3, 2f60 <ull_conn_llcp+0x858>)
    2d48:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d4c:	f7ff f87c 	bl	1e48 <__aeabi_uldivmod>
    2d50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d54:	4480      	add	r8, r0
		lll->latency_prepare += lazy;
    2d56:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2d58:	449b      	add	fp, r3
		lll->latency_prepare -= (instant_latency - latency);
    2d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2d5c:	1b9e      	subs	r6, r3, r6
		} else if (lll->role) {
    2d5e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    2d62:	444e      	add	r6, r9
    2d64:	445e      	add	r6, fp
		} else if (lll->role) {
    2d66:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
    2d68:	f240 4be2 	movw	fp, #1250	; 0x4e2
		lll->latency_prepare -= (instant_latency - latency);
    2d6c:	8666      	strh	r6, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval *
    2d6e:	fb0b f505 	mul.w	r5, fp, r5
		} else if (lll->role) {
    2d72:	f280 80e4 	bge.w	2f3e <ull_conn_llcp+0x836>
			lll->slave.window_widening_prepare_us -=
    2d76:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    2d78:	6c63      	ldr	r3, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    2d7a:	fb03 2717 	mls	r7, r3, r7, r2
    2d7e:	64e7      	str	r7, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    2d80:	f026 fad2 	bl	29328 <lll_clock_ppm_local_get>
    2d84:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    2d86:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
    2d8a:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2d8e:	f018 fb6b 	bl	1b468 <lll_clock_ppm_get>
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2d92:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
				(((lll_clock_ppm_local_get() +
    2d96:	4406      	add	r6, r0
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2d98:	fb0b f202 	mul.w	r2, fp, r2
			lll->slave.window_size_prepare_us =
    2d9c:	6562      	str	r2, [r4, #84]	; 0x54
				   lll_clock_ppm_get(conn->slave.sca)) *
    2d9e:	436e      	muls	r6, r5
			conn->slave.ticks_to_offset = 0U;
    2da0:	2200      	movs	r2, #0
    2da2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2da6:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
			lll->slave.window_widening_prepare_us +=
    2daa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2dac:	4870      	ldr	r0, [pc, #448]	; (2f70 <ull_conn_llcp+0x868>)
    2dae:	f206 263f 	addw	r6, r6, #575	; 0x23f
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2db2:	086b      	lsrs	r3, r5, #1
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2db4:	fbb6 f6f0 	udiv	r6, r6, r0
				lll->slave.window_widening_periodic_us *
    2db8:	fb06 f009 	mul.w	r0, r6, r9
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2dbc:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    2dbe:	4402      	add	r2, r0
			lll->slave.window_widening_max_us =
    2dc0:	64a3      	str	r3, [r4, #72]	; 0x48
			lll->slave.window_widening_prepare_us +=
    2dc2:	429a      	cmp	r2, r3
    2dc4:	bf94      	ite	ls
    2dc6:	64e2      	strls	r2, [r4, #76]	; 0x4c
    2dc8:	64e3      	strhi	r3, [r4, #76]	; 0x4c
			lll->slave.window_widening_periodic_us =
    2dca:	6466      	str	r6, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2dcc:	a364      	add	r3, pc, #400	; (adr r3, 2f60 <ull_conn_llcp+0x858>)
    2dce:	e9d3 2300 	ldrd	r2, r3, [r3]
    2dd2:	fba0 010a 	umull	r0, r1, r0, sl
    2dd6:	f7ff f837 	bl	1e48 <__aeabi_uldivmod>
    2dda:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2dde:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    2de2:	fbb0 f0fb 	udiv	r0, r0, fp
    2de6:	fb0b f000 	mul.w	r0, fp, r0
    2dea:	a35d      	add	r3, pc, #372	; (adr r3, 2f60 <ull_conn_llcp+0x858>)
    2dec:	e9d3 2300 	ldrd	r2, r3, [r3]
    2df0:	fba0 010a 	umull	r0, r1, r0, sl
    2df4:	f7ff f828 	bl	1e48 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    2df8:	eba5 0906 	sub.w	r9, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2dfc:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		lll->interval = conn->llcp_cu.interval;
    2e00:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
    2e04:	85e3      	strh	r3, [r4, #46]	; 0x2e
		lll->latency = conn->llcp_cu.latency;
    2e06:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    2e0a:	8623      	strh	r3, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2e0c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    2e10:	f242 7210 	movw	r2, #10000	; 0x2710
    2e14:	fb02 5303 	mla	r3, r2, r3, r5
    2e18:	3b01      	subs	r3, #1
    2e1a:	fbb3 f3f5 	udiv	r3, r3, r5
    2e1e:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2e22:	4b54      	ldr	r3, [pc, #336]	; (2f74 <ull_conn_llcp+0x86c>)
    2e24:	442b      	add	r3, r5
    2e26:	fbb3 f5f5 	udiv	r5, r3, r5
		if (conn->llcp_cu.cmd) {
    2e2a:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2e2e:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
		if (conn->llcp_cu.cmd) {
    2e32:	075a      	lsls	r2, r3, #29
			conn->supervision_expire = 0U;
    2e34:	bf44      	itt	mi
    2e36:	2300      	movmi	r3, #0
    2e38:	f8a4 3078 	strhmi.w	r3, [r4, #120]	; 0x78
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2e3c:	2102      	movs	r1, #2
    2e3e:	2001      	movs	r0, #1
    2e40:	f01a f8be 	bl	1cfc0 <mayfly_is_enabled>
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2e44:	2200      	movs	r2, #0
    2e46:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2e48:	4606      	mov	r6, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2e4a:	2001      	movs	r0, #1
    2e4c:	f013 fbe2 	bl	16614 <mayfly_enable>
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2e50:	4620      	mov	r0, r4
    2e52:	f016 fdbb 	bl	199cc <ll_conn_handle_get>
    2e56:	3005      	adds	r0, #5
    2e58:	b2c5      	uxtb	r5, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2e5a:	4b47      	ldr	r3, [pc, #284]	; (2f78 <ull_conn_llcp+0x870>)
    2e5c:	9400      	str	r4, [sp, #0]
    2e5e:	462a      	mov	r2, r5
    2e60:	2101      	movs	r1, #1
    2e62:	2000      	movs	r0, #0
    2e64:	f014 f9d4 	bl	17210 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2e68:	f030 0302 	bics.w	r3, r0, #2
    2e6c:	d00b      	beq.n	2e86 <ull_conn_llcp+0x77e>
    2e6e:	f640 12b7 	movw	r2, #2487	; 0x9b7
    2e72:	493d      	ldr	r1, [pc, #244]	; (2f68 <ull_conn_llcp+0x860>)
    2e74:	483d      	ldr	r0, [pc, #244]	; (2f6c <ull_conn_llcp+0x864>)
    2e76:	f021 f9e1 	bl	2423c <printk>
    2e7a:	4040      	eors	r0, r0
    2e7c:	f380 8811 	msr	BASEPRI, r0
    2e80:	f04f 0003 	mov.w	r0, #3
    2e84:	df02      	svc	2
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    2e86:	fba9 230a 	umull	r2, r3, r9, sl
    2e8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    2e8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2e92:	a333      	add	r3, pc, #204	; (adr r3, 2f60 <ull_conn_llcp+0x858>)
    2e94:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e98:	f7fe ffd6 	bl	1e48 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2e9c:	4b37      	ldr	r3, [pc, #220]	; (2f7c <ull_conn_llcp+0x874>)
    2e9e:	9408      	str	r4, [sp, #32]
    2ea0:	e9cd 4306 	strd	r4, r3, [sp, #24]
    2ea4:	4b36      	ldr	r3, [pc, #216]	; (2f80 <ull_conn_llcp+0x878>)
    2ea6:	9305      	str	r3, [sp, #20]
    2ea8:	68e3      	ldr	r3, [r4, #12]
    2eaa:	9304      	str	r3, [sp, #16]
    2eac:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    2eb0:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    2eb2:	4b34      	ldr	r3, [pc, #208]	; (2f84 <ull_conn_llcp+0x87c>)
    2eb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    2eb6:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    2eba:	fba4 ab03 	umull	sl, fp, r4, r3
    2ebe:	ebb1 000a 	subs.w	r0, r1, sl
    2ec2:	f04f 0307 	mov.w	r3, #7
    2ec6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2ec8:	fb03 bb04 	mla	fp, r3, r4, fp
    2ecc:	eb61 010b 	sbc.w	r1, r1, fp
    2ed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2ed4:	2300      	movs	r3, #0
    2ed6:	f7fe ffb7 	bl	1e48 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2eda:	4643      	mov	r3, r8
    2edc:	e9cd 4001 	strd	r4, r0, [sp, #4]
    2ee0:	9700      	str	r7, [sp, #0]
    2ee2:	462a      	mov	r2, r5
    2ee4:	2101      	movs	r1, #1
    2ee6:	2000      	movs	r0, #0
    2ee8:	f025 fe87 	bl	28bfa <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2eec:	f030 0302 	bics.w	r3, r0, #2
    2ef0:	d00b      	beq.n	2f0a <ull_conn_llcp+0x802>
    2ef2:	f640 12d1 	movw	r2, #2513	; 0x9d1
    2ef6:	491c      	ldr	r1, [pc, #112]	; (2f68 <ull_conn_llcp+0x860>)
    2ef8:	481c      	ldr	r0, [pc, #112]	; (2f6c <ull_conn_llcp+0x864>)
    2efa:	f021 f99f 	bl	2423c <printk>
    2efe:	4040      	eors	r0, r0
    2f00:	f380 8811 	msr	BASEPRI, r0
    2f04:	f04f 0003 	mov.w	r0, #3
    2f08:	df02      	svc	2
		if (mayfly_was_enabled) {
    2f0a:	b126      	cbz	r6, 2f16 <ull_conn_llcp+0x80e>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    2f0c:	2201      	movs	r2, #1
    2f0e:	2102      	movs	r1, #2
    2f10:	4610      	mov	r0, r2
    2f12:	f013 fb7f 	bl	16614 <mayfly_enable>
				return -ECANCELED;
    2f16:	f06f 0047 	mvn.w	r0, #71	; 0x47
    2f1a:	e684      	b.n	2c26 <ull_conn_llcp+0x51e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2f1c:	2301      	movs	r3, #1
    2f1e:	712b      	strb	r3, [r5, #4]
    2f20:	e6e6      	b.n	2cf0 <ull_conn_llcp+0x5e8>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2f22:	fb05 3111 	mls	r1, r5, r1, r3
    2f26:	b289      	uxth	r1, r1
    2f28:	4348      	muls	r0, r1
    2f2a:	a30d      	add	r3, pc, #52	; (adr r3, 2f60 <ull_conn_llcp+0x858>)
    2f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f30:	fba0 010a 	umull	r0, r1, r0, sl
    2f34:	f7fe ff88 	bl	1e48 <__aeabi_uldivmod>
    2f38:	eba8 0800 	sub.w	r8, r8, r0
    2f3c:	e70b      	b.n	2d56 <ull_conn_llcp+0x64e>
			LL_ASSERT(0);
    2f3e:	f640 1287 	movw	r2, #2439	; 0x987
    2f42:	4909      	ldr	r1, [pc, #36]	; (2f68 <ull_conn_llcp+0x860>)
    2f44:	4809      	ldr	r0, [pc, #36]	; (2f6c <ull_conn_llcp+0x864>)
    2f46:	f021 f979 	bl	2423c <printk>
    2f4a:	4040      	eors	r0, r0
    2f4c:	f380 8811 	msr	BASEPRI, r0
    2f50:	f04f 0003 	mov.w	r0, #3
    2f54:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2f56:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    2f58:	46a9      	mov	r9, r5
    2f5a:	e751      	b.n	2e00 <ull_conn_llcp+0x6f8>
    2f5c:	f3af 8000 	nop.w
    2f60:	1afd498d 	.word	0x1afd498d
    2f64:	00000007 	.word	0x00000007
    2f68:	00030dc9 	.word	0x00030dc9
    2f6c:	0002bced 	.word	0x0002bced
    2f70:	000f4240 	.word	0x000f4240
    2f74:	026259ff 	.word	0x026259ff
    2f78:	0001986d 	.word	0x0001986d
    2f7c:	00019821 	.word	0x00019821
    2f80:	0001ab41 	.word	0x0001ab41
    2f84:	1afd498d 	.word	0x1afd498d
    2f88:	3b9aca00 	.word	0x3b9aca00
			event_counter = lll->event_counter +
    2f8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    2f8e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    2f90:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    2f92:	449b      	add	fp, r3
	if (conn->llcp.chan_map.initiate) {
    2f94:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    2f98:	07db      	lsls	r3, r3, #31
			event_counter = lll->event_counter +
    2f9a:	fa1f fb8b 	uxth.w	fp, fp
	if (conn->llcp.chan_map.initiate) {
    2f9e:	d525      	bpl.n	2fec <ull_conn_llcp+0x8e4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2fa0:	4835      	ldr	r0, [pc, #212]	; (3078 <ull_conn_llcp+0x970>)
    2fa2:	f025 fb79 	bl	28698 <mem_acquire>
		if (tx) {
    2fa6:	4605      	mov	r5, r0
    2fa8:	2800      	cmp	r0, #0
    2faa:	f43f ae34 	beq.w	2c16 <ull_conn_llcp+0x50e>
			conn->llcp.chan_map.initiate = 0U;
    2fae:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    2fb2:	f36f 0300 	bfc	r3, #0, #1
    2fb6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			conn->llcp.chan_map.instant = event_counter +
    2fba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2fbc:	449b      	add	fp, r3
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2fbe:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    2fc0:	f10b 0b06 	add.w	fp, fp, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2fc4:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.instant = event_counter +
    2fc8:	f8a4 b096 	strh.w	fp, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2fcc:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2fce:	2308      	movs	r3, #8
    2fd0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    2fd2:	2301      	movs	r3, #1
    2fd4:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    2fd6:	2205      	movs	r2, #5
    2fd8:	f104 0191 	add.w	r1, r4, #145	; 0x91
    2fdc:	3008      	adds	r0, #8
    2fde:	f023 f8bf 	bl	26160 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    2fe2:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    2fe6:	f8a5 300d 	strh.w	r3, [r5, #13]
    2fea:	e610      	b.n	2c0e <ull_conn_llcp+0x506>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    2fec:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
    2ff0:	ebab 0b03 	sub.w	fp, fp, r3
    2ff4:	f41b 4f00 	tst.w	fp, #32768	; 0x8000
    2ff8:	f47f ae0d 	bne.w	2c16 <ull_conn_llcp+0x50e>
		memcpy(&lll->data_chan_map[0],
    2ffc:	f104 0538 	add.w	r5, r4, #56	; 0x38
		conn->llcp_ack = conn->llcp_req;
    3000:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
		memcpy(&lll->data_chan_map[0],
    3004:	f104 0191 	add.w	r1, r4, #145	; 0x91
    3008:	2205      	movs	r2, #5
    300a:	4628      	mov	r0, r5
    300c:	f023 f8a8 	bl	26160 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    3010:	2105      	movs	r1, #5
    3012:	4628      	mov	r0, r5
    3014:	f025 fbbc 	bl	28790 <util_ones_count_get>
		lll->data_chan_count =
    3018:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
    301c:	f360 0305 	bfi	r3, r0, #0, #6
    3020:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    3024:	2301      	movs	r3, #1
    3026:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    302a:	e5f4      	b.n	2c16 <ull_conn_llcp+0x50e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    302c:	4812      	ldr	r0, [pc, #72]	; (3078 <ull_conn_llcp+0x970>)
    302e:	f025 fb33 	bl	28698 <mem_acquire>
		if (tx) {
    3032:	4601      	mov	r1, r0
    3034:	b180      	cbz	r0, 3058 <ull_conn_llcp+0x950>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    3036:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    303a:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    303e:	7903      	ldrb	r3, [r0, #4]
    3040:	f043 0303 	orr.w	r3, r3, #3
    3044:	7103      	strb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    3046:	2302      	movs	r3, #2
    3048:	7143      	strb	r3, [r0, #5]
			pdu_tx->llctrl.opcode =
    304a:	71c3      	strb	r3, [r0, #7]
			pdu_tx->llctrl.terminate_ind.error_code =
    304c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    3050:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, tx);
    3052:	4620      	mov	r0, r4
    3054:	f025 ff8b 	bl	28f6e <ctrl_tx_enqueue>
		if (!conn->procedure_expire) {
    3058:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    305c:	2800      	cmp	r0, #0
    305e:	f47f ade1 	bne.w	2c24 <ull_conn_llcp+0x51c>
			conn->procedure_expire = conn->supervision_reload;
    3062:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
			if (conn->procedure_expire <= 1U) {
    3066:	2b01      	cmp	r3, #1
    3068:	d902      	bls.n	3070 <ull_conn_llcp+0x968>
			conn->procedure_expire = conn->supervision_reload;
    306a:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    306e:	e5d9      	b.n	2c24 <ull_conn_llcp+0x51c>
				conn->procedure_expire++;
    3070:	3301      	adds	r3, #1
    3072:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    3076:	e5d6      	b.n	2c26 <ull_conn_llcp+0x51e>
    3078:	20002fe4 	.word	0x20002fe4
    307c:	00000000 	.word	0x00000000

00003080 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    3080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3084:	b091      	sub	sp, #68	; 0x44
    3086:	461e      	mov	r6, r3
    3088:	900c      	str	r0, [sp, #48]	; 0x30
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    308a:	4630      	mov	r0, r6
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    308c:	6813      	ldr	r3, [r2, #0]
	conn = lll->hdr.parent;
    308e:	f850 5b0c 	ldr.w	r5, [r0], #12
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    3092:	f8d3 a000 	ldr.w	sl, [r3]
{
    3096:	460c      	mov	r4, r1
    3098:	4691      	mov	r9, r2

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    309a:	312e      	adds	r1, #46	; 0x2e
    309c:	2203      	movs	r2, #3
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    309e:	f106 0b08 	add.w	fp, r6, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    30a2:	f023 f85d 	bl	26160 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    30a6:	f106 071c 	add.w	r7, r6, #28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    30aa:	2204      	movs	r2, #4
    30ac:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    30b0:	4658      	mov	r0, fp
    30b2:	f023 f855 	bl	26160 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    30b6:	2205      	movs	r2, #5
    30b8:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    30bc:	4638      	mov	r0, r7
    30be:	f023 f84f 	bl	26160 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    30c2:	2105      	movs	r1, #5
    30c4:	4638      	mov	r0, r7
    30c6:	f025 fb63 	bl	28790 <util_ones_count_get>
    30ca:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    30ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    30d2:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    30d6:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    30d8:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    30dc:	f240 812a 	bls.w	3334 <ull_slave_setup+0x2b4>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    30e0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    30e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
    30e8:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    30ec:	3b05      	subs	r3, #5
    30ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    30f2:	2b0b      	cmp	r3, #11
    30f4:	f200 811e 	bhi.w	3334 <ull_slave_setup+0x2b4>
		return;
	}

	((struct lll_adv *)ftr->param)->conn = NULL;
    30f8:	f8d9 3000 	ldr.w	r3, [r9]
    30fc:	f04f 0800 	mov.w	r8, #0
    3100:	f8c3 8008 	str.w	r8, [r3, #8]

	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    3104:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
	lll->interval = interval;
    3106:	8277      	strh	r7, [r6, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    3108:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
    310c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    3110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3114:	82b3      	strh	r3, [r6, #20]

	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    3116:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3118:	930b      	str	r3, [sp, #44]	; 0x2c
	conn_interval_us = interval * CONN_INT_UNIT_US;
    311a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    311e:	435f      	muls	r7, r3
	} else {
		win_delay_us = WIN_DELAY_LEGACY;
	}

	/* calculate the window widening */
	conn->slave.sca = pdu_adv->connect_ind.sca;
    3120:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    3124:	f895 2080 	ldrb.w	r2, [r5, #128]	; 0x80
    3128:	095b      	lsrs	r3, r3, #5
    312a:	f363 0284 	bfi	r2, r3, #2, #3
    312e:	f885 2080 	strb.w	r2, [r5, #128]	; 0x80
	lll->slave.window_widening_periodic_us =
		(((lll_clock_ppm_local_get() +
    3132:	f026 f8f9 	bl	29328 <lll_clock_ppm_local_get>
    3136:	900d      	str	r0, [sp, #52]	; 0x34
		   lll_clock_ppm_get(conn->slave.sca)) *
    3138:	f895 0080 	ldrb.w	r0, [r5, #128]	; 0x80
    313c:	f3c0 0082 	ubfx	r0, r0, #2, #3
    3140:	f018 f992 	bl	1b468 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    3144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3146:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    3148:	4378      	muls	r0, r7
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    314a:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    314e:	4b7e      	ldr	r3, [pc, #504]	; (3348 <ull_slave_setup+0x2c8>)
    3150:	f200 203f 	addw	r0, r0, #575	; 0x23f
    3154:	fbb0 f0f3 	udiv	r0, r0, r3
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    3158:	087b      	lsrs	r3, r7, #1
    315a:	3b96      	subs	r3, #150	; 0x96
    315c:	62f3      	str	r3, [r6, #44]	; 0x2c
					    EVENT_IFS_US;
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    315e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
	lll->slave.window_widening_periodic_us =
    3162:	62b0      	str	r0, [r6, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    3164:	f240 42e2 	movw	r2, #1250	; 0x4e2
    3168:	4353      	muls	r3, r2
    316a:	63f3      	str	r3, [r6, #60]	; 0x3c
		CONN_INT_UNIT_US;

	/* procedure timeouts */
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    316c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	conn->supervision_reload =
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    316e:	930d      	str	r3, [sp, #52]	; 0x34
    3170:	f242 7210 	movw	r2, #10000	; 0x2710
    3174:	fb02 7203 	mla	r2, r2, r3, r7
    3178:	3a01      	subs	r2, #1
    317a:	fbb2 f2f7 	udiv	r2, r2, r7
    317e:	f8a5 2076 	strh.w	r2, [r5, #118]	; 0x76
	conn->procedure_reload =
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    3182:	4a72      	ldr	r2, [pc, #456]	; (334c <ull_slave_setup+0x2cc>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
			     (conn->apto_reload - (lll->latency + 6)) :
			     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    3184:	4659      	mov	r1, fp
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    3186:	443a      	add	r2, r7
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    3188:	f105 0084 	add.w	r0, r5, #132	; 0x84
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    318c:	fbb2 f2f7 	udiv	r2, r2, r7
    3190:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    3194:	2204      	movs	r2, #4
    3196:	f022 ffe3 	bl	26160 <memcpy>
	       sizeof(conn->slave.force));

	peer_addr_type = pdu_adv->tx_addr;
    319a:	f894 b01c 	ldrb.w	fp, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    319e:	f104 011e 	add.w	r1, r4, #30
    31a2:	2206      	movs	r2, #6
    31a4:	a80e      	add	r0, sp, #56	; 0x38
    31a6:	f022 ffdb 	bl	26160 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    31aa:	f3cb 1b80 	ubfx	fp, fp, #6, #1
	} else {
		chan_sel = pdu_adv->chan_sel;
	}

	cc = (void *)pdu_adv;
	cc->status = 0U;
    31ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    31b2:	83a2      	strh	r2, [r4, #28]
	} else {
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		cc->peer_addr_type = peer_addr_type;
    31b4:	f884 b01e 	strb.w	fp, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    31b8:	a90e      	add	r1, sp, #56	; 0x38
    31ba:	2206      	movs	r2, #6
    31bc:	f104 001f 	add.w	r0, r4, #31
    31c0:	f022 ffce 	bl	26160 <memcpy>
	}

	cc->interval = lll->interval;
    31c4:	8a72      	ldrh	r2, [r6, #18]
	cc->latency = lll->latency;
	cc->timeout = timeout;
    31c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc->interval = lll->interval;
    31c8:	84e2      	strh	r2, [r4, #38]	; 0x26
	cc->latency = lll->latency;
    31ca:	8ab2      	ldrh	r2, [r6, #20]
	cc->timeout = timeout;
    31cc:	8563      	strh	r3, [r4, #42]	; 0x2a
	cc->sca = conn->slave.sca;
    31ce:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
	cc->latency = lll->latency;
    31d2:	8522      	strh	r2, [r4, #40]	; 0x28
	cc->sca = conn->slave.sca;
    31d4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    31d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	lll->handle = ll_conn_handle_get(conn);
    31dc:	4628      	mov	r0, r5
    31de:	f016 fbf5 	bl	199cc <ll_conn_handle_get>
		rx->rx_ftr.param_adv_term.conn_handle = lll->handle;
		rx->rx_ftr.param_adv_term.num_events = 0U;
	}
#endif

	ll_rx_put(link, rx);
    31e2:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    31e4:	8230      	strh	r0, [r6, #16]
	rx->handle = lll->handle;
    31e6:	80e0      	strh	r0, [r4, #6]
	ll_rx_put(link, rx);
    31e8:	980c      	ldr	r0, [sp, #48]	; 0x30
	conn->evt.ticks_xtal_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	conn->evt.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	conn->evt.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    31ea:	4c59      	ldr	r4, [pc, #356]	; (3350 <ull_slave_setup+0x2d0>)
	ll_rx_put(link, rx);
    31ec:	f015 fbbe 	bl	1896c <ll_rx_put>
	ll_rx_sched();
    31f0:	f015 fbc6 	bl	18980 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    31f4:	4641      	mov	r1, r8
    31f6:	4640      	mov	r0, r8
    31f8:	f026 f86a 	bl	292d0 <lll_radio_rx_ready_delay_get>
	conn->evt.ticks_xtal_to_start =
    31fc:	2331      	movs	r3, #49	; 0x31
	ready_delay_us = lll_radio_rx_ready_delay_get(0, 0);
    31fe:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3200:	f200 4052 	addw	r0, r0, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    3204:	602b      	str	r3, [r5, #0]
	conn->evt.ticks_active_to_start = 0U;
    3206:	f8c5 8004 	str.w	r8, [r5, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    320a:	a34d      	add	r3, pc, #308	; (adr r3, 3340 <ull_slave_setup+0x2c0>)
    320c:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->evt.ticks_preempt_to_start =
    3210:	f8c5 8008 	str.w	r8, [r5, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    3214:	fba0 0104 	umull	r0, r1, r0, r4
    3218:	f7fe fe16 	bl	1e48 <__aeabi_uldivmod>
		ticks_slot_overhead = ticks_slot_offset;
	} else {
		ticks_slot_overhead = 0U;
	}

	conn_interval_us -= lll->slave.window_widening_periodic_us;
    321c:	6ab3      	ldr	r3, [r6, #40]	; 0x28

	conn_offset_us = ftr->radio_end_us;
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    321e:	990b      	ldr	r1, [sp, #44]	; 0x2c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    3220:	1aff      	subs	r7, r7, r3
	conn_offset_us = ftr->radio_end_us;
    3222:	f8d9 300c 	ldr.w	r3, [r9, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    3226:	f240 42e2 	movw	r2, #1250	; 0x4e2
    322a:	fb02 3301 	mla	r3, r2, r1, r3
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    322e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_delay_us;
	conn_offset_us -= EVENT_OVERHEAD_START_US;
	conn_offset_us -= EVENT_TICKER_RES_MARGIN_US;
	conn_offset_us -= EVENT_JITTER_US;
    3232:	f203 3386 	addw	r3, r3, #902	; 0x386
	conn_offset_us -= ready_delay_us;
    3236:	eba3 030b 	sub.w	r3, r3, fp

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* disable ticker job, in order to chain stop and start to avoid RTC
	 * being stopped if no tickers active.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    323a:	4642      	mov	r2, r8
    323c:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    323e:	60e8      	str	r0, [r5, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3240:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    3242:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3244:	f013 f9e6 	bl	16614 <mayfly_enable>
		aux->is_started = 0U;
	}
#endif

	/* Stop Advertiser */
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    3248:	4650      	mov	r0, sl
    324a:	f016 f8e7 	bl	1941c <ull_adv_handle_get>
    324e:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    3250:	4b40      	ldr	r3, [pc, #256]	; (3354 <ull_slave_setup+0x2d4>)
    3252:	f8cd a000 	str.w	sl, [sp]
    3256:	b2d2      	uxtb	r2, r2
    3258:	2101      	movs	r1, #1
    325a:	4640      	mov	r0, r8
    325c:	f013 ffd8 	bl	17210 <ticker_stop>
				    TICKER_USER_ID_ULL_HIGH,
				    ticker_id_adv, ticker_op_stop_adv_cb, adv);
	ticker_op_stop_adv_cb(ticker_status, adv);
    3260:	4651      	mov	r1, sl
    3262:	f017 fc53 	bl	1ab0c <ticker_op_stop_adv_cb>

	/* Stop Direct Adv Stop */
	if (adv->lll.is_hdcd) {
    3266:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    326a:	07db      	lsls	r3, r3, #31
    326c:	d507      	bpl.n	327e <ull_slave_setup+0x1fe>
		/* Advertiser stop can expire while here in this ISR.
		 * Deferred attempt to stop can fail as it would have
		 * expired, hence ignore failure.
		 */
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    326e:	2201      	movs	r2, #1
    3270:	f8cd 8000 	str.w	r8, [sp]
    3274:	4643      	mov	r3, r8
    3276:	4611      	mov	r1, r2
    3278:	4640      	mov	r0, r8
    327a:	f013 ffc9 	bl	17210 <ticker_stop>
			    TICKER_ID_ADV_STOP, NULL, NULL);
	}

	/* Start Slave */
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    327e:	4628      	mov	r0, r5
    3280:	f016 fba4 	bl	199cc <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ftr->ticks_anchor - ticks_slot_offset,
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3284:	fba7 6704 	umull	r6, r7, r7, r4
    3288:	a32d      	add	r3, pc, #180	; (adr r3, 3340 <ull_slave_setup+0x2c0>)
    328a:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    328e:	4680      	mov	r8, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3290:	4639      	mov	r1, r7
    3292:	4630      	mov	r0, r6
    3294:	f7fe fdd8 	bl	1e48 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3298:	f8d9 3008 	ldr.w	r3, [r9, #8]
    329c:	f1a3 0931 	sub.w	r9, r3, #49	; 0x31
    32a0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    32a4:	9308      	str	r3, [sp, #32]
    32a6:	4b2c      	ldr	r3, [pc, #176]	; (3358 <ull_slave_setup+0x2d8>)
    32a8:	e9cd 5306 	strd	r5, r3, [sp, #24]
    32ac:	4b2b      	ldr	r3, [pc, #172]	; (335c <ull_slave_setup+0x2dc>)
    32ae:	9305      	str	r3, [sp, #20]
    32b0:	68eb      	ldr	r3, [r5, #12]
    32b2:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    32b4:	4b2a      	ldr	r3, [pc, #168]	; (3360 <ull_slave_setup+0x2e0>)
    32b6:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    32ba:	fba5 bc03 	umull	fp, ip, r5, r3
    32be:	2307      	movs	r3, #7
    32c0:	fb03 cc05 	mla	ip, r3, r5, ip
    32c4:	ebb6 000b 	subs.w	r0, r6, fp
    32c8:	eb67 010c 	sbc.w	r1, r7, ip
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    32cc:	f04f 0a00 	mov.w	sl, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    32d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    32d4:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    32d6:	f8cd a00c 	str.w	sl, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    32da:	f7fe fdb5 	bl	1e48 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    32de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    32e0:	a317      	add	r3, pc, #92	; (adr r3, 3340 <ull_slave_setup+0x2c0>)
    32e2:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    32e6:	e9cd 5001 	strd	r5, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    32ea:	fba1 0104 	umull	r0, r1, r1, r4
    32ee:	f7fe fdab 	bl	1e48 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    32f2:	f108 0805 	add.w	r8, r8, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    32f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    32fa:	fa5f f888 	uxtb.w	r8, r8
    32fe:	9000      	str	r0, [sp, #0]
    3300:	464b      	mov	r3, r9
    3302:	4642      	mov	r2, r8
    3304:	2101      	movs	r1, #1
    3306:	4650      	mov	r0, sl
    3308:	f025 fc77 	bl	28bfa <ticker_start>
				     TICKER_NULL_LAZY,
				     (conn->evt.ticks_slot +
				      ticks_slot_overhead),
				     ull_slave_ticker_cb, conn, ticker_op_cb,
				     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    330c:	f030 0302 	bics.w	r3, r0, #2
    3310:	d00b      	beq.n	332a <ull_slave_setup+0x2aa>
    3312:	f44f 72b7 	mov.w	r2, #366	; 0x16e
    3316:	4913      	ldr	r1, [pc, #76]	; (3364 <ull_slave_setup+0x2e4>)
    3318:	4813      	ldr	r0, [pc, #76]	; (3368 <ull_slave_setup+0x2e8>)
    331a:	f020 ff8f 	bl	2423c <printk>
    331e:	4040      	eors	r0, r0
    3320:	f380 8811 	msr	BASEPRI, r0
    3324:	f04f 0003 	mov.w	r0, #3
    3328:	df02      	svc	2

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    332a:	2201      	movs	r2, #1
    332c:	2102      	movs	r1, #2
    332e:	4610      	mov	r0, r2
    3330:	f013 f970 	bl	16614 <mayfly_enable>
#endif
}
    3334:	b011      	add	sp, #68	; 0x44
    3336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    333a:	bf00      	nop
    333c:	f3af 8000 	nop.w
    3340:	1afd498d 	.word	0x1afd498d
    3344:	00000007 	.word	0x00000007
    3348:	000f4240 	.word	0x000f4240
    334c:	026259ff 	.word	0x026259ff
    3350:	3b9aca00 	.word	0x3b9aca00
    3354:	0001ab0d 	.word	0x0001ab0d
    3358:	0001aae5 	.word	0x0001aae5
    335c:	0001ab41 	.word	0x0001ab41
    3360:	1afd498d 	.word	0x1afd498d
    3364:	00030e1b 	.word	0x00030e1b
    3368:	0002bced 	.word	0x0002bced
    336c:	00000000 	.word	0x00000000

00003370 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    3370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3374:	b08f      	sub	sp, #60	; 0x3c
    3376:	4683      	mov	fp, r0
	uint8_t instance_index;
	uint8_t ticker_id;
	int result;
	uint32_t err;

	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    3378:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    337c:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    3380:	f025 fcfb 	bl	28d7a <ll_timeslice_ticker_id_get>
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    3384:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 3460 <nrf_flash_sync_exe+0xf0>
	err = ticker_start(instance_index,
    3388:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    338c:	930a      	str	r3, [sp, #40]	; 0x28
    338e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    3392:	930b      	str	r3, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(
    3394:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 3464 <nrf_flash_sync_exe+0xf4>
	err = ticker_start(instance_index,
    3398:	f025 fc62 	bl	28c60 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    339c:	f8d8 4000 	ldr.w	r4, [r8]
    33a0:	fba4 4509 	umull	r4, r5, r4, r9
    33a4:	a328      	add	r3, pc, #160	; (adr r3, 3448 <nrf_flash_sync_exe+0xd8>)
    33a6:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    33aa:	4682      	mov	sl, r0
			   HAL_TICKER_US_TO_TICKS(
    33ac:	4629      	mov	r1, r5
    33ae:	4620      	mov	r0, r4
    33b0:	f7fe fd4a 	bl	1e48 <__aeabi_uldivmod>
    33b4:	4606      	mov	r6, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    33b6:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    33ba:	4b25      	ldr	r3, [pc, #148]	; (3450 <nrf_flash_sync_exe+0xe0>)
    33bc:	9305      	str	r3, [sp, #20]
    33be:	2700      	movs	r7, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    33c0:	a321      	add	r3, pc, #132	; (adr r3, 3448 <nrf_flash_sync_exe+0xd8>)
    33c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    33c6:	fba0 0109 	umull	r0, r1, r0, r9
	err = ticker_start(instance_index,
    33ca:	f8cd b018 	str.w	fp, [sp, #24]
    33ce:	e9cd 7707 	strd	r7, r7, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    33d2:	f7fe fd39 	bl	1e48 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    33d6:	4b1f      	ldr	r3, [pc, #124]	; (3454 <nrf_flash_sync_exe+0xe4>)
    33d8:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    33dc:	fba6 bc03 	umull	fp, ip, r6, r3
	err = ticker_start(instance_index,
    33e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    33e4:	2307      	movs	r3, #7
    33e6:	fb03 cc06 	mla	ip, r3, r6, ip
	err = ticker_start(instance_index,
    33ea:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    33ee:	ebb4 000b 	subs.w	r0, r4, fp
    33f2:	eb65 010c 	sbc.w	r1, r5, ip
    33f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    33fa:	2300      	movs	r3, #0
    33fc:	f7fe fd24 	bl	1e48 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    3400:	4653      	mov	r3, sl
    3402:	e9cd 6001 	strd	r6, r0, [sp, #4]
    3406:	9700      	str	r7, [sp, #0]
    3408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    340a:	980a      	ldr	r0, [sp, #40]	; 0x28
    340c:	2103      	movs	r1, #3
    340e:	f025 fbf4 	bl	28bfa <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    3412:	f030 0302 	bics.w	r3, r0, #2
    3416:	d114      	bne.n	3442 <nrf_flash_sync_exe+0xd2>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3418:	4a0f      	ldr	r2, [pc, #60]	; (3458 <nrf_flash_sync_exe+0xe8>)
    341a:	4810      	ldr	r0, [pc, #64]	; (345c <nrf_flash_sync_exe+0xec>)
    341c:	2300      	movs	r3, #0
    341e:	f01e fd71 	bl	21f04 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    3422:	b158      	cbz	r0, 343c <nrf_flash_sync_exe+0xcc>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);
    3424:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    3428:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    342c:	2103      	movs	r1, #3
    342e:	f01a fed3 	bl	1e1d8 <_ticker_stop>

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    3432:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    3436:	b00f      	add	sp, #60	; 0x3c
    3438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    343c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    3440:	e7f9      	b.n	3436 <nrf_flash_sync_exe+0xc6>
		result = -ECANCELED;
    3442:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    3446:	e7f6      	b.n	3436 <nrf_flash_sync_exe+0xc6>
    3448:	1afd498d 	.word	0x1afd498d
    344c:	00000007 	.word	0x00000007
    3450:	0001e27d 	.word	0x0001e27d
    3454:	1afd498d 	.word	0x1afd498d
    3458:	000b7b44 	.word	0x000b7b44
    345c:	20003378 	.word	0x20003378
    3460:	20003368 	.word	0x20003368
    3464:	3b9aca00 	.word	0x3b9aca00

00003468 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    3468:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    346a:	4d0f      	ldr	r5, [pc, #60]	; (34a8 <nrf_flash_sync_check_time_limit+0x40>)
{
    346c:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    346e:	f025 fbf7 	bl	28c60 <ticker_ticks_now_get>
    3472:	68a9      	ldr	r1, [r5, #8]
    3474:	f025 fbf6 	bl	28c64 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    3478:	490c      	ldr	r1, [pc, #48]	; (34ac <nrf_flash_sync_check_time_limit+0x44>)
	if (ticks_diff + ticks_diff/iteration >
    347a:	fbb0 f4f4 	udiv	r4, r0, r4
    347e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    3480:	6868      	ldr	r0, [r5, #4]
    3482:	a307      	add	r3, pc, #28	; (adr r3, 34a0 <nrf_flash_sync_check_time_limit+0x38>)
    3484:	e9d3 2300 	ldrd	r2, r3, [r3]
    3488:	fba0 0101 	umull	r0, r1, r0, r1
    348c:	f7fe fcdc 	bl	1e48 <__aeabi_uldivmod>
    3490:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    3494:	4284      	cmp	r4, r0
    3496:	bf94      	ite	ls
    3498:	2000      	movls	r0, #0
    349a:	2001      	movhi	r0, #1
    349c:	bd38      	pop	{r3, r4, r5, pc}
    349e:	bf00      	nop
    34a0:	1afd498d 	.word	0x1afd498d
    34a4:	00000007 	.word	0x00000007
    34a8:	20003368 	.word	0x20003368
    34ac:	3b9aca00 	.word	0x3b9aca00

000034b0 <bt_mesh_sensor_delta_threshold>:
	return in_range ? threshold->range.cadence : !threshold->range.cadence;
}

bool bt_mesh_sensor_delta_threshold(const struct bt_mesh_sensor *sensor,
				    const struct sensor_value *curr)
{
    34b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct sensor_value delta = {
		curr->val1 - sensor->state.prev.val1,
		curr->val2 - sensor->state.prev.val2,
    34b2:	e9d0 c613 	ldrd	ip, r6, [r0, #76]	; 0x4c
    34b6:	684c      	ldr	r4, [r1, #4]
	};
	int64_t delta_mill = SENSOR_MILL(&delta);
    34b8:	4f1d      	ldr	r7, [pc, #116]	; (3530 <bt_mesh_sensor_delta_threshold+0x80>)
{
    34ba:	4602      	mov	r2, r0
		curr->val1 - sensor->state.prev.val1,
    34bc:	6808      	ldr	r0, [r1, #0]
		curr->val2 - sensor->state.prev.val2,
    34be:	1ba4      	subs	r4, r4, r6
		curr->val1 - sensor->state.prev.val1,
    34c0:	eba0 000c 	sub.w	r0, r0, ip
	int64_t delta_mill = SENSOR_MILL(&delta);
    34c4:	17e5      	asrs	r5, r4, #31
    34c6:	fbc7 4500 	smlal	r4, r5, r7, r0
	int64_t thrsh_mill;

	if (delta_mill < 0) {
    34ca:	2c00      	cmp	r4, #0
    34cc:	f175 0300 	sbcs.w	r3, r5, #0
    34d0:	da25      	bge.n	351e <bt_mesh_sensor_delta_threshold+0x6e>
		delta_mill = -delta_mill;
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.down);
    34d2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    34d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		delta_mill = -delta_mill;
    34d6:	4264      	negs	r4, r4
    34d8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.down);
    34dc:	17c1      	asrs	r1, r0, #31
	}

	/* If the threshold value is a perentage, we should calculate the actual
	 * threshold value relative to the previous value.
	 */
	if (sensor->state.threshold.delta.type ==
    34de:	f892 2020 	ldrb.w	r2, [r2, #32]
    34e2:	2a01      	cmp	r2, #1
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.up);
    34e4:	fbc7 0103 	smlal	r0, r1, r7, r3
	if (sensor->state.threshold.delta.type ==
    34e8:	d112      	bne.n	3510 <bt_mesh_sensor_delta_threshold+0x60>
	    BT_MESH_SENSOR_DELTA_PERCENT) {
		int64_t prev_mill = abs(SENSOR_MILL(&sensor->state.prev));
    34ea:	4a11      	ldr	r2, [pc, #68]	; (3530 <bt_mesh_sensor_delta_threshold+0x80>)
    34ec:	fb02 630c 	mla	r3, r2, ip, r6

int rand(void);

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    34f0:	2b00      	cmp	r3, #0
    34f2:	bfb8      	it	lt
    34f4:	425b      	neglt	r3, r3

		thrsh_mill = (prev_mill * thrsh_mill) / (100LL * 1000000LL);
    34f6:	fb03 f201 	mul.w	r2, r3, r1
		int64_t prev_mill = abs(SENSOR_MILL(&sensor->state.prev));
    34fa:	17df      	asrs	r7, r3, #31
		thrsh_mill = (prev_mill * thrsh_mill) / (100LL * 1000000LL);
    34fc:	fb00 2207 	mla	r2, r0, r7, r2
    3500:	fba3 0100 	umull	r0, r1, r3, r0
    3504:	4411      	add	r1, r2
    3506:	a308      	add	r3, pc, #32	; (adr r3, 3528 <bt_mesh_sensor_delta_threshold+0x78>)
    3508:	e9d3 2300 	ldrd	r2, r3, [r3]
    350c:	f7fe fc4c 	bl	1da8 <__aeabi_ldivmod>

	BT_DBG("Delta: %u (%d - %d) thrsh: %u", (uint32_t)(delta_mill / 1000000L),
	       (int32_t)curr->val1, (int32_t)sensor->state.prev.val1,
	       (uint32_t)(thrsh_mill / 1000000L));

	return (delta_mill > thrsh_mill);
    3510:	42a0      	cmp	r0, r4
    3512:	eb71 0305 	sbcs.w	r3, r1, r5
}
    3516:	bfb4      	ite	lt
    3518:	2001      	movlt	r0, #1
    351a:	2000      	movge	r0, #0
    351c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		thrsh_mill = SENSOR_MILL(&sensor->state.threshold.delta.up);
    351e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    3520:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3522:	17c1      	asrs	r1, r0, #31
    3524:	e7db      	b.n	34de <bt_mesh_sensor_delta_threshold+0x2e>
    3526:	bf00      	nop
    3528:	05f5e100 	.word	0x05f5e100
    352c:	00000000 	.word	0x00000000
    3530:	000f4240 	.word	0x000f4240
    3534:	00000000 	.word	0x00000000

00003538 <sensor_descriptor_encode>:
		sensor_powtime_decode(net_buf_simple_pull_u8(buf));
}

void sensor_descriptor_encode(struct net_buf_simple *buf,
				     struct bt_mesh_sensor *sensor)
{
    3538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	net_buf_simple_add_le16(buf, sensor->type->id);
    353c:	680b      	ldr	r3, [r1, #0]
{
    353e:	b08b      	sub	sp, #44	; 0x2c
    3540:	460c      	mov	r4, r1
	net_buf_simple_add_le16(buf, sensor->type->id);
    3542:	8819      	ldrh	r1, [r3, #0]
{
    3544:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, sensor->type->id);
    3546:	f026 fa3d 	bl	299c4 <net_buf_simple_add_le16>

	const struct bt_mesh_sensor_descriptor dummy = { 0 };
    354a:	466b      	mov	r3, sp
    354c:	2228      	movs	r2, #40	; 0x28
    354e:	2100      	movs	r1, #0
    3550:	4618      	mov	r0, r3
    3552:	f022 fe2f 	bl	261b4 <memset>
	const struct bt_mesh_sensor_descriptor *d =
		sensor->descriptor ? sensor->descriptor : &dummy;
    3556:	6864      	ldr	r4, [r4, #4]
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    3558:	4a37      	ldr	r2, [pc, #220]	; (3638 <sensor_descriptor_encode+0x100>)
		sensor->descriptor ? sensor->descriptor : &dummy;
    355a:	2c00      	cmp	r4, #0
    355c:	bf08      	it	eq
    355e:	4604      	moveq	r4, r0
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    3560:	e9d4 1300 	ldrd	r1, r3, [r4]
	if (tol_mill > (1000000L * 100L)) {
    3564:	a730      	add	r7, pc, #192	; (adr r7, 3628 <sensor_descriptor_encode+0xf0>)
    3566:	e9d7 6700 	ldrd	r6, r7, [r7]
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    356a:	fb02 3101 	mla	r1, r2, r1, r3
    356e:	17cb      	asrs	r3, r1, #31
	if (tol_mill > (1000000L * 100L)) {
    3570:	429f      	cmp	r7, r3
    3572:	bf08      	it	eq
    3574:	428e      	cmpeq	r6, r1
    3576:	d34f      	bcc.n	3618 <sensor_descriptor_encode+0xe0>
	return (tol_mill * 4095L + (1000000L * 50L)) / (1000000L * 100L);
    3578:	f20f 09b4 	addw	r9, pc, #180	; 0xb4
    357c:	e9d9 8900 	ldrd	r8, r9, [r9]
    3580:	f640 70ff 	movw	r0, #4095	; 0xfff
    3584:	fbc0 8901 	smlal	r8, r9, r0, r1
    3588:	4640      	mov	r0, r8
    358a:	4632      	mov	r2, r6
    358c:	463b      	mov	r3, r7
    358e:	4649      	mov	r1, r9
    3590:	f7fe fc5a 	bl	1e48 <__aeabi_uldivmod>
    3594:	fa1f f880 	uxth.w	r8, r0
	uint64_t tol_mill = 1000000L * tol->val1 + tol->val2;
    3598:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    359c:	4926      	ldr	r1, [pc, #152]	; (3638 <sensor_descriptor_encode+0x100>)
    359e:	fb01 2c03 	mla	ip, r1, r3, r2
    35a2:	4662      	mov	r2, ip
    35a4:	17d3      	asrs	r3, r2, #31
	if (tol_mill > (1000000L * 100L)) {
    35a6:	429f      	cmp	r7, r3
    35a8:	bf08      	it	eq
    35aa:	4566      	cmpeq	r6, ip
    35ac:	d337      	bcc.n	361e <sensor_descriptor_encode+0xe6>
	return (tol_mill * 4095L + (1000000L * 50L)) / (1000000L * 100L);
    35ae:	a120      	add	r1, pc, #128	; (adr r1, 3630 <sensor_descriptor_encode+0xf8>)
    35b0:	e9d1 0100 	ldrd	r0, r1, [r1]
    35b4:	f640 76ff 	movw	r6, #4095	; 0xfff
    35b8:	fbc6 010c 	smlal	r0, r1, r6, ip
    35bc:	a31a      	add	r3, pc, #104	; (adr r3, 3628 <sensor_descriptor_encode+0xf0>)
    35be:	e9d3 2300 	ldrd	r2, r3, [r3]
    35c2:	f7fe fc41 	bl	1e48 <__aeabi_uldivmod>
    35c6:	b286      	uxth	r6, r0

	uint16_t tol_pos = tolerance_encode(&d->tolerance.positive);
	uint16_t tol_neg = tolerance_encode(&d->tolerance.negative);

	net_buf_simple_add_u8(buf, tol_pos & 0xff);
    35c8:	fa5f f188 	uxtb.w	r1, r8
    35cc:	4628      	mov	r0, r5
    35ce:	f026 f9f2 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf,
			      ((tol_pos >> 8) & BIT_MASK(4)) | (tol_neg << 4));
    35d2:	0131      	lsls	r1, r6, #4
	net_buf_simple_add_u8(buf,
    35d4:	ea41 2118 	orr.w	r1, r1, r8, lsr #8
    35d8:	b2c9      	uxtb	r1, r1
    35da:	4628      	mov	r0, r5
    35dc:	f026 f9eb 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, tol_neg >> 4);
    35e0:	f3c6 1107 	ubfx	r1, r6, #4, #8
    35e4:	4628      	mov	r0, r5
    35e6:	f026 f9e6 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, d->sampling_type);
    35ea:	7c21      	ldrb	r1, [r4, #16]
    35ec:	4628      	mov	r0, r5
    35ee:	f026 f9e2 	bl	299b6 <net_buf_simple_add_u8>

	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->period));
    35f2:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
    35f6:	f01b fe49 	bl	1f28c <sensor_powtime_encode>
    35fa:	4601      	mov	r1, r0
    35fc:	4628      	mov	r0, r5
    35fe:	f026 f9da 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->update_interval));
    3602:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
    3606:	f01b fe41 	bl	1f28c <sensor_powtime_encode>
    360a:	4601      	mov	r1, r0
    360c:	4628      	mov	r0, r5
}
    360e:	b00b      	add	sp, #44	; 0x2c
    3610:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	net_buf_simple_add_u8(buf, sensor_powtime_encode(d->update_interval));
    3614:	f026 b9cf 	b.w	299b6 <net_buf_simple_add_u8>
		return 0;
    3618:	f04f 0800 	mov.w	r8, #0
    361c:	e7bc      	b.n	3598 <sensor_descriptor_encode+0x60>
    361e:	2600      	movs	r6, #0
    3620:	e7d2      	b.n	35c8 <sensor_descriptor_encode+0x90>
    3622:	bf00      	nop
    3624:	f3af 8000 	nop.w
    3628:	05f5e100 	.word	0x05f5e100
    362c:	00000000 	.word	0x00000000
    3630:	02faf080 	.word	0x02faf080
    3634:	00000000 	.word	0x00000000
    3638:	000f4240 	.word	0x000f4240

0000363c <prov_complete>:

static bool initialized=false; // Flag if the Stack is initialized

static void prov_complete(uint16_t net_idx, uint16_t src)
{
	printk("Prov complete! Addr: 0x%04x\n", src);
    363c:	4801      	ldr	r0, [pc, #4]	; (3644 <prov_complete+0x8>)
    363e:	f020 bdfd 	b.w	2423c <printk>
    3642:	bf00      	nop
    3644:	0002ba74 	.word	0x0002ba74

00003648 <input_complete>:
	return 0;
}

static void input_complete(void)
{
	printk("Input Complete");
    3648:	4801      	ldr	r0, [pc, #4]	; (3650 <input_complete+0x8>)
    364a:	f020 bdf7 	b.w	2423c <printk>
    364e:	bf00      	nop
    3650:	0002ba33 	.word	0x0002ba33

00003654 <input>:
{
    3654:	b508      	push	{r3, lr}
	printk("Press a button to set the right number.");
    3656:	4802      	ldr	r0, [pc, #8]	; (3660 <input+0xc>)
    3658:	f020 fdf0 	bl	2423c <printk>
}
    365c:	2000      	movs	r0, #0
    365e:	bd08      	pop	{r3, pc}
    3660:	0002ba0b 	.word	0x0002ba0b

00003664 <output_string>:

	return -ENOTSUP;
}

static int output_string(const char *string)
{
    3664:	b508      	push	{r3, lr}
	printk("OOB String: %s\n", string);
    3666:	4601      	mov	r1, r0
    3668:	4802      	ldr	r0, [pc, #8]	; (3674 <output_string+0x10>)
    366a:	f020 fde7 	bl	2423c <printk>
	return 0;
}
    366e:	2000      	movs	r0, #0
    3670:	bd08      	pop	{r3, pc}
    3672:	bf00      	nop
    3674:	0002ba64 	.word	0x0002ba64

00003678 <output_number>:
	if (action == BT_MESH_DISPLAY_NUMBER) {
    3678:	2808      	cmp	r0, #8
{
    367a:	b508      	push	{r3, lr}
	if (action == BT_MESH_DISPLAY_NUMBER) {
    367c:	d104      	bne.n	3688 <output_number+0x10>
		printk("OOB Number: %u\n", number);
    367e:	4806      	ldr	r0, [pc, #24]	; (3698 <output_number+0x20>)
		printk("Blinking %u times", number);
    3680:	f020 fddc 	bl	2423c <printk>
		return 0;
    3684:	2000      	movs	r0, #0
}
    3686:	bd08      	pop	{r3, pc}
	if (action == BT_MESH_BLINK) {
    3688:	2801      	cmp	r0, #1
    368a:	d101      	bne.n	3690 <output_number+0x18>
		printk("Blinking %u times", number);
    368c:	4803      	ldr	r0, [pc, #12]	; (369c <output_number+0x24>)
    368e:	e7f7      	b.n	3680 <output_number+0x8>
	return -ENOTSUP;
    3690:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3694:	e7f7      	b.n	3686 <output_number+0xe>
    3696:	bf00      	nop
    3698:	0002ba42 	.word	0x0002ba42
    369c:	0002ba52 	.word	0x0002ba52

000036a0 <bt_ready>:
	.input_complete = input_complete,
	.reset = prov_reset
	};

// Init the rest while Bluetooth is enabled
static void bt_ready(int err){
    36a0:	b510      	push	{r4, lr}

	/* --------------- Init Mesh ------------*/
	printk("Init Mesh...\n");
    36a2:	4822      	ldr	r0, [pc, #136]	; (372c <bt_ready+0x8c>)
    36a4:	f020 fdca 	bl	2423c <printk>
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    36a8:	4c21      	ldr	r4, [pc, #132]	; (3730 <bt_ready+0x90>)
    36aa:	2110      	movs	r1, #16
    36ac:	4620      	mov	r0, r4
    36ae:	f021 fb5d 	bl	24d6c <z_impl_hwinfo_get_device_id>
	
	hwinfo_get_device_id(dev_uuid, sizeof(dev_uuid));
	// Do catch for nrf53 -> no HWINFO set (0xFFFF)
	if (dev_uuid[0] == 0xFF && dev_uuid[1] == 0xFF && dev_uuid[5] == 0xFF){
    36b2:	7862      	ldrb	r2, [r4, #1]
    36b4:	7823      	ldrb	r3, [r4, #0]
    36b6:	4013      	ands	r3, r2
    36b8:	7962      	ldrb	r2, [r4, #5]
    36ba:	4013      	ands	r3, r2
    36bc:	2bff      	cmp	r3, #255	; 0xff
    36be:	d10d      	bne.n	36dc <bt_ready+0x3c>
		uint8_t *p0 = (uint8_t*)&NRF_FICR->DEVICEADDR[0]; // Use MAC Address for UUID
		dev_uuid[0] = p0[0];
    36c0:	4b1c      	ldr	r3, [pc, #112]	; (3734 <bt_ready+0x94>)
    36c2:	781a      	ldrb	r2, [r3, #0]
    36c4:	7022      	strb	r2, [r4, #0]
		dev_uuid[1] = p0[1];
    36c6:	785a      	ldrb	r2, [r3, #1]
    36c8:	7062      	strb	r2, [r4, #1]
		dev_uuid[2] = p0[2];
    36ca:	789a      	ldrb	r2, [r3, #2]
    36cc:	70a2      	strb	r2, [r4, #2]
		dev_uuid[3] = p0[3];
    36ce:	78db      	ldrb	r3, [r3, #3]
    36d0:	70e3      	strb	r3, [r4, #3]
		uint8_t *p1 = (uint8_t*)&NRF_FICR->DEVICEADDR[1]; // Use MAC Address for UUID
		dev_uuid[4] = p1[0];
    36d2:	4b19      	ldr	r3, [pc, #100]	; (3738 <bt_ready+0x98>)
    36d4:	781a      	ldrb	r2, [r3, #0]
    36d6:	7122      	strb	r2, [r4, #4]
		dev_uuid[5] = p1[1];
    36d8:	785b      	ldrb	r3, [r3, #1]
    36da:	7163      	strb	r3, [r4, #5]
	}

	err = bt_mesh_init(&prov, bm_blemesh_model_handler_init());
    36dc:	f000 f8de 	bl	389c <bm_blemesh_model_handler_init>
    36e0:	4601      	mov	r1, r0
    36e2:	4816      	ldr	r0, [pc, #88]	; (373c <bt_ready+0x9c>)
    36e4:	f024 f893 	bl	2780e <bt_mesh_init>
	if (err)
    36e8:	4601      	mov	r1, r0
    36ea:	b120      	cbz	r0, 36f6 <bt_ready+0x56>
	{
		printk("Initializing mesh failed (err %d)\n", err);
    36ec:	4814      	ldr	r0, [pc, #80]	; (3740 <bt_ready+0xa0>)
		printk("Provisioning completed\n");
	}
	/* ===================================*/

	initialized = true;
}
    36ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Provisioning failed (err %d)\n", err);
    36f2:	f020 bda3 	b.w	2423c <printk>
	printk("Mesh initialized\n");
    36f6:	4813      	ldr	r0, [pc, #76]	; (3744 <bt_ready+0xa4>)
    36f8:	f020 fda0 	bl	2423c <printk>
	printk("Provisioning...\n");
    36fc:	4812      	ldr	r0, [pc, #72]	; (3748 <bt_ready+0xa8>)
    36fe:	f020 fd9d 	bl	2423c <printk>
		settings_load();
    3702:	f021 f9d8 	bl	24ab6 <settings_load>
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    3706:	2003      	movs	r0, #3
    3708:	f011 fe18 	bl	1533c <bt_mesh_prov_enable>
	if (err == -EALREADY)
    370c:	f110 0f45 	cmn.w	r0, #69	; 0x45
	err = bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
    3710:	4601      	mov	r1, r0
	if (err == -EALREADY)
    3712:	d106      	bne.n	3722 <bt_ready+0x82>
		printk("Already Provisioned (Restored Settings)\n");
    3714:	480d      	ldr	r0, [pc, #52]	; (374c <bt_ready+0xac>)
		printk("Provisioning completed\n");
    3716:	f020 fd91 	bl	2423c <printk>
	initialized = true;
    371a:	4b0d      	ldr	r3, [pc, #52]	; (3750 <bt_ready+0xb0>)
    371c:	2201      	movs	r2, #1
    371e:	701a      	strb	r2, [r3, #0]
}
    3720:	bd10      	pop	{r4, pc}
	else if (err)
    3722:	b108      	cbz	r0, 3728 <bt_ready+0x88>
		printk("Provisioning failed (err %d)\n", err);
    3724:	480b      	ldr	r0, [pc, #44]	; (3754 <bt_ready+0xb4>)
    3726:	e7e2      	b.n	36ee <bt_ready+0x4e>
		printk("Provisioning completed\n");
    3728:	480b      	ldr	r0, [pc, #44]	; (3758 <bt_ready+0xb8>)
    372a:	e7f4      	b.n	3716 <bt_ready+0x76>
    372c:	0002b958 	.word	0x0002b958
    3730:	20003532 	.word	0x20003532
    3734:	100000a4 	.word	0x100000a4
    3738:	100000a8 	.word	0x100000a8
    373c:	20000388 	.word	0x20000388
    3740:	0002b966 	.word	0x0002b966
    3744:	0002b989 	.word	0x0002b989
    3748:	0002b99b 	.word	0x0002b99b
    374c:	0002b9ac 	.word	0x0002b9ac
    3750:	20003542 	.word	0x20003542
    3754:	0002b9d5 	.word	0x0002b9d5
    3758:	0002b9f3 	.word	0x0002b9f3

0000375c <bm_blemesh_enable>:

void bm_blemesh_enable(void)
{
    375c:	b538      	push	{r3, r4, r5, lr}
	int err;

	/* ---------- Init Bluetooth ---------- */
	printk("Enabling Bluetooth...\n");
    375e:	480f      	ldr	r0, [pc, #60]	; (379c <bm_blemesh_enable+0x40>)
	err = bt_enable(bt_ready);
	while (initialized == false){
    3760:	4d0f      	ldr	r5, [pc, #60]	; (37a0 <bm_blemesh_enable+0x44>)
	printk("Enabling Bluetooth...\n");
    3762:	f020 fd6b 	bl	2423c <printk>
	err = bt_enable(bt_ready);
    3766:	480f      	ldr	r0, [pc, #60]	; (37a4 <bm_blemesh_enable+0x48>)
    3768:	f005 fa9c 	bl	8ca4 <bt_enable>
    376c:	4604      	mov	r4, r0
	while (initialized == false){
    376e:	782b      	ldrb	r3, [r5, #0]
    3770:	b133      	cbz	r3, 3780 <bm_blemesh_enable+0x24>
		k_sleep(K_MSEC(10));
	}
	if (err)
    3772:	b15c      	cbz	r4, 378c <bm_blemesh_enable+0x30>
	{
		printk("Bluetooth init failed (err %d)\n", err);
    3774:	4621      	mov	r1, r4
    3776:	480c      	ldr	r0, [pc, #48]	; (37a8 <bm_blemesh_enable+0x4c>)

	//bt_mesh_lpn_set(true); // Enable Low Power Node

	//bm_led0_set(true); // Signal that the Configuring was sucessfull
	/* ===================================*/	
}
    3778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    377c:	f020 bd5e 	b.w	2423c <printk>
	return z_impl_k_sleep(timeout);
    3780:	2100      	movs	r1, #0
    3782:	f44f 70a4 	mov.w	r0, #328	; 0x148
    3786:	f01e fb2f 	bl	21de8 <z_impl_k_sleep>
    378a:	e7f0      	b.n	376e <bm_blemesh_enable+0x12>
	printk("Bluetooth initialized\n");
    378c:	4807      	ldr	r0, [pc, #28]	; (37ac <bm_blemesh_enable+0x50>)
    378e:	f020 fd55 	bl	2423c <printk>
	printk("Configuring done\n");
    3792:	4807      	ldr	r0, [pc, #28]	; (37b0 <bm_blemesh_enable+0x54>)
}
    3794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk("Configuring done\n");
    3798:	f020 bd50 	b.w	2423c <printk>
    379c:	0002b8f8 	.word	0x0002b8f8
    37a0:	20003542 	.word	0x20003542
    37a4:	000036a1 	.word	0x000036a1
    37a8:	0002b90f 	.word	0x0002b90f
    37ac:	0002b92f 	.word	0x0002b92f
    37b0:	0002b946 	.word	0x0002b946

000037b4 <attention_off>:
	printk("attention_off()\n");
    37b4:	4801      	ldr	r0, [pc, #4]	; (37bc <attention_off+0x8>)
    37b6:	f020 bd41 	b.w	2423c <printk>
    37ba:	bf00      	nop
    37bc:	0002ba91 	.word	0x0002ba91

000037c0 <attention_on>:
	printk("attention_on()\n");
    37c0:	4801      	ldr	r0, [pc, #4]	; (37c8 <attention_on+0x8>)
    37c2:	f020 bd3b 	b.w	2423c <printk>
    37c6:	bf00      	nop
    37c8:	0002baa2 	.word	0x0002baa2

000037cc <temp_hum_get>:

static void temp_hum_get(){
    37cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Measure temperature and relative humidity and store into variables
         * temperature, humidity (each output multiplied by 1000).
         */
	rc = sht3x_measure_blocking_read(&temperature, &humidity);
    37ce:	4c15      	ldr	r4, [pc, #84]	; (3824 <temp_hum_get+0x58>)
    37d0:	4d15      	ldr	r5, [pc, #84]	; (3828 <temp_hum_get+0x5c>)
    37d2:	4621      	mov	r1, r4
    37d4:	4628      	mov	r0, r5
    37d6:	f020 fc85 	bl	240e4 <sht3x_measure_blocking_read>
    37da:	4b14      	ldr	r3, [pc, #80]	; (382c <temp_hum_get+0x60>)
    37dc:	6018      	str	r0, [r3, #0]
	if (rc == STATUS_OK)
    37de:	b9d0      	cbnz	r0, 3816 <temp_hum_get+0x4a>
	{
		printf("measured temperature: %0.2f degreeCelsius, "
			   "measured humidity: %0.2f percentRH\n",
			   temperature / 1000.0f, humidity / 1000.0f);
    37e0:	6828      	ldr	r0, [r5, #0]
    37e2:	f7fe f93d 	bl	1a60 <__aeabi_i2f>
    37e6:	4912      	ldr	r1, [pc, #72]	; (3830 <temp_hum_get+0x64>)
    37e8:	f7fe fa42 	bl	1c70 <__aeabi_fdiv>
		printf("measured temperature: %0.2f degreeCelsius, "
    37ec:	f7fd fdec 	bl	13c8 <__aeabi_f2d>
    37f0:	4606      	mov	r6, r0
			   temperature / 1000.0f, humidity / 1000.0f);
    37f2:	6820      	ldr	r0, [r4, #0]
		printf("measured temperature: %0.2f degreeCelsius, "
    37f4:	460f      	mov	r7, r1
			   temperature / 1000.0f, humidity / 1000.0f);
    37f6:	f7fe f933 	bl	1a60 <__aeabi_i2f>
    37fa:	490d      	ldr	r1, [pc, #52]	; (3830 <temp_hum_get+0x64>)
    37fc:	f7fe fa38 	bl	1c70 <__aeabi_fdiv>
		printf("measured temperature: %0.2f degreeCelsius, "
    3800:	f7fd fde2 	bl	13c8 <__aeabi_f2d>
    3804:	4632      	mov	r2, r6
    3806:	e9cd 0100 	strd	r0, r1, [sp]
    380a:	463b      	mov	r3, r7
    380c:	4809      	ldr	r0, [pc, #36]	; (3834 <temp_hum_get+0x68>)
    380e:	f003 fae5 	bl	6ddc <printf>
	}
	else
	{
		printf("error reading measurement\n");
	}
}
    3812:	b003      	add	sp, #12
    3814:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("error reading measurement\n");
    3816:	4808      	ldr	r0, [pc, #32]	; (3838 <temp_hum_get+0x6c>)
}
    3818:	b003      	add	sp, #12
    381a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printf("error reading measurement\n");
    381e:	f003 badd 	b.w	6ddc <printf>
    3822:	bf00      	nop
    3824:	20001a40 	.word	0x20001a40
    3828:	20001a48 	.word	0x20001a48
    382c:	20001a44 	.word	0x20001a44
    3830:	447a0000 	.word	0x447a0000
    3834:	0002bab2 	.word	0x0002bab2
    3838:	0002bb01 	.word	0x0002bb01

0000383c <hum_get>:
	return rc;
}

static int hum_get(struct bt_mesh_sensor *sensor,
					struct bt_mesh_msg_ctx *ctx, struct sensor_value *rsp)
{
    383c:	b510      	push	{r4, lr}
    383e:	4614      	mov	r4, r2
	temp_hum_get();
    3840:	f7ff ffc4 	bl	37cc <temp_hum_get>
	doubleToSensorValue((double)humidity / 1000,rsp);
    3844:	4b06      	ldr	r3, [pc, #24]	; (3860 <hum_get+0x24>)
    3846:	6818      	ldr	r0, [r3, #0]
    3848:	f7fd fdac 	bl	13a4 <__aeabi_i2d>
    384c:	4b05      	ldr	r3, [pc, #20]	; (3864 <hum_get+0x28>)
    384e:	2200      	movs	r2, #0
    3850:	f7fd ff3c 	bl	16cc <__aeabi_ddiv>
    3854:	4622      	mov	r2, r4
    3856:	f7fe fc8f 	bl	2178 <doubleToSensorValue>
	return rc;
}
    385a:	4b03      	ldr	r3, [pc, #12]	; (3868 <hum_get+0x2c>)
    385c:	6818      	ldr	r0, [r3, #0]
    385e:	bd10      	pop	{r4, pc}
    3860:	20001a40 	.word	0x20001a40
    3864:	408f4000 	.word	0x408f4000
    3868:	20001a44 	.word	0x20001a44

0000386c <temp_get>:
{
    386c:	b510      	push	{r4, lr}
    386e:	4614      	mov	r4, r2
	temp_hum_get();
    3870:	f7ff ffac 	bl	37cc <temp_hum_get>
	doubleToSensorValue((double)temperature / 1000,rsp);
    3874:	4b06      	ldr	r3, [pc, #24]	; (3890 <temp_get+0x24>)
    3876:	6818      	ldr	r0, [r3, #0]
    3878:	f7fd fd94 	bl	13a4 <__aeabi_i2d>
    387c:	4b05      	ldr	r3, [pc, #20]	; (3894 <temp_get+0x28>)
    387e:	2200      	movs	r2, #0
    3880:	f7fd ff24 	bl	16cc <__aeabi_ddiv>
    3884:	4622      	mov	r2, r4
    3886:	f7fe fc77 	bl	2178 <doubleToSensorValue>
}
    388a:	4b03      	ldr	r3, [pc, #12]	; (3898 <temp_get+0x2c>)
    388c:	6818      	ldr	r0, [r3, #0]
    388e:	bd10      	pop	{r4, pc}
    3890:	20001a48 	.word	0x20001a48
    3894:	408f4000 	.word	0x408f4000
    3898:	20001a44 	.word	0x20001a44

0000389c <bm_blemesh_model_handler_init>:
	.elem = elements,
	.elem_count = ARRAY_SIZE(elements),
};

const struct bt_mesh_comp *bm_blemesh_model_handler_init(void)
{
    389c:	b508      	push	{r3, lr}
	{
		printf("Could not get SHT3XD device\n");
	}
	*/
	/* Initialize the i2c bus for the current platform */
	sensirion_i2c_init();
    389e:	f020 fb66 	bl	23f6e <sensirion_i2c_init>
	sensirion_i2c_select_bus(0);
    38a2:	2000      	movs	r0, #0
    38a4:	f000 f8e2 	bl	3a6c <sensirion_i2c_select_bus>

	return &comp;
}
    38a8:	4800      	ldr	r0, [pc, #0]	; (38ac <bm_blemesh_model_handler_init+0x10>)
    38aa:	bd08      	pop	{r3, pc}
    38ac:	0002ac48 	.word	0x0002ac48

000038b0 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
    38b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    38b4:	f412 6540 	ands.w	r5, r2, #3072	; 0xc00
{
    38b8:	4606      	mov	r6, r0
    38ba:	4688      	mov	r8, r1
    38bc:	4614      	mov	r4, r2
	const struct gpio_driver_config *const cfg =
    38be:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct gpio_driver_data *data =
    38c2:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
    38c4:	d00c      	beq.n	38e0 <gpio_pin_configure+0x30>
    38c6:	0593      	lsls	r3, r2, #22
    38c8:	d40a      	bmi.n	38e0 <gpio_pin_configure+0x30>
    38ca:	4919      	ldr	r1, [pc, #100]	; (3930 <gpio_pin_configure+0x80>)
    38cc:	4819      	ldr	r0, [pc, #100]	; (3934 <gpio_pin_configure+0x84>)
    38ce:	f240 2236 	movw	r2, #566	; 0x236
    38d2:	f020 fcb3 	bl	2423c <printk>
    38d6:	f240 2136 	movw	r1, #566	; 0x236
    38da:	4815      	ldr	r0, [pc, #84]	; (3930 <gpio_pin_configure+0x80>)
    38dc:	f020 ff60 	bl	247a0 <assert_post_action>

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    38e0:	04e0      	lsls	r0, r4, #19
    38e2:	d504      	bpl.n	38ee <gpio_pin_configure+0x3e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    38e4:	b11d      	cbz	r5, 38ee <gpio_pin_configure+0x3e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    38e6:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    38e8:	bf48      	it	mi
    38ea:	f484 54e0 	eormi.w	r4, r4, #7168	; 0x1c00
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
    38ee:	2301      	movs	r3, #1
    38f0:	fa03 f508 	lsl.w	r5, r3, r8
    38f4:	f8d9 3000 	ldr.w	r3, [r9]
    38f8:	421d      	tst	r5, r3
    38fa:	d10a      	bne.n	3912 <gpio_pin_configure+0x62>
    38fc:	490c      	ldr	r1, [pc, #48]	; (3930 <gpio_pin_configure+0x80>)
    38fe:	480d      	ldr	r0, [pc, #52]	; (3934 <gpio_pin_configure+0x84>)
    3900:	f240 2245 	movw	r2, #581	; 0x245
    3904:	f020 fc9a 	bl	2423c <printk>
    3908:	f240 2145 	movw	r1, #581	; 0x245
    390c:	4808      	ldr	r0, [pc, #32]	; (3930 <gpio_pin_configure+0x80>)
    390e:	f020 ff47 	bl	247a0 <assert_post_action>
	return api->pin_configure(port, pin, flags);
    3912:	68b3      	ldr	r3, [r6, #8]
    3914:	4622      	mov	r2, r4
    3916:	681b      	ldr	r3, [r3, #0]
    3918:	4641      	mov	r1, r8
    391a:	4630      	mov	r0, r6
    391c:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    391e:	b928      	cbnz	r0, 392c <gpio_pin_configure+0x7c>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3920:	683b      	ldr	r3, [r7, #0]
    3922:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3924:	bf4c      	ite	mi
    3926:	432b      	orrmi	r3, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3928:	43ab      	bicpl	r3, r5
    392a:	603b      	str	r3, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
    392c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3930:	0002bcc3 	.word	0x0002bcc3
    3934:	0002bced 	.word	0x0002bced

00003938 <bm_init_leds>:
  k_delayed_work_init(&buttons_debounce, buttons_debounce_fn);
}


/* Init the Leds */
void bm_init_leds() {
    3938:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    393a:	482a      	ldr	r0, [pc, #168]	; (39e4 <bm_init_leds+0xac>)
    393c:	f01c fc4c 	bl	201d8 <z_impl_device_get_binding>
  dev_led0 = device_get_binding(LED0);
    3940:	4a29      	ldr	r2, [pc, #164]	; (39e8 <bm_init_leds+0xb0>)
    3942:	6010      	str	r0, [r2, #0]
  if (dev_led0 == NULL) {
    3944:	b920      	cbnz	r0, 3950 <bm_init_leds+0x18>
    printk("Error no LED0 found");
    3946:	4829      	ldr	r0, [pc, #164]	; (39ec <bm_init_leds+0xb4>)
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
  if (ret < 0) {
    printk("Error in configuration of led3 pin (err %d)", ret);
    return;
  }
}
    3948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error no LED1 found");
    394c:	f020 bc76 	b.w	2423c <printk>
  ret = gpio_pin_configure(dev_led0, PIN_LED0, GPIO_OUTPUT_INACTIVE | FLAGS_LED0);
    3950:	2106      	movs	r1, #6
    3952:	f241 6201 	movw	r2, #5633	; 0x1601
    3956:	f7ff ffab 	bl	38b0 <gpio_pin_configure>
    395a:	4c25      	ldr	r4, [pc, #148]	; (39f0 <bm_init_leds+0xb8>)
  if (ret < 0) {
    395c:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led0, PIN_LED0, GPIO_OUTPUT_INACTIVE | FLAGS_LED0);
    395e:	4601      	mov	r1, r0
    3960:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    3962:	da04      	bge.n	396e <bm_init_leds+0x36>
    printk("Error in configuration of led0 pin (err %d)", ret);
    3964:	4823      	ldr	r0, [pc, #140]	; (39f4 <bm_init_leds+0xbc>)
}
    3966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printk("Error in configuration of led3 pin (err %d)", ret);
    396a:	f020 bc67 	b.w	2423c <printk>
    396e:	481d      	ldr	r0, [pc, #116]	; (39e4 <bm_init_leds+0xac>)
    3970:	f01c fc32 	bl	201d8 <z_impl_device_get_binding>
  dev_led1 = device_get_binding(LED1);
    3974:	4a20      	ldr	r2, [pc, #128]	; (39f8 <bm_init_leds+0xc0>)
    3976:	6010      	str	r0, [r2, #0]
  if (dev_led1 == NULL) {
    3978:	b908      	cbnz	r0, 397e <bm_init_leds+0x46>
    printk("Error no LED1 found");
    397a:	4820      	ldr	r0, [pc, #128]	; (39fc <bm_init_leds+0xc4>)
    397c:	e7e4      	b.n	3948 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led1, PIN_LED1, GPIO_OUTPUT_INACTIVE | FLAGS_LED1);
    397e:	2108      	movs	r1, #8
    3980:	f241 6201 	movw	r2, #5633	; 0x1601
    3984:	f7ff ff94 	bl	38b0 <gpio_pin_configure>
  if (ret < 0) {
    3988:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led1, PIN_LED1, GPIO_OUTPUT_INACTIVE | FLAGS_LED1);
    398a:	4601      	mov	r1, r0
    398c:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    398e:	da01      	bge.n	3994 <bm_init_leds+0x5c>
    printk("Error in configuration of led1 pin (err %d)", ret);
    3990:	481b      	ldr	r0, [pc, #108]	; (3a00 <bm_init_leds+0xc8>)
    3992:	e7e8      	b.n	3966 <bm_init_leds+0x2e>
    3994:	481b      	ldr	r0, [pc, #108]	; (3a04 <bm_init_leds+0xcc>)
    3996:	f01c fc1f 	bl	201d8 <z_impl_device_get_binding>
  dev_led2 = device_get_binding(LED2);
    399a:	4a1b      	ldr	r2, [pc, #108]	; (3a08 <bm_init_leds+0xd0>)
    399c:	6010      	str	r0, [r2, #0]
  if (dev_led2 == NULL) {
    399e:	b908      	cbnz	r0, 39a4 <bm_init_leds+0x6c>
    printk("Error no LED2 found");
    39a0:	481a      	ldr	r0, [pc, #104]	; (3a0c <bm_init_leds+0xd4>)
    39a2:	e7d1      	b.n	3948 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led2, PIN_LED2, GPIO_OUTPUT_INACTIVE | FLAGS_LED2);
    39a4:	2109      	movs	r1, #9
    39a6:	f241 6201 	movw	r2, #5633	; 0x1601
    39aa:	f7ff ff81 	bl	38b0 <gpio_pin_configure>
  if (ret < 0) {
    39ae:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led2, PIN_LED2, GPIO_OUTPUT_INACTIVE | FLAGS_LED2);
    39b0:	4601      	mov	r1, r0
    39b2:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    39b4:	da01      	bge.n	39ba <bm_init_leds+0x82>
    printk("Error in configuration of led2 pin (err %d)", ret);
    39b6:	4816      	ldr	r0, [pc, #88]	; (3a10 <bm_init_leds+0xd8>)
    39b8:	e7d5      	b.n	3966 <bm_init_leds+0x2e>
    39ba:	480a      	ldr	r0, [pc, #40]	; (39e4 <bm_init_leds+0xac>)
    39bc:	f01c fc0c 	bl	201d8 <z_impl_device_get_binding>
  dev_led3 = device_get_binding(LED3);
    39c0:	4a14      	ldr	r2, [pc, #80]	; (3a14 <bm_init_leds+0xdc>)
    39c2:	6010      	str	r0, [r2, #0]
  if (dev_led3 == NULL) {
    39c4:	b908      	cbnz	r0, 39ca <bm_init_leds+0x92>
    printk("Error no LED3 found");
    39c6:	4814      	ldr	r0, [pc, #80]	; (3a18 <bm_init_leds+0xe0>)
    39c8:	e7be      	b.n	3948 <bm_init_leds+0x10>
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
    39ca:	210c      	movs	r1, #12
    39cc:	f241 6201 	movw	r2, #5633	; 0x1601
    39d0:	f7ff ff6e 	bl	38b0 <gpio_pin_configure>
  if (ret < 0) {
    39d4:	2800      	cmp	r0, #0
  ret = gpio_pin_configure(dev_led3, PIN_LED3, GPIO_OUTPUT_INACTIVE | FLAGS_LED3);
    39d6:	4601      	mov	r1, r0
    39d8:	6020      	str	r0, [r4, #0]
  if (ret < 0) {
    39da:	da01      	bge.n	39e0 <bm_init_leds+0xa8>
    printk("Error in configuration of led3 pin (err %d)", ret);
    39dc:	480f      	ldr	r0, [pc, #60]	; (3a1c <bm_init_leds+0xe4>)
    39de:	e7c2      	b.n	3966 <bm_init_leds+0x2e>
}
    39e0:	bd10      	pop	{r4, pc}
    39e2:	bf00      	nop
    39e4:	0002bbbc 	.word	0x0002bbbc
    39e8:	20001a4c 	.word	0x20001a4c
    39ec:	0002bbc3 	.word	0x0002bbc3
    39f0:	20001a5c 	.word	0x20001a5c
    39f4:	0002bbd7 	.word	0x0002bbd7
    39f8:	20001a50 	.word	0x20001a50
    39fc:	0002bc03 	.word	0x0002bc03
    3a00:	0002bc17 	.word	0x0002bc17
    3a04:	0002bb1c 	.word	0x0002bb1c
    3a08:	20001a54 	.word	0x20001a54
    3a0c:	0002bc43 	.word	0x0002bc43
    3a10:	0002bc57 	.word	0x0002bc57
    3a14:	20001a58 	.word	0x20001a58
    3a18:	0002bc83 	.word	0x0002bc83
    3a1c:	0002bc97 	.word	0x0002bc97

00003a20 <main>:
#include "bm_simple_buttons_and_leds.h"
#include <zephyr.h>

/**@brief Function for application main entry.
 */
void main(void) {
    3a20:	b508      	push	{r3, lr}
  // Start Application
  printk("Starting Application...\n");
    3a22:	480d      	ldr	r0, [pc, #52]	; (3a58 <main+0x38>)
    3a24:	f020 fc0a 	bl	2423c <printk>
  // Init MAC Address
  uint32_t LSB_MAC_Address = NRF_FICR->DEVICEADDR[0];
    3a28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  printk("Preprogrammed Randomly Static MAC-Address (LSB): 0x%x, %u \n", LSB_MAC_Address, LSB_MAC_Address);
    3a2c:	480b      	ldr	r0, [pc, #44]	; (3a5c <main+0x3c>)
  uint32_t LSB_MAC_Address = NRF_FICR->DEVICEADDR[0];
    3a2e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  printk("Preprogrammed Randomly Static MAC-Address (LSB): 0x%x, %u \n", LSB_MAC_Address, LSB_MAC_Address);
    3a32:	4611      	mov	r1, r2
    3a34:	f020 fc02 	bl	2423c <printk>
  /* --------------- Init Board ------------*/
	printk("Init Buttons and LEDs...\n");
    3a38:	4809      	ldr	r0, [pc, #36]	; (3a60 <main+0x40>)
    3a3a:	f020 fbff 	bl	2423c <printk>
	bm_init_leds();
    3a3e:	f7ff ff7b 	bl	3938 <bm_init_leds>
	printk("Buttons and LEDs initialized\n");
    3a42:	4808      	ldr	r0, [pc, #32]	; (3a64 <main+0x44>)
    3a44:	f020 fbfa 	bl	2423c <printk>
  printk("Init SHT3xd Sensor\n");
    3a48:	4807      	ldr	r0, [pc, #28]	; (3a68 <main+0x48>)
    3a4a:	f020 fbf7 	bl	2423c <printk>

	/* ===================================*/

  // Start Mesh Operation
  bm_blemesh_enable(); // Will return faster than the Stack is realy ready... keep on waiting in the transition.
    3a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  bm_blemesh_enable(); // Will return faster than the Stack is realy ready... keep on waiting in the transition.
    3a52:	f7ff be83 	b.w	375c <bm_blemesh_enable>
    3a56:	bf00      	nop
    3a58:	0002bd05 	.word	0x0002bd05
    3a5c:	0002bd1e 	.word	0x0002bd1e
    3a60:	0002bd5a 	.word	0x0002bd5a
    3a64:	0002bd74 	.word	0x0002bd74
    3a68:	0002bd92 	.word	0x0002bd92

00003a6c <sensirion_i2c_select_bus>:
 * All following i2c operations will be directed at that bus.
 *
 * @param bus_idx   Bus index to select
 * @returns         0 on success, an error code otherwise
 */
int16_t sensirion_i2c_select_bus(uint8_t bus_idx) {
    3a6c:	b507      	push	{r0, r1, r2, lr}
    char bus_name[6] = "I2C_0";
    3a6e:	4a0d      	ldr	r2, [pc, #52]	; (3aa4 <sensirion_i2c_select_bus+0x38>)
int16_t sensirion_i2c_select_bus(uint8_t bus_idx) {
    3a70:	4603      	mov	r3, r0

    if (bus_idx > 9) {
    3a72:	2b09      	cmp	r3, #9
    char bus_name[6] = "I2C_0";
    3a74:	6810      	ldr	r0, [r2, #0]
    3a76:	8892      	ldrh	r2, [r2, #4]
    3a78:	9000      	str	r0, [sp, #0]
    3a7a:	f8ad 2004 	strh.w	r2, [sp, #4]
    if (bus_idx > 9) {
    3a7e:	d80e      	bhi.n	3a9e <sensirion_i2c_select_bus+0x32>
        /* Invalid bus index */
        return STATUS_FAIL;
    }

    bus_name[4] = bus_idx + '0';
    3a80:	3330      	adds	r3, #48	; 0x30
    3a82:	f88d 3004 	strb.w	r3, [sp, #4]
    3a86:	4668      	mov	r0, sp
    3a88:	f01c fba6 	bl	201d8 <z_impl_device_get_binding>
    i2c_dev = device_get_binding(bus_name);
    3a8c:	4b06      	ldr	r3, [pc, #24]	; (3aa8 <sensirion_i2c_select_bus+0x3c>)
    3a8e:	6018      	str	r0, [r3, #0]
    if (i2c_dev == NULL) {
    3a90:	fab0 f080 	clz	r0, r0
    3a94:	0940      	lsrs	r0, r0, #5
    3a96:	4240      	negs	r0, r0
        /* No valid device found */
        return STATUS_FAIL;
    }

    return STATUS_OK;
}
    3a98:	b003      	add	sp, #12
    3a9a:	f85d fb04 	ldr.w	pc, [sp], #4
        return STATUS_FAIL;
    3a9e:	f04f 30ff 	mov.w	r0, #4294967295
    3aa2:	e7f9      	b.n	3a98 <sensirion_i2c_select_bus+0x2c>
    3aa4:	0002bda6 	.word	0x0002bda6
    3aa8:	20001a60 	.word	0x20001a60

00003aac <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
    3aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3aae:	4603      	mov	r3, r0
    return i2c_read(i2c_dev, data, count, address);
    3ab0:	4807      	ldr	r0, [pc, #28]	; (3ad0 <sensirion_i2c_read+0x24>)
    3ab2:	e9cd 1201 	strd	r1, r2, [sp, #4]
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    3ab6:	2203      	movs	r2, #3
    3ab8:	6800      	ldr	r0, [r0, #0]
    3aba:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    3abe:	6882      	ldr	r2, [r0, #8]
    3ac0:	a901      	add	r1, sp, #4
    3ac2:	6854      	ldr	r4, [r2, #4]
    3ac4:	2201      	movs	r2, #1
    3ac6:	47a0      	blx	r4
}
    3ac8:	b240      	sxtb	r0, r0
    3aca:	b004      	add	sp, #16
    3acc:	bd10      	pop	{r4, pc}
    3ace:	bf00      	nop
    3ad0:	20001a60 	.word	0x20001a60

00003ad4 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
    3ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3ad6:	4603      	mov	r3, r0
    return i2c_write(i2c_dev, data, count, address);
    3ad8:	4807      	ldr	r0, [pc, #28]	; (3af8 <sensirion_i2c_write+0x24>)
    3ada:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    3ade:	2202      	movs	r2, #2
    3ae0:	6800      	ldr	r0, [r0, #0]
    3ae2:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    3ae6:	6882      	ldr	r2, [r0, #8]
    3ae8:	a901      	add	r1, sp, #4
    3aea:	6854      	ldr	r4, [r2, #4]
    3aec:	2201      	movs	r2, #1
    3aee:	47a0      	blx	r4
}
    3af0:	b240      	sxtb	r0, r0
    3af2:	b004      	add	sp, #16
    3af4:	bd10      	pop	{r4, pc}
    3af6:	bf00      	nop
    3af8:	20001a60 	.word	0x20001a60

00003afc <sht3x_measure>:
    }
    return ret;
}

int16_t sht3x_measure(void) {
    return sensirion_i2c_write_cmd(SHT3X_ADDRESS, sht3x_cmd_measure);
    3afc:	4b02      	ldr	r3, [pc, #8]	; (3b08 <sht3x_measure+0xc>)
    3afe:	2044      	movs	r0, #68	; 0x44
    3b00:	8819      	ldrh	r1, [r3, #0]
    3b02:	f020 bac6 	b.w	24092 <sensirion_i2c_write_cmd>
    3b06:	bf00      	nop
    3b08:	20000b7c 	.word	0x20000b7c

00003b0c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    3b0c:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3b0e:	4c09      	ldr	r4, [pc, #36]	; (3b34 <crc8_ccitt+0x28>)
    3b10:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    3b12:	4291      	cmp	r1, r2
    3b14:	d100      	bne.n	3b18 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    3b16:	bd10      	pop	{r4, pc}
		val ^= p[i];
    3b18:	f811 3b01 	ldrb.w	r3, [r1], #1
    3b1c:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3b1e:	0918      	lsrs	r0, r3, #4
    3b20:	5c20      	ldrb	r0, [r4, r0]
    3b22:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    3b26:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3b28:	0918      	lsrs	r0, r3, #4
    3b2a:	5c20      	ldrb	r0, [r4, r0]
    3b2c:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
    3b30:	b2c0      	uxtb	r0, r0
    3b32:	e7ee      	b.n	3b12 <crc8_ccitt+0x6>
    3b34:	0002bdac 	.word	0x0002bdac

00003b38 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3b38:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    3b3a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    3b3c:	f003 0303 	and.w	r3, r3, #3
    3b40:	4605      	mov	r5, r0

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    3b42:	2b02      	cmp	r3, #2
{
    3b44:	460e      	mov	r6, r1
	notify->result = res;
    3b46:	60a9      	str	r1, [r5, #8]
	switch (method) {
    3b48:	d010      	beq.n	3b6c <sys_notify_finalize+0x34>
    3b4a:	2b03      	cmp	r3, #3
    3b4c:	d004      	beq.n	3b58 <sys_notify_finalize+0x20>
    3b4e:	2b01      	cmp	r3, #1
    3b50:	d10f      	bne.n	3b72 <sys_notify_finalize+0x3a>
	sys_notify_generic_callback rv = 0;
    3b52:	2400      	movs	r4, #0
	struct k_poll_signal *sig = NULL;
    3b54:	4620      	mov	r0, r4
    3b56:	e001      	b.n	3b5c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3b58:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
    3b5a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3b5c:	2300      	movs	r3, #0
    3b5e:	606b      	str	r3, [r5, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    3b60:	b110      	cbz	r0, 3b68 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    3b62:	4631      	mov	r1, r6
    3b64:	f01f fab2 	bl	230cc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3b68:	4620      	mov	r0, r4
    3b6a:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    3b6c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    3b6e:	2400      	movs	r4, #0
		break;
    3b70:	e7f4      	b.n	3b5c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    3b72:	2245      	movs	r2, #69	; 0x45
    3b74:	4904      	ldr	r1, [pc, #16]	; (3b88 <sys_notify_finalize+0x50>)
    3b76:	4805      	ldr	r0, [pc, #20]	; (3b8c <sys_notify_finalize+0x54>)
    3b78:	f020 fb60 	bl	2423c <printk>
    3b7c:	2145      	movs	r1, #69	; 0x45
    3b7e:	4802      	ldr	r0, [pc, #8]	; (3b88 <sys_notify_finalize+0x50>)
    3b80:	f020 fe0e 	bl	247a0 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    3b84:	2400      	movs	r4, #0
    3b86:	e7e8      	b.n	3b5a <sys_notify_finalize+0x22>
    3b88:	0002bdbc 	.word	0x0002bdbc
    3b8c:	0002bced 	.word	0x0002bced

00003b90 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3b90:	680b      	ldr	r3, [r1, #0]
    3b92:	3301      	adds	r3, #1
    3b94:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3b96:	4b01      	ldr	r3, [pc, #4]	; (3b9c <char_out+0xc>)
    3b98:	681b      	ldr	r3, [r3, #0]
    3b9a:	4718      	bx	r3
    3b9c:	20000508 	.word	0x20000508

00003ba0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    3ba0:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
    3ba2:	2300      	movs	r3, #0
    3ba4:	9301      	str	r3, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    3ba6:	4602      	mov	r2, r0
    3ba8:	460b      	mov	r3, r1
    3baa:	4803      	ldr	r0, [pc, #12]	; (3bb8 <vprintk+0x18>)
    3bac:	a901      	add	r1, sp, #4
    3bae:	f000 fc47 	bl	4440 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    3bb2:	b003      	add	sp, #12
    3bb4:	f85d fb04 	ldr.w	pc, [sp], #4
    3bb8:	00003b91 	.word	0x00003b91

00003bbc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3bbc:	b530      	push	{r4, r5, lr}
    3bbe:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3bc0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3bc4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3bc6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    3bc8:	a901      	add	r1, sp, #4
    3bca:	4805      	ldr	r0, [pc, #20]	; (3be0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    3bcc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    3bce:	f000 fc37 	bl	4440 <cbvprintf>

	if (ctx.count < ctx.max) {
    3bd2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3bd6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3bd8:	bfb8      	it	lt
    3bda:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3bdc:	b005      	add	sp, #20
    3bde:	bd30      	pop	{r4, r5, pc}
    3be0:	00024217 	.word	0x00024217

00003be4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3be8:	f8b0 801c 	ldrh.w	r8, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3bec:	f018 0f08 	tst.w	r8, #8
{
    3bf0:	4604      	mov	r4, r0
    3bf2:	4693      	mov	fp, r2
	if (processing) {
    3bf4:	d01c      	beq.n	3c30 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    3bf6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3bf8:	bf0c      	ite	eq
    3bfa:	f048 0810 	orreq.w	r8, r8, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3bfe:	f048 0820 	orrne.w	r8, r8, #32
    3c02:	f8a0 801c 	strh.w	r8, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c06:	f104 0014 	add.w	r0, r4, #20
    3c0a:	f01e fb43 	bl	22294 <z_spin_unlock_valid>
    3c0e:	b940      	cbnz	r0, 3c22 <process_event+0x3e>
    3c10:	49b9      	ldr	r1, [pc, #740]	; (3ef8 <process_event+0x314>)
    3c12:	48ba      	ldr	r0, [pc, #744]	; (3efc <process_event+0x318>)
    3c14:	22a7      	movs	r2, #167	; 0xa7
    3c16:	f020 fb11 	bl	2423c <printk>
    3c1a:	21a7      	movs	r1, #167	; 0xa7
    3c1c:	48b6      	ldr	r0, [pc, #728]	; (3ef8 <process_event+0x314>)
    3c1e:	f020 fdbf 	bl	247a0 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3c22:	f38b 8811 	msr	BASEPRI, fp
    3c26:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    3c2a:	b003      	add	sp, #12
    3c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    3c30:	4eb3      	ldr	r6, [pc, #716]	; (3f00 <process_event+0x31c>)
    3c32:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 3efc <process_event+0x318>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c36:	f008 0807 	and.w	r8, r8, #7
		if (evt == EVT_RECHECK) {
    3c3a:	2902      	cmp	r1, #2
    3c3c:	d106      	bne.n	3c4c <process_event+0x68>
			evt = process_recheck(mgr);
    3c3e:	4620      	mov	r0, r4
    3c40:	f020 fb16 	bl	24270 <process_recheck>
		if (evt == EVT_NOP) {
    3c44:	2800      	cmp	r0, #0
    3c46:	d0de      	beq.n	3c06 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    3c48:	2801      	cmp	r0, #1
    3c4a:	d161      	bne.n	3d10 <process_event+0x12c>
			res = mgr->last_res;
    3c4c:	f8d4 a018 	ldr.w	sl, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c50:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    3c52:	f1ba 0f00 	cmp.w	sl, #0
    3c56:	da19      	bge.n	3c8c <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3c58:	2700      	movs	r7, #0
		*clients = mgr->clients;
    3c5a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3c5c:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    3c60:	e9c4 7700 	strd	r7, r7, [r4]
    3c64:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3c68:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3c6a:	8ba3      	ldrh	r3, [r4, #28]
    3c6c:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3c70:	4542      	cmp	r2, r8
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3c72:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    3c74:	d003      	beq.n	3c7e <process_event+0x9a>
		if (do_monitors
    3c76:	68a2      	ldr	r2, [r4, #8]
    3c78:	2a00      	cmp	r2, #0
    3c7a:	f040 80ef 	bne.w	3e5c <process_event+0x278>
		    || !sys_slist_is_empty(&clients)
    3c7e:	b915      	cbnz	r5, 3c86 <process_event+0xa2>
		    || (transit != NULL)) {
    3c80:	2f00      	cmp	r7, #0
    3c82:	f000 8129 	beq.w	3ed8 <process_event+0x2f4>
    3c86:	f04f 0800 	mov.w	r8, #0
    3c8a:	e0e9      	b.n	3e60 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c8c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3c90:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3c92:	2901      	cmp	r1, #1
    3c94:	d81e      	bhi.n	3cd4 <process_event+0xf0>
	list->head = NULL;
    3c96:	2100      	movs	r1, #0
    3c98:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    3c9c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    3c9e:	6825      	ldr	r5, [r4, #0]
    3ca0:	b29b      	uxth	r3, r3
	list->tail = NULL;
    3ca2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3ca6:	d10a      	bne.n	3cbe <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3ca8:	b13d      	cbz	r5, 3cba <process_event+0xd6>
    3caa:	8be2      	ldrh	r2, [r4, #30]
    3cac:	4629      	mov	r1, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3cae:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    3cb0:	3201      	adds	r2, #1
    3cb2:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3cb4:	2900      	cmp	r1, #0
    3cb6:	d1fa      	bne.n	3cae <process_event+0xca>
    3cb8:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3cba:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    3cbe:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    3cc0:	4620      	mov	r0, r4
    3cc2:	f020 fad5 	bl	24270 <process_recheck>
    3cc6:	b118      	cbz	r0, 3cd0 <process_event+0xec>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3cc8:	8ba3      	ldrh	r3, [r4, #28]
    3cca:	f043 0320 	orr.w	r3, r3, #32
    3cce:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    3cd0:	2700      	movs	r7, #0
    3cd2:	e7ca      	b.n	3c6a <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3cd4:	2a04      	cmp	r2, #4
    3cd6:	d10f      	bne.n	3cf8 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3cd8:	f023 0307 	bic.w	r3, r3, #7
    3cdc:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    3cde:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    3ce0:	4620      	mov	r0, r4
    3ce2:	f020 fac5 	bl	24270 <process_recheck>
    3ce6:	2800      	cmp	r0, #0
    3ce8:	f000 80b6 	beq.w	3e58 <process_event+0x274>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3cec:	f042 0220 	orr.w	r2, r2, #32
    3cf0:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    3cf2:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    3cf4:	462f      	mov	r7, r5
    3cf6:	e7b8      	b.n	3c6a <process_event+0x86>
		__ASSERT_NO_MSG(false);
    3cf8:	4631      	mov	r1, r6
    3cfa:	4648      	mov	r0, r9
    3cfc:	f240 1219 	movw	r2, #281	; 0x119
    3d00:	f020 fa9c 	bl	2423c <printk>
    3d04:	f240 1119 	movw	r1, #281	; 0x119
    3d08:	4630      	mov	r0, r6
    3d0a:	f020 fd49 	bl	247a0 <assert_post_action>
    3d0e:	e7f0      	b.n	3cf2 <process_event+0x10e>
		} else if (evt == EVT_START) {
    3d10:	2803      	cmp	r0, #3
    3d12:	d131      	bne.n	3d78 <process_event+0x194>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3d14:	f1b8 0f00 	cmp.w	r8, #0
    3d18:	d00a      	beq.n	3d30 <process_event+0x14c>
    3d1a:	4631      	mov	r1, r6
    3d1c:	4648      	mov	r0, r9
    3d1e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    3d22:	f020 fa8b 	bl	2423c <printk>
    3d26:	f44f 71aa 	mov.w	r1, #340	; 0x154
    3d2a:	4630      	mov	r0, r6
    3d2c:	f020 fd38 	bl	247a0 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3d30:	6823      	ldr	r3, [r4, #0]
    3d32:	b953      	cbnz	r3, 3d4a <process_event+0x166>
    3d34:	4631      	mov	r1, r6
    3d36:	4648      	mov	r0, r9
    3d38:	f240 1255 	movw	r2, #341	; 0x155
    3d3c:	f020 fa7e 	bl	2423c <printk>
    3d40:	f240 1155 	movw	r1, #341	; 0x155
    3d44:	4630      	mov	r0, r6
    3d46:	f020 fd2b 	bl	247a0 <assert_post_action>
			transit = mgr->transitions->start;
    3d4a:	6923      	ldr	r3, [r4, #16]
    3d4c:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    3d4e:	b957      	cbnz	r7, 3d66 <process_event+0x182>
    3d50:	4631      	mov	r1, r6
    3d52:	4648      	mov	r0, r9
    3d54:	f44f 72ac 	mov.w	r2, #344	; 0x158
    3d58:	f020 fa70 	bl	2423c <printk>
    3d5c:	f44f 71ac 	mov.w	r1, #344	; 0x158
    3d60:	4630      	mov	r0, r6
    3d62:	f020 fd1d 	bl	247a0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3d66:	8ba3      	ldrh	r3, [r4, #28]
    3d68:	f023 0307 	bic.w	r3, r3, #7
    3d6c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    3d70:	83a3      	strh	r3, [r4, #28]
    3d72:	2500      	movs	r5, #0
		res = 0;
    3d74:	46aa      	mov	sl, r5
    3d76:	e778      	b.n	3c6a <process_event+0x86>
		} else if (evt == EVT_STOP) {
    3d78:	2804      	cmp	r0, #4
    3d7a:	d12e      	bne.n	3dda <process_event+0x1f6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3d7c:	f1b8 0f02 	cmp.w	r8, #2
    3d80:	d00a      	beq.n	3d98 <process_event+0x1b4>
    3d82:	4631      	mov	r1, r6
    3d84:	4648      	mov	r0, r9
    3d86:	f240 125b 	movw	r2, #347	; 0x15b
    3d8a:	f020 fa57 	bl	2423c <printk>
    3d8e:	f240 115b 	movw	r1, #347	; 0x15b
    3d92:	4630      	mov	r0, r6
    3d94:	f020 fd04 	bl	247a0 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3d98:	8be3      	ldrh	r3, [r4, #30]
    3d9a:	b153      	cbz	r3, 3db2 <process_event+0x1ce>
    3d9c:	4631      	mov	r1, r6
    3d9e:	4648      	mov	r0, r9
    3da0:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    3da4:	f020 fa4a 	bl	2423c <printk>
    3da8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    3dac:	4630      	mov	r0, r6
    3dae:	f020 fcf7 	bl	247a0 <assert_post_action>
			transit = mgr->transitions->stop;
    3db2:	6923      	ldr	r3, [r4, #16]
    3db4:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    3db6:	b957      	cbnz	r7, 3dce <process_event+0x1ea>
    3db8:	4631      	mov	r1, r6
    3dba:	4648      	mov	r0, r9
    3dbc:	f240 125f 	movw	r2, #351	; 0x15f
    3dc0:	f020 fa3c 	bl	2423c <printk>
    3dc4:	f240 115f 	movw	r1, #351	; 0x15f
    3dc8:	4630      	mov	r0, r6
    3dca:	f020 fce9 	bl	247a0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3dce:	8ba3      	ldrh	r3, [r4, #28]
    3dd0:	f023 0307 	bic.w	r3, r3, #7
    3dd4:	f043 0304 	orr.w	r3, r3, #4
    3dd8:	e7ca      	b.n	3d70 <process_event+0x18c>
		} else if (evt == EVT_RESET) {
    3dda:	2805      	cmp	r0, #5
    3ddc:	d12e      	bne.n	3e3c <process_event+0x258>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3dde:	f1b8 0f01 	cmp.w	r8, #1
    3de2:	d00a      	beq.n	3dfa <process_event+0x216>
    3de4:	4631      	mov	r1, r6
    3de6:	4648      	mov	r0, r9
    3de8:	f44f 72b1 	mov.w	r2, #354	; 0x162
    3dec:	f020 fa26 	bl	2423c <printk>
    3df0:	f44f 71b1 	mov.w	r1, #354	; 0x162
    3df4:	4630      	mov	r0, r6
    3df6:	f020 fcd3 	bl	247a0 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3dfa:	6823      	ldr	r3, [r4, #0]
    3dfc:	b953      	cbnz	r3, 3e14 <process_event+0x230>
    3dfe:	4631      	mov	r1, r6
    3e00:	4648      	mov	r0, r9
    3e02:	f240 1263 	movw	r2, #355	; 0x163
    3e06:	f020 fa19 	bl	2423c <printk>
    3e0a:	f240 1163 	movw	r1, #355	; 0x163
    3e0e:	4630      	mov	r0, r6
    3e10:	f020 fcc6 	bl	247a0 <assert_post_action>
			transit = mgr->transitions->reset;
    3e14:	6923      	ldr	r3, [r4, #16]
    3e16:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    3e18:	b957      	cbnz	r7, 3e30 <process_event+0x24c>
    3e1a:	4631      	mov	r1, r6
    3e1c:	4648      	mov	r0, r9
    3e1e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    3e22:	f020 fa0b 	bl	2423c <printk>
    3e26:	f44f 71b3 	mov.w	r1, #358	; 0x166
    3e2a:	4630      	mov	r0, r6
    3e2c:	f020 fcb8 	bl	247a0 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3e30:	8ba3      	ldrh	r3, [r4, #28]
    3e32:	f023 0307 	bic.w	r3, r3, #7
    3e36:	f043 0305 	orr.w	r3, r3, #5
    3e3a:	e799      	b.n	3d70 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
    3e3c:	f240 1269 	movw	r2, #361	; 0x169
    3e40:	4631      	mov	r1, r6
    3e42:	4648      	mov	r0, r9
    3e44:	f020 f9fa 	bl	2423c <printk>
    3e48:	2500      	movs	r5, #0
    3e4a:	f240 1169 	movw	r1, #361	; 0x169
    3e4e:	4630      	mov	r0, r6
    3e50:	f020 fca6 	bl	247a0 <assert_post_action>
		onoff_transition_fn transit = NULL;
    3e54:	462f      	mov	r7, r5
    3e56:	e78d      	b.n	3d74 <process_event+0x190>
		if (process_recheck(mgr) != EVT_NOP) {
    3e58:	4605      	mov	r5, r0
    3e5a:	e74b      	b.n	3cf4 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    3e5c:	f04f 0801 	mov.w	r8, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3e60:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3e64:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    3e66:	f104 0314 	add.w	r3, r4, #20
    3e6a:	4618      	mov	r0, r3
    3e6c:	9301      	str	r3, [sp, #4]
    3e6e:	f01e fa11 	bl	22294 <z_spin_unlock_valid>
    3e72:	b940      	cbnz	r0, 3e86 <process_event+0x2a2>
    3e74:	4920      	ldr	r1, [pc, #128]	; (3ef8 <process_event+0x314>)
    3e76:	4648      	mov	r0, r9
    3e78:	22a7      	movs	r2, #167	; 0xa7
    3e7a:	f020 f9df 	bl	2423c <printk>
    3e7e:	21a7      	movs	r1, #167	; 0xa7
    3e80:	481d      	ldr	r0, [pc, #116]	; (3ef8 <process_event+0x314>)
    3e82:	f020 fc8d 	bl	247a0 <assert_post_action>
    3e86:	f38b 8811 	msr	BASEPRI, fp
    3e8a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3e8e:	f1b8 0f00 	cmp.w	r8, #0
    3e92:	d139      	bne.n	3f08 <process_event+0x324>
	while (!sys_slist_is_empty(list)) {
    3e94:	2d00      	cmp	r5, #0
    3e96:	d149      	bne.n	3f2c <process_event+0x348>
			if (transit != NULL) {
    3e98:	b117      	cbz	r7, 3ea0 <process_event+0x2bc>
				transit(mgr, transition_complete);
    3e9a:	491a      	ldr	r1, [pc, #104]	; (3f04 <process_event+0x320>)
    3e9c:	4620      	mov	r0, r4
    3e9e:	47b8      	blx	r7
	__asm__ volatile(
    3ea0:	f04f 0320 	mov.w	r3, #32
    3ea4:	f3ef 8b11 	mrs	fp, BASEPRI
    3ea8:	f383 8811 	msr	BASEPRI, r3
    3eac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3eb0:	9801      	ldr	r0, [sp, #4]
    3eb2:	f01e f9e1 	bl	22278 <z_spin_lock_valid>
    3eb6:	b940      	cbnz	r0, 3eca <process_event+0x2e6>
    3eb8:	490f      	ldr	r1, [pc, #60]	; (3ef8 <process_event+0x314>)
    3eba:	4648      	mov	r0, r9
    3ebc:	227c      	movs	r2, #124	; 0x7c
    3ebe:	f020 f9bd 	bl	2423c <printk>
    3ec2:	217c      	movs	r1, #124	; 0x7c
    3ec4:	480c      	ldr	r0, [pc, #48]	; (3ef8 <process_event+0x314>)
    3ec6:	f020 fc6b 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
    3eca:	9801      	ldr	r0, [sp, #4]
    3ecc:	f01e f9f2 	bl	222b4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3ed0:	8ba3      	ldrh	r3, [r4, #28]
    3ed2:	f023 0308 	bic.w	r3, r3, #8
    3ed6:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3ed8:	8ba3      	ldrh	r3, [r4, #28]
    3eda:	06da      	lsls	r2, r3, #27
    3edc:	d530      	bpl.n	3f40 <process_event+0x35c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3ede:	f023 0310 	bic.w	r3, r3, #16
    3ee2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    3ee4:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3ee6:	f8b4 801c 	ldrh.w	r8, [r4, #28]
    3eea:	f008 0807 	and.w	r8, r8, #7
	} while (evt != EVT_NOP);
    3eee:	2900      	cmp	r1, #0
    3ef0:	f47f aea3 	bne.w	3c3a <process_event+0x56>
out:
    3ef4:	e687      	b.n	3c06 <process_event+0x22>
    3ef6:	bf00      	nop
    3ef8:	0002be01 	.word	0x0002be01
    3efc:	0002bced 	.word	0x0002bced
    3f00:	0002bddf 	.word	0x0002bddf
    3f04:	00003f51 	.word	0x00003f51
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3f08:	68a1      	ldr	r1, [r4, #8]
    3f0a:	2900      	cmp	r1, #0
    3f0c:	d0c2      	beq.n	3e94 <process_event+0x2b0>
    3f0e:	f8d1 8000 	ldr.w	r8, [r1]
		mon->callback(mgr, mon, state, res);
    3f12:	f8d1 b004 	ldr.w	fp, [r1, #4]
    3f16:	9a00      	ldr	r2, [sp, #0]
    3f18:	4653      	mov	r3, sl
    3f1a:	4620      	mov	r0, r4
    3f1c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3f1e:	f1b8 0f00 	cmp.w	r8, #0
    3f22:	d0b7      	beq.n	3e94 <process_event+0x2b0>
    3f24:	4641      	mov	r1, r8
    3f26:	f8d8 8000 	ldr.w	r8, [r8]
    3f2a:	e7f2      	b.n	3f12 <process_event+0x32e>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3f2c:	f8d5 8000 	ldr.w	r8, [r5]
		notify_one(mgr, cli, state, res);
    3f30:	9a00      	ldr	r2, [sp, #0]
    3f32:	4629      	mov	r1, r5
    3f34:	4653      	mov	r3, sl
    3f36:	4620      	mov	r0, r4
    3f38:	f020 f9b6 	bl	242a8 <notify_one>
	while (!sys_slist_is_empty(list)) {
    3f3c:	4645      	mov	r5, r8
    3f3e:	e7a9      	b.n	3e94 <process_event+0x2b0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3f40:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3f44:	bf1e      	ittt	ne
    3f46:	f023 0320 	bicne.w	r3, r3, #32
    3f4a:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    3f4c:	2102      	movne	r1, #2
    3f4e:	e7ca      	b.n	3ee6 <process_event+0x302>

00003f50 <transition_complete>:
{
    3f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f52:	4604      	mov	r4, r0
    3f54:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    3f56:	f100 0514 	add.w	r5, r0, #20
    3f5a:	f04f 0320 	mov.w	r3, #32
    3f5e:	f3ef 8611 	mrs	r6, BASEPRI
    3f62:	f383 8811 	msr	BASEPRI, r3
    3f66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f6a:	4628      	mov	r0, r5
    3f6c:	f01e f984 	bl	22278 <z_spin_lock_valid>
    3f70:	b940      	cbnz	r0, 3f84 <transition_complete+0x34>
    3f72:	490a      	ldr	r1, [pc, #40]	; (3f9c <transition_complete+0x4c>)
    3f74:	480a      	ldr	r0, [pc, #40]	; (3fa0 <transition_complete+0x50>)
    3f76:	227c      	movs	r2, #124	; 0x7c
    3f78:	f020 f960 	bl	2423c <printk>
    3f7c:	217c      	movs	r1, #124	; 0x7c
    3f7e:	4807      	ldr	r0, [pc, #28]	; (3f9c <transition_complete+0x4c>)
    3f80:	f020 fc0e 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
    3f84:	4628      	mov	r0, r5
    3f86:	f01e f995 	bl	222b4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    3f8a:	61a7      	str	r7, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    3f8c:	4632      	mov	r2, r6
    3f8e:	4620      	mov	r0, r4
    3f90:	2101      	movs	r1, #1
}
    3f92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    3f96:	f7ff be25 	b.w	3be4 <process_event>
    3f9a:	bf00      	nop
    3f9c:	0002be01 	.word	0x0002be01
    3fa0:	0002bced 	.word	0x0002bced

00003fa4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fa8:	4604      	mov	r4, r0
    3faa:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3fac:	f020 f992 	bl	242d4 <validate_args>

	if (rv < 0) {
    3fb0:	1e06      	subs	r6, r0, #0
    3fb2:	db52      	blt.n	405a <onoff_request+0xb6>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    3fb4:	f104 0914 	add.w	r9, r4, #20
    3fb8:	f04f 0320 	mov.w	r3, #32
    3fbc:	f3ef 8a11 	mrs	sl, BASEPRI
    3fc0:	f383 8811 	msr	BASEPRI, r3
    3fc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3fc8:	4648      	mov	r0, r9
    3fca:	f01e f955 	bl	22278 <z_spin_lock_valid>
    3fce:	b940      	cbnz	r0, 3fe2 <onoff_request+0x3e>
    3fd0:	4932      	ldr	r1, [pc, #200]	; (409c <onoff_request+0xf8>)
    3fd2:	4833      	ldr	r0, [pc, #204]	; (40a0 <onoff_request+0xfc>)
    3fd4:	227c      	movs	r2, #124	; 0x7c
    3fd6:	f020 f931 	bl	2423c <printk>
    3fda:	217c      	movs	r1, #124	; 0x7c
    3fdc:	482f      	ldr	r0, [pc, #188]	; (409c <onoff_request+0xf8>)
    3fde:	f020 fbdf 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
    3fe2:	4648      	mov	r0, r9
    3fe4:	f01e f966 	bl	222b4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3fe8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3fea:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3fec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3ff0:	428b      	cmp	r3, r1
    3ff2:	f002 0507 	and.w	r5, r2, #7
    3ff6:	d04a      	beq.n	408e <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3ff8:	2d02      	cmp	r5, #2
    3ffa:	d11c      	bne.n	4036 <onoff_request+0x92>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3ffc:	3301      	adds	r3, #1
    3ffe:	83e3      	strh	r3, [r4, #30]
	rv = state;
    4000:	462e      	mov	r6, r5
		notify = true;
    4002:	2701      	movs	r7, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4004:	4648      	mov	r0, r9
    4006:	f01e f945 	bl	22294 <z_spin_unlock_valid>
    400a:	b940      	cbnz	r0, 401e <onoff_request+0x7a>
    400c:	4923      	ldr	r1, [pc, #140]	; (409c <onoff_request+0xf8>)
    400e:	4824      	ldr	r0, [pc, #144]	; (40a0 <onoff_request+0xfc>)
    4010:	22a7      	movs	r2, #167	; 0xa7
    4012:	f020 f913 	bl	2423c <printk>
    4016:	21a7      	movs	r1, #167	; 0xa7
    4018:	4820      	ldr	r0, [pc, #128]	; (409c <onoff_request+0xf8>)
    401a:	f020 fbc1 	bl	247a0 <assert_post_action>
	__asm__ volatile(
    401e:	f38a 8811 	msr	BASEPRI, sl
    4022:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4026:	b1c7      	cbz	r7, 405a <onoff_request+0xb6>
			notify_one(mgr, cli, state, 0);
    4028:	2300      	movs	r3, #0
    402a:	462a      	mov	r2, r5
    402c:	4641      	mov	r1, r8
    402e:	4620      	mov	r0, r4
    4030:	f020 f93a 	bl	242a8 <notify_one>
    4034:	e011      	b.n	405a <onoff_request+0xb6>
	} else if ((state == ONOFF_STATE_OFF)
    4036:	0793      	lsls	r3, r2, #30
    4038:	d001      	beq.n	403e <onoff_request+0x9a>
		   || (state == ONOFF_STATE_TO_ON)) {
    403a:	2d06      	cmp	r5, #6
    403c:	d110      	bne.n	4060 <onoff_request+0xbc>
	parent->next = child;
    403e:	2300      	movs	r3, #0
    4040:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_APPEND(slist, snode)
    4044:	6863      	ldr	r3, [r4, #4]
    4046:	b9eb      	cbnz	r3, 4084 <onoff_request+0xe0>
	list->head = node;
    4048:	e9c4 8800 	strd	r8, r8, [r4]
	if (start) {
    404c:	462e      	mov	r6, r5
    404e:	bb05      	cbnz	r5, 4092 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    4050:	4652      	mov	r2, sl
    4052:	2102      	movs	r1, #2
    4054:	4620      	mov	r0, r4
    4056:	f7ff fdc5 	bl	3be4 <process_event>
		}
	}

	return rv;
}
    405a:	4630      	mov	r0, r6
    405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    4060:	2d05      	cmp	r5, #5
    4062:	d018      	beq.n	4096 <onoff_request+0xf2>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    4064:	2d01      	cmp	r5, #1
    4066:	d00a      	beq.n	407e <onoff_request+0xda>
    4068:	490e      	ldr	r1, [pc, #56]	; (40a4 <onoff_request+0x100>)
    406a:	480d      	ldr	r0, [pc, #52]	; (40a0 <onoff_request+0xfc>)
    406c:	f240 12c5 	movw	r2, #453	; 0x1c5
    4070:	f020 f8e4 	bl	2423c <printk>
    4074:	f240 11c5 	movw	r1, #453	; 0x1c5
    4078:	480a      	ldr	r0, [pc, #40]	; (40a4 <onoff_request+0x100>)
    407a:	f020 fb91 	bl	247a0 <assert_post_action>
		rv = -EIO;
    407e:	f06f 0604 	mvn.w	r6, #4
    4082:	e006      	b.n	4092 <onoff_request+0xee>
	parent->next = child;
    4084:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    4088:	f8c4 8004 	str.w	r8, [r4, #4]
    408c:	e7de      	b.n	404c <onoff_request+0xa8>
		rv = -EAGAIN;
    408e:	f06f 060a 	mvn.w	r6, #10
    4092:	2700      	movs	r7, #0
    4094:	e7b6      	b.n	4004 <onoff_request+0x60>
		rv = -ENOTSUP;
    4096:	f06f 0622 	mvn.w	r6, #34	; 0x22
    409a:	e7fa      	b.n	4092 <onoff_request+0xee>
    409c:	0002be01 	.word	0x0002be01
    40a0:	0002bced 	.word	0x0002bced
    40a4:	0002bddf 	.word	0x0002bddf

000040a8 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    40a8:	b570      	push	{r4, r5, r6, lr}
    40aa:	4604      	mov	r4, r0
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    40ac:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
    40b0:	f04f 0320 	mov.w	r3, #32
    40b4:	f3ef 8611 	mrs	r6, BASEPRI
    40b8:	f383 8811 	msr	BASEPRI, r3
    40bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40c0:	4628      	mov	r0, r5
    40c2:	f01e f8d9 	bl	22278 <z_spin_lock_valid>
    40c6:	b940      	cbnz	r0, 40da <onoff_release+0x32>
    40c8:	4922      	ldr	r1, [pc, #136]	; (4154 <onoff_release+0xac>)
    40ca:	4823      	ldr	r0, [pc, #140]	; (4158 <onoff_release+0xb0>)
    40cc:	227c      	movs	r2, #124	; 0x7c
    40ce:	f020 f8b5 	bl	2423c <printk>
    40d2:	217c      	movs	r1, #124	; 0x7c
    40d4:	481f      	ldr	r0, [pc, #124]	; (4154 <onoff_release+0xac>)
    40d6:	f020 fb63 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
    40da:	4628      	mov	r0, r5
    40dc:	f01e f8ea 	bl	222b4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    40e0:	8ba3      	ldrh	r3, [r4, #28]
    40e2:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    40e6:	2b02      	cmp	r3, #2
    40e8:	d017      	beq.n	411a <onoff_release+0x72>
		if (state == ONOFF_STATE_ERROR) {
    40ea:	2b01      	cmp	r3, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    40ec:	bf0c      	ite	eq
    40ee:	f06f 0404 	mvneq.w	r4, #4
    40f2:	f06f 0422 	mvnne.w	r4, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    40f6:	4628      	mov	r0, r5
    40f8:	f01e f8cc 	bl	22294 <z_spin_unlock_valid>
    40fc:	b940      	cbnz	r0, 4110 <onoff_release+0x68>
    40fe:	4915      	ldr	r1, [pc, #84]	; (4154 <onoff_release+0xac>)
    4100:	4815      	ldr	r0, [pc, #84]	; (4158 <onoff_release+0xb0>)
    4102:	22a7      	movs	r2, #167	; 0xa7
    4104:	f020 f89a 	bl	2423c <printk>
    4108:	21a7      	movs	r1, #167	; 0xa7
    410a:	4812      	ldr	r0, [pc, #72]	; (4154 <onoff_release+0xac>)
    410c:	f020 fb48 	bl	247a0 <assert_post_action>
	__asm__ volatile(
    4110:	f386 8811 	msr	BASEPRI, r6
    4114:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    4118:	e017      	b.n	414a <onoff_release+0xa2>
	__ASSERT_NO_MSG(mgr->refs > 0);
    411a:	8be3      	ldrh	r3, [r4, #30]
    411c:	b953      	cbnz	r3, 4134 <onoff_release+0x8c>
    411e:	490f      	ldr	r1, [pc, #60]	; (415c <onoff_release+0xb4>)
    4120:	480d      	ldr	r0, [pc, #52]	; (4158 <onoff_release+0xb0>)
    4122:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
    4126:	f020 f889 	bl	2423c <printk>
    412a:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    412e:	480b      	ldr	r0, [pc, #44]	; (415c <onoff_release+0xb4>)
    4130:	f020 fb36 	bl	247a0 <assert_post_action>
	mgr->refs -= 1U;
    4134:	8be3      	ldrh	r3, [r4, #30]
    4136:	3b01      	subs	r3, #1
    4138:	b29b      	uxth	r3, r3
    413a:	83e3      	strh	r3, [r4, #30]
	if (stop) {
    413c:	b93b      	cbnz	r3, 414e <onoff_release+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    413e:	4620      	mov	r0, r4
    4140:	4632      	mov	r2, r6
    4142:	2102      	movs	r1, #2
    4144:	f7ff fd4e 	bl	3be4 <process_event>
	int rv = state;
    4148:	2402      	movs	r4, #2
}
    414a:	4620      	mov	r0, r4
    414c:	bd70      	pop	{r4, r5, r6, pc}
	int rv = state;
    414e:	2402      	movs	r4, #2
    4150:	e7d1      	b.n	40f6 <onoff_release+0x4e>
    4152:	bf00      	nop
    4154:	0002be01 	.word	0x0002be01
    4158:	0002bced 	.word	0x0002bced
    415c:	0002bddf 	.word	0x0002bddf

00004160 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    4160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    4164:	4d16      	ldr	r5, [pc, #88]	; (41c0 <z_work_q_main+0x60>)
    4166:	f8df 805c 	ldr.w	r8, [pc, #92]	; 41c4 <z_work_q_main+0x64>
{
    416a:	4607      	mov	r7, r0
	return z_impl_k_queue_get(queue, timeout);
    416c:	f04f 32ff 	mov.w	r2, #4294967295
    4170:	f04f 33ff 	mov.w	r3, #4294967295
    4174:	4638      	mov	r0, r7
    4176:	f01c fdfb 	bl	20d70 <z_impl_k_queue_get>
		if (work == NULL) {
    417a:	4604      	mov	r4, r0
    417c:	2800      	cmp	r0, #0
    417e:	d0f5      	beq.n	416c <z_work_q_main+0xc>
		handler = work->handler;
    4180:	6846      	ldr	r6, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    4182:	b946      	cbnz	r6, 4196 <z_work_q_main+0x36>
    4184:	4629      	mov	r1, r5
    4186:	4640      	mov	r0, r8
    4188:	221c      	movs	r2, #28
    418a:	f020 f857 	bl	2423c <printk>
    418e:	211c      	movs	r1, #28
    4190:	4628      	mov	r0, r5
    4192:	f020 fb05 	bl	247a0 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4196:	f3bf 8f5b 	dmb	ish
    419a:	f104 0308 	add.w	r3, r4, #8
    419e:	e853 2f00 	ldrex	r2, [r3]
    41a2:	f022 0101 	bic.w	r1, r2, #1
    41a6:	e843 1000 	strex	r0, r1, [r3]
    41aa:	2800      	cmp	r0, #0
    41ac:	d1f7      	bne.n	419e <z_work_q_main+0x3e>
    41ae:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    41b2:	07d3      	lsls	r3, r2, #31
    41b4:	d501      	bpl.n	41ba <z_work_q_main+0x5a>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    41b6:	4620      	mov	r0, r4
    41b8:	47b0      	blx	r6
	z_impl_k_yield();
    41ba:	f01d fd07 	bl	21bcc <z_impl_k_yield>
    41be:	e7d5      	b.n	416c <z_work_q_main+0xc>
    41c0:	0002be27 	.word	0x0002be27
    41c4:	0002bced 	.word	0x0002bced

000041c8 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    41c8:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    41ca:	2900      	cmp	r1, #0
    41cc:	d037      	beq.n	423e <sys_heap_free+0x76>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    41ce:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    41d0:	68ab      	ldr	r3, [r5, #8]
    41d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    41d6:	bf2c      	ite	cs
    41d8:	2408      	movcs	r4, #8
    41da:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    41dc:	1b0c      	subs	r4, r1, r4
    41de:	1b64      	subs	r4, r4, r5
    41e0:	08e4      	lsrs	r4, r4, #3

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    41e2:	4621      	mov	r1, r4
    41e4:	4628      	mov	r0, r5
    41e6:	f020 f8b7 	bl	24358 <chunk_used>
    41ea:	b940      	cbnz	r0, 41fe <sys_heap_free+0x36>
    41ec:	4914      	ldr	r1, [pc, #80]	; (4240 <sys_heap_free+0x78>)
    41ee:	4815      	ldr	r0, [pc, #84]	; (4244 <sys_heap_free+0x7c>)
    41f0:	229b      	movs	r2, #155	; 0x9b
    41f2:	f020 f823 	bl	2423c <printk>
    41f6:	219b      	movs	r1, #155	; 0x9b
    41f8:	4811      	ldr	r0, [pc, #68]	; (4240 <sys_heap_free+0x78>)
    41fa:	f020 fad1 	bl	247a0 <assert_post_action>
	return c + chunk_size(h, c);
    41fe:	4621      	mov	r1, r4
    4200:	4628      	mov	r0, r5
    4202:	f020 f8b0 	bl	24366 <chunk_size>
    4206:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    4208:	2200      	movs	r2, #0
    420a:	4631      	mov	r1, r6
    420c:	4628      	mov	r0, r5
    420e:	f020 f88d 	bl	2432c <chunk_field>
    4212:	1a30      	subs	r0, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    4214:	4284      	cmp	r4, r0
    4216:	d008      	beq.n	422a <sys_heap_free+0x62>
    4218:	4909      	ldr	r1, [pc, #36]	; (4240 <sys_heap_free+0x78>)
    421a:	480a      	ldr	r0, [pc, #40]	; (4244 <sys_heap_free+0x7c>)
    421c:	22a4      	movs	r2, #164	; 0xa4
    421e:	f020 f80d 	bl	2423c <printk>
    4222:	21a4      	movs	r1, #164	; 0xa4
    4224:	4806      	ldr	r0, [pc, #24]	; (4240 <sys_heap_free+0x78>)
    4226:	f020 fabb 	bl	247a0 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    422a:	4621      	mov	r1, r4
    422c:	4628      	mov	r0, r5
    422e:	2200      	movs	r2, #0
    4230:	f020 f89f 	bl	24372 <set_chunk_used>
	free_chunk(h, c);
    4234:	4621      	mov	r1, r4
}
    4236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    423a:	f020 b9dd 	b.w	245f8 <free_chunk>
}
    423e:	bd70      	pop	{r4, r5, r6, pc}
    4240:	0002be4a 	.word	0x0002be4a
    4244:	0002bced 	.word	0x0002bced

00004248 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    4248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    424c:	f101 3aff 	add.w	sl, r1, #4294967295
    4250:	ea1a 0f01 	tst.w	sl, r1
{
    4254:	4606      	mov	r6, r0
    4256:	4689      	mov	r9, r1
    4258:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    425a:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    425c:	d008      	beq.n	4270 <sys_heap_aligned_alloc+0x28>
    425e:	4932      	ldr	r1, [pc, #200]	; (4328 <sys_heap_aligned_alloc+0xe0>)
    4260:	4832      	ldr	r0, [pc, #200]	; (432c <sys_heap_aligned_alloc+0xe4>)
    4262:	22fc      	movs	r2, #252	; 0xfc
    4264:	f01f ffea 	bl	2423c <printk>
    4268:	21fc      	movs	r1, #252	; 0xfc
    426a:	482f      	ldr	r0, [pc, #188]	; (4328 <sys_heap_aligned_alloc+0xe0>)
    426c:	f020 fa98 	bl	247a0 <assert_post_action>
	return big_heap(h) ? 8 : 4;
    4270:	68aa      	ldr	r2, [r5, #8]
    4272:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    4276:	bf2c      	ite	cs
    4278:	2308      	movcs	r3, #8
    427a:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    427c:	4599      	cmp	r9, r3
    427e:	d805      	bhi.n	428c <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    4280:	4621      	mov	r1, r4
    4282:	4630      	mov	r0, r6
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    4284:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sys_heap_alloc(heap, bytes);
    4288:	f020 b9f4 	b.w	24674 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    428c:	b91c      	cbnz	r4, 4296 <sys_heap_aligned_alloc+0x4e>
		return NULL;
    428e:	2700      	movs	r7, #0
}
    4290:	4638      	mov	r0, r7
    4292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    4296:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    429a:	d9f8      	bls.n	428e <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    429c:	eb09 0104 	add.w	r1, r9, r4
    42a0:	1ac9      	subs	r1, r1, r3
    42a2:	4628      	mov	r0, r5
    42a4:	f020 f881 	bl	243aa <bytes_to_chunksz>
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    42a8:	4601      	mov	r1, r0
    42aa:	4628      	mov	r0, r5
    42ac:	f020 f91e 	bl	244ec <alloc_chunk>
	if (c0 == 0) {
    42b0:	4680      	mov	r8, r0
    42b2:	2800      	cmp	r0, #0
    42b4:	d0eb      	beq.n	428e <sys_heap_aligned_alloc+0x46>
    42b6:	68ab      	ldr	r3, [r5, #8]
    42b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    42bc:	bf2c      	ite	cs
    42be:	2608      	movcs	r6, #8
    42c0:	2604      	movcc	r6, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    42c2:	eb06 07c0 	add.w	r7, r6, r0, lsl #3
    42c6:	442f      	add	r7, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    42c8:	4457      	add	r7, sl
    42ca:	f1c9 0900 	rsb	r9, r9, #0
    42ce:	ea07 0709 	and.w	r7, r7, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    42d2:	1bbe      	subs	r6, r7, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    42d4:	443c      	add	r4, r7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    42d6:	1b76      	subs	r6, r6, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    42d8:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    42da:	08f6      	lsrs	r6, r6, #3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    42dc:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    42e0:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    42e2:	42b0      	cmp	r0, r6
	chunkid_t c_end = end - chunk_buf(h);
    42e4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    42e8:	d208      	bcs.n	42fc <sys_heap_aligned_alloc+0xb4>
		split_chunks(h, c0, c);
    42ea:	4601      	mov	r1, r0
    42ec:	4632      	mov	r2, r6
    42ee:	4628      	mov	r0, r5
    42f0:	f020 f88f 	bl	24412 <split_chunks>
		free_list_add(h, c0);
    42f4:	4641      	mov	r1, r8
    42f6:	4628      	mov	r0, r5
    42f8:	f020 f939 	bl	2456e <free_list_add>
	return c + chunk_size(h, c);
    42fc:	4631      	mov	r1, r6
    42fe:	4628      	mov	r0, r5
    4300:	f020 f831 	bl	24366 <chunk_size>
    4304:	4430      	add	r0, r6
	if (right_chunk(h, c) > c_end) {
    4306:	4284      	cmp	r4, r0
    4308:	d208      	bcs.n	431c <sys_heap_aligned_alloc+0xd4>
		split_chunks(h, c, c_end);
    430a:	4631      	mov	r1, r6
    430c:	4628      	mov	r0, r5
    430e:	4622      	mov	r2, r4
    4310:	f020 f87f 	bl	24412 <split_chunks>
		free_list_add(h, c_end);
    4314:	4621      	mov	r1, r4
    4316:	4628      	mov	r0, r5
    4318:	f020 f929 	bl	2456e <free_list_add>
	set_chunk_used(h, c, true);
    431c:	2201      	movs	r2, #1
    431e:	4631      	mov	r1, r6
    4320:	4628      	mov	r0, r5
    4322:	f020 f826 	bl	24372 <set_chunk_used>
	return mem;
    4326:	e7b3      	b.n	4290 <sys_heap_aligned_alloc+0x48>
    4328:	0002be4a 	.word	0x0002be4a
    432c:	0002bced 	.word	0x0002bced

00004330 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    4330:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4336:	4607      	mov	r7, r0
    4338:	460d      	mov	r5, r1
    433a:	4616      	mov	r6, r2
    433c:	d20e      	bcs.n	435c <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    433e:	2a04      	cmp	r2, #4
    4340:	d80a      	bhi.n	4358 <sys_heap_init+0x28>
    4342:	493d      	ldr	r1, [pc, #244]	; (4438 <sys_heap_init+0x108>)
    4344:	483d      	ldr	r0, [pc, #244]	; (443c <sys_heap_init+0x10c>)
    4346:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    434a:	f01f ff77 	bl	2423c <printk>
    434e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    4352:	4839      	ldr	r0, [pc, #228]	; (4438 <sys_heap_init+0x108>)
    4354:	f020 fa24 	bl	247a0 <assert_post_action>
    4358:	2304      	movs	r3, #4
    435a:	e000      	b.n	435e <sys_heap_init+0x2e>
    435c:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
    435e:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4360:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4362:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4364:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4368:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    436c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    436e:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4370:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    4374:	d80a      	bhi.n	438c <sys_heap_init+0x5c>
    4376:	4930      	ldr	r1, [pc, #192]	; (4438 <sys_heap_init+0x108>)
    4378:	4830      	ldr	r0, [pc, #192]	; (443c <sys_heap_init+0x10c>)
    437a:	f240 1275 	movw	r2, #373	; 0x175
    437e:	f01f ff5d 	bl	2423c <printk>
    4382:	f240 1175 	movw	r1, #373	; 0x175
    4386:	482c      	ldr	r0, [pc, #176]	; (4438 <sys_heap_init+0x108>)
    4388:	f020 fa0a 	bl	247a0 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    438c:	2200      	movs	r2, #0
    438e:	2300      	movs	r3, #0
	heap->heap = h;
    4390:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
    4392:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    4396:	2300      	movs	r3, #0
    4398:	60e3      	str	r3, [r4, #12]

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    439a:	4631      	mov	r1, r6
	h->len = buf_sz;
    439c:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    439e:	4620      	mov	r0, r4
    43a0:	f020 f80d 	bl	243be <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
    43a4:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    43a6:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    43a8:	1c47      	adds	r7, r0, #1
    43aa:	4620      	mov	r0, r4
    43ac:	f01f fffd 	bl	243aa <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    43b0:	351b      	adds	r5, #27
    43b2:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    43b4:	4428      	add	r0, r5
    43b6:	42b0      	cmp	r0, r6
    43b8:	d30a      	bcc.n	43d0 <sys_heap_init+0xa0>
    43ba:	491f      	ldr	r1, [pc, #124]	; (4438 <sys_heap_init+0x108>)
    43bc:	481f      	ldr	r0, [pc, #124]	; (443c <sys_heap_init+0x10c>)
    43be:	f240 1281 	movw	r2, #385	; 0x181
    43c2:	f01f ff3b 	bl	2423c <printk>
    43c6:	f240 1181 	movw	r1, #385	; 0x181
    43ca:	481b      	ldr	r0, [pc, #108]	; (4438 <sys_heap_init+0x108>)
    43cc:	f020 f9e8 	bl	247a0 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    43d0:	2300      	movs	r3, #0
    43d2:	f104 0210 	add.w	r2, r4, #16

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    43d6:	4619      	mov	r1, r3
	for (int i = 0; i < nb_buckets; i++) {
    43d8:	42bb      	cmp	r3, r7
    43da:	db29      	blt.n	4430 <sys_heap_init+0x100>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    43dc:	462a      	mov	r2, r5
    43de:	4620      	mov	r0, r4
    43e0:	2100      	movs	r1, #0
    43e2:	f01f ffde 	bl	243a2 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    43e6:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
    43e8:	4620      	mov	r0, r4
    43ea:	2201      	movs	r2, #1
    43ec:	2100      	movs	r1, #0
    43ee:	f01f ffc0 	bl	24372 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    43f2:	463a      	mov	r2, r7
    43f4:	4629      	mov	r1, r5
    43f6:	f01f ffd4 	bl	243a2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    43fa:	462b      	mov	r3, r5
    43fc:	4629      	mov	r1, r5
    43fe:	4620      	mov	r0, r4
    4400:	2200      	movs	r2, #0
    4402:	f01f ff9e 	bl	24342 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    4406:	4631      	mov	r1, r6
    4408:	4620      	mov	r0, r4
    440a:	2200      	movs	r2, #0
    440c:	f01f ffc9 	bl	243a2 <set_chunk_size>
    4410:	463b      	mov	r3, r7
    4412:	4631      	mov	r1, r6
    4414:	4620      	mov	r0, r4
    4416:	2200      	movs	r2, #0
    4418:	f01f ff93 	bl	24342 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    441c:	4631      	mov	r1, r6
    441e:	4620      	mov	r0, r4
    4420:	2201      	movs	r2, #1
    4422:	f01f ffa6 	bl	24372 <set_chunk_used>

	free_list_add(h, chunk0_size);
    4426:	4629      	mov	r1, r5
}
    4428:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    442c:	f020 b89f 	b.w	2456e <free_list_add>
		h->buckets[i].next = 0;
    4430:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    4434:	3301      	adds	r3, #1
    4436:	e7cf      	b.n	43d8 <sys_heap_init+0xa8>
    4438:	0002be4a 	.word	0x0002be4a
    443c:	0002bced 	.word	0x0002bced

00004440 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4444:	b093      	sub	sp, #76	; 0x4c
    4446:	468a      	mov	sl, r1
    4448:	9003      	str	r0, [sp, #12]
    444a:	4693      	mov	fp, r2
    444c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    444e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4450:	f89b 0000 	ldrb.w	r0, [fp]
    4454:	b908      	cbnz	r0, 445a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4456:	4628      	mov	r0, r5
    4458:	e317      	b.n	4a8a <cbvprintf+0x64a>
		if (*fp != '%') {
    445a:	2825      	cmp	r0, #37	; 0x25
    445c:	f10b 0701 	add.w	r7, fp, #1
    4460:	d007      	beq.n	4472 <cbvprintf+0x32>
			OUTC('%');
    4462:	4651      	mov	r1, sl
    4464:	9b03      	ldr	r3, [sp, #12]
    4466:	4798      	blx	r3
    4468:	2800      	cmp	r0, #0
    446a:	f2c0 830e 	blt.w	4a8a <cbvprintf+0x64a>
    446e:	3501      	adds	r5, #1
			break;
    4470:	e200      	b.n	4874 <cbvprintf+0x434>
		} state = {
    4472:	2218      	movs	r2, #24
    4474:	2100      	movs	r1, #0
    4476:	a80c      	add	r0, sp, #48	; 0x30
    4478:	f021 fe9c 	bl	261b4 <memset>
	if (*sp == '%') {
    447c:	f89b 3001 	ldrb.w	r3, [fp, #1]
    4480:	2b25      	cmp	r3, #37	; 0x25
    4482:	d07c      	beq.n	457e <cbvprintf+0x13e>
    4484:	2200      	movs	r2, #0
    4486:	e9cd 2204 	strd	r2, r2, [sp, #16]
    448a:	46bc      	mov	ip, r7
    448c:	4610      	mov	r0, r2
    448e:	4691      	mov	r9, r2
    4490:	4617      	mov	r7, r2
    4492:	4690      	mov	r8, r2
    4494:	4616      	mov	r6, r2
    4496:	4696      	mov	lr, r2
    4498:	4663      	mov	r3, ip
		switch (*sp) {
    449a:	f81c 1b01 	ldrb.w	r1, [ip], #1
    449e:	292b      	cmp	r1, #43	; 0x2b
    44a0:	f000 809f 	beq.w	45e2 <cbvprintf+0x1a2>
    44a4:	f200 8095 	bhi.w	45d2 <cbvprintf+0x192>
    44a8:	2920      	cmp	r1, #32
    44aa:	f000 809d 	beq.w	45e8 <cbvprintf+0x1a8>
    44ae:	2923      	cmp	r1, #35	; 0x23
    44b0:	f000 809d 	beq.w	45ee <cbvprintf+0x1ae>
    44b4:	b12e      	cbz	r6, 44c2 <cbvprintf+0x82>
    44b6:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
    44ba:	f36e 0682 	bfi	r6, lr, #2, #1
    44be:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
    44c2:	b12f      	cbz	r7, 44d0 <cbvprintf+0x90>
    44c4:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
    44c8:	f368 06c3 	bfi	r6, r8, #3, #1
    44cc:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
    44d0:	b128      	cbz	r0, 44de <cbvprintf+0x9e>
    44d2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    44d6:	f369 1004 	bfi	r0, r9, #4, #1
    44da:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    44de:	9804      	ldr	r0, [sp, #16]
    44e0:	b128      	cbz	r0, 44ee <cbvprintf+0xae>
    44e2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    44e6:	f040 0020 	orr.w	r0, r0, #32
    44ea:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    44ee:	b132      	cbz	r2, 44fe <cbvprintf+0xbe>
    44f0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    44f4:	9805      	ldr	r0, [sp, #20]
    44f6:	f360 1286 	bfi	r2, r0, #6, #1
    44fa:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    44fe:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4502:	f002 0044 	and.w	r0, r2, #68	; 0x44
    4506:	2844      	cmp	r0, #68	; 0x44
    4508:	d103      	bne.n	4512 <cbvprintf+0xd2>
		conv->flag_zero = false;
    450a:	f36f 1286 	bfc	r2, #6, #1
    450e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    4512:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    4516:	292a      	cmp	r1, #42	; 0x2a
	conv->width_present = true;
    4518:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    451c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    4520:	f040 8081 	bne.w	4626 <cbvprintf+0x1e6>
    4524:	1c5a      	adds	r2, r3, #1
		conv->width_star = true;
    4526:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    452a:	f043 0301 	orr.w	r3, r3, #1
    452e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    4532:	7813      	ldrb	r3, [r2, #0]
    4534:	2b2e      	cmp	r3, #46	; 0x2e
    4536:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    453a:	bf0c      	ite	eq
    453c:	2101      	moveq	r1, #1
    453e:	2100      	movne	r1, #0
    4540:	f361 0341 	bfi	r3, r1, #1, #1
    4544:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    4548:	d179      	bne.n	463e <cbvprintf+0x1fe>
	if (*sp == '*') {
    454a:	7853      	ldrb	r3, [r2, #1]
    454c:	2b2a      	cmp	r3, #42	; 0x2a
    454e:	d06f      	beq.n	4630 <cbvprintf+0x1f0>
    4550:	3201      	adds	r2, #1
	size_t val = 0;
    4552:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    4554:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4556:	4610      	mov	r0, r2
    4558:	f810 3b01 	ldrb.w	r3, [r0], #1
    455c:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4560:	2f09      	cmp	r7, #9
    4562:	f240 8093 	bls.w	468c <cbvprintf+0x24c>
	conv->unsupported |= ((conv->prec_value < 0)
    4566:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    456a:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    456c:	f3c3 0040 	ubfx	r0, r3, #1, #1
    4570:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    4574:	f361 0341 	bfi	r3, r1, #1, #1
    4578:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    457c:	e05f      	b.n	463e <cbvprintf+0x1fe>
		conv->specifier = *sp++;
    457e:	f10b 0702 	add.w	r7, fp, #2
    4582:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    4586:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    458a:	07d9      	lsls	r1, r3, #31
    458c:	f140 8119 	bpl.w	47c2 <cbvprintf+0x382>
			width = va_arg(ap, int);
    4590:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    4594:	f1b9 0f00 	cmp.w	r9, #0
    4598:	da07      	bge.n	45aa <cbvprintf+0x16a>
				conv->flag_dash = true;
    459a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    459e:	f042 0204 	orr.w	r2, r2, #4
    45a2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    45a6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    45aa:	075a      	lsls	r2, r3, #29
    45ac:	f140 8112 	bpl.w	47d4 <cbvprintf+0x394>
			int arg = va_arg(ap, int);
    45b0:	4623      	mov	r3, r4
    45b2:	f853 8b04 	ldr.w	r8, [r3], #4
			if (arg < 0) {
    45b6:	f1b8 0f00 	cmp.w	r8, #0
    45ba:	f280 8125 	bge.w	4808 <cbvprintf+0x3c8>
				conv->prec_present = false;
    45be:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    45c2:	f36f 0241 	bfc	r2, #1, #1
    45c6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			int arg = va_arg(ap, int);
    45ca:	461c      	mov	r4, r3
		int precision = -1;
    45cc:	f04f 38ff 	mov.w	r8, #4294967295
    45d0:	e105      	b.n	47de <cbvprintf+0x39e>
		switch (*sp) {
    45d2:	292d      	cmp	r1, #45	; 0x2d
    45d4:	d00e      	beq.n	45f4 <cbvprintf+0x1b4>
    45d6:	2930      	cmp	r1, #48	; 0x30
    45d8:	f47f af6c 	bne.w	44b4 <cbvprintf+0x74>
    45dc:	2201      	movs	r2, #1
			conv->flag_zero = true;
    45de:	9205      	str	r2, [sp, #20]
			++sp;
    45e0:	e75a      	b.n	4498 <cbvprintf+0x58>
		switch (*sp) {
    45e2:	2701      	movs	r7, #1
			conv->flag_plus = true;
    45e4:	46b8      	mov	r8, r7
    45e6:	e757      	b.n	4498 <cbvprintf+0x58>
		switch (*sp) {
    45e8:	2001      	movs	r0, #1
			conv->flag_space = true;
    45ea:	4681      	mov	r9, r0
    45ec:	e754      	b.n	4498 <cbvprintf+0x58>
			conv->flag_hash = true;
    45ee:	2301      	movs	r3, #1
    45f0:	9304      	str	r3, [sp, #16]
    45f2:	e751      	b.n	4498 <cbvprintf+0x58>
		switch (*sp) {
    45f4:	2601      	movs	r6, #1
			conv->flag_dash = true;
    45f6:	46b6      	mov	lr, r6
    45f8:	e74e      	b.n	4498 <cbvprintf+0x58>
		val = 10U * val + *sp++ - '0';
    45fa:	fb0c 0101 	mla	r1, ip, r1, r0
    45fe:	3930      	subs	r1, #48	; 0x30
    4600:	4632      	mov	r2, r6
    4602:	4616      	mov	r6, r2
    4604:	f816 0b01 	ldrb.w	r0, [r6], #1
    4608:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    460c:	2f09      	cmp	r7, #9
    460e:	d9f4      	bls.n	45fa <cbvprintf+0x1ba>
	if (sp != wp) {
    4610:	4293      	cmp	r3, r2
    4612:	d08e      	beq.n	4532 <cbvprintf+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    4614:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		conv->width_value = width;
    4618:	910f      	str	r1, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    461a:	0fc9      	lsrs	r1, r1, #31
		conv->unsupported |= ((conv->width_value < 0)
    461c:	f361 0341 	bfi	r3, r1, #1, #1
    4620:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    4624:	e785      	b.n	4532 <cbvprintf+0xf2>
	if (*sp == '*') {
    4626:	461a      	mov	r2, r3
	size_t val = 0;
    4628:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    462a:	f04f 0c0a 	mov.w	ip, #10
    462e:	e7e8      	b.n	4602 <cbvprintf+0x1c2>
		conv->prec_star = true;
    4630:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4634:	f043 0304 	orr.w	r3, r3, #4
    4638:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    463c:	3202      	adds	r2, #2
	switch (*sp) {
    463e:	4617      	mov	r7, r2
    4640:	f817 3b01 	ldrb.w	r3, [r7], #1
    4644:	2b6a      	cmp	r3, #106	; 0x6a
    4646:	d047      	beq.n	46d8 <cbvprintf+0x298>
    4648:	d825      	bhi.n	4696 <cbvprintf+0x256>
    464a:	2b4c      	cmp	r3, #76	; 0x4c
    464c:	d050      	beq.n	46f0 <cbvprintf+0x2b0>
    464e:	2b68      	cmp	r3, #104	; 0x68
    4650:	d02e      	beq.n	46b0 <cbvprintf+0x270>
    4652:	4617      	mov	r7, r2
	conv->specifier = *sp++;
    4654:	f817 2b01 	ldrb.w	r2, [r7], #1
    4658:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    465c:	2a67      	cmp	r2, #103	; 0x67
    465e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4662:	d860      	bhi.n	4726 <cbvprintf+0x2e6>
    4664:	2a65      	cmp	r2, #101	; 0x65
    4666:	d255      	bcs.n	4714 <cbvprintf+0x2d4>
    4668:	2a58      	cmp	r2, #88	; 0x58
    466a:	f000 8098 	beq.w	479e <cbvprintf+0x35e>
    466e:	d84c      	bhi.n	470a <cbvprintf+0x2ca>
    4670:	2a41      	cmp	r2, #65	; 0x41
    4672:	d04f      	beq.n	4714 <cbvprintf+0x2d4>
    4674:	d302      	bcc.n	467c <cbvprintf+0x23c>
    4676:	3a45      	subs	r2, #69	; 0x45
    4678:	2a02      	cmp	r2, #2
    467a:	d94b      	bls.n	4714 <cbvprintf+0x2d4>
		conv->invalid = true;
    467c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4680:	f043 0301 	orr.w	r3, r3, #1
    4684:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    4688:	2300      	movs	r3, #0
    468a:	e06a      	b.n	4762 <cbvprintf+0x322>
		val = 10U * val + *sp++ - '0';
    468c:	fb06 3101 	mla	r1, r6, r1, r3
    4690:	3930      	subs	r1, #48	; 0x30
    4692:	4602      	mov	r2, r0
    4694:	e75f      	b.n	4556 <cbvprintf+0x116>
	switch (*sp) {
    4696:	2b74      	cmp	r3, #116	; 0x74
    4698:	d026      	beq.n	46e8 <cbvprintf+0x2a8>
    469a:	2b7a      	cmp	r3, #122	; 0x7a
    469c:	d020      	beq.n	46e0 <cbvprintf+0x2a0>
    469e:	2b6c      	cmp	r3, #108	; 0x6c
    46a0:	d1d7      	bne.n	4652 <cbvprintf+0x212>
		if (*++sp == 'l') {
    46a2:	7853      	ldrb	r3, [r2, #1]
    46a4:	2b6c      	cmp	r3, #108	; 0x6c
    46a6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    46aa:	d113      	bne.n	46d4 <cbvprintf+0x294>
			conv->length_mod = LENGTH_LL;
    46ac:	2104      	movs	r1, #4
    46ae:	e005      	b.n	46bc <cbvprintf+0x27c>
		if (*++sp == 'h') {
    46b0:	7853      	ldrb	r3, [r2, #1]
    46b2:	2b68      	cmp	r3, #104	; 0x68
    46b4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    46b8:	d106      	bne.n	46c8 <cbvprintf+0x288>
			conv->length_mod = LENGTH_HH;
    46ba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    46bc:	f361 03c6 	bfi	r3, r1, #3, #4
    46c0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
			++sp;
    46c4:	1c97      	adds	r7, r2, #2
    46c6:	e7c5      	b.n	4654 <cbvprintf+0x214>
			conv->length_mod = LENGTH_H;
    46c8:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    46ca:	f362 03c6 	bfi	r3, r2, #3, #4
    46ce:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    46d2:	e7bf      	b.n	4654 <cbvprintf+0x214>
			conv->length_mod = LENGTH_L;
    46d4:	2203      	movs	r2, #3
    46d6:	e7f8      	b.n	46ca <cbvprintf+0x28a>
		conv->length_mod = LENGTH_J;
    46d8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    46dc:	2205      	movs	r2, #5
    46de:	e7f4      	b.n	46ca <cbvprintf+0x28a>
		conv->length_mod = LENGTH_Z;
    46e0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    46e4:	2206      	movs	r2, #6
    46e6:	e7f0      	b.n	46ca <cbvprintf+0x28a>
		conv->length_mod = LENGTH_T;
    46e8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    46ec:	2207      	movs	r2, #7
    46ee:	e7ec      	b.n	46ca <cbvprintf+0x28a>
		conv->unsupported = true;
    46f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    46f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    46f8:	f023 0302 	bic.w	r3, r3, #2
    46fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4700:	f043 0302 	orr.w	r3, r3, #2
    4704:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    4708:	e7a4      	b.n	4654 <cbvprintf+0x214>
	switch (conv->specifier) {
    470a:	2a63      	cmp	r2, #99	; 0x63
    470c:	d047      	beq.n	479e <cbvprintf+0x35e>
    470e:	d812      	bhi.n	4736 <cbvprintf+0x2f6>
    4710:	2a61      	cmp	r2, #97	; 0x61
    4712:	d1b3      	bne.n	467c <cbvprintf+0x23c>
		conv->specifier_cat = SPECIFIER_FP;
    4714:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4718:	2204      	movs	r2, #4
    471a:	f362 0302 	bfi	r3, r2, #0, #3
    471e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    4722:	2301      	movs	r3, #1
    4724:	e01d      	b.n	4762 <cbvprintf+0x322>
	switch (conv->specifier) {
    4726:	2a70      	cmp	r2, #112	; 0x70
    4728:	d02c      	beq.n	4784 <cbvprintf+0x344>
    472a:	d824      	bhi.n	4776 <cbvprintf+0x336>
    472c:	2a6e      	cmp	r2, #110	; 0x6e
    472e:	d03a      	beq.n	47a6 <cbvprintf+0x366>
    4730:	d835      	bhi.n	479e <cbvprintf+0x35e>
    4732:	2a69      	cmp	r2, #105	; 0x69
    4734:	d1a2      	bne.n	467c <cbvprintf+0x23c>
		conv->specifier_cat = SPECIFIER_SINT;
    4736:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    473a:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    473c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    4740:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    4744:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    4746:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    474a:	bf02      	ittt	eq
    474c:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    4750:	f041 0101 	orreq.w	r1, r1, #1
    4754:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    4758:	2a63      	cmp	r2, #99	; 0x63
    475a:	d195      	bne.n	4688 <cbvprintf+0x248>
			unsupported = (conv->length_mod != LENGTH_NONE);
    475c:	3300      	adds	r3, #0
    475e:	bf18      	it	ne
    4760:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    4762:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4766:	f3c2 0140 	ubfx	r1, r2, #1, #1
    476a:	430b      	orrs	r3, r1
    476c:	f363 0241 	bfi	r2, r3, #1, #1
    4770:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    4774:	e707      	b.n	4586 <cbvprintf+0x146>
	switch (conv->specifier) {
    4776:	2a75      	cmp	r2, #117	; 0x75
    4778:	d011      	beq.n	479e <cbvprintf+0x35e>
    477a:	2a78      	cmp	r2, #120	; 0x78
    477c:	d00f      	beq.n	479e <cbvprintf+0x35e>
    477e:	2a73      	cmp	r2, #115	; 0x73
    4780:	f47f af7c 	bne.w	467c <cbvprintf+0x23c>
		conv->specifier_cat = SPECIFIER_PTR;
    4784:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    4788:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    478a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    478e:	f361 0202 	bfi	r2, r1, #0, #3
    4792:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    4796:	bf14      	ite	ne
    4798:	2301      	movne	r3, #1
    479a:	2300      	moveq	r3, #0
    479c:	e7e1      	b.n	4762 <cbvprintf+0x322>
		conv->specifier_cat = SPECIFIER_UINT;
    479e:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    47a2:	2002      	movs	r0, #2
    47a4:	e7ca      	b.n	473c <cbvprintf+0x2fc>
		conv->specifier_cat = SPECIFIER_PTR;
    47a6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    47aa:	f003 0378 	and.w	r3, r3, #120	; 0x78
    47ae:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    47b2:	2103      	movs	r1, #3
    47b4:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    47b8:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    47ba:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    47be:	4143      	adcs	r3, r0
    47c0:	e7cf      	b.n	4762 <cbvprintf+0x322>
		} else if (conv->width_present) {
    47c2:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    47c6:	2a00      	cmp	r2, #0
			width = conv->width_value;
    47c8:	bfb4      	ite	lt
    47ca:	f8dd 903c 	ldrlt.w	r9, [sp, #60]	; 0x3c
		int width = -1;
    47ce:	f04f 39ff 	movge.w	r9, #4294967295
    47d2:	e6ea      	b.n	45aa <cbvprintf+0x16a>
		} else if (conv->prec_present) {
    47d4:	079b      	lsls	r3, r3, #30
    47d6:	f57f aef9 	bpl.w	45cc <cbvprintf+0x18c>
			precision = conv->prec_value;
    47da:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    47de:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    47e2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    47e4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    47e8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    47ec:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    47f0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    47f2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    47f6:	d13f      	bne.n	4878 <cbvprintf+0x438>
			switch (length_mod) {
    47f8:	1ed3      	subs	r3, r2, #3
    47fa:	2b04      	cmp	r3, #4
    47fc:	d814      	bhi.n	4828 <cbvprintf+0x3e8>
    47fe:	e8df f003 	tbb	[pc, r3]
    4802:	0d05      	.short	0x0d05
    4804:	130d      	.short	0x130d
    4806:	13          	.byte	0x13
    4807:	00          	.byte	0x00
			int arg = va_arg(ap, int);
    4808:	461c      	mov	r4, r3
    480a:	e7e8      	b.n	47de <cbvprintf+0x39e>
					value->sint = va_arg(ap, long);
    480c:	4623      	mov	r3, r4
    480e:	f853 0b04 	ldr.w	r0, [r3], #4
    4812:	17c1      	asrs	r1, r0, #31
				value->sint =
    4814:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
			value->ptr = va_arg(ap, void *);
    4818:	461c      	mov	r4, r3
    481a:	e01c      	b.n	4856 <cbvprintf+0x416>
					(sint_value_type)va_arg(ap, long long);
    481c:	3407      	adds	r4, #7
    481e:	f024 0307 	bic.w	r3, r4, #7
				value->sint =
    4822:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    4826:	e7f5      	b.n	4814 <cbvprintf+0x3d4>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4828:	4623      	mov	r3, r4
			if (length_mod == LENGTH_HH) {
    482a:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    482c:	f853 0b04 	ldr.w	r0, [r3], #4
    4830:	ea4f 71e0 	mov.w	r1, r0, asr #31
    4834:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    4838:	461c      	mov	r4, r3
			if (length_mod == LENGTH_HH) {
    483a:	d105      	bne.n	4848 <cbvprintf+0x408>
				value->uint = (unsigned char)value->uint;
    483c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    4840:	930c      	str	r3, [sp, #48]	; 0x30
    4842:	2300      	movs	r3, #0
    4844:	930d      	str	r3, [sp, #52]	; 0x34
    4846:	e006      	b.n	4856 <cbvprintf+0x416>
			} else if (length_mod == LENGTH_H) {
    4848:	2a02      	cmp	r2, #2
    484a:	d104      	bne.n	4856 <cbvprintf+0x416>
				value->sint = (short)value->sint;
    484c:	f9bd 0030 	ldrsh.w	r0, [sp, #48]	; 0x30
    4850:	17c1      	asrs	r1, r0, #31
    4852:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    4856:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    485a:	f013 0603 	ands.w	r6, r3, #3
    485e:	d03f      	beq.n	48e0 <cbvprintf+0x4a0>
			OUTS(sp, fp);
    4860:	463b      	mov	r3, r7
    4862:	465a      	mov	r2, fp
    4864:	4651      	mov	r1, sl
    4866:	9803      	ldr	r0, [sp, #12]
    4868:	f01f ff84 	bl	24774 <outs>
    486c:	2800      	cmp	r0, #0
    486e:	f2c0 810c 	blt.w	4a8a <cbvprintf+0x64a>
    4872:	4405      	add	r5, r0
			continue;
    4874:	46bb      	mov	fp, r7
    4876:	e5eb      	b.n	4450 <cbvprintf+0x10>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4878:	2b02      	cmp	r3, #2
    487a:	d120      	bne.n	48be <cbvprintf+0x47e>
			switch (length_mod) {
    487c:	1ed3      	subs	r3, r2, #3
    487e:	2b04      	cmp	r3, #4
    4880:	d80e      	bhi.n	48a0 <cbvprintf+0x460>
    4882:	e8df f003 	tbb	[pc, r3]
    4886:	0903      	.short	0x0903
    4888:	0d09      	.short	0x0d09
    488a:	0d          	.byte	0x0d
    488b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    488c:	6820      	ldr	r0, [r4, #0]
    488e:	900c      	str	r0, [sp, #48]	; 0x30
    4890:	2100      	movs	r1, #0
    4892:	1d23      	adds	r3, r4, #4
    4894:	910d      	str	r1, [sp, #52]	; 0x34
    4896:	e7bf      	b.n	4818 <cbvprintf+0x3d8>
					(uint_value_type)va_arg(ap,
    4898:	1de3      	adds	r3, r4, #7
    489a:	f023 0307 	bic.w	r3, r3, #7
    489e:	e7c0      	b.n	4822 <cbvprintf+0x3e2>
					(uint_value_type)va_arg(ap, size_t);
    48a0:	4623      	mov	r3, r4
			if (length_mod == LENGTH_HH) {
    48a2:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    48a4:	f853 1b04 	ldr.w	r1, [r3], #4
    48a8:	910c      	str	r1, [sp, #48]	; 0x30
    48aa:	f04f 0100 	mov.w	r1, #0
    48ae:	910d      	str	r1, [sp, #52]	; 0x34
    48b0:	461c      	mov	r4, r3
			if (length_mod == LENGTH_HH) {
    48b2:	d0c3      	beq.n	483c <cbvprintf+0x3fc>
			} else if (length_mod == LENGTH_H) {
    48b4:	2a02      	cmp	r2, #2
    48b6:	d1ce      	bne.n	4856 <cbvprintf+0x416>
				value->uint = (unsigned short)value->uint;
    48b8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    48bc:	e7c0      	b.n	4840 <cbvprintf+0x400>
		} else if (specifier_cat == SPECIFIER_FP) {
    48be:	2b04      	cmp	r3, #4
    48c0:	d107      	bne.n	48d2 <cbvprintf+0x492>
			if (length_mod == LENGTH_UPPER_L) {
    48c2:	1de3      	adds	r3, r4, #7
    48c4:	f023 0407 	bic.w	r4, r3, #7
    48c8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    48cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    48d0:	e7c1      	b.n	4856 <cbvprintf+0x416>
		} else if (specifier_cat == SPECIFIER_PTR) {
    48d2:	2b03      	cmp	r3, #3
    48d4:	d1bf      	bne.n	4856 <cbvprintf+0x416>
			value->ptr = va_arg(ap, void *);
    48d6:	4623      	mov	r3, r4
    48d8:	f853 1b04 	ldr.w	r1, [r3], #4
    48dc:	910c      	str	r1, [sp, #48]	; 0x30
    48de:	e79b      	b.n	4818 <cbvprintf+0x3d8>
		switch (conv->specifier) {
    48e0:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    48e4:	286e      	cmp	r0, #110	; 0x6e
    48e6:	f000 80a8 	beq.w	4a3a <cbvprintf+0x5fa>
    48ea:	d83c      	bhi.n	4966 <cbvprintf+0x526>
    48ec:	2863      	cmp	r0, #99	; 0x63
    48ee:	d071      	beq.n	49d4 <cbvprintf+0x594>
    48f0:	d822      	bhi.n	4938 <cbvprintf+0x4f8>
    48f2:	2825      	cmp	r0, #37	; 0x25
    48f4:	f43f adb5 	beq.w	4462 <cbvprintf+0x22>
    48f8:	2858      	cmp	r0, #88	; 0x58
    48fa:	d1bb      	bne.n	4874 <cbvprintf+0x434>
			bps = encode_uint(value->uint, conv, buf, bpe);
    48fc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    4900:	9300      	str	r3, [sp, #0]
    4902:	aa0e      	add	r2, sp, #56	; 0x38
    4904:	ab06      	add	r3, sp, #24
    4906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    490a:	f01f fee6 	bl	246da <encode_uint>
    490e:	4683      	mov	fp, r0
			if (precision >= 0) {
    4910:	f1b8 0f00 	cmp.w	r8, #0
    4914:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    4918:	db0c      	blt.n	4934 <cbvprintf+0x4f4>
				conv->flag_zero = false;
    491a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    491e:	eba0 030b 	sub.w	r3, r0, fp
				conv->flag_zero = false;
    4922:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    4926:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    4928:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    492c:	d902      	bls.n	4934 <cbvprintf+0x4f4>
					conv->pad0_value = precision - (int)len;
    492e:	eba8 0303 	sub.w	r3, r8, r3
    4932:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    4934:	4680      	mov	r8, r0
    4936:	e045      	b.n	49c4 <cbvprintf+0x584>
		switch (conv->specifier) {
    4938:	2864      	cmp	r0, #100	; 0x64
    493a:	d001      	beq.n	4940 <cbvprintf+0x500>
    493c:	2869      	cmp	r0, #105	; 0x69
    493e:	d199      	bne.n	4874 <cbvprintf+0x434>
			if (conv->flag_plus) {
    4940:	071e      	lsls	r6, r3, #28
    4942:	d478      	bmi.n	4a36 <cbvprintf+0x5f6>
				sign = ' ';
    4944:	f013 0610 	ands.w	r6, r3, #16
    4948:	bf18      	it	ne
    494a:	2620      	movne	r6, #32
			if (value->sint < 0) {
    494c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    4950:	2a00      	cmp	r2, #0
    4952:	f173 0100 	sbcs.w	r1, r3, #0
    4956:	dad1      	bge.n	48fc <cbvprintf+0x4bc>
				value->uint = (uint_value_type)-value->sint;
    4958:	4252      	negs	r2, r2
    495a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    495e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    4962:	262d      	movs	r6, #45	; 0x2d
    4964:	e7ca      	b.n	48fc <cbvprintf+0x4bc>
		switch (conv->specifier) {
    4966:	2873      	cmp	r0, #115	; 0x73
    4968:	d020      	beq.n	49ac <cbvprintf+0x56c>
    496a:	d81b      	bhi.n	49a4 <cbvprintf+0x564>
    496c:	286f      	cmp	r0, #111	; 0x6f
    496e:	d0c5      	beq.n	48fc <cbvprintf+0x4bc>
    4970:	2870      	cmp	r0, #112	; 0x70
    4972:	f47f af7f 	bne.w	4874 <cbvprintf+0x434>
			if (value->ptr != NULL) {
    4976:	980c      	ldr	r0, [sp, #48]	; 0x30
    4978:	2800      	cmp	r0, #0
    497a:	d073      	beq.n	4a64 <cbvprintf+0x624>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    497c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    4980:	9300      	str	r3, [sp, #0]
    4982:	aa0e      	add	r2, sp, #56	; 0x38
    4984:	ab06      	add	r3, sp, #24
    4986:	4631      	mov	r1, r6
    4988:	f01f fea7 	bl	246da <encode_uint>
				conv->altform_0c = true;
    498c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    4990:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4994:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    4998:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    499c:	4683      	mov	fp, r0
				conv->altform_0c = true;
    499e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
    49a2:	e7b5      	b.n	4910 <cbvprintf+0x4d0>
		switch (conv->specifier) {
    49a4:	2875      	cmp	r0, #117	; 0x75
    49a6:	d0a9      	beq.n	48fc <cbvprintf+0x4bc>
    49a8:	2878      	cmp	r0, #120	; 0x78
    49aa:	e7a6      	b.n	48fa <cbvprintf+0x4ba>
			if (precision >= 0) {
    49ac:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    49b0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
			if (precision >= 0) {
    49b4:	db0a      	blt.n	49cc <cbvprintf+0x58c>
				len = strnlen(bps, precision);
    49b6:	4641      	mov	r1, r8
    49b8:	4658      	mov	r0, fp
    49ba:	f021 fb69 	bl	26090 <strnlen>
			bpe = bps + len;
    49be:	eb0b 0800 	add.w	r8, fp, r0
		char sign = 0;
    49c2:	2600      	movs	r6, #0
		if (bps == NULL) {
    49c4:	f1bb 0f00 	cmp.w	fp, #0
    49c8:	d10b      	bne.n	49e2 <cbvprintf+0x5a2>
    49ca:	e753      	b.n	4874 <cbvprintf+0x434>
				len = strlen(bps);
    49cc:	4658      	mov	r0, fp
    49ce:	f021 fb58 	bl	26082 <strlen>
    49d2:	e7f4      	b.n	49be <cbvprintf+0x57e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    49d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    49d6:	f88d 3018 	strb.w	r3, [sp, #24]
			bpe = buf + 1;
    49da:	f10d 0819 	add.w	r8, sp, #25
			bps = buf;
    49de:	f10d 0b18 	add.w	fp, sp, #24
		size_t nj_len = (bpe - bps);
    49e2:	eba8 030b 	sub.w	r3, r8, fp
		if (sign != 0) {
    49e6:	b106      	cbz	r6, 49ea <cbvprintf+0x5aa>
			nj_len += 1U;
    49e8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    49ea:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    49ee:	06d0      	lsls	r0, r2, #27
    49f0:	d53e      	bpl.n	4a70 <cbvprintf+0x630>
			nj_len += 2U;
    49f2:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    49f4:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    49f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    49f8:	bf48      	it	mi
    49fa:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    49fc:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    49fe:	bf48      	it	mi
    4a00:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    4a02:	f1b9 0f00 	cmp.w	r9, #0
    4a06:	dd4d      	ble.n	4aa4 <cbvprintf+0x664>
			if (!conv->flag_dash) {
    4a08:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    4a0c:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    4a10:	f3c2 0380 	ubfx	r3, r2, #2, #1
    4a14:	9304      	str	r3, [sp, #16]
    4a16:	2b00      	cmp	r3, #0
    4a18:	d144      	bne.n	4aa4 <cbvprintf+0x664>
				if (conv->flag_zero) {
    4a1a:	0650      	lsls	r0, r2, #25
    4a1c:	d538      	bpl.n	4a90 <cbvprintf+0x650>
					if (sign != 0) {
    4a1e:	b146      	cbz	r6, 4a32 <cbvprintf+0x5f2>
						OUTC(sign);
    4a20:	4651      	mov	r1, sl
    4a22:	4630      	mov	r0, r6
    4a24:	9b03      	ldr	r3, [sp, #12]
    4a26:	4798      	blx	r3
    4a28:	2800      	cmp	r0, #0
    4a2a:	db2e      	blt.n	4a8a <cbvprintf+0x64a>
						sign = 0;
    4a2c:	9b04      	ldr	r3, [sp, #16]
						OUTC(sign);
    4a2e:	3501      	adds	r5, #1
						sign = 0;
    4a30:	461e      	mov	r6, r3
					pad = '0';
    4a32:	2330      	movs	r3, #48	; 0x30
    4a34:	e02d      	b.n	4a92 <cbvprintf+0x652>
				sign = '+';
    4a36:	262b      	movs	r6, #43	; 0x2b
    4a38:	e788      	b.n	494c <cbvprintf+0x50c>
				store_count(conv, value->ptr, count);
    4a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    4a3c:	2a07      	cmp	r2, #7
    4a3e:	f63f af19 	bhi.w	4874 <cbvprintf+0x434>
    4a42:	e8df f002 	tbb	[pc, r2]
    4a46:	040d      	.short	0x040d
    4a48:	08080d06 	.word	0x08080d06
    4a4c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    4a4e:	701d      	strb	r5, [r3, #0]
		break;
    4a50:	e710      	b.n	4874 <cbvprintf+0x434>
		*(short *)dp = (short)count;
    4a52:	801d      	strh	r5, [r3, #0]
		break;
    4a54:	e70e      	b.n	4874 <cbvprintf+0x434>
		*(intmax_t *)dp = (intmax_t)count;
    4a56:	4628      	mov	r0, r5
    4a58:	17e9      	asrs	r1, r5, #31
    4a5a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    4a5e:	e709      	b.n	4874 <cbvprintf+0x434>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4a60:	601d      	str	r5, [r3, #0]
		break;
    4a62:	e707      	b.n	4874 <cbvprintf+0x434>
			bpe = bps + 5;
    4a64:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 4b30 <cbvprintf+0x6f0>
    4a68:	4606      	mov	r6, r0
			bps = "(nil)";
    4a6a:	f1a8 0b05 	sub.w	fp, r8, #5
    4a6e:	e7b8      	b.n	49e2 <cbvprintf+0x5a2>
		} else if (conv->altform_0) {
    4a70:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    4a72:	bf48      	it	mi
    4a74:	3301      	addmi	r3, #1
    4a76:	e7bd      	b.n	49f4 <cbvprintf+0x5b4>
					OUTC(pad);
    4a78:	4618      	mov	r0, r3
    4a7a:	9304      	str	r3, [sp, #16]
    4a7c:	4651      	mov	r1, sl
    4a7e:	9b03      	ldr	r3, [sp, #12]
    4a80:	4798      	blx	r3
    4a82:	2800      	cmp	r0, #0
				while (width-- > 0) {
    4a84:	464a      	mov	r2, r9
					OUTC(pad);
    4a86:	9b04      	ldr	r3, [sp, #16]
    4a88:	da05      	bge.n	4a96 <cbvprintf+0x656>
#undef OUTS
#undef OUTC
}
    4a8a:	b013      	add	sp, #76	; 0x4c
    4a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    4a90:	2320      	movs	r3, #32
					pad = '0';
    4a92:	464a      	mov	r2, r9
    4a94:	444d      	add	r5, r9
				while (width-- > 0) {
    4a96:	2a00      	cmp	r2, #0
    4a98:	eba5 0102 	sub.w	r1, r5, r2
    4a9c:	f102 39ff 	add.w	r9, r2, #4294967295
    4aa0:	dcea      	bgt.n	4a78 <cbvprintf+0x638>
    4aa2:	460d      	mov	r5, r1
		if (sign != 0) {
    4aa4:	b136      	cbz	r6, 4ab4 <cbvprintf+0x674>
			OUTC(sign);
    4aa6:	4651      	mov	r1, sl
    4aa8:	4630      	mov	r0, r6
    4aaa:	9b03      	ldr	r3, [sp, #12]
    4aac:	4798      	blx	r3
    4aae:	2800      	cmp	r0, #0
    4ab0:	dbeb      	blt.n	4a8a <cbvprintf+0x64a>
    4ab2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    4ab4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4ab8:	06d9      	lsls	r1, r3, #27
    4aba:	d401      	bmi.n	4ac0 <cbvprintf+0x680>
    4abc:	071a      	lsls	r2, r3, #28
    4abe:	d506      	bpl.n	4ace <cbvprintf+0x68e>
				OUTC('0');
    4ac0:	4651      	mov	r1, sl
    4ac2:	2030      	movs	r0, #48	; 0x30
    4ac4:	9b03      	ldr	r3, [sp, #12]
    4ac6:	4798      	blx	r3
    4ac8:	2800      	cmp	r0, #0
    4aca:	dbde      	blt.n	4a8a <cbvprintf+0x64a>
    4acc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    4ace:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4ad2:	06db      	lsls	r3, r3, #27
    4ad4:	d507      	bpl.n	4ae6 <cbvprintf+0x6a6>
				OUTC(conv->specifier);
    4ad6:	4651      	mov	r1, sl
    4ad8:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    4adc:	9b03      	ldr	r3, [sp, #12]
    4ade:	4798      	blx	r3
    4ae0:	2800      	cmp	r0, #0
    4ae2:	dbd2      	blt.n	4a8a <cbvprintf+0x64a>
    4ae4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    4ae6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    4ae8:	442e      	add	r6, r5
    4aea:	1b73      	subs	r3, r6, r5
    4aec:	2b00      	cmp	r3, #0
    4aee:	dc16      	bgt.n	4b1e <cbvprintf+0x6de>
			OUTS(bps, bpe);
    4af0:	4643      	mov	r3, r8
    4af2:	465a      	mov	r2, fp
    4af4:	4651      	mov	r1, sl
    4af6:	9803      	ldr	r0, [sp, #12]
    4af8:	f01f fe3c 	bl	24774 <outs>
    4afc:	2800      	cmp	r0, #0
    4afe:	dbc4      	blt.n	4a8a <cbvprintf+0x64a>
    4b00:	4405      	add	r5, r0
		while (width > 0) {
    4b02:	44a9      	add	r9, r5
    4b04:	eba9 0305 	sub.w	r3, r9, r5
    4b08:	2b00      	cmp	r3, #0
    4b0a:	f77f aeb3 	ble.w	4874 <cbvprintf+0x434>
			OUTC(' ');
    4b0e:	4651      	mov	r1, sl
    4b10:	2020      	movs	r0, #32
    4b12:	9b03      	ldr	r3, [sp, #12]
    4b14:	4798      	blx	r3
    4b16:	2800      	cmp	r0, #0
    4b18:	dbb7      	blt.n	4a8a <cbvprintf+0x64a>
    4b1a:	3501      	adds	r5, #1
			--width;
    4b1c:	e7f2      	b.n	4b04 <cbvprintf+0x6c4>
				OUTC('0');
    4b1e:	4651      	mov	r1, sl
    4b20:	2030      	movs	r0, #48	; 0x30
    4b22:	9b03      	ldr	r3, [sp, #12]
    4b24:	4798      	blx	r3
    4b26:	2800      	cmp	r0, #0
    4b28:	dbaf      	blt.n	4a8a <cbvprintf+0x64a>
    4b2a:	3501      	adds	r5, #1
    4b2c:	e7dd      	b.n	4aea <cbvprintf+0x6aa>
    4b2e:	bf00      	nop
    4b30:	0002be70 	.word	0x0002be70

00004b34 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    4b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4b38:	460f      	mov	r7, r1
    4b3a:	4681      	mov	r9, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4b3c:	2108      	movs	r1, #8
    4b3e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    4b40:	4e12      	ldr	r6, [pc, #72]	; (4b8c <nvs_recover_last_ate+0x58>)
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4b42:	f01f fea8 	bl	24896 <nvs_al_size.isra.0>
	*addr -= ate_size;
    4b46:	683c      	ldr	r4, [r7, #0]
    4b48:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4b4a:	4680      	mov	r8, r0
	*addr -= ate_size;
    4b4c:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    4b4e:	ea04 0506 	and.w	r5, r4, r6
	while (ate_end_addr > data_end_addr) {
    4b52:	42ac      	cmp	r4, r5
    4b54:	d803      	bhi.n	4b5e <nvs_recover_last_ate+0x2a>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    4b56:	2000      	movs	r0, #0
}
    4b58:	b003      	add	sp, #12
    4b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4b5e:	2308      	movs	r3, #8
    4b60:	466a      	mov	r2, sp
    4b62:	4621      	mov	r1, r4
    4b64:	4648      	mov	r0, r9
    4b66:	f01f fe26 	bl	247b6 <nvs_flash_rd>
		if (rc) {
    4b6a:	2800      	cmp	r0, #0
    4b6c:	d1f4      	bne.n	4b58 <nvs_recover_last_ate+0x24>
		if (!nvs_ate_crc8_check(&end_ate)) {
    4b6e:	4668      	mov	r0, sp
    4b70:	f01f fe7c 	bl	2486c <nvs_ate_crc8_check>
    4b74:	b938      	cbnz	r0, 4b86 <nvs_recover_last_ate+0x52>
			data_end_addr += end_ate.offset + end_ate.len;
    4b76:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    4b7a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    4b7e:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
    4b80:	4035      	ands	r5, r6
			data_end_addr += end_ate.offset + end_ate.len;
    4b82:	4413      	add	r3, r2
    4b84:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    4b86:	eba4 0408 	sub.w	r4, r4, r8
    4b8a:	e7e2      	b.n	4b52 <nvs_recover_last_ate+0x1e>
    4b8c:	ffff0000 	.word	0xffff0000

00004b90 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    4b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b94:	4604      	mov	r4, r0
    4b96:	b093      	sub	sp, #76	; 0x4c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4b98:	2108      	movs	r1, #8
    4b9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4b9c:	f01f fe7b 	bl	24896 <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    4ba0:	6863      	ldr	r3, [r4, #4]
    4ba2:	0c1b      	lsrs	r3, r3, #16
    4ba4:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4ba6:	4681      	mov	r9, r0
	nvs_sector_advance(fs, &sec_addr);
    4ba8:	a901      	add	r1, sp, #4
    4baa:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    4bac:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    4bae:	f01f fe7c 	bl	248aa <nvs_sector_advance.isra.1>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4bb2:	9b01      	ldr	r3, [sp, #4]
    4bb4:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4bb6:	ad04      	add	r5, sp, #16
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4bb8:	4419      	add	r1, r3
    4bba:	eba1 0109 	sub.w	r1, r1, r9
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4bbe:	462a      	mov	r2, r5
    4bc0:	2308      	movs	r3, #8
    4bc2:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4bc4:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4bc6:	f01f fdf6 	bl	247b6 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    4bca:	1e02      	subs	r2, r0, #0
    4bcc:	f2c0 8095 	blt.w	4cfa <nvs_gc+0x16a>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    4bd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4bd2:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4bd4:	2300      	movs	r3, #0
		if (data8[i] != value) {
    4bd6:	5ce9      	ldrb	r1, [r5, r3]
    4bd8:	4291      	cmp	r1, r2
    4bda:	d17f      	bne.n	4cdc <nvs_gc+0x14c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4bdc:	3301      	adds	r3, #1
    4bde:	2b08      	cmp	r3, #8
    4be0:	d1f9      	bne.n	4bd6 <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    4be2:	9901      	ldr	r1, [sp, #4]
    4be4:	4620      	mov	r0, r4
    4be6:	f01f fe6a 	bl	248be <nvs_flash_erase_sector>
    4bea:	4602      	mov	r2, r0
		if (rc) {
    4bec:	e085      	b.n	4cfa <nvs_gc+0x16a>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    4bee:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    4bf0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    4bf4:	0c1b      	lsrs	r3, r3, #16
    4bf6:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    4bf8:	4413      	add	r3, r2
    4bfa:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    4bfc:	f8df b104 	ldr.w	fp, [pc, #260]	; 4d04 <nvs_gc+0x174>
		gc_prev_addr = gc_addr;
    4c00:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    4c04:	aa06      	add	r2, sp, #24
    4c06:	a902      	add	r1, sp, #8
    4c08:	4620      	mov	r0, r4
    4c0a:	f01f fe80 	bl	2490e <nvs_prev_ate>
		if (rc) {
    4c0e:	4602      	mov	r2, r0
    4c10:	2800      	cmp	r0, #0
    4c12:	d172      	bne.n	4cfa <nvs_gc+0x16a>
		if (nvs_ate_crc8_check(&gc_ate)) {
    4c14:	a806      	add	r0, sp, #24
    4c16:	f01f fe29 	bl	2486c <nvs_ate_crc8_check>
    4c1a:	2800      	cmp	r0, #0
    4c1c:	d135      	bne.n	4c8a <nvs_gc+0xfa>
		wlk_addr = fs->ate_wra;
    4c1e:	6863      	ldr	r3, [r4, #4]
    4c20:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4c22:	aa08      	add	r2, sp, #32
    4c24:	a903      	add	r1, sp, #12
    4c26:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    4c28:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4c2a:	f01f fe70 	bl	2490e <nvs_prev_ate>
			if (rc) {
    4c2e:	4602      	mov	r2, r0
    4c30:	2800      	cmp	r0, #0
    4c32:	d162      	bne.n	4cfa <nvs_gc+0x16a>
			if ((wlk_ate.id == gc_ate.id) &&
    4c34:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    4c38:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    4c3c:	429a      	cmp	r2, r3
    4c3e:	d027      	beq.n	4c90 <nvs_gc+0x100>
		} while (wlk_addr != fs->ate_wra);
    4c40:	6862      	ldr	r2, [r4, #4]
    4c42:	9b03      	ldr	r3, [sp, #12]
    4c44:	429a      	cmp	r2, r3
    4c46:	d1ec      	bne.n	4c22 <nvs_gc+0x92>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    4c48:	4555      	cmp	r5, sl
    4c4a:	d11e      	bne.n	4c8a <nvs_gc+0xfa>
    4c4c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    4c50:	b1db      	cbz	r3, 4c8a <nvs_gc+0xfa>
			data_addr += gc_ate.offset;
    4c52:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    4c56:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
    4c5a:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    4c5c:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    4c5e:	68a3      	ldr	r3, [r4, #8]
    4c60:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    4c64:	f01f fe0e 	bl	24884 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    4c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    4c6a:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    4c6e:	681e      	ldr	r6, [r3, #0]
    4c70:	4276      	negs	r6, r6
	block_size =
    4c72:	f006 0620 	and.w	r6, r6, #32
	while (len) {
    4c76:	f1b8 0f00 	cmp.w	r8, #0
    4c7a:	d10f      	bne.n	4c9c <nvs_gc+0x10c>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    4c7c:	a906      	add	r1, sp, #24
    4c7e:	4620      	mov	r0, r4
    4c80:	f01f fedd 	bl	24a3e <nvs_flash_ate_wrt>
			if (rc) {
    4c84:	4602      	mov	r2, r0
    4c86:	2800      	cmp	r0, #0
    4c88:	d137      	bne.n	4cfa <nvs_gc+0x16a>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    4c8a:	45ca      	cmp	sl, r9
    4c8c:	d1b8      	bne.n	4c00 <nvs_gc+0x70>
    4c8e:	e7a8      	b.n	4be2 <nvs_gc+0x52>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    4c90:	a808      	add	r0, sp, #32
    4c92:	f01f fdeb 	bl	2486c <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    4c96:	2800      	cmp	r0, #0
    4c98:	d1d2      	bne.n	4c40 <nvs_gc+0xb0>
    4c9a:	e7d5      	b.n	4c48 <nvs_gc+0xb8>
		bytes_to_copy = MIN(block_size, len);
    4c9c:	4546      	cmp	r6, r8
    4c9e:	4635      	mov	r5, r6
    4ca0:	bf28      	it	cs
    4ca2:	4645      	movcs	r5, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    4ca4:	aa0a      	add	r2, sp, #40	; 0x28
    4ca6:	462b      	mov	r3, r5
    4ca8:	4639      	mov	r1, r7
    4caa:	4620      	mov	r0, r4
    4cac:	f01f fd83 	bl	247b6 <nvs_flash_rd>
		if (rc) {
    4cb0:	4602      	mov	r2, r0
    4cb2:	bb10      	cbnz	r0, 4cfa <nvs_gc+0x16a>
	if (!len) {
    4cb4:	b135      	cbz	r5, 4cc4 <nvs_gc+0x134>
    4cb6:	aa0a      	add	r2, sp, #40	; 0x28
    4cb8:	462b      	mov	r3, r5
    4cba:	68a1      	ldr	r1, [r4, #8]
    4cbc:	4620      	mov	r0, r4
    4cbe:	f01f fe76 	bl	249ae <nvs_flash_al_wrt.part.3>
    4cc2:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
    4cc4:	4629      	mov	r1, r5
    4cc6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4cc8:	f01f fde5 	bl	24896 <nvs_al_size.isra.0>
    4ccc:	68a3      	ldr	r3, [r4, #8]
    4cce:	4418      	add	r0, r3
    4cd0:	60a0      	str	r0, [r4, #8]
		if (rc) {
    4cd2:	b992      	cbnz	r2, 4cfa <nvs_gc+0x16a>
		len -= bytes_to_copy;
    4cd4:	eba8 0805 	sub.w	r8, r8, r5
		addr += bytes_to_copy;
    4cd8:	442f      	add	r7, r5
    4cda:	e7cc      	b.n	4c76 <nvs_gc+0xe6>
	stop_addr = gc_addr - ate_size;
    4cdc:	9b02      	ldr	r3, [sp, #8]
	if (!nvs_ate_crc8_check(&close_ate)) {
    4cde:	4628      	mov	r0, r5
	stop_addr = gc_addr - ate_size;
    4ce0:	eba3 0909 	sub.w	r9, r3, r9
	if (!nvs_ate_crc8_check(&close_ate)) {
    4ce4:	f01f fdc2 	bl	2486c <nvs_ate_crc8_check>
    4ce8:	2800      	cmp	r0, #0
    4cea:	d080      	beq.n	4bee <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    4cec:	a902      	add	r1, sp, #8
    4cee:	4620      	mov	r0, r4
    4cf0:	f7ff ff20 	bl	4b34 <nvs_recover_last_ate>
		if (rc) {
    4cf4:	4602      	mov	r2, r0
    4cf6:	2800      	cmp	r0, #0
    4cf8:	d080      	beq.n	4bfc <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    4cfa:	4610      	mov	r0, r2
    4cfc:	b013      	add	sp, #76	; 0x4c
    4cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d02:	bf00      	nop
    4d04:	ffff0000 	.word	0xffff0000

00004d08 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    4d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d0c:	4604      	mov	r4, r0
    4d0e:	b086      	sub	sp, #24
    4d10:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    4d12:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    4d16:	4630      	mov	r0, r6
    4d18:	f025 fa64 	bl	2a1e4 <z_impl_k_mutex_init>
    4d1c:	4628      	mov	r0, r5
    4d1e:	f01b fa5b 	bl	201d8 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    4d22:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    4d24:	b948      	cbnz	r0, 4d3a <nvs_init+0x32>
		LOG_ERR("No valid flash device found");
    4d26:	2145      	movs	r1, #69	; 0x45
    4d28:	4888      	ldr	r0, [pc, #544]	; (4f4c <nvs_init+0x244>)
    4d2a:	f01f fa87 	bl	2423c <printk>
		return -ENXIO;
    4d2e:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    4d32:	4628      	mov	r0, r5
    4d34:	b006      	add	sp, #24
    4d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    4d3a:	6883      	ldr	r3, [r0, #8]
    4d3c:	691b      	ldr	r3, [r3, #16]
    4d3e:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    4d40:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    4d42:	b930      	cbnz	r0, 4d52 <nvs_init+0x4a>
		LOG_ERR("Could not obtain flash parameters");
    4d44:	4882      	ldr	r0, [pc, #520]	; (4f50 <nvs_init+0x248>)
    4d46:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Configuration error - sector count");
    4d48:	f01f fa78 	bl	2423c <printk>
		return -EINVAL;
    4d4c:	f06f 0515 	mvn.w	r5, #21
    4d50:	e7ef      	b.n	4d32 <nvs_init+0x2a>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    4d52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    4d54:	6883      	ldr	r3, [r0, #8]
    4d56:	691b      	ldr	r3, [r3, #16]
    4d58:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    4d5a:	6803      	ldr	r3, [r0, #0]
    4d5c:	3b01      	subs	r3, #1
    4d5e:	2b1f      	cmp	r3, #31
    4d60:	d902      	bls.n	4d68 <nvs_init+0x60>
		LOG_ERR("Unsupported write block size");
    4d62:	2145      	movs	r1, #69	; 0x45
    4d64:	487b      	ldr	r0, [pc, #492]	; (4f54 <nvs_init+0x24c>)
    4d66:	e7ef      	b.n	4d48 <nvs_init+0x40>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    4d68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4d6a:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    4d6c:	aa03      	add	r2, sp, #12
    4d6e:	f024 ff45 	bl	29bfc <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    4d72:	b110      	cbz	r0, 4d7a <nvs_init+0x72>
		LOG_ERR("Unable to get page info");
    4d74:	2145      	movs	r1, #69	; 0x45
    4d76:	4878      	ldr	r0, [pc, #480]	; (4f58 <nvs_init+0x250>)
    4d78:	e7e6      	b.n	4d48 <nvs_init+0x40>
	if (!fs->sector_size || fs->sector_size % info.size) {
    4d7a:	89a3      	ldrh	r3, [r4, #12]
    4d7c:	b12b      	cbz	r3, 4d8a <nvs_init+0x82>
    4d7e:	9a04      	ldr	r2, [sp, #16]
    4d80:	fbb3 f5f2 	udiv	r5, r3, r2
    4d84:	fb02 3515 	mls	r5, r2, r5, r3
    4d88:	b115      	cbz	r5, 4d90 <nvs_init+0x88>
		LOG_ERR("Invalid sector size");
    4d8a:	2145      	movs	r1, #69	; 0x45
    4d8c:	4873      	ldr	r0, [pc, #460]	; (4f5c <nvs_init+0x254>)
    4d8e:	e7db      	b.n	4d48 <nvs_init+0x40>
	if (fs->sector_count < 2) {
    4d90:	89e3      	ldrh	r3, [r4, #14]
    4d92:	2b01      	cmp	r3, #1
    4d94:	d802      	bhi.n	4d9c <nvs_init+0x94>
		LOG_ERR("Configuration error - sector count");
    4d96:	2145      	movs	r1, #69	; 0x45
    4d98:	4871      	ldr	r0, [pc, #452]	; (4f60 <nvs_init+0x258>)
    4d9a:	e7d5      	b.n	4d48 <nvs_init+0x40>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    4d9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    4d9e:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    4da0:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    4da4:	f04f 32ff 	mov.w	r2, #4294967295
    4da8:	f04f 33ff 	mov.w	r3, #4294967295
    4dac:	4630      	mov	r0, r6
    4dae:	f01b fd55 	bl	2085c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4db2:	2108      	movs	r1, #8
    4db4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4db6:	f01f fd6e 	bl	24896 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    4dba:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4dbc:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
    4dbe:	89e3      	ldrh	r3, [r4, #14]
    4dc0:	fa1f fa85 	uxth.w	sl, r5
    4dc4:	4553      	cmp	r3, sl
    4dc6:	d865      	bhi.n	4e94 <nvs_init+0x18c>
	if (closed_sectors == fs->sector_count) {
    4dc8:	89e3      	ldrh	r3, [r4, #14]
    4dca:	42bb      	cmp	r3, r7
    4dcc:	f000 80a2 	beq.w	4f14 <nvs_init+0x20c>
	if (i == fs->sector_count) {
    4dd0:	4553      	cmp	r3, sl
    4dd2:	d10c      	bne.n	4dee <nvs_init+0xe6>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    4dd4:	9900      	ldr	r1, [sp, #0]
    4dd6:	2308      	movs	r3, #8
    4dd8:	464a      	mov	r2, r9
    4dda:	eba1 0108 	sub.w	r1, r1, r8
    4dde:	4620      	mov	r0, r4
    4de0:	f01f fd20 	bl	24824 <nvs_flash_cmp_const>
		if (!rc) {
    4de4:	b918      	cbnz	r0, 4dee <nvs_init+0xe6>
			nvs_sector_advance(fs, &addr);
    4de6:	4669      	mov	r1, sp
    4de8:	89e0      	ldrh	r0, [r4, #14]
    4dea:	f01f fd5e 	bl	248aa <nvs_sector_advance.isra.1>
	fs->ate_wra = addr - ate_size;
    4dee:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    4df0:	4f5c      	ldr	r7, [pc, #368]	; (4f64 <nvs_init+0x25c>)
	fs->ate_wra = addr - ate_size;
    4df2:	eba3 0208 	sub.w	r2, r3, r8
	fs->data_wra = addr & ADDR_SECT_MASK;
    4df6:	403b      	ands	r3, r7
	fs->ate_wra = addr - ate_size;
    4df8:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    4dfa:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    4dfc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    4e00:	4299      	cmp	r1, r3
    4e02:	d30e      	bcc.n	4e22 <nvs_init+0x11a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4e04:	2308      	movs	r3, #8
    4e06:	aa01      	add	r2, sp, #4
    4e08:	4620      	mov	r0, r4
    4e0a:	f01f fcd4 	bl	247b6 <nvs_flash_rd>
		if (rc) {
    4e0e:	4605      	mov	r5, r0
    4e10:	bb18      	cbnz	r0, 4e5a <nvs_init+0x152>
    4e12:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    4e14:	f813 2b01 	ldrb.w	r2, [r3], #1
    4e18:	4591      	cmp	r9, r2
    4e1a:	d17e      	bne.n	4f1a <nvs_init+0x212>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4e1c:	3501      	adds	r5, #1
    4e1e:	2d08      	cmp	r5, #8
    4e20:	d1f8      	bne.n	4e14 <nvs_init+0x10c>
	while (fs->ate_wra > fs->data_wra) {
    4e22:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    4e26:	428b      	cmp	r3, r1
    4e28:	d907      	bls.n	4e3a <nvs_init+0x132>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    4e2a:	1a5b      	subs	r3, r3, r1
    4e2c:	464a      	mov	r2, r9
    4e2e:	4620      	mov	r0, r4
    4e30:	f01f fcf8 	bl	24824 <nvs_flash_cmp_const>
		if (rc < 0) {
    4e34:	1e05      	subs	r5, r0, #0
    4e36:	db10      	blt.n	4e5a <nvs_init+0x152>
		if (!rc) {
    4e38:	d150      	bne.n	4edc <nvs_init+0x1d4>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4e3a:	6863      	ldr	r3, [r4, #4]
    4e3c:	4f49      	ldr	r7, [pc, #292]	; (4f64 <nvs_init+0x25c>)
	nvs_sector_advance(fs, &addr);
    4e3e:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4e40:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
    4e42:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4e44:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    4e46:	f01f fd30 	bl	248aa <nvs_sector_advance.isra.1>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    4e4a:	89a3      	ldrh	r3, [r4, #12]
    4e4c:	9900      	ldr	r1, [sp, #0]
    4e4e:	464a      	mov	r2, r9
    4e50:	4620      	mov	r0, r4
    4e52:	f01f fce7 	bl	24824 <nvs_flash_cmp_const>
	if (rc < 0) {
    4e56:	1e05      	subs	r5, r0, #0
    4e58:	da46      	bge.n	4ee8 <nvs_init+0x1e0>
	return z_impl_k_mutex_unlock(mutex);
    4e5a:	4630      	mov	r0, r6
    4e5c:	f01b fdd2 	bl	20a04 <z_impl_k_mutex_unlock>
	if (rc) {
    4e60:	2d00      	cmp	r5, #0
    4e62:	f47f af66 	bne.w	4d32 <nvs_init+0x2a>
	fs->ready = true;
    4e66:	2301      	movs	r3, #1
    4e68:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    4e6a:	89e2      	ldrh	r2, [r4, #14]
    4e6c:	89a3      	ldrh	r3, [r4, #12]
    4e6e:	483e      	ldr	r0, [pc, #248]	; (4f68 <nvs_init+0x260>)
    4e70:	2149      	movs	r1, #73	; 0x49
    4e72:	f01f f9e3 	bl	2423c <printk>
	LOG_INF("alloc wra: %d, %x",
    4e76:	6862      	ldr	r2, [r4, #4]
    4e78:	483c      	ldr	r0, [pc, #240]	; (4f6c <nvs_init+0x264>)
    4e7a:	b293      	uxth	r3, r2
    4e7c:	2149      	movs	r1, #73	; 0x49
    4e7e:	0c12      	lsrs	r2, r2, #16
    4e80:	f01f f9dc 	bl	2423c <printk>
	LOG_INF("data wra: %d, %x",
    4e84:	68a2      	ldr	r2, [r4, #8]
    4e86:	483a      	ldr	r0, [pc, #232]	; (4f70 <nvs_init+0x268>)
    4e88:	b293      	uxth	r3, r2
    4e8a:	2149      	movs	r1, #73	; 0x49
    4e8c:	0c12      	lsrs	r2, r2, #16
    4e8e:	f01f f9d5 	bl	2423c <printk>
	return 0;
    4e92:	e74e      	b.n	4d32 <nvs_init+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
    4e94:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    4e96:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    4e98:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
    4e9c:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    4ea0:	464a      	mov	r2, r9
    4ea2:	2308      	movs	r3, #8
    4ea4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    4ea6:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    4ea8:	f01f fcbc 	bl	24824 <nvs_flash_cmp_const>
		if (rc) {
    4eac:	b170      	cbz	r0, 4ecc <nvs_init+0x1c4>
			nvs_sector_advance(fs, &addr);
    4eae:	4669      	mov	r1, sp
    4eb0:	89e0      	ldrh	r0, [r4, #14]
    4eb2:	f01f fcfa 	bl	248aa <nvs_sector_advance.isra.1>
			closed_sectors++;
    4eb6:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    4eb8:	2308      	movs	r3, #8
    4eba:	464a      	mov	r2, r9
    4ebc:	9900      	ldr	r1, [sp, #0]
    4ebe:	4620      	mov	r0, r4
			closed_sectors++;
    4ec0:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    4ec2:	f01f fcaf 	bl	24824 <nvs_flash_cmp_const>
			if (!rc) {
    4ec6:	2800      	cmp	r0, #0
    4ec8:	f43f af7e 	beq.w	4dc8 <nvs_init+0xc0>
    4ecc:	3501      	adds	r5, #1
    4ece:	e776      	b.n	4dbe <nvs_init+0xb6>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    4ed0:	f1ba 0f00 	cmp.w	sl, #0
    4ed4:	d036      	beq.n	4f44 <nvs_init+0x23c>
				rc = -ESPIPE;
    4ed6:	f06f 051c 	mvn.w	r5, #28
    4eda:	e7be      	b.n	4e5a <nvs_init+0x152>
		fs->data_wra += fs->flash_parameters->write_block_size;
    4edc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4ede:	68a3      	ldr	r3, [r4, #8]
    4ee0:	6812      	ldr	r2, [r2, #0]
    4ee2:	4413      	add	r3, r2
    4ee4:	60a3      	str	r3, [r4, #8]
    4ee6:	e79c      	b.n	4e22 <nvs_init+0x11a>
	if (rc) {
    4ee8:	d0b7      	beq.n	4e5a <nvs_init+0x152>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    4eea:	6861      	ldr	r1, [r4, #4]
    4eec:	4620      	mov	r0, r4
    4eee:	f01f fce6 	bl	248be <nvs_flash_erase_sector>
		if (rc) {
    4ef2:	4605      	mov	r5, r0
    4ef4:	2800      	cmp	r0, #0
    4ef6:	d1b0      	bne.n	4e5a <nvs_init+0x152>
		fs->ate_wra &= ADDR_SECT_MASK;
    4ef8:	6860      	ldr	r0, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    4efa:	89a3      	ldrh	r3, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    4efc:	4038      	ands	r0, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    4efe:	4418      	add	r0, r3
    4f00:	eba0 0048 	sub.w	r0, r0, r8, lsl #1
    4f04:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    4f06:	4038      	ands	r0, r7
    4f08:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    4f0a:	4620      	mov	r0, r4
    4f0c:	f7ff fe40 	bl	4b90 <nvs_gc>
    4f10:	4605      	mov	r5, r0
		if (rc) {
    4f12:	e7a2      	b.n	4e5a <nvs_init+0x152>
		rc = -EDEADLK;
    4f14:	f06f 0520 	mvn.w	r5, #32
    4f18:	e79f      	b.n	4e5a <nvs_init+0x152>
		if (!nvs_ate_crc8_check(&last_ate)) {
    4f1a:	a801      	add	r0, sp, #4
    4f1c:	f01f fca6 	bl	2486c <nvs_ate_crc8_check>
    4f20:	6865      	ldr	r5, [r4, #4]
    4f22:	b978      	cbnz	r0, 4f44 <nvs_init+0x23c>
			fs->data_wra = addr & ADDR_SECT_MASK;
    4f24:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    4f26:	f8bd 0006 	ldrh.w	r0, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    4f2a:	f8bd a008 	ldrh.w	sl, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    4f2e:	403a      	ands	r2, r7
			fs->data_wra += last_ate.offset;
    4f30:	4402      	add	r2, r0
    4f32:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    4f34:	4651      	mov	r1, sl
    4f36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4f38:	f01f fcad 	bl	24896 <nvs_al_size.isra.0>
    4f3c:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    4f3e:	42a8      	cmp	r0, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    4f40:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    4f42:	d0c5      	beq.n	4ed0 <nvs_init+0x1c8>
		fs->ate_wra -= ate_size;
    4f44:	eba5 0508 	sub.w	r5, r5, r8
    4f48:	6065      	str	r5, [r4, #4]
    4f4a:	e757      	b.n	4dfc <nvs_init+0xf4>
    4f4c:	0002be8a 	.word	0x0002be8a
    4f50:	0002beab 	.word	0x0002beab
    4f54:	0002bed2 	.word	0x0002bed2
    4f58:	0002bef4 	.word	0x0002bef4
    4f5c:	0002bf11 	.word	0x0002bf11
    4f60:	0002bf2a 	.word	0x0002bf2a
    4f64:	ffff0000 	.word	0xffff0000
    4f68:	0002bf52 	.word	0x0002bf52
    4f6c:	0002bf6e 	.word	0x0002bf6e
    4f70:	0002bf85 	.word	0x0002bf85

00004f74 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    4f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f78:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    4f7a:	7c03      	ldrb	r3, [r0, #16]
{
    4f7c:	b089      	sub	sp, #36	; 0x24
    4f7e:	4604      	mov	r4, r0
    4f80:	4689      	mov	r9, r1
    4f82:	4690      	mov	r8, r2
	if (!fs->ready) {
    4f84:	b94b      	cbnz	r3, 4f9a <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
    4f86:	2145      	movs	r1, #69	; 0x45
    4f88:	4865      	ldr	r0, [pc, #404]	; (5120 <nvs_write+0x1ac>)
    4f8a:	f01f f957 	bl	2423c <printk>
		return -EACCES;
    4f8e:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    4f92:	4628      	mov	r0, r5
    4f94:	b009      	add	sp, #36	; 0x24
    4f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4f9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4f9c:	2108      	movs	r1, #8
    4f9e:	4610      	mov	r0, r2
    4fa0:	f01f fc79 	bl	24896 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    4fa4:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4fa6:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    4fa8:	4610      	mov	r0, r2
    4faa:	f01f fc74 	bl	24896 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    4fae:	89a3      	ldrh	r3, [r4, #12]
    4fb0:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    4fb4:	1a9b      	subs	r3, r3, r2
    4fb6:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    4fb8:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    4fba:	f0c0 80ab 	bcc.w	5114 <nvs_write+0x1a0>
    4fbe:	b11e      	cbz	r6, 4fc8 <nvs_write+0x54>
	    ((len > 0) && (data == NULL))) {
    4fc0:	f1b8 0f00 	cmp.w	r8, #0
    4fc4:	f000 80a6 	beq.w	5114 <nvs_write+0x1a0>
	wlk_addr = fs->ate_wra;
    4fc8:	6863      	ldr	r3, [r4, #4]
    4fca:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4fcc:	aa04      	add	r2, sp, #16
    4fce:	a903      	add	r1, sp, #12
    4fd0:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    4fd2:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4fd6:	f01f fc9a 	bl	2490e <nvs_prev_ate>
		if (rc) {
    4fda:	4605      	mov	r5, r0
    4fdc:	2800      	cmp	r0, #0
    4fde:	d1d8      	bne.n	4f92 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    4fe0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    4fe4:	454b      	cmp	r3, r9
    4fe6:	d005      	beq.n	4ff4 <nvs_write+0x80>
		if (wlk_addr == fs->ate_wra) {
    4fe8:	6862      	ldr	r2, [r4, #4]
    4fea:	9b03      	ldr	r3, [sp, #12]
    4fec:	429a      	cmp	r2, r3
    4fee:	d1ed      	bne.n	4fcc <nvs_write+0x58>
		if (len == 0) {
    4ff0:	b9de      	cbnz	r6, 502a <nvs_write+0xb6>
    4ff2:	e7ce      	b.n	4f92 <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    4ff4:	a804      	add	r0, sp, #16
    4ff6:	f01f fc39 	bl	2486c <nvs_ate_crc8_check>
    4ffa:	2800      	cmp	r0, #0
    4ffc:	d1f4      	bne.n	4fe8 <nvs_write+0x74>
		if (len == 0) {
    4ffe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5002:	b186      	cbz	r6, 5026 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
    5004:	42b3      	cmp	r3, r6
    5006:	d110      	bne.n	502a <nvs_write+0xb6>
		rd_addr += wlk_ate.offset;
    5008:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    500c:	ea4f 411b 	mov.w	r1, fp, lsr #16
    5010:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    5012:	4401      	add	r1, r0
    5014:	4633      	mov	r3, r6
    5016:	4642      	mov	r2, r8
    5018:	4620      	mov	r0, r4
    501a:	f01f fbda 	bl	247d2 <nvs_flash_block_cmp>
			if (rc <= 0) {
    501e:	2800      	cmp	r0, #0
    5020:	dc03      	bgt.n	502a <nvs_write+0xb6>
    5022:	4605      	mov	r5, r0
    5024:	e7b5      	b.n	4f92 <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
    5026:	2b00      	cmp	r3, #0
    5028:	d0b3      	beq.n	4f92 <nvs_write+0x1e>
	if (data_size) {
    502a:	2f00      	cmp	r7, #0
    502c:	d13f      	bne.n	50ae <nvs_write+0x13a>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    502e:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    5032:	f04f 33ff 	mov.w	r3, #4294967295
    5036:	f04f 32ff 	mov.w	r2, #4294967295
    503a:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
    503c:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 5124 <nvs_write+0x1b0>
    5040:	f01b fc0c 	bl	2085c <z_impl_k_mutex_lock>
	gc_count = 0;
    5044:	2300      	movs	r3, #0
		if (gc_count == fs->sector_count) {
    5046:	89e2      	ldrh	r2, [r4, #14]
    5048:	4293      	cmp	r3, r2
    504a:	d060      	beq.n	510e <nvs_write+0x19a>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    504c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
    5050:	1878      	adds	r0, r7, r1
    5052:	4282      	cmp	r2, r0
    5054:	d32e      	bcc.n	50b4 <nvs_write+0x140>
	entry.part = 0xff;
    5056:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    5058:	a806      	add	r0, sp, #24
	entry.id = id;
    505a:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    505e:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
    5062:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    5066:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    506a:	f01f fc0b 	bl	24884 <nvs_ate_crc8_update>
	if (!len) {
    506e:	b136      	cbz	r6, 507e <nvs_write+0x10a>
    5070:	4633      	mov	r3, r6
    5072:	4642      	mov	r2, r8
    5074:	68a1      	ldr	r1, [r4, #8]
    5076:	4620      	mov	r0, r4
    5078:	f01f fc99 	bl	249ae <nvs_flash_al_wrt.part.3>
    507c:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    507e:	4631      	mov	r1, r6
    5080:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5082:	f01f fc08 	bl	24896 <nvs_al_size.isra.0>
    5086:	68a3      	ldr	r3, [r4, #8]
    5088:	4418      	add	r0, r3
    508a:	60a0      	str	r0, [r4, #8]
	if (rc) {
    508c:	2d00      	cmp	r5, #0
    508e:	d144      	bne.n	511a <nvs_write+0x1a6>
	rc = nvs_flash_ate_wrt(fs, &entry);
    5090:	a906      	add	r1, sp, #24
    5092:	4620      	mov	r0, r4
    5094:	f01f fcd3 	bl	24a3e <nvs_flash_ate_wrt>
	if (rc) {
    5098:	4605      	mov	r5, r0
    509a:	2800      	cmp	r0, #0
    509c:	d13d      	bne.n	511a <nvs_write+0x1a6>
	rc = len;
    509e:	4632      	mov	r2, r6
    50a0:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    50a2:	4650      	mov	r0, sl
    50a4:	f01b fcae 	bl	20a04 <z_impl_k_mutex_unlock>
	return rc;
    50a8:	9a01      	ldr	r2, [sp, #4]
    50aa:	4615      	mov	r5, r2
    50ac:	e771      	b.n	4f92 <nvs_write+0x1e>
		required_space = data_size + ate_size;
    50ae:	4457      	add	r7, sl
    50b0:	b2bf      	uxth	r7, r7
    50b2:	e7bc      	b.n	502e <nvs_write+0xba>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    50b4:	2108      	movs	r1, #8
    50b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    50b8:	9301      	str	r3, [sp, #4]
    50ba:	f01f fbec 	bl	24896 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    50be:	f64f 71ff 	movw	r1, #65535	; 0xffff
    50c2:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    50c6:	2100      	movs	r1, #0
    50c8:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    50cc:	1811      	adds	r1, r2, r0
    50ce:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    50d2:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    50d4:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    50d8:	440a      	add	r2, r1
    50da:	1a12      	subs	r2, r2, r0
    50dc:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    50de:	a806      	add	r0, sp, #24
    50e0:	f01f fbd0 	bl	24884 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    50e4:	a906      	add	r1, sp, #24
    50e6:	4620      	mov	r0, r4
    50e8:	f01f fca9 	bl	24a3e <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    50ec:	1d21      	adds	r1, r4, #4
    50ee:	89e0      	ldrh	r0, [r4, #14]
    50f0:	f01f fbdb 	bl	248aa <nvs_sector_advance.isra.1>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    50f4:	6862      	ldr	r2, [r4, #4]
    50f6:	ea02 020b 	and.w	r2, r2, fp
    50fa:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
    50fc:	4620      	mov	r0, r4
    50fe:	f7ff fd47 	bl	4b90 <nvs_gc>
		if (rc) {
    5102:	4602      	mov	r2, r0
    5104:	2800      	cmp	r0, #0
    5106:	d1cb      	bne.n	50a0 <nvs_write+0x12c>
		gc_count++;
    5108:	9b01      	ldr	r3, [sp, #4]
    510a:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
    510c:	e79b      	b.n	5046 <nvs_write+0xd2>
			rc = -ENOSPC;
    510e:	f06f 021b 	mvn.w	r2, #27
    5112:	e7c5      	b.n	50a0 <nvs_write+0x12c>
		return -EINVAL;
    5114:	f06f 0515 	mvn.w	r5, #21
    5118:	e73b      	b.n	4f92 <nvs_write+0x1e>
			if (rc) {
    511a:	462a      	mov	r2, r5
    511c:	e7c0      	b.n	50a0 <nvs_write+0x12c>
    511e:	bf00      	nop
    5120:	0002be71 	.word	0x0002be71
    5124:	ffff0000 	.word	0xffff0000

00005128 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    5128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    512c:	461f      	mov	r7, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    512e:	7c03      	ldrb	r3, [r0, #16]
{
    5130:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    5134:	4604      	mov	r4, r0
    5136:	468a      	mov	sl, r1
    5138:	4691      	mov	r9, r2
	if (!fs->ready) {
    513a:	b943      	cbnz	r3, 514e <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
    513c:	4826      	ldr	r0, [pc, #152]	; (51d8 <nvs_read_hist+0xb0>)
    513e:	2145      	movs	r1, #69	; 0x45
    5140:	f01f f87c 	bl	2423c <printk>
		return -EACCES;
    5144:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    5148:	b004      	add	sp, #16
    514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    514e:	2108      	movs	r1, #8
    5150:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5152:	f01f fba0 	bl	24896 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    5156:	89a3      	ldrh	r3, [r4, #12]
    5158:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
    515c:	42b8      	cmp	r0, r7
    515e:	d338      	bcc.n	51d2 <nvs_read_hist+0xaa>
	wlk_addr = fs->ate_wra;
    5160:	6863      	ldr	r3, [r4, #4]
    5162:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    5164:	2500      	movs	r5, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5166:	aa02      	add	r2, sp, #8
    5168:	a901      	add	r1, sp, #4
    516a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    516c:	9e01      	ldr	r6, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    516e:	f01f fbce 	bl	2490e <nvs_prev_ate>
		if (rc) {
    5172:	2800      	cmp	r0, #0
    5174:	d1e8      	bne.n	5148 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    5176:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    517a:	4553      	cmp	r3, sl
    517c:	d105      	bne.n	518a <nvs_read_hist+0x62>
    517e:	a802      	add	r0, sp, #8
    5180:	f01f fb74 	bl	2486c <nvs_ate_crc8_check>
    5184:	b908      	cbnz	r0, 518a <nvs_read_hist+0x62>
			cnt_his++;
    5186:	3501      	adds	r5, #1
    5188:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
    518a:	6862      	ldr	r2, [r4, #4]
    518c:	9b01      	ldr	r3, [sp, #4]
    518e:	429a      	cmp	r2, r3
    5190:	d018      	beq.n	51c4 <nvs_read_hist+0x9c>
	while (cnt_his <= cnt) {
    5192:	4545      	cmp	r5, r8
    5194:	d9e7      	bls.n	5166 <nvs_read_hist+0x3e>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    5196:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    519a:	b1bb      	cbz	r3, 51cc <nvs_read_hist+0xa4>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    519c:	4545      	cmp	r5, r8
    519e:	d315      	bcc.n	51cc <nvs_read_hist+0xa4>
	rd_addr += wlk_ate.offset;
    51a0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    51a4:	0c31      	lsrs	r1, r6, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    51a6:	42bb      	cmp	r3, r7
	rd_addr &= ADDR_SECT_MASK;
    51a8:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    51ac:	bf28      	it	cs
    51ae:	463b      	movcs	r3, r7
    51b0:	4401      	add	r1, r0
    51b2:	464a      	mov	r2, r9
    51b4:	4620      	mov	r0, r4
    51b6:	f01f fafe 	bl	247b6 <nvs_flash_rd>
	if (rc) {
    51ba:	2800      	cmp	r0, #0
    51bc:	d1c4      	bne.n	5148 <nvs_read_hist+0x20>
	return wlk_ate.len;
    51be:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    51c2:	e7c1      	b.n	5148 <nvs_read_hist+0x20>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    51c4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    51c8:	4553      	cmp	r3, sl
    51ca:	d0e4      	beq.n	5196 <nvs_read_hist+0x6e>
		return -ENOENT;
    51cc:	f06f 0001 	mvn.w	r0, #1
    51d0:	e7ba      	b.n	5148 <nvs_read_hist+0x20>
		return -EINVAL;
    51d2:	f06f 0015 	mvn.w	r0, #21
    51d6:	e7b7      	b.n	5148 <nvs_read_hist+0x20>
    51d8:	0002be71 	.word	0x0002be71

000051dc <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    51dc:	4b08      	ldr	r3, [pc, #32]	; (5200 <get_flash_area_from_id+0x24>)
{
    51de:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    51e0:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    51e2:	4b08      	ldr	r3, [pc, #32]	; (5204 <get_flash_area_from_id+0x28>)
    51e4:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    51e6:	2300      	movs	r3, #0
    51e8:	429d      	cmp	r5, r3
    51ea:	dc02      	bgt.n	51f2 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    51ec:	2200      	movs	r2, #0
}
    51ee:	4610      	mov	r0, r2
    51f0:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    51f2:	011c      	lsls	r4, r3, #4
    51f4:	190a      	adds	r2, r1, r4
    51f6:	5d0c      	ldrb	r4, [r1, r4]
    51f8:	4284      	cmp	r4, r0
    51fa:	d0f8      	beq.n	51ee <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
    51fc:	3301      	adds	r3, #1
    51fe:	e7f3      	b.n	51e8 <get_flash_area_from_id+0xc>
    5200:	0002acc8 	.word	0x0002acc8
    5204:	2000050c 	.word	0x2000050c

00005208 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    5208:	4b08      	ldr	r3, [pc, #32]	; (522c <flash_area_open+0x24>)
    520a:	681b      	ldr	r3, [r3, #0]
{
    520c:	b510      	push	{r4, lr}
    520e:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    5210:	b12b      	cbz	r3, 521e <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    5212:	f7ff ffe3 	bl	51dc <get_flash_area_from_id>
	if (area == NULL) {
    5216:	b128      	cbz	r0, 5224 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    5218:	6020      	str	r0, [r4, #0]
	return 0;
    521a:	2000      	movs	r0, #0
}
    521c:	bd10      	pop	{r4, pc}
		return -EACCES;
    521e:	f06f 000c 	mvn.w	r0, #12
    5222:	e7fb      	b.n	521c <flash_area_open+0x14>
		return -ENOENT;
    5224:	f06f 0001 	mvn.w	r0, #1
    5228:	e7f8      	b.n	521c <flash_area_open+0x14>
    522a:	bf00      	nop
    522c:	2000050c 	.word	0x2000050c

00005230 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    5230:	b530      	push	{r4, r5, lr}
    5232:	b089      	sub	sp, #36	; 0x24
    5234:	460c      	mov	r4, r1
    5236:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    5238:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    523a:	f7ff ffcf 	bl	51dc <get_flash_area_from_id>
	if (fa == NULL) {
    523e:	b1b8      	cbz	r0, 5270 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    5240:	6843      	ldr	r3, [r0, #4]
    5242:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    5244:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    5246:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    5248:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    524a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    524e:	2300      	movs	r3, #0
    5250:	9305      	str	r3, [sp, #20]
	cb_data->status = 0;
    5252:	e9cd 2306 	strd	r2, r3, [sp, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
    5256:	f01f fc0e 	bl	24a76 <device_get_binding>
	if (flash_dev == NULL) {
    525a:	b160      	cbz	r0, 5276 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    525c:	aa01      	add	r2, sp, #4
    525e:	4907      	ldr	r1, [pc, #28]	; (527c <flash_area_get_sectors+0x4c>)
    5260:	f024 fcd0 	bl	29c04 <flash_page_foreach>
	if (cb_data->status == 0) {
    5264:	9807      	ldr	r0, [sp, #28]
    5266:	b908      	cbnz	r0, 526c <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    5268:	9b05      	ldr	r3, [sp, #20]
    526a:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    526c:	b009      	add	sp, #36	; 0x24
    526e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    5270:	f06f 0015 	mvn.w	r0, #21
    5274:	e7fa      	b.n	526c <flash_area_get_sectors+0x3c>
		return -ENODEV;
    5276:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    527a:	e7f7      	b.n	526c <flash_area_get_sectors+0x3c>
    527c:	00024a7b 	.word	0x00024a7b

00005280 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    5280:	4b0f      	ldr	r3, [pc, #60]	; (52c0 <settings_save_one+0x40>)
{
    5282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    5286:	681c      	ldr	r4, [r3, #0]
{
    5288:	4606      	mov	r6, r0
    528a:	460f      	mov	r7, r1
    528c:	4690      	mov	r8, r2
	if (!cs) {
    528e:	b1a4      	cbz	r4, 52ba <settings_save_one+0x3a>
	return z_impl_k_mutex_lock(mutex, timeout);
    5290:	f04f 32ff 	mov.w	r2, #4294967295
    5294:	f04f 33ff 	mov.w	r3, #4294967295
    5298:	480a      	ldr	r0, [pc, #40]	; (52c4 <settings_save_one+0x44>)
    529a:	f01b fadf 	bl	2085c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    529e:	6863      	ldr	r3, [r4, #4]
    52a0:	463a      	mov	r2, r7
    52a2:	689d      	ldr	r5, [r3, #8]
    52a4:	4631      	mov	r1, r6
    52a6:	4643      	mov	r3, r8
    52a8:	4620      	mov	r0, r4
    52aa:	47a8      	blx	r5
    52ac:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    52ae:	4805      	ldr	r0, [pc, #20]	; (52c4 <settings_save_one+0x44>)
    52b0:	f01b fba8 	bl	20a04 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    52b4:	4620      	mov	r0, r4
    52b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    52ba:	f06f 0401 	mvn.w	r4, #1
    52be:	e7f9      	b.n	52b4 <settings_save_one+0x34>
    52c0:	20001a6c 	.word	0x20001a6c
    52c4:	20000d80 	.word	0x20000d80

000052c8 <settings_src_register>:
	parent->next = child;
    52c8:	2300      	movs	r3, #0
    52ca:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    52cc:	4b04      	ldr	r3, [pc, #16]	; (52e0 <settings_src_register+0x18>)
    52ce:	685a      	ldr	r2, [r3, #4]
    52d0:	b912      	cbnz	r2, 52d8 <settings_src_register+0x10>
	list->head = node;
    52d2:	e9c3 0000 	strd	r0, r0, [r3]
    52d6:	4770      	bx	lr
	parent->next = child;
    52d8:	6010      	str	r0, [r2, #0]
	list->tail = node;
    52da:	6058      	str	r0, [r3, #4]
}
    52dc:	4770      	bx	lr
    52de:	bf00      	nop
    52e0:	20001a64 	.word	0x20001a64

000052e4 <settings_dst_register>:
	settings_save_dst = cs;
    52e4:	4b01      	ldr	r3, [pc, #4]	; (52ec <settings_dst_register+0x8>)
    52e6:	6018      	str	r0, [r3, #0]
}
    52e8:	4770      	bx	lr
    52ea:	bf00      	nop
    52ec:	20001a6c 	.word	0x20001a6c

000052f0 <settings_load_subtree>:
{
    52f0:	b530      	push	{r4, r5, lr}
    52f2:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    52f4:	2300      	movs	r3, #0
{
    52f6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    52f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    52fc:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    52fe:	f04f 33ff 	mov.w	r3, #4294967295
    5302:	f04f 32ff 	mov.w	r2, #4294967295
    5306:	480b      	ldr	r0, [pc, #44]	; (5334 <settings_load_subtree+0x44>)
    5308:	f01b faa8 	bl	2085c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    530c:	4b0a      	ldr	r3, [pc, #40]	; (5338 <settings_load_subtree+0x48>)
    530e:	681c      	ldr	r4, [r3, #0]
    5310:	b134      	cbz	r4, 5320 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    5312:	6863      	ldr	r3, [r4, #4]
    5314:	4620      	mov	r0, r4
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	a901      	add	r1, sp, #4
    531a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    531c:	6824      	ldr	r4, [r4, #0]
	return node->next;
    531e:	e7f7      	b.n	5310 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    5320:	4628      	mov	r0, r5
    5322:	f000 f8cb 	bl	54bc <settings_commit_subtree>
    5326:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    5328:	4802      	ldr	r0, [pc, #8]	; (5334 <settings_load_subtree+0x44>)
    532a:	f01b fb6b 	bl	20a04 <z_impl_k_mutex_unlock>
}
    532e:	4620      	mov	r0, r4
    5330:	b005      	add	sp, #20
    5332:	bd30      	pop	{r4, r5, pc}
    5334:	20000d80 	.word	0x20000d80
    5338:	20001a64 	.word	0x20001a64

0000533c <settings_load_subtree_direct>:
{
    533c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    533e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    5342:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    5344:	f04f 33ff 	mov.w	r3, #4294967295
    5348:	f04f 32ff 	mov.w	r2, #4294967295
    534c:	4809      	ldr	r0, [pc, #36]	; (5374 <settings_load_subtree_direct+0x38>)
    534e:	f01b fa85 	bl	2085c <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    5352:	4b09      	ldr	r3, [pc, #36]	; (5378 <settings_load_subtree_direct+0x3c>)
    5354:	681c      	ldr	r4, [r3, #0]
    5356:	b134      	cbz	r4, 5366 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    5358:	6863      	ldr	r3, [r4, #4]
    535a:	4620      	mov	r0, r4
    535c:	681b      	ldr	r3, [r3, #0]
    535e:	a901      	add	r1, sp, #4
    5360:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5362:	6824      	ldr	r4, [r4, #0]
	return node->next;
    5364:	e7f7      	b.n	5356 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    5366:	4803      	ldr	r0, [pc, #12]	; (5374 <settings_load_subtree_direct+0x38>)
    5368:	f01b fb4c 	bl	20a04 <z_impl_k_mutex_unlock>
}
    536c:	2000      	movs	r0, #0
    536e:	b004      	add	sp, #16
    5370:	bd10      	pop	{r4, pc}
    5372:	bf00      	nop
    5374:	20000d80 	.word	0x20000d80
    5378:	20001a64 	.word	0x20001a64

0000537c <settings_store_init>:
	list->head = NULL;
    537c:	4b02      	ldr	r3, [pc, #8]	; (5388 <settings_store_init+0xc>)
    537e:	2200      	movs	r2, #0
	list->tail = NULL;
    5380:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    5384:	4770      	bx	lr
    5386:	bf00      	nop
    5388:	20001a64 	.word	0x20001a64

0000538c <settings_init>:
	list->head = NULL;
    538c:	4b02      	ldr	r3, [pc, #8]	; (5398 <settings_init+0xc>)
    538e:	2200      	movs	r2, #0
	list->tail = NULL;
    5390:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    5394:	f7ff bff2 	b.w	537c <settings_store_init>
    5398:	20001a70 	.word	0x20001a70

0000539c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    539c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    53a0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    53a2:	460e      	mov	r6, r1
    53a4:	b109      	cbz	r1, 53aa <settings_parse_and_lookup+0xe>
		*next = NULL;
    53a6:	2300      	movs	r3, #0
    53a8:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    53aa:	f8df 8098 	ldr.w	r8, [pc, #152]	; 5444 <settings_parse_and_lookup+0xa8>
    53ae:	4c22      	ldr	r4, [pc, #136]	; (5438 <settings_parse_and_lookup+0x9c>)
    53b0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 5448 <settings_parse_and_lookup+0xac>
    53b4:	2500      	movs	r5, #0
    53b6:	46c2      	mov	sl, r8
    53b8:	4544      	cmp	r4, r8
    53ba:	d908      	bls.n	53ce <settings_parse_and_lookup+0x32>
    53bc:	4649      	mov	r1, r9
    53be:	481f      	ldr	r0, [pc, #124]	; (543c <settings_parse_and_lookup+0xa0>)
    53c0:	2294      	movs	r2, #148	; 0x94
    53c2:	f01e ff3b 	bl	2423c <printk>
    53c6:	2194      	movs	r1, #148	; 0x94
    53c8:	4648      	mov	r0, r9
    53ca:	f01f f9e9 	bl	247a0 <assert_post_action>
    53ce:	4554      	cmp	r4, sl
    53d0:	d308      	bcc.n	53e4 <settings_parse_and_lookup+0x48>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    53d2:	4b1b      	ldr	r3, [pc, #108]	; (5440 <settings_parse_and_lookup+0xa4>)
    53d4:	681c      	ldr	r4, [r3, #0]
    53d6:	b10c      	cbz	r4, 53dc <settings_parse_and_lookup+0x40>
    53d8:	3c14      	subs	r4, #20
    53da:	b9c4      	cbnz	r4, 540e <settings_parse_and_lookup+0x72>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    53dc:	4628      	mov	r0, r5
    53de:	b002      	add	sp, #8
    53e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    53e4:	aa01      	add	r2, sp, #4
    53e6:	6821      	ldr	r1, [r4, #0]
    53e8:	4638      	mov	r0, r7
    53ea:	f01f fb6b 	bl	24ac4 <settings_name_steq>
    53ee:	b160      	cbz	r0, 540a <settings_parse_and_lookup+0x6e>
		if (!bestmatch) {
    53f0:	b925      	cbnz	r5, 53fc <settings_parse_and_lookup+0x60>
			if (next) {
    53f2:	b10e      	cbz	r6, 53f8 <settings_parse_and_lookup+0x5c>
				*next = tmpnext;
    53f4:	9b01      	ldr	r3, [sp, #4]
    53f6:	6033      	str	r3, [r6, #0]
    53f8:	4625      	mov	r5, r4
    53fa:	e006      	b.n	540a <settings_parse_and_lookup+0x6e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    53fc:	2200      	movs	r2, #0
    53fe:	6829      	ldr	r1, [r5, #0]
    5400:	6820      	ldr	r0, [r4, #0]
    5402:	f01f fb5f 	bl	24ac4 <settings_name_steq>
    5406:	2800      	cmp	r0, #0
    5408:	d1f3      	bne.n	53f2 <settings_parse_and_lookup+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    540a:	3414      	adds	r4, #20
    540c:	e7d4      	b.n	53b8 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    540e:	aa01      	add	r2, sp, #4
    5410:	6821      	ldr	r1, [r4, #0]
    5412:	4638      	mov	r0, r7
    5414:	f01f fb56 	bl	24ac4 <settings_name_steq>
    5418:	b160      	cbz	r0, 5434 <settings_parse_and_lookup+0x98>
		if (!bestmatch) {
    541a:	b925      	cbnz	r5, 5426 <settings_parse_and_lookup+0x8a>
			if (next) {
    541c:	b10e      	cbz	r6, 5422 <settings_parse_and_lookup+0x86>
				*next = tmpnext;
    541e:	9b01      	ldr	r3, [sp, #4]
    5420:	6033      	str	r3, [r6, #0]
    5422:	4625      	mov	r5, r4
    5424:	e006      	b.n	5434 <settings_parse_and_lookup+0x98>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    5426:	2200      	movs	r2, #0
    5428:	6829      	ldr	r1, [r5, #0]
    542a:	6820      	ldr	r0, [r4, #0]
    542c:	f01f fb4a 	bl	24ac4 <settings_name_steq>
    5430:	2800      	cmp	r0, #0
    5432:	d1f3      	bne.n	541c <settings_parse_and_lookup+0x80>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5434:	6964      	ldr	r4, [r4, #20]
    5436:	e7ce      	b.n	53d6 <settings_parse_and_lookup+0x3a>
    5438:	0002a768 	.word	0x0002a768
    543c:	0002bced 	.word	0x0002bced
    5440:	20001a70 	.word	0x20001a70
    5444:	0002a8bc 	.word	0x0002a8bc
    5448:	0002bfdf 	.word	0x0002bfdf

0000544c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    544c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5450:	b085      	sub	sp, #20
    5452:	4605      	mov	r5, r0
    5454:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    5456:	9003      	str	r0, [sp, #12]
{
    5458:	460e      	mov	r6, r1
    545a:	4617      	mov	r7, r2
    545c:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
    545e:	b1b4      	cbz	r4, 548e <settings_call_set_handler+0x42>
    5460:	6821      	ldr	r1, [r4, #0]
    5462:	b179      	cbz	r1, 5484 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    5464:	aa03      	add	r2, sp, #12
    5466:	f01f fb2d 	bl	24ac4 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    546a:	b958      	cbnz	r0, 5484 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    546c:	2000      	movs	r0, #0
    546e:	e006      	b.n	547e <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    5470:	68a3      	ldr	r3, [r4, #8]
    5472:	9300      	str	r3, [sp, #0]
    5474:	463a      	mov	r2, r7
    5476:	4643      	mov	r3, r8
    5478:	4631      	mov	r1, r6
    547a:	9803      	ldr	r0, [sp, #12]
    547c:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    547e:	b005      	add	sp, #20
    5480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    5484:	f8d4 9004 	ldr.w	r9, [r4, #4]
    5488:	f1b9 0f00 	cmp.w	r9, #0
    548c:	d1f0      	bne.n	5470 <settings_call_set_handler+0x24>
		ch = settings_parse_and_lookup(name, &name_key);
    548e:	a903      	add	r1, sp, #12
    5490:	4628      	mov	r0, r5
    5492:	f7ff ff83 	bl	539c <settings_parse_and_lookup>
		if (!ch) {
    5496:	2800      	cmp	r0, #0
    5498:	d0e8      	beq.n	546c <settings_call_set_handler+0x20>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    549a:	6884      	ldr	r4, [r0, #8]
    549c:	9803      	ldr	r0, [sp, #12]
    549e:	4643      	mov	r3, r8
    54a0:	463a      	mov	r2, r7
    54a2:	4631      	mov	r1, r6
    54a4:	47a0      	blx	r4
		if (rc != 0) {
    54a6:	4603      	mov	r3, r0
    54a8:	2800      	cmp	r0, #0
    54aa:	d0df      	beq.n	546c <settings_call_set_handler+0x20>
			LOG_ERR("set-value failure. key: %s error(%d)",
    54ac:	462a      	mov	r2, r5
    54ae:	2145      	movs	r1, #69	; 0x45
    54b0:	4801      	ldr	r0, [pc, #4]	; (54b8 <settings_call_set_handler+0x6c>)
    54b2:	f01e fec3 	bl	2423c <printk>
    54b6:	e7d9      	b.n	546c <settings_call_set_handler+0x20>
    54b8:	0002bfb5 	.word	0x0002bfb5

000054bc <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    54bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    54c0:	4f1f      	ldr	r7, [pc, #124]	; (5540 <settings_commit_subtree+0x84>)
    54c2:	4c20      	ldr	r4, [pc, #128]	; (5544 <settings_commit_subtree+0x88>)
    54c4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 5550 <settings_commit_subtree+0x94>
{
    54c8:	4606      	mov	r6, r0
	rc = 0;
    54ca:	2500      	movs	r5, #0
    54cc:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    54ce:	42bc      	cmp	r4, r7
    54d0:	d908      	bls.n	54e4 <settings_commit_subtree+0x28>
    54d2:	4641      	mov	r1, r8
    54d4:	481c      	ldr	r0, [pc, #112]	; (5548 <settings_commit_subtree+0x8c>)
    54d6:	22f4      	movs	r2, #244	; 0xf4
    54d8:	f01e feb0 	bl	2423c <printk>
    54dc:	21f4      	movs	r1, #244	; 0xf4
    54de:	4640      	mov	r0, r8
    54e0:	f01f f95e 	bl	247a0 <assert_post_action>
    54e4:	454c      	cmp	r4, r9
    54e6:	d307      	bcc.n	54f8 <settings_commit_subtree+0x3c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    54e8:	4b18      	ldr	r3, [pc, #96]	; (554c <settings_commit_subtree+0x90>)
    54ea:	681c      	ldr	r4, [r3, #0]
    54ec:	b10c      	cbz	r4, 54f2 <settings_commit_subtree+0x36>
    54ee:	3c14      	subs	r4, #20
    54f0:	b9a4      	cbnz	r4, 551c <settings_commit_subtree+0x60>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    54f2:	4628      	mov	r0, r5
    54f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    54f8:	b91e      	cbnz	r6, 5502 <settings_commit_subtree+0x46>
		if (ch->h_commit) {
    54fa:	68e3      	ldr	r3, [r4, #12]
    54fc:	b94b      	cbnz	r3, 5512 <settings_commit_subtree+0x56>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    54fe:	3414      	adds	r4, #20
    5500:	e7e5      	b.n	54ce <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5502:	2200      	movs	r2, #0
    5504:	4631      	mov	r1, r6
    5506:	6820      	ldr	r0, [r4, #0]
    5508:	f01f fadc 	bl	24ac4 <settings_name_steq>
    550c:	2800      	cmp	r0, #0
    550e:	d1f4      	bne.n	54fa <settings_commit_subtree+0x3e>
    5510:	e7f5      	b.n	54fe <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
    5512:	4798      	blx	r3
				rc = rc2;
    5514:	2d00      	cmp	r5, #0
    5516:	bf08      	it	eq
    5518:	4605      	moveq	r5, r0
    551a:	e7f0      	b.n	54fe <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    551c:	b91e      	cbnz	r6, 5526 <settings_commit_subtree+0x6a>
		if (ch->h_commit) {
    551e:	68e3      	ldr	r3, [r4, #12]
    5520:	b94b      	cbnz	r3, 5536 <settings_commit_subtree+0x7a>
    5522:	6964      	ldr	r4, [r4, #20]
    5524:	e7e2      	b.n	54ec <settings_commit_subtree+0x30>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5526:	2200      	movs	r2, #0
    5528:	4631      	mov	r1, r6
    552a:	6820      	ldr	r0, [r4, #0]
    552c:	f01f faca 	bl	24ac4 <settings_name_steq>
    5530:	2800      	cmp	r0, #0
    5532:	d1f4      	bne.n	551e <settings_commit_subtree+0x62>
    5534:	e7f5      	b.n	5522 <settings_commit_subtree+0x66>
			rc2 = ch->h_commit();
    5536:	4798      	blx	r3
				rc = rc2;
    5538:	2d00      	cmp	r5, #0
    553a:	bf08      	it	eq
    553c:	4605      	moveq	r5, r0
    553e:	e7f0      	b.n	5522 <settings_commit_subtree+0x66>
    5540:	0002a8bc 	.word	0x0002a8bc
    5544:	0002a768 	.word	0x0002a768
    5548:	0002bced 	.word	0x0002bced
    554c:	20001a70 	.word	0x20001a70
    5550:	0002bfdf 	.word	0x0002bfdf

00005554 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    5554:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    5556:	4c06      	ldr	r4, [pc, #24]	; (5570 <settings_subsys_init+0x1c>)
    5558:	7823      	ldrb	r3, [r4, #0]
    555a:	b93b      	cbnz	r3, 556c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    555c:	f7ff ff16 	bl	538c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    5560:	f000 f864 	bl	562c <settings_backend_init>

	if (!err) {
    5564:	b908      	cbnz	r0, 556a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    5566:	2301      	movs	r3, #1
    5568:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    556a:	bd10      	pop	{r4, pc}
		return 0;
    556c:	2000      	movs	r0, #0
    556e:	e7fc      	b.n	556a <settings_subsys_init+0x16>
    5570:	20003543 	.word	0x20003543

00005574 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    5574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    5578:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    557a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5628 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    557e:	3401      	adds	r4, #1
{
    5580:	b098      	sub	sp, #96	; 0x60
    5582:	4680      	mov	r8, r0
    5584:	468a      	mov	sl, r1
	name_id = cf->last_name_id + 1;
    5586:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    5588:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    558c:	1e65      	subs	r5, r4, #1
    558e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    5590:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    5594:	d045      	beq.n	5622 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    5596:	234a      	movs	r3, #74	; 0x4a
    5598:	aa05      	add	r2, sp, #20
    559a:	4629      	mov	r1, r5
    559c:	4630      	mov	r0, r6
    559e:	f01f fa63 	bl	24a68 <nvs_read>
    55a2:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    55a6:	343f      	adds	r4, #63	; 0x3f
    55a8:	b2a4      	uxth	r4, r4
    55aa:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    55ac:	4621      	mov	r1, r4
    55ae:	2301      	movs	r3, #1
    55b0:	f10d 020b 	add.w	r2, sp, #11
    55b4:	4630      	mov	r0, r6
    55b6:	f01f fa57 	bl	24a68 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    55ba:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    55bc:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    55be:	dc03      	bgt.n	55c8 <settings_nvs_load+0x54>
    55c0:	2800      	cmp	r0, #0
    55c2:	dc03      	bgt.n	55cc <settings_nvs_load+0x58>
{
    55c4:	462c      	mov	r4, r5
    55c6:	e7e1      	b.n	558c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    55c8:	2800      	cmp	r0, #0
    55ca:	dc16      	bgt.n	55fa <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    55cc:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    55d0:	42ab      	cmp	r3, r5
    55d2:	d109      	bne.n	55e8 <settings_nvs_load+0x74>
				cf->last_name_id--;
    55d4:	4642      	mov	r2, r8
    55d6:	1e6b      	subs	r3, r5, #1
    55d8:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    55dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    55e0:	2302      	movs	r3, #2
    55e2:	4630      	mov	r0, r6
    55e4:	f7ff fcc6 	bl	4f74 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    55e8:	4629      	mov	r1, r5
    55ea:	4630      	mov	r0, r6
    55ec:	f01f fa38 	bl	24a60 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    55f0:	4621      	mov	r1, r4
    55f2:	4630      	mov	r0, r6
    55f4:	f01f fa34 	bl	24a60 <nvs_delete>
			continue;
    55f8:	e7e4      	b.n	55c4 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    55fa:	ab18      	add	r3, sp, #96	; 0x60
    55fc:	441f      	add	r7, r3
    55fe:	2300      	movs	r3, #0
    5600:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    5604:	464a      	mov	r2, r9
    5606:	f8cd a000 	str.w	sl, [sp]
    560a:	ab03      	add	r3, sp, #12
    560c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    560e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    5610:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    5614:	f7ff ff1a 	bl	544c <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    5618:	2800      	cmp	r0, #0
    561a:	d0d3      	beq.n	55c4 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    561c:	b018      	add	sp, #96	; 0x60
    561e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5622:	2000      	movs	r0, #0
	return ret;
    5624:	e7fa      	b.n	561c <settings_nvs_load+0xa8>
    5626:	bf00      	nop
    5628:	00024b31 	.word	0x00024b31

0000562c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    562c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    562e:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    5630:	4669      	mov	r1, sp
    5632:	2003      	movs	r0, #3
	uint32_t sector_cnt = 1;
    5634:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    5636:	f7ff fde7 	bl	5208 <flash_area_open>
	if (rc) {
    563a:	4604      	mov	r4, r0
    563c:	2800      	cmp	r0, #0
    563e:	d137      	bne.n	56b0 <settings_backend_init+0x84>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    5640:	aa02      	add	r2, sp, #8
    5642:	a901      	add	r1, sp, #4
    5644:	2003      	movs	r0, #3
    5646:	f7ff fdf3 	bl	5230 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    564a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    564e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    5650:	d02e      	beq.n	56b0 <settings_backend_init+0x84>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    5652:	b140      	cbz	r0, 5666 <settings_backend_init+0x3a>
    5654:	f110 040c 	adds.w	r4, r0, #12
    5658:	d005      	beq.n	5666 <settings_backend_init+0x3a>
		k_panic();
    565a:	4040      	eors	r0, r0
    565c:	f380 8811 	msr	BASEPRI, r0
    5660:	f04f 0004 	mov.w	r0, #4
    5664:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    5666:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    5668:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    566c:	d223      	bcs.n	56b6 <settings_backend_init+0x8a>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    566e:	9a00      	ldr	r2, [sp, #0]
    5670:	2300      	movs	r3, #0
    5672:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    5674:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    5676:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    5678:	4285      	cmp	r5, r0
    567a:	b29c      	uxth	r4, r3
    567c:	d303      	bcc.n	5686 <settings_backend_init+0x5a>
			break;
		}
		cnt++;
    567e:	3301      	adds	r3, #1
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    5680:	2b08      	cmp	r3, #8
    5682:	d1f8      	bne.n	5676 <settings_backend_init+0x4a>
    5684:	461c      	mov	r4, r3
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    5686:	4d0d      	ldr	r5, [pc, #52]	; (56bc <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    5688:	6853      	ldr	r3, [r2, #4]
    568a:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    568c:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    568e:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    5690:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    5692:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    5694:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    5696:	f01f fae2 	bl	24c5e <settings_nvs_backend_init>
	if (rc) {
    569a:	4604      	mov	r4, r0
    569c:	b940      	cbnz	r0, 56b0 <settings_backend_init+0x84>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    569e:	4e08      	ldr	r6, [pc, #32]	; (56c0 <settings_backend_init+0x94>)
    56a0:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    56a2:	4628      	mov	r0, r5
    56a4:	f7ff fe10 	bl	52c8 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    56a8:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    56aa:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    56ac:	f7ff fe1a 	bl	52e4 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    56b0:	4620      	mov	r0, r4
    56b2:	b004      	add	sp, #16
    56b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    56b6:	f06f 0424 	mvn.w	r4, #36	; 0x24
    56ba:	e7f9      	b.n	56b0 <settings_backend_init+0x84>
    56bc:	20001a78 	.word	0x20001a78
    56c0:	20000510 	.word	0x20000510

000056c4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    56c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56c6:	4606      	mov	r6, r0
	__asm__ volatile(
    56c8:	f04f 0320 	mov.w	r3, #32
    56cc:	f3ef 8511 	mrs	r5, BASEPRI
    56d0:	f383 8811 	msr	BASEPRI, r3
    56d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56d8:	4818      	ldr	r0, [pc, #96]	; (573c <pm_state_notify+0x78>)
    56da:	f01c fdcd 	bl	22278 <z_spin_lock_valid>
    56de:	b940      	cbnz	r0, 56f2 <pm_state_notify+0x2e>
    56e0:	4917      	ldr	r1, [pc, #92]	; (5740 <pm_state_notify+0x7c>)
    56e2:	4818      	ldr	r0, [pc, #96]	; (5744 <pm_state_notify+0x80>)
    56e4:	227c      	movs	r2, #124	; 0x7c
    56e6:	f01e fda9 	bl	2423c <printk>
    56ea:	217c      	movs	r1, #124	; 0x7c
    56ec:	4814      	ldr	r0, [pc, #80]	; (5740 <pm_state_notify+0x7c>)
    56ee:	f01f f857 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
    56f2:	4812      	ldr	r0, [pc, #72]	; (573c <pm_state_notify+0x78>)
    56f4:	f01c fdde 	bl	222b4 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum power_states state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    56f8:	4b13      	ldr	r3, [pc, #76]	; (5748 <pm_state_notify+0x84>)
    56fa:	681c      	ldr	r4, [r3, #0]
    56fc:	b164      	cbz	r4, 5718 <pm_state_notify+0x54>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(pm_state);
    56fe:	4f13      	ldr	r7, [pc, #76]	; (574c <pm_state_notify+0x88>)
			callback = notifier->state_exit;
    5700:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    5704:	2e00      	cmp	r6, #0
    5706:	bf08      	it	eq
    5708:	4613      	moveq	r3, r2
		if (callback) {
    570a:	b113      	cbz	r3, 5712 <pm_state_notify+0x4e>
			callback(pm_state);
    570c:	f997 0000 	ldrsb.w	r0, [r7]
    5710:	4798      	blx	r3
    5712:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5714:	2c00      	cmp	r4, #0
    5716:	d1f3      	bne.n	5700 <pm_state_notify+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5718:	4808      	ldr	r0, [pc, #32]	; (573c <pm_state_notify+0x78>)
    571a:	f01c fdbb 	bl	22294 <z_spin_unlock_valid>
    571e:	b940      	cbnz	r0, 5732 <pm_state_notify+0x6e>
    5720:	4907      	ldr	r1, [pc, #28]	; (5740 <pm_state_notify+0x7c>)
    5722:	4808      	ldr	r0, [pc, #32]	; (5744 <pm_state_notify+0x80>)
    5724:	22a7      	movs	r2, #167	; 0xa7
    5726:	f01e fd89 	bl	2423c <printk>
    572a:	21a7      	movs	r1, #167	; 0xa7
    572c:	4804      	ldr	r0, [pc, #16]	; (5740 <pm_state_notify+0x7c>)
    572e:	f01f f837 	bl	247a0 <assert_post_action>
	__asm__ volatile(
    5732:	f385 8811 	msr	BASEPRI, r5
    5736:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    573c:	20001ab8 	.word	0x20001ab8
    5740:	0002be01 	.word	0x0002be01
    5744:	0002bced 	.word	0x0002bced
    5748:	20001abc 	.word	0x20001abc
    574c:	20003544 	.word	0x20003544

00005750 <pm_system_suspend>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
    5750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
    5752:	4f14      	ldr	r7, [pc, #80]	; (57a4 <pm_system_suspend+0x54>)
    5754:	f997 4000 	ldrsb.w	r4, [r7]
		   pm_policy_next_state(ticks) : forced_pm_state;
    5758:	1ca2      	adds	r2, r4, #2
    575a:	d102      	bne.n	5762 <pm_system_suspend+0x12>
    575c:	f01f fa9b 	bl	24c96 <pm_policy_next_state>
    5760:	4604      	mov	r4, r0
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
    5762:	4d11      	ldr	r5, [pc, #68]	; (57a8 <pm_system_suspend+0x58>)
	if (pm_state == POWER_STATE_ACTIVE) {
    5764:	1c63      	adds	r3, r4, #1
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
    5766:	702c      	strb	r4, [r5, #0]
	if (pm_state == POWER_STATE_ACTIVE) {
    5768:	d01a      	beq.n	57a0 <pm_system_suspend+0x50>
	post_ops_done = 0;
    576a:	4e10      	ldr	r6, [pc, #64]	; (57ac <pm_system_suspend+0x5c>)
    576c:	2300      	movs	r3, #0
	pm_state_notify(true);
    576e:	2001      	movs	r0, #1
	post_ops_done = 0;
    5770:	6033      	str	r3, [r6, #0]
	pm_state_notify(true);
    5772:	f7ff ffa7 	bl	56c4 <pm_state_notify>
	if (deep_sleep) {
    5776:	b90c      	cbnz	r4, 577c <pm_system_suspend+0x2c>
 * pm_system_suspend to disable the corresponding pm_system_resume notification.
 *
 */
static inline void pm_idle_exit_notification_disable(void)
{
	pm_idle_exit_notify = 0U;
    5778:	4b0d      	ldr	r3, [pc, #52]	; (57b0 <pm_system_suspend+0x60>)
    577a:	701c      	strb	r4, [r3, #0]
	pm_power_state_set(pm_state);
    577c:	f995 0000 	ldrsb.w	r0, [r5]
    5780:	f020 fd41 	bl	26206 <pm_power_state_set>
	if (!post_ops_done) {
    5784:	6830      	ldr	r0, [r6, #0]
    5786:	b948      	cbnz	r0, 579c <pm_system_suspend+0x4c>
		post_ops_done = 1;
    5788:	2301      	movs	r3, #1
    578a:	6033      	str	r3, [r6, #0]
		forced_pm_state = POWER_STATE_AUTO;
    578c:	23fe      	movs	r3, #254	; 0xfe
    578e:	703b      	strb	r3, [r7, #0]
		pm_state_notify(false);
    5790:	f7ff ff98 	bl	56c4 <pm_state_notify>
		pm_power_state_exit_post_ops(pm_state);
    5794:	f995 0000 	ldrsb.w	r0, [r5]
    5798:	f020 fd40 	bl	2621c <pm_power_state_exit_post_ops>
	return pm_state;
    579c:	f995 4000 	ldrsb.w	r4, [r5]
	return pm_policy_mgr(ticks);
}
    57a0:	4620      	mov	r0, r4
    57a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57a4:	20000c26 	.word	0x20000c26
    57a8:	20003544 	.word	0x20003544
    57ac:	20000520 	.word	0x20000520
    57b0:	200036f3 	.word	0x200036f3

000057b4 <pm_ctrl_is_state_enabled>:
	/* Make compiler happy when assertions are disabled. */
	(void)(v);
}

bool pm_ctrl_is_state_enabled(enum power_states state)
{
    57b4:	b510      	push	{r4, lr}
	__ASSERT(state < POWER_STATE_MAX, "Invalid power state!");
    57b6:	1e04      	subs	r4, r0, #0
    57b8:	dd08      	ble.n	57cc <pm_ctrl_is_state_enabled+0x18>
    57ba:	490a      	ldr	r1, [pc, #40]	; (57e4 <pm_ctrl_is_state_enabled+0x30>)
    57bc:	480a      	ldr	r0, [pc, #40]	; (57e8 <pm_ctrl_is_state_enabled+0x34>)
    57be:	222d      	movs	r2, #45	; 0x2d
    57c0:	f01e fd3c 	bl	2423c <printk>
    57c4:	212d      	movs	r1, #45	; 0x2d
    57c6:	4807      	ldr	r0, [pc, #28]	; (57e4 <pm_ctrl_is_state_enabled+0x30>)
    57c8:	f01e ffea 	bl	247a0 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    57cc:	f3bf 8f5b 	dmb	ish
    57d0:	4b06      	ldr	r3, [pc, #24]	; (57ec <pm_ctrl_is_state_enabled+0x38>)
    57d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    57d6:	f3bf 8f5b 	dmb	ish

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    57da:	fab0 f080 	clz	r0, r0
    57de:	0940      	lsrs	r0, r0, #5
    57e0:	bd10      	pop	{r4, pc}
    57e2:	bf00      	nop
    57e4:	0002c017 	.word	0x0002c017
    57e8:	0002bced 	.word	0x0002bced
    57ec:	20001ac4 	.word	0x20001ac4

000057f0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    57f0:	b508      	push	{r3, lr}
    57f2:	4604      	mov	r4, r0
	__asm__ volatile(
    57f4:	f04f 0220 	mov.w	r2, #32
    57f8:	f3ef 8311 	mrs	r3, BASEPRI
    57fc:	f382 8811 	msr	BASEPRI, r2
    5800:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    5804:	f01f fae3 	bl	24dce <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    5808:	4620      	mov	r0, r4
    580a:	f001 fb11 	bl	6e30 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    580e:	4803      	ldr	r0, [pc, #12]	; (581c <sys_reboot+0x2c>)
    5810:	f01e fd14 	bl	2423c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    5814:	f000 feec 	bl	65f0 <arch_cpu_idle>
    5818:	e7fc      	b.n	5814 <sys_reboot+0x24>
    581a:	bf00      	nop
    581c:	0002c041 	.word	0x0002c041

00005820 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5824:	4c0e      	ldr	r4, [pc, #56]	; (5860 <onoff_start+0x40>)
    5826:	1b05      	subs	r5, r0, r4
    5828:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    582c:	250c      	movs	r5, #12
    582e:	435d      	muls	r5, r3
{
    5830:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    5832:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    5836:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    5838:	4420      	add	r0, r4
    583a:	2140      	movs	r1, #64	; 0x40
    583c:	f01f fa39 	bl	24cb2 <set_starting_state>
	if (err < 0) {
    5840:	1e01      	subs	r1, r0, #0
    5842:	db08      	blt.n	5856 <onoff_start+0x36>
	subdata->cb = cb;
    5844:	4b07      	ldr	r3, [pc, #28]	; (5864 <onoff_start+0x44>)
    5846:	442c      	add	r4, r5
	subdata->user_data = user_data;
    5848:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    584c:	4b06      	ldr	r3, [pc, #24]	; (5868 <onoff_start+0x48>)
    584e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    5850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    5854:	4718      	bx	r3
		notify(mgr, err);
    5856:	4638      	mov	r0, r7
    5858:	4633      	mov	r3, r6
}
    585a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    585e:	4718      	bx	r3
    5860:	20001ad8 	.word	0x20001ad8
    5864:	00024d15 	.word	0x00024d15
    5868:	0002ace0 	.word	0x0002ace0

0000586c <get_status>:
{
    586c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    586e:	b2cc      	uxtb	r4, r1
    5870:	2c01      	cmp	r4, #1
{
    5872:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    5874:	d908      	bls.n	5888 <get_status+0x1c>
    5876:	4908      	ldr	r1, [pc, #32]	; (5898 <get_status+0x2c>)
    5878:	4808      	ldr	r0, [pc, #32]	; (589c <get_status+0x30>)
    587a:	227e      	movs	r2, #126	; 0x7e
    587c:	f01e fcde 	bl	2423c <printk>
    5880:	217e      	movs	r1, #126	; 0x7e
    5882:	4805      	ldr	r0, [pc, #20]	; (5898 <get_status+0x2c>)
    5884:	f01e ff8c 	bl	247a0 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5888:	68eb      	ldr	r3, [r5, #12]
    588a:	210c      	movs	r1, #12
    588c:	fb04 3101 	mla	r1, r4, r1, r3
    5890:	6c88      	ldr	r0, [r1, #72]	; 0x48
}
    5892:	f000 0007 	and.w	r0, r0, #7
    5896:	bd38      	pop	{r3, r4, r5, pc}
    5898:	0002c06a 	.word	0x0002c06a
    589c:	0002bced 	.word	0x0002bced

000058a0 <stop>:
{
    58a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58a2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    58a4:	2c01      	cmp	r4, #1
{
    58a6:	4605      	mov	r5, r0
    58a8:	4617      	mov	r7, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    58aa:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    58ac:	d90a      	bls.n	58c4 <stop+0x24>
    58ae:	4918      	ldr	r1, [pc, #96]	; (5910 <stop+0x70>)
    58b0:	4818      	ldr	r0, [pc, #96]	; (5914 <stop+0x74>)
    58b2:	f240 1253 	movw	r2, #339	; 0x153
    58b6:	f01e fcc1 	bl	2423c <printk>
    58ba:	f240 1153 	movw	r1, #339	; 0x153
    58be:	4814      	ldr	r0, [pc, #80]	; (5910 <stop+0x70>)
    58c0:	f01e ff6e 	bl	247a0 <assert_post_action>
    58c4:	f04f 0320 	mov.w	r3, #32
    58c8:	f3ef 8111 	mrs	r1, BASEPRI
    58cc:	f383 8811 	msr	BASEPRI, r3
    58d0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    58d4:	230c      	movs	r3, #12
    58d6:	fb03 6204 	mla	r2, r3, r4, r6
    58da:	6c92      	ldr	r2, [r2, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    58dc:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    58e0:	d001      	beq.n	58e6 <stop+0x46>
    58e2:	4297      	cmp	r7, r2
    58e4:	d111      	bne.n	590a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    58e6:	fb03 6304 	mla	r3, r3, r4, r6
    58ea:	2201      	movs	r2, #1
    58ec:	649a      	str	r2, [r3, #72]	; 0x48
	int err = 0;
    58ee:	2000      	movs	r0, #0
	__asm__ volatile(
    58f0:	f381 8811 	msr	BASEPRI, r1
    58f4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    58f8:	b930      	cbnz	r0, 5908 <stop+0x68>
	get_sub_config(dev, type)->stop();
    58fa:	686b      	ldr	r3, [r5, #4]
    58fc:	220c      	movs	r2, #12
    58fe:	fb02 3404 	mla	r4, r2, r4, r3
    5902:	6863      	ldr	r3, [r4, #4]
    5904:	4798      	blx	r3
	return 0;
    5906:	2000      	movs	r0, #0
}
    5908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    590a:	f04f 30ff 	mov.w	r0, #4294967295
    590e:	e7ef      	b.n	58f0 <stop+0x50>
    5910:	0002c06a 	.word	0x0002c06a
    5914:	0002bced 	.word	0x0002bced

00005918 <onoff_stop>:
{
    5918:	b570      	push	{r4, r5, r6, lr}
    591a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    591c:	4906      	ldr	r1, [pc, #24]	; (5938 <onoff_stop+0x20>)
    591e:	1a41      	subs	r1, r0, r1
{
    5920:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5922:	1149      	asrs	r1, r1, #5
    5924:	2240      	movs	r2, #64	; 0x40
    5926:	4805      	ldr	r0, [pc, #20]	; (593c <onoff_stop+0x24>)
    5928:	f7ff ffba 	bl	58a0 <stop>
	notify(mgr, res);
    592c:	462b      	mov	r3, r5
    592e:	4601      	mov	r1, r0
    5930:	4620      	mov	r0, r4
}
    5932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5936:	4718      	bx	r3
    5938:	20001ad8 	.word	0x20001ad8
    593c:	20000c40 	.word	0x20000c40

00005940 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5940:	2200      	movs	r2, #0
{
    5942:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5944:	2101      	movs	r1, #1
{
    5946:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5948:	4610      	mov	r0, r2
    594a:	f000 fdc5 	bl	64d8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    594e:	2000      	movs	r0, #0
    5950:	f000 fd90 	bl	6474 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5954:	480f      	ldr	r0, [pc, #60]	; (5994 <clk_init+0x54>)
    5956:	f019 ff25 	bl	1f7a4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    595a:	4b0f      	ldr	r3, [pc, #60]	; (5998 <clk_init+0x58>)
    595c:	4298      	cmp	r0, r3
    595e:	d115      	bne.n	598c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5960:	f019 ff40 	bl	1f7e4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5964:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5966:	490d      	ldr	r1, [pc, #52]	; (599c <clk_init+0x5c>)
    5968:	4630      	mov	r0, r6
    596a:	f01e fcc2 	bl	242f2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    596e:	2800      	cmp	r0, #0
    5970:	db0b      	blt.n	598a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5972:	2501      	movs	r5, #1
    5974:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    5976:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5978:	4908      	ldr	r1, [pc, #32]	; (599c <clk_init+0x5c>)
    597a:	f104 0020 	add.w	r0, r4, #32
    597e:	f01e fcb8 	bl	242f2 <onoff_manager_init>
		if (err < 0) {
    5982:	2800      	cmp	r0, #0
    5984:	db01      	blt.n	598a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5986:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    5988:	2000      	movs	r0, #0
}
    598a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    598c:	f06f 0004 	mvn.w	r0, #4
    5990:	e7fb      	b.n	598a <clk_init+0x4a>
    5992:	bf00      	nop
    5994:	000059d5 	.word	0x000059d5
    5998:	0bad0000 	.word	0x0bad0000
    599c:	0002acf8 	.word	0x0002acf8

000059a0 <clkstarted_handle.constprop.13>:
static void clkstarted_handle(const struct device *dev,
    59a0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    59a2:	230c      	movs	r3, #12
    59a4:	4809      	ldr	r0, [pc, #36]	; (59cc <clkstarted_handle.constprop.13+0x2c>)
    59a6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    59a8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    59aa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    59ac:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    59b0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    59b2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    59b4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    59b6:	4418      	add	r0, r3
    59b8:	f01f f999 	bl	24cee <set_on_state>
	if (callback) {
    59bc:	b12d      	cbz	r5, 59ca <clkstarted_handle.constprop.13+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    59be:	4632      	mov	r2, r6
    59c0:	462b      	mov	r3, r5
    59c2:	4803      	ldr	r0, [pc, #12]	; (59d0 <clkstarted_handle.constprop.13+0x30>)
}
    59c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    59c8:	4718      	bx	r3
}
    59ca:	bd70      	pop	{r4, r5, r6, pc}
    59cc:	20001ad8 	.word	0x20001ad8
    59d0:	20000c40 	.word	0x20000c40

000059d4 <clock_event_handler>:
	switch (event) {
    59d4:	2801      	cmp	r0, #1
{
    59d6:	b508      	push	{r3, lr}
	switch (event) {
    59d8:	d010      	beq.n	59fc <clock_event_handler+0x28>
    59da:	b150      	cbz	r0, 59f2 <clock_event_handler+0x1e>
    59dc:	2803      	cmp	r0, #3
    59de:	d011      	beq.n	5a04 <clock_event_handler+0x30>
		__ASSERT_NO_MSG(0);
    59e0:	490f      	ldr	r1, [pc, #60]	; (5a20 <clock_event_handler+0x4c>)
    59e2:	4810      	ldr	r0, [pc, #64]	; (5a24 <clock_event_handler+0x50>)
    59e4:	f240 226a 	movw	r2, #618	; 0x26a
    59e8:	f01e fc28 	bl	2423c <printk>
    59ec:	f240 216a 	movw	r1, #618	; 0x26a
    59f0:	e010      	b.n	5a14 <clock_event_handler+0x40>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    59f2:	4b0d      	ldr	r3, [pc, #52]	; (5a28 <clock_event_handler+0x54>)
    59f4:	6c98      	ldr	r0, [r3, #72]	; 0x48
    59f6:	f010 0007 	ands.w	r0, r0, #7
    59fa:	d110      	bne.n	5a1e <clock_event_handler+0x4a>
}
    59fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5a00:	f7ff bfce 	b.w	59a0 <clkstarted_handle.constprop.13>
			__ASSERT_NO_MSG(false);
    5a04:	4906      	ldr	r1, [pc, #24]	; (5a20 <clock_event_handler+0x4c>)
    5a06:	4807      	ldr	r0, [pc, #28]	; (5a24 <clock_event_handler+0x50>)
    5a08:	f240 2266 	movw	r2, #614	; 0x266
    5a0c:	f01e fc16 	bl	2423c <printk>
    5a10:	f240 2166 	movw	r1, #614	; 0x266
		__ASSERT_NO_MSG(0);
    5a14:	4802      	ldr	r0, [pc, #8]	; (5a20 <clock_event_handler+0x4c>)
}
    5a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    5a1a:	f01e bec1 	b.w	247a0 <assert_post_action>
}
    5a1e:	bd08      	pop	{r3, pc}
    5a20:	0002c06a 	.word	0x0002c06a
    5a24:	0002bced 	.word	0x0002bced
    5a28:	20001ad8 	.word	0x20001ad8

00005a2c <generic_hfclk_start>:
{
    5a2c:	b508      	push	{r3, lr}
	__asm__ volatile(
    5a2e:	f04f 0320 	mov.w	r3, #32
    5a32:	f3ef 8111 	mrs	r1, BASEPRI
    5a36:	f383 8811 	msr	BASEPRI, r3
    5a3a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5a3e:	4a12      	ldr	r2, [pc, #72]	; (5a88 <generic_hfclk_start+0x5c>)
    5a40:	6813      	ldr	r3, [r2, #0]
    5a42:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5a46:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5a4a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5a4c:	d00c      	beq.n	5a68 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5a52:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5a56:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5a5a:	f013 0301 	ands.w	r3, r3, #1
    5a5e:	d003      	beq.n	5a68 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    5a60:	480a      	ldr	r0, [pc, #40]	; (5a8c <generic_hfclk_start+0x60>)
    5a62:	f01f f944 	bl	24cee <set_on_state>
			already_started = true;
    5a66:	2301      	movs	r3, #1
	__asm__ volatile(
    5a68:	f381 8811 	msr	BASEPRI, r1
    5a6c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5a70:	b123      	cbz	r3, 5a7c <generic_hfclk_start+0x50>
		clkstarted_handle(CLOCK_DEVICE,
    5a72:	2000      	movs	r0, #0
}
    5a74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5a78:	f7ff bf92 	b.w	59a0 <clkstarted_handle.constprop.13>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5a7c:	2001      	movs	r0, #1
}
    5a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5a82:	f019 becb 	b.w	1f81c <nrfx_clock_start>
    5a86:	bf00      	nop
    5a88:	20001b30 	.word	0x20001b30
    5a8c:	20001b20 	.word	0x20001b20

00005a90 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5a90:	4b09      	ldr	r3, [pc, #36]	; (5ab8 <generic_hfclk_stop+0x28>)
    5a92:	f3bf 8f5b 	dmb	ish
    5a96:	e853 2f00 	ldrex	r2, [r3]
    5a9a:	f022 0102 	bic.w	r1, r2, #2
    5a9e:	e843 1000 	strex	r0, r1, [r3]
    5aa2:	2800      	cmp	r0, #0
    5aa4:	d1f7      	bne.n	5a96 <generic_hfclk_stop+0x6>
    5aa6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    5aaa:	07d3      	lsls	r3, r2, #31
    5aac:	d402      	bmi.n	5ab4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5aae:	2001      	movs	r0, #1
    5ab0:	f019 bf02 	b.w	1f8b8 <nrfx_clock_stop>
}
    5ab4:	4770      	bx	lr
    5ab6:	bf00      	nop
    5ab8:	20001b30 	.word	0x20001b30

00005abc <api_blocking_start>:
{
    5abc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5abe:	2200      	movs	r2, #0
    5ac0:	2301      	movs	r3, #1
    5ac2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5ac6:	ab04      	add	r3, sp, #16
    5ac8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5acc:	4a09      	ldr	r2, [pc, #36]	; (5af4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5ace:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5ad2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5ad4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5ad8:	f01f f92e 	bl	24d38 <api_start>
	if (err < 0) {
    5adc:	2800      	cmp	r0, #0
    5ade:	db05      	blt.n	5aec <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    5ae0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5ae4:	2300      	movs	r3, #0
    5ae6:	4668      	mov	r0, sp
    5ae8:	f01c fa0c 	bl	21f04 <z_impl_k_sem_take>
}
    5aec:	b007      	add	sp, #28
    5aee:	f85d fb04 	ldr.w	pc, [sp], #4
    5af2:	bf00      	nop
    5af4:	00024d33 	.word	0x00024d33

00005af8 <z_nrf_clock_control_get_onoff>:
}
    5af8:	4b02      	ldr	r3, [pc, #8]	; (5b04 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    5afa:	b2c0      	uxtb	r0, r0
}
    5afc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    5b00:	4770      	bx	lr
    5b02:	bf00      	nop
    5b04:	20001ad8 	.word	0x20001ad8

00005b08 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5b08:	4b09      	ldr	r3, [pc, #36]	; (5b30 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    5b0a:	f3bf 8f5b 	dmb	ish
    5b0e:	e853 2f00 	ldrex	r2, [r3]
    5b12:	f042 0101 	orr.w	r1, r2, #1
    5b16:	e843 1000 	strex	r0, r1, [r3]
    5b1a:	2800      	cmp	r0, #0
    5b1c:	d1f7      	bne.n	5b0e <z_nrf_clock_bt_ctlr_hf_request+0x6>
    5b1e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    5b22:	0793      	lsls	r3, r2, #30
    5b24:	d402      	bmi.n	5b2c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5b26:	2001      	movs	r0, #1
    5b28:	f019 be78 	b.w	1f81c <nrfx_clock_start>
}
    5b2c:	4770      	bx	lr
    5b2e:	bf00      	nop
    5b30:	20001b30 	.word	0x20001b30

00005b34 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5b34:	4b09      	ldr	r3, [pc, #36]	; (5b5c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    5b36:	f3bf 8f5b 	dmb	ish
    5b3a:	e853 2f00 	ldrex	r2, [r3]
    5b3e:	f022 0101 	bic.w	r1, r2, #1
    5b42:	e843 1000 	strex	r0, r1, [r3]
    5b46:	2800      	cmp	r0, #0
    5b48:	d1f7      	bne.n	5b3a <z_nrf_clock_bt_ctlr_hf_release+0x6>
    5b4a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    5b4e:	0793      	lsls	r3, r2, #30
    5b50:	d402      	bmi.n	5b58 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5b52:	2001      	movs	r0, #1
    5b54:	f019 beb0 	b.w	1f8b8 <nrfx_clock_stop>
}
    5b58:	4770      	bx	lr
    5b5a:	bf00      	nop
    5b5c:	20001b30 	.word	0x20001b30

00005b60 <z_nrf_clock_control_lf_on>:
{
    5b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5b64:	4947      	ldr	r1, [pc, #284]	; (5c84 <z_nrf_clock_control_lf_on+0x124>)
    5b66:	f3bf 8f5b 	dmb	ish
    5b6a:	4605      	mov	r5, r0
    5b6c:	2201      	movs	r2, #1
    5b6e:	e851 3f00 	ldrex	r3, [r1]
    5b72:	e841 2000 	strex	r0, r2, [r1]
    5b76:	2800      	cmp	r0, #0
    5b78:	d1f9      	bne.n	5b6e <z_nrf_clock_control_lf_on+0xe>
    5b7a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5b7e:	b99b      	cbnz	r3, 5ba8 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5b80:	4941      	ldr	r1, [pc, #260]	; (5c88 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    5b82:	4842      	ldr	r0, [pc, #264]	; (5c8c <z_nrf_clock_control_lf_on+0x12c>)
    5b84:	604b      	str	r3, [r1, #4]
    5b86:	60cb      	str	r3, [r1, #12]
    5b88:	608a      	str	r2, [r1, #8]
    5b8a:	f7fe fa0b 	bl	3fa4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    5b8e:	2800      	cmp	r0, #0
    5b90:	da0a      	bge.n	5ba8 <z_nrf_clock_control_lf_on+0x48>
    5b92:	493f      	ldr	r1, [pc, #252]	; (5c90 <z_nrf_clock_control_lf_on+0x130>)
    5b94:	483f      	ldr	r0, [pc, #252]	; (5c94 <z_nrf_clock_control_lf_on+0x134>)
    5b96:	f240 2226 	movw	r2, #550	; 0x226
    5b9a:	f01e fb4f 	bl	2423c <printk>
    5b9e:	f240 2126 	movw	r1, #550	; 0x226
    5ba2:	483b      	ldr	r0, [pc, #236]	; (5c90 <z_nrf_clock_control_lf_on+0x130>)
    5ba4:	f01e fdfc 	bl	247a0 <assert_post_action>
	switch (start_mode) {
    5ba8:	b395      	cbz	r5, 5c10 <z_nrf_clock_control_lf_on+0xb0>
    5baa:	2d02      	cmp	r5, #2
    5bac:	d854      	bhi.n	5c58 <z_nrf_clock_control_lf_on+0xf8>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5bae:	2d01      	cmp	r5, #1
    5bb0:	d107      	bne.n	5bc2 <z_nrf_clock_control_lf_on+0x62>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5bb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5bb6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5bba:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5bbe:	2b01      	cmp	r3, #1
    5bc0:	d026      	beq.n	5c10 <z_nrf_clock_control_lf_on+0xb0>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5bc2:	f024 fb98 	bl	2a2f6 <k_is_in_isr>
    5bc6:	b918      	cbnz	r0, 5bd0 <z_nrf_clock_control_lf_on+0x70>
	return !z_sys_post_kernel;
    5bc8:	4b33      	ldr	r3, [pc, #204]	; (5c98 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
    5bca:	781b      	ldrb	r3, [r3, #0]
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d150      	bne.n	5c72 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
    5bd0:	f04f 0320 	mov.w	r3, #32
    5bd4:	f3ef 8911 	mrs	r9, BASEPRI
    5bd8:	f383 8811 	msr	BASEPRI, r3
    5bdc:	f3bf 8f6f 	isb	sy
    5be0:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5be2:	4e2e      	ldr	r6, [pc, #184]	; (5c9c <z_nrf_clock_control_lf_on+0x13c>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5be4:	4f2e      	ldr	r7, [pc, #184]	; (5ca0 <z_nrf_clock_control_lf_on+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5be6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 5ca4 <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5bee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5bf2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5bf6:	03d2      	lsls	r2, r2, #15
    5bf8:	d50c      	bpl.n	5c14 <z_nrf_clock_control_lf_on+0xb4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5bfa:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5bfe:	2b01      	cmp	r3, #1
    5c00:	d001      	beq.n	5c06 <z_nrf_clock_control_lf_on+0xa6>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5c02:	2d01      	cmp	r5, #1
    5c04:	d106      	bne.n	5c14 <z_nrf_clock_control_lf_on+0xb4>
	if (isr_mode) {
    5c06:	b30c      	cbz	r4, 5c4c <z_nrf_clock_control_lf_on+0xec>
	__asm__ volatile(
    5c08:	f389 8811 	msr	BASEPRI, r9
    5c0c:	f3bf 8f6f 	isb	sy
}
    5c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    5c14:	b1ac      	cbz	r4, 5c42 <z_nrf_clock_control_lf_on+0xe2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5c16:	4648      	mov	r0, r9
    5c18:	f000 fcf8 	bl	660c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5c1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5c20:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5c24:	2b00      	cmp	r3, #0
    5c26:	d1e0      	bne.n	5bea <z_nrf_clock_control_lf_on+0x8a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5c28:	6831      	ldr	r1, [r6, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    5c2a:	2900      	cmp	r1, #0
    5c2c:	d0dd      	beq.n	5bea <z_nrf_clock_control_lf_on+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c2e:	6033      	str	r3, [r6, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5c30:	6833      	ldr	r3, [r6, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5c32:	2301      	movs	r3, #1
    5c34:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    5c38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c3c:	f8c8 3000 	str.w	r3, [r8]
    5c40:	e7d3      	b.n	5bea <z_nrf_clock_control_lf_on+0x8a>
	return z_impl_k_sleep(timeout);
    5c42:	2100      	movs	r1, #0
    5c44:	2021      	movs	r0, #33	; 0x21
    5c46:	f01c f8cf 	bl	21de8 <z_impl_k_sleep>
    5c4a:	e7e7      	b.n	5c1c <z_nrf_clock_control_lf_on+0xbc>
    p_reg->INTENSET = mask;
    5c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c50:	2202      	movs	r2, #2
    5c52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    5c56:	e7db      	b.n	5c10 <z_nrf_clock_control_lf_on+0xb0>
		__ASSERT_NO_MSG(false);
    5c58:	490d      	ldr	r1, [pc, #52]	; (5c90 <z_nrf_clock_control_lf_on+0x130>)
    5c5a:	480e      	ldr	r0, [pc, #56]	; (5c94 <z_nrf_clock_control_lf_on+0x134>)
    5c5c:	f44f 720e 	mov.w	r2, #568	; 0x238
    5c60:	f01e faec 	bl	2423c <printk>
    5c64:	f44f 710e 	mov.w	r1, #568	; 0x238
    5c68:	4809      	ldr	r0, [pc, #36]	; (5c90 <z_nrf_clock_control_lf_on+0x130>)
}
    5c6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    5c6e:	f01e bd97 	b.w	247a0 <assert_post_action>
    p_reg->INTENCLR = mask;
    5c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c76:	2202      	movs	r2, #2
    5c78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5c7c:	4604      	mov	r4, r0
	int key = isr_mode ? irq_lock() : 0;
    5c7e:	4681      	mov	r9, r0
    5c80:	e7af      	b.n	5be2 <z_nrf_clock_control_lf_on+0x82>
    5c82:	bf00      	nop
    5c84:	20001b34 	.word	0x20001b34
    5c88:	20001ac8 	.word	0x20001ac8
    5c8c:	20001af8 	.word	0x20001af8
    5c90:	0002c06a 	.word	0x0002c06a
    5c94:	0002bced 	.word	0x0002bced
    5c98:	200036f4 	.word	0x200036f4
    5c9c:	40000104 	.word	0x40000104
    5ca0:	e000e100 	.word	0xe000e100
    5ca4:	40000008 	.word	0x40000008

00005ca8 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    5ca8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    5caa:	4c06      	ldr	r4, [pc, #24]	; (5cc4 <z_clock_isr+0x1c>)
    5cac:	4806      	ldr	r0, [pc, #24]	; (5cc8 <z_clock_isr+0x20>)
    5cae:	4621      	mov	r1, r4
    5cb0:	2217      	movs	r2, #23
    5cb2:	f01e fac3 	bl	2423c <printk>
    5cb6:	4620      	mov	r0, r4
    5cb8:	2117      	movs	r1, #23
}
    5cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    5cbe:	f01e bd6f 	b.w	247a0 <assert_post_action>
    5cc2:	bf00      	nop
    5cc4:	0002c0d1 	.word	0x0002c0d1
    5cc8:	0002bced 	.word	0x0002bced

00005ccc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    5ccc:	4a04      	ldr	r2, [pc, #16]	; (5ce0 <sys_clock_timeout_handler+0x14>)
    5cce:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    5cd0:	1ac9      	subs	r1, r1, r3
    5cd2:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    5cd6:	4403      	add	r3, r0
    5cd8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5cda:	f01c be2f 	b.w	2293c <z_clock_announce>
    5cde:	bf00      	nop
    5ce0:	20001b44 	.word	0x20001b44

00005ce4 <set_absolute_alarm>:
{
    5ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ce8:	0085      	lsls	r5, r0, #2
    5cea:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5cee:	f100 0450 	add.w	r4, r0, #80	; 0x50
    5cf2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
    5cf6:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5cf8:	b2a4      	uxth	r4, r4
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    5cfa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5d78 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    5cfe:	f8d5 2540 	ldr.w	r2, [r5, #1344]	; 0x540
			cc_val = now + 2;
    5d02:	f8df a078 	ldr.w	sl, [pc, #120]	; 5d7c <set_absolute_alarm+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5d06:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5d0a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5d0e:	f021 467f 	bic.w	r6, r1, #4278190080	; 0xff000000
    5d12:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5d16:	4087      	lsls	r7, r0
    5d18:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    5d1a:	f8d8 b504 	ldr.w	fp, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5d1e:	eba2 020b 	sub.w	r2, r2, fp
    5d22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5d26:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5d2a:	2a01      	cmp	r2, #1
    p_reg->CC[ch] = cc_val;
    5d2c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
    5d30:	d102      	bne.n	5d38 <set_absolute_alarm+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    5d32:	2013      	movs	r0, #19
    5d34:	f024 fae5 	bl	2a302 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5d38:	f10b 0202 	add.w	r2, fp, #2
	return (a - b) & COUNTER_MAX;
    5d3c:	1ab3      	subs	r3, r6, r2
    5d3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    5d42:	4553      	cmp	r3, sl
    5d44:	bf28      	it	cs
    5d46:	4616      	movcs	r6, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5d48:	2300      	movs	r3, #0
    5d4a:	6023      	str	r3, [r4, #0]
    5d4c:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5d4e:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5d52:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5d56:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
    5d5a:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5d5e:	459b      	cmp	fp, r3
    5d60:	d007      	beq.n	5d72 <set_absolute_alarm+0x8e>
	return (a - b) & COUNTER_MAX;
    5d62:	1af3      	subs	r3, r6, r3
    5d64:	3b02      	subs	r3, #2
    5d66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5d6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
		prev_cc = cc_val;
    5d6e:	4632      	mov	r2, r6
	} while ((now2 != now) &&
    5d70:	d8d3      	bhi.n	5d1a <set_absolute_alarm+0x36>
}
    5d72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d76:	bf00      	nop
    5d78:	40011000 	.word	0x40011000
    5d7c:	00800001 	.word	0x00800001

00005d80 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    5d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    5d82:	4e10      	ldr	r6, [pc, #64]	; (5dc4 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d84:	4f10      	ldr	r7, [pc, #64]	; (5dc8 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5d86:	2500      	movs	r5, #0
    5d88:	4b10      	ldr	r3, [pc, #64]	; (5dcc <rtc_nrf_isr+0x4c>)
    5d8a:	2000      	movs	r0, #0
    5d8c:	681c      	ldr	r4, [r3, #0]
    5d8e:	461a      	mov	r2, r3
    5d90:	b105      	cbz	r5, 5d94 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    5d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    5d94:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    5d98:	03c9      	lsls	r1, r1, #15
    5d9a:	d5fa      	bpl.n	5d92 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d9c:	6839      	ldr	r1, [r7, #0]
    5d9e:	2900      	cmp	r1, #0
    5da0:	d0f7      	beq.n	5d92 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5da2:	603d      	str	r5, [r7, #0]
    5da4:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5da6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    5daa:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    5dae:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5db2:	2501      	movs	r5, #1
			if (handler) {
    5db4:	b11c      	cbz	r4, 5dbe <rtc_nrf_isr+0x3e>
    5db6:	6018      	str	r0, [r3, #0]
				handler(chan, cc_val,
    5db8:	685a      	ldr	r2, [r3, #4]
    5dba:	47a0      	blx	r4
    5dbc:	e7e4      	b.n	5d88 <rtc_nrf_isr+0x8>
    5dbe:	6014      	str	r4, [r2, #0]
}
    5dc0:	e7e7      	b.n	5d92 <rtc_nrf_isr+0x12>
    5dc2:	bf00      	nop
    5dc4:	40011000 	.word	0x40011000
    5dc8:	40011140 	.word	0x40011140
    5dcc:	20001b38 	.word	0x20001b38

00005dd0 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    5dd0:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    5dd2:	4d10      	ldr	r5, [pc, #64]	; (5e14 <z_clock_driver_init+0x44>)
    5dd4:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    5dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    5dda:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    5dde:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    5de2:	4b0d      	ldr	r3, [pc, #52]	; (5e18 <z_clock_driver_init+0x48>)
    5de4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5de8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5dec:	2101      	movs	r1, #1
    5dee:	4622      	mov	r2, r4
    5df0:	2011      	movs	r0, #17
    5df2:	f000 fb71 	bl	64d8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5df6:	2011      	movs	r0, #17
    5df8:	f000 fb3c 	bl	6474 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5dfc:	4a07      	ldr	r2, [pc, #28]	; (5e1c <z_clock_driver_init+0x4c>)
    5dfe:	2301      	movs	r3, #1
    5e00:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5e02:	4a07      	ldr	r2, [pc, #28]	; (5e20 <z_clock_driver_init+0x50>)
    5e04:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    5e06:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    5e08:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    5e0a:	f7ff fea9 	bl	5b60 <z_nrf_clock_control_lf_on>

	return 0;
}
    5e0e:	4620      	mov	r0, r4
    5e10:	bd38      	pop	{r3, r4, r5, pc}
    5e12:	bf00      	nop
    5e14:	40011000 	.word	0x40011000
    5e18:	e000e100 	.word	0xe000e100
    5e1c:	40011008 	.word	0x40011008
    5e20:	20001b40 	.word	0x20001b40

00005e24 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5e24:	4b13      	ldr	r3, [pc, #76]	; (5e74 <z_clock_set_timeout+0x50>)
    5e26:	f1b0 3fff 	cmp.w	r0, #4294967295
    5e2a:	bf08      	it	eq
    5e2c:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5e2e:	3801      	subs	r0, #1
    5e30:	2800      	cmp	r0, #0
    5e32:	dd1c      	ble.n	5e6e <z_clock_set_timeout+0x4a>
    5e34:	4298      	cmp	r0, r3
    5e36:	bfa8      	it	ge
    5e38:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    5e3a:	4b0f      	ldr	r3, [pc, #60]	; (5e78 <z_clock_set_timeout+0x54>)
    5e3c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    5e40:	4b0e      	ldr	r3, [pc, #56]	; (5e7c <z_clock_set_timeout+0x58>)
    5e42:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    5e44:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    5e46:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    5e4a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    5e4e:	bf18      	it	ne
    5e50:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    5e52:	4a0b      	ldr	r2, [pc, #44]	; (5e80 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5e54:	3301      	adds	r3, #1
    5e56:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    5e58:	480a      	ldr	r0, [pc, #40]	; (5e84 <z_clock_set_timeout+0x60>)
    5e5a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    5e5c:	2000      	movs	r0, #0
    5e5e:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    5e60:	4a04      	ldr	r2, [pc, #16]	; (5e74 <z_clock_set_timeout+0x50>)
    5e62:	4293      	cmp	r3, r2
    5e64:	bf94      	ite	ls
    5e66:	18c9      	addls	r1, r1, r3
    5e68:	1889      	addhi	r1, r1, r2
    5e6a:	f7ff bf3b 	b.w	5ce4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5e6e:	2000      	movs	r0, #0
    5e70:	e7e3      	b.n	5e3a <z_clock_set_timeout+0x16>
    5e72:	bf00      	nop
    5e74:	007fffff 	.word	0x007fffff
    5e78:	40011000 	.word	0x40011000
    5e7c:	20001b44 	.word	0x20001b44
    5e80:	20001b38 	.word	0x20001b38
    5e84:	00005ccd 	.word	0x00005ccd

00005e88 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    5e88:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5e8a:	f04f 0320 	mov.w	r3, #32
    5e8e:	f3ef 8511 	mrs	r5, BASEPRI
    5e92:	f383 8811 	msr	BASEPRI, r3
    5e96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e9a:	4815      	ldr	r0, [pc, #84]	; (5ef0 <z_clock_elapsed+0x68>)
    5e9c:	f01c f9ec 	bl	22278 <z_spin_lock_valid>
    5ea0:	b940      	cbnz	r0, 5eb4 <z_clock_elapsed+0x2c>
    5ea2:	4914      	ldr	r1, [pc, #80]	; (5ef4 <z_clock_elapsed+0x6c>)
    5ea4:	4814      	ldr	r0, [pc, #80]	; (5ef8 <z_clock_elapsed+0x70>)
    5ea6:	227c      	movs	r2, #124	; 0x7c
    5ea8:	f01e f9c8 	bl	2423c <printk>
    5eac:	217c      	movs	r1, #124	; 0x7c
    5eae:	4811      	ldr	r0, [pc, #68]	; (5ef4 <z_clock_elapsed+0x6c>)
    5eb0:	f01e fc76 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
    5eb4:	480e      	ldr	r0, [pc, #56]	; (5ef0 <z_clock_elapsed+0x68>)
    5eb6:	f01c f9fd 	bl	222b4 <z_spin_lock_set_owner>
    5eba:	4b10      	ldr	r3, [pc, #64]	; (5efc <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ebc:	480c      	ldr	r0, [pc, #48]	; (5ef0 <z_clock_elapsed+0x68>)
    5ebe:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    5ec2:	4b0f      	ldr	r3, [pc, #60]	; (5f00 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    5ec4:	681b      	ldr	r3, [r3, #0]
    5ec6:	1ae4      	subs	r4, r4, r3
    5ec8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    5ecc:	f01c f9e2 	bl	22294 <z_spin_unlock_valid>
    5ed0:	b940      	cbnz	r0, 5ee4 <z_clock_elapsed+0x5c>
    5ed2:	4908      	ldr	r1, [pc, #32]	; (5ef4 <z_clock_elapsed+0x6c>)
    5ed4:	4808      	ldr	r0, [pc, #32]	; (5ef8 <z_clock_elapsed+0x70>)
    5ed6:	22a7      	movs	r2, #167	; 0xa7
    5ed8:	f01e f9b0 	bl	2423c <printk>
    5edc:	21a7      	movs	r1, #167	; 0xa7
    5ede:	4805      	ldr	r0, [pc, #20]	; (5ef4 <z_clock_elapsed+0x6c>)
    5ee0:	f01e fc5e 	bl	247a0 <assert_post_action>
	__asm__ volatile(
    5ee4:	f385 8811 	msr	BASEPRI, r5
    5ee8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    5eec:	4620      	mov	r0, r4
    5eee:	bd38      	pop	{r3, r4, r5, pc}
    5ef0:	20001b48 	.word	0x20001b48
    5ef4:	0002be01 	.word	0x0002be01
    5ef8:	0002bced 	.word	0x0002bced
    5efc:	40011000 	.word	0x40011000
    5f00:	20001b44 	.word	0x20001b44

00005f04 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    5f04:	4801      	ldr	r0, [pc, #4]	; (5f0c <nrf_cc3xx_platform_abort_init+0x8>)
    5f06:	f01d b9a9 	b.w	2325c <nrf_cc3xx_platform_set_abort>
    5f0a:	bf00      	nop
    5f0c:	0002ad04 	.word	0x0002ad04

00005f10 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5f10:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5f12:	b1d0      	cbz	r0, 5f4a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5f14:	6843      	ldr	r3, [r0, #4]
    5f16:	2b04      	cmp	r3, #4
    5f18:	d111      	bne.n	5f3e <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5f1a:	2200      	movs	r2, #0
    5f1c:	6803      	ldr	r3, [r0, #0]
    5f1e:	f3bf 8f5b 	dmb	ish
    5f22:	e853 1f00 	ldrex	r1, [r3]
    5f26:	2901      	cmp	r1, #1
    5f28:	d103      	bne.n	5f32 <mutex_unlock_platform+0x22>
    5f2a:	e843 2000 	strex	r0, r2, [r3]
    5f2e:	2800      	cmp	r0, #0
    5f30:	d1f7      	bne.n	5f22 <mutex_unlock_platform+0x12>
    5f32:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5f36:	4807      	ldr	r0, [pc, #28]	; (5f54 <mutex_unlock_platform+0x44>)
    5f38:	bf08      	it	eq
    5f3a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    5f3c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5f3e:	b13b      	cbz	r3, 5f50 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    5f40:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    5f42:	f01a fd5f 	bl	20a04 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    5f46:	2000      	movs	r0, #0
    5f48:	e7f8      	b.n	5f3c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5f4a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5f4e:	e7f5      	b.n	5f3c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5f50:	4801      	ldr	r0, [pc, #4]	; (5f58 <mutex_unlock_platform+0x48>)
    5f52:	e7f3      	b.n	5f3c <mutex_unlock_platform+0x2c>
    5f54:	ffff8fe9 	.word	0xffff8fe9
    5f58:	ffff8fea 	.word	0xffff8fea

00005f5c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5f5c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5f5e:	4604      	mov	r4, r0
    5f60:	b918      	cbnz	r0, 5f6a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    5f62:	4b0d      	ldr	r3, [pc, #52]	; (5f98 <mutex_free_platform+0x3c>)
    5f64:	480d      	ldr	r0, [pc, #52]	; (5f9c <mutex_free_platform+0x40>)
    5f66:	685b      	ldr	r3, [r3, #4]
    5f68:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5f6a:	6861      	ldr	r1, [r4, #4]
    5f6c:	2908      	cmp	r1, #8
    5f6e:	d00d      	beq.n	5f8c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5f70:	f031 0304 	bics.w	r3, r1, #4
    5f74:	d00a      	beq.n	5f8c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    5f76:	f011 0102 	ands.w	r1, r1, #2
    5f7a:	d008      	beq.n	5f8e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    5f7c:	4621      	mov	r1, r4
    5f7e:	4808      	ldr	r0, [pc, #32]	; (5fa0 <mutex_free_platform+0x44>)
    5f80:	f01a fc1e 	bl	207c0 <k_mem_slab_free>
        mutex->mutex = NULL;
    5f84:	2300      	movs	r3, #0
    5f86:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    5f88:	2300      	movs	r3, #0
    5f8a:	6063      	str	r3, [r4, #4]
}
    5f8c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5f8e:	2214      	movs	r2, #20
    5f90:	6820      	ldr	r0, [r4, #0]
    5f92:	f020 f90f 	bl	261b4 <memset>
    5f96:	e7f7      	b.n	5f88 <mutex_free_platform+0x2c>
    5f98:	20000b1c 	.word	0x20000b1c
    5f9c:	0002c134 	.word	0x0002c134
    5fa0:	20001b4c 	.word	0x20001b4c

00005fa4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5fa4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5fa6:	4604      	mov	r4, r0
    5fa8:	b918      	cbnz	r0, 5fb2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    5faa:	4b16      	ldr	r3, [pc, #88]	; (6004 <mutex_init_platform+0x60>)
    5fac:	4816      	ldr	r0, [pc, #88]	; (6008 <mutex_init_platform+0x64>)
    5fae:	685b      	ldr	r3, [r3, #4]
    5fb0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5fb2:	6863      	ldr	r3, [r4, #4]
    5fb4:	2b04      	cmp	r3, #4
    5fb6:	d023      	beq.n	6000 <mutex_init_platform+0x5c>
    5fb8:	2b08      	cmp	r3, #8
    5fba:	d021      	beq.n	6000 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5fbc:	b9cb      	cbnz	r3, 5ff2 <mutex_init_platform+0x4e>
    5fbe:	6823      	ldr	r3, [r4, #0]
    5fc0:	b9bb      	cbnz	r3, 5ff2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    5fc2:	f04f 32ff 	mov.w	r2, #4294967295
    5fc6:	f04f 33ff 	mov.w	r3, #4294967295
    5fca:	4621      	mov	r1, r4
    5fcc:	480f      	ldr	r0, [pc, #60]	; (600c <mutex_init_platform+0x68>)
    5fce:	f01a fb9d 	bl	2070c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    5fd2:	b908      	cbnz	r0, 5fd8 <mutex_init_platform+0x34>
    5fd4:	6823      	ldr	r3, [r4, #0]
    5fd6:	b91b      	cbnz	r3, 5fe0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    5fd8:	4b0a      	ldr	r3, [pc, #40]	; (6004 <mutex_init_platform+0x60>)
    5fda:	480d      	ldr	r0, [pc, #52]	; (6010 <mutex_init_platform+0x6c>)
    5fdc:	685b      	ldr	r3, [r3, #4]
    5fde:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5fe0:	2214      	movs	r2, #20
    5fe2:	2100      	movs	r1, #0
    5fe4:	6820      	ldr	r0, [r4, #0]
    5fe6:	f020 f8e5 	bl	261b4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    5fea:	6863      	ldr	r3, [r4, #4]
    5fec:	f043 0302 	orr.w	r3, r3, #2
    5ff0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    5ff2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    5ff4:	f024 f8f6 	bl	2a1e4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    5ff8:	6863      	ldr	r3, [r4, #4]
    5ffa:	f043 0301 	orr.w	r3, r3, #1
    5ffe:	6063      	str	r3, [r4, #4]
}
    6000:	bd10      	pop	{r4, pc}
    6002:	bf00      	nop
    6004:	20000b1c 	.word	0x20000b1c
    6008:	0002c134 	.word	0x0002c134
    600c:	20001b4c 	.word	0x20001b4c
    6010:	0002c15a 	.word	0x0002c15a

00006014 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    6014:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    6016:	b1f8      	cbz	r0, 6058 <mutex_lock_platform+0x44>
    switch (mutex->flags) {
    6018:	6843      	ldr	r3, [r0, #4]
    601a:	2b04      	cmp	r3, #4
    601c:	d110      	bne.n	6040 <mutex_lock_platform+0x2c>
    601e:	2201      	movs	r2, #1
    6020:	6803      	ldr	r3, [r0, #0]
    6022:	f3bf 8f5b 	dmb	ish
    6026:	e853 1f00 	ldrex	r1, [r3]
    602a:	2900      	cmp	r1, #0
    602c:	d103      	bne.n	6036 <mutex_lock_platform+0x22>
    602e:	e843 2000 	strex	r0, r2, [r3]
    6032:	2800      	cmp	r0, #0
    6034:	d1f7      	bne.n	6026 <mutex_lock_platform+0x12>
    6036:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    603a:	d10b      	bne.n	6054 <mutex_lock_platform+0x40>
    603c:	2000      	movs	r0, #0
}
    603e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    6040:	b16b      	cbz	r3, 605e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    6042:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    6044:	f04f 32ff 	mov.w	r2, #4294967295
    6048:	f04f 33ff 	mov.w	r3, #4294967295
    604c:	f01a fc06 	bl	2085c <z_impl_k_mutex_lock>
        if (ret == 0) {
    6050:	2800      	cmp	r0, #0
    6052:	d0f3      	beq.n	603c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    6054:	4803      	ldr	r0, [pc, #12]	; (6064 <mutex_lock_platform+0x50>)
    6056:	e7f2      	b.n	603e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    6058:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    605c:	e7ef      	b.n	603e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    605e:	4802      	ldr	r0, [pc, #8]	; (6068 <mutex_lock_platform+0x54>)
    6060:	e7ed      	b.n	603e <mutex_lock_platform+0x2a>
    6062:	bf00      	nop
    6064:	ffff8fe9 	.word	0xffff8fe9
    6068:	ffff8fea 	.word	0xffff8fea

0000606c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    606c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    606e:	4906      	ldr	r1, [pc, #24]	; (6088 <nrf_cc3xx_platform_mutex_init+0x1c>)
    6070:	4806      	ldr	r0, [pc, #24]	; (608c <nrf_cc3xx_platform_mutex_init+0x20>)
    6072:	2340      	movs	r3, #64	; 0x40
    6074:	2214      	movs	r2, #20
    6076:	f024 f89a 	bl	2a1ae <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    607a:	4905      	ldr	r1, [pc, #20]	; (6090 <nrf_cc3xx_platform_mutex_init+0x24>)
    607c:	4805      	ldr	r0, [pc, #20]	; (6094 <nrf_cc3xx_platform_mutex_init+0x28>)
}
    607e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    6082:	f01d b969 	b.w	23358 <nrf_cc3xx_platform_set_mutexes>
    6086:	bf00      	nop
    6088:	20001b68 	.word	0x20001b68
    608c:	20001b4c 	.word	0x20001b4c
    6090:	0002ad1c 	.word	0x0002ad1c
    6094:	0002ad0c 	.word	0x0002ad0c

00006098 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    6098:	4b01      	ldr	r3, [pc, #4]	; (60a0 <uECC_get_rng+0x8>)
    609a:	6818      	ldr	r0, [r3, #0]
    609c:	4770      	bx	lr
    609e:	bf00      	nop
    60a0:	20000544 	.word	0x20000544

000060a4 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    60a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    60a6:	2208      	movs	r2, #8
{
    60a8:	b089      	sub	sp, #36	; 0x24
    60aa:	460c      	mov	r4, r1
    60ac:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    60ae:	f01f f851 	bl	25154 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    60b2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    60b4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    60b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    60b8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    60ba:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    60bc:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    60be:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    60c0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    60c2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    60c4:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    60c6:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    60c8:	2308      	movs	r3, #8
    60ca:	466a      	mov	r2, sp
    60cc:	4669      	mov	r1, sp
    60ce:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    60d0:	e9cd 7701 	strd	r7, r7, [sp, #4]
    60d4:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    60d6:	f01e ff42 	bl	24f5e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    60da:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    60dc:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    60de:	466a      	mov	r2, sp
    60e0:	4631      	mov	r1, r6
    60e2:	4630      	mov	r0, r6
    60e4:	f01e ff3b 	bl	24f5e <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    60e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    60ea:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    60ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    60ee:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    60f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    60f2:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    60f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    60f6:	4405      	add	r5, r0
	tmp[7] = 0;
    60f8:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    60fc:	466a      	mov	r2, sp
    60fe:	2308      	movs	r3, #8
    6100:	4669      	mov	r1, sp
    6102:	4668      	mov	r0, sp
    6104:	f01e ff2b 	bl	24f5e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6108:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    610a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    610c:	2308      	movs	r3, #8
    610e:	466a      	mov	r2, sp
    6110:	4630      	mov	r0, r6
    6112:	f01e ff24 	bl	24f5e <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    6116:	6a23      	ldr	r3, [r4, #32]
    6118:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    611a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    611c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    611e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6120:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    6122:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6124:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    6126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6128:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    612a:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    612c:	2308      	movs	r3, #8
    612e:	466a      	mov	r2, sp
    6130:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    6132:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6136:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6138:	f01e ff11 	bl	24f5e <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    613c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    613e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    6140:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    6142:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    6144:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    6146:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6148:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    614a:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    614c:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    614e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    6150:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    6152:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    6156:	6a23      	ldr	r3, [r4, #32]
    6158:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    615a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    615c:	2308      	movs	r3, #8
    615e:	466a      	mov	r2, sp
    6160:	4630      	mov	r0, r6
    6162:	f01e fefc 	bl	24f5e <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    6166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6168:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    616a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    616c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    616e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6170:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    6172:	6a23      	ldr	r3, [r4, #32]
    6174:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    6176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6178:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    617a:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    617c:	2308      	movs	r3, #8
    617e:	466a      	mov	r2, sp
    6180:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    6182:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6186:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6188:	f01f f81a 	bl	251c0 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    618c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    618e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    6190:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6192:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    6194:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6196:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    6198:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    619a:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    619c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    619e:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    61a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    61a2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    61a4:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    61a6:	2308      	movs	r3, #8
    61a8:	466a      	mov	r2, sp
    61aa:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    61ac:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    61b0:	f01f f806 	bl	251c0 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    61b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    61b6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    61b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    61ba:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    61bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    61be:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    61c0:	6a23      	ldr	r3, [r4, #32]
    61c2:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    61c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    61c6:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    61c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    61ca:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    61ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    61d0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    61d2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    61d4:	2308      	movs	r3, #8
    61d6:	466a      	mov	r2, sp
    61d8:	4630      	mov	r0, r6
    61da:	f01e fff1 	bl	251c0 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    61de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    61e0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    61e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    61e4:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    61e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    61ea:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    61ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    61ee:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    61f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    61f2:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    61f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    61f8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    61fa:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    61fc:	2308      	movs	r3, #8
    61fe:	466a      	mov	r2, sp
    6200:	4630      	mov	r0, r6
    6202:	f01e ffdd 	bl	251c0 <uECC_vli_sub>

	if (carry < 0) {
    6206:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    6208:	4c0d      	ldr	r4, [pc, #52]	; (6240 <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
    620a:	d40f      	bmi.n	622c <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
    620c:	b935      	cbnz	r5, 621c <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    620e:	2208      	movs	r2, #8
    6210:	4631      	mov	r1, r6
    6212:	4620      	mov	r0, r4
    6214:	f01e ffaa 	bl	2516c <uECC_vli_cmp_unsafe>
		while (carry || 
    6218:	2801      	cmp	r0, #1
    621a:	d00f      	beq.n	623c <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    621c:	2308      	movs	r3, #8
    621e:	4622      	mov	r2, r4
    6220:	4631      	mov	r1, r6
    6222:	4630      	mov	r0, r6
    6224:	f01e ffcc 	bl	251c0 <uECC_vli_sub>
    6228:	1a2d      	subs	r5, r5, r0
    622a:	e7ef      	b.n	620c <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    622c:	2308      	movs	r3, #8
    622e:	4622      	mov	r2, r4
    6230:	4631      	mov	r1, r6
    6232:	4630      	mov	r0, r6
    6234:	f01e fe93 	bl	24f5e <uECC_vli_add>
		while (carry < 0);
    6238:	182d      	adds	r5, r5, r0
    623a:	d4f7      	bmi.n	622c <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
    623c:	b009      	add	sp, #36	; 0x24
    623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6240:	0002ad34 	.word	0x0002ad34

00006244 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    6244:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6246:	4e28      	ldr	r6, [pc, #160]	; (62e8 <tc_aes128_set_encrypt_key+0xa4>)
{
    6248:	4607      	mov	r7, r0
    624a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    624c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    624e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    6250:	ad01      	add	r5, sp, #4
    6252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6254:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6258:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    625c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    6260:	2f00      	cmp	r7, #0
    6262:	d03c      	beq.n	62de <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    6264:	2c00      	cmp	r4, #0
    6266:	d03c      	beq.n	62e2 <tc_aes128_set_encrypt_key+0x9e>
    6268:	1f38      	subs	r0, r7, #4
    626a:	4621      	mov	r1, r4
    626c:	4602      	mov	r2, r0
    626e:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6270:	784b      	ldrb	r3, [r1, #1]
    6272:	780d      	ldrb	r5, [r1, #0]
    6274:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6276:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    627a:	78cd      	ldrb	r5, [r1, #3]
    627c:	432b      	orrs	r3, r5
    627e:	788d      	ldrb	r5, [r1, #2]
    6280:	3104      	adds	r1, #4
    6282:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6286:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6288:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    628c:	d1f0      	bne.n	6270 <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    628e:	4c17      	ldr	r4, [pc, #92]	; (62ec <tc_aes128_set_encrypt_key+0xa8>)
    6290:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    6292:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    6294:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    6296:	d118      	bne.n	62ca <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    6298:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    629c:	0e1a      	lsrs	r2, r3, #24
    629e:	5ca5      	ldrb	r5, [r4, r2]
    62a0:	b2da      	uxtb	r2, r3
    62a2:	5ca2      	ldrb	r2, [r4, r2]
    62a4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    62a8:	f3c3 4507 	ubfx	r5, r3, #16, #8
    62ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
    62b0:	5d65      	ldrb	r5, [r4, r5]
    62b2:	5ce3      	ldrb	r3, [r4, r3]
    62b4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    62b8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    62bc:	ad0c      	add	r5, sp, #48	; 0x30
    62be:	f021 0303 	bic.w	r3, r1, #3
    62c2:	442b      	add	r3, r5
    62c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    62c8:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    62ca:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    62ce:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    62d0:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    62d2:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    62d4:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    62d6:	d1dc      	bne.n	6292 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    62d8:	2001      	movs	r0, #1
}
    62da:	b00d      	add	sp, #52	; 0x34
    62dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    62de:	4638      	mov	r0, r7
    62e0:	e7fb      	b.n	62da <tc_aes128_set_encrypt_key+0x96>
    62e2:	4620      	mov	r0, r4
    62e4:	e7f9      	b.n	62da <tc_aes128_set_encrypt_key+0x96>
    62e6:	bf00      	nop
    62e8:	0002aaf0 	.word	0x0002aaf0
    62ec:	0002c187 	.word	0x0002c187

000062f0 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    62f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    62f4:	4615      	mov	r5, r2
    62f6:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    62f8:	4607      	mov	r7, r0
    62fa:	2800      	cmp	r0, #0
    62fc:	d059      	beq.n	63b2 <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    62fe:	2900      	cmp	r1, #0
    6300:	d05a      	beq.n	63b8 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    6302:	2a00      	cmp	r2, #0
    6304:	d05a      	beq.n	63bc <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    6306:	2310      	movs	r3, #16
    6308:	460a      	mov	r2, r1
    630a:	4668      	mov	r0, sp
    630c:	4619      	mov	r1, r3
    630e:	f01e fd62 	bl	24dd6 <_copy>
	add_round_key(state, s->words);
    6312:	4629      	mov	r1, r5
    6314:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    6316:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 63c0 <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
    631a:	f01f fc68 	bl	25bee <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    631e:	f105 0610 	add.w	r6, r5, #16
    6322:	46c8      	mov	r8, r9
    6324:	35a0      	adds	r5, #160	; 0xa0
    6326:	466c      	mov	r4, sp
{
    6328:	466a      	mov	r2, sp
    632a:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    632c:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    632e:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    6330:	f819 1001 	ldrb.w	r1, [r9, r1]
    6334:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    6338:	d1f8      	bne.n	632c <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
    633a:	4668      	mov	r0, sp
    633c:	f01f fc9c 	bl	25c78 <shift_rows>
	mult_row_column(t, s);
    6340:	4669      	mov	r1, sp
    6342:	a804      	add	r0, sp, #16
    6344:	f01f fcd1 	bl	25cea <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    6348:	a901      	add	r1, sp, #4
    634a:	a805      	add	r0, sp, #20
    634c:	f01f fccd 	bl	25cea <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    6350:	a902      	add	r1, sp, #8
    6352:	a806      	add	r0, sp, #24
    6354:	f01f fcc9 	bl	25cea <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    6358:	a903      	add	r1, sp, #12
    635a:	a807      	add	r0, sp, #28
    635c:	f01f fcc5 	bl	25cea <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    6360:	2310      	movs	r3, #16
    6362:	4619      	mov	r1, r3
    6364:	eb0d 0203 	add.w	r2, sp, r3
    6368:	4668      	mov	r0, sp
    636a:	f01e fd34 	bl	24dd6 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    636e:	4631      	mov	r1, r6
    6370:	4668      	mov	r0, sp
    6372:	3610      	adds	r6, #16
    6374:	f01f fc3b 	bl	25bee <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    6378:	42ae      	cmp	r6, r5
    637a:	d1d4      	bne.n	6326 <tc_aes_encrypt+0x36>
    637c:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
    637e:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    6380:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
    6382:	f818 3003 	ldrb.w	r3, [r8, r3]
    6386:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    638a:	d1f8      	bne.n	637e <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
    638c:	4668      	mov	r0, sp
    638e:	f01f fc73 	bl	25c78 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    6392:	4629      	mov	r1, r5
    6394:	4668      	mov	r0, sp
    6396:	f01f fc2a 	bl	25bee <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    639a:	2310      	movs	r3, #16
    639c:	4619      	mov	r1, r3
    639e:	466a      	mov	r2, sp
    63a0:	4638      	mov	r0, r7
    63a2:	f01e fd18 	bl	24dd6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    63a6:	4668      	mov	r0, sp
    63a8:	2210      	movs	r2, #16
    63aa:	4631      	mov	r1, r6
    63ac:	f01e fd20 	bl	24df0 <_set>

	return TC_CRYPTO_SUCCESS;
    63b0:	2001      	movs	r0, #1
}
    63b2:	b009      	add	sp, #36	; 0x24
    63b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    63b8:	4608      	mov	r0, r1
    63ba:	e7fa      	b.n	63b2 <tc_aes_encrypt+0xc2>
    63bc:	4610      	mov	r0, r2
    63be:	e7f8      	b.n	63b2 <tc_aes_encrypt+0xc2>
    63c0:	0002c187 	.word	0x0002c187

000063c4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    63c4:	4a0a      	ldr	r2, [pc, #40]	; (63f0 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    63c6:	490b      	ldr	r1, [pc, #44]	; (63f4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    63c8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    63ca:	6809      	ldr	r1, [r1, #0]
    63cc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    63d0:	4909      	ldr	r1, [pc, #36]	; (63f8 <arch_swap+0x34>)
	_current->arch.basepri = key;
    63d2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    63d6:	684b      	ldr	r3, [r1, #4]
    63d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    63dc:	604b      	str	r3, [r1, #4]
    63de:	2300      	movs	r3, #0
    63e0:	f383 8811 	msr	BASEPRI, r3
    63e4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    63e8:	6893      	ldr	r3, [r2, #8]
}
    63ea:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    63ee:	4770      	bx	lr
    63f0:	20003490 	.word	0x20003490
    63f4:	0002b7d8 	.word	0x0002b7d8
    63f8:	e000ed00 	.word	0xe000ed00

000063fc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    63fc:	4913      	ldr	r1, [pc, #76]	; (644c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    63fe:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6400:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    6404:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6406:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    640a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    640e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6410:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6414:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6418:	4f0d      	ldr	r7, [pc, #52]	; (6450 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    641a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    641e:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    6420:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6422:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6424:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    6428:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    642a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    642e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    6432:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    6434:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    6436:	f000 fbc5 	bl	6bc4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    643a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    643e:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    6442:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6446:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    644a:	4770      	bx	lr
    ldr r1, =_kernel
    644c:	20003490 	.word	0x20003490
    ldr v4, =_SCS_ICSR
    6450:	e000ed04 	.word	0xe000ed04

00006454 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    6454:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6458:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    645a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    645e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6462:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6464:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6468:	2902      	cmp	r1, #2
    beq _oops
    646a:	d0ff      	beq.n	646c <_oops>

0000646c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    646c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    646e:	f01f fd7d 	bl	25f6c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    6472:	bd01      	pop	{r0, pc}

00006474 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6474:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6476:	2b00      	cmp	r3, #0
    6478:	db08      	blt.n	648c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    647a:	2201      	movs	r2, #1
    647c:	f000 001f 	and.w	r0, r0, #31
    6480:	fa02 f000 	lsl.w	r0, r2, r0
    6484:	095b      	lsrs	r3, r3, #5
    6486:	4a02      	ldr	r2, [pc, #8]	; (6490 <arch_irq_enable+0x1c>)
    6488:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    648c:	4770      	bx	lr
    648e:	bf00      	nop
    6490:	e000e100 	.word	0xe000e100

00006494 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6494:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6496:	2b00      	cmp	r3, #0
    6498:	db0d      	blt.n	64b6 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    649a:	2201      	movs	r2, #1
    649c:	095b      	lsrs	r3, r3, #5
    649e:	f000 001f 	and.w	r0, r0, #31
    64a2:	fa02 f000 	lsl.w	r0, r2, r0
    64a6:	3320      	adds	r3, #32
    64a8:	4a03      	ldr	r2, [pc, #12]	; (64b8 <arch_irq_disable+0x24>)
    64aa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    64ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64b2:	f3bf 8f6f 	isb	sy
}
    64b6:	4770      	bx	lr
    64b8:	e000e100 	.word	0xe000e100

000064bc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    64bc:	0942      	lsrs	r2, r0, #5
    64be:	4b05      	ldr	r3, [pc, #20]	; (64d4 <arch_irq_is_enabled+0x18>)
    64c0:	f000 001f 	and.w	r0, r0, #31
    64c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    64c8:	2301      	movs	r3, #1
    64ca:	fa03 f000 	lsl.w	r0, r3, r0
}
    64ce:	4010      	ands	r0, r2
    64d0:	4770      	bx	lr
    64d2:	bf00      	nop
    64d4:	e000e100 	.word	0xe000e100

000064d8 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    64d8:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    64da:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    64dc:	2c07      	cmp	r4, #7
{
    64de:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    64e0:	d908      	bls.n	64f4 <z_arm_irq_priority_set+0x1c>
    64e2:	490e      	ldr	r1, [pc, #56]	; (651c <z_arm_irq_priority_set+0x44>)
    64e4:	480e      	ldr	r0, [pc, #56]	; (6520 <z_arm_irq_priority_set+0x48>)
    64e6:	225f      	movs	r2, #95	; 0x5f
    64e8:	f01d fea8 	bl	2423c <printk>
    64ec:	215f      	movs	r1, #95	; 0x5f
    64ee:	480b      	ldr	r0, [pc, #44]	; (651c <z_arm_irq_priority_set+0x44>)
    64f0:	f01e f956 	bl	247a0 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    64f4:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    64f6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    64f8:	bfa8      	it	ge
    64fa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
    64fe:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6502:	bfbc      	itt	lt
    6504:	f005 050f 	andlt.w	r5, r5, #15
    6508:	4b06      	ldrlt	r3, [pc, #24]	; (6524 <z_arm_irq_priority_set+0x4c>)
    650a:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    650c:	bfaa      	itet	ge
    650e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6512:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6514:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    6518:	bd38      	pop	{r3, r4, r5, pc}
    651a:	bf00      	nop
    651c:	0002c287 	.word	0x0002c287
    6520:	0002bced 	.word	0x0002bced
    6524:	e000ed14 	.word	0xe000ed14

00006528 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    6528:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    652a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    652c:	4b04      	ldr	r3, [pc, #16]	; (6540 <_arch_isr_direct_pm+0x18>)
    652e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    6530:	b118      	cbz	r0, 653a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    6532:	2200      	movs	r2, #0
    6534:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    6536:	f023 fe30 	bl	2a19a <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    653a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    653c:	bd08      	pop	{r3, pc}
    653e:	bf00      	nop
    6540:	20003490 	.word	0x20003490

00006544 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    6544:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6548:	9b00      	ldr	r3, [sp, #0]
    654a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    654e:	490a      	ldr	r1, [pc, #40]	; (6578 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6550:	9b01      	ldr	r3, [sp, #4]
    6552:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6556:	9b02      	ldr	r3, [sp, #8]
    6558:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    655c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6564:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6568:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    656c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    656e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6570:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    6572:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6576:	4770      	bx	lr
    6578:	00024319 	.word	0x00024319

0000657c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    657c:	4b0b      	ldr	r3, [pc, #44]	; (65ac <z_check_thread_stack_fail+0x30>)
{
    657e:	4602      	mov	r2, r0
	const struct k_thread *thread = _current;
    6580:	6898      	ldr	r0, [r3, #8]

	if (!thread) {
    6582:	b190      	cbz	r0, 65aa <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    6584:	f112 0f16 	cmn.w	r2, #22
    6588:	6f40      	ldr	r0, [r0, #116]	; 0x74
    658a:	d005      	beq.n	6598 <z_check_thread_stack_fail+0x1c>
    658c:	f1a0 0320 	sub.w	r3, r0, #32
    6590:	4293      	cmp	r3, r2
    6592:	d806      	bhi.n	65a2 <z_check_thread_stack_fail+0x26>
    6594:	4282      	cmp	r2, r0
    6596:	d204      	bcs.n	65a2 <z_check_thread_stack_fail+0x26>
    6598:	4281      	cmp	r1, r0
    659a:	bf2c      	ite	cs
    659c:	2100      	movcs	r1, #0
    659e:	2101      	movcc	r1, #1
    65a0:	e000      	b.n	65a4 <z_check_thread_stack_fail+0x28>
    65a2:	2100      	movs	r1, #0
    65a4:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    65a6:	bf08      	it	eq
    65a8:	2000      	moveq	r0, #0
}
    65aa:	4770      	bx	lr
    65ac:	20003490 	.word	0x20003490

000065b0 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    65b0:	b508      	push	{r3, lr}
    65b2:	4604      	mov	r4, r0
    65b4:	460e      	mov	r6, r1
    65b6:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    65b8:	f000 faf8 	bl	6bac <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    65bc:	4b08      	ldr	r3, [pc, #32]	; (65e0 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    65be:	4620      	mov	r0, r4
	_current = main_thread;
    65c0:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    65c2:	f000 faff 	bl	6bc4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    65c6:	4628      	mov	r0, r5
    65c8:	f386 8809 	msr	PSP, r6
    65cc:	2100      	movs	r1, #0
    65ce:	b663      	cpsie	if
    65d0:	f381 8811 	msr	BASEPRI, r1
    65d4:	f3bf 8f6f 	isb	sy
    65d8:	2200      	movs	r2, #0
    65da:	2300      	movs	r3, #0
    65dc:	f01d fe9c 	bl	24318 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    65e0:	20003490 	.word	0x20003490

000065e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    65e4:	4901      	ldr	r1, [pc, #4]	; (65ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    65e6:	2210      	movs	r2, #16
	str	r2, [r1]
    65e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    65ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    65ec:	e000ed10 	.word	0xe000ed10

000065f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    65f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    65f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    65f4:	f380 8811 	msr	BASEPRI, r0
	isb
    65f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    65fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6600:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    6602:	b662      	cpsie	i
	isb
    6604:	f3bf 8f6f 	isb	sy

	bx	lr
    6608:	4770      	bx	lr
    660a:	bf00      	nop

0000660c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    660c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    660e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6610:	f381 8811 	msr	BASEPRI, r1

	wfe
    6614:	bf20      	wfe

	msr	BASEPRI, r0
    6616:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    661a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    661c:	4770      	bx	lr
    661e:	bf00      	nop

00006620 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6620:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6622:	4605      	mov	r5, r0

	if (esf != NULL) {
    6624:	460c      	mov	r4, r1
    6626:	b1c9      	cbz	r1, 665c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    6628:	688b      	ldr	r3, [r1, #8]
    662a:	9300      	str	r3, [sp, #0]
    662c:	e9d1 2300 	ldrd	r2, r3, [r1]
    6630:	480e      	ldr	r0, [pc, #56]	; (666c <z_arm_fatal_error+0x4c>)
    6632:	2145      	movs	r1, #69	; 0x45
    6634:	f01d fe02 	bl	2423c <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6638:	6963      	ldr	r3, [r4, #20]
    663a:	9300      	str	r3, [sp, #0]
    663c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    6640:	2145      	movs	r1, #69	; 0x45
    6642:	480b      	ldr	r0, [pc, #44]	; (6670 <z_arm_fatal_error+0x50>)
    6644:	f01d fdfa 	bl	2423c <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6648:	69e2      	ldr	r2, [r4, #28]
    664a:	480a      	ldr	r0, [pc, #40]	; (6674 <z_arm_fatal_error+0x54>)
    664c:	2145      	movs	r1, #69	; 0x45
    664e:	f01d fdf5 	bl	2423c <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6652:	69a2      	ldr	r2, [r4, #24]
    6654:	4808      	ldr	r0, [pc, #32]	; (6678 <z_arm_fatal_error+0x58>)
    6656:	2145      	movs	r1, #69	; 0x45
    6658:	f01d fdf0 	bl	2423c <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    665c:	4621      	mov	r1, r4
    665e:	4628      	mov	r0, r5
}
    6660:	b003      	add	sp, #12
    6662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    6666:	f019 bde5 	b.w	20234 <z_fatal_error>
    666a:	bf00      	nop
    666c:	0002c2bd 	.word	0x0002c2bd
    6670:	0002c2f1 	.word	0x0002c2f1
    6674:	0002c325 	.word	0x0002c325
    6678:	0002c339 	.word	0x0002c339

0000667c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    667c:	bf30      	wfi
    b z_SysNmiOnReset
    667e:	f7ff bffd 	b.w	667c <z_SysNmiOnReset>
    6682:	bf00      	nop

00006684 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6684:	4a0e      	ldr	r2, [pc, #56]	; (66c0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    6686:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6688:	4b0e      	ldr	r3, [pc, #56]	; (66c4 <z_arm_prep_c+0x40>)
    668a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    668e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6690:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6694:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6698:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    669c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    66a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    66a4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    66a8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    66ac:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    66b0:	f019 fe5c 	bl	2036c <z_bss_zero>
	z_data_copy();
    66b4:	f01b ff04 	bl	224c0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    66b8:	f000 fa4a 	bl	6b50 <z_arm_interrupt_init>
	z_cstart();
    66bc:	f019 fe7a 	bl	203b4 <z_cstart>
    66c0:	00001000 	.word	0x00001000
    66c4:	e000ed00 	.word	0xe000ed00

000066c8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    66c8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    66ca:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    66cc:	4a0b      	ldr	r2, [pc, #44]	; (66fc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    66ce:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    66d0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    66d2:	bf1e      	ittt	ne
	movne	r1, #0
    66d4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    66d6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    66d8:	f023 fd5f 	blne	2a19a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    66dc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    66de:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    66e2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    66e6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    66ea:	4905      	ldr	r1, [pc, #20]	; (6700 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    66ec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    66ee:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    66f0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    66f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    66f6:	4903      	ldr	r1, [pc, #12]	; (6704 <_isr_wrapper+0x3c>)
	bx r1
    66f8:	4708      	bx	r1
    66fa:	0000      	.short	0x0000
	ldr r2, =_kernel
    66fc:	20003490 	.word	0x20003490
	ldr r1, =_sw_isr_table
    6700:	0002a5a4 	.word	0x0002a5a4
	ldr r1, =z_arm_int_exit
    6704:	00006b35 	.word	0x00006b35

00006708 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    6708:	f01f fd7b 	bl	26202 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    670c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    670e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6712:	4808      	ldr	r0, [pc, #32]	; (6734 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6714:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    6718:	1840      	adds	r0, r0, r1
    msr PSP, r0
    671a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    671e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6722:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6724:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6726:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    672a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    672e:	f7ff ffa9 	bl	6684 <z_arm_prep_c>
    6732:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    6734:	200050c0 	.word	0x200050c0

00006738 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6738:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    673c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6740:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6742:	4672      	mov	r2, lr
	bl z_arm_fault
    6744:	f000 f92c 	bl	69a0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6748:	bd01      	pop	{r0, pc}
    674a:	bf00      	nop

0000674c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    674c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6750:	4c36      	ldr	r4, [pc, #216]	; (682c <mem_manage_fault+0xe0>)
{
    6752:	4605      	mov	r5, r0
    6754:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6756:	4836      	ldr	r0, [pc, #216]	; (6830 <mem_manage_fault+0xe4>)
    6758:	2145      	movs	r1, #69	; 0x45
{
    675a:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    675c:	f01d fd6e 	bl	2423c <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6760:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6762:	06d7      	lsls	r7, r2, #27
    6764:	d503      	bpl.n	676e <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6766:	2145      	movs	r1, #69	; 0x45
    6768:	4832      	ldr	r0, [pc, #200]	; (6834 <mem_manage_fault+0xe8>)
    676a:	f01d fd67 	bl	2423c <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    676e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6770:	0718      	lsls	r0, r3, #28
    6772:	d503      	bpl.n	677c <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
    6774:	2145      	movs	r1, #69	; 0x45
    6776:	4830      	ldr	r0, [pc, #192]	; (6838 <mem_manage_fault+0xec>)
    6778:	f01d fd60 	bl	2423c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    677c:	4c2b      	ldr	r4, [pc, #172]	; (682c <mem_manage_fault+0xe0>)
    677e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6780:	0799      	lsls	r1, r3, #30
    6782:	d422      	bmi.n	67ca <mem_manage_fault+0x7e>
	uint32_t mmfar = -EINVAL;
    6784:	f06f 0715 	mvn.w	r7, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6788:	4c28      	ldr	r4, [pc, #160]	; (682c <mem_manage_fault+0xe0>)
    678a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    678c:	07d3      	lsls	r3, r2, #31
    678e:	d503      	bpl.n	6798 <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
    6790:	2145      	movs	r1, #69	; 0x45
    6792:	482a      	ldr	r0, [pc, #168]	; (683c <mem_manage_fault+0xf0>)
    6794:	f01d fd52 	bl	2423c <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    679a:	069c      	lsls	r4, r3, #26
    679c:	d503      	bpl.n	67a6 <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
    679e:	2145      	movs	r1, #69	; 0x45
    67a0:	4827      	ldr	r0, [pc, #156]	; (6840 <mem_manage_fault+0xf4>)
    67a2:	f01d fd4b 	bl	2423c <printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    67a6:	4c21      	ldr	r4, [pc, #132]	; (682c <mem_manage_fault+0xe0>)
    67a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    67aa:	06d8      	lsls	r0, r3, #27
    67ac:	d422      	bmi.n	67f4 <mem_manage_fault+0xa8>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    67ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    67b0:	0799      	lsls	r1, r3, #30
    67b2:	d41f      	bmi.n	67f4 <mem_manage_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    67b4:	2500      	movs	r5, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    67b6:	4a1d      	ldr	r2, [pc, #116]	; (682c <mem_manage_fault+0xe0>)
    67b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    67ba:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    67be:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    67c0:	2300      	movs	r3, #0
    67c2:	7033      	strb	r3, [r6, #0]

	return reason;
}
    67c4:	4628      	mov	r0, r5
    67c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    67ca:	2145      	movs	r1, #69	; 0x45
    67cc:	481d      	ldr	r0, [pc, #116]	; (6844 <mem_manage_fault+0xf8>)
    67ce:	f01d fd35 	bl	2423c <printk>
		uint32_t temp = SCB->MMFAR;
    67d2:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    67d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    67d6:	061a      	lsls	r2, r3, #24
    67d8:	d5d4      	bpl.n	6784 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    67da:	463a      	mov	r2, r7
    67dc:	2145      	movs	r1, #69	; 0x45
    67de:	481a      	ldr	r0, [pc, #104]	; (6848 <mem_manage_fault+0xfc>)
    67e0:	f01d fd2c 	bl	2423c <printk>
			if (from_hard_fault) {
    67e4:	f1b8 0f00 	cmp.w	r8, #0
    67e8:	d0ce      	beq.n	6788 <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    67ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    67ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    67f0:	62a3      	str	r3, [r4, #40]	; 0x28
    67f2:	e7c9      	b.n	6788 <mem_manage_fault+0x3c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    67f4:	6863      	ldr	r3, [r4, #4]
    67f6:	051a      	lsls	r2, r3, #20
    67f8:	d5dc      	bpl.n	67b4 <mem_manage_fault+0x68>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    67fa:	4629      	mov	r1, r5
    67fc:	4638      	mov	r0, r7
    67fe:	f7ff febd 	bl	657c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    6802:	4605      	mov	r5, r0
    6804:	b118      	cbz	r0, 680e <mem_manage_fault+0xc2>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6806:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    680a:	2502      	movs	r5, #2
    680c:	e7d3      	b.n	67b6 <mem_manage_fault+0x6a>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    680e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6810:	06db      	lsls	r3, r3, #27
    6812:	d5cf      	bpl.n	67b4 <mem_manage_fault+0x68>
    6814:	f44f 72a1 	mov.w	r2, #322	; 0x142
    6818:	490c      	ldr	r1, [pc, #48]	; (684c <mem_manage_fault+0x100>)
    681a:	480d      	ldr	r0, [pc, #52]	; (6850 <mem_manage_fault+0x104>)
    681c:	f01d fd0e 	bl	2423c <printk>
    6820:	f44f 71a1 	mov.w	r1, #322	; 0x142
    6824:	4809      	ldr	r0, [pc, #36]	; (684c <mem_manage_fault+0x100>)
    6826:	f01d ffbb 	bl	247a0 <assert_post_action>
    682a:	e7c4      	b.n	67b6 <mem_manage_fault+0x6a>
    682c:	e000ed00 	.word	0xe000ed00
    6830:	0002c412 	.word	0x0002c412
    6834:	0002c42d 	.word	0x0002c42d
    6838:	0002c465 	.word	0x0002c465
    683c:	0002c4b5 	.word	0x0002c4b5
    6840:	0002c4d9 	.word	0x0002c4d9
    6844:	0002c47d 	.word	0x0002c47d
    6848:	0002c49a 	.word	0x0002c49a
    684c:	0002c50d 	.word	0x0002c50d
    6850:	0002bced 	.word	0x0002bced

00006854 <bus_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6854:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6856:	4c23      	ldr	r4, [pc, #140]	; (68e4 <bus_fault.isra.2+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6858:	4606      	mov	r6, r0
    685a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    685c:	4822      	ldr	r0, [pc, #136]	; (68e8 <bus_fault.isra.2+0x94>)
    685e:	2145      	movs	r1, #69	; 0x45
    6860:	f01d fcec 	bl	2423c <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6864:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6866:	04d1      	lsls	r1, r2, #19
    6868:	d503      	bpl.n	6872 <bus_fault.isra.2+0x1e>
		PR_FAULT_INFO("  Stacking error");
    686a:	2145      	movs	r1, #69	; 0x45
    686c:	481f      	ldr	r0, [pc, #124]	; (68ec <bus_fault.isra.2+0x98>)
    686e:	f01d fce5 	bl	2423c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6874:	051a      	lsls	r2, r3, #20
    6876:	d503      	bpl.n	6880 <bus_fault.isra.2+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    6878:	2145      	movs	r1, #69	; 0x45
    687a:	481d      	ldr	r0, [pc, #116]	; (68f0 <bus_fault.isra.2+0x9c>)
    687c:	f01d fcde 	bl	2423c <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6880:	4c18      	ldr	r4, [pc, #96]	; (68e4 <bus_fault.isra.2+0x90>)
    6882:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6884:	059b      	lsls	r3, r3, #22
    6886:	d510      	bpl.n	68aa <bus_fault.isra.2+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    6888:	481a      	ldr	r0, [pc, #104]	; (68f4 <bus_fault.isra.2+0xa0>)
    688a:	2145      	movs	r1, #69	; 0x45
    688c:	f01d fcd6 	bl	2423c <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6890:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6894:	0418      	lsls	r0, r3, #16
    6896:	d508      	bpl.n	68aa <bus_fault.isra.2+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6898:	2145      	movs	r1, #69	; 0x45
    689a:	4817      	ldr	r0, [pc, #92]	; (68f8 <bus_fault.isra.2+0xa4>)
    689c:	f01d fcce 	bl	2423c <printk>
			if (from_hard_fault) {
    68a0:	b11e      	cbz	r6, 68aa <bus_fault.isra.2+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    68a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    68a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    68a8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    68aa:	4c0e      	ldr	r4, [pc, #56]	; (68e4 <bus_fault.isra.2+0x90>)
    68ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    68ae:	0559      	lsls	r1, r3, #21
    68b0:	d503      	bpl.n	68ba <bus_fault.isra.2+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    68b2:	2145      	movs	r1, #69	; 0x45
    68b4:	4811      	ldr	r0, [pc, #68]	; (68fc <bus_fault.isra.2+0xa8>)
    68b6:	f01d fcc1 	bl	2423c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    68ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    68bc:	05da      	lsls	r2, r3, #23
    68be:	d50b      	bpl.n	68d8 <bus_fault.isra.2+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    68c0:	480f      	ldr	r0, [pc, #60]	; (6900 <bus_fault.isra.2+0xac>)
    68c2:	2145      	movs	r1, #69	; 0x45
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    68c4:	f01d fcba 	bl	2423c <printk>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    68c8:	4a06      	ldr	r2, [pc, #24]	; (68e4 <bus_fault.isra.2+0x90>)
    68ca:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    68cc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    68ce:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    68d2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    68d4:	7028      	strb	r0, [r5, #0]

	return reason;
}
    68d6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    68d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    68da:	049b      	lsls	r3, r3, #18
    68dc:	d5f4      	bpl.n	68c8 <bus_fault.isra.2+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    68de:	2145      	movs	r1, #69	; 0x45
    68e0:	4808      	ldr	r0, [pc, #32]	; (6904 <bus_fault.isra.2+0xb0>)
    68e2:	e7ef      	b.n	68c4 <bus_fault.isra.2+0x70>
    68e4:	e000ed00 	.word	0xe000ed00
    68e8:	0002c36c 	.word	0x0002c36c
    68ec:	0002c387 	.word	0x0002c387
    68f0:	0002c465 	.word	0x0002c465
    68f4:	0002c39d 	.word	0x0002c39d
    68f8:	0002c3bb 	.word	0x0002c3bb
    68fc:	0002c3d5 	.word	0x0002c3d5
    6900:	0002c3f5 	.word	0x0002c3f5
    6904:	0002c4d9 	.word	0x0002c4d9

00006908 <usage_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6908:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    690a:	4c1d      	ldr	r4, [pc, #116]	; (6980 <usage_fault.isra.3+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    690c:	481d      	ldr	r0, [pc, #116]	; (6984 <usage_fault.isra.3+0x7c>)
    690e:	2145      	movs	r1, #69	; 0x45
    6910:	f01d fc94 	bl	2423c <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6914:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6916:	0193      	lsls	r3, r2, #6
    6918:	d503      	bpl.n	6922 <usage_fault.isra.3+0x1a>
		PR_FAULT_INFO("  Division by zero");
    691a:	2145      	movs	r1, #69	; 0x45
    691c:	481a      	ldr	r0, [pc, #104]	; (6988 <usage_fault.isra.3+0x80>)
    691e:	f01d fc8d 	bl	2423c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6922:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6924:	01dc      	lsls	r4, r3, #7
    6926:	d503      	bpl.n	6930 <usage_fault.isra.3+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    6928:	2145      	movs	r1, #69	; 0x45
    692a:	4818      	ldr	r0, [pc, #96]	; (698c <usage_fault.isra.3+0x84>)
    692c:	f01d fc86 	bl	2423c <printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6930:	4c13      	ldr	r4, [pc, #76]	; (6980 <usage_fault.isra.3+0x78>)
    6932:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6934:	0310      	lsls	r0, r2, #12
    6936:	d503      	bpl.n	6940 <usage_fault.isra.3+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
    6938:	2145      	movs	r1, #69	; 0x45
    693a:	4815      	ldr	r0, [pc, #84]	; (6990 <usage_fault.isra.3+0x88>)
    693c:	f01d fc7e 	bl	2423c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6940:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6942:	0359      	lsls	r1, r3, #13
    6944:	d503      	bpl.n	694e <usage_fault.isra.3+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6946:	2145      	movs	r1, #69	; 0x45
    6948:	4812      	ldr	r0, [pc, #72]	; (6994 <usage_fault.isra.3+0x8c>)
    694a:	f01d fc77 	bl	2423c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    694e:	4c0c      	ldr	r4, [pc, #48]	; (6980 <usage_fault.isra.3+0x78>)
    6950:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6952:	0392      	lsls	r2, r2, #14
    6954:	d503      	bpl.n	695e <usage_fault.isra.3+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6956:	2145      	movs	r1, #69	; 0x45
    6958:	480f      	ldr	r0, [pc, #60]	; (6998 <usage_fault.isra.3+0x90>)
    695a:	f01d fc6f 	bl	2423c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    695e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6960:	03db      	lsls	r3, r3, #15
    6962:	d503      	bpl.n	696c <usage_fault.isra.3+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6964:	2145      	movs	r1, #69	; 0x45
    6966:	480d      	ldr	r0, [pc, #52]	; (699c <usage_fault.isra.3+0x94>)
    6968:	f01d fc68 	bl	2423c <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    696c:	4a04      	ldr	r2, [pc, #16]	; (6980 <usage_fault.isra.3+0x78>)
    696e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6970:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6974:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6978:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    697a:	2000      	movs	r0, #0
    697c:	bd10      	pop	{r4, pc}
    697e:	bf00      	nop
    6980:	e000ed00 	.word	0xe000ed00
    6984:	0002c547 	.word	0x0002c547
    6988:	0002c564 	.word	0x0002c564
    698c:	0002c57c 	.word	0x0002c57c
    6990:	0002c59b 	.word	0x0002c59b
    6994:	0002c5be 	.word	0x0002c5be
    6998:	0002c5e8 	.word	0x0002c5e8
    699c:	0002c607 	.word	0x0002c607

000069a0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    69a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    69a4:	4b51      	ldr	r3, [pc, #324]	; (6aec <z_arm_fault+0x14c>)
    69a6:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    69aa:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    69ac:	f3c8 0708 	ubfx	r7, r8, #0, #9
    69b0:	2500      	movs	r5, #0
    69b2:	f385 8811 	msr	BASEPRI, r5
    69b6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    69ba:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    69be:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    69c2:	d107      	bne.n	69d4 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    69c4:	f002 030c 	and.w	r3, r2, #12
    69c8:	2b08      	cmp	r3, #8
    69ca:	d110      	bne.n	69ee <z_arm_fault+0x4e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    69cc:	2145      	movs	r1, #69	; 0x45
    69ce:	4848      	ldr	r0, [pc, #288]	; (6af0 <z_arm_fault+0x150>)
    69d0:	f01d fc34 	bl	2423c <printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    69d4:	f240 32c5 	movw	r2, #965	; 0x3c5
    69d8:	4946      	ldr	r1, [pc, #280]	; (6af4 <z_arm_fault+0x154>)
    69da:	4847      	ldr	r0, [pc, #284]	; (6af8 <z_arm_fault+0x158>)
    69dc:	f01d fc2e 	bl	2423c <printk>
    69e0:	f240 31c5 	movw	r1, #965	; 0x3c5
    69e4:	4843      	ldr	r0, [pc, #268]	; (6af4 <z_arm_fault+0x154>)
    69e6:	f01d fedb 	bl	247a0 <assert_post_action>
    69ea:	2600      	movs	r6, #0
    69ec:	e006      	b.n	69fc <z_arm_fault+0x5c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    69ee:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    69f0:	bf4e      	itee	mi
    69f2:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
    69f4:	4606      	movpl	r6, r0
			*nested_exc = true;
    69f6:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    69f8:	2e00      	cmp	r6, #0
    69fa:	d0eb      	beq.n	69d4 <z_arm_fault+0x34>
	*recoverable = false;
    69fc:	2300      	movs	r3, #0
	switch (fault) {
    69fe:	1efa      	subs	r2, r7, #3
	*recoverable = false;
    6a00:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6a04:	461c      	mov	r4, r3
    6a06:	4613      	mov	r3, r2
    6a08:	2b09      	cmp	r3, #9
    6a0a:	d85c      	bhi.n	6ac6 <z_arm_fault+0x126>
    6a0c:	e8df f003 	tbb	[pc, r3]
    6a10:	34545005 	.word	0x34545005
    6a14:	5b5b5b5b 	.word	0x5b5b5b5b
    6a18:	585b      	.short	0x585b
	PR_FAULT_INFO("***** HARD FAULT *****");
    6a1a:	2145      	movs	r1, #69	; 0x45
    6a1c:	4837      	ldr	r0, [pc, #220]	; (6afc <z_arm_fault+0x15c>)
    6a1e:	f01d fc0d 	bl	2423c <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6a22:	4b32      	ldr	r3, [pc, #200]	; (6aec <z_arm_fault+0x14c>)
	*recoverable = false;
    6a24:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6a28:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    6a2a:	f014 0402 	ands.w	r4, r4, #2
    6a2e:	d005      	beq.n	6a3c <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
    6a30:	4833      	ldr	r0, [pc, #204]	; (6b00 <z_arm_fault+0x160>)
    6a32:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    6a34:	f01d fc02 	bl	2423c <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6a38:	2400      	movs	r4, #0
    6a3a:	e020      	b.n	6a7e <z_arm_fault+0xde>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6a3e:	005b      	lsls	r3, r3, #1
    6a40:	d51d      	bpl.n	6a7e <z_arm_fault+0xde>
		PR_EXC("  Fault escalation (see below)");
    6a42:	2145      	movs	r1, #69	; 0x45
    6a44:	482f      	ldr	r0, [pc, #188]	; (6b04 <z_arm_fault+0x164>)
    6a46:	f01d fbf9 	bl	2423c <printk>
		if (SCB_MMFSR != 0) {
    6a4a:	4b2f      	ldr	r3, [pc, #188]	; (6b08 <z_arm_fault+0x168>)
    6a4c:	781b      	ldrb	r3, [r3, #0]
    6a4e:	b133      	cbz	r3, 6a5e <z_arm_fault+0xbe>
			reason = mem_manage_fault(esf, 1, recoverable);
    6a50:	f10d 0207 	add.w	r2, sp, #7
    6a54:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6a56:	4630      	mov	r0, r6
    6a58:	f7ff fe78 	bl	674c <mem_manage_fault>
    6a5c:	e00e      	b.n	6a7c <z_arm_fault+0xdc>
		} else if (SCB_BFSR != 0) {
    6a5e:	4b2b      	ldr	r3, [pc, #172]	; (6b0c <z_arm_fault+0x16c>)
    6a60:	781b      	ldrb	r3, [r3, #0]
    6a62:	b12b      	cbz	r3, 6a70 <z_arm_fault+0xd0>
			reason = bus_fault(esf, 1, recoverable);
    6a64:	f10d 0107 	add.w	r1, sp, #7
    6a68:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6a6a:	f7ff fef3 	bl	6854 <bus_fault.isra.2>
    6a6e:	e005      	b.n	6a7c <z_arm_fault+0xdc>
		} else if (SCB_UFSR != 0) {
    6a70:	4b27      	ldr	r3, [pc, #156]	; (6b10 <z_arm_fault+0x170>)
    6a72:	881b      	ldrh	r3, [r3, #0]
    6a74:	b29b      	uxth	r3, r3
    6a76:	b113      	cbz	r3, 6a7e <z_arm_fault+0xde>
			reason = usage_fault(esf);
    6a78:	f7ff ff46 	bl	6908 <usage_fault.isra.3>
    6a7c:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    6a7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6a82:	b993      	cbnz	r3, 6aaa <z_arm_fault+0x10a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6a84:	2220      	movs	r2, #32
    6a86:	4631      	mov	r1, r6
    6a88:	a802      	add	r0, sp, #8
    6a8a:	f01f fb69 	bl	26160 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    6a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a90:	b335      	cbz	r5, 6ae0 <z_arm_fault+0x140>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6a96:	b922      	cbnz	r2, 6aa2 <z_arm_fault+0x102>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6a98:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6a9c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6aa0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6aa2:	a902      	add	r1, sp, #8
    6aa4:	4620      	mov	r0, r4
    6aa6:	f7ff fdbb 	bl	6620 <z_arm_fatal_error>
}
    6aaa:	b00a      	add	sp, #40	; 0x28
    6aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6ab0:	f10d 0207 	add.w	r2, sp, #7
    6ab4:	2100      	movs	r1, #0
    6ab6:	e7ce      	b.n	6a56 <z_arm_fault+0xb6>
		reason = bus_fault(esf, 0, recoverable);
    6ab8:	f10d 0107 	add.w	r1, sp, #7
    6abc:	2000      	movs	r0, #0
    6abe:	e7d4      	b.n	6a6a <z_arm_fault+0xca>
	PR_FAULT_INFO(
    6ac0:	2145      	movs	r1, #69	; 0x45
    6ac2:	4814      	ldr	r0, [pc, #80]	; (6b14 <z_arm_fault+0x174>)
    6ac4:	e7b6      	b.n	6a34 <z_arm_fault+0x94>
	PR_FAULT_INFO("***** %s %d) *****",
    6ac6:	4914      	ldr	r1, [pc, #80]	; (6b18 <z_arm_fault+0x178>)
    6ac8:	4a14      	ldr	r2, [pc, #80]	; (6b1c <z_arm_fault+0x17c>)
    6aca:	4815      	ldr	r0, [pc, #84]	; (6b20 <z_arm_fault+0x180>)
    6acc:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    6ad0:	bf08      	it	eq
    6ad2:	460a      	moveq	r2, r1
    6ad4:	f1a7 0310 	sub.w	r3, r7, #16
    6ad8:	2145      	movs	r1, #69	; 0x45
    6ada:	f01d fbaf 	bl	2423c <printk>
    6ade:	e7ab      	b.n	6a38 <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6ae0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6ae4:	f023 0301 	bic.w	r3, r3, #1
    6ae8:	e7da      	b.n	6aa0 <z_arm_fault+0x100>
    6aea:	bf00      	nop
    6aec:	e000ed00 	.word	0xe000ed00
    6af0:	0002c665 	.word	0x0002c665
    6af4:	0002c50d 	.word	0x0002c50d
    6af8:	0002bced 	.word	0x0002bced
    6afc:	0002c695 	.word	0x0002c695
    6b00:	0002c6b1 	.word	0x0002c6b1
    6b04:	0002c6d7 	.word	0x0002c6d7
    6b08:	e000ed28 	.word	0xe000ed28
    6b0c:	e000ed29 	.word	0xe000ed29
    6b10:	e000ed2a 	.word	0xe000ed2a
    6b14:	0002c6fb 	.word	0x0002c6fb
    6b18:	0002c637 	.word	0x0002c637
    6b1c:	0002c64c 	.word	0x0002c64c
    6b20:	0002c736 	.word	0x0002c736

00006b24 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6b24:	4a02      	ldr	r2, [pc, #8]	; (6b30 <z_arm_fault_init+0xc>)
    6b26:	6953      	ldr	r3, [r2, #20]
    6b28:	f043 0310 	orr.w	r3, r3, #16
    6b2c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6b2e:	4770      	bx	lr
    6b30:	e000ed00 	.word	0xe000ed00

00006b34 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6b34:	4b04      	ldr	r3, [pc, #16]	; (6b48 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6b36:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6b38:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    6b3a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6b3c:	d003      	beq.n	6b46 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6b3e:	4903      	ldr	r1, [pc, #12]	; (6b4c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6b44:	600a      	str	r2, [r1, #0]

00006b46 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6b46:	4770      	bx	lr
	ldr r3, =_kernel
    6b48:	20003490 	.word	0x20003490
	ldr r1, =_SCS_ICSR
    6b4c:	e000ed04 	.word	0xe000ed04

00006b50 <z_arm_interrupt_init>:
    6b50:	4804      	ldr	r0, [pc, #16]	; (6b64 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6b52:	2300      	movs	r3, #0
    6b54:	2120      	movs	r1, #32
    6b56:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6b58:	3301      	adds	r3, #1
    6b5a:	2b30      	cmp	r3, #48	; 0x30
    6b5c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    6b60:	d1f9      	bne.n	6b56 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    6b62:	4770      	bx	lr
    6b64:	e000e100 	.word	0xe000e100

00006b68 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    6b68:	b508      	push	{r3, lr}
	if (_current == thread) {
    6b6a:	4b0e      	ldr	r3, [pc, #56]	; (6ba4 <z_impl_k_thread_abort+0x3c>)
    6b6c:	689b      	ldr	r3, [r3, #8]
    6b6e:	4283      	cmp	r3, r0
    6b70:	d107      	bne.n	6b82 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6b72:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6b76:	b193      	cbz	r3, 6b9e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6b78:	4a0b      	ldr	r2, [pc, #44]	; (6ba8 <z_impl_k_thread_abort+0x40>)
    6b7a:	6853      	ldr	r3, [r2, #4]
    6b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6b80:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    6b82:	f01a fd61 	bl	21648 <z_thread_single_abort>
	__asm__ volatile(
    6b86:	f04f 0320 	mov.w	r3, #32
    6b8a:	f3ef 8011 	mrs	r0, BASEPRI
    6b8e:	f383 8811 	msr	BASEPRI, r3
    6b92:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    6b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    6b9a:	f023 bb61 	b.w	2a260 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    6b9e:	f01b fb91 	bl	222c4 <z_self_abort>
    6ba2:	bf00      	nop
    6ba4:	20003490 	.word	0x20003490
    6ba8:	e000ed00 	.word	0xe000ed00

00006bac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6bac:	4b02      	ldr	r3, [pc, #8]	; (6bb8 <z_arm_configure_static_mpu_regions+0xc>)
    6bae:	4a03      	ldr	r2, [pc, #12]	; (6bbc <z_arm_configure_static_mpu_regions+0x10>)
    6bb0:	4803      	ldr	r0, [pc, #12]	; (6bc0 <z_arm_configure_static_mpu_regions+0x14>)
    6bb2:	2101      	movs	r1, #1
    6bb4:	f000 b8c0 	b.w	6d38 <arm_core_mpu_configure_static_mpu_regions>
    6bb8:	20040000 	.word	0x20040000
    6bbc:	20000000 	.word	0x20000000
    6bc0:	0002ade0 	.word	0x0002ade0

00006bc4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    6bc4:	6f42      	ldr	r2, [r0, #116]	; 0x74
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    6bc6:	4b05      	ldr	r3, [pc, #20]	; (6bdc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    6bc8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    6bca:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6bcc:	4a04      	ldr	r2, [pc, #16]	; (6be0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    6bce:	2120      	movs	r1, #32
    6bd0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6bd4:	4618      	mov	r0, r3
    6bd6:	2101      	movs	r1, #1
    6bd8:	f000 b8cc 	b.w	6d74 <arm_core_mpu_configure_dynamic_mpu_regions>
    6bdc:	20002068 	.word	0x20002068
    6be0:	150b0000 	.word	0x150b0000

00006be4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    6be6:	4f22      	ldr	r7, [pc, #136]	; (6c70 <mpu_configure_regions+0x8c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6be8:	2600      	movs	r6, #0
    6bea:	428e      	cmp	r6, r1
    6bec:	da0f      	bge.n	6c0e <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    6bee:	6844      	ldr	r4, [r0, #4]
    6bf0:	2c00      	cmp	r4, #0
    6bf2:	d039      	beq.n	6c68 <mpu_configure_regions+0x84>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6bf4:	b19b      	cbz	r3, 6c1e <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    6bf6:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6bfa:	ea14 0f0c 	tst.w	r4, ip
    6bfe:	d008      	beq.n	6c12 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    6c00:	481c      	ldr	r0, [pc, #112]	; (6c74 <mpu_configure_regions+0x90>)
    6c02:	4632      	mov	r2, r6
    6c04:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6c06:	f01d fb19 	bl	2423c <printk>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6c0a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6c0e:	4610      	mov	r0, r2
    6c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    6c12:	2c1f      	cmp	r4, #31
    6c14:	d9f4      	bls.n	6c00 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    6c16:	6805      	ldr	r5, [r0, #0]
		&&
    6c18:	ea1c 0f05 	tst.w	ip, r5
    6c1c:	d1f0      	bne.n	6c00 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    6c1e:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6c20:	b2d2      	uxtb	r2, r2
	region_conf.base = new_region->start;
    6c22:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    6c24:	f8d0 c008 	ldr.w	ip, [r0, #8]
    6c28:	d90f      	bls.n	6c4a <mpu_configure_regions+0x66>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    6c2a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    6c2e:	d80e      	bhi.n	6c4e <mpu_configure_regions+0x6a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    6c30:	3c01      	subs	r4, #1
    6c32:	fab4 f484 	clz	r4, r4
    6c36:	f1c4 041f 	rsb	r4, r4, #31
    6c3a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    6c3c:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    6c3e:	ea4c 0404 	orr.w	r4, ip, r4
    6c42:	d906      	bls.n	6c52 <mpu_configure_regions+0x6e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6c44:	2145      	movs	r1, #69	; 0x45
    6c46:	480c      	ldr	r0, [pc, #48]	; (6c78 <mpu_configure_regions+0x94>)
    6c48:	e7dd      	b.n	6c06 <mpu_configure_regions+0x22>
		return REGION_32B;
    6c4a:	2408      	movs	r4, #8
    6c4c:	e7f6      	b.n	6c3c <mpu_configure_regions+0x58>
		return REGION_4G;
    6c4e:	243e      	movs	r4, #62	; 0x3e
    6c50:	e7f4      	b.n	6c3c <mpu_configure_regions+0x58>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6c52:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    6c56:	4315      	orrs	r5, r2
    6c58:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6c5c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    6c60:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6c62:	60fd      	str	r5, [r7, #12]
		reg_index++;
    6c64:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6c66:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    6c68:	3601      	adds	r6, #1
    6c6a:	300c      	adds	r0, #12
    6c6c:	e7bd      	b.n	6bea <mpu_configure_regions+0x6>
    6c6e:	bf00      	nop
    6c70:	e000ed90 	.word	0xe000ed90
    6c74:	0002c792 	.word	0x0002c792
    6c78:	0002c7ba 	.word	0x0002c7ba

00006c7c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6c7c:	4b03      	ldr	r3, [pc, #12]	; (6c8c <arm_core_mpu_enable+0x10>)
    6c7e:	2205      	movs	r2, #5
    6c80:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6c82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6c86:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6c8a:	4770      	bx	lr
    6c8c:	e000ed90 	.word	0xe000ed90

00006c90 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6c90:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6c94:	4b01      	ldr	r3, [pc, #4]	; (6c9c <arm_core_mpu_disable+0xc>)
    6c96:	2200      	movs	r2, #0
    6c98:	605a      	str	r2, [r3, #4]
}
    6c9a:	4770      	bx	lr
    6c9c:	e000ed90 	.word	0xe000ed90

00006ca0 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6ca0:	4920      	ldr	r1, [pc, #128]	; (6d24 <arm_mpu_init+0x84>)
{
    6ca2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6ca4:	680c      	ldr	r4, [r1, #0]
    6ca6:	2c08      	cmp	r4, #8
    6ca8:	d90d      	bls.n	6cc6 <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    6caa:	f240 123f 	movw	r2, #319	; 0x13f
    6cae:	491e      	ldr	r1, [pc, #120]	; (6d28 <arm_mpu_init+0x88>)
    6cb0:	481e      	ldr	r0, [pc, #120]	; (6d2c <arm_mpu_init+0x8c>)
    6cb2:	f01d fac3 	bl	2423c <printk>
    6cb6:	481c      	ldr	r0, [pc, #112]	; (6d28 <arm_mpu_init+0x88>)
    6cb8:	f240 113f 	movw	r1, #319	; 0x13f
    6cbc:	f01d fd70 	bl	247a0 <assert_post_action>
    6cc0:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    6cc4:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    6cc6:	f7ff ffe3 	bl	6c90 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6cca:	6848      	ldr	r0, [r1, #4]
    6ccc:	4918      	ldr	r1, [pc, #96]	; (6d30 <arm_mpu_init+0x90>)
    6cce:	2200      	movs	r2, #0
    6cd0:	4294      	cmp	r4, r2
    6cd2:	f100 000c 	add.w	r0, r0, #12
    6cd6:	d115      	bne.n	6d04 <arm_mpu_init+0x64>
	static_regions_num = mpu_config.num_regions;
    6cd8:	4b16      	ldr	r3, [pc, #88]	; (6d34 <arm_mpu_init+0x94>)
    6cda:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    6cdc:	f7ff ffce 	bl	6c7c <arm_core_mpu_enable>
	__ASSERT(
    6ce0:	680b      	ldr	r3, [r1, #0]
    6ce2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6ce6:	2b08      	cmp	r3, #8
    6ce8:	d00a      	beq.n	6d00 <arm_mpu_init+0x60>
    6cea:	490f      	ldr	r1, [pc, #60]	; (6d28 <arm_mpu_init+0x88>)
    6cec:	480f      	ldr	r0, [pc, #60]	; (6d2c <arm_mpu_init+0x8c>)
    6cee:	f44f 72b2 	mov.w	r2, #356	; 0x164
    6cf2:	f01d faa3 	bl	2423c <printk>
    6cf6:	f44f 71b2 	mov.w	r1, #356	; 0x164
    6cfa:	480b      	ldr	r0, [pc, #44]	; (6d28 <arm_mpu_init+0x88>)
    6cfc:	f01d fd50 	bl	247a0 <assert_post_action>
	return 0;
    6d00:	2000      	movs	r0, #0
    6d02:	e7df      	b.n	6cc4 <arm_mpu_init+0x24>
	MPU->RNR = index;
    6d04:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d06:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    6d0a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6d0e:	4313      	orrs	r3, r2
    6d10:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6d14:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6d16:	f850 3c04 	ldr.w	r3, [r0, #-4]
    6d1a:	f043 0301 	orr.w	r3, r3, #1
    6d1e:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6d20:	3201      	adds	r2, #1
    6d22:	e7d5      	b.n	6cd0 <arm_mpu_init+0x30>
    6d24:	0002adec 	.word	0x0002adec
    6d28:	0002c752 	.word	0x0002c752
    6d2c:	0002bced 	.word	0x0002bced
    6d30:	e000ed90 	.word	0xe000ed90
    6d34:	20003545 	.word	0x20003545

00006d38 <arm_core_mpu_configure_static_mpu_regions>:
{
    6d38:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6d3a:	4c0b      	ldr	r4, [pc, #44]	; (6d68 <arm_core_mpu_configure_static_mpu_regions+0x30>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6d3c:	2301      	movs	r3, #1
    6d3e:	7822      	ldrb	r2, [r4, #0]
    6d40:	f7ff ff50 	bl	6be4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6d44:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6d46:	3016      	adds	r0, #22
    6d48:	d10c      	bne.n	6d64 <arm_core_mpu_configure_static_mpu_regions+0x2c>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    6d4a:	4908      	ldr	r1, [pc, #32]	; (6d6c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    6d4c:	4808      	ldr	r0, [pc, #32]	; (6d70 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    6d4e:	f240 1205 	movw	r2, #261	; 0x105
    6d52:	f01d fa73 	bl	2423c <printk>
    6d56:	f240 1105 	movw	r1, #261	; 0x105
    6d5a:	4804      	ldr	r0, [pc, #16]	; (6d6c <arm_core_mpu_configure_static_mpu_regions+0x34>)
}
    6d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    6d60:	f01d bd1e 	b.w	247a0 <assert_post_action>
}
    6d64:	bd10      	pop	{r4, pc}
    6d66:	bf00      	nop
    6d68:	20003545 	.word	0x20003545
    6d6c:	0002c752 	.word	0x0002c752
    6d70:	0002bced 	.word	0x0002bced

00006d74 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    6d74:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6d76:	4a0f      	ldr	r2, [pc, #60]	; (6db4 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    6d78:	2300      	movs	r3, #0
    6d7a:	7812      	ldrb	r2, [r2, #0]
    6d7c:	f7ff ff32 	bl	6be4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6d80:	f110 0f16 	cmn.w	r0, #22
    6d84:	d008      	beq.n	6d98 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    6d86:	4b0c      	ldr	r3, [pc, #48]	; (6db8 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
    6d88:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6d8a:	2807      	cmp	r0, #7
    6d8c:	dd00      	ble.n	6d90 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    6d8e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    6d90:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    6d92:	611a      	str	r2, [r3, #16]
    6d94:	3001      	adds	r0, #1
    6d96:	e7f8      	b.n	6d8a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    6d98:	4908      	ldr	r1, [pc, #32]	; (6dbc <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    6d9a:	4809      	ldr	r0, [pc, #36]	; (6dc0 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    6d9c:	f44f 7292 	mov.w	r2, #292	; 0x124
    6da0:	f01d fa4c 	bl	2423c <printk>
    6da4:	f44f 7192 	mov.w	r1, #292	; 0x124
    6da8:	4804      	ldr	r0, [pc, #16]	; (6dbc <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
}
    6daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    6dae:	f01d bcf7 	b.w	247a0 <assert_post_action>
    6db2:	bf00      	nop
    6db4:	20003545 	.word	0x20003545
    6db8:	e000ed90 	.word	0xe000ed90
    6dbc:	0002c752 	.word	0x0002c752
    6dc0:	0002bced 	.word	0x0002bced

00006dc4 <z_impl_zephyr_fputc>:
	_stdout_hook = hook;
}

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    6dc4:	3902      	subs	r1, #2
    6dc6:	2901      	cmp	r1, #1
    6dc8:	d802      	bhi.n	6dd0 <z_impl_zephyr_fputc+0xc>
    6dca:	4b03      	ldr	r3, [pc, #12]	; (6dd8 <z_impl_zephyr_fputc+0x14>)
    6dcc:	681b      	ldr	r3, [r3, #0]
    6dce:	4718      	bx	r3
}
    6dd0:	f04f 30ff 	mov.w	r0, #4294967295
    6dd4:	4770      	bx	lr
    6dd6:	bf00      	nop
    6dd8:	20000548 	.word	0x20000548

00006ddc <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    6ddc:	b40f      	push	{r0, r1, r2, r3}
    6dde:	b507      	push	{r0, r1, r2, lr}
    6de0:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    6de2:	2102      	movs	r1, #2
{
    6de4:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    6de8:	4804      	ldr	r0, [pc, #16]	; (6dfc <printf+0x20>)
	va_start(vargs, format);
    6dea:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    6dec:	f7fd fb28 	bl	4440 <cbvprintf>
	va_end(vargs);

	return r;
}
    6df0:	b003      	add	sp, #12
    6df2:	f85d eb04 	ldr.w	lr, [sp], #4
    6df6:	b004      	add	sp, #16
    6df8:	4770      	bx	lr
    6dfa:	bf00      	nop
    6dfc:	000261ff 	.word	0x000261ff

00006e00 <nordicsemi_nrf52_init>:
    6e00:	f04f 0320 	mov.w	r3, #32
    6e04:	f3ef 8211 	mrs	r2, BASEPRI
    6e08:	f383 8811 	msr	BASEPRI, r3
    6e0c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6e10:	4906      	ldr	r1, [pc, #24]	; (6e2c <nordicsemi_nrf52_init+0x2c>)
    6e12:	2301      	movs	r3, #1
    6e14:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6e18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6e1c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    6e20:	f382 8811 	msr	BASEPRI, r2
    6e24:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6e28:	2000      	movs	r0, #0
    6e2a:	4770      	bx	lr
    6e2c:	4001e000 	.word	0x4001e000

00006e30 <sys_arch_reboot>:
    *p_gpregret = val;
    6e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e34:	b2c0      	uxtb	r0, r0
    6e36:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    6e3a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6e3e:	4905      	ldr	r1, [pc, #20]	; (6e54 <sys_arch_reboot+0x24>)
    6e40:	4b05      	ldr	r3, [pc, #20]	; (6e58 <sys_arch_reboot+0x28>)
    6e42:	68ca      	ldr	r2, [r1, #12]
    6e44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6e48:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6e4a:	60cb      	str	r3, [r1, #12]
    6e4c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6e50:	bf00      	nop
    6e52:	e7fd      	b.n	6e50 <sys_arch_reboot+0x20>
    6e54:	e000ed00 	.word	0xe000ed00
    6e58:	05fa0004 	.word	0x05fa0004

00006e5c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6e5c:	b120      	cbz	r0, 6e68 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    6e5e:	4b03      	ldr	r3, [pc, #12]	; (6e6c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6e60:	0180      	lsls	r0, r0, #6
    6e62:	f043 0301 	orr.w	r3, r3, #1
    6e66:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6e68:	4770      	bx	lr
    6e6a:	bf00      	nop
    6e6c:	0002ab80 	.word	0x0002ab80

00006e70 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
    6e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e74:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
    6e78:	07db      	lsls	r3, r3, #31
    6e7a:	d52e      	bpl.n	6eda <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
    6e7c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6e80:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    6e84:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
    6e88:	2b07      	cmp	r3, #7
    6e8a:	d126      	bne.n	6eda <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    6e8c:	4b14      	ldr	r3, [pc, #80]	; (6ee0 <board_nrf52840dongle_nrf52840_init+0x70>)
    6e8e:	2201      	movs	r2, #1
    6e90:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    6e94:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6e98:	2a00      	cmp	r2, #0
    6e9a:	d0fb      	beq.n	6e94 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
    6e9c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
    6ea0:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
    6ea4:	f022 0207 	bic.w	r2, r2, #7
    6ea8:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
    6eac:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    6eb0:	2200      	movs	r2, #0
    6eb2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    6eb6:	4a0a      	ldr	r2, [pc, #40]	; (6ee0 <board_nrf52840dongle_nrf52840_init+0x70>)
    6eb8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d0fb      	beq.n	6eb8 <board_nrf52840dongle_nrf52840_init+0x48>
    6ec0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6ec4:	4907      	ldr	r1, [pc, #28]	; (6ee4 <board_nrf52840dongle_nrf52840_init+0x74>)
    6ec6:	4b08      	ldr	r3, [pc, #32]	; (6ee8 <board_nrf52840dongle_nrf52840_init+0x78>)
    6ec8:	68ca      	ldr	r2, [r1, #12]
    6eca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6ece:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6ed0:	60cb      	str	r3, [r1, #12]
    6ed2:	f3bf 8f4f 	dsb	sy
    __NOP();
    6ed6:	bf00      	nop
    6ed8:	e7fd      	b.n	6ed6 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
    6eda:	2000      	movs	r0, #0
    6edc:	4770      	bx	lr
    6ede:	bf00      	nop
    6ee0:	4001e000 	.word	0x4001e000
    6ee4:	e000ed00 	.word	0xe000ed00
    6ee8:	05fa0004 	.word	0x05fa0004

00006eec <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    6eec:	2940      	cmp	r1, #64	; 0x40
    6eee:	4b0e      	ldr	r3, [pc, #56]	; (6f28 <bt_hex_real+0x3c>)
{
    6ef0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    6ef2:	bf28      	it	cs
    6ef4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    6ef6:	4c0d      	ldr	r4, [pc, #52]	; (6f2c <bt_hex_real+0x40>)
    6ef8:	1846      	adds	r6, r0, r1
    6efa:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    6efc:	42b0      	cmp	r0, r6
    6efe:	f103 0302 	add.w	r3, r3, #2
    6f02:	d104      	bne.n	6f0e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    6f04:	2300      	movs	r3, #0
    6f06:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    6f0a:	4807      	ldr	r0, [pc, #28]	; (6f28 <bt_hex_real+0x3c>)
    6f0c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    6f0e:	7802      	ldrb	r2, [r0, #0]
    6f10:	0912      	lsrs	r2, r2, #4
    6f12:	5ca2      	ldrb	r2, [r4, r2]
    6f14:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    6f18:	f810 2b01 	ldrb.w	r2, [r0], #1
    6f1c:	f002 020f 	and.w	r2, r2, #15
    6f20:	5ca2      	ldrb	r2, [r4, r2]
    6f22:	f803 2c01 	strb.w	r2, [r3, #-1]
    6f26:	e7e9      	b.n	6efc <bt_hex_real+0x10>
    6f28:	20003546 	.word	0x20003546
    6f2c:	0002c844 	.word	0x0002c844

00006f30 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    6f30:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    6f32:	7803      	ldrb	r3, [r0, #0]
    6f34:	b08b      	sub	sp, #44	; 0x2c
    6f36:	4604      	mov	r4, r0
    6f38:	ad07      	add	r5, sp, #28
    6f3a:	2b03      	cmp	r3, #3
    6f3c:	d821      	bhi.n	6f82 <bt_addr_le_str_real+0x52>
    6f3e:	e8df f003 	tbb	[pc, r3]
    6f42:	1a02      	.short	0x1a02
    6f44:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    6f46:	4912      	ldr	r1, [pc, #72]	; (6f90 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    6f48:	4628      	mov	r0, r5
    6f4a:	f01f f890 	bl	2606e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    6f4e:	7863      	ldrb	r3, [r4, #1]
    6f50:	9304      	str	r3, [sp, #16]
    6f52:	78a3      	ldrb	r3, [r4, #2]
    6f54:	9303      	str	r3, [sp, #12]
    6f56:	78e3      	ldrb	r3, [r4, #3]
    6f58:	9302      	str	r3, [sp, #8]
    6f5a:	7923      	ldrb	r3, [r4, #4]
    6f5c:	9301      	str	r3, [sp, #4]
    6f5e:	7963      	ldrb	r3, [r4, #5]
    6f60:	9300      	str	r3, [sp, #0]
    6f62:	9505      	str	r5, [sp, #20]
    6f64:	79a3      	ldrb	r3, [r4, #6]
    6f66:	4a0b      	ldr	r2, [pc, #44]	; (6f94 <bt_addr_le_str_real+0x64>)
    6f68:	480b      	ldr	r0, [pc, #44]	; (6f98 <bt_addr_le_str_real+0x68>)
    6f6a:	211e      	movs	r1, #30
    6f6c:	f01d f973 	bl	24256 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    6f70:	4809      	ldr	r0, [pc, #36]	; (6f98 <bt_addr_le_str_real+0x68>)
    6f72:	b00b      	add	sp, #44	; 0x2c
    6f74:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    6f76:	4909      	ldr	r1, [pc, #36]	; (6f9c <bt_addr_le_str_real+0x6c>)
    6f78:	e7e6      	b.n	6f48 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    6f7a:	4909      	ldr	r1, [pc, #36]	; (6fa0 <bt_addr_le_str_real+0x70>)
    6f7c:	e7e4      	b.n	6f48 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    6f7e:	4909      	ldr	r1, [pc, #36]	; (6fa4 <bt_addr_le_str_real+0x74>)
    6f80:	e7e2      	b.n	6f48 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    6f82:	4a09      	ldr	r2, [pc, #36]	; (6fa8 <bt_addr_le_str_real+0x78>)
    6f84:	210a      	movs	r1, #10
    6f86:	4628      	mov	r0, r5
    6f88:	f01d f965 	bl	24256 <snprintk>
		break;
    6f8c:	e7df      	b.n	6f4e <bt_addr_le_str_real+0x1e>
    6f8e:	bf00      	nop
    6f90:	0002c7f8 	.word	0x0002c7f8
    6f94:	0002c821 	.word	0x0002c821
    6f98:	200035c7 	.word	0x200035c7
    6f9c:	0002c7ff 	.word	0x0002c7ff
    6fa0:	0002c806 	.word	0x0002c806
    6fa4:	0002c810 	.word	0x0002c810
    6fa8:	0002c81a 	.word	0x0002c81a

00006fac <sys_memcpy_swap.constprop.2>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6fac:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
    6fae:	b570      	push	{r4, r5, r6, lr}
    6fb0:	4604      	mov	r4, r0
    6fb2:	460e      	mov	r6, r1
    6fb4:	f101 0520 	add.w	r5, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6fb8:	d915      	bls.n	6fe6 <sys_memcpy_swap.constprop.2+0x3a>
    6fba:	42a8      	cmp	r0, r5
    6fbc:	d20a      	bcs.n	6fd4 <sys_memcpy_swap.constprop.2+0x28>
    6fbe:	490c      	ldr	r1, [pc, #48]	; (6ff0 <sys_memcpy_swap.constprop.2+0x44>)
    6fc0:	480c      	ldr	r0, [pc, #48]	; (6ff4 <sys_memcpy_swap.constprop.2+0x48>)
    6fc2:	f240 2219 	movw	r2, #537	; 0x219
    6fc6:	f01d f939 	bl	2423c <printk>
    6fca:	f240 2119 	movw	r1, #537	; 0x219
    6fce:	4808      	ldr	r0, [pc, #32]	; (6ff0 <sys_memcpy_swap.constprop.2+0x44>)
    6fd0:	f01d fbe6 	bl	247a0 <assert_post_action>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;

	for (; length > 0; length--) {
    6fd4:	462b      	mov	r3, r5
    6fd6:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
    6fd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    6fdc:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
    6fe0:	42b3      	cmp	r3, r6
    6fe2:	d1f9      	bne.n	6fd8 <sys_memcpy_swap.constprop.2+0x2c>
	}
}
    6fe4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
    6fe6:	d0ea      	beq.n	6fbe <sys_memcpy_swap.constprop.2+0x12>
    6fe8:	f100 0320 	add.w	r3, r0, #32
    6fec:	4299      	cmp	r1, r3
    6fee:	e7e5      	b.n	6fbc <sys_memcpy_swap.constprop.2+0x10>
    6ff0:	0002c90e 	.word	0x0002c90e
    6ff4:	0002bced 	.word	0x0002bced

00006ff8 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    6ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6ffc:	4e60      	ldr	r6, [pc, #384]	; (7180 <ecc_thread+0x188>)
	return z_impl_k_sem_take(sem, timeout);
    6ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 71a8 <ecc_thread+0x1b0>
    7002:	4635      	mov	r5, r6
    7004:	f04f 32ff 	mov.w	r2, #4294967295
    7008:	f04f 33ff 	mov.w	r3, #4294967295
    700c:	4640      	mov	r0, r8
    700e:	f01a ff79 	bl	21f04 <z_impl_k_sem_take>
    7012:	f3bf 8f5b 	dmb	ish
    7016:	6834      	ldr	r4, [r6, #0]
    7018:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    701c:	f014 0401 	ands.w	r4, r4, #1
    7020:	d054      	beq.n	70cc <ecc_thread+0xd4>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    7022:	f8df 9174 	ldr.w	r9, [pc, #372]	; 7198 <ecc_thread+0x1a0>
    7026:	4c57      	ldr	r4, [pc, #348]	; (7184 <ecc_thread+0x18c>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    7028:	4f57      	ldr	r7, [pc, #348]	; (7188 <ecc_thread+0x190>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    702a:	4858      	ldr	r0, [pc, #352]	; (718c <ecc_thread+0x194>)
    702c:	464a      	mov	r2, r9
    702e:	4621      	mov	r1, r4
    7030:	f01d fee9 	bl	24e06 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    7034:	bbc0      	cbnz	r0, 70a8 <ecc_thread+0xb0>
			BT_ERR("Failed to create ECC public/private pair");
    7036:	2145      	movs	r1, #69	; 0x45
    7038:	4855      	ldr	r0, [pc, #340]	; (7190 <ecc_thread+0x198>)
    703a:	f01d f8ff 	bl	2423c <printk>
			return BT_HCI_ERR_UNSPECIFIED;
    703e:	241f      	movs	r4, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7040:	f04f 32ff 	mov.w	r2, #4294967295
    7044:	f04f 33ff 	mov.w	r3, #4294967295
    7048:	2001      	movs	r0, #1
    704a:	f000 fa91 	bl	7570 <bt_buf_get_rx>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    704e:	f100 0708 	add.w	r7, r0, #8
    7052:	2102      	movs	r1, #2
    7054:	4681      	mov	r9, r0
    7056:	4638      	mov	r0, r7
    7058:	f016 fb9e 	bl	1d798 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    705c:	233e      	movs	r3, #62	; 0x3e
    705e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7060:	2342      	movs	r3, #66	; 0x42
    7062:	7043      	strb	r3, [r0, #1]
    7064:	2101      	movs	r1, #1
    7066:	4638      	mov	r0, r7
    7068:	f016 fb96 	bl	1d798 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    706c:	2308      	movs	r3, #8
    706e:	7003      	strb	r3, [r0, #0]
    7070:	2141      	movs	r1, #65	; 0x41
    7072:	4638      	mov	r0, r7
    7074:	f016 fb90 	bl	1d798 <net_buf_simple_add>
    7078:	4607      	mov	r7, r0
	evt->status = status;
    707a:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
    707e:	b1e4      	cbz	r4, 70ba <ecc_thread+0xc2>
		(void)memset(evt->key, 0, sizeof(evt->key));
    7080:	2240      	movs	r2, #64	; 0x40
    7082:	2100      	movs	r1, #0
    7084:	f01f f896 	bl	261b4 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7088:	f3bf 8f5b 	dmb	ish
    708c:	e855 3f00 	ldrex	r3, [r5]
    7090:	f023 0301 	bic.w	r3, r3, #1
    7094:	e845 3200 	strex	r2, r3, [r5]
    7098:	2a00      	cmp	r2, #0
    709a:	d1f7      	bne.n	708c <ecc_thread+0x94>
    709c:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    70a0:	4648      	mov	r0, r9
    70a2:	f001 fb55 	bl	8750 <bt_recv>
    70a6:	e7ad      	b.n	7004 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    70a8:	2220      	movs	r2, #32
    70aa:	4639      	mov	r1, r7
    70ac:	4620      	mov	r0, r4
    70ae:	f01f f830 	bl	26112 <memcmp>
    70b2:	2800      	cmp	r0, #0
    70b4:	d0b9      	beq.n	702a <ecc_thread+0x32>
	return 0;
    70b6:	2400      	movs	r4, #0
    70b8:	e7c2      	b.n	7040 <ecc_thread+0x48>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    70ba:	4934      	ldr	r1, [pc, #208]	; (718c <ecc_thread+0x194>)
    70bc:	f7ff ff76 	bl	6fac <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    70c0:	4934      	ldr	r1, [pc, #208]	; (7194 <ecc_thread+0x19c>)
    70c2:	f107 0021 	add.w	r0, r7, #33	; 0x21
    70c6:	f7ff ff71 	bl	6fac <sys_memcpy_swap.constprop.2>
    70ca:	e7dd      	b.n	7088 <ecc_thread+0x90>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    70cc:	f3bf 8f5b 	dmb	ish
    70d0:	6833      	ldr	r3, [r6, #0]
    70d2:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    70d6:	079b      	lsls	r3, r3, #30
    70d8:	d548      	bpl.n	716c <ecc_thread+0x174>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    70da:	492f      	ldr	r1, [pc, #188]	; (7198 <ecc_thread+0x1a0>)
    70dc:	482b      	ldr	r0, [pc, #172]	; (718c <ecc_thread+0x194>)
    70de:	f01e fd63 	bl	25ba8 <uECC_valid_public_key>
	if (ret < 0) {
    70e2:	1e02      	subs	r2, r0, #0
    70e4:	da33      	bge.n	714e <ecc_thread+0x156>
		BT_ERR("public key is not valid (ret %d)", ret);
    70e6:	2145      	movs	r1, #69	; 0x45
    70e8:	482c      	ldr	r0, [pc, #176]	; (719c <ecc_thread+0x1a4>)
    70ea:	f01d f8a7 	bl	2423c <printk>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    70ee:	f04f 32ff 	mov.w	r2, #4294967295
    70f2:	f04f 33ff 	mov.w	r3, #4294967295
    70f6:	2001      	movs	r0, #1
    70f8:	f000 fa3a 	bl	7570 <bt_buf_get_rx>
    70fc:	f100 0708 	add.w	r7, r0, #8
    7100:	2102      	movs	r1, #2
    7102:	4681      	mov	r9, r0
    7104:	4638      	mov	r0, r7
    7106:	f016 fb47 	bl	1d798 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    710a:	233e      	movs	r3, #62	; 0x3e
    710c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    710e:	2322      	movs	r3, #34	; 0x22
    7110:	7043      	strb	r3, [r0, #1]
    7112:	2101      	movs	r1, #1
    7114:	4638      	mov	r0, r7
    7116:	f016 fb3f 	bl	1d798 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    711a:	2309      	movs	r3, #9
    711c:	7003      	strb	r3, [r0, #0]
    711e:	2121      	movs	r1, #33	; 0x21
    7120:	4638      	mov	r0, r7
    7122:	f016 fb39 	bl	1d798 <net_buf_simple_add>
    7126:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7128:	3001      	adds	r0, #1
    712a:	b9cc      	cbnz	r4, 7160 <ecc_thread+0x168>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    712c:	221f      	movs	r2, #31
    712e:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    7130:	21ff      	movs	r1, #255	; 0xff
    7132:	2220      	movs	r2, #32
    7134:	f01f f83e 	bl	261b4 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7138:	f3bf 8f5b 	dmb	ish
    713c:	e855 3f00 	ldrex	r3, [r5]
    7140:	f023 0302 	bic.w	r3, r3, #2
    7144:	e845 3200 	strex	r2, r3, [r5]
    7148:	2a00      	cmp	r2, #0
    714a:	d0a7      	beq.n	709c <ecc_thread+0xa4>
    714c:	e7f6      	b.n	713c <ecc_thread+0x144>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    714e:	4a0f      	ldr	r2, [pc, #60]	; (718c <ecc_thread+0x194>)
    7150:	4b11      	ldr	r3, [pc, #68]	; (7198 <ecc_thread+0x1a0>)
    7152:	f1a2 0120 	sub.w	r1, r2, #32
    7156:	4610      	mov	r0, r2
    7158:	f01d fea4 	bl	24ea4 <uECC_shared_secret>
    715c:	4604      	mov	r4, r0
    715e:	e7c6      	b.n	70ee <ecc_thread+0xf6>
		evt->status = 0U;
    7160:	2200      	movs	r2, #0
    7162:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    7164:	4909      	ldr	r1, [pc, #36]	; (718c <ecc_thread+0x194>)
    7166:	f7ff ff21 	bl	6fac <sys_memcpy_swap.constprop.2>
    716a:	e7e5      	b.n	7138 <ecc_thread+0x140>
			emulate_le_generate_dhkey();
		} else {
			__ASSERT(0, "Unhandled ECC command");
    716c:	22e0      	movs	r2, #224	; 0xe0
    716e:	490c      	ldr	r1, [pc, #48]	; (71a0 <ecc_thread+0x1a8>)
    7170:	480c      	ldr	r0, [pc, #48]	; (71a4 <ecc_thread+0x1ac>)
    7172:	f01d f863 	bl	2423c <printk>
    7176:	21e0      	movs	r1, #224	; 0xe0
    7178:	4809      	ldr	r0, [pc, #36]	; (71a0 <ecc_thread+0x1a8>)
    717a:	f01d fb11 	bl	247a0 <assert_post_action>
    717e:	e741      	b.n	7004 <ecc_thread+0xc>
    7180:	20002074 	.word	0x20002074
    7184:	200035e5 	.word	0x200035e5
    7188:	0002c85c 	.word	0x0002c85c
    718c:	20003605 	.word	0x20003605
    7190:	0002c87c 	.word	0x0002c87c
    7194:	20003625 	.word	0x20003625
    7198:	0002ae0c 	.word	0x0002ae0c
    719c:	0002c8aa 	.word	0x0002c8aa
    71a0:	0002c8d0 	.word	0x0002c8d0
    71a4:	0002bced 	.word	0x0002bced
    71a8:	20000da8 	.word	0x20000da8

000071ac <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    71ac:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    71ae:	7d05      	ldrb	r5, [r0, #20]
    71b0:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    71b2:	b9ad      	cbnz	r5, 71e0 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    71b4:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    71b6:	881a      	ldrh	r2, [r3, #0]
    71b8:	f242 0125 	movw	r1, #8229	; 0x2025
    71bc:	428a      	cmp	r2, r1
    71be:	d017      	beq.n	71f0 <bt_hci_ecc_send+0x44>
    71c0:	f242 0126 	movw	r1, #8230	; 0x2026
    71c4:	428a      	cmp	r2, r1
    71c6:	d03c      	beq.n	7242 <bt_hci_ecc_send+0x96>
    71c8:	f242 0101 	movw	r1, #8193	; 0x2001
    71cc:	428a      	cmp	r2, r1
    71ce:	d107      	bne.n	71e0 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    71d0:	78da      	ldrb	r2, [r3, #3]
    71d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    71d6:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    71d8:	791a      	ldrb	r2, [r3, #4]
    71da:	f022 0201 	bic.w	r2, r2, #1
    71de:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    71e0:	4b32      	ldr	r3, [pc, #200]	; (72ac <bt_hci_ecc_send+0x100>)
    71e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    71e6:	4620      	mov	r0, r4
    71e8:	691b      	ldr	r3, [r3, #16]
}
    71ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    71ee:	4718      	bx	r3
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    71f0:	2103      	movs	r1, #3
    71f2:	3008      	adds	r0, #8
    71f4:	f016 fa96 	bl	1d724 <net_buf_simple_pull>
	net_buf_unref(buf);
    71f8:	4620      	mov	r0, r4
    71fa:	f016 f9b7 	bl	1d56c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    71fe:	f3bf 8f5b 	dmb	ish
    7202:	4b2b      	ldr	r3, [pc, #172]	; (72b0 <bt_hci_ecc_send+0x104>)
    7204:	681a      	ldr	r2, [r3, #0]
    7206:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    720a:	0790      	lsls	r0, r2, #30
    720c:	d507      	bpl.n	721e <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    720e:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7210:	4629      	mov	r1, r5
    7212:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7216:	f01f f807 	bl	26228 <send_cmd_status>
}
    721a:	2000      	movs	r0, #0
    721c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    721e:	f3bf 8f5b 	dmb	ish
    7222:	e853 2f00 	ldrex	r2, [r3]
    7226:	f042 0101 	orr.w	r1, r2, #1
    722a:	e843 1000 	strex	r0, r1, [r3]
    722e:	2800      	cmp	r0, #0
    7230:	d1f7      	bne.n	7222 <bt_hci_ecc_send+0x76>
    7232:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    7236:	07d1      	lsls	r1, r2, #31
    7238:	d4e9      	bmi.n	720e <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    723a:	481e      	ldr	r0, [pc, #120]	; (72b4 <bt_hci_ecc_send+0x108>)
    723c:	f01a fe26 	bl	21e8c <z_impl_k_sem_give>
    7240:	e7e6      	b.n	7210 <bt_hci_ecc_send+0x64>
    7242:	2103      	movs	r1, #3
    7244:	3008      	adds	r0, #8
    7246:	f016 fa6d 	bl	1d724 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    724a:	f3bf 8f5b 	dmb	ish
    724e:	4b18      	ldr	r3, [pc, #96]	; (72b0 <bt_hci_ecc_send+0x104>)
    7250:	681a      	ldr	r2, [r3, #0]
    7252:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7256:	07d2      	lsls	r2, r2, #31
    7258:	d507      	bpl.n	726a <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    725a:	250c      	movs	r5, #12
	net_buf_unref(buf);
    725c:	4620      	mov	r0, r4
    725e:	f016 f985 	bl	1d56c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    7262:	4629      	mov	r1, r5
    7264:	f242 0026 	movw	r0, #8230	; 0x2026
    7268:	e7d5      	b.n	7216 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    726a:	89a2      	ldrh	r2, [r4, #12]
    726c:	2a3f      	cmp	r2, #63	; 0x3f
    726e:	d91b      	bls.n	72a8 <bt_hci_ecc_send+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7270:	f3bf 8f5b 	dmb	ish
    7274:	e853 2f00 	ldrex	r2, [r3]
    7278:	f042 0102 	orr.w	r1, r2, #2
    727c:	e843 1000 	strex	r0, r1, [r3]
    7280:	2800      	cmp	r0, #0
    7282:	d1f7      	bne.n	7274 <bt_hci_ecc_send+0xc8>
    7284:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    7288:	0793      	lsls	r3, r2, #30
    728a:	d4e6      	bmi.n	725a <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    728c:	68a6      	ldr	r6, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    728e:	480a      	ldr	r0, [pc, #40]	; (72b8 <bt_hci_ecc_send+0x10c>)
    7290:	4631      	mov	r1, r6
    7292:	f7ff fe8b 	bl	6fac <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    7296:	f106 0120 	add.w	r1, r6, #32
    729a:	4808      	ldr	r0, [pc, #32]	; (72bc <bt_hci_ecc_send+0x110>)
    729c:	f7ff fe86 	bl	6fac <sys_memcpy_swap.constprop.2>
    72a0:	4804      	ldr	r0, [pc, #16]	; (72b4 <bt_hci_ecc_send+0x108>)
    72a2:	f01a fdf3 	bl	21e8c <z_impl_k_sem_give>
    72a6:	e7d9      	b.n	725c <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    72a8:	2512      	movs	r5, #18
    72aa:	e7d7      	b.n	725c <bt_hci_ecc_send+0xb0>
    72ac:	200001c0 	.word	0x200001c0
    72b0:	20002074 	.word	0x20002074
    72b4:	20000da8 	.word	0x20000da8
    72b8:	20003605 	.word	0x20003605
    72bc:	20003625 	.word	0x20003625

000072c0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    72c0:	b510      	push	{r4, lr}
    72c2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    72c4:	4c0c      	ldr	r4, [pc, #48]	; (72f8 <bt_hci_ecc_init+0x38>)
    72c6:	490d      	ldr	r1, [pc, #52]	; (72fc <bt_hci_ecc_init+0x3c>)
    72c8:	2200      	movs	r2, #0
    72ca:	2300      	movs	r3, #0
    72cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    72d0:	2300      	movs	r3, #0
    72d2:	220a      	movs	r2, #10
    72d4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    72d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    72dc:	9300      	str	r3, [sp, #0]
    72de:	f44f 628a 	mov.w	r2, #1104	; 0x450
    72e2:	4b07      	ldr	r3, [pc, #28]	; (7300 <bt_hci_ecc_init+0x40>)
    72e4:	4620      	mov	r0, r4
    72e6:	f01a ff01 	bl	220ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    72ea:	4906      	ldr	r1, [pc, #24]	; (7304 <bt_hci_ecc_init+0x44>)
    72ec:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    72ee:	b008      	add	sp, #32
    72f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72f4:	f023 b809 	b.w	2a30a <z_impl_k_thread_name_set>
    72f8:	20000f90 	.word	0x20000f90
    72fc:	20003700 	.word	0x20003700
    7300:	00006ff9 	.word	0x00006ff9
    7304:	0002c855 	.word	0x0002c855

00007308 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    7308:	b508      	push	{r3, lr}
	int err;
	BT_INFO("Saving ID");
    730a:	2149      	movs	r1, #73	; 0x49
    730c:	4809      	ldr	r0, [pc, #36]	; (7334 <save_id+0x2c>)
    730e:	f01c ff95 	bl	2423c <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    7312:	4909      	ldr	r1, [pc, #36]	; (7338 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    7314:	4809      	ldr	r0, [pc, #36]	; (733c <save_id+0x34>)
    7316:	79ca      	ldrb	r2, [r1, #7]
    7318:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    731c:	f7fd ffb0 	bl	5280 <settings_save_one>
	if (err) {
    7320:	4602      	mov	r2, r0
    7322:	b128      	cbz	r0, 7330 <save_id+0x28>
		BT_ERR("Failed to save ID (err %d)", err);
    7324:	2145      	movs	r1, #69	; 0x45
    7326:	4806      	ldr	r0, [pc, #24]	; (7340 <save_id+0x38>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    7328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    732c:	f01c bf86 	b.w	2423c <printk>
}
    7330:	bd08      	pop	{r3, pc}
    7332:	bf00      	nop
    7334:	0002c9d1 	.word	0x0002c9d1
    7338:	200001c0 	.word	0x200001c0
    733c:	0002c9e0 	.word	0x0002c9e0
    7340:	0002c9e6 	.word	0x0002c9e6

00007344 <set>:
{
    7344:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7348:	4617      	mov	r7, r2
    734a:	4698      	mov	r8, r3
	if (!name) {
    734c:	4604      	mov	r4, r0
    734e:	b930      	cbnz	r0, 735e <set+0x1a>
		BT_ERR("Insufficient number of arguments");
    7350:	2145      	movs	r1, #69	; 0x45
    7352:	481d      	ldr	r0, [pc, #116]	; (73c8 <set+0x84>)
    7354:	f01c ff72 	bl	2423c <printk>
	return -ENOENT;
    7358:	f06f 0401 	mvn.w	r4, #1
    735c:	e018      	b.n	7390 <set+0x4c>
	len = settings_name_next(name, &next);
    735e:	a901      	add	r1, sp, #4
    7360:	f01d fbd0 	bl	24b04 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    7364:	4919      	ldr	r1, [pc, #100]	; (73cc <set+0x88>)
    7366:	4602      	mov	r2, r0
    7368:	4620      	mov	r0, r4
    736a:	f01e fea6 	bl	260ba <strncmp>
    736e:	4606      	mov	r6, r0
    7370:	2800      	cmp	r0, #0
    7372:	d1f1      	bne.n	7358 <set+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7374:	f3bf 8f5b 	dmb	ish
    7378:	4d15      	ldr	r5, [pc, #84]	; (73d0 <set+0x8c>)
    737a:	682c      	ldr	r4, [r5, #0]
    737c:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7380:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    7384:	b144      	cbz	r4, 7398 <set+0x54>
			BT_WARN("Ignoring identities stored in flash");
    7386:	2157      	movs	r1, #87	; 0x57
    7388:	4812      	ldr	r0, [pc, #72]	; (73d4 <set+0x90>)
    738a:	f01c ff57 	bl	2423c <printk>
			return 0;
    738e:	4634      	mov	r4, r6
}
    7390:	4620      	mov	r0, r4
    7392:	b002      	add	sp, #8
    7394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    7398:	3d94      	subs	r5, #148	; 0x94
    739a:	2207      	movs	r2, #7
    739c:	4629      	mov	r1, r5
    739e:	4640      	mov	r0, r8
    73a0:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
    73a2:	2806      	cmp	r0, #6
    73a4:	d80a      	bhi.n	73bc <set+0x78>
				BT_ERR("Invalid length ID address in storage");
    73a6:	2145      	movs	r1, #69	; 0x45
    73a8:	480b      	ldr	r0, [pc, #44]	; (73d8 <set+0x94>)
    73aa:	f01c ff47 	bl	2423c <printk>
			(void)memset(bt_dev.id_addr, 0,
    73ae:	2207      	movs	r2, #7
    73b0:	4621      	mov	r1, r4
    73b2:	4628      	mov	r0, r5
    73b4:	f01e fefe 	bl	261b4 <memset>
			bt_dev.id_count = 0U;
    73b8:	71ec      	strb	r4, [r5, #7]
    73ba:	e7e9      	b.n	7390 <set+0x4c>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    73bc:	2307      	movs	r3, #7
    73be:	fbb0 f0f3 	udiv	r0, r0, r3
    73c2:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    73c4:	e7e4      	b.n	7390 <set+0x4c>
    73c6:	bf00      	nop
    73c8:	0002ca06 	.word	0x0002ca06
    73cc:	0002c80d 	.word	0x0002c80d
    73d0:	20000254 	.word	0x20000254
    73d4:	0002ca2c 	.word	0x0002ca2c
    73d8:	0002ca55 	.word	0x0002ca55

000073dc <bt_settings_encode_key>:
{
    73dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73e0:	b088      	sub	sp, #32
    73e2:	799c      	ldrb	r4, [r3, #6]
    73e4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    73e8:	795d      	ldrb	r5, [r3, #5]
    73ea:	791e      	ldrb	r6, [r3, #4]
    73ec:	78df      	ldrb	r7, [r3, #3]
    73ee:	f893 c002 	ldrb.w	ip, [r3, #2]
    73f2:	f893 e001 	ldrb.w	lr, [r3, #1]
    73f6:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    73f8:	f1b8 0f00 	cmp.w	r8, #0
    73fc:	d00e      	beq.n	741c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    73fe:	e9cd 3806 	strd	r3, r8, [sp, #24]
    7402:	e9cd ce04 	strd	ip, lr, [sp, #16]
    7406:	4613      	mov	r3, r2
    7408:	e9cd 6702 	strd	r6, r7, [sp, #8]
    740c:	e9cd 4500 	strd	r4, r5, [sp]
    7410:	4a08      	ldr	r2, [pc, #32]	; (7434 <bt_settings_encode_key+0x58>)
    7412:	f01c ff20 	bl	24256 <snprintk>
}
    7416:	b008      	add	sp, #32
    7418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    741c:	e9cd e305 	strd	lr, r3, [sp, #20]
    7420:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    7424:	4613      	mov	r3, r2
    7426:	e9cd 5601 	strd	r5, r6, [sp, #4]
    742a:	9400      	str	r4, [sp, #0]
    742c:	4a02      	ldr	r2, [pc, #8]	; (7438 <bt_settings_encode_key+0x5c>)
    742e:	f01c ff12 	bl	24256 <snprintk>
}
    7432:	e7f0      	b.n	7416 <bt_settings_encode_key+0x3a>
    7434:	0002c939 	.word	0x0002c939
    7438:	0002c95d 	.word	0x0002c95d

0000743c <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    743c:	4909      	ldr	r1, [pc, #36]	; (7464 <bt_settings_save_id+0x28>)
    743e:	f3bf 8f5b 	dmb	ish
    7442:	e851 3f00 	ldrex	r3, [r1]
    7446:	f043 0201 	orr.w	r2, r3, #1
    744a:	e841 2000 	strex	r0, r2, [r1]
    744e:	2800      	cmp	r0, #0
    7450:	d1f7      	bne.n	7442 <bt_settings_save_id+0x6>
    7452:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7456:	07db      	lsls	r3, r3, #31
    7458:	d403      	bmi.n	7462 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    745a:	3908      	subs	r1, #8
    745c:	4802      	ldr	r0, [pc, #8]	; (7468 <bt_settings_save_id+0x2c>)
    745e:	f022 bee1 	b.w	2a224 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    7462:	4770      	bx	lr
    7464:	20000554 	.word	0x20000554
    7468:	20001988 	.word	0x20001988

0000746c <commit>:

static int commit(void)
{
    746c:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    746e:	4c17      	ldr	r4, [pc, #92]	; (74cc <commit+0x60>)
    7470:	79e3      	ldrb	r3, [r4, #7]
    7472:	b96b      	cbnz	r3, 7490 <commit+0x24>
		bt_setup_public_id_addr();
    7474:	f001 fcbe 	bl	8df4 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    7478:	79e3      	ldrb	r3, [r4, #7]
    747a:	b94b      	cbnz	r3, 7490 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    747c:	f001 fd46 	bl	8f0c <bt_setup_random_id_addr>
		if (err) {
    7480:	4604      	mov	r4, r0
    7482:	b128      	cbz	r0, 7490 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    7484:	2145      	movs	r1, #69	; 0x45
    7486:	4812      	ldr	r0, [pc, #72]	; (74d0 <commit+0x64>)
    7488:	f01c fed8 	bl	2423c <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    748c:	4620      	mov	r0, r4
    748e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7490:	4d10      	ldr	r5, [pc, #64]	; (74d4 <commit+0x68>)
    7492:	f3bf 8f5b 	dmb	ish
    7496:	682b      	ldr	r3, [r5, #0]
    7498:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    749c:	079b      	lsls	r3, r3, #30
    749e:	d401      	bmi.n	74a4 <commit+0x38>
		bt_finalize_init();
    74a0:	f001 fa1a 	bl	88d8 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    74a4:	f3bf 8f5b 	dmb	ish
    74a8:	e855 4f00 	ldrex	r4, [r5]
    74ac:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    74b0:	e845 3200 	strex	r2, r3, [r5]
    74b4:	2a00      	cmp	r2, #0
    74b6:	d1f7      	bne.n	74a8 <commit+0x3c>
    74b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    74bc:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    74c0:	d0e4      	beq.n	748c <commit+0x20>
		bt_settings_save_id();
    74c2:	f7ff ffbb 	bl	743c <bt_settings_save_id>
	return 0;
    74c6:	2400      	movs	r4, #0
    74c8:	e7e0      	b.n	748c <commit+0x20>
    74ca:	bf00      	nop
    74cc:	200001c0 	.word	0x200001c0
    74d0:	0002c9a8 	.word	0x0002c9a8
    74d4:	20000254 	.word	0x20000254

000074d8 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    74d8:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    74da:	f7fe f83b 	bl	5554 <settings_subsys_init>
	if (err) {
    74de:	4604      	mov	r4, r0
    74e0:	b120      	cbz	r0, 74ec <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    74e2:	4602      	mov	r2, r0
    74e4:	2145      	movs	r1, #69	; 0x45
    74e6:	4802      	ldr	r0, [pc, #8]	; (74f0 <bt_settings_init+0x18>)
    74e8:	f01c fea8 	bl	2423c <printk>
		return err;
	}

	return 0;
}
    74ec:	4620      	mov	r0, r4
    74ee:	bd10      	pop	{r4, pc}
    74f0:	0002c97e 	.word	0x0002c97e

000074f4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    74f4:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    74f6:	7802      	ldrb	r2, [r0, #0]
    74f8:	2a01      	cmp	r2, #1
{
    74fa:	4604      	mov	r4, r0
    74fc:	460b      	mov	r3, r1
	switch (src->type) {
    74fe:	d017      	beq.n	7530 <uuid_to_uuid128+0x3c>
    7500:	b11a      	cbz	r2, 750a <uuid_to_uuid128+0x16>
    7502:	2a02      	cmp	r2, #2
    7504:	d02c      	beq.n	7560 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    7506:	bcf0      	pop	{r4, r5, r6, r7}
    7508:	4770      	bx	lr
		*dst = uuid128_base;
    750a:	4a18      	ldr	r2, [pc, #96]	; (756c <uuid_to_uuid128+0x78>)
    750c:	460d      	mov	r5, r1
    750e:	f102 0710 	add.w	r7, r2, #16
    7512:	6810      	ldr	r0, [r2, #0]
    7514:	6851      	ldr	r1, [r2, #4]
    7516:	462e      	mov	r6, r5
    7518:	c603      	stmia	r6!, {r0, r1}
    751a:	3208      	adds	r2, #8
    751c:	42ba      	cmp	r2, r7
    751e:	4635      	mov	r5, r6
    7520:	d1f7      	bne.n	7512 <uuid_to_uuid128+0x1e>
    7522:	7812      	ldrb	r2, [r2, #0]
    7524:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    7526:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    7528:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    752a:	0a12      	lsrs	r2, r2, #8
    752c:	739a      	strb	r2, [r3, #14]
    752e:	e7ea      	b.n	7506 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    7530:	4a0e      	ldr	r2, [pc, #56]	; (756c <uuid_to_uuid128+0x78>)
    7532:	460d      	mov	r5, r1
    7534:	f102 0710 	add.w	r7, r2, #16
    7538:	6810      	ldr	r0, [r2, #0]
    753a:	6851      	ldr	r1, [r2, #4]
    753c:	462e      	mov	r6, r5
    753e:	c603      	stmia	r6!, {r0, r1}
    7540:	3208      	adds	r2, #8
    7542:	42ba      	cmp	r2, r7
    7544:	4635      	mov	r5, r6
    7546:	d1f7      	bne.n	7538 <uuid_to_uuid128+0x44>
    7548:	7812      	ldrb	r2, [r2, #0]
    754a:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    754c:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    754e:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    7550:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    7554:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    7556:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    7558:	0a12      	lsrs	r2, r2, #8
    755a:	7399      	strb	r1, [r3, #14]
    755c:	741a      	strb	r2, [r3, #16]
    755e:	e7d2      	b.n	7506 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    7560:	4601      	mov	r1, r0
    7562:	2211      	movs	r2, #17
    7564:	4618      	mov	r0, r3
}
    7566:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    7568:	f01e bdfa 	b.w	26160 <memcpy>
    756c:	0002ca99 	.word	0x0002ca99

00007570 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    7570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7572:	461f      	mov	r7, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    7574:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
    7578:	2b01      	cmp	r3, #1
{
    757a:	4605      	mov	r5, r0
    757c:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    757e:	d00a      	beq.n	7596 <bt_buf_get_rx+0x26>
    7580:	2805      	cmp	r0, #5
    7582:	d008      	beq.n	7596 <bt_buf_get_rx+0x26>
    7584:	490b      	ldr	r1, [pc, #44]	; (75b4 <bt_buf_get_rx+0x44>)
    7586:	480c      	ldr	r0, [pc, #48]	; (75b8 <bt_buf_get_rx+0x48>)
    7588:	2234      	movs	r2, #52	; 0x34
    758a:	f01c fe57 	bl	2423c <printk>
    758e:	2134      	movs	r1, #52	; 0x34
    7590:	4808      	ldr	r0, [pc, #32]	; (75b4 <bt_buf_get_rx+0x44>)
    7592:	f01d f905 	bl	247a0 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    7596:	4632      	mov	r2, r6
    7598:	463b      	mov	r3, r7
    759a:	4808      	ldr	r0, [pc, #32]	; (75bc <bt_buf_get_rx+0x4c>)
    759c:	f022 f992 	bl	298c4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    75a0:	4604      	mov	r4, r0
    75a2:	b120      	cbz	r0, 75ae <bt_buf_get_rx+0x3e>
	net_buf_simple_reserve(&buf->b, reserve);
    75a4:	2100      	movs	r1, #0
    75a6:	3008      	adds	r0, #8
    75a8:	f015 fef6 	bl	1d398 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    75ac:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    75ae:	4620      	mov	r0, r4
    75b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75b2:	bf00      	nop
    75b4:	0002caaa 	.word	0x0002caaa
    75b8:	0002bced 	.word	0x0002bced
    75bc:	20000f08 	.word	0x20000f08

000075c0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    75c0:	b5d0      	push	{r4, r6, r7, lr}
    75c2:	460f      	mov	r7, r1
	__asm__ volatile(
    75c4:	f04f 0320 	mov.w	r3, #32
    75c8:	f3ef 8211 	mrs	r2, BASEPRI
    75cc:	f383 8811 	msr	BASEPRI, r3
    75d0:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    75d4:	4b0d      	ldr	r3, [pc, #52]	; (760c <bt_buf_get_cmd_complete+0x4c>)
	bt_dev.sent_cmd = NULL;
    75d6:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    75d8:	f8d3 40f8 	ldr.w	r4, [r3, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    75dc:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
	__asm__ volatile(
    75e0:	f382 8811 	msr	BASEPRI, r2
    75e4:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    75e8:	b934      	cbnz	r4, 75f8 <bt_buf_get_cmd_complete+0x38>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    75ea:	4602      	mov	r2, r0
    75ec:	463b      	mov	r3, r7
    75ee:	2001      	movs	r0, #1
}
    75f0:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    75f4:	f7ff bfbc 	b.w	7570 <bt_buf_get_rx>
    75f8:	2301      	movs	r3, #1
    75fa:	f104 0008 	add.w	r0, r4, #8
    75fe:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    7600:	81a1      	strh	r1, [r4, #12]
    7602:	f015 fec9 	bl	1d398 <net_buf_simple_reserve>
}
    7606:	4620      	mov	r0, r4
    7608:	bdd0      	pop	{r4, r6, r7, pc}
    760a:	bf00      	nop
    760c:	200001c0 	.word	0x200001c0

00007610 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	4604      	mov	r4, r0
	switch (evt) {
    7614:	2c0e      	cmp	r4, #14
{
    7616:	460d      	mov	r5, r1
    7618:	4610      	mov	r0, r2
    761a:	4619      	mov	r1, r3
	switch (evt) {
    761c:	d314      	bcc.n	7648 <bt_buf_get_evt+0x38>
    761e:	2c0f      	cmp	r4, #15
    7620:	d90e      	bls.n	7640 <bt_buf_get_evt+0x30>
    7622:	2c13      	cmp	r4, #19
    7624:	d110      	bne.n	7648 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    7626:	480d      	ldr	r0, [pc, #52]	; (765c <bt_buf_get_evt+0x4c>)
    7628:	f022 f94c 	bl	298c4 <net_buf_alloc_fixed>
#if defined(CONFIG_BT_DISCARDABLE_BUF_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
			if (buf) {
    762c:	4604      	mov	r4, r0
    762e:	b128      	cbz	r0, 763c <bt_buf_get_evt+0x2c>
	net_buf_simple_reserve(&buf->b, reserve);
    7630:	2100      	movs	r1, #0
    7632:	3008      	adds	r0, #8
    7634:	f015 feb0 	bl	1d398 <net_buf_simple_reserve>
    7638:	2301      	movs	r3, #1
    763a:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    763c:	4620      	mov	r0, r4
    763e:	bd70      	pop	{r4, r5, r6, pc}
    7640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    7644:	f7ff bfbc 	b.w	75c0 <bt_buf_get_cmd_complete>
	return net_buf_alloc_fixed(pool, timeout);
    7648:	4602      	mov	r2, r0
    764a:	460b      	mov	r3, r1
		if (discardable) {
    764c:	b10d      	cbz	r5, 7652 <bt_buf_get_evt+0x42>
    764e:	4804      	ldr	r0, [pc, #16]	; (7660 <bt_buf_get_evt+0x50>)
    7650:	e7ea      	b.n	7628 <bt_buf_get_evt+0x18>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7652:	2001      	movs	r0, #1
}
    7654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7658:	f7ff bf8a 	b.w	7570 <bt_buf_get_rx>
    765c:	20000f60 	.word	0x20000f60
    7660:	20000e84 	.word	0x20000e84

00007664 <le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    7664:	4905      	ldr	r1, [pc, #20]	; (767c <le_dhkey_complete+0x18>)
    7666:	680b      	ldr	r3, [r1, #0]
    7668:	b133      	cbz	r3, 7678 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    766a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    766c:	2000      	movs	r0, #0
    766e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    7670:	7811      	ldrb	r1, [r2, #0]
    7672:	b901      	cbnz	r1, 7676 <le_dhkey_complete+0x12>
    7674:	1c50      	adds	r0, r2, #1
    7676:	4718      	bx	r3
	}
}
    7678:	4770      	bx	lr
    767a:	bf00      	nop
    767c:	20002090 	.word	0x20002090

00007680 <hci_data_buf_overflow>:
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    7680:	6883      	ldr	r3, [r0, #8]
    7682:	4802      	ldr	r0, [pc, #8]	; (768c <hci_data_buf_overflow+0xc>)
    7684:	781a      	ldrb	r2, [r3, #0]
    7686:	2157      	movs	r1, #87	; 0x57
    7688:	f01c bdd8 	b.w	2423c <printk>
    768c:	0002cf3c 	.word	0x0002cf3c

00007690 <hci_disconn_complete_prio>:
{
    7690:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7692:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    7694:	781a      	ldrb	r2, [r3, #0]
    7696:	b9aa      	cbnz	r2, 76c4 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7698:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    769c:	4620      	mov	r0, r4
    769e:	f002 faef 	bl	9c80 <bt_conn_lookup_handle>
	if (!conn) {
    76a2:	4605      	mov	r5, r0
    76a4:	b930      	cbnz	r0, 76b4 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    76a6:	4622      	mov	r2, r4
    76a8:	2145      	movs	r1, #69	; 0x45
    76aa:	4807      	ldr	r0, [pc, #28]	; (76c8 <hci_disconn_complete_prio+0x38>)
}
    76ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    76b0:	f01c bdc4 	b.w	2423c <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    76b4:	2101      	movs	r1, #1
    76b6:	f002 faeb 	bl	9c90 <bt_conn_set_state>
	bt_conn_unref(conn);
    76ba:	4628      	mov	r0, r5
}
    76bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    76c0:	f002 bab2 	b.w	9c28 <bt_conn_unref>
}
    76c4:	bd38      	pop	{r3, r4, r5, pc}
    76c6:	bf00      	nop
    76c8:	0002cf69 	.word	0x0002cf69

000076cc <hci_disconn_complete>:
{
    76cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    76ce:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    76d0:	7835      	ldrb	r5, [r6, #0]
    76d2:	b9c5      	cbnz	r5, 7706 <hci_disconn_complete+0x3a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    76d4:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    76d8:	4638      	mov	r0, r7
    76da:	f002 fad1 	bl	9c80 <bt_conn_lookup_handle>
	if (!conn) {
    76de:	4604      	mov	r4, r0
    76e0:	b930      	cbnz	r0, 76f0 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    76e2:	463a      	mov	r2, r7
    76e4:	2145      	movs	r1, #69	; 0x45
    76e6:	4808      	ldr	r0, [pc, #32]	; (7708 <hci_disconn_complete+0x3c>)
}
    76e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    76ec:	f01c bda6 	b.w	2423c <printk>
	conn->err = evt->reason;
    76f0:	78f3      	ldrb	r3, [r6, #3]
    76f2:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    76f4:	4629      	mov	r1, r5
    76f6:	f002 facb 	bl	9c90 <bt_conn_set_state>
	conn->handle = 0U;
    76fa:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    76fc:	4620      	mov	r0, r4
}
    76fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    7702:	f002 ba91 	b.w	9c28 <bt_conn_unref>
}
    7706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7708:	0002cf69 	.word	0x0002cf69

0000770c <le_pkey_complete>:
{
    770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    770e:	6886      	ldr	r6, [r0, #8]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7710:	480f      	ldr	r0, [pc, #60]	; (7750 <le_pkey_complete+0x44>)
    7712:	f06f 0110 	mvn.w	r1, #16
    7716:	f01f f818 	bl	2674a <atomic_and>
	if (!evt->status) {
    771a:	7833      	ldrb	r3, [r6, #0]
    771c:	b943      	cbnz	r3, 7730 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    771e:	1c71      	adds	r1, r6, #1
    7720:	2240      	movs	r2, #64	; 0x40
    7722:	480c      	ldr	r0, [pc, #48]	; (7754 <le_pkey_complete+0x48>)
    7724:	f01e fd1c 	bl	26160 <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7728:	2108      	movs	r1, #8
    772a:	4809      	ldr	r0, [pc, #36]	; (7750 <le_pkey_complete+0x44>)
    772c:	f01e fff3 	bl	26716 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7730:	4d09      	ldr	r5, [pc, #36]	; (7758 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    7732:	4f08      	ldr	r7, [pc, #32]	; (7754 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7734:	682c      	ldr	r4, [r5, #0]
    7736:	b90c      	cbnz	r4, 773c <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    7738:	602c      	str	r4, [r5, #0]
}
    773a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    773c:	7832      	ldrb	r2, [r6, #0]
    773e:	6823      	ldr	r3, [r4, #0]
    7740:	2a00      	cmp	r2, #0
    7742:	bf0c      	ite	eq
    7744:	4638      	moveq	r0, r7
    7746:	2000      	movne	r0, #0
    7748:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    774a:	6864      	ldr	r4, [r4, #4]
    774c:	e7f3      	b.n	7736 <le_pkey_complete+0x2a>
    774e:	bf00      	nop
    7750:	20000254 	.word	0x20000254
    7754:	20003645 	.word	0x20003645
    7758:	20002094 	.word	0x20002094

0000775c <hci_hardware_error>:
{
    775c:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    775e:	2101      	movs	r1, #1
    7760:	3008      	adds	r0, #8
    7762:	f015 fffb 	bl	1d75c <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7766:	2145      	movs	r1, #69	; 0x45
    7768:	7802      	ldrb	r2, [r0, #0]
    776a:	4802      	ldr	r0, [pc, #8]	; (7774 <hci_hardware_error+0x18>)
}
    776c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7770:	f01c bd64 	b.w	2423c <printk>
    7774:	0002cf94 	.word	0x0002cf94

00007778 <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
    7778:	b508      	push	{r3, lr}
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
    777a:	8981      	ldrh	r1, [r0, #12]
    777c:	6880      	ldr	r0, [r0, #8]
    777e:	f7ff fbb5 	bl	6eec <bt_hex_real>
    7782:	2157      	movs	r1, #87	; 0x57
    7784:	4602      	mov	r2, r0
			bt_hex(buf->data, buf->len));
	}
}
    7786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    778a:	4801      	ldr	r0, [pc, #4]	; (7790 <hci_vendor_event+0x18>)
    778c:	f01c bd56 	b.w	2423c <printk>
    7790:	0002d0b7 	.word	0x0002d0b7

00007794 <le_conn_update_complete>:
{
    7794:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    7796:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7798:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    779c:	4630      	mov	r0, r6
    779e:	f002 fa6f 	bl	9c80 <bt_conn_lookup_handle>
	if (!conn) {
    77a2:	4604      	mov	r4, r0
    77a4:	b930      	cbnz	r0, 77b4 <le_conn_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    77a6:	4632      	mov	r2, r6
    77a8:	2145      	movs	r1, #69	; 0x45
    77aa:	481a      	ldr	r0, [pc, #104]	; (7814 <le_conn_update_complete+0x80>)
    77ac:	f01c fd46 	bl	2423c <printk>
}
    77b0:	b002      	add	sp, #8
    77b2:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    77b4:	782b      	ldrb	r3, [r5, #0]
    77b6:	b9bb      	cbnz	r3, 77e8 <le_conn_update_complete+0x54>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    77b8:	792a      	ldrb	r2, [r5, #4]
    77ba:	78eb      	ldrb	r3, [r5, #3]
    77bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77c0:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    77c4:	79aa      	ldrb	r2, [r5, #6]
    77c6:	796b      	ldrb	r3, [r5, #5]
    77c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77cc:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    77d0:	79eb      	ldrb	r3, [r5, #7]
    77d2:	7a2a      	ldrb	r2, [r5, #8]
    77d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    77d8:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    77dc:	f002 f862 	bl	98a4 <notify_le_param_updated>
	bt_conn_unref(conn);
    77e0:	4620      	mov	r0, r4
    77e2:	f002 fa21 	bl	9c28 <bt_conn_unref>
    77e6:	e7e3      	b.n	77b0 <le_conn_update_complete+0x1c>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    77e8:	2b1a      	cmp	r3, #26
    77ea:	d1f9      	bne.n	77e0 <le_conn_update_complete+0x4c>
    77ec:	78c3      	ldrb	r3, [r0, #3]
    77ee:	2b01      	cmp	r3, #1
    77f0:	d1f6      	bne.n	77e0 <le_conn_update_complete+0x4c>
		   !atomic_test_and_set_bit(conn->flags,
    77f2:	210a      	movs	r1, #10
    77f4:	3004      	adds	r0, #4
    77f6:	f01e ff9d 	bl	26734 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    77fa:	2800      	cmp	r0, #0
    77fc:	d1f0      	bne.n	77e0 <le_conn_update_complete+0x4c>
		param.interval_min = conn->le.interval_min;
    77fe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7802:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    7804:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    7806:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    780a:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    780c:	4620      	mov	r0, r4
    780e:	f002 fe5f 	bl	a4d0 <bt_l2cap_update_conn_param>
    7812:	e7e5      	b.n	77e0 <le_conn_update_complete+0x4c>
    7814:	0002d12e 	.word	0x0002d12e

00007818 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    7818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    781a:	4e0a      	ldr	r6, [pc, #40]	; (7844 <id_find+0x2c>)
{
    781c:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    781e:	2500      	movs	r5, #0
    7820:	79f3      	ldrb	r3, [r6, #7]
    7822:	b2ec      	uxtb	r4, r5
    7824:	42a3      	cmp	r3, r4
    7826:	d802      	bhi.n	782e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    7828:	f06f 0401 	mvn.w	r4, #1
    782c:	e008      	b.n	7840 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    782e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    7832:	4431      	add	r1, r6
    7834:	4638      	mov	r0, r7
    7836:	f01e ffa8 	bl	2678a <bt_addr_le_cmp>
    783a:	3501      	adds	r5, #1
    783c:	2800      	cmp	r0, #0
    783e:	d1ef      	bne.n	7820 <id_find+0x8>
}
    7840:	4620      	mov	r0, r4
    7842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7844:	200001c0 	.word	0x200001c0

00007848 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    7848:	6843      	ldr	r3, [r0, #4]
{
    784a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    784c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    784e:	0558      	lsls	r0, r3, #21
    7850:	d502      	bpl.n	7858 <valid_adv_param+0x10>
		return false;
    7852:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    7854:	b003      	add	sp, #12
    7856:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7858:	6922      	ldr	r2, [r4, #16]
    785a:	b10a      	cbz	r2, 7860 <valid_adv_param+0x18>
    785c:	07d9      	lsls	r1, r3, #31
    785e:	d5f8      	bpl.n	7852 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    7860:	4d1a      	ldr	r5, [pc, #104]	; (78cc <valid_adv_param+0x84>)
    7862:	7820      	ldrb	r0, [r4, #0]
    7864:	79eb      	ldrb	r3, [r5, #7]
    7866:	4283      	cmp	r3, r0
    7868:	d9f3      	bls.n	7852 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    786a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    786e:	2300      	movs	r3, #0
    7870:	4669      	mov	r1, sp
    7872:	4428      	add	r0, r5
    7874:	9300      	str	r3, [sp, #0]
    7876:	f8cd 3003 	str.w	r3, [sp, #3]
    787a:	f01e ff86 	bl	2678a <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    787e:	2800      	cmp	r0, #0
    7880:	d0e7      	beq.n	7852 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7882:	6860      	ldr	r0, [r4, #4]
    7884:	07c2      	lsls	r2, r0, #31
    7886:	d406      	bmi.n	7896 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    7888:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    788c:	2b08      	cmp	r3, #8
    788e:	d802      	bhi.n	7896 <valid_adv_param+0x4e>
    7890:	68a3      	ldr	r3, [r4, #8]
    7892:	2b9f      	cmp	r3, #159	; 0x9f
    7894:	d9dd      	bls.n	7852 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    7896:	f010 0f30 	tst.w	r0, #48	; 0x30
    789a:	d002      	beq.n	78a2 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    789c:	6923      	ldr	r3, [r4, #16]
    789e:	2b00      	cmp	r3, #0
    78a0:	d0d7      	beq.n	7852 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    78a2:	06c3      	lsls	r3, r0, #27
    78a4:	d401      	bmi.n	78aa <valid_adv_param+0x62>
    78a6:	6923      	ldr	r3, [r4, #16]
    78a8:	b943      	cbnz	r3, 78bc <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    78aa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    78ae:	429a      	cmp	r2, r3
    78b0:	d8cf      	bhi.n	7852 <valid_adv_param+0xa>
    78b2:	2a1f      	cmp	r2, #31
    78b4:	d9cd      	bls.n	7852 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    78b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    78ba:	d8ca      	bhi.n	7852 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    78bc:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    78c0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    78c4:	bf18      	it	ne
    78c6:	2001      	movne	r0, #1
    78c8:	e7c4      	b.n	7854 <valid_adv_param+0xc>
    78ca:	bf00      	nop
    78cc:	200001c0 	.word	0x200001c0

000078d0 <hci_cmd_done>:
{
    78d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    78d4:	4680      	mov	r8, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    78d6:	7990      	ldrb	r0, [r2, #6]
    78d8:	4e2b      	ldr	r6, [pc, #172]	; (7988 <hci_cmd_done+0xb8>)
{
    78da:	460f      	mov	r7, r1
    78dc:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    78de:	f015 fc31 	bl	1d144 <net_buf_pool_get>
    78e2:	4286      	cmp	r6, r0
    78e4:	d00e      	beq.n	7904 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    78e6:	79ac      	ldrb	r4, [r5, #6]
    78e8:	4620      	mov	r0, r4
    78ea:	f015 fc2b 	bl	1d144 <net_buf_pool_get>
    78ee:	4623      	mov	r3, r4
    78f0:	e9cd 0600 	strd	r0, r6, [sp]
    78f4:	4642      	mov	r2, r8
    78f6:	2157      	movs	r1, #87	; 0x57
    78f8:	4824      	ldr	r0, [pc, #144]	; (798c <hci_cmd_done+0xbc>)
    78fa:	f01c fc9f 	bl	2423c <printk>
}
    78fe:	b002      	add	sp, #8
    7900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    7904:	4628      	mov	r0, r5
    7906:	f015 fc25 	bl	1d154 <net_buf_id>
    790a:	4c21      	ldr	r4, [pc, #132]	; (7990 <hci_cmd_done+0xc0>)
    790c:	260c      	movs	r6, #12
    790e:	fb06 4000 	mla	r0, r6, r0, r4
    7912:	8843      	ldrh	r3, [r0, #2]
    7914:	4543      	cmp	r3, r8
    7916:	d00a      	beq.n	792e <hci_cmd_done+0x5e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7918:	4628      	mov	r0, r5
    791a:	f015 fc1b 	bl	1d154 <net_buf_id>
    791e:	fb06 4000 	mla	r0, r6, r0, r4
    7922:	4642      	mov	r2, r8
    7924:	8843      	ldrh	r3, [r0, #2]
    7926:	481b      	ldr	r0, [pc, #108]	; (7994 <hci_cmd_done+0xc4>)
    7928:	2157      	movs	r1, #87	; 0x57
    792a:	f01c fc87 	bl	2423c <printk>
	if (cmd(buf)->state && !status) {
    792e:	4628      	mov	r0, r5
    7930:	f015 fc10 	bl	1d154 <net_buf_id>
    7934:	260c      	movs	r6, #12
    7936:	fb06 4000 	mla	r0, r6, r0, r4
    793a:	6843      	ldr	r3, [r0, #4]
    793c:	b15b      	cbz	r3, 7956 <hci_cmd_done+0x86>
    793e:	b957      	cbnz	r7, 7956 <hci_cmd_done+0x86>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    7940:	4628      	mov	r0, r5
    7942:	f015 fc07 	bl	1d154 <net_buf_id>
    7946:	fb06 4000 	mla	r0, r6, r0, r4
    794a:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    794c:	7a1a      	ldrb	r2, [r3, #8]
    794e:	e9d3 0100 	ldrd	r0, r1, [r3]
    7952:	f01e ff09 	bl	26768 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    7956:	4628      	mov	r0, r5
    7958:	f015 fbfc 	bl	1d154 <net_buf_id>
    795c:	260c      	movs	r6, #12
    795e:	fb06 4000 	mla	r0, r6, r0, r4
    7962:	6883      	ldr	r3, [r0, #8]
    7964:	2b00      	cmp	r3, #0
    7966:	d0ca      	beq.n	78fe <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    7968:	4628      	mov	r0, r5
    796a:	f015 fbf3 	bl	1d154 <net_buf_id>
    796e:	4370      	muls	r0, r6
    7970:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
    7972:	4628      	mov	r0, r5
    7974:	f015 fbee 	bl	1d154 <net_buf_id>
    7978:	fb06 4000 	mla	r0, r6, r0, r4
    797c:	6880      	ldr	r0, [r0, #8]
}
    797e:	b002      	add	sp, #8
    7980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    7984:	f01a ba82 	b.w	21e8c <z_impl_k_sem_give>
    7988:	20000edc 	.word	0x20000edc
    798c:	0002ceca 	.word	0x0002ceca
    7990:	20002078 	.word	0x20002078
    7994:	0002cf04 	.word	0x0002cf04

00007998 <handle_event>:
{
    7998:	b537      	push	{r0, r1, r2, r4, r5, lr}
    799a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    799e:	4604      	mov	r4, r0
    79a0:	4608      	mov	r0, r1
		if (handler->event != event) {
    79a2:	7811      	ldrb	r1, [r2, #0]
    79a4:	42a1      	cmp	r1, r4
    79a6:	d010      	beq.n	79ca <handle_event+0x32>
			continue;
    79a8:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
    79aa:	429a      	cmp	r2, r3
    79ac:	d1f9      	bne.n	79a2 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    79ae:	8985      	ldrh	r5, [r0, #12]
    79b0:	6880      	ldr	r0, [r0, #8]
    79b2:	4629      	mov	r1, r5
    79b4:	f7ff fa9a 	bl	6eec <bt_hex_real>
    79b8:	462b      	mov	r3, r5
    79ba:	9000      	str	r0, [sp, #0]
    79bc:	4622      	mov	r2, r4
    79be:	2157      	movs	r1, #87	; 0x57
    79c0:	480b      	ldr	r0, [pc, #44]	; (79f0 <handle_event+0x58>)
    79c2:	f01c fc3b 	bl	2423c <printk>
}
    79c6:	b003      	add	sp, #12
    79c8:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    79ca:	8981      	ldrh	r1, [r0, #12]
    79cc:	7853      	ldrb	r3, [r2, #1]
    79ce:	428b      	cmp	r3, r1
    79d0:	d908      	bls.n	79e4 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    79d2:	4808      	ldr	r0, [pc, #32]	; (79f4 <handle_event+0x5c>)
    79d4:	460a      	mov	r2, r1
    79d6:	4623      	mov	r3, r4
    79d8:	2145      	movs	r1, #69	; 0x45
}
    79da:	b003      	add	sp, #12
    79dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    79e0:	f01c bc2c 	b.w	2423c <printk>
		handler->handler(buf);
    79e4:	6853      	ldr	r3, [r2, #4]
}
    79e6:	b003      	add	sp, #12
    79e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    79ec:	4718      	bx	r3
    79ee:	bf00      	nop
    79f0:	0002cea3 	.word	0x0002cea3
    79f4:	0002ce7c 	.word	0x0002ce7c

000079f8 <hci_le_meta_event>:
{
    79f8:	b510      	push	{r4, lr}
    79fa:	2101      	movs	r1, #1
    79fc:	4604      	mov	r4, r0
    79fe:	3008      	adds	r0, #8
    7a00:	f015 feac 	bl	1d75c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7a04:	4621      	mov	r1, r4
    7a06:	2308      	movs	r3, #8
    7a08:	4a02      	ldr	r2, [pc, #8]	; (7a14 <hci_le_meta_event+0x1c>)
    7a0a:	7800      	ldrb	r0, [r0, #0]
}
    7a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7a10:	f7ff bfc2 	b.w	7998 <handle_event>
    7a14:	0002aeec 	.word	0x0002aeec

00007a18 <find_pending_connect.part.21>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7a18:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7a1a:	4c0c      	ldr	r4, [pc, #48]	; (7a4c <find_pending_connect.part.21+0x34>)
    7a1c:	4601      	mov	r1, r0
    7a1e:	2205      	movs	r2, #5
    7a20:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    7a24:	f002 fa44 	bl	9eb0 <bt_conn_lookup_state_le>
		if (!conn) {
    7a28:	b970      	cbnz	r0, 7a48 <find_pending_connect.part.21+0x30>
						       BT_ADDR_LE_NONE,
    7a2a:	4b09      	ldr	r3, [pc, #36]	; (7a50 <find_pending_connect.part.21+0x38>)
    7a2c:	6818      	ldr	r0, [r3, #0]
    7a2e:	889a      	ldrh	r2, [r3, #4]
    7a30:	9000      	str	r0, [sp, #0]
    7a32:	799b      	ldrb	r3, [r3, #6]
    7a34:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7a38:	4669      	mov	r1, sp
    7a3a:	2204      	movs	r2, #4
    7a3c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    7a40:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7a44:	f002 fa34 	bl	9eb0 <bt_conn_lookup_state_le>
}
    7a48:	b002      	add	sp, #8
    7a4a:	bd10      	pop	{r4, pc}
    7a4c:	200001c0 	.word	0x200001c0
    7a50:	0002ab44 	.word	0x0002ab44

00007a54 <hci_tx_thread>:
{
    7a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    7a58:	f8df 8128 	ldr.w	r8, [pc, #296]	; 7b84 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    7a5c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 7ba8 <hci_tx_thread+0x154>
			ev_count += bt_conn_prepare_events(&events[1]);
    7a60:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    7a64:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7a68:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    7a6a:	f36f 3310 	bfc	r3, #12, #5
    7a6e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7a72:	f002 f86f 	bl	9b54 <bt_conn_prepare_events>
    7a76:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    7a78:	f04f 32ff 	mov.w	r2, #4294967295
    7a7c:	f04f 33ff 	mov.w	r3, #4294967295
    7a80:	4639      	mov	r1, r7
    7a82:	4840      	ldr	r0, [pc, #256]	; (7b84 <hci_tx_thread+0x130>)
    7a84:	f01b fa4c 	bl	22f20 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7a88:	b158      	cbz	r0, 7aa2 <hci_tx_thread+0x4e>
    7a8a:	f241 4271 	movw	r2, #5233	; 0x1471
    7a8e:	4649      	mov	r1, r9
    7a90:	483d      	ldr	r0, [pc, #244]	; (7b88 <hci_tx_thread+0x134>)
    7a92:	f01c fbd3 	bl	2423c <printk>
    7a96:	4040      	eors	r0, r0
    7a98:	f380 8811 	msr	BASEPRI, r0
    7a9c:	f04f 0003 	mov.w	r0, #3
    7aa0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7aa2:	4c3a      	ldr	r4, [pc, #232]	; (7b8c <hci_tx_thread+0x138>)
{
    7aa4:	4e37      	ldr	r6, [pc, #220]	; (7b84 <hci_tx_thread+0x130>)
    7aa6:	f104 0be0 	add.w	fp, r4, #224	; 0xe0
	for (; count; ev++, count--) {
    7aaa:	b917      	cbnz	r7, 7ab2 <hci_tx_thread+0x5e>
	z_impl_k_yield();
    7aac:	f01a f88e 	bl	21bcc <z_impl_k_yield>
    7ab0:	e7d8      	b.n	7a64 <hci_tx_thread+0x10>
		switch (ev->state) {
    7ab2:	68f2      	ldr	r2, [r6, #12]
    7ab4:	f3c2 3204 	ubfx	r2, r2, #12, #5
    7ab8:	2a01      	cmp	r2, #1
    7aba:	d953      	bls.n	7b64 <hci_tx_thread+0x110>
    7abc:	2a04      	cmp	r2, #4
    7abe:	d15b      	bne.n	7b78 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7ac0:	7b33      	ldrb	r3, [r6, #12]
    7ac2:	2b00      	cmp	r3, #0
    7ac4:	d151      	bne.n	7b6a <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7ac6:	2200      	movs	r2, #0
    7ac8:	2300      	movs	r3, #0
    7aca:	4831      	ldr	r0, [pc, #196]	; (7b90 <hci_tx_thread+0x13c>)
    7acc:	f015 fc34 	bl	1d338 <net_buf_get>
	BT_ASSERT(buf);
    7ad0:	4605      	mov	r5, r0
    7ad2:	b958      	cbnz	r0, 7aec <hci_tx_thread+0x98>
    7ad4:	f241 420e 	movw	r2, #5134	; 0x140e
    7ad8:	4649      	mov	r1, r9
    7ada:	482b      	ldr	r0, [pc, #172]	; (7b88 <hci_tx_thread+0x134>)
    7adc:	f01c fbae 	bl	2423c <printk>
    7ae0:	4040      	eors	r0, r0
    7ae2:	f380 8811 	msr	BASEPRI, r0
    7ae6:	f04f 0003 	mov.w	r0, #3
    7aea:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7aec:	f04f 33ff 	mov.w	r3, #4294967295
    7af0:	f04f 32ff 	mov.w	r2, #4294967295
    7af4:	4658      	mov	r0, fp
    7af6:	f01a fa05 	bl	21f04 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7afa:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    7afe:	b153      	cbz	r3, 7b16 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    7b00:	2145      	movs	r1, #69	; 0x45
    7b02:	4824      	ldr	r0, [pc, #144]	; (7b94 <hci_tx_thread+0x140>)
    7b04:	f01c fb9a 	bl	2423c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    7b08:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    7b0c:	f015 fd2e 	bl	1d56c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7b10:	2300      	movs	r3, #0
    7b12:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    7b16:	4628      	mov	r0, r5
    7b18:	f015 fd6c 	bl	1d5f4 <net_buf_ref>
    7b1c:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
		return bt_hci_ecc_send(buf);
    7b20:	4628      	mov	r0, r5
    7b22:	f7ff fb43 	bl	71ac <bt_hci_ecc_send>
	if (err) {
    7b26:	4602      	mov	r2, r0
    7b28:	b1e0      	cbz	r0, 7b64 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    7b2a:	2145      	movs	r1, #69	; 0x45
    7b2c:	481a      	ldr	r0, [pc, #104]	; (7b98 <hci_tx_thread+0x144>)
    7b2e:	f01c fb85 	bl	2423c <printk>
	z_impl_k_sem_give(sem);
    7b32:	481a      	ldr	r0, [pc, #104]	; (7b9c <hci_tx_thread+0x148>)
    7b34:	f01a f9aa 	bl	21e8c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    7b38:	4628      	mov	r0, r5
    7b3a:	f015 fb0b 	bl	1d154 <net_buf_id>
    7b3e:	4a18      	ldr	r2, [pc, #96]	; (7ba0 <hci_tx_thread+0x14c>)
    7b40:	230c      	movs	r3, #12
    7b42:	fb03 2000 	mla	r0, r3, r0, r2
    7b46:	211f      	movs	r1, #31
    7b48:	462a      	mov	r2, r5
    7b4a:	8840      	ldrh	r0, [r0, #2]
    7b4c:	f7ff fec0 	bl	78d0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7b50:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
    7b54:	f015 fd0a 	bl	1d56c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7b58:	2300      	movs	r3, #0
		net_buf_unref(buf);
    7b5a:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    7b5c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		net_buf_unref(buf);
    7b60:	f015 fd04 	bl	1d56c <net_buf_unref>
	for (; count; ev++, count--) {
    7b64:	3614      	adds	r6, #20
    7b66:	3f01      	subs	r7, #1
    7b68:	e79f      	b.n	7aaa <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    7b6a:	2b01      	cmp	r3, #1
    7b6c:	d1fa      	bne.n	7b64 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    7b6e:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    7b70:	3834      	subs	r0, #52	; 0x34
    7b72:	f002 fadd 	bl	a130 <bt_conn_process_tx>
    7b76:	e7f5      	b.n	7b64 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    7b78:	2157      	movs	r1, #87	; 0x57
    7b7a:	480a      	ldr	r0, [pc, #40]	; (7ba4 <hci_tx_thread+0x150>)
    7b7c:	f01c fb5e 	bl	2423c <printk>
    7b80:	e7f0      	b.n	7b64 <hci_tx_thread+0x110>
    7b82:	bf00      	nop
    7b84:	20000558 	.word	0x20000558
    7b88:	0002bced 	.word	0x0002bced
    7b8c:	200001c0 	.word	0x200001c0
    7b90:	200002bc 	.word	0x200002bc
    7b94:	0002d04a 	.word	0x0002d04a
    7b98:	0002d06a 	.word	0x0002d06a
    7b9c:	200002a0 	.word	0x200002a0
    7ba0:	20002078 	.word	0x20002078
    7ba4:	0002d091 	.word	0x0002d091
    7ba8:	0002d016 	.word	0x0002d016

00007bac <hci_num_completed_packets>:
{
    7bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    7bb0:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    7bb2:	6887      	ldr	r7, [r0, #8]
    7bb4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 7c9c <hci_num_completed_packets+0xf0>
			tx->pending_no_cb = 0U;
    7bb8:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    7bba:	783b      	ldrb	r3, [r7, #0]
    7bbc:	429d      	cmp	r5, r3
    7bbe:	db01      	blt.n	7bc4 <hci_num_completed_packets+0x18>
}
    7bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    7bc4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    7bc8:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    7bcc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    7bd0:	4650      	mov	r0, sl
    7bd2:	f002 f855 	bl	9c80 <bt_conn_lookup_handle>
		if (!conn) {
    7bd6:	4604      	mov	r4, r0
    7bd8:	b1d0      	cbz	r0, 7c10 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7bda:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    7bde:	b37e      	cbz	r6, 7c40 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    7be0:	f04f 0320 	mov.w	r3, #32
    7be4:	f3ef 8211 	mrs	r2, BASEPRI
    7be8:	f383 8811 	msr	BASEPRI, r3
    7bec:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    7bf0:	69e3      	ldr	r3, [r4, #28]
    7bf2:	b1a3      	cbz	r3, 7c1e <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    7bf4:	3b01      	subs	r3, #1
    7bf6:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7bf8:	f382 8811 	msr	BASEPRI, r2
    7bfc:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    7c00:	4620      	mov	r0, r4
    7c02:	f001 fe4b 	bl	989c <bt_conn_get_pkts>
    7c06:	3e01      	subs	r6, #1
    7c08:	f01a f940 	bl	21e8c <z_impl_k_sem_give>
    7c0c:	b2b6      	uxth	r6, r6
    7c0e:	e7e6      	b.n	7bde <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    7c10:	4652      	mov	r2, sl
    7c12:	2145      	movs	r1, #69	; 0x45
    7c14:	481f      	ldr	r0, [pc, #124]	; (7c94 <hci_num_completed_packets+0xe8>)
    7c16:	f01c fb11 	bl	2423c <printk>
	for (i = 0; i < evt->num_handles; i++) {
    7c1a:	3501      	adds	r5, #1
    7c1c:	e7cd      	b.n	7bba <hci_num_completed_packets+0xe>
Z_GENLIST_IS_EMPTY(slist)
    7c1e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    7c20:	b12b      	cbz	r3, 7c2e <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7c22:	69a1      	ldr	r1, [r4, #24]
    7c24:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    7c26:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7c28:	428b      	cmp	r3, r1
	list->tail = node;
    7c2a:	bf08      	it	eq
    7c2c:	61a0      	streq	r0, [r4, #24]
    7c2e:	f382 8811 	msr	BASEPRI, r2
    7c32:	f3bf 8f6f 	isb	sy
			if (!node) {
    7c36:	b93b      	cbnz	r3, 7c48 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    7c38:	2145      	movs	r1, #69	; 0x45
    7c3a:	4817      	ldr	r0, [pc, #92]	; (7c98 <hci_num_completed_packets+0xec>)
    7c3c:	f01c fafe 	bl	2423c <printk>
		bt_conn_unref(conn);
    7c40:	4620      	mov	r0, r4
    7c42:	f001 fff1 	bl	9c28 <bt_conn_unref>
    7c46:	e7e8      	b.n	7c1a <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    7c48:	f04f 0220 	mov.w	r2, #32
    7c4c:	f3ef 8111 	mrs	r1, BASEPRI
    7c50:	f382 8811 	msr	BASEPRI, r2
    7c54:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    7c58:	68da      	ldr	r2, [r3, #12]
    7c5a:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    7c5c:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    7c60:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    7c62:	f8c3 800c 	str.w	r8, [r3, #12]
    7c66:	b98a      	cbnz	r2, 7c8c <hci_num_completed_packets+0xe0>
	list->head = node;
    7c68:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    7c6c:	f381 8811 	msr	BASEPRI, r1
    7c70:	f3bf 8f6f 	isb	sy
    7c74:	2100      	movs	r1, #0
    7c76:	f104 0030 	add.w	r0, r4, #48	; 0x30
    7c7a:	f01e fd5b 	bl	26734 <atomic_test_and_set_bit>
    7c7e:	2800      	cmp	r0, #0
    7c80:	d1be      	bne.n	7c00 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    7c82:	4651      	mov	r1, sl
    7c84:	4648      	mov	r0, r9
    7c86:	f022 facd 	bl	2a224 <k_queue_append>
    7c8a:	e7b9      	b.n	7c00 <hci_num_completed_packets+0x54>
	parent->next = child;
    7c8c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7c8e:	6263      	str	r3, [r4, #36]	; 0x24
    7c90:	e7ec      	b.n	7c6c <hci_num_completed_packets+0xc0>
    7c92:	bf00      	nop
    7c94:	0002cfbb 	.word	0x0002cfbb
    7c98:	0002cfdc 	.word	0x0002cfdc
    7c9c:	20001988 	.word	0x20001988

00007ca0 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    7ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7ca2:	4b28      	ldr	r3, [pc, #160]	; (7d44 <le_adv_start_add_conn+0xa4>)
	struct adv_id_check_data check_data = {
		.id = adv->id,
    7ca4:	7804      	ldrb	r4, [r0, #0]
{
    7ca6:	b085      	sub	sp, #20
    7ca8:	4606      	mov	r6, r0
    7caa:	460f      	mov	r7, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7cac:	f103 0028 	add.w	r0, r3, #40	; 0x28
    7cb0:	2106      	movs	r1, #6
    7cb2:	f01e fd6d 	bl	26790 <atomic_test_bit>
    7cb6:	461a      	mov	r2, r3
    7cb8:	b140      	cbz	r0, 7ccc <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    7cba:	2108      	movs	r1, #8
    7cbc:	f103 0028 	add.w	r0, r3, #40	; 0x28
    7cc0:	f01e fd66 	bl	26790 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7cc4:	b110      	cbz	r0, 7ccc <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    7cc6:	7e1b      	ldrb	r3, [r3, #24]
    7cc8:	42a3      	cmp	r3, r4
    7cca:	d134      	bne.n	7d36 <le_adv_start_add_conn+0x96>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    7ccc:	4635      	mov	r5, r6

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7cce:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    7cd0:	f815 3b09 	ldrb.w	r3, [r5], #9
    7cd4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7cd8:	4628      	mov	r0, r5
    7cda:	2300      	movs	r3, #0
    7cdc:	9300      	str	r3, [sp, #0]
    7cde:	f8cd 3003 	str.w	r3, [sp, #3]
    7ce2:	f01e fd52 	bl	2678a <bt_addr_le_cmp>
    7ce6:	4604      	mov	r4, r0
    7ce8:	7830      	ldrb	r0, [r6, #0]
    7cea:	b164      	cbz	r4, 7d06 <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    7cec:	4629      	mov	r1, r5
    7cee:	f002 f8c3 	bl	9e78 <bt_conn_exists_le>
    7cf2:	4604      	mov	r4, r0
    7cf4:	bb10      	cbnz	r0, 7d3c <le_adv_start_add_conn+0x9c>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    7cf6:	4629      	mov	r1, r5
    7cf8:	7830      	ldrb	r0, [r6, #0]
    7cfa:	f001 ff69 	bl	9bd0 <bt_conn_add_le>
	if (!conn) {
    7cfe:	4605      	mov	r5, r0
    7d00:	b178      	cbz	r0, 7d22 <le_adv_start_add_conn+0x82>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7d02:	2105      	movs	r1, #5
    7d04:	e013      	b.n	7d2e <le_adv_start_add_conn+0x8e>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    7d06:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    7d0a:	9302      	str	r3, [sp, #8]
    7d0c:	a902      	add	r1, sp, #8
    7d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7d12:	f8ad 300c 	strh.w	r3, [sp, #12]
    7d16:	f88d 300e 	strb.w	r3, [sp, #14]
    7d1a:	f001 ff59 	bl	9bd0 <bt_conn_add_le>
		if (!conn) {
    7d1e:	4605      	mov	r5, r0
    7d20:	b920      	cbnz	r0, 7d2c <le_adv_start_add_conn+0x8c>
			return -ENOMEM;
    7d22:	f06f 040b 	mvn.w	r4, #11
	*out_conn = conn;
	return 0;
}
    7d26:	4620      	mov	r0, r4
    7d28:	b005      	add	sp, #20
    7d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    7d2c:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7d2e:	f001 ffaf 	bl	9c90 <bt_conn_set_state>
	*out_conn = conn;
    7d32:	603d      	str	r5, [r7, #0]
	return 0;
    7d34:	e7f7      	b.n	7d26 <le_adv_start_add_conn+0x86>
		return -ENOTSUP;
    7d36:	f06f 0422 	mvn.w	r4, #34	; 0x22
    7d3a:	e7f4      	b.n	7d26 <le_adv_start_add_conn+0x86>
		return -EINVAL;
    7d3c:	f06f 0415 	mvn.w	r4, #21
    7d40:	e7f1      	b.n	7d26 <le_adv_start_add_conn+0x86>
    7d42:	bf00      	nop
    7d44:	200001c0 	.word	0x200001c0

00007d48 <id_create.isra.22>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    7d48:	b530      	push	{r4, r5, lr}
    7d4a:	4d17      	ldr	r5, [pc, #92]	; (7da8 <id_create.isra.22+0x60>)
    7d4c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    7d50:	b085      	sub	sp, #20
    7d52:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7d54:	460c      	mov	r4, r1
    7d56:	b1a9      	cbz	r1, 7d84 <id_create.isra.22+0x3c>
    7d58:	2300      	movs	r3, #0
    7d5a:	a902      	add	r1, sp, #8
    7d5c:	4620      	mov	r0, r4
    7d5e:	9302      	str	r3, [sp, #8]
    7d60:	f8cd 300b 	str.w	r3, [sp, #11]
    7d64:	f01e fd11 	bl	2678a <bt_addr_le_cmp>
    7d68:	b160      	cbz	r0, 7d84 <id_create.isra.22+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    7d6a:	4621      	mov	r1, r4
    7d6c:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7d6e:	f01e fccf 	bl	26710 <bt_addr_le_copy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    7d72:	2101      	movs	r1, #1
    7d74:	480d      	ldr	r0, [pc, #52]	; (7dac <id_create.isra.22+0x64>)
    7d76:	f01e fd0b 	bl	26790 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    7d7a:	b108      	cbz	r0, 7d80 <id_create.isra.22+0x38>
		bt_settings_save_id();
    7d7c:	f7ff fb5e 	bl	743c <bt_settings_save_id>
}
    7d80:	b005      	add	sp, #20
    7d82:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    7d84:	4668      	mov	r0, sp
    7d86:	f01e fca6 	bl	266d6 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    7d8a:	4668      	mov	r0, sp
    7d8c:	f7ff fd44 	bl	7818 <id_find>
    7d90:	2800      	cmp	r0, #0
    7d92:	daf7      	bge.n	7d84 <id_create.isra.22+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    7d94:	4669      	mov	r1, sp
    7d96:	4628      	mov	r0, r5
    7d98:	f01e fcba 	bl	26710 <bt_addr_le_copy>
		if (addr) {
    7d9c:	2c00      	cmp	r4, #0
    7d9e:	d0e8      	beq.n	7d72 <id_create.isra.22+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    7da0:	4629      	mov	r1, r5
    7da2:	4620      	mov	r0, r4
    7da4:	e7e3      	b.n	7d6e <id_create.isra.22+0x26>
    7da6:	bf00      	nop
    7da8:	200001c0 	.word	0x200001c0
    7dac:	20000254 	.word	0x20000254

00007db0 <le_adv_report>:
{
    7db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    7db4:	f100 0508 	add.w	r5, r0, #8
    7db8:	b08b      	sub	sp, #44	; 0x2c
    7dba:	4604      	mov	r4, r0
    7dbc:	4628      	mov	r0, r5
    7dbe:	f021 fda8 	bl	29912 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    7dc2:	f8df b154 	ldr.w	fp, [pc, #340]	; 7f18 <le_adv_report+0x168>
    7dc6:	4680      	mov	r8, r0
	while (num_reports--) {
    7dc8:	f1b8 0f00 	cmp.w	r8, #0
    7dcc:	d006      	beq.n	7ddc <le_adv_report+0x2c>
		if (buf->len < sizeof(*evt)) {
    7dce:	89a3      	ldrh	r3, [r4, #12]
    7dd0:	2b08      	cmp	r3, #8
    7dd2:	d806      	bhi.n	7de2 <le_adv_report+0x32>
			BT_ERR("Unexpected end of buffer");
    7dd4:	2145      	movs	r1, #69	; 0x45
    7dd6:	484c      	ldr	r0, [pc, #304]	; (7f08 <le_adv_report+0x158>)
    7dd8:	f01c fa30 	bl	2423c <printk>
}
    7ddc:	b00b      	add	sp, #44	; 0x2c
    7dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    7de2:	2109      	movs	r1, #9
    7de4:	4628      	mov	r0, r5
    7de6:	f015 fcb9 	bl	1d75c <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    7dea:	f890 9008 	ldrb.w	r9, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    7dee:	237f      	movs	r3, #127	; 0x7f
    7df0:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
    7df4:	eb00 0309 	add.w	r3, r0, r9
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    7df8:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    7dfa:	7a5b      	ldrb	r3, [r3, #9]
    7dfc:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
    7e00:	23ff      	movs	r3, #255	; 0xff
    7e02:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
    7e06:	2300      	movs	r3, #0
    7e08:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    7e0c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		adv_info.adv_type = evt->evt_type;
    7e10:	7802      	ldrb	r2, [r0, #0]
    7e12:	f88d 201f 	strb.w	r2, [sp, #31]
    7e16:	2a04      	cmp	r2, #4
    7e18:	bf9c      	itt	ls
    7e1a:	4b3c      	ldrls	r3, [pc, #240]	; (7f0c <le_adv_report+0x15c>)
    7e1c:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    7e1e:	f8ad 3020 	strh.w	r3, [sp, #32]
    7e22:	4606      	mov	r6, r0
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    7e24:	1c43      	adds	r3, r0, #1
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    7e26:	2106      	movs	r1, #6
    7e28:	4839      	ldr	r0, [pc, #228]	; (7f10 <le_adv_report+0x160>)
    7e2a:	f01e fcb1 	bl	26790 <atomic_test_bit>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7e2e:	b168      	cbz	r0, 7e4c <le_adv_report+0x9c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    7e30:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    7e34:	0752      	lsls	r2, r2, #29
    7e36:	d509      	bpl.n	7e4c <le_adv_report+0x9c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    7e38:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    7e3a:	4628      	mov	r0, r5
    7e3c:	3101      	adds	r1, #1
    7e3e:	f108 38ff 	add.w	r8, r8, #4294967295
    7e42:	f015 fc6f 	bl	1d724 <net_buf_simple_pull>
    7e46:	fa5f f888 	uxtb.w	r8, r8
    7e4a:	e7bd      	b.n	7dc8 <le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    7e4c:	7872      	ldrb	r2, [r6, #1]
    7e4e:	1e91      	subs	r1, r2, #2
    7e50:	2901      	cmp	r1, #1
    7e52:	d84c      	bhi.n	7eee <le_adv_report+0x13e>
		bt_addr_le_copy(&id_addr, addr);
    7e54:	4619      	mov	r1, r3
    7e56:	a802      	add	r0, sp, #8
    7e58:	f01e fc5a 	bl	26710 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7e5c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7e60:	3b02      	subs	r3, #2
    7e62:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    7e66:	ab02      	add	r3, sp, #8
    7e68:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    7e6a:	f8db 3000 	ldr.w	r3, [fp]
    7e6e:	b1b3      	cbz	r3, 7e9e <le_adv_report+0xee>
	state->offset = net_buf_simple_headroom(buf);
    7e70:	4628      	mov	r0, r5
    7e72:	f021 fd88 	bl	29986 <net_buf_simple_headroom>
	state->len = buf->len;
    7e76:	89a3      	ldrh	r3, [r4, #12]
    7e78:	9300      	str	r3, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    7e7a:	4682      	mov	sl, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    7e7c:	462b      	mov	r3, r5
		buf->len = len;
    7e7e:	f8a4 900c 	strh.w	r9, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    7e82:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7e86:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    7e8a:	f8db 7000 	ldr.w	r7, [fp]
    7e8e:	a802      	add	r0, sp, #8
    7e90:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    7e92:	6923      	ldr	r3, [r4, #16]
    7e94:	fa13 f38a 	uxtah	r3, r3, sl
    7e98:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    7e9a:	9b00      	ldr	r3, [sp, #0]
    7e9c:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7e9e:	4b1d      	ldr	r3, [pc, #116]	; (7f14 <le_adv_report+0x164>)
    7ea0:	681b      	ldr	r3, [r3, #0]
    7ea2:	2b00      	cmp	r3, #0
    7ea4:	d0c8      	beq.n	7e38 <le_adv_report+0x88>
    7ea6:	f1b3 0208 	subs.w	r2, r3, #8
    7eaa:	d0c5      	beq.n	7e38 <le_adv_report+0x88>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7eac:	681f      	ldr	r7, [r3, #0]
    7eae:	b107      	cbz	r7, 7eb2 <le_adv_report+0x102>
    7eb0:	3f08      	subs	r7, #8
		if (listener->recv) {
    7eb2:	6813      	ldr	r3, [r2, #0]
    7eb4:	9201      	str	r2, [sp, #4]
    7eb6:	b193      	cbz	r3, 7ede <le_adv_report+0x12e>
	state->offset = net_buf_simple_headroom(buf);
    7eb8:	4628      	mov	r0, r5
    7eba:	f021 fd64 	bl	29986 <net_buf_simple_headroom>
			listener->recv(info, &buf->b);
    7ebe:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    7ec0:	89a3      	ldrh	r3, [r4, #12]
    7ec2:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
    7ec4:	f8a4 900c 	strh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    7ec8:	4682      	mov	sl, r0
			listener->recv(info, &buf->b);
    7eca:	4629      	mov	r1, r5
    7ecc:	a806      	add	r0, sp, #24
	state->len = buf->len;
    7ece:	9300      	str	r3, [sp, #0]
    7ed0:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    7ed2:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
    7ed4:	9b00      	ldr	r3, [sp, #0]
    7ed6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7ed8:	fa12 f28a 	uxtah	r2, r2, sl
    7edc:	60a2      	str	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    7ede:	2f00      	cmp	r7, #0
    7ee0:	d0aa      	beq.n	7e38 <le_adv_report+0x88>
    7ee2:	68bb      	ldr	r3, [r7, #8]
    7ee4:	b103      	cbz	r3, 7ee8 <le_adv_report+0x138>
    7ee6:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    7ee8:	463a      	mov	r2, r7
    7eea:	461f      	mov	r7, r3
    7eec:	e7e1      	b.n	7eb2 <le_adv_report+0x102>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    7eee:	2aff      	cmp	r2, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    7ef0:	bf06      	itte	eq
    7ef2:	2300      	moveq	r3, #0
    7ef4:	a904      	addeq	r1, sp, #16
		bt_addr_le_copy(&id_addr,
    7ef6:	4619      	movne	r1, r3
    7ef8:	a802      	add	r0, sp, #8
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    7efa:	bf04      	itt	eq
    7efc:	9304      	streq	r3, [sp, #16]
    7efe:	f8cd 3013 	streq.w	r3, [sp, #19]
		bt_addr_le_copy(&id_addr,
    7f02:	f01e fc05 	bl	26710 <bt_addr_le_copy>
    7f06:	e7ae      	b.n	7e66 <le_adv_report+0xb6>
    7f08:	0002d0e0 	.word	0x0002d0e0
    7f0c:	0002cae0 	.word	0x0002cae0
    7f10:	20000254 	.word	0x20000254
    7f14:	2000209c 	.word	0x2000209c
    7f18:	200020a4 	.word	0x200020a4

00007f1c <hci_cmd_status>:
{
    7f1c:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
    7f1e:	2104      	movs	r1, #4
    7f20:	4604      	mov	r4, r0
    7f22:	3008      	adds	r0, #8
    7f24:	f015 fc1a 	bl	1d75c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7f28:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7f2a:	7801      	ldrb	r1, [r0, #0]
    7f2c:	8840      	ldrh	r0, [r0, #2]
    7f2e:	4622      	mov	r2, r4
    7f30:	f7ff fcce 	bl	78d0 <hci_cmd_done>
	if (ncmd) {
    7f34:	b125      	cbz	r5, 7f40 <hci_cmd_status+0x24>
    7f36:	4803      	ldr	r0, [pc, #12]	; (7f44 <hci_cmd_status+0x28>)
}
    7f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f3c:	f019 bfa6 	b.w	21e8c <z_impl_k_sem_give>
    7f40:	bd38      	pop	{r3, r4, r5, pc}
    7f42:	bf00      	nop
    7f44:	200002a0 	.word	0x200002a0

00007f48 <hci_cmd_complete>:
{
    7f48:	b538      	push	{r3, r4, r5, lr}
    7f4a:	2103      	movs	r1, #3
    7f4c:	4604      	mov	r4, r0
    7f4e:	3008      	adds	r0, #8
    7f50:	f015 fc04 	bl	1d75c <net_buf_simple_pull_mem>
	status = buf->data[0];
    7f54:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7f56:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7f58:	7819      	ldrb	r1, [r3, #0]
    7f5a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7f5e:	4622      	mov	r2, r4
    7f60:	f7ff fcb6 	bl	78d0 <hci_cmd_done>
	if (ncmd) {
    7f64:	b125      	cbz	r5, 7f70 <hci_cmd_complete+0x28>
    7f66:	4803      	ldr	r0, [pc, #12]	; (7f74 <hci_cmd_complete+0x2c>)
}
    7f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f6c:	f019 bf8e 	b.w	21e8c <z_impl_k_sem_give>
    7f70:	bd38      	pop	{r3, r4, r5, pc}
    7f72:	bf00      	nop
    7f74:	200002a0 	.word	0x200002a0

00007f78 <bt_hci_cmd_create>:
{
    7f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    7f7c:	f04f 32ff 	mov.w	r2, #4294967295
    7f80:	4682      	mov	sl, r0
    7f82:	f04f 33ff 	mov.w	r3, #4294967295
    7f86:	481c      	ldr	r0, [pc, #112]	; (7ff8 <bt_hci_cmd_create+0x80>)
    7f88:	4689      	mov	r9, r1
    7f8a:	f021 fc9b 	bl	298c4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    7f8e:	4604      	mov	r4, r0
    7f90:	b950      	cbnz	r0, 7fa8 <bt_hci_cmd_create+0x30>
    7f92:	491a      	ldr	r1, [pc, #104]	; (7ffc <bt_hci_cmd_create+0x84>)
    7f94:	481a      	ldr	r0, [pc, #104]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7f96:	f44f 7281 	mov.w	r2, #258	; 0x102
    7f9a:	f01c f94f 	bl	2423c <printk>
    7f9e:	f44f 7181 	mov.w	r1, #258	; 0x102
    7fa2:	4816      	ldr	r0, [pc, #88]	; (7ffc <bt_hci_cmd_create+0x84>)
    7fa4:	f01c fbfc 	bl	247a0 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
    7fa8:	f104 0808 	add.w	r8, r4, #8
    7fac:	2100      	movs	r1, #0
    7fae:	2600      	movs	r6, #0
    7fb0:	4640      	mov	r0, r8
    7fb2:	f015 f9f1 	bl	1d398 <net_buf_simple_reserve>
    7fb6:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
    7fb8:	4620      	mov	r0, r4
    7fba:	f015 f8cb 	bl	1d154 <net_buf_id>
    7fbe:	4f11      	ldr	r7, [pc, #68]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7fc0:	250c      	movs	r5, #12
    7fc2:	fb05 7000 	mla	r0, r5, r0, r7
    7fc6:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
    7fca:	4620      	mov	r0, r4
    7fcc:	f015 f8c2 	bl	1d154 <net_buf_id>
    7fd0:	fb05 7000 	mla	r0, r5, r0, r7
    7fd4:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
    7fd6:	4620      	mov	r0, r4
    7fd8:	f015 f8bc 	bl	1d154 <net_buf_id>
    7fdc:	fb05 7000 	mla	r0, r5, r0, r7
	return net_buf_simple_add(&buf->b, len);
    7fe0:	2103      	movs	r1, #3
    7fe2:	6046      	str	r6, [r0, #4]
    7fe4:	4640      	mov	r0, r8
    7fe6:	f015 fbd7 	bl	1d798 <net_buf_simple_add>
	hdr->param_len = param_len;
    7fea:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    7fee:	f8a0 a000 	strh.w	sl, [r0]
}
    7ff2:	4620      	mov	r0, r4
    7ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ff8:	20000edc 	.word	0x20000edc
    7ffc:	0002d016 	.word	0x0002d016
    8000:	0002bced 	.word	0x0002bced
    8004:	20002078 	.word	0x20002078

00008008 <bt_hci_cmd_send>:
{
    8008:	b538      	push	{r3, r4, r5, lr}
    800a:	4604      	mov	r4, r0
	if (!buf) {
    800c:	460d      	mov	r5, r1
    800e:	b919      	cbnz	r1, 8018 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    8010:	f7ff ffb2 	bl	7f78 <bt_hci_cmd_create>
		if (!buf) {
    8014:	4605      	mov	r5, r0
    8016:	b1c0      	cbz	r0, 804a <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    8018:	f640 4335 	movw	r3, #3125	; 0xc35
    801c:	429c      	cmp	r4, r3
    801e:	d10e      	bne.n	803e <bt_hci_cmd_send+0x36>
		return bt_hci_ecc_send(buf);
    8020:	4628      	mov	r0, r5
    8022:	f7ff f8c3 	bl	71ac <bt_hci_ecc_send>
		if (err) {
    8026:	4604      	mov	r4, r0
    8028:	b138      	cbz	r0, 803a <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    802a:	4602      	mov	r2, r0
    802c:	2145      	movs	r1, #69	; 0x45
    802e:	4808      	ldr	r0, [pc, #32]	; (8050 <bt_hci_cmd_send+0x48>)
    8030:	f01c f904 	bl	2423c <printk>
			net_buf_unref(buf);
    8034:	4628      	mov	r0, r5
    8036:	f015 fa99 	bl	1d56c <net_buf_unref>
}
    803a:	4620      	mov	r0, r4
    803c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    803e:	4629      	mov	r1, r5
    8040:	4804      	ldr	r0, [pc, #16]	; (8054 <bt_hci_cmd_send+0x4c>)
    8042:	f015 fa65 	bl	1d510 <net_buf_put>
	return 0;
    8046:	2400      	movs	r4, #0
    8048:	e7f7      	b.n	803a <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    804a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    804e:	e7f4      	b.n	803a <bt_hci_cmd_send+0x32>
    8050:	0002d06a 	.word	0x0002d06a
    8054:	200002bc 	.word	0x200002bc

00008058 <le_conn_param_neg_reply>:
{
    8058:	b570      	push	{r4, r5, r6, lr}
    805a:	4606      	mov	r6, r0
    805c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    805e:	f242 0021 	movw	r0, #8225	; 0x2021
    8062:	2103      	movs	r1, #3
    8064:	f7ff ff88 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    8068:	4604      	mov	r4, r0
    806a:	b928      	cbnz	r0, 8078 <le_conn_param_neg_reply+0x20>
		BT_ERR("Unable to allocate buffer");
    806c:	2145      	movs	r1, #69	; 0x45
    806e:	4809      	ldr	r0, [pc, #36]	; (8094 <le_conn_param_neg_reply+0x3c>)
}
    8070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    8074:	f01c b8e2 	b.w	2423c <printk>
    8078:	2103      	movs	r1, #3
    807a:	3008      	adds	r0, #8
    807c:	f015 fb8c 	bl	1d798 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    8080:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    8082:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8084:	4621      	mov	r1, r4
    8086:	f242 0021 	movw	r0, #8225	; 0x2021
}
    808a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    808e:	f7ff bfbb 	b.w	8008 <bt_hci_cmd_send>
    8092:	bf00      	nop
    8094:	0002d10f 	.word	0x0002d10f

00008098 <le_conn_param_req>:
{
    8098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    809a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    809c:	78d9      	ldrb	r1, [r3, #3]
    809e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    80a0:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    80a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    80a6:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    80aa:	7959      	ldrb	r1, [r3, #5]
    80ac:	791a      	ldrb	r2, [r3, #4]
    80ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    80b2:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    80b6:	799a      	ldrb	r2, [r3, #6]
    80b8:	79d9      	ldrb	r1, [r3, #7]
    80ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    80be:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    80c2:	7a1a      	ldrb	r2, [r3, #8]
    80c4:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    80c6:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
    80c8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    80cc:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    80ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    80d2:	f001 fdd5 	bl	9c80 <bt_conn_lookup_handle>
	if (!conn) {
    80d6:	4607      	mov	r7, r0
    80d8:	b950      	cbnz	r0, 80f0 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    80da:	2145      	movs	r1, #69	; 0x45
    80dc:	481c      	ldr	r0, [pc, #112]	; (8150 <le_conn_param_req+0xb8>)
    80de:	4622      	mov	r2, r4
    80e0:	f01c f8ac 	bl	2423c <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    80e4:	2102      	movs	r1, #2
    80e6:	4620      	mov	r0, r4
    80e8:	f7ff ffb6 	bl	8058 <le_conn_param_neg_reply>
}
    80ec:	b003      	add	sp, #12
    80ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    80f0:	4669      	mov	r1, sp
    80f2:	f001 fc0b 	bl	990c <le_param_req>
    80f6:	b938      	cbnz	r0, 8108 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    80f8:	211e      	movs	r1, #30
    80fa:	4620      	mov	r0, r4
    80fc:	f7ff ffac 	bl	8058 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    8100:	4638      	mov	r0, r7
    8102:	f001 fd91 	bl	9c28 <bt_conn_unref>
    8106:	e7f1      	b.n	80ec <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    8108:	210e      	movs	r1, #14
    810a:	f242 0020 	movw	r0, #8224	; 0x2020
    810e:	f7ff ff33 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    8112:	4605      	mov	r5, r0
    8114:	2800      	cmp	r0, #0
    8116:	d0f3      	beq.n	8100 <le_conn_param_req+0x68>
    8118:	210e      	movs	r1, #14
    811a:	3008      	adds	r0, #8
    811c:	f015 fb3c 	bl	1d798 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    8120:	220e      	movs	r2, #14
    8122:	4604      	mov	r4, r0
    8124:	2100      	movs	r1, #0
    8126:	f01e f845 	bl	261b4 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    812a:	f8bd 3000 	ldrh.w	r3, [sp]
    812e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8130:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8134:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8136:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    813a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    813c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    8140:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8142:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8144:	4629      	mov	r1, r5
    8146:	f242 0020 	movw	r0, #8224	; 0x2020
    814a:	f7ff ff5d 	bl	8008 <bt_hci_cmd_send>
    814e:	e7d7      	b.n	8100 <le_conn_param_req+0x68>
    8150:	0002d12e 	.word	0x0002d12e

00008154 <conn_auto_initiate>:
{
    8154:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8156:	7a83      	ldrb	r3, [r0, #10]
    8158:	2b07      	cmp	r3, #7
{
    815a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    815c:	d11f      	bne.n	819e <conn_auto_initiate+0x4a>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    815e:	210d      	movs	r1, #13
    8160:	3004      	adds	r0, #4
    8162:	f01e fb15 	bl	26790 <atomic_test_bit>
    8166:	b9d0      	cbnz	r0, 819e <conn_auto_initiate+0x4a>
    8168:	78e3      	ldrb	r3, [r4, #3]
    816a:	b123      	cbz	r3, 8176 <conn_auto_initiate+0x22>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    816c:	4b0c      	ldr	r3, [pc, #48]	; (81a0 <conn_auto_initiate+0x4c>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    816e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    8172:	071b      	lsls	r3, r3, #28
    8174:	d513      	bpl.n	819e <conn_auto_initiate+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    8176:	2102      	movs	r1, #2
    8178:	f242 0016 	movw	r0, #8214	; 0x2016
    817c:	f7ff fefc 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    8180:	4605      	mov	r5, r0
    8182:	b160      	cbz	r0, 819e <conn_auto_initiate+0x4a>
    8184:	2102      	movs	r1, #2
    8186:	3008      	adds	r0, #8
    8188:	f015 fb06 	bl	1d798 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    818c:	8823      	ldrh	r3, [r4, #0]
    818e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    8190:	4629      	mov	r1, r5
    8192:	f242 0016 	movw	r0, #8214	; 0x2016
}
    8196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    819a:	f7ff bf35 	b.w	8008 <bt_hci_cmd_send>
}
    819e:	bd38      	pop	{r3, r4, r5, pc}
    81a0:	200001c0 	.word	0x200001c0

000081a4 <le_remote_feat_complete>:
{
    81a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    81a6:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    81a8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    81ac:	4630      	mov	r0, r6
    81ae:	f001 fd67 	bl	9c80 <bt_conn_lookup_handle>
	if (!conn) {
    81b2:	4604      	mov	r4, r0
    81b4:	b930      	cbnz	r0, 81c4 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    81b6:	4632      	mov	r2, r6
    81b8:	2145      	movs	r1, #69	; 0x45
    81ba:	480c      	ldr	r0, [pc, #48]	; (81ec <le_remote_feat_complete+0x48>)
}
    81bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    81c0:	f01c b83c 	b.w	2423c <printk>
	if (!evt->status) {
    81c4:	782b      	ldrb	r3, [r5, #0]
    81c6:	b923      	cbnz	r3, 81d2 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    81c8:	2208      	movs	r2, #8
    81ca:	1ce9      	adds	r1, r5, #3
    81cc:	30ac      	adds	r0, #172	; 0xac
    81ce:	f01d ffc7 	bl	26160 <memcpy>
    81d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    81d6:	1d20      	adds	r0, r4, #4
    81d8:	f01e fa9d 	bl	26716 <atomic_or>
	conn_auto_initiate(conn);
    81dc:	4620      	mov	r0, r4
    81de:	f7ff ffb9 	bl	8154 <conn_auto_initiate>
	bt_conn_unref(conn);
    81e2:	4620      	mov	r0, r4
}
    81e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    81e8:	f001 bd1e 	b.w	9c28 <bt_conn_unref>
    81ec:	0002d12e 	.word	0x0002d12e

000081f0 <bt_hci_cmd_send_sync>:
{
    81f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    81f2:	4607      	mov	r7, r0
    81f4:	b087      	sub	sp, #28
    81f6:	4615      	mov	r5, r2
	if (!buf) {
    81f8:	460c      	mov	r4, r1
    81fa:	b921      	cbnz	r1, 8206 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    81fc:	f7ff febc 	bl	7f78 <bt_hci_cmd_create>
		if (!buf) {
    8200:	4604      	mov	r4, r0
    8202:	2800      	cmp	r0, #0
    8204:	d048      	beq.n	8298 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8206:	2201      	movs	r2, #1
    8208:	2100      	movs	r1, #0
    820a:	4668      	mov	r0, sp
    820c:	f022 f863 	bl	2a2d6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8210:	4620      	mov	r0, r4
    8212:	f014 ff9f 	bl	1d154 <net_buf_id>
    8216:	4e22      	ldr	r6, [pc, #136]	; (82a0 <bt_hci_cmd_send_sync+0xb0>)
    8218:	230c      	movs	r3, #12
    821a:	fb03 6000 	mla	r0, r3, r0, r6
    821e:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    8222:	4620      	mov	r0, r4
    8224:	f015 f9e6 	bl	1d5f4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8228:	4621      	mov	r1, r4
    822a:	481e      	ldr	r0, [pc, #120]	; (82a4 <bt_hci_cmd_send_sync+0xb4>)
    822c:	f015 f970 	bl	1d510 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8230:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8234:	2300      	movs	r3, #0
    8236:	4668      	mov	r0, sp
    8238:	f019 fe64 	bl	21f04 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    823c:	b158      	cbz	r0, 8256 <bt_hci_cmd_send_sync+0x66>
    823e:	f240 124d 	movw	r2, #333	; 0x14d
    8242:	4919      	ldr	r1, [pc, #100]	; (82a8 <bt_hci_cmd_send_sync+0xb8>)
    8244:	4819      	ldr	r0, [pc, #100]	; (82ac <bt_hci_cmd_send_sync+0xbc>)
    8246:	f01b fff9 	bl	2423c <printk>
    824a:	4040      	eors	r0, r0
    824c:	f380 8811 	msr	BASEPRI, r0
    8250:	f04f 0003 	mov.w	r0, #3
    8254:	df02      	svc	2
	status = cmd(buf)->status;
    8256:	4620      	mov	r0, r4
    8258:	f014 ff7c 	bl	1d154 <net_buf_id>
    825c:	230c      	movs	r3, #12
    825e:	4358      	muls	r0, r3
    8260:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    8262:	b186      	cbz	r6, 8286 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    8264:	4633      	mov	r3, r6
    8266:	463a      	mov	r2, r7
    8268:	2157      	movs	r1, #87	; 0x57
    826a:	4811      	ldr	r0, [pc, #68]	; (82b0 <bt_hci_cmd_send_sync+0xc0>)
    826c:	f01b ffe6 	bl	2423c <printk>
		net_buf_unref(buf);
    8270:	4620      	mov	r0, r4
    8272:	f015 f97b 	bl	1d56c <net_buf_unref>
			return -EIO;
    8276:	2e09      	cmp	r6, #9
    8278:	bf0c      	ite	eq
    827a:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    827e:	f06f 0004 	mvnne.w	r0, #4
}
    8282:	b007      	add	sp, #28
    8284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    8286:	b115      	cbz	r5, 828e <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
    8288:	602c      	str	r4, [r5, #0]
	return 0;
    828a:	4630      	mov	r0, r6
    828c:	e7f9      	b.n	8282 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    828e:	4620      	mov	r0, r4
    8290:	f015 f96c 	bl	1d56c <net_buf_unref>
	return 0;
    8294:	4628      	mov	r0, r5
    8296:	e7f4      	b.n	8282 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    8298:	f06f 0036 	mvn.w	r0, #54	; 0x36
    829c:	e7f1      	b.n	8282 <bt_hci_cmd_send_sync+0x92>
    829e:	bf00      	nop
    82a0:	20002078 	.word	0x20002078
    82a4:	200002bc 	.word	0x200002bc
    82a8:	0002d016 	.word	0x0002d016
    82ac:	0002bced 	.word	0x0002bced
    82b0:	0002cb2a 	.word	0x0002cb2a

000082b4 <set_le_scan_enable_legacy>:
{
    82b4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    82b6:	2102      	movs	r1, #2
{
    82b8:	b085      	sub	sp, #20
    82ba:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    82bc:	f242 000c 	movw	r0, #8204	; 0x200c
    82c0:	f7ff fe5a 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    82c4:	4605      	mov	r5, r0
    82c6:	b340      	cbz	r0, 831a <set_le_scan_enable_legacy+0x66>
    82c8:	2102      	movs	r1, #2
    82ca:	3008      	adds	r0, #8
    82cc:	f015 fa64 	bl	1d798 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    82d0:	2c01      	cmp	r4, #1
    82d2:	4603      	mov	r3, r0
    82d4:	d11e      	bne.n	8314 <set_le_scan_enable_legacy+0x60>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    82d6:	2108      	movs	r1, #8
    82d8:	4811      	ldr	r0, [pc, #68]	; (8320 <set_le_scan_enable_legacy+0x6c>)
    82da:	f01e fa59 	bl	26790 <atomic_test_bit>
    82de:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    82e0:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    82e2:	4b0f      	ldr	r3, [pc, #60]	; (8320 <set_le_scan_enable_legacy+0x6c>)
    82e4:	9301      	str	r3, [sp, #4]
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    82e6:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    82ea:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    82ec:	4628      	mov	r0, r5
    82ee:	9302      	str	r3, [sp, #8]
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    82f0:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    82f4:	f014 ff2e 	bl	1d154 <net_buf_id>
    82f8:	4a0a      	ldr	r2, [pc, #40]	; (8324 <set_le_scan_enable_legacy+0x70>)
    82fa:	230c      	movs	r3, #12
    82fc:	fb03 2000 	mla	r0, r3, r0, r2
    8300:	ab01      	add	r3, sp, #4
    8302:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    8304:	2200      	movs	r2, #0
    8306:	4629      	mov	r1, r5
    8308:	f242 000c 	movw	r0, #8204	; 0x200c
    830c:	f7ff ff70 	bl	81f0 <bt_hci_cmd_send_sync>
}
    8310:	b005      	add	sp, #20
    8312:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    8314:	2200      	movs	r2, #0
    8316:	7042      	strb	r2, [r0, #1]
    8318:	e7e2      	b.n	82e0 <set_le_scan_enable_legacy+0x2c>
		return -ENOBUFS;
    831a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    831e:	e7f7      	b.n	8310 <set_le_scan_enable_legacy+0x5c>
    8320:	20000254 	.word	0x20000254
    8324:	20002078 	.word	0x20002078

00008328 <hci_set_ad>:
{
    8328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    832c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    832e:	2120      	movs	r1, #32
{
    8330:	4683      	mov	fp, r0
    8332:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    8334:	f7ff fe20 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    8338:	4607      	mov	r7, r0
    833a:	2800      	cmp	r0, #0
    833c:	d053      	beq.n	83e6 <hci_set_ad+0xbe>
    833e:	2120      	movs	r1, #32
    8340:	3008      	adds	r0, #8
    8342:	f015 fa29 	bl	1d798 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    8346:	2100      	movs	r1, #0
    8348:	2220      	movs	r2, #32
    834a:	4682      	mov	sl, r0
    834c:	f01d ff32 	bl	261b4 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    8350:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    8354:	f10a 0901 	add.w	r9, sl, #1
static int set_data_add(uint8_t *set_data, uint8_t set_data_len_max,
    8358:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    835a:	2100      	movs	r1, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    835c:	6825      	ldr	r5, [r4, #0]
    835e:	2300      	movs	r3, #0
    8360:	6862      	ldr	r2, [r4, #4]
    8362:	4293      	cmp	r3, r2
    8364:	d30d      	bcc.n	8382 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    8366:	9b00      	ldr	r3, [sp, #0]
    8368:	3408      	adds	r4, #8
    836a:	429c      	cmp	r4, r3
    836c:	d1f6      	bne.n	835c <hci_set_ad+0x34>
	*data_len = set_data_len;
    836e:	f88a 1000 	strb.w	r1, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    8372:	2200      	movs	r2, #0
    8374:	4639      	mov	r1, r7
    8376:	4658      	mov	r0, fp
}
    8378:	b003      	add	sp, #12
    837a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    837e:	f7ff bf37 	b.w	81f0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    8382:	786a      	ldrb	r2, [r5, #1]
			uint8_t type = data[j].type;
    8384:	7828      	ldrb	r0, [r5, #0]
			if ((set_data_len + len + 2) > set_data_len_max) {
    8386:	1c8e      	adds	r6, r1, #2
    8388:	eb06 0c02 	add.w	ip, r6, r2
    838c:	f1bc 0f1f 	cmp.w	ip, #31
    8390:	d912      	bls.n	83b8 <hci_set_ad+0x90>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    8392:	2809      	cmp	r0, #9
				ssize_t shortened_len = set_data_len_max -
    8394:	f1c1 021d 	rsb	r2, r1, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    8398:	d101      	bne.n	839e <hci_set_ad+0x76>
    839a:	2a00      	cmp	r2, #0
    839c:	dc0b      	bgt.n	83b6 <hci_set_ad+0x8e>
					BT_ERR("Too big advertising data");
    839e:	2145      	movs	r1, #69	; 0x45
    83a0:	4812      	ldr	r0, [pc, #72]	; (83ec <hci_set_ad+0xc4>)
    83a2:	f01b ff4b 	bl	2423c <printk>
		net_buf_unref(buf);
    83a6:	4638      	mov	r0, r7
    83a8:	f015 f8e0 	bl	1d56c <net_buf_unref>
					return -EINVAL;
    83ac:	f06f 0015 	mvn.w	r0, #21
}
    83b0:	b003      	add	sp, #12
    83b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    83b6:	2008      	movs	r0, #8
			set_data[set_data_len++] = len + 1;
    83b8:	fa5f f882 	uxtb.w	r8, r2
    83bc:	f108 0c01 	add.w	ip, r8, #1
    83c0:	f809 c001 	strb.w	ip, [r9, r1]
    83c4:	3101      	adds	r1, #1
			set_data[set_data_len++] = type;
    83c6:	b2c9      	uxtb	r1, r1
    83c8:	b2f6      	uxtb	r6, r6
    83ca:	f809 0001 	strb.w	r0, [r9, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    83ce:	eb09 0006 	add.w	r0, r9, r6
    83d2:	6869      	ldr	r1, [r5, #4]
    83d4:	9301      	str	r3, [sp, #4]
    83d6:	f01d fec3 	bl	26160 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    83da:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    83dc:	4446      	add	r6, r8
    83de:	b2f1      	uxtb	r1, r6
		for (size_t j = 0; j < ad[i].len; j++) {
    83e0:	3301      	adds	r3, #1
    83e2:	3508      	adds	r5, #8
    83e4:	e7bc      	b.n	8360 <hci_set_ad+0x38>
		return -ENOBUFS;
    83e6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    83ea:	e7e1      	b.n	83b0 <hci_set_ad+0x88>
    83ec:	0002cff8 	.word	0x0002cff8

000083f0 <le_adv_update.constprop.37>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    83f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83f4:	b087      	sub	sp, #28
    83f6:	4607      	mov	r7, r0
    83f8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
    83fc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8400:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    8404:	460c      	mov	r4, r1
    8406:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
    8408:	2100      	movs	r1, #0
    840a:	2210      	movs	r2, #16
    840c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    840e:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    8410:	f01d fed0 	bl	261b4 <memset>
	if (use_name) {
    8414:	b175      	cbz	r5, 8434 <le_adv_update.constprop.37+0x44>
		if ((ad && ad_has_name(ad, ad_len)) ||
    8416:	bba4      	cbnz	r4, 8482 <le_adv_update.constprop.37+0x92>
    8418:	2e00      	cmp	r6, #0
    841a:	d13d      	bne.n	8498 <le_adv_update.constprop.37+0xa8>
		data = (struct bt_data)BT_DATA(
    841c:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 84c8 <le_adv_update.constprop.37+0xd8>
    8420:	4658      	mov	r0, fp
    8422:	f01d fe2e 	bl	26082 <strlen>
    8426:	2309      	movs	r3, #9
    8428:	f88d 3000 	strb.w	r3, [sp]
    842c:	f88d 0001 	strb.w	r0, [sp, #1]
    8430:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    8434:	e9cd 4a02 	strd	r4, sl, [sp, #8]
		if (use_name && !scannable) {
    8438:	b385      	cbz	r5, 849c <le_adv_update.constprop.37+0xac>
    843a:	f1b9 0f00 	cmp.w	r9, #0
    843e:	d12d      	bne.n	849c <le_adv_update.constprop.37+0xac>
			d[1].len = 1;
    8440:	2301      	movs	r3, #1
			d[1].data = &data;
    8442:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    8446:	9305      	str	r3, [sp, #20]
			d_len = 2;
    8448:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    844a:	a902      	add	r1, sp, #8
    844c:	f242 0008 	movw	r0, #8200	; 0x2008
    8450:	f7ff ff6a 	bl	8328 <hci_set_ad>
		if (err) {
    8454:	4604      	mov	r4, r0
    8456:	b938      	cbnz	r0, 8468 <le_adv_update.constprop.37+0x78>
	if (scannable) {
    8458:	f1b9 0f00 	cmp.w	r9, #0
    845c:	d120      	bne.n	84a0 <le_adv_update.constprop.37+0xb0>
    845e:	2104      	movs	r1, #4
    8460:	f107 0010 	add.w	r0, r7, #16
    8464:	f01e f957 	bl	26716 <atomic_or>
}
    8468:	4620      	mov	r0, r4
    846a:	b007      	add	sp, #28
    846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    8470:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    8474:	3a08      	subs	r2, #8
    8476:	2a01      	cmp	r2, #1
    8478:	d923      	bls.n	84c2 <le_adv_update.constprop.37+0xd2>
	for (i = 0; i < ad_len; i++) {
    847a:	3301      	adds	r3, #1
    847c:	459a      	cmp	sl, r3
    847e:	d1f7      	bne.n	8470 <le_adv_update.constprop.37+0x80>
    8480:	e7ca      	b.n	8418 <le_adv_update.constprop.37+0x28>
    8482:	2300      	movs	r3, #0
    8484:	e7fa      	b.n	847c <le_adv_update.constprop.37+0x8c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    8486:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
    848a:	3a08      	subs	r2, #8
    848c:	2a01      	cmp	r2, #1
    848e:	d918      	bls.n	84c2 <le_adv_update.constprop.37+0xd2>
	for (i = 0; i < ad_len; i++) {
    8490:	3301      	adds	r3, #1
    8492:	4598      	cmp	r8, r3
    8494:	d1f7      	bne.n	8486 <le_adv_update.constprop.37+0x96>
    8496:	e7c1      	b.n	841c <le_adv_update.constprop.37+0x2c>
    8498:	2300      	movs	r3, #0
    849a:	e7fa      	b.n	8492 <le_adv_update.constprop.37+0xa2>
		d_len = 1;
    849c:	2201      	movs	r2, #1
    849e:	e7d4      	b.n	844a <le_adv_update.constprop.37+0x5a>
		d[0].len = sd_len;
    84a0:	e9cd 6802 	strd	r6, r8, [sp, #8]
		if (use_name) {
    84a4:	2201      	movs	r2, #1
    84a6:	b11d      	cbz	r5, 84b0 <le_adv_update.constprop.37+0xc0>
			d[1].len = 1;
    84a8:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    84aa:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    84ae:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    84b0:	a902      	add	r1, sp, #8
    84b2:	f242 0009 	movw	r0, #8201	; 0x2009
    84b6:	f7ff ff37 	bl	8328 <hci_set_ad>
		if (err) {
    84ba:	2800      	cmp	r0, #0
    84bc:	d0cf      	beq.n	845e <le_adv_update.constprop.37+0x6e>
    84be:	4604      	mov	r4, r0
    84c0:	e7d2      	b.n	8468 <le_adv_update.constprop.37+0x78>
			return -EINVAL;
    84c2:	f06f 0415 	mvn.w	r4, #21
    84c6:	e7cf      	b.n	8468 <le_adv_update.constprop.37+0x78>
    84c8:	0002d0fe 	.word	0x0002d0fe

000084cc <set_random_address>:
{
    84cc:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    84ce:	4d15      	ldr	r5, [pc, #84]	; (8524 <set_random_address+0x58>)
    84d0:	2206      	movs	r2, #6
    84d2:	f105 012d 	add.w	r1, r5, #45	; 0x2d
    84d6:	4606      	mov	r6, r0
    84d8:	f01d fe1b 	bl	26112 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    84dc:	4604      	mov	r4, r0
    84de:	b1e0      	cbz	r0, 851a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    84e0:	2106      	movs	r1, #6
    84e2:	f242 0005 	movw	r0, #8197	; 0x2005
    84e6:	f7ff fd47 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    84ea:	4604      	mov	r4, r0
    84ec:	b1b8      	cbz	r0, 851e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    84ee:	2206      	movs	r2, #6
    84f0:	4631      	mov	r1, r6
    84f2:	3008      	adds	r0, #8
    84f4:	f021 fa53 	bl	2999e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    84f8:	4621      	mov	r1, r4
    84fa:	2200      	movs	r2, #0
    84fc:	f242 0005 	movw	r0, #8197	; 0x2005
    8500:	f7ff fe76 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8504:	4604      	mov	r4, r0
    8506:	b940      	cbnz	r0, 851a <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    8508:	2206      	movs	r2, #6
    850a:	4631      	mov	r1, r6
    850c:	f105 002d 	add.w	r0, r5, #45	; 0x2d
    8510:	f01d fe26 	bl	26160 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    8514:	2301      	movs	r3, #1
    8516:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
    851a:	4620      	mov	r0, r4
    851c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    851e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8522:	e7fa      	b.n	851a <set_random_address+0x4e>
    8524:	200001c0 	.word	0x200001c0

00008528 <le_adv_set_random_addr.isra.28>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    852c:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    8530:	4606      	mov	r6, r0
    8532:	460d      	mov	r5, r1
    8534:	4692      	mov	sl, r2
    8536:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    8538:	d02b      	beq.n	8592 <le_adv_set_random_addr.isra.28+0x6a>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    853a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 85fc <le_adv_set_random_addr.isra.28+0xd4>
    853e:	b12a      	cbz	r2, 854c <le_adv_set_random_addr.isra.28+0x24>
    8540:	0688      	lsls	r0, r1, #26
    8542:	d503      	bpl.n	854c <le_adv_set_random_addr.isra.28+0x24>
    8544:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    8548:	0659      	lsls	r1, r3, #25
    854a:	d554      	bpl.n	85f6 <le_adv_set_random_addr.isra.28+0xce>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    854c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
    8550:	eba9 0306 	sub.w	r3, r9, r6
    8554:	f818 3003 	ldrb.w	r3, [r8, r3]
    8558:	2b01      	cmp	r3, #1
    855a:	d009      	beq.n	8570 <le_adv_set_random_addr.isra.28+0x48>
			*own_addr_type = id_addr->type;
    855c:	eba9 0606 	sub.w	r6, r9, r6
    8560:	f818 3006 	ldrb.w	r3, [r8, r6]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    8564:	f1ba 0f00 	cmp.w	sl, #0
    8568:	d10e      	bne.n	8588 <le_adv_set_random_addr.isra.28+0x60>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    856a:	703b      	strb	r3, [r7, #0]
	return 0;
    856c:	2400      	movs	r4, #0
    856e:	e008      	b.n	8582 <le_adv_set_random_addr.isra.28+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    8570:	2007      	movs	r0, #7
    8572:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    8576:	4440      	add	r0, r8
    8578:	f7ff ffa8 	bl	84cc <set_random_address>
				if (err) {
    857c:	4604      	mov	r4, r0
    857e:	2800      	cmp	r0, #0
    8580:	d0ec      	beq.n	855c <le_adv_set_random_addr.isra.28+0x34>
}
    8582:	4620      	mov	r0, r4
    8584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    8588:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    858a:	bf48      	it	mi
    858c:	f043 0302 	orrmi.w	r3, r3, #2
    8590:	e7eb      	b.n	856a <le_adv_set_random_addr.isra.28+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    8592:	f011 0504 	ands.w	r5, r1, #4
    8596:	d013      	beq.n	85c0 <le_adv_set_random_addr.isra.28+0x98>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    8598:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    859c:	4d17      	ldr	r5, [pc, #92]	; (85fc <le_adv_set_random_addr.isra.28+0xd4>)
    859e:	eba8 0300 	sub.w	r3, r8, r0
    85a2:	5ceb      	ldrb	r3, [r5, r3]
    85a4:	2b01      	cmp	r3, #1
    85a6:	d106      	bne.n	85b6 <le_adv_set_random_addr.isra.28+0x8e>
				err = set_adv_random_address(adv, &id_addr->a);
    85a8:	2007      	movs	r0, #7
    85aa:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    85ae:	4428      	add	r0, r5
    85b0:	f7ff ff8c 	bl	84cc <set_random_address>
    85b4:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    85b6:	eba8 0606 	sub.w	r6, r8, r6
    85ba:	5dab      	ldrb	r3, [r5, r6]
    85bc:	703b      	strb	r3, [r7, #0]
    85be:	e7e0      	b.n	8582 <le_adv_set_random_addr.isra.28+0x5a>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    85c0:	2105      	movs	r1, #5
    85c2:	480f      	ldr	r0, [pc, #60]	; (8600 <le_adv_set_random_addr.isra.28+0xd8>)
    85c4:	f01e f8e4 	bl	26790 <atomic_test_bit>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    85c8:	b950      	cbnz	r0, 85e0 <le_adv_set_random_addr.isra.28+0xb8>
			bool scan_enabled = false;
    85ca:	2600      	movs	r6, #0
			err = le_adv_set_private_addr(adv);
    85cc:	f01e f8e9 	bl	267a2 <le_adv_set_private_addr.isra.27>
    85d0:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    85d2:	2001      	movs	r0, #1
    85d4:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    85d6:	2e00      	cmp	r6, #0
    85d8:	d0d3      	beq.n	8582 <le_adv_set_random_addr.isra.28+0x5a>
	return set_le_scan_enable_legacy(enable);
    85da:	f7ff fe6b 	bl	82b4 <set_le_scan_enable_legacy>
		if (err) {
    85de:	e7d0      	b.n	8582 <le_adv_set_random_addr.isra.28+0x5a>
			    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    85e0:	2107      	movs	r1, #7
    85e2:	4807      	ldr	r0, [pc, #28]	; (8600 <le_adv_set_random_addr.isra.28+0xd8>)
    85e4:	f01e f8d4 	bl	26790 <atomic_test_bit>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    85e8:	4606      	mov	r6, r0
    85ea:	2800      	cmp	r0, #0
    85ec:	d0ed      	beq.n	85ca <le_adv_set_random_addr.isra.28+0xa2>
	return set_le_scan_enable_legacy(enable);
    85ee:	4628      	mov	r0, r5
    85f0:	f7ff fe60 	bl	82b4 <set_le_scan_enable_legacy>
    85f4:	e7ea      	b.n	85cc <le_adv_set_random_addr.isra.28+0xa4>
			return -ENOTSUP;
    85f6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    85fa:	e7c2      	b.n	8582 <le_adv_set_random_addr.isra.28+0x5a>
    85fc:	200001c0 	.word	0x200001c0
    8600:	20000254 	.word	0x20000254

00008604 <set_le_adv_enable_legacy>:
{
    8604:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8606:	4606      	mov	r6, r0
    8608:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    860a:	f242 000a 	movw	r0, #8202	; 0x200a
    860e:	2101      	movs	r1, #1
    8610:	f7ff fcb2 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    8614:	4604      	mov	r4, r0
    8616:	b1e8      	cbz	r0, 8654 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    8618:	3008      	adds	r0, #8
    861a:	b1cd      	cbz	r5, 8650 <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
    861c:	2101      	movs	r1, #1
    861e:	f021 f9ca 	bl	299b6 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    8622:	3610      	adds	r6, #16
    8624:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    8626:	4620      	mov	r0, r4
    8628:	9302      	str	r3, [sp, #8]
	state->target = target;
    862a:	9601      	str	r6, [sp, #4]
	state->val = val;
    862c:	f88d 500c 	strb.w	r5, [sp, #12]
    8630:	f014 fd90 	bl	1d154 <net_buf_id>
    8634:	4a09      	ldr	r2, [pc, #36]	; (865c <set_le_adv_enable_legacy+0x58>)
    8636:	230c      	movs	r3, #12
    8638:	fb03 2000 	mla	r0, r3, r0, r2
    863c:	ab01      	add	r3, sp, #4
    863e:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    8640:	2200      	movs	r2, #0
    8642:	4621      	mov	r1, r4
    8644:	f242 000a 	movw	r0, #8202	; 0x200a
    8648:	f7ff fdd2 	bl	81f0 <bt_hci_cmd_send_sync>
}
    864c:	b004      	add	sp, #16
    864e:	bd70      	pop	{r4, r5, r6, pc}
    8650:	4629      	mov	r1, r5
    8652:	e7e4      	b.n	861e <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    8654:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8658:	e7f8      	b.n	864c <set_le_adv_enable_legacy+0x48>
    865a:	bf00      	nop
    865c:	20002078 	.word	0x20002078

00008660 <bt_le_scan_random_addr_check>:
{
    8660:	b508      	push	{r3, lr}
	    !atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8662:	2106      	movs	r1, #6
    8664:	4802      	ldr	r0, [pc, #8]	; (8670 <bt_le_scan_random_addr_check+0x10>)
    8666:	f01e f893 	bl	26790 <atomic_test_bit>
}
    866a:	2001      	movs	r0, #1
    866c:	bd08      	pop	{r3, pc}
    866e:	bf00      	nop
    8670:	200001e8 	.word	0x200001e8

00008674 <bt_le_scan_update>:
{
    8674:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8676:	2106      	movs	r1, #6
    8678:	4808      	ldr	r0, [pc, #32]	; (869c <bt_le_scan_update+0x28>)
    867a:	f01e f889 	bl	26790 <atomic_test_bit>
    867e:	4603      	mov	r3, r0
    8680:	b948      	cbnz	r0, 8696 <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    8682:	2105      	movs	r1, #5
    8684:	4805      	ldr	r0, [pc, #20]	; (869c <bt_le_scan_update+0x28>)
    8686:	f01e f883 	bl	26790 <atomic_test_bit>
    868a:	b120      	cbz	r0, 8696 <bt_le_scan_update+0x22>
	return set_le_scan_enable_legacy(enable);
    868c:	4618      	mov	r0, r3
}
    868e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return set_le_scan_enable_legacy(enable);
    8692:	f7ff be0f 	b.w	82b4 <set_le_scan_enable_legacy>
}
    8696:	2000      	movs	r0, #0
    8698:	bd08      	pop	{r3, pc}
    869a:	bf00      	nop
    869c:	20000254 	.word	0x20000254

000086a0 <hci_event_prio>:
{
    86a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86a4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    86a6:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    86aa:	4628      	mov	r0, r5
    86ac:	f021 f96b 	bl	29986 <net_buf_simple_headroom>
	state->len = buf->len;
    86b0:	89a7      	ldrh	r7, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    86b2:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    86b4:	4606      	mov	r6, r0
    86b6:	d80b      	bhi.n	86d0 <hci_event_prio+0x30>
    86b8:	f641 02ae 	movw	r2, #6318	; 0x18ae
    86bc:	4920      	ldr	r1, [pc, #128]	; (8740 <hci_event_prio+0xa0>)
    86be:	4821      	ldr	r0, [pc, #132]	; (8744 <hci_event_prio+0xa4>)
    86c0:	f01b fdbc 	bl	2423c <printk>
    86c4:	4040      	eors	r0, r0
    86c6:	f380 8811 	msr	BASEPRI, r0
    86ca:	f04f 0003 	mov.w	r0, #3
    86ce:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    86d0:	2102      	movs	r1, #2
    86d2:	4628      	mov	r0, r5
    86d4:	f015 f842 	bl	1d75c <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    86d8:	7803      	ldrb	r3, [r0, #0]
    86da:	2b1a      	cmp	r3, #26
    86dc:	4680      	mov	r8, r0
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    86de:	d828      	bhi.n	8732 <hci_event_prio+0x92>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
    86e0:	2501      	movs	r5, #1
    86e2:	4a19      	ldr	r2, [pc, #100]	; (8748 <hci_event_prio+0xa8>)
    86e4:	fa05 f303 	lsl.w	r3, r5, r3
    86e8:	4213      	tst	r3, r2
    86ea:	d104      	bne.n	86f6 <hci_event_prio+0x56>
    86ec:	f013 0f20 	tst.w	r3, #32
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    86f0:	bf14      	ite	ne
    86f2:	2503      	movne	r5, #3
    86f4:	2502      	moveq	r5, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    86f6:	07ea      	lsls	r2, r5, #31
    86f8:	d40b      	bmi.n	8712 <hci_event_prio+0x72>
    86fa:	f641 02b2 	movw	r2, #6322	; 0x18b2
    86fe:	4910      	ldr	r1, [pc, #64]	; (8740 <hci_event_prio+0xa0>)
    8700:	4810      	ldr	r0, [pc, #64]	; (8744 <hci_event_prio+0xa4>)
    8702:	f01b fd9b 	bl	2423c <printk>
    8706:	4040      	eors	r0, r0
    8708:	f380 8811 	msr	BASEPRI, r0
    870c:	f04f 0003 	mov.w	r0, #3
    8710:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    8712:	2305      	movs	r3, #5
    8714:	4a0d      	ldr	r2, [pc, #52]	; (874c <hci_event_prio+0xac>)
    8716:	f898 0000 	ldrb.w	r0, [r8]
    871a:	4621      	mov	r1, r4
    871c:	f7ff f93c 	bl	7998 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    8720:	07ab      	lsls	r3, r5, #30
    8722:	d508      	bpl.n	8736 <hci_event_prio+0x96>
	buf->data = buf->__buf + state->offset;
    8724:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    8726:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8728:	fa13 f686 	uxtah	r6, r3, r6
    872c:	60a6      	str	r6, [r4, #8]
}
    872e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8732:	2502      	movs	r5, #2
    8734:	e7df      	b.n	86f6 <hci_event_prio+0x56>
		net_buf_unref(buf);
    8736:	4620      	mov	r0, r4
}
    8738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    873c:	f014 bf16 	b.w	1d56c <net_buf_unref>
    8740:	0002d016 	.word	0x0002d016
    8744:	0002bced 	.word	0x0002bced
    8748:	0408c000 	.word	0x0408c000
    874c:	0002af5c 	.word	0x0002af5c

00008750 <bt_recv>:
{
    8750:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    8752:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    8754:	2d01      	cmp	r5, #1
{
    8756:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    8758:	d03e      	beq.n	87d8 <bt_recv+0x88>
    875a:	2d03      	cmp	r5, #3
    875c:	d175      	bne.n	884a <bt_recv+0xfa>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    875e:	8983      	ldrh	r3, [r0, #12]
    8760:	2b03      	cmp	r3, #3
    8762:	d80b      	bhi.n	877c <bt_recv+0x2c>
    8764:	f240 42ac 	movw	r2, #1196	; 0x4ac
    8768:	493d      	ldr	r1, [pc, #244]	; (8860 <bt_recv+0x110>)
    876a:	483e      	ldr	r0, [pc, #248]	; (8864 <bt_recv+0x114>)
    876c:	f01b fd66 	bl	2423c <printk>
    8770:	4040      	eors	r0, r0
    8772:	f380 8811 	msr	BASEPRI, r0
    8776:	f04f 0003 	mov.w	r0, #3
    877a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    877c:	2104      	movs	r1, #4
    877e:	f104 0008 	add.w	r0, r4, #8
    8782:	f014 ffeb 	bl	1d75c <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8786:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    8788:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    878a:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    878c:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    878e:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    8790:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    8794:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    8796:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    8798:	d007      	beq.n	87aa <bt_recv+0x5a>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    879a:	2145      	movs	r1, #69	; 0x45
    879c:	4832      	ldr	r0, [pc, #200]	; (8868 <bt_recv+0x118>)
    879e:	f01b fd4d 	bl	2423c <printk>
	net_buf_unref(buf);
    87a2:	4620      	mov	r0, r4
    87a4:	f014 fee2 	bl	1d56c <net_buf_unref>
    87a8:	e014      	b.n	87d4 <bt_recv+0x84>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    87aa:	f001 fa69 	bl	9c80 <bt_conn_lookup_handle>
	if (!conn) {
    87ae:	4605      	mov	r5, r0
    87b0:	b928      	cbnz	r0, 87be <bt_recv+0x6e>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    87b2:	8ae2      	ldrh	r2, [r4, #22]
    87b4:	482d      	ldr	r0, [pc, #180]	; (886c <bt_recv+0x11c>)
    87b6:	2145      	movs	r1, #69	; 0x45
    87b8:	f01b fd40 	bl	2423c <printk>
		net_buf_unref(buf);
    87bc:	e7f1      	b.n	87a2 <bt_recv+0x52>
	acl(buf)->index = bt_conn_index(conn);
    87be:	f001 fd1d 	bl	a1fc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    87c2:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    87c4:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    87c6:	4621      	mov	r1, r4
    87c8:	4628      	mov	r0, r5
    87ca:	f001 f907 	bl	99dc <bt_conn_recv>
	bt_conn_unref(conn);
    87ce:	4628      	mov	r0, r5
    87d0:	f001 fa2a 	bl	9c28 <bt_conn_unref>
		return 0;
    87d4:	2000      	movs	r0, #0
}
    87d6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    87d8:	8983      	ldrh	r3, [r0, #12]
    87da:	2b01      	cmp	r3, #1
    87dc:	d80b      	bhi.n	87f6 <bt_recv+0xa6>
    87de:	f241 32fb 	movw	r2, #5115	; 0x13fb
    87e2:	491f      	ldr	r1, [pc, #124]	; (8860 <bt_recv+0x110>)
    87e4:	481f      	ldr	r0, [pc, #124]	; (8864 <bt_recv+0x114>)
    87e6:	f01b fd29 	bl	2423c <printk>
    87ea:	4040      	eors	r0, r0
    87ec:	f380 8811 	msr	BASEPRI, r0
    87f0:	f04f 0003 	mov.w	r0, #3
    87f4:	df02      	svc	2
    87f6:	2102      	movs	r1, #2
    87f8:	f104 0008 	add.w	r0, r4, #8
    87fc:	f014 ffae 	bl	1d75c <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    8800:	7802      	ldrb	r2, [r0, #0]
    8802:	2a1a      	cmp	r2, #26
    8804:	4606      	mov	r6, r0
	switch (evt) {
    8806:	d81e      	bhi.n	8846 <bt_recv+0xf6>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
    8808:	2301      	movs	r3, #1
    880a:	4093      	lsls	r3, r2
    880c:	4a18      	ldr	r2, [pc, #96]	; (8870 <bt_recv+0x120>)
    880e:	4213      	tst	r3, r2
    8810:	d104      	bne.n	881c <bt_recv+0xcc>
    8812:	f013 0f20 	tst.w	r3, #32
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    8816:	bf0c      	ite	eq
    8818:	2502      	moveq	r5, #2
    881a:	2503      	movne	r5, #3
    881c:	07ab      	lsls	r3, r5, #30
    881e:	d40b      	bmi.n	8838 <bt_recv+0xe8>
    8820:	f241 32ff 	movw	r2, #5119	; 0x13ff
    8824:	490e      	ldr	r1, [pc, #56]	; (8860 <bt_recv+0x110>)
    8826:	480f      	ldr	r0, [pc, #60]	; (8864 <bt_recv+0x114>)
    8828:	f01b fd08 	bl	2423c <printk>
    882c:	4040      	eors	r0, r0
    882e:	f380 8811 	msr	BASEPRI, r0
    8832:	f04f 0003 	mov.w	r0, #3
    8836:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    8838:	2304      	movs	r3, #4
    883a:	4a0e      	ldr	r2, [pc, #56]	; (8874 <bt_recv+0x124>)
    883c:	7830      	ldrb	r0, [r6, #0]
    883e:	4621      	mov	r1, r4
    8840:	f7ff f8aa 	bl	7998 <handle_event>
    8844:	e7ad      	b.n	87a2 <bt_recv+0x52>
		return BT_HCI_EVT_FLAG_RECV;
    8846:	2502      	movs	r5, #2
    8848:	e7e8      	b.n	881c <bt_recv+0xcc>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    884a:	462a      	mov	r2, r5
    884c:	2145      	movs	r1, #69	; 0x45
    884e:	480a      	ldr	r0, [pc, #40]	; (8878 <bt_recv+0x128>)
    8850:	f01b fcf4 	bl	2423c <printk>
		net_buf_unref(buf);
    8854:	4620      	mov	r0, r4
    8856:	f014 fe89 	bl	1d56c <net_buf_unref>
		return -EINVAL;
    885a:	f06f 0015 	mvn.w	r0, #21
    885e:	e7ba      	b.n	87d6 <bt_recv+0x86>
    8860:	0002d016 	.word	0x0002d016
    8864:	0002bced 	.word	0x0002bced
    8868:	0002cd90 	.word	0x0002cd90
    886c:	0002cdb9 	.word	0x0002cdb9
    8870:	0408c000 	.word	0x0408c000
    8874:	0002af3c 	.word	0x0002af3c
    8878:	0002cde0 	.word	0x0002cde0

0000887c <bt_recv_prio>:
{
    887c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    887e:	7d03      	ldrb	r3, [r0, #20]
    8880:	2b01      	cmp	r3, #1
{
    8882:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8884:	d00b      	beq.n	889e <bt_recv_prio+0x22>
    8886:	f641 02f5 	movw	r2, #6389	; 0x18f5
    888a:	4907      	ldr	r1, [pc, #28]	; (88a8 <bt_recv_prio+0x2c>)
    888c:	4807      	ldr	r0, [pc, #28]	; (88ac <bt_recv_prio+0x30>)
    888e:	f01b fcd5 	bl	2423c <printk>
    8892:	4040      	eors	r0, r0
    8894:	f380 8811 	msr	BASEPRI, r0
    8898:	f04f 0003 	mov.w	r0, #3
    889c:	df02      	svc	2
	hci_event_prio(buf);
    889e:	4620      	mov	r0, r4
    88a0:	f7ff fefe 	bl	86a0 <hci_event_prio>
}
    88a4:	2000      	movs	r0, #0
    88a6:	bd10      	pop	{r4, pc}
    88a8:	0002d016 	.word	0x0002d016
    88ac:	0002bced 	.word	0x0002bced

000088b0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    88b0:	4a08      	ldr	r2, [pc, #32]	; (88d4 <bt_hci_driver_register+0x24>)
    88b2:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
    88b6:	b93b      	cbnz	r3, 88c8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    88b8:	68c1      	ldr	r1, [r0, #12]
    88ba:	b141      	cbz	r1, 88ce <bt_hci_driver_register+0x1e>
    88bc:	6901      	ldr	r1, [r0, #16]
    88be:	b131      	cbz	r1, 88ce <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    88c0:	f8c2 0118 	str.w	r0, [r2, #280]	; 0x118
	return 0;
    88c4:	4618      	mov	r0, r3
    88c6:	4770      	bx	lr
		return -EALREADY;
    88c8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    88cc:	4770      	bx	lr
		return -EINVAL;
    88ce:	f06f 0015 	mvn.w	r0, #21
}
    88d2:	4770      	bx	lr
    88d4:	200001c0 	.word	0x200001c0

000088d8 <bt_finalize_init>:
{
    88d8:	b508      	push	{r3, lr}
    88da:	2102      	movs	r1, #2
    88dc:	4803      	ldr	r0, [pc, #12]	; (88ec <bt_finalize_init+0x14>)
    88de:	f01d ff1a 	bl	26716 <atomic_or>
		bt_le_scan_update(false);
    88e2:	2000      	movs	r0, #0
}
    88e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    88e8:	f7ff bec4 	b.w	8674 <bt_le_scan_update>
    88ec:	20000254 	.word	0x20000254

000088f0 <bt_init>:
{
    88f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    88f2:	4dbc      	ldr	r5, [pc, #752]	; (8be4 <bt_init+0x2f4>)
    88f4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    88f8:	6899      	ldr	r1, [r3, #8]
    88fa:	f011 0101 	ands.w	r1, r1, #1
    88fe:	d123      	bne.n	8948 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    8900:	aa01      	add	r2, sp, #4
    8902:	f640 4003 	movw	r0, #3075	; 0xc03
    8906:	f7ff fc73 	bl	81f0 <bt_hci_cmd_send_sync>
		if (err) {
    890a:	4604      	mov	r4, r0
    890c:	2800      	cmp	r0, #0
    890e:	d172      	bne.n	89f6 <bt_init+0x106>
		hci_reset_complete(rsp);
    8910:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    8912:	689b      	ldr	r3, [r3, #8]
	if (status) {
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	b9a3      	cbnz	r3, 8942 <bt_init+0x52>
	scan_dev_found_cb = NULL;
    8918:	4ab3      	ldr	r2, [pc, #716]	; (8be8 <bt_init+0x2f8>)
    891a:	6013      	str	r3, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    891c:	462b      	mov	r3, r5
    891e:	f3bf 8f5b 	dmb	ish
    8922:	f853 2f94 	ldr.w	r2, [r3, #148]!
    8926:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    892a:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    892e:	f3bf 8f5b 	dmb	ish
    8932:	e853 1f00 	ldrex	r1, [r3]
    8936:	e843 2000 	strex	r0, r2, [r3]
    893a:	2800      	cmp	r0, #0
    893c:	d1f9      	bne.n	8932 <bt_init+0x42>
    893e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    8942:	9801      	ldr	r0, [sp, #4]
    8944:	f014 fe12 	bl	1d56c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    8948:	aa01      	add	r2, sp, #4
    894a:	2100      	movs	r1, #0
    894c:	f241 0003 	movw	r0, #4099	; 0x1003
    8950:	f7ff fc4e 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8954:	4604      	mov	r4, r0
    8956:	2800      	cmp	r0, #0
    8958:	d14d      	bne.n	89f6 <bt_init+0x106>
	read_local_features_complete(rsp);
    895a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    895c:	48a3      	ldr	r0, [pc, #652]	; (8bec <bt_init+0x2fc>)
    895e:	6899      	ldr	r1, [r3, #8]
    8960:	2208      	movs	r2, #8
    8962:	3101      	adds	r1, #1
    8964:	f01d fbfc 	bl	26160 <memcpy>
	net_buf_unref(rsp);
    8968:	9801      	ldr	r0, [sp, #4]
    896a:	f014 fdff 	bl	1d56c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    896e:	4621      	mov	r1, r4
    8970:	aa01      	add	r2, sp, #4
    8972:	f241 0001 	movw	r0, #4097	; 0x1001
    8976:	f7ff fc3b 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    897a:	4604      	mov	r4, r0
    897c:	2800      	cmp	r0, #0
    897e:	d13a      	bne.n	89f6 <bt_init+0x106>
	read_local_ver_complete(rsp);
    8980:	9801      	ldr	r0, [sp, #4]
    8982:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    8984:	785a      	ldrb	r2, [r3, #1]
    8986:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    898a:	78d9      	ldrb	r1, [r3, #3]
    898c:	789a      	ldrb	r2, [r3, #2]
    898e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8992:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    8994:	791a      	ldrb	r2, [r3, #4]
    8996:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    899a:	7a19      	ldrb	r1, [r3, #8]
    899c:	79da      	ldrb	r2, [r3, #7]
    899e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    89a2:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    89a4:	795a      	ldrb	r2, [r3, #5]
    89a6:	799b      	ldrb	r3, [r3, #6]
    89a8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    89ac:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    89ae:	f014 fddd 	bl	1d56c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    89b2:	4621      	mov	r1, r4
    89b4:	aa01      	add	r2, sp, #4
    89b6:	f241 0002 	movw	r0, #4098	; 0x1002
    89ba:	f7ff fc19 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    89be:	4604      	mov	r4, r0
    89c0:	b9c8      	cbnz	r0, 89f6 <bt_init+0x106>
	read_supported_commands_complete(rsp);
    89c2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    89c4:	488a      	ldr	r0, [pc, #552]	; (8bf0 <bt_init+0x300>)
    89c6:	6899      	ldr	r1, [r3, #8]
    89c8:	2240      	movs	r2, #64	; 0x40
    89ca:	3101      	adds	r1, #1
    89cc:	f01d fbc8 	bl	26160 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    89d0:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    89d4:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
    89d6:	f043 0306 	orr.w	r3, r3, #6
    89da:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    89de:	f014 fdc5 	bl	1d56c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    89e2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    89e6:	0658      	lsls	r0, r3, #25
    89e8:	d408      	bmi.n	89fc <bt_init+0x10c>
		BT_ERR("Non-LE capable controller detected!");
    89ea:	2145      	movs	r1, #69	; 0x45
    89ec:	4881      	ldr	r0, [pc, #516]	; (8bf4 <bt_init+0x304>)
    89ee:	f01b fc25 	bl	2423c <printk>
		return -ENODEV;
    89f2:	f06f 0412 	mvn.w	r4, #18
}
    89f6:	4620      	mov	r0, r4
    89f8:	b002      	add	sp, #8
    89fa:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    89fc:	4621      	mov	r1, r4
    89fe:	aa01      	add	r2, sp, #4
    8a00:	f242 0003 	movw	r0, #8195	; 0x2003
    8a04:	f7ff fbf4 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8a08:	4604      	mov	r4, r0
    8a0a:	2800      	cmp	r0, #0
    8a0c:	d1f3      	bne.n	89f6 <bt_init+0x106>
	read_le_features_complete(rsp);
    8a0e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    8a10:	4879      	ldr	r0, [pc, #484]	; (8bf8 <bt_init+0x308>)
    8a12:	6899      	ldr	r1, [r3, #8]
    8a14:	2208      	movs	r2, #8
    8a16:	3101      	adds	r1, #1
    8a18:	f01d fba2 	bl	26160 <memcpy>
	net_buf_unref(rsp);
    8a1c:	9801      	ldr	r0, [sp, #4]
    8a1e:	f014 fda5 	bl	1d56c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    8a22:	4621      	mov	r1, r4
    8a24:	aa01      	add	r2, sp, #4
    8a26:	f242 0002 	movw	r0, #8194	; 0x2002
    8a2a:	f7ff fbe1 	bl	81f0 <bt_hci_cmd_send_sync>
		if (err) {
    8a2e:	4604      	mov	r4, r0
    8a30:	2800      	cmp	r0, #0
    8a32:	d1e0      	bne.n	89f6 <bt_init+0x106>
		le_read_buffer_size_complete(rsp);
    8a34:	9b01      	ldr	r3, [sp, #4]
    8a36:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    8a38:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8a3c:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    8a40:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    8a42:	b121      	cbz	r1, 8a4e <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    8a44:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    8a46:	486d      	ldr	r0, [pc, #436]	; (8bfc <bt_init+0x30c>)
    8a48:	4611      	mov	r1, r2
    8a4a:	f021 fc44 	bl	2a2d6 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    8a4e:	9801      	ldr	r0, [sp, #4]
    8a50:	f014 fd8c 	bl	1d56c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    8a54:	f895 4040 	ldrb.w	r4, [r5, #64]	; 0x40
    8a58:	f014 0420 	ands.w	r4, r4, #32
    8a5c:	f000 8092 	beq.w	8b84 <bt_init+0x294>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    8a60:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    8a64:	0719      	lsls	r1, r3, #28
    8a66:	f100 80a9 	bmi.w	8bbc <bt_init+0x2cc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    8a6a:	2108      	movs	r1, #8
    8a6c:	f242 0001 	movw	r0, #8193	; 0x2001
    8a70:	f7ff fa82 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    8a74:	4604      	mov	r4, r0
    8a76:	2800      	cmp	r0, #0
    8a78:	f000 808b 	beq.w	8b92 <bt_init+0x2a2>
	return net_buf_simple_add(&buf->b, len);
    8a7c:	2108      	movs	r1, #8
    8a7e:	4408      	add	r0, r1
    8a80:	f014 fe8a 	bl	1d798 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    8a84:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    8a88:	f895 2066 	ldrb.w	r2, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    8a8c:	f013 0f02 	tst.w	r3, #2
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    8a90:	f002 0206 	and.w	r2, r2, #6
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    8a94:	bf0c      	ite	eq
    8a96:	230f      	moveq	r3, #15
    8a98:	232f      	movne	r3, #47	; 0x2f
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    8a9a:	2a06      	cmp	r2, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    8a9c:	bf08      	it	eq
    8a9e:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	dst[0] = val;
    8aa2:	2200      	movs	r2, #0
    8aa4:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    8aa6:	0a1b      	lsrs	r3, r3, #8
    8aa8:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    8aaa:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    8aac:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    8aae:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    8ab0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    8ab2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    8ab4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    8ab6:	4621      	mov	r1, r4
    8ab8:	f242 0001 	movw	r0, #8193	; 0x2001
    8abc:	f7ff fb98 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8ac0:	4604      	mov	r4, r0
    8ac2:	2800      	cmp	r0, #0
    8ac4:	d197      	bne.n	89f6 <bt_init+0x106>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    8ac6:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    8aca:	069a      	lsls	r2, r3, #26
    8acc:	d41d      	bmi.n	8b0a <bt_init+0x21a>
	if (bt_dev.le.acl_mtu) {
    8ace:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    8ad2:	b9d1      	cbnz	r1, 8b0a <bt_init+0x21a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    8ad4:	aa01      	add	r2, sp, #4
    8ad6:	f241 0005 	movw	r0, #4101	; 0x1005
    8ada:	f7ff fb89 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8ade:	4604      	mov	r4, r0
    8ae0:	2800      	cmp	r0, #0
    8ae2:	d188      	bne.n	89f6 <bt_init+0x106>
	if (bt_dev.le.acl_mtu) {
    8ae4:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    8ae8:	b963      	cbnz	r3, 8b04 <bt_init+0x214>
	read_buffer_size_complete(rsp);
    8aea:	9b01      	ldr	r3, [sp, #4]
    8aec:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    8aee:	785a      	ldrb	r2, [r3, #1]
    8af0:	7899      	ldrb	r1, [r3, #2]
    8af2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8af6:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    8afa:	889a      	ldrh	r2, [r3, #4]
    8afc:	483f      	ldr	r0, [pc, #252]	; (8bfc <bt_init+0x30c>)
    8afe:	4611      	mov	r1, r2
    8b00:	f021 fbe9 	bl	2a2d6 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    8b04:	9801      	ldr	r0, [sp, #4]
    8b06:	f014 fd31 	bl	1d56c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    8b0a:	2108      	movs	r1, #8
    8b0c:	f640 4001 	movw	r0, #3073	; 0xc01
    8b10:	f7ff fa32 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    8b14:	4604      	mov	r4, r0
    8b16:	2800      	cmp	r0, #0
    8b18:	d03b      	beq.n	8b92 <bt_init+0x2a2>
    8b1a:	2108      	movs	r1, #8
    8b1c:	4408      	add	r0, r1
    8b1e:	f014 fe3b 	bl	1d798 <net_buf_simple_add>
	dst[0] = val;
    8b22:	2310      	movs	r3, #16
    8b24:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    8b26:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    8b28:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    8b2a:	7043      	strb	r3, [r0, #1]
    8b2c:	2602      	movs	r6, #2
    8b2e:	2320      	movs	r3, #32
	dst[0] = val;
    8b30:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    8b32:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    8b34:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    8b36:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    8b38:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    8b3a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    8b3c:	4621      	mov	r1, r4
    8b3e:	f640 4001 	movw	r0, #3073	; 0xc01
    8b42:	f7ff fb55 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8b46:	4604      	mov	r4, r0
    8b48:	2800      	cmp	r0, #0
    8b4a:	f47f af54 	bne.w	89f6 <bt_init+0x106>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    8b4e:	4601      	mov	r1, r0
    8b50:	aa01      	add	r2, sp, #4
    8b52:	f64f 4001 	movw	r0, #64513	; 0xfc01
    8b56:	f7ff fb4b 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8b5a:	4604      	mov	r4, r0
    8b5c:	2800      	cmp	r0, #0
    8b5e:	d053      	beq.n	8c08 <bt_init+0x318>
		BT_WARN("Vendor HCI extensions not available");
    8b60:	4827      	ldr	r0, [pc, #156]	; (8c00 <bt_init+0x310>)
    8b62:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed to read supported vendor features");
    8b64:	f01b fb6a 	bl	2423c <printk>
		err = bt_conn_init();
    8b68:	f001 fb66 	bl	a238 <bt_conn_init>
		if (err) {
    8b6c:	4604      	mov	r4, r0
    8b6e:	2800      	cmp	r0, #0
    8b70:	f47f af41 	bne.w	89f6 <bt_init+0x106>
		if (!bt_dev.id_count) {
    8b74:	79eb      	ldrb	r3, [r5, #7]
    8b76:	2b00      	cmp	r3, #0
    8b78:	d177      	bne.n	8c6a <bt_init+0x37a>
			BT_INFO("No ID address. App must call settings_load()");
    8b7a:	2149      	movs	r1, #73	; 0x49
    8b7c:	4821      	ldr	r0, [pc, #132]	; (8c04 <bt_init+0x314>)
    8b7e:	f01b fb5d 	bl	2423c <printk>
			return 0;
    8b82:	e738      	b.n	89f6 <bt_init+0x106>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    8b84:	2102      	movs	r1, #2
    8b86:	f640 406d 	movw	r0, #3181	; 0xc6d
    8b8a:	f7ff f9f5 	bl	7f78 <bt_hci_cmd_create>
		if (!buf) {
    8b8e:	4606      	mov	r6, r0
    8b90:	b910      	cbnz	r0, 8b98 <bt_init+0x2a8>
		return -ENOBUFS;
    8b92:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8b96:	e72e      	b.n	89f6 <bt_init+0x106>
    8b98:	2102      	movs	r1, #2
    8b9a:	3008      	adds	r0, #8
    8b9c:	f014 fdfc 	bl	1d798 <net_buf_simple_add>
		cp_le->le = 0x01;
    8ba0:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    8ba2:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    8ba4:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    8ba6:	4622      	mov	r2, r4
    8ba8:	4631      	mov	r1, r6
    8baa:	f640 406d 	movw	r0, #3181	; 0xc6d
    8bae:	f7ff fb1f 	bl	81f0 <bt_hci_cmd_send_sync>
		if (err) {
    8bb2:	4604      	mov	r4, r0
    8bb4:	2800      	cmp	r0, #0
    8bb6:	f43f af53 	beq.w	8a60 <bt_init+0x170>
    8bba:	e71c      	b.n	89f6 <bt_init+0x106>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    8bbc:	aa01      	add	r2, sp, #4
    8bbe:	2100      	movs	r1, #0
    8bc0:	f242 001c 	movw	r0, #8220	; 0x201c
    8bc4:	f7ff fb14 	bl	81f0 <bt_hci_cmd_send_sync>
		if (err) {
    8bc8:	4604      	mov	r4, r0
    8bca:	2800      	cmp	r0, #0
    8bcc:	f47f af13 	bne.w	89f6 <bt_init+0x106>
		le_read_supp_states_complete(rsp);
    8bd0:	9801      	ldr	r0, [sp, #4]
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    8bd2:	6883      	ldr	r3, [r0, #8]
    8bd4:	f853 2f01 	ldr.w	r2, [r3, #1]!
    8bd8:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    8bda:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    8bde:	f014 fcc5 	bl	1d56c <net_buf_unref>
    8be2:	e742      	b.n	8a6a <bt_init+0x17a>
    8be4:	200001c0 	.word	0x200001c0
    8be8:	200020a4 	.word	0x200020a4
    8bec:	200001fc 	.word	0x200001fc
    8bf0:	20000204 	.word	0x20000204
    8bf4:	0002cb7e 	.word	0x0002cb7e
    8bf8:	20000258 	.word	0x20000258
    8bfc:	20000288 	.word	0x20000288
    8c00:	0002cba7 	.word	0x0002cba7
    8c04:	0002cc2c 	.word	0x0002cc2c
	net_buf_unref(rsp);
    8c08:	9801      	ldr	r0, [sp, #4]
    8c0a:	f014 fcaf 	bl	1d56c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    8c0e:	4621      	mov	r1, r4
    8c10:	aa01      	add	r2, sp, #4
    8c12:	f64f 4002 	movw	r0, #64514	; 0xfc02
    8c16:	f7ff faeb 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8c1a:	4604      	mov	r4, r0
    8c1c:	b110      	cbz	r0, 8c24 <bt_init+0x334>
		BT_WARN("Failed to read supported vendor commands");
    8c1e:	2157      	movs	r1, #87	; 0x57
    8c20:	4815      	ldr	r0, [pc, #84]	; (8c78 <bt_init+0x388>)
    8c22:	e79f      	b.n	8b64 <bt_init+0x274>
	rp.cmds = (void *)rsp->data;
    8c24:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    8c26:	4815      	ldr	r0, [pc, #84]	; (8c7c <bt_init+0x38c>)
    8c28:	6899      	ldr	r1, [r3, #8]
    8c2a:	4632      	mov	r2, r6
    8c2c:	3101      	adds	r1, #1
    8c2e:	f01d fa97 	bl	26160 <memcpy>
	net_buf_unref(rsp);
    8c32:	9801      	ldr	r0, [sp, #4]
    8c34:	f014 fc9a 	bl	1d56c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    8c38:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    8c3c:	075b      	lsls	r3, r3, #29
    8c3e:	d593      	bpl.n	8b68 <bt_init+0x278>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    8c40:	aa01      	add	r2, sp, #4
    8c42:	4621      	mov	r1, r4
    8c44:	f64f 4003 	movw	r0, #64515	; 0xfc03
    8c48:	f7ff fad2 	bl	81f0 <bt_hci_cmd_send_sync>
		if (err) {
    8c4c:	b110      	cbz	r0, 8c54 <bt_init+0x364>
			BT_WARN("Failed to read supported vendor features");
    8c4e:	2157      	movs	r1, #87	; 0x57
    8c50:	480b      	ldr	r0, [pc, #44]	; (8c80 <bt_init+0x390>)
    8c52:	e787      	b.n	8b64 <bt_init+0x274>
		rp.feat = (void *)rsp->data;
    8c54:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    8c56:	480b      	ldr	r0, [pc, #44]	; (8c84 <bt_init+0x394>)
    8c58:	6899      	ldr	r1, [r3, #8]
    8c5a:	2201      	movs	r2, #1
    8c5c:	4411      	add	r1, r2
    8c5e:	f01d fa7f 	bl	26160 <memcpy>
		net_buf_unref(rsp);
    8c62:	9801      	ldr	r0, [sp, #4]
    8c64:	f014 fc82 	bl	1d56c <net_buf_unref>
    8c68:	e77e      	b.n	8b68 <bt_init+0x278>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8c6a:	2104      	movs	r1, #4
    8c6c:	4806      	ldr	r0, [pc, #24]	; (8c88 <bt_init+0x398>)
    8c6e:	f01d fd52 	bl	26716 <atomic_or>
	bt_finalize_init();
    8c72:	f7ff fe31 	bl	88d8 <bt_finalize_init>
	return 0;
    8c76:	e6be      	b.n	89f6 <bt_init+0x106>
    8c78:	0002cbd0 	.word	0x0002cbd0
    8c7c:	20000245 	.word	0x20000245
    8c80:	0002cbfe 	.word	0x0002cbfe
    8c84:	20000244 	.word	0x20000244
    8c88:	20000254 	.word	0x20000254

00008c8c <init_work>:
{
    8c8c:	b510      	push	{r4, lr}
	err = bt_init();
    8c8e:	f7ff fe2f 	bl	88f0 <bt_init>
	if (ready_cb) {
    8c92:	4b03      	ldr	r3, [pc, #12]	; (8ca0 <init_work+0x14>)
    8c94:	681b      	ldr	r3, [r3, #0]
    8c96:	b113      	cbz	r3, 8c9e <init_work+0x12>
}
    8c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    8c9c:	4718      	bx	r3
}
    8c9e:	bd10      	pop	{r4, pc}
    8ca0:	20002098 	.word	0x20002098

00008ca4 <bt_enable>:
{
    8ca4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    8ca6:	4d2b      	ldr	r5, [pc, #172]	; (8d54 <bt_enable+0xb0>)
    8ca8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
{
    8cac:	b088      	sub	sp, #32
    8cae:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    8cb0:	b943      	cbnz	r3, 8cc4 <bt_enable+0x20>
		BT_ERR("No HCI driver registered");
    8cb2:	2145      	movs	r1, #69	; 0x45
    8cb4:	4828      	ldr	r0, [pc, #160]	; (8d58 <bt_enable+0xb4>)
    8cb6:	f01b fac1 	bl	2423c <printk>
		return -ENODEV;
    8cba:	f06f 0412 	mvn.w	r4, #18
}
    8cbe:	4620      	mov	r0, r4
    8cc0:	b008      	add	sp, #32
    8cc2:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    8cc4:	2100      	movs	r1, #0
    8cc6:	f105 0094 	add.w	r0, r5, #148	; 0x94
    8cca:	f01d fd33 	bl	26734 <atomic_test_and_set_bit>
    8cce:	2800      	cmp	r0, #0
    8cd0:	d13d      	bne.n	8d4e <bt_enable+0xaa>
		err = bt_settings_init();
    8cd2:	f7fe fc01 	bl	74d8 <bt_settings_init>
		if (err) {
    8cd6:	4604      	mov	r4, r0
    8cd8:	2800      	cmp	r0, #0
    8cda:	d1f0      	bne.n	8cbe <bt_enable+0x1a>
	ready_cb = cb;
    8cdc:	4b1f      	ldr	r3, [pc, #124]	; (8d5c <bt_enable+0xb8>)
    8cde:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8ce0:	2200      	movs	r2, #0
    8ce2:	2300      	movs	r3, #0
    8ce4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8ce8:	f06f 0308 	mvn.w	r3, #8
    8cec:	e9cd 0302 	strd	r0, r3, [sp, #8]
    8cf0:	9004      	str	r0, [sp, #16]
    8cf2:	e9cd 0000 	strd	r0, r0, [sp]
    8cf6:	4b1a      	ldr	r3, [pc, #104]	; (8d60 <bt_enable+0xbc>)
    8cf8:	491a      	ldr	r1, [pc, #104]	; (8d64 <bt_enable+0xc0>)
    8cfa:	481b      	ldr	r0, [pc, #108]	; (8d68 <bt_enable+0xc4>)
    8cfc:	f44f 7220 	mov.w	r2, #640	; 0x280
    8d00:	f019 f9f4 	bl	220ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    8d04:	4919      	ldr	r1, [pc, #100]	; (8d6c <bt_enable+0xc8>)
    8d06:	4818      	ldr	r0, [pc, #96]	; (8d68 <bt_enable+0xc4>)
    8d08:	f021 faff 	bl	2a30a <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    8d0c:	f7fe fad8 	bl	72c0 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    8d10:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    8d14:	68db      	ldr	r3, [r3, #12]
    8d16:	4798      	blx	r3
	if (err) {
    8d18:	4604      	mov	r4, r0
    8d1a:	b128      	cbz	r0, 8d28 <bt_enable+0x84>
		BT_ERR("HCI driver open failed (%d)", err);
    8d1c:	4602      	mov	r2, r0
    8d1e:	2145      	movs	r1, #69	; 0x45
    8d20:	4813      	ldr	r0, [pc, #76]	; (8d70 <bt_enable+0xcc>)
    8d22:	f01b fa8b 	bl	2423c <printk>
		return err;
    8d26:	e7ca      	b.n	8cbe <bt_enable+0x1a>
	if (!cb) {
    8d28:	b926      	cbnz	r6, 8d34 <bt_enable+0x90>
}
    8d2a:	b008      	add	sp, #32
    8d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    8d30:	f7ff bdde 	b.w	88f0 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8d34:	4601      	mov	r1, r0
    8d36:	f105 0090 	add.w	r0, r5, #144	; 0x90
    8d3a:	f01d fcfb 	bl	26734 <atomic_test_and_set_bit>
    8d3e:	2800      	cmp	r0, #0
    8d40:	d1bd      	bne.n	8cbe <bt_enable+0x1a>
		k_queue_append(&work_q->queue, work);
    8d42:	f105 0188 	add.w	r1, r5, #136	; 0x88
    8d46:	480b      	ldr	r0, [pc, #44]	; (8d74 <bt_enable+0xd0>)
    8d48:	f021 fa6c 	bl	2a224 <k_queue_append>
    8d4c:	e7b7      	b.n	8cbe <bt_enable+0x1a>
		return -EALREADY;
    8d4e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8d52:	e7b4      	b.n	8cbe <bt_enable+0x1a>
    8d54:	200001c0 	.word	0x200001c0
    8d58:	0002cae5 	.word	0x0002cae5
    8d5c:	20002098 	.word	0x20002098
    8d60:	00007a55 	.word	0x00007a55
    8d64:	20003b80 	.word	0x20003b80
    8d68:	20001020 	.word	0x20001020
    8d6c:	0002cb03 	.word	0x0002cb03
    8d70:	0002cb09 	.word	0x0002cb09
    8d74:	20001988 	.word	0x20001988

00008d78 <bt_get_name>:
}
    8d78:	4800      	ldr	r0, [pc, #0]	; (8d7c <bt_get_name+0x4>)
    8d7a:	4770      	bx	lr
    8d7c:	0002d0fe 	.word	0x0002d0fe

00008d80 <bt_id_create>:
{
    8d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8d82:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8d84:	4605      	mov	r5, r0
    8d86:	b918      	cbnz	r0, 8d90 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    8d88:	b304      	cbz	r4, 8dcc <bt_id_create+0x4c>
		return -EINVAL;
    8d8a:	f06f 0415 	mvn.w	r4, #21
    8d8e:	e027      	b.n	8de0 <bt_id_create+0x60>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8d90:	2300      	movs	r3, #0
    8d92:	4669      	mov	r1, sp
    8d94:	9300      	str	r3, [sp, #0]
    8d96:	f8cd 3003 	str.w	r3, [sp, #3]
    8d9a:	f01d fcf6 	bl	2678a <bt_addr_le_cmp>
    8d9e:	2800      	cmp	r0, #0
    8da0:	d0f2      	beq.n	8d88 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    8da2:	782b      	ldrb	r3, [r5, #0]
    8da4:	2b01      	cmp	r3, #1
    8da6:	d104      	bne.n	8db2 <bt_id_create+0x32>
    8da8:	79ab      	ldrb	r3, [r5, #6]
    8daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8dae:	2bc0      	cmp	r3, #192	; 0xc0
    8db0:	d004      	beq.n	8dbc <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    8db2:	2145      	movs	r1, #69	; 0x45
    8db4:	480d      	ldr	r0, [pc, #52]	; (8dec <bt_id_create+0x6c>)
    8db6:	f01b fa41 	bl	2423c <printk>
			return -EINVAL;
    8dba:	e7e6      	b.n	8d8a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    8dbc:	4628      	mov	r0, r5
    8dbe:	f7fe fd2b 	bl	7818 <id_find>
    8dc2:	2800      	cmp	r0, #0
    8dc4:	dbe0      	blt.n	8d88 <bt_id_create+0x8>
			return -EALREADY;
    8dc6:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8dca:	e009      	b.n	8de0 <bt_id_create+0x60>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    8dcc:	4b08      	ldr	r3, [pc, #32]	; (8df0 <bt_id_create+0x70>)
    8dce:	79dc      	ldrb	r4, [r3, #7]
    8dd0:	2c01      	cmp	r4, #1
    8dd2:	d008      	beq.n	8de6 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    8dd4:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    8dd6:	4629      	mov	r1, r5
    8dd8:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    8dda:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    8ddc:	f7fe ffb4 	bl	7d48 <id_create.isra.22>
}
    8de0:	4620      	mov	r0, r4
    8de2:	b003      	add	sp, #12
    8de4:	bd30      	pop	{r4, r5, pc}
		return -ENOMEM;
    8de6:	f06f 040b 	mvn.w	r4, #11
    8dea:	e7f9      	b.n	8de0 <bt_id_create+0x60>
    8dec:	0002cb4b 	.word	0x0002cb4b
    8df0:	200001c0 	.word	0x200001c0

00008df4 <bt_setup_public_id_addr>:
{
    8df4:	b570      	push	{r4, r5, r6, lr}
    8df6:	b088      	sub	sp, #32
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    8df8:	aa01      	add	r2, sp, #4
    8dfa:	2100      	movs	r1, #0
    8dfc:	f241 0009 	movw	r0, #4105	; 0x1009
    8e00:	f7ff f9f6 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8e04:	4e1c      	ldr	r6, [pc, #112]	; (8e78 <bt_setup_public_id_addr+0x84>)
    8e06:	4604      	mov	r4, r0
    8e08:	b138      	cbz	r0, 8e1a <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    8e0a:	2157      	movs	r1, #87	; 0x57
    8e0c:	481b      	ldr	r0, [pc, #108]	; (8e7c <bt_setup_public_id_addr+0x88>)
    8e0e:	f01b fa15 	bl	2423c <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    8e12:	2300      	movs	r3, #0
    8e14:	71f3      	strb	r3, [r6, #7]
}
    8e16:	b008      	add	sp, #32
    8e18:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    8e1a:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8e1c:	9004      	str	r0, [sp, #16]
    8e1e:	689d      	ldr	r5, [r3, #8]
    8e20:	f8ad 0014 	strh.w	r0, [sp, #20]
    8e24:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    8e26:	2206      	movs	r2, #6
    8e28:	a904      	add	r1, sp, #16
    8e2a:	4628      	mov	r0, r5
    8e2c:	f01d f971 	bl	26112 <memcmp>
    8e30:	b918      	cbnz	r0, 8e3a <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    8e32:	9801      	ldr	r0, [sp, #4]
    8e34:	f014 fb9a 	bl	1d56c <net_buf_unref>
    8e38:	e7eb      	b.n	8e12 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    8e3a:	4b11      	ldr	r3, [pc, #68]	; (8e80 <bt_setup_public_id_addr+0x8c>)
    8e3c:	6818      	ldr	r0, [r3, #0]
    8e3e:	9002      	str	r0, [sp, #8]
    8e40:	889b      	ldrh	r3, [r3, #4]
    8e42:	f8ad 300c 	strh.w	r3, [sp, #12]
    8e46:	2206      	movs	r2, #6
    8e48:	a902      	add	r1, sp, #8
    8e4a:	4628      	mov	r0, r5
    8e4c:	f01d f961 	bl	26112 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8e50:	2800      	cmp	r0, #0
    8e52:	d0ee      	beq.n	8e32 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    8e54:	4629      	mov	r1, r5
    8e56:	2206      	movs	r2, #6
    8e58:	f10d 0019 	add.w	r0, sp, #25
    8e5c:	f01d f980 	bl	26160 <memcpy>
	net_buf_unref(rsp);
    8e60:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    8e62:	f88d 4018 	strb.w	r4, [sp, #24]
	net_buf_unref(rsp);
    8e66:	f014 fb81 	bl	1d56c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    8e6a:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    8e6c:	a906      	add	r1, sp, #24
    8e6e:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    8e70:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    8e72:	f7fe ff69 	bl	7d48 <id_create.isra.22>
    8e76:	e7ce      	b.n	8e16 <bt_setup_public_id_addr+0x22>
    8e78:	200001c0 	.word	0x200001c0
    8e7c:	0002cdf9 	.word	0x0002cdf9
    8e80:	0002ab4b 	.word	0x0002ab4b

00008e84 <bt_read_static_addr>:
{
    8e84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    8e88:	4b1c      	ldr	r3, [pc, #112]	; (8efc <bt_read_static_addr+0x78>)
    8e8a:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    8e8e:	f014 0401 	ands.w	r4, r4, #1
{
    8e92:	4607      	mov	r7, r0
    8e94:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    8e96:	d104      	bne.n	8ea2 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    8e98:	4819      	ldr	r0, [pc, #100]	; (8f00 <bt_read_static_addr+0x7c>)
    8e9a:	2157      	movs	r1, #87	; 0x57
		BT_WARN("No static addresses stored in controller");
    8e9c:	f01b f9ce 	bl	2423c <printk>
    8ea0:	e00c      	b.n	8ebc <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    8ea2:	aa01      	add	r2, sp, #4
    8ea4:	2100      	movs	r1, #0
    8ea6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    8eaa:	f7ff f9a1 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    8eae:	4605      	mov	r5, r0
    8eb0:	b140      	cbz	r0, 8ec4 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    8eb2:	2157      	movs	r1, #87	; 0x57
    8eb4:	4813      	ldr	r0, [pc, #76]	; (8f04 <bt_read_static_addr+0x80>)
    8eb6:	f01b f9c1 	bl	2423c <printk>
    8eba:	2400      	movs	r4, #0
}
    8ebc:	4620      	mov	r0, r4
    8ebe:	b002      	add	sp, #8
    8ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    8ec4:	9b01      	ldr	r3, [sp, #4]
    8ec6:	6899      	ldr	r1, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    8ec8:	784c      	ldrb	r4, [r1, #1]
    8eca:	42b4      	cmp	r4, r6
    8ecc:	bf28      	it	cs
    8ece:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    8ed0:	f04f 0816 	mov.w	r8, #22
    8ed4:	1c8e      	adds	r6, r1, #2
	for (i = 0; i < cnt; i++) {
    8ed6:	42ac      	cmp	r4, r5
    8ed8:	dc07      	bgt.n	8eea <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    8eda:	9801      	ldr	r0, [sp, #4]
    8edc:	f014 fb46 	bl	1d56c <net_buf_unref>
	if (!cnt) {
    8ee0:	2c00      	cmp	r4, #0
    8ee2:	d1eb      	bne.n	8ebc <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    8ee4:	2157      	movs	r1, #87	; 0x57
    8ee6:	4808      	ldr	r0, [pc, #32]	; (8f08 <bt_read_static_addr+0x84>)
    8ee8:	e7d8      	b.n	8e9c <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    8eea:	fb08 7005 	mla	r0, r8, r5, r7
    8eee:	2216      	movs	r2, #22
    8ef0:	4631      	mov	r1, r6
    8ef2:	f01d f935 	bl	26160 <memcpy>
	for (i = 0; i < cnt; i++) {
    8ef6:	3501      	adds	r5, #1
    8ef8:	e7ed      	b.n	8ed6 <bt_read_static_addr+0x52>
    8efa:	bf00      	nop
    8efc:	200001c0 	.word	0x200001c0
    8f00:	0002cd0c 	.word	0x0002cd0c
    8f04:	0002cd3d 	.word	0x0002cd3d
    8f08:	0002cd62 	.word	0x0002cd62

00008f0c <bt_setup_random_id_addr>:
{
    8f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    8f0e:	4d14      	ldr	r5, [pc, #80]	; (8f60 <bt_setup_random_id_addr+0x54>)
    8f10:	79ec      	ldrb	r4, [r5, #7]
{
    8f12:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    8f14:	b9f4      	cbnz	r4, 8f54 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    8f16:	2101      	movs	r1, #1
    8f18:	a802      	add	r0, sp, #8
    8f1a:	f7ff ffb3 	bl	8e84 <bt_read_static_addr>
    8f1e:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    8f20:	b1c0      	cbz	r0, 8f54 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    8f22:	2716      	movs	r7, #22
    8f24:	e00f      	b.n	8f46 <bt_setup_random_id_addr+0x3a>
    8f26:	ab02      	add	r3, sp, #8
    8f28:	fb07 3106 	mla	r1, r7, r6, r3
    8f2c:	2206      	movs	r2, #6
    8f2e:	f10d 0001 	add.w	r0, sp, #1
    8f32:	f01d f915 	bl	26160 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    8f36:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    8f38:	4669      	mov	r1, sp
    8f3a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    8f3c:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    8f40:	f7fe ff02 	bl	7d48 <id_create.isra.22>
    8f44:	3401      	adds	r4, #1
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    8f46:	79eb      	ldrb	r3, [r5, #7]
    8f48:	b2e6      	uxtb	r6, r4
    8f4a:	42b3      	cmp	r3, r6
    8f4c:	d8eb      	bhi.n	8f26 <bt_setup_random_id_addr+0x1a>
			return 0;
    8f4e:	2000      	movs	r0, #0
}
    8f50:	b009      	add	sp, #36	; 0x24
    8f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    8f54:	2100      	movs	r1, #0
    8f56:	4608      	mov	r0, r1
    8f58:	f7ff ff12 	bl	8d80 <bt_id_create>
    8f5c:	e7f8      	b.n	8f50 <bt_setup_random_id_addr+0x44>
    8f5e:	bf00      	nop
    8f60:	200001c0 	.word	0x200001c0

00008f64 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    8f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    8f68:	690d      	ldr	r5, [r1, #16]
{
    8f6a:	b08f      	sub	sp, #60	; 0x3c
    8f6c:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    8f6e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    8f70:	ebb5 0b03 	subs.w	fp, r5, r3
{
    8f74:	4606      	mov	r6, r0
    8f76:	460c      	mov	r4, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8f78:	4887      	ldr	r0, [pc, #540]	; (9198 <bt_le_adv_start_legacy+0x234>)
	struct bt_conn *conn = NULL;
    8f7a:	9307      	str	r3, [sp, #28]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8f7c:	f04f 0101 	mov.w	r1, #1
	bool dir_adv = (param->peer != NULL), scannable;
    8f80:	bf18      	it	ne
    8f82:	f04f 0b01 	movne.w	fp, #1
{
    8f86:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8f88:	f01d fc02 	bl	26790 <atomic_test_bit>
    8f8c:	2800      	cmp	r0, #0
    8f8e:	f000 80f4 	beq.w	917a <bt_le_adv_start_legacy+0x216>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    8f92:	4620      	mov	r0, r4
    8f94:	f7fe fc58 	bl	7848 <valid_adv_param>
    8f98:	4680      	mov	r8, r0
    8f9a:	2800      	cmp	r0, #0
    8f9c:	f000 80f0 	beq.w	9180 <bt_le_adv_start_legacy+0x21c>
	    !(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    8fa0:	210b      	movs	r1, #11
    8fa2:	487d      	ldr	r0, [pc, #500]	; (9198 <bt_le_adv_start_legacy+0x234>)
    8fa4:	f01d fbf4 	bl	26790 <atomic_test_bit>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    8fa8:	b918      	cbnz	r0, 8fb2 <bt_le_adv_start_legacy+0x4e>
	      atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING))) {
    8faa:	2105      	movs	r1, #5
    8fac:	487a      	ldr	r0, [pc, #488]	; (9198 <bt_le_adv_start_legacy+0x234>)
    8fae:	f01d fbef 	bl	26790 <atomic_test_bit>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8fb2:	f106 0710 	add.w	r7, r6, #16
    8fb6:	2106      	movs	r1, #6
    8fb8:	4638      	mov	r0, r7
    8fba:	f01d fbe9 	bl	26790 <atomic_test_bit>
    8fbe:	2800      	cmp	r0, #0
    8fc0:	f040 80e1 	bne.w	9186 <bt_le_adv_start_legacy+0x222>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    8fc4:	4601      	mov	r1, r0
    8fc6:	220f      	movs	r2, #15
    8fc8:	9005      	str	r0, [sp, #20]
    8fca:	a80a      	add	r0, sp, #40	; 0x28
    8fcc:	f01d f8f2 	bl	261b4 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    8fd0:	68a2      	ldr	r2, [r4, #8]
    8fd2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    8fd6:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    8fd8:	68e2      	ldr	r2, [r4, #12]
    8fda:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    8fde:	f01d fb88 	bl	266f2 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);
    8fe2:	9b05      	ldr	r3, [sp, #20]
    8fe4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36

	if (adv->id != param->id) {
    8fe8:	7832      	ldrb	r2, [r6, #0]
    8fea:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    8fec:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    8ff0:	429a      	cmp	r2, r3
    8ff2:	d004      	beq.n	8ffe <bt_le_adv_start_legacy+0x9a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8ff4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8ff8:	4867      	ldr	r0, [pc, #412]	; (9198 <bt_le_adv_start_legacy+0x234>)
    8ffa:	f01d fba6 	bl	2674a <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    8ffe:	4b67      	ldr	r3, [pc, #412]	; (919c <bt_le_adv_start_legacy+0x238>)
	adv->id = param->id;
    9000:	7820      	ldrb	r0, [r4, #0]
    9002:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    9004:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    9008:	465a      	mov	r2, fp
    900a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    900e:	6861      	ldr	r1, [r4, #4]
    9010:	f7ff fa8a 	bl	8528 <le_adv_set_random_addr.isra.28>
				     &set_param.own_addr_type);
	if (err) {
    9014:	4683      	mov	fp, r0
    9016:	2800      	cmp	r0, #0
    9018:	d16d      	bne.n	90f6 <bt_le_adv_start_legacy+0x192>
		return err;
	}

	if (dir_adv) {
    901a:	f106 0009 	add.w	r0, r6, #9
    901e:	2d00      	cmp	r5, #0
    9020:	d042      	beq.n	90a8 <bt_le_adv_start_legacy+0x144>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    9022:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    9024:	f01d fb74 	bl	26710 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9028:	6863      	ldr	r3, [r4, #4]
    902a:	07d9      	lsls	r1, r3, #31
    902c:	d544      	bpl.n	90b8 <bt_le_adv_start_legacy+0x154>
		scannable = true;

		if (dir_adv) {
    902e:	2d00      	cmp	r5, #0
    9030:	d03f      	beq.n	90b2 <bt_le_adv_start_legacy+0x14e>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    9032:	f013 0f10 	tst.w	r3, #16
    9036:	bf14      	ite	ne
    9038:	2304      	movne	r3, #4
    903a:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    903c:	6921      	ldr	r1, [r4, #16]
    903e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    9042:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    9046:	f01d fb63 	bl	26710 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    904a:	210f      	movs	r1, #15
    904c:	f242 0006 	movw	r0, #8198	; 0x2006
    9050:	f7fe ff92 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    9054:	4683      	mov	fp, r0
    9056:	2800      	cmp	r0, #0
    9058:	f000 8098 	beq.w	918c <bt_le_adv_start_legacy+0x228>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    905c:	220f      	movs	r2, #15
    905e:	a90a      	add	r1, sp, #40	; 0x28
    9060:	3008      	adds	r0, #8
    9062:	f020 fc9c 	bl	2999e <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    9066:	2200      	movs	r2, #0
    9068:	4659      	mov	r1, fp
    906a:	f242 0006 	movw	r0, #8198	; 0x2006
    906e:	f7ff f8bf 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    9072:	2800      	cmp	r0, #0
    9074:	f040 808d 	bne.w	9192 <bt_le_adv_start_legacy+0x22e>
		return err;
	}

	if (!dir_adv) {
    9078:	b36d      	cbz	r5, 90d6 <bt_le_adv_start_legacy+0x172>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    907a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    907c:	07da      	lsls	r2, r3, #31
    907e:	d43e      	bmi.n	90fe <bt_le_adv_start_legacy+0x19a>
	return set_le_adv_enable_legacy(adv, enable);
    9080:	2101      	movs	r1, #1
    9082:	4630      	mov	r0, r6
    9084:	f7ff fabe 	bl	8604 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    9088:	4683      	mov	fp, r0
    908a:	2800      	cmp	r0, #0
    908c:	d06e      	beq.n	916c <bt_le_adv_start_legacy+0x208>
		BT_ERR("Failed to start advertiser");
    908e:	4844      	ldr	r0, [pc, #272]	; (91a0 <bt_le_adv_start_legacy+0x23c>)
    9090:	2145      	movs	r1, #69	; 0x45
    9092:	f01b f8d3 	bl	2423c <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9096:	9807      	ldr	r0, [sp, #28]
    9098:	b368      	cbz	r0, 90f6 <bt_le_adv_start_legacy+0x192>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    909a:	2100      	movs	r1, #0
    909c:	f000 fdf8 	bl	9c90 <bt_conn_set_state>
			bt_conn_unref(conn);
    90a0:	9807      	ldr	r0, [sp, #28]
    90a2:	f000 fdc1 	bl	9c28 <bt_conn_unref>
    90a6:	e026      	b.n	90f6 <bt_le_adv_start_legacy+0x192>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    90a8:	9508      	str	r5, [sp, #32]
    90aa:	a908      	add	r1, sp, #32
    90ac:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    90b0:	e7b8      	b.n	9024 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
    90b2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    90b6:	e7c8      	b.n	904a <bt_le_adv_start_legacy+0xe6>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    90b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    90ba:	b952      	cbnz	r2, 90d2 <bt_le_adv_start_legacy+0x16e>
    90bc:	f003 0308 	and.w	r3, r3, #8
    90c0:	2b00      	cmp	r3, #0
    90c2:	bf0a      	itet	eq
    90c4:	f04f 0800 	moveq.w	r8, #0
    90c8:	2302      	movne	r3, #2
    90ca:	2303      	moveq	r3, #3
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    90cc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    90d0:	e7bb      	b.n	904a <bt_le_adv_start_legacy+0xe6>
    90d2:	2302      	movs	r3, #2
    90d4:	e7fa      	b.n	90cc <bt_le_adv_start_legacy+0x168>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    90d6:	6863      	ldr	r3, [r4, #4]
    90d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    90dc:	e9cd 8301 	strd	r8, r3, [sp, #4]
    90e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90e2:	9300      	str	r3, [sp, #0]
    90e4:	4652      	mov	r2, sl
    90e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    90e8:	4649      	mov	r1, r9
    90ea:	4630      	mov	r0, r6
    90ec:	f7ff f980 	bl	83f0 <le_adv_update.constprop.37>
		if (err) {
    90f0:	4683      	mov	fp, r0
    90f2:	2800      	cmp	r0, #0
    90f4:	d0c1      	beq.n	907a <bt_le_adv_start_legacy+0x116>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    90f6:	4658      	mov	r0, fp
    90f8:	b00f      	add	sp, #60	; 0x3c
    90fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    90fe:	a907      	add	r1, sp, #28
    9100:	4630      	mov	r0, r6
    9102:	f7fe fdcd 	bl	7ca0 <le_adv_start_add_conn>
		if (err) {
    9106:	4683      	mov	fp, r0
    9108:	2800      	cmp	r0, #0
    910a:	d0b9      	beq.n	9080 <bt_le_adv_start_legacy+0x11c>
			if (err == -ENOMEM && !dir_adv &&
    910c:	f110 0f0c 	cmn.w	r0, #12
    9110:	d1f1      	bne.n	90f6 <bt_le_adv_start_legacy+0x192>
    9112:	2d00      	cmp	r5, #0
    9114:	d1ef      	bne.n	90f6 <bt_le_adv_start_legacy+0x192>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    9116:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    9118:	079b      	lsls	r3, r3, #30
    911a:	d4ec      	bmi.n	90f6 <bt_le_adv_start_legacy+0x192>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    911c:	6860      	ldr	r0, [r4, #4]
    911e:	f080 0002 	eor.w	r0, r0, #2
    9122:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    9126:	f00b 0201 	and.w	r2, fp, #1
    912a:	210c      	movs	r1, #12
    912c:	4638      	mov	r0, r7
    912e:	f01d fb1b 	bl	26768 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    9132:	6862      	ldr	r2, [r4, #4]
    9134:	2107      	movs	r1, #7
    9136:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    913a:	4638      	mov	r0, r7
    913c:	f01d fb14 	bl	26768 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    9140:	6862      	ldr	r2, [r4, #4]
    9142:	2108      	movs	r1, #8
    9144:	f002 0201 	and.w	r2, r2, #1
    9148:	4638      	mov	r0, r7
    914a:	f01d fb0d 	bl	26768 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    914e:	4642      	mov	r2, r8
    9150:	2109      	movs	r1, #9
    9152:	4638      	mov	r0, r7
    9154:	f01d fb08 	bl	26768 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    9158:	6862      	ldr	r2, [r4, #4]
    915a:	210b      	movs	r1, #11
    915c:	f3c2 0280 	ubfx	r2, r2, #2, #1
    9160:	4638      	mov	r0, r7
    9162:	f01d fb01 	bl	26768 <atomic_set_bit_to>
	return 0;
    9166:	f04f 0b00 	mov.w	fp, #0
    916a:	e7c4      	b.n	90f6 <bt_le_adv_start_legacy+0x192>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    916c:	9807      	ldr	r0, [sp, #28]
    916e:	b108      	cbz	r0, 9174 <bt_le_adv_start_legacy+0x210>
		bt_conn_unref(conn);
    9170:	f000 fd5a 	bl	9c28 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9174:	2d00      	cmp	r5, #0
    9176:	d1d6      	bne.n	9126 <bt_le_adv_start_legacy+0x1c2>
    9178:	e7d0      	b.n	911c <bt_le_adv_start_legacy+0x1b8>
		return -EAGAIN;
    917a:	f06f 0b0a 	mvn.w	fp, #10
    917e:	e7ba      	b.n	90f6 <bt_le_adv_start_legacy+0x192>
		return -EINVAL;
    9180:	f06f 0b15 	mvn.w	fp, #21
    9184:	e7b7      	b.n	90f6 <bt_le_adv_start_legacy+0x192>
		return -EALREADY;
    9186:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    918a:	e7b4      	b.n	90f6 <bt_le_adv_start_legacy+0x192>
		return -ENOBUFS;
    918c:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    9190:	e7b1      	b.n	90f6 <bt_le_adv_start_legacy+0x192>
    9192:	4683      	mov	fp, r0
    9194:	e7af      	b.n	90f6 <bt_le_adv_start_legacy+0x192>
    9196:	bf00      	nop
    9198:	20000254 	.word	0x20000254
    919c:	200001c0 	.word	0x200001c0
    91a0:	0002cc5e 	.word	0x0002cc5e

000091a4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    91a4:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    91a6:	9c04      	ldr	r4, [sp, #16]
    91a8:	e9cd 3400 	strd	r3, r4, [sp]
    91ac:	4613      	mov	r3, r2
    91ae:	460a      	mov	r2, r1
    91b0:	4601      	mov	r1, r0
    91b2:	4802      	ldr	r0, [pc, #8]	; (91bc <bt_le_adv_start+0x18>)
    91b4:	f7ff fed6 	bl	8f64 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    91b8:	b002      	add	sp, #8
    91ba:	bd10      	pop	{r4, pc}
    91bc:	200001d8 	.word	0x200001d8

000091c0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    91c0:	b530      	push	{r4, r5, lr}
    91c2:	4c2a      	ldr	r4, [pc, #168]	; (926c <bt_le_adv_stop+0xac>)
    91c4:	b085      	sub	sp, #20
    91c6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    91ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
    91ce:	f01d fabc 	bl	2674a <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    91d2:	2106      	movs	r1, #6
    91d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    91d8:	f01d fada 	bl	26790 <atomic_test_bit>
    91dc:	b918      	cbnz	r0, 91e6 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    91de:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    91e0:	4620      	mov	r0, r4
    91e2:	b005      	add	sp, #20
    91e4:	bd30      	pop	{r4, r5, pc}
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    91e6:	2108      	movs	r1, #8
    91e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    91ec:	f01d fad0 	bl	26790 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    91f0:	b308      	cbz	r0, 9236 <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    91f2:	2300      	movs	r3, #0
    91f4:	4669      	mov	r1, sp
    91f6:	f104 0021 	add.w	r0, r4, #33	; 0x21
    91fa:	9300      	str	r3, [sp, #0]
    91fc:	f8cd 3003 	str.w	r3, [sp, #3]
    9200:	f01d fac3 	bl	2678a <bt_addr_le_cmp>
    9204:	7e25      	ldrb	r5, [r4, #24]
    9206:	bb60      	cbnz	r0, 9262 <bt_le_adv_stop+0xa2>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    9208:	4b19      	ldr	r3, [pc, #100]	; (9270 <bt_le_adv_stop+0xb0>)
    920a:	889a      	ldrh	r2, [r3, #4]
    920c:	6818      	ldr	r0, [r3, #0]
    920e:	799b      	ldrb	r3, [r3, #6]
    9210:	f8ad 200c 	strh.w	r2, [sp, #12]
    9214:	9002      	str	r0, [sp, #8]
    9216:	f88d 300e 	strb.w	r3, [sp, #14]
    921a:	2204      	movs	r2, #4
    921c:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    921e:	4628      	mov	r0, r5
    9220:	f000 fe46 	bl	9eb0 <bt_conn_lookup_state_le>
    9224:	4604      	mov	r4, r0
	if (conn) {
    9226:	b130      	cbz	r0, 9236 <bt_le_adv_stop+0x76>
		conn->err = status;
    9228:	2100      	movs	r1, #0
    922a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    922c:	f000 fd30 	bl	9c90 <bt_conn_set_state>
		bt_conn_unref(conn);
    9230:	4620      	mov	r0, r4
    9232:	f000 fcf9 	bl	9c28 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    9236:	2100      	movs	r1, #0
    9238:	480e      	ldr	r0, [pc, #56]	; (9274 <bt_le_adv_stop+0xb4>)
    923a:	f7ff f9e3 	bl	8604 <set_le_adv_enable_legacy>
		if (err) {
    923e:	4604      	mov	r4, r0
    9240:	2800      	cmp	r0, #0
    9242:	d1cd      	bne.n	91e0 <bt_le_adv_stop+0x20>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9244:	2105      	movs	r1, #5
    9246:	480c      	ldr	r0, [pc, #48]	; (9278 <bt_le_adv_stop+0xb8>)
    9248:	f01d faa2 	bl	26790 <atomic_test_bit>
    924c:	2800      	cmp	r0, #0
    924e:	d0c6      	beq.n	91de <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
    9250:	4620      	mov	r0, r4
    9252:	f7ff f82f 	bl	82b4 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    9256:	f01d faa4 	bl	267a2 <le_adv_set_private_addr.isra.27>
	return set_le_scan_enable_legacy(enable);
    925a:	2001      	movs	r0, #1
    925c:	f7ff f82a 	bl	82b4 <set_le_scan_enable_legacy>
    9260:	e7be      	b.n	91e0 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9262:	2205      	movs	r2, #5
    9264:	f104 0121 	add.w	r1, r4, #33	; 0x21
    9268:	e7d9      	b.n	921e <bt_le_adv_stop+0x5e>
    926a:	bf00      	nop
    926c:	200001c0 	.word	0x200001c0
    9270:	0002ab44 	.word	0x0002ab44
    9274:	200001d8 	.word	0x200001d8
    9278:	20000254 	.word	0x20000254

0000927c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    927c:	b513      	push	{r0, r1, r4, lr}
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    927e:	210c      	movs	r1, #12
    9280:	4817      	ldr	r0, [pc, #92]	; (92e0 <bt_le_adv_resume+0x64>)
    9282:	f01d fa85 	bl	26790 <atomic_test_bit>
    9286:	b340      	cbz	r0, 92da <bt_le_adv_resume+0x5e>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
    9288:	2106      	movs	r1, #6
    928a:	4815      	ldr	r0, [pc, #84]	; (92e0 <bt_le_adv_resume+0x64>)
    928c:	f01d fa80 	bl	26790 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    9290:	4604      	mov	r4, r0
    9292:	bb10      	cbnz	r0, 92da <bt_le_adv_resume+0x5e>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    9294:	2108      	movs	r1, #8
    9296:	4812      	ldr	r0, [pc, #72]	; (92e0 <bt_le_adv_resume+0x64>)
    9298:	f01d fa7a 	bl	26790 <atomic_test_bit>
    929c:	b1e8      	cbz	r0, 92da <bt_le_adv_resume+0x5e>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    929e:	a901      	add	r1, sp, #4
    92a0:	4810      	ldr	r0, [pc, #64]	; (92e4 <bt_le_adv_resume+0x68>)
    92a2:	f7fe fcfd 	bl	7ca0 <le_adv_start_add_conn>
	if (err) {
    92a6:	b9c0      	cbnz	r0, 92da <bt_le_adv_resume+0x5e>
	return set_le_adv_enable_legacy(adv, enable);
    92a8:	2101      	movs	r1, #1
    92aa:	480e      	ldr	r0, [pc, #56]	; (92e4 <bt_le_adv_resume+0x68>)
    92ac:	f7ff f9aa 	bl	8604 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    92b0:	b150      	cbz	r0, 92c8 <bt_le_adv_resume+0x4c>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    92b2:	4621      	mov	r1, r4
    92b4:	9801      	ldr	r0, [sp, #4]
    92b6:	f000 fceb 	bl	9c90 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    92ba:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    92be:	4808      	ldr	r0, [pc, #32]	; (92e0 <bt_le_adv_resume+0x64>)
    92c0:	f01d fa43 	bl	2674a <atomic_and>
	return (old & mask) != 0;
    92c4:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    92c8:	9801      	ldr	r0, [sp, #4]
    92ca:	f000 fcad 	bl	9c28 <bt_conn_unref>
	if (persist_paused) {
    92ce:	b124      	cbz	r4, 92da <bt_le_adv_resume+0x5e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    92d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    92d4:	4802      	ldr	r0, [pc, #8]	; (92e0 <bt_le_adv_resume+0x64>)
    92d6:	f01d fa1e 	bl	26716 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    92da:	b002      	add	sp, #8
    92dc:	bd10      	pop	{r4, pc}
    92de:	bf00      	nop
    92e0:	200001e8 	.word	0x200001e8
    92e4:	200001d8 	.word	0x200001d8

000092e8 <enh_conn_complete>:
{
    92e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    92ec:	7805      	ldrb	r5, [r0, #0]
{
    92ee:	4604      	mov	r4, r0
	if (evt->status) {
    92f0:	b305      	cbz	r5, 9334 <enh_conn_complete+0x4c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    92f2:	2d3c      	cmp	r5, #60	; 0x3c
    92f4:	d118      	bne.n	9328 <enh_conn_complete+0x40>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    92f6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    92fa:	484d      	ldr	r0, [pc, #308]	; (9430 <enh_conn_complete+0x148>)
    92fc:	f01d fa25 	bl	2674a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    9300:	2000      	movs	r0, #0
    9302:	f7fe fb89 	bl	7a18 <find_pending_connect.part.21>
		if (!conn) {
    9306:	4604      	mov	r4, r0
    9308:	b930      	cbnz	r0, 9318 <enh_conn_complete+0x30>
			BT_ERR("No pending slave connection");
    930a:	2145      	movs	r1, #69	; 0x45
    930c:	4849      	ldr	r0, [pc, #292]	; (9434 <enh_conn_complete+0x14c>)
    930e:	f01a ff95 	bl	2423c <printk>
}
    9312:	b004      	add	sp, #16
    9314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    9318:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    931a:	2100      	movs	r1, #0
    931c:	f000 fcb8 	bl	9c90 <bt_conn_set_state>
		bt_conn_unref(conn);
    9320:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    9322:	f000 fc81 	bl	9c28 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9326:	e7f4      	b.n	9312 <enh_conn_complete+0x2a>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    9328:	462a      	mov	r2, r5
    932a:	2157      	movs	r1, #87	; 0x57
    932c:	4842      	ldr	r0, [pc, #264]	; (9438 <enh_conn_complete+0x150>)
    932e:	f01a ff85 	bl	2423c <printk>
		return;
    9332:	e7ee      	b.n	9312 <enh_conn_complete+0x2a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9334:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9336:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    933a:	3b02      	subs	r3, #2
    933c:	1d06      	adds	r6, r0, #4
    933e:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9340:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    9344:	4631      	mov	r1, r6
    9346:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    9348:	d82d      	bhi.n	93a6 <enh_conn_complete+0xbe>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    934a:	f01d f9e1 	bl	26710 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    934e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9352:	2206      	movs	r2, #6
    9354:	3b02      	subs	r3, #2
    9356:	f104 0111 	add.w	r1, r4, #17
    935a:	f10d 0001 	add.w	r0, sp, #1
    935e:	f88d 3008 	strb.w	r3, [sp, #8]
    9362:	f01c fefd 	bl	26160 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    9366:	2301      	movs	r3, #1
    9368:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    936c:	78e3      	ldrb	r3, [r4, #3]
    936e:	2b01      	cmp	r3, #1
    9370:	d10c      	bne.n	938c <enh_conn_complete+0xa4>
    9372:	a802      	add	r0, sp, #8
    9374:	f7fe fb50 	bl	7a18 <find_pending_connect.part.21>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9378:	78e3      	ldrb	r3, [r4, #3]
    937a:	2b01      	cmp	r3, #1
    937c:	4605      	mov	r5, r0
    937e:	d104      	bne.n	938a <enh_conn_complete+0xa2>
    9380:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9384:	482a      	ldr	r0, [pc, #168]	; (9430 <enh_conn_complete+0x148>)
    9386:	f01d f9e0 	bl	2674a <atomic_and>
	if (!conn) {
    938a:	b99d      	cbnz	r5, 93b4 <enh_conn_complete+0xcc>
		BT_ERR("No pending conn for peer %s",
    938c:	4630      	mov	r0, r6
    938e:	f7fd fdcf 	bl	6f30 <bt_addr_le_str_real>
    9392:	2145      	movs	r1, #69	; 0x45
    9394:	4602      	mov	r2, r0
    9396:	4829      	ldr	r0, [pc, #164]	; (943c <enh_conn_complete+0x154>)
    9398:	f01a ff50 	bl	2423c <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    939c:	211f      	movs	r1, #31
    939e:	4640      	mov	r0, r8
    93a0:	f01d fa11 	bl	267c6 <bt_hci_disconnect>
		return;
    93a4:	e7b5      	b.n	9312 <enh_conn_complete+0x2a>
		bt_addr_le_copy(&id_addr,
    93a6:	f01d f9b3 	bl	26710 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    93aa:	4631      	mov	r1, r6
    93ac:	4668      	mov	r0, sp
    93ae:	f01d f9af 	bl	26710 <bt_addr_le_copy>
    93b2:	e7db      	b.n	936c <enh_conn_complete+0x84>
	conn->handle = handle;
    93b4:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    93b6:	a902      	add	r1, sp, #8
	conn->handle = handle;
    93b8:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    93bc:	f01d f9a8 	bl	26710 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    93c0:	7e22      	ldrb	r2, [r4, #24]
    93c2:	7de3      	ldrb	r3, [r4, #23]
    93c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    93c8:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    93cc:	7ea2      	ldrb	r2, [r4, #26]
    93ce:	7e63      	ldrb	r3, [r4, #25]
    93d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    93d4:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    93d8:	7ee3      	ldrb	r3, [r4, #27]
    93da:	7f22      	ldrb	r2, [r4, #28]
    93dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    93e0:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    93e4:	78e3      	ldrb	r3, [r4, #3]
    93e6:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    93e8:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    93ea:	2b01      	cmp	r3, #1
	conn->err = 0U;
    93ec:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    93ee:	d116      	bne.n	941e <enh_conn_complete+0x136>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    93f0:	4669      	mov	r1, sp
    93f2:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    93f6:	f01d f98b 	bl	26710 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    93fa:	7a29      	ldrb	r1, [r5, #8]
    93fc:	4e10      	ldr	r6, [pc, #64]	; (9440 <enh_conn_complete+0x158>)
    93fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    9402:	4431      	add	r1, r6
    9404:	f105 0096 	add.w	r0, r5, #150	; 0x96
    9408:	f01d f982 	bl	26710 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    940c:	f8d6 10a4 	ldr.w	r1, [r6, #164]	; 0xa4
    9410:	4622      	mov	r2, r4
    9412:	f001 0340 	and.w	r3, r1, #64	; 0x40
    9416:	4313      	orrs	r3, r2
    9418:	d001      	beq.n	941e <enh_conn_complete+0x136>
			bt_le_adv_resume();
    941a:	f7ff ff2f 	bl	927c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    941e:	2107      	movs	r1, #7
    9420:	4628      	mov	r0, r5
    9422:	f000 fc35 	bl	9c90 <bt_conn_set_state>
	conn_auto_initiate(conn);
    9426:	4628      	mov	r0, r5
    9428:	f7fe fe94 	bl	8154 <conn_auto_initiate>
	bt_conn_unref(conn);
    942c:	4628      	mov	r0, r5
    942e:	e778      	b.n	9322 <enh_conn_complete+0x3a>
    9430:	200001e8 	.word	0x200001e8
    9434:	0002ce1c 	.word	0x0002ce1c
    9438:	0002ce3d 	.word	0x0002ce3d
    943c:	0002ce5b 	.word	0x0002ce5b
    9440:	200001c0 	.word	0x200001c0

00009444 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    9444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    9448:	4605      	mov	r5, r0
    944a:	4688      	mov	r8, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    944c:	4858      	ldr	r0, [pc, #352]	; (95b0 <bt_le_scan_start+0x16c>)
    944e:	2101      	movs	r1, #1
    9450:	f01d f99e 	bl	26790 <atomic_test_bit>
    9454:	2800      	cmp	r0, #0
    9456:	f000 80a7 	beq.w	95a8 <bt_le_scan_start+0x164>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    945a:	782a      	ldrb	r2, [r5, #0]
    945c:	2a01      	cmp	r2, #1
    945e:	d905      	bls.n	946c <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    9460:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    9464:	4620      	mov	r0, r4
    9466:	b003      	add	sp, #12
    9468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    946c:	686b      	ldr	r3, [r5, #4]
    946e:	f033 030f 	bics.w	r3, r3, #15
    9472:	d1f5      	bne.n	9460 <bt_le_scan_start+0x1c>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    9474:	8928      	ldrh	r0, [r5, #8]
    9476:	1f03      	subs	r3, r0, #4
    9478:	b29b      	uxth	r3, r3
    947a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    947e:	42a3      	cmp	r3, r4
    9480:	d8ee      	bhi.n	9460 <bt_le_scan_start+0x1c>
	if (param->window < 0x0004 || param->window > 0x4000) {
    9482:	8969      	ldrh	r1, [r5, #10]
    9484:	1f0b      	subs	r3, r1, #4
    9486:	b29b      	uxth	r3, r3
    9488:	42a3      	cmp	r3, r4
    948a:	d8e9      	bhi.n	9460 <bt_le_scan_start+0x1c>
	if (param->window > param->interval) {
    948c:	4288      	cmp	r0, r1
    948e:	d3e7      	bcc.n	9460 <bt_le_scan_start+0x1c>
	if (param->type && !bt_le_scan_random_addr_check()) {
    9490:	b942      	cbnz	r2, 94a4 <bt_le_scan_start+0x60>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    9492:	2106      	movs	r1, #6
    9494:	4846      	ldr	r0, [pc, #280]	; (95b0 <bt_le_scan_start+0x16c>)
    9496:	f01d f94d 	bl	26734 <atomic_test_and_set_bit>
    949a:	4603      	mov	r3, r0
    949c:	b138      	cbz	r0, 94ae <bt_le_scan_start+0x6a>
		return -EALREADY;
    949e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    94a2:	e7df      	b.n	9464 <bt_le_scan_start+0x20>
	if (param->type && !bt_le_scan_random_addr_check()) {
    94a4:	f7ff f8dc 	bl	8660 <bt_le_scan_random_addr_check>
    94a8:	2800      	cmp	r0, #0
    94aa:	d1f2      	bne.n	9492 <bt_le_scan_start+0x4e>
    94ac:	e7d8      	b.n	9460 <bt_le_scan_start+0x1c>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    94ae:	2105      	movs	r1, #5
    94b0:	483f      	ldr	r0, [pc, #252]	; (95b0 <bt_le_scan_start+0x16c>)
    94b2:	f01d f96d 	bl	26790 <atomic_test_bit>
    94b6:	b150      	cbz	r0, 94ce <bt_le_scan_start+0x8a>
	return set_le_scan_enable_legacy(enable);
    94b8:	4618      	mov	r0, r3
    94ba:	f7fe fefb 	bl	82b4 <set_le_scan_enable_legacy>
		if (err) {
    94be:	4604      	mov	r4, r0
    94c0:	b128      	cbz	r0, 94ce <bt_le_scan_start+0x8a>
    94c2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    94c6:	483a      	ldr	r0, [pc, #232]	; (95b0 <bt_le_scan_start+0x16c>)
    94c8:	f01d f93f 	bl	2674a <atomic_and>
		return err;
    94cc:	e7ca      	b.n	9464 <bt_le_scan_start+0x20>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    94ce:	686a      	ldr	r2, [r5, #4]
    94d0:	4e38      	ldr	r6, [pc, #224]	; (95b4 <bt_le_scan_start+0x170>)
    94d2:	f002 0201 	and.w	r2, r2, #1
    94d6:	2108      	movs	r1, #8
    94d8:	f106 0094 	add.w	r0, r6, #148	; 0x94
    94dc:	f01d f944 	bl	26768 <atomic_set_bit_to>
		if (param->timeout) {
    94e0:	89ac      	ldrh	r4, [r5, #12]
    94e2:	b144      	cbz	r4, 94f6 <bt_le_scan_start+0xb2>
    94e4:	f06f 0140 	mvn.w	r1, #64	; 0x40
    94e8:	f106 0094 	add.w	r0, r6, #148	; 0x94
    94ec:	f01d f92d 	bl	2674a <atomic_and>
			return -ENOTSUP;
    94f0:	f06f 0422 	mvn.w	r4, #34	; 0x22
    94f4:	e7b6      	b.n	9464 <bt_le_scan_start+0x20>
		err = start_le_scan_legacy(param->type, param->interval,
    94f6:	782f      	ldrb	r7, [r5, #0]
    94f8:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    94fc:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    94fe:	4621      	mov	r1, r4
    9500:	2207      	movs	r2, #7
    9502:	4668      	mov	r0, sp
    9504:	f01c fe56 	bl	261b4 <memset>
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    9508:	1e7b      	subs	r3, r7, #1
		*own_addr_type = bt_dev.id_addr[0].type;
    950a:	4630      	mov	r0, r6
	set_param.window = sys_cpu_to_le16(window);
    950c:	f8ad 5003 	strh.w	r5, [sp, #3]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    9510:	425d      	negs	r5, r3
    9512:	415d      	adcs	r5, r3
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    9514:	2106      	movs	r1, #6
		*own_addr_type = bt_dev.id_addr[0].type;
    9516:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    951a:	f88d 7000 	strb.w	r7, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    951e:	f8ad 9001 	strh.w	r9, [sp, #1]
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    9522:	f88d 4006 	strb.w	r4, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    9526:	f88d 3005 	strb.w	r3, [sp, #5]
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    952a:	f01d f931 	bl	26790 <atomic_test_bit>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    952e:	b9a0      	cbnz	r0, 955a <bt_le_scan_start+0x116>
			err = le_set_private_addr(BT_ID_DEFAULT);
    9530:	f01d f937 	bl	267a2 <le_adv_set_private_addr.isra.27>
			if (err) {
    9534:	4604      	mov	r4, r0
    9536:	b168      	cbz	r0, 9554 <bt_le_scan_start+0x110>
				if (active_scan || !is_adv_using_rand_addr()) {
    9538:	2f01      	cmp	r7, #1
    953a:	d0c2      	beq.n	94c2 <bt_le_scan_start+0x7e>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
    953c:	2106      	movs	r1, #6
    953e:	f106 0028 	add.w	r0, r6, #40	; 0x28
    9542:	f01d f925 	bl	26790 <atomic_test_bit>
				if (active_scan || !is_adv_using_rand_addr()) {
    9546:	2800      	cmp	r0, #0
    9548:	d0bb      	beq.n	94c2 <bt_le_scan_start+0x7e>
					BT_WARN("Ignoring failure to set "
    954a:	4622      	mov	r2, r4
    954c:	2157      	movs	r1, #87	; 0x57
    954e:	481a      	ldr	r0, [pc, #104]	; (95b8 <bt_le_scan_start+0x174>)
    9550:	f01a fe74 	bl	2423c <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9554:	2301      	movs	r3, #1
    9556:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    955a:	2107      	movs	r1, #7
    955c:	f242 000b 	movw	r0, #8203	; 0x200b
    9560:	f7fe fd0a 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    9564:	4604      	mov	r4, r0
    9566:	b1e0      	cbz	r0, 95a2 <bt_le_scan_start+0x15e>
    9568:	2207      	movs	r2, #7
    956a:	4669      	mov	r1, sp
    956c:	3008      	adds	r0, #8
    956e:	f020 fa16 	bl	2999e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    9572:	4621      	mov	r1, r4
    9574:	2200      	movs	r2, #0
    9576:	f242 000b 	movw	r0, #8203	; 0x200b
    957a:	f7fe fe39 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    957e:	4604      	mov	r4, r0
    9580:	2800      	cmp	r0, #0
    9582:	d19e      	bne.n	94c2 <bt_le_scan_start+0x7e>
	return set_le_scan_enable_legacy(enable);
    9584:	2001      	movs	r0, #1
    9586:	f7fe fe95 	bl	82b4 <set_le_scan_enable_legacy>
	if (err) {
    958a:	4604      	mov	r4, r0
    958c:	2800      	cmp	r0, #0
    958e:	d198      	bne.n	94c2 <bt_le_scan_start+0x7e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    9590:	462a      	mov	r2, r5
    9592:	2107      	movs	r1, #7
    9594:	4806      	ldr	r0, [pc, #24]	; (95b0 <bt_le_scan_start+0x16c>)
    9596:	f01d f8e7 	bl	26768 <atomic_set_bit_to>
	scan_dev_found_cb = cb;
    959a:	4b08      	ldr	r3, [pc, #32]	; (95bc <bt_le_scan_start+0x178>)
    959c:	f8c3 8000 	str.w	r8, [r3]
	return 0;
    95a0:	e760      	b.n	9464 <bt_le_scan_start+0x20>
		return -ENOBUFS;
    95a2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    95a6:	e78c      	b.n	94c2 <bt_le_scan_start+0x7e>
		return -EAGAIN;
    95a8:	f06f 040a 	mvn.w	r4, #10
    95ac:	e75a      	b.n	9464 <bt_le_scan_start+0x20>
    95ae:	bf00      	nop
    95b0:	20000254 	.word	0x20000254
    95b4:	200001c0 	.word	0x200001c0
    95b8:	0002cc7e 	.word	0x0002cc7e
    95bc:	200020a4 	.word	0x200020a4

000095c0 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    95c0:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    95c2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    95c6:	4807      	ldr	r0, [pc, #28]	; (95e4 <bt_le_scan_stop+0x24>)
    95c8:	f01d f8bf 	bl	2674a <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    95cc:	0643      	lsls	r3, r0, #25
    95ce:	d506      	bpl.n	95de <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    95d0:	4b05      	ldr	r3, [pc, #20]	; (95e8 <bt_le_scan_stop+0x28>)
    95d2:	2000      	movs	r0, #0
    95d4:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    95d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    95da:	f7ff b84b 	b.w	8674 <bt_le_scan_update>
}
    95de:	f06f 0044 	mvn.w	r0, #68	; 0x44
    95e2:	bd08      	pop	{r3, pc}
    95e4:	20000254 	.word	0x20000254
    95e8:	200020a4 	.word	0x200020a4

000095ec <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    95ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    95ee:	4e1b      	ldr	r6, [pc, #108]	; (965c <bt_pub_key_gen+0x70>)
    95f0:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
    95f4:	f003 0306 	and.w	r3, r3, #6
    95f8:	2b06      	cmp	r3, #6
    95fa:	d007      	beq.n	960c <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    95fc:	2157      	movs	r1, #87	; 0x57
    95fe:	4818      	ldr	r0, [pc, #96]	; (9660 <bt_pub_key_gen+0x74>)
    9600:	f01a fe1c 	bl	2423c <printk>
		return -ENOTSUP;
    9604:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    9608:	4620      	mov	r0, r4
    960a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    960c:	4f15      	ldr	r7, [pc, #84]	; (9664 <bt_pub_key_gen+0x78>)
    960e:	683b      	ldr	r3, [r7, #0]
    9610:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    9612:	6038      	str	r0, [r7, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9614:	2104      	movs	r1, #4
    9616:	f106 0094 	add.w	r0, r6, #148	; 0x94
    961a:	f01d f88b 	bl	26734 <atomic_test_and_set_bit>
    961e:	4605      	mov	r5, r0
    9620:	b9d0      	cbnz	r0, 9658 <bt_pub_key_gen+0x6c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9622:	f06f 0108 	mvn.w	r1, #8
    9626:	f106 0094 	add.w	r0, r6, #148	; 0x94
    962a:	f01d f88e 	bl	2674a <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    962e:	462a      	mov	r2, r5
    9630:	4629      	mov	r1, r5
    9632:	f242 0025 	movw	r0, #8229	; 0x2025
    9636:	f7fe fddb 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    963a:	4604      	mov	r4, r0
    963c:	2800      	cmp	r0, #0
    963e:	d0e3      	beq.n	9608 <bt_pub_key_gen+0x1c>
		BT_ERR("Sending LE P256 Public Key command failed");
    9640:	2145      	movs	r1, #69	; 0x45
    9642:	4809      	ldr	r0, [pc, #36]	; (9668 <bt_pub_key_gen+0x7c>)
    9644:	f01a fdfa 	bl	2423c <printk>
    9648:	f06f 0110 	mvn.w	r1, #16
    964c:	f106 0094 	add.w	r0, r6, #148	; 0x94
    9650:	f01d f87b 	bl	2674a <atomic_and>
		pub_key_cb = NULL;
    9654:	603d      	str	r5, [r7, #0]
		return err;
    9656:	e7d7      	b.n	9608 <bt_pub_key_gen+0x1c>
		return 0;
    9658:	2400      	movs	r4, #0
    965a:	e7d5      	b.n	9608 <bt_pub_key_gen+0x1c>
    965c:	200001c0 	.word	0x200001c0
    9660:	0002ccb9 	.word	0x0002ccb9
    9664:	20002094 	.word	0x20002094
    9668:	0002ccdd 	.word	0x0002ccdd

0000966c <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    966c:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    966e:	2103      	movs	r1, #3
    9670:	4803      	ldr	r0, [pc, #12]	; (9680 <bt_pub_key_get+0x14>)
    9672:	f01d f88d 	bl	26790 <atomic_test_bit>
    9676:	2800      	cmp	r0, #0
		return pub_key;
	}

	return NULL;
}
    9678:	4802      	ldr	r0, [pc, #8]	; (9684 <bt_pub_key_get+0x18>)
    967a:	bf08      	it	eq
    967c:	2000      	moveq	r0, #0
    967e:	bd08      	pop	{r3, pc}
    9680:	20000254 	.word	0x20000254
    9684:	20003645 	.word	0x20003645

00009688 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    9688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    968a:	4c1d      	ldr	r4, [pc, #116]	; (9700 <bt_dh_key_gen+0x78>)
    968c:	6822      	ldr	r2, [r4, #0]
    968e:	428a      	cmp	r2, r1
{
    9690:	4607      	mov	r7, r0
    9692:	460b      	mov	r3, r1
	if (dh_key_cb == cb) {
    9694:	d02d      	beq.n	96f2 <bt_dh_key_gen+0x6a>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9696:	b112      	cbz	r2, 969e <bt_dh_key_gen+0x16>
		return -EBUSY;
    9698:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    969c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    969e:	2104      	movs	r1, #4
    96a0:	4818      	ldr	r0, [pc, #96]	; (9704 <bt_dh_key_gen+0x7c>)
    96a2:	f01d f875 	bl	26790 <atomic_test_bit>
    96a6:	4606      	mov	r6, r0
    96a8:	2800      	cmp	r0, #0
    96aa:	d1f5      	bne.n	9698 <bt_dh_key_gen+0x10>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    96ac:	2103      	movs	r1, #3
    96ae:	4815      	ldr	r0, [pc, #84]	; (9704 <bt_dh_key_gen+0x7c>)
    96b0:	f01d f86e 	bl	26790 <atomic_test_bit>
    96b4:	b300      	cbz	r0, 96f8 <bt_dh_key_gen+0x70>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    96b6:	2140      	movs	r1, #64	; 0x40
    96b8:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    96bc:	6023      	str	r3, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    96be:	f7fe fc5b 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
    96c2:	4605      	mov	r5, r0
    96c4:	b918      	cbnz	r0, 96ce <bt_dh_key_gen+0x46>
		dh_key_cb = NULL;
    96c6:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    96c8:	f06f 0036 	mvn.w	r0, #54	; 0x36
    96cc:	e7e6      	b.n	969c <bt_dh_key_gen+0x14>
	return net_buf_simple_add(&buf->b, len);
    96ce:	2140      	movs	r1, #64	; 0x40
    96d0:	3008      	adds	r0, #8
    96d2:	f014 f861 	bl	1d798 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    96d6:	2240      	movs	r2, #64	; 0x40
    96d8:	4639      	mov	r1, r7
    96da:	f01c fd41 	bl	26160 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    96de:	4632      	mov	r2, r6
    96e0:	4629      	mov	r1, r5
    96e2:	f242 0026 	movw	r0, #8230	; 0x2026
    96e6:	f7fe fd83 	bl	81f0 <bt_hci_cmd_send_sync>
	if (err) {
    96ea:	2800      	cmp	r0, #0
    96ec:	d0d6      	beq.n	969c <bt_dh_key_gen+0x14>
		dh_key_cb = NULL;
    96ee:	6026      	str	r6, [r4, #0]
		return err;
    96f0:	e7d4      	b.n	969c <bt_dh_key_gen+0x14>
		return -EALREADY;
    96f2:	f06f 0044 	mvn.w	r0, #68	; 0x44
    96f6:	e7d1      	b.n	969c <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
    96f8:	f06f 0030 	mvn.w	r0, #48	; 0x30
    96fc:	e7ce      	b.n	969c <bt_dh_key_gen+0x14>
    96fe:	bf00      	nop
    9700:	20002090 	.word	0x20002090
    9704:	20000254 	.word	0x20000254

00009708 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    9708:	2300      	movs	r3, #0
{
    970a:	4601      	mov	r1, r0
	tx->user_data = NULL;
    970c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
    9710:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    9712:	4801      	ldr	r0, [pc, #4]	; (9718 <tx_free+0x10>)
    9714:	f020 bd86 	b.w	2a224 <k_queue_append>
    9718:	20000df4 	.word	0x20000df4

0000971c <notify_connected>:
{
    971c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    971e:	4b09      	ldr	r3, [pc, #36]	; (9744 <notify_connected+0x28>)
    9720:	681c      	ldr	r4, [r3, #0]
{
    9722:	4605      	mov	r5, r0
    9724:	7a69      	ldrb	r1, [r5, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
    9726:	b92c      	cbnz	r4, 9734 <notify_connected+0x18>
	if (!conn->err) {
    9728:	b951      	cbnz	r1, 9740 <notify_connected+0x24>
		bt_gatt_connected(conn);
    972a:	4628      	mov	r0, r5
}
    972c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    9730:	f003 b930 	b.w	c994 <bt_gatt_connected>
		if (cb->connected) {
    9734:	6823      	ldr	r3, [r4, #0]
    9736:	b10b      	cbz	r3, 973c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    9738:	4628      	mov	r0, r5
    973a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    973c:	6924      	ldr	r4, [r4, #16]
    973e:	e7f1      	b.n	9724 <notify_connected+0x8>
}
    9740:	bd38      	pop	{r3, r4, r5, pc}
    9742:	bf00      	nop
    9744:	200020a8 	.word	0x200020a8

00009748 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    9748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    974c:	4604      	mov	r4, r0
    974e:	460e      	mov	r6, r1
    9750:	4617      	mov	r7, r2
    9752:	4699      	mov	r9, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    9754:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
    9756:	f04f 33ff 	mov.w	r3, #4294967295
    975a:	f04f 32ff 	mov.w	r2, #4294967295
    975e:	484b      	ldr	r0, [pc, #300]	; (988c <send_frag+0x144>)
    9760:	f018 fbd0 	bl	21f04 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    9764:	7aa3      	ldrb	r3, [r4, #10]
    9766:	2b07      	cmp	r3, #7
    9768:	d14d      	bne.n	9806 <send_frag+0xbe>
	__asm__ volatile(
    976a:	f04f 0320 	mov.w	r3, #32
    976e:	f3ef 8211 	mrs	r2, BASEPRI
    9772:	f383 8811 	msr	BASEPRI, r3
    9776:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    977a:	2d00      	cmp	r5, #0
    977c:	d058      	beq.n	9830 <send_frag+0xe8>
	parent->next = child;
    977e:	2300      	movs	r3, #0
    9780:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    9782:	69a3      	ldr	r3, [r4, #24]
    9784:	2b00      	cmp	r3, #0
    9786:	d150      	bne.n	982a <send_frag+0xe2>
	list->head = node;
    9788:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    978c:	f382 8811 	msr	BASEPRI, r2
    9790:	f3bf 8f6f 	isb	sy
	switch (flags) {
    9794:	2f01      	cmp	r7, #1
    9796:	d002      	beq.n	979e <send_frag+0x56>
		flags = BT_ACL_START_NO_FLUSH;
    9798:	1efb      	subs	r3, r7, #3
    979a:	425f      	negs	r7, r3
    979c:	415f      	adcs	r7, r3
	return net_buf_simple_push(&buf->b, len);
    979e:	2104      	movs	r1, #4
    97a0:	f106 0008 	add.w	r0, r6, #8
    97a4:	f013 ffa0 	bl	1d6e8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    97a8:	8823      	ldrh	r3, [r4, #0]
    97aa:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    97ae:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    97b0:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    97b2:	3b04      	subs	r3, #4
    97b4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    97b6:	2302      	movs	r3, #2
    97b8:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    97ba:	4630      	mov	r0, r6
    97bc:	f01d f83e 	bl	2683c <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    97c0:	4602      	mov	r2, r0
    97c2:	2800      	cmp	r0, #0
    97c4:	d05e      	beq.n	9884 <send_frag+0x13c>
		BT_ERR("Unable to send to driver (err %d)", err);
    97c6:	2145      	movs	r1, #69	; 0x45
    97c8:	4831      	ldr	r0, [pc, #196]	; (9890 <send_frag+0x148>)
    97ca:	f01a fd37 	bl	2423c <printk>
	__asm__ volatile(
    97ce:	f04f 0320 	mov.w	r3, #32
    97d2:	f3ef 8711 	mrs	r7, BASEPRI
    97d6:	f383 8811 	msr	BASEPRI, r3
    97da:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    97de:	2d00      	cmp	r5, #0
    97e0:	d03c      	beq.n	985c <send_frag+0x114>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    97e2:	6963      	ldr	r3, [r4, #20]
    97e4:	2200      	movs	r2, #0
    97e6:	b153      	cbz	r3, 97fe <send_frag+0xb6>
    97e8:	429d      	cmp	r5, r3
    97ea:	d134      	bne.n	9856 <send_frag+0x10e>
Z_GENLIST_REMOVE(slist, snode)
    97ec:	682b      	ldr	r3, [r5, #0]
    97ee:	bb62      	cbnz	r2, 984a <send_frag+0x102>
    97f0:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    97f2:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    97f4:	4295      	cmp	r5, r2
    97f6:	d100      	bne.n	97fa <send_frag+0xb2>
	list->tail = node;
    97f8:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    97fa:	2300      	movs	r3, #0
    97fc:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    97fe:	f387 8811 	msr	BASEPRI, r7
    9802:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    9806:	4821      	ldr	r0, [pc, #132]	; (988c <send_frag+0x144>)
    9808:	f018 fb40 	bl	21e8c <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    980c:	b115      	cbz	r5, 9814 <send_frag+0xcc>
		tx_free(tx);
    980e:	4628      	mov	r0, r5
    9810:	f7ff ff7a 	bl	9708 <tx_free>
	}

	if (always_consume) {
    9814:	f1b9 0f00 	cmp.w	r9, #0
    9818:	d004      	beq.n	9824 <send_frag+0xdc>
		net_buf_unref(buf);
    981a:	4630      	mov	r0, r6
    981c:	f013 fea6 	bl	1d56c <net_buf_unref>
	}
	return false;
    9820:	f04f 0900 	mov.w	r9, #0
}
    9824:	4648      	mov	r0, r9
    9826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    982a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    982c:	61a5      	str	r5, [r4, #24]
    982e:	e7ad      	b.n	978c <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    9830:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    9832:	b133      	cbz	r3, 9842 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    9834:	f103 080c 	add.w	r8, r3, #12
    9838:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    983a:	3301      	adds	r3, #1
    983c:	f8c8 3000 	str.w	r3, [r8]
    9840:	e7a4      	b.n	978c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    9842:	f104 081c 	add.w	r8, r4, #28
    9846:	69e3      	ldr	r3, [r4, #28]
    9848:	e7f7      	b.n	983a <send_frag+0xf2>
	parent->next = child;
    984a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    984c:	69a3      	ldr	r3, [r4, #24]
    984e:	429d      	cmp	r5, r3
	list->tail = node;
    9850:	bf08      	it	eq
    9852:	61a2      	streq	r2, [r4, #24]
    9854:	e7d1      	b.n	97fa <send_frag+0xb2>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9856:	461a      	mov	r2, r3
    9858:	681b      	ldr	r3, [r3, #0]
    985a:	e7c4      	b.n	97e6 <send_frag+0x9e>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
    985c:	f8d8 3000 	ldr.w	r3, [r8]
    9860:	b953      	cbnz	r3, 9878 <send_frag+0x130>
    9862:	490c      	ldr	r1, [pc, #48]	; (9894 <send_frag+0x14c>)
    9864:	480c      	ldr	r0, [pc, #48]	; (9898 <send_frag+0x150>)
    9866:	f240 4292 	movw	r2, #1170	; 0x492
    986a:	f01a fce7 	bl	2423c <printk>
    986e:	f240 4192 	movw	r1, #1170	; 0x492
    9872:	4808      	ldr	r0, [pc, #32]	; (9894 <send_frag+0x14c>)
    9874:	f01a ff94 	bl	247a0 <assert_post_action>
			(*pending_no_cb)--;
    9878:	f8d8 3000 	ldr.w	r3, [r8]
    987c:	3b01      	subs	r3, #1
    987e:	f8c8 3000 	str.w	r3, [r8]
    9882:	e7bc      	b.n	97fe <send_frag+0xb6>
	return true;
    9884:	f04f 0901 	mov.w	r9, #1
    9888:	e7cc      	b.n	9824 <send_frag+0xdc>
    988a:	bf00      	nop
    988c:	20000288 	.word	0x20000288
    9890:	0002d06a 	.word	0x0002d06a
    9894:	0002d358 	.word	0x0002d358
    9898:	0002bced 	.word	0x0002bced

0000989c <bt_conn_get_pkts>:
}
    989c:	4800      	ldr	r0, [pc, #0]	; (98a0 <bt_conn_get_pkts+0x4>)
    989e:	4770      	bx	lr
    98a0:	20000288 	.word	0x20000288

000098a4 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    98a4:	1d03      	adds	r3, r0, #4
{
    98a6:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    98a8:	2109      	movs	r1, #9
{
    98aa:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    98ac:	4618      	mov	r0, r3
    98ae:	f01d f8a1 	bl	269f4 <atomic_test_bit>
    98b2:	b1c8      	cbz	r0, 98e8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    98b4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    98b8:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    98bc:	4291      	cmp	r1, r2
    98be:	d813      	bhi.n	98e8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    98c0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    98c4:	4291      	cmp	r1, r2
    98c6:	d30f      	bcc.n	98e8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    98c8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    98cc:	4291      	cmp	r1, r2
    98ce:	d10b      	bne.n	98e8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    98d0:	f3bf 8f5b 	dmb	ish
    98d4:	e853 2f00 	ldrex	r2, [r3]
    98d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    98dc:	e843 2100 	strex	r1, r2, [r3]
    98e0:	2900      	cmp	r1, #0
    98e2:	d1f7      	bne.n	98d4 <notify_le_param_updated+0x30>
    98e4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    98e8:	4b07      	ldr	r3, [pc, #28]	; (9908 <notify_le_param_updated+0x64>)
    98ea:	681d      	ldr	r5, [r3, #0]
    98ec:	b905      	cbnz	r5, 98f0 <notify_le_param_updated+0x4c>
}
    98ee:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    98f0:	68ee      	ldr	r6, [r5, #12]
    98f2:	b13e      	cbz	r6, 9904 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    98f4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    98f8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    98fc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    9900:	4620      	mov	r0, r4
    9902:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    9904:	692d      	ldr	r5, [r5, #16]
    9906:	e7f1      	b.n	98ec <notify_le_param_updated+0x48>
    9908:	200020a8 	.word	0x200020a8

0000990c <le_param_req>:
{
    990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    990e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    9910:	4608      	mov	r0, r1
{
    9912:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    9914:	f01c ff72 	bl	267fc <bt_le_conn_params_valid>
    9918:	4605      	mov	r5, r0
    991a:	b910      	cbnz	r0, 9922 <le_param_req+0x16>
		return false;
    991c:	2500      	movs	r5, #0
}
    991e:	4628      	mov	r0, r5
    9920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    9922:	4b09      	ldr	r3, [pc, #36]	; (9948 <le_param_req+0x3c>)
    9924:	681c      	ldr	r4, [r3, #0]
    9926:	2c00      	cmp	r4, #0
    9928:	d0f9      	beq.n	991e <le_param_req+0x12>
		if (!cb->le_param_req) {
    992a:	68a3      	ldr	r3, [r4, #8]
    992c:	b90b      	cbnz	r3, 9932 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    992e:	6924      	ldr	r4, [r4, #16]
    9930:	e7f9      	b.n	9926 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    9932:	4631      	mov	r1, r6
    9934:	4638      	mov	r0, r7
    9936:	4798      	blx	r3
    9938:	2800      	cmp	r0, #0
    993a:	d0ef      	beq.n	991c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    993c:	4630      	mov	r0, r6
    993e:	f01c ff5d 	bl	267fc <bt_le_conn_params_valid>
    9942:	2800      	cmp	r0, #0
    9944:	d1f3      	bne.n	992e <le_param_req+0x22>
    9946:	e7e9      	b.n	991c <le_param_req+0x10>
    9948:	200020a8 	.word	0x200020a8

0000994c <bt_conn_cb_register>:
	cb->_next = callback_list;
    994c:	4b02      	ldr	r3, [pc, #8]	; (9958 <bt_conn_cb_register+0xc>)
    994e:	681a      	ldr	r2, [r3, #0]
    9950:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    9952:	6018      	str	r0, [r3, #0]
}
    9954:	4770      	bx	lr
    9956:	bf00      	nop
    9958:	200020a8 	.word	0x200020a8

0000995c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    995c:	b570      	push	{r4, r5, r6, lr}
    995e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    9960:	f100 0634 	add.w	r6, r0, #52	; 0x34
    9964:	2200      	movs	r2, #0
    9966:	2300      	movs	r3, #0
    9968:	4630      	mov	r0, r6
    996a:	f013 fce5 	bl	1d338 <net_buf_get>
    996e:	4605      	mov	r5, r0
    9970:	bb28      	cbnz	r0, 99be <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
    9972:	6963      	ldr	r3, [r4, #20]
    9974:	b153      	cbz	r3, 998c <conn_cleanup+0x30>
    9976:	4916      	ldr	r1, [pc, #88]	; (99d0 <conn_cleanup+0x74>)
    9978:	4816      	ldr	r0, [pc, #88]	; (99d4 <conn_cleanup+0x78>)
    997a:	f240 520c 	movw	r2, #1292	; 0x50c
    997e:	f01a fc5d 	bl	2423c <printk>
    9982:	f240 510c 	movw	r1, #1292	; 0x50c
    9986:	4812      	ldr	r0, [pc, #72]	; (99d0 <conn_cleanup+0x74>)
    9988:	f01a ff0a 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
    998c:	69e3      	ldr	r3, [r4, #28]
    998e:	b153      	cbz	r3, 99a6 <conn_cleanup+0x4a>
    9990:	490f      	ldr	r1, [pc, #60]	; (99d0 <conn_cleanup+0x74>)
    9992:	4810      	ldr	r0, [pc, #64]	; (99d4 <conn_cleanup+0x78>)
    9994:	f240 520d 	movw	r2, #1293	; 0x50d
    9998:	f01a fc50 	bl	2423c <printk>
    999c:	f240 510d 	movw	r1, #1293	; 0x50d
    99a0:	480b      	ldr	r0, [pc, #44]	; (99d0 <conn_cleanup+0x74>)
    99a2:	f01a fefd 	bl	247a0 <assert_post_action>

	bt_conn_reset_rx_state(conn);
    99a6:	4620      	mov	r0, r4
    99a8:	f01d f82f 	bl	26a0a <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    99ac:	f104 0158 	add.w	r1, r4, #88	; 0x58
    99b0:	2200      	movs	r2, #0
    99b2:	2300      	movs	r3, #0
    99b4:	4808      	ldr	r0, [pc, #32]	; (99d8 <conn_cleanup+0x7c>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    99b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    99ba:	f018 bcd5 	b.w	22368 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    99be:	6968      	ldr	r0, [r5, #20]
    99c0:	b108      	cbz	r0, 99c6 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
    99c2:	f7ff fea1 	bl	9708 <tx_free>
		net_buf_unref(buf);
    99c6:	4628      	mov	r0, r5
    99c8:	f013 fdd0 	bl	1d56c <net_buf_unref>
    99cc:	e7ca      	b.n	9964 <conn_cleanup+0x8>
    99ce:	bf00      	nop
    99d0:	0002d358 	.word	0x0002d358
    99d4:	0002bced 	.word	0x0002bced
    99d8:	20001988 	.word	0x20001988

000099dc <bt_conn_recv>:
{
    99dc:	b570      	push	{r4, r5, r6, lr}
    99de:	4616      	mov	r6, r2
    99e0:	4604      	mov	r4, r0
    99e2:	460d      	mov	r5, r1
	tx_notify(conn);
    99e4:	f01c ffc5 	bl	26972 <tx_notify>
	switch (flags) {
    99e8:	2e01      	cmp	r6, #1
    99ea:	d022      	beq.n	9a32 <bt_conn_recv+0x56>
    99ec:	2e02      	cmp	r6, #2
    99ee:	d143      	bne.n	9a78 <bt_conn_recv+0x9c>
		if (conn->rx) {
    99f0:	6923      	ldr	r3, [r4, #16]
    99f2:	b133      	cbz	r3, 9a02 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
    99f4:	4827      	ldr	r0, [pc, #156]	; (9a94 <bt_conn_recv+0xb8>)
    99f6:	2145      	movs	r1, #69	; 0x45
    99f8:	f01a fc20 	bl	2423c <printk>
			bt_conn_reset_rx_state(conn);
    99fc:	4620      	mov	r0, r4
    99fe:	f01d f804 	bl	26a0a <bt_conn_reset_rx_state>
		conn->rx = buf;
    9a02:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    9a04:	6921      	ldr	r1, [r4, #16]
    9a06:	898a      	ldrh	r2, [r1, #12]
    9a08:	2a01      	cmp	r2, #1
    9a0a:	d942      	bls.n	9a92 <bt_conn_recv+0xb6>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    9a0c:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    9a0e:	7845      	ldrb	r5, [r0, #1]
    9a10:	7803      	ldrb	r3, [r0, #0]
    9a12:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    9a16:	3304      	adds	r3, #4
    9a18:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    9a1a:	4293      	cmp	r3, r2
    9a1c:	d839      	bhi.n	9a92 <bt_conn_recv+0xb6>
	if (conn->rx->len > acl_total_len) {
    9a1e:	d231      	bcs.n	9a84 <bt_conn_recv+0xa8>
		BT_ERR("ACL len mismatch (%u > %u)",
    9a20:	481d      	ldr	r0, [pc, #116]	; (9a98 <bt_conn_recv+0xbc>)
    9a22:	2145      	movs	r1, #69	; 0x45
    9a24:	f01a fc0a 	bl	2423c <printk>
		bt_conn_reset_rx_state(conn);
    9a28:	4620      	mov	r0, r4
}
    9a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    9a2e:	f01c bfec 	b.w	26a0a <bt_conn_reset_rx_state>
		if (!conn->rx) {
    9a32:	6920      	ldr	r0, [r4, #16]
    9a34:	b938      	cbnz	r0, 9a46 <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    9a36:	4819      	ldr	r0, [pc, #100]	; (9a9c <bt_conn_recv+0xc0>)
    9a38:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Not enough buffer space for L2CAP data");
    9a3a:	f01a fbff 	bl	2423c <printk>
			bt_conn_reset_rx_state(conn);
    9a3e:	4620      	mov	r0, r4
    9a40:	f01c ffe3 	bl	26a0a <bt_conn_reset_rx_state>
    9a44:	e001      	b.n	9a4a <bt_conn_recv+0x6e>
		if (!buf->len) {
    9a46:	89ae      	ldrh	r6, [r5, #12]
    9a48:	b926      	cbnz	r6, 9a54 <bt_conn_recv+0x78>
			net_buf_unref(buf);
    9a4a:	4628      	mov	r0, r5
}
    9a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    9a50:	f013 bd8c 	b.w	1d56c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    9a54:	3008      	adds	r0, #8
    9a56:	f01f ff9a 	bl	2998e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    9a5a:	42b0      	cmp	r0, r6
    9a5c:	d202      	bcs.n	9a64 <bt_conn_recv+0x88>
			BT_ERR("Not enough buffer space for L2CAP data");
    9a5e:	2145      	movs	r1, #69	; 0x45
    9a60:	480f      	ldr	r0, [pc, #60]	; (9aa0 <bt_conn_recv+0xc4>)
    9a62:	e7ea      	b.n	9a3a <bt_conn_recv+0x5e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9a64:	6920      	ldr	r0, [r4, #16]
    9a66:	89aa      	ldrh	r2, [r5, #12]
    9a68:	68a9      	ldr	r1, [r5, #8]
    9a6a:	3008      	adds	r0, #8
    9a6c:	f01f ff97 	bl	2999e <net_buf_simple_add_mem>
		net_buf_unref(buf);
    9a70:	4628      	mov	r0, r5
    9a72:	f013 fd7b 	bl	1d56c <net_buf_unref>
		break;
    9a76:	e7c5      	b.n	9a04 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    9a78:	4632      	mov	r2, r6
    9a7a:	2145      	movs	r1, #69	; 0x45
    9a7c:	4809      	ldr	r0, [pc, #36]	; (9aa4 <bt_conn_recv+0xc8>)
    9a7e:	f01a fbdd 	bl	2423c <printk>
		bt_conn_reset_rx_state(conn);
    9a82:	e7dc      	b.n	9a3e <bt_conn_recv+0x62>
	conn->rx = NULL;
    9a84:	2300      	movs	r3, #0
    9a86:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
    9a88:	4620      	mov	r0, r4
}
    9a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    9a8e:	f000 bcf7 	b.w	a480 <bt_l2cap_recv>
}
    9a92:	bd70      	pop	{r4, r5, r6, pc}
    9a94:	0002d1e5 	.word	0x0002d1e5
    9a98:	0002d279 	.word	0x0002d279
    9a9c:	0002d207 	.word	0x0002d207
    9aa0:	0002d22a 	.word	0x0002d22a
    9aa4:	0002d256 	.word	0x0002d256

00009aa8 <bt_conn_send_cb>:
{
    9aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9aac:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    9aae:	7a83      	ldrb	r3, [r0, #10]
    9ab0:	2b07      	cmp	r3, #7
{
    9ab2:	4606      	mov	r6, r0
    9ab4:	460d      	mov	r5, r1
    9ab6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    9ab8:	d009      	beq.n	9ace <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
    9aba:	4821      	ldr	r0, [pc, #132]	; (9b40 <bt_conn_send_cb+0x98>)
    9abc:	2145      	movs	r1, #69	; 0x45
    9abe:	f01a fbbd 	bl	2423c <printk>
		net_buf_unref(buf);
    9ac2:	4628      	mov	r0, r5
    9ac4:	f013 fd52 	bl	1d56c <net_buf_unref>
			return -ENOTCONN;
    9ac8:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9acc:	e01a      	b.n	9b04 <bt_conn_send_cb+0x5c>
	if (cb) {
    9ace:	2a00      	cmp	r2, #0
    9ad0:	d034      	beq.n	9b3c <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
    9ad2:	f018 f9d5 	bl	21e80 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    9ad6:	4b1b      	ldr	r3, [pc, #108]	; (9b44 <bt_conn_send_cb+0x9c>)
    9ad8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    9ada:	481b      	ldr	r0, [pc, #108]	; (9b48 <bt_conn_send_cb+0xa0>)
    9adc:	bf07      	ittee	eq
    9ade:	2200      	moveq	r2, #0
    9ae0:	2300      	moveq	r3, #0
    9ae2:	f04f 32ff 	movne.w	r2, #4294967295
    9ae6:	f04f 33ff 	movne.w	r3, #4294967295
    9aea:	f017 f941 	bl	20d70 <z_impl_k_queue_get>
    9aee:	4604      	mov	r4, r0
		if (!tx) {
    9af0:	b950      	cbnz	r0, 9b08 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
    9af2:	2145      	movs	r1, #69	; 0x45
    9af4:	4815      	ldr	r0, [pc, #84]	; (9b4c <bt_conn_send_cb+0xa4>)
    9af6:	f01a fba1 	bl	2423c <printk>
			net_buf_unref(buf);
    9afa:	4628      	mov	r0, r5
    9afc:	f013 fd36 	bl	1d56c <net_buf_unref>
			return -ENOBUFS;
    9b00:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    9b08:	7ab3      	ldrb	r3, [r6, #10]
    9b0a:	2b07      	cmp	r3, #7
    9b0c:	d00a      	beq.n	9b24 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
    9b0e:	2157      	movs	r1, #87	; 0x57
    9b10:	480f      	ldr	r0, [pc, #60]	; (9b50 <bt_conn_send_cb+0xa8>)
    9b12:	f01a fb93 	bl	2423c <printk>
			net_buf_unref(buf);
    9b16:	4628      	mov	r0, r5
    9b18:	f013 fd28 	bl	1d56c <net_buf_unref>
			tx_free(tx);
    9b1c:	4620      	mov	r0, r4
    9b1e:	f7ff fdf3 	bl	9708 <tx_free>
    9b22:	e7d1      	b.n	9ac8 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
    9b24:	2300      	movs	r3, #0
		tx->user_data = user_data;
    9b26:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    9b2a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    9b2c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    9b2e:	f106 0034 	add.w	r0, r6, #52	; 0x34
    9b32:	4629      	mov	r1, r5
    9b34:	f013 fcec 	bl	1d510 <net_buf_put>
	return 0;
    9b38:	2000      	movs	r0, #0
    9b3a:	e7e3      	b.n	9b04 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
    9b3c:	616a      	str	r2, [r5, #20]
    9b3e:	e7f6      	b.n	9b2e <bt_conn_send_cb+0x86>
    9b40:	0002d299 	.word	0x0002d299
    9b44:	200019a8 	.word	0x200019a8
    9b48:	20000df4 	.word	0x20000df4
    9b4c:	0002d2ad 	.word	0x0002d2ad
    9b50:	0002d2d0 	.word	0x0002d2d0

00009b54 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    9b54:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    9b56:	4b1b      	ldr	r3, [pc, #108]	; (9bc4 <bt_conn_prepare_events+0x70>)
    9b58:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    9b5a:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    9b5c:	609a      	str	r2, [r3, #8]
{
    9b5e:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    9b60:	f019 f9a4 	bl	22eac <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9b64:	f3bf 8f5b 	dmb	ish
    9b68:	4b17      	ldr	r3, [pc, #92]	; (9bc8 <bt_conn_prepare_events+0x74>)
    9b6a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    9b6e:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    9b72:	f104 0014 	add.w	r0, r4, #20
    9b76:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    9b78:	b90a      	cbnz	r2, 9b7e <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
    9b7a:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    9b7c:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    9b7e:	7a9a      	ldrb	r2, [r3, #10]
    9b80:	b99a      	cbnz	r2, 9baa <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9b82:	f3bf 8f5b 	dmb	ish
    9b86:	1d1a      	adds	r2, r3, #4
    9b88:	e852 5f00 	ldrex	r5, [r2]
    9b8c:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    9b90:	e842 ce00 	strex	lr, ip, [r2]
    9b94:	f1be 0f00 	cmp.w	lr, #0
    9b98:	d1f6      	bne.n	9b88 <bt_conn_prepare_events+0x34>
    9b9a:	f3bf 8f5b 	dmb	ish
    9b9e:	066a      	lsls	r2, r5, #25
    9ba0:	d503      	bpl.n	9baa <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
    9ba2:	4618      	mov	r0, r3
    9ba4:	f7ff feda 	bl	995c <conn_cleanup>
    9ba8:	e7e7      	b.n	9b7a <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
    9baa:	7a8b      	ldrb	r3, [r1, #10]
    9bac:	2b07      	cmp	r3, #7
    9bae:	d1e4      	bne.n	9b7a <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
    9bb0:	4b06      	ldr	r3, [pc, #24]	; (9bcc <bt_conn_prepare_events+0x78>)
    9bb2:	2200      	movs	r2, #0
    9bb4:	2104      	movs	r1, #4
    9bb6:	f019 f979 	bl	22eac <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    9bba:	2301      	movs	r3, #1
    9bbc:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    9bc0:	2002      	movs	r0, #2
	return ev_count;
    9bc2:	e7db      	b.n	9b7c <bt_conn_prepare_events+0x28>
    9bc4:	20000594 	.word	0x20000594
    9bc8:	200010b0 	.word	0x200010b0
    9bcc:	200010e4 	.word	0x200010e4

00009bd0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    9bd0:	b570      	push	{r4, r5, r6, lr}
    9bd2:	4606      	mov	r6, r0
    9bd4:	460d      	mov	r5, r1
    9bd6:	4810      	ldr	r0, [pc, #64]	; (9c18 <bt_conn_add_le+0x48>)
    9bd8:	2101      	movs	r1, #1
    9bda:	f01c fea5 	bl	26928 <bt_conn_new.part.10>
	if (!conn) {
    9bde:	4604      	mov	r4, r0
    9be0:	b1b8      	cbz	r0, 9c12 <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    9be2:	2230      	movs	r2, #48	; 0x30
    9be4:	2100      	movs	r1, #0
    9be6:	3058      	adds	r0, #88	; 0x58
    9be8:	f01c fae4 	bl	261b4 <memset>
    9bec:	4b0b      	ldr	r3, [pc, #44]	; (9c1c <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    9bee:	4a0c      	ldr	r2, [pc, #48]	; (9c20 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    9bf0:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    9bf2:	2300      	movs	r3, #0
    9bf4:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    9bf8:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    9bfa:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
    9bfc:	2207      	movs	r2, #7
    9bfe:	4629      	mov	r1, r5
    9c00:	f104 0088 	add.w	r0, r4, #136	; 0x88
    9c04:	f01c faac 	bl	26160 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    9c08:	2301      	movs	r3, #1
    9c0a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    9c0c:	4b05      	ldr	r3, [pc, #20]	; (9c24 <bt_conn_add_le+0x54>)
    9c0e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    9c12:	4620      	mov	r0, r4
    9c14:	bd70      	pop	{r4, r5, r6, pc}
    9c16:	bf00      	nop
    9c18:	200010b0 	.word	0x200010b0
    9c1c:	00009fbd 	.word	0x00009fbd
    9c20:	000269b9 	.word	0x000269b9
    9c24:	00280018 	.word	0x00280018

00009c28 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
    9c28:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
    9c2a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
{
    9c2e:	4604      	mov	r4, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    9c30:	f3bf 8f5b 	dmb	ish
    9c34:	e853 2f00 	ldrex	r2, [r3]
    9c38:	1e51      	subs	r1, r2, #1
    9c3a:	e843 1000 	strex	r0, r1, [r3]
    9c3e:	2800      	cmp	r0, #0
    9c40:	d1f8      	bne.n	9c34 <bt_conn_unref+0xc>
    9c42:	f3bf 8f5b 	dmb	ish

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
    9c46:	2a00      	cmp	r2, #0
    9c48:	dc0a      	bgt.n	9c60 <bt_conn_unref+0x38>
    9c4a:	490b      	ldr	r1, [pc, #44]	; (9c78 <bt_conn_unref+0x50>)
    9c4c:	480b      	ldr	r0, [pc, #44]	; (9c7c <bt_conn_unref+0x54>)
    9c4e:	f240 7265 	movw	r2, #1893	; 0x765
    9c52:	f01a faf3 	bl	2423c <printk>
    9c56:	f240 7165 	movw	r1, #1893	; 0x765
    9c5a:	4807      	ldr	r0, [pc, #28]	; (9c78 <bt_conn_unref+0x50>)
    9c5c:	f01a fda0 	bl	247a0 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9c60:	f3bf 8f5b 	dmb	ish
    9c64:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    9c68:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9c6c:	b91b      	cbnz	r3, 9c76 <bt_conn_unref+0x4e>
	    atomic_get(&conn->ref) == 0) {
		bt_le_adv_resume();
	}
}
    9c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
    9c72:	f7ff bb03 	b.w	927c <bt_le_adv_resume>
}
    9c76:	bd10      	pop	{r4, pc}
    9c78:	0002d358 	.word	0x0002d358
    9c7c:	0002bced 	.word	0x0002bced

00009c80 <bt_conn_lookup_handle>:
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    9c80:	4602      	mov	r2, r0
    9c82:	2101      	movs	r1, #1
    9c84:	4801      	ldr	r0, [pc, #4]	; (9c8c <bt_conn_lookup_handle+0xc>)
    9c86:	f01c beeb 	b.w	26a60 <conn_lookup_handle>
    9c8a:	bf00      	nop
    9c8c:	200010b0 	.word	0x200010b0

00009c90 <bt_conn_set_state>:
{
    9c90:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    9c92:	7a85      	ldrb	r5, [r0, #10]
    9c94:	428d      	cmp	r5, r1
{
    9c96:	4604      	mov	r4, r0
    9c98:	460e      	mov	r6, r1
	if (conn->state == state) {
    9c9a:	d10b      	bne.n	9cb4 <bt_conn_set_state+0x24>
	switch (state) {
    9c9c:	2d08      	cmp	r5, #8
    9c9e:	bf96      	itet	ls
    9ca0:	4b5e      	ldrls	r3, [pc, #376]	; (9e1c <bt_conn_set_state+0x18c>)
	if (conn->state == state) {
    9ca2:	4a5f      	ldrhi	r2, [pc, #380]	; (9e20 <bt_conn_set_state+0x190>)
    9ca4:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    9ca8:	485e      	ldr	r0, [pc, #376]	; (9e24 <bt_conn_set_state+0x194>)
    9caa:	2157      	movs	r1, #87	; 0x57
}
    9cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    9cb0:	f01a bac4 	b.w	2423c <printk>
	conn->state = state;
    9cb4:	72a1      	strb	r1, [r4, #10]
	switch (old_state) {
    9cb6:	b90d      	cbnz	r5, 9cbc <bt_conn_set_state+0x2c>
		bt_conn_ref(conn);
    9cb8:	f01c fed0 	bl	26a5c <bt_conn_ref>
	switch (conn->state) {
    9cbc:	7aa3      	ldrb	r3, [r4, #10]
    9cbe:	2b08      	cmp	r3, #8
    9cc0:	f200 80a7 	bhi.w	9e12 <bt_conn_set_state+0x182>
    9cc4:	e8df f003 	tbb	[pc, r3]
    9cc8:	a9a9053e 	.word	0xa9a9053e
    9ccc:	1ca9a9a9 	.word	0x1ca9a9a9
    9cd0:	a9          	.byte	0xa9
    9cd1:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    9cd2:	4d55      	ldr	r5, [pc, #340]	; (9e28 <bt_conn_set_state+0x198>)
		tx->pending_no_cb = 0U;
    9cd4:	2600      	movs	r6, #0
	__asm__ volatile(
    9cd6:	f04f 0320 	mov.w	r3, #32
    9cda:	f3ef 8211 	mrs	r2, BASEPRI
    9cde:	f383 8811 	msr	BASEPRI, r3
    9ce2:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    9ce6:	69e3      	ldr	r3, [r4, #28]
    9ce8:	2b00      	cmp	r3, #0
    9cea:	d073      	beq.n	9dd4 <bt_conn_set_state+0x144>
			conn->pending_no_cb--;
    9cec:	3b01      	subs	r3, #1
    9cee:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    9cf0:	f382 8811 	msr	BASEPRI, r2
    9cf4:	f3bf 8f6f 	isb	sy
    9cf8:	4628      	mov	r0, r5
    9cfa:	f018 f8c7 	bl	21e8c <z_impl_k_sem_give>
    9cfe:	e7ea      	b.n	9cd6 <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
    9d00:	78a3      	ldrb	r3, [r4, #2]
    9d02:	2b04      	cmp	r3, #4
    9d04:	f000 8089 	beq.w	9e1a <bt_conn_set_state+0x18a>
	z_impl_k_queue_init(queue);
    9d08:	f104 0034 	add.w	r0, r4, #52	; 0x34
    9d0c:	f020 fa7d 	bl	2a20a <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
    9d10:	2100      	movs	r1, #0
    9d12:	4846      	ldr	r0, [pc, #280]	; (9e2c <bt_conn_set_state+0x19c>)
    9d14:	f019 f9da 	bl	230cc <z_impl_k_poll_signal_raise>
	list->head = NULL;
    9d18:	2300      	movs	r3, #0
	list->tail = NULL;
    9d1a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		bt_l2cap_connected(conn);
    9d1e:	4620      	mov	r0, r4
    9d20:	f000 faee 	bl	a300 <bt_l2cap_connected>
		notify_connected(conn);
    9d24:	4620      	mov	r0, r4
    9d26:	f7ff fcf9 	bl	971c <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9d2a:	78e3      	ldrb	r3, [r4, #3]
    9d2c:	2b01      	cmp	r3, #1
    9d2e:	d174      	bne.n	9e1a <bt_conn_set_state+0x18a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9d30:	f104 0158 	add.w	r1, r4, #88	; 0x58
    9d34:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    9d38:	2300      	movs	r3, #0
    9d3a:	483d      	ldr	r0, [pc, #244]	; (9e30 <bt_conn_set_state+0x1a0>)
}
    9d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9d40:	f018 bb12 	b.w	22368 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    9d44:	78a3      	ldrb	r3, [r4, #2]
    9d46:	2b04      	cmp	r3, #4
    9d48:	d104      	bne.n	9d54 <bt_conn_set_state+0xc4>
			bt_conn_unref(conn);
    9d4a:	4620      	mov	r0, r4
}
    9d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    9d50:	f7ff bf6a 	b.w	9c28 <bt_conn_unref>
		switch (old_state) {
    9d54:	2d08      	cmp	r5, #8
    9d56:	d860      	bhi.n	9e1a <bt_conn_set_state+0x18a>
    9d58:	a301      	add	r3, pc, #4	; (adr r3, 9d60 <bt_conn_set_state+0xd0>)
    9d5a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    9d5e:	bf00      	nop
    9d60:	00009dcd 	.word	0x00009dcd
    9d64:	00009d85 	.word	0x00009d85
    9d68:	00009dbf 	.word	0x00009dbf
    9d6c:	00009d4b 	.word	0x00009d4b
    9d70:	00009d4b 	.word	0x00009d4b
    9d74:	00009dbf 	.word	0x00009dbf
    9d78:	00009dbf 	.word	0x00009dbf
    9d7c:	00009dcd 	.word	0x00009dcd
    9d80:	00009dcd 	.word	0x00009dcd
			tx_notify(conn);
    9d84:	4620      	mov	r0, r4
    9d86:	f01c fdf4 	bl	26972 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    9d8a:	78a3      	ldrb	r3, [r4, #2]
    9d8c:	2b01      	cmp	r3, #1
    9d8e:	d103      	bne.n	9d98 <bt_conn_set_state+0x108>
				k_delayed_work_cancel(&conn->deferred_work);
    9d90:	f104 0058 	add.w	r0, r4, #88	; 0x58
    9d94:	f018 fb58 	bl	22448 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9d98:	f3bf 8f5b 	dmb	ish
    9d9c:	3404      	adds	r4, #4
    9d9e:	e854 3f00 	ldrex	r3, [r4]
    9da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9da6:	e844 3200 	strex	r2, r3, [r4]
    9daa:	2a00      	cmp	r2, #0
    9dac:	d1f7      	bne.n	9d9e <bt_conn_set_state+0x10e>
    9dae:	f3bf 8f5b 	dmb	ish
    9db2:	2100      	movs	r1, #0
    9db4:	481d      	ldr	r0, [pc, #116]	; (9e2c <bt_conn_set_state+0x19c>)
}
    9db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9dba:	f019 b987 	b.w	230cc <z_impl_k_poll_signal_raise>
			if (conn->err) {
    9dbe:	7a63      	ldrb	r3, [r4, #9]
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d0c2      	beq.n	9d4a <bt_conn_set_state+0xba>
				notify_connected(conn);
    9dc4:	4620      	mov	r0, r4
    9dc6:	f7ff fca9 	bl	971c <notify_connected>
    9dca:	e7be      	b.n	9d4a <bt_conn_set_state+0xba>
			BT_WARN("Invalid (%u) old state", state);
    9dcc:	4632      	mov	r2, r6
    9dce:	2157      	movs	r1, #87	; 0x57
    9dd0:	4818      	ldr	r0, [pc, #96]	; (9e34 <bt_conn_set_state+0x1a4>)
    9dd2:	e76b      	b.n	9cac <bt_conn_set_state+0x1c>
Z_GENLIST_IS_EMPTY(slist)
    9dd4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    9dd6:	b128      	cbz	r0, 9de4 <bt_conn_set_state+0x154>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9dd8:	69a1      	ldr	r1, [r4, #24]
    9dda:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    9ddc:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9dde:	4288      	cmp	r0, r1
	list->tail = node;
    9de0:	bf08      	it	eq
    9de2:	61a3      	streq	r3, [r4, #24]
    9de4:	f382 8811 	msr	BASEPRI, r2
    9de8:	f3bf 8f6f 	isb	sy
		if (!node) {
    9dec:	b1a8      	cbz	r0, 9e1a <bt_conn_set_state+0x18a>
	__asm__ volatile(
    9dee:	f04f 0220 	mov.w	r2, #32
    9df2:	f3ef 8311 	mrs	r3, BASEPRI
    9df6:	f382 8811 	msr	BASEPRI, r2
    9dfa:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    9dfe:	68c2      	ldr	r2, [r0, #12]
    9e00:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    9e02:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    9e04:	f383 8811 	msr	BASEPRI, r3
    9e08:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    9e0c:	f7ff fc7c 	bl	9708 <tx_free>
    9e10:	e772      	b.n	9cf8 <bt_conn_set_state+0x68>
		BT_WARN("no valid (%u) state was set", state);
    9e12:	4632      	mov	r2, r6
    9e14:	2157      	movs	r1, #87	; 0x57
    9e16:	4808      	ldr	r0, [pc, #32]	; (9e38 <bt_conn_set_state+0x1a8>)
    9e18:	e748      	b.n	9cac <bt_conn_set_state+0x1c>
}
    9e1a:	bd70      	pop	{r4, r5, r6, pc}
    9e1c:	0002af84 	.word	0x0002af84
    9e20:	0002d2fb 	.word	0x0002d2fb
    9e24:	0002d305 	.word	0x0002d305
    9e28:	20000288 	.word	0x20000288
    9e2c:	20000594 	.word	0x20000594
    9e30:	20001988 	.word	0x20001988
    9e34:	0002d31b 	.word	0x0002d31b
    9e38:	0002d337 	.word	0x0002d337

00009e3c <bt_conn_lookup_addr_le.part.13>:
struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
    9e3c:	b570      	push	{r4, r5, r6, lr}
    9e3e:	4605      	mov	r5, r0
    9e40:	480c      	ldr	r0, [pc, #48]	; (9e74 <bt_conn_lookup_addr_le.part.13+0x38>)
    9e42:	460e      	mov	r6, r1
    9e44:	f01c fdbb 	bl	269be <bt_conn_ref.part.12>
		if (!conn) {
    9e48:	4604      	mov	r4, r0
    9e4a:	b128      	cbz	r0, 9e58 <bt_conn_lookup_addr_le.part.13+0x1c>
		if (conn->type != BT_CONN_TYPE_LE) {
    9e4c:	7883      	ldrb	r3, [r0, #2]
    9e4e:	2b01      	cmp	r3, #1
    9e50:	d004      	beq.n	9e5c <bt_conn_lookup_addr_le.part.13+0x20>
			bt_conn_unref(conn);
    9e52:	f7ff fee9 	bl	9c28 <bt_conn_unref>
	return NULL;
    9e56:	2400      	movs	r4, #0
}
    9e58:	4620      	mov	r0, r4
    9e5a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    9e5c:	4629      	mov	r1, r5
    9e5e:	4632      	mov	r2, r6
    9e60:	f01c fddc 	bl	26a1c <bt_conn_is_peer_addr_le>
    9e64:	4605      	mov	r5, r0
    9e66:	2800      	cmp	r0, #0
    9e68:	d1f6      	bne.n	9e58 <bt_conn_lookup_addr_le.part.13+0x1c>
			bt_conn_unref(conn);
    9e6a:	4620      	mov	r0, r4
    9e6c:	f7ff fedc 	bl	9c28 <bt_conn_unref>
	return NULL;
    9e70:	462c      	mov	r4, r5
    9e72:	e7f1      	b.n	9e58 <bt_conn_lookup_addr_le.part.13+0x1c>
    9e74:	200010b0 	.word	0x200010b0

00009e78 <bt_conn_exists_le>:
{
    9e78:	b510      	push	{r4, lr}
    9e7a:	f7ff ffdf 	bl	9e3c <bt_conn_lookup_addr_le.part.13>
	if (conn) {
    9e7e:	4604      	mov	r4, r0
    9e80:	b170      	cbz	r0, 9ea0 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
    9e82:	7a83      	ldrb	r3, [r0, #10]
    9e84:	4807      	ldr	r0, [pc, #28]	; (9ea4 <bt_conn_exists_le+0x2c>)
    9e86:	2b08      	cmp	r3, #8
    9e88:	bf96      	itet	ls
    9e8a:	4a07      	ldrls	r2, [pc, #28]	; (9ea8 <bt_conn_exists_le+0x30>)
    9e8c:	4a07      	ldrhi	r2, [pc, #28]	; (9eac <bt_conn_exists_le+0x34>)
    9e8e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
    9e92:	2157      	movs	r1, #87	; 0x57
    9e94:	f01a f9d2 	bl	2423c <printk>
		bt_conn_unref(conn);
    9e98:	4620      	mov	r0, r4
    9e9a:	f7ff fec5 	bl	9c28 <bt_conn_unref>
		return true;
    9e9e:	2001      	movs	r0, #1
}
    9ea0:	bd10      	pop	{r4, pc}
    9ea2:	bf00      	nop
    9ea4:	0002d1bd 	.word	0x0002d1bd
    9ea8:	0002af84 	.word	0x0002af84
    9eac:	0002d2fb 	.word	0x0002d2fb

00009eb0 <bt_conn_lookup_state_le>:
{
    9eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9eb2:	4605      	mov	r5, r0
    9eb4:	480f      	ldr	r0, [pc, #60]	; (9ef4 <bt_conn_lookup_state_le+0x44>)
    9eb6:	460e      	mov	r6, r1
    9eb8:	4617      	mov	r7, r2
    9eba:	f01c fd80 	bl	269be <bt_conn_ref.part.12>
		if (!conn) {
    9ebe:	4604      	mov	r4, r0
    9ec0:	b1b0      	cbz	r0, 9ef0 <bt_conn_lookup_state_le+0x40>
		if (conn->type != BT_CONN_TYPE_LE) {
    9ec2:	7883      	ldrb	r3, [r0, #2]
    9ec4:	2b01      	cmp	r3, #1
    9ec6:	d003      	beq.n	9ed0 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    9ec8:	f01c fdc8 	bl	26a5c <bt_conn_ref>
	return NULL;
    9ecc:	2400      	movs	r4, #0
			continue;
    9ece:	e00f      	b.n	9ef0 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    9ed0:	b146      	cbz	r6, 9ee4 <bt_conn_lookup_state_le+0x34>
    9ed2:	4632      	mov	r2, r6
    9ed4:	4629      	mov	r1, r5
    9ed6:	f01c fda1 	bl	26a1c <bt_conn_is_peer_addr_le>
    9eda:	b918      	cbnz	r0, 9ee4 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    9edc:	4620      	mov	r0, r4
    9ede:	f7ff fea3 	bl	9c28 <bt_conn_unref>
    9ee2:	e7f3      	b.n	9ecc <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    9ee4:	7aa3      	ldrb	r3, [r4, #10]
    9ee6:	42bb      	cmp	r3, r7
    9ee8:	d1f8      	bne.n	9edc <bt_conn_lookup_state_le+0x2c>
    9eea:	7a23      	ldrb	r3, [r4, #8]
    9eec:	42ab      	cmp	r3, r5
    9eee:	d1f5      	bne.n	9edc <bt_conn_lookup_state_le+0x2c>
}
    9ef0:	4620      	mov	r0, r4
    9ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ef4:	200010b0 	.word	0x200010b0

00009ef8 <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
    9ef8:	b538      	push	{r3, r4, r5, lr}
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
    9efa:	7a83      	ldrb	r3, [r0, #10]
    9efc:	3b02      	subs	r3, #2
{
    9efe:	4604      	mov	r4, r0
    9f00:	460d      	mov	r5, r1
	switch (conn->state) {
    9f02:	2b06      	cmp	r3, #6
    9f04:	d805      	bhi.n	9f12 <bt_conn_disconnect+0x1a>
    9f06:	e8df f003 	tbb	[pc, r3]
    9f0a:	0408      	.short	0x0408
    9f0c:	1b0c0e04 	.word	0x1b0c0e04
    9f10:	0c          	.byte	0x0c
    9f11:	00          	.byte	0x00
		return conn_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    9f12:	f06f 0538 	mvn.w	r5, #56	; 0x38
	}
}
    9f16:	4628      	mov	r0, r5
    9f18:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    9f1a:	7261      	strb	r1, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9f1c:	2100      	movs	r1, #0
    9f1e:	f7ff feb7 	bl	9c90 <bt_conn_set_state>
		return 0;
    9f22:	2500      	movs	r5, #0
    9f24:	e7f7      	b.n	9f16 <bt_conn_disconnect+0x1e>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    9f26:	2157      	movs	r1, #87	; 0x57
    9f28:	480b      	ldr	r0, [pc, #44]	; (9f58 <bt_conn_disconnect+0x60>)
    9f2a:	f01a f987 	bl	2423c <printk>
		conn->err = reason;
    9f2e:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9f30:	4620      	mov	r0, r4
    9f32:	2100      	movs	r1, #0
    9f34:	f7ff feac 	bl	9c90 <bt_conn_set_state>
}
    9f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    9f3c:	f7ff b940 	b.w	91c0 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
    9f40:	8800      	ldrh	r0, [r0, #0]
    9f42:	f01c fc40 	bl	267c6 <bt_hci_disconnect>
	if (err) {
    9f46:	4605      	mov	r5, r0
    9f48:	2800      	cmp	r0, #0
    9f4a:	d1e4      	bne.n	9f16 <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    9f4c:	2108      	movs	r1, #8
    9f4e:	4620      	mov	r0, r4
    9f50:	f7ff fe9e 	bl	9c90 <bt_conn_set_state>
	return 0;
    9f54:	e7df      	b.n	9f16 <bt_conn_disconnect+0x1e>
    9f56:	bf00      	nop
    9f58:	0002d191 	.word	0x0002d191

00009f5c <send_conn_le_param_update>:
{
    9f5c:	b538      	push	{r3, r4, r5, lr}
    9f5e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    9f60:	4608      	mov	r0, r1
{
    9f62:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    9f64:	f01c fc4a 	bl	267fc <bt_le_conn_params_valid>
    9f68:	b310      	cbz	r0, 9fb0 <send_conn_le_param_update+0x54>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9f6a:	4b13      	ldr	r3, [pc, #76]	; (9fb8 <send_conn_le_param_update+0x5c>)
    9f6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    9f70:	079a      	lsls	r2, r3, #30
    9f72:	d407      	bmi.n	9f84 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    9f74:	78e3      	ldrb	r3, [r4, #3]
    9f76:	b17b      	cbz	r3, 9f98 <send_conn_le_param_update+0x3c>
	return bt_l2cap_update_conn_param(conn, param);
    9f78:	4629      	mov	r1, r5
    9f7a:	4620      	mov	r0, r4
}
    9f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    9f80:	f000 baa6 	b.w	a4d0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9f84:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    9f88:	079b      	lsls	r3, r3, #30
    9f8a:	d5f3      	bpl.n	9f74 <send_conn_le_param_update+0x18>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    9f8c:	210a      	movs	r1, #10
    9f8e:	1d20      	adds	r0, r4, #4
    9f90:	f01c fd30 	bl	269f4 <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    9f94:	2800      	cmp	r0, #0
    9f96:	d1ed      	bne.n	9f74 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    9f98:	4629      	mov	r1, r5
    9f9a:	4620      	mov	r0, r4
    9f9c:	f01c fd89 	bl	26ab2 <bt_conn_le_conn_update>
		if (rc == 0) {
    9fa0:	b928      	cbnz	r0, 9fae <send_conn_le_param_update+0x52>
			conn->le.pending_latency = param->latency;
    9fa2:	88ab      	ldrh	r3, [r5, #4]
    9fa4:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    9fa8:	88eb      	ldrh	r3, [r5, #6]
    9faa:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    9fae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9fb0:	f06f 0015 	mvn.w	r0, #21
    9fb4:	e7fb      	b.n	9fae <send_conn_le_param_update+0x52>
    9fb6:	bf00      	nop
    9fb8:	200001c0 	.word	0x200001c0

00009fbc <deferred_work>:
{
    9fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    9fbe:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    9fc2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    9fc4:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    9fc8:	b993      	cbnz	r3, 9ff0 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    9fca:	4630      	mov	r0, r6
    9fcc:	f01c fdd0 	bl	26b70 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    9fd0:	4b1f      	ldr	r3, [pc, #124]	; (a050 <deferred_work+0x94>)
    9fd2:	681d      	ldr	r5, [r3, #0]
    9fd4:	b925      	cbnz	r5, 9fe0 <deferred_work+0x24>
		bt_conn_unref(conn);
    9fd6:	4630      	mov	r0, r6
    9fd8:	f7ff fe26 	bl	9c28 <bt_conn_unref>
}
    9fdc:	b004      	add	sp, #16
    9fde:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    9fe0:	686b      	ldr	r3, [r5, #4]
    9fe2:	b11b      	cbz	r3, 9fec <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    9fe4:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    9fe8:	4630      	mov	r0, r6
    9fea:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9fec:	692d      	ldr	r5, [r5, #16]
    9fee:	e7f1      	b.n	9fd4 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    9ff0:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    9ff4:	2b01      	cmp	r3, #1
    9ff6:	d1f1      	bne.n	9fdc <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9ff8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    9ffc:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    a000:	e855 3f00 	ldrex	r3, [r5]
    a004:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    a008:	e845 2100 	strex	r1, r2, [r5]
    a00c:	2900      	cmp	r1, #0
    a00e:	d1f7      	bne.n	a000 <deferred_work+0x44>
    a010:	f3bf 8f5b 	dmb	ish
    a014:	059b      	lsls	r3, r3, #22
    a016:	d514      	bpl.n	a042 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    a018:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a01a:	9300      	str	r3, [sp, #0]
    a01c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    a01e:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    a020:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
    a022:	4630      	mov	r0, r6
    a024:	f7ff ff9a 	bl	9f5c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a028:	f3bf 8f5b 	dmb	ish
    a02c:	e855 3f00 	ldrex	r3, [r5]
    a030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a034:	e845 3200 	strex	r2, r3, [r5]
    a038:	2a00      	cmp	r2, #0
    a03a:	d1f7      	bne.n	a02c <deferred_work+0x70>
    a03c:	f3bf 8f5b 	dmb	ish
    a040:	e7cc      	b.n	9fdc <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    a042:	4a04      	ldr	r2, [pc, #16]	; (a054 <deferred_work+0x98>)
    a044:	6851      	ldr	r1, [r2, #4]
    a046:	6810      	ldr	r0, [r2, #0]
    a048:	ab02      	add	r3, sp, #8
    a04a:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
    a04c:	a902      	add	r1, sp, #8
    a04e:	e7e8      	b.n	a022 <deferred_work+0x66>
    a050:	200020a8 	.word	0x200020a8
    a054:	0002ab3c 	.word	0x0002ab3c

0000a058 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a05a:	4604      	mov	r4, r0
    a05c:	460d      	mov	r5, r1
    a05e:	4616      	mov	r6, r2
    a060:	461f      	mov	r7, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
    a062:	f020 f948 	bl	2a2f6 <k_is_in_isr>
    a066:	b150      	cbz	r0, a07e <bt_conn_create_pdu_timeout+0x26>
    a068:	490f      	ldr	r1, [pc, #60]	; (a0a8 <bt_conn_create_pdu_timeout+0x50>)
    a06a:	4810      	ldr	r0, [pc, #64]	; (a0ac <bt_conn_create_pdu_timeout+0x54>)
    a06c:	f640 12ee 	movw	r2, #2542	; 0x9ee
    a070:	f01a f8e4 	bl	2423c <printk>
    a074:	f640 11ee 	movw	r1, #2542	; 0x9ee
    a078:	480b      	ldr	r0, [pc, #44]	; (a0a8 <bt_conn_create_pdu_timeout+0x50>)
    a07a:	f01a fb91 	bl	247a0 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    a07e:	480c      	ldr	r0, [pc, #48]	; (a0b0 <bt_conn_create_pdu_timeout+0x58>)
    a080:	4632      	mov	r2, r6
    a082:	2c00      	cmp	r4, #0
    a084:	bf18      	it	ne
    a086:	4620      	movne	r0, r4
    a088:	463b      	mov	r3, r7
    a08a:	f01f fc1b 	bl	298c4 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    a08e:	4604      	mov	r4, r0
    a090:	b928      	cbnz	r0, a09e <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
    a092:	2157      	movs	r1, #87	; 0x57
    a094:	4807      	ldr	r0, [pc, #28]	; (a0b4 <bt_conn_create_pdu_timeout+0x5c>)
    a096:	f01a f8d1 	bl	2423c <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    a09a:	4620      	mov	r0, r4
    a09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    a09e:	1d29      	adds	r1, r5, #4
    a0a0:	3008      	adds	r0, #8
    a0a2:	f013 f979 	bl	1d398 <net_buf_simple_reserve>
	return buf;
    a0a6:	e7f8      	b.n	a09a <bt_conn_create_pdu_timeout+0x42>
    a0a8:	0002d358 	.word	0x0002d358
    a0ac:	0002bced 	.word	0x0002bced
    a0b0:	20000e2c 	.word	0x20000e2c
    a0b4:	0002d163 	.word	0x0002d163

0000a0b8 <bt_conn_create_frag_timeout>:
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    a0b8:	4601      	mov	r1, r0
    a0ba:	4801      	ldr	r0, [pc, #4]	; (a0c0 <bt_conn_create_frag_timeout+0x8>)
    a0bc:	f7ff bfcc 	b.w	a058 <bt_conn_create_pdu_timeout>
    a0c0:	20000eb0 	.word	0x20000eb0

0000a0c4 <create_frag.isra.16>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0c8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    a0ca:	f04f 33ff 	mov.w	r3, #4294967295
    a0ce:	f04f 32ff 	mov.w	r2, #4294967295
    a0d2:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    a0d4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    a0d6:	f7ff ffef 	bl	a0b8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    a0da:	7833      	ldrb	r3, [r6, #0]
    a0dc:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    a0de:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    a0e0:	f04f 0600 	mov.w	r6, #0
    a0e4:	d005      	beq.n	a0f2 <create_frag.isra.16+0x2e>
		net_buf_unref(frag);
    a0e6:	f013 fa41 	bl	1d56c <net_buf_unref>
		return NULL;
    a0ea:	4635      	mov	r5, r6
}
    a0ec:	4628      	mov	r0, r5
    a0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    a0f2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    a0f4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    a0f8:	4e0c      	ldr	r6, [pc, #48]	; (a12c <create_frag.isra.16+0x68>)
    a0fa:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a0fc:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    a100:	f01f fc45 	bl	2998e <net_buf_simple_tailroom>
    a104:	4580      	cmp	r8, r0
    a106:	d20c      	bcs.n	a122 <create_frag.isra.16+0x5e>
	return bt_dev.le.acl_mtu;
    a108:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a10c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    a110:	4632      	mov	r2, r6
    a112:	4638      	mov	r0, r7
    a114:	f01f fc43 	bl	2999e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    a118:	4631      	mov	r1, r6
    a11a:	4620      	mov	r0, r4
    a11c:	f013 fb02 	bl	1d724 <net_buf_simple_pull>
    a120:	e7e4      	b.n	a0ec <create_frag.isra.16+0x28>
	return net_buf_simple_tailroom(&buf->b);
    a122:	4638      	mov	r0, r7
    a124:	f01f fc33 	bl	2998e <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    a128:	b286      	uxth	r6, r0
    a12a:	e7ef      	b.n	a10c <create_frag.isra.16+0x48>
    a12c:	200001c0 	.word	0x200001c0

0000a130 <bt_conn_process_tx>:
{
    a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    a132:	7a83      	ldrb	r3, [r0, #10]
{
    a134:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    a136:	b993      	cbnz	r3, a15e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a138:	f3bf 8f5b 	dmb	ish
    a13c:	1d03      	adds	r3, r0, #4
    a13e:	e853 2f00 	ldrex	r2, [r3]
    a142:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    a146:	e843 1400 	strex	r4, r1, [r3]
    a14a:	2c00      	cmp	r4, #0
    a14c:	d1f7      	bne.n	a13e <bt_conn_process_tx+0xe>
    a14e:	f3bf 8f5b 	dmb	ish
    a152:	0653      	lsls	r3, r2, #25
    a154:	d503      	bpl.n	a15e <bt_conn_process_tx+0x2e>
}
    a156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    a15a:	f7ff bbff 	b.w	995c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    a15e:	2200      	movs	r2, #0
    a160:	2300      	movs	r3, #0
    a162:	f105 0034 	add.w	r0, r5, #52	; 0x34
    a166:	f013 f8e7 	bl	1d338 <net_buf_get>
	BT_ASSERT(buf);
    a16a:	4604      	mov	r4, r0
    a16c:	b958      	cbnz	r0, a186 <bt_conn_process_tx+0x56>
    a16e:	f240 525f 	movw	r2, #1375	; 0x55f
    a172:	491f      	ldr	r1, [pc, #124]	; (a1f0 <bt_conn_process_tx+0xc0>)
    a174:	481f      	ldr	r0, [pc, #124]	; (a1f4 <bt_conn_process_tx+0xc4>)
    a176:	f01a f861 	bl	2423c <printk>
    a17a:	4040      	eors	r0, r0
    a17c:	f380 8811 	msr	BASEPRI, r0
    a180:	f04f 0003 	mov.w	r0, #3
    a184:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    a186:	4e1c      	ldr	r6, [pc, #112]	; (a1f8 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    a188:	89a1      	ldrh	r1, [r4, #12]
    a18a:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
    a18e:	4291      	cmp	r1, r2
    a190:	d807      	bhi.n	a1a2 <bt_conn_process_tx+0x72>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    a192:	2300      	movs	r3, #0
    a194:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    a196:	4621      	mov	r1, r4
    a198:	4628      	mov	r0, r5
    a19a:	f7ff fad5 	bl	9748 <send_frag>
	if (!send_buf(conn, buf)) {
    a19e:	b140      	cbz	r0, a1b2 <bt_conn_process_tx+0x82>
}
    a1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    a1a2:	f105 070a 	add.w	r7, r5, #10
    a1a6:	4621      	mov	r1, r4
    a1a8:	4638      	mov	r0, r7
    a1aa:	f7ff ff8b 	bl	a0c4 <create_frag.isra.16>
	if (!frag) {
    a1ae:	4601      	mov	r1, r0
    a1b0:	b920      	cbnz	r0, a1bc <bt_conn_process_tx+0x8c>
		net_buf_unref(buf);
    a1b2:	4620      	mov	r0, r4
}
    a1b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    a1b8:	f013 b9d8 	b.w	1d56c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    a1bc:	2301      	movs	r3, #1
    a1be:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    a1c0:	4628      	mov	r0, r5
    a1c2:	f7ff fac1 	bl	9748 <send_frag>
    a1c6:	2800      	cmp	r0, #0
    a1c8:	d0f3      	beq.n	a1b2 <bt_conn_process_tx+0x82>
	while (buf->len > conn_mtu(conn)) {
    a1ca:	89a2      	ldrh	r2, [r4, #12]
    a1cc:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    a1d0:	429a      	cmp	r2, r3
    a1d2:	d802      	bhi.n	a1da <bt_conn_process_tx+0xaa>
	return send_frag(conn, buf, FRAG_END, false);
    a1d4:	2300      	movs	r3, #0
    a1d6:	2203      	movs	r2, #3
    a1d8:	e7dd      	b.n	a196 <bt_conn_process_tx+0x66>
		frag = create_frag(conn, buf);
    a1da:	4621      	mov	r1, r4
    a1dc:	4638      	mov	r0, r7
    a1de:	f7ff ff71 	bl	a0c4 <create_frag.isra.16>
		if (!frag) {
    a1e2:	4601      	mov	r1, r0
    a1e4:	2800      	cmp	r0, #0
    a1e6:	d0e4      	beq.n	a1b2 <bt_conn_process_tx+0x82>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    a1e8:	2301      	movs	r3, #1
    a1ea:	461a      	mov	r2, r3
    a1ec:	e7e8      	b.n	a1c0 <bt_conn_process_tx+0x90>
    a1ee:	bf00      	nop
    a1f0:	0002d358 	.word	0x0002d358
    a1f4:	0002bced 	.word	0x0002bced
    a1f8:	200001c0 	.word	0x200001c0

0000a1fc <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    a1fc:	4a0a      	ldr	r2, [pc, #40]	; (a228 <bt_conn_index+0x2c>)
{
    a1fe:	b510      	push	{r4, lr}
		index = conn - acl_conns;
    a200:	1a84      	subs	r4, r0, r2
    a202:	11a3      	asrs	r3, r4, #6
    a204:	4c09      	ldr	r4, [pc, #36]	; (a22c <bt_conn_index+0x30>)
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
    a206:	4290      	cmp	r0, r2
		index = conn - acl_conns;
    a208:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
    a20c:	d00a      	beq.n	a224 <bt_conn_index+0x28>
    a20e:	4908      	ldr	r1, [pc, #32]	; (a230 <bt_conn_index+0x34>)
    a210:	4808      	ldr	r0, [pc, #32]	; (a234 <bt_conn_index+0x38>)
    a212:	f640 2296 	movw	r2, #2710	; 0xa96
    a216:	f01a f811 	bl	2423c <printk>
    a21a:	f640 2196 	movw	r1, #2710	; 0xa96
    a21e:	4804      	ldr	r0, [pc, #16]	; (a230 <bt_conn_index+0x34>)
    a220:	f01a fabe 	bl	247a0 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    a224:	b2e0      	uxtb	r0, r4
    a226:	bd10      	pop	{r4, pc}
    a228:	200010b0 	.word	0x200010b0
    a22c:	aaaaaaab 	.word	0xaaaaaaab
    a230:	0002d358 	.word	0x0002d358
    a234:	0002bced 	.word	0x0002bced

0000a238 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    a238:	b570      	push	{r4, r5, r6, lr}
    a23a:	4d0b      	ldr	r5, [pc, #44]	; (a268 <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    a23c:	4e0b      	ldr	r6, [pc, #44]	; (a26c <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    a23e:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    a240:	4629      	mov	r1, r5
    a242:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    a244:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    a246:	f01f ffed 	bl	2a224 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    a24a:	2c08      	cmp	r4, #8
    a24c:	f105 0510 	add.w	r5, r5, #16
    a250:	d1f6      	bne.n	a240 <bt_conn_init+0x8>
	}

	bt_att_init();
    a252:	f01c ffdd 	bl	27210 <bt_att_init>

	err = bt_smp_init();
    a256:	f01d fad0 	bl	277fa <bt_smp_init>
	if (err) {
    a25a:	4604      	mov	r4, r0
    a25c:	b908      	cbnz	r0, a262 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    a25e:	f01c fccc 	bl	26bfa <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    a262:	4620      	mov	r0, r4
    a264:	bd70      	pop	{r4, r5, r6, pc}
    a266:	bf00      	nop
    a268:	200020ac 	.word	0x200020ac
    a26c:	20000df4 	.word	0x20000df4

0000a270 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    a270:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    a272:	4c07      	ldr	r4, [pc, #28]	; (a290 <l2cap_accept+0x20>)
{
    a274:	4602      	mov	r2, r0
		if (l2cap->chan.chan.conn) {
    a276:	6820      	ldr	r0, [r4, #0]
    a278:	b918      	cbnz	r0, a282 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    a27a:	4a06      	ldr	r2, [pc, #24]	; (a294 <l2cap_accept+0x24>)
    a27c:	6062      	str	r2, [r4, #4]
		*chan = &l2cap->chan.chan;
    a27e:	600c      	str	r4, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    a280:	bd10      	pop	{r4, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
    a282:	4805      	ldr	r0, [pc, #20]	; (a298 <l2cap_accept+0x28>)
    a284:	2145      	movs	r1, #69	; 0x45
    a286:	f019 ffd9 	bl	2423c <printk>
    a28a:	f06f 000b 	mvn.w	r0, #11
    a28e:	e7f7      	b.n	a280 <l2cap_accept+0x10>
    a290:	20001170 	.word	0x20001170
    a294:	0002afc8 	.word	0x0002afc8
    a298:	0002d46f 	.word	0x0002d46f

0000a29c <l2cap_create_le_sig_pdu.isra.8>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a29e:	4605      	mov	r5, r0
    a2a0:	460f      	mov	r7, r1
    a2a2:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    a2a4:	2300      	movs	r3, #0
    a2a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a2aa:	2104      	movs	r1, #4
    a2ac:	2000      	movs	r0, #0
    a2ae:	f7ff fed3 	bl	a058 <bt_conn_create_pdu_timeout>
	if (!buf) {
    a2b2:	4604      	mov	r4, r0
    a2b4:	b930      	cbnz	r0, a2c4 <l2cap_create_le_sig_pdu.isra.8+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    a2b6:	462a      	mov	r2, r5
    a2b8:	2145      	movs	r1, #69	; 0x45
    a2ba:	4806      	ldr	r0, [pc, #24]	; (a2d4 <l2cap_create_le_sig_pdu.isra.8+0x38>)
    a2bc:	f019 ffbe 	bl	2423c <printk>
}
    a2c0:	4620      	mov	r0, r4
    a2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    a2c4:	2104      	movs	r1, #4
    a2c6:	3008      	adds	r0, #8
    a2c8:	f013 fa66 	bl	1d798 <net_buf_simple_add>
	hdr->code = code;
    a2cc:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    a2ce:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    a2d0:	8046      	strh	r6, [r0, #2]
	return buf;
    a2d2:	e7f5      	b.n	a2c0 <l2cap_create_le_sig_pdu.isra.8+0x24>
    a2d4:	0002d49b 	.word	0x0002d49b

0000a2d8 <l2cap_rtx_timeout>:
{
    a2d8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    a2da:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    a2dc:	2145      	movs	r1, #69	; 0x45
	struct bt_conn *conn = chan->chan.conn;
    a2de:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    a2e2:	4806      	ldr	r0, [pc, #24]	; (a2fc <l2cap_rtx_timeout+0x24>)
    a2e4:	4622      	mov	r2, r4
    a2e6:	f019 ffa9 	bl	2423c <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
    a2ea:	4628      	mov	r0, r5
    a2ec:	4621      	mov	r1, r4
    a2ee:	f01c fc0a 	bl	26b06 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    a2f2:	4620      	mov	r0, r4
}
    a2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    a2f8:	f01c bc25 	b.w	26b46 <bt_l2cap_chan_del>
    a2fc:	0002d57b 	.word	0x0002d57b

0000a300 <bt_l2cap_connected>:
{
    a300:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a304:	4f31      	ldr	r7, [pc, #196]	; (a3cc <bt_l2cap_connected+0xcc>)
    a306:	4d32      	ldr	r5, [pc, #200]	; (a3d0 <bt_l2cap_connected+0xd0>)
    a308:	f8df 80d0 	ldr.w	r8, [pc, #208]	; a3dc <bt_l2cap_connected+0xdc>
{
    a30c:	4606      	mov	r6, r0
    a30e:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a310:	42bd      	cmp	r5, r7
    a312:	d90a      	bls.n	a32a <bt_l2cap_connected+0x2a>
    a314:	4641      	mov	r1, r8
    a316:	482f      	ldr	r0, [pc, #188]	; (a3d4 <bt_l2cap_connected+0xd4>)
    a318:	f240 1267 	movw	r2, #359	; 0x167
    a31c:	f019 ff8e 	bl	2423c <printk>
    a320:	f240 1167 	movw	r1, #359	; 0x167
    a324:	4640      	mov	r0, r8
    a326:	f01a fa3b 	bl	247a0 <assert_post_action>
    a32a:	454d      	cmp	r5, r9
    a32c:	d302      	bcc.n	a334 <bt_l2cap_connected+0x34>
}
    a32e:	b002      	add	sp, #8
    a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
    a334:	686b      	ldr	r3, [r5, #4]
    a336:	a901      	add	r1, sp, #4
    a338:	4630      	mov	r0, r6
    a33a:	4798      	blx	r3
    a33c:	2800      	cmp	r0, #0
    a33e:	db40      	blt.n	a3c2 <bt_l2cap_connected+0xc2>
		ch = BT_L2CAP_LE_CHAN(chan);
    a340:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    a342:	882b      	ldrh	r3, [r5, #0]
    a344:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    a348:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a34c:	2230      	movs	r2, #48	; 0x30
    a34e:	2100      	movs	r1, #0
    a350:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    a354:	f8d5 a008 	ldr.w	sl, [r5, #8]
    a358:	f01b ff2c 	bl	261b4 <memset>
    a35c:	4b1e      	ldr	r3, [pc, #120]	; (a3d8 <bt_l2cap_connected+0xd8>)
    a35e:	6163      	str	r3, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a360:	2200      	movs	r2, #0
    a362:	f104 0340 	add.w	r3, r4, #64	; 0x40
    a366:	f3bf 8f5b 	dmb	ish
    a36a:	e853 1f00 	ldrex	r1, [r3]
    a36e:	e843 2000 	strex	r0, r2, [r3]
    a372:	2800      	cmp	r0, #0
    a374:	d1f9      	bne.n	a36a <bt_l2cap_connected+0x6a>
    a376:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    a37a:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    a37c:	6d72      	ldr	r2, [r6, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    a37e:	f104 0308 	add.w	r3, r4, #8
    a382:	bb02      	cbnz	r2, a3c6 <bt_l2cap_connected+0xc6>
	list->head = node;
    a384:	e9c6 3314 	strd	r3, r3, [r6, #80]	; 0x50
		if (chan->ops->connected) {
    a388:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    a38a:	6026      	str	r6, [r4, #0]
		if (chan->ops->connected) {
    a38c:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    a38e:	f8c4 a00c 	str.w	sl, [r4, #12]
		if (chan->ops->connected) {
    a392:	681b      	ldr	r3, [r3, #0]
    a394:	b103      	cbz	r3, a398 <bt_l2cap_connected+0x98>
			chan->ops->connected(chan);
    a396:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a398:	9b01      	ldr	r3, [sp, #4]
    a39a:	f3bf 8f5b 	dmb	ish
    a39e:	3340      	adds	r3, #64	; 0x40
    a3a0:	e853 2f00 	ldrex	r2, [r3]
    a3a4:	f042 0201 	orr.w	r2, r2, #1
    a3a8:	e843 2100 	strex	r1, r2, [r3]
    a3ac:	2900      	cmp	r1, #0
    a3ae:	d1f7      	bne.n	a3a0 <bt_l2cap_connected+0xa0>
    a3b0:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    a3b4:	9801      	ldr	r0, [sp, #4]
    a3b6:	6843      	ldr	r3, [r0, #4]
    a3b8:	699b      	ldr	r3, [r3, #24]
    a3ba:	b113      	cbz	r3, a3c2 <bt_l2cap_connected+0xc2>
			chan->ops->status(chan, chan->status);
    a3bc:	f100 0140 	add.w	r1, r0, #64	; 0x40
    a3c0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a3c2:	350c      	adds	r5, #12
    a3c4:	e7a4      	b.n	a310 <bt_l2cap_connected+0x10>
	parent->next = child;
    a3c6:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a3c8:	6573      	str	r3, [r6, #84]	; 0x54
    a3ca:	e7dd      	b.n	a388 <bt_l2cap_connected+0x88>
    a3cc:	0002a748 	.word	0x0002a748
    a3d0:	0002a724 	.word	0x0002a724
    a3d4:	0002bced 	.word	0x0002bced
    a3d8:	0000a2d9 	.word	0x0000a2d9
    a3dc:	0002d3f2 	.word	0x0002d3f2

0000a3e0 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    a3e0:	898b      	ldrh	r3, [r1, #12]
    a3e2:	2b03      	cmp	r3, #3
{
    a3e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a3e6:	4606      	mov	r6, r0
    a3e8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    a3ea:	d804      	bhi.n	a3f6 <l2cap_recv+0x16>
		BT_ERR("Too small L2CAP signaling PDU");
    a3ec:	481f      	ldr	r0, [pc, #124]	; (a46c <l2cap_recv+0x8c>)
    a3ee:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid ident value in L2CAP PDU");
    a3f0:	f019 ff24 	bl	2423c <printk>
		return 0;
    a3f4:	e00d      	b.n	a412 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
    a3f6:	2104      	movs	r1, #4
    a3f8:	f105 0008 	add.w	r0, r5, #8
    a3fc:	f013 f9ae 	bl	1d75c <net_buf_simple_pull_mem>
	if (buf->len != len) {
    a400:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    a402:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
    a404:	4293      	cmp	r3, r2
    a406:	4604      	mov	r4, r0
    a408:	d006      	beq.n	a418 <l2cap_recv+0x38>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    a40a:	2145      	movs	r1, #69	; 0x45
    a40c:	4818      	ldr	r0, [pc, #96]	; (a470 <l2cap_recv+0x90>)
    a40e:	f019 ff15 	bl	2423c <printk>
}
    a412:	2000      	movs	r0, #0
    a414:	b002      	add	sp, #8
    a416:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    a418:	7842      	ldrb	r2, [r0, #1]
    a41a:	b912      	cbnz	r2, a422 <l2cap_recv+0x42>
		BT_ERR("Invalid ident value in L2CAP PDU");
    a41c:	2145      	movs	r1, #69	; 0x45
    a41e:	4815      	ldr	r0, [pc, #84]	; (a474 <l2cap_recv+0x94>)
    a420:	e7e6      	b.n	a3f0 <l2cap_recv+0x10>
	switch (hdr->code) {
    a422:	7802      	ldrb	r2, [r0, #0]
    a424:	2a01      	cmp	r2, #1
    a426:	d0f4      	beq.n	a412 <l2cap_recv+0x32>
    a428:	2a13      	cmp	r2, #19
    a42a:	d104      	bne.n	a436 <l2cap_recv+0x56>
	if (buf->len < sizeof(*rsp)) {
    a42c:	2b01      	cmp	r3, #1
    a42e:	d8f0      	bhi.n	a412 <l2cap_recv+0x32>
		BT_ERR("Too small LE conn param rsp");
    a430:	2145      	movs	r1, #69	; 0x45
    a432:	4811      	ldr	r0, [pc, #68]	; (a478 <l2cap_recv+0x98>)
    a434:	e7dc      	b.n	a3f0 <l2cap_recv+0x10>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    a436:	2157      	movs	r1, #87	; 0x57
    a438:	4810      	ldr	r0, [pc, #64]	; (a47c <l2cap_recv+0x9c>)
    a43a:	f019 feff 	bl	2423c <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    a43e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    a440:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    a442:	2202      	movs	r2, #2
    a444:	2001      	movs	r0, #1
    a446:	f7ff ff29 	bl	a29c <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    a44a:	4604      	mov	r4, r0
    a44c:	2800      	cmp	r0, #0
    a44e:	d0e0      	beq.n	a412 <l2cap_recv+0x32>
	return net_buf_simple_add(&buf->b, len);
    a450:	2102      	movs	r1, #2
    a452:	3008      	adds	r0, #8
    a454:	f013 f9a0 	bl	1d798 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    a458:	2300      	movs	r3, #0
    a45a:	7003      	strb	r3, [r0, #0]
    a45c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    a45e:	4622      	mov	r2, r4
    a460:	9300      	str	r3, [sp, #0]
    a462:	2105      	movs	r1, #5
    a464:	4628      	mov	r0, r5
    a466:	f01c fb99 	bl	26b9c <bt_l2cap_send_cb>
    a46a:	e7d2      	b.n	a412 <l2cap_recv+0x32>
    a46c:	0002d4c8 	.word	0x0002d4c8
    a470:	0002d4eb 	.word	0x0002d4eb
    a474:	0002d511 	.word	0x0002d511
    a478:	0002d537 	.word	0x0002d537
    a47c:	0002d558 	.word	0x0002d558

0000a480 <bt_l2cap_recv>:
{
    a480:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    a482:	898b      	ldrh	r3, [r1, #12]
    a484:	2b03      	cmp	r3, #3
{
    a486:	4605      	mov	r5, r0
    a488:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    a48a:	d808      	bhi.n	a49e <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
    a48c:	2145      	movs	r1, #69	; 0x45
    a48e:	480e      	ldr	r0, [pc, #56]	; (a4c8 <bt_l2cap_recv+0x48>)
    a490:	f019 fed4 	bl	2423c <printk>
	net_buf_unref(buf);
    a494:	4620      	mov	r0, r4
}
    a496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    a49a:	f013 b867 	b.w	1d56c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    a49e:	2104      	movs	r1, #4
    a4a0:	f104 0008 	add.w	r0, r4, #8
    a4a4:	f013 f95a 	bl	1d75c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    a4a8:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    a4aa:	4628      	mov	r0, r5
    a4ac:	4611      	mov	r1, r2
    a4ae:	f01c fb99 	bl	26be4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    a4b2:	b920      	cbnz	r0, a4be <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    a4b4:	2157      	movs	r1, #87	; 0x57
    a4b6:	4805      	ldr	r0, [pc, #20]	; (a4cc <bt_l2cap_recv+0x4c>)
    a4b8:	f019 fec0 	bl	2423c <printk>
		net_buf_unref(buf);
    a4bc:	e7ea      	b.n	a494 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
    a4be:	6843      	ldr	r3, [r0, #4]
    a4c0:	4621      	mov	r1, r4
    a4c2:	691b      	ldr	r3, [r3, #16]
    a4c4:	4798      	blx	r3
    a4c6:	e7e5      	b.n	a494 <bt_l2cap_recv+0x14>
    a4c8:	0002d423 	.word	0x0002d423
    a4cc:	0002d445 	.word	0x0002d445

0000a4d0 <bt_l2cap_update_conn_param>:
{
    a4d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    a4d2:	4b15      	ldr	r3, [pc, #84]	; (a528 <bt_l2cap_update_conn_param+0x58>)
    a4d4:	781a      	ldrb	r2, [r3, #0]
    a4d6:	3201      	adds	r2, #1
	if (!ident) {
    a4d8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    a4dc:	bf08      	it	eq
    a4de:	2201      	moveq	r2, #1
    a4e0:	701a      	strb	r2, [r3, #0]
{
    a4e2:	4605      	mov	r5, r0
    a4e4:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    a4e6:	2208      	movs	r2, #8
    a4e8:	7819      	ldrb	r1, [r3, #0]
    a4ea:	2012      	movs	r0, #18
    a4ec:	f7ff fed6 	bl	a29c <l2cap_create_le_sig_pdu.isra.8>
	if (!buf) {
    a4f0:	4606      	mov	r6, r0
    a4f2:	b1b0      	cbz	r0, a522 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    a4f4:	2108      	movs	r1, #8
    a4f6:	4408      	add	r0, r1
    a4f8:	f013 f94e 	bl	1d798 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    a4fc:	8823      	ldrh	r3, [r4, #0]
    a4fe:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    a500:	8863      	ldrh	r3, [r4, #2]
    a502:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    a504:	88a3      	ldrh	r3, [r4, #4]
    a506:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    a508:	88e3      	ldrh	r3, [r4, #6]
    a50a:	80c3      	strh	r3, [r0, #6]
    a50c:	2400      	movs	r4, #0
    a50e:	9400      	str	r4, [sp, #0]
    a510:	4623      	mov	r3, r4
    a512:	4632      	mov	r2, r6
    a514:	2105      	movs	r1, #5
    a516:	4628      	mov	r0, r5
    a518:	f01c fb40 	bl	26b9c <bt_l2cap_send_cb>
	return 0;
    a51c:	4620      	mov	r0, r4
}
    a51e:	b002      	add	sp, #8
    a520:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    a522:	f06f 000b 	mvn.w	r0, #11
    a526:	e7fa      	b.n	a51e <bt_l2cap_update_conn_param+0x4e>
    a528:	20003685 	.word	0x20003685

0000a52c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    a52c:	4b02      	ldr	r3, [pc, #8]	; (a538 <att_cfm_sent+0xc>)
    a52e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    a532:	f01c bb90 	b.w	26c56 <att_sent>
    a536:	bf00      	nop
    a538:	00026f6b 	.word	0x00026f6b

0000a53c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    a53c:	4b02      	ldr	r3, [pc, #8]	; (a548 <att_rsp_sent+0xc>)
    a53e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    a542:	f01c bb88 	b.w	26c56 <att_sent>
    a546:	bf00      	nop
    a548:	00026f4f 	.word	0x00026f4f

0000a54c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    a54c:	4b02      	ldr	r3, [pc, #8]	; (a558 <att_req_sent+0xc>)
    a54e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
    a552:	f01c bb80 	b.w	26c56 <att_sent>
    a556:	bf00      	nop
    a558:	0000a9e9 	.word	0x0000a9e9

0000a55c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    a55c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    a55e:	3808      	subs	r0, #8
    a560:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    a562:	a901      	add	r1, sp, #4
    a564:	4802      	ldr	r0, [pc, #8]	; (a570 <bt_att_released+0x14>)
    a566:	f016 f92b 	bl	207c0 <k_mem_slab_free>
}
    a56a:	b003      	add	sp, #12
    a56c:	f85d fb04 	ldr.w	pc, [sp], #4
    a570:	20000cf0 	.word	0x20000cf0

0000a574 <read_group_cb>:
{
    a574:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    a578:	4606      	mov	r6, r0
    a57a:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    a57c:	f04f 0800 	mov.w	r8, #0
    a580:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a584:	a902      	add	r1, sp, #8
    a586:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    a588:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    a58a:	f88d 8008 	strb.w	r8, [sp, #8]
{
    a58e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    a590:	f8ad 300a 	strh.w	r3, [sp, #10]
    a594:	f01c f84d 	bl	26632 <bt_uuid_cmp>
    a598:	b190      	cbz	r0, a5c0 <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a59a:	f642 0301 	movw	r3, #10241	; 0x2801
    a59e:	a903      	add	r1, sp, #12
    a5a0:	6830      	ldr	r0, [r6, #0]
    a5a2:	f88d 800c 	strb.w	r8, [sp, #12]
    a5a6:	f8ad 300e 	strh.w	r3, [sp, #14]
    a5aa:	f01c f842 	bl	26632 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    a5ae:	b138      	cbz	r0, a5c0 <read_group_cb+0x4c>
		if (data->group &&
    a5b0:	6923      	ldr	r3, [r4, #16]
    a5b2:	b11b      	cbz	r3, a5bc <read_group_cb+0x48>
    a5b4:	885a      	ldrh	r2, [r3, #2]
    a5b6:	42aa      	cmp	r2, r5
    a5b8:	d200      	bcs.n	a5bc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    a5ba:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    a5bc:	2001      	movs	r0, #1
    a5be:	e012      	b.n	a5e6 <read_group_cb+0x72>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    a5c0:	6861      	ldr	r1, [r4, #4]
    a5c2:	6830      	ldr	r0, [r6, #0]
    a5c4:	f01c f835 	bl	26632 <bt_uuid_cmp>
    a5c8:	b110      	cbz	r0, a5d0 <read_group_cb+0x5c>
		data->group = NULL;
    a5ca:	2300      	movs	r3, #0
    a5cc:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    a5ce:	e7f5      	b.n	a5bc <read_group_cb+0x48>
	if (data->rsp->len &&
    a5d0:	68e3      	ldr	r3, [r4, #12]
    a5d2:	68a0      	ldr	r0, [r4, #8]
    a5d4:	781a      	ldrb	r2, [r3, #0]
    a5d6:	b14a      	cbz	r2, a5ec <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    a5d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    a5dc:	8981      	ldrh	r1, [r0, #12]
    a5de:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    a5e0:	4293      	cmp	r3, r2
    a5e2:	da03      	bge.n	a5ec <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    a5e4:	2000      	movs	r0, #0
}
    a5e6:	b004      	add	sp, #16
    a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5ec:	2104      	movs	r1, #4
    a5ee:	3008      	adds	r0, #8
    a5f0:	f013 f8d2 	bl	1d798 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    a5f4:	4b09      	ldr	r3, [pc, #36]	; (a61c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    a5f6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    a5f8:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    a5fa:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    a5fc:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    a5fe:	4631      	mov	r1, r6
    a600:	9300      	str	r3, [sp, #0]
    a602:	9401      	str	r4, [sp, #4]
    a604:	2300      	movs	r3, #0
    a606:	4638      	mov	r0, r7
    a608:	f01c fb9e 	bl	26d48 <att_chan_read>
	if (read < 0) {
    a60c:	2800      	cmp	r0, #0
    a60e:	dbe9      	blt.n	a5e4 <read_group_cb+0x70>
	if (!data->group) {
    a610:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    a612:	3000      	adds	r0, #0
    a614:	bf18      	it	ne
    a616:	2001      	movne	r0, #1
    a618:	e7e5      	b.n	a5e6 <read_group_cb+0x72>
    a61a:	bf00      	nop
    a61c:	00026ef7 	.word	0x00026ef7

0000a620 <read_type_cb>:
{
    a620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    a624:	6816      	ldr	r6, [r2, #0]
{
    a626:	4607      	mov	r7, r0
    a628:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    a62a:	6800      	ldr	r0, [r0, #0]
    a62c:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    a62e:	68b5      	ldr	r5, [r6, #8]
{
    a630:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    a632:	f01b fffe 	bl	26632 <bt_uuid_cmp>
    a636:	4680      	mov	r8, r0
    a638:	2800      	cmp	r0, #0
    a63a:	d13f      	bne.n	a6bc <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    a63c:	4628      	mov	r0, r5
    a63e:	2215      	movs	r2, #21
    a640:	4639      	mov	r1, r7
    a642:	f01d f869 	bl	27718 <bt_gatt_check_perm>
    a646:	4605      	mov	r5, r0
    a648:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    a64a:	b150      	cbz	r0, a662 <read_type_cb+0x42>
		if (data->rsp->len) {
    a64c:	68e3      	ldr	r3, [r4, #12]
    a64e:	781b      	ldrb	r3, [r3, #0]
    a650:	b923      	cbnz	r3, a65c <read_type_cb+0x3c>
		return BT_GATT_ITER_STOP;
    a652:	2500      	movs	r5, #0
}
    a654:	4628      	mov	r0, r5
    a656:	b003      	add	sp, #12
    a658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    a65c:	f884 8014 	strb.w	r8, [r4, #20]
    a660:	e7f7      	b.n	a652 <read_type_cb+0x32>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    a662:	68a0      	ldr	r0, [r4, #8]
    a664:	f012 ffde 	bl	1d624 <net_buf_frag_last>
    a668:	2102      	movs	r1, #2
    a66a:	3008      	adds	r0, #8
    a66c:	f013 f894 	bl	1d798 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    a670:	4b13      	ldr	r3, [pc, #76]	; (a6c0 <read_type_cb+0xa0>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    a672:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    a674:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    a676:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    a67a:	4639      	mov	r1, r7
    a67c:	9300      	str	r3, [sp, #0]
    a67e:	9401      	str	r4, [sp, #4]
    a680:	462b      	mov	r3, r5
    a682:	4630      	mov	r0, r6
    a684:	f01c fb60 	bl	26d48 <att_chan_read>
	if (read < 0) {
    a688:	2800      	cmp	r0, #0
    a68a:	da07      	bge.n	a69c <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
    a68c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    a690:	bf26      	itte	cs
    a692:	4240      	negcs	r0, r0
    a694:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    a696:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    a698:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    a69a:	e7db      	b.n	a654 <read_type_cb+0x34>
	if (!data->item) {
    a69c:	6923      	ldr	r3, [r4, #16]
    a69e:	2b00      	cmp	r3, #0
    a6a0:	d0d7      	beq.n	a652 <read_type_cb+0x32>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    a6a2:	68a0      	ldr	r0, [r4, #8]
    a6a4:	f01c facf 	bl	26c46 <net_buf_frags_len>
    a6a8:	f8b6 505e 	ldrh.w	r5, [r6, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a6ac:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    a6ae:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a6b0:	7818      	ldrb	r0, [r3, #0]
    a6b2:	4285      	cmp	r5, r0
    a6b4:	bf94      	ite	ls
    a6b6:	2500      	movls	r5, #0
    a6b8:	2501      	movhi	r5, #1
    a6ba:	e7cb      	b.n	a654 <read_type_cb+0x34>
		return BT_GATT_ITER_CONTINUE;
    a6bc:	2501      	movs	r5, #1
    a6be:	e7c9      	b.n	a654 <read_type_cb+0x34>
    a6c0:	00026c63 	.word	0x00026c63

0000a6c4 <find_type_cb>:
{
    a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    a6c8:	f8d2 8000 	ldr.w	r8, [r2]
{
    a6cc:	b093      	sub	sp, #76	; 0x4c
    a6ce:	4607      	mov	r7, r0
    a6d0:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a6d2:	2600      	movs	r6, #0
    a6d4:	f642 0301 	movw	r3, #10241	; 0x2801
    a6d8:	a902      	add	r1, sp, #8
    a6da:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    a6dc:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a6e0:	f88d 6008 	strb.w	r6, [sp, #8]
{
    a6e4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a6e6:	f8ad 300a 	strh.w	r3, [sp, #10]
    a6ea:	f01b ffa2 	bl	26632 <bt_uuid_cmp>
    a6ee:	2800      	cmp	r0, #0
    a6f0:	d061      	beq.n	a7b6 <find_type_cb+0xf2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    a6f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a6f6:	a903      	add	r1, sp, #12
    a6f8:	6838      	ldr	r0, [r7, #0]
    a6fa:	f88d 600c 	strb.w	r6, [sp, #12]
    a6fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    a702:	f01b ff96 	bl	26632 <bt_uuid_cmp>
    a706:	b138      	cbz	r0, a718 <find_type_cb+0x54>
		if (data->group &&
    a708:	68a3      	ldr	r3, [r4, #8]
    a70a:	b11b      	cbz	r3, a714 <find_type_cb+0x50>
    a70c:	885a      	ldrh	r2, [r3, #2]
    a70e:	42aa      	cmp	r2, r5
    a710:	d200      	bcs.n	a714 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    a712:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    a714:	2001      	movs	r0, #1
    a716:	e009      	b.n	a72c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    a718:	6861      	ldr	r1, [r4, #4]
    a71a:	4608      	mov	r0, r1
    a71c:	f01c fa93 	bl	26c46 <net_buf_frags_len>
    a720:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    a724:	1a18      	subs	r0, r3, r0
    a726:	2803      	cmp	r0, #3
    a728:	d803      	bhi.n	a732 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    a72a:	2000      	movs	r0, #0
}
    a72c:	b013      	add	sp, #76	; 0x4c
    a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    a732:	4608      	mov	r0, r1
    a734:	f012 ff76 	bl	1d624 <net_buf_frag_last>
    a738:	4606      	mov	r6, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    a73a:	6860      	ldr	r0, [r4, #4]
    a73c:	f01c fa83 	bl	26c46 <net_buf_frags_len>
    a740:	f8b8 a05e 	ldrh.w	sl, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    a744:	f106 0b08 	add.w	fp, r6, #8
    a748:	ebaa 0a00 	sub.w	sl, sl, r0
    a74c:	4658      	mov	r0, fp
    a74e:	f01f f91e 	bl	2998e <net_buf_simple_tailroom>
    a752:	4582      	cmp	sl, r0
    a754:	d232      	bcs.n	a7bc <find_type_cb+0xf8>
    a756:	6860      	ldr	r0, [r4, #4]
    a758:	f01c fa75 	bl	26c46 <net_buf_frags_len>
    a75c:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
    a760:	1a18      	subs	r0, r3, r0
	if (!len) {
    a762:	b970      	cbnz	r0, a782 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    a764:	6863      	ldr	r3, [r4, #4]
    a766:	7998      	ldrb	r0, [r3, #6]
    a768:	f012 fcec 	bl	1d144 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    a76c:	2200      	movs	r2, #0
    a76e:	2300      	movs	r3, #0
    a770:	f01f f8a8 	bl	298c4 <net_buf_alloc_fixed>
		if (!frag) {
    a774:	4606      	mov	r6, r0
    a776:	2800      	cmp	r0, #0
    a778:	d0d7      	beq.n	a72a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    a77a:	4601      	mov	r1, r0
    a77c:	6860      	ldr	r0, [r4, #4]
    a77e:	f012 ff91 	bl	1d6a4 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    a782:	2300      	movs	r3, #0
    a784:	9300      	str	r3, [sp, #0]
    a786:	2310      	movs	r3, #16
    a788:	f8d7 8004 	ldr.w	r8, [r7, #4]
    a78c:	4639      	mov	r1, r7
    a78e:	eb0d 0203 	add.w	r2, sp, r3
    a792:	4648      	mov	r0, r9
    a794:	47c0      	blx	r8
	if (read < 0) {
    a796:	1e07      	subs	r7, r0, #0
    a798:	db0d      	blt.n	a7b6 <find_type_cb+0xf2>
	if (read != data->value_len) {
    a79a:	7c22      	ldrb	r2, [r4, #16]
    a79c:	68e0      	ldr	r0, [r4, #12]
    a79e:	42ba      	cmp	r2, r7
    a7a0:	d02b      	beq.n	a7fa <find_type_cb+0x136>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    a7a2:	4601      	mov	r1, r0
    a7a4:	a80d      	add	r0, sp, #52	; 0x34
    a7a6:	f01b ff6e 	bl	26686 <bt_uuid_create>
    a7aa:	b958      	cbnz	r0, a7c4 <find_type_cb+0x100>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    a7ac:	7c22      	ldrb	r2, [r4, #16]
    a7ae:	4815      	ldr	r0, [pc, #84]	; (a804 <find_type_cb+0x140>)
    a7b0:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unable to create UUID: size %d", read);
    a7b2:	f019 fd43 	bl	2423c <printk>
	data->group = NULL;
    a7b6:	2300      	movs	r3, #0
    a7b8:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
    a7ba:	e7ab      	b.n	a714 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    a7bc:	4658      	mov	r0, fp
    a7be:	f01f f8e6 	bl	2998e <net_buf_simple_tailroom>
    a7c2:	e7ce      	b.n	a762 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    a7c4:	b2fa      	uxtb	r2, r7
    a7c6:	a904      	add	r1, sp, #16
    a7c8:	a808      	add	r0, sp, #32
    a7ca:	f01b ff5c 	bl	26686 <bt_uuid_create>
    a7ce:	b918      	cbnz	r0, a7d8 <find_type_cb+0x114>
			BT_WARN("Unable to create UUID: size %d", read);
    a7d0:	463a      	mov	r2, r7
    a7d2:	2157      	movs	r1, #87	; 0x57
    a7d4:	480c      	ldr	r0, [pc, #48]	; (a808 <find_type_cb+0x144>)
    a7d6:	e7ec      	b.n	a7b2 <find_type_cb+0xee>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    a7d8:	a908      	add	r1, sp, #32
    a7da:	a80d      	add	r0, sp, #52	; 0x34
    a7dc:	f01b ff29 	bl	26632 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    a7e0:	2800      	cmp	r0, #0
    a7e2:	d1e8      	bne.n	a7b6 <find_type_cb+0xf2>
	data->err = 0x00;
    a7e4:	2300      	movs	r3, #0
    a7e6:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    a7e8:	2104      	movs	r1, #4
    a7ea:	f106 0008 	add.w	r0, r6, #8
    a7ee:	f012 ffd3 	bl	1d798 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    a7f2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    a7f4:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    a7f6:	8045      	strh	r5, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    a7f8:	e78c      	b.n	a714 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    a7fa:	a904      	add	r1, sp, #16
    a7fc:	f01b fc89 	bl	26112 <memcmp>
    a800:	e7ee      	b.n	a7e0 <find_type_cb+0x11c>
    a802:	bf00      	nop
    a804:	0002d7b6 	.word	0x0002d7b6
    a808:	0002d7da 	.word	0x0002d7da

0000a80c <chan_send>:
{
    a80c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    a810:	688b      	ldr	r3, [r1, #8]
    a812:	781b      	ldrb	r3, [r3, #0]
    a814:	2bd2      	cmp	r3, #210	; 0xd2
{
    a816:	4605      	mov	r5, r0
    a818:	460c      	mov	r4, r1
    a81a:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    a81c:	d110      	bne.n	a840 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
    a81e:	6803      	ldr	r3, [r0, #0]
    a820:	6818      	ldr	r0, [r3, #0]
    a822:	f01c ffe7 	bl	277f4 <bt_smp_sign>
		if (err) {
    a826:	4606      	mov	r6, r0
    a828:	b150      	cbz	r0, a840 <chan_send+0x34>
			BT_ERR("Error signing data");
    a82a:	2145      	movs	r1, #69	; 0x45
    a82c:	4824      	ldr	r0, [pc, #144]	; (a8c0 <chan_send+0xb4>)
    a82e:	f019 fd05 	bl	2423c <printk>
		net_buf_unref(buf);
    a832:	4620      	mov	r0, r4
    a834:	f012 fe9a 	bl	1d56c <net_buf_unref>
}
    a838:	4630      	mov	r0, r6
    a83a:	b003      	add	sp, #12
    a83c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    a840:	f104 0008 	add.w	r0, r4, #8
    a844:	f01f f89f 	bl	29986 <net_buf_simple_headroom>
	state->len = buf->len;
    a848:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    a84c:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    a84e:	f1b9 0f00 	cmp.w	r9, #0
    a852:	d10a      	bne.n	a86a <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
    a854:	68a3      	ldr	r3, [r4, #8]
    a856:	7818      	ldrb	r0, [r3, #0]
    a858:	f01c fa15 	bl	26c86 <att_op_get_type>
    a85c:	3801      	subs	r0, #1
    a85e:	b2c0      	uxtb	r0, r0
    a860:	2804      	cmp	r0, #4
    a862:	bf9c      	itt	ls
    a864:	4b17      	ldrls	r3, [pc, #92]	; (a8c4 <chan_send+0xb8>)
    a866:	f853 9020 	ldrls.w	r9, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    a86a:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    a86c:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    a870:	4620      	mov	r0, r4
    a872:	681e      	ldr	r6, [r3, #0]
    a874:	f012 febe 	bl	1d5f4 <net_buf_ref>
    a878:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
    a87c:	4b12      	ldr	r3, [pc, #72]	; (a8c8 <chan_send+0xbc>)
    a87e:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    a880:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    a882:	d019      	beq.n	a8b8 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
    a884:	4b11      	ldr	r3, [pc, #68]	; (a8cc <chan_send+0xc0>)
    a886:	4299      	cmp	r1, r3
    a888:	d018      	beq.n	a8bc <chan_send+0xb0>
		return att_sent;
    a88a:	f8df c054 	ldr.w	ip, [pc, #84]	; a8e0 <chan_send+0xd4>
    a88e:	4b10      	ldr	r3, [pc, #64]	; (a8d0 <chan_send+0xc4>)
    a890:	4810      	ldr	r0, [pc, #64]	; (a8d4 <chan_send+0xc8>)
    a892:	4561      	cmp	r1, ip
    a894:	bf18      	it	ne
    a896:	4603      	movne	r3, r0
				&chan->chan.chan);
    a898:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    a89a:	4630      	mov	r0, r6
    a89c:	9500      	str	r5, [sp, #0]
    a89e:	2104      	movs	r1, #4
    a8a0:	f01c f97c 	bl	26b9c <bt_l2cap_send_cb>
	if (!err) {
    a8a4:	4606      	mov	r6, r0
    a8a6:	2800      	cmp	r0, #0
    a8a8:	d0c3      	beq.n	a832 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
    a8aa:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    a8ac:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    a8b0:	fa13 f787 	uxtah	r7, r3, r7
    a8b4:	60a7      	str	r7, [r4, #8]
	buf->len = state->len;
    a8b6:	e7bf      	b.n	a838 <chan_send+0x2c>
		return att_rsp_sent;
    a8b8:	4b07      	ldr	r3, [pc, #28]	; (a8d8 <chan_send+0xcc>)
    a8ba:	e7ed      	b.n	a898 <chan_send+0x8c>
		return att_cfm_sent;
    a8bc:	4b07      	ldr	r3, [pc, #28]	; (a8dc <chan_send+0xd0>)
    a8be:	e7eb      	b.n	a898 <chan_send+0x8c>
    a8c0:	0002d79e 	.word	0x0002d79e
    a8c4:	0002afe8 	.word	0x0002afe8
    a8c8:	00026f4f 	.word	0x00026f4f
    a8cc:	00026f6b 	.word	0x00026f6b
    a8d0:	0000a54d 	.word	0x0000a54d
    a8d4:	00026c57 	.word	0x00026c57
    a8d8:	0000a53d 	.word	0x0000a53d
    a8dc:	0000a52d 	.word	0x0000a52d
    a8e0:	0000a9e9 	.word	0x0000a9e9

0000a8e4 <att_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    a8e4:	7a83      	ldrb	r3, [r0, #10]
    a8e6:	2b07      	cmp	r3, #7
{
    a8e8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    a8ea:	d005      	beq.n	a8f8 <att_get+0x14>
		BT_WARN("Not connected");
    a8ec:	480d      	ldr	r0, [pc, #52]	; (a924 <att_get+0x40>)
    a8ee:	2157      	movs	r1, #87	; 0x57
		BT_WARN("ATT channel flagged as disconnected");
    a8f0:	f019 fca4 	bl	2423c <printk>
		return NULL;
    a8f4:	2400      	movs	r4, #0
    a8f6:	e008      	b.n	a90a <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    a8f8:	2104      	movs	r1, #4
    a8fa:	f01c f973 	bl	26be4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    a8fe:	4604      	mov	r4, r0
    a900:	b928      	cbnz	r0, a90e <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
    a902:	2145      	movs	r1, #69	; 0x45
    a904:	4808      	ldr	r0, [pc, #32]	; (a928 <att_get+0x44>)
    a906:	f019 fc99 	bl	2423c <printk>
}
    a90a:	4620      	mov	r0, r4
    a90c:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    a90e:	2102      	movs	r1, #2
    a910:	30c0      	adds	r0, #192	; 0xc0
    a912:	f01c fa05 	bl	26d20 <atomic_test_bit>
    a916:	b110      	cbz	r0, a91e <att_get+0x3a>
		BT_WARN("ATT channel flagged as disconnected");
    a918:	2157      	movs	r1, #87	; 0x57
    a91a:	4804      	ldr	r0, [pc, #16]	; (a92c <att_get+0x48>)
    a91c:	e7e8      	b.n	a8f0 <att_get+0xc>
	return att_chan->att;
    a91e:	f854 4c08 	ldr.w	r4, [r4, #-8]
    a922:	e7f2      	b.n	a90a <att_get+0x26>
    a924:	0002d5a0 	.word	0x0002d5a0
    a928:	0002d5b3 	.word	0x0002d5b3
    a92c:	0002d5d3 	.word	0x0002d5d3

0000a930 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    a930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    a932:	2300      	movs	r3, #0
{
    a934:	4607      	mov	r7, r0
    a936:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    a938:	2200      	movs	r2, #0
    a93a:	4669      	mov	r1, sp
    a93c:	4825      	ldr	r0, [pc, #148]	; (a9d4 <bt_att_accept+0xa4>)
    a93e:	f015 fee5 	bl	2070c <k_mem_slab_alloc>
    a942:	4605      	mov	r5, r0
    a944:	b148      	cbz	r0, a95a <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
    a946:	4824      	ldr	r0, [pc, #144]	; (a9d8 <bt_att_accept+0xa8>)
    a948:	463a      	mov	r2, r7
    a94a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No available ATT channel for conn %p", att->conn);
    a94c:	f019 fc76 	bl	2423c <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    a950:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    a954:	4628      	mov	r0, r5
    a956:	b003      	add	sp, #12
    a958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    a95a:	4601      	mov	r1, r0
    a95c:	2230      	movs	r2, #48	; 0x30
    a95e:	9800      	ldr	r0, [sp, #0]
    a960:	f01b fc28 	bl	261b4 <memset>
	att->conn = conn;
    a964:	9c00      	ldr	r4, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    a966:	481d      	ldr	r0, [pc, #116]	; (a9dc <bt_att_accept+0xac>)
	list->tail = NULL;
    a968:	60a5      	str	r5, [r4, #8]
	list->head = NULL;
    a96a:	e9c4 7500 	strd	r7, r5, [r4]
	list->tail = NULL;
    a96e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    a972:	2200      	movs	r2, #0
    a974:	2300      	movs	r3, #0
    a976:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    a978:	9501      	str	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    a97a:	f015 fec7 	bl	2070c <k_mem_slab_alloc>
    a97e:	4605      	mov	r5, r0
    a980:	b118      	cbz	r0, a98a <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
    a982:	6822      	ldr	r2, [r4, #0]
    a984:	4816      	ldr	r0, [pc, #88]	; (a9e0 <bt_att_accept+0xb0>)
    a986:	2145      	movs	r1, #69	; 0x45
    a988:	e7e0      	b.n	a94c <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
    a98a:	4601      	mov	r1, r0
    a98c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a990:	9801      	ldr	r0, [sp, #4]
    a992:	f01b fc0f 	bl	261b4 <memset>
	chan->chan.chan.ops = &ops;
    a996:	9801      	ldr	r0, [sp, #4]
    a998:	4b12      	ldr	r3, [pc, #72]	; (a9e4 <bt_att_accept+0xb4>)
    a99a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    a99c:	30d0      	adds	r0, #208	; 0xd0
    a99e:	f01f fc34 	bl	2a20a <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    a9a2:	9801      	ldr	r0, [sp, #4]
    a9a4:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
    a9a8:	2208      	movs	r2, #8
    a9aa:	4611      	mov	r1, r2
    a9ac:	f01f fc93 	bl	2a2d6 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a9b0:	9b01      	ldr	r3, [sp, #4]
    a9b2:	f3bf 8f5b 	dmb	ish
    a9b6:	33c8      	adds	r3, #200	; 0xc8
    a9b8:	e853 2f00 	ldrex	r2, [r3]
    a9bc:	e843 5100 	strex	r1, r5, [r3]
    a9c0:	2900      	cmp	r1, #0
    a9c2:	d1f9      	bne.n	a9b8 <bt_att_accept+0x88>
    a9c4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    a9c8:	9b01      	ldr	r3, [sp, #4]
    a9ca:	f843 4b08 	str.w	r4, [r3], #8
	*ch = &chan->chan.chan;
    a9ce:	6033      	str	r3, [r6, #0]
	return 0;
    a9d0:	e7c0      	b.n	a954 <bt_att_accept+0x24>
    a9d2:	bf00      	nop
    a9d4:	20000cd4 	.word	0x20000cd4
    a9d8:	0002d629 	.word	0x0002d629
    a9dc:	20000cf0 	.word	0x20000cf0
    a9e0:	0002d653 	.word	0x0002d653
    a9e4:	200005a4 	.word	0x200005a4

0000a9e8 <chan_req_sent>:
	if (chan->req) {
    a9e8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    a9ec:	b13b      	cbz	r3, a9fe <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a9ee:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
    a9f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    a9f6:	2300      	movs	r3, #0
    a9f8:	4801      	ldr	r0, [pc, #4]	; (aa00 <chan_req_sent+0x18>)
    a9fa:	f017 bcb5 	b.w	22368 <k_delayed_work_submit_to_queue>
}
    a9fe:	4770      	bx	lr
    aa00:	20001988 	.word	0x20001988

0000aa04 <bt_att_chan_send_rsp.constprop.24>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    aa04:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    aa06:	4a07      	ldr	r2, [pc, #28]	; (aa24 <bt_att_chan_send_rsp.constprop.24+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    aa08:	4604      	mov	r4, r0
    aa0a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    aa0c:	f7ff fefe 	bl	a80c <chan_send>
	if (err) {
    aa10:	b130      	cbz	r0, aa20 <bt_att_chan_send_rsp.constprop.24+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    aa12:	4629      	mov	r1, r5
    aa14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
    aa18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    aa1c:	f012 bd78 	b.w	1d510 <net_buf_put>
}
    aa20:	bd38      	pop	{r3, r4, r5, pc}
    aa22:	bf00      	nop
    aa24:	00026f4f 	.word	0x00026f4f

0000aa28 <bt_att_connected>:
{
    aa28:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    aa2a:	2104      	movs	r1, #4
{
    aa2c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    aa2e:	6800      	ldr	r0, [r0, #0]
    aa30:	f01c f8cd 	bl	26bce <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
    aa34:	4605      	mov	r5, r0
    aa36:	b950      	cbnz	r0, aa4e <bt_att_connected+0x26>
    aa38:	4918      	ldr	r1, [pc, #96]	; (aa9c <bt_att_connected+0x74>)
    aa3a:	4819      	ldr	r0, [pc, #100]	; (aaa0 <bt_att_connected+0x78>)
    aa3c:	f640 2248 	movw	r2, #2632	; 0xa48
    aa40:	f019 fbfc 	bl	2423c <printk>
    aa44:	f640 2148 	movw	r1, #2632	; 0xa48
    aa48:	4814      	ldr	r0, [pc, #80]	; (aa9c <bt_att_connected+0x74>)
    aa4a:	f019 fea9 	bl	247a0 <assert_post_action>
	struct bt_att *att = att_chan->att;
    aa4e:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    aa52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    aa54:	b91b      	cbnz	r3, aa5e <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
    aa56:	f105 000c 	add.w	r0, r5, #12
    aa5a:	f01f fbd6 	bl	2a20a <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    aa5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
    aa60:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
    aa64:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
    aa66:	f504 739a 	add.w	r3, r4, #308	; 0x134
	list->head = node;
    aa6a:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
    aa6c:	b902      	cbnz	r2, aa70 <bt_att_connected+0x48>
	list->tail = node;
    aa6e:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    aa70:	2103      	movs	r1, #3
    aa72:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    aa76:	f01c f953 	bl	26d20 <atomic_test_bit>
    aa7a:	b920      	cbnz	r0, aa86 <bt_att_connected+0x5e>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    aa7c:	2317      	movs	r3, #23
    aa7e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    aa82:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    aa86:	2230      	movs	r2, #48	; 0x30
    aa88:	2100      	movs	r1, #0
    aa8a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    aa8e:	f01b fb91 	bl	261b4 <memset>
    aa92:	4b04      	ldr	r3, [pc, #16]	; (aaa4 <bt_att_connected+0x7c>)
    aa94:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
    aa98:	bd38      	pop	{r3, r4, r5, pc}
    aa9a:	bf00      	nop
    aa9c:	0002d6a7 	.word	0x0002d6a7
    aaa0:	0002bced 	.word	0x0002bced
    aaa4:	0000b3d1 	.word	0x0000b3d1

0000aaa8 <bt_att_chan_req_send>:
{
    aaa8:	b570      	push	{r4, r5, r6, lr}
    aaaa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
    aaac:	4604      	mov	r4, r0
    aaae:	b950      	cbnz	r0, aac6 <bt_att_chan_req_send+0x1e>
    aab0:	4924      	ldr	r1, [pc, #144]	; (ab44 <bt_att_chan_req_send+0x9c>)
    aab2:	4825      	ldr	r0, [pc, #148]	; (ab48 <bt_att_chan_req_send+0xa0>)
    aab4:	f240 2237 	movw	r2, #567	; 0x237
    aab8:	f019 fbc0 	bl	2423c <printk>
    aabc:	f240 2137 	movw	r1, #567	; 0x237
    aac0:	4820      	ldr	r0, [pc, #128]	; (ab44 <bt_att_chan_req_send+0x9c>)
    aac2:	f019 fe6d 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(req);
    aac6:	b955      	cbnz	r5, aade <bt_att_chan_req_send+0x36>
    aac8:	491e      	ldr	r1, [pc, #120]	; (ab44 <bt_att_chan_req_send+0x9c>)
    aaca:	481f      	ldr	r0, [pc, #124]	; (ab48 <bt_att_chan_req_send+0xa0>)
    aacc:	f44f 720e 	mov.w	r2, #568	; 0x238
    aad0:	f019 fbb4 	bl	2423c <printk>
    aad4:	f44f 710e 	mov.w	r1, #568	; 0x238
    aad8:	481a      	ldr	r0, [pc, #104]	; (ab44 <bt_att_chan_req_send+0x9c>)
    aada:	f019 fe61 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
    aade:	686b      	ldr	r3, [r5, #4]
    aae0:	b953      	cbnz	r3, aaf8 <bt_att_chan_req_send+0x50>
    aae2:	4918      	ldr	r1, [pc, #96]	; (ab44 <bt_att_chan_req_send+0x9c>)
    aae4:	4818      	ldr	r0, [pc, #96]	; (ab48 <bt_att_chan_req_send+0xa0>)
    aae6:	f240 2239 	movw	r2, #569	; 0x239
    aaea:	f019 fba7 	bl	2423c <printk>
    aaee:	f240 2139 	movw	r1, #569	; 0x239
    aaf2:	4814      	ldr	r0, [pc, #80]	; (ab44 <bt_att_chan_req_send+0x9c>)
    aaf4:	f019 fe54 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
    aaf8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
    aafc:	b153      	cbz	r3, ab14 <bt_att_chan_req_send+0x6c>
    aafe:	4911      	ldr	r1, [pc, #68]	; (ab44 <bt_att_chan_req_send+0x9c>)
    ab00:	4811      	ldr	r0, [pc, #68]	; (ab48 <bt_att_chan_req_send+0xa0>)
    ab02:	f240 223a 	movw	r2, #570	; 0x23a
    ab06:	f019 fb99 	bl	2423c <printk>
    ab0a:	f240 213a 	movw	r1, #570	; 0x23a
    ab0e:	480d      	ldr	r0, [pc, #52]	; (ab44 <bt_att_chan_req_send+0x9c>)
    ab10:	f019 fe46 	bl	247a0 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    ab14:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
    ab18:	2200      	movs	r2, #0
    ab1a:	2300      	movs	r3, #0
    ab1c:	4630      	mov	r0, r6
    ab1e:	f017 f9f1 	bl	21f04 <z_impl_k_sem_take>
    ab22:	2800      	cmp	r0, #0
    ab24:	db0a      	blt.n	ab3c <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
    ab26:	4620      	mov	r0, r4
    ab28:	4629      	mov	r1, r5
    ab2a:	f01c fa2c 	bl	26f86 <chan_req_send>
	if (err < 0) {
    ab2e:	1e04      	subs	r4, r0, #0
    ab30:	da02      	bge.n	ab38 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
    ab32:	4630      	mov	r0, r6
    ab34:	f017 f9aa 	bl	21e8c <z_impl_k_sem_give>
}
    ab38:	4620      	mov	r0, r4
    ab3a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    ab3c:	f06f 040a 	mvn.w	r4, #10
    ab40:	e7fa      	b.n	ab38 <bt_att_chan_req_send+0x90>
    ab42:	bf00      	nop
    ab44:	0002d6a7 	.word	0x0002d6a7
    ab48:	0002bced 	.word	0x0002bced

0000ab4c <att_write_cmd>:
{
    ab4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab4e:	4604      	mov	r4, r0
    ab50:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    ab52:	f101 0008 	add.w	r0, r1, #8
    ab56:	460d      	mov	r5, r1
    ab58:	f01e fee3 	bl	29922 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ab5c:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    ab5e:	68af      	ldr	r7, [r5, #8]
    ab60:	89ad      	ldrh	r5, [r5, #12]
    ab62:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ab64:	2100      	movs	r1, #0
    ab66:	6818      	ldr	r0, [r3, #0]
    ab68:	f01c fdf9 	bl	2775e <bt_gatt_change_aware>
    ab6c:	b320      	cbz	r0, abb8 <att_write_cmd+0x6c>
	if (!handle) {
    ab6e:	b32e      	cbz	r6, abbc <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
    ab70:	2218      	movs	r2, #24
    ab72:	2100      	movs	r1, #0
    ab74:	4668      	mov	r0, sp
    ab76:	f01b fb1d 	bl	261b4 <memset>
	data.conn = chan->att->conn;
    ab7a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ab7c:	4a10      	ldr	r2, [pc, #64]	; (abc0 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
    ab7e:	681b      	ldr	r3, [r3, #0]
    ab80:	9300      	str	r3, [sp, #0]
	data.req = req;
    ab82:	2300      	movs	r3, #0
    ab84:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    ab88:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ab8c:	2301      	movs	r3, #1
    ab8e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ab92:	4631      	mov	r1, r6
    ab94:	466b      	mov	r3, sp
    ab96:	4630      	mov	r0, r6
	data.value = value;
    ab98:	9703      	str	r7, [sp, #12]
	data.len = len;
    ab9a:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ab9e:	f01c f8c8 	bl	26d32 <bt_gatt_foreach_attr>
	if (data.err) {
    aba2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    aba6:	b923      	cbnz	r3, abb2 <att_write_cmd+0x66>
	if (data.buf) {
    aba8:	9901      	ldr	r1, [sp, #4]
    abaa:	b111      	cbz	r1, abb2 <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    abac:	4620      	mov	r0, r4
    abae:	f7ff ff29 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
    abb2:	2000      	movs	r0, #0
}
    abb4:	b007      	add	sp, #28
    abb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    abb8:	2012      	movs	r0, #18
    abba:	e7fb      	b.n	abb4 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
    abbc:	2001      	movs	r0, #1
    abbe:	e7f9      	b.n	abb4 <att_write_cmd+0x68>
    abc0:	00027017 	.word	0x00027017

0000abc4 <bt_att_chan_create_pdu>:
{
    abc4:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    abc6:	1c53      	adds	r3, r2, #1
    abc8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    abcc:	4293      	cmp	r3, r2
{
    abce:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    abd0:	d906      	bls.n	abe0 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    abd2:	2157      	movs	r1, #87	; 0x57
    abd4:	4813      	ldr	r0, [pc, #76]	; (ac24 <bt_att_chan_create_pdu+0x60>)
    abd6:	f019 fb31 	bl	2423c <printk>
		return NULL;
    abda:	2400      	movs	r4, #0
}
    abdc:	4620      	mov	r0, r4
    abde:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    abe0:	4608      	mov	r0, r1
    abe2:	f01c f850 	bl	26c86 <att_op_get_type>
    abe6:	2802      	cmp	r0, #2
    abe8:	d001      	beq.n	abee <bt_att_chan_create_pdu+0x2a>
    abea:	2804      	cmp	r0, #4
    abec:	d10e      	bne.n	ac0c <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    abee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    abf2:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    abf4:	2100      	movs	r1, #0
    abf6:	4608      	mov	r0, r1
    abf8:	f01b ffcd 	bl	26b96 <bt_l2cap_create_pdu_timeout>
    abfc:	4604      	mov	r4, r0
	if (!buf) {
    abfe:	b950      	cbnz	r0, ac16 <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    ac00:	462a      	mov	r2, r5
    ac02:	2145      	movs	r1, #69	; 0x45
    ac04:	4808      	ldr	r0, [pc, #32]	; (ac28 <bt_att_chan_create_pdu+0x64>)
    ac06:	f019 fb19 	bl	2423c <printk>
		return NULL;
    ac0a:	e7e7      	b.n	abdc <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
    ac0c:	f04f 32ff 	mov.w	r2, #4294967295
    ac10:	f04f 33ff 	mov.w	r3, #4294967295
    ac14:	e7ee      	b.n	abf4 <bt_att_chan_create_pdu+0x30>
	return net_buf_simple_add(&buf->b, len);
    ac16:	2101      	movs	r1, #1
    ac18:	3008      	adds	r0, #8
    ac1a:	f012 fdbd 	bl	1d798 <net_buf_simple_add>
	hdr->code = op;
    ac1e:	7005      	strb	r5, [r0, #0]
	return buf;
    ac20:	e7dc      	b.n	abdc <bt_att_chan_create_pdu+0x18>
    ac22:	bf00      	nop
    ac24:	0002d67d 	.word	0x0002d67d
    ac28:	0002d49b 	.word	0x0002d49b

0000ac2c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    ac2c:	898b      	ldrh	r3, [r1, #12]
{
    ac2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac32:	4604      	mov	r4, r0
    ac34:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    ac36:	b933      	cbnz	r3, ac46 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
    ac38:	483c      	ldr	r0, [pc, #240]	; (ad2c <bt_att_recv+0x100>)
    ac3a:	2145      	movs	r1, #69	; 0x45
			BT_WARN("Ignoring unexpected indication");
    ac3c:	f019 fafe 	bl	2423c <printk>
}
    ac40:	2000      	movs	r0, #0
    ac42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    ac46:	2101      	movs	r1, #1
    ac48:	f108 0008 	add.w	r0, r8, #8
    ac4c:	f012 fd86 	bl	1d75c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    ac50:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ac54:	4605      	mov	r5, r0
    ac56:	2b00      	cmp	r3, #0
    ac58:	d0f2      	beq.n	ac40 <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
    ac5a:	4935      	ldr	r1, [pc, #212]	; (ad30 <bt_att_recv+0x104>)
    ac5c:	7802      	ldrb	r2, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    ac5e:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ac62:	2300      	movs	r3, #0
    ac64:	4608      	mov	r0, r1
		if (hdr->code == handlers[i].op) {
    ac66:	f811 7033 	ldrb.w	r7, [r1, r3, lsl #3]
    ac6a:	4297      	cmp	r7, r2
    ac6c:	d117      	bne.n	ac9e <bt_att_recv+0x72>
		if (handler->type == ATT_REQUEST &&
    ac6e:	00db      	lsls	r3, r3, #3
    ac70:	4419      	add	r1, r3
    ac72:	788f      	ldrb	r7, [r1, #2]
    ac74:	2f01      	cmp	r7, #1
    ac76:	d127      	bne.n	acc8 <bt_att_recv+0x9c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac78:	f3bf 8f5b 	dmb	ish
    ac7c:	34c0      	adds	r4, #192	; 0xc0
    ac7e:	e854 2f00 	ldrex	r2, [r4]
    ac82:	f042 0101 	orr.w	r1, r2, #1
    ac86:	e844 1c00 	strex	ip, r1, [r4]
    ac8a:	f1bc 0f00 	cmp.w	ip, #0
    ac8e:	d1f6      	bne.n	ac7e <bt_att_recv+0x52>
    ac90:	f3bf 8f5b 	dmb	ish
    ac94:	07d1      	lsls	r1, r2, #31
    ac96:	d52c      	bpl.n	acf2 <bt_att_recv+0xc6>
			BT_WARN("Ignoring unexpected request");
    ac98:	2157      	movs	r1, #87	; 0x57
    ac9a:	4826      	ldr	r0, [pc, #152]	; (ad34 <bt_att_recv+0x108>)
    ac9c:	e7ce      	b.n	ac3c <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ac9e:	3301      	adds	r3, #1
    aca0:	2b0d      	cmp	r3, #13
    aca2:	d1e0      	bne.n	ac66 <bt_att_recv+0x3a>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    aca4:	2157      	movs	r1, #87	; 0x57
    aca6:	4824      	ldr	r0, [pc, #144]	; (ad38 <bt_att_recv+0x10c>)
    aca8:	f019 fac8 	bl	2423c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    acac:	7829      	ldrb	r1, [r5, #0]
    acae:	4608      	mov	r0, r1
    acb0:	f01b ffe9 	bl	26c86 <att_op_get_type>
    acb4:	2800      	cmp	r0, #0
    acb6:	d0c3      	beq.n	ac40 <bt_att_recv+0x14>
	if (!req) {
    acb8:	2900      	cmp	r1, #0
    acba:	d0c1      	beq.n	ac40 <bt_att_recv+0x14>
    acbc:	2306      	movs	r3, #6
    acbe:	2200      	movs	r2, #0
    acc0:	4630      	mov	r0, r6
    acc2:	f01c fa40 	bl	27146 <send_err_rsp.part.12>
    acc6:	e7bb      	b.n	ac40 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
    acc8:	2f05      	cmp	r7, #5
    acca:	d112      	bne.n	acf2 <bt_att_recv+0xc6>
    accc:	f3bf 8f5b 	dmb	ish
    acd0:	34c0      	adds	r4, #192	; 0xc0
    acd2:	e854 2f00 	ldrex	r2, [r4]
    acd6:	f042 0102 	orr.w	r1, r2, #2
    acda:	e844 1c00 	strex	ip, r1, [r4]
    acde:	f1bc 0f00 	cmp.w	ip, #0
    ace2:	d1f6      	bne.n	acd2 <bt_att_recv+0xa6>
    ace4:	f3bf 8f5b 	dmb	ish
    ace8:	0792      	lsls	r2, r2, #30
    acea:	d502      	bpl.n	acf2 <bt_att_recv+0xc6>
			BT_WARN("Ignoring unexpected indication");
    acec:	2157      	movs	r1, #87	; 0x57
    acee:	4813      	ldr	r0, [pc, #76]	; (ad3c <bt_att_recv+0x110>)
    acf0:	e7a4      	b.n	ac3c <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
    acf2:	4403      	add	r3, r0
    acf4:	f8b8 200c 	ldrh.w	r2, [r8, #12]
    acf8:	7859      	ldrb	r1, [r3, #1]
    acfa:	4291      	cmp	r1, r2
    acfc:	d908      	bls.n	ad10 <bt_att_recv+0xe4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    acfe:	782b      	ldrb	r3, [r5, #0]
    ad00:	480f      	ldr	r0, [pc, #60]	; (ad40 <bt_att_recv+0x114>)
    ad02:	2145      	movs	r1, #69	; 0x45
    ad04:	f019 fa9a 	bl	2423c <printk>
	if (handler->type == ATT_REQUEST && err) {
    ad08:	2f01      	cmp	r7, #1
    ad0a:	d199      	bne.n	ac40 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
    ad0c:	2304      	movs	r3, #4
    ad0e:	e008      	b.n	ad22 <bt_att_recv+0xf6>
		err = handler->func(att_chan, buf);
    ad10:	685b      	ldr	r3, [r3, #4]
    ad12:	4641      	mov	r1, r8
    ad14:	4630      	mov	r0, r6
    ad16:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    ad18:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    ad1a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    ad1c:	d190      	bne.n	ac40 <bt_att_recv+0x14>
    ad1e:	2800      	cmp	r0, #0
    ad20:	d08e      	beq.n	ac40 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
    ad22:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    ad24:	2900      	cmp	r1, #0
    ad26:	d08b      	beq.n	ac40 <bt_att_recv+0x14>
    ad28:	e7c9      	b.n	acbe <bt_att_recv+0x92>
    ad2a:	bf00      	nop
    ad2c:	0002d6f6 	.word	0x0002d6f6
    ad30:	0002affc 	.word	0x0002affc
    ad34:	0002d716 	.word	0x0002d716
    ad38:	0002d77f 	.word	0x0002d77f
    ad3c:	0002d737 	.word	0x0002d737
    ad40:	0002d75b 	.word	0x0002d75b

0000ad44 <att_write_req>:
{
    ad44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ad48:	4605      	mov	r5, r0
    ad4a:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
    ad4c:	f101 0008 	add.w	r0, r1, #8
    ad50:	460c      	mov	r4, r1
    ad52:	f01e fde6 	bl	29922 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ad56:	682b      	ldr	r3, [r5, #0]
			     handle, 0, buf->data, buf->len);
    ad58:	f8d4 9008 	ldr.w	r9, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    ad5c:	89a4      	ldrh	r4, [r4, #12]
    ad5e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ad60:	2101      	movs	r1, #1
    ad62:	6818      	ldr	r0, [r3, #0]
    ad64:	f01c fcfb 	bl	2775e <bt_gatt_change_aware>
    ad68:	2800      	cmp	r0, #0
    ad6a:	d03f      	beq.n	adec <att_write_req+0xa8>
	if (!handle) {
    ad6c:	2e00      	cmp	r6, #0
    ad6e:	d03f      	beq.n	adf0 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
    ad70:	2218      	movs	r2, #24
    ad72:	2100      	movs	r1, #0
    ad74:	4668      	mov	r0, sp
    ad76:	f01b fa1d 	bl	261b4 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    ad7a:	2200      	movs	r2, #0
    ad7c:	2113      	movs	r1, #19
    ad7e:	4628      	mov	r0, r5
    ad80:	f7ff ff20 	bl	abc4 <bt_att_chan_create_pdu>
    ad84:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    ad86:	b378      	cbz	r0, ade8 <att_write_req+0xa4>
	data.conn = chan->att->conn;
    ad88:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ad8a:	4a1a      	ldr	r2, [pc, #104]	; (adf4 <att_write_req+0xb0>)
	data.conn = chan->att->conn;
    ad8c:	681b      	ldr	r3, [r3, #0]
    ad8e:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ad90:	2301      	movs	r3, #1
    ad92:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    ad96:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    ad9a:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    ad9c:	466b      	mov	r3, sp
    ad9e:	4631      	mov	r1, r6
    ada0:	4630      	mov	r0, r6
	data.len = len;
    ada2:	f8ad 4010 	strh.w	r4, [sp, #16]
	data.req = req;
    ada6:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    adaa:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    adae:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    adb2:	f01b ffbe 	bl	26d32 <bt_gatt_foreach_attr>
	if (data.err) {
    adb6:	f89d 4014 	ldrb.w	r4, [sp, #20]
    adba:	b174      	cbz	r4, adda <att_write_req+0x96>
			net_buf_unref(data.buf);
    adbc:	9801      	ldr	r0, [sp, #4]
    adbe:	f012 fbd5 	bl	1d56c <net_buf_unref>
	if (!req) {
    adc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    adc6:	4632      	mov	r2, r6
    adc8:	4641      	mov	r1, r8
    adca:	4628      	mov	r0, r5
    adcc:	f01c f9bb 	bl	27146 <send_err_rsp.part.12>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    add0:	463c      	mov	r4, r7
}
    add2:	4620      	mov	r0, r4
    add4:	b007      	add	sp, #28
    add6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    adda:	9901      	ldr	r1, [sp, #4]
    addc:	2900      	cmp	r1, #0
    adde:	d0f8      	beq.n	add2 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ade0:	4628      	mov	r0, r5
    ade2:	f7ff fe0f 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
    ade6:	e7f4      	b.n	add2 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    ade8:	240e      	movs	r4, #14
    adea:	e7f2      	b.n	add2 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    adec:	2412      	movs	r4, #18
    adee:	e7f0      	b.n	add2 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    adf0:	2401      	movs	r4, #1
    adf2:	e7ee      	b.n	add2 <att_write_req+0x8e>
    adf4:	00027017 	.word	0x00027017

0000adf8 <bt_att_create_pdu>:
{
    adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    adfa:	460f      	mov	r7, r1
    adfc:	4616      	mov	r6, r2
	att = att_get(conn);
    adfe:	f7ff fd71 	bl	a8e4 <att_get>
	if (!att) {
    ae02:	b198      	cbz	r0, ae2c <bt_att_create_pdu+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ae04:	6a83      	ldr	r3, [r0, #40]	; 0x28
	return list->head;
    ae06:	1c75      	adds	r5, r6, #1
    ae08:	b15b      	cbz	r3, ae22 <bt_att_create_pdu+0x2a>
    ae0a:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
    ae0e:	d008      	beq.n	ae22 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ae10:	681b      	ldr	r3, [r3, #0]
    ae12:	b10b      	cbz	r3, ae18 <bt_att_create_pdu+0x20>
    ae14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    ae18:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    ae1c:	4295      	cmp	r5, r2
    ae1e:	d907      	bls.n	ae30 <bt_att_create_pdu+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ae20:	b963      	cbnz	r3, ae3c <bt_att_create_pdu+0x44>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    ae22:	462a      	mov	r2, r5
    ae24:	2157      	movs	r1, #87	; 0x57
    ae26:	4809      	ldr	r0, [pc, #36]	; (ae4c <bt_att_create_pdu+0x54>)
    ae28:	f019 fa08 	bl	2423c <printk>
}
    ae2c:	2000      	movs	r0, #0
    ae2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    ae30:	4632      	mov	r2, r6
    ae32:	4639      	mov	r1, r7
}
    ae34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    ae38:	f7ff bec4 	b.w	abc4 <bt_att_chan_create_pdu>
    ae3c:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ae40:	b10c      	cbz	r4, ae46 <bt_att_create_pdu+0x4e>
    ae42:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
    ae46:	4618      	mov	r0, r3
    ae48:	4623      	mov	r3, r4
    ae4a:	e7e5      	b.n	ae18 <bt_att_create_pdu+0x20>
    ae4c:	0002d6d6 	.word	0x0002d6d6

0000ae50 <att_read_group_req>:
{
    ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    ae54:	7b0c      	ldrb	r4, [r1, #12]
    ae56:	3c04      	subs	r4, #4
    ae58:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    ae5a:	2c02      	cmp	r4, #2
{
    ae5c:	4606      	mov	r6, r0
    ae5e:	b08c      	sub	sp, #48	; 0x30
    ae60:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    ae62:	d001      	beq.n	ae68 <att_read_group_req+0x18>
    ae64:	2c10      	cmp	r4, #16
    ae66:	d16e      	bne.n	af46 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    ae68:	2104      	movs	r1, #4
    ae6a:	3008      	adds	r0, #8
    ae6c:	f012 fc76 	bl	1d75c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ae70:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    ae74:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    ae76:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    ae78:	1d01      	adds	r1, r0, #4
    ae7a:	4622      	mov	r2, r4
    ae7c:	4640      	mov	r0, r8
    ae7e:	f01b fc02 	bl	26686 <bt_uuid_create>
    ae82:	2800      	cmp	r0, #0
    ae84:	d061      	beq.n	af4a <att_read_group_req+0xfa>
	if (!start || !end) {
    ae86:	2d00      	cmp	r5, #0
    ae88:	d03a      	beq.n	af00 <att_read_group_req+0xb0>
    ae8a:	2400      	movs	r4, #0
    ae8c:	2f00      	cmp	r7, #0
    ae8e:	d036      	beq.n	aefe <att_read_group_req+0xae>
	if (start > end) {
    ae90:	42bd      	cmp	r5, r7
    ae92:	d835      	bhi.n	af00 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    ae94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ae98:	4669      	mov	r1, sp
    ae9a:	4640      	mov	r0, r8
    ae9c:	f88d 4000 	strb.w	r4, [sp]
    aea0:	f8ad 3002 	strh.w	r3, [sp, #2]
    aea4:	f01b fbc5 	bl	26632 <bt_uuid_cmp>
    aea8:	2800      	cmp	r0, #0
    aeaa:	d134      	bne.n	af16 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    aeac:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    aeae:	2214      	movs	r2, #20
    aeb0:	2100      	movs	r1, #0
    aeb2:	a807      	add	r0, sp, #28
    aeb4:	f01b f97e 	bl	261b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    aeb8:	2201      	movs	r2, #1
    aeba:	2111      	movs	r1, #17
    aebc:	4620      	mov	r0, r4
    aebe:	f7ff ff9b 	bl	adf8 <bt_att_create_pdu>
    aec2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    aec4:	2800      	cmp	r0, #0
    aec6:	d040      	beq.n	af4a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    aec8:	2101      	movs	r1, #1
    aeca:	3008      	adds	r0, #8
	data.uuid = uuid;
    aecc:	e9cd 6807 	strd	r6, r8, [sp, #28]
    aed0:	f012 fc62 	bl	1d798 <net_buf_simple_add>
	data.rsp->len = 0U;
    aed4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    aed8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    aeda:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    aedc:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    aee0:	4a1b      	ldr	r2, [pc, #108]	; (af50 <att_read_group_req+0x100>)
	data.group = NULL;
    aee2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    aee6:	4639      	mov	r1, r7
    aee8:	4628      	mov	r0, r5
    aeea:	f01b ff22 	bl	26d32 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    aeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aef0:	781c      	ldrb	r4, [r3, #0]
    aef2:	bb1c      	cbnz	r4, af3c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    aef4:	9809      	ldr	r0, [sp, #36]	; 0x24
    aef6:	f012 fb39 	bl	1d56c <net_buf_unref>
	if (!req) {
    aefa:	230a      	movs	r3, #10
    aefc:	e018      	b.n	af30 <att_read_group_req+0xe0>
			*err = 0U;
    aefe:	463d      	mov	r5, r7
	if (!req) {
    af00:	2301      	movs	r3, #1
    af02:	462a      	mov	r2, r5
    af04:	2110      	movs	r1, #16
    af06:	4630      	mov	r0, r6
    af08:	f01c f91d 	bl	27146 <send_err_rsp.part.12>
		return 0;
    af0c:	2400      	movs	r4, #0
}
    af0e:	4620      	mov	r0, r4
    af10:	b00c      	add	sp, #48	; 0x30
    af12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    af16:	f642 0301 	movw	r3, #10241	; 0x2801
    af1a:	a901      	add	r1, sp, #4
    af1c:	4640      	mov	r0, r8
    af1e:	f88d 4004 	strb.w	r4, [sp, #4]
    af22:	f8ad 3006 	strh.w	r3, [sp, #6]
    af26:	f01b fb84 	bl	26632 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    af2a:	2800      	cmp	r0, #0
    af2c:	d0be      	beq.n	aeac <att_read_group_req+0x5c>
	if (!req) {
    af2e:	2310      	movs	r3, #16
    af30:	462a      	mov	r2, r5
    af32:	2110      	movs	r1, #16
    af34:	4630      	mov	r0, r6
    af36:	f01c f906 	bl	27146 <send_err_rsp.part.12>
		return 0;
    af3a:	e7e8      	b.n	af0e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    af3c:	9909      	ldr	r1, [sp, #36]	; 0x24
    af3e:	4630      	mov	r0, r6
    af40:	f7ff fd60 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    af44:	e7e2      	b.n	af0c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    af46:	2404      	movs	r4, #4
    af48:	e7e1      	b.n	af0e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    af4a:	240e      	movs	r4, #14
    af4c:	e7df      	b.n	af0e <att_read_group_req+0xbe>
    af4e:	bf00      	nop
    af50:	0000a575 	.word	0x0000a575

0000af54 <att_read_mult_req>:
{
    af54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    af58:	6886      	ldr	r6, [r0, #8]
{
    af5a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    af5c:	2210      	movs	r2, #16
{
    af5e:	4604      	mov	r4, r0
    af60:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    af62:	4668      	mov	r0, sp
    af64:	2100      	movs	r1, #0
    af66:	f01b f925 	bl	261b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    af6a:	2200      	movs	r2, #0
    af6c:	210f      	movs	r1, #15
    af6e:	4630      	mov	r0, r6
    af70:	f7ff ff42 	bl	adf8 <bt_att_create_pdu>
    af74:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    af76:	b358      	cbz	r0, afd0 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    af78:	f8df 9058 	ldr.w	r9, [pc, #88]	; afd4 <att_read_mult_req+0x80>
	data.chan = chan;
    af7c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    af7e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    af82:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    af86:	89ab      	ldrh	r3, [r5, #12]
    af88:	2b01      	cmp	r3, #1
    af8a:	d804      	bhi.n	af96 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    af8c:	9902      	ldr	r1, [sp, #8]
    af8e:	4620      	mov	r0, r4
    af90:	f7ff fd38 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
    af94:	e018      	b.n	afc8 <att_read_mult_req+0x74>
    af96:	4638      	mov	r0, r7
    af98:	f01e fcc3 	bl	29922 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    af9c:	466b      	mov	r3, sp
    af9e:	464a      	mov	r2, r9
    afa0:	4601      	mov	r1, r0
    afa2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    afa4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    afa8:	f01b fec3 	bl	26d32 <bt_gatt_foreach_attr>
		if (data.err) {
    afac:	f89d 300c 	ldrb.w	r3, [sp, #12]
    afb0:	2b00      	cmp	r3, #0
    afb2:	d0e8      	beq.n	af86 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    afb4:	9802      	ldr	r0, [sp, #8]
    afb6:	f012 fad9 	bl	1d56c <net_buf_unref>
	if (!req) {
    afba:	f89d 300c 	ldrb.w	r3, [sp, #12]
    afbe:	4632      	mov	r2, r6
    afc0:	210e      	movs	r1, #14
    afc2:	4620      	mov	r0, r4
    afc4:	f01c f8bf 	bl	27146 <send_err_rsp.part.12>
	return 0;
    afc8:	2000      	movs	r0, #0
}
    afca:	b005      	add	sp, #20
    afcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    afd0:	200e      	movs	r0, #14
    afd2:	e7fa      	b.n	afca <att_read_mult_req+0x76>
    afd4:	000270f7 	.word	0x000270f7

0000afd8 <att_read_rsp>:
{
    afd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    afdc:	6884      	ldr	r4, [r0, #8]
{
    afde:	4605      	mov	r5, r0
    afe0:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    afe2:	4620      	mov	r0, r4
    afe4:	2101      	movs	r1, #1
{
    afe6:	4690      	mov	r8, r2
    afe8:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    afea:	f01c fbb8 	bl	2775e <bt_gatt_change_aware>
    afee:	b388      	cbz	r0, b054 <att_read_rsp+0x7c>
	if (!handle) {
    aff0:	b396      	cbz	r6, b058 <att_read_rsp+0x80>
	(void)memset(&data, 0, sizeof(data));
    aff2:	2210      	movs	r2, #16
    aff4:	2100      	movs	r1, #0
    aff6:	4668      	mov	r0, sp
    aff8:	f01b f8dc 	bl	261b4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    affc:	2200      	movs	r2, #0
    affe:	4641      	mov	r1, r8
    b000:	4620      	mov	r0, r4
    b002:	f7ff fef9 	bl	adf8 <bt_att_create_pdu>
    b006:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b008:	b340      	cbz	r0, b05c <att_read_rsp+0x84>
	data.offset = offset;
    b00a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b00e:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b012:	2301      	movs	r3, #1
    b014:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b018:	4a11      	ldr	r2, [pc, #68]	; (b060 <att_read_rsp+0x88>)
	data.chan = chan;
    b01a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b01c:	466b      	mov	r3, sp
    b01e:	4631      	mov	r1, r6
    b020:	4630      	mov	r0, r6
    b022:	f01b fe86 	bl	26d32 <bt_gatt_foreach_attr>
	if (data.err) {
    b026:	f89d 400c 	ldrb.w	r4, [sp, #12]
    b02a:	b174      	cbz	r4, b04a <att_read_rsp+0x72>
		net_buf_unref(data.buf);
    b02c:	9802      	ldr	r0, [sp, #8]
    b02e:	f012 fa9d 	bl	1d56c <net_buf_unref>
	if (!req) {
    b032:	f89d 300c 	ldrb.w	r3, [sp, #12]
    b036:	4632      	mov	r2, r6
    b038:	4639      	mov	r1, r7
    b03a:	4628      	mov	r0, r5
    b03c:	f01c f883 	bl	27146 <send_err_rsp.part.12>
		return 0;
    b040:	2400      	movs	r4, #0
}
    b042:	4620      	mov	r0, r4
    b044:	b004      	add	sp, #16
    b046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b04a:	9902      	ldr	r1, [sp, #8]
    b04c:	4628      	mov	r0, r5
    b04e:	f7ff fcd9 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    b052:	e7f6      	b.n	b042 <att_read_rsp+0x6a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b054:	2412      	movs	r4, #18
    b056:	e7f4      	b.n	b042 <att_read_rsp+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    b058:	2401      	movs	r4, #1
    b05a:	e7f2      	b.n	b042 <att_read_rsp+0x6a>
		return BT_ATT_ERR_UNLIKELY;
    b05c:	240e      	movs	r4, #14
    b05e:	e7f0      	b.n	b042 <att_read_rsp+0x6a>
    b060:	000270f7 	.word	0x000270f7

0000b064 <att_read_type_req>:
{
    b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    b068:	7b0c      	ldrb	r4, [r1, #12]
    b06a:	3c04      	subs	r4, #4
    b06c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b06e:	2c02      	cmp	r4, #2
{
    b070:	4606      	mov	r6, r0
    b072:	b08c      	sub	sp, #48	; 0x30
    b074:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b076:	d001      	beq.n	b07c <att_read_type_req+0x18>
    b078:	2c10      	cmp	r4, #16
    b07a:	d14f      	bne.n	b11c <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    b07c:	2104      	movs	r1, #4
    b07e:	3008      	adds	r0, #8
    b080:	f012 fb6c 	bl	1d75c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b084:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    b088:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b08a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b08c:	1d01      	adds	r1, r0, #4
    b08e:	4622      	mov	r2, r4
    b090:	4640      	mov	r0, r8
    b092:	f01b faf8 	bl	26686 <bt_uuid_create>
    b096:	b188      	cbz	r0, b0bc <att_read_type_req+0x58>
	if (!start || !end) {
    b098:	b19d      	cbz	r5, b0c2 <att_read_type_req+0x5e>
    b09a:	b18f      	cbz	r7, b0c0 <att_read_type_req+0x5c>
	if (start > end) {
    b09c:	42bd      	cmp	r5, r7
    b09e:	d810      	bhi.n	b0c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    b0a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    b0a2:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    b0a4:	2100      	movs	r1, #0
    b0a6:	eb0d 0002 	add.w	r0, sp, r2
    b0aa:	f01b f883 	bl	261b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    b0ae:	2201      	movs	r2, #1
    b0b0:	2109      	movs	r1, #9
    b0b2:	4620      	mov	r0, r4
    b0b4:	f7ff fea0 	bl	adf8 <bt_att_create_pdu>
    b0b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    b0ba:	b968      	cbnz	r0, b0d8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    b0bc:	240e      	movs	r4, #14
    b0be:	e007      	b.n	b0d0 <att_read_type_req+0x6c>
			*err = 0U;
    b0c0:	463d      	mov	r5, r7
	if (!req) {
    b0c2:	2301      	movs	r3, #1
    b0c4:	462a      	mov	r2, r5
    b0c6:	2108      	movs	r1, #8
    b0c8:	4630      	mov	r0, r6
    b0ca:	f01c f83c 	bl	27146 <send_err_rsp.part.12>
		return 0;
    b0ce:	2400      	movs	r4, #0
}
    b0d0:	4620      	mov	r0, r4
    b0d2:	b00c      	add	sp, #48	; 0x30
    b0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    b0d8:	2101      	movs	r1, #1
    b0da:	3008      	adds	r0, #8
	data.uuid = uuid;
    b0dc:	e9cd 6806 	strd	r6, r8, [sp, #24]
    b0e0:	f012 fb5a 	bl	1d798 <net_buf_simple_add>
	data.rsp->len = 0U;
    b0e4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b0e8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b0ea:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b0ec:	4a0c      	ldr	r2, [pc, #48]	; (b120 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    b0ee:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b0f2:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b0f4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b0f8:	4628      	mov	r0, r5
    b0fa:	ab06      	add	r3, sp, #24
    b0fc:	f01b fe19 	bl	26d32 <bt_gatt_foreach_attr>
	if (data.err) {
    b100:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    b104:	b12c      	cbz	r4, b112 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    b106:	9808      	ldr	r0, [sp, #32]
    b108:	f012 fa30 	bl	1d56c <net_buf_unref>
	if (!req) {
    b10c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    b110:	e7d8      	b.n	b0c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b112:	9908      	ldr	r1, [sp, #32]
    b114:	4630      	mov	r0, r6
    b116:	f7ff fc75 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    b11a:	e7d9      	b.n	b0d0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    b11c:	2404      	movs	r4, #4
    b11e:	e7d7      	b.n	b0d0 <att_read_type_req+0x6c>
    b120:	0000a621 	.word	0x0000a621

0000b124 <att_find_type_req>:
{
    b124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b128:	4689      	mov	r9, r1
    b12a:	b088      	sub	sp, #32
    b12c:	4606      	mov	r6, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    b12e:	2106      	movs	r1, #6
    b130:	f109 0008 	add.w	r0, r9, #8
    b134:	f012 fb12 	bl	1d75c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    b138:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
    b13a:	b315      	cbz	r5, b182 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    b13c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	if (!start || !end) {
    b140:	f1b8 0f00 	cmp.w	r8, #0
    b144:	d01c      	beq.n	b180 <att_find_type_req+0x5c>
	if (start > end) {
    b146:	4545      	cmp	r5, r8
    b148:	d81b      	bhi.n	b182 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    b14a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    b14c:	f8ad 3006 	strh.w	r3, [sp, #6]
    b150:	2400      	movs	r4, #0
    b152:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b156:	a902      	add	r1, sp, #8
    b158:	a801      	add	r0, sp, #4
	value = buf->data;
    b15a:	f8d9 a008 	ldr.w	sl, [r9, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    b15e:	f88d 4004 	strb.w	r4, [sp, #4]
    b162:	f88d 4008 	strb.w	r4, [sp, #8]
    b166:	f8ad 300a 	strh.w	r3, [sp, #10]
    b16a:	f01b fa62 	bl	26632 <bt_uuid_cmp>
    b16e:	4607      	mov	r7, r0
    b170:	b190      	cbz	r0, b198 <att_find_type_req+0x74>
	if (!req) {
    b172:	230a      	movs	r3, #10
    b174:	462a      	mov	r2, r5
    b176:	2106      	movs	r1, #6
    b178:	4630      	mov	r0, r6
    b17a:	f01b ffe4 	bl	27146 <send_err_rsp.part.12>
		return 0;
    b17e:	e007      	b.n	b190 <att_find_type_req+0x6c>
			*err = 0U;
    b180:	4645      	mov	r5, r8
	if (!req) {
    b182:	2301      	movs	r3, #1
    b184:	462a      	mov	r2, r5
    b186:	2106      	movs	r1, #6
    b188:	4630      	mov	r0, r6
    b18a:	f01b ffdc 	bl	27146 <send_err_rsp.part.12>
		return 0;
    b18e:	2400      	movs	r4, #0
}
    b190:	4620      	mov	r0, r4
    b192:	b008      	add	sp, #32
    b194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    b198:	f899 400c 	ldrb.w	r4, [r9, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    b19c:	f8d6 9008 	ldr.w	r9, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
    b1a0:	4601      	mov	r1, r0
    b1a2:	2214      	movs	r2, #20
    b1a4:	a803      	add	r0, sp, #12
    b1a6:	f01b f805 	bl	261b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    b1aa:	463a      	mov	r2, r7
    b1ac:	2107      	movs	r1, #7
    b1ae:	4648      	mov	r0, r9
    b1b0:	f7ff fe22 	bl	adf8 <bt_att_create_pdu>
    b1b4:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    b1b6:	b1d8      	cbz	r0, b1f0 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b1b8:	230a      	movs	r3, #10
    b1ba:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b1be:	4a0d      	ldr	r2, [pc, #52]	; (b1f4 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    b1c0:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b1c4:	ab03      	add	r3, sp, #12
    b1c6:	4641      	mov	r1, r8
    b1c8:	4628      	mov	r0, r5
	data.chan = chan;
    b1ca:	9603      	str	r6, [sp, #12]
	data.value = value;
    b1cc:	e9cd 7a05 	strd	r7, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b1d0:	f01b fdaf 	bl	26d32 <bt_gatt_foreach_attr>
	if (data.err) {
    b1d4:	f89d 401d 	ldrb.w	r4, [sp, #29]
    b1d8:	b12c      	cbz	r4, b1e6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    b1da:	9804      	ldr	r0, [sp, #16]
    b1dc:	f012 f9c6 	bl	1d56c <net_buf_unref>
	if (!req) {
    b1e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b1e4:	e7ce      	b.n	b184 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b1e6:	9904      	ldr	r1, [sp, #16]
    b1e8:	4630      	mov	r0, r6
    b1ea:	f7ff fc0b 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
	return 0;
    b1ee:	e7cf      	b.n	b190 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    b1f0:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    b1f2:	e7cd      	b.n	b190 <att_find_type_req+0x6c>
    b1f4:	0000a6c5 	.word	0x0000a6c5

0000b1f8 <att_find_info_req>:
{
    b1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    b1fa:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    b1fc:	881d      	ldrh	r5, [r3, #0]
{
    b1fe:	b085      	sub	sp, #20
    b200:	4606      	mov	r6, r0
	if (!start || !end) {
    b202:	b19d      	cbz	r5, b22c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    b204:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    b206:	b184      	cbz	r4, b22a <att_find_info_req+0x32>
	if (start > end) {
    b208:	42a5      	cmp	r5, r4
    b20a:	d80f      	bhi.n	b22c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    b20c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    b20e:	2210      	movs	r2, #16
    b210:	2100      	movs	r1, #0
    b212:	4668      	mov	r0, sp
    b214:	f01a ffce 	bl	261b4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    b218:	2200      	movs	r2, #0
    b21a:	2105      	movs	r1, #5
    b21c:	4638      	mov	r0, r7
    b21e:	f7ff fdeb 	bl	adf8 <bt_att_create_pdu>
    b222:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    b224:	b958      	cbnz	r0, b23e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    b226:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    b228:	e007      	b.n	b23a <att_find_info_req+0x42>
			*err = 0U;
    b22a:	4625      	mov	r5, r4
	if (!req) {
    b22c:	2301      	movs	r3, #1
    b22e:	462a      	mov	r2, r5
    b230:	2104      	movs	r1, #4
    b232:	4630      	mov	r0, r6
    b234:	f01b ff87 	bl	27146 <send_err_rsp.part.12>
	return 0;
    b238:	2000      	movs	r0, #0
}
    b23a:	b005      	add	sp, #20
    b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b23e:	4621      	mov	r1, r4
    b240:	466b      	mov	r3, sp
    b242:	4a08      	ldr	r2, [pc, #32]	; (b264 <att_find_info_req+0x6c>)
	data.chan = chan;
    b244:	9600      	str	r6, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b246:	4628      	mov	r0, r5
    b248:	f01b fd73 	bl	26d32 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    b24c:	9c02      	ldr	r4, [sp, #8]
    b24e:	b924      	cbnz	r4, b25a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    b250:	9801      	ldr	r0, [sp, #4]
    b252:	f012 f98b 	bl	1d56c <net_buf_unref>
	if (!req) {
    b256:	230a      	movs	r3, #10
    b258:	e7e9      	b.n	b22e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b25a:	9901      	ldr	r1, [sp, #4]
    b25c:	4630      	mov	r0, r6
    b25e:	f7ff fbd1 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
    b262:	e7e9      	b.n	b238 <att_find_info_req+0x40>
    b264:	00026e5f 	.word	0x00026e5f

0000b268 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    b268:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    b26a:	4602      	mov	r2, r0
    b26c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
    b26e:	2400      	movs	r4, #0
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    b270:	a901      	add	r1, sp, #4
    b272:	4807      	ldr	r0, [pc, #28]	; (b290 <bt_att_req_alloc+0x28>)
	struct bt_att_req *req = NULL;
    b274:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    b276:	f015 fa49 	bl	2070c <k_mem_slab_alloc>
    b27a:	4601      	mov	r1, r0
    b27c:	b930      	cbnz	r0, b28c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    b27e:	2218      	movs	r2, #24
    b280:	9801      	ldr	r0, [sp, #4]
    b282:	f01a ff97 	bl	261b4 <memset>

	return req;
    b286:	9801      	ldr	r0, [sp, #4]
}
    b288:	b002      	add	sp, #8
    b28a:	bd10      	pop	{r4, pc}
		return NULL;
    b28c:	4620      	mov	r0, r4
    b28e:	e7fb      	b.n	b288 <bt_att_req_alloc+0x20>
    b290:	20000d0c 	.word	0x20000d0c

0000b294 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    b294:	b507      	push	{r0, r1, r2, lr}
    b296:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    b298:	a901      	add	r1, sp, #4
    b29a:	4803      	ldr	r0, [pc, #12]	; (b2a8 <bt_att_req_free+0x14>)
    b29c:	f015 fa90 	bl	207c0 <k_mem_slab_free>
}
    b2a0:	b003      	add	sp, #12
    b2a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b2a6:	bf00      	nop
    b2a8:	20000d0c 	.word	0x20000d0c

0000b2ac <att_handle_rsp>:
{
    b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2b0:	4605      	mov	r5, r0
    b2b2:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    b2b4:	30f0      	adds	r0, #240	; 0xf0
{
    b2b6:	4689      	mov	r9, r1
    b2b8:	4692      	mov	sl, r2
    b2ba:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    b2bc:	f017 f8c4 	bl	22448 <k_delayed_work_cancel>
	if (!chan->req) {
    b2c0:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    b2c4:	2600      	movs	r6, #0
    b2c6:	b9fc      	cbnz	r4, b308 <att_handle_rsp+0x5c>
		BT_WARN("No pending ATT request");
    b2c8:	2157      	movs	r1, #87	; 0x57
    b2ca:	482a      	ldr	r0, [pc, #168]	; (b374 <att_handle_rsp+0xc8>)
    b2cc:	f018 ffb6 	bl	2423c <printk>
	att_process(chan->att);
    b2d0:	682f      	ldr	r7, [r5, #0]
	node = sys_slist_get(&att->reqs);
    b2d2:	1d38      	adds	r0, r7, #4
    b2d4:	f01b fc92 	bl	26bfc <sys_slist_get>
	if (!node) {
    b2d8:	4603      	mov	r3, r0
    b2da:	2800      	cmp	r0, #0
    b2dc:	d035      	beq.n	b34a <att_handle_rsp+0x9e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b2de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b2e0:	b15a      	cbz	r2, b2fa <att_handle_rsp+0x4e>
    b2e2:	f5b2 709e 	subs.w	r0, r2, #316	; 0x13c
    b2e6:	d008      	beq.n	b2fa <att_handle_rsp+0x4e>
    b2e8:	6816      	ldr	r6, [r2, #0]
    b2ea:	b10e      	cbz	r6, b2f0 <att_handle_rsp+0x44>
    b2ec:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
    b2f0:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
    b2f4:	b312      	cbz	r2, b33c <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b2f6:	2e00      	cmp	r6, #0
    b2f8:	d134      	bne.n	b364 <att_handle_rsp+0xb8>
Z_GENLIST_PREPEND(slist, snode)
    b2fa:	687a      	ldr	r2, [r7, #4]
	parent->next = child;
    b2fc:	601a      	str	r2, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    b2fe:	68ba      	ldr	r2, [r7, #8]
	list->head = node;
    b300:	607b      	str	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    b302:	bb12      	cbnz	r2, b34a <att_handle_rsp+0x9e>
	list->tail = node;
    b304:	60bb      	str	r3, [r7, #8]
    b306:	e020      	b.n	b34a <att_handle_rsp+0x9e>
	if (chan->req == &cancel) {
    b308:	4b1b      	ldr	r3, [pc, #108]	; (b378 <att_handle_rsp+0xcc>)
    b30a:	429c      	cmp	r4, r3
    b30c:	d103      	bne.n	b316 <att_handle_rsp+0x6a>
		chan->req = NULL;
    b30e:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
	bt_att_func_t func = NULL;
    b312:	4634      	mov	r4, r6
		goto process;
    b314:	e7dc      	b.n	b2d0 <att_handle_rsp+0x24>
	if (chan->req->buf) {
    b316:	6920      	ldr	r0, [r4, #16]
    b318:	b120      	cbz	r0, b324 <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
    b31a:	f012 f927 	bl	1d56c <net_buf_unref>
		chan->req->buf = NULL;
    b31e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    b322:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
    b324:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	chan->req->func = NULL;
    b328:	2600      	movs	r6, #0
	func = chan->req->func;
    b32a:	6844      	ldr	r4, [r0, #4]
	chan->req->func = NULL;
    b32c:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    b32e:	f8d0 b014 	ldr.w	fp, [r0, #20]
	att_req_destroy(chan->req);
    b332:	f01b ff8d 	bl	27250 <att_req_destroy>
	chan->req = NULL;
    b336:	f8c5 60cc 	str.w	r6, [r5, #204]	; 0xcc
    b33a:	e7c9      	b.n	b2d0 <att_handle_rsp+0x24>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    b33c:	4619      	mov	r1, r3
    b33e:	9303      	str	r3, [sp, #12]
    b340:	f7ff fbb2 	bl	aaa8 <bt_att_chan_req_send>
    b344:	2800      	cmp	r0, #0
    b346:	9b03      	ldr	r3, [sp, #12]
    b348:	dbd5      	blt.n	b2f6 <att_handle_rsp+0x4a>
	if (func) {
    b34a:	b13c      	cbz	r4, b35c <att_handle_rsp+0xb0>
		func(chan->att->conn, err, pdu, len, params);
    b34c:	6828      	ldr	r0, [r5, #0]
    b34e:	f8cd b000 	str.w	fp, [sp]
    b352:	4653      	mov	r3, sl
    b354:	464a      	mov	r2, r9
    b356:	4641      	mov	r1, r8
    b358:	6800      	ldr	r0, [r0, #0]
    b35a:	47a0      	blx	r4
}
    b35c:	2000      	movs	r0, #0
    b35e:	b005      	add	sp, #20
    b360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b364:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b368:	b10a      	cbz	r2, b36e <att_handle_rsp+0xc2>
    b36a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
	bt_att_func_t func = NULL;
    b36e:	4630      	mov	r0, r6
    b370:	4616      	mov	r6, r2
    b372:	e7bd      	b.n	b2f0 <att_handle_rsp+0x44>
    b374:	0002d5fc 	.word	0x0002d5fc
    b378:	2000212c 	.word	0x2000212c

0000b37c <att_reset>:
{
    b37c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b37e:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    b380:	9803      	ldr	r0, [sp, #12]
    b382:	2200      	movs	r2, #0
    b384:	2300      	movs	r3, #0
    b386:	300c      	adds	r0, #12
    b388:	f011 ffd6 	bl	1d338 <net_buf_get>
    b38c:	b948      	cbnz	r0, b3a2 <att_reset+0x26>
	att->conn = NULL;
    b38e:	9b03      	ldr	r3, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    b390:	685c      	ldr	r4, [r3, #4]
	att->conn = NULL;
    b392:	6018      	str	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    b394:	b944      	cbnz	r4, b3a8 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    b396:	a903      	add	r1, sp, #12
    b398:	480c      	ldr	r0, [pc, #48]	; (b3cc <att_reset+0x50>)
    b39a:	f015 fa11 	bl	207c0 <k_mem_slab_free>
}
    b39e:	b004      	add	sp, #16
    b3a0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    b3a2:	f012 f8e3 	bl	1d56c <net_buf_unref>
    b3a6:	e7eb      	b.n	b380 <att_reset+0x4>
    b3a8:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
    b3aa:	6866      	ldr	r6, [r4, #4]
    b3ac:	b136      	cbz	r6, b3bc <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    b3ae:	6963      	ldr	r3, [r4, #20]
    b3b0:	9300      	str	r3, [sp, #0]
    b3b2:	2300      	movs	r3, #0
    b3b4:	461a      	mov	r2, r3
    b3b6:	210e      	movs	r1, #14
    b3b8:	4618      	mov	r0, r3
    b3ba:	47b0      	blx	r6
		att_req_destroy(req);
    b3bc:	4620      	mov	r0, r4
    b3be:	f01b ff47 	bl	27250 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    b3c2:	2d00      	cmp	r5, #0
    b3c4:	d0e7      	beq.n	b396 <att_reset+0x1a>
    b3c6:	462c      	mov	r4, r5
    b3c8:	682d      	ldr	r5, [r5, #0]
    b3ca:	e7ee      	b.n	b3aa <att_reset+0x2e>
    b3cc:	20000cd4 	.word	0x20000cd4

0000b3d0 <att_timeout>:
{
    b3d0:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
    b3d2:	4605      	mov	r5, r0
{
    b3d4:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    b3d6:	2145      	movs	r1, #69	; 0x45
    b3d8:	480d      	ldr	r0, [pc, #52]	; (b410 <att_timeout+0x40>)
	struct bt_att *att = chan->att;
    b3da:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
    b3de:	f018 ff2d 	bl	2423c <printk>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    b3e2:	f854 0cf0 	ldr.w	r0, [r4, #-240]
    b3e6:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    b3ea:	3028      	adds	r0, #40	; 0x28
    b3ec:	f01b fc10 	bl	26c10 <sys_slist_find_and_remove>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    b3f0:	4628      	mov	r0, r5
    b3f2:	f01b ff41 	bl	27278 <att_chan_detach.part.15>
	if (!sys_slist_is_empty(&att->chans)) {
    b3f6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    b3f8:	b945      	cbnz	r5, b40c <att_timeout+0x3c>
	att_reset(att);
    b3fa:	4630      	mov	r0, r6
    b3fc:	f7ff ffbe 	bl	b37c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    b400:	f854 0ce8 	ldr.w	r0, [r4, #-232]
    b404:	f001 fbe0 	bl	cbc8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    b408:	f844 5ce8 	str.w	r5, [r4, #-232]
}
    b40c:	bd70      	pop	{r4, r5, r6, pc}
    b40e:	bf00      	nop
    b410:	0002d618 	.word	0x0002d618

0000b414 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
    b414:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b418:	460e      	mov	r6, r1
    b41a:	4617      	mov	r7, r2
    b41c:	461d      	mov	r5, r3
	struct bt_att_chan *chan, *tmp;
	struct bt_att *att;
	int ret;

	__ASSERT_NO_MSG(conn);
    b41e:	4604      	mov	r4, r0
    b420:	b950      	cbnz	r0, b438 <bt_att_send+0x24>
    b422:	4931      	ldr	r1, [pc, #196]	; (b4e8 <bt_att_send+0xd4>)
    b424:	4831      	ldr	r0, [pc, #196]	; (b4ec <bt_att_send+0xd8>)
    b426:	f640 32b8 	movw	r2, #3000	; 0xbb8
    b42a:	f018 ff07 	bl	2423c <printk>
    b42e:	f640 31b8 	movw	r1, #3000	; 0xbb8
    b432:	482d      	ldr	r0, [pc, #180]	; (b4e8 <bt_att_send+0xd4>)
    b434:	f019 f9b4 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(buf);
    b438:	b956      	cbnz	r6, b450 <bt_att_send+0x3c>
    b43a:	492b      	ldr	r1, [pc, #172]	; (b4e8 <bt_att_send+0xd4>)
    b43c:	482b      	ldr	r0, [pc, #172]	; (b4ec <bt_att_send+0xd8>)
    b43e:	f640 32b9 	movw	r2, #3001	; 0xbb9
    b442:	f018 fefb 	bl	2423c <printk>
    b446:	f640 31b9 	movw	r1, #3001	; 0xbb9
    b44a:	4827      	ldr	r0, [pc, #156]	; (b4e8 <bt_att_send+0xd4>)
    b44c:	f019 f9a8 	bl	247a0 <assert_post_action>

	att = att_get(conn);
    b450:	4620      	mov	r0, r4
    b452:	f7ff fa47 	bl	a8e4 <att_get>
	if (!att) {
    b456:	4680      	mov	r8, r0
    b458:	b938      	cbnz	r0, b46a <bt_att_send+0x56>
		net_buf_unref(buf);
    b45a:	4630      	mov	r0, r6
    b45c:	f012 f886 	bl	1d56c <net_buf_unref>
		return -ENOTCONN;
    b460:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
    b464:	b002      	add	sp, #8
    b466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
    b46a:	b13f      	cbz	r7, b47c <bt_att_send+0x68>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
    b46c:	9500      	str	r5, [sp, #0]
    b46e:	463b      	mov	r3, r7
    b470:	4632      	mov	r2, r6
    b472:	2104      	movs	r1, #4
    b474:	4620      	mov	r0, r4
    b476:	f01b fb91 	bl	26b9c <bt_l2cap_send_cb>
    b47a:	e7f3      	b.n	b464 <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b47c:	6a84      	ldr	r4, [r0, #40]	; 0x28
    b47e:	b184      	cbz	r4, b4a2 <bt_att_send+0x8e>
    b480:	f5b4 759e 	subs.w	r5, r4, #316	; 0x13c
    b484:	d00f      	beq.n	b4a6 <bt_att_send+0x92>
    b486:	6824      	ldr	r4, [r4, #0]
    b488:	b10c      	cbz	r4, b48e <bt_att_send+0x7a>
    b48a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
    b48e:	2000      	movs	r0, #0
    b490:	b95d      	cbnz	r5, b4aa <bt_att_send+0x96>
	if (ret < 0) {
    b492:	b1c8      	cbz	r0, b4c8 <bt_att_send+0xb4>
		net_buf_put(&att->tx_queue, buf);
    b494:	f108 000c 	add.w	r0, r8, #12
    b498:	4631      	mov	r1, r6
    b49a:	f012 f839 	bl	1d510 <net_buf_put>
	return 0;
    b49e:	4628      	mov	r0, r5
    b4a0:	e7e0      	b.n	b464 <bt_att_send+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b4a2:	463d      	mov	r5, r7
    b4a4:	e7f3      	b.n	b48e <bt_att_send+0x7a>
    b4a6:	463c      	mov	r4, r7
    b4a8:	e7f1      	b.n	b48e <bt_att_send+0x7a>
	return z_impl_k_sem_take(sem, timeout);
    b4aa:	2200      	movs	r2, #0
    b4ac:	2300      	movs	r3, #0
    b4ae:	f505 7090 	add.w	r0, r5, #288	; 0x120
    b4b2:	f016 fd27 	bl	21f04 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
    b4b6:	2800      	cmp	r0, #0
    b4b8:	db08      	blt.n	b4cc <bt_att_send+0xb8>
	return chan_send(chan, buf, cb);
    b4ba:	2200      	movs	r2, #0
    b4bc:	4631      	mov	r1, r6
    b4be:	4628      	mov	r0, r5
    b4c0:	f7ff f9a4 	bl	a80c <chan_send>
		if (ret >= 0) {
    b4c4:	2800      	cmp	r0, #0
    b4c6:	db03      	blt.n	b4d0 <bt_att_send+0xbc>
	return 0;
    b4c8:	2000      	movs	r0, #0
    b4ca:	e7cb      	b.n	b464 <bt_att_send+0x50>
			return -EAGAIN;
    b4cc:	f06f 000a 	mvn.w	r0, #10
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b4d0:	b13c      	cbz	r4, b4e2 <bt_att_send+0xce>
    b4d2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    b4d6:	b10b      	cbz	r3, b4dc <bt_att_send+0xc8>
    b4d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
    b4dc:	4625      	mov	r5, r4
    b4de:	461c      	mov	r4, r3
    b4e0:	e7d6      	b.n	b490 <bt_att_send+0x7c>
    b4e2:	4623      	mov	r3, r4
    b4e4:	e7fa      	b.n	b4dc <bt_att_send+0xc8>
    b4e6:	bf00      	nop
    b4e8:	0002d6a7 	.word	0x0002d6a7
    b4ec:	0002bced 	.word	0x0002bced

0000b4f0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    b4f0:	b570      	push	{r4, r5, r6, lr}
    b4f2:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
    b4f4:	4605      	mov	r5, r0
    b4f6:	b950      	cbnz	r0, b50e <bt_att_req_send+0x1e>
    b4f8:	4924      	ldr	r1, [pc, #144]	; (b58c <bt_att_req_send+0x9c>)
    b4fa:	4825      	ldr	r0, [pc, #148]	; (b590 <bt_att_req_send+0xa0>)
    b4fc:	f640 32e2 	movw	r2, #3042	; 0xbe2
    b500:	f018 fe9c 	bl	2423c <printk>
    b504:	f640 31e2 	movw	r1, #3042	; 0xbe2
    b508:	4820      	ldr	r0, [pc, #128]	; (b58c <bt_att_req_send+0x9c>)
    b50a:	f019 f949 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(req);
    b50e:	b954      	cbnz	r4, b526 <bt_att_req_send+0x36>
    b510:	491e      	ldr	r1, [pc, #120]	; (b58c <bt_att_req_send+0x9c>)
    b512:	481f      	ldr	r0, [pc, #124]	; (b590 <bt_att_req_send+0xa0>)
    b514:	f640 32e3 	movw	r2, #3043	; 0xbe3
    b518:	f018 fe90 	bl	2423c <printk>
    b51c:	f640 31e3 	movw	r1, #3043	; 0xbe3
    b520:	481a      	ldr	r0, [pc, #104]	; (b58c <bt_att_req_send+0x9c>)
    b522:	f019 f93d 	bl	247a0 <assert_post_action>

	att = att_get(conn);
    b526:	4628      	mov	r0, r5
    b528:	f7ff f9dc 	bl	a8e4 <att_get>
	if (!att) {
    b52c:	4605      	mov	r5, r0
    b52e:	b930      	cbnz	r0, b53e <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
    b530:	6920      	ldr	r0, [r4, #16]
    b532:	f012 f81b 	bl	1d56c <net_buf_unref>
		req->buf = NULL;
    b536:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
    b538:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
    b53c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b53e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b540:	b153      	cbz	r3, b558 <bt_att_req_send+0x68>
    b542:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
    b546:	d007      	beq.n	b558 <bt_att_req_send+0x68>
    b548:	681e      	ldr	r6, [r3, #0]
    b54a:	b10e      	cbz	r6, b550 <bt_att_req_send+0x60>
    b54c:	f5a6 769e 	sub.w	r6, r6, #316	; 0x13c
		if (!chan->req) {
    b550:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
    b554:	b143      	cbz	r3, b568 <bt_att_req_send+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b556:	b96e      	cbnz	r6, b574 <bt_att_req_send+0x84>
	parent->next = child;
    b558:	2000      	movs	r0, #0
    b55a:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    b55c:	68ab      	ldr	r3, [r5, #8]
    b55e:	b98b      	cbnz	r3, b584 <bt_att_req_send+0x94>
	list->head = node;
    b560:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
    b564:	4618      	mov	r0, r3
    b566:	e7e9      	b.n	b53c <bt_att_req_send+0x4c>
			ret = bt_att_chan_req_send(chan, req);
    b568:	4621      	mov	r1, r4
    b56a:	f7ff fa9d 	bl	aaa8 <bt_att_chan_req_send>
			if (ret >= 0) {
    b56e:	2800      	cmp	r0, #0
    b570:	dbf1      	blt.n	b556 <bt_att_req_send+0x66>
    b572:	e7e3      	b.n	b53c <bt_att_req_send+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b574:	f8d6 313c 	ldr.w	r3, [r6, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b578:	b10b      	cbz	r3, b57e <bt_att_req_send+0x8e>
    b57a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
    b57e:	4630      	mov	r0, r6
    b580:	461e      	mov	r6, r3
    b582:	e7e5      	b.n	b550 <bt_att_req_send+0x60>
	parent->next = child;
    b584:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b586:	60ac      	str	r4, [r5, #8]
    b588:	e7d8      	b.n	b53c <bt_att_req_send+0x4c>
    b58a:	bf00      	nop
    b58c:	0002d6a7 	.word	0x0002d6a7
    b590:	0002bced 	.word	0x0002bced

0000b594 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    b594:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    b596:	4908      	ldr	r1, [pc, #32]	; (b5b8 <db_hash_set+0x24>)
{
    b598:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    b59a:	4618      	mov	r0, r3
    b59c:	2210      	movs	r2, #16
    b59e:	47a0      	blx	r4
	if (len < 0) {
    b5a0:	1e04      	subs	r4, r0, #0
    b5a2:	da06      	bge.n	b5b2 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
    b5a4:	4622      	mov	r2, r4
    b5a6:	2145      	movs	r1, #69	; 0x45
    b5a8:	4804      	ldr	r0, [pc, #16]	; (b5bc <db_hash_set+0x28>)
    b5aa:	f018 fe47 	bl	2423c <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    b5ae:	4620      	mov	r0, r4
    b5b0:	bd10      	pop	{r4, pc}
	return 0;
    b5b2:	2400      	movs	r4, #0
    b5b4:	e7fb      	b.n	b5ae <db_hash_set+0x1a>
    b5b6:	bf00      	nop
    b5b8:	20003696 	.word	0x20003696
    b5bc:	0002d999 	.word	0x0002d999

0000b5c0 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    b5c0:	2210      	movs	r2, #16
{
    b5c2:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    b5c4:	4906      	ldr	r1, [pc, #24]	; (b5e0 <db_hash_store+0x20>)
    b5c6:	4807      	ldr	r0, [pc, #28]	; (b5e4 <db_hash_store+0x24>)
    b5c8:	f7f9 fe5a 	bl	5280 <settings_save_one>
	if (err) {
    b5cc:	4602      	mov	r2, r0
    b5ce:	b128      	cbz	r0, b5dc <db_hash_store+0x1c>
		BT_ERR("Failed to save Database Hash (err %d)", err);
    b5d0:	2145      	movs	r1, #69	; 0x45
    b5d2:	4805      	ldr	r0, [pc, #20]	; (b5e8 <db_hash_store+0x28>)
}
    b5d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    b5d8:	f018 be30 	b.w	2423c <printk>
}
    b5dc:	bd08      	pop	{r3, pc}
    b5de:	bf00      	nop
    b5e0:	20003686 	.word	0x20003686
    b5e4:	0002d9bf 	.word	0x0002d9bf
    b5e8:	0002d9c7 	.word	0x0002d9c7

0000b5ec <sc_store>:
{
    b5ec:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    b5ee:	4604      	mov	r4, r0
{
    b5f0:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    b5f2:	f814 2b01 	ldrb.w	r2, [r4], #1
{
    b5f6:	4605      	mov	r5, r0
	if (cfg->id) {
    b5f8:	b1ca      	cbz	r2, b62e <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    b5fa:	ae02      	add	r6, sp, #8
    b5fc:	2104      	movs	r1, #4
    b5fe:	4630      	mov	r0, r6
    b600:	f018 fd81 	bl	24106 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    b604:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    b606:	4623      	mov	r3, r4
    b608:	4a0a      	ldr	r2, [pc, #40]	; (b634 <sc_store+0x48>)
    b60a:	2124      	movs	r1, #36	; 0x24
    b60c:	a803      	add	r0, sp, #12
    b60e:	f7fb fee5 	bl	73dc <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    b612:	2204      	movs	r2, #4
    b614:	f105 0108 	add.w	r1, r5, #8
    b618:	a803      	add	r0, sp, #12
    b61a:	f7f9 fe31 	bl	5280 <settings_save_one>
	if (err) {
    b61e:	4602      	mov	r2, r0
    b620:	b118      	cbz	r0, b62a <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
    b622:	2145      	movs	r1, #69	; 0x45
    b624:	4804      	ldr	r0, [pc, #16]	; (b638 <sc_store+0x4c>)
    b626:	f018 fe09 	bl	2423c <printk>
}
    b62a:	b00c      	add	sp, #48	; 0x30
    b62c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    b62e:	9200      	str	r2, [sp, #0]
    b630:	e7e9      	b.n	b606 <sc_store+0x1a>
    b632:	bf00      	nop
    b634:	0002db1c 	.word	0x0002db1c
    b638:	0002daf2 	.word	0x0002daf2

0000b63c <bt_gatt_service_init.part.12>:
static void bt_gatt_service_init(void)
    b63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    b63e:	4d0d      	ldr	r5, [pc, #52]	; (b674 <bt_gatt_service_init.part.12+0x38>)
    b640:	4c0d      	ldr	r4, [pc, #52]	; (b678 <bt_gatt_service_init.part.12+0x3c>)
    b642:	4e0e      	ldr	r6, [pc, #56]	; (b67c <bt_gatt_service_init.part.12+0x40>)
    b644:	462f      	mov	r7, r5
    b646:	42ac      	cmp	r4, r5
    b648:	d90a      	bls.n	b660 <bt_gatt_service_init.part.12+0x24>
    b64a:	4631      	mov	r1, r6
    b64c:	480c      	ldr	r0, [pc, #48]	; (b680 <bt_gatt_service_init.part.12+0x44>)
    b64e:	f44f 6283 	mov.w	r2, #1048	; 0x418
    b652:	f018 fdf3 	bl	2423c <printk>
    b656:	f44f 6183 	mov.w	r1, #1048	; 0x418
    b65a:	4630      	mov	r0, r6
    b65c:	f019 f8a0 	bl	247a0 <assert_post_action>
    b660:	42bc      	cmp	r4, r7
    b662:	d300      	bcc.n	b666 <bt_gatt_service_init.part.12+0x2a>
}
    b664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		last_static_handle += svc->attr_count;
    b666:	4a07      	ldr	r2, [pc, #28]	; (b684 <bt_gatt_service_init.part.12+0x48>)
    b668:	6863      	ldr	r3, [r4, #4]
    b66a:	8811      	ldrh	r1, [r2, #0]
    b66c:	440b      	add	r3, r1
    b66e:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    b670:	3408      	adds	r4, #8
    b672:	e7e8      	b.n	b646 <bt_gatt_service_init.part.12+0xa>
    b674:	0002a758 	.word	0x0002a758
    b678:	0002a748 	.word	0x0002a748
    b67c:	0002d874 	.word	0x0002d874
    b680:	0002bced 	.word	0x0002bced
    b684:	20003504 	.word	0x20003504

0000b688 <find_sc_cfg>:
{
    b688:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    b68a:	4c06      	ldr	r4, [pc, #24]	; (b6a4 <find_sc_cfg+0x1c>)
    b68c:	7823      	ldrb	r3, [r4, #0]
    b68e:	4283      	cmp	r3, r0
    b690:	d104      	bne.n	b69c <find_sc_cfg+0x14>
	return memcmp(a, b, sizeof(*a));
    b692:	2207      	movs	r2, #7
    b694:	1c60      	adds	r0, r4, #1
    b696:	f01a fd3c 	bl	26112 <memcmp>
    b69a:	b108      	cbz	r0, b6a0 <find_sc_cfg+0x18>
	return NULL;
    b69c:	2000      	movs	r0, #0
}
    b69e:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    b6a0:	4620      	mov	r0, r4
    b6a2:	e7fc      	b.n	b69e <find_sc_cfg+0x16>
    b6a4:	20003506 	.word	0x20003506

0000b6a8 <sc_save>:
{
    b6a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b6ac:	4680      	mov	r8, r0
    b6ae:	460f      	mov	r7, r1
    b6b0:	4616      	mov	r6, r2
    b6b2:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    b6b4:	f7ff ffe8 	bl	b688 <find_sc_cfg>
	if (!cfg) {
    b6b8:	4604      	mov	r4, r0
    b6ba:	b998      	cbnz	r0, b6e4 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    b6bc:	4669      	mov	r1, sp
    b6be:	9000      	str	r0, [sp, #0]
    b6c0:	f8cd 0003 	str.w	r0, [sp, #3]
    b6c4:	f7ff ffe0 	bl	b688 <find_sc_cfg>
		if (!cfg) {
    b6c8:	4604      	mov	r4, r0
    b6ca:	b930      	cbnz	r0, b6da <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
    b6cc:	2145      	movs	r1, #69	; 0x45
    b6ce:	4812      	ldr	r0, [pc, #72]	; (b718 <sc_save+0x70>)
    b6d0:	f018 fdb4 	bl	2423c <printk>
}
    b6d4:	b002      	add	sp, #8
    b6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    b6da:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    b6de:	4639      	mov	r1, r7
    b6e0:	f01b fe7d 	bl	273de <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    b6e4:	8922      	ldrh	r2, [r4, #8]
    b6e6:	8963      	ldrh	r3, [r4, #10]
    b6e8:	b96a      	cbnz	r2, b706 <sc_save+0x5e>
    b6ea:	b973      	cbnz	r3, b70a <sc_save+0x62>
		cfg->data.start = start;
    b6ec:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    b6ee:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    b6f0:	4621      	mov	r1, r4
    b6f2:	f811 0b01 	ldrb.w	r0, [r1], #1
    b6f6:	f01b f8a3 	bl	26840 <bt_addr_le_is_bonded>
    b6fa:	2800      	cmp	r0, #0
    b6fc:	d0ea      	beq.n	b6d4 <sc_save+0x2c>
		sc_store(cfg);
    b6fe:	4620      	mov	r0, r4
    b700:	f7ff ff74 	bl	b5ec <sc_store>
    b704:	e7e6      	b.n	b6d4 <sc_save+0x2c>
	if (new_start >= *start && new_end <= *end) {
    b706:	4296      	cmp	r6, r2
    b708:	d302      	bcc.n	b710 <sc_save+0x68>
    b70a:	429d      	cmp	r5, r3
    b70c:	d8ef      	bhi.n	b6ee <sc_save+0x46>
    b70e:	e7e1      	b.n	b6d4 <sc_save+0x2c>
	if (*end < new_end) {
    b710:	429d      	cmp	r5, r3
		*start = new_start;
    b712:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    b714:	d9ec      	bls.n	b6f0 <sc_save+0x48>
    b716:	e7ea      	b.n	b6ee <sc_save+0x46>
    b718:	0002da86 	.word	0x0002da86

0000b71c <sc_set>:
{
    b71c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b720:	460e      	mov	r6, r1
    b722:	b087      	sub	sp, #28
    b724:	4690      	mov	r8, r2
    b726:	4699      	mov	r9, r3
	if (!name) {
    b728:	4605      	mov	r5, r0
    b72a:	b948      	cbnz	r0, b740 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
    b72c:	2145      	movs	r1, #69	; 0x45
    b72e:	4829      	ldr	r0, [pc, #164]	; (b7d4 <sc_set+0xb8>)
    b730:	f018 fd84 	bl	2423c <printk>
		return -EINVAL;
    b734:	f06f 0415 	mvn.w	r4, #21
}
    b738:	4620      	mov	r0, r4
    b73a:	b007      	add	sp, #28
    b73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    b740:	a902      	add	r1, sp, #8
    b742:	f01a fd9d 	bl	26280 <bt_settings_decode_key>
	if (err) {
    b746:	4604      	mov	r4, r0
    b748:	b128      	cbz	r0, b756 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    b74a:	462a      	mov	r2, r5
    b74c:	2145      	movs	r1, #69	; 0x45
    b74e:	4822      	ldr	r0, [pc, #136]	; (b7d8 <sc_set+0xbc>)
    b750:	f018 fd74 	bl	2423c <printk>
    b754:	e7ee      	b.n	b734 <sc_set+0x18>
	settings_name_next(name, &next);
    b756:	a901      	add	r1, sp, #4
    b758:	4628      	mov	r0, r5
    b75a:	f019 f9d3 	bl	24b04 <settings_name_next>
	if (!next) {
    b75e:	9801      	ldr	r0, [sp, #4]
    b760:	b1d8      	cbz	r0, b79a <sc_set+0x7e>
		id = strtol(next, NULL, 10);
    b762:	220a      	movs	r2, #10
    b764:	4621      	mov	r1, r4
    b766:	f01a fc0c 	bl	25f82 <strtol>
    b76a:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    b76c:	a902      	add	r1, sp, #8
    b76e:	4638      	mov	r0, r7
    b770:	f7ff ff8a 	bl	b688 <find_sc_cfg>
	if (!cfg && len_rd) {
    b774:	4605      	mov	r5, r0
    b776:	bb28      	cbnz	r0, b7c4 <sc_set+0xa8>
    b778:	2e00      	cmp	r6, #0
    b77a:	d0dd      	beq.n	b738 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    b77c:	a904      	add	r1, sp, #16
    b77e:	9004      	str	r0, [sp, #16]
    b780:	f8cd 0013 	str.w	r0, [sp, #19]
    b784:	f7ff ff80 	bl	b688 <find_sc_cfg>
		if (!cfg) {
    b788:	4605      	mov	r5, r0
    b78a:	b940      	cbnz	r0, b79e <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
    b78c:	2145      	movs	r1, #69	; 0x45
    b78e:	4813      	ldr	r0, [pc, #76]	; (b7dc <sc_set+0xc0>)
    b790:	f018 fd54 	bl	2423c <printk>
			return -ENOMEM;
    b794:	f06f 040b 	mvn.w	r4, #11
    b798:	e7ce      	b.n	b738 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
    b79a:	4627      	mov	r7, r4
    b79c:	e7e6      	b.n	b76c <sc_set+0x50>
		cfg->id = id;
    b79e:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    b7a2:	a902      	add	r1, sp, #8
    b7a4:	f01b fe1b 	bl	273de <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    b7a8:	f105 0108 	add.w	r1, r5, #8
    b7ac:	2204      	movs	r2, #4
    b7ae:	4648      	mov	r0, r9
    b7b0:	47c0      	blx	r8
		if (len < 0) {
    b7b2:	1e05      	subs	r5, r0, #0
    b7b4:	dac0      	bge.n	b738 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    b7b6:	462a      	mov	r2, r5
    b7b8:	2145      	movs	r1, #69	; 0x45
    b7ba:	4809      	ldr	r0, [pc, #36]	; (b7e0 <sc_set+0xc4>)
    b7bc:	f018 fd3e 	bl	2423c <printk>
			return len;
    b7c0:	462c      	mov	r4, r5
    b7c2:	e7b9      	b.n	b738 <sc_set+0x1c>
	if (len_rd) {
    b7c4:	2e00      	cmp	r6, #0
    b7c6:	d1ef      	bne.n	b7a8 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
    b7c8:	220c      	movs	r2, #12
    b7ca:	4631      	mov	r1, r6
    b7cc:	f01a fcf2 	bl	261b4 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    b7d0:	e7b2      	b.n	b738 <sc_set+0x1c>
    b7d2:	bf00      	nop
    b7d4:	0002ca06 	.word	0x0002ca06
    b7d8:	0002daaa 	.word	0x0002daaa
    b7dc:	0002dacb 	.word	0x0002dacb
    b7e0:	0002d999 	.word	0x0002d999

0000b7e4 <ccc_save>:
{
    b7e4:	b538      	push	{r3, r4, r5, lr}
    b7e6:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    b7e8:	4b0b      	ldr	r3, [pc, #44]	; (b818 <ccc_save+0x34>)
    b7ea:	6882      	ldr	r2, [r0, #8]
    b7ec:	429a      	cmp	r2, r3
{
    b7ee:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b7f0:	d10f      	bne.n	b812 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    b7f2:	7922      	ldrb	r2, [r4, #4]
    b7f4:	6821      	ldr	r1, [r4, #0]
    b7f6:	68c0      	ldr	r0, [r0, #12]
    b7f8:	f01b fe2e 	bl	27458 <ccc_find_cfg>
	if (!cfg) {
    b7fc:	b148      	cbz	r0, b812 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    b7fe:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    b802:	8901      	ldrh	r1, [r0, #8]
    b804:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    b808:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    b80a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    b80c:	8151      	strh	r1, [r2, #10]
	save->count++;
    b80e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    b812:	2001      	movs	r0, #1
    b814:	bd38      	pop	{r3, r4, r5, pc}
    b816:	bf00      	nop
    b818:	0000b909 	.word	0x0000b909

0000b81c <ccc_load>:
{
    b81c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b81e:	4b21      	ldr	r3, [pc, #132]	; (b8a4 <ccc_load+0x88>)
{
    b820:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    b822:	6882      	ldr	r2, [r0, #8]
    b824:	429a      	cmp	r2, r3
    b826:	d002      	beq.n	b82e <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    b828:	2001      	movs	r0, #1
}
    b82a:	b002      	add	sp, #8
    b82c:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    b82e:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    b830:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    b832:	b94b      	cbnz	r3, b848 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    b834:	7922      	ldrb	r2, [r4, #4]
    b836:	6821      	ldr	r1, [r4, #0]
    b838:	4630      	mov	r0, r6
    b83a:	f01b fe0d 	bl	27458 <ccc_find_cfg>
	if (!cfg) {
    b83e:	2800      	cmp	r0, #0
    b840:	d0f2      	beq.n	b828 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    b842:	f01b fdcf 	bl	273e4 <clear_ccc_cfg>
    b846:	e7ef      	b.n	b828 <ccc_load+0xc>
	} else if (!load->count) {
    b848:	68e0      	ldr	r0, [r4, #12]
    b84a:	2800      	cmp	r0, #0
    b84c:	d0ed      	beq.n	b82a <ccc_load+0xe>
	if (load->entry->handle != handle) {
    b84e:	881b      	ldrh	r3, [r3, #0]
    b850:	4299      	cmp	r1, r3
    b852:	d00a      	beq.n	b86a <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    b854:	d9e8      	bls.n	b828 <ccc_load+0xc>
	load->count--;
    b856:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    b858:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    b85a:	3801      	subs	r0, #1
	load->entry++;
    b85c:	3304      	adds	r3, #4
	load->count--;
    b85e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b860:	3000      	adds	r0, #0
	load->entry++;
    b862:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b864:	bf18      	it	ne
    b866:	2001      	movne	r0, #1
    b868:	e7df      	b.n	b82a <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    b86a:	7922      	ldrb	r2, [r4, #4]
    b86c:	6821      	ldr	r1, [r4, #0]
    b86e:	4630      	mov	r0, r6
    b870:	f01b fdf2 	bl	27458 <ccc_find_cfg>
	if (!cfg) {
    b874:	4605      	mov	r5, r0
    b876:	b980      	cbnz	r0, b89a <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    b878:	9000      	str	r0, [sp, #0]
    b87a:	4602      	mov	r2, r0
    b87c:	f8cd 0003 	str.w	r0, [sp, #3]
    b880:	4669      	mov	r1, sp
    b882:	4630      	mov	r0, r6
    b884:	f01b fde8 	bl	27458 <ccc_find_cfg>
		if (!cfg) {
    b888:	4605      	mov	r5, r0
    b88a:	2800      	cmp	r0, #0
    b88c:	d0e3      	beq.n	b856 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    b88e:	6821      	ldr	r1, [r4, #0]
    b890:	3001      	adds	r0, #1
    b892:	f01b fda4 	bl	273de <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    b896:	7923      	ldrb	r3, [r4, #4]
    b898:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    b89a:	68a3      	ldr	r3, [r4, #8]
    b89c:	885b      	ldrh	r3, [r3, #2]
    b89e:	812b      	strh	r3, [r5, #8]
    b8a0:	e7d9      	b.n	b856 <ccc_load+0x3a>
    b8a2:	bf00      	nop
    b8a4:	0000b909 	.word	0x0000b909

0000b8a8 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    b8a8:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    b8aa:	6881      	ldr	r1, [r0, #8]
{
    b8ac:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    b8ae:	4a07      	ldr	r2, [pc, #28]	; (b8cc <remove_peer_from_attr+0x24>)
    b8b0:	4291      	cmp	r1, r2
    b8b2:	d109      	bne.n	b8c8 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    b8b4:	791a      	ldrb	r2, [r3, #4]
    b8b6:	6819      	ldr	r1, [r3, #0]
    b8b8:	68c0      	ldr	r0, [r0, #12]
    b8ba:	f01b fdcd 	bl	27458 <ccc_find_cfg>
	if (cfg) {
    b8be:	b118      	cbz	r0, b8c8 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    b8c0:	220a      	movs	r2, #10
    b8c2:	2100      	movs	r1, #0
    b8c4:	f01a fc76 	bl	261b4 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    b8c8:	2001      	movs	r0, #1
    b8ca:	bd08      	pop	{r3, pc}
    b8cc:	0000b909 	.word	0x0000b909

0000b8d0 <find_cf_cfg>:
{
    b8d0:	b507      	push	{r0, r1, r2, lr}
		if (!conn) {
    b8d2:	b960      	cbnz	r0, b8ee <find_cf_cfg+0x1e>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    b8d4:	9000      	str	r0, [sp, #0]
    b8d6:	2207      	movs	r2, #7
    b8d8:	f8cd 0003 	str.w	r0, [sp, #3]
    b8dc:	4669      	mov	r1, sp
    b8de:	4808      	ldr	r0, [pc, #32]	; (b900 <find_cf_cfg+0x30>)
    b8e0:	f01a fc17 	bl	26112 <memcmp>
    b8e4:	b950      	cbnz	r0, b8fc <find_cf_cfg+0x2c>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    b8e6:	4807      	ldr	r0, [pc, #28]	; (b904 <find_cf_cfg+0x34>)
}
    b8e8:	b003      	add	sp, #12
    b8ea:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    b8ee:	4a05      	ldr	r2, [pc, #20]	; (b904 <find_cf_cfg+0x34>)
    b8f0:	f812 1b01 	ldrb.w	r1, [r2], #1
    b8f4:	f01b f892 	bl	26a1c <bt_conn_is_peer_addr_le>
    b8f8:	2800      	cmp	r0, #0
    b8fa:	d1f4      	bne.n	b8e6 <find_cf_cfg+0x16>
	return NULL;
    b8fc:	2000      	movs	r0, #0
    b8fe:	e7f3      	b.n	b8e8 <find_cf_cfg+0x18>
    b900:	20002145 	.word	0x20002145
    b904:	20002144 	.word	0x20002144

0000b908 <bt_gatt_attr_write_ccc>:
{
    b908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b90c:	4698      	mov	r8, r3
    b90e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    b912:	68ce      	ldr	r6, [r1, #12]
{
    b914:	4607      	mov	r7, r0
    b916:	4689      	mov	r9, r1
	if (offset) {
    b918:	2b00      	cmp	r3, #0
    b91a:	d144      	bne.n	b9a6 <bt_gatt_attr_write_ccc+0x9e>
	if (!len || len > sizeof(uint16_t)) {
    b91c:	f108 33ff 	add.w	r3, r8, #4294967295
    b920:	2b01      	cmp	r3, #1
    b922:	d843      	bhi.n	b9ac <bt_gatt_attr_write_ccc+0xa4>
	if (len < sizeof(uint16_t)) {
    b924:	f1b8 0f01 	cmp.w	r8, #1
		value = *(uint8_t *)buf;
    b928:	7814      	ldrb	r4, [r2, #0]
    b92a:	bf18      	it	ne
    b92c:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    b92e:	4631      	mov	r1, r6
		value = *(uint8_t *)buf;
    b930:	bf0c      	ite	eq
    b932:	b2a4      	uxtheq	r4, r4
    b934:	ea44 2403 	orrne.w	r4, r4, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    b938:	f01b fd9d 	bl	27476 <find_ccc_cfg>
	if (!cfg) {
    b93c:	4605      	mov	r5, r0
    b93e:	b9b0      	cbnz	r0, b96e <bt_gatt_attr_write_ccc+0x66>
		if (!value) {
    b940:	b914      	cbnz	r4, b948 <bt_gatt_attr_write_ccc+0x40>
			return len;
    b942:	4640      	mov	r0, r8
}
    b944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    b948:	4631      	mov	r1, r6
    b94a:	f01b fd94 	bl	27476 <find_ccc_cfg>
		if (!cfg) {
    b94e:	4605      	mov	r5, r0
    b950:	b930      	cbnz	r0, b960 <bt_gatt_attr_write_ccc+0x58>
			BT_WARN("No space to store CCC cfg");
    b952:	4818      	ldr	r0, [pc, #96]	; (b9b4 <bt_gatt_attr_write_ccc+0xac>)
    b954:	2157      	movs	r1, #87	; 0x57
    b956:	f018 fc71 	bl	2423c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    b95a:	f06f 0010 	mvn.w	r0, #16
    b95e:	e7f1      	b.n	b944 <bt_gatt_attr_write_ccc+0x3c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b960:	f107 0188 	add.w	r1, r7, #136	; 0x88
    b964:	3001      	adds	r0, #1
    b966:	f01b fd3a 	bl	273de <bt_addr_le_copy>
		cfg->id = conn->id;
    b96a:	7a3b      	ldrb	r3, [r7, #8]
    b96c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    b96e:	6933      	ldr	r3, [r6, #16]
    b970:	b96b      	cbnz	r3, b98e <bt_gatt_attr_write_ccc+0x86>
	if (cfg->value != ccc->value) {
    b972:	8973      	ldrh	r3, [r6, #10]
	cfg->value = value;
    b974:	812c      	strh	r4, [r5, #8]
	if (cfg->value != ccc->value) {
    b976:	42a3      	cmp	r3, r4
    b978:	d003      	beq.n	b982 <bt_gatt_attr_write_ccc+0x7a>
		gatt_ccc_changed(attr, ccc);
    b97a:	4631      	mov	r1, r6
    b97c:	4648      	mov	r0, r9
    b97e:	f01b fcb8 	bl	272f2 <gatt_ccc_changed>
	if (!value) {
    b982:	2c00      	cmp	r4, #0
    b984:	d1dd      	bne.n	b942 <bt_gatt_attr_write_ccc+0x3a>
		clear_ccc_cfg(cfg);
    b986:	4628      	mov	r0, r5
    b988:	f01b fd2c 	bl	273e4 <clear_ccc_cfg>
    b98c:	e7d9      	b.n	b942 <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    b98e:	4622      	mov	r2, r4
    b990:	4649      	mov	r1, r9
    b992:	4638      	mov	r0, r7
    b994:	4798      	blx	r3
		if (write < 0) {
    b996:	2800      	cmp	r0, #0
    b998:	dbd4      	blt.n	b944 <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
    b99a:	3801      	subs	r0, #1
    b99c:	2801      	cmp	r0, #1
    b99e:	d9e8      	bls.n	b972 <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    b9a0:	f06f 000d 	mvn.w	r0, #13
    b9a4:	e7ce      	b.n	b944 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b9a6:	f06f 0006 	mvn.w	r0, #6
    b9aa:	e7cb      	b.n	b944 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    b9ac:	f06f 000c 	mvn.w	r0, #12
    b9b0:	e7c8      	b.n	b944 <bt_gatt_attr_write_ccc+0x3c>
    b9b2:	bf00      	nop
    b9b4:	0002d805 	.word	0x0002d805

0000b9b8 <find_cf_cfg_by_addr>:
{
    b9b8:	b510      	push	{r4, lr}
			if (id == cf_cfg[i].id &&
    b9ba:	4c07      	ldr	r4, [pc, #28]	; (b9d8 <find_cf_cfg_by_addr+0x20>)
    b9bc:	7822      	ldrb	r2, [r4, #0]
    b9be:	4282      	cmp	r2, r0
{
    b9c0:	460b      	mov	r3, r1
			if (id == cf_cfg[i].id &&
    b9c2:	d105      	bne.n	b9d0 <find_cf_cfg_by_addr+0x18>
    b9c4:	2207      	movs	r2, #7
    b9c6:	1c61      	adds	r1, r4, #1
    b9c8:	4618      	mov	r0, r3
    b9ca:	f01a fba2 	bl	26112 <memcmp>
    b9ce:	b108      	cbz	r0, b9d4 <find_cf_cfg_by_addr+0x1c>
	return NULL;
    b9d0:	2000      	movs	r0, #0
}
    b9d2:	bd10      	pop	{r4, pc}
				return &cf_cfg[i];
    b9d4:	4620      	mov	r0, r4
    b9d6:	e7fc      	b.n	b9d2 <find_cf_cfg_by_addr+0x1a>
    b9d8:	20002144 	.word	0x20002144

0000b9dc <cf_set>:
{
    b9dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b9e0:	4689      	mov	r9, r1
    b9e2:	b085      	sub	sp, #20
    b9e4:	4617      	mov	r7, r2
    b9e6:	4698      	mov	r8, r3
	if (!name) {
    b9e8:	4605      	mov	r5, r0
    b9ea:	b948      	cbnz	r0, ba00 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
    b9ec:	2145      	movs	r1, #69	; 0x45
    b9ee:	4826      	ldr	r0, [pc, #152]	; (ba88 <cf_set+0xac>)
    b9f0:	f018 fc24 	bl	2423c <printk>
		return -EINVAL;
    b9f4:	f06f 0415 	mvn.w	r4, #21
}
    b9f8:	4620      	mov	r0, r4
    b9fa:	b005      	add	sp, #20
    b9fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    ba00:	a902      	add	r1, sp, #8
    ba02:	f01a fc3d 	bl	26280 <bt_settings_decode_key>
	if (err) {
    ba06:	4604      	mov	r4, r0
    ba08:	b128      	cbz	r0, ba16 <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
    ba0a:	462a      	mov	r2, r5
    ba0c:	2145      	movs	r1, #69	; 0x45
    ba0e:	481f      	ldr	r0, [pc, #124]	; (ba8c <cf_set+0xb0>)
    ba10:	f018 fc14 	bl	2423c <printk>
    ba14:	e7ee      	b.n	b9f4 <cf_set+0x18>
	settings_name_next(name, &next);
    ba16:	a901      	add	r1, sp, #4
    ba18:	4628      	mov	r0, r5
    ba1a:	f019 f873 	bl	24b04 <settings_name_next>
	if (!next) {
    ba1e:	9801      	ldr	r0, [sp, #4]
    ba20:	b1a8      	cbz	r0, ba4e <cf_set+0x72>
		id = strtol(next, NULL, 10);
    ba22:	220a      	movs	r2, #10
    ba24:	4621      	mov	r1, r4
    ba26:	f01a faac 	bl	25f82 <strtol>
    ba2a:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    ba2c:	a902      	add	r1, sp, #8
    ba2e:	4630      	mov	r0, r6
    ba30:	f7ff ffc2 	bl	b9b8 <find_cf_cfg_by_addr>
	if (!cfg) {
    ba34:	4605      	mov	r5, r0
    ba36:	b988      	cbnz	r0, ba5c <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
    ba38:	f7ff ff4a 	bl	b8d0 <find_cf_cfg>
		if (!cfg) {
    ba3c:	4605      	mov	r5, r0
    ba3e:	b940      	cbnz	r0, ba52 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
    ba40:	2145      	movs	r1, #69	; 0x45
    ba42:	4813      	ldr	r0, [pc, #76]	; (ba90 <cf_set+0xb4>)
    ba44:	f018 fbfa 	bl	2423c <printk>
			return -ENOMEM;
    ba48:	f06f 040b 	mvn.w	r4, #11
    ba4c:	e7d4      	b.n	b9f8 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
    ba4e:	4626      	mov	r6, r4
    ba50:	e7ec      	b.n	ba2c <cf_set+0x50>
		cfg->id = id;
    ba52:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    ba56:	a902      	add	r1, sp, #8
    ba58:	f01b fcc1 	bl	273de <bt_addr_le_copy>
	if (len_rd) {
    ba5c:	f1b9 0f00 	cmp.w	r9, #0
    ba60:	d00d      	beq.n	ba7e <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    ba62:	f105 0108 	add.w	r1, r5, #8
    ba66:	2201      	movs	r2, #1
    ba68:	4640      	mov	r0, r8
    ba6a:	47b8      	blx	r7
		if (len < 0) {
    ba6c:	1e05      	subs	r5, r0, #0
    ba6e:	dac3      	bge.n	b9f8 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
    ba70:	462a      	mov	r2, r5
    ba72:	2145      	movs	r1, #69	; 0x45
    ba74:	4807      	ldr	r0, [pc, #28]	; (ba94 <cf_set+0xb8>)
    ba76:	f018 fbe1 	bl	2423c <printk>
			return len;
    ba7a:	462c      	mov	r4, r5
    ba7c:	e7bc      	b.n	b9f8 <cf_set+0x1c>
		clear_cf_cfg(cfg);
    ba7e:	4628      	mov	r0, r5
    ba80:	f01b fccd 	bl	2741e <clear_cf_cfg>
    ba84:	e7b8      	b.n	b9f8 <cf_set+0x1c>
    ba86:	bf00      	nop
    ba88:	0002ca06 	.word	0x0002ca06
    ba8c:	0002daaa 	.word	0x0002daaa
    ba90:	0002d905 	.word	0x0002d905
    ba94:	0002d999 	.word	0x0002d999

0000ba98 <sc_commit.part.14>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ba98:	f44f 72a4 	mov.w	r2, #328	; 0x148
    ba9c:	2300      	movs	r3, #0
    ba9e:	4902      	ldr	r1, [pc, #8]	; (baa8 <sc_commit.part.14+0x10>)
    baa0:	4802      	ldr	r0, [pc, #8]	; (baac <sc_commit.part.14+0x14>)
    baa2:	f016 bc61 	b.w	22368 <k_delayed_work_submit_to_queue>
    baa6:	bf00      	nop
    baa8:	20001280 	.word	0x20001280
    baac:	20001988 	.word	0x20001988

0000bab0 <sc_commit>:
{
    bab0:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bab2:	f06f 0102 	mvn.w	r1, #2
    bab6:	4806      	ldr	r0, [pc, #24]	; (bad0 <sc_commit+0x20>)
    bab8:	f01b fca2 	bl	27400 <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    babc:	2100      	movs	r1, #0
    babe:	4804      	ldr	r0, [pc, #16]	; (bad0 <sc_commit+0x20>)
    bac0:	f01b fcf1 	bl	274a6 <atomic_test_bit>
    bac4:	b108      	cbz	r0, baca <sc_commit+0x1a>
    bac6:	f7ff ffe7 	bl	ba98 <sc_commit.part.14>
}
    baca:	2000      	movs	r0, #0
    bacc:	bd08      	pop	{r3, pc}
    bace:	bf00      	nop
    bad0:	200012b0 	.word	0x200012b0

0000bad4 <db_changed>:
{
    bad4:	b513      	push	{r0, r1, r4, lr}
    bad6:	4c11      	ldr	r4, [pc, #68]	; (bb1c <db_changed+0x48>)
    bad8:	4911      	ldr	r1, [pc, #68]	; (bb20 <db_changed+0x4c>)
    bada:	4812      	ldr	r0, [pc, #72]	; (bb24 <db_changed+0x50>)
    badc:	f44f 72a4 	mov.w	r2, #328	; 0x148
    bae0:	2300      	movs	r3, #0
    bae2:	f016 fc41 	bl	22368 <k_delayed_work_submit_to_queue>
		if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    bae6:	2300      	movs	r3, #0
    bae8:	2207      	movs	r2, #7
    baea:	4669      	mov	r1, sp
    baec:	1c60      	adds	r0, r4, #1
    baee:	9300      	str	r3, [sp, #0]
    baf0:	f8cd 3003 	str.w	r3, [sp, #3]
    baf4:	f01a fb0d 	bl	26112 <memcmp>
    baf8:	b170      	cbz	r0, bb18 <db_changed+0x44>
		if (CF_ROBUST_CACHING(cfg)) {
    bafa:	7a23      	ldrb	r3, [r4, #8]
    bafc:	07db      	lsls	r3, r3, #31
    bafe:	d50b      	bpl.n	bb18 <db_changed+0x44>
    bb00:	f06f 0102 	mvn.w	r1, #2
    bb04:	f104 000c 	add.w	r0, r4, #12
    bb08:	f01b fc7a 	bl	27400 <atomic_and>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bb0c:	f06f 0101 	mvn.w	r1, #1
    bb10:	f104 000c 	add.w	r0, r4, #12
    bb14:	f01b fc74 	bl	27400 <atomic_and>
}
    bb18:	b002      	add	sp, #8
    bb1a:	bd10      	pop	{r4, pc}
    bb1c:	20002144 	.word	0x20002144
    bb20:	20001230 	.word	0x20001230
    bb24:	20001988 	.word	0x20001988

0000bb28 <cf_write>:
{
    bb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb2c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    bb30:	2901      	cmp	r1, #1
{
    bb32:	4606      	mov	r6, r0
    bb34:	4617      	mov	r7, r2
    bb36:	4698      	mov	r8, r3
	if (offset > sizeof(cfg->data)) {
    bb38:	d842      	bhi.n	bbc0 <cf_write+0x98>
	if (offset + len > sizeof(cfg->data)) {
    bb3a:	4419      	add	r1, r3
    bb3c:	2901      	cmp	r1, #1
    bb3e:	461d      	mov	r5, r3
    bb40:	dc41      	bgt.n	bbc6 <cf_write+0x9e>
	cfg = find_cf_cfg(conn);
    bb42:	f7ff fec5 	bl	b8d0 <find_cf_cfg>
	if (!cfg) {
    bb46:	4604      	mov	r4, r0
    bb48:	b960      	cbnz	r0, bb64 <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
    bb4a:	f7ff fec1 	bl	b8d0 <find_cf_cfg>
	if (!cfg) {
    bb4e:	4604      	mov	r4, r0
    bb50:	b940      	cbnz	r0, bb64 <cf_write+0x3c>
		BT_WARN("No space to store Client Supported Features");
    bb52:	2157      	movs	r1, #87	; 0x57
    bb54:	481f      	ldr	r0, [pc, #124]	; (bbd4 <cf_write+0xac>)
    bb56:	f018 fb71 	bl	2423c <printk>
    bb5a:	f06f 0510 	mvn.w	r5, #16
}
    bb5e:	4628      	mov	r0, r5
    bb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    bb64:	463b      	mov	r3, r7
    bb66:	eb08 0c07 	add.w	ip, r8, r7
	for (i = 0U; i < len && i <= last_byte; i++) {
    bb6a:	459c      	cmp	ip, r3
    bb6c:	d115      	bne.n	bb9a <cf_write+0x72>
	for (i = 0U; i < len && i < last_byte; i++) {
    bb6e:	f1b8 0f00 	cmp.w	r8, #0
    bb72:	d005      	beq.n	bb80 <cf_write+0x58>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    bb74:	783b      	ldrb	r3, [r7, #0]
    bb76:	7a22      	ldrb	r2, [r4, #8]
    bb78:	f003 0307 	and.w	r3, r3, #7
    bb7c:	4313      	orrs	r3, r2
    bb7e:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    bb80:	f106 0188 	add.w	r1, r6, #136	; 0x88
    bb84:	1c60      	adds	r0, r4, #1
    bb86:	f01b fc2a 	bl	273de <bt_addr_le_copy>
	cfg->id = conn->id;
    bb8a:	4620      	mov	r0, r4
    bb8c:	7a33      	ldrb	r3, [r6, #8]
    bb8e:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    bb92:	2100      	movs	r1, #0
    bb94:	f01b fc90 	bl	274b8 <atomic_set_bit>
	return len;
    bb98:	e7e1      	b.n	bb5e <cf_write+0x36>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    bb9a:	f813 2b01 	ldrb.w	r2, [r3], #1
    bb9e:	7a20      	ldrb	r0, [r4, #8]
    bba0:	2100      	movs	r1, #0
    bba2:	4042      	eors	r2, r0
			if ((BIT(bit) & chg_bits) &&
    bba4:	fa22 fe01 	lsr.w	lr, r2, r1
    bba8:	f01e 0f01 	tst.w	lr, #1
    bbac:	d004      	beq.n	bbb8 <cf_write+0x90>
    bbae:	fa20 fe01 	lsr.w	lr, r0, r1
    bbb2:	f01e 0f01 	tst.w	lr, #1
    bbb6:	d109      	bne.n	bbcc <cf_write+0xa4>
    bbb8:	3101      	adds	r1, #1
		for (bit = 0U; bit <= last_bit; bit++) {
    bbba:	2903      	cmp	r1, #3
    bbbc:	d1f2      	bne.n	bba4 <cf_write+0x7c>
    bbbe:	e7d4      	b.n	bb6a <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    bbc0:	f06f 0506 	mvn.w	r5, #6
    bbc4:	e7cb      	b.n	bb5e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    bbc6:	f06f 050c 	mvn.w	r5, #12
    bbca:	e7c8      	b.n	bb5e <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    bbcc:	f06f 0512 	mvn.w	r5, #18
    bbd0:	e7c5      	b.n	bb5e <cf_write+0x36>
    bbd2:	bf00      	nop
    bbd4:	0002d92c 	.word	0x0002d92c

0000bbd8 <sc_indicate_rsp>:
{
    bbd8:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bbda:	f06f 0102 	mvn.w	r1, #2
    bbde:	4604      	mov	r4, r0
    bbe0:	480d      	ldr	r0, [pc, #52]	; (bc18 <sc_indicate_rsp+0x40>)
    bbe2:	f01b fc0d 	bl	27400 <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    bbe6:	2100      	movs	r1, #0
    bbe8:	480b      	ldr	r0, [pc, #44]	; (bc18 <sc_indicate_rsp+0x40>)
    bbea:	f01b fc5c 	bl	274a6 <atomic_test_bit>
    bbee:	b128      	cbz	r0, bbfc <sc_indicate_rsp+0x24>
    bbf0:	2200      	movs	r2, #0
    bbf2:	2300      	movs	r3, #0
    bbf4:	4909      	ldr	r1, [pc, #36]	; (bc1c <sc_indicate_rsp+0x44>)
    bbf6:	480a      	ldr	r0, [pc, #40]	; (bc20 <sc_indicate_rsp+0x48>)
    bbf8:	f016 fbb6 	bl	22368 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    bbfc:	4620      	mov	r0, r4
    bbfe:	f7ff fe67 	bl	b8d0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    bc02:	b140      	cbz	r0, bc16 <sc_indicate_rsp+0x3e>
    bc04:	7a03      	ldrb	r3, [r0, #8]
    bc06:	07db      	lsls	r3, r3, #31
    bc08:	d505      	bpl.n	bc16 <sc_indicate_rsp+0x3e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    bc0a:	2100      	movs	r1, #0
    bc0c:	300c      	adds	r0, #12
}
    bc0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    bc12:	f01b bc51 	b.w	274b8 <atomic_set_bit>
}
    bc16:	bd10      	pop	{r4, pc}
    bc18:	200012b0 	.word	0x200012b0
    bc1c:	20001280 	.word	0x20001280
    bc20:	20001988 	.word	0x20001988

0000bc24 <gatt_notify>:
{
    bc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc28:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    bc2a:	8992      	ldrh	r2, [r2, #12]
{
    bc2c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    bc2e:	3202      	adds	r2, #2
    bc30:	211b      	movs	r1, #27
{
    bc32:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    bc34:	f7ff f8e0 	bl	adf8 <bt_att_create_pdu>
	if (!buf) {
    bc38:	4605      	mov	r5, r0
    bc3a:	b1c8      	cbz	r0, bc70 <gatt_notify+0x4c>
	return net_buf_simple_add(&buf->b, len);
    bc3c:	f100 0708 	add.w	r7, r0, #8
    bc40:	2102      	movs	r1, #2
    bc42:	4638      	mov	r0, r7
    bc44:	f011 fda8 	bl	1d798 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    bc48:	4606      	mov	r6, r0
    bc4a:	89a1      	ldrh	r1, [r4, #12]
    bc4c:	f826 9b02 	strh.w	r9, [r6], #2
    bc50:	4638      	mov	r0, r7
    bc52:	f011 fda1 	bl	1d798 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    bc56:	89a2      	ldrh	r2, [r4, #12]
    bc58:	68a1      	ldr	r1, [r4, #8]
    bc5a:	4630      	mov	r0, r6
    bc5c:	f01a fa80 	bl	26160 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    bc60:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    bc64:	4629      	mov	r1, r5
    bc66:	4640      	mov	r0, r8
}
    bc68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    bc6c:	f7ff bbd2 	b.w	b414 <bt_att_send>
		BT_WARN("No buffer available to send notification");
    bc70:	2157      	movs	r1, #87	; 0x57
    bc72:	4803      	ldr	r0, [pc, #12]	; (bc80 <gatt_notify+0x5c>)
    bc74:	f018 fae2 	bl	2423c <printk>
}
    bc78:	f06f 000b 	mvn.w	r0, #11
    bc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc80:	0002da3d 	.word	0x0002da3d

0000bc84 <read_ppcp>:
{
    bc84:	b513      	push	{r0, r1, r4, lr}
    bc86:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    bc8a:	4c0b      	ldr	r4, [pc, #44]	; (bcb8 <read_ppcp+0x34>)
{
    bc8c:	4610      	mov	r0, r2
	if (offset > value_len) {
    bc8e:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    bc90:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    bc94:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    bc98:	d80b      	bhi.n	bcb2 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    bc9a:	f1c1 0408 	rsb	r4, r1, #8
    bc9e:	429c      	cmp	r4, r3
    bca0:	bfa8      	it	ge
    bca2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    bca4:	4622      	mov	r2, r4
    bca6:	4469      	add	r1, sp
    bca8:	f01a fa5a 	bl	26160 <memcpy>
}
    bcac:	4620      	mov	r0, r4
    bcae:	b002      	add	sp, #8
    bcb0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    bcb2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    bcb6:	e7f9      	b.n	bcac <read_ppcp+0x28>
    bcb8:	00280018 	.word	0x00280018

0000bcbc <bt_gatt_clear_sc>:
{
    bcbc:	b570      	push	{r4, r5, r6, lr}
    bcbe:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    bcc0:	f7ff fce2 	bl	b688 <find_sc_cfg>
	if (!cfg) {
    bcc4:	4605      	mov	r5, r0
    bcc6:	b1e8      	cbz	r0, bd04 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
    bcc8:	4604      	mov	r4, r0
    bcca:	f814 2b01 	ldrb.w	r2, [r4], #1
    bcce:	b1e2      	cbz	r2, bd0a <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    bcd0:	ae02      	add	r6, sp, #8
    bcd2:	2104      	movs	r1, #4
    bcd4:	4630      	mov	r0, r6
    bcd6:	f018 fa16 	bl	24106 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    bcda:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    bcdc:	4a0c      	ldr	r2, [pc, #48]	; (bd10 <bt_gatt_clear_sc+0x54>)
    bcde:	4623      	mov	r3, r4
    bce0:	2124      	movs	r1, #36	; 0x24
    bce2:	a803      	add	r0, sp, #12
    bce4:	f7fb fb7a 	bl	73dc <bt_settings_encode_key>
		err = settings_delete(key);
    bce8:	a803      	add	r0, sp, #12
    bcea:	f018 fee7 	bl	24abc <settings_delete>
		if (err) {
    bcee:	4602      	mov	r2, r0
    bcf0:	b118      	cbz	r0, bcfa <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
    bcf2:	2145      	movs	r1, #69	; 0x45
    bcf4:	4807      	ldr	r0, [pc, #28]	; (bd14 <bt_gatt_clear_sc+0x58>)
    bcf6:	f018 faa1 	bl	2423c <printk>
	memset(cfg, 0, sizeof(*cfg));
    bcfa:	220c      	movs	r2, #12
    bcfc:	2100      	movs	r1, #0
    bcfe:	4628      	mov	r0, r5
    bd00:	f01a fa58 	bl	261b4 <memset>
}
    bd04:	2000      	movs	r0, #0
    bd06:	b00c      	add	sp, #48	; 0x30
    bd08:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    bd0a:	9200      	str	r2, [sp, #0]
    bd0c:	e7e6      	b.n	bcdc <bt_gatt_clear_sc+0x20>
    bd0e:	bf00      	nop
    bd10:	0002db1c 	.word	0x0002db1c
    bd14:	0002d824 	.word	0x0002d824

0000bd18 <sc_clear>:
{
    bd18:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bd1a:	f100 0488 	add.w	r4, r0, #136	; 0x88
{
    bd1e:	4605      	mov	r5, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bd20:	4621      	mov	r1, r4
    bd22:	7a00      	ldrb	r0, [r0, #8]
    bd24:	f01a fd8c 	bl	26840 <bt_addr_le_is_bonded>
    bd28:	4606      	mov	r6, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    bd2a:	4621      	mov	r1, r4
    bd2c:	7a28      	ldrb	r0, [r5, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bd2e:	b14e      	cbz	r6, bd44 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    bd30:	f7ff ffc4 	bl	bcbc <bt_gatt_clear_sc>
		if (err) {
    bd34:	4602      	mov	r2, r0
    bd36:	b170      	cbz	r0, bd56 <sc_clear+0x3e>
			BT_ERR("Failed to clear SC %d", err);
    bd38:	2145      	movs	r1, #69	; 0x45
    bd3a:	4807      	ldr	r0, [pc, #28]	; (bd58 <sc_clear+0x40>)
}
    bd3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    bd40:	f018 ba7c 	b.w	2423c <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    bd44:	f7ff fca0 	bl	b688 <find_sc_cfg>
		if (cfg) {
    bd48:	b128      	cbz	r0, bd56 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
    bd4a:	4631      	mov	r1, r6
    bd4c:	220c      	movs	r2, #12
}
    bd4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    bd52:	f01a ba2f 	b.w	261b4 <memset>
}
    bd56:	bd70      	pop	{r4, r5, r6, pc}
    bd58:	0002da6b 	.word	0x0002da6b

0000bd5c <disconnected_cb>:
{
    bd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    bd60:	4b1f      	ldr	r3, [pc, #124]	; (bde0 <disconnected_cb+0x84>)
{
    bd62:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    bd64:	6882      	ldr	r2, [r0, #8]
    bd66:	429a      	cmp	r2, r3
{
    bd68:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    bd6a:	d102      	bne.n	bd72 <disconnected_cb+0x16>
	ccc = attr->user_data;
    bd6c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    bd6e:	8963      	ldrh	r3, [r4, #10]
    bd70:	b9c3      	cbnz	r3, bda4 <disconnected_cb+0x48>
}
    bd72:	2001      	movs	r0, #1
    bd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    bd78:	f106 0888 	add.w	r8, r6, #136	; 0x88
    bd7c:	4641      	mov	r1, r8
    bd7e:	7a30      	ldrb	r0, [r6, #8]
    bd80:	f01a fd5e 	bl	26840 <bt_addr_le_is_bonded>
    bd84:	b948      	cbnz	r0, bd9a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    bd86:	4b17      	ldr	r3, [pc, #92]	; (bde4 <disconnected_cb+0x88>)
    bd88:	429c      	cmp	r4, r3
    bd8a:	d102      	bne.n	bd92 <disconnected_cb+0x36>
					sc_clear(conn);
    bd8c:	4630      	mov	r0, r6
    bd8e:	f7ff ffc3 	bl	bd18 <sc_clear>
				clear_ccc_cfg(cfg);
    bd92:	4620      	mov	r0, r4
    bd94:	f01b fb26 	bl	273e4 <clear_ccc_cfg>
	if (!value_used) {
    bd98:	e019      	b.n	bdce <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    bd9a:	4641      	mov	r1, r8
    bd9c:	4628      	mov	r0, r5
    bd9e:	f01b fb1e 	bl	273de <bt_addr_le_copy>
	if (!value_used) {
    bda2:	e014      	b.n	bdce <disconnected_cb+0x72>
		if (!cfg->value) {
    bda4:	8923      	ldrh	r3, [r4, #8]
    bda6:	b193      	cbz	r3, bdce <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    bda8:	4625      	mov	r5, r4
    bdaa:	4630      	mov	r0, r6
    bdac:	f815 1b01 	ldrb.w	r1, [r5], #1
    bdb0:	462a      	mov	r2, r5
    bdb2:	f01a fe33 	bl	26a1c <bt_conn_is_peer_addr_le>
    bdb6:	2800      	cmp	r0, #0
    bdb8:	d1de      	bne.n	bd78 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    bdba:	4629      	mov	r1, r5
    bdbc:	7820      	ldrb	r0, [r4, #0]
    bdbe:	f01a fe76 	bl	26aae <bt_conn_lookup_addr_le>
			if (tmp) {
    bdc2:	b120      	cbz	r0, bdce <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    bdc4:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    bdc6:	f7fd ff2f 	bl	9c28 <bt_conn_unref>
	if (!value_used) {
    bdca:	2d07      	cmp	r5, #7
    bdcc:	d0d1      	beq.n	bd72 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    bdce:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    bdd0:	2100      	movs	r1, #0
    bdd2:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d0cc      	beq.n	bd72 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    bdd8:	4638      	mov	r0, r7
    bdda:	4798      	blx	r3
    bddc:	e7c9      	b.n	bd72 <disconnected_cb+0x16>
    bdde:	bf00      	nop
    bde0:	0000b909 	.word	0x0000b909
    bde4:	200005f4 	.word	0x200005f4

0000bde8 <sc_indicate>:
{
    bde8:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bdea:	4a16      	ldr	r2, [pc, #88]	; (be44 <sc_indicate+0x5c>)
    bdec:	f3bf 8f5b 	dmb	ish
    bdf0:	f102 0350 	add.w	r3, r2, #80	; 0x50
    bdf4:	e853 4f00 	ldrex	r4, [r3]
    bdf8:	f044 0c01 	orr.w	ip, r4, #1
    bdfc:	e843 ce00 	strex	lr, ip, [r3]
    be00:	f1be 0f00 	cmp.w	lr, #0
    be04:	d1f6      	bne.n	bdf4 <sc_indicate+0xc>
    be06:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    be0a:	f014 0f01 	tst.w	r4, #1
    be0e:	4613      	mov	r3, r2
    be10:	d10a      	bne.n	be28 <sc_indicate+0x40>
		gatt_sc.start = start;
    be12:	8310      	strh	r0, [r2, #24]
		gatt_sc.end = end;
    be14:	8351      	strh	r1, [r2, #26]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    be16:	2101      	movs	r1, #1
    be18:	480b      	ldr	r0, [pc, #44]	; (be48 <sc_indicate+0x60>)
    be1a:	f01b fb44 	bl	274a6 <atomic_test_bit>
    be1e:	b978      	cbnz	r0, be40 <sc_indicate+0x58>
}
    be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    be24:	f7ff be38 	b.w	ba98 <sc_commit.part.14>
	if (new_start >= *start && new_end <= *end) {
    be28:	8b1c      	ldrh	r4, [r3, #24]
    be2a:	8b52      	ldrh	r2, [r2, #26]
    be2c:	4284      	cmp	r4, r0
    be2e:	d803      	bhi.n	be38 <sc_indicate+0x50>
    be30:	4291      	cmp	r1, r2
    be32:	d905      	bls.n	be40 <sc_indicate+0x58>
		*end = new_end;
    be34:	8359      	strh	r1, [r3, #26]
    be36:	e7ee      	b.n	be16 <sc_indicate+0x2e>
	if (*end < new_end) {
    be38:	4291      	cmp	r1, r2
		*start = new_start;
    be3a:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
    be3c:	d9eb      	bls.n	be16 <sc_indicate+0x2e>
    be3e:	e7f9      	b.n	be34 <sc_indicate+0x4c>
}
    be40:	bd10      	pop	{r4, pc}
    be42:	bf00      	nop
    be44:	20001260 	.word	0x20001260
    be48:	200012b0 	.word	0x200012b0

0000be4c <gatt_indicate>:
{
    be4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    be50:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    be52:	8a92      	ldrh	r2, [r2, #20]
{
    be54:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    be56:	3202      	adds	r2, #2
    be58:	211d      	movs	r1, #29
{
    be5a:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    be5c:	f7fe ffcc 	bl	adf8 <bt_att_create_pdu>
	if (!buf) {
    be60:	4606      	mov	r6, r0
    be62:	b930      	cbnz	r0, be72 <gatt_indicate+0x26>
		BT_WARN("No buffer available to send indication");
    be64:	2157      	movs	r1, #87	; 0x57
    be66:	4821      	ldr	r0, [pc, #132]	; (beec <gatt_indicate+0xa0>)
    be68:	f018 f9e8 	bl	2423c <printk>
			return -ENOMEM;
    be6c:	f06f 040b 	mvn.w	r4, #11
    be70:	e01f      	b.n	beb2 <gatt_indicate+0x66>
    be72:	f100 0508 	add.w	r5, r0, #8
    be76:	2102      	movs	r1, #2
    be78:	4628      	mov	r0, r5
    be7a:	f011 fc8d 	bl	1d798 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    be7e:	4607      	mov	r7, r0
    be80:	8aa1      	ldrh	r1, [r4, #20]
    be82:	f827 9b02 	strh.w	r9, [r7], #2
    be86:	4628      	mov	r0, r5
    be88:	f011 fc86 	bl	1d798 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    be8c:	8aa2      	ldrh	r2, [r4, #20]
    be8e:	6921      	ldr	r1, [r4, #16]
    be90:	4638      	mov	r0, r7
    be92:	f01a f965 	bl	26160 <memcpy>
	if (!params->func) {
    be96:	68a3      	ldr	r3, [r4, #8]
    be98:	b973      	cbnz	r3, beb8 <gatt_indicate+0x6c>
		err = bt_att_send(conn, buf, NULL, NULL);
    be9a:	461a      	mov	r2, r3
    be9c:	4631      	mov	r1, r6
    be9e:	4640      	mov	r0, r8
    bea0:	f7ff fab8 	bl	b414 <bt_att_send>
	if (err) {
    bea4:	4604      	mov	r4, r0
    bea6:	b120      	cbz	r0, beb2 <gatt_indicate+0x66>
		BT_ERR("Error sending ATT PDU: %d", err);
    bea8:	4622      	mov	r2, r4
    beaa:	2145      	movs	r1, #69	; 0x45
    beac:	4810      	ldr	r0, [pc, #64]	; (bef0 <gatt_indicate+0xa4>)
    beae:	f018 f9c5 	bl	2423c <printk>
}
    beb2:	4620      	mov	r0, r4
    beb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    beb8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    bebc:	2100      	movs	r1, #0
    bebe:	f7ff f9d3 	bl	b268 <bt_att_req_alloc>
		if (!req) {
    bec2:	4605      	mov	r5, r0
    bec4:	2800      	cmp	r0, #0
    bec6:	d0d1      	beq.n	be6c <gatt_indicate+0x20>
		req->func = func;
    bec8:	4b0a      	ldr	r3, [pc, #40]	; (bef4 <gatt_indicate+0xa8>)
    beca:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
    becc:	2300      	movs	r3, #0
		req->user_data = params;
    bece:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    bed0:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
    bed2:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    bed4:	4601      	mov	r1, r0
    bed6:	4640      	mov	r0, r8
    bed8:	f7ff fb0a 	bl	b4f0 <bt_att_req_send>
		if (err) {
    bedc:	4604      	mov	r4, r0
    bede:	2800      	cmp	r0, #0
    bee0:	d0e7      	beq.n	beb2 <gatt_indicate+0x66>
			bt_att_req_free(req);
    bee2:	4628      	mov	r0, r5
    bee4:	f7ff f9d6 	bl	b294 <bt_att_req_free>
    bee8:	e7de      	b.n	bea8 <gatt_indicate+0x5c>
    beea:	bf00      	nop
    beec:	0002d9f2 	.word	0x0002d9f2
    bef0:	0002da1e 	.word	0x0002da1e
    bef4:	00027307 	.word	0x00027307

0000bef8 <notify_cb>:
{
    bef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    befa:	4b2e      	ldr	r3, [pc, #184]	; (bfb4 <notify_cb+0xbc>)
{
    befc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    befe:	6882      	ldr	r2, [r0, #8]
    bf00:	429a      	cmp	r2, r3
{
    bf02:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    bf04:	d12e      	bne.n	bf64 <notify_cb+0x6c>
	ccc = attr->user_data;
    bf06:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    bf08:	4b2b      	ldr	r3, [pc, #172]	; (bfb8 <notify_cb+0xc0>)
    bf0a:	429e      	cmp	r6, r3
    bf0c:	d11a      	bne.n	bf44 <notify_cb+0x4c>
    bf0e:	4d2b      	ldr	r5, [pc, #172]	; (bfbc <notify_cb+0xc4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    bf10:	2300      	movs	r3, #0
    bf12:	2207      	movs	r2, #7
    bf14:	4669      	mov	r1, sp
    bf16:	1c68      	adds	r0, r5, #1
    bf18:	9300      	str	r3, [sp, #0]
    bf1a:	f8cd 3003 	str.w	r3, [sp, #3]
    bf1e:	f01a f8f8 	bl	26112 <memcmp>
    bf22:	b178      	cbz	r0, bf44 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    bf24:	4629      	mov	r1, r5
    bf26:	2207      	movs	r2, #7
    bf28:	f811 0b01 	ldrb.w	r0, [r1], #1
    bf2c:	f7fd ffc0 	bl	9eb0 <bt_conn_lookup_state_le>
			if (!conn) {
    bf30:	b9d8      	cbnz	r0, bf6a <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
    bf32:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    bf34:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    bf36:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    bf38:	f811 0b01 	ldrb.w	r0, [r1], #1
    bf3c:	8853      	ldrh	r3, [r2, #2]
    bf3e:	8812      	ldrh	r2, [r2, #0]
    bf40:	f7ff fbb2 	bl	b6a8 <sc_save>
		if (cfg->value != data->type) {
    bf44:	8932      	ldrh	r2, [r6, #8]
    bf46:	89a3      	ldrh	r3, [r4, #12]
    bf48:	429a      	cmp	r2, r3
    bf4a:	d10b      	bne.n	bf64 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    bf4c:	4631      	mov	r1, r6
    bf4e:	f811 0b01 	ldrb.w	r0, [r1], #1
    bf52:	f01a fdac 	bl	26aae <bt_conn_lookup_addr_le>
		if (!conn) {
    bf56:	4605      	mov	r5, r0
    bf58:	b120      	cbz	r0, bf64 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    bf5a:	7a83      	ldrb	r3, [r0, #10]
    bf5c:	2b07      	cmp	r3, #7
    bf5e:	d007      	beq.n	bf70 <notify_cb+0x78>
			bt_conn_unref(conn);
    bf60:	f7fd fe62 	bl	9c28 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    bf64:	2001      	movs	r0, #1
}
    bf66:	b003      	add	sp, #12
    bf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    bf6a:	f7fd fe5d 	bl	9c28 <bt_conn_unref>
    bf6e:	e7e9      	b.n	bf44 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    bf70:	6973      	ldr	r3, [r6, #20]
    bf72:	b123      	cbz	r3, bf7e <notify_cb+0x86>
    bf74:	4639      	mov	r1, r7
    bf76:	4798      	blx	r3
    bf78:	b908      	cbnz	r0, bf7e <notify_cb+0x86>
			bt_conn_unref(conn);
    bf7a:	4628      	mov	r0, r5
    bf7c:	e7f0      	b.n	bf60 <notify_cb+0x68>
		if (data->type == BT_GATT_CCC_INDICATE) {
    bf7e:	89a3      	ldrh	r3, [r4, #12]
    bf80:	88a1      	ldrh	r1, [r4, #4]
    bf82:	6922      	ldr	r2, [r4, #16]
    bf84:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    bf86:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    bf88:	d110      	bne.n	bfac <notify_cb+0xb4>
			err = gatt_indicate(conn, data->handle,
    bf8a:	f7ff ff5f 	bl	be4c <gatt_indicate>
			if (err == 0) {
    bf8e:	4606      	mov	r6, r0
    bf90:	b918      	cbnz	r0, bf9a <notify_cb+0xa2>
				data->ind_params->_ref++;
    bf92:	6922      	ldr	r2, [r4, #16]
    bf94:	7d93      	ldrb	r3, [r2, #22]
    bf96:	3301      	adds	r3, #1
    bf98:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    bf9a:	4628      	mov	r0, r5
    bf9c:	f7fd fe44 	bl	9c28 <bt_conn_unref>
		if (err < 0) {
    bfa0:	2e00      	cmp	r6, #0
    bfa2:	f04f 0000 	mov.w	r0, #0
    bfa6:	dbde      	blt.n	bf66 <notify_cb+0x6e>
		data->err = 0;
    bfa8:	60a0      	str	r0, [r4, #8]
    bfaa:	e7db      	b.n	bf64 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    bfac:	f7ff fe3a 	bl	bc24 <gatt_notify>
    bfb0:	4606      	mov	r6, r0
    bfb2:	e7f2      	b.n	bf9a <notify_cb+0xa2>
    bfb4:	0000b909 	.word	0x0000b909
    bfb8:	200005f4 	.word	0x200005f4
    bfbc:	20003506 	.word	0x20003506

0000bfc0 <bt_gatt_init>:
{
    bfc0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    bfc2:	4b22      	ldr	r3, [pc, #136]	; (c04c <bt_gatt_init+0x8c>)
    bfc4:	f3bf 8f5b 	dmb	ish
    bfc8:	2201      	movs	r2, #1
    bfca:	e853 1f00 	ldrex	r1, [r3]
    bfce:	2900      	cmp	r1, #0
    bfd0:	d103      	bne.n	bfda <bt_gatt_init+0x1a>
    bfd2:	e843 2000 	strex	r0, r2, [r3]
    bfd6:	2800      	cmp	r0, #0
    bfd8:	d1f7      	bne.n	bfca <bt_gatt_init+0xa>
    bfda:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    bfde:	d134      	bne.n	c04a <bt_gatt_init+0x8a>
    bfe0:	f3bf 8f5b 	dmb	ish
    bfe4:	4b1a      	ldr	r3, [pc, #104]	; (c050 <bt_gatt_init+0x90>)
    bfe6:	e853 1f00 	ldrex	r1, [r3]
    bfea:	2900      	cmp	r1, #0
    bfec:	d103      	bne.n	bff6 <bt_gatt_init+0x36>
    bfee:	e843 2000 	strex	r0, r2, [r3]
    bff2:	2800      	cmp	r0, #0
    bff4:	d1f7      	bne.n	bfe6 <bt_gatt_init+0x26>
    bff6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    bffa:	d101      	bne.n	c000 <bt_gatt_init+0x40>
    bffc:	f7ff fb1e 	bl	b63c <bt_gatt_service_init.part.12>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c000:	4c14      	ldr	r4, [pc, #80]	; (c054 <bt_gatt_init+0x94>)
    c002:	2230      	movs	r2, #48	; 0x30
    c004:	2100      	movs	r1, #0
    c006:	4620      	mov	r0, r4
    c008:	f01a f8d4 	bl	261b4 <memset>
    c00c:	4b12      	ldr	r3, [pc, #72]	; (c058 <bt_gatt_init+0x98>)
    c00e:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c010:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c012:	4c12      	ldr	r4, [pc, #72]	; (c05c <bt_gatt_init+0x9c>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c014:	4812      	ldr	r0, [pc, #72]	; (c060 <bt_gatt_init+0xa0>)
    c016:	2300      	movs	r3, #0
    c018:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c01c:	f016 f9a4 	bl	22368 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c020:	f104 0020 	add.w	r0, r4, #32
    c024:	2230      	movs	r2, #48	; 0x30
    c026:	2100      	movs	r1, #0
    c028:	f01a f8c4 	bl	261b4 <memset>
    c02c:	4b0d      	ldr	r3, [pc, #52]	; (c064 <bt_gatt_init+0xa4>)
    c02e:	6263      	str	r3, [r4, #36]	; 0x24
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c030:	3450      	adds	r4, #80	; 0x50
    c032:	f3bf 8f5b 	dmb	ish
    c036:	e854 3f00 	ldrex	r3, [r4]
    c03a:	f043 0302 	orr.w	r3, r3, #2
    c03e:	e844 3200 	strex	r2, r3, [r4]
    c042:	2a00      	cmp	r2, #0
    c044:	d1f7      	bne.n	c036 <bt_gatt_init+0x76>
    c046:	f3bf 8f5b 	dmb	ish
}
    c04a:	bd10      	pop	{r4, pc}
    c04c:	2000215c 	.word	0x2000215c
    c050:	20002178 	.word	0x20002178
    c054:	20001230 	.word	0x20001230
    c058:	0002770f 	.word	0x0002770f
    c05c:	20001260 	.word	0x20001260
    c060:	20001988 	.word	0x20001988
    c064:	0000c83d 	.word	0x0000c83d

0000c068 <bt_gatt_attr_get_handle>:
{
    c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
    c06c:	4605      	mov	r5, r0
    c06e:	b910      	cbnz	r0, c076 <bt_gatt_attr_get_handle+0xe>
		return 0;
    c070:	2000      	movs	r0, #0
}
    c072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
    c076:	8a00      	ldrh	r0, [r0, #16]
    c078:	2800      	cmp	r0, #0
    c07a:	d1fa      	bne.n	c072 <bt_gatt_attr_get_handle+0xa>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c07c:	4e18      	ldr	r6, [pc, #96]	; (c0e0 <bt_gatt_attr_get_handle+0x78>)
    c07e:	4c19      	ldr	r4, [pc, #100]	; (c0e4 <bt_gatt_attr_get_handle+0x7c>)
    c080:	4f19      	ldr	r7, [pc, #100]	; (c0e8 <bt_gatt_attr_get_handle+0x80>)
	uint16_t handle = 1;
    c082:	f04f 0901 	mov.w	r9, #1
    c086:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c088:	42b4      	cmp	r4, r6
    c08a:	d90a      	bls.n	c0a2 <bt_gatt_attr_get_handle+0x3a>
    c08c:	4639      	mov	r1, r7
    c08e:	4817      	ldr	r0, [pc, #92]	; (c0ec <bt_gatt_attr_get_handle+0x84>)
    c090:	f240 522d 	movw	r2, #1325	; 0x52d
    c094:	f018 f8d2 	bl	2423c <printk>
    c098:	f240 512d 	movw	r1, #1325	; 0x52d
    c09c:	4638      	mov	r0, r7
    c09e:	f018 fb7f 	bl	247a0 <assert_post_action>
    c0a2:	4544      	cmp	r4, r8
    c0a4:	d2e4      	bcs.n	c070 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
    c0a6:	e9d4 c100 	ldrd	ip, r1, [r4]
    c0aa:	4565      	cmp	r5, ip
    c0ac:	d305      	bcc.n	c0ba <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    c0ae:	2214      	movs	r2, #20
    c0b0:	fb02 c301 	mla	r3, r2, r1, ip
    c0b4:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
    c0b6:	429d      	cmp	r5, r3
    c0b8:	d910      	bls.n	c0dc <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
    c0ba:	eb09 0001 	add.w	r0, r9, r1
    c0be:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c0c0:	3408      	adds	r4, #8
    c0c2:	4681      	mov	r9, r0
    c0c4:	e7e0      	b.n	c088 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
    c0c6:	fb02 ce03 	mla	lr, r2, r3, ip
    c0ca:	4575      	cmp	r5, lr
    c0cc:	d0d1      	beq.n	c072 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    c0ce:	3301      	adds	r3, #1
    c0d0:	eb09 0003 	add.w	r0, r9, r3
    c0d4:	428b      	cmp	r3, r1
    c0d6:	b280      	uxth	r0, r0
    c0d8:	d1f5      	bne.n	c0c6 <bt_gatt_attr_get_handle+0x5e>
    c0da:	e7f1      	b.n	c0c0 <bt_gatt_attr_get_handle+0x58>
    c0dc:	2300      	movs	r3, #0
    c0de:	e7f7      	b.n	c0d0 <bt_gatt_attr_get_handle+0x68>
    c0e0:	0002a758 	.word	0x0002a758
    c0e4:	0002a748 	.word	0x0002a748
    c0e8:	0002d874 	.word	0x0002d874
    c0ec:	0002bced 	.word	0x0002bced

0000c0f0 <bt_gatt_foreach_attr_type>:
{
    c0f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0f4:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
    c0f8:	9100      	str	r1, [sp, #0]
    c0fa:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    c0fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c100:	2c00      	cmp	r4, #0
    c102:	bf08      	it	eq
    c104:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
    c106:	4b4f      	ldr	r3, [pc, #316]	; (c244 <bt_gatt_foreach_attr_type+0x154>)
    c108:	881b      	ldrh	r3, [r3, #0]
    c10a:	4283      	cmp	r3, r0
{
    c10c:	4607      	mov	r7, r0
    c10e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    c110:	d267      	bcs.n	c1e2 <bt_gatt_foreach_attr_type+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    c112:	4b4d      	ldr	r3, [pc, #308]	; (c248 <bt_gatt_foreach_attr_type+0x158>)
    c114:	681d      	ldr	r5, [r3, #0]
    c116:	2d00      	cmp	r5, #0
    c118:	d058      	beq.n	c1cc <bt_gatt_foreach_attr_type+0xdc>
    c11a:	3d08      	subs	r5, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    c11c:	f04f 0b14 	mov.w	fp, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    c120:	2d00      	cmp	r5, #0
    c122:	d053      	beq.n	c1cc <bt_gatt_foreach_attr_type+0xdc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c124:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    c126:	2b00      	cmp	r3, #0
    c128:	f000 808a 	beq.w	c240 <bt_gatt_foreach_attr_type+0x150>
		if (next) {
    c12c:	f1b3 0608 	subs.w	r6, r3, #8
    c130:	d005      	beq.n	c13e <bt_gatt_foreach_attr_type+0x4e>
			if (next->attrs[0].handle <= start_handle) {
    c132:	f853 3c08 	ldr.w	r3, [r3, #-8]
    c136:	8a1b      	ldrh	r3, [r3, #16]
    c138:	42bb      	cmp	r3, r7
    c13a:	d903      	bls.n	c144 <bt_gatt_foreach_attr_type+0x54>
    c13c:	2600      	movs	r6, #0
		for (i = 0; i < svc->attr_count; i++) {
    c13e:	686b      	ldr	r3, [r5, #4]
    c140:	429e      	cmp	r6, r3
    c142:	d351      	bcc.n	c1e8 <bt_gatt_foreach_attr_type+0xf8>
    c144:	68ad      	ldr	r5, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    c146:	2d00      	cmp	r5, #0
    c148:	d040      	beq.n	c1cc <bt_gatt_foreach_attr_type+0xdc>
    c14a:	3d08      	subs	r5, #8
    c14c:	e7e8      	b.n	c120 <bt_gatt_foreach_attr_type+0x30>
			if (handle + static_svc->attr_count < start_handle) {
    c14e:	6873      	ldr	r3, [r6, #4]
    c150:	442b      	add	r3, r5
    c152:	42bb      	cmp	r3, r7
    c154:	d242      	bcs.n	c1dc <bt_gatt_foreach_attr_type+0xec>
				handle += static_svc->attr_count;
    c156:	b29d      	uxth	r5, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c158:	3608      	adds	r6, #8
    c15a:	4b3c      	ldr	r3, [pc, #240]	; (c24c <bt_gatt_foreach_attr_type+0x15c>)
    c15c:	429e      	cmp	r6, r3
    c15e:	d90a      	bls.n	c176 <bt_gatt_foreach_attr_type+0x86>
    c160:	493b      	ldr	r1, [pc, #236]	; (c250 <bt_gatt_foreach_attr_type+0x160>)
    c162:	483c      	ldr	r0, [pc, #240]	; (c254 <bt_gatt_foreach_attr_type+0x164>)
    c164:	f240 52f1 	movw	r2, #1521	; 0x5f1
    c168:	f018 f868 	bl	2423c <printk>
    c16c:	f240 51f1 	movw	r1, #1521	; 0x5f1
    c170:	4837      	ldr	r0, [pc, #220]	; (c250 <bt_gatt_foreach_attr_type+0x160>)
    c172:	f018 fb15 	bl	247a0 <assert_post_action>
    c176:	4b35      	ldr	r3, [pc, #212]	; (c24c <bt_gatt_foreach_attr_type+0x15c>)
    c178:	429e      	cmp	r6, r3
    c17a:	d3e8      	bcc.n	c14e <bt_gatt_foreach_attr_type+0x5e>
    c17c:	e7c9      	b.n	c112 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c17e:	58d1      	ldr	r1, [r2, r3]
    c180:	4640      	mov	r0, r8
    c182:	f01a fa56 	bl	26632 <bt_uuid_cmp>
    c186:	b1a0      	cbz	r0, c1b2 <bt_gatt_foreach_attr_type+0xc2>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c188:	3501      	adds	r5, #1
    c18a:	f10a 0a01 	add.w	sl, sl, #1
    c18e:	b2ad      	uxth	r5, r5
    c190:	6873      	ldr	r3, [r6, #4]
    c192:	4553      	cmp	r3, sl
    c194:	d9e0      	bls.n	c158 <bt_gatt_foreach_attr_type+0x68>
	if (handle > end_handle) {
    c196:	9b00      	ldr	r3, [sp, #0]
    c198:	429d      	cmp	r5, r3
    c19a:	d817      	bhi.n	c1cc <bt_gatt_foreach_attr_type+0xdc>
	if (handle < start_handle) {
    c19c:	42bd      	cmp	r5, r7
    c19e:	d3f3      	bcc.n	c188 <bt_gatt_foreach_attr_type+0x98>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    c1a0:	2314      	movs	r3, #20
    c1a2:	6832      	ldr	r2, [r6, #0]
    c1a4:	fb03 f30a 	mul.w	r3, r3, sl
    c1a8:	eb02 0b03 	add.w	fp, r2, r3
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c1ac:	f1b8 0f00 	cmp.w	r8, #0
    c1b0:	d1e5      	bne.n	c17e <bt_gatt_foreach_attr_type+0x8e>
	if (attr_data && attr_data != attr->user_data) {
    c1b2:	f1b9 0f00 	cmp.w	r9, #0
    c1b6:	d10c      	bne.n	c1d2 <bt_gatt_foreach_attr_type+0xe2>
	*num_matches -= 1;
    c1b8:	3c01      	subs	r4, #1
    c1ba:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    c1bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c1c0:	4629      	mov	r1, r5
    c1c2:	4658      	mov	r0, fp
    c1c4:	4798      	blx	r3
	if (!*num_matches) {
    c1c6:	b10c      	cbz	r4, c1cc <bt_gatt_foreach_attr_type+0xdc>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    c1c8:	2800      	cmp	r0, #0
    c1ca:	d1dd      	bne.n	c188 <bt_gatt_foreach_attr_type+0x98>
}
    c1cc:	b003      	add	sp, #12
    c1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    c1d2:	f8db 300c 	ldr.w	r3, [fp, #12]
    c1d6:	4599      	cmp	r9, r3
    c1d8:	d1d6      	bne.n	c188 <bt_gatt_foreach_attr_type+0x98>
    c1da:	e7ed      	b.n	c1b8 <bt_gatt_foreach_attr_type+0xc8>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c1dc:	f04f 0a00 	mov.w	sl, #0
    c1e0:	e7d6      	b.n	c190 <bt_gatt_foreach_attr_type+0xa0>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c1e2:	4e1d      	ldr	r6, [pc, #116]	; (c258 <bt_gatt_foreach_attr_type+0x168>)
		uint16_t handle = 1;
    c1e4:	2501      	movs	r5, #1
    c1e6:	e7b8      	b.n	c15a <bt_gatt_foreach_attr_type+0x6a>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    c1e8:	6829      	ldr	r1, [r5, #0]
	if (handle > end_handle) {
    c1ea:	9800      	ldr	r0, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
    c1ec:	fb0b f206 	mul.w	r2, fp, r6
    c1f0:	eb01 0a02 	add.w	sl, r1, r2
			if (gatt_foreach_iter(attr, attr->handle,
    c1f4:	f8ba 3010 	ldrh.w	r3, [sl, #16]
	if (handle > end_handle) {
    c1f8:	4298      	cmp	r0, r3
    c1fa:	d3e7      	bcc.n	c1cc <bt_gatt_foreach_attr_type+0xdc>
	if (handle < start_handle) {
    c1fc:	429f      	cmp	r7, r3
    c1fe:	d818      	bhi.n	c232 <bt_gatt_foreach_attr_type+0x142>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c200:	f1b8 0f00 	cmp.w	r8, #0
    c204:	d10d      	bne.n	c222 <bt_gatt_foreach_attr_type+0x132>
	if (attr_data && attr_data != attr->user_data) {
    c206:	f1b9 0f00 	cmp.w	r9, #0
    c20a:	d114      	bne.n	c236 <bt_gatt_foreach_attr_type+0x146>
	*num_matches -= 1;
    c20c:	3c01      	subs	r4, #1
    c20e:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    c210:	4619      	mov	r1, r3
    c212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c216:	4650      	mov	r0, sl
    c218:	4798      	blx	r3
	if (!*num_matches) {
    c21a:	2c00      	cmp	r4, #0
    c21c:	d0d6      	beq.n	c1cc <bt_gatt_foreach_attr_type+0xdc>
			if (gatt_foreach_iter(attr, attr->handle,
    c21e:	b940      	cbnz	r0, c232 <bt_gatt_foreach_attr_type+0x142>
    c220:	e7d4      	b.n	c1cc <bt_gatt_foreach_attr_type+0xdc>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c222:	5889      	ldr	r1, [r1, r2]
    c224:	9301      	str	r3, [sp, #4]
    c226:	4640      	mov	r0, r8
    c228:	f01a fa03 	bl	26632 <bt_uuid_cmp>
    c22c:	9b01      	ldr	r3, [sp, #4]
    c22e:	2800      	cmp	r0, #0
    c230:	d0e9      	beq.n	c206 <bt_gatt_foreach_attr_type+0x116>
		for (i = 0; i < svc->attr_count; i++) {
    c232:	3601      	adds	r6, #1
    c234:	e783      	b.n	c13e <bt_gatt_foreach_attr_type+0x4e>
	if (attr_data && attr_data != attr->user_data) {
    c236:	f8da 200c 	ldr.w	r2, [sl, #12]
    c23a:	4591      	cmp	r9, r2
    c23c:	d1f9      	bne.n	c232 <bt_gatt_foreach_attr_type+0x142>
    c23e:	e7e5      	b.n	c20c <bt_gatt_foreach_attr_type+0x11c>
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    c240:	461e      	mov	r6, r3
    c242:	e77c      	b.n	c13e <bt_gatt_foreach_attr_type+0x4e>
    c244:	20003504 	.word	0x20003504
    c248:	20002154 	.word	0x20002154
    c24c:	0002a758 	.word	0x0002a758
    c250:	0002d874 	.word	0x0002d874
    c254:	0002bced 	.word	0x0002bced
    c258:	0002a748 	.word	0x0002a748

0000c25c <db_hash_gen>:
{
    c25c:	b530      	push	{r4, r5, lr}
    c25e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    c260:	2210      	movs	r2, #16
    c262:	2100      	movs	r1, #0
{
    c264:	4604      	mov	r4, r0
	uint8_t key[16] = {};
    c266:	4668      	mov	r0, sp
    c268:	f019 ffa4 	bl	261b4 <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    c26c:	aa1c      	add	r2, sp, #112	; 0x70
    c26e:	4669      	mov	r1, sp
    c270:	a804      	add	r0, sp, #16
    c272:	f019 fdad 	bl	25dd0 <tc_cmac_setup>
    c276:	b928      	cbnz	r0, c284 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
    c278:	4813      	ldr	r0, [pc, #76]	; (c2c8 <db_hash_gen+0x6c>)
    c27a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to calculate hash");
    c27c:	f017 ffde 	bl	2423c <printk>
}
    c280:	b049      	add	sp, #292	; 0x124
    c282:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    c284:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c288:	2001      	movs	r0, #1
    c28a:	ab04      	add	r3, sp, #16
    c28c:	4a0f      	ldr	r2, [pc, #60]	; (c2cc <db_hash_gen+0x70>)
    c28e:	f01b fa33 	bl	276f8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    c292:	a904      	add	r1, sp, #16
    c294:	480e      	ldr	r0, [pc, #56]	; (c2d0 <db_hash_gen+0x74>)
    c296:	f019 fe30 	bl	25efa <tc_cmac_final>
    c29a:	b910      	cbnz	r0, c2a2 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
    c29c:	2145      	movs	r1, #69	; 0x45
    c29e:	480d      	ldr	r0, [pc, #52]	; (c2d4 <db_hash_gen+0x78>)
    c2a0:	e7ec      	b.n	c27c <db_hash_gen+0x20>
    c2a2:	4b0b      	ldr	r3, [pc, #44]	; (c2d0 <db_hash_gen+0x74>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    c2a4:	2200      	movs	r2, #0
    c2a6:	f103 0110 	add.w	r1, r3, #16
    c2aa:	3201      	adds	r2, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    c2ac:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    c2ae:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    c2b2:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    c2b6:	2a08      	cmp	r2, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    c2b8:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    c2ba:	d1f6      	bne.n	c2aa <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    c2bc:	2c00      	cmp	r4, #0
    c2be:	d0df      	beq.n	c280 <db_hash_gen+0x24>
		db_hash_store();
    c2c0:	f7ff f97e 	bl	b5c0 <db_hash_store>
    c2c4:	e7dc      	b.n	c280 <db_hash_gen+0x24>
    c2c6:	bf00      	nop
    c2c8:	0002d95d 	.word	0x0002d95d
    c2cc:	00027337 	.word	0x00027337
    c2d0:	20003686 	.word	0x20003686
    c2d4:	0002d97b 	.word	0x0002d97b

0000c2d8 <db_hash_commit>:
{
    c2d8:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    c2da:	480f      	ldr	r0, [pc, #60]	; (c318 <db_hash_commit+0x40>)
    c2dc:	f016 f8b4 	bl	22448 <k_delayed_work_cancel>
	if (!err) {
    c2e0:	b908      	cbnz	r0, c2e6 <db_hash_commit+0xe>
		db_hash_gen(false);
    c2e2:	f7ff ffbb 	bl	c25c <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    c2e6:	2210      	movs	r2, #16
    c2e8:	490c      	ldr	r1, [pc, #48]	; (c31c <db_hash_commit+0x44>)
    c2ea:	480d      	ldr	r0, [pc, #52]	; (c320 <db_hash_commit+0x48>)
    c2ec:	f019 ff11 	bl	26112 <memcmp>
    c2f0:	b948      	cbnz	r0, c306 <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    c2f2:	480c      	ldr	r0, [pc, #48]	; (c324 <db_hash_commit+0x4c>)
    c2f4:	f016 f8a8 	bl	22448 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c2f8:	f06f 0101 	mvn.w	r1, #1
    c2fc:	480a      	ldr	r0, [pc, #40]	; (c328 <db_hash_commit+0x50>)
    c2fe:	f01b f87f 	bl	27400 <atomic_and>
}
    c302:	2000      	movs	r0, #0
    c304:	bd08      	pop	{r3, pc}
	sc_indicate(0x0001, 0xffff);
    c306:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c30a:	2001      	movs	r0, #1
    c30c:	f7ff fd6c 	bl	bde8 <sc_indicate>
	db_hash_store();
    c310:	f7ff f956 	bl	b5c0 <db_hash_store>
	return 0;
    c314:	e7f5      	b.n	c302 <db_hash_commit+0x2a>
    c316:	bf00      	nop
    c318:	20001230 	.word	0x20001230
    c31c:	20003686 	.word	0x20003686
    c320:	20003696 	.word	0x20003696
    c324:	20001280 	.word	0x20001280
    c328:	200012b0 	.word	0x200012b0

0000c32c <bt_gatt_service_register>:
{
    c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    c330:	4604      	mov	r4, r0
{
    c332:	b085      	sub	sp, #20
	__ASSERT(svc, "invalid parameters\n");
    c334:	b950      	cbnz	r0, c34c <bt_gatt_service_register+0x20>
    c336:	4972      	ldr	r1, [pc, #456]	; (c500 <bt_gatt_service_register+0x1d4>)
    c338:	4872      	ldr	r0, [pc, #456]	; (c504 <bt_gatt_service_register+0x1d8>)
    c33a:	f240 42ae 	movw	r2, #1198	; 0x4ae
    c33e:	f017 ff7d 	bl	2423c <printk>
    c342:	f240 41ae 	movw	r1, #1198	; 0x4ae
    c346:	486e      	ldr	r0, [pc, #440]	; (c500 <bt_gatt_service_register+0x1d4>)
    c348:	f018 fa2a 	bl	247a0 <assert_post_action>
	__ASSERT(svc->attrs, "invalid parameters\n");
    c34c:	6823      	ldr	r3, [r4, #0]
    c34e:	b953      	cbnz	r3, c366 <bt_gatt_service_register+0x3a>
    c350:	496b      	ldr	r1, [pc, #428]	; (c500 <bt_gatt_service_register+0x1d4>)
    c352:	486c      	ldr	r0, [pc, #432]	; (c504 <bt_gatt_service_register+0x1d8>)
    c354:	f240 42af 	movw	r2, #1199	; 0x4af
    c358:	f017 ff70 	bl	2423c <printk>
    c35c:	f240 41af 	movw	r1, #1199	; 0x4af
    c360:	4867      	ldr	r0, [pc, #412]	; (c500 <bt_gatt_service_register+0x1d4>)
    c362:	f018 fa1d 	bl	247a0 <assert_post_action>
	__ASSERT(svc->attr_count, "invalid parameters\n");
    c366:	6863      	ldr	r3, [r4, #4]
    c368:	b953      	cbnz	r3, c380 <bt_gatt_service_register+0x54>
    c36a:	4965      	ldr	r1, [pc, #404]	; (c500 <bt_gatt_service_register+0x1d4>)
    c36c:	4865      	ldr	r0, [pc, #404]	; (c504 <bt_gatt_service_register+0x1d8>)
    c36e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    c372:	f017 ff63 	bl	2423c <printk>
    c376:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
    c37a:	4861      	ldr	r0, [pc, #388]	; (c500 <bt_gatt_service_register+0x1d4>)
    c37c:	f018 fa10 	bl	247a0 <assert_post_action>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c380:	f3bf 8f5b 	dmb	ish
    c384:	4b60      	ldr	r3, [pc, #384]	; (c508 <bt_gatt_service_register+0x1dc>)
    c386:	2201      	movs	r2, #1
    c388:	e853 1f00 	ldrex	r1, [r3]
    c38c:	2900      	cmp	r1, #0
    c38e:	d103      	bne.n	c398 <bt_gatt_service_register+0x6c>
    c390:	e843 2000 	strex	r0, r2, [r3]
    c394:	2800      	cmp	r0, #0
    c396:	d1f7      	bne.n	c388 <bt_gatt_service_register+0x5c>
    c398:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    c39c:	d101      	bne.n	c3a2 <bt_gatt_service_register+0x76>
    c39e:	f7ff f94d 	bl	b63c <bt_gatt_service_init.part.12>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    c3a2:	6823      	ldr	r3, [r4, #0]
    c3a4:	2500      	movs	r5, #0
    c3a6:	6818      	ldr	r0, [r3, #0]
    c3a8:	f88d 5004 	strb.w	r5, [sp, #4]
    c3ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    c3b0:	a901      	add	r1, sp, #4
    c3b2:	f8ad 3006 	strh.w	r3, [sp, #6]
    c3b6:	f01a f93c 	bl	26632 <bt_uuid_cmp>
    c3ba:	b920      	cbnz	r0, c3c6 <bt_gatt_service_register+0x9a>
		return -EALREADY;
    c3bc:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    c3c0:	b005      	add	sp, #20
    c3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    c3c6:	6823      	ldr	r3, [r4, #0]
    c3c8:	a902      	add	r1, sp, #8
    c3ca:	6818      	ldr	r0, [r3, #0]
    c3cc:	f88d 5008 	strb.w	r5, [sp, #8]
    c3d0:	f641 0301 	movw	r3, #6145	; 0x1801
    c3d4:	f8ad 300a 	strh.w	r3, [sp, #10]
    c3d8:	f01a f92b 	bl	26632 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    c3dc:	2800      	cmp	r0, #0
    c3de:	d0ed      	beq.n	c3bc <bt_gatt_service_register+0x90>
Z_GENLIST_IS_EMPTY(slist)
    c3e0:	4d4a      	ldr	r5, [pc, #296]	; (c50c <bt_gatt_service_register+0x1e0>)
	struct bt_gatt_attr *attrs = svc->attrs;
    c3e2:	f8d4 8000 	ldr.w	r8, [r4]
	if (sys_slist_is_empty(&db)) {
    c3e6:	682e      	ldr	r6, [r5, #0]
	uint16_t count = svc->attr_count;
    c3e8:	f8b4 9004 	ldrh.w	r9, [r4, #4]
	if (sys_slist_is_empty(&db)) {
    c3ec:	b936      	cbnz	r6, c3fc <bt_gatt_service_register+0xd0>
		handle = last_static_handle;
    c3ee:	4b48      	ldr	r3, [pc, #288]	; (c510 <bt_gatt_service_register+0x1e4>)
    c3f0:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    c3f2:	f8df b128 	ldr.w	fp, [pc, #296]	; c51c <bt_gatt_service_register+0x1f0>
	const struct bt_gatt_attr *attr = NULL;
    c3f6:	f04f 0a00 	mov.w	sl, #0
    c3fa:	e01a      	b.n	c432 <bt_gatt_service_register+0x106>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    c3fc:	686b      	ldr	r3, [r5, #4]
    c3fe:	2b00      	cmp	r3, #0
    c400:	d07c      	beq.n	c4fc <bt_gatt_service_register+0x1d0>
	handle = last->attrs[last->attr_count - 1].handle;
    c402:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    c406:	2114      	movs	r1, #20
    c408:	fb01 3302 	mla	r3, r1, r2, r3
    c40c:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    c410:	463e      	mov	r6, r7
    c412:	e7ee      	b.n	c3f2 <bt_gatt_service_register+0xc6>
		if (!attrs->handle) {
    c414:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    c418:	2900      	cmp	r1, #0
    c41a:	d134      	bne.n	c486 <bt_gatt_service_register+0x15a>
			attrs->handle = ++handle;
    c41c:	1c79      	adds	r1, r7, #1
    c41e:	b289      	uxth	r1, r1
    c420:	f8a8 1010 	strh.w	r1, [r8, #16]
	for (; attrs && count; attrs++, count--) {
    c424:	f109 39ff 	add.w	r9, r9, #4294967295
    c428:	f108 0814 	add.w	r8, r8, #20
    c42c:	fa1f f989 	uxth.w	r9, r9
    c430:	460f      	mov	r7, r1
    c432:	f1b8 0f00 	cmp.w	r8, #0
    c436:	d002      	beq.n	c43e <bt_gatt_service_register+0x112>
    c438:	f1b9 0f00 	cmp.w	r9, #0
    c43c:	d1ea      	bne.n	c414 <bt_gatt_service_register+0xe8>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    c43e:	b11e      	cbz	r6, c448 <bt_gatt_service_register+0x11c>
    c440:	6823      	ldr	r3, [r4, #0]
    c442:	8a18      	ldrh	r0, [r3, #16]
    c444:	4286      	cmp	r6, r0
    c446:	d234      	bcs.n	c4b2 <bt_gatt_service_register+0x186>
	parent->next = child;
    c448:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    c44a:	f104 0308 	add.w	r3, r4, #8
    c44e:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    c450:	686a      	ldr	r2, [r5, #4]
    c452:	2a00      	cmp	r2, #0
    c454:	d142      	bne.n	c4dc <bt_gatt_service_register+0x1b0>
	list->head = node;
    c456:	e9c5 3300 	strd	r3, r3, [r5]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c45a:	f3bf 8f5b 	dmb	ish
    c45e:	4b2d      	ldr	r3, [pc, #180]	; (c514 <bt_gatt_service_register+0x1e8>)
    c460:	6818      	ldr	r0, [r3, #0]
    c462:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    c466:	2800      	cmp	r0, #0
    c468:	d0aa      	beq.n	c3c0 <bt_gatt_service_register+0x94>
		    svc->attrs[svc->attr_count - 1].handle);
    c46a:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    c46e:	2114      	movs	r1, #20
    c470:	fb01 2303 	mla	r3, r1, r3, r2
    c474:	8a10      	ldrh	r0, [r2, #16]
    c476:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    c47a:	f7ff fcb5 	bl	bde8 <sc_indicate>
	db_changed();
    c47e:	f7ff fb29 	bl	bad4 <db_changed>
	return 0;
    c482:	2000      	movs	r0, #0
    c484:	e79c      	b.n	c3c0 <bt_gatt_service_register+0x94>
		} else if (attrs->handle > handle) {
    c486:	42b9      	cmp	r1, r7
    c488:	d8cc      	bhi.n	c424 <bt_gatt_service_register+0xf8>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    c48a:	ab03      	add	r3, sp, #12
    c48c:	465a      	mov	r2, fp
    c48e:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    c490:	f8cd a00c 	str.w	sl, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    c494:	f01b f930 	bl	276f8 <bt_gatt_foreach_attr>
	return attr;
    c498:	9b03      	ldr	r3, [sp, #12]
		} else if (find_attr(attrs->handle)) {
    c49a:	b143      	cbz	r3, c4ae <bt_gatt_service_register+0x182>
			BT_ERR("Unable to register handle 0x%04x",
    c49c:	481e      	ldr	r0, [pc, #120]	; (c518 <bt_gatt_service_register+0x1ec>)
    c49e:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    c4a2:	2145      	movs	r1, #69	; 0x45
    c4a4:	f017 feca 	bl	2423c <printk>
			return -EINVAL;
    c4a8:	f06f 0015 	mvn.w	r0, #21
    c4ac:	e788      	b.n	c3c0 <bt_gatt_service_register+0x94>
		} else if (find_attr(attrs->handle)) {
    c4ae:	4639      	mov	r1, r7
    c4b0:	e7b8      	b.n	c424 <bt_gatt_service_register+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    c4b2:	6829      	ldr	r1, [r5, #0]
    c4b4:	2900      	cmp	r1, #0
    c4b6:	d0d0      	beq.n	c45a <bt_gatt_service_register+0x12e>
    c4b8:	f1a1 0308 	sub.w	r3, r1, #8
    c4bc:	2200      	movs	r2, #0
    c4be:	2b00      	cmp	r3, #0
    c4c0:	d0cb      	beq.n	c45a <bt_gatt_service_register+0x12e>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    c4c2:	681e      	ldr	r6, [r3, #0]
    c4c4:	8a36      	ldrh	r6, [r6, #16]
    c4c6:	4286      	cmp	r6, r0
    c4c8:	d911      	bls.n	c4ee <bt_gatt_service_register+0x1c2>
			if (prev) {
    c4ca:	f104 0308 	add.w	r3, r4, #8
    c4ce:	b142      	cbz	r2, c4e2 <bt_gatt_service_register+0x1b6>
Z_GENLIST_INSERT(slist, snode)
    c4d0:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    c4d2:	60a1      	str	r1, [r4, #8]
Z_GENLIST_INSERT(slist, snode)
    c4d4:	2900      	cmp	r1, #0
    c4d6:	d0bb      	beq.n	c450 <bt_gatt_service_register+0x124>
	parent->next = child;
    c4d8:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    c4da:	e7be      	b.n	c45a <bt_gatt_service_register+0x12e>
    c4dc:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c4de:	606b      	str	r3, [r5, #4]
    c4e0:	e7bb      	b.n	c45a <bt_gatt_service_register+0x12e>
Z_GENLIST_PREPEND(slist, snode)
    c4e2:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
    c4e4:	60a1      	str	r1, [r4, #8]
	list->head = node;
    c4e6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
    c4e8:	2a00      	cmp	r2, #0
    c4ea:	d1b6      	bne.n	c45a <bt_gatt_service_register+0x12e>
    c4ec:	e7f7      	b.n	c4de <bt_gatt_service_register+0x1b2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    c4ee:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    c4f0:	2e00      	cmp	r6, #0
    c4f2:	d0b2      	beq.n	c45a <bt_gatt_service_register+0x12e>
    c4f4:	461a      	mov	r2, r3
    c4f6:	f1a6 0308 	sub.w	r3, r6, #8
    c4fa:	e7e0      	b.n	c4be <bt_gatt_service_register+0x192>
	handle = last->attrs[last->attr_count - 1].handle;
    c4fc:	681b      	ldr	r3, [r3, #0]
    c4fe:	deff      	udf	#255	; 0xff
    c500:	0002d874 	.word	0x0002d874
    c504:	0002bced 	.word	0x0002bced
    c508:	20002178 	.word	0x20002178
    c50c:	20002154 	.word	0x20002154
    c510:	20003504 	.word	0x20003504
    c514:	2000215c 	.word	0x2000215c
    c518:	0002d8a4 	.word	0x0002d8a4
    c51c:	000272ed 	.word	0x000272ed

0000c520 <ccc_set_direct>:
{
    c520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c524:	b0b9      	sub	sp, #228	; 0xe4
    c526:	4689      	mov	r9, r1
    c528:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    c52a:	492a      	ldr	r1, [pc, #168]	; (c5d4 <ccc_set_direct+0xb4>)
    c52c:	9840      	ldr	r0, [sp, #256]	; 0x100
    c52e:	466a      	mov	r2, sp
{
    c530:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    c532:	f018 fac7 	bl	24ac4 <settings_name_steq>
    c536:	b948      	cbnz	r0, c54c <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
    c538:	2145      	movs	r1, #69	; 0x45
    c53a:	4827      	ldr	r0, [pc, #156]	; (c5d8 <ccc_set_direct+0xb8>)
    c53c:	f017 fe7e 	bl	2423c <printk>
    c540:	f06f 0515 	mvn.w	r5, #21
}
    c544:	4628      	mov	r0, r5
    c546:	b039      	add	sp, #228	; 0xe4
    c548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    c54c:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    c54e:	a901      	add	r1, sp, #4
    c550:	4620      	mov	r0, r4
    c552:	f018 fad7 	bl	24b04 <settings_name_next>
		if (!name) {
    c556:	b93c      	cbnz	r4, c568 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
    c558:	2145      	movs	r1, #69	; 0x45
    c55a:	4820      	ldr	r0, [pc, #128]	; (c5dc <ccc_set_direct+0xbc>)
    c55c:	f017 fe6e 	bl	2423c <printk>
			return -EINVAL;
    c560:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    c564:	4625      	mov	r5, r4
    c566:	e7ed      	b.n	c544 <ccc_set_direct+0x24>
		} else if (!next) {
    c568:	9801      	ldr	r0, [sp, #4]
    c56a:	b970      	cbnz	r0, c58a <ccc_set_direct+0x6a>
		err = bt_settings_decode_key(name, &addr);
    c56c:	ae02      	add	r6, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    c56e:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    c572:	4631      	mov	r1, r6
    c574:	4620      	mov	r0, r4
    c576:	f019 fe83 	bl	26280 <bt_settings_decode_key>
		if (err) {
    c57a:	4605      	mov	r5, r0
    c57c:	b150      	cbz	r0, c594 <ccc_set_direct+0x74>
			BT_ERR("Unable to decode address %s", log_strdup(name));
    c57e:	4622      	mov	r2, r4
    c580:	2145      	movs	r1, #69	; 0x45
    c582:	4817      	ldr	r0, [pc, #92]	; (c5e0 <ccc_set_direct+0xc0>)
    c584:	f017 fe5a 	bl	2423c <printk>
    c588:	e7ea      	b.n	c560 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
    c58a:	220a      	movs	r2, #10
    c58c:	2100      	movs	r1, #0
    c58e:	f019 fcf8 	bl	25f82 <strtol>
    c592:	e7eb      	b.n	c56c <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
    c594:	9604      	str	r6, [sp, #16]
		if (len_rd) {
    c596:	f1b9 0f00 	cmp.w	r9, #0
    c59a:	d017      	beq.n	c5cc <ccc_set_direct+0xac>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    c59c:	ae08      	add	r6, sp, #32
    c59e:	22c0      	movs	r2, #192	; 0xc0
    c5a0:	4631      	mov	r1, r6
    c5a2:	4640      	mov	r0, r8
    c5a4:	47b8      	blx	r7
			if (len < 0) {
    c5a6:	1e04      	subs	r4, r0, #0
    c5a8:	da05      	bge.n	c5b6 <ccc_set_direct+0x96>
				BT_ERR("Failed to decode value (err %zd)", len);
    c5aa:	4622      	mov	r2, r4
    c5ac:	2145      	movs	r1, #69	; 0x45
    c5ae:	480d      	ldr	r0, [pc, #52]	; (c5e4 <ccc_set_direct+0xc4>)
    c5b0:	f017 fe44 	bl	2423c <printk>
				return len;
    c5b4:	e7d6      	b.n	c564 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
    c5b6:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    c5b8:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    c5ba:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    c5bc:	ab04      	add	r3, sp, #16
    c5be:	4a0a      	ldr	r2, [pc, #40]	; (c5e8 <ccc_set_direct+0xc8>)
    c5c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c5c4:	2001      	movs	r0, #1
    c5c6:	f01b f897 	bl	276f8 <bt_gatt_foreach_attr>
	return 0;
    c5ca:	e7bb      	b.n	c544 <ccc_set_direct+0x24>
			load.count = 0;
    c5cc:	e9cd 0006 	strd	r0, r0, [sp, #24]
    c5d0:	e7f4      	b.n	c5bc <ccc_set_direct+0x9c>
    c5d2:	bf00      	nop
    c5d4:	0002d8ed 	.word	0x0002d8ed
    c5d8:	0002d8f4 	.word	0x0002d8f4
    c5dc:	0002ca06 	.word	0x0002ca06
    c5e0:	0002daaa 	.word	0x0002daaa
    c5e4:	0002d999 	.word	0x0002d999
    c5e8:	0000b81d 	.word	0x0000b81d

0000c5ec <bt_gatt_notify_cb>:
{
    c5ec:	b530      	push	{r4, r5, lr}
    c5ee:	4604      	mov	r4, r0
    c5f0:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
    c5f2:	460d      	mov	r5, r1
    c5f4:	b951      	cbnz	r1, c60c <bt_gatt_notify_cb+0x20>
    c5f6:	4941      	ldr	r1, [pc, #260]	; (c6fc <bt_gatt_notify_cb+0x110>)
    c5f8:	4841      	ldr	r0, [pc, #260]	; (c700 <bt_gatt_notify_cb+0x114>)
    c5fa:	f640 023d 	movw	r2, #2109	; 0x83d
    c5fe:	f017 fe1d 	bl	2423c <printk>
    c602:	f640 013d 	movw	r1, #2109	; 0x83d
    c606:	483d      	ldr	r0, [pc, #244]	; (c6fc <bt_gatt_notify_cb+0x110>)
    c608:	f018 f8ca 	bl	247a0 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    c60c:	686b      	ldr	r3, [r5, #4]
    c60e:	b953      	cbnz	r3, c626 <bt_gatt_notify_cb+0x3a>
    c610:	493a      	ldr	r1, [pc, #232]	; (c6fc <bt_gatt_notify_cb+0x110>)
    c612:	483b      	ldr	r0, [pc, #236]	; (c700 <bt_gatt_notify_cb+0x114>)
    c614:	f640 023e 	movw	r2, #2110	; 0x83e
    c618:	f017 fe10 	bl	2423c <printk>
    c61c:	f640 013e 	movw	r1, #2110	; 0x83e
    c620:	4836      	ldr	r0, [pc, #216]	; (c6fc <bt_gatt_notify_cb+0x110>)
    c622:	f018 f8bd 	bl	247a0 <assert_post_action>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c626:	2101      	movs	r1, #1
    c628:	4836      	ldr	r0, [pc, #216]	; (c704 <bt_gatt_notify_cb+0x118>)
    c62a:	f01a ff3c 	bl	274a6 <atomic_test_bit>
    c62e:	2800      	cmp	r0, #0
    c630:	d05a      	beq.n	c6e8 <bt_gatt_notify_cb+0xfc>
	data.attr = params->attr;
    c632:	6868      	ldr	r0, [r5, #4]
    c634:	9007      	str	r0, [sp, #28]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    c636:	b114      	cbz	r4, c63e <bt_gatt_notify_cb+0x52>
    c638:	7aa3      	ldrb	r3, [r4, #10]
    c63a:	2b07      	cmp	r3, #7
    c63c:	d157      	bne.n	c6ee <bt_gatt_notify_cb+0x102>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    c63e:	f7ff fd13 	bl	c068 <bt_gatt_attr_get_handle>
    c642:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (!data.handle) {
    c646:	b918      	cbnz	r0, c650 <bt_gatt_notify_cb+0x64>
		return -ENOENT;
    c648:	f06f 0001 	mvn.w	r0, #1
}
    c64c:	b00d      	add	sp, #52	; 0x34
    c64e:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    c650:	682a      	ldr	r2, [r5, #0]
    c652:	b9aa      	cbnz	r2, c680 <bt_gatt_notify_cb+0x94>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    c654:	9b07      	ldr	r3, [sp, #28]
    c656:	6818      	ldr	r0, [r3, #0]
    c658:	2300      	movs	r3, #0
    c65a:	f88d 3014 	strb.w	r3, [sp, #20]
    c65e:	a905      	add	r1, sp, #20
    c660:	f642 0303 	movw	r3, #10243	; 0x2803
    c664:	f8ad 3016 	strh.w	r3, [sp, #22]
    c668:	f019 ffe3 	bl	26632 <bt_uuid_cmp>
    c66c:	b1c0      	cbz	r0, c6a0 <bt_gatt_notify_cb+0xb4>
	if (conn) {
    c66e:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    c672:	b1fc      	cbz	r4, c6b4 <bt_gatt_notify_cb+0xc8>
		return gatt_notify(conn, data.handle, params);
    c674:	4601      	mov	r1, r0
    c676:	462a      	mov	r2, r5
    c678:	4620      	mov	r0, r4
    c67a:	f7ff fad3 	bl	bc24 <gatt_notify>
    c67e:	e7e5      	b.n	c64c <bt_gatt_notify_cb+0x60>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c680:	a907      	add	r1, sp, #28
    c682:	9102      	str	r1, [sp, #8]
    c684:	4920      	ldr	r1, [pc, #128]	; (c708 <bt_gatt_notify_cb+0x11c>)
    c686:	9101      	str	r1, [sp, #4]
    c688:	2101      	movs	r1, #1
	found->attr = NULL;
    c68a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c68c:	9100      	str	r1, [sp, #0]
    c68e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    c692:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c694:	f7ff fd2c 	bl	c0f0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    c698:	9b07      	ldr	r3, [sp, #28]
    c69a:	2b00      	cmp	r3, #0
    c69c:	d1da      	bne.n	c654 <bt_gatt_notify_cb+0x68>
    c69e:	e7d3      	b.n	c648 <bt_gatt_notify_cb+0x5c>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    c6a0:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    c6a2:	68c3      	ldr	r3, [r0, #12]
    c6a4:	799b      	ldrb	r3, [r3, #6]
    c6a6:	06db      	lsls	r3, r3, #27
    c6a8:	d524      	bpl.n	c6f4 <bt_gatt_notify_cb+0x108>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    c6aa:	f01a ffd7 	bl	2765c <bt_gatt_attr_value_handle>
    c6ae:	f8ad 0020 	strh.w	r0, [sp, #32]
    c6b2:	e7dc      	b.n	c66e <bt_gatt_notify_cb+0x82>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c6b4:	f642 1202 	movw	r2, #10498	; 0x2902
    c6b8:	f8ad 201a 	strh.w	r2, [sp, #26]
    c6bc:	aa07      	add	r2, sp, #28
	data.err = -ENOTCONN;
    c6be:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c6c2:	9202      	str	r2, [sp, #8]
    c6c4:	4a11      	ldr	r2, [pc, #68]	; (c70c <bt_gatt_notify_cb+0x120>)
	data.err = -ENOTCONN;
    c6c6:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_NOTIFY;
    c6c8:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c6ca:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    c6ce:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c6d2:	aa06      	add	r2, sp, #24
    c6d4:	4623      	mov	r3, r4
    c6d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    c6da:	950b      	str	r5, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c6dc:	f88d 4018 	strb.w	r4, [sp, #24]
    c6e0:	f7ff fd06 	bl	c0f0 <bt_gatt_foreach_attr_type>
	return data.err;
    c6e4:	9809      	ldr	r0, [sp, #36]	; 0x24
    c6e6:	e7b1      	b.n	c64c <bt_gatt_notify_cb+0x60>
		return -EAGAIN;
    c6e8:	f06f 000a 	mvn.w	r0, #10
    c6ec:	e7ae      	b.n	c64c <bt_gatt_notify_cb+0x60>
		return -ENOTCONN;
    c6ee:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c6f2:	e7ab      	b.n	c64c <bt_gatt_notify_cb+0x60>
			return -EINVAL;
    c6f4:	f06f 0015 	mvn.w	r0, #21
    c6f8:	e7a8      	b.n	c64c <bt_gatt_notify_cb+0x60>
    c6fa:	bf00      	nop
    c6fc:	0002d874 	.word	0x0002d874
    c700:	0002bced 	.word	0x0002bced
    c704:	20000254 	.word	0x20000254
    c708:	0002732b 	.word	0x0002732b
    c70c:	0000bef9 	.word	0x0000bef9

0000c710 <bt_gatt_indicate>:
{
    c710:	b530      	push	{r4, r5, lr}
    c712:	4605      	mov	r5, r0
    c714:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
    c716:	460c      	mov	r4, r1
    c718:	b951      	cbnz	r1, c730 <bt_gatt_indicate+0x20>
    c71a:	4943      	ldr	r1, [pc, #268]	; (c828 <bt_gatt_indicate+0x118>)
    c71c:	4843      	ldr	r0, [pc, #268]	; (c82c <bt_gatt_indicate+0x11c>)
    c71e:	f640 0289 	movw	r2, #2185	; 0x889
    c722:	f017 fd8b 	bl	2423c <printk>
    c726:	f640 0189 	movw	r1, #2185	; 0x889
    c72a:	483f      	ldr	r0, [pc, #252]	; (c828 <bt_gatt_indicate+0x118>)
    c72c:	f018 f838 	bl	247a0 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
    c730:	6863      	ldr	r3, [r4, #4]
    c732:	b953      	cbnz	r3, c74a <bt_gatt_indicate+0x3a>
    c734:	493c      	ldr	r1, [pc, #240]	; (c828 <bt_gatt_indicate+0x118>)
    c736:	483d      	ldr	r0, [pc, #244]	; (c82c <bt_gatt_indicate+0x11c>)
    c738:	f640 028a 	movw	r2, #2186	; 0x88a
    c73c:	f017 fd7e 	bl	2423c <printk>
    c740:	f640 018a 	movw	r1, #2186	; 0x88a
    c744:	4838      	ldr	r0, [pc, #224]	; (c828 <bt_gatt_indicate+0x118>)
    c746:	f018 f82b 	bl	247a0 <assert_post_action>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c74a:	2101      	movs	r1, #1
    c74c:	4838      	ldr	r0, [pc, #224]	; (c830 <bt_gatt_indicate+0x120>)
    c74e:	f01a feaa 	bl	274a6 <atomic_test_bit>
    c752:	2800      	cmp	r0, #0
    c754:	d05e      	beq.n	c814 <bt_gatt_indicate+0x104>
	data.attr = params->attr;
    c756:	6860      	ldr	r0, [r4, #4]
    c758:	9007      	str	r0, [sp, #28]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    c75a:	b115      	cbz	r5, c762 <bt_gatt_indicate+0x52>
    c75c:	7aab      	ldrb	r3, [r5, #10]
    c75e:	2b07      	cmp	r3, #7
    c760:	d15b      	bne.n	c81a <bt_gatt_indicate+0x10a>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    c762:	f7ff fc81 	bl	c068 <bt_gatt_attr_get_handle>
    c766:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (!data.handle) {
    c76a:	b918      	cbnz	r0, c774 <bt_gatt_indicate+0x64>
		return -ENOENT;
    c76c:	f06f 0001 	mvn.w	r0, #1
}
    c770:	b00d      	add	sp, #52	; 0x34
    c772:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    c774:	6822      	ldr	r2, [r4, #0]
    c776:	b9ba      	cbnz	r2, c7a8 <bt_gatt_indicate+0x98>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    c778:	9b07      	ldr	r3, [sp, #28]
    c77a:	6818      	ldr	r0, [r3, #0]
    c77c:	2300      	movs	r3, #0
    c77e:	f88d 3014 	strb.w	r3, [sp, #20]
    c782:	a905      	add	r1, sp, #20
    c784:	f642 0303 	movw	r3, #10243	; 0x2803
    c788:	f8ad 3016 	strh.w	r3, [sp, #22]
    c78c:	f019 ff51 	bl	26632 <bt_uuid_cmp>
    c790:	b1d0      	cbz	r0, c7c8 <bt_gatt_indicate+0xb8>
	if (conn) {
    c792:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    c796:	b30d      	cbz	r5, c7dc <bt_gatt_indicate+0xcc>
		params->_ref = 1;
    c798:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    c79a:	4601      	mov	r1, r0
		params->_ref = 1;
    c79c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
    c79e:	4622      	mov	r2, r4
    c7a0:	4628      	mov	r0, r5
    c7a2:	f7ff fb53 	bl	be4c <gatt_indicate>
    c7a6:	e7e3      	b.n	c770 <bt_gatt_indicate+0x60>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c7a8:	a907      	add	r1, sp, #28
    c7aa:	9102      	str	r1, [sp, #8]
    c7ac:	4921      	ldr	r1, [pc, #132]	; (c834 <bt_gatt_indicate+0x124>)
    c7ae:	9101      	str	r1, [sp, #4]
    c7b0:	2101      	movs	r1, #1
	found->attr = NULL;
    c7b2:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c7b4:	9100      	str	r1, [sp, #0]
    c7b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    c7ba:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    c7bc:	f7ff fc98 	bl	c0f0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    c7c0:	9b07      	ldr	r3, [sp, #28]
    c7c2:	2b00      	cmp	r3, #0
    c7c4:	d1d8      	bne.n	c778 <bt_gatt_indicate+0x68>
    c7c6:	e7d1      	b.n	c76c <bt_gatt_indicate+0x5c>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    c7c8:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    c7ca:	68c3      	ldr	r3, [r0, #12]
    c7cc:	799b      	ldrb	r3, [r3, #6]
    c7ce:	069b      	lsls	r3, r3, #26
    c7d0:	d526      	bpl.n	c820 <bt_gatt_indicate+0x110>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    c7d2:	f01a ff43 	bl	2765c <bt_gatt_attr_value_handle>
    c7d6:	f8ad 0020 	strh.w	r0, [sp, #32]
    c7da:	e7da      	b.n	c792 <bt_gatt_indicate+0x82>
	data.err = -ENOTCONN;
    c7dc:	f06f 0338 	mvn.w	r3, #56	; 0x38
    c7e0:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_INDICATE;
    c7e2:	2302      	movs	r3, #2
    c7e4:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c7e8:	f642 1302 	movw	r3, #10498	; 0x2902
    c7ec:	f8ad 301a 	strh.w	r3, [sp, #26]
    c7f0:	ab07      	add	r3, sp, #28
	params->_ref = 0;
    c7f2:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c7f4:	9302      	str	r3, [sp, #8]
    c7f6:	4b10      	ldr	r3, [pc, #64]	; (c838 <bt_gatt_indicate+0x128>)
    c7f8:	9301      	str	r3, [sp, #4]
    c7fa:	2301      	movs	r3, #1
    c7fc:	9300      	str	r3, [sp, #0]
    c7fe:	aa06      	add	r2, sp, #24
    c800:	462b      	mov	r3, r5
    c802:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    c806:	940b      	str	r4, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    c808:	f88d 5018 	strb.w	r5, [sp, #24]
    c80c:	f7ff fc70 	bl	c0f0 <bt_gatt_foreach_attr_type>
	return data.err;
    c810:	9809      	ldr	r0, [sp, #36]	; 0x24
    c812:	e7ad      	b.n	c770 <bt_gatt_indicate+0x60>
		return -EAGAIN;
    c814:	f06f 000a 	mvn.w	r0, #10
    c818:	e7aa      	b.n	c770 <bt_gatt_indicate+0x60>
		return -ENOTCONN;
    c81a:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c81e:	e7a7      	b.n	c770 <bt_gatt_indicate+0x60>
			return -EINVAL;
    c820:	f06f 0015 	mvn.w	r0, #21
    c824:	e7a4      	b.n	c770 <bt_gatt_indicate+0x60>
    c826:	bf00      	nop
    c828:	0002d874 	.word	0x0002d874
    c82c:	0002bced 	.word	0x0002bced
    c830:	20000254 	.word	0x20000254
    c834:	0002732b 	.word	0x0002732b
    c838:	0000bef9 	.word	0x0000bef9

0000c83c <sc_process>:
{
    c83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    c83e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    c842:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
    c844:	2101      	movs	r1, #1
    c846:	4628      	mov	r0, r5
    c848:	f01a fe2d 	bl	274a6 <atomic_test_bit>
    c84c:	b150      	cbz	r0, c864 <sc_process+0x28>
    c84e:	4917      	ldr	r1, [pc, #92]	; (c8ac <sc_process+0x70>)
    c850:	4817      	ldr	r0, [pc, #92]	; (c8b0 <sc_process+0x74>)
    c852:	f240 32af 	movw	r2, #943	; 0x3af
    c856:	f017 fcf1 	bl	2423c <printk>
    c85a:	f240 31af 	movw	r1, #943	; 0x3af
    c85e:	4813      	ldr	r0, [pc, #76]	; (c8ac <sc_process+0x70>)
    c860:	f017 ff9e 	bl	247a0 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
    c864:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c868:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c86a:	f06f 0101 	mvn.w	r1, #1
    c86e:	4628      	mov	r0, r5
    c870:	f01a fdc6 	bl	27400 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    c874:	4b0f      	ldr	r3, [pc, #60]	; (c8b4 <sc_process+0x78>)
    c876:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    c87a:	4b0f      	ldr	r3, [pc, #60]	; (c8b8 <sc_process+0x7c>)
    c87c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    c880:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    c882:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    c884:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    c888:	2304      	movs	r3, #4
	sc->start = 0U;
    c88a:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    c88e:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    c892:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    c896:	f1a4 0120 	sub.w	r1, r4, #32
    c89a:	f7ff ff39 	bl	c710 <bt_gatt_indicate>
    c89e:	b918      	cbnz	r0, c8a8 <sc_process+0x6c>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    c8a0:	2101      	movs	r1, #1
    c8a2:	4628      	mov	r0, r5
    c8a4:	f01a fe08 	bl	274b8 <atomic_set_bit>
}
    c8a8:	b003      	add	sp, #12
    c8aa:	bd30      	pop	{r4, r5, pc}
    c8ac:	0002d874 	.word	0x0002d874
    c8b0:	0002bced 	.word	0x0002bced
    c8b4:	0002b08c 	.word	0x0002b08c
    c8b8:	0000bbd9 	.word	0x0000bbd9

0000c8bc <update_ccc>:
{
    c8bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8be:	4b2e      	ldr	r3, [pc, #184]	; (c978 <update_ccc+0xbc>)
	struct bt_conn *conn = data->conn;
    c8c0:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8c2:	6882      	ldr	r2, [r0, #8]
    c8c4:	429a      	cmp	r2, r3
{
    c8c6:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    c8c8:	d115      	bne.n	c8f6 <update_ccc+0x3a>
	ccc = attr->user_data;
    c8ca:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    c8cc:	8933      	ldrh	r3, [r6, #8]
    c8ce:	b193      	cbz	r3, c8f6 <update_ccc+0x3a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c8d0:	4632      	mov	r2, r6
    c8d2:	4620      	mov	r0, r4
    c8d4:	f812 1b01 	ldrb.w	r1, [r2], #1
    c8d8:	f01a f8a0 	bl	26a1c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    c8dc:	b158      	cbz	r0, c8f6 <update_ccc+0x3a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    c8de:	222a      	movs	r2, #42	; 0x2a
    c8e0:	4629      	mov	r1, r5
    c8e2:	4620      	mov	r0, r4
    c8e4:	f01a ff18 	bl	27718 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    c8e8:	2803      	cmp	r0, #3
    c8ea:	d107      	bne.n	c8fc <update_ccc+0x40>
				BT_WARN("CCC %p not writable", attr);
    c8ec:	462a      	mov	r2, r5
    c8ee:	2157      	movs	r1, #87	; 0x57
    c8f0:	4822      	ldr	r0, [pc, #136]	; (c97c <update_ccc+0xc0>)
    c8f2:	f017 fca3 	bl	2423c <printk>
}
    c8f6:	2001      	movs	r0, #1
    c8f8:	b002      	add	sp, #8
    c8fa:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    c8fc:	4631      	mov	r1, r6
    c8fe:	4628      	mov	r0, r5
    c900:	f01a fcf7 	bl	272f2 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    c904:	4b1e      	ldr	r3, [pc, #120]	; (c980 <update_ccc+0xc4>)
    c906:	429e      	cmp	r6, r3
    c908:	d1f5      	bne.n	c8f6 <update_ccc+0x3a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    c90a:	f104 0188 	add.w	r1, r4, #136	; 0x88
    c90e:	7a20      	ldrb	r0, [r4, #8]
    c910:	f7fe feba 	bl	b688 <find_sc_cfg>
	if (!cfg) {
    c914:	4605      	mov	r5, r0
    c916:	2800      	cmp	r0, #0
    c918:	d0ed      	beq.n	c8f6 <update_ccc+0x3a>
	if (!(cfg->data.start || cfg->data.end)) {
    c91a:	8902      	ldrh	r2, [r0, #8]
    c91c:	8943      	ldrh	r3, [r0, #10]
    c91e:	ea52 0103 	orrs.w	r1, r2, r3
    c922:	d0e8      	beq.n	c8f6 <update_ccc+0x3a>
	index = bt_conn_index(conn);
    c924:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    c926:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    c92a:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    c92e:	f7fd fc65 	bl	a1fc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    c932:	4914      	ldr	r1, [pc, #80]	; (c984 <update_ccc+0xc8>)
    c934:	4a14      	ldr	r2, [pc, #80]	; (c988 <update_ccc+0xcc>)
    c936:	2318      	movs	r3, #24
    c938:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c93c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    c93e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    c940:	4a12      	ldr	r2, [pc, #72]	; (c98c <update_ccc+0xd0>)
    c942:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    c944:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c946:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
    c94a:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    c94c:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c94e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
    c952:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c954:	4620      	mov	r0, r4
    c956:	f7ff fedb 	bl	c710 <bt_gatt_indicate>
    c95a:	b118      	cbz	r0, c964 <update_ccc+0xa8>
		BT_ERR("SC restore indication failed");
    c95c:	2145      	movs	r1, #69	; 0x45
    c95e:	480c      	ldr	r0, [pc, #48]	; (c990 <update_ccc+0xd4>)
    c960:	f017 fc6c 	bl	2423c <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
    c964:	2204      	movs	r2, #4
    c966:	2100      	movs	r1, #0
    c968:	f105 0008 	add.w	r0, r5, #8
    c96c:	f019 fc22 	bl	261b4 <memset>
		sc_store(cfg);
    c970:	4628      	mov	r0, r5
    c972:	f7fe fe3b 	bl	b5ec <sc_store>
    c976:	e7be      	b.n	c8f6 <update_ccc+0x3a>
    c978:	0000b909 	.word	0x0000b909
    c97c:	0002db27 	.word	0x0002db27
    c980:	200005f4 	.word	0x200005f4
    c984:	20002160 	.word	0x20002160
    c988:	0002b08c 	.word	0x0002b08c
    c98c:	000274d7 	.word	0x000274d7
    c990:	0002db40 	.word	0x0002db40

0000c994 <bt_gatt_connected>:
{
    c994:	b530      	push	{r4, r5, lr}
    c996:	b08f      	sub	sp, #60	; 0x3c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c998:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    c99c:	4604      	mov	r4, r0
	data.conn = conn;
    c99e:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    c9a0:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c9a2:	4629      	mov	r1, r5
    c9a4:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    c9a6:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c9aa:	f019 ff49 	bl	26840 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    c9ae:	b190      	cbz	r0, c9d6 <bt_gatt_connected+0x42>
		if (conn->id) {
    c9b0:	7a22      	ldrb	r2, [r4, #8]
    c9b2:	b1ca      	cbz	r2, c9e8 <bt_gatt_connected+0x54>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    c9b4:	ac02      	add	r4, sp, #8
    c9b6:	2104      	movs	r1, #4
    c9b8:	4620      	mov	r0, r4
    c9ba:	f017 fba4 	bl	24106 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c9be:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c9c0:	4a0a      	ldr	r2, [pc, #40]	; (c9ec <bt_gatt_connected+0x58>)
    c9c2:	2124      	movs	r1, #36	; 0x24
    c9c4:	a805      	add	r0, sp, #20
    c9c6:	462b      	mov	r3, r5
    c9c8:	f7fa fd08 	bl	73dc <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    c9cc:	aa05      	add	r2, sp, #20
    c9ce:	4908      	ldr	r1, [pc, #32]	; (c9f0 <bt_gatt_connected+0x5c>)
    c9d0:	4610      	mov	r0, r2
    c9d2:	f7f8 fcb3 	bl	533c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c9d6:	ab03      	add	r3, sp, #12
    c9d8:	4a06      	ldr	r2, [pc, #24]	; (c9f4 <bt_gatt_connected+0x60>)
    c9da:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c9de:	2001      	movs	r0, #1
    c9e0:	f01a fe8a 	bl	276f8 <bt_gatt_foreach_attr>
}
    c9e4:	b00f      	add	sp, #60	; 0x3c
    c9e6:	bd30      	pop	{r4, r5, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c9e8:	9200      	str	r2, [sp, #0]
    c9ea:	e7e9      	b.n	c9c0 <bt_gatt_connected+0x2c>
    c9ec:	0002d8f0 	.word	0x0002d8f0
    c9f0:	0000c521 	.word	0x0000c521
    c9f4:	0000c8bd 	.word	0x0000c8bd

0000c9f8 <db_hash_read>:
{
    c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9fa:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    c9fc:	4810      	ldr	r0, [pc, #64]	; (ca40 <db_hash_read+0x48>)
{
    c9fe:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    ca02:	4616      	mov	r6, r2
    ca04:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    ca06:	f015 fd1f 	bl	22448 <k_delayed_work_cancel>
	if (!err) {
    ca0a:	b910      	cbnz	r0, ca12 <db_hash_read+0x1a>
		db_hash_gen(true);
    ca0c:	2001      	movs	r0, #1
    ca0e:	f7ff fc25 	bl	c25c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    ca12:	2101      	movs	r1, #1
    ca14:	4620      	mov	r0, r4
    ca16:	f01a fea2 	bl	2775e <bt_gatt_change_aware>
	if (offset > value_len) {
    ca1a:	2d10      	cmp	r5, #16
    ca1c:	d80c      	bhi.n	ca38 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    ca1e:	f1c5 0410 	rsb	r4, r5, #16
    ca22:	42bc      	cmp	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    ca24:	4907      	ldr	r1, [pc, #28]	; (ca44 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    ca26:	bfa8      	it	ge
    ca28:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    ca2a:	4622      	mov	r2, r4
    ca2c:	4429      	add	r1, r5
    ca2e:	4630      	mov	r0, r6
    ca30:	f019 fb96 	bl	26160 <memcpy>
}
    ca34:	4620      	mov	r0, r4
    ca36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ca38:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    ca3c:	e7fa      	b.n	ca34 <db_hash_read+0x3c>
    ca3e:	bf00      	nop
    ca40:	20001230 	.word	0x20001230
    ca44:	20003686 	.word	0x20003686

0000ca48 <bt_gatt_store_ccc>:
{
    ca48:	b570      	push	{r4, r5, r6, lr}
    ca4a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    ca4c:	2300      	movs	r3, #0
{
    ca4e:	4604      	mov	r4, r0
    ca50:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    ca52:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    ca54:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    ca58:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    ca5a:	4a15      	ldr	r2, [pc, #84]	; (cab0 <bt_gatt_store_ccc+0x68>)
    ca5c:	ab0d      	add	r3, sp, #52	; 0x34
    ca5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca62:	2001      	movs	r0, #1
    ca64:	f01a fe48 	bl	276f8 <bt_gatt_foreach_attr>
	if (id) {
    ca68:	b1ec      	cbz	r4, caa6 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
    ca6a:	ae03      	add	r6, sp, #12
    ca6c:	4622      	mov	r2, r4
    ca6e:	2104      	movs	r1, #4
    ca70:	4630      	mov	r0, r6
    ca72:	f017 fb48 	bl	24106 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    ca76:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    ca78:	4a0e      	ldr	r2, [pc, #56]	; (cab4 <bt_gatt_store_ccc+0x6c>)
    ca7a:	462b      	mov	r3, r5
    ca7c:	2124      	movs	r1, #36	; 0x24
    ca7e:	a804      	add	r0, sp, #16
    ca80:	f7fa fcac 	bl	73dc <bt_settings_encode_key>
	if (save.count) {
    ca84:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    ca86:	b182      	cbz	r2, caaa <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
    ca88:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    ca8a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    ca8c:	a804      	add	r0, sp, #16
    ca8e:	f7f8 fbf7 	bl	5280 <settings_save_one>
	if (err) {
    ca92:	4604      	mov	r4, r0
    ca94:	b120      	cbz	r0, caa0 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
    ca96:	4602      	mov	r2, r0
    ca98:	2145      	movs	r1, #69	; 0x45
    ca9a:	4807      	ldr	r0, [pc, #28]	; (cab8 <bt_gatt_store_ccc+0x70>)
    ca9c:	f017 fbce 	bl	2423c <printk>
}
    caa0:	4620      	mov	r0, r4
    caa2:	b040      	add	sp, #256	; 0x100
    caa4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    caa6:	9400      	str	r4, [sp, #0]
    caa8:	e7e6      	b.n	ca78 <bt_gatt_store_ccc+0x30>
		str = NULL;
    caaa:	4611      	mov	r1, r2
    caac:	e7ee      	b.n	ca8c <bt_gatt_store_ccc+0x44>
    caae:	bf00      	nop
    cab0:	0000b7e5 	.word	0x0000b7e5
    cab4:	0002d8f0 	.word	0x0002d8f0
    cab8:	0002d8ca 	.word	0x0002d8ca

0000cabc <bt_gatt_service_unregister>:
{
    cabc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(svc, "invalid parameters\n");
    cac0:	4604      	mov	r4, r0
    cac2:	b950      	cbnz	r0, cada <bt_gatt_service_unregister+0x1e>
    cac4:	493b      	ldr	r1, [pc, #236]	; (cbb4 <bt_gatt_service_unregister+0xf8>)
    cac6:	483c      	ldr	r0, [pc, #240]	; (cbb8 <bt_gatt_service_unregister+0xfc>)
    cac8:	f240 42d1 	movw	r2, #1233	; 0x4d1
    cacc:	f017 fbb6 	bl	2423c <printk>
    cad0:	f240 41d1 	movw	r1, #1233	; 0x4d1
    cad4:	4837      	ldr	r0, [pc, #220]	; (cbb4 <bt_gatt_service_unregister+0xf8>)
    cad6:	f017 fe63 	bl	247a0 <assert_post_action>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cada:	4b38      	ldr	r3, [pc, #224]	; (cbbc <bt_gatt_service_unregister+0x100>)
    cadc:	681a      	ldr	r2, [r3, #0]
	if (!sys_slist_find_and_remove(&db, &svc->node)) {
    cade:	f104 0008 	add.w	r0, r4, #8
    cae2:	2100      	movs	r1, #0
    cae4:	b922      	cbnz	r2, caf0 <bt_gatt_service_unregister+0x34>
		return -ENOENT;
    cae6:	f06f 0001 	mvn.w	r0, #1
}
    caea:	b003      	add	sp, #12
    caec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    caf0:	4290      	cmp	r0, r2
    caf2:	d12d      	bne.n	cb50 <bt_gatt_service_unregister+0x94>
Z_GENLIST_REMOVE(slist, snode)
    caf4:	68a2      	ldr	r2, [r4, #8]
    caf6:	bb29      	cbnz	r1, cb44 <bt_gatt_service_unregister+0x88>
    caf8:	6859      	ldr	r1, [r3, #4]
	list->head = node;
    cafa:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    cafc:	4288      	cmp	r0, r1
    cafe:	d100      	bne.n	cb02 <bt_gatt_service_unregister+0x46>
	list->tail = node;
    cb00:	605a      	str	r2, [r3, #4]
	parent->next = child;
    cb02:	2500      	movs	r5, #0
		if (attr->write == bt_gatt_attr_write_ccc) {
    cb04:	f8df 90bc 	ldr.w	r9, [pc, #188]	; cbc4 <bt_gatt_service_unregister+0x108>
    cb08:	60a5      	str	r5, [r4, #8]
		struct bt_gatt_attr *attr = &svc->attrs[i];
    cb0a:	f04f 0814 	mov.w	r8, #20
	ccc->value = 0;
    cb0e:	462f      	mov	r7, r5
	for (uint16_t i = 0; i < svc->attr_count; i++) {
    cb10:	6862      	ldr	r2, [r4, #4]
    cb12:	b2ab      	uxth	r3, r5
    cb14:	4293      	cmp	r3, r2
    cb16:	d31e      	bcc.n	cb56 <bt_gatt_service_unregister+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cb18:	f3bf 8f5b 	dmb	ish
    cb1c:	4b28      	ldr	r3, [pc, #160]	; (cbc0 <bt_gatt_service_unregister+0x104>)
    cb1e:	6818      	ldr	r0, [r3, #0]
    cb20:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&init)) {
    cb24:	2800      	cmp	r0, #0
    cb26:	d0e0      	beq.n	caea <bt_gatt_service_unregister+0x2e>
		    svc->attrs[svc->attr_count - 1].handle);
    cb28:	e9d4 2300 	ldrd	r2, r3, [r4]
	sc_indicate(svc->attrs[0].handle,
    cb2c:	2114      	movs	r1, #20
    cb2e:	fb01 2303 	mla	r3, r1, r3, r2
    cb32:	8a10      	ldrh	r0, [r2, #16]
    cb34:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    cb38:	f7ff f956 	bl	bde8 <sc_indicate>
	db_changed();
    cb3c:	f7fe ffca 	bl	bad4 <db_changed>
	return 0;
    cb40:	2000      	movs	r0, #0
    cb42:	e7d2      	b.n	caea <bt_gatt_service_unregister+0x2e>
    cb44:	600a      	str	r2, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    cb46:	685a      	ldr	r2, [r3, #4]
    cb48:	4290      	cmp	r0, r2
	list->tail = node;
    cb4a:	bf08      	it	eq
    cb4c:	6059      	streq	r1, [r3, #4]
    cb4e:	e7d8      	b.n	cb02 <bt_gatt_service_unregister+0x46>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cb50:	4611      	mov	r1, r2
    cb52:	6812      	ldr	r2, [r2, #0]
    cb54:	e7c6      	b.n	cae4 <bt_gatt_service_unregister+0x28>
		struct bt_gatt_attr *attr = &svc->attrs[i];
    cb56:	6822      	ldr	r2, [r4, #0]
    cb58:	fb08 2303 	mla	r3, r8, r3, r2
		if (attr->write == bt_gatt_attr_write_ccc) {
    cb5c:	689a      	ldr	r2, [r3, #8]
    cb5e:	454a      	cmp	r2, r9
    cb60:	d125      	bne.n	cbae <bt_gatt_service_unregister+0xf2>
			gatt_unregister_ccc(attr->user_data);
    cb62:	68de      	ldr	r6, [r3, #12]
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    cb64:	9700      	str	r7, [sp, #0]
    cb66:	f106 0a01 	add.w	sl, r6, #1
	ccc->value = 0;
    cb6a:	8177      	strh	r7, [r6, #10]
    cb6c:	2207      	movs	r2, #7
    cb6e:	4669      	mov	r1, sp
    cb70:	4650      	mov	r0, sl
		if (bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    cb72:	f8cd 7003 	str.w	r7, [sp, #3]
    cb76:	f019 facc 	bl	26112 <memcmp>
    cb7a:	b1c0      	cbz	r0, cbae <bt_gatt_service_unregister+0xf2>
			conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    cb7c:	4651      	mov	r1, sl
    cb7e:	7830      	ldrb	r0, [r6, #0]
    cb80:	f019 ff95 	bl	26aae <bt_conn_lookup_addr_le>
			if (conn) {
    cb84:	b948      	cbnz	r0, cb9a <bt_gatt_service_unregister+0xde>
			    bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    cb86:	4651      	mov	r1, sl
    cb88:	7830      	ldrb	r0, [r6, #0]
    cb8a:	f019 fe59 	bl	26840 <bt_addr_le_is_bonded>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    cb8e:	b158      	cbz	r0, cba8 <bt_gatt_service_unregister+0xec>
				bt_gatt_store_ccc(cfg->id, &cfg->peer);
    cb90:	4651      	mov	r1, sl
    cb92:	7830      	ldrb	r0, [r6, #0]
    cb94:	f7ff ff58 	bl	ca48 <bt_gatt_store_ccc>
    cb98:	e006      	b.n	cba8 <bt_gatt_service_unregister+0xec>
				if (conn->state == BT_CONN_CONNECTED) {
    cb9a:	f890 b00a 	ldrb.w	fp, [r0, #10]
				bt_conn_unref(conn);
    cb9e:	f7fd f843 	bl	9c28 <bt_conn_unref>
			if (IS_ENABLED(CONFIG_BT_SETTINGS) && store &&
    cba2:	f1bb 0f07 	cmp.w	fp, #7
    cba6:	d1ee      	bne.n	cb86 <bt_gatt_service_unregister+0xca>
			clear_ccc_cfg(cfg);
    cba8:	4630      	mov	r0, r6
    cbaa:	f01a fc1b 	bl	273e4 <clear_ccc_cfg>
    cbae:	3501      	adds	r5, #1
    cbb0:	e7ae      	b.n	cb10 <bt_gatt_service_unregister+0x54>
    cbb2:	bf00      	nop
    cbb4:	0002d874 	.word	0x0002d874
    cbb8:	0002bced 	.word	0x0002bced
    cbbc:	20002154 	.word	0x20002154
    cbc0:	2000215c 	.word	0x2000215c
    cbc4:	0000b909 	.word	0x0000b909

0000cbc8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    cbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbca:	4604      	mov	r4, r0
    cbcc:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    cbce:	4603      	mov	r3, r0
    cbd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cbd4:	2001      	movs	r0, #1
    cbd6:	4a34      	ldr	r2, [pc, #208]	; (cca8 <bt_gatt_disconnected+0xe0>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cbd8:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    cbdc:	f01a fd8c 	bl	276f8 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cbe0:	4629      	mov	r1, r5
    cbe2:	7a20      	ldrb	r0, [r4, #8]
    cbe4:	f019 fe2c 	bl	26840 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    cbe8:	b378      	cbz	r0, cc4a <bt_gatt_disconnected+0x82>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    cbea:	4629      	mov	r1, r5
    cbec:	7a20      	ldrb	r0, [r4, #8]
    cbee:	f7ff ff2b 	bl	ca48 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    cbf2:	4620      	mov	r0, r4
    cbf4:	f7fe fe6c 	bl	b8d0 <find_cf_cfg>
	if (!cfg) {
    cbf8:	4606      	mov	r6, r0
    cbfa:	2800      	cmp	r0, #0
    cbfc:	d044      	beq.n	cc88 <bt_gatt_disconnected+0xc0>
		if (conn->id) {
    cbfe:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    cc00:	3608      	adds	r6, #8
		if (conn->id) {
    cc02:	2a00      	cmp	r2, #0
    cc04:	d042      	beq.n	cc8c <bt_gatt_disconnected+0xc4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    cc06:	af02      	add	r7, sp, #8
    cc08:	2104      	movs	r1, #4
    cc0a:	4638      	mov	r0, r7
    cc0c:	f017 fa7b 	bl	24106 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    cc10:	9700      	str	r7, [sp, #0]
    cc12:	462b      	mov	r3, r5
    cc14:	4a25      	ldr	r2, [pc, #148]	; (ccac <bt_gatt_disconnected+0xe4>)
    cc16:	2124      	movs	r1, #36	; 0x24
    cc18:	a803      	add	r0, sp, #12
    cc1a:	f7fa fbdf 	bl	73dc <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    cc1e:	7a23      	ldrb	r3, [r4, #8]
    cc20:	2701      	movs	r7, #1
    cc22:	b93b      	cbnz	r3, cc34 <bt_gatt_disconnected+0x6c>
		bt_settings_encode_key(key, sizeof(key), "cf",
    cc24:	2300      	movs	r3, #0
    cc26:	9300      	str	r3, [sp, #0]
    cc28:	4a20      	ldr	r2, [pc, #128]	; (ccac <bt_gatt_disconnected+0xe4>)
    cc2a:	462b      	mov	r3, r5
    cc2c:	2124      	movs	r1, #36	; 0x24
    cc2e:	a803      	add	r0, sp, #12
    cc30:	f7fa fbd4 	bl	73dc <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    cc34:	463a      	mov	r2, r7
    cc36:	4631      	mov	r1, r6
    cc38:	a803      	add	r0, sp, #12
    cc3a:	f7f8 fb21 	bl	5280 <settings_save_one>
	if (err) {
    cc3e:	4602      	mov	r2, r0
    cc40:	b118      	cbz	r0, cc4a <bt_gatt_disconnected+0x82>
		BT_ERR("Failed to store Client Features (err %d)", err);
    cc42:	2145      	movs	r1, #69	; 0x45
    cc44:	481a      	ldr	r0, [pc, #104]	; (ccb0 <bt_gatt_disconnected+0xe8>)
    cc46:	f017 faf9 	bl	2423c <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cc4a:	4629      	mov	r1, r5
    cc4c:	7a20      	ldrb	r0, [r4, #8]
    cc4e:	f019 fdf7 	bl	26840 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    cc52:	b150      	cbz	r0, cc6a <bt_gatt_disconnected+0xa2>
		struct addr_with_id addr_with_id = {
    cc54:	7a23      	ldrb	r3, [r4, #8]
    cc56:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    cc5a:	4a16      	ldr	r2, [pc, #88]	; (ccb4 <bt_gatt_disconnected+0xec>)
		struct addr_with_id addr_with_id = {
    cc5c:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    cc5e:	ab03      	add	r3, sp, #12
    cc60:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cc64:	2001      	movs	r0, #1
    cc66:	f01a fd47 	bl	276f8 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    cc6a:	4620      	mov	r0, r4
    cc6c:	f7fe fe30 	bl	b8d0 <find_cf_cfg>
	if (!cfg) {
    cc70:	4606      	mov	r6, r0
    cc72:	b138      	cbz	r0, cc84 <bt_gatt_disconnected+0xbc>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cc74:	4629      	mov	r1, r5
    cc76:	7a20      	ldrb	r0, [r4, #8]
    cc78:	f019 fde2 	bl	26840 <bt_addr_le_is_bonded>
    cc7c:	b940      	cbnz	r0, cc90 <bt_gatt_disconnected+0xc8>
		clear_cf_cfg(cfg);
    cc7e:	4630      	mov	r0, r6
    cc80:	f01a fbcd 	bl	2741e <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    cc84:	b00d      	add	sp, #52	; 0x34
    cc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    cc88:	4607      	mov	r7, r0
    cc8a:	e7cb      	b.n	cc24 <bt_gatt_disconnected+0x5c>
		if (conn->id) {
    cc8c:	2701      	movs	r7, #1
    cc8e:	e7c9      	b.n	cc24 <bt_gatt_disconnected+0x5c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    cc90:	4629      	mov	r1, r5
    cc92:	1c70      	adds	r0, r6, #1
    cc94:	f01a fba3 	bl	273de <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cc98:	f06f 0102 	mvn.w	r1, #2
    cc9c:	f106 000c 	add.w	r0, r6, #12
    cca0:	f01a fbae 	bl	27400 <atomic_and>
}
    cca4:	e7ee      	b.n	cc84 <bt_gatt_disconnected+0xbc>
    cca6:	bf00      	nop
    cca8:	0000bd5d 	.word	0x0000bd5d
    ccac:	0002db16 	.word	0x0002db16
    ccb0:	0002d846 	.word	0x0002d846
    ccb4:	0000b8a9 	.word	0x0000b8a9

0000ccb8 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    ccb8:	b510      	push	{r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    ccba:	4c07      	ldr	r4, [pc, #28]	; (ccd8 <bt_smp_accept+0x20>)
{
    ccbc:	4602      	mov	r2, r0
		if (smp->chan.conn) {
    ccbe:	6820      	ldr	r0, [r4, #0]
    ccc0:	b918      	cbnz	r0, ccca <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    ccc2:	4a06      	ldr	r2, [pc, #24]	; (ccdc <bt_smp_accept+0x24>)
    ccc4:	6062      	str	r2, [r4, #4]

		*chan = &smp->chan;
    ccc6:	600c      	str	r4, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    ccc8:	bd10      	pop	{r4, pc}
	BT_ERR("No available SMP context for conn %p", conn);
    ccca:	4805      	ldr	r0, [pc, #20]	; (cce0 <bt_smp_accept+0x28>)
    cccc:	2145      	movs	r1, #69	; 0x45
    ccce:	f017 fab5 	bl	2423c <printk>
    ccd2:	f06f 000b 	mvn.w	r0, #11
    ccd6:	e7f7      	b.n	ccc8 <bt_smp_accept+0x10>
    ccd8:	200012b8 	.word	0x200012b8
    ccdc:	0002b190 	.word	0x0002b190
    cce0:	0002db62 	.word	0x0002db62

0000cce4 <atomic_test_bit.constprop.4>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cce4:	4b04      	ldr	r3, [pc, #16]	; (ccf8 <atomic_test_bit.constprop.4+0x14>)
    cce6:	f3bf 8f5b 	dmb	ish
    ccea:	6818      	ldr	r0, [r3, #0]
    ccec:	f3bf 8f5b 	dmb	ish
}
    ccf0:	f000 0001 	and.w	r0, r0, #1
    ccf4:	4770      	bx	lr
    ccf6:	bf00      	nop
    ccf8:	200013b0 	.word	0x200013b0

0000ccfc <bt_mesh_reset>:

	return -ENOTSUP;
}

void bt_mesh_reset(void)
{
    ccfc:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    ccfe:	f7ff fff1 	bl	cce4 <atomic_test_bit.constprop.4>
    cd02:	b370      	cbz	r0, cd62 <bt_mesh_reset+0x66>
		return;
	}

	bt_mesh.iv_index = 0U;
    cd04:	4c17      	ldr	r4, [pc, #92]	; (cd64 <bt_mesh_reset+0x68>)
    cd06:	2500      	movs	r5, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    cd08:	4629      	mov	r1, r5
    cd0a:	2204      	movs	r2, #4
    cd0c:	f104 0008 	add.w	r0, r4, #8
	bt_mesh.seq = 0U;
    cd10:	e9c4 5500 	strd	r5, r5, [r4]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    cd14:	f019 fa4e 	bl	261b4 <memset>

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    cd18:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    cd1c:	f015 fb94 	bl	22448 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    cd20:	f006 fa48 	bl	131b4 <bt_mesh_cfg_reset>
	bt_mesh_trans_reset();
    cd24:	f002 fd82 	bl	f82c <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
    cd28:	f002 f878 	bl	ee1c <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
    cd2c:	f001 fd48 	bl	e7c0 <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
    cd30:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cd34:	f001 f8bc 	bl	deb0 <bt_mesh_net_loopback_clear>
			uint16_t group = BT_MESH_ADDR_ALL_NODES;

			bt_mesh_lpn_group_del(&group, 1);
		}

		bt_mesh_lpn_disable(true);
    cd38:	2001      	movs	r0, #1
    cd3a:	f007 fa43 	bl	141c4 <bt_mesh_lpn_disable>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_net_clear();
    cd3e:	f01a fdec 	bl	2791a <bt_mesh_net_clear>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    cd42:	4629      	mov	r1, r5
    cd44:	2210      	movs	r2, #16
    cd46:	f504 7084 	add.w	r0, r4, #264	; 0x108
    cd4a:	f019 fa33 	bl	261b4 <memset>

	bt_mesh_scan_disable();
    cd4e:	f000 fa41 	bl	d1d4 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    cd52:	f000 fce7 	bl	d724 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    cd56:	f004 fa57 	bl	11208 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    cd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    cd5e:	f007 bef1 	b.w	14b44 <bt_mesh_prov_reset>
}
    cd62:	bd38      	pop	{r3, r4, r5, pc}
    cd64:	200013a8 	.word	0x200013a8

0000cd68 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(void)
{
    cd68:	b538      	push	{r3, r4, r5, lr}
	int err;

	err = bt_mesh_adv_enable();
    cd6a:	f006 fd3f 	bl	137ec <bt_mesh_adv_enable>
	if (err) {
    cd6e:	4604      	mov	r4, r0
    cd70:	b128      	cbz	r0, cd7e <bt_mesh_start+0x16>
		BT_ERR("Failed enabling advertiser");
    cd72:	2145      	movs	r1, #69	; 0x45
    cd74:	480f      	ldr	r0, [pc, #60]	; (cdb4 <bt_mesh_start+0x4c>)
    cd76:	f017 fa61 	bl	2423c <printk>
	bt_mesh_hb_start();

	bt_mesh_model_foreach(model_start, NULL);

	return 0;
}
    cd7a:	4620      	mov	r0, r4
    cd7c:	bd38      	pop	{r3, r4, r5, pc}
	if (bt_mesh_beacon_enabled()) {
    cd7e:	f01a fd64 	bl	2784a <bt_mesh_beacon_enabled>
    cd82:	b1a0      	cbz	r0, cdae <bt_mesh_start+0x46>
		bt_mesh_beacon_enable();
    cd84:	f000 fcbe 	bl	d704 <bt_mesh_beacon_enable>
		bt_mesh_lpn_init();
    cd88:	f007 fd14 	bl	147b4 <bt_mesh_lpn_init>
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    cd8c:	2000      	movs	r0, #0
    cd8e:	f001 fcff 	bl	e790 <bt_mesh_subnet_next>
    cd92:	4605      	mov	r5, r0
		uint16_t addr = bt_mesh_primary_addr();
    cd94:	f004 fa3e 	bl	11214 <bt_mesh_primary_addr>
		bt_mesh_prov_complete(sub->net_idx, addr);
    cd98:	4601      	mov	r1, r0
    cd9a:	8ba8      	ldrh	r0, [r5, #28]
    cd9c:	f007 feca 	bl	14b34 <bt_mesh_prov_complete>
	bt_mesh_hb_start();
    cda0:	f003 fd70 	bl	10884 <bt_mesh_hb_start>
	bt_mesh_model_foreach(model_start, NULL);
    cda4:	2100      	movs	r1, #0
    cda6:	4804      	ldr	r0, [pc, #16]	; (cdb8 <bt_mesh_start+0x50>)
    cda8:	f004 f828 	bl	10dfc <bt_mesh_model_foreach>
	return 0;
    cdac:	e7e5      	b.n	cd7a <bt_mesh_start+0x12>
		bt_mesh_beacon_disable();
    cdae:	f000 fcb9 	bl	d724 <bt_mesh_beacon_disable>
    cdb2:	e7e9      	b.n	cd88 <bt_mesh_start+0x20>
    cdb4:	0002dbb0 	.word	0x0002dbb0
    cdb8:	000277ff 	.word	0x000277ff

0000cdbc <bt_mesh_provision>:
{
    cdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdc0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cdc4:	4c25      	ldr	r4, [pc, #148]	; (ce5c <bt_mesh_provision+0xa0>)
    cdc6:	4680      	mov	r8, r0
    cdc8:	460d      	mov	r5, r1
    cdca:	4617      	mov	r7, r2
	BT_INFO("Primary Element: 0x%04x", addr);
    cdcc:	2149      	movs	r1, #73	; 0x49
    cdce:	4632      	mov	r2, r6
    cdd0:	4823      	ldr	r0, [pc, #140]	; (ce60 <bt_mesh_provision+0xa4>)
{
    cdd2:	4699      	mov	r9, r3
	BT_INFO("Primary Element: 0x%04x", addr);
    cdd4:	f017 fa32 	bl	2423c <printk>
    cdd8:	f3bf 8f5b 	dmb	ish
    cddc:	e854 0f00 	ldrex	r0, [r4]
    cde0:	f040 0301 	orr.w	r3, r0, #1
    cde4:	e844 3200 	strex	r2, r3, [r4]
    cde8:	2a00      	cmp	r2, #0
    cdea:	d1f7      	bne.n	cddc <bt_mesh_provision+0x20>
    cdec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    cdf0:	f010 0001 	ands.w	r0, r0, #1
    cdf4:	d12e      	bne.n	ce54 <bt_mesh_provision+0x98>
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    cdf6:	f009 fab5 	bl	16364 <bt_mesh_proxy_prov_disable>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    cdfa:	464b      	mov	r3, r9
		if (bt_mesh_proxy_prov_disable(false) == 0) {
    cdfc:	4682      	mov	sl, r0
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    cdfe:	4642      	mov	r2, r8
    ce00:	4628      	mov	r0, r5
    ce02:	4639      	mov	r1, r7
    ce04:	f000 fe52 	bl	daac <bt_mesh_net_create>
	if (err) {
    ce08:	4605      	mov	r5, r0
    ce0a:	b198      	cbz	r0, ce34 <bt_mesh_provision+0x78>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ce0c:	f3bf 8f5b 	dmb	ish
    ce10:	e854 3f00 	ldrex	r3, [r4]
    ce14:	f023 0301 	bic.w	r3, r3, #1
    ce18:	e844 3200 	strex	r2, r3, [r4]
    ce1c:	2a00      	cmp	r2, #0
    ce1e:	d1f7      	bne.n	ce10 <bt_mesh_provision+0x54>
    ce20:	f3bf 8f5b 	dmb	ish
		if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) && pb_gatt_enabled) {
    ce24:	f1ba 0f00 	cmp.w	sl, #0
    ce28:	d101      	bne.n	ce2e <bt_mesh_provision+0x72>
			bt_mesh_proxy_prov_enable();
    ce2a:	f009 fa79 	bl	16320 <bt_mesh_proxy_prov_enable>
}
    ce2e:	4628      	mov	r0, r5
    ce30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_mesh.seq = 0U;
    ce34:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    ce38:	4630      	mov	r0, r6
    ce3a:	f004 f9cf 	bl	111dc <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    ce3e:	2210      	movs	r2, #16
    ce40:	9909      	ldr	r1, [sp, #36]	; 0x24
    ce42:	f504 7080 	add.w	r0, r4, #256	; 0x100
    ce46:	f019 f98b 	bl	26160 <memcpy>
		bt_mesh_net_pending_net_store();
    ce4a:	f001 fa45 	bl	e2d8 <bt_mesh_net_pending_net_store>
	bt_mesh_start();
    ce4e:	f7ff ff8b 	bl	cd68 <bt_mesh_start>
	return 0;
    ce52:	e7ec      	b.n	ce2e <bt_mesh_provision+0x72>
		return -EALREADY;
    ce54:	f06f 0544 	mvn.w	r5, #68	; 0x44
    ce58:	e7e9      	b.n	ce2e <bt_mesh_provision+0x72>
    ce5a:	bf00      	nop
    ce5c:	200013b0 	.word	0x200013b0
    ce60:	0002db93 	.word	0x0002db93

0000ce64 <atomic_test_bit.constprop.6>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ce64:	4b05      	ldr	r3, [pc, #20]	; (ce7c <atomic_test_bit.constprop.6+0x18>)
    ce66:	f3bf 8f5b 	dmb	ish
    ce6a:	681b      	ldr	r3, [r3, #0]
    ce6c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ce70:	fa43 f000 	asr.w	r0, r3, r0
}
    ce74:	f000 0001 	and.w	r0, r0, #1
    ce78:	4770      	bx	lr
    ce7a:	bf00      	nop
    ce7c:	200013b0 	.word	0x200013b0

0000ce80 <bt_mesh_beacon_set>:
	uint8_t frnd;
	uint8_t default_ttl;
};

void bt_mesh_beacon_set(bool beacon)
{
    ce80:	4602      	mov	r2, r0
    ce82:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON) == beacon) {
    ce84:	2007      	movs	r0, #7
    ce86:	f7ff ffed 	bl	ce64 <atomic_test_bit.constprop.6>
    ce8a:	4290      	cmp	r0, r2
    ce8c:	d025      	beq.n	ceda <bt_mesh_beacon_set+0x5a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ce8e:	f3bf 8f5b 	dmb	ish
    ce92:	4b12      	ldr	r3, [pc, #72]	; (cedc <bt_mesh_beacon_set+0x5c>)
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    ce94:	b1a2      	cbz	r2, cec0 <bt_mesh_beacon_set+0x40>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ce96:	e853 2f00 	ldrex	r2, [r3]
    ce9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ce9e:	e843 2100 	strex	r1, r2, [r3]
    cea2:	2900      	cmp	r1, #0
    cea4:	d1f7      	bne.n	ce96 <bt_mesh_beacon_set+0x16>
    cea6:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_mesh.flags, BT_MESH_BEACON, beacon);

	if (beacon) {
		bt_mesh_beacon_enable();
    ceaa:	f000 fc2b 	bl	d704 <bt_mesh_beacon_enable>
	} else {
		bt_mesh_beacon_disable();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    ceae:	2000      	movs	r0, #0
    ceb0:	f7ff ffd8 	bl	ce64 <atomic_test_bit.constprop.6>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    ceb4:	b188      	cbz	r0, ceda <bt_mesh_beacon_set+0x5a>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    ceb6:	2007      	movs	r0, #7
	}
}
    ceb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    cebc:	f006 bd0a 	b.w	138d4 <bt_mesh_settings_store_schedule>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cec0:	e853 2f00 	ldrex	r2, [r3]
    cec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    cec8:	e843 2100 	strex	r1, r2, [r3]
    cecc:	2900      	cmp	r1, #0
    cece:	d1f7      	bne.n	cec0 <bt_mesh_beacon_set+0x40>
    ced0:	f3bf 8f5b 	dmb	ish
		bt_mesh_beacon_disable();
    ced4:	f000 fc26 	bl	d724 <bt_mesh_beacon_disable>
    ced8:	e7e9      	b.n	ceae <bt_mesh_beacon_set+0x2e>
}
    ceda:	bd08      	pop	{r3, pc}
    cedc:	200013b0 	.word	0x200013b0

0000cee0 <bt_mesh_default_ttl_set>:
	return feature_get(BT_MESH_GATT_PROXY);
}

int bt_mesh_default_ttl_set(uint8_t default_ttl)
{
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    cee0:	2801      	cmp	r0, #1
{
    cee2:	b508      	push	{r3, lr}
	if (default_ttl == 1 || default_ttl > BT_MESH_TTL_MAX) {
    cee4:	d013      	beq.n	cf0e <bt_mesh_default_ttl_set+0x2e>
    cee6:	0603      	lsls	r3, r0, #24
    cee8:	d411      	bmi.n	cf0e <bt_mesh_default_ttl_set+0x2e>
		return -EINVAL;
	}

	if (default_ttl == bt_mesh.default_ttl) {
    ceea:	4b0a      	ldr	r3, [pc, #40]	; (cf14 <bt_mesh_default_ttl_set+0x34>)
    ceec:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
    cef0:	4282      	cmp	r2, r0
    cef2:	d101      	bne.n	cef8 <bt_mesh_default_ttl_set+0x18>

	bt_mesh.default_ttl = default_ttl;

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    cef4:	2000      	movs	r0, #0
	}

	return 0;
}
    cef6:	bd08      	pop	{r3, pc}
	bt_mesh.default_ttl = default_ttl;
    cef8:	f883 00d3 	strb.w	r0, [r3, #211]	; 0xd3
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    cefc:	2000      	movs	r0, #0
    cefe:	f7ff ffb1 	bl	ce64 <atomic_test_bit.constprop.6>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    cf02:	2800      	cmp	r0, #0
    cf04:	d0f6      	beq.n	cef4 <bt_mesh_default_ttl_set+0x14>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    cf06:	2007      	movs	r0, #7
    cf08:	f006 fce4 	bl	138d4 <bt_mesh_settings_store_schedule>
    cf0c:	e7f2      	b.n	cef4 <bt_mesh_default_ttl_set+0x14>
		return -EINVAL;
    cf0e:	f06f 0015 	mvn.w	r0, #21
    cf12:	e7f0      	b.n	cef6 <bt_mesh_default_ttl_set+0x16>
    cf14:	200013a8 	.word	0x200013a8

0000cf18 <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	return bt_mesh.default_ttl;
}
    cf18:	4b01      	ldr	r3, [pc, #4]	; (cf20 <bt_mesh_default_ttl_get+0x8>)
    cf1a:	f893 00d3 	ldrb.w	r0, [r3, #211]	; 0xd3
    cf1e:	4770      	bx	lr
    cf20:	200013a8 	.word	0x200013a8

0000cf24 <bt_mesh_net_transmit_set>:

	return feature_get(BT_MESH_FRIEND);
}

void bt_mesh_net_transmit_set(uint8_t xmit)
{
    cf24:	b508      	push	{r3, lr}
	if (bt_mesh.net_xmit == xmit) {
    cf26:	4b08      	ldr	r3, [pc, #32]	; (cf48 <bt_mesh_net_transmit_set+0x24>)
    cf28:	f893 20d1 	ldrb.w	r2, [r3, #209]	; 0xd1
    cf2c:	4282      	cmp	r2, r0
    cf2e:	d00a      	beq.n	cf46 <bt_mesh_net_transmit_set+0x22>
		return;
	}

	bt_mesh.net_xmit = xmit;
    cf30:	f883 00d1 	strb.w	r0, [r3, #209]	; 0xd1

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    cf34:	2000      	movs	r0, #0
    cf36:	f7ff ff95 	bl	ce64 <atomic_test_bit.constprop.6>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    cf3a:	b120      	cbz	r0, cf46 <bt_mesh_net_transmit_set+0x22>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    cf3c:	2007      	movs	r0, #7
	}
}
    cf3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
    cf42:	f006 bcc7 	b.w	138d4 <bt_mesh_settings_store_schedule>
}
    cf46:	bd08      	pop	{r3, pc}
    cf48:	200013a8 	.word	0x200013a8

0000cf4c <cfg_set>:
	}
}

static int cfg_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
    cf4c:	b513      	push	{r0, r1, r4, lr}
    cf4e:	4610      	mov	r0, r2
    cf50:	461c      	mov	r4, r3
	struct cfg_val cfg;
	int err;

	if (len_rd == 0) {
    cf52:	b1e9      	cbz	r1, cf90 <cfg_set+0x44>
		BT_DBG("Cleared configuration state");
		return 0;
	}

	err = bt_mesh_settings_set(read_cb, cb_arg, &cfg, sizeof(cfg));
    cf54:	4621      	mov	r1, r4
    cf56:	2307      	movs	r3, #7
    cf58:	466a      	mov	r2, sp
    cf5a:	f006 fc99 	bl	13890 <bt_mesh_settings_set>
	if (err) {
    cf5e:	4604      	mov	r4, r0
    cf60:	b130      	cbz	r0, cf70 <cfg_set+0x24>
		BT_ERR("Failed to set \'cfg\'");
    cf62:	2145      	movs	r1, #69	; 0x45
    cf64:	480b      	ldr	r0, [pc, #44]	; (cf94 <cfg_set+0x48>)
    cf66:	f017 f969 	bl	2423c <printk>
	bt_mesh_default_ttl_set(cfg.default_ttl);

	BT_DBG("Restored configuration state");

	return 0;
}
    cf6a:	4620      	mov	r0, r4
    cf6c:	b002      	add	sp, #8
    cf6e:	bd10      	pop	{r4, pc}
	bt_mesh_net_transmit_set(cfg.net_transmit);
    cf70:	f89d 0000 	ldrb.w	r0, [sp]
    cf74:	f7ff ffd6 	bl	cf24 <bt_mesh_net_transmit_set>
	bt_mesh_beacon_set(cfg.beacon);
    cf78:	f89d 0003 	ldrb.w	r0, [sp, #3]
    cf7c:	3000      	adds	r0, #0
    cf7e:	bf18      	it	ne
    cf80:	2001      	movne	r0, #1
    cf82:	f7ff ff7d 	bl	ce80 <bt_mesh_beacon_set>
	bt_mesh_default_ttl_set(cfg.default_ttl);
    cf86:	f89d 0006 	ldrb.w	r0, [sp, #6]
    cf8a:	f7ff ffa9 	bl	cee0 <bt_mesh_default_ttl_set>
	return 0;
    cf8e:	e7ec      	b.n	cf6a <cfg_set+0x1e>
		return 0;
    cf90:	460c      	mov	r4, r1
    cf92:	e7ea      	b.n	cf6a <cfg_set+0x1e>
    cf94:	0002dc35 	.word	0x0002dc35

0000cf98 <bt_mesh_net_transmit_get>:
}
    cf98:	4b01      	ldr	r3, [pc, #4]	; (cfa0 <bt_mesh_net_transmit_get+0x8>)
    cf9a:	f893 00d1 	ldrb.w	r0, [r3, #209]	; 0xd1
    cf9e:	4770      	bx	lr
    cfa0:	200013a8 	.word	0x200013a8

0000cfa4 <bt_mesh_cfg_init>:
	bt_mesh.default_ttl = CONFIG_BT_MESH_DEFAULT_TTL;
    cfa4:	4b0a      	ldr	r3, [pc, #40]	; (cfd0 <bt_mesh_cfg_init+0x2c>)
    cfa6:	2207      	movs	r2, #7
    cfa8:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	bt_mesh.net_xmit =
    cfac:	220a      	movs	r2, #10
    cfae:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cfb2:	3308      	adds	r3, #8
    cfb4:	f3bf 8f5b 	dmb	ish
    cfb8:	e853 2f00 	ldrex	r2, [r3]
    cfbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    cfc0:	e843 2100 	strex	r1, r2, [r3]
    cfc4:	2900      	cmp	r1, #0
    cfc6:	d1f7      	bne.n	cfb8 <bt_mesh_cfg_init+0x14>
    cfc8:	f3bf 8f5b 	dmb	ish
}
    cfcc:	4770      	bx	lr
    cfce:	bf00      	nop
    cfd0:	200013a8 	.word	0x200013a8

0000cfd4 <bt_mesh_cfg_pending_store>:
		BT_HEXDUMP_DBG(&val, sizeof(val), "raw value");
	}
}

void bt_mesh_cfg_pending_store(void)
{
    cfd4:	b507      	push	{r0, r1, r2, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    cfd6:	2000      	movs	r0, #0
    cfd8:	f7ff ff44 	bl	ce64 <atomic_test_bit.constprop.6>
    cfdc:	b320      	cbz	r0, d028 <bt_mesh_cfg_pending_store+0x54>
	return bt_mesh.net_xmit;
    cfde:	4a16      	ldr	r2, [pc, #88]	; (d038 <bt_mesh_cfg_pending_store+0x64>)
	val.net_transmit = bt_mesh_net_transmit_get();
    cfe0:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    cfe4:	f88d 3000 	strb.w	r3, [sp]
	val.relay = bt_mesh_relay_get();
    cfe8:	f01a fc3f 	bl	2786a <bt_mesh_relay_get>
	val.relay_retransmit = bt_mesh_relay_retransmit_get();
    cfec:	2300      	movs	r3, #0
    cfee:	f88d 3002 	strb.w	r3, [sp, #2]
	val.relay = bt_mesh_relay_get();
    cff2:	f88d 0001 	strb.w	r0, [sp, #1]
	val.beacon = bt_mesh_beacon_enabled();
    cff6:	f01a fc28 	bl	2784a <bt_mesh_beacon_enabled>
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
    cffa:	f240 2302 	movw	r3, #514	; 0x202
	val.beacon = bt_mesh_beacon_enabled();
    cffe:	f88d 0003 	strb.w	r0, [sp, #3]
	val.gatt_proxy = bt_mesh_gatt_proxy_get();
    d002:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    d006:	4669      	mov	r1, sp
	val.default_ttl = bt_mesh_default_ttl_get();
    d008:	f892 30d3 	ldrb.w	r3, [r2, #211]	; 0xd3
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    d00c:	480b      	ldr	r0, [pc, #44]	; (d03c <bt_mesh_cfg_pending_store+0x68>)
	val.default_ttl = bt_mesh_default_ttl_get();
    d00e:	f88d 3006 	strb.w	r3, [sp, #6]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
    d012:	2207      	movs	r2, #7
    d014:	f7f8 f934 	bl	5280 <settings_save_one>
	if (err) {
    d018:	b118      	cbz	r0, d022 <bt_mesh_cfg_pending_store+0x4e>
		BT_ERR("Failed to store configuration value");
    d01a:	4809      	ldr	r0, [pc, #36]	; (d040 <bt_mesh_cfg_pending_store+0x6c>)
    d01c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear configuration");
    d01e:	f017 f90d 	bl	2423c <printk>
		store_pending_cfg();
	} else {
		clear_cfg();
	}
}
    d022:	b003      	add	sp, #12
    d024:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Cfg");
    d028:	4804      	ldr	r0, [pc, #16]	; (d03c <bt_mesh_cfg_pending_store+0x68>)
    d02a:	f017 fd47 	bl	24abc <settings_delete>
	if (err) {
    d02e:	2800      	cmp	r0, #0
    d030:	d0f7      	beq.n	d022 <bt_mesh_cfg_pending_store+0x4e>
		BT_ERR("Failed to clear configuration");
    d032:	2145      	movs	r1, #69	; 0x45
    d034:	4803      	ldr	r0, [pc, #12]	; (d044 <bt_mesh_cfg_pending_store+0x70>)
    d036:	e7f2      	b.n	d01e <bt_mesh_cfg_pending_store+0x4a>
    d038:	200013a8 	.word	0x200013a8
    d03c:	0002dbdd 	.word	0x0002dbdd
    d040:	0002dbe9 	.word	0x0002dbe9
    d044:	0002dc12 	.word	0x0002dc12

0000d048 <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    d048:	4b02      	ldr	r3, [pc, #8]	; (d054 <adv_alloc+0xc>)
    d04a:	220c      	movs	r2, #12
    d04c:	fb02 3000 	mla	r0, r2, r0, r3
    d050:	4770      	bx	lr
    d052:	bf00      	nop
    d054:	2000217c 	.word	0x2000217c

0000d058 <bt_mesh_scan_cb>:
}

static void bt_mesh_scan_cb(const bt_addr_le_t *addr, int8_t rssi,
			    uint8_t adv_type, struct net_buf_simple *buf)
{
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    d058:	2a03      	cmp	r2, #3
{
    d05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d05e:	460f      	mov	r7, r1
    d060:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
    d062:	d025      	beq.n	d0b0 <bt_mesh_scan_cb+0x58>
		}

		net_buf_simple_restore(buf, &state);
		net_buf_simple_pull(buf, len);
	}
}
    d064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	state->offset = net_buf_simple_headroom(buf);
    d068:	4620      	mov	r0, r4
    d06a:	f01c fc8c 	bl	29986 <net_buf_simple_headroom>
    d06e:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
    d070:	4620      	mov	r0, r4
	state->len = buf->len;
    d072:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    d076:	f01c fc4c 	bl	29912 <net_buf_simple_pull_u8>
		buf->len = len - 1;
    d07a:	1e6b      	subs	r3, r5, #1
		switch (type) {
    d07c:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
    d07e:	80a3      	strh	r3, [r4, #4]
		switch (type) {
    d080:	d007      	beq.n	d092 <bt_mesh_scan_cb+0x3a>
    d082:	282b      	cmp	r0, #43	; 0x2b
    d084:	d027      	beq.n	d0d6 <bt_mesh_scan_cb+0x7e>
    d086:	2829      	cmp	r0, #41	; 0x29
    d088:	d108      	bne.n	d09c <bt_mesh_scan_cb+0x44>
			bt_mesh_pb_adv_recv(buf);
    d08a:	4620      	mov	r0, r4
    d08c:	f008 fe8a 	bl	15da4 <bt_mesh_pb_adv_recv>
			break;
    d090:	e004      	b.n	d09c <bt_mesh_scan_cb+0x44>
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
    d092:	2200      	movs	r2, #0
    d094:	4639      	mov	r1, r7
    d096:	4620      	mov	r0, r4
    d098:	f000 ffe2 	bl	e060 <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
    d09c:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
    d09e:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
    d0a2:	fa13 f686 	uxtah	r6, r3, r6
    d0a6:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
    d0a8:	4629      	mov	r1, r5
    d0aa:	4620      	mov	r0, r4
    d0ac:	f010 fb3a 	bl	1d724 <net_buf_simple_pull>
	while (buf->len > 1) {
    d0b0:	88a3      	ldrh	r3, [r4, #4]
    d0b2:	2b01      	cmp	r3, #1
    d0b4:	d9d6      	bls.n	d064 <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
    d0b6:	4620      	mov	r0, r4
    d0b8:	f01c fc2b 	bl	29912 <net_buf_simple_pull_u8>
		if (len == 0U) {
    d0bc:	4605      	mov	r5, r0
    d0be:	2800      	cmp	r0, #0
    d0c0:	d0d0      	beq.n	d064 <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
    d0c2:	88a2      	ldrh	r2, [r4, #4]
    d0c4:	b283      	uxth	r3, r0
    d0c6:	429a      	cmp	r2, r3
    d0c8:	d2ce      	bcs.n	d068 <bt_mesh_scan_cb+0x10>
			BT_WARN("AD malformed");
    d0ca:	2157      	movs	r1, #87	; 0x57
    d0cc:	4804      	ldr	r0, [pc, #16]	; (d0e0 <bt_mesh_scan_cb+0x88>)
}
    d0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("AD malformed");
    d0d2:	f017 b8b3 	b.w	2423c <printk>
			bt_mesh_beacon_recv(buf);
    d0d6:	4620      	mov	r0, r4
    d0d8:	f000 fa58 	bl	d58c <bt_mesh_beacon_recv>
			break;
    d0dc:	e7de      	b.n	d09c <bt_mesh_scan_cb+0x44>
    d0de:	bf00      	nop
    d0e0:	0002dc8f 	.word	0x0002dc8f

0000d0e4 <bt_mesh_adv_create_from_pool>:
{
    d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0e8:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d0ea:	4b14      	ldr	r3, [pc, #80]	; (d13c <bt_mesh_adv_create_from_pool+0x58>)
    d0ec:	f3bf 8f5b 	dmb	ish
    d0f0:	681d      	ldr	r5, [r3, #0]
    d0f2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d0f6:	f3c5 0540 	ubfx	r5, r5, #1, #1
    d0fa:	460c      	mov	r4, r1
    d0fc:	4690      	mov	r8, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    d0fe:	b13d      	cbz	r5, d110 <bt_mesh_adv_create_from_pool+0x2c>
		BT_WARN("Refusing to allocate buffer while suspended");
    d100:	2157      	movs	r1, #87	; 0x57
    d102:	480f      	ldr	r0, [pc, #60]	; (d140 <bt_mesh_adv_create_from_pool+0x5c>)
    d104:	f017 f89a 	bl	2423c <printk>
    d108:	2600      	movs	r6, #0
}
    d10a:	4630      	mov	r0, r6
    d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    d110:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    d114:	f01c fbd6 	bl	298c4 <net_buf_alloc_fixed>
	if (!buf) {
    d118:	4606      	mov	r6, r0
    d11a:	2800      	cmp	r0, #0
    d11c:	d0f5      	beq.n	d10a <bt_mesh_adv_create_from_pool+0x26>
	adv = get_id(net_buf_id(buf));
    d11e:	f010 f819 	bl	1d154 <net_buf_id>
    d122:	47a0      	blx	r4
    d124:	4604      	mov	r4, r0
	BT_MESH_ADV(buf) = adv;
    d126:	6170      	str	r0, [r6, #20]
	(void)memset(adv, 0, sizeof(*adv));
    d128:	220c      	movs	r2, #12
    d12a:	4629      	mov	r1, r5
    d12c:	f019 f842 	bl	261b4 <memset>
	adv->type         = type;
    d130:	7a23      	ldrb	r3, [r4, #8]
	adv->xmit         = xmit;
    d132:	7267      	strb	r7, [r4, #9]
	adv->type         = type;
    d134:	f368 0301 	bfi	r3, r8, #0, #2
    d138:	7223      	strb	r3, [r4, #8]
	return buf;
    d13a:	e7e6      	b.n	d10a <bt_mesh_adv_create_from_pool+0x26>
    d13c:	200013b0 	.word	0x200013b0
    d140:	0002dc5a 	.word	0x0002dc5a

0000d144 <bt_mesh_adv_create>:
{
    d144:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    d146:	e9cd 2300 	strd	r2, r3, [sp]
    d14a:	460b      	mov	r3, r1
    d14c:	4602      	mov	r2, r0
    d14e:	4903      	ldr	r1, [pc, #12]	; (d15c <bt_mesh_adv_create+0x18>)
    d150:	4803      	ldr	r0, [pc, #12]	; (d160 <bt_mesh_adv_create+0x1c>)
    d152:	f7ff ffc7 	bl	d0e4 <bt_mesh_adv_create_from_pool>
}
    d156:	b003      	add	sp, #12
    d158:	f85d fb04 	ldr.w	pc, [sp], #4
    d15c:	0000d049 	.word	0x0000d049
    d160:	20000e58 	.word	0x20000e58

0000d164 <bt_mesh_adv_send>:
{
    d164:	b510      	push	{r4, lr}
	BT_MESH_ADV(buf)->cb = cb;
    d166:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    d168:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    d16c:	6942      	ldr	r2, [r0, #20]
    d16e:	7a13      	ldrb	r3, [r2, #8]
    d170:	f043 0304 	orr.w	r3, r3, #4
    d174:	7213      	strb	r3, [r2, #8]
	net_buf_put(&bt_mesh_adv_queue, net_buf_ref(buf));
    d176:	f010 fa3d 	bl	1d5f4 <net_buf_ref>
    d17a:	4601      	mov	r1, r0
    d17c:	4803      	ldr	r0, [pc, #12]	; (d18c <bt_mesh_adv_send+0x28>)
    d17e:	f010 f9c7 	bl	1d510 <net_buf_put>
}
    d182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_buf_ready();
    d186:	f01b b9cc 	b.w	28522 <bt_mesh_adv_buf_ready>
    d18a:	bf00      	nop
    d18c:	20000dd8 	.word	0x20000dd8

0000d190 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    d190:	b510      	push	{r4, lr}
    d192:	b086      	sub	sp, #24
	struct bt_le_scan_param scan_param = {
    d194:	2214      	movs	r2, #20
    d196:	2100      	movs	r1, #0
    d198:	a801      	add	r0, sp, #4
    d19a:	f019 f80b 	bl	261b4 <memset>
    d19e:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    d1a2:	490a      	ldr	r1, [pc, #40]	; (d1cc <bt_mesh_scan_enable+0x3c>)
	struct bt_le_scan_param scan_param = {
    d1a4:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    d1a6:	a801      	add	r0, sp, #4
    d1a8:	f7fc f94c 	bl	9444 <bt_le_scan_start>
	if (err && err != -EALREADY) {
    d1ac:	4604      	mov	r4, r0
    d1ae:	b138      	cbz	r0, d1c0 <bt_mesh_scan_enable+0x30>
    d1b0:	f110 0f45 	cmn.w	r0, #69	; 0x45
    d1b4:	d007      	beq.n	d1c6 <bt_mesh_scan_enable+0x36>
		BT_ERR("starting scan failed (err %d)", err);
    d1b6:	4602      	mov	r2, r0
    d1b8:	2145      	movs	r1, #69	; 0x45
    d1ba:	4805      	ldr	r0, [pc, #20]	; (d1d0 <bt_mesh_scan_enable+0x40>)
    d1bc:	f017 f83e 	bl	2423c <printk>
		return err;
	}

	return 0;
}
    d1c0:	4620      	mov	r0, r4
    d1c2:	b006      	add	sp, #24
    d1c4:	bd10      	pop	{r4, pc}
	return 0;
    d1c6:	2400      	movs	r4, #0
    d1c8:	e7fa      	b.n	d1c0 <bt_mesh_scan_enable+0x30>
    d1ca:	bf00      	nop
    d1cc:	0000d059 	.word	0x0000d059
    d1d0:	0002dcc4 	.word	0x0002dcc4

0000d1d4 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
    d1d4:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
    d1d6:	f7fc f9f3 	bl	95c0 <bt_le_scan_stop>
	if (err && err != -EALREADY) {
    d1da:	4604      	mov	r4, r0
    d1dc:	b138      	cbz	r0, d1ee <bt_mesh_scan_disable+0x1a>
    d1de:	f110 0f45 	cmn.w	r0, #69	; 0x45
    d1e2:	d006      	beq.n	d1f2 <bt_mesh_scan_disable+0x1e>
		BT_ERR("stopping scan failed (err %d)", err);
    d1e4:	4602      	mov	r2, r0
    d1e6:	2145      	movs	r1, #69	; 0x45
    d1e8:	4803      	ldr	r0, [pc, #12]	; (d1f8 <bt_mesh_scan_disable+0x24>)
    d1ea:	f017 f827 	bl	2423c <printk>
		return err;
	}

	return 0;
}
    d1ee:	4620      	mov	r0, r4
    d1f0:	bd10      	pop	{r4, pc}
	return 0;
    d1f2:	2400      	movs	r4, #0
    d1f4:	e7fb      	b.n	d1ee <bt_mesh_scan_disable+0x1a>
    d1f6:	bf00      	nop
    d1f8:	0002dca1 	.word	0x0002dca1

0000d1fc <subnet_by_id>:

	return true;
}

static int subnet_by_id(struct bt_mesh_subnet *sub, void *cb_data)
{
    d1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Authentication Value %s != %s",
    d200:	f8df 8070 	ldr.w	r8, [pc, #112]	; d274 <subnet_by_id+0x78>
{
    d204:	b085      	sub	sp, #20
    d206:	460d      	mov	r5, r1
	struct beacon_params *params = cb_data;

	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    d208:	f100 045e 	add.w	r4, r0, #94	; 0x5e
    d20c:	2600      	movs	r6, #0
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    d20e:	af02      	add	r7, sp, #8
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
    d210:	f814 3c32 	ldrb.w	r3, [r4, #-50]
    d214:	b313      	cbz	r3, d25c <subnet_by_id+0x60>
	if (memcmp(params->net_id, keys->net_id, 8)) {
    d216:	2208      	movs	r2, #8
    d218:	4621      	mov	r1, r4
    d21a:	6828      	ldr	r0, [r5, #0]
    d21c:	f018 ff79 	bl	26112 <memcmp>
    d220:	b9e0      	cbnz	r0, d25c <subnet_by_id+0x60>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
    d222:	4622      	mov	r2, r4
    d224:	7b29      	ldrb	r1, [r5, #12]
    d226:	9700      	str	r7, [sp, #0]
    d228:	68ab      	ldr	r3, [r5, #8]
    d22a:	f104 0008 	add.w	r0, r4, #8
    d22e:	f01a ff14 	bl	2805a <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
    d232:	2208      	movs	r2, #8
    d234:	4639      	mov	r1, r7
    d236:	6868      	ldr	r0, [r5, #4]
    d238:	f018 ff6b 	bl	26112 <memcmp>
    d23c:	b1a0      	cbz	r0, d268 <subnet_by_id+0x6c>
		BT_WARN("Authentication Value %s != %s",
    d23e:	2108      	movs	r1, #8
    d240:	6868      	ldr	r0, [r5, #4]
    d242:	f7f9 fe53 	bl	6eec <bt_hex_real>
    d246:	2108      	movs	r1, #8
    d248:	4681      	mov	r9, r0
    d24a:	4638      	mov	r0, r7
    d24c:	f7f9 fe4e 	bl	6eec <bt_hex_real>
    d250:	464a      	mov	r2, r9
    d252:	4603      	mov	r3, r0
    d254:	2157      	movs	r1, #87	; 0x57
    d256:	4640      	mov	r0, r8
    d258:	f016 fff0 	bl	2423c <printk>
		return false;
    d25c:	344a      	adds	r4, #74	; 0x4a
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
    d25e:	b10e      	cbz	r6, d264 <subnet_by_id+0x68>
			params->new_key = (i > 0);
			return true;
		}
	}

	return false;
    d260:	2000      	movs	r0, #0
    d262:	e003      	b.n	d26c <subnet_by_id+0x70>
    d264:	2601      	movs	r6, #1
    d266:	e7d3      	b.n	d210 <subnet_by_id+0x14>
			params->new_key = (i > 0);
    d268:	736e      	strb	r6, [r5, #13]
			return true;
    d26a:	2001      	movs	r0, #1
}
    d26c:	b005      	add	sp, #20
    d26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d272:	bf00      	nop
    d274:	0002de92 	.word	0x0002de92

0000d278 <k_delayed_work_submit.constprop.7>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d278:	4602      	mov	r2, r0
    d27a:	460b      	mov	r3, r1
    d27c:	4801      	ldr	r0, [pc, #4]	; (d284 <k_delayed_work_submit.constprop.7+0xc>)
    d27e:	4902      	ldr	r1, [pc, #8]	; (d288 <k_delayed_work_submit.constprop.7+0x10>)
    d280:	f015 b872 	b.w	22368 <k_delayed_work_submit_to_queue>
    d284:	20001988 	.word	0x20001988
    d288:	20001378 	.word	0x20001378

0000d28c <beacon_send>:
{
    d28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d290:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) && bt_mesh_prov_active()) {
    d292:	f007 fc3f 	bl	14b14 <bt_mesh_prov_active>
    d296:	b110      	cbz	r0, d29e <beacon_send+0x12>
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    d298:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    d29c:	e015      	b.n	d2ca <beacon_send+0x3e>
	if (bt_mesh_is_provisioned()) {
    d29e:	f01a fab4 	bl	2780a <bt_mesh_is_provisioned>
    d2a2:	4607      	mov	r7, r0
    d2a4:	b300      	cbz	r0, d2e8 <beacon_send+0x5c>
	first_half = !first_half;
    d2a6:	4a4c      	ldr	r2, [pc, #304]	; (d3d8 <beacon_send+0x14c>)
    d2a8:	7813      	ldrb	r3, [r2, #0]
    d2aa:	f083 0301 	eor.w	r3, r3, #1
    d2ae:	7013      	strb	r3, [r2, #0]
	if (first_half) {
    d2b0:	b913      	cbnz	r3, d2b8 <beacon_send+0x2c>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
    d2b2:	484a      	ldr	r0, [pc, #296]	; (d3dc <beacon_send+0x150>)
    d2b4:	f001 fa5c 	bl	e770 <bt_mesh_subnet_foreach>
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
    d2b8:	2100      	movs	r1, #0
    d2ba:	4849      	ldr	r0, [pc, #292]	; (d3e0 <beacon_send+0x154>)
    d2bc:	f001 fa46 	bl	e74c <bt_mesh_subnet_find>
		if (bt_mesh_beacon_enabled() ||
    d2c0:	f01a fac3 	bl	2784a <bt_mesh_beacon_enabled>
    d2c4:	b128      	cbz	r0, d2d2 <beacon_send+0x46>
			k_delayed_work_submit(&beacon_timer,
    d2c6:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
    d2ca:	2100      	movs	r1, #0
    d2cc:	f7ff ffd4 	bl	d278 <k_delayed_work_submit.constprop.7>
    d2d0:	e007      	b.n	d2e2 <beacon_send+0x56>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d2d2:	4b44      	ldr	r3, [pc, #272]	; (d3e4 <beacon_send+0x158>)
    d2d4:	f3bf 8f5b 	dmb	ish
    d2d8:	681b      	ldr	r3, [r3, #0]
    d2da:	f3bf 8f5b 	dmb	ish
		if (bt_mesh_beacon_enabled() ||
    d2de:	071b      	lsls	r3, r3, #28
    d2e0:	d4f1      	bmi.n	d2c6 <beacon_send+0x3a>
}
    d2e2:	b00a      	add	sp, #40	; 0x28
    d2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t uri_hash[16] = { 0 };
    d2e8:	4601      	mov	r1, r0
    d2ea:	2210      	movs	r2, #16
    d2ec:	a802      	add	r0, sp, #8
    d2ee:	f018 ff61 	bl	261b4 <memset>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    d2f2:	2200      	movs	r2, #0
    d2f4:	2300      	movs	r3, #0
    d2f6:	210a      	movs	r1, #10
    d2f8:	2002      	movs	r0, #2
    d2fa:	f7ff ff23 	bl	d144 <bt_mesh_adv_create>
	if (!buf) {
    d2fe:	4605      	mov	r5, r0
    d300:	b920      	cbnz	r0, d30c <beacon_send+0x80>
		BT_ERR("Unable to allocate beacon buffer");
    d302:	4839      	ldr	r0, [pc, #228]	; (d3e8 <beacon_send+0x15c>)
    d304:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Unable to allocate URI buffer");
    d306:	f016 ff99 	bl	2423c <printk>
			return -ENOBUFS;
    d30a:	e7c5      	b.n	d298 <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    d30c:	f007 fbfc 	bl	14b08 <bt_mesh_prov_get>
	return net_buf_simple_add_u8(&buf->b, val);
    d310:	f105 0608 	add.w	r6, r5, #8
    d314:	4604      	mov	r4, r0
    d316:	4639      	mov	r1, r7
    d318:	4630      	mov	r0, r6
    d31a:	f01c fb4c 	bl	299b6 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d31e:	2210      	movs	r2, #16
    d320:	6821      	ldr	r1, [r4, #0]
    d322:	4630      	mov	r0, r6
    d324:	f01c fb3b 	bl	2999e <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    d328:	f8d4 8004 	ldr.w	r8, [r4, #4]
    d32c:	f1b8 0f00 	cmp.w	r8, #0
    d330:	d031      	beq.n	d396 <beacon_send+0x10a>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
}

static inline bool bt_mesh_s1(const char *m, uint8_t salt[16])
{
	const uint8_t zero[16] = { 0 };
    d332:	2210      	movs	r2, #16
    d334:	4639      	mov	r1, r7
    d336:	a806      	add	r0, sp, #24
    d338:	f018 ff3c 	bl	261b4 <memset>

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    d33c:	4640      	mov	r0, r8
    d33e:	f018 fea0 	bl	26082 <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    d342:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    d344:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    d348:	2201      	movs	r2, #1
    d34a:	4669      	mov	r1, sp
    d34c:	a806      	add	r0, sp, #24
    d34e:	f01a fce4 	bl	27d1a <bt_mesh_aes_cmac>
    d352:	bb00      	cbnz	r0, d396 <beacon_send+0x10a>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    d354:	8921      	ldrh	r1, [r4, #8]
    d356:	f041 0102 	orr.w	r1, r1, #2
	net_buf_simple_add_be16(&buf->b, val);
    d35a:	4630      	mov	r0, r6
    d35c:	f01c fb3b 	bl	299d6 <net_buf_simple_add_be16>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d360:	2204      	movs	r2, #4
    d362:	a902      	add	r1, sp, #8
    d364:	4630      	mov	r0, r6
    d366:	f01c fb1a 	bl	2999e <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    d36a:	2200      	movs	r2, #0
    d36c:	4611      	mov	r1, r2
    d36e:	4628      	mov	r0, r5
    d370:	f7ff fef8 	bl	d164 <bt_mesh_adv_send>
	net_buf_unref(buf);
    d374:	4628      	mov	r0, r5
    d376:	f010 f8f9 	bl	1d56c <net_buf_unref>
	if (prov->uri) {
    d37a:	6863      	ldr	r3, [r4, #4]
    d37c:	2b00      	cmp	r3, #0
    d37e:	d08b      	beq.n	d298 <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    d380:	2200      	movs	r2, #0
    d382:	2300      	movs	r3, #0
    d384:	210a      	movs	r1, #10
    d386:	2003      	movs	r0, #3
    d388:	f7ff fedc 	bl	d144 <bt_mesh_adv_create>
		if (!buf) {
    d38c:	4605      	mov	r5, r0
    d38e:	b920      	cbnz	r0, d39a <beacon_send+0x10e>
			BT_ERR("Unable to allocate URI buffer");
    d390:	2145      	movs	r1, #69	; 0x45
    d392:	4816      	ldr	r0, [pc, #88]	; (d3ec <beacon_send+0x160>)
    d394:	e7b7      	b.n	d306 <beacon_send+0x7a>
		oob_info = prov->oob_info;
    d396:	8921      	ldrh	r1, [r4, #8]
    d398:	e7df      	b.n	d35a <beacon_send+0xce>
		len = strlen(prov->uri);
    d39a:	6860      	ldr	r0, [r4, #4]
    d39c:	f018 fe71 	bl	26082 <strlen>
	return net_buf_simple_tailroom(&buf->b);
    d3a0:	f105 0608 	add.w	r6, r5, #8
    d3a4:	4607      	mov	r7, r0
    d3a6:	4630      	mov	r0, r6
    d3a8:	f01c faf1 	bl	2998e <net_buf_simple_tailroom>
		if (net_buf_tailroom(buf) < len) {
    d3ac:	4287      	cmp	r7, r0
    d3ae:	d907      	bls.n	d3c0 <beacon_send+0x134>
			BT_WARN("Too long URI to fit advertising data");
    d3b0:	2157      	movs	r1, #87	; 0x57
    d3b2:	480f      	ldr	r0, [pc, #60]	; (d3f0 <beacon_send+0x164>)
    d3b4:	f016 ff42 	bl	2423c <printk>
		net_buf_unref(buf);
    d3b8:	4628      	mov	r0, r5
    d3ba:	f010 f8d7 	bl	1d56c <net_buf_unref>
    d3be:	e76b      	b.n	d298 <beacon_send+0xc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d3c0:	463a      	mov	r2, r7
    d3c2:	6861      	ldr	r1, [r4, #4]
    d3c4:	4630      	mov	r0, r6
    d3c6:	f01c faea 	bl	2999e <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    d3ca:	2200      	movs	r2, #0
    d3cc:	4611      	mov	r1, r2
    d3ce:	4628      	mov	r0, r5
    d3d0:	f7ff fec8 	bl	d164 <bt_mesh_adv_send>
    d3d4:	e7f0      	b.n	d3b8 <beacon_send+0x12c>
    d3d6:	bf00      	nop
    d3d8:	200036a6 	.word	0x200036a6
    d3dc:	00027895 	.word	0x00027895
    d3e0:	0000d449 	.word	0x0000d449
    d3e4:	200013b0 	.word	0x200013b0
    d3e8:	0002dcf3 	.word	0x0002dcf3
    d3ec:	0002dd19 	.word	0x0002dd19
    d3f0:	0002dd3c 	.word	0x0002dd3c

0000d3f4 <bt_mesh_beacon_create>:
{
    d3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3f6:	460c      	mov	r4, r1
    d3f8:	4606      	mov	r6, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    d3fa:	f001 f8b5 	bl	e568 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    d3fe:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    d400:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    d402:	4620      	mov	r0, r4
    d404:	f01c fad7 	bl	299b6 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    d408:	7fb5      	ldrb	r5, [r6, #30]
    d40a:	1eab      	subs	r3, r5, #2
    d40c:	425d      	negs	r5, r3
	net_buf_simple_add_u8(buf, flags);
    d40e:	4639      	mov	r1, r7
    d410:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    d412:	415d      	adcs	r5, r3
	net_buf_simple_add_u8(buf, flags);
    d414:	f01c facf 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    d418:	214a      	movs	r1, #74	; 0x4a
    d41a:	fb01 6105 	mla	r1, r1, r5, r6
    d41e:	2208      	movs	r2, #8
    d420:	315e      	adds	r1, #94	; 0x5e
    d422:	4620      	mov	r0, r4
    d424:	f01c fabb 	bl	2999e <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    d428:	4b06      	ldr	r3, [pc, #24]	; (d444 <bt_mesh_beacon_create+0x50>)
    d42a:	4620      	mov	r0, r4
    d42c:	6819      	ldr	r1, [r3, #0]
    d42e:	f01c faf5 	bl	29a1c <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    d432:	f106 0124 	add.w	r1, r6, #36	; 0x24
    d436:	4620      	mov	r0, r4
    d438:	2208      	movs	r2, #8
}
    d43a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    d43e:	f01c baae 	b.w	2999e <net_buf_simple_add_mem>
    d442:	bf00      	nop
    d444:	200013a8 	.word	0x200013a8

0000d448 <secure_beacon_send>:
{
    d448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d44a:	4605      	mov	r5, r0
	return z_impl_k_uptime_ticks();
    d44c:	f01c ffd8 	bl	2a400 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d454:	fba0 6703 	umull	r6, r7, r0, r3
    d458:	fb03 7701 	mla	r7, r3, r1, r7
	time_diff = now - sub->beacon_sent;
    d45c:	682a      	ldr	r2, [r5, #0]
    d45e:	0bf3      	lsrs	r3, r6, #15
    d460:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
    d464:	1a9a      	subs	r2, r3, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
    d466:	4b15      	ldr	r3, [pc, #84]	; (d4bc <secure_beacon_send+0x74>)
    d468:	429a      	cmp	r2, r3
    d46a:	d809      	bhi.n	d480 <secure_beacon_send+0x38>
		time_diff < BEACON_THRESHOLD(sub)) {
    d46c:	7929      	ldrb	r1, [r5, #4]
    d46e:	f242 7310 	movw	r3, #10000	; 0x2710
    d472:	fb01 3303 	mla	r3, r1, r3, r3
    d476:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    d47a:	3b08      	subs	r3, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
    d47c:	429a      	cmp	r2, r3
    d47e:	d31b      	bcc.n	d4b8 <secure_beacon_send+0x70>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT, K_NO_WAIT);
    d480:	2200      	movs	r2, #0
    d482:	2300      	movs	r3, #0
    d484:	2108      	movs	r1, #8
    d486:	2002      	movs	r0, #2
    d488:	f7ff fe5c 	bl	d144 <bt_mesh_adv_create>
	if (!buf) {
    d48c:	4604      	mov	r4, r0
    d48e:	b930      	cbnz	r0, d49e <secure_beacon_send+0x56>
		BT_ERR("Unable to allocate beacon buffer");
    d490:	480b      	ldr	r0, [pc, #44]	; (d4c0 <secure_beacon_send+0x78>)
    d492:	2145      	movs	r1, #69	; 0x45
    d494:	f016 fed2 	bl	2423c <printk>
    d498:	f06f 000b 	mvn.w	r0, #11
}
    d49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bt_mesh_beacon_create(sub, &buf->b);
    d49e:	f100 0108 	add.w	r1, r0, #8
    d4a2:	4628      	mov	r0, r5
    d4a4:	f7ff ffa6 	bl	d3f4 <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
    d4a8:	4620      	mov	r0, r4
    d4aa:	462a      	mov	r2, r5
    d4ac:	4905      	ldr	r1, [pc, #20]	; (d4c4 <secure_beacon_send+0x7c>)
    d4ae:	f7ff fe59 	bl	d164 <bt_mesh_adv_send>
	net_buf_unref(buf);
    d4b2:	4620      	mov	r0, r4
    d4b4:	f010 f85a 	bl	1d56c <net_buf_unref>
		return 0;
    d4b8:	2000      	movs	r0, #0
    d4ba:	e7ef      	b.n	d49c <secure_beacon_send+0x54>
    d4bc:	000927bf 	.word	0x000927bf
    d4c0:	0002dcf3 	.word	0x0002dcf3
    d4c4:	0002b1c0 	.word	0x0002b1c0

0000d4c8 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    d4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d4ca:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    d4cc:	f001 f84c 	bl	e568 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    d4d0:	7fab      	ldrb	r3, [r5, #30]
    d4d2:	3b02      	subs	r3, #2
    d4d4:	425a      	negs	r2, r3
    d4d6:	415a      	adcs	r2, r3
    d4d8:	234a      	movs	r3, #74	; 0x4a
    d4da:	4353      	muls	r3, r2

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    d4dc:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    d4e0:	f103 0466 	add.w	r4, r3, #102	; 0x66
				   bt_mesh.iv_index, sub->auth);
    d4e4:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    d4e8:	9300      	str	r3, [sp, #0]
    d4ea:	4b09      	ldr	r3, [pc, #36]	; (d510 <bt_mesh_beacon_update+0x48>)
    d4ec:	4601      	mov	r1, r0
    d4ee:	681b      	ldr	r3, [r3, #0]
    d4f0:	442a      	add	r2, r5
    d4f2:	1928      	adds	r0, r5, r4
    d4f4:	f01a fdb1 	bl	2805a <bt_mesh_beacon_auth>
	if (err) {
    d4f8:	b138      	cbz	r0, d50a <bt_mesh_beacon_update+0x42>
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    d4fa:	8baa      	ldrh	r2, [r5, #28]
    d4fc:	4805      	ldr	r0, [pc, #20]	; (d514 <bt_mesh_beacon_update+0x4c>)
    d4fe:	2145      	movs	r1, #69	; 0x45
	}
}
    d500:	b003      	add	sp, #12
    d502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
    d506:	f016 be99 	b.w	2423c <printk>
}
    d50a:	b003      	add	sp, #12
    d50c:	bd30      	pop	{r4, r5, pc}
    d50e:	bf00      	nop
    d510:	200013a8 	.word	0x200013a8
    d514:	0002de58 	.word	0x0002de58

0000d518 <bt_mesh_beacon_init>:
}

BT_MESH_SUBNET_CB_DEFINE(subnet_evt);

void bt_mesh_beacon_init(void)
{
    d518:	b508      	push	{r3, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d51a:	4b04      	ldr	r3, [pc, #16]	; (d52c <bt_mesh_beacon_init+0x14>)
    d51c:	2230      	movs	r2, #48	; 0x30
    d51e:	2100      	movs	r1, #0
    d520:	4618      	mov	r0, r3
    d522:	f018 fe47 	bl	261b4 <memset>
    d526:	4a02      	ldr	r2, [pc, #8]	; (d530 <bt_mesh_beacon_init+0x18>)
    d528:	6042      	str	r2, [r0, #4]
	k_delayed_work_init(&beacon_timer, beacon_send);
}
    d52a:	bd08      	pop	{r3, pc}
    d52c:	20001378 	.word	0x20001378
    d530:	0000d28d 	.word	0x0000d28d

0000d534 <bt_mesh_beacon_ivu_initiator>:

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    d534:	b508      	push	{r3, lr}
    d536:	4b13      	ldr	r3, [pc, #76]	; (d584 <bt_mesh_beacon_ivu_initiator+0x50>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d538:	f3bf 8f5b 	dmb	ish
	if (val) {
    d53c:	b178      	cbz	r0, d55e <bt_mesh_beacon_ivu_initiator+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d53e:	e853 2f00 	ldrex	r2, [r3]
    d542:	f042 0208 	orr.w	r2, r2, #8
    d546:	e843 2100 	strex	r1, r2, [r3]
    d54a:	2900      	cmp	r1, #0
    d54c:	d1f7      	bne.n	d53e <bt_mesh_beacon_ivu_initiator+0xa>
    d54e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_INITIATOR, enable);

	if (enable) {
		k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    d552:	2000      	movs	r0, #0
    d554:	2100      	movs	r1, #0
	} else if (!bt_mesh_beacon_enabled()) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    d556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    d55a:	f7ff be8d 	b.w	d278 <k_delayed_work_submit.constprop.7>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d55e:	e853 2f00 	ldrex	r2, [r3]
    d562:	f022 0208 	bic.w	r2, r2, #8
    d566:	e843 2100 	strex	r1, r2, [r3]
    d56a:	2900      	cmp	r1, #0
    d56c:	d1f7      	bne.n	d55e <bt_mesh_beacon_ivu_initiator+0x2a>
    d56e:	f3bf 8f5b 	dmb	ish
	} else if (!bt_mesh_beacon_enabled()) {
    d572:	f01a f96a 	bl	2784a <bt_mesh_beacon_enabled>
    d576:	b920      	cbnz	r0, d582 <bt_mesh_beacon_ivu_initiator+0x4e>
		k_delayed_work_cancel(&beacon_timer);
    d578:	4803      	ldr	r0, [pc, #12]	; (d588 <bt_mesh_beacon_ivu_initiator+0x54>)
}
    d57a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    d57e:	f014 bf63 	b.w	22448 <k_delayed_work_cancel>
}
    d582:	bd08      	pop	{r3, pc}
    d584:	200013b0 	.word	0x200013b0
    d588:	20001378 	.word	0x20001378

0000d58c <bt_mesh_beacon_recv>:
{
    d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    d58e:	8883      	ldrh	r3, [r0, #4]
{
    d590:	b085      	sub	sp, #20
    d592:	4604      	mov	r4, r0
	if (buf->len < 1) {
    d594:	b923      	cbnz	r3, d5a0 <bt_mesh_beacon_recv+0x14>
		BT_ERR("Too short beacon");
    d596:	4852      	ldr	r0, [pc, #328]	; (d6e0 <bt_mesh_beacon_recv+0x154>)
    d598:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    d59a:	f016 fe4f 	bl	2423c <printk>
		return;
    d59e:	e02c      	b.n	d5fa <bt_mesh_beacon_recv+0x6e>
	type = net_buf_simple_pull_u8(buf);
    d5a0:	f01c f9b7 	bl	29912 <net_buf_simple_pull_u8>
	switch (type) {
    d5a4:	4605      	mov	r5, r0
    d5a6:	b128      	cbz	r0, d5b4 <bt_mesh_beacon_recv+0x28>
    d5a8:	2801      	cmp	r0, #1
    d5aa:	d028      	beq.n	d5fe <bt_mesh_beacon_recv+0x72>
		BT_WARN("Unknown beacon type 0x%02x", type);
    d5ac:	4602      	mov	r2, r0
    d5ae:	2157      	movs	r1, #87	; 0x57
    d5b0:	484c      	ldr	r0, [pc, #304]	; (d6e4 <bt_mesh_beacon_recv+0x158>)
    d5b2:	e006      	b.n	d5c2 <bt_mesh_beacon_recv+0x36>
	if (buf->len != 18 && buf->len != 22) {
    d5b4:	88a2      	ldrh	r2, [r4, #4]
    d5b6:	f022 0304 	bic.w	r3, r2, #4
    d5ba:	2b12      	cmp	r3, #18
    d5bc:	d004      	beq.n	d5c8 <bt_mesh_beacon_recv+0x3c>
		BT_ERR("Invalid unprovisioned beacon length (%u)", buf->len);
    d5be:	484a      	ldr	r0, [pc, #296]	; (d6e8 <bt_mesh_beacon_recv+0x15c>)
    d5c0:	2145      	movs	r1, #69	; 0x45
		BT_WARN("Unknown beacon type 0x%02x", type);
    d5c2:	f016 fe3b 	bl	2423c <printk>
    d5c6:	e018      	b.n	d5fa <bt_mesh_beacon_recv+0x6e>
	uuid = net_buf_simple_pull_mem(buf, 16);
    d5c8:	2110      	movs	r1, #16
    d5ca:	4620      	mov	r0, r4
    d5cc:	f010 f8c6 	bl	1d75c <net_buf_simple_pull_mem>
    d5d0:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    d5d2:	4620      	mov	r0, r4
    d5d4:	f01c f9ad 	bl	29932 <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    d5d8:	88a3      	ldrh	r3, [r4, #4]
    d5da:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    d5dc:	4607      	mov	r7, r0
	if (buf->len == 4) {
    d5de:	d104      	bne.n	d5ea <bt_mesh_beacon_recv+0x5e>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    d5e0:	4620      	mov	r0, r4
    d5e2:	f01c f9c7 	bl	29974 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    d5e6:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    d5e8:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    d5ea:	f007 fa8d 	bl	14b08 <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    d5ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    d5f0:	b11b      	cbz	r3, d5fa <bt_mesh_beacon_recv+0x6e>
		prov->unprovisioned_beacon(uuid,
    d5f2:	462a      	mov	r2, r5
    d5f4:	4639      	mov	r1, r7
    d5f6:	4630      	mov	r0, r6
    d5f8:	4798      	blx	r3
}
    d5fa:	b005      	add	sp, #20
    d5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < 21) {
    d5fe:	88a2      	ldrh	r2, [r4, #4]
    d600:	2a14      	cmp	r2, #20
    d602:	d802      	bhi.n	d60a <bt_mesh_beacon_recv+0x7e>
		BT_ERR("Too short secure beacon (len %u)", buf->len);
    d604:	2145      	movs	r1, #69	; 0x45
    d606:	4839      	ldr	r0, [pc, #228]	; (d6ec <bt_mesh_beacon_recv+0x160>)
    d608:	e7db      	b.n	d5c2 <bt_mesh_beacon_recv+0x36>
	sub = bt_mesh_subnet_find(cache_check, buf->data);
    d60a:	6821      	ldr	r1, [r4, #0]
    d60c:	4838      	ldr	r0, [pc, #224]	; (d6f0 <bt_mesh_beacon_recv+0x164>)
    d60e:	f001 f89d 	bl	e74c <bt_mesh_subnet_find>
	if (sub) {
    d612:	4605      	mov	r5, r0
    d614:	2800      	cmp	r0, #0
    d616:	d138      	bne.n	d68a <bt_mesh_beacon_recv+0xfe>
	params.flags = net_buf_simple_pull_u8(buf);
    d618:	4620      	mov	r0, r4
	data = buf->data;
    d61a:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    d61c:	f01c f979 	bl	29912 <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    d620:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    d622:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    d626:	4620      	mov	r0, r4
    d628:	f010 f898 	bl	1d75c <net_buf_simple_pull_mem>
    d62c:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    d62e:	4620      	mov	r0, r4
    d630:	f01c f9a0 	bl	29974 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    d634:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    d636:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    d638:	4669      	mov	r1, sp
    d63a:	482e      	ldr	r0, [pc, #184]	; (d6f4 <bt_mesh_beacon_recv+0x168>)
	params.auth = buf->data;
    d63c:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    d63e:	f001 f885 	bl	e74c <bt_mesh_subnet_find>
	if (!sub) {
    d642:	4605      	mov	r5, r0
    d644:	2800      	cmp	r0, #0
    d646:	d0d8      	beq.n	d5fa <bt_mesh_beacon_recv+0x6e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    d648:	7f83      	ldrb	r3, [r0, #30]
    d64a:	2b02      	cmp	r3, #2
    d64c:	d105      	bne.n	d65a <bt_mesh_beacon_recv+0xce>
    d64e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    d652:	b913      	cbnz	r3, d65a <bt_mesh_beacon_recv+0xce>
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
    d654:	2157      	movs	r1, #87	; 0x57
    d656:	4828      	ldr	r0, [pc, #160]	; (d6f8 <bt_mesh_beacon_recv+0x16c>)
    d658:	e79f      	b.n	d59a <bt_mesh_beacon_recv+0xe>
	memcpy(sub->beacon_cache, data, 21);
    d65a:	2215      	movs	r2, #21
    d65c:	4631      	mov	r1, r6
    d65e:	1da8      	adds	r0, r5, #6
    d660:	f018 fd7e 	bl	26160 <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    d664:	f89d 100c 	ldrb.w	r1, [sp, #12]
    d668:	f89d 200d 	ldrb.w	r2, [sp, #13]
    d66c:	4628      	mov	r0, r5
    d66e:	f001 0101 	and.w	r1, r1, #1
    d672:	f01a f99e 	bl	279b2 <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    d676:	2000      	movs	r0, #0
    d678:	f01a fa35 	bl	27ae6 <bt_mesh_subnet_get>
    d67c:	b178      	cbz	r0, d69e <bt_mesh_beacon_recv+0x112>
    d67e:	8bab      	ldrh	r3, [r5, #28]
    d680:	b16b      	cbz	r3, d69e <bt_mesh_beacon_recv+0x112>
		BT_WARN("Ignoring secure beacon on non-primary subnet");
    d682:	2157      	movs	r1, #87	; 0x57
    d684:	481d      	ldr	r0, [pc, #116]	; (d6fc <bt_mesh_beacon_recv+0x170>)
    d686:	f016 fdd9 	bl	2423c <printk>
	if (bt_mesh_beacon_enabled() &&
    d68a:	f01a f8de 	bl	2784a <bt_mesh_beacon_enabled>
    d68e:	2800      	cmp	r0, #0
    d690:	d0b3      	beq.n	d5fa <bt_mesh_beacon_recv+0x6e>
	    sub->beacons_cur < 0xff) {
    d692:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_enabled() &&
    d694:	2bff      	cmp	r3, #255	; 0xff
    d696:	d0b0      	beq.n	d5fa <bt_mesh_beacon_recv+0x6e>
		sub->beacons_cur++;
    d698:	3301      	adds	r3, #1
    d69a:	716b      	strb	r3, [r5, #5]
    d69c:	e7ad      	b.n	d5fa <bt_mesh_beacon_recv+0x6e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d69e:	4b18      	ldr	r3, [pc, #96]	; (d700 <bt_mesh_beacon_recv+0x174>)
    d6a0:	f3bf 8f5b 	dmb	ish
    d6a4:	681a      	ldr	r2, [r3, #0]
    d6a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    d6aa:	0712      	lsls	r2, r2, #28
    d6ac:	d50f      	bpl.n	d6ce <bt_mesh_beacon_recv+0x142>
    d6ae:	f3bf 8f5b 	dmb	ish
    d6b2:	681b      	ldr	r3, [r3, #0]
    d6b4:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    d6b8:	f89d 200c 	ldrb.w	r2, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    d6bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    d6c0:	f3c2 0240 	ubfx	r2, r2, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    d6c4:	429a      	cmp	r2, r3
    d6c6:	d102      	bne.n	d6ce <bt_mesh_beacon_recv+0x142>
		bt_mesh_beacon_ivu_initiator(false);
    d6c8:	2000      	movs	r0, #0
    d6ca:	f7ff ff33 	bl	d534 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    d6ce:	f89d 100c 	ldrb.w	r1, [sp, #12]
    d6d2:	9802      	ldr	r0, [sp, #8]
    d6d4:	f3c1 0140 	ubfx	r1, r1, #1, #1
    d6d8:	f000 fa24 	bl	db24 <bt_mesh_net_iv_update>
    d6dc:	e7d5      	b.n	d68a <bt_mesh_beacon_recv+0xfe>
    d6de:	bf00      	nop
    d6e0:	0002dd66 	.word	0x0002dd66
    d6e4:	0002de38 	.word	0x0002de38
    d6e8:	0002dd7c 	.word	0x0002dd7c
    d6ec:	0002ddaa 	.word	0x0002ddaa
    d6f0:	0002789f 	.word	0x0002789f
    d6f4:	0000d1fd 	.word	0x0000d1fd
    d6f8:	0002ddd0 	.word	0x0002ddd0
    d6fc:	0002de06 	.word	0x0002de06
    d700:	200013b0 	.word	0x200013b0

0000d704 <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    d704:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
    d706:	f01a f880 	bl	2780a <bt_mesh_is_provisioned>
    d70a:	b928      	cbnz	r0, d718 <bt_mesh_beacon_enable+0x14>
		return;
	}

	bt_mesh_subnet_foreach(subnet_beacon_enable);

	k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    d70c:	2000      	movs	r0, #0
    d70e:	2100      	movs	r1, #0
}
    d710:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_submit(&beacon_timer, K_NO_WAIT);
    d714:	f7ff bdb0 	b.w	d278 <k_delayed_work_submit.constprop.7>
	bt_mesh_subnet_foreach(subnet_beacon_enable);
    d718:	4801      	ldr	r0, [pc, #4]	; (d720 <bt_mesh_beacon_enable+0x1c>)
    d71a:	f001 f829 	bl	e770 <bt_mesh_subnet_foreach>
    d71e:	e7f5      	b.n	d70c <bt_mesh_beacon_enable+0x8>
    d720:	000278df 	.word	0x000278df

0000d724 <bt_mesh_beacon_disable>:
    d724:	4b05      	ldr	r3, [pc, #20]	; (d73c <bt_mesh_beacon_disable+0x18>)
    d726:	f3bf 8f5b 	dmb	ish
    d72a:	681b      	ldr	r3, [r3, #0]
    d72c:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    d730:	071b      	lsls	r3, r3, #28
    d732:	d402      	bmi.n	d73a <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    d734:	4802      	ldr	r0, [pc, #8]	; (d740 <bt_mesh_beacon_disable+0x1c>)
    d736:	f014 be87 	b.w	22448 <k_delayed_work_cancel>
	}
}
    d73a:	4770      	bx	lr
    d73c:	200013b0 	.word	0x200013b0
    d740:	20001378 	.word	0x20001378

0000d744 <net_tx_cred_get>:
		net_buf_unref(buf);
	}
}

static const struct bt_mesh_net_cred *net_tx_cred_get(struct bt_mesh_net_tx *tx)
{
    d744:	b510      	push	{r4, lr}
    d746:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_BT_MESH_LOW_POWER)
	if (tx->friend_cred && bt_mesh_lpn_established()) {
    d748:	7ac1      	ldrb	r1, [r0, #11]
    d74a:	7f93      	ldrb	r3, [r2, #30]
    d74c:	f1a3 0c02 	sub.w	ip, r3, #2
    d750:	f1dc 0300 	rsbs	r3, ip, #0
    d754:	eb43 030c 	adc.w	r3, r3, ip
    d758:	07c9      	lsls	r1, r1, #31
    d75a:	d509      	bpl.n	d770 <net_tx_cred_get+0x2c>
			       struct net_buf_simple *buf);

static inline bool bt_mesh_lpn_established(void)
{
#if defined(CONFIG_BT_MESH_LOW_POWER)
	return bt_mesh.lpn.established;
    d75c:	4909      	ldr	r1, [pc, #36]	; (d784 <net_tx_cred_get+0x40>)
    d75e:	f891 402c 	ldrb.w	r4, [r1, #44]	; 0x2c
    d762:	06e4      	lsls	r4, r4, #27
    d764:	d504      	bpl.n	d770 <net_tx_cred_get+0x2c>
		return &bt_mesh.lpn.cred[SUBNET_KEY_TX_IDX(tx->sub)];
    d766:	0158      	lsls	r0, r3, #5
    d768:	4418      	add	r0, r3
    d76a:	307c      	adds	r0, #124	; 0x7c
    d76c:	4408      	add	r0, r1
	}
#endif

	tx->friend_cred = 0U;
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
}
    d76e:	bd10      	pop	{r4, pc}
	tx->friend_cred = 0U;
    d770:	7ac1      	ldrb	r1, [r0, #11]
    d772:	f36f 0100 	bfc	r1, #0, #1
    d776:	72c1      	strb	r1, [r0, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    d778:	204a      	movs	r0, #74	; 0x4a
    d77a:	fb00 2003 	mla	r0, r0, r3, r2
    d77e:	303d      	adds	r0, #61	; 0x3d
    d780:	e7f5      	b.n	d76e <net_tx_cred_get+0x2a>
    d782:	bf00      	nop
    d784:	200013a8 	.word	0x200013a8

0000d788 <bt_mesh_net_local>:
{
    d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    d78c:	4c2e      	ldr	r4, [pc, #184]	; (d848 <bt_mesh_net_local+0xc0>)
{
    d78e:	b086      	sub	sp, #24
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    d790:	f104 0518 	add.w	r5, r4, #24
    d794:	4628      	mov	r0, r5
    d796:	f00f fe5f 	bl	1d458 <net_buf_slist_get>
    d79a:	4606      	mov	r6, r0
    d79c:	b910      	cbnz	r0, d7a4 <bt_mesh_net_local+0x1c>
}
    d79e:	b006      	add	sp, #24
    d7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_mesh_subnet *sub = LOOPBACK_BUF_SUB(buf);
    d7a4:	f8d6 8014 	ldr.w	r8, [r6, #20]
				.addr = SRC(buf->data),
    d7a8:	4637      	mov	r7, r6
		struct bt_mesh_net_rx rx = {
    d7aa:	2210      	movs	r2, #16
    d7ac:	2100      	movs	r1, #0
    d7ae:	a802      	add	r0, sp, #8
    d7b0:	f018 fd00 	bl	261b4 <memset>
    d7b4:	f8b8 301c 	ldrh.w	r3, [r8, #28]
				.addr = SRC(buf->data),
    d7b8:	f857 1f08 	ldr.w	r1, [r7, #8]!
		struct bt_mesh_net_rx rx = {
    d7bc:	f8ad 3004 	strh.w	r3, [sp, #4]
    d7c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d7c4:	f8ad 3006 	strh.w	r3, [sp, #6]
	return ((uint16_t)src[0] << 8) | src[1];
    d7c8:	794a      	ldrb	r2, [r1, #5]
    d7ca:	798b      	ldrb	r3, [r1, #6]
    d7cc:	f8cd 8000 	str.w	r8, [sp]
    d7d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d7d4:	f8ad 3008 	strh.w	r3, [sp, #8]
    d7d8:	79ca      	ldrb	r2, [r1, #7]
    d7da:	7a0b      	ldrb	r3, [r1, #8]
    d7dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d7e0:	f8ad 300a 	strh.w	r3, [sp, #10]
				.recv_ttl = TTL(buf->data),
    d7e4:	784b      	ldrb	r3, [r1, #1]
    d7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
    d7ea:	f88d 300d 	strb.w	r3, [sp, #13]
			.seq = SEQ(buf->data),
    d7ee:	1c88      	adds	r0, r1, #2
		struct bt_mesh_net_rx rx = {
    d7f0:	2301      	movs	r3, #1
    d7f2:	f88d 300f 	strb.w	r3, [sp, #15]
			.seq = SEQ(buf->data),
    d7f6:	f01a f876 	bl	278e6 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    d7fa:	6823      	ldr	r3, [r4, #0]
		struct bt_mesh_net_rx rx = {
    d7fc:	9004      	str	r0, [sp, #16]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    d7fe:	780a      	ldrb	r2, [r1, #0]
    d800:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
    d804:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
    d808:	f89d 3014 	ldrb.w	r3, [sp, #20]
    d80c:	f362 0300 	bfi	r3, r2, #0, #1
			.new_key = SUBNET_KEY_TX_IDX(sub),
    d810:	f898 201e 	ldrb.w	r2, [r8, #30]
    d814:	1e90      	subs	r0, r2, #2
    d816:	4242      	negs	r2, r0
    d818:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
    d81a:	f362 0341 	bfi	r3, r2, #1, #1
    d81e:	f88d 3014 	strb.w	r3, [sp, #20]
			.ctl = CTL(buf->data),
    d822:	784a      	ldrb	r2, [r1, #1]
		struct bt_mesh_net_rx rx = {
    d824:	b2db      	uxtb	r3, r3
			.ctl = CTL(buf->data),
    d826:	09d2      	lsrs	r2, r2, #7
		struct bt_mesh_net_rx rx = {
    d828:	f362 03c3 	bfi	r3, r2, #3, #1
    d82c:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    d830:	f043 0350 	orr.w	r3, r3, #80	; 0x50
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    d834:	4669      	mov	r1, sp
    d836:	4638      	mov	r0, r7
		struct bt_mesh_net_rx rx = {
    d838:	f88d 3014 	strb.w	r3, [sp, #20]
		(void) bt_mesh_trans_recv(&buf->b, &rx);
    d83c:	f002 f9b6 	bl	fbac <bt_mesh_trans_recv>
		net_buf_unref(buf);
    d840:	4630      	mov	r0, r6
    d842:	f00f fe93 	bl	1d56c <net_buf_unref>
    d846:	e7a5      	b.n	d794 <bt_mesh_net_local+0xc>
    d848:	200013a8 	.word	0x200013a8

0000d84c <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    d84c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d850:	461f      	mov	r7, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    d852:	680b      	ldr	r3, [r1, #0]
{
    d854:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    d856:	781a      	ldrb	r2, [r3, #0]
{
    d858:	4680      	mov	r8, r0
	if (NID(in->data) != cred->nid) {
    d85a:	7838      	ldrb	r0, [r7, #0]
    d85c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    d860:	4298      	cmp	r0, r3
    d862:	d002      	beq.n	d86a <net_decrypt+0x1e>
		return false;
    d864:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    d866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    d86a:	4d33      	ldr	r5, [pc, #204]	; (d938 <net_decrypt+0xec>)
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    d86c:	f898 6014 	ldrb.w	r6, [r8, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    d870:	682b      	ldr	r3, [r5, #0]
    d872:	f003 0301 	and.w	r3, r3, #1
    d876:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    d87a:	4632      	mov	r2, r6
    d87c:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    d880:	2300      	movs	r3, #0
    d882:	f888 2014 	strb.w	r2, [r8, #20]
    d886:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    d888:	68a3      	ldr	r3, [r4, #8]
    d88a:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    d88c:	888a      	ldrh	r2, [r1, #4]
    d88e:	6809      	ldr	r1, [r1, #0]
    d890:	4620      	mov	r0, r4
    d892:	f01c f884 	bl	2999e <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    d896:	f898 3014 	ldrb.w	r3, [r8, #20]
    d89a:	6829      	ldr	r1, [r5, #0]
    d89c:	6820      	ldr	r0, [r4, #0]
    d89e:	f003 0301 	and.w	r3, r3, #1
    d8a2:	f107 0211 	add.w	r2, r7, #17
    d8a6:	1ac9      	subs	r1, r1, r3
    d8a8:	f01a fa92 	bl	27dd0 <bt_mesh_net_obfuscate>
    d8ac:	2800      	cmp	r0, #0
    d8ae:	d1d9      	bne.n	d864 <net_decrypt+0x18>
	rx->ctx.addr = SRC(out->data);
    d8b0:	6823      	ldr	r3, [r4, #0]
    d8b2:	7959      	ldrb	r1, [r3, #5]
    d8b4:	799a      	ldrb	r2, [r3, #6]
    d8b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d8ba:	b212      	sxth	r2, r2
    d8bc:	b290      	uxth	r0, r2
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    d8be:	2a00      	cmp	r2, #0
	rx->ctx.addr = SRC(out->data);
    d8c0:	f8a8 0008 	strh.w	r0, [r8, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    d8c4:	ddce      	ble.n	d864 <net_decrypt+0x18>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
    d8c6:	f003 fcab 	bl	11220 <bt_mesh_elem_find>
    d8ca:	2800      	cmp	r0, #0
    d8cc:	d1ca      	bne.n	d864 <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    d8ce:	f898 8014 	ldrb.w	r8, [r8, #20]
    d8d2:	f018 0130 	ands.w	r1, r8, #48	; 0x30
    d8d6:	d11c      	bne.n	d912 <net_decrypt+0xc6>
		if (msg_cache[i].src == SRC(pdu->data) &&
    d8d8:	6823      	ldr	r3, [r4, #0]
    d8da:	f8df b060 	ldr.w	fp, [pc, #96]	; d93c <net_decrypt+0xf0>
    d8de:	795a      	ldrb	r2, [r3, #5]
    d8e0:	f893 a006 	ldrb.w	sl, [r3, #6]
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    d8e4:	f103 0902 	add.w	r9, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    d8e8:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
    d8ec:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    d8f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
    d8f4:	4553      	cmp	r3, sl
    d8f6:	d109      	bne.n	d90c <net_decrypt+0xc0>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    d8f8:	4648      	mov	r0, r9
    d8fa:	f019 fff4 	bl	278e6 <sys_get_be24>
    d8fe:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    d902:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    d906:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    d90a:	d0ab      	beq.n	d864 <net_decrypt+0x18>
    d90c:	3101      	adds	r1, #1
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    d90e:	290a      	cmp	r1, #10
    d910:	d1ec      	bne.n	d8ec <net_decrypt+0xa0>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    d912:	f006 0330 	and.w	r3, r6, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    d916:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    d91a:	682a      	ldr	r2, [r5, #0]
    d91c:	424b      	negs	r3, r1
    d91e:	f008 0801 	and.w	r8, r8, #1
    d922:	414b      	adcs	r3, r1
    d924:	eba2 0208 	sub.w	r2, r2, r8
    d928:	4621      	mov	r1, r4
    d92a:	1c78      	adds	r0, r7, #1
    d92c:	f01a facc 	bl	27ec8 <bt_mesh_net_decrypt>
				   proxy) == 0;
    d930:	fab0 f080 	clz	r0, r0
    d934:	0940      	lsrs	r0, r0, #5
    d936:	e796      	b.n	d866 <net_decrypt+0x1a>
    d938:	200013a8 	.word	0x200013a8
    d93c:	20002244 	.word	0x20002244

0000d940 <seq_set>:

BT_MESH_SETTINGS_DEFINE(iv, "IV", iv_set);

static int seq_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		   void *cb_arg)
{
    d940:	b513      	push	{r0, r1, r4, lr}
    d942:	4610      	mov	r0, r2
    d944:	461c      	mov	r4, r3
	struct seq_val seq;
	int err;

	if (len_rd == 0) {
    d946:	b929      	cbnz	r1, d954 <seq_set+0x14>
		BT_DBG("val (null)");

		bt_mesh.seq = 0U;
    d948:	4b10      	ldr	r3, [pc, #64]	; (d98c <seq_set+0x4c>)
		return 0;
    d94a:	460c      	mov	r4, r1
		bt_mesh.seq = 0U;
    d94c:	6059      	str	r1, [r3, #4]
	}

	BT_DBG("Sequence Number 0x%06x", bt_mesh.seq);

	return 0;
}
    d94e:	4620      	mov	r0, r4
    d950:	b002      	add	sp, #8
    d952:	bd10      	pop	{r4, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &seq, sizeof(seq));
    d954:	4621      	mov	r1, r4
    d956:	2303      	movs	r3, #3
    d958:	aa01      	add	r2, sp, #4
    d95a:	f005 ff99 	bl	13890 <bt_mesh_settings_set>
	if (err) {
    d95e:	4604      	mov	r4, r0
    d960:	b120      	cbz	r0, d96c <seq_set+0x2c>
		BT_ERR("Failed to set \'seq\'");
    d962:	2145      	movs	r1, #69	; 0x45
    d964:	480a      	ldr	r0, [pc, #40]	; (d990 <seq_set+0x50>)
    d966:	f016 fc69 	bl	2423c <printk>
		return err;
    d96a:	e7f0      	b.n	d94e <seq_set+0xe>
	return ((uint16_t)src[1] << 8) | src[0];
    d96c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    d970:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    d974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d978:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
    d980:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
    d984:	4a01      	ldr	r2, [pc, #4]	; (d98c <seq_set+0x4c>)
    d986:	337f      	adds	r3, #127	; 0x7f
    d988:	6053      	str	r3, [r2, #4]
	return 0;
    d98a:	e7e0      	b.n	d94e <seq_set+0xe>
    d98c:	200013a8 	.word	0x200013a8
    d990:	0002e226 	.word	0x0002e226

0000d994 <net_set>:
{
    d994:	b530      	push	{r4, r5, lr}
    d996:	4610      	mov	r0, r2
    d998:	b087      	sub	sp, #28
    d99a:	461d      	mov	r5, r3
	if (len_rd == 0) {
    d99c:	460c      	mov	r4, r1
    d99e:	b949      	cbnz	r1, d9b4 <net_set+0x20>
		bt_mesh_comp_unprovision();
    d9a0:	f003 fc32 	bl	11208 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    d9a4:	2210      	movs	r2, #16
    d9a6:	4621      	mov	r1, r4
    d9a8:	480e      	ldr	r0, [pc, #56]	; (d9e4 <net_set+0x50>)
    d9aa:	f018 fc03 	bl	261b4 <memset>
}
    d9ae:	4620      	mov	r0, r4
    d9b0:	b007      	add	sp, #28
    d9b2:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &net, sizeof(net));
    d9b4:	2312      	movs	r3, #18
    d9b6:	aa01      	add	r2, sp, #4
    d9b8:	4629      	mov	r1, r5
    d9ba:	f005 ff69 	bl	13890 <bt_mesh_settings_set>
	if (err) {
    d9be:	4604      	mov	r4, r0
    d9c0:	b120      	cbz	r0, d9cc <net_set+0x38>
		BT_ERR("Failed to set \'net\'");
    d9c2:	2145      	movs	r1, #69	; 0x45
    d9c4:	4808      	ldr	r0, [pc, #32]	; (d9e8 <net_set+0x54>)
    d9c6:	f016 fc39 	bl	2423c <printk>
		return err;
    d9ca:	e7f0      	b.n	d9ae <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
    d9cc:	2210      	movs	r2, #16
    d9ce:	f10d 0106 	add.w	r1, sp, #6
    d9d2:	4804      	ldr	r0, [pc, #16]	; (d9e4 <net_set+0x50>)
    d9d4:	f018 fbc4 	bl	26160 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
    d9d8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d9dc:	f003 fbfe 	bl	111dc <bt_mesh_comp_provision>
	return 0;
    d9e0:	e7e5      	b.n	d9ae <net_set+0x1a>
    d9e2:	bf00      	nop
    d9e4:	200014b0 	.word	0x200014b0
    d9e8:	0002e20d 	.word	0x0002e20d

0000d9ec <atomic_test_bit.constprop.15>:
    d9ec:	4b05      	ldr	r3, [pc, #20]	; (da04 <atomic_test_bit.constprop.15+0x18>)
    d9ee:	f3bf 8f5b 	dmb	ish
    d9f2:	689b      	ldr	r3, [r3, #8]
    d9f4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d9f8:	fa43 f000 	asr.w	r0, r3, r0
}
    d9fc:	f000 0001 	and.w	r0, r0, #1
    da00:	4770      	bx	lr
    da02:	bf00      	nop
    da04:	200013a8 	.word	0x200013a8

0000da08 <atomic_set_bit_to.constprop.11>:
	if (val) {
    da08:	4b0b      	ldr	r3, [pc, #44]	; (da38 <atomic_set_bit_to.constprop.11+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    da0a:	f3bf 8f5b 	dmb	ish
	if (val) {
    da0e:	b150      	cbz	r0, da26 <atomic_set_bit_to.constprop.11+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    da10:	e853 2f00 	ldrex	r2, [r3]
    da14:	f042 0204 	orr.w	r2, r2, #4
    da18:	e843 2100 	strex	r1, r2, [r3]
    da1c:	2900      	cmp	r1, #0
    da1e:	d1f7      	bne.n	da10 <atomic_set_bit_to.constprop.11+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    da20:	f3bf 8f5b 	dmb	ish
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
    da24:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    da26:	e853 2f00 	ldrex	r2, [r3]
    da2a:	f022 0204 	bic.w	r2, r2, #4
    da2e:	e843 2100 	strex	r1, r2, [r3]
    da32:	2900      	cmp	r1, #0
    da34:	d0f4      	beq.n	da20 <atomic_set_bit_to.constprop.11+0x18>
    da36:	e7f6      	b.n	da26 <atomic_set_bit_to.constprop.11+0x1e>
    da38:	200013b0 	.word	0x200013b0

0000da3c <iv_set>:
{
    da3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    da3e:	4610      	mov	r0, r2
    da40:	461c      	mov	r4, r3
	if (len_rd == 0) {
    da42:	b991      	cbnz	r1, da6a <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
    da44:	4b17      	ldr	r3, [pc, #92]	; (daa4 <iv_set+0x68>)
    da46:	f843 1b08 	str.w	r1, [r3], #8
    da4a:	f3bf 8f5b 	dmb	ish
    da4e:	e853 2f00 	ldrex	r2, [r3]
    da52:	f022 0204 	bic.w	r2, r2, #4
    da56:	e843 2000 	strex	r0, r2, [r3]
    da5a:	2800      	cmp	r0, #0
    da5c:	d1f7      	bne.n	da4e <iv_set+0x12>
    da5e:	f3bf 8f5b 	dmb	ish
    da62:	460c      	mov	r4, r1
}
    da64:	4620      	mov	r0, r4
    da66:	b003      	add	sp, #12
    da68:	bd30      	pop	{r4, r5, pc}
	err = bt_mesh_settings_set(read_cb, cb_arg, &iv, sizeof(iv));
    da6a:	4621      	mov	r1, r4
    da6c:	2305      	movs	r3, #5
    da6e:	466a      	mov	r2, sp
    da70:	f005 ff0e 	bl	13890 <bt_mesh_settings_set>
	if (err) {
    da74:	4604      	mov	r4, r0
    da76:	b120      	cbz	r0, da82 <iv_set+0x46>
		BT_ERR("Failed to set \'iv\'");
    da78:	2145      	movs	r1, #69	; 0x45
    da7a:	480b      	ldr	r0, [pc, #44]	; (daa8 <iv_set+0x6c>)
    da7c:	f016 fbde 	bl	2423c <printk>
		return err;
    da80:	e7f0      	b.n	da64 <iv_set+0x28>
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    da82:	f89d 0004 	ldrb.w	r0, [sp, #4]
	bt_mesh.iv_index = iv.iv_index;
    da86:	4d07      	ldr	r5, [pc, #28]	; (daa4 <iv_set+0x68>)
    da88:	9b00      	ldr	r3, [sp, #0]
    da8a:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
    da8c:	f000 0001 	and.w	r0, r0, #1
    da90:	f7ff ffba 	bl	da08 <atomic_set_bit_to.constprop.11>
	bt_mesh.ivu_duration = iv.iv_duration;
    da94:	f89d 3004 	ldrb.w	r3, [sp, #4]
    da98:	f3c3 0346 	ubfx	r3, r3, #1, #7
    da9c:	f885 30d0 	strb.w	r3, [r5, #208]	; 0xd0
	return 0;
    daa0:	e7e0      	b.n	da64 <iv_set+0x28>
    daa2:	bf00      	nop
    daa4:	200013a8 	.word	0x200013a8
    daa8:	0002e1a9 	.word	0x0002e1a9

0000daac <bt_mesh_net_create>:
{
    daac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dab0:	460d      	mov	r5, r1
    dab2:	4698      	mov	r8, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
    dab4:	f015 0301 	ands.w	r3, r5, #1
{
    dab8:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
    daba:	bf1d      	ittte	ne
    dabc:	4613      	movne	r3, r2
    dabe:	2102      	movne	r1, #2
    dac0:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    dac2:	4619      	moveq	r1, r3
{
    dac4:	4607      	mov	r7, r0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    dac6:	f000 fddb 	bl	e680 <bt_mesh_subnet_set>
    daca:	4604      	mov	r4, r0
	if (err) {
    dacc:	b130      	cbz	r0, dadc <bt_mesh_net_create+0x30>
		BT_ERR("Failed creating subnet");
    dace:	2145      	movs	r1, #69	; 0x45
    dad0:	4810      	ldr	r0, [pc, #64]	; (db14 <bt_mesh_net_create+0x68>)
    dad2:	f016 fbb3 	bl	2423c <printk>
}
    dad6:	4620      	mov	r0, r4
    dad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    dadc:	4601      	mov	r1, r0
    dade:	2228      	movs	r2, #40	; 0x28
    dae0:	480d      	ldr	r0, [pc, #52]	; (db18 <bt_mesh_net_create+0x6c>)
	bt_mesh.iv_index = iv_index;
    dae2:	4e0e      	ldr	r6, [pc, #56]	; (db1c <bt_mesh_net_create+0x70>)
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    dae4:	f018 fb66 	bl	261b4 <memset>
	msg_cache_next = 0U;
    dae8:	4b0d      	ldr	r3, [pc, #52]	; (db20 <bt_mesh_net_create+0x74>)
	bt_mesh.iv_index = iv_index;
    daea:	f8c6 8000 	str.w	r8, [r6]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    daee:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
    daf2:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    daf4:	f7ff ff88 	bl	da08 <atomic_set_bit_to.constprop.11>
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    daf8:	2360      	movs	r3, #96	; 0x60
		bt_mesh_subnet_store(idx);
    dafa:	4638      	mov	r0, r7
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    dafc:	f886 30d0 	strb.w	r3, [r6, #208]	; 0xd0
		bt_mesh_subnet_store(idx);
    db00:	f019 ff2d 	bl	2795e <bt_mesh_subnet_store>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    db04:	2004      	movs	r0, #4
    db06:	f005 fee5 	bl	138d4 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    db0a:	2005      	movs	r0, #5
    db0c:	f005 fee2 	bl	138d4 <bt_mesh_settings_store_schedule>
    db10:	e7e1      	b.n	dad6 <bt_mesh_net_create+0x2a>
    db12:	bf00      	nop
    db14:	0002deb5 	.word	0x0002deb5
    db18:	20002244 	.word	0x20002244
    db1c:	200013a8 	.word	0x200013a8
    db20:	20003512 	.word	0x20003512

0000db24 <bt_mesh_net_iv_update>:
{
    db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db26:	4606      	mov	r6, r0
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    db28:	2002      	movs	r0, #2
{
    db2a:	460c      	mov	r4, r1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    db2c:	f7ff ff5e 	bl	d9ec <atomic_test_bit.constprop.15>
    db30:	4d38      	ldr	r5, [pc, #224]	; (dc14 <bt_mesh_net_iv_update+0xf0>)
    db32:	4607      	mov	r7, r0
		if (iv_index != bt_mesh.iv_index) {
    db34:	682b      	ldr	r3, [r5, #0]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    db36:	b160      	cbz	r0, db52 <bt_mesh_net_iv_update+0x2e>
		if (iv_index != bt_mesh.iv_index) {
    db38:	42b3      	cmp	r3, r6
    db3a:	d005      	beq.n	db48 <bt_mesh_net_iv_update+0x24>
			BT_WARN("IV Index mismatch: 0x%08x != 0x%08x",
    db3c:	4836      	ldr	r0, [pc, #216]	; (dc18 <bt_mesh_net_iv_update+0xf4>)
    db3e:	4632      	mov	r2, r6
    db40:	2157      	movs	r1, #87	; 0x57
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    db42:	f016 fb7b 	bl	2423c <printk>
    db46:	e001      	b.n	db4c <bt_mesh_net_iv_update+0x28>
		if (iv_update) {
    db48:	2900      	cmp	r1, #0
    db4a:	d03d      	beq.n	dbc8 <bt_mesh_net_iv_update+0xa4>
			return false;
    db4c:	2400      	movs	r4, #0
}
    db4e:	4620      	mov	r0, r4
    db50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index) {
    db52:	42b3      	cmp	r3, r6
    db54:	d05b      	beq.n	dc0e <bt_mesh_net_iv_update+0xea>
		if (iv_index < bt_mesh.iv_index ||
    db56:	d803      	bhi.n	db60 <bt_mesh_net_iv_update+0x3c>
		    iv_index > bt_mesh.iv_index + 42) {
    db58:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    db5c:	42b2      	cmp	r2, r6
    db5e:	d203      	bcs.n	db68 <bt_mesh_net_iv_update+0x44>
			BT_ERR("IV Index out of sync: 0x%08x != 0x%08x",
    db60:	4632      	mov	r2, r6
    db62:	2145      	movs	r1, #69	; 0x45
    db64:	482d      	ldr	r0, [pc, #180]	; (dc1c <bt_mesh_net_iv_update+0xf8>)
    db66:	e7ec      	b.n	db42 <bt_mesh_net_iv_update+0x1e>
		if (iv_index > bt_mesh.iv_index + 1) {
    db68:	3301      	adds	r3, #1
    db6a:	42b3      	cmp	r3, r6
    db6c:	d223      	bcs.n	dbb6 <bt_mesh_net_iv_update+0x92>
			BT_WARN("Performing IV Index Recovery");
    db6e:	2157      	movs	r1, #87	; 0x57
    db70:	482b      	ldr	r0, [pc, #172]	; (dc20 <bt_mesh_net_iv_update+0xfc>)
    db72:	f016 fb63 	bl	2423c <printk>
			bt_mesh_rpl_clear();
    db76:	f01a f89c 	bl	27cb2 <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    db7a:	e9c5 6700 	strd	r6, r7, [r5]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    db7e:	4620      	mov	r0, r4
    db80:	f7ff ff42 	bl	da08 <atomic_set_bit_to.constprop.11>
	bt_mesh.ivu_duration = 0U;
    db84:	2300      	movs	r3, #0
    db86:	f885 30d0 	strb.w	r3, [r5, #208]	; 0xd0
	if (iv_update) {
    db8a:	2c00      	cmp	r4, #0
    db8c:	d03d      	beq.n	dc0a <bt_mesh_net_iv_update+0xe6>
		bt_mesh.iv_index = iv_index;
    db8e:	602e      	str	r6, [r5, #0]
		bt_mesh_rpl_reset();
    db90:	f002 fb86 	bl	102a0 <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    db94:	4a23      	ldr	r2, [pc, #140]	; (dc24 <bt_mesh_net_iv_update+0x100>)
    db96:	4924      	ldr	r1, [pc, #144]	; (dc28 <bt_mesh_net_iv_update+0x104>)
    db98:	4824      	ldr	r0, [pc, #144]	; (dc2c <bt_mesh_net_iv_update+0x108>)
    db9a:	2300      	movs	r3, #0
    db9c:	f014 fbe4 	bl	22368 <k_delayed_work_submit_to_queue>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    dba0:	4823      	ldr	r0, [pc, #140]	; (dc30 <bt_mesh_net_iv_update+0x10c>)
    dba2:	f000 fde5 	bl	e770 <bt_mesh_subnet_foreach>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    dba6:	2004      	movs	r0, #4
    dba8:	f005 fe94 	bl	138d4 <bt_mesh_settings_store_schedule>
		bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    dbac:	2005      	movs	r0, #5
    dbae:	f005 fe91 	bl	138d4 <bt_mesh_settings_store_schedule>
	return true;
    dbb2:	2401      	movs	r4, #1
    dbb4:	e7cb      	b.n	db4e <bt_mesh_net_iv_update+0x2a>
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    dbb6:	d105      	bne.n	dbc4 <bt_mesh_net_iv_update+0xa0>
    dbb8:	b931      	cbnz	r1, dbc8 <bt_mesh_net_iv_update+0xa4>
			BT_WARN("Ignoring new index in normal mode");
    dbba:	2157      	movs	r1, #87	; 0x57
    dbbc:	481d      	ldr	r0, [pc, #116]	; (dc34 <bt_mesh_net_iv_update+0x110>)
    dbbe:	f016 fb3d 	bl	2423c <printk>
			return false;
    dbc2:	e7c4      	b.n	db4e <bt_mesh_net_iv_update+0x2a>
		if (!iv_update) {
    dbc4:	2900      	cmp	r1, #0
    dbc6:	d0c2      	beq.n	db4e <bt_mesh_net_iv_update+0x2a>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    dbc8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    dbcc:	2b5f      	cmp	r3, #95	; 0x5f
    dbce:	d804      	bhi.n	dbda <bt_mesh_net_iv_update+0xb6>
			BT_WARN("IV Update before minimum duration");
    dbd0:	2157      	movs	r1, #87	; 0x57
    dbd2:	4819      	ldr	r0, [pc, #100]	; (dc38 <bt_mesh_net_iv_update+0x114>)
    dbd4:	f016 fb32 	bl	2423c <printk>
			return false;
    dbd8:	e7b8      	b.n	db4c <bt_mesh_net_iv_update+0x28>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    dbda:	2c00      	cmp	r4, #0
    dbdc:	d1cf      	bne.n	db7e <bt_mesh_net_iv_update+0x5a>
    dbde:	f001 fd27 	bl	f630 <bt_mesh_tx_in_progress>
    dbe2:	2800      	cmp	r0, #0
    dbe4:	d0cb      	beq.n	db7e <bt_mesh_net_iv_update+0x5a>
		BT_WARN("IV Update deferred because of pending transfer");
    dbe6:	2157      	movs	r1, #87	; 0x57
    dbe8:	4814      	ldr	r0, [pc, #80]	; (dc3c <bt_mesh_net_iv_update+0x118>)
    dbea:	f016 fb27 	bl	2423c <printk>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    dbee:	f3bf 8f5b 	dmb	ish
    dbf2:	4b13      	ldr	r3, [pc, #76]	; (dc40 <bt_mesh_net_iv_update+0x11c>)
    dbf4:	e853 2f00 	ldrex	r2, [r3]
    dbf8:	f042 0220 	orr.w	r2, r2, #32
    dbfc:	e843 2100 	strex	r1, r2, [r3]
    dc00:	2900      	cmp	r1, #0
    dc02:	d1f7      	bne.n	dbf4 <bt_mesh_net_iv_update+0xd0>
    dc04:	f3bf 8f5b 	dmb	ish
    dc08:	e7a1      	b.n	db4e <bt_mesh_net_iv_update+0x2a>
		bt_mesh.seq = 0U;
    dc0a:	606c      	str	r4, [r5, #4]
    dc0c:	e7c2      	b.n	db94 <bt_mesh_net_iv_update+0x70>
			return false;
    dc0e:	4604      	mov	r4, r0
    dc10:	e79d      	b.n	db4e <bt_mesh_net_iv_update+0x2a>
    dc12:	bf00      	nop
    dc14:	200013a8 	.word	0x200013a8
    dc18:	0002df6a 	.word	0x0002df6a
    dc1c:	0002df93 	.word	0x0002df93
    dc20:	0002dfbf 	.word	0x0002dfbf
    dc24:	a8c00000 	.word	0xa8c00000
    dc28:	20001480 	.word	0x20001480
    dc2c:	20001988 	.word	0x20001988
    dc30:	0000d4c9 	.word	0x0000d4c9
    dc34:	0002dfe1 	.word	0x0002dfe1
    dc38:	0002e008 	.word	0x0002e008
    dc3c:	0002e02f 	.word	0x0002e02f
    dc40:	200013b0 	.word	0x200013b0

0000dc44 <ivu_refresh>:
{
    dc44:	b510      	push	{r4, lr}
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    dc46:	4c15      	ldr	r4, [pc, #84]	; (dc9c <ivu_refresh+0x58>)
    dc48:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
    dc4c:	3318      	adds	r3, #24
    dc4e:	2bff      	cmp	r3, #255	; 0xff
    dc50:	461a      	mov	r2, r3
    dc52:	bfa8      	it	ge
    dc54:	22ff      	movge	r2, #255	; 0xff
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    dc56:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration = MIN(UINT8_MAX,
    dc58:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    dc5c:	dc0b      	bgt.n	dc76 <ivu_refresh+0x32>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    dc5e:	2004      	movs	r0, #4
    dc60:	f005 fe38 	bl	138d4 <bt_mesh_settings_store_schedule>
    dc64:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
    dc68:	4a0d      	ldr	r2, [pc, #52]	; (dca0 <ivu_refresh+0x5c>)
    dc6a:	480e      	ldr	r0, [pc, #56]	; (dca4 <ivu_refresh+0x60>)
    dc6c:	2300      	movs	r3, #0
}
    dc6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc72:	f014 bb79 	b.w	22368 <k_delayed_work_submit_to_queue>
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    dc76:	2002      	movs	r0, #2
    dc78:	f7ff feb8 	bl	d9ec <atomic_test_bit.constprop.15>
    dc7c:	b140      	cbz	r0, dc90 <ivu_refresh+0x4c>
		bt_mesh_beacon_ivu_initiator(true);
    dc7e:	2001      	movs	r0, #1
    dc80:	f7ff fc58 	bl	d534 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    dc84:	6820      	ldr	r0, [r4, #0]
    dc86:	2100      	movs	r1, #0
}
    dc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    dc8c:	f7ff bf4a 	b.w	db24 <bt_mesh_net_iv_update>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    dc90:	2004      	movs	r0, #4
}
    dc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
    dc96:	f005 be1d 	b.w	138d4 <bt_mesh_settings_store_schedule>
    dc9a:	bf00      	nop
    dc9c:	200013a8 	.word	0x200013a8
    dca0:	a8c00000 	.word	0xa8c00000
    dca4:	20001988 	.word	0x20001988

0000dca8 <bt_mesh_next_seq>:
{
    dca8:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    dcaa:	4c0f      	ldr	r4, [pc, #60]	; (dce8 <bt_mesh_next_seq+0x40>)
    dcac:	6865      	ldr	r5, [r4, #4]
    dcae:	1c6a      	adds	r2, r5, #1
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    dcb0:	0653      	lsls	r3, r2, #25
	uint32_t seq = bt_mesh.seq++;
    dcb2:	6062      	str	r2, [r4, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
    dcb4:	d102      	bne.n	dcbc <bt_mesh_next_seq+0x14>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_SEQ_PENDING);
    dcb6:	2005      	movs	r0, #5
    dcb8:	f005 fe0c 	bl	138d4 <bt_mesh_settings_store_schedule>
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    dcbc:	2002      	movs	r0, #2
    dcbe:	f7ff fe95 	bl	d9ec <atomic_test_bit.constprop.15>
    dcc2:	b970      	cbnz	r0, dce2 <bt_mesh_next_seq+0x3a>
    dcc4:	6862      	ldr	r2, [r4, #4]
    dcc6:	4b09      	ldr	r3, [pc, #36]	; (dcec <bt_mesh_next_seq+0x44>)
    dcc8:	429a      	cmp	r2, r3
    dcca:	d90a      	bls.n	dce2 <bt_mesh_next_seq+0x3a>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    dccc:	f019 ff0b 	bl	27ae6 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    dcd0:	b138      	cbz	r0, dce2 <bt_mesh_next_seq+0x3a>
		bt_mesh_beacon_ivu_initiator(true);
    dcd2:	2001      	movs	r0, #1
    dcd4:	f7ff fc2e 	bl	d534 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    dcd8:	6820      	ldr	r0, [r4, #0]
    dcda:	2101      	movs	r1, #1
    dcdc:	4408      	add	r0, r1
    dcde:	f7ff ff21 	bl	db24 <bt_mesh_net_iv_update>
}
    dce2:	4628      	mov	r0, r5
    dce4:	bd38      	pop	{r3, r4, r5, pc}
    dce6:	bf00      	nop
    dce8:	200013a8 	.word	0x200013a8
    dcec:	007a1200 	.word	0x007a1200

0000dcf0 <net_header_encode>:
{
    dcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    dcf2:	6843      	ldr	r3, [r0, #4]
    dcf4:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    dcf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dcfa:	429f      	cmp	r7, r3
{
    dcfc:	4605      	mov	r5, r0
    dcfe:	460e      	mov	r6, r1
    dd00:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    dd02:	d10b      	bne.n	dd1c <net_header_encode+0x2c>
    dd04:	4610      	mov	r0, r2
    dd06:	f01b fe42 	bl	2998e <net_buf_simple_tailroom>
    dd0a:	2807      	cmp	r0, #7
    dd0c:	d806      	bhi.n	dd1c <net_header_encode+0x2c>
		BT_ERR("Insufficient MIC space for CTL PDU");
    dd0e:	481b      	ldr	r0, [pc, #108]	; (dd7c <net_header_encode+0x8c>)
    dd10:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Insufficient MIC space for PDU");
    dd12:	f016 fa93 	bl	2423c <printk>
		return -EINVAL;
    dd16:	f06f 0015 	mvn.w	r0, #21
}
    dd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (net_buf_simple_tailroom(buf) < 4) {
    dd1c:	4620      	mov	r0, r4
    dd1e:	f01b fe36 	bl	2998e <net_buf_simple_tailroom>
    dd22:	2803      	cmp	r0, #3
    dd24:	d802      	bhi.n	dd2c <net_header_encode+0x3c>
		BT_ERR("Insufficient MIC space for PDU");
    dd26:	2145      	movs	r1, #69	; 0x45
    dd28:	4815      	ldr	r0, [pc, #84]	; (dd80 <net_header_encode+0x90>)
    dd2a:	e7f2      	b.n	dd12 <net_header_encode+0x22>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    dd2c:	686b      	ldr	r3, [r5, #4]
    dd2e:	4620      	mov	r0, r4
    dd30:	8899      	ldrh	r1, [r3, #4]
    dd32:	f01b fdd2 	bl	298da <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    dd36:	8929      	ldrh	r1, [r5, #8]
    dd38:	4620      	mov	r0, r4
    dd3a:	f01b fdce 	bl	298da <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    dd3e:	f7ff ffb3 	bl	dca8 <bt_mesh_next_seq>
    dd42:	4601      	mov	r1, r0
    dd44:	4620      	mov	r0, r4
    dd46:	f01b fdd8 	bl	298fa <net_buf_simple_push_be24>
	if (ctl) {
    dd4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dd4e:	429f      	cmp	r7, r3
    dd50:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    dd52:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    dd54:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    dd56:	bf08      	it	eq
    dd58:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    dd5c:	f01b fdc6 	bl	298ec <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    dd60:	4b08      	ldr	r3, [pc, #32]	; (dd84 <net_header_encode+0x94>)
    dd62:	2002      	movs	r0, #2
    dd64:	7819      	ldrb	r1, [r3, #0]
    dd66:	f7ff fe41 	bl	d9ec <atomic_test_bit.constprop.15>
    dd6a:	1a09      	subs	r1, r1, r0
    dd6c:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    dd70:	4620      	mov	r0, r4
    dd72:	b2c9      	uxtb	r1, r1
    dd74:	f01b fdba 	bl	298ec <net_buf_simple_push_u8>
	return 0;
    dd78:	2000      	movs	r0, #0
    dd7a:	e7ce      	b.n	dd1a <net_header_encode+0x2a>
    dd7c:	0002e1c1 	.word	0x0002e1c1
    dd80:	0002e1e9 	.word	0x0002e1e9
    dd84:	200013a8 	.word	0x200013a8

0000dd88 <bt_mesh_net_send>:
{
    dd88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd8c:	460e      	mov	r6, r1
    dd8e:	4605      	mov	r5, r0
    dd90:	4617      	mov	r7, r2
    dd92:	4699      	mov	r9, r3
	cred = net_tx_cred_get(tx);
    dd94:	f7ff fcd6 	bl	d744 <net_tx_cred_get>
	err = net_header_encode(tx, cred->nid, &buf->b);
    dd98:	f106 0b08 	add.w	fp, r6, #8
    dd9c:	7801      	ldrb	r1, [r0, #0]
	cred = net_tx_cred_get(tx);
    dd9e:	4682      	mov	sl, r0
	err = net_header_encode(tx, cred->nid, &buf->b);
    dda0:	465a      	mov	r2, fp
    dda2:	4628      	mov	r0, r5
    dda4:	f7ff ffa4 	bl	dcf0 <net_header_encode>
	if (err) {
    dda8:	4604      	mov	r4, r0
    ddaa:	2800      	cmp	r0, #0
    ddac:	d16c      	bne.n	de88 <bt_mesh_net_send+0x100>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    ddae:	686b      	ldr	r3, [r5, #4]
    ddb0:	8898      	ldrh	r0, [r3, #4]
    ddb2:	f019 fd5f 	bl	27874 <bt_mesh_fixed_group_match>
    ddb6:	b368      	cbz	r0, de14 <bt_mesh_net_send+0x8c>
		err = loopback(tx, buf->data, buf->len);
    ddb8:	89b3      	ldrh	r3, [r6, #12]
    ddba:	68b1      	ldr	r1, [r6, #8]
    ddbc:	9300      	str	r3, [sp, #0]
	return net_buf_alloc_fixed(pool, timeout);
    ddbe:	2200      	movs	r2, #0
    ddc0:	2300      	movs	r3, #0
    ddc2:	4835      	ldr	r0, [pc, #212]	; (de98 <bt_mesh_net_send+0x110>)
    ddc4:	9101      	str	r1, [sp, #4]
    ddc6:	f01b fd7d 	bl	298c4 <net_buf_alloc_fixed>
	if (!buf) {
    ddca:	9901      	ldr	r1, [sp, #4]
    ddcc:	4680      	mov	r8, r0
    ddce:	bb70      	cbnz	r0, de2e <bt_mesh_net_send+0xa6>
		BT_WARN("Unable to allocate loopback");
    ddd0:	2157      	movs	r1, #87	; 0x57
    ddd2:	4832      	ldr	r0, [pc, #200]	; (de9c <bt_mesh_net_send+0x114>)
    ddd4:	f016 fa32 	bl	2423c <printk>
		return -ENOMEM;
    ddd8:	f06f 040b 	mvn.w	r4, #11
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    dddc:	686b      	ldr	r3, [r5, #4]
    ddde:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    dde2:	2a00      	cmp	r2, #0
    dde4:	dc43      	bgt.n	de6e <bt_mesh_net_send+0xe6>
    dde6:	7adb      	ldrb	r3, [r3, #11]
    dde8:	2b01      	cmp	r3, #1
    ddea:	d040      	beq.n	de6e <bt_mesh_net_send+0xe6>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    ddec:	4b2c      	ldr	r3, [pc, #176]	; (dea0 <bt_mesh_net_send+0x118>)
    ddee:	2002      	movs	r0, #2
    ddf0:	681a      	ldr	r2, [r3, #0]
    ddf2:	f7ff fdfb 	bl	d9ec <atomic_test_bit.constprop.15>
    ddf6:	2300      	movs	r3, #0
    ddf8:	1a12      	subs	r2, r2, r0
    ddfa:	4651      	mov	r1, sl
    ddfc:	4658      	mov	r0, fp
    ddfe:	f019 fd7a 	bl	278f6 <net_encrypt>
	if (err) {
    de02:	4604      	mov	r4, r0
    de04:	2800      	cmp	r0, #0
    de06:	d13f      	bne.n	de88 <bt_mesh_net_send+0x100>
	bt_mesh_adv_send(buf, cb, cb_data);
    de08:	464a      	mov	r2, r9
    de0a:	4639      	mov	r1, r7
    de0c:	4630      	mov	r0, r6
    de0e:	f7ff f9a9 	bl	d164 <bt_mesh_adv_send>
    de12:	e039      	b.n	de88 <bt_mesh_net_send+0x100>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    de14:	686b      	ldr	r3, [r5, #4]
    de16:	8898      	ldrh	r0, [r3, #4]
    de18:	f003 fa02 	bl	11220 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    de1c:	2800      	cmp	r0, #0
    de1e:	d1cb      	bne.n	ddb8 <bt_mesh_net_send+0x30>
	if (tx->ctx->send_ttl == 1U) {
    de20:	686b      	ldr	r3, [r5, #4]
    de22:	7adb      	ldrb	r3, [r3, #11]
    de24:	2b01      	cmp	r3, #1
    de26:	d1e1      	bne.n	ddec <bt_mesh_net_send+0x64>
		err = -EINVAL;
    de28:	f06f 0415 	mvn.w	r4, #21
    de2c:	e02c      	b.n	de88 <bt_mesh_net_send+0x100>
	LOOPBACK_BUF_SUB(buf) = tx->sub;
    de2e:	682b      	ldr	r3, [r5, #0]
    de30:	6143      	str	r3, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    de32:	9a00      	ldr	r2, [sp, #0]
    de34:	3008      	adds	r0, #8
    de36:	f01b fdb2 	bl	2999e <net_buf_simple_add_mem>
	net_buf_slist_put(&bt_mesh.local_queue, buf);
    de3a:	4641      	mov	r1, r8
    de3c:	4819      	ldr	r0, [pc, #100]	; (dea4 <bt_mesh_net_send+0x11c>)
    de3e:	f00f facf 	bl	1d3e0 <net_buf_slist_put>
    de42:	f3bf 8f5b 	dmb	ish
    de46:	4918      	ldr	r1, [pc, #96]	; (dea8 <bt_mesh_net_send+0x120>)
    de48:	e851 3f00 	ldrex	r3, [r1]
    de4c:	f043 0201 	orr.w	r2, r3, #1
    de50:	e841 2000 	strex	r0, r2, [r1]
    de54:	2800      	cmp	r0, #0
    de56:	d1f7      	bne.n	de48 <bt_mesh_net_send+0xc0>
    de58:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    de5c:	f013 0801 	ands.w	r8, r3, #1
    de60:	d1bc      	bne.n	dddc <bt_mesh_net_send+0x54>
		k_queue_append(&work_q->queue, work);
    de62:	3908      	subs	r1, #8
    de64:	4811      	ldr	r0, [pc, #68]	; (deac <bt_mesh_net_send+0x124>)
    de66:	f01c f9dd 	bl	2a224 <k_queue_append>
	return 0;
    de6a:	4644      	mov	r4, r8
    de6c:	e7b6      	b.n	dddc <bt_mesh_net_send+0x54>
			if (!err) {
    de6e:	b95c      	cbnz	r4, de88 <bt_mesh_net_send+0x100>
void bt_mesh_net_settings_commit(void);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
    de70:	b157      	cbz	r7, de88 <bt_mesh_net_send+0x100>
		return;
	}

	if (cb->start) {
    de72:	683b      	ldr	r3, [r7, #0]
    de74:	b11b      	cbz	r3, de7e <bt_mesh_net_send+0xf6>
		cb->start(0, 0, cb_data);
    de76:	464a      	mov	r2, r9
    de78:	4621      	mov	r1, r4
    de7a:	4620      	mov	r0, r4
    de7c:	4798      	blx	r3
	}

	if (cb->end) {
    de7e:	687b      	ldr	r3, [r7, #4]
    de80:	b113      	cbz	r3, de88 <bt_mesh_net_send+0x100>
		cb->end(0, cb_data);
    de82:	4649      	mov	r1, r9
    de84:	2000      	movs	r0, #0
    de86:	4798      	blx	r3
	net_buf_unref(buf);
    de88:	4630      	mov	r0, r6
    de8a:	f00f fb6f 	bl	1d56c <net_buf_unref>
}
    de8e:	4620      	mov	r0, r4
    de90:	b003      	add	sp, #12
    de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de96:	bf00      	nop
    de98:	20000f34 	.word	0x20000f34
    de9c:	0002e188 	.word	0x0002e188
    dea0:	200013a8 	.word	0x200013a8
    dea4:	200013c0 	.word	0x200013c0
    dea8:	200013bc 	.word	0x200013bc
    deac:	20001988 	.word	0x20001988

0000deb0 <bt_mesh_net_loopback_clear>:
{
    deb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	list->head = NULL;
    deb2:	2300      	movs	r3, #0
	list->tail = NULL;
    deb4:	e9cd 3300 	strd	r3, r3, [sp]
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    deb8:	4c0e      	ldr	r4, [pc, #56]	; (def4 <bt_mesh_net_loopback_clear+0x44>)
{
    deba:	4605      	mov	r5, r0
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    debc:	f64f 76ff 	movw	r6, #65535	; 0xffff
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    dec0:	480c      	ldr	r0, [pc, #48]	; (def4 <bt_mesh_net_loopback_clear+0x44>)
    dec2:	f00f fac9 	bl	1d458 <net_buf_slist_get>
    dec6:	b930      	cbnz	r0, ded6 <bt_mesh_net_loopback_clear+0x26>
	bt_mesh.local_queue = new_list;
    dec8:	ab02      	add	r3, sp, #8
    deca:	e913 0003 	ldmdb	r3, {r0, r1}
    dece:	e884 0003 	stmia.w	r4, {r0, r1}
}
    ded2:	b002      	add	sp, #8
    ded4:	bd70      	pop	{r4, r5, r6, pc}
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    ded6:	42b5      	cmp	r5, r6
    ded8:	d003      	beq.n	dee2 <bt_mesh_net_loopback_clear+0x32>
    deda:	6943      	ldr	r3, [r0, #20]
    dedc:	8b9b      	ldrh	r3, [r3, #28]
    dede:	42ab      	cmp	r3, r5
    dee0:	d102      	bne.n	dee8 <bt_mesh_net_loopback_clear+0x38>
			net_buf_unref(buf);
    dee2:	f00f fb43 	bl	1d56c <net_buf_unref>
    dee6:	e7eb      	b.n	dec0 <bt_mesh_net_loopback_clear+0x10>
			net_buf_slist_put(&new_list, buf);
    dee8:	4601      	mov	r1, r0
    deea:	4668      	mov	r0, sp
    deec:	f00f fa78 	bl	1d3e0 <net_buf_slist_put>
    def0:	e7e6      	b.n	dec0 <bt_mesh_net_loopback_clear+0x10>
    def2:	bf00      	nop
    def4:	200013c0 	.word	0x200013c0

0000def8 <bt_mesh_net_decode>:
{
    def8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    defa:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    defc:	8882      	ldrh	r2, [r0, #4]
    defe:	2a11      	cmp	r2, #17
{
    df00:	4606      	mov	r6, r0
    df02:	460d      	mov	r5, r1
    df04:	461f      	mov	r7, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    df06:	d80f      	bhi.n	df28 <bt_mesh_net_decode+0x30>
		BT_WARN("Dropping too short mesh packet (len %u)", in->len);
    df08:	2157      	movs	r1, #87	; 0x57
    df0a:	484c      	ldr	r0, [pc, #304]	; (e03c <bt_mesh_net_decode+0x144>)
    df0c:	f016 f996 	bl	2423c <printk>
		BT_WARN("%s", bt_hex(in->data, in->len));
    df10:	88b1      	ldrh	r1, [r6, #4]
    df12:	6830      	ldr	r0, [r6, #0]
    df14:	f7f8 ffea 	bl	6eec <bt_hex_real>
    df18:	4602      	mov	r2, r0
    df1a:	4849      	ldr	r0, [pc, #292]	; (e040 <bt_mesh_net_decode+0x148>)
    df1c:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    df1e:	f016 f98d 	bl	2423c <printk>
		return -EINVAL;
    df22:	f06f 0015 	mvn.w	r0, #21
}
    df26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (in->len > BT_MESH_NET_MAX_PDU_LEN) {
    df28:	2a1d      	cmp	r2, #29
    df2a:	d902      	bls.n	df32 <bt_mesh_net_decode+0x3a>
		BT_WARN("Dropping too long mesh packet (len %u)", in->len);
    df2c:	2157      	movs	r1, #87	; 0x57
    df2e:	4845      	ldr	r0, [pc, #276]	; (e044 <bt_mesh_net_decode+0x14c>)
    df30:	e7f5      	b.n	df1e <bt_mesh_net_decode+0x26>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    df32:	bb91      	cbnz	r1, df9a <bt_mesh_net_decode+0xa2>
	return buf->data + buf->len;
    df34:	6803      	ldr	r3, [r0, #0]
    df36:	441a      	add	r2, r3
	return ((uint16_t)src[0] << 8) | src[1];
    df38:	f812 3c07 	ldrb.w	r3, [r2, #-7]
    df3c:	f812 1c08 	ldrb.w	r1, [r2, #-8]
    df40:	f812 0c06 	ldrb.w	r0, [r2, #-6]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    df44:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    df48:	f812 3c05 	ldrb.w	r3, [r2, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    df4c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    df50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    df54:	f812 0c04 	ldrb.w	r0, [r2, #-4]
    df58:	f812 1c03 	ldrb.w	r1, [r2, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    df5c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    df60:	f812 0c02 	ldrb.w	r0, [r2, #-2]
    df64:	f812 2c01 	ldrb.w	r2, [r2, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    df68:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    df6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    df70:	4935      	ldr	r1, [pc, #212]	; (e048 <bt_mesh_net_decode+0x150>)
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    df72:	4053      	eors	r3, r2
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    df74:	468c      	mov	ip, r1
    df76:	462a      	mov	r2, r5
		if (dup_cache[i] == val) {
    df78:	f851 0b04 	ldr.w	r0, [r1], #4
    df7c:	4283      	cmp	r3, r0
    df7e:	d0d0      	beq.n	df22 <bt_mesh_net_decode+0x2a>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    df80:	3201      	adds	r2, #1
    df82:	2a0a      	cmp	r2, #10
    df84:	d1f8      	bne.n	df78 <bt_mesh_net_decode+0x80>
	dup_cache[dup_cache_next++] = val;
    df86:	4831      	ldr	r0, [pc, #196]	; (e04c <bt_mesh_net_decode+0x154>)
    df88:	6801      	ldr	r1, [r0, #0]
    df8a:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    df8e:	1c4b      	adds	r3, r1, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    df90:	fb93 f1f2 	sdiv	r1, r3, r2
    df94:	fb02 3211 	mls	r2, r2, r1, r3
    df98:	6002      	str	r2, [r0, #0]
	rx->net_if = net_if;
    df9a:	7d23      	ldrb	r3, [r4, #20]
    df9c:	f365 1305 	bfi	r3, r5, #4, #2
    dfa0:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    dfa2:	463a      	mov	r2, r7
    dfa4:	4b2a      	ldr	r3, [pc, #168]	; (e050 <bt_mesh_net_decode+0x158>)
    dfa6:	4631      	mov	r1, r6
    dfa8:	4620      	mov	r0, r4
    dfaa:	f000 fc15 	bl	e7d8 <bt_mesh_net_cred_find>
    dfae:	2800      	cmp	r0, #0
    dfb0:	d040      	beq.n	e034 <bt_mesh_net_decode+0x13c>
	rx->ctx.recv_ttl = TTL(out->data);
    dfb2:	6839      	ldr	r1, [r7, #0]
	rx->ctl = CTL(out->data);
    dfb4:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    dfb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dfba:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    dfbc:	784b      	ldrb	r3, [r1, #1]
    dfbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    dfc2:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    dfc4:	3300      	adds	r3, #0
    dfc6:	bf18      	it	ne
    dfc8:	2301      	movne	r3, #1
    dfca:	425b      	negs	r3, r3
    dfcc:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    dfce:	784b      	ldrb	r3, [r1, #1]
    dfd0:	09db      	lsrs	r3, r3, #7
    dfd2:	f363 02c3 	bfi	r2, r3, #3, #1
    dfd6:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    dfd8:	1c88      	adds	r0, r1, #2
    dfda:	f019 fc84 	bl	278e6 <sys_get_be24>
    dfde:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    dfe0:	79ca      	ldrb	r2, [r1, #7]
    dfe2:	7a0b      	ldrb	r3, [r1, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    dfe4:	2d03      	cmp	r5, #3
    dfe6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(out->data);
    dfea:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    dfec:	d007      	beq.n	dffe <bt_mesh_net_decode+0x106>
    dfee:	b933      	cbnz	r3, dffe <bt_mesh_net_decode+0x106>
		BT_ERR("Destination address is unassigned; dropping packet");
    dff0:	4818      	ldr	r0, [pc, #96]	; (e054 <bt_mesh_net_decode+0x15c>)
    dff2:	2145      	movs	r1, #69	; 0x45
    dff4:	f016 f922 	bl	2423c <printk>
		return -EBADMSG;
    dff8:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    dffc:	e793      	b.n	df26 <bt_mesh_net_decode+0x2e>
	rx->msg_cache_idx = msg_cache_next++;
    dffe:	4916      	ldr	r1, [pc, #88]	; (e058 <bt_mesh_net_decode+0x160>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    e000:	4a16      	ldr	r2, [pc, #88]	; (e05c <bt_mesh_net_decode+0x164>)
	rx->msg_cache_idx = msg_cache_next++;
    e002:	880b      	ldrh	r3, [r1, #0]
    e004:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    e006:	f832 5023 	ldrh.w	r5, [r2, r3, lsl #2]
    e00a:	8924      	ldrh	r4, [r4, #8]
    e00c:	f364 050e 	bfi	r5, r4, #0, #15
    e010:	f822 5023 	strh.w	r5, [r2, r3, lsl #2]
	msg_cache[rx->msg_cache_idx].seq = rx->seq;
    e014:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    e018:	f360 34df 	bfi	r4, r0, #15, #17
    e01c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    e020:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    e022:	200a      	movs	r0, #10
    e024:	b29b      	uxth	r3, r3
    e026:	fbb3 f2f0 	udiv	r2, r3, r0
    e02a:	fb00 3312 	mls	r3, r0, r2, r3
    e02e:	800b      	strh	r3, [r1, #0]
	return 0;
    e030:	2000      	movs	r0, #0
    e032:	e778      	b.n	df26 <bt_mesh_net_decode+0x2e>
		return -ENOENT;
    e034:	f06f 0001 	mvn.w	r0, #1
    e038:	e775      	b.n	df26 <bt_mesh_net_decode+0x2e>
    e03a:	bf00      	nop
    e03c:	0002ded1 	.word	0x0002ded1
    e040:	0002defe 	.word	0x0002defe
    e044:	0002df06 	.word	0x0002df06
    e048:	20002218 	.word	0x20002218
    e04c:	20002240 	.word	0x20002240
    e050:	0000d84d 	.word	0x0000d84d
    e054:	0002df32 	.word	0x0002df32
    e058:	20003512 	.word	0x20003512
    e05c:	20002244 	.word	0x20002244

0000e060 <bt_mesh_net_recv>:
{
    e060:	b570      	push	{r4, r5, r6, lr}
    e062:	b092      	sub	sp, #72	; 0x48
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    e064:	ab0a      	add	r3, sp, #40	; 0x28
{
    e066:	4615      	mov	r5, r2
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    e068:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
{
    e06c:	460e      	mov	r6, r1
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    e06e:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    e072:	4604      	mov	r4, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    e074:	2218      	movs	r2, #24
    e076:	2100      	movs	r1, #0
    e078:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, BT_MESH_NET_MAX_PDU_LEN);
    e07a:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    e07c:	f018 f89a 	bl	261b4 <memset>
    e080:	f88d 601c 	strb.w	r6, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    e084:	f019 fbc1 	bl	2780a <bt_mesh_is_provisioned>
    e088:	2800      	cmp	r0, #0
    e08a:	d05f      	beq.n	e14c <bt_mesh_net_recv+0xec>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    e08c:	ab01      	add	r3, sp, #4
    e08e:	aa04      	add	r2, sp, #16
    e090:	4629      	mov	r1, r5
    e092:	4620      	mov	r0, r4
    e094:	f7ff ff30 	bl	def8 <bt_mesh_net_decode>
    e098:	2800      	cmp	r0, #0
    e09a:	d157      	bne.n	e14c <bt_mesh_net_recv+0xec>
	state->offset = net_buf_simple_headroom(buf);
    e09c:	a801      	add	r0, sp, #4
    e09e:	f01b fc72 	bl	29986 <net_buf_simple_headroom>
    e0a2:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    e0a4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    e0a8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    e0ac:	f019 fbe2 	bl	27874 <bt_mesh_fixed_group_match>
    e0b0:	2800      	cmp	r0, #0
    e0b2:	d145      	bne.n	e140 <bt_mesh_net_recv+0xe0>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    e0b4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    e0b8:	f003 f8b2 	bl	11220 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    e0bc:	3000      	adds	r0, #0
    e0be:	bf18      	it	ne
    e0c0:	2001      	movne	r0, #1
    e0c2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    e0c6:	a904      	add	r1, sp, #16
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    e0c8:	f360 1386 	bfi	r3, r0, #6, #1
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    e0cc:	a801      	add	r0, sp, #4
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    e0ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (bt_mesh_trans_recv(&buf, &rx) == -EAGAIN) {
    e0d2:	f001 fd6b 	bl	fbac <bt_mesh_trans_recv>
    e0d6:	300b      	adds	r0, #11
    e0d8:	d10e      	bne.n	e0f8 <bt_mesh_net_recv+0x98>
		BT_WARN("Removing rejected message from Network Message Cache");
    e0da:	2157      	movs	r1, #87	; 0x57
    e0dc:	4853      	ldr	r0, [pc, #332]	; (e22c <bt_mesh_net_recv+0x1cc>)
    e0de:	f016 f8ad 	bl	2423c <printk>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    e0e2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    e0e6:	4a52      	ldr	r2, [pc, #328]	; (e230 <bt_mesh_net_recv+0x1d0>)
    e0e8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    e0ec:	f36f 010e 	bfc	r1, #0, #15
    e0f0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    e0f4:	4a4f      	ldr	r2, [pc, #316]	; (e234 <bt_mesh_net_recv+0x1d4>)
    e0f6:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    e0f8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	dd04      	ble.n	e10a <bt_mesh_net_recv+0xaa>
	    (!rx.local_match && !rx.friend_match)) {
    e100:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    e104:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    e108:	d120      	bne.n	e14c <bt_mesh_net_recv+0xec>
	buf->data = buf->__buf + state->offset;
    e10a:	9b03      	ldr	r3, [sp, #12]
	buf->len = state->len;
    e10c:	f8ad 5008 	strh.w	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
    e110:	fa13 f484 	uxtah	r4, r3, r4
	if (rx->ctx.recv_ttl <= 1U) {
    e114:	f89d 301d 	ldrb.w	r3, [sp, #29]
    e118:	9401      	str	r4, [sp, #4]
    e11a:	2b01      	cmp	r3, #1
    e11c:	d916      	bls.n	e14c <bt_mesh_net_recv+0xec>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    e11e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    e122:	f013 0f34 	tst.w	r3, #52	; 0x34
    e126:	d108      	bne.n	e13a <bt_mesh_net_recv+0xda>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    e128:	f019 fb9f 	bl	2786a <bt_mesh_relay_get>
	    !rx->friend_cred &&
    e12c:	2801      	cmp	r0, #1
    e12e:	d109      	bne.n	e144 <bt_mesh_net_recv+0xe4>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    e130:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    e134:	f013 0f34 	tst.w	r3, #52	; 0x34
    e138:	d00a      	beq.n	e150 <bt_mesh_net_recv+0xf0>
		transmit = bt_mesh_net_transmit_get();
    e13a:	f7fe ff2d 	bl	cf98 <bt_mesh_net_transmit_get>
    e13e:	e009      	b.n	e154 <bt_mesh_net_recv+0xf4>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    e140:	2001      	movs	r0, #1
    e142:	e7be      	b.n	e0c2 <bt_mesh_net_recv+0x62>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    e144:	f019 fb87 	bl	27856 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    e148:	2801      	cmp	r0, #1
    e14a:	d0f1      	beq.n	e130 <bt_mesh_net_recv+0xd0>
}
    e14c:	b012      	add	sp, #72	; 0x48
    e14e:	bd70      	pop	{r4, r5, r6, pc}
		transmit = bt_mesh_relay_retransmit_get();
    e150:	f019 fb8e 	bl	27870 <bt_mesh_relay_retransmit_get>
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    e154:	4601      	mov	r1, r0
    e156:	2200      	movs	r2, #0
    e158:	2300      	movs	r3, #0
    e15a:	2001      	movs	r0, #1
    e15c:	f7fe fff2 	bl	d144 <bt_mesh_adv_create>
	if (!buf) {
    e160:	4604      	mov	r4, r0
    e162:	b920      	cbnz	r0, e16e <bt_mesh_net_recv+0x10e>
		BT_ERR("Out of relay buffers");
    e164:	2145      	movs	r1, #69	; 0x45
    e166:	4834      	ldr	r0, [pc, #208]	; (e238 <bt_mesh_net_recv+0x1d8>)
    e168:	f016 f868 	bl	2423c <printk>
		return;
    e16c:	e7ee      	b.n	e14c <bt_mesh_net_recv+0xec>
	sbuf->data[1] &= 0x80;
    e16e:	9a01      	ldr	r2, [sp, #4]
    e170:	7853      	ldrb	r3, [r2, #1]
    e172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    e176:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    e178:	9a01      	ldr	r2, [sp, #4]
    e17a:	f89d 301d 	ldrb.w	r3, [sp, #29]
    e17e:	7851      	ldrb	r1, [r2, #1]
    e180:	3b01      	subs	r3, #1
    e182:	430b      	orrs	r3, r1
    e184:	7053      	strb	r3, [r2, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e186:	f100 0508 	add.w	r5, r0, #8
    e18a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    e18e:	9901      	ldr	r1, [sp, #4]
    e190:	4628      	mov	r0, r5
    e192:	f01b fc04 	bl	2999e <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    e196:	9b04      	ldr	r3, [sp, #16]
    e198:	7f9a      	ldrb	r2, [r3, #30]
    e19a:	1e90      	subs	r0, r2, #2
    e19c:	4241      	negs	r1, r0
    e19e:	4141      	adcs	r1, r0
    e1a0:	224a      	movs	r2, #74	; 0x4a
	if (rx->friend_cred) {
    e1a2:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    e1a6:	434a      	muls	r2, r1
    e1a8:	f102 013d 	add.w	r1, r2, #61	; 0x3d
	if (rx->friend_cred) {
    e1ac:	0746      	lsls	r6, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    e1ae:	4419      	add	r1, r3
	if (rx->friend_cred) {
    e1b0:	d50b      	bpl.n	e1ca <bt_mesh_net_recv+0x16a>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    e1b2:	68a6      	ldr	r6, [r4, #8]
    e1b4:	7830      	ldrb	r0, [r6, #0]
    e1b6:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    e1ba:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    e1bc:	68a0      	ldr	r0, [r4, #8]
    e1be:	4413      	add	r3, r2
    e1c0:	7802      	ldrb	r2, [r0, #0]
    e1c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    e1c6:	4313      	orrs	r3, r2
    e1c8:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    e1ca:	4b1c      	ldr	r3, [pc, #112]	; (e23c <bt_mesh_net_recv+0x1dc>)
    e1cc:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    e1d0:	6818      	ldr	r0, [r3, #0]
    e1d2:	f002 0201 	and.w	r2, r2, #1
    e1d6:	1a82      	subs	r2, r0, r2
    e1d8:	2300      	movs	r3, #0
    e1da:	4628      	mov	r0, r5
    e1dc:	f019 fb8b 	bl	278f6 <net_encrypt>
    e1e0:	b138      	cbz	r0, e1f2 <bt_mesh_net_recv+0x192>
		BT_ERR("Re-encrypting failed");
    e1e2:	2145      	movs	r1, #69	; 0x45
    e1e4:	4816      	ldr	r0, [pc, #88]	; (e240 <bt_mesh_net_recv+0x1e0>)
    e1e6:	f016 f829 	bl	2423c <printk>
	net_buf_unref(buf);
    e1ea:	4620      	mov	r0, r4
    e1ec:	f00f f9be 	bl	1d56c <net_buf_unref>
    e1f0:	e7ac      	b.n	e14c <bt_mesh_net_recv+0xec>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    e1f2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    e1f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
	switch (net_if) {
    e1fa:	b133      	cbz	r3, e20a <bt_mesh_net_recv+0x1aa>
    e1fc:	2b02      	cmp	r3, #2
    e1fe:	d011      	beq.n	e224 <bt_mesh_net_recv+0x1c4>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    e200:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    e204:	075b      	lsls	r3, r3, #29
    e206:	d407      	bmi.n	e218 <bt_mesh_net_recv+0x1b8>
    e208:	e7ef      	b.n	e1ea <bt_mesh_net_recv+0x18a>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    e20a:	f019 fb2e 	bl	2786a <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    e20e:	1e42      	subs	r2, r0, #1
    e210:	4250      	negs	r0, r2
    e212:	4150      	adcs	r0, r2
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    e214:	2800      	cmp	r0, #0
    e216:	d0f3      	beq.n	e200 <bt_mesh_net_recv+0x1a0>
		bt_mesh_adv_send(buf, NULL, NULL);
    e218:	2200      	movs	r2, #0
    e21a:	4611      	mov	r1, r2
    e21c:	4620      	mov	r0, r4
    e21e:	f7fe ffa1 	bl	d164 <bt_mesh_adv_send>
    e222:	e7e2      	b.n	e1ea <bt_mesh_net_recv+0x18a>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    e224:	f019 fb17 	bl	27856 <bt_mesh_gatt_proxy_get>
    e228:	e7f1      	b.n	e20e <bt_mesh_net_recv+0x1ae>
    e22a:	bf00      	nop
    e22c:	0002e11a 	.word	0x0002e11a
    e230:	20002244 	.word	0x20002244
    e234:	20003512 	.word	0x20003512
    e238:	0002e154 	.word	0x0002e154
    e23c:	200013a8 	.word	0x200013a8
    e240:	0002e16e 	.word	0x0002e16e

0000e244 <bt_mesh_net_init>:
{
    e244:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    e246:	4c08      	ldr	r4, [pc, #32]	; (e268 <bt_mesh_net_init+0x24>)
    e248:	2230      	movs	r2, #48	; 0x30
    e24a:	2100      	movs	r1, #0
    e24c:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    e250:	f017 ffb0 	bl	261b4 <memset>
    e254:	4b05      	ldr	r3, [pc, #20]	; (e26c <bt_mesh_net_init+0x28>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e256:	4a06      	ldr	r2, [pc, #24]	; (e270 <bt_mesh_net_init+0x2c>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    e258:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e25c:	2300      	movs	r3, #0
    e25e:	60e3      	str	r3, [r4, #12]
    e260:	e9c4 2304 	strd	r2, r3, [r4, #16]
}
    e264:	bd10      	pop	{r4, pc}
    e266:	bf00      	nop
    e268:	200013a8 	.word	0x200013a8
    e26c:	0000dc45 	.word	0x0000dc45
    e270:	0000d789 	.word	0x0000d789

0000e274 <bt_mesh_net_pending_iv_store>:
		BT_DBG("Stored IV value");
	}
}

void bt_mesh_net_pending_iv_store(void)
{
    e274:	b507      	push	{r0, r1, r2, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e276:	2000      	movs	r0, #0
    e278:	f7ff fbb8 	bl	d9ec <atomic_test_bit.constprop.15>
    e27c:	b1e0      	cbz	r0, e2b8 <bt_mesh_net_pending_iv_store+0x44>
	iv.iv_index = bt_mesh.iv_index;
    e27e:	4a12      	ldr	r2, [pc, #72]	; (e2c8 <bt_mesh_net_pending_iv_store+0x54>)
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    e280:	2002      	movs	r0, #2
	iv.iv_index = bt_mesh.iv_index;
    e282:	6813      	ldr	r3, [r2, #0]
    e284:	9300      	str	r3, [sp, #0]
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    e286:	f7ff fbb1 	bl	d9ec <atomic_test_bit.constprop.15>
    e28a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	iv.iv_duration = bt_mesh.ivu_duration;
    e28e:	f892 20d0 	ldrb.w	r2, [r2, #208]	; 0xd0
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
    e292:	f360 0300 	bfi	r3, r0, #0, #1
	iv.iv_duration = bt_mesh.ivu_duration;
    e296:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    e29a:	4669      	mov	r1, sp
    e29c:	2205      	movs	r2, #5
    e29e:	480b      	ldr	r0, [pc, #44]	; (e2cc <bt_mesh_net_pending_iv_store+0x58>)
	iv.iv_duration = bt_mesh.ivu_duration;
    e2a0:	f88d 3004 	strb.w	r3, [sp, #4]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
    e2a4:	f7f6 ffec 	bl	5280 <settings_save_one>
	if (err) {
    e2a8:	b118      	cbz	r0, e2b2 <bt_mesh_net_pending_iv_store+0x3e>
		BT_ERR("Failed to store IV value");
    e2aa:	4809      	ldr	r0, [pc, #36]	; (e2d0 <bt_mesh_net_pending_iv_store+0x5c>)
    e2ac:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear IV");
    e2ae:	f015 ffc5 	bl	2423c <printk>
		store_pending_iv();
	} else {
		clear_iv();
	}
}
    e2b2:	b003      	add	sp, #12
    e2b4:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/IV");
    e2b8:	4804      	ldr	r0, [pc, #16]	; (e2cc <bt_mesh_net_pending_iv_store+0x58>)
    e2ba:	f016 fbff 	bl	24abc <settings_delete>
	if (err) {
    e2be:	2800      	cmp	r0, #0
    e2c0:	d0f7      	beq.n	e2b2 <bt_mesh_net_pending_iv_store+0x3e>
		BT_ERR("Failed to clear IV");
    e2c2:	2145      	movs	r1, #69	; 0x45
    e2c4:	4803      	ldr	r0, [pc, #12]	; (e2d4 <bt_mesh_net_pending_iv_store+0x60>)
    e2c6:	e7f2      	b.n	e2ae <bt_mesh_net_pending_iv_store+0x3a>
    e2c8:	200013a8 	.word	0x200013a8
    e2cc:	0002e063 	.word	0x0002e063
    e2d0:	0002e06e 	.word	0x0002e06e
    e2d4:	0002e08c 	.word	0x0002e08c

0000e2d8 <bt_mesh_net_pending_net_store>:
		BT_DBG("Stored Network value");
	}
}

void bt_mesh_net_pending_net_store(void)
{
    e2d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    e2da:	2000      	movs	r0, #0
    e2dc:	f7ff fb86 	bl	d9ec <atomic_test_bit.constprop.15>
    e2e0:	b1b0      	cbz	r0, e310 <bt_mesh_net_pending_net_store+0x38>
	net.primary_addr = bt_mesh_primary_addr();
    e2e2:	f002 ff97 	bl	11214 <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    e2e6:	2210      	movs	r2, #16
	net.primary_addr = bt_mesh_primary_addr();
    e2e8:	f8ad 0004 	strh.w	r0, [sp, #4]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
    e2ec:	490c      	ldr	r1, [pc, #48]	; (e320 <bt_mesh_net_pending_net_store+0x48>)
    e2ee:	f10d 0006 	add.w	r0, sp, #6
    e2f2:	f017 ff35 	bl	26160 <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
    e2f6:	2212      	movs	r2, #18
    e2f8:	a901      	add	r1, sp, #4
    e2fa:	480a      	ldr	r0, [pc, #40]	; (e324 <bt_mesh_net_pending_net_store+0x4c>)
    e2fc:	f7f6 ffc0 	bl	5280 <settings_save_one>
	if (err) {
    e300:	b118      	cbz	r0, e30a <bt_mesh_net_pending_net_store+0x32>
		BT_ERR("Failed to store Network value");
    e302:	4809      	ldr	r0, [pc, #36]	; (e328 <bt_mesh_net_pending_net_store+0x50>)
    e304:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to clear Network");
    e306:	f015 ff99 	bl	2423c <printk>
		store_pending_net();
	} else {
		clear_net();
	}
}
    e30a:	b007      	add	sp, #28
    e30c:	f85d fb04 	ldr.w	pc, [sp], #4
	err = settings_delete("bt/mesh/Net");
    e310:	4804      	ldr	r0, [pc, #16]	; (e324 <bt_mesh_net_pending_net_store+0x4c>)
    e312:	f016 fbd3 	bl	24abc <settings_delete>
	if (err) {
    e316:	2800      	cmp	r0, #0
    e318:	d0f7      	beq.n	e30a <bt_mesh_net_pending_net_store+0x32>
		BT_ERR("Failed to clear Network");
    e31a:	2145      	movs	r1, #69	; 0x45
    e31c:	4803      	ldr	r0, [pc, #12]	; (e32c <bt_mesh_net_pending_net_store+0x54>)
    e31e:	e7f2      	b.n	e306 <bt_mesh_net_pending_net_store+0x2e>
    e320:	200014b0 	.word	0x200014b0
    e324:	0002e0a4 	.word	0x0002e0a4
    e328:	0002e0b0 	.word	0x0002e0b0
    e32c:	0002e0d3 	.word	0x0002e0d3

0000e330 <bt_mesh_net_pending_seq_store>:

void bt_mesh_net_pending_seq_store(void)
{
    e330:	b507      	push	{r0, r1, r2, lr}
	struct seq_val seq;
	int err;

	sys_put_le24(bt_mesh.seq, seq.val);
    e332:	4b0a      	ldr	r3, [pc, #40]	; (e35c <bt_mesh_net_pending_seq_store+0x2c>)

	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
    e334:	480a      	ldr	r0, [pc, #40]	; (e360 <bt_mesh_net_pending_seq_store+0x30>)
	dst[0] = val;
    e336:	889a      	ldrh	r2, [r3, #4]
    e338:	f8ad 2004 	strh.w	r2, [sp, #4]
	dst[2] = val >> 16;
    e33c:	88db      	ldrh	r3, [r3, #6]
    e33e:	f88d 3006 	strb.w	r3, [sp, #6]
    e342:	2203      	movs	r2, #3
    e344:	a901      	add	r1, sp, #4
    e346:	f7f6 ff9b 	bl	5280 <settings_save_one>
	if (err) {
    e34a:	b118      	cbz	r0, e354 <bt_mesh_net_pending_seq_store+0x24>
		BT_ERR("Failed to stor Seq value");
    e34c:	2145      	movs	r1, #69	; 0x45
    e34e:	4805      	ldr	r0, [pc, #20]	; (e364 <bt_mesh_net_pending_seq_store+0x34>)
    e350:	f015 ff74 	bl	2423c <printk>
	} else {
		BT_DBG("Stored Seq value");
	}
}
    e354:	b003      	add	sp, #12
    e356:	f85d fb04 	ldr.w	pc, [sp], #4
    e35a:	bf00      	nop
    e35c:	200013a8 	.word	0x200013a8
    e360:	0002e0f0 	.word	0x0002e0f0
    e364:	0002e0fc 	.word	0x0002e0fc

0000e368 <bt_mesh_net_settings_commit>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
}

void bt_mesh_net_settings_commit(void)
{
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    e368:	4905      	ldr	r1, [pc, #20]	; (e380 <bt_mesh_net_settings_commit+0x18>)
    e36a:	f891 30d0 	ldrb.w	r3, [r1, #208]	; 0xd0
    e36e:	2b5f      	cmp	r3, #95	; 0x5f
    e370:	d805      	bhi.n	e37e <bt_mesh_net_settings_commit+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    e372:	4a04      	ldr	r2, [pc, #16]	; (e384 <bt_mesh_net_settings_commit+0x1c>)
    e374:	4804      	ldr	r0, [pc, #16]	; (e388 <bt_mesh_net_settings_commit+0x20>)
    e376:	2300      	movs	r3, #0
    e378:	31d8      	adds	r1, #216	; 0xd8
    e37a:	f013 bff5 	b.w	22368 <k_delayed_work_submit_to_queue>
		k_delayed_work_submit(&bt_mesh.ivu_timer, BT_MESH_IVU_TIMEOUT);
	}
}
    e37e:	4770      	bx	lr
    e380:	200013a8 	.word	0x200013a8
    e384:	a8c00000 	.word	0xa8c00000
    e388:	20001988 	.word	0x20001988

0000e38c <clear_net_key>:
		cb->evt_handler(sub, evt);
	}
}

static void clear_net_key(uint16_t net_idx)
{
    e38c:	b510      	push	{r4, lr}
    e38e:	b086      	sub	sp, #24
	char path[20];
	int err;

	BT_DBG("NetKeyIndex 0x%03x", net_idx);

	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    e390:	4603      	mov	r3, r0
{
    e392:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    e394:	4a07      	ldr	r2, [pc, #28]	; (e3b4 <clear_net_key+0x28>)
    e396:	2114      	movs	r1, #20
    e398:	a801      	add	r0, sp, #4
    e39a:	f015 ff5c 	bl	24256 <snprintk>
	err = settings_delete(path);
    e39e:	a801      	add	r0, sp, #4
    e3a0:	f016 fb8c 	bl	24abc <settings_delete>
	if (err) {
    e3a4:	b120      	cbz	r0, e3b0 <clear_net_key+0x24>
		BT_ERR("Failed to clear NetKeyIndex 0x%03x", net_idx);
    e3a6:	4622      	mov	r2, r4
    e3a8:	2145      	movs	r1, #69	; 0x45
    e3aa:	4803      	ldr	r0, [pc, #12]	; (e3b8 <clear_net_key+0x2c>)
    e3ac:	f015 ff46 	bl	2423c <printk>
	} else {
		BT_DBG("Cleared NetKeyIndex 0x%03x", net_idx);
	}
}
    e3b0:	b006      	add	sp, #24
    e3b2:	bd10      	pop	{r4, pc}
    e3b4:	0002e278 	.word	0x0002e278
    e3b8:	0002e28a 	.word	0x0002e28a

0000e3bc <subnet_evt>:
{
    e3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    e3c0:	4d0d      	ldr	r5, [pc, #52]	; (e3f8 <subnet_evt+0x3c>)
    e3c2:	4c0e      	ldr	r4, [pc, #56]	; (e3fc <subnet_evt+0x40>)
    e3c4:	4e0e      	ldr	r6, [pc, #56]	; (e400 <subnet_evt+0x44>)
{
    e3c6:	4680      	mov	r8, r0
    e3c8:	4689      	mov	r9, r1
    e3ca:	462f      	mov	r7, r5
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    e3cc:	42ac      	cmp	r4, r5
    e3ce:	d908      	bls.n	e3e2 <subnet_evt+0x26>
    e3d0:	4631      	mov	r1, r6
    e3d2:	480c      	ldr	r0, [pc, #48]	; (e404 <subnet_evt+0x48>)
    e3d4:	2245      	movs	r2, #69	; 0x45
    e3d6:	f015 ff31 	bl	2423c <printk>
    e3da:	2145      	movs	r1, #69	; 0x45
    e3dc:	4630      	mov	r0, r6
    e3de:	f016 f9df 	bl	247a0 <assert_post_action>
    e3e2:	42bc      	cmp	r4, r7
    e3e4:	d301      	bcc.n	e3ea <subnet_evt+0x2e>
}
    e3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cb->evt_handler(sub, evt);
    e3ea:	f854 3b04 	ldr.w	r3, [r4], #4
    e3ee:	4649      	mov	r1, r9
    e3f0:	4640      	mov	r0, r8
    e3f2:	4798      	blx	r3
    e3f4:	e7ea      	b.n	e3cc <subnet_evt+0x10>
    e3f6:	bf00      	nop
    e3f8:	0002a764 	.word	0x0002a764
    e3fc:	0002a758 	.word	0x0002a758
    e400:	0002e3ab 	.word	0x0002e3ab
    e404:	0002bced 	.word	0x0002bced

0000e408 <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    e408:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t p = 0;
    e40a:	2300      	movs	r3, #0
    e40c:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    e410:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    e414:	460e      	mov	r6, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    e416:	9301      	str	r3, [sp, #4]
    e418:	f100 0312 	add.w	r3, r0, #18
    e41c:	9300      	str	r3, [sp, #0]
{
    e41e:	4604      	mov	r4, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    e420:	f100 0311 	add.w	r3, r0, #17
    e424:	2201      	movs	r2, #1
    e426:	f10d 010f 	add.w	r1, sp, #15
    e42a:	4630      	mov	r0, r6
    e42c:	f002 fa82 	bl	10934 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    e430:	4605      	mov	r5, r0
    e432:	b130      	cbz	r0, e442 <net_keys_create+0x3a>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
    e434:	4811      	ldr	r0, [pc, #68]	; (e47c <net_keys_create+0x74>)
    e436:	2145      	movs	r1, #69	; 0x45
	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
		BT_ERR("Unable to generate beacon key");
    e438:	f015 ff00 	bl	2423c <printk>
	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;

	return 0;
}
    e43c:	4628      	mov	r0, r5
    e43e:	b004      	add	sp, #16
    e440:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(keys->net, key, 16);
    e442:	2210      	movs	r2, #16
    e444:	4631      	mov	r1, r6
    e446:	1c60      	adds	r0, r4, #1
    e448:	f017 fe8a 	bl	26160 <memcpy>
	err = bt_mesh_k3(key, keys->net_id);
    e44c:	f104 0132 	add.w	r1, r4, #50	; 0x32
    e450:	4630      	mov	r0, r6
    e452:	f002 fac7 	bl	109e4 <bt_mesh_k3>
	if (err) {
    e456:	4605      	mov	r5, r0
    e458:	b110      	cbz	r0, e460 <net_keys_create+0x58>
		BT_ERR("Unable to generate Net ID");
    e45a:	2145      	movs	r1, #69	; 0x45
    e45c:	4808      	ldr	r0, [pc, #32]	; (e480 <net_keys_create+0x78>)
    e45e:	e7eb      	b.n	e438 <net_keys_create+0x30>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    e460:	f104 023a 	add.w	r2, r4, #58	; 0x3a
    e464:	4907      	ldr	r1, [pc, #28]	; (e484 <net_keys_create+0x7c>)
    e466:	4630      	mov	r0, r6
    e468:	f002 fb12 	bl	10a90 <bt_mesh_id128>
	if (err) {
    e46c:	4605      	mov	r5, r0
    e46e:	b110      	cbz	r0, e476 <net_keys_create+0x6e>
		BT_ERR("Unable to generate beacon key");
    e470:	2145      	movs	r1, #69	; 0x45
    e472:	4805      	ldr	r0, [pc, #20]	; (e488 <net_keys_create+0x80>)
    e474:	e7e0      	b.n	e438 <net_keys_create+0x30>
	keys->valid = 1U;
    e476:	2301      	movs	r3, #1
    e478:	7023      	strb	r3, [r4, #0]
	return 0;
    e47a:	e7df      	b.n	e43c <net_keys_create+0x34>
    e47c:	0002e2cf 	.word	0x0002e2cf
    e480:	0002e300 	.word	0x0002e300
    e484:	0002e31f 	.word	0x0002e31f
    e488:	0002e324 	.word	0x0002e324

0000e48c <bt_mesh_subnet_get.part.1>:
struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    e48c:	4b03      	ldr	r3, [pc, #12]	; (e49c <bt_mesh_subnet_get.part.1+0x10>)
    e48e:	8b9a      	ldrh	r2, [r3, #28]
			return sub;
		}
	}

	return NULL;
}
    e490:	4282      	cmp	r2, r0
    e492:	bf0c      	ite	eq
    e494:	4618      	moveq	r0, r3
    e496:	2000      	movne	r0, #0
    e498:	4770      	bx	lr
    e49a:	bf00      	nop
    e49c:	2000060c 	.word	0x2000060c

0000e4a0 <store_subnet>:
{
    e4a0:	b510      	push	{r4, lr}
    e4a2:	b08e      	sub	sp, #56	; 0x38
    e4a4:	4601      	mov	r1, r0
    e4a6:	f7ff fff1 	bl	e48c <bt_mesh_subnet_get.part.1>
	if (!sub) {
    e4aa:	4604      	mov	r4, r0
    e4ac:	b930      	cbnz	r0, e4bc <store_subnet+0x1c>
		BT_WARN("NetKeyIndex 0x%03x not found", net_idx);
    e4ae:	460a      	mov	r2, r1
    e4b0:	4817      	ldr	r0, [pc, #92]	; (e510 <store_subnet+0x70>)
    e4b2:	2157      	movs	r1, #87	; 0x57
    e4b4:	f015 fec2 	bl	2423c <printk>
}
    e4b8:	b00e      	add	sp, #56	; 0x38
    e4ba:	bd10      	pop	{r4, pc}
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    e4bc:	460b      	mov	r3, r1
    e4be:	4a15      	ldr	r2, [pc, #84]	; (e514 <store_subnet+0x74>)
    e4c0:	2114      	movs	r1, #20
    e4c2:	4668      	mov	r0, sp
    e4c4:	f015 fec7 	bl	24256 <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
    e4c8:	2210      	movs	r2, #16
    e4ca:	f104 012d 	add.w	r1, r4, #45	; 0x2d
    e4ce:	f10d 0015 	add.w	r0, sp, #21
    e4d2:	f017 fe45 	bl	26160 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    e4d6:	2210      	movs	r2, #16
    e4d8:	f104 0177 	add.w	r1, r4, #119	; 0x77
    e4dc:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    e4e0:	f017 fe3e 	bl	26160 <memcpy>
	key.kr_flag = 0U; /* Deprecated */
    e4e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
	key.kr_phase = sub->kr_phase;
    e4e8:	7fa2      	ldrb	r2, [r4, #30]
    e4ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    e4ee:	f362 0347 	bfi	r3, r2, #1, #7
	err = settings_save_one(path, &key, sizeof(key));
    e4f2:	a905      	add	r1, sp, #20
    e4f4:	2221      	movs	r2, #33	; 0x21
    e4f6:	4668      	mov	r0, sp
	key.kr_phase = sub->kr_phase;
    e4f8:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
    e4fc:	f7f6 fec0 	bl	5280 <settings_save_one>
	if (err) {
    e500:	2800      	cmp	r0, #0
    e502:	d0d9      	beq.n	e4b8 <store_subnet+0x18>
		BT_ERR("Failed to store NetKey value");
    e504:	2145      	movs	r1, #69	; 0x45
    e506:	4804      	ldr	r0, [pc, #16]	; (e518 <store_subnet+0x78>)
    e508:	f015 fe98 	bl	2423c <printk>
    e50c:	e7d4      	b.n	e4b8 <store_subnet+0x18>
    e50e:	bf00      	nop
    e510:	0002e347 	.word	0x0002e347
    e514:	0002e278 	.word	0x0002e278
    e518:	0002e369 	.word	0x0002e369

0000e51c <update_subnet_settings>:
		if (update->key_idx == key_idx) {
    e51c:	4a11      	ldr	r2, [pc, #68]	; (e564 <update_subnet_settings+0x48>)
		if (!update->valid) {
    e51e:	7853      	ldrb	r3, [r2, #1]
{
    e520:	b470      	push	{r4, r5, r6}
		if (update->key_idx == key_idx) {
    e522:	8814      	ldrh	r4, [r2, #0]
		if (!update->valid) {
    e524:	f013 0f10 	tst.w	r3, #16
	uint8_t clear = store ? 0U : 1U;
    e528:	f081 0501 	eor.w	r5, r1, #1
		if (update->key_idx == key_idx) {
    e52c:	f3c4 040b 	ubfx	r4, r4, #0, #12
		if (!update->valid) {
    e530:	d10f      	bne.n	e552 <update_subnet_settings+0x36>
	free_slot->valid = 1U;
    e532:	f043 0310 	orr.w	r3, r3, #16
    e536:	7053      	strb	r3, [r2, #1]
	free_slot->key_idx = net_idx;
    e538:	8813      	ldrh	r3, [r2, #0]
    e53a:	f360 030b 	bfi	r3, r0, #0, #12
    e53e:	8013      	strh	r3, [r2, #0]
	free_slot->clear = clear;
    e540:	f3c3 2307 	ubfx	r3, r3, #8, #8
		update->clear = clear;
    e544:	f365 1345 	bfi	r3, r5, #5, #1
    e548:	7053      	strb	r3, [r2, #1]
		bt_mesh_settings_store_schedule(
    e54a:	2001      	movs	r0, #1
}
    e54c:	bc70      	pop	{r4, r5, r6}
		bt_mesh_settings_store_schedule(
    e54e:	f005 b9c1 	b.w	138d4 <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
    e552:	4284      	cmp	r4, r0
    e554:	d0f6      	beq.n	e544 <update_subnet_settings+0x28>
		if (store) {
    e556:	b111      	cbz	r1, e55e <update_subnet_settings+0x42>
}
    e558:	bc70      	pop	{r4, r5, r6}
			store_subnet(net_idx);
    e55a:	f7ff bfa1 	b.w	e4a0 <store_subnet>
}
    e55e:	bc70      	pop	{r4, r5, r6}
			clear_net_key(net_idx);
    e560:	f7ff bf14 	b.w	e38c <clear_net_key>
    e564:	20003514 	.word	0x20003514

0000e568 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    e568:	b118      	cbz	r0, e572 <bt_mesh_net_flags+0xa>
    e56a:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    e56c:	1e82      	subs	r2, r0, #2
    e56e:	4250      	negs	r0, r2
    e570:	4150      	adcs	r0, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e572:	4b05      	ldr	r3, [pc, #20]	; (e588 <bt_mesh_net_flags+0x20>)
    e574:	f3bf 8f5b 	dmb	ish
    e578:	681b      	ldr	r3, [r3, #0]
    e57a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    e57e:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    e580:	bf48      	it	mi
    e582:	f040 0002 	orrmi.w	r0, r0, #2
}
    e586:	4770      	bx	lr
    e588:	200013b0 	.word	0x200013b0

0000e58c <bt_mesh_subnet_add>:
{
    e58c:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == net_idx) {
    e58e:	4d15      	ldr	r5, [pc, #84]	; (e5e4 <bt_mesh_subnet_add+0x58>)
    e590:	8bab      	ldrh	r3, [r5, #28]
{
    e592:	4606      	mov	r6, r0
		if (subnets[i].net_idx == net_idx) {
    e594:	429e      	cmp	r6, r3
{
    e596:	4608      	mov	r0, r1
		if (subnets[i].net_idx == net_idx) {
    e598:	d00b      	beq.n	e5b2 <bt_mesh_subnet_add+0x26>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    e59a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e59e:	4293      	cmp	r3, r2
    e5a0:	d11e      	bne.n	e5e0 <bt_mesh_subnet_add+0x54>
	err = net_keys_create(&sub->keys[0], key);
    e5a2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e5a6:	f7ff ff2f 	bl	e408 <net_keys_create>
	if (err) {
    e5aa:	4604      	mov	r4, r0
    e5ac:	b158      	cbz	r0, e5c6 <bt_mesh_subnet_add+0x3a>
		return STATUS_UNSPECIFIED;
    e5ae:	2010      	movs	r0, #16
    e5b0:	e008      	b.n	e5c4 <bt_mesh_subnet_add+0x38>
		if (memcmp(key, sub->keys[0].net, 16)) {
    e5b2:	2210      	movs	r2, #16
    e5b4:	f105 012d 	add.w	r1, r5, #45	; 0x2d
    e5b8:	f017 fdab 	bl	26112 <memcmp>
    e5bc:	2800      	cmp	r0, #0
		return STATUS_SUCCESS;
    e5be:	bf14      	ite	ne
    e5c0:	2006      	movne	r0, #6
    e5c2:	2000      	moveq	r0, #0
}
    e5c4:	bd70      	pop	{r4, r5, r6, pc}
	sub->kr_phase = BT_MESH_KR_NORMAL;
    e5c6:	f44f 7300 	mov.w	r3, #512	; 0x200
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    e5ca:	4601      	mov	r1, r0
    e5cc:	4628      	mov	r0, r5
	sub->kr_phase = BT_MESH_KR_NORMAL;
    e5ce:	83eb      	strh	r3, [r5, #30]
	sub->net_idx = net_idx;
    e5d0:	83ae      	strh	r6, [r5, #28]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    e5d2:	f7ff fef3 	bl	e3bc <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
    e5d6:	8ba8      	ldrh	r0, [r5, #28]
    e5d8:	f019 f9c1 	bl	2795e <bt_mesh_subnet_store>
	return STATUS_SUCCESS;
    e5dc:	4620      	mov	r0, r4
    e5de:	e7f1      	b.n	e5c4 <bt_mesh_subnet_add+0x38>
		return STATUS_INSUFF_RESOURCES;
    e5e0:	2005      	movs	r0, #5
    e5e2:	e7ef      	b.n	e5c4 <bt_mesh_subnet_add+0x38>
    e5e4:	2000060c 	.word	0x2000060c

0000e5e8 <bt_mesh_subnet_kr_phase_set>:
{
    e5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
    e5ea:	f640 4308 	movw	r3, #3080	; 0xc08
    e5ee:	f8ad 3004 	strh.w	r3, [sp, #4]
    e5f2:	2308      	movs	r3, #8
{
    e5f4:	460c      	mov	r4, r1
	const uint8_t valid_transitions[] = {
    e5f6:	f88d 3006 	strb.w	r3, [sp, #6]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    e5fa:	f7ff ff47 	bl	e48c <bt_mesh_subnet_get.part.1>
	if (!sub) {
    e5fe:	4605      	mov	r5, r0
    e600:	b918      	cbnz	r0, e60a <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
    e602:	7020      	strb	r0, [r4, #0]
		return STATUS_INVALID_NETKEY;
    e604:	2004      	movs	r0, #4
}
    e606:	b003      	add	sp, #12
    e608:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
    e60a:	780b      	ldrb	r3, [r1, #0]
    e60c:	7f82      	ldrb	r2, [r0, #30]
    e60e:	4293      	cmp	r3, r2
    e610:	d00d      	beq.n	e62e <bt_mesh_subnet_kr_phase_set+0x46>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    e612:	2a02      	cmp	r2, #2
    e614:	d80d      	bhi.n	e632 <bt_mesh_subnet_kr_phase_set+0x4a>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
    e616:	a902      	add	r1, sp, #8
    e618:	4411      	add	r1, r2
    e61a:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    e61e:	40d9      	lsrs	r1, r3
    e620:	07c9      	lsls	r1, r1, #31
    e622:	d506      	bpl.n	e632 <bt_mesh_subnet_kr_phase_set+0x4a>
		key_refresh(sub, *phase);
    e624:	4619      	mov	r1, r3
    e626:	f019 f99d 	bl	27964 <key_refresh>
		*phase = sub->kr_phase;
    e62a:	7fab      	ldrb	r3, [r5, #30]
    e62c:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
    e62e:	2000      	movs	r0, #0
    e630:	e7e9      	b.n	e606 <bt_mesh_subnet_kr_phase_set+0x1e>
	BT_WARN("Invalid KR transition: 0x%02x -> 0x%02x", sub->kr_phase,
    e632:	4804      	ldr	r0, [pc, #16]	; (e644 <bt_mesh_subnet_kr_phase_set+0x5c>)
    e634:	2157      	movs	r1, #87	; 0x57
    e636:	f015 fe01 	bl	2423c <printk>
	*phase = sub->kr_phase;
    e63a:	7fab      	ldrb	r3, [r5, #30]
    e63c:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
    e63e:	200b      	movs	r0, #11
    e640:	e7e1      	b.n	e606 <bt_mesh_subnet_kr_phase_set+0x1e>
    e642:	bf00      	nop
    e644:	0002e24b 	.word	0x0002e24b

0000e648 <bt_mesh_subnets_get>:
{
    e648:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    e64a:	2400      	movs	r4, #0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    e64c:	4e0b      	ldr	r6, [pc, #44]	; (e67c <bt_mesh_subnets_get+0x34>)
	size_t count = 0;
    e64e:	4623      	mov	r3, r4
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    e650:	f64f 77ff 	movw	r7, #65535	; 0xffff
    e654:	8bb5      	ldrh	r5, [r6, #28]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    e656:	b10c      	cbz	r4, e65c <bt_mesh_subnets_get+0x14>
	return count;
    e658:	4618      	mov	r0, r3
}
    e65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    e65c:	42bd      	cmp	r5, r7
    e65e:	d0fb      	beq.n	e658 <bt_mesh_subnets_get+0x10>
		if (skip) {
    e660:	b112      	cbz	r2, e668 <bt_mesh_subnets_get+0x20>
			skip--;
    e662:	3a01      	subs	r2, #1
			continue;
    e664:	2401      	movs	r4, #1
    e666:	e7f5      	b.n	e654 <bt_mesh_subnets_get+0xc>
		if (count >= max) {
    e668:	428b      	cmp	r3, r1
    e66a:	d203      	bcs.n	e674 <bt_mesh_subnets_get+0x2c>
		net_idxs[count++] = sub->net_idx;
    e66c:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
    e670:	3301      	adds	r3, #1
    e672:	e7f7      	b.n	e664 <bt_mesh_subnets_get+0x1c>
			return -ENOMEM;
    e674:	f06f 000b 	mvn.w	r0, #11
    e678:	e7ef      	b.n	e65a <bt_mesh_subnets_get+0x12>
    e67a:	bf00      	nop
    e67c:	2000060c 	.word	0x2000060c

0000e680 <bt_mesh_subnet_set>:

int bt_mesh_subnet_set(uint16_t net_idx, uint8_t kr_phase,
		       const uint8_t old_key[16], const uint8_t new_key[16])
{
    e680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == net_idx) {
    e682:	4c16      	ldr	r4, [pc, #88]	; (e6dc <bt_mesh_subnet_set+0x5c>)
{
    e684:	461d      	mov	r5, r3
		if (subnets[i].net_idx == net_idx) {
    e686:	8ba3      	ldrh	r3, [r4, #28]
    e688:	4298      	cmp	r0, r3
{
    e68a:	4606      	mov	r6, r0
    e68c:	460f      	mov	r7, r1
		if (subnets[i].net_idx == net_idx) {
    e68e:	d01f      	beq.n	e6d0 <bt_mesh_subnet_set+0x50>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    e690:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e694:	428b      	cmp	r3, r1
    e696:	d11e      	bne.n	e6d6 <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
		return -EALREADY;
	}

	for (int i = 0; i < ARRAY_SIZE(keys); i++) {
		if (!keys[i]) {
    e698:	b94a      	cbnz	r2, e6ae <bt_mesh_subnet_set+0x2e>
    e69a:	b995      	cbnz	r5, e6c2 <bt_mesh_subnet_set+0x42>
	sub->kr_phase = kr_phase;

	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		sub->node_id = BT_MESH_NODE_IDENTITY_STOPPED;
	} else {
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
    e69c:	2302      	movs	r3, #2
	}

	/* Make sure we have valid beacon data to be sent */
	bt_mesh_beacon_update(sub);
    e69e:	480f      	ldr	r0, [pc, #60]	; (e6dc <bt_mesh_subnet_set+0x5c>)
	sub->net_idx = net_idx;
    e6a0:	83a6      	strh	r6, [r4, #28]
	sub->kr_phase = kr_phase;
    e6a2:	77a7      	strb	r7, [r4, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
    e6a4:	77e3      	strb	r3, [r4, #31]
	bt_mesh_beacon_update(sub);
    e6a6:	f7fe ff0f 	bl	d4c8 <bt_mesh_beacon_update>

	return 0;
    e6aa:	2000      	movs	r0, #0
    e6ac:	e008      	b.n	e6c0 <bt_mesh_subnet_set+0x40>
		if (net_keys_create(&sub->keys[i], keys[i])) {
    e6ae:	4611      	mov	r1, r2
    e6b0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e6b4:	f7ff fea8 	bl	e408 <net_keys_create>
    e6b8:	2800      	cmp	r0, #0
    e6ba:	d0ee      	beq.n	e69a <bt_mesh_subnet_set+0x1a>
			return -EIO;
    e6bc:	f06f 0004 	mvn.w	r0, #4
}
    e6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
    e6c2:	4629      	mov	r1, r5
    e6c4:	4806      	ldr	r0, [pc, #24]	; (e6e0 <bt_mesh_subnet_set+0x60>)
    e6c6:	f7ff fe9f 	bl	e408 <net_keys_create>
    e6ca:	2800      	cmp	r0, #0
    e6cc:	d0e6      	beq.n	e69c <bt_mesh_subnet_set+0x1c>
    e6ce:	e7f5      	b.n	e6bc <bt_mesh_subnet_set+0x3c>
		return -EALREADY;
    e6d0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    e6d4:	e7f4      	b.n	e6c0 <bt_mesh_subnet_set+0x40>
		return -ENOMEM;
    e6d6:	f06f 000b 	mvn.w	r0, #11
    e6da:	e7f1      	b.n	e6c0 <bt_mesh_subnet_set+0x40>
    e6dc:	2000060c 	.word	0x2000060c
    e6e0:	20000682 	.word	0x20000682

0000e6e4 <net_key_set>:
	return false;
}

static int net_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    e6e4:	b570      	push	{r4, r5, r6, lr}
    e6e6:	4614      	mov	r4, r2
    e6e8:	b08a      	sub	sp, #40	; 0x28
    e6ea:	461e      	mov	r6, r3
	struct net_key_val key;
	int err;
	uint16_t net_idx;

	if (!name) {
    e6ec:	b940      	cbnz	r0, e700 <net_key_set+0x1c>
		BT_ERR("Insufficient number of arguments");
    e6ee:	2145      	movs	r1, #69	; 0x45
    e6f0:	4814      	ldr	r0, [pc, #80]	; (e744 <net_key_set+0x60>)
    e6f2:	f015 fda3 	bl	2423c <printk>
    e6f6:	f06f 0401 	mvn.w	r4, #1
	BT_DBG("NetKeyIndex 0x%03x recovered from storage", net_idx);

	return bt_mesh_subnet_set(
		net_idx, key.kr_phase, key.val[0],
		(key.kr_phase != BT_MESH_KR_NORMAL) ? key.val[1] : NULL);
}
    e6fa:	4620      	mov	r0, r4
    e6fc:	b00a      	add	sp, #40	; 0x28
    e6fe:	bd70      	pop	{r4, r5, r6, pc}
	net_idx = strtol(name, NULL, 16);
    e700:	2210      	movs	r2, #16
    e702:	2100      	movs	r1, #0
    e704:	f017 fc3d 	bl	25f82 <strtol>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    e708:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
    e70a:	b285      	uxth	r5, r0
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    e70c:	aa01      	add	r2, sp, #4
    e70e:	4620      	mov	r0, r4
    e710:	4631      	mov	r1, r6
    e712:	f005 f8bd 	bl	13890 <bt_mesh_settings_set>
	if (err) {
    e716:	4604      	mov	r4, r0
    e718:	b120      	cbz	r0, e724 <net_key_set+0x40>
		BT_ERR("Failed to set \'net-key\'");
    e71a:	2145      	movs	r1, #69	; 0x45
    e71c:	480a      	ldr	r0, [pc, #40]	; (e748 <net_key_set+0x64>)
    e71e:	f015 fd8d 	bl	2423c <printk>
		return err;
    e722:	e7ea      	b.n	e6fa <net_key_set+0x16>
		net_idx, key.kr_phase, key.val[0],
    e724:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
    e728:	0859      	lsrs	r1, r3, #1
    e72a:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
    e72e:	bf18      	it	ne
    e730:	f10d 0315 	addne.w	r3, sp, #21
    e734:	f10d 0205 	add.w	r2, sp, #5
    e738:	4628      	mov	r0, r5
    e73a:	f7ff ffa1 	bl	e680 <bt_mesh_subnet_set>
    e73e:	4604      	mov	r4, r0
    e740:	e7db      	b.n	e6fa <net_key_set+0x16>
    e742:	bf00      	nop
    e744:	0002ca06 	.word	0x0002ca06
    e748:	0002e2b2 	.word	0x0002e2b2

0000e74c <bt_mesh_subnet_find>:
{
    e74c:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    e74e:	4807      	ldr	r0, [pc, #28]	; (e76c <bt_mesh_subnet_find+0x20>)
{
    e750:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    e752:	8b84      	ldrh	r4, [r0, #28]
    e754:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e758:	4294      	cmp	r4, r2
    e75a:	d005      	beq.n	e768 <bt_mesh_subnet_find+0x1c>
		if (!cb || cb(&subnets[i], cb_data)) {
    e75c:	b90b      	cbnz	r3, e762 <bt_mesh_subnet_find+0x16>
			return &subnets[i];
    e75e:	4803      	ldr	r0, [pc, #12]	; (e76c <bt_mesh_subnet_find+0x20>)
}
    e760:	bd10      	pop	{r4, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    e762:	4798      	blx	r3
    e764:	2800      	cmp	r0, #0
    e766:	d1fa      	bne.n	e75e <bt_mesh_subnet_find+0x12>
	return NULL;
    e768:	2000      	movs	r0, #0
    e76a:	e7f9      	b.n	e760 <bt_mesh_subnet_find+0x14>
    e76c:	2000060c 	.word	0x2000060c

0000e770 <bt_mesh_subnet_foreach>:
{
    e770:	b508      	push	{r3, lr}
    e772:	4603      	mov	r3, r0
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    e774:	4805      	ldr	r0, [pc, #20]	; (e78c <bt_mesh_subnet_foreach+0x1c>)
    e776:	8b81      	ldrh	r1, [r0, #28]
    e778:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e77c:	4291      	cmp	r1, r2
    e77e:	d002      	beq.n	e786 <bt_mesh_subnet_foreach+0x16>
		cb(&subnets[i]);
    e780:	4798      	blx	r3
		count++;
    e782:	2001      	movs	r0, #1
}
    e784:	bd08      	pop	{r3, pc}
    e786:	2000      	movs	r0, #0
	return count;
    e788:	e7fc      	b.n	e784 <bt_mesh_subnet_foreach+0x14>
    e78a:	bf00      	nop
    e78c:	2000060c 	.word	0x2000060c

0000e790 <bt_mesh_subnet_next>:
	if (sub) {
    e790:	b178      	cbz	r0, e7b2 <bt_mesh_subnet_next+0x22>
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    e792:	4a09      	ldr	r2, [pc, #36]	; (e7b8 <bt_mesh_subnet_next+0x28>)
		sub++;
    e794:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
		sub = &subnets[0];
    e798:	f1a2 01c0 	sub.w	r1, r2, #192	; 0xc0
    e79c:	4293      	cmp	r3, r2
    e79e:	bf08      	it	eq
    e7a0:	460b      	moveq	r3, r1
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    e7a2:	8b98      	ldrh	r0, [r3, #28]
}
    e7a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e7a8:	4290      	cmp	r0, r2
    e7aa:	bf14      	ite	ne
    e7ac:	4618      	movne	r0, r3
    e7ae:	2000      	moveq	r0, #0
    e7b0:	4770      	bx	lr
		sub = &subnets[0];
    e7b2:	4b02      	ldr	r3, [pc, #8]	; (e7bc <bt_mesh_subnet_next+0x2c>)
    e7b4:	e7f5      	b.n	e7a2 <bt_mesh_subnet_next+0x12>
    e7b6:	bf00      	nop
    e7b8:	200006cc 	.word	0x200006cc
    e7bc:	2000060c 	.word	0x2000060c

0000e7c0 <bt_mesh_net_keys_reset>:
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    e7c0:	4804      	ldr	r0, [pc, #16]	; (e7d4 <bt_mesh_net_keys_reset+0x14>)
    e7c2:	8b82      	ldrh	r2, [r0, #28]
    e7c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e7c8:	429a      	cmp	r2, r3
    e7ca:	d001      	beq.n	e7d0 <bt_mesh_net_keys_reset+0x10>
			subnet_del(sub);
    e7cc:	f019 b8b1 	b.w	27932 <subnet_del>
}
    e7d0:	4770      	bx	lr
    e7d2:	bf00      	nop
    e7d4:	2000060c 	.word	0x2000060c

0000e7d8 <bt_mesh_net_cred_find>:
{
    e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e7da:	461d      	mov	r5, r3
}

static inline bool bt_mesh_lpn_waiting_update(void)
{
#if defined(CONFIG_BT_MESH_LOW_POWER)
	return (bt_mesh.lpn.state == BT_MESH_LPN_WAIT_UPDATE);
    e7dc:	4b29      	ldr	r3, [pc, #164]	; (e884 <bt_mesh_net_cred_find+0xac>)
	if (bt_mesh_lpn_waiting_update()) {
    e7de:	f893 c020 	ldrb.w	ip, [r3, #32]
    e7e2:	f1bc 0f08 	cmp.w	ip, #8
{
    e7e6:	4604      	mov	r4, r0
    e7e8:	460e      	mov	r6, r1
    e7ea:	4617      	mov	r7, r2
	if (bt_mesh_lpn_waiting_update()) {
    e7ec:	d124      	bne.n	e838 <bt_mesh_net_cred_find+0x60>
		rx->sub = bt_mesh.lpn.sub;
    e7ee:	f8d3 c078 	ldr.w	ip, [r3, #120]	; 0x78
    e7f2:	f8c0 c000 	str.w	ip, [r0]
			if (!rx->sub->keys[j].valid) {
    e7f6:	f89c c02c 	ldrb.w	ip, [ip, #44]	; 0x2c
    e7fa:	f1bc 0f00 	cmp.w	ip, #0
    e7fe:	d002      	beq.n	e806 <bt_mesh_net_cred_find+0x2e>
			if (cb(rx, in, out, &bt_mesh.lpn.cred[j])) {
    e800:	337c      	adds	r3, #124	; 0x7c
    e802:	47a8      	blx	r5
    e804:	b9b0      	cbnz	r0, e834 <bt_mesh_net_cred_find+0x5c>
			if (!rx->sub->keys[j].valid) {
    e806:	6823      	ldr	r3, [r4, #0]
    e808:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    e80c:	2b00      	cmp	r3, #0
    e80e:	d036      	beq.n	e87e <bt_mesh_net_cred_find+0xa6>
			if (cb(rx, in, out, &bt_mesh.lpn.cred[j])) {
    e810:	4b1d      	ldr	r3, [pc, #116]	; (e888 <bt_mesh_net_cred_find+0xb0>)
    e812:	463a      	mov	r2, r7
    e814:	4631      	mov	r1, r6
    e816:	4620      	mov	r0, r4
    e818:	47a8      	blx	r5
    e81a:	b380      	cbz	r0, e87e <bt_mesh_net_cred_find+0xa6>
		for (j = 0; j < ARRAY_SIZE(bt_mesh.lpn.cred); j++) {
    e81c:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    e81e:	7d23      	ldrb	r3, [r4, #20]
    e820:	f362 0341 	bfi	r3, r2, #1, #1
				rx->friend_cred = 1U;
    e824:	f043 0304 	orr.w	r3, r3, #4
				rx->friend_cred = 0U;
    e828:	7523      	strb	r3, [r4, #20]
				rx->ctx.net_idx = rx->sub->net_idx;
    e82a:	6823      	ldr	r3, [r4, #0]
    e82c:	8b9b      	ldrh	r3, [r3, #28]
    e82e:	80a3      	strh	r3, [r4, #4]
				return true;
    e830:	2001      	movs	r0, #1
}
    e832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (j = 0; j < ARRAY_SIZE(bt_mesh.lpn.cred); j++) {
    e834:	2200      	movs	r2, #0
    e836:	e7f2      	b.n	e81e <bt_mesh_net_cred_find+0x46>
		rx->sub = &subnets[i];
    e838:	4b14      	ldr	r3, [pc, #80]	; (e88c <bt_mesh_net_cred_find+0xb4>)
    e83a:	6003      	str	r3, [r0, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    e83c:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
    e840:	f64f 7cff 	movw	ip, #65535	; 0xffff
    e844:	45e6      	cmp	lr, ip
    e846:	d01a      	beq.n	e87e <bt_mesh_net_cred_find+0xa6>
			if (!rx->sub->keys[j].valid) {
    e848:	f893 c02c 	ldrb.w	ip, [r3, #44]	; 0x2c
    e84c:	f1bc 0f00 	cmp.w	ip, #0
    e850:	d002      	beq.n	e858 <bt_mesh_net_cred_find+0x80>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    e852:	333d      	adds	r3, #61	; 0x3d
    e854:	47a8      	blx	r5
    e856:	b980      	cbnz	r0, e87a <bt_mesh_net_cred_find+0xa2>
			if (!rx->sub->keys[j].valid) {
    e858:	6823      	ldr	r3, [r4, #0]
    e85a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    e85e:	b172      	cbz	r2, e87e <bt_mesh_net_cred_find+0xa6>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    e860:	3387      	adds	r3, #135	; 0x87
    e862:	463a      	mov	r2, r7
    e864:	4631      	mov	r1, r6
    e866:	4620      	mov	r0, r4
    e868:	47a8      	blx	r5
    e86a:	b140      	cbz	r0, e87e <bt_mesh_net_cred_find+0xa6>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    e86c:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    e86e:	7d23      	ldrb	r3, [r4, #20]
    e870:	f362 0341 	bfi	r3, r2, #1, #1
				rx->friend_cred = 0U;
    e874:	f36f 0382 	bfc	r3, #2, #1
    e878:	e7d6      	b.n	e828 <bt_mesh_net_cred_find+0x50>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    e87a:	2200      	movs	r2, #0
    e87c:	e7f7      	b.n	e86e <bt_mesh_net_cred_find+0x96>
		return false;
    e87e:	2000      	movs	r0, #0
    e880:	e7d7      	b.n	e832 <bt_mesh_net_cred_find+0x5a>
    e882:	bf00      	nop
    e884:	200013a8 	.word	0x200013a8
    e888:	20001445 	.word	0x20001445
    e88c:	2000060c 	.word	0x2000060c

0000e890 <bt_mesh_subnet_pending_store>:

BT_MESH_SETTINGS_DEFINE(subnet, "NetKey", net_key_set);

void bt_mesh_subnet_pending_store(void)
{
    e890:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(net_key_updates); i++) {
		struct net_key_update *update = &net_key_updates[i];

		if (!update->valid) {
    e892:	4c09      	ldr	r4, [pc, #36]	; (e8b8 <bt_mesh_subnet_pending_store+0x28>)
    e894:	7863      	ldrb	r3, [r4, #1]
    e896:	06da      	lsls	r2, r3, #27
    e898:	d50a      	bpl.n	e8b0 <bt_mesh_subnet_pending_store+0x20>
			continue;
		}

		if (update->clear) {
    e89a:	8820      	ldrh	r0, [r4, #0]
    e89c:	069b      	lsls	r3, r3, #26
    e89e:	f3c0 000b 	ubfx	r0, r0, #0, #12
    e8a2:	d506      	bpl.n	e8b2 <bt_mesh_subnet_pending_store+0x22>
			clear_net_key(update->key_idx);
    e8a4:	f7ff fd72 	bl	e38c <clear_net_key>
		} else {
			store_subnet(update->key_idx);
		}

		update->valid = 0U;
    e8a8:	7863      	ldrb	r3, [r4, #1]
    e8aa:	f36f 1304 	bfc	r3, #4, #1
    e8ae:	7063      	strb	r3, [r4, #1]
	}
}
    e8b0:	bd10      	pop	{r4, pc}
			store_subnet(update->key_idx);
    e8b2:	f7ff fdf5 	bl	e4a0 <store_subnet>
    e8b6:	e7f7      	b.n	e8a8 <bt_mesh_subnet_pending_store+0x18>
    e8b8:	20003514 	.word	0x20003514

0000e8bc <clear_app_key>:

	return NULL;
}

static void clear_app_key(uint16_t app_idx)
{
    e8bc:	b510      	push	{r4, lr}
    e8be:	b086      	sub	sp, #24
	char path[20];
	int err;

	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    e8c0:	4603      	mov	r3, r0
{
    e8c2:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    e8c4:	4a07      	ldr	r2, [pc, #28]	; (e8e4 <clear_app_key+0x28>)
    e8c6:	2114      	movs	r1, #20
    e8c8:	a801      	add	r0, sp, #4
    e8ca:	f015 fcc4 	bl	24256 <snprintk>
	err = settings_delete(path);
    e8ce:	a801      	add	r0, sp, #4
    e8d0:	f016 f8f4 	bl	24abc <settings_delete>
	if (err) {
    e8d4:	b120      	cbz	r0, e8e0 <clear_app_key+0x24>
		BT_ERR("Failed to clear AppKeyIndex 0x%03x", app_idx);
    e8d6:	4622      	mov	r2, r4
    e8d8:	2145      	movs	r1, #69	; 0x45
    e8da:	4803      	ldr	r0, [pc, #12]	; (e8e8 <clear_app_key+0x2c>)
    e8dc:	f015 fcae 	bl	2423c <printk>
	} else {
		BT_DBG("Cleared AppKeyIndex 0x%03x", app_idx);
	}
}
    e8e0:	b006      	add	sp, #24
    e8e2:	bd10      	pop	{r4, pc}
    e8e4:	0002e47e 	.word	0x0002e47e
    e8e8:	0002e490 	.word	0x0002e490

0000e8ec <app_key_evt>:

	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_APP_KEYS_PENDING);
}

static void app_key_evt(struct app_key *app, enum bt_mesh_key_evt evt)
{
    e8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    e8f0:	4e0d      	ldr	r6, [pc, #52]	; (e928 <app_key_evt+0x3c>)
    e8f2:	4c0e      	ldr	r4, [pc, #56]	; (e92c <app_key_evt+0x40>)
    e8f4:	4f0e      	ldr	r7, [pc, #56]	; (e930 <app_key_evt+0x44>)
{
    e8f6:	4605      	mov	r5, r0
    e8f8:	4689      	mov	r9, r1
    e8fa:	46b0      	mov	r8, r6
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    e8fc:	42b4      	cmp	r4, r6
    e8fe:	d908      	bls.n	e912 <app_key_evt+0x26>
    e900:	4639      	mov	r1, r7
    e902:	480c      	ldr	r0, [pc, #48]	; (e934 <app_key_evt+0x48>)
    e904:	22b2      	movs	r2, #178	; 0xb2
    e906:	f015 fc99 	bl	2423c <printk>
    e90a:	21b2      	movs	r1, #178	; 0xb2
    e90c:	4638      	mov	r0, r7
    e90e:	f015 ff47 	bl	247a0 <assert_post_action>
    e912:	4544      	cmp	r4, r8
    e914:	d301      	bcc.n	e91a <app_key_evt+0x2e>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    e916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    e91a:	f854 3b04 	ldr.w	r3, [r4], #4
    e91e:	8829      	ldrh	r1, [r5, #0]
    e920:	8868      	ldrh	r0, [r5, #2]
    e922:	464a      	mov	r2, r9
    e924:	4798      	blx	r3
    e926:	e7e9      	b.n	e8fc <app_key_evt+0x10>
    e928:	0002a768 	.word	0x0002a768
    e92c:	0002a764 	.word	0x0002a764
    e930:	0002e3dd 	.word	0x0002e3dd
    e934:	0002bced 	.word	0x0002bced

0000e938 <store_app_key>:
{
    e938:	b530      	push	{r4, r5, lr}
		if (apps[i].app_idx == app_idx) {
    e93a:	4c18      	ldr	r4, [pc, #96]	; (e99c <store_app_key+0x64>)
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    e93c:	4a18      	ldr	r2, [pc, #96]	; (e9a0 <store_app_key+0x68>)
{
    e93e:	b08f      	sub	sp, #60	; 0x3c
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    e940:	4603      	mov	r3, r0
{
    e942:	4605      	mov	r5, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
    e944:	2114      	movs	r1, #20
    e946:	4668      	mov	r0, sp
    e948:	f015 fc85 	bl	24256 <snprintk>
		if (apps[i].app_idx == app_idx) {
    e94c:	8863      	ldrh	r3, [r4, #2]
    e94e:	42ab      	cmp	r3, r5
    e950:	d006      	beq.n	e960 <store_app_key+0x28>
		BT_WARN("ApKeyIndex 0x%03x not found", app_idx);
    e952:	4814      	ldr	r0, [pc, #80]	; (e9a4 <store_app_key+0x6c>)
    e954:	462a      	mov	r2, r5
    e956:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    e958:	f015 fc70 	bl	2423c <printk>
}
    e95c:	b00f      	add	sp, #60	; 0x3c
    e95e:	bd30      	pop	{r4, r5, pc}
	key.net_idx = app->net_idx,
    e960:	8823      	ldrh	r3, [r4, #0]
    e962:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(key.val[0], app->keys[0].val, 16);
    e966:	2210      	movs	r2, #16
	key.updated = app->updated,
    e968:	7923      	ldrb	r3, [r4, #4]
    e96a:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
    e96e:	1da1      	adds	r1, r4, #6
    e970:	f10d 0017 	add.w	r0, sp, #23
    e974:	f017 fbf4 	bl	26160 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
    e978:	2210      	movs	r2, #16
    e97a:	f104 0117 	add.w	r1, r4, #23
    e97e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    e982:	f017 fbed 	bl	26160 <memcpy>
	err = settings_save_one(path, &key, sizeof(key));
    e986:	2223      	movs	r2, #35	; 0x23
    e988:	a905      	add	r1, sp, #20
    e98a:	4668      	mov	r0, sp
    e98c:	f7f6 fc78 	bl	5280 <settings_save_one>
	if (err) {
    e990:	2800      	cmp	r0, #0
    e992:	d0e3      	beq.n	e95c <store_app_key+0x24>
		BT_ERR("Failed to store AppKey %s value", log_strdup(path));
    e994:	466a      	mov	r2, sp
    e996:	2145      	movs	r1, #69	; 0x45
    e998:	4803      	ldr	r0, [pc, #12]	; (e9a8 <store_app_key+0x70>)
    e99a:	e7dd      	b.n	e958 <store_app_key+0x20>
    e99c:	20000bda 	.word	0x20000bda
    e9a0:	0002e47e 	.word	0x0002e47e
    e9a4:	0002e4b8 	.word	0x0002e4b8
    e9a8:	0002e4d9 	.word	0x0002e4d9

0000e9ac <update_app_key_settings>:
		if (update->key_idx == key_idx) {
    e9ac:	4a11      	ldr	r2, [pc, #68]	; (e9f4 <update_app_key_settings+0x48>)
		if (!update->valid) {
    e9ae:	7853      	ldrb	r3, [r2, #1]
{
    e9b0:	b470      	push	{r4, r5, r6}
		if (update->key_idx == key_idx) {
    e9b2:	8814      	ldrh	r4, [r2, #0]
		if (!update->valid) {
    e9b4:	f013 0f10 	tst.w	r3, #16
	uint8_t clear = store ? 0U : 1U;
    e9b8:	f081 0501 	eor.w	r5, r1, #1
		if (update->key_idx == key_idx) {
    e9bc:	f3c4 040b 	ubfx	r4, r4, #0, #12
		if (!update->valid) {
    e9c0:	d10f      	bne.n	e9e2 <update_app_key_settings+0x36>
	free_slot->valid = 1U;
    e9c2:	f043 0310 	orr.w	r3, r3, #16
    e9c6:	7053      	strb	r3, [r2, #1]
	free_slot->key_idx = app_idx;
    e9c8:	8813      	ldrh	r3, [r2, #0]
    e9ca:	f360 030b 	bfi	r3, r0, #0, #12
    e9ce:	8013      	strh	r3, [r2, #0]
	free_slot->clear = clear;
    e9d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		update->clear = clear;
    e9d4:	f365 1345 	bfi	r3, r5, #5, #1
    e9d8:	7053      	strb	r3, [r2, #1]
		bt_mesh_settings_store_schedule(
    e9da:	2002      	movs	r0, #2
}
    e9dc:	bc70      	pop	{r4, r5, r6}
		bt_mesh_settings_store_schedule(
    e9de:	f004 bf79 	b.w	138d4 <bt_mesh_settings_store_schedule>
		if (update->key_idx == key_idx) {
    e9e2:	4284      	cmp	r4, r0
    e9e4:	d0f6      	beq.n	e9d4 <update_app_key_settings+0x28>
		if (store) {
    e9e6:	b111      	cbz	r1, e9ee <update_app_key_settings+0x42>
}
    e9e8:	bc70      	pop	{r4, r5, r6}
			store_app_key(app_idx);
    e9ea:	f7ff bfa5 	b.w	e938 <store_app_key>
}
    e9ee:	bc70      	pop	{r4, r5, r6}
			clear_app_key(app_idx);
    e9f0:	f7ff bf64 	b.w	e8bc <clear_app_key>
    e9f4:	20003516 	.word	0x20003516

0000e9f8 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    e9f8:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    e9fc:	b538      	push	{r3, r4, r5, lr}
    e9fe:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    ea00:	d031      	beq.n	ea66 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
	}

	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct app_key *app = &apps[i];

		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    ea02:	4c19      	ldr	r4, [pc, #100]	; (ea68 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>)
    ea04:	8862      	ldrh	r2, [r4, #2]
    ea06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ea0a:	429a      	cmp	r2, r3
    ea0c:	d02b      	beq.n	ea66 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
			continue;
		}

		if (app->net_idx != sub->net_idx) {
    ea0e:	8822      	ldrh	r2, [r4, #0]
    ea10:	8b83      	ldrh	r3, [r0, #28]
    ea12:	429a      	cmp	r2, r3
    ea14:	d127      	bne.n	ea66 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
			continue;
		}

		if (evt == BT_MESH_KEY_DELETED) {
    ea16:	2d01      	cmp	r5, #1
    ea18:	d104      	bne.n	ea24 <subnet_evt+0x2c>
			app_key_del(app);
    ea1a:	4620      	mov	r0, r4
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    ea1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_del(app);
    ea20:	f019 b863 	b.w	27aea <app_key_del>
		} else if (evt == BT_MESH_KEY_REVOKED) {
    ea24:	2d04      	cmp	r5, #4
    ea26:	d119      	bne.n	ea5c <subnet_evt+0x64>
	if (!app->updated) {
    ea28:	7923      	ldrb	r3, [r4, #4]
    ea2a:	b1e3      	cbz	r3, ea66 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    ea2c:	2211      	movs	r2, #17
    ea2e:	f104 0116 	add.w	r1, r4, #22
    ea32:	1d60      	adds	r0, r4, #5
    ea34:	f017 fb94 	bl	26160 <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    ea38:	2211      	movs	r2, #17
    ea3a:	2100      	movs	r1, #0
    ea3c:	f104 0016 	add.w	r0, r4, #22
    ea40:	f017 fbb8 	bl	261b4 <memset>
	app->updated = false;
    ea44:	2300      	movs	r3, #0
		update_app_key_settings(app->app_idx, true);
    ea46:	2101      	movs	r1, #1
    ea48:	8860      	ldrh	r0, [r4, #2]
	app->updated = false;
    ea4a:	7123      	strb	r3, [r4, #4]
		update_app_key_settings(app->app_idx, true);
    ea4c:	f7ff ffae 	bl	e9ac <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_REVOKED);
    ea50:	4629      	mov	r1, r5
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    ea52:	4620      	mov	r0, r4
}
    ea54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    ea58:	f7ff bf48 	b.w	e8ec <app_key_evt>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    ea5c:	2d03      	cmp	r5, #3
    ea5e:	d102      	bne.n	ea66 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
    ea60:	7923      	ldrb	r3, [r4, #4]
    ea62:	2b00      	cmp	r3, #0
    ea64:	d1f5      	bne.n	ea52 <subnet_evt+0x5a>
}
    ea66:	bd38      	pop	{r3, r4, r5, pc}
    ea68:	20000bda 	.word	0x20000bda

0000ea6c <bt_mesh_app_key_add>:
{
    ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea70:	4680      	mov	r8, r0
	if (!bt_mesh_subnet_get(net_idx)) {
    ea72:	4608      	mov	r0, r1
{
    ea74:	460f      	mov	r7, r1
    ea76:	4616      	mov	r6, r2
	if (!bt_mesh_subnet_get(net_idx)) {
    ea78:	f019 f835 	bl	27ae6 <bt_mesh_subnet_get>
    ea7c:	b380      	cbz	r0, eae0 <bt_mesh_app_key_add+0x74>
		if (apps[i].app_idx == app_idx) {
    ea7e:	4d1b      	ldr	r5, [pc, #108]	; (eaec <bt_mesh_app_key_add+0x80>)
    ea80:	886b      	ldrh	r3, [r5, #2]
    ea82:	4598      	cmp	r8, r3
    ea84:	d00b      	beq.n	ea9e <bt_mesh_app_key_add+0x32>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    ea86:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ea8a:	4293      	cmp	r3, r2
    ea8c:	d12a      	bne.n	eae4 <bt_mesh_app_key_add+0x78>
			const uint8_t net_id[16], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
    ea8e:	1d69      	adds	r1, r5, #5
    ea90:	4630      	mov	r0, r6
    ea92:	f001 ffd5 	bl	10a40 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
    ea96:	4604      	mov	r4, r0
    ea98:	b178      	cbz	r0, eaba <bt_mesh_app_key_add+0x4e>
		return STATUS_CANNOT_SET;
    ea9a:	200f      	movs	r0, #15
    ea9c:	e00b      	b.n	eab6 <bt_mesh_app_key_add+0x4a>
		if (app->net_idx != net_idx) {
    ea9e:	882b      	ldrh	r3, [r5, #0]
    eaa0:	42bb      	cmp	r3, r7
    eaa2:	d121      	bne.n	eae8 <bt_mesh_app_key_add+0x7c>
		if (memcmp(key, app->keys[0].val, 16)) {
    eaa4:	2210      	movs	r2, #16
    eaa6:	1da9      	adds	r1, r5, #6
    eaa8:	4630      	mov	r0, r6
    eaaa:	f017 fb32 	bl	26112 <memcmp>
		return STATUS_SUCCESS;
    eaae:	2800      	cmp	r0, #0
    eab0:	bf14      	ite	ne
    eab2:	2006      	movne	r0, #6
    eab4:	2000      	moveq	r0, #0
}
    eab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(app->keys[0].val, key, 16);
    eaba:	2210      	movs	r2, #16
	app->updated = false;
    eabc:	7128      	strb	r0, [r5, #4]
	memcpy(app->keys[0].val, key, 16);
    eabe:	4631      	mov	r1, r6
    eac0:	1da8      	adds	r0, r5, #6
	app->net_idx = net_idx;
    eac2:	802f      	strh	r7, [r5, #0]
	app->app_idx = app_idx;
    eac4:	f8a5 8002 	strh.w	r8, [r5, #2]
	memcpy(app->keys[0].val, key, 16);
    eac8:	f017 fb4a 	bl	26160 <memcpy>
		update_app_key_settings(app->app_idx, true);
    eacc:	2101      	movs	r1, #1
    eace:	8868      	ldrh	r0, [r5, #2]
    ead0:	f7ff ff6c 	bl	e9ac <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_ADDED);
    ead4:	4628      	mov	r0, r5
    ead6:	4621      	mov	r1, r4
    ead8:	f7ff ff08 	bl	e8ec <app_key_evt>
	return STATUS_SUCCESS;
    eadc:	4620      	mov	r0, r4
    eade:	e7ea      	b.n	eab6 <bt_mesh_app_key_add+0x4a>
		return STATUS_INVALID_NETKEY;
    eae0:	2004      	movs	r0, #4
    eae2:	e7e8      	b.n	eab6 <bt_mesh_app_key_add+0x4a>
		return STATUS_INSUFF_RESOURCES;
    eae4:	2005      	movs	r0, #5
    eae6:	e7e6      	b.n	eab6 <bt_mesh_app_key_add+0x4a>
			return STATUS_INVALID_BINDING;
    eae8:	2011      	movs	r0, #17
    eaea:	e7e4      	b.n	eab6 <bt_mesh_app_key_add+0x4a>
    eaec:	20000bda 	.word	0x20000bda

0000eaf0 <bt_mesh_app_key_update>:
{
    eaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (apps[i].app_idx == app_idx) {
    eaf2:	4b1f      	ldr	r3, [pc, #124]	; (eb70 <bt_mesh_app_key_update+0x80>)
{
    eaf4:	4617      	mov	r7, r2
		if (apps[i].app_idx == app_idx) {
    eaf6:	885a      	ldrh	r2, [r3, #2]
    eaf8:	4282      	cmp	r2, r0
    eafa:	461d      	mov	r5, r3
    eafc:	d131      	bne.n	eb62 <bt_mesh_app_key_update+0x72>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
    eafe:	8818      	ldrh	r0, [r3, #0]
    eb00:	f64f 73ff 	movw	r3, #65535	; 0xffff
    eb04:	4299      	cmp	r1, r3
    eb06:	d001      	beq.n	eb0c <bt_mesh_app_key_update+0x1c>
    eb08:	4288      	cmp	r0, r1
    eb0a:	d12c      	bne.n	eb66 <bt_mesh_app_key_update+0x76>
	sub = bt_mesh_subnet_get(app->net_idx);
    eb0c:	f018 ffeb 	bl	27ae6 <bt_mesh_subnet_get>
	if (!sub) {
    eb10:	b358      	cbz	r0, eb6a <bt_mesh_app_key_update+0x7a>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
    eb12:	7f86      	ldrb	r6, [r0, #30]
    eb14:	2e01      	cmp	r6, #1
    eb16:	d001      	beq.n	eb1c <bt_mesh_app_key_update+0x2c>
		return STATUS_CANNOT_UPDATE;
    eb18:	200b      	movs	r0, #11
}
    eb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app->updated) {
    eb1c:	792b      	ldrb	r3, [r5, #4]
    eb1e:	b14b      	cbz	r3, eb34 <bt_mesh_app_key_update+0x44>
		if (memcmp(app->keys[1].val, key, 16)) {
    eb20:	2210      	movs	r2, #16
    eb22:	4639      	mov	r1, r7
    eb24:	4813      	ldr	r0, [pc, #76]	; (eb74 <bt_mesh_app_key_update+0x84>)
    eb26:	f017 faf4 	bl	26112 <memcmp>
		return STATUS_SUCCESS;
    eb2a:	2800      	cmp	r0, #0
    eb2c:	bf14      	ite	ne
    eb2e:	2006      	movne	r0, #6
    eb30:	2000      	moveq	r0, #0
    eb32:	e7f2      	b.n	eb1a <bt_mesh_app_key_update+0x2a>
    eb34:	4910      	ldr	r1, [pc, #64]	; (eb78 <bt_mesh_app_key_update+0x88>)
    eb36:	4638      	mov	r0, r7
    eb38:	f001 ff82 	bl	10a40 <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
    eb3c:	4604      	mov	r4, r0
    eb3e:	2800      	cmp	r0, #0
    eb40:	d1ea      	bne.n	eb18 <bt_mesh_app_key_update+0x28>
	memcpy(app->keys[1].val, key, 16);
    eb42:	2210      	movs	r2, #16
    eb44:	4639      	mov	r1, r7
	app->updated = true;
    eb46:	712e      	strb	r6, [r5, #4]
	memcpy(app->keys[1].val, key, 16);
    eb48:	480a      	ldr	r0, [pc, #40]	; (eb74 <bt_mesh_app_key_update+0x84>)
    eb4a:	f017 fb09 	bl	26160 <memcpy>
		update_app_key_settings(app->app_idx, true);
    eb4e:	4631      	mov	r1, r6
    eb50:	8868      	ldrh	r0, [r5, #2]
    eb52:	f7ff ff2b 	bl	e9ac <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
    eb56:	4806      	ldr	r0, [pc, #24]	; (eb70 <bt_mesh_app_key_update+0x80>)
    eb58:	2102      	movs	r1, #2
    eb5a:	f7ff fec7 	bl	e8ec <app_key_evt>
	return STATUS_SUCCESS;
    eb5e:	4620      	mov	r0, r4
    eb60:	e7db      	b.n	eb1a <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_APPKEY;
    eb62:	2003      	movs	r0, #3
    eb64:	e7d9      	b.n	eb1a <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_BINDING;
    eb66:	2011      	movs	r0, #17
    eb68:	e7d7      	b.n	eb1a <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_NETKEY;
    eb6a:	2004      	movs	r0, #4
    eb6c:	e7d5      	b.n	eb1a <bt_mesh_app_key_update+0x2a>
    eb6e:	bf00      	nop
    eb70:	20000bda 	.word	0x20000bda
    eb74:	20000bf1 	.word	0x20000bf1
    eb78:	20000bf0 	.word	0x20000bf0

0000eb7c <bt_mesh_app_key_del>:
{
    eb7c:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    eb7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    eb82:	4299      	cmp	r1, r3
{
    eb84:	4605      	mov	r5, r0
    eb86:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    eb88:	d105      	bne.n	eb96 <bt_mesh_app_key_del+0x1a>
		if (apps[i].app_idx == app_idx) {
    eb8a:	4b0d      	ldr	r3, [pc, #52]	; (ebc0 <bt_mesh_app_key_del+0x44>)
    eb8c:	885a      	ldrh	r2, [r3, #2]
    eb8e:	42aa      	cmp	r2, r5
    eb90:	d008      	beq.n	eba4 <bt_mesh_app_key_del+0x28>
	return STATUS_SUCCESS;
    eb92:	2000      	movs	r0, #0
}
    eb94:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    eb96:	4608      	mov	r0, r1
    eb98:	f018 ffa5 	bl	27ae6 <bt_mesh_subnet_get>
    eb9c:	2800      	cmp	r0, #0
    eb9e:	d1f4      	bne.n	eb8a <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
    eba0:	2004      	movs	r0, #4
    eba2:	e7f7      	b.n	eb94 <bt_mesh_app_key_del+0x18>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
    eba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eba8:	4294      	cmp	r4, r2
    ebaa:	d002      	beq.n	ebb2 <bt_mesh_app_key_del+0x36>
    ebac:	881b      	ldrh	r3, [r3, #0]
    ebae:	42a3      	cmp	r3, r4
    ebb0:	d103      	bne.n	ebba <bt_mesh_app_key_del+0x3e>
	app_key_del(app);
    ebb2:	4803      	ldr	r0, [pc, #12]	; (ebc0 <bt_mesh_app_key_del+0x44>)
    ebb4:	f018 ff99 	bl	27aea <app_key_del>
    ebb8:	e7eb      	b.n	eb92 <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
    ebba:	2011      	movs	r0, #17
    ebbc:	e7ea      	b.n	eb94 <bt_mesh_app_key_del+0x18>
    ebbe:	bf00      	nop
    ebc0:	20000bda 	.word	0x20000bda

0000ebc4 <bt_mesh_app_key_set>:
{
    ebc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (apps[i].app_idx == app_idx) {
    ebc8:	4c1b      	ldr	r4, [pc, #108]	; (ec38 <bt_mesh_app_key_set+0x74>)
{
    ebca:	461d      	mov	r5, r3
		if (apps[i].app_idx == app_idx) {
    ebcc:	8863      	ldrh	r3, [r4, #2]
    ebce:	4298      	cmp	r0, r3
{
    ebd0:	4607      	mov	r7, r0
    ebd2:	4688      	mov	r8, r1
    ebd4:	4616      	mov	r6, r2
		if (apps[i].app_idx == app_idx) {
    ebd6:	d02a      	beq.n	ec2e <bt_mesh_app_key_set+0x6a>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    ebd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ebdc:	4293      	cmp	r3, r2
    ebde:	d128      	bne.n	ec32 <bt_mesh_app_key_set+0x6e>
	memcpy(app->keys[0].val, old_key, 16);
    ebe0:	4631      	mov	r1, r6
    ebe2:	2210      	movs	r2, #16
    ebe4:	1da0      	adds	r0, r4, #6
    ebe6:	f017 fabb 	bl	26160 <memcpy>
    ebea:	4630      	mov	r0, r6
    ebec:	1d61      	adds	r1, r4, #5
    ebee:	f001 ff27 	bl	10a40 <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
    ebf2:	4606      	mov	r6, r0
    ebf4:	b120      	cbz	r0, ec00 <bt_mesh_app_key_set+0x3c>
		return -EIO;
    ebf6:	f06f 0604 	mvn.w	r6, #4
}
    ebfa:	4630      	mov	r0, r6
    ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
    ec00:	b93d      	cbnz	r5, ec12 <bt_mesh_app_key_set+0x4e>
	app->updated = !!new_key;
    ec02:	3500      	adds	r5, #0
    ec04:	bf18      	it	ne
    ec06:	2501      	movne	r5, #1
	app->net_idx = net_idx;
    ec08:	f8a4 8000 	strh.w	r8, [r4]
	app->app_idx = app_idx;
    ec0c:	8067      	strh	r7, [r4, #2]
	app->updated = !!new_key;
    ec0e:	7125      	strb	r5, [r4, #4]
	return 0;
    ec10:	e7f3      	b.n	ebfa <bt_mesh_app_key_set+0x36>
		memcpy(app->keys[1].val, new_key, 16);
    ec12:	4629      	mov	r1, r5
    ec14:	2210      	movs	r2, #16
    ec16:	f104 0017 	add.w	r0, r4, #23
    ec1a:	f017 faa1 	bl	26160 <memcpy>
    ec1e:	f104 0116 	add.w	r1, r4, #22
    ec22:	4628      	mov	r0, r5
    ec24:	f001 ff0c 	bl	10a40 <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
    ec28:	2800      	cmp	r0, #0
    ec2a:	d0ea      	beq.n	ec02 <bt_mesh_app_key_set+0x3e>
    ec2c:	e7e3      	b.n	ebf6 <bt_mesh_app_key_set+0x32>
		return 0;
    ec2e:	2600      	movs	r6, #0
    ec30:	e7e3      	b.n	ebfa <bt_mesh_app_key_set+0x36>
		return -ENOMEM;
    ec32:	f06f 060b 	mvn.w	r6, #11
    ec36:	e7e0      	b.n	ebfa <bt_mesh_app_key_set+0x36>
    ec38:	20000bda 	.word	0x20000bda

0000ec3c <app_key_set>:
	}
}

static int app_key_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    ec3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec3e:	460c      	mov	r4, r1
    ec40:	b08b      	sub	sp, #44	; 0x2c
    ec42:	4616      	mov	r6, r2
    ec44:	461f      	mov	r7, r3
	struct app_key_val key;
	uint16_t app_idx;
	int err;

	if (!name) {
    ec46:	b940      	cbnz	r0, ec5a <app_key_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    ec48:	2145      	movs	r1, #69	; 0x45
    ec4a:	4817      	ldr	r0, [pc, #92]	; (eca8 <app_key_set+0x6c>)
    ec4c:	f015 faf6 	bl	2423c <printk>
    ec50:	f06f 0401 	mvn.w	r4, #1
	}

	BT_DBG("AppKeyIndex 0x%03x recovered from storage", app_idx);

	return 0;
}
    ec54:	4620      	mov	r0, r4
    ec56:	b00b      	add	sp, #44	; 0x2c
    ec58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	app_idx = strtol(name, NULL, 16);
    ec5a:	2210      	movs	r2, #16
    ec5c:	2100      	movs	r1, #0
    ec5e:	f017 f990 	bl	25f82 <strtol>
    ec62:	4605      	mov	r5, r0
	if (!len_rd) {
    ec64:	2c00      	cmp	r4, #0
    ec66:	d0f5      	beq.n	ec54 <app_key_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &key, sizeof(key));
    ec68:	2323      	movs	r3, #35	; 0x23
    ec6a:	aa01      	add	r2, sp, #4
    ec6c:	4639      	mov	r1, r7
    ec6e:	4630      	mov	r0, r6
    ec70:	f004 fe0e 	bl	13890 <bt_mesh_settings_set>
	if (err < 0) {
    ec74:	2800      	cmp	r0, #0
    ec76:	db13      	blt.n	eca0 <app_key_set+0x64>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
    ec78:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ec7c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ec80:	b10b      	cbz	r3, ec86 <app_key_set+0x4a>
    ec82:	f10d 0317 	add.w	r3, sp, #23
    ec86:	f10d 0207 	add.w	r2, sp, #7
    ec8a:	b2a8      	uxth	r0, r5
    ec8c:	f7ff ff9a 	bl	ebc4 <bt_mesh_app_key_set>
	if (err) {
    ec90:	4604      	mov	r4, r0
    ec92:	2800      	cmp	r0, #0
    ec94:	d0de      	beq.n	ec54 <app_key_set+0x18>
		BT_ERR("Failed to set \'app-key\'");
    ec96:	2145      	movs	r1, #69	; 0x45
    ec98:	4804      	ldr	r0, [pc, #16]	; (ecac <app_key_set+0x70>)
    ec9a:	f015 facf 	bl	2423c <printk>
		return err;
    ec9e:	e7d9      	b.n	ec54 <app_key_set+0x18>
		return -EINVAL;
    eca0:	f06f 0415 	mvn.w	r4, #21
    eca4:	e7d6      	b.n	ec54 <app_key_set+0x18>
    eca6:	bf00      	nop
    eca8:	0002ca06 	.word	0x0002ca06
    ecac:	0002e411 	.word	0x0002e411

0000ecb0 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    ecb0:	4b02      	ldr	r3, [pc, #8]	; (ecbc <bt_mesh_app_key_exists+0xc>)
    ecb2:	885b      	ldrh	r3, [r3, #2]
}
    ecb4:	1a1b      	subs	r3, r3, r0
    ecb6:	4258      	negs	r0, r3
    ecb8:	4158      	adcs	r0, r3
    ecba:	4770      	bx	lr
    ecbc:	20000bda 	.word	0x20000bda

0000ecc0 <bt_mesh_app_keys_get>:
{
    ecc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ecc2:	2500      	movs	r5, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    ecc4:	4f0d      	ldr	r7, [pc, #52]	; (ecfc <bt_mesh_app_keys_get+0x3c>)
	size_t count = 0;
    ecc6:	462c      	mov	r4, r5
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    ecc8:	f64f 7cff 	movw	ip, #65535	; 0xffff
    eccc:	887e      	ldrh	r6, [r7, #2]
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    ecce:	b10d      	cbz	r5, ecd4 <bt_mesh_app_keys_get+0x14>
	return count;
    ecd0:	4620      	mov	r0, r4
}
    ecd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    ecd4:	4566      	cmp	r6, ip
    ecd6:	d0fb      	beq.n	ecd0 <bt_mesh_app_keys_get+0x10>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
    ecd8:	4560      	cmp	r0, ip
    ecda:	d002      	beq.n	ece2 <bt_mesh_app_keys_get+0x22>
    ecdc:	883d      	ldrh	r5, [r7, #0]
    ecde:	4285      	cmp	r5, r0
    ece0:	d101      	bne.n	ece6 <bt_mesh_app_keys_get+0x26>
		if (skip) {
    ece2:	b113      	cbz	r3, ecea <bt_mesh_app_keys_get+0x2a>
			skip--;
    ece4:	3b01      	subs	r3, #1
			continue;
    ece6:	2501      	movs	r5, #1
    ece8:	e7f0      	b.n	eccc <bt_mesh_app_keys_get+0xc>
		if (count >= max) {
    ecea:	4294      	cmp	r4, r2
    ecec:	d203      	bcs.n	ecf6 <bt_mesh_app_keys_get+0x36>
		app_idxs[count++] = app->app_idx;
    ecee:	f821 6014 	strh.w	r6, [r1, r4, lsl #1]
    ecf2:	3401      	adds	r4, #1
    ecf4:	e7f7      	b.n	ece6 <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
    ecf6:	f06f 000b 	mvn.w	r0, #11
    ecfa:	e7ea      	b.n	ecd2 <bt_mesh_app_keys_get+0x12>
    ecfc:	20000bda 	.word	0x20000bda

0000ed00 <bt_mesh_keys_resolve>:
{
    ed00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed04:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    ed06:	8842      	ldrh	r2, [r0, #2]
{
    ed08:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    ed0a:	1cd3      	adds	r3, r2, #3
    ed0c:	b29b      	uxth	r3, r3
    ed0e:	2b01      	cmp	r3, #1
{
    ed10:	4604      	mov	r4, r0
    ed12:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    ed14:	d914      	bls.n	ed40 <bt_mesh_keys_resolve+0x40>
		if (apps[i].app_idx == app_idx) {
    ed16:	4c1f      	ldr	r4, [pc, #124]	; (ed94 <bt_mesh_keys_resolve+0x94>)
    ed18:	8863      	ldrh	r3, [r4, #2]
    ed1a:	4293      	cmp	r3, r2
    ed1c:	46a0      	mov	r8, r4
    ed1e:	d12f      	bne.n	ed80 <bt_mesh_keys_resolve+0x80>
	*sub = bt_mesh_subnet_get(app->net_idx);
    ed20:	8820      	ldrh	r0, [r4, #0]
    ed22:	f018 fee0 	bl	27ae6 <bt_mesh_subnet_get>
    ed26:	6038      	str	r0, [r7, #0]
	if (!*sub) {
    ed28:	b178      	cbz	r0, ed4a <bt_mesh_keys_resolve+0x4a>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
    ed2a:	7f83      	ldrb	r3, [r0, #30]
    ed2c:	2b02      	cmp	r3, #2
    ed2e:	d12a      	bne.n	ed86 <bt_mesh_keys_resolve+0x86>
    ed30:	7923      	ldrb	r3, [r4, #4]
    ed32:	b343      	cbz	r3, ed86 <bt_mesh_keys_resolve+0x86>
		*aid = app->keys[1].id;
    ed34:	7da3      	ldrb	r3, [r4, #22]
    ed36:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
    ed38:	3417      	adds	r4, #23
    ed3a:	602c      	str	r4, [r5, #0]
	return 0;
    ed3c:	2000      	movs	r0, #0
    ed3e:	e01d      	b.n	ed7c <bt_mesh_keys_resolve+0x7c>
		*sub = bt_mesh_subnet_get(ctx->net_idx);
    ed40:	8800      	ldrh	r0, [r0, #0]
    ed42:	f018 fed0 	bl	27ae6 <bt_mesh_subnet_get>
    ed46:	6038      	str	r0, [r7, #0]
		if (!*sub) {
    ed48:	b918      	cbnz	r0, ed52 <bt_mesh_keys_resolve+0x52>
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
    ed4a:	8822      	ldrh	r2, [r4, #0]
    ed4c:	4812      	ldr	r0, [pc, #72]	; (ed98 <bt_mesh_keys_resolve+0x98>)
    ed4e:	2157      	movs	r1, #87	; 0x57
    ed50:	e00b      	b.n	ed6a <bt_mesh_keys_resolve+0x6a>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    ed52:	8862      	ldrh	r2, [r4, #2]
    ed54:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    ed58:	429a      	cmp	r2, r3
    ed5a:	d10b      	bne.n	ed74 <bt_mesh_keys_resolve+0x74>
		    !bt_mesh_elem_find(ctx->addr)) {
    ed5c:	88a0      	ldrh	r0, [r4, #4]
    ed5e:	f002 fa5f 	bl	11220 <bt_mesh_elem_find>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    ed62:	b938      	cbnz	r0, ed74 <bt_mesh_keys_resolve+0x74>
				BT_WARN("No DevKey for 0x%04x", ctx->addr);
    ed64:	88a2      	ldrh	r2, [r4, #4]
    ed66:	480d      	ldr	r0, [pc, #52]	; (ed9c <bt_mesh_keys_resolve+0x9c>)
    ed68:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Unknown NetKey 0x%03x", app->net_idx);
    ed6a:	f015 fa67 	bl	2423c <printk>
		return -EINVAL;
    ed6e:	f06f 0015 	mvn.w	r0, #21
    ed72:	e003      	b.n	ed7c <bt_mesh_keys_resolve+0x7c>
			*app_key = bt_mesh.dev_key;
    ed74:	4b0a      	ldr	r3, [pc, #40]	; (eda0 <bt_mesh_keys_resolve+0xa0>)
    ed76:	602b      	str	r3, [r5, #0]
		*aid = 0;
    ed78:	2000      	movs	r0, #0
    ed7a:	7030      	strb	r0, [r6, #0]
}
    ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("Unknown AppKey 0x%03x", ctx->app_idx);
    ed80:	2157      	movs	r1, #87	; 0x57
    ed82:	4808      	ldr	r0, [pc, #32]	; (eda4 <bt_mesh_keys_resolve+0xa4>)
    ed84:	e7f1      	b.n	ed6a <bt_mesh_keys_resolve+0x6a>
		*aid = app->keys[0].id;
    ed86:	f898 3005 	ldrb.w	r3, [r8, #5]
    ed8a:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
    ed8c:	4b06      	ldr	r3, [pc, #24]	; (eda8 <bt_mesh_keys_resolve+0xa8>)
    ed8e:	602b      	str	r3, [r5, #0]
    ed90:	e7d4      	b.n	ed3c <bt_mesh_keys_resolve+0x3c>
    ed92:	bf00      	nop
    ed94:	20000bda 	.word	0x20000bda
    ed98:	0002e42e 	.word	0x0002e42e
    ed9c:	0002e449 	.word	0x0002e449
    eda0:	200014b0 	.word	0x200014b0
    eda4:	0002e463 	.word	0x0002e463
    eda8:	20000be0 	.word	0x20000be0

0000edac <bt_mesh_app_key_find>:
{
    edac:	b570      	push	{r4, r5, r6, lr}
    edae:	4615      	mov	r5, r2
	if (dev_key) {
    edb0:	b180      	cbz	r0, edd4 <bt_mesh_app_key_find+0x28>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    edb2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
    edb6:	2a00      	cmp	r2, #0
    edb8:	dd04      	ble.n	edc4 <bt_mesh_app_key_find+0x18>
			err = cb(rx, bt_mesh.dev_key, cb_data);
    edba:	9a04      	ldr	r2, [sp, #16]
    edbc:	4915      	ldr	r1, [pc, #84]	; (ee14 <bt_mesh_app_key_find+0x68>)
    edbe:	4628      	mov	r0, r5
    edc0:	4798      	blx	r3
			if (!err) {
    edc2:	b120      	cbz	r0, edce <bt_mesh_app_key_find+0x22>
		return BT_MESH_KEY_UNUSED;
    edc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    edc8:	bd70      	pop	{r4, r5, r6, pc}
			cred = &app->keys[0];
    edca:	1d60      	adds	r0, r4, #5
    edcc:	e017      	b.n	edfe <bt_mesh_app_key_find+0x52>
				return BT_MESH_KEY_DEV_LOCAL;
    edce:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    edd2:	e7f9      	b.n	edc8 <bt_mesh_app_key_find+0x1c>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    edd4:	4c10      	ldr	r4, [pc, #64]	; (ee18 <bt_mesh_app_key_find+0x6c>)
    edd6:	8860      	ldrh	r0, [r4, #2]
    edd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    eddc:	4290      	cmp	r0, r2
    edde:	d0f1      	beq.n	edc4 <bt_mesh_app_key_find+0x18>
		if (app->net_idx != rx->sub->net_idx) {
    ede0:	682a      	ldr	r2, [r5, #0]
    ede2:	8820      	ldrh	r0, [r4, #0]
    ede4:	8b92      	ldrh	r2, [r2, #28]
    ede6:	4290      	cmp	r0, r2
    ede8:	d1ec      	bne.n	edc4 <bt_mesh_app_key_find+0x18>
		if (rx->new_key && app->updated) {
    edea:	7d2a      	ldrb	r2, [r5, #20]
    edec:	0792      	lsls	r2, r2, #30
    edee:	d5ec      	bpl.n	edca <bt_mesh_app_key_find+0x1e>
    edf0:	7926      	ldrb	r6, [r4, #4]
			cred = &app->keys[1];
    edf2:	1d60      	adds	r0, r4, #5
    edf4:	f104 0216 	add.w	r2, r4, #22
    edf8:	2e00      	cmp	r6, #0
    edfa:	bf18      	it	ne
    edfc:	4610      	movne	r0, r2
		if (cred->id != aid) {
    edfe:	7802      	ldrb	r2, [r0, #0]
    ee00:	428a      	cmp	r2, r1
    ee02:	d1df      	bne.n	edc4 <bt_mesh_app_key_find+0x18>
		err = cb(rx, cred->val, cb_data);
    ee04:	1c41      	adds	r1, r0, #1
    ee06:	9a04      	ldr	r2, [sp, #16]
    ee08:	4628      	mov	r0, r5
    ee0a:	4798      	blx	r3
		if (err) {
    ee0c:	2800      	cmp	r0, #0
    ee0e:	d1d9      	bne.n	edc4 <bt_mesh_app_key_find+0x18>
		return app->app_idx;
    ee10:	8860      	ldrh	r0, [r4, #2]
    ee12:	e7d9      	b.n	edc8 <bt_mesh_app_key_find+0x1c>
    ee14:	200014b0 	.word	0x200014b0
    ee18:	20000bda 	.word	0x20000bda

0000ee1c <bt_mesh_app_keys_reset>:
		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    ee1c:	4804      	ldr	r0, [pc, #16]	; (ee30 <bt_mesh_app_keys_reset+0x14>)
    ee1e:	8842      	ldrh	r2, [r0, #2]
    ee20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ee24:	429a      	cmp	r2, r3
    ee26:	d001      	beq.n	ee2c <bt_mesh_app_keys_reset+0x10>
			app_key_del(app);
    ee28:	f018 be5f 	b.w	27aea <app_key_del>
}
    ee2c:	4770      	bx	lr
    ee2e:	bf00      	nop
    ee30:	20000bda 	.word	0x20000bda

0000ee34 <bt_mesh_app_key_pending_store>:

BT_MESH_SETTINGS_DEFINE(app, "AppKey", app_key_set);

void bt_mesh_app_key_pending_store(void)
{
    ee34:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(app_key_updates); i++) {
		struct app_key_update *update = &app_key_updates[i];

		if (!update->valid) {
    ee36:	4c09      	ldr	r4, [pc, #36]	; (ee5c <bt_mesh_app_key_pending_store+0x28>)
    ee38:	7863      	ldrb	r3, [r4, #1]
    ee3a:	06da      	lsls	r2, r3, #27
    ee3c:	d50a      	bpl.n	ee54 <bt_mesh_app_key_pending_store+0x20>
			continue;
		}

		if (update->clear) {
    ee3e:	8820      	ldrh	r0, [r4, #0]
    ee40:	069b      	lsls	r3, r3, #26
    ee42:	f3c0 000b 	ubfx	r0, r0, #0, #12
    ee46:	d506      	bpl.n	ee56 <bt_mesh_app_key_pending_store+0x22>
			clear_app_key(update->key_idx);
    ee48:	f7ff fd38 	bl	e8bc <clear_app_key>
		} else {
			store_app_key(update->key_idx);
		}

		update->valid = 0U;
    ee4c:	7863      	ldrb	r3, [r4, #1]
    ee4e:	f36f 1304 	bfc	r3, #4, #1
    ee52:	7063      	strb	r3, [r4, #1]
	}
}
    ee54:	bd10      	pop	{r4, pc}
			store_app_key(update->key_idx);
    ee56:	f7ff fd6f 	bl	e938 <store_app_key>
    ee5a:	e7f7      	b.n	ee4c <bt_mesh_app_key_pending_store+0x18>
    ee5c:	20003516 	.word	0x20003516

0000ee60 <k_delayed_work_submit>:
    ee60:	4601      	mov	r1, r0
    ee62:	4801      	ldr	r0, [pc, #4]	; (ee68 <k_delayed_work_submit+0x8>)
    ee64:	f013 ba80 	b.w	22368 <k_delayed_work_submit_to_queue>
    ee68:	20001988 	.word	0x20001988

0000ee6c <va_set>:
}

#if CONFIG_BT_MESH_LABEL_COUNT > 0
static int va_set(const char *name, size_t len_rd,
		  settings_read_cb read_cb, void *cb_arg)
{
    ee6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee6e:	460c      	mov	r4, r1
    ee70:	b087      	sub	sp, #28
    ee72:	4616      	mov	r6, r2
    ee74:	461f      	mov	r7, r3
	struct va_val va;
	struct virtual_addr *lab;
	uint16_t index;
	int err;

	if (!name) {
    ee76:	b940      	cbnz	r0, ee8a <va_set+0x1e>
		BT_ERR("Insufficient number of arguments");
    ee78:	2145      	movs	r1, #69	; 0x45
    ee7a:	481e      	ldr	r0, [pc, #120]	; (eef4 <va_set+0x88>)
    ee7c:	f015 f9de 	bl	2423c <printk>
		return -ENOENT;
    ee80:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("Restored Virtual Address, addr 0x%04x ref 0x%04x",
	       lab->addr, lab->ref);

	return 0;
}
    ee84:	4620      	mov	r0, r4
    ee86:	b007      	add	sp, #28
    ee88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	index = strtol(name, NULL, 16);
    ee8a:	2210      	movs	r2, #16
    ee8c:	2100      	movs	r1, #0
    ee8e:	f017 f878 	bl	25f82 <strtol>
    ee92:	4605      	mov	r5, r0
	if (len_rd == 0) {
    ee94:	b924      	cbnz	r4, eea0 <va_set+0x34>
		BT_WARN("Mesh Virtual Address length = 0");
    ee96:	4818      	ldr	r0, [pc, #96]	; (eef8 <va_set+0x8c>)
    ee98:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    ee9a:	f015 f9cf 	bl	2423c <printk>
		return 0;
    ee9e:	e7f1      	b.n	ee84 <va_set+0x18>
	err = bt_mesh_settings_set(read_cb, cb_arg, &va, sizeof(va));
    eea0:	2314      	movs	r3, #20
    eea2:	aa01      	add	r2, sp, #4
    eea4:	4639      	mov	r1, r7
    eea6:	4630      	mov	r0, r6
    eea8:	f004 fcf2 	bl	13890 <bt_mesh_settings_set>
	if (err) {
    eeac:	4604      	mov	r4, r0
    eeae:	b110      	cbz	r0, eeb6 <va_set+0x4a>
		BT_ERR("Failed to set \'virtual address\'");
    eeb0:	2145      	movs	r1, #69	; 0x45
    eeb2:	4812      	ldr	r0, [pc, #72]	; (eefc <va_set+0x90>)
    eeb4:	e7f1      	b.n	ee9a <va_set+0x2e>
	if (va.ref == 0) {
    eeb6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    eeba:	b913      	cbnz	r3, eec2 <va_set+0x56>
		BT_WARN("Ignore Mesh Virtual Address ref = 0");
    eebc:	2157      	movs	r1, #87	; 0x57
    eebe:	4810      	ldr	r0, [pc, #64]	; (ef00 <va_set+0x94>)
    eec0:	e7eb      	b.n	ee9a <va_set+0x2e>
	if (index >= ARRAY_SIZE(virtual_addrs)) {
    eec2:	b2ad      	uxth	r5, r5
    eec4:	b135      	cbz	r5, eed4 <va_set+0x68>
		BT_WARN("Out of labels buffers");
    eec6:	2157      	movs	r1, #87	; 0x57
    eec8:	480e      	ldr	r0, [pc, #56]	; (ef04 <va_set+0x98>)
    eeca:	f015 f9b7 	bl	2423c <printk>
		return -ENOBUFS;
    eece:	f06f 0436 	mvn.w	r4, #54	; 0x36
    eed2:	e7d7      	b.n	ee84 <va_set+0x18>
	memcpy(lab->uuid, va.uuid, 16);
    eed4:	4d0c      	ldr	r5, [pc, #48]	; (ef08 <va_set+0x9c>)
    eed6:	2210      	movs	r2, #16
    eed8:	a902      	add	r1, sp, #8
    eeda:	1d28      	adds	r0, r5, #4
    eedc:	f017 f940 	bl	26160 <memcpy>
	lab->addr = va.addr;
    eee0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    eee4:	806b      	strh	r3, [r5, #2]
	lab->ref = va.ref;
    eee6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    eeea:	882b      	ldrh	r3, [r5, #0]
    eeec:	f362 030e 	bfi	r3, r2, #0, #15
    eef0:	802b      	strh	r3, [r5, #0]
	return 0;
    eef2:	e7c7      	b.n	ee84 <va_set+0x18>
    eef4:	0002ca06 	.word	0x0002ca06
    eef8:	0002ea9a 	.word	0x0002ea9a
    eefc:	0002eabf 	.word	0x0002eabf
    ef00:	0002eae4 	.word	0x0002eae4
    ef04:	0002eb0d 	.word	0x0002eb0d
    ef08:	20003518 	.word	0x20003518

0000ef0c <seg_rx_reset>:
{
    ef0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef10:	4604      	mov	r4, r0
	for (i = 0; i <= rx->seg_n; i++) {
    ef12:	2500      	movs	r5, #0
	k_delayed_work_cancel(&rx->ack);
    ef14:	3030      	adds	r0, #48	; 0x30
		k_mem_slab_free(&segs, &rx->seg[i]);
    ef16:	f8df 8048 	ldr.w	r8, [pc, #72]	; ef60 <seg_rx_reset+0x54>
{
    ef1a:	460f      	mov	r7, r1
		rx->seg[i] = NULL;
    ef1c:	46a9      	mov	r9, r5
	k_delayed_work_cancel(&rx->ack);
    ef1e:	f013 fa93 	bl	22448 <k_delayed_work_cancel>
	for (i = 0; i <= rx->seg_n; i++) {
    ef22:	1d21      	adds	r1, r4, #4
		if (!rx->seg[i]) {
    ef24:	460e      	mov	r6, r1
    ef26:	f856 3b04 	ldr.w	r3, [r6], #4
    ef2a:	b123      	cbz	r3, ef36 <seg_rx_reset+0x2a>
		k_mem_slab_free(&segs, &rx->seg[i]);
    ef2c:	4640      	mov	r0, r8
    ef2e:	f011 fc47 	bl	207c0 <k_mem_slab_free>
		rx->seg[i] = NULL;
    ef32:	f846 9c04 	str.w	r9, [r6, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    ef36:	7fe3      	ldrb	r3, [r4, #31]
    ef38:	3501      	adds	r5, #1
    ef3a:	f003 021f 	and.w	r2, r3, #31
    ef3e:	4295      	cmp	r5, r2
    ef40:	4631      	mov	r1, r6
    ef42:	ddef      	ble.n	ef24 <seg_rx_reset+0x18>
	rx->in_use = 0U;
    ef44:	f36f 1386 	bfc	r3, #6, #1
    ef48:	77e3      	strb	r3, [r4, #31]
	if (full_reset) {
    ef4a:	b137      	cbz	r7, ef5a <seg_rx_reset+0x4e>
		rx->seq_auth = 0U;
    ef4c:	2000      	movs	r0, #0
    ef4e:	2100      	movs	r1, #0
    ef50:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    ef54:	2300      	movs	r3, #0
    ef56:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    ef58:	61a3      	str	r3, [r4, #24]
}
    ef5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef5e:	bf00      	nop
    ef60:	20000d28 	.word	0x20000d28

0000ef64 <seg_tx_reset>:
{
    ef64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef68:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    ef6a:	3050      	adds	r0, #80	; 0x50
    ef6c:	f013 fa6c 	bl	22448 <k_delayed_work_cancel>
	tx->cb = NULL;
    ef70:	2500      	movs	r5, #0
	tx->blocked = false;
    ef72:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    ef76:	4f20      	ldr	r7, [pc, #128]	; (eff8 <seg_tx_reset+0x94>)
	tx->sub = NULL;
    ef78:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    ef7a:	2000      	movs	r0, #0
    ef7c:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    ef7e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
	tx->seq_auth = 0U;
    ef82:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	tx->blocked = false;
    ef86:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    ef8a:	63a5      	str	r5, [r4, #56]	; 0x38
	tx->blocked = false;
    ef8c:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    ef90:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    ef92:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    ef94:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    ef98:	b19b      	cbz	r3, efc2 <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    ef9a:	6833      	ldr	r3, [r6, #0]
    ef9c:	b153      	cbz	r3, efb4 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    ef9e:	4631      	mov	r1, r6
    efa0:	4638      	mov	r0, r7
    efa2:	f011 fc0d 	bl	207c0 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    efa6:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    efaa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    efae:	3b01      	subs	r3, #1
    efb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    efb4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    efb8:	3501      	adds	r5, #1
    efba:	42ab      	cmp	r3, r5
    efbc:	f106 0604 	add.w	r6, r6, #4
    efc0:	dae8      	bge.n	ef94 <seg_tx_reset+0x30>
	tx->nack_count = 0;
    efc2:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    efc4:	4b0d      	ldr	r3, [pc, #52]	; (effc <seg_tx_reset+0x98>)
    efc6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    efca:	f3bf 8f5b 	dmb	ish
    efce:	e853 2f00 	ldrex	r2, [r3]
    efd2:	f022 0020 	bic.w	r0, r2, #32
    efd6:	e843 0400 	strex	r4, r0, [r3]
    efda:	2c00      	cmp	r4, #0
    efdc:	d1f7      	bne.n	efce <seg_tx_reset+0x6a>
    efde:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    efe2:	0692      	lsls	r2, r2, #26
    efe4:	d505      	bpl.n	eff2 <seg_tx_reset+0x8e>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    efe6:	f853 0c08 	ldr.w	r0, [r3, #-8]
}
    efea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    efee:	f7fe bd99 	b.w	db24 <bt_mesh_net_iv_update>
}
    eff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eff6:	bf00      	nop
    eff8:	20000d28 	.word	0x20000d28
    effc:	200013b0 	.word	0x200013b0

0000f000 <seg_tx_complete>:
{
    f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f004:	4604      	mov	r4, r0
	void *cb_data = tx->cb_data;
    f006:	e9d0 5712 	ldrd	r5, r7, [r0, #72]	; 0x48
		if (&seg_tx[i] != tx &&
    f00a:	4813      	ldr	r0, [pc, #76]	; (f058 <seg_tx_complete+0x58>)
    f00c:	4284      	cmp	r4, r0
{
    f00e:	460e      	mov	r6, r1
		if (&seg_tx[i] != tx &&
    f010:	d014      	beq.n	f03c <seg_tx_complete+0x3c>
		    seg_tx[i].blocked &&
    f012:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
		if (&seg_tx[i] != tx &&
    f016:	07da      	lsls	r2, r3, #31
    f018:	d510      	bpl.n	f03c <seg_tx_complete+0x3c>
	return (tx->src == src) && (tx->dst == dst);
    f01a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    f01c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    f01e:	4291      	cmp	r1, r2
    f020:	d10c      	bne.n	f03c <seg_tx_complete+0x3c>
    f022:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
    f024:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    f026:	4291      	cmp	r1, r2
    f028:	d108      	bne.n	f03c <seg_tx_complete+0x3c>
		blocked->blocked = false;
    f02a:	f36f 0300 	bfc	r3, #0, #1
    f02e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
		k_delayed_work_submit(&blocked->retransmit, K_NO_WAIT);
    f032:	2200      	movs	r2, #0
    f034:	2300      	movs	r3, #0
    f036:	3050      	adds	r0, #80	; 0x50
    f038:	f7ff ff12 	bl	ee60 <k_delayed_work_submit>
	seg_tx_reset(tx);
    f03c:	4620      	mov	r0, r4
    f03e:	f7ff ff91 	bl	ef64 <seg_tx_reset>
	if (cb && cb->end) {
    f042:	b135      	cbz	r5, f052 <seg_tx_complete+0x52>
    f044:	686b      	ldr	r3, [r5, #4]
    f046:	b123      	cbz	r3, f052 <seg_tx_complete+0x52>
		cb->end(err, cb_data);
    f048:	4639      	mov	r1, r7
    f04a:	4630      	mov	r0, r6
}
    f04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb->end(err, cb_data);
    f050:	4718      	bx	r3
}
    f052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f056:	bf00      	nop
    f058:	20001520 	.word	0x20001520

0000f05c <seg_tx_send_unacked>:
{
    f05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!tx->nack_count) {
    f060:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
{
    f064:	b086      	sub	sp, #24
    f066:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    f068:	b3bb      	cbz	r3, f0da <seg_tx_send_unacked+0x7e>
		.net_idx = tx->sub->net_idx,
    f06a:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    f06c:	9103      	str	r1, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    f06e:	2300      	movs	r3, #0
    f070:	2501      	movs	r5, #1
    f072:	f8cd 3006 	str.w	r3, [sp, #6]
    f076:	8b8b      	ldrh	r3, [r1, #28]
    f078:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
    f07c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
	struct bt_mesh_msg_ctx ctx = {
    f07e:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
    f082:	f88d 500a 	strb.w	r5, [sp, #10]
    f086:	f890 5044 	ldrb.w	r5, [r0, #68]	; 0x44
    f08a:	f88d 500b 	strb.w	r5, [sp, #11]
	struct bt_mesh_net_tx net_tx = {
    f08e:	f8ad 1014 	strh.w	r1, [sp, #20]
    f092:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
    f096:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
    f09a:	f88d 1016 	strb.w	r1, [sp, #22]
    f09e:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_msg_ctx ctx = {
    f0a2:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    f0a6:	f365 0187 	bfi	r1, r5, #2, #6
	struct bt_mesh_msg_ctx ctx = {
    f0aa:	f8ad 2002 	strh.w	r2, [sp, #2]
		.addr = tx->dst,
    f0ae:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
	struct bt_mesh_net_tx net_tx = {
    f0b0:	f88d 1017 	strb.w	r1, [sp, #23]
	if (!tx->attempts) {
    f0b4:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
	struct bt_mesh_msg_ctx ctx = {
    f0b8:	f8ad 2004 	strh.w	r2, [sp, #4]
	struct bt_mesh_net_tx net_tx = {
    f0bc:	f8cd d010 	str.w	sp, [sp, #16]
	if (!tx->attempts) {
    f0c0:	b971      	cbnz	r1, f0e0 <seg_tx_send_unacked+0x84>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    f0c2:	b212      	sxth	r2, r2
    f0c4:	2a00      	cmp	r2, #0
    f0c6:	dd06      	ble.n	f0d6 <seg_tx_send_unacked+0x7a>
			BT_ERR("Ran out of retransmit attempts");
    f0c8:	2145      	movs	r1, #69	; 0x45
    f0ca:	485b      	ldr	r0, [pc, #364]	; (f238 <seg_tx_send_unacked+0x1dc>)
    f0cc:	f015 f8b6 	bl	2423c <printk>
			seg_tx_complete(tx, -ETIMEDOUT);
    f0d0:	f06f 013b 	mvn.w	r1, #59	; 0x3b
    f0d4:	4620      	mov	r0, r4
			seg_tx_complete(tx, 0);
    f0d6:	f7ff ff93 	bl	f000 <seg_tx_complete>
}
    f0da:	b006      	add	sp, #24
    f0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	tx->sending = 1U;
    f0e0:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    f0e4:	f8df 8154 	ldr.w	r8, [pc, #340]	; f23c <seg_tx_send_unacked+0x1e0>
	tx->sending = 1U;
    f0e8:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    f0ec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    f0f0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    f0f4:	429a      	cmp	r2, r3
    f0f6:	d208      	bcs.n	f10a <seg_tx_send_unacked+0xae>
	tx->seg_o = 0U;
    f0f8:	2300      	movs	r3, #0
    f0fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	tx->attempts--;
    f0fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    f102:	3b01      	subs	r3, #1
    f104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    f108:	e05f      	b.n	f1ca <seg_tx_send_unacked+0x16e>
		if (!tx->seg[tx->seg_o]) {
    f10a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    f10e:	685b      	ldr	r3, [r3, #4]
    f110:	2b00      	cmp	r3, #0
    f112:	f000 808b 	beq.w	f22c <seg_tx_send_unacked+0x1d0>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
    f116:	2200      	movs	r2, #0
    f118:	2300      	movs	r3, #0
    f11a:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
    f11e:	2001      	movs	r0, #1
    f120:	f7fe f810 	bl	d144 <bt_mesh_adv_create>
		if (!seg) {
    f124:	4682      	mov	sl, r0
    f126:	2800      	cmp	r0, #0
    f128:	d04f      	beq.n	f1ca <seg_tx_send_unacked+0x16e>
	net_buf_simple_reserve(&buf->b, reserve);
    f12a:	f100 0508 	add.w	r5, r0, #8
    f12e:	2109      	movs	r1, #9
    f130:	4628      	mov	r0, r5
    f132:	f00e f931 	bl	1d398 <net_buf_simple_reserve>
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    f136:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    f13a:	f894 6041 	ldrb.w	r6, [r4, #65]	; 0x41
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    f13e:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
	net_buf_simple_add_u8(buf, tx->hdr);
    f142:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
		return BT_MESH_APP_SEG_SDU_MAX;
    f146:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    f14a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		return BT_MESH_APP_SEG_SDU_MAX;
    f14c:	bf14      	ite	ne
    f14e:	2708      	movne	r7, #8
    f150:	270c      	moveq	r7, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    f152:	fb07 3316 	mls	r3, r7, r6, r3
    f156:	429f      	cmp	r7, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    f158:	4628      	mov	r0, r5
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    f15a:	bfa8      	it	ge
    f15c:	b2df      	uxtbge	r7, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    f15e:	f01a fc2a 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    f162:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    f166:	f3c9 090c 	ubfx	r9, r9, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    f16a:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f16e:	ea4f 1199 	mov.w	r1, r9, lsr #6
    f172:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    f176:	4628      	mov	r0, r5
    f178:	f01a fc1d 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
    f17c:	08f1      	lsrs	r1, r6, #3
    f17e:	ea41 0189 	orr.w	r1, r1, r9, lsl #2
    f182:	b2c9      	uxtb	r1, r1
    f184:	4628      	mov	r0, r5
    f186:	f01a fc16 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    f18a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    f18e:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    f192:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    f196:	b2c9      	uxtb	r1, r1
    f198:	4628      	mov	r0, r5
    f19a:	f01a fc0c 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    f19e:	463a      	mov	r2, r7
    f1a0:	6871      	ldr	r1, [r6, #4]
    f1a2:	4628      	mov	r0, r5
    f1a4:	f01a fbfb 	bl	2999e <net_buf_simple_add_mem>
		tx->seg_pending++;
    f1a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    f1ac:	3301      	adds	r3, #1
    f1ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    f1b2:	4642      	mov	r2, r8
    f1b4:	4623      	mov	r3, r4
    f1b6:	4651      	mov	r1, sl
    f1b8:	a803      	add	r0, sp, #12
    f1ba:	f7fe fde5 	bl	dd88 <bt_mesh_net_send>
		if (err) {
    f1be:	b3a8      	cbz	r0, f22c <seg_tx_send_unacked+0x1d0>
			tx->seg_pending--;
    f1c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    f1c4:	3b01      	subs	r3, #1
    f1c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	if (!tx->seg_pending) {
    f1ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    f1ce:	bb33      	cbnz	r3, f21e <seg_tx_send_unacked+0x1c2>
				      K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    f1d0:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	bfc1      	itttt	gt
    f1d8:	f894 1044 	ldrbgt.w	r1, [r4, #68]	; 0x44
    f1dc:	2232      	movgt	r2, #50	; 0x32
    f1de:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    f1e2:	fb12 3201 	smlabbgt	r2, r2, r1, r3
    f1e6:	bfce      	itee	gt
    f1e8:	17d3      	asrgt	r3, r2, #31
    f1ea:	2232      	movle	r2, #50	; 0x32
    f1ec:	2300      	movle	r3, #0
    f1ee:	03d9      	lsls	r1, r3, #15
    f1f0:	03d0      	lsls	r0, r2, #15
    f1f2:	f240 36e7 	movw	r6, #999	; 0x3e7
    f1f6:	1980      	adds	r0, r0, r6
    f1f8:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
    f1fc:	f04f 0600 	mov.w	r6, #0
    f200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f204:	f04f 0300 	mov.w	r3, #0
    f208:	eb46 0101 	adc.w	r1, r6, r1
    f20c:	f7f2 fe1c 	bl	1e48 <__aeabi_uldivmod>
		k_delayed_work_submit(&tx->retransmit,
    f210:	f104 0550 	add.w	r5, r4, #80	; 0x50
    f214:	4602      	mov	r2, r0
    f216:	460b      	mov	r3, r1
    f218:	4628      	mov	r0, r5
    f21a:	f7ff fe21 	bl	ee60 <k_delayed_work_submit>
	tx->sending = 0U;
    f21e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    f222:	f36f 1304 	bfc	r3, #4, #1
    f226:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    f22a:	e756      	b.n	f0da <seg_tx_send_unacked+0x7e>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    f22c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    f230:	3301      	adds	r3, #1
    f232:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    f236:	e759      	b.n	f0ec <seg_tx_send_unacked+0x90>
    f238:	0002e9c7 	.word	0x0002e9c7
    f23c:	0002b1d8 	.word	0x0002b1d8

0000f240 <ctl_recv>:
{
    f240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (ctl_op) {
    f244:	f011 067f 	ands.w	r6, r1, #127	; 0x7f
{
    f248:	4682      	mov	sl, r0
    f24a:	4614      	mov	r4, r2
    f24c:	4698      	mov	r8, r3
	switch (ctl_op) {
    f24e:	d00e      	beq.n	f26e <ctl_recv+0x2e>
    f250:	2e0a      	cmp	r6, #10
    f252:	f000 809c 	beq.w	f38e <ctl_recv+0x14e>
	if (!rx->local_match) {
    f256:	7d03      	ldrb	r3, [r0, #20]
    f258:	f013 0540 	ands.w	r5, r3, #64	; 0x40
    f25c:	d010      	beq.n	f280 <ctl_recv+0x40>
	if (ctl_op == TRANS_CTL_OP_FRIEND_OFFER) {
    f25e:	2e04      	cmp	r6, #4
    f260:	f040 809a 	bne.w	f398 <ctl_recv+0x158>
		return bt_mesh_lpn_friend_offer(rx, buf);
    f264:	4611      	mov	r1, r2
}
    f266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return bt_mesh_lpn_friend_offer(rx, buf);
    f26a:	f004 bfd7 	b.w	1421c <bt_mesh_lpn_friend_offer>
	if (buf->len < 6) {
    f26e:	8893      	ldrh	r3, [r2, #4]
    f270:	2b05      	cmp	r3, #5
    f272:	d808      	bhi.n	f286 <ctl_recv+0x46>
		BT_ERR("Too short ack message");
    f274:	485d      	ldr	r0, [pc, #372]	; (f3ec <ctl_recv+0x1ac>)
    f276:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Received ack for group seg");
    f278:	f014 ffe0 	bl	2423c <printk>
		return -EINVAL;
    f27c:	f06f 0515 	mvn.w	r5, #21
}
    f280:	4628      	mov	r0, r5
    f282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    f286:	4610      	mov	r0, r2
    f288:	f01a fb53 	bl	29932 <net_buf_simple_pull_be16>
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    f28c:	f3c0 058f 	ubfx	r5, r0, #2, #16
	obo = seq_zero >> 15;
    f290:	f3c0 39cf 	ubfx	r9, r0, #15, #16
	ack = net_buf_simple_pull_be32(buf);
    f294:	4620      	mov	r0, r4
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    f296:	4c56      	ldr	r4, [pc, #344]	; (f3f0 <ctl_recv+0x1b0>)
	ack = net_buf_simple_pull_be32(buf);
    f298:	f01a fb6c 	bl	29974 <net_buf_simple_pull_be32>
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    f29c:	f8ba e008 	ldrh.w	lr, [sl, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    f2a0:	e9d4 ca0c 	ldrd	ip, sl, [r4, #48]	; 0x30
	ack = net_buf_simple_pull_be32(buf);
    f2a4:	4607      	mov	r7, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    f2a6:	2100      	movs	r1, #0
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    f2a8:	f3c5 000c 	ubfx	r0, r5, #0, #13
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    f2ac:	f3cc 020c 	ubfx	r2, ip, #0, #13
    f2b0:	b280      	uxth	r0, r0
    f2b2:	428e      	cmp	r6, r1
    f2b4:	bf08      	it	eq
    f2b6:	4282      	cmpeq	r2, r0
    f2b8:	f040 8095 	bne.w	f3e6 <ctl_recv+0x1a6>
		if (tx->dst == addr) {
    f2bc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    f2be:	4573      	cmp	r3, lr
    f2c0:	d00d      	beq.n	f2de <ctl_recv+0x9e>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    f2c2:	f1b9 0f00 	cmp.w	r9, #0
    f2c6:	f000 808e 	beq.w	f3e6 <ctl_recv+0x1a6>
    f2ca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    f2ce:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
    f2d2:	3301      	adds	r3, #1
    f2d4:	429a      	cmp	r2, r3
    f2d6:	f040 8086 	bne.w	f3e6 <ctl_recv+0x1a6>
			tx->dst = addr;
    f2da:	f8a4 e03a 	strh.w	lr, [r4, #58]	; 0x3a
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    f2de:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
    f2e2:	2b00      	cmp	r3, #0
    f2e4:	dc02      	bgt.n	f2ec <ctl_recv+0xac>
		BT_ERR("Received ack for group seg");
    f2e6:	2145      	movs	r1, #69	; 0x45
    f2e8:	4842      	ldr	r0, [pc, #264]	; (f3f4 <ctl_recv+0x1b4>)
    f2ea:	e7c5      	b.n	f278 <ctl_recv+0x38>
	*seq_auth = tx->seq_auth;
    f2ec:	e9c8 ca00 	strd	ip, sl, [r8]
	if (!ack) {
    f2f0:	b957      	cbnz	r7, f308 <ctl_recv+0xc8>
		BT_WARN("SDU canceled");
    f2f2:	2157      	movs	r1, #87	; 0x57
    f2f4:	4840      	ldr	r0, [pc, #256]	; (f3f8 <ctl_recv+0x1b8>)
    f2f6:	f014 ffa1 	bl	2423c <printk>
		seg_tx_complete(tx, -ECANCELED);
    f2fa:	f06f 0147 	mvn.w	r1, #71	; 0x47
    f2fe:	483c      	ldr	r0, [pc, #240]	; (f3f0 <ctl_recv+0x1b0>)
    f300:	f7ff fe7e 	bl	f000 <seg_tx_complete>
		return 0;
    f304:	463d      	mov	r5, r7
    f306:	e7bb      	b.n	f280 <ctl_recv+0x40>
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    f308:	fab7 f387 	clz	r3, r7
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    f30c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    f310:	f1c3 031f 	rsb	r3, r3, #31
    f314:	4293      	cmp	r3, r2
    f316:	d902      	bls.n	f31e <ctl_recv+0xde>
		BT_ERR("Too large segment number in ack");
    f318:	2145      	movs	r1, #69	; 0x45
    f31a:	4838      	ldr	r0, [pc, #224]	; (f3fc <ctl_recv+0x1bc>)
    f31c:	e7ac      	b.n	f278 <ctl_recv+0x38>
	k_delayed_work_cancel(&tx->retransmit);
    f31e:	4838      	ldr	r0, [pc, #224]	; (f400 <ctl_recv+0x1c0>)
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    f320:	f8df 80f0 	ldr.w	r8, [pc, #240]	; f414 <ctl_recv+0x1d4>
	k_delayed_work_cancel(&tx->retransmit);
    f324:	f013 f890 	bl	22448 <k_delayed_work_cancel>
	tx->seg[seg_idx] = NULL;
    f328:	f04f 0900 	mov.w	r9, #0
		ack &= ~BIT(bit - 1);
    f32c:	f04f 0a01 	mov.w	sl, #1
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    f330:	2f00      	cmp	r7, #0
    f332:	fa97 f6a7 	rbit	r6, r7
    f336:	fab6 f686 	clz	r6, r6
    f33a:	bf08      	it	eq
    f33c:	f04f 36ff 	moveq.w	r6, #4294967295
	while ((bit = find_lsb_set(ack))) {
    f340:	1c75      	adds	r5, r6, #1
    f342:	d106      	bne.n	f352 <ctl_recv+0x112>
	if (tx->nack_count) {
    f344:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    f348:	b1e3      	cbz	r3, f384 <ctl_recv+0x144>
		seg_tx_send_unacked(tx);
    f34a:	4829      	ldr	r0, [pc, #164]	; (f3f0 <ctl_recv+0x1b0>)
    f34c:	f7ff fe86 	bl	f05c <seg_tx_send_unacked>
    f350:	e796      	b.n	f280 <ctl_recv+0x40>
		if (tx->seg[bit - 1]) {
    f352:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    f356:	685b      	ldr	r3, [r3, #4]
    f358:	b17b      	cbz	r3, f37a <ctl_recv+0x13a>
			seg_tx_done(tx, bit - 1);
    f35a:	b2f5      	uxtb	r5, r6
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    f35c:	1c69      	adds	r1, r5, #1
    f35e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    f362:	4640      	mov	r0, r8
    f364:	f011 fa2c 	bl	207c0 <k_mem_slab_free>
	tx->nack_count--;
    f368:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	tx->seg[seg_idx] = NULL;
    f36c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
	tx->nack_count--;
    f370:	3b01      	subs	r3, #1
	tx->seg[seg_idx] = NULL;
    f372:	f8c5 9004 	str.w	r9, [r5, #4]
	tx->nack_count--;
    f376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		ack &= ~BIT(bit - 1);
    f37a:	fa0a f606 	lsl.w	r6, sl, r6
    f37e:	ea27 0706 	bic.w	r7, r7, r6
    f382:	e7d5      	b.n	f330 <ctl_recv+0xf0>
		seg_tx_complete(tx, 0);
    f384:	4629      	mov	r1, r5
    f386:	481a      	ldr	r0, [pc, #104]	; (f3f0 <ctl_recv+0x1b0>)
    f388:	f7ff fe3a 	bl	f000 <seg_tx_complete>
    f38c:	e778      	b.n	f280 <ctl_recv+0x40>
		return bt_mesh_hb_recv(rx, buf);
    f38e:	4611      	mov	r1, r2
}
    f390:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return bt_mesh_hb_recv(rx, buf);
    f394:	f001 b8de 	b.w	10554 <bt_mesh_hb_recv>
	if (rx->ctx.addr == bt_mesh.lpn.frnd) {
    f398:	4a1a      	ldr	r2, [pc, #104]	; (f404 <ctl_recv+0x1c4>)
    f39a:	8901      	ldrh	r1, [r0, #8]
    f39c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    f39e:	4291      	cmp	r1, r2
    f3a0:	d10f      	bne.n	f3c2 <ctl_recv+0x182>
		if (ctl_op == TRANS_CTL_OP_FRIEND_CLEAR_CFM) {
    f3a2:	2e06      	cmp	r6, #6
    f3a4:	d104      	bne.n	f3b0 <ctl_recv+0x170>
			return bt_mesh_lpn_friend_clear_cfm(rx, buf);
    f3a6:	4621      	mov	r1, r4
}
    f3a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_lpn_friend_clear_cfm(rx, buf);
    f3ac:	f004 bf94 	b.w	142d8 <bt_mesh_lpn_friend_clear_cfm>
		if (!rx->friend_cred) {
    f3b0:	075b      	lsls	r3, r3, #29
    f3b2:	d402      	bmi.n	f3ba <ctl_recv+0x17a>
			BT_WARN("Message from friend with wrong credentials");
    f3b4:	2157      	movs	r1, #87	; 0x57
    f3b6:	4814      	ldr	r0, [pc, #80]	; (f408 <ctl_recv+0x1c8>)
    f3b8:	e75e      	b.n	f278 <ctl_recv+0x38>
		switch (ctl_op) {
    f3ba:	2e02      	cmp	r6, #2
    f3bc:	d009      	beq.n	f3d2 <ctl_recv+0x192>
    f3be:	2e09      	cmp	r6, #9
    f3c0:	d00c      	beq.n	f3dc <ctl_recv+0x19c>
	BT_WARN("Unhandled TransOpCode 0x%02x", ctl_op);
    f3c2:	4632      	mov	r2, r6
    f3c4:	2157      	movs	r1, #87	; 0x57
    f3c6:	4811      	ldr	r0, [pc, #68]	; (f40c <ctl_recv+0x1cc>)
    f3c8:	f014 ff38 	bl	2423c <printk>
	return -ENOENT;
    f3cc:	f06f 0501 	mvn.w	r5, #1
    f3d0:	e756      	b.n	f280 <ctl_recv+0x40>
			return bt_mesh_lpn_friend_update(rx, buf);
    f3d2:	4621      	mov	r1, r4
}
    f3d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_lpn_friend_update(rx, buf);
    f3d8:	f005 b8fa 	b.w	145d0 <bt_mesh_lpn_friend_update>
			return bt_mesh_lpn_friend_sub_cfm(rx, buf);
    f3dc:	4621      	mov	r1, r4
}
    f3de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return bt_mesh_lpn_friend_sub_cfm(rx, buf);
    f3e2:	f005 b847 	b.w	14474 <bt_mesh_lpn_friend_sub_cfm>
		BT_WARN("No matching TX context for ack");
    f3e6:	2157      	movs	r1, #87	; 0x57
    f3e8:	4809      	ldr	r0, [pc, #36]	; (f410 <ctl_recv+0x1d0>)
    f3ea:	e745      	b.n	f278 <ctl_recv+0x38>
    f3ec:	0002e8c1 	.word	0x0002e8c1
    f3f0:	20001520 	.word	0x20001520
    f3f4:	0002e8dc 	.word	0x0002e8dc
    f3f8:	0002e8fc 	.word	0x0002e8fc
    f3fc:	0002e90e 	.word	0x0002e90e
    f400:	20001570 	.word	0x20001570
    f404:	200013a8 	.word	0x200013a8
    f408:	0002e933 	.word	0x0002e933
    f40c:	0002e963 	.word	0x0002e963
    f410:	0002e985 	.word	0x0002e985
    f414:	20000d28 	.word	0x20000d28

0000f418 <send_seg>:
{
    f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (seg_tx[i].nack_count) {
    f41c:	4c5e      	ldr	r4, [pc, #376]	; (f598 <send_seg+0x180>)
    f41e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
    f422:	f894 e042 	ldrb.w	lr, [r4, #66]	; 0x42
{
    f426:	b085      	sub	sp, #20
    f428:	460e      	mov	r6, r1
		if (seg_tx[i].nack_count) {
    f42a:	6841      	ldr	r1, [r0, #4]
{
    f42c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    f42e:	888f      	ldrh	r7, [r1, #4]
		if (seg_tx[i].nack_count) {
    f430:	f1be 0f00 	cmp.w	lr, #0
    f434:	d008      	beq.n	f448 <send_seg+0x30>
		BT_ERR("No multi-segment message contexts available");
    f436:	4859      	ldr	r0, [pc, #356]	; (f59c <send_seg+0x184>)
    f438:	2145      	movs	r1, #69	; 0x45
    f43a:	f014 feff 	bl	2423c <printk>
		return -EBUSY;
    f43e:	f06f 000f 	mvn.w	r0, #15
}
    f442:	b005      	add	sp, #20
    f444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ctl_op) {
    f448:	2d00      	cmp	r5, #0
    f44a:	d06d      	beq.n	f528 <send_seg+0x110>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    f44c:	7829      	ldrb	r1, [r5, #0]
    f44e:	f061 017f 	orn	r1, r1, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    f452:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
	tx->src = net_tx->src;
    f456:	f8a4 c038 	strh.w	ip, [r4, #56]	; 0x38
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    f45a:	f8b6 c004 	ldrh.w	ip, [r6, #4]
	tx->dst = net_tx->ctx->addr;
    f45e:	8767      	strh	r7, [r4, #58]	; 0x3a
		return BT_MESH_APP_SEG_SDU_MAX;
    f460:	2d00      	cmp	r5, #0
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    f462:	f8df 8140 	ldr.w	r8, [pc, #320]	; f5a4 <send_seg+0x18c>
	tx->len = sdu->len;
    f466:	f8a4 c03c 	strh.w	ip, [r4, #60]	; 0x3c
	tx->seg_o = 0;
    f46a:	f04f 0500 	mov.w	r5, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    f46e:	f10c 31ff 	add.w	r1, ip, #4294967295
		return BT_MESH_APP_SEG_SDU_MAX;
    f472:	bf14      	ite	ne
    f474:	2708      	movne	r7, #8
    f476:	270c      	moveq	r7, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    f478:	fb91 f1f7 	sdiv	r1, r1, r7
    f47c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
	tx->nack_count = tx->seg_n + 1;
    f480:	f101 0101 	add.w	r1, r1, #1
    f484:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
	tx->seg_o = 0;
    f488:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    f48c:	f8d8 1000 	ldr.w	r1, [r8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f490:	f3bf 8f5b 	dmb	ish
    f494:	f8d8 c008 	ldr.w	ip, [r8, #8]
    f498:	f3bf 8f5b 	dmb	ish
    f49c:	f3cc 0c80 	ubfx	ip, ip, #2, #1
    f4a0:	eba1 0c0c 	sub.w	ip, r1, ip
    f4a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    f4a8:	f8df a0fc 	ldr.w	sl, [pc, #252]	; f5a8 <send_seg+0x190>
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    f4ac:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
    f4b0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
    f4b4:	e9c4 1e0c 	strd	r1, lr, [r4, #48]	; 0x30
	tx->sub = net_tx->sub;
    f4b8:	6801      	ldr	r1, [r0, #0]
    f4ba:	6021      	str	r1, [r4, #0]
	tx->cb_data = cb_data;
    f4bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
    f4c0:	f04f 0304 	mov.w	r3, #4
    f4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	tx->xmit = net_tx->xmit;
    f4c8:	7a83      	ldrb	r3, [r0, #10]
    f4ca:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	tx->aszmic = net_tx->aszmic;
    f4ce:	7ac2      	ldrb	r2, [r0, #11]
    f4d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
    f4d4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f4d8:	f362 0382 	bfi	r3, r2, #2, #1
	tx->friend_cred = net_tx->friend_cred;
    f4dc:	7ac2      	ldrb	r2, [r0, #11]
	tx->seg_pending = 0;
    f4de:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	tx->friend_cred = net_tx->friend_cred;
    f4e2:	f3c2 0200 	ubfx	r2, r2, #0, #1
    f4e6:	f362 1345 	bfi	r3, r2, #5, #1
	tx->ctl = !!ctl_op;
    f4ea:	f003 03f6 	and.w	r3, r3, #246	; 0xf6
    f4ee:	bf14      	ite	ne
    f4f0:	2201      	movne	r2, #1
    f4f2:	462a      	moveq	r2, r5
    f4f4:	f362 0341 	bfi	r3, r2, #1, #1
    f4f8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	tx->ttl = net_tx->ctx->send_ttl;
    f4fc:	6843      	ldr	r3, [r0, #4]
    f4fe:	7adb      	ldrb	r3, [r3, #11]
    f500:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	for (seg_o = 0U; sdu->len; seg_o++) {
    f504:	f8b6 9004 	ldrh.w	r9, [r6, #4]
    f508:	f1b9 0f00 	cmp.w	r9, #0
    f50c:	d118      	bne.n	f540 <send_seg+0x128>
	seg_tx_send_unacked(tx);
    f50e:	4822      	ldr	r0, [pc, #136]	; (f598 <send_seg+0x180>)
    f510:	f7ff fda4 	bl	f05c <seg_tx_send_unacked>
	return bt_mesh.lpn.established;
    f514:	f898 002c 	ldrb.w	r0, [r8, #44]	; 0x2c
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) &&
    f518:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f51c:	2800      	cmp	r0, #0
    f51e:	d090      	beq.n	f442 <send_seg+0x2a>
		bt_mesh_lpn_poll();
    f520:	f005 f93c 	bl	1479c <bt_mesh_lpn_poll>
	return 0;
    f524:	4648      	mov	r0, r9
    f526:	e78c      	b.n	f442 <send_seg+0x2a>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    f528:	8849      	ldrh	r1, [r1, #2]
    f52a:	3103      	adds	r1, #3
    f52c:	b289      	uxth	r1, r1
    f52e:	2901      	cmp	r1, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    f530:	bf85      	ittet	hi
    f532:	7ac1      	ldrbhi	r1, [r0, #11]
    f534:	f3c1 0185 	ubfxhi	r1, r1, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    f538:	2180      	movls	r1, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    f53a:	f061 013f 	ornhi	r1, r1, #63	; 0x3f
    f53e:	e788      	b.n	f452 <send_seg+0x3a>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    f540:	2200      	movs	r2, #0
    f542:	2300      	movs	r3, #0
    f544:	a903      	add	r1, sp, #12
    f546:	4650      	mov	r0, sl
    f548:	f011 f8e0 	bl	2070c <k_mem_slab_alloc>
		if (err) {
    f54c:	f105 0b01 	add.w	fp, r5, #1
    f550:	b148      	cbz	r0, f566 <send_seg+0x14e>
			BT_ERR("Out of segment buffers");
    f552:	2145      	movs	r1, #69	; 0x45
    f554:	4812      	ldr	r0, [pc, #72]	; (f5a0 <send_seg+0x188>)
    f556:	f014 fe71 	bl	2423c <printk>
			seg_tx_reset(tx);
    f55a:	480f      	ldr	r0, [pc, #60]	; (f598 <send_seg+0x180>)
    f55c:	f7ff fd02 	bl	ef64 <seg_tx_reset>
			return -ENOBUFS;
    f560:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f564:	e76d      	b.n	f442 <send_seg+0x2a>
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    f566:	f8b6 9004 	ldrh.w	r9, [r6, #4]
    f56a:	9b03      	ldr	r3, [sp, #12]
    f56c:	9301      	str	r3, [sp, #4]
    f56e:	45b9      	cmp	r9, r7
    f570:	bf28      	it	cs
    f572:	46b9      	movcs	r9, r7
    f574:	4649      	mov	r1, r9
    f576:	4630      	mov	r0, r6
    f578:	f00e f8f0 	bl	1d75c <net_buf_simple_pull_mem>
    f57c:	9b01      	ldr	r3, [sp, #4]
		tx->seg[seg_o] = buf;
    f57e:	b2ed      	uxtb	r5, r5
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    f580:	4601      	mov	r1, r0
		tx->seg[seg_o] = buf;
    f582:	eb04 0585 	add.w	r5, r4, r5, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    f586:	4618      	mov	r0, r3
    f588:	464a      	mov	r2, r9
    f58a:	f016 fde9 	bl	26160 <memcpy>
		tx->seg[seg_o] = buf;
    f58e:	9b03      	ldr	r3, [sp, #12]
    f590:	606b      	str	r3, [r5, #4]
		if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
    f592:	465d      	mov	r5, fp
    f594:	e7b6      	b.n	f504 <send_seg+0xec>
    f596:	bf00      	nop
    f598:	20001520 	.word	0x20001520
    f59c:	0002ea14 	.word	0x0002ea14
    f5a0:	0002ea45 	.word	0x0002ea45
    f5a4:	200013a8 	.word	0x200013a8
    f5a8:	20000d28 	.word	0x20000d28

0000f5ac <send_unseg>:
{
    f5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5b0:	4605      	mov	r5, r0
    f5b2:	4688      	mov	r8, r1
    f5b4:	4691      	mov	r9, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    f5b6:	7a81      	ldrb	r1, [r0, #10]
{
    f5b8:	9f08      	ldr	r7, [sp, #32]
    f5ba:	469a      	mov	sl, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
    f5bc:	2200      	movs	r2, #0
    f5be:	2300      	movs	r3, #0
    f5c0:	2001      	movs	r0, #1
    f5c2:	f7fd fdbf 	bl	d144 <bt_mesh_adv_create>
	if (!buf) {
    f5c6:	4606      	mov	r6, r0
    f5c8:	b338      	cbz	r0, f61a <send_unseg+0x6e>
    f5ca:	f100 0408 	add.w	r4, r0, #8
    f5ce:	2109      	movs	r1, #9
    f5d0:	4620      	mov	r0, r4
    f5d2:	f00d fee1 	bl	1d398 <net_buf_simple_reserve>
	if (ctl_op) {
    f5d6:	b1a7      	cbz	r7, f602 <send_unseg+0x56>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
    f5d8:	7839      	ldrb	r1, [r7, #0]
	return net_buf_simple_add_u8(&buf->b, val);
    f5da:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    f5de:	4620      	mov	r0, r4
    f5e0:	f01a f9e9 	bl	299b6 <net_buf_simple_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f5e4:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    f5e8:	f8d8 1000 	ldr.w	r1, [r8]
    f5ec:	4620      	mov	r0, r4
    f5ee:	f01a f9d6 	bl	2999e <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    f5f2:	4653      	mov	r3, sl
    f5f4:	464a      	mov	r2, r9
    f5f6:	4631      	mov	r1, r6
    f5f8:	4628      	mov	r0, r5
}
    f5fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
    f5fe:	f7fe bbc3 	b.w	dd88 <bt_mesh_net_send>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
    f602:	686b      	ldr	r3, [r5, #4]
    f604:	885b      	ldrh	r3, [r3, #2]
    f606:	3303      	adds	r3, #3
    f608:	b29b      	uxth	r3, r3
    f60a:	2b01      	cmp	r3, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
    f60c:	bf85      	ittet	hi
    f60e:	7ae9      	ldrbhi	r1, [r5, #11]
    f610:	0889      	lsrhi	r1, r1, #2
	return net_buf_simple_add_u8(&buf->b, val);
    f612:	4639      	movls	r1, r7
    f614:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
    f618:	e7e1      	b.n	f5de <send_unseg+0x32>
		BT_ERR("Out of network buffers");
    f61a:	2145      	movs	r1, #69	; 0x45
    f61c:	4803      	ldr	r0, [pc, #12]	; (f62c <send_unseg+0x80>)
    f61e:	f014 fe0d 	bl	2423c <printk>
}
    f622:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f62a:	bf00      	nop
    f62c:	0002ea61 	.word	0x0002ea61

0000f630 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    f630:	4b03      	ldr	r3, [pc, #12]	; (f640 <bt_mesh_tx_in_progress+0x10>)
    f632:	f893 0042 	ldrb.w	r0, [r3, #66]	; 0x42
}
    f636:	3000      	adds	r0, #0
    f638:	bf18      	it	ne
    f63a:	2001      	movne	r0, #1
    f63c:	4770      	bx	lr
    f63e:	bf00      	nop
    f640:	20001520 	.word	0x20001520

0000f644 <bt_mesh_ctl_send>:
{
    f644:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    f646:	6846      	ldr	r6, [r0, #4]
{
    f648:	461d      	mov	r5, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    f64a:	7af3      	ldrb	r3, [r6, #11]
{
    f64c:	b089      	sub	sp, #36	; 0x24
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    f64e:	2bff      	cmp	r3, #255	; 0xff
{
    f650:	4604      	mov	r4, r0
    f652:	4617      	mov	r7, r2
    f654:	f88d 100f 	strb.w	r1, [sp, #15]
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    f658:	d119      	bne.n	f68e <bt_mesh_ctl_send+0x4a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    f65a:	f7fd fc5d 	bl	cf18 <bt_mesh_default_ttl_get>
    f65e:	72f0      	strb	r0, [r6, #11]
	net_buf_simple_init_with_data(&buf, data, data_len);
    f660:	462a      	mov	r2, r5
    f662:	4639      	mov	r1, r7
    f664:	a805      	add	r0, sp, #20
    f666:	f01a f932 	bl	298ce <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
    f66a:	6863      	ldr	r3, [r4, #4]
    f66c:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
    f66e:	bf84      	itt	hi
    f670:	2201      	movhi	r2, #1
    f672:	729a      	strbhi	r2, [r3, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
    f674:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f678:	805a      	strh	r2, [r3, #2]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    f67a:	889a      	ldrh	r2, [r3, #4]
    f67c:	b122      	cbz	r2, f688 <bt_mesh_ctl_send+0x44>
    f67e:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
    f682:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    f686:	d20c      	bcs.n	f6a2 <bt_mesh_ctl_send+0x5e>
		BT_ERR("Invalid destination address");
    f688:	2145      	movs	r1, #69	; 0x45
    f68a:	480f      	ldr	r0, [pc, #60]	; (f6c8 <bt_mesh_ctl_send+0x84>)
    f68c:	e003      	b.n	f696 <bt_mesh_ctl_send+0x52>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    f68e:	061b      	lsls	r3, r3, #24
    f690:	d5e6      	bpl.n	f660 <bt_mesh_ctl_send+0x1c>
		BT_ERR("TTL too large (max 127)");
    f692:	480e      	ldr	r0, [pc, #56]	; (f6cc <bt_mesh_ctl_send+0x88>)
    f694:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid destination address");
    f696:	f014 fdd1 	bl	2423c <printk>
		return -EINVAL;
    f69a:	f06f 0015 	mvn.w	r0, #21
}
    f69e:	b009      	add	sp, #36	; 0x24
    f6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tx->ctx->send_rel) {
    f6a2:	7a9a      	ldrb	r2, [r3, #10]
    f6a4:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    f6a8:	9300      	str	r3, [sp, #0]
    f6aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (tx->ctx->send_rel) {
    f6ac:	b12a      	cbz	r2, f6ba <bt_mesh_ctl_send+0x76>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
    f6ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f6b0:	a905      	add	r1, sp, #20
    f6b2:	4620      	mov	r0, r4
    f6b4:	f7ff feb0 	bl	f418 <send_seg>
    f6b8:	e7f1      	b.n	f69e <bt_mesh_ctl_send+0x5a>
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
    f6ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f6bc:	a905      	add	r1, sp, #20
    f6be:	4620      	mov	r0, r4
    f6c0:	f7ff ff74 	bl	f5ac <send_unseg>
    f6c4:	e7eb      	b.n	f69e <bt_mesh_ctl_send+0x5a>
    f6c6:	bf00      	nop
    f6c8:	0002e53b 	.word	0x0002e53b
    f6cc:	0002e51e 	.word	0x0002e51e

0000f6d0 <send_ack>:
{
    f6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6d2:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
    f6d4:	8b87      	ldrh	r7, [r0, #28]
{
    f6d6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
    f6da:	f8ad 7010 	strh.w	r7, [sp, #16]
{
    f6de:	460e      	mov	r6, r1
	struct bt_mesh_msg_ctx ctx = {
    f6e0:	2100      	movs	r1, #0
    f6e2:	f8ad 101a 	strh.w	r1, [sp, #26]
    f6e6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    f6ea:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
    f6ee:	ab04      	add	r3, sp, #16
{
    f6f0:	9d11      	ldr	r5, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
    f6f2:	f8cd 1016 	str.w	r1, [sp, #22]
    f6f6:	f8ad 7012 	strh.w	r7, [sp, #18]
    f6fa:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
    f6fe:	9109      	str	r1, [sp, #36]	; 0x24
    f700:	9007      	str	r0, [sp, #28]
    f702:	9308      	str	r3, [sp, #32]
    f704:	b1a4      	cbz	r4, f730 <send_ack+0x60>
		.src = obo ? bt_mesh_primary_addr() : src,
    f706:	f001 fd85 	bl	11214 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
    f70a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
    f70e:	f7fd fc43 	bl	cf98 <bt_mesh_net_transmit_get>
    f712:	4b18      	ldr	r3, [pc, #96]	; (f774 <send_ack+0xa4>)
	struct bt_mesh_net_tx tx = {
    f714:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    f718:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
	if (bt_mesh_lpn_established()) {
    f71c:	f3c1 1100 	ubfx	r1, r1, #4, #1
    f720:	b141      	cbz	r1, f734 <send_ack+0x64>
		BT_WARN("Not sending ack when LPN is enabled");
    f722:	4815      	ldr	r0, [pc, #84]	; (f778 <send_ack+0xa8>)
    f724:	2157      	movs	r1, #87	; 0x57
    f726:	f014 fd89 	bl	2423c <printk>
		return 0;
    f72a:	2000      	movs	r0, #0
}
    f72c:	b00b      	add	sp, #44	; 0x2c
    f72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
    f730:	4630      	mov	r0, r6
    f732:	e7ea      	b.n	f70a <send_ack+0x3a>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
    f734:	b236      	sxth	r6, r6
    f736:	2e00      	cmp	r6, #0
    f738:	dd1a      	ble.n	f770 <send_ack+0xa0>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
    f73a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f73c:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
    f73e:	03e4      	lsls	r4, r4, #15
    f740:	f3c3 030c 	ubfx	r3, r3, #0, #13
    f744:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
    f748:	0c2b      	lsrs	r3, r5, #16
	dst[0] = val >> 8;
    f74a:	0a1a      	lsrs	r2, r3, #8
    f74c:	ba64      	rev16	r4, r4
    f74e:	f88d 200a 	strb.w	r2, [sp, #10]
	dst[1] = val;
    f752:	f88d 300b 	strb.w	r3, [sp, #11]
	dst[0] = val >> 8;
    f756:	ba6d      	rev16	r5, r5
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
    f758:	e9cd 1100 	strd	r1, r1, [sp]
    f75c:	2306      	movs	r3, #6
    f75e:	aa02      	add	r2, sp, #8
    f760:	a807      	add	r0, sp, #28
    f762:	f8ad 4008 	strh.w	r4, [sp, #8]
    f766:	f8ad 500c 	strh.w	r5, [sp, #12]
    f76a:	f7ff ff6b 	bl	f644 <bt_mesh_ctl_send>
    f76e:	e7dd      	b.n	f72c <send_ack+0x5c>
		return 0;
    f770:	4608      	mov	r0, r1
    f772:	e7db      	b.n	f72c <send_ack+0x5c>
    f774:	200013a8 	.word	0x200013a8
    f778:	0002e9eb 	.word	0x0002e9eb

0000f77c <seg_ack>:
{
    f77c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f77e:	4604      	mov	r4, r0
    f780:	b085      	sub	sp, #20
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);
    f782:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
    f786:	f01a fe3b 	bl	2a400 <z_impl_k_uptime_ticks>
    f78a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f78e:	fba0 6703 	umull	r6, r7, r0, r3
    f792:	fb03 7701 	mla	r7, r3, r1, r7
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
    f796:	f854 2c08 	ldr.w	r2, [r4, #-8]
    f79a:	0bf3      	lsrs	r3, r6, #15
    f79c:	ea43 4347 	orr.w	r3, r3, r7, lsl #17
    f7a0:	1a9b      	subs	r3, r3, r2
    f7a2:	f64e 2260 	movw	r2, #60000	; 0xea60
    f7a6:	4293      	cmp	r3, r2
    f7a8:	d90a      	bls.n	f7c0 <seg_ack+0x44>
		BT_WARN("Incomplete timer expired");
    f7aa:	2157      	movs	r1, #87	; 0x57
    f7ac:	481b      	ldr	r0, [pc, #108]	; (f81c <seg_ack+0xa0>)
    f7ae:	f014 fd45 	bl	2423c <printk>
		seg_rx_reset(rx, false);
    f7b2:	2100      	movs	r1, #0
    f7b4:	4628      	mov	r0, r5
}
    f7b6:	b005      	add	sp, #20
    f7b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		seg_rx_reset(rx, false);
    f7bc:	f7ff bba6 	b.w	ef0c <seg_rx_reset>
		 rx->block, rx->obo);
    f7c0:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
    f7c4:	f834 2c18 	ldrh.w	r2, [r4, #-24]
    f7c8:	f834 1c16 	ldrh.w	r1, [r4, #-22]
    f7cc:	f854 0c30 	ldr.w	r0, [r4, #-48]
    f7d0:	09db      	lsrs	r3, r3, #7
    f7d2:	9302      	str	r3, [sp, #8]
    f7d4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    f7d8:	9301      	str	r3, [sp, #4]
    f7da:	f1a4 0320 	sub.w	r3, r4, #32
    f7de:	9300      	str	r3, [sp, #0]
    f7e0:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    f7e4:	f7ff ff74 	bl	f6d0 <send_ack>
	timeout = ack_timeout(rx);
    f7e8:	4628      	mov	r0, r5
    f7ea:	f018 f993 	bl	27b14 <ack_timeout>
    f7ee:	f44f 4500 	mov.w	r5, #32768	; 0x8000
	k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
    f7f2:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
    f7f6:	2100      	movs	r1, #0
    f7f8:	f240 30e7 	movw	r0, #999	; 0x3e7
    f7fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f800:	2300      	movs	r3, #0
    f802:	fbc5 0106 	smlal	r0, r1, r5, r6
    f806:	f7f2 fb1f 	bl	1e48 <__aeabi_uldivmod>
    f80a:	4602      	mov	r2, r0
    f80c:	460b      	mov	r3, r1
    f80e:	4620      	mov	r0, r4
}
    f810:	b005      	add	sp, #20
    f812:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
    f816:	f7ff bb23 	b.w	ee60 <k_delayed_work_submit>
    f81a:	bf00      	nop
    f81c:	0002e9a9 	.word	0x0002e9a9

0000f820 <bt_mesh_rx_reset>:
		seg_rx_reset(&seg_rx[i], true);
    f820:	2101      	movs	r1, #1
    f822:	4801      	ldr	r0, [pc, #4]	; (f828 <bt_mesh_rx_reset+0x8>)
    f824:	f7ff bb72 	b.w	ef0c <seg_rx_reset>
    f828:	200014c0 	.word	0x200014c0

0000f82c <bt_mesh_trans_reset>:
{
    f82c:	b508      	push	{r3, lr}
		seg_rx_reset(&seg_rx[i], true);
    f82e:	2101      	movs	r1, #1
    f830:	480a      	ldr	r0, [pc, #40]	; (f85c <bt_mesh_trans_reset+0x30>)
    f832:	f7ff fb6b 	bl	ef0c <seg_rx_reset>
		seg_tx_reset(&seg_tx[i]);
    f836:	480a      	ldr	r0, [pc, #40]	; (f860 <bt_mesh_trans_reset+0x34>)
    f838:	f7ff fb94 	bl	ef64 <seg_tx_reset>
		if (virtual_addrs[i].ref) {
    f83c:	4a09      	ldr	r2, [pc, #36]	; (f864 <bt_mesh_trans_reset+0x38>)
    f83e:	8813      	ldrh	r3, [r2, #0]
    f840:	f3c3 030e 	ubfx	r3, r3, #0, #15
    f844:	b113      	cbz	r3, f84c <bt_mesh_trans_reset+0x20>
			virtual_addrs[i].ref = 0U;
    f846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f84a:	8013      	strh	r3, [r2, #0]
	bt_mesh_rpl_clear();
    f84c:	f018 fa31 	bl	27cb2 <bt_mesh_rpl_clear>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    f850:	2009      	movs	r0, #9
}
    f852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    f856:	f004 b83d 	b.w	138d4 <bt_mesh_settings_store_schedule>
    f85a:	bf00      	nop
    f85c:	200014c0 	.word	0x200014c0
    f860:	20001520 	.word	0x20001520
    f864:	20003518 	.word	0x20003518

0000f868 <bt_mesh_trans_init>:
{
    f868:	b538      	push	{r3, r4, r5, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    f86a:	4c09      	ldr	r4, [pc, #36]	; (f890 <bt_mesh_trans_init+0x28>)
    f86c:	2530      	movs	r5, #48	; 0x30
    f86e:	462a      	mov	r2, r5
    f870:	2100      	movs	r1, #0
    f872:	f104 0050 	add.w	r0, r4, #80	; 0x50
    f876:	f016 fc9d 	bl	261b4 <memset>
    f87a:	4b06      	ldr	r3, [pc, #24]	; (f894 <bt_mesh_trans_init+0x2c>)
    f87c:	6563      	str	r3, [r4, #84]	; 0x54
    f87e:	4c06      	ldr	r4, [pc, #24]	; (f898 <bt_mesh_trans_init+0x30>)
    f880:	462a      	mov	r2, r5
    f882:	2100      	movs	r1, #0
    f884:	1960      	adds	r0, r4, r5
    f886:	f016 fc95 	bl	261b4 <memset>
    f88a:	4b04      	ldr	r3, [pc, #16]	; (f89c <bt_mesh_trans_init+0x34>)
    f88c:	6363      	str	r3, [r4, #52]	; 0x34
}
    f88e:	bd38      	pop	{r3, r4, r5, pc}
    f890:	20001520 	.word	0x20001520
    f894:	00027c93 	.word	0x00027c93
    f898:	200014c0 	.word	0x200014c0
    f89c:	0000f77d 	.word	0x0000f77d

0000f8a0 <bt_mesh_va_add>:
{
    f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!virtual_addrs[i].ref) {
    f8a2:	4c1b      	ldr	r4, [pc, #108]	; (f910 <bt_mesh_va_add+0x70>)
    f8a4:	8826      	ldrh	r6, [r4, #0]
    f8a6:	f3c6 060e 	ubfx	r6, r6, #0, #15
    f8aa:	b2b3      	uxth	r3, r6
{
    f8ac:	4605      	mov	r5, r0
    f8ae:	460f      	mov	r7, r1
	memcpy(va->uuid, uuid, ARRAY_SIZE(va->uuid));
    f8b0:	2210      	movs	r2, #16
		if (!virtual_addrs[i].ref) {
    f8b2:	b1ab      	cbz	r3, f8e0 <bt_mesh_va_add+0x40>
		if (!memcmp(uuid, virtual_addrs[i].uuid,
    f8b4:	1d21      	adds	r1, r4, #4
    f8b6:	f016 fc2c 	bl	26112 <memcmp>
    f8ba:	4605      	mov	r5, r0
    f8bc:	bb30      	cbnz	r0, f90c <bt_mesh_va_add+0x6c>
			*addr = virtual_addrs[i].addr;
    f8be:	8863      	ldrh	r3, [r4, #2]
    f8c0:	803b      	strh	r3, [r7, #0]
			virtual_addrs[i].ref++;
    f8c2:	8823      	ldrh	r3, [r4, #0]
    f8c4:	1c5a      	adds	r2, r3, #1
    f8c6:	f362 030e 	bfi	r3, r2, #0, #15
    f8ca:	8023      	strh	r3, [r4, #0]
	store->changed = 1U;
    f8cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    f8d4:	2009      	movs	r0, #9
	store->changed = 1U;
    f8d6:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    f8d8:	f003 fffc 	bl	138d4 <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
    f8dc:	4628      	mov	r0, r5
    f8de:	e00b      	b.n	f8f8 <bt_mesh_va_add+0x58>
	memcpy(va->uuid, uuid, ARRAY_SIZE(va->uuid));
    f8e0:	4601      	mov	r1, r0
    f8e2:	1d20      	adds	r0, r4, #4
    f8e4:	f016 fc3c 	bl	26160 <memcpy>
	err = bt_mesh_virtual_addr(uuid, &va->addr);
    f8e8:	4628      	mov	r0, r5
    f8ea:	1ca1      	adds	r1, r4, #2
    f8ec:	f001 f90c 	bl	10b08 <bt_mesh_virtual_addr>
	if (err) {
    f8f0:	4605      	mov	r5, r0
    f8f2:	b110      	cbz	r0, f8fa <bt_mesh_va_add+0x5a>
		va->addr = BT_MESH_ADDR_UNASSIGNED;
    f8f4:	8066      	strh	r6, [r4, #2]
		return STATUS_UNSPECIFIED;
    f8f6:	2010      	movs	r0, #16
}
    f8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	va->ref = 1;
    f8fa:	f248 0301 	movw	r3, #32769	; 0x8001
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    f8fe:	2009      	movs	r0, #9
	va->ref = 1;
    f900:	8023      	strh	r3, [r4, #0]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    f902:	f003 ffe7 	bl	138d4 <bt_mesh_settings_store_schedule>
	*addr = va->addr;
    f906:	8863      	ldrh	r3, [r4, #2]
    f908:	803b      	strh	r3, [r7, #0]
    f90a:	e7e7      	b.n	f8dc <bt_mesh_va_add+0x3c>
		return STATUS_INSUFF_RESOURCES;
    f90c:	2005      	movs	r0, #5
    f90e:	e7f3      	b.n	f8f8 <bt_mesh_va_add+0x58>
    f910:	20003518 	.word	0x20003518

0000f914 <bt_mesh_va_del>:
{
    f914:	b538      	push	{r3, r4, r5, lr}
		if (virtual_addrs[i].ref &&
    f916:	4c10      	ldr	r4, [pc, #64]	; (f958 <bt_mesh_va_del+0x44>)
    f918:	8823      	ldrh	r3, [r4, #0]
    f91a:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    f91e:	460d      	mov	r5, r1
		if (virtual_addrs[i].ref &&
    f920:	b90b      	cbnz	r3, f926 <bt_mesh_va_del+0x12>
		return STATUS_CANNOT_REMOVE;
    f922:	200c      	movs	r0, #12
}
    f924:	bd38      	pop	{r3, r4, r5, pc}
		    !memcmp(uuid, virtual_addrs[i].uuid,
    f926:	2210      	movs	r2, #16
    f928:	1d21      	adds	r1, r4, #4
    f92a:	f016 fbf2 	bl	26112 <memcmp>
		if (virtual_addrs[i].ref &&
    f92e:	2800      	cmp	r0, #0
    f930:	d1f7      	bne.n	f922 <bt_mesh_va_del+0xe>
	va->ref--;
    f932:	8823      	ldrh	r3, [r4, #0]
    f934:	f503 42ff 	add.w	r2, r3, #32640	; 0x7f80
    f938:	327f      	adds	r2, #127	; 0x7f
    f93a:	f362 030e 	bfi	r3, r2, #0, #15
    f93e:	8023      	strh	r3, [r4, #0]
	if (addr) {
    f940:	b10d      	cbz	r5, f946 <bt_mesh_va_del+0x32>
		*addr = va->addr;
    f942:	8863      	ldrh	r3, [r4, #2]
    f944:	802b      	strh	r3, [r5, #0]
	store->changed = 1U;
    f946:	7863      	ldrb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    f948:	2009      	movs	r0, #9
	store->changed = 1U;
    f94a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f94e:	7063      	strb	r3, [r4, #1]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_VA_PENDING);
    f950:	f003 ffc0 	bl	138d4 <bt_mesh_settings_store_schedule>
	return STATUS_SUCCESS;
    f954:	2000      	movs	r0, #0
    f956:	e7e5      	b.n	f924 <bt_mesh_va_del+0x10>
    f958:	20003518 	.word	0x20003518

0000f95c <bt_mesh_va_label_get>:
{
    f95c:	4602      	mov	r2, r0
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
    f95e:	4808      	ldr	r0, [pc, #32]	; (f980 <bt_mesh_va_label_get+0x24>)
    f960:	8801      	ldrh	r1, [r0, #0]
    f962:	f3c1 010e 	ubfx	r1, r1, #0, #15
{
    f966:	b508      	push	{r3, lr}
		if (virtual_addrs[i].ref && virtual_addrs[i].addr == addr) {
    f968:	b111      	cbz	r1, f970 <bt_mesh_va_label_get+0x14>
    f96a:	8841      	ldrh	r1, [r0, #2]
    f96c:	4291      	cmp	r1, r2
    f96e:	d005      	beq.n	f97c <bt_mesh_va_label_get+0x20>
	BT_WARN("No matching Label UUID for 0x%04x", addr);
    f970:	4804      	ldr	r0, [pc, #16]	; (f984 <bt_mesh_va_label_get+0x28>)
    f972:	2157      	movs	r1, #87	; 0x57
    f974:	f014 fc62 	bl	2423c <printk>
	return NULL;
    f978:	2000      	movs	r0, #0
}
    f97a:	bd08      	pop	{r3, pc}
			return virtual_addrs[i].uuid;
    f97c:	3004      	adds	r0, #4
    f97e:	e7fc      	b.n	f97a <bt_mesh_va_label_get+0x1e>
    f980:	20003518 	.word	0x20003518
    f984:	0002e85b 	.word	0x0002e85b

0000f988 <bt_mesh_trans_send>:
{
    f988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f98c:	4616      	mov	r6, r2
	if (msg->len < 1) {
    f98e:	888a      	ldrh	r2, [r1, #4]
{
    f990:	b08b      	sub	sp, #44	; 0x2c
    f992:	4604      	mov	r4, r0
    f994:	460d      	mov	r5, r1
    f996:	461f      	mov	r7, r3
	if (msg->len < 1) {
    f998:	b932      	cbnz	r2, f9a8 <bt_mesh_trans_send+0x20>
		BT_ERR("Zero-length SDU not allowed");
    f99a:	4855      	ldr	r0, [pc, #340]	; (faf0 <bt_mesh_trans_send+0x168>)
    f99c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid destination address");
    f99e:	f014 fc4d 	bl	2423c <printk>
		return -EINVAL;
    f9a2:	f06f 0015 	mvn.w	r0, #21
    f9a6:	e007      	b.n	f9b8 <bt_mesh_trans_send+0x30>
	if (msg->len > BT_MESH_TX_SDU_MAX) {
    f9a8:	2a78      	cmp	r2, #120	; 0x78
    f9aa:	d908      	bls.n	f9be <bt_mesh_trans_send+0x36>
		BT_ERR("Not enough segment buffers for length %u", msg->len);
    f9ac:	4851      	ldr	r0, [pc, #324]	; (faf4 <bt_mesh_trans_send+0x16c>)
    f9ae:	2145      	movs	r1, #69	; 0x45
    f9b0:	f014 fc44 	bl	2423c <printk>
		return -EMSGSIZE;
    f9b4:	f06f 0023 	mvn.w	r0, #35	; 0x23
}
    f9b8:	b00b      	add	sp, #44	; 0x2c
    f9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
    f9be:	4608      	mov	r0, r1
    f9c0:	f019 ffe5 	bl	2998e <net_buf_simple_tailroom>
    f9c4:	2803      	cmp	r0, #3
    f9c6:	d802      	bhi.n	f9ce <bt_mesh_trans_send+0x46>
		BT_ERR("Insufficient tailroom for Transport MIC");
    f9c8:	2145      	movs	r1, #69	; 0x45
    f9ca:	484b      	ldr	r0, [pc, #300]	; (faf8 <bt_mesh_trans_send+0x170>)
    f9cc:	e7e7      	b.n	f99e <bt_mesh_trans_send+0x16>
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    f9ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
    f9d2:	f898 300b 	ldrb.w	r3, [r8, #11]
    f9d6:	2bff      	cmp	r3, #255	; 0xff
    f9d8:	d116      	bne.n	fa08 <bt_mesh_trans_send+0x80>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    f9da:	f7fd fa9d 	bl	cf18 <bt_mesh_default_ttl_get>
    f9de:	f888 000b 	strb.w	r0, [r8, #11]
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    f9e2:	88ab      	ldrh	r3, [r5, #4]
    f9e4:	6860      	ldr	r0, [r4, #4]
    f9e6:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
    f9e8:	bf84      	itt	hi
    f9ea:	2301      	movhi	r3, #1
    f9ec:	7283      	strbhi	r3, [r0, #10]
	if (tx->ctx->addr == BT_MESH_ADDR_UNASSIGNED ||
    f9ee:	8883      	ldrh	r3, [r0, #4]
    f9f0:	b13b      	cbz	r3, fa02 <bt_mesh_trans_send+0x7a>
    f9f2:	b21b      	sxth	r3, r3
    f9f4:	2b00      	cmp	r3, #0
    f9f6:	dc0c      	bgt.n	fa12 <bt_mesh_trans_send+0x8a>
	     BT_MESH_IS_DEV_KEY(tx->ctx->app_idx))) {
    f9f8:	8843      	ldrh	r3, [r0, #2]
    f9fa:	3303      	adds	r3, #3
	    (!BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) &&
    f9fc:	b29b      	uxth	r3, r3
    f9fe:	2b01      	cmp	r3, #1
    fa00:	d807      	bhi.n	fa12 <bt_mesh_trans_send+0x8a>
		BT_ERR("Invalid destination address");
    fa02:	2145      	movs	r1, #69	; 0x45
    fa04:	483d      	ldr	r0, [pc, #244]	; (fafc <bt_mesh_trans_send+0x174>)
    fa06:	e7ca      	b.n	f99e <bt_mesh_trans_send+0x16>
	} else if (tx->ctx->send_ttl > BT_MESH_TTL_MAX) {
    fa08:	061b      	lsls	r3, r3, #24
    fa0a:	d5ea      	bpl.n	f9e2 <bt_mesh_trans_send+0x5a>
		BT_ERR("TTL too large (max 127)");
    fa0c:	2145      	movs	r1, #69	; 0x45
    fa0e:	483c      	ldr	r0, [pc, #240]	; (fb00 <bt_mesh_trans_send+0x178>)
    fa10:	e7c5      	b.n	f99e <bt_mesh_trans_send+0x16>
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
    fa12:	f10d 030f 	add.w	r3, sp, #15
    fa16:	aa04      	add	r2, sp, #16
    fa18:	4621      	mov	r1, r4
    fa1a:	f7ff f971 	bl	ed00 <bt_mesh_keys_resolve>
	if (err) {
    fa1e:	2800      	cmp	r0, #0
    fa20:	d1ca      	bne.n	f9b8 <bt_mesh_trans_send+0x30>
	tx->xmit = bt_mesh_net_transmit_get();
    fa22:	f7fd fab9 	bl	cf98 <bt_mesh_net_transmit_get>
	tx->aid = aid;
    fa26:	7ae3      	ldrb	r3, [r4, #11]
    fa28:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
    fa2c:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
    fa2e:	f362 0387 	bfi	r3, r2, #2, #6
    fa32:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    fa34:	6863      	ldr	r3, [r4, #4]
    fa36:	f893 900a 	ldrb.w	r9, [r3, #10]
    fa3a:	f1b9 0f00 	cmp.w	r9, #0
    fa3e:	d008      	beq.n	fa52 <bt_mesh_trans_send+0xca>
    fa40:	4628      	mov	r0, r5
    fa42:	f019 ffa4 	bl	2998e <net_buf_simple_tailroom>
    fa46:	2807      	cmp	r0, #7
    fa48:	bf94      	ite	ls
    fa4a:	f04f 0900 	movls.w	r9, #0
    fa4e:	f04f 0901 	movhi.w	r9, #1
    fa52:	7ae3      	ldrb	r3, [r4, #11]
	err = trans_encrypt(tx, key, msg);
    fa54:	f8dd 8010 	ldr.w	r8, [sp, #16]
    fa58:	f369 0341 	bfi	r3, r9, #1, #1
    fa5c:	72e3      	strb	r3, [r4, #11]
	struct bt_mesh_app_crypto_ctx crypto = {
    fa5e:	220e      	movs	r2, #14
    fa60:	2100      	movs	r1, #0
    fa62:	f10d 001a 	add.w	r0, sp, #26
    fa66:	f016 fba5 	bl	261b4 <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    fa6a:	6862      	ldr	r2, [r4, #4]
	struct bt_mesh_app_crypto_ctx crypto = {
    fa6c:	f88d 9015 	strb.w	r9, [sp, #21]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    fa70:	8853      	ldrh	r3, [r2, #2]
    fa72:	3303      	adds	r3, #3
    fa74:	b29b      	uxth	r3, r3
    fa76:	2b01      	cmp	r3, #1
    fa78:	bf8c      	ite	hi
    fa7a:	2300      	movhi	r3, #0
    fa7c:	2301      	movls	r3, #1
    fa7e:	f88d 3014 	strb.w	r3, [sp, #20]
	struct bt_mesh_app_crypto_ctx crypto = {
    fa82:	8923      	ldrh	r3, [r4, #8]
    fa84:	f8ad 3016 	strh.w	r3, [sp, #22]
    fa88:	8893      	ldrh	r3, [r2, #4]
		.seq_num = bt_mesh.seq,
    fa8a:	4a1e      	ldr	r2, [pc, #120]	; (fb04 <bt_mesh_trans_send+0x17c>)
	struct bt_mesh_app_crypto_ctx crypto = {
    fa8c:	f8ad 3018 	strh.w	r3, [sp, #24]
    fa90:	6853      	ldr	r3, [r2, #4]
    fa92:	9307      	str	r3, [sp, #28]
		.iv_index = BT_MESH_NET_IVI_TX,
    fa94:	6813      	ldr	r3, [r2, #0]
    fa96:	f3bf 8f5b 	dmb	ish
    fa9a:	6892      	ldr	r2, [r2, #8]
    fa9c:	f3bf 8f5b 	dmb	ish
    faa0:	f3c2 0280 	ubfx	r2, r2, #2, #1
    faa4:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
    faa6:	9308      	str	r3, [sp, #32]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    faa8:	6863      	ldr	r3, [r4, #4]
    faaa:	8898      	ldrh	r0, [r3, #4]
    faac:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    fab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    fab4:	d202      	bcs.n	fabc <bt_mesh_trans_send+0x134>
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
    fab6:	f7ff ff51 	bl	f95c <bt_mesh_va_label_get>
    faba:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_app_encrypt(key, &crypto, msg);
    fabc:	462a      	mov	r2, r5
    fabe:	a905      	add	r1, sp, #20
    fac0:	4640      	mov	r0, r8
    fac2:	f018 fa50 	bl	27f66 <bt_mesh_app_encrypt>
	if (err) {
    fac6:	2800      	cmp	r0, #0
    fac8:	f47f af76 	bne.w	f9b8 <bt_mesh_trans_send+0x30>
	if (tx->ctx->send_rel) {
    facc:	6863      	ldr	r3, [r4, #4]
    face:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
    fad0:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
    fad2:	b133      	cbz	r3, fae2 <bt_mesh_trans_send+0x15a>
		err = send_seg(tx, msg, cb, cb_data, NULL);
    fad4:	463b      	mov	r3, r7
    fad6:	4632      	mov	r2, r6
    fad8:	4629      	mov	r1, r5
    fada:	4620      	mov	r0, r4
    fadc:	f7ff fc9c 	bl	f418 <send_seg>
    fae0:	e76a      	b.n	f9b8 <bt_mesh_trans_send+0x30>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
    fae2:	463b      	mov	r3, r7
    fae4:	4632      	mov	r2, r6
    fae6:	4629      	mov	r1, r5
    fae8:	4620      	mov	r0, r4
    faea:	f7ff fd5f 	bl	f5ac <send_unseg>
    faee:	e763      	b.n	f9b8 <bt_mesh_trans_send+0x30>
    faf0:	0002e7df 	.word	0x0002e7df
    faf4:	0002e800 	.word	0x0002e800
    faf8:	0002e82e 	.word	0x0002e82e
    fafc:	0002e53b 	.word	0x0002e53b
    fb00:	0002e51e 	.word	0x0002e51e
    fb04:	200013a8 	.word	0x200013a8

0000fb08 <sdu_recv>:
{
    fb08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fb0c:	4691      	mov	r9, r2
    fb0e:	b08b      	sub	sp, #44	; 0x2c
	struct decrypt_ctx ctx = {
    fb10:	220e      	movs	r2, #14
{
    fb12:	4604      	mov	r4, r0
    fb14:	460f      	mov	r7, r1
	struct decrypt_ctx ctx = {
    fb16:	eb0d 0002 	add.w	r0, sp, r2
    fb1a:	2100      	movs	r1, #0
{
    fb1c:	4698      	mov	r8, r3
    fb1e:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	struct decrypt_ctx ctx = {
    fb22:	f016 fb47 	bl	261b4 <memset>
			.dev_key = !AKF(&hdr),
    fb26:	ea6f 1397 	mvn.w	r3, r7, lsr #6
    fb2a:	f003 0301 	and.w	r3, r3, #1
    fb2e:	f88d 3008 	strb.w	r3, [sp, #8]
			.dst = rx->ctx.recv_dst,
    fb32:	8960      	ldrh	r0, [r4, #10]
	struct decrypt_ctx ctx = {
    fb34:	8923      	ldrh	r3, [r4, #8]
    fb36:	f88d 9009 	strb.w	r9, [sp, #9]
    fb3a:	f8ad 300a 	strh.w	r3, [sp, #10]
    fb3e:	f8ad 000c 	strh.w	r0, [sp, #12]
    fb42:	b365      	cbz	r5, fb9e <sdu_recv+0x96>
    fb44:	692a      	ldr	r2, [r5, #16]
    fb46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    fb4a:	9204      	str	r2, [sp, #16]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    fb4c:	7d22      	ldrb	r2, [r4, #20]
	struct decrypt_ctx ctx = {
    fb4e:	9509      	str	r5, [sp, #36]	; 0x24
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    fb50:	f002 0301 	and.w	r3, r2, #1
    fb54:	4a13      	ldr	r2, [pc, #76]	; (fba4 <sdu_recv+0x9c>)
    fb56:	6812      	ldr	r2, [r2, #0]
    fb58:	1ad2      	subs	r2, r2, r3
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    fb5a:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    fb5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
	struct decrypt_ctx ctx = {
    fb62:	9205      	str	r2, [sp, #20]
    fb64:	e9cd 8607 	strd	r8, r6, [sp, #28]
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    fb68:	d202      	bcs.n	fb70 <sdu_recv+0x68>
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
    fb6a:	f7ff fef7 	bl	f95c <bt_mesh_va_label_get>
    fb6e:	9006      	str	r0, [sp, #24]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    fb70:	ab02      	add	r3, sp, #8
    fb72:	9300      	str	r3, [sp, #0]
    fb74:	4622      	mov	r2, r4
    fb76:	4b0c      	ldr	r3, [pc, #48]	; (fba8 <sdu_recv+0xa0>)
    fb78:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fb7c:	f007 013f 	and.w	r1, r7, #63	; 0x3f
    fb80:	f7ff f914 	bl	edac <bt_mesh_app_key_find>
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    fb84:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fb88:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    fb8a:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    fb8c:	d003      	beq.n	fb96 <sdu_recv+0x8e>
	bt_mesh_model_recv(rx, sdu);
    fb8e:	4631      	mov	r1, r6
    fb90:	4620      	mov	r0, r4
    fb92:	f001 fb85 	bl	112a0 <bt_mesh_model_recv>
}
    fb96:	2000      	movs	r0, #0
    fb98:	b00b      	add	sp, #44	; 0x2c
    fb9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct decrypt_ctx ctx = {
    fb9e:	6922      	ldr	r2, [r4, #16]
    fba0:	e7d3      	b.n	fb4a <sdu_recv+0x42>
    fba2:	bf00      	nop
    fba4:	200013a8 	.word	0x200013a8
    fba8:	00027baf 	.word	0x00027baf

0000fbac <bt_mesh_trans_recv>:
{
    fbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    fbb0:	f04f 32ff 	mov.w	r2, #4294967295
{
    fbb4:	b097      	sub	sp, #92	; 0x5c
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    fbb6:	f04f 33ff 	mov.w	r3, #4294967295
    fbba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		rx->friend_match = false;
    fbbe:	7d0b      	ldrb	r3, [r1, #20]
    fbc0:	4db0      	ldr	r5, [pc, #704]	; (fe84 <bt_mesh_trans_recv+0x2d8>)
    fbc2:	f36f 13c7 	bfc	r3, #7, #1
    fbc6:	750b      	strb	r3, [r1, #20]
{
    fbc8:	460c      	mov	r4, r1
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    fbca:	2109      	movs	r1, #9
{
    fbcc:	4607      	mov	r7, r0
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    fbce:	f00d fda9 	bl	1d724 <net_buf_simple_pull>
    fbd2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) &&
    fbd6:	06db      	lsls	r3, r3, #27
    fbd8:	d513      	bpl.n	fc02 <bt_mesh_trans_recv+0x56>
	    bt_mesh_lpn_established() && rx->net_if == BT_MESH_NET_IF_ADV &&
    fbda:	7d23      	ldrb	r3, [r4, #20]
    fbdc:	f013 0f30 	tst.w	r3, #48	; 0x30
    fbe0:	d10f      	bne.n	fc02 <bt_mesh_trans_recv+0x56>
    fbe2:	f895 2020 	ldrb.w	r2, [r5, #32]
    fbe6:	2a08      	cmp	r2, #8
    fbe8:	d101      	bne.n	fbee <bt_mesh_trans_recv+0x42>
	    (!bt_mesh_lpn_waiting_update() || !rx->friend_cred)) {
    fbea:	075e      	lsls	r6, r3, #29
    fbec:	d409      	bmi.n	fc02 <bt_mesh_trans_recv+0x56>
		BT_WARN("Ignoring unexpected message in Low Power mode");
    fbee:	2157      	movs	r1, #87	; 0x57
    fbf0:	48a5      	ldr	r0, [pc, #660]	; (fe88 <bt_mesh_trans_recv+0x2dc>)
    fbf2:	f014 fb23 	bl	2423c <printk>
		return -EAGAIN;
    fbf6:	f06f 0b0a 	mvn.w	fp, #10
}
    fbfa:	4658      	mov	r0, fp
    fbfc:	b017      	add	sp, #92	; 0x5c
    fbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	state->offset = net_buf_simple_headroom(buf);
    fc02:	4638      	mov	r0, r7
    fc04:	f019 febf 	bl	29986 <net_buf_simple_headroom>
	if (SEG(buf->data)) {
    fc08:	f8d7 8000 	ldr.w	r8, [r7]
    fc0c:	9007      	str	r0, [sp, #28]
    fc0e:	f998 3000 	ldrsb.w	r3, [r8]
	state->len = buf->len;
    fc12:	f8b7 a004 	ldrh.w	sl, [r7, #4]
    fc16:	2b00      	cmp	r3, #0
    fc18:	f280 8211 	bge.w	1003e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3f>
		if (!rx->local_match && !rx->friend_match) {
    fc1c:	f894 b014 	ldrb.w	fp, [r4, #20]
    fc20:	f01b 0bc0 	ands.w	fp, fp, #192	; 0xc0
    fc24:	d0e9      	beq.n	fbfa <bt_mesh_trans_recv+0x4e>
	struct bt_mesh_rpl *rpl = NULL;
    fc26:	2300      	movs	r3, #0
	if (buf->len < 5) {
    fc28:	f1ba 0f04 	cmp.w	sl, #4
	struct bt_mesh_rpl *rpl = NULL;
    fc2c:	9309      	str	r3, [sp, #36]	; 0x24
	if (buf->len < 5) {
    fc2e:	d807      	bhi.n	fc40 <bt_mesh_trans_recv+0x94>
		BT_ERR("Too short segmented message (len %u)", buf->len);
    fc30:	4652      	mov	r2, sl
    fc32:	2145      	movs	r1, #69	; 0x45
    fc34:	4895      	ldr	r0, [pc, #596]	; (fe8c <bt_mesh_trans_recv+0x2e0>)
    fc36:	f014 fb01 	bl	2423c <printk>
		return -EINVAL;
    fc3a:	f06f 0b15 	mvn.w	fp, #21
    fc3e:	e09b      	b.n	fd78 <bt_mesh_trans_recv+0x1cc>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
    fc40:	a909      	add	r1, sp, #36	; 0x24
    fc42:	4620      	mov	r0, r4
    fc44:	f000 faf2 	bl	1022c <bt_mesh_rpl_check>
    fc48:	b140      	cbz	r0, fc5c <bt_mesh_trans_recv+0xb0>
		BT_WARN("Replay: src 0x%04x dst 0x%04x seq 0x%06x",
    fc4a:	6923      	ldr	r3, [r4, #16]
    fc4c:	9300      	str	r3, [sp, #0]
    fc4e:	8922      	ldrh	r2, [r4, #8]
    fc50:	8963      	ldrh	r3, [r4, #10]
    fc52:	488f      	ldr	r0, [pc, #572]	; (fe90 <bt_mesh_trans_recv+0x2e4>)
    fc54:	2157      	movs	r1, #87	; 0x57
    fc56:	f014 faf1 	bl	2423c <printk>
    fc5a:	e7ee      	b.n	fc3a <bt_mesh_trans_recv+0x8e>
	net_buf_simple_pull(buf, 1);
    fc5c:	2101      	movs	r1, #1
    fc5e:	4638      	mov	r0, r7
    fc60:	f00d fd60 	bl	1d724 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    fc64:	4638      	mov	r0, r7
    fc66:	f019 fe64 	bl	29932 <net_buf_simple_pull_be16>
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    fc6a:	f3c0 038c 	ubfx	r3, r0, #2, #13
	seg_o = (seq_zero & 0x03) << 3;
    fc6e:	00c6      	lsls	r6, r0, #3
	seg_n = net_buf_simple_pull_u8(buf);
    fc70:	4638      	mov	r0, r7
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    fc72:	9304      	str	r3, [sp, #16]
	seg_n = net_buf_simple_pull_u8(buf);
    fc74:	f019 fe4d 	bl	29912 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    fc78:	f006 0618 	and.w	r6, r6, #24
	seg_o |= seg_n >> 5;
    fc7c:	ea46 1650 	orr.w	r6, r6, r0, lsr #5
    fc80:	b2f6      	uxtb	r6, r6
	seg_n &= 0x1f;
    fc82:	f000 091f 	and.w	r9, r0, #31
	if (seg_o > seg_n) {
    fc86:	454e      	cmp	r6, r9
	seg_n = net_buf_simple_pull_u8(buf);
    fc88:	4683      	mov	fp, r0
	if (seg_o > seg_n) {
    fc8a:	9b04      	ldr	r3, [sp, #16]
    fc8c:	d906      	bls.n	fc9c <bt_mesh_trans_recv+0xf0>
		BT_ERR("SegO greater than SegN (%u > %u)", seg_o, seg_n);
    fc8e:	464b      	mov	r3, r9
    fc90:	4632      	mov	r2, r6
    fc92:	2145      	movs	r1, #69	; 0x45
    fc94:	487f      	ldr	r0, [pc, #508]	; (fe94 <bt_mesh_trans_recv+0x2e8>)
    fc96:	f014 fad1 	bl	2423c <printk>
		return -EINVAL;
    fc9a:	e7ce      	b.n	fc3a <bt_mesh_trans_recv+0x8e>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    fc9c:	6922      	ldr	r2, [r4, #16]
    fc9e:	f894 c014 	ldrb.w	ip, [r4, #20]
    fca2:	6828      	ldr	r0, [r5, #0]
		if (rx->src != net_rx->ctx.addr ||
    fca4:	4d7c      	ldr	r5, [pc, #496]	; (fe98 <bt_mesh_trans_recv+0x2ec>)
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    fca6:	1ad3      	subs	r3, r2, r3
    fca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fcac:	f00c 0101 	and.w	r1, ip, #1
    fcb0:	1a41      	subs	r1, r0, r1
    fcb2:	1ad0      	subs	r0, r2, r3
    fcb4:	ea40 6201 	orr.w	r2, r0, r1, lsl #24
    fcb8:	0a0b      	lsrs	r3, r1, #8
		if (rx->src != net_rx->ctx.addr ||
    fcba:	69a8      	ldr	r0, [r5, #24]
    fcbc:	68a1      	ldr	r1, [r4, #8]
    fcbe:	4288      	cmp	r0, r1
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    fcc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (rx->src != net_rx->ctx.addr ||
    fcc4:	d112      	bne.n	fcec <bt_mesh_trans_recv+0x140>
		if (rx->seq_auth >= *seq_auth) {
    fcc6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    fcca:	4299      	cmp	r1, r3
    fccc:	bf08      	it	eq
    fcce:	4290      	cmpeq	r0, r2
    fcd0:	f080 81e1 	bcs.w	10096 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97>
		if (rx->in_use) {
    fcd4:	7feb      	ldrb	r3, [r5, #31]
    fcd6:	0658      	lsls	r0, r3, #25
    fcd8:	d508      	bpl.n	fcec <bt_mesh_trans_recv+0x140>
			BT_WARN("Duplicate SDU from src 0x%04x",
    fcda:	2157      	movs	r1, #87	; 0x57
    fcdc:	486f      	ldr	r0, [pc, #444]	; (fe9c <bt_mesh_trans_recv+0x2f0>)
    fcde:	8922      	ldrh	r2, [r4, #8]
    fce0:	f014 faac 	bl	2423c <printk>
			seg_rx_reset(rx, true);
    fce4:	2101      	movs	r1, #1
    fce6:	4628      	mov	r0, r5
    fce8:	f7ff f910 	bl	ef0c <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    fcec:	f1b9 0f02 	cmp.w	r9, #2
    fcf0:	d95f      	bls.n	fdb2 <bt_mesh_trans_recv+0x206>
		BT_ERR("Too big incoming SDU length");
    fcf2:	2145      	movs	r1, #69	; 0x45
    fcf4:	486a      	ldr	r0, [pc, #424]	; (fea0 <bt_mesh_trans_recv+0x2f4>)
    fcf6:	f014 faa1 	bl	2423c <printk>
			 net_rx->friend_match);
    fcfa:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    fcfc:	8922      	ldrh	r2, [r4, #8]
    fcfe:	8961      	ldrh	r1, [r4, #10]
    fd00:	6820      	ldr	r0, [r4, #0]
    fd02:	09db      	lsrs	r3, r3, #7
    fd04:	9302      	str	r3, [sp, #8]
    fd06:	2300      	movs	r3, #0
    fd08:	9301      	str	r3, [sp, #4]
    fd0a:	ab0a      	add	r3, sp, #40	; 0x28
    fd0c:	9300      	str	r3, [sp, #0]
    fd0e:	7be3      	ldrb	r3, [r4, #15]
    fd10:	f7ff fcde 	bl	f6d0 <send_ack>
			return -EMSGSIZE;
    fd14:	f06f 0b23 	mvn.w	fp, #35	; 0x23
    fd18:	e02e      	b.n	fd78 <bt_mesh_trans_recv+0x1cc>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    fd1a:	f898 2000 	ldrb.w	r2, [r8]
    fd1e:	7fab      	ldrb	r3, [r5, #30]
    fd20:	429a      	cmp	r2, r3
    fd22:	d104      	bne.n	fd2e <bt_mesh_trans_recv+0x182>
    fd24:	7feb      	ldrb	r3, [r5, #31]
    fd26:	f003 031f 	and.w	r3, r3, #31
    fd2a:	454b      	cmp	r3, r9
    fd2c:	d002      	beq.n	fd34 <bt_mesh_trans_recv+0x188>
		BT_ERR("Invalid segment for ongoing session");
    fd2e:	2145      	movs	r1, #69	; 0x45
    fd30:	485c      	ldr	r0, [pc, #368]	; (fea4 <bt_mesh_trans_recv+0x2f8>)
    fd32:	e1b7      	b.n	100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>
	if (rx->ctl != net_rx->ctl) {
    fd34:	7fea      	ldrb	r2, [r5, #31]
    fd36:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
    fd3a:	f3c2 1140 	ubfx	r1, r2, #5, #1
    fd3e:	4561      	cmp	r1, ip
    fd40:	d002      	beq.n	fd48 <bt_mesh_trans_recv+0x19c>
		BT_ERR("Inconsistent CTL in segment");
    fd42:	2145      	movs	r1, #69	; 0x45
    fd44:	4858      	ldr	r0, [pc, #352]	; (fea8 <bt_mesh_trans_recv+0x2fc>)
    fd46:	e1ad      	b.n	100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>
		if (rx->in_use) {
    fd48:	0651      	lsls	r1, r2, #25
    fd4a:	d46a      	bmi.n	fe22 <bt_mesh_trans_recv+0x276>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    fd4c:	1c59      	adds	r1, r3, #1
    fd4e:	2301      	movs	r3, #1
    fd50:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fd52:	408b      	lsls	r3, r1
    fd54:	3b01      	subs	r3, #1
    fd56:	4283      	cmp	r3, r0
    fd58:	d128      	bne.n	fdac <bt_mesh_trans_recv+0x200>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    fd5a:	09d2      	lsrs	r2, r2, #7
    fd5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
    fd60:	ab0a      	add	r3, sp, #40	; 0x28
    fd62:	9300      	str	r3, [sp, #0]
    fd64:	8922      	ldrh	r2, [r4, #8]
    fd66:	7be3      	ldrb	r3, [r4, #15]
    fd68:	8961      	ldrh	r1, [r4, #10]
    fd6a:	6820      	ldr	r0, [r4, #0]
    fd6c:	f7ff fcb0 	bl	f6d0 <send_ack>
			if (rpl) {
    fd70:	9809      	ldr	r0, [sp, #36]	; 0x24
    fd72:	b9b8      	cbnz	r0, fda4 <bt_mesh_trans_recv+0x1f8>
			return -EALREADY;
    fd74:	f06f 0b44 	mvn.w	fp, #68	; 0x44
}

static inline bool bt_mesh_lpn_timer(void)
{
#if defined(CONFIG_BT_MESH_LPN_AUTO)
	return (bt_mesh.lpn.state == BT_MESH_LPN_TIMER);
    fd78:	4a42      	ldr	r2, [pc, #264]	; (fe84 <bt_mesh_trans_recv+0x2d8>)
    fd7a:	f892 3020 	ldrb.w	r3, [r2, #32]
	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) &&
    fd7e:	2b02      	cmp	r3, #2
    fd80:	d005      	beq.n	fd8e <bt_mesh_trans_recv+0x1e2>
	return bt_mesh.lpn.established;
    fd82:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
    fd86:	06d2      	lsls	r2, r2, #27
    fd88:	d504      	bpl.n	fd94 <bt_mesh_trans_recv+0x1e8>
	     (bt_mesh_lpn_established() && bt_mesh_lpn_waiting_update()))) {
    fd8a:	2b08      	cmp	r3, #8
    fd8c:	d102      	bne.n	fd94 <bt_mesh_trans_recv+0x1e8>
		bt_mesh_lpn_msg_received(rx);
    fd8e:	4620      	mov	r0, r4
    fd90:	f004 fa22 	bl	141d8 <bt_mesh_lpn_msg_received>
	buf->data = buf->__buf + state->offset;
    fd94:	68bb      	ldr	r3, [r7, #8]
    fd96:	9a07      	ldr	r2, [sp, #28]
	buf->len = state->len;
    fd98:	f8a7 a004 	strh.w	sl, [r7, #4]
	buf->data = buf->__buf + state->offset;
    fd9c:	fa13 f382 	uxtah	r3, r3, r2
    fda0:	603b      	str	r3, [r7, #0]
	buf->len = state->len;
    fda2:	e72a      	b.n	fbfa <bt_mesh_trans_recv+0x4e>
				bt_mesh_rpl_update(rpl, net_rx);
    fda4:	4621      	mov	r1, r4
    fda6:	f017 ff77 	bl	27c98 <bt_mesh_rpl_update>
    fdaa:	e7e3      	b.n	fd74 <bt_mesh_trans_recv+0x1c8>
		BT_WARN("Got segment for canceled SDU");
    fdac:	2157      	movs	r1, #87	; 0x57
    fdae:	483f      	ldr	r0, [pc, #252]	; (feac <bt_mesh_trans_recv+0x300>)
    fdb0:	e178      	b.n	100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>
	return slab->num_blocks - slab->num_used;
    fdb2:	4b3f      	ldr	r3, [pc, #252]	; (feb0 <bt_mesh_trans_recv+0x304>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
    fdb4:	689a      	ldr	r2, [r3, #8]
    fdb6:	699b      	ldr	r3, [r3, #24]
    fdb8:	429a      	cmp	r2, r3
    fdba:	d10a      	bne.n	fdd2 <bt_mesh_trans_recv+0x226>
		BT_WARN("Not enough segments for incoming message");
    fdbc:	2157      	movs	r1, #87	; 0x57
    fdbe:	483d      	ldr	r0, [pc, #244]	; (feb4 <bt_mesh_trans_recv+0x308>)
    fdc0:	f014 fa3c 	bl	2423c <printk>
		BT_WARN("No free slots for new incoming segmented messages");
    fdc4:	2157      	movs	r1, #87	; 0x57
    fdc6:	483c      	ldr	r0, [pc, #240]	; (feb8 <bt_mesh_trans_recv+0x30c>)
    fdc8:	f014 fa38 	bl	2423c <printk>
		return -ENOMEM;
    fdcc:	f06f 0b0b 	mvn.w	fp, #11
    fdd0:	e7d2      	b.n	fd78 <bt_mesh_trans_recv+0x1cc>
		if (rx->in_use) {
    fdd2:	7feb      	ldrb	r3, [r5, #31]
    fdd4:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    fdd8:	d1f4      	bne.n	fdc4 <bt_mesh_trans_recv+0x218>
		rx->in_use = 1U;
    fdda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fdde:	77eb      	strb	r3, [r5, #31]
		rx->sub = net_rx->sub;
    fde0:	6823      	ldr	r3, [r4, #0]
    fde2:	602b      	str	r3, [r5, #0]
		rx->ctl = net_rx->ctl;
    fde4:	7d23      	ldrb	r3, [r4, #20]
    fde6:	7fe8      	ldrb	r0, [r5, #31]
    fde8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    fdec:	f363 1045 	bfi	r0, r3, #5, #1
		rx->seq_auth = *seq_auth;
    fdf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    fdf4:	e9c5 2304 	strd	r2, r3, [r5, #16]
		rx->seg_n = seg_n;
    fdf8:	4603      	mov	r3, r0
    fdfa:	f36b 0304 	bfi	r3, fp, #0, #5
    fdfe:	77eb      	strb	r3, [r5, #31]
		rx->hdr = *hdr;
    fe00:	f898 3000 	ldrb.w	r3, [r8]
    fe04:	77ab      	strb	r3, [r5, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    fe06:	7be3      	ldrb	r3, [r4, #15]
    fe08:	f885 3020 	strb.w	r3, [r5, #32]
		rx->src = net_rx->ctx.addr;
    fe0c:	8923      	ldrh	r3, [r4, #8]
    fe0e:	832b      	strh	r3, [r5, #24]
		rx->dst = net_rx->ctx.recv_dst;
    fe10:	8963      	ldrh	r3, [r4, #10]
    fe12:	836b      	strh	r3, [r5, #26]
	rx->obo = net_rx->friend_match;
    fe14:	7d23      	ldrb	r3, [r4, #20]
    fe16:	7fea      	ldrb	r2, [r5, #31]
		rx->block = 0U;
    fe18:	6269      	str	r1, [r5, #36]	; 0x24
	rx->obo = net_rx->friend_match;
    fe1a:	09db      	lsrs	r3, r3, #7
    fe1c:	f363 12c7 	bfi	r2, r3, #7, #1
    fe20:	77ea      	strb	r2, [r5, #31]
	if (BIT(seg_o) & rx->block) {
    fe22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fe24:	fa23 fb06 	lsr.w	fp, r3, r6
    fe28:	f01b 0b01 	ands.w	fp, fp, #1
    fe2c:	d1a2      	bne.n	fd74 <bt_mesh_trans_recv+0x1c8>
	if (seg_o == seg_n) {
    fe2e:	7fea      	ldrb	r2, [r5, #31]
    fe30:	88b9      	ldrh	r1, [r7, #4]
    fe32:	f3c2 1240 	ubfx	r2, r2, #5, #1
		return BT_MESH_APP_SEG_SDU_MAX;
    fe36:	2a00      	cmp	r2, #0
    fe38:	bf14      	ite	ne
    fe3a:	2308      	movne	r3, #8
    fe3c:	230c      	moveq	r3, #12
	if (seg_o == seg_n) {
    fe3e:	454e      	cmp	r6, r9
    fe40:	d11a      	bne.n	fe78 <bt_mesh_trans_recv+0x2cc>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    fe42:	fb03 1306 	mla	r3, r3, r6, r1
    fe46:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    fe48:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    fe4a:	83ab      	strh	r3, [r5, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    fe4c:	d93a      	bls.n	fec4 <bt_mesh_trans_recv+0x318>
			BT_ERR("Too large SDU len");
    fe4e:	2145      	movs	r1, #69	; 0x45
    fe50:	481a      	ldr	r0, [pc, #104]	; (febc <bt_mesh_trans_recv+0x310>)
    fe52:	f014 f9f3 	bl	2423c <printk>
				 seq_auth, 0, rx->obo);
    fe56:	7feb      	ldrb	r3, [r5, #31]
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    fe58:	8961      	ldrh	r1, [r4, #10]
    fe5a:	8922      	ldrh	r2, [r4, #8]
    fe5c:	6820      	ldr	r0, [r4, #0]
    fe5e:	09db      	lsrs	r3, r3, #7
    fe60:	e9cd b301 	strd	fp, r3, [sp, #4]
    fe64:	ab0a      	add	r3, sp, #40	; 0x28
    fe66:	9300      	str	r3, [sp, #0]
    fe68:	7be3      	ldrb	r3, [r4, #15]
    fe6a:	f7ff fc31 	bl	f6d0 <send_ack>
			seg_rx_reset(rx, true);
    fe6e:	2101      	movs	r1, #1
    fe70:	4809      	ldr	r0, [pc, #36]	; (fe98 <bt_mesh_trans_recv+0x2ec>)
    fe72:	f7ff f84b 	bl	ef0c <seg_rx_reset>
    fe76:	e74d      	b.n	fd14 <bt_mesh_trans_recv+0x168>
		if (buf->len != seg_len(rx->ctl)) {
    fe78:	4299      	cmp	r1, r3
    fe7a:	d023      	beq.n	fec4 <bt_mesh_trans_recv+0x318>
			BT_ERR("Incorrect segment size for message type");
    fe7c:	2145      	movs	r1, #69	; 0x45
    fe7e:	4810      	ldr	r0, [pc, #64]	; (fec0 <bt_mesh_trans_recv+0x314>)
    fe80:	e110      	b.n	100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>
    fe82:	bf00      	nop
    fe84:	200013a8 	.word	0x200013a8
    fe88:	0002e55c 	.word	0x0002e55c
    fe8c:	0002e58f 	.word	0x0002e58f
    fe90:	0002e5b9 	.word	0x0002e5b9
    fe94:	0002e5e7 	.word	0x0002e5e7
    fe98:	200014c0 	.word	0x200014c0
    fe9c:	0002e60d 	.word	0x0002e60d
    fea0:	0002e6b6 	.word	0x0002e6b6
    fea4:	0002e64a 	.word	0x0002e64a
    fea8:	0002e673 	.word	0x0002e673
    feac:	0002e694 	.word	0x0002e694
    feb0:	20000d28 	.word	0x20000d28
    feb4:	0002e6d7 	.word	0x0002e6d7
    feb8:	0002e705 	.word	0x0002e705
    febc:	0002e73c 	.word	0x0002e73c
    fec0:	0002e753 	.word	0x0002e753
    fec4:	f01a fa9c 	bl	2a400 <z_impl_k_uptime_ticks>
    fec8:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    fecc:	fba0 230b 	umull	r2, r3, r0, fp
    fed0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    fed4:	9b05      	ldr	r3, [sp, #20]
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    fed6:	4875      	ldr	r0, [pc, #468]	; (100ac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xad>)
    fed8:	fb0b 3301 	mla	r3, fp, r1, r3
    fedc:	9305      	str	r3, [sp, #20]
    fede:	9b04      	ldr	r3, [sp, #16]
    fee0:	0bda      	lsrs	r2, r3, #15
    fee2:	9b05      	ldr	r3, [sp, #20]
    fee4:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
	return (uint32_t)k_uptime_get();
    fee8:	62aa      	str	r2, [r5, #40]	; 0x28
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    feea:	f012 fc79 	bl	227e0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    feee:	fba0 010b 	umull	r0, r1, r0, fp
    fef2:	0bc3      	lsrs	r3, r0, #15
	if (!k_delayed_work_remaining_get(&rx->ack) &&
    fef4:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    fef8:	d11a      	bne.n	ff30 <bt_mesh_trans_recv+0x384>
    fefa:	4b6d      	ldr	r3, [pc, #436]	; (100b0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb1>)
    fefc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    ff00:	06d8      	lsls	r0, r3, #27
    ff02:	d415      	bmi.n	ff30 <bt_mesh_trans_recv+0x384>
		int32_t timeout = ack_timeout(rx);
    ff04:	486b      	ldr	r0, [pc, #428]	; (100b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb5>)
    ff06:	f017 fe05 	bl	27b14 <ack_timeout>
			return (t * to_hz + off) / from_hz;
    ff0a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		k_delayed_work_submit(&rx->ack, K_MSEC(timeout));
    ff0e:	ea20 7ee0 	bic.w	lr, r0, r0, asr #31
    ff12:	2100      	movs	r1, #0
    ff14:	f240 30e7 	movw	r0, #999	; 0x3e7
    ff18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff1c:	2300      	movs	r3, #0
    ff1e:	fbcc 010e 	smlal	r0, r1, ip, lr
    ff22:	f7f1 ff91 	bl	1e48 <__aeabi_uldivmod>
    ff26:	4602      	mov	r2, r0
    ff28:	460b      	mov	r3, r1
    ff2a:	4863      	ldr	r0, [pc, #396]	; (100b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9>)
    ff2c:	f7fe ff98 	bl	ee60 <k_delayed_work_submit>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
    ff30:	1c71      	adds	r1, r6, #1
    ff32:	2200      	movs	r2, #0
    ff34:	2300      	movs	r3, #0
    ff36:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    ff3a:	4860      	ldr	r0, [pc, #384]	; (100bc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbd>)
    ff3c:	f010 fbe6 	bl	2070c <k_mem_slab_alloc>
	if (err) {
    ff40:	4683      	mov	fp, r0
    ff42:	b138      	cbz	r0, ff54 <bt_mesh_trans_recv+0x3a8>
		BT_WARN("Unable allocate buffer for Seg %u", seg_o);
    ff44:	4632      	mov	r2, r6
    ff46:	2157      	movs	r1, #87	; 0x57
    ff48:	485d      	ldr	r0, [pc, #372]	; (100c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc1>)
    ff4a:	f014 f977 	bl	2423c <printk>
		return -ENOBUFS;
    ff4e:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    ff52:	e711      	b.n	fd78 <bt_mesh_trans_recv+0x1cc>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    ff54:	eb05 0386 	add.w	r3, r5, r6, lsl #2
    ff58:	88ba      	ldrh	r2, [r7, #4]
    ff5a:	6858      	ldr	r0, [r3, #4]
    ff5c:	6839      	ldr	r1, [r7, #0]
    ff5e:	f016 f8ff 	bl	26160 <memcpy>
	rx->block |= BIT(seg_o);
    ff62:	2301      	movs	r3, #1
    ff64:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ff66:	4499      	add	r9, r3
	rx->block |= BIT(seg_o);
    ff68:	fa03 f606 	lsl.w	r6, r3, r6
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ff6c:	fa03 f309 	lsl.w	r3, r3, r9
	rx->block |= BIT(seg_o);
    ff70:	4316      	orrs	r6, r2
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ff72:	3b01      	subs	r3, #1
    ff74:	429e      	cmp	r6, r3
	rx->block |= BIT(seg_o);
    ff76:	626e      	str	r6, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ff78:	f47f aefe 	bne.w	fd78 <bt_mesh_trans_recv+0x1cc>
	if (rpl) {
    ff7c:	9809      	ldr	r0, [sp, #36]	; 0x24
    ff7e:	b110      	cbz	r0, ff86 <bt_mesh_trans_recv+0x3da>
		bt_mesh_rpl_update(rpl, net_rx);
    ff80:	4621      	mov	r1, r4
    ff82:	f017 fe89 	bl	27c98 <bt_mesh_rpl_update>
	k_delayed_work_cancel(&rx->ack);
    ff86:	484c      	ldr	r0, [pc, #304]	; (100b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9>)
    ff88:	f012 fa5e 	bl	22448 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    ff8c:	7feb      	ldrb	r3, [r5, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    ff8e:	8961      	ldrh	r1, [r4, #10]
    ff90:	8922      	ldrh	r2, [r4, #8]
    ff92:	6820      	ldr	r0, [r4, #0]
    ff94:	09db      	lsrs	r3, r3, #7
    ff96:	9302      	str	r3, [sp, #8]
    ff98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ff9a:	9301      	str	r3, [sp, #4]
    ff9c:	ae0a      	add	r6, sp, #40	; 0x28
    ff9e:	7be3      	ldrb	r3, [r4, #15]
    ffa0:	9600      	str	r6, [sp, #0]
    ffa2:	f7ff fb95 	bl	f6d0 <send_ack>
	if (net_rx->ctl) {
    ffa6:	7d23      	ldrb	r3, [r4, #20]
    ffa8:	0719      	lsls	r1, r3, #28
    ffaa:	d513      	bpl.n	ffd4 <bt_mesh_trans_recv+0x428>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    ffac:	ab10      	add	r3, sp, #64	; 0x40
    ffae:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    ffb2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
		seg_rx_assemble(rx, &sdu, 0U);
    ffb6:	a90d      	add	r1, sp, #52	; 0x34
    ffb8:	2200      	movs	r2, #0
    ffba:	483e      	ldr	r0, [pc, #248]	; (100b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb5>)
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    ffbc:	930d      	str	r3, [sp, #52]	; 0x34
		seg_rx_assemble(rx, &sdu, 0U);
    ffbe:	f017 fdc7 	bl	27b50 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    ffc2:	4633      	mov	r3, r6
    ffc4:	aa0d      	add	r2, sp, #52	; 0x34
    ffc6:	f898 1000 	ldrb.w	r1, [r8]
    ffca:	4620      	mov	r0, r4
    ffcc:	f7ff f938 	bl	f240 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
    ffd0:	4683      	mov	fp, r0
    ffd2:	e00e      	b.n	fff2 <bt_mesh_trans_recv+0x446>
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
    ffd4:	f898 3001 	ldrb.w	r3, [r8, #1]
    ffd8:	8baa      	ldrh	r2, [r5, #28]
    ffda:	09db      	lsrs	r3, r3, #7
    ffdc:	bf14      	ite	ne
    ffde:	2309      	movne	r3, #9
    ffe0:	2305      	moveq	r3, #5
    ffe2:	429a      	cmp	r2, r3
    ffe4:	da0a      	bge.n	fffc <bt_mesh_trans_recv+0x450>
		BT_ERR("Too short SDU + MIC");
    ffe6:	2145      	movs	r1, #69	; 0x45
    ffe8:	4836      	ldr	r0, [pc, #216]	; (100c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc5>)
    ffea:	f014 f927 	bl	2423c <printk>
		err = -EINVAL;
    ffee:	f06f 0b15 	mvn.w	fp, #21
	seg_rx_reset(rx, false);
    fff2:	2100      	movs	r1, #0
    fff4:	482f      	ldr	r0, [pc, #188]	; (100b4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb5>)
    fff6:	f7fe ff89 	bl	ef0c <seg_rx_reset>
	return err;
    fffa:	e6bd      	b.n	fd78 <bt_mesh_trans_recv+0x1cc>
	if (!buf->__buf) {
    fffc:	4b32      	ldr	r3, [pc, #200]	; (100c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc9>)
    fffe:	6899      	ldr	r1, [r3, #8]
   10000:	b911      	cbnz	r1, 10008 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   10002:	f103 010c 	add.w	r1, r3, #12
   10006:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
   10008:	6899      	ldr	r1, [r3, #8]
   1000a:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
   1000c:	2000      	movs	r0, #0
   1000e:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
   10010:	f898 3001 	ldrb.w	r3, [r8, #1]
   10014:	09db      	lsrs	r3, r3, #7
   10016:	bf14      	ite	ne
   10018:	2308      	movne	r3, #8
   1001a:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
   1001c:	ae10      	add	r6, sp, #64	; 0x40
   1001e:	1ad2      	subs	r2, r2, r3
   10020:	4630      	mov	r0, r6
   10022:	f019 fc54 	bl	298ce <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx);
   10026:	f898 2001 	ldrb.w	r2, [r8, #1]
   1002a:	f898 1000 	ldrb.w	r1, [r8]
   1002e:	4b26      	ldr	r3, [pc, #152]	; (100c8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc9>)
   10030:	e9cd 6500 	strd	r6, r5, [sp]
   10034:	09d2      	lsrs	r2, r2, #7
   10036:	4620      	mov	r0, r4
   10038:	f7ff fd66 	bl	fb08 <sdu_recv>
   1003c:	e7c8      	b.n	ffd0 <bt_mesh_trans_recv+0x424>
	if (buf->len < 1) {
   1003e:	f1ba 0f00 	cmp.w	sl, #0
   10042:	d102      	bne.n	1004a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4b>
		BT_ERR("Too small unsegmented PDU");
   10044:	2145      	movs	r1, #69	; 0x45
   10046:	4821      	ldr	r0, [pc, #132]	; (100cc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xcd>)
   10048:	e02c      	b.n	100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>
	if (bt_mesh_rpl_check(rx, NULL)) {
   1004a:	2100      	movs	r1, #0
   1004c:	4620      	mov	r0, r4
   1004e:	f000 f8ed 	bl	1022c <bt_mesh_rpl_check>
   10052:	2800      	cmp	r0, #0
   10054:	f47f adf9 	bne.w	fc4a <bt_mesh_trans_recv+0x9e>
	hdr = net_buf_simple_pull_u8(buf);
   10058:	4638      	mov	r0, r7
   1005a:	f019 fc5a 	bl	29912 <net_buf_simple_pull_u8>
	if (rx->ctl) {
   1005e:	7d22      	ldrb	r2, [r4, #20]
   10060:	f012 0208 	ands.w	r2, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
   10064:	4601      	mov	r1, r0
	if (rx->ctl) {
   10066:	d006      	beq.n	10076 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x77>
		return ctl_recv(rx, hdr, buf, seq_auth);
   10068:	ab0a      	add	r3, sp, #40	; 0x28
   1006a:	463a      	mov	r2, r7
   1006c:	4620      	mov	r0, r4
   1006e:	f7ff f8e7 	bl	f240 <ctl_recv>
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   10072:	4683      	mov	fp, r0
   10074:	e680      	b.n	fd78 <bt_mesh_trans_recv+0x1cc>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
   10076:	88bb      	ldrh	r3, [r7, #4]
   10078:	2b04      	cmp	r3, #4
   1007a:	d802      	bhi.n	10082 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x83>
		BT_ERR("Too short SDU + MIC");
   1007c:	2145      	movs	r1, #69	; 0x45
   1007e:	4811      	ldr	r0, [pc, #68]	; (100c4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc5>)
   10080:	e010      	b.n	100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>
	buf->len -= APP_MIC_LEN(0);
   10082:	3b04      	subs	r3, #4
   10084:	80bb      	strh	r3, [r7, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL);
   10086:	4b12      	ldr	r3, [pc, #72]	; (100d0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd1>)
   10088:	9300      	str	r3, [sp, #0]
   1008a:	9201      	str	r2, [sp, #4]
   1008c:	463b      	mov	r3, r7
   1008e:	4620      	mov	r0, r4
   10090:	f7ff fd3a 	bl	fb08 <sdu_recv>
   10094:	e7ed      	b.n	10072 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x73>
		if (rx->seq_auth > *seq_auth) {
   10096:	428b      	cmp	r3, r1
   10098:	bf08      	it	eq
   1009a:	4282      	cmpeq	r2, r0
   1009c:	f4bf ae3d 	bcs.w	fd1a <bt_mesh_trans_recv+0x16e>
			BT_WARN("Ignoring old SeqAuth");
   100a0:	480c      	ldr	r0, [pc, #48]	; (100d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd5>)
   100a2:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Too short SDU + MIC");
   100a4:	f014 f8ca 	bl	2423c <printk>
		return -EINVAL;
   100a8:	e5c7      	b.n	fc3a <bt_mesh_trans_recv+0x8e>
   100aa:	bf00      	nop
   100ac:	20001500 	.word	0x20001500
   100b0:	200013a8 	.word	0x200013a8
   100b4:	200014c0 	.word	0x200014c0
   100b8:	200014f0 	.word	0x200014f0
   100bc:	20000d28 	.word	0x20000d28
   100c0:	0002e780 	.word	0x0002e780
   100c4:	0002e7a7 	.word	0x0002e7a7
   100c8:	200006d8 	.word	0x200006d8
   100cc:	0002e7c0 	.word	0x0002e7c0
   100d0:	200006cc 	.word	0x200006cc
   100d4:	0002e630 	.word	0x0002e630

000100d8 <bt_mesh_va_pending_store>:
BT_MESH_SETTINGS_DEFINE(va, "Va", va_set);
#endif /* CONFIG_BT_MESH_LABEL_COUNT > 0 */

#define IS_VA_DEL(_label)	((_label)->ref == 0)
void bt_mesh_va_pending_store(void)
{
   100d8:	b510      	push	{r4, lr}
	char path[18];
	uint16_t i;
	int err;

	for (i = 0; (lab = bt_mesh_va_get(i)) != NULL; i++) {
		if (!lab->changed) {
   100da:	4c1d      	ldr	r4, [pc, #116]	; (10150 <bt_mesh_va_pending_store+0x78>)
   100dc:	f994 3001 	ldrsb.w	r3, [r4, #1]
   100e0:	2b00      	cmp	r3, #0
{
   100e2:	b08c      	sub	sp, #48	; 0x30
		if (!lab->changed) {
   100e4:	da1f      	bge.n	10126 <bt_mesh_va_pending_store+0x4e>
			continue;
		}

		lab->changed = 0U;
   100e6:	7863      	ldrb	r3, [r4, #1]

		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   100e8:	4a1a      	ldr	r2, [pc, #104]	; (10154 <bt_mesh_va_pending_store+0x7c>)
		lab->changed = 0U;
   100ea:	f36f 13c7 	bfc	r3, #7, #1
   100ee:	7063      	strb	r3, [r4, #1]
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   100f0:	2112      	movs	r1, #18
   100f2:	2300      	movs	r3, #0
   100f4:	a802      	add	r0, sp, #8
   100f6:	f014 f8ae 	bl	24256 <snprintk>

		if (IS_VA_DEL(lab)) {
   100fa:	8823      	ldrh	r3, [r4, #0]
   100fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
   10100:	b99a      	cbnz	r2, 1012a <bt_mesh_va_pending_store+0x52>
			err = settings_delete(path);
   10102:	a802      	add	r0, sp, #8
   10104:	f014 fcda 	bl	24abc <settings_delete>
			memcpy(va.uuid, lab->uuid, 16);

			err = settings_save_one(path, &va, sizeof(va));
		}

		if (err) {
   10108:	b168      	cbz	r0, 10126 <bt_mesh_va_pending_store+0x4e>
			BT_ERR("Failed to %s %s value (err %d)",
   1010a:	8821      	ldrh	r1, [r4, #0]
   1010c:	9000      	str	r0, [sp, #0]
   1010e:	4a12      	ldr	r2, [pc, #72]	; (10158 <bt_mesh_va_pending_store+0x80>)
   10110:	4812      	ldr	r0, [pc, #72]	; (1015c <bt_mesh_va_pending_store+0x84>)
   10112:	f3c1 010e 	ubfx	r1, r1, #0, #15
   10116:	2900      	cmp	r1, #0
   10118:	bf08      	it	eq
   1011a:	4602      	moveq	r2, r0
   1011c:	ab02      	add	r3, sp, #8
   1011e:	2145      	movs	r1, #69	; 0x45
   10120:	480f      	ldr	r0, [pc, #60]	; (10160 <bt_mesh_va_pending_store+0x88>)
   10122:	f014 f88b 	bl	2423c <printk>
			BT_DBG("%s %s value",
			       IS_VA_DEL(lab) ? "Deleted" : "Stored",
			       log_strdup(path));
		}
	}
}
   10126:	b00c      	add	sp, #48	; 0x30
   10128:	bd10      	pop	{r4, pc}
			va.ref = lab->ref;
   1012a:	f3c3 030e 	ubfx	r3, r3, #0, #15
   1012e:	f8ad 301c 	strh.w	r3, [sp, #28]
			memcpy(va.uuid, lab->uuid, 16);
   10132:	1d21      	adds	r1, r4, #4
			va.addr = lab->addr;
   10134:	8863      	ldrh	r3, [r4, #2]
   10136:	f8ad 301e 	strh.w	r3, [sp, #30]
			memcpy(va.uuid, lab->uuid, 16);
   1013a:	2210      	movs	r2, #16
   1013c:	a808      	add	r0, sp, #32
   1013e:	f016 f80f 	bl	26160 <memcpy>
			err = settings_save_one(path, &va, sizeof(va));
   10142:	2214      	movs	r2, #20
   10144:	a907      	add	r1, sp, #28
   10146:	a802      	add	r0, sp, #8
   10148:	f7f5 f89a 	bl	5280 <settings_save_one>
   1014c:	e7dc      	b.n	10108 <bt_mesh_va_pending_store+0x30>
   1014e:	bf00      	nop
   10150:	20003518 	.word	0x20003518
   10154:	0002e88f 	.word	0x0002e88f
   10158:	0002e889 	.word	0x0002e889
   1015c:	0002e882 	.word	0x0002e882
   10160:	0002e89d 	.word	0x0002e89d

00010164 <rpl_set>:
	}
}

static int rpl_set(const char *name, size_t len_rd,
		   settings_read_cb read_cb, void *cb_arg)
{
   10164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10166:	460c      	mov	r4, r1
   10168:	4616      	mov	r6, r2
   1016a:	461f      	mov	r7, r3
	struct bt_mesh_rpl *entry;
	struct rpl_val rpl;
	int err;
	uint16_t src;

	if (!name) {
   1016c:	b940      	cbnz	r0, 10180 <rpl_set+0x1c>
		BT_ERR("Insufficient number of arguments");
   1016e:	2145      	movs	r1, #69	; 0x45
   10170:	4829      	ldr	r0, [pc, #164]	; (10218 <rpl_set+0xb4>)
   10172:	f014 f863 	bl	2423c <printk>
		return -ENOENT;
   10176:	f06f 0401 	mvn.w	r4, #1

	BT_DBG("RPL entry for 0x%04x: Seq 0x%06x old_iv %u", entry->src,
	       entry->seq, entry->old_iv);

	return 0;
}
   1017a:	4620      	mov	r0, r4
   1017c:	b003      	add	sp, #12
   1017e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	src = strtol(name, NULL, 16);
   10180:	2210      	movs	r2, #16
   10182:	2100      	movs	r1, #0
   10184:	f015 fefd 	bl	25f82 <strtol>
		if (replay_list[i].src == src) {
   10188:	4a24      	ldr	r2, [pc, #144]	; (1021c <rpl_set+0xb8>)
	src = strtol(name, NULL, 16);
   1018a:	b281      	uxth	r1, r0
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1018c:	2300      	movs	r3, #0
   1018e:	4615      	mov	r5, r2
		if (replay_list[i].src == src) {
   10190:	f832 c033 	ldrh.w	ip, [r2, r3, lsl #3]
   10194:	458c      	cmp	ip, r1
   10196:	d110      	bne.n	101ba <rpl_set+0x56>
			return &replay_list[i];
   10198:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
	if (len_rd == 0) {
   1019c:	b1d4      	cbz	r4, 101d4 <rpl_set+0x70>
	err = bt_mesh_settings_set(read_cb, cb_arg, &rpl, sizeof(rpl));
   1019e:	2304      	movs	r3, #4
   101a0:	eb0d 0203 	add.w	r2, sp, r3
   101a4:	4639      	mov	r1, r7
   101a6:	4630      	mov	r0, r6
   101a8:	f003 fb72 	bl	13890 <bt_mesh_settings_set>
	if (err) {
   101ac:	4604      	mov	r4, r0
   101ae:	b340      	cbz	r0, 10202 <rpl_set+0x9e>
		BT_ERR("Failed to set `net`");
   101b0:	2145      	movs	r1, #69	; 0x45
   101b2:	481b      	ldr	r0, [pc, #108]	; (10220 <rpl_set+0xbc>)
   101b4:	f014 f842 	bl	2423c <printk>
		return err;
   101b8:	e7df      	b.n	1017a <rpl_set+0x16>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   101ba:	3301      	adds	r3, #1
   101bc:	2b0a      	cmp	r3, #10
   101be:	d1e7      	bne.n	10190 <rpl_set+0x2c>
	if (len_rd == 0) {
   101c0:	b174      	cbz	r4, 101e0 <rpl_set+0x7c>
   101c2:	2300      	movs	r3, #0
		if (!replay_list[i].src) {
   101c4:	f835 2033 	ldrh.w	r2, [r5, r3, lsl #3]
   101c8:	b982      	cbnz	r2, 101ec <rpl_set+0x88>
			replay_list[i].src = src;
   101ca:	f825 1033 	strh.w	r1, [r5, r3, lsl #3]
			return &replay_list[i];
   101ce:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		if (!entry) {
   101d2:	e7e4      	b.n	1019e <rpl_set+0x3a>
			(void)memset(entry, 0, sizeof(*entry));
   101d4:	2208      	movs	r2, #8
   101d6:	4621      	mov	r1, r4
   101d8:	4628      	mov	r0, r5
   101da:	f015 ffeb 	bl	261b4 <memset>
   101de:	e7cc      	b.n	1017a <rpl_set+0x16>
			BT_WARN("Unable to find RPL entry for 0x%04x", src);
   101e0:	b282      	uxth	r2, r0
   101e2:	2157      	movs	r1, #87	; 0x57
   101e4:	480f      	ldr	r0, [pc, #60]	; (10224 <rpl_set+0xc0>)
   101e6:	f014 f829 	bl	2423c <printk>
   101ea:	e7c6      	b.n	1017a <rpl_set+0x16>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   101ec:	3301      	adds	r3, #1
   101ee:	2b0a      	cmp	r3, #10
   101f0:	d1e8      	bne.n	101c4 <rpl_set+0x60>
			BT_ERR("Unable to allocate RPL entry for 0x%04x", src);
   101f2:	b282      	uxth	r2, r0
   101f4:	2145      	movs	r1, #69	; 0x45
   101f6:	480c      	ldr	r0, [pc, #48]	; (10228 <rpl_set+0xc4>)
   101f8:	f014 f820 	bl	2423c <printk>
			return -ENOMEM;
   101fc:	f06f 040b 	mvn.w	r4, #11
   10200:	e7bb      	b.n	1017a <rpl_set+0x16>
	entry->seq = rpl.seq;
   10202:	9b01      	ldr	r3, [sp, #4]
   10204:	f3c3 0317 	ubfx	r3, r3, #0, #24
   10208:	606b      	str	r3, [r5, #4]
	entry->old_iv = rpl.old_iv;
   1020a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1020e:	f3c3 0300 	ubfx	r3, r3, #0, #1
   10212:	70ab      	strb	r3, [r5, #2]
	return 0;
   10214:	e7b1      	b.n	1017a <rpl_set+0x16>
   10216:	bf00      	nop
   10218:	0002ca06 	.word	0x0002ca06
   1021c:	2000226c 	.word	0x2000226c
   10220:	0002ebad 	.word	0x0002ebad
   10224:	0002eb84 	.word	0x0002eb84
   10228:	0002ebc6 	.word	0x0002ebc6

0001022c <bt_mesh_rpl_check>:
{
   1022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1022e:	460c      	mov	r4, r1
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   10230:	7d01      	ldrb	r1, [r0, #20]
   10232:	f001 0330 	and.w	r3, r1, #48	; 0x30
   10236:	2b10      	cmp	r3, #16
{
   10238:	4605      	mov	r5, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
   1023a:	d009      	beq.n	10250 <bt_mesh_rpl_check+0x24>
	if (!rx->local_match) {
   1023c:	f011 0340 	ands.w	r3, r1, #64	; 0x40
   10240:	d006      	beq.n	10250 <bt_mesh_rpl_check+0x24>
   10242:	4815      	ldr	r0, [pc, #84]	; (10298 <bt_mesh_rpl_check+0x6c>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   10244:	2200      	movs	r2, #0
   10246:	4606      	mov	r6, r0
		if (!rpl->src) {
   10248:	8803      	ldrh	r3, [r0, #0]
   1024a:	b91b      	cbnz	r3, 10254 <bt_mesh_rpl_check+0x28>
				if (match) {
   1024c:	b1ac      	cbz	r4, 1027a <bt_mesh_rpl_check+0x4e>
					*match = rpl;
   1024e:	6020      	str	r0, [r4, #0]
		return false;
   10250:	2000      	movs	r0, #0
}
   10252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
   10254:	892f      	ldrh	r7, [r5, #8]
   10256:	429f      	cmp	r7, r3
   10258:	d113      	bne.n	10282 <bt_mesh_rpl_check+0x56>
			if (rx->old_iv && !rpl->old_iv) {
   1025a:	00d2      	lsls	r2, r2, #3
   1025c:	18b3      	adds	r3, r6, r2
   1025e:	07c9      	lsls	r1, r1, #31
   10260:	789b      	ldrb	r3, [r3, #2]
   10262:	d502      	bpl.n	1026a <bt_mesh_rpl_check+0x3e>
   10264:	b91b      	cbnz	r3, 1026e <bt_mesh_rpl_check+0x42>
				return true;
   10266:	2001      	movs	r0, #1
   10268:	e7f3      	b.n	10252 <bt_mesh_rpl_check+0x26>
			if ((!rx->old_iv && rpl->old_iv) ||
   1026a:	2b00      	cmp	r3, #0
   1026c:	d1ee      	bne.n	1024c <bt_mesh_rpl_check+0x20>
			    rpl->seq < rx->seq) {
   1026e:	4432      	add	r2, r6
			if ((!rx->old_iv && rpl->old_iv) ||
   10270:	692b      	ldr	r3, [r5, #16]
   10272:	6852      	ldr	r2, [r2, #4]
   10274:	429a      	cmp	r2, r3
   10276:	d2f6      	bcs.n	10266 <bt_mesh_rpl_check+0x3a>
   10278:	e7e8      	b.n	1024c <bt_mesh_rpl_check+0x20>
					bt_mesh_rpl_update(rpl, rx);
   1027a:	4629      	mov	r1, r5
   1027c:	f017 fd0c 	bl	27c98 <bt_mesh_rpl_update>
   10280:	e7e6      	b.n	10250 <bt_mesh_rpl_check+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   10282:	3201      	adds	r2, #1
   10284:	2a0a      	cmp	r2, #10
   10286:	f100 0008 	add.w	r0, r0, #8
   1028a:	d1dd      	bne.n	10248 <bt_mesh_rpl_check+0x1c>
	BT_ERR("RPL is full!");
   1028c:	2145      	movs	r1, #69	; 0x45
   1028e:	4803      	ldr	r0, [pc, #12]	; (1029c <bt_mesh_rpl_check+0x70>)
   10290:	f013 ffd4 	bl	2423c <printk>
	return true;
   10294:	e7e7      	b.n	10266 <bt_mesh_rpl_check+0x3a>
   10296:	bf00      	nop
   10298:	2000226c 	.word	0x2000226c
   1029c:	0002eb28 	.word	0x0002eb28

000102a0 <bt_mesh_rpl_reset>:
{
   102a0:	b570      	push	{r4, r5, r6, lr}
   102a2:	4c0c      	ldr	r4, [pc, #48]	; (102d4 <bt_mesh_rpl_reset+0x34>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   102a4:	2500      	movs	r5, #0
	entry->store = true;
   102a6:	2601      	movs	r6, #1
		if (rpl->src) {
   102a8:	8823      	ldrh	r3, [r4, #0]
   102aa:	b153      	cbz	r3, 102c2 <bt_mesh_rpl_reset+0x22>
			if (rpl->old_iv) {
   102ac:	78a3      	ldrb	r3, [r4, #2]
   102ae:	b173      	cbz	r3, 102ce <bt_mesh_rpl_reset+0x2e>
				(void)memset(rpl, 0, sizeof(*rpl));
   102b0:	2208      	movs	r2, #8
   102b2:	2100      	movs	r1, #0
   102b4:	4620      	mov	r0, r4
   102b6:	f015 ff7d 	bl	261b4 <memset>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   102ba:	2000      	movs	r0, #0
	entry->store = true;
   102bc:	70e6      	strb	r6, [r4, #3]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   102be:	f003 fb09 	bl	138d4 <bt_mesh_settings_store_schedule>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   102c2:	3501      	adds	r5, #1
   102c4:	2d0a      	cmp	r5, #10
   102c6:	f104 0408 	add.w	r4, r4, #8
   102ca:	d1ed      	bne.n	102a8 <bt_mesh_rpl_reset+0x8>
}
   102cc:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
   102ce:	70a6      	strb	r6, [r4, #2]
   102d0:	e7f3      	b.n	102ba <bt_mesh_rpl_reset+0x1a>
   102d2:	bf00      	nop
   102d4:	2000226c 	.word	0x2000226c

000102d8 <bt_mesh_rpl_pending_store>:
#endif
	store_rpl(rpl);
}

void bt_mesh_rpl_pending_store(void)
{
   102d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102dc:	4c26      	ldr	r4, [pc, #152]	; (10378 <bt_mesh_rpl_pending_store+0xa0>)
   102de:	4f27      	ldr	r7, [pc, #156]	; (1037c <bt_mesh_rpl_pending_store+0xa4>)
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   102e0:	4e27      	ldr	r6, [pc, #156]	; (10380 <bt_mesh_rpl_pending_store+0xa8>)
		BT_ERR("Failed to clear RPL");
   102e2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 10388 <bt_mesh_rpl_pending_store+0xb0>
{
   102e6:	b086      	sub	sp, #24
	int i;

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   102e8:	2500      	movs	r5, #0
   102ea:	f3bf 8f5b 	dmb	ish
   102ee:	683b      	ldr	r3, [r7, #0]
   102f0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   102f4:	07db      	lsls	r3, r3, #31
   102f6:	d529      	bpl.n	1034c <bt_mesh_rpl_pending_store+0x74>
	if (!rpl->store) {
   102f8:	78e3      	ldrb	r3, [r4, #3]
   102fa:	b1fb      	cbz	r3, 1033c <bt_mesh_rpl_pending_store+0x64>
	rpl->store = false;
   102fc:	2300      	movs	r3, #0
	rpl.seq = entry->seq;
   102fe:	6862      	ldr	r2, [r4, #4]
	rpl->store = false;
   10300:	70e3      	strb	r3, [r4, #3]
	rpl.seq = entry->seq;
   10302:	9b00      	ldr	r3, [sp, #0]
   10304:	f362 0317 	bfi	r3, r2, #0, #24
	rpl.old_iv = entry->old_iv;
   10308:	78a2      	ldrb	r2, [r4, #2]
	rpl.seq = entry->seq;
   1030a:	9300      	str	r3, [sp, #0]
	rpl.old_iv = entry->old_iv;
   1030c:	f3c3 6307 	ubfx	r3, r3, #24, #8
   10310:	f362 0300 	bfi	r3, r2, #0, #1
   10314:	f88d 3003 	strb.w	r3, [sp, #3]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   10318:	4632      	mov	r2, r6
   1031a:	2112      	movs	r1, #18
   1031c:	8823      	ldrh	r3, [r4, #0]
   1031e:	a801      	add	r0, sp, #4
   10320:	f013 ff99 	bl	24256 <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   10324:	2204      	movs	r2, #4
   10326:	4669      	mov	r1, sp
   10328:	eb0d 0002 	add.w	r0, sp, r2
   1032c:	f7f4 ffa8 	bl	5280 <settings_save_one>
	if (err) {
   10330:	b120      	cbz	r0, 1033c <bt_mesh_rpl_pending_store+0x64>
		BT_ERR("Failed to store RPL %s value", log_strdup(path));
   10332:	aa01      	add	r2, sp, #4
   10334:	2145      	movs	r1, #69	; 0x45
   10336:	4813      	ldr	r0, [pc, #76]	; (10384 <bt_mesh_rpl_pending_store+0xac>)
   10338:	f013 ff80 	bl	2423c <printk>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
   1033c:	3501      	adds	r5, #1
   1033e:	2d0a      	cmp	r5, #10
   10340:	f104 0408 	add.w	r4, r4, #8
   10344:	d1d1      	bne.n	102ea <bt_mesh_rpl_pending_store+0x12>
			store_pending_rpl(&replay_list[i]);
		} else {
			clear_rpl(&replay_list[i]);
		}
	}
}
   10346:	b006      	add	sp, #24
   10348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!rpl->src) {
   1034c:	8823      	ldrh	r3, [r4, #0]
   1034e:	2b00      	cmp	r3, #0
   10350:	d0f4      	beq.n	1033c <bt_mesh_rpl_pending_store+0x64>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   10352:	4632      	mov	r2, r6
   10354:	2112      	movs	r1, #18
   10356:	a801      	add	r0, sp, #4
   10358:	f013 ff7d 	bl	24256 <snprintk>
	err = settings_delete(path);
   1035c:	a801      	add	r0, sp, #4
   1035e:	f014 fbad 	bl	24abc <settings_delete>
	if (err) {
   10362:	b118      	cbz	r0, 1036c <bt_mesh_rpl_pending_store+0x94>
		BT_ERR("Failed to clear RPL");
   10364:	2145      	movs	r1, #69	; 0x45
   10366:	4640      	mov	r0, r8
   10368:	f013 ff68 	bl	2423c <printk>
	(void)memset(rpl, 0, sizeof(*rpl));
   1036c:	2208      	movs	r2, #8
   1036e:	2100      	movs	r1, #0
   10370:	4620      	mov	r0, r4
   10372:	f015 ff1f 	bl	261b4 <memset>
   10376:	e7e1      	b.n	1033c <bt_mesh_rpl_pending_store+0x64>
   10378:	2000226c 	.word	0x2000226c
   1037c:	200013b0 	.word	0x200013b0
   10380:	0002eb3a 	.word	0x0002eb3a
   10384:	0002eb49 	.word	0x0002eb49
   10388:	0002eb6b 	.word	0x0002eb6b

0001038c <notify_sub_end>:
		}
	}
}

static void notify_sub_end(void)
{
   1038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sub.remaining = 0;
   1038e:	4b0d      	ldr	r3, [pc, #52]	; (103c4 <notify_sub_end+0x38>)

	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   10390:	4d0d      	ldr	r5, [pc, #52]	; (103c8 <notify_sub_end+0x3c>)
   10392:	4c0e      	ldr	r4, [pc, #56]	; (103cc <notify_sub_end+0x40>)
   10394:	4e0e      	ldr	r6, [pc, #56]	; (103d0 <notify_sub_end+0x44>)
	sub.remaining = 0;
   10396:	2200      	movs	r2, #0
   10398:	605a      	str	r2, [r3, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   1039a:	462f      	mov	r7, r5
   1039c:	42ac      	cmp	r4, r5
   1039e:	d908      	bls.n	103b2 <notify_sub_end+0x26>
   103a0:	4631      	mov	r1, r6
   103a2:	480c      	ldr	r0, [pc, #48]	; (103d4 <notify_sub_end+0x48>)
   103a4:	2247      	movs	r2, #71	; 0x47
   103a6:	f013 ff49 	bl	2423c <printk>
   103aa:	2147      	movs	r1, #71	; 0x47
   103ac:	4630      	mov	r0, r6
   103ae:	f014 f9f7 	bl	247a0 <assert_post_action>
   103b2:	42bc      	cmp	r4, r7
   103b4:	d300      	bcc.n	103b8 <notify_sub_end+0x2c>
		if (cb->sub_end) {
			cb->sub_end(&sub);
		}
	}
}
   103b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->sub_end) {
   103b8:	6863      	ldr	r3, [r4, #4]
   103ba:	b10b      	cbz	r3, 103c0 <notify_sub_end+0x34>
			cb->sub_end(&sub);
   103bc:	4801      	ldr	r0, [pc, #4]	; (103c4 <notify_sub_end+0x38>)
   103be:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   103c0:	3408      	adds	r4, #8
   103c2:	e7eb      	b.n	1039c <notify_sub_end+0x10>
   103c4:	200022cc 	.word	0x200022cc
   103c8:	0002a768 	.word	0x0002a768
   103cc:	0002a768 	.word	0x0002a768
   103d0:	0002ed2f 	.word	0x0002ed2f
   103d4:	0002bced 	.word	0x0002bced

000103d8 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   103d8:	4601      	mov	r1, r0
   103da:	4801      	ldr	r0, [pc, #4]	; (103e0 <k_delayed_work_submit+0x8>)
   103dc:	f011 bfc4 	b.w	22368 <k_delayed_work_submit_to_queue>
   103e0:	20001988 	.word	0x20001988

000103e4 <hb_publish_end_cb>:
{
   103e4:	b5d0      	push	{r4, r6, r7, lr}
	if (pub.period && pub.count > 1) {
   103e6:	4c12      	ldr	r4, [pc, #72]	; (10430 <hb_publish_end_cb+0x4c>)
   103e8:	68e3      	ldr	r3, [r4, #12]
   103ea:	b1c3      	cbz	r3, 1041e <hb_publish_end_cb+0x3a>
   103ec:	8862      	ldrh	r2, [r4, #2]
   103ee:	2a01      	cmp	r2, #1
   103f0:	d915      	bls.n	1041e <hb_publish_end_cb+0x3a>
		k_delayed_work_submit(&pub_timer, K_SECONDS(pub.period));
   103f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   103f6:	4359      	muls	r1, r3
   103f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   103fc:	f240 36e7 	movw	r6, #999	; 0x3e7
   10400:	2700      	movs	r7, #0
   10402:	fbe0 6701 	umlal	r6, r7, r0, r1
   10406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1040a:	2300      	movs	r3, #0
   1040c:	4630      	mov	r0, r6
   1040e:	4639      	mov	r1, r7
   10410:	f7f1 fd1a 	bl	1e48 <__aeabi_uldivmod>
   10414:	4602      	mov	r2, r0
   10416:	460b      	mov	r3, r1
   10418:	4806      	ldr	r0, [pc, #24]	; (10434 <hb_publish_end_cb+0x50>)
   1041a:	f7ff ffdd 	bl	103d8 <k_delayed_work_submit>
	if (pub.count != 0xffff) {
   1041e:	8863      	ldrh	r3, [r4, #2]
   10420:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10424:	4293      	cmp	r3, r2
		pub.count--;
   10426:	bf1c      	itt	ne
   10428:	f103 33ff 	addne.w	r3, r3, #4294967295
   1042c:	8063      	strhne	r3, [r4, #2]
}
   1042e:	bdd0      	pop	{r4, r6, r7, pc}
   10430:	200022bc 	.word	0x200022bc
   10434:	200015a0 	.word	0x200015a0

00010438 <heartbeat_send.constprop.3>:
static void sub_end(struct k_work *work)
{
	notify_sub_end();
}

static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   10438:	b530      	push	{r4, r5, lr}
	struct __packed {
		uint8_t init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
		.net_idx = pub.net_idx,
   1043a:	4c28      	ldr	r4, [pc, #160]	; (104dc <heartbeat_send.constprop.3+0xa4>)
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   1043c:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   1043e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10442:	f8ad 2012 	strh.w	r2, [sp, #18]
   10446:	8822      	ldrh	r2, [r4, #0]
   10448:	f8ad 2014 	strh.w	r2, [sp, #20]
   1044c:	2300      	movs	r3, #0
   1044e:	7922      	ldrb	r2, [r4, #4]
   10450:	f8ad 301a 	strh.w	r3, [sp, #26]
static int heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
   10454:	4605      	mov	r5, r0
		.net_idx = pub.net_idx,
   10456:	8920      	ldrh	r0, [r4, #8]
	struct bt_mesh_msg_ctx ctx = {
   10458:	f88d 201b 	strb.w	r2, [sp, #27]
   1045c:	f8cd 3016 	str.w	r3, [sp, #22]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = pub.dst,
		.send_ttl = pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
   10460:	e9cd 3307 	strd	r3, r3, [sp, #28]
   10464:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   10466:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(pub.net_idx),
   1046a:	f017 fb3c 	bl	27ae6 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   1046e:	ab04      	add	r3, sp, #16
   10470:	9308      	str	r3, [sp, #32]
   10472:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
   10474:	f000 fece 	bl	11214 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   10478:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   1047c:	f7fc fd8c 	bl	cf98 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
   10480:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled */
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   10484:	8820      	ldrh	r0, [r4, #0]
   10486:	b330      	cbz	r0, 104d6 <heartbeat_send.constprop.3+0x9e>
		return 0U;
	}

	hb.init_ttl = pub.ttl;
   10488:	7923      	ldrb	r3, [r4, #4]
   1048a:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   1048e:	f017 f9ec 	bl	2786a <bt_mesh_relay_get>
	uint16_t feat = 0U;
   10492:	1e42      	subs	r2, r0, #1
   10494:	4254      	negs	r4, r2
   10496:	4154      	adcs	r4, r2
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   10498:	f017 f9dd 	bl	27856 <bt_mesh_gatt_proxy_get>
   1049c:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   1049e:	bf08      	it	eq
   104a0:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   104a4:	f017 f9dc 	bl	27860 <bt_mesh_friend_get>
   104a8:	4b0d      	ldr	r3, [pc, #52]	; (104e0 <heartbeat_send.constprop.3+0xa8>)
   104aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   104ae:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
   104b0:	bf08      	it	eq
   104b2:	f044 0404 	orreq.w	r4, r4, #4
	}

	if (bt_mesh_lpn_established()) {
   104b6:	06db      	lsls	r3, r3, #27
		feat |= BT_MESH_FEAT_LOW_POWER;
   104b8:	bf48      	it	mi
   104ba:	f044 0408 	orrmi.w	r4, r4, #8

	hb.feat = sys_cpu_to_be16(feat);

	BT_DBG("InitTTL %u feat 0x%04x", pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   104be:	2300      	movs	r3, #0
	hb.feat = sys_cpu_to_be16(feat);
   104c0:	0224      	lsls	r4, r4, #8
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   104c2:	e9cd 5300 	strd	r5, r3, [sp]
   104c6:	aa03      	add	r2, sp, #12
   104c8:	2303      	movs	r3, #3
   104ca:	210a      	movs	r1, #10
   104cc:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
   104ce:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   104d2:	f7ff f8b7 	bl	f644 <bt_mesh_ctl_send>
				cb, cb_data);
}
   104d6:	b00b      	add	sp, #44	; 0x2c
   104d8:	bd30      	pop	{r4, r5, pc}
   104da:	bf00      	nop
   104dc:	200022bc 	.word	0x200022bc
   104e0:	200013a8 	.word	0x200013a8

000104e4 <hb_publish>:
		hb_publish_end_cb(err, cb_data);
	}
}

static void hb_publish(struct k_work *work)
{
   104e4:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_subnet *sub;
	int err;

	BT_DBG("hb_pub.count: %u", pub.count);

	sub = bt_mesh_subnet_get(pub.net_idx);
   104e6:	4c0d      	ldr	r4, [pc, #52]	; (1051c <hb_publish+0x38>)
   104e8:	8920      	ldrh	r0, [r4, #8]
   104ea:	f017 fafc 	bl	27ae6 <bt_mesh_subnet_get>
	if (!sub) {
   104ee:	4605      	mov	r5, r0
   104f0:	b930      	cbnz	r0, 10500 <hb_publish+0x1c>
		BT_ERR("No matching subnet for idx 0x%02x", pub.net_idx);
   104f2:	8922      	ldrh	r2, [r4, #8]
   104f4:	480a      	ldr	r0, [pc, #40]	; (10520 <hb_publish+0x3c>)
   104f6:	2145      	movs	r1, #69	; 0x45
   104f8:	f013 fea0 	bl	2423c <printk>
		pub.dst = BT_MESH_ADDR_UNASSIGNED;
   104fc:	8025      	strh	r5, [r4, #0]

	err = heartbeat_send(&publish_cb, NULL);
	if (err) {
		hb_publish_end_cb(err, NULL);
	}
}
   104fe:	bd38      	pop	{r3, r4, r5, pc}
	if (pub.count == 0U) {
   10500:	8863      	ldrh	r3, [r4, #2]
   10502:	2b00      	cmp	r3, #0
   10504:	d0fb      	beq.n	104fe <hb_publish+0x1a>
	err = heartbeat_send(&publish_cb, NULL);
   10506:	4807      	ldr	r0, [pc, #28]	; (10524 <hb_publish+0x40>)
   10508:	f7ff ff96 	bl	10438 <heartbeat_send.constprop.3>
	if (err) {
   1050c:	2800      	cmp	r0, #0
   1050e:	d0f6      	beq.n	104fe <hb_publish+0x1a>
		hb_publish_end_cb(err, NULL);
   10510:	2100      	movs	r1, #0
}
   10512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		hb_publish_end_cb(err, NULL);
   10516:	f7ff bf65 	b.w	103e4 <hb_publish_end_cb>
   1051a:	bf00      	nop
   1051c:	200022bc 	.word	0x200022bc
   10520:	0002ed08 	.word	0x0002ed08
   10524:	0002b1e0 	.word	0x0002b1e0

00010528 <sub_remaining>:
{
   10528:	b508      	push	{r3, lr}
	if (sub.dst == BT_MESH_ADDR_UNASSIGNED) {
   1052a:	4b08      	ldr	r3, [pc, #32]	; (1054c <sub_remaining+0x24>)
   1052c:	8958      	ldrh	r0, [r3, #10]
   1052e:	b158      	cbz	r0, 10548 <sub_remaining+0x20>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   10530:	4807      	ldr	r0, [pc, #28]	; (10550 <sub_remaining+0x28>)
   10532:	f012 f955 	bl	227e0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1053a:	fba0 0102 	umull	r0, r1, r0, r2
   1053e:	0bc3      	lsrs	r3, r0, #15
   10540:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return k_delayed_work_remaining_get(&sub_timer) / MSEC_PER_SEC;
   10544:	fbb3 f0f2 	udiv	r0, r3, r2
}
   10548:	2100      	movs	r1, #0
   1054a:	bd08      	pop	{r3, pc}
   1054c:	200022cc 	.word	0x200022cc
   10550:	200015e0 	.word	0x200015e0

00010554 <bt_mesh_hb_recv>:

int bt_mesh_hb_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf)
{
   10554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t init_ttl, hops;
	uint16_t feat;

	if (buf->len < 3) {
   10558:	888b      	ldrh	r3, [r1, #4]
   1055a:	2b02      	cmp	r3, #2
{
   1055c:	4607      	mov	r7, r0
   1055e:	460d      	mov	r5, r1
	if (buf->len < 3) {
   10560:	d807      	bhi.n	10572 <bt_mesh_hb_recv+0x1e>
		BT_ERR("Too short heartbeat message");
   10562:	4828      	ldr	r0, [pc, #160]	; (10604 <bt_mesh_hb_recv+0xb0>)
   10564:	2145      	movs	r1, #69	; 0x45
   10566:	f013 fe69 	bl	2423c <printk>
		return -EINVAL;
   1056a:	f06f 0015 	mvn.w	r0, #21
	       (hops == 1U) ? "" : "s", feat);

	notify_recv(hops, feat);

	return 0;
}
   1056e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   10572:	4608      	mov	r0, r1
   10574:	f019 f9cd 	bl	29912 <net_buf_simple_pull_u8>
   10578:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
   1057a:	4628      	mov	r0, r5
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   1057c:	4d22      	ldr	r5, [pc, #136]	; (10608 <bt_mesh_hb_recv+0xb4>)
	feat = net_buf_simple_pull_be16(buf);
   1057e:	f019 f9d8 	bl	29932 <net_buf_simple_pull_be16>
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   10582:	68ba      	ldr	r2, [r7, #8]
   10584:	68ab      	ldr	r3, [r5, #8]
   10586:	429a      	cmp	r2, r3
	feat = net_buf_simple_pull_be16(buf);
   10588:	4606      	mov	r6, r0
	if (rx->ctx.addr != sub.src || rx->ctx.recv_dst != sub.dst) {
   1058a:	d001      	beq.n	10590 <bt_mesh_hb_recv+0x3c>
		return 0;
   1058c:	2000      	movs	r0, #0
   1058e:	e7ee      	b.n	1056e <bt_mesh_hb_recv+0x1a>
	if (!k_delayed_work_pending(&sub_timer)) {
   10590:	481e      	ldr	r0, [pc, #120]	; (1060c <bt_mesh_hb_recv+0xb8>)
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   10592:	7b7f      	ldrb	r7, [r7, #13]
	if (!k_delayed_work_pending(&sub_timer)) {
   10594:	f019 ff23 	bl	2a3de <k_delayed_work_pending>
   10598:	2800      	cmp	r0, #0
   1059a:	d0f7      	beq.n	1058c <bt_mesh_hb_recv+0x38>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
   1059c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   105a0:	1be4      	subs	r4, r4, r7
	sub.min_hops = MIN(sub.min_hops, hops);
   105a2:	7bab      	ldrb	r3, [r5, #14]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   105a4:	4f1a      	ldr	r7, [pc, #104]	; (10610 <bt_mesh_hb_recv+0xbc>)
   105a6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1061c <bt_mesh_hb_recv+0xc8>
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
   105aa:	3401      	adds	r4, #1
   105ac:	b2e4      	uxtb	r4, r4
	sub.min_hops = MIN(sub.min_hops, hops);
   105ae:	42a3      	cmp	r3, r4
   105b0:	bf28      	it	cs
   105b2:	4623      	movcs	r3, r4
   105b4:	73ab      	strb	r3, [r5, #14]
	sub.max_hops = MAX(sub.max_hops, hops);
   105b6:	7beb      	ldrb	r3, [r5, #15]
   105b8:	42a3      	cmp	r3, r4
   105ba:	bf38      	it	cc
   105bc:	4623      	movcc	r3, r4
   105be:	73eb      	strb	r3, [r5, #15]
	if (sub.count < 0xffff) {
   105c0:	89ab      	ldrh	r3, [r5, #12]
   105c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   105c6:	4293      	cmp	r3, r2
		sub.count++;
   105c8:	bf1c      	itt	ne
   105ca:	3301      	addne	r3, #1
   105cc:	81ab      	strhne	r3, [r5, #12]
	sub.remaining = sub_remaining();
   105ce:	f7ff ffab 	bl	10528 <sub_remaining>
   105d2:	6068      	str	r0, [r5, #4]
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   105d4:	4d0f      	ldr	r5, [pc, #60]	; (10614 <bt_mesh_hb_recv+0xc0>)
   105d6:	46b9      	mov	r9, r7
   105d8:	42bd      	cmp	r5, r7
   105da:	d908      	bls.n	105ee <bt_mesh_hb_recv+0x9a>
   105dc:	4641      	mov	r1, r8
   105de:	480e      	ldr	r0, [pc, #56]	; (10618 <bt_mesh_hb_recv+0xc4>)
   105e0:	223c      	movs	r2, #60	; 0x3c
   105e2:	f013 fe2b 	bl	2423c <printk>
   105e6:	213c      	movs	r1, #60	; 0x3c
   105e8:	4640      	mov	r0, r8
   105ea:	f014 f8d9 	bl	247a0 <assert_post_action>
   105ee:	454d      	cmp	r5, r9
   105f0:	d2cc      	bcs.n	1058c <bt_mesh_hb_recv+0x38>
		if (cb->recv) {
   105f2:	682b      	ldr	r3, [r5, #0]
   105f4:	b11b      	cbz	r3, 105fe <bt_mesh_hb_recv+0xaa>
			cb->recv(&sub, hops, feat);
   105f6:	4632      	mov	r2, r6
   105f8:	4621      	mov	r1, r4
   105fa:	4803      	ldr	r0, [pc, #12]	; (10608 <bt_mesh_hb_recv+0xb4>)
   105fc:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_hb_cb, cb) {
   105fe:	3508      	adds	r5, #8
   10600:	e7ea      	b.n	105d8 <bt_mesh_hb_recv+0x84>
   10602:	bf00      	nop
   10604:	0002ec5f 	.word	0x0002ec5f
   10608:	200022cc 	.word	0x200022cc
   1060c:	200015d0 	.word	0x200015d0
   10610:	0002a768 	.word	0x0002a768
   10614:	0002a768 	.word	0x0002a768
   10618:	0002bced 	.word	0x0002bced
   1061c:	0002ed2f 	.word	0x0002ed2f

00010620 <bt_mesh_hb_pub_set>:

	k_delayed_work_cancel(&pub_timer);
}

uint8_t bt_mesh_hb_pub_set(struct bt_mesh_hb_pub *new_pub)
{
   10620:	b538      	push	{r3, r4, r5, lr}
	if (!new_pub || new_pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   10622:	4604      	mov	r4, r0
   10624:	b108      	cbz	r0, 1062a <bt_mesh_hb_pub_set+0xa>
   10626:	8803      	ldrh	r3, [r0, #0]
   10628:	b963      	cbnz	r3, 10644 <bt_mesh_hb_pub_set+0x24>
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   1062a:	4b1b      	ldr	r3, [pc, #108]	; (10698 <bt_mesh_hb_pub_set+0x78>)
	k_delayed_work_cancel(&pub_timer);
   1062c:	481b      	ldr	r0, [pc, #108]	; (1069c <bt_mesh_hb_pub_set+0x7c>)
	pub.dst = BT_MESH_ADDR_UNASSIGNED;
   1062e:	2200      	movs	r2, #0
   10630:	601a      	str	r2, [r3, #0]
	pub.ttl = 0U;
   10632:	711a      	strb	r2, [r3, #4]
	pub.period = 0U;
   10634:	60da      	str	r2, [r3, #12]
	k_delayed_work_cancel(&pub_timer);
   10636:	f011 ff07 	bl	22448 <k_delayed_work_cancel>
		pub_disable();

		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
		    bt_mesh_is_provisioned()) {
   1063a:	f017 f8e6 	bl	2780a <bt_mesh_is_provisioned>
		if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1063e:	bb10      	cbnz	r0, 10686 <bt_mesh_hb_pub_set+0x66>
			bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
		}

		return STATUS_SUCCESS;
   10640:	2000      	movs	r0, #0
		bt_mesh_settings_store_schedule(
					BT_MESH_SETTINGS_HB_PUB_PENDING);
	}

	return STATUS_SUCCESS;
}
   10642:	bd38      	pop	{r3, r4, r5, pc}
	if (!bt_mesh_subnet_get(new_pub->net_idx)) {
   10644:	8900      	ldrh	r0, [r0, #8]
   10646:	f017 fa4e 	bl	27ae6 <bt_mesh_subnet_get>
   1064a:	b930      	cbnz	r0, 1065a <bt_mesh_hb_pub_set+0x3a>
		BT_ERR("Unknown NetKey 0x%04x", new_pub->net_idx);
   1064c:	4814      	ldr	r0, [pc, #80]	; (106a0 <bt_mesh_hb_pub_set+0x80>)
   1064e:	8922      	ldrh	r2, [r4, #8]
   10650:	2145      	movs	r1, #69	; 0x45
   10652:	f013 fdf3 	bl	2423c <printk>
		return STATUS_INVALID_NETKEY;
   10656:	2004      	movs	r0, #4
   10658:	e7f3      	b.n	10642 <bt_mesh_hb_pub_set+0x22>
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   1065a:	88e3      	ldrh	r3, [r4, #6]
	pub = *new_pub;
   1065c:	4d0e      	ldr	r5, [pc, #56]	; (10698 <bt_mesh_hb_pub_set+0x78>)
	new_pub->feat &= BT_MESH_FEAT_SUPPORTED;
   1065e:	f003 030f 	and.w	r3, r3, #15
   10662:	80e3      	strh	r3, [r4, #6]
	pub = *new_pub;
   10664:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   10668:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	if (!bt_mesh_is_provisioned()) {
   1066c:	f017 f8cd 	bl	2780a <bt_mesh_is_provisioned>
   10670:	2800      	cmp	r0, #0
   10672:	d0e5      	beq.n	10640 <bt_mesh_hb_pub_set+0x20>
	if (pub.period && pub.count) {
   10674:	68eb      	ldr	r3, [r5, #12]
   10676:	b153      	cbz	r3, 1068e <bt_mesh_hb_pub_set+0x6e>
   10678:	886b      	ldrh	r3, [r5, #2]
   1067a:	b143      	cbz	r3, 1068e <bt_mesh_hb_pub_set+0x6e>
		k_delayed_work_submit(&pub_timer, K_NO_WAIT);
   1067c:	2200      	movs	r2, #0
   1067e:	2300      	movs	r3, #0
   10680:	4806      	ldr	r0, [pc, #24]	; (1069c <bt_mesh_hb_pub_set+0x7c>)
   10682:	f7ff fea9 	bl	103d8 <k_delayed_work_submit>
			bt_mesh_settings_store_schedule(
   10686:	2006      	movs	r0, #6
   10688:	f003 f924 	bl	138d4 <bt_mesh_settings_store_schedule>
   1068c:	e7d8      	b.n	10640 <bt_mesh_hb_pub_set+0x20>
		k_delayed_work_cancel(&pub_timer);
   1068e:	4803      	ldr	r0, [pc, #12]	; (1069c <bt_mesh_hb_pub_set+0x7c>)
   10690:	f011 feda 	bl	22448 <k_delayed_work_cancel>
   10694:	e7f7      	b.n	10686 <bt_mesh_hb_pub_set+0x66>
   10696:	bf00      	nop
   10698:	200022bc 	.word	0x200022bc
   1069c:	200015a0 	.word	0x200015a0
   106a0:	0002ec44 	.word	0x0002ec44

000106a4 <hb_pub_set>:
	}
}

static int hb_pub_set(const char *name, size_t len_rd,
		      settings_read_cb read_cb, void *cb_arg)
{
   106a4:	b510      	push	{r4, lr}
   106a6:	b086      	sub	sp, #24
   106a8:	4610      	mov	r0, r2
   106aa:	4619      	mov	r1, r3
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val hb_val;
	int err;

	err = bt_mesh_settings_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
   106ac:	466a      	mov	r2, sp
   106ae:	2308      	movs	r3, #8
   106b0:	f003 f8ee 	bl	13890 <bt_mesh_settings_set>
	if (err) {
   106b4:	4604      	mov	r4, r0
   106b6:	b130      	cbz	r0, 106c6 <hb_pub_set+0x22>
		BT_ERR("Failed to set \'hb_val\'");
   106b8:	2145      	movs	r1, #69	; 0x45
   106ba:	4819      	ldr	r0, [pc, #100]	; (10720 <hb_pub_set+0x7c>)
   106bc:	f013 fdbe 	bl	2423c <printk>
	(void)bt_mesh_hb_pub_set(&pub);

	BT_DBG("Restored heartbeat publication");

	return 0;
}
   106c0:	4620      	mov	r0, r4
   106c2:	b006      	add	sp, #24
   106c4:	bd10      	pop	{r4, pc}
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   106c6:	f89d 2002 	ldrb.w	r2, [sp, #2]
	pub.dst = hb_val.dst;
   106ca:	f8bd 3000 	ldrh.w	r3, [sp]
   106ce:	f8ad 3008 	strh.w	r3, [sp, #8]
 * SPDX-License-Identifier: Apache-2.0
 */

static inline uint16_t bt_mesh_hb_pwr2(uint8_t val)
{
	if (!val) {
   106d2:	b302      	cbz	r2, 10716 <hb_pub_set+0x72>
		return 0x0000;
	} else if (val == 0xff || val == 0x11) {
   106d4:	2aff      	cmp	r2, #255	; 0xff
   106d6:	d020      	beq.n	1071a <hb_pub_set+0x76>
   106d8:	2a11      	cmp	r2, #17
   106da:	d01e      	beq.n	1071a <hb_pub_set+0x76>
		return 0xffff;
	} else {
		return (1 << (val - 1));
   106dc:	3a01      	subs	r2, #1
   106de:	2301      	movs	r3, #1
   106e0:	4093      	lsls	r3, r2
   106e2:	b29b      	uxth	r3, r3
	pub.period = bt_mesh_hb_pwr2(hb_val.period);
   106e4:	9305      	str	r3, [sp, #20]
	pub.ttl = hb_val.ttl;
   106e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   106ea:	f88d 300c 	strb.w	r3, [sp, #12]
	pub.feat = hb_val.feat;
   106ee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   106f2:	f8ad 300e 	strh.w	r3, [sp, #14]
	pub.net_idx = hb_val.net_idx;
   106f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   106fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
   106fe:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (hb_val.indefinite) {
   10702:	f89d 3007 	ldrb.w	r3, [sp, #7]
	(void)bt_mesh_hb_pub_set(&pub);
   10706:	a802      	add	r0, sp, #8
	if (hb_val.indefinite) {
   10708:	f343 1300 	sbfx	r3, r3, #4, #1
   1070c:	f8ad 300a 	strh.w	r3, [sp, #10]
	(void)bt_mesh_hb_pub_set(&pub);
   10710:	f7ff ff86 	bl	10620 <bt_mesh_hb_pub_set>
	return 0;
   10714:	e7d4      	b.n	106c0 <hb_pub_set+0x1c>
		return 0x0000;
   10716:	4603      	mov	r3, r0
   10718:	e7e4      	b.n	106e4 <hb_pub_set+0x40>
		return 0xffff;
   1071a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1071e:	e7e1      	b.n	106e4 <hb_pub_set+0x40>
   10720:	0002ecec 	.word	0x0002ecec

00010724 <bt_mesh_hb_pub_get>:
	*get = pub;
   10724:	4b03      	ldr	r3, [pc, #12]	; (10734 <bt_mesh_hb_pub_get+0x10>)
{
   10726:	b510      	push	{r4, lr}
   10728:	4604      	mov	r4, r0
	*get = pub;
   1072a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1072c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   10730:	bd10      	pop	{r4, pc}
   10732:	bf00      	nop
   10734:	200022bc 	.word	0x200022bc

00010738 <bt_mesh_hb_sub_set>:
{
   10738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   1073a:	0403      	lsls	r3, r0, #16
{
   1073c:	4607      	mov	r7, r0
   1073e:	460d      	mov	r5, r1
   10740:	4616      	mov	r6, r2
	if (src != BT_MESH_ADDR_UNASSIGNED && !BT_MESH_ADDR_IS_UNICAST(src)) {
   10742:	d505      	bpl.n	10750 <bt_mesh_hb_sub_set+0x18>
		BT_WARN("Prohibited source address");
   10744:	482a      	ldr	r0, [pc, #168]	; (107f0 <bt_mesh_hb_sub_set+0xb8>)
   10746:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited destination address");
   10748:	f013 fd78 	bl	2423c <printk>
		return STATUS_INVALID_ADDRESS;
   1074c:	2001      	movs	r0, #1
}
   1074e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
   10750:	f481 4300 	eor.w	r3, r1, #32768	; 0x8000
   10754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   10758:	d202      	bcs.n	10760 <bt_mesh_hb_sub_set+0x28>
		BT_WARN("Prohibited destination address");
   1075a:	2157      	movs	r1, #87	; 0x57
   1075c:	4825      	ldr	r0, [pc, #148]	; (107f4 <bt_mesh_hb_sub_set+0xbc>)
   1075e:	e7f3      	b.n	10748 <bt_mesh_hb_sub_set+0x10>
	if (BT_MESH_ADDR_IS_VIRTUAL(dst) || BT_MESH_ADDR_IS_RFU(dst) ||
   10760:	f501 7380 	add.w	r3, r1, #256	; 0x100
   10764:	b29b      	uxth	r3, r3
   10766:	2bfb      	cmp	r3, #251	; 0xfb
   10768:	d9f7      	bls.n	1075a <bt_mesh_hb_sub_set+0x22>
   1076a:	b20b      	sxth	r3, r1
   1076c:	2b00      	cmp	r3, #0
   1076e:	dd03      	ble.n	10778 <bt_mesh_hb_sub_set+0x40>
	    (BT_MESH_ADDR_IS_UNICAST(dst) && dst != bt_mesh_primary_addr())) {
   10770:	f000 fd50 	bl	11214 <bt_mesh_primary_addr>
   10774:	42a8      	cmp	r0, r5
   10776:	d1f0      	bne.n	1075a <bt_mesh_hb_sub_set+0x22>
	if (period > (1U << 16)) {
   10778:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   1077c:	d906      	bls.n	1078c <bt_mesh_hb_sub_set+0x54>
		BT_WARN("Prohibited subscription period %u s", period);
   1077e:	481e      	ldr	r0, [pc, #120]	; (107f8 <bt_mesh_hb_sub_set+0xc0>)
   10780:	4632      	mov	r2, r6
   10782:	2157      	movs	r1, #87	; 0x57
   10784:	f013 fd5a 	bl	2423c <printk>
		return STATUS_CANNOT_SET;
   10788:	200f      	movs	r0, #15
   1078a:	e7e0      	b.n	1074e <bt_mesh_hb_sub_set+0x16>
	if (src == BT_MESH_ADDR_UNASSIGNED || dst == BT_MESH_ADDR_UNASSIGNED) {
   1078c:	4c1b      	ldr	r4, [pc, #108]	; (107fc <bt_mesh_hb_sub_set+0xc4>)
   1078e:	b107      	cbz	r7, 10792 <bt_mesh_hb_sub_set+0x5a>
   10790:	b985      	cbnz	r5, 107b4 <bt_mesh_hb_sub_set+0x7c>
		sub.src = BT_MESH_ADDR_UNASSIGNED;
   10792:	2300      	movs	r3, #0
		sub.count = 0U;
   10794:	e9c4 3302 	strd	r3, r3, [r4, #8]
		sub.period = sub.period - sub_remaining();
   10798:	6825      	ldr	r5, [r4, #0]
   1079a:	f7ff fec5 	bl	10528 <sub_remaining>
   1079e:	1a28      	subs	r0, r5, r0
   107a0:	6020      	str	r0, [r4, #0]
		if (!k_delayed_work_cancel(&sub_timer)) {
   107a2:	4817      	ldr	r0, [pc, #92]	; (10800 <bt_mesh_hb_sub_set+0xc8>)
   107a4:	f011 fe50 	bl	22448 <k_delayed_work_cancel>
   107a8:	b108      	cbz	r0, 107ae <bt_mesh_hb_sub_set+0x76>
	return STATUS_SUCCESS;
   107aa:	2000      	movs	r0, #0
   107ac:	e7cf      	b.n	1074e <bt_mesh_hb_sub_set+0x16>
			notify_sub_end();
   107ae:	f7ff fded 	bl	1038c <notify_sub_end>
   107b2:	e7fa      	b.n	107aa <bt_mesh_hb_sub_set+0x72>
	} else if (period) {
   107b4:	2e00      	cmp	r6, #0
   107b6:	d0ef      	beq.n	10798 <bt_mesh_hb_sub_set+0x60>
		sub.count = 0U;
   107b8:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		k_delayed_work_submit(&sub_timer, K_SECONDS(period));
   107bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		sub.src = src;
   107c0:	8127      	strh	r7, [r4, #8]
		sub.dst = dst;
   107c2:	8165      	strh	r5, [r4, #10]
		sub.count = 0U;
   107c4:	60e3      	str	r3, [r4, #12]
		sub.period = period;
   107c6:	6026      	str	r6, [r4, #0]
			return (t * to_hz + off) / from_hz;
   107c8:	f240 30e7 	movw	r0, #999	; 0x3e7
		k_delayed_work_submit(&sub_timer, K_SECONDS(period));
   107cc:	4356      	muls	r6, r2
   107ce:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   107d2:	2100      	movs	r1, #0
   107d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107d8:	2300      	movs	r3, #0
   107da:	fbe4 0106 	umlal	r0, r1, r4, r6
   107de:	f7f1 fb33 	bl	1e48 <__aeabi_uldivmod>
   107e2:	4602      	mov	r2, r0
   107e4:	460b      	mov	r3, r1
   107e6:	4806      	ldr	r0, [pc, #24]	; (10800 <bt_mesh_hb_sub_set+0xc8>)
   107e8:	f7ff fdf6 	bl	103d8 <k_delayed_work_submit>
   107ec:	e7dd      	b.n	107aa <bt_mesh_hb_sub_set+0x72>
   107ee:	bf00      	nop
   107f0:	0002ec80 	.word	0x0002ec80
   107f4:	0002ec9f 	.word	0x0002ec9f
   107f8:	0002ecc3 	.word	0x0002ecc3
   107fc:	200022cc 	.word	0x200022cc
   10800:	200015d0 	.word	0x200015d0

00010804 <bt_mesh_hb_sub_reset_count>:
	sub.count = 0;
   10804:	4b01      	ldr	r3, [pc, #4]	; (1080c <bt_mesh_hb_sub_reset_count+0x8>)
   10806:	2200      	movs	r2, #0
   10808:	819a      	strh	r2, [r3, #12]
}
   1080a:	4770      	bx	lr
   1080c:	200022cc 	.word	0x200022cc

00010810 <bt_mesh_hb_sub_get>:
	*get = sub;
   10810:	4b04      	ldr	r3, [pc, #16]	; (10824 <bt_mesh_hb_sub_get+0x14>)
{
   10812:	b510      	push	{r4, lr}
   10814:	4604      	mov	r4, r0
	*get = sub;
   10816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	get->remaining = sub_remaining();
   1081c:	f7ff fe84 	bl	10528 <sub_remaining>
   10820:	6060      	str	r0, [r4, #4]
}
   10822:	bd10      	pop	{r4, pc}
   10824:	200022cc 	.word	0x200022cc

00010828 <bt_mesh_hb_feature_changed>:
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   10828:	4b04      	ldr	r3, [pc, #16]	; (1083c <bt_mesh_hb_feature_changed+0x14>)
   1082a:	881a      	ldrh	r2, [r3, #0]
   1082c:	b12a      	cbz	r2, 1083a <bt_mesh_hb_feature_changed+0x12>
	if (!(pub.feat & features)) {
   1082e:	88db      	ldrh	r3, [r3, #6]
   10830:	4218      	tst	r0, r3
   10832:	d002      	beq.n	1083a <bt_mesh_hb_feature_changed+0x12>
	heartbeat_send(NULL, NULL);
   10834:	2000      	movs	r0, #0
   10836:	f7ff bdff 	b.w	10438 <heartbeat_send.constprop.3>
}
   1083a:	4770      	bx	lr
   1083c:	200022bc 	.word	0x200022bc

00010840 <bt_mesh_hb_init>:
	pub.net_idx = BT_MESH_KEY_UNUSED;
   10840:	4b0b      	ldr	r3, [pc, #44]	; (10870 <bt_mesh_hb_init+0x30>)
   10842:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
   10846:	b510      	push	{r4, lr}
	pub.net_idx = BT_MESH_KEY_UNUSED;
   10848:	811a      	strh	r2, [r3, #8]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1084a:	4b0a      	ldr	r3, [pc, #40]	; (10874 <bt_mesh_hb_init+0x34>)
   1084c:	2430      	movs	r4, #48	; 0x30
   1084e:	4622      	mov	r2, r4
   10850:	2100      	movs	r1, #0
   10852:	4618      	mov	r0, r3
   10854:	f015 fcae 	bl	261b4 <memset>
   10858:	4b07      	ldr	r3, [pc, #28]	; (10878 <bt_mesh_hb_init+0x38>)
   1085a:	4a08      	ldr	r2, [pc, #32]	; (1087c <bt_mesh_hb_init+0x3c>)
   1085c:	6042      	str	r2, [r0, #4]
   1085e:	2100      	movs	r1, #0
   10860:	4622      	mov	r2, r4
   10862:	4618      	mov	r0, r3
   10864:	f015 fca6 	bl	261b4 <memset>
   10868:	4a05      	ldr	r2, [pc, #20]	; (10880 <bt_mesh_hb_init+0x40>)
   1086a:	6042      	str	r2, [r0, #4]
}
   1086c:	bd10      	pop	{r4, pc}
   1086e:	bf00      	nop
   10870:	200022bc 	.word	0x200022bc
   10874:	200015a0 	.word	0x200015a0
   10878:	200015d0 	.word	0x200015d0
   1087c:	000104e5 	.word	0x000104e5
   10880:	00027cb9 	.word	0x00027cb9

00010884 <bt_mesh_hb_start>:
	if (pub.count && pub.period) {
   10884:	4b05      	ldr	r3, [pc, #20]	; (1089c <bt_mesh_hb_start+0x18>)
   10886:	885a      	ldrh	r2, [r3, #2]
   10888:	b132      	cbz	r2, 10898 <bt_mesh_hb_start+0x14>
   1088a:	68db      	ldr	r3, [r3, #12]
   1088c:	b123      	cbz	r3, 10898 <bt_mesh_hb_start+0x14>
		k_delayed_work_submit(&pub_timer, K_NO_WAIT);
   1088e:	2200      	movs	r2, #0
   10890:	2300      	movs	r3, #0
   10892:	4803      	ldr	r0, [pc, #12]	; (108a0 <bt_mesh_hb_start+0x1c>)
   10894:	f7ff bda0 	b.w	103d8 <k_delayed_work_submit>
}
   10898:	4770      	bx	lr
   1089a:	bf00      	nop
   1089c:	200022bc 	.word	0x200022bc
   108a0:	200015a0 	.word	0x200015a0

000108a4 <bt_mesh_hb_pub_pending_store>:

BT_MESH_SETTINGS_DEFINE(pub, "HBPub", hb_pub_set);

void bt_mesh_hb_pub_pending_store(void)
{
   108a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_mesh_hb_pub pub;
	struct hb_pub_val val;
	int err;

	bt_mesh_hb_pub_get(&pub);
   108a6:	a802      	add	r0, sp, #8
   108a8:	f7ff ff3c 	bl	10724 <bt_mesh_hb_pub_get>
	if (pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   108ac:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   108b0:	b951      	cbnz	r1, 108c8 <bt_mesh_hb_pub_pending_store+0x24>
		err = settings_delete("bt/mesh/HBPub");
   108b2:	481e      	ldr	r0, [pc, #120]	; (1092c <bt_mesh_hb_pub_pending_store+0x88>)
   108b4:	f014 f902 	bl	24abc <settings_delete>
		val.net_idx = pub.net_idx;

		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
	}

	if (err) {
   108b8:	b118      	cbz	r0, 108c2 <bt_mesh_hb_pub_pending_store+0x1e>
		BT_ERR("Failed to store Heartbeat Publication");
   108ba:	2145      	movs	r1, #69	; 0x45
   108bc:	481c      	ldr	r0, [pc, #112]	; (10930 <bt_mesh_hb_pub_pending_store+0x8c>)
   108be:	f013 fcbd 	bl	2423c <printk>
	} else {
		BT_DBG("Stored Heartbeat Publication");
	}
}
   108c2:	b007      	add	sp, #28
   108c4:	f85d fb04 	ldr.w	pc, [sp], #4
		val.indefinite = (pub.count == 0xffff);
   108c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		val.dst = pub.dst;
   108cc:	f8ad 1000 	strh.w	r1, [sp]
		val.indefinite = (pub.count == 0xffff);
   108d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   108d4:	1a98      	subs	r0, r3, r2
   108d6:	4243      	negs	r3, r0
   108d8:	4143      	adcs	r3, r0
   108da:	f89d 0007 	ldrb.w	r0, [sp, #7]
   108de:	f363 1004 	bfi	r0, r3, #4, #1
		val.period = bt_mesh_hb_log(pub.period);
   108e2:	9b05      	ldr	r3, [sp, #20]
		val.indefinite = (pub.count == 0xffff);
   108e4:	f88d 0007 	strb.w	r0, [sp, #7]
	}
}

static inline uint8_t bt_mesh_hb_log(uint32_t val)
{
	if (!val) {
   108e8:	b13b      	cbz	r3, 108fa <bt_mesh_hb_pub_pending_store+0x56>
		return 0x00;
	} else if (val == 0xffff) {
   108ea:	4293      	cmp	r3, r2
		return 0xff;
	} else {
		return 32 - __builtin_clz(val);
   108ec:	bf1d      	ittte	ne
   108ee:	fab3 f383 	clzne	r3, r3
   108f2:	f1c3 0320 	rsbne	r3, r3, #32
   108f6:	b2db      	uxtbne	r3, r3
		return 0xff;
   108f8:	23ff      	moveq	r3, #255	; 0xff
		val.period = bt_mesh_hb_log(pub.period);
   108fa:	f88d 3002 	strb.w	r3, [sp, #2]
		val.ttl = pub.ttl;
   108fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   10902:	f88d 3003 	strb.w	r3, [sp, #3]
		val.feat = pub.feat;
   10906:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		val.net_idx = pub.net_idx;
   1090a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		val.feat = pub.feat;
   1090e:	f8ad 3004 	strh.w	r3, [sp, #4]
		val.net_idx = pub.net_idx;
   10912:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   10916:	4805      	ldr	r0, [pc, #20]	; (1092c <bt_mesh_hb_pub_pending_store+0x88>)
		val.net_idx = pub.net_idx;
   10918:	f362 030b 	bfi	r3, r2, #0, #12
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   1091c:	4669      	mov	r1, sp
   1091e:	2208      	movs	r2, #8
		val.net_idx = pub.net_idx;
   10920:	f8ad 3006 	strh.w	r3, [sp, #6]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   10924:	f7f4 fcac 	bl	5280 <settings_save_one>
   10928:	e7c6      	b.n	108b8 <bt_mesh_hb_pub_pending_store+0x14>
   1092a:	bf00      	nop
   1092c:	0002ec0b 	.word	0x0002ec0b
   10930:	0002ec19 	.word	0x0002ec19

00010934 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
   10934:	b5f0      	push	{r4, r5, r6, r7, lr}
   10936:	b095      	sub	sp, #84	; 0x54
   10938:	4604      	mov	r4, r0
   1093a:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
   1093c:	4828      	ldr	r0, [pc, #160]	; (109e0 <bt_mesh_k2+0xac>)
   1093e:	a902      	add	r1, sp, #8
{
   10940:	4615      	mov	r5, r2
   10942:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
   10944:	f017 fa15 	bl	27d72 <bt_mesh_s1>
	if (err) {
   10948:	2800      	cmp	r0, #0
   1094a:	d146      	bne.n	109da <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
   1094c:	4621      	mov	r1, r4
   1094e:	ab0a      	add	r3, sp, #40	; 0x28
   10950:	2210      	movs	r2, #16
   10952:	a802      	add	r0, sp, #8
   10954:	f017 fa03 	bl	27d5e <bt_mesh_aes_cmac_one>
	if (err) {
   10958:	4604      	mov	r4, r0
   1095a:	2800      	cmp	r0, #0
   1095c:	d13a      	bne.n	109d4 <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
   1095e:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
   10960:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
   10964:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   10968:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
   1096a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	pad = 0x01;
   1096e:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = 0;
   10972:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   10976:	462b      	mov	r3, r5
   10978:	2203      	movs	r2, #3
   1097a:	a90e      	add	r1, sp, #56	; 0x38
   1097c:	a80a      	add	r0, sp, #40	; 0x28
   1097e:	f017 f9cc 	bl	27d1a <bt_mesh_aes_cmac>
	if (err) {
   10982:	4604      	mov	r4, r0
   10984:	bb30      	cbnz	r0, 109d4 <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
   10986:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
   1098a:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
   1098c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10990:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
   10992:	2302      	movs	r3, #2
   10994:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
   10998:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   1099a:	462b      	mov	r3, r5
   1099c:	2203      	movs	r2, #3
   1099e:	a90e      	add	r1, sp, #56	; 0x38
   109a0:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
   109a2:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   109a4:	f017 f9b9 	bl	27d1a <bt_mesh_aes_cmac>
	if (err) {
   109a8:	4604      	mov	r4, r0
   109aa:	b998      	cbnz	r0, 109d4 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
   109ac:	4632      	mov	r2, r6
   109ae:	4629      	mov	r1, r5
   109b0:	981a      	ldr	r0, [sp, #104]	; 0x68
   109b2:	f015 fbd5 	bl	26160 <memcpy>

	pad = 0x03;
   109b6:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   109b8:	462b      	mov	r3, r5
   109ba:	a90e      	add	r1, sp, #56	; 0x38
   109bc:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
   109be:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
   109c2:	f017 f9aa 	bl	27d1a <bt_mesh_aes_cmac>
	if (err) {
   109c6:	4604      	mov	r4, r0
   109c8:	b920      	cbnz	r0, 109d4 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
   109ca:	4632      	mov	r2, r6
   109cc:	4629      	mov	r1, r5
   109ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
   109d0:	f015 fbc6 	bl	26160 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
   109d4:	4620      	mov	r0, r4
   109d6:	b015      	add	sp, #84	; 0x54
   109d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
   109da:	2401      	movs	r4, #1
   109dc:	e7fa      	b.n	109d4 <bt_mesh_k2+0xa0>
   109de:	bf00      	nop
   109e0:	0002ed76 	.word	0x0002ed76

000109e4 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
   109e4:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   109e6:	4b14      	ldr	r3, [pc, #80]	; (10a38 <bt_mesh_k3+0x54>)
{
   109e8:	b08b      	sub	sp, #44	; 0x2c
   109ea:	4604      	mov	r4, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   109ec:	6818      	ldr	r0, [r3, #0]
   109ee:	9000      	str	r0, [sp, #0]
{
   109f0:	460d      	mov	r5, r1
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   109f2:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
   109f4:	4811      	ldr	r0, [pc, #68]	; (10a3c <bt_mesh_k3+0x58>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
   109f6:	f88d 3004 	strb.w	r3, [sp, #4]
	err = bt_mesh_s1("smk3", tmp);
   109fa:	a902      	add	r1, sp, #8
   109fc:	f017 f9b9 	bl	27d72 <bt_mesh_s1>
	if (err) {
   10a00:	b9b8      	cbnz	r0, 10a32 <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   10a02:	4621      	mov	r1, r4
   10a04:	ab06      	add	r3, sp, #24
   10a06:	2210      	movs	r2, #16
   10a08:	a802      	add	r0, sp, #8
   10a0a:	f017 f9a8 	bl	27d5e <bt_mesh_aes_cmac_one>
	if (err) {
   10a0e:	4604      	mov	r4, r0
   10a10:	b960      	cbnz	r0, 10a2c <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
   10a12:	ab02      	add	r3, sp, #8
   10a14:	2205      	movs	r2, #5
   10a16:	4669      	mov	r1, sp
   10a18:	a806      	add	r0, sp, #24
   10a1a:	f017 f9a0 	bl	27d5e <bt_mesh_aes_cmac_one>
	if (err) {
   10a1e:	4604      	mov	r4, r0
   10a20:	b920      	cbnz	r0, 10a2c <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
   10a22:	2208      	movs	r2, #8
   10a24:	a904      	add	r1, sp, #16
   10a26:	4628      	mov	r0, r5
   10a28:	f015 fb9a 	bl	26160 <memcpy>

	return 0;
}
   10a2c:	4620      	mov	r0, r4
   10a2e:	b00b      	add	sp, #44	; 0x2c
   10a30:	bd30      	pop	{r4, r5, pc}
		return err;
   10a32:	2401      	movs	r4, #1
   10a34:	e7fa      	b.n	10a2c <bt_mesh_k3+0x48>
   10a36:	bf00      	nop
   10a38:	0002ab51 	.word	0x0002ab51
   10a3c:	0002ed7b 	.word	0x0002ed7b

00010a40 <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
   10a40:	b530      	push	{r4, r5, lr}
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   10a42:	4b11      	ldr	r3, [pc, #68]	; (10a88 <bt_mesh_k4+0x48>)
{
   10a44:	b08b      	sub	sp, #44	; 0x2c
   10a46:	4605      	mov	r5, r0
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
   10a48:	6818      	ldr	r0, [r3, #0]
   10a4a:	9001      	str	r0, [sp, #4]
{
   10a4c:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
   10a4e:	480f      	ldr	r0, [pc, #60]	; (10a8c <bt_mesh_k4+0x4c>)
   10a50:	a902      	add	r1, sp, #8
   10a52:	f017 f98e 	bl	27d72 <bt_mesh_s1>
	if (err) {
   10a56:	b9a8      	cbnz	r0, 10a84 <bt_mesh_k4+0x44>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
   10a58:	ab06      	add	r3, sp, #24
   10a5a:	2210      	movs	r2, #16
   10a5c:	4629      	mov	r1, r5
   10a5e:	a802      	add	r0, sp, #8
   10a60:	f017 f97d 	bl	27d5e <bt_mesh_aes_cmac_one>
	if (err) {
   10a64:	b960      	cbnz	r0, 10a80 <bt_mesh_k4+0x40>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
   10a66:	2204      	movs	r2, #4
   10a68:	ab02      	add	r3, sp, #8
   10a6a:	eb0d 0102 	add.w	r1, sp, r2
   10a6e:	a806      	add	r0, sp, #24
   10a70:	f017 f975 	bl	27d5e <bt_mesh_aes_cmac_one>
	if (err) {
   10a74:	b920      	cbnz	r0, 10a80 <bt_mesh_k4+0x40>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
   10a76:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10a7e:	7023      	strb	r3, [r4, #0]

	return 0;
}
   10a80:	b00b      	add	sp, #44	; 0x2c
   10a82:	bd30      	pop	{r4, r5, pc}
		return err;
   10a84:	2001      	movs	r0, #1
   10a86:	e7fb      	b.n	10a80 <bt_mesh_k4+0x40>
   10a88:	0002ab56 	.word	0x0002ab56
   10a8c:	0002ed80 	.word	0x0002ed80

00010a90 <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
   10a90:	b530      	push	{r4, r5, lr}
   10a92:	b087      	sub	sp, #28
   10a94:	4604      	mov	r4, r0
   10a96:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
   10a98:	a902      	add	r1, sp, #8
{
   10a9a:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
   10a9c:	f017 f969 	bl	27d72 <bt_mesh_s1>
	if (err) {
   10aa0:	b940      	cbnz	r0, 10ab4 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
   10aa2:	9500      	str	r5, [sp, #0]
   10aa4:	4b04      	ldr	r3, [pc, #16]	; (10ab8 <bt_mesh_id128+0x28>)
   10aa6:	aa02      	add	r2, sp, #8
   10aa8:	2110      	movs	r1, #16
   10aaa:	4620      	mov	r0, r4
   10aac:	f017 f978 	bl	27da0 <bt_mesh_k1>
}
   10ab0:	b007      	add	sp, #28
   10ab2:	bd30      	pop	{r4, r5, pc}
		return err;
   10ab4:	2001      	movs	r0, #1
   10ab6:	e7fb      	b.n	10ab0 <bt_mesh_id128+0x20>
   10ab8:	0002ed6f 	.word	0x0002ed6f

00010abc <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
   10abc:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
   10abe:	4a06      	ldr	r2, [pc, #24]	; (10ad8 <bt_mesh_fcs_calc+0x1c>)
   10ac0:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
   10ac2:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
   10ac4:	4288      	cmp	r0, r1
   10ac6:	d102      	bne.n	10ace <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
   10ac8:	43d8      	mvns	r0, r3
}
   10aca:	b2c0      	uxtb	r0, r0
   10acc:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
   10ace:	f810 4b01 	ldrb.w	r4, [r0], #1
   10ad2:	4063      	eors	r3, r4
   10ad4:	5cd3      	ldrb	r3, [r2, r3]
   10ad6:	e7f5      	b.n	10ac4 <bt_mesh_fcs_calc+0x8>
   10ad8:	0002ed8f 	.word	0x0002ed8f

00010adc <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
	const uint8_t *data = buf->data;
   10adc:	6802      	ldr	r2, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
   10ade:	8880      	ldrh	r0, [r0, #4]
{
   10ae0:	b530      	push	{r4, r5, lr}
   10ae2:	4c08      	ldr	r4, [pc, #32]	; (10b04 <bt_mesh_fcs_check+0x28>)
   10ae4:	4410      	add	r0, r2
	uint8_t fcs = 0xff;
   10ae6:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
   10ae8:	4282      	cmp	r2, r0
   10aea:	d106      	bne.n	10afa <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
   10aec:	404b      	eors	r3, r1
   10aee:	5ce0      	ldrb	r0, [r4, r3]
}
   10af0:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
   10af4:	4258      	negs	r0, r3
   10af6:	4158      	adcs	r0, r3
   10af8:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
   10afa:	f812 5b01 	ldrb.w	r5, [r2], #1
   10afe:	406b      	eors	r3, r5
   10b00:	5ce3      	ldrb	r3, [r4, r3]
   10b02:	e7f1      	b.n	10ae8 <bt_mesh_fcs_check+0xc>
   10b04:	0002ed8f 	.word	0x0002ed8f

00010b08 <bt_mesh_virtual_addr>:

int bt_mesh_virtual_addr(const uint8_t virtual_label[16], uint16_t *addr)
{
   10b08:	b530      	push	{r4, r5, lr}
   10b0a:	b089      	sub	sp, #36	; 0x24
   10b0c:	4605      	mov	r5, r0
   10b0e:	460c      	mov	r4, r1
	uint8_t salt[16];
	uint8_t tmp[16];
	int err;

	err = bt_mesh_s1("vtad", salt);
   10b10:	480e      	ldr	r0, [pc, #56]	; (10b4c <bt_mesh_virtual_addr+0x44>)
   10b12:	4669      	mov	r1, sp
   10b14:	f017 f92d 	bl	27d72 <bt_mesh_s1>
	if (err) {
   10b18:	b9a8      	cbnz	r0, 10b46 <bt_mesh_virtual_addr+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, virtual_label, 16, tmp);
   10b1a:	ab04      	add	r3, sp, #16
   10b1c:	2210      	movs	r2, #16
   10b1e:	4629      	mov	r1, r5
   10b20:	4668      	mov	r0, sp
   10b22:	f017 f91c 	bl	27d5e <bt_mesh_aes_cmac_one>
	if (err) {
   10b26:	b960      	cbnz	r0, 10b42 <bt_mesh_virtual_addr+0x3a>
	return ((uint16_t)src[0] << 8) | src[1];
   10b28:	f89d 201e 	ldrb.w	r2, [sp, #30]
   10b2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   10b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return err;
	}

	*addr = (sys_get_be16(&tmp[14]) & 0x3fff) | 0x8000;
   10b34:	f3c3 030d 	ubfx	r3, r3, #0, #14
   10b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   10b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   10b40:	8023      	strh	r3, [r4, #0]

	return 0;
}
   10b42:	b009      	add	sp, #36	; 0x24
   10b44:	bd30      	pop	{r4, r5, pc}
		return err;
   10b46:	2001      	movs	r0, #1
   10b48:	e7fb      	b.n	10b42 <bt_mesh_virtual_addr+0x3a>
   10b4a:	bf00      	nop
   10b4c:	0002ed8a 	.word	0x0002ed8a

00010b50 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const uint8_t dhkey[32], const uint8_t conf_salt[16],
			  uint8_t conf_key[16])
{
   10b50:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
   10b52:	4b04      	ldr	r3, [pc, #16]	; (10b64 <bt_mesh_prov_conf_key+0x14>)
   10b54:	9200      	str	r2, [sp, #0]
   10b56:	460a      	mov	r2, r1
   10b58:	2120      	movs	r1, #32
   10b5a:	f017 f921 	bl	27da0 <bt_mesh_k1>
}
   10b5e:	b003      	add	sp, #12
   10b60:	f85d fb04 	ldr.w	pc, [sp], #4
   10b64:	0002ed85 	.word	0x0002ed85

00010b68 <encode_mod_path>:

BT_MESH_SETTINGS_DEFINE(vnd_mod, "v", vnd_mod_set);

static void encode_mod_path(struct bt_mesh_model *mod, bool vnd,
			    const char *key, char *path, size_t path_len)
{
   10b68:	b470      	push	{r4, r5, r6}
   10b6a:	4605      	mov	r5, r0
   10b6c:	4618      	mov	r0, r3
	uint16_t mod_key = (((uint16_t)mod->elem_idx << 8) | mod->mod_idx);
   10b6e:	792e      	ldrb	r6, [r5, #4]
   10b70:	796b      	ldrb	r3, [r5, #5]
{
   10b72:	9c03      	ldr	r4, [sp, #12]

	if (vnd) {
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   10b74:	9203      	str	r2, [sp, #12]
   10b76:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	if (vnd) {
   10b7a:	b121      	cbz	r1, 10b86 <encode_mod_path+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
   10b7c:	4a03      	ldr	r2, [pc, #12]	; (10b8c <encode_mod_path+0x24>)
	} else {
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   10b7e:	4621      	mov	r1, r4
	}
}
   10b80:	bc70      	pop	{r4, r5, r6}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
   10b82:	f013 bb68 	b.w	24256 <snprintk>
   10b86:	4a02      	ldr	r2, [pc, #8]	; (10b90 <encode_mod_path+0x28>)
   10b88:	e7f9      	b.n	10b7e <encode_mod_path+0x16>
   10b8a:	bf00      	nop
   10b8c:	0002f006 	.word	0x0002f006
   10b90:	0002f016 	.word	0x0002f016

00010b94 <model_send>:
{
   10b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b98:	4680      	mov	r8, r0
   10b9a:	460d      	mov	r5, r1
   10b9c:	4691      	mov	r9, r2
   10b9e:	461c      	mov	r4, r3
   10ba0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
	if (!bt_mesh_is_provisioned()) {
   10ba4:	f016 fe31 	bl	2780a <bt_mesh_is_provisioned>
   10ba8:	b938      	cbnz	r0, 10bba <model_send+0x26>
		BT_ERR("Local node is not yet provisioned");
   10baa:	481e      	ldr	r0, [pc, #120]	; (10c24 <model_send+0x90>)
   10bac:	2145      	movs	r1, #69	; 0x45
   10bae:	f013 fb45 	bl	2423c <printk>
		return -EAGAIN;
   10bb2:	f06f 000a 	mvn.w	r0, #10
}
   10bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (net_buf_simple_tailroom(msg) < 4) {
   10bba:	4620      	mov	r0, r4
   10bbc:	f018 fee7 	bl	2998e <net_buf_simple_tailroom>
   10bc0:	2803      	cmp	r0, #3
   10bc2:	d806      	bhi.n	10bd2 <model_send+0x3e>
		BT_ERR("Not enough tailroom for TransMIC");
   10bc4:	2145      	movs	r1, #69	; 0x45
   10bc6:	4818      	ldr	r0, [pc, #96]	; (10c28 <model_send+0x94>)
   10bc8:	f013 fb38 	bl	2423c <printk>
		return -EINVAL;
   10bcc:	f06f 0015 	mvn.w	r0, #21
   10bd0:	e7f1      	b.n	10bb6 <model_send+0x22>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
   10bd2:	88a3      	ldrh	r3, [r4, #4]
   10bd4:	2b74      	cmp	r3, #116	; 0x74
   10bd6:	d906      	bls.n	10be6 <model_send+0x52>
		BT_ERR("Too big message");
   10bd8:	4814      	ldr	r0, [pc, #80]	; (10c2c <model_send+0x98>)
   10bda:	2145      	movs	r1, #69	; 0x45
   10bdc:	f013 fb2e 	bl	2423c <printk>
		return -EMSGSIZE;
   10be0:	f06f 0023 	mvn.w	r0, #35	; 0x23
   10be4:	e7e7      	b.n	10bb6 <model_send+0x22>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
   10be6:	f1b9 0f00 	cmp.w	r9, #0
   10bea:	d10d      	bne.n	10c08 <model_send+0x74>
   10bec:	686b      	ldr	r3, [r5, #4]
   10bee:	885a      	ldrh	r2, [r3, #2]
		if (mod->keys[i] == key ||
   10bf0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   10bf4:	429a      	cmp	r2, r3
   10bf6:	d007      	beq.n	10c08 <model_send+0x74>
   10bf8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
   10bfc:	428b      	cmp	r3, r1
   10bfe:	d10b      	bne.n	10c18 <model_send+0x84>
		     BT_MESH_IS_DEV_KEY(key))) {
   10c00:	1cd3      	adds	r3, r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   10c02:	b29b      	uxth	r3, r3
   10c04:	2b01      	cmp	r3, #1
   10c06:	d807      	bhi.n	10c18 <model_send+0x84>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
   10c08:	463b      	mov	r3, r7
   10c0a:	4632      	mov	r2, r6
   10c0c:	4621      	mov	r1, r4
   10c0e:	4628      	mov	r0, r5
}
   10c10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
   10c14:	f7fe beb8 	b.w	f988 <bt_mesh_trans_send>
		BT_ERR("Model not bound to AppKey 0x%04x", tx->ctx->app_idx);
   10c18:	2145      	movs	r1, #69	; 0x45
   10c1a:	4805      	ldr	r0, [pc, #20]	; (10c30 <model_send+0x9c>)
   10c1c:	f013 fb0e 	bl	2423c <printk>
   10c20:	e7d4      	b.n	10bcc <model_send+0x38>
   10c22:	bf00      	nop
   10c24:	0002f159 	.word	0x0002f159
   10c28:	0002f180 	.word	0x0002f180
   10c2c:	0002f1a6 	.word	0x0002f1a6
   10c30:	0002f1bb 	.word	0x0002f1bb

00010c34 <publish_start>:
{
   10c34:	b510      	push	{r4, lr}
	if (err) {
   10c36:	b131      	cbz	r1, 10c46 <publish_start+0x12>
		BT_ERR("Failed to publish: err %d", err);
   10c38:	460a      	mov	r2, r1
   10c3a:	4809      	ldr	r0, [pc, #36]	; (10c60 <publish_start+0x2c>)
   10c3c:	2145      	movs	r1, #69	; 0x45
}
   10c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to publish: err %d", err);
   10c42:	f013 bafb 	b.w	2423c <printk>
	struct bt_mesh_model_pub *pub = mod->pub;
   10c46:	6894      	ldr	r4, [r2, #8]
	if (pub->count == BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit)) {
   10c48:	7a63      	ldrb	r3, [r4, #9]
   10c4a:	7ae2      	ldrb	r2, [r4, #11]
   10c4c:	f003 0307 	and.w	r3, r3, #7
   10c50:	ebb3 1f52 	cmp.w	r3, r2, lsr #5
   10c54:	d102      	bne.n	10c5c <publish_start+0x28>
		pub->period_start = k_uptime_get_32();
   10c56:	f017 fa22 	bl	2809e <k_uptime_get_32>
   10c5a:	60e0      	str	r0, [r4, #12]
}
   10c5c:	bd10      	pop	{r4, pc}
   10c5e:	bf00      	nop
   10c60:	0002f216 	.word	0x0002f216

00010c64 <store_pending_mod>:
}

static void store_pending_mod(struct bt_mesh_model *mod,
			      struct bt_mesh_elem *elem, bool vnd,
			      bool primary, void *user_data)
{
   10c64:	b570      	push	{r4, r5, r6, lr}
	if (!mod->flags) {
   10c66:	88c3      	ldrh	r3, [r0, #6]
{
   10c68:	b08a      	sub	sp, #40	; 0x28
   10c6a:	4604      	mov	r4, r0
   10c6c:	4616      	mov	r6, r2
	if (!mod->flags) {
   10c6e:	2b00      	cmp	r3, #0
   10c70:	d05e      	beq.n	10d30 <store_pending_mod+0xcc>
		return;
	}

	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   10c72:	07d8      	lsls	r0, r3, #31
   10c74:	d522      	bpl.n	10cbc <store_pending_mod+0x58>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   10c76:	f023 0301 	bic.w	r3, r3, #1
   10c7a:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   10c7c:	89a3      	ldrh	r3, [r4, #12]
   10c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10c82:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
   10c84:	bf18      	it	ne
   10c86:	f8ad 300c 	strhne.w	r3, [sp, #12]
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   10c8a:	f04f 0314 	mov.w	r3, #20
			keys[count++] = mod->keys[i];
   10c8e:	bf14      	ite	ne
   10c90:	2501      	movne	r5, #1
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   10c92:	2500      	moveq	r5, #0
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   10c94:	9300      	str	r3, [sp, #0]
   10c96:	4a3a      	ldr	r2, [pc, #232]	; (10d80 <store_pending_mod+0x11c>)
   10c98:	446b      	add	r3, sp
   10c9a:	4631      	mov	r1, r6
   10c9c:	4620      	mov	r0, r4
   10c9e:	f7ff ff63 	bl	10b68 <encode_mod_path>
	if (count) {
   10ca2:	2d00      	cmp	r5, #0
   10ca4:	d046      	beq.n	10d34 <store_pending_mod+0xd0>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
   10ca6:	2202      	movs	r2, #2
   10ca8:	a903      	add	r1, sp, #12
   10caa:	a805      	add	r0, sp, #20
   10cac:	f7f4 fae8 	bl	5280 <settings_save_one>
	if (err) {
   10cb0:	b120      	cbz	r0, 10cbc <store_pending_mod+0x58>
		BT_ERR("Failed to store %s value", log_strdup(path));
   10cb2:	aa05      	add	r2, sp, #20
   10cb4:	2145      	movs	r1, #69	; 0x45
   10cb6:	4833      	ldr	r0, [pc, #204]	; (10d84 <store_pending_mod+0x120>)
   10cb8:	f013 fac0 	bl	2423c <printk>
		store_pending_mod_bind(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   10cbc:	88e3      	ldrh	r3, [r4, #6]
   10cbe:	0799      	lsls	r1, r3, #30
   10cc0:	d51b      	bpl.n	10cfa <store_pending_mod+0x96>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   10cc2:	89e5      	ldrh	r5, [r4, #14]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   10cc4:	f023 0302 	bic.w	r3, r3, #2
   10cc8:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   10cca:	b115      	cbz	r5, 10cd2 <store_pending_mod+0x6e>
			groups[count++] = mod->groups[i];
   10ccc:	f8ad 500c 	strh.w	r5, [sp, #12]
   10cd0:	2501      	movs	r5, #1
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   10cd2:	2314      	movs	r3, #20
   10cd4:	9300      	str	r3, [sp, #0]
   10cd6:	4a2c      	ldr	r2, [pc, #176]	; (10d88 <store_pending_mod+0x124>)
   10cd8:	446b      	add	r3, sp
   10cda:	4631      	mov	r1, r6
   10cdc:	4620      	mov	r0, r4
   10cde:	f7ff ff43 	bl	10b68 <encode_mod_path>
	if (count) {
   10ce2:	b35d      	cbz	r5, 10d3c <store_pending_mod+0xd8>
		err = settings_save_one(path, groups,
   10ce4:	2202      	movs	r2, #2
   10ce6:	a903      	add	r1, sp, #12
   10ce8:	a805      	add	r0, sp, #20
   10cea:	f7f4 fac9 	bl	5280 <settings_save_one>
	if (err) {
   10cee:	b120      	cbz	r0, 10cfa <store_pending_mod+0x96>
		BT_ERR("Failed to store %s value", log_strdup(path));
   10cf0:	aa05      	add	r2, sp, #20
   10cf2:	2145      	movs	r1, #69	; 0x45
   10cf4:	4823      	ldr	r0, [pc, #140]	; (10d84 <store_pending_mod+0x120>)
   10cf6:	f013 faa1 	bl	2423c <printk>
		store_pending_mod_sub(mod, vnd);
	}

	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   10cfa:	88e3      	ldrh	r3, [r4, #6]
   10cfc:	075a      	lsls	r2, r3, #29
   10cfe:	d517      	bpl.n	10d30 <store_pending_mod+0xcc>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   10d00:	f023 0304 	bic.w	r3, r3, #4
   10d04:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   10d06:	2314      	movs	r3, #20
   10d08:	9300      	str	r3, [sp, #0]
   10d0a:	4a20      	ldr	r2, [pc, #128]	; (10d8c <store_pending_mod+0x128>)
   10d0c:	446b      	add	r3, sp
   10d0e:	4631      	mov	r1, r6
   10d10:	4620      	mov	r0, r4
   10d12:	f7ff ff29 	bl	10b68 <encode_mod_path>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   10d16:	68a3      	ldr	r3, [r4, #8]
   10d18:	b10b      	cbz	r3, 10d1e <store_pending_mod+0xba>
   10d1a:	889a      	ldrh	r2, [r3, #4]
   10d1c:	b992      	cbnz	r2, 10d44 <store_pending_mod+0xe0>
		err = settings_delete(path);
   10d1e:	a805      	add	r0, sp, #20
   10d20:	f013 fecc 	bl	24abc <settings_delete>
	if (err) {
   10d24:	b120      	cbz	r0, 10d30 <store_pending_mod+0xcc>
		BT_ERR("Failed to store %s value", log_strdup(path));
   10d26:	aa05      	add	r2, sp, #20
   10d28:	2145      	movs	r1, #69	; 0x45
   10d2a:	4816      	ldr	r0, [pc, #88]	; (10d84 <store_pending_mod+0x120>)
   10d2c:	f013 fa86 	bl	2423c <printk>
		store_pending_mod_pub(mod, vnd);
	}
}
   10d30:	b00a      	add	sp, #40	; 0x28
   10d32:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_delete(path);
   10d34:	a805      	add	r0, sp, #20
   10d36:	f013 fec1 	bl	24abc <settings_delete>
   10d3a:	e7b9      	b.n	10cb0 <store_pending_mod+0x4c>
		err = settings_delete(path);
   10d3c:	a805      	add	r0, sp, #20
   10d3e:	f013 febd 	bl	24abc <settings_delete>
   10d42:	e7d4      	b.n	10cee <store_pending_mod+0x8a>
		pub.addr = mod->pub->addr;
   10d44:	f8ad 200c 	strh.w	r2, [sp, #12]
		pub.key = mod->pub->key;
   10d48:	88da      	ldrh	r2, [r3, #6]
   10d4a:	f3c2 020b 	ubfx	r2, r2, #0, #12
   10d4e:	f8ad 200e 	strh.w	r2, [sp, #14]
		pub.ttl = mod->pub->ttl;
   10d52:	6899      	ldr	r1, [r3, #8]
   10d54:	9a04      	ldr	r2, [sp, #16]
   10d56:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
   10d5a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
   10d5e:	430a      	orrs	r2, r1
   10d60:	9204      	str	r2, [sp, #16]
		pub.cred = mod->pub->cred;
   10d62:	79db      	ldrb	r3, [r3, #7]
   10d64:	f89d 2013 	ldrb.w	r2, [sp, #19]
   10d68:	f3c3 1300 	ubfx	r3, r3, #4, #1
   10d6c:	f363 1204 	bfi	r2, r3, #4, #1
   10d70:	f88d 2013 	strb.w	r2, [sp, #19]
		err = settings_save_one(path, &pub, sizeof(pub));
   10d74:	a903      	add	r1, sp, #12
   10d76:	2208      	movs	r2, #8
   10d78:	a805      	add	r0, sp, #20
   10d7a:	f7f4 fa81 	bl	5280 <settings_save_one>
   10d7e:	e7d1      	b.n	10d24 <store_pending_mod+0xc0>
   10d80:	0002f235 	.word	0x0002f235
   10d84:	0002f23a 	.word	0x0002f23a
   10d88:	0002f258 	.word	0x0002f258
   10d8c:	0002f25c 	.word	0x0002f25c

00010d90 <mod_init>:
{
   10d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d94:	9d06      	ldr	r5, [sp, #24]
   10d96:	460e      	mov	r6, r1
	if (*err) {
   10d98:	6829      	ldr	r1, [r5, #0]
{
   10d9a:	4604      	mov	r4, r0
   10d9c:	4690      	mov	r8, r2
	if (*err) {
   10d9e:	bb19      	cbnz	r1, 10de8 <mod_init+0x58>
	if (mod->pub) {
   10da0:	6887      	ldr	r7, [r0, #8]
   10da2:	b13f      	cbz	r7, 10db4 <mod_init+0x24>
		mod->pub->mod = mod;
   10da4:	4638      	mov	r0, r7
   10da6:	2230      	movs	r2, #48	; 0x30
   10da8:	f840 4b18 	str.w	r4, [r0], #24
   10dac:	f015 fa02 	bl	261b4 <memset>
   10db0:	4b0f      	ldr	r3, [pc, #60]	; (10df0 <mod_init+0x60>)
   10db2:	61fb      	str	r3, [r7, #28]
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   10db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10db8:	81a3      	strh	r3, [r4, #12]
	mod->elem_idx = elem - dev_comp->elem;
   10dba:	4b0e      	ldr	r3, [pc, #56]	; (10df4 <mod_init+0x64>)
   10dbc:	681b      	ldr	r3, [r3, #0]
   10dbe:	68db      	ldr	r3, [r3, #12]
   10dc0:	1af3      	subs	r3, r6, r3
   10dc2:	111b      	asrs	r3, r3, #4
   10dc4:	7123      	strb	r3, [r4, #4]
	if (vnd) {
   10dc6:	4b0c      	ldr	r3, [pc, #48]	; (10df8 <mod_init+0x68>)
   10dc8:	f1b8 0f00 	cmp.w	r8, #0
   10dcc:	d00e      	beq.n	10dec <mod_init+0x5c>
		mod->mod_idx = mod - elem->vnd_models;
   10dce:	68f2      	ldr	r2, [r6, #12]
		mod->mod_idx = mod - elem->models;
   10dd0:	1aa2      	subs	r2, r4, r2
   10dd2:	1092      	asrs	r2, r2, #2
   10dd4:	4353      	muls	r3, r2
   10dd6:	b2db      	uxtb	r3, r3
   10dd8:	7163      	strb	r3, [r4, #5]
	if (mod->cb && mod->cb->init) {
   10dda:	6963      	ldr	r3, [r4, #20]
   10ddc:	b123      	cbz	r3, 10de8 <mod_init+0x58>
   10dde:	689b      	ldr	r3, [r3, #8]
   10de0:	b113      	cbz	r3, 10de8 <mod_init+0x58>
		*err = mod->cb->init(mod);
   10de2:	4620      	mov	r0, r4
   10de4:	4798      	blx	r3
   10de6:	6028      	str	r0, [r5, #0]
}
   10de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mod->mod_idx = mod - elem->models;
   10dec:	68b2      	ldr	r2, [r6, #8]
   10dee:	e7ef      	b.n	10dd0 <mod_init+0x40>
   10df0:	00011505 	.word	0x00011505
   10df4:	200022dc 	.word	0x200022dc
   10df8:	b6db6db7 	.word	0xb6db6db7

00010dfc <bt_mesh_model_foreach>:
{
   10dfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
   10e00:	f8df a068 	ldr.w	sl, [pc, #104]	; 10e6c <bt_mesh_model_foreach+0x70>
{
   10e04:	4607      	mov	r7, r0
   10e06:	4688      	mov	r8, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
   10e08:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
   10e0a:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
   10e0e:	f8da 3000 	ldr.w	r3, [sl]
   10e12:	689a      	ldr	r2, [r3, #8]
   10e14:	42aa      	cmp	r2, r5
   10e16:	d802      	bhi.n	10e1e <bt_mesh_model_foreach+0x22>
}
   10e18:	b002      	add	sp, #8
   10e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   10e1e:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
   10e20:	2600      	movs	r6, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   10e22:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
   10e26:	7923      	ldrb	r3, [r4, #4]
   10e28:	42b3      	cmp	r3, r6
   10e2a:	dc05      	bgt.n	10e38 <bt_mesh_model_foreach+0x3c>
		for (j = 0; j < elem->vnd_model_count; j++) {
   10e2c:	2600      	movs	r6, #0
   10e2e:	7963      	ldrb	r3, [r4, #5]
   10e30:	42b3      	cmp	r3, r6
   10e32:	dc0e      	bgt.n	10e52 <bt_mesh_model_foreach+0x56>
	for (i = 0; i < dev_comp->elem_count; i++) {
   10e34:	3501      	adds	r5, #1
   10e36:	e7ea      	b.n	10e0e <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
   10e38:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
   10e3a:	f8cd 8000 	str.w	r8, [sp]
   10e3e:	fab5 f385 	clz	r3, r5
   10e42:	fb09 0006 	mla	r0, r9, r6, r0
   10e46:	095b      	lsrs	r3, r3, #5
   10e48:	2200      	movs	r2, #0
   10e4a:	4621      	mov	r1, r4
   10e4c:	47b8      	blx	r7
		for (j = 0; j < elem->model_count; j++) {
   10e4e:	3601      	adds	r6, #1
   10e50:	e7e9      	b.n	10e26 <bt_mesh_model_foreach+0x2a>
			struct bt_mesh_model *model = &elem->vnd_models[j];
   10e52:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
   10e54:	f8cd 8000 	str.w	r8, [sp]
   10e58:	fab5 f385 	clz	r3, r5
   10e5c:	fb09 0006 	mla	r0, r9, r6, r0
   10e60:	095b      	lsrs	r3, r3, #5
   10e62:	2201      	movs	r2, #1
   10e64:	4621      	mov	r1, r4
   10e66:	47b8      	blx	r7
		for (j = 0; j < elem->vnd_model_count; j++) {
   10e68:	3601      	adds	r6, #1
   10e6a:	e7e0      	b.n	10e2e <bt_mesh_model_foreach+0x32>
   10e6c:	200022dc 	.word	0x200022dc

00010e70 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
   10e70:	6882      	ldr	r2, [r0, #8]
   10e72:	b302      	cbz	r2, 10eb6 <bt_mesh_model_pub_period_get+0x46>
	switch (mod->pub->period >> 6) {
   10e74:	7a93      	ldrb	r3, [r2, #10]
   10e76:	0999      	lsrs	r1, r3, #6
   10e78:	2902      	cmp	r1, #2
   10e7a:	d013      	beq.n	10ea4 <bt_mesh_model_pub_period_get+0x34>
   10e7c:	2903      	cmp	r1, #3
   10e7e:	d016      	beq.n	10eae <bt_mesh_model_pub_period_get+0x3e>
   10e80:	2901      	cmp	r1, #1
   10e82:	d009      	beq.n	10e98 <bt_mesh_model_pub_period_get+0x28>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
   10e84:	2064      	movs	r0, #100	; 0x64
   10e86:	fb13 f000 	smulbb	r0, r3, r0
	if (mod->pub->fast_period) {
   10e8a:	7ad3      	ldrb	r3, [r2, #11]
   10e8c:	06da      	lsls	r2, r3, #27
   10e8e:	d513      	bpl.n	10eb8 <bt_mesh_model_pub_period_get+0x48>
		return period >> mod->pub->period_div;
   10e90:	f003 030f 	and.w	r3, r3, #15
   10e94:	4118      	asrs	r0, r3
   10e96:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
   10e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   10ea0:	4358      	muls	r0, r3
		break;
   10ea2:	e7f2      	b.n	10e8a <bt_mesh_model_pub_period_get+0x1a>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
   10ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10ea8:	f242 7010 	movw	r0, #10000	; 0x2710
   10eac:	e7f8      	b.n	10ea0 <bt_mesh_model_pub_period_get+0x30>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
   10eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10eb2:	4802      	ldr	r0, [pc, #8]	; (10ebc <bt_mesh_model_pub_period_get+0x4c>)
   10eb4:	e7f4      	b.n	10ea0 <bt_mesh_model_pub_period_get+0x30>
		return 0;
   10eb6:	4610      	mov	r0, r2
}
   10eb8:	4770      	bx	lr
   10eba:	bf00      	nop
   10ebc:	000927c0 	.word	0x000927c0

00010ec0 <publish_sent>:
{
   10ec0:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
   10ec2:	688e      	ldr	r6, [r1, #8]
   10ec4:	7af3      	ldrb	r3, [r6, #11]
   10ec6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
   10eca:	460d      	mov	r5, r1
	if (mod->pub->count) {
   10ecc:	d01c      	beq.n	10f08 <publish_sent+0x48>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
   10ece:	7a70      	ldrb	r0, [r6, #9]
   10ed0:	08c4      	lsrs	r4, r0, #3
   10ed2:	2032      	movs	r0, #50	; 0x32
   10ed4:	fb04 0000 	mla	r0, r4, r0, r0
		k_delayed_work_submit(&mod->pub->timer, K_MSEC(delay));
   10ed8:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   10edc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10ee0:	f240 30e7 	movw	r0, #999	; 0x3e7
   10ee4:	2100      	movs	r1, #0
   10ee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10eea:	2300      	movs	r3, #0
   10eec:	fbc6 0104 	smlal	r0, r1, r6, r4
   10ef0:	f7f0 ffaa 	bl	1e48 <__aeabi_uldivmod>
   10ef4:	68ad      	ldr	r5, [r5, #8]
   10ef6:	3518      	adds	r5, #24
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10ef8:	4602      	mov	r2, r0
   10efa:	460b      	mov	r3, r1
   10efc:	480d      	ldr	r0, [pc, #52]	; (10f34 <publish_sent+0x74>)
   10efe:	4629      	mov	r1, r5
}
   10f00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10f04:	f011 ba30 	b.w	22368 <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
   10f08:	4608      	mov	r0, r1
   10f0a:	f7ff ffb1 	bl	10e70 <bt_mesh_model_pub_period_get>
	if (!period) {
   10f0e:	4604      	mov	r4, r0
   10f10:	b170      	cbz	r0, 10f30 <publish_sent+0x70>
	elapsed = k_uptime_get_32() - pub->period_start;
   10f12:	f017 f8c4 	bl	2809e <k_uptime_get_32>
   10f16:	68f3      	ldr	r3, [r6, #12]
   10f18:	1ac2      	subs	r2, r0, r3
	if (elapsed >= period) {
   10f1a:	4294      	cmp	r4, r2
   10f1c:	d805      	bhi.n	10f2a <publish_sent+0x6a>
		BT_WARN("Publication sending took longer than the period");
   10f1e:	4806      	ldr	r0, [pc, #24]	; (10f38 <publish_sent+0x78>)
   10f20:	2157      	movs	r1, #87	; 0x57
   10f22:	f013 f98b 	bl	2423c <printk>
		return 1;
   10f26:	2001      	movs	r0, #1
   10f28:	e7d6      	b.n	10ed8 <publish_sent+0x18>
	return period - elapsed;
   10f2a:	441c      	add	r4, r3
	if (delay) {
   10f2c:	1a20      	subs	r0, r4, r0
   10f2e:	d1d3      	bne.n	10ed8 <publish_sent+0x18>
}
   10f30:	bd70      	pop	{r4, r5, r6, pc}
   10f32:	bf00      	nop
   10f34:	20001988 	.word	0x20001988
   10f38:	0002f1e1 	.word	0x0002f1e1

00010f3c <commit_mod>:
	return err;
}

static void commit_mod(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		       bool vnd, bool primary, void *user_data)
{
   10f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mod->pub && mod->pub->update &&
   10f3e:	6884      	ldr	r4, [r0, #8]
{
   10f40:	4605      	mov	r5, r0
	if (mod->pub && mod->pub->update &&
   10f42:	b1d4      	cbz	r4, 10f7a <commit_mod+0x3e>
   10f44:	6963      	ldr	r3, [r4, #20]
   10f46:	b1c3      	cbz	r3, 10f7a <commit_mod+0x3e>
   10f48:	88a3      	ldrh	r3, [r4, #4]
   10f4a:	b1b3      	cbz	r3, 10f7a <commit_mod+0x3e>
	    mod->pub->addr != BT_MESH_ADDR_UNASSIGNED) {
		int32_t ms = bt_mesh_model_pub_period_get(mod);
   10f4c:	f7ff ff90 	bl	10e70 <bt_mesh_model_pub_period_get>

		if (ms > 0) {
   10f50:	1e07      	subs	r7, r0, #0
   10f52:	dd12      	ble.n	10f7a <commit_mod+0x3e>
   10f54:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10f58:	f240 30e7 	movw	r0, #999	; 0x3e7
   10f5c:	2100      	movs	r1, #0
   10f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10f62:	2300      	movs	r3, #0
   10f64:	fbc6 0107 	smlal	r0, r1, r6, r7
   10f68:	f7f0 ff6e 	bl	1e48 <__aeabi_uldivmod>
   10f6c:	4602      	mov	r2, r0
   10f6e:	460b      	mov	r3, r1
   10f70:	4805      	ldr	r0, [pc, #20]	; (10f88 <commit_mod+0x4c>)
   10f72:	f104 0118 	add.w	r1, r4, #24
   10f76:	f011 f9f7 	bl	22368 <k_delayed_work_submit_to_queue>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		return;
	}

	for (int i = 0; i < ARRAY_SIZE(mod->groups); i++) {
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   10f7a:	89e8      	ldrh	r0, [r5, #14]
   10f7c:	b118      	cbz	r0, 10f86 <commit_mod+0x4a>
			bt_mesh_lpn_group_add(mod->groups[i]);
		}
	}
}
   10f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_mesh_lpn_group_add(mod->groups[i]);
   10f82:	f003 b9e9 	b.w	14358 <bt_mesh_lpn_group_add>
}
   10f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f88:	20001988 	.word	0x20001988

00010f8c <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
   10f8c:	4b03      	ldr	r3, [pc, #12]	; (10f9c <bt_mesh_model_elem+0x10>)
   10f8e:	7900      	ldrb	r0, [r0, #4]
   10f90:	681b      	ldr	r3, [r3, #0]
   10f92:	68db      	ldr	r3, [r3, #12]
}
   10f94:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   10f98:	4770      	bx	lr
   10f9a:	bf00      	nop
   10f9c:	200022dc 	.word	0x200022dc

00010fa0 <bt_mesh_model_get>:
{
   10fa0:	b538      	push	{r3, r4, r5, lr}
	if (elem_idx >= dev_comp->elem_count) {
   10fa2:	4b13      	ldr	r3, [pc, #76]	; (10ff0 <bt_mesh_model_get+0x50>)
   10fa4:	681b      	ldr	r3, [r3, #0]
   10fa6:	689d      	ldr	r5, [r3, #8]
   10fa8:	42a9      	cmp	r1, r5
{
   10faa:	4604      	mov	r4, r0
	if (elem_idx >= dev_comp->elem_count) {
   10fac:	d306      	bcc.n	10fbc <bt_mesh_model_get+0x1c>
		BT_ERR("Invalid element index %u", elem_idx);
   10fae:	4811      	ldr	r0, [pc, #68]	; (10ff4 <bt_mesh_model_get+0x54>)
   10fb0:	460a      	mov	r2, r1
   10fb2:	2145      	movs	r1, #69	; 0x45
   10fb4:	f013 f942 	bl	2423c <printk>
		return NULL;
   10fb8:	2000      	movs	r0, #0
}
   10fba:	bd38      	pop	{r3, r4, r5, pc}
	elem = &dev_comp->elem[elem_idx];
   10fbc:	68db      	ldr	r3, [r3, #12]
   10fbe:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	if (vnd) {
   10fc2:	b15c      	cbz	r4, 10fdc <bt_mesh_model_get+0x3c>
		if (mod_idx >= elem->vnd_model_count) {
   10fc4:	794b      	ldrb	r3, [r1, #5]
   10fc6:	4293      	cmp	r3, r2
   10fc8:	d802      	bhi.n	10fd0 <bt_mesh_model_get+0x30>
			BT_ERR("Invalid vendor model index %u", mod_idx);
   10fca:	2145      	movs	r1, #69	; 0x45
   10fcc:	480a      	ldr	r0, [pc, #40]	; (10ff8 <bt_mesh_model_get+0x58>)
   10fce:	e7f1      	b.n	10fb4 <bt_mesh_model_get+0x14>
		return &elem->vnd_models[mod_idx];
   10fd0:	68c8      	ldr	r0, [r1, #12]
   10fd2:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
		return &elem->models[mod_idx];
   10fd6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   10fda:	e7ee      	b.n	10fba <bt_mesh_model_get+0x1a>
		if (mod_idx >= elem->model_count) {
   10fdc:	790b      	ldrb	r3, [r1, #4]
   10fde:	4293      	cmp	r3, r2
   10fe0:	d802      	bhi.n	10fe8 <bt_mesh_model_get+0x48>
			BT_ERR("Invalid SIG model index %u", mod_idx);
   10fe2:	2145      	movs	r1, #69	; 0x45
   10fe4:	4805      	ldr	r0, [pc, #20]	; (10ffc <bt_mesh_model_get+0x5c>)
   10fe6:	e7e5      	b.n	10fb4 <bt_mesh_model_get+0x14>
		return &elem->models[mod_idx];
   10fe8:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
   10fec:	6888      	ldr	r0, [r1, #8]
   10fee:	e7f2      	b.n	10fd6 <bt_mesh_model_get+0x36>
   10ff0:	200022dc 	.word	0x200022dc
   10ff4:	0002eea0 	.word	0x0002eea0
   10ff8:	0002eebe 	.word	0x0002eebe
   10ffc:	0002eee1 	.word	0x0002eee1

00011000 <mod_set>:
{
   11000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11004:	b086      	sub	sp, #24
   11006:	4605      	mov	r5, r0
   11008:	4616      	mov	r6, r2
   1100a:	461f      	mov	r7, r3
   1100c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	if (!name) {
   11010:	4689      	mov	r9, r1
   11012:	b931      	cbnz	r1, 11022 <mod_set+0x22>
		BT_ERR("Insufficient number of arguments");
   11014:	2145      	movs	r1, #69	; 0x45
   11016:	485c      	ldr	r0, [pc, #368]	; (11188 <mod_set+0x188>)
   11018:	f013 f910 	bl	2423c <printk>
	return -ENOENT;
   1101c:	f06f 0401 	mvn.w	r4, #1
   11020:	e027      	b.n	11072 <mod_set+0x72>
	mod_key = strtol(name, NULL, 16);
   11022:	2210      	movs	r2, #16
   11024:	2100      	movs	r1, #0
   11026:	4648      	mov	r0, r9
   11028:	f014 ffab 	bl	25f82 <strtol>
	elem_idx = mod_key >> 8;
   1102c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   11030:	b2c4      	uxtb	r4, r0
   11032:	4622      	mov	r2, r4
   11034:	4628      	mov	r0, r5
   11036:	4651      	mov	r1, sl
   11038:	f7ff ffb2 	bl	10fa0 <bt_mesh_model_get>
	if (!mod) {
   1103c:	4605      	mov	r5, r0
   1103e:	b930      	cbnz	r0, 1104e <mod_set+0x4e>
		BT_ERR("Failed to get model for elem_idx %u mod_idx %u",
   11040:	4623      	mov	r3, r4
   11042:	4652      	mov	r2, sl
   11044:	2145      	movs	r1, #69	; 0x45
   11046:	4851      	ldr	r0, [pc, #324]	; (1118c <mod_set+0x18c>)
   11048:	f013 f8f8 	bl	2423c <printk>
		return -ENOENT;
   1104c:	e7e6      	b.n	1101c <mod_set+0x1c>
	len = settings_name_next(name, &next);
   1104e:	4648      	mov	r0, r9
   11050:	a903      	add	r1, sp, #12
   11052:	f013 fd57 	bl	24b04 <settings_name_next>
   11056:	4681      	mov	r9, r0
	if (!next) {
   11058:	9803      	ldr	r0, [sp, #12]
   1105a:	2800      	cmp	r0, #0
   1105c:	d0da      	beq.n	11014 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
   1105e:	464a      	mov	r2, r9
   11060:	494b      	ldr	r1, [pc, #300]	; (11190 <mod_set+0x190>)
   11062:	f015 f82a 	bl	260ba <strncmp>
   11066:	b9a8      	cbnz	r0, 11094 <mod_set+0x94>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   11068:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1106c:	81ab      	strh	r3, [r5, #12]
	if (len_rd == 0) {
   1106e:	b926      	cbnz	r6, 1107a <mod_set+0x7a>
		return 0;
   11070:	2400      	movs	r4, #0
}
   11072:	4620      	mov	r0, r4
   11074:	b006      	add	sp, #24
   11076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
   1107a:	2202      	movs	r2, #2
   1107c:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   11080:	4640      	mov	r0, r8
   11082:	47b8      	blx	r7
	if (len < 0) {
   11084:	1e04      	subs	r4, r0, #0
   11086:	daf3      	bge.n	11070 <mod_set+0x70>
		BT_ERR("Failed to read value (err %zd)", len);
   11088:	4622      	mov	r2, r4
   1108a:	2145      	movs	r1, #69	; 0x45
   1108c:	4841      	ldr	r0, [pc, #260]	; (11194 <mod_set+0x194>)
   1108e:	f013 f8d5 	bl	2423c <printk>
		return len;
   11092:	e7ee      	b.n	11072 <mod_set+0x72>
	if (!strncmp(next, "sub", len)) {
   11094:	4940      	ldr	r1, [pc, #256]	; (11198 <mod_set+0x198>)
   11096:	9803      	ldr	r0, [sp, #12]
   11098:	464a      	mov	r2, r9
   1109a:	f015 f80e 	bl	260ba <strncmp>
   1109e:	4601      	mov	r1, r0
   110a0:	b948      	cbnz	r0, 110b6 <mod_set+0xb6>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   110a2:	350e      	adds	r5, #14
   110a4:	2202      	movs	r2, #2
   110a6:	4628      	mov	r0, r5
   110a8:	f015 f884 	bl	261b4 <memset>
	if (len_rd == 0) {
   110ac:	2e00      	cmp	r6, #0
   110ae:	d0df      	beq.n	11070 <mod_set+0x70>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   110b0:	2202      	movs	r2, #2
   110b2:	4629      	mov	r1, r5
   110b4:	e7e4      	b.n	11080 <mod_set+0x80>
	if (!strncmp(next, "pub", len)) {
   110b6:	464a      	mov	r2, r9
   110b8:	4938      	ldr	r1, [pc, #224]	; (1119c <mod_set+0x19c>)
   110ba:	9803      	ldr	r0, [sp, #12]
   110bc:	f014 fffd 	bl	260ba <strncmp>
   110c0:	4604      	mov	r4, r0
   110c2:	2800      	cmp	r0, #0
   110c4:	d13d      	bne.n	11142 <mod_set+0x142>
	if (!mod->pub) {
   110c6:	68ab      	ldr	r3, [r5, #8]
   110c8:	b933      	cbnz	r3, 110d8 <mod_set+0xd8>
		BT_WARN("Model has no publication context!");
   110ca:	2157      	movs	r1, #87	; 0x57
   110cc:	4834      	ldr	r0, [pc, #208]	; (111a0 <mod_set+0x1a0>)
   110ce:	f013 f8b5 	bl	2423c <printk>
		return -EINVAL;
   110d2:	f06f 0415 	mvn.w	r4, #21
   110d6:	e7cc      	b.n	11072 <mod_set+0x72>
	if (len_rd == 0) {
   110d8:	b946      	cbnz	r6, 110ec <mod_set+0xec>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   110da:	685a      	ldr	r2, [r3, #4]
   110dc:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   110e0:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
   110e2:	689a      	ldr	r2, [r3, #8]
   110e4:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
   110e8:	609a      	str	r2, [r3, #8]
		return 0;
   110ea:	e7c2      	b.n	11072 <mod_set+0x72>
	err = bt_mesh_settings_set(read_cb, cb_arg, &pub, sizeof(pub));
   110ec:	2308      	movs	r3, #8
   110ee:	aa04      	add	r2, sp, #16
   110f0:	4641      	mov	r1, r8
   110f2:	4638      	mov	r0, r7
   110f4:	f002 fbcc 	bl	13890 <bt_mesh_settings_set>
	if (err) {
   110f8:	4604      	mov	r4, r0
   110fa:	b120      	cbz	r0, 11106 <mod_set+0x106>
		BT_ERR("Failed to set \'model-pub\'");
   110fc:	2145      	movs	r1, #69	; 0x45
   110fe:	4829      	ldr	r0, [pc, #164]	; (111a4 <mod_set+0x1a4>)
   11100:	f013 f89c 	bl	2423c <printk>
		return err;
   11104:	e7b5      	b.n	11072 <mod_set+0x72>
	mod->pub->addr = pub.addr;
   11106:	68ab      	ldr	r3, [r5, #8]
   11108:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	mod->pub->key = pub.key;
   1110c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	mod->pub->addr = pub.addr;
   11110:	809a      	strh	r2, [r3, #4]
	mod->pub->key = pub.key;
   11112:	88da      	ldrh	r2, [r3, #6]
   11114:	f361 020b 	bfi	r2, r1, #0, #12
	mod->pub->cred = pub.cred;
   11118:	f89d 1017 	ldrb.w	r1, [sp, #23]
	mod->pub->key = pub.key;
   1111c:	80da      	strh	r2, [r3, #6]
	mod->pub->cred = pub.cred;
   1111e:	f3c1 1100 	ubfx	r1, r1, #4, #1
   11122:	f3c2 2207 	ubfx	r2, r2, #8, #8
   11126:	f361 1204 	bfi	r2, r1, #4, #1
   1112a:	71da      	strb	r2, [r3, #7]
	mod->pub->period = pub.period;
   1112c:	f89d 2016 	ldrb.w	r2, [sp, #22]
	mod->pub->ttl = pub.ttl;
   11130:	f8bd 1014 	ldrh.w	r1, [sp, #20]
	mod->pub->period = pub.period;
   11134:	729a      	strb	r2, [r3, #10]
	mod->pub->count = 0U;
   11136:	7ada      	ldrb	r2, [r3, #11]
	mod->pub->ttl = pub.ttl;
   11138:	8119      	strh	r1, [r3, #8]
	mod->pub->count = 0U;
   1113a:	f360 1247 	bfi	r2, r0, #5, #3
   1113e:	72da      	strb	r2, [r3, #11]
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
   11140:	e797      	b.n	11072 <mod_set+0x72>
	if (!strncmp(next, "data", len)) {
   11142:	464a      	mov	r2, r9
   11144:	4918      	ldr	r1, [pc, #96]	; (111a8 <mod_set+0x1a8>)
   11146:	9803      	ldr	r0, [sp, #12]
   11148:	f014 ffb7 	bl	260ba <strncmp>
   1114c:	4604      	mov	r4, r0
   1114e:	b9a0      	cbnz	r0, 1117a <mod_set+0x17a>
	settings_name_next(name, &next);
   11150:	a904      	add	r1, sp, #16
   11152:	9803      	ldr	r0, [sp, #12]
   11154:	f013 fcd6 	bl	24b04 <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
   11158:	696b      	ldr	r3, [r5, #20]
   1115a:	2b00      	cmp	r3, #0
   1115c:	d089      	beq.n	11072 <mod_set+0x72>
   1115e:	f8d3 9000 	ldr.w	r9, [r3]
   11162:	f1b9 0f00 	cmp.w	r9, #0
   11166:	d084      	beq.n	11072 <mod_set+0x72>
		return mod->cb->settings_set(mod, next, len_rd,
   11168:	f8cd 8000 	str.w	r8, [sp]
   1116c:	463b      	mov	r3, r7
   1116e:	4632      	mov	r2, r6
   11170:	9904      	ldr	r1, [sp, #16]
   11172:	4628      	mov	r0, r5
   11174:	47c8      	blx	r9
   11176:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
   11178:	e77b      	b.n	11072 <mod_set+0x72>
	BT_WARN("Unknown module key %s", next);
   1117a:	9a03      	ldr	r2, [sp, #12]
   1117c:	480b      	ldr	r0, [pc, #44]	; (111ac <mod_set+0x1ac>)
   1117e:	2157      	movs	r1, #87	; 0x57
   11180:	f013 f85c 	bl	2423c <printk>
   11184:	e74a      	b.n	1101c <mod_set+0x1c>
   11186:	bf00      	nop
   11188:	0002ca06 	.word	0x0002ca06
   1118c:	0002f09b 	.word	0x0002f09b
   11190:	0002f235 	.word	0x0002f235
   11194:	0002f0cf 	.word	0x0002f0cf
   11198:	0002f258 	.word	0x0002f258
   1119c:	0002f25c 	.word	0x0002f25c
   111a0:	0002f0f3 	.word	0x0002f0f3
   111a4:	0002f11a 	.word	0x0002f11a
   111a8:	0002f139 	.word	0x0002f139
   111ac:	0002f13e 	.word	0x0002f13e

000111b0 <bt_mesh_comp_register>:
	if (!comp->elem_count) {
   111b0:	6883      	ldr	r3, [r0, #8]
{
   111b2:	b507      	push	{r0, r1, r2, lr}
	if (!comp->elem_count) {
   111b4:	b15b      	cbz	r3, 111ce <bt_mesh_comp_register+0x1e>
	dev_comp = comp;
   111b6:	4b07      	ldr	r3, [pc, #28]	; (111d4 <bt_mesh_comp_register+0x24>)
	bt_mesh_model_foreach(mod_init, &err);
   111b8:	a901      	add	r1, sp, #4
	dev_comp = comp;
   111ba:	6018      	str	r0, [r3, #0]
	err = 0;
   111bc:	2300      	movs	r3, #0
	bt_mesh_model_foreach(mod_init, &err);
   111be:	4806      	ldr	r0, [pc, #24]	; (111d8 <bt_mesh_comp_register+0x28>)
	err = 0;
   111c0:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
   111c2:	f7ff fe1b 	bl	10dfc <bt_mesh_model_foreach>
	return err;
   111c6:	9801      	ldr	r0, [sp, #4]
}
   111c8:	b003      	add	sp, #12
   111ca:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   111ce:	f06f 0015 	mvn.w	r0, #21
   111d2:	e7f9      	b.n	111c8 <bt_mesh_comp_register+0x18>
   111d4:	200022dc 	.word	0x200022dc
   111d8:	00010d91 	.word	0x00010d91

000111dc <bt_mesh_comp_provision>:
	dev_primary_addr = addr;
   111dc:	4b08      	ldr	r3, [pc, #32]	; (11200 <bt_mesh_comp_provision+0x24>)
{
   111de:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
   111e0:	8018      	strh	r0, [r3, #0]
	for (i = 0; i < dev_comp->elem_count; i++) {
   111e2:	4b08      	ldr	r3, [pc, #32]	; (11204 <bt_mesh_comp_provision+0x28>)
   111e4:	6819      	ldr	r1, [r3, #0]
   111e6:	688c      	ldr	r4, [r1, #8]
   111e8:	2300      	movs	r3, #0
   111ea:	18c2      	adds	r2, r0, r3
   111ec:	42a3      	cmp	r3, r4
   111ee:	b292      	uxth	r2, r2
   111f0:	d100      	bne.n	111f4 <bt_mesh_comp_provision+0x18>
}
   111f2:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
   111f4:	011d      	lsls	r5, r3, #4
   111f6:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
   111f8:	3301      	adds	r3, #1
		elem->addr = addr++;
   111fa:	5372      	strh	r2, [r6, r5]
		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
   111fc:	e7f5      	b.n	111ea <bt_mesh_comp_provision+0xe>
   111fe:	bf00      	nop
   11200:	2000352c 	.word	0x2000352c
   11204:	200022dc 	.word	0x200022dc

00011208 <bt_mesh_comp_unprovision>:
	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
   11208:	4b01      	ldr	r3, [pc, #4]	; (11210 <bt_mesh_comp_unprovision+0x8>)
   1120a:	2200      	movs	r2, #0
   1120c:	801a      	strh	r2, [r3, #0]
}
   1120e:	4770      	bx	lr
   11210:	2000352c 	.word	0x2000352c

00011214 <bt_mesh_primary_addr>:
}
   11214:	4b01      	ldr	r3, [pc, #4]	; (1121c <bt_mesh_primary_addr+0x8>)
   11216:	8818      	ldrh	r0, [r3, #0]
   11218:	4770      	bx	lr
   1121a:	bf00      	nop
   1121c:	2000352c 	.word	0x2000352c

00011220 <bt_mesh_elem_find>:
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   11220:	4b1b      	ldr	r3, [pc, #108]	; (11290 <bt_mesh_elem_find+0x70>)
{
   11222:	b5f0      	push	{r4, r5, r6, r7, lr}
   11224:	681d      	ldr	r5, [r3, #0]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   11226:	b203      	sxth	r3, r0
   11228:	2b00      	cmp	r3, #0
{
   1122a:	4604      	mov	r4, r0
   1122c:	68ae      	ldr	r6, [r5, #8]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
   1122e:	dd27      	ble.n	11280 <bt_mesh_elem_find+0x60>
		index = (addr - dev_comp->elem[0].addr);
   11230:	68ea      	ldr	r2, [r5, #12]
   11232:	8813      	ldrh	r3, [r2, #0]
   11234:	1ac0      	subs	r0, r0, r3
		if (index < dev_comp->elem_count) {
   11236:	b280      	uxth	r0, r0
   11238:	42b0      	cmp	r0, r6
   1123a:	d226      	bcs.n	1128a <bt_mesh_elem_find+0x6a>
			return &dev_comp->elem[index];
   1123c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
}
   11240:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
   11242:	68e8      	ldr	r0, [r5, #12]
   11244:	eb00 1002 	add.w	r0, r0, r2, lsl #4
	for (i = 0; i < elem->model_count; i++) {
   11248:	2200      	movs	r2, #0
   1124a:	f890 c004 	ldrb.w	ip, [r0, #4]
   1124e:	4562      	cmp	r2, ip
   11250:	db06      	blt.n	11260 <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
   11252:	f890 c005 	ldrb.w	ip, [r0, #5]
   11256:	2200      	movs	r2, #0
   11258:	4562      	cmp	r2, ip
   1125a:	db09      	blt.n	11270 <bt_mesh_elem_find+0x50>
   1125c:	3301      	adds	r3, #1
   1125e:	e011      	b.n	11284 <bt_mesh_elem_find+0x64>
		if (mod->groups[i] == addr) {
   11260:	6881      	ldr	r1, [r0, #8]
   11262:	fb07 1102 	mla	r1, r7, r2, r1
   11266:	89c9      	ldrh	r1, [r1, #14]
   11268:	42a1      	cmp	r1, r4
   1126a:	d0e9      	beq.n	11240 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->model_count; i++) {
   1126c:	3201      	adds	r2, #1
   1126e:	e7ee      	b.n	1124e <bt_mesh_elem_find+0x2e>
		if (mod->groups[i] == addr) {
   11270:	68c1      	ldr	r1, [r0, #12]
   11272:	fb07 1102 	mla	r1, r7, r2, r1
   11276:	89c9      	ldrh	r1, [r1, #14]
   11278:	42a1      	cmp	r1, r4
   1127a:	d0e1      	beq.n	11240 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->vnd_model_count; i++) {
   1127c:	3201      	adds	r2, #1
   1127e:	e7eb      	b.n	11258 <bt_mesh_elem_find+0x38>
   11280:	2300      	movs	r3, #0
		if (mod->groups[i] == addr) {
   11282:	271c      	movs	r7, #28
   11284:	b29a      	uxth	r2, r3
	for (index = 0; index < dev_comp->elem_count; index++) {
   11286:	42b2      	cmp	r2, r6
   11288:	d3db      	bcc.n	11242 <bt_mesh_elem_find+0x22>
			return NULL;
   1128a:	2000      	movs	r0, #0
   1128c:	e7d8      	b.n	11240 <bt_mesh_elem_find+0x20>
   1128e:	bf00      	nop
   11290:	200022dc 	.word	0x200022dc

00011294 <bt_mesh_elem_count>:
	return dev_comp->elem_count;
   11294:	4b01      	ldr	r3, [pc, #4]	; (1129c <bt_mesh_elem_count+0x8>)
   11296:	681b      	ldr	r3, [r3, #0]
}
   11298:	7a18      	ldrb	r0, [r3, #8]
   1129a:	4770      	bx	lr
   1129c:	200022dc 	.word	0x200022dc

000112a0 <bt_mesh_model_recv>:
{
   112a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
   112a4:	680b      	ldr	r3, [r1, #0]
   112a6:	781b      	ldrb	r3, [r3, #0]
   112a8:	099a      	lsrs	r2, r3, #6
   112aa:	2a02      	cmp	r2, #2
{
   112ac:	b085      	sub	sp, #20
   112ae:	4680      	mov	r8, r0
   112b0:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
   112b2:	d01e      	beq.n	112f2 <bt_mesh_model_recv+0x52>
   112b4:	2a03      	cmp	r2, #3
   112b6:	d026      	beq.n	11306 <bt_mesh_model_recv+0x66>
		if (buf->data[0] == 0x7f) {
   112b8:	2b7f      	cmp	r3, #127	; 0x7f
   112ba:	d10a      	bne.n	112d2 <bt_mesh_model_recv+0x32>
			BT_ERR("Ignoring RFU OpCode");
   112bc:	4850      	ldr	r0, [pc, #320]	; (11400 <bt_mesh_model_recv+0x160>)
   112be:	2145      	movs	r1, #69	; 0x45
			BT_ERR("Too short payload for 2-octet OpCode");
   112c0:	f012 ffbc 	bl	2423c <printk>
		BT_WARN("Unable to decode OpCode");
   112c4:	484f      	ldr	r0, [pc, #316]	; (11404 <bt_mesh_model_recv+0x164>)
   112c6:	2157      	movs	r1, #87	; 0x57
}
   112c8:	b005      	add	sp, #20
   112ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_WARN("Unable to decode OpCode");
   112ce:	f012 bfb5 	b.w	2423c <printk>
		*opcode = net_buf_simple_pull_u8(buf);
   112d2:	4608      	mov	r0, r1
   112d4:	f018 fb1d 	bl	29912 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
   112d8:	4606      	mov	r6, r0
		op->func(model, &rx->ctx, buf);
   112da:	f108 0304 	add.w	r3, r8, #4
	for (i = 0; i < dev_comp->elem_count; i++) {
   112de:	2700      	movs	r7, #0
		op->func(model, &rx->ctx, buf);
   112e0:	9301      	str	r3, [sp, #4]
	for (i = 0; i < dev_comp->elem_count; i++) {
   112e2:	4b49      	ldr	r3, [pc, #292]	; (11408 <bt_mesh_model_recv+0x168>)
   112e4:	681b      	ldr	r3, [r3, #0]
   112e6:	689a      	ldr	r2, [r3, #8]
   112e8:	42ba      	cmp	r2, r7
   112ea:	d81c      	bhi.n	11326 <bt_mesh_model_recv+0x86>
}
   112ec:	b005      	add	sp, #20
   112ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
   112f2:	888b      	ldrh	r3, [r1, #4]
   112f4:	2b01      	cmp	r3, #1
   112f6:	d802      	bhi.n	112fe <bt_mesh_model_recv+0x5e>
			BT_ERR("Too short payload for 2-octet OpCode");
   112f8:	2145      	movs	r1, #69	; 0x45
   112fa:	4844      	ldr	r0, [pc, #272]	; (1140c <bt_mesh_model_recv+0x16c>)
   112fc:	e7e0      	b.n	112c0 <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_be16(buf);
   112fe:	4608      	mov	r0, r1
   11300:	f018 fb17 	bl	29932 <net_buf_simple_pull_be16>
   11304:	e7e8      	b.n	112d8 <bt_mesh_model_recv+0x38>
		if (buf->len < 3) {
   11306:	888b      	ldrh	r3, [r1, #4]
   11308:	2b02      	cmp	r3, #2
   1130a:	d802      	bhi.n	11312 <bt_mesh_model_recv+0x72>
			BT_ERR("Too short payload for 3-octet OpCode");
   1130c:	2145      	movs	r1, #69	; 0x45
   1130e:	4840      	ldr	r0, [pc, #256]	; (11410 <bt_mesh_model_recv+0x170>)
   11310:	e7d6      	b.n	112c0 <bt_mesh_model_recv+0x20>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
   11312:	4608      	mov	r0, r1
   11314:	f018 fafd 	bl	29912 <net_buf_simple_pull_u8>
   11318:	4606      	mov	r6, r0
		*opcode |= net_buf_simple_pull_le16(buf);
   1131a:	4620      	mov	r0, r4
   1131c:	f018 fb01 	bl	29922 <net_buf_simple_pull_le16>
   11320:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
		return 0;
   11324:	e7d9      	b.n	112da <bt_mesh_model_recv+0x3a>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
   11326:	68d8      	ldr	r0, [r3, #12]
   11328:	eb00 1307 	add.w	r3, r0, r7, lsl #4
			models = elem->vnd_models;
   1132c:	e9d3 2502 	ldrd	r2, r5, [r3, #8]
		if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
   11330:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
			count = elem->model_count;
   11334:	bf36      	itet	cc
   11336:	f893 c004 	ldrbcc.w	ip, [r3, #4]
			count = elem->vnd_model_count;
   1133a:	f893 c005 	ldrbcs.w	ip, [r3, #5]
			models = elem->models;
   1133e:	4615      	movcc	r5, r2
   11340:	2100      	movs	r1, #0
	for (i = 0U; i < model_count; i++) {
   11342:	b2cb      	uxtb	r3, r1
   11344:	4563      	cmp	r3, ip
   11346:	d301      	bcc.n	1134c <bt_mesh_model_recv+0xac>
	for (i = 0; i < dev_comp->elem_count; i++) {
   11348:	3701      	adds	r7, #1
   1134a:	e7ca      	b.n	112e2 <bt_mesh_model_recv+0x42>
		for (op = (*model)->op; op->func; op++) {
   1134c:	f8d5 a010 	ldr.w	sl, [r5, #16]
   11350:	f8da 2008 	ldr.w	r2, [sl, #8]
   11354:	b912      	cbnz	r2, 1135c <bt_mesh_model_recv+0xbc>
   11356:	3101      	adds	r1, #1
   11358:	351c      	adds	r5, #28
   1135a:	e7f2      	b.n	11342 <bt_mesh_model_recv+0xa2>
			if (op->opcode == opcode) {
   1135c:	f8da 2000 	ldr.w	r2, [sl]
   11360:	42b2      	cmp	r2, r6
   11362:	d026      	beq.n	113b2 <bt_mesh_model_recv+0x112>
		for (op = (*model)->op; op->func; op++) {
   11364:	f10a 0a0c 	add.w	sl, sl, #12
   11368:	e7f2      	b.n	11350 <bt_mesh_model_recv+0xb0>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
   1136a:	f481 4200 	eor.w	r2, r1, #32768	; 0x8000
   1136e:	f5b2 4ffe 	cmp.w	r2, #32512	; 0x7f00
   11372:	d806      	bhi.n	11382 <bt_mesh_model_recv+0xe2>
		return !!bt_mesh_model_find_group(&mod, dst);
   11374:	a803      	add	r0, sp, #12
   11376:	f016 feb5 	bl	280e4 <bt_mesh_model_find_group>
   1137a:	3000      	adds	r0, #0
   1137c:	bf18      	it	ne
   1137e:	2001      	movne	r0, #1
   11380:	e030      	b.n	113e4 <bt_mesh_model_recv+0x144>
	return mod->elem_idx == 0;
   11382:	7928      	ldrb	r0, [r5, #4]
   11384:	fab0 f080 	clz	r0, r0
   11388:	0940      	lsrs	r0, r0, #5
   1138a:	e02b      	b.n	113e4 <bt_mesh_model_recv+0x144>
	state->offset = net_buf_simple_headroom(buf);
   1138c:	4620      	mov	r0, r4
   1138e:	f018 fafa 	bl	29986 <net_buf_simple_headroom>
		op->func(model, &rx->ctx, buf);
   11392:	f8da 3008 	ldr.w	r3, [sl, #8]
   11396:	9901      	ldr	r1, [sp, #4]
	state->len = buf->len;
   11398:	f8b4 b004 	ldrh.w	fp, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   1139c:	4681      	mov	r9, r0
   1139e:	4622      	mov	r2, r4
   113a0:	4628      	mov	r0, r5
   113a2:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   113a4:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   113a6:	f8a4 b004 	strh.w	fp, [r4, #4]
	buf->data = buf->__buf + state->offset;
   113aa:	fa13 f389 	uxtah	r3, r3, r9
   113ae:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
   113b0:	e7ca      	b.n	11348 <bt_mesh_model_recv+0xa8>
		if (!model_has_key(model, rx->ctx.app_idx)) {
   113b2:	f8b8 2006 	ldrh.w	r2, [r8, #6]
		if (mod->keys[i] == key ||
   113b6:	89a9      	ldrh	r1, [r5, #12]
   113b8:	428a      	cmp	r2, r1
   113ba:	d007      	beq.n	113cc <bt_mesh_model_recv+0x12c>
   113bc:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
   113c0:	4561      	cmp	r1, ip
   113c2:	d1c1      	bne.n	11348 <bt_mesh_model_recv+0xa8>
		     BT_MESH_IS_DEV_KEY(key))) {
   113c4:	3203      	adds	r2, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   113c6:	b292      	uxth	r2, r2
   113c8:	2a01      	cmp	r2, #1
   113ca:	d8bd      	bhi.n	11348 <bt_mesh_model_recv+0xa8>
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   113cc:	f8b8 100a 	ldrh.w	r1, [r8, #10]
   113d0:	9503      	str	r5, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
   113d2:	b20a      	sxth	r2, r1
   113d4:	2a00      	cmp	r2, #0
   113d6:	ddc8      	ble.n	1136a <bt_mesh_model_recv+0xca>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
   113d8:	792a      	ldrb	r2, [r5, #4]
   113da:	0112      	lsls	r2, r2, #4
   113dc:	5a80      	ldrh	r0, [r0, r2]
   113de:	1a43      	subs	r3, r0, r1
   113e0:	4258      	negs	r0, r3
   113e2:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
   113e4:	2800      	cmp	r0, #0
   113e6:	d0af      	beq.n	11348 <bt_mesh_model_recv+0xa8>
		if (buf->len < op->min_len) {
   113e8:	88a1      	ldrh	r1, [r4, #4]
   113ea:	f8da 2004 	ldr.w	r2, [sl, #4]
   113ee:	4291      	cmp	r1, r2
   113f0:	d2cc      	bcs.n	1138c <bt_mesh_model_recv+0xec>
			BT_ERR("Too short message for OpCode 0x%08x", opcode);
   113f2:	4632      	mov	r2, r6
   113f4:	2145      	movs	r1, #69	; 0x45
   113f6:	4807      	ldr	r0, [pc, #28]	; (11414 <bt_mesh_model_recv+0x174>)
   113f8:	f012 ff20 	bl	2423c <printk>
			continue;
   113fc:	e7a4      	b.n	11348 <bt_mesh_model_recv+0xa8>
   113fe:	bf00      	nop
   11400:	0002ef53 	.word	0x0002ef53
   11404:	0002efc0 	.word	0x0002efc0
   11408:	200022dc 	.word	0x200022dc
   1140c:	0002ef6c 	.word	0x0002ef6c
   11410:	0002ef96 	.word	0x0002ef96
   11414:	0002efdd 	.word	0x0002efdd

00011418 <bt_mesh_model_publish>:
{
   11418:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_model_pub *pub = model->pub;
   1141a:	6884      	ldr	r4, [r0, #8]
{
   1141c:	b0aa      	sub	sp, #168	; 0xa8
		.app_idx = pub->key,
   1141e:	88e1      	ldrh	r1, [r4, #6]
		.addr = pub->addr,
   11420:	88a6      	ldrh	r6, [r4, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11422:	ab0c      	add	r3, sp, #48	; 0x30
   11424:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
   11428:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1142c:	9303      	str	r3, [sp, #12]
		.app_idx = pub->key,
   1142e:	f3c1 010b 	ubfx	r1, r1, #0, #12
	struct bt_mesh_msg_ctx ctx = {
   11432:	2300      	movs	r3, #0
   11434:	e9cd 3306 	strd	r3, r3, [sp, #24]
   11438:	f8ad 101a 	strh.w	r1, [sp, #26]
		.send_rel = pub->send_rel,
   1143c:	79e1      	ldrb	r1, [r4, #7]
	struct bt_mesh_msg_ctx ctx = {
   1143e:	f8ad 3020 	strh.w	r3, [sp, #32]
		.send_rel = pub->send_rel,
   11442:	f3c1 1140 	ubfx	r1, r1, #5, #1
	struct bt_mesh_msg_ctx ctx = {
   11446:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   1144a:	7a21      	ldrb	r1, [r4, #8]
   1144c:	f8ad 601c 	strh.w	r6, [sp, #28]
   11450:	aa06      	add	r2, sp, #24
	struct bt_mesh_net_tx tx = {
   11452:	9309      	str	r3, [sp, #36]	; 0x24
   11454:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
{
   11458:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
   1145a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
		.src = bt_mesh_model_elem(model)->addr,
   1145e:	f7ff fd95 	bl	10f8c <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   11462:	8803      	ldrh	r3, [r0, #0]
   11464:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   11468:	2e00      	cmp	r6, #0
   1146a:	d041      	beq.n	114f0 <bt_mesh_model_publish+0xd8>
	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
   1146c:	6923      	ldr	r3, [r4, #16]
   1146e:	889b      	ldrh	r3, [r3, #4]
   11470:	3304      	adds	r3, #4
   11472:	2b78      	cmp	r3, #120	; 0x78
   11474:	dd08      	ble.n	11488 <bt_mesh_model_publish+0x70>
		BT_ERR("Message does not fit maximum SDU size");
   11476:	2145      	movs	r1, #69	; 0x45
   11478:	481f      	ldr	r0, [pc, #124]	; (114f8 <bt_mesh_model_publish+0xe0>)
   1147a:	f012 fedf 	bl	2423c <printk>
		return -EMSGSIZE;
   1147e:	f06f 0523 	mvn.w	r5, #35	; 0x23
}
   11482:	4628      	mov	r0, r5
   11484:	b02a      	add	sp, #168	; 0xa8
   11486:	bd70      	pop	{r4, r5, r6, pc}
	if (pub->count) {
   11488:	7ae3      	ldrb	r3, [r4, #11]
   1148a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1148e:	d007      	beq.n	114a0 <bt_mesh_model_publish+0x88>
		BT_WARN("Clearing publish retransmit timer");
   11490:	481a      	ldr	r0, [pc, #104]	; (114fc <bt_mesh_model_publish+0xe4>)
   11492:	2157      	movs	r1, #87	; 0x57
   11494:	f012 fed2 	bl	2423c <printk>
		k_delayed_work_cancel(&pub->timer);
   11498:	f104 0018 	add.w	r0, r4, #24
   1149c:	f010 ffd4 	bl	22448 <k_delayed_work_cancel>
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   114a0:	6923      	ldr	r3, [r4, #16]
   114a2:	a803      	add	r0, sp, #12
   114a4:	889a      	ldrh	r2, [r3, #4]
   114a6:	6819      	ldr	r1, [r3, #0]
   114a8:	f018 fa79 	bl	2999e <net_buf_simple_add_mem>
	tx.friend_cred = pub->cred;
   114ac:	79e3      	ldrb	r3, [r4, #7]
   114ae:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   114b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
   114b6:	f363 0200 	bfi	r2, r3, #0, #1
   114ba:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
   114be:	7ae3      	ldrb	r3, [r4, #11]
   114c0:	7a62      	ldrb	r2, [r4, #9]
   114c2:	f362 1347 	bfi	r3, r2, #5, #3
   114c6:	72e3      	strb	r3, [r4, #11]
	err = model_send(model, &tx, true, &sdu, &pub_sent_cb, model);
   114c8:	4b0d      	ldr	r3, [pc, #52]	; (11500 <bt_mesh_model_publish+0xe8>)
   114ca:	9501      	str	r5, [sp, #4]
   114cc:	9300      	str	r3, [sp, #0]
   114ce:	4628      	mov	r0, r5
   114d0:	ab03      	add	r3, sp, #12
   114d2:	2201      	movs	r2, #1
   114d4:	a909      	add	r1, sp, #36	; 0x24
   114d6:	f7ff fb5d 	bl	10b94 <model_send>
	if (err) {
   114da:	4605      	mov	r5, r0
   114dc:	2800      	cmp	r0, #0
   114de:	d0d0      	beq.n	11482 <bt_mesh_model_publish+0x6a>
	pub->count = 0U;
   114e0:	7ae3      	ldrb	r3, [r4, #11]
	publish_sent(err, pub->mod);
   114e2:	6821      	ldr	r1, [r4, #0]
	pub->count = 0U;
   114e4:	f36f 1347 	bfc	r3, #5, #3
   114e8:	72e3      	strb	r3, [r4, #11]
	publish_sent(err, pub->mod);
   114ea:	f7ff fce9 	bl	10ec0 <publish_sent>
   114ee:	e7c8      	b.n	11482 <bt_mesh_model_publish+0x6a>
		return -EADDRNOTAVAIL;
   114f0:	f06f 0530 	mvn.w	r5, #48	; 0x30
   114f4:	e7c5      	b.n	11482 <bt_mesh_model_publish+0x6a>
   114f6:	bf00      	nop
   114f8:	0002ef01 	.word	0x0002ef01
   114fc:	0002ef2c 	.word	0x0002ef2c
   11500:	0002b1e8 	.word	0x0002b1e8

00011504 <mod_publish>:
{
   11504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   11508:	f850 8c18 	ldr.w	r8, [r0, #-24]
{
   1150c:	4604      	mov	r4, r0
   1150e:	b0a8      	sub	sp, #160	; 0xa0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   11510:	4640      	mov	r0, r8
   11512:	f7ff fcad 	bl	10e70 <bt_mesh_model_pub_period_get>
	if (pub->count) {
   11516:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
   1151a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
   1151e:	4607      	mov	r7, r0
	if (pub->count) {
   11520:	d05c      	beq.n	115dc <mod_publish+0xd8>
	struct bt_mesh_model_pub *pub = mod->pub;
   11522:	f8d8 5008 	ldr.w	r5, [r8, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11526:	ab0a      	add	r3, sp, #40	; 0x28
   11528:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
   1152c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	struct bt_mesh_msg_ctx ctx = {
   11530:	2600      	movs	r6, #0
		.app_idx = pub->key,
   11532:	88ea      	ldrh	r2, [r5, #6]
	struct bt_mesh_msg_ctx ctx = {
   11534:	9606      	str	r6, [sp, #24]
   11536:	e9cd 6604 	strd	r6, r6, [sp, #16]
		.app_idx = pub->key,
   1153a:	f3c2 020b 	ubfx	r2, r2, #0, #12
	struct bt_mesh_msg_ctx ctx = {
   1153e:	f8ad 2012 	strh.w	r2, [sp, #18]
   11542:	88aa      	ldrh	r2, [r5, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   11544:	9301      	str	r3, [sp, #4]
	struct bt_mesh_msg_ctx ctx = {
   11546:	f8ad 2014 	strh.w	r2, [sp, #20]
   1154a:	ab04      	add	r3, sp, #16
   1154c:	7a2a      	ldrb	r2, [r5, #8]
   1154e:	f88d 201b 	strb.w	r2, [sp, #27]
		.src = bt_mesh_model_elem(mod)->addr,
   11552:	4640      	mov	r0, r8
	struct bt_mesh_net_tx tx = {
   11554:	e9cd 3608 	strd	r3, r6, [sp, #32]
   11558:	9607      	str	r6, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
   1155a:	f7ff fd17 	bl	10f8c <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   1155e:	8803      	ldrh	r3, [r0, #0]
   11560:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.friend_cred = pub->cred,
   11564:	79eb      	ldrb	r3, [r5, #7]
	struct bt_mesh_net_tx tx = {
   11566:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		.friend_cred = pub->cred,
   1156a:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
   1156e:	f363 0200 	bfi	r2, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   11572:	692b      	ldr	r3, [r5, #16]
	struct bt_mesh_net_tx tx = {
   11574:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
   11578:	889a      	ldrh	r2, [r3, #4]
   1157a:	6819      	ldr	r1, [r3, #0]
   1157c:	a801      	add	r0, sp, #4
   1157e:	f018 fa0e 	bl	2999e <net_buf_simple_add_mem>
	pub->count--;
   11582:	7aeb      	ldrb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   11584:	4a2e      	ldr	r2, [pc, #184]	; (11640 <mod_publish+0x13c>)
	pub->count--;
   11586:	33e0      	adds	r3, #224	; 0xe0
   11588:	72eb      	strb	r3, [r5, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
   1158a:	a901      	add	r1, sp, #4
   1158c:	4643      	mov	r3, r8
   1158e:	a807      	add	r0, sp, #28
   11590:	f7fe f9fa 	bl	f988 <bt_mesh_trans_send>
		if (err) {
   11594:	4602      	mov	r2, r0
   11596:	b1f0      	cbz	r0, 115d6 <mod_publish+0xd2>
			BT_ERR("Failed to retransmit (err %d)", err);
   11598:	2145      	movs	r1, #69	; 0x45
   1159a:	482a      	ldr	r0, [pc, #168]	; (11644 <mod_publish+0x140>)
   1159c:	f012 fe4e 	bl	2423c <printk>
			pub->count = 0U;
   115a0:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
   115a4:	f366 1347 	bfi	r3, r6, #5, #3
   115a8:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
   115ac:	b19f      	cbz	r7, 115d6 <mod_publish+0xd2>
						      K_MSEC(period_ms));
   115ae:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   115b2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   115b6:	f240 30e7 	movw	r0, #999	; 0x3e7
   115ba:	2100      	movs	r1, #0
   115bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   115c0:	2300      	movs	r3, #0
   115c2:	fbc5 0107 	smlal	r0, r1, r5, r7
   115c6:	f7f0 fc3f 	bl	1e48 <__aeabi_uldivmod>
   115ca:	4602      	mov	r2, r0
   115cc:	460b      	mov	r3, r1
   115ce:	481e      	ldr	r0, [pc, #120]	; (11648 <mod_publish+0x144>)
   115d0:	4621      	mov	r1, r4
   115d2:	f010 fec9 	bl	22368 <k_delayed_work_submit_to_queue>
}
   115d6:	b028      	add	sp, #160	; 0xa0
   115d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
   115dc:	2800      	cmp	r0, #0
   115de:	d0fa      	beq.n	115d6 <mod_publish+0xd2>
	__ASSERT_NO_MSG(pub->update != NULL);
   115e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   115e4:	b943      	cbnz	r3, 115f8 <mod_publish+0xf4>
   115e6:	4919      	ldr	r1, [pc, #100]	; (1164c <mod_publish+0x148>)
   115e8:	4819      	ldr	r0, [pc, #100]	; (11650 <mod_publish+0x14c>)
   115ea:	22f2      	movs	r2, #242	; 0xf2
   115ec:	f012 fe26 	bl	2423c <printk>
   115f0:	21f2      	movs	r1, #242	; 0xf2
   115f2:	4816      	ldr	r0, [pc, #88]	; (1164c <mod_publish+0x148>)
   115f4:	f013 f8d4 	bl	247a0 <assert_post_action>
	err = pub->update(pub->mod);
   115f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   115fc:	f854 0c18 	ldr.w	r0, [r4, #-24]
   11600:	4798      	blx	r3
	if (err) {
   11602:	4605      	mov	r5, r0
   11604:	b178      	cbz	r0, 11626 <mod_publish+0x122>
		pub->period_start = k_uptime_get_32();
   11606:	f016 fd4a 	bl	2809e <k_uptime_get_32>
	pub->count = 0U;
   1160a:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		pub->period_start = k_uptime_get_32();
   1160e:	f844 0c0c 	str.w	r0, [r4, #-12]
	pub->count = 0U;
   11612:	f36f 1347 	bfc	r3, #5, #3
   11616:	f804 3c0d 	strb.w	r3, [r4, #-13]
	publish_sent(err, pub->mod);
   1161a:	f854 1c18 	ldr.w	r1, [r4, #-24]
   1161e:	4628      	mov	r0, r5
   11620:	f7ff fc4e 	bl	10ec0 <publish_sent>
   11624:	e7d7      	b.n	115d6 <mod_publish+0xd2>
	err = bt_mesh_model_publish(pub->mod);
   11626:	f854 0c18 	ldr.w	r0, [r4, #-24]
   1162a:	f7ff fef5 	bl	11418 <bt_mesh_model_publish>
	if (err) {
   1162e:	4602      	mov	r2, r0
   11630:	2800      	cmp	r0, #0
   11632:	d0d0      	beq.n	115d6 <mod_publish+0xd2>
		BT_ERR("Publishing failed (err %d)", err);
   11634:	2145      	movs	r1, #69	; 0x45
   11636:	4807      	ldr	r0, [pc, #28]	; (11654 <mod_publish+0x150>)
   11638:	f012 fe00 	bl	2423c <printk>
   1163c:	e7cb      	b.n	115d6 <mod_publish+0xd2>
   1163e:	bf00      	nop
   11640:	0002b1e8 	.word	0x0002b1e8
   11644:	0002f026 	.word	0x0002f026
   11648:	20001988 	.word	0x20001988
   1164c:	0002f049 	.word	0x0002f049
   11650:	0002bced 	.word	0x0002bced
   11654:	0002f07b 	.word	0x0002f07b

00011658 <bt_mesh_comp_get>:
}
   11658:	4b01      	ldr	r3, [pc, #4]	; (11660 <bt_mesh_comp_get+0x8>)
   1165a:	6818      	ldr	r0, [r3, #0]
   1165c:	4770      	bx	lr
   1165e:	bf00      	nop
   11660:	200022dc 	.word	0x200022dc

00011664 <bt_mesh_model_pending_store>:
	bt_mesh_model_foreach(store_pending_mod, NULL);
   11664:	2100      	movs	r1, #0
   11666:	4801      	ldr	r0, [pc, #4]	; (1166c <bt_mesh_model_pending_store+0x8>)
   11668:	f7ff bbc8 	b.w	10dfc <bt_mesh_model_foreach>
   1166c:	00010c65 	.word	0x00010c65

00011670 <bt_mesh_model_data_store>:
{
   11670:	b570      	push	{r4, r5, r6, lr}
   11672:	b08a      	sub	sp, #40	; 0x28
   11674:	461e      	mov	r6, r3
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   11676:	231e      	movs	r3, #30
{
   11678:	4615      	mov	r5, r2
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   1167a:	9300      	str	r3, [sp, #0]
   1167c:	4a11      	ldr	r2, [pc, #68]	; (116c4 <bt_mesh_model_data_store+0x54>)
{
   1167e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	encode_mod_path(mod, vnd, "data", path, sizeof(path));
   11680:	ab02      	add	r3, sp, #8
   11682:	f7ff fa71 	bl	10b68 <encode_mod_path>
	if (name) {
   11686:	b14d      	cbz	r5, 1169c <bt_mesh_model_data_store+0x2c>
		strcat(path, "/");
   11688:	490f      	ldr	r1, [pc, #60]	; (116c8 <bt_mesh_model_data_store+0x58>)
   1168a:	a802      	add	r0, sp, #8
   1168c:	f014 fd24 	bl	260d8 <strcat>
		strncat(path, name, 8);
   11690:	2208      	movs	r2, #8
   11692:	4629      	mov	r1, r5
   11694:	eb0d 0002 	add.w	r0, sp, r2
   11698:	f014 fd27 	bl	260ea <strncat>
	if (data_len) {
   1169c:	b174      	cbz	r4, 116bc <bt_mesh_model_data_store+0x4c>
		err = settings_save_one(path, data, data_len);
   1169e:	4622      	mov	r2, r4
   116a0:	4631      	mov	r1, r6
   116a2:	a802      	add	r0, sp, #8
   116a4:	f7f3 fdec 	bl	5280 <settings_save_one>
		err = settings_delete(path);
   116a8:	4604      	mov	r4, r0
	if (err) {
   116aa:	b120      	cbz	r0, 116b6 <bt_mesh_model_data_store+0x46>
		BT_ERR("Failed to store %s value", log_strdup(path));
   116ac:	aa02      	add	r2, sp, #8
   116ae:	2145      	movs	r1, #69	; 0x45
   116b0:	4806      	ldr	r0, [pc, #24]	; (116cc <bt_mesh_model_data_store+0x5c>)
   116b2:	f012 fdc3 	bl	2423c <printk>
}
   116b6:	4620      	mov	r0, r4
   116b8:	b00a      	add	sp, #40	; 0x28
   116ba:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_delete(path);
   116bc:	a802      	add	r0, sp, #8
   116be:	f013 f9fd 	bl	24abc <settings_delete>
   116c2:	e7f1      	b.n	116a8 <bt_mesh_model_data_store+0x38>
   116c4:	0002f139 	.word	0x0002f139
   116c8:	0002ee9e 	.word	0x0002ee9e
   116cc:	0002f23a 	.word	0x0002f23a

000116d0 <bt_mesh_model_settings_commit>:

void bt_mesh_model_settings_commit(void)
{
	bt_mesh_model_foreach(commit_mod, NULL);
   116d0:	2100      	movs	r1, #0
   116d2:	4801      	ldr	r0, [pc, #4]	; (116d8 <bt_mesh_model_settings_commit+0x8>)
   116d4:	f7ff bb92 	b.w	10dfc <bt_mesh_model_foreach>
   116d8:	00010f3d 	.word	0x00010f3d

000116dc <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
   116dc:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
   116de:	2a01      	cmp	r2, #1
{
   116e0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
   116e4:	d104      	bne.n	116f0 <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
   116e6:	f10d 0106 	add.w	r1, sp, #6
   116ea:	4803      	ldr	r0, [pc, #12]	; (116f8 <app_key_evt+0x1c>)
   116ec:	f7ff fb86 	bl	10dfc <bt_mesh_model_foreach>
	}
}
   116f0:	b003      	add	sp, #12
   116f2:	f85d fb04 	ldr.w	pc, [sp], #4
   116f6:	bf00      	nop
   116f8:	00028459 	.word	0x00028459

000116fc <node_reset>:
}

static void node_reset(struct bt_mesh_model *model,
		       struct bt_mesh_msg_ctx *ctx,
		       struct net_buf_simple *buf)
{
   116fc:	b530      	push	{r4, r5, lr}
   116fe:	b089      	sub	sp, #36	; 0x24
	static struct bt_mesh_proxy_idle_cb proxy_idle = {.cb = bt_mesh_reset};

	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   11700:	ab03      	add	r3, sp, #12
   11702:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
{
   11706:	4604      	mov	r4, r0
   11708:	460d      	mov	r5, r1
	BT_DBG("net_idx 0x%04x app_idx 0x%04x src 0x%04x len %u: %s",
	       ctx->net_idx, ctx->app_idx, ctx->addr, buf->len,
	       bt_hex(buf->data, buf->len));


	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   1170a:	a805      	add	r0, sp, #20
   1170c:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   11710:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11714:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   11716:	f016 fcec 	bl	280f2 <bt_mesh_model_msg_init>

	/* Send the response first since we wont have any keys left to
	 * send it later.
	 */
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1171a:	2300      	movs	r3, #0
   1171c:	9300      	str	r3, [sp, #0]
   1171e:	aa05      	add	r2, sp, #20
   11720:	4629      	mov	r1, r5
   11722:	4620      	mov	r0, r4
   11724:	f016 fd0e 	bl	28144 <bt_mesh_model_send>
   11728:	b118      	cbz	r0, 11732 <node_reset+0x36>
		BT_ERR("Unable to send Node Reset Status");
   1172a:	2145      	movs	r1, #69	; 0x45
   1172c:	4803      	ldr	r0, [pc, #12]	; (1173c <node_reset+0x40>)
   1172e:	f012 fd85 	bl	2423c <printk>
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_reset();
   11732:	f7fb fae3 	bl	ccfc <bt_mesh_reset>

	/* If the response goes to a proxy node, we'll wait for the sending to
	 * complete before moving on.
	 */
	bt_mesh_proxy_on_idle(&proxy_idle);
}
   11736:	b009      	add	sp, #36	; 0x24
   11738:	bd30      	pop	{r4, r5, pc}
   1173a:	bf00      	nop
   1173c:	0002f7c3 	.word	0x0002f7c3

00011740 <send_mod_sub_status>:
{
   11740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11744:	b08a      	sub	sp, #40	; 0x28
   11746:	461f      	mov	r7, r3
   11748:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   1174a:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
   1174e:	a906      	add	r1, sp, #24
{
   11750:	4690      	mov	r8, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   11752:	e9cd 3104 	strd	r3, r1, [sp, #16]
   11756:	9103      	str	r1, [sp, #12]
{
   11758:	4604      	mov	r4, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   1175a:	f248 011f 	movw	r1, #32799	; 0x801f
   1175e:	a803      	add	r0, sp, #12
{
   11760:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   11764:	f016 fcc5 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11768:	4641      	mov	r1, r8
   1176a:	a803      	add	r0, sp, #12
   1176c:	f018 f923 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   11770:	4639      	mov	r1, r7
   11772:	a803      	add	r0, sp, #12
   11774:	f018 f926 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   11778:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1177c:	a803      	add	r0, sp, #12
   1177e:	f018 f921 	bl	299c4 <net_buf_simple_add_le16>
	if (vnd) {
   11782:	b1b6      	cbz	r6, 117b2 <send_mod_sub_status+0x72>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   11784:	2104      	movs	r1, #4
   11786:	a803      	add	r0, sp, #12
   11788:	f00c f806 	bl	1d798 <net_buf_simple_add>
   1178c:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   1178e:	9911      	ldr	r1, [sp, #68]	; 0x44
   11790:	f014 fce6 	bl	26160 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11794:	2300      	movs	r3, #0
   11796:	9300      	str	r3, [sp, #0]
   11798:	aa03      	add	r2, sp, #12
   1179a:	4629      	mov	r1, r5
   1179c:	4620      	mov	r0, r4
   1179e:	f016 fcd1 	bl	28144 <bt_mesh_model_send>
   117a2:	b118      	cbz	r0, 117ac <send_mod_sub_status+0x6c>
		BT_ERR("Unable to send Model Subscription Status");
   117a4:	2145      	movs	r1, #69	; 0x45
   117a6:	4806      	ldr	r0, [pc, #24]	; (117c0 <send_mod_sub_status+0x80>)
   117a8:	f012 fd48 	bl	2423c <printk>
}
   117ac:	b00a      	add	sp, #40	; 0x28
   117ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   117b2:	2102      	movs	r1, #2
   117b4:	a803      	add	r0, sp, #12
   117b6:	f00b ffef 	bl	1d798 <net_buf_simple_add>
   117ba:	2202      	movs	r2, #2
   117bc:	e7e7      	b.n	1178e <send_mod_sub_status+0x4e>
   117be:	bf00      	nop
   117c0:	0002f932 	.word	0x0002f932

000117c4 <net_key_get>:
{
   117c4:	b530      	push	{r4, r5, lr}
   117c6:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   117c8:	ab03      	add	r3, sp, #12
   117ca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   117ce:	4604      	mov	r4, r0
   117d0:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   117d2:	a805      	add	r0, sp, #20
   117d4:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   117d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   117dc:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   117de:	f016 fc88 	bl	280f2 <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   117e2:	2200      	movs	r2, #0
   117e4:	2101      	movs	r1, #1
   117e6:	a802      	add	r0, sp, #8
   117e8:	f7fc ff2e 	bl	e648 <bt_mesh_subnets_get>
	if (count < 0 || count > ARRAY_SIZE(net_idx)) {
   117ec:	b120      	cbz	r0, 117f8 <net_key_get+0x34>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   117ee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   117f2:	a805      	add	r0, sp, #20
   117f4:	f018 f8e6 	bl	299c4 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   117f8:	2300      	movs	r3, #0
   117fa:	9300      	str	r3, [sp, #0]
   117fc:	aa05      	add	r2, sp, #20
   117fe:	4629      	mov	r1, r5
   11800:	4620      	mov	r0, r4
   11802:	f016 fc9f 	bl	28144 <bt_mesh_model_send>
   11806:	b118      	cbz	r0, 11810 <net_key_get+0x4c>
		BT_ERR("Unable to send NetKey List");
   11808:	2145      	movs	r1, #69	; 0x45
   1180a:	4802      	ldr	r0, [pc, #8]	; (11814 <net_key_get+0x50>)
   1180c:	f012 fd16 	bl	2423c <printk>
}
   11810:	b009      	add	sp, #36	; 0x24
   11812:	bd30      	pop	{r4, r5, pc}
   11814:	0002f722 	.word	0x0002f722

00011818 <mod_sub_get_vnd>:
{
   11818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1181c:	4614      	mov	r4, r2
   1181e:	b0a6      	sub	sp, #152	; 0x98
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   11820:	ab08      	add	r3, sp, #32
   11822:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
   11826:	4681      	mov	r9, r0
	addr = net_buf_simple_pull_le16(buf);
   11828:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   1182a:	9305      	str	r3, [sp, #20]
   1182c:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   11830:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
   11832:	f018 f876 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   11836:	b203      	sxth	r3, r0
   11838:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   1183a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1183c:	dc06      	bgt.n	1184c <mod_sub_get_vnd+0x34>
		BT_WARN("Prohibited element address");
   1183e:	482d      	ldr	r0, [pc, #180]	; (118f4 <mod_sub_get_vnd+0xdc>)
   11840:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Vendor Model Subscription List");
   11842:	f012 fcfb 	bl	2423c <printk>
}
   11846:	b026      	add	sp, #152	; 0x98
   11848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	company = net_buf_simple_pull_le16(buf);
   1184c:	4620      	mov	r0, r4
   1184e:	f018 f868 	bl	29922 <net_buf_simple_pull_le16>
   11852:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
   11854:	4620      	mov	r0, r4
   11856:	f018 f864 	bl	29922 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1185a:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   1185c:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
   1185e:	f248 012c 	movw	r1, #32812	; 0x802c
   11862:	4620      	mov	r0, r4
   11864:	f016 fc45 	bl	280f2 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   11868:	4628      	mov	r0, r5
   1186a:	f7ff fcd9 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   1186e:	b9d8      	cbnz	r0, 118a8 <mod_sub_get_vnd+0x90>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   11870:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   11872:	4620      	mov	r0, r4
   11874:	f018 f89f 	bl	299b6 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   11878:	4629      	mov	r1, r5
   1187a:	4620      	mov	r0, r4
   1187c:	f018 f8a2 	bl	299c4 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
   11880:	4639      	mov	r1, r7
   11882:	4620      	mov	r0, r4
   11884:	f018 f89e 	bl	299c4 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   11888:	4631      	mov	r1, r6
   1188a:	4620      	mov	r0, r4
   1188c:	f018 f89a 	bl	299c4 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11890:	2300      	movs	r3, #0
   11892:	9300      	str	r3, [sp, #0]
   11894:	4622      	mov	r2, r4
   11896:	4651      	mov	r1, sl
   11898:	4648      	mov	r0, r9
   1189a:	f016 fc53 	bl	28144 <bt_mesh_model_send>
   1189e:	2800      	cmp	r0, #0
   118a0:	d0d1      	beq.n	11846 <mod_sub_get_vnd+0x2e>
		BT_ERR("Unable to send Vendor Model Subscription List");
   118a2:	2145      	movs	r1, #69	; 0x45
   118a4:	4814      	ldr	r0, [pc, #80]	; (118f8 <mod_sub_get_vnd+0xe0>)
   118a6:	e7cc      	b.n	11842 <mod_sub_get_vnd+0x2a>
	mod = bt_mesh_model_find_vnd(elem, company, id);
   118a8:	4632      	mov	r2, r6
   118aa:	4639      	mov	r1, r7
   118ac:	f016 fc62 	bl	28174 <bt_mesh_model_find_vnd>
	if (!mod) {
   118b0:	4680      	mov	r8, r0
   118b2:	b908      	cbnz	r0, 118b8 <mod_sub_get_vnd+0xa0>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   118b4:	2102      	movs	r1, #2
   118b6:	e7dc      	b.n	11872 <mod_sub_get_vnd+0x5a>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   118b8:	2100      	movs	r1, #0
   118ba:	4620      	mov	r0, r4
   118bc:	f018 f87b 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   118c0:	4629      	mov	r1, r5
   118c2:	4620      	mov	r0, r4
   118c4:	f018 f87e 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
   118c8:	4639      	mov	r1, r7
   118ca:	4620      	mov	r0, r4
   118cc:	f018 f87a 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   118d0:	4631      	mov	r1, r6
   118d2:	4620      	mov	r0, r4
   118d4:	f018 f876 	bl	299c4 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   118d8:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   118da:	f898 3004 	ldrb.w	r3, [r8, #4]
   118de:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   118e2:	4640      	mov	r0, r8
   118e4:	f016 fc71 	bl	281ca <bt_mesh_model_root>
   118e8:	aa03      	add	r2, sp, #12
   118ea:	4904      	ldr	r1, [pc, #16]	; (118fc <mod_sub_get_vnd+0xe4>)
   118ec:	f016 fc6e 	bl	281cc <bt_mesh_model_tree_walk>
   118f0:	e7ce      	b.n	11890 <mod_sub_get_vnd+0x78>
   118f2:	bf00      	nop
   118f4:	0002f699 	.word	0x0002f699
   118f8:	0002f6b9 	.word	0x0002f6b9
   118fc:	000127fd 	.word	0x000127fd

00011900 <mod_sub_get>:
{
   11900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11904:	4614      	mov	r4, r2
   11906:	b0a7      	sub	sp, #156	; 0x9c
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   11908:	ab08      	add	r3, sp, #32
   1190a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
{
   1190e:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
   11910:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
   11912:	9305      	str	r3, [sp, #20]
   11914:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   11918:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
   1191a:	f018 f802 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   1191e:	b203      	sxth	r3, r0
   11920:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
   11922:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
   11924:	dc06      	bgt.n	11934 <mod_sub_get+0x34>
		BT_WARN("Prohibited element address");
   11926:	4826      	ldr	r0, [pc, #152]	; (119c0 <mod_sub_get+0xc0>)
   11928:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model Subscription List");
   1192a:	f012 fc87 	bl	2423c <printk>
}
   1192e:	b027      	add	sp, #156	; 0x9c
   11930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	id = net_buf_simple_pull_le16(buf);
   11934:	4620      	mov	r0, r4
   11936:	f017 fff4 	bl	29922 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   1193a:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
   1193c:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
   1193e:	f248 012a 	movw	r1, #32810	; 0x802a
   11942:	4620      	mov	r0, r4
   11944:	f016 fbd5 	bl	280f2 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
   11948:	4628      	mov	r0, r5
   1194a:	f7ff fc69 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   1194e:	b9b8      	cbnz	r0, 11980 <mod_sub_get+0x80>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
   11950:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   11952:	4620      	mov	r0, r4
   11954:	f018 f82f 	bl	299b6 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
   11958:	4629      	mov	r1, r5
   1195a:	4620      	mov	r0, r4
   1195c:	f018 f832 	bl	299c4 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
   11960:	4631      	mov	r1, r6
   11962:	4620      	mov	r0, r4
   11964:	f018 f82e 	bl	299c4 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11968:	2300      	movs	r3, #0
   1196a:	9300      	str	r3, [sp, #0]
   1196c:	4622      	mov	r2, r4
   1196e:	4649      	mov	r1, r9
   11970:	4640      	mov	r0, r8
   11972:	f016 fbe7 	bl	28144 <bt_mesh_model_send>
   11976:	2800      	cmp	r0, #0
   11978:	d0d9      	beq.n	1192e <mod_sub_get+0x2e>
		BT_ERR("Unable to send Model Subscription List");
   1197a:	2145      	movs	r1, #69	; 0x45
   1197c:	4811      	ldr	r0, [pc, #68]	; (119c4 <mod_sub_get+0xc4>)
   1197e:	e7d4      	b.n	1192a <mod_sub_get+0x2a>
	mod = bt_mesh_model_find(elem, id);
   11980:	4631      	mov	r1, r6
   11982:	f016 fc0e 	bl	281a2 <bt_mesh_model_find>
	if (!mod) {
   11986:	4607      	mov	r7, r0
   11988:	b908      	cbnz	r0, 1198e <mod_sub_get+0x8e>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
   1198a:	2102      	movs	r1, #2
   1198c:	e7e1      	b.n	11952 <mod_sub_get+0x52>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   1198e:	2100      	movs	r1, #0
   11990:	4620      	mov	r0, r4
   11992:	f018 f810 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
   11996:	4629      	mov	r1, r5
   11998:	4620      	mov	r0, r4
   1199a:	f018 f813 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
   1199e:	4631      	mov	r1, r6
   119a0:	4620      	mov	r0, r4
   119a2:	f018 f80f 	bl	299c4 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
   119a6:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
   119a8:	793b      	ldrb	r3, [r7, #4]
   119aa:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
   119ae:	4638      	mov	r0, r7
   119b0:	f016 fc0b 	bl	281ca <bt_mesh_model_root>
   119b4:	aa03      	add	r2, sp, #12
   119b6:	4904      	ldr	r1, [pc, #16]	; (119c8 <mod_sub_get+0xc8>)
   119b8:	f016 fc08 	bl	281cc <bt_mesh_model_tree_walk>
   119bc:	e7d4      	b.n	11968 <mod_sub_get+0x68>
   119be:	bf00      	nop
   119c0:	0002f699 	.word	0x0002f699
   119c4:	0002f66d 	.word	0x0002f66d
   119c8:	000127fd 	.word	0x000127fd

000119cc <relay_set>:
{
   119cc:	b530      	push	{r4, r5, lr}
   119ce:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   119d0:	ab03      	add	r3, sp, #12
{
   119d2:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   119d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   119d8:	e9cd 1306 	strd	r1, r3, [sp, #24]
   119dc:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   119de:	6813      	ldr	r3, [r2, #0]
   119e0:	781a      	ldrb	r2, [r3, #0]
   119e2:	2a01      	cmp	r2, #1
{
   119e4:	4604      	mov	r4, r0
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   119e6:	d905      	bls.n	119f4 <relay_set+0x28>
		BT_WARN("Invalid Relay value 0x%02x", buf->data[0]);
   119e8:	2157      	movs	r1, #87	; 0x57
   119ea:	4814      	ldr	r0, [pc, #80]	; (11a3c <relay_set+0x70>)
   119ec:	f012 fc26 	bl	2423c <printk>
}
   119f0:	b009      	add	sp, #36	; 0x24
   119f2:	bd30      	pop	{r4, r5, pc}
	(void)bt_mesh_relay_set(buf->data[0], buf->data[1]);
   119f4:	7859      	ldrb	r1, [r3, #1]
   119f6:	4610      	mov	r0, r2
   119f8:	f015 ff34 	bl	27864 <bt_mesh_relay_set>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   119fc:	f248 0128 	movw	r1, #32808	; 0x8028
   11a00:	a805      	add	r0, sp, #20
   11a02:	f016 fb76 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   11a06:	f015 ff30 	bl	2786a <bt_mesh_relay_get>
   11a0a:	4601      	mov	r1, r0
   11a0c:	a805      	add	r0, sp, #20
   11a0e:	f017 ffd2 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   11a12:	f015 ff2d 	bl	27870 <bt_mesh_relay_retransmit_get>
   11a16:	4601      	mov	r1, r0
   11a18:	a805      	add	r0, sp, #20
   11a1a:	f017 ffcc 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11a1e:	2300      	movs	r3, #0
   11a20:	9300      	str	r3, [sp, #0]
   11a22:	aa05      	add	r2, sp, #20
   11a24:	4629      	mov	r1, r5
   11a26:	4620      	mov	r0, r4
   11a28:	f016 fb8c 	bl	28144 <bt_mesh_model_send>
   11a2c:	2800      	cmp	r0, #0
   11a2e:	d0df      	beq.n	119f0 <relay_set+0x24>
		BT_ERR("Unable to send Relay Status response");
   11a30:	2145      	movs	r1, #69	; 0x45
   11a32:	4803      	ldr	r0, [pc, #12]	; (11a40 <relay_set+0x74>)
   11a34:	f012 fc02 	bl	2423c <printk>
   11a38:	e7da      	b.n	119f0 <relay_set+0x24>
   11a3a:	bf00      	nop
   11a3c:	0002f81a 	.word	0x0002f81a
   11a40:	0002f83a 	.word	0x0002f83a

00011a44 <beacon_set>:
{
   11a44:	b570      	push	{r4, r5, r6, lr}
   11a46:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   11a48:	ab03      	add	r3, sp, #12
{
   11a4a:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   11a4c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   11a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11a54:	9305      	str	r3, [sp, #20]
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11a56:	6823      	ldr	r3, [r4, #0]
   11a58:	781a      	ldrb	r2, [r3, #0]
   11a5a:	2a01      	cmp	r2, #1
{
   11a5c:	4605      	mov	r5, r0
   11a5e:	460e      	mov	r6, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   11a60:	d905      	bls.n	11a6e <beacon_set+0x2a>
		BT_WARN("Invalid Config Beacon value 0x%02x", buf->data[0]);
   11a62:	2157      	movs	r1, #87	; 0x57
   11a64:	4810      	ldr	r0, [pc, #64]	; (11aa8 <beacon_set+0x64>)
   11a66:	f012 fbe9 	bl	2423c <printk>
}
   11a6a:	b008      	add	sp, #32
   11a6c:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_beacon_set(buf->data[0]);
   11a6e:	f002 0001 	and.w	r0, r2, #1
   11a72:	f7fb fa05 	bl	ce80 <bt_mesh_beacon_set>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   11a76:	f248 010b 	movw	r1, #32779	; 0x800b
   11a7a:	a805      	add	r0, sp, #20
   11a7c:	f016 fb39 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   11a80:	6823      	ldr	r3, [r4, #0]
   11a82:	a805      	add	r0, sp, #20
   11a84:	7819      	ldrb	r1, [r3, #0]
   11a86:	f017 ff96 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11a8a:	2300      	movs	r3, #0
   11a8c:	9300      	str	r3, [sp, #0]
   11a8e:	aa05      	add	r2, sp, #20
   11a90:	4631      	mov	r1, r6
   11a92:	4628      	mov	r0, r5
   11a94:	f016 fb56 	bl	28144 <bt_mesh_model_send>
   11a98:	2800      	cmp	r0, #0
   11a9a:	d0e6      	beq.n	11a6a <beacon_set+0x26>
		BT_ERR("Unable to send Config Beacon Status response");
   11a9c:	2145      	movs	r1, #69	; 0x45
   11a9e:	4803      	ldr	r0, [pc, #12]	; (11aac <beacon_set+0x68>)
   11aa0:	f012 fbcc 	bl	2423c <printk>
   11aa4:	e7e1      	b.n	11a6a <beacon_set+0x26>
   11aa6:	bf00      	nop
   11aa8:	0002f2c3 	.word	0x0002f2c3
   11aac:	0002f2eb 	.word	0x0002f2eb

00011ab0 <app_key_get>:
{
   11ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ab2:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   11ab4:	ab04      	add	r3, sp, #16
{
   11ab6:	4606      	mov	r6, r0
   11ab8:	460f      	mov	r7, r1
	get_idx = net_buf_simple_pull_le16(buf);
   11aba:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   11abc:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   11ac0:	9307      	str	r3, [sp, #28]
   11ac2:	e9cd 1308 	strd	r1, r3, [sp, #32]
	get_idx = net_buf_simple_pull_le16(buf);
   11ac6:	f017 ff2c 	bl	29922 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   11aca:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   11ace:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
   11ad0:	d306      	bcc.n	11ae0 <app_key_get+0x30>
		BT_ERR("Invalid NetKeyIndex 0x%04x", get_idx);
   11ad2:	4602      	mov	r2, r0
   11ad4:	2145      	movs	r1, #69	; 0x45
   11ad6:	481a      	ldr	r0, [pc, #104]	; (11b40 <app_key_get+0x90>)
   11ad8:	f012 fbb0 	bl	2423c <printk>
}
   11adc:	b00b      	add	sp, #44	; 0x2c
   11ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   11ae0:	f248 0102 	movw	r1, #32770	; 0x8002
   11ae4:	a807      	add	r0, sp, #28
   11ae6:	f016 fb04 	bl	280f2 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   11aea:	4620      	mov	r0, r4
   11aec:	f015 ff71 	bl	279d2 <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   11af0:	2800      	cmp	r0, #0
   11af2:	bf0c      	ite	eq
   11af4:	2504      	moveq	r5, #4
   11af6:	2500      	movne	r5, #0
	net_buf_simple_add_u8(&msg, status);
   11af8:	4629      	mov	r1, r5
   11afa:	a807      	add	r0, sp, #28
   11afc:	f017 ff5b 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   11b00:	4621      	mov	r1, r4
   11b02:	a807      	add	r0, sp, #28
   11b04:	f017 ff5e 	bl	299c4 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   11b08:	b95d      	cbnz	r5, 11b22 <app_key_get+0x72>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   11b0a:	462b      	mov	r3, r5
   11b0c:	2201      	movs	r2, #1
   11b0e:	a903      	add	r1, sp, #12
   11b10:	4620      	mov	r0, r4
   11b12:	f7fd f8d5 	bl	ecc0 <bt_mesh_app_keys_get>
	if (count < 0 || count > ARRAY_SIZE(app_idx)) {
   11b16:	b120      	cbz	r0, 11b22 <app_key_get+0x72>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   11b18:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   11b1c:	a807      	add	r0, sp, #28
   11b1e:	f017 ff51 	bl	299c4 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11b22:	2300      	movs	r3, #0
   11b24:	9300      	str	r3, [sp, #0]
   11b26:	aa07      	add	r2, sp, #28
   11b28:	4639      	mov	r1, r7
   11b2a:	4630      	mov	r0, r6
   11b2c:	f016 fb0a 	bl	28144 <bt_mesh_model_send>
   11b30:	2800      	cmp	r0, #0
   11b32:	d0d3      	beq.n	11adc <app_key_get+0x2c>
		BT_ERR("Unable to send AppKey List");
   11b34:	2145      	movs	r1, #69	; 0x45
   11b36:	4803      	ldr	r0, [pc, #12]	; (11b44 <app_key_get+0x94>)
   11b38:	f012 fb80 	bl	2423c <printk>
   11b3c:	e7ce      	b.n	11adc <app_key_get+0x2c>
   11b3e:	bf00      	nop
   11b40:	0002f283 	.word	0x0002f283
   11b44:	0002f2a3 	.word	0x0002f2a3

00011b48 <mod_sub_list_clear.isra.4.part.5>:
static size_t mod_sub_list_clear(struct bt_mesh_model *mod)
   11b48:	b538      	push	{r3, r4, r5, lr}
   11b4a:	4605      	mov	r5, r0
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   11b4c:	8800      	ldrh	r0, [r0, #0]
   11b4e:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   11b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   11b56:	f04f 0400 	mov.w	r4, #0
   11b5a:	d303      	bcc.n	11b64 <mod_sub_list_clear.isra.4.part.5+0x1c>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   11b5c:	b108      	cbz	r0, 11b62 <mod_sub_list_clear.isra.4.part.5+0x1a>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   11b5e:	802c      	strh	r4, [r5, #0]
		clear_count++;
   11b60:	2001      	movs	r0, #1
}
   11b62:	bd38      	pop	{r3, r4, r5, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   11b64:	f7fd fefa 	bl	f95c <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   11b68:	802c      	strh	r4, [r5, #0]
		if (label_uuid) {
   11b6a:	b118      	cbz	r0, 11b74 <mod_sub_list_clear.isra.4.part.5+0x2c>
			bt_mesh_va_del(label_uuid, NULL);
   11b6c:	4621      	mov	r1, r4
   11b6e:	f7fd fed1 	bl	f914 <bt_mesh_va_del>
   11b72:	e7f5      	b.n	11b60 <mod_sub_list_clear.isra.4.part.5+0x18>
			BT_ERR("Label UUID not found");
   11b74:	2145      	movs	r1, #69	; 0x45
   11b76:	4802      	ldr	r0, [pc, #8]	; (11b80 <mod_sub_list_clear.isra.4.part.5+0x38>)
   11b78:	f012 fb60 	bl	2423c <printk>
   11b7c:	e7f0      	b.n	11b60 <mod_sub_list_clear.isra.4.part.5+0x18>
   11b7e:	bf00      	nop
   11b80:	0002f6ec 	.word	0x0002f6ec

00011b84 <cfg_srv_init>:
	{ OP_HEARTBEAT_SUB_SET,        5,   heartbeat_sub_set },
	BT_MESH_MODEL_OP_END,
};

static int cfg_srv_init(struct bt_mesh_model *model)
{
   11b84:	b508      	push	{r3, lr}
	if (!bt_mesh_model_in_primary(model)) {
   11b86:	7903      	ldrb	r3, [r0, #4]
   11b88:	b133      	cbz	r3, 11b98 <cfg_srv_init+0x14>
		BT_ERR("Configuration Server only allowed in primary element");
   11b8a:	4806      	ldr	r0, [pc, #24]	; (11ba4 <cfg_srv_init+0x20>)
   11b8c:	2145      	movs	r1, #69	; 0x45
   11b8e:	f012 fb55 	bl	2423c <printk>
   11b92:	f06f 0015 	mvn.w	r0, #21
	 * device-key is allowed to access this model.
	 */
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;

	return 0;
}
   11b96:	bd08      	pop	{r3, pc}
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
   11b98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   11b9c:	8182      	strh	r2, [r0, #12]
	return 0;
   11b9e:	4618      	mov	r0, r3
   11ba0:	e7f9      	b.n	11b96 <cfg_srv_init+0x12>
   11ba2:	bf00      	nop
   11ba4:	0002f31d 	.word	0x0002f31d

00011ba8 <send_krp_status>:
{
   11ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11baa:	b089      	sub	sp, #36	; 0x24
   11bac:	460d      	mov	r5, r1
   11bae:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   11bb0:	a902      	add	r1, sp, #8
   11bb2:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   11bb6:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   11bba:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   11bbc:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   11bbe:	a805      	add	r0, sp, #20
   11bc0:	f248 0117 	movw	r1, #32791	; 0x8017
{
   11bc4:	4617      	mov	r7, r2
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   11bc6:	f016 fa94 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11bca:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   11bce:	a805      	add	r0, sp, #20
   11bd0:	f017 fef1 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   11bd4:	4639      	mov	r1, r7
   11bd6:	a805      	add	r0, sp, #20
   11bd8:	f017 fef4 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   11bdc:	4631      	mov	r1, r6
   11bde:	a805      	add	r0, sp, #20
   11be0:	f017 fee9 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11be4:	2300      	movs	r3, #0
   11be6:	9300      	str	r3, [sp, #0]
   11be8:	aa05      	add	r2, sp, #20
   11bea:	4629      	mov	r1, r5
   11bec:	4620      	mov	r0, r4
   11bee:	f016 faa9 	bl	28144 <bt_mesh_model_send>
   11bf2:	b118      	cbz	r0, 11bfc <send_krp_status+0x54>
		BT_ERR("Unable to send Key Refresh State Status");
   11bf4:	2145      	movs	r1, #69	; 0x45
   11bf6:	4802      	ldr	r0, [pc, #8]	; (11c00 <send_krp_status+0x58>)
   11bf8:	f012 fb20 	bl	2423c <printk>
}
   11bfc:	b009      	add	sp, #36	; 0x24
   11bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c00:	0002f8d8 	.word	0x0002f8d8

00011c04 <krp_set>:
{
   11c04:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c06:	4606      	mov	r6, r0
   11c08:	b085      	sub	sp, #20
	idx = net_buf_simple_pull_le16(buf);
   11c0a:	4610      	mov	r0, r2
{
   11c0c:	4615      	mov	r5, r2
   11c0e:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   11c10:	f017 fe87 	bl	29922 <net_buf_simple_pull_le16>
   11c14:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   11c16:	4628      	mov	r0, r5
   11c18:	f017 fe7b 	bl	29912 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   11c1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   11c20:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   11c24:	d306      	bcc.n	11c34 <krp_set+0x30>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   11c26:	480d      	ldr	r0, [pc, #52]	; (11c5c <krp_set+0x58>)
   11c28:	4622      	mov	r2, r4
   11c2a:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   11c2c:	f012 fb06 	bl	2423c <printk>
}
   11c30:	b005      	add	sp, #20
   11c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   11c34:	f10d 010f 	add.w	r1, sp, #15
   11c38:	4620      	mov	r0, r4
   11c3a:	f7fc fcd5 	bl	e5e8 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   11c3e:	280b      	cmp	r0, #11
   11c40:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11c44:	d103      	bne.n	11c4e <krp_set+0x4a>
		BT_ERR("Invalid kr phase transition 0x%02x", phase);
   11c46:	461a      	mov	r2, r3
   11c48:	2145      	movs	r1, #69	; 0x45
   11c4a:	4805      	ldr	r0, [pc, #20]	; (11c60 <krp_set+0x5c>)
   11c4c:	e7ee      	b.n	11c2c <krp_set+0x28>
	send_krp_status(model, ctx, idx, phase, status);
   11c4e:	9000      	str	r0, [sp, #0]
   11c50:	4622      	mov	r2, r4
   11c52:	4639      	mov	r1, r7
   11c54:	4630      	mov	r0, r6
   11c56:	f7ff ffa7 	bl	11ba8 <send_krp_status>
   11c5a:	e7e9      	b.n	11c30 <krp_set+0x2c>
   11c5c:	0002f283 	.word	0x0002f283
   11c60:	0002f521 	.word	0x0002f521

00011c64 <krp_get>:
{
   11c64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11c66:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   11c68:	4610      	mov	r0, r2
{
   11c6a:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   11c6c:	f017 fe59 	bl	29922 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   11c70:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   11c74:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   11c76:	d306      	bcc.n	11c86 <krp_get+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   11c78:	4602      	mov	r2, r0
   11c7a:	2145      	movs	r1, #69	; 0x45
   11c7c:	4808      	ldr	r0, [pc, #32]	; (11ca0 <krp_get+0x3c>)
   11c7e:	f012 fadd 	bl	2423c <printk>
}
   11c82:	b004      	add	sp, #16
   11c84:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   11c86:	f10d 010f 	add.w	r1, sp, #15
   11c8a:	f015 ff0a 	bl	27aa2 <bt_mesh_subnet_kr_phase_get>
	send_krp_status(model, ctx, idx, kr_phase, status);
   11c8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11c92:	9000      	str	r0, [sp, #0]
   11c94:	4622      	mov	r2, r4
   11c96:	4631      	mov	r1, r6
   11c98:	4628      	mov	r0, r5
   11c9a:	f7ff ff85 	bl	11ba8 <send_krp_status>
   11c9e:	e7f0      	b.n	11c82 <krp_get+0x1e>
   11ca0:	0002f283 	.word	0x0002f283

00011ca4 <send_node_id_status>:
{
   11ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ca6:	b089      	sub	sp, #36	; 0x24
   11ca8:	460d      	mov	r5, r1
   11caa:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   11cac:	a902      	add	r1, sp, #8
   11cae:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
{
   11cb2:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   11cb4:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   11cb8:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   11cba:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   11cbc:	a805      	add	r0, sp, #20
   11cbe:	f248 0148 	movw	r1, #32840	; 0x8048
   11cc2:	f016 fa16 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11cc6:	4639      	mov	r1, r7
   11cc8:	a805      	add	r0, sp, #20
   11cca:	f017 fe74 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   11cce:	4631      	mov	r1, r6
   11cd0:	a805      	add	r0, sp, #20
   11cd2:	f017 fe77 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
   11cd6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   11cda:	a805      	add	r0, sp, #20
   11cdc:	f017 fe6b 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11ce0:	2300      	movs	r3, #0
   11ce2:	9300      	str	r3, [sp, #0]
   11ce4:	aa05      	add	r2, sp, #20
   11ce6:	4629      	mov	r1, r5
   11ce8:	4620      	mov	r0, r4
   11cea:	f016 fa2b 	bl	28144 <bt_mesh_model_send>
   11cee:	b118      	cbz	r0, 11cf8 <send_node_id_status+0x54>
		BT_ERR("Unable to send Node Identity Status");
   11cf0:	2145      	movs	r1, #69	; 0x45
   11cf2:	4802      	ldr	r0, [pc, #8]	; (11cfc <send_node_id_status+0x58>)
   11cf4:	f012 faa2 	bl	2423c <printk>
}
   11cf8:	b009      	add	sp, #36	; 0x24
   11cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cfc:	0002f982 	.word	0x0002f982

00011d00 <node_identity_set>:
{
   11d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11d02:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   11d04:	4610      	mov	r0, r2
{
   11d06:	460f      	mov	r7, r1
   11d08:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   11d0a:	f017 fe0a 	bl	29922 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   11d0e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   11d12:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   11d14:	d307      	bcc.n	11d26 <node_identity_set+0x26>
		BT_WARN("Invalid NetKeyIndex 0x%04x", idx);
   11d16:	4602      	mov	r2, r0
   11d18:	4814      	ldr	r0, [pc, #80]	; (11d6c <node_identity_set+0x6c>)
   11d1a:	2157      	movs	r1, #87	; 0x57
}
   11d1c:	b003      	add	sp, #12
   11d1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   11d22:	f012 ba8b 	b.w	2423c <printk>
	node_id = net_buf_simple_pull_u8(buf);
   11d26:	4628      	mov	r0, r5
   11d28:	f017 fdf3 	bl	29912 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   11d2c:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   11d2e:	4605      	mov	r5, r0
	if (node_id != 0x00 && node_id != 0x01) {
   11d30:	d903      	bls.n	11d3a <node_identity_set+0x3a>
		BT_WARN("Invalid Node ID value 0x%02x", node_id);
   11d32:	4602      	mov	r2, r0
   11d34:	2157      	movs	r1, #87	; 0x57
   11d36:	480e      	ldr	r0, [pc, #56]	; (11d70 <node_identity_set+0x70>)
   11d38:	e7f0      	b.n	11d1c <node_identity_set+0x1c>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   11d3a:	4601      	mov	r1, r0
   11d3c:	4620      	mov	r0, r4
   11d3e:	f015 febb 	bl	27ab8 <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   11d42:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   11d44:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   11d46:	d103      	bne.n	11d50 <node_identity_set+0x50>
		send_node_id_status(model, ctx, status, idx,
   11d48:	2300      	movs	r3, #0
   11d4a:	9300      	str	r3, [sp, #0]
	send_node_id_status(model, ctx, status, idx, node_id);
   11d4c:	4623      	mov	r3, r4
   11d4e:	e005      	b.n	11d5c <node_identity_set+0x5c>
	if (status == STATUS_FEAT_NOT_SUPP) {
   11d50:	280a      	cmp	r0, #10
   11d52:	d109      	bne.n	11d68 <node_identity_set+0x68>
		send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   11d54:	2302      	movs	r3, #2
   11d56:	9300      	str	r3, [sp, #0]
   11d58:	2200      	movs	r2, #0
   11d5a:	4623      	mov	r3, r4
	send_node_id_status(model, ctx, status, idx, node_id);
   11d5c:	4639      	mov	r1, r7
   11d5e:	4630      	mov	r0, r6
   11d60:	f7ff ffa0 	bl	11ca4 <send_node_id_status>
}
   11d64:	b003      	add	sp, #12
   11d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	send_node_id_status(model, ctx, status, idx, node_id);
   11d68:	9500      	str	r5, [sp, #0]
   11d6a:	e7ef      	b.n	11d4c <node_identity_set+0x4c>
   11d6c:	0002f283 	.word	0x0002f283
   11d70:	0002f7a1 	.word	0x0002f7a1

00011d74 <node_identity_get>:
{
   11d74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11d76:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   11d78:	4610      	mov	r0, r2
{
   11d7a:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   11d7c:	f017 fdd1 	bl	29922 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   11d80:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   11d84:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   11d86:	d306      	bcc.n	11d96 <node_identity_get+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   11d88:	4602      	mov	r2, r0
   11d8a:	2145      	movs	r1, #69	; 0x45
   11d8c:	4809      	ldr	r0, [pc, #36]	; (11db4 <node_identity_get+0x40>)
   11d8e:	f012 fa55 	bl	2423c <printk>
}
   11d92:	b004      	add	sp, #16
   11d94:	bd70      	pop	{r4, r5, r6, pc}
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   11d96:	f10d 010f 	add.w	r1, sp, #15
   11d9a:	f015 fe99 	bl	27ad0 <bt_mesh_subnet_node_id_get>
	send_node_id_status(model, ctx, status, idx, node_id);
   11d9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11da2:	9300      	str	r3, [sp, #0]
   11da4:	4602      	mov	r2, r0
   11da6:	4623      	mov	r3, r4
   11da8:	4631      	mov	r1, r6
   11daa:	4628      	mov	r0, r5
   11dac:	f7ff ff7a 	bl	11ca4 <send_node_id_status>
   11db0:	e7ef      	b.n	11d92 <node_identity_get+0x1e>
   11db2:	bf00      	nop
   11db4:	0002f283 	.word	0x0002f283

00011db8 <send_net_key_status>:
{
   11db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11dba:	b089      	sub	sp, #36	; 0x24
   11dbc:	460d      	mov	r5, r1
   11dbe:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   11dc0:	a902      	add	r1, sp, #8
   11dc2:	f44f 2310 	mov.w	r3, #589824	; 0x90000
   11dc6:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   11dca:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   11dcc:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   11dce:	a805      	add	r0, sp, #20
   11dd0:	f248 0144 	movw	r1, #32836	; 0x8044
{
   11dd4:	4616      	mov	r6, r2
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   11dd6:	f016 f98c 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11dda:	4639      	mov	r1, r7
   11ddc:	a805      	add	r0, sp, #20
   11dde:	f017 fdea 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   11de2:	4631      	mov	r1, r6
   11de4:	a805      	add	r0, sp, #20
   11de6:	f017 fded 	bl	299c4 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11dea:	2300      	movs	r3, #0
   11dec:	9300      	str	r3, [sp, #0]
   11dee:	aa05      	add	r2, sp, #20
   11df0:	4629      	mov	r1, r5
   11df2:	4620      	mov	r0, r4
   11df4:	f016 f9a6 	bl	28144 <bt_mesh_model_send>
   11df8:	b118      	cbz	r0, 11e02 <send_net_key_status+0x4a>
		BT_ERR("Unable to send NetKey Status");
   11dfa:	2145      	movs	r1, #69	; 0x45
   11dfc:	4802      	ldr	r0, [pc, #8]	; (11e08 <send_net_key_status+0x50>)
   11dfe:	f012 fa1d 	bl	2423c <printk>
}
   11e02:	b009      	add	sp, #36	; 0x24
   11e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e06:	bf00      	nop
   11e08:	0002f960 	.word	0x0002f960

00011e0c <net_key_del>:
{
   11e0c:	b570      	push	{r4, r5, r6, lr}
   11e0e:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   11e10:	4610      	mov	r0, r2
{
   11e12:	460d      	mov	r5, r1
	del_idx = net_buf_simple_pull_le16(buf);
   11e14:	f017 fd85 	bl	29922 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   11e18:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   11e1c:	4604      	mov	r4, r0
	if (del_idx > 0xfff) {
   11e1e:	d306      	bcc.n	11e2e <net_key_del+0x22>
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   11e20:	4602      	mov	r2, r0
   11e22:	2145      	movs	r1, #69	; 0x45
   11e24:	4809      	ldr	r0, [pc, #36]	; (11e4c <net_key_del+0x40>)
}
   11e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", del_idx);
   11e2a:	f012 ba07 	b.w	2423c <printk>
	if (ctx->net_idx == del_idx) {
   11e2e:	882a      	ldrh	r2, [r5, #0]
   11e30:	4282      	cmp	r2, r0
   11e32:	d106      	bne.n	11e42 <net_key_del+0x36>
		send_net_key_status(model, ctx, del_idx,
   11e34:	230c      	movs	r3, #12
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   11e36:	4629      	mov	r1, r5
   11e38:	4630      	mov	r0, r6
}
   11e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   11e3e:	f7ff bfbb 	b.w	11db8 <send_net_key_status>
	bt_mesh_subnet_del(del_idx);
   11e42:	f015 fdfc 	bl	27a3e <bt_mesh_subnet_del>
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   11e46:	2300      	movs	r3, #0
   11e48:	4622      	mov	r2, r4
   11e4a:	e7f4      	b.n	11e36 <net_key_del+0x2a>
   11e4c:	0002f283 	.word	0x0002f283

00011e50 <net_key_update>:
{
   11e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e54:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   11e56:	4610      	mov	r0, r2
{
   11e58:	460f      	mov	r7, r1
   11e5a:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   11e5c:	f017 fd61 	bl	29922 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   11e60:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   11e64:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   11e66:	d306      	bcc.n	11e76 <net_key_update+0x26>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   11e68:	4602      	mov	r2, r0
   11e6a:	2145      	movs	r1, #69	; 0x45
   11e6c:	4807      	ldr	r0, [pc, #28]	; (11e8c <net_key_update+0x3c>)
}
   11e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   11e72:	f012 b9e3 	b.w	2423c <printk>
	status = bt_mesh_subnet_update(idx, buf->data);
   11e76:	6829      	ldr	r1, [r5, #0]
   11e78:	f015 fdb2 	bl	279e0 <bt_mesh_subnet_update>
	send_net_key_status(model, ctx, idx, status);
   11e7c:	4622      	mov	r2, r4
   11e7e:	4603      	mov	r3, r0
   11e80:	4639      	mov	r1, r7
   11e82:	4630      	mov	r0, r6
}
   11e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   11e88:	f7ff bf96 	b.w	11db8 <send_net_key_status>
   11e8c:	0002f283 	.word	0x0002f283

00011e90 <net_key_add>:
{
   11e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e94:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   11e96:	4610      	mov	r0, r2
{
   11e98:	460f      	mov	r7, r1
   11e9a:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   11e9c:	f017 fd41 	bl	29922 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   11ea0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   11ea4:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   11ea6:	d306      	bcc.n	11eb6 <net_key_add+0x26>
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   11ea8:	4602      	mov	r2, r0
   11eaa:	2145      	movs	r1, #69	; 0x45
   11eac:	4807      	ldr	r0, [pc, #28]	; (11ecc <net_key_add+0x3c>)
}
   11eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Invalid NetKeyIndex 0x%04x", idx);
   11eb2:	f012 b9c3 	b.w	2423c <printk>
	status = bt_mesh_subnet_add(idx, buf->data);
   11eb6:	6829      	ldr	r1, [r5, #0]
   11eb8:	f7fc fb68 	bl	e58c <bt_mesh_subnet_add>
	send_net_key_status(model, ctx, idx, status);
   11ebc:	4622      	mov	r2, r4
   11ebe:	4603      	mov	r3, r0
   11ec0:	4639      	mov	r1, r7
   11ec2:	4630      	mov	r0, r6
}
   11ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   11ec8:	f7ff bf76 	b.w	11db8 <send_net_key_status>
   11ecc:	0002f283 	.word	0x0002f283

00011ed0 <send_app_key_status>:
{
   11ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ed2:	b089      	sub	sp, #36	; 0x24
   11ed4:	460d      	mov	r5, r1
   11ed6:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11ed8:	a902      	add	r1, sp, #8
   11eda:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
   11ede:	e9cd 3106 	strd	r3, r1, [sp, #24]
{
   11ee2:	4617      	mov	r7, r2
   11ee4:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   11ee6:	9105      	str	r1, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   11ee8:	a805      	add	r0, sp, #20
   11eea:	f248 0103 	movw	r1, #32771	; 0x8003
   11eee:	f016 f900 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11ef2:	4639      	mov	r1, r7
   11ef4:	a805      	add	r0, sp, #20
   11ef6:	f017 fd5e 	bl	299b6 <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   11efa:	4632      	mov	r2, r6
   11efc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   11f00:	a805      	add	r0, sp, #20
   11f02:	f016 f97b 	bl	281fc <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11f06:	2300      	movs	r3, #0
   11f08:	9300      	str	r3, [sp, #0]
   11f0a:	aa05      	add	r2, sp, #20
   11f0c:	4629      	mov	r1, r5
   11f0e:	4620      	mov	r0, r4
   11f10:	f016 f918 	bl	28144 <bt_mesh_model_send>
   11f14:	b118      	cbz	r0, 11f1e <send_app_key_status+0x4e>
		BT_ERR("Unable to send App Key Status response");
   11f16:	2145      	movs	r1, #69	; 0x45
   11f18:	4802      	ldr	r0, [pc, #8]	; (11f24 <send_app_key_status+0x54>)
   11f1a:	f012 f98f 	bl	2423c <printk>
}
   11f1e:	b009      	add	sp, #36	; 0x24
   11f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f22:	bf00      	nop
   11f24:	0002f864 	.word	0x0002f864

00011f28 <hb_pub_send_status>:
{
   11f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f2a:	b08b      	sub	sp, #44	; 0x2c
   11f2c:	461c      	mov	r4, r3
   11f2e:	4617      	mov	r7, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   11f30:	ab06      	add	r3, sp, #24
   11f32:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   11f36:	4605      	mov	r5, r0
   11f38:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   11f3a:	a803      	add	r0, sp, #12
   11f3c:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   11f3e:	9303      	str	r3, [sp, #12]
   11f40:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   11f44:	f016 f8d5 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   11f48:	4639      	mov	r1, r7
   11f4a:	a803      	add	r0, sp, #12
   11f4c:	f017 fd33 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->dst);
   11f50:	8821      	ldrh	r1, [r4, #0]
   11f52:	a803      	add	r0, sp, #12
   11f54:	f017 fd36 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   11f58:	8861      	ldrh	r1, [r4, #2]
	if (!val) {
   11f5a:	b171      	cbz	r1, 11f7a <hb_pub_send_status+0x52>
	} else if (val == 0x01) {
   11f5c:	2901      	cmp	r1, #1
   11f5e:	d00c      	beq.n	11f7a <hb_pub_send_status+0x52>
	} else if (val == 0xffff) {
   11f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11f64:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   11f66:	bf1f      	itttt	ne
   11f68:	f101 31ff 	addne.w	r1, r1, #4294967295
   11f6c:	fab1 f181 	clzne	r1, r1
   11f70:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   11f74:	b2c9      	uxtbne	r1, r1
		return 0xff;
   11f76:	bf08      	it	eq
   11f78:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(pub->count));
   11f7a:	a803      	add	r0, sp, #12
   11f7c:	f017 fd1b 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(pub->period));
   11f80:	68e1      	ldr	r1, [r4, #12]
	if (!val) {
   11f82:	b149      	cbz	r1, 11f98 <hb_pub_send_status+0x70>
	} else if (val == 0xffff) {
   11f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11f88:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   11f8a:	bf1d      	ittte	ne
   11f8c:	fab1 f181 	clzne	r1, r1
   11f90:	f1c1 0120 	rsbne	r1, r1, #32
   11f94:	b2c9      	uxtbne	r1, r1
		return 0xff;
   11f96:	21ff      	moveq	r1, #255	; 0xff
   11f98:	a803      	add	r0, sp, #12
   11f9a:	f017 fd0c 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, pub->ttl);
   11f9e:	7921      	ldrb	r1, [r4, #4]
   11fa0:	a803      	add	r0, sp, #12
   11fa2:	f017 fd08 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, pub->feat);
   11fa6:	88e1      	ldrh	r1, [r4, #6]
   11fa8:	a803      	add	r0, sp, #12
   11faa:	f017 fd0b 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, pub->net_idx);
   11fae:	8921      	ldrh	r1, [r4, #8]
   11fb0:	a803      	add	r0, sp, #12
   11fb2:	f017 fd07 	bl	299c4 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   11fb6:	2300      	movs	r3, #0
   11fb8:	9300      	str	r3, [sp, #0]
   11fba:	aa03      	add	r2, sp, #12
   11fbc:	4631      	mov	r1, r6
   11fbe:	4628      	mov	r0, r5
   11fc0:	f016 f8c0 	bl	28144 <bt_mesh_model_send>
   11fc4:	b118      	cbz	r0, 11fce <hb_pub_send_status+0xa6>
		BT_ERR("Unable to send Heartbeat Publication Status");
   11fc6:	2145      	movs	r1, #69	; 0x45
   11fc8:	4802      	ldr	r0, [pc, #8]	; (11fd4 <hb_pub_send_status+0xac>)
   11fca:	f012 f937 	bl	2423c <printk>
}
   11fce:	b00b      	add	sp, #44	; 0x2c
   11fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11fd2:	bf00      	nop
   11fd4:	0002f475 	.word	0x0002f475

00011fd8 <heartbeat_pub_set>:
{
   11fd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11fdc:	460e      	mov	r6, r1
	struct hb_pub_param *param = (void *)buf->data;
   11fde:	6811      	ldr	r1, [r2, #0]
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   11fe0:	788c      	ldrb	r4, [r1, #2]
	pub.dst = sys_le16_to_cpu(param->dst);
   11fe2:	880b      	ldrh	r3, [r1, #0]
   11fe4:	f8ad 3000 	strh.w	r3, [sp]
{
   11fe8:	4605      	mov	r5, r0
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   11fea:	4620      	mov	r0, r4
	pub.dst = sys_le16_to_cpu(param->dst);
   11fec:	b29f      	uxth	r7, r3
	pub.count = bt_mesh_hb_pwr2(param->count_log);
   11fee:	f016 f927 	bl	28240 <bt_mesh_hb_pwr2>
   11ff2:	f8ad 0002 	strh.w	r0, [sp, #2]
	pub.period = bt_mesh_hb_pwr2(param->period_log);
   11ff6:	f891 8003 	ldrb.w	r8, [r1, #3]
   11ffa:	4640      	mov	r0, r8
   11ffc:	f016 f920 	bl	28240 <bt_mesh_hb_pwr2>
   12000:	9003      	str	r0, [sp, #12]
	pub.ttl = param->ttl;
   12002:	790b      	ldrb	r3, [r1, #4]
   12004:	f88d 3004 	strb.w	r3, [sp, #4]
	pub.feat = sys_le16_to_cpu(param->feat);
   12008:	794a      	ldrb	r2, [r1, #5]
   1200a:	7988      	ldrb	r0, [r1, #6]
   1200c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   12010:	f8ad 2006 	strh.w	r2, [sp, #6]
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   12014:	f8b1 1007 	ldrh.w	r1, [r1, #7]
   12018:	f8ad 1008 	strh.w	r1, [sp, #8]
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   1201c:	f487 4700 	eor.w	r7, r7, #32768	; 0x8000
   12020:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
	pub.net_idx = sys_le16_to_cpu(param->net_idx);
   12024:	b28a      	uxth	r2, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(pub.dst)) {
   12026:	d322      	bcc.n	1206e <heartbeat_pub_set+0x96>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
   12028:	3c12      	subs	r4, #18
   1202a:	b2e4      	uxtb	r4, r4
   1202c:	2cec      	cmp	r4, #236	; 0xec
   1202e:	d920      	bls.n	12072 <heartbeat_pub_set+0x9a>
	if (param->period_log > 0x10) {
   12030:	f1b8 0f10 	cmp.w	r8, #16
   12034:	d81d      	bhi.n	12072 <heartbeat_pub_set+0x9a>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
   12036:	f083 0180 	eor.w	r1, r3, #128	; 0x80
   1203a:	297e      	cmp	r1, #126	; 0x7e
   1203c:	d807      	bhi.n	1204e <heartbeat_pub_set+0x76>
		BT_ERR("Invalid TTL value 0x%02x", param->ttl);
   1203e:	480e      	ldr	r0, [pc, #56]	; (12078 <heartbeat_pub_set+0xa0>)
   12040:	461a      	mov	r2, r3
   12042:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   12044:	f012 f8fa 	bl	2423c <printk>
}
   12048:	b004      	add	sp, #16
   1204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pub.net_idx > 0xfff) {
   1204e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   12052:	d302      	bcc.n	1205a <heartbeat_pub_set+0x82>
		BT_ERR("Invalid NetKeyIndex 0x%04x", pub.net_idx);
   12054:	2145      	movs	r1, #69	; 0x45
   12056:	4809      	ldr	r0, [pc, #36]	; (1207c <heartbeat_pub_set+0xa4>)
   12058:	e7f4      	b.n	12044 <heartbeat_pub_set+0x6c>
	status = bt_mesh_hb_pub_set(&pub);
   1205a:	4668      	mov	r0, sp
   1205c:	f7fe fae0 	bl	10620 <bt_mesh_hb_pub_set>
   12060:	4602      	mov	r2, r0
	hb_pub_send_status(model, ctx, status, &pub);
   12062:	466b      	mov	r3, sp
   12064:	4631      	mov	r1, r6
   12066:	4628      	mov	r0, r5
   12068:	f7ff ff5e 	bl	11f28 <hb_pub_send_status>
   1206c:	e7ec      	b.n	12048 <heartbeat_pub_set+0x70>
		status = STATUS_INVALID_ADDRESS;
   1206e:	2201      	movs	r2, #1
   12070:	e7f7      	b.n	12062 <heartbeat_pub_set+0x8a>
		status = STATUS_CANNOT_SET;
   12072:	220f      	movs	r2, #15
   12074:	e7f5      	b.n	12062 <heartbeat_pub_set+0x8a>
   12076:	bf00      	nop
   12078:	0002f4d8 	.word	0x0002f4d8
   1207c:	0002f283 	.word	0x0002f283

00012080 <lpn_timeout_get>:
{
   12080:	b570      	push	{r4, r5, r6, lr}
   12082:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   12084:	ab02      	add	r3, sp, #8
{
   12086:	4605      	mov	r5, r0
   12088:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
   1208a:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   1208c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   12090:	9305      	str	r3, [sp, #20]
   12092:	e9cd 1306 	strd	r1, r3, [sp, #24]
	lpn_addr = net_buf_simple_pull_le16(buf);
   12096:	f017 fc44 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   1209a:	b203      	sxth	r3, r0
   1209c:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   1209e:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   120a0:	dc05      	bgt.n	120ae <lpn_timeout_get+0x2e>
		BT_WARN("Invalid LPNAddress; ignoring msg");
   120a2:	480f      	ldr	r0, [pc, #60]	; (120e0 <lpn_timeout_get+0x60>)
   120a4:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send LPN PollTimeout Status");
   120a6:	f012 f8c9 	bl	2423c <printk>
}
   120aa:	b008      	add	sp, #32
   120ac:	bd70      	pop	{r4, r5, r6, pc}
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   120ae:	f248 012e 	movw	r1, #32814	; 0x802e
   120b2:	a805      	add	r0, sp, #20
   120b4:	f016 f81d 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   120b8:	4621      	mov	r1, r4
   120ba:	a805      	add	r0, sp, #20
   120bc:	f017 fc82 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le24(&msg, timeout_ms);
   120c0:	2100      	movs	r1, #0
   120c2:	a805      	add	r0, sp, #20
   120c4:	f017 fc90 	bl	299e8 <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   120c8:	2300      	movs	r3, #0
   120ca:	9300      	str	r3, [sp, #0]
   120cc:	aa05      	add	r2, sp, #20
   120ce:	4631      	mov	r1, r6
   120d0:	4628      	mov	r0, r5
   120d2:	f016 f837 	bl	28144 <bt_mesh_model_send>
   120d6:	2800      	cmp	r0, #0
   120d8:	d0e7      	beq.n	120aa <lpn_timeout_get+0x2a>
		BT_ERR("Unable to send LPN PollTimeout Status");
   120da:	2145      	movs	r1, #69	; 0x45
   120dc:	4801      	ldr	r0, [pc, #4]	; (120e4 <lpn_timeout_get+0x64>)
   120de:	e7e2      	b.n	120a6 <lpn_timeout_get+0x26>
   120e0:	0002f549 	.word	0x0002f549
   120e4:	0002f56f 	.word	0x0002f56f

000120e8 <send_friend_status>:
{
   120e8:	b530      	push	{r4, r5, lr}
   120ea:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   120ec:	ab03      	add	r3, sp, #12
   120ee:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   120f2:	4604      	mov	r4, r0
   120f4:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   120f6:	a805      	add	r0, sp, #20
   120f8:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   120fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12100:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   12102:	f015 fff6 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_friend_get());
   12106:	f015 fbab 	bl	27860 <bt_mesh_friend_get>
   1210a:	4601      	mov	r1, r0
   1210c:	a805      	add	r0, sp, #20
   1210e:	f017 fc52 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12112:	2300      	movs	r3, #0
   12114:	9300      	str	r3, [sp, #0]
   12116:	aa05      	add	r2, sp, #20
   12118:	4629      	mov	r1, r5
   1211a:	4620      	mov	r0, r4
   1211c:	f016 f812 	bl	28144 <bt_mesh_model_send>
   12120:	b118      	cbz	r0, 1212a <send_friend_status+0x42>
		BT_ERR("Unable to send Friend Status");
   12122:	2145      	movs	r1, #69	; 0x45
   12124:	4802      	ldr	r0, [pc, #8]	; (12130 <send_friend_status+0x48>)
   12126:	f012 f889 	bl	2423c <printk>
}
   1212a:	b009      	add	sp, #36	; 0x24
   1212c:	bd30      	pop	{r4, r5, pc}
   1212e:	bf00      	nop
   12130:	0002f890 	.word	0x0002f890

00012134 <friend_set>:
{
   12134:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12136:	6813      	ldr	r3, [r2, #0]
   12138:	781a      	ldrb	r2, [r3, #0]
   1213a:	2a01      	cmp	r2, #1
{
   1213c:	4604      	mov	r4, r0
   1213e:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12140:	d905      	bls.n	1214e <friend_set+0x1a>
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   12142:	2157      	movs	r1, #87	; 0x57
   12144:	4806      	ldr	r0, [pc, #24]	; (12160 <friend_set+0x2c>)
}
   12146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid Friend value 0x%02x", buf->data[0]);
   1214a:	f012 b877 	b.w	2423c <printk>
	(void)bt_mesh_friend_set(buf->data[0]);
   1214e:	4610      	mov	r0, r2
   12150:	f015 fb83 	bl	2785a <bt_mesh_friend_set>
	send_friend_status(model, ctx);
   12154:	4629      	mov	r1, r5
   12156:	4620      	mov	r0, r4
}
   12158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_friend_status(model, ctx);
   1215c:	f7ff bfc4 	b.w	120e8 <send_friend_status>
   12160:	0002f42f 	.word	0x0002f42f

00012164 <mod_app_get>:
{
   12164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12168:	4614      	mov	r4, r2
   1216a:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   1216c:	ab07      	add	r3, sp, #28
   1216e:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   12172:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   12174:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg,
   12176:	9304      	str	r3, [sp, #16]
   12178:	e9cd 2305 	strd	r2, r3, [sp, #20]
{
   1217c:	460f      	mov	r7, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1217e:	f017 fbd0 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12182:	b203      	sxth	r3, r0
   12184:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12186:	4681      	mov	r9, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12188:	dc06      	bgt.n	12198 <mod_app_get+0x34>
		BT_WARN("Prohibited element address");
   1218a:	4828      	ldr	r0, [pc, #160]	; (1222c <mod_app_get+0xc8>)
   1218c:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model Application List message");
   1218e:	f012 f855 	bl	2423c <printk>
}
   12192:	b00d      	add	sp, #52	; 0x34
   12194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_id = buf->data;
   12198:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   1219c:	f7ff f840 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   121a0:	4605      	mov	r5, r0
   121a2:	bb58      	cbnz	r0, 121fc <mod_app_get+0x98>
		vnd = (buf->len == 4U);
   121a4:	88a3      	ldrh	r3, [r4, #4]
   121a6:	1f1a      	subs	r2, r3, #4
   121a8:	4253      	negs	r3, r2
   121aa:	4153      	adcs	r3, r2
   121ac:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   121b0:	2401      	movs	r4, #1
	if (vnd) {
   121b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   121b6:	b35b      	cbz	r3, 12210 <mod_app_get+0xac>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   121b8:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   121bc:	a804      	add	r0, sp, #16
   121be:	f015 ff98 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   121c2:	4621      	mov	r1, r4
   121c4:	a804      	add	r0, sp, #16
   121c6:	f017 fbf6 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   121ca:	4649      	mov	r1, r9
   121cc:	a804      	add	r0, sp, #16
   121ce:	f017 fbf9 	bl	299c4 <net_buf_simple_add_le16>
	if (vnd) {
   121d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   121d6:	b1f3      	cbz	r3, 12216 <mod_app_get+0xb2>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   121d8:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   121da:	4641      	mov	r1, r8
   121dc:	a804      	add	r0, sp, #16
   121de:	f017 fbde 	bl	2999e <net_buf_simple_add_mem>
	if (mod) {
   121e2:	b9d5      	cbnz	r5, 1221a <mod_app_get+0xb6>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   121e4:	2300      	movs	r3, #0
   121e6:	9300      	str	r3, [sp, #0]
   121e8:	aa04      	add	r2, sp, #16
   121ea:	4639      	mov	r1, r7
   121ec:	4630      	mov	r0, r6
   121ee:	f015 ffa9 	bl	28144 <bt_mesh_model_send>
   121f2:	2800      	cmp	r0, #0
   121f4:	d0cd      	beq.n	12192 <mod_app_get+0x2e>
		BT_ERR("Unable to send Model Application List message");
   121f6:	2145      	movs	r1, #69	; 0x45
   121f8:	480d      	ldr	r0, [pc, #52]	; (12230 <mod_app_get+0xcc>)
   121fa:	e7c8      	b.n	1218e <mod_app_get+0x2a>
	mod = get_model(elem, buf, &vnd);
   121fc:	4621      	mov	r1, r4
   121fe:	f10d 020f 	add.w	r2, sp, #15
   12202:	f016 f8b0 	bl	28366 <get_model>
		status = STATUS_INVALID_MODEL;
   12206:	1e05      	subs	r5, r0, #0
   12208:	bf14      	ite	ne
   1220a:	2400      	movne	r4, #0
   1220c:	2402      	moveq	r4, #2
   1220e:	e7d0      	b.n	121b2 <mod_app_get+0x4e>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   12210:	f248 014c 	movw	r1, #32844	; 0x804c
   12214:	e7d2      	b.n	121bc <mod_app_get+0x58>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   12216:	2202      	movs	r2, #2
   12218:	e7df      	b.n	121da <mod_app_get+0x76>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   1221a:	89a9      	ldrh	r1, [r5, #12]
   1221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12220:	4299      	cmp	r1, r3
   12222:	d0df      	beq.n	121e4 <mod_app_get+0x80>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   12224:	a804      	add	r0, sp, #16
   12226:	f017 fbcd 	bl	299c4 <net_buf_simple_add_le16>
   1222a:	e7db      	b.n	121e4 <mod_app_get+0x80>
   1222c:	0002f699 	.word	0x0002f699
   12230:	0002f605 	.word	0x0002f605

00012234 <mod_sub_del_all>:
{
   12234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12238:	4606      	mov	r6, r0
   1223a:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   1223c:	4610      	mov	r0, r2
{
   1223e:	460f      	mov	r7, r1
   12240:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12242:	f017 fb6e 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12246:	b203      	sxth	r3, r0
   12248:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1224a:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1224c:	dc06      	bgt.n	1225c <mod_sub_del_all+0x28>
		BT_WARN("Prohibited element address");
   1224e:	2157      	movs	r1, #87	; 0x57
   12250:	4818      	ldr	r0, [pc, #96]	; (122b4 <mod_sub_del_all+0x80>)
   12252:	f011 fff3 	bl	2423c <printk>
}
   12256:	b006      	add	sp, #24
   12258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   1225c:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   12260:	f7fe ffde 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   12264:	b990      	cbnz	r0, 1228c <mod_sub_del_all+0x58>
		vnd = (buf->len == 4U);
   12266:	88a3      	ldrh	r3, [r4, #4]
   12268:	1f1a      	subs	r2, r3, #4
   1226a:	4253      	negs	r3, r2
   1226c:	4153      	adcs	r3, r2
   1226e:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   12272:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
   12274:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12278:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1227c:	2300      	movs	r3, #0
   1227e:	9300      	str	r3, [sp, #0]
   12280:	4639      	mov	r1, r7
   12282:	462b      	mov	r3, r5
   12284:	4630      	mov	r0, r6
   12286:	f7ff fa5b 	bl	11740 <send_mod_sub_status>
   1228a:	e7e4      	b.n	12256 <mod_sub_del_all+0x22>
	mod = get_model(elem, buf, &vnd);
   1228c:	4621      	mov	r1, r4
   1228e:	f10d 0217 	add.w	r2, sp, #23
   12292:	f016 f868 	bl	28366 <get_model>
	if (!mod) {
   12296:	4604      	mov	r4, r0
   12298:	b150      	cbz	r0, 122b0 <mod_sub_del_all+0x7c>
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_clear_visitor,
   1229a:	f015 ff96 	bl	281ca <bt_mesh_model_root>
   1229e:	2200      	movs	r2, #0
   122a0:	4905      	ldr	r1, [pc, #20]	; (122b8 <mod_sub_del_all+0x84>)
   122a2:	f015 ff93 	bl	281cc <bt_mesh_model_tree_walk>
		bt_mesh_model_sub_store(mod);
   122a6:	4620      	mov	r0, r4
   122a8:	f015 ff9a 	bl	281e0 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   122ac:	2200      	movs	r2, #0
   122ae:	e7e1      	b.n	12274 <mod_sub_del_all+0x40>
		status = STATUS_INVALID_MODEL;
   122b0:	2202      	movs	r2, #2
   122b2:	e7df      	b.n	12274 <mod_sub_del_all+0x40>
   122b4:	0002f699 	.word	0x0002f699
   122b8:	0002825d 	.word	0x0002825d

000122bc <mod_sub_va_overwrite>:
{
   122bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   122c0:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   122c2:	2300      	movs	r3, #0
{
   122c4:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   122c6:	4610      	mov	r0, r2
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
   122c8:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   122cc:	4688      	mov	r8, r1
   122ce:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   122d0:	f017 fb27 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   122d4:	b203      	sxth	r3, r0
   122d6:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   122d8:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   122da:	dc06      	bgt.n	122ea <mod_sub_va_overwrite+0x2e>
		BT_WARN("Prohibited element address");
   122dc:	2157      	movs	r1, #87	; 0x57
   122de:	4824      	ldr	r0, [pc, #144]	; (12370 <mod_sub_va_overwrite+0xb4>)
   122e0:	f011 ffac 	bl	2423c <printk>
}
   122e4:	b006      	add	sp, #24
   122e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   122ea:	2110      	movs	r1, #16
   122ec:	4620      	mov	r0, r4
   122ee:	f00b fa35 	bl	1d75c <net_buf_simple_pull_mem>
   122f2:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
   122f4:	4630      	mov	r0, r6
	mod_id = buf->data;
   122f6:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   122fa:	f7fe ff91 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   122fe:	b9a0      	cbnz	r0, 1232a <mod_sub_va_overwrite+0x6e>
		vnd = (buf->len == 4U);
   12300:	88a3      	ldrh	r3, [r4, #4]
   12302:	1f1a      	subs	r2, r3, #4
   12304:	4253      	negs	r3, r2
   12306:	4153      	adcs	r3, r2
   12308:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
   1230c:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1230e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12312:	e9cd 9301 	strd	r9, r3, [sp, #4]
   12316:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1231a:	9300      	str	r3, [sp, #0]
   1231c:	4622      	mov	r2, r4
   1231e:	4633      	mov	r3, r6
   12320:	4641      	mov	r1, r8
   12322:	4638      	mov	r0, r7
   12324:	f7ff fa0c 	bl	11740 <send_mod_sub_status>
   12328:	e7dc      	b.n	122e4 <mod_sub_va_overwrite+0x28>
	mod = get_model(elem, buf, &vnd);
   1232a:	f10d 0215 	add.w	r2, sp, #21
   1232e:	4621      	mov	r1, r4
   12330:	f016 f819 	bl	28366 <get_model>
	if (!mod) {
   12334:	4605      	mov	r5, r0
   12336:	b1c8      	cbz	r0, 1236c <mod_sub_va_overwrite+0xb0>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
   12338:	f10d 0116 	add.w	r1, sp, #22
   1233c:	4650      	mov	r0, sl
   1233e:	f7fd faaf 	bl	f8a0 <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
   12342:	4604      	mov	r4, r0
   12344:	2800      	cmp	r0, #0
   12346:	d1e2      	bne.n	1230e <mod_sub_va_overwrite+0x52>
			bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   12348:	4628      	mov	r0, r5
   1234a:	f015 ff3e 	bl	281ca <bt_mesh_model_root>
   1234e:	4622      	mov	r2, r4
   12350:	4908      	ldr	r1, [pc, #32]	; (12374 <mod_sub_va_overwrite+0xb8>)
   12352:	f015 ff3b 	bl	281cc <bt_mesh_model_tree_walk>
			mod->groups[0] = sub_addr;
   12356:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1235a:	81eb      	strh	r3, [r5, #14]
				bt_mesh_model_sub_store(mod);
   1235c:	4628      	mov	r0, r5
   1235e:	f015 ff3f 	bl	281e0 <bt_mesh_model_sub_store>
				bt_mesh_lpn_group_add(sub_addr);
   12362:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   12366:	f001 fff7 	bl	14358 <bt_mesh_lpn_group_add>
   1236a:	e7d0      	b.n	1230e <mod_sub_va_overwrite+0x52>
		status = STATUS_INVALID_MODEL;
   1236c:	2402      	movs	r4, #2
   1236e:	e7ce      	b.n	1230e <mod_sub_va_overwrite+0x52>
   12370:	0002f699 	.word	0x0002f699
   12374:	0002825d 	.word	0x0002825d

00012378 <mod_sub_overwrite>:
{
   12378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1237c:	4607      	mov	r7, r0
   1237e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   12380:	4610      	mov	r0, r2
{
   12382:	4688      	mov	r8, r1
   12384:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12386:	f017 facc 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1238a:	b203      	sxth	r3, r0
   1238c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1238e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12390:	dc06      	bgt.n	123a0 <mod_sub_overwrite+0x28>
		BT_WARN("Prohibited element address");
   12392:	2157      	movs	r1, #87	; 0x57
   12394:	481f      	ldr	r0, [pc, #124]	; (12414 <mod_sub_overwrite+0x9c>)
   12396:	f011 ff51 	bl	2423c <printk>
}
   1239a:	b007      	add	sp, #28
   1239c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   123a0:	4620      	mov	r0, r4
   123a2:	f017 fabe 	bl	29922 <net_buf_simple_pull_le16>
   123a6:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   123a8:	4630      	mov	r0, r6
	mod_id = buf->data;
   123aa:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   123ae:	f7fe ff37 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   123b2:	b938      	cbnz	r0, 123c4 <mod_sub_overwrite+0x4c>
		vnd = (buf->len == 4U);
   123b4:	88a3      	ldrh	r3, [r4, #4]
   123b6:	1f1a      	subs	r2, r3, #4
   123b8:	4253      	negs	r3, r2
   123ba:	4153      	adcs	r3, r2
   123bc:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   123c0:	2201      	movs	r2, #1
   123c2:	e01a      	b.n	123fa <mod_sub_overwrite+0x82>
	mod = get_model(elem, buf, &vnd);
   123c4:	4621      	mov	r1, r4
   123c6:	f10d 0217 	add.w	r2, sp, #23
   123ca:	f015 ffcc 	bl	28366 <get_model>
	if (!mod) {
   123ce:	4604      	mov	r4, r0
   123d0:	b1f0      	cbz	r0, 12410 <mod_sub_overwrite+0x98>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   123d2:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   123d6:	b29b      	uxth	r3, r3
   123d8:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   123dc:	d8f0      	bhi.n	123c0 <mod_sub_overwrite+0x48>
		bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
   123de:	f015 fef4 	bl	281ca <bt_mesh_model_root>
   123e2:	2200      	movs	r2, #0
   123e4:	490c      	ldr	r1, [pc, #48]	; (12418 <mod_sub_overwrite+0xa0>)
   123e6:	f015 fef1 	bl	281cc <bt_mesh_model_tree_walk>
			bt_mesh_model_sub_store(mod);
   123ea:	4620      	mov	r0, r4
		mod->groups[0] = sub_addr;
   123ec:	81e5      	strh	r5, [r4, #14]
			bt_mesh_model_sub_store(mod);
   123ee:	f015 fef7 	bl	281e0 <bt_mesh_model_sub_store>
			bt_mesh_lpn_group_add(sub_addr);
   123f2:	4628      	mov	r0, r5
   123f4:	f001 ffb0 	bl	14358 <bt_mesh_lpn_group_add>
		status = STATUS_SUCCESS;
   123f8:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   123fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
   123fe:	9500      	str	r5, [sp, #0]
   12400:	e9cd 9301 	strd	r9, r3, [sp, #4]
   12404:	4641      	mov	r1, r8
   12406:	4633      	mov	r3, r6
   12408:	4638      	mov	r0, r7
   1240a:	f7ff f999 	bl	11740 <send_mod_sub_status>
   1240e:	e7c4      	b.n	1239a <mod_sub_overwrite+0x22>
		status = STATUS_INVALID_MODEL;
   12410:	2202      	movs	r2, #2
   12412:	e7f2      	b.n	123fa <mod_sub_overwrite+0x82>
   12414:	0002f699 	.word	0x0002f699
   12418:	0002825d 	.word	0x0002825d

0001241c <mod_sub_va_del>:
{
   1241c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12420:	4606      	mov	r6, r0
   12422:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   12424:	4610      	mov	r0, r2
{
   12426:	460f      	mov	r7, r1
   12428:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1242a:	f017 fa7a 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1242e:	b203      	sxth	r3, r0
   12430:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12432:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12434:	dc06      	bgt.n	12444 <mod_sub_va_del+0x28>
		BT_WARN("Prohibited element address");
   12436:	2157      	movs	r1, #87	; 0x57
   12438:	4828      	ldr	r0, [pc, #160]	; (124dc <mod_sub_va_del+0xc0>)
   1243a:	f011 feff 	bl	2423c <printk>
}
   1243e:	b007      	add	sp, #28
   12440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   12444:	2110      	movs	r1, #16
   12446:	4620      	mov	r0, r4
   12448:	f00b f988 	bl	1d75c <net_buf_simple_pull_mem>
   1244c:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   1244e:	4628      	mov	r0, r5
	mod_id = buf->data;
   12450:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   12454:	f7fe fee4 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   12458:	b9b0      	cbnz	r0, 12488 <mod_sub_va_del+0x6c>
		vnd = (buf->len == 4U);
   1245a:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   1245c:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   1245e:	1f19      	subs	r1, r3, #4
   12460:	424b      	negs	r3, r1
   12462:	414b      	adcs	r3, r1
   12464:	f88d 3011 	strb.w	r3, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   12468:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   1246c:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   1246e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12472:	e9cd 8301 	strd	r8, r3, [sp, #4]
   12476:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1247a:	9300      	str	r3, [sp, #0]
   1247c:	4639      	mov	r1, r7
   1247e:	462b      	mov	r3, r5
   12480:	4630      	mov	r0, r6
   12482:	f7ff f95d 	bl	11740 <send_mod_sub_status>
   12486:	e7da      	b.n	1243e <mod_sub_va_del+0x22>
	mod = get_model(elem, buf, &vnd);
   12488:	f10d 0211 	add.w	r2, sp, #17
   1248c:	4621      	mov	r1, r4
   1248e:	f015 ff6a 	bl	28366 <get_model>
   12492:	9005      	str	r0, [sp, #20]
	if (!mod) {
   12494:	b918      	cbnz	r0, 1249e <mod_sub_va_del+0x82>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   12496:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   1249a:	2202      	movs	r2, #2
		goto send_status;
   1249c:	e7e7      	b.n	1246e <mod_sub_va_del+0x52>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   1249e:	f10d 0112 	add.w	r1, sp, #18
   124a2:	4648      	mov	r0, r9
   124a4:	f7fd fa36 	bl	f914 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   124a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   124ac:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   124ae:	2b00      	cmp	r3, #0
   124b0:	d0dd      	beq.n	1246e <mod_sub_va_del+0x52>
		bt_mesh_lpn_group_del(&sub_addr, 1);
   124b2:	2101      	movs	r1, #1
   124b4:	f10d 0012 	add.w	r0, sp, #18
   124b8:	f001 ff94 	bl	143e4 <bt_mesh_lpn_group_del>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   124bc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   124c0:	a805      	add	r0, sp, #20
   124c2:	f015 fe0f 	bl	280e4 <bt_mesh_model_find_group>
	if (match) {
   124c6:	b130      	cbz	r0, 124d6 <mod_sub_va_del+0xba>
		*match = BT_MESH_ADDR_UNASSIGNED;
   124c8:	2400      	movs	r4, #0
   124ca:	8004      	strh	r4, [r0, #0]
			bt_mesh_model_sub_store(mod);
   124cc:	9805      	ldr	r0, [sp, #20]
   124ce:	f015 fe87 	bl	281e0 <bt_mesh_model_sub_store>
		status = STATUS_SUCCESS;
   124d2:	4622      	mov	r2, r4
   124d4:	e7cb      	b.n	1246e <mod_sub_va_del+0x52>
		status = STATUS_CANNOT_REMOVE;
   124d6:	220c      	movs	r2, #12
   124d8:	e7c9      	b.n	1246e <mod_sub_va_del+0x52>
   124da:	bf00      	nop
   124dc:	0002f699 	.word	0x0002f699

000124e0 <mod_sub_del>:
{
   124e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   124e4:	4605      	mov	r5, r0
   124e6:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   124e8:	4610      	mov	r0, r2
{
   124ea:	460e      	mov	r6, r1
   124ec:	4690      	mov	r8, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   124ee:	f017 fa18 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   124f2:	b203      	sxth	r3, r0
   124f4:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   124f6:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   124f8:	dc06      	bgt.n	12508 <mod_sub_del+0x28>
		BT_WARN("Prohibited element address");
   124fa:	2157      	movs	r1, #87	; 0x57
   124fc:	4826      	ldr	r0, [pc, #152]	; (12598 <mod_sub_del+0xb8>)
   124fe:	f011 fe9d 	bl	2423c <printk>
}
   12502:	b006      	add	sp, #24
   12504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   12508:	4640      	mov	r0, r8
   1250a:	f017 fa0a 	bl	29922 <net_buf_simple_pull_le16>
   1250e:	f8ad 0012 	strh.w	r0, [sp, #18]
	elem = bt_mesh_elem_find(elem_addr);
   12512:	4620      	mov	r0, r4
	mod_id = buf->data;
   12514:	f8d8 7000 	ldr.w	r7, [r8]
	elem = bt_mesh_elem_find(elem_addr);
   12518:	f7fe fe82 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   1251c:	b948      	cbnz	r0, 12532 <mod_sub_del+0x52>
		vnd = (buf->len == 4U);
   1251e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
		mod = NULL;
   12522:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   12524:	1f1a      	subs	r2, r3, #4
   12526:	4253      	negs	r3, r2
   12528:	4153      	adcs	r3, r2
   1252a:	f88d 3011 	strb.w	r3, [sp, #17]
		status = STATUS_INVALID_ADDRESS;
   1252e:	2201      	movs	r2, #1
   12530:	e021      	b.n	12576 <mod_sub_del+0x96>
	mod = get_model(elem, buf, &vnd);
   12532:	f10d 0211 	add.w	r2, sp, #17
   12536:	4641      	mov	r1, r8
   12538:	f015 ff15 	bl	28366 <get_model>
   1253c:	9005      	str	r0, [sp, #20]
	if (!mod) {
   1253e:	b338      	cbz	r0, 12590 <mod_sub_del+0xb0>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   12540:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   12544:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   12548:	b29b      	uxth	r3, r3
   1254a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   1254e:	d8ee      	bhi.n	1252e <mod_sub_del+0x4e>
		bt_mesh_lpn_group_del(&sub_addr, 1);
   12550:	2101      	movs	r1, #1
   12552:	f10d 0012 	add.w	r0, sp, #18
   12556:	f001 ff45 	bl	143e4 <bt_mesh_lpn_group_del>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   1255a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1255e:	a805      	add	r0, sp, #20
   12560:	f015 fdc0 	bl	280e4 <bt_mesh_model_find_group>
	if (match) {
   12564:	f04f 0800 	mov.w	r8, #0
   12568:	b1a0      	cbz	r0, 12594 <mod_sub_del+0xb4>
		*match = BT_MESH_ADDR_UNASSIGNED;
   1256a:	f8a0 8000 	strh.w	r8, [r0]
			bt_mesh_model_sub_store(mod);
   1256e:	9805      	ldr	r0, [sp, #20]
   12570:	f015 fe36 	bl	281e0 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   12574:	4642      	mov	r2, r8
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   12576:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1257a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1257e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   12582:	9300      	str	r3, [sp, #0]
   12584:	4631      	mov	r1, r6
   12586:	4623      	mov	r3, r4
   12588:	4628      	mov	r0, r5
   1258a:	f7ff f8d9 	bl	11740 <send_mod_sub_status>
   1258e:	e7b8      	b.n	12502 <mod_sub_del+0x22>
		status = STATUS_INVALID_MODEL;
   12590:	2202      	movs	r2, #2
   12592:	e7f0      	b.n	12576 <mod_sub_del+0x96>
	status = STATUS_SUCCESS;
   12594:	4602      	mov	r2, r0
   12596:	e7ee      	b.n	12576 <mod_sub_del+0x96>
   12598:	0002f699 	.word	0x0002f699

0001259c <mod_sub_va_add>:
{
   1259c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   125a0:	4607      	mov	r7, r0
   125a2:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   125a4:	4610      	mov	r0, r2
{
   125a6:	4688      	mov	r8, r1
   125a8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   125aa:	f017 f9ba 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   125ae:	b203      	sxth	r3, r0
   125b0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   125b2:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   125b4:	dc06      	bgt.n	125c4 <mod_sub_va_add+0x28>
		BT_WARN("Prohibited element address");
   125b6:	2157      	movs	r1, #87	; 0x57
   125b8:	482d      	ldr	r0, [pc, #180]	; (12670 <mod_sub_va_add+0xd4>)
   125ba:	f011 fe3f 	bl	2423c <printk>
}
   125be:	b007      	add	sp, #28
   125c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   125c4:	2110      	movs	r1, #16
   125c6:	4620      	mov	r0, r4
   125c8:	f00b f8c8 	bl	1d75c <net_buf_simple_pull_mem>
   125cc:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   125ce:	4628      	mov	r0, r5
	mod_id = buf->data;
   125d0:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   125d4:	f7fe fe24 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   125d8:	b9b8      	cbnz	r0, 1260a <mod_sub_va_add+0x6e>
		vnd = (buf->len == 4U);
   125da:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   125dc:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   125de:	1f19      	subs	r1, r3, #4
   125e0:	424b      	negs	r3, r1
   125e2:	414b      	adcs	r3, r1
   125e4:	f88d 3011 	strb.w	r3, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   125e8:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   125ec:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   125ee:	f89d 3011 	ldrb.w	r3, [sp, #17]
   125f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
   125f6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   125fa:	9300      	str	r3, [sp, #0]
   125fc:	4622      	mov	r2, r4
   125fe:	462b      	mov	r3, r5
   12600:	4641      	mov	r1, r8
   12602:	4638      	mov	r0, r7
   12604:	f7ff f89c 	bl	11740 <send_mod_sub_status>
   12608:	e7d9      	b.n	125be <mod_sub_va_add+0x22>
	mod = get_model(elem, buf, &vnd);
   1260a:	f10d 0211 	add.w	r2, sp, #17
   1260e:	4621      	mov	r1, r4
   12610:	f015 fea9 	bl	28366 <get_model>
   12614:	9005      	str	r0, [sp, #20]
	if (!mod) {
   12616:	b918      	cbnz	r0, 12620 <mod_sub_va_add+0x84>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   12618:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   1261c:	2402      	movs	r4, #2
		goto send_status;
   1261e:	e7e6      	b.n	125ee <mod_sub_va_add+0x52>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   12620:	f10d 0112 	add.w	r1, sp, #18
   12624:	4630      	mov	r0, r6
   12626:	f7fd f93b 	bl	f8a0 <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   1262a:	4604      	mov	r4, r0
   1262c:	2800      	cmp	r0, #0
   1262e:	d1de      	bne.n	125ee <mod_sub_va_add+0x52>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   12630:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   12634:	a805      	add	r0, sp, #20
   12636:	f015 fd55 	bl	280e4 <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   1263a:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   1263c:	b118      	cbz	r0, 12646 <mod_sub_va_add+0xaa>
		bt_mesh_va_del(label_uuid, NULL);
   1263e:	4630      	mov	r0, r6
   12640:	f7fd f968 	bl	f914 <bt_mesh_va_del>
		goto send_status;
   12644:	e7d3      	b.n	125ee <mod_sub_va_add+0x52>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   12646:	a805      	add	r0, sp, #20
   12648:	f015 fd4c 	bl	280e4 <bt_mesh_model_find_group>
	if (!entry) {
   1264c:	b928      	cbnz	r0, 1265a <mod_sub_va_add+0xbe>
		bt_mesh_va_del(label_uuid, NULL);
   1264e:	4621      	mov	r1, r4
   12650:	4630      	mov	r0, r6
   12652:	f7fd f95f 	bl	f914 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   12656:	2405      	movs	r4, #5
		goto send_status;
   12658:	e7c9      	b.n	125ee <mod_sub_va_add+0x52>
	*entry = sub_addr;
   1265a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1265e:	8003      	strh	r3, [r0, #0]
		bt_mesh_lpn_group_add(sub_addr);
   12660:	4618      	mov	r0, r3
   12662:	f001 fe79 	bl	14358 <bt_mesh_lpn_group_add>
		bt_mesh_model_sub_store(mod);
   12666:	9805      	ldr	r0, [sp, #20]
   12668:	f015 fdba 	bl	281e0 <bt_mesh_model_sub_store>
	status = STATUS_SUCCESS;
   1266c:	e7bf      	b.n	125ee <mod_sub_va_add+0x52>
   1266e:	bf00      	nop
   12670:	0002f699 	.word	0x0002f699

00012674 <mod_sub_add>:
{
   12674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12678:	4607      	mov	r7, r0
   1267a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   1267c:	4610      	mov	r0, r2
{
   1267e:	4688      	mov	r8, r1
   12680:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12682:	f017 f94e 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12686:	b203      	sxth	r3, r0
   12688:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   1268a:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1268c:	dc06      	bgt.n	1269c <mod_sub_add+0x28>
		BT_WARN("Prohibited element address");
   1268e:	2157      	movs	r1, #87	; 0x57
   12690:	4823      	ldr	r0, [pc, #140]	; (12720 <mod_sub_add+0xac>)
   12692:	f011 fdd3 	bl	2423c <printk>
}
   12696:	b007      	add	sp, #28
   12698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	sub_addr = net_buf_simple_pull_le16(buf);
   1269c:	4620      	mov	r0, r4
   1269e:	f017 f940 	bl	29922 <net_buf_simple_pull_le16>
   126a2:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   126a4:	4630      	mov	r0, r6
	mod_id = buf->data;
   126a6:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   126aa:	f7fe fdb9 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   126ae:	b940      	cbnz	r0, 126c2 <mod_sub_add+0x4e>
		vnd = (buf->len == 4U);
   126b0:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   126b2:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   126b4:	1f1a      	subs	r2, r3, #4
   126b6:	4253      	negs	r3, r2
   126b8:	4153      	adcs	r3, r2
   126ba:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   126be:	2201      	movs	r2, #1
   126c0:	e020      	b.n	12704 <mod_sub_add+0x90>
	mod = get_model(elem, buf, &vnd);
   126c2:	f10d 0213 	add.w	r2, sp, #19
   126c6:	4621      	mov	r1, r4
   126c8:	f015 fe4d 	bl	28366 <get_model>
   126cc:	9005      	str	r0, [sp, #20]
	if (!mod) {
   126ce:	b1c0      	cbz	r0, 12702 <mod_sub_add+0x8e>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   126d0:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   126d4:	b29b      	uxth	r3, r3
   126d6:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   126da:	d8f0      	bhi.n	126be <mod_sub_add+0x4a>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   126dc:	4629      	mov	r1, r5
   126de:	a805      	add	r0, sp, #20
   126e0:	f015 fd00 	bl	280e4 <bt_mesh_model_find_group>
   126e4:	b958      	cbnz	r0, 126fe <mod_sub_add+0x8a>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   126e6:	4601      	mov	r1, r0
   126e8:	a805      	add	r0, sp, #20
   126ea:	f015 fcfb 	bl	280e4 <bt_mesh_model_find_group>
	if (!entry) {
   126ee:	b1a0      	cbz	r0, 1271a <mod_sub_add+0xa6>
	*entry = sub_addr;
   126f0:	8005      	strh	r5, [r0, #0]
		bt_mesh_model_sub_store(mod);
   126f2:	9805      	ldr	r0, [sp, #20]
   126f4:	f015 fd74 	bl	281e0 <bt_mesh_model_sub_store>
		bt_mesh_lpn_group_add(sub_addr);
   126f8:	4628      	mov	r0, r5
   126fa:	f001 fe2d 	bl	14358 <bt_mesh_lpn_group_add>
		status = STATUS_SUCCESS;
   126fe:	2200      	movs	r2, #0
   12700:	e000      	b.n	12704 <mod_sub_add+0x90>
		status = STATUS_INVALID_MODEL;
   12702:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   12704:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12708:	9500      	str	r5, [sp, #0]
   1270a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   1270e:	4641      	mov	r1, r8
   12710:	4633      	mov	r3, r6
   12712:	4638      	mov	r0, r7
   12714:	f7ff f814 	bl	11740 <send_mod_sub_status>
   12718:	e7bd      	b.n	12696 <mod_sub_add+0x22>
		status = STATUS_INSUFF_RESOURCES;
   1271a:	2205      	movs	r2, #5
   1271c:	e7f2      	b.n	12704 <mod_sub_add+0x90>
   1271e:	bf00      	nop
   12720:	0002f699 	.word	0x0002f699

00012724 <mod_app_bind>:
{
   12724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12728:	4614      	mov	r4, r2
   1272a:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   1272c:	ab06      	add	r3, sp, #24
   1272e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   12732:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   12734:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   12736:	9303      	str	r3, [sp, #12]
   12738:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   1273c:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   1273e:	f017 f8f0 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12742:	b203      	sxth	r3, r0
   12744:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12746:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12748:	dc06      	bgt.n	12758 <mod_app_bind+0x34>
		BT_WARN("Prohibited element address");
   1274a:	4829      	ldr	r0, [pc, #164]	; (127f0 <mod_app_bind+0xcc>)
   1274c:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model App Bind Status response");
   1274e:	f011 fd75 	bl	2423c <printk>
}
   12752:	b00b      	add	sp, #44	; 0x2c
   12754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   12758:	4620      	mov	r0, r4
   1275a:	f017 f8e2 	bl	29922 <net_buf_simple_pull_le16>
   1275e:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   12760:	4630      	mov	r0, r6
	mod_id = buf->data;
   12762:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   12766:	f7fe fd5b 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   1276a:	b9d8      	cbnz	r0, 127a4 <mod_app_bind+0x80>
		vnd = (buf->len == 4U);
   1276c:	88a3      	ldrh	r3, [r4, #4]
   1276e:	1f1a      	subs	r2, r3, #4
   12770:	4253      	negs	r3, r2
   12772:	4153      	adcs	r3, r2
   12774:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   12778:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   1277a:	e9cd 3900 	strd	r3, r9, [sp]
   1277e:	4632      	mov	r2, r6
   12780:	462b      	mov	r3, r5
   12782:	f89d 100b 	ldrb.w	r1, [sp, #11]
   12786:	a803      	add	r0, sp, #12
   12788:	f015 fe0e 	bl	283a8 <create_mod_app_status.isra.15>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1278c:	2300      	movs	r3, #0
   1278e:	9300      	str	r3, [sp, #0]
   12790:	aa03      	add	r2, sp, #12
   12792:	4641      	mov	r1, r8
   12794:	4638      	mov	r0, r7
   12796:	f015 fcd5 	bl	28144 <bt_mesh_model_send>
   1279a:	2800      	cmp	r0, #0
   1279c:	d0d9      	beq.n	12752 <mod_app_bind+0x2e>
		BT_ERR("Unable to send Model App Bind Status response");
   1279e:	2145      	movs	r1, #69	; 0x45
   127a0:	4814      	ldr	r0, [pc, #80]	; (127f4 <mod_app_bind+0xd0>)
   127a2:	e7d4      	b.n	1274e <mod_app_bind+0x2a>
	mod = get_model(elem, buf, &vnd);
   127a4:	4621      	mov	r1, r4
   127a6:	f10d 020b 	add.w	r2, sp, #11
   127aa:	f015 fddc 	bl	28366 <get_model>
	if (!mod) {
   127ae:	4604      	mov	r4, r0
   127b0:	b1c0      	cbz	r0, 127e4 <mod_app_bind+0xc0>
	if (model == mod) {
   127b2:	42b8      	cmp	r0, r7
   127b4:	d105      	bne.n	127c2 <mod_app_bind+0x9e>
		BT_ERR("Client tried to bind AppKey to Configuration Model");
   127b6:	2145      	movs	r1, #69	; 0x45
   127b8:	480f      	ldr	r0, [pc, #60]	; (127f8 <mod_app_bind+0xd4>)
   127ba:	f011 fd3f 	bl	2423c <printk>
		status = STATUS_CANNOT_BIND;
   127be:	230d      	movs	r3, #13
		goto send_status;
   127c0:	e7db      	b.n	1277a <mod_app_bind+0x56>
	if (!bt_mesh_app_key_exists(key_idx)) {
   127c2:	4628      	mov	r0, r5
   127c4:	f7fc fa74 	bl	ecb0 <bt_mesh_app_key_exists>
   127c8:	b170      	cbz	r0, 127e8 <mod_app_bind+0xc4>
		if (model->keys[i] == key_idx) {
   127ca:	89a3      	ldrh	r3, [r4, #12]
   127cc:	429d      	cmp	r5, r3
   127ce:	d007      	beq.n	127e0 <mod_app_bind+0xbc>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   127d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   127d4:	4293      	cmp	r3, r2
   127d6:	d109      	bne.n	127ec <mod_app_bind+0xc8>
			model->keys[i] = key_idx;
   127d8:	81a5      	strh	r5, [r4, #12]
				bt_mesh_model_bind_store(model);
   127da:	4620      	mov	r0, r4
   127dc:	f015 fcf9 	bl	281d2 <bt_mesh_model_bind_store>
			return STATUS_SUCCESS;
   127e0:	2300      	movs	r3, #0
   127e2:	e7ca      	b.n	1277a <mod_app_bind+0x56>
		status = STATUS_INVALID_MODEL;
   127e4:	2302      	movs	r3, #2
   127e6:	e7c8      	b.n	1277a <mod_app_bind+0x56>
		return STATUS_INVALID_APPKEY;
   127e8:	2303      	movs	r3, #3
   127ea:	e7c6      	b.n	1277a <mod_app_bind+0x56>
	return STATUS_INSUFF_RESOURCES;
   127ec:	2305      	movs	r3, #5
   127ee:	e7c4      	b.n	1277a <mod_app_bind+0x56>
   127f0:	0002f699 	.word	0x0002f699
   127f4:	0002f5d2 	.word	0x0002f5d2
   127f8:	0002f59a 	.word	0x0002f59a

000127fc <mod_sub_list_visitor>:
{
   127fc:	b538      	push	{r3, r4, r5, lr}
   127fe:	4615      	mov	r5, r2
	if (mod->elem_idx != visit->elem_idx) {
   12800:	7902      	ldrb	r2, [r0, #4]
   12802:	882b      	ldrh	r3, [r5, #0]
   12804:	429a      	cmp	r2, r3
{
   12806:	4604      	mov	r4, r0
	if (mod->elem_idx != visit->elem_idx) {
   12808:	d110      	bne.n	1282c <mod_sub_list_visitor+0x30>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   1280a:	89c3      	ldrh	r3, [r0, #14]
   1280c:	b173      	cbz	r3, 1282c <mod_sub_list_visitor+0x30>
		if (net_buf_simple_tailroom(visit->msg) <
   1280e:	6868      	ldr	r0, [r5, #4]
   12810:	f017 f8bd 	bl	2998e <net_buf_simple_tailroom>
   12814:	2805      	cmp	r0, #5
   12816:	d805      	bhi.n	12824 <mod_sub_list_visitor+0x28>
			BT_WARN("No room for all groups");
   12818:	4805      	ldr	r0, [pc, #20]	; (12830 <mod_sub_list_visitor+0x34>)
   1281a:	2157      	movs	r1, #87	; 0x57
   1281c:	f011 fd0e 	bl	2423c <printk>
   12820:	2000      	movs	r0, #0
}
   12822:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   12824:	89e1      	ldrh	r1, [r4, #14]
   12826:	6868      	ldr	r0, [r5, #4]
   12828:	f017 f8cc 	bl	299c4 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   1282c:	2001      	movs	r0, #1
   1282e:	e7f8      	b.n	12822 <mod_sub_list_visitor+0x26>
   12830:	0002f706 	.word	0x0002f706

00012834 <send_mod_pub_status.isra.19>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   12834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12838:	b08a      	sub	sp, #40	; 0x28
   1283a:	460e      	mov	r6, r1
   1283c:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   12840:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   12844:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   12846:	a905      	add	r1, sp, #20
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   12848:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   1284a:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
   1284e:	e9cd 3103 	strd	r3, r1, [sp, #12]
   12852:	9102      	str	r1, [sp, #8]
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   12854:	4605      	mov	r5, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   12856:	f248 0119 	movw	r1, #32793	; 0x8019
   1285a:	a802      	add	r0, sp, #8
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   1285c:	4692      	mov	sl, r2
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   1285e:	f015 fc48 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   12862:	4641      	mov	r1, r8
   12864:	a802      	add	r0, sp, #8
   12866:	f017 f8a6 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   1286a:	4651      	mov	r1, sl
   1286c:	a802      	add	r0, sp, #8
   1286e:	f017 f8a9 	bl	299c4 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   12872:	f1b8 0f00 	cmp.w	r8, #0
   12876:	d020      	beq.n	128ba <send_mod_pub_status.isra.19+0x86>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   12878:	2107      	movs	r1, #7
   1287a:	a802      	add	r0, sp, #8
   1287c:	f00a ff8c 	bl	1d798 <net_buf_simple_add>
   12880:	2207      	movs	r2, #7
   12882:	2100      	movs	r1, #0
   12884:	f013 fc96 	bl	261b4 <memset>
	if (vnd) {
   12888:	2f00      	cmp	r7, #0
   1288a:	d036      	beq.n	128fa <send_mod_pub_status.isra.19+0xc6>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   1288c:	2104      	movs	r1, #4
   1288e:	a802      	add	r0, sp, #8
   12890:	f00a ff82 	bl	1d798 <net_buf_simple_add>
   12894:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   12896:	9915      	ldr	r1, [sp, #84]	; 0x54
   12898:	f013 fc62 	bl	26160 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   1289c:	2300      	movs	r3, #0
   1289e:	9300      	str	r3, [sp, #0]
   128a0:	aa02      	add	r2, sp, #8
   128a2:	4631      	mov	r1, r6
   128a4:	4628      	mov	r0, r5
   128a6:	f015 fc4d 	bl	28144 <bt_mesh_model_send>
   128aa:	b118      	cbz	r0, 128b4 <send_mod_pub_status.isra.19+0x80>
		BT_ERR("Unable to send Model Publication Status");
   128ac:	2145      	movs	r1, #69	; 0x45
   128ae:	4816      	ldr	r0, [pc, #88]	; (12908 <send_mod_pub_status.isra.19+0xd4>)
   128b0:	f011 fcc4 	bl	2423c <printk>
}
   128b4:	b00a      	add	sp, #40	; 0x28
   128b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   128ba:	4649      	mov	r1, r9
   128bc:	a802      	add	r0, sp, #8
   128be:	f017 f881 	bl	299c4 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   128c2:	6823      	ldr	r3, [r4, #0]
   128c4:	79d9      	ldrb	r1, [r3, #7]
   128c6:	88db      	ldrh	r3, [r3, #6]
   128c8:	f3c1 1100 	ubfx	r1, r1, #4, #1
   128cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
		net_buf_simple_add_le16(&msg, idx_cred);
   128d0:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
   128d4:	a802      	add	r0, sp, #8
   128d6:	f017 f875 	bl	299c4 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   128da:	6823      	ldr	r3, [r4, #0]
   128dc:	a802      	add	r0, sp, #8
   128de:	7a19      	ldrb	r1, [r3, #8]
   128e0:	f017 f869 	bl	299b6 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   128e4:	6823      	ldr	r3, [r4, #0]
   128e6:	a802      	add	r0, sp, #8
   128e8:	7a99      	ldrb	r1, [r3, #10]
   128ea:	f017 f864 	bl	299b6 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   128ee:	6823      	ldr	r3, [r4, #0]
   128f0:	a802      	add	r0, sp, #8
   128f2:	7a59      	ldrb	r1, [r3, #9]
   128f4:	f017 f85f 	bl	299b6 <net_buf_simple_add_u8>
   128f8:	e7c6      	b.n	12888 <send_mod_pub_status.isra.19+0x54>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   128fa:	2102      	movs	r1, #2
   128fc:	a802      	add	r0, sp, #8
   128fe:	f00a ff4b 	bl	1d798 <net_buf_simple_add>
   12902:	2202      	movs	r2, #2
   12904:	e7c7      	b.n	12896 <send_mod_pub_status.isra.19+0x62>
   12906:	bf00      	nop
   12908:	0002f905 	.word	0x0002f905

0001290c <mod_pub_get>:
{
   1290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12910:	4605      	mov	r5, r0
   12912:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
   12914:	4610      	mov	r0, r2
{
   12916:	460e      	mov	r6, r1
   12918:	4690      	mov	r8, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   1291a:	f017 f802 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   1291e:	b203      	sxth	r3, r0
   12920:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12922:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12924:	dc06      	bgt.n	12934 <mod_pub_get+0x28>
		BT_WARN("Prohibited element address");
   12926:	2157      	movs	r1, #87	; 0x57
   12928:	4818      	ldr	r0, [pc, #96]	; (1298c <mod_pub_get+0x80>)
   1292a:	f011 fc87 	bl	2423c <printk>
}
   1292e:	b006      	add	sp, #24
   12930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod_id = buf->data;
   12934:	f8d8 7000 	ldr.w	r7, [r8]
	elem = bt_mesh_elem_find(elem_addr);
   12938:	f7fe fc72 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   1293c:	4602      	mov	r2, r0
   1293e:	b948      	cbnz	r0, 12954 <mod_pub_get+0x48>
		vnd = (buf->len == 4U);
   12940:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   12944:	1f19      	subs	r1, r3, #4
   12946:	424b      	negs	r3, r1
   12948:	414b      	adcs	r3, r1
   1294a:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   1294e:	2101      	movs	r1, #1
	uint16_t elem_addr, pub_addr = 0U;
   12950:	4613      	mov	r3, r2
   12952:	e00a      	b.n	1296a <mod_pub_get+0x5e>
	mod = get_model(elem, buf, &vnd);
   12954:	f10d 0217 	add.w	r2, sp, #23
   12958:	4641      	mov	r1, r8
   1295a:	f015 fd04 	bl	28366 <get_model>
	if (!mod) {
   1295e:	4602      	mov	r2, r0
   12960:	b180      	cbz	r0, 12984 <mod_pub_get+0x78>
	if (!mod->pub) {
   12962:	6883      	ldr	r3, [r0, #8]
   12964:	b183      	cbz	r3, 12988 <mod_pub_get+0x7c>
	pub_addr = mod->pub->addr;
   12966:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   12968:	2100      	movs	r1, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   1296a:	3208      	adds	r2, #8
   1296c:	9201      	str	r2, [sp, #4]
   1296e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   12972:	9200      	str	r2, [sp, #0]
   12974:	e9cd 1702 	strd	r1, r7, [sp, #8]
   12978:	4622      	mov	r2, r4
   1297a:	4631      	mov	r1, r6
   1297c:	4628      	mov	r0, r5
   1297e:	f7ff ff59 	bl	12834 <send_mod_pub_status.isra.19>
   12982:	e7d4      	b.n	1292e <mod_pub_get+0x22>
		status = STATUS_INVALID_MODEL;
   12984:	2102      	movs	r1, #2
   12986:	e7e3      	b.n	12950 <mod_pub_get+0x44>
		status = STATUS_NVAL_PUB_PARAM;
   12988:	2107      	movs	r1, #7
   1298a:	e7ee      	b.n	1296a <mod_pub_get+0x5e>
   1298c:	0002f699 	.word	0x0002f699

00012990 <relay_get>:
{
   12990:	b530      	push	{r4, r5, lr}
   12992:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   12994:	ab03      	add	r3, sp, #12
   12996:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   1299a:	4604      	mov	r4, r0
   1299c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   1299e:	a805      	add	r0, sp, #20
   129a0:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   129a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   129a8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   129aa:	f015 fba2 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   129ae:	f014 ff5c 	bl	2786a <bt_mesh_relay_get>
   129b2:	4601      	mov	r1, r0
   129b4:	a805      	add	r0, sp, #20
   129b6:	f016 fffe 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   129ba:	f014 ff59 	bl	27870 <bt_mesh_relay_retransmit_get>
   129be:	4601      	mov	r1, r0
   129c0:	a805      	add	r0, sp, #20
   129c2:	f016 fff8 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   129c6:	2300      	movs	r3, #0
   129c8:	9300      	str	r3, [sp, #0]
   129ca:	aa05      	add	r2, sp, #20
   129cc:	4629      	mov	r1, r5
   129ce:	4620      	mov	r0, r4
   129d0:	f015 fbb8 	bl	28144 <bt_mesh_model_send>
   129d4:	b118      	cbz	r0, 129de <relay_get+0x4e>
		BT_ERR("Unable to send Config Relay Status response");
   129d6:	2145      	movs	r1, #69	; 0x45
   129d8:	4802      	ldr	r0, [pc, #8]	; (129e4 <relay_get+0x54>)
   129da:	f011 fc2f 	bl	2423c <printk>
}
   129de:	b009      	add	sp, #36	; 0x24
   129e0:	bd30      	pop	{r4, r5, pc}
   129e2:	bf00      	nop
   129e4:	0002f7e9 	.word	0x0002f7e9

000129e8 <net_transmit_set>:
{
   129e8:	b570      	push	{r4, r5, r6, lr}
   129ea:	b088      	sub	sp, #32
   129ec:	4614      	mov	r4, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   129ee:	ab03      	add	r3, sp, #12
   129f0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   129f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   129f8:	9305      	str	r3, [sp, #20]
	bt_mesh_net_transmit_set(buf->data[0]);
   129fa:	6823      	ldr	r3, [r4, #0]
{
   129fc:	4605      	mov	r5, r0
	bt_mesh_net_transmit_set(buf->data[0]);
   129fe:	7818      	ldrb	r0, [r3, #0]
{
   12a00:	460e      	mov	r6, r1
	bt_mesh_net_transmit_set(buf->data[0]);
   12a02:	f7fa fa8f 	bl	cf24 <bt_mesh_net_transmit_set>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   12a06:	f248 0125 	movw	r1, #32805	; 0x8025
   12a0a:	a805      	add	r0, sp, #20
   12a0c:	f015 fb71 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   12a10:	6823      	ldr	r3, [r4, #0]
   12a12:	a805      	add	r0, sp, #20
   12a14:	7819      	ldrb	r1, [r3, #0]
   12a16:	f016 ffce 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12a1a:	2300      	movs	r3, #0
   12a1c:	9300      	str	r3, [sp, #0]
   12a1e:	aa05      	add	r2, sp, #20
   12a20:	4631      	mov	r1, r6
   12a22:	4628      	mov	r0, r5
   12a24:	f015 fb8e 	bl	28144 <bt_mesh_model_send>
   12a28:	b118      	cbz	r0, 12a32 <net_transmit_set+0x4a>
		BT_ERR("Unable to send Network Transmit Status");
   12a2a:	2145      	movs	r1, #69	; 0x45
   12a2c:	4802      	ldr	r0, [pc, #8]	; (12a38 <net_transmit_set+0x50>)
   12a2e:	f011 fc05 	bl	2423c <printk>
}
   12a32:	b008      	add	sp, #32
   12a34:	bd70      	pop	{r4, r5, r6, pc}
   12a36:	bf00      	nop
   12a38:	0002f775 	.word	0x0002f775

00012a3c <net_transmit_get>:
{
   12a3c:	b530      	push	{r4, r5, lr}
   12a3e:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   12a40:	ab03      	add	r3, sp, #12
   12a42:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   12a46:	4604      	mov	r4, r0
   12a48:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   12a4a:	a805      	add	r0, sp, #20
   12a4c:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   12a50:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12a54:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   12a56:	f015 fb4c 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   12a5a:	f7fa fa9d 	bl	cf98 <bt_mesh_net_transmit_get>
   12a5e:	4601      	mov	r1, r0
   12a60:	a805      	add	r0, sp, #20
   12a62:	f016 ffa8 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12a66:	2300      	movs	r3, #0
   12a68:	9300      	str	r3, [sp, #0]
   12a6a:	aa05      	add	r2, sp, #20
   12a6c:	4629      	mov	r1, r5
   12a6e:	4620      	mov	r0, r4
   12a70:	f015 fb68 	bl	28144 <bt_mesh_model_send>
   12a74:	b118      	cbz	r0, 12a7e <net_transmit_get+0x42>
		BT_ERR("Unable to send Config Network Transmit Status");
   12a76:	2145      	movs	r1, #69	; 0x45
   12a78:	4802      	ldr	r0, [pc, #8]	; (12a84 <net_transmit_get+0x48>)
   12a7a:	f011 fbdf 	bl	2423c <printk>
}
   12a7e:	b009      	add	sp, #36	; 0x24
   12a80:	bd30      	pop	{r4, r5, pc}
   12a82:	bf00      	nop
   12a84:	0002f742 	.word	0x0002f742

00012a88 <send_gatt_proxy_status>:
{
   12a88:	b530      	push	{r4, r5, lr}
   12a8a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   12a8c:	ab03      	add	r3, sp, #12
   12a8e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   12a92:	4604      	mov	r4, r0
   12a94:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   12a96:	a805      	add	r0, sp, #20
   12a98:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   12a9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12aa0:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   12aa2:	f015 fb26 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   12aa6:	f014 fed6 	bl	27856 <bt_mesh_gatt_proxy_get>
   12aaa:	4601      	mov	r1, r0
   12aac:	a805      	add	r0, sp, #20
   12aae:	f016 ff82 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12ab2:	2300      	movs	r3, #0
   12ab4:	9300      	str	r3, [sp, #0]
   12ab6:	aa05      	add	r2, sp, #20
   12ab8:	4629      	mov	r1, r5
   12aba:	4620      	mov	r0, r4
   12abc:	f015 fb42 	bl	28144 <bt_mesh_model_send>
   12ac0:	b118      	cbz	r0, 12aca <send_gatt_proxy_status+0x42>
		BT_ERR("Unable to send GATT Proxy Status");
   12ac2:	2145      	movs	r1, #69	; 0x45
   12ac4:	4802      	ldr	r0, [pc, #8]	; (12ad0 <send_gatt_proxy_status+0x48>)
   12ac6:	f011 fbb9 	bl	2423c <printk>
}
   12aca:	b009      	add	sp, #36	; 0x24
   12acc:	bd30      	pop	{r4, r5, pc}
   12ace:	bf00      	nop
   12ad0:	0002f8b2 	.word	0x0002f8b2

00012ad4 <gatt_proxy_set>:
{
   12ad4:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12ad6:	6813      	ldr	r3, [r2, #0]
   12ad8:	781a      	ldrb	r2, [r3, #0]
   12ada:	2a01      	cmp	r2, #1
{
   12adc:	4604      	mov	r4, r0
   12ade:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   12ae0:	d905      	bls.n	12aee <gatt_proxy_set+0x1a>
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   12ae2:	2157      	movs	r1, #87	; 0x57
   12ae4:	4806      	ldr	r0, [pc, #24]	; (12b00 <gatt_proxy_set+0x2c>)
}
   12ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Invalid GATT Proxy value 0x%02x", buf->data[0]);
   12aea:	f011 bba7 	b.w	2423c <printk>
	(void)bt_mesh_gatt_proxy_set(buf->data[0]);
   12aee:	4610      	mov	r0, r2
   12af0:	f014 feae 	bl	27850 <bt_mesh_gatt_proxy_set>
	send_gatt_proxy_status(model, ctx);
   12af4:	4629      	mov	r1, r5
   12af6:	4620      	mov	r0, r4
}
   12af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_gatt_proxy_status(model, ctx);
   12afc:	f7ff bfc4 	b.w	12a88 <send_gatt_proxy_status>
   12b00:	0002f450 	.word	0x0002f450

00012b04 <default_ttl_set>:
{
   12b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b06:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   12b08:	ab03      	add	r3, sp, #12
{
   12b0a:	4615      	mov	r5, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   12b0c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   12b10:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12b14:	9305      	str	r3, [sp, #20]
	err = bt_mesh_default_ttl_set(buf->data[0]);
   12b16:	682b      	ldr	r3, [r5, #0]
{
   12b18:	4606      	mov	r6, r0
	err = bt_mesh_default_ttl_set(buf->data[0]);
   12b1a:	7818      	ldrb	r0, [r3, #0]
{
   12b1c:	460f      	mov	r7, r1
	err = bt_mesh_default_ttl_set(buf->data[0]);
   12b1e:	f7fa f9df 	bl	cee0 <bt_mesh_default_ttl_set>
	if (err) {
   12b22:	4604      	mov	r4, r0
   12b24:	b138      	cbz	r0, 12b36 <default_ttl_set+0x32>
		BT_WARN("Prohibited Default TTL value 0x%02x", buf->data[0]);
   12b26:	682b      	ldr	r3, [r5, #0]
   12b28:	480f      	ldr	r0, [pc, #60]	; (12b68 <default_ttl_set+0x64>)
   12b2a:	781a      	ldrb	r2, [r3, #0]
   12b2c:	2157      	movs	r1, #87	; 0x57
   12b2e:	f011 fb85 	bl	2423c <printk>
}
   12b32:	b009      	add	sp, #36	; 0x24
   12b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   12b36:	f248 010e 	movw	r1, #32782	; 0x800e
   12b3a:	a805      	add	r0, sp, #20
   12b3c:	f015 fad9 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, buf->data[0]);
   12b40:	682b      	ldr	r3, [r5, #0]
   12b42:	a805      	add	r0, sp, #20
   12b44:	7819      	ldrb	r1, [r3, #0]
   12b46:	f016 ff36 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12b4a:	9400      	str	r4, [sp, #0]
   12b4c:	4623      	mov	r3, r4
   12b4e:	aa05      	add	r2, sp, #20
   12b50:	4639      	mov	r1, r7
   12b52:	4630      	mov	r0, r6
   12b54:	f015 faf6 	bl	28144 <bt_mesh_model_send>
   12b58:	2800      	cmp	r0, #0
   12b5a:	d0ea      	beq.n	12b32 <default_ttl_set+0x2e>
		BT_ERR("Unable to send Default TTL Status response");
   12b5c:	2145      	movs	r1, #69	; 0x45
   12b5e:	4803      	ldr	r0, [pc, #12]	; (12b6c <default_ttl_set+0x68>)
   12b60:	f011 fb6c 	bl	2423c <printk>
   12b64:	e7e5      	b.n	12b32 <default_ttl_set+0x2e>
   12b66:	bf00      	nop
   12b68:	0002f357 	.word	0x0002f357
   12b6c:	0002f380 	.word	0x0002f380

00012b70 <default_ttl_get>:
{
   12b70:	b530      	push	{r4, r5, lr}
   12b72:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   12b74:	ab03      	add	r3, sp, #12
   12b76:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   12b7a:	4604      	mov	r4, r0
   12b7c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   12b7e:	a805      	add	r0, sp, #20
   12b80:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   12b84:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12b88:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   12b8a:	f015 fab2 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   12b8e:	f7fa f9c3 	bl	cf18 <bt_mesh_default_ttl_get>
   12b92:	4601      	mov	r1, r0
   12b94:	a805      	add	r0, sp, #20
   12b96:	f016 ff0e 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12b9a:	2300      	movs	r3, #0
   12b9c:	9300      	str	r3, [sp, #0]
   12b9e:	aa05      	add	r2, sp, #20
   12ba0:	4629      	mov	r1, r5
   12ba2:	4620      	mov	r0, r4
   12ba4:	f015 face 	bl	28144 <bt_mesh_model_send>
   12ba8:	b118      	cbz	r0, 12bb2 <default_ttl_get+0x42>
		BT_ERR("Unable to send Default TTL Status response");
   12baa:	2145      	movs	r1, #69	; 0x45
   12bac:	4802      	ldr	r0, [pc, #8]	; (12bb8 <default_ttl_get+0x48>)
   12bae:	f011 fb45 	bl	2423c <printk>
}
   12bb2:	b009      	add	sp, #36	; 0x24
   12bb4:	bd30      	pop	{r4, r5, pc}
   12bb6:	bf00      	nop
   12bb8:	0002f380 	.word	0x0002f380

00012bbc <beacon_get>:
{
   12bbc:	b530      	push	{r4, r5, lr}
   12bbe:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   12bc0:	ab03      	add	r3, sp, #12
   12bc2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   12bc6:	4604      	mov	r4, r0
   12bc8:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   12bca:	a805      	add	r0, sp, #20
   12bcc:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   12bd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12bd4:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   12bd6:	f015 fa8c 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_enabled());
   12bda:	f014 fe36 	bl	2784a <bt_mesh_beacon_enabled>
   12bde:	4601      	mov	r1, r0
   12be0:	a805      	add	r0, sp, #20
   12be2:	f016 fee8 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12be6:	2300      	movs	r3, #0
   12be8:	9300      	str	r3, [sp, #0]
   12bea:	aa05      	add	r2, sp, #20
   12bec:	4629      	mov	r1, r5
   12bee:	4620      	mov	r0, r4
   12bf0:	f015 faa8 	bl	28144 <bt_mesh_model_send>
   12bf4:	b118      	cbz	r0, 12bfe <beacon_get+0x42>
		BT_ERR("Unable to send Config Beacon Status response");
   12bf6:	2145      	movs	r1, #69	; 0x45
   12bf8:	4802      	ldr	r0, [pc, #8]	; (12c04 <beacon_get+0x48>)
   12bfa:	f011 fb1f 	bl	2423c <printk>
}
   12bfe:	b009      	add	sp, #36	; 0x24
   12c00:	bd30      	pop	{r4, r5, pc}
   12c02:	bf00      	nop
   12c04:	0002f2eb 	.word	0x0002f2eb

00012c08 <dev_comp_data_get>:
{
   12c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c0c:	b0a7      	sub	sp, #156	; 0x9c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12c0e:	ab08      	add	r3, sp, #32
{
   12c10:	4681      	mov	r9, r0
   12c12:	468a      	mov	sl, r1
	page = net_buf_simple_pull_u8(buf);
   12c14:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   12c16:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   12c1a:	e9cd 1306 	strd	r1, r3, [sp, #24]
   12c1e:	9305      	str	r3, [sp, #20]
	page = net_buf_simple_pull_u8(buf);
   12c20:	f016 fe77 	bl	29912 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   12c24:	2102      	movs	r1, #2
   12c26:	a805      	add	r0, sp, #20
   12c28:	f015 fa63 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   12c2c:	2100      	movs	r1, #0
   12c2e:	a805      	add	r0, sp, #20
   12c30:	f016 fec1 	bl	299b6 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   12c34:	f7fe fd10 	bl	11658 <bt_mesh_comp_get>
   12c38:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   12c3a:	8801      	ldrh	r1, [r0, #0]
   12c3c:	a805      	add	r0, sp, #20
   12c3e:	f016 fec1 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   12c42:	8869      	ldrh	r1, [r5, #2]
   12c44:	a805      	add	r0, sp, #20
   12c46:	f016 febd 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   12c4a:	88a9      	ldrh	r1, [r5, #4]
   12c4c:	a805      	add	r0, sp, #20
   12c4e:	f016 feb9 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   12c52:	210a      	movs	r1, #10
   12c54:	a805      	add	r0, sp, #20
   12c56:	f016 feb5 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   12c5a:	2108      	movs	r1, #8
   12c5c:	a805      	add	r0, sp, #20
   12c5e:	f016 feb1 	bl	299c4 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   12c62:	2600      	movs	r6, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   12c64:	f04f 0b02 	mov.w	fp, #2
		net_buf_simple_add_le16(buf, mod->id);
   12c68:	f04f 081c 	mov.w	r8, #28
	for (i = 0; i < comp->elem_count; i++) {
   12c6c:	68ab      	ldr	r3, [r5, #8]
   12c6e:	42b3      	cmp	r3, r6
   12c70:	d80a      	bhi.n	12c88 <dev_comp_data_get+0x80>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   12c72:	2300      	movs	r3, #0
   12c74:	9300      	str	r3, [sp, #0]
   12c76:	aa05      	add	r2, sp, #20
   12c78:	4651      	mov	r1, sl
   12c7a:	4648      	mov	r0, r9
   12c7c:	f015 fa62 	bl	28144 <bt_mesh_model_send>
   12c80:	b1c0      	cbz	r0, 12cb4 <dev_comp_data_get+0xac>
		BT_ERR("Unable to send Device Composition Status response");
   12c82:	2145      	movs	r1, #69	; 0x45
   12c84:	4824      	ldr	r0, [pc, #144]	; (12d18 <dev_comp_data_get+0x110>)
   12c86:	e013      	b.n	12cb0 <dev_comp_data_get+0xa8>
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   12c88:	68ec      	ldr	r4, [r5, #12]
   12c8a:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   12c8e:	a805      	add	r0, sp, #20
   12c90:	f016 fe7d 	bl	2998e <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   12c94:	7922      	ldrb	r2, [r4, #4]
   12c96:	7963      	ldrb	r3, [r4, #5]
   12c98:	3202      	adds	r2, #2
   12c9a:	fb1b 2303 	smlabb	r3, fp, r3, r2
	if (net_buf_simple_tailroom(buf) <
   12c9e:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   12ca2:	d20a      	bcs.n	12cba <dev_comp_data_get+0xb2>
		BT_ERR("Too large device composition");
   12ca4:	2145      	movs	r1, #69	; 0x45
   12ca6:	481d      	ldr	r0, [pc, #116]	; (12d1c <dev_comp_data_get+0x114>)
   12ca8:	f011 fac8 	bl	2423c <printk>
		BT_ERR("Unable to get composition page 0");
   12cac:	481c      	ldr	r0, [pc, #112]	; (12d20 <dev_comp_data_get+0x118>)
   12cae:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to send Device Composition Status response");
   12cb0:	f011 fac4 	bl	2423c <printk>
}
   12cb4:	b027      	add	sp, #156	; 0x9c
   12cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_simple_add_le16(buf, elem->loc);
   12cba:	8861      	ldrh	r1, [r4, #2]
   12cbc:	a805      	add	r0, sp, #20
   12cbe:	f016 fe81 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   12cc2:	7921      	ldrb	r1, [r4, #4]
   12cc4:	a805      	add	r0, sp, #20
   12cc6:	f016 fe76 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   12cca:	7961      	ldrb	r1, [r4, #5]
   12ccc:	a805      	add	r0, sp, #20
   12cce:	f016 fe72 	bl	299b6 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   12cd2:	2700      	movs	r7, #0
   12cd4:	7923      	ldrb	r3, [r4, #4]
   12cd6:	429f      	cmp	r7, r3
   12cd8:	db05      	blt.n	12ce6 <dev_comp_data_get+0xde>
	for (i = 0; i < elem->vnd_model_count; i++) {
   12cda:	2700      	movs	r7, #0
   12cdc:	7963      	ldrb	r3, [r4, #5]
   12cde:	429f      	cmp	r7, r3
   12ce0:	db0a      	blt.n	12cf8 <dev_comp_data_get+0xf0>
	for (i = 0; i < comp->elem_count; i++) {
   12ce2:	3601      	adds	r6, #1
   12ce4:	e7c2      	b.n	12c6c <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
   12ce6:	fb08 f307 	mul.w	r3, r8, r7
   12cea:	68a2      	ldr	r2, [r4, #8]
   12cec:	a805      	add	r0, sp, #20
   12cee:	5ad1      	ldrh	r1, [r2, r3]
   12cf0:	f016 fe68 	bl	299c4 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   12cf4:	3701      	adds	r7, #1
   12cf6:	e7ed      	b.n	12cd4 <dev_comp_data_get+0xcc>
		mod = &elem->vnd_models[i];
   12cf8:	fb08 f307 	mul.w	r3, r8, r7
   12cfc:	68e1      	ldr	r1, [r4, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   12cfe:	a805      	add	r0, sp, #20
		mod = &elem->vnd_models[i];
   12d00:	18ca      	adds	r2, r1, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   12d02:	5ac9      	ldrh	r1, [r1, r3]
		mod = &elem->vnd_models[i];
   12d04:	9203      	str	r2, [sp, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   12d06:	f016 fe5d 	bl	299c4 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   12d0a:	9a03      	ldr	r2, [sp, #12]
   12d0c:	a805      	add	r0, sp, #20
   12d0e:	8851      	ldrh	r1, [r2, #2]
   12d10:	f016 fe58 	bl	299c4 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   12d14:	3701      	adds	r7, #1
   12d16:	e7e1      	b.n	12cdc <dev_comp_data_get+0xd4>
   12d18:	0002f3f8 	.word	0x0002f3f8
   12d1c:	0002f3b0 	.word	0x0002f3b0
   12d20:	0002f3d2 	.word	0x0002f3d2

00012d24 <_mod_pub_set.constprop.31>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   12d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d28:	4605      	mov	r5, r0
	if (!model->pub) {
   12d2a:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
   12d2c:	f89d 601c 	ldrb.w	r6, [sp, #28]
   12d30:	460c      	mov	r4, r1
   12d32:	4690      	mov	r8, r2
   12d34:	461f      	mov	r7, r3
	if (!model->pub) {
   12d36:	2800      	cmp	r0, #0
   12d38:	d05a      	beq.n	12df0 <_mod_pub_set.constprop.31+0xcc>
	if (!model->pub->update && period) {
   12d3a:	6942      	ldr	r2, [r0, #20]
   12d3c:	b90a      	cbnz	r2, 12d42 <_mod_pub_set.constprop.31+0x1e>
   12d3e:	2e00      	cmp	r6, #0
   12d40:	d156      	bne.n	12df0 <_mod_pub_set.constprop.31+0xcc>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
   12d42:	b99c      	cbnz	r4, 12d6c <_mod_pub_set.constprop.31+0x48>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   12d44:	8883      	ldrh	r3, [r0, #4]
   12d46:	b173      	cbz	r3, 12d66 <_mod_pub_set.constprop.31+0x42>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   12d48:	6843      	ldr	r3, [r0, #4]
   12d4a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   12d4e:	6043      	str	r3, [r0, #4]
		model->pub->ttl = 0U;
   12d50:	6883      	ldr	r3, [r0, #8]
   12d52:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
   12d56:	6083      	str	r3, [r0, #8]
		if (model->pub->update) {
   12d58:	b112      	cbz	r2, 12d60 <_mod_pub_set.constprop.31+0x3c>
			k_delayed_work_cancel(&model->pub->timer);
   12d5a:	3018      	adds	r0, #24
   12d5c:	f00f fb74 	bl	22448 <k_delayed_work_cancel>
			bt_mesh_model_pub_store(model);
   12d60:	4628      	mov	r0, r5
   12d62:	f015 fa44 	bl	281ee <bt_mesh_model_pub_store>
		return STATUS_SUCCESS;
   12d66:	2000      	movs	r0, #0
}
   12d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_mesh_app_key_exists(app_idx)) {
   12d6c:	4640      	mov	r0, r8
   12d6e:	f7fb ff9f 	bl	ecb0 <bt_mesh_app_key_exists>
   12d72:	2800      	cmp	r0, #0
   12d74:	d03e      	beq.n	12df4 <_mod_pub_set.constprop.31+0xd0>
	if (BT_MESH_ADDR_IS_VIRTUAL(model->pub->addr)) {
   12d76:	68ab      	ldr	r3, [r5, #8]
   12d78:	8898      	ldrh	r0, [r3, #4]
   12d7a:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   12d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   12d82:	d205      	bcs.n	12d90 <_mod_pub_set.constprop.31+0x6c>
		uint8_t *uuid = bt_mesh_va_label_get(model->pub->addr);
   12d84:	f7fc fdea 	bl	f95c <bt_mesh_va_label_get>
		if (uuid) {
   12d88:	b110      	cbz	r0, 12d90 <_mod_pub_set.constprop.31+0x6c>
			bt_mesh_va_del(uuid, NULL);
   12d8a:	2100      	movs	r1, #0
   12d8c:	f7fc fdc2 	bl	f914 <bt_mesh_va_del>
	model->pub->addr = pub_addr;
   12d90:	68ab      	ldr	r3, [r5, #8]
	model->pub->key = app_idx;
   12d92:	88da      	ldrh	r2, [r3, #6]
	model->pub->addr = pub_addr;
   12d94:	809c      	strh	r4, [r3, #4]
	model->pub->key = app_idx;
   12d96:	f368 020b 	bfi	r2, r8, #0, #12
   12d9a:	80da      	strh	r2, [r3, #6]
	model->pub->cred = cred_flag;
   12d9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
   12da0:	f367 1204 	bfi	r2, r7, #4, #1
   12da4:	71da      	strb	r2, [r3, #7]
	model->pub->ttl = ttl;
   12da6:	f89d 2018 	ldrb.w	r2, [sp, #24]
   12daa:	721a      	strb	r2, [r3, #8]
	model->pub->retransmit = retransmit;
   12dac:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->period = period;
   12db0:	729e      	strb	r6, [r3, #10]
	model->pub->retransmit = retransmit;
   12db2:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
   12db4:	695b      	ldr	r3, [r3, #20]
   12db6:	2b00      	cmp	r3, #0
   12db8:	d0d2      	beq.n	12d60 <_mod_pub_set.constprop.31+0x3c>
		period_ms = bt_mesh_model_pub_period_get(model);
   12dba:	4628      	mov	r0, r5
   12dbc:	f7fe f858 	bl	10e70 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
   12dc0:	1e07      	subs	r7, r0, #0
   12dc2:	68a8      	ldr	r0, [r5, #8]
   12dc4:	ddc9      	ble.n	12d5a <_mod_pub_set.constprop.31+0x36>
			k_delayed_work_submit(&model->pub->timer,
   12dc6:	f100 0418 	add.w	r4, r0, #24
   12dca:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   12dce:	f240 30e7 	movw	r0, #999	; 0x3e7
   12dd2:	2100      	movs	r1, #0
   12dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12dd8:	2300      	movs	r3, #0
   12dda:	fbc6 0107 	smlal	r0, r1, r6, r7
   12dde:	f7ef f833 	bl	1e48 <__aeabi_uldivmod>
   12de2:	4602      	mov	r2, r0
   12de4:	460b      	mov	r3, r1
   12de6:	4804      	ldr	r0, [pc, #16]	; (12df8 <_mod_pub_set.constprop.31+0xd4>)
   12de8:	4621      	mov	r1, r4
   12dea:	f00f fabd 	bl	22368 <k_delayed_work_submit_to_queue>
   12dee:	e7b7      	b.n	12d60 <_mod_pub_set.constprop.31+0x3c>
		return STATUS_NVAL_PUB_PARAM;
   12df0:	2007      	movs	r0, #7
   12df2:	e7b9      	b.n	12d68 <_mod_pub_set.constprop.31+0x44>
		return STATUS_INVALID_APPKEY;
   12df4:	2003      	movs	r0, #3
   12df6:	e7b7      	b.n	12d68 <_mod_pub_set.constprop.31+0x44>
   12df8:	20001988 	.word	0x20001988

00012dfc <mod_app_unbind>:
{
   12dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12e00:	4614      	mov	r4, r2
   12e02:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   12e04:	ab06      	add	r3, sp, #24
   12e06:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   12e0a:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   12e0c:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   12e0e:	9303      	str	r3, [sp, #12]
   12e10:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   12e14:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   12e16:	f016 fd84 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12e1a:	b203      	sxth	r3, r0
   12e1c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12e1e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12e20:	dc06      	bgt.n	12e30 <mod_app_unbind+0x34>
		BT_WARN("Prohibited element address");
   12e22:	4820      	ldr	r0, [pc, #128]	; (12ea4 <mod_app_unbind+0xa8>)
   12e24:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Unable to send Model App Unbind Status response");
   12e26:	f011 fa09 	bl	2423c <printk>
}
   12e2a:	b00b      	add	sp, #44	; 0x2c
   12e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	key_app_idx = net_buf_simple_pull_le16(buf);
   12e30:	4620      	mov	r0, r4
   12e32:	f016 fd76 	bl	29922 <net_buf_simple_pull_le16>
   12e36:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   12e38:	4628      	mov	r0, r5
	mod_id = buf->data;
   12e3a:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   12e3e:	f7fe f9ef 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   12e42:	b9d8      	cbnz	r0, 12e7c <mod_app_unbind+0x80>
		vnd = (buf->len == 4U);
   12e44:	88a3      	ldrh	r3, [r4, #4]
   12e46:	1f1a      	subs	r2, r3, #4
   12e48:	4253      	negs	r3, r2
   12e4a:	4153      	adcs	r3, r2
   12e4c:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   12e50:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   12e52:	e9cd 0900 	strd	r0, r9, [sp]
   12e56:	4633      	mov	r3, r6
   12e58:	462a      	mov	r2, r5
   12e5a:	f89d 100b 	ldrb.w	r1, [sp, #11]
   12e5e:	a803      	add	r0, sp, #12
   12e60:	f015 faa2 	bl	283a8 <create_mod_app_status.isra.15>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   12e64:	2300      	movs	r3, #0
   12e66:	9300      	str	r3, [sp, #0]
   12e68:	aa03      	add	r2, sp, #12
   12e6a:	4641      	mov	r1, r8
   12e6c:	4638      	mov	r0, r7
   12e6e:	f015 f969 	bl	28144 <bt_mesh_model_send>
   12e72:	2800      	cmp	r0, #0
   12e74:	d0d9      	beq.n	12e2a <mod_app_unbind+0x2e>
		BT_ERR("Unable to send Model App Unbind Status response");
   12e76:	2145      	movs	r1, #69	; 0x45
   12e78:	480b      	ldr	r0, [pc, #44]	; (12ea8 <mod_app_unbind+0xac>)
   12e7a:	e7d4      	b.n	12e26 <mod_app_unbind+0x2a>
	mod = get_model(elem, buf, &vnd);
   12e7c:	4621      	mov	r1, r4
   12e7e:	f10d 020b 	add.w	r2, sp, #11
   12e82:	f015 fa70 	bl	28366 <get_model>
	if (!mod) {
   12e86:	4604      	mov	r4, r0
   12e88:	b140      	cbz	r0, 12e9c <mod_app_unbind+0xa0>
	if (!bt_mesh_app_key_exists(key_idx)) {
   12e8a:	4630      	mov	r0, r6
   12e8c:	f7fb ff10 	bl	ecb0 <bt_mesh_app_key_exists>
   12e90:	b130      	cbz	r0, 12ea0 <mod_app_unbind+0xa4>
   12e92:	4631      	mov	r1, r6
   12e94:	4620      	mov	r0, r4
   12e96:	f015 fab3 	bl	28400 <mod_unbind.part.3.constprop.30>
   12e9a:	e7da      	b.n	12e52 <mod_app_unbind+0x56>
		status = STATUS_INVALID_MODEL;
   12e9c:	2002      	movs	r0, #2
   12e9e:	e7d8      	b.n	12e52 <mod_app_unbind+0x56>
		return STATUS_INVALID_APPKEY;
   12ea0:	2003      	movs	r0, #3
   12ea2:	e7d6      	b.n	12e52 <mod_app_unbind+0x56>
   12ea4:	0002f699 	.word	0x0002f699
   12ea8:	0002f638 	.word	0x0002f638

00012eac <mod_pub_set>:
{
   12eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb0:	4681      	mov	r9, r0
   12eb2:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   12eb4:	4610      	mov	r0, r2
{
   12eb6:	468a      	mov	sl, r1
   12eb8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12eba:	f016 fd32 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12ebe:	b203      	sxth	r3, r0
   12ec0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12ec2:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12ec4:	dc06      	bgt.n	12ed4 <mod_pub_set+0x28>
		BT_WARN("Prohibited element address");
   12ec6:	2157      	movs	r1, #87	; 0x57
   12ec8:	482b      	ldr	r0, [pc, #172]	; (12f78 <mod_pub_set+0xcc>)
   12eca:	f011 f9b7 	bl	2423c <printk>
}
   12ece:	b00b      	add	sp, #44	; 0x2c
   12ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pub_addr = net_buf_simple_pull_le16(buf);
   12ed4:	4620      	mov	r0, r4
   12ed6:	f016 fd24 	bl	29922 <net_buf_simple_pull_le16>
   12eda:	4607      	mov	r7, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   12edc:	4620      	mov	r0, r4
   12ede:	f016 fd20 	bl	29922 <net_buf_simple_pull_le16>
   12ee2:	4680      	mov	r8, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   12ee4:	4620      	mov	r0, r4
   12ee6:	f016 fd14 	bl	29912 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   12eea:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
   12eee:	b2d2      	uxtb	r2, r2
   12ef0:	2a7e      	cmp	r2, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   12ef2:	4683      	mov	fp, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   12ef4:	d805      	bhi.n	12f02 <mod_pub_set+0x56>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   12ef6:	4602      	mov	r2, r0
   12ef8:	2145      	movs	r1, #69	; 0x45
   12efa:	4820      	ldr	r0, [pc, #128]	; (12f7c <mod_pub_set+0xd0>)
   12efc:	f011 f99e 	bl	2423c <printk>
		return;
   12f00:	e7e5      	b.n	12ece <mod_pub_set+0x22>
	pub_period = net_buf_simple_pull_u8(buf);
   12f02:	4620      	mov	r0, r4
   12f04:	f016 fd05 	bl	29912 <net_buf_simple_pull_u8>
   12f08:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   12f0a:	4620      	mov	r0, r4
   12f0c:	f016 fd01 	bl	29912 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   12f10:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   12f12:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   12f14:	4630      	mov	r0, r6
	mod_id = buf->data;
   12f16:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   12f18:	f7fe f982 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   12f1c:	4605      	mov	r5, r0
   12f1e:	b9a8      	cbnz	r0, 12f4c <mod_pub_set+0xa0>
		vnd = (buf->len == 4U);
   12f20:	88a3      	ldrh	r3, [r4, #4]
   12f22:	1f1a      	subs	r2, r3, #4
   12f24:	4253      	negs	r3, r2
   12f26:	4153      	adcs	r3, r2
   12f28:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   12f2c:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   12f2e:	9b05      	ldr	r3, [sp, #20]
   12f30:	3508      	adds	r5, #8
   12f32:	e9cd 0302 	strd	r0, r3, [sp, #8]
   12f36:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   12f3a:	9300      	str	r3, [sp, #0]
   12f3c:	9501      	str	r5, [sp, #4]
   12f3e:	463b      	mov	r3, r7
   12f40:	4632      	mov	r2, r6
   12f42:	4651      	mov	r1, sl
   12f44:	4648      	mov	r0, r9
   12f46:	f7ff fc75 	bl	12834 <send_mod_pub_status.isra.19>
   12f4a:	e7c0      	b.n	12ece <mod_pub_set+0x22>
	mod = get_model(elem, buf, &vnd);
   12f4c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   12f50:	4621      	mov	r1, r4
   12f52:	f015 fa08 	bl	28366 <get_model>
	if (!mod) {
   12f56:	4605      	mov	r5, r0
   12f58:	b160      	cbz	r0, 12f74 <mod_pub_set+0xc8>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   12f5a:	9b07      	ldr	r3, [sp, #28]
   12f5c:	9302      	str	r3, [sp, #8]
   12f5e:	9b06      	ldr	r3, [sp, #24]
   12f60:	f3c8 020b 	ubfx	r2, r8, #0, #12
   12f64:	e9cd b300 	strd	fp, r3, [sp]
   12f68:	4639      	mov	r1, r7
   12f6a:	f3c8 3300 	ubfx	r3, r8, #12, #1
   12f6e:	f7ff fed9 	bl	12d24 <_mod_pub_set.constprop.31>
   12f72:	e7dc      	b.n	12f2e <mod_pub_set+0x82>
		status = STATUS_INVALID_MODEL;
   12f74:	2002      	movs	r0, #2
   12f76:	e7da      	b.n	12f2e <mod_pub_set+0x82>
   12f78:	0002f699 	.word	0x0002f699
   12f7c:	0002f4d8 	.word	0x0002f4d8

00012f80 <mod_pub_va_set>:
{
   12f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f84:	4682      	mov	sl, r0
   12f86:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   12f88:	4610      	mov	r0, r2
{
   12f8a:	468b      	mov	fp, r1
   12f8c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   12f8e:	f016 fcc8 	bl	29922 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12f92:	b203      	sxth	r3, r0
   12f94:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12f96:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   12f98:	dc06      	bgt.n	12fa8 <mod_pub_va_set+0x28>
		BT_WARN("Prohibited element address");
   12f9a:	2157      	movs	r1, #87	; 0x57
   12f9c:	4838      	ldr	r0, [pc, #224]	; (13080 <mod_pub_va_set+0x100>)
   12f9e:	f011 f94d 	bl	2423c <printk>
}
   12fa2:	b00b      	add	sp, #44	; 0x2c
   12fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   12fa8:	2110      	movs	r1, #16
   12faa:	4620      	mov	r0, r4
   12fac:	f00a fbd6 	bl	1d75c <net_buf_simple_pull_mem>
   12fb0:	4680      	mov	r8, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   12fb2:	4620      	mov	r0, r4
   12fb4:	f016 fcb5 	bl	29922 <net_buf_simple_pull_le16>
   12fb8:	4681      	mov	r9, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   12fba:	4620      	mov	r0, r4
   12fbc:	f016 fca9 	bl	29912 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   12fc0:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   12fc4:	b2db      	uxtb	r3, r3
   12fc6:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   12fc8:	4607      	mov	r7, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   12fca:	d805      	bhi.n	12fd8 <mod_pub_va_set+0x58>
		BT_ERR("Invalid TTL value 0x%02x", pub_ttl);
   12fcc:	4602      	mov	r2, r0
   12fce:	2145      	movs	r1, #69	; 0x45
   12fd0:	482c      	ldr	r0, [pc, #176]	; (13084 <mod_pub_va_set+0x104>)
   12fd2:	f011 f933 	bl	2423c <printk>
		return;
   12fd6:	e7e4      	b.n	12fa2 <mod_pub_va_set+0x22>
	pub_period = net_buf_simple_pull_u8(buf);
   12fd8:	4620      	mov	r0, r4
   12fda:	f016 fc9a 	bl	29912 <net_buf_simple_pull_u8>
   12fde:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   12fe0:	4620      	mov	r0, r4
   12fe2:	f016 fc96 	bl	29912 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   12fe6:	6823      	ldr	r3, [r4, #0]
	retransmit = net_buf_simple_pull_u8(buf);
   12fe8:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   12fea:	4630      	mov	r0, r6
	mod_id = buf->data;
   12fec:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   12fee:	f7fe f917 	bl	11220 <bt_mesh_elem_find>
	if (!elem) {
   12ff2:	4605      	mov	r5, r0
   12ff4:	b9c0      	cbnz	r0, 13028 <mod_pub_va_set+0xa8>
		vnd = (buf->len == 4U);
   12ff6:	88a3      	ldrh	r3, [r4, #4]
		pub_addr = 0U;
   12ff8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   12ffc:	1f1a      	subs	r2, r3, #4
   12ffe:	4253      	negs	r3, r2
   13000:	4153      	adcs	r3, r2
   13002:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   13006:	2301      	movs	r3, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   13008:	9a05      	ldr	r2, [sp, #20]
   1300a:	3508      	adds	r5, #8
   1300c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   13010:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   13014:	9300      	str	r3, [sp, #0]
   13016:	9501      	str	r5, [sp, #4]
   13018:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1301c:	4632      	mov	r2, r6
   1301e:	4659      	mov	r1, fp
   13020:	4650      	mov	r0, sl
   13022:	f7ff fc07 	bl	12834 <send_mod_pub_status.isra.19>
   13026:	e7bc      	b.n	12fa2 <mod_pub_va_set+0x22>
	mod = get_model(elem, buf, &vnd);
   13028:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   1302c:	4621      	mov	r1, r4
   1302e:	f015 f99a 	bl	28366 <get_model>
	if (!mod) {
   13032:	4605      	mov	r5, r0
   13034:	b918      	cbnz	r0, 1303e <mod_pub_va_set+0xbe>
		pub_addr = 0U;
   13036:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   1303a:	2302      	movs	r3, #2
		goto send_status;
   1303c:	e7e4      	b.n	13008 <mod_pub_va_set+0x88>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   1303e:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   13042:	4640      	mov	r0, r8
   13044:	f7fc fc2c 	bl	f8a0 <bt_mesh_va_add>
   13048:	4603      	mov	r3, r0
   1304a:	4604      	mov	r4, r0
	if (status != STATUS_SUCCESS) {
   1304c:	2800      	cmp	r0, #0
   1304e:	d1db      	bne.n	13008 <mod_pub_va_set+0x88>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   13050:	9b07      	ldr	r3, [sp, #28]
   13052:	9302      	str	r3, [sp, #8]
   13054:	9b06      	ldr	r3, [sp, #24]
   13056:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   1305a:	e9cd 7300 	strd	r7, r3, [sp]
   1305e:	f3c9 020b 	ubfx	r2, r9, #0, #12
   13062:	f3c9 3300 	ubfx	r3, r9, #12, #1
   13066:	4628      	mov	r0, r5
   13068:	f7ff fe5c 	bl	12d24 <_mod_pub_set.constprop.31>
	if (status != STATUS_SUCCESS) {
   1306c:	4603      	mov	r3, r0
   1306e:	2800      	cmp	r0, #0
   13070:	d0ca      	beq.n	13008 <mod_pub_va_set+0x88>
   13072:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   13074:	4621      	mov	r1, r4
   13076:	4640      	mov	r0, r8
   13078:	f7fc fc4c 	bl	f914 <bt_mesh_va_del>
   1307c:	9b06      	ldr	r3, [sp, #24]
   1307e:	e7c3      	b.n	13008 <mod_pub_va_set+0x88>
   13080:	0002f699 	.word	0x0002f699
   13084:	0002f4d8 	.word	0x0002f4d8

00013088 <hb_sub_send_status>:
{
   13088:	b570      	push	{r4, r5, r6, lr}
   1308a:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1308c:	ab06      	add	r3, sp, #24
{
   1308e:	4614      	mov	r4, r2
   13090:	4605      	mov	r5, r0
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   13092:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   13096:	a803      	add	r0, sp, #12
{
   13098:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   1309a:	f248 013c 	movw	r1, #32828	; 0x803c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   1309e:	9303      	str	r3, [sp, #12]
   130a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   130a4:	f015 f825 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
   130a8:	2100      	movs	r1, #0
   130aa:	a803      	add	r0, sp, #12
   130ac:	f016 fc83 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, sub->src);
   130b0:	8921      	ldrh	r1, [r4, #8]
   130b2:	a803      	add	r0, sp, #12
   130b4:	f016 fc86 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub->dst);
   130b8:	8961      	ldrh	r1, [r4, #10]
   130ba:	a803      	add	r0, sp, #12
   130bc:	f016 fc82 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->remaining));
   130c0:	6861      	ldr	r1, [r4, #4]
	if (!val) {
   130c2:	b149      	cbz	r1, 130d8 <hb_sub_send_status+0x50>
	} else if (val == 0xffff) {
   130c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   130c8:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   130ca:	bf1d      	ittte	ne
   130cc:	fab1 f181 	clzne	r1, r1
   130d0:	f1c1 0120 	rsbne	r1, r1, #32
   130d4:	b2c9      	uxtbne	r1, r1
		return 0xff;
   130d6:	21ff      	moveq	r1, #255	; 0xff
   130d8:	a803      	add	r0, sp, #12
   130da:	f016 fc6c 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_hb_log(sub->count));
   130de:	89a1      	ldrh	r1, [r4, #12]
	if (!val) {
   130e0:	b149      	cbz	r1, 130f6 <hb_sub_send_status+0x6e>
	} else if (val == 0xffff) {
   130e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   130e6:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   130e8:	bf1d      	ittte	ne
   130ea:	fab1 f181 	clzne	r1, r1
   130ee:	f1c1 0120 	rsbne	r1, r1, #32
   130f2:	b2c9      	uxtbne	r1, r1
		return 0xff;
   130f4:	21ff      	moveq	r1, #255	; 0xff
   130f6:	a803      	add	r0, sp, #12
   130f8:	f016 fc5d 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->min_hops);
   130fc:	7ba1      	ldrb	r1, [r4, #14]
   130fe:	a803      	add	r0, sp, #12
   13100:	f016 fc59 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, sub->max_hops);
   13104:	7be1      	ldrb	r1, [r4, #15]
   13106:	a803      	add	r0, sp, #12
   13108:	f016 fc55 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   1310c:	2300      	movs	r3, #0
   1310e:	9300      	str	r3, [sp, #0]
   13110:	aa03      	add	r2, sp, #12
   13112:	4631      	mov	r1, r6
   13114:	4628      	mov	r0, r5
   13116:	f015 f815 	bl	28144 <bt_mesh_model_send>
   1311a:	b118      	cbz	r0, 13124 <hb_sub_send_status+0x9c>
		BT_ERR("Unable to send Heartbeat Subscription Status");
   1311c:	2145      	movs	r1, #69	; 0x45
   1311e:	4802      	ldr	r0, [pc, #8]	; (13128 <hb_sub_send_status+0xa0>)
   13120:	f011 f88c 	bl	2423c <printk>
}
   13124:	b00a      	add	sp, #40	; 0x28
   13126:	bd70      	pop	{r4, r5, r6, pc}
   13128:	0002f4a6 	.word	0x0002f4a6

0001312c <heartbeat_sub_set>:
{
   1312c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13130:	4606      	mov	r6, r0
   13132:	b085      	sub	sp, #20
	sub_src = net_buf_simple_pull_le16(buf);
   13134:	4610      	mov	r0, r2
{
   13136:	4614      	mov	r4, r2
   13138:	460f      	mov	r7, r1
	sub_src = net_buf_simple_pull_le16(buf);
   1313a:	f016 fbf2 	bl	29922 <net_buf_simple_pull_le16>
   1313e:	4680      	mov	r8, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   13140:	4620      	mov	r0, r4
   13142:	f016 fbee 	bl	29922 <net_buf_simple_pull_le16>
   13146:	4681      	mov	r9, r0
	period_log = net_buf_simple_pull_u8(buf);
   13148:	4620      	mov	r0, r4
   1314a:	f016 fbe2 	bl	29912 <net_buf_simple_pull_u8>
	if (period_log > 0x11) {
   1314e:	2811      	cmp	r0, #17
	period_log = net_buf_simple_pull_u8(buf);
   13150:	4604      	mov	r4, r0
	if (period_log > 0x11) {
   13152:	d907      	bls.n	13164 <heartbeat_sub_set+0x38>
		BT_WARN("Prohibited subscription period 0x%02x", period_log);
   13154:	4602      	mov	r2, r0
   13156:	2157      	movs	r1, #87	; 0x57
   13158:	4815      	ldr	r0, [pc, #84]	; (131b0 <heartbeat_sub_set+0x84>)
   1315a:	f011 f86f 	bl	2423c <printk>
}
   1315e:	b005      	add	sp, #20
   13160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	period = bt_mesh_hb_pwr2(period_log);
   13164:	f015 f86c 	bl	28240 <bt_mesh_hb_pwr2>
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   13168:	4649      	mov	r1, r9
	period = bt_mesh_hb_pwr2(period_log);
   1316a:	4605      	mov	r5, r0
	status = bt_mesh_hb_sub_set(sub_src, sub_dst, period);
   1316c:	4602      	mov	r2, r0
   1316e:	4640      	mov	r0, r8
   13170:	f7fd fae2 	bl	10738 <bt_mesh_hb_sub_set>
	if (status != STATUS_SUCCESS) {
   13174:	2800      	cmp	r0, #0
   13176:	d1f2      	bne.n	1315e <heartbeat_sub_set+0x32>
	bt_mesh_hb_sub_get(&sub);
   13178:	4668      	mov	r0, sp
   1317a:	f7fd fb49 	bl	10810 <bt_mesh_hb_sub_get>
	if (sub.src == BT_MESH_ADDR_UNASSIGNED || !period_log) {
   1317e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13182:	b103      	cbz	r3, 13186 <heartbeat_sub_set+0x5a>
   13184:	b914      	cbnz	r4, 1318c <heartbeat_sub_set+0x60>
		sub.min_hops = BT_MESH_TTL_MAX;
   13186:	237f      	movs	r3, #127	; 0x7f
   13188:	f88d 300e 	strb.w	r3, [sp, #14]
	hb_sub_send_status(model, ctx, &sub);
   1318c:	466a      	mov	r2, sp
   1318e:	4639      	mov	r1, r7
   13190:	4630      	mov	r0, r6
   13192:	f7ff ff79 	bl	13088 <hb_sub_send_status>
	if (sub.src != BT_MESH_ADDR_UNASSIGNED &&
   13196:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1319a:	2b00      	cmp	r3, #0
   1319c:	d0df      	beq.n	1315e <heartbeat_sub_set+0x32>
   1319e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   131a2:	2b00      	cmp	r3, #0
   131a4:	d0db      	beq.n	1315e <heartbeat_sub_set+0x32>
	    sub.dst != BT_MESH_ADDR_UNASSIGNED && !period) {
   131a6:	2d00      	cmp	r5, #0
   131a8:	d1d9      	bne.n	1315e <heartbeat_sub_set+0x32>
		bt_mesh_hb_sub_reset_count();
   131aa:	f7fd fb2b 	bl	10804 <bt_mesh_hb_sub_reset_count>
   131ae:	e7d6      	b.n	1315e <heartbeat_sub_set+0x32>
   131b0:	0002f4f6 	.word	0x0002f4f6

000131b4 <bt_mesh_cfg_reset>:
	}
}

void bt_mesh_cfg_reset(void)
{
	bt_mesh_model_foreach(mod_reset, NULL);
   131b4:	2100      	movs	r1, #0
   131b6:	4801      	ldr	r0, [pc, #4]	; (131bc <bt_mesh_cfg_reset+0x8>)
   131b8:	f7fd be20 	b.w	10dfc <bt_mesh_model_foreach>
   131bc:	00028275 	.word	0x00028275

000131c0 <health_period_set_unrel>:
}

static void health_period_set_unrel(struct bt_mesh_model *model,
				    struct bt_mesh_msg_ctx *ctx,
				    struct net_buf_simple *buf)
{
   131c0:	b510      	push	{r4, lr}
   131c2:	4604      	mov	r4, r0
	uint8_t period;

	period = net_buf_simple_pull_u8(buf);
   131c4:	4610      	mov	r0, r2
   131c6:	f016 fba4 	bl	29912 <net_buf_simple_pull_u8>
	if (period > 15) {
   131ca:	280f      	cmp	r0, #15
	period = net_buf_simple_pull_u8(buf);
   131cc:	4602      	mov	r2, r0
	if (period > 15) {
   131ce:	d905      	bls.n	131dc <health_period_set_unrel+0x1c>
		BT_WARN("Prohibited period value %u", period);
   131d0:	2157      	movs	r1, #87	; 0x57
   131d2:	4805      	ldr	r0, [pc, #20]	; (131e8 <health_period_set_unrel+0x28>)
	}

	BT_DBG("period %u", period);

	model->pub->period_div = period;
}
   131d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Prohibited period value %u", period);
   131d8:	f011 b830 	b.w	2423c <printk>
	model->pub->period_div = period;
   131dc:	68a3      	ldr	r3, [r4, #8]
   131de:	7ad9      	ldrb	r1, [r3, #11]
   131e0:	f360 0103 	bfi	r1, r0, #0, #4
   131e4:	72d9      	strb	r1, [r3, #11]
}
   131e6:	bd10      	pop	{r4, pc}
   131e8:	0002fa80 	.word	0x0002fa80

000131ec <health_get_registered>:
{
   131ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   131f0:	4614      	mov	r4, r2
	struct bt_mesh_health_srv *srv = mod->user_data;
   131f2:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
   131f6:	460f      	mov	r7, r1
   131f8:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_FAULT_STATUS);
   131fa:	2105      	movs	r1, #5
   131fc:	4610      	mov	r0, r2
   131fe:	f014 ff78 	bl	280f2 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   13202:	2101      	movs	r1, #1
   13204:	4620      	mov	r0, r4
   13206:	f00a fac7 	bl	1d798 <net_buf_simple_add>
	net_buf_simple_add_le16(msg, company_id);
   1320a:	4639      	mov	r1, r7
	test_id = net_buf_simple_add(msg, 1);
   1320c:	4605      	mov	r5, r0
	net_buf_simple_add_le16(msg, company_id);
   1320e:	4620      	mov	r0, r4
   13210:	f016 fbd8 	bl	299c4 <net_buf_simple_add_le16>
	if (srv->cb && srv->cb->fault_get_reg) {
   13214:	f8d8 3004 	ldr.w	r3, [r8, #4]
   13218:	b333      	cbz	r3, 13268 <health_get_registered+0x7c>
   1321a:	685b      	ldr	r3, [r3, #4]
   1321c:	b323      	cbz	r3, 13268 <health_get_registered+0x7c>
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   1321e:	4620      	mov	r0, r4
   13220:	f016 fbb5 	bl	2998e <net_buf_simple_tailroom>
   13224:	3804      	subs	r0, #4
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   13226:	f8d8 1004 	ldr.w	r1, [r8, #4]
	return buf->data + buf->len;
   1322a:	6822      	ldr	r2, [r4, #0]
		uint8_t fault_count = net_buf_simple_tailroom(msg) - 4;
   1322c:	f88d 000f 	strb.w	r0, [sp, #15]
   13230:	88a3      	ldrh	r3, [r4, #4]
		err = srv->cb->fault_get_reg(mod, company_id, test_id,
   13232:	f10d 000f 	add.w	r0, sp, #15
   13236:	9000      	str	r0, [sp, #0]
   13238:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1323c:	4413      	add	r3, r2
   1323e:	4639      	mov	r1, r7
   13240:	462a      	mov	r2, r5
   13242:	4630      	mov	r0, r6
   13244:	47c0      	blx	r8
		if (err) {
   13246:	4602      	mov	r2, r0
   13248:	b130      	cbz	r0, 13258 <health_get_registered+0x6c>
			BT_ERR("Failed to get faults (err %d)", err);
   1324a:	2145      	movs	r1, #69	; 0x45
   1324c:	4809      	ldr	r0, [pc, #36]	; (13274 <health_get_registered+0x88>)
   1324e:	f010 fff5 	bl	2423c <printk>
		*test_id = HEALTH_TEST_STANDARD;
   13252:	2300      	movs	r3, #0
   13254:	702b      	strb	r3, [r5, #0]
}
   13256:	e004      	b.n	13262 <health_get_registered+0x76>
			net_buf_simple_add(msg, fault_count);
   13258:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1325c:	4620      	mov	r0, r4
   1325e:	f00a fa9b 	bl	1d798 <net_buf_simple_add>
}
   13262:	b004      	add	sp, #16
   13264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No callback for getting faults");
   13268:	2157      	movs	r1, #87	; 0x57
   1326a:	4803      	ldr	r0, [pc, #12]	; (13278 <health_get_registered+0x8c>)
   1326c:	f010 ffe6 	bl	2423c <printk>
   13270:	e7ef      	b.n	13252 <health_get_registered+0x66>
   13272:	bf00      	nop
   13274:	0002fa39 	.word	0x0002fa39
   13278:	0002fa5c 	.word	0x0002fa5c

0001327c <health_fault_test>:
{
   1327c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13280:	4615      	mov	r5, r2
   13282:	b0a4      	sub	sp, #144	; 0x90
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   13284:	ab06      	add	r3, sp, #24
   13286:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	struct bt_mesh_health_srv *srv = model->user_data;
   1328a:	f8d0 8018 	ldr.w	r8, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1328e:	9303      	str	r3, [sp, #12]
{
   13290:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   13292:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   13294:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   13298:	460e      	mov	r6, r1
	test_id = net_buf_simple_pull_u8(buf);
   1329a:	f016 fb3a 	bl	29912 <net_buf_simple_pull_u8>
   1329e:	4607      	mov	r7, r0
	company_id = net_buf_simple_pull_le16(buf);
   132a0:	4628      	mov	r0, r5
   132a2:	f016 fb3e 	bl	29922 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   132a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	company_id = net_buf_simple_pull_le16(buf);
   132aa:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_test) {
   132ac:	b173      	cbz	r3, 132cc <health_fault_test+0x50>
   132ae:	68db      	ldr	r3, [r3, #12]
   132b0:	b163      	cbz	r3, 132cc <health_fault_test+0x50>
		err = srv->cb->fault_test(model, test_id, company_id);
   132b2:	4602      	mov	r2, r0
   132b4:	4639      	mov	r1, r7
   132b6:	4620      	mov	r0, r4
   132b8:	4798      	blx	r3
		if (err) {
   132ba:	4602      	mov	r2, r0
   132bc:	b130      	cbz	r0, 132cc <health_fault_test+0x50>
			BT_WARN("Running fault test failed with err %d", err);
   132be:	2157      	movs	r1, #87	; 0x57
   132c0:	480c      	ldr	r0, [pc, #48]	; (132f4 <health_fault_test+0x78>)
   132c2:	f010 ffbb 	bl	2423c <printk>
}
   132c6:	b024      	add	sp, #144	; 0x90
   132c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	health_get_registered(model, company_id, &sdu);
   132cc:	aa03      	add	r2, sp, #12
   132ce:	4629      	mov	r1, r5
   132d0:	4620      	mov	r0, r4
   132d2:	f7ff ff8b 	bl	131ec <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   132d6:	2300      	movs	r3, #0
   132d8:	9300      	str	r3, [sp, #0]
   132da:	aa03      	add	r2, sp, #12
   132dc:	4631      	mov	r1, r6
   132de:	4620      	mov	r0, r4
   132e0:	f014 ff30 	bl	28144 <bt_mesh_model_send>
   132e4:	2800      	cmp	r0, #0
   132e6:	d0ee      	beq.n	132c6 <health_fault_test+0x4a>
		BT_ERR("Unable to send Health Current Status response");
   132e8:	2145      	movs	r1, #69	; 0x45
   132ea:	4803      	ldr	r0, [pc, #12]	; (132f8 <health_fault_test+0x7c>)
   132ec:	f010 ffa6 	bl	2423c <printk>
   132f0:	e7e9      	b.n	132c6 <health_fault_test+0x4a>
   132f2:	bf00      	nop
   132f4:	0002f9db 	.word	0x0002f9db
   132f8:	0002fa06 	.word	0x0002fa06

000132fc <health_pub_update>:
	{ OP_ATTENTION_SET_UNREL,      1,   attention_set_unrel },
	BT_MESH_MODEL_OP_END,
};

static int health_pub_update(struct bt_mesh_model *mod)
{
   132fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_model_pub *pub = mod->pub;
   13300:	6886      	ldr	r6, [r0, #8]
	struct bt_mesh_health_srv *srv = mod->user_data;
   13302:	f8d0 a018 	ldr.w	sl, [r0, #24]
	size_t count;

	BT_DBG("");

	count = health_get_current(mod, pub->msg);
   13306:	6934      	ldr	r4, [r6, #16]
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   13308:	2104      	movs	r1, #4
{
   1330a:	4680      	mov	r8, r0
	bt_mesh_model_msg_init(msg, OP_HEALTH_CURRENT_STATUS);
   1330c:	4620      	mov	r0, r4
   1330e:	f014 fef0 	bl	280f2 <bt_mesh_model_msg_init>
	test_id = net_buf_simple_add(msg, 1);
   13312:	2101      	movs	r1, #1
   13314:	4620      	mov	r0, r4
   13316:	f00a fa3f 	bl	1d798 <net_buf_simple_add>
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1331a:	2102      	movs	r1, #2
	test_id = net_buf_simple_add(msg, 1);
   1331c:	4607      	mov	r7, r0
	company_ptr = net_buf_simple_add(msg, sizeof(company_id));
   1331e:	4620      	mov	r0, r4
   13320:	f00a fa3a 	bl	1d798 <net_buf_simple_add>
   13324:	4605      	mov	r5, r0
	comp = bt_mesh_comp_get();
   13326:	f7fe f997 	bl	11658 <bt_mesh_comp_get>
	if (srv->cb && srv->cb->fault_get_cur) {
   1332a:	f8da 3004 	ldr.w	r3, [sl, #4]
	comp = bt_mesh_comp_get();
   1332e:	4681      	mov	r9, r0
	if (srv->cb && srv->cb->fault_get_cur) {
   13330:	2b00      	cmp	r3, #0
   13332:	d03d      	beq.n	133b0 <health_pub_update+0xb4>
   13334:	681b      	ldr	r3, [r3, #0]
   13336:	2b00      	cmp	r3, #0
   13338:	d03a      	beq.n	133b0 <health_pub_update+0xb4>
		fault_count = net_buf_simple_tailroom(msg);
   1333a:	4620      	mov	r0, r4
   1333c:	f016 fb27 	bl	2998e <net_buf_simple_tailroom>
   13340:	f88d 000d 	strb.w	r0, [sp, #13]
   13344:	6822      	ldr	r2, [r4, #0]
		err = srv->cb->fault_get_cur(mod, test_id, &company_id,
   13346:	f8da 1004 	ldr.w	r1, [sl, #4]
   1334a:	88a3      	ldrh	r3, [r4, #4]
   1334c:	f10d 000d 	add.w	r0, sp, #13
   13350:	9000      	str	r0, [sp, #0]
   13352:	f8d1 a000 	ldr.w	sl, [r1]
   13356:	4413      	add	r3, r2
   13358:	4639      	mov	r1, r7
   1335a:	f10d 020e 	add.w	r2, sp, #14
   1335e:	4640      	mov	r0, r8
   13360:	47d0      	blx	sl
		if (err) {
   13362:	4602      	mov	r2, r0
   13364:	b168      	cbz	r0, 13382 <health_pub_update+0x86>
			BT_ERR("Failed to get faults (err %d)", err);
   13366:	2145      	movs	r1, #69	; 0x45
   13368:	4814      	ldr	r0, [pc, #80]	; (133bc <health_pub_update+0xc0>)
   1336a:	f010 ff67 	bl	2423c <printk>
		sys_put_le16(comp->cid, company_ptr);
   1336e:	f8b9 3000 	ldrh.w	r3, [r9]
	dst[0] = val;
   13372:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   13374:	0a1b      	lsrs	r3, r3, #8
   13376:	706b      	strb	r3, [r5, #1]
		*test_id = HEALTH_TEST_STANDARD;
   13378:	2300      	movs	r3, #0
   1337a:	703b      	strb	r3, [r7, #0]
		fault_count = 0U;
   1337c:	f88d 300d 	strb.w	r3, [sp, #13]
   13380:	e009      	b.n	13396 <health_pub_update+0x9a>
			sys_put_le16(company_id, company_ptr);
   13382:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	dst[0] = val;
   13386:	702b      	strb	r3, [r5, #0]
	dst[1] = val >> 8;
   13388:	0a1b      	lsrs	r3, r3, #8
   1338a:	706b      	strb	r3, [r5, #1]
			net_buf_simple_add(msg, fault_count);
   1338c:	f89d 100d 	ldrb.w	r1, [sp, #13]
   13390:	4620      	mov	r0, r4
   13392:	f00a fa01 	bl	1d798 <net_buf_simple_add>
	return fault_count;
   13396:	f89d 300d 	ldrb.w	r3, [sp, #13]
	if (count) {
   1339a:	7af2      	ldrb	r2, [r6, #11]
   1339c:	3300      	adds	r3, #0
   1339e:	bf18      	it	ne
   133a0:	2301      	movne	r3, #1
   133a2:	f363 1204 	bfi	r2, r3, #4, #1
	} else {
		pub->fast_period = 0U;
	}

	return 0;
}
   133a6:	2000      	movs	r0, #0
   133a8:	72f2      	strb	r2, [r6, #11]
   133aa:	b004      	add	sp, #16
   133ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No callback for getting faults");
   133b0:	2157      	movs	r1, #87	; 0x57
   133b2:	4803      	ldr	r0, [pc, #12]	; (133c0 <health_pub_update+0xc4>)
   133b4:	f010 ff42 	bl	2423c <printk>
   133b8:	e7d9      	b.n	1336e <health_pub_update+0x72>
   133ba:	bf00      	nop
   133bc:	0002fa39 	.word	0x0002fa39
   133c0:	0002fa5c 	.word	0x0002fa5c

000133c4 <send_health_period_status>:
{
   133c4:	b530      	push	{r4, r5, lr}
   133c6:	4604      	mov	r4, r0
   133c8:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   133ca:	ab03      	add	r3, sp, #12
   133cc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   133d0:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   133d2:	a805      	add	r0, sp, #20
   133d4:	f248 0137 	movw	r1, #32823	; 0x8037
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEALTH_PERIOD_STATUS, 1);
   133d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   133dc:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_HEALTH_PERIOD_STATUS);
   133de:	f014 fe88 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, model->pub->period_div);
   133e2:	68a3      	ldr	r3, [r4, #8]
   133e4:	7ad9      	ldrb	r1, [r3, #11]
   133e6:	a805      	add	r0, sp, #20
   133e8:	f001 010f 	and.w	r1, r1, #15
   133ec:	f016 fae3 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   133f0:	2300      	movs	r3, #0
   133f2:	9300      	str	r3, [sp, #0]
   133f4:	aa05      	add	r2, sp, #20
   133f6:	4629      	mov	r1, r5
   133f8:	4620      	mov	r0, r4
   133fa:	f014 fea3 	bl	28144 <bt_mesh_model_send>
   133fe:	b118      	cbz	r0, 13408 <send_health_period_status+0x44>
		BT_ERR("Unable to send Health Period Status");
   13400:	2145      	movs	r1, #69	; 0x45
   13402:	4802      	ldr	r0, [pc, #8]	; (1340c <send_health_period_status+0x48>)
   13404:	f010 ff1a 	bl	2423c <printk>
}
   13408:	b009      	add	sp, #36	; 0x24
   1340a:	bd30      	pop	{r4, r5, pc}
   1340c:	0002fb1a 	.word	0x0002fb1a

00013410 <send_attention_status>:
{
   13410:	b5f0      	push	{r4, r5, r6, r7, lr}
   13412:	4605      	mov	r5, r0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   13414:	6980      	ldr	r0, [r0, #24]
   13416:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_ATTENTION_STATUS, 1);
   13418:	ab03      	add	r3, sp, #12
   1341a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   1341e:	3018      	adds	r0, #24
   13420:	9305      	str	r3, [sp, #20]
   13422:	e9cd 2306 	strd	r2, r3, [sp, #24]
{
   13426:	460f      	mov	r7, r1
   13428:	f00f f9da 	bl	227e0 <z_timeout_remaining>
	bt_mesh_model_msg_init(&msg, OP_ATTENTION_STATUS);
   1342c:	f248 0107 	movw	r1, #32775	; 0x8007
   13430:	4604      	mov	r4, r0
   13432:	a805      	add	r0, sp, #20
   13434:	f014 fe5d 	bl	280f2 <bt_mesh_model_msg_init>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1343c:	fba4 2300 	umull	r2, r3, r4, r0
   13440:	0bd1      	lsrs	r1, r2, #15
   13442:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   13446:	2600      	movs	r6, #0
	time = k_delayed_work_remaining_get(&srv->attn_timer) / 1000;
   13448:	fbb1 f1f0 	udiv	r1, r1, r0
	net_buf_simple_add_u8(&msg, time);
   1344c:	a805      	add	r0, sp, #20
   1344e:	b2c9      	uxtb	r1, r1
   13450:	f016 fab1 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   13454:	9600      	str	r6, [sp, #0]
   13456:	4633      	mov	r3, r6
   13458:	aa05      	add	r2, sp, #20
   1345a:	4639      	mov	r1, r7
   1345c:	4628      	mov	r0, r5
   1345e:	f014 fe71 	bl	28144 <bt_mesh_model_send>
   13462:	b118      	cbz	r0, 1346c <send_attention_status+0x5c>
		BT_ERR("Unable to send Attention Status");
   13464:	2145      	movs	r1, #69	; 0x45
   13466:	4802      	ldr	r0, [pc, #8]	; (13470 <send_attention_status+0x60>)
   13468:	f010 fee8 	bl	2423c <printk>
}
   1346c:	b009      	add	sp, #36	; 0x24
   1346e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13470:	0002faf5 	.word	0x0002faf5

00013474 <health_fault_clear>:
{
   13474:	b5f0      	push	{r4, r5, r6, r7, lr}
   13476:	b0a5      	sub	sp, #148	; 0x94
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   13478:	ab06      	add	r3, sp, #24
	struct bt_mesh_health_srv *srv = model->user_data;
   1347a:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   1347c:	9303      	str	r3, [sp, #12]
{
   1347e:	4604      	mov	r4, r0
   13480:	460e      	mov	r6, r1
	company_id = net_buf_simple_pull_le16(buf);
   13482:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   13484:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   13488:	e9cd 1304 	strd	r1, r3, [sp, #16]
	company_id = net_buf_simple_pull_le16(buf);
   1348c:	f016 fa49 	bl	29922 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   13490:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   13492:	4605      	mov	r5, r0
	if (srv->cb && srv->cb->fault_clear) {
   13494:	b123      	cbz	r3, 134a0 <health_fault_clear+0x2c>
   13496:	689b      	ldr	r3, [r3, #8]
   13498:	b113      	cbz	r3, 134a0 <health_fault_clear+0x2c>
		srv->cb->fault_clear(model, company_id);
   1349a:	4601      	mov	r1, r0
   1349c:	4620      	mov	r0, r4
   1349e:	4798      	blx	r3
	health_get_registered(model, company_id, &sdu);
   134a0:	aa03      	add	r2, sp, #12
   134a2:	4629      	mov	r1, r5
   134a4:	4620      	mov	r0, r4
   134a6:	f7ff fea1 	bl	131ec <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   134aa:	2300      	movs	r3, #0
   134ac:	9300      	str	r3, [sp, #0]
   134ae:	aa03      	add	r2, sp, #12
   134b0:	4631      	mov	r1, r6
   134b2:	4620      	mov	r0, r4
   134b4:	f014 fe46 	bl	28144 <bt_mesh_model_send>
   134b8:	b118      	cbz	r0, 134c2 <health_fault_clear+0x4e>
		BT_ERR("Unable to send Health Current Status response");
   134ba:	2145      	movs	r1, #69	; 0x45
   134bc:	4802      	ldr	r0, [pc, #8]	; (134c8 <health_fault_clear+0x54>)
   134be:	f010 febd 	bl	2423c <printk>
}
   134c2:	b025      	add	sp, #148	; 0x94
   134c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   134c6:	bf00      	nop
   134c8:	0002fa06 	.word	0x0002fa06

000134cc <health_srv_init>:
		srv->cb->attn_off(srv->model);
	}
}

static int health_srv_init(struct bt_mesh_model *model)
{
   134cc:	b538      	push	{r3, r4, r5, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   134ce:	6984      	ldr	r4, [r0, #24]
{
   134d0:	4605      	mov	r5, r0

	if (!srv) {
   134d2:	b934      	cbnz	r4, 134e2 <health_srv_init+0x16>
		BT_ERR("No Health Server context provided");
   134d4:	480e      	ldr	r0, [pc, #56]	; (13510 <health_srv_init+0x44>)
   134d6:	2145      	movs	r1, #69	; 0x45
		return -EINVAL;
	}

	if (!model->pub) {
		BT_ERR("Health Server has no publication support");
   134d8:	f010 feb0 	bl	2423c <printk>
		return -EINVAL;
   134dc:	f06f 0015 	mvn.w	r0, #21
	if (bt_mesh_model_in_primary(model)) {
		health_srv = srv;
	}

	return 0;
}
   134e0:	bd38      	pop	{r3, r4, r5, pc}
	if (!model->pub) {
   134e2:	6883      	ldr	r3, [r0, #8]
   134e4:	b913      	cbnz	r3, 134ec <health_srv_init+0x20>
		BT_ERR("Health Server has no publication support");
   134e6:	2145      	movs	r1, #69	; 0x45
   134e8:	480a      	ldr	r0, [pc, #40]	; (13514 <health_srv_init+0x48>)
   134ea:	e7f5      	b.n	134d8 <health_srv_init+0xc>
	model->pub->update = health_pub_update;
   134ec:	4a0a      	ldr	r2, [pc, #40]	; (13518 <health_srv_init+0x4c>)
   134ee:	615a      	str	r2, [r3, #20]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   134f0:	2100      	movs	r1, #0
   134f2:	2230      	movs	r2, #48	; 0x30
   134f4:	f104 0008 	add.w	r0, r4, #8
   134f8:	f012 fe5c 	bl	261b4 <memset>
   134fc:	4b07      	ldr	r3, [pc, #28]	; (1351c <health_srv_init+0x50>)
   134fe:	60e3      	str	r3, [r4, #12]
	srv->model = model;
   13500:	6025      	str	r5, [r4, #0]
	if (bt_mesh_model_in_primary(model)) {
   13502:	7928      	ldrb	r0, [r5, #4]
   13504:	b910      	cbnz	r0, 1350c <health_srv_init+0x40>
		health_srv = srv;
   13506:	4b06      	ldr	r3, [pc, #24]	; (13520 <health_srv_init+0x54>)
   13508:	601c      	str	r4, [r3, #0]
   1350a:	e7e9      	b.n	134e0 <health_srv_init+0x14>
	return 0;
   1350c:	2000      	movs	r0, #0
   1350e:	e7e7      	b.n	134e0 <health_srv_init+0x14>
   13510:	0002faa0 	.word	0x0002faa0
   13514:	0002fac7 	.word	0x0002fac7
   13518:	000132fd 	.word	0x000132fd
   1351c:	00028477 	.word	0x00028477
   13520:	200022e0 	.word	0x200022e0

00013524 <health_fault_get>:
{
   13524:	b530      	push	{r4, r5, lr}
   13526:	b0a5      	sub	sp, #148	; 0x94
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   13528:	ab06      	add	r3, sp, #24
{
   1352a:	4604      	mov	r4, r0
   1352c:	460d      	mov	r5, r1
	company_id = net_buf_simple_pull_le16(buf);
   1352e:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   13530:	f44f 01f0 	mov.w	r1, #7864320	; 0x780000
   13534:	e9cd 1304 	strd	r1, r3, [sp, #16]
   13538:	9303      	str	r3, [sp, #12]
	company_id = net_buf_simple_pull_le16(buf);
   1353a:	f016 f9f2 	bl	29922 <net_buf_simple_pull_le16>
	health_get_registered(model, company_id, &sdu);
   1353e:	aa03      	add	r2, sp, #12
   13540:	4601      	mov	r1, r0
   13542:	4620      	mov	r0, r4
   13544:	f7ff fe52 	bl	131ec <health_get_registered>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   13548:	2300      	movs	r3, #0
   1354a:	9300      	str	r3, [sp, #0]
   1354c:	aa03      	add	r2, sp, #12
   1354e:	4629      	mov	r1, r5
   13550:	4620      	mov	r0, r4
   13552:	f014 fdf7 	bl	28144 <bt_mesh_model_send>
   13556:	b118      	cbz	r0, 13560 <health_fault_get+0x3c>
		BT_ERR("Unable to send Health Current Status response");
   13558:	2145      	movs	r1, #69	; 0x45
   1355a:	4802      	ldr	r0, [pc, #8]	; (13564 <health_fault_get+0x40>)
   1355c:	f010 fe6e 	bl	2423c <printk>
}
   13560:	b025      	add	sp, #148	; 0x94
   13562:	bd30      	pop	{r4, r5, pc}
   13564:	0002fa06 	.word	0x0002fa06

00013568 <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
   13568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1356c:	460f      	mov	r7, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
   1356e:	4605      	mov	r5, r0
   13570:	bb60      	cbnz	r0, 135cc <bt_mesh_attention+0x64>
		srv = health_srv;
   13572:	4b1e      	ldr	r3, [pc, #120]	; (135ec <bt_mesh_attention+0x84>)
   13574:	681c      	ldr	r4, [r3, #0]
		if (!srv) {
   13576:	b92c      	cbnz	r4, 13584 <bt_mesh_attention+0x1c>
			BT_WARN("No Health Server available");
   13578:	2157      	movs	r1, #87	; 0x57
   1357a:	481d      	ldr	r0, [pc, #116]	; (135f0 <bt_mesh_attention+0x88>)

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
   1357c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_WARN("No Health Server available");
   13580:	f010 be5c 	b.w	2423c <printk>
		model = srv->model;
   13584:	6825      	ldr	r5, [r4, #0]
	if (time > 0) {
   13586:	f104 0608 	add.w	r6, r4, #8
   1358a:	b30f      	cbz	r7, 135d0 <bt_mesh_attention+0x68>
		if (srv->cb && srv->cb->attn_on) {
   1358c:	6863      	ldr	r3, [r4, #4]
   1358e:	b11b      	cbz	r3, 13598 <bt_mesh_attention+0x30>
   13590:	691b      	ldr	r3, [r3, #16]
   13592:	b10b      	cbz	r3, 13598 <bt_mesh_attention+0x30>
			srv->cb->attn_on(model);
   13594:	4628      	mov	r0, r5
   13596:	4798      	blx	r3
		k_delayed_work_submit(&srv->attn_timer, K_SECONDS(time));
   13598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1359c:	fb03 f107 	mul.w	r1, r3, r7
			return (t * to_hz + off) / from_hz;
   135a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   135a4:	f240 34e7 	movw	r4, #999	; 0x3e7
   135a8:	2500      	movs	r5, #0
   135aa:	fbe0 4501 	umlal	r4, r5, r0, r1
   135ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   135b2:	2300      	movs	r3, #0
   135b4:	4620      	mov	r0, r4
   135b6:	4629      	mov	r1, r5
   135b8:	f7ee fc46 	bl	1e48 <__aeabi_uldivmod>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   135bc:	4602      	mov	r2, r0
   135be:	460b      	mov	r3, r1
   135c0:	480c      	ldr	r0, [pc, #48]	; (135f4 <bt_mesh_attention+0x8c>)
   135c2:	4631      	mov	r1, r6
}
   135c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   135c8:	f00e bece 	b.w	22368 <k_delayed_work_submit_to_queue>
		srv = model->user_data;
   135cc:	6984      	ldr	r4, [r0, #24]
   135ce:	e7da      	b.n	13586 <bt_mesh_attention+0x1e>
		k_delayed_work_cancel(&srv->attn_timer);
   135d0:	4630      	mov	r0, r6
   135d2:	f00e ff39 	bl	22448 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
   135d6:	6863      	ldr	r3, [r4, #4]
   135d8:	b12b      	cbz	r3, 135e6 <bt_mesh_attention+0x7e>
   135da:	695b      	ldr	r3, [r3, #20]
   135dc:	b11b      	cbz	r3, 135e6 <bt_mesh_attention+0x7e>
			srv->cb->attn_off(model);
   135de:	4628      	mov	r0, r5
}
   135e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
   135e4:	4718      	bx	r3
}
   135e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   135ea:	bf00      	nop
   135ec:	200022e0 	.word	0x200022e0
   135f0:	0002f9bb 	.word	0x0002f9bb
   135f4:	20001988 	.word	0x20001988

000135f8 <adv_thread>:

	BT_DBG("Advertising stopped (%u ms)", (uint32_t) k_uptime_delta(&time));
}

static void adv_thread(void *p1, void *p2, void *p3)
{
   135f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135fc:	f240 36e7 	movw	r6, #999	; 0x3e7
   13600:	b08b      	sub	sp, #44	; 0x2c
   13602:	2700      	movs	r7, #0

	while (1) {
		struct net_buf *buf;

		if (IS_ENABLED(CONFIG_BT_MESH_PROXY)) {
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   13604:	2200      	movs	r2, #0
   13606:	2300      	movs	r3, #0
   13608:	485b      	ldr	r0, [pc, #364]	; (13778 <adv_thread+0x180>)
			while (!buf) {

				/* Adv timeout may be set by a call from proxy
				 * to bt_mesh_adv_start:
				 */
				adv_timeout = SYS_FOREVER_MS;
   1360a:	4c5c      	ldr	r4, [pc, #368]	; (1377c <adv_thread+0x184>)
			buf = net_buf_get(&bt_mesh_adv_queue, K_NO_WAIT);
   1360c:	f009 fe94 	bl	1d338 <net_buf_get>
   13610:	4605      	mov	r5, r0
			while (!buf) {
   13612:	2d00      	cmp	r5, #0
   13614:	d065      	beq.n	136e2 <adv_thread+0xea>
		if (!buf) {
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
   13616:	696a      	ldr	r2, [r5, #20]
   13618:	7a13      	ldrb	r3, [r2, #8]
   1361a:	0759      	lsls	r1, r3, #29
   1361c:	f140 80a8 	bpl.w	13770 <adv_thread+0x178>
			BT_MESH_ADV(buf)->busy = 0U;
   13620:	f36f 0382 	bfc	r3, #2, #1
   13624:	7213      	strb	r3, [r2, #8]
		((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
   13626:	4b56      	ldr	r3, [pc, #344]	; (13780 <adv_thread+0x188>)
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
   13628:	f8d5 a014 	ldr.w	sl, [r5, #20]
			       ADV_INT_FAST_MS :
   1362c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	struct bt_le_adv_param param = {};
   13630:	2214      	movs	r2, #20
			       ADV_INT_FAST_MS :
   13632:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
   13634:	eb0d 0002 	add.w	r0, sp, r2
   13638:	f04f 0100 	mov.w	r1, #0
			       ADV_INT_FAST_MS :
   1363c:	bf8c      	ite	hi
   1363e:	f04f 0b14 	movhi.w	fp, #20
   13642:	f04f 0b64 	movls.w	fp, #100	; 0x64
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
   13646:	e9da 8900 	ldrd	r8, r9, [sl]
	struct bt_le_adv_param param = {};
   1364a:	f012 fdb3 	bl	261b4 <memset>
	adv_int = MAX(adv_int_min,
   1364e:	f89a 4009 	ldrb.w	r4, [sl, #9]
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   13652:	494c      	ldr	r1, [pc, #304]	; (13784 <adv_thread+0x18c>)
	adv_int = MAX(adv_int_min,
   13654:	08e3      	lsrs	r3, r4, #3
   13656:	3301      	adds	r3, #1
   13658:	220a      	movs	r2, #10
   1365a:	435a      	muls	r2, r3
   1365c:	455a      	cmp	r2, fp
   1365e:	bfa6      	itte	ge
   13660:	eb03 0383 	addge.w	r3, r3, r3, lsl #2
   13664:	005b      	lslge	r3, r3, #1
   13666:	fa1f f38b 	uxthlt.w	r3, fp
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
   1366a:	f004 0207 	and.w	r2, r4, #7
		     (adv_int + 10)));
   1366e:	f103 040a 	add.w	r4, r3, #10
	duration = (BT_MESH_SCAN_WINDOW_MS +
   13672:	fb02 4404 	mla	r4, r2, r4, r4
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   13676:	f89a 2008 	ldrb.w	r2, [sl, #8]
   1367a:	f002 0203 	and.w	r2, r2, #3
	duration = (BT_MESH_SCAN_WINDOW_MS +
   1367e:	341e      	adds	r4, #30
	ad.type = bt_mesh_adv_type[BT_MESH_ADV(buf)->type];
   13680:	5c8a      	ldrb	r2, [r1, r2]
   13682:	f88d 200c 	strb.w	r2, [sp, #12]
	ad.data_len = buf->len;
   13686:	89aa      	ldrh	r2, [r5, #12]
   13688:	f88d 200d 	strb.w	r2, [sp, #13]
	ad.data = buf->data;
   1368c:	68aa      	ldr	r2, [r5, #8]
   1368e:	9204      	str	r2, [sp, #16]
	duration = (BT_MESH_SCAN_WINDOW_MS +
   13690:	b224      	sxth	r4, r4
	param.interval_min = BT_MESH_ADV_SCAN_UNIT(adv_int);
   13692:	2205      	movs	r2, #5
   13694:	00db      	lsls	r3, r3, #3
   13696:	fbb3 f3f2 	udiv	r3, r3, r2
	param.interval_max = param.interval_min;
   1369a:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1369e:	f016 feaf 	bl	2a400 <z_impl_k_uptime_ticks>
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
   136a2:	2300      	movs	r3, #0
   136a4:	9300      	str	r3, [sp, #0]
   136a6:	2201      	movs	r2, #1
   136a8:	a903      	add	r1, sp, #12
   136aa:	a805      	add	r0, sp, #20
   136ac:	f7f5 fd7a 	bl	91a4 <bt_le_adv_start>
   136b0:	4682      	mov	sl, r0
	net_buf_unref(buf);
   136b2:	4628      	mov	r0, r5
   136b4:	f009 ff5a 	bl	1d56c <net_buf_unref>

static inline void bt_mesh_adv_send_start(uint16_t duration, int err,
					  const struct bt_mesh_send_cb *cb,
					  void *cb_data)
{
	if (cb && cb->start) {
   136b8:	f1b8 0f00 	cmp.w	r8, #0
   136bc:	d006      	beq.n	136cc <adv_thread+0xd4>
   136be:	f8d8 3000 	ldr.w	r3, [r8]
   136c2:	b11b      	cbz	r3, 136cc <adv_thread+0xd4>
		cb->start(duration, err, cb_data);
   136c4:	b2a0      	uxth	r0, r4
   136c6:	464a      	mov	r2, r9
   136c8:	4651      	mov	r1, sl
   136ca:	4798      	blx	r3
	if (err) {
   136cc:	f1ba 0f00 	cmp.w	sl, #0
   136d0:	d02c      	beq.n	1372c <adv_thread+0x134>
		BT_ERR("Advertising failed: err %d", err);
   136d2:	482d      	ldr	r0, [pc, #180]	; (13788 <adv_thread+0x190>)
   136d4:	4652      	mov	r2, sl
   136d6:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Stopping advertising failed: err %d", err);
   136d8:	f010 fdb0 	bl	2423c <printk>
	z_impl_k_yield();
   136dc:	f00e fa76 	bl	21bcc <z_impl_k_yield>
   136e0:	e790      	b.n	13604 <adv_thread+0xc>
				adv_timeout = SYS_FOREVER_MS;
   136e2:	f04f 33ff 	mov.w	r3, #4294967295
   136e6:	6023      	str	r3, [r4, #0]
				bt_mesh_proxy_adv_start();
   136e8:	f002 fed2 	bl	16490 <bt_mesh_proxy_adv_start>
						  SYS_TIMEOUT_MS(adv_timeout));
   136ec:	6821      	ldr	r1, [r4, #0]
				buf = net_buf_get(&bt_mesh_adv_queue,
   136ee:	1c48      	adds	r0, r1, #1
   136f0:	d017      	beq.n	13722 <adv_thread+0x12a>
						  SYS_TIMEOUT_MS(adv_timeout));
   136f2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   136f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   136fa:	46b0      	mov	r8, r6
   136fc:	46b9      	mov	r9, r7
   136fe:	fbc0 8901 	smlal	r8, r9, r0, r1
   13702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13706:	2300      	movs	r3, #0
   13708:	4640      	mov	r0, r8
   1370a:	4649      	mov	r1, r9
   1370c:	f7ee fb9c 	bl	1e48 <__aeabi_uldivmod>
   13710:	4602      	mov	r2, r0
   13712:	460b      	mov	r3, r1
				buf = net_buf_get(&bt_mesh_adv_queue,
   13714:	4818      	ldr	r0, [pc, #96]	; (13778 <adv_thread+0x180>)
   13716:	f009 fe0f 	bl	1d338 <net_buf_get>
   1371a:	4605      	mov	r5, r0
				bt_le_adv_stop();
   1371c:	f7f5 fd50 	bl	91c0 <bt_le_adv_stop>
   13720:	e777      	b.n	13612 <adv_thread+0x1a>
				buf = net_buf_get(&bt_mesh_adv_queue,
   13722:	f04f 32ff 	mov.w	r2, #4294967295
   13726:	f04f 33ff 	mov.w	r3, #4294967295
   1372a:	e7f3      	b.n	13714 <adv_thread+0x11c>
	k_sleep(K_MSEC(duration));
   1372c:	b224      	sxth	r4, r4
   1372e:	17e5      	asrs	r5, r4, #31
   13730:	03e9      	lsls	r1, r5, #15
   13732:	03e0      	lsls	r0, r4, #15
   13734:	1980      	adds	r0, r0, r6
   13736:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
   1373a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1373e:	f04f 0300 	mov.w	r3, #0
   13742:	eb47 0101 	adc.w	r1, r7, r1
   13746:	f7ee fb7f 	bl	1e48 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1374a:	f00e fb4d 	bl	21de8 <z_impl_k_sleep>
	err = bt_le_adv_stop();
   1374e:	f7f5 fd37 	bl	91c0 <bt_le_adv_stop>
   13752:	4604      	mov	r4, r0
}

static inline void bt_mesh_adv_send_end(
	int err, const struct bt_mesh_send_cb *cb, void *cb_data)
{
	if (cb && cb->end) {
   13754:	f1b8 0f00 	cmp.w	r8, #0
   13758:	d004      	beq.n	13764 <adv_thread+0x16c>
   1375a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1375e:	b10b      	cbz	r3, 13764 <adv_thread+0x16c>
		cb->end(err, cb_data);
   13760:	4649      	mov	r1, r9
   13762:	4798      	blx	r3
	if (err) {
   13764:	2c00      	cmp	r4, #0
   13766:	d0b9      	beq.n	136dc <adv_thread+0xe4>
		BT_ERR("Stopping advertising failed: err %d", err);
   13768:	4622      	mov	r2, r4
   1376a:	2145      	movs	r1, #69	; 0x45
   1376c:	4807      	ldr	r0, [pc, #28]	; (1378c <adv_thread+0x194>)
   1376e:	e7b3      	b.n	136d8 <adv_thread+0xe0>
			adv_send(buf);
		} else {
			net_buf_unref(buf);
   13770:	4628      	mov	r0, r5
   13772:	f009 fefb 	bl	1d56c <net_buf_unref>
   13776:	e7b1      	b.n	136dc <adv_thread+0xe4>
   13778:	20000dd8 	.word	0x20000dd8
   1377c:	200022e4 	.word	0x200022e4
   13780:	200001c0 	.word	0x200001c0
   13784:	0002dc8b 	.word	0x0002dc8b
   13788:	0002fb56 	.word	0x0002fb56
   1378c:	0002fb76 	.word	0x0002fb76

00013790 <bt_mesh_adv_update>:
	z_impl_k_queue_cancel_wait(queue);
   13790:	4801      	ldr	r0, [pc, #4]	; (13798 <bt_mesh_adv_update+0x8>)
   13792:	f00d ba63 	b.w	20c5c <z_impl_k_queue_cancel_wait>
   13796:	bf00      	nop
   13798:	20000dd8 	.word	0x20000dd8

0001379c <bt_mesh_adv_init>:
{
	/* Will be handled automatically */
}

void bt_mesh_adv_init(void)
{
   1379c:	b510      	push	{r4, lr}
   1379e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   137a0:	4c0e      	ldr	r4, [pc, #56]	; (137dc <bt_mesh_adv_init+0x40>)
   137a2:	490f      	ldr	r1, [pc, #60]	; (137e0 <bt_mesh_adv_init+0x44>)
   137a4:	f04f 32ff 	mov.w	r2, #4294967295
   137a8:	f04f 33ff 	mov.w	r3, #4294967295
   137ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
   137b0:	2300      	movs	r3, #0
   137b2:	f06f 0208 	mvn.w	r2, #8
   137b6:	e9cd 2303 	strd	r2, r3, [sp, #12]
   137ba:	e9cd 3301 	strd	r3, r3, [sp, #4]
   137be:	9300      	str	r3, [sp, #0]
   137c0:	f44f 7240 	mov.w	r2, #768	; 0x300
   137c4:	4b07      	ldr	r3, [pc, #28]	; (137e4 <bt_mesh_adv_init+0x48>)
   137c6:	4620      	mov	r0, r4
   137c8:	f00e fc90 	bl	220ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   137cc:	4906      	ldr	r1, [pc, #24]	; (137e8 <bt_mesh_adv_init+0x4c>)
   137ce:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_FOREVER);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
   137d0:	b008      	add	sp, #32
   137d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   137d6:	f016 bd98 	b.w	2a30a <z_impl_k_thread_name_set>
   137da:	bf00      	nop
   137dc:	20001600 	.word	0x20001600
   137e0:	20003e20 	.word	0x20003e20
   137e4:	000135f9 	.word	0x000135f9
   137e8:	0002fb9f 	.word	0x0002fb9f

000137ec <bt_mesh_adv_enable>:

int bt_mesh_adv_enable(void)
{
   137ec:	b508      	push	{r3, lr}
	z_impl_k_thread_start(thread);
   137ee:	4802      	ldr	r0, [pc, #8]	; (137f8 <bt_mesh_adv_enable+0xc>)
   137f0:	f016 fd90 	bl	2a314 <z_impl_k_thread_start>
	k_thread_start(&adv_thread_data);
	return 0;
}
   137f4:	2000      	movs	r0, #0
   137f6:	bd08      	pop	{r3, pc}
   137f8:	20001600 	.word	0x20001600

000137fc <bt_mesh_adv_start>:

int bt_mesh_adv_start(const struct bt_le_adv_param *param, int32_t duration,
		      const struct bt_data *ad, size_t ad_len,
		      const struct bt_data *sd, size_t sd_len)
{
   137fc:	b430      	push	{r4, r5}
	adv_timeout = duration;
   137fe:	4d05      	ldr	r5, [pc, #20]	; (13814 <bt_mesh_adv_start+0x18>)
{
   13800:	4614      	mov	r4, r2
	adv_timeout = duration;
   13802:	6029      	str	r1, [r5, #0]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   13804:	9903      	ldr	r1, [sp, #12]
{
   13806:	461a      	mov	r2, r3
   13808:	9b02      	ldr	r3, [sp, #8]
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   1380a:	9102      	str	r1, [sp, #8]
   1380c:	4621      	mov	r1, r4
}
   1380e:	bc30      	pop	{r4, r5}
	return bt_le_adv_start(param, ad, ad_len, sd, sd_len);
   13810:	f7f5 bcc8 	b.w	91a4 <bt_le_adv_start>
   13814:	200022e4 	.word	0x200022e4

00013818 <atomic_test_and_clear_bit.constprop.5>:
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
   13818:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1381a:	2301      	movs	r3, #1
   1381c:	fa03 f000 	lsl.w	r0, r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13820:	4b0a      	ldr	r3, [pc, #40]	; (1384c <atomic_test_and_clear_bit.constprop.5+0x34>)
   13822:	f3bf 8f5b 	dmb	ish
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13826:	43c1      	mvns	r1, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13828:	e853 2f00 	ldrex	r2, [r3]
   1382c:	ea02 0c01 	and.w	ip, r2, r1
   13830:	e843 ce00 	strex	lr, ip, [r3]
   13834:	f1be 0f00 	cmp.w	lr, #0
   13838:	d1f6      	bne.n	13828 <atomic_test_and_clear_bit.constprop.5+0x10>
   1383a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1383e:	4202      	tst	r2, r0
}
   13840:	bf14      	ite	ne
   13842:	2001      	movne	r0, #1
   13844:	2000      	moveq	r0, #0
   13846:	f85d fb04 	ldr.w	pc, [sp], #4
   1384a:	bf00      	nop
   1384c:	200022e8 	.word	0x200022e8

00013850 <mesh_commit>:

	return 0;
}

static int mesh_commit(void)
{
   13850:	b508      	push	{r3, lr}
	if (!bt_mesh_subnet_next(NULL)) {
   13852:	2000      	movs	r0, #0
   13854:	f7fa ff9c 	bl	e790 <bt_mesh_subnet_next>
   13858:	b1a8      	cbz	r0, 13886 <mesh_commit+0x36>
		/* Nothing to do since we're not yet provisioned */
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		bt_mesh_proxy_prov_disable(true);
   1385a:	2001      	movs	r0, #1
   1385c:	f002 fd82 	bl	16364 <bt_mesh_proxy_prov_disable>
	}

	bt_mesh_net_settings_commit();
   13860:	f7fa fd82 	bl	e368 <bt_mesh_net_settings_commit>
	bt_mesh_model_settings_commit();
   13864:	f7fd ff34 	bl	116d0 <bt_mesh_model_settings_commit>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13868:	f3bf 8f5b 	dmb	ish
   1386c:	4b07      	ldr	r3, [pc, #28]	; (1388c <mesh_commit+0x3c>)
   1386e:	e853 2f00 	ldrex	r2, [r3]
   13872:	f042 0201 	orr.w	r2, r2, #1
   13876:	e843 2100 	strex	r1, r2, [r3]
   1387a:	2900      	cmp	r1, #0
   1387c:	d1f7      	bne.n	1386e <mesh_commit+0x1e>
   1387e:	f3bf 8f5b 	dmb	ish

	atomic_set_bit(bt_mesh.flags, BT_MESH_VALID);

	bt_mesh_start();
   13882:	f7f9 fa71 	bl	cd68 <bt_mesh_start>

	return 0;
}
   13886:	2000      	movs	r0, #0
   13888:	bd08      	pop	{r3, pc}
   1388a:	bf00      	nop
   1388c:	200013b0 	.word	0x200013b0

00013890 <bt_mesh_settings_set>:
{
   13890:	b538      	push	{r3, r4, r5, lr}
   13892:	4604      	mov	r4, r0
   13894:	4608      	mov	r0, r1
   13896:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   13898:	461a      	mov	r2, r3
{
   1389a:	461d      	mov	r5, r3
	len = read_cb(cb_arg, out, read_len);
   1389c:	47a0      	blx	r4
	if (len < 0) {
   1389e:	1e04      	subs	r4, r0, #0
   138a0:	da06      	bge.n	138b0 <bt_mesh_settings_set+0x20>
		BT_ERR("Failed to read value (err %zd)", len);
   138a2:	4622      	mov	r2, r4
   138a4:	2145      	movs	r1, #69	; 0x45
   138a6:	4809      	ldr	r0, [pc, #36]	; (138cc <bt_mesh_settings_set+0x3c>)
   138a8:	f010 fcc8 	bl	2423c <printk>
}
   138ac:	4620      	mov	r0, r4
   138ae:	bd38      	pop	{r3, r4, r5, pc}
	if (len != read_len) {
   138b0:	42a5      	cmp	r5, r4
   138b2:	d008      	beq.n	138c6 <bt_mesh_settings_set+0x36>
		BT_ERR("Unexpected value length (%zd != %zu)", len, read_len);
   138b4:	4622      	mov	r2, r4
   138b6:	462b      	mov	r3, r5
   138b8:	2145      	movs	r1, #69	; 0x45
   138ba:	4805      	ldr	r0, [pc, #20]	; (138d0 <bt_mesh_settings_set+0x40>)
   138bc:	f010 fcbe 	bl	2423c <printk>
		return -EINVAL;
   138c0:	f06f 0415 	mvn.w	r4, #21
   138c4:	e7f2      	b.n	138ac <bt_mesh_settings_set+0x1c>
	return 0;
   138c6:	2400      	movs	r4, #0
   138c8:	e7f0      	b.n	138ac <bt_mesh_settings_set+0x1c>
   138ca:	bf00      	nop
   138cc:	0002f0cf 	.word	0x0002f0cf
   138d0:	0002fbbe 	.word	0x0002fbbe

000138d4 <bt_mesh_settings_store_schedule>:
			      BIT(BT_MESH_SETTINGS_HB_PUB_PENDING)   |      \
			      BIT(BT_MESH_SETTINGS_CFG_PENDING)      |      \
			      BIT(BT_MESH_SETTINGS_MOD_PENDING))

void bt_mesh_settings_store_schedule(enum bt_mesh_settings_flag flag)
{
   138d4:	b570      	push	{r4, r5, r6, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   138d6:	4a2a      	ldr	r2, [pc, #168]	; (13980 <bt_mesh_settings_store_schedule+0xac>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   138d8:	f3bf 8f5b 	dmb	ish
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   138dc:	0943      	lsrs	r3, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   138de:	2101      	movs	r1, #1
   138e0:	f000 001f 	and.w	r0, r0, #31
   138e4:	fa01 f000 	lsl.w	r0, r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   138e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   138ec:	e853 1f00 	ldrex	r1, [r3]
   138f0:	4301      	orrs	r1, r0
   138f2:	e843 1400 	strex	r4, r1, [r3]
   138f6:	2c00      	cmp	r4, #0
   138f8:	d1f8      	bne.n	138ec <bt_mesh_settings_store_schedule+0x18>
   138fa:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   138fe:	f3bf 8f5b 	dmb	ish
   13902:	6813      	ldr	r3, [r2, #0]
   13904:	f3bf 8f5b 	dmb	ish
	int32_t timeout_ms, remaining;

	atomic_set_bit(pending_flags, flag);

	if (atomic_get(pending_flags) & NO_WAIT_PENDING_BITS) {
   13908:	f413 6f87 	tst.w	r3, #1080	; 0x438
   1390c:	d132      	bne.n	13974 <bt_mesh_settings_store_schedule+0xa0>
   1390e:	f3bf 8f5b 	dmb	ish
   13912:	6813      	ldr	r3, [r2, #0]
   13914:	f3bf 8f5b 	dmb	ish
		timeout_ms = 0;
	} else if (atomic_test_bit(pending_flags,
   13918:	07db      	lsls	r3, r3, #31
   1391a:	d508      	bpl.n	1392e <bt_mesh_settings_store_schedule+0x5a>
   1391c:	f3bf 8f5b 	dmb	ish
   13920:	4b18      	ldr	r3, [pc, #96]	; (13984 <bt_mesh_settings_store_schedule+0xb0>)
   13922:	681b      	ldr	r3, [r3, #0]
   13924:	f3bf 8f5b 	dmb	ish
				   BT_MESH_SETTINGS_RPL_PENDING) &&
   13928:	f413 7fe3 	tst.w	r3, #454	; 0x1c6
   1392c:	d024      	beq.n	13978 <bt_mesh_settings_store_schedule+0xa4>
		   (!(atomic_get(bt_mesh.flags) & GENERIC_PENDING_BITS) ||
		    (CONFIG_BT_MESH_RPL_STORE_TIMEOUT <
		     CONFIG_BT_MESH_STORE_TIMEOUT))) {
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
	} else {
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
   1392e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   13932:	4815      	ldr	r0, [pc, #84]	; (13988 <bt_mesh_settings_store_schedule+0xb4>)
   13934:	f00e ff54 	bl	227e0 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1393c:	fba0 0103 	umull	r0, r1, r0, r3
   13940:	0bc3      	lsrs	r3, r0, #15
	}

	remaining = k_delayed_work_remaining_get(&pending_store);
	if ((remaining > 0) && remaining < timeout_ms) {
   13942:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   13946:	d001      	beq.n	1394c <bt_mesh_settings_store_schedule+0x78>
   13948:	429c      	cmp	r4, r3
   1394a:	dc18      	bgt.n	1397e <bt_mesh_settings_store_schedule+0xaa>
			return (t * to_hz + off) / from_hz;
   1394c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   13950:	f240 30e7 	movw	r0, #999	; 0x3e7
   13954:	2100      	movs	r1, #0
   13956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1395a:	2300      	movs	r3, #0
   1395c:	fbc5 0104 	smlal	r0, r1, r5, r4
   13960:	f7ee fa72 	bl	1e48 <__aeabi_uldivmod>
	}

	BT_DBG("Waiting %d seconds", timeout_ms / MSEC_PER_SEC);

	k_delayed_work_submit(&pending_store, K_MSEC(timeout_ms));
}
   13964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13968:	4602      	mov	r2, r0
   1396a:	460b      	mov	r3, r1
   1396c:	4807      	ldr	r0, [pc, #28]	; (1398c <bt_mesh_settings_store_schedule+0xb8>)
   1396e:	4908      	ldr	r1, [pc, #32]	; (13990 <bt_mesh_settings_store_schedule+0xbc>)
   13970:	f00e bcfa 	b.w	22368 <k_delayed_work_submit_to_queue>
		timeout_ms = 0;
   13974:	2400      	movs	r4, #0
   13976:	e7dc      	b.n	13932 <bt_mesh_settings_store_schedule+0x5e>
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
   13978:	f241 3488 	movw	r4, #5000	; 0x1388
   1397c:	e7d9      	b.n	13932 <bt_mesh_settings_store_schedule+0x5e>
}
   1397e:	bd70      	pop	{r4, r5, r6, pc}
   13980:	200022e8 	.word	0x200022e8
   13984:	200013b0 	.word	0x200013b0
   13988:	200016a0 	.word	0x200016a0
   1398c:	20001988 	.word	0x20001988
   13990:	20001690 	.word	0x20001690

00013994 <bt_mesh_settings_init>:
		bt_mesh_cdb_pending_store();
	}
}

void bt_mesh_settings_init(void)
{
   13994:	b508      	push	{r3, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13996:	4b04      	ldr	r3, [pc, #16]	; (139a8 <bt_mesh_settings_init+0x14>)
   13998:	2230      	movs	r2, #48	; 0x30
   1399a:	2100      	movs	r1, #0
   1399c:	4618      	mov	r0, r3
   1399e:	f012 fc09 	bl	261b4 <memset>
   139a2:	4a02      	ldr	r2, [pc, #8]	; (139ac <bt_mesh_settings_init+0x18>)
   139a4:	6042      	str	r2, [r0, #4]
	k_delayed_work_init(&pending_store, store_pending);
}
   139a6:	bd08      	pop	{r3, pc}
   139a8:	20001690 	.word	0x20001690
   139ac:	00028525 	.word	0x00028525

000139b0 <send_friend_poll>:
static const struct bt_mesh_send_cb req_sent_cb = {
	.start = req_sent,
};

static int send_friend_poll(void)
{
   139b0:	b530      	push	{r4, r5, lr}
	struct bt_mesh_msg_ctx ctx = {
		.net_idx     = bt_mesh.lpn.sub->net_idx,
   139b2:	4d25      	ldr	r5, [pc, #148]	; (13a48 <send_friend_poll+0x98>)
   139b4:	6fab      	ldr	r3, [r5, #120]	; 0x78
{
   139b6:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   139b8:	8b9a      	ldrh	r2, [r3, #28]
   139ba:	f8ad 2010 	strh.w	r2, [sp, #16]
   139be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   139c2:	2400      	movs	r4, #0
   139c4:	f8ad 2012 	strh.w	r2, [sp, #18]
		.app_idx     = BT_MESH_KEY_UNUSED,
		.addr        = bt_mesh.lpn.frnd,
		.send_ttl    = 0,
	};
	struct bt_mesh_net_tx tx = {
   139c8:	9307      	str	r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
   139ca:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   139cc:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   139d0:	ab04      	add	r3, sp, #16
   139d2:	9308      	str	r3, [sp, #32]
	struct bt_mesh_msg_ctx ctx = {
   139d4:	f8cd 4016 	str.w	r4, [sp, #22]
   139d8:	f8ad 401a 	strh.w	r4, [sp, #26]
	struct bt_mesh_net_tx tx = {
   139dc:	9409      	str	r4, [sp, #36]	; 0x24
		.sub = bt_mesh.lpn.sub,
		.ctx = &ctx,
		.src = bt_mesh_primary_addr(),
   139de:	f7fd fc19 	bl	11214 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   139e2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   139e6:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
   139ea:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
   139ee:	f443 7384 	orr.w	r3, r3, #264	; 0x108
   139f2:	f043 0301 	orr.w	r3, r3, #1
   139f6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
		.xmit = POLL_XMIT,
		.friend_cred = true,
	};
	struct bt_mesh_lpn *lpn = &bt_mesh.lpn;
	uint8_t fsn = lpn->fsn;
   139fa:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   139fe:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   13a02:	f88d 200f 	strb.w	r2, [sp, #15]
	int err;

	BT_DBG("lpn->sent_req 0x%02x", lpn->sent_req);

	if (lpn->sent_req) {
   13a06:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   13a0a:	b13a      	cbz	r2, 13a1c <send_friend_poll+0x6c>
		if (lpn->sent_req != TRANS_CTL_OP_FRIEND_POLL) {
   13a0c:	2a01      	cmp	r2, #1
   13a0e:	d003      	beq.n	13a18 <send_friend_poll+0x68>
			lpn->pending_poll = 1U;
   13a10:	f043 0302 	orr.w	r3, r3, #2
   13a14:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
		}

		return 0;
   13a18:	4620      	mov	r0, r4
   13a1a:	e013      	b.n	13a44 <send_friend_poll+0x94>
	}

	err = bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_POLL, &fsn, 1,
   13a1c:	4b0b      	ldr	r3, [pc, #44]	; (13a4c <send_friend_poll+0x9c>)
   13a1e:	9300      	str	r3, [sp, #0]
   13a20:	2301      	movs	r3, #1
   13a22:	9201      	str	r2, [sp, #4]
   13a24:	4619      	mov	r1, r3
   13a26:	f10d 020f 	add.w	r2, sp, #15
   13a2a:	a807      	add	r0, sp, #28
   13a2c:	f7fb fe0a 	bl	f644 <bt_mesh_ctl_send>
			       &req_sent_cb, NULL);
	if (err == 0) {
   13a30:	b940      	cbnz	r0, 13a44 <send_friend_poll+0x94>
		lpn->pending_poll = 0U;
   13a32:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   13a36:	f360 0341 	bfi	r3, r0, #1, #1
   13a3a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
		lpn->sent_req = TRANS_CTL_OP_FRIEND_POLL;
   13a3e:	2301      	movs	r3, #1
   13a40:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	}

	return err;
}
   13a44:	b00b      	add	sp, #44	; 0x2c
   13a46:	bd30      	pop	{r4, r5, pc}
   13a48:	200013a8 	.word	0x200013a8
   13a4c:	0002b4f0 	.word	0x0002b4f0

00013a50 <k_delayed_work_submit>:
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13a50:	4601      	mov	r1, r0
   13a52:	4801      	ldr	r0, [pc, #4]	; (13a58 <k_delayed_work_submit+0x8>)
   13a54:	f00e bc88 	b.w	22368 <k_delayed_work_submit_to_queue>
   13a58:	20001988 	.word	0x20001988

00013a5c <friend_cred_create>:
	send_friend_poll();
}

static int friend_cred_create(struct bt_mesh_net_cred *cred,
			      const uint8_t key[16])
{
   13a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13a5e:	460d      	mov	r5, r1
   13a60:	4604      	mov	r4, r0
	struct bt_mesh_lpn *lpn = &bt_mesh.lpn;

	return bt_mesh_friend_cred_create(cred, bt_mesh_primary_addr(),
   13a62:	f7fd fbd7 	bl	11214 <bt_mesh_primary_addr>
   13a66:	4a06      	ldr	r2, [pc, #24]	; (13a80 <friend_cred_create+0x24>)
   13a68:	9501      	str	r5, [sp, #4]
   13a6a:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   13a6c:	9300      	str	r3, [sp, #0]
   13a6e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
   13a70:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   13a72:	4601      	mov	r1, r0
   13a74:	4620      	mov	r0, r4
   13a76:	f013 ffec 	bl	27a52 <bt_mesh_friend_cred_create>
					  lpn->frnd, lpn->lpn_counter,
					  lpn->frnd_counter, key);
}
   13a7a:	b003      	add	sp, #12
   13a7c:	bd30      	pop	{r4, r5, pc}
   13a7e:	bf00      	nop
   13a80:	200013a8 	.word	0x200013a8

00013a84 <friend_req_sent>:
{
   13a84:	b510      	push	{r4, lr}
	if (err) {
   13a86:	460a      	mov	r2, r1
   13a88:	b129      	cbz	r1, 13a96 <friend_req_sent+0x12>
		BT_ERR("Sending Friend Request failed (err %d)", err);
   13a8a:	2145      	movs	r1, #69	; 0x45
   13a8c:	4808      	ldr	r0, [pc, #32]	; (13ab0 <friend_req_sent+0x2c>)
}
   13a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Sending Friend Request failed (err %d)", err);
   13a92:	f010 bbd3 	b.w	2423c <printk>
	lpn->adv_duration = duration;
   13a96:	4c07      	ldr	r4, [pc, #28]	; (13ab4 <friend_req_sent+0x30>)
		k_delayed_work_submit(&lpn->timer, K_MSEC(FRIEND_REQ_WAIT));
   13a98:	2300      	movs	r3, #0
	lpn->adv_duration = duration;
   13a9a:	86a0      	strh	r0, [r4, #52]	; 0x34
		k_delayed_work_submit(&lpn->timer, K_MSEC(FRIEND_REQ_WAIT));
   13a9c:	f640 42cd 	movw	r2, #3277	; 0xccd
   13aa0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13aa4:	f7ff ffd4 	bl	13a50 <k_delayed_work_submit>
	bt_mesh.lpn.state = state;
   13aa8:	2304      	movs	r3, #4
   13aaa:	f884 3020 	strb.w	r3, [r4, #32]
}
   13aae:	bd10      	pop	{r4, pc}
   13ab0:	0002fead 	.word	0x0002fead
   13ab4:	200013a8 	.word	0x200013a8

00013ab8 <friend_response_received.constprop.8>:
static void friend_response_received(struct bt_mesh_lpn *lpn)
   13ab8:	b510      	push	{r4, lr}
	if (lpn->sent_req == TRANS_CTL_OP_FRIEND_POLL) {
   13aba:	4c0c      	ldr	r4, [pc, #48]	; (13aec <friend_response_received.constprop.8+0x34>)
	k_delayed_work_cancel(&lpn->timer);
   13abc:	480c      	ldr	r0, [pc, #48]	; (13af0 <friend_response_received.constprop.8+0x38>)
	if (lpn->sent_req == TRANS_CTL_OP_FRIEND_POLL) {
   13abe:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   13ac2:	2b01      	cmp	r3, #1
		lpn->fsn++;
   13ac4:	bf02      	ittt	eq
   13ac6:	f894 302c 	ldrbeq.w	r3, [r4, #44]	; 0x2c
   13aca:	f083 0308 	eoreq.w	r3, r3, #8
   13ace:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
	k_delayed_work_cancel(&lpn->timer);
   13ad2:	f00e fcb9 	bl	22448 <k_delayed_work_cancel>
	bt_mesh_scan_disable();
   13ad6:	f7f9 fb7d 	bl	d1d4 <bt_mesh_scan_disable>
	bt_mesh.lpn.state = state;
   13ada:	2306      	movs	r3, #6
   13adc:	f884 3020 	strb.w	r3, [r4, #32]
	lpn->req_attempts = 0U;
   13ae0:	2300      	movs	r3, #0
   13ae2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	lpn->sent_req = 0U;
   13ae6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   13aea:	bd10      	pop	{r4, pc}
   13aec:	200013a8 	.word	0x200013a8
   13af0:	200013e0 	.word	0x200013e0

00013af4 <send_friend_req.constprop.9>:
static int send_friend_req(struct bt_mesh_lpn *lpn)
   13af4:	b570      	push	{r4, r5, r6, lr}
   13af6:	b08c      	sub	sp, #48	; 0x30
	const struct bt_mesh_comp *comp = bt_mesh_comp_get();
   13af8:	f7fd fdae 	bl	11658 <bt_mesh_comp_get>
	struct bt_mesh_msg_ctx ctx = {
   13afc:	2400      	movs	r4, #0
   13afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
	lpn->lpn_counter++;
   13b02:	4d23      	ldr	r5, [pc, #140]	; (13b90 <send_friend_req.constprop.9+0x9c>)
	struct bt_mesh_msg_ctx ctx = {
   13b04:	9408      	str	r4, [sp, #32]
   13b06:	ab06      	add	r3, sp, #24
   13b08:	e9cd 4406 	strd	r4, r4, [sp, #24]
   13b0c:	f8ad 201a 	strh.w	r2, [sp, #26]
   13b10:	f64f 72fd 	movw	r2, #65533	; 0xfffd
	const struct bt_mesh_comp *comp = bt_mesh_comp_get();
   13b14:	4606      	mov	r6, r0
	struct bt_mesh_msg_ctx ctx = {
   13b16:	f8ad 201c 	strh.w	r2, [sp, #28]
	struct bt_mesh_net_tx tx = {
   13b1a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   13b1e:	9409      	str	r4, [sp, #36]	; 0x24
		.src = bt_mesh_primary_addr(),
   13b20:	f7fd fb78 	bl	11214 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   13b24:	2309      	movs	r3, #9
   13b26:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		.prev_addr   = sys_cpu_to_be16(lpn->old_friend),
   13b2a:	8e69      	ldrh	r1, [r5, #50]	; 0x32
	lpn->lpn_counter++;
   13b2c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	struct bt_mesh_ctl_friend_req req = {
   13b2e:	4a19      	ldr	r2, [pc, #100]	; (13b94 <send_friend_req.constprop.9+0xa0>)
   13b30:	9203      	str	r2, [sp, #12]
   13b32:	222c      	movs	r2, #44	; 0x2c
   13b34:	f88d 2010 	strb.w	r2, [sp, #16]
	lpn->lpn_counter++;
   13b38:	3301      	adds	r3, #1
		.prev_addr   = sys_cpu_to_be16(lpn->old_friend),
   13b3a:	020a      	lsls	r2, r1, #8
	struct bt_mesh_ctl_friend_req req = {
   13b3c:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
	lpn->lpn_counter++;
   13b40:	b29b      	uxth	r3, r3
	struct bt_mesh_net_tx tx = {
   13b42:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
	lpn->lpn_counter++;
   13b46:	862b      	strh	r3, [r5, #48]	; 0x30
	struct bt_mesh_ctl_friend_req req = {
   13b48:	f8ad 2011 	strh.w	r2, [sp, #17]
   13b4c:	ba5b      	rev16	r3, r3
   13b4e:	68b2      	ldr	r2, [r6, #8]
   13b50:	f88d 2013 	strb.w	r2, [sp, #19]
	lpn->sub = bt_mesh_subnet_next(NULL);
   13b54:	4620      	mov	r0, r4
	struct bt_mesh_ctl_friend_req req = {
   13b56:	f8ad 3014 	strh.w	r3, [sp, #20]
	lpn->sub = bt_mesh_subnet_next(NULL);
   13b5a:	f7fa fe19 	bl	e790 <bt_mesh_subnet_next>
   13b5e:	67a8      	str	r0, [r5, #120]	; 0x78
	if (!lpn->sub) {
   13b60:	b938      	cbnz	r0, 13b72 <send_friend_req.constprop.9+0x7e>
		BT_ERR("No subnets, can't start LPN mode");
   13b62:	480d      	ldr	r0, [pc, #52]	; (13b98 <send_friend_req.constprop.9+0xa4>)
   13b64:	2145      	movs	r1, #69	; 0x45
   13b66:	f010 fb69 	bl	2423c <printk>
		return -ENOENT;
   13b6a:	f06f 0001 	mvn.w	r0, #1
}
   13b6e:	b00c      	add	sp, #48	; 0x30
   13b70:	bd70      	pop	{r4, r5, r6, pc}
	ctx.net_idx = lpn->sub->net_idx;
   13b72:	8b83      	ldrh	r3, [r0, #28]
   13b74:	f8ad 3018 	strh.w	r3, [sp, #24]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_REQ, &req,
   13b78:	4b08      	ldr	r3, [pc, #32]	; (13b9c <send_friend_req.constprop.9+0xa8>)
	tx.sub = lpn->sub;
   13b7a:	9009      	str	r0, [sp, #36]	; 0x24
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_REQ, &req,
   13b7c:	9300      	str	r3, [sp, #0]
   13b7e:	9401      	str	r4, [sp, #4]
   13b80:	230a      	movs	r3, #10
   13b82:	aa03      	add	r2, sp, #12
   13b84:	2103      	movs	r1, #3
   13b86:	a809      	add	r0, sp, #36	; 0x24
   13b88:	f7fb fd5c 	bl	f644 <bt_mesh_ctl_send>
   13b8c:	e7ef      	b.n	13b6e <send_friend_req.constprop.9+0x7a>
   13b8e:	bf00      	nop
   13b90:	200013a8 	.word	0x200013a8
   13b94:	01006401 	.word	0x01006401
   13b98:	0002ffd7 	.word	0x0002ffd7
   13b9c:	0002b4e8 	.word	0x0002b4e8

00013ba0 <poll_timeout.constprop.5>:
	}

	sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
}

static int32_t poll_timeout(struct bt_mesh_lpn *lpn)
   13ba0:	b538      	push	{r3, r4, r5, lr}
{
	/* If we're waiting for segment acks keep polling at high freq */
	if (bt_mesh_tx_in_progress()) {
   13ba2:	f7fb fd45 	bl	f630 <bt_mesh_tx_in_progress>
   13ba6:	491d      	ldr	r1, [pc, #116]	; (13c1c <poll_timeout.constprop.5+0x7c>)
   13ba8:	b1c8      	cbz	r0, 13bde <poll_timeout.constprop.5+0x3e>
		return MIN(POLL_TIMEOUT_MAX(lpn), 1 * MSEC_PER_SEC);
   13baa:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   13bae:	8e8b      	ldrh	r3, [r1, #52]	; 0x34
   13bb0:	4403      	add	r3, r0
   13bb2:	f103 00c8 	add.w	r0, r3, #200	; 0xc8
   13bb6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
   13bba:	f247 5230 	movw	r2, #30000	; 0x7530
   13bbe:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
   13bc2:	fbb2 f0f0 	udiv	r0, r2, r0
   13bc6:	2806      	cmp	r0, #6
   13bc8:	bfa8      	it	ge
   13bca:	2006      	movge	r0, #6
   13bcc:	3338      	adds	r3, #56	; 0x38
   13bce:	fb03 2000 	mla	r0, r3, r0, r2
   13bd2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   13bd6:	bf28      	it	cs
   13bd8:	f44f 707a 	movcs.w	r0, #1000	; 0x3e8
	}

	BT_DBG("Poll Timeout is %ums", lpn->poll_timeout);

	return lpn->poll_timeout;
}
   13bdc:	bd38      	pop	{r3, r4, r5, pc}
	if (lpn->poll_timeout < POLL_TIMEOUT_MAX(lpn)) {
   13bde:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
   13be2:	8e88      	ldrh	r0, [r1, #52]	; 0x34
   13be4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   13be6:	4418      	add	r0, r3
   13be8:	f100 02c8 	add.w	r2, r0, #200	; 0xc8
   13bec:	f1c0 20ff 	rsb	r0, r0, #4278255360	; 0xff00ff00
   13bf0:	f247 5530 	movw	r5, #30000	; 0x7530
   13bf4:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
   13bf8:	fbb5 f3f2 	udiv	r3, r5, r2
   13bfc:	2b06      	cmp	r3, #6
   13bfe:	bfa8      	it	ge
   13c00:	2306      	movge	r3, #6
   13c02:	3038      	adds	r0, #56	; 0x38
   13c04:	fb00 5303 	mla	r3, r0, r3, r5
   13c08:	429c      	cmp	r4, r3
   13c0a:	da04      	bge.n	13c16 <poll_timeout.constprop.5+0x76>
		lpn->poll_timeout *= 2;
   13c0c:	0064      	lsls	r4, r4, #1
		lpn->poll_timeout = MIN(lpn->poll_timeout,
   13c0e:	429c      	cmp	r4, r3
   13c10:	bfd4      	ite	le
   13c12:	628c      	strle	r4, [r1, #40]	; 0x28
   13c14:	628b      	strgt	r3, [r1, #40]	; 0x28
	return lpn->poll_timeout;
   13c16:	6a88      	ldr	r0, [r1, #40]	; 0x28
   13c18:	e7e0      	b.n	13bdc <poll_timeout.constprop.5+0x3c>
   13c1a:	bf00      	nop
   13c1c:	200013a8 	.word	0x200013a8

00013c20 <clear_friendship>:
{
   13c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c24:	460e      	mov	r6, r1
   13c26:	b08b      	sub	sp, #44	; 0x2c
	if (!force && lpn->established && !lpn->clear_success &&
   13c28:	4605      	mov	r5, r0
   13c2a:	4c4b      	ldr	r4, [pc, #300]	; (13d58 <clear_friendship+0x138>)
   13c2c:	2800      	cmp	r0, #0
   13c2e:	d143      	bne.n	13cb8 <clear_friendship+0x98>
   13c30:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   13c34:	f003 0330 	and.w	r3, r3, #48	; 0x30
   13c38:	2b10      	cmp	r3, #16
   13c3a:	d13d      	bne.n	13cb8 <clear_friendship+0x98>
   13c3c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   13c40:	2b02      	cmp	r3, #2
   13c42:	d839      	bhi.n	13cb8 <clear_friendship+0x98>
		.net_idx     = bt_mesh.lpn.sub->net_idx,
   13c44:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	struct bt_mesh_net_tx tx = {
   13c46:	9307      	str	r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
   13c48:	8b9a      	ldrh	r2, [r3, #28]
   13c4a:	f8ad 2010 	strh.w	r2, [sp, #16]
   13c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
	struct bt_mesh_net_tx tx = {
   13c52:	ab04      	add	r3, sp, #16
	struct bt_mesh_msg_ctx ctx = {
   13c54:	f8ad 2012 	strh.w	r2, [sp, #18]
   13c58:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   13c5a:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   13c5e:	9308      	str	r3, [sp, #32]
	struct bt_mesh_msg_ctx ctx = {
   13c60:	f8cd 0016 	str.w	r0, [sp, #22]
   13c64:	f8ad 001a 	strh.w	r0, [sp, #26]
	struct bt_mesh_net_tx tx = {
   13c68:	9009      	str	r0, [sp, #36]	; 0x24
		.src = bt_mesh_primary_addr(),
   13c6a:	f7fd fad3 	bl	11214 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   13c6e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   13c72:	f7f9 f991 	bl	cf98 <bt_mesh_net_transmit_get>
		.lpn_addr    = sys_cpu_to_be16(tx.src),
   13c76:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
	struct bt_mesh_net_tx tx = {
   13c7a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
		.lpn_addr    = sys_cpu_to_be16(tx.src),
   13c7e:	0213      	lsls	r3, r2, #8
   13c80:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
		.lpn_counter = sys_cpu_to_be16(bt_mesh.lpn.lpn_counter),
   13c84:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	struct bt_mesh_ctl_friend_clear req = {
   13c86:	f8ad 300c 	strh.w	r3, [sp, #12]
		.lpn_counter = sys_cpu_to_be16(bt_mesh.lpn.lpn_counter),
   13c8a:	0213      	lsls	r3, r2, #8
   13c8c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	struct bt_mesh_ctl_friend_clear req = {
   13c90:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_FRIEND_CLEAR, &req,
   13c94:	4b31      	ldr	r3, [pc, #196]	; (13d5c <clear_friendship+0x13c>)
   13c96:	9300      	str	r3, [sp, #0]
   13c98:	9501      	str	r5, [sp, #4]
   13c9a:	2304      	movs	r3, #4
   13c9c:	aa03      	add	r2, sp, #12
   13c9e:	2105      	movs	r1, #5
   13ca0:	a807      	add	r0, sp, #28
   13ca2:	f7fb fccf 	bl	f644 <bt_mesh_ctl_send>
		lpn->disable = disable;
   13ca6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   13caa:	f366 0382 	bfi	r3, r6, #2, #1
   13cae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
   13cb2:	b00b      	add	sp, #44	; 0x2c
   13cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_mesh_rx_reset();
   13cb8:	f7fb fdb2 	bl	f820 <bt_mesh_rx_reset>
	k_delayed_work_cancel(&lpn->timer);
   13cbc:	4828      	ldr	r0, [pc, #160]	; (13d60 <clear_friendship+0x140>)
	Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   13cbe:	4f29      	ldr	r7, [pc, #164]	; (13d64 <clear_friendship+0x144>)
		lpn->old_friend = BT_MESH_ADDR_UNASSIGNED;
   13cc0:	4d29      	ldr	r5, [pc, #164]	; (13d68 <clear_friendship+0x148>)
	Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   13cc2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 13d7c <clear_friendship+0x15c>
	k_delayed_work_cancel(&lpn->timer);
   13cc6:	f00e fbbf 	bl	22448 <k_delayed_work_cancel>
	if (lpn->clear_success) {
   13cca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   13cce:	069b      	lsls	r3, r3, #26
		lpn->old_friend = lpn->frnd;
   13cd0:	bf54      	ite	pl
   13cd2:	8ca3      	ldrhpl	r3, [r4, #36]	; 0x24
		lpn->old_friend = BT_MESH_ADDR_UNASSIGNED;
   13cd4:	2300      	movmi	r3, #0
   13cd6:	8663      	strh	r3, [r4, #50]	; 0x32
   13cd8:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   13cda:	42bd      	cmp	r5, r7
   13cdc:	d908      	bls.n	13cf0 <clear_friendship+0xd0>
   13cde:	4641      	mov	r1, r8
   13ce0:	4822      	ldr	r0, [pc, #136]	; (13d6c <clear_friendship+0x14c>)
   13ce2:	22e0      	movs	r2, #224	; 0xe0
   13ce4:	f010 faaa 	bl	2423c <printk>
   13ce8:	21e0      	movs	r1, #224	; 0xe0
   13cea:	4640      	mov	r0, r8
   13cec:	f010 fd58 	bl	247a0 <assert_post_action>
   13cf0:	454d      	cmp	r5, r9
   13cf2:	d31e      	bcc.n	13d32 <clear_friendship+0x112>
	lpn->disable = 0U;
   13cf4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	group_zero(lpn->added);
   13cf6:	481e      	ldr	r0, [pc, #120]	; (13d70 <clear_friendship+0x150>)
	lpn->disable = 0U;
   13cf8:	f003 03c3 	and.w	r3, r3, #195	; 0xc3
	lpn->sent_req = 0U;
   13cfc:	2500      	movs	r5, #0
	lpn->disable = 0U;
   13cfe:	85a3      	strh	r3, [r4, #44]	; 0x2c
	lpn->sent_req = 0U;
   13d00:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
	lpn->frnd = BT_MESH_ADDR_UNASSIGNED;
   13d04:	6265      	str	r5, [r4, #36]	; 0x24
	lpn->sub = NULL;
   13d06:	67a5      	str	r5, [r4, #120]	; 0x78
	group_zero(lpn->added);
   13d08:	f014 fc64 	bl	285d4 <group_zero>
	group_zero(lpn->pending);
   13d0c:	4819      	ldr	r0, [pc, #100]	; (13d74 <clear_friendship+0x154>)
   13d0e:	f014 fc61 	bl	285d4 <group_zero>
	group_zero(lpn->to_remove);
   13d12:	4819      	ldr	r0, [pc, #100]	; (13d78 <clear_friendship+0x158>)
   13d14:	f014 fc5e 	bl	285d4 <group_zero>
	lpn->groups_changed = 1U;
   13d18:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_LOW_POWER);
   13d1c:	2008      	movs	r0, #8
	lpn->groups_changed = 1U;
   13d1e:	f043 0301 	orr.w	r3, r3, #1
   13d22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	bt_mesh_hb_feature_changed(BT_MESH_FEAT_LOW_POWER);
   13d26:	f7fc fd7f 	bl	10828 <bt_mesh_hb_feature_changed>
	if (disable) {
   13d2a:	b15e      	cbz	r6, 13d44 <clear_friendship+0x124>
	bt_mesh.lpn.state = state;
   13d2c:	f884 5020 	strb.w	r5, [r4, #32]
		return;
   13d30:	e7bf      	b.n	13cb2 <clear_friendship+0x92>
		if (cb->terminated && lpn->frnd != BT_MESH_ADDR_UNASSIGNED) {
   13d32:	686b      	ldr	r3, [r5, #4]
   13d34:	b123      	cbz	r3, 13d40 <clear_friendship+0x120>
   13d36:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   13d38:	b111      	cbz	r1, 13d40 <clear_friendship+0x120>
			cb->terminated(lpn->sub->net_idx, lpn->frnd);
   13d3a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   13d3c:	8b90      	ldrh	r0, [r2, #28]
   13d3e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   13d40:	350c      	adds	r5, #12
   13d42:	e7ca      	b.n	13cda <clear_friendship+0xba>
	bt_mesh.lpn.state = state;
   13d44:	2303      	movs	r3, #3
   13d46:	f884 3020 	strb.w	r3, [r4, #32]
	k_delayed_work_submit(&lpn->timer, FRIEND_REQ_RETRY_TIMEOUT);
   13d4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   13d4e:	2300      	movs	r3, #0
   13d50:	4803      	ldr	r0, [pc, #12]	; (13d60 <clear_friendship+0x140>)
   13d52:	f7ff fe7d 	bl	13a50 <k_delayed_work_submit>
   13d56:	e7ac      	b.n	13cb2 <clear_friendship+0x92>
   13d58:	200013a8 	.word	0x200013a8
   13d5c:	0002b4e0 	.word	0x0002b4e0
   13d60:	200013e0 	.word	0x200013e0
   13d64:	0002a768 	.word	0x0002a768
   13d68:	0002a768 	.word	0x0002a768
   13d6c:	0002bced 	.word	0x0002bced
   13d70:	20001468 	.word	0x20001468
   13d74:	2000146c 	.word	0x2000146c
   13d78:	20001470 	.word	0x20001470
   13d7c:	0002fe7e 	.word	0x0002fe7e

00013d80 <friend_clear_sent>:
{
   13d80:	b510      	push	{r4, lr}
	lpn->req_attempts++;
   13d82:	4c12      	ldr	r4, [pc, #72]	; (13dcc <friend_clear_sent+0x4c>)
   13d84:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   13d88:	3301      	adds	r3, #1
   13d8a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err) {
   13d8e:	4602      	mov	r2, r0
   13d90:	b178      	cbz	r0, 13db2 <friend_clear_sent+0x32>
		BT_ERR("Sending Friend Request failed (err %d)", err);
   13d92:	2145      	movs	r1, #69	; 0x45
   13d94:	480e      	ldr	r0, [pc, #56]	; (13dd0 <friend_clear_sent+0x50>)
   13d96:	f010 fa51 	bl	2423c <printk>
		clear_friendship(false, lpn->disable);
   13d9a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
	bt_mesh.lpn.state = state;
   13d9e:	2303      	movs	r3, #3
   13da0:	f884 3020 	strb.w	r3, [r4, #32]
		clear_friendship(false, lpn->disable);
   13da4:	f3c1 0180 	ubfx	r1, r1, #2, #1
   13da8:	2000      	movs	r0, #0
}
   13daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clear_friendship(false, lpn->disable);
   13dae:	f7ff bf37 	b.w	13c20 <clear_friendship>
	bt_mesh.lpn.state = state;
   13db2:	2301      	movs	r3, #1
   13db4:	f884 3020 	strb.w	r3, [r4, #32]
	k_delayed_work_submit(&lpn->timer, K_MSEC(FRIEND_REQ_TIMEOUT));
   13db8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   13dbc:	f648 42cd 	movw	r2, #36045	; 0x8ccd
   13dc0:	2300      	movs	r3, #0
}
   13dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_submit(&lpn->timer, K_MSEC(FRIEND_REQ_TIMEOUT));
   13dc6:	f7ff be43 	b.w	13a50 <k_delayed_work_submit>
   13dca:	bf00      	nop
   13dcc:	200013a8 	.word	0x200013a8
   13dd0:	0002fead 	.word	0x0002fead

00013dd4 <subnet_evt>:
	return send_friend_poll();
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	switch (evt) {
   13dd4:	2901      	cmp	r1, #1
{
   13dd6:	460b      	mov	r3, r1
	switch (evt) {
   13dd8:	d002      	beq.n	13de0 <subnet_evt+0xc>
   13dda:	2902      	cmp	r1, #2
   13ddc:	d008      	beq.n	13df0 <subnet_evt+0x1c>
   13dde:	4770      	bx	lr
	case BT_MESH_KEY_DELETED:
		if (sub == bt_mesh.lpn.sub) {
   13de0:	4a06      	ldr	r2, [pc, #24]	; (13dfc <subnet_evt+0x28>)
   13de2:	6f92      	ldr	r2, [r2, #120]	; 0x78
   13de4:	4282      	cmp	r2, r0
   13de6:	d108      	bne.n	13dfa <subnet_evt+0x26>
			BT_DBG("NetKey deleted");
			clear_friendship(true, false);
   13de8:	2100      	movs	r1, #0
   13dea:	4618      	mov	r0, r3
   13dec:	f7ff bf18 	b.w	13c20 <clear_friendship>
		}
		break;
	case BT_MESH_KEY_UPDATED:
		BT_DBG("NetKey updated");
		friend_cred_create(&bt_mesh.lpn.cred[1], sub->keys[1].net);
   13df0:	f100 0177 	add.w	r1, r0, #119	; 0x77
   13df4:	4802      	ldr	r0, [pc, #8]	; (13e00 <subnet_evt+0x2c>)
   13df6:	f7ff be31 	b.w	13a5c <friend_cred_create>
		break;
	default:
		break;
	}
}
   13dfa:	4770      	bx	lr
   13dfc:	200013a8 	.word	0x200013a8
   13e00:	20001445 	.word	0x20001445

00013e04 <req_sent>:
{
   13e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (err) {
   13e08:	460a      	mov	r2, r1
{
   13e0a:	4607      	mov	r7, r0
	if (err) {
   13e0c:	2900      	cmp	r1, #0
   13e0e:	d03d      	beq.n	13e8c <req_sent+0x88>
		BT_ERR("Sending request failed (err %d)", err);
   13e10:	4821      	ldr	r0, [pc, #132]	; (13e98 <req_sent+0x94>)
   13e12:	2145      	movs	r1, #69	; 0x45
   13e14:	f010 fa12 	bl	2423c <printk>
		lpn->sent_req = 0U;
   13e18:	4820      	ldr	r0, [pc, #128]	; (13e9c <req_sent+0x98>)
   13e1a:	2300      	movs	r3, #0
   13e1c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
}
   13e20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		group_zero(lpn->pending);
   13e24:	30c4      	adds	r0, #196	; 0xc4
   13e26:	f014 bbd5 	b.w	285d4 <group_zero>
		if (cb->polled) {
   13e2a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   13e2e:	f1b8 0f00 	cmp.w	r8, #0
   13e32:	d009      	beq.n	13e48 <req_sent+0x44>
			cb->polled(lpn->sub->net_idx, lpn->frnd, !!(lpn->req_attempts));
   13e34:	4b19      	ldr	r3, [pc, #100]	; (13e9c <req_sent+0x98>)
   13e36:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   13e3a:	6f98      	ldr	r0, [r3, #120]	; 0x78
   13e3c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   13e3e:	8b80      	ldrh	r0, [r0, #28]
   13e40:	3200      	adds	r2, #0
   13e42:	bf18      	it	ne
   13e44:	2201      	movne	r2, #1
   13e46:	47c0      	blx	r8
	Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   13e48:	340c      	adds	r4, #12
   13e4a:	42ac      	cmp	r4, r5
   13e4c:	d90a      	bls.n	13e64 <req_sent+0x60>
   13e4e:	4631      	mov	r1, r6
   13e50:	4813      	ldr	r0, [pc, #76]	; (13ea0 <req_sent+0x9c>)
   13e52:	f240 1257 	movw	r2, #343	; 0x157
   13e56:	f010 f9f1 	bl	2423c <printk>
   13e5a:	f240 1157 	movw	r1, #343	; 0x157
   13e5e:	4630      	mov	r0, r6
   13e60:	f010 fc9e 	bl	247a0 <assert_post_action>
   13e64:	454c      	cmp	r4, r9
   13e66:	d3e0      	bcc.n	13e2a <req_sent+0x26>
	lpn->req_attempts++;
   13e68:	480c      	ldr	r0, [pc, #48]	; (13e9c <req_sent+0x98>)
   13e6a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
	lpn->adv_duration = duration;
   13e6e:	8687      	strh	r7, [r0, #52]	; 0x34
	lpn->req_attempts++;
   13e70:	3301      	adds	r3, #1
   13e72:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	bt_mesh.lpn.state = state;
   13e76:	2307      	movs	r3, #7
   13e78:	f880 3020 	strb.w	r3, [r0, #32]
		k_delayed_work_submit(&lpn->timer,
   13e7c:	f640 3286 	movw	r2, #2950	; 0xb86
   13e80:	2300      	movs	r3, #0
   13e82:	3038      	adds	r0, #56	; 0x38
}
   13e84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		k_delayed_work_submit(&lpn->timer,
   13e88:	f7ff bde2 	b.w	13a50 <k_delayed_work_submit>
	Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   13e8c:	4d05      	ldr	r5, [pc, #20]	; (13ea4 <req_sent+0xa0>)
   13e8e:	4c06      	ldr	r4, [pc, #24]	; (13ea8 <req_sent+0xa4>)
   13e90:	4e06      	ldr	r6, [pc, #24]	; (13eac <req_sent+0xa8>)
   13e92:	46a9      	mov	r9, r5
   13e94:	e7d9      	b.n	13e4a <req_sent+0x46>
   13e96:	bf00      	nop
   13e98:	0002ffb2 	.word	0x0002ffb2
   13e9c:	200013a8 	.word	0x200013a8
   13ea0:	0002bced 	.word	0x0002bced
   13ea4:	0002a768 	.word	0x0002a768
   13ea8:	0002a768 	.word	0x0002a768
   13eac:	0002fe7e 	.word	0x0002fe7e

00013eb0 <sub_update>:
{
   13eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eb4:	4e4a      	ldr	r6, [pc, #296]	; (13fe0 <sub_update+0x130>)
   13eb6:	f3bf 8f5b 	dmb	ish
   13eba:	4634      	mov	r4, r6
   13ebc:	b08f      	sub	sp, #60	; 0x3c
   13ebe:	f854 39c0 	ldr.w	r3, [r4], #-192
   13ec2:	9302      	str	r3, [sp, #8]
   13ec4:	f3bf 8f5b 	dmb	ish
		.net_idx     = lpn->sub->net_idx,
   13ec8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	struct bt_mesh_net_tx tx = {
   13eca:	930b      	str	r3, [sp, #44]	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   13ecc:	8b9a      	ldrh	r2, [r3, #28]
   13ece:	f8ad 2020 	strh.w	r2, [sp, #32]
   13ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13ed6:	2500      	movs	r5, #0
	struct bt_mesh_net_tx tx = {
   13ed8:	ab08      	add	r3, sp, #32
	struct bt_mesh_msg_ctx ctx = {
   13eda:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
   13ede:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	struct bt_mesh_net_tx tx = {
   13ee0:	930c      	str	r3, [sp, #48]	; 0x30
{
   13ee2:	4607      	mov	r7, r0
	struct bt_mesh_msg_ctx ctx = {
   13ee4:	f8cd 5026 	str.w	r5, [sp, #38]	; 0x26
   13ee8:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
   13eec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	struct bt_mesh_net_tx tx = {
   13ef0:	950d      	str	r5, [sp, #52]	; 0x34
		.src = bt_mesh_primary_addr(),
   13ef2:	f7fd f98f 	bl	11214 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   13ef6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   13efa:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
   13efe:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
   13f02:	f443 7384 	orr.w	r3, r3, #264	; 0x108
   13f06:	f043 0301 	orr.w	r3, r3, #1
   13f0a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	if (lpn->sent_req) {
   13f0e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   13f12:	2b00      	cmp	r3, #0
   13f14:	d162      	bne.n	13fdc <sub_update+0x12c>
   13f16:	f104 0868 	add.w	r8, r4, #104	; 0x68
	for (i = 0, g = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   13f1a:	4699      	mov	r9, r3
   13f1c:	461d      	mov	r5, r3
			if (!atomic_test_bit(lpn->to_remove, i)) {
   13f1e:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
		atomic_set_bit(lpn->pending, i);
   13f22:	f104 0bc4 	add.w	fp, r4, #196	; 0xc4
		if (lpn->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   13f26:	f838 2b02 	ldrh.w	r2, [r8], #2
   13f2a:	b30a      	cbz	r2, 13f70 <sub_update+0xc0>
		if (op == TRANS_CTL_OP_FRIEND_SUB_ADD) {
   13f2c:	2f07      	cmp	r7, #7
			if (atomic_test_bit(lpn->added, i)) {
   13f2e:	4629      	mov	r1, r5
		if (op == TRANS_CTL_OP_FRIEND_SUB_ADD) {
   13f30:	d119      	bne.n	13f66 <sub_update+0xb6>
			if (atomic_test_bit(lpn->added, i)) {
   13f32:	4630      	mov	r0, r6
   13f34:	f014 fb36 	bl	285a4 <atomic_test_bit>
   13f38:	b9d0      	cbnz	r0, 13f70 <sub_update+0xc0>
	return popcount(atomic_get(target));
   13f3a:	9802      	ldr	r0, [sp, #8]
   13f3c:	f7ed ff9c 	bl	1e78 <__popcountsi2>
		if (added_count + g >= lpn->queue_size) {
   13f40:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   13f44:	4448      	add	r0, r9
   13f46:	4290      	cmp	r0, r2
   13f48:	d316      	bcc.n	13f78 <sub_update+0xc8>
			BT_WARN("Friend Queue Size exceeded");
   13f4a:	2157      	movs	r1, #87	; 0x57
   13f4c:	4825      	ldr	r0, [pc, #148]	; (13fe4 <sub_update+0x134>)
   13f4e:	f010 f975 	bl	2423c <printk>
	if (g == 0) {
   13f52:	f1b9 0f00 	cmp.w	r9, #0
   13f56:	d124      	bne.n	13fa2 <sub_update+0xf2>
		group_zero(lpn->pending);
   13f58:	4823      	ldr	r0, [pc, #140]	; (13fe8 <sub_update+0x138>)
   13f5a:	f014 fb3b 	bl	285d4 <group_zero>
		return false;
   13f5e:	2000      	movs	r0, #0
}
   13f60:	b00f      	add	sp, #60	; 0x3c
   13f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!atomic_test_bit(lpn->to_remove, i)) {
   13f66:	4650      	mov	r0, sl
   13f68:	f014 fb1c 	bl	285a4 <atomic_test_bit>
   13f6c:	2800      	cmp	r0, #0
   13f6e:	d1e4      	bne.n	13f3a <sub_update+0x8a>
	for (i = 0, g = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   13f70:	3501      	adds	r5, #1
   13f72:	2d08      	cmp	r5, #8
   13f74:	d1d7      	bne.n	13f26 <sub_update+0x76>
   13f76:	e7ec      	b.n	13f52 <sub_update+0xa2>
		req.addr_list[g++] = sys_cpu_to_be16(lpn->groups[i]);
   13f78:	f838 0c02 	ldrh.w	r0, [r8, #-2]
   13f7c:	ab0e      	add	r3, sp, #56	; 0x38
   13f7e:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   13f82:	0201      	lsls	r1, r0, #8
   13f84:	f109 0201 	add.w	r2, r9, #1
   13f88:	ea41 2110 	orr.w	r1, r1, r0, lsr #8
   13f8c:	9203      	str	r2, [sp, #12]
		atomic_set_bit(lpn->pending, i);
   13f8e:	4658      	mov	r0, fp
		req.addr_list[g++] = sys_cpu_to_be16(lpn->groups[i]);
   13f90:	f823 1c23 	strh.w	r1, [r3, #-35]
		atomic_set_bit(lpn->pending, i);
   13f94:	4629      	mov	r1, r5
   13f96:	f014 fb0e 	bl	285b6 <atomic_set_bit>
		if (g == ARRAY_SIZE(req.addr_list)) {
   13f9a:	9a03      	ldr	r2, [sp, #12]
   13f9c:	2a05      	cmp	r2, #5
   13f9e:	4691      	mov	r9, r2
   13fa0:	d1e6      	bne.n	13f70 <sub_update+0xc0>
	req.xact = lpn->xact_next++;
   13fa2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   13fa6:	f88d 2014 	strb.w	r2, [sp, #20]
   13faa:	1c51      	adds	r1, r2, #1
	if (bt_mesh_ctl_send(&tx, op, &req, 1 + g * 2,
   13fac:	2200      	movs	r2, #0
	req.xact = lpn->xact_next++;
   13fae:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
	if (bt_mesh_ctl_send(&tx, op, &req, 1 + g * 2,
   13fb2:	ea4f 0349 	mov.w	r3, r9, lsl #1
   13fb6:	9201      	str	r2, [sp, #4]
   13fb8:	4a0c      	ldr	r2, [pc, #48]	; (13fec <sub_update+0x13c>)
   13fba:	9200      	str	r2, [sp, #0]
   13fbc:	3301      	adds	r3, #1
   13fbe:	aa05      	add	r2, sp, #20
   13fc0:	4639      	mov	r1, r7
   13fc2:	a80b      	add	r0, sp, #44	; 0x2c
   13fc4:	f7fb fb3e 	bl	f644 <bt_mesh_ctl_send>
   13fc8:	2800      	cmp	r0, #0
   13fca:	dbc5      	blt.n	13f58 <sub_update+0xa8>
	lpn->xact_pending = req.xact;
   13fcc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13fd0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	lpn->sent_req = op;
   13fd4:	f884 7023 	strb.w	r7, [r4, #35]	; 0x23
	return true;
   13fd8:	2001      	movs	r0, #1
   13fda:	e7c1      	b.n	13f60 <sub_update+0xb0>
		return false;
   13fdc:	4628      	mov	r0, r5
   13fde:	e7bf      	b.n	13f60 <sub_update+0xb0>
   13fe0:	20001468 	.word	0x20001468
   13fe4:	00030009 	.word	0x00030009
   13fe8:	2000146c 	.word	0x2000146c
   13fec:	0002b4f0 	.word	0x0002b4f0

00013ff0 <lpn_timeout>:
{
   13ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (lpn->state) {
   13ff4:	4c6a      	ldr	r4, [pc, #424]	; (141a0 <lpn_timeout+0x1b0>)
   13ff6:	f894 3020 	ldrb.w	r3, [r4, #32]
   13ffa:	2b08      	cmp	r3, #8
   13ffc:	f200 80c3 	bhi.w	14186 <lpn_timeout+0x196>
   14000:	e8df f003 	tbb	[pc, r3]
   14004:	130e0532 	.word	0x130e0532
   14008:	70483417 	.word	0x70483417
   1400c:	8c          	.byte	0x8c
   1400d:	00          	.byte	0x00
		clear_friendship(false, bt_mesh.lpn.disable);
   1400e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   14012:	f3c1 0180 	ubfx	r1, r1, #2, #1
   14016:	2000      	movs	r0, #0
}
   14018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		clear_friendship(false, bt_mesh.lpn.disable);
   1401c:	f7ff be00 	b.w	13c20 <clear_friendship>
	bt_mesh.lpn.state = state;
   14020:	2303      	movs	r3, #3
   14022:	f884 3020 	strb.w	r3, [r4, #32]
			bt_mesh_scan_disable();
   14026:	f7f9 f8d5 	bl	d1d4 <bt_mesh_scan_disable>
}
   1402a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		send_friend_req(lpn);
   1402e:	f7ff bd61 	b.w	13af4 <send_friend_req.constprop.9>
		bt_mesh_scan_enable();
   14032:	f7f9 f8ad 	bl	d190 <bt_mesh_scan_enable>
		k_delayed_work_submit(&lpn->timer, K_MSEC(lpn->adv_duration +
   14036:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   14038:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1403c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   14040:	f240 36e7 	movw	r6, #999	; 0x3e7
   14044:	2700      	movs	r7, #0
   14046:	fbe0 6701 	umlal	r6, r7, r0, r1
   1404a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1404e:	2300      	movs	r3, #0
   14050:	4630      	mov	r0, r6
   14052:	4639      	mov	r1, r7
   14054:	f7ed fef8 	bl	1e48 <__aeabi_uldivmod>
   14058:	4602      	mov	r2, r0
   1405a:	460b      	mov	r3, r1
   1405c:	4851      	ldr	r0, [pc, #324]	; (141a4 <lpn_timeout+0x1b4>)
   1405e:	f7ff fcf7 	bl	13a50 <k_delayed_work_submit>
	bt_mesh.lpn.state = state;
   14062:	2305      	movs	r3, #5
   14064:	f884 3020 	strb.w	r3, [r4, #32]
}
   14068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No acceptable Friend Offers received");
   1406c:	2157      	movs	r1, #87	; 0x57
   1406e:	484e      	ldr	r0, [pc, #312]	; (141a8 <lpn_timeout+0x1b8>)
   14070:	f010 f8e4 	bl	2423c <printk>
			bt_mesh_scan_disable();
   14074:	f7f9 f8ae 	bl	d1d4 <bt_mesh_scan_disable>
	bt_mesh.lpn.state = state;
   14078:	2303      	movs	r3, #3
   1407a:	f884 3020 	strb.w	r3, [r4, #32]
		lpn->sent_req = 0U;
   1407e:	2300      	movs	r3, #0
   14080:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
		k_delayed_work_submit(&lpn->timer, FRIEND_REQ_RETRY_TIMEOUT);
   14084:	f44f 2280 	mov.w	r2, #262144	; 0x40000
		k_delayed_work_submit(&lpn->timer, K_MSEC(POLL_RETRY_TIMEOUT));
   14088:	2300      	movs	r3, #0
   1408a:	4846      	ldr	r0, [pc, #280]	; (141a4 <lpn_timeout+0x1b4>)
}
   1408c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_delayed_work_submit(&lpn->timer, K_MSEC(POLL_RETRY_TIMEOUT));
   14090:	f7ff bcde 	b.w	13a50 <k_delayed_work_submit>
		if (lpn->req_attempts < REQ_ATTEMPTS(lpn)) {
   14094:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
   14098:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   1409a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   1409e:	440b      	add	r3, r1
   140a0:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
   140a4:	f247 5330 	movw	r3, #30000	; 0x7530
   140a8:	fbb3 f3f1 	udiv	r3, r3, r1
   140ac:	2b06      	cmp	r3, #6
   140ae:	bfa8      	it	ge
   140b0:	2306      	movge	r3, #6
   140b2:	429a      	cmp	r2, r3
   140b4:	da0e      	bge.n	140d4 <lpn_timeout+0xe4>
			uint8_t req = lpn->sent_req;
   140b6:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
			lpn->sent_req = 0U;
   140ba:	2300      	movs	r3, #0
			if (!req || req == TRANS_CTL_OP_FRIEND_POLL) {
   140bc:	2801      	cmp	r0, #1
			lpn->sent_req = 0U;
   140be:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
			if (!req || req == TRANS_CTL_OP_FRIEND_POLL) {
   140c2:	d803      	bhi.n	140cc <lpn_timeout+0xdc>
}
   140c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				send_friend_poll();
   140c8:	f7ff bc72 	b.w	139b0 <send_friend_poll>
}
   140cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				sub_update(req);
   140d0:	f7ff beee 	b.w	13eb0 <sub_update>
		BT_ERR("No response from Friend after %u retries",
   140d4:	2145      	movs	r1, #69	; 0x45
   140d6:	4835      	ldr	r0, [pc, #212]	; (141ac <lpn_timeout+0x1bc>)
   140d8:	f010 f8b0 	bl	2423c <printk>
		lpn->req_attempts = 0U;
   140dc:	2100      	movs	r1, #0
   140de:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
		clear_friendship(false, false);
   140e2:	e798      	b.n	14016 <lpn_timeout+0x26>
				      K_MSEC(lpn->adv_duration + SCAN_LATENCY +
   140e4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   140e8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   140ea:	4419      	add	r1, r3
   140ec:	310a      	adds	r1, #10
   140ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   140f2:	f240 36e7 	movw	r6, #999	; 0x3e7
   140f6:	2700      	movs	r7, #0
   140f8:	fbc0 6701 	smlal	r6, r7, r0, r1
   140fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14100:	2300      	movs	r3, #0
   14102:	4630      	mov	r0, r6
   14104:	4639      	mov	r1, r7
   14106:	f7ed fe9f 	bl	1e48 <__aeabi_uldivmod>
		k_delayed_work_submit(&lpn->timer,
   1410a:	4602      	mov	r2, r0
   1410c:	460b      	mov	r3, r1
   1410e:	4825      	ldr	r0, [pc, #148]	; (141a4 <lpn_timeout+0x1b4>)
   14110:	f7ff fc9e 	bl	13a50 <k_delayed_work_submit>
		bt_mesh_scan_enable();
   14114:	f7f9 f83c 	bl	d190 <bt_mesh_scan_enable>
	bt_mesh.lpn.state = state;
   14118:	2308      	movs	r3, #8
   1411a:	e7a3      	b.n	14064 <lpn_timeout+0x74>
	if (lpn->established) {
   1411c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   14120:	f013 0510 	ands.w	r5, r3, #16
   14124:	d00b      	beq.n	1413e <lpn_timeout+0x14e>
		BT_WARN("No response from Friend during ReceiveWindow");
   14126:	2157      	movs	r1, #87	; 0x57
   14128:	4821      	ldr	r0, [pc, #132]	; (141b0 <lpn_timeout+0x1c0>)
   1412a:	f010 f887 	bl	2423c <printk>
		bt_mesh_scan_disable();
   1412e:	f7f9 f851 	bl	d1d4 <bt_mesh_scan_disable>
	bt_mesh.lpn.state = state;
   14132:	2306      	movs	r3, #6
   14134:	f884 3020 	strb.w	r3, [r4, #32]
		k_delayed_work_submit(&lpn->timer, K_MSEC(POLL_RETRY_TIMEOUT));
   14138:	f640 42cd 	movw	r2, #3277	; 0xccd
   1413c:	e7a4      	b.n	14088 <lpn_timeout+0x98>
			bt_mesh_scan_disable();
   1413e:	f7f9 f849 	bl	d1d4 <bt_mesh_scan_disable>
		if (lpn->req_attempts < REQ_ATTEMPTS(lpn)) {
   14142:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   14146:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   14148:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
   1414c:	4413      	add	r3, r2
   1414e:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
   14152:	f247 5330 	movw	r3, #30000	; 0x7530
   14156:	fbb3 f3f2 	udiv	r3, r3, r2
   1415a:	2b06      	cmp	r3, #6
   1415c:	bfa8      	it	ge
   1415e:	2306      	movge	r3, #6
   14160:	4299      	cmp	r1, r3
   14162:	db05      	blt.n	14170 <lpn_timeout+0x180>
		BT_ERR("Timed out waiting for first Friend Update");
   14164:	2145      	movs	r1, #69	; 0x45
   14166:	4813      	ldr	r0, [pc, #76]	; (141b4 <lpn_timeout+0x1c4>)
   14168:	f010 f868 	bl	2423c <printk>
		clear_friendship(false, false);
   1416c:	2100      	movs	r1, #0
   1416e:	e752      	b.n	14016 <lpn_timeout+0x26>
			BT_WARN("Retrying first Friend Poll");
   14170:	2157      	movs	r1, #87	; 0x57
   14172:	4811      	ldr	r0, [pc, #68]	; (141b8 <lpn_timeout+0x1c8>)
   14174:	f010 f862 	bl	2423c <printk>
			lpn->sent_req = 0U;
   14178:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
			if (send_friend_poll() == 0) {
   1417c:	f7ff fc18 	bl	139b0 <send_friend_poll>
   14180:	2800      	cmp	r0, #0
   14182:	d1ef      	bne.n	14164 <lpn_timeout+0x174>
   14184:	e770      	b.n	14068 <lpn_timeout+0x78>
		__ASSERT(0, "Unhandled LPN state");
   14186:	490d      	ldr	r1, [pc, #52]	; (141bc <lpn_timeout+0x1cc>)
   14188:	480d      	ldr	r0, [pc, #52]	; (141c0 <lpn_timeout+0x1d0>)
   1418a:	f240 3242 	movw	r2, #834	; 0x342
   1418e:	f010 f855 	bl	2423c <printk>
   14192:	f240 3142 	movw	r1, #834	; 0x342
   14196:	4809      	ldr	r0, [pc, #36]	; (141bc <lpn_timeout+0x1cc>)
}
   14198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT(0, "Unhandled LPN state");
   1419c:	f010 bb00 	b.w	247a0 <assert_post_action>
   141a0:	200013a8 	.word	0x200013a8
   141a4:	200013e0 	.word	0x200013e0
   141a8:	0002fed9 	.word	0x0002fed9
   141ac:	0002ff03 	.word	0x0002ff03
   141b0:	0002ff31 	.word	0x0002ff31
   141b4:	0002ff63 	.word	0x0002ff63
   141b8:	0002ff92 	.word	0x0002ff92
   141bc:	0002fe7e 	.word	0x0002fe7e
   141c0:	0002bced 	.word	0x0002bced

000141c4 <bt_mesh_lpn_disable>:
	if (bt_mesh.lpn.state == BT_MESH_LPN_DISABLED) {
   141c4:	4b03      	ldr	r3, [pc, #12]	; (141d4 <bt_mesh_lpn_disable+0x10>)
   141c6:	f893 3020 	ldrb.w	r3, [r3, #32]
   141ca:	b113      	cbz	r3, 141d2 <bt_mesh_lpn_disable+0xe>
	clear_friendship(force, true);
   141cc:	2101      	movs	r1, #1
   141ce:	f7ff bd27 	b.w	13c20 <clear_friendship>
}
   141d2:	4770      	bx	lr
   141d4:	200013a8 	.word	0x200013a8

000141d8 <bt_mesh_lpn_msg_received>:
	if (lpn->state == BT_MESH_LPN_TIMER) {
   141d8:	480e      	ldr	r0, [pc, #56]	; (14214 <bt_mesh_lpn_msg_received+0x3c>)
   141da:	f890 3020 	ldrb.w	r3, [r0, #32]
   141de:	2b02      	cmp	r3, #2
{
   141e0:	b510      	push	{r4, lr}
	if (lpn->state == BT_MESH_LPN_TIMER) {
   141e2:	d107      	bne.n	141f4 <bt_mesh_lpn_msg_received+0x1c>
		k_delayed_work_submit(&lpn->timer, K_MSEC(LPN_AUTO_TIMEOUT));
   141e4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   141e8:	2300      	movs	r3, #0
   141ea:	3038      	adds	r0, #56	; 0x38
}
   141ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&lpn->timer, K_MSEC(LPN_AUTO_TIMEOUT));
   141f0:	f7ff bc2e 	b.w	13a50 <k_delayed_work_submit>
	if (lpn->sent_req != TRANS_CTL_OP_FRIEND_POLL) {
   141f4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   141f8:	2b01      	cmp	r3, #1
   141fa:	d005      	beq.n	14208 <bt_mesh_lpn_msg_received+0x30>
		BT_WARN("Unexpected message withouth a preceding Poll");
   141fc:	2157      	movs	r1, #87	; 0x57
   141fe:	4806      	ldr	r0, [pc, #24]	; (14218 <bt_mesh_lpn_msg_received+0x40>)
}
   14200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unexpected message withouth a preceding Poll");
   14204:	f010 b81a 	b.w	2423c <printk>
	friend_response_received(lpn);
   14208:	f7ff fc56 	bl	13ab8 <friend_response_received.constprop.8>
}
   1420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_friend_poll();
   14210:	f7ff bbce 	b.w	139b0 <send_friend_poll>
   14214:	200013a8 	.word	0x200013a8
   14218:	0002fe4c 	.word	0x0002fe4c

0001421c <bt_mesh_lpn_friend_offer>:
{
   1421c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*msg)) {
   1421e:	888b      	ldrh	r3, [r1, #4]
   14220:	2b05      	cmp	r3, #5
   14222:	d806      	bhi.n	14232 <bt_mesh_lpn_friend_offer+0x16>
		BT_WARN("Too short Friend Offer");
   14224:	4826      	ldr	r0, [pc, #152]	; (142c0 <bt_mesh_lpn_friend_offer+0xa4>)
   14226:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Prohibited ReceiveWindow value");
   14228:	f010 f808 	bl	2423c <printk>
		return -EINVAL;
   1422c:	f06f 0015 	mvn.w	r0, #21
   14230:	e009      	b.n	14246 <bt_mesh_lpn_friend_offer+0x2a>
	if (lpn->state != BT_MESH_LPN_WAIT_OFFER) {
   14232:	4c24      	ldr	r4, [pc, #144]	; (142c4 <bt_mesh_lpn_friend_offer+0xa8>)
   14234:	f894 3020 	ldrb.w	r3, [r4, #32]
   14238:	2b05      	cmp	r3, #5
   1423a:	d005      	beq.n	14248 <bt_mesh_lpn_friend_offer+0x2c>
		BT_WARN("Ignoring unexpected Friend Offer");
   1423c:	4822      	ldr	r0, [pc, #136]	; (142c8 <bt_mesh_lpn_friend_offer+0xac>)
   1423e:	2157      	movs	r1, #87	; 0x57
   14240:	f00f fffc 	bl	2423c <printk>
		return 0;
   14244:	2000      	movs	r0, #0
}
   14246:	bd38      	pop	{r3, r4, r5, pc}
	struct bt_mesh_ctl_friend_offer *msg = (void *)buf->data;
   14248:	680d      	ldr	r5, [r1, #0]
	if (!msg->recv_win) {
   1424a:	782b      	ldrb	r3, [r5, #0]
   1424c:	b913      	cbnz	r3, 14254 <bt_mesh_lpn_friend_offer+0x38>
		BT_WARN("Prohibited ReceiveWindow value");
   1424e:	2157      	movs	r1, #87	; 0x57
   14250:	481e      	ldr	r0, [pc, #120]	; (142cc <bt_mesh_lpn_friend_offer+0xb0>)
   14252:	e7e9      	b.n	14228 <bt_mesh_lpn_friend_offer+0xc>
	frnd_counter = sys_be16_to_cpu(msg->frnd_counter);
   14254:	88aa      	ldrh	r2, [r5, #4]
		if (!lpn->sub->keys[i].valid) {
   14256:	6fa1      	ldr	r1, [r4, #120]	; 0x78
	frnd_counter = sys_be16_to_cpu(msg->frnd_counter);
   14258:	0213      	lsls	r3, r2, #8
   1425a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
	lpn->frnd_counter = frnd_counter;
   1425e:	85e3      	strh	r3, [r4, #46]	; 0x2e
	lpn->frnd = rx->ctx.addr;
   14260:	8903      	ldrh	r3, [r0, #8]
   14262:	84a3      	strh	r3, [r4, #36]	; 0x24
		if (!lpn->sub->keys[i].valid) {
   14264:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   14268:	b9c3      	cbnz	r3, 1429c <bt_mesh_lpn_friend_offer+0x80>
   1426a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   1426c:	f891 3076 	ldrb.w	r3, [r1, #118]	; 0x76
   14270:	b9f3      	cbnz	r3, 142b0 <bt_mesh_lpn_friend_offer+0x94>
	k_delayed_work_cancel(&lpn->timer);
   14272:	4817      	ldr	r0, [pc, #92]	; (142d0 <bt_mesh_lpn_friend_offer+0xb4>)
   14274:	f00e f8e8 	bl	22448 <k_delayed_work_cancel>
	lpn->recv_win = msg->recv_win;
   14278:	782b      	ldrb	r3, [r5, #0]
   1427a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	lpn->queue_size = msg->queue_size;
   1427e:	786b      	ldrb	r3, [r5, #1]
   14280:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	err = send_friend_poll();
   14284:	f7ff fb94 	bl	139b0 <send_friend_poll>
	if (err) {
   14288:	2800      	cmp	r0, #0
   1428a:	d0dc      	beq.n	14246 <bt_mesh_lpn_friend_offer+0x2a>
		lpn->sub = NULL;
   1428c:	2300      	movs	r3, #0
   1428e:	67a3      	str	r3, [r4, #120]	; 0x78
		lpn->frnd = BT_MESH_ADDR_UNASSIGNED;
   14290:	84a3      	strh	r3, [r4, #36]	; 0x24
		lpn->recv_win = 0U;
   14292:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		lpn->queue_size = 0U;
   14296:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		return err;
   1429a:	e7d4      	b.n	14246 <bt_mesh_lpn_friend_offer+0x2a>
		err = friend_cred_create(&lpn->cred[i], lpn->sub->keys[i].net);
   1429c:	312d      	adds	r1, #45	; 0x2d
   1429e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   142a2:	f7ff fbdb 	bl	13a5c <friend_cred_create>
		if (err) {
   142a6:	2800      	cmp	r0, #0
   142a8:	d0df      	beq.n	1426a <bt_mesh_lpn_friend_offer+0x4e>
			lpn->frnd = BT_MESH_ADDR_UNASSIGNED;
   142aa:	2300      	movs	r3, #0
   142ac:	84a3      	strh	r3, [r4, #36]	; 0x24
			return err;
   142ae:	e7ca      	b.n	14246 <bt_mesh_lpn_friend_offer+0x2a>
		err = friend_cred_create(&lpn->cred[i], lpn->sub->keys[i].net);
   142b0:	3177      	adds	r1, #119	; 0x77
   142b2:	4808      	ldr	r0, [pc, #32]	; (142d4 <bt_mesh_lpn_friend_offer+0xb8>)
   142b4:	f7ff fbd2 	bl	13a5c <friend_cred_create>
		if (err) {
   142b8:	2800      	cmp	r0, #0
   142ba:	d0da      	beq.n	14272 <bt_mesh_lpn_friend_offer+0x56>
   142bc:	e7f5      	b.n	142aa <bt_mesh_lpn_friend_offer+0x8e>
   142be:	bf00      	nop
   142c0:	0002fc83 	.word	0x0002fc83
   142c4:	200013a8 	.word	0x200013a8
   142c8:	0002fc9f 	.word	0x0002fc9f
   142cc:	0002fcc5 	.word	0x0002fcc5
   142d0:	200013e0 	.word	0x200013e0
   142d4:	20001445 	.word	0x20001445

000142d8 <bt_mesh_lpn_friend_clear_cfm>:
	if (buf->len < sizeof(*msg)) {
   142d8:	888b      	ldrh	r3, [r1, #4]
   142da:	2b03      	cmp	r3, #3
{
   142dc:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*msg)) {
   142de:	d806      	bhi.n	142ee <bt_mesh_lpn_friend_clear_cfm+0x16>
		BT_WARN("Too short Friend Clear Confirm");
   142e0:	4819      	ldr	r0, [pc, #100]	; (14348 <bt_mesh_lpn_friend_clear_cfm+0x70>)
   142e2:	2157      	movs	r1, #87	; 0x57
   142e4:	f00f ffaa 	bl	2423c <printk>
		return -EINVAL;
   142e8:	f06f 0015 	mvn.w	r0, #21
}
   142ec:	bd70      	pop	{r4, r5, r6, pc}
	if (lpn->state != BT_MESH_LPN_CLEAR) {
   142ee:	4c17      	ldr	r4, [pc, #92]	; (1434c <bt_mesh_lpn_friend_clear_cfm+0x74>)
   142f0:	f894 3020 	ldrb.w	r3, [r4, #32]
   142f4:	2b01      	cmp	r3, #1
   142f6:	d005      	beq.n	14304 <bt_mesh_lpn_friend_clear_cfm+0x2c>
		BT_WARN("Ignoring unexpected Friend Clear Confirm");
   142f8:	4815      	ldr	r0, [pc, #84]	; (14350 <bt_mesh_lpn_friend_clear_cfm+0x78>)
   142fa:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Invalid parameters in Friend Clear Confirm");
   142fc:	f00f ff9e 	bl	2423c <printk>
	return 0;
   14300:	2000      	movs	r0, #0
   14302:	e7f3      	b.n	142ec <bt_mesh_lpn_friend_clear_cfm+0x14>
	struct bt_mesh_ctl_friend_clear_confirm *msg = (void *)buf->data;
   14304:	680b      	ldr	r3, [r1, #0]
	addr = sys_be16_to_cpu(msg->lpn_addr);
   14306:	881e      	ldrh	r6, [r3, #0]
	counter = sys_be16_to_cpu(msg->lpn_counter);
   14308:	885d      	ldrh	r5, [r3, #2]
	if (addr != bt_mesh_primary_addr() || counter != lpn->lpn_counter) {
   1430a:	f7fc ff83 	bl	11214 <bt_mesh_primary_addr>
	addr = sys_be16_to_cpu(msg->lpn_addr);
   1430e:	0232      	lsls	r2, r6, #8
   14310:	ea42 2216 	orr.w	r2, r2, r6, lsr #8
	if (addr != bt_mesh_primary_addr() || counter != lpn->lpn_counter) {
   14314:	b292      	uxth	r2, r2
   14316:	4282      	cmp	r2, r0
   14318:	d106      	bne.n	14328 <bt_mesh_lpn_friend_clear_cfm+0x50>
	counter = sys_be16_to_cpu(msg->lpn_counter);
   1431a:	022b      	lsls	r3, r5, #8
   1431c:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
	if (addr != bt_mesh_primary_addr() || counter != lpn->lpn_counter) {
   14320:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   14322:	b29b      	uxth	r3, r3
   14324:	429a      	cmp	r2, r3
   14326:	d002      	beq.n	1432e <bt_mesh_lpn_friend_clear_cfm+0x56>
		BT_WARN("Invalid parameters in Friend Clear Confirm");
   14328:	2157      	movs	r1, #87	; 0x57
   1432a:	480a      	ldr	r0, [pc, #40]	; (14354 <bt_mesh_lpn_friend_clear_cfm+0x7c>)
   1432c:	e7e6      	b.n	142fc <bt_mesh_lpn_friend_clear_cfm+0x24>
	lpn->clear_success = 1U;
   1432e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   14332:	f041 0120 	orr.w	r1, r1, #32
   14336:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	clear_friendship(false, lpn->disable);
   1433a:	2000      	movs	r0, #0
   1433c:	f3c1 0180 	ubfx	r1, r1, #2, #1
   14340:	f7ff fc6e 	bl	13c20 <clear_friendship>
   14344:	e7dc      	b.n	14300 <bt_mesh_lpn_friend_clear_cfm+0x28>
   14346:	bf00      	nop
   14348:	0002fc01 	.word	0x0002fc01
   1434c:	200013a8 	.word	0x200013a8
   14350:	0002fc25 	.word	0x0002fc25
   14354:	0002fc53 	.word	0x0002fc53

00014358 <bt_mesh_lpn_group_add>:
{
   14358:	b538      	push	{r3, r4, r5, lr}
   1435a:	491e      	ldr	r1, [pc, #120]	; (143d4 <bt_mesh_lpn_group_add+0x7c>)
	uint16_t *free_slot = NULL;
   1435c:	2300      	movs	r3, #0
	for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   1435e:	461a      	mov	r2, r3
		if (lpn->groups[i] == group) {
   14360:	460c      	mov	r4, r1
   14362:	f834 5b02 	ldrh.w	r5, [r4], #2
   14366:	42a8      	cmp	r0, r5
   14368:	d11b      	bne.n	143a2 <bt_mesh_lpn_group_add+0x4a>
	atomic_val_t mask = ATOMIC_MASK(bit);
   1436a:	2301      	movs	r3, #1
   1436c:	4093      	lsls	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1436e:	491a      	ldr	r1, [pc, #104]	; (143d8 <bt_mesh_lpn_group_add+0x80>)
   14370:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14374:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14376:	e851 2f00 	ldrex	r2, [r1]
   1437a:	401a      	ands	r2, r3
   1437c:	e841 2000 	strex	r0, r2, [r1]
   14380:	2800      	cmp	r0, #0
   14382:	d1f8      	bne.n	14376 <bt_mesh_lpn_group_add+0x1e>
   14384:	f3bf 8f5b 	dmb	ish
   14388:	4b14      	ldr	r3, [pc, #80]	; (143dc <bt_mesh_lpn_group_add+0x84>)
   1438a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
	if (!bt_mesh_lpn_established() || bt_mesh.lpn.sent_req) {
   1438e:	06d2      	lsls	r2, r2, #27
   14390:	d51e      	bpl.n	143d0 <bt_mesh_lpn_group_add+0x78>
   14392:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   14396:	b9db      	cbnz	r3, 143d0 <bt_mesh_lpn_group_add+0x78>
	sub_update(TRANS_CTL_OP_FRIEND_SUB_ADD);
   14398:	2007      	movs	r0, #7
}
   1439a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sub_update(TRANS_CTL_OP_FRIEND_SUB_ADD);
   1439e:	f7ff bd87 	b.w	13eb0 <sub_update>
		if (!free_slot && lpn->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   143a2:	b913      	cbnz	r3, 143aa <bt_mesh_lpn_group_add+0x52>
   143a4:	2d00      	cmp	r5, #0
   143a6:	bf08      	it	eq
   143a8:	460b      	moveq	r3, r1
	for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   143aa:	3201      	adds	r2, #1
   143ac:	2a08      	cmp	r2, #8
   143ae:	4621      	mov	r1, r4
   143b0:	d1d6      	bne.n	14360 <bt_mesh_lpn_group_add+0x8>
	if (!free_slot) {
   143b2:	b923      	cbnz	r3, 143be <bt_mesh_lpn_group_add+0x66>
		BT_WARN("Friend Subscription List exceeded!");
   143b4:	2157      	movs	r1, #87	; 0x57
   143b6:	480a      	ldr	r0, [pc, #40]	; (143e0 <bt_mesh_lpn_group_add+0x88>)
   143b8:	f00f ff40 	bl	2423c <printk>
		return;
   143bc:	e7e4      	b.n	14388 <bt_mesh_lpn_group_add+0x30>
	lpn->groups_changed = 1U;
   143be:	4a07      	ldr	r2, [pc, #28]	; (143dc <bt_mesh_lpn_group_add+0x84>)
	*free_slot = group;
   143c0:	8018      	strh	r0, [r3, #0]
	lpn->groups_changed = 1U;
   143c2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
   143c6:	f043 0301 	orr.w	r3, r3, #1
   143ca:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
   143ce:	e7db      	b.n	14388 <bt_mesh_lpn_group_add+0x30>
}
   143d0:	bd38      	pop	{r3, r4, r5, pc}
   143d2:	bf00      	nop
   143d4:	20001410 	.word	0x20001410
   143d8:	20001470 	.word	0x20001470
   143dc:	200013a8 	.word	0x200013a8
   143e0:	0002fe24 	.word	0x0002fe24

000143e4 <bt_mesh_lpn_group_del>:
{
   143e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if (atomic_test_bit(lpn->added, i) ||
   143e8:	4e1f      	ldr	r6, [pc, #124]	; (14468 <bt_mesh_lpn_group_del+0x84>)
   143ea:	4605      	mov	r5, r0
   143ec:	eb00 0941 	add.w	r9, r0, r1, lsl #1
			    atomic_test_bit(lpn->pending, i)) {
   143f0:	f106 0a04 	add.w	sl, r6, #4
				atomic_set_bit(lpn->to_remove, i);
   143f4:	f106 0b08 	add.w	fp, r6, #8
	for (i = 0; i < group_count; i++) {
   143f8:	454d      	cmp	r5, r9
   143fa:	d10c      	bne.n	14416 <bt_mesh_lpn_group_del+0x32>
   143fc:	4b1b      	ldr	r3, [pc, #108]	; (1446c <bt_mesh_lpn_group_del+0x88>)
   143fe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
	if (!bt_mesh_lpn_established() || bt_mesh.lpn.sent_req) {
   14402:	06d2      	lsls	r2, r2, #27
   14404:	d52e      	bpl.n	14464 <bt_mesh_lpn_group_del+0x80>
   14406:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   1440a:	bb5b      	cbnz	r3, 14464 <bt_mesh_lpn_group_del+0x80>
	sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
   1440c:	2008      	movs	r0, #8
}
   1440e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
   14412:	f7ff bd4d 	b.w	13eb0 <sub_update>
		if (groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   14416:	f835 8b02 	ldrh.w	r8, [r5], #2
   1441a:	f1b8 0f00 	cmp.w	r8, #0
   1441e:	d0eb      	beq.n	143f8 <bt_mesh_lpn_group_del+0x14>
   14420:	4f13      	ldr	r7, [pc, #76]	; (14470 <bt_mesh_lpn_group_del+0x8c>)
	for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   14422:	2400      	movs	r4, #0
		if (lpn->groups[i] == group) {
   14424:	f837 3b02 	ldrh.w	r3, [r7], #2
   14428:	4598      	cmp	r8, r3
   1442a:	d10f      	bne.n	1444c <bt_mesh_lpn_group_del+0x68>
			if (atomic_test_bit(lpn->added, i) ||
   1442c:	4621      	mov	r1, r4
   1442e:	4630      	mov	r0, r6
   14430:	f014 f8b8 	bl	285a4 <atomic_test_bit>
   14434:	b170      	cbz	r0, 14454 <bt_mesh_lpn_group_del+0x70>
				atomic_set_bit(lpn->to_remove, i);
   14436:	4621      	mov	r1, r4
   14438:	4658      	mov	r0, fp
   1443a:	f014 f8bc 	bl	285b6 <atomic_set_bit>
				lpn->groups_changed = 1U;
   1443e:	4a0b      	ldr	r2, [pc, #44]	; (1446c <bt_mesh_lpn_group_del+0x88>)
   14440:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
   14444:	f043 0301 	orr.w	r3, r3, #1
   14448:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
	for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   1444c:	3401      	adds	r4, #1
   1444e:	2c08      	cmp	r4, #8
   14450:	d1e8      	bne.n	14424 <bt_mesh_lpn_group_del+0x40>
   14452:	e7d1      	b.n	143f8 <bt_mesh_lpn_group_del+0x14>
			    atomic_test_bit(lpn->pending, i)) {
   14454:	4650      	mov	r0, sl
   14456:	f014 f8a5 	bl	285a4 <atomic_test_bit>
			if (atomic_test_bit(lpn->added, i) ||
   1445a:	2800      	cmp	r0, #0
   1445c:	d1eb      	bne.n	14436 <bt_mesh_lpn_group_del+0x52>
				lpn->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1445e:	f827 0c02 	strh.w	r0, [r7, #-2]
   14462:	e7f3      	b.n	1444c <bt_mesh_lpn_group_del+0x68>
}
   14464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14468:	20001468 	.word	0x20001468
   1446c:	200013a8 	.word	0x200013a8
   14470:	20001410 	.word	0x20001410

00014474 <bt_mesh_lpn_friend_sub_cfm>:
	if (buf->len < sizeof(*msg)) {
   14474:	888b      	ldrh	r3, [r1, #4]
{
   14476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*msg)) {
   1447a:	b93b      	cbnz	r3, 1448c <bt_mesh_lpn_friend_sub_cfm+0x18>
		BT_WARN("Too short Friend Subscription Confirm");
   1447c:	484e      	ldr	r0, [pc, #312]	; (145b8 <bt_mesh_lpn_friend_sub_cfm+0x144>)
   1447e:	2157      	movs	r1, #87	; 0x57
   14480:	f00f fedc 	bl	2423c <printk>
		return -EINVAL;
   14484:	f06f 0015 	mvn.w	r0, #21
}
   14488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!lpn->sent_req) {
   1448c:	4b4b      	ldr	r3, [pc, #300]	; (145bc <bt_mesh_lpn_friend_sub_cfm+0x148>)
   1448e:	f893 4023 	ldrb.w	r4, [r3, #35]	; 0x23
   14492:	461d      	mov	r5, r3
   14494:	b924      	cbnz	r4, 144a0 <bt_mesh_lpn_friend_sub_cfm+0x2c>
		BT_WARN("No pending subscription list message");
   14496:	484a      	ldr	r0, [pc, #296]	; (145c0 <bt_mesh_lpn_friend_sub_cfm+0x14c>)
   14498:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Unexpected Friend Subscription Confirm");
   1449a:	f00f fecf 	bl	2423c <printk>
		return 0;
   1449e:	e009      	b.n	144b4 <bt_mesh_lpn_friend_sub_cfm+0x40>
	if (msg->xact != lpn->xact_pending) {
   144a0:	680a      	ldr	r2, [r1, #0]
   144a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   144a6:	7812      	ldrb	r2, [r2, #0]
   144a8:	429a      	cmp	r2, r3
   144aa:	d005      	beq.n	144b8 <bt_mesh_lpn_friend_sub_cfm+0x44>
		BT_WARN("Transaction mismatch (0x%02x != 0x%02x)",
   144ac:	2157      	movs	r1, #87	; 0x57
   144ae:	4845      	ldr	r0, [pc, #276]	; (145c4 <bt_mesh_lpn_friend_sub_cfm+0x150>)
   144b0:	f00f fec4 	bl	2423c <printk>
	return 0;
   144b4:	2000      	movs	r0, #0
   144b6:	e7e7      	b.n	14488 <bt_mesh_lpn_friend_sub_cfm+0x14>
	if (lpn->sent_req == TRANS_CTL_OP_FRIEND_SUB_ADD) {
   144b8:	2c07      	cmp	r4, #7
   144ba:	d14b      	bne.n	14554 <bt_mesh_lpn_friend_sub_cfm+0xe0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   144bc:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   144c0:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   144c4:	f8d5 20c4 	ldr.w	r2, [r5, #196]	; 0xc4
   144c8:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   144cc:	f3bf 8f5b 	dmb	ish
   144d0:	e853 1f00 	ldrex	r1, [r3]
   144d4:	4311      	orrs	r1, r2
   144d6:	e843 1000 	strex	r0, r1, [r3]
   144da:	2800      	cmp	r0, #0
   144dc:	d1f8      	bne.n	144d0 <bt_mesh_lpn_friend_sub_cfm+0x5c>
   144de:	f3bf 8f5b 	dmb	ish
		group_zero(lpn->pending);
   144e2:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   144e6:	f014 f875 	bl	285d4 <group_zero>
	friend_response_received(lpn);
   144ea:	f7ff fae5 	bl	13ab8 <friend_response_received.constprop.8>
	if (lpn->groups_changed) {
   144ee:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   144f2:	07da      	lsls	r2, r3, #31
   144f4:	d50e      	bpl.n	14514 <bt_mesh_lpn_friend_sub_cfm+0xa0>
		sub_update(TRANS_CTL_OP_FRIEND_SUB_ADD);
   144f6:	2007      	movs	r0, #7
   144f8:	f7ff fcda 	bl	13eb0 <sub_update>
		sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
   144fc:	2008      	movs	r0, #8
   144fe:	f7ff fcd7 	bl	13eb0 <sub_update>
		if (!lpn->sent_req) {
   14502:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   14506:	b92a      	cbnz	r2, 14514 <bt_mesh_lpn_friend_sub_cfm+0xa0>
			lpn->groups_changed = 0U;
   14508:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1450c:	f362 0300 	bfi	r3, r2, #0, #1
   14510:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	if (lpn->pending_poll) {
   14514:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   14518:	079b      	lsls	r3, r3, #30
   1451a:	d501      	bpl.n	14520 <bt_mesh_lpn_friend_sub_cfm+0xac>
		send_friend_poll();
   1451c:	f7ff fa48 	bl	139b0 <send_friend_poll>
	if (!lpn->sent_req) {
   14520:	f895 4023 	ldrb.w	r4, [r5, #35]	; 0x23
   14524:	2c00      	cmp	r4, #0
   14526:	d1c5      	bne.n	144b4 <bt_mesh_lpn_friend_sub_cfm+0x40>
		int32_t timeout = poll_timeout(lpn);
   14528:	f7ff fb3a 	bl	13ba0 <poll_timeout.constprop.5>
   1452c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
		k_delayed_work_submit(&lpn->timer, K_MSEC(timeout));
   14530:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
   14534:	2100      	movs	r1, #0
   14536:	f240 30e7 	movw	r0, #999	; 0x3e7
   1453a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1453e:	2300      	movs	r3, #0
   14540:	fbc5 0106 	smlal	r0, r1, r5, r6
   14544:	f7ed fc80 	bl	1e48 <__aeabi_uldivmod>
   14548:	4602      	mov	r2, r0
   1454a:	460b      	mov	r3, r1
   1454c:	481e      	ldr	r0, [pc, #120]	; (145c8 <bt_mesh_lpn_friend_sub_cfm+0x154>)
   1454e:	f7ff fa7f 	bl	13a50 <k_delayed_work_submit>
   14552:	e7af      	b.n	144b4 <bt_mesh_lpn_friend_sub_cfm+0x40>
	} else if (lpn->sent_req == TRANS_CTL_OP_FRIEND_SUB_REM) {
   14554:	2c08      	cmp	r4, #8
   14556:	d12b      	bne.n	145b0 <bt_mesh_lpn_friend_sub_cfm+0x13c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14558:	f3bf 8f5b 	dmb	ish
   1455c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   14560:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14564:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
	(void)atomic_and(target, ~atomic_get(source));
   14568:	43db      	mvns	r3, r3
   1456a:	f3bf 8f5b 	dmb	ish
   1456e:	e852 1f00 	ldrex	r1, [r2]
   14572:	4019      	ands	r1, r3
   14574:	e842 1000 	strex	r0, r1, [r2]
   14578:	2800      	cmp	r0, #0
   1457a:	d1f8      	bne.n	1456e <bt_mesh_lpn_friend_sub_cfm+0xfa>
   1457c:	f3bf 8f5b 	dmb	ish
		for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   14580:	2400      	movs	r4, #0
			if (atomic_test_and_clear_bit(lpn->pending, i) &&
   14582:	f105 06c4 	add.w	r6, r5, #196	; 0xc4
			    atomic_test_and_clear_bit(lpn->to_remove, i)) {
   14586:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
				lpn->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   1458a:	f105 0868 	add.w	r8, r5, #104	; 0x68
			if (atomic_test_and_clear_bit(lpn->pending, i) &&
   1458e:	4621      	mov	r1, r4
   14590:	4630      	mov	r0, r6
   14592:	f014 f82b 	bl	285ec <atomic_test_and_clear_bit>
   14596:	b138      	cbz	r0, 145a8 <bt_mesh_lpn_friend_sub_cfm+0x134>
			    atomic_test_and_clear_bit(lpn->to_remove, i)) {
   14598:	4621      	mov	r1, r4
   1459a:	4638      	mov	r0, r7
   1459c:	f014 f826 	bl	285ec <atomic_test_and_clear_bit>
			if (atomic_test_and_clear_bit(lpn->pending, i) &&
   145a0:	b110      	cbz	r0, 145a8 <bt_mesh_lpn_friend_sub_cfm+0x134>
				lpn->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   145a2:	2300      	movs	r3, #0
   145a4:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
		for (i = 0; i < ARRAY_SIZE(lpn->groups); i++) {
   145a8:	3401      	adds	r4, #1
   145aa:	2c08      	cmp	r4, #8
   145ac:	d1ef      	bne.n	1458e <bt_mesh_lpn_friend_sub_cfm+0x11a>
   145ae:	e79c      	b.n	144ea <bt_mesh_lpn_friend_sub_cfm+0x76>
		BT_WARN("Unexpected Friend Subscription Confirm");
   145b0:	2157      	movs	r1, #87	; 0x57
   145b2:	4806      	ldr	r0, [pc, #24]	; (145cc <bt_mesh_lpn_friend_sub_cfm+0x158>)
   145b4:	e771      	b.n	1449a <bt_mesh_lpn_friend_sub_cfm+0x26>
   145b6:	bf00      	nop
   145b8:	0002fce9 	.word	0x0002fce9
   145bc:	200013a8 	.word	0x200013a8
   145c0:	0002fd14 	.word	0x0002fd14
   145c4:	0002fd3e 	.word	0x0002fd3e
   145c8:	200013e0 	.word	0x200013e0
   145cc:	0002fd6b 	.word	0x0002fd6b

000145d0 <bt_mesh_lpn_friend_update>:
{
   145d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*msg)) {
   145d4:	888b      	ldrh	r3, [r1, #4]
   145d6:	2b05      	cmp	r3, #5
{
   145d8:	4607      	mov	r7, r0
	if (buf->len < sizeof(*msg)) {
   145da:	d807      	bhi.n	145ec <bt_mesh_lpn_friend_update+0x1c>
		BT_WARN("Too short Friend Update");
   145dc:	4863      	ldr	r0, [pc, #396]	; (1476c <bt_mesh_lpn_friend_update+0x19c>)
   145de:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Friend Update with wrong credentials");
   145e0:	f00f fe2c 	bl	2423c <printk>
			return -EINVAL;
   145e4:	f06f 0015 	mvn.w	r0, #21
}
   145e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (lpn->sent_req != TRANS_CTL_OP_FRIEND_POLL) {
   145ec:	4c60      	ldr	r4, [pc, #384]	; (14770 <bt_mesh_lpn_friend_update+0x1a0>)
   145ee:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   145f2:	2b01      	cmp	r3, #1
   145f4:	d005      	beq.n	14602 <bt_mesh_lpn_friend_update+0x32>
		BT_WARN("Unexpected friend update");
   145f6:	485f      	ldr	r0, [pc, #380]	; (14774 <bt_mesh_lpn_friend_update+0x1a4>)
   145f8:	2157      	movs	r1, #87	; 0x57
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
   145fa:	f00f fe1f 	bl	2423c <printk>
	return 0;
   145fe:	2000      	movs	r0, #0
   14600:	e7f2      	b.n	145e8 <bt_mesh_lpn_friend_update+0x18>
	struct bt_mesh_subnet *sub = rx->sub;
   14602:	f8d0 8000 	ldr.w	r8, [r0]
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !rx->new_key) {
   14606:	f898 301e 	ldrb.w	r3, [r8, #30]
   1460a:	2b02      	cmp	r3, #2
   1460c:	d106      	bne.n	1461c <bt_mesh_lpn_friend_update+0x4c>
   1460e:	7d00      	ldrb	r0, [r0, #20]
   14610:	f010 0502 	ands.w	r5, r0, #2
   14614:	d102      	bne.n	1461c <bt_mesh_lpn_friend_update+0x4c>
		BT_WARN("Ignoring Phase 2 KR Update secured using old key");
   14616:	2157      	movs	r1, #87	; 0x57
   14618:	4857      	ldr	r0, [pc, #348]	; (14778 <bt_mesh_lpn_friend_update+0x1a8>)
   1461a:	e7ee      	b.n	145fa <bt_mesh_lpn_friend_update+0x2a>
	struct bt_mesh_ctl_friend_update *msg = (void *)buf->data;
   1461c:	680d      	ldr	r5, [r1, #0]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   1461e:	4857      	ldr	r0, [pc, #348]	; (1477c <bt_mesh_lpn_friend_update+0x1ac>)
   14620:	2103      	movs	r1, #3
   14622:	f013 ffbf 	bl	285a4 <atomic_test_bit>
   14626:	b158      	cbz	r0, 14640 <bt_mesh_lpn_friend_update+0x70>
	    (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) ==
   14628:	2102      	movs	r1, #2
   1462a:	4854      	ldr	r0, [pc, #336]	; (1477c <bt_mesh_lpn_friend_update+0x1ac>)
   1462c:	f013 ffba 	bl	285a4 <atomic_test_bit>
	     BT_MESH_IV_UPDATE(msg->flags))) {
   14630:	782b      	ldrb	r3, [r5, #0]
   14632:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
   14636:	4298      	cmp	r0, r3
   14638:	d102      	bne.n	14640 <bt_mesh_lpn_friend_update+0x70>
		bt_mesh_beacon_ivu_initiator(false);
   1463a:	2000      	movs	r0, #0
   1463c:	f7f8 ff7a 	bl	d534 <bt_mesh_beacon_ivu_initiator>
	if (!lpn->established) {
   14640:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   14644:	06d9      	lsls	r1, r3, #27
   14646:	d43b      	bmi.n	146c0 <bt_mesh_lpn_friend_update+0xf0>
		if (!rx->friend_cred) {
   14648:	7d3a      	ldrb	r2, [r7, #20]
   1464a:	0752      	lsls	r2, r2, #29
   1464c:	d402      	bmi.n	14654 <bt_mesh_lpn_friend_update+0x84>
			BT_WARN("Friend Update with wrong credentials");
   1464e:	2157      	movs	r1, #87	; 0x57
   14650:	484b      	ldr	r0, [pc, #300]	; (14780 <bt_mesh_lpn_friend_update+0x1b0>)
   14652:	e7c5      	b.n	145e0 <bt_mesh_lpn_friend_update+0x10>
		lpn->established = 1U;
   14654:	f043 0310 	orr.w	r3, r3, #16
   14658:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		BT_INFO("Friendship established with 0x%04x", lpn->frnd);
   1465c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   1465e:	4849      	ldr	r0, [pc, #292]	; (14784 <bt_mesh_lpn_friend_update+0x1b4>)
		Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   14660:	4e49      	ldr	r6, [pc, #292]	; (14788 <bt_mesh_lpn_friend_update+0x1b8>)
   14662:	f8df 912c 	ldr.w	r9, [pc, #300]	; 14790 <bt_mesh_lpn_friend_update+0x1c0>
   14666:	f8df b130 	ldr.w	fp, [pc, #304]	; 14798 <bt_mesh_lpn_friend_update+0x1c8>
		BT_INFO("Friendship established with 0x%04x", lpn->frnd);
   1466a:	2149      	movs	r1, #73	; 0x49
   1466c:	f00f fde6 	bl	2423c <printk>
		bt_mesh_hb_feature_changed(BT_MESH_FEAT_LOW_POWER);
   14670:	2008      	movs	r0, #8
   14672:	f7fc f8d9 	bl	10828 <bt_mesh_hb_feature_changed>
		Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   14676:	454e      	cmp	r6, r9
   14678:	d90a      	bls.n	14690 <bt_mesh_lpn_friend_update+0xc0>
   1467a:	4659      	mov	r1, fp
   1467c:	4843      	ldr	r0, [pc, #268]	; (1478c <bt_mesh_lpn_friend_update+0x1bc>)
   1467e:	f240 32e9 	movw	r2, #1001	; 0x3e9
   14682:	f00f fddb 	bl	2423c <printk>
   14686:	f240 31e9 	movw	r1, #1001	; 0x3e9
   1468a:	4658      	mov	r0, fp
   1468c:	f010 f888 	bl	247a0 <assert_post_action>
   14690:	4b3f      	ldr	r3, [pc, #252]	; (14790 <bt_mesh_lpn_friend_update+0x1c0>)
   14692:	429e      	cmp	r6, r3
   14694:	d35a      	bcc.n	1474c <bt_mesh_lpn_friend_update+0x17c>
		lpn->poll_timeout = MIN(POLL_TIMEOUT_MAX(lpn),
   14696:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1469a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   1469c:	4419      	add	r1, r3
   1469e:	f101 02c8 	add.w	r2, r1, #200	; 0xc8
   146a2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
   146a6:	f247 5030 	movw	r0, #30000	; 0x7530
   146aa:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
   146ae:	fbb0 f3f2 	udiv	r3, r0, r2
   146b2:	2b06      	cmp	r3, #6
   146b4:	bfa8      	it	ge
   146b6:	2306      	movge	r3, #6
   146b8:	3138      	adds	r1, #56	; 0x38
   146ba:	fb01 0303 	mla	r3, r1, r3, r0
   146be:	62a3      	str	r3, [r4, #40]	; 0x28
	friend_response_received(lpn);
   146c0:	f7ff f9fa 	bl	13ab8 <friend_response_received.constprop.8>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(msg->flags), rx->new_key);
   146c4:	7d3a      	ldrb	r2, [r7, #20]
   146c6:	7829      	ldrb	r1, [r5, #0]
   146c8:	f8d5 6001 	ldr.w	r6, [r5, #1]
   146cc:	f3c2 0240 	ubfx	r2, r2, #1, #1
   146d0:	f001 0101 	and.w	r1, r1, #1
   146d4:	4640      	mov	r0, r8
   146d6:	f013 f96c 	bl	279b2 <bt_mesh_kr_update>
	bt_mesh_net_iv_update(iv_index, BT_MESH_IV_UPDATE(msg->flags));
   146da:	7829      	ldrb	r1, [r5, #0]
   146dc:	ba36      	rev	r6, r6
   146de:	f3c1 0140 	ubfx	r1, r1, #1, #1
   146e2:	4630      	mov	r0, r6
   146e4:	f7f9 fa1e 	bl	db24 <bt_mesh_net_iv_update>
	if (lpn->groups_changed) {
   146e8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   146ec:	07db      	lsls	r3, r3, #31
   146ee:	d50e      	bpl.n	1470e <bt_mesh_lpn_friend_update+0x13e>
		sub_update(TRANS_CTL_OP_FRIEND_SUB_ADD);
   146f0:	2007      	movs	r0, #7
   146f2:	f7ff fbdd 	bl	13eb0 <sub_update>
		sub_update(TRANS_CTL_OP_FRIEND_SUB_REM);
   146f6:	2008      	movs	r0, #8
   146f8:	f7ff fbda 	bl	13eb0 <sub_update>
		if (!lpn->sent_req) {
   146fc:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   14700:	b92a      	cbnz	r2, 1470e <bt_mesh_lpn_friend_update+0x13e>
			lpn->groups_changed = 0U;
   14702:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   14706:	f362 0300 	bfi	r3, r2, #0, #1
   1470a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (msg->md) {
   1470e:	796b      	ldrb	r3, [r5, #5]
   14710:	b10b      	cbz	r3, 14716 <bt_mesh_lpn_friend_update+0x146>
		send_friend_poll();
   14712:	f7ff f94d 	bl	139b0 <send_friend_poll>
	if (!lpn->sent_req) {
   14716:	f894 4023 	ldrb.w	r4, [r4, #35]	; 0x23
   1471a:	2c00      	cmp	r4, #0
   1471c:	f47f af6f 	bne.w	145fe <bt_mesh_lpn_friend_update+0x2e>
		int32_t timeout = poll_timeout(lpn);
   14720:	f7ff fa3e 	bl	13ba0 <poll_timeout.constprop.5>
   14724:	f44f 4500 	mov.w	r5, #32768	; 0x8000
		k_delayed_work_submit(&lpn->timer, K_MSEC(timeout));
   14728:	ea20 76e0 	bic.w	r6, r0, r0, asr #31
   1472c:	2100      	movs	r1, #0
   1472e:	f240 30e7 	movw	r0, #999	; 0x3e7
   14732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14736:	2300      	movs	r3, #0
   14738:	fbc5 0106 	smlal	r0, r1, r5, r6
   1473c:	f7ed fb84 	bl	1e48 <__aeabi_uldivmod>
   14740:	4602      	mov	r2, r0
   14742:	460b      	mov	r3, r1
   14744:	4813      	ldr	r0, [pc, #76]	; (14794 <bt_mesh_lpn_friend_update+0x1c4>)
   14746:	f7ff f983 	bl	13a50 <k_delayed_work_submit>
   1474a:	e758      	b.n	145fe <bt_mesh_lpn_friend_update+0x2e>
			if (cb->established) {
   1474c:	f8d6 a000 	ldr.w	sl, [r6]
   14750:	f1ba 0f00 	cmp.w	sl, #0
   14754:	d007      	beq.n	14766 <bt_mesh_lpn_friend_update+0x196>
				cb->established(lpn->sub->net_idx, lpn->frnd,
   14756:	6fa0      	ldr	r0, [r4, #120]	; 0x78
   14758:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1475c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   14760:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   14762:	8b80      	ldrh	r0, [r0, #28]
   14764:	47d0      	blx	sl
		Z_STRUCT_SECTION_FOREACH(bt_mesh_lpn_cb, cb) {
   14766:	360c      	adds	r6, #12
   14768:	e785      	b.n	14676 <bt_mesh_lpn_friend_update+0xa6>
   1476a:	bf00      	nop
   1476c:	0002fd97 	.word	0x0002fd97
   14770:	200013a8 	.word	0x200013a8
   14774:	0002fdb4 	.word	0x0002fdb4
   14778:	0002ddd0 	.word	0x0002ddd0
   1477c:	200013b0 	.word	0x200013b0
   14780:	0002fdd2 	.word	0x0002fdd2
   14784:	0002fdfc 	.word	0x0002fdfc
   14788:	0002a768 	.word	0x0002a768
   1478c:	0002bced 	.word	0x0002bced
   14790:	0002a768 	.word	0x0002a768
   14794:	200013e0 	.word	0x200013e0
   14798:	0002fe7e 	.word	0x0002fe7e

0001479c <bt_mesh_lpn_poll>:
	if (!bt_mesh.lpn.established) {
   1479c:	4b04      	ldr	r3, [pc, #16]	; (147b0 <bt_mesh_lpn_poll+0x14>)
   1479e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   147a2:	06db      	lsls	r3, r3, #27
   147a4:	d501      	bpl.n	147aa <bt_mesh_lpn_poll+0xe>
	return send_friend_poll();
   147a6:	f7ff b903 	b.w	139b0 <send_friend_poll>
}
   147aa:	f06f 000a 	mvn.w	r0, #10
   147ae:	4770      	bx	lr
   147b0:	200013a8 	.word	0x200013a8

000147b4 <bt_mesh_lpn_init>:

BT_MESH_SUBNET_CB_DEFINE(subnet_evt);

int bt_mesh_lpn_init(void)
{
   147b4:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   147b6:	4c10      	ldr	r4, [pc, #64]	; (147f8 <bt_mesh_lpn_init+0x44>)
   147b8:	2230      	movs	r2, #48	; 0x30
   147ba:	2100      	movs	r1, #0
   147bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   147c0:	f011 fcf8 	bl	261b4 <memset>
   147c4:	4b0d      	ldr	r3, [pc, #52]	; (147fc <bt_mesh_lpn_init+0x48>)
   147c6:	63e3      	str	r3, [r4, #60]	; 0x3c

	BT_DBG("");

	k_delayed_work_init(&lpn->timer, lpn_timeout);

	if (lpn->state == BT_MESH_LPN_ENABLED) {
   147c8:	f894 3020 	ldrb.w	r3, [r4, #32]
   147cc:	2b03      	cmp	r3, #3
   147ce:	d105      	bne.n	147dc <bt_mesh_lpn_init+0x28>
		if (IS_ENABLED(CONFIG_BT_MESH_LPN_ESTABLISHMENT)) {
			bt_mesh_scan_disable();
   147d0:	f7f8 fd00 	bl	d1d4 <bt_mesh_scan_disable>
		} else {
			bt_mesh_scan_enable();
		}

		send_friend_req(lpn);
   147d4:	f7ff f98e 	bl	13af4 <send_friend_req.constprop.9>
					      K_MSEC(LPN_AUTO_TIMEOUT));
		}
	}

	return 0;
}
   147d8:	2000      	movs	r0, #0
   147da:	bd10      	pop	{r4, pc}
		bt_mesh_scan_enable();
   147dc:	f7f8 fcd8 	bl	d190 <bt_mesh_scan_enable>
	bt_mesh.lpn.state = state;
   147e0:	2302      	movs	r3, #2
   147e2:	f884 3020 	strb.w	r3, [r4, #32]
			k_delayed_work_submit(&lpn->timer,
   147e6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   147ea:	2300      	movs	r3, #0
   147ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   147f0:	f7ff f92e 	bl	13a50 <k_delayed_work_submit>
   147f4:	e7f0      	b.n	147d8 <bt_mesh_lpn_init+0x24>
   147f6:	bf00      	nop
   147f8:	200013a8 	.word	0x200013a8
   147fc:	00013ff1 	.word	0x00013ff1

00014800 <prov_link_closed>:
static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
	BT_DBG("%u", reason);

	if (bt_mesh_prov_link.role->link_closed) {
   14800:	4b07      	ldr	r3, [pc, #28]	; (14820 <prov_link_closed+0x20>)
   14802:	689b      	ldr	r3, [r3, #8]
   14804:	685b      	ldr	r3, [r3, #4]
{
   14806:	b510      	push	{r4, lr}
   14808:	4604      	mov	r4, r0
	if (bt_mesh_prov_link.role->link_closed) {
   1480a:	b103      	cbz	r3, 1480e <prov_link_closed+0xe>
		bt_mesh_prov_link.role->link_closed();
   1480c:	4798      	blx	r3
	}

	if (bt_mesh_prov->link_close) {
   1480e:	4b05      	ldr	r3, [pc, #20]	; (14824 <prov_link_closed+0x24>)
   14810:	681b      	ldr	r3, [r3, #0]
   14812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14814:	b11b      	cbz	r3, 1481e <prov_link_closed+0x1e>
		bt_mesh_prov->link_close(bearer->type);
   14816:	7820      	ldrb	r0, [r4, #0]
	}
}
   14818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->link_close(bearer->type);
   1481c:	4718      	bx	r3
}
   1481e:	bd10      	pop	{r4, pc}
   14820:	200022f0 	.word	0x200022f0
   14824:	200022ec 	.word	0x200022ec

00014828 <prov_bearer_error>:

static void prov_bearer_error(const struct prov_bearer *bearer, void *cb_data,
			      uint8_t err)
{
	if (bt_mesh_prov_link.role->error) {
   14828:	4b03      	ldr	r3, [pc, #12]	; (14838 <prov_bearer_error+0x10>)
   1482a:	689b      	ldr	r3, [r3, #8]
   1482c:	689b      	ldr	r3, [r3, #8]
   1482e:	b10b      	cbz	r3, 14834 <prov_bearer_error+0xc>
		bt_mesh_prov_link.role->error(err);
   14830:	4610      	mov	r0, r2
   14832:	4718      	bx	r3
	}
}
   14834:	4770      	bx	lr
   14836:	bf00      	nop
   14838:	200022f0 	.word	0x200022f0

0001483c <prov_recv>:
{
   1483c:	b570      	push	{r4, r5, r6, lr}
	uint8_t type = buf->data[0];
   1483e:	6810      	ldr	r0, [r2, #0]
   14840:	4c19      	ldr	r4, [pc, #100]	; (148a8 <prov_recv+0x6c>)
{
   14842:	4613      	mov	r3, r2
	uint8_t type = buf->data[0];
   14844:	7802      	ldrb	r2, [r0, #0]
	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
   14846:	2a09      	cmp	r2, #9
   14848:	d907      	bls.n	1485a <prov_recv+0x1e>
		BT_ERR("Unknown provisioning PDU type 0x%02x", type);
   1484a:	2145      	movs	r1, #69	; 0x45
   1484c:	4817      	ldr	r0, [pc, #92]	; (148ac <prov_recv+0x70>)
   1484e:	f00f fcf5 	bl	2423c <printk>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   14852:	68a3      	ldr	r3, [r4, #8]
   14854:	2002      	movs	r0, #2
   14856:	689b      	ldr	r3, [r3, #8]
   14858:	e012      	b.n	14880 <prov_recv+0x44>
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   1485a:	d003      	beq.n	14864 <prov_recv+0x28>
   1485c:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
   14860:	4291      	cmp	r1, r2
   14862:	d104      	bne.n	1486e <prov_recv+0x32>
	    !bt_mesh_prov_link.role->op[type]) {
   14864:	68a1      	ldr	r1, [r4, #8]
   14866:	1d15      	adds	r5, r2, #4
   14868:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   1486c:	b959      	cbnz	r1, 14886 <prov_recv+0x4a>
		BT_WARN("Unexpected msg 0x%02x != 0x%02x", type, bt_mesh_prov_link.expect);
   1486e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   14872:	480f      	ldr	r0, [pc, #60]	; (148b0 <prov_recv+0x74>)
   14874:	2157      	movs	r1, #87	; 0x57
   14876:	f00f fce1 	bl	2423c <printk>
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   1487a:	68a3      	ldr	r3, [r4, #8]
   1487c:	689b      	ldr	r3, [r3, #8]
   1487e:	2003      	movs	r0, #3
}
   14880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   14884:	4718      	bx	r3
	if (1 + op_len[type] != buf->len) {
   14886:	889d      	ldrh	r5, [r3, #4]
   14888:	4b0a      	ldr	r3, [pc, #40]	; (148b4 <prov_recv+0x78>)
   1488a:	5c9b      	ldrb	r3, [r3, r2]
   1488c:	3301      	adds	r3, #1
   1488e:	42ab      	cmp	r3, r5
   14890:	d006      	beq.n	148a0 <prov_recv+0x64>
		BT_ERR("Invalid length %u for type 0x%02x", buf->len, type);
   14892:	4613      	mov	r3, r2
   14894:	2145      	movs	r1, #69	; 0x45
   14896:	462a      	mov	r2, r5
   14898:	4807      	ldr	r0, [pc, #28]	; (148b8 <prov_recv+0x7c>)
   1489a:	f00f fccf 	bl	2423c <printk>
   1489e:	e7d8      	b.n	14852 <prov_recv+0x16>
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   148a0:	3001      	adds	r0, #1
}
   148a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   148a6:	4708      	bx	r1
   148a8:	200022f0 	.word	0x200022f0
   148ac:	0003008a 	.word	0x0003008a
   148b0:	000300b4 	.word	0x000300b4
   148b4:	00030080 	.word	0x00030080
   148b8:	000300d9 	.word	0x000300d9

000148bc <pub_key_ready>:
	if (!pkey) {
   148bc:	b918      	cbnz	r0, 148c6 <pub_key_ready+0xa>
		BT_WARN("Public key not available");
   148be:	2157      	movs	r1, #87	; 0x57
   148c0:	4801      	ldr	r0, [pc, #4]	; (148c8 <pub_key_ready+0xc>)
   148c2:	f00f bcbb 	b.w	2423c <printk>
}
   148c6:	4770      	bx	lr
   148c8:	00030100 	.word	0x00030100

000148cc <atomic_or.constprop.4>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   148cc:	4b07      	ldr	r3, [pc, #28]	; (148ec <atomic_or.constprop.4+0x20>)
}
   148ce:	f3bf 8f5b 	dmb	ish
   148d2:	4602      	mov	r2, r0
   148d4:	e853 0f00 	ldrex	r0, [r3]
   148d8:	ea40 0102 	orr.w	r1, r0, r2
   148dc:	e843 1c00 	strex	ip, r1, [r3]
   148e0:	f1bc 0f00 	cmp.w	ip, #0
   148e4:	d1f6      	bne.n	148d4 <atomic_or.constprop.4+0x8>
   148e6:	f3bf 8f5b 	dmb	ish
   148ea:	4770      	bx	lr
   148ec:	200022f0 	.word	0x200022f0

000148f0 <prov_link_opened>:
{
   148f0:	b510      	push	{r4, lr}
   148f2:	4604      	mov	r4, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   148f4:	2002      	movs	r0, #2
   148f6:	f7ff ffe9 	bl	148cc <atomic_or.constprop.4>
	if (bt_mesh_prov->link_open) {
   148fa:	4b07      	ldr	r3, [pc, #28]	; (14918 <prov_link_opened+0x28>)
   148fc:	681b      	ldr	r3, [r3, #0]
   148fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14900:	b10b      	cbz	r3, 14906 <prov_link_opened+0x16>
		bt_mesh_prov->link_open(bearer->type);
   14902:	7820      	ldrb	r0, [r4, #0]
   14904:	4798      	blx	r3
	bt_mesh_prov_link.bearer = bearer;
   14906:	4b05      	ldr	r3, [pc, #20]	; (1491c <prov_link_opened+0x2c>)
   14908:	605c      	str	r4, [r3, #4]
	if (bt_mesh_prov_link.role->link_opened) {
   1490a:	689b      	ldr	r3, [r3, #8]
   1490c:	681b      	ldr	r3, [r3, #0]
   1490e:	b113      	cbz	r3, 14916 <prov_link_opened+0x26>
}
   14910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_link.role->link_opened();
   14914:	4718      	bx	r3
}
   14916:	bd10      	pop	{r4, pc}
   14918:	200022ec 	.word	0x200022ec
   1491c:	200022f0 	.word	0x200022f0

00014920 <bt_mesh_prov_reset_state>:
{
   14920:	b510      	push	{r4, lr}
	pub_key_cb.func = func ? func : pub_key_ready;
   14922:	4b15      	ldr	r3, [pc, #84]	; (14978 <bt_mesh_prov_reset_state+0x58>)
	if (bt_mesh_prov_link.conf_inputs[0]) {
   14924:	4c15      	ldr	r4, [pc, #84]	; (1497c <bt_mesh_prov_reset_state+0x5c>)
	pub_key_cb.func = func ? func : pub_key_ready;
   14926:	2800      	cmp	r0, #0
   14928:	bf08      	it	eq
   1492a:	4618      	moveq	r0, r3
   1492c:	4b14      	ldr	r3, [pc, #80]	; (14980 <bt_mesh_prov_reset_state+0x60>)
   1492e:	6018      	str	r0, [r3, #0]
	if (bt_mesh_prov_link.conf_inputs[0]) {
   14930:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   14934:	b11b      	cbz	r3, 1493e <bt_mesh_prov_reset_state+0x1e>
		bt_mesh_attention(NULL, 0);
   14936:	2100      	movs	r1, #0
   14938:	4608      	mov	r0, r1
   1493a:	f7fe fe15 	bl	13568 <bt_mesh_attention>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1493e:	f3bf 8f5b 	dmb	ish
   14942:	2100      	movs	r1, #0
   14944:	e854 3f00 	ldrex	r3, [r4]
   14948:	e844 1200 	strex	r2, r1, [r4]
   1494c:	2a00      	cmp	r2, #0
   1494e:	d1f9      	bne.n	14944 <bt_mesh_prov_reset_state+0x24>
   14950:	f3bf 8f5b 	dmb	ish
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
   14954:	f240 1205 	movw	r2, #261	; 0x105
   14958:	480a      	ldr	r0, [pc, #40]	; (14984 <bt_mesh_prov_reset_state+0x64>)
   1495a:	f011 fc2b 	bl	261b4 <memset>
	err = bt_pub_key_gen(&pub_key_cb);
   1495e:	4808      	ldr	r0, [pc, #32]	; (14980 <bt_mesh_prov_reset_state+0x60>)
   14960:	f7f4 fe44 	bl	95ec <bt_pub_key_gen>
	if (err) {
   14964:	4604      	mov	r4, r0
   14966:	b120      	cbz	r0, 14972 <bt_mesh_prov_reset_state+0x52>
		BT_ERR("Failed to generate public key (%d)", err);
   14968:	4602      	mov	r2, r0
   1496a:	2145      	movs	r1, #69	; 0x45
   1496c:	4806      	ldr	r0, [pc, #24]	; (14988 <bt_mesh_prov_reset_state+0x68>)
   1496e:	f00f fc65 	bl	2423c <printk>
}
   14972:	4620      	mov	r0, r4
   14974:	bd10      	pop	{r4, pc}
   14976:	bf00      	nop
   14978:	000148bd 	.word	0x000148bd
   1497c:	200022f0 	.word	0x200022f0
   14980:	20002414 	.word	0x20002414
   14984:	2000230f 	.word	0x2000230f
   14988:	00030058 	.word	0x00030058

0001498c <bt_mesh_prov_auth>:
{
   1498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14990:	4614      	mov	r4, r2
   14992:	b08a      	sub	sp, #40	; 0x28
	switch (method) {
   14994:	2803      	cmp	r0, #3
   14996:	f200 80a8 	bhi.w	14aea <bt_mesh_prov_auth+0x15e>
   1499a:	e8df f000 	tbb	[pc, r0]
   1499e:	0f02      	.short	0x0f02
   149a0:	8d18      	.short	0x8d18
		if (action || size) {
   149a2:	ea51 0402 	orrs.w	r4, r1, r2
   149a6:	f040 80a0 	bne.w	14aea <bt_mesh_prov_auth+0x15e>
		(void)memset(bt_mesh_prov_link.auth, 0, sizeof(bt_mesh_prov_link.auth));
   149aa:	2210      	movs	r2, #16
   149ac:	4621      	mov	r1, r4
   149ae:	4850      	ldr	r0, [pc, #320]	; (14af0 <bt_mesh_prov_auth+0x164>)
   149b0:	f011 fc00 	bl	261b4 <memset>
		return 0;
   149b4:	4620      	mov	r0, r4
}
   149b6:	b00a      	add	sp, #40	; 0x28
   149b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (action || size) {
   149bc:	ea51 0402 	orrs.w	r4, r1, r2
   149c0:	f040 8093 	bne.w	14aea <bt_mesh_prov_auth+0x15e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   149c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   149c8:	f7ff ff80 	bl	148cc <atomic_or.constprop.4>
   149cc:	e7f2      	b.n	149b4 <bt_mesh_prov_auth+0x28>
	switch (action) {
   149ce:	2904      	cmp	r1, #4
   149d0:	f200 808b 	bhi.w	14aea <bt_mesh_prov_auth+0x15e>
   149d4:	4b47      	ldr	r3, [pc, #284]	; (14af4 <bt_mesh_prov_auth+0x168>)
   149d6:	5c5f      	ldrb	r7, [r3, r1]
		if (!output) {
   149d8:	2f00      	cmp	r7, #0
   149da:	f000 8086 	beq.w	14aea <bt_mesh_prov_auth+0x15e>
		if (!(bt_mesh_prov->output_actions & output)) {
   149de:	f8df 8124 	ldr.w	r8, [pc, #292]	; 14b04 <bt_mesh_prov_auth+0x178>
   149e2:	f8d8 3000 	ldr.w	r3, [r8]
   149e6:	8a5a      	ldrh	r2, [r3, #18]
   149e8:	423a      	tst	r2, r7
   149ea:	4645      	mov	r5, r8
   149ec:	d07d      	beq.n	14aea <bt_mesh_prov_auth+0x15e>
		if (size > bt_mesh_prov->output_size) {
   149ee:	7c5b      	ldrb	r3, [r3, #17]
   149f0:	42a3      	cmp	r3, r4
   149f2:	d37a      	bcc.n	14aea <bt_mesh_prov_auth+0x15e>
   149f4:	2010      	movs	r0, #16
   149f6:	f7ff ff69 	bl	148cc <atomic_or.constprop.4>
		if (output == BT_MESH_DISPLAY_STRING) {
   149fa:	2f10      	cmp	r7, #16
   149fc:	d12f      	bne.n	14a5e <bt_mesh_prov_auth+0xd2>
			bt_rand(str, size);
   149fe:	4621      	mov	r1, r4
   14a00:	a802      	add	r0, sp, #8
   14a02:	f014 f993 	bl	28d2c <bt_rand>
				str[i] %= 36;
   14a06:	2624      	movs	r6, #36	; 0x24
   14a08:	a802      	add	r0, sp, #8
			for (i = 0U; i < size; i++) {
   14a0a:	2100      	movs	r1, #0
   14a0c:	b2cb      	uxtb	r3, r1
   14a0e:	42a3      	cmp	r3, r4
   14a10:	d315      	bcc.n	14a3e <bt_mesh_prov_auth+0xb2>
			memcpy(bt_mesh_prov_link.auth, str, size);
   14a12:	4e37      	ldr	r6, [pc, #220]	; (14af0 <bt_mesh_prov_auth+0x164>)
			str[size] = '\0';
   14a14:	ab0a      	add	r3, sp, #40	; 0x28
   14a16:	4423      	add	r3, r4
   14a18:	2700      	movs	r7, #0
			memcpy(bt_mesh_prov_link.auth, str, size);
   14a1a:	4622      	mov	r2, r4
   14a1c:	a902      	add	r1, sp, #8
   14a1e:	4630      	mov	r0, r6
			str[size] = '\0';
   14a20:	f803 7c20 	strb.w	r7, [r3, #-32]
			memcpy(bt_mesh_prov_link.auth, str, size);
   14a24:	f011 fb9c 	bl	26160 <memcpy>
			(void)memset(bt_mesh_prov_link.auth + size, 0,
   14a28:	f1c4 0210 	rsb	r2, r4, #16
   14a2c:	4639      	mov	r1, r7
   14a2e:	1930      	adds	r0, r6, r4
   14a30:	f011 fbc0 	bl	261b4 <memset>
			return bt_mesh_prov->output_string((char *)str);
   14a34:	682b      	ldr	r3, [r5, #0]
   14a36:	a802      	add	r0, sp, #8
   14a38:	6a1b      	ldr	r3, [r3, #32]
   14a3a:	4798      	blx	r3
   14a3c:	e7bb      	b.n	149b6 <bt_mesh_prov_auth+0x2a>
				str[i] %= 36;
   14a3e:	7803      	ldrb	r3, [r0, #0]
   14a40:	fbb3 f2f6 	udiv	r2, r3, r6
   14a44:	fb06 3212 	mls	r2, r6, r2, r3
   14a48:	b2d2      	uxtb	r2, r2
				if (str[i] < 10) {
   14a4a:	b253      	sxtb	r3, r2
   14a4c:	2a09      	cmp	r2, #9
					str[i] += '0';
   14a4e:	bf94      	ite	ls
   14a50:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   14a52:	3337      	addhi	r3, #55	; 0x37
   14a54:	b2db      	uxtb	r3, r3
   14a56:	f800 3b01 	strb.w	r3, [r0], #1
   14a5a:	3101      	adds	r1, #1
   14a5c:	e7d6      	b.n	14a0c <bt_mesh_prov_auth+0x80>
			uint32_t div[8] = { 10, 100, 1000, 10000, 100000,
   14a5e:	4e26      	ldr	r6, [pc, #152]	; (14af8 <bt_mesh_prov_auth+0x16c>)
   14a60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14a62:	ad02      	add	r5, sp, #8
   14a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14a66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   14a6a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   14a6e:	2104      	movs	r1, #4
   14a70:	eb0d 0001 	add.w	r0, sp, r1
   14a74:	f014 f95a 	bl	28d2c <bt_rand>
			num %= div[size - 1];
   14a78:	ab0a      	add	r3, sp, #40	; 0x28
   14a7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   14a7e:	9d01      	ldr	r5, [sp, #4]
   14a80:	f854 2c24 	ldr.w	r2, [r4, #-36]
	dst[0] = val >> 8;
   14a84:	481d      	ldr	r0, [pc, #116]	; (14afc <bt_mesh_prov_auth+0x170>)
   14a86:	fbb5 f3f2 	udiv	r3, r5, r2
   14a8a:	fb02 5313 	mls	r3, r2, r3, r5
	sys_put_be16(val >> 16, dst);
   14a8e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   14a90:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   14a92:	7702      	strb	r2, [r0, #28]
	dst[0] = val >> 8;
   14a94:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14a98:	76c1      	strb	r1, [r0, #27]
   14a9a:	7742      	strb	r2, [r0, #29]
	dst[1] = val;
   14a9c:	7783      	strb	r3, [r0, #30]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   14a9e:	220c      	movs	r2, #12
   14aa0:	2100      	movs	r1, #0
   14aa2:	300f      	adds	r0, #15
			num %= div[size - 1];
   14aa4:	9301      	str	r3, [sp, #4]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   14aa6:	f011 fb85 	bl	261b4 <memset>
			return bt_mesh_prov->output_number(output, num);
   14aaa:	f8d8 3000 	ldr.w	r3, [r8]
   14aae:	9901      	ldr	r1, [sp, #4]
   14ab0:	69db      	ldr	r3, [r3, #28]
   14ab2:	4638      	mov	r0, r7
   14ab4:	4798      	blx	r3
   14ab6:	e77e      	b.n	149b6 <bt_mesh_prov_auth+0x2a>
	switch (action) {
   14ab8:	2903      	cmp	r1, #3
   14aba:	d816      	bhi.n	14aea <bt_mesh_prov_auth+0x15e>
   14abc:	4b10      	ldr	r3, [pc, #64]	; (14b00 <bt_mesh_prov_auth+0x174>)
   14abe:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   14ac0:	b19d      	cbz	r5, 14aea <bt_mesh_prov_auth+0x15e>
		if (!(bt_mesh_prov->input_actions & input)) {
   14ac2:	4e10      	ldr	r6, [pc, #64]	; (14b04 <bt_mesh_prov_auth+0x178>)
   14ac4:	6832      	ldr	r2, [r6, #0]
   14ac6:	8ad1      	ldrh	r1, [r2, #22]
   14ac8:	4229      	tst	r1, r5
   14aca:	d00e      	beq.n	14aea <bt_mesh_prov_auth+0x15e>
		if (size > bt_mesh_prov->input_size) {
   14acc:	7d13      	ldrb	r3, [r2, #20]
   14ace:	42a3      	cmp	r3, r4
   14ad0:	d30b      	bcc.n	14aea <bt_mesh_prov_auth+0x15e>
		if (input == BT_MESH_ENTER_STRING) {
   14ad2:	2d08      	cmp	r5, #8
   14ad4:	bf0c      	ite	eq
   14ad6:	4628      	moveq	r0, r5
   14ad8:	2004      	movne	r0, #4
   14ada:	f7ff fef7 	bl	148cc <atomic_or.constprop.4>
		return bt_mesh_prov->input(input, size);
   14ade:	6833      	ldr	r3, [r6, #0]
   14ae0:	4621      	mov	r1, r4
   14ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14ae4:	4628      	mov	r0, r5
   14ae6:	4798      	blx	r3
   14ae8:	e765      	b.n	149b6 <bt_mesh_prov_auth+0x2a>
			return -EINVAL;
   14aea:	f06f 0015 	mvn.w	r0, #21
   14aee:	e762      	b.n	149b6 <bt_mesh_prov_auth+0x2a>
   14af0:	200022ff 	.word	0x200022ff
   14af4:	00030029 	.word	0x00030029
   14af8:	0002ab1c 	.word	0x0002ab1c
   14afc:	200022f0 	.word	0x200022f0
   14b00:	0003002e 	.word	0x0003002e
   14b04:	200022ec 	.word	0x200022ec

00014b08 <bt_mesh_prov_get>:
}
   14b08:	4b01      	ldr	r3, [pc, #4]	; (14b10 <bt_mesh_prov_get+0x8>)
   14b0a:	6818      	ldr	r0, [r3, #0]
   14b0c:	4770      	bx	lr
   14b0e:	bf00      	nop
   14b10:	200022ec 	.word	0x200022ec

00014b14 <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14b14:	4b04      	ldr	r3, [pc, #16]	; (14b28 <bt_mesh_prov_active+0x14>)
   14b16:	f3bf 8f5b 	dmb	ish
   14b1a:	6818      	ldr	r0, [r3, #0]
   14b1c:	f3bf 8f5b 	dmb	ish
}
   14b20:	f3c0 0040 	ubfx	r0, r0, #1, #1
   14b24:	4770      	bx	lr
   14b26:	bf00      	nop
   14b28:	200022f0 	.word	0x200022f0

00014b2c <bt_mesh_prov_bearer_cb_get>:
};

const struct prov_bearer_cb *bt_mesh_prov_bearer_cb_get(void)
{
	return &prov_bearer_cb;
}
   14b2c:	4800      	ldr	r0, [pc, #0]	; (14b30 <bt_mesh_prov_bearer_cb_get+0x4>)
   14b2e:	4770      	bx	lr
   14b30:	0002b4f8 	.word	0x0002b4f8

00014b34 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr)
{
	if (bt_mesh_prov->complete) {
   14b34:	4b02      	ldr	r3, [pc, #8]	; (14b40 <bt_mesh_prov_complete+0xc>)
   14b36:	681b      	ldr	r3, [r3, #0]
   14b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14b3a:	b103      	cbz	r3, 14b3e <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr);
   14b3c:	4718      	bx	r3
	}
}
   14b3e:	4770      	bx	lr
   14b40:	200022ec 	.word	0x200022ec

00014b44 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
   14b44:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_reset();
   14b46:	f013 fd7a 	bl	2863e <pb_adv_reset>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_reset();
   14b4a:	f013 fd7e 	bl	2864a <pb_gatt_reset>
	}

	bt_mesh_prov_reset_state(NULL);
   14b4e:	2000      	movs	r0, #0
   14b50:	f7ff fee6 	bl	14920 <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
   14b54:	4b03      	ldr	r3, [pc, #12]	; (14b64 <bt_mesh_prov_reset+0x20>)
   14b56:	681b      	ldr	r3, [r3, #0]
   14b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14b5a:	b113      	cbz	r3, 14b62 <bt_mesh_prov_reset+0x1e>
		bt_mesh_prov->reset();
	}
}
   14b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
   14b60:	4718      	bx	r3
}
   14b62:	bd10      	pop	{r4, pc}
   14b64:	200022ec 	.word	0x200022ec

00014b68 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   14b68:	b508      	push	{r3, lr}
	if (!prov_info) {
   14b6a:	b150      	cbz	r0, 14b82 <bt_mesh_prov_init+0x1a>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
   14b6c:	4b08      	ldr	r3, [pc, #32]	; (14b90 <bt_mesh_prov_init+0x28>)
   14b6e:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
   14b70:	f001 f966 	bl	15e40 <pb_adv_init>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
   14b74:	f001 fa30 	bl	15fd8 <pb_gatt_init>
	}

	return bt_mesh_prov_reset_state(NULL);
   14b78:	2000      	movs	r0, #0
}
   14b7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(NULL);
   14b7e:	f7ff becf 	b.w	14920 <bt_mesh_prov_reset_state>
		BT_ERR("No provisioning context provided");
   14b82:	2145      	movs	r1, #69	; 0x45
   14b84:	4803      	ldr	r0, [pc, #12]	; (14b94 <bt_mesh_prov_init+0x2c>)
   14b86:	f00f fb59 	bl	2423c <printk>
}
   14b8a:	f06f 0015 	mvn.w	r0, #21
   14b8e:	bd08      	pop	{r3, pc}
   14b90:	200022ec 	.word	0x200022ec
   14b94:	00030032 	.word	0x00030032

00014b98 <bt_mesh_prov_send>:
extern const struct bt_mesh_prov *bt_mesh_prov;

static inline int bt_mesh_prov_send(struct net_buf_simple *buf,
				    prov_bearer_send_complete_t cb)
{
	return bt_mesh_prov_link.bearer->send(buf, cb, NULL);
   14b98:	4b02      	ldr	r3, [pc, #8]	; (14ba4 <bt_mesh_prov_send+0xc>)
   14b9a:	685b      	ldr	r3, [r3, #4]
   14b9c:	2200      	movs	r2, #0
   14b9e:	689b      	ldr	r3, [r3, #8]
   14ba0:	4718      	bx	r3
   14ba2:	bf00      	nop
   14ba4:	200022f0 	.word	0x200022f0

00014ba8 <prov_link_opened>:
	reset_state();
}

static void prov_link_opened(void)
{
	bt_mesh_prov_link.expect = PROV_INVITE;
   14ba8:	4b02      	ldr	r3, [pc, #8]	; (14bb4 <prov_link_opened+0xc>)
   14baa:	2200      	movs	r2, #0
   14bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   14bb0:	4770      	bx	lr
   14bb2:	bf00      	nop
   14bb4:	200022f0 	.word	0x200022f0

00014bb8 <send_input_complete>:
{
   14bb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	PROV_BUF(buf, 1);
   14bba:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   14bbe:	ab01      	add	r3, sp, #4
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   14bc0:	2104      	movs	r1, #4
   14bc2:	a803      	add	r0, sp, #12
	PROV_BUF(buf, 1);
   14bc4:	9303      	str	r3, [sp, #12]
   14bc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_prov_buf_init(&buf, PROV_INPUT_COMPLETE);
   14bca:	f013 fd27 	bl	2861c <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&buf, NULL)) {
   14bce:	2100      	movs	r1, #0
   14bd0:	a803      	add	r0, sp, #12
   14bd2:	f7ff ffe1 	bl	14b98 <bt_mesh_prov_send>
   14bd6:	b118      	cbz	r0, 14be0 <send_input_complete+0x28>
		BT_ERR("Failed to send Provisioning Input Complete");
   14bd8:	2145      	movs	r1, #69	; 0x45
   14bda:	4805      	ldr	r0, [pc, #20]	; (14bf0 <send_input_complete+0x38>)
   14bdc:	f00f fb2e 	bl	2423c <printk>
	bt_mesh_prov_link.expect = PROV_CONFIRM;
   14be0:	4b04      	ldr	r3, [pc, #16]	; (14bf4 <send_input_complete+0x3c>)
   14be2:	2205      	movs	r2, #5
   14be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
   14be8:	b007      	add	sp, #28
   14bea:	f85d fb04 	ldr.w	pc, [sp], #4
   14bee:	bf00      	nop
   14bf0:	0003052a 	.word	0x0003052a
   14bf4:	200022f0 	.word	0x200022f0

00014bf8 <prov_send_fail_msg>:
{
   14bf8:	b510      	push	{r4, lr}
   14bfa:	b086      	sub	sp, #24
	PROV_BUF(buf, 2);
   14bfc:	ab01      	add	r3, sp, #4
   14bfe:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
   14c02:	e9cd 2304 	strd	r2, r3, [sp, #16]
   14c06:	9303      	str	r3, [sp, #12]
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   14c08:	4b0b      	ldr	r3, [pc, #44]	; (14c38 <prov_send_fail_msg+0x40>)
   14c0a:	22ff      	movs	r2, #255	; 0xff
{
   14c0c:	4604      	mov	r4, r0
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   14c0e:	2109      	movs	r1, #9
   14c10:	a803      	add	r0, sp, #12
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   14c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	bt_mesh_prov_buf_init(&buf, PROV_FAILED);
   14c16:	f013 fd01 	bl	2861c <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, err);
   14c1a:	4621      	mov	r1, r4
   14c1c:	a803      	add	r0, sp, #12
   14c1e:	f014 feca 	bl	299b6 <net_buf_simple_add_u8>
	if (bt_mesh_prov_send(&buf, NULL)) {
   14c22:	2100      	movs	r1, #0
   14c24:	a803      	add	r0, sp, #12
   14c26:	f7ff ffb7 	bl	14b98 <bt_mesh_prov_send>
   14c2a:	b118      	cbz	r0, 14c34 <prov_send_fail_msg+0x3c>
		BT_ERR("Failed to send Provisioning Failed message");
   14c2c:	2145      	movs	r1, #69	; 0x45
   14c2e:	4803      	ldr	r0, [pc, #12]	; (14c3c <prov_send_fail_msg+0x44>)
   14c30:	f00f fb04 	bl	2423c <printk>
}
   14c34:	b006      	add	sp, #24
   14c36:	bd10      	pop	{r4, pc}
   14c38:	200022f0 	.word	0x200022f0
   14c3c:	0003046e 	.word	0x0003046e

00014c40 <prov_invite>:
{
   14c40:	b530      	push	{r4, r5, lr}
   14c42:	b089      	sub	sp, #36	; 0x24
	if (data[0]) {
   14c44:	7801      	ldrb	r1, [r0, #0]
	PROV_BUF(buf, 12);
   14c46:	ab03      	add	r3, sp, #12
   14c48:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   14c4c:	4604      	mov	r4, r0
	PROV_BUF(buf, 12);
   14c4e:	9300      	str	r3, [sp, #0]
   14c50:	e9cd 2301 	strd	r2, r3, [sp, #4]
	if (data[0]) {
   14c54:	b111      	cbz	r1, 14c5c <prov_invite+0x1c>
		bt_mesh_attention(NULL, data[0]);
   14c56:	2000      	movs	r0, #0
   14c58:	f7fe fc86 	bl	13568 <bt_mesh_attention>
	bt_mesh_prov_link.conf_inputs[0] = data[0];
   14c5c:	4d24      	ldr	r5, [pc, #144]	; (14cf0 <prov_invite+0xb0>)
   14c5e:	7823      	ldrb	r3, [r4, #0]
   14c60:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	bt_mesh_prov_buf_init(&buf, PROV_CAPABILITIES);
   14c64:	2101      	movs	r1, #1
   14c66:	4668      	mov	r0, sp
   14c68:	f013 fcd8 	bl	2861c <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&buf, bt_mesh_elem_count());
   14c6c:	f7fc fb12 	bl	11294 <bt_mesh_elem_count>
   14c70:	4601      	mov	r1, r0
   14c72:	4668      	mov	r0, sp
   14c74:	f014 fe9f 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   14c78:	4c1e      	ldr	r4, [pc, #120]	; (14cf4 <prov_invite+0xb4>)
	net_buf_simple_add_be16(&buf, BIT(PROV_ALG_P256));
   14c7a:	2101      	movs	r1, #1
   14c7c:	4668      	mov	r0, sp
   14c7e:	f014 feaa 	bl	299d6 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, PUB_KEY_NO_OOB);
   14c82:	2100      	movs	r1, #0
   14c84:	4668      	mov	r0, sp
   14c86:	f014 fe96 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->static_val ? BIT(0) : 0x00);
   14c8a:	6823      	ldr	r3, [r4, #0]
   14c8c:	68d9      	ldr	r1, [r3, #12]
   14c8e:	3100      	adds	r1, #0
   14c90:	bf18      	it	ne
   14c92:	2101      	movne	r1, #1
   14c94:	4668      	mov	r0, sp
   14c96:	f014 fe8e 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->output_size);
   14c9a:	6823      	ldr	r3, [r4, #0]
   14c9c:	4668      	mov	r0, sp
   14c9e:	7c59      	ldrb	r1, [r3, #17]
   14ca0:	f014 fe89 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->output_actions);
   14ca4:	6823      	ldr	r3, [r4, #0]
   14ca6:	4668      	mov	r0, sp
   14ca8:	8a59      	ldrh	r1, [r3, #18]
   14caa:	f014 fe94 	bl	299d6 <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&buf, bt_mesh_prov->input_size);
   14cae:	6823      	ldr	r3, [r4, #0]
   14cb0:	4668      	mov	r0, sp
   14cb2:	7d19      	ldrb	r1, [r3, #20]
   14cb4:	f014 fe7f 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_be16(&buf, bt_mesh_prov->input_actions);
   14cb8:	6823      	ldr	r3, [r4, #0]
   14cba:	4668      	mov	r0, sp
   14cbc:	8ad9      	ldrh	r1, [r3, #22]
   14cbe:	f014 fe8a 	bl	299d6 <net_buf_simple_add_be16>
	memcpy(&bt_mesh_prov_link.conf_inputs[1], &buf.data[1], 11);
   14cc2:	9900      	ldr	r1, [sp, #0]
   14cc4:	220b      	movs	r2, #11
   14cc6:	3101      	adds	r1, #1
   14cc8:	f105 0081 	add.w	r0, r5, #129	; 0x81
   14ccc:	f011 fa48 	bl	26160 <memcpy>
	if (bt_mesh_prov_send(&buf, NULL)) {
   14cd0:	2100      	movs	r1, #0
   14cd2:	4668      	mov	r0, sp
   14cd4:	f7ff ff60 	bl	14b98 <bt_mesh_prov_send>
   14cd8:	b128      	cbz	r0, 14ce6 <prov_invite+0xa6>
		BT_ERR("Failed to send capabilities");
   14cda:	2145      	movs	r1, #69	; 0x45
   14cdc:	4806      	ldr	r0, [pc, #24]	; (14cf8 <prov_invite+0xb8>)
   14cde:	f00f faad 	bl	2423c <printk>
}
   14ce2:	b009      	add	sp, #36	; 0x24
   14ce4:	bd30      	pop	{r4, r5, pc}
	bt_mesh_prov_link.expect = PROV_START;
   14ce6:	2302      	movs	r3, #2
   14ce8:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
   14cec:	e7f9      	b.n	14ce2 <prov_invite+0xa2>
   14cee:	bf00      	nop
   14cf0:	200022f0 	.word	0x200022f0
   14cf4:	200022ec 	.word	0x200022ec
   14cf8:	00030353 	.word	0x00030353

00014cfc <prov_link_closed>:
	return bt_mesh_prov_reset_state(pub_key_ready);
   14cfc:	4801      	ldr	r0, [pc, #4]	; (14d04 <prov_link_closed+0x8>)
   14cfe:	f7ff be0f 	b.w	14920 <bt_mesh_prov_reset_state>
   14d02:	bf00      	nop
   14d04:	00014fc5 	.word	0x00014fc5

00014d08 <prov_random>:
{
   14d08:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   14d0a:	4c31      	ldr	r4, [pc, #196]	; (14dd0 <prov_random+0xc8>)
{
   14d0c:	b08f      	sub	sp, #60	; 0x3c
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   14d0e:	2210      	movs	r2, #16
   14d10:	4621      	mov	r1, r4
{
   14d12:	4606      	mov	r6, r0
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   14d14:	f011 f9fd 	bl	26112 <memcmp>
   14d18:	b940      	cbnz	r0, 14d2c <prov_random+0x24>
		BT_ERR("Random value is identical to ours, rejecting.");
   14d1a:	482e      	ldr	r0, [pc, #184]	; (14dd4 <prov_random+0xcc>)
   14d1c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid confirmation value");
   14d1e:	f00f fa8d 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   14d22:	2004      	movs	r0, #4
   14d24:	f7ff ff68 	bl	14bf8 <prov_send_fail_msg>
}
   14d28:	b00f      	add	sp, #60	; 0x3c
   14d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, data,
   14d2c:	466b      	mov	r3, sp
   14d2e:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   14d32:	4631      	mov	r1, r6
   14d34:	f104 0020 	add.w	r0, r4, #32
   14d38:	f013 f976 	bl	28028 <bt_mesh_prov_conf>
   14d3c:	b128      	cbz	r0, 14d4a <prov_random+0x42>
		BT_ERR("Unable to calculate confirmation verification");
   14d3e:	4826      	ldr	r0, [pc, #152]	; (14dd8 <prov_random+0xd0>)
   14d40:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Failed to generate provisioning salt");
   14d42:	f00f fa7b 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   14d46:	2007      	movs	r0, #7
   14d48:	e7ec      	b.n	14d24 <prov_random+0x1c>
	if (memcmp(conf_verify, bt_mesh_prov_link.conf, 16)) {
   14d4a:	f1a4 0110 	sub.w	r1, r4, #16
   14d4e:	2210      	movs	r2, #16
   14d50:	4668      	mov	r0, sp
   14d52:	f011 f9de 	bl	26112 <memcmp>
   14d56:	4601      	mov	r1, r0
   14d58:	b110      	cbz	r0, 14d60 <prov_random+0x58>
		BT_ERR("Invalid confirmation value");
   14d5a:	2145      	movs	r1, #69	; 0x45
   14d5c:	481f      	ldr	r0, [pc, #124]	; (14ddc <prov_random+0xd4>)
   14d5e:	e7de      	b.n	14d1e <prov_random+0x16>
static inline int bt_mesh_prov_salt(const uint8_t conf_salt[16],
				    const uint8_t prov_rand[16],
				    const uint8_t dev_rand[16],
				    uint8_t prov_salt[16])
{
	const uint8_t prov_salt_key[16] = { 0 };
   14d60:	2510      	movs	r5, #16
   14d62:	462a      	mov	r2, r5
   14d64:	eb0d 0005 	add.w	r0, sp, r5
   14d68:	f011 fa24 	bl	261b4 <memset>
	struct bt_mesh_sg sg[] = {
   14d6c:	1963      	adds	r3, r4, r5
   14d6e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   14d72:	ae08      	add	r6, sp, #32
	struct bt_mesh_sg sg[] = {
   14d74:	e9cd 3508 	strd	r3, r5, [sp, #32]
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   14d78:	2203      	movs	r2, #3
   14d7a:	f104 03c1 	add.w	r3, r4, #193	; 0xc1
   14d7e:	4631      	mov	r1, r6
   14d80:	eb0d 0005 	add.w	r0, sp, r5
	struct bt_mesh_sg sg[] = {
   14d84:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   14d88:	f012 ffc7 	bl	27d1a <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(bt_mesh_prov_link.conf_salt, data,
   14d8c:	4607      	mov	r7, r0
   14d8e:	b110      	cbz	r0, 14d96 <prov_random+0x8e>
		BT_ERR("Failed to generate provisioning salt");
   14d90:	2145      	movs	r1, #69	; 0x45
   14d92:	4813      	ldr	r0, [pc, #76]	; (14de0 <prov_random+0xd8>)
   14d94:	e7d5      	b.n	14d42 <prov_random+0x3a>
	PROV_BUF(rnd, 17);
   14d96:	f44f 13b0 	mov.w	r3, #1441792	; 0x160000
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   14d9a:	2106      	movs	r1, #6
   14d9c:	a804      	add	r0, sp, #16
	PROV_BUF(rnd, 17);
   14d9e:	e9cd 3605 	strd	r3, r6, [sp, #20]
   14da2:	9604      	str	r6, [sp, #16]
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   14da4:	f013 fc3a 	bl	2861c <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&rnd, bt_mesh_prov_link.rand, 16);
   14da8:	4621      	mov	r1, r4
   14daa:	462a      	mov	r2, r5
   14dac:	a804      	add	r0, sp, #16
   14dae:	f014 fdf6 	bl	2999e <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&rnd, NULL)) {
   14db2:	4639      	mov	r1, r7
   14db4:	a804      	add	r0, sp, #16
   14db6:	f7ff feef 	bl	14b98 <bt_mesh_prov_send>
   14dba:	b120      	cbz	r0, 14dc6 <prov_random+0xbe>
		BT_ERR("Failed to send Provisioning Random");
   14dbc:	2145      	movs	r1, #69	; 0x45
   14dbe:	4809      	ldr	r0, [pc, #36]	; (14de4 <prov_random+0xdc>)
   14dc0:	f00f fa3c 	bl	2423c <printk>
		return;
   14dc4:	e7b0      	b.n	14d28 <prov_random+0x20>
	bt_mesh_prov_link.expect = PROV_DATA;
   14dc6:	2307      	movs	r3, #7
   14dc8:	f804 3c11 	strb.w	r3, [r4, #-17]
   14dcc:	e7ac      	b.n	14d28 <prov_random+0x20>
   14dce:	bf00      	nop
   14dd0:	20002340 	.word	0x20002340
   14dd4:	00030396 	.word	0x00030396
   14dd8:	000303c9 	.word	0x000303c9
   14ddc:	000303fc 	.word	0x000303fc
   14de0:	0003041c 	.word	0x0003041c
   14de4:	00030446 	.word	0x00030446

00014de8 <prov_data>:
{
   14de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dec:	b09f      	sub	sp, #124	; 0x7c
	PROV_BUF(msg, 1);
   14dee:	ab06      	add	r3, sp, #24
   14df0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   14df4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   14df8:	4a43      	ldr	r2, [pc, #268]	; (14f08 <prov_data+0x120>)
   14dfa:	9308      	str	r3, [sp, #32]
   14dfc:	ad0f      	add	r5, sp, #60	; 0x3c
{
   14dfe:	4606      	mov	r6, r0
   14e00:	9500      	str	r5, [sp, #0]
   14e02:	4b42      	ldr	r3, [pc, #264]	; (14f0c <prov_data+0x124>)
   14e04:	2120      	movs	r1, #32
   14e06:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   14e0a:	f012 ffc9 	bl	27da0 <bt_mesh_k1>
	if (err) {
   14e0e:	b128      	cbz	r0, 14e1c <prov_data+0x34>
		BT_ERR("Unable to generate session key");
   14e10:	483f      	ldr	r0, [pc, #252]	; (14f10 <prov_data+0x128>)
   14e12:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to generate session nonce");
   14e14:	f00f fa12 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   14e18:	2007      	movs	r0, #7
   14e1a:	e01c      	b.n	14e56 <prov_data+0x6e>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   14e1c:	4a3a      	ldr	r2, [pc, #232]	; (14f08 <prov_data+0x120>)
   14e1e:	4b3d      	ldr	r3, [pc, #244]	; (14f14 <prov_data+0x12c>)
   14e20:	ac17      	add	r4, sp, #92	; 0x5c
   14e22:	9400      	str	r4, [sp, #0]
   14e24:	2120      	movs	r1, #32
   14e26:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   14e2a:	f012 ffb9 	bl	27da0 <bt_mesh_k1>
	if (!err) {
   14e2e:	2800      	cmp	r0, #0
   14e30:	d167      	bne.n	14f02 <prov_data+0x11a>
		memcpy(nonce, tmp + 3, 13);
   14e32:	220d      	movs	r2, #13
   14e34:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
   14e38:	a80b      	add	r0, sp, #44	; 0x2c
   14e3a:	f011 f991 	bl	26160 <memcpy>
	err = bt_mesh_prov_decrypt(session_key, nonce, data, pdu);
   14e3e:	4623      	mov	r3, r4
   14e40:	4632      	mov	r2, r6
   14e42:	a90b      	add	r1, sp, #44	; 0x2c
   14e44:	4628      	mov	r0, r5
   14e46:	f013 f8fc 	bl	28042 <bt_mesh_prov_decrypt>
	if (err) {
   14e4a:	b138      	cbz	r0, 14e5c <prov_data+0x74>
		BT_ERR("Unable to decrypt provisioning data");
   14e4c:	4832      	ldr	r0, [pc, #200]	; (14f18 <prov_data+0x130>)
   14e4e:	2145      	movs	r1, #69	; 0x45
   14e50:	f00f f9f4 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   14e54:	2006      	movs	r0, #6
   14e56:	f7ff fecf 	bl	14bf8 <prov_send_fail_msg>
		return;
   14e5a:	e032      	b.n	14ec2 <prov_data+0xda>
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   14e5c:	4a2a      	ldr	r2, [pc, #168]	; (14f08 <prov_data+0x120>)
   14e5e:	4b2f      	ldr	r3, [pc, #188]	; (14f1c <prov_data+0x134>)
   14e60:	af13      	add	r7, sp, #76	; 0x4c
   14e62:	9700      	str	r7, [sp, #0]
   14e64:	2120      	movs	r1, #32
   14e66:	f1a2 00f2 	sub.w	r0, r2, #242	; 0xf2
   14e6a:	f012 ff99 	bl	27da0 <bt_mesh_k1>
	if (err) {
   14e6e:	4680      	mov	r8, r0
   14e70:	b110      	cbz	r0, 14e78 <prov_data+0x90>
		BT_ERR("Unable to generate device key");
   14e72:	2145      	movs	r1, #69	; 0x45
   14e74:	482a      	ldr	r0, [pc, #168]	; (14f20 <prov_data+0x138>)
   14e76:	e7cd      	b.n	14e14 <prov_data+0x2c>
	flags = pdu[18];
   14e78:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
   14e7c:	9302      	str	r3, [sp, #8]
	return ((uint16_t)src[0] << 8) | src[1];
   14e7e:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   14e82:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
   14e86:	9305      	str	r3, [sp, #20]
	bt_mesh_prov_buf_init(&msg, PROV_COMPLETE);
   14e88:	2108      	movs	r1, #8
   14e8a:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
   14e8e:	9303      	str	r3, [sp, #12]
   14e90:	a808      	add	r0, sp, #32
   14e92:	9204      	str	r2, [sp, #16]
   14e94:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
   14e98:	f89d 906d 	ldrb.w	r9, [sp, #109]	; 0x6d
   14e9c:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
   14ea0:	f89d 5072 	ldrb.w	r5, [sp, #114]	; 0x72
   14ea4:	f89d b073 	ldrb.w	fp, [sp, #115]	; 0x73
   14ea8:	f013 fbb8 	bl	2861c <bt_mesh_prov_buf_init>
	if (bt_mesh_prov_send(&msg, NULL)) {
   14eac:	4641      	mov	r1, r8
   14eae:	a808      	add	r0, sp, #32
   14eb0:	f7ff fe72 	bl	14b98 <bt_mesh_prov_send>
   14eb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14eb8:	b130      	cbz	r0, 14ec8 <prov_data+0xe0>
		BT_ERR("Failed to send Provisioning Complete");
   14eba:	2145      	movs	r1, #69	; 0x45
   14ebc:	4819      	ldr	r0, [pc, #100]	; (14f24 <prov_data+0x13c>)
   14ebe:	f00f f9bd 	bl	2423c <printk>
}
   14ec2:	b01f      	add	sp, #124	; 0x7c
   14ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   14ec8:	4917      	ldr	r1, [pc, #92]	; (14f28 <prov_data+0x140>)
   14eca:	20ff      	movs	r0, #255	; 0xff
   14ecc:	f881 003f 	strb.w	r0, [r1, #63]	; 0x3f
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   14ed0:	9903      	ldr	r1, [sp, #12]
	err = bt_mesh_provision(pdu, net_idx, flags, iv_index, addr, dev_key);
   14ed2:	9701      	str	r7, [sp, #4]
   14ed4:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
   14ed8:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
   14edc:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
   14ee0:	9200      	str	r2, [sp, #0]
   14ee2:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   14ee6:	9a02      	ldr	r2, [sp, #8]
   14ee8:	ea49 210a 	orr.w	r1, r9, sl, lsl #8
   14eec:	4620      	mov	r0, r4
   14eee:	f7f7 ff65 	bl	cdbc <bt_mesh_provision>
	if (err) {
   14ef2:	4602      	mov	r2, r0
   14ef4:	2800      	cmp	r0, #0
   14ef6:	d0e4      	beq.n	14ec2 <prov_data+0xda>
		BT_ERR("Failed to provision (err %d)", err);
   14ef8:	2145      	movs	r1, #69	; 0x45
   14efa:	480c      	ldr	r0, [pc, #48]	; (14f2c <prov_data+0x144>)
   14efc:	f00f f99e 	bl	2423c <printk>
		return;
   14f00:	e7df      	b.n	14ec2 <prov_data+0xda>
		BT_ERR("Unable to generate session nonce");
   14f02:	2145      	movs	r1, #69	; 0x45
   14f04:	480a      	ldr	r0, [pc, #40]	; (14f30 <prov_data+0x148>)
   14f06:	e785      	b.n	14e14 <prov_data+0x2c>
   14f08:	20002401 	.word	0x20002401
   14f0c:	000301eb 	.word	0x000301eb
   14f10:	000301f0 	.word	0x000301f0
   14f14:	00030214 	.word	0x00030214
   14f18:	00030219 	.word	0x00030219
   14f1c:	00030242 	.word	0x00030242
   14f20:	00030247 	.word	0x00030247
   14f24:	0003026a 	.word	0x0003026a
   14f28:	200022f0 	.word	0x200022f0
   14f2c:	00030294 	.word	0x00030294
   14f30:	000302b6 	.word	0x000302b6

00014f34 <sys_memcpy_swap.constprop.10>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14f34:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   14f36:	b570      	push	{r4, r5, r6, lr}
   14f38:	4604      	mov	r4, r0
   14f3a:	460e      	mov	r6, r1
   14f3c:	f101 0520 	add.w	r5, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14f40:	d915      	bls.n	14f6e <sys_memcpy_swap.constprop.10+0x3a>
   14f42:	42a8      	cmp	r0, r5
   14f44:	d20a      	bcs.n	14f5c <sys_memcpy_swap.constprop.10+0x28>
   14f46:	490c      	ldr	r1, [pc, #48]	; (14f78 <sys_memcpy_swap.constprop.10+0x44>)
   14f48:	480c      	ldr	r0, [pc, #48]	; (14f7c <sys_memcpy_swap.constprop.10+0x48>)
   14f4a:	f240 2219 	movw	r2, #537	; 0x219
   14f4e:	f00f f975 	bl	2423c <printk>
   14f52:	f240 2119 	movw	r1, #537	; 0x219
   14f56:	4808      	ldr	r0, [pc, #32]	; (14f78 <sys_memcpy_swap.constprop.10+0x44>)
   14f58:	f00f fc22 	bl	247a0 <assert_post_action>
	for (; length > 0; length--) {
   14f5c:	462b      	mov	r3, r5
   14f5e:	3c01      	subs	r4, #1
		*pdst++ = *psrc--;
   14f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   14f64:	f804 2f01 	strb.w	r2, [r4, #1]!
	for (; length > 0; length--) {
   14f68:	42b3      	cmp	r3, r6
   14f6a:	d1f9      	bne.n	14f60 <sys_memcpy_swap.constprop.10+0x2c>
}
   14f6c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   14f6e:	d0ea      	beq.n	14f46 <sys_memcpy_swap.constprop.10+0x12>
   14f70:	f100 0320 	add.w	r3, r0, #32
   14f74:	4299      	cmp	r1, r3
   14f76:	e7e5      	b.n	14f44 <sys_memcpy_swap.constprop.10+0x10>
   14f78:	0002c90e 	.word	0x0002c90e
   14f7c:	0002bced 	.word	0x0002bced

00014f80 <prov_dh_key_gen>:
{
   14f80:	b500      	push	{lr}
   14f82:	b091      	sub	sp, #68	; 0x44
	sys_memcpy_swap(remote_pk_le, remote_pk, 32);
   14f84:	490b      	ldr	r1, [pc, #44]	; (14fb4 <prov_dh_key_gen+0x34>)
   14f86:	4668      	mov	r0, sp
   14f88:	f7ff ffd4 	bl	14f34 <sys_memcpy_swap.constprop.10>
	sys_memcpy_swap(&remote_pk_le[32], &remote_pk[32], 32);
   14f8c:	490a      	ldr	r1, [pc, #40]	; (14fb8 <prov_dh_key_gen+0x38>)
   14f8e:	a808      	add	r0, sp, #32
   14f90:	f7ff ffd0 	bl	14f34 <sys_memcpy_swap.constprop.10>
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   14f94:	4909      	ldr	r1, [pc, #36]	; (14fbc <prov_dh_key_gen+0x3c>)
   14f96:	4668      	mov	r0, sp
   14f98:	f7f4 fb76 	bl	9688 <bt_dh_key_gen>
   14f9c:	b130      	cbz	r0, 14fac <prov_dh_key_gen+0x2c>
		BT_ERR("Failed to generate DHKey");
   14f9e:	4808      	ldr	r0, [pc, #32]	; (14fc0 <prov_dh_key_gen+0x40>)
   14fa0:	2145      	movs	r1, #69	; 0x45
   14fa2:	f00f f94b 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   14fa6:	2007      	movs	r0, #7
   14fa8:	f7ff fe26 	bl	14bf8 <prov_send_fail_msg>
}
   14fac:	b011      	add	sp, #68	; 0x44
   14fae:	f85d fb04 	ldr.w	pc, [sp], #4
   14fb2:	bf00      	nop
   14fb4:	20002381 	.word	0x20002381
   14fb8:	200023a1 	.word	0x200023a1
   14fbc:	000150c9 	.word	0x000150c9
   14fc0:	00030335 	.word	0x00030335

00014fc4 <pub_key_ready>:
	if (!pkey) {
   14fc4:	b918      	cbnz	r0, 14fce <pub_key_ready+0xa>
		BT_WARN("Public key not available");
   14fc6:	2157      	movs	r1, #87	; 0x57
   14fc8:	480a      	ldr	r0, [pc, #40]	; (14ff4 <pub_key_ready+0x30>)
   14fca:	f00f b937 	b.w	2423c <printk>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14fce:	4b0a      	ldr	r3, [pc, #40]	; (14ff8 <pub_key_ready+0x34>)
   14fd0:	f3bf 8f5b 	dmb	ish
   14fd4:	e853 2f00 	ldrex	r2, [r3]
   14fd8:	f022 0101 	bic.w	r1, r2, #1
   14fdc:	e843 1000 	strex	r0, r1, [r3]
   14fe0:	2800      	cmp	r0, #0
   14fe2:	d1f7      	bne.n	14fd4 <pub_key_ready+0x10>
   14fe4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_PUB_KEY)) {
   14fe8:	07d3      	lsls	r3, r2, #31
   14fea:	d501      	bpl.n	14ff0 <pub_key_ready+0x2c>
		prov_dh_key_gen();
   14fec:	f7ff bfc8 	b.w	14f80 <prov_dh_key_gen>
}
   14ff0:	4770      	bx	lr
   14ff2:	bf00      	nop
   14ff4:	00030100 	.word	0x00030100
   14ff8:	200022f0 	.word	0x200022f0

00014ffc <atomic_test_bit.constprop.12>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14ffc:	4b05      	ldr	r3, [pc, #20]	; (15014 <atomic_test_bit.constprop.12+0x18>)
   14ffe:	f3bf 8f5b 	dmb	ish
   15002:	681b      	ldr	r3, [r3, #0]
   15004:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15008:	fa43 f000 	asr.w	r0, r3, r0
}
   1500c:	f000 0001 	and.w	r0, r0, #1
   15010:	4770      	bx	lr
   15012:	bf00      	nop
   15014:	200022f0 	.word	0x200022f0

00015018 <prov_start>:
{
   15018:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (data[0] != PROV_ALG_P256) {
   1501a:	7802      	ldrb	r2, [r0, #0]
{
   1501c:	4604      	mov	r4, r0
	if (data[0] != PROV_ALG_P256) {
   1501e:	b14a      	cbz	r2, 15034 <prov_start+0x1c>
		BT_ERR("Unknown algorithm 0x%02x", data[0]);
   15020:	4822      	ldr	r0, [pc, #136]	; (150ac <prov_start+0x94>)
   15022:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   15024:	f00f f90a 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   15028:	2002      	movs	r0, #2
}
   1502a:	b003      	add	sp, #12
   1502c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	prov_send_fail_msg(reason);
   15030:	f7ff bde2 	b.w	14bf8 <prov_send_fail_msg>
	if (data[1] != PUB_KEY_NO_OOB) {
   15034:	7842      	ldrb	r2, [r0, #1]
   15036:	b112      	cbz	r2, 1503e <prov_start+0x26>
		BT_ERR("Invalid public key type: 0x%02x", data[1]);
   15038:	2145      	movs	r1, #69	; 0x45
   1503a:	481d      	ldr	r0, [pc, #116]	; (150b0 <prov_start+0x98>)
   1503c:	e7f2      	b.n	15024 <prov_start+0xc>
	memcpy(&bt_mesh_prov_link.conf_inputs[12], data, 5);
   1503e:	4601      	mov	r1, r0
   15040:	2205      	movs	r2, #5
   15042:	481c      	ldr	r0, [pc, #112]	; (150b4 <prov_start+0x9c>)
   15044:	f011 f88c 	bl	26160 <memcpy>
	bt_mesh_prov_link.expect = PROV_PUB_KEY;
   15048:	4b1b      	ldr	r3, [pc, #108]	; (150b8 <prov_start+0xa0>)
   1504a:	2203      	movs	r2, #3
   1504c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	if (bt_mesh_prov_auth(data[2], data[3], data[4]) < 0) {
   15050:	7922      	ldrb	r2, [r4, #4]
   15052:	78e1      	ldrb	r1, [r4, #3]
   15054:	78a0      	ldrb	r0, [r4, #2]
   15056:	f7ff fc99 	bl	1498c <bt_mesh_prov_auth>
   1505a:	2800      	cmp	r0, #0
   1505c:	da0a      	bge.n	15074 <prov_start+0x5c>
		BT_ERR("Invalid authentication method: 0x%02x; "
   1505e:	7923      	ldrb	r3, [r4, #4]
   15060:	9300      	str	r3, [sp, #0]
   15062:	4816      	ldr	r0, [pc, #88]	; (150bc <prov_start+0xa4>)
   15064:	78e3      	ldrb	r3, [r4, #3]
   15066:	78a2      	ldrb	r2, [r4, #2]
   15068:	2145      	movs	r1, #69	; 0x45
   1506a:	f00f f8e7 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   1506e:	2002      	movs	r0, #2
   15070:	f7ff fdc2 	bl	14bf8 <prov_send_fail_msg>
	if (atomic_test_bit(bt_mesh_prov_link.flags, OOB_STATIC_KEY)) {
   15074:	200c      	movs	r0, #12
   15076:	f7ff ffc1 	bl	14ffc <atomic_test_bit.constprop.12>
   1507a:	b1a0      	cbz	r0, 150a6 <prov_start+0x8e>
		memcpy(bt_mesh_prov_link.auth + 16 - bt_mesh_prov->static_val_len,
   1507c:	4d10      	ldr	r5, [pc, #64]	; (150c0 <prov_start+0xa8>)
   1507e:	4c11      	ldr	r4, [pc, #68]	; (150c4 <prov_start+0xac>)
   15080:	682b      	ldr	r3, [r5, #0]
   15082:	7c1a      	ldrb	r2, [r3, #16]
   15084:	68d9      	ldr	r1, [r3, #12]
   15086:	f1c2 0010 	rsb	r0, r2, #16
   1508a:	4420      	add	r0, r4
   1508c:	f011 f868 	bl	26160 <memcpy>
			     sizeof(bt_mesh_prov_link.auth) - bt_mesh_prov->static_val_len);
   15090:	682b      	ldr	r3, [r5, #0]
   15092:	7c1a      	ldrb	r2, [r3, #16]
		(void)memset(bt_mesh_prov_link.auth, 0,
   15094:	2100      	movs	r1, #0
   15096:	f1c2 0210 	rsb	r2, r2, #16
   1509a:	4620      	mov	r0, r4
}
   1509c:	b003      	add	sp, #12
   1509e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		(void)memset(bt_mesh_prov_link.auth, 0,
   150a2:	f011 b887 	b.w	261b4 <memset>
}
   150a6:	b003      	add	sp, #12
   150a8:	bd30      	pop	{r4, r5, pc}
   150aa:	bf00      	nop
   150ac:	0003049e 	.word	0x0003049e
   150b0:	000304bc 	.word	0x000304bc
   150b4:	2000237c 	.word	0x2000237c
   150b8:	200022f0 	.word	0x200022f0
   150bc:	000304e1 	.word	0x000304e1
   150c0:	200022ec 	.word	0x200022ec
   150c4:	200022ff 	.word	0x200022ff

000150c8 <prov_dh_key_cb>:
{
   150c8:	b510      	push	{r4, lr}
	if (!dhkey) {
   150ca:	4601      	mov	r1, r0
{
   150cc:	b096      	sub	sp, #88	; 0x58
	if (!dhkey) {
   150ce:	b940      	cbnz	r0, 150e2 <prov_dh_key_cb+0x1a>
		BT_ERR("DHKey generation failed");
   150d0:	4825      	ldr	r0, [pc, #148]	; (15168 <prov_dh_key_cb+0xa0>)
   150d2:	2145      	movs	r1, #69	; 0x45
		BT_ERR("No public key available");
   150d4:	f00f f8b2 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   150d8:	2007      	movs	r0, #7
   150da:	f7ff fd8d 	bl	14bf8 <prov_send_fail_msg>
}
   150de:	b016      	add	sp, #88	; 0x58
   150e0:	bd10      	pop	{r4, pc}
	sys_memcpy_swap(bt_mesh_prov_link.dhkey, dhkey, 32);
   150e2:	4822      	ldr	r0, [pc, #136]	; (1516c <prov_dh_key_cb+0xa4>)
   150e4:	f7ff ff26 	bl	14f34 <sys_memcpy_swap.constprop.10>
	PROV_BUF(buf, 65);
   150e8:	ab04      	add	r3, sp, #16
   150ea:	f44f 028c 	mov.w	r2, #4587520	; 0x460000
   150ee:	9301      	str	r3, [sp, #4]
   150f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	key = bt_pub_key_get();
   150f4:	f7f4 faba 	bl	966c <bt_pub_key_get>
	if (!key) {
   150f8:	4604      	mov	r4, r0
   150fa:	b910      	cbnz	r0, 15102 <prov_dh_key_cb+0x3a>
		BT_ERR("No public key available");
   150fc:	2145      	movs	r1, #69	; 0x45
   150fe:	481c      	ldr	r0, [pc, #112]	; (15170 <prov_dh_key_cb+0xa8>)
   15100:	e7e8      	b.n	150d4 <prov_dh_key_cb+0xc>
	bt_mesh_prov_buf_init(&buf, PROV_PUB_KEY);
   15102:	2103      	movs	r1, #3
   15104:	a801      	add	r0, sp, #4
   15106:	f013 fa89 	bl	2861c <bt_mesh_prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   1510a:	2120      	movs	r1, #32
   1510c:	a801      	add	r0, sp, #4
   1510e:	f008 fb43 	bl	1d798 <net_buf_simple_add>
   15112:	4621      	mov	r1, r4
   15114:	f7ff ff0e 	bl	14f34 <sys_memcpy_swap.constprop.10>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   15118:	2120      	movs	r1, #32
   1511a:	a801      	add	r0, sp, #4
   1511c:	f008 fb3c 	bl	1d798 <net_buf_simple_add>
   15120:	f104 0120 	add.w	r1, r4, #32
   15124:	f7ff ff06 	bl	14f34 <sys_memcpy_swap.constprop.10>
	memcpy(&bt_mesh_prov_link.conf_inputs[81], &buf.data[1], 64);
   15128:	9901      	ldr	r1, [sp, #4]
   1512a:	4812      	ldr	r0, [pc, #72]	; (15174 <prov_dh_key_cb+0xac>)
   1512c:	3101      	adds	r1, #1
   1512e:	2240      	movs	r2, #64	; 0x40
   15130:	f011 f816 	bl	26160 <memcpy>
	if (bt_mesh_prov_send(&buf, public_key_sent)) {
   15134:	4910      	ldr	r1, [pc, #64]	; (15178 <prov_dh_key_cb+0xb0>)
   15136:	a801      	add	r0, sp, #4
   15138:	f7ff fd2e 	bl	14b98 <bt_mesh_prov_send>
   1513c:	b120      	cbz	r0, 15148 <prov_dh_key_cb+0x80>
		BT_ERR("Failed to send Public Key");
   1513e:	2145      	movs	r1, #69	; 0x45
   15140:	480e      	ldr	r0, [pc, #56]	; (1517c <prov_dh_key_cb+0xb4>)
   15142:	f00f f87b 	bl	2423c <printk>
		return;
   15146:	e7ca      	b.n	150de <prov_dh_key_cb+0x16>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   15148:	2002      	movs	r0, #2
   1514a:	f7ff ff57 	bl	14ffc <atomic_test_bit.constprop.12>
   1514e:	b918      	cbnz	r0, 15158 <prov_dh_key_cb+0x90>
	    atomic_test_bit(bt_mesh_prov_link.flags, WAIT_STRING)) {
   15150:	2003      	movs	r0, #3
   15152:	f7ff ff53 	bl	14ffc <atomic_test_bit.constprop.12>
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   15156:	b120      	cbz	r0, 15162 <prov_dh_key_cb+0x9a>
		bt_mesh_prov_link.expect = PROV_NO_PDU; /* Wait for input */
   15158:	23ff      	movs	r3, #255	; 0xff
   1515a:	4a09      	ldr	r2, [pc, #36]	; (15180 <prov_dh_key_cb+0xb8>)
   1515c:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
   15160:	e7bd      	b.n	150de <prov_dh_key_cb+0x16>
		bt_mesh_prov_link.expect = PROV_CONFIRM;
   15162:	2305      	movs	r3, #5
   15164:	e7f9      	b.n	1515a <prov_dh_key_cb+0x92>
   15166:	bf00      	nop
   15168:	000302dc 	.word	0x000302dc
   1516c:	2000230f 	.word	0x2000230f
   15170:	000302f9 	.word	0x000302f9
   15174:	200023c1 	.word	0x200023c1
   15178:	0001520d 	.word	0x0001520d
   1517c:	00030316 	.word	0x00030316
   15180:	200022f0 	.word	0x200022f0

00015184 <prov_pub_key>:
{
   15184:	b510      	push	{r4, lr}
	memcpy(&bt_mesh_prov_link.conf_inputs[17], data, 64);
   15186:	4601      	mov	r1, r0
   15188:	2240      	movs	r2, #64	; 0x40
   1518a:	4810      	ldr	r0, [pc, #64]	; (151cc <prov_pub_key+0x48>)
   1518c:	f010 ffe8 	bl	26160 <memcpy>
	if (!bt_pub_key_get()) {
   15190:	f7f4 fa6c 	bl	966c <bt_pub_key_get>
   15194:	b9a8      	cbnz	r0, 151c2 <prov_pub_key+0x3e>
		bt_mesh_prov_link.bearer->clear_tx();
   15196:	4c0e      	ldr	r4, [pc, #56]	; (151d0 <prov_pub_key+0x4c>)
   15198:	6863      	ldr	r3, [r4, #4]
   1519a:	68db      	ldr	r3, [r3, #12]
   1519c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1519e:	f3bf 8f5b 	dmb	ish
   151a2:	e854 3f00 	ldrex	r3, [r4]
   151a6:	f043 0301 	orr.w	r3, r3, #1
   151aa:	e844 3200 	strex	r2, r3, [r4]
   151ae:	2a00      	cmp	r2, #0
   151b0:	d1f7      	bne.n	151a2 <prov_pub_key+0x1e>
   151b2:	f3bf 8f5b 	dmb	ish
		BT_WARN("Waiting for local public key");
   151b6:	2157      	movs	r1, #87	; 0x57
   151b8:	4806      	ldr	r0, [pc, #24]	; (151d4 <prov_pub_key+0x50>)
}
   151ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Waiting for local public key");
   151be:	f00f b83d 	b.w	2423c <printk>
}
   151c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_dh_key_gen();
   151c6:	f7ff bedb 	b.w	14f80 <prov_dh_key_gen>
   151ca:	bf00      	nop
   151cc:	20002381 	.word	0x20002381
   151d0:	200022f0 	.word	0x200022f0
   151d4:	00030374 	.word	0x00030374

000151d8 <local_input_complete>:
{
   151d8:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_mesh_prov_link.flags, PUB_KEY_SENT)) {
   151da:	2007      	movs	r0, #7
   151dc:	f7ff ff0e 	bl	14ffc <atomic_test_bit.constprop.12>
   151e0:	b118      	cbz	r0, 151ea <local_input_complete+0x12>
}
   151e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   151e6:	f7ff bce7 	b.w	14bb8 <send_input_complete>
   151ea:	4b07      	ldr	r3, [pc, #28]	; (15208 <local_input_complete+0x30>)
   151ec:	f3bf 8f5b 	dmb	ish
   151f0:	e853 2f00 	ldrex	r2, [r3]
   151f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   151f8:	e843 2100 	strex	r1, r2, [r3]
   151fc:	2900      	cmp	r1, #0
   151fe:	d1f7      	bne.n	151f0 <local_input_complete+0x18>
   15200:	f3bf 8f5b 	dmb	ish
}
   15204:	bd08      	pop	{r3, pc}
   15206:	bf00      	nop
   15208:	200022f0 	.word	0x200022f0

0001520c <public_key_sent>:
{
   1520c:	b508      	push	{r3, lr}
   1520e:	4b0b      	ldr	r3, [pc, #44]	; (1523c <public_key_sent+0x30>)
   15210:	f3bf 8f5b 	dmb	ish
   15214:	e853 2f00 	ldrex	r2, [r3]
   15218:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1521c:	e843 2100 	strex	r1, r2, [r3]
   15220:	2900      	cmp	r1, #0
   15222:	d1f7      	bne.n	15214 <public_key_sent+0x8>
   15224:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, INPUT_COMPLETE)) {
   15228:	2009      	movs	r0, #9
   1522a:	f7ff fee7 	bl	14ffc <atomic_test_bit.constprop.12>
   1522e:	b118      	cbz	r0, 15238 <public_key_sent+0x2c>
}
   15230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_input_complete();
   15234:	f7ff bcc0 	b.w	14bb8 <send_input_complete>
}
   15238:	bd08      	pop	{r3, pc}
   1523a:	bf00      	nop
   1523c:	200022f0 	.word	0x200022f0

00015240 <prov_confirm>:
{
   15240:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15242:	4c32      	ldr	r4, [pc, #200]	; (1530c <prov_confirm+0xcc>)
	memcpy(bt_mesh_prov_link.conf, data, 16);
   15244:	4601      	mov	r1, r0
{
   15246:	b08a      	sub	sp, #40	; 0x28
	memcpy(bt_mesh_prov_link.conf, data, 16);
   15248:	2210      	movs	r2, #16
   1524a:	4831      	ldr	r0, [pc, #196]	; (15310 <prov_confirm+0xd0>)
   1524c:	f010 ff88 	bl	26160 <memcpy>
   15250:	f3bf 8f5b 	dmb	ish
   15254:	e854 2f00 	ldrex	r2, [r4]
   15258:	f022 0310 	bic.w	r3, r2, #16
   1525c:	e844 3100 	strex	r1, r3, [r4]
   15260:	2900      	cmp	r1, #0
   15262:	d1f7      	bne.n	15254 <prov_confirm+0x14>
   15264:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags,
   15268:	06d3      	lsls	r3, r2, #27
   1526a:	d504      	bpl.n	15276 <prov_confirm+0x36>
	    bt_mesh_prov->input_complete) {
   1526c:	4b29      	ldr	r3, [pc, #164]	; (15314 <prov_confirm+0xd4>)
   1526e:	681b      	ldr	r3, [r3, #0]
   15270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				      NOTIFY_INPUT_COMPLETE) &&
   15272:	b103      	cbz	r3, 15276 <prov_confirm+0x36>
		bt_mesh_prov->input_complete();
   15274:	4798      	blx	r3
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   15276:	4928      	ldr	r1, [pc, #160]	; (15318 <prov_confirm+0xd8>)
	PROV_BUF(cfm, 17);
   15278:	ab04      	add	r3, sp, #16
   1527a:	f44f 12b0 	mov.w	r2, #1441792	; 0x160000
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   1527e:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, 17);
   15282:	9301      	str	r3, [sp, #4]
   15284:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   15288:	f012 febd 	bl	28006 <bt_mesh_prov_conf_salt>
   1528c:	b140      	cbz	r0, 152a0 <prov_confirm+0x60>
		BT_ERR("Unable to generate confirmation salt");
   1528e:	4823      	ldr	r0, [pc, #140]	; (1531c <prov_confirm+0xdc>)
   15290:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Unable to generate confirmation value");
   15292:	f00e ffd3 	bl	2423c <printk>
	prov_send_fail_msg(reason);
   15296:	2007      	movs	r0, #7
   15298:	f7ff fcae 	bl	14bf8 <prov_send_fail_msg>
}
   1529c:	b00a      	add	sp, #40	; 0x28
   1529e:	bd10      	pop	{r4, pc}
	if (bt_mesh_prov_conf_key(bt_mesh_prov_link.dhkey, bt_mesh_prov_link.conf_salt,
   152a0:	4a1f      	ldr	r2, [pc, #124]	; (15320 <prov_confirm+0xe0>)
   152a2:	f1a2 0110 	sub.w	r1, r2, #16
   152a6:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
   152aa:	f7fb fc51 	bl	10b50 <bt_mesh_prov_conf_key>
   152ae:	b110      	cbz	r0, 152b6 <prov_confirm+0x76>
		BT_ERR("Unable to generate confirmation key");
   152b0:	2145      	movs	r1, #69	; 0x45
   152b2:	481c      	ldr	r0, [pc, #112]	; (15324 <prov_confirm+0xe4>)
   152b4:	e7ed      	b.n	15292 <prov_confirm+0x52>
	if (bt_rand(bt_mesh_prov_link.rand, 16)) {
   152b6:	2110      	movs	r1, #16
   152b8:	481b      	ldr	r0, [pc, #108]	; (15328 <prov_confirm+0xe8>)
   152ba:	f013 fd37 	bl	28d2c <bt_rand>
   152be:	b110      	cbz	r0, 152c6 <prov_confirm+0x86>
		BT_ERR("Unable to generate random number");
   152c0:	2145      	movs	r1, #69	; 0x45
   152c2:	481a      	ldr	r0, [pc, #104]	; (1532c <prov_confirm+0xec>)
   152c4:	e7e5      	b.n	15292 <prov_confirm+0x52>
	bt_mesh_prov_buf_init(&cfm, PROV_CONFIRM);
   152c6:	2105      	movs	r1, #5
   152c8:	a801      	add	r0, sp, #4
   152ca:	f013 f9a7 	bl	2861c <bt_mesh_prov_buf_init>
			      bt_mesh_prov_link.auth, net_buf_simple_add(&cfm, 16))) {
   152ce:	2110      	movs	r1, #16
   152d0:	a801      	add	r0, sp, #4
   152d2:	f008 fa61 	bl	1d798 <net_buf_simple_add>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key, bt_mesh_prov_link.rand,
   152d6:	4a16      	ldr	r2, [pc, #88]	; (15330 <prov_confirm+0xf0>)
   152d8:	4603      	mov	r3, r0
   152da:	f102 0141 	add.w	r1, r2, #65	; 0x41
   152de:	f102 0061 	add.w	r0, r2, #97	; 0x61
   152e2:	f012 fea1 	bl	28028 <bt_mesh_prov_conf>
   152e6:	4601      	mov	r1, r0
   152e8:	b110      	cbz	r0, 152f0 <prov_confirm+0xb0>
		BT_ERR("Unable to generate confirmation value");
   152ea:	2145      	movs	r1, #69	; 0x45
   152ec:	4811      	ldr	r0, [pc, #68]	; (15334 <prov_confirm+0xf4>)
   152ee:	e7d0      	b.n	15292 <prov_confirm+0x52>
	if (bt_mesh_prov_send(&cfm, NULL)) {
   152f0:	a801      	add	r0, sp, #4
   152f2:	f7ff fc51 	bl	14b98 <bt_mesh_prov_send>
   152f6:	b120      	cbz	r0, 15302 <prov_confirm+0xc2>
		BT_ERR("Failed to send Provisioning Confirm");
   152f8:	2145      	movs	r1, #69	; 0x45
   152fa:	480f      	ldr	r0, [pc, #60]	; (15338 <prov_confirm+0xf8>)
   152fc:	f00e ff9e 	bl	2423c <printk>
		return;
   15300:	e7cc      	b.n	1529c <prov_confirm+0x5c>
	bt_mesh_prov_link.expect = PROV_RANDOM;
   15302:	2306      	movs	r3, #6
   15304:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
   15308:	e7c8      	b.n	1529c <prov_confirm+0x5c>
   1530a:	bf00      	nop
   1530c:	200022f0 	.word	0x200022f0
   15310:	20002330 	.word	0x20002330
   15314:	200022ec 	.word	0x200022ec
   15318:	20002350 	.word	0x20002350
   1531c:	0003011e 	.word	0x0003011e
   15320:	20002360 	.word	0x20002360
   15324:	00030148 	.word	0x00030148
   15328:	20002340 	.word	0x20002340
   1532c:	00030171 	.word	0x00030171
   15330:	200022ff 	.word	0x200022ff
   15334:	00030197 	.word	0x00030197
   15338:	000301c2 	.word	0x000301c2

0001533c <bt_mesh_prov_enable>:
		[PROV_DATA] = prov_data,
	},
};

int bt_mesh_prov_enable(bt_mesh_prov_bearer_t bearers)
{
   1533c:	b538      	push	{r3, r4, r5, lr}
   1533e:	4604      	mov	r4, r0
	if (bt_mesh_is_provisioned()) {
   15340:	f012 fa63 	bl	2780a <bt_mesh_is_provisioned>
   15344:	4605      	mov	r5, r0
   15346:	b9a0      	cbnz	r0, 15372 <bt_mesh_prov_enable+0x36>

		memcpy(uuid.val, bt_mesh_prov->uuid, 16);
		BT_INFO("Device UUID: %s", bt_uuid_str(&uuid.uuid));
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) &&
   15348:	07e2      	lsls	r2, r4, #31
   1534a:	d505      	bpl.n	15358 <bt_mesh_prov_enable+0x1c>
	    (bearers & BT_MESH_PROV_ADV)) {
		pb_adv.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   1534c:	f7ff fbee 	bl	14b2c <bt_mesh_prov_bearer_cb_get>
   15350:	4b09      	ldr	r3, [pc, #36]	; (15378 <bt_mesh_prov_enable+0x3c>)
   15352:	4629      	mov	r1, r5
   15354:	685b      	ldr	r3, [r3, #4]
   15356:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   15358:	07a3      	lsls	r3, r4, #30
   1535a:	d505      	bpl.n	15368 <bt_mesh_prov_enable+0x2c>
	    (bearers & BT_MESH_PROV_GATT)) {
		pb_gatt.link_accept(bt_mesh_prov_bearer_cb_get(), NULL);
   1535c:	f7ff fbe6 	bl	14b2c <bt_mesh_prov_bearer_cb_get>
   15360:	4b06      	ldr	r3, [pc, #24]	; (1537c <bt_mesh_prov_enable+0x40>)
   15362:	2100      	movs	r1, #0
   15364:	685b      	ldr	r3, [r3, #4]
   15366:	4798      	blx	r3
	}

	bt_mesh_prov_link.role = &role_device;
   15368:	4b05      	ldr	r3, [pc, #20]	; (15380 <bt_mesh_prov_enable+0x44>)
   1536a:	4a06      	ldr	r2, [pc, #24]	; (15384 <bt_mesh_prov_enable+0x48>)
   1536c:	609a      	str	r2, [r3, #8]

	return 0;
   1536e:	2000      	movs	r0, #0
}
   15370:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   15372:	f06f 0044 	mvn.w	r0, #68	; 0x44
   15376:	e7fb      	b.n	15370 <bt_mesh_prov_enable+0x34>
   15378:	0002b568 	.word	0x0002b568
   1537c:	0002b580 	.word	0x0002b580
   15380:	200022f0 	.word	0x200022f0
   15384:	0002b508 	.word	0x0002b508

00015388 <free_segments>:

	return 1 + (len / CONT_PAYLOAD_MAX);
}

static void free_segments(void)
{
   15388:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1538a:	2400      	movs	r4, #0
   1538c:	4d08      	ldr	r5, [pc, #32]	; (153b0 <free_segments+0x28>)

		if (!buf) {
			break;
		}

		link.tx.buf[i] = NULL;
   1538e:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   15390:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   15394:	b158      	cbz	r0, 153ae <free_segments+0x26>
		/* Mark as canceled */
		BT_MESH_ADV(buf)->busy = 0U;
   15396:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   15398:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   1539c:	7a1a      	ldrb	r2, [r3, #8]
   1539e:	f366 0282 	bfi	r2, r6, #2, #1
   153a2:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   153a4:	3401      	adds	r4, #1
		net_buf_unref(buf);
   153a6:	f008 f8e1 	bl	1d56c <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   153aa:	2c03      	cmp	r4, #3
   153ac:	d1f0      	bne.n	15390 <free_segments+0x8>
	}
}
   153ae:	bd70      	pop	{r4, r5, r6, pc}
   153b0:	20000304 	.word	0x20000304

000153b4 <prov_clear_tx>:
{
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
}

static void prov_clear_tx(void)
{
   153b4:	b508      	push	{r3, lr}
	BT_DBG("");

	k_delayed_work_cancel(&link.tx.retransmit);
   153b6:	4803      	ldr	r0, [pc, #12]	; (153c4 <prov_clear_tx+0x10>)
   153b8:	f00d f846 	bl	22448 <k_delayed_work_cancel>

	free_segments();
}
   153bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   153c0:	f7ff bfe2 	b.w	15388 <free_segments>
   153c4:	20000318 	.word	0x20000318

000153c8 <adv_buf_create>:
	reset_adv_link();
	cb->link_closed(&pb_adv, cb_data, reason);
}

static struct net_buf *adv_buf_create(uint8_t retransmits)
{
   153c8:	b510      	push	{r4, lr}
	struct net_buf *buf;

	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
   153ca:	f040 0108 	orr.w	r1, r0, #8
   153ce:	f243 3234 	movw	r2, #13108	; 0x3334
   153d2:	2300      	movs	r3, #0
   153d4:	2000      	movs	r0, #0
   153d6:	f7f7 feb5 	bl	d144 <bt_mesh_adv_create>
				 BT_MESH_TRANSMIT(retransmits, 20),
				 BUF_TIMEOUT);
	if (!buf) {
   153da:	4604      	mov	r4, r0
   153dc:	b918      	cbnz	r0, 153e6 <adv_buf_create+0x1e>
		BT_ERR("Out of provisioning buffers");
   153de:	2145      	movs	r1, #69	; 0x45
   153e0:	4802      	ldr	r0, [pc, #8]	; (153ec <adv_buf_create+0x24>)
   153e2:	f00e ff2b 	bl	2423c <printk>
		return NULL;
	}

	return buf;
}
   153e6:	4620      	mov	r0, r4
   153e8:	bd10      	pop	{r4, pc}
   153ea:	bf00      	nop
   153ec:	0003056e 	.word	0x0003056e

000153f0 <atomic_test_bit.constprop.16>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   153f0:	4b05      	ldr	r3, [pc, #20]	; (15408 <atomic_test_bit.constprop.16+0x18>)
   153f2:	f3bf 8f5b 	dmb	ish
   153f6:	685b      	ldr	r3, [r3, #4]
   153f8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   153fc:	fa43 f000 	asr.w	r0, r3, r0
}
   15400:	f000 0001 	and.w	r0, r0, #1
   15404:	4770      	bx	lr
   15406:	bf00      	nop
   15408:	200002e0 	.word	0x200002e0

0001540c <prov_link_accept>:

	return 0;
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   1540c:	b570      	push	{r4, r5, r6, lr}
   1540e:	4606      	mov	r6, r0
   15410:	460d      	mov	r5, r1
	int err;

	err = bt_mesh_adv_enable();
   15412:	f7fe f9eb 	bl	137ec <bt_mesh_adv_enable>
	if (err) {
   15416:	4604      	mov	r4, r0
   15418:	b128      	cbz	r0, 15426 <prov_link_accept+0x1a>
		BT_ERR("Failed enabling advertiser");
   1541a:	2145      	movs	r1, #69	; 0x45
   1541c:	480b      	ldr	r0, [pc, #44]	; (1544c <prov_link_accept+0x40>)
   1541e:	f00e ff0d 	bl	2423c <printk>
	bt_mesh_scan_enable();
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();

	return 0;
}
   15422:	4620      	mov	r0, r4
   15424:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   15426:	f7ff ffe3 	bl	153f0 <atomic_test_bit.constprop.16>
   1542a:	b960      	cbnz	r0, 15446 <prov_link_accept+0x3a>
	link.rx.id = XACT_ID_MAX;
   1542c:	4b08      	ldr	r3, [pc, #32]	; (15450 <prov_link_accept+0x44>)
   1542e:	227f      	movs	r2, #127	; 0x7f
   15430:	741a      	strb	r2, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
   15432:	22ff      	movs	r2, #255	; 0xff
   15434:	f883 2020 	strb.w	r2, [r3, #32]
	link.cb_data = cb_data;
   15438:	e9c3 6502 	strd	r6, r5, [r3, #8]
	bt_mesh_scan_enable();
   1543c:	f7f7 fea8 	bl	d190 <bt_mesh_scan_enable>
	bt_mesh_beacon_enable();
   15440:	f7f8 f960 	bl	d704 <bt_mesh_beacon_enable>
	return 0;
   15444:	e7ed      	b.n	15422 <prov_link_accept+0x16>
		return -EBUSY;
   15446:	f06f 040f 	mvn.w	r4, #15
   1544a:	e7ea      	b.n	15422 <prov_link_accept+0x16>
   1544c:	0002dbb0 	.word	0x0002dbb0
   15450:	200002e0 	.word	0x200002e0

00015454 <reset_adv_link>:
{
   15454:	b510      	push	{r4, lr}
	k_delayed_work_cancel(&link.prot_timer);
   15456:	4c17      	ldr	r4, [pc, #92]	; (154b4 <reset_adv_link+0x60>)
	prov_clear_tx();
   15458:	f7ff ffac 	bl	153b4 <prov_clear_tx>
	k_delayed_work_cancel(&link.prot_timer);
   1545c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   15460:	f00c fff2 	bl	22448 <k_delayed_work_cancel>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   15464:	2005      	movs	r0, #5
   15466:	f7ff ffc3 	bl	153f0 <atomic_test_bit.constprop.16>
   1546a:	b180      	cbz	r0, 1548e <reset_adv_link+0x3a>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   1546c:	2238      	movs	r2, #56	; 0x38
   1546e:	2100      	movs	r1, #0
   15470:	4620      	mov	r0, r4
   15472:	f010 fe9f 	bl	261b4 <memset>
		link.rx.id = XACT_ID_NVAL;
   15476:	23ff      	movs	r3, #255	; 0xff
   15478:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
   1547a:	23ff      	movs	r3, #255	; 0xff
   1547c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   15480:	4b0d      	ldr	r3, [pc, #52]	; (154b8 <reset_adv_link+0x64>)
   15482:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
   15484:	2200      	movs	r2, #0
   15486:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   15488:	689a      	ldr	r2, [r3, #8]
   1548a:	601a      	str	r2, [r3, #0]
}
   1548c:	bd10      	pop	{r4, pc}
		link.id = 0;
   1548e:	4623      	mov	r3, r4
   15490:	f843 0b04 	str.w	r0, [r3], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15494:	f3bf 8f5b 	dmb	ish
   15498:	e853 2f00 	ldrex	r2, [r3]
   1549c:	e843 0100 	strex	r1, r0, [r3]
   154a0:	2900      	cmp	r1, #0
   154a2:	d1f9      	bne.n	15498 <reset_adv_link+0x44>
   154a4:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
   154a8:	237f      	movs	r3, #127	; 0x7f
   154aa:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
   154ac:	23ff      	movs	r3, #255	; 0xff
   154ae:	f884 3020 	strb.w	r3, [r4, #32]
   154b2:	e7e2      	b.n	1547a <reset_adv_link+0x26>
   154b4:	200002e0 	.word	0x200002e0
   154b8:	200006ec 	.word	0x200006ec

000154bc <close_link>:
{
   154bc:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   154be:	4b06      	ldr	r3, [pc, #24]	; (154d8 <close_link+0x1c>)
	void *cb_data = link.cb_data;
   154c0:	e9d3 6402 	ldrd	r6, r4, [r3, #8]
{
   154c4:	4605      	mov	r5, r0
	reset_adv_link();
   154c6:	f7ff ffc5 	bl	15454 <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
   154ca:	6873      	ldr	r3, [r6, #4]
   154cc:	4803      	ldr	r0, [pc, #12]	; (154dc <close_link+0x20>)
   154ce:	462a      	mov	r2, r5
   154d0:	4621      	mov	r1, r4
}
   154d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
   154d6:	4718      	bx	r3
   154d8:	200002e0 	.word	0x200002e0
   154dc:	0002b568 	.word	0x0002b568

000154e0 <prov_retransmit>:
{
   154e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   154e4:	2000      	movs	r0, #0
   154e6:	f7ff ff83 	bl	153f0 <atomic_test_bit.constprop.16>
   154ea:	b928      	cbnz	r0, 154f8 <prov_retransmit+0x18>
		BT_WARN("Link not active");
   154ec:	2157      	movs	r1, #87	; 0x57
   154ee:	482a      	ldr	r0, [pc, #168]	; (15598 <prov_retransmit+0xb8>)
}
   154f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Link not active");
   154f4:	f00e bea2 	b.w	2423c <printk>
	if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   154f8:	2002      	movs	r0, #2
   154fa:	f7ff ff79 	bl	153f0 <atomic_test_bit.constprop.16>
		timeout_ms = TRANSACTION_TIMEOUT;
   154fe:	f640 35b8 	movw	r5, #3000	; 0xbb8
   15502:	f247 5330 	movw	r3, #30000	; 0x7530
   15506:	2800      	cmp	r0, #0
   15508:	bf08      	it	eq
   1550a:	461d      	moveq	r5, r3
	return z_impl_k_uptime_ticks();
   1550c:	f014 ff78 	bl	2a400 <z_impl_k_uptime_ticks>
	if (k_uptime_get() - link.tx.start > timeout_ms) {
   15510:	4c22      	ldr	r4, [pc, #136]	; (1559c <prov_retransmit+0xbc>)
   15512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15516:	fba0 8903 	umull	r8, r9, r0, r3
   1551a:	fb03 9901 	mla	r9, r3, r1, r9
   1551e:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
   15522:	ea4f 33d8 	mov.w	r3, r8, lsr #15
   15526:	ea43 4349 	orr.w	r3, r3, r9, lsl #17
   1552a:	1a5e      	subs	r6, r3, r1
   1552c:	ea4f 32d9 	mov.w	r2, r9, lsr #15
   15530:	eb62 0700 	sbc.w	r7, r2, r0
   15534:	17e9      	asrs	r1, r5, #31
   15536:	42b5      	cmp	r5, r6
   15538:	eb71 0307 	sbcs.w	r3, r1, r7
   1553c:	da0e      	bge.n	1555c <prov_retransmit+0x7c>
		if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   1553e:	2002      	movs	r0, #2
   15540:	f7ff ff56 	bl	153f0 <atomic_test_bit.constprop.16>
   15544:	b120      	cbz	r0, 15550 <prov_retransmit+0x70>
			close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   15546:	2000      	movs	r0, #0
}
   15548:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   1554c:	f7ff bfb6 	b.w	154bc <close_link>
			BT_WARN("Giving up transaction");
   15550:	4813      	ldr	r0, [pc, #76]	; (155a0 <prov_retransmit+0xc0>)
   15552:	2157      	movs	r1, #87	; 0x57
   15554:	f00e fe72 	bl	2423c <printk>
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   15558:	2001      	movs	r0, #1
   1555a:	e7f5      	b.n	15548 <prov_retransmit+0x68>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   1555c:	4e11      	ldr	r6, [pc, #68]	; (155a4 <prov_retransmit+0xc4>)
   1555e:	3424      	adds	r4, #36	; 0x24
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15560:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   15562:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   15566:	b1a0      	cbz	r0, 15592 <prov_retransmit+0xb2>
		if (BT_MESH_ADV(buf)->busy) {
   15568:	6943      	ldr	r3, [r0, #20]
   1556a:	7a1a      	ldrb	r2, [r3, #8]
   1556c:	f012 0204 	ands.w	r2, r2, #4
   15570:	f105 0501 	add.w	r5, r5, #1
   15574:	d10b      	bne.n	1558e <prov_retransmit+0xae>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   15576:	2d03      	cmp	r5, #3
   15578:	d005      	beq.n	15586 <prov_retransmit+0xa6>
   1557a:	6823      	ldr	r3, [r4, #0]
   1557c:	b11b      	cbz	r3, 15586 <prov_retransmit+0xa6>
			bt_mesh_adv_send(buf, NULL, NULL);
   1557e:	4611      	mov	r1, r2
   15580:	f7f7 fdf0 	bl	d164 <bt_mesh_adv_send>
   15584:	e7ed      	b.n	15562 <prov_retransmit+0x82>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   15586:	2200      	movs	r2, #0
   15588:	4631      	mov	r1, r6
   1558a:	f7f7 fdeb 	bl	d164 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   1558e:	2d03      	cmp	r5, #3
   15590:	d1e7      	bne.n	15562 <prov_retransmit+0x82>
}
   15592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15596:	bf00      	nop
   15598:	00030795 	.word	0x00030795
   1559c:	200002e0 	.word	0x200002e0
   155a0:	000307aa 	.word	0x000307aa
   155a4:	200006e4 	.word	0x200006e4

000155a8 <protocol_timeout>:
	link.rx.seg = 0U;
   155a8:	4b02      	ldr	r3, [pc, #8]	; (155b4 <protocol_timeout+0xc>)
   155aa:	2200      	movs	r2, #0
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   155ac:	2001      	movs	r0, #1
	link.rx.seg = 0U;
   155ae:	745a      	strb	r2, [r3, #17]
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   155b0:	f7ff bf84 	b.w	154bc <close_link>
   155b4:	200002e0 	.word	0x200002e0

000155b8 <gen_prov_ack>:
{
   155b8:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   155ba:	4c0b      	ldr	r4, [pc, #44]	; (155e8 <gen_prov_ack+0x30>)
   155bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   155be:	b18b      	cbz	r3, 155e4 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   155c0:	7902      	ldrb	r2, [r0, #4]
   155c2:	f894 3020 	ldrb.w	r3, [r4, #32]
   155c6:	429a      	cmp	r2, r3
   155c8:	d10c      	bne.n	155e4 <gen_prov_ack+0x2c>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   155ca:	2002      	movs	r0, #2
   155cc:	f7ff ff10 	bl	153f0 <atomic_test_bit.constprop.16>
   155d0:	b908      	cbnz	r0, 155d6 <gen_prov_ack+0x1e>
			prov_clear_tx();
   155d2:	f7ff feef 	bl	153b4 <prov_clear_tx>
		if (link.tx.cb) {
   155d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   155d8:	b123      	cbz	r3, 155e4 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   155da:	6b61      	ldr	r1, [r4, #52]	; 0x34
   155dc:	2000      	movs	r0, #0
}
   155de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   155e2:	4718      	bx	r3
}
   155e4:	bd10      	pop	{r4, pc}
   155e6:	bf00      	nop
   155e8:	200002e0 	.word	0x200002e0

000155ec <ack_complete>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   155ec:	4b06      	ldr	r3, [pc, #24]	; (15608 <ack_complete+0x1c>)
   155ee:	f3bf 8f5b 	dmb	ish
   155f2:	e853 2f00 	ldrex	r2, [r3]
   155f6:	f022 0210 	bic.w	r2, r2, #16
   155fa:	e843 2100 	strex	r1, r2, [r3]
   155fe:	2900      	cmp	r1, #0
   15600:	d1f7      	bne.n	155f2 <ack_complete+0x6>
   15602:	f3bf 8f5b 	dmb	ish
}
   15606:	4770      	bx	lr
   15608:	200002e4 	.word	0x200002e4

0001560c <buf_sent>:
	if (!link.tx.buf[0]) {
   1560c:	4905      	ldr	r1, [pc, #20]	; (15624 <buf_sent+0x18>)
   1560e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   15610:	b133      	cbz	r3, 15620 <buf_sent+0x14>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   15616:	2300      	movs	r3, #0
   15618:	3138      	adds	r1, #56	; 0x38
   1561a:	4803      	ldr	r0, [pc, #12]	; (15628 <buf_sent+0x1c>)
   1561c:	f00c bea4 	b.w	22368 <k_delayed_work_submit_to_queue>
}
   15620:	4770      	bx	lr
   15622:	bf00      	nop
   15624:	200002e0 	.word	0x200002e0
   15628:	20001988 	.word	0x20001988

0001562c <prov_failed>:
{
   1562c:	b510      	push	{r4, lr}
	link.cb->error(&pb_adv, link.cb_data, err);
   1562e:	4c0a      	ldr	r4, [pc, #40]	; (15658 <prov_failed+0x2c>)
   15630:	68a3      	ldr	r3, [r4, #8]
   15632:	68e1      	ldr	r1, [r4, #12]
   15634:	689b      	ldr	r3, [r3, #8]
   15636:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15638:	3404      	adds	r4, #4
   1563a:	4808      	ldr	r0, [pc, #32]	; (1565c <prov_failed+0x30>)
   1563c:	4798      	blx	r3
   1563e:	f3bf 8f5b 	dmb	ish
   15642:	e854 3f00 	ldrex	r3, [r4]
   15646:	f043 0308 	orr.w	r3, r3, #8
   1564a:	e844 3200 	strex	r2, r3, [r4]
   1564e:	2a00      	cmp	r2, #0
   15650:	d1f7      	bne.n	15642 <prov_failed+0x16>
   15652:	f3bf 8f5b 	dmb	ish
}
   15656:	bd10      	pop	{r4, pc}
   15658:	200002e0 	.word	0x200002e0
   1565c:	0002b568 	.word	0x0002b568

00015660 <gen_prov_ack_send>:
{
   15660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15664:	4e23      	ldr	r6, [pc, #140]	; (156f4 <gen_prov_ack_send+0x94>)
   15666:	f3bf 8f5b 	dmb	ish
   1566a:	4680      	mov	r8, r0
   1566c:	1d33      	adds	r3, r6, #4
   1566e:	e853 2f00 	ldrex	r2, [r3]
   15672:	f042 0110 	orr.w	r1, r2, #16
   15676:	e843 1000 	strex	r0, r1, [r3]
   1567a:	2800      	cmp	r0, #0
   1567c:	d1f7      	bne.n	1566e <gen_prov_ack_send+0xe>
   1567e:	f3bf 8f5b 	dmb	ish
	if (pending && link.tx.pending_ack == xact_id) {
   15682:	f012 0710 	ands.w	r7, r2, #16
   15686:	461c      	mov	r4, r3
   15688:	d003      	beq.n	15692 <gen_prov_ack_send+0x32>
   1568a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   1568e:	4543      	cmp	r3, r8
   15690:	d010      	beq.n	156b4 <gen_prov_ack_send+0x54>
	buf = adv_buf_create(RETRANSMITS_ACK);
   15692:	2002      	movs	r0, #2
   15694:	f7ff fe98 	bl	153c8 <adv_buf_create>
	if (!buf) {
   15698:	4605      	mov	r5, r0
   1569a:	b968      	cbnz	r0, 156b8 <gen_prov_ack_send+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1569c:	f3bf 8f5b 	dmb	ish
   156a0:	e854 3f00 	ldrex	r3, [r4]
   156a4:	f023 0310 	bic.w	r3, r3, #16
   156a8:	e844 3200 	strex	r2, r3, [r4]
   156ac:	2a00      	cmp	r2, #0
   156ae:	d1f7      	bne.n	156a0 <gen_prov_ack_send+0x40>
   156b0:	f3bf 8f5b 	dmb	ish
}
   156b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pending) {
   156b8:	b9cf      	cbnz	r7, 156ee <gen_prov_ack_send+0x8e>
		complete = &cb;
   156ba:	4c0f      	ldr	r4, [pc, #60]	; (156f8 <gen_prov_ack_send+0x98>)
		link.tx.pending_ack = xact_id;
   156bc:	f886 8021 	strb.w	r8, [r6, #33]	; 0x21
	net_buf_simple_add_be32(&buf->b, val);
   156c0:	6831      	ldr	r1, [r6, #0]
   156c2:	f105 0008 	add.w	r0, r5, #8
   156c6:	f014 f9a9 	bl	29a1c <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   156ca:	4641      	mov	r1, r8
   156cc:	4628      	mov	r0, r5
   156ce:	f012 ffb3 	bl	28638 <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   156d2:	2101      	movs	r1, #1
   156d4:	4628      	mov	r0, r5
   156d6:	f012 ffaf 	bl	28638 <net_buf_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   156da:	4628      	mov	r0, r5
   156dc:	4621      	mov	r1, r4
   156de:	2200      	movs	r2, #0
   156e0:	f7f7 fd40 	bl	d164 <bt_mesh_adv_send>
	net_buf_unref(buf);
   156e4:	4628      	mov	r0, r5
}
   156e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_unref(buf);
   156ea:	f007 bf3f 	b.w	1d56c <net_buf_unref>
		complete = NULL;
   156ee:	2400      	movs	r4, #0
   156f0:	e7e6      	b.n	156c0 <gen_prov_ack_send+0x60>
   156f2:	bf00      	nop
   156f4:	200002e0 	.word	0x200002e0
   156f8:	0002b540 	.word	0x0002b540

000156fc <prov_msg_recv>:
{
   156fc:	b510      	push	{r4, lr}
   156fe:	4c17      	ldr	r4, [pc, #92]	; (1575c <prov_msg_recv+0x60>)
   15700:	4817      	ldr	r0, [pc, #92]	; (15760 <prov_msg_recv+0x64>)
   15702:	f104 0168 	add.w	r1, r4, #104	; 0x68
   15706:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1570a:	2300      	movs	r3, #0
   1570c:	f00c fe2c 	bl	22368 <k_delayed_work_submit_to_queue>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   15710:	7ce1      	ldrb	r1, [r4, #19]
   15712:	6960      	ldr	r0, [r4, #20]
   15714:	f7fb f9e2 	bl	10adc <bt_mesh_fcs_check>
   15718:	b928      	cbnz	r0, 15726 <prov_msg_recv+0x2a>
		BT_ERR("Incorrect FCS");
   1571a:	2145      	movs	r1, #69	; 0x45
   1571c:	4811      	ldr	r0, [pc, #68]	; (15764 <prov_msg_recv+0x68>)
}
   1571e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Incorrect FCS");
   15722:	f00e bd8b 	b.w	2423c <printk>
	gen_prov_ack_send(link.rx.id);
   15726:	7c20      	ldrb	r0, [r4, #16]
   15728:	f7ff ff9a 	bl	15660 <gen_prov_ack_send>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
   1572c:	2003      	movs	r0, #3
   1572e:	f7ff fe5f 	bl	153f0 <atomic_test_bit.constprop.16>
   15732:	b158      	cbz	r0, 1574c <prov_msg_recv+0x50>
		BT_WARN("Unexpected msg 0x%02x on invalidated link",
   15734:	6963      	ldr	r3, [r4, #20]
   15736:	480c      	ldr	r0, [pc, #48]	; (15768 <prov_msg_recv+0x6c>)
   15738:	681b      	ldr	r3, [r3, #0]
   1573a:	2157      	movs	r1, #87	; 0x57
   1573c:	781a      	ldrb	r2, [r3, #0]
   1573e:	f00e fd7d 	bl	2423c <printk>
		prov_failed(PROV_ERR_UNEXP_PDU);
   15742:	2003      	movs	r0, #3
}
   15744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   15748:	f7ff bf70 	b.w	1562c <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   1574c:	68a3      	ldr	r3, [r4, #8]
   1574e:	6962      	ldr	r2, [r4, #20]
   15750:	68e1      	ldr	r1, [r4, #12]
   15752:	68db      	ldr	r3, [r3, #12]
   15754:	4805      	ldr	r0, [pc, #20]	; (1576c <prov_msg_recv+0x70>)
}
   15756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   1575a:	4718      	bx	r3
   1575c:	200002e0 	.word	0x200002e0
   15760:	20001988 	.word	0x20001988
   15764:	00030753 	.word	0x00030753
   15768:	00030766 	.word	0x00030766
   1576c:	0002b568 	.word	0x0002b568

00015770 <gen_prov_cont>:
{
   15770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15774:	4d3a      	ldr	r5, [pc, #232]	; (15860 <gen_prov_cont+0xf0>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   15776:	7944      	ldrb	r4, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   15778:	f895 c011 	ldrb.w	ip, [r5, #17]
   1577c:	7c2b      	ldrb	r3, [r5, #16]
   1577e:	7902      	ldrb	r2, [r0, #4]
{
   15780:	4607      	mov	r7, r0
   15782:	460e      	mov	r6, r1
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   15784:	f1bc 0f00 	cmp.w	ip, #0
   15788:	d12d      	bne.n	157e6 <gen_prov_cont+0x76>
   1578a:	4293      	cmp	r3, r2
   1578c:	d109      	bne.n	157a2 <gen_prov_cont+0x32>
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
   1578e:	2004      	movs	r0, #4
   15790:	f7ff fe2e 	bl	153f0 <atomic_test_bit.constprop.16>
		if (!ack_pending()) {
   15794:	2800      	cmp	r0, #0
   15796:	d161      	bne.n	1585c <gen_prov_cont+0xec>
			gen_prov_ack_send(rx->xact_id);
   15798:	7938      	ldrb	r0, [r7, #4]
}
   1579a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gen_prov_ack_send(rx->xact_id);
   1579e:	f7ff bf5f 	b.w	15660 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   157a2:	b259      	sxtb	r1, r3
   157a4:	1c48      	adds	r0, r1, #1
   157a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   157aa:	f001 0180 	and.w	r1, r1, #128	; 0x80
	if (!link.rx.seg &&
   157ae:	4301      	orrs	r1, r0
   157b0:	428a      	cmp	r2, r1
   157b2:	d11a      	bne.n	157ea <gen_prov_cont+0x7a>
		net_buf_simple_reset(link.rx.buf);
   157b4:	696b      	ldr	r3, [r5, #20]
		link.rx.id = rx->xact_id;
   157b6:	742a      	strb	r2, [r5, #16]
	buf->data = buf->__buf;
   157b8:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   157ba:	f8a3 c004 	strh.w	ip, [r3, #4]
	buf->data = buf->__buf;
   157be:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
   157c0:	23ff      	movs	r3, #255	; 0xff
   157c2:	746b      	strb	r3, [r5, #17]
		link.rx.last_seg = SEG_NVAL;
   157c4:	74ab      	strb	r3, [r5, #18]
		prov_clear_tx();
   157c6:	f7ff fdf5 	bl	153b4 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
   157ca:	7cab      	ldrb	r3, [r5, #18]
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   157cc:	08a4      	lsrs	r4, r4, #2
	if (seg > link.rx.last_seg) {
   157ce:	42a3      	cmp	r3, r4
   157d0:	d211      	bcs.n	157f6 <gen_prov_cont+0x86>
		BT_ERR("Invalid segment index %u", seg);
   157d2:	4622      	mov	r2, r4
   157d4:	2145      	movs	r1, #69	; 0x45
   157d6:	4823      	ldr	r0, [pc, #140]	; (15864 <gen_prov_cont+0xf4>)
   157d8:	f00e fd30 	bl	2423c <printk>
			prov_failed(PROV_ERR_NVAL_FMT);
   157dc:	2002      	movs	r0, #2
}
   157de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			prov_failed(PROV_ERR_NVAL_FMT);
   157e2:	f7ff bf23 	b.w	1562c <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
   157e6:	4293      	cmp	r3, r2
   157e8:	d0ef      	beq.n	157ca <gen_prov_cont+0x5a>
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   157ea:	2157      	movs	r1, #87	; 0x57
   157ec:	481e      	ldr	r0, [pc, #120]	; (15868 <gen_prov_cont+0xf8>)
}
   157ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Data for unknown transaction (0x%x != 0x%x)",
   157f2:	f00e bd23 	b.w	2423c <printk>
	if (!(link.rx.seg & BIT(seg))) {
   157f6:	7c6b      	ldrb	r3, [r5, #17]
   157f8:	40e3      	lsrs	r3, r4
   157fa:	07da      	lsls	r2, r3, #31
   157fc:	d52e      	bpl.n	1585c <gen_prov_cont+0xec>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   157fe:	696a      	ldr	r2, [r5, #20]
   15800:	6831      	ldr	r1, [r6, #0]
   15802:	1e60      	subs	r0, r4, #1
   15804:	2317      	movs	r3, #23
   15806:	4343      	muls	r3, r0
   15808:	6810      	ldr	r0, [r2, #0]
   1580a:	88b2      	ldrh	r2, [r6, #4]
   1580c:	3314      	adds	r3, #20
   1580e:	4418      	add	r0, r3
   15810:	f010 fca6 	bl	26160 <memcpy>
	XACT_SEG_RECV(seg);
   15814:	2101      	movs	r1, #1
   15816:	fa01 f304 	lsl.w	r3, r1, r4
   1581a:	7c69      	ldrb	r1, [r5, #17]
   1581c:	ea21 0103 	bic.w	r1, r1, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   15820:	7cab      	ldrb	r3, [r5, #18]
	XACT_SEG_RECV(seg);
   15822:	7469      	strb	r1, [r5, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   15824:	429c      	cmp	r4, r3
   15826:	d114      	bne.n	15852 <gen_prov_cont+0xe2>
   15828:	07cb      	lsls	r3, r1, #31
   1582a:	d417      	bmi.n	1585c <gen_prov_cont+0xec>
		expect_len = (link.rx.buf->len - 20U -
   1582c:	696b      	ldr	r3, [r5, #20]
   1582e:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   15832:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   15836:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   1583a:	791c      	ldrb	r4, [r3, #4]
		if (expect_len != buf->len) {
   1583c:	88b3      	ldrh	r3, [r6, #4]
		expect_len = (link.rx.buf->len - 20U -
   1583e:	3203      	adds	r2, #3
   15840:	4422      	add	r2, r4
   15842:	b2d2      	uxtb	r2, r2
		if (expect_len != buf->len) {
   15844:	429a      	cmp	r2, r3
   15846:	d004      	beq.n	15852 <gen_prov_cont+0xe2>
			BT_ERR("Incorrect last seg len: %u != %u", expect_len,
   15848:	2145      	movs	r1, #69	; 0x45
   1584a:	4808      	ldr	r0, [pc, #32]	; (1586c <gen_prov_cont+0xfc>)
   1584c:	f00e fcf6 	bl	2423c <printk>
   15850:	e7c4      	b.n	157dc <gen_prov_cont+0x6c>
	if (!link.rx.seg) {
   15852:	b919      	cbnz	r1, 1585c <gen_prov_cont+0xec>
}
   15854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   15858:	f7ff bf50 	b.w	156fc <prov_msg_recv>
}
   1585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15860:	200002e0 	.word	0x200002e0
   15864:	0003060f 	.word	0x0003060f
   15868:	000305de 	.word	0x000305de
   1586c:	0003062d 	.word	0x0003062d

00015870 <send_reliable>:
{
   15870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15872:	f014 fdc5 	bl	2a400 <z_impl_k_uptime_ticks>
   15876:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1587a:	fba0 6705 	umull	r6, r7, r0, r5
   1587e:	fb05 7701 	mla	r7, r5, r1, r7
	link.tx.start = k_uptime_get();
   15882:	4c0f      	ldr	r4, [pc, #60]	; (158c0 <send_reliable+0x50>)
   15884:	0bf2      	lsrs	r2, r6, #15
   15886:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
   1588a:	0bfb      	lsrs	r3, r7, #15
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   1588c:	4e0d      	ldr	r6, [pc, #52]	; (158c4 <send_reliable+0x54>)
	link.tx.start = k_uptime_get();
   1588e:	e9c4 2306 	strd	r2, r3, [r4, #24]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   15892:	2500      	movs	r5, #0
   15894:	3424      	adds	r4, #36	; 0x24
		struct net_buf *buf = link.tx.buf[i];
   15896:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   1589a:	b178      	cbz	r0, 158bc <send_reliable+0x4c>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   1589c:	3501      	adds	r5, #1
   1589e:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
   158a0:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   158a4:	d005      	beq.n	158b2 <send_reliable+0x42>
   158a6:	6823      	ldr	r3, [r4, #0]
   158a8:	b11b      	cbz	r3, 158b2 <send_reliable+0x42>
			bt_mesh_adv_send(buf, NULL, NULL);
   158aa:	4611      	mov	r1, r2
   158ac:	f7f7 fc5a 	bl	d164 <bt_mesh_adv_send>
   158b0:	e7f1      	b.n	15896 <send_reliable+0x26>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   158b2:	4631      	mov	r1, r6
   158b4:	f7f7 fc56 	bl	d164 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   158b8:	2d03      	cmp	r5, #3
   158ba:	d1ec      	bne.n	15896 <send_reliable+0x26>
}
   158bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   158be:	bf00      	nop
   158c0:	200002e0 	.word	0x200002e0
   158c4:	200006e4 	.word	0x200006e4

000158c8 <bearer_ctl_send>:
{
   158c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   158cc:	461c      	mov	r4, r3
   158ce:	4606      	mov	r6, r0
   158d0:	4688      	mov	r8, r1
   158d2:	4691      	mov	r9, r2
	prov_clear_tx();
   158d4:	f7ff fd6e 	bl	153b4 <prov_clear_tx>
   158d8:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   158dc:	2300      	movs	r3, #0
   158de:	491c      	ldr	r1, [pc, #112]	; (15950 <bearer_ctl_send+0x88>)
   158e0:	481c      	ldr	r0, [pc, #112]	; (15954 <bearer_ctl_send+0x8c>)
   158e2:	f00c fd41 	bl	22368 <k_delayed_work_submit_to_queue>
	buf = adv_buf_create(reliable ? RETRANSMITS_RELIABLE :
   158e6:	2c00      	cmp	r4, #0
   158e8:	bf0c      	ite	eq
   158ea:	2002      	moveq	r0, #2
   158ec:	2000      	movne	r0, #0
   158ee:	f7ff fd6b 	bl	153c8 <adv_buf_create>
	if (!buf) {
   158f2:	4605      	mov	r5, r0
   158f4:	b348      	cbz	r0, 1594a <bearer_ctl_send+0x82>
	net_buf_add_be32(buf, link.id);
   158f6:	f8df a064 	ldr.w	sl, [pc, #100]	; 1595c <bearer_ctl_send+0x94>
	net_buf_simple_add_be32(&buf->b, val);
   158fa:	f100 0708 	add.w	r7, r0, #8
   158fe:	f8da 1000 	ldr.w	r1, [sl]
   15902:	4638      	mov	r0, r7
   15904:	f014 f88a 	bl	29a1c <net_buf_simple_add_be32>
	net_buf_add_u8(buf, 0x00);
   15908:	2100      	movs	r1, #0
   1590a:	4628      	mov	r0, r5
   1590c:	f012 fe94 	bl	28638 <net_buf_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   15910:	00b1      	lsls	r1, r6, #2
   15912:	f041 0103 	orr.w	r1, r1, #3
   15916:	b2c9      	uxtb	r1, r1
   15918:	4628      	mov	r0, r5
   1591a:	f012 fe8d 	bl	28638 <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1591e:	464a      	mov	r2, r9
   15920:	4641      	mov	r1, r8
   15922:	4638      	mov	r0, r7
   15924:	f014 f83b 	bl	2999e <net_buf_simple_add_mem>
	if (reliable) {
   15928:	b134      	cbz	r4, 15938 <bearer_ctl_send+0x70>
		link.tx.buf[0] = buf;
   1592a:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
		send_reliable();
   1592e:	f7ff ff9f 	bl	15870 <send_reliable>
	return 0;
   15932:	2000      	movs	r0, #0
}
   15934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   15938:	4628      	mov	r0, r5
   1593a:	4622      	mov	r2, r4
   1593c:	4906      	ldr	r1, [pc, #24]	; (15958 <bearer_ctl_send+0x90>)
   1593e:	f7f7 fc11 	bl	d164 <bt_mesh_adv_send>
		net_buf_unref(buf);
   15942:	4628      	mov	r0, r5
   15944:	f007 fe12 	bl	1d56c <net_buf_unref>
   15948:	e7f3      	b.n	15932 <bearer_ctl_send+0x6a>
		return -ENOBUFS;
   1594a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1594e:	e7f1      	b.n	15934 <bearer_ctl_send+0x6c>
   15950:	20000348 	.word	0x20000348
   15954:	20001988 	.word	0x20001988
   15958:	200006e4 	.word	0x200006e4
   1595c:	200002e0 	.word	0x200002e0

00015960 <gen_prov_ctl>:
{
   15960:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
   15962:	7942      	ldrb	r2, [r0, #5]
   15964:	0892      	lsrs	r2, r2, #2
   15966:	2a01      	cmp	r2, #1
{
   15968:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
   1596a:	d04c      	beq.n	15a06 <gen_prov_ctl+0xa6>
   1596c:	b255      	sxtb	r5, r2
   1596e:	b125      	cbz	r5, 1597a <gen_prov_ctl+0x1a>
   15970:	2a02      	cmp	r2, #2
   15972:	d063      	beq.n	15a3c <gen_prov_ctl+0xdc>
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   15974:	2145      	movs	r1, #69	; 0x45
   15976:	4839      	ldr	r0, [pc, #228]	; (15a5c <gen_prov_ctl+0xfc>)
   15978:	e004      	b.n	15984 <gen_prov_ctl+0x24>
	if (buf->len < 16) {
   1597a:	888a      	ldrh	r2, [r1, #4]
   1597c:	2a0f      	cmp	r2, #15
   1597e:	d805      	bhi.n	1598c <gen_prov_ctl+0x2c>
		BT_ERR("Too short bearer open message (len %u)", buf->len);
   15980:	4837      	ldr	r0, [pc, #220]	; (15a60 <gen_prov_ctl+0x100>)
   15982:	2145      	movs	r1, #69	; 0x45
}
   15984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unknown bearer opcode: 0x%02x", BEARER_CTL(rx->gpc));
   15988:	f00e bc58 	b.w	2423c <printk>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   1598c:	4628      	mov	r0, r5
   1598e:	f7ff fd2f 	bl	153f0 <atomic_test_bit.constprop.16>
   15992:	b160      	cbz	r0, 159ae <gen_prov_ctl+0x4e>
		if (link.id == rx->link_id) {
   15994:	4b33      	ldr	r3, [pc, #204]	; (15a64 <gen_prov_ctl+0x104>)
   15996:	681a      	ldr	r2, [r3, #0]
   15998:	6823      	ldr	r3, [r4, #0]
   1599a:	429a      	cmp	r2, r3
   1599c:	d15c      	bne.n	15a58 <gen_prov_ctl+0xf8>
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   1599e:	462b      	mov	r3, r5
   159a0:	462a      	mov	r2, r5
   159a2:	4629      	mov	r1, r5
   159a4:	2001      	movs	r0, #1
}
   159a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   159aa:	f7ff bf8d 	b.w	158c8 <bearer_ctl_send>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   159ae:	680d      	ldr	r5, [r1, #0]
   159b0:	f7ff f8aa 	bl	14b08 <bt_mesh_prov_get>
   159b4:	2210      	movs	r2, #16
   159b6:	6801      	ldr	r1, [r0, #0]
   159b8:	4628      	mov	r0, r5
   159ba:	f010 fbaa 	bl	26112 <memcmp>
   159be:	4603      	mov	r3, r0
   159c0:	2800      	cmp	r0, #0
   159c2:	d149      	bne.n	15a58 <gen_prov_ctl+0xf8>
	link.id = rx->link_id;
   159c4:	6821      	ldr	r1, [r4, #0]
   159c6:	4c27      	ldr	r4, [pc, #156]	; (15a64 <gen_prov_ctl+0x104>)
   159c8:	4622      	mov	r2, r4
   159ca:	f842 1b04 	str.w	r1, [r2], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   159ce:	f3bf 8f5b 	dmb	ish
   159d2:	e852 1f00 	ldrex	r1, [r2]
   159d6:	f041 0101 	orr.w	r1, r1, #1
   159da:	e842 1000 	strex	r0, r1, [r2]
   159de:	2800      	cmp	r0, #0
   159e0:	d1f7      	bne.n	159d2 <gen_prov_ctl+0x72>
   159e2:	f3bf 8f5b 	dmb	ish
	net_buf_simple_reset(link.rx.buf);
   159e6:	6962      	ldr	r2, [r4, #20]
	buf->data = buf->__buf;
   159e8:	6891      	ldr	r1, [r2, #8]
   159ea:	6011      	str	r1, [r2, #0]
	buf->len  = 0U;
   159ec:	8093      	strh	r3, [r2, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0, false);
   159ee:	4619      	mov	r1, r3
   159f0:	461a      	mov	r2, r3
   159f2:	2001      	movs	r0, #1
   159f4:	f7ff ff68 	bl	158c8 <bearer_ctl_send>
		link.cb->link_opened(&pb_adv, link.cb_data);
   159f8:	68a3      	ldr	r3, [r4, #8]
   159fa:	68e1      	ldr	r1, [r4, #12]
   159fc:	681b      	ldr	r3, [r3, #0]
   159fe:	481a      	ldr	r0, [pc, #104]	; (15a68 <gen_prov_ctl+0x108>)
}
   15a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
   15a04:	4718      	bx	r3
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   15a06:	2000      	movs	r0, #0
   15a08:	f7ff fcf2 	bl	153f0 <atomic_test_bit.constprop.16>
   15a0c:	b320      	cbz	r0, 15a58 <gen_prov_ctl+0xf8>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   15a0e:	2005      	movs	r0, #5
   15a10:	f7ff fcee 	bl	153f0 <atomic_test_bit.constprop.16>
   15a14:	b300      	cbz	r0, 15a58 <gen_prov_ctl+0xf8>
   15a16:	f3bf 8f5b 	dmb	ish
   15a1a:	4c12      	ldr	r4, [pc, #72]	; (15a64 <gen_prov_ctl+0x104>)
   15a1c:	1d23      	adds	r3, r4, #4
   15a1e:	e853 2f00 	ldrex	r2, [r3]
   15a22:	f042 0102 	orr.w	r1, r2, #2
   15a26:	e843 1000 	strex	r0, r1, [r3]
   15a2a:	2800      	cmp	r0, #0
   15a2c:	d1f7      	bne.n	15a1e <gen_prov_ctl+0xbe>
   15a2e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
   15a32:	0793      	lsls	r3, r2, #30
   15a34:	d410      	bmi.n	15a58 <gen_prov_ctl+0xf8>
		prov_clear_tx();
   15a36:	f7ff fcbd 	bl	153b4 <prov_clear_tx>
   15a3a:	e7dd      	b.n	159f8 <gen_prov_ctl+0x98>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   15a3c:	2000      	movs	r0, #0
   15a3e:	f7ff fcd7 	bl	153f0 <atomic_test_bit.constprop.16>
   15a42:	b148      	cbz	r0, 15a58 <gen_prov_ctl+0xf8>
	if (buf->len != 1) {
   15a44:	888b      	ldrh	r3, [r1, #4]
   15a46:	2b01      	cmp	r3, #1
   15a48:	d106      	bne.n	15a58 <gen_prov_ctl+0xf8>
	close_link(net_buf_simple_pull_u8(buf));
   15a4a:	4608      	mov	r0, r1
   15a4c:	f013 ff61 	bl	29912 <net_buf_simple_pull_u8>
}
   15a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
   15a54:	f7ff bd32 	b.w	154bc <close_link>
}
   15a58:	bd70      	pop	{r4, r5, r6, pc}
   15a5a:	bf00      	nop
   15a5c:	0003067f 	.word	0x0003067f
   15a60:	00030653 	.word	0x00030653
   15a64:	200002e0 	.word	0x200002e0
   15a68:	0002b568 	.word	0x0002b568

00015a6c <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   15a6c:	b507      	push	{r0, r1, r2, lr}
   15a6e:	4b0d      	ldr	r3, [pc, #52]	; (15aa4 <prov_link_close+0x38>)
   15a70:	f88d 0007 	strb.w	r0, [sp, #7]
   15a74:	f3bf 8f5b 	dmb	ish
   15a78:	e853 2f00 	ldrex	r2, [r3]
   15a7c:	f042 0104 	orr.w	r1, r2, #4
   15a80:	e843 1000 	strex	r0, r1, [r3]
   15a84:	2800      	cmp	r0, #0
   15a86:	d1f7      	bne.n	15a78 <prov_link_close+0xc>
   15a88:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
   15a8c:	0753      	lsls	r3, r2, #29
   15a8e:	d406      	bmi.n	15a9e <prov_link_close+0x32>
		return;
	}

	bearer_ctl_send(LINK_CLOSE, &status, 1, true);
   15a90:	2301      	movs	r3, #1
   15a92:	461a      	mov	r2, r3
   15a94:	f10d 0107 	add.w	r1, sp, #7
   15a98:	2002      	movs	r0, #2
   15a9a:	f7ff ff15 	bl	158c8 <bearer_ctl_send>
}
   15a9e:	b003      	add	sp, #12
   15aa0:	f85d fb04 	ldr.w	pc, [sp], #4
   15aa4:	200002e4 	.word	0x200002e4

00015aa8 <prov_link_open>:
{
   15aa8:	b570      	push	{r4, r5, r6, lr}
   15aaa:	4606      	mov	r6, r0
	err = bt_mesh_adv_enable();
   15aac:	f7fd fe9e 	bl	137ec <bt_mesh_adv_enable>
	if (err) {
   15ab0:	4604      	mov	r4, r0
   15ab2:	b128      	cbz	r0, 15ac0 <prov_link_open+0x18>
		BT_ERR("Failed enabling advertiser");
   15ab4:	2145      	movs	r1, #69	; 0x45
   15ab6:	481e      	ldr	r0, [pc, #120]	; (15b30 <prov_link_open+0x88>)
   15ab8:	f00e fbc0 	bl	2423c <printk>
}
   15abc:	4620      	mov	r0, r4
   15abe:	bd70      	pop	{r4, r5, r6, pc}
   15ac0:	4d1c      	ldr	r5, [pc, #112]	; (15b34 <prov_link_open+0x8c>)
   15ac2:	f3bf 8f5b 	dmb	ish
   15ac6:	1d2b      	adds	r3, r5, #4
   15ac8:	e853 4f00 	ldrex	r4, [r3]
   15acc:	f044 0201 	orr.w	r2, r4, #1
   15ad0:	e843 2100 	strex	r1, r2, [r3]
   15ad4:	2900      	cmp	r1, #0
   15ad6:	d1f7      	bne.n	15ac8 <prov_link_open+0x20>
   15ad8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
   15adc:	f014 0401 	ands.w	r4, r4, #1
   15ae0:	d123      	bne.n	15b2a <prov_link_open+0x82>
   15ae2:	f3bf 8f5b 	dmb	ish
   15ae6:	e853 2f00 	ldrex	r2, [r3]
   15aea:	f042 0220 	orr.w	r2, r2, #32
   15aee:	e843 2100 	strex	r1, r2, [r3]
   15af2:	2900      	cmp	r1, #0
   15af4:	d1f7      	bne.n	15ae6 <prov_link_open+0x3e>
   15af6:	f3bf 8f5b 	dmb	ish
	bt_rand(&link.id, sizeof(link.id));
   15afa:	2104      	movs	r1, #4
   15afc:	4628      	mov	r0, r5
   15afe:	f013 f915 	bl	28d2c <bt_rand>
	link.tx.id = XACT_ID_MAX;
   15b02:	237f      	movs	r3, #127	; 0x7f
   15b04:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
   15b08:	23ff      	movs	r3, #255	; 0xff
   15b0a:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
   15b0c:	9b04      	ldr	r3, [sp, #16]
   15b0e:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
   15b10:	9b05      	ldr	r3, [sp, #20]
   15b12:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
   15b14:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   15b16:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   15b18:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   15b1a:	601a      	str	r2, [r3, #0]
	bearer_ctl_send(LINK_OPEN, uuid, 16, true);
   15b1c:	4631      	mov	r1, r6
   15b1e:	2301      	movs	r3, #1
   15b20:	2210      	movs	r2, #16
   15b22:	4620      	mov	r0, r4
   15b24:	f7ff fed0 	bl	158c8 <bearer_ctl_send>
	return 0;
   15b28:	e7c8      	b.n	15abc <prov_link_open+0x14>
		return -EBUSY;
   15b2a:	f06f 040f 	mvn.w	r4, #15
   15b2e:	e7c5      	b.n	15abc <prov_link_open+0x14>
   15b30:	0002dbb0 	.word	0x0002dbb0
   15b34:	200002e0 	.word	0x200002e0

00015b38 <prov_send_adv>:
{
   15b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b3c:	4c4e      	ldr	r4, [pc, #312]	; (15c78 <prov_send_adv+0x140>)
   15b3e:	4605      	mov	r5, r0
   15b40:	4689      	mov	r9, r1
   15b42:	4690      	mov	r8, r2
	prov_clear_tx();
   15b44:	f7ff fc36 	bl	153b4 <prov_clear_tx>
   15b48:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   15b4c:	2300      	movs	r3, #0
   15b4e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   15b52:	484a      	ldr	r0, [pc, #296]	; (15c7c <prov_send_adv+0x144>)
   15b54:	f00c fc08 	bl	22368 <k_delayed_work_submit_to_queue>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   15b58:	2000      	movs	r0, #0
   15b5a:	f7ff fc35 	bl	153c8 <adv_buf_create>
	if (!start) {
   15b5e:	4606      	mov	r6, r0
   15b60:	2800      	cmp	r0, #0
   15b62:	d061      	beq.n	15c28 <prov_send_adv+0xf0>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   15b64:	f994 2020 	ldrsb.w	r2, [r4, #32]
	net_buf_simple_add_be32(&buf->b, val);
   15b68:	6821      	ldr	r1, [r4, #0]
   15b6a:	1c53      	adds	r3, r2, #1
   15b6c:	f100 0708 	add.w	r7, r0, #8
   15b70:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   15b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15b78:	4313      	orrs	r3, r2
   15b7a:	4638      	mov	r0, r7
	link.tx.id = next_transaction_id(link.tx.id);
   15b7c:	f884 3020 	strb.w	r3, [r4, #32]
   15b80:	f013 ff4c 	bl	29a1c <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   15b84:	f894 1020 	ldrb.w	r1, [r4, #32]
   15b88:	4630      	mov	r0, r6
   15b8a:	f012 fd55 	bl	28638 <net_buf_add_u8>
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   15b8e:	88ab      	ldrh	r3, [r5, #4]
	if (len <= START_PAYLOAD_MAX) {
   15b90:	b2da      	uxtb	r2, r3
   15b92:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   15b94:	bf81      	itttt	hi
   15b96:	f1a3 0114 	subhi.w	r1, r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   15b9a:	b2c9      	uxtbhi	r1, r1
   15b9c:	2317      	movhi	r3, #23
   15b9e:	fbb1 f1f3 	udivhi	r1, r1, r3
   15ba2:	bf86      	itte	hi
   15ba4:	3101      	addhi	r1, #1
   15ba6:	b2c9      	uxtbhi	r1, r1
		return 0;
   15ba8:	2100      	movls	r1, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   15baa:	0089      	lsls	r1, r1, #2
   15bac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   15bb0:	4630      	mov	r0, r6
   15bb2:	f012 fd41 	bl	28638 <net_buf_add_u8>
	net_buf_simple_add_be16(&buf->b, val);
   15bb6:	4638      	mov	r0, r7
   15bb8:	88a9      	ldrh	r1, [r5, #4]
   15bba:	f013 ff0c 	bl	299d6 <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   15bbe:	7929      	ldrb	r1, [r5, #4]
   15bc0:	6828      	ldr	r0, [r5, #0]
   15bc2:	f7fa ff7b 	bl	10abc <bt_mesh_fcs_calc>
   15bc6:	4601      	mov	r1, r0
   15bc8:	4630      	mov	r0, r6
   15bca:	f012 fd35 	bl	28638 <net_buf_add_u8>
	link.tx.buf[0] = start;
   15bce:	6266      	str	r6, [r4, #36]	; 0x24
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   15bd0:	88ae      	ldrh	r6, [r5, #4]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15bd2:	6829      	ldr	r1, [r5, #0]
	net_buf_add_mem(start, msg->data, seg_len);
   15bd4:	2e14      	cmp	r6, #20
   15bd6:	bf28      	it	cs
   15bd8:	2614      	movcs	r6, #20
   15bda:	4632      	mov	r2, r6
   15bdc:	4638      	mov	r0, r7
	link.tx.cb_data = cb_data;
   15bde:	e9c4 980c 	strd	r9, r8, [r4, #48]	; 0x30
   15be2:	f013 fedc 	bl	2999e <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   15be6:	4631      	mov	r1, r6
   15be8:	4628      	mov	r0, r5
   15bea:	f007 fd9b 	bl	1d724 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   15bee:	f8df 9094 	ldr.w	r9, [pc, #148]	; 15c84 <prov_send_adv+0x14c>
   15bf2:	2700      	movs	r7, #0
   15bf4:	88ae      	ldrh	r6, [r5, #4]
   15bf6:	b91e      	cbnz	r6, 15c00 <prov_send_adv+0xc8>
	send_reliable();
   15bf8:	f7ff fe3a 	bl	15870 <send_reliable>
	return 0;
   15bfc:	4630      	mov	r0, r6
   15bfe:	e009      	b.n	15c14 <prov_send_adv+0xdc>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   15c00:	2f08      	cmp	r7, #8
   15c02:	d109      	bne.n	15c18 <prov_send_adv+0xe0>
			BT_ERR("Too big message");
   15c04:	481e      	ldr	r0, [pc, #120]	; (15c80 <prov_send_adv+0x148>)
   15c06:	2145      	movs	r1, #69	; 0x45
   15c08:	f00e fb18 	bl	2423c <printk>
			free_segments();
   15c0c:	f7ff fbbc 	bl	15388 <free_segments>
			return -E2BIG;
   15c10:	f06f 0006 	mvn.w	r0, #6
}
   15c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   15c18:	2000      	movs	r0, #0
   15c1a:	f7ff fbd5 	bl	153c8 <adv_buf_create>
		if (!buf) {
   15c1e:	3704      	adds	r7, #4
   15c20:	4606      	mov	r6, r0
   15c22:	b920      	cbnz	r0, 15c2e <prov_send_adv+0xf6>
			free_segments();
   15c24:	f7ff fbb0 	bl	15388 <free_segments>
		return -ENOBUFS;
   15c28:	f06f 0036 	mvn.w	r0, #54	; 0x36
   15c2c:	e7f2      	b.n	15c14 <prov_send_adv+0xdc>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   15c2e:	f8b5 8004 	ldrh.w	r8, [r5, #4]
		link.tx.buf[seg_id] = buf;
   15c32:	f849 0b04 	str.w	r0, [r9], #4
	net_buf_simple_add_be32(&buf->b, val);
   15c36:	f100 0a08 	add.w	sl, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   15c3a:	f1b8 0f17 	cmp.w	r8, #23
   15c3e:	6821      	ldr	r1, [r4, #0]
   15c40:	4650      	mov	r0, sl
   15c42:	bf28      	it	cs
   15c44:	f04f 0817 	movcs.w	r8, #23
   15c48:	f013 fee8 	bl	29a1c <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   15c4c:	f894 1020 	ldrb.w	r1, [r4, #32]
   15c50:	4630      	mov	r0, r6
   15c52:	f012 fcf1 	bl	28638 <net_buf_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   15c56:	f047 0102 	orr.w	r1, r7, #2
   15c5a:	b2c9      	uxtb	r1, r1
   15c5c:	4630      	mov	r0, r6
   15c5e:	f012 fceb 	bl	28638 <net_buf_add_u8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15c62:	6829      	ldr	r1, [r5, #0]
   15c64:	4642      	mov	r2, r8
   15c66:	4650      	mov	r0, sl
   15c68:	f013 fe99 	bl	2999e <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   15c6c:	4641      	mov	r1, r8
   15c6e:	4628      	mov	r0, r5
   15c70:	f007 fd58 	bl	1d724 <net_buf_simple_pull>
   15c74:	e7be      	b.n	15bf4 <prov_send_adv+0xbc>
   15c76:	bf00      	nop
   15c78:	200002e0 	.word	0x200002e0
   15c7c:	20001988 	.word	0x20001988
   15c80:	0002f1a6 	.word	0x0002f1a6
   15c84:	20000308 	.word	0x20000308

00015c88 <gen_prov_start>:
{
   15c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (rx->xact_id == link.rx.id) {
   15c8c:	4b3f      	ldr	r3, [pc, #252]	; (15d8c <gen_prov_start+0x104>)
   15c8e:	7902      	ldrb	r2, [r0, #4]
{
   15c90:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
   15c92:	7c19      	ldrb	r1, [r3, #16]
   15c94:	428a      	cmp	r2, r1
{
   15c96:	4606      	mov	r6, r0
   15c98:	461c      	mov	r4, r3
	if (rx->xact_id == link.rx.id) {
   15c9a:	d10e      	bne.n	15cba <gen_prov_start+0x32>
		if (!link.rx.seg) {
   15c9c:	7c5b      	ldrb	r3, [r3, #17]
   15c9e:	b943      	cbnz	r3, 15cb2 <gen_prov_start+0x2a>
	return atomic_test_bit(link.flags, ADV_ACK_PENDING);
   15ca0:	2004      	movs	r0, #4
   15ca2:	f7ff fba5 	bl	153f0 <atomic_test_bit.constprop.16>
			if (!ack_pending()) {
   15ca6:	b930      	cbnz	r0, 15cb6 <gen_prov_start+0x2e>
				gen_prov_ack_send(rx->xact_id);
   15ca8:	7930      	ldrb	r0, [r6, #4]
}
   15caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				gen_prov_ack_send(rx->xact_id);
   15cae:	f7ff bcd7 	b.w	15660 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
   15cb2:	07da      	lsls	r2, r3, #31
   15cb4:	d410      	bmi.n	15cd8 <gen_prov_start+0x50>
}
   15cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   15cba:	b249      	sxtb	r1, r1
   15cbc:	1c4b      	adds	r3, r1, #1
   15cbe:	f003 007f 	and.w	r0, r3, #127	; 0x7f
   15cc2:	f001 0380 	and.w	r3, r1, #128	; 0x80
   15cc6:	4303      	orrs	r3, r0
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
   15cc8:	429a      	cmp	r2, r3
   15cca:	d005      	beq.n	15cd8 <gen_prov_start+0x50>
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   15ccc:	2157      	movs	r1, #87	; 0x57
   15cce:	4830      	ldr	r0, [pc, #192]	; (15d90 <gen_prov_start+0x108>)
}
   15cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected xact 0x%x, expected 0x%x", rx->xact_id,
   15cd4:	f00e bab2 	b.w	2423c <printk>
	net_buf_simple_reset(link.rx.buf);
   15cd8:	6967      	ldr	r7, [r4, #20]
	buf->len  = 0U;
   15cda:	2300      	movs	r3, #0
   15cdc:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
   15cde:	68bb      	ldr	r3, [r7, #8]
   15ce0:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   15ce2:	4628      	mov	r0, r5
   15ce4:	f013 fe25 	bl	29932 <net_buf_simple_pull_be16>
   15ce8:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
   15cea:	7933      	ldrb	r3, [r6, #4]
   15cec:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   15cee:	4628      	mov	r0, r5
   15cf0:	f013 fe0f 	bl	29912 <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   15cf4:	6963      	ldr	r3, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   15cf6:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
   15cf8:	889a      	ldrh	r2, [r3, #4]
   15cfa:	b922      	cbnz	r2, 15d06 <gen_prov_start+0x7e>
		BT_ERR("Ignoring zero-length provisioning PDU");
   15cfc:	4825      	ldr	r0, [pc, #148]	; (15d94 <gen_prov_start+0x10c>)
   15cfe:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Too small total length for multi-segment PDU");
   15d00:	f00e fa9c 	bl	2423c <printk>
		prov_failed(PROV_ERR_NVAL_FMT);
   15d04:	e006      	b.n	15d14 <gen_prov_start+0x8c>
	if (link.rx.buf->len > link.rx.buf->size) {
   15d06:	88db      	ldrh	r3, [r3, #6]
   15d08:	4293      	cmp	r3, r2
   15d0a:	d208      	bcs.n	15d1e <gen_prov_start+0x96>
		BT_ERR("Too large provisioning PDU (%u bytes)",
   15d0c:	4822      	ldr	r0, [pc, #136]	; (15d98 <gen_prov_start+0x110>)
   15d0e:	2145      	movs	r1, #69	; 0x45
   15d10:	f00e fa94 	bl	2423c <printk>
		prov_failed(PROV_ERR_NVAL_FMT);
   15d14:	2002      	movs	r0, #2
}
   15d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   15d1a:	f7ff bc87 	b.w	1562c <prov_failed>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   15d1e:	7973      	ldrb	r3, [r6, #5]
   15d20:	089b      	lsrs	r3, r3, #2
   15d22:	d004      	beq.n	15d2e <gen_prov_start+0xa6>
   15d24:	2a14      	cmp	r2, #20
   15d26:	d802      	bhi.n	15d2e <gen_prov_start+0xa6>
		BT_ERR("Too small total length for multi-segment PDU");
   15d28:	2145      	movs	r1, #69	; 0x45
   15d2a:	481c      	ldr	r0, [pc, #112]	; (15d9c <gen_prov_start+0x114>)
   15d2c:	e7e8      	b.n	15d00 <gen_prov_start+0x78>
	prov_clear_tx();
   15d2e:	f7ff fb41 	bl	153b4 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   15d32:	7972      	ldrb	r2, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
   15d34:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   15d36:	0892      	lsrs	r2, r2, #2
	if ((link.rx.seg & BIT(0)) &&
   15d38:	07cb      	lsls	r3, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   15d3a:	74a2      	strb	r2, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
   15d3c:	d50d      	bpl.n	15d5a <gen_prov_start+0xd2>
	    (find_msb_set((~link.rx.seg) & SEG_NVAL) - 1 > link.rx.last_seg)) {
   15d3e:	43cb      	mvns	r3, r1
	if (op == 0) {
   15d40:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   15d44:	d005      	beq.n	15d52 <gen_prov_start+0xca>
	return 32 - __builtin_clz(op);
   15d46:	fab3 f383 	clz	r3, r3
   15d4a:	f1c3 031f 	rsb	r3, r3, #31
	if ((link.rx.seg & BIT(0)) &&
   15d4e:	4293      	cmp	r3, r2
   15d50:	d906      	bls.n	15d60 <gen_prov_start+0xd8>
		BT_ERR("Invalid segment index %u", seg);
   15d52:	22ff      	movs	r2, #255	; 0xff
   15d54:	2145      	movs	r1, #69	; 0x45
   15d56:	4812      	ldr	r0, [pc, #72]	; (15da0 <gen_prov_start+0x118>)
   15d58:	e7da      	b.n	15d10 <gen_prov_start+0x88>
	uint8_t seg = SEG_NVAL;
   15d5a:	2900      	cmp	r1, #0
   15d5c:	bf08      	it	eq
   15d5e:	21ff      	moveq	r1, #255	; 0xff
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
   15d60:	3201      	adds	r2, #1
   15d62:	2301      	movs	r3, #1
   15d64:	4093      	lsls	r3, r2
   15d66:	3b01      	subs	r3, #1
   15d68:	400b      	ands	r3, r1
   15d6a:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   15d6c:	6963      	ldr	r3, [r4, #20]
   15d6e:	88aa      	ldrh	r2, [r5, #4]
   15d70:	6818      	ldr	r0, [r3, #0]
   15d72:	6829      	ldr	r1, [r5, #0]
   15d74:	f010 f9f4 	bl	26160 <memcpy>
	XACT_SEG_RECV(0);
   15d78:	7c63      	ldrb	r3, [r4, #17]
   15d7a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   15d7e:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
   15d80:	2b00      	cmp	r3, #0
   15d82:	d198      	bne.n	15cb6 <gen_prov_start+0x2e>
}
   15d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		prov_msg_recv();
   15d88:	f7ff bcb8 	b.w	156fc <prov_msg_recv>
   15d8c:	200002e0 	.word	0x200002e0
   15d90:	000306a2 	.word	0x000306a2
   15d94:	000306cb 	.word	0x000306cb
   15d98:	000306f6 	.word	0x000306f6
   15d9c:	00030721 	.word	0x00030721
   15da0:	0003060f 	.word	0x0003060f

00015da4 <bt_mesh_pb_adv_recv>:
{
   15da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
   15da6:	4d22      	ldr	r5, [pc, #136]	; (15e30 <bt_mesh_pb_adv_recv+0x8c>)
   15da8:	68ab      	ldr	r3, [r5, #8]
{
   15daa:	4604      	mov	r4, r0
	if (!link.cb) {
   15dac:	b133      	cbz	r3, 15dbc <bt_mesh_pb_adv_recv+0x18>
	if (buf->len < 6) {
   15dae:	8882      	ldrh	r2, [r0, #4]
   15db0:	2a05      	cmp	r2, #5
   15db2:	d805      	bhi.n	15dc0 <bt_mesh_pb_adv_recv+0x1c>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   15db4:	481f      	ldr	r0, [pc, #124]	; (15e34 <bt_mesh_pb_adv_recv+0x90>)
   15db6:	2157      	movs	r1, #87	; 0x57
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   15db8:	f00e fa40 	bl	2423c <printk>
}
   15dbc:	b003      	add	sp, #12
   15dbe:	bd30      	pop	{r4, r5, pc}
	rx.link_id = net_buf_simple_pull_be32(buf);
   15dc0:	f013 fdd8 	bl	29974 <net_buf_simple_pull_be32>
   15dc4:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   15dc6:	4620      	mov	r0, r4
   15dc8:	f013 fda3 	bl	29912 <net_buf_simple_pull_u8>
   15dcc:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   15dd0:	4620      	mov	r0, r4
   15dd2:	f013 fd9e 	bl	29912 <net_buf_simple_pull_u8>
   15dd6:	f88d 0005 	strb.w	r0, [sp, #5]
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
   15dda:	2000      	movs	r0, #0
   15ddc:	f7ff fb08 	bl	153f0 <atomic_test_bit.constprop.16>
   15de0:	b118      	cbz	r0, 15dea <bt_mesh_pb_adv_recv+0x46>
   15de2:	682a      	ldr	r2, [r5, #0]
   15de4:	9b00      	ldr	r3, [sp, #0]
   15de6:	429a      	cmp	r2, r3
   15de8:	d1e8      	bne.n	15dbc <bt_mesh_pb_adv_recv+0x18>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   15dea:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15dee:	4912      	ldr	r1, [pc, #72]	; (15e38 <bt_mesh_pb_adv_recv+0x94>)
   15df0:	88a0      	ldrh	r0, [r4, #4]
   15df2:	f002 0203 	and.w	r2, r2, #3
   15df6:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   15dfa:	795b      	ldrb	r3, [r3, #5]
   15dfc:	4298      	cmp	r0, r3
   15dfe:	d202      	bcs.n	15e06 <bt_mesh_pb_adv_recv+0x62>
		BT_ERR("Too short GPC message type %u", GPCF(rx->gpc));
   15e00:	2145      	movs	r1, #69	; 0x45
   15e02:	480e      	ldr	r0, [pc, #56]	; (15e3c <bt_mesh_pb_adv_recv+0x98>)
   15e04:	e7d8      	b.n	15db8 <bt_mesh_pb_adv_recv+0x14>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   15e06:	2000      	movs	r0, #0
   15e08:	f7ff faf2 	bl	153f0 <atomic_test_bit.constprop.16>
   15e0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   15e10:	b930      	cbnz	r0, 15e20 <bt_mesh_pb_adv_recv+0x7c>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   15e12:	f003 0203 	and.w	r2, r3, #3
   15e16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   15e1a:	7912      	ldrb	r2, [r2, #4]
   15e1c:	2a00      	cmp	r2, #0
   15e1e:	d1cd      	bne.n	15dbc <bt_mesh_pb_adv_recv+0x18>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   15e20:	f003 0303 	and.w	r3, r3, #3
   15e24:	4668      	mov	r0, sp
   15e26:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   15e2a:	4621      	mov	r1, r4
   15e2c:	4798      	blx	r3
   15e2e:	e7c5      	b.n	15dbc <bt_mesh_pb_adv_recv+0x18>
   15e30:	200002e0 	.word	0x200002e0
   15e34:	0003058f 	.word	0x0003058f
   15e38:	0002b548 	.word	0x0002b548
   15e3c:	000305bb 	.word	0x000305bb

00015e40 <pb_adv_init>:

void pb_adv_init(void)
{
   15e40:	b538      	push	{r3, r4, r5, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15e42:	4c09      	ldr	r4, [pc, #36]	; (15e68 <pb_adv_init+0x28>)
   15e44:	2530      	movs	r5, #48	; 0x30
   15e46:	462a      	mov	r2, r5
   15e48:	2100      	movs	r1, #0
   15e4a:	f104 0068 	add.w	r0, r4, #104	; 0x68
   15e4e:	f010 f9b1 	bl	261b4 <memset>
   15e52:	4b06      	ldr	r3, [pc, #24]	; (15e6c <pb_adv_init+0x2c>)
   15e54:	66e3      	str	r3, [r4, #108]	; 0x6c
   15e56:	462a      	mov	r2, r5
   15e58:	2100      	movs	r1, #0
   15e5a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15e5e:	f010 f9a9 	bl	261b4 <memset>
   15e62:	4b03      	ldr	r3, [pc, #12]	; (15e70 <pb_adv_init+0x30>)
   15e64:	63e3      	str	r3, [r4, #60]	; 0x3c
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
}
   15e66:	bd38      	pop	{r3, r4, r5, pc}
   15e68:	200002e0 	.word	0x200002e0
   15e6c:	000155a9 	.word	0x000155a9
   15e70:	000154e1 	.word	0x000154e1

00015e74 <reset_state>:
};

static struct prov_link link;

static void reset_state(void)
{
   15e74:	b510      	push	{r4, lr}
	if (link.conn) {
   15e76:	4c07      	ldr	r4, [pc, #28]	; (15e94 <reset_state+0x20>)
   15e78:	6820      	ldr	r0, [r4, #0]
   15e7a:	b118      	cbz	r0, 15e84 <reset_state+0x10>
		bt_conn_unref(link.conn);
   15e7c:	f7f3 fed4 	bl	9c28 <bt_conn_unref>
		link.conn = NULL;
   15e80:	2300      	movs	r3, #0
   15e82:	6023      	str	r3, [r4, #0]
	}

	k_delayed_work_cancel(&link.prot_timer);
   15e84:	4804      	ldr	r0, [pc, #16]	; (15e98 <reset_state+0x24>)
   15e86:	f00c fadf 	bl	22448 <k_delayed_work_cancel>

	link.rx_buf = bt_mesh_proxy_get_buf();
   15e8a:	f000 fa3f 	bl	1630c <bt_mesh_proxy_get_buf>
   15e8e:	60e0      	str	r0, [r4, #12]
}
   15e90:	bd10      	pop	{r4, pc}
   15e92:	bf00      	nop
   15e94:	200016c0 	.word	0x200016c0
   15e98:	200016d0 	.word	0x200016d0

00015e9c <link_closed>:

static void link_closed(enum prov_bearer_link_status status)
{
   15e9c:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   15e9e:	4b06      	ldr	r3, [pc, #24]	; (15eb8 <link_closed+0x1c>)
	void *cb_data = link.cb_data;
   15ea0:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
{
   15ea4:	4605      	mov	r5, r0

	reset_state();
   15ea6:	f7ff ffe5 	bl	15e74 <reset_state>

	cb->link_closed(&pb_gatt, cb_data, status);
   15eaa:	6873      	ldr	r3, [r6, #4]
   15eac:	4803      	ldr	r0, [pc, #12]	; (15ebc <link_closed+0x20>)
   15eae:	462a      	mov	r2, r5
   15eb0:	4621      	mov	r1, r4
}
   15eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_gatt, cb_data, status);
   15eb6:	4718      	bx	r3
   15eb8:	200016c0 	.word	0x200016c0
   15ebc:	0002b580 	.word	0x0002b580

00015ec0 <link_accept>:

	return 0;
}

static int link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   15ec0:	b538      	push	{r3, r4, r5, lr}
   15ec2:	460c      	mov	r4, r1
   15ec4:	4605      	mov	r5, r0
	bt_mesh_proxy_prov_enable();
   15ec6:	f000 fa2b 	bl	16320 <bt_mesh_proxy_prov_enable>
	bt_mesh_adv_update();
   15eca:	f7fd fc61 	bl	13790 <bt_mesh_adv_update>

	link.cb = cb;
   15ece:	4b02      	ldr	r3, [pc, #8]	; (15ed8 <link_accept+0x18>)
	link.cb_data = cb_data;

	return 0;
}
   15ed0:	2000      	movs	r0, #0
	link.cb_data = cb_data;
   15ed2:	e9c3 5401 	strd	r5, r4, [r3, #4]
}
   15ed6:	bd38      	pop	{r3, r4, r5, pc}
   15ed8:	200016c0 	.word	0x200016c0

00015edc <buf_send>:

static int buf_send(struct net_buf_simple *buf, prov_bearer_send_complete_t cb,
		    void *cb_data)
{
   15edc:	b538      	push	{r3, r4, r5, lr}
	if (!link.conn) {
   15ede:	4c0b      	ldr	r4, [pc, #44]	; (15f0c <buf_send+0x30>)
   15ee0:	6823      	ldr	r3, [r4, #0]
{
   15ee2:	4605      	mov	r5, r0
	if (!link.conn) {
   15ee4:	b173      	cbz	r3, 15f04 <buf_send+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15ee6:	f104 0110 	add.w	r1, r4, #16
   15eea:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   15eee:	2300      	movs	r3, #0
   15ef0:	4807      	ldr	r0, [pc, #28]	; (15f10 <buf_send+0x34>)
   15ef2:	f00c fa39 	bl	22368 <k_delayed_work_submit_to_queue>
		return -ENOTCONN;
	}

	k_delayed_work_submit(&link.prot_timer, PROTOCOL_TIMEOUT);

	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   15ef6:	462a      	mov	r2, r5
   15ef8:	6820      	ldr	r0, [r4, #0]
   15efa:	2103      	movs	r1, #3
}
   15efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_mesh_proxy_send(link.conn, BT_MESH_PROXY_PROV, buf);
   15f00:	f000 ba5a 	b.w	163b8 <bt_mesh_proxy_send>
}
   15f04:	f06f 0038 	mvn.w	r0, #56	; 0x38
   15f08:	bd38      	pop	{r3, r4, r5, pc}
   15f0a:	bf00      	nop
   15f0c:	200016c0 	.word	0x200016c0
   15f10:	20001988 	.word	0x20001988

00015f14 <bt_mesh_pb_gatt_recv>:
{
   15f14:	b538      	push	{r3, r4, r5, lr}
	if (link.conn != conn || !link.cb) {
   15f16:	4c13      	ldr	r4, [pc, #76]	; (15f64 <bt_mesh_pb_gatt_recv+0x50>)
   15f18:	6823      	ldr	r3, [r4, #0]
   15f1a:	4283      	cmp	r3, r0
{
   15f1c:	460d      	mov	r5, r1
	if (link.conn != conn || !link.cb) {
   15f1e:	d101      	bne.n	15f24 <bt_mesh_pb_gatt_recv+0x10>
   15f20:	6863      	ldr	r3, [r4, #4]
   15f22:	b933      	cbnz	r3, 15f32 <bt_mesh_pb_gatt_recv+0x1e>
		BT_WARN("Data for unexpected connection");
   15f24:	4810      	ldr	r0, [pc, #64]	; (15f68 <bt_mesh_pb_gatt_recv+0x54>)
   15f26:	2157      	movs	r1, #87	; 0x57
   15f28:	f00e f988 	bl	2423c <printk>
		return -ENOTCONN;
   15f2c:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
   15f30:	bd38      	pop	{r3, r4, r5, pc}
	if (buf->len < 1) {
   15f32:	888a      	ldrh	r2, [r1, #4]
   15f34:	b932      	cbnz	r2, 15f44 <bt_mesh_pb_gatt_recv+0x30>
		BT_WARN("Too short provisioning packet (len %u)", buf->len);
   15f36:	480d      	ldr	r0, [pc, #52]	; (15f6c <bt_mesh_pb_gatt_recv+0x58>)
   15f38:	2157      	movs	r1, #87	; 0x57
   15f3a:	f00e f97f 	bl	2423c <printk>
		return -EINVAL;
   15f3e:	f06f 0015 	mvn.w	r0, #21
   15f42:	e7f5      	b.n	15f30 <bt_mesh_pb_gatt_recv+0x1c>
   15f44:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   15f48:	2300      	movs	r3, #0
   15f4a:	f104 0110 	add.w	r1, r4, #16
   15f4e:	4808      	ldr	r0, [pc, #32]	; (15f70 <bt_mesh_pb_gatt_recv+0x5c>)
   15f50:	f00c fa0a 	bl	22368 <k_delayed_work_submit_to_queue>
	link.cb->recv(&pb_gatt, link.cb_data, buf);
   15f54:	6863      	ldr	r3, [r4, #4]
   15f56:	4807      	ldr	r0, [pc, #28]	; (15f74 <bt_mesh_pb_gatt_recv+0x60>)
   15f58:	68db      	ldr	r3, [r3, #12]
   15f5a:	68a1      	ldr	r1, [r4, #8]
   15f5c:	462a      	mov	r2, r5
   15f5e:	4798      	blx	r3
	return 0;
   15f60:	2000      	movs	r0, #0
   15f62:	e7e5      	b.n	15f30 <bt_mesh_pb_gatt_recv+0x1c>
   15f64:	200016c0 	.word	0x200016c0
   15f68:	000307d4 	.word	0x000307d4
   15f6c:	0003058f 	.word	0x0003058f
   15f70:	20001988 	.word	0x20001988
   15f74:	0002b580 	.word	0x0002b580

00015f78 <bt_mesh_pb_gatt_open>:
{
   15f78:	b538      	push	{r3, r4, r5, lr}
	if (link.conn) {
   15f7a:	4d0c      	ldr	r5, [pc, #48]	; (15fac <bt_mesh_pb_gatt_open+0x34>)
   15f7c:	682c      	ldr	r4, [r5, #0]
   15f7e:	b98c      	cbnz	r4, 15fa4 <bt_mesh_pb_gatt_open+0x2c>
	link.conn = bt_conn_ref(conn);
   15f80:	f010 fd6c 	bl	26a5c <bt_conn_ref>
   15f84:	4629      	mov	r1, r5
   15f86:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   15f8a:	f841 0b10 	str.w	r0, [r1], #16
   15f8e:	2300      	movs	r3, #0
   15f90:	4807      	ldr	r0, [pc, #28]	; (15fb0 <bt_mesh_pb_gatt_open+0x38>)
   15f92:	f00c f9e9 	bl	22368 <k_delayed_work_submit_to_queue>
	link.cb->link_opened(&pb_gatt, link.cb_data);
   15f96:	686b      	ldr	r3, [r5, #4]
   15f98:	4806      	ldr	r0, [pc, #24]	; (15fb4 <bt_mesh_pb_gatt_open+0x3c>)
   15f9a:	681b      	ldr	r3, [r3, #0]
   15f9c:	68a9      	ldr	r1, [r5, #8]
   15f9e:	4798      	blx	r3
	return 0;
   15fa0:	4620      	mov	r0, r4
}
   15fa2:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
   15fa4:	f06f 000f 	mvn.w	r0, #15
   15fa8:	e7fb      	b.n	15fa2 <bt_mesh_pb_gatt_open+0x2a>
   15faa:	bf00      	nop
   15fac:	200016c0 	.word	0x200016c0
   15fb0:	20001988 	.word	0x20001988
   15fb4:	0002b580 	.word	0x0002b580

00015fb8 <bt_mesh_pb_gatt_close>:
{
   15fb8:	b508      	push	{r3, lr}
	if (link.conn != conn) {
   15fba:	4b06      	ldr	r3, [pc, #24]	; (15fd4 <bt_mesh_pb_gatt_close+0x1c>)
   15fbc:	681b      	ldr	r3, [r3, #0]
   15fbe:	4283      	cmp	r3, r0
   15fc0:	d104      	bne.n	15fcc <bt_mesh_pb_gatt_close+0x14>
	link_closed(PROV_BEARER_LINK_STATUS_SUCCESS);
   15fc2:	2000      	movs	r0, #0
   15fc4:	f7ff ff6a 	bl	15e9c <link_closed>
	return 0;
   15fc8:	2000      	movs	r0, #0
}
   15fca:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
   15fcc:	f06f 0038 	mvn.w	r0, #56	; 0x38
   15fd0:	e7fb      	b.n	15fca <bt_mesh_pb_gatt_close+0x12>
   15fd2:	bf00      	nop
   15fd4:	200016c0 	.word	0x200016c0

00015fd8 <pb_gatt_init>:
{
	/* No action */
}

void pb_gatt_init(void)
{
   15fd8:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15fda:	4c05      	ldr	r4, [pc, #20]	; (15ff0 <pb_gatt_init+0x18>)
   15fdc:	2230      	movs	r2, #48	; 0x30
   15fde:	2100      	movs	r1, #0
   15fe0:	f104 0010 	add.w	r0, r4, #16
   15fe4:	f010 f8e6 	bl	261b4 <memset>
   15fe8:	4b02      	ldr	r3, [pc, #8]	; (15ff4 <pb_gatt_init+0x1c>)
   15fea:	6163      	str	r3, [r4, #20]
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
}
   15fec:	bd10      	pop	{r4, pc}
   15fee:	bf00      	nop
   15ff0:	200016c0 	.word	0x200016c0
   15ff4:	00028645 	.word	0x00028645

00015ff8 <proxy_complete_pdu>:
}

#endif /* GATT_PROXY */

static void proxy_complete_pdu(struct bt_mesh_proxy_client *client)
{
   15ff8:	b510      	push	{r4, lr}
	switch (client->msg_type) {
   15ffa:	79c2      	ldrb	r2, [r0, #7]
   15ffc:	2a03      	cmp	r2, #3
{
   15ffe:	4604      	mov	r4, r0
	switch (client->msg_type) {
   16000:	d109      	bne.n	16016 <proxy_complete_pdu+0x1e>
		break;
#endif
#if defined(CONFIG_BT_MESH_PB_GATT)
	case BT_MESH_PROXY_PROV:
		BT_DBG("Mesh Provisioning PDU");
		bt_mesh_pb_gatt_recv(client->conn, &client->buf);
   16002:	f100 0138 	add.w	r1, r0, #56	; 0x38
   16006:	6800      	ldr	r0, [r0, #0]
   16008:	f7ff ff84 	bl	15f14 <bt_mesh_pb_gatt_recv>
	buf->len  = 0U;
   1600c:	2300      	movs	r3, #0
   1600e:	87a3      	strh	r3, [r4, #60]	; 0x3c
	buf->data = buf->__buf;
   16010:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16012:	63a3      	str	r3, [r4, #56]	; 0x38
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
		break;
	}

	net_buf_simple_reset(&client->buf);
}
   16014:	bd10      	pop	{r4, pc}
		BT_WARN("Unhandled Message Type 0x%02x", client->msg_type);
   16016:	2157      	movs	r1, #87	; 0x57
   16018:	4801      	ldr	r0, [pc, #4]	; (16020 <proxy_complete_pdu+0x28>)
   1601a:	f00e f90f 	bl	2423c <printk>
   1601e:	e7f5      	b.n	1600c <proxy_complete_pdu+0x14>
   16020:	000308d8 	.word	0x000308d8

00016024 <proxy_sar_timeout>:
{
   16024:	b510      	push	{r4, lr}
   16026:	4604      	mov	r4, r0
	BT_WARN("Proxy SAR timeout");
   16028:	2157      	movs	r1, #87	; 0x57
   1602a:	4806      	ldr	r0, [pc, #24]	; (16044 <proxy_sar_timeout+0x20>)
   1602c:	f00e f906 	bl	2423c <printk>
	if (client->conn) {
   16030:	f854 0c08 	ldr.w	r0, [r4, #-8]
   16034:	b120      	cbz	r0, 16040 <proxy_sar_timeout+0x1c>
		bt_conn_disconnect(client->conn,
   16036:	2113      	movs	r1, #19
}
   16038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(client->conn,
   1603c:	f7f3 bf5c 	b.w	9ef8 <bt_conn_disconnect>
}
   16040:	bd10      	pop	{r4, pc}
   16042:	bf00      	nop
   16044:	00030a7f 	.word	0x00030a7f

00016048 <proxy_disconnected>:
{
	int i;

	BT_DBG("conn %p reason 0x%02x", conn, reason);

	conn_count--;
   16048:	4a0c      	ldr	r2, [pc, #48]	; (1607c <proxy_disconnected+0x34>)
   1604a:	6813      	ldr	r3, [r2, #0]
{
   1604c:	b510      	push	{r4, lr}

	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		if (client->conn == conn) {
   1604e:	4c0c      	ldr	r4, [pc, #48]	; (16080 <proxy_disconnected+0x38>)
	conn_count--;
   16050:	3b01      	subs	r3, #1
   16052:	6013      	str	r3, [r2, #0]
		if (client->conn == conn) {
   16054:	6823      	ldr	r3, [r4, #0]
   16056:	4283      	cmp	r3, r0
   16058:	d10c      	bne.n	16074 <proxy_disconnected+0x2c>
			if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT) &&
   1605a:	79a3      	ldrb	r3, [r4, #6]
   1605c:	2b03      	cmp	r3, #3
   1605e:	d101      	bne.n	16064 <proxy_disconnected+0x1c>
			    client->filter_type == PROV) {
				bt_mesh_pb_gatt_close(conn);
   16060:	f7ff ffaa 	bl	15fb8 <bt_mesh_pb_gatt_close>
			}

			k_delayed_work_cancel(&client->sar_timer);
   16064:	4807      	ldr	r0, [pc, #28]	; (16084 <proxy_disconnected+0x3c>)
   16066:	f00c f9ef 	bl	22448 <k_delayed_work_cancel>
			bt_conn_unref(client->conn);
   1606a:	6820      	ldr	r0, [r4, #0]
   1606c:	f7f3 fddc 	bl	9c28 <bt_conn_unref>
			client->conn = NULL;
   16070:	2300      	movs	r3, #0
   16072:	6023      	str	r3, [r4, #0]
			break;
		}
	}

	bt_mesh_adv_update();
}
   16074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_adv_update();
   16078:	f7fd bb8a 	b.w	13790 <bt_mesh_adv_update>
   1607c:	2000241c 	.word	0x2000241c
   16080:	20001700 	.word	0x20001700
   16084:	20001708 	.word	0x20001708

00016088 <proxy_connected>:
	conn_count++;
   16088:	4a10      	ldr	r2, [pc, #64]	; (160cc <proxy_connected+0x44>)
   1608a:	6813      	ldr	r3, [r2, #0]
   1608c:	3301      	adds	r3, #1
	if (conn_count < CONFIG_BT_MAX_CONN) {
   1608e:	2b00      	cmp	r3, #0
{
   16090:	b570      	push	{r4, r5, r6, lr}
   16092:	4606      	mov	r6, r0
	conn_count++;
   16094:	6013      	str	r3, [r2, #0]
	if (conn_count < CONFIG_BT_MAX_CONN) {
   16096:	dc01      	bgt.n	1609c <proxy_connected+0x14>
		bt_mesh_adv_update();
   16098:	f7fd fb7a 	bl	13790 <bt_mesh_adv_update>
		if (!clients[i].conn) {
   1609c:	4c0c      	ldr	r4, [pc, #48]	; (160d0 <proxy_connected+0x48>)
   1609e:	6825      	ldr	r5, [r4, #0]
   160a0:	b12d      	cbz	r5, 160ae <proxy_connected+0x26>
		BT_ERR("No free Proxy Client objects");
   160a2:	2145      	movs	r1, #69	; 0x45
   160a4:	480b      	ldr	r0, [pc, #44]	; (160d4 <proxy_connected+0x4c>)
}
   160a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("No free Proxy Client objects");
   160aa:	f00e b8c7 	b.w	2423c <printk>
	client->conn = bt_conn_ref(conn);
   160ae:	4630      	mov	r0, r6
   160b0:	f010 fcd4 	bl	26a5c <bt_conn_ref>
	(void)memset(client->filter, 0, sizeof(client->filter));
   160b4:	2202      	movs	r2, #2
	client->conn = bt_conn_ref(conn);
   160b6:	6020      	str	r0, [r4, #0]
	(void)memset(client->filter, 0, sizeof(client->filter));
   160b8:	4629      	mov	r1, r5
   160ba:	1d20      	adds	r0, r4, #4
	client->filter_type = NONE;
   160bc:	71a5      	strb	r5, [r4, #6]
	(void)memset(client->filter, 0, sizeof(client->filter));
   160be:	f010 f879 	bl	261b4 <memset>
   160c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
	buf->len  = 0U;
   160c4:	87a5      	strh	r5, [r4, #60]	; 0x3c
	buf->data = buf->__buf;
   160c6:	63a3      	str	r3, [r4, #56]	; 0x38
}
   160c8:	bd70      	pop	{r4, r5, r6, pc}
   160ca:	bf00      	nop
   160cc:	2000241c 	.word	0x2000241c
   160d0:	20001700 	.word	0x20001700
   160d4:	000308fb 	.word	0x000308fb

000160d8 <notify_complete>:
}

#endif /* CONFIG_BT_MESH_GATT_PROXY */

static void notify_complete(struct bt_conn *conn, void *user_data)
{
   160d8:	b510      	push	{r4, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   160da:	4b0d      	ldr	r3, [pc, #52]	; (16110 <notify_complete+0x38>)
   160dc:	f3bf 8f5b 	dmb	ish
   160e0:	e853 2f00 	ldrex	r2, [r3]
   160e4:	1e51      	subs	r1, r2, #1
   160e6:	e843 1000 	strex	r0, r1, [r3]
   160ea:	2800      	cmp	r0, #0
   160ec:	d1f8      	bne.n	160e0 <notify_complete+0x8>
   160ee:	f3bf 8f5b 	dmb	ish
	sys_snode_t *n;

	if (atomic_dec(&pending_notifications) > 1) {
   160f2:	2a01      	cmp	r2, #1
   160f4:	dc0b      	bgt.n	1610e <notify_complete+0x36>
Z_GENLIST_IS_EMPTY(slist)
   160f6:	4c07      	ldr	r4, [pc, #28]	; (16114 <notify_complete+0x3c>)
   160f8:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   160fa:	b143      	cbz	r3, 1610e <notify_complete+0x36>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   160fc:	6861      	ldr	r1, [r4, #4]
   160fe:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   16100:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16102:	428b      	cmp	r3, r1
	list->tail = node;
   16104:	bf08      	it	eq
   16106:	6062      	streq	r2, [r4, #4]
	}

	BT_DBG("");

	while ((n = sys_slist_get(&idle_waiters))) {
		CONTAINER_OF(n, struct bt_mesh_proxy_idle_cb, n)->cb();
   16108:	685b      	ldr	r3, [r3, #4]
   1610a:	4798      	blx	r3
   1610c:	e7f4      	b.n	160f8 <notify_complete+0x20>
	}
}
   1610e:	bd10      	pop	{r4, pc}
   16110:	20002428 	.word	0x20002428
   16114:	20002420 	.word	0x20002420

00016118 <proxy_send>:

static int proxy_send(struct bt_conn *conn, const void *data,
		      uint16_t len)
{
   16118:	b570      	push	{r4, r5, r6, lr}
   1611a:	b086      	sub	sp, #24
   1611c:	460e      	mov	r6, r1
   1611e:	4615      	mov	r5, r2
   16120:	4604      	mov	r4, r0
	struct bt_gatt_notify_params params = {
   16122:	2218      	movs	r2, #24
   16124:	2100      	movs	r1, #0
   16126:	4668      	mov	r0, sp
   16128:	f010 f844 	bl	261b4 <memset>
   1612c:	4b0f      	ldr	r3, [pc, #60]	; (1616c <proxy_send+0x54>)
   1612e:	9304      	str	r3, [sp, #16]
	if (gatt_svc == MESH_GATT_PROXY) {
		params.attr = &proxy_attrs[3];
	}
#endif
#if defined(CONFIG_BT_MESH_PB_GATT)
	if (gatt_svc == MESH_GATT_PROV) {
   16130:	4b0f      	ldr	r3, [pc, #60]	; (16170 <proxy_send+0x58>)
	struct bt_gatt_notify_params params = {
   16132:	9602      	str	r6, [sp, #8]
	if (gatt_svc == MESH_GATT_PROV) {
   16134:	781b      	ldrb	r3, [r3, #0]
	struct bt_gatt_notify_params params = {
   16136:	f8ad 500c 	strh.w	r5, [sp, #12]
	if (gatt_svc == MESH_GATT_PROV) {
   1613a:	2b01      	cmp	r3, #1
   1613c:	d114      	bne.n	16168 <proxy_send+0x50>
		params.attr = &prov_attrs[3];
   1613e:	4b0d      	ldr	r3, [pc, #52]	; (16174 <proxy_send+0x5c>)
   16140:	9301      	str	r3, [sp, #4]

	if (!params.attr) {
		return 0;
	}

	err = bt_gatt_notify_cb(conn, &params);
   16142:	4669      	mov	r1, sp
   16144:	4620      	mov	r0, r4
   16146:	f7f6 fa51 	bl	c5ec <bt_gatt_notify_cb>
	if (!err) {
   1614a:	b958      	cbnz	r0, 16164 <proxy_send+0x4c>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1614c:	f3bf 8f5b 	dmb	ish
   16150:	4b09      	ldr	r3, [pc, #36]	; (16178 <proxy_send+0x60>)
   16152:	e853 2f00 	ldrex	r2, [r3]
   16156:	3201      	adds	r2, #1
   16158:	e843 2100 	strex	r1, r2, [r3]
   1615c:	2900      	cmp	r1, #0
   1615e:	d1f8      	bne.n	16152 <proxy_send+0x3a>
   16160:	f3bf 8f5b 	dmb	ish
		atomic_inc(&pending_notifications);
	}

	return err;
}
   16164:	b006      	add	sp, #24
   16166:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   16168:	2000      	movs	r0, #0
   1616a:	e7fb      	b.n	16164 <proxy_send+0x4c>
   1616c:	000160d9 	.word	0x000160d9
   16170:	200036a7 	.word	0x200036a7
   16174:	20000758 	.word	0x20000758
   16178:	20002428 	.word	0x20002428

0001617c <prov_ccc_write>:
	if (value != BT_GATT_CCC_NOTIFY) {
   1617c:	2a01      	cmp	r2, #1
{
   1617e:	b508      	push	{r3, lr}
	if (value != BT_GATT_CCC_NOTIFY) {
   16180:	d111      	bne.n	161a6 <prov_ccc_write+0x2a>
		if (clients[i].conn == conn) {
   16182:	4b10      	ldr	r3, [pc, #64]	; (161c4 <prov_ccc_write+0x48>)
   16184:	681a      	ldr	r2, [r3, #0]
   16186:	4290      	cmp	r0, r2
   16188:	d014      	beq.n	161b4 <prov_ccc_write+0x38>
	__ASSERT(client, "No client for connection");
   1618a:	f240 226e 	movw	r2, #622	; 0x26e
   1618e:	490e      	ldr	r1, [pc, #56]	; (161c8 <prov_ccc_write+0x4c>)
   16190:	480e      	ldr	r0, [pc, #56]	; (161cc <prov_ccc_write+0x50>)
   16192:	f00e f853 	bl	2423c <printk>
   16196:	f240 216e 	movw	r1, #622	; 0x26e
   1619a:	480b      	ldr	r0, [pc, #44]	; (161c8 <prov_ccc_write+0x4c>)
   1619c:	f00e fb00 	bl	247a0 <assert_post_action>
	if (client->filter_type == NONE) {
   161a0:	2300      	movs	r3, #0
   161a2:	799b      	ldrb	r3, [r3, #6]
   161a4:	deff      	udf	#255	; 0xff
		BT_WARN("Client wrote 0x%04x instead enabling notify", value);
   161a6:	480a      	ldr	r0, [pc, #40]	; (161d0 <prov_ccc_write+0x54>)
   161a8:	2157      	movs	r1, #87	; 0x57
   161aa:	f00e f847 	bl	2423c <printk>
   161ae:	f06f 0012 	mvn.w	r0, #18
}
   161b2:	bd08      	pop	{r3, pc}
	if (client->filter_type == NONE) {
   161b4:	799a      	ldrb	r2, [r3, #6]
   161b6:	b91a      	cbnz	r2, 161c0 <prov_ccc_write+0x44>
		client->filter_type = PROV;
   161b8:	2203      	movs	r2, #3
   161ba:	719a      	strb	r2, [r3, #6]
		bt_mesh_pb_gatt_open(conn);
   161bc:	f7ff fedc 	bl	15f78 <bt_mesh_pb_gatt_open>
	return sizeof(value);
   161c0:	2002      	movs	r0, #2
   161c2:	e7f6      	b.n	161b2 <prov_ccc_write+0x36>
   161c4:	20001700 	.word	0x20001700
   161c8:	000308a7 	.word	0x000308a7
   161cc:	0002bced 	.word	0x0002bced
   161d0:	00030876 	.word	0x00030876

000161d4 <proxy_recv>:
{
   161d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (clients[i].conn == conn) {
   161d6:	4c42      	ldr	r4, [pc, #264]	; (162e0 <proxy_recv+0x10c>)
{
   161d8:	4616      	mov	r6, r2
		if (clients[i].conn == conn) {
   161da:	6822      	ldr	r2, [r4, #0]
   161dc:	4282      	cmp	r2, r0
   161de:	d17b      	bne.n	162d8 <proxy_recv+0x104>
	if (len < 1) {
   161e0:	b933      	cbnz	r3, 161f0 <proxy_recv+0x1c>
		BT_WARN("Too small Proxy PDU");
   161e2:	4840      	ldr	r0, [pc, #256]	; (162e4 <proxy_recv+0x110>)
   161e4:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Unexpected message type in last SAR PDU");
   161e6:	f00e f829 	bl	2423c <printk>
			return -EINVAL;
   161ea:	f06f 0515 	mvn.w	r5, #21
   161ee:	e049      	b.n	16284 <proxy_recv+0xb0>
	if (ATTR_IS_PROV(attr) != (PDU_TYPE(data) == BT_MESH_PROXY_PROV)) {
   161f0:	7832      	ldrb	r2, [r6, #0]
   161f2:	68c9      	ldr	r1, [r1, #12]
   161f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   161f8:	3100      	adds	r1, #0
   161fa:	f1a2 0003 	sub.w	r0, r2, #3
   161fe:	bf18      	it	ne
   16200:	2101      	movne	r1, #1
   16202:	4242      	negs	r2, r0
   16204:	4142      	adcs	r2, r0
   16206:	4291      	cmp	r1, r2
   16208:	d002      	beq.n	16210 <proxy_recv+0x3c>
		BT_WARN("Proxy PDU type doesn't match GATT service");
   1620a:	2157      	movs	r1, #87	; 0x57
   1620c:	4836      	ldr	r0, [pc, #216]	; (162e8 <proxy_recv+0x114>)
   1620e:	e7ea      	b.n	161e6 <proxy_recv+0x12>
	if (len - 1 > net_buf_simple_tailroom(&client->buf)) {
   16210:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16214:	1e5f      	subs	r7, r3, #1
   16216:	461d      	mov	r5, r3
   16218:	f013 fbb9 	bl	2998e <net_buf_simple_tailroom>
   1621c:	4287      	cmp	r7, r0
   1621e:	d902      	bls.n	16226 <proxy_recv+0x52>
		BT_WARN("Too big proxy PDU");
   16220:	2157      	movs	r1, #87	; 0x57
   16222:	4832      	ldr	r0, [pc, #200]	; (162ec <proxy_recv+0x118>)
   16224:	e7df      	b.n	161e6 <proxy_recv+0x12>
	switch (PDU_SAR(data)) {
   16226:	7833      	ldrb	r3, [r6, #0]
   16228:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   1622a:	0999      	lsrs	r1, r3, #6
   1622c:	2902      	cmp	r1, #2
   1622e:	d02b      	beq.n	16288 <proxy_recv+0xb4>
   16230:	2903      	cmp	r1, #3
   16232:	d040      	beq.n	162b6 <proxy_recv+0xe2>
   16234:	2901      	cmp	r1, #1
   16236:	d00e      	beq.n	16256 <proxy_recv+0x82>
		if (client->buf.len) {
   16238:	b112      	cbz	r2, 16240 <proxy_recv+0x6c>
			BT_WARN("Complete PDU while a pending incomplete one");
   1623a:	2157      	movs	r1, #87	; 0x57
   1623c:	482c      	ldr	r0, [pc, #176]	; (162f0 <proxy_recv+0x11c>)
   1623e:	e7d2      	b.n	161e6 <proxy_recv+0x12>
		client->msg_type = PDU_TYPE(data);
   16240:	71e3      	strb	r3, [r4, #7]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   16242:	463a      	mov	r2, r7
   16244:	1c71      	adds	r1, r6, #1
   16246:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1624a:	f013 fba8 	bl	2999e <net_buf_simple_add_mem>
		proxy_complete_pdu(client);
   1624e:	4620      	mov	r0, r4
   16250:	f7ff fed2 	bl	15ff8 <proxy_complete_pdu>
		break;
   16254:	e016      	b.n	16284 <proxy_recv+0xb0>
		if (client->buf.len) {
   16256:	b112      	cbz	r2, 1625e <proxy_recv+0x8a>
			BT_WARN("First PDU while a pending incomplete one");
   16258:	2157      	movs	r1, #87	; 0x57
   1625a:	4826      	ldr	r0, [pc, #152]	; (162f4 <proxy_recv+0x120>)
   1625c:	e7c3      	b.n	161e6 <proxy_recv+0x12>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1625e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   16262:	2300      	movs	r3, #0
   16264:	f104 0108 	add.w	r1, r4, #8
   16268:	4823      	ldr	r0, [pc, #140]	; (162f8 <proxy_recv+0x124>)
   1626a:	f00c f87d 	bl	22368 <k_delayed_work_submit_to_queue>
		client->msg_type = PDU_TYPE(data);
   1626e:	4631      	mov	r1, r6
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   16270:	463a      	mov	r2, r7
		client->msg_type = PDU_TYPE(data);
   16272:	f811 3b01 	ldrb.w	r3, [r1], #1
   16276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1627a:	71e3      	strb	r3, [r4, #7]
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   1627c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16280:	f013 fb8d 	bl	2999e <net_buf_simple_add_mem>
}
   16284:	4628      	mov	r0, r5
   16286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!client->buf.len) {
   16288:	b912      	cbnz	r2, 16290 <proxy_recv+0xbc>
			BT_WARN("Continuation with no prior data");
   1628a:	2157      	movs	r1, #87	; 0x57
   1628c:	481b      	ldr	r0, [pc, #108]	; (162fc <proxy_recv+0x128>)
   1628e:	e7aa      	b.n	161e6 <proxy_recv+0x12>
		if (client->msg_type != PDU_TYPE(data)) {
   16290:	79e2      	ldrb	r2, [r4, #7]
   16292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16296:	429a      	cmp	r2, r3
   16298:	d002      	beq.n	162a0 <proxy_recv+0xcc>
			BT_WARN("Unexpected message type in continuation");
   1629a:	2157      	movs	r1, #87	; 0x57
   1629c:	4818      	ldr	r0, [pc, #96]	; (16300 <proxy_recv+0x12c>)
   1629e:	e7a2      	b.n	161e6 <proxy_recv+0x12>
   162a0:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   162a4:	f104 0108 	add.w	r1, r4, #8
   162a8:	2300      	movs	r3, #0
   162aa:	4813      	ldr	r0, [pc, #76]	; (162f8 <proxy_recv+0x124>)
   162ac:	f00c f85c 	bl	22368 <k_delayed_work_submit_to_queue>
		net_buf_simple_add_mem(&client->buf, data + 1, len - 1);
   162b0:	463a      	mov	r2, r7
   162b2:	1c71      	adds	r1, r6, #1
   162b4:	e7e2      	b.n	1627c <proxy_recv+0xa8>
		if (!client->buf.len) {
   162b6:	b912      	cbnz	r2, 162be <proxy_recv+0xea>
			BT_WARN("Last SAR PDU with no prior data");
   162b8:	2157      	movs	r1, #87	; 0x57
   162ba:	4812      	ldr	r0, [pc, #72]	; (16304 <proxy_recv+0x130>)
   162bc:	e793      	b.n	161e6 <proxy_recv+0x12>
		if (client->msg_type != PDU_TYPE(data)) {
   162be:	79e2      	ldrb	r2, [r4, #7]
   162c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   162c4:	429a      	cmp	r2, r3
   162c6:	d002      	beq.n	162ce <proxy_recv+0xfa>
			BT_WARN("Unexpected message type in last SAR PDU");
   162c8:	2157      	movs	r1, #87	; 0x57
   162ca:	480f      	ldr	r0, [pc, #60]	; (16308 <proxy_recv+0x134>)
   162cc:	e78b      	b.n	161e6 <proxy_recv+0x12>
		k_delayed_work_cancel(&client->sar_timer);
   162ce:	f104 0008 	add.w	r0, r4, #8
   162d2:	f00c f8b9 	bl	22448 <k_delayed_work_cancel>
   162d6:	e7b4      	b.n	16242 <proxy_recv+0x6e>
		return -ENOTCONN;
   162d8:	f06f 0538 	mvn.w	r5, #56	; 0x38
   162dc:	e7d2      	b.n	16284 <proxy_recv+0xb0>
   162de:	bf00      	nop
   162e0:	20001700 	.word	0x20001700
   162e4:	0003091d 	.word	0x0003091d
   162e8:	00030936 	.word	0x00030936
   162ec:	00030965 	.word	0x00030965
   162f0:	0003097c 	.word	0x0003097c
   162f4:	000309ad 	.word	0x000309ad
   162f8:	20001988 	.word	0x20001988
   162fc:	000309db 	.word	0x000309db
   16300:	00030a00 	.word	0x00030a00
   16304:	00030a2d 	.word	0x00030a2d
   16308:	00030a52 	.word	0x00030a52

0001630c <bt_mesh_proxy_get_buf>:
	buf->len  = 0U;
   1630c:	4803      	ldr	r0, [pc, #12]	; (1631c <bt_mesh_proxy_get_buf+0x10>)
   1630e:	2300      	movs	r3, #0
   16310:	8783      	strh	r3, [r0, #60]	; 0x3c
	buf->data = buf->__buf;
   16312:	6c03      	ldr	r3, [r0, #64]	; 0x40
   16314:	f840 3f38 	str.w	r3, [r0, #56]!
}
   16318:	4770      	bx	lr
   1631a:	bf00      	nop
   1631c:	20001700 	.word	0x20001700

00016320 <bt_mesh_proxy_prov_enable>:
{
   16320:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_PROV) {
   16322:	4d0c      	ldr	r5, [pc, #48]	; (16354 <bt_mesh_proxy_prov_enable+0x34>)
   16324:	782c      	ldrb	r4, [r5, #0]
   16326:	2c01      	cmp	r4, #1
   16328:	d00e      	beq.n	16348 <bt_mesh_proxy_prov_enable+0x28>
	if (gatt_svc != MESH_GATT_NONE) {
   1632a:	b984      	cbnz	r4, 1634e <bt_mesh_proxy_prov_enable+0x2e>
	bt_gatt_service_register(&prov_svc);
   1632c:	480a      	ldr	r0, [pc, #40]	; (16358 <bt_mesh_proxy_prov_enable+0x38>)
   1632e:	f7f5 fffd 	bl	c32c <bt_gatt_service_register>
	prov_fast_adv = true;
   16332:	4a0a      	ldr	r2, [pc, #40]	; (1635c <bt_mesh_proxy_prov_enable+0x3c>)
	gatt_svc = MESH_GATT_PROV;
   16334:	2301      	movs	r3, #1
   16336:	702b      	strb	r3, [r5, #0]
	prov_fast_adv = true;
   16338:	7013      	strb	r3, [r2, #0]
		if (clients[i].conn) {
   1633a:	4b09      	ldr	r3, [pc, #36]	; (16360 <bt_mesh_proxy_prov_enable+0x40>)
   1633c:	6818      	ldr	r0, [r3, #0]
   1633e:	b110      	cbz	r0, 16346 <bt_mesh_proxy_prov_enable+0x26>
			clients[i].filter_type = PROV;
   16340:	2203      	movs	r2, #3
   16342:	719a      	strb	r2, [r3, #6]
	return 0;
   16344:	4620      	mov	r0, r4
}
   16346:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   16348:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1634c:	e7fb      	b.n	16346 <bt_mesh_proxy_prov_enable+0x26>
		return -EBUSY;
   1634e:	f06f 000f 	mvn.w	r0, #15
   16352:	e7f8      	b.n	16346 <bt_mesh_proxy_prov_enable+0x26>
   16354:	200036a7 	.word	0x200036a7
   16358:	200007ac 	.word	0x200007ac
   1635c:	200036a8 	.word	0x200036a8
   16360:	20001700 	.word	0x20001700

00016364 <bt_mesh_proxy_prov_disable>:
{
   16364:	b538      	push	{r3, r4, r5, lr}
	if (gatt_svc == MESH_GATT_NONE) {
   16366:	4c11      	ldr	r4, [pc, #68]	; (163ac <bt_mesh_proxy_prov_disable+0x48>)
   16368:	7823      	ldrb	r3, [r4, #0]
{
   1636a:	4605      	mov	r5, r0
	if (gatt_svc == MESH_GATT_NONE) {
   1636c:	b1c3      	cbz	r3, 163a0 <bt_mesh_proxy_prov_disable+0x3c>
	if (gatt_svc != MESH_GATT_PROV) {
   1636e:	2b01      	cmp	r3, #1
   16370:	d119      	bne.n	163a6 <bt_mesh_proxy_prov_disable+0x42>
	bt_gatt_service_unregister(&prov_svc);
   16372:	480f      	ldr	r0, [pc, #60]	; (163b0 <bt_mesh_proxy_prov_disable+0x4c>)
   16374:	f7f6 fba2 	bl	cabc <bt_gatt_service_unregister>
	gatt_svc = MESH_GATT_NONE;
   16378:	2300      	movs	r3, #0
   1637a:	7023      	strb	r3, [r4, #0]
		if (!client->conn || client->filter_type != PROV) {
   1637c:	4c0d      	ldr	r4, [pc, #52]	; (163b4 <bt_mesh_proxy_prov_disable+0x50>)
   1637e:	6820      	ldr	r0, [r4, #0]
   16380:	b130      	cbz	r0, 16390 <bt_mesh_proxy_prov_disable+0x2c>
   16382:	79a3      	ldrb	r3, [r4, #6]
   16384:	2b03      	cmp	r3, #3
   16386:	d103      	bne.n	16390 <bt_mesh_proxy_prov_disable+0x2c>
		if (disconnect) {
   16388:	b135      	cbz	r5, 16398 <bt_mesh_proxy_prov_disable+0x34>
			bt_conn_disconnect(client->conn,
   1638a:	2113      	movs	r1, #19
   1638c:	f7f3 fdb4 	bl	9ef8 <bt_conn_disconnect>
	bt_mesh_adv_update();
   16390:	f7fd f9fe 	bl	13790 <bt_mesh_adv_update>
	return 0;
   16394:	2000      	movs	r0, #0
}
   16396:	bd38      	pop	{r3, r4, r5, pc}
			bt_mesh_pb_gatt_close(client->conn);
   16398:	f7ff fe0e 	bl	15fb8 <bt_mesh_pb_gatt_close>
			client->filter_type = NONE;
   1639c:	71a5      	strb	r5, [r4, #6]
   1639e:	e7f7      	b.n	16390 <bt_mesh_proxy_prov_disable+0x2c>
		return -EALREADY;
   163a0:	f06f 0044 	mvn.w	r0, #68	; 0x44
   163a4:	e7f7      	b.n	16396 <bt_mesh_proxy_prov_disable+0x32>
		return -EBUSY;
   163a6:	f06f 000f 	mvn.w	r0, #15
   163aa:	e7f4      	b.n	16396 <bt_mesh_proxy_prov_disable+0x32>
   163ac:	200036a7 	.word	0x200036a7
   163b0:	200007ac 	.word	0x200007ac
   163b4:	20001700 	.word	0x20001700

000163b8 <bt_mesh_proxy_send>:
		if (clients[i].conn == conn) {
   163b8:	4b32      	ldr	r3, [pc, #200]	; (16484 <bt_mesh_proxy_send+0xcc>)
	return 0;
}

int bt_mesh_proxy_send(struct bt_conn *conn, uint8_t type,
		       struct net_buf_simple *msg)
{
   163ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   163be:	4614      	mov	r4, r2
		if (clients[i].conn == conn) {
   163c0:	681a      	ldr	r2, [r3, #0]
   163c2:	4290      	cmp	r0, r2
{
   163c4:	4606      	mov	r6, r0
   163c6:	4688      	mov	r8, r1
		if (clients[i].conn == conn) {
   163c8:	d007      	beq.n	163da <bt_mesh_proxy_send+0x22>
	struct bt_mesh_proxy_client *client = find_client(conn);

	if (!client) {
		BT_ERR("No Proxy Client found");
   163ca:	482f      	ldr	r0, [pc, #188]	; (16488 <bt_mesh_proxy_send+0xd0>)
   163cc:	2145      	movs	r1, #69	; 0x45
   163ce:	f00d ff35 	bl	2423c <printk>
		return -ENOTCONN;
   163d2:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_ERR("Invalid PDU type for Proxy Client");
		return -EINVAL;
	}

	return proxy_segment_and_send(conn, type, msg);
}
   163d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((client->filter_type == PROV) != (type == BT_MESH_PROXY_PROV)) {
   163da:	799b      	ldrb	r3, [r3, #6]
   163dc:	1ed9      	subs	r1, r3, #3
   163de:	424b      	negs	r3, r1
   163e0:	f1a8 0503 	sub.w	r5, r8, #3
   163e4:	414b      	adcs	r3, r1
   163e6:	426a      	negs	r2, r5
   163e8:	416a      	adcs	r2, r5
   163ea:	4293      	cmp	r3, r2
   163ec:	d006      	beq.n	163fc <bt_mesh_proxy_send+0x44>
		BT_ERR("Invalid PDU type for Proxy Client");
   163ee:	4827      	ldr	r0, [pc, #156]	; (1648c <bt_mesh_proxy_send+0xd4>)
   163f0:	2145      	movs	r1, #69	; 0x45
   163f2:	f00d ff23 	bl	2423c <printk>
		return -EINVAL;
   163f6:	f06f 0015 	mvn.w	r0, #21
   163fa:	e7ec      	b.n	163d6 <bt_mesh_proxy_send+0x1e>
	mtu = bt_gatt_get_mtu(conn) - 3;
   163fc:	f011 f98a 	bl	27714 <bt_gatt_get_mtu>
	if (mtu > msg->len) {
   16400:	88a3      	ldrh	r3, [r4, #4]
	mtu = bt_gatt_get_mtu(conn) - 3;
   16402:	3803      	subs	r0, #3
   16404:	b285      	uxth	r5, r0
	if (mtu > msg->len) {
   16406:	42ab      	cmp	r3, r5
   16408:	f008 073f 	and.w	r7, r8, #63	; 0x3f
   1640c:	d20a      	bcs.n	16424 <bt_mesh_proxy_send+0x6c>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_COMPLETE, type));
   1640e:	4639      	mov	r1, r7
   16410:	4620      	mov	r0, r4
   16412:	f013 fa6b 	bl	298ec <net_buf_simple_push_u8>
		return proxy_send(conn, msg->data, msg->len);
   16416:	88a2      	ldrh	r2, [r4, #4]
   16418:	6821      	ldr	r1, [r4, #0]
   1641a:	4630      	mov	r0, r6
}
   1641c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return proxy_send(conn, msg->data, msg->len);
   16420:	f7ff be7a 	b.w	16118 <proxy_send>
	net_buf_simple_push_u8(msg, PDU_HDR(SAR_FIRST, type));
   16424:	f047 0140 	orr.w	r1, r7, #64	; 0x40
   16428:	4620      	mov	r0, r4
   1642a:	f013 fa5f 	bl	298ec <net_buf_simple_push_u8>
	proxy_send(conn, msg->data, mtu);
   1642e:	462a      	mov	r2, r5
   16430:	6821      	ldr	r1, [r4, #0]
   16432:	4630      	mov	r0, r6
   16434:	f7ff fe70 	bl	16118 <proxy_send>
	net_buf_simple_pull(msg, mtu);
   16438:	4629      	mov	r1, r5
   1643a:	4620      	mov	r0, r4
   1643c:	f007 f972 	bl	1d724 <net_buf_simple_pull>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   16440:	f047 0780 	orr.w	r7, r7, #128	; 0x80
	while (msg->len) {
   16444:	88a0      	ldrh	r0, [r4, #4]
   16446:	2800      	cmp	r0, #0
   16448:	d0c5      	beq.n	163d6 <bt_mesh_proxy_send+0x1e>
		if (msg->len + 1 < mtu) {
   1644a:	3001      	adds	r0, #1
   1644c:	42a8      	cmp	r0, r5
   1644e:	da0b      	bge.n	16468 <bt_mesh_proxy_send+0xb0>
			net_buf_simple_push_u8(msg, PDU_HDR(SAR_LAST, type));
   16450:	f048 01c0 	orr.w	r1, r8, #192	; 0xc0
   16454:	4620      	mov	r0, r4
   16456:	f013 fa49 	bl	298ec <net_buf_simple_push_u8>
			proxy_send(conn, msg->data, msg->len);
   1645a:	88a2      	ldrh	r2, [r4, #4]
   1645c:	6821      	ldr	r1, [r4, #0]
   1645e:	4630      	mov	r0, r6
   16460:	f7ff fe5a 	bl	16118 <proxy_send>
	return 0;
   16464:	2000      	movs	r0, #0
   16466:	e7b6      	b.n	163d6 <bt_mesh_proxy_send+0x1e>
		net_buf_simple_push_u8(msg, PDU_HDR(SAR_CONT, type));
   16468:	4639      	mov	r1, r7
   1646a:	4620      	mov	r0, r4
   1646c:	f013 fa3e 	bl	298ec <net_buf_simple_push_u8>
		proxy_send(conn, msg->data, mtu);
   16470:	6821      	ldr	r1, [r4, #0]
   16472:	462a      	mov	r2, r5
   16474:	4630      	mov	r0, r6
   16476:	f7ff fe4f 	bl	16118 <proxy_send>
		net_buf_simple_pull(msg, mtu);
   1647a:	4629      	mov	r1, r5
   1647c:	4620      	mov	r0, r4
   1647e:	f007 f951 	bl	1d724 <net_buf_simple_pull>
   16482:	e7df      	b.n	16444 <bt_mesh_proxy_send+0x8c>
   16484:	20001700 	.word	0x20001700
   16488:	00030834 	.word	0x00030834
   1648c:	0003084f 	.word	0x0003084f

00016490 <bt_mesh_proxy_adv_start>:
	return prov_sd_len;
}
#endif /* CONFIG_BT_MESH_PB_GATT */

int bt_mesh_proxy_adv_start(void)
{
   16490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BT_DBG("");

	if (gatt_svc == MESH_GATT_NONE) {
   16494:	4b35      	ldr	r3, [pc, #212]	; (1656c <bt_mesh_proxy_adv_start+0xdc>)
   16496:	781b      	ldrb	r3, [r3, #0]
{
   16498:	b086      	sub	sp, #24
	if (gatt_svc == MESH_GATT_NONE) {
   1649a:	2b00      	cmp	r3, #0
   1649c:	d060      	beq.n	16560 <bt_mesh_proxy_adv_start+0xd0>
		return -ENOENT;
	}

#if defined(CONFIG_BT_MESH_PB_GATT)
	if (!bt_mesh_is_provisioned()) {
   1649e:	f011 f9b4 	bl	2780a <bt_mesh_is_provisioned>
   164a2:	4680      	mov	r8, r0
   164a4:	2800      	cmp	r0, #0
   164a6:	d15e      	bne.n	16566 <bt_mesh_proxy_adv_start+0xd6>
	const struct bt_mesh_prov *prov = bt_mesh_prov_get();
   164a8:	f7fe fb2e 	bl	14b08 <bt_mesh_prov_get>
   164ac:	4607      	mov	r7, r0
	const char *name = bt_get_name();
   164ae:	f7f2 fc63 	bl	8d78 <bt_get_name>
   164b2:	4606      	mov	r6, r0
	size_t name_len = strlen(name);
   164b4:	f00f fde5 	bl	26082 <strlen>
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   164b8:	4c2d      	ldr	r4, [pc, #180]	; (16570 <bt_mesh_proxy_adv_start+0xe0>)
   164ba:	6839      	ldr	r1, [r7, #0]
   164bc:	2210      	movs	r2, #16
	size_t name_len = strlen(name);
   164be:	4605      	mov	r5, r0
	memcpy(prov_svc_data + 2, prov->uuid, 16);
   164c0:	1ca0      	adds	r0, r4, #2
   164c2:	f00f fe4d 	bl	26160 <memcpy>
	sys_put_be16(prov->oob_info, prov_svc_data + 18);
   164c6:	893b      	ldrh	r3, [r7, #8]
	dst[1] = val;
   164c8:	74e3      	strb	r3, [r4, #19]
	dst[0] = val >> 8;
   164ca:	0a1a      	lsrs	r2, r3, #8
   164cc:	74a2      	strb	r2, [r4, #18]
	if (prov->uri) {
   164ce:	6878      	ldr	r0, [r7, #4]
   164d0:	ac02      	add	r4, sp, #8
   164d2:	2800      	cmp	r0, #0
   164d4:	d037      	beq.n	16546 <bt_mesh_proxy_adv_start+0xb6>
		size_t uri_len = strlen(prov->uri);
   164d6:	f00f fdd4 	bl	26082 <strlen>
		if (uri_len > 29) {
   164da:	281d      	cmp	r0, #29
   164dc:	d917      	bls.n	1650e <bt_mesh_proxy_adv_start+0x7e>
			BT_WARN("Too long URI to fit advertising packet");
   164de:	4825      	ldr	r0, [pc, #148]	; (16574 <bt_mesh_proxy_adv_start+0xe4>)
   164e0:	2157      	movs	r1, #87	; 0x57
   164e2:	f00d feab 	bl	2423c <printk>
	size_t sd_space = 31;
   164e6:	231f      	movs	r3, #31
	size_t prov_sd_len = 0;
   164e8:	4640      	mov	r0, r8
	if (sd_space > 2 && name_len > 0) {
   164ea:	b1ed      	cbz	r5, 16528 <bt_mesh_proxy_adv_start+0x98>
		sd_space -= 2;
   164ec:	3b02      	subs	r3, #2
		if (sd_space < name_len) {
   164ee:	429d      	cmp	r5, r3
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   164f0:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
   164f4:	bf8b      	itete	hi
   164f6:	2108      	movhi	r1, #8
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   164f8:	2309      	movls	r3, #9
			prov_sd[prov_sd_len].type = BT_DATA_NAME_SHORTENED;
   164fa:	f804 1030 	strbhi.w	r1, [r4, r0, lsl #3]
			prov_sd[prov_sd_len].type = BT_DATA_NAME_COMPLETE;
   164fe:	f804 3030 	strbls.w	r3, [r4, r0, lsl #3]
			prov_sd[prov_sd_len].data_len = sd_space;
   16502:	bf8c      	ite	hi
   16504:	7053      	strbhi	r3, [r2, #1]
			prov_sd[prov_sd_len].data_len = name_len;
   16506:	7055      	strbls	r5, [r2, #1]
		prov_sd[prov_sd_len].data = name;
   16508:	6056      	str	r6, [r2, #4]
		prov_sd_len++;
   1650a:	3001      	adds	r0, #1
   1650c:	e00c      	b.n	16528 <bt_mesh_proxy_adv_start+0x98>
			prov_sd[0].type = BT_DATA_URI;
   1650e:	2324      	movs	r3, #36	; 0x24
   16510:	f88d 3008 	strb.w	r3, [sp, #8]
			prov_sd[0].data = prov->uri;
   16514:	687b      	ldr	r3, [r7, #4]
   16516:	9303      	str	r3, [sp, #12]
			sd_space -= 2 + uri_len;
   16518:	f1c0 031d 	rsb	r3, r0, #29
	if (sd_space > 2 && name_len > 0) {
   1651c:	2b02      	cmp	r3, #2
			prov_sd[0].data_len = uri_len;
   1651e:	f88d 0009 	strb.w	r0, [sp, #9]
			prov_sd_len++;
   16522:	f04f 0001 	mov.w	r0, #1
	if (sd_space > 2 && name_len > 0) {
   16526:	d8e0      	bhi.n	164ea <bt_mesh_proxy_adv_start+0x5a>
		size_t prov_sd_len;
		int err;

		prov_sd_len = gatt_prov_adv_create(prov_sd);

		if (!prov_fast_adv) {
   16528:	4d13      	ldr	r5, [pc, #76]	; (16578 <bt_mesh_proxy_adv_start+0xe8>)
   1652a:	782b      	ldrb	r3, [r5, #0]
			return bt_mesh_adv_start(&slow_adv_param,
   1652c:	e9cd 4000 	strd	r4, r0, [sp]
		if (!prov_fast_adv) {
   16530:	b95b      	cbnz	r3, 1654a <bt_mesh_proxy_adv_start+0xba>
			return bt_mesh_adv_start(&slow_adv_param,
   16532:	2303      	movs	r3, #3
   16534:	4a11      	ldr	r2, [pc, #68]	; (1657c <bt_mesh_proxy_adv_start+0xec>)
   16536:	4812      	ldr	r0, [pc, #72]	; (16580 <bt_mesh_proxy_adv_start+0xf0>)
   16538:	f04f 31ff 	mov.w	r1, #4294967295
   1653c:	f7fd f95e 	bl	137fc <bt_mesh_adv_start>
		return gatt_proxy_advertise(next_sub());
	}
#endif /* GATT_PROXY */

	return -ENOTSUP;
}
   16540:	b006      	add	sp, #24
   16542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t sd_space = 31;
   16546:	231f      	movs	r3, #31
   16548:	e7cf      	b.n	164ea <bt_mesh_proxy_adv_start+0x5a>
		err = bt_mesh_adv_start(&fast_adv_param, (60 * MSEC_PER_SEC),
   1654a:	2303      	movs	r3, #3
   1654c:	4a0b      	ldr	r2, [pc, #44]	; (1657c <bt_mesh_proxy_adv_start+0xec>)
   1654e:	480d      	ldr	r0, [pc, #52]	; (16584 <bt_mesh_proxy_adv_start+0xf4>)
   16550:	f64e 2160 	movw	r1, #60000	; 0xea60
   16554:	f7fd f952 	bl	137fc <bt_mesh_adv_start>
		if (!err) {
   16558:	2800      	cmp	r0, #0
   1655a:	d1f1      	bne.n	16540 <bt_mesh_proxy_adv_start+0xb0>
			prov_fast_adv = false;
   1655c:	7028      	strb	r0, [r5, #0]
   1655e:	e7ef      	b.n	16540 <bt_mesh_proxy_adv_start+0xb0>
		return -ENOENT;
   16560:	f06f 0001 	mvn.w	r0, #1
   16564:	e7ec      	b.n	16540 <bt_mesh_proxy_adv_start+0xb0>
	return -ENOTSUP;
   16566:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1656a:	e7e9      	b.n	16540 <bt_mesh_proxy_adv_start+0xb0>
   1656c:	200036a7 	.word	0x200036a7
   16570:	20000c2a 	.word	0x20000c2a
   16574:	00030808 	.word	0x00030808
   16578:	200036a8 	.word	0x200036a8
   1657c:	0002b5ac 	.word	0x0002b5ac
   16580:	0002b5c4 	.word	0x0002b5c4
   16584:	0002b598 	.word	0x0002b598

00016588 <bt_mesh_proxy_init>:
	.connected = proxy_connected,
	.disconnected = proxy_disconnected,
};

int bt_mesh_proxy_init(void)
{
   16588:	b510      	push	{r4, lr}

	/* Initialize the client receive buffers */
	for (i = 0; i < ARRAY_SIZE(clients); i++) {
		struct bt_mesh_proxy_client *client = &clients[i];

		client->buf.size = CLIENT_BUF_SIZE;
   1658a:	4c09      	ldr	r4, [pc, #36]	; (165b0 <bt_mesh_proxy_init+0x28>)
   1658c:	2344      	movs	r3, #68	; 0x44
   1658e:	87e3      	strh	r3, [r4, #62]	; 0x3e
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16590:	2230      	movs	r2, #48	; 0x30
		client->buf.__buf = client_buf_data + (i * CLIENT_BUF_SIZE);
   16592:	4b08      	ldr	r3, [pc, #32]	; (165b4 <bt_mesh_proxy_init+0x2c>)
   16594:	6423      	str	r3, [r4, #64]	; 0x40
   16596:	2100      	movs	r1, #0
   16598:	f104 0008 	add.w	r0, r4, #8
   1659c:	f00f fe0a 	bl	261b4 <memset>
   165a0:	4b05      	ldr	r3, [pc, #20]	; (165b8 <bt_mesh_proxy_init+0x30>)

		k_delayed_work_init(&client->sar_timer, proxy_sar_timeout);
	}

	bt_conn_cb_register(&conn_callbacks);
   165a2:	4806      	ldr	r0, [pc, #24]	; (165bc <bt_mesh_proxy_init+0x34>)
   165a4:	60e3      	str	r3, [r4, #12]
   165a6:	f7f3 f9d1 	bl	994c <bt_conn_cb_register>

	return 0;
}
   165aa:	2000      	movs	r0, #0
   165ac:	bd10      	pop	{r4, pc}
   165ae:	bf00      	nop
   165b0:	20001700 	.word	0x20001700
   165b4:	200074fa 	.word	0x200074fa
   165b8:	00016025 	.word	0x00016025
   165bc:	20000708 	.word	0x20000708

000165c0 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   165c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   165c4:	4f11      	ldr	r7, [pc, #68]	; (1660c <mayfly_init+0x4c>)
   165c6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 16610 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
   165ca:	2604      	movs	r6, #4
	while (callee_id--) {
   165cc:	3e01      	subs	r6, #1
   165ce:	b2f6      	uxtb	r6, r6
   165d0:	2eff      	cmp	r6, #255	; 0xff
   165d2:	d019      	beq.n	16608 <mayfly_init+0x48>
   165d4:	b233      	sxth	r3, r6
   165d6:	ea4f 0883 	mov.w	r8, r3, lsl #2
   165da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   165de:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
   165e0:	2404      	movs	r4, #4
   165e2:	f04f 0a0c 	mov.w	sl, #12
   165e6:	e00a      	b.n	165fe <mayfly_init+0x3e>
			memq_init(&mfl[callee_id][caller_id],
   165e8:	fb1a 5104 	smlabb	r1, sl, r4, r5
   165ec:	1d0a      	adds	r2, r1, #4
   165ee:	eb04 0008 	add.w	r0, r4, r8
   165f2:	443a      	add	r2, r7
   165f4:	4439      	add	r1, r7
   165f6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
   165fa:	f012 f89d 	bl	28738 <memq_init>
		while (caller_id--) {
   165fe:	3c01      	subs	r4, #1
   16600:	b2e4      	uxtb	r4, r4
   16602:	2cff      	cmp	r4, #255	; 0xff
   16604:	d1f0      	bne.n	165e8 <mayfly_init+0x28>
   16606:	e7e1      	b.n	165cc <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   16608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1660c:	200024ac 	.word	0x200024ac
   16610:	2000242c 	.word	0x2000242c

00016614 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   16614:	b4f0      	push	{r4, r5, r6, r7}
   16616:	2430      	movs	r4, #48	; 0x30
   16618:	4b10      	ldr	r3, [pc, #64]	; (1665c <mayfly_enable+0x48>)
   1661a:	270c      	movs	r7, #12
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   1661c:	434c      	muls	r4, r1
   1661e:	fb07 4400 	mla	r4, r7, r0, r4
{
   16622:	4605      	mov	r5, r0
   16624:	460e      	mov	r6, r1
		if (mft[callee_id][caller_id].enable_req ==
   16626:	4423      	add	r3, r4
	if (enable) {
   16628:	b152      	cbz	r2, 16640 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
   1662a:	7a59      	ldrb	r1, [r3, #9]
   1662c:	7a18      	ldrb	r0, [r3, #8]
   1662e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   16630:	bf04      	itt	eq
   16632:	3101      	addeq	r1, #1
   16634:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   16636:	4628      	mov	r0, r5
   16638:	4631      	mov	r1, r6

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   1663a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
   1663c:	f006 bca2 	b.w	1cf84 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   16640:	7a9c      	ldrb	r4, [r3, #10]
   16642:	7ada      	ldrb	r2, [r3, #11]
   16644:	42a2      	cmp	r2, r4
   16646:	d107      	bne.n	16658 <mayfly_enable+0x44>
			mft[callee_id][caller_id].disable_req++;
   16648:	3201      	adds	r2, #1
   1664a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   1664c:	4b04      	ldr	r3, [pc, #16]	; (16660 <mayfly_enable+0x4c>)
   1664e:	2201      	movs	r2, #1
   16650:	545a      	strb	r2, [r3, r1]
}
   16652:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
   16654:	f006 bcd2 	b.w	1cffc <mayfly_pend>
}
   16658:	bcf0      	pop	{r4, r5, r6, r7}
   1665a:	4770      	bx	lr
   1665c:	200024ac 	.word	0x200024ac
   16660:	200036a9 	.word	0x200036a9

00016664 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   16664:	b570      	push	{r4, r5, r6, lr}
   16666:	4606      	mov	r6, r0
   16668:	460d      	mov	r5, r1
   1666a:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   1666c:	b1a2      	cbz	r2, 16698 <mayfly_enqueue+0x34>
   1666e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   16670:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   16672:	7820      	ldrb	r0, [r4, #0]
   16674:	1a80      	subs	r0, r0, r2
	if (state != 0U) {
   16676:	f010 0003 	ands.w	r0, r0, #3
   1667a:	d02c      	beq.n	166d6 <mayfly_enqueue+0x72>
		if (chain) {
   1667c:	b31b      	cbz	r3, 166c6 <mayfly_enqueue+0x62>
			if (state != 1U) {
   1667e:	2801      	cmp	r0, #1
   16680:	d028      	beq.n	166d4 <mayfly_enqueue+0x70>
				/* mark as ready in queue */
				m->_req = ack + 1;
   16682:	3201      	adds	r2, #1
   16684:	b2d2      	uxtb	r2, r2
   16686:	7022      	strb	r2, [r4, #0]
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   16688:	4b1c      	ldr	r3, [pc, #112]	; (166fc <mayfly_enqueue+0x98>)
   1668a:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1668c:	4629      	mov	r1, r5
   1668e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   16690:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   16692:	f006 fcb3 	bl	1cffc <mayfly_pend>
   16696:	e01c      	b.n	166d2 <mayfly_enqueue+0x6e>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   16698:	f013 f860 	bl	2975c <mayfly_prio_is_equal>
   1669c:	2800      	cmp	r0, #0
   1669e:	d0e6      	beq.n	1666e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   166a0:	4629      	mov	r1, r5
   166a2:	4630      	mov	r0, r6
   166a4:	f006 fc8c 	bl	1cfc0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   166a8:	2800      	cmp	r0, #0
   166aa:	d0e0      	beq.n	1666e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   166ac:	2330      	movs	r3, #48	; 0x30
   166ae:	220c      	movs	r2, #12
   166b0:	436b      	muls	r3, r5
   166b2:	fb02 3306 	mla	r3, r2, r6, r3
   166b6:	4a12      	ldr	r2, [pc, #72]	; (16700 <mayfly_enqueue+0x9c>)
   166b8:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
   166ba:	7a93      	ldrb	r3, [r2, #10]
   166bc:	7ad2      	ldrb	r2, [r2, #11]
   166be:	1a9b      	subs	r3, r3, r2
   166c0:	bf18      	it	ne
   166c2:	2301      	movne	r3, #1
   166c4:	e7d4      	b.n	16670 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
   166c6:	3202      	adds	r2, #2
   166c8:	b2d2      	uxtb	r2, r2
   166ca:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
   166cc:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   166d0:	4798      	blx	r3

	return 0;
   166d2:	2000      	movs	r0, #0
}
   166d4:	bd70      	pop	{r4, r5, r6, pc}
	if (!chain) {
   166d6:	2b00      	cmp	r3, #0
   166d8:	d0f8      	beq.n	166cc <mayfly_enqueue+0x68>
	m->_req = ack + 1;
   166da:	3201      	adds	r2, #1
   166dc:	b2d2      	uxtb	r2, r2
   166de:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   166e0:	2304      	movs	r3, #4
   166e2:	2230      	movs	r2, #48	; 0x30
   166e4:	fb12 3205 	smlabb	r2, r2, r5, r3
   166e8:	230c      	movs	r3, #12
   166ea:	fb13 2306 	smlabb	r3, r3, r6, r2
   166ee:	4a04      	ldr	r2, [pc, #16]	; (16700 <mayfly_enqueue+0x9c>)
   166f0:	6860      	ldr	r0, [r4, #4]
   166f2:	441a      	add	r2, r3
   166f4:	4621      	mov	r1, r4
   166f6:	f012 f82d 	bl	28754 <memq_enqueue>
   166fa:	e7c5      	b.n	16688 <mayfly_enqueue+0x24>
   166fc:	200036a9 	.word	0x200036a9
   16700:	200024ac 	.word	0x200024ac

00016704 <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   16704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   16708:	4b57      	ldr	r3, [pc, #348]	; (16868 <mayfly_run+0x164>)
   1670a:	5c1a      	ldrb	r2, [r3, r0]
{
   1670c:	b089      	sub	sp, #36	; 0x24
   1670e:	4605      	mov	r5, r0
	if (!mfp[callee_id]) {
   16710:	2a00      	cmp	r2, #0
   16712:	f000 80a2 	beq.w	1685a <mayfly_run+0x156>
		return;
	}
	mfp[callee_id] = 0U;
   16716:	2600      	movs	r6, #0
   16718:	541e      	strb	r6, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   1671a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1671e:	011b      	lsls	r3, r3, #4
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   16720:	f8df b148 	ldr.w	fp, [pc, #328]	; 1686c <mayfly_run+0x168>
   16724:	9304      	str	r3, [sp, #16]
   16726:	2404      	movs	r4, #4
   16728:	233c      	movs	r3, #60	; 0x3c
   1672a:	fb13 4300 	smlabb	r3, r3, r0, r4
   1672e:	445b      	add	r3, fp
   16730:	9303      	str	r3, [sp, #12]
	uint8_t disable = 0U;
   16732:	9600      	str	r6, [sp, #0]
   16734:	46d9      	mov	r9, fp
	while (caller_id--) {
   16736:	3c01      	subs	r4, #1
   16738:	b2e4      	uxtb	r4, r4
   1673a:	2cff      	cmp	r4, #255	; 0xff
   1673c:	d10c      	bne.n	16758 <mayfly_run+0x54>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   1673e:	9b00      	ldr	r3, [sp, #0]
   16740:	2b00      	cmp	r3, #0
   16742:	f000 808a 	beq.w	1685a <mayfly_run+0x156>
   16746:	2e00      	cmp	r6, #0
   16748:	f040 8087 	bne.w	1685a <mayfly_run+0x156>
		mayfly_enable_cb(callee_id, callee_id, 0);
   1674c:	4632      	mov	r2, r6
   1674e:	4629      	mov	r1, r5
   16750:	4628      	mov	r0, r5
   16752:	f006 fc17 	bl	1cf84 <mayfly_enable_cb>
   16756:	e080      	b.n	1685a <mayfly_run+0x156>
		struct mayfly *m = 0;
   16758:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   1675a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
   1675c:	9307      	str	r3, [sp, #28]
		link = memq_peek(mft[callee_id][caller_id].head,
   1675e:	4367      	muls	r7, r4
   16760:	2330      	movs	r3, #48	; 0x30
   16762:	fb03 7305 	mla	r3, r3, r5, r7
   16766:	eb09 0103 	add.w	r1, r9, r3
   1676a:	aa07      	add	r2, sp, #28
   1676c:	f859 0003 	ldr.w	r0, [r9, r3]
   16770:	6849      	ldr	r1, [r1, #4]
   16772:	f011 fff6 	bl	28762 <memq_peek>
		memq_dequeue(mft[callee_id][caller_id].tail,
   16776:	9a04      	ldr	r2, [sp, #16]
   16778:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1677c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16780:	444b      	add	r3, r9
   16782:	e9cd 7301 	strd	r7, r3, [sp, #4]
		link = memq_peek(mft[callee_id][caller_id].head,
   16786:	4682      	mov	sl, r0
		while (link) {
   16788:	f1ba 0f00 	cmp.w	sl, #0
   1678c:	d047      	beq.n	1681e <mayfly_run+0x11a>
			state = (m->_req - m->_ack) & 0x03;
   1678e:	9b07      	ldr	r3, [sp, #28]
   16790:	f893 8000 	ldrb.w	r8, [r3]
   16794:	785a      	ldrb	r2, [r3, #1]
   16796:	eba8 0802 	sub.w	r8, r8, r2
   1679a:	f008 0803 	and.w	r8, r8, #3
			if (state == 1U) {
   1679e:	f1b8 0f01 	cmp.w	r8, #1
   167a2:	d104      	bne.n	167ae <mayfly_run+0xaa>
				m->_ack--;
   167a4:	3a01      	subs	r2, #1
   167a6:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
   167a8:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
   167ac:	4790      	blx	r2
			dequeue(callee_id, caller_id, link, m);
   167ae:	9f07      	ldr	r7, [sp, #28]
	req = m->_req;
   167b0:	783b      	ldrb	r3, [r7, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   167b2:	787a      	ldrb	r2, [r7, #1]
	req = m->_req;
   167b4:	b2db      	uxtb	r3, r3
	if (((req - m->_ack) & 0x03) != 1U) {
   167b6:	1a9a      	subs	r2, r3, r2
   167b8:	f002 0203 	and.w	r2, r2, #3
   167bc:	2a01      	cmp	r2, #1
   167be:	9305      	str	r3, [sp, #20]
   167c0:	d01b      	beq.n	167fa <mayfly_run+0xf6>
		memq_dequeue(mft[callee_id][caller_id].tail,
   167c2:	9b01      	ldr	r3, [sp, #4]
   167c4:	9902      	ldr	r1, [sp, #8]
   167c6:	2030      	movs	r0, #48	; 0x30
   167c8:	fb00 3005 	mla	r0, r0, r5, r3
   167cc:	4b27      	ldr	r3, [pc, #156]	; (1686c <mayfly_run+0x168>)
   167ce:	4418      	add	r0, r3
   167d0:	2200      	movs	r2, #0
   167d2:	6840      	ldr	r0, [r0, #4]
   167d4:	f011 ffcd 	bl	28772 <memq_dequeue>
		m->_ack = req;
   167d8:	9b05      	ldr	r3, [sp, #20]
		ack = m->_ack;
   167da:	787a      	ldrb	r2, [r7, #1]
		m->_ack = req;
   167dc:	707b      	strb	r3, [r7, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   167de:	783b      	ldrb	r3, [r7, #0]
		m->_link = link;
   167e0:	f8c7 a004 	str.w	sl, [r7, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   167e4:	1a9b      	subs	r3, r3, r2
   167e6:	f003 0303 	and.w	r3, r3, #3
   167ea:	2b01      	cmp	r3, #1
   167ec:	d105      	bne.n	167fa <mayfly_run+0xf6>
			m->_ack = ack;
   167ee:	707a      	strb	r2, [r7, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   167f0:	4639      	mov	r1, r7
   167f2:	9a03      	ldr	r2, [sp, #12]
   167f4:	4650      	mov	r0, sl
   167f6:	f011 ffad 	bl	28754 <memq_enqueue>
			link = memq_peek(mft[callee_id][caller_id].head,
   167fa:	9a01      	ldr	r2, [sp, #4]
   167fc:	2330      	movs	r3, #48	; 0x30
   167fe:	fb03 2305 	mla	r3, r3, r5, r2
   16802:	eb09 0103 	add.w	r1, r9, r3
   16806:	aa07      	add	r2, sp, #28
   16808:	6849      	ldr	r1, [r1, #4]
   1680a:	f859 0003 	ldr.w	r0, [r9, r3]
   1680e:	f011 ffa8 	bl	28762 <memq_peek>
			if (state == 1U) {
   16812:	f1b8 0f01 	cmp.w	r8, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   16816:	4682      	mov	sl, r0
			if (state == 1U) {
   16818:	d1b6      	bne.n	16788 <mayfly_run+0x84>
				if (caller_id || link) {
   1681a:	b9bc      	cbnz	r4, 1684c <mayfly_run+0x148>
   1681c:	b9b0      	cbnz	r0, 1684c <mayfly_run+0x148>
		if (mft[callee_id][caller_id].disable_req !=
   1681e:	2230      	movs	r2, #48	; 0x30
   16820:	4912      	ldr	r1, [pc, #72]	; (1686c <mayfly_run+0x168>)
   16822:	230c      	movs	r3, #12
   16824:	436a      	muls	r2, r5
   16826:	fb03 2204 	mla	r2, r3, r4, r2
   1682a:	440a      	add	r2, r1
   1682c:	7a91      	ldrb	r1, [r2, #10]
   1682e:	7ad0      	ldrb	r0, [r2, #11]
   16830:	4288      	cmp	r0, r1
   16832:	d115      	bne.n	16860 <mayfly_run+0x15c>
		if (mft[callee_id][caller_id].enable_req !=
   16834:	2230      	movs	r2, #48	; 0x30
   16836:	436a      	muls	r2, r5
   16838:	fb03 2304 	mla	r3, r3, r4, r2
   1683c:	445b      	add	r3, fp
   1683e:	7a1a      	ldrb	r2, [r3, #8]
   16840:	7a59      	ldrb	r1, [r3, #9]
   16842:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
   16844:	bf1c      	itt	ne
   16846:	725a      	strbne	r2, [r3, #9]
			enable = 1U;
   16848:	2601      	movne	r6, #1
   1684a:	e774      	b.n	16736 <mayfly_run+0x32>
					mfp[callee_id] = 1U;
   1684c:	4b06      	ldr	r3, [pc, #24]	; (16868 <mayfly_run+0x164>)
   1684e:	2201      	movs	r2, #1
					mayfly_pend(callee_id, callee_id);
   16850:	4629      	mov	r1, r5
   16852:	4628      	mov	r0, r5
					mfp[callee_id] = 1U;
   16854:	555a      	strb	r2, [r3, r5]
					mayfly_pend(callee_id, callee_id);
   16856:	f006 fbd1 	bl	1cffc <mayfly_pend>
	}
}
   1685a:	b009      	add	sp, #36	; 0x24
   1685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
   16860:	72d1      	strb	r1, [r2, #11]
			disable = 1U;
   16862:	2201      	movs	r2, #1
   16864:	9200      	str	r2, [sp, #0]
   16866:	e7e5      	b.n	16834 <mayfly_run+0x130>
   16868:	200036a9 	.word	0x200036a9
   1686c:	200024ac 	.word	0x200024ac

00016870 <ticker_job>:
 * @param param Pointer to ticker instance
 *
 * @internal
 */
void ticker_job(void *param)
{
   16870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16874:	b08f      	sub	sp, #60	; 0x3c
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
   16876:	7fc3      	ldrb	r3, [r0, #31]
   16878:	9304      	str	r3, [sp, #16]
{
   1687a:	4604      	mov	r4, r0
	if (instance->worker_trigger) {
   1687c:	2b00      	cmp	r3, #0
   1687e:	f040 83cf 	bne.w	17020 <ticker_job+0x7b0>
		return;
	}
	instance->job_guard = 1U;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
   16882:	6943      	ldr	r3, [r0, #20]
   16884:	9307      	str	r3, [sp, #28]

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   16886:	7ac1      	ldrb	r1, [r0, #11]
   16888:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1U;
   1688a:	2201      	movs	r2, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1688c:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
   1688e:	7782      	strb	r2, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   16890:	d059      	beq.n	16946 <ticker_job+0xd6>
	uint8_t idx = *ticks_elapsed_index + 1;
   16892:	4413      	add	r3, r2
   16894:	b2db      	uxtb	r3, r3
		idx = 0U;
   16896:	2b02      	cmp	r3, #2
   16898:	bf08      	it	eq
   1689a:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   1689c:	7283      	strb	r3, [r0, #10]
		ticker_next_elapsed(&instance->ticks_elapsed_first);

		ticks_elapsed =
   1689e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;

		flag_elapsed = 1U;
   168a2:	9205      	str	r2, [sp, #20]
		ticks_elapsed =
   168a4:	68db      	ldr	r3, [r3, #12]
   168a6:	9301      	str	r3, [sp, #4]
		instance->ticks_current += ticks_elapsed;
   168a8:	9901      	ldr	r1, [sp, #4]
   168aa:	9b07      	ldr	r3, [sp, #28]
   168ac:	440b      	add	r3, r1
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   168ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   168b2:	6143      	str	r3, [r0, #20]
	flag_compare_update = 0U;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
   168b4:	7f63      	ldrb	r3, [r4, #29]
   168b6:	9306      	str	r3, [sp, #24]
	node = &instance->nodes[0];
   168b8:	6823      	ldr	r3, [r4, #0]
   168ba:	9309      	str	r3, [sp, #36]	; 0x24
	users = &instance->users[0];
   168bc:	6863      	ldr	r3, [r4, #4]
   168be:	930d      	str	r3, [sp, #52]	; 0x34
	pending = 0U;
   168c0:	2300      	movs	r3, #0
   168c2:	9308      	str	r3, [sp, #32]
	count_user = instance->count_user;
   168c4:	f894 b009 	ldrb.w	fp, [r4, #9]
	insert_head = TICKER_NULL;
   168c8:	23ff      	movs	r3, #255	; 0xff
   168ca:	9303      	str	r3, [sp, #12]
	while (count_user--) {
   168cc:	f10b 33ff 	add.w	r3, fp, #4294967295
   168d0:	fa5f fb83 	uxtb.w	fp, r3
   168d4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   168d8:	d139      	bne.n	1694e <ticker_job+0xde>

	/* Manage user operations (updates and deletions) in ticker list */
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);

	/* Detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
   168da:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   168dc:	9a06      	ldr	r2, [sp, #24]
   168de:	1a9b      	subs	r3, r3, r2
   168e0:	bf18      	it	ne
   168e2:	2301      	movne	r3, #1
   168e4:	9302      	str	r3, [sp, #8]
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
   168e6:	9b05      	ldr	r3, [sp, #20]
   168e8:	2b00      	cmp	r3, #0
   168ea:	f000 8299 	beq.w	16e20 <ticker_job+0x5b0>
	ticks_now = cntr_cnt_get();
   168ee:	f005 ff9d 	bl	1c82c <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   168f2:	9b07      	ldr	r3, [sp, #28]
	node = &instance->nodes[0];
   168f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   168f8:	1ac0      	subs	r0, r0, r3
	node = &instance->nodes[0];
   168fa:	6823      	ldr	r3, [r4, #0]
   168fc:	9309      	str	r3, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   168fe:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	ticks_expired = 0U;
   16902:	f04f 0a00 	mov.w	sl, #0
	while (instance->ticker_id_head != TICKER_NULL) {
   16906:	7f67      	ldrb	r7, [r4, #29]
   16908:	2fff      	cmp	r7, #255	; 0xff
   1690a:	d00e      	beq.n	1692a <ticker_job+0xba>
		ticker = &node[id_expired];
   1690c:	b23e      	sxth	r6, r7
   1690e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   16912:	0133      	lsls	r3, r6, #4
   16914:	930a      	str	r3, [sp, #40]	; 0x28
   16916:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
   1691a:	189d      	adds	r5, r3, r2
		ticks_to_expire = ticker->ticks_to_expire;
   1691c:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1691e:	4543      	cmp	r3, r8
   16920:	f240 8137 	bls.w	16b92 <ticker_job+0x322>
			ticker->ticks_to_expire -= ticks_elapsed;
   16924:	eba3 0308 	sub.w	r3, r3, r8
   16928:	60ab      	str	r3, [r5, #8]
			flag_compare_update = 1U;
   1692a:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   1692e:	9b02      	ldr	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   16930:	4620      	mov	r0, r4
			flag_compare_update = 1U;
   16932:	42b9      	cmp	r1, r7
   16934:	bf18      	it	ne
   16936:	4613      	movne	r3, r2
		ticker_job_list_insert(instance, insert_head);
   16938:	9903      	ldr	r1, [sp, #12]
			flag_compare_update = 1U;
   1693a:	9302      	str	r3, [sp, #8]
		ticker_job_list_insert(instance, insert_head);
   1693c:	f011 ff63 	bl	28806 <ticker_job_list_insert>
	nodes = &instance->nodes[0];
   16940:	6820      	ldr	r0, [r4, #0]
		ticker_id_head = instance->ticker_id_head;
   16942:	7f66      	ldrb	r6, [r4, #29]
		while (ticker_id_head != TICKER_NULL) {
   16944:	e1e9      	b.n	16d1a <ticker_job+0x4aa>
		flag_elapsed = 0U;
   16946:	9b04      	ldr	r3, [sp, #16]
   16948:	9305      	str	r3, [sp, #20]
		ticks_elapsed = 0U;
   1694a:	9301      	str	r3, [sp, #4]
   1694c:	e7b2      	b.n	168b4 <ticker_job+0x44>
		user = &users[count_user];
   1694e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16950:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
		user_ops = &user->user_op[0];
   16954:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16958:	930a      	str	r3, [sp, #40]	; 0x28
		while (user->middle != user->last) {
   1695a:	f898 2003 	ldrb.w	r2, [r8, #3]
			user_op = &user_ops[user->middle];
   1695e:	2134      	movs	r1, #52	; 0x34
		while (user->middle != user->last) {
   16960:	f898 7002 	ldrb.w	r7, [r8, #2]
   16964:	4297      	cmp	r7, r2
   16966:	d0b1      	beq.n	168cc <ticker_job+0x5c>
			user_op = &user_ops[user->middle];
   16968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			if (middle == user->count_user_op) {
   1696a:	f898 5000 	ldrb.w	r5, [r8]
			user_op = &user_ops[user->middle];
   1696e:	fb17 f001 	smulbb	r0, r7, r1
   16972:	181e      	adds	r6, r3, r0
			middle = user->middle + 1;
   16974:	1c7b      	adds	r3, r7, #1
   16976:	b2db      	uxtb	r3, r3
				middle = 0U;
   16978:	429d      	cmp	r5, r3
   1697a:	bf08      	it	eq
   1697c:	2300      	moveq	r3, #0
			user->middle = middle;
   1697e:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   16982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16984:	5c18      	ldrb	r0, [r3, r0]
   16986:	2804      	cmp	r0, #4
   16988:	d9ea      	bls.n	16960 <ticker_job+0xf0>
			ticker = &node[user_op->id];
   1698a:	7871      	ldrb	r1, [r6, #1]
   1698c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   16990:	011b      	lsls	r3, r3, #4
   16992:	930c      	str	r3, [sp, #48]	; 0x30
   16994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16996:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16998:	189d      	adds	r5, r3, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1699a:	2807      	cmp	r0, #7
			state = (ticker->req - ticker->ack) & 0xff;
   1699c:	f895 c002 	ldrb.w	ip, [r5, #2]
   169a0:	786a      	ldrb	r2, [r5, #1]
   169a2:	eba2 020c 	sub.w	r2, r2, ip
   169a6:	b2d2      	uxtb	r2, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   169a8:	d80e      	bhi.n	169c8 <ticker_job+0x158>
   169aa:	b16a      	cbz	r2, 169c8 <ticker_job+0x158>
			    (state == 0U) ||
   169ac:	2805      	cmp	r0, #5
   169ae:	d110      	bne.n	169d2 <ticker_job+0x162>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   169b0:	6873      	ldr	r3, [r6, #4]
   169b2:	b973      	cbnz	r3, 169d2 <ticker_job+0x162>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   169b4:	68b3      	ldr	r3, [r6, #8]
   169b6:	b963      	cbnz	r3, 169d2 <ticker_job+0x162>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   169b8:	68f3      	ldr	r3, [r6, #12]
   169ba:	b953      	cbnz	r3, 169d2 <ticker_job+0x162>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   169bc:	6933      	ldr	r3, [r6, #16]
   169be:	b943      	cbnz	r3, 169d2 <ticker_job+0x162>
			     (user_op->params.update.lazy == 0U) &&
   169c0:	6973      	ldr	r3, [r6, #20]
   169c2:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
   169c6:	d104      	bne.n	169d2 <ticker_job+0x162>
				ticker_job_op_cb(user_op,
   169c8:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   169ca:	4630      	mov	r0, r6
   169cc:	f011 ff11 	bl	287f2 <ticker_job_op_cb>
   169d0:	e7c3      	b.n	1695a <ticker_job+0xea>
			if (state == 1U) {
   169d2:	2a01      	cmp	r2, #1
   169d4:	f040 80d2 	bne.w	16b7c <ticker_job+0x30c>
	previous = instance->ticker_id_head;
   169d8:	7f63      	ldrb	r3, [r4, #29]
	node = &instance->nodes[0];
   169da:	f8d4 e000 	ldr.w	lr, [r4]
	previous = instance->ticker_id_head;
   169de:	9302      	str	r3, [sp, #8]
	total = 0U;
   169e0:	2700      	movs	r7, #0
	while (current != TICKER_NULL) {
   169e2:	2bff      	cmp	r3, #255	; 0xff
   169e4:	d12e      	bne.n	16a44 <ticker_job+0x1d4>
		return 0;
   169e6:	2700      	movs	r7, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   169e8:	2805      	cmp	r0, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   169ea:	60af      	str	r7, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   169ec:	f040 80a3 	bne.w	16b36 <ticker_job+0x2c6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   169f0:	f8d4 9014 	ldr.w	r9, [r4, #20]
	ticks_now = cntr_cnt_get();
   169f4:	f005 ff1a 	bl	1c82c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   169f8:	9901      	ldr	r1, [sp, #4]
	ticks_now = cntr_cnt_get();
   169fa:	9002      	str	r0, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   169fc:	eba0 0309 	sub.w	r3, r0, r9
   16a00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   16a04:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_elapsed) {
   16a06:	429f      	cmp	r7, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   16a08:	bf98      	it	ls
   16a0a:	6969      	ldrls	r1, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   16a0c:	6868      	ldr	r0, [r5, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
   16a0e:	bf9d      	ittte	ls
   16a10:	1bcf      	subls	r7, r1, r7
   16a12:	19db      	addls	r3, r3, r7
   16a14:	616b      	strls	r3, [r5, #20]
		ticks_to_expire -= ticks_elapsed;
   16a16:	1afb      	subhi	r3, r7, r3
		ticks_to_expire = 0U;
   16a18:	bf98      	it	ls
   16a1a:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0U) &&
   16a1c:	2800      	cmp	r0, #0
   16a1e:	d05b      	beq.n	16ad8 <ticker_job+0x268>
	    (user_op->params.update.lazy != 0U)) {
   16a20:	8ab1      	ldrh	r1, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   16a22:	2900      	cmp	r1, #0
   16a24:	d058      	beq.n	16ad8 <ticker_job+0x268>
		user_op->params.update.lazy--;
   16a26:	f101 3cff 	add.w	ip, r1, #4294967295
   16a2a:	fa1f fc8c 	uxth.w	ip, ip
   16a2e:	f8a6 c014 	strh.w	ip, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   16a32:	4298      	cmp	r0, r3
   16a34:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   16a38:	d201      	bcs.n	16a3e <ticker_job+0x1ce>
   16a3a:	45f4      	cmp	ip, lr
   16a3c:	d314      	bcc.n	16a68 <ticker_job+0x1f8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16a3e:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 16cfc <ticker_job+0x48c>
   16a42:	e043      	b.n	16acc <ticker_job+0x25c>
		ticker_current = &node[current];
   16a44:	eb03 0943 	add.w	r9, r3, r3, lsl #1
   16a48:	ea4f 1909 	mov.w	r9, r9, lsl #4
   16a4c:	eb0e 0a09 	add.w	sl, lr, r9
		if (current == id) {
   16a50:	4299      	cmp	r1, r3
   16a52:	f8da 2008 	ldr.w	r2, [sl, #8]
   16a56:	920b      	str	r2, [sp, #44]	; 0x2c
   16a58:	4417      	add	r7, r2
   16a5a:	f81e 9009 	ldrb.w	r9, [lr, r9]
   16a5e:	f000 82bd 	beq.w	16fdc <ticker_job+0x76c>
   16a62:	9302      	str	r3, [sp, #8]
   16a64:	464b      	mov	r3, r9
   16a66:	e7bc      	b.n	169e2 <ticker_job+0x172>
	if ((ticker->remainder_current >= BIT(31)) ||
   16a68:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16a6a:	4fa2      	ldr	r7, [pc, #648]	; (16cf4 <ticker_job+0x484>)
   16a6c:	4aa2      	ldr	r2, [pc, #648]	; (16cf8 <ticker_job+0x488>)
   16a6e:	19cf      	adds	r7, r1, r7
   16a70:	4297      	cmp	r7, r2
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   16a72:	bf81      	itttt	hi
   16a74:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   16a78:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   16a7c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
   16a80:	6269      	strhi	r1, [r5, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
   16a82:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
		decrement++;
   16a86:	bf8c      	ite	hi
   16a88:	f04f 0a01 	movhi.w	sl, #1
	uint8_t decrement = 0U;
   16a8c:	f04f 0a00 	movls.w	sl, #0
	ticker->remainder_current -= ticker->remainder_periodic;
   16a90:	1a7f      	subs	r7, r7, r1
			ticks_to_expire -= ticker->ticks_periodic +
   16a92:	4482      	add	sl, r0
			ticker->lazy_current--;
   16a94:	f10e 3eff 	add.w	lr, lr, #4294967295
	ticker->remainder_current -= ticker->remainder_periodic;
   16a98:	626f      	str	r7, [r5, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
   16a9a:	eba3 030a 	sub.w	r3, r3, sl
			ticker->lazy_current--;
   16a9e:	f8a5 e01e 	strh.w	lr, [r5, #30]
   16aa2:	e7c6      	b.n	16a32 <ticker_job+0x1c2>
	ticker->remainder_current += ticker->remainder_periodic;
   16aa4:	e9d5 1708 	ldrd	r1, r7, [r5, #32]
   16aa8:	440f      	add	r7, r1
	if ((ticker->remainder_current < BIT(31)) &&
   16aaa:	4992      	ldr	r1, [pc, #584]	; (16cf4 <ticker_job+0x484>)
   16aac:	4a92      	ldr	r2, [pc, #584]	; (16cf8 <ticker_job+0x488>)
   16aae:	1879      	adds	r1, r7, r1
   16ab0:	4291      	cmp	r1, r2
	return 0;
   16ab2:	bf8e      	itee	hi
   16ab4:	2100      	movhi	r1, #0
		return 1;
   16ab6:	2101      	movls	r1, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16ab8:	4457      	addls	r7, sl
			ticks_to_expire += ticker->ticks_periodic +
   16aba:	4401      	add	r1, r0
			ticker->lazy_current++;
   16abc:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
   16ac0:	bf8c      	ite	hi
   16ac2:	626f      	strhi	r7, [r5, #36]	; 0x24
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16ac4:	626f      	strls	r7, [r5, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
   16ac6:	440b      	add	r3, r1
			ticker->lazy_current++;
   16ac8:	f8a5 e01e 	strh.w	lr, [r5, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   16acc:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   16ad0:	45f4      	cmp	ip, lr
   16ad2:	d8e7      	bhi.n	16aa4 <ticker_job+0x234>
		ticker->lazy_periodic = user_op->params.update.lazy;
   16ad4:	f8a5 c01c 	strh.w	ip, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   16ad8:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   16ada:	68b0      	ldr	r0, [r6, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   16adc:	6aaf      	ldr	r7, [r5, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   16ade:	440b      	add	r3, r1
   16ae0:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus +=
   16ae2:	696b      	ldr	r3, [r5, #20]
   16ae4:	4403      	add	r3, r0
   16ae6:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   16ae8:	b11f      	cbz	r7, 16af2 <ticker_job+0x282>
   16aea:	683b      	ldr	r3, [r7, #0]
   16aec:	b10b      	cbz	r3, 16af2 <ticker_job+0x282>
			user_op->params.update.ticks_drift_plus -
   16aee:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   16af0:	6079      	str	r1, [r7, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   16af2:	9a02      	ldr	r2, [sp, #8]
   16af4:	4649      	mov	r1, r9
   16af6:	4628      	mov	r0, r5
   16af8:	f011 fe5d 	bl	287b6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   16afc:	68f2      	ldr	r2, [r6, #12]
   16afe:	69ab      	ldr	r3, [r5, #24]
   16b00:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   16b02:	6932      	ldr	r2, [r6, #16]
   16b04:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   16b06:	bf8c      	ite	hi
   16b08:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   16b0a:	2300      	movls	r3, #0
   16b0c:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   16b0e:	7db3      	ldrb	r3, [r6, #22]
   16b10:	b103      	cbz	r3, 16b14 <ticker_job+0x2a4>
		ticker->force = user_op->params.update.force;
   16b12:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   16b14:	7df3      	ldrb	r3, [r6, #23]
   16b16:	b113      	cbz	r3, 16b1e <ticker_job+0x2ae>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   16b18:	3b01      	subs	r3, #1
   16b1a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   16b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16b22:	4619      	mov	r1, r3
   16b24:	9b03      	ldr	r3, [sp, #12]
   16b26:	548b      	strb	r3, [r1, r2]
	*insert_head = user_op->id;
   16b28:	7873      	ldrb	r3, [r6, #1]
   16b2a:	9303      	str	r3, [sp, #12]
		ticker->req++;
   16b2c:	786b      	ldrb	r3, [r5, #1]
   16b2e:	3301      	adds	r3, #1
   16b30:	706b      	strb	r3, [r5, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   16b32:	2100      	movs	r1, #0
   16b34:	e749      	b.n	169ca <ticker_job+0x15a>
		ticker->req = ticker->ack;
   16b36:	f885 c001 	strb.w	ip, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   16b3a:	7f23      	ldrb	r3, [r4, #28]
   16b3c:	428b      	cmp	r3, r1
   16b3e:	d1f8      	bne.n	16b32 <ticker_job+0x2c2>
			instance->ticker_id_slot_previous = TICKER_NULL;
   16b40:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   16b42:	2807      	cmp	r0, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   16b44:	7723      	strb	r3, [r4, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   16b46:	d10d      	bne.n	16b64 <ticker_job+0x2f4>
				ticks_at_stop =
   16b48:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   16b4a:	6963      	ldr	r3, [r4, #20]
			if (!((ticks_at_stop - ticks_current) &
   16b4c:	1ac2      	subs	r2, r0, r3
   16b4e:	0211      	lsls	r1, r2, #8
   16b50:	d40b      	bmi.n	16b6a <ticker_job+0x2fa>
				ticks_used = ticks_elapsed +
   16b52:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16b54:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   16b58:	4418      	add	r0, r3
			if (instance->ticks_slot_previous > ticks_used) {
   16b5a:	69a3      	ldr	r3, [r4, #24]
   16b5c:	4283      	cmp	r3, r0
				instance->ticks_slot_previous = ticks_used;
   16b5e:	bf88      	it	hi
   16b60:	61a0      	strhi	r0, [r4, #24]
   16b62:	e7e6      	b.n	16b32 <ticker_job+0x2c2>
				ticks_at_stop = cntr_cnt_get();
   16b64:	f005 fe62 	bl	1c82c <cntr_cnt_get>
   16b68:	e7ef      	b.n	16b4a <ticker_job+0x2da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16b6a:	1a18      	subs	r0, r3, r0
				if (ticks_elapsed > ticks_used) {
   16b6c:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   16b72:	4283      	cmp	r3, r0
					ticks_used = ticks_elapsed -
   16b74:	bf8c      	ite	hi
   16b76:	1a18      	subhi	r0, r3, r0
					ticks_used = 0;
   16b78:	2000      	movls	r0, #0
   16b7a:	e7ee      	b.n	16b5a <ticker_job+0x2ea>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   16b7c:	2104      	movs	r1, #4
   16b7e:	4623      	mov	r3, r4
   16b80:	6a65      	ldr	r5, [r4, #36]	; 0x24
   16b82:	2201      	movs	r2, #1
   16b84:	4608      	mov	r0, r1
   16b86:	47a8      	blx	r5
				pending = 1U;
   16b88:	2301      	movs	r3, #1
				user->middle = prev;
   16b8a:	f888 7002 	strb.w	r7, [r8, #2]
				pending = 1U;
   16b8e:	9308      	str	r3, [sp, #32]
   16b90:	e69c      	b.n	168cc <ticker_job+0x5c>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   16b92:	69a2      	ldr	r2, [r4, #24]
		skip_collision = (ticker->lazy_current != 0U);
   16b94:	f8b5 901e 	ldrh.w	r9, [r5, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   16b98:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   16b9a:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   16b9e:	449a      	add	sl, r3
		ticks_latency -= ticks_to_expire;
   16ba0:	ebab 0b03 	sub.w	fp, fp, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   16ba4:	bf25      	ittet	cs
   16ba6:	23ff      	movcs	r3, #255	; 0xff
   16ba8:	7723      	strbcs	r3, [r4, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   16baa:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   16bac:	2300      	movcs	r3, #0
   16bae:	61a3      	str	r3, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   16bb0:	78a9      	ldrb	r1, [r5, #2]
   16bb2:	786b      	ldrb	r3, [r5, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   16bb4:	f8d5 c018 	ldr.w	ip, [r5, #24]
   16bb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		state = (ticker->req - ticker->ack) & 0xff;
   16bba:	1a5b      	subs	r3, r3, r1
   16bbc:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   16bbe:	f1bc 0f00 	cmp.w	ip, #0
   16bc2:	d00d      	beq.n	16be0 <ticker_job+0x370>
   16bc4:	2b02      	cmp	r3, #2
   16bc6:	d10b      	bne.n	16be0 <ticker_job+0x370>
   16bc8:	f1b9 0f00 	cmp.w	r9, #0
   16bcc:	d108      	bne.n	16be0 <ticker_job+0x370>
   16bce:	b122      	cbz	r2, 16bda <ticker_job+0x36a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   16bd0:	f892 e008 	ldrb.w	lr, [r2, #8]
   16bd4:	f1be 0f01 	cmp.w	lr, #1
   16bd8:	d002      	beq.n	16be0 <ticker_job+0x370>
			instance->ticker_id_slot_previous = id_expired;
   16bda:	7727      	strb	r7, [r4, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   16bdc:	f8c4 c018 	str.w	ip, [r4, #24]
		instance->ticker_id_head = ticker->next;
   16be0:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
		ticker->ticks_to_expire = 0U;
   16be4:	f04f 0c00 	mov.w	ip, #0
   16be8:	f8c5 c008 	str.w	ip, [r5, #8]
		instance->ticker_id_head = ticker->next;
   16bec:	f816 c000 	ldrb.w	ip, [r6, r0]
   16bf0:	f884 c01d 	strb.w	ip, [r4, #29]
		if ((ticker->ticks_periodic != 0U) ||
   16bf4:	f8d5 c004 	ldr.w	ip, [r5, #4]
   16bf8:	f1bc 0f00 	cmp.w	ip, #0
   16bfc:	d11d      	bne.n	16c3a <ticker_job+0x3ca>
   16bfe:	2a00      	cmp	r2, #0
   16c00:	d068      	beq.n	16cd4 <ticker_job+0x464>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   16c02:	f892 e008 	ldrb.w	lr, [r2, #8]
   16c06:	f1be 0f01 	cmp.w	lr, #1
   16c0a:	d163      	bne.n	16cd4 <ticker_job+0x464>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   16c0c:	7a13      	ldrb	r3, [r2, #8]
   16c0e:	2b01      	cmp	r3, #1
   16c10:	d115      	bne.n	16c3e <ticker_job+0x3ce>
				ticker->ticks_to_expire = ticks_elapsed;
   16c12:	f8c5 8008 	str.w	r8, [r5, #8]
				ticker->req = ticker->ack;
   16c16:	7069      	strb	r1, [r5, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   16c18:	9b07      	ldr	r3, [sp, #28]
   16c1a:	6961      	ldr	r1, [r4, #20]
   16c1c:	eb03 020a 	add.w	r2, r3, sl
   16c20:	4628      	mov	r0, r5
   16c22:	f011 fdc8 	bl	287b6 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   16c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16c28:	990a      	ldr	r1, [sp, #40]	; 0x28
   16c2a:	461a      	mov	r2, r3
   16c2c:	9b03      	ldr	r3, [sp, #12]
   16c2e:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   16c30:	786b      	ldrb	r3, [r5, #1]
   16c32:	3301      	adds	r3, #1
   16c34:	706b      	strb	r3, [r5, #1]
			ticker->req = ticker->ack;
   16c36:	9703      	str	r7, [sp, #12]
   16c38:	e665      	b.n	16906 <ticker_job+0x96>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   16c3a:	2a00      	cmp	r2, #0
   16c3c:	d1e6      	bne.n	16c0c <ticker_job+0x39c>
				if (!ticker->lazy_current) {
   16c3e:	f8b5 e01e 	ldrh.w	lr, [r5, #30]
   16c42:	f1be 0f00 	cmp.w	lr, #0
   16c46:	d124      	bne.n	16c92 <ticker_job+0x422>
					lazy_periodic = ticker->lazy_periodic;
   16c48:	8bab      	ldrh	r3, [r5, #28]
				while (count--) {
   16c4a:	4699      	mov	r9, r3
				ticks_to_expire = 0U;
   16c4c:	2000      	movs	r0, #0
	ticker->remainder_current += ticker->remainder_periodic;
   16c4e:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   16c52:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   16c54:	4927      	ldr	r1, [pc, #156]	; (16cf4 <ticker_job+0x484>)
   16c56:	4e28      	ldr	r6, [pc, #160]	; (16cf8 <ticker_job+0x488>)
   16c58:	1851      	adds	r1, r2, r1
   16c5a:	42b1      	cmp	r1, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16c5c:	bf9f      	itttt	ls
   16c5e:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   16c62:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   16c66:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   16c6a:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   16c6c:	bf92      	itee	ls
   16c6e:	9a05      	ldrls	r2, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
   16c70:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   16c72:	2200      	movhi	r2, #0
					ticks_to_expire +=
   16c74:	4462      	add	r2, ip
				while (count--) {
   16c76:	f119 39ff 	adds.w	r9, r9, #4294967295
					ticks_to_expire +=
   16c7a:	4410      	add	r0, r2
				while (count--) {
   16c7c:	d2e7      	bcs.n	16c4e <ticker_job+0x3de>
				if (!ticker->must_expire) {
   16c7e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   16c82:	b32a      	cbz	r2, 16cd0 <ticker_job+0x460>
				lazy = 0U;
   16c84:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   16c86:	4413      	add	r3, r2
   16c88:	449e      	add	lr, r3
				ticker->ticks_to_expire = ticks_to_expire;
   16c8a:	60a8      	str	r0, [r5, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   16c8c:	f8a5 e01e 	strh.w	lr, [r5, #30]
   16c90:	e7c2      	b.n	16c18 <ticker_job+0x3a8>
					ticker->req = ticker->ack;
   16c92:	7069      	strb	r1, [r5, #1]
					lazy_periodic = 0U;
   16c94:	2300      	movs	r3, #0
   16c96:	e7d8      	b.n	16c4a <ticker_job+0x3da>
	ticker->remainder_current += ticker->remainder_periodic;
   16c98:	e9d5 1208 	ldrd	r1, r2, [r5, #32]
   16c9c:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
   16c9e:	4915      	ldr	r1, [pc, #84]	; (16cf4 <ticker_job+0x484>)
   16ca0:	4e15      	ldr	r6, [pc, #84]	; (16cf8 <ticker_job+0x488>)
   16ca2:	1851      	adds	r1, r2, r1
   16ca4:	42b1      	cmp	r1, r6
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   16ca6:	bf9f      	itttt	ls
   16ca8:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
   16cac:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
   16cb0:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
   16cb4:	626a      	strls	r2, [r5, #36]	; 0x24
		return 1;
   16cb6:	bf92      	itee	ls
   16cb8:	9a05      	ldrls	r2, [sp, #20]
	ticker->remainder_current += ticker->remainder_periodic;
   16cba:	626a      	strhi	r2, [r5, #36]	; 0x24
	return 0;
   16cbc:	2200      	movhi	r2, #0
						ticks_to_expire +=
   16cbe:	4462      	add	r2, ip
   16cc0:	4410      	add	r0, r2
						lazy++;
   16cc2:	f109 0901 	add.w	r9, r9, #1
					while (ticks_to_expire <
   16cc6:	4583      	cmp	fp, r0
   16cc8:	fa1f f289 	uxth.w	r2, r9
   16ccc:	d8e4      	bhi.n	16c98 <ticker_job+0x428>
   16cce:	e7da      	b.n	16c86 <ticker_job+0x416>
				if (!ticker->must_expire) {
   16cd0:	4691      	mov	r9, r2
   16cd2:	e7f8      	b.n	16cc6 <ticker_job+0x456>
			if (state && ((state == 1U) || skip_collision) &&
   16cd4:	b14b      	cbz	r3, 16cea <ticker_job+0x47a>
   16cd6:	2b01      	cmp	r3, #1
   16cd8:	d002      	beq.n	16ce0 <ticker_job+0x470>
   16cda:	f1b9 0f00 	cmp.w	r9, #0
   16cde:	d004      	beq.n	16cea <ticker_job+0x47a>
			    ticker->fp_op_func) {
   16ce0:	6a2b      	ldr	r3, [r5, #32]
			if (state && ((state == 1U) || skip_collision) &&
   16ce2:	b113      	cbz	r3, 16cea <ticker_job+0x47a>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   16ce4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   16ce6:	2001      	movs	r0, #1
   16ce8:	4798      	blx	r3
			ticker->req = ticker->ack;
   16cea:	78ab      	ldrb	r3, [r5, #2]
   16cec:	706b      	strb	r3, [r5, #1]
   16cee:	9f03      	ldr	r7, [sp, #12]
   16cf0:	e7a1      	b.n	16c36 <ticker_job+0x3c6>
   16cf2:	bf00      	nop
   16cf4:	ff172b5a 	.word	0xff172b5a
   16cf8:	7f172b59 	.word	0x7f172b59
   16cfc:	fe2e56b6 	.word	0xfe2e56b6
			ticker = &nodes[ticker_id_head];
   16d00:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   16d04:	011b      	lsls	r3, r3, #4
   16d06:	18c5      	adds	r5, r0, r3
			ext_data = ticker->ext_data;
   16d08:	f810 e003 	ldrb.w	lr, [r0, r3]
   16d0c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   16d0e:	b11f      	cbz	r7, 16d18 <ticker_job+0x4a8>
   16d10:	7a3b      	ldrb	r3, [r7, #8]
   16d12:	2b01      	cmp	r3, #1
   16d14:	f000 817e 	beq.w	17014 <ticker_job+0x7a4>
			ticker_id_head = ticker->next;
   16d18:	4676      	mov	r6, lr
		while (ticker_id_head != TICKER_NULL) {
   16d1a:	2eff      	cmp	r6, #255	; 0xff
   16d1c:	d1f0      	bne.n	16d00 <ticker_job+0x490>
			flag_compare_update = 1U;
   16d1e:	9a02      	ldr	r2, [sp, #8]
   16d20:	9b04      	ldr	r3, [sp, #16]
   16d22:	2b00      	cmp	r3, #0
   16d24:	bf08      	it	eq
   16d26:	4613      	moveq	r3, r2
   16d28:	9302      	str	r3, [sp, #8]
   16d2a:	e07d      	b.n	16e28 <ticker_job+0x5b8>
			instance->ticks_slot_previous > ticks_elapsed) {
   16d2c:	69a1      	ldr	r1, [r4, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   16d2e:	9b01      	ldr	r3, [sp, #4]
   16d30:	428b      	cmp	r3, r1
   16d32:	f080 8173 	bcs.w	1701c <ticker_job+0x7ac>
			window_start_ticks = instance->ticks_slot_previous -
   16d36:	1acb      	subs	r3, r1, r3
		window_start_ticks = 0U;
   16d38:	9303      	str	r3, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   16d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
   16d3e:	4293      	cmp	r3, r2
   16d40:	d254      	bcs.n	16dec <ticker_job+0x57c>
			ticks_slot_window = ext_data->ticks_slot_window -
   16d42:	f04f 0c00 	mov.w	ip, #0
   16d46:	eba2 0b03 	sub.w	fp, r2, r3
		ticker_id_iter = nodes[ticker_id_head].next;
   16d4a:	4672      	mov	r2, lr
			ticks_slot_window = ext_data->ticks_slot_window -
   16d4c:	4663      	mov	r3, ip
		while (ticker_id_iter != TICKER_NULL &&
   16d4e:	2aff      	cmp	r2, #255	; 0xff
   16d50:	d006      	beq.n	16d60 <ticker_job+0x4f0>
		       ticks_start_offset + ticker->ticks_slot <=
   16d52:	f8d5 8018 	ldr.w	r8, [r5, #24]
   16d56:	eb0c 0108 	add.w	r1, ip, r8
		while (ticker_id_iter != TICKER_NULL &&
   16d5a:	458b      	cmp	fp, r1
		       ticks_start_offset + ticker->ticks_slot <=
   16d5c:	9104      	str	r1, [sp, #16]
		while (ticker_id_iter != TICKER_NULL &&
   16d5e:	d217      	bcs.n	16d90 <ticker_job+0x520>
		ticker->ticks_to_expire = ticks_to_expire;
   16d60:	60ab      	str	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   16d62:	4672      	mov	r2, lr
		ticker_id_prev = TICKER_NULL;
   16d64:	23ff      	movs	r3, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
   16d66:	2aff      	cmp	r2, #255	; 0xff
   16d68:	d046      	beq.n	16df8 <ticker_job+0x588>
			node = &nodes[ticker_id_iter];
   16d6a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   16d6e:	ea4f 1808 	mov.w	r8, r8, lsl #4
   16d72:	eb00 0908 	add.w	r9, r0, r8
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   16d76:	f8d5 c008 	ldr.w	ip, [r5, #8]
   16d7a:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16d7e:	458c      	cmp	ip, r1
   16d80:	d936      	bls.n	16df0 <ticker_job+0x580>
				ticker->ticks_to_expire -=
   16d82:	ebac 0101 	sub.w	r1, ip, r1
   16d86:	60a9      	str	r1, [r5, #8]
			ticker_id_iter = node->next;
   16d88:	4613      	mov	r3, r2
   16d8a:	f810 2008 	ldrb.w	r2, [r0, r8]
   16d8e:	e7ea      	b.n	16d66 <ticker_job+0x4f6>
			node = &nodes[ticker_id_iter];
   16d90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   16d94:	0112      	lsls	r2, r2, #4
   16d96:	eb00 0a02 	add.w	sl, r0, r2
			if (node->ext_data &&
   16d9a:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
   16d9e:	f1b9 0f00 	cmp.w	r9, #0
   16da2:	d006      	beq.n	16db2 <ticker_job+0x542>
   16da4:	f899 9008 	ldrb.w	r9, [r9, #8]
   16da8:	f1b9 0f01 	cmp.w	r9, #1
   16dac:	d101      	bne.n	16db2 <ticker_job+0x542>
			ticker_id_iter = node->next;
   16dae:	5c82      	ldrb	r2, [r0, r2]
   16db0:	e7cd      	b.n	16d4e <ticker_job+0x4de>
			if (node->ticks_to_expire >
   16db2:	f8da 9008 	ldr.w	r9, [sl, #8]
   16db6:	f1b9 0f04 	cmp.w	r9, #4
   16dba:	d90e      	bls.n	16dda <ticker_job+0x56a>
					MIN(ticks_slot_window,
   16dbc:	f1ac 0304 	sub.w	r3, ip, #4
   16dc0:	444b      	add	r3, r9
				window_end_ticks =
   16dc2:	455b      	cmp	r3, fp
			if (window_end_ticks > ticks_start_offset +
   16dc4:	9904      	ldr	r1, [sp, #16]
				window_end_ticks =
   16dc6:	bf28      	it	cs
   16dc8:	465b      	movcs	r3, fp
			if (window_end_ticks > ticks_start_offset +
   16dca:	428b      	cmp	r3, r1
   16dcc:	d905      	bls.n	16dda <ticker_job+0x56a>
			if (ticks_to_expire != 0U &&
   16dce:	ebb3 0308 	subs.w	r3, r3, r8
   16dd2:	d002      	beq.n	16dda <ticker_job+0x56a>
   16dd4:	9903      	ldr	r1, [sp, #12]
   16dd6:	428b      	cmp	r3, r1
   16dd8:	d2c2      	bcs.n	16d60 <ticker_job+0x4f0>
			window_start_ticks  = node->ticks_to_expire +
   16dda:	f8da 1018 	ldr.w	r1, [sl, #24]
   16dde:	eb01 0309 	add.w	r3, r1, r9
   16de2:	9303      	str	r3, [sp, #12]
			ticks_start_offset += node->ticks_to_expire;
   16de4:	44cc      	add	ip, r9
			ticks_to_expire     = ticks_slot_window -
   16de6:	ebab 0308 	sub.w	r3, fp, r8
   16dea:	e7e0      	b.n	16dae <ticker_job+0x53e>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   16dec:	2300      	movs	r3, #0
   16dee:	e7b7      	b.n	16d60 <ticker_job+0x4f0>
				node->ticks_to_expire -=
   16df0:	eba1 010c 	sub.w	r1, r1, ip
   16df4:	f8c9 1008 	str.w	r1, [r9, #8]
		if (ticker_id_prev != TICKER_NULL) {
   16df8:	2bff      	cmp	r3, #255	; 0xff
   16dfa:	d008      	beq.n	16e0e <ticker_job+0x59e>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   16dfc:	b21b      	sxth	r3, r3
   16dfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16e02:	011b      	lsls	r3, r3, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   16e04:	f884 e01d 	strb.w	lr, [r4, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   16e08:	5cc2      	ldrb	r2, [r0, r3]
   16e0a:	702a      	strb	r2, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   16e0c:	54c6      	strb	r6, [r0, r3]
		ticker->lazy_current--;
   16e0e:	8beb      	ldrh	r3, [r5, #30]
   16e10:	3b01      	subs	r3, #1
   16e12:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   16e14:	f04f 0302 	mov.w	r3, #2
   16e18:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   16e1a:	2301      	movs	r3, #1
   16e1c:	9304      	str	r3, [sp, #16]
   16e1e:	e590      	b.n	16942 <ticker_job+0xd2>
		ticker_job_list_insert(instance, insert_head);
   16e20:	9903      	ldr	r1, [sp, #12]
   16e22:	4620      	mov	r0, r4
   16e24:	f011 fcef 	bl	28806 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   16e28:	7f63      	ldrb	r3, [r4, #29]
		flag_compare_update = 1U;
   16e2a:	9a02      	ldr	r2, [sp, #8]
   16e2c:	9906      	ldr	r1, [sp, #24]
   16e2e:	428b      	cmp	r3, r1
   16e30:	bf18      	it	ne
   16e32:	2201      	movne	r2, #1
	if (!pending) {
   16e34:	9b08      	ldr	r3, [sp, #32]
		flag_compare_update = 1U;
   16e36:	9202      	str	r2, [sp, #8]
	if (!pending) {
   16e38:	b1e3      	cbz	r3, 16e74 <ticker_job+0x604>
	instance->job_guard = 0U;
   16e3a:	2300      	movs	r3, #0
   16e3c:	77a3      	strb	r3, [r4, #30]
	if (flag_compare_update) {
   16e3e:	9b02      	ldr	r3, [sp, #8]
   16e40:	b153      	cbz	r3, 16e58 <ticker_job+0x5e8>
	if (instance->ticker_id_head == TICKER_NULL) {
   16e42:	7f63      	ldrb	r3, [r4, #29]
   16e44:	2bff      	cmp	r3, #255	; 0xff
   16e46:	f040 8082 	bne.w	16f4e <ticker_job+0x6de>
		if (cntr_stop() == 0) {
   16e4a:	f005 fccd 	bl	1c7e8 <cntr_stop>
   16e4e:	b918      	cbnz	r0, 16e58 <ticker_job+0x5e8>
			instance->ticks_slot_previous = 0U;
   16e50:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
   16e52:	f005 fceb 	bl	1c82c <cntr_cnt_get>
   16e56:	6160      	str	r0, [r4, #20]
	if (instance->worker_trigger) {
   16e58:	7fe3      	ldrb	r3, [r4, #31]
   16e5a:	2b00      	cmp	r3, #0
   16e5c:	f000 80e0 	beq.w	17020 <ticker_job+0x7b0>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   16e60:	6a65      	ldr	r5, [r4, #36]	; 0x24
   16e62:	4623      	mov	r3, r4
   16e64:	2201      	movs	r2, #1
   16e66:	2103      	movs	r1, #3
   16e68:	2004      	movs	r0, #4
   16e6a:	46ac      	mov	ip, r5
}
   16e6c:	b00f      	add	sp, #60	; 0x3c
   16e6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   16e72:	4760      	bx	ip
	users = &instance->users[0];
   16e74:	6863      	ldr	r3, [r4, #4]
   16e76:	9303      	str	r3, [sp, #12]
	count_user = instance->count_user;
   16e78:	7a65      	ldrb	r5, [r4, #9]
		uop->status = TICKER_STATUS_SUCCESS;
   16e7a:	9b08      	ldr	r3, [sp, #32]
   16e7c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
   16e7e:	3d01      	subs	r5, #1
   16e80:	b2ed      	uxtb	r5, r5
   16e82:	2dff      	cmp	r5, #255	; 0xff
   16e84:	d0d9      	beq.n	16e3a <ticker_job+0x5ca>
		user = &users[count_user];
   16e86:	9b03      	ldr	r3, [sp, #12]
   16e88:	eb03 06c5 	add.w	r6, r3, r5, lsl #3
		user_op = &user->user_op[0];
   16e8c:	f8d6 8004 	ldr.w	r8, [r6, #4]
		while (user->first != user->last) {
   16e90:	7873      	ldrb	r3, [r6, #1]
   16e92:	78f2      	ldrb	r2, [r6, #3]
   16e94:	429a      	cmp	r2, r3
   16e96:	d0f2      	beq.n	16e7e <ticker_job+0x60e>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   16e98:	2234      	movs	r2, #52	; 0x34
   16e9a:	fb13 f202 	smulbb	r2, r3, r2
   16e9e:	eb08 0302 	add.w	r3, r8, r2
	switch (uop->op) {
   16ea2:	f818 2002 	ldrb.w	r2, [r8, r2]
   16ea6:	2a02      	cmp	r2, #2
   16ea8:	d013      	beq.n	16ed2 <ticker_job+0x662>
   16eaa:	2a03      	cmp	r2, #3
   16eac:	d040      	beq.n	16f30 <ticker_job+0x6c0>
   16eae:	2a01      	cmp	r2, #1
   16eb0:	d106      	bne.n	16ec0 <ticker_job+0x650>
			uop->status = TICKER_STATUS_SUCCESS;
   16eb2:	9a01      	ldr	r2, [sp, #4]
			uop->status = TICKER_STATUS_FAILURE;
   16eb4:	629a      	str	r2, [r3, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   16eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (fp_op_func) {
   16eb8:	b112      	cbz	r2, 16ec0 <ticker_job+0x650>
		fp_op_func(uop->status, uop->op_context);
   16eba:	6b19      	ldr	r1, [r3, #48]	; 0x30
   16ebc:	6a98      	ldr	r0, [r3, #40]	; 0x28
   16ebe:	4790      	blx	r2
			first = user->first + 1;
   16ec0:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
   16ec2:	7832      	ldrb	r2, [r6, #0]
			first = user->first + 1;
   16ec4:	3301      	adds	r3, #1
   16ec6:	b2db      	uxtb	r3, r3
				first = 0U;
   16ec8:	429a      	cmp	r2, r3
   16eca:	bf08      	it	eq
   16ecc:	2300      	moveq	r3, #0
			user->first = first;
   16ece:	7073      	strb	r3, [r6, #1]
   16ed0:	e7de      	b.n	16e90 <ticker_job+0x620>
		ticker_by_next_slot_get(instance,
   16ed2:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
   16ed6:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
   16eda:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->nodes;
   16ede:	f8d4 c000 	ldr.w	ip, [r4]
	if ((_ticker_id_head == TICKER_NULL) ||
   16ee2:	6961      	ldr	r1, [r4, #20]
   16ee4:	2aff      	cmp	r2, #255	; 0xff
   16ee6:	d002      	beq.n	16eee <ticker_job+0x67e>
   16ee8:	6807      	ldr	r7, [r0, #0]
   16eea:	428f      	cmp	r7, r1
   16eec:	d015      	beq.n	16f1a <ticker_job+0x6aa>
		_ticker_id_head = instance->ticker_id_head;
   16eee:	7f62      	ldrb	r2, [r4, #29]
		*ticks_current = instance->ticks_current;
   16ef0:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0U;
   16ef2:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   16ef4:	2aff      	cmp	r2, #255	; 0xff
   16ef6:	d00b      	beq.n	16f10 <ticker_job+0x6a0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   16ef8:	eb02 0a42 	add.w	sl, r2, r2, lsl #1
   16efc:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
   16f00:	eb0c 0b0a 	add.w	fp, ip, sl
   16f04:	f8db 0008 	ldr.w	r0, [fp, #8]
   16f08:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
   16f0a:	f8db 0018 	ldr.w	r0, [fp, #24]
   16f0e:	b160      	cbz	r0, 16f2a <ticker_job+0x6ba>
	*ticker_id_head = _ticker_id_head;
   16f10:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
   16f14:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
   16f18:	e7cb      	b.n	16eb2 <ticker_job+0x642>
		ticker = &node[_ticker_id_head];
   16f1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   16f1e:	0112      	lsls	r2, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   16f20:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   16f24:	f81c 2002 	ldrb.w	r2, [ip, r2]
   16f28:	e7e4      	b.n	16ef4 <ticker_job+0x684>
		_ticker_id_head = ticker->next;
   16f2a:	f81c 200a 	ldrb.w	r2, [ip, sl]
   16f2e:	e7e1      	b.n	16ef4 <ticker_job+0x684>
		if (uop->id < instance->count_node) {
   16f30:	785a      	ldrb	r2, [r3, #1]
   16f32:	7a21      	ldrb	r1, [r4, #8]
   16f34:	4291      	cmp	r1, r2
   16f36:	d908      	bls.n	16f4a <ticker_job+0x6da>
			node[uop->id].priority =
   16f38:	6821      	ldr	r1, [r4, #0]
   16f3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   16f3e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   16f42:	7919      	ldrb	r1, [r3, #4]
   16f44:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
   16f48:	e7b3      	b.n	16eb2 <ticker_job+0x642>
			uop->status = TICKER_STATUS_FAILURE;
   16f4a:	2201      	movs	r2, #1
   16f4c:	e7b2      	b.n	16eb4 <ticker_job+0x644>
	if (ticker_id_old_head == TICKER_NULL) {
   16f4e:	9b06      	ldr	r3, [sp, #24]
   16f50:	2bff      	cmp	r3, #255	; 0xff
   16f52:	d106      	bne.n	16f62 <ticker_job+0x6f2>
		ticks_current = cntr_cnt_get();
   16f54:	f005 fc6a 	bl	1c82c <cntr_cnt_get>
   16f58:	4605      	mov	r5, r0
		if (cntr_start() == 0) {
   16f5a:	f005 fc37 	bl	1c7cc <cntr_start>
   16f5e:	b900      	cbnz	r0, 16f62 <ticker_job+0x6f2>
			instance->ticks_current = ticks_current;
   16f60:	6165      	str	r5, [r4, #20]
	ticker = &instance->nodes[instance->ticker_id_head];
   16f62:	7f63      	ldrb	r3, [r4, #29]
	ticks_to_expire = ticker->ticks_to_expire;
   16f64:	6822      	ldr	r2, [r4, #0]
		LL_ASSERT(i);
   16f66:	4f30      	ldr	r7, [pc, #192]	; (17028 <ticker_job+0x7b8>)
   16f68:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1702c <ticker_job+0x7bc>
	ticker = &instance->nodes[instance->ticker_id_head];
   16f6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   16f70:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	i = 10U;
   16f74:	f04f 090a 	mov.w	r9, #10
	ticks_to_expire = ticker->ticks_to_expire;
   16f78:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   16f7a:	f005 fc57 	bl	1c82c <cntr_cnt_get>
		cc = instance->ticks_current;
   16f7e:	6965      	ldr	r5, [r4, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16f80:	1b43      	subs	r3, r0, r5
   16f82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   16f86:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   16f88:	42b3      	cmp	r3, r6
   16f8a:	bf2c      	ite	cs
   16f8c:	18ed      	addcs	r5, r5, r3
   16f8e:	19ad      	addcc	r5, r5, r6
		cc &= HAL_TICKER_CNTR_MASK;
   16f90:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   16f94:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   16f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16f98:	4628      	mov	r0, r5
   16f9a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   16f9c:	f005 fc46 	bl	1c82c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16fa0:	eba0 000a 	sub.w	r0, r0, sl
   16fa4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16fa8:	eba5 050a 	sub.w	r5, r5, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   16fac:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   16fae:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   16fb2:	42a8      	cmp	r0, r5
		i--;
   16fb4:	f109 39ff 	add.w	r9, r9, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   16fb8:	f67f af4e 	bls.w	16e58 <ticker_job+0x5e8>
		LL_ASSERT(i);
   16fbc:	f1b9 0f00 	cmp.w	r9, #0
   16fc0:	d1db      	bne.n	16f7a <ticker_job+0x70a>
   16fc2:	f640 02ba 	movw	r2, #2234	; 0x8ba
   16fc6:	4639      	mov	r1, r7
   16fc8:	4640      	mov	r0, r8
   16fca:	f00d f937 	bl	2423c <printk>
   16fce:	4040      	eors	r0, r0
   16fd0:	f380 8811 	msr	BASEPRI, r0
   16fd4:	f04f 0003 	mov.w	r0, #3
   16fd8:	df02      	svc	2
   16fda:	e7ce      	b.n	16f7a <ticker_job+0x70a>
	if (previous == current) {
   16fdc:	9b02      	ldr	r3, [sp, #8]
   16fde:	4299      	cmp	r1, r3
   16fe0:	d101      	bne.n	16fe6 <ticker_job+0x776>
		instance->ticker_id_head = ticker_current->next;
   16fe2:	f884 901d 	strb.w	r9, [r4, #29]
	node[previous].next = ticker_current->next;
   16fe6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   16fea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   16fee:	0112      	lsls	r2, r2, #4
   16ff0:	f80e 9002 	strb.w	r9, [lr, r2]
	if (ticker_current->next != TICKER_NULL) {
   16ff4:	f89a 3000 	ldrb.w	r3, [sl]
   16ff8:	2bff      	cmp	r3, #255	; 0xff
   16ffa:	f43f acf5 	beq.w	169e8 <ticker_job+0x178>
		node[ticker_current->next].ticks_to_expire += timeout;
   16ffe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17002:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4
   17006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17008:	f8de 2008 	ldr.w	r2, [lr, #8]
   1700c:	441a      	add	r2, r3
   1700e:	f8ce 2008 	str.w	r2, [lr, #8]
	return (total + timeout);
   17012:	e4e9      	b.n	169e8 <ticker_job+0x178>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   17014:	7f23      	ldrb	r3, [r4, #28]
   17016:	2bff      	cmp	r3, #255	; 0xff
   17018:	f47f ae88 	bne.w	16d2c <ticker_job+0x4bc>
		window_start_ticks = 0U;
   1701c:	2300      	movs	r3, #0
   1701e:	e68b      	b.n	16d38 <ticker_job+0x4c8>
}
   17020:	b00f      	add	sp, #60	; 0x3c
   17022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17026:	bf00      	nop
   17028:	00030ab3 	.word	0x00030ab3
   1702c:	0002bced 	.word	0x0002bced

00017030 <ticker_init>:
{
   17030:	b5f0      	push	{r4, r5, r6, r7, lr}
   17032:	4694      	mov	ip, r2
   17034:	9f05      	ldr	r7, [sp, #20]
   17036:	f89d 6018 	ldrb.w	r6, [sp, #24]
   1703a:	9a07      	ldr	r2, [sp, #28]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   1703c:	b108      	cbz	r0, 17042 <ticker_init+0x12>
		return TICKER_STATUS_FAILURE;
   1703e:	2001      	movs	r0, #1
}
   17040:	bdf0      	pop	{r4, r5, r6, r7, pc}
	instance->count_node = count_node;
   17042:	4c18      	ldr	r4, [pc, #96]	; (170a4 <ticker_init+0x74>)
   17044:	7221      	strb	r1, [r4, #8]
	instance->nodes = node;
   17046:	f8c4 c000 	str.w	ip, [r4]
	while (count_node--) {
   1704a:	3901      	subs	r1, #1
   1704c:	b2c9      	uxtb	r1, r1
   1704e:	29ff      	cmp	r1, #255	; 0xff
   17050:	d116      	bne.n	17080 <ticker_init+0x50>
	instance->count_user = count_user;
   17052:	7263      	strb	r3, [r4, #9]
	instance->users = user;
   17054:	6067      	str	r7, [r4, #4]
		user_op_ += users[count_user].count_user_op;
   17056:	2534      	movs	r5, #52	; 0x34
	while (count_user--) {
   17058:	3b01      	subs	r3, #1
   1705a:	b2db      	uxtb	r3, r3
   1705c:	2bff      	cmp	r3, #255	; 0xff
   1705e:	d116      	bne.n	1708e <ticker_init+0x5e>
	if (count_op) {
   17060:	2e00      	cmp	r6, #0
   17062:	d1ec      	bne.n	1703e <ticker_init+0xe>
	instance->caller_id_get_cb = caller_id_get_cb;
   17064:	9b08      	ldr	r3, [sp, #32]
   17066:	6223      	str	r3, [r4, #32]
	instance->sched_cb = sched_cb;
   17068:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1706a:	6263      	str	r3, [r4, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
   1706c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1706e:	62a3      	str	r3, [r4, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   17070:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->ticks_slot_previous = 0U;
   17074:	e9c4 6605 	strd	r6, r6, [r4, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   17078:	83a3      	strh	r3, [r4, #28]
	instance->ticks_elapsed_first = 0U;
   1707a:	8166      	strh	r6, [r4, #10]
	return TICKER_STATUS_SUCCESS;
   1707c:	4630      	mov	r0, r6
   1707e:	e7df      	b.n	17040 <ticker_init+0x10>
		instance->nodes[count_node].priority = 0;
   17080:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   17084:	eb0c 1505 	add.w	r5, ip, r5, lsl #4
   17088:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
   1708c:	e7dd      	b.n	1704a <ticker_init+0x1a>
		users[count_user].user_op = user_op_;
   1708e:	b219      	sxth	r1, r3
   17090:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
   17094:	6042      	str	r2, [r0, #4]
		user_op_ += users[count_user].count_user_op;
   17096:	f817 0031 	ldrb.w	r0, [r7, r1, lsl #3]
   1709a:	fb00 2205 	mla	r2, r0, r5, r2
		count_op -= users[count_user].count_user_op;
   1709e:	1a30      	subs	r0, r6, r0
   170a0:	b2c6      	uxtb	r6, r0
   170a2:	e7d9      	b.n	17058 <ticker_init+0x28>
   170a4:	2000256c 	.word	0x2000256c

000170a8 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   170a8:	4a04      	ldr	r2, [pc, #16]	; (170bc <ticker_is_initialized+0x14>)
   170aa:	232c      	movs	r3, #44	; 0x2c
   170ac:	fb03 2000 	mla	r0, r3, r0, r2
   170b0:	7a00      	ldrb	r0, [r0, #8]
}
   170b2:	3000      	adds	r0, #0
   170b4:	bf18      	it	ne
   170b6:	2001      	movne	r0, #1
   170b8:	4770      	bx	lr
   170ba:	bf00      	nop
   170bc:	2000256c 	.word	0x2000256c

000170c0 <ticker_trigger>:
	if (instance->sched_cb) {
   170c0:	4a07      	ldr	r2, [pc, #28]	; (170e0 <ticker_trigger+0x20>)
   170c2:	232c      	movs	r3, #44	; 0x2c
   170c4:	fb03 2100 	mla	r1, r3, r0, r2
{
   170c8:	b410      	push	{r4}
	if (instance->sched_cb) {
   170ca:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   170cc:	b134      	cbz	r4, 170dc <ticker_trigger+0x1c>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   170ce:	460b      	mov	r3, r1
   170d0:	46a4      	mov	ip, r4
   170d2:	2201      	movs	r2, #1
   170d4:	2103      	movs	r1, #3
   170d6:	2002      	movs	r0, #2
}
   170d8:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   170da:	4760      	bx	ip
}
   170dc:	bc10      	pop	{r4}
   170de:	4770      	bx	lr
   170e0:	2000256c 	.word	0x2000256c

000170e4 <ticker_start_ext>:
{
   170e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   170e8:	4c23      	ldr	r4, [pc, #140]	; (17178 <ticker_start_ext+0x94>)
   170ea:	262c      	movs	r6, #44	; 0x2c
   170ec:	fb00 4906 	mla	r9, r0, r6, r4
	user = &instance->users[user_id];
   170f0:	b20c      	sxth	r4, r1
   170f2:	f8d9 0004 	ldr.w	r0, [r9, #4]
   170f6:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
	if (last >= user->count_user_op) {
   170fa:	f810 0034 	ldrb.w	r0, [r0, r4, lsl #3]
	last = user->last + 1;
   170fe:	f89c 7003 	ldrb.w	r7, [ip, #3]
   17102:	1c7d      	adds	r5, r7, #1
   17104:	b2ed      	uxtb	r5, r5
		last = 0U;
   17106:	42a8      	cmp	r0, r5
   17108:	bf98      	it	ls
   1710a:	2500      	movls	r5, #0
	if (last == user->first) {
   1710c:	f89c 0001 	ldrb.w	r0, [ip, #1]
   17110:	42a8      	cmp	r0, r5
   17112:	d02f      	beq.n	17174 <ticker_start_ext+0x90>
	user_op = &user->user_op[user->last];
   17114:	2034      	movs	r0, #52	; 0x34
   17116:	fb17 f700 	smulbb	r7, r7, r0
   1711a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1711e:	19c4      	adds	r4, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_START;
   17120:	f04f 0804 	mov.w	r8, #4
   17124:	f800 8007 	strb.w	r8, [r0, r7]
	user_op->params.start.ticks_at_start = ticks_anchor;
   17128:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   1712a:	9b08      	ldr	r3, [sp, #32]
   1712c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   1712e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17130:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   17132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17134:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   17136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17138:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
   1713a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1713e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.ext_data = ext_data;
   17140:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17142:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   17144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17146:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   17148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1714a:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
   1714c:	2302      	movs	r3, #2
   1714e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   17150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17152:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   17154:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   17156:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   17158:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   1715a:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1715e:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
   17162:	4608      	mov	r0, r1
   17164:	4798      	blx	r3
   17166:	464b      	mov	r3, r9
   17168:	2200      	movs	r2, #0
   1716a:	4641      	mov	r1, r8
   1716c:	47a8      	blx	r5
	return user_op->status;
   1716e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   17170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   17174:	2001      	movs	r0, #1
   17176:	e7fb      	b.n	17170 <ticker_start_ext+0x8c>
   17178:	2000256c 	.word	0x2000256c

0001717c <ticker_update_ext>:
{
   1717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   17180:	4c22      	ldr	r4, [pc, #136]	; (1720c <ticker_update_ext+0x90>)
   17182:	262c      	movs	r6, #44	; 0x2c
   17184:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->users[user_id];
   17188:	b20c      	sxth	r4, r1
   1718a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1718e:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
	if (last >= user->count_user_op) {
   17192:	f810 0034 	ldrb.w	r0, [r0, r4, lsl #3]
	last = user->last + 1;
   17196:	f89c 7003 	ldrb.w	r7, [ip, #3]
   1719a:	1c7d      	adds	r5, r7, #1
   1719c:	b2ed      	uxtb	r5, r5
		last = 0U;
   1719e:	42a8      	cmp	r0, r5
   171a0:	bf98      	it	ls
   171a2:	2500      	movls	r5, #0
	if (last == user->first) {
   171a4:	f89c 0001 	ldrb.w	r0, [ip, #1]
   171a8:	42a8      	cmp	r0, r5
   171aa:	d02d      	beq.n	17208 <ticker_update_ext+0x8c>
	user_op = &user->user_op[user->last];
   171ac:	2034      	movs	r0, #52	; 0x34
   171ae:	fb17 f700 	smulbb	r7, r7, r0
   171b2:	f8dc 0004 	ldr.w	r0, [ip, #4]
   171b6:	19c4      	adds	r4, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   171b8:	f04f 0e05 	mov.w	lr, #5
   171bc:	f800 e007 	strb.w	lr, [r0, r7]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   171c0:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   171c2:	9b06      	ldr	r3, [sp, #24]
   171c4:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   171c6:	9b07      	ldr	r3, [sp, #28]
   171c8:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   171ca:	9b08      	ldr	r3, [sp, #32]
   171cc:	6123      	str	r3, [r4, #16]
	user_op->params.update.lazy = lazy;
   171ce:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   171d2:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
   171d4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   171d8:	75a3      	strb	r3, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   171da:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   171de:	75e3      	strb	r3, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
   171e0:	2302      	movs	r3, #2
   171e2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
   171e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   171e6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   171e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	user_op->id = ticker_id;
   171ea:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
   171ec:	6323      	str	r3, [r4, #48]	; 0x30
	user->last = last;
   171ee:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   171f2:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
   171f6:	4608      	mov	r0, r1
   171f8:	4798      	blx	r3
   171fa:	4643      	mov	r3, r8
   171fc:	2200      	movs	r2, #0
   171fe:	2104      	movs	r1, #4
   17200:	47a8      	blx	r5
	return user_op->status;
   17202:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   17204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   17208:	2001      	movs	r0, #1
   1720a:	e7fb      	b.n	17204 <ticker_update_ext+0x88>
   1720c:	2000256c 	.word	0x2000256c

00017210 <ticker_stop>:
{
   17210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   17214:	4c1a      	ldr	r4, [pc, #104]	; (17280 <ticker_stop+0x70>)
   17216:	252c      	movs	r5, #44	; 0x2c
   17218:	fb00 4805 	mla	r8, r0, r5, r4
	user = &instance->users[user_id];
   1721c:	b20e      	sxth	r6, r1
   1721e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   17222:	eb00 0cc6 	add.w	ip, r0, r6, lsl #3
	if (last >= user->count_user_op) {
   17226:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
   1722a:	f89c 7003 	ldrb.w	r7, [ip, #3]
   1722e:	1c7c      	adds	r4, r7, #1
   17230:	b2e4      	uxtb	r4, r4
		last = 0U;
   17232:	42a0      	cmp	r0, r4
   17234:	bf98      	it	ls
   17236:	2400      	movls	r4, #0
	if (last == user->first) {
   17238:	f89c 0001 	ldrb.w	r0, [ip, #1]
   1723c:	42a0      	cmp	r0, r4
   1723e:	d01c      	beq.n	1727a <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
   17240:	2034      	movs	r0, #52	; 0x34
   17242:	fb17 f700 	smulbb	r7, r7, r0
   17246:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1724a:	19c6      	adds	r6, r0, r7
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1724c:	f04f 0e06 	mov.w	lr, #6
   17250:	f800 e007 	strb.w	lr, [r0, r7]
	user_op->id = ticker_id;
   17254:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   17256:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
   17258:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	user_op->op_context = op_context;
   1725c:	9b06      	ldr	r3, [sp, #24]
   1725e:	6333      	str	r3, [r6, #48]	; 0x30
	user->last = last;
   17260:	f88c 4003 	strb.w	r4, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   17264:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
   17268:	4608      	mov	r0, r1
   1726a:	4798      	blx	r3
   1726c:	4643      	mov	r3, r8
   1726e:	2200      	movs	r2, #0
   17270:	2104      	movs	r1, #4
   17272:	47a0      	blx	r4
	return user_op->status;
   17274:	6ab0      	ldr	r0, [r6, #40]	; 0x28
}
   17276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1727a:	2001      	movs	r0, #1
   1727c:	e7fb      	b.n	17276 <ticker_stop+0x66>
   1727e:	bf00      	nop
   17280:	2000256c 	.word	0x2000256c

00017284 <ll_addr_get>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
   17284:	b508      	push	{r3, lr}
   17286:	4603      	mov	r3, r0
	if (addr_type > 1) {
   17288:	2b01      	cmp	r3, #1
{
   1728a:	4608      	mov	r0, r1
	if (addr_type > 1) {
   1728c:	d80e      	bhi.n	172ac <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
   1728e:	b133      	cbz	r3, 1729e <ll_addr_get+0x1a>
		if (bdaddr) {
   17290:	b119      	cbz	r1, 1729a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   17292:	2206      	movs	r2, #6
   17294:	4906      	ldr	r1, [pc, #24]	; (172b0 <ll_addr_get+0x2c>)
   17296:	f00e ff63 	bl	26160 <memcpy>
		}

		return rnd_addr;
   1729a:	4805      	ldr	r0, [pc, #20]	; (172b0 <ll_addr_get+0x2c>)
   1729c:	e007      	b.n	172ae <ll_addr_get+0x2a>
	}

	if (bdaddr) {
   1729e:	b119      	cbz	r1, 172a8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   172a0:	2206      	movs	r2, #6
   172a2:	4904      	ldr	r1, [pc, #16]	; (172b4 <ll_addr_get+0x30>)
   172a4:	f00e ff5c 	bl	26160 <memcpy>
	}

	return pub_addr;
   172a8:	4802      	ldr	r0, [pc, #8]	; (172b4 <ll_addr_get+0x30>)
   172aa:	e000      	b.n	172ae <ll_addr_get+0x2a>
		return NULL;
   172ac:	2000      	movs	r0, #0
}
   172ae:	bd08      	pop	{r3, pc}
   172b0:	200036b3 	.word	0x200036b3
   172b4:	200036ad 	.word	0x200036ad

000172b8 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   172b8:	b570      	push	{r4, r5, r6, lr}
   172ba:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   172bc:	2000      	movs	r0, #0
{
   172be:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   172c0:	f011 fd7c 	bl	28dbc <ull_adv_is_enabled>
   172c4:	b110      	cbz	r0, 172cc <ll_addr_set+0x14>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
			return BT_HCI_ERR_CMD_DISALLOWED;
   172c6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
   172c8:	4620      	mov	r0, r4
   172ca:	bd70      	pop	{r4, r5, r6, pc}
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   172cc:	f011 fdf7 	bl	28ebe <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   172d0:	f010 0606 	ands.w	r6, r0, #6
   172d4:	d1f7      	bne.n	172c6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   172d6:	2206      	movs	r2, #6
   172d8:	4629      	mov	r1, r5
	if (addr_type) {
   172da:	b124      	cbz	r4, 172e6 <ll_addr_set+0x2e>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   172dc:	4804      	ldr	r0, [pc, #16]	; (172f0 <ll_addr_set+0x38>)
   172de:	f00e ff3f 	bl	26160 <memcpy>
	return 0;
   172e2:	4634      	mov	r4, r6
   172e4:	e7f0      	b.n	172c8 <ll_addr_set+0x10>
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   172e6:	4803      	ldr	r0, [pc, #12]	; (172f4 <ll_addr_set+0x3c>)
   172e8:	f00e ff3a 	bl	26160 <memcpy>
   172ec:	e7ec      	b.n	172c8 <ll_addr_set+0x10>
   172ee:	bf00      	nop
   172f0:	200036b3 	.word	0x200036b3
   172f4:	200036ad 	.word	0x200036ad

000172f8 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   172f8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   172fa:	4802      	ldr	r0, [pc, #8]	; (17304 <hci_driver_init+0xc>)
   172fc:	f7f1 fad8 	bl	88b0 <bt_hci_driver_register>

	return 0;
}
   17300:	2000      	movs	r0, #0
   17302:	bd08      	pop	{r3, pc}
   17304:	0002b5d8 	.word	0x0002b5d8

00017308 <hci_driver_send>:
	if (!buf->len) {
   17308:	8983      	ldrh	r3, [r0, #12]
{
   1730a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1730c:	4605      	mov	r5, r0
	if (!buf->len) {
   1730e:	b943      	cbnz	r3, 17322 <hci_driver_send+0x1a>
		BT_ERR("Empty HCI packet");
   17310:	2145      	movs	r1, #69	; 0x45
   17312:	481a      	ldr	r0, [pc, #104]	; (1737c <hci_driver_send+0x74>)
   17314:	f00c ff92 	bl	2423c <printk>
		return -EINVAL;
   17318:	f06f 0415 	mvn.w	r4, #21
}
   1731c:	4620      	mov	r0, r4
   1731e:	b003      	add	sp, #12
   17320:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17322:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
   17324:	b182      	cbz	r2, 17348 <hci_driver_send+0x40>
   17326:	2a02      	cmp	r2, #2
   17328:	d122      	bne.n	17370 <hci_driver_send+0x68>
	err = hci_acl_handle(buf, &evt);
   1732a:	a901      	add	r1, sp, #4
   1732c:	f000 fc6c 	bl	17c08 <hci_acl_handle>
   17330:	4604      	mov	r4, r0
	if (evt) {
   17332:	9801      	ldr	r0, [sp, #4]
   17334:	b108      	cbz	r0, 1733a <hci_driver_send+0x32>
		bt_recv_prio(evt);
   17336:	f7f1 faa1 	bl	887c <bt_recv_prio>
	if (!err) {
   1733a:	2c00      	cmp	r4, #0
   1733c:	d1ee      	bne.n	1731c <hci_driver_send+0x14>
		net_buf_unref(buf);
   1733e:	4628      	mov	r0, r5
   17340:	f006 f914 	bl	1d56c <net_buf_unref>
   17344:	2400      	movs	r4, #0
   17346:	e7e9      	b.n	1731c <hci_driver_send+0x14>
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   17348:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   1734a:	9201      	str	r2, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   1734c:	f000 fa06 	bl	1775c <hci_cmd_handle>
	if (evt) {
   17350:	2800      	cmp	r0, #0
   17352:	d0f4      	beq.n	1733e <hci_driver_send+0x36>
		bt_recv_prio(evt);
   17354:	f7f1 fa92 	bl	887c <bt_recv_prio>
		if (node_rx) {
   17358:	9c01      	ldr	r4, [sp, #4]
   1735a:	2c00      	cmp	r4, #0
   1735c:	d0ef      	beq.n	1733e <hci_driver_send+0x36>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1735e:	4620      	mov	r0, r4
   17360:	f011 fcca 	bl	28cf8 <hci_get_class>
   17364:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
   17366:	9901      	ldr	r1, [sp, #4]
   17368:	4805      	ldr	r0, [pc, #20]	; (17380 <hci_driver_send+0x78>)
   1736a:	f012 ff5b 	bl	2a224 <k_queue_append>
	if (!err) {
   1736e:	e7e6      	b.n	1733e <hci_driver_send+0x36>
		BT_ERR("Unknown HCI type %u", type);
   17370:	2145      	movs	r1, #69	; 0x45
   17372:	4804      	ldr	r0, [pc, #16]	; (17384 <hci_driver_send+0x7c>)
   17374:	f00c ff62 	bl	2423c <printk>
   17378:	e7ce      	b.n	17318 <hci_driver_send+0x10>
   1737a:	bf00      	nop
   1737c:	00030b24 	.word	0x00030b24
   17380:	20000e10 	.word	0x20000e10
   17384:	00030b3a 	.word	0x00030b3a

00017388 <recv_thread>:
{
   17388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   1738a:	4d2a      	ldr	r5, [pc, #168]	; (17434 <recv_thread+0xac>)
		LL_ASSERT(0);
   1738c:	4e2a      	ldr	r6, [pc, #168]	; (17438 <recv_thread+0xb0>)
   1738e:	4f2b      	ldr	r7, [pc, #172]	; (1743c <recv_thread+0xb4>)
   17390:	f04f 32ff 	mov.w	r2, #4294967295
   17394:	f04f 33ff 	mov.w	r3, #4294967295
   17398:	4628      	mov	r0, r5
   1739a:	f009 fce9 	bl	20d70 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1739e:	b368      	cbz	r0, 173fc <recv_thread+0x74>
	uint8_t class = node_rx->hdr.user_meta;
   173a0:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   173a2:	9001      	str	r0, [sp, #4]
	switch (class) {
   173a4:	b11b      	cbz	r3, 173ae <recv_thread+0x26>
   173a6:	2b04      	cmp	r3, #4
   173a8:	d90e      	bls.n	173c8 <recv_thread+0x40>
   173aa:	2b05      	cmp	r3, #5
   173ac:	d031      	beq.n	17412 <recv_thread+0x8a>
		LL_ASSERT(0);
   173ae:	22cf      	movs	r2, #207	; 0xcf
   173b0:	4631      	mov	r1, r6
   173b2:	4638      	mov	r0, r7
   173b4:	f00c ff42 	bl	2423c <printk>
   173b8:	4040      	eors	r0, r0
   173ba:	f380 8811 	msr	BASEPRI, r0
   173be:	f04f 0003 	mov.w	r0, #3
   173c2:	df02      	svc	2
	struct net_buf *buf = NULL;
   173c4:	2400      	movs	r4, #0
   173c6:	e00d      	b.n	173e4 <recv_thread+0x5c>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   173c8:	2b02      	cmp	r3, #2
   173ca:	d11a      	bne.n	17402 <recv_thread+0x7a>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   173cc:	2200      	movs	r2, #0
   173ce:	2300      	movs	r3, #0
   173d0:	2101      	movs	r1, #1
   173d2:	2000      	movs	r0, #0
   173d4:	f7f0 f91c 	bl	7610 <bt_buf_get_evt>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   173d8:	4604      	mov	r4, r0
		if (buf) {
   173da:	b118      	cbz	r0, 173e4 <recv_thread+0x5c>
			hci_evt_encode(node_rx, buf);
   173dc:	4601      	mov	r1, r0
   173de:	9801      	ldr	r0, [sp, #4]
   173e0:	f000 fcea 	bl	17db8 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   173e4:	9b01      	ldr	r3, [sp, #4]
   173e6:	2200      	movs	r2, #0
   173e8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   173ea:	a801      	add	r0, sp, #4
   173ec:	f001 fa20 	bl	18830 <ll_rx_mem_release>
		if (buf) {
   173f0:	b124      	cbz	r4, 173fc <recv_thread+0x74>
			if (buf->len) {
   173f2:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   173f4:	4620      	mov	r0, r4
			if (buf->len) {
   173f6:	b1cb      	cbz	r3, 1742c <recv_thread+0xa4>
				bt_recv(buf);
   173f8:	f7f1 f9aa 	bl	8750 <bt_recv>
	z_impl_k_yield();
   173fc:	f00a fbe6 	bl	21bcc <z_impl_k_yield>
   17400:	e7c6      	b.n	17390 <recv_thread+0x8>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   17402:	f04f 32ff 	mov.w	r2, #4294967295
   17406:	f04f 33ff 	mov.w	r3, #4294967295
   1740a:	2001      	movs	r0, #1
   1740c:	f7f0 f8b0 	bl	7570 <bt_buf_get_rx>
   17410:	e7e2      	b.n	173d8 <recv_thread+0x50>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   17412:	f04f 32ff 	mov.w	r2, #4294967295
   17416:	f04f 33ff 	mov.w	r3, #4294967295
   1741a:	2003      	movs	r0, #3
   1741c:	f7f0 f8a8 	bl	7570 <bt_buf_get_rx>
   17420:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   17422:	4601      	mov	r1, r0
   17424:	9801      	ldr	r0, [sp, #4]
   17426:	f000 fc91 	bl	17d4c <hci_acl_encode>
		break;
   1742a:	e7db      	b.n	173e4 <recv_thread+0x5c>
				net_buf_unref(buf);
   1742c:	f006 f89e 	bl	1d56c <net_buf_unref>
   17430:	e7e4      	b.n	173fc <recv_thread+0x74>
   17432:	bf00      	nop
   17434:	20000e10 	.word	0x20000e10
   17438:	00030b53 	.word	0x00030b53
   1743c:	0002bced 	.word	0x0002bced

00017440 <prio_recv_thread>:
{
   17440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   17444:	4f2a      	ldr	r7, [pc, #168]	; (174f0 <prio_recv_thread+0xb0>)
				k_fifo_put(&recv_fifo, node_rx);
   17446:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 174f4 <prio_recv_thread+0xb4>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1744a:	f10d 0102 	add.w	r1, sp, #2
   1744e:	a801      	add	r0, sp, #4
   17450:	f001 f8fe 	bl	18650 <ll_rx_get>
   17454:	4604      	mov	r4, r0
   17456:	bb78      	cbnz	r0, 174b8 <prio_recv_thread+0x78>
		if (node_rx) {
   17458:	9b01      	ldr	r3, [sp, #4]
   1745a:	2b00      	cmp	r3, #0
   1745c:	d040      	beq.n	174e0 <prio_recv_thread+0xa0>
			ll_rx_dequeue();
   1745e:	f001 f94f 	bl	18700 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   17462:	9d01      	ldr	r5, [sp, #4]
   17464:	4628      	mov	r0, r5
   17466:	f011 fc47 	bl	28cf8 <hci_get_class>
   1746a:	7168      	strb	r0, [r5, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
   1746c:	9d01      	ldr	r5, [sp, #4]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   1746e:	796b      	ldrb	r3, [r5, #5]
   17470:	2b03      	cmp	r3, #3
   17472:	d11c      	bne.n	174ae <prio_recv_thread+0x6e>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   17474:	792b      	ldrb	r3, [r5, #4]
   17476:	2b14      	cmp	r3, #20
   17478:	d119      	bne.n	174ae <prio_recv_thread+0x6e>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1747a:	4621      	mov	r1, r4
   1747c:	f04f 32ff 	mov.w	r2, #4294967295
   17480:	f04f 33ff 	mov.w	r3, #4294967295
   17484:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   17486:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   17488:	f7f0 f8c2 	bl	7610 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1748c:	4631      	mov	r1, r6
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1748e:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   17490:	4602      	mov	r2, r0
   17492:	f105 001c 	add.w	r0, r5, #28
   17496:	f000 fc2f 	bl	17cf8 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   1749a:	4630      	mov	r0, r6
   1749c:	f000 fc4e 	bl	17d3c <hci_disconn_complete_process>
			if (buf) {
   174a0:	b12c      	cbz	r4, 174ae <prio_recv_thread+0x6e>
				bt_recv_prio(buf);
   174a2:	4620      	mov	r0, r4
   174a4:	f7f1 f9ea 	bl	887c <bt_recv_prio>
					net_buf_unref(buf);
   174a8:	4620      	mov	r0, r4
   174aa:	f006 f85f 	bl	1d56c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   174ae:	9901      	ldr	r1, [sp, #4]
   174b0:	4640      	mov	r0, r8
   174b2:	f012 feb7 	bl	2a224 <k_queue_append>
			continue;
   174b6:	e7c8      	b.n	1744a <prio_recv_thread+0xa>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   174b8:	f04f 33ff 	mov.w	r3, #4294967295
   174bc:	f04f 32ff 	mov.w	r2, #4294967295
   174c0:	2100      	movs	r1, #0
   174c2:	2013      	movs	r0, #19
   174c4:	f7f0 f8a4 	bl	7610 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   174c8:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   174ca:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   174cc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   174d0:	f011 fbfb 	bl	28cca <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   174d4:	4628      	mov	r0, r5
   174d6:	f7f1 f9d1 	bl	887c <bt_recv_prio>
	z_impl_k_yield();
   174da:	f00a fb77 	bl	21bcc <z_impl_k_yield>
   174de:	e7b4      	b.n	1744a <prio_recv_thread+0xa>
	return z_impl_k_sem_take(sem, timeout);
   174e0:	f04f 32ff 	mov.w	r2, #4294967295
   174e4:	f04f 33ff 	mov.w	r3, #4294967295
   174e8:	4638      	mov	r0, r7
   174ea:	f00a fd0b 	bl	21f04 <z_impl_k_sem_take>
		BT_DBG("sem taken");
   174ee:	e7ac      	b.n	1744a <prio_recv_thread+0xa>
   174f0:	20000dc0 	.word	0x20000dc0
   174f4:	20000e10 	.word	0x20000e10

000174f8 <hci_driver_open>:
{
   174f8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   174fa:	481d      	ldr	r0, [pc, #116]	; (17570 <hci_driver_open+0x78>)
{
   174fc:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   174fe:	f000 ffad 	bl	1845c <ll_init>
	if (err) {
   17502:	4604      	mov	r4, r0
   17504:	b138      	cbz	r0, 17516 <hci_driver_open+0x1e>
		BT_ERR("LL initialization failed: %d", err);
   17506:	4602      	mov	r2, r0
   17508:	2145      	movs	r1, #69	; 0x45
   1750a:	481a      	ldr	r0, [pc, #104]	; (17574 <hci_driver_open+0x7c>)
   1750c:	f00c fe96 	bl	2423c <printk>
}
   17510:	4620      	mov	r0, r4
   17512:	b008      	add	sp, #32
   17514:	bdd0      	pop	{r4, r6, r7, pc}
	hci_init(NULL);
   17516:	f000 fdc3 	bl	180a0 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   1751a:	2600      	movs	r6, #0
   1751c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1751e:	f06f 0309 	mvn.w	r3, #9
   17522:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17526:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1752a:	9404      	str	r4, [sp, #16]
   1752c:	e9cd 4400 	strd	r4, r4, [sp]
   17530:	4b11      	ldr	r3, [pc, #68]	; (17578 <hci_driver_open+0x80>)
   17532:	4912      	ldr	r1, [pc, #72]	; (1757c <hci_driver_open+0x84>)
   17534:	4812      	ldr	r0, [pc, #72]	; (17580 <hci_driver_open+0x88>)
   17536:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1753a:	f00a fdd7 	bl	220ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1753e:	4911      	ldr	r1, [pc, #68]	; (17584 <hci_driver_open+0x8c>)
   17540:	480f      	ldr	r0, [pc, #60]	; (17580 <hci_driver_open+0x88>)
   17542:	f012 fee2 	bl	2a30a <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17546:	f06f 0307 	mvn.w	r3, #7
   1754a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1754e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   17552:	9404      	str	r4, [sp, #16]
   17554:	e9cd 4400 	strd	r4, r4, [sp]
   17558:	4b0b      	ldr	r3, [pc, #44]	; (17588 <hci_driver_open+0x90>)
   1755a:	490c      	ldr	r1, [pc, #48]	; (1758c <hci_driver_open+0x94>)
   1755c:	480c      	ldr	r0, [pc, #48]	; (17590 <hci_driver_open+0x98>)
   1755e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17562:	f00a fdc3 	bl	220ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   17566:	490b      	ldr	r1, [pc, #44]	; (17594 <hci_driver_open+0x9c>)
   17568:	4809      	ldr	r0, [pc, #36]	; (17590 <hci_driver_open+0x98>)
   1756a:	f012 fece 	bl	2a30a <z_impl_k_thread_name_set>
	return 0;
   1756e:	e7cf      	b.n	17510 <hci_driver_open+0x18>
   17570:	20000dc0 	.word	0x20000dc0
   17574:	00030af2 	.word	0x00030af2
   17578:	00017441 	.word	0x00017441
   1757c:	20004140 	.word	0x20004140
   17580:	20001748 	.word	0x20001748
   17584:	00030b14 	.word	0x00030b14
   17588:	00017389 	.word	0x00017389
   1758c:	20004320 	.word	0x20004320
   17590:	200017d8 	.word	0x200017d8
   17594:	00030b1e 	.word	0x00030b1e

00017598 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   17598:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1759a:	4b07      	ldr	r3, [pc, #28]	; (175b8 <cmd_complete_status+0x20>)
{
   1759c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1759e:	2101      	movs	r1, #1
   175a0:	8818      	ldrh	r0, [r3, #0]
   175a2:	f00f f99d 	bl	268e0 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   175a6:	2101      	movs	r1, #1
   175a8:	4604      	mov	r4, r0
   175aa:	3008      	adds	r0, #8
   175ac:	f006 f8f4 	bl	1d798 <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
   175b0:	7005      	strb	r5, [r0, #0]

	return buf;
}
   175b2:	4620      	mov	r0, r4
   175b4:	bd38      	pop	{r3, r4, r5, pc}
   175b6:	bf00      	nop
   175b8:	2000352e 	.word	0x2000352e

000175bc <cmd_status>:
	return bt_hci_cmd_status_create(_opcode, status);
   175bc:	4b02      	ldr	r3, [pc, #8]	; (175c8 <cmd_status+0xc>)
   175be:	4601      	mov	r1, r0
   175c0:	8818      	ldrh	r0, [r3, #0]
   175c2:	f00f b99f 	b.w	26904 <bt_hci_cmd_status_create>
   175c6:	bf00      	nop
   175c8:	2000352e 	.word	0x2000352e

000175cc <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   175cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175ce:	4605      	mov	r5, r0
   175d0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   175d2:	4b13      	ldr	r3, [pc, #76]	; (17620 <le_remote_feat_complete+0x54>)
{
   175d4:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   175d6:	6859      	ldr	r1, [r3, #4]
   175d8:	2400      	movs	r4, #0
{
   175da:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   175dc:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   175e0:	4622      	mov	r2, r4
   175e2:	4313      	orrs	r3, r2
   175e4:	d01a      	beq.n	1761c <le_remote_feat_complete+0x50>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   175e6:	4b0f      	ldr	r3, [pc, #60]	; (17624 <le_remote_feat_complete+0x58>)
   175e8:	6819      	ldr	r1, [r3, #0]
   175ea:	4623      	mov	r3, r4
   175ec:	f001 0208 	and.w	r2, r1, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   175f0:	4313      	orrs	r3, r2
   175f2:	d013      	beq.n	1761c <le_remote_feat_complete+0x50>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   175f4:	220b      	movs	r2, #11
   175f6:	2104      	movs	r1, #4
   175f8:	f011 fb4f 	bl	28c9a <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
   175fc:	2208      	movs	r2, #8
	sep->status = status;
   175fe:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   17600:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   17604:	3003      	adds	r0, #3
   17606:	b925      	cbnz	r5, 17612 <le_remote_feat_complete+0x46>
		memcpy(&sep->features[0],
   17608:	1d31      	adds	r1, r6, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   1760a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   1760e:	f00e bda7 	b.w	26160 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   17612:	4621      	mov	r1, r4
}
   17614:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   17618:	f00e bdcc 	b.w	261b4 <memset>
}
   1761c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1761e:	bf00      	nop
   17620:	20000378 	.word	0x20000378
   17624:	20000380 	.word	0x20000380

00017628 <hci_cmd_complete>:
{
   17628:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1762a:	4b06      	ldr	r3, [pc, #24]	; (17644 <hci_cmd_complete+0x1c>)
{
   1762c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1762e:	8818      	ldrh	r0, [r3, #0]
{
   17630:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   17632:	f00f f955 	bl	268e0 <bt_hci_cmd_complete_create>
   17636:	4621      	mov	r1, r4
   17638:	6028      	str	r0, [r5, #0]
   1763a:	3008      	adds	r0, #8
}
   1763c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17640:	f006 b8aa 	b.w	1d798 <net_buf_simple_add>
   17644:	2000352e 	.word	0x2000352e

00017648 <hci_vendor_cmd_handle_common>:
{
   17648:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   1764a:	3801      	subs	r0, #1
{
   1764c:	b087      	sub	sp, #28
   1764e:	4614      	mov	r4, r2
	switch (ocf) {
   17650:	2809      	cmp	r0, #9
   17652:	d87d      	bhi.n	17750 <hci_vendor_cmd_handle_common+0x108>
   17654:	e8df f000 	tbb	[pc, r0]
   17658:	7c331c05 	.word	0x7c331c05
   1765c:	3f7c5a7c 	.word	0x3f7c5a7c
   17660:	7063      	.short	0x7063
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17662:	210d      	movs	r1, #13
   17664:	4610      	mov	r0, r2
   17666:	f7ff ffdf 	bl	17628 <hci_cmd_complete>
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1766a:	2302      	movs	r3, #2
   1766c:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   1766e:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   17670:	7183      	strb	r3, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   17672:	2304      	movs	r3, #4
	rp->status = 0x00;
   17674:	2100      	movs	r1, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   17676:	71c3      	strb	r3, [r0, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   17678:	2363      	movs	r3, #99	; 0x63
	rp->status = 0x00;
   1767a:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1767c:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   1767e:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
   17680:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   17682:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   17684:	7243      	strb	r3, [r0, #9]
   17686:	7281      	strb	r1, [r0, #10]
   17688:	72c1      	strb	r1, [r0, #11]
   1768a:	7301      	strb	r1, [r0, #12]
	return 0;
   1768c:	2400      	movs	r4, #0
   1768e:	e013      	b.n	176b8 <hci_vendor_cmd_handle_common+0x70>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17690:	2141      	movs	r1, #65	; 0x41
   17692:	4610      	mov	r0, r2
   17694:	f7ff ffc8 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17698:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1769a:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1769c:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1769e:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   176a2:	4621      	mov	r1, r4
   176a4:	f00e fd86 	bl	261b4 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   176a8:	786b      	ldrb	r3, [r5, #1]
   176aa:	f063 0358 	orn	r3, r3, #88	; 0x58
   176ae:	706b      	strb	r3, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   176b0:	78ab      	ldrb	r3, [r5, #2]
   176b2:	f043 0303 	orr.w	r3, r3, #3
   176b6:	70ab      	strb	r3, [r5, #2]
}
   176b8:	4620      	mov	r0, r4
   176ba:	b007      	add	sp, #28
   176bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   176be:	2109      	movs	r1, #9
   176c0:	4610      	mov	r0, r2
   176c2:	f7ff ffb1 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   176c6:	2400      	movs	r4, #0
   176c8:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   176cc:	2208      	movs	r2, #8
   176ce:	4621      	mov	r1, r4
   176d0:	f00e fd70 	bl	261b4 <memset>
   176d4:	e7f0      	b.n	176b8 <hci_vendor_cmd_handle_common+0x70>
	const char build_info[] = HCI_VS_BUILD_INFO;
   176d6:	4b20      	ldr	r3, [pc, #128]	; (17758 <hci_vendor_cmd_handle_common+0x110>)
   176d8:	aa01      	add	r2, sp, #4
   176da:	f103 0710 	add.w	r7, r3, #16
   176de:	4616      	mov	r6, r2
   176e0:	6818      	ldr	r0, [r3, #0]
   176e2:	6859      	ldr	r1, [r3, #4]
   176e4:	4615      	mov	r5, r2
   176e6:	c503      	stmia	r5!, {r0, r1}
   176e8:	3308      	adds	r3, #8
   176ea:	42bb      	cmp	r3, r7
   176ec:	462a      	mov	r2, r5
   176ee:	d1f7      	bne.n	176e0 <hci_vendor_cmd_handle_common+0x98>
   176f0:	881b      	ldrh	r3, [r3, #0]
   176f2:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   176f4:	2113      	movs	r1, #19
   176f6:	4620      	mov	r0, r4
   176f8:	f7ff ff96 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   176fc:	2400      	movs	r4, #0
   176fe:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   17702:	2212      	movs	r2, #18
   17704:	4631      	mov	r1, r6
   17706:	f00e fd2b 	bl	26160 <memcpy>
   1770a:	e7d5      	b.n	176b8 <hci_vendor_cmd_handle_common+0x70>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   1770c:	6889      	ldr	r1, [r1, #8]
   1770e:	2000      	movs	r0, #0
   17710:	f7ff fdd2 	bl	172b8 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   17714:	2000      	movs	r0, #0
   17716:	f7ff ff3f 	bl	17598 <cmd_complete_status>
   1771a:	6020      	str	r0, [r4, #0]
   1771c:	e7b6      	b.n	1768c <hci_vendor_cmd_handle_common+0x44>
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   1771e:	2118      	movs	r1, #24
   17720:	4610      	mov	r0, r2
   17722:	f7ff ff81 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17726:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   17728:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1772a:	2101      	movs	r1, #1
	rp->status = 0x00;
   1772c:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   17730:	f012 f83a 	bl	297a8 <hci_vendor_read_static_addr>
   17734:	7068      	strb	r0, [r5, #1]
   17736:	e7bf      	b.n	176b8 <hci_vendor_cmd_handle_common+0x70>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17738:	2121      	movs	r1, #33	; 0x21
   1773a:	4610      	mov	r0, r2
   1773c:	f7ff ff74 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17740:	4601      	mov	r1, r0
   17742:	2400      	movs	r4, #0
   17744:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   17748:	3001      	adds	r0, #1
   1774a:	f012 f883 	bl	29854 <hci_vendor_read_key_hierarchy_roots>
   1774e:	e7b3      	b.n	176b8 <hci_vendor_cmd_handle_common+0x70>
		return -EINVAL;
   17750:	f06f 0415 	mvn.w	r4, #21
   17754:	e7b0      	b.n	176b8 <hci_vendor_cmd_handle_common+0x70>
   17756:	bf00      	nop
   17758:	00030ca4 	.word	0x00030ca4

0001775c <hci_cmd_handle>:
{
   1775c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   1775e:	8983      	ldrh	r3, [r0, #12]
{
   17760:	b08b      	sub	sp, #44	; 0x2c
	struct net_buf *evt = NULL;
   17762:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   17764:	2b02      	cmp	r3, #2
{
   17766:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
   17768:	9505      	str	r5, [sp, #20]
	if (cmd->len < sizeof(*chdr)) {
   1776a:	d806      	bhi.n	1777a <hci_cmd_handle+0x1e>
		BT_ERR("No HCI Command header");
   1776c:	48c3      	ldr	r0, [pc, #780]	; (17a7c <hci_cmd_handle+0x320>)
   1776e:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid HCI CMD packet length");
   17770:	f00c fd64 	bl	2423c <printk>
		return NULL;
   17774:	4628      	mov	r0, r5
}
   17776:	b00b      	add	sp, #44	; 0x2c
   17778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1777a:	2103      	movs	r1, #3
   1777c:	3008      	adds	r0, #8
   1777e:	f005 ffed 	bl	1d75c <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   17782:	89a2      	ldrh	r2, [r4, #12]
   17784:	7883      	ldrb	r3, [r0, #2]
   17786:	429a      	cmp	r2, r3
   17788:	d202      	bcs.n	17790 <hci_cmd_handle+0x34>
		BT_ERR("Invalid HCI CMD packet length");
   1778a:	2145      	movs	r1, #69	; 0x45
   1778c:	48bc      	ldr	r0, [pc, #752]	; (17a80 <hci_cmd_handle+0x324>)
   1778e:	e7ef      	b.n	17770 <hci_cmd_handle+0x14>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   17790:	8802      	ldrh	r2, [r0, #0]
   17792:	49bc      	ldr	r1, [pc, #752]	; (17a84 <hci_cmd_handle+0x328>)
   17794:	b293      	uxth	r3, r2
	ocf = BT_OCF(_opcode);
   17796:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   1779a:	0a9b      	lsrs	r3, r3, #10
   1779c:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
   1779e:	800a      	strh	r2, [r1, #0]
	switch (BT_OGF(_opcode)) {
   177a0:	d061      	beq.n	17866 <hci_cmd_handle+0x10a>
   177a2:	d805      	bhi.n	177b0 <hci_cmd_handle+0x54>
   177a4:	2b01      	cmp	r3, #1
   177a6:	d00f      	beq.n	177c8 <hci_cmd_handle+0x6c>
   177a8:	2b03      	cmp	r3, #3
   177aa:	d01e      	beq.n	177ea <hci_cmd_handle+0x8e>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   177ac:	2001      	movs	r0, #1
   177ae:	e019      	b.n	177e4 <hci_cmd_handle+0x88>
	switch (BT_OGF(_opcode)) {
   177b0:	2b08      	cmp	r3, #8
   177b2:	f000 80de 	beq.w	17972 <hci_cmd_handle+0x216>
   177b6:	2b3f      	cmp	r3, #63	; 0x3f
   177b8:	d1f8      	bne.n	177ac <hci_cmd_handle+0x50>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   177ba:	aa05      	add	r2, sp, #20
   177bc:	4621      	mov	r1, r4
   177be:	f7ff ff43 	bl	17648 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   177c2:	3016      	adds	r0, #22
   177c4:	d0f2      	beq.n	177ac <hci_cmd_handle+0x50>
   177c6:	e039      	b.n	1783c <hci_cmd_handle+0xe0>
	switch (ocf) {
   177c8:	2806      	cmp	r0, #6
   177ca:	d006      	beq.n	177da <hci_cmd_handle+0x7e>
   177cc:	281d      	cmp	r0, #29
   177ce:	d1ed      	bne.n	177ac <hci_cmd_handle+0x50>
	handle = sys_le16_to_cpu(cmd->handle);
   177d0:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   177d2:	8818      	ldrh	r0, [r3, #0]
   177d4:	f011 fcd3 	bl	2917e <ll_version_ind_send>
	*evt = cmd_status(status);
   177d8:	e004      	b.n	177e4 <hci_cmd_handle+0x88>
		disconnect(cmd, evt);
   177da:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   177dc:	7899      	ldrb	r1, [r3, #2]
   177de:	8818      	ldrh	r0, [r3, #0]
   177e0:	f011 fc8b 	bl	290fa <ll_terminate_ind_send>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   177e4:	f7ff feea 	bl	175bc <cmd_status>
   177e8:	e012      	b.n	17810 <hci_cmd_handle+0xb4>
	switch (ocf) {
   177ea:	2803      	cmp	r0, #3
   177ec:	d012      	beq.n	17814 <hci_cmd_handle+0xb8>
   177ee:	d808      	bhi.n	17802 <hci_cmd_handle+0xa6>
   177f0:	2801      	cmp	r0, #1
   177f2:	d1db      	bne.n	177ac <hci_cmd_handle+0x50>
	event_mask = sys_get_le64(cmd->events);
   177f4:	68a0      	ldr	r0, [r4, #8]
   177f6:	f011 fa4c 	bl	28c92 <sys_get_le64>
   177fa:	4ba3      	ldr	r3, [pc, #652]	; (17a88 <hci_cmd_handle+0x32c>)
	le_event_mask = sys_get_le64(cmd->events);
   177fc:	e9c3 0100 	strd	r0, r1, [r3]
   17800:	e003      	b.n	1780a <hci_cmd_handle+0xae>
	switch (ocf) {
   17802:	282d      	cmp	r0, #45	; 0x2d
   17804:	d01c      	beq.n	17840 <hci_cmd_handle+0xe4>
   17806:	2863      	cmp	r0, #99	; 0x63
   17808:	d1d0      	bne.n	177ac <hci_cmd_handle+0x50>
	*evt = cmd_complete_status(0x00);
   1780a:	2000      	movs	r0, #0
	*evt = cmd_complete_status(status);
   1780c:	f7ff fec4 	bl	17598 <cmd_complete_status>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
   17810:	9005      	str	r0, [sp, #20]
   17812:	e013      	b.n	1783c <hci_cmd_handle+0xe0>
	event_mask = DEFAULT_EVENT_MASK;
   17814:	4b9c      	ldr	r3, [pc, #624]	; (17a88 <hci_cmd_handle+0x32c>)
   17816:	f04f 30ff 	mov.w	r0, #4294967295
   1781a:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1781e:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   17822:	4b9a      	ldr	r3, [pc, #616]	; (17a8c <hci_cmd_handle+0x330>)
   17824:	201f      	movs	r0, #31
   17826:	2100      	movs	r1, #0
   17828:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   1782c:	f000 fe82 	bl	18534 <ll_reset>
		*evt = cmd_complete_status(0x00);
   17830:	4628      	mov	r0, r5
   17832:	f7ff feb1 	bl	17598 <cmd_complete_status>
	conn_count = 0U;
   17836:	4b96      	ldr	r3, [pc, #600]	; (17a90 <hci_cmd_handle+0x334>)
		*evt = cmd_complete_status(0x00);
   17838:	9005      	str	r0, [sp, #20]
	conn_count = 0U;
   1783a:	601d      	str	r5, [r3, #0]
	return evt;
   1783c:	9805      	ldr	r0, [sp, #20]
   1783e:	e79a      	b.n	17776 <hci_cmd_handle+0x1a>
		read_tx_power_level(cmd, evt);
   17840:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17842:	2104      	movs	r1, #4
   17844:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   17846:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   17848:	789f      	ldrb	r7, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1784a:	f7ff feed 	bl	17628 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   1784e:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17850:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   17852:	1cc3      	adds	r3, r0, #3
   17854:	463a      	mov	r2, r7
   17856:	4631      	mov	r1, r6
   17858:	2002      	movs	r0, #2
   1785a:	f011 fa07 	bl	28c6c <ll_tx_pwr_lvl_get>
	rp->status = status;
   1785e:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   17860:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   17864:	e7ea      	b.n	1783c <hci_cmd_handle+0xe0>
	switch (ocf) {
   17866:	3801      	subs	r0, #1
   17868:	2808      	cmp	r0, #8
   1786a:	d89f      	bhi.n	177ac <hci_cmd_handle+0x50>
   1786c:	a301      	add	r3, pc, #4	; (adr r3, 17874 <hci_cmd_handle+0x118>)
   1786e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   17872:	bf00      	nop
   17874:	00017899 	.word	0x00017899
   17878:	000178bf 	.word	0x000178bf
   1787c:	0001793f 	.word	0x0001793f
   17880:	000177ad 	.word	0x000177ad
   17884:	000177ad 	.word	0x000177ad
   17888:	000177ad 	.word	0x000177ad
   1788c:	000177ad 	.word	0x000177ad
   17890:	000177ad 	.word	0x000177ad
   17894:	0001795b 	.word	0x0001795b
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17898:	2109      	movs	r1, #9
   1789a:	a805      	add	r0, sp, #20
   1789c:	f7ff fec4 	bl	17628 <hci_cmd_complete>
	rp->hci_version = LL_VERSION_NUMBER;
   178a0:	220b      	movs	r2, #11
	rp->status = 0x00;
   178a2:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   178a4:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   178a6:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   178a8:	2259      	movs	r2, #89	; 0x59
	rp->status = 0x00;
   178aa:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
   178ac:	7083      	strb	r3, [r0, #2]
   178ae:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   178b0:	7183      	strb	r3, [r0, #6]
   178b2:	7142      	strb	r2, [r0, #5]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   178b4:	f04f 33ff 	mov.w	r3, #4294967295
	dst[0] = val;
   178b8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   178ba:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   178bc:	e7be      	b.n	1783c <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   178be:	2141      	movs	r1, #65	; 0x41
   178c0:	a805      	add	r0, sp, #20
   178c2:	f7ff feb1 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   178c6:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   178c8:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   178ca:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   178cc:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   178d0:	f00e fc70 	bl	261b4 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   178d4:	79a3      	ldrb	r3, [r4, #6]
	rp->commands[26] |= BIT(6) | BIT(7);
   178d6:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   178d8:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[28] |= BIT(3);
   178da:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[5] |= BIT(6) | BIT(7);
   178dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   178e0:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   178e2:	7ae3      	ldrb	r3, [r4, #11]
   178e4:	f043 0304 	orr.w	r3, r3, #4
   178e8:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   178ea:	7be3      	ldrb	r3, [r4, #15]
   178ec:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   178f0:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   178f2:	7c23      	ldrb	r3, [r4, #16]
   178f4:	f043 0302 	orr.w	r3, r3, #2
   178f8:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   178fa:	7de3      	ldrb	r3, [r4, #23]
   178fc:	f043 0304 	orr.w	r3, r3, #4
   17900:	75e3      	strb	r3, [r4, #23]
	rp->commands[27] |= BIT(0) | BIT(1);
   17902:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   17904:	f063 0308 	orn	r3, r3, #8
   17908:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
   1790a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(2) | BIT(3);
   1790e:	f062 0230 	orn	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(4) | BIT(5);
   17912:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[26] |= BIT(2) | BIT(3);
   17916:	76e2      	strb	r2, [r4, #27]
	rp->commands[33] |= BIT(4) | BIT(5);
   17918:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   1791c:	7862      	ldrb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   1791e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   17922:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   17926:	f061 0108 	orn	r1, r1, #8
	rp->commands[0] |= BIT(5);
   1792a:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[38] |= BIT(7);
   1792e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
   17932:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   17934:	76a1      	strb	r1, [r4, #26]
	rp->commands[0] |= BIT(5);
   17936:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
   17938:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   1793c:	e77e      	b.n	1783c <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1793e:	2109      	movs	r1, #9
   17940:	a805      	add	r0, sp, #20
   17942:	f7ff fe71 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17946:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17948:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1794a:	2208      	movs	r2, #8
	rp->status = 0x00;
   1794c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17950:	f00e fc30 	bl	261b4 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   17954:	2360      	movs	r3, #96	; 0x60
   17956:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   17958:	e770      	b.n	1783c <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1795a:	2107      	movs	r1, #7
   1795c:	a805      	add	r0, sp, #20
   1795e:	f7ff fe63 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17962:	4601      	mov	r1, r0
   17964:	2300      	movs	r3, #0
   17966:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   1796a:	4618      	mov	r0, r3
   1796c:	f7ff fc8a 	bl	17284 <ll_addr_get>
	if (err == -EINVAL) {
   17970:	e764      	b.n	1783c <hci_cmd_handle+0xe0>
	switch (ocf) {
   17972:	280f      	cmp	r0, #15
   17974:	f000 80c9 	beq.w	17b0a <hci_cmd_handle+0x3ae>
   17978:	d848      	bhi.n	17a0c <hci_cmd_handle+0x2b0>
   1797a:	2807      	cmp	r0, #7
   1797c:	f000 80fc 	beq.w	17b78 <hci_cmd_handle+0x41c>
   17980:	d829      	bhi.n	179d6 <hci_cmd_handle+0x27a>
   17982:	2803      	cmp	r0, #3
   17984:	f000 80ab 	beq.w	17ade <hci_cmd_handle+0x382>
   17988:	d811      	bhi.n	179ae <hci_cmd_handle+0x252>
   1798a:	2801      	cmp	r0, #1
   1798c:	f000 80a2 	beq.w	17ad4 <hci_cmd_handle+0x378>
   17990:	2802      	cmp	r0, #2
   17992:	f47f af0b 	bne.w	177ac <hci_cmd_handle+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17996:	2104      	movs	r1, #4
   17998:	a805      	add	r0, sp, #20
   1799a:	f7ff fe45 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   1799e:	2300      	movs	r3, #0
   179a0:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   179a2:	221b      	movs	r2, #27
   179a4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   179a6:	2303      	movs	r3, #3
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   179a8:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   179aa:	70c3      	strb	r3, [r0, #3]
	if (err == -EINVAL) {
   179ac:	e746      	b.n	1783c <hci_cmd_handle+0xe0>
	switch (ocf) {
   179ae:	2805      	cmp	r0, #5
   179b0:	f000 80a6 	beq.w	17b00 <hci_cmd_handle+0x3a4>
   179b4:	2806      	cmp	r0, #6
   179b6:	f47f aef9 	bne.w	177ac <hci_cmd_handle+0x50>
		le_set_adv_param(cmd, evt);
   179ba:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   179bc:	7ba5      	ldrb	r5, [r4, #14]
   179be:	79a3      	ldrb	r3, [r4, #6]
   179c0:	7962      	ldrb	r2, [r4, #5]
   179c2:	7921      	ldrb	r1, [r4, #4]
   179c4:	8820      	ldrh	r0, [r4, #0]
   179c6:	9502      	str	r5, [sp, #8]
   179c8:	7b65      	ldrb	r5, [r4, #13]
   179ca:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   179cc:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   179ce:	9400      	str	r4, [sp, #0]
   179d0:	f001 fcac 	bl	1932c <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   179d4:	e71a      	b.n	1780c <hci_cmd_handle+0xb0>
	switch (ocf) {
   179d6:	280a      	cmp	r0, #10
   179d8:	f000 80db 	beq.w	17b92 <hci_cmd_handle+0x436>
   179dc:	d80b      	bhi.n	179f6 <hci_cmd_handle+0x29a>
   179de:	2808      	cmp	r0, #8
   179e0:	f000 80d1 	beq.w	17b86 <hci_cmd_handle+0x42a>
   179e4:	2809      	cmp	r0, #9
   179e6:	f47f aee1 	bne.w	177ac <hci_cmd_handle+0x50>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   179ea:	68a1      	ldr	r1, [r4, #8]
   179ec:	f811 0b01 	ldrb.w	r0, [r1], #1
   179f0:	f001 fe26 	bl	19640 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   179f4:	e70a      	b.n	1780c <hci_cmd_handle+0xb0>
	switch (ocf) {
   179f6:	280b      	cmp	r0, #11
   179f8:	f000 80d0 	beq.w	17b9c <hci_cmd_handle+0x440>
   179fc:	280c      	cmp	r0, #12
   179fe:	f47f aed5 	bne.w	177ac <hci_cmd_handle+0x50>
	status = ll_scan_enable(cmd->enable);
   17a02:	68a3      	ldr	r3, [r4, #8]
   17a04:	7818      	ldrb	r0, [r3, #0]
   17a06:	f011 fa39 	bl	28e7c <ll_scan_enable>
   17a0a:	e6ff      	b.n	1780c <hci_cmd_handle+0xb0>
	switch (ocf) {
   17a0c:	2816      	cmp	r0, #22
   17a0e:	f000 80d1 	beq.w	17bb4 <hci_cmd_handle+0x458>
   17a12:	d81f      	bhi.n	17a54 <hci_cmd_handle+0x2f8>
   17a14:	2812      	cmp	r0, #18
   17a16:	f000 8085 	beq.w	17b24 <hci_cmd_handle+0x3c8>
   17a1a:	d808      	bhi.n	17a2e <hci_cmd_handle+0x2d2>
   17a1c:	2810      	cmp	r0, #16
   17a1e:	d07e      	beq.n	17b1e <hci_cmd_handle+0x3c2>
   17a20:	2811      	cmp	r0, #17
   17a22:	f47f aec3 	bne.w	177ac <hci_cmd_handle+0x50>
	status = ll_wl_add(&cmd->addr);
   17a26:	68a0      	ldr	r0, [r4, #8]
   17a28:	f003 f922 	bl	1ac70 <ll_wl_add>
	*evt = cmd_complete_status(status);
   17a2c:	e6ee      	b.n	1780c <hci_cmd_handle+0xb0>
	switch (ocf) {
   17a2e:	2813      	cmp	r0, #19
   17a30:	f000 80c5 	beq.w	17bbe <hci_cmd_handle+0x462>
   17a34:	2815      	cmp	r0, #21
   17a36:	f47f aeb9 	bne.w	177ac <hci_cmd_handle+0x50>
	handle = sys_le16_to_cpu(cmd->handle);
   17a3a:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17a3c:	2108      	movs	r1, #8
   17a3e:	a805      	add	r0, sp, #20
	handle = sys_le16_to_cpu(cmd->handle);
   17a40:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17a42:	f7ff fdf1 	bl	17628 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   17a46:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17a48:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   17a4a:	1cc1      	adds	r1, r0, #3
   17a4c:	4630      	mov	r0, r6
   17a4e:	f011 fb3d 	bl	290cc <ll_chm_get>
   17a52:	e704      	b.n	1785e <hci_cmd_handle+0x102>
	switch (ocf) {
   17a54:	281c      	cmp	r0, #28
   17a56:	d07c      	beq.n	17b52 <hci_cmd_handle+0x3f6>
   17a58:	d81c      	bhi.n	17a94 <hci_cmd_handle+0x338>
   17a5a:	2817      	cmp	r0, #23
   17a5c:	d066      	beq.n	17b2c <hci_cmd_handle+0x3d0>
   17a5e:	2818      	cmp	r0, #24
   17a60:	f47f aea4 	bne.w	177ac <hci_cmd_handle+0x50>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17a64:	2109      	movs	r1, #9
   17a66:	a805      	add	r0, sp, #20
   17a68:	f7ff fdde 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17a6c:	2300      	movs	r3, #0
   17a6e:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   17a72:	2108      	movs	r1, #8
   17a74:	f003 fb3e 	bl	1b0f4 <lll_csrand_get>
	if (err == -EINVAL) {
   17a78:	e6e0      	b.n	1783c <hci_cmd_handle+0xe0>
   17a7a:	bf00      	nop
   17a7c:	00030c54 	.word	0x00030c54
   17a80:	00030c6f 	.word	0x00030c6f
   17a84:	2000352e 	.word	0x2000352e
   17a88:	20000378 	.word	0x20000378
   17a8c:	20000380 	.word	0x20000380
   17a90:	20002598 	.word	0x20002598
	switch (ocf) {
   17a94:	2821      	cmp	r0, #33	; 0x21
   17a96:	f000 80a0 	beq.w	17bda <hci_cmd_handle+0x47e>
   17a9a:	284b      	cmp	r0, #75	; 0x4b
   17a9c:	f000 80a5 	beq.w	17bea <hci_cmd_handle+0x48e>
   17aa0:	2820      	cmp	r0, #32
   17aa2:	f47f ae83 	bne.w	177ac <hci_cmd_handle+0x50>
		le_conn_param_req_reply(cmd, evt);
   17aa6:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   17aa8:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   17aaa:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   17aac:	8853      	ldrh	r3, [r2, #2]
   17aae:	9102      	str	r1, [sp, #8]
   17ab0:	88d1      	ldrh	r1, [r2, #6]
   17ab2:	9101      	str	r1, [sp, #4]
   17ab4:	8892      	ldrh	r2, [r2, #4]
   17ab6:	9200      	str	r2, [sp, #0]
   17ab8:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   17aba:	2102      	movs	r1, #2
   17abc:	4620      	mov	r0, r4
   17abe:	f011 fa83 	bl	28fc8 <ll_conn_update>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17ac2:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   17ac4:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17ac6:	a805      	add	r0, sp, #20
   17ac8:	f7ff fdae 	bl	17628 <hci_cmd_complete>
	rp->status = status;
   17acc:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   17ace:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   17ad2:	e6b3      	b.n	1783c <hci_cmd_handle+0xe0>
	le_event_mask = sys_get_le64(cmd->events);
   17ad4:	68a0      	ldr	r0, [r4, #8]
   17ad6:	f011 f8dc 	bl	28c92 <sys_get_le64>
   17ada:	4b4a      	ldr	r3, [pc, #296]	; (17c04 <hci_cmd_handle+0x4a8>)
   17adc:	e68e      	b.n	177fc <hci_cmd_handle+0xa0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17ade:	2109      	movs	r1, #9
   17ae0:	a805      	add	r0, sp, #20
   17ae2:	f7ff fda1 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17ae6:	2500      	movs	r5, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17ae8:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17aea:	2208      	movs	r2, #8
	rp->status = 0x00;
   17aec:	f800 5b01 	strb.w	r5, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   17af0:	4629      	mov	r1, r5
   17af2:	f00e fb5f 	bl	261b4 <memset>
	dst[0] = val;
   17af6:	238e      	movs	r3, #142	; 0x8e
   17af8:	7063      	strb	r3, [r4, #1]
	dst[1] = val >> 8;
   17afa:	70a5      	strb	r5, [r4, #2]
	dst[2] = val >> 16;
   17afc:	70e5      	strb	r5, [r4, #3]
	if (err == -EINVAL) {
   17afe:	e69d      	b.n	1783c <hci_cmd_handle+0xe0>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   17b00:	68a1      	ldr	r1, [r4, #8]
   17b02:	2001      	movs	r0, #1
   17b04:	f7ff fbd8 	bl	172b8 <ll_addr_set>
	*evt = cmd_complete_status(status);
   17b08:	e680      	b.n	1780c <hci_cmd_handle+0xb0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17b0a:	2102      	movs	r1, #2
   17b0c:	a805      	add	r0, sp, #20
   17b0e:	f7ff fd8b 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17b12:	7005      	strb	r5, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17b14:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   17b16:	f011 fb92 	bl	2923e <ll_wl_size_get>
   17b1a:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   17b1c:	e68e      	b.n	1783c <hci_cmd_handle+0xe0>
	status = ll_wl_clear();
   17b1e:	f003 f891 	bl	1ac44 <ll_wl_clear>
	*evt = cmd_complete_status(status);
   17b22:	e673      	b.n	1780c <hci_cmd_handle+0xb0>
	status = ll_wl_remove(&cmd->addr);
   17b24:	68a0      	ldr	r0, [r4, #8]
   17b26:	f003 f8dd 	bl	1ace4 <ll_wl_remove>
	*evt = cmd_complete_status(status);
   17b2a:	e66f      	b.n	1780c <hci_cmd_handle+0xb0>
		le_encrypt(cmd, evt);
   17b2c:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   17b2e:	aa06      	add	r2, sp, #24
   17b30:	2300      	movs	r3, #0
   17b32:	f100 0110 	add.w	r1, r0, #16
   17b36:	f011 fdc5 	bl	296c4 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17b3a:	2111      	movs	r1, #17
   17b3c:	a805      	add	r0, sp, #20
   17b3e:	f7ff fd73 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17b42:	2300      	movs	r3, #0
   17b44:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   17b48:	2210      	movs	r2, #16
   17b4a:	a906      	add	r1, sp, #24
   17b4c:	f00e fb08 	bl	26160 <memcpy>
	if (err == -EINVAL) {
   17b50:	e674      	b.n	1783c <hci_cmd_handle+0xe0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17b52:	2109      	movs	r1, #9
   17b54:	a805      	add	r0, sp, #20
   17b56:	f7ff fd67 	bl	17628 <hci_cmd_complete>
	dst[0] = val;
   17b5a:	22bf      	movs	r2, #191	; 0xbf
   17b5c:	7042      	strb	r2, [r0, #1]
	dst[1] = val >> 8;
   17b5e:	22ff      	movs	r2, #255	; 0xff
   17b60:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
   17b62:	2230      	movs	r2, #48	; 0x30
   17b64:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   17b66:	22ec      	movs	r2, #236	; 0xec
   17b68:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
   17b6a:	22c0      	movs	r2, #192	; 0xc0
	rp->status = 0x00;
   17b6c:	2300      	movs	r3, #0
   17b6e:	7142      	strb	r2, [r0, #5]
	dst[1] = val >> 8;
   17b70:	2201      	movs	r2, #1
   17b72:	7003      	strb	r3, [r0, #0]
   17b74:	7182      	strb	r2, [r0, #6]
   17b76:	e69f      	b.n	178b8 <hci_cmd_handle+0x15c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17b78:	2102      	movs	r1, #2
   17b7a:	a805      	add	r0, sp, #20
   17b7c:	f7ff fd54 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17b80:	7005      	strb	r5, [r0, #0]
	rp->tx_power_level = 0;
   17b82:	7045      	strb	r5, [r0, #1]
	if (err == -EINVAL) {
   17b84:	e65a      	b.n	1783c <hci_cmd_handle+0xe0>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   17b86:	68a1      	ldr	r1, [r4, #8]
   17b88:	f811 0b01 	ldrb.w	r0, [r1], #1
   17b8c:	f001 fd50 	bl	19630 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   17b90:	e63c      	b.n	1780c <hci_cmd_handle+0xb0>
	status = ll_adv_enable(cmd->enable);
   17b92:	68a3      	ldr	r3, [r4, #8]
   17b94:	7818      	ldrb	r0, [r3, #0]
   17b96:	f7ea fb43 	bl	2220 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   17b9a:	e637      	b.n	1780c <hci_cmd_handle+0xb0>
		le_set_scan_param(cmd, evt);
   17b9c:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   17b9e:	7963      	ldrb	r3, [r4, #5]
   17ba0:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   17ba4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   17ba8:	7820      	ldrb	r0, [r4, #0]
   17baa:	79a4      	ldrb	r4, [r4, #6]
   17bac:	9400      	str	r4, [sp, #0]
   17bae:	f7ea fd77 	bl	26a0 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   17bb2:	e62b      	b.n	1780c <hci_cmd_handle+0xb0>
	handle = sys_le16_to_cpu(cmd->handle);
   17bb4:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   17bb6:	8818      	ldrh	r0, [r3, #0]
   17bb8:	f011 fac6 	bl	29148 <ll_feature_req_send>
	*evt = cmd_status(status);
   17bbc:	e612      	b.n	177e4 <hci_cmd_handle+0x88>
		le_conn_update(cmd, evt);
   17bbe:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   17bc0:	8911      	ldrh	r1, [r2, #8]
   17bc2:	8853      	ldrh	r3, [r2, #2]
   17bc4:	8810      	ldrh	r0, [r2, #0]
   17bc6:	9102      	str	r1, [sp, #8]
   17bc8:	88d1      	ldrh	r1, [r2, #6]
   17bca:	9101      	str	r1, [sp, #4]
   17bcc:	8892      	ldrh	r2, [r2, #4]
   17bce:	9200      	str	r2, [sp, #0]
   17bd0:	2200      	movs	r2, #0
   17bd2:	4611      	mov	r1, r2
   17bd4:	f011 f9f8 	bl	28fc8 <ll_conn_update>
	*evt = cmd_status(status);
   17bd8:	e604      	b.n	177e4 <hci_cmd_handle+0x88>
		le_conn_param_req_neg_reply(cmd, evt);
   17bda:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   17bdc:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   17bde:	789a      	ldrb	r2, [r3, #2]
   17be0:	2300      	movs	r3, #0
   17be2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17be6:	9300      	str	r3, [sp, #0]
   17be8:	e767      	b.n	17aba <hci_cmd_handle+0x35e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   17bea:	2103      	movs	r1, #3
   17bec:	a805      	add	r0, sp, #20
   17bee:	f7ff fd1b 	bl	17628 <hci_cmd_complete>
	rp->status = 0x00;
   17bf2:	4601      	mov	r1, r0
   17bf4:	2300      	movs	r3, #0
   17bf6:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   17bfa:	3001      	adds	r0, #1
   17bfc:	f011 f845 	bl	28c8a <ll_tx_pwr_get>
	if (err == -EINVAL) {
   17c00:	e61c      	b.n	1783c <hci_cmd_handle+0xe0>
   17c02:	bf00      	nop
   17c04:	20000380 	.word	0x20000380

00017c08 <hci_acl_handle>:
{
   17c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
   17c0c:	2300      	movs	r3, #0
   17c0e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   17c10:	8983      	ldrh	r3, [r0, #12]
   17c12:	2b03      	cmp	r3, #3
{
   17c14:	4605      	mov	r5, r0
   17c16:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
   17c18:	d806      	bhi.n	17c28 <hci_acl_handle+0x20>
		BT_ERR("No HCI ACL header");
   17c1a:	4832      	ldr	r0, [pc, #200]	; (17ce4 <hci_acl_handle+0xdc>)
   17c1c:	2145      	movs	r1, #69	; 0x45
		BT_ERR("Invalid HCI ACL packet length");
   17c1e:	f00c fb0d 	bl	2423c <printk>
		return -EINVAL;
   17c22:	f06f 0015 	mvn.w	r0, #21
   17c26:	e037      	b.n	17c98 <hci_acl_handle+0x90>
   17c28:	2104      	movs	r1, #4
   17c2a:	3008      	adds	r0, #8
   17c2c:	f005 fd96 	bl	1d75c <net_buf_simple_pull_mem>
	if (buf->len < len) {
   17c30:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   17c32:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   17c34:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   17c38:	42bb      	cmp	r3, r7
   17c3a:	d202      	bcs.n	17c42 <hci_acl_handle+0x3a>
		BT_ERR("Invalid HCI ACL packet length");
   17c3c:	2145      	movs	r1, #69	; 0x45
   17c3e:	482a      	ldr	r0, [pc, #168]	; (17ce8 <hci_acl_handle+0xe0>)
   17c40:	e7ed      	b.n	17c1e <hci_acl_handle+0x16>
	node_tx = ll_tx_mem_acquire();
   17c42:	f001 ff3f 	bl	19ac4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   17c46:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   17c4a:	4604      	mov	r4, r0
   17c4c:	bb30      	cbnz	r0, 17c9c <hci_acl_handle+0x94>
		BT_ERR("Tx Buffer Overflow");
   17c4e:	2145      	movs	r1, #69	; 0x45
   17c50:	4826      	ldr	r0, [pc, #152]	; (17cec <hci_acl_handle+0xe4>)
   17c52:	f00c faf3 	bl	2423c <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   17c56:	4b26      	ldr	r3, [pc, #152]	; (17cf0 <hci_acl_handle+0xe8>)
   17c58:	6819      	ldr	r1, [r3, #0]
   17c5a:	4623      	mov	r3, r4
   17c5c:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   17c60:	4313      	orrs	r3, r2
   17c62:	d017      	beq.n	17c94 <hci_acl_handle+0x8c>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   17c64:	f04f 32ff 	mov.w	r2, #4294967295
   17c68:	f04f 33ff 	mov.w	r3, #4294967295
   17c6c:	2001      	movs	r0, #1
   17c6e:	f7ef fc7f 	bl	7570 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   17c72:	2102      	movs	r1, #2
   17c74:	f8c8 0000 	str.w	r0, [r8]
   17c78:	3008      	adds	r0, #8
   17c7a:	f005 fd8d 	bl	1d798 <net_buf_simple_add>
	hdr->len = len;
   17c7e:	2401      	movs	r4, #1
	hdr->evt = evt;
   17c80:	231a      	movs	r3, #26
   17c82:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17c84:	7044      	strb	r4, [r0, #1]
   17c86:	f8d8 0000 	ldr.w	r0, [r8]
   17c8a:	4621      	mov	r1, r4
   17c8c:	3008      	adds	r0, #8
   17c8e:	f005 fd83 	bl	1d798 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   17c92:	7004      	strb	r4, [r0, #0]
		return -ENOBUFS;
   17c94:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   17c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   17c9c:	08b3      	lsrs	r3, r6, #2
   17c9e:	d1c0      	bne.n	17c22 <hci_acl_handle+0x1a>
	switch (bt_acl_flags_pb(flags)) {
   17ca0:	b12e      	cbz	r6, 17cae <hci_acl_handle+0xa6>
   17ca2:	2e01      	cmp	r6, #1
   17ca4:	d1bd      	bne.n	17c22 <hci_acl_handle+0x1a>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   17ca6:	7903      	ldrb	r3, [r0, #4]
   17ca8:	f366 0301 	bfi	r3, r6, #0, #2
   17cac:	e003      	b.n	17cb6 <hci_acl_handle+0xae>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   17cae:	7903      	ldrb	r3, [r0, #4]
   17cb0:	2202      	movs	r2, #2
   17cb2:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data->len = len;
   17cb6:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   17cb8:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   17cba:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   17cbc:	463a      	mov	r2, r7
   17cbe:	1de0      	adds	r0, r4, #7
   17cc0:	f00e fa4e 	bl	26160 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   17cc4:	4621      	mov	r1, r4
   17cc6:	f3c9 000b 	ubfx	r0, r9, #0, #12
   17cca:	f001 ff07 	bl	19adc <ll_tx_mem_enqueue>
   17cce:	2800      	cmp	r0, #0
   17cd0:	d0e2      	beq.n	17c98 <hci_acl_handle+0x90>
		BT_ERR("Invalid Tx Enqueue");
   17cd2:	2145      	movs	r1, #69	; 0x45
   17cd4:	4807      	ldr	r0, [pc, #28]	; (17cf4 <hci_acl_handle+0xec>)
   17cd6:	f00c fab1 	bl	2423c <printk>
		ll_tx_mem_release(node_tx);
   17cda:	4620      	mov	r0, r4
   17cdc:	f001 fef8 	bl	19ad0 <ll_tx_mem_release>
		return -EINVAL;
   17ce0:	e79f      	b.n	17c22 <hci_acl_handle+0x1a>
   17ce2:	bf00      	nop
   17ce4:	00030bea 	.word	0x00030bea
   17ce8:	00030c01 	.word	0x00030c01
   17cec:	00030c24 	.word	0x00030c24
   17cf0:	20000378 	.word	0x20000378
   17cf4:	00030c3c 	.word	0x00030c3c

00017cf8 <hci_disconn_complete_encode>:
{
   17cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   17cfa:	4b0f      	ldr	r3, [pc, #60]	; (17d38 <hci_disconn_complete_encode+0x40>)
   17cfc:	681b      	ldr	r3, [r3, #0]
   17cfe:	2500      	movs	r5, #0
{
   17d00:	4606      	mov	r6, r0
   17d02:	460f      	mov	r7, r1
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   17d04:	f003 0010 	and.w	r0, r3, #16
   17d08:	4629      	mov	r1, r5
   17d0a:	ea50 0301 	orrs.w	r3, r0, r1
   17d0e:	d011      	beq.n	17d34 <hci_disconn_complete_encode+0x3c>
   17d10:	f102 0408 	add.w	r4, r2, #8
   17d14:	2102      	movs	r1, #2
   17d16:	4620      	mov	r0, r4
   17d18:	f005 fd3e 	bl	1d798 <net_buf_simple_add>
	hdr->evt = evt;
   17d1c:	2305      	movs	r3, #5
	hdr->len = len;
   17d1e:	2104      	movs	r1, #4
	hdr->evt = evt;
   17d20:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   17d22:	7041      	strb	r1, [r0, #1]
   17d24:	4620      	mov	r0, r4
   17d26:	f005 fd37 	bl	1d798 <net_buf_simple_add>
	ep->status = 0x00;
   17d2a:	7005      	strb	r5, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   17d2c:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   17d30:	7833      	ldrb	r3, [r6, #0]
   17d32:	70c3      	strb	r3, [r0, #3]
}
   17d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d36:	bf00      	nop
   17d38:	20000378 	.word	0x20000378

00017d3c <hci_disconn_complete_process>:
	conn_count--;
   17d3c:	4a02      	ldr	r2, [pc, #8]	; (17d48 <hci_disconn_complete_process+0xc>)
   17d3e:	6813      	ldr	r3, [r2, #0]
   17d40:	3b01      	subs	r3, #1
   17d42:	6013      	str	r3, [r2, #0]
}
   17d44:	4770      	bx	lr
   17d46:	bf00      	nop
   17d48:	20002598 	.word	0x20002598

00017d4c <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   17d4c:	7f03      	ldrb	r3, [r0, #28]
   17d4e:	f003 0303 	and.w	r3, r3, #3
   17d52:	3b01      	subs	r3, #1
   17d54:	2b01      	cmp	r3, #1
{
   17d56:	b570      	push	{r4, r5, r6, lr}
   17d58:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
   17d5a:	d81c      	bhi.n	17d96 <hci_acl_encode+0x4a>
   17d5c:	f101 0608 	add.w	r6, r1, #8
	handle = node_rx->hdr.handle;
   17d60:	88c5      	ldrh	r5, [r0, #6]
   17d62:	2104      	movs	r1, #4
   17d64:	4630      	mov	r0, r6
   17d66:	f005 fd17 	bl	1d798 <net_buf_simple_add>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   17d6a:	7f23      	ldrb	r3, [r4, #28]
   17d6c:	f003 0303 	and.w	r3, r3, #3
   17d70:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   17d72:	bf0c      	ite	eq
   17d74:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   17d78:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
   17d7c:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   17d7e:	7f61      	ldrb	r1, [r4, #29]
   17d80:	8041      	strh	r1, [r0, #2]
   17d82:	4630      	mov	r0, r6
   17d84:	f005 fd08 	bl	1d798 <net_buf_simple_add>
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, pdu_data->lldata, pdu_data->len);
   17d88:	7f62      	ldrb	r2, [r4, #29]
   17d8a:	f104 011f 	add.w	r1, r4, #31

	default:
		LL_ASSERT(0);
		break;
	}
}
   17d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   17d92:	f00e b9e5 	b.w	26160 <memcpy>
		LL_ASSERT(0);
   17d96:	f241 726b 	movw	r2, #5995	; 0x176b
   17d9a:	4905      	ldr	r1, [pc, #20]	; (17db0 <hci_acl_encode+0x64>)
   17d9c:	4805      	ldr	r0, [pc, #20]	; (17db4 <hci_acl_encode+0x68>)
   17d9e:	f00c fa4d 	bl	2423c <printk>
   17da2:	4040      	eors	r0, r0
   17da4:	f380 8811 	msr	BASEPRI, r0
   17da8:	f04f 0003 	mov.w	r0, #3
   17dac:	df02      	svc	2
}
   17dae:	bd70      	pop	{r4, r5, r6, pc}
   17db0:	00030bb1 	.word	0x00030bb1
   17db4:	0002bced 	.word	0x0002bced

00017db8 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   17db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17dbc:	4604      	mov	r4, r0
   17dbe:	b086      	sub	sp, #24
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   17dc0:	7923      	ldrb	r3, [r4, #4]
   17dc2:	88e7      	ldrh	r7, [r4, #6]
   17dc4:	2b03      	cmp	r3, #3
{
   17dc6:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   17dc8:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   17dcc:	f000 810f 	beq.w	17fee <hci_evt_encode+0x236>
	switch (node_rx->hdr.type) {
   17dd0:	2b13      	cmp	r3, #19
   17dd2:	f000 80c0 	beq.w	17f56 <hci_evt_encode+0x19e>
   17dd6:	d80e      	bhi.n	17df6 <hci_evt_encode+0x3e>
   17dd8:	2b04      	cmp	r3, #4
   17dda:	d033      	beq.n	17e44 <hci_evt_encode+0x8c>
		LL_ASSERT(0);
   17ddc:	f241 6276 	movw	r2, #5750	; 0x1676
		LL_ASSERT(0);
   17de0:	49a8      	ldr	r1, [pc, #672]	; (18084 <hci_evt_encode+0x2cc>)
   17de2:	48a9      	ldr	r0, [pc, #676]	; (18088 <hci_evt_encode+0x2d0>)
   17de4:	f00c fa2a 	bl	2423c <printk>
   17de8:	4040      	eors	r0, r0
   17dea:	f380 8811 	msr	BASEPRI, r0
   17dee:	f04f 0003 	mov.w	r0, #3
   17df2:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   17df4:	e074      	b.n	17ee0 <hci_evt_encode+0x128>
	switch (node_rx->hdr.type) {
   17df6:	2b14      	cmp	r3, #20
   17df8:	f000 80f2 	beq.w	17fe0 <hci_evt_encode+0x228>
   17dfc:	2b15      	cmp	r3, #21
   17dfe:	d1ed      	bne.n	17ddc <hci_evt_encode+0x24>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17e00:	4ba2      	ldr	r3, [pc, #648]	; (1808c <hci_evt_encode+0x2d4>)
   17e02:	6858      	ldr	r0, [r3, #4]
   17e04:	2100      	movs	r1, #0
   17e06:	460a      	mov	r2, r1
   17e08:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   17e0c:	4313      	orrs	r3, r2
   17e0e:	d067      	beq.n	17ee0 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   17e10:	4b9f      	ldr	r3, [pc, #636]	; (18090 <hci_evt_encode+0x2d8>)
   17e12:	6818      	ldr	r0, [r3, #0]
   17e14:	460b      	mov	r3, r1
   17e16:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17e1a:	4313      	orrs	r3, r2
   17e1c:	d060      	beq.n	17ee0 <hci_evt_encode+0x128>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   17e1e:	2209      	movs	r2, #9
   17e20:	2103      	movs	r1, #3
   17e22:	4630      	mov	r0, r6
   17e24:	f010 ff39 	bl	28c9a <meta_evt>
	sep->status = cu->status;
   17e28:	7f23      	ldrb	r3, [r4, #28]
   17e2a:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   17e2c:	8be3      	ldrh	r3, [r4, #30]
   17e2e:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   17e32:	8c23      	ldrh	r3, [r4, #32]
   17e34:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   17e38:	8c63      	ldrh	r3, [r4, #34]	; 0x22
	sep->handle = sys_cpu_to_le16(handle);
   17e3a:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   17e3e:	f8a0 3007 	strh.w	r3, [r0, #7]
   17e42:	e04d      	b.n	17ee0 <hci_evt_encode+0x128>
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   17e44:	4b93      	ldr	r3, [pc, #588]	; (18094 <hci_evt_encode+0x2dc>)
   17e46:	9304      	str	r3, [sp, #16]
   17e48:	f64f 7304 	movw	r3, #65284	; 0xff04
   17e4c:	f8ad 3014 	strh.w	r3, [sp, #20]
   17e50:	2302      	movs	r3, #2
   17e52:	f88d 3016 	strb.w	r3, [sp, #22]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   17e56:	4b8d      	ldr	r3, [pc, #564]	; (1808c <hci_evt_encode+0x2d4>)
   17e58:	7e27      	ldrb	r7, [r4, #24]
   17e5a:	6858      	ldr	r0, [r3, #4]
	direct = node_rx->hdr.rx_ftr.direct;
   17e5c:	7e65      	ldrb	r5, [r4, #25]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   17e5e:	427f      	negs	r7, r7
   17e60:	2100      	movs	r1, #0
   17e62:	b27f      	sxtb	r7, r7
	if (direct) {
   17e64:	460a      	mov	r2, r1
   17e66:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   17e6a:	2d00      	cmp	r5, #0
   17e6c:	d03b      	beq.n	17ee6 <hci_evt_encode+0x12e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17e6e:	4313      	orrs	r3, r2
   17e70:	d036      	beq.n	17ee0 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   17e72:	4b87      	ldr	r3, [pc, #540]	; (18090 <hci_evt_encode+0x2d8>)
   17e74:	6818      	ldr	r0, [r3, #0]
   17e76:	460b      	mov	r3, r1
   17e78:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17e7c:	4313      	orrs	r3, r2
   17e7e:	d02f      	beq.n	17ee0 <hci_evt_encode+0x128>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   17e80:	7f23      	ldrb	r3, [r4, #28]
   17e82:	f003 030f 	and.w	r3, r3, #15
   17e86:	2b01      	cmp	r3, #1
   17e88:	d00b      	beq.n	17ea2 <hci_evt_encode+0xea>
   17e8a:	f241 0281 	movw	r2, #4225	; 0x1081
   17e8e:	497d      	ldr	r1, [pc, #500]	; (18084 <hci_evt_encode+0x2cc>)
   17e90:	487d      	ldr	r0, [pc, #500]	; (18088 <hci_evt_encode+0x2d0>)
   17e92:	f00c f9d3 	bl	2423c <printk>
   17e96:	4040      	eors	r0, r0
   17e98:	f380 8811 	msr	BASEPRI, r0
   17e9c:	f04f 0003 	mov.w	r0, #3
   17ea0:	df02      	svc	2
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   17ea2:	2211      	movs	r2, #17
   17ea4:	210b      	movs	r1, #11
   17ea6:	4630      	mov	r0, r6
   17ea8:	f010 fef7 	bl	28c9a <meta_evt>
	drp->num_reports = 1U;
   17eac:	2301      	movs	r3, #1
   17eae:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   17eb0:	7043      	strb	r3, [r0, #1]
		dir_info->addr.type = adv->tx_addr;
   17eb2:	7f23      	ldrb	r3, [r4, #28]
   17eb4:	f3c3 1380 	ubfx	r3, r3, #6, #1
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   17eb8:	4605      	mov	r5, r0
		dir_info->addr.type = adv->tx_addr;
   17eba:	7083      	strb	r3, [r0, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   17ebc:	2206      	movs	r2, #6
   17ebe:	f104 011e 	add.w	r1, r4, #30
   17ec2:	3003      	adds	r0, #3
   17ec4:	f00e f94c 	bl	26160 <memcpy>
	dir_info->dir_addr.type = adv->rx_addr;
   17ec8:	7f23      	ldrb	r3, [r4, #28]
   17eca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   17ece:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   17ed0:	2206      	movs	r2, #6
   17ed2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   17ed6:	f105 000a 	add.w	r0, r5, #10
   17eda:	f00e f941 	bl	26160 <memcpy>
	dir_info->rssi = rssi;
   17ede:	742f      	strb	r7, [r5, #16]
}
   17ee0:	b006      	add	sp, #24
   17ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17ee6:	4313      	orrs	r3, r2
   17ee8:	d0fa      	beq.n	17ee0 <hci_evt_encode+0x128>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   17eea:	4b69      	ldr	r3, [pc, #420]	; (18090 <hci_evt_encode+0x2d8>)
   17eec:	6819      	ldr	r1, [r3, #0]
   17eee:	462b      	mov	r3, r5
   17ef0:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17ef4:	4313      	orrs	r3, r2
   17ef6:	d0f3      	beq.n	17ee0 <hci_evt_encode+0x128>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   17ef8:	7f23      	ldrb	r3, [r4, #28]
   17efa:	f003 030f 	and.w	r3, r3, #15
   17efe:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
   17f00:	bf1e      	ittt	ne
   17f02:	7f65      	ldrbne	r5, [r4, #29]
   17f04:	3d06      	subne	r5, #6
   17f06:	b2ed      	uxtbne	r5, r5
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   17f08:	f105 020b 	add.w	r2, r5, #11
   17f0c:	b2d2      	uxtb	r2, r2
   17f0e:	2102      	movs	r1, #2
   17f10:	4630      	mov	r0, r6
   17f12:	f010 fec2 	bl	28c9a <meta_evt>
	sep->num_reports = 1U;
   17f16:	2301      	movs	r3, #1
   17f18:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   17f1a:	7f23      	ldrb	r3, [r4, #28]
   17f1c:	aa06      	add	r2, sp, #24
   17f1e:	f003 030f 	and.w	r3, r3, #15
   17f22:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   17f24:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
   17f26:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   17f2a:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
   17f2c:	7f23      	ldrb	r3, [r4, #28]
   17f2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17f32:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   17f34:	2206      	movs	r2, #6
   17f36:	f104 011e 	add.w	r1, r4, #30
   17f3a:	3003      	adds	r0, #3
   17f3c:	f00e f910 	bl	26160 <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   17f40:	360a      	adds	r6, #10
	adv_info->length = data_len;
   17f42:	f806 5c01 	strb.w	r5, [r6, #-1]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   17f46:	462a      	mov	r2, r5
   17f48:	f104 0124 	add.w	r1, r4, #36	; 0x24
   17f4c:	4630      	mov	r0, r6
   17f4e:	f00e f907 	bl	26160 <memcpy>
	*prssi = rssi;
   17f52:	5577      	strb	r7, [r6, r5]
   17f54:	e7c4      	b.n	17ee0 <hci_evt_encode+0x128>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17f56:	4b4d      	ldr	r3, [pc, #308]	; (1808c <hci_evt_encode+0x2d4>)
   17f58:	6858      	ldr	r0, [r3, #4]
   17f5a:	2100      	movs	r1, #0
   17f5c:	460a      	mov	r2, r1
   17f5e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   17f62:	4313      	orrs	r3, r2
   17f64:	d0bc      	beq.n	17ee0 <hci_evt_encode+0x128>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   17f66:	4b4a      	ldr	r3, [pc, #296]	; (18090 <hci_evt_encode+0x2d8>)
   17f68:	6818      	ldr	r0, [r3, #0]
   17f6a:	460b      	mov	r3, r1
   17f6c:	f000 0201 	and.w	r2, r0, #1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   17f70:	4313      	orrs	r3, r2
   17f72:	d0b5      	beq.n	17ee0 <hci_evt_encode+0x128>
	uint8_t status = cc->status;
   17f74:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   17f78:	f1b8 0f00 	cmp.w	r8, #0
   17f7c:	d103      	bne.n	17f86 <hci_evt_encode+0x1ce>
		conn_count++;
   17f7e:	4a46      	ldr	r2, [pc, #280]	; (18098 <hci_evt_encode+0x2e0>)
   17f80:	6813      	ldr	r3, [r2, #0]
   17f82:	3301      	adds	r3, #1
   17f84:	6013      	str	r3, [r2, #0]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   17f86:	2212      	movs	r2, #18
   17f88:	2101      	movs	r1, #1
   17f8a:	4630      	mov	r0, r6
   17f8c:	f010 fe85 	bl	28c9a <meta_evt>
   17f90:	4605      	mov	r5, r0
	if (status) {
   17f92:	f1b8 0f00 	cmp.w	r8, #0
   17f96:	d006      	beq.n	17fa6 <hci_evt_encode+0x1ee>
		(void)memset(lecc, 0x00, sizeof(*lecc));
   17f98:	2212      	movs	r2, #18
   17f9a:	2100      	movs	r1, #0
   17f9c:	f00e f90a 	bl	261b4 <memset>
		lecc->status = status;
   17fa0:	f885 8000 	strb.w	r8, [r5]
		return;
   17fa4:	e79c      	b.n	17ee0 <hci_evt_encode+0x128>
	lecc->status = 0x00;
   17fa6:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   17faa:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   17fae:	7f63      	ldrb	r3, [r4, #29]
   17fb0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   17fb2:	7fa3      	ldrb	r3, [r4, #30]
   17fb4:	f003 0301 	and.w	r3, r3, #1
   17fb8:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   17fba:	2206      	movs	r2, #6
   17fbc:	f104 011f 	add.w	r1, r4, #31
   17fc0:	3005      	adds	r0, #5
   17fc2:	f00e f8cd 	bl	26160 <memcpy>
	lecc->interval = sys_cpu_to_le16(cc->interval);
   17fc6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   17fc8:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(cc->latency);
   17fcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   17fce:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   17fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   17fd4:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   17fd8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   17fdc:	746b      	strb	r3, [r5, #17]
   17fde:	e77f      	b.n	17ee0 <hci_evt_encode+0x128>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   17fe0:	460a      	mov	r2, r1
   17fe2:	4639      	mov	r1, r7
}
   17fe4:	b006      	add	sp, #24
   17fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   17fea:	f7ff be85 	b.w	17cf8 <hci_disconn_complete_encode>
	switch (pdu_data->llctrl.opcode) {
   17fee:	7fe3      	ldrb	r3, [r4, #31]
   17ff0:	2b09      	cmp	r3, #9
   17ff2:	d00c      	beq.n	1800e <hci_evt_encode+0x256>
   17ff4:	2b0f      	cmp	r3, #15
   17ff6:	d013      	beq.n	18020 <hci_evt_encode+0x268>
   17ff8:	2b07      	cmp	r3, #7
   17ffa:	d140      	bne.n	1807e <hci_evt_encode+0x2c6>
		le_unknown_rsp(pdu_data, handle, buf);
   17ffc:	f894 2020 	ldrb.w	r2, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   18000:	2a0e      	cmp	r2, #14
   18002:	d135      	bne.n	18070 <hci_evt_encode+0x2b8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   18004:	460b      	mov	r3, r1
   18006:	463a      	mov	r2, r7
   18008:	2100      	movs	r1, #0
   1800a:	201a      	movs	r0, #26
   1800c:	e003      	b.n	18016 <hci_evt_encode+0x25e>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1800e:	460b      	mov	r3, r1
   18010:	463a      	mov	r2, r7
   18012:	4601      	mov	r1, r0
   18014:	2000      	movs	r0, #0
}
   18016:	b006      	add	sp, #24
   18018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1801c:	f7ff bad6 	b.w	175cc <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   18020:	4b1a      	ldr	r3, [pc, #104]	; (1808c <hci_evt_encode+0x2d4>)
   18022:	6858      	ldr	r0, [r3, #4]
   18024:	2100      	movs	r1, #0
   18026:	460a      	mov	r2, r1
   18028:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   1802c:	4313      	orrs	r3, r2
   1802e:	d006      	beq.n	1803e <hci_evt_encode+0x286>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   18030:	4b17      	ldr	r3, [pc, #92]	; (18090 <hci_evt_encode+0x2d8>)
   18032:	6818      	ldr	r0, [r3, #0]
   18034:	460b      	mov	r3, r1
   18036:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1803a:	4313      	orrs	r3, r2
   1803c:	d109      	bne.n	18052 <hci_evt_encode+0x29a>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1803e:	2300      	movs	r3, #0
   18040:	e9cd 3301 	strd	r3, r3, [sp, #4]
   18044:	9300      	str	r3, [sp, #0]
   18046:	221a      	movs	r2, #26
   18048:	2102      	movs	r1, #2
   1804a:	4638      	mov	r0, r7
   1804c:	f010 ffbc 	bl	28fc8 <ll_conn_update>
		return;
   18050:	e746      	b.n	17ee0 <hci_evt_encode+0x128>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   18052:	220a      	movs	r2, #10
   18054:	2106      	movs	r1, #6
   18056:	4630      	mov	r0, r6
   18058:	f010 fe1f 	bl	28c9a <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   1805c:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1805e:	8c23      	ldrh	r3, [r4, #32]
   18060:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   18062:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   18064:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   18066:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   18068:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1806a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1806c:	8103      	strh	r3, [r0, #8]
   1806e:	e737      	b.n	17ee0 <hci_evt_encode+0x128>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   18070:	480a      	ldr	r0, [pc, #40]	; (1809c <hci_evt_encode+0x2e4>)
   18072:	2157      	movs	r1, #87	; 0x57
}
   18074:	b006      	add	sp, #24
   18076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1807a:	f00c b8df 	b.w	2423c <printk>
		LL_ASSERT(0);
   1807e:	f241 723f 	movw	r2, #5951	; 0x173f
   18082:	e6ad      	b.n	17de0 <hci_evt_encode+0x28>
   18084:	00030bb1 	.word	0x00030bb1
   18088:	0002bced 	.word	0x0002bced
   1808c:	20000378 	.word	0x20000378
   18090:	20000380 	.word	0x20000380
   18094:	ff030100 	.word	0xff030100
   18098:	20002598 	.word	0x20002598
   1809c:	00030c92 	.word	0x00030c92

000180a0 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   180a0:	4b07      	ldr	r3, [pc, #28]	; (180c0 <hci_init+0x20>)
   180a2:	f04f 30ff 	mov.w	r0, #4294967295
   180a6:	f641 71ff 	movw	r1, #8191	; 0x1fff
   180aa:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   180ae:	4b05      	ldr	r3, [pc, #20]	; (180c4 <hci_init+0x24>)
   180b0:	201f      	movs	r0, #31
   180b2:	2100      	movs	r1, #0
   180b4:	e9c3 0100 	strd	r0, r1, [r3]
	conn_count = 0U;
   180b8:	4b03      	ldr	r3, [pc, #12]	; (180c8 <hci_init+0x28>)
   180ba:	2200      	movs	r2, #0
   180bc:	601a      	str	r2, [r3, #0]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   180be:	4770      	bx	lr
   180c0:	20000378 	.word	0x20000378
   180c4:	20000380 	.word	0x20000380
   180c8:	20002598 	.word	0x20002598

000180cc <ll_rx_link_inc_quota>:
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   180cc:	2801      	cmp	r0, #1
{
   180ce:	b538      	push	{r3, r4, r5, lr}
   180d0:	4604      	mov	r4, r0
   180d2:	4d0a      	ldr	r5, [pc, #40]	; (180fc <ll_rx_link_inc_quota+0x30>)
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   180d4:	d10e      	bne.n	180f4 <ll_rx_link_inc_quota+0x28>
   180d6:	782b      	ldrb	r3, [r5, #0]
   180d8:	2b05      	cmp	r3, #5
   180da:	d90b      	bls.n	180f4 <ll_rx_link_inc_quota+0x28>
   180dc:	f240 42a9 	movw	r2, #1193	; 0x4a9
   180e0:	4907      	ldr	r1, [pc, #28]	; (18100 <ll_rx_link_inc_quota+0x34>)
   180e2:	4808      	ldr	r0, [pc, #32]	; (18104 <ll_rx_link_inc_quota+0x38>)
   180e4:	f00c f8aa 	bl	2423c <printk>
   180e8:	4040      	eors	r0, r0
   180ea:	f380 8811 	msr	BASEPRI, r0
   180ee:	f04f 0003 	mov.w	r0, #3
   180f2:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   180f4:	782b      	ldrb	r3, [r5, #0]
   180f6:	441c      	add	r4, r3
   180f8:	702c      	strb	r4, [r5, #0]
}
   180fa:	bd38      	pop	{r3, r4, r5, pc}
   180fc:	20002688 	.word	0x20002688
   18100:	00030cd1 	.word	0x00030cd1
   18104:	0002bced 	.word	0x0002bced

00018108 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   18108:	b510      	push	{r4, lr}
   1810a:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   1810c:	f011 f8af 	bl	2926e <lll_reset>
	LL_ASSERT(!err);
   18110:	b158      	cbz	r0, 1812a <perform_lll_reset+0x22>
   18112:	f240 6279 	movw	r2, #1657	; 0x679
   18116:	491e      	ldr	r1, [pc, #120]	; (18190 <perform_lll_reset+0x88>)
   18118:	481e      	ldr	r0, [pc, #120]	; (18194 <perform_lll_reset+0x8c>)
   1811a:	f00c f88f 	bl	2423c <printk>
   1811e:	4040      	eors	r0, r0
   18120:	f380 8811 	msr	BASEPRI, r0
   18124:	f04f 0003 	mov.w	r0, #3
   18128:	df02      	svc	2

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   1812a:	f011 f90a 	bl	29342 <lll_adv_reset>
	LL_ASSERT(!err);
   1812e:	b158      	cbz	r0, 18148 <perform_lll_reset+0x40>
   18130:	f240 627e 	movw	r2, #1662	; 0x67e
   18134:	4916      	ldr	r1, [pc, #88]	; (18190 <perform_lll_reset+0x88>)
   18136:	4817      	ldr	r0, [pc, #92]	; (18194 <perform_lll_reset+0x8c>)
   18138:	f00c f880 	bl	2423c <printk>
   1813c:	4040      	eors	r0, r0
   1813e:	f380 8811 	msr	BASEPRI, r0
   18142:	f04f 0003 	mov.w	r0, #3
   18146:	df02      	svc	2
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   18148:	f011 fa2d 	bl	295a6 <lll_scan_reset>
	LL_ASSERT(!err);
   1814c:	b158      	cbz	r0, 18166 <perform_lll_reset+0x5e>
   1814e:	f240 6284 	movw	r2, #1668	; 0x684
   18152:	490f      	ldr	r1, [pc, #60]	; (18190 <perform_lll_reset+0x88>)
   18154:	480f      	ldr	r0, [pc, #60]	; (18194 <perform_lll_reset+0x8c>)
   18156:	f00c f871 	bl	2423c <printk>
   1815a:	4040      	eors	r0, r0
   1815c:	f380 8811 	msr	BASEPRI, r0
   18160:	f04f 0003 	mov.w	r0, #3
   18164:	df02      	svc	2
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   18166:	f011 fa2a 	bl	295be <lll_conn_reset>
	LL_ASSERT(!err);
   1816a:	b158      	cbz	r0, 18184 <perform_lll_reset+0x7c>
   1816c:	f240 628a 	movw	r2, #1674	; 0x68a
   18170:	4907      	ldr	r1, [pc, #28]	; (18190 <perform_lll_reset+0x88>)
   18172:	4808      	ldr	r0, [pc, #32]	; (18194 <perform_lll_reset+0x8c>)
   18174:	f00c f862 	bl	2423c <printk>
   18178:	4040      	eors	r0, r0
   1817a:	f380 8811 	msr	BASEPRI, r0
   1817e:	f04f 0003 	mov.w	r0, #3
   18182:	df02      	svc	2
	z_impl_k_sem_give(sem);
   18184:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   18186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1818a:	f009 be7f 	b.w	21e8c <z_impl_k_sem_give>
   1818e:	bf00      	nop
   18190:	00030cd1 	.word	0x00030cd1
   18194:	0002bced 	.word	0x0002bced

00018198 <rx_alloc>:

	return done;
}

static inline void rx_alloc(uint8_t max)
{
   18198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx;

	if (max > mem_link_rx.quota_pdu) {
   1819c:	4e37      	ldr	r6, [pc, #220]	; (1827c <rx_alloc+0xe4>)
		max = mem_link_rx.quota_pdu;
	}

	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1819e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 18288 <rx_alloc+0xf0>
   181a2:	7834      	ldrb	r4, [r6, #0]
   181a4:	4284      	cmp	r4, r0
   181a6:	bf28      	it	cs
   181a8:	4604      	movcs	r4, r0
   181aa:	3c01      	subs	r4, #1
   181ac:	b2e4      	uxtb	r4, r4
		memq_link_t *link;
		struct node_rx_hdr *rx;

		link = mem_acquire(&mem_link_rx.free);
   181ae:	f106 0904 	add.w	r9, r6, #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   181b2:	2cff      	cmp	r4, #255	; 0xff
   181b4:	d030      	beq.n	18218 <rx_alloc+0x80>
 */
static inline bool mfifo_enqueue_idx_get(uint8_t count, uint8_t first, uint8_t last,
					 uint8_t *idx)
{
	/* Non-destructive: Advance write-index modulo 'count' */
	last = last + 1;
   181b6:	f898 5003 	ldrb.w	r5, [r8, #3]
	if (last == count) {
   181ba:	f898 2001 	ldrb.w	r2, [r8, #1]
   181be:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   181c2:	3501      	adds	r5, #1
   181c4:	b2ed      	uxtb	r5, r5
		last = 0U;
   181c6:	42aa      	cmp	r2, r5
   181c8:	bf08      	it	eq
   181ca:	2500      	moveq	r5, #0
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
   181cc:	42ab      	cmp	r3, r5
   181ce:	d021      	beq.n	18214 <rx_alloc+0x7c>
		link = mem_acquire(&mem_link_rx.free);
   181d0:	4648      	mov	r0, r9
   181d2:	f010 fa61 	bl	28698 <mem_acquire>
		if (!link) {
   181d6:	4607      	mov	r7, r0
   181d8:	b908      	cbnz	r0, 181de <rx_alloc+0x46>
		MFIFO_BY_IDX_ENQUEUE(ll_pdu_rx_free, idx, rx);

		ll_rx_link_inc_quota(-1);
	}
#endif /* CONFIG_BT_CONN */
}
   181da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx = mem_acquire(&mem_pdu_rx.free);
   181de:	4828      	ldr	r0, [pc, #160]	; (18280 <rx_alloc+0xe8>)
   181e0:	f010 fa5a 	bl	28698 <mem_acquire>
		if (!rx) {
   181e4:	3c01      	subs	r4, #1
   181e6:	b2e4      	uxtb	r4, r4
   181e8:	b928      	cbnz	r0, 181f6 <rx_alloc+0x5e>
			mem_release(link, &mem_link_rx.free);
   181ea:	4926      	ldr	r1, [pc, #152]	; (18284 <rx_alloc+0xec>)
   181ec:	4638      	mov	r0, r7
}
   181ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &mem_link_rx.free);
   181f2:	f010 ba6a 	b.w	286ca <mem_release>
		rx->link = link;
   181f6:	6007      	str	r7, [r0, #0]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   181f8:	f898 2003 	ldrb.w	r2, [r8, #3]
   181fc:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   18200:	fb02 8303 	mla	r3, r2, r3, r8
   18204:	6058      	str	r0, [r3, #4]

	*last = idx; /* Commit: Update write index */
   18206:	f888 5003 	strb.w	r5, [r8, #3]
		ll_rx_link_inc_quota(-1);
   1820a:	f04f 30ff 	mov.w	r0, #4294967295
   1820e:	f7ff ff5d 	bl	180cc <ll_rx_link_inc_quota>
   18212:	e7ce      	b.n	181b2 <rx_alloc+0x1a>
	if (!max) {
   18214:	2c00      	cmp	r4, #0
   18216:	d0e0      	beq.n	181da <rx_alloc+0x42>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   18218:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1828c <rx_alloc+0xf4>
		link = mem_acquire(&mem_link_rx.free);
   1821c:	4f19      	ldr	r7, [pc, #100]	; (18284 <rx_alloc+0xec>)
   1821e:	e00f      	b.n	18240 <rx_alloc+0xa8>
		link->mem = NULL;
   18220:	2300      	movs	r3, #0
   18222:	606b      	str	r3, [r5, #4]
		rx->link = link;
   18224:	6005      	str	r5, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18226:	f898 2003 	ldrb.w	r2, [r8, #3]
   1822a:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1822e:	fb02 8303 	mla	r3, r2, r3, r8
   18232:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   18234:	f888 4003 	strb.w	r4, [r8, #3]
		ll_rx_link_inc_quota(-1);
   18238:	f04f 30ff 	mov.w	r0, #4294967295
   1823c:	f7ff ff46 	bl	180cc <ll_rx_link_inc_quota>
	while (mem_link_rx.quota_pdu &&
   18240:	7833      	ldrb	r3, [r6, #0]
   18242:	2b00      	cmp	r3, #0
   18244:	d0c9      	beq.n	181da <rx_alloc+0x42>
	last = last + 1;
   18246:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == count) {
   1824a:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1824e:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   18252:	3401      	adds	r4, #1
   18254:	b2e4      	uxtb	r4, r4
		last = 0U;
   18256:	42a2      	cmp	r2, r4
   18258:	bf08      	it	eq
   1825a:	2400      	moveq	r4, #0
	if (last == first) {
   1825c:	429c      	cmp	r4, r3
   1825e:	d0bc      	beq.n	181da <rx_alloc+0x42>
		link = mem_acquire(&mem_link_rx.free);
   18260:	4638      	mov	r0, r7
   18262:	f010 fa19 	bl	28698 <mem_acquire>
		if (!link) {
   18266:	4605      	mov	r5, r0
   18268:	2800      	cmp	r0, #0
   1826a:	d0b6      	beq.n	181da <rx_alloc+0x42>
		rx = mem_acquire(&mem_pdu_rx.free);
   1826c:	4804      	ldr	r0, [pc, #16]	; (18280 <rx_alloc+0xe8>)
   1826e:	f010 fa13 	bl	28698 <mem_acquire>
		if (!rx) {
   18272:	2800      	cmp	r0, #0
   18274:	d1d4      	bne.n	18220 <rx_alloc+0x88>
			mem_release(link, &mem_link_rx.free);
   18276:	4903      	ldr	r1, [pc, #12]	; (18284 <rx_alloc+0xec>)
   18278:	4628      	mov	r0, r5
   1827a:	e7b8      	b.n	181ee <rx_alloc+0x56>
   1827c:	20002688 	.word	0x20002688
   18280:	200026e0 	.word	0x200026e0
   18284:	2000268c 	.word	0x2000268c
   18288:	200007dc 	.word	0x200007dc
   1828c:	200007cc 	.word	0x200007cc

00018290 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   18290:	4b39      	ldr	r3, [pc, #228]	; (18378 <init_reset+0xe8>)
{
   18292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   18296:	1d18      	adds	r0, r3, #4
   18298:	2203      	movs	r2, #3
   1829a:	2134      	movs	r1, #52	; 0x34
   1829c:	f010 f9d8 	bl	28650 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   182a0:	4b36      	ldr	r3, [pc, #216]	; (1837c <init_reset+0xec>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   182a2:	4d37      	ldr	r5, [pc, #220]	; (18380 <init_reset+0xf0>)
		link = mem_acquire(&mem_link_done.free);
   182a4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 1837c <init_reset+0xec>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   182a8:	2203      	movs	r2, #3
   182aa:	2108      	movs	r1, #8
   182ac:	1d18      	adds	r0, r3, #4
   182ae:	f010 f9cf 	bl	28650 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   182b2:	462e      	mov	r6, r5
	last = last + 1;
   182b4:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   182b6:	786a      	ldrb	r2, [r5, #1]
   182b8:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   182ba:	3401      	adds	r4, #1
   182bc:	b2e4      	uxtb	r4, r4
		last = 0U;
   182be:	42a2      	cmp	r2, r4
   182c0:	bf08      	it	eq
   182c2:	2400      	moveq	r4, #0
	if (last == first) {
   182c4:	429c      	cmp	r4, r3
   182c6:	d00d      	beq.n	182e4 <init_reset+0x54>
		link = mem_acquire(&mem_link_done.free);
   182c8:	4640      	mov	r0, r8
   182ca:	f010 f9e5 	bl	28698 <mem_acquire>
		if (!link) {
   182ce:	4607      	mov	r7, r0
   182d0:	b140      	cbz	r0, 182e4 <init_reset+0x54>
		rx = mem_acquire(&mem_done.free);
   182d2:	4829      	ldr	r0, [pc, #164]	; (18378 <init_reset+0xe8>)
   182d4:	f010 f9e0 	bl	28698 <mem_acquire>
		if (!rx) {
   182d8:	2800      	cmp	r0, #0
   182da:	d144      	bne.n	18366 <init_reset+0xd6>
			mem_release(link, &mem_link_done.free);
   182dc:	4927      	ldr	r1, [pc, #156]	; (1837c <init_reset+0xec>)
   182de:	4638      	mov	r0, r7
   182e0:	f010 f9f3 	bl	286ca <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   182e4:	4b27      	ldr	r3, [pc, #156]	; (18384 <init_reset+0xf4>)
   182e6:	2208      	movs	r2, #8
   182e8:	1d18      	adds	r0, r3, #4
   182ea:	2148      	movs	r1, #72	; 0x48
   182ec:	f010 f9b0 	bl	28650 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   182f0:	4b25      	ldr	r3, [pc, #148]	; (18388 <init_reset+0xf8>)
   182f2:	220a      	movs	r2, #10
   182f4:	1d18      	adds	r0, r3, #4
   182f6:	2108      	movs	r1, #8
   182f8:	f010 f9aa 	bl	28650 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   182fc:	4822      	ldr	r0, [pc, #136]	; (18388 <init_reset+0xf8>)
   182fe:	f010 f9cb 	bl	28698 <mem_acquire>
	LL_ASSERT(link);
   18302:	4604      	mov	r4, r0
   18304:	b958      	cbnz	r0, 1831e <init_reset+0x8e>
   18306:	f44f 62cc 	mov.w	r2, #1632	; 0x660
   1830a:	4920      	ldr	r1, [pc, #128]	; (1838c <init_reset+0xfc>)
   1830c:	4820      	ldr	r0, [pc, #128]	; (18390 <init_reset+0x100>)
   1830e:	f00b ff95 	bl	2423c <printk>
   18312:	4040      	eors	r0, r0
   18314:	f380 8811 	msr	BASEPRI, r0
   18318:	f04f 0003 	mov.w	r0, #3
   1831c:	df02      	svc	2
	MEMQ_INIT(ull_rx, link);
   1831e:	4a1d      	ldr	r2, [pc, #116]	; (18394 <init_reset+0x104>)
   18320:	4620      	mov	r0, r4
   18322:	1f11      	subs	r1, r2, #4
   18324:	f010 fa08 	bl	28738 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   18328:	4817      	ldr	r0, [pc, #92]	; (18388 <init_reset+0xf8>)
   1832a:	f010 f9b5 	bl	28698 <mem_acquire>
	LL_ASSERT(link);
   1832e:	4604      	mov	r4, r0
   18330:	b958      	cbnz	r0, 1834a <init_reset+0xba>
   18332:	f240 6267 	movw	r2, #1639	; 0x667
   18336:	4915      	ldr	r1, [pc, #84]	; (1838c <init_reset+0xfc>)
   18338:	4815      	ldr	r0, [pc, #84]	; (18390 <init_reset+0x100>)
   1833a:	f00b ff7f 	bl	2423c <printk>
   1833e:	4040      	eors	r0, r0
   18340:	f380 8811 	msr	BASEPRI, r0
   18344:	f04f 0003 	mov.w	r0, #3
   18348:	df02      	svc	2
	MEMQ_INIT(ll_rx, link);
   1834a:	4a13      	ldr	r2, [pc, #76]	; (18398 <init_reset+0x108>)
   1834c:	4620      	mov	r0, r4
   1834e:	1f11      	subs	r1, r2, #4
   18350:	f010 f9f2 	bl	28738 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   18354:	4b11      	ldr	r3, [pc, #68]	; (1839c <init_reset+0x10c>)
   18356:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   18358:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   1835a:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   1835c:	f7ff ff1c 	bl	18198 <rx_alloc>
}
   18360:	2000      	movs	r0, #0
   18362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx->link = link;
   18366:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18368:	78f2      	ldrb	r2, [r6, #3]
   1836a:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1836c:	fb02 6303 	mla	r3, r2, r3, r6
   18370:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   18372:	70f4      	strb	r4, [r6, #3]
   18374:	e79e      	b.n	182b4 <init_reset+0x24>
   18376:	bf00      	nop
   18378:	200025cc 	.word	0x200025cc
   1837c:	2000266c 	.word	0x2000266c
   18380:	200007b8 	.word	0x200007b8
   18384:	200026e0 	.word	0x200026e0
   18388:	2000268c 	.word	0x2000268c
   1838c:	00030cd1 	.word	0x00030cd1
   18390:	0002bced 	.word	0x0002bced
   18394:	20002930 	.word	0x20002930
   18398:	20002928 	.word	0x20002928
   1839c:	20002688 	.word	0x20002688

000183a0 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   183a0:	6008      	str	r0, [r1, #0]
   183a2:	4801      	ldr	r0, [pc, #4]	; (183a8 <ull_ticker_status_give+0x8>)
   183a4:	f009 bd72 	b.w	21e8c <z_impl_k_sem_give>
   183a8:	20002938 	.word	0x20002938

000183ac <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   183ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   183b0:	460d      	mov	r5, r1
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   183b2:	4e28      	ldr	r6, [pc, #160]	; (18454 <tx_cmplt_get+0xa8>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   183b4:	782b      	ldrb	r3, [r5, #0]
   183b6:	7871      	ldrb	r1, [r6, #1]
   183b8:	428b      	cmp	r3, r1
   183ba:	bf28      	it	cs
   183bc:	78b3      	ldrbcs	r3, [r6, #2]
{
   183be:	4680      	mov	r8, r0
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   183c0:	7830      	ldrb	r0, [r6, #0]
		*idx = first;
   183c2:	bf28      	it	cs
   183c4:	702b      	strbcs	r3, [r5, #0]
	}

	if (*idx == last) {
   183c6:	782b      	ldrb	r3, [r5, #0]
   183c8:	429a      	cmp	r2, r3
{
   183ca:	4691      	mov	r9, r2
   183cc:	d103      	bne.n	183d6 <tx_cmplt_get+0x2a>
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
		return 0;
   183ce:	2700      	movs	r7, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);

	return cmplt;
}
   183d0:	4638      	mov	r0, r7
   183d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
	}

	i = *idx + 1;
   183d6:	1c5a      	adds	r2, r3, #1
   183d8:	b2d2      	uxtb	r2, r2
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   183da:	4c1f      	ldr	r4, [pc, #124]	; (18458 <tx_cmplt_get+0xac>)
		i = 0U;
   183dc:	4291      	cmp	r1, r2
   183de:	bf08      	it	eq
   183e0:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   183e2:	fb13 f300 	smulbb	r3, r3, r0

	*idx = i;
   183e6:	702a      	strb	r2, [r5, #0]
	if (!tx) {
   183e8:	18e2      	adds	r2, r4, r3
   183ea:	d0f0      	beq.n	183ce <tx_cmplt_get+0x22>
	*handle = tx->handle;
   183ec:	5ae3      	ldrh	r3, [r4, r3]
   183ee:	f8a8 3000 	strh.w	r3, [r8]
	cmplt = 0U;
   183f2:	2700      	movs	r7, #0
		node_tx = tx->node;
   183f4:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   183f6:	2801      	cmp	r0, #1
   183f8:	f020 0103 	bic.w	r1, r0, #3
   183fc:	d906      	bls.n	1840c <tx_cmplt_get+0x60>
   183fe:	b331      	cbz	r1, 1844e <tx_cmplt_get+0xa2>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   18400:	7903      	ldrb	r3, [r0, #4]
   18402:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   18406:	3b01      	subs	r3, #1
   18408:	2b01      	cmp	r3, #1
   1840a:	d820      	bhi.n	1844e <tx_cmplt_get+0xa2>
			cmplt++;
   1840c:	3701      	adds	r7, #1
   1840e:	b2ff      	uxtb	r7, r7
			tx->node = (void *)1;
   18410:	2301      	movs	r3, #1
   18412:	6053      	str	r3, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   18414:	b109      	cbz	r1, 1841a <tx_cmplt_get+0x6e>
			ll_tx_mem_release(node_tx);
   18416:	f001 fb5b 	bl	19ad0 <ll_tx_mem_release>
	if (*idx >= count) {
   1841a:	782b      	ldrb	r3, [r5, #0]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1841c:	7872      	ldrb	r2, [r6, #1]
   1841e:	7830      	ldrb	r0, [r6, #0]
   18420:	4293      	cmp	r3, r2
   18422:	bf24      	itt	cs
   18424:	78b3      	ldrbcs	r3, [r6, #2]
		*idx = first;
   18426:	702b      	strbcs	r3, [r5, #0]
	if (*idx == last) {
   18428:	782b      	ldrb	r3, [r5, #0]
   1842a:	4599      	cmp	r9, r3
   1842c:	d0d0      	beq.n	183d0 <tx_cmplt_get+0x24>
	i = *idx + 1;
   1842e:	1c59      	adds	r1, r3, #1
   18430:	b2c9      	uxtb	r1, r1
	p = (void *)(fifo + (*idx) * size);
   18432:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   18436:	428a      	cmp	r2, r1
   18438:	bf08      	it	eq
   1843a:	2100      	moveq	r1, #0
	} while (tx && tx->handle == *handle);
   1843c:	18e2      	adds	r2, r4, r3
	*idx = i;
   1843e:	7029      	strb	r1, [r5, #0]
   18440:	d0c6      	beq.n	183d0 <tx_cmplt_get+0x24>
   18442:	5ae3      	ldrh	r3, [r4, r3]
   18444:	f8b8 1000 	ldrh.w	r1, [r8]
   18448:	4299      	cmp	r1, r3
   1844a:	d0d3      	beq.n	183f4 <tx_cmplt_get+0x48>
   1844c:	e7c0      	b.n	183d0 <tx_cmplt_get+0x24>
			tx->node = (void *)2;
   1844e:	2302      	movs	r3, #2
   18450:	e7df      	b.n	18412 <tx_cmplt_get+0x66>
   18452:	bf00      	nop
   18454:	20000918 	.word	0x20000918
   18458:	2000091c 	.word	0x2000091c

0001845c <ll_init>:
{
   1845c:	b510      	push	{r4, lr}
	sem_recv = sem_rx;
   1845e:	4b2b      	ldr	r3, [pc, #172]	; (1850c <ll_init+0xb0>)
{
   18460:	b086      	sub	sp, #24
	sem_recv = sem_rx;
   18462:	6018      	str	r0, [r3, #0]
	cntr_init();
   18464:	f004 f9a4 	bl	1c7b0 <cntr_init>
	mayfly_init();
   18468:	f7fe f8aa 	bl	165c0 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1846c:	4a28      	ldr	r2, [pc, #160]	; (18510 <ll_init+0xb4>)
   1846e:	2103      	movs	r1, #3
   18470:	7011      	strb	r1, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   18472:	7611      	strb	r1, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   18474:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   18476:	4927      	ldr	r1, [pc, #156]	; (18514 <ll_init+0xb8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   18478:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1847a:	2304      	movs	r3, #4
   1847c:	7213      	strb	r3, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1847e:	9105      	str	r1, [sp, #20]
   18480:	4925      	ldr	r1, [pc, #148]	; (18518 <ll_init+0xbc>)
   18482:	9104      	str	r1, [sp, #16]
   18484:	4925      	ldr	r1, [pc, #148]	; (1851c <ll_init+0xc0>)
   18486:	9103      	str	r1, [sp, #12]
   18488:	4925      	ldr	r1, [pc, #148]	; (18520 <ll_init+0xc4>)
   1848a:	9102      	str	r1, [sp, #8]
   1848c:	210c      	movs	r1, #12
   1848e:	e9cd 2100 	strd	r2, r1, [sp]
   18492:	2000      	movs	r0, #0
   18494:	4a23      	ldr	r2, [pc, #140]	; (18524 <ll_init+0xc8>)
   18496:	2108      	movs	r1, #8
   18498:	f7fe fdca 	bl	17030 <ticker_init>
	LL_ASSERT(!err);
   1849c:	b158      	cbz	r0, 184b6 <ll_init+0x5a>
   1849e:	f240 126d 	movw	r2, #365	; 0x16d
   184a2:	4921      	ldr	r1, [pc, #132]	; (18528 <ll_init+0xcc>)
   184a4:	4821      	ldr	r0, [pc, #132]	; (1852c <ll_init+0xd0>)
   184a6:	f00b fec9 	bl	2423c <printk>
   184aa:	4040      	eors	r0, r0
   184ac:	f380 8811 	msr	BASEPRI, r0
   184b0:	f04f 0003 	mov.w	r0, #3
   184b4:	df02      	svc	2
	return z_impl_k_sem_init(sem, initial_count, limit);
   184b6:	2201      	movs	r2, #1
   184b8:	2100      	movs	r1, #0
   184ba:	481d      	ldr	r0, [pc, #116]	; (18530 <ll_init+0xd4>)
   184bc:	f011 ff0b 	bl	2a2d6 <z_impl_k_sem_init>
	err = lll_init();
   184c0:	f002 fde4 	bl	1b08c <lll_init>
	if (err) {
   184c4:	4604      	mov	r4, r0
   184c6:	b9f0      	cbnz	r0, 18506 <ll_init+0xaa>
	err = init_reset();
   184c8:	f7ff fee2 	bl	18290 <init_reset>
	if (err) {
   184cc:	4604      	mov	r4, r0
   184ce:	b9d0      	cbnz	r0, 18506 <ll_init+0xaa>
	err = lll_adv_init();
   184d0:	f003 f86a 	bl	1b5a8 <lll_adv_init>
	if (err) {
   184d4:	4604      	mov	r4, r0
   184d6:	b9b0      	cbnz	r0, 18506 <ll_init+0xaa>
	err = ull_adv_init();
   184d8:	f010 fc66 	bl	28da8 <ull_adv_init>
	if (err) {
   184dc:	4604      	mov	r4, r0
   184de:	b990      	cbnz	r0, 18506 <ll_init+0xaa>
	err = lll_scan_init();
   184e0:	f011 f85f 	bl	295a2 <lll_scan_init>
	if (err) {
   184e4:	4604      	mov	r4, r0
   184e6:	b970      	cbnz	r0, 18506 <ll_init+0xaa>
	err = ull_scan_init();
   184e8:	f010 fcad 	bl	28e46 <ull_scan_init>
	if (err) {
   184ec:	4604      	mov	r4, r0
   184ee:	b950      	cbnz	r0, 18506 <ll_init+0xaa>
	err = lll_conn_init();
   184f0:	f011 f85b 	bl	295aa <lll_conn_init>
	if (err) {
   184f4:	4604      	mov	r4, r0
   184f6:	b930      	cbnz	r0, 18506 <ll_init+0xaa>
	err = ull_conn_init();
   184f8:	f010 fe5c 	bl	291b4 <ull_conn_init>
	if (err) {
   184fc:	4604      	mov	r4, r0
   184fe:	b910      	cbnz	r0, 18506 <ll_init+0xaa>
		ull_filter_reset(true);
   18500:	2001      	movs	r0, #1
   18502:	f002 fc37 	bl	1ad74 <ull_filter_reset>
}
   18506:	4620      	mov	r0, r4
   18508:	b006      	add	sp, #24
   1850a:	bd10      	pop	{r4, pc}
   1850c:	20002934 	.word	0x20002934
   18510:	20002d40 	.word	0x20002d40
   18514:	0002978f 	.word	0x0002978f
   18518:	0001d08d 	.word	0x0001d08d
   1851c:	0001d041 	.word	0x0001d041
   18520:	20002ad0 	.word	0x20002ad0
   18524:	20002950 	.word	0x20002950
   18528:	00030cd1 	.word	0x00030cd1
   1852c:	0002bced 	.word	0x0002bced
   18530:	20002938 	.word	0x20002938

00018534 <ll_reset>:
{
   18534:	b510      	push	{r4, lr}
   18536:	b086      	sub	sp, #24
	err = ull_adv_reset();
   18538:	f010 fc3b 	bl	28db2 <ull_adv_reset>
	LL_ASSERT(!err);
   1853c:	b158      	cbz	r0, 18556 <ll_reset+0x22>
   1853e:	f240 12f9 	movw	r2, #505	; 0x1f9
   18542:	493b      	ldr	r1, [pc, #236]	; (18630 <ll_reset+0xfc>)
   18544:	483b      	ldr	r0, [pc, #236]	; (18634 <ll_reset+0x100>)
   18546:	f00b fe79 	bl	2423c <printk>
   1854a:	4040      	eors	r0, r0
   1854c:	f380 8811 	msr	BASEPRI, r0
   18550:	f04f 0003 	mov.w	r0, #3
   18554:	df02      	svc	2
	err = ull_scan_reset();
   18556:	f010 fc8c 	bl	28e72 <ull_scan_reset>
	LL_ASSERT(!err);
   1855a:	b158      	cbz	r0, 18574 <ll_reset+0x40>
   1855c:	f240 12ff 	movw	r2, #511	; 0x1ff
   18560:	4933      	ldr	r1, [pc, #204]	; (18630 <ll_reset+0xfc>)
   18562:	4834      	ldr	r0, [pc, #208]	; (18634 <ll_reset+0x100>)
   18564:	f00b fe6a 	bl	2423c <printk>
   18568:	4040      	eors	r0, r0
   1856a:	f380 8811 	msr	BASEPRI, r0
   1856e:	f04f 0003 	mov.w	r0, #3
   18572:	df02      	svc	2
	err = ull_conn_reset();
   18574:	f001 faee 	bl	19b54 <ull_conn_reset>
	LL_ASSERT(!err);
   18578:	b158      	cbz	r0, 18592 <ll_reset+0x5e>
   1857a:	f240 2239 	movw	r2, #569	; 0x239
   1857e:	492c      	ldr	r1, [pc, #176]	; (18630 <ll_reset+0xfc>)
   18580:	482c      	ldr	r0, [pc, #176]	; (18634 <ll_reset+0x100>)
   18582:	f00b fe5b 	bl	2423c <printk>
   18586:	4040      	eors	r0, r0
   18588:	f380 8811 	msr	BASEPRI, r0
   1858c:	f04f 0003 	mov.w	r0, #3
   18590:	df02      	svc	2
	MFIFO_INIT(tx_ack);
   18592:	4b29      	ldr	r3, [pc, #164]	; (18638 <ll_reset+0x104>)
   18594:	2400      	movs	r4, #0
   18596:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   18598:	4620      	mov	r0, r4
   1859a:	f002 fbeb 	bl	1ad74 <ull_filter_reset>
	MFIFO_INIT(prep);
   1859e:	4b27      	ldr	r3, [pc, #156]	; (1863c <ll_reset+0x108>)
   185a0:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(done);
   185a2:	4b27      	ldr	r3, [pc, #156]	; (18640 <ll_reset+0x10c>)
   185a4:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   185a6:	4b27      	ldr	r3, [pc, #156]	; (18644 <ll_reset+0x110>)
   185a8:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   185aa:	4b27      	ldr	r3, [pc, #156]	; (18648 <ll_reset+0x114>)
   185ac:	805c      	strh	r4, [r3, #2]
   185ae:	2201      	movs	r2, #1
   185b0:	4621      	mov	r1, r4
   185b2:	4668      	mov	r0, sp
   185b4:	f011 fe8f 	bl	2a2d6 <z_impl_k_sem_init>
		mfy.param = &sem;
   185b8:	4b24      	ldr	r3, [pc, #144]	; (1864c <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   185ba:	4622      	mov	r2, r4
   185bc:	4621      	mov	r1, r4
   185be:	2003      	movs	r0, #3
		mfy.param = &sem;
   185c0:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   185c4:	f7fe f84e 	bl	16664 <mayfly_enqueue>
		LL_ASSERT(!retval);
   185c8:	b158      	cbz	r0, 185e2 <ll_reset+0xae>
   185ca:	f240 226b 	movw	r2, #619	; 0x26b
   185ce:	4918      	ldr	r1, [pc, #96]	; (18630 <ll_reset+0xfc>)
   185d0:	4818      	ldr	r0, [pc, #96]	; (18634 <ll_reset+0x100>)
   185d2:	f00b fe33 	bl	2423c <printk>
   185d6:	4040      	eors	r0, r0
   185d8:	f380 8811 	msr	BASEPRI, r0
   185dc:	f04f 0003 	mov.w	r0, #3
   185e0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   185e2:	f04f 32ff 	mov.w	r2, #4294967295
   185e6:	f04f 33ff 	mov.w	r3, #4294967295
   185ea:	4668      	mov	r0, sp
   185ec:	f009 fc8a 	bl	21f04 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   185f0:	f000 ff04 	bl	193fc <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   185f4:	b158      	cbz	r0, 1860e <ll_reset+0xda>
   185f6:	f44f 721e 	mov.w	r2, #632	; 0x278
   185fa:	490d      	ldr	r1, [pc, #52]	; (18630 <ll_reset+0xfc>)
   185fc:	480d      	ldr	r0, [pc, #52]	; (18634 <ll_reset+0x100>)
   185fe:	f00b fe1d 	bl	2423c <printk>
   18602:	4040      	eors	r0, r0
   18604:	f380 8811 	msr	BASEPRI, r0
   18608:	f04f 0003 	mov.w	r0, #3
   1860c:	df02      	svc	2
	err = init_reset();
   1860e:	f7ff fe3f 	bl	18290 <init_reset>
	LL_ASSERT(!err);
   18612:	b158      	cbz	r0, 1862c <ll_reset+0xf8>
   18614:	f240 227d 	movw	r2, #637	; 0x27d
   18618:	4905      	ldr	r1, [pc, #20]	; (18630 <ll_reset+0xfc>)
   1861a:	4806      	ldr	r0, [pc, #24]	; (18634 <ll_reset+0x100>)
   1861c:	f00b fe0e 	bl	2423c <printk>
   18620:	4040      	eors	r0, r0
   18622:	f380 8811 	msr	BASEPRI, r0
   18626:	f04f 0003 	mov.w	r0, #3
   1862a:	df02      	svc	2
}
   1862c:	b006      	add	sp, #24
   1862e:	bd10      	pop	{r4, pc}
   18630:	00030cd1 	.word	0x00030cd1
   18634:	0002bced 	.word	0x0002bced
   18638:	20000918 	.word	0x20000918
   1863c:	200007f4 	.word	0x200007f4
   18640:	200007b8 	.word	0x200007b8
   18644:	200007dc 	.word	0x200007dc
   18648:	200007cc 	.word	0x200007cc
   1864c:	2000093c 	.word	0x2000093c

00018650 <ll_rx_get>:
{
   18650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   18654:	4d25      	ldr	r5, [pc, #148]	; (186ec <ll_rx_get+0x9c>)
   18656:	4e26      	ldr	r6, [pc, #152]	; (186f0 <ll_rx_get+0xa0>)
{
   18658:	4681      	mov	r9, r0
   1865a:	4688      	mov	r8, r1
   1865c:	46ab      	mov	fp, r5
	*node_rx = NULL;
   1865e:	2300      	movs	r3, #0
   18660:	f8c9 3000 	str.w	r3, [r9]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   18664:	aa01      	add	r2, sp, #4
   18666:	e9d5 0100 	ldrd	r0, r1, [r5]
   1866a:	f010 f87a 	bl	28762 <memq_peek>
	if (link) {
   1866e:	4682      	mov	sl, r0
   18670:	b3a0      	cbz	r0, 186dc <ll_rx_get+0x8c>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   18672:	9b01      	ldr	r3, [sp, #4]
   18674:	491f      	ldr	r1, [pc, #124]	; (186f4 <ll_rx_get+0xa4>)
   18676:	781a      	ldrb	r2, [r3, #0]
   18678:	4640      	mov	r0, r8
   1867a:	f7ff fe97 	bl	183ac <tx_cmplt_get>
		if (!cmplt) {
   1867e:	4604      	mov	r4, r0
   18680:	bb40      	cbnz	r0, 186d4 <ll_rx_get+0x84>
			f = mfifo_tx_ack.f;
   18682:	78b3      	ldrb	r3, [r6, #2]
   18684:	f88d 3001 	strb.w	r3, [sp, #1]
				cmplt_curr = tx_cmplt_get(&h, &f,
   18688:	78f2      	ldrb	r2, [r6, #3]
   1868a:	f10d 0101 	add.w	r1, sp, #1
   1868e:	f10d 0002 	add.w	r0, sp, #2
   18692:	f7ff fe8b 	bl	183ac <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   18696:	b9cc      	cbnz	r4, 186cc <ll_rx_get+0x7c>
			} while ((cmplt_prev != 0U) ||
   18698:	b9c0      	cbnz	r0, 186cc <ll_rx_get+0x7c>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   1869a:	9b01      	ldr	r3, [sp, #4]
   1869c:	791f      	ldrb	r7, [r3, #4]
   1869e:	2f01      	cmp	r7, #1
   186a0:	d116      	bne.n	186d0 <ll_rx_get+0x80>
				(void)memq_dequeue(memq_ll_rx.tail,
   186a2:	4622      	mov	r2, r4
   186a4:	4629      	mov	r1, r5
   186a6:	f8db 0004 	ldr.w	r0, [fp, #4]
   186aa:	f010 f862 	bl	28772 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   186ae:	4912      	ldr	r1, [pc, #72]	; (186f8 <ll_rx_get+0xa8>)
   186b0:	4650      	mov	r0, sl
   186b2:	f010 f80a 	bl	286ca <mem_release>
				ll_rx_link_inc_quota(1);
   186b6:	4638      	mov	r0, r7
   186b8:	f7ff fd08 	bl	180cc <ll_rx_link_inc_quota>
				mem_release(rx, &mem_pdu_rx.free);
   186bc:	9801      	ldr	r0, [sp, #4]
   186be:	490f      	ldr	r1, [pc, #60]	; (186fc <ll_rx_get+0xac>)
   186c0:	f010 f803 	bl	286ca <mem_release>
				rx_alloc(1);
   186c4:	4638      	mov	r0, r7
   186c6:	f7ff fd67 	bl	18198 <rx_alloc>
				goto ll_rx_get_again;
   186ca:	e7c8      	b.n	1865e <ll_rx_get+0xe>
{
   186cc:	4604      	mov	r4, r0
   186ce:	e7db      	b.n	18688 <ll_rx_get+0x38>
			*node_rx = rx;
   186d0:	f8c9 3000 	str.w	r3, [r9]
}
   186d4:	4620      	mov	r0, r4
   186d6:	b003      	add	sp, #12
   186d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   186dc:	78f2      	ldrb	r2, [r6, #3]
   186de:	4905      	ldr	r1, [pc, #20]	; (186f4 <ll_rx_get+0xa4>)
   186e0:	4640      	mov	r0, r8
   186e2:	f7ff fe63 	bl	183ac <tx_cmplt_get>
   186e6:	4604      	mov	r4, r0
   186e8:	e7f4      	b.n	186d4 <ll_rx_get+0x84>
   186ea:	bf00      	nop
   186ec:	20002924 	.word	0x20002924
   186f0:	20000918 	.word	0x20000918
   186f4:	2000091a 	.word	0x2000091a
   186f8:	2000268c 	.word	0x2000268c
   186fc:	200026e0 	.word	0x200026e0

00018700 <ll_rx_dequeue>:
{
   18700:	b573      	push	{r0, r1, r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   18702:	4945      	ldr	r1, [pc, #276]	; (18818 <ll_rx_dequeue+0x118>)
	struct node_rx_hdr *rx = NULL;
   18704:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   18706:	aa01      	add	r2, sp, #4
   18708:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1870a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1870c:	f010 f831 	bl	28772 <memq_dequeue>
	LL_ASSERT(link);
   18710:	4604      	mov	r4, r0
   18712:	b958      	cbnz	r0, 1872c <ll_rx_dequeue+0x2c>
   18714:	f240 22cf 	movw	r2, #719	; 0x2cf
   18718:	4940      	ldr	r1, [pc, #256]	; (1881c <ll_rx_dequeue+0x11c>)
   1871a:	4841      	ldr	r0, [pc, #260]	; (18820 <ll_rx_dequeue+0x120>)
   1871c:	f00b fd8e 	bl	2423c <printk>
   18720:	4040      	eors	r0, r0
   18722:	f380 8811 	msr	BASEPRI, r0
   18726:	f04f 0003 	mov.w	r0, #3
   1872a:	df02      	svc	2
	mem_release(link, &mem_link_rx.free);
   1872c:	493d      	ldr	r1, [pc, #244]	; (18824 <ll_rx_dequeue+0x124>)
   1872e:	4620      	mov	r0, r4
   18730:	f00f ffcb 	bl	286ca <mem_release>
	switch (rx->type) {
   18734:	9b01      	ldr	r3, [sp, #4]
   18736:	7919      	ldrb	r1, [r3, #4]
   18738:	2918      	cmp	r1, #24
   1873a:	d869      	bhi.n	18810 <ll_rx_dequeue+0x110>
   1873c:	2201      	movs	r2, #1
   1873e:	483a      	ldr	r0, [pc, #232]	; (18828 <ll_rx_dequeue+0x128>)
   18740:	408a      	lsls	r2, r1
   18742:	4202      	tst	r2, r0
   18744:	d15f      	bne.n	18806 <ll_rx_dequeue+0x106>
   18746:	0312      	lsls	r2, r2, #12
   18748:	d562      	bpl.n	18810 <ll_rx_dequeue+0x110>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   1874a:	7f1a      	ldrb	r2, [r3, #28]
   1874c:	2a3c      	cmp	r2, #60	; 0x3c
   1874e:	d002      	beq.n	18756 <ll_rx_dequeue+0x56>
   18750:	7f59      	ldrb	r1, [r3, #29]
   18752:	2900      	cmp	r1, #0
   18754:	d04a      	beq.n	187ec <ll_rx_dequeue+0xec>
			struct lll_adv *lll = ftr->param;
   18756:	689e      	ldr	r6, [r3, #8]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   18758:	2a3c      	cmp	r2, #60	; 0x3c
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1875a:	6835      	ldr	r5, [r6, #0]
			if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1875c:	d13d      	bne.n	187da <ll_rx_dequeue+0xda>
				conn_lll = lll->conn;
   1875e:	68b4      	ldr	r4, [r6, #8]
				LL_ASSERT(conn_lll);
   18760:	b95c      	cbnz	r4, 1877a <ll_rx_dequeue+0x7a>
   18762:	f240 3236 	movw	r2, #822	; 0x336
   18766:	492d      	ldr	r1, [pc, #180]	; (1881c <ll_rx_dequeue+0x11c>)
   18768:	482d      	ldr	r0, [pc, #180]	; (18820 <ll_rx_dequeue+0x120>)
   1876a:	f00b fd67 	bl	2423c <printk>
   1876e:	4040      	eors	r0, r0
   18770:	f380 8811 	msr	BASEPRI, r0
   18774:	f04f 0003 	mov.w	r0, #3
   18778:	df02      	svc	2
				lll->conn = NULL;
   1877a:	2300      	movs	r3, #0
   1877c:	60b3      	str	r3, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   1877e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18780:	b15b      	cbz	r3, 1879a <ll_rx_dequeue+0x9a>
   18782:	f240 3239 	movw	r2, #825	; 0x339
   18786:	4925      	ldr	r1, [pc, #148]	; (1881c <ll_rx_dequeue+0x11c>)
   18788:	4825      	ldr	r0, [pc, #148]	; (18820 <ll_rx_dequeue+0x120>)
   1878a:	f00b fd57 	bl	2423c <printk>
   1878e:	4040      	eors	r0, r0
   18790:	f380 8811 	msr	BASEPRI, r0
   18794:	f04f 0003 	mov.w	r0, #3
   18798:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1879a:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1879e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   187a2:	f00f ffcc 	bl	2873e <memq_deinit>
				LL_ASSERT(link);
   187a6:	4606      	mov	r6, r0
   187a8:	b958      	cbnz	r0, 187c2 <ll_rx_dequeue+0xc2>
   187aa:	f44f 724f 	mov.w	r2, #828	; 0x33c
   187ae:	491b      	ldr	r1, [pc, #108]	; (1881c <ll_rx_dequeue+0x11c>)
   187b0:	481b      	ldr	r0, [pc, #108]	; (18820 <ll_rx_dequeue+0x120>)
   187b2:	f00b fd43 	bl	2423c <printk>
   187b6:	4040      	eors	r0, r0
   187b8:	f380 8811 	msr	BASEPRI, r0
   187bc:	f04f 0003 	mov.w	r0, #3
   187c0:	df02      	svc	2
				conn_lll->link_tx_free = link;
   187c2:	6526      	str	r6, [r4, #80]	; 0x50
				ll_conn_release(conn);
   187c4:	6820      	ldr	r0, [r4, #0]
   187c6:	f001 f8fb 	bl	199c0 <ll_conn_release>
			adv->is_enabled = 0U;
   187ca:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   187ce:	f36f 0300 	bfc	r3, #0, #1
   187d2:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
}
   187d6:	b002      	add	sp, #8
   187d8:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   187da:	6ca8      	ldr	r0, [r5, #72]	; 0x48
   187dc:	2800      	cmp	r0, #0
   187de:	d0f4      	beq.n	187ca <ll_rx_dequeue+0xca>
					adv->node_rx_cc_free = NULL;
   187e0:	2300      	movs	r3, #0
   187e2:	64ab      	str	r3, [r5, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   187e4:	4911      	ldr	r1, [pc, #68]	; (1882c <ll_rx_dequeue+0x12c>)
   187e6:	f00f ff70 	bl	286ca <mem_release>
   187ea:	e7ee      	b.n	187ca <ll_rx_dequeue+0xca>
			LL_ASSERT(0);
   187ec:	f240 3261 	movw	r2, #865	; 0x361
		LL_ASSERT(0);
   187f0:	490a      	ldr	r1, [pc, #40]	; (1881c <ll_rx_dequeue+0x11c>)
   187f2:	480b      	ldr	r0, [pc, #44]	; (18820 <ll_rx_dequeue+0x120>)
   187f4:	f00b fd22 	bl	2423c <printk>
   187f8:	4040      	eors	r0, r0
   187fa:	f380 8811 	msr	BASEPRI, r0
   187fe:	f04f 0003 	mov.w	r0, #3
   18802:	df02      	svc	2
}
   18804:	e7e7      	b.n	187d6 <ll_rx_dequeue+0xd6>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   18806:	2900      	cmp	r1, #0
   18808:	d1e5      	bne.n	187d6 <ll_rx_dequeue+0xd6>
   1880a:	f240 32b5 	movw	r2, #949	; 0x3b5
   1880e:	e7ef      	b.n	187f0 <ll_rx_dequeue+0xf0>
		LL_ASSERT(0);
   18810:	f240 32b9 	movw	r2, #953	; 0x3b9
   18814:	e7ec      	b.n	187f0 <ll_rx_dequeue+0xf0>
   18816:	bf00      	nop
   18818:	20002924 	.word	0x20002924
   1881c:	00030cd1 	.word	0x00030cd1
   18820:	0002bced 	.word	0x0002bced
   18824:	2000268c 	.word	0x2000268c
   18828:	01700019 	.word	0x01700019
   1882c:	200026e0 	.word	0x200026e0

00018830 <ll_rx_mem_release>:
{
   18830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   18834:	6804      	ldr	r4, [r0, #0]
			LL_ASSERT(0);
   18836:	4d3d      	ldr	r5, [pc, #244]	; (1892c <ll_rx_mem_release+0xfc>)
   18838:	4e3d      	ldr	r6, [pc, #244]	; (18930 <ll_rx_mem_release+0x100>)
   1883a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 18938 <ll_rx_mem_release+0x108>
{
   1883e:	4607      	mov	r7, r0
	while (rx) {
   18840:	b92c      	cbnz	r4, 1884e <ll_rx_mem_release+0x1e>
	*node_rx = rx;
   18842:	603c      	str	r4, [r7, #0]
	rx_alloc(UINT8_MAX);
   18844:	20ff      	movs	r0, #255	; 0xff
}
   18846:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   1884a:	f7ff bca5 	b.w	18198 <rx_alloc>
		switch (rx_free->type) {
   1884e:	7922      	ldrb	r2, [r4, #4]
		rx = rx->next;
   18850:	f8d4 9000 	ldr.w	r9, [r4]
		switch (rx_free->type) {
   18854:	2a18      	cmp	r2, #24
   18856:	d85c      	bhi.n	18912 <ll_rx_mem_release+0xe2>
   18858:	2301      	movs	r3, #1
   1885a:	4093      	lsls	r3, r2
   1885c:	ea13 0f08 	tst.w	r3, r8
   18860:	d119      	bne.n	18896 <ll_rx_mem_release+0x66>
   18862:	02da      	lsls	r2, r3, #11
   18864:	d429      	bmi.n	188ba <ll_rx_mem_release+0x8a>
   18866:	031b      	lsls	r3, r3, #12
   18868:	d553      	bpl.n	18912 <ll_rx_mem_release+0xe2>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1886a:	7f23      	ldrb	r3, [r4, #28]
   1886c:	2b3c      	cmp	r3, #60	; 0x3c
   1886e:	d105      	bne.n	1887c <ll_rx_mem_release+0x4c>
			mem_release(rx_free, &mem_pdu_rx.free);
   18870:	4930      	ldr	r1, [pc, #192]	; (18934 <ll_rx_mem_release+0x104>)
   18872:	4620      	mov	r0, r4
   18874:	f00f ff29 	bl	286ca <mem_release>
{
   18878:	464c      	mov	r4, r9
   1887a:	e7e1      	b.n	18840 <ll_rx_mem_release+0x10>
				LL_ASSERT(!cc->status);
   1887c:	b15b      	cbz	r3, 18896 <ll_rx_mem_release+0x66>
   1887e:	f240 4223 	movw	r2, #1059	; 0x423
   18882:	4629      	mov	r1, r5
   18884:	4630      	mov	r0, r6
   18886:	f00b fcd9 	bl	2423c <printk>
   1888a:	4040      	eors	r0, r0
   1888c:	f380 8811 	msr	BASEPRI, r0
   18890:	f04f 0003 	mov.w	r0, #3
   18894:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   18896:	7923      	ldrb	r3, [r4, #4]
   18898:	b95b      	cbnz	r3, 188b2 <ll_rx_mem_release+0x82>
   1889a:	f240 4269 	movw	r2, #1129	; 0x469
   1889e:	4629      	mov	r1, r5
   188a0:	4630      	mov	r0, r6
   188a2:	f00b fccb 	bl	2423c <printk>
   188a6:	4040      	eors	r0, r0
   188a8:	f380 8811 	msr	BASEPRI, r0
   188ac:	f04f 0003 	mov.w	r0, #3
   188b0:	df02      	svc	2
			ll_rx_link_inc_quota(1);
   188b2:	2001      	movs	r0, #1
   188b4:	f7ff fc0a 	bl	180cc <ll_rx_link_inc_quota>
   188b8:	e7da      	b.n	18870 <ll_rx_mem_release+0x40>
			conn = ll_conn_get(rx_free->handle);
   188ba:	88e0      	ldrh	r0, [r4, #6]
   188bc:	f001 f8fa 	bl	19ab4 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   188c0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
			conn = ll_conn_get(rx_free->handle);
   188c2:	4604      	mov	r4, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   188c4:	b15b      	cbz	r3, 188de <ll_rx_mem_release+0xae>
   188c6:	f44f 6292 	mov.w	r2, #1168	; 0x490
   188ca:	4629      	mov	r1, r5
   188cc:	4630      	mov	r0, r6
   188ce:	f00b fcb5 	bl	2423c <printk>
   188d2:	4040      	eors	r0, r0
   188d4:	f380 8811 	msr	BASEPRI, r0
   188d8:	f04f 0003 	mov.w	r0, #3
   188dc:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   188de:	f104 0160 	add.w	r1, r4, #96	; 0x60
   188e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   188e6:	f00f ff2a 	bl	2873e <memq_deinit>
			LL_ASSERT(link);
   188ea:	4682      	mov	sl, r0
   188ec:	b958      	cbnz	r0, 18906 <ll_rx_mem_release+0xd6>
   188ee:	f240 4293 	movw	r2, #1171	; 0x493
   188f2:	4629      	mov	r1, r5
   188f4:	4630      	mov	r0, r6
   188f6:	f00b fca1 	bl	2423c <printk>
   188fa:	4040      	eors	r0, r0
   188fc:	f380 8811 	msr	BASEPRI, r0
   18900:	f04f 0003 	mov.w	r0, #3
   18904:	df02      	svc	2
			conn->lll.link_tx_free = link;
   18906:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
			ll_conn_release(conn);
   1890a:	4620      	mov	r0, r4
   1890c:	f001 f858 	bl	199c0 <ll_conn_release>
		break;
   18910:	e7b2      	b.n	18878 <ll_rx_mem_release+0x48>
			LL_ASSERT(0);
   18912:	f240 429d 	movw	r2, #1181	; 0x49d
   18916:	4629      	mov	r1, r5
   18918:	4630      	mov	r0, r6
   1891a:	f00b fc8f 	bl	2423c <printk>
   1891e:	4040      	eors	r0, r0
   18920:	f380 8811 	msr	BASEPRI, r0
   18924:	f04f 0003 	mov.w	r0, #3
   18928:	df02      	svc	2
			break;
   1892a:	e7a5      	b.n	18878 <ll_rx_mem_release+0x48>
   1892c:	00030cd1 	.word	0x00030cd1
   18930:	0002bced 	.word	0x0002bced
   18934:	200026e0 	.word	0x200026e0
   18938:	01600019 	.word	0x01600019

0001893c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1893c:	4801      	ldr	r0, [pc, #4]	; (18944 <ll_rx_link_alloc+0x8>)
   1893e:	f00f beab 	b.w	28698 <mem_acquire>
   18942:	bf00      	nop
   18944:	2000268c 	.word	0x2000268c

00018948 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   18948:	4901      	ldr	r1, [pc, #4]	; (18950 <ll_rx_link_release+0x8>)
   1894a:	f00f bebe 	b.w	286ca <mem_release>
   1894e:	bf00      	nop
   18950:	2000268c 	.word	0x2000268c

00018954 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   18954:	4801      	ldr	r0, [pc, #4]	; (1895c <ll_rx_alloc+0x8>)
   18956:	f00f be9f 	b.w	28698 <mem_acquire>
   1895a:	bf00      	nop
   1895c:	200026e0 	.word	0x200026e0

00018960 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   18960:	4901      	ldr	r1, [pc, #4]	; (18968 <ll_rx_release+0x8>)
   18962:	f00f beb2 	b.w	286ca <mem_release>
   18966:	bf00      	nop
   18968:	200026e0 	.word	0x200026e0

0001896c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1896c:	4b02      	ldr	r3, [pc, #8]	; (18978 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1896e:	4a03      	ldr	r2, [pc, #12]	; (1897c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   18970:	78db      	ldrb	r3, [r3, #3]
   18972:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   18974:	f00f beee 	b.w	28754 <memq_enqueue>
   18978:	20000918 	.word	0x20000918
   1897c:	20002928 	.word	0x20002928

00018980 <ll_rx_sched>:
	k_sem_give(sem_recv);
   18980:	4b01      	ldr	r3, [pc, #4]	; (18988 <ll_rx_sched+0x8>)
   18982:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   18984:	f009 ba82 	b.w	21e8c <z_impl_k_sem_give>
   18988:	20002934 	.word	0x20002934

0001898c <ll_pdu_rx_alloc_peek>:
{
   1898c:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1898e:	4a0a      	ldr	r2, [pc, #40]	; (189b8 <ll_pdu_rx_alloc_peek+0x2c>)
   18990:	7891      	ldrb	r1, [r2, #2]
   18992:	78d4      	ldrb	r4, [r2, #3]
   18994:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   18996:	42a1      	cmp	r1, r4
		return count - first + last;
   18998:	bf8a      	itet	hi
   1899a:	1a5b      	subhi	r3, r3, r1
		return last - first;
   1899c:	1a63      	subls	r3, r4, r1
		return count - first + last;
   1899e:	191b      	addhi	r3, r3, r4
   189a0:	b2db      	uxtb	r3, r3
   189a2:	4298      	cmp	r0, r3
   189a4:	d806      	bhi.n	189b4 <ll_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   189a6:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   189a8:	7813      	ldrb	r3, [r2, #0]
   189aa:	d003      	beq.n	189b4 <ll_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   189ac:	fb01 2203 	mla	r2, r1, r3, r2
   189b0:	6850      	ldr	r0, [r2, #4]
}
   189b2:	bd10      	pop	{r4, pc}
		return NULL;
   189b4:	2000      	movs	r0, #0
   189b6:	e7fc      	b.n	189b2 <ll_pdu_rx_alloc_peek+0x26>
   189b8:	200007cc 	.word	0x200007cc

000189bc <ll_pdu_rx_alloc>:
{
   189bc:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   189be:	4a09      	ldr	r2, [pc, #36]	; (189e4 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   189c0:	7893      	ldrb	r3, [r2, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   189c2:	78d0      	ldrb	r0, [r2, #3]
   189c4:	7811      	ldrb	r1, [r2, #0]
   189c6:	7854      	ldrb	r4, [r2, #1]
   189c8:	4298      	cmp	r0, r3
   189ca:	d009      	beq.n	189e0 <ll_pdu_rx_alloc+0x24>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
   189cc:	fb03 2101 	mla	r1, r3, r1, r2

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   189d0:	3301      	adds	r3, #1
   189d2:	b2db      	uxtb	r3, r3
	if (_first == count) {
		_first = 0U;
   189d4:	429c      	cmp	r4, r3
   189d6:	bf08      	it	eq
   189d8:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   189da:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   189dc:	7093      	strb	r3, [r2, #2]
}
   189de:	bd10      	pop	{r4, pc}
		return NULL;
   189e0:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   189e2:	e7fc      	b.n	189de <ll_pdu_rx_alloc+0x22>
   189e4:	200007cc 	.word	0x200007cc

000189e8 <ll_tx_ack_put>:
{
   189e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   189ea:	4a12      	ldr	r2, [pc, #72]	; (18a34 <ll_tx_ack_put+0x4c>)
   189ec:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   189ee:	7857      	ldrb	r7, [r2, #1]
   189f0:	7895      	ldrb	r5, [r2, #2]
   189f2:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   189f4:	1c63      	adds	r3, r4, #1
   189f6:	b2db      	uxtb	r3, r3
		last = 0U;
   189f8:	429f      	cmp	r7, r3
   189fa:	bf08      	it	eq
   189fc:	2300      	moveq	r3, #0
	if (last == first) {
   189fe:	429d      	cmp	r5, r3
   18a00:	d004      	beq.n	18a0c <ll_tx_ack_put+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18a02:	1d15      	adds	r5, r2, #4
   18a04:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   18a08:	192e      	adds	r6, r5, r4
   18a0a:	d10e      	bne.n	18a2a <ll_tx_ack_put+0x42>
   18a0c:	f240 42f1 	movw	r2, #1265	; 0x4f1
   18a10:	4909      	ldr	r1, [pc, #36]	; (18a38 <ll_tx_ack_put+0x50>)
   18a12:	480a      	ldr	r0, [pc, #40]	; (18a3c <ll_tx_ack_put+0x54>)
   18a14:	f00b fc12 	bl	2423c <printk>
   18a18:	4040      	eors	r0, r0
   18a1a:	f380 8811 	msr	BASEPRI, r0
   18a1e:	f04f 0003 	mov.w	r0, #3
   18a22:	df02      	svc	2
	tx->handle = handle;
   18a24:	2300      	movs	r3, #0
   18a26:	801b      	strh	r3, [r3, #0]
   18a28:	deff      	udf	#255	; 0xff
   18a2a:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   18a2c:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   18a2e:	6071      	str	r1, [r6, #4]
}
   18a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a32:	bf00      	nop
   18a34:	20000918 	.word	0x20000918
   18a38:	00030cd1 	.word	0x00030cd1
   18a3c:	0002bced 	.word	0x0002bced

00018a40 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   18a40:	2200      	movs	r2, #0
{
   18a42:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   18a44:	4611      	mov	r1, r2
   18a46:	4b09      	ldr	r3, [pc, #36]	; (18a6c <ll_radio_state_abort+0x2c>)
   18a48:	2001      	movs	r0, #1
   18a4a:	f7fd fe0b 	bl	16664 <mayfly_enqueue>
	LL_ASSERT(!ret);
   18a4e:	b158      	cbz	r0, 18a68 <ll_radio_state_abort+0x28>
   18a50:	f240 5209 	movw	r2, #1289	; 0x509
   18a54:	4906      	ldr	r1, [pc, #24]	; (18a70 <ll_radio_state_abort+0x30>)
   18a56:	4807      	ldr	r0, [pc, #28]	; (18a74 <ll_radio_state_abort+0x34>)
   18a58:	f00b fbf0 	bl	2423c <printk>
   18a5c:	4040      	eors	r0, r0
   18a5e:	f380 8811 	msr	BASEPRI, r0
   18a62:	f04f 0003 	mov.w	r0, #3
   18a66:	df02      	svc	2
}
   18a68:	bd08      	pop	{r3, pc}
   18a6a:	bf00      	nop
   18a6c:	2000094c 	.word	0x2000094c
   18a70:	00030cd1 	.word	0x00030cd1
   18a74:	0002bced 	.word	0x0002bced

00018a78 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18a78:	f030 0302 	bics.w	r3, r0, #2
{
   18a7c:	b510      	push	{r4, lr}
   18a7e:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   18a80:	d00e      	beq.n	18aa0 <ull_ticker_status_take+0x28>
   18a82:	680b      	ldr	r3, [r1, #0]
   18a84:	2b02      	cmp	r3, #2
   18a86:	d10b      	bne.n	18aa0 <ull_ticker_status_take+0x28>
   18a88:	f240 5226 	movw	r2, #1318	; 0x526
   18a8c:	4909      	ldr	r1, [pc, #36]	; (18ab4 <ull_ticker_status_take+0x3c>)
   18a8e:	480a      	ldr	r0, [pc, #40]	; (18ab8 <ull_ticker_status_take+0x40>)
   18a90:	f00b fbd4 	bl	2423c <printk>
   18a94:	4040      	eors	r0, r0
   18a96:	f380 8811 	msr	BASEPRI, r0
   18a9a:	f04f 0003 	mov.w	r0, #3
   18a9e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   18aa0:	f04f 32ff 	mov.w	r2, #4294967295
   18aa4:	f04f 33ff 	mov.w	r3, #4294967295
   18aa8:	4804      	ldr	r0, [pc, #16]	; (18abc <ull_ticker_status_take+0x44>)
   18aaa:	f009 fa2b 	bl	21f04 <z_impl_k_sem_take>
	return *ret_cb;
   18aae:	6820      	ldr	r0, [r4, #0]
}
   18ab0:	bd10      	pop	{r4, pc}
   18ab2:	bf00      	nop
   18ab4:	00030cd1 	.word	0x00030cd1
   18ab8:	0002bced 	.word	0x0002bced
   18abc:	20002938 	.word	0x20002938

00018ac0 <ull_disable_mark>:
	if (!*m) {
   18ac0:	4b02      	ldr	r3, [pc, #8]	; (18acc <ull_disable_mark+0xc>)
   18ac2:	681a      	ldr	r2, [r3, #0]
   18ac4:	b902      	cbnz	r2, 18ac8 <ull_disable_mark+0x8>
		*m = param;
   18ac6:	6018      	str	r0, [r3, #0]
}
   18ac8:	6818      	ldr	r0, [r3, #0]
   18aca:	4770      	bx	lr
   18acc:	200025c4 	.word	0x200025c4

00018ad0 <ull_disable_unmark>:
	if (*m && *m == param) {
   18ad0:	4905      	ldr	r1, [pc, #20]	; (18ae8 <ull_disable_unmark+0x18>)
   18ad2:	680b      	ldr	r3, [r1, #0]
   18ad4:	b12b      	cbz	r3, 18ae2 <ull_disable_unmark+0x12>
   18ad6:	4298      	cmp	r0, r3
   18ad8:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   18adc:	bf0c      	ite	eq
   18ade:	600a      	streq	r2, [r1, #0]
	return NULL;
   18ae0:	4613      	movne	r3, r2
}
   18ae2:	4618      	mov	r0, r3
   18ae4:	4770      	bx	lr
   18ae6:	bf00      	nop
   18ae8:	200025c4 	.word	0x200025c4

00018aec <ull_disable_mark_get>:
}
   18aec:	4b01      	ldr	r3, [pc, #4]	; (18af4 <ull_disable_mark_get+0x8>)
   18aee:	6818      	ldr	r0, [r3, #0]
   18af0:	4770      	bx	lr
   18af2:	bf00      	nop
   18af4:	200025c4 	.word	0x200025c4

00018af8 <ull_update_mark>:
	if (!*m) {
   18af8:	4b02      	ldr	r3, [pc, #8]	; (18b04 <ull_update_mark+0xc>)
   18afa:	681a      	ldr	r2, [r3, #0]
   18afc:	b902      	cbnz	r2, 18b00 <ull_update_mark+0x8>
		*m = param;
   18afe:	6018      	str	r0, [r3, #0]
}
   18b00:	6818      	ldr	r0, [r3, #0]
   18b02:	4770      	bx	lr
   18b04:	200025c8 	.word	0x200025c8

00018b08 <ull_update_unmark>:
	if (*m && *m == param) {
   18b08:	4905      	ldr	r1, [pc, #20]	; (18b20 <ull_update_unmark+0x18>)
   18b0a:	680b      	ldr	r3, [r1, #0]
   18b0c:	b12b      	cbz	r3, 18b1a <ull_update_unmark+0x12>
   18b0e:	4298      	cmp	r0, r3
   18b10:	f04f 0200 	mov.w	r2, #0
		*m = NULL;
   18b14:	bf0c      	ite	eq
   18b16:	600a      	streq	r2, [r1, #0]
	return NULL;
   18b18:	4613      	movne	r3, r2
}
   18b1a:	4618      	mov	r0, r3
   18b1c:	4770      	bx	lr
   18b1e:	bf00      	nop
   18b20:	200025c8 	.word	0x200025c8

00018b24 <ull_update_mark_get>:
}
   18b24:	4b01      	ldr	r3, [pc, #4]	; (18b2c <ull_update_mark_get+0x8>)
   18b26:	6818      	ldr	r0, [r3, #0]
   18b28:	4770      	bx	lr
   18b2a:	bf00      	nop
   18b2c:	200025c8 	.word	0x200025c8

00018b30 <ull_disable>:
{
   18b30:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   18b32:	6804      	ldr	r4, [r0, #0]
	if (!hdr) {
   18b34:	f114 0f10 	cmn.w	r4, #16
{
   18b38:	b087      	sub	sp, #28
   18b3a:	4605      	mov	r5, r0
	if (!hdr) {
   18b3c:	d102      	bne.n	18b44 <ull_disable+0x14>
		return ULL_STATUS_SUCCESS;
   18b3e:	2000      	movs	r0, #0
}
   18b40:	b007      	add	sp, #28
   18b42:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   18b44:	2201      	movs	r2, #1
   18b46:	2100      	movs	r1, #0
   18b48:	4668      	mov	r0, sp
   18b4a:	f011 fbc4 	bl	2a2d6 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   18b4e:	4b11      	ldr	r3, [pc, #68]	; (18b94 <ull_disable+0x64>)
   18b50:	6163      	str	r3, [r4, #20]
	return hdr->ref;
   18b52:	7c23      	ldrb	r3, [r4, #16]
	hdr->disabled_param = &sem;
   18b54:	f8c4 d018 	str.w	sp, [r4, #24]
	if (!ull_ref_get(hdr)) {
   18b58:	2b00      	cmp	r3, #0
   18b5a:	d0f0      	beq.n	18b3e <ull_disable+0xe>
	mfy.param = lll;
   18b5c:	4b0e      	ldr	r3, [pc, #56]	; (18b98 <ull_disable+0x68>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   18b5e:	2200      	movs	r2, #0
   18b60:	4611      	mov	r1, r2
   18b62:	2003      	movs	r0, #3
	mfy.param = lll;
   18b64:	609d      	str	r5, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   18b66:	f7fd fd7d 	bl	16664 <mayfly_enqueue>
	LL_ASSERT(!ret);
   18b6a:	b158      	cbz	r0, 18b84 <ull_disable+0x54>
   18b6c:	f240 5297 	movw	r2, #1431	; 0x597
   18b70:	490a      	ldr	r1, [pc, #40]	; (18b9c <ull_disable+0x6c>)
   18b72:	480b      	ldr	r0, [pc, #44]	; (18ba0 <ull_disable+0x70>)
   18b74:	f00b fb62 	bl	2423c <printk>
   18b78:	4040      	eors	r0, r0
   18b7a:	f380 8811 	msr	BASEPRI, r0
   18b7e:	f04f 0003 	mov.w	r0, #3
   18b82:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   18b84:	f04f 32ff 	mov.w	r2, #4294967295
   18b88:	f04f 33ff 	mov.w	r3, #4294967295
   18b8c:	4668      	mov	r0, sp
   18b8e:	f009 f9b9 	bl	21f04 <z_impl_k_sem_take>
	return k_sem_take(&sem, K_FOREVER);
   18b92:	e7d5      	b.n	18b40 <ull_disable+0x10>
   18b94:	00028d3b 	.word	0x00028d3b
   18b98:	2000095c 	.word	0x2000095c
   18b9c:	00030cd1 	.word	0x00030cd1
   18ba0:	0002bced 	.word	0x0002bced

00018ba4 <ull_ticker_stop_with_mark>:
{
   18ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ba6:	4607      	mov	r7, r0
   18ba8:	b085      	sub	sp, #20
	mark = ull_disable_mark(param);
   18baa:	4608      	mov	r0, r1
{
   18bac:	460c      	mov	r4, r1
   18bae:	4616      	mov	r6, r2
	mark = ull_disable_mark(param);
   18bb0:	f7ff ff86 	bl	18ac0 <ull_disable_mark>
	if (mark != param) {
   18bb4:	4281      	cmp	r1, r0
   18bb6:	d121      	bne.n	18bfc <ull_ticker_stop_with_mark+0x58>
	ret_cb = TICKER_STATUS_BUSY;
   18bb8:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18bba:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   18bbc:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18bbe:	2103      	movs	r1, #3
   18bc0:	9500      	str	r5, [sp, #0]
   18bc2:	4b11      	ldr	r3, [pc, #68]	; (18c08 <ull_ticker_stop_with_mark+0x64>)
   18bc4:	463a      	mov	r2, r7
   18bc6:	2000      	movs	r0, #0
   18bc8:	f7fe fb22 	bl	17210 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   18bcc:	4629      	mov	r1, r5
   18bce:	f7ff ff53 	bl	18a78 <ull_ticker_status_take>
	if (ret) {
   18bd2:	b148      	cbz	r0, 18be8 <ull_ticker_stop_with_mark+0x44>
		mark = ull_disable_unmark(param);
   18bd4:	4620      	mov	r0, r4
   18bd6:	f7ff ff7b 	bl	18ad0 <ull_disable_unmark>
		if (mark != param) {
   18bda:	4284      	cmp	r4, r0
   18bdc:	d10e      	bne.n	18bfc <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   18bde:	f06f 0544 	mvn.w	r5, #68	; 0x44
}
   18be2:	4628      	mov	r0, r5
   18be4:	b005      	add	sp, #20
   18be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   18be8:	4630      	mov	r0, r6
   18bea:	f7ff ffa1 	bl	18b30 <ull_disable>
	if (ret) {
   18bee:	4605      	mov	r5, r0
   18bf0:	b938      	cbnz	r0, 18c02 <ull_ticker_stop_with_mark+0x5e>
	mark = ull_disable_unmark(param);
   18bf2:	4620      	mov	r0, r4
   18bf4:	f7ff ff6c 	bl	18ad0 <ull_disable_unmark>
	if (mark != param) {
   18bf8:	4284      	cmp	r4, r0
   18bfa:	d0f2      	beq.n	18be2 <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
   18bfc:	f06f 0521 	mvn.w	r5, #33	; 0x21
   18c00:	e7ef      	b.n	18be2 <ull_ticker_stop_with_mark+0x3e>
		return -EBUSY;
   18c02:	f06f 050f 	mvn.w	r5, #15
   18c06:	e7ec      	b.n	18be2 <ull_ticker_stop_with_mark+0x3e>
   18c08:	000183a1 	.word	0x000183a1

00018c0c <ull_pdu_rx_alloc_peek>:
{
   18c0c:	b510      	push	{r4, lr}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   18c0e:	4a0a      	ldr	r2, [pc, #40]	; (18c38 <ull_pdu_rx_alloc_peek+0x2c>)
   18c10:	7891      	ldrb	r1, [r2, #2]
   18c12:	78d4      	ldrb	r4, [r2, #3]
   18c14:	7853      	ldrb	r3, [r2, #1]
	if (last >= first) {
   18c16:	42a1      	cmp	r1, r4
		return count - first + last;
   18c18:	bf8a      	itet	hi
   18c1a:	1a5b      	subhi	r3, r3, r1
		return last - first;
   18c1c:	1a63      	subls	r3, r4, r1
		return count - first + last;
   18c1e:	191b      	addhi	r3, r3, r4
   18c20:	b2db      	uxtb	r3, r3
   18c22:	4298      	cmp	r0, r3
   18c24:	d806      	bhi.n	18c34 <ull_pdu_rx_alloc_peek+0x28>
	if (first == last) {
   18c26:	42a1      	cmp	r1, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   18c28:	7813      	ldrb	r3, [r2, #0]
   18c2a:	d003      	beq.n	18c34 <ull_pdu_rx_alloc_peek+0x28>
	return *((void **)(fifo + first * size));
   18c2c:	fb01 2203 	mla	r2, r1, r3, r2
   18c30:	6850      	ldr	r0, [r2, #4]
}
   18c32:	bd10      	pop	{r4, pc}
		return NULL;
   18c34:	2000      	movs	r0, #0
   18c36:	e7fc      	b.n	18c32 <ull_pdu_rx_alloc_peek+0x26>
   18c38:	200007dc 	.word	0x200007dc

00018c3c <ull_pdu_rx_alloc>:
{
   18c3c:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(pdu_rx_free);
   18c3e:	4a09      	ldr	r2, [pc, #36]	; (18c64 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   18c40:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   18c42:	78d0      	ldrb	r0, [r2, #3]
   18c44:	7811      	ldrb	r1, [r2, #0]
   18c46:	7854      	ldrb	r4, [r2, #1]
   18c48:	4298      	cmp	r0, r3
   18c4a:	d009      	beq.n	18c60 <ull_pdu_rx_alloc+0x24>
	mem = *((void **)(fifo + _first * size));
   18c4c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   18c50:	3301      	adds	r3, #1
   18c52:	b2db      	uxtb	r3, r3
		_first = 0U;
   18c54:	429c      	cmp	r4, r3
   18c56:	bf08      	it	eq
   18c58:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   18c5a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   18c5c:	7093      	strb	r3, [r2, #2]
}
   18c5e:	bd10      	pop	{r4, pc}
		return NULL;
   18c60:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   18c62:	e7fc      	b.n	18c5e <ull_pdu_rx_alloc+0x22>
   18c64:	200007dc 	.word	0x200007dc

00018c68 <ull_rx_put>:
{
   18c68:	b538      	push	{r3, r4, r5, lr}
   18c6a:	460c      	mov	r4, r1
   18c6c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   18c6e:	f001 fe59 	bl	1a924 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18c72:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   18c74:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18c76:	4a03      	ldr	r2, [pc, #12]	; (18c84 <ull_rx_put+0x1c>)
   18c78:	4628      	mov	r0, r5
}
   18c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   18c7e:	f00f bd69 	b.w	28754 <memq_enqueue>
   18c82:	bf00      	nop
   18c84:	20002930 	.word	0x20002930

00018c88 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   18c88:	2201      	movs	r2, #1
   18c8a:	4b02      	ldr	r3, [pc, #8]	; (18c94 <ull_rx_sched+0xc>)
   18c8c:	4611      	mov	r1, r2
   18c8e:	2000      	movs	r0, #0
   18c90:	f7fd bce8 	b.w	16664 <mayfly_enqueue>
   18c94:	2000096c 	.word	0x2000096c

00018c98 <ull_prepare_enqueue>:
{
   18c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18c9c:	4e16      	ldr	r6, [pc, #88]	; (18cf8 <ull_prepare_enqueue+0x60>)
{
   18c9e:	460f      	mov	r7, r1
   18ca0:	4611      	mov	r1, r2
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18ca2:	78f2      	ldrb	r2, [r6, #3]
   18ca4:	7834      	ldrb	r4, [r6, #0]
{
   18ca6:	4680      	mov	r8, r0
	last = last + 1;
   18ca8:	1c55      	adds	r5, r2, #1
	if (last == count) {
   18caa:	7870      	ldrb	r0, [r6, #1]
   18cac:	4699      	mov	r9, r3
	last = last + 1;
   18cae:	b2ed      	uxtb	r5, r5
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   18cb0:	78b3      	ldrb	r3, [r6, #2]
		last = 0U;
   18cb2:	42a8      	cmp	r0, r5
   18cb4:	bf08      	it	eq
   18cb6:	2500      	moveq	r5, #0
	if (last == first) {
   18cb8:	42ab      	cmp	r3, r5
   18cba:	d01a      	beq.n	18cf2 <ull_prepare_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18cbc:	1d33      	adds	r3, r6, #4
   18cbe:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   18cc2:	b1b4      	cbz	r4, 18cf2 <ull_prepare_enqueue+0x5a>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   18cc4:	2210      	movs	r2, #16
   18cc6:	4620      	mov	r0, r4
   18cc8:	f00d fa4a 	bl	26160 <memcpy>
	e->prio = prio;
   18ccc:	9b08      	ldr	r3, [sp, #32]
   18cce:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
   18cd0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   18cd4:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->abort_cb = abort_cb;
   18cd8:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   18cda:	f362 0300 	bfi	r3, r2, #0, #1
	e->is_abort_cb = is_abort_cb;
   18cde:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_aborted = 0U;
   18ce2:	f36f 0341 	bfc	r3, #1, #1
   18ce6:	f884 3020 	strb.w	r3, [r4, #32]
	*last = idx; /* Commit: Update write index */
   18cea:	70f5      	strb	r5, [r6, #3]
	return 0;
   18cec:	2000      	movs	r0, #0
}
   18cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
   18cf2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   18cf6:	e7fa      	b.n	18cee <ull_prepare_enqueue+0x56>
   18cf8:	200007f4 	.word	0x200007f4

00018cfc <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   18cfc:	4b05      	ldr	r3, [pc, #20]	; (18d14 <ull_prepare_dequeue_get+0x18>)
   18cfe:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   18d00:	78d9      	ldrb	r1, [r3, #3]
   18d02:	7818      	ldrb	r0, [r3, #0]
   18d04:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   18d06:	bf1a      	itte	ne
   18d08:	3304      	addne	r3, #4
   18d0a:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   18d0e:	2000      	moveq	r0, #0
}
   18d10:	4770      	bx	lr
   18d12:	bf00      	nop
   18d14:	200007f4 	.word	0x200007f4

00018d18 <rx_demux>:
{
   18d18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   18d1c:	4e89      	ldr	r6, [pc, #548]	; (18f44 <rx_demux+0x22c>)
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   18d1e:	4c8a      	ldr	r4, [pc, #552]	; (18f48 <rx_demux+0x230>)
   18d20:	aa01      	add	r2, sp, #4
   18d22:	e9d4 0100 	ldrd	r0, r1, [r4]
   18d26:	f00f fd1c 	bl	28762 <memq_peek>
		if (link) {
   18d2a:	4605      	mov	r5, r0
   18d2c:	2800      	cmp	r0, #0
   18d2e:	f000 80f7 	beq.w	18f20 <rx_demux+0x208>
			LL_ASSERT(rx);
   18d32:	9b01      	ldr	r3, [sp, #4]
   18d34:	b95b      	cbnz	r3, 18d4e <rx_demux+0x36>
   18d36:	f44f 62e6 	mov.w	r2, #1840	; 0x730
   18d3a:	4984      	ldr	r1, [pc, #528]	; (18f4c <rx_demux+0x234>)
   18d3c:	4884      	ldr	r0, [pc, #528]	; (18f50 <rx_demux+0x238>)
   18d3e:	f00b fa7d 	bl	2423c <printk>
   18d42:	4040      	eors	r0, r0
   18d44:	f380 8811 	msr	BASEPRI, r0
   18d48:	f04f 0003 	mov.w	r0, #3
   18d4c:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   18d4e:	9b01      	ldr	r3, [sp, #4]
   18d50:	aa02      	add	r2, sp, #8
   18d52:	f10d 0102 	add.w	r1, sp, #2
   18d56:	7818      	ldrb	r0, [r3, #0]
   18d58:	f001 fe02 	bl	1a960 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   18d5c:	4602      	mov	r2, r0
   18d5e:	9801      	ldr	r0, [sp, #4]
   18d60:	b132      	cbz	r2, 18d70 <rx_demux+0x58>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   18d62:	9b02      	ldr	r3, [sp, #8]
   18d64:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   18d68:	7800      	ldrb	r0, [r0, #0]
				rx_demux_conn_tx_ack(ack_last, handle,
   18d6a:	f00f ffe8 	bl	28d3e <rx_demux_conn_tx_ack>
   18d6e:	e7d6      	b.n	18d1e <rx_demux+0x6>
	switch (rx->type) {
   18d70:	7903      	ldrb	r3, [r0, #4]
   18d72:	9003      	str	r0, [sp, #12]
   18d74:	2b03      	cmp	r3, #3
   18d76:	f000 80bf 	beq.w	18ef8 <rx_demux+0x1e0>
   18d7a:	d810      	bhi.n	18d9e <rx_demux+0x86>
   18d7c:	2b01      	cmp	r3, #1
   18d7e:	d015      	beq.n	18dac <rx_demux+0x94>
   18d80:	2b02      	cmp	r3, #2
   18d82:	d01a      	beq.n	18dba <rx_demux+0xa2>
		LL_ASSERT(0);
   18d84:	f640 0225 	movw	r2, #2085	; 0x825
   18d88:	4970      	ldr	r1, [pc, #448]	; (18f4c <rx_demux+0x234>)
   18d8a:	4871      	ldr	r0, [pc, #452]	; (18f50 <rx_demux+0x238>)
   18d8c:	f00b fa56 	bl	2423c <printk>
   18d90:	4040      	eors	r0, r0
   18d92:	f380 8811 	msr	BASEPRI, r0
   18d96:	f04f 0003 	mov.w	r0, #3
   18d9a:	df02      	svc	2
			if (nack) {
   18d9c:	e7bf      	b.n	18d1e <rx_demux+0x6>
	switch (rx->type) {
   18d9e:	2b13      	cmp	r3, #19
   18da0:	f000 80a1 	beq.w	18ee6 <rx_demux+0x1ce>
   18da4:	2b14      	cmp	r3, #20
   18da6:	d001      	beq.n	18dac <rx_demux+0x94>
   18da8:	2b04      	cmp	r3, #4
   18daa:	d1eb      	bne.n	18d84 <rx_demux+0x6c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   18dac:	4966      	ldr	r1, [pc, #408]	; (18f48 <rx_demux+0x230>)
   18dae:	6860      	ldr	r0, [r4, #4]
   18db0:	2200      	movs	r2, #0
   18db2:	f00f fcde 	bl	28772 <memq_dequeue>
		ll_rx_put(link, rx);
   18db6:	9903      	ldr	r1, [sp, #12]
   18db8:	e0ac      	b.n	18f14 <rx_demux+0x1fc>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   18dba:	6860      	ldr	r0, [r4, #4]
   18dbc:	4962      	ldr	r1, [pc, #392]	; (18f48 <rx_demux+0x230>)
   18dbe:	f00f fcd8 	bl	28772 <memq_dequeue>
		rx_demux_event_done(link, rx);
   18dc2:	9f03      	ldr	r7, [sp, #12]
	switch (done->extra.type) {
   18dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
	ull_hdr = done->param;
   18dc8:	69fc      	ldr	r4, [r7, #28]
	switch (done->extra.type) {
   18dca:	b123      	cbz	r3, 18dd6 <rx_demux+0xbe>
   18dcc:	2b01      	cmp	r3, #1
   18dce:	d16d      	bne.n	18eac <rx_demux+0x194>
		ull_conn_done(done);
   18dd0:	4638      	mov	r0, r7
   18dd2:	f001 fc8f 	bl	1a6f4 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   18dd6:	4a5f      	ldr	r2, [pc, #380]	; (18f54 <rx_demux+0x23c>)
   18dd8:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   18dda:	f892 c001 	ldrb.w	ip, [r2, #1]
   18dde:	7890      	ldrb	r0, [r2, #2]
	done->extra.type = 0U;
   18de0:	2300      	movs	r3, #0
   18de2:	f887 3020 	strb.w	r3, [r7, #32]
	last = last + 1;
   18de6:	1c4b      	adds	r3, r1, #1
   18de8:	b2db      	uxtb	r3, r3
		last = 0U;
   18dea:	459c      	cmp	ip, r3
   18dec:	bf08      	it	eq
   18dee:	2300      	moveq	r3, #0
	if (last == first) {
   18df0:	4298      	cmp	r0, r3
   18df2:	d168      	bne.n	18ec6 <rx_demux+0x1ae>
	LL_ASSERT(release == done);
   18df4:	f640 026c 	movw	r2, #2156	; 0x86c
   18df8:	4954      	ldr	r1, [pc, #336]	; (18f4c <rx_demux+0x234>)
   18dfa:	4855      	ldr	r0, [pc, #340]	; (18f50 <rx_demux+0x238>)
   18dfc:	f00b fa1e 	bl	2423c <printk>
   18e00:	4040      	eors	r0, r0
   18e02:	f380 8811 	msr	BASEPRI, r0
   18e06:	f04f 0003 	mov.w	r0, #3
   18e0a:	df02      	svc	2
	next = ull_prepare_dequeue_get();
   18e0c:	f7ff ff76 	bl	18cfc <ull_prepare_dequeue_get>
			mfy.param = next;
   18e10:	f8df 8144 	ldr.w	r8, [pc, #324]	; 18f58 <rx_demux+0x240>
	while (next) {
   18e14:	b350      	cbz	r0, 18e6c <rx_demux+0x154>
		uint8_t is_aborted = next->is_aborted;
   18e16:	f890 5020 	ldrb.w	r5, [r0, #32]
   18e1a:	f3c5 0740 	ubfx	r7, r5, #1, #1
		uint8_t is_resume = next->is_resume;
   18e1e:	f005 0501 	and.w	r5, r5, #1
		if (!is_aborted) {
   18e22:	b9a7      	cbnz	r7, 18e4e <rx_demux+0x136>
			mfy.param = next;
   18e24:	f8c8 0008 	str.w	r0, [r8, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   18e28:	4b4b      	ldr	r3, [pc, #300]	; (18f58 <rx_demux+0x240>)
   18e2a:	463a      	mov	r2, r7
   18e2c:	4639      	mov	r1, r7
   18e2e:	2001      	movs	r0, #1
   18e30:	f7fd fc18 	bl	16664 <mayfly_enqueue>
			LL_ASSERT(!ret);
   18e34:	b158      	cbz	r0, 18e4e <rx_demux+0x136>
   18e36:	f640 027d 	movw	r2, #2173	; 0x87d
   18e3a:	4944      	ldr	r1, [pc, #272]	; (18f4c <rx_demux+0x234>)
   18e3c:	4844      	ldr	r0, [pc, #272]	; (18f50 <rx_demux+0x238>)
   18e3e:	f00b f9fd 	bl	2423c <printk>
   18e42:	4040      	eors	r0, r0
   18e44:	f380 8811 	msr	BASEPRI, r0
   18e48:	f04f 0003 	mov.w	r0, #3
   18e4c:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   18e4e:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   18e50:	78f1      	ldrb	r1, [r6, #3]
		MFIFO_DEQUEUE(prep);
   18e52:	7872      	ldrb	r2, [r6, #1]
   18e54:	4299      	cmp	r1, r3
   18e56:	d005      	beq.n	18e64 <rx_demux+0x14c>
	_first += 1U;
   18e58:	3301      	adds	r3, #1
   18e5a:	b2db      	uxtb	r3, r3
		_first = 0U;
   18e5c:	429a      	cmp	r2, r3
   18e5e:	bf08      	it	eq
   18e60:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18e62:	70b3      	strb	r3, [r6, #2]

		next = ull_prepare_dequeue_get();
   18e64:	f7ff ff4a 	bl	18cfc <ull_prepare_dequeue_get>

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   18e68:	2800      	cmp	r0, #0
   18e6a:	d133      	bne.n	18ed4 <rx_demux+0x1bc>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   18e6c:	2c00      	cmp	r4, #0
   18e6e:	f43f af56 	beq.w	18d1e <rx_demux+0x6>
   18e72:	7823      	ldrb	r3, [r4, #0]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   18e74:	b95b      	cbnz	r3, 18e8e <rx_demux+0x176>
   18e76:	f640 028f 	movw	r2, #2191	; 0x88f
   18e7a:	4934      	ldr	r1, [pc, #208]	; (18f4c <rx_demux+0x234>)
   18e7c:	4834      	ldr	r0, [pc, #208]	; (18f50 <rx_demux+0x238>)
   18e7e:	f00b f9dd 	bl	2423c <printk>
   18e82:	4040      	eors	r0, r0
   18e84:	f380 8811 	msr	BASEPRI, r0
   18e88:	f04f 0003 	mov.w	r0, #3
   18e8c:	df02      	svc	2
	return hdr->ref--;
   18e8e:	7823      	ldrb	r3, [r4, #0]
   18e90:	3b01      	subs	r3, #1
   18e92:	b2db      	uxtb	r3, r3
   18e94:	7023      	strb	r3, [r4, #0]
	return hdr->ref;
   18e96:	7823      	ldrb	r3, [r4, #0]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   18e98:	2b00      	cmp	r3, #0
   18e9a:	f47f af40 	bne.w	18d1e <rx_demux+0x6>
   18e9e:	6863      	ldr	r3, [r4, #4]
   18ea0:	2b00      	cmp	r3, #0
   18ea2:	f43f af3c 	beq.w	18d1e <rx_demux+0x6>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   18ea6:	68a0      	ldr	r0, [r4, #8]
   18ea8:	4798      	blx	r3
			if (nack) {
   18eaa:	e738      	b.n	18d1e <rx_demux+0x6>
		LL_ASSERT(0);
   18eac:	f640 0265 	movw	r2, #2149	; 0x865
   18eb0:	4926      	ldr	r1, [pc, #152]	; (18f4c <rx_demux+0x234>)
   18eb2:	4827      	ldr	r0, [pc, #156]	; (18f50 <rx_demux+0x238>)
   18eb4:	f00b f9c2 	bl	2423c <printk>
   18eb8:	4040      	eors	r0, r0
   18eba:	f380 8811 	msr	BASEPRI, r0
   18ebe:	f04f 0003 	mov.w	r0, #3
   18ec2:	df02      	svc	2
		break;
   18ec4:	e787      	b.n	18dd6 <rx_demux+0xbe>
	done->hdr.link = link;
   18ec6:	603d      	str	r5, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   18ec8:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   18eca:	fb00 2101 	mla	r1, r0, r1, r2
   18ece:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   18ed0:	70d3      	strb	r3, [r2, #3]
	LL_ASSERT(release == done);
   18ed2:	e79b      	b.n	18e0c <rx_demux+0xf4>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   18ed4:	2f00      	cmp	r7, #0
   18ed6:	d19d      	bne.n	18e14 <rx_demux+0xfc>
   18ed8:	2d00      	cmp	r5, #0
   18eda:	d0c7      	beq.n	18e6c <rx_demux+0x154>
   18edc:	f890 3020 	ldrb.w	r3, [r0, #32]
   18ee0:	07db      	lsls	r3, r3, #31
   18ee2:	d4c3      	bmi.n	18e6c <rx_demux+0x154>
   18ee4:	e796      	b.n	18e14 <rx_demux+0xfc>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   18ee6:	4918      	ldr	r1, [pc, #96]	; (18f48 <rx_demux+0x230>)
   18ee8:	6860      	ldr	r0, [r4, #4]
   18eea:	f00f fc42 	bl	28772 <memq_dequeue>
		ull_conn_setup(link, rx);
   18eee:	9903      	ldr	r1, [sp, #12]
   18ef0:	4628      	mov	r0, r5
   18ef2:	f000 fe5f 	bl	19bb4 <ull_conn_setup>
			if (nack) {
   18ef6:	e712      	b.n	18d1e <rx_demux+0x6>
		nack = ull_conn_rx(link, (void *)&rx);
   18ef8:	a903      	add	r1, sp, #12
   18efa:	4628      	mov	r0, r5
   18efc:	f000 fe78 	bl	19bf0 <ull_conn_rx>
		if (nack) {
   18f00:	4602      	mov	r2, r0
   18f02:	b9d8      	cbnz	r0, 18f3c <rx_demux+0x224>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   18f04:	4910      	ldr	r1, [pc, #64]	; (18f48 <rx_demux+0x230>)
   18f06:	6860      	ldr	r0, [r4, #4]
   18f08:	f00f fc33 	bl	28772 <memq_dequeue>
		if (rx) {
   18f0c:	9903      	ldr	r1, [sp, #12]
   18f0e:	2900      	cmp	r1, #0
   18f10:	f43f af05 	beq.w	18d1e <rx_demux+0x6>
		ll_rx_put(link, rx);
   18f14:	4628      	mov	r0, r5
   18f16:	f7ff fd29 	bl	1896c <ll_rx_put>
		ll_rx_sched();
   18f1a:	f7ff fd31 	bl	18980 <ll_rx_sched>
			if (nack) {
   18f1e:	e6fe      	b.n	18d1e <rx_demux+0x6>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   18f20:	aa03      	add	r2, sp, #12
   18f22:	a902      	add	r1, sp, #8
   18f24:	f10d 0002 	add.w	r0, sp, #2
   18f28:	f001 fd02 	bl	1a930 <ull_conn_ack_peek>
			if (link) {
   18f2c:	4602      	mov	r2, r0
   18f2e:	b128      	cbz	r0, 18f3c <rx_demux+0x224>
				rx_demux_conn_tx_ack(ack_last, handle,
   18f30:	9b03      	ldr	r3, [sp, #12]
   18f32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   18f36:	f89d 0002 	ldrb.w	r0, [sp, #2]
   18f3a:	e716      	b.n	18d6a <rx_demux+0x52>
}
   18f3c:	b004      	add	sp, #16
   18f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f42:	bf00      	nop
   18f44:	200007f4 	.word	0x200007f4
   18f48:	2000292c 	.word	0x2000292c
   18f4c:	00030cd1 	.word	0x00030cd1
   18f50:	0002bced 	.word	0x0002bced
   18f54:	200007b8 	.word	0x200007b8
   18f58:	2000097c 	.word	0x2000097c

00018f5c <ull_prepare_dequeue_iter>:
{
   18f5c:	b530      	push	{r4, r5, lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   18f5e:	4b0c      	ldr	r3, [pc, #48]	; (18f90 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   18f60:	7801      	ldrb	r1, [r0, #0]
   18f62:	785c      	ldrb	r4, [r3, #1]
   18f64:	78dd      	ldrb	r5, [r3, #3]
   18f66:	781a      	ldrb	r2, [r3, #0]
   18f68:	42a1      	cmp	r1, r4
   18f6a:	bf24      	itt	cs
   18f6c:	789b      	ldrbcs	r3, [r3, #2]
		*idx = first;
   18f6e:	7003      	strbcs	r3, [r0, #0]
	if (*idx == last) {
   18f70:	7801      	ldrb	r1, [r0, #0]
   18f72:	428d      	cmp	r5, r1
   18f74:	d00a      	beq.n	18f8c <ull_prepare_dequeue_iter+0x30>
	i = *idx + 1;
   18f76:	1c4b      	adds	r3, r1, #1
   18f78:	b2db      	uxtb	r3, r3
		i = 0U;
   18f7a:	429c      	cmp	r4, r3
   18f7c:	bf08      	it	eq
   18f7e:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   18f80:	4c04      	ldr	r4, [pc, #16]	; (18f94 <ull_prepare_dequeue_iter+0x38>)
	*idx = i;
   18f82:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   18f84:	fb01 4202 	mla	r2, r1, r2, r4
}
   18f88:	4610      	mov	r0, r2
   18f8a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   18f8c:	2200      	movs	r2, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   18f8e:	e7fb      	b.n	18f88 <ull_prepare_dequeue_iter+0x2c>
   18f90:	200007f4 	.word	0x200007f4
   18f94:	200007f8 	.word	0x200007f8

00018f98 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   18f98:	4b06      	ldr	r3, [pc, #24]	; (18fb4 <ull_event_done_extra_get+0x1c>)
   18f9a:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   18f9c:	78d8      	ldrb	r0, [r3, #3]
   18f9e:	781a      	ldrb	r2, [r3, #0]
   18fa0:	4288      	cmp	r0, r1
   18fa2:	d005      	beq.n	18fb0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   18fa4:	fb01 3302 	mla	r3, r1, r2, r3
   18fa8:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   18faa:	b110      	cbz	r0, 18fb2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   18fac:	3020      	adds	r0, #32
   18fae:	4770      	bx	lr
		return NULL;
   18fb0:	2000      	movs	r0, #0
}
   18fb2:	4770      	bx	lr
   18fb4:	200007b8 	.word	0x200007b8

00018fb8 <ull_event_done>:
{
   18fb8:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   18fba:	4a10      	ldr	r2, [pc, #64]	; (18ffc <ull_event_done+0x44>)
	uint8_t _first = *first; /* Copy read-index */
   18fbc:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   18fbe:	78d4      	ldrb	r4, [r2, #3]
   18fc0:	7811      	ldrb	r1, [r2, #0]
   18fc2:	7855      	ldrb	r5, [r2, #1]
   18fc4:	429c      	cmp	r4, r3
   18fc6:	d017      	beq.n	18ff8 <ull_event_done+0x40>
	mem = *((void **)(fifo + _first * size));
   18fc8:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   18fcc:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   18fce:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   18fd0:	b2db      	uxtb	r3, r3
		_first = 0U;
   18fd2:	429d      	cmp	r5, r3
   18fd4:	bf08      	it	eq
   18fd6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18fd8:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   18fda:	b15c      	cbz	r4, 18ff4 <ull_event_done+0x3c>
	link = evdone->hdr.link;
   18fdc:	6823      	ldr	r3, [r4, #0]
	evdone->param = param;
   18fde:	61e0      	str	r0, [r4, #28]
	evdone->hdr.link = NULL;
   18fe0:	2200      	movs	r2, #0
   18fe2:	6022      	str	r2, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   18fe4:	2202      	movs	r2, #2
   18fe6:	7122      	strb	r2, [r4, #4]
	ull_rx_put(link, evdone);
   18fe8:	4621      	mov	r1, r4
   18fea:	4618      	mov	r0, r3
   18fec:	f7ff fe3c 	bl	18c68 <ull_rx_put>
	ull_rx_sched();
   18ff0:	f7ff fe4a 	bl	18c88 <ull_rx_sched>
}
   18ff4:	4620      	mov	r0, r4
   18ff6:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   18ff8:	2400      	movs	r4, #0
   18ffa:	e7fb      	b.n	18ff4 <ull_event_done+0x3c>
   18ffc:	200007b8 	.word	0x200007b8

00019000 <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   19000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   19002:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   19004:	6c6b      	ldr	r3, [r5, #68]	; 0x44
{
   19006:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   19008:	b95b      	cbnz	r3, 19022 <disabled_cb+0x22>
   1900a:	f240 7213 	movw	r2, #1811	; 0x713
   1900e:	4919      	ldr	r1, [pc, #100]	; (19074 <disabled_cb+0x74>)
   19010:	4819      	ldr	r0, [pc, #100]	; (19078 <disabled_cb+0x78>)
   19012:	f00b f913 	bl	2423c <printk>
   19016:	4040      	eors	r0, r0
   19018:	f380 8811 	msr	BASEPRI, r0
   1901c:	f04f 0003 	mov.w	r0, #3
   19020:	df02      	svc	2
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;
   19022:	2300      	movs	r3, #0
	link = adv->link_cc_free;
   19024:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   19026:	646b      	str	r3, [r5, #68]	; 0x44

	LL_ASSERT(adv->node_rx_cc_free);
   19028:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1902a:	b95b      	cbnz	r3, 19044 <disabled_cb+0x44>
   1902c:	f240 7217 	movw	r2, #1815	; 0x717
   19030:	4910      	ldr	r1, [pc, #64]	; (19074 <disabled_cb+0x74>)
   19032:	4811      	ldr	r0, [pc, #68]	; (19078 <disabled_cb+0x78>)
   19034:	f00b f902 	bl	2423c <printk>
   19038:	4040      	eors	r0, r0
   1903a:	f380 8811 	msr	BASEPRI, r0
   1903e:	f04f 0003 	mov.w	r0, #3
   19042:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   19044:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->node_rx_cc_free = NULL;
   19046:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   19048:	2313      	movs	r3, #19
	adv->node_rx_cc_free = NULL;
   1904a:	64a9      	str	r1, [r5, #72]	; 0x48
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1904c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1904e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19052:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   19054:	2212      	movs	r2, #18
   19056:	f104 001c 	add.w	r0, r4, #28
   1905a:	f00d f8ab 	bl	261b4 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1905e:	233c      	movs	r3, #60	; 0x3c
   19060:	7723      	strb	r3, [r4, #28]

	rx->hdr.rx_ftr.param = param;
   19062:	60a6      	str	r6, [r4, #8]

		link = rx->hdr.link;
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	ll_rx_put(link, rx);
   19064:	4621      	mov	r1, r4
   19066:	4638      	mov	r0, r7
   19068:	f7ff fc80 	bl	1896c <ll_rx_put>
	ll_rx_sched();
}
   1906c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   19070:	f7ff bc86 	b.w	18980 <ll_rx_sched>
   19074:	00030d18 	.word	0x00030d18
   19078:	0002bced 	.word	0x0002bced

0001907c <ticker_cb>:
{
   1907c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1907e:	461d      	mov	r5, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   19080:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19084:	429a      	cmp	r2, r3
{
   19086:	b08b      	sub	sp, #44	; 0x2c
   19088:	4607      	mov	r7, r0
   1908a:	460e      	mov	r6, r1
   1908c:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1908e:	d02b      	beq.n	190e8 <ticker_cb+0x6c>
	return ++hdr->ref;
   19090:	7c2b      	ldrb	r3, [r5, #16]
   19092:	3301      	adds	r3, #1
   19094:	b2db      	uxtb	r3, r3
   19096:	742b      	strb	r3, [r5, #16]
		LL_ASSERT(ref);
   19098:	b95b      	cbnz	r3, 190b2 <ticker_cb+0x36>
   1909a:	f240 6287 	movw	r2, #1671	; 0x687
   1909e:	492d      	ldr	r1, [pc, #180]	; (19154 <ticker_cb+0xd8>)
   190a0:	482d      	ldr	r0, [pc, #180]	; (19158 <ticker_cb+0xdc>)
   190a2:	f00b f8cb 	bl	2423c <printk>
   190a6:	4040      	eors	r0, r0
   190a8:	f380 8811 	msr	BASEPRI, r0
   190ac:	f04f 0003 	mov.w	r0, #3
   190b0:	df02      	svc	2
		p.ticks_at_expire = ticks_at_expire;
   190b2:	4a2a      	ldr	r2, [pc, #168]	; (1915c <ticker_cb+0xe0>)
	lll = &adv->lll;
   190b4:	f105 031c 	add.w	r3, r5, #28
		p.param = lll;
   190b8:	60d3      	str	r3, [r2, #12]
		mfy.param = &p;
   190ba:	4b29      	ldr	r3, [pc, #164]	; (19160 <ticker_cb+0xe4>)
		p.lazy = lazy;
   190bc:	8114      	strh	r4, [r2, #8]
		p.remainder = remainder;
   190be:	e9c2 7600 	strd	r7, r6, [r2]
		mfy.param = &p;
   190c2:	609a      	str	r2, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   190c4:	2200      	movs	r2, #0
   190c6:	4611      	mov	r1, r2
   190c8:	2001      	movs	r0, #1
   190ca:	f7fd facb 	bl	16664 <mayfly_enqueue>
		LL_ASSERT(!ret);
   190ce:	b158      	cbz	r0, 190e8 <ticker_cb+0x6c>
   190d0:	f240 6293 	movw	r2, #1683	; 0x693
   190d4:	491f      	ldr	r1, [pc, #124]	; (19154 <ticker_cb+0xd8>)
   190d6:	4820      	ldr	r0, [pc, #128]	; (19158 <ticker_cb+0xdc>)
   190d8:	f00b f8b0 	bl	2423c <printk>
   190dc:	4040      	eors	r0, r0
   190de:	f380 8811 	msr	BASEPRI, r0
   190e2:	f04f 0003 	mov.w	r0, #3
   190e6:	df02      	svc	2
	if (!lll->is_hdcd)
   190e8:	f895 4028 	ldrb.w	r4, [r5, #40]	; 0x28
   190ec:	f014 0401 	ands.w	r4, r4, #1
   190f0:	d12e      	bne.n	19150 <ticker_cb+0xd4>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   190f2:	2104      	movs	r1, #4
   190f4:	a809      	add	r0, sp, #36	; 0x24
   190f6:	f010 f8b8 	bl	2926a <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   190fa:	9909      	ldr	r1, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   190fc:	9506      	str	r5, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   190fe:	f240 1247 	movw	r2, #327	; 0x147
   19102:	fbb1 f3f2 	udiv	r3, r1, r2
   19106:	fb02 1313 	mls	r3, r2, r3, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1910a:	4a16      	ldr	r2, [pc, #88]	; (19164 <ticker_cb+0xe8>)
   1910c:	2150      	movs	r1, #80	; 0x50
   1910e:	1aaa      	subs	r2, r5, r2
   19110:	fbb2 f2f1 	udiv	r2, r2, r1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19114:	4914      	ldr	r1, [pc, #80]	; (19168 <ticker_cb+0xec>)
				    (TICKER_ID_ADV_BASE +
   19116:	3202      	adds	r2, #2
		random_delay += 1;
   19118:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1911a:	e9cd 4104 	strd	r4, r1, [sp, #16]
   1911e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   19122:	e9cd 4400 	strd	r4, r4, [sp]
   19126:	b2d2      	uxtb	r2, r2
   19128:	2101      	movs	r1, #1
   1912a:	4620      	mov	r0, r4
		random_delay += 1;
   1912c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1912e:	f00f fd7f 	bl	28c30 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   19132:	f030 0302 	bics.w	r3, r0, #2
   19136:	d00b      	beq.n	19150 <ticker_cb+0xd4>
   19138:	f240 62aa 	movw	r2, #1706	; 0x6aa
   1913c:	4905      	ldr	r1, [pc, #20]	; (19154 <ticker_cb+0xd8>)
   1913e:	4806      	ldr	r0, [pc, #24]	; (19158 <ticker_cb+0xdc>)
   19140:	f00b f87c 	bl	2423c <printk>
   19144:	4040      	eors	r0, r0
   19146:	f380 8811 	msr	BASEPRI, r0
   1914a:	f04f 0003 	mov.w	r0, #3
   1914e:	df02      	svc	2
}
   19150:	b00b      	add	sp, #44	; 0x2c
   19152:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19154:	00030d18 	.word	0x00030d18
   19158:	0002bced 	.word	0x0002bced
   1915c:	20002dcc 	.word	0x20002dcc
   19160:	2000098c 	.word	0x2000098c
   19164:	20002d70 	.word	0x20002d70
   19168:	00019271 	.word	0x00019271

0001916c <conn_release>:

static void conn_release(struct ll_adv_set *adv)
{
   1916c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1916e:	6a45      	ldr	r5, [r0, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   19170:	6d2b      	ldr	r3, [r5, #80]	; 0x50
{
   19172:	4604      	mov	r4, r0
	LL_ASSERT(!lll->link_tx_free);
   19174:	b15b      	cbz	r3, 1918e <conn_release+0x22>
   19176:	f240 7241 	movw	r2, #1857	; 0x741
   1917a:	4916      	ldr	r1, [pc, #88]	; (191d4 <conn_release+0x68>)
   1917c:	4816      	ldr	r0, [pc, #88]	; (191d8 <conn_release+0x6c>)
   1917e:	f00b f85d 	bl	2423c <printk>
   19182:	4040      	eors	r0, r0
   19184:	f380 8811 	msr	BASEPRI, r0
   19188:	f04f 0003 	mov.w	r0, #3
   1918c:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1918e:	f105 0144 	add.w	r1, r5, #68	; 0x44
   19192:	f105 0040 	add.w	r0, r5, #64	; 0x40
   19196:	f00f fad2 	bl	2873e <memq_deinit>
	LL_ASSERT(link);
   1919a:	4606      	mov	r6, r0
   1919c:	b958      	cbnz	r0, 191b6 <conn_release+0x4a>
   1919e:	f240 7243 	movw	r2, #1859	; 0x743
   191a2:	490c      	ldr	r1, [pc, #48]	; (191d4 <conn_release+0x68>)
   191a4:	480c      	ldr	r0, [pc, #48]	; (191d8 <conn_release+0x6c>)
   191a6:	f00b f849 	bl	2423c <printk>
   191aa:	4040      	eors	r0, r0
   191ac:	f380 8811 	msr	BASEPRI, r0
   191b0:	f04f 0003 	mov.w	r0, #3
   191b4:	df02      	svc	2
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   191b6:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   191b8:	652e      	str	r6, [r5, #80]	; 0x50
	adv->lll.conn = NULL;
   191ba:	2500      	movs	r5, #0
	ll_conn_release(lll->hdr.parent);
   191bc:	f000 fc00 	bl	199c0 <ll_conn_release>

	ll_rx_release(adv->node_rx_cc_free);
   191c0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   191c2:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   191c4:	f7ff fbcc 	bl	18960 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
   191c8:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   191ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
   191cc:	f7ff fbbc 	bl	18948 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   191d0:	6465      	str	r5, [r4, #68]	; 0x44
}
   191d2:	bd70      	pop	{r4, r5, r6, pc}
   191d4:	00030d18 	.word	0x00030d18
   191d8:	0002bced 	.word	0x0002bced

000191dc <ticker_op_stop_cb>:
{
   191dc:	b570      	push	{r4, r5, r6, lr}
   191de:	460c      	mov	r4, r1
	if (status != TICKER_STATUS_SUCCESS) {
   191e0:	2800      	cmp	r0, #0
   191e2:	d12f      	bne.n	19244 <ticker_op_stop_cb+0x68>
	mfy.param = &adv->lll;
   191e4:	f101 021c 	add.w	r2, r1, #28
   191e8:	4b1c      	ldr	r3, [pc, #112]	; (1925c <ticker_op_stop_cb+0x80>)
	return hdr->ref;
   191ea:	7c09      	ldrb	r1, [r1, #16]
   191ec:	609a      	str	r2, [r3, #8]
   191ee:	461e      	mov	r6, r3
	if (ull_ref_get(hdr)) {
   191f0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   191f4:	4d1a      	ldr	r5, [pc, #104]	; (19260 <ticker_op_stop_cb+0x84>)
   191f6:	b331      	cbz	r1, 19246 <ticker_op_stop_cb+0x6a>
		LL_ASSERT(!hdr->disabled_cb);
   191f8:	6963      	ldr	r3, [r4, #20]
   191fa:	b15b      	cbz	r3, 19214 <ticker_op_stop_cb+0x38>
   191fc:	f240 62fa 	movw	r2, #1786	; 0x6fa
   19200:	4918      	ldr	r1, [pc, #96]	; (19264 <ticker_op_stop_cb+0x88>)
   19202:	4819      	ldr	r0, [pc, #100]	; (19268 <ticker_op_stop_cb+0x8c>)
   19204:	f00b f81a 	bl	2423c <printk>
   19208:	4040      	eors	r0, r0
   1920a:	f380 8811 	msr	BASEPRI, r0
   1920e:	f04f 0003 	mov.w	r0, #3
   19212:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   19214:	68b3      	ldr	r3, [r6, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19216:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   19218:	e9c4 5305 	strd	r5, r3, [r4, #20]
		mfy.fp = lll_disable;
   1921c:	4b13      	ldr	r3, [pc, #76]	; (1926c <ticker_op_stop_cb+0x90>)
   1921e:	60f3      	str	r3, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19220:	4611      	mov	r1, r2
   19222:	4b0e      	ldr	r3, [pc, #56]	; (1925c <ticker_op_stop_cb+0x80>)
   19224:	2002      	movs	r0, #2
   19226:	f7fd fa1d 	bl	16664 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1922a:	b158      	cbz	r0, 19244 <ticker_op_stop_cb+0x68>
   1922c:	f240 7201 	movw	r2, #1793	; 0x701
		LL_ASSERT(!ret);
   19230:	490c      	ldr	r1, [pc, #48]	; (19264 <ticker_op_stop_cb+0x88>)
   19232:	480d      	ldr	r0, [pc, #52]	; (19268 <ticker_op_stop_cb+0x8c>)
   19234:	f00b f802 	bl	2423c <printk>
   19238:	4040      	eors	r0, r0
   1923a:	f380 8811 	msr	BASEPRI, r0
   1923e:	f04f 0003 	mov.w	r0, #3
   19242:	df02      	svc	2
}
   19244:	bd70      	pop	{r4, r5, r6, pc}
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   19246:	2101      	movs	r1, #1
   19248:	2002      	movs	r0, #2
		mfy.fp = disabled_cb;
   1924a:	60dd      	str	r5, [r3, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1924c:	f7fd fa0a 	bl	16664 <mayfly_enqueue>
		LL_ASSERT(!ret);
   19250:	2800      	cmp	r0, #0
   19252:	d0f7      	beq.n	19244 <ticker_op_stop_cb+0x68>
   19254:	f240 7206 	movw	r2, #1798	; 0x706
   19258:	e7ea      	b.n	19230 <ticker_op_stop_cb+0x54>
   1925a:	bf00      	nop
   1925c:	2000099c 	.word	0x2000099c
   19260:	00019001 	.word	0x00019001
   19264:	00030d18 	.word	0x00030d18
   19268:	0002bced 	.word	0x0002bced
   1926c:	0001b1a1 	.word	0x0001b1a1

00019270 <ticker_op_update_cb>:
{
   19270:	b510      	push	{r4, lr}
   19272:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   19274:	b178      	cbz	r0, 19296 <ticker_op_update_cb+0x26>
   19276:	f7ff fc39 	bl	18aec <ull_disable_mark_get>
   1927a:	4284      	cmp	r4, r0
   1927c:	d00b      	beq.n	19296 <ticker_op_update_cb+0x26>
   1927e:	f240 62cb 	movw	r2, #1739	; 0x6cb
   19282:	4905      	ldr	r1, [pc, #20]	; (19298 <ticker_op_update_cb+0x28>)
   19284:	4805      	ldr	r0, [pc, #20]	; (1929c <ticker_op_update_cb+0x2c>)
   19286:	f00a ffd9 	bl	2423c <printk>
   1928a:	4040      	eors	r0, r0
   1928c:	f380 8811 	msr	BASEPRI, r0
   19290:	f04f 0003 	mov.w	r0, #3
   19294:	df02      	svc	2
}
   19296:	bd10      	pop	{r4, pc}
   19298:	00030d18 	.word	0x00030d18
   1929c:	0002bced 	.word	0x0002bced

000192a0 <init_reset.part.3>:
static int init_reset(void)
   192a0:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   192a2:	4c05      	ldr	r4, [pc, #20]	; (192b8 <init_reset.part.3+0x18>)
   192a4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   192a8:	f002 f996 	bl	1b5d8 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   192ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
}
   192b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   192b4:	f002 b990 	b.w	1b5d8 <lll_adv_data_init>
   192b8:	20002d70 	.word	0x20002d70

000192bc <ticker_stop_cb>:
{
   192bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   192be:	4c17      	ldr	r4, [pc, #92]	; (1931c <ticker_stop_cb+0x60>)
   192c0:	2250      	movs	r2, #80	; 0x50
   192c2:	1b1c      	subs	r4, r3, r4
   192c4:	fbb4 f4f2 	udiv	r4, r4, r2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   192c8:	f014 0fff 	tst.w	r4, #255	; 0xff
{
   192cc:	461d      	mov	r5, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   192ce:	d00b      	beq.n	192e8 <ticker_stop_cb+0x2c>
   192d0:	f240 62d7 	movw	r2, #1751	; 0x6d7
   192d4:	4912      	ldr	r1, [pc, #72]	; (19320 <ticker_stop_cb+0x64>)
   192d6:	4813      	ldr	r0, [pc, #76]	; (19324 <ticker_stop_cb+0x68>)
   192d8:	f00a ffb0 	bl	2423c <printk>
   192dc:	4040      	eors	r0, r0
   192de:	f380 8811 	msr	BASEPRI, r0
   192e2:	f04f 0003 	mov.w	r0, #3
   192e6:	df02      	svc	2
			  TICKER_ID_ADV_BASE + handle,
   192e8:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   192ea:	4b0f      	ldr	r3, [pc, #60]	; (19328 <ticker_stop_cb+0x6c>)
   192ec:	9500      	str	r5, [sp, #0]
   192ee:	b2d2      	uxtb	r2, r2
   192f0:	2101      	movs	r1, #1
   192f2:	2000      	movs	r0, #0
   192f4:	f7fd ff8c 	bl	17210 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   192f8:	f030 0302 	bics.w	r3, r0, #2
   192fc:	d00b      	beq.n	19316 <ticker_stop_cb+0x5a>
   192fe:	f240 62dd 	movw	r2, #1757	; 0x6dd
   19302:	4907      	ldr	r1, [pc, #28]	; (19320 <ticker_stop_cb+0x64>)
   19304:	4807      	ldr	r0, [pc, #28]	; (19324 <ticker_stop_cb+0x68>)
   19306:	f00a ff99 	bl	2423c <printk>
   1930a:	4040      	eors	r0, r0
   1930c:	f380 8811 	msr	BASEPRI, r0
   19310:	f04f 0003 	mov.w	r0, #3
   19314:	df02      	svc	2
}
   19316:	b003      	add	sp, #12
   19318:	bd30      	pop	{r4, r5, pc}
   1931a:	bf00      	nop
   1931c:	20002d70 	.word	0x20002d70
   19320:	00030d18 	.word	0x00030d18
   19324:	0002bced 	.word	0x0002bced
   19328:	000191dd 	.word	0x000191dd

0001932c <ll_adv_params_set>:
{
   1932c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1932e:	4c31      	ldr	r4, [pc, #196]	; (193f4 <ll_adv_params_set+0xc8>)
   19330:	9400      	str	r4, [sp, #0]
   19332:	2401      	movs	r4, #1
   19334:	f88d 4004 	strb.w	r4, [sp, #4]
	if (!adv || adv->is_enabled) {
   19338:	4c2f      	ldr	r4, [pc, #188]	; (193f8 <ll_adv_params_set+0xcc>)
   1933a:	f894 504e 	ldrb.w	r5, [r4, #78]	; 0x4e
   1933e:	f015 0501 	ands.w	r5, r5, #1
   19342:	d155      	bne.n	193f0 <ll_adv_params_set+0xc4>
		adv->interval = 0;
   19344:	2901      	cmp	r1, #1
   19346:	bf08      	it	eq
   19348:	2000      	moveq	r0, #0
   1934a:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	adv->lll.chan_map = chan_map;
   1934e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   19352:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   19356:	f366 0043 	bfi	r0, r6, #1, #3
   1935a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	adv->lll.filter_policy = filter_policy;
   1935e:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   19362:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   19366:	f366 0001 	bfi	r0, r6, #0, #2
   1936a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1936e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   19372:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   19376:	f002 0701 	and.w	r7, r2, #1
   1937a:	6b06      	ldr	r6, [r0, #48]	; 0x30
	pdu->type = pdu_adv_type[adv_type];
   1937c:	a802      	add	r0, sp, #8
   1937e:	4408      	add	r0, r1
   19380:	7831      	ldrb	r1, [r6, #0]
   19382:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   19386:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   1938a:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1938e:	f001 020f 	and.w	r2, r1, #15
   19392:	2a01      	cmp	r2, #1
	pdu->rfu = 0;
   19394:	7031      	strb	r1, [r6, #0]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19396:	d121      	bne.n	193dc <ll_adv_params_set+0xb0>
		pdu->rx_addr = direct_addr_type;
   19398:	4630      	mov	r0, r6
		pdu->tx_addr = own_addr_type & 0x1;
   1939a:	f367 1186 	bfi	r1, r7, #6, #1
		pdu->rx_addr = direct_addr_type;
   1939e:	f363 11c7 	bfi	r1, r3, #7, #1
   193a2:	f800 1b08 	strb.w	r1, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   193a6:	2206      	movs	r2, #6
   193a8:	9908      	ldr	r1, [sp, #32]
   193aa:	f00c fed9 	bl	26160 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   193ae:	230c      	movs	r3, #12
		pdu->len = BDADDR_SIZE;
   193b0:	7073      	strb	r3, [r6, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   193b2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   193b6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   193ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		pdu->tx_addr = own_addr_type & 0x1;
   193bc:	7813      	ldrb	r3, [r2, #0]
   193be:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   193c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   193c6:	f043 0304 	orr.w	r3, r3, #4
   193ca:	7013      	strb	r3, [r2, #0]
		if (pdu->len == 0) {
   193cc:	7853      	ldrb	r3, [r2, #1]
   193ce:	b913      	cbnz	r3, 193d6 <ll_adv_params_set+0xaa>
			pdu->len = BDADDR_SIZE;
   193d0:	2106      	movs	r1, #6
   193d2:	7051      	strb	r1, [r2, #1]
	return 0;
   193d4:	461d      	mov	r5, r3
}
   193d6:	4628      	mov	r0, r5
   193d8:	b003      	add	sp, #12
   193da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   193dc:	f367 1186 	bfi	r1, r7, #6, #1
	} else if (pdu->len == 0) {
   193e0:	7873      	ldrb	r3, [r6, #1]
		pdu->rx_addr = 0;
   193e2:	f365 11c7 	bfi	r1, r5, #7, #1
   193e6:	7031      	strb	r1, [r6, #0]
	} else if (pdu->len == 0) {
   193e8:	2b00      	cmp	r3, #0
   193ea:	d1e2      	bne.n	193b2 <ll_adv_params_set+0x86>
		pdu->len = BDADDR_SIZE;
   193ec:	2306      	movs	r3, #6
   193ee:	e7df      	b.n	193b0 <ll_adv_params_set+0x84>
		return BT_HCI_ERR_CMD_DISALLOWED;
   193f0:	250c      	movs	r5, #12
   193f2:	e7f0      	b.n	193d6 <ll_adv_params_set+0xaa>
   193f4:	02060100 	.word	0x02060100
   193f8:	20002d70 	.word	0x20002d70

000193fc <ull_adv_reset_finalize>:
{
   193fc:	b510      	push	{r4, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   193fe:	4c06      	ldr	r4, [pc, #24]	; (19418 <ull_adv_reset_finalize+0x1c>)
   19400:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   19404:	f00f ff9f 	bl	29346 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   19408:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1940c:	f00f ff9b 	bl	29346 <lll_adv_data_reset>
	for (handle = 0U; handle < BT_CTLR_ADV_SET; handle++) {
   19410:	f7ff ff46 	bl	192a0 <init_reset.part.3>
}
   19414:	2000      	movs	r0, #0
   19416:	bd10      	pop	{r4, pc}
   19418:	20002d70 	.word	0x20002d70

0001941c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1941c:	4b03      	ldr	r3, [pc, #12]	; (1942c <ull_adv_handle_get+0x10>)
   1941e:	1ac0      	subs	r0, r0, r3
   19420:	2350      	movs	r3, #80	; 0x50
   19422:	fbb0 f0f3 	udiv	r0, r0, r3
}
   19426:	b280      	uxth	r0, r0
   19428:	4770      	bx	lr
   1942a:	bf00      	nop
   1942c:	20002d70 	.word	0x20002d70

00019430 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   19430:	6800      	ldr	r0, [r0, #0]
   19432:	4b03      	ldr	r3, [pc, #12]	; (19440 <ull_adv_lll_handle_get+0x10>)
   19434:	1ac0      	subs	r0, r0, r3
   19436:	2350      	movs	r3, #80	; 0x50
   19438:	fbb0 f0f3 	udiv	r0, r0, r3
}
   1943c:	b280      	uxth	r0, r0
   1943e:	4770      	bx	lr
   19440:	20002d70 	.word	0x20002d70

00019444 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   19444:	b938      	cbnz	r0, 19456 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   19446:	4805      	ldr	r0, [pc, #20]	; (1945c <ull_adv_is_enabled_get+0x18>)
   19448:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   1944c:	f013 0f01 	tst.w	r3, #1
   19450:	bf08      	it	eq
   19452:	2000      	moveq	r0, #0
   19454:	4770      	bx	lr
		return NULL;
   19456:	2000      	movs	r0, #0
}
   19458:	4770      	bx	lr
   1945a:	bf00      	nop
   1945c:	20002d70 	.word	0x20002d70

00019460 <disable.constprop.6>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   19460:	b530      	push	{r4, r5, lr}
	uint32_t volatile ret_cb;
	struct ll_adv_set *adv;
	void *mark;
	uint32_t ret;

	adv = ull_adv_is_enabled_get(handle);
   19462:	2000      	movs	r0, #0
static inline uint8_t disable(uint8_t handle)
   19464:	b085      	sub	sp, #20
	adv = ull_adv_is_enabled_get(handle);
   19466:	f7ff ffed 	bl	19444 <ull_adv_is_enabled_get>
	if (!adv) {
   1946a:	4604      	mov	r4, r0
   1946c:	b910      	cbnz	r0, 19474 <disable.constprop.6+0x14>
		ret = ull_ticker_status_take(ret, &ret_cb);
		if (ret) {
			mark = ull_disable_unmark(adv);
			LL_ASSERT(mark == adv);

			return BT_HCI_ERR_CMD_DISALLOWED;
   1946e:	200c      	movs	r0, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
}
   19470:	b005      	add	sp, #20
   19472:	bd30      	pop	{r4, r5, pc}
	mark = ull_disable_mark(adv);
   19474:	f7ff fb24 	bl	18ac0 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   19478:	4284      	cmp	r4, r0
   1947a:	d00b      	beq.n	19494 <disable.constprop.6+0x34>
   1947c:	f240 7296 	movw	r2, #1942	; 0x796
   19480:	4938      	ldr	r1, [pc, #224]	; (19564 <disable.constprop.6+0x104>)
   19482:	4839      	ldr	r0, [pc, #228]	; (19568 <disable.constprop.6+0x108>)
   19484:	f00a feda 	bl	2423c <printk>
   19488:	4040      	eors	r0, r0
   1948a:	f380 8811 	msr	BASEPRI, r0
   1948e:	f04f 0003 	mov.w	r0, #3
   19492:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   19494:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19498:	f013 0f01 	tst.w	r3, #1
   1949c:	ad03      	add	r5, sp, #12
   1949e:	d01e      	beq.n	194de <disable.constprop.6+0x7e>
		ret_cb = TICKER_STATUS_BUSY;
   194a0:	2302      	movs	r3, #2
   194a2:	9303      	str	r3, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   194a4:	2103      	movs	r1, #3
   194a6:	9500      	str	r5, [sp, #0]
   194a8:	4b30      	ldr	r3, [pc, #192]	; (1956c <disable.constprop.6+0x10c>)
   194aa:	2201      	movs	r2, #1
   194ac:	2000      	movs	r0, #0
   194ae:	f7fd feaf 	bl	17210 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   194b2:	4629      	mov	r1, r5
   194b4:	f7ff fae0 	bl	18a78 <ull_ticker_status_take>
		if (ret) {
   194b8:	b188      	cbz	r0, 194de <disable.constprop.6+0x7e>
			mark = ull_disable_unmark(adv);
   194ba:	4620      	mov	r0, r4
   194bc:	f7ff fb08 	bl	18ad0 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   194c0:	4284      	cmp	r4, r0
   194c2:	d0d4      	beq.n	1946e <disable.constprop.6+0xe>
   194c4:	f240 72a1 	movw	r2, #1953	; 0x7a1
   194c8:	4926      	ldr	r1, [pc, #152]	; (19564 <disable.constprop.6+0x104>)
   194ca:	4827      	ldr	r0, [pc, #156]	; (19568 <disable.constprop.6+0x108>)
   194cc:	f00a feb6 	bl	2423c <printk>
   194d0:	4040      	eors	r0, r0
   194d2:	f380 8811 	msr	BASEPRI, r0
   194d6:	f04f 0003 	mov.w	r0, #3
   194da:	df02      	svc	2
   194dc:	e7c7      	b.n	1946e <disable.constprop.6+0xe>
	ret_cb = TICKER_STATUS_BUSY;
   194de:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   194e0:	2103      	movs	r1, #3
   194e2:	9500      	str	r5, [sp, #0]
   194e4:	4b21      	ldr	r3, [pc, #132]	; (1956c <disable.constprop.6+0x10c>)
	ret_cb = TICKER_STATUS_BUSY;
   194e6:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   194e8:	2000      	movs	r0, #0
   194ea:	f7fd fe91 	bl	17210 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   194ee:	4629      	mov	r1, r5
   194f0:	f7ff fac2 	bl	18a78 <ull_ticker_status_take>
	if (ret) {
   194f4:	b138      	cbz	r0, 19506 <disable.constprop.6+0xa6>
		mark = ull_disable_unmark(adv);
   194f6:	4620      	mov	r0, r4
   194f8:	f7ff faea 	bl	18ad0 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   194fc:	4284      	cmp	r4, r0
   194fe:	d0b6      	beq.n	1946e <disable.constprop.6+0xe>
   19500:	f240 72af 	movw	r2, #1967	; 0x7af
   19504:	e7e0      	b.n	194c8 <disable.constprop.6+0x68>
	ret = ull_disable(&adv->lll);
   19506:	f104 001c 	add.w	r0, r4, #28
   1950a:	f7ff fb11 	bl	18b30 <ull_disable>
	LL_ASSERT(!ret);
   1950e:	b158      	cbz	r0, 19528 <disable.constprop.6+0xc8>
   19510:	f240 72b5 	movw	r2, #1973	; 0x7b5
   19514:	4913      	ldr	r1, [pc, #76]	; (19564 <disable.constprop.6+0x104>)
   19516:	4814      	ldr	r0, [pc, #80]	; (19568 <disable.constprop.6+0x108>)
   19518:	f00a fe90 	bl	2423c <printk>
   1951c:	4040      	eors	r0, r0
   1951e:	f380 8811 	msr	BASEPRI, r0
   19522:	f04f 0003 	mov.w	r0, #3
   19526:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   19528:	4620      	mov	r0, r4
   1952a:	f7ff fad1 	bl	18ad0 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1952e:	4284      	cmp	r4, r0
   19530:	d00b      	beq.n	1954a <disable.constprop.6+0xea>
   19532:	f44f 62f7 	mov.w	r2, #1976	; 0x7b8
   19536:	490b      	ldr	r1, [pc, #44]	; (19564 <disable.constprop.6+0x104>)
   19538:	480b      	ldr	r0, [pc, #44]	; (19568 <disable.constprop.6+0x108>)
   1953a:	f00a fe7f 	bl	2423c <printk>
   1953e:	4040      	eors	r0, r0
   19540:	f380 8811 	msr	BASEPRI, r0
   19544:	f04f 0003 	mov.w	r0, #3
   19548:	df02      	svc	2
	if (adv->lll.conn) {
   1954a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1954c:	b113      	cbz	r3, 19554 <disable.constprop.6+0xf4>
		conn_release(adv);
   1954e:	4620      	mov	r0, r4
   19550:	f7ff fe0c 	bl	1916c <conn_release>
	adv->is_enabled = 0U;
   19554:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   19558:	f36f 0300 	bfc	r3, #0, #1
   1955c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
   19560:	2000      	movs	r0, #0
   19562:	e785      	b.n	19470 <disable.constprop.6+0x10>
   19564:	00030d18 	.word	0x00030d18
   19568:	0002bced 	.word	0x0002bced
   1956c:	000183a1 	.word	0x000183a1

00019570 <ull_adv_data_set>:
{
   19570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   19574:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   19578:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1957c:	4607      	mov	r7, r0
   1957e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   19580:	782b      	ldrb	r3, [r5, #0]
   19582:	f003 030f 	and.w	r3, r3, #15
   19586:	2b01      	cmp	r3, #1
{
   19588:	460e      	mov	r6, r1
   1958a:	4690      	mov	r8, r2
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1958c:	d046      	beq.n	1961c <ull_adv_data_set+0xac>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1958e:	291f      	cmp	r1, #31
   19590:	d848      	bhi.n	19624 <ull_adv_data_set+0xb4>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   19592:	f100 092c 	add.w	r9, r0, #44	; 0x2c
   19596:	f10d 0106 	add.w	r1, sp, #6
   1959a:	4648      	mov	r0, r9
   1959c:	f002 f82c 	bl	1b5f8 <lll_adv_pdu_alloc>
   195a0:	f10d 0107 	add.w	r1, sp, #7
   195a4:	4604      	mov	r4, r0
   195a6:	4648      	mov	r0, r9
   195a8:	f002 f826 	bl	1b5f8 <lll_adv_pdu_alloc>
		__ASSERT((idx == idx_test), "Probable AD Data Corruption.\n");
   195ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
   195b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   195b4:	429a      	cmp	r2, r3
   195b6:	d00a      	beq.n	195ce <ull_adv_data_set+0x5e>
   195b8:	491b      	ldr	r1, [pc, #108]	; (19628 <ull_adv_data_set+0xb8>)
   195ba:	481c      	ldr	r0, [pc, #112]	; (1962c <ull_adv_data_set+0xbc>)
   195bc:	f240 52e4 	movw	r2, #1508	; 0x5e4
   195c0:	f00a fe3c 	bl	2423c <printk>
   195c4:	f240 51e4 	movw	r1, #1508	; 0x5e4
   195c8:	4817      	ldr	r0, [pc, #92]	; (19628 <ull_adv_data_set+0xb8>)
   195ca:	f00b f8e9 	bl	247a0 <assert_post_action>
	pdu->type = prev->type;
   195ce:	782a      	ldrb	r2, [r5, #0]
   195d0:	7823      	ldrb	r3, [r4, #0]
   195d2:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0U;
   195d6:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   195da:	7023      	strb	r3, [r4, #0]
	pdu->tx_addr = prev->tx_addr;
   195dc:	782b      	ldrb	r3, [r5, #0]
   195de:	7822      	ldrb	r2, [r4, #0]
   195e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   195e4:	f363 1286 	bfi	r2, r3, #6, #1
	pdu->rx_addr = prev->rx_addr;
   195e8:	4629      	mov	r1, r5
	pdu->tx_addr = prev->tx_addr;
   195ea:	7022      	strb	r2, [r4, #0]
	pdu->rx_addr = prev->rx_addr;
   195ec:	f811 3b02 	ldrb.w	r3, [r1], #2
   195f0:	4620      	mov	r0, r4
   195f2:	09db      	lsrs	r3, r3, #7
   195f4:	b2d2      	uxtb	r2, r2
   195f6:	f363 12c7 	bfi	r2, r3, #7, #1
   195fa:	f800 2b02 	strb.w	r2, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   195fe:	2206      	movs	r2, #6
   19600:	f00c fdae 	bl	26160 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   19604:	4632      	mov	r2, r6
   19606:	4641      	mov	r1, r8
   19608:	f104 0008 	add.w	r0, r4, #8
   1960c:	f00c fda8 	bl	26160 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   19610:	3606      	adds	r6, #6
	pdu->last = idx;
   19612:	f89d 3006 	ldrb.w	r3, [sp, #6]
   19616:	7066      	strb	r6, [r4, #1]
   19618:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		return 0;
   1961c:	2000      	movs	r0, #0
}
   1961e:	b003      	add	sp, #12
   19620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   19624:	2012      	movs	r0, #18
   19626:	e7fa      	b.n	1961e <ull_adv_data_set+0xae>
   19628:	00030d18 	.word	0x00030d18
   1962c:	0002bced 	.word	0x0002bced

00019630 <ll_adv_data_set>:
	return ull_adv_data_set(adv, len, data);
   19630:	460a      	mov	r2, r1
   19632:	4601      	mov	r1, r0
   19634:	4801      	ldr	r0, [pc, #4]	; (1963c <ll_adv_data_set+0xc>)
   19636:	f7ff bf9b 	b.w	19570 <ull_adv_data_set>
   1963a:	bf00      	nop
   1963c:	20002d70 	.word	0x20002d70

00019640 <ll_adv_scan_rsp_set>:
	return ull_scan_rsp_set(adv, len, data);
   19640:	460a      	mov	r2, r1
   19642:	4601      	mov	r1, r0
   19644:	4801      	ldr	r0, [pc, #4]	; (1964c <ll_adv_scan_rsp_set+0xc>)
   19646:	f00f bbc9 	b.w	28ddc <ull_scan_rsp_set>
   1964a:	bf00      	nop
   1964c:	20002d70 	.word	0x20002d70

00019650 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *param)
{
   19650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19652:	4614      	mov	r4, r2
	return ++hdr->ref;
   19654:	7c1a      	ldrb	r2, [r3, #16]
   19656:	3201      	adds	r2, #1
   19658:	b2d2      	uxtb	r2, r2
   1965a:	4606      	mov	r6, r0
   1965c:	460d      	mov	r5, r1
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   1965e:	f103 071c 	add.w	r7, r3, #28
   19662:	741a      	strb	r2, [r3, #16]
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   19664:	b95a      	cbnz	r2, 1967e <ticker_cb+0x2e>
   19666:	f240 22c5 	movw	r2, #709	; 0x2c5
   1966a:	4912      	ldr	r1, [pc, #72]	; (196b4 <ticker_cb+0x64>)
   1966c:	4812      	ldr	r0, [pc, #72]	; (196b8 <ticker_cb+0x68>)
   1966e:	f00a fde5 	bl	2423c <printk>
   19672:	4040      	eors	r0, r0
   19674:	f380 8811 	msr	BASEPRI, r0
   19678:	f04f 0003 	mov.w	r0, #3
   1967c:	df02      	svc	2

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1967e:	4a0f      	ldr	r2, [pc, #60]	; (196bc <ticker_cb+0x6c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	mfy.param = &p;
   19680:	4b0f      	ldr	r3, [pc, #60]	; (196c0 <ticker_cb+0x70>)
	p.lazy = lazy;
   19682:	8114      	strh	r4, [r2, #8]
	p.remainder = remainder;
   19684:	e9c2 6500 	strd	r6, r5, [r2]
	p.param = lll;
   19688:	60d7      	str	r7, [r2, #12]
	mfy.param = &p;
   1968a:	609a      	str	r2, [r3, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1968c:	2200      	movs	r2, #0
   1968e:	4611      	mov	r1, r2
   19690:	2001      	movs	r0, #1
   19692:	f7fc ffe7 	bl	16664 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   19696:	b158      	cbz	r0, 196b0 <ticker_cb+0x60>
   19698:	f240 22d1 	movw	r2, #721	; 0x2d1
   1969c:	4905      	ldr	r1, [pc, #20]	; (196b4 <ticker_cb+0x64>)
   1969e:	4806      	ldr	r0, [pc, #24]	; (196b8 <ticker_cb+0x68>)
   196a0:	f00a fdcc 	bl	2423c <printk>
   196a4:	4040      	eors	r0, r0
   196a6:	f380 8811 	msr	BASEPRI, r0
   196aa:	f04f 0003 	mov.w	r0, #3
   196ae:	df02      	svc	2

	DEBUG_RADIO_PREPARE_O(1);
}
   196b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196b2:	bf00      	nop
   196b4:	00030d78 	.word	0x00030d78
   196b8:	0002bced 	.word	0x0002bced
   196bc:	20002e20 	.word	0x20002e20
   196c0:	200009ac 	.word	0x200009ac

000196c4 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   196c4:	3004      	adds	r0, #4
{
   196c6:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   196c8:	f101 021c 	add.w	r2, r1, #28
   196cc:	b2c0      	uxtb	r0, r0
   196ce:	f7ff fa69 	bl	18ba4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   196d2:	b170      	cbz	r0, 196f2 <ull_scan_disable+0x2e>
   196d4:	3045      	adds	r0, #69	; 0x45
   196d6:	d00b      	beq.n	196f0 <ull_scan_disable+0x2c>
   196d8:	f240 12c7 	movw	r2, #455	; 0x1c7
   196dc:	4905      	ldr	r1, [pc, #20]	; (196f4 <ull_scan_disable+0x30>)
   196de:	4806      	ldr	r0, [pc, #24]	; (196f8 <ull_scan_disable+0x34>)
   196e0:	f00a fdac 	bl	2423c <printk>
   196e4:	4040      	eors	r0, r0
   196e6:	f380 8811 	msr	BASEPRI, r0
   196ea:	f04f 0003 	mov.w	r0, #3
   196ee:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   196f0:	200c      	movs	r0, #12
}
   196f2:	bd08      	pop	{r3, pc}
   196f4:	00030d78 	.word	0x00030d78
   196f8:	0002bced 	.word	0x0002bced

000196fc <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   196fc:	6800      	ldr	r0, [r0, #0]
   196fe:	4b03      	ldr	r3, [pc, #12]	; (1970c <ull_scan_lll_handle_get+0x10>)
   19700:	1ac0      	subs	r0, r0, r3
   19702:	233c      	movs	r3, #60	; 0x3c
   19704:	fbb0 f0f3 	udiv	r0, r0, r3
}
   19708:	b2c0      	uxtb	r0, r0
   1970a:	4770      	bx	lr
   1970c:	20002de4 	.word	0x20002de4

00019710 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   19710:	b938      	cbnz	r0, 19722 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   19712:	4805      	ldr	r0, [pc, #20]	; (19728 <ull_scan_is_enabled_get+0x18>)
   19714:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
	return &ll_scan[handle];
   19718:	f013 0f01 	tst.w	r3, #1
   1971c:	bf08      	it	eq
   1971e:	2000      	moveq	r0, #0
   19720:	4770      	bx	lr
		return NULL;
   19722:	2000      	movs	r0, #0
}
   19724:	4770      	bx	lr
   19726:	bf00      	nop
   19728:	20002de4 	.word	0x20002de4

0001972c <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   1972c:	4a04      	ldr	r2, [pc, #16]	; (19740 <ull_scan_is_disabled_get+0x14>)
   1972e:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
   19732:	f003 0301 	and.w	r3, r3, #1
   19736:	4303      	orrs	r3, r0
}
   19738:	bf0c      	ite	eq
   1973a:	4610      	moveq	r0, r2
   1973c:	2000      	movne	r0, #0
   1973e:	4770      	bx	lr
   19740:	20002de4 	.word	0x20002de4

00019744 <pdu_len_cmp>:
		break;
	}
}

static inline bool pdu_len_cmp(uint8_t opcode, uint8_t len)
{
   19744:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint8_t ctrl_len_lut[] = {
   19746:	4b0d      	ldr	r3, [pc, #52]	; (1977c <pdu_len_cmp+0x38>)
{
   19748:	b089      	sub	sp, #36	; 0x24
   1974a:	4605      	mov	r5, r0
   1974c:	460e      	mov	r6, r1
	const uint8_t ctrl_len_lut[] = {
   1974e:	aa01      	add	r2, sp, #4
   19750:	f103 0718 	add.w	r7, r3, #24
   19754:	6818      	ldr	r0, [r3, #0]
   19756:	6859      	ldr	r1, [r3, #4]
   19758:	4614      	mov	r4, r2
   1975a:	c403      	stmia	r4!, {r0, r1}
   1975c:	3308      	adds	r3, #8
   1975e:	42bb      	cmp	r3, r7
   19760:	4622      	mov	r2, r4
   19762:	d1f7      	bne.n	19754 <pdu_len_cmp+0x10>
   19764:	881b      	ldrh	r3, [r3, #0]
   19766:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
   19768:	ab08      	add	r3, sp, #32
   1976a:	441d      	add	r5, r3
   1976c:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
   19770:	1b83      	subs	r3, r0, r6
   19772:	4258      	negs	r0, r3
   19774:	4158      	adcs	r0, r3
   19776:	b009      	add	sp, #36	; 0x24
   19778:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1977a:	bf00      	nop
   1977c:	0002ab5a 	.word	0x0002ab5a

00019780 <init_reset>:
{
   19780:	b508      	push	{r3, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   19782:	2201      	movs	r2, #1
   19784:	4b0c      	ldr	r3, [pc, #48]	; (197b8 <init_reset+0x38>)
   19786:	480d      	ldr	r0, [pc, #52]	; (197bc <init_reset+0x3c>)
   19788:	f44f 7196 	mov.w	r1, #300	; 0x12c
   1978c:	f00e ff60 	bl	28650 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   19790:	4b0b      	ldr	r3, [pc, #44]	; (197c0 <init_reset+0x40>)
   19792:	2203      	movs	r2, #3
   19794:	1d18      	adds	r0, r3, #4
   19796:	2124      	movs	r1, #36	; 0x24
   19798:	f00e ff5a 	bl	28650 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1979c:	4b09      	ldr	r3, [pc, #36]	; (197c4 <init_reset+0x44>)
   1979e:	2204      	movs	r2, #4
   197a0:	1898      	adds	r0, r3, r2
   197a2:	2120      	movs	r1, #32
   197a4:	f00e ff54 	bl	28650 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   197a8:	4b07      	ldr	r3, [pc, #28]	; (197c8 <init_reset+0x48>)
   197aa:	2207      	movs	r2, #7
   197ac:	1d18      	adds	r0, r3, #4
   197ae:	2108      	movs	r1, #8
   197b0:	f00e ff4e 	bl	28650 <mem_init>
}
   197b4:	2000      	movs	r0, #0
   197b6:	bd08      	pop	{r3, pc}
   197b8:	20002e30 	.word	0x20002e30
   197bc:	20002e34 	.word	0x20002e34
   197c0:	20002f74 	.word	0x20002f74
   197c4:	20002fe4 	.word	0x20002fe4
   197c8:	20003068 	.word	0x20003068

000197cc <ticker_op_stop_cb>:
{
   197cc:	b510      	push	{r4, lr}
   197ce:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   197d0:	b158      	cbz	r0, 197ea <ticker_op_stop_cb+0x1e>
   197d2:	f240 62aa 	movw	r2, #1706	; 0x6aa
   197d6:	490f      	ldr	r1, [pc, #60]	; (19814 <ticker_op_stop_cb+0x48>)
   197d8:	480f      	ldr	r0, [pc, #60]	; (19818 <ticker_op_stop_cb+0x4c>)
   197da:	f00a fd2f 	bl	2423c <printk>
   197de:	4040      	eors	r0, r0
   197e0:	f380 8811 	msr	BASEPRI, r0
   197e4:	f04f 0003 	mov.w	r0, #3
   197e8:	df02      	svc	2
	mfy.param = param;
   197ea:	4b0c      	ldr	r3, [pc, #48]	; (1981c <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   197ec:	2200      	movs	r2, #0
   197ee:	4611      	mov	r1, r2
   197f0:	2002      	movs	r0, #2
	mfy.param = param;
   197f2:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   197f4:	f7fc ff36 	bl	16664 <mayfly_enqueue>
	LL_ASSERT(!retval);
   197f8:	b158      	cbz	r0, 19812 <ticker_op_stop_cb+0x46>
   197fa:	f240 62b1 	movw	r2, #1713	; 0x6b1
   197fe:	4905      	ldr	r1, [pc, #20]	; (19814 <ticker_op_stop_cb+0x48>)
   19800:	4805      	ldr	r0, [pc, #20]	; (19818 <ticker_op_stop_cb+0x4c>)
   19802:	f00a fd1b 	bl	2423c <printk>
   19806:	4040      	eors	r0, r0
   19808:	f380 8811 	msr	BASEPRI, r0
   1980c:	f04f 0003 	mov.w	r0, #3
   19810:	df02      	svc	2
}
   19812:	bd10      	pop	{r4, pc}
   19814:	00030dc9 	.word	0x00030dc9
   19818:	0002bced 	.word	0x0002bced
   1981c:	20000a34 	.word	0x20000a34

00019820 <ticker_start_conn_op_cb>:
{
   19820:	b510      	push	{r4, lr}
   19822:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19824:	b158      	cbz	r0, 1983e <ticker_start_conn_op_cb+0x1e>
   19826:	f240 629e 	movw	r2, #1694	; 0x69e
   1982a:	490e      	ldr	r1, [pc, #56]	; (19864 <ticker_start_conn_op_cb+0x44>)
   1982c:	480e      	ldr	r0, [pc, #56]	; (19868 <ticker_start_conn_op_cb+0x48>)
   1982e:	f00a fd05 	bl	2423c <printk>
   19832:	4040      	eors	r0, r0
   19834:	f380 8811 	msr	BASEPRI, r0
   19838:	f04f 0003 	mov.w	r0, #3
   1983c:	df02      	svc	2
	p = ull_update_unmark(param);
   1983e:	4620      	mov	r0, r4
   19840:	f7ff f962 	bl	18b08 <ull_update_unmark>
	LL_ASSERT(p == param);
   19844:	4284      	cmp	r4, r0
   19846:	d00b      	beq.n	19860 <ticker_start_conn_op_cb+0x40>
   19848:	f240 62a1 	movw	r2, #1697	; 0x6a1
   1984c:	4905      	ldr	r1, [pc, #20]	; (19864 <ticker_start_conn_op_cb+0x44>)
   1984e:	4806      	ldr	r0, [pc, #24]	; (19868 <ticker_start_conn_op_cb+0x48>)
   19850:	f00a fcf4 	bl	2423c <printk>
   19854:	4040      	eors	r0, r0
   19856:	f380 8811 	msr	BASEPRI, r0
   1985a:	f04f 0003 	mov.w	r0, #3
   1985e:	df02      	svc	2
}
   19860:	bd10      	pop	{r4, pc}
   19862:	bf00      	nop
   19864:	00030dc9 	.word	0x00030dc9
   19868:	0002bced 	.word	0x0002bced

0001986c <ticker_stop_conn_op_cb>:
{
   1986c:	b510      	push	{r4, lr}
   1986e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19870:	b158      	cbz	r0, 1988a <ticker_stop_conn_op_cb+0x1e>
   19872:	f240 6294 	movw	r2, #1684	; 0x694
   19876:	490e      	ldr	r1, [pc, #56]	; (198b0 <ticker_stop_conn_op_cb+0x44>)
   19878:	480e      	ldr	r0, [pc, #56]	; (198b4 <ticker_stop_conn_op_cb+0x48>)
   1987a:	f00a fcdf 	bl	2423c <printk>
   1987e:	4040      	eors	r0, r0
   19880:	f380 8811 	msr	BASEPRI, r0
   19884:	f04f 0003 	mov.w	r0, #3
   19888:	df02      	svc	2
	p = ull_update_mark(param);
   1988a:	4620      	mov	r0, r4
   1988c:	f7ff f934 	bl	18af8 <ull_update_mark>
	LL_ASSERT(p == param);
   19890:	4284      	cmp	r4, r0
   19892:	d00b      	beq.n	198ac <ticker_stop_conn_op_cb+0x40>
   19894:	f240 6297 	movw	r2, #1687	; 0x697
   19898:	4905      	ldr	r1, [pc, #20]	; (198b0 <ticker_stop_conn_op_cb+0x44>)
   1989a:	4806      	ldr	r0, [pc, #24]	; (198b4 <ticker_stop_conn_op_cb+0x48>)
   1989c:	f00a fcce 	bl	2423c <printk>
   198a0:	4040      	eors	r0, r0
   198a2:	f380 8811 	msr	BASEPRI, r0
   198a6:	f04f 0003 	mov.w	r0, #3
   198aa:	df02      	svc	2
}
   198ac:	bd10      	pop	{r4, pc}
   198ae:	bf00      	nop
   198b0:	00030dc9 	.word	0x00030dc9
   198b4:	0002bced 	.word	0x0002bced

000198b8 <ticker_update_conn_op_cb>:
{
   198b8:	b510      	push	{r4, lr}
   198ba:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   198bc:	b198      	cbz	r0, 198e6 <ticker_update_conn_op_cb+0x2e>
   198be:	f7ff f931 	bl	18b24 <ull_update_mark_get>
   198c2:	4284      	cmp	r4, r0
   198c4:	d00f      	beq.n	198e6 <ticker_update_conn_op_cb+0x2e>
   198c6:	f7ff f911 	bl	18aec <ull_disable_mark_get>
   198ca:	4284      	cmp	r4, r0
   198cc:	d00b      	beq.n	198e6 <ticker_update_conn_op_cb+0x2e>
   198ce:	f240 628d 	movw	r2, #1677	; 0x68d
   198d2:	4905      	ldr	r1, [pc, #20]	; (198e8 <ticker_update_conn_op_cb+0x30>)
   198d4:	4805      	ldr	r0, [pc, #20]	; (198ec <ticker_update_conn_op_cb+0x34>)
   198d6:	f00a fcb1 	bl	2423c <printk>
   198da:	4040      	eors	r0, r0
   198dc:	f380 8811 	msr	BASEPRI, r0
   198e0:	f04f 0003 	mov.w	r0, #3
   198e4:	df02      	svc	2
}
   198e6:	bd10      	pop	{r4, pc}
   198e8:	00030dc9 	.word	0x00030dc9
   198ec:	0002bced 	.word	0x0002bced

000198f0 <feature_rsp_send.isra.9>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   198f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198f2:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   198f4:	481d      	ldr	r0, [pc, #116]	; (1996c <feature_rsp_send.isra.9+0x7c>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   198f6:	460f      	mov	r7, r1
   198f8:	4616      	mov	r6, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   198fa:	f00e fecd 	bl	28698 <mem_acquire>
	if (!tx) {
   198fe:	4604      	mov	r4, r0
   19900:	b388      	cbz	r0, 19966 <feature_rsp_send.isra.9+0x76>
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   19902:	3604      	adds	r6, #4
   19904:	4630      	mov	r0, r6
   19906:	f00f fb24 	bl	28f52 <feat_get>
   1990a:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1990e:	4018      	ands	r0, r3
   19910:	f8c5 00b8 	str.w	r0, [r5, #184]	; 0xb8
		feat_land_octet0(feat_get(&req->features[0]), LL_FEAT);
   19914:	4630      	mov	r0, r6
   19916:	f00f fb1c 	bl	28f52 <feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1991a:	4b15      	ldr	r3, [pc, #84]	; (19970 <feature_rsp_send.isra.9+0x80>)
   1991c:	4003      	ands	r3, r0
	conn->llcp_feature.features_peer =
   1991e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	conn->common.fex_valid = 1U;
   19922:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
   19926:	f043 0301 	orr.w	r3, r3, #1
   1992a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1992e:	7923      	ldrb	r3, [r4, #4]
   19930:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   19934:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19936:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   19938:	2309      	movs	r3, #9
   1993a:	7163      	strb	r3, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1993c:	71e3      	strb	r3, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1993e:	2100      	movs	r1, #0
   19940:	18a0      	adds	r0, r4, r2
   19942:	f00c fc37 	bl	261b4 <memset>
	feat_result = feat_to_keep & feat_octet0;
   19946:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
   1994a:	2600      	movs	r6, #0
   1994c:	f003 038e 	and.w	r3, r3, #142	; 0x8e
	dst[0] = val;
   19950:	7223      	strb	r3, [r4, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   19952:	4628      	mov	r0, r5
	dst[1] = val >> 8;
   19954:	7266      	strb	r6, [r4, #9]
	dst[2] = val >> 16;
   19956:	72a6      	strb	r6, [r4, #10]
   19958:	4621      	mov	r1, r4
   1995a:	f00f fb08 	bl	28f6e <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1995e:	2301      	movs	r3, #1
   19960:	703b      	strb	r3, [r7, #0]
	return 0;
   19962:	4630      	mov	r0, r6
}
   19964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   19966:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1996a:	e7fb      	b.n	19964 <feature_rsp_send.isra.9+0x74>
   1996c:	20002fe4 	.word	0x20002fe4
   19970:	0001ff8e 	.word	0x0001ff8e

00019974 <reject_ext_ind_send.isra.5>:
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   19974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19976:	4605      	mov	r5, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19978:	480d      	ldr	r0, [pc, #52]	; (199b0 <reject_ext_ind_send.isra.5+0x3c>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1997a:	460c      	mov	r4, r1
   1997c:	4617      	mov	r7, r2
   1997e:	461e      	mov	r6, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19980:	f00e fe8a 	bl	28698 <mem_acquire>
	if (!tx) {
   19984:	4601      	mov	r1, r0
   19986:	b180      	cbz	r0, 199aa <reject_ext_ind_send.isra.5+0x36>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19988:	7900      	ldrb	r0, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1998a:	720f      	strb	r7, [r1, #8]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1998c:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1998e:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   19992:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   19994:	2311      	movs	r3, #17
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19996:	7108      	strb	r0, [r1, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   19998:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, tx);
   1999a:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1999c:	724e      	strb	r6, [r1, #9]
	ctrl_tx_enqueue(conn, tx);
   1999e:	f00f fae6 	bl	28f6e <ctrl_tx_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   199a2:	2301      	movs	r3, #1
   199a4:	7023      	strb	r3, [r4, #0]
	return 0;
   199a6:	2000      	movs	r0, #0
}
   199a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   199aa:	f06f 0036 	mvn.w	r0, #54	; 0x36
   199ae:	e7fb      	b.n	199a8 <reject_ext_ind_send.isra.5+0x34>
   199b0:	20002fe4 	.word	0x20002fe4

000199b4 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   199b4:	4801      	ldr	r0, [pc, #4]	; (199bc <ll_conn_acquire+0x8>)
   199b6:	f00e be6f 	b.w	28698 <mem_acquire>
   199ba:	bf00      	nop
   199bc:	20002e30 	.word	0x20002e30

000199c0 <ll_conn_release>:
	mem_release(conn, &conn_free);
   199c0:	4901      	ldr	r1, [pc, #4]	; (199c8 <ll_conn_release+0x8>)
   199c2:	f00e be82 	b.w	286ca <mem_release>
   199c6:	bf00      	nop
   199c8:	20002e30 	.word	0x20002e30

000199cc <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   199cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
   199d0:	4901      	ldr	r1, [pc, #4]	; (199d8 <ll_conn_handle_get+0xc>)
   199d2:	f00e be92 	b.w	286fa <mem_index_get>
   199d6:	bf00      	nop
   199d8:	20002e34 	.word	0x20002e34

000199dc <tx_lll_flush>:
{
   199dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   199e0:	6805      	ldr	r5, [r0, #0]
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   199e2:	4c31      	ldr	r4, [pc, #196]	; (19aa8 <tx_lll_flush+0xcc>)
{
   199e4:	4606      	mov	r6, r0
	uint16_t handle = ll_conn_handle_get(conn);
   199e6:	4628      	mov	r0, r5
   199e8:	f7ff fff0 	bl	199cc <ll_conn_handle_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   199ec:	f106 0740 	add.w	r7, r6, #64	; 0x40
	lll_conn_flush(handle, lll);
   199f0:	4631      	mov	r1, r6
   199f2:	f00f fde6 	bl	295c2 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   199f6:	aa01      	add	r2, sp, #4
   199f8:	4639      	mov	r1, r7
   199fa:	6c70      	ldr	r0, [r6, #68]	; 0x44
   199fc:	f00e feb9 	bl	28772 <memq_dequeue>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19a00:	f104 0804 	add.w	r8, r4, #4
	while (link) {
   19a04:	b9e8      	cbnz	r0, 19a42 <tx_lll_flush+0x66>
	LL_ASSERT(rx->hdr.link);
   19a06:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	rx = (void *)&conn->llcp_terminate.node_rx;
   19a0a:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
	LL_ASSERT(rx->hdr.link);
   19a0e:	b95b      	cbnz	r3, 19a28 <tx_lll_flush+0x4c>
   19a10:	f240 725d 	movw	r2, #1885	; 0x75d
   19a14:	4925      	ldr	r1, [pc, #148]	; (19aac <tx_lll_flush+0xd0>)
   19a16:	4826      	ldr	r0, [pc, #152]	; (19ab0 <tx_lll_flush+0xd4>)
   19a18:	f00a fc10 	bl	2423c <printk>
   19a1c:	4040      	eors	r0, r0
   19a1e:	f380 8811 	msr	BASEPRI, r0
   19a22:	f04f 0003 	mov.w	r0, #3
   19a26:	df02      	svc	2
	rx->hdr.link = NULL;
   19a28:	2300      	movs	r3, #0
	link = rx->hdr.link;
   19a2a:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
	rx->hdr.link = NULL;
   19a2e:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	ull_rx_put(link, rx);
   19a32:	4621      	mov	r1, r4
   19a34:	f7ff f918 	bl	18c68 <ull_rx_put>
	ull_rx_sched();
   19a38:	f7ff f926 	bl	18c88 <ull_rx_sched>
}
   19a3c:	b002      	add	sp, #8
   19a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   19a42:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   19a44:	f894 e001 	ldrb.w	lr, [r4, #1]
   19a48:	f894 c002 	ldrb.w	ip, [r4, #2]
   19a4c:	7821      	ldrb	r1, [r4, #0]
	last = last + 1;
   19a4e:	1c53      	adds	r3, r2, #1
   19a50:	b2db      	uxtb	r3, r3
		last = 0U;
   19a52:	459e      	cmp	lr, r3
   19a54:	bf08      	it	eq
   19a56:	2300      	moveq	r3, #0
	if (last == first) {
   19a58:	459c      	cmp	ip, r3
   19a5a:	d004      	beq.n	19a66 <tx_lll_flush+0x8a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19a5c:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   19a60:	eb18 0c02 	adds.w	ip, r8, r2
   19a64:	d10e      	bne.n	19a84 <tx_lll_flush+0xa8>
   19a66:	f240 7249 	movw	r2, #1865	; 0x749
   19a6a:	4910      	ldr	r1, [pc, #64]	; (19aac <tx_lll_flush+0xd0>)
   19a6c:	4810      	ldr	r0, [pc, #64]	; (19ab0 <tx_lll_flush+0xd4>)
   19a6e:	f00a fbe5 	bl	2423c <printk>
   19a72:	4040      	eors	r0, r0
   19a74:	f380 8811 	msr	BASEPRI, r0
   19a78:	f04f 0003 	mov.w	r0, #3
   19a7c:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   19a7e:	2300      	movs	r3, #0
   19a80:	801b      	strh	r3, [r3, #0]
   19a82:	deff      	udf	#255	; 0xff
   19a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19a88:	f828 1002 	strh.w	r1, [r8, r2]
		lll_tx->node = tx;
   19a8c:	9901      	ldr	r1, [sp, #4]
   19a8e:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   19a92:	680a      	ldr	r2, [r1, #0]
   19a94:	6002      	str	r2, [r0, #0]
		tx->next = link;
   19a96:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   19a98:	aa01      	add	r2, sp, #4
	*last = idx; /* Commit: Update write index */
   19a9a:	70e3      	strb	r3, [r4, #3]
   19a9c:	4639      	mov	r1, r7
   19a9e:	6c70      	ldr	r0, [r6, #68]	; 0x44
   19aa0:	f00e fe67 	bl	28772 <memq_dequeue>
   19aa4:	e7ae      	b.n	19a04 <tx_lll_flush+0x28>
   19aa6:	bf00      	nop
   19aa8:	200009bc 	.word	0x200009bc
   19aac:	00030dc9 	.word	0x00030dc9
   19ab0:	0002bced 	.word	0x0002bced

00019ab4 <ll_conn_get>:
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   19ab4:	4602      	mov	r2, r0
   19ab6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   19aba:	4801      	ldr	r0, [pc, #4]	; (19ac0 <ll_conn_get+0xc>)
   19abc:	f00e be1a 	b.w	286f4 <mem_get>
   19ac0:	20002e34 	.word	0x20002e34

00019ac4 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   19ac4:	4801      	ldr	r0, [pc, #4]	; (19acc <ll_tx_mem_acquire+0x8>)
   19ac6:	f00e bde7 	b.w	28698 <mem_acquire>
   19aca:	bf00      	nop
   19acc:	20002f74 	.word	0x20002f74

00019ad0 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   19ad0:	4901      	ldr	r1, [pc, #4]	; (19ad8 <ll_tx_mem_release+0x8>)
   19ad2:	f00e bdfa 	b.w	286ca <mem_release>
   19ad6:	bf00      	nop
   19ad8:	20002f74 	.word	0x20002f74

00019adc <ll_tx_mem_enqueue>:
{
   19adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ae0:	4606      	mov	r6, r0
   19ae2:	4688      	mov	r8, r1
	conn = ll_connected_get(handle);
   19ae4:	f00f fa68 	bl	28fb8 <ll_connected_get>
	if (!conn) {
   19ae8:	4604      	mov	r4, r0
   19aea:	b338      	cbz	r0, 19b3c <ll_tx_mem_enqueue+0x60>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   19aec:	4a17      	ldr	r2, [pc, #92]	; (19b4c <ll_tx_mem_enqueue+0x70>)
   19aee:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   19af0:	7857      	ldrb	r7, [r2, #1]
   19af2:	7895      	ldrb	r5, [r2, #2]
   19af4:	7811      	ldrb	r1, [r2, #0]
	last = last + 1;
   19af6:	1c43      	adds	r3, r0, #1
   19af8:	b2db      	uxtb	r3, r3
		last = 0U;
   19afa:	429f      	cmp	r7, r3
   19afc:	bf08      	it	eq
   19afe:	2300      	moveq	r3, #0
	if (last == first) {
   19b00:	429d      	cmp	r5, r3
   19b02:	d01f      	beq.n	19b44 <ll_tx_mem_enqueue+0x68>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19b04:	1d15      	adds	r5, r2, #4
   19b06:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   19b0a:	182f      	adds	r7, r5, r0
   19b0c:	d01a      	beq.n	19b44 <ll_tx_mem_enqueue+0x68>
	lll_tx->handle = handle;
   19b0e:	522e      	strh	r6, [r5, r0]
	lll_tx->node = tx;
   19b10:	f8c7 8004 	str.w	r8, [r7, #4]
	*last = idx; /* Commit: Update write index */
   19b14:	70d3      	strb	r3, [r2, #3]
	return hdr->ref;
   19b16:	7c23      	ldrb	r3, [r4, #16]
	if (ull_ref_get(&conn->ull)) {
   19b18:	b133      	cbz	r3, 19b28 <ll_tx_mem_enqueue+0x4c>
		mfy.param = conn;
   19b1a:	4b0d      	ldr	r3, [pc, #52]	; (19b50 <ll_tx_mem_enqueue+0x74>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   19b1c:	2200      	movs	r2, #0
   19b1e:	2101      	movs	r1, #1
   19b20:	2003      	movs	r0, #3
		mfy.param = conn;
   19b22:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   19b24:	f7fc fd9e 	bl	16664 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   19b28:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19b2c:	2b00      	cmp	r3, #0
   19b2e:	da03      	bge.n	19b38 <ll_tx_mem_enqueue+0x5c>
		ull_slave_latency_cancel(conn, handle);
   19b30:	4631      	mov	r1, r6
   19b32:	4620      	mov	r0, r4
   19b34:	f001 f852 	bl	1abdc <ull_slave_latency_cancel>
	return 0;
   19b38:	2000      	movs	r0, #0
   19b3a:	e001      	b.n	19b40 <ll_tx_mem_enqueue+0x64>
		return -EINVAL;
   19b3c:	f06f 0015 	mvn.w	r0, #21
}
   19b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   19b44:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19b48:	e7fa      	b.n	19b40 <ll_tx_mem_enqueue+0x64>
   19b4a:	bf00      	nop
   19b4c:	20000a00 	.word	0x20000a00
   19b50:	20000a24 	.word	0x20000a24

00019b54 <ull_conn_reset>:
{
   19b54:	b510      	push	{r4, lr}
	conn = ll_conn_get(handle);
   19b56:	2000      	movs	r0, #0
   19b58:	f7ff ffac 	bl	19ab4 <ll_conn_get>
   19b5c:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   19b5e:	f100 021c 	add.w	r2, r0, #28
   19b62:	4601      	mov	r1, r0
   19b64:	2005      	movs	r0, #5
   19b66:	f7ff f81d 	bl	18ba4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   19b6a:	b168      	cbz	r0, 19b88 <ull_conn_reset+0x34>
   19b6c:	3045      	adds	r0, #69	; 0x45
   19b6e:	d00b      	beq.n	19b88 <ull_conn_reset+0x34>
   19b70:	f240 62bd 	movw	r2, #1725	; 0x6bd
   19b74:	490a      	ldr	r1, [pc, #40]	; (19ba0 <ull_conn_reset+0x4c>)
   19b76:	480b      	ldr	r0, [pc, #44]	; (19ba4 <ull_conn_reset+0x50>)
   19b78:	f00a fb60 	bl	2423c <printk>
   19b7c:	4040      	eors	r0, r0
   19b7e:	f380 8811 	msr	BASEPRI, r0
   19b82:	f04f 0003 	mov.w	r0, #3
   19b86:	df02      	svc	2
	MFIFO_INIT(conn_tx);
   19b88:	4a07      	ldr	r2, [pc, #28]	; (19ba8 <ull_conn_reset+0x54>)
	conn->lll.link_tx_free = NULL;
   19b8a:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   19b8c:	8053      	strh	r3, [r2, #2]
	MFIFO_INIT(conn_ack);
   19b8e:	4a07      	ldr	r2, [pc, #28]	; (19bac <ull_conn_reset+0x58>)
	conn->lll.link_tx_free = NULL;
   19b90:	66e3      	str	r3, [r4, #108]	; 0x6c
	MFIFO_INIT(conn_ack);
   19b92:	8053      	strh	r3, [r2, #2]
	conn_upd_curr = NULL;
   19b94:	4a06      	ldr	r2, [pc, #24]	; (19bb0 <ull_conn_reset+0x5c>)
}
   19b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   19b9a:	6013      	str	r3, [r2, #0]
	err = init_reset();
   19b9c:	f7ff bdf0 	b.w	19780 <init_reset>
   19ba0:	00030dc9 	.word	0x00030dc9
   19ba4:	0002bced 	.word	0x0002bced
   19ba8:	20000a00 	.word	0x20000a00
   19bac:	200009bc 	.word	0x200009bc
   19bb0:	20002f60 	.word	0x20002f60

00019bb4 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   19bb4:	688b      	ldr	r3, [r1, #8]
   19bb6:	689b      	ldr	r3, [r3, #8]
{
   19bb8:	b510      	push	{r4, lr}
	switch (lll->role) {
   19bba:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   19bbe:	09e4      	lsrs	r4, r4, #7
{
   19bc0:	460a      	mov	r2, r1
	switch (lll->role) {
   19bc2:	d004      	beq.n	19bce <ull_conn_setup+0x1a>
		ull_slave_setup(link, rx, ftr, lll);
   19bc4:	3208      	adds	r2, #8
}
   19bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   19bca:	f7e9 ba59 	b.w	3080 <ull_slave_setup>
		LL_ASSERT(0);
   19bce:	f240 321b 	movw	r2, #795	; 0x31b
   19bd2:	4905      	ldr	r1, [pc, #20]	; (19be8 <ull_conn_setup+0x34>)
   19bd4:	4805      	ldr	r0, [pc, #20]	; (19bec <ull_conn_setup+0x38>)
   19bd6:	f00a fb31 	bl	2423c <printk>
   19bda:	4040      	eors	r0, r0
   19bdc:	f380 8811 	msr	BASEPRI, r0
   19be0:	f04f 0003 	mov.w	r0, #3
   19be4:	df02      	svc	2
}
   19be6:	bd10      	pop	{r4, pc}
   19be8:	00030dc9 	.word	0x00030dc9
   19bec:	0002bced 	.word	0x0002bced

00019bf0 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   19bf0:	680b      	ldr	r3, [r1, #0]
{
   19bf2:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bf6:	4607      	mov	r7, r0
	conn = ll_connected_get((*rx)->hdr.handle);
   19bf8:	88d8      	ldrh	r0, [r3, #6]
{
   19bfa:	460e      	mov	r6, r1
	conn = ll_connected_get((*rx)->hdr.handle);
   19bfc:	f00f f9dc 	bl	28fb8 <ll_connected_get>
	if (!conn) {
   19c00:	6835      	ldr	r5, [r6, #0]
   19c02:	4604      	mov	r4, r0
   19c04:	b910      	cbnz	r0, 19c0c <ull_conn_rx+0x1c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19c06:	2301      	movs	r3, #1
   19c08:	712b      	strb	r3, [r5, #4]
	return 0;
   19c0a:	e049      	b.n	19ca0 <ull_conn_rx+0xb0>
	switch (pdu_rx->ll_id) {
   19c0c:	7f28      	ldrb	r0, [r5, #28]
   19c0e:	f3c0 0001 	ubfx	r0, r0, #0, #2
   19c12:	b2c3      	uxtb	r3, r0
   19c14:	b240      	sxtb	r0, r0
   19c16:	2800      	cmp	r0, #0
   19c18:	f000 846c 	beq.w	1a4f4 <ull_conn_rx+0x904>
   19c1c:	2b02      	cmp	r3, #2
   19c1e:	d93f      	bls.n	19ca0 <ull_conn_rx+0xb0>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   19c20:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   19c24:	f105 091c 	add.w	r9, r5, #28

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   19c28:	f1b8 0f11 	cmp.w	r8, #17
   19c2c:	f200 844c 	bhi.w	1a4c8 <ull_conn_rx+0x8d8>
   19c30:	e8df f018 	tbh	[pc, r8, lsl #1]
   19c34:	008a0012 	.word	0x008a0012
   19c38:	044a00bd 	.word	0x044a00bd
   19c3c:	044a044a 	.word	0x044a044a
   19c40:	03be044a 	.word	0x03be044a
   19c44:	00e500c9 	.word	0x00e500c9
   19c48:	044a044a 	.word	0x044a044a
   19c4c:	044a0107 	.word	0x044a0107
   19c50:	015f00dd 	.word	0x015f00dd
   19c54:	036002ce 	.word	0x036002ce
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   19c58:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19c5c:	2b00      	cmp	r3, #0
   19c5e:	f280 8433 	bge.w	1a4c8 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   19c62:	7f69      	ldrb	r1, [r5, #29]
   19c64:	2000      	movs	r0, #0
   19c66:	f7ff fd6d 	bl	19744 <pdu_len_cmp>
		if (!conn->lll.role ||
   19c6a:	2800      	cmp	r0, #0
   19c6c:	f000 842c 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   19c70:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   19c74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   19c76:	1ad3      	subs	r3, r2, r3
   19c78:	041b      	lsls	r3, r3, #16
   19c7a:	d503      	bpl.n	19c84 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19c7c:	2301      	movs	r3, #1
   19c7e:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   19c80:	2328      	movs	r3, #40	; 0x28
   19c82:	e00b      	b.n	19c9c <ull_conn_rx+0xac>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   19c84:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   19c88:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   19c8c:	1a5b      	subs	r3, r3, r1
   19c8e:	f003 0303 	and.w	r3, r3, #3
   19c92:	2b02      	cmp	r3, #2
   19c94:	d106      	bne.n	19ca4 <ull_conn_rx+0xb4>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19c96:	2301      	movs	r3, #1
   19c98:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   19c9a:	232a      	movs	r3, #42	; 0x2a
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = chan_map_upd_recv(conn, *rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   19c9c:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	return 0;
   19ca0:	2000      	movs	r0, #0
   19ca2:	e0e1      	b.n	19e68 <ull_conn_rx+0x278>
	if (!conn_upd_curr) {
   19ca4:	4bc4      	ldr	r3, [pc, #784]	; (19fb8 <ull_conn_rx+0x3c8>)
   19ca6:	6819      	ldr	r1, [r3, #0]
   19ca8:	b901      	cbnz	r1, 19cac <ull_conn_rx+0xbc>
		conn_upd_curr = conn;
   19caa:	601c      	str	r4, [r3, #0]
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   19cac:	f895 3020 	ldrb.w	r3, [r5, #32]
   19cb0:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   19cb4:	f8b5 1021 	ldrh.w	r1, [r5, #33]	; 0x21
   19cb8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   19cbc:	434b      	muls	r3, r1
	conn->llcp_cu.win_offset_us =
   19cbe:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   19cc2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   19cc6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   19cca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   19cce:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   19cd2:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   19cd6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   19cda:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   19cde:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   19ce2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   19ce6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   19cea:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   19cee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.timeout =
   19cf2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   19cf6:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
   19cfa:	f023 0307 	bic.w	r3, r3, #7
   19cfe:	f043 0304 	orr.w	r3, r3, #4
   19d02:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
	conn->llcp_cu.ack--;
   19d06:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   19d0a:	3b01      	subs	r3, #1
   19d0c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	link->mem = conn->llcp_rx;
   19d10:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   19d14:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   19d16:	6833      	ldr	r3, [r6, #0]
   19d18:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   19d1a:	6833      	ldr	r3, [r6, #0]
   19d1c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	*rx = NULL;
   19d20:	2300      	movs	r3, #0
   19d22:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   19d24:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   19d28:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   19d2c:	4293      	cmp	r3, r2
   19d2e:	d007      	beq.n	19d40 <ull_conn_rx+0x150>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   19d30:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   19d34:	f003 0307 	and.w	r3, r3, #7
   19d38:	2b04      	cmp	r3, #4
   19d3a:	d101      	bne.n	19d40 <ull_conn_rx+0x150>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   19d3c:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   19d40:	2000      	movs	r0, #0
   19d42:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
		break;
   19d46:	e08f      	b.n	19e68 <ull_conn_rx+0x278>
		if (!conn->lll.role ||
   19d48:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19d4c:	2b00      	cmp	r3, #0
   19d4e:	f280 83bb 	bge.w	1a4c8 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   19d52:	7f69      	ldrb	r1, [r5, #29]
   19d54:	2001      	movs	r0, #1
   19d56:	f7ff fcf5 	bl	19744 <pdu_len_cmp>
		if (!conn->lll.role ||
   19d5a:	2800      	cmp	r0, #0
   19d5c:	f000 83b4 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   19d60:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   19d64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   19d66:	1af3      	subs	r3, r6, r3
   19d68:	0418      	lsls	r0, r3, #16
   19d6a:	d487      	bmi.n	19c7c <ull_conn_rx+0x8c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   19d6c:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   19d70:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   19d74:	1a9b      	subs	r3, r3, r2
   19d76:	f003 0303 	and.w	r3, r3, #3
   19d7a:	2b02      	cmp	r3, #2
   19d7c:	d08b      	beq.n	19c96 <ull_conn_rx+0xa6>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   19d7e:	2205      	movs	r2, #5
   19d80:	f105 0120 	add.w	r1, r5, #32
   19d84:	f104 0091 	add.w	r0, r4, #145	; 0x91
   19d88:	f00c f9ea 	bl	26160 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   19d8c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
	conn->llcp.chan_map.instant = instant;
   19d90:	f8a4 6096 	strh.w	r6, [r4, #150]	; 0x96
	conn->llcp.chan_map.initiate = 0U;
   19d94:	f36f 0300 	bfc	r3, #0, #1
   19d98:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
	conn->llcp_type = LLCP_CHAN_MAP;
   19d9c:	2302      	movs	r3, #2
   19d9e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	conn->llcp_ack -= 2U;
   19da2:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
   19da6:	3b02      	subs	r3, #2
   19da8:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19dac:	e72b      	b.n	19c06 <ull_conn_rx+0x16>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   19dae:	7f69      	ldrb	r1, [r5, #29]
   19db0:	2002      	movs	r0, #2
   19db2:	f7ff fcc7 	bl	19744 <pdu_len_cmp>
   19db6:	2800      	cmp	r0, #0
   19db8:	f000 8386 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   19dbc:	f895 3020 	ldrb.w	r3, [r5, #32]
   19dc0:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19dc4:	e71f      	b.n	19c06 <ull_conn_rx+0x16>
		if (!conn->lll.role ||
   19dc6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19dca:	2b00      	cmp	r3, #0
   19dcc:	f280 837c 	bge.w	1a4c8 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   19dd0:	7f69      	ldrb	r1, [r5, #29]
   19dd2:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   19dd4:	f7ff fcb6 	bl	19744 <pdu_len_cmp>
		if (conn->lll.role ||
   19dd8:	2800      	cmp	r0, #0
   19dda:	f000 8375 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   19dde:	464a      	mov	r2, r9
   19de0:	1d29      	adds	r1, r5, #4
   19de2:	4620      	mov	r0, r4
}
   19de4:	b001      	add	sp, #4
   19de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   19dea:	f7ff bd81 	b.w	198f0 <feature_rsp_send.isra.9>
		if (conn->lll.role ||
   19dee:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19df2:	2b00      	cmp	r3, #0
   19df4:	f2c0 8368 	blt.w	1a4c8 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   19df8:	7f69      	ldrb	r1, [r5, #29]
   19dfa:	200e      	movs	r0, #14
   19dfc:	e7ea      	b.n	19dd4 <ull_conn_rx+0x1e4>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   19dfe:	7f69      	ldrb	r1, [r5, #29]
   19e00:	2009      	movs	r0, #9
   19e02:	f7ff fc9f 	bl	19744 <pdu_len_cmp>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   19e06:	2800      	cmp	r0, #0
   19e08:	f000 835e 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   19e0c:	3520      	adds	r5, #32
   19e0e:	4628      	mov	r0, r5
   19e10:	f00f f89f 	bl	28f52 <feat_get>
   19e14:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   19e18:	4018      	ands	r0, r3
   19e1a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		feat_land_octet0(feat_get(&rsp->features[0]), LL_FEAT);
   19e1e:	4628      	mov	r0, r5
   19e20:	f00f f897 	bl	28f52 <feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   19e24:	4b65      	ldr	r3, [pc, #404]	; (19fbc <ull_conn_rx+0x3cc>)
   19e26:	4003      	ands	r3, r0
	conn->llcp_feature.features_peer =
   19e28:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
	conn->common.fex_valid = 1U;
   19e2c:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   19e30:	f043 0301 	orr.w	r3, r3, #1
   19e34:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
	conn->llcp_feature.ack = conn->llcp_feature.req;
   19e38:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   19e3c:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
	conn->procedure_expire = 0U;
   19e40:	e77e      	b.n	19d40 <ull_conn_rx+0x150>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   19e42:	7f69      	ldrb	r1, [r5, #29]
   19e44:	200c      	movs	r0, #12
   19e46:	f7ff fc7d 	bl	19744 <pdu_len_cmp>
   19e4a:	2800      	cmp	r0, #0
   19e4c:	f000 833c 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
	if (!conn->llcp_version.tx) {
   19e50:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   19e54:	f013 0601 	ands.w	r6, r3, #1
   19e58:	d140      	bne.n	19edc <ull_conn_rx+0x2ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19e5a:	4859      	ldr	r0, [pc, #356]	; (19fc0 <ull_conn_rx+0x3d0>)
   19e5c:	f00e fc1c 	bl	28698 <mem_acquire>
		if (!tx) {
   19e60:	4601      	mov	r1, r0
   19e62:	b920      	cbnz	r0, 19e6e <ull_conn_rx+0x27e>
			return -ENOBUFS;
   19e64:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   19e68:	b001      	add	sp, #4
   19e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->llcp_version.tx = 1U;
   19e6e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   19e72:	f043 0301 	orr.w	r3, r3, #1
   19e76:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19e7a:	7903      	ldrb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19e7c:	7286      	strb	r6, [r0, #10]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19e7e:	f043 0303 	orr.w	r3, r3, #3
   19e82:	7103      	strb	r3, [r0, #4]
		pdu_tx->len =
   19e84:	2306      	movs	r3, #6
   19e86:	7143      	strb	r3, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   19e88:	230c      	movs	r3, #12
   19e8a:	71c3      	strb	r3, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   19e8c:	230b      	movs	r3, #11
   19e8e:	7203      	strb	r3, [r0, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19e90:	2359      	movs	r3, #89	; 0x59
   19e92:	7243      	strb	r3, [r0, #9]
		v->sub_version_number =
   19e94:	f04f 33ff 	mov.w	r3, #4294967295
   19e98:	72c3      	strb	r3, [r0, #11]
   19e9a:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, tx);
   19e9c:	4620      	mov	r0, r4
   19e9e:	f00f f866 	bl	28f6e <ctrl_tx_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   19ea2:	2301      	movs	r3, #1
   19ea4:	712b      	strb	r3, [r5, #4]
	conn->llcp_version.version_number = v->version_number;
   19ea6:	f895 3020 	ldrb.w	r3, [r5, #32]
   19eaa:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   19eae:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
   19eb2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   19eb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19eba:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
		sys_le16_to_cpu(v->sub_version_number);
   19ebe:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   19ec2:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   19ec6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_version.sub_version_number =
   19eca:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
	conn->llcp_version.rx = 1U;
   19ece:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   19ed2:	f043 0302 	orr.w	r3, r3, #2
   19ed6:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	return 0;
   19eda:	e6e1      	b.n	19ca0 <ull_conn_rx+0xb0>
	} else if (!conn->llcp_version.rx) {
   19edc:	f013 0302 	ands.w	r3, r3, #2
   19ee0:	f47f ae91 	bne.w	19c06 <ull_conn_rx+0x16>
		conn->llcp_version.ack = conn->llcp_version.req;
   19ee4:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   19ee8:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
		conn->procedure_expire = 0U;
   19eec:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
   19ef0:	e7d9      	b.n	19ea6 <ull_conn_rx+0x2b6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   19ef2:	7f69      	ldrb	r1, [r5, #29]
   19ef4:	200f      	movs	r0, #15
   19ef6:	f7ff fc25 	bl	19744 <pdu_len_cmp>
   19efa:	2800      	cmp	r0, #0
   19efc:	f000 82e4 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   19f00:	4b2d      	ldr	r3, [pc, #180]	; (19fb8 <ull_conn_rx+0x3c8>)
   19f02:	6818      	ldr	r0, [r3, #0]
   19f04:	b150      	cbz	r0, 19f1c <ull_conn_rx+0x32c>
   19f06:	4284      	cmp	r4, r0
   19f08:	d008      	beq.n	19f1c <ull_conn_rx+0x32c>
			nack = reject_ext_ind_send(conn, *rx,
   19f0a:	2320      	movs	r3, #32
				nack = reject_ext_ind_send(conn, *rx,
   19f0c:	220f      	movs	r2, #15
				nack = reject_ext_ind_send(conn, *rx,
   19f0e:	1d29      	adds	r1, r5, #4
   19f10:	4620      	mov	r0, r4
}
   19f12:	b001      	add	sp, #4
   19f14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   19f18:	f7ff bd2c 	b.w	19974 <reject_ext_ind_send.isra.5>
		if (!conn->lll.role) {
   19f1c:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   19f20:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   19f24:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   19f28:	2900      	cmp	r1, #0
   19f2a:	f2c0 80b3 	blt.w	1a094 <ull_conn_rx+0x4a4>
			if ((conn->llcp_conn_param.req !=
   19f2e:	429a      	cmp	r2, r3
   19f30:	d009      	beq.n	19f46 <ull_conn_rx+0x356>
			    ((conn->llcp_conn_param.state ==
   19f32:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
					conn->llcp_conn_param.ack) &&
   19f36:	f013 0307 	ands.w	r3, r3, #7
   19f3a:	d002      	beq.n	19f42 <ull_conn_rx+0x352>
			      LLCP_CPR_STATE_REQ) ||
   19f3c:	3b04      	subs	r3, #4
   19f3e:	2b01      	cmp	r3, #1
   19f40:	d801      	bhi.n	19f46 <ull_conn_rx+0x356>
				nack = reject_ext_ind_send(conn, *rx,
   19f42:	2323      	movs	r3, #35	; 0x23
   19f44:	e7e2      	b.n	19f0c <ull_conn_rx+0x31c>
			} else if (((conn->llcp_req - conn->llcp_ack) &
   19f46:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   19f4a:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
   19f4e:	1a5b      	subs	r3, r3, r1
   19f50:	f003 0303 	and.w	r3, r3, #3
   19f54:	2b02      	cmp	r3, #2
   19f56:	d101      	bne.n	19f5c <ull_conn_rx+0x36c>
				nack = reject_ext_ind_send(conn, *rx,
   19f58:	232a      	movs	r3, #42	; 0x2a
   19f5a:	e7d7      	b.n	19f0c <ull_conn_rx+0x31c>
				uint16_t interval_min =
   19f5c:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   19f60:	fa1f f38a 	uxth.w	r3, sl
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19f64:	2b05      	cmp	r3, #5
   19f66:	d924      	bls.n	19fb2 <ull_conn_rx+0x3c2>
				uint16_t interval_max =
   19f68:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   19f6c:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   19f70:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   19f74:	d81d      	bhi.n	19fb2 <ull_conn_rx+0x3c2>
				    (interval_max > 3200) ||
   19f76:	428b      	cmp	r3, r1
   19f78:	d81b      	bhi.n	19fb2 <ull_conn_rx+0x3c2>
				uint16_t latency =
   19f7a:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   19f7e:	fa1f f788 	uxth.w	r7, r8
				    (interval_min > interval_max) ||
   19f82:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   19f86:	d214      	bcs.n	19fb2 <ull_conn_rx+0x3c2>
				uint16_t timeout =
   19f88:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   19f8c:	fa1f f38e 	uxth.w	r3, lr
				    (latency > 499) ||
   19f90:	f1a3 0c0a 	sub.w	ip, r3, #10
   19f94:	fa1f fc8c 	uxth.w	ip, ip
   19f98:	f640 4b76 	movw	fp, #3190	; 0xc76
   19f9c:	45dc      	cmp	ip, fp
   19f9e:	d808      	bhi.n	19fb2 <ull_conn_rx+0x3c2>
				     ((latency + 1) * interval_max)) ||
   19fa0:	fb07 1c01 	mla	ip, r7, r1, r1
				    (timeout > 3200) ||
   19fa4:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   19fa8:	d203      	bcs.n	19fb2 <ull_conn_rx+0x3c2>
					cpr->preferred_periodicity;
   19faa:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   19fae:	4561      	cmp	r1, ip
   19fb0:	d208      	bcs.n	19fc4 <ull_conn_rx+0x3d4>
				nack = reject_ext_ind_send(conn, *rx,
   19fb2:	231e      	movs	r3, #30
   19fb4:	e7aa      	b.n	19f0c <ull_conn_rx+0x31c>
   19fb6:	bf00      	nop
   19fb8:	20002f60 	.word	0x20002f60
   19fbc:	0001ff8e 	.word	0x0001ff8e
   19fc0:	20002fe4 	.word	0x20002fe4
				conn->llcp_conn_param.interval_min =
   19fc4:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
				conn->llcp_conn_param.interval_max =
   19fc8:	f8a4 90f2 	strh.w	r9, [r4, #242]	; 0xf2
				conn->llcp_conn_param.latency =	latency;
   19fcc:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
				conn->llcp_conn_param.timeout =	timeout;
   19fd0:	f8a4 e0f6 	strh.w	lr, [r4, #246]	; 0xf6
				conn->llcp_conn_param.preferred_periodicity =
   19fd4:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   19fd8:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   19fdc:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   19fe0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   19fe4:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
					sys_le16_to_cpu(cpr->offset0);
   19fe8:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   19fec:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   19ff0:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   19ff4:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
					sys_le16_to_cpu(cpr->offset1);
   19ff8:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   19ffc:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   1a000:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   1a004:	f8a4 c0fe 	strh.w	ip, [r4, #254]	; 0xfe
					sys_le16_to_cpu(cpr->offset2);
   1a008:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1a00c:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1a010:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   1a014:	f8a4 c100 	strh.w	ip, [r4, #256]	; 0x100
					sys_le16_to_cpu(cpr->offset3);
   1a018:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1a01c:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   1a020:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1a024:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
					sys_le16_to_cpu(cpr->offset4);
   1a028:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   1a02c:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1a030:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   1a034:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
					sys_le16_to_cpu(cpr->offset5);
   1a038:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   1a03c:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1a040:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
				conn->llcp_conn_param.offset5 =
   1a044:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
				     lll->interval) ||
   1a048:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   1a04a:	42a9      	cmp	r1, r5
   1a04c:	d112      	bne.n	1a074 <ull_conn_rx+0x484>
				     lll->interval) ||
   1a04e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1a050:	42b9      	cmp	r1, r7
   1a052:	d10f      	bne.n	1a074 <ull_conn_rx+0x484>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a054:	f240 41e2 	movw	r1, #1250	; 0x4e2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a058:	4369      	muls	r1, r5
   1a05a:	f242 7510 	movw	r5, #10000	; 0x2710
   1a05e:	fb05 1303 	mla	r3, r5, r3, r1
   1a062:	3b01      	subs	r3, #1
   1a064:	fbb3 f3f1 	udiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1a068:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
   1a06c:	b29b      	uxth	r3, r3
   1a06e:	4299      	cmp	r1, r3
   1a070:	f000 8095 	beq.w	1a19e <ull_conn_rx+0x5ae>
				conn->llcp_conn_param.state =
   1a074:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1a078:	2103      	movs	r1, #3
   1a07a:	f361 0302 	bfi	r3, r1, #0, #3
   1a07e:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			conn->llcp_conn_param.ack--;
   1a082:	3a01      	subs	r2, #1
   1a084:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
			if (!conn_upd_curr) {
   1a088:	2800      	cmp	r0, #0
   1a08a:	f47f ae09 	bne.w	19ca0 <ull_conn_rx+0xb0>
				conn_upd_curr = conn;
   1a08e:	4bc5      	ldr	r3, [pc, #788]	; (1a3a4 <ull_conn_rx+0x7b4>)
   1a090:	601c      	str	r4, [r3, #0]
   1a092:	e6e9      	b.n	19e68 <ull_conn_rx+0x278>
		} else if ((conn->llcp_conn_param.req ==
   1a094:	429a      	cmp	r2, r3
   1a096:	d004      	beq.n	1a0a2 <ull_conn_rx+0x4b2>
			    conn->llcp_conn_param.ack) ||
   1a098:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1a09c:	0799      	lsls	r1, r3, #30
   1a09e:	f040 808a 	bne.w	1a1b6 <ull_conn_rx+0x5c6>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1a0a2:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1a0a6:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1a0aa:	2b05      	cmp	r3, #5
   1a0ac:	d981      	bls.n	19fb2 <ull_conn_rx+0x3c2>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1a0ae:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1a0b2:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1a0b6:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1a0ba:	f63f af7a 	bhi.w	19fb2 <ull_conn_rx+0x3c2>
			    (interval_max > 3200) ||
   1a0be:	428b      	cmp	r3, r1
   1a0c0:	f63f af77 	bhi.w	19fb2 <ull_conn_rx+0x3c2>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1a0c4:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1a0c8:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
   1a0cc:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   1a0d0:	f4bf af6f 	bcs.w	19fb2 <ull_conn_rx+0x3c2>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1a0d4:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1a0d8:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   1a0dc:	f1a3 0c0a 	sub.w	ip, r3, #10
   1a0e0:	fa1f fc8c 	uxth.w	ip, ip
   1a0e4:	f640 4b76 	movw	fp, #3190	; 0xc76
   1a0e8:	45dc      	cmp	ip, fp
   1a0ea:	f63f af62 	bhi.w	19fb2 <ull_conn_rx+0x3c2>
			     ((latency + 1) * interval_max)) ||
   1a0ee:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   1a0f2:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   1a0f6:	f4bf af5c 	bcs.w	19fb2 <ull_conn_rx+0x3c2>
				cpr->preferred_periodicity;
   1a0fa:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   1a0fe:	4561      	cmp	r1, ip
   1a100:	f4ff af57 	bcc.w	19fb2 <ull_conn_rx+0x3c2>
			conn->llcp_conn_param.interval_min = interval_min;
   1a104:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1a108:	f8a4 90f2 	strh.w	r9, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1a10c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1a110:	f8a4 e0f6 	strh.w	lr, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   1a114:	f884 c0f8 	strb.w	ip, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1a118:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1a11c:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   1a120:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1a124:	f8a4 c0fa 	strh.w	ip, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1a128:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1a12c:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   1a130:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1a134:	f8a4 c0fc 	strh.w	ip, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1a138:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1a13c:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   1a140:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1a144:	f8a4 c0fe 	strh.w	ip, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1a148:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1a14c:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   1a150:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1a154:	f8a4 c100 	strh.w	ip, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   1a158:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1a15c:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   1a160:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1a164:	f8a4 c102 	strh.w	ip, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   1a168:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   1a16c:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1a170:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1a174:	f8a4 c104 	strh.w	ip, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   1a178:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   1a17c:	f895 5036 	ldrb.w	r5, [r5, #54]	; 0x36
   1a180:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
			conn->llcp_conn_param.offset5 =
   1a184:	f8a4 5106 	strh.w	r5, [r4, #262]	; 0x106
			     lll->interval) ||
   1a188:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   1a18a:	42a9      	cmp	r1, r5
   1a18c:	f47f af72 	bne.w	1a074 <ull_conn_rx+0x484>
			     lll->interval) ||
   1a190:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   1a192:	42bd      	cmp	r5, r7
   1a194:	f47f af6e 	bne.w	1a074 <ull_conn_rx+0x484>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a198:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1a19c:	e75c      	b.n	1a058 <ull_conn_rx+0x468>
				conn->llcp_conn_param.state =
   1a19e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1a1a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a1a6:	f043 0301 	orr.w	r3, r3, #1
   1a1aa:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a1ae:	6833      	ldr	r3, [r6, #0]
   1a1b0:	2101      	movs	r1, #1
   1a1b2:	7119      	strb	r1, [r3, #4]
   1a1b4:	e765      	b.n	1a082 <ull_conn_rx+0x492>
			LL_ASSERT(0);
   1a1b6:	f241 7205 	movw	r2, #5893	; 0x1705
   1a1ba:	497b      	ldr	r1, [pc, #492]	; (1a3a8 <ull_conn_rx+0x7b8>)
   1a1bc:	487b      	ldr	r0, [pc, #492]	; (1a3ac <ull_conn_rx+0x7bc>)
   1a1be:	f00a f83d 	bl	2423c <printk>
   1a1c2:	4040      	eors	r0, r0
   1a1c4:	f380 8811 	msr	BASEPRI, r0
   1a1c8:	f04f 0003 	mov.w	r0, #3
   1a1cc:	df02      	svc	2
   1a1ce:	e567      	b.n	19ca0 <ull_conn_rx+0xb0>
		if (conn->lll.role ||
   1a1d0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1a1d4:	2b00      	cmp	r3, #0
   1a1d6:	f2c0 8177 	blt.w	1a4c8 <ull_conn_rx+0x8d8>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   1a1da:	7f69      	ldrb	r1, [r5, #29]
   1a1dc:	2010      	movs	r0, #16
   1a1de:	f7ff fab1 	bl	19744 <pdu_len_cmp>
		if (conn->lll.role ||
   1a1e2:	2800      	cmp	r0, #0
   1a1e4:	f000 8170 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
		if (!conn->lll.role &&
   1a1e8:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   1a1ec:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   1a1f0:	429a      	cmp	r2, r3
   1a1f2:	d07b      	beq.n	1a2ec <ull_conn_rx+0x6fc>
		    (conn->llcp_conn_param.state ==
   1a1f4:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
		     conn->llcp_conn_param.ack) &&
   1a1f8:	f003 0307 	and.w	r3, r3, #7
   1a1fc:	2b04      	cmp	r3, #4
   1a1fe:	d175      	bne.n	1a2ec <ull_conn_rx+0x6fc>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1a200:	f8b5 e020 	ldrh.w	lr, [r5, #32]
   1a204:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1a208:	2a05      	cmp	r2, #5
   1a20a:	d920      	bls.n	1a24e <ull_conn_rx+0x65e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1a20c:	f8b5 c022 	ldrh.w	ip, [r5, #34]	; 0x22
   1a210:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1a214:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1a218:	d819      	bhi.n	1a24e <ull_conn_rx+0x65e>
			    (interval_max > 3200) ||
   1a21a:	429a      	cmp	r2, r3
   1a21c:	d817      	bhi.n	1a24e <ull_conn_rx+0x65e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1a21e:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   1a220:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
   1a222:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1a226:	d212      	bcs.n	1a24e <ull_conn_rx+0x65e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1a228:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   1a22a:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   1a22e:	f1a8 010a 	sub.w	r1, r8, #10
   1a232:	b289      	uxth	r1, r1
   1a234:	f640 4976 	movw	r9, #3190	; 0xc76
   1a238:	4549      	cmp	r1, r9
   1a23a:	d808      	bhi.n	1a24e <ull_conn_rx+0x65e>
			     ((latency + 1) * interval_max)) ||
   1a23c:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   1a240:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
   1a244:	d203      	bcs.n	1a24e <ull_conn_rx+0x65e>
				cpr->preferred_periodicity;
   1a246:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   1a24a:	4293      	cmp	r3, r2
   1a24c:	d202      	bcs.n	1a254 <ull_conn_rx+0x664>
				nack = reject_ext_ind_send(conn, *rx,
   1a24e:	231e      	movs	r3, #30
   1a250:	2210      	movs	r2, #16
   1a252:	e65c      	b.n	19f0e <ull_conn_rx+0x31e>
			conn->procedure_expire = 0U;
   1a254:	2300      	movs	r3, #0
   1a256:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
			conn->llcp_conn_param.interval_min = interval_min;
   1a25a:	f8a4 e0f0 	strh.w	lr, [r4, #240]	; 0xf0
			conn->llcp_conn_param.interval_max = interval_max;
   1a25e:	f8a4 c0f2 	strh.w	ip, [r4, #242]	; 0xf2
			conn->llcp_conn_param.latency =	latency;
   1a262:	f8a4 70f4 	strh.w	r7, [r4, #244]	; 0xf4
			conn->llcp_conn_param.timeout =	timeout;
   1a266:	f8a4 00f6 	strh.w	r0, [r4, #246]	; 0xf6
			conn->llcp_conn_param.preferred_periodicity =
   1a26a:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1a26e:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
   1a272:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1a276:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1a27a:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
				sys_le16_to_cpu(cpr->offset0);
   1a27e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   1a282:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   1a286:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset0 =
   1a28a:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
				sys_le16_to_cpu(cpr->offset1);
   1a28e:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
   1a292:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   1a296:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset1 =
   1a29a:	f8a4 30fe 	strh.w	r3, [r4, #254]	; 0xfe
				sys_le16_to_cpu(cpr->offset2);
   1a29e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   1a2a2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1a2a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset2 =
   1a2aa:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
				sys_le16_to_cpu(cpr->offset3);
   1a2ae:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   1a2b2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   1a2b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset3 =
   1a2ba:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
				sys_le16_to_cpu(cpr->offset4);
   1a2be:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
   1a2c2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1a2c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset4 =
   1a2ca:	f8a4 3104 	strh.w	r3, [r4, #260]	; 0x104
				sys_le16_to_cpu(cpr->offset5);
   1a2ce:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
   1a2d2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1a2d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.offset5 =
   1a2da:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1a2de:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1a2e2:	2201      	movs	r2, #1
   1a2e4:	f362 0302 	bfi	r3, r2, #0, #3
   1a2e8:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a2ec:	6833      	ldr	r3, [r6, #0]
   1a2ee:	2201      	movs	r2, #1
   1a2f0:	711a      	strb	r2, [r3, #4]
		break;
   1a2f2:	e4d5      	b.n	19ca0 <ull_conn_rx+0xb0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   1a2f4:	7f69      	ldrb	r1, [r5, #29]
   1a2f6:	2011      	movs	r0, #17
   1a2f8:	f7ff fa24 	bl	19744 <pdu_len_cmp>
   1a2fc:	2800      	cmp	r0, #0
   1a2fe:	f000 80e3 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
	switch (rej_ext_ind->reject_opcode) {
   1a302:	f895 3020 	ldrb.w	r3, [r5, #32]
   1a306:	2b0f      	cmp	r3, #15
   1a308:	f47f ac7d 	bne.w	19c06 <ull_conn_rx+0x16>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1a30c:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1a310:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1a314:	429a      	cmp	r2, r3
   1a316:	f43f ac76 	beq.w	19c06 <ull_conn_rx+0x16>
	if (!lll->role && (rej_ext_ind->error_code ==
   1a31a:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1a31e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1a322:	2a00      	cmp	r2, #0
   1a324:	f2c0 80e9 	blt.w	1a4fa <ull_conn_rx+0x90a>
   1a328:	2b1a      	cmp	r3, #26
   1a32a:	f040 80ec 	bne.w	1a506 <ull_conn_rx+0x916>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1a32e:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1a332:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1a336:	429a      	cmp	r2, r3
   1a338:	d00b      	beq.n	1a352 <ull_conn_rx+0x762>
   1a33a:	f241 02f5 	movw	r2, #4341	; 0x10f5
   1a33e:	491a      	ldr	r1, [pc, #104]	; (1a3a8 <ull_conn_rx+0x7b8>)
   1a340:	481a      	ldr	r0, [pc, #104]	; (1a3ac <ull_conn_rx+0x7bc>)
   1a342:	f009 ff7b 	bl	2423c <printk>
   1a346:	4040      	eors	r0, r0
   1a348:	f380 8811 	msr	BASEPRI, r0
   1a34c:	f04f 0003 	mov.w	r0, #3
   1a350:	df02      	svc	2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1a352:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   1a356:	2305      	movs	r3, #5
   1a358:	f363 0202 	bfi	r2, r3, #0, #3
		conn->llcp_cu.win_offset_us = 0U;
   1a35c:	2300      	movs	r3, #0
   1a35e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1a362:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1a366:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1a36a:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1a36e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1a372:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1a376:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a37a:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1a37e:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
		conn->llcp_cu.win_size = 1U;
   1a382:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a384:	f361 0301 	bfi	r3, r1, #0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1a388:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1a38c:	f362 0382 	bfi	r3, r2, #2, #1
   1a390:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		conn->llcp_cu.ack--;
   1a394:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		conn->llcp_cu.win_size = 1U;
   1a398:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
		conn->llcp_cu.ack--;
   1a39c:	3b01      	subs	r3, #1
   1a39e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
	if (err) {
   1a3a2:	e430      	b.n	19c06 <ull_conn_rx+0x16>
   1a3a4:	20002f60 	.word	0x20002f60
   1a3a8:	00030dc9 	.word	0x00030dc9
   1a3ac:	0002bced 	.word	0x0002bced
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   1a3b0:	7f69      	ldrb	r1, [r5, #29]
   1a3b2:	2007      	movs	r0, #7
   1a3b4:	f7ff f9c6 	bl	19744 <pdu_len_cmp>
   1a3b8:	2800      	cmp	r0, #0
   1a3ba:	f000 8085 	beq.w	1a4c8 <ull_conn_rx+0x8d8>
		} else if ((conn->llcp_conn_param.ack !=
   1a3be:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
   1a3c2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1a3c6:	429a      	cmp	r2, r3
   1a3c8:	f43f acba 	beq.w	19d40 <ull_conn_rx+0x150>
			    conn->llcp_conn_param.req) &&
   1a3cc:	f895 3020 	ldrb.w	r3, [r5, #32]
   1a3d0:	2b0f      	cmp	r3, #15
   1a3d2:	f47f acb5 	bne.w	19d40 <ull_conn_rx+0x150>
			conn->llcp_conn_param.disabled = 1U;
   1a3d6:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1a3da:	f043 0310 	orr.w	r3, r3, #16
   1a3de:	f884 30ee 	strb.w	r3, [r4, #238]	; 0xee
			if (!conn->lll.role) {
   1a3e2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1a3e6:	2b00      	cmp	r3, #0
   1a3e8:	db3c      	blt.n	1a464 <ull_conn_rx+0x874>
				LL_ASSERT(conn->llcp_cu.req ==
   1a3ea:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1a3ee:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1a3f2:	429a      	cmp	r2, r3
   1a3f4:	d00b      	beq.n	1a40e <ull_conn_rx+0x81e>
   1a3f6:	f241 728a 	movw	r2, #6026	; 0x178a
   1a3fa:	495f      	ldr	r1, [pc, #380]	; (1a578 <ull_conn_rx+0x988>)
   1a3fc:	485f      	ldr	r0, [pc, #380]	; (1a57c <ull_conn_rx+0x98c>)
   1a3fe:	f009 ff1d 	bl	2423c <printk>
   1a402:	4040      	eors	r0, r0
   1a404:	f380 8811 	msr	BASEPRI, r0
   1a408:	f04f 0003 	mov.w	r0, #3
   1a40c:	df02      	svc	2
				conn->llcp_conn_param.state =
   1a40e:	f894 20ee 	ldrb.w	r2, [r4, #238]	; 0xee
   1a412:	2305      	movs	r3, #5
   1a414:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_cu.interval =
   1a418:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   1a41c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
				conn->llcp_cu.latency =
   1a420:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   1a424:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
				conn->llcp_cu.timeout =
   1a428:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   1a42c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a430:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_conn_param.state =
   1a434:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
				conn->llcp_cu.win_size = 1U;
   1a438:	2101      	movs	r1, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a43a:	f361 0301 	bfi	r3, r1, #0, #2
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1a43e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1a442:	f362 0382 	bfi	r3, r2, #2, #1
   1a446:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
				conn->llcp_cu.ack--;
   1a44a:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
				conn->llcp_cu.win_size = 1U;
   1a44e:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
				conn->llcp_cu.ack--;
   1a452:	3b01      	subs	r3, #1
   1a454:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a458:	6833      	ldr	r3, [r6, #0]
				conn->llcp_cu.win_offset_us = 0U;
   1a45a:	2000      	movs	r0, #0
   1a45c:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a460:	7119      	strb	r1, [r3, #4]
				break;
   1a462:	e501      	b.n	19e68 <ull_conn_rx+0x278>
			LL_ASSERT(conn_upd_curr == conn);
   1a464:	4f46      	ldr	r7, [pc, #280]	; (1a580 <ull_conn_rx+0x990>)
   1a466:	683a      	ldr	r2, [r7, #0]
   1a468:	4294      	cmp	r4, r2
   1a46a:	d00b      	beq.n	1a484 <ull_conn_rx+0x894>
   1a46c:	f241 72a1 	movw	r2, #6049	; 0x17a1
   1a470:	4941      	ldr	r1, [pc, #260]	; (1a578 <ull_conn_rx+0x988>)
   1a472:	4842      	ldr	r0, [pc, #264]	; (1a57c <ull_conn_rx+0x98c>)
   1a474:	f009 fee2 	bl	2423c <printk>
   1a478:	4040      	eors	r0, r0
   1a47a:	f380 8811 	msr	BASEPRI, r0
   1a47e:	f04f 0003 	mov.w	r0, #3
   1a482:	df02      	svc	2
	conn_upd_curr = NULL;
   1a484:	2300      	movs	r3, #0
			if (!conn->llcp_conn_param.cmd) {
   1a486:	f894 00ee 	ldrb.w	r0, [r4, #238]	; 0xee
	conn_upd_curr = NULL;
   1a48a:	603b      	str	r3, [r7, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1a48c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1a490:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
			if (!conn->llcp_conn_param.cmd) {
   1a494:	f010 0008 	ands.w	r0, r0, #8
   1a498:	6833      	ldr	r3, [r6, #0]
   1a49a:	d102      	bne.n	1a4a2 <ull_conn_rx+0x8b2>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a49c:	2201      	movs	r2, #1
   1a49e:	711a      	strb	r2, [r3, #4]
				break;
   1a4a0:	e4e2      	b.n	19e68 <ull_conn_rx+0x278>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1a4a2:	2215      	movs	r2, #21
   1a4a4:	711a      	strb	r2, [r3, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1a4a6:	231a      	movs	r3, #26
   1a4a8:	772b      	strb	r3, [r5, #28]
			cu->latency = lll->latency;
   1a4aa:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   1a4ac:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->latency = lll->latency;
   1a4ae:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->supervision_reload *
   1a4b0:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
			cu->interval = lll->interval;
   1a4b4:	83eb      	strh	r3, [r5, #30]
			cu->timeout = conn->supervision_reload *
   1a4b6:	435a      	muls	r2, r3
				      lll->interval * 125U / 1000;
   1a4b8:	237d      	movs	r3, #125	; 0x7d
   1a4ba:	4353      	muls	r3, r2
   1a4bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a4c0:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1a4c4:	846b      	strh	r3, [r5, #34]	; 0x22
   1a4c6:	e43b      	b.n	19d40 <ull_conn_rx+0x150>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a4c8:	482e      	ldr	r0, [pc, #184]	; (1a584 <ull_conn_rx+0x994>)
   1a4ca:	f00e f8e5 	bl	28698 <mem_acquire>
	if (!tx) {
   1a4ce:	4601      	mov	r1, r0
   1a4d0:	2800      	cmp	r0, #0
   1a4d2:	f43f acc7 	beq.w	19e64 <ull_conn_rx+0x274>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1a4d6:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1a4d8:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1a4dc:	f043 0303 	orr.w	r3, r3, #3
   1a4e0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1a4e2:	2302      	movs	r3, #2
   1a4e4:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1a4e6:	2307      	movs	r3, #7
   1a4e8:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, tx);
   1a4ea:	4620      	mov	r0, r4
   1a4ec:	f00e fd3f 	bl	28f6e <ctrl_tx_enqueue>
   1a4f0:	f7ff bb89 	b.w	19c06 <ull_conn_rx+0x16>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1a4f4:	2301      	movs	r3, #1
   1a4f6:	712b      	strb	r3, [r5, #4]
		break;
   1a4f8:	e4b6      	b.n	19e68 <ull_conn_rx+0x278>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1a4fa:	2b23      	cmp	r3, #35	; 0x23
   1a4fc:	d003      	beq.n	1a506 <ull_conn_rx+0x916>
			conn->slave.ticks_to_offset =
   1a4fe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1a502:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1a506:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1a50a:	f003 0307 	and.w	r3, r3, #7
   1a50e:	2b04      	cmp	r3, #4
   1a510:	d117      	bne.n	1a542 <ull_conn_rx+0x952>
		LL_ASSERT(conn_upd_curr == conn);
   1a512:	4e1b      	ldr	r6, [pc, #108]	; (1a580 <ull_conn_rx+0x990>)
   1a514:	6832      	ldr	r2, [r6, #0]
   1a516:	4294      	cmp	r4, r2
   1a518:	d00b      	beq.n	1a532 <ull_conn_rx+0x942>
   1a51a:	f241 1210 	movw	r2, #4368	; 0x1110
   1a51e:	4916      	ldr	r1, [pc, #88]	; (1a578 <ull_conn_rx+0x988>)
   1a520:	4816      	ldr	r0, [pc, #88]	; (1a57c <ull_conn_rx+0x98c>)
   1a522:	f009 fe8b 	bl	2423c <printk>
   1a526:	4040      	eors	r0, r0
   1a528:	f380 8811 	msr	BASEPRI, r0
   1a52c:	f04f 0003 	mov.w	r0, #3
   1a530:	df02      	svc	2
	conn_upd_curr = NULL;
   1a532:	2300      	movs	r3, #0
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1a534:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn_upd_curr = NULL;
   1a538:	6033      	str	r3, [r6, #0]
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1a53a:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
		conn->procedure_expire = 0U;
   1a53e:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
	if (!conn->llcp_conn_param.cmd) {
   1a542:	f894 30ee 	ldrb.w	r3, [r4, #238]	; 0xee
   1a546:	071b      	lsls	r3, r3, #28
   1a548:	f57f ab5d 	bpl.w	19c06 <ull_conn_rx+0x16>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1a54c:	2315      	movs	r3, #21
   1a54e:	712b      	strb	r3, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   1a550:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1a554:	772b      	strb	r3, [r5, #28]
	cu->latency = lll->latency;
   1a556:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   1a558:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->latency = lll->latency;
   1a55a:	842a      	strh	r2, [r5, #32]
	cu->timeout = conn->supervision_reload *
   1a55c:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
	cu->interval = lll->interval;
   1a560:	83eb      	strh	r3, [r5, #30]
	cu->timeout = conn->supervision_reload *
   1a562:	435a      	muls	r2, r3
		      lll->interval * 125U / 1000;
   1a564:	237d      	movs	r3, #125	; 0x7d
   1a566:	4353      	muls	r3, r2
   1a568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a56c:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   1a570:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1a572:	f7ff bb95 	b.w	19ca0 <ull_conn_rx+0xb0>
   1a576:	bf00      	nop
   1a578:	00030dc9 	.word	0x00030dc9
   1a57c:	0002bced 	.word	0x0002bced
   1a580:	20002f60 	.word	0x20002f60
   1a584:	20002fe4 	.word	0x20002fe4

0001a588 <ull_conn_tx_demux>:
{
   1a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a58c:	4e20      	ldr	r6, [pc, #128]	; (1a610 <ull_conn_tx_demux+0x88>)
{
   1a58e:	4604      	mov	r4, r0
   1a590:	4637      	mov	r7, r6
	return (void *)(fifo + first * size);
   1a592:	1d35      	adds	r5, r6, #4
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a594:	78b3      	ldrb	r3, [r6, #2]
	if (first == last) {
   1a596:	78f1      	ldrb	r1, [r6, #3]
   1a598:	7832      	ldrb	r2, [r6, #0]
   1a59a:	4299      	cmp	r1, r3
   1a59c:	d02d      	beq.n	1a5fa <ull_conn_tx_demux+0x72>
	return (void *)(fifo + first * size);
   1a59e:	fb13 f302 	smulbb	r3, r3, r2
		if (!lll_tx) {
   1a5a2:	eb15 0803 	adds.w	r8, r5, r3
   1a5a6:	d028      	beq.n	1a5fa <ull_conn_tx_demux+0x72>
		conn = ll_connected_get(lll_tx->handle);
   1a5a8:	5ae8      	ldrh	r0, [r5, r3]
   1a5aa:	f00e fd05 	bl	28fb8 <ll_connected_get>
		if (conn) {
   1a5ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1a5b2:	b320      	cbz	r0, 1a5fe <ull_conn_tx_demux+0x76>
			tx->next = NULL;
   1a5b4:	2300      	movs	r3, #0
   1a5b6:	600b      	str	r3, [r1, #0]
			if (!conn->tx_data) {
   1a5b8:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1a5bc:	b943      	cbnz	r3, 1a5d0 <ull_conn_tx_demux+0x48>
				if (!conn->tx_head) {
   1a5be:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
				conn->tx_data = tx;
   1a5c2:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
				if (!conn->tx_head) {
   1a5c6:	b91b      	cbnz	r3, 1a5d0 <ull_conn_tx_demux+0x48>
					conn->tx_head = tx;
   1a5c8:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
					conn->tx_data_last = NULL;
   1a5cc:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
			if (conn->tx_data_last) {
   1a5d0:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   1a5d4:	b103      	cbz	r3, 1a5d8 <ull_conn_tx_demux+0x50>
				conn->tx_data_last->next = tx;
   1a5d6:	6019      	str	r1, [r3, #0]
			conn->tx_data_last = tx;
   1a5d8:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
	uint8_t _first = *first; /* Copy read-index */
   1a5dc:	78bb      	ldrb	r3, [r7, #2]
	if (_first == last) {
   1a5de:	78f9      	ldrb	r1, [r7, #3]
		MFIFO_DEQUEUE(conn_tx);
   1a5e0:	787a      	ldrb	r2, [r7, #1]
   1a5e2:	4299      	cmp	r1, r3
   1a5e4:	d005      	beq.n	1a5f2 <ull_conn_tx_demux+0x6a>
	_first += 1U;
   1a5e6:	3301      	adds	r3, #1
   1a5e8:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a5ea:	429a      	cmp	r2, r3
   1a5ec:	bf08      	it	eq
   1a5ee:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a5f0:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   1a5f2:	3c01      	subs	r4, #1
   1a5f4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1a5f8:	d1cc      	bne.n	1a594 <ull_conn_tx_demux+0xc>
}
   1a5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			p->ll_id = PDU_DATA_LLID_RESV;
   1a5fe:	790b      	ldrb	r3, [r1, #4]
   1a600:	f360 0301 	bfi	r3, r0, #0, #2
   1a604:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   1a606:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a60a:	f7fe f9ed 	bl	189e8 <ll_tx_ack_put>
   1a60e:	e7e5      	b.n	1a5dc <ull_conn_tx_demux+0x54>
   1a610:	20000a00 	.word	0x20000a00

0001a614 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   1a614:	4b32      	ldr	r3, [pc, #200]	; (1a6e0 <conn_cleanup+0xcc>)
   1a616:	681a      	ldr	r2, [r3, #0]
   1a618:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   1a61a:	bf08      	it	eq
   1a61c:	2200      	moveq	r2, #0
{
   1a61e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	conn_upd_curr = NULL;
   1a622:	bf08      	it	eq
   1a624:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   1a626:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1a628:	f8a0 30d2 	strh.w	r3, [r0, #210]	; 0xd2
	*((uint8_t *)rx->pdu) = reason;
   1a62c:	f880 10e8 	strb.w	r1, [r0, #232]	; 0xe8
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a630:	2314      	movs	r3, #20
	rx = conn->llcp_rx;
   1a632:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a636:	f880 30d0 	strb.w	r3, [r0, #208]	; 0xd0
{
   1a63a:	4604      	mov	r4, r0
	struct lll_conn *lll = &conn->lll;
   1a63c:	f100 061c 	add.w	r6, r0, #28
		hdr->type = NODE_RX_TYPE_RELEASE;
   1a640:	2501      	movs	r5, #1
	while (rx) {
   1a642:	bb41      	cbnz	r1, 1a696 <conn_cleanup+0x82>
		link = mem_acquire(&mem_link_tx.free);
   1a644:	4f27      	ldr	r7, [pc, #156]	; (1a6e4 <conn_cleanup+0xd0>)
		LL_ASSERT(link);
   1a646:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1a6ec <conn_cleanup+0xd8>
   1a64a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1a6f0 <conn_cleanup+0xdc>
	while (conn->tx_head) {
   1a64e:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
   1a652:	bb38      	cbnz	r0, 1a6a4 <conn_cleanup+0x90>
				    TICKER_ID_CONN_BASE + lll->handle,
   1a654:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a658:	4b23      	ldr	r3, [pc, #140]	; (1a6e8 <conn_cleanup+0xd4>)
   1a65a:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   1a65c:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a65e:	b2d2      	uxtb	r2, r2
   1a660:	2101      	movs	r1, #1
   1a662:	f7fc fdd5 	bl	17210 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a666:	f030 0302 	bics.w	r3, r0, #2
   1a66a:	d00b      	beq.n	1a684 <conn_cleanup+0x70>
   1a66c:	f240 62f1 	movw	r2, #1777	; 0x6f1
   1a670:	491e      	ldr	r1, [pc, #120]	; (1a6ec <conn_cleanup+0xd8>)
   1a672:	481f      	ldr	r0, [pc, #124]	; (1a6f0 <conn_cleanup+0xdc>)
   1a674:	f009 fde2 	bl	2423c <printk>
   1a678:	4040      	eors	r0, r0
   1a67a:	f380 8811 	msr	BASEPRI, r0
   1a67e:	f04f 0003 	mov.w	r0, #3
   1a682:	df02      	svc	2
	lll->handle = 0xFFFF;
   1a684:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1a688:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   1a68a:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
   1a68c:	b002      	add	sp, #8
   1a68e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1a692:	f7ff bf79 	b.w	1a588 <ull_conn_tx_demux>
		rx = hdr->link->mem;
   1a696:	6808      	ldr	r0, [r1, #0]
   1a698:	6847      	ldr	r7, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1a69a:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1a69c:	f7fe f966 	bl	1896c <ll_rx_put>
		rx = hdr->link->mem;
   1a6a0:	4639      	mov	r1, r7
   1a6a2:	e7ce      	b.n	1a642 <conn_cleanup+0x2e>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1a6a4:	4601      	mov	r1, r0
   1a6a6:	4620      	mov	r0, r4
   1a6a8:	f00e fc20 	bl	28eec <tx_ull_dequeue>
   1a6ac:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   1a6ae:	4638      	mov	r0, r7
   1a6b0:	f00d fff2 	bl	28698 <mem_acquire>
		LL_ASSERT(link);
   1a6b4:	4605      	mov	r5, r0
   1a6b6:	b958      	cbnz	r0, 1a6d0 <conn_cleanup+0xbc>
   1a6b8:	f240 7231 	movw	r2, #1841	; 0x731
   1a6bc:	4641      	mov	r1, r8
   1a6be:	4648      	mov	r0, r9
   1a6c0:	f009 fdbc 	bl	2423c <printk>
   1a6c4:	4040      	eors	r0, r0
   1a6c6:	f380 8811 	msr	BASEPRI, r0
   1a6ca:	f04f 0003 	mov.w	r0, #3
   1a6ce:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a6d0:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1a6d4:	4651      	mov	r1, sl
   1a6d6:	4628      	mov	r0, r5
   1a6d8:	f00e f83c 	bl	28754 <memq_enqueue>
   1a6dc:	e7b7      	b.n	1a64e <conn_cleanup+0x3a>
   1a6de:	bf00      	nop
   1a6e0:	20002f60 	.word	0x20002f60
   1a6e4:	20003068 	.word	0x20003068
   1a6e8:	000197cd 	.word	0x000197cd
   1a6ec:	00030dc9 	.word	0x00030dc9
   1a6f0:	0002bced 	.word	0x0002bced

0001a6f4 <ull_conn_done>:
{
   1a6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   1a6f8:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   1a6fa:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   1a6fc:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   1a6fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a702:	429a      	cmp	r2, r3
{
   1a704:	b08b      	sub	sp, #44	; 0x2c
   1a706:	4681      	mov	r9, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1a708:	d006      	beq.n	1a718 <ull_conn_done+0x24>
	reason_peer = conn->llcp_terminate.reason_peer;
   1a70a:	f894 60cb 	ldrb.w	r6, [r4, #203]	; 0xcb
	if (reason_peer && (
   1a70e:	b136      	cbz	r6, 1a71e <ull_conn_done+0x2a>
		conn_cleanup(conn, reason_peer);
   1a710:	4631      	mov	r1, r6
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1a712:	4620      	mov	r0, r4
   1a714:	f7ff ff7e 	bl	1a614 <conn_cleanup>
}
   1a718:	b00b      	add	sp, #44	; 0x2c
   1a71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	latency_event = lll->latency_event;
   1a71e:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   1a722:	8c83      	ldrh	r3, [r0, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1a724:	f108 0701 	add.w	r7, r8, #1
   1a728:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
   1a72a:	e9cd 6608 	strd	r6, r6, [sp, #32]
	if (done->extra.trx_cnt) {
   1a72e:	b17b      	cbz	r3, 1a750 <ull_conn_done+0x5c>
		} else if (lll->role) {
   1a730:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1a734:	2b00      	cmp	r3, #0
   1a736:	da08      	bge.n	1a74a <ull_conn_done+0x56>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1a738:	aa08      	add	r2, sp, #32
   1a73a:	a909      	add	r1, sp, #36	; 0x24
   1a73c:	f7e7 fd38 	bl	21b0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1a740:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1a744:	b15b      	cbz	r3, 1a75e <ull_conn_done+0x6a>
				lll->latency_event = 0;
   1a746:	2300      	movs	r3, #0
				lll->latency_event = lll->latency;
   1a748:	84ab      	strh	r3, [r5, #36]	; 0x24
		conn->connect_expire = 0U;
   1a74a:	2300      	movs	r3, #0
   1a74c:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (done->extra.crc_valid) {
   1a750:	f899 3026 	ldrb.w	r3, [r9, #38]	; 0x26
   1a754:	b1bb      	cbz	r3, 1a786 <ull_conn_done+0x92>
		conn->supervision_expire = 0U;
   1a756:	2300      	movs	r3, #0
			conn->supervision_expire = conn->supervision_reload;
   1a758:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
   1a75c:	e01c      	b.n	1a798 <ull_conn_done+0xa4>
				ull_conn_tx_demux(UINT8_MAX);
   1a75e:	20ff      	movs	r0, #255	; 0xff
   1a760:	f7ff ff12 	bl	1a588 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1a764:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1a768:	2b00      	cmp	r3, #0
   1a76a:	d1ec      	bne.n	1a746 <ull_conn_done+0x52>
   1a76c:	4632      	mov	r2, r6
   1a76e:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   1a772:	f00d fff6 	bl	28762 <memq_peek>
   1a776:	2800      	cmp	r0, #0
   1a778:	d1e5      	bne.n	1a746 <ull_conn_done+0x52>
			} else if (lll->slave.latency_enabled) {
   1a77a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1a77e:	07db      	lsls	r3, r3, #31
   1a780:	d5e3      	bpl.n	1a74a <ull_conn_done+0x56>
				lll->latency_event = lll->latency;
   1a782:	8c2b      	ldrh	r3, [r5, #32]
   1a784:	e7e0      	b.n	1a748 <ull_conn_done+0x54>
	else if (conn->connect_expire) {
   1a786:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   1a78a:	2b00      	cmp	r3, #0
   1a78c:	d07a      	beq.n	1a884 <ull_conn_done+0x190>
		if (conn->connect_expire > elapsed_event) {
   1a78e:	42bb      	cmp	r3, r7
   1a790:	d976      	bls.n	1a880 <ull_conn_done+0x18c>
			conn->connect_expire -= elapsed_event;
   1a792:	1bdb      	subs	r3, r3, r7
   1a794:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
	if (conn->supervision_expire) {
   1a798:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1a79c:	b1eb      	cbz	r3, 1a7da <ull_conn_done+0xe6>
		if (conn->supervision_expire > elapsed_event) {
   1a79e:	42bb      	cmp	r3, r7
   1a7a0:	d977      	bls.n	1a892 <ull_conn_done+0x19e>
			conn->supervision_expire -= elapsed_event;
   1a7a2:	1bdb      	subs	r3, r3, r7
   1a7a4:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1a7a6:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1a7a8:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1a7aa:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
			lll->latency_event = 0U;
   1a7ae:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   1a7b0:	d971      	bls.n	1a896 <ull_conn_done+0x1a2>
			else if (lll->role) {
   1a7b2:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1a7b6:	4293      	cmp	r3, r2
   1a7b8:	da0f      	bge.n	1a7da <ull_conn_done+0xe6>
				if (latency_event) {
   1a7ba:	f1b8 0f00 	cmp.w	r8, #0
   1a7be:	d16a      	bne.n	1a896 <ull_conn_done+0x1a2>
					force = conn->slave.force & 0x01;
   1a7c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
					conn->slave.force >>= 1U;
   1a7c4:	085a      	lsrs	r2, r3, #1
					if (force) {
   1a7c6:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   1a7ca:	bf17      	itett	ne
   1a7cc:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1a7d0:	f8c4 2084 	streq.w	r2, [r4, #132]	; 0x84
						conn->slave.force |= BIT(31);
   1a7d4:	f8c4 2084 	strne.w	r2, [r4, #132]	; 0x84
					force = conn->slave.force & 0x01;
   1a7d8:	461e      	movne	r6, r3
	if (conn->procedure_expire != 0U) {
   1a7da:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   1a7de:	b123      	cbz	r3, 1a7ea <ull_conn_done+0xf6>
		if (conn->procedure_expire > elapsed_event) {
   1a7e0:	42bb      	cmp	r3, r7
   1a7e2:	d95a      	bls.n	1a89a <ull_conn_done+0x1a6>
			conn->procedure_expire -= elapsed_event;
   1a7e4:	1bdf      	subs	r7, r3, r7
   1a7e6:	f8a4 707c 	strh.w	r7, [r4, #124]	; 0x7c
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a7ea:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
   1a7ee:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
   1a7f2:	1a9b      	subs	r3, r3, r2
   1a7f4:	f003 0303 	and.w	r3, r3, #3
   1a7f8:	2b02      	cmp	r3, #2
   1a7fa:	d104      	bne.n	1a806 <ull_conn_done+0x112>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   1a7fc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a800:	3b01      	subs	r3, #1
   1a802:	2b01      	cmp	r3, #1
   1a804:	d905      	bls.n	1a812 <ull_conn_done+0x11e>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1a806:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
   1a80a:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
   1a80e:	429a      	cmp	r2, r3
   1a810:	d001      	beq.n	1a816 <ull_conn_done+0x122>
		lll->latency_event = 0U;
   1a812:	2300      	movs	r3, #0
   1a814:	84ab      	strh	r3, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   1a816:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   1a818:	b90e      	cbnz	r6, 1a81e <ull_conn_done+0x12a>
   1a81a:	4541      	cmp	r1, r8
   1a81c:	d03f      	beq.n	1a89e <ull_conn_done+0x1aa>
		lazy = lll->latency_event + 1U;
   1a81e:	3101      	adds	r1, #1
   1a820:	b289      	uxth	r1, r1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1a822:	e9dd 7308 	ldrd	r7, r3, [sp, #32]
   1a826:	ea53 0207 	orrs.w	r2, r3, r7
   1a82a:	d103      	bne.n	1a834 <ull_conn_done+0x140>
   1a82c:	b911      	cbnz	r1, 1a834 <ull_conn_done+0x140>
   1a82e:	2e00      	cmp	r6, #0
   1a830:	f43f af72 	beq.w	1a718 <ull_conn_done+0x24>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1a834:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a836:	481b      	ldr	r0, [pc, #108]	; (1a8a4 <ull_conn_done+0x1b0>)
		struct ll_conn *conn = lll->hdr.parent;
   1a838:	68ec      	ldr	r4, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a83a:	9406      	str	r4, [sp, #24]
   1a83c:	e9cd 6004 	strd	r6, r0, [sp, #16]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1a840:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a842:	2000      	movs	r0, #0
   1a844:	9103      	str	r1, [sp, #12]
   1a846:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1a84a:	9700      	str	r7, [sp, #0]
   1a84c:	b2d2      	uxtb	r2, r2
   1a84e:	2101      	movs	r1, #1
   1a850:	f00e f9ee 	bl	28c30 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a854:	f030 0302 	bics.w	r3, r0, #2
   1a858:	f43f af5e 	beq.w	1a718 <ull_conn_done+0x24>
   1a85c:	f7fe f946 	bl	18aec <ull_disable_mark_get>
   1a860:	4284      	cmp	r4, r0
   1a862:	f43f af59 	beq.w	1a718 <ull_conn_done+0x24>
   1a866:	f240 5241 	movw	r2, #1345	; 0x541
   1a86a:	490f      	ldr	r1, [pc, #60]	; (1a8a8 <ull_conn_done+0x1b4>)
   1a86c:	480f      	ldr	r0, [pc, #60]	; (1a8ac <ull_conn_done+0x1b8>)
   1a86e:	f009 fce5 	bl	2423c <printk>
   1a872:	4040      	eors	r0, r0
   1a874:	f380 8811 	msr	BASEPRI, r0
   1a878:	f04f 0003 	mov.w	r0, #3
   1a87c:	df02      	svc	2
   1a87e:	e74b      	b.n	1a718 <ull_conn_done+0x24>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1a880:	213e      	movs	r1, #62	; 0x3e
   1a882:	e746      	b.n	1a712 <ull_conn_done+0x1e>
		if (!conn->supervision_expire) {
   1a884:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
   1a888:	2b00      	cmp	r3, #0
   1a88a:	d185      	bne.n	1a798 <ull_conn_done+0xa4>
			conn->supervision_expire = conn->supervision_reload;
   1a88c:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   1a890:	e762      	b.n	1a758 <ull_conn_done+0x64>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1a892:	2108      	movs	r1, #8
   1a894:	e73d      	b.n	1a712 <ull_conn_done+0x1e>
				force = 1U;
   1a896:	2601      	movs	r6, #1
   1a898:	e79f      	b.n	1a7da <ull_conn_done+0xe6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   1a89a:	2122      	movs	r1, #34	; 0x22
   1a89c:	e739      	b.n	1a712 <ull_conn_done+0x1e>
	lazy = 0U;
   1a89e:	4631      	mov	r1, r6
   1a8a0:	e7bf      	b.n	1a822 <ull_conn_done+0x12e>
   1a8a2:	bf00      	nop
   1a8a4:	000198b9 	.word	0x000198b9
   1a8a8:	00030dc9 	.word	0x00030dc9
   1a8ac:	0002bced 	.word	0x0002bced

0001a8b0 <ull_conn_tx_lll_enqueue>:
{
   1a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1a8b4:	4f15      	ldr	r7, [pc, #84]	; (1a90c <ull_conn_tx_lll_enqueue+0x5c>)
		LL_ASSERT(link);
   1a8b6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1a910 <ull_conn_tx_lll_enqueue+0x60>
   1a8ba:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1a914 <ull_conn_tx_lll_enqueue+0x64>
{
   1a8be:	4605      	mov	r5, r0
   1a8c0:	460c      	mov	r4, r1
	while (conn->tx_head &&
   1a8c2:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1a8c6:	b101      	cbz	r1, 1a8ca <ull_conn_tx_lll_enqueue+0x1a>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1a8c8:	b90c      	cbnz	r4, 1a8ce <ull_conn_tx_lll_enqueue+0x1e>
}
   1a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1a8ce:	4628      	mov	r0, r5
   1a8d0:	f00e fb0c 	bl	28eec <tx_ull_dequeue>
   1a8d4:	4682      	mov	sl, r0
		link = mem_acquire(&mem_link_tx.free);
   1a8d6:	4638      	mov	r0, r7
   1a8d8:	f00d fede 	bl	28698 <mem_acquire>
		LL_ASSERT(link);
   1a8dc:	4606      	mov	r6, r0
   1a8de:	b958      	cbnz	r0, 1a8f8 <ull_conn_tx_lll_enqueue+0x48>
   1a8e0:	f240 5293 	movw	r2, #1427	; 0x593
   1a8e4:	4641      	mov	r1, r8
   1a8e6:	4648      	mov	r0, r9
   1a8e8:	f009 fca8 	bl	2423c <printk>
   1a8ec:	4040      	eors	r0, r0
   1a8ee:	f380 8811 	msr	BASEPRI, r0
   1a8f2:	f04f 0003 	mov.w	r0, #3
   1a8f6:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a8f8:	f105 0260 	add.w	r2, r5, #96	; 0x60
   1a8fc:	4651      	mov	r1, sl
   1a8fe:	4630      	mov	r0, r6
   1a900:	3c01      	subs	r4, #1
   1a902:	f00d ff27 	bl	28754 <memq_enqueue>
   1a906:	b2e4      	uxtb	r4, r4
   1a908:	e7db      	b.n	1a8c2 <ull_conn_tx_lll_enqueue+0x12>
   1a90a:	bf00      	nop
   1a90c:	20003068 	.word	0x20003068
   1a910:	00030dc9 	.word	0x00030dc9
   1a914:	0002bced 	.word	0x0002bced

0001a918 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1a918:	4901      	ldr	r1, [pc, #4]	; (1a920 <ull_conn_link_tx_release+0x8>)
   1a91a:	f00d bed6 	b.w	286ca <mem_release>
   1a91e:	bf00      	nop
   1a920:	20003068 	.word	0x20003068

0001a924 <ull_conn_ack_last_idx_get>:
}
   1a924:	4b01      	ldr	r3, [pc, #4]	; (1a92c <ull_conn_ack_last_idx_get+0x8>)
   1a926:	78d8      	ldrb	r0, [r3, #3]
   1a928:	4770      	bx	lr
   1a92a:	bf00      	nop
   1a92c:	200009bc 	.word	0x200009bc

0001a930 <ull_conn_ack_peek>:
{
   1a930:	b570      	push	{r4, r5, r6, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1a932:	4b0a      	ldr	r3, [pc, #40]	; (1a95c <ull_conn_ack_peek+0x2c>)
   1a934:	789c      	ldrb	r4, [r3, #2]
   1a936:	78dd      	ldrb	r5, [r3, #3]
	if (first == last) {
   1a938:	42ac      	cmp	r4, r5
{
   1a93a:	4606      	mov	r6, r0
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1a93c:	7818      	ldrb	r0, [r3, #0]
   1a93e:	d00b      	beq.n	1a958 <ull_conn_ack_peek+0x28>
	return (void *)(fifo + first * size);
   1a940:	3304      	adds	r3, #4
   1a942:	fb14 f400 	smulbb	r4, r4, r0
	if (!lll_tx) {
   1a946:	1918      	adds	r0, r3, r4
   1a948:	d005      	beq.n	1a956 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1a94a:	7035      	strb	r5, [r6, #0]
	*handle = lll_tx->handle;
   1a94c:	5b1b      	ldrh	r3, [r3, r4]
   1a94e:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1a950:	6843      	ldr	r3, [r0, #4]
   1a952:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1a954:	6818      	ldr	r0, [r3, #0]
}
   1a956:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1a958:	2000      	movs	r0, #0
   1a95a:	e7fc      	b.n	1a956 <ull_conn_ack_peek+0x26>
   1a95c:	200009bc 	.word	0x200009bc

0001a960 <ull_conn_ack_by_last_peek>:
{
   1a960:	b530      	push	{r4, r5, lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1a962:	4b09      	ldr	r3, [pc, #36]	; (1a988 <ull_conn_ack_by_last_peek+0x28>)
   1a964:	789c      	ldrb	r4, [r3, #2]
   1a966:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1a968:	4284      	cmp	r4, r0
   1a96a:	d00a      	beq.n	1a982 <ull_conn_ack_by_last_peek+0x22>
	return (void *)(fifo + first * size);
   1a96c:	3304      	adds	r3, #4
   1a96e:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1a972:	1918      	adds	r0, r3, r4
   1a974:	d004      	beq.n	1a980 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1a976:	5b1b      	ldrh	r3, [r3, r4]
   1a978:	800b      	strh	r3, [r1, #0]
	*tx = lll_tx->node;
   1a97a:	6843      	ldr	r3, [r0, #4]
   1a97c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1a97e:	6818      	ldr	r0, [r3, #0]
}
   1a980:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1a982:	2000      	movs	r0, #0
   1a984:	e7fc      	b.n	1a980 <ull_conn_ack_by_last_peek+0x20>
   1a986:	bf00      	nop
   1a988:	200009bc 	.word	0x200009bc

0001a98c <ull_conn_ack_dequeue>:
{
   1a98c:	b510      	push	{r4, lr}
	return MFIFO_DEQUEUE(conn_ack);
   1a98e:	4a09      	ldr	r2, [pc, #36]	; (1a9b4 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1a990:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1a992:	78d0      	ldrb	r0, [r2, #3]
   1a994:	7811      	ldrb	r1, [r2, #0]
   1a996:	7854      	ldrb	r4, [r2, #1]
   1a998:	4298      	cmp	r0, r3
   1a99a:	d009      	beq.n	1a9b0 <ull_conn_ack_dequeue+0x24>
	mem = *((void **)(fifo + _first * size));
   1a99c:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1a9a0:	3301      	adds	r3, #1
   1a9a2:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a9a4:	429c      	cmp	r4, r3
   1a9a6:	bf08      	it	eq
   1a9a8:	2300      	moveq	r3, #0
	mem = *((void **)(fifo + _first * size));
   1a9aa:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1a9ac:	7093      	strb	r3, [r2, #2]
}
   1a9ae:	bd10      	pop	{r4, pc}
		return NULL;
   1a9b0:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1a9b2:	e7fc      	b.n	1a9ae <ull_conn_ack_dequeue+0x22>
   1a9b4:	200009bc 	.word	0x200009bc

0001a9b8 <ull_conn_lll_ack_enqueue>:
{
   1a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1a9ba:	4a12      	ldr	r2, [pc, #72]	; (1aa04 <ull_conn_lll_ack_enqueue+0x4c>)
   1a9bc:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1a9be:	7857      	ldrb	r7, [r2, #1]
   1a9c0:	7895      	ldrb	r5, [r2, #2]
   1a9c2:	7816      	ldrb	r6, [r2, #0]
	last = last + 1;
   1a9c4:	1c63      	adds	r3, r4, #1
   1a9c6:	b2db      	uxtb	r3, r3
		last = 0U;
   1a9c8:	429f      	cmp	r7, r3
   1a9ca:	bf08      	it	eq
   1a9cc:	2300      	moveq	r3, #0
	if (last == first) {
   1a9ce:	429d      	cmp	r5, r3
   1a9d0:	d004      	beq.n	1a9dc <ull_conn_lll_ack_enqueue+0x24>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a9d2:	1d15      	adds	r5, r2, #4
   1a9d4:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1a9d8:	192e      	adds	r6, r5, r4
   1a9da:	d10e      	bne.n	1a9fa <ull_conn_lll_ack_enqueue+0x42>
   1a9dc:	f240 52d1 	movw	r2, #1489	; 0x5d1
   1a9e0:	4909      	ldr	r1, [pc, #36]	; (1aa08 <ull_conn_lll_ack_enqueue+0x50>)
   1a9e2:	480a      	ldr	r0, [pc, #40]	; (1aa0c <ull_conn_lll_ack_enqueue+0x54>)
   1a9e4:	f009 fc2a 	bl	2423c <printk>
   1a9e8:	4040      	eors	r0, r0
   1a9ea:	f380 8811 	msr	BASEPRI, r0
   1a9ee:	f04f 0003 	mov.w	r0, #3
   1a9f2:	df02      	svc	2
	lll_tx->handle = handle;
   1a9f4:	2300      	movs	r3, #0
   1a9f6:	801b      	strh	r3, [r3, #0]
   1a9f8:	deff      	udf	#255	; 0xff
   1a9fa:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1a9fc:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   1a9fe:	6071      	str	r1, [r6, #4]
}
   1aa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aa02:	bf00      	nop
   1aa04:	200009bc 	.word	0x200009bc
   1aa08:	00030dc9 	.word	0x00030dc9
   1aa0c:	0002bced 	.word	0x0002bced

0001aa10 <ull_conn_tx_ack>:
{
   1aa10:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   1aa12:	7953      	ldrb	r3, [r2, #5]
{
   1aa14:	4605      	mov	r5, r0
   1aa16:	460e      	mov	r6, r1
   1aa18:	4614      	mov	r4, r2
	LL_ASSERT(pdu_tx->len);
   1aa1a:	b95b      	cbnz	r3, 1aa34 <ull_conn_tx_ack+0x24>
   1aa1c:	f240 52de 	movw	r2, #1502	; 0x5de
   1aa20:	4920      	ldr	r1, [pc, #128]	; (1aaa4 <ull_conn_tx_ack+0x94>)
   1aa22:	4821      	ldr	r0, [pc, #132]	; (1aaa8 <ull_conn_tx_ack+0x98>)
   1aa24:	f009 fc0a 	bl	2423c <printk>
   1aa28:	4040      	eors	r0, r0
   1aa2a:	f380 8811 	msr	BASEPRI, r0
   1aa2e:	f04f 0003 	mov.w	r0, #3
   1aa32:	df02      	svc	2
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1aa34:	7923      	ldrb	r3, [r4, #4]
   1aa36:	f003 0203 	and.w	r2, r3, #3
   1aa3a:	2a03      	cmp	r2, #3
   1aa3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1aa40:	d129      	bne.n	1aa96 <ull_conn_tx_ack+0x86>
		if (handle != 0xFFFF) {
   1aa42:	4295      	cmp	r5, r2
   1aa44:	d00b      	beq.n	1aa5e <ull_conn_tx_ack+0x4e>
			struct ll_conn *conn = ll_conn_get(handle);
   1aa46:	4628      	mov	r0, r5
   1aa48:	f7ff f834 	bl	19ab4 <ll_conn_get>
	switch (pdu_tx->llctrl.opcode) {
   1aa4c:	79e3      	ldrb	r3, [r4, #7]
   1aa4e:	2b02      	cmp	r3, #2
   1aa50:	d105      	bne.n	1aa5e <ull_conn_tx_ack+0x4e>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1aa52:	7a21      	ldrb	r1, [r4, #8]
   1aa54:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   1aa56:	bf08      	it	eq
   1aa58:	2116      	moveq	r1, #22
   1aa5a:	f7ff fddb 	bl	1a614 <conn_cleanup>
		if (link->next == (void *)tx) {
   1aa5e:	6833      	ldr	r3, [r6, #0]
   1aa60:	42a3      	cmp	r3, r4
   1aa62:	d105      	bne.n	1aa70 <ull_conn_tx_ack+0x60>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1aa64:	4620      	mov	r0, r4
   1aa66:	4911      	ldr	r1, [pc, #68]	; (1aaac <ull_conn_tx_ack+0x9c>)
}
   1aa68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1aa6c:	f00d be2d 	b.w	286ca <mem_release>
			LL_ASSERT(!link->next);
   1aa70:	b15b      	cbz	r3, 1aa8a <ull_conn_tx_ack+0x7a>
   1aa72:	f240 52f1 	movw	r2, #1521	; 0x5f1
   1aa76:	490b      	ldr	r1, [pc, #44]	; (1aaa4 <ull_conn_tx_ack+0x94>)
   1aa78:	480b      	ldr	r0, [pc, #44]	; (1aaa8 <ull_conn_tx_ack+0x98>)
   1aa7a:	f009 fbdf 	bl	2423c <printk>
   1aa7e:	4040      	eors	r0, r0
   1aa80:	f380 8811 	msr	BASEPRI, r0
   1aa84:	f04f 0003 	mov.w	r0, #3
   1aa88:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1aa8a:	4621      	mov	r1, r4
   1aa8c:	4628      	mov	r0, r5
}
   1aa8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   1aa92:	f7fd bfa9 	b.w	189e8 <ll_tx_ack_put>
	} else if (handle == 0xFFFF) {
   1aa96:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1aa98:	bf04      	itt	eq
   1aa9a:	f36f 0301 	bfceq	r3, #0, #2
   1aa9e:	7123      	strbeq	r3, [r4, #4]
   1aaa0:	e7f3      	b.n	1aa8a <ull_conn_tx_ack+0x7a>
   1aaa2:	bf00      	nop
   1aaa4:	00030dc9 	.word	0x00030dc9
   1aaa8:	0002bced 	.word	0x0002bced
   1aaac:	20002fe4 	.word	0x20002fe4

0001aab0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   1aab0:	b510      	push	{r4, lr}
   1aab2:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1aab4:	b158      	cbz	r0, 1aace <ticker_update_latency_cancel_op_cb+0x1e>
   1aab6:	f240 220d 	movw	r2, #525	; 0x20d
   1aaba:	4908      	ldr	r1, [pc, #32]	; (1aadc <ticker_update_latency_cancel_op_cb+0x2c>)
   1aabc:	4808      	ldr	r0, [pc, #32]	; (1aae0 <ticker_update_latency_cancel_op_cb+0x30>)
   1aabe:	f009 fbbd 	bl	2423c <printk>
   1aac2:	4040      	eors	r0, r0
   1aac4:	f380 8811 	msr	BASEPRI, r0
   1aac8:	f04f 0003 	mov.w	r0, #3
   1aacc:	df02      	svc	2

	conn->slave.latency_cancel = 0U;
   1aace:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
   1aad2:	f36f 0341 	bfc	r3, #1, #1
   1aad6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
   1aada:	bd10      	pop	{r4, pc}
   1aadc:	00030e1b 	.word	0x00030e1b
   1aae0:	0002bced 	.word	0x0002bced

0001aae4 <ticker_op_cb>:
{
   1aae4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1aae6:	b158      	cbz	r0, 1ab00 <ticker_op_cb+0x1c>
   1aae8:	f240 2205 	movw	r2, #517	; 0x205
   1aaec:	4905      	ldr	r1, [pc, #20]	; (1ab04 <ticker_op_cb+0x20>)
   1aaee:	4806      	ldr	r0, [pc, #24]	; (1ab08 <ticker_op_cb+0x24>)
   1aaf0:	f009 fba4 	bl	2423c <printk>
   1aaf4:	4040      	eors	r0, r0
   1aaf6:	f380 8811 	msr	BASEPRI, r0
   1aafa:	f04f 0003 	mov.w	r0, #3
   1aafe:	df02      	svc	2
}
   1ab00:	bd08      	pop	{r3, pc}
   1ab02:	bf00      	nop
   1ab04:	00030e1b 	.word	0x00030e1b
   1ab08:	0002bced 	.word	0x0002bced

0001ab0c <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1ab0c:	2801      	cmp	r0, #1
{
   1ab0e:	b510      	push	{r4, lr}
   1ab10:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1ab12:	d10f      	bne.n	1ab34 <ticker_op_stop_adv_cb+0x28>
   1ab14:	f7fd ffea 	bl	18aec <ull_disable_mark_get>
   1ab18:	4284      	cmp	r4, r0
   1ab1a:	d00b      	beq.n	1ab34 <ticker_op_stop_adv_cb+0x28>
   1ab1c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   1ab20:	4905      	ldr	r1, [pc, #20]	; (1ab38 <ticker_op_stop_adv_cb+0x2c>)
   1ab22:	4806      	ldr	r0, [pc, #24]	; (1ab3c <ticker_op_stop_adv_cb+0x30>)
   1ab24:	f009 fb8a 	bl	2423c <printk>
   1ab28:	4040      	eors	r0, r0
   1ab2a:	f380 8811 	msr	BASEPRI, r0
   1ab2e:	f04f 0003 	mov.w	r0, #3
   1ab32:	df02      	svc	2
}
   1ab34:	bd10      	pop	{r4, pc}
   1ab36:	bf00      	nop
   1ab38:	00030e1b 	.word	0x00030e1b
   1ab3c:	0002bced 	.word	0x0002bced

0001ab40 <ull_slave_ticker_cb>:
{
   1ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab42:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1ab44:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
{
   1ab46:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1ab48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ab4c:	4299      	cmp	r1, r3
{
   1ab4e:	4605      	mov	r5, r0
   1ab50:	4616      	mov	r6, r2
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1ab52:	d03a      	beq.n	1abca <ull_slave_ticker_cb+0x8a>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1ab54:	4601      	mov	r1, r0
   1ab56:	4620      	mov	r0, r4
   1ab58:	f7e7 fdd6 	bl	2708 <ull_conn_llcp>
		if (ret) {
   1ab5c:	2800      	cmp	r0, #0
   1ab5e:	d134      	bne.n	1abca <ull_slave_ticker_cb+0x8a>
	return ++hdr->ref;
   1ab60:	7c23      	ldrb	r3, [r4, #16]
   1ab62:	3301      	adds	r3, #1
   1ab64:	b2db      	uxtb	r3, r3
   1ab66:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   1ab68:	b95b      	cbnz	r3, 1ab82 <ull_slave_ticker_cb+0x42>
   1ab6a:	f240 12b5 	movw	r2, #437	; 0x1b5
   1ab6e:	4917      	ldr	r1, [pc, #92]	; (1abcc <ull_slave_ticker_cb+0x8c>)
   1ab70:	4817      	ldr	r0, [pc, #92]	; (1abd0 <ull_slave_ticker_cb+0x90>)
   1ab72:	f009 fb63 	bl	2423c <printk>
   1ab76:	4040      	eors	r0, r0
   1ab78:	f380 8811 	msr	BASEPRI, r0
   1ab7c:	f04f 0003 	mov.w	r0, #3
   1ab80:	df02      	svc	2
	p.ticks_at_expire = ticks_at_expire;
   1ab82:	4a14      	ldr	r2, [pc, #80]	; (1abd4 <ull_slave_ticker_cb+0x94>)
	p.param = &conn->lll;
   1ab84:	f104 031c 	add.w	r3, r4, #28
   1ab88:	60d3      	str	r3, [r2, #12]
	mfy.param = &p;
   1ab8a:	4b13      	ldr	r3, [pc, #76]	; (1abd8 <ull_slave_ticker_cb+0x98>)
	p.lazy = lazy;
   1ab8c:	8116      	strh	r6, [r2, #8]
	p.remainder = remainder;
   1ab8e:	e9c2 5700 	strd	r5, r7, [r2]
	mfy.param = &p;
   1ab92:	609a      	str	r2, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1ab94:	2200      	movs	r2, #0
   1ab96:	4611      	mov	r1, r2
   1ab98:	2001      	movs	r0, #1
   1ab9a:	f7fb fd63 	bl	16664 <mayfly_enqueue>
	LL_ASSERT(!err);
   1ab9e:	b158      	cbz	r0, 1abb8 <ull_slave_ticker_cb+0x78>
   1aba0:	f240 12c1 	movw	r2, #449	; 0x1c1
   1aba4:	4909      	ldr	r1, [pc, #36]	; (1abcc <ull_slave_ticker_cb+0x8c>)
   1aba6:	480a      	ldr	r0, [pc, #40]	; (1abd0 <ull_slave_ticker_cb+0x90>)
   1aba8:	f009 fb48 	bl	2423c <printk>
   1abac:	4040      	eors	r0, r0
   1abae:	f380 8811 	msr	BASEPRI, r0
   1abb2:	f04f 0003 	mov.w	r0, #3
   1abb6:	df02      	svc	2
	ull_conn_tx_demux(UINT8_MAX);
   1abb8:	20ff      	movs	r0, #255	; 0xff
   1abba:	f7ff fce5 	bl	1a588 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1abbe:	4620      	mov	r0, r4
   1abc0:	21ff      	movs	r1, #255	; 0xff
}
   1abc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1abc6:	f7ff be73 	b.w	1a8b0 <ull_conn_tx_lll_enqueue>
}
   1abca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1abcc:	00030e1b 	.word	0x00030e1b
   1abd0:	0002bced 	.word	0x0002bced
   1abd4:	200030ac 	.word	0x200030ac
   1abd8:	20000a44 	.word	0x20000a44

0001abdc <ull_slave_latency_cancel>:
{
   1abdc:	b510      	push	{r4, lr}
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1abde:	8e83      	ldrh	r3, [r0, #52]	; 0x34
{
   1abe0:	b088      	sub	sp, #32
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1abe2:	b333      	cbz	r3, 1ac32 <ull_slave_latency_cancel+0x56>
   1abe4:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
   1abe8:	f014 0302 	ands.w	r3, r4, #2
   1abec:	d121      	bne.n	1ac32 <ull_slave_latency_cancel+0x56>
				      (TICKER_ID_CONN_BASE + handle),
   1abee:	1d4a      	adds	r2, r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1abf0:	4911      	ldr	r1, [pc, #68]	; (1ac38 <ull_slave_latency_cancel+0x5c>)
		conn->slave.latency_cancel = 1U;
   1abf2:	f044 0402 	orr.w	r4, r4, #2
   1abf6:	f880 4080 	strb.w	r4, [r0, #128]	; 0x80
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1abfa:	e9cd 3104 	strd	r3, r1, [sp, #16]
   1abfe:	2101      	movs	r1, #1
   1ac00:	e9cd 3102 	strd	r3, r1, [sp, #8]
   1ac04:	9006      	str	r0, [sp, #24]
   1ac06:	e9cd 3300 	strd	r3, r3, [sp]
   1ac0a:	4618      	mov	r0, r3
   1ac0c:	b2d2      	uxtb	r2, r2
   1ac0e:	2103      	movs	r1, #3
   1ac10:	f00e f80e 	bl	28c30 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1ac14:	f030 0302 	bics.w	r3, r0, #2
   1ac18:	d00b      	beq.n	1ac32 <ull_slave_latency_cancel+0x56>
   1ac1a:	f44f 72c4 	mov.w	r2, #392	; 0x188
   1ac1e:	4907      	ldr	r1, [pc, #28]	; (1ac3c <ull_slave_latency_cancel+0x60>)
   1ac20:	4807      	ldr	r0, [pc, #28]	; (1ac40 <ull_slave_latency_cancel+0x64>)
   1ac22:	f009 fb0b 	bl	2423c <printk>
   1ac26:	4040      	eors	r0, r0
   1ac28:	f380 8811 	msr	BASEPRI, r0
   1ac2c:	f04f 0003 	mov.w	r0, #3
   1ac30:	df02      	svc	2
}
   1ac32:	b008      	add	sp, #32
   1ac34:	bd10      	pop	{r4, pc}
   1ac36:	bf00      	nop
   1ac38:	0001aab1 	.word	0x0001aab1
   1ac3c:	00030e1b 	.word	0x00030e1b
   1ac40:	0002bced 	.word	0x0002bced

0001ac44 <ll_wl_clear>:
{
	return WL_SIZE;
}

uint8_t ll_wl_clear(void)
{
   1ac44:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_BROADCASTER)
	if (ull_adv_filter_pol_get(0)) {
   1ac46:	2000      	movs	r0, #0
   1ac48:	f00e f8bf 	bl	28dca <ull_adv_filter_pol_get>
   1ac4c:	b108      	cbz	r0, 1ac52 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ac4e:	200c      	movs	r0, #12
#endif /* CONFIG_BT_CTLR_PRIVACY */

	wl_anon = 0U;

	return 0;
}
   1ac50:	bd08      	pop	{r3, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1ac52:	f00e f942 	bl	28eda <ull_scan_filter_pol_get>
   1ac56:	f010 0001 	ands.w	r0, r0, #1
   1ac5a:	d1f8      	bne.n	1ac4e <ll_wl_clear+0xa>
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1ac5c:	4b02      	ldr	r3, [pc, #8]	; (1ac68 <ll_wl_clear+0x24>)
   1ac5e:	7018      	strb	r0, [r3, #0]
	filter->addr_type_bitmask = 0;
   1ac60:	7058      	strb	r0, [r3, #1]
	wl_anon = 0U;
   1ac62:	4b02      	ldr	r3, [pc, #8]	; (1ac6c <ll_wl_clear+0x28>)
   1ac64:	7018      	strb	r0, [r3, #0]
	return 0;
   1ac66:	e7f3      	b.n	1ac50 <ll_wl_clear+0xc>
   1ac68:	200036ba 	.word	0x200036ba
   1ac6c:	200036b9 	.word	0x200036b9

0001ac70 <ll_wl_add>:
{
   1ac70:	b570      	push	{r4, r5, r6, lr}
   1ac72:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   1ac74:	2000      	movs	r0, #0
   1ac76:	f00e f8a8 	bl	28dca <ull_adv_filter_pol_get>
   1ac7a:	b108      	cbz	r0, 1ac80 <ll_wl_add+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ac7c:	200c      	movs	r0, #12
}
   1ac7e:	bd70      	pop	{r4, r5, r6, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1ac80:	f00e f92b 	bl	28eda <ull_scan_filter_pol_get>
   1ac84:	f010 0001 	ands.w	r0, r0, #1
   1ac88:	d1f8      	bne.n	1ac7c <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1ac8a:	7823      	ldrb	r3, [r4, #0]
   1ac8c:	2bff      	cmp	r3, #255	; 0xff
   1ac8e:	d103      	bne.n	1ac98 <ll_wl_add+0x28>
		wl_anon = 1U;
   1ac90:	4b12      	ldr	r3, [pc, #72]	; (1acdc <ll_wl_add+0x6c>)
   1ac92:	2201      	movs	r2, #1
   1ac94:	701a      	strb	r2, [r3, #0]
		return 0;
   1ac96:	e7f2      	b.n	1ac7e <ll_wl_add+0xe>
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   1ac98:	4d11      	ldr	r5, [pc, #68]	; (1ace0 <ll_wl_add+0x70>)
   1ac9a:	782a      	ldrb	r2, [r5, #0]
   1ac9c:	2aff      	cmp	r2, #255	; 0xff
	return filter_add(&wl_filter, addr->type, addr->a.val);
   1ac9e:	f104 0101 	add.w	r1, r4, #1
	if (filter->enable_bitmask == LLL_FILTER_BITMASK_ALL) {
   1aca2:	d018      	beq.n	1acd6 <ll_wl_add+0x66>
	     (filter->enable_bitmask & BIT(index));
   1aca4:	fa22 f400 	lsr.w	r4, r2, r0
	for (index = 0;
   1aca8:	f014 0401 	ands.w	r4, r4, #1
   1acac:	d111      	bne.n	1acd2 <ll_wl_add+0x62>
	filter->enable_bitmask |= BIT(index);
   1acae:	2601      	movs	r6, #1
   1acb0:	4086      	lsls	r6, r0
   1acb2:	4332      	orrs	r2, r6
   1acb4:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1acb6:	f003 0301 	and.w	r3, r3, #1
   1acba:	786a      	ldrb	r2, [r5, #1]
   1acbc:	4083      	lsls	r3, r0
   1acbe:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1acc0:	2206      	movs	r2, #6
   1acc2:	fb02 5000 	mla	r0, r2, r0, r5
   1acc6:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1acc8:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1acca:	f00b fa49 	bl	26160 <memcpy>
	return filter_add(&wl_filter, addr->type, addr->a.val);
   1acce:	b2e0      	uxtb	r0, r4
   1acd0:	e7d5      	b.n	1ac7e <ll_wl_add+0xe>
	     index++) {
   1acd2:	3001      	adds	r0, #1
   1acd4:	e7e6      	b.n	1aca4 <ll_wl_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1acd6:	2407      	movs	r4, #7
   1acd8:	e7f9      	b.n	1acce <ll_wl_add+0x5e>
   1acda:	bf00      	nop
   1acdc:	200036b9 	.word	0x200036b9
   1ace0:	200036ba 	.word	0x200036ba

0001ace4 <ll_wl_remove>:
{
   1ace4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ace8:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   1acea:	2000      	movs	r0, #0
   1acec:	f00e f86d 	bl	28dca <ull_adv_filter_pol_get>
   1acf0:	b110      	cbz	r0, 1acf8 <ll_wl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1acf2:	200c      	movs	r0, #12
}
   1acf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1acf8:	f00e f8ef 	bl	28eda <ull_scan_filter_pol_get>
   1acfc:	f010 0501 	ands.w	r5, r0, #1
   1ad00:	d1f7      	bne.n	1acf2 <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   1ad02:	f897 8000 	ldrb.w	r8, [r7]
   1ad06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1ad0a:	d103      	bne.n	1ad14 <ll_wl_remove+0x30>
		wl_anon = 0U;
   1ad0c:	4b17      	ldr	r3, [pc, #92]	; (1ad6c <ll_wl_remove+0x88>)
		return 0;
   1ad0e:	4628      	mov	r0, r5
		wl_anon = 0U;
   1ad10:	701d      	strb	r5, [r3, #0]
		return 0;
   1ad12:	e7ef      	b.n	1acf4 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
   1ad14:	4c16      	ldr	r4, [pc, #88]	; (1ad70 <ll_wl_remove+0x8c>)
   1ad16:	7823      	ldrb	r3, [r4, #0]
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1ad18:	3701      	adds	r7, #1
	if (!filter->enable_bitmask) {
   1ad1a:	b913      	cbnz	r3, 1ad22 <ll_wl_remove+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
   1ad1c:	2512      	movs	r5, #18
	return filter_remove(&wl_filter, addr->type, addr->a.val);
   1ad1e:	b2e8      	uxtb	r0, r5
   1ad20:	e7e8      	b.n	1acf4 <ll_wl_remove+0x10>
	index = WL_SIZE;
   1ad22:	2608      	movs	r6, #8
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1ad24:	f104 0902 	add.w	r9, r4, #2
   1ad28:	f04f 0a06 	mov.w	sl, #6
	while (index--) {
   1ad2c:	f116 36ff 	adds.w	r6, r6, #4294967295
   1ad30:	d3f4      	bcc.n	1ad1c <ll_wl_remove+0x38>
		if ((filter->enable_bitmask & BIT(index)) &&
   1ad32:	7823      	ldrb	r3, [r4, #0]
   1ad34:	40f3      	lsrs	r3, r6
   1ad36:	07da      	lsls	r2, r3, #31
   1ad38:	d5f8      	bpl.n	1ad2c <ll_wl_remove+0x48>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1ad3a:	7863      	ldrb	r3, [r4, #1]
   1ad3c:	4133      	asrs	r3, r6
   1ad3e:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
   1ad42:	07db      	lsls	r3, r3, #31
   1ad44:	d4f2      	bmi.n	1ad2c <ll_wl_remove+0x48>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1ad46:	2206      	movs	r2, #6
   1ad48:	4639      	mov	r1, r7
   1ad4a:	fb0a 9006 	mla	r0, sl, r6, r9
   1ad4e:	f00b f9e0 	bl	26112 <memcmp>
		     (addr_type & 0x01)) &&
   1ad52:	2800      	cmp	r0, #0
   1ad54:	d1ea      	bne.n	1ad2c <ll_wl_remove+0x48>
			filter->enable_bitmask &= ~BIT(index);
   1ad56:	2301      	movs	r3, #1
   1ad58:	40b3      	lsls	r3, r6
   1ad5a:	7822      	ldrb	r2, [r4, #0]
   1ad5c:	43db      	mvns	r3, r3
   1ad5e:	b2db      	uxtb	r3, r3
   1ad60:	401a      	ands	r2, r3
   1ad62:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
   1ad64:	7862      	ldrb	r2, [r4, #1]
   1ad66:	4013      	ands	r3, r2
   1ad68:	7063      	strb	r3, [r4, #1]
			return 0;
   1ad6a:	e7d8      	b.n	1ad1e <ll_wl_remove+0x3a>
   1ad6c:	200036b9 	.word	0x200036b9
   1ad70:	200036ba 	.word	0x200036ba

0001ad74 <ull_filter_reset>:
	wl_anon = 0U;
   1ad74:	4a03      	ldr	r2, [pc, #12]	; (1ad84 <ull_filter_reset+0x10>)
   1ad76:	2300      	movs	r3, #0
   1ad78:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
   1ad7a:	4a03      	ldr	r2, [pc, #12]	; (1ad88 <ull_filter_reset+0x14>)
   1ad7c:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
   1ad7e:	7053      	strb	r3, [r2, #1]
}
   1ad80:	4770      	bx	lr
   1ad82:	bf00      	nop
   1ad84:	200036b9 	.word	0x200036b9
   1ad88:	200036ba 	.word	0x200036ba

0001ad8c <ull_filter_lll_get>:
{
   1ad8c:	b508      	push	{r3, lr}
	LL_ASSERT(whitelist);
   1ad8e:	b958      	cbnz	r0, 1ada8 <ull_filter_lll_get+0x1c>
   1ad90:	f240 22d5 	movw	r2, #725	; 0x2d5
   1ad94:	4905      	ldr	r1, [pc, #20]	; (1adac <ull_filter_lll_get+0x20>)
   1ad96:	4806      	ldr	r0, [pc, #24]	; (1adb0 <ull_filter_lll_get+0x24>)
   1ad98:	f009 fa50 	bl	2423c <printk>
   1ad9c:	4040      	eors	r0, r0
   1ad9e:	f380 8811 	msr	BASEPRI, r0
   1ada2:	f04f 0003 	mov.w	r0, #3
   1ada6:	df02      	svc	2
}
   1ada8:	4802      	ldr	r0, [pc, #8]	; (1adb4 <ull_filter_lll_get+0x28>)
   1adaa:	bd08      	pop	{r3, pc}
   1adac:	00030e80 	.word	0x00030e80
   1adb0:	0002bced 	.word	0x0002bced
   1adb4:	200036ba 	.word	0x200036ba

0001adb8 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1adb8:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1adba:	4b08      	ldr	r3, [pc, #32]	; (1addc <rtc0_nrf5_isr+0x24>)
   1adbc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1adc0:	b122      	cbz	r2, 1adcc <rtc0_nrf5_isr+0x14>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1adc2:	2000      	movs	r0, #0
   1adc4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
   1adc8:	f7fc f97a 	bl	170c0 <ticker_trigger>
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1adcc:	2001      	movs	r0, #1
   1adce:	f7fb fc99 	bl	16704 <mayfly_run>

#if !defined(CONFIG_BT_CTLR_LOW_LAT) && \
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1add2:	2002      	movs	r0, #2
#endif

	DEBUG_TICKER_ISR(0);
}
   1add4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1add8:	f7fb bc94 	b.w	16704 <mayfly_run>
   1addc:	4000b000 	.word	0x4000b000

0001ade0 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ade0:	2801      	cmp	r0, #1
{
   1ade2:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ade4:	d90b      	bls.n	1adfe <ticker_stop_op_cb+0x1e>
   1ade6:	f240 228f 	movw	r2, #655	; 0x28f
   1adea:	4905      	ldr	r1, [pc, #20]	; (1ae00 <ticker_stop_op_cb+0x20>)
   1adec:	4805      	ldr	r0, [pc, #20]	; (1ae04 <ticker_stop_op_cb+0x24>)
   1adee:	f009 fa25 	bl	2423c <printk>
   1adf2:	4040      	eors	r0, r0
   1adf4:	f380 8811 	msr	BASEPRI, r0
   1adf8:	f04f 0003 	mov.w	r0, #3
   1adfc:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1adfe:	bd08      	pop	{r3, pc}
   1ae00:	00030eff 	.word	0x00030eff
   1ae04:	0002bced 	.word	0x0002bced

0001ae08 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ae08:	2801      	cmp	r0, #1
{
   1ae0a:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1ae0c:	d90b      	bls.n	1ae26 <ticker_start_op_cb+0x1e>
   1ae0e:	f240 229a 	movw	r2, #666	; 0x29a
   1ae12:	4905      	ldr	r1, [pc, #20]	; (1ae28 <ticker_start_op_cb+0x20>)
   1ae14:	4805      	ldr	r0, [pc, #20]	; (1ae2c <ticker_start_op_cb+0x24>)
   1ae16:	f009 fa11 	bl	2423c <printk>
   1ae1a:	4040      	eors	r0, r0
   1ae1c:	f380 8811 	msr	BASEPRI, r0
   1ae20:	f04f 0003 	mov.w	r0, #3
   1ae24:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1ae26:	bd08      	pop	{r3, pc}
   1ae28:	00030eff 	.word	0x00030eff
   1ae2c:	0002bced 	.word	0x0002bced

0001ae30 <preempt_ticker_start>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
{
   1ae30:	b530      	push	{r4, r5, lr}
	struct evt_hdr *evt;
	uint32_t preempt_to;
	uint32_t ret;

	/* Calc the preempt timeout */
	evt = HDR_LLL2EVT(prepare_param->param);
   1ae32:	68c3      	ldr	r3, [r0, #12]
   1ae34:	6819      	ldr	r1, [r3, #0]
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1ae36:	4b15      	ldr	r3, [pc, #84]	; (1ae8c <preempt_ticker_start+0x5c>)
   1ae38:	2200      	movs	r2, #0
{
   1ae3a:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1ae3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ae40:	4b13      	ldr	r3, [pc, #76]	; (1ae90 <preempt_ticker_start+0x60>)
   1ae42:	9208      	str	r2, [sp, #32]
   1ae44:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ae48:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1ae4c:	9201      	str	r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1ae4e:	e9d1 5400 	ldrd	r5, r4, [r1]
   1ae52:	688b      	ldr	r3, [r1, #8]
   1ae54:	42a5      	cmp	r5, r4
   1ae56:	bf2c      	ite	cs
   1ae58:	ebc3 0305 	rsbcs	r3, r3, r5
   1ae5c:	ebc3 0304 	rsbcc	r3, r3, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1ae60:	9300      	str	r3, [sp, #0]
   1ae62:	6803      	ldr	r3, [r0, #0]
   1ae64:	4611      	mov	r1, r2
   1ae66:	4610      	mov	r0, r2
   1ae68:	f00d fec7 	bl	28bfa <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ae6c:	2802      	cmp	r0, #2
   1ae6e:	d90b      	bls.n	1ae88 <preempt_ticker_start+0x58>
   1ae70:	f240 22b9 	movw	r2, #697	; 0x2b9
   1ae74:	4907      	ldr	r1, [pc, #28]	; (1ae94 <preempt_ticker_start+0x64>)
   1ae76:	4808      	ldr	r0, [pc, #32]	; (1ae98 <preempt_ticker_start+0x68>)
   1ae78:	f009 f9e0 	bl	2423c <printk>
   1ae7c:	4040      	eors	r0, r0
   1ae7e:	f380 8811 	msr	BASEPRI, r0
   1ae82:	f04f 0003 	mov.w	r0, #3
   1ae86:	df02      	svc	2
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   1ae88:	b00b      	add	sp, #44	; 0x2c
   1ae8a:	bd30      	pop	{r4, r5, pc}
   1ae8c:	0001ae09 	.word	0x0001ae09
   1ae90:	0001b055 	.word	0x0001b055
   1ae94:	00030eff 	.word	0x00030eff
   1ae98:	0002bced 	.word	0x0002bced

0001ae9c <prepare>:
{
   1ae9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aea0:	b085      	sub	sp, #20
   1aea2:	4699      	mov	r9, r3
   1aea4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1aea6:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1aeaa:	23ff      	movs	r3, #255	; 0xff
{
   1aeac:	4680      	mov	r8, r0
   1aeae:	460f      	mov	r7, r1
   1aeb0:	4616      	mov	r6, r2
	idx = UINT8_MAX;
   1aeb2:	f88d 300f 	strb.w	r3, [sp, #15]
		p = ull_prepare_dequeue_iter(&idx);
   1aeb6:	f10d 000f 	add.w	r0, sp, #15
   1aeba:	f7fe f84f 	bl	18f5c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1aebe:	b118      	cbz	r0, 1aec8 <prepare+0x2c>
   1aec0:	f890 3020 	ldrb.w	r3, [r0, #32]
   1aec4:	079b      	lsls	r3, r3, #30
   1aec6:	d1f6      	bne.n	1aeb6 <prepare+0x1a>
	if (event.curr.abort_cb || (p && is_resume)) {
   1aec8:	4b20      	ldr	r3, [pc, #128]	; (1af4c <prepare+0xb0>)
   1aeca:	689a      	ldr	r2, [r3, #8]
   1aecc:	b90a      	cbnz	r2, 1aed2 <prepare+0x36>
   1aece:	b1e0      	cbz	r0, 1af0a <prepare+0x6e>
   1aed0:	b1dd      	cbz	r5, 1af0a <prepare+0x6e>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1aed2:	e9cd 9500 	strd	r9, r5, [sp]
   1aed6:	4633      	mov	r3, r6
   1aed8:	4622      	mov	r2, r4
   1aeda:	4639      	mov	r1, r7
   1aedc:	4640      	mov	r0, r8
   1aede:	f7fd fedb 	bl	18c98 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1aee2:	b158      	cbz	r0, 1aefc <prepare+0x60>
   1aee4:	f240 2233 	movw	r2, #563	; 0x233
   1aee8:	4919      	ldr	r1, [pc, #100]	; (1af50 <prepare+0xb4>)
   1aeea:	481a      	ldr	r0, [pc, #104]	; (1af54 <prepare+0xb8>)
   1aeec:	f009 f9a6 	bl	2423c <printk>
   1aef0:	4040      	eors	r0, r0
   1aef2:	f380 8811 	msr	BASEPRI, r0
   1aef6:	f04f 0003 	mov.w	r0, #3
   1aefa:	df02      	svc	2
		if (is_resume) {
   1aefc:	b915      	cbnz	r5, 1af04 <prepare+0x68>
		preempt_ticker_start(prepare_param);
   1aefe:	4620      	mov	r0, r4
   1af00:	f7ff ff96 	bl	1ae30 <preempt_ticker_start>
			return -EINPROGRESS;
   1af04:	f06f 0443 	mvn.w	r4, #67	; 0x43
   1af08:	e01b      	b.n	1af42 <prepare+0xa6>
	event.curr.param = prepare_param->param;
   1af0a:	68e2      	ldr	r2, [r4, #12]
	event.curr.abort_cb = abort_cb;
   1af0c:	609f      	str	r7, [r3, #8]
	event.curr.is_abort_cb = is_abort_cb;
   1af0e:	e9c3 2800 	strd	r2, r8, [r3]
	err = prepare_cb(prepare_param);
   1af12:	4620      	mov	r0, r4
   1af14:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1af16:	2200      	movs	r2, #0
	err = prepare_cb(prepare_param);
   1af18:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1af1a:	9200      	str	r2, [sp, #0]
   1af1c:	4b0e      	ldr	r3, [pc, #56]	; (1af58 <prepare+0xbc>)
   1af1e:	4611      	mov	r1, r2
   1af20:	4610      	mov	r0, r2
   1af22:	f7fc f975 	bl	17210 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1af26:	2802      	cmp	r0, #2
   1af28:	d90b      	bls.n	1af42 <prepare+0xa6>
   1af2a:	f240 226f 	movw	r2, #623	; 0x26f
   1af2e:	4908      	ldr	r1, [pc, #32]	; (1af50 <prepare+0xb4>)
   1af30:	4808      	ldr	r0, [pc, #32]	; (1af54 <prepare+0xb8>)
   1af32:	f009 f983 	bl	2423c <printk>
   1af36:	4040      	eors	r0, r0
   1af38:	f380 8811 	msr	BASEPRI, r0
   1af3c:	f04f 0003 	mov.w	r0, #3
   1af40:	df02      	svc	2
}
   1af42:	4620      	mov	r0, r4
   1af44:	b005      	add	sp, #20
   1af46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1af4a:	bf00      	nop
   1af4c:	200030c0 	.word	0x200030c0
   1af50:	00030eff 	.word	0x00030eff
   1af54:	0002bced 	.word	0x0002bced
   1af58:	0001ade1 	.word	0x0001ade1

0001af5c <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1af5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1af5e:	4c3a      	ldr	r4, [pc, #232]	; (1b048 <preempt+0xec>)
   1af60:	68a3      	ldr	r3, [r4, #8]
{
   1af62:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1af64:	b373      	cbz	r3, 1afc4 <preempt+0x68>
   1af66:	6823      	ldr	r3, [r4, #0]
   1af68:	b363      	cbz	r3, 1afc4 <preempt+0x68>
		return;
	}

	idx = UINT8_MAX;
   1af6a:	23ff      	movs	r3, #255	; 0xff
   1af6c:	f88d 300e 	strb.w	r3, [sp, #14]
	if (!next) {
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
		next = ull_prepare_dequeue_iter(&idx);
   1af70:	f10d 000e 	add.w	r0, sp, #14
   1af74:	f7fd fff2 	bl	18f5c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1af78:	4605      	mov	r5, r0
   1af7a:	b318      	cbz	r0, 1afc4 <preempt+0x68>
   1af7c:	f890 0020 	ldrb.w	r0, [r0, #32]
   1af80:	f010 0603 	ands.w	r6, r0, #3
   1af84:	d1f4      	bne.n	1af70 <preempt+0x14>

	if (!next) {
		return;
	}

	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1af86:	ab05      	add	r3, sp, #20
   1af88:	9300      	str	r3, [sp, #0]
   1af8a:	6867      	ldr	r7, [r4, #4]
   1af8c:	6822      	ldr	r2, [r4, #0]
   1af8e:	69e9      	ldr	r1, [r5, #28]
   1af90:	68e8      	ldr	r0, [r5, #12]
   1af92:	ab04      	add	r3, sp, #16
   1af94:	47b8      	blx	r7
				     event.curr.param,
				     &resume_cb, &resume_prio);
	if (!ret) {
   1af96:	4607      	mov	r7, r0
   1af98:	b9b0      	cbnz	r0, 1afc8 <preempt+0x6c>
		/* Let LLL know about the cancelled prepare */
		next->is_aborted = 1;
   1af9a:	f895 3020 	ldrb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1af9e:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1afa0:	f043 0302 	orr.w	r3, r3, #2
   1afa4:	f885 3020 	strb.w	r3, [r5, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1afa8:	4628      	mov	r0, r5
   1afaa:	69ab      	ldr	r3, [r5, #24]
   1afac:	4798      	blx	r3
		LL_ASSERT(ret == -ECANCELED);
	}

preempt_next:
	do {
		next = ull_prepare_dequeue_iter(&idx);
   1afae:	f10d 000e 	add.w	r0, sp, #14
   1afb2:	f7fd ffd3 	bl	18f5c <ull_prepare_dequeue_iter>
		if (!next) {
   1afb6:	b128      	cbz	r0, 1afc4 <preempt+0x68>
			return;
		}
	} while (next->is_aborted || next->is_resume);
   1afb8:	f890 3020 	ldrb.w	r3, [r0, #32]
   1afbc:	079b      	lsls	r3, r3, #30
   1afbe:	d1f6      	bne.n	1afae <preempt+0x52>

	preempt_ticker_start(&next->prepare_param);
   1afc0:	f7ff ff36 	bl	1ae30 <preempt_ticker_start>
}
   1afc4:	b00b      	add	sp, #44	; 0x2c
   1afc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event.curr.abort_cb(NULL, event.curr.param);
   1afc8:	68a3      	ldr	r3, [r4, #8]
   1afca:	6821      	ldr	r1, [r4, #0]
   1afcc:	4630      	mov	r0, r6
   1afce:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1afd0:	f117 0f0b 	cmn.w	r7, #11
   1afd4:	d132      	bne.n	1b03c <preempt+0xe0>
		iter_idx = UINT8_MAX;
   1afd6:	23ff      	movs	r3, #255	; 0xff
   1afd8:	f88d 300f 	strb.w	r3, [sp, #15]
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1afdc:	f10d 000f 	add.w	r0, sp, #15
   1afe0:	f7fd ffbc 	bl	18f5c <ull_prepare_dequeue_iter>
		while (iter) {
   1afe4:	b9d8      	cbnz	r0, 1b01e <preempt+0xc2>
	prepare_param.param = event.curr.param;
   1afe6:	6823      	ldr	r3, [r4, #0]
   1afe8:	9309      	str	r3, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1afea:	2301      	movs	r3, #1
   1afec:	9301      	str	r3, [sp, #4]
   1afee:	9b05      	ldr	r3, [sp, #20]
	event.curr.param = NULL;
   1aff0:	6020      	str	r0, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1aff2:	9300      	str	r3, [sp, #0]
   1aff4:	aa06      	add	r2, sp, #24
   1aff6:	9b04      	ldr	r3, [sp, #16]
   1aff8:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1affc:	f7fd fe4c 	bl	18c98 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1b000:	2800      	cmp	r0, #0
   1b002:	d0d4      	beq.n	1afae <preempt+0x52>
   1b004:	f240 3201 	movw	r2, #769	; 0x301
		LL_ASSERT(ret == -ECANCELED);
   1b008:	4910      	ldr	r1, [pc, #64]	; (1b04c <preempt+0xf0>)
   1b00a:	4811      	ldr	r0, [pc, #68]	; (1b050 <preempt+0xf4>)
   1b00c:	f009 f916 	bl	2423c <printk>
   1b010:	4040      	eors	r0, r0
   1b012:	f380 8811 	msr	BASEPRI, r0
   1b016:	f04f 0003 	mov.w	r0, #3
   1b01a:	df02      	svc	2
   1b01c:	e7c7      	b.n	1afae <preempt+0x52>
			if (!iter->is_aborted &&
   1b01e:	f890 3020 	ldrb.w	r3, [r0, #32]
   1b022:	079a      	lsls	r2, r3, #30
   1b024:	d4da      	bmi.n	1afdc <preempt+0x80>
			    event.curr.param == iter->prepare_param.param) {
   1b026:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1b028:	6821      	ldr	r1, [r4, #0]
   1b02a:	4291      	cmp	r1, r2
   1b02c:	d1d6      	bne.n	1afdc <preempt+0x80>
				iter->is_aborted = 1;
   1b02e:	f043 0302 	orr.w	r3, r3, #2
   1b032:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1b036:	6983      	ldr	r3, [r0, #24]
   1b038:	4798      	blx	r3
   1b03a:	e7cf      	b.n	1afdc <preempt+0x80>
		LL_ASSERT(ret == -ECANCELED);
   1b03c:	3748      	adds	r7, #72	; 0x48
   1b03e:	d0b6      	beq.n	1afae <preempt+0x52>
   1b040:	f240 3203 	movw	r2, #771	; 0x303
   1b044:	e7e0      	b.n	1b008 <preempt+0xac>
   1b046:	bf00      	nop
   1b048:	200030c0 	.word	0x200030c0
   1b04c:	00030eff 	.word	0x00030eff
   1b050:	0002bced 	.word	0x0002bced

0001b054 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b054:	2200      	movs	r2, #0
{
   1b056:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b058:	4611      	mov	r1, r2
   1b05a:	4b09      	ldr	r3, [pc, #36]	; (1b080 <preempt_ticker_cb+0x2c>)
   1b05c:	2001      	movs	r0, #1
   1b05e:	f7fb fb01 	bl	16664 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1b062:	b158      	cbz	r0, 1b07c <preempt_ticker_cb+0x28>
   1b064:	f240 22c5 	movw	r2, #709	; 0x2c5
   1b068:	4906      	ldr	r1, [pc, #24]	; (1b084 <preempt_ticker_cb+0x30>)
   1b06a:	4807      	ldr	r0, [pc, #28]	; (1b088 <preempt_ticker_cb+0x34>)
   1b06c:	f009 f8e6 	bl	2423c <printk>
   1b070:	4040      	eors	r0, r0
   1b072:	f380 8811 	msr	BASEPRI, r0
   1b076:	f04f 0003 	mov.w	r0, #3
   1b07a:	df02      	svc	2
}
   1b07c:	bd08      	pop	{r3, pc}
   1b07e:	bf00      	nop
   1b080:	20000a54 	.word	0x20000a54
   1b084:	00030eff 	.word	0x00030eff
   1b088:	0002bced 	.word	0x0002bced

0001b08c <lll_init>:
{
   1b08c:	b510      	push	{r4, lr}
   1b08e:	4816      	ldr	r0, [pc, #88]	; (1b0e8 <lll_init+0x5c>)
   1b090:	f005 f8a2 	bl	201d8 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b094:	4b15      	ldr	r3, [pc, #84]	; (1b0ec <lll_init+0x60>)
   1b096:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1b098:	b310      	cbz	r0, 1b0e0 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1b09a:	4b15      	ldr	r3, [pc, #84]	; (1b0f0 <lll_init+0x64>)
   1b09c:	2400      	movs	r4, #0
   1b09e:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1b0a0:	f000 f984 	bl	1b3ac <lll_clock_init>
	if (err < 0) {
   1b0a4:	2800      	cmp	r0, #0
   1b0a6:	db1a      	blt.n	1b0de <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1b0a8:	4622      	mov	r2, r4
   1b0aa:	4621      	mov	r1, r4
   1b0ac:	2001      	movs	r0, #1
   1b0ae:	f7eb fa13 	bl	64d8 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1b0b2:	4622      	mov	r2, r4
   1b0b4:	4621      	mov	r1, r4
   1b0b6:	200b      	movs	r0, #11
   1b0b8:	f7eb fa0e 	bl	64d8 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1b0bc:	4622      	mov	r2, r4
   1b0be:	4621      	mov	r1, r4
   1b0c0:	2018      	movs	r0, #24
   1b0c2:	f7eb fa09 	bl	64d8 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1b0c6:	2001      	movs	r0, #1
   1b0c8:	f7eb f9d4 	bl	6474 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1b0cc:	200b      	movs	r0, #11
   1b0ce:	f7eb f9d1 	bl	6474 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1b0d2:	2018      	movs	r0, #24
   1b0d4:	f7eb f9ce 	bl	6474 <arch_irq_enable>
	radio_setup();
   1b0d8:	f00e fb15 	bl	29706 <radio_setup>
	return 0;
   1b0dc:	4620      	mov	r0, r4
}
   1b0de:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1b0e0:	f06f 0012 	mvn.w	r0, #18
   1b0e4:	e7fb      	b.n	1b0de <lll_init+0x52>
   1b0e6:	bf00      	nop
   1b0e8:	00030eef 	.word	0x00030eef
   1b0ec:	200030bc 	.word	0x200030bc
   1b0f0:	200030c0 	.word	0x200030c0

0001b0f4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1b0f4:	4b0c      	ldr	r3, [pc, #48]	; (1b128 <lll_csrand_get+0x34>)
{
   1b0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0fa:	4606      	mov	r6, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1b0fc:	681c      	ldr	r4, [r3, #0]
   1b0fe:	b28f      	uxth	r7, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1b100:	68a5      	ldr	r5, [r4, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1b102:	682b      	ldr	r3, [r5, #0]
   1b104:	b943      	cbnz	r3, 1b118 <lll_csrand_get+0x24>
   1b106:	4909      	ldr	r1, [pc, #36]	; (1b12c <lll_csrand_get+0x38>)
   1b108:	4809      	ldr	r0, [pc, #36]	; (1b130 <lll_csrand_get+0x3c>)
   1b10a:	224c      	movs	r2, #76	; 0x4c
   1b10c:	f009 f896 	bl	2423c <printk>
   1b110:	214c      	movs	r1, #76	; 0x4c
   1b112:	4806      	ldr	r0, [pc, #24]	; (1b12c <lll_csrand_get+0x38>)
   1b114:	f009 fb44 	bl	247a0 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1b118:	682b      	ldr	r3, [r5, #0]
   1b11a:	463a      	mov	r2, r7
   1b11c:	4631      	mov	r1, r6
   1b11e:	4620      	mov	r0, r4
}
   1b120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b124:	4718      	bx	r3
   1b126:	bf00      	nop
   1b128:	200030bc 	.word	0x200030bc
   1b12c:	00030ec2 	.word	0x00030ec2
   1b130:	0002bced 	.word	0x0002bced

0001b134 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1b134:	4b08      	ldr	r3, [pc, #32]	; (1b158 <lll_csrand_isr_get+0x24>)
{
   1b136:	b430      	push	{r4, r5}
   1b138:	4605      	mov	r5, r0
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1b13a:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1b13c:	6883      	ldr	r3, [r0, #8]
   1b13e:	685c      	ldr	r4, [r3, #4]
   1b140:	b28a      	uxth	r2, r1
   1b142:	b124      	cbz	r4, 1b14e <lll_csrand_isr_get+0x1a>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1b144:	4629      	mov	r1, r5
   1b146:	46a4      	mov	ip, r4
   1b148:	2300      	movs	r3, #0
}
   1b14a:	bc30      	pop	{r4, r5}
   1b14c:	4760      	bx	ip
   1b14e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1b152:	bc30      	pop	{r4, r5}
   1b154:	4770      	bx	lr
   1b156:	bf00      	nop
   1b158:	200030bc 	.word	0x200030bc

0001b15c <lll_resume>:
{
   1b15c:	b507      	push	{r0, r1, r2, lr}
		      next->prio, &next->prepare_param, next->is_resume);
   1b15e:	f890 3020 	ldrb.w	r3, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1b162:	f003 0301 	and.w	r3, r3, #1
   1b166:	e9cd 0300 	strd	r0, r3, [sp]
   1b16a:	69c3      	ldr	r3, [r0, #28]
   1b16c:	6902      	ldr	r2, [r0, #16]
   1b16e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1b172:	f7ff fe93 	bl	1ae9c <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1b176:	b160      	cbz	r0, 1b192 <lll_resume+0x36>
   1b178:	3044      	adds	r0, #68	; 0x44
   1b17a:	d00a      	beq.n	1b192 <lll_resume+0x36>
   1b17c:	22e9      	movs	r2, #233	; 0xe9
   1b17e:	4906      	ldr	r1, [pc, #24]	; (1b198 <lll_resume+0x3c>)
   1b180:	4806      	ldr	r0, [pc, #24]	; (1b19c <lll_resume+0x40>)
   1b182:	f009 f85b 	bl	2423c <printk>
   1b186:	4040      	eors	r0, r0
   1b188:	f380 8811 	msr	BASEPRI, r0
   1b18c:	f04f 0003 	mov.w	r0, #3
   1b190:	df02      	svc	2
}
   1b192:	b003      	add	sp, #12
   1b194:	f85d fb04 	ldr.w	pc, [sp], #4
   1b198:	00030eff 	.word	0x00030eff
   1b19c:	0002bced 	.word	0x0002bced

0001b1a0 <lll_disable>:
{
   1b1a0:	b513      	push	{r0, r1, r4, lr}
   1b1a2:	4b1a      	ldr	r3, [pc, #104]	; (1b20c <lll_disable+0x6c>)
	if (!param || (param == event.curr.param)) {
   1b1a4:	4604      	mov	r4, r0
   1b1a6:	b110      	cbz	r0, 1b1ae <lll_disable+0xe>
   1b1a8:	681a      	ldr	r2, [r3, #0]
   1b1aa:	4282      	cmp	r2, r0
   1b1ac:	d105      	bne.n	1b1ba <lll_disable+0x1a>
		if (event.curr.abort_cb && event.curr.param) {
   1b1ae:	689a      	ldr	r2, [r3, #8]
   1b1b0:	b16a      	cbz	r2, 1b1ce <lll_disable+0x2e>
   1b1b2:	6819      	ldr	r1, [r3, #0]
   1b1b4:	b159      	cbz	r1, 1b1ce <lll_disable+0x2e>
			event.curr.abort_cb(NULL, event.curr.param);
   1b1b6:	2000      	movs	r0, #0
   1b1b8:	4790      	blx	r2
		idx = UINT8_MAX;
   1b1ba:	23ff      	movs	r3, #255	; 0xff
   1b1bc:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1b1c0:	f10d 0007 	add.w	r0, sp, #7
   1b1c4:	f7fd feca 	bl	18f5c <ull_prepare_dequeue_iter>
		while (next) {
   1b1c8:	b978      	cbnz	r0, 1b1ea <lll_disable+0x4a>
}
   1b1ca:	b002      	add	sp, #8
   1b1cc:	bd10      	pop	{r4, pc}
			LL_ASSERT(!param);
   1b1ce:	2c00      	cmp	r4, #0
   1b1d0:	d0f3      	beq.n	1b1ba <lll_disable+0x1a>
   1b1d2:	22f3      	movs	r2, #243	; 0xf3
   1b1d4:	490e      	ldr	r1, [pc, #56]	; (1b210 <lll_disable+0x70>)
   1b1d6:	480f      	ldr	r0, [pc, #60]	; (1b214 <lll_disable+0x74>)
   1b1d8:	f009 f830 	bl	2423c <printk>
   1b1dc:	4040      	eors	r0, r0
   1b1de:	f380 8811 	msr	BASEPRI, r0
   1b1e2:	f04f 0003 	mov.w	r0, #3
   1b1e6:	df02      	svc	2
   1b1e8:	e7e7      	b.n	1b1ba <lll_disable+0x1a>
			if (!next->is_aborted &&
   1b1ea:	f890 3020 	ldrb.w	r3, [r0, #32]
   1b1ee:	079b      	lsls	r3, r3, #30
   1b1f0:	d4e6      	bmi.n	1b1c0 <lll_disable+0x20>
   1b1f2:	68c1      	ldr	r1, [r0, #12]
   1b1f4:	b10c      	cbz	r4, 1b1fa <lll_disable+0x5a>
			    (!param || (param == next->prepare_param.param))) {
   1b1f6:	428c      	cmp	r4, r1
   1b1f8:	d1e2      	bne.n	1b1c0 <lll_disable+0x20>
				next->is_aborted = 1;
   1b1fa:	f890 3020 	ldrb.w	r3, [r0, #32]
   1b1fe:	f043 0302 	orr.w	r3, r3, #2
   1b202:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1b206:	6983      	ldr	r3, [r0, #24]
   1b208:	4798      	blx	r3
   1b20a:	e7d9      	b.n	1b1c0 <lll_disable+0x20>
   1b20c:	200030c0 	.word	0x200030c0
   1b210:	00030eff 	.word	0x00030eff
   1b214:	0002bced 	.word	0x0002bced

0001b218 <lll_done>:
{
   1b218:	b510      	push	{r4, lr}
   1b21a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1b21c:	f7fd fd6e 	bl	18cfc <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1b220:	b174      	cbz	r4, 1b240 <lll_done+0x28>
   1b222:	b958      	cbnz	r0, 1b23c <lll_done+0x24>
   1b224:	f44f 7293 	mov.w	r2, #294	; 0x126
   1b228:	4919      	ldr	r1, [pc, #100]	; (1b290 <lll_done+0x78>)
   1b22a:	481a      	ldr	r0, [pc, #104]	; (1b294 <lll_done+0x7c>)
   1b22c:	f009 f806 	bl	2423c <printk>
   1b230:	4040      	eors	r0, r0
   1b232:	f380 8811 	msr	BASEPRI, r0
   1b236:	f04f 0003 	mov.w	r0, #3
   1b23a:	df02      	svc	2
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1b23c:	6820      	ldr	r0, [r4, #0]
   1b23e:	e014      	b.n	1b26a <lll_done+0x52>
		LL_ASSERT(event.curr.abort_cb);
   1b240:	4c15      	ldr	r4, [pc, #84]	; (1b298 <lll_done+0x80>)
   1b242:	68a3      	ldr	r3, [r4, #8]
   1b244:	b95b      	cbnz	r3, 1b25e <lll_done+0x46>
   1b246:	f44f 7296 	mov.w	r2, #300	; 0x12c
   1b24a:	4911      	ldr	r1, [pc, #68]	; (1b290 <lll_done+0x78>)
   1b24c:	4811      	ldr	r0, [pc, #68]	; (1b294 <lll_done+0x7c>)
   1b24e:	f008 fff5 	bl	2423c <printk>
   1b252:	4040      	eors	r0, r0
   1b254:	f380 8811 	msr	BASEPRI, r0
   1b258:	f04f 0003 	mov.w	r0, #3
   1b25c:	df02      	svc	2
		param = event.curr.param;
   1b25e:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1b260:	2300      	movs	r3, #0
   1b262:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1b264:	6023      	str	r3, [r4, #0]
		if (param) {
   1b266:	b108      	cbz	r0, 1b26c <lll_done+0x54>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1b268:	6800      	ldr	r0, [r0, #0]
   1b26a:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1b26c:	f7fd fea4 	bl	18fb8 <ull_event_done>
	LL_ASSERT(evdone);
   1b270:	b958      	cbnz	r0, 1b28a <lll_done+0x72>
   1b272:	f44f 72a2 	mov.w	r2, #324	; 0x144
   1b276:	4906      	ldr	r1, [pc, #24]	; (1b290 <lll_done+0x78>)
   1b278:	4806      	ldr	r0, [pc, #24]	; (1b294 <lll_done+0x7c>)
   1b27a:	f008 ffdf 	bl	2423c <printk>
   1b27e:	4040      	eors	r0, r0
   1b280:	f380 8811 	msr	BASEPRI, r0
   1b284:	f04f 0003 	mov.w	r0, #3
   1b288:	df02      	svc	2
}
   1b28a:	2000      	movs	r0, #0
   1b28c:	bd10      	pop	{r4, pc}
   1b28e:	bf00      	nop
   1b290:	00030eff 	.word	0x00030eff
   1b294:	0002bced 	.word	0x0002bced
   1b298:	200030c0 	.word	0x200030c0

0001b29c <lll_is_done>:
	return !event.curr.abort_cb;
   1b29c:	4b02      	ldr	r3, [pc, #8]	; (1b2a8 <lll_is_done+0xc>)
   1b29e:	6898      	ldr	r0, [r3, #8]
}
   1b2a0:	fab0 f080 	clz	r0, r0
   1b2a4:	0940      	lsrs	r0, r0, #5
   1b2a6:	4770      	bx	lr
   1b2a8:	200030c0 	.word	0x200030c0

0001b2ac <lll_chan_set>:
	switch (chan) {
   1b2ac:	2826      	cmp	r0, #38	; 0x26
{
   1b2ae:	b510      	push	{r4, lr}
   1b2b0:	4604      	mov	r4, r0
	switch (chan) {
   1b2b2:	d00b      	beq.n	1b2cc <lll_chan_set+0x20>
   1b2b4:	2827      	cmp	r0, #39	; 0x27
   1b2b6:	d00b      	beq.n	1b2d0 <lll_chan_set+0x24>
   1b2b8:	2825      	cmp	r0, #37	; 0x25
   1b2ba:	d10b      	bne.n	1b2d4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1b2bc:	2002      	movs	r0, #2
		radio_freq_chan_set(26);
   1b2be:	f001 fbd3 	bl	1ca68 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b2c2:	4620      	mov	r0, r4
}
   1b2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b2c8:	f001 bbd4 	b.w	1ca74 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1b2cc:	201a      	movs	r0, #26
   1b2ce:	e7f6      	b.n	1b2be <lll_chan_set+0x12>
		radio_freq_chan_set(80);
   1b2d0:	2050      	movs	r0, #80	; 0x50
   1b2d2:	e7f4      	b.n	1b2be <lll_chan_set+0x12>
		if (chan < 11) {
   1b2d4:	280a      	cmp	r0, #10
   1b2d6:	d802      	bhi.n	1b2de <lll_chan_set+0x32>
			radio_freq_chan_set(4 + (chan * 2U));
   1b2d8:	3002      	adds	r0, #2
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1b2da:	0040      	lsls	r0, r0, #1
   1b2dc:	e7ef      	b.n	1b2be <lll_chan_set+0x12>
		} else if (chan < 40) {
   1b2de:	2827      	cmp	r0, #39	; 0x27
   1b2e0:	d801      	bhi.n	1b2e6 <lll_chan_set+0x3a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1b2e2:	3003      	adds	r0, #3
   1b2e4:	e7f9      	b.n	1b2da <lll_chan_set+0x2e>
			LL_ASSERT(0);
   1b2e6:	f240 12a7 	movw	r2, #423	; 0x1a7
   1b2ea:	4905      	ldr	r1, [pc, #20]	; (1b300 <lll_chan_set+0x54>)
   1b2ec:	4805      	ldr	r0, [pc, #20]	; (1b304 <lll_chan_set+0x58>)
   1b2ee:	f008 ffa5 	bl	2423c <printk>
   1b2f2:	4040      	eors	r0, r0
   1b2f4:	f380 8811 	msr	BASEPRI, r0
   1b2f8:	f04f 0003 	mov.w	r0, #3
   1b2fc:	df02      	svc	2
   1b2fe:	e7e0      	b.n	1b2c2 <lll_chan_set+0x16>
   1b300:	00030eff 	.word	0x00030eff
   1b304:	0002bced 	.word	0x0002bced

0001b308 <lll_isr_cleanup>:
{
   1b308:	b508      	push	{r3, lr}
	radio_isr_set(isr_race, param);
   1b30a:	4601      	mov	r1, r0
   1b30c:	480f      	ldr	r0, [pc, #60]	; (1b34c <lll_isr_cleanup+0x44>)
   1b30e:	f001 fb51 	bl	1c9b4 <radio_isr_set>
	if (!radio_is_idle()) {
   1b312:	f001 fc4f 	bl	1cbb4 <radio_is_idle>
   1b316:	b908      	cbnz	r0, 1b31c <lll_isr_cleanup+0x14>
		radio_disable();
   1b318:	f001 fc1a 	bl	1cb50 <radio_disable>
	radio_tmr_stop();
   1b31c:	f001 fdae 	bl	1ce7c <radio_tmr_stop>
	err = lll_hfclock_off();
   1b320:	f000 f886 	bl	1b430 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b324:	2800      	cmp	r0, #0
   1b326:	da0b      	bge.n	1b340 <lll_isr_cleanup+0x38>
   1b328:	f240 220a 	movw	r2, #522	; 0x20a
   1b32c:	4908      	ldr	r1, [pc, #32]	; (1b350 <lll_isr_cleanup+0x48>)
   1b32e:	4809      	ldr	r0, [pc, #36]	; (1b354 <lll_isr_cleanup+0x4c>)
   1b330:	f008 ff84 	bl	2423c <printk>
   1b334:	4040      	eors	r0, r0
   1b336:	f380 8811 	msr	BASEPRI, r0
   1b33a:	f04f 0003 	mov.w	r0, #3
   1b33e:	df02      	svc	2
	lll_done(NULL);
   1b340:	2000      	movs	r0, #0
}
   1b342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1b346:	f7ff bf67 	b.w	1b218 <lll_done>
   1b34a:	bf00      	nop
   1b34c:	00029249 	.word	0x00029249
   1b350:	00030eff 	.word	0x00030eff
   1b354:	0002bced 	.word	0x0002bced

0001b358 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1b358:	b530      	push	{r4, r5, lr}
   1b35a:	4604      	mov	r4, r0
   1b35c:	b08b      	sub	sp, #44	; 0x2c
   1b35e:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b360:	2201      	movs	r2, #1
   1b362:	2100      	movs	r1, #0
   1b364:	a804      	add	r0, sp, #16
   1b366:	f00e ffb6 	bl	2a2d6 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1b36a:	2300      	movs	r3, #0
   1b36c:	9303      	str	r3, [sp, #12]
   1b36e:	4b0e      	ldr	r3, [pc, #56]	; (1b3a8 <blocking_on+0x50>)
   1b370:	9301      	str	r3, [sp, #4]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1b372:	4669      	mov	r1, sp
   1b374:	2303      	movs	r3, #3
   1b376:	4620      	mov	r0, r4
   1b378:	9302      	str	r3, [sp, #8]
   1b37a:	f7e8 fe13 	bl	3fa4 <onoff_request>
	if (err < 0) {
   1b37e:	2800      	cmp	r0, #0
   1b380:	db10      	blt.n	1b3a4 <blocking_on+0x4c>
   1b382:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1b386:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b38a:	2100      	movs	r1, #0
   1b38c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b390:	2300      	movs	r3, #0
   1b392:	fbe4 0105 	umlal	r0, r1, r4, r5
   1b396:	f7e6 fd57 	bl	1e48 <__aeabi_uldivmod>
   1b39a:	4602      	mov	r2, r0
   1b39c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b39e:	a804      	add	r0, sp, #16
   1b3a0:	f006 fdb0 	bl	21f04 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1b3a4:	b00b      	add	sp, #44	; 0x2c
   1b3a6:	bd30      	pop	{r4, r5, pc}
   1b3a8:	00029321 	.word	0x00029321

0001b3ac <lll_clock_init>:

int lll_clock_init(void)
{
   1b3ac:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b3ae:	2001      	movs	r0, #1
   1b3b0:	f7ea fba2 	bl	5af8 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1b3b4:	4904      	ldr	r1, [pc, #16]	; (1b3c8 <lll_clock_init+0x1c>)
   1b3b6:	2300      	movs	r3, #0
   1b3b8:	604b      	str	r3, [r1, #4]
   1b3ba:	60cb      	str	r3, [r1, #12]
   1b3bc:	2301      	movs	r3, #1
   1b3be:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1b3c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return onoff_request(mgr, &lf_cli);
   1b3c4:	f7e8 bdee 	b.w	3fa4 <onoff_request>
   1b3c8:	200030d8 	.word	0x200030d8

0001b3cc <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1b3cc:	4b0c      	ldr	r3, [pc, #48]	; (1b400 <lll_clock_wait+0x34>)
   1b3ce:	781a      	ldrb	r2, [r3, #0]
{
   1b3d0:	b510      	push	{r4, lr}
	if (done) {
   1b3d2:	b10a      	cbz	r2, 1b3d8 <lll_clock_wait+0xc>
		return 0;
   1b3d4:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1b3d6:	bd10      	pop	{r4, pc}
	done = true;
   1b3d8:	2001      	movs	r0, #1
   1b3da:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b3dc:	f7ea fb8c 	bl	5af8 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1b3e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b3e4:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1b3e6:	f7ff ffb7 	bl	1b358 <blocking_on>
	if (err) {
   1b3ea:	2800      	cmp	r0, #0
   1b3ec:	d1f3      	bne.n	1b3d6 <lll_clock_wait+0xa>
	err = onoff_release(mgr);
   1b3ee:	4620      	mov	r0, r4
   1b3f0:	f7e8 fe5a 	bl	40a8 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1b3f4:	2802      	cmp	r0, #2
   1b3f6:	d0ed      	beq.n	1b3d4 <lll_clock_wait+0x8>
		return -EIO;
   1b3f8:	f06f 0004 	mvn.w	r0, #4
   1b3fc:	e7eb      	b.n	1b3d6 <lll_clock_wait+0xa>
   1b3fe:	bf00      	nop
   1b400:	200036ec 	.word	0x200036ec

0001b404 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1b404:	b508      	push	{r3, lr}
   1b406:	4b09      	ldr	r3, [pc, #36]	; (1b42c <lll_hfclock_on+0x28>)
   1b408:	f3bf 8f5b 	dmb	ish
   1b40c:	e853 2f00 	ldrex	r2, [r3]
   1b410:	1c51      	adds	r1, r2, #1
   1b412:	e843 1000 	strex	r0, r1, [r3]
   1b416:	2800      	cmp	r0, #0
   1b418:	d1f8      	bne.n	1b40c <lll_hfclock_on+0x8>
   1b41a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1b41e:	2a00      	cmp	r2, #0
   1b420:	dc01      	bgt.n	1b426 <lll_hfclock_on+0x22>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_request();
   1b422:	f7ea fb71 	bl	5b08 <z_nrf_clock_bt_ctlr_hf_request>
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1b426:	2000      	movs	r0, #0
   1b428:	bd08      	pop	{r3, pc}
   1b42a:	bf00      	nop
   1b42c:	200030d4 	.word	0x200030d4

0001b430 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1b430:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1b432:	4b0c      	ldr	r3, [pc, #48]	; (1b464 <lll_hfclock_off+0x34>)
   1b434:	681a      	ldr	r2, [r3, #0]
   1b436:	2a00      	cmp	r2, #0
   1b438:	dd10      	ble.n	1b45c <lll_hfclock_off+0x2c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b43a:	f3bf 8f5b 	dmb	ish
   1b43e:	e853 2f00 	ldrex	r2, [r3]
   1b442:	1e51      	subs	r1, r2, #1
   1b444:	e843 1000 	strex	r0, r1, [r3]
   1b448:	2800      	cmp	r0, #0
   1b44a:	d1f8      	bne.n	1b43e <lll_hfclock_off+0xe>
   1b44c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1b450:	2a01      	cmp	r2, #1
   1b452:	dc01      	bgt.n	1b458 <lll_hfclock_off+0x28>
		return 0;
	}

	z_nrf_clock_bt_ctlr_hf_release();
   1b454:	f7ea fb6e 	bl	5b34 <z_nrf_clock_bt_ctlr_hf_release>
		return 0;
   1b458:	2000      	movs	r0, #0
   1b45a:	e001      	b.n	1b460 <lll_hfclock_off+0x30>
		return -EALREADY;
   1b45c:	f06f 0044 	mvn.w	r0, #68	; 0x44
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1b460:	bd08      	pop	{r3, pc}
   1b462:	bf00      	nop
   1b464:	200030d4 	.word	0x200030d4

0001b468 <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
   1b468:	4b01      	ldr	r3, [pc, #4]	; (1b470 <lll_clock_ppm_get+0x8>)
   1b46a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1b46e:	4770      	bx	lr
   1b470:	0002b8e8 	.word	0x0002b8e8

0001b474 <is_abort_cb>:
	struct lll_adv *lll = curr;
	struct pdu_adv *pdu;
#endif /* CONFIG_BT_PERIPHERAL */

	/* TODO: prio check */
	if (next != curr) {
   1b474:	4282      	cmp	r2, r0
{
   1b476:	b508      	push	{r3, lr}
	if (next != curr) {
   1b478:	d01a      	beq.n	1b4b0 <is_abort_cb+0x3c>
		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->is_hdcd) {
   1b47a:	7b12      	ldrb	r2, [r2, #12]
   1b47c:	07d2      	lsls	r2, r2, #31
   1b47e:	d524      	bpl.n	1b4ca <is_abort_cb+0x56>
			int err;

			/* wrap back after the pre-empter */
			*resume_cb = resume_prepare_cb;
   1b480:	4a13      	ldr	r2, [pc, #76]	; (1b4d0 <is_abort_cb+0x5c>)
   1b482:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1b484:	9b02      	ldr	r3, [sp, #8]
   1b486:	2200      	movs	r2, #0
   1b488:	601a      	str	r2, [r3, #0]

			/* Retain HF clk */
			err = lll_hfclock_on();
   1b48a:	f7ff ffbb 	bl	1b404 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1b48e:	2800      	cmp	r0, #0
   1b490:	da0b      	bge.n	1b4aa <is_abort_cb+0x36>
   1b492:	f44f 7213 	mov.w	r2, #588	; 0x24c
   1b496:	490f      	ldr	r1, [pc, #60]	; (1b4d4 <is_abort_cb+0x60>)
   1b498:	480f      	ldr	r0, [pc, #60]	; (1b4d8 <is_abort_cb+0x64>)
   1b49a:	f008 fecf 	bl	2423c <printk>
   1b49e:	4040      	eors	r0, r0
   1b4a0:	f380 8811 	msr	BASEPRI, r0
   1b4a4:	f04f 0003 	mov.w	r0, #3
   1b4a8:	df02      	svc	2
   1b4aa:	f06f 000a 	mvn.w	r0, #10
   1b4ae:	e00b      	b.n	1b4c8 <is_abort_cb+0x54>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1b4b0:	7c13      	ldrb	r3, [r2, #16]
   1b4b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		}
	}

#if defined(CONFIG_BT_PERIPHERAL)
	pdu = lll_adv_data_curr_get(lll);
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b4b6:	6953      	ldr	r3, [r2, #20]
   1b4b8:	781b      	ldrb	r3, [r3, #0]
   1b4ba:	f003 030f 	and.w	r3, r3, #15
   1b4be:	2b01      	cmp	r3, #1
		return 0;
   1b4c0:	bf14      	ite	ne
   1b4c2:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1b4c6:	2000      	moveq	r0, #0
	}
#endif /* CONFIG_BT_PERIPHERAL */

	return -ECANCELED;
}
   1b4c8:	bd08      	pop	{r3, pc}
			return -ECANCELED;
   1b4ca:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1b4ce:	e7fb      	b.n	1b4c8 <is_abort_cb+0x54>
   1b4d0:	00029353 	.word	0x00029353
   1b4d4:	00030f57 	.word	0x00030f57
   1b4d8:	0002bced 	.word	0x0002bced

0001b4dc <abort_cb>:

static void abort_cb(struct lll_prepare_param *prepare_param, void *param)
{
   1b4dc:	b510      	push	{r4, lr}
   1b4de:	460c      	mov	r4, r1
	int err;

	/* NOTE: This is not a prepare being cancelled */
	if (!prepare_param) {
   1b4e0:	b930      	cbnz	r0, 1b4f0 <abort_cb+0x14>
		/* Perform event abort here.
		 * After event has been cleanly aborted, clean up resources
		 * and dispatch event done.
		 */
		radio_isr_set(isr_abort, param);
   1b4e2:	480e      	ldr	r0, [pc, #56]	; (1b51c <abort_cb+0x40>)
   1b4e4:	f001 fa66 	bl	1c9b4 <radio_isr_set>
	 */
	err = lll_hfclock_off();
	LL_ASSERT(err >= 0);

	lll_done(param);
}
   1b4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b4ec:	f001 bb30 	b.w	1cb50 <radio_disable>
	err = lll_hfclock_off();
   1b4f0:	f7ff ff9e 	bl	1b430 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b4f4:	2800      	cmp	r0, #0
   1b4f6:	da0b      	bge.n	1b510 <abort_cb+0x34>
   1b4f8:	f240 2272 	movw	r2, #626	; 0x272
   1b4fc:	4908      	ldr	r1, [pc, #32]	; (1b520 <abort_cb+0x44>)
   1b4fe:	4809      	ldr	r0, [pc, #36]	; (1b524 <abort_cb+0x48>)
   1b500:	f008 fe9c 	bl	2423c <printk>
   1b504:	4040      	eors	r0, r0
   1b506:	f380 8811 	msr	BASEPRI, r0
   1b50a:	f04f 0003 	mov.w	r0, #3
   1b50e:	df02      	svc	2
	lll_done(param);
   1b510:	4620      	mov	r0, r4
}
   1b512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b516:	f7ff be7f 	b.w	1b218 <lll_done>
   1b51a:	bf00      	nop
   1b51c:	0002932d 	.word	0x0002932d
   1b520:	00030f57 	.word	0x00030f57
   1b524:	0002bced 	.word	0x0002bced

0001b528 <isr_tx>:

static void isr_tx(void *param)
{
   1b528:	b538      	push	{r3, r4, r5, lr}
   1b52a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_latency_capture();
	}

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
   1b52c:	f00d fed2 	bl	292d4 <lll_isr_tx_status_reset>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b530:	2096      	movs	r0, #150	; 0x96
   1b532:	f001 fbfb 	bl	1cd2c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1b536:	2300      	movs	r3, #0
   1b538:	461a      	mov	r2, r3
   1b53a:	4619      	mov	r1, r3
   1b53c:	4618      	mov	r0, r3
   1b53e:	f001 fb6d 	bl	1cc1c <radio_switch_complete_and_tx>

	radio_pkt_rx_set(radio_pkt_scratch_get());
   1b542:	f001 fb5b 	bl	1cbfc <radio_pkt_scratch_get>
   1b546:	f001 faeb 	bl	1cb20 <radio_pkt_rx_set>
	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
   1b54a:	f001 fb1f 	bl	1cb8c <radio_is_ready>
   1b54e:	b158      	cbz	r0, 1b568 <isr_tx+0x40>
   1b550:	f240 228e 	movw	r2, #654	; 0x28e
   1b554:	4911      	ldr	r1, [pc, #68]	; (1b59c <isr_tx+0x74>)
   1b556:	4812      	ldr	r0, [pc, #72]	; (1b5a0 <isr_tx+0x78>)
   1b558:	f008 fe70 	bl	2423c <printk>
   1b55c:	4040      	eors	r0, r0
   1b55e:	f380 8811 	msr	BASEPRI, r0
   1b562:	f04f 0003 	mov.w	r0, #3
   1b566:	df02      	svc	2

	if (IS_ENABLED(CONFIG_BT_CTLR_PROFILE_ISR)) {
		lll_prof_cputime_capture();
	}

	radio_isr_set(isr_rx, param);
   1b568:	4621      	mov	r1, r4
   1b56a:	480e      	ldr	r0, [pc, #56]	; (1b5a4 <isr_tx+0x7c>)
   1b56c:	f001 fa22 	bl	1c9b4 <radio_isr_set>
		radio_ar_configure(count, irks, 0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b570:	f001 fcd6 	bl	1cf20 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b574:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b576:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b578:	4608      	mov	r0, r1
   1b57a:	f00e f8ea 	bl	29752 <radio_rx_chain_delay_get>
	hcto += addr_us_get(phy_p);
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1b57e:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b580:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1b582:	4608      	mov	r0, r1
   1b584:	f00e f8e1 	bl	2974a <radio_tx_chain_delay_get>
   1b588:	442c      	add	r4, r5
   1b58a:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b58c:	1a20      	subs	r0, r4, r0
   1b58e:	f001 fc81 	bl	1ce94 <radio_tmr_hcto_configure>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_send();
	}
}
   1b592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   1b596:	f001 bcb5 	b.w	1cf04 <radio_tmr_end_capture>
   1b59a:	bf00      	nop
   1b59c:	00030f57 	.word	0x00030f57
   1b5a0:	0002bced 	.word	0x0002bced
   1b5a4:	0001b9b1 	.word	0x0001b9b1

0001b5a8 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1b5a8:	4b08      	ldr	r3, [pc, #32]	; (1b5cc <lll_adv_init+0x24>)
{
   1b5aa:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1b5ac:	1d18      	adds	r0, r3, #4
   1b5ae:	2205      	movs	r2, #5
   1b5b0:	2128      	movs	r1, #40	; 0x28
   1b5b2:	f00d f84d 	bl	28650 <mem_init>
	MFIFO_INIT(pdu_free);
   1b5b6:	4b06      	ldr	r3, [pc, #24]	; (1b5d0 <lll_adv_init+0x28>)
   1b5b8:	2400      	movs	r4, #0
   1b5ba:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b5bc:	2203      	movs	r2, #3
   1b5be:	4621      	mov	r1, r4
   1b5c0:	4804      	ldr	r0, [pc, #16]	; (1b5d4 <lll_adv_init+0x2c>)
   1b5c2:	f00e fe88 	bl	2a2d6 <z_impl_k_sem_init>
}
   1b5c6:	4620      	mov	r0, r4
   1b5c8:	bd10      	pop	{r4, pc}
   1b5ca:	bf00      	nop
   1b5cc:	200030e8 	.word	0x200030e8
   1b5d0:	20000a64 	.word	0x20000a64
   1b5d4:	200031b4 	.word	0x200031b4

0001b5d8 <lll_adv_data_init>:
{
   1b5d8:	b510      	push	{r4, lr}
   1b5da:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1b5dc:	4805      	ldr	r0, [pc, #20]	; (1b5f4 <lll_adv_data_init+0x1c>)
   1b5de:	f00d f85b 	bl	28698 <mem_acquire>
	if (!p) {
   1b5e2:	b120      	cbz	r0, 1b5ee <lll_adv_data_init+0x16>
	p->len = 0U;
   1b5e4:	2300      	movs	r3, #0
   1b5e6:	7043      	strb	r3, [r0, #1]
	pdu->pdu[0] = (void *)p;
   1b5e8:	6060      	str	r0, [r4, #4]
	return 0;
   1b5ea:	4618      	mov	r0, r3
}
   1b5ec:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1b5ee:	f06f 000b 	mvn.w	r0, #11
   1b5f2:	e7fb      	b.n	1b5ec <lll_adv_data_init+0x14>
   1b5f4:	200030e8 	.word	0x200030e8

0001b5f8 <lll_adv_pdu_alloc>:
{
   1b5f8:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1b5fa:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1b5fc:	7843      	ldrb	r3, [r0, #1]
	first = pdu->first;
   1b5fe:	b2d2      	uxtb	r2, r2
	if (first == last) {
   1b600:	429a      	cmp	r2, r3
   1b602:	d132      	bne.n	1b66a <lll_adv_pdu_alloc+0x72>
		last++;
   1b604:	3301      	adds	r3, #1
   1b606:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1b608:	2b02      	cmp	r3, #2
   1b60a:	d100      	bne.n	1b60e <lll_adv_pdu_alloc+0x16>
			last = 0U;
   1b60c:	2300      	movs	r3, #0
	*idx = last;
   1b60e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   1b612:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1b614:	6875      	ldr	r5, [r6, #4]
	if (p) {
   1b616:	2d00      	cmp	r5, #0
   1b618:	d134      	bne.n	1b684 <lll_adv_pdu_alloc+0x8c>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1b61a:	4c35      	ldr	r4, [pc, #212]	; (1b6f0 <lll_adv_pdu_alloc+0xf8>)
   1b61c:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1b61e:	78e1      	ldrb	r1, [r4, #3]
   1b620:	7823      	ldrb	r3, [r4, #0]
   1b622:	4291      	cmp	r1, r2
   1b624:	d028      	beq.n	1b678 <lll_adv_pdu_alloc+0x80>
	return *((void **)(fifo + first * size));
   1b626:	fb02 4303 	mla	r3, r2, r3, r4
   1b62a:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1b62c:	b325      	cbz	r5, 1b678 <lll_adv_pdu_alloc+0x80>
	return z_impl_k_sem_take(sem, timeout);
   1b62e:	2200      	movs	r2, #0
   1b630:	2300      	movs	r3, #0
   1b632:	4830      	ldr	r0, [pc, #192]	; (1b6f4 <lll_adv_pdu_alloc+0xfc>)
   1b634:	f006 fc66 	bl	21f04 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1b638:	b150      	cbz	r0, 1b650 <lll_adv_pdu_alloc+0x58>
   1b63a:	22f7      	movs	r2, #247	; 0xf7
   1b63c:	492e      	ldr	r1, [pc, #184]	; (1b6f8 <lll_adv_pdu_alloc+0x100>)
   1b63e:	482f      	ldr	r0, [pc, #188]	; (1b6fc <lll_adv_pdu_alloc+0x104>)
   1b640:	f008 fdfc 	bl	2423c <printk>
   1b644:	4040      	eors	r0, r0
   1b646:	f380 8811 	msr	BASEPRI, r0
   1b64a:	f04f 0003 	mov.w	r0, #3
   1b64e:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1b650:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1b652:	78e1      	ldrb	r1, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1b654:	7862      	ldrb	r2, [r4, #1]
   1b656:	4299      	cmp	r1, r3
   1b658:	d005      	beq.n	1b666 <lll_adv_pdu_alloc+0x6e>
	_first += 1U;
   1b65a:	3301      	adds	r3, #1
   1b65c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b65e:	429a      	cmp	r2, r3
   1b660:	bf08      	it	eq
   1b662:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b664:	70a3      	strb	r3, [r4, #2]
	pdu->pdu[last] = (void *)p;
   1b666:	6075      	str	r5, [r6, #4]
	return p;
   1b668:	e00c      	b.n	1b684 <lll_adv_pdu_alloc+0x8c>
		pdu->last = first;
   1b66a:	7042      	strb	r2, [r0, #1]
   1b66c:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   1b670:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   1b672:	42a2      	cmp	r2, r4
   1b674:	d1c6      	bne.n	1b604 <lll_adv_pdu_alloc+0xc>
   1b676:	e7ca      	b.n	1b60e <lll_adv_pdu_alloc+0x16>
	p = mem_acquire(&mem_pdu.free);
   1b678:	4821      	ldr	r0, [pc, #132]	; (1b700 <lll_adv_pdu_alloc+0x108>)
   1b67a:	f00d f80d 	bl	28698 <mem_acquire>
	if (p) {
   1b67e:	b118      	cbz	r0, 1b688 <lll_adv_pdu_alloc+0x90>
		pdu->pdu[last] = (void *)p;
   1b680:	6070      	str	r0, [r6, #4]
		return p;
   1b682:	4605      	mov	r5, r0
}
   1b684:	4628      	mov	r0, r5
   1b686:	bd70      	pop	{r4, r5, r6, pc}
   1b688:	f04f 32ff 	mov.w	r2, #4294967295
   1b68c:	f04f 33ff 	mov.w	r3, #4294967295
   1b690:	4818      	ldr	r0, [pc, #96]	; (1b6f4 <lll_adv_pdu_alloc+0xfc>)
   1b692:	f006 fc37 	bl	21f04 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1b696:	b158      	cbz	r0, 1b6b0 <lll_adv_pdu_alloc+0xb8>
   1b698:	f240 1207 	movw	r2, #263	; 0x107
   1b69c:	4916      	ldr	r1, [pc, #88]	; (1b6f8 <lll_adv_pdu_alloc+0x100>)
   1b69e:	4817      	ldr	r0, [pc, #92]	; (1b6fc <lll_adv_pdu_alloc+0x104>)
   1b6a0:	f008 fdcc 	bl	2423c <printk>
   1b6a4:	4040      	eors	r0, r0
   1b6a6:	f380 8811 	msr	BASEPRI, r0
   1b6aa:	f04f 0003 	mov.w	r0, #3
   1b6ae:	df02      	svc	2
	uint8_t _first = *first; /* Copy read-index */
   1b6b0:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1b6b2:	78e0      	ldrb	r0, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1b6b4:	7822      	ldrb	r2, [r4, #0]
   1b6b6:	7861      	ldrb	r1, [r4, #1]
   1b6b8:	4298      	cmp	r0, r3
   1b6ba:	d10d      	bne.n	1b6d8 <lll_adv_pdu_alloc+0xe0>
	LL_ASSERT(p);
   1b6bc:	f44f 7285 	mov.w	r2, #266	; 0x10a
   1b6c0:	490d      	ldr	r1, [pc, #52]	; (1b6f8 <lll_adv_pdu_alloc+0x100>)
   1b6c2:	480e      	ldr	r0, [pc, #56]	; (1b6fc <lll_adv_pdu_alloc+0x104>)
   1b6c4:	f008 fdba 	bl	2423c <printk>
   1b6c8:	4040      	eors	r0, r0
   1b6ca:	f380 8811 	msr	BASEPRI, r0
   1b6ce:	f04f 0003 	mov.w	r0, #3
   1b6d2:	df02      	svc	2
   1b6d4:	2500      	movs	r5, #0
   1b6d6:	e7c6      	b.n	1b666 <lll_adv_pdu_alloc+0x6e>
	mem = *((void **)(fifo + _first * size));
   1b6d8:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1b6dc:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1b6de:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1b6e0:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b6e2:	4299      	cmp	r1, r3
   1b6e4:	bf08      	it	eq
   1b6e6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b6e8:	70a3      	strb	r3, [r4, #2]
   1b6ea:	2d00      	cmp	r5, #0
   1b6ec:	d1bb      	bne.n	1b666 <lll_adv_pdu_alloc+0x6e>
   1b6ee:	e7e5      	b.n	1b6bc <lll_adv_pdu_alloc+0xc4>
   1b6f0:	20000a64 	.word	0x20000a64
   1b6f4:	200031b4 	.word	0x200031b4
   1b6f8:	00030f57 	.word	0x00030f57
   1b6fc:	0002bced 	.word	0x0002bced
   1b700:	200030e8 	.word	0x200030e8

0001b704 <lll_adv_pdu_latest_get>:
{
   1b704:	b570      	push	{r4, r5, r6, lr}
   1b706:	4604      	mov	r4, r0
	first = pdu->first;
   1b708:	7800      	ldrb	r0, [r0, #0]
	if (first != pdu->last) {
   1b70a:	7863      	ldrb	r3, [r4, #1]
	first = pdu->first;
   1b70c:	b2c0      	uxtb	r0, r0
	if (first != pdu->last) {
   1b70e:	4283      	cmp	r3, r0
   1b710:	d02f      	beq.n	1b772 <lll_adv_pdu_latest_get+0x6e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1b712:	4e1a      	ldr	r6, [pc, #104]	; (1b77c <lll_adv_pdu_latest_get+0x78>)
	last = last + 1;
   1b714:	78f3      	ldrb	r3, [r6, #3]
	if (last == count) {
   1b716:	7875      	ldrb	r5, [r6, #1]
   1b718:	78b2      	ldrb	r2, [r6, #2]
	last = last + 1;
   1b71a:	3301      	adds	r3, #1
   1b71c:	b2db      	uxtb	r3, r3
		last = 0U;
   1b71e:	429d      	cmp	r5, r3
   1b720:	bf08      	it	eq
   1b722:	2300      	moveq	r3, #0
	if (last == first) {
   1b724:	429a      	cmp	r2, r3
   1b726:	d10d      	bne.n	1b744 <lll_adv_pdu_latest_get+0x40>
			LL_ASSERT(false);
   1b728:	f240 121d 	movw	r2, #285	; 0x11d
   1b72c:	4914      	ldr	r1, [pc, #80]	; (1b780 <lll_adv_pdu_latest_get+0x7c>)
   1b72e:	4815      	ldr	r0, [pc, #84]	; (1b784 <lll_adv_pdu_latest_get+0x80>)
   1b730:	f008 fd84 	bl	2423c <printk>
   1b734:	4040      	eors	r0, r0
   1b736:	f380 8811 	msr	BASEPRI, r0
   1b73a:	f04f 0003 	mov.w	r0, #3
   1b73e:	df02      	svc	2
   1b740:	2000      	movs	r0, #0
}
   1b742:	bd70      	pop	{r4, r5, r6, pc}
		first += 1U;
   1b744:	1c45      	adds	r5, r0, #1
   1b746:	b2ed      	uxtb	r5, r5
			first = 0U;
   1b748:	2d02      	cmp	r5, #2
   1b74a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1b74e:	bf08      	it	eq
   1b750:	2500      	moveq	r5, #0
		*is_modified = 1U;
   1b752:	2201      	movs	r2, #1
		pdu->first = first;
   1b754:	7025      	strb	r5, [r4, #0]
		*is_modified = 1U;
   1b756:	700a      	strb	r2, [r1, #0]
		pdu->pdu[pdu_idx] = NULL;
   1b758:	2200      	movs	r2, #0
		p = pdu->pdu[pdu_idx];
   1b75a:	6841      	ldr	r1, [r0, #4]
		pdu->pdu[pdu_idx] = NULL;
   1b75c:	6042      	str	r2, [r0, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b75e:	78f0      	ldrb	r0, [r6, #3]
   1b760:	7832      	ldrb	r2, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b762:	fb00 6202 	mla	r2, r0, r2, r6
   1b766:	6051      	str	r1, [r2, #4]
	*last = idx; /* Commit: Update write index */
   1b768:	70f3      	strb	r3, [r6, #3]
	z_impl_k_sem_give(sem);
   1b76a:	4807      	ldr	r0, [pc, #28]	; (1b788 <lll_adv_pdu_latest_get+0x84>)
   1b76c:	f006 fb8e 	bl	21e8c <z_impl_k_sem_give>
   1b770:	4628      	mov	r0, r5
	return (void *)pdu->pdu[first];
   1b772:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1b776:	6840      	ldr	r0, [r0, #4]
   1b778:	e7e3      	b.n	1b742 <lll_adv_pdu_latest_get+0x3e>
   1b77a:	bf00      	nop
   1b77c:	20000a64 	.word	0x20000a64
   1b780:	00030f57 	.word	0x00030f57
   1b784:	0002bced 	.word	0x0002bced
   1b788:	200031b4 	.word	0x200031b4

0001b78c <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1b78c:	7b03      	ldrb	r3, [r0, #12]
	return __builtin_ffs(op);
   1b78e:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   1b792:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b794:	2b00      	cmp	r3, #0
   1b796:	4604      	mov	r4, r0
   1b798:	fa93 f0a3 	rbit	r0, r3
   1b79c:	fab0 f080 	clz	r0, r0
   1b7a0:	bf08      	it	eq
   1b7a2:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1b7a6:	1c45      	adds	r5, r0, #1
   1b7a8:	d10b      	bne.n	1b7c2 <chan_prepare+0x36>
   1b7aa:	f240 3287 	movw	r2, #903	; 0x387
   1b7ae:	4920      	ldr	r1, [pc, #128]	; (1b830 <chan_prepare+0xa4>)
   1b7b0:	4820      	ldr	r0, [pc, #128]	; (1b834 <chan_prepare+0xa8>)
   1b7b2:	f008 fd43 	bl	2423c <printk>
   1b7b6:	4040      	eors	r0, r0
   1b7b8:	f380 8811 	msr	BASEPRI, r0
   1b7bc:	f04f 0003 	mov.w	r0, #3
   1b7c0:	df02      	svc	2

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b7c2:	7b23      	ldrb	r3, [r4, #12]
   1b7c4:	f3c3 1202 	ubfx	r2, r3, #4, #3
   1b7c8:	1e51      	subs	r1, r2, #1
   1b7ca:	400a      	ands	r2, r1
   1b7cc:	f362 1306 	bfi	r3, r2, #4, #3
   1b7d0:	7323      	strb	r3, [r4, #12]

	lll_chan_set(36 + chan);
   1b7d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1b7d6:	f7ff fd69 	bl	1b2ac <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1b7da:	2600      	movs	r6, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1b7dc:	f10d 0107 	add.w	r1, sp, #7
   1b7e0:	f104 0010 	add.w	r0, r4, #16
   1b7e4:	f88d 6007 	strb.w	r6, [sp, #7]
   1b7e8:	f7ff ff8c 	bl	1b704 <lll_adv_pdu_latest_get>
   1b7ec:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1b7ee:	f001 f99d 	bl	1cb2c <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1b7f2:	782b      	ldrb	r3, [r5, #0]
   1b7f4:	f003 030f 	and.w	r3, r3, #15
   1b7f8:	2b02      	cmp	r3, #2
   1b7fa:	d012      	beq.n	1b822 <chan_prepare+0x96>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1b7fc:	f10d 0107 	add.w	r1, sp, #7
   1b800:	f104 001c 	add.w	r0, r4, #28
   1b804:	f7ff ff7e 	bl	1b704 <lll_adv_pdu_latest_get>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1b808:	4621      	mov	r1, r4
   1b80a:	480b      	ldr	r0, [pc, #44]	; (1b838 <chan_prepare+0xac>)
   1b80c:	f001 f8d2 	bl	1c9b4 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b810:	2096      	movs	r0, #150	; 0x96
   1b812:	f001 fa8b 	bl	1cd2c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1b816:	4630      	mov	r0, r6
   1b818:	f001 f9f4 	bl	1cc04 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1b81c:	4628      	mov	r0, r5
   1b81e:	b002      	add	sp, #8
   1b820:	bd70      	pop	{r4, r5, r6, pc}
		radio_isr_set(isr_done, lll);
   1b822:	4621      	mov	r1, r4
   1b824:	4805      	ldr	r0, [pc, #20]	; (1b83c <chan_prepare+0xb0>)
   1b826:	f001 f8c5 	bl	1c9b4 <radio_isr_set>
		radio_switch_complete_and_disable();
   1b82a:	f001 fa01 	bl	1cc30 <radio_switch_complete_and_disable>
	return pdu;
   1b82e:	e7f5      	b.n	1b81c <chan_prepare+0x90>
   1b830:	00030f57 	.word	0x00030f57
   1b834:	0002bced 	.word	0x0002bced
   1b838:	0001b529 	.word	0x0001b529
   1b83c:	0002937b 	.word	0x0002937b

0001b840 <prepare_cb>:
{
   1b840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	lll = p->param;
   1b842:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1b844:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1b846:	f015 0501 	ands.w	r5, r5, #1
{
   1b84a:	4606      	mov	r6, r0
	if (unlikely(lll_is_stop(lll))) {
   1b84c:	d015      	beq.n	1b87a <prepare_cb+0x3a>
		err = lll_hfclock_off();
   1b84e:	f7ff fdef 	bl	1b430 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1b852:	2800      	cmp	r0, #0
   1b854:	da0b      	bge.n	1b86e <prepare_cb+0x2e>
   1b856:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
   1b85a:	4936      	ldr	r1, [pc, #216]	; (1b934 <prepare_cb+0xf4>)
   1b85c:	4836      	ldr	r0, [pc, #216]	; (1b938 <prepare_cb+0xf8>)
   1b85e:	f008 fced 	bl	2423c <printk>
   1b862:	4040      	eors	r0, r0
   1b864:	f380 8811 	msr	BASEPRI, r0
   1b868:	f04f 0003 	mov.w	r0, #3
   1b86c:	df02      	svc	2
		lll_done(NULL);
   1b86e:	2000      	movs	r0, #0
   1b870:	f7ff fcd2 	bl	1b218 <lll_done>
}
   1b874:	2000      	movs	r0, #0
   1b876:	b003      	add	sp, #12
   1b878:	bdf0      	pop	{r4, r5, r6, r7, pc}
	radio_reset();
   1b87a:	f001 f8bb 	bl	1c9f4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1b87e:	4628      	mov	r0, r5
   1b880:	f001 f8ec 	bl	1ca5c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1b884:	4629      	mov	r1, r5
   1b886:	4628      	mov	r0, r5
   1b888:	f001 f8d8 	bl	1ca3c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1b88c:	462a      	mov	r2, r5
   1b88e:	2125      	movs	r1, #37	; 0x25
   1b890:	2008      	movs	r0, #8
   1b892:	f001 f919 	bl	1cac8 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1b896:	4b29      	ldr	r3, [pc, #164]	; (1b93c <prepare_cb+0xfc>)
   1b898:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1b89a:	a801      	add	r0, sp, #4
   1b89c:	f001 f8fc 	bl	1ca98 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b8a0:	4927      	ldr	r1, [pc, #156]	; (1b940 <prepare_cb+0x100>)
   1b8a2:	f240 605b 	movw	r0, #1627	; 0x65b
   1b8a6:	f001 f98f 	bl	1cbc8 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1b8aa:	7b23      	ldrb	r3, [r4, #12]
   1b8ac:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1b8b0:	f362 1306 	bfi	r3, r2, #4, #3
   1b8b4:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1b8b6:	4620      	mov	r0, r4
   1b8b8:	f7ff ff68 	bl	1b78c <chan_prepare>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1b8bc:	7b63      	ldrb	r3, [r4, #13]
   1b8be:	079b      	lsls	r3, r3, #30
   1b8c0:	d007      	beq.n	1b8d2 <prepare_cb+0x92>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b8c2:	2001      	movs	r0, #1
   1b8c4:	f7ff fa62 	bl	1ad8c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1b8c8:	1c82      	adds	r2, r0, #2
   1b8ca:	7841      	ldrb	r1, [r0, #1]
   1b8cc:	7800      	ldrb	r0, [r0, #0]
   1b8ce:	f001 f9df 	bl	1cc90 <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   1b8d2:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1b8d4:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1b8d6:	4638      	mov	r0, r7
   1b8d8:	f00d fcd9 	bl	2928e <lll_evt_offset_get>
   1b8dc:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1b8de:	6872      	ldr	r2, [r6, #4]
   1b8e0:	f105 0109 	add.w	r1, r5, #9
   1b8e4:	2001      	movs	r0, #1
   1b8e6:	f001 fa2d 	bl	1cd44 <radio_tmr_start>
	radio_tmr_end_capture();
   1b8ea:	f001 fb0b 	bl	1cf04 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1b8ee:	4620      	mov	r0, r4
   1b8f0:	f7fd fd9e 	bl	19430 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1b8f4:	1c81      	adds	r1, r0, #2
   1b8f6:	462a      	mov	r2, r5
   1b8f8:	b2c9      	uxtb	r1, r1
   1b8fa:	4638      	mov	r0, r7
   1b8fc:	f00d fcd5 	bl	292aa <lll_preempt_calc>
   1b900:	b130      	cbz	r0, 1b910 <prepare_cb+0xd0>
		radio_isr_set(isr_abort, lll);
   1b902:	4621      	mov	r1, r4
   1b904:	480f      	ldr	r0, [pc, #60]	; (1b944 <prepare_cb+0x104>)
   1b906:	f001 f855 	bl	1c9b4 <radio_isr_set>
		radio_disable();
   1b90a:	f001 f921 	bl	1cb50 <radio_disable>
   1b90e:	e7b1      	b.n	1b874 <prepare_cb+0x34>
		ret = lll_prepare_done(lll);
   1b910:	4620      	mov	r0, r4
   1b912:	f00d fcb7 	bl	29284 <lll_prepare_done>
		LL_ASSERT(!ret);
   1b916:	2800      	cmp	r0, #0
   1b918:	d0ac      	beq.n	1b874 <prepare_cb+0x34>
   1b91a:	f240 2221 	movw	r2, #545	; 0x221
   1b91e:	4905      	ldr	r1, [pc, #20]	; (1b934 <prepare_cb+0xf4>)
   1b920:	4805      	ldr	r0, [pc, #20]	; (1b938 <prepare_cb+0xf8>)
   1b922:	f008 fc8b 	bl	2423c <printk>
   1b926:	4040      	eors	r0, r0
   1b928:	f380 8811 	msr	BASEPRI, r0
   1b92c:	f04f 0003 	mov.w	r0, #3
   1b930:	df02      	svc	2
   1b932:	e79f      	b.n	1b874 <prepare_cb+0x34>
   1b934:	00030f57 	.word	0x00030f57
   1b938:	0002bced 	.word	0x0002bced
   1b93c:	8e89bed6 	.word	0x8e89bed6
   1b940:	00555555 	.word	0x00555555
   1b944:	0002932d 	.word	0x0002932d

0001b948 <lll_adv_prepare>:
{
   1b948:	b513      	push	{r0, r1, r4, lr}
   1b94a:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b94c:	f7ff fd5a 	bl	1b404 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b950:	2800      	cmp	r0, #0
   1b952:	da0b      	bge.n	1b96c <lll_adv_prepare+0x24>
   1b954:	f44f 729d 	mov.w	r2, #314	; 0x13a
   1b958:	4910      	ldr	r1, [pc, #64]	; (1b99c <lll_adv_prepare+0x54>)
   1b95a:	4811      	ldr	r0, [pc, #68]	; (1b9a0 <lll_adv_prepare+0x58>)
   1b95c:	f008 fc6e 	bl	2423c <printk>
   1b960:	4040      	eors	r0, r0
   1b962:	f380 8811 	msr	BASEPRI, r0
   1b966:	f04f 0003 	mov.w	r0, #3
   1b96a:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1b96c:	9400      	str	r4, [sp, #0]
   1b96e:	2300      	movs	r3, #0
   1b970:	4a0c      	ldr	r2, [pc, #48]	; (1b9a4 <lll_adv_prepare+0x5c>)
   1b972:	490d      	ldr	r1, [pc, #52]	; (1b9a8 <lll_adv_prepare+0x60>)
   1b974:	480d      	ldr	r0, [pc, #52]	; (1b9ac <lll_adv_prepare+0x64>)
   1b976:	f00d fc7c 	bl	29272 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b97a:	b168      	cbz	r0, 1b998 <lll_adv_prepare+0x50>
   1b97c:	3044      	adds	r0, #68	; 0x44
   1b97e:	d00b      	beq.n	1b998 <lll_adv_prepare+0x50>
   1b980:	f240 123d 	movw	r2, #317	; 0x13d
   1b984:	4905      	ldr	r1, [pc, #20]	; (1b99c <lll_adv_prepare+0x54>)
   1b986:	4806      	ldr	r0, [pc, #24]	; (1b9a0 <lll_adv_prepare+0x58>)
   1b988:	f008 fc58 	bl	2423c <printk>
   1b98c:	4040      	eors	r0, r0
   1b98e:	f380 8811 	msr	BASEPRI, r0
   1b992:	f04f 0003 	mov.w	r0, #3
   1b996:	df02      	svc	2
}
   1b998:	b002      	add	sp, #8
   1b99a:	bd10      	pop	{r4, pc}
   1b99c:	00030f57 	.word	0x00030f57
   1b9a0:	0002bced 	.word	0x0002bced
   1b9a4:	0001b841 	.word	0x0001b841
   1b9a8:	0001b4dd 	.word	0x0001b4dd
   1b9ac:	0001b475 	.word	0x0001b475

0001b9b0 <isr_rx>:
{
   1b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9b4:	b086      	sub	sp, #24
   1b9b6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b9b8:	f001 f8f2 	bl	1cba0 <radio_is_done>
   1b9bc:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   1b9be:	2d00      	cmp	r5, #0
   1b9c0:	d062      	beq.n	1ba88 <isr_rx+0xd8>
		crc_ok = radio_crc_is_valid();
   1b9c2:	f001 f90d 	bl	1cbe0 <radio_crc_is_valid>
   1b9c6:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   1b9c8:	f001 f990 	bl	1ccec <radio_filter_has_match>
   1b9cc:	fa5f f980 	uxtb.w	r9, r0
		devmatch_id = radio_filter_match_get();
   1b9d0:	f001 f996 	bl	1cd00 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1b9d4:	f001 fac2 	bl	1cf5c <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1b9d8:	f001 faa8 	bl	1cf2c <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1b9dc:	f001 f94e 	bl	1cc7c <radio_rssi_is_ready>
	lll_isr_status_reset();
   1b9e0:	f00d fc88 	bl	292f4 <lll_isr_status_reset>
	if (!trx_done) {
   1b9e4:	2d00      	cmp	r5, #0
   1b9e6:	f000 80b8 	beq.w	1bb5a <isr_rx+0x1aa>
	if (crc_ok) {
   1b9ea:	2e00      	cmp	r6, #0
   1b9ec:	f000 80b5 	beq.w	1bb5a <isr_rx+0x1aa>
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
   1b9f0:	23ff      	movs	r3, #255	; 0xff
   1b9f2:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   1b9f6:	f001 f901 	bl	1cbfc <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1b9fa:	7c23      	ldrb	r3, [r4, #16]
   1b9fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1ba00:	4606      	mov	r6, r0
   1ba02:	695d      	ldr	r5, [r3, #20]
	pdu_adv = lll_adv_data_curr_get(lll);

	addr = pdu_adv->adv_ind.addr;
   1ba04:	46a8      	mov	r8, r5
	tx_addr = pdu_adv->tx_addr;
   1ba06:	f818 7b02 	ldrb.w	r7, [r8], #2

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ba0a:	f007 030f 	and.w	r3, r7, #15
   1ba0e:	2b01      	cmp	r3, #1
	} else {
		tgt_addr = NULL;
	}
	rx_addr = pdu_adv->rx_addr;

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ba10:	7803      	ldrb	r3, [r0, #0]
   1ba12:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1ba16:	bf0c      	ite	eq
   1ba18:	3508      	addeq	r5, #8
		tgt_addr = NULL;
   1ba1a:	2500      	movne	r5, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ba1c:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   1ba1e:	f3c7 1a80 	ubfx	sl, r7, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1ba22:	ea4f 17d7 	mov.w	r7, r7, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ba26:	d132      	bne.n	1ba8e <isr_rx+0xde>
   1ba28:	7843      	ldrb	r3, [r0, #1]
   1ba2a:	2b0c      	cmp	r3, #12
   1ba2c:	f040 8095 	bne.w	1bb5a <isr_rx+0x1aa>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1ba30:	2d00      	cmp	r5, #0
   1ba32:	f040 8092 	bne.w	1bb5a <isr_rx+0x1aa>
	    (tgt_addr == NULL) &&
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1ba36:	f10d 0317 	add.w	r3, sp, #23
   1ba3a:	e9cd 9300 	strd	r9, r3, [sp]
   1ba3e:	4601      	mov	r1, r0
   1ba40:	4643      	mov	r3, r8
   1ba42:	4652      	mov	r2, sl
   1ba44:	4620      	mov	r0, r4
   1ba46:	f00d fcba 	bl	293be <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1ba4a:	b300      	cbz	r0, 1ba8e <isr_rx+0xde>
				    &rl_idx)) {
		radio_isr_set(isr_done, lll);
   1ba4c:	4621      	mov	r1, r4
   1ba4e:	4846      	ldr	r0, [pc, #280]	; (1bb68 <isr_rx+0x1b8>)
   1ba50:	f000 ffb0 	bl	1c9b4 <radio_isr_set>
		radio_switch_complete_and_disable();
   1ba54:	f001 f8ec 	bl	1cc30 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1ba58:	7f23      	ldrb	r3, [r4, #28]
   1ba5a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1ba5e:	6a20      	ldr	r0, [r4, #32]
   1ba60:	f001 f864 	bl	1cb2c <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1ba64:	f001 f892 	bl	1cb8c <radio_is_ready>
   1ba68:	b158      	cbz	r0, 1ba82 <isr_rx+0xd2>
   1ba6a:	f240 32dd 	movw	r2, #989	; 0x3dd
   1ba6e:	493f      	ldr	r1, [pc, #252]	; (1bb6c <isr_rx+0x1bc>)
   1ba70:	483f      	ldr	r0, [pc, #252]	; (1bb70 <isr_rx+0x1c0>)
   1ba72:	f008 fbe3 	bl	2423c <printk>
   1ba76:	4040      	eors	r0, r0
   1ba78:	f380 8811 	msr	BASEPRI, r0
   1ba7c:	f04f 0003 	mov.w	r0, #3
   1ba80:	df02      	svc	2
}
   1ba82:	b006      	add	sp, #24
   1ba84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1ba88:	462e      	mov	r6, r5
   1ba8a:	46a9      	mov	r9, r5
   1ba8c:	e7a8      	b.n	1b9e0 <isr_rx+0x30>
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
		return 0;

#if defined(CONFIG_BT_PERIPHERAL)
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1ba8e:	7833      	ldrb	r3, [r6, #0]
   1ba90:	f003 030f 	and.w	r3, r3, #15
   1ba94:	2b05      	cmp	r3, #5
   1ba96:	d160      	bne.n	1bb5a <isr_rx+0x1aa>
   1ba98:	7873      	ldrb	r3, [r6, #1]
   1ba9a:	2b22      	cmp	r3, #34	; 0x22
   1ba9c:	d15d      	bne.n	1bb5a <isr_rx+0x1aa>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1ba9e:	f10d 0317 	add.w	r3, sp, #23
   1baa2:	e9cd 9302 	strd	r9, r3, [sp, #8]
   1baa6:	e9cd 7500 	strd	r7, r5, [sp]
   1baaa:	4643      	mov	r3, r8
   1baac:	4652      	mov	r2, sl
   1baae:	4631      	mov	r1, r6
   1bab0:	4620      	mov	r0, r4
   1bab2:	f00d fc9c 	bl	293ee <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1bab6:	2800      	cmp	r0, #0
   1bab8:	d04f      	beq.n	1bb5a <isr_rx+0x1aa>
					     rx_addr, tgt_addr,
					     devmatch_ok, &rl_idx) &&
   1baba:	68a3      	ldr	r3, [r4, #8]
   1babc:	2b00      	cmp	r3, #0
   1babe:	d04c      	beq.n	1bb5a <isr_rx+0x1aa>
		int ret;

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			rx = ull_pdu_rx_alloc_peek(4);
		} else {
			rx = ull_pdu_rx_alloc_peek(3);
   1bac0:	2003      	movs	r0, #3
   1bac2:	f7fd f8a3 	bl	18c0c <ull_pdu_rx_alloc_peek>
		}

		if (!rx) {
   1bac6:	2800      	cmp	r0, #0
   1bac8:	d047      	beq.n	1bb5a <isr_rx+0x1aa>
			return -ENOBUFS;
		}

		radio_isr_set(isr_abort, lll);
   1baca:	4621      	mov	r1, r4
   1bacc:	4829      	ldr	r0, [pc, #164]	; (1bb74 <isr_rx+0x1c4>)
   1bace:	f000 ff71 	bl	1c9b4 <radio_isr_set>
		radio_disable();
   1bad2:	f001 f83d 	bl	1cb50 <radio_disable>

		/* assert if radio started tx */
		LL_ASSERT(!radio_is_ready());
   1bad6:	f001 f859 	bl	1cb8c <radio_is_ready>
   1bada:	b158      	cbz	r0, 1baf4 <isr_rx+0x144>
   1badc:	f240 421b 	movw	r2, #1051	; 0x41b
   1bae0:	4922      	ldr	r1, [pc, #136]	; (1bb6c <isr_rx+0x1bc>)
   1bae2:	4823      	ldr	r0, [pc, #140]	; (1bb70 <isr_rx+0x1c0>)
   1bae4:	f008 fbaa 	bl	2423c <printk>
   1bae8:	4040      	eors	r0, r0
   1baea:	f380 8811 	msr	BASEPRI, r0
   1baee:	f04f 0003 	mov.w	r0, #3
   1baf2:	df02      	svc	2
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1baf4:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1baf6:	f043 0201 	orr.w	r2, r3, #1
		}
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

		/* Stop further LLL radio events */
		ret = lll_stop(lll);
		LL_ASSERT(!ret);
   1bafa:	07db      	lsls	r3, r3, #31
   1bafc:	7122      	strb	r2, [r4, #4]
   1bafe:	d50b      	bpl.n	1bb18 <isr_rx+0x168>
   1bb00:	f240 4229 	movw	r2, #1065	; 0x429
   1bb04:	4919      	ldr	r1, [pc, #100]	; (1bb6c <isr_rx+0x1bc>)
   1bb06:	481a      	ldr	r0, [pc, #104]	; (1bb70 <isr_rx+0x1c0>)
   1bb08:	f008 fb98 	bl	2423c <printk>
   1bb0c:	4040      	eors	r0, r0
   1bb0e:	f380 8811 	msr	BASEPRI, r0
   1bb12:	f04f 0003 	mov.w	r0, #3
   1bb16:	df02      	svc	2

		rx = ull_pdu_rx_alloc();
   1bb18:	f7fd f890 	bl	18c3c <ull_pdu_rx_alloc>

		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1bb1c:	2313      	movs	r3, #19
		rx = ull_pdu_rx_alloc();
   1bb1e:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1bb20:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1bb22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bb26:	80c3      	strh	r3, [r0, #6]

		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1bb28:	2224      	movs	r2, #36	; 0x24
   1bb2a:	4631      	mov	r1, r6
   1bb2c:	301c      	adds	r0, #28
   1bb2e:	f00a fb17 	bl	26160 <memcpy>
					 sizeof(struct pdu_adv_connect_ind)));

		ftr = &(rx->hdr.rx_ftr);
		ftr->param = lll;
   1bb32:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1bb34:	f001 f99c 	bl	1ce70 <radio_tmr_start_get>
   1bb38:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1bb3a:	f001 f9eb 	bl	1cf14 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1bb3e:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1bb40:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1bb42:	4608      	mov	r0, r1
   1bb44:	f00d fe01 	bl	2974a <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1bb48:	1a20      	subs	r0, r4, r0
   1bb4a:	6168      	str	r0, [r5, #20]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			ftr->extra = ull_pdu_rx_alloc();
		}

		ull_rx_put(rx->hdr.link, rx);
   1bb4c:	4629      	mov	r1, r5
   1bb4e:	6828      	ldr	r0, [r5, #0]
   1bb50:	f7fd f88a 	bl	18c68 <ull_rx_put>
		ull_rx_sched();
   1bb54:	f7fd f898 	bl	18c88 <ull_rx_sched>
		if (!err) {
   1bb58:	e793      	b.n	1ba82 <isr_rx+0xd2>
	radio_isr_set(isr_done, param);
   1bb5a:	4621      	mov	r1, r4
   1bb5c:	4802      	ldr	r0, [pc, #8]	; (1bb68 <isr_rx+0x1b8>)
   1bb5e:	f000 ff29 	bl	1c9b4 <radio_isr_set>
	radio_disable();
   1bb62:	f000 fff5 	bl	1cb50 <radio_disable>
   1bb66:	e78c      	b.n	1ba82 <isr_rx+0xd2>
   1bb68:	0002937b 	.word	0x0002937b
   1bb6c:	00030f57 	.word	0x00030f57
   1bb70:	0002bced 	.word	0x0002bced
   1bb74:	0002932d 	.word	0x0002932d

0001bb78 <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
			   void *param)
{
   1bb78:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   1bb7a:	4619      	mov	r1, r3
   1bb7c:	4803      	ldr	r0, [pc, #12]	; (1bb8c <ticker_stop_cb+0x14>)
   1bb7e:	f000 ff19 	bl	1c9b4 <radio_isr_set>
	radio_disable();
}
   1bb82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1bb86:	f000 bfe3 	b.w	1cb50 <radio_disable>
   1bb8a:	bf00      	nop
   1bb8c:	00029467 	.word	0x00029467

0001bb90 <prepare_cb>:
{
   1bb90:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1bb92:	68c4      	ldr	r4, [r0, #12]
   1bb94:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1bb96:	f015 0501 	ands.w	r5, r5, #1
{
   1bb9a:	b08d      	sub	sp, #52	; 0x34
   1bb9c:	4606      	mov	r6, r0
	if (unlikely(lll_is_stop(lll))) {
   1bb9e:	d014      	beq.n	1bbca <prepare_cb+0x3a>
		err = lll_hfclock_off();
   1bba0:	f7ff fc46 	bl	1b430 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1bba4:	2800      	cmp	r0, #0
   1bba6:	da0a      	bge.n	1bbbe <prepare_cb+0x2e>
   1bba8:	2290      	movs	r2, #144	; 0x90
   1bbaa:	495b      	ldr	r1, [pc, #364]	; (1bd18 <prepare_cb+0x188>)
   1bbac:	485b      	ldr	r0, [pc, #364]	; (1bd1c <prepare_cb+0x18c>)
   1bbae:	f008 fb45 	bl	2423c <printk>
   1bbb2:	4040      	eors	r0, r0
   1bbb4:	f380 8811 	msr	BASEPRI, r0
   1bbb8:	f04f 0003 	mov.w	r0, #3
   1bbbc:	df02      	svc	2
		lll_done(NULL);
   1bbbe:	2000      	movs	r0, #0
   1bbc0:	f7ff fb2a 	bl	1b218 <lll_done>
}
   1bbc4:	2000      	movs	r0, #0
   1bbc6:	b00d      	add	sp, #52	; 0x34
   1bbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	lll->state = 0U;
   1bbca:	7a23      	ldrb	r3, [r4, #8]
   1bbcc:	f365 0300 	bfi	r3, r5, #0, #1
   1bbd0:	7223      	strb	r3, [r4, #8]
	radio_reset();
   1bbd2:	f000 ff0f 	bl	1c9f4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1bbd6:	4628      	mov	r0, r5
   1bbd8:	f000 ff40 	bl	1ca5c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1bbdc:	4629      	mov	r1, r5
   1bbde:	4628      	mov	r0, r5
   1bbe0:	f000 ff2c 	bl	1ca3c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1bbe4:	462a      	mov	r2, r5
   1bbe6:	2125      	movs	r1, #37	; 0x25
   1bbe8:	2008      	movs	r0, #8
   1bbea:	f000 ff6d 	bl	1cac8 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bbee:	2001      	movs	r0, #1
   1bbf0:	f7fd f80c 	bl	18c0c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bbf4:	4605      	mov	r5, r0
   1bbf6:	b950      	cbnz	r0, 1bc0e <prepare_cb+0x7e>
   1bbf8:	22af      	movs	r2, #175	; 0xaf
   1bbfa:	4947      	ldr	r1, [pc, #284]	; (1bd18 <prepare_cb+0x188>)
   1bbfc:	4847      	ldr	r0, [pc, #284]	; (1bd1c <prepare_cb+0x18c>)
   1bbfe:	f008 fb1d 	bl	2423c <printk>
   1bc02:	4040      	eors	r0, r0
   1bc04:	f380 8811 	msr	BASEPRI, r0
   1bc08:	f04f 0003 	mov.w	r0, #3
   1bc0c:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1bc0e:	f105 001c 	add.w	r0, r5, #28
   1bc12:	f000 ff85 	bl	1cb20 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1bc16:	4b42      	ldr	r3, [pc, #264]	; (1bd20 <prepare_cb+0x190>)
   1bc18:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1bc1a:	a80b      	add	r0, sp, #44	; 0x2c
   1bc1c:	f000 ff3c 	bl	1ca98 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1bc20:	4940      	ldr	r1, [pc, #256]	; (1bd24 <prepare_cb+0x194>)
   1bc22:	f240 605b 	movw	r0, #1627	; 0x65b
   1bc26:	f000 ffcf 	bl	1cbc8 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1bc2a:	7a20      	ldrb	r0, [r4, #8]
   1bc2c:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1bc30:	3025      	adds	r0, #37	; 0x25
   1bc32:	f7ff fb3b 	bl	1b2ac <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1bc36:	4621      	mov	r1, r4
   1bc38:	483b      	ldr	r0, [pc, #236]	; (1bd28 <prepare_cb+0x198>)
   1bc3a:	f000 febb 	bl	1c9b4 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bc3e:	2096      	movs	r0, #150	; 0x96
   1bc40:	f001 f874 	bl	1cd2c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1bc44:	2300      	movs	r3, #0
   1bc46:	461a      	mov	r2, r3
   1bc48:	4619      	mov	r1, r3
   1bc4a:	4618      	mov	r0, r3
   1bc4c:	f000 ffe6 	bl	1cc1c <radio_switch_complete_and_tx>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1bc50:	7a23      	ldrb	r3, [r4, #8]
   1bc52:	f013 0f18 	tst.w	r3, #24
   1bc56:	d007      	beq.n	1bc68 <prepare_cb+0xd8>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1bc58:	2001      	movs	r0, #1
   1bc5a:	f7ff f897 	bl	1ad8c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1bc5e:	1c82      	adds	r2, r0, #2
   1bc60:	7841      	ldrb	r1, [r0, #1]
   1bc62:	7800      	ldrb	r0, [r0, #0]
   1bc64:	f001 f814 	bl	1cc90 <radio_filter_configure>
	evt = HDR_LLL2EVT(lll);
   1bc68:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1bc6a:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1bc6c:	4638      	mov	r0, r7
   1bc6e:	f00d fb0e 	bl	2928e <lll_evt_offset_get>
   1bc72:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1bc74:	6872      	ldr	r2, [r6, #4]
   1bc76:	f105 0109 	add.w	r1, r5, #9
   1bc7a:	2000      	movs	r0, #0
   1bc7c:	f001 f862 	bl	1cd44 <radio_tmr_start>
	radio_tmr_end_capture();
   1bc80:	f001 f940 	bl	1cf04 <radio_tmr_end_capture>
	radio_rssi_measure();
   1bc84:	f000 ffe2 	bl	1cc4c <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1bc88:	4620      	mov	r0, r4
   1bc8a:	f7fd fd37 	bl	196fc <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1bc8e:	1d01      	adds	r1, r0, #4
   1bc90:	b2c9      	uxtb	r1, r1
   1bc92:	462a      	mov	r2, r5
   1bc94:	4638      	mov	r0, r7
   1bc96:	f00d fb08 	bl	292aa <lll_preempt_calc>
   1bc9a:	4601      	mov	r1, r0
   1bc9c:	b130      	cbz	r0, 1bcac <prepare_cb+0x11c>
		radio_isr_set(isr_abort, lll);
   1bc9e:	4621      	mov	r1, r4
   1bca0:	4822      	ldr	r0, [pc, #136]	; (1bd2c <prepare_cb+0x19c>)
   1bca2:	f000 fe87 	bl	1c9b4 <radio_isr_set>
		radio_disable();
   1bca6:	f000 ff53 	bl	1cb50 <radio_disable>
   1bcaa:	e78b      	b.n	1bbc4 <prepare_cb+0x34>
		if (lll->ticks_window) {
   1bcac:	69a3      	ldr	r3, [r4, #24]
   1bcae:	b1fb      	cbz	r3, 1bcf0 <prepare_cb+0x160>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1bcb0:	f240 120f 	movw	r2, #271	; 0x10f
   1bcb4:	9208      	str	r2, [sp, #32]
   1bcb6:	4a1e      	ldr	r2, [pc, #120]	; (1bd30 <prepare_cb+0x1a0>)
   1bcb8:	e9cd 4206 	strd	r4, r2, [sp, #24]
   1bcbc:	4a1d      	ldr	r2, [pc, #116]	; (1bd34 <prepare_cb+0x1a4>)
   1bcbe:	e9cd 3000 	strd	r3, r0, [sp]
   1bcc2:	e9cd 0204 	strd	r0, r2, [sp, #16]
   1bcc6:	462b      	mov	r3, r5
   1bcc8:	e9cd 0002 	strd	r0, r0, [sp, #8]
   1bccc:	2203      	movs	r2, #3
   1bcce:	f00c ff94 	bl	28bfa <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1bcd2:	f030 0302 	bics.w	r3, r0, #2
   1bcd6:	d00b      	beq.n	1bcf0 <prepare_cb+0x160>
   1bcd8:	f240 1211 	movw	r2, #273	; 0x111
   1bcdc:	490e      	ldr	r1, [pc, #56]	; (1bd18 <prepare_cb+0x188>)
   1bcde:	480f      	ldr	r0, [pc, #60]	; (1bd1c <prepare_cb+0x18c>)
   1bce0:	f008 faac 	bl	2423c <printk>
   1bce4:	4040      	eors	r0, r0
   1bce6:	f380 8811 	msr	BASEPRI, r0
   1bcea:	f04f 0003 	mov.w	r0, #3
   1bcee:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1bcf0:	4620      	mov	r0, r4
   1bcf2:	f00d fac7 	bl	29284 <lll_prepare_done>
		LL_ASSERT(!ret);
   1bcf6:	2800      	cmp	r0, #0
   1bcf8:	f43f af64 	beq.w	1bbc4 <prepare_cb+0x34>
   1bcfc:	f240 1229 	movw	r2, #297	; 0x129
   1bd00:	4905      	ldr	r1, [pc, #20]	; (1bd18 <prepare_cb+0x188>)
   1bd02:	4806      	ldr	r0, [pc, #24]	; (1bd1c <prepare_cb+0x18c>)
   1bd04:	f008 fa9a 	bl	2423c <printk>
   1bd08:	4040      	eors	r0, r0
   1bd0a:	f380 8811 	msr	BASEPRI, r0
   1bd0e:	f04f 0003 	mov.w	r0, #3
   1bd12:	df02      	svc	2
   1bd14:	e756      	b.n	1bbc4 <prepare_cb+0x34>
   1bd16:	bf00      	nop
   1bd18:	00030fb1 	.word	0x00030fb1
   1bd1c:	0002bced 	.word	0x0002bced
   1bd20:	8e89bed6 	.word	0x8e89bed6
   1bd24:	00555555 	.word	0x00555555
   1bd28:	0001bf0d 	.word	0x0001bf0d
   1bd2c:	0002955d 	.word	0x0002955d
   1bd30:	0001be41 	.word	0x0001be41
   1bd34:	0001bb79 	.word	0x0001bb79

0001bd38 <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
   1bd38:	b538      	push	{r3, r4, r5, lr}
   1bd3a:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
   1bd3c:	f00d fada 	bl	292f4 <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
   1bd40:	7a23      	ldrb	r3, [r4, #8]
   1bd42:	f36f 0300 	bfc	r3, #0, #1
   1bd46:	7223      	strb	r3, [r4, #8]
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	lll->is_adv_ind = 0U;
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bd48:	2096      	movs	r0, #150	; 0x96
   1bd4a:	f000 ffef 	bl	1cd2c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1bd4e:	2300      	movs	r3, #0
   1bd50:	4618      	mov	r0, r3
   1bd52:	461a      	mov	r2, r3
   1bd54:	4619      	mov	r1, r3
   1bd56:	f000 ff61 	bl	1cc1c <radio_switch_complete_and_tx>

	node_rx = ull_pdu_rx_alloc_peek(1);
   1bd5a:	2001      	movs	r0, #1
   1bd5c:	f7fc ff56 	bl	18c0c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bd60:	4605      	mov	r5, r0
   1bd62:	b958      	cbnz	r0, 1bd7c <isr_common_done+0x44>
   1bd64:	f240 222f 	movw	r2, #559	; 0x22f
   1bd68:	490a      	ldr	r1, [pc, #40]	; (1bd94 <isr_common_done+0x5c>)
   1bd6a:	480b      	ldr	r0, [pc, #44]	; (1bd98 <isr_common_done+0x60>)
   1bd6c:	f008 fa66 	bl	2423c <printk>
   1bd70:	4040      	eors	r0, r0
   1bd72:	f380 8811 	msr	BASEPRI, r0
   1bd76:	f04f 0003 	mov.w	r0, #3
   1bd7a:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1bd7c:	f105 001c 	add.w	r0, r5, #28
   1bd80:	f000 fece 	bl	1cb20 <radio_pkt_rx_set>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
   1bd84:	f000 ff62 	bl	1cc4c <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
   1bd88:	4621      	mov	r1, r4
   1bd8a:	4804      	ldr	r0, [pc, #16]	; (1bd9c <isr_common_done+0x64>)
}
   1bd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1bd90:	f000 be10 	b.w	1c9b4 <radio_isr_set>
   1bd94:	00030fb1 	.word	0x00030fb1
   1bd98:	0002bced 	.word	0x0002bced
   1bd9c:	0001bf0d 	.word	0x0001bf0d

0001bda0 <isr_tx>:
{
   1bda0:	b570      	push	{r4, r5, r6, lr}
   1bda2:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1bda4:	f00d fa96 	bl	292d4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bda8:	2096      	movs	r0, #150	; 0x96
   1bdaa:	f000 ffbf 	bl	1cd2c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1bdae:	2300      	movs	r3, #0
   1bdb0:	4618      	mov	r0, r3
   1bdb2:	461a      	mov	r2, r3
   1bdb4:	4619      	mov	r1, r3
   1bdb6:	f000 ff31 	bl	1cc1c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bdba:	2001      	movs	r0, #1
   1bdbc:	f7fc ff26 	bl	18c0c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bdc0:	4604      	mov	r4, r0
   1bdc2:	b958      	cbnz	r0, 1bddc <isr_tx+0x3c>
   1bdc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1bdc8:	491a      	ldr	r1, [pc, #104]	; (1be34 <isr_tx+0x94>)
   1bdca:	481b      	ldr	r0, [pc, #108]	; (1be38 <isr_tx+0x98>)
   1bdcc:	f008 fa36 	bl	2423c <printk>
   1bdd0:	4040      	eors	r0, r0
   1bdd2:	f380 8811 	msr	BASEPRI, r0
   1bdd6:	f04f 0003 	mov.w	r0, #3
   1bdda:	df02      	svc	2
	radio_pkt_rx_set(node_rx->pdu);
   1bddc:	f104 001c 	add.w	r0, r4, #28
   1bde0:	f000 fe9e 	bl	1cb20 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1bde4:	f000 fed2 	bl	1cb8c <radio_is_ready>
   1bde8:	b158      	cbz	r0, 1be02 <isr_tx+0x62>
   1bdea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1bdee:	4911      	ldr	r1, [pc, #68]	; (1be34 <isr_tx+0x94>)
   1bdf0:	4811      	ldr	r0, [pc, #68]	; (1be38 <isr_tx+0x98>)
   1bdf2:	f008 fa23 	bl	2423c <printk>
   1bdf6:	4040      	eors	r0, r0
   1bdf8:	f380 8811 	msr	BASEPRI, r0
   1bdfc:	f04f 0003 	mov.w	r0, #3
   1be00:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1be02:	f001 f88d 	bl	1cf20 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1be06:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1be08:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1be0a:	4608      	mov	r0, r1
   1be0c:	f00d fca1 	bl	29752 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1be10:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1be12:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1be14:	4608      	mov	r0, r1
   1be16:	f00d fc98 	bl	2974a <radio_tx_chain_delay_get>
   1be1a:	4434      	add	r4, r6
   1be1c:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1be1e:	1a20      	subs	r0, r4, r0
   1be20:	f001 f838 	bl	1ce94 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1be24:	f000 ff12 	bl	1cc4c <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1be28:	4629      	mov	r1, r5
   1be2a:	4804      	ldr	r0, [pc, #16]	; (1be3c <isr_tx+0x9c>)
}
   1be2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1be30:	f000 bdc0 	b.w	1c9b4 <radio_isr_set>
   1be34:	00030fb1 	.word	0x00030fb1
   1be38:	0002bced 	.word	0x0002bced
   1be3c:	0001bf0d 	.word	0x0001bf0d

0001be40 <ticker_op_start_cb>:
{
   1be40:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1be42:	b158      	cbz	r0, 1be5c <ticker_op_start_cb+0x1c>
   1be44:	f240 128d 	movw	r2, #397	; 0x18d
   1be48:	4905      	ldr	r1, [pc, #20]	; (1be60 <ticker_op_start_cb+0x20>)
   1be4a:	4806      	ldr	r0, [pc, #24]	; (1be64 <ticker_op_start_cb+0x24>)
   1be4c:	f008 f9f6 	bl	2423c <printk>
   1be50:	4040      	eors	r0, r0
   1be52:	f380 8811 	msr	BASEPRI, r0
   1be56:	f04f 0003 	mov.w	r0, #3
   1be5a:	df02      	svc	2
}
   1be5c:	bd08      	pop	{r3, pc}
   1be5e:	bf00      	nop
   1be60:	00030fb1 	.word	0x00030fb1
   1be64:	0002bced 	.word	0x0002bced

0001be68 <abort_cb>:
{
   1be68:	b510      	push	{r4, lr}
   1be6a:	460c      	mov	r4, r1
	if (!prepare_param) {
   1be6c:	b930      	cbnz	r0, 1be7c <abort_cb+0x14>
			radio_isr_set(isr_abort, param);
   1be6e:	480e      	ldr	r0, [pc, #56]	; (1bea8 <abort_cb+0x40>)
   1be70:	f000 fda0 	bl	1c9b4 <radio_isr_set>
}
   1be74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1be78:	f000 be6a 	b.w	1cb50 <radio_disable>
	err = lll_hfclock_off();
   1be7c:	f7ff fad8 	bl	1b430 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1be80:	2800      	cmp	r0, #0
   1be82:	da0b      	bge.n	1be9c <abort_cb+0x34>
   1be84:	f240 127d 	movw	r2, #381	; 0x17d
   1be88:	4908      	ldr	r1, [pc, #32]	; (1beac <abort_cb+0x44>)
   1be8a:	4809      	ldr	r0, [pc, #36]	; (1beb0 <abort_cb+0x48>)
   1be8c:	f008 f9d6 	bl	2423c <printk>
   1be90:	4040      	eors	r0, r0
   1be92:	f380 8811 	msr	BASEPRI, r0
   1be96:	f04f 0003 	mov.w	r0, #3
   1be9a:	df02      	svc	2
	lll_done(param);
   1be9c:	4620      	mov	r0, r4
}
   1be9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1bea2:	f7ff b9b9 	b.w	1b218 <lll_done>
   1bea6:	bf00      	nop
   1bea8:	0002955d 	.word	0x0002955d
   1beac:	00030fb1 	.word	0x00030fb1
   1beb0:	0002bced 	.word	0x0002bced

0001beb4 <is_abort_cb>:
	if (next != curr) {
   1beb4:	4282      	cmp	r2, r0
{
   1beb6:	b508      	push	{r3, lr}
	if (next != curr) {
   1beb8:	d017      	beq.n	1beea <is_abort_cb+0x36>
			*resume_cb = resume_prepare_cb;
   1beba:	4a10      	ldr	r2, [pc, #64]	; (1befc <is_abort_cb+0x48>)
   1bebc:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1bebe:	9b02      	ldr	r3, [sp, #8]
   1bec0:	2200      	movs	r2, #0
   1bec2:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1bec4:	f7ff fa9e 	bl	1b404 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1bec8:	2800      	cmp	r0, #0
   1beca:	da0b      	bge.n	1bee4 <is_abort_cb+0x30>
   1becc:	f44f 72a8 	mov.w	r2, #336	; 0x150
   1bed0:	490b      	ldr	r1, [pc, #44]	; (1bf00 <is_abort_cb+0x4c>)
   1bed2:	480c      	ldr	r0, [pc, #48]	; (1bf04 <is_abort_cb+0x50>)
   1bed4:	f008 f9b2 	bl	2423c <printk>
   1bed8:	4040      	eors	r0, r0
   1beda:	f380 8811 	msr	BASEPRI, r0
   1bede:	f04f 0003 	mov.w	r0, #3
   1bee2:	df02      	svc	2
   1bee4:	f06f 000a 	mvn.w	r0, #10
   1bee8:	e006      	b.n	1bef8 <is_abort_cb+0x44>
		radio_isr_set(isr_window, lll);
   1beea:	4807      	ldr	r0, [pc, #28]	; (1bf08 <is_abort_cb+0x54>)
   1beec:	4611      	mov	r1, r2
   1beee:	f000 fd61 	bl	1c9b4 <radio_isr_set>
	radio_disable();
   1bef2:	f000 fe2d 	bl	1cb50 <radio_disable>
	return 0;
   1bef6:	2000      	movs	r0, #0
}
   1bef8:	bd08      	pop	{r3, pc}
   1befa:	bf00      	nop
   1befc:	000294af 	.word	0x000294af
   1bf00:	00030fb1 	.word	0x00030fb1
   1bf04:	0002bced 	.word	0x0002bced
   1bf08:	000294d7 	.word	0x000294d7

0001bf0c <isr_rx>:
{
   1bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf10:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   1bf12:	f000 fe45 	bl	1cba0 <radio_is_done>
   1bf16:	b2c4      	uxtb	r4, r0
	if (trx_done) {
   1bf18:	2c00      	cmp	r4, #0
   1bf1a:	f000 8089 	beq.w	1c030 <isr_rx+0x124>
		crc_ok = radio_crc_is_valid();
   1bf1e:	f000 fe5f 	bl	1cbe0 <radio_crc_is_valid>
   1bf22:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
   1bf26:	f000 fee1 	bl	1ccec <radio_filter_has_match>
   1bf2a:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
   1bf2c:	f000 fee8 	bl	1cd00 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1bf30:	f001 f814 	bl	1cf5c <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
   1bf34:	f000 fffa 	bl	1cf2c <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
   1bf38:	f000 fea0 	bl	1cc7c <radio_rssi_is_ready>
   1bf3c:	b2c6      	uxtb	r6, r0
	lll_isr_status_reset();
   1bf3e:	f00d f9d9 	bl	292f4 <lll_isr_status_reset>
	if (!trx_done) {
   1bf42:	2c00      	cmp	r4, #0
   1bf44:	f000 808e 	beq.w	1c064 <isr_rx+0x158>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bf48:	2001      	movs	r0, #1
   1bf4a:	f7fc fe5f 	bl	18c0c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bf4e:	4604      	mov	r4, r0
   1bf50:	b958      	cbnz	r0, 1bf6a <isr_rx+0x5e>
   1bf52:	f240 12bb 	movw	r2, #443	; 0x1bb
   1bf56:	4966      	ldr	r1, [pc, #408]	; (1c0f0 <isr_rx+0x1e4>)
   1bf58:	4866      	ldr	r0, [pc, #408]	; (1c0f4 <isr_rx+0x1e8>)
   1bf5a:	f008 f96f 	bl	2423c <printk>
   1bf5e:	4040      	eors	r0, r0
   1bf60:	f380 8811 	msr	BASEPRI, r0
   1bf64:	f04f 0003 	mov.w	r0, #3
   1bf68:	df02      	svc	2
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1bf6a:	f1b8 0f00 	cmp.w	r8, #0
   1bf6e:	d079      	beq.n	1c064 <isr_rx+0x158>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
								rl_idx))) ||
		(((lll->filter_policy & 0x01) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
#else
	return ((lll->filter_policy & 0x01) == 0U) ||
   1bf70:	7a29      	ldrb	r1, [r5, #8]
   1bf72:	0708      	lsls	r0, r1, #28
   1bf74:	d501      	bpl.n	1bf7a <isr_rx+0x6e>
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1bf76:	2f00      	cmp	r7, #0
   1bf78:	d074      	beq.n	1c064 <isr_rx+0x158>

		return 0;
#endif /* CONFIG_BT_CENTRAL */

	/* Active scanner */
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1bf7a:	7f23      	ldrb	r3, [r4, #28]
   1bf7c:	f013 020f 	ands.w	r2, r3, #15
   1bf80:	d002      	beq.n	1bf88 <isr_rx+0x7c>
   1bf82:	2a06      	cmp	r2, #6
   1bf84:	f040 80b1 	bne.w	1c0ea <isr_rx+0x1de>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1bf88:	7f60      	ldrb	r0, [r4, #29]
   1bf8a:	2825      	cmp	r0, #37	; 0x25
   1bf8c:	d854      	bhi.n	1c038 <isr_rx+0x12c>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
		   lll->type &&
   1bf8e:	f995 0008 	ldrsb.w	r0, [r5, #8]
   1bf92:	2800      	cmp	r0, #0
   1bf94:	da50      	bge.n	1c038 <isr_rx+0x12c>
		bt_addr_t *lrpa;
#endif /* CONFIG_BT_CTLR_PRIVACY */
		int err;

		/* setup tIFS switching */
		radio_tmr_tifs_set(EVENT_IFS_US);
   1bf96:	2096      	movs	r0, #150	; 0x96
   1bf98:	f000 fec8 	bl	1cd2c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1bf9c:	2000      	movs	r0, #0
   1bf9e:	f000 fe31 	bl	1cc04 <radio_switch_complete_and_rx>

		/* save the adv packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1bfa2:	2100      	movs	r1, #0
   1bfa4:	4630      	mov	r0, r6
   1bfa6:	f00d fab7 	bl	29518 <isr_rx_scan_report.isra.5>
					 irkmatch_ok ? rl_idx : FILTER_IDX_NONE,
					 false);
		if (err) {
   1bfaa:	2800      	cmp	r0, #0
   1bfac:	d15a      	bne.n	1c064 <isr_rx+0x158>
			return err;
		}

		/* prepare the scan request packet */
		pdu_tx = (void *)radio_pkt_scratch_get();
   1bfae:	f000 fe25 	bl	1cbfc <radio_pkt_scratch_get>
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1bfb2:	7803      	ldrb	r3, [r0, #0]
   1bfb4:	2203      	movs	r2, #3
   1bfb6:	f362 0303 	bfi	r3, r2, #0, #4
   1bfba:	7003      	strb	r3, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1bfbc:	7f22      	ldrb	r2, [r4, #28]
   1bfbe:	b2db      	uxtb	r3, r3
   1bfc0:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1bfc4:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1bfc8:	220c      	movs	r2, #12
   1bfca:	7042      	strb	r2, [r0, #1]
			       BDADDR_SIZE);
		} else {
#else
		if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
			pdu_tx->tx_addr = lll->init_addr_type;
   1bfcc:	7a2a      	ldrb	r2, [r5, #8]
   1bfce:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1bfd2:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
   1bfd6:	4606      	mov	r6, r0
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   1bfd8:	2206      	movs	r2, #6
			pdu_tx->tx_addr = lll->init_addr_type;
   1bfda:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   1bfde:	f105 0109 	add.w	r1, r5, #9
   1bfe2:	f00a f8bd 	bl	26160 <memcpy>
			       &lll->init_addr[0], BDADDR_SIZE);
		}
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   1bfe6:	2206      	movs	r2, #6
   1bfe8:	f104 011e 	add.w	r1, r4, #30
   1bfec:	f106 0008 	add.w	r0, r6, #8
   1bff0:	f00a f8b6 	bl	26160 <memcpy>
		       &pdu_adv_rx->adv_ind.addr[0], BDADDR_SIZE);

		radio_pkt_tx_set(pdu_tx);
   1bff4:	4630      	mov	r0, r6
   1bff6:	f000 fd99 	bl	1cb2c <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
   1bffa:	f000 fdc7 	bl	1cb8c <radio_is_ready>
   1bffe:	b158      	cbz	r0, 1c018 <isr_rx+0x10c>
   1c000:	f240 32f9 	movw	r2, #1017	; 0x3f9
   1c004:	493a      	ldr	r1, [pc, #232]	; (1c0f0 <isr_rx+0x1e4>)
   1c006:	483b      	ldr	r0, [pc, #236]	; (1c0f4 <isr_rx+0x1e8>)
   1c008:	f008 f918 	bl	2423c <printk>
   1c00c:	4040      	eors	r0, r0
   1c00e:	f380 8811 	msr	BASEPRI, r0
   1c012:	f04f 0003 	mov.w	r0, #3
   1c016:	df02      	svc	2
			lll_prof_cputime_capture();

		}

		/* capture end of Tx-ed PDU, used to calculate HCTO. */
		radio_tmr_end_capture();
   1c018:	f000 ff74 	bl	1cf04 <radio_tmr_end_capture>
					 radio_rx_chain_delay_get(0, 0) -
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

		/* switch scanner state to active */
		lll->state = 1U;
   1c01c:	7a2b      	ldrb	r3, [r5, #8]
		if (pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) {
			lll->is_adv_ind = 1U;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		radio_isr_set(isr_tx, lll);
   1c01e:	4836      	ldr	r0, [pc, #216]	; (1c0f8 <isr_rx+0x1ec>)
		lll->state = 1U;
   1c020:	f043 0301 	orr.w	r3, r3, #1
   1c024:	722b      	strb	r3, [r5, #8]
		radio_isr_set(isr_tx, lll);
   1c026:	4629      	mov	r1, r5
}
   1c028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_isr_set(isr_tx, lll);
   1c02c:	f000 bcc2 	b.w	1c9b4 <radio_isr_set>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0U;
   1c030:	46a0      	mov	r8, r4
   1c032:	4626      	mov	r6, r4
   1c034:	4627      	mov	r7, r4
   1c036:	e782      	b.n	1bf3e <isr_rx+0x32>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1c038:	f013 0f0d 	tst.w	r3, #13
   1c03c:	d001      	beq.n	1c042 <isr_rx+0x136>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1c03e:	2a06      	cmp	r2, #6
   1c040:	d109      	bne.n	1c056 <isr_rx+0x14a>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1c042:	7f60      	ldrb	r0, [r4, #29]
   1c044:	2825      	cmp	r0, #37	; 0x25
   1c046:	d806      	bhi.n	1c056 <isr_rx+0x14a>
	bool dir_report = false;
   1c048:	2100      	movs	r1, #0
		   (lll->phy)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1c04a:	7f63      	ldrb	r3, [r4, #29]
   1c04c:	b153      	cbz	r3, 1c064 <isr_rx+0x158>
		   1) {
#endif /* !CONFIG_BT_CENTRAL */
		uint32_t err;

		/* save the scan response packet */
		err = isr_rx_scan_report(lll, rssi_ready,
   1c04e:	4630      	mov	r0, r6
   1c050:	f00d fa62 	bl	29518 <isr_rx_scan_report.isra.5>
					 irkmatch_ok ? rl_idx :
						       FILTER_IDX_NONE,
					 dir_report);
		if (err) {
   1c054:	e006      	b.n	1c064 <isr_rx+0x158>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   1c056:	2a01      	cmp	r2, #1
   1c058:	d00c      	beq.n	1c074 <isr_rx+0x168>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1c05a:	7f23      	ldrb	r3, [r4, #28]
					&dir_report))) ||
   1c05c:	f003 030f 	and.w	r3, r3, #15
   1c060:	2b04      	cmp	r3, #4
   1c062:	d02a      	beq.n	1c0ba <isr_rx+0x1ae>
	radio_isr_set(isr_done, lll);
   1c064:	4629      	mov	r1, r5
   1c066:	4825      	ldr	r0, [pc, #148]	; (1c0fc <isr_rx+0x1f0>)
   1c068:	f000 fca4 	bl	1c9b4 <radio_isr_set>
}
   1c06c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	radio_disable();
   1c070:	f000 bd6e 	b.w	1cb50 <radio_disable>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1c074:	7f62      	ldrb	r2, [r4, #29]
   1c076:	2a0c      	cmp	r2, #12
   1c078:	d1f4      	bne.n	1c064 <isr_rx+0x158>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return (((lll->init_addr_type == pdu->rx_addr) &&
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
			BDADDR_SIZE))) ||
   1c07a:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1c07e:	ebb1 1fd3 	cmp.w	r1, r3, lsr #7
   1c082:	d010      	beq.n	1c0a6 <isr_rx+0x19a>

static inline bool isr_scan_tgta_rpa_check(struct lll_scan *lll,
					   struct pdu_adv *pdu,
					   bool *dir_report)
{
	if (((lll->filter_policy & 0x02) != 0U) &&
   1c084:	7a2b      	ldrb	r3, [r5, #8]
   1c086:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1c08a:	079a      	lsls	r2, r3, #30
   1c08c:	d5e5      	bpl.n	1c05a <isr_rx+0x14e>
   1c08e:	f994 301c 	ldrsb.w	r3, [r4, #28]
   1c092:	2b00      	cmp	r3, #0
   1c094:	dae1      	bge.n	1c05a <isr_rx+0x14e>
	    (pdu->rx_addr != 0) &&
   1c096:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1c09a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c09e:	2b40      	cmp	r3, #64	; 0x40
   1c0a0:	d1db      	bne.n	1c05a <isr_rx+0x14e>

		if (dir_report) {
			*dir_report = true;
		}

		return true;
   1c0a2:	2101      	movs	r1, #1
   1c0a4:	e7d1      	b.n	1c04a <isr_rx+0x13e>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
   1c0a6:	2206      	movs	r2, #6
   1c0a8:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1c0ac:	f105 0009 	add.w	r0, r5, #9
   1c0b0:	f00a f82f 	bl	26112 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1c0b4:	2800      	cmp	r0, #0
   1c0b6:	d0c7      	beq.n	1c048 <isr_rx+0x13c>
   1c0b8:	e7e4      	b.n	1c084 <isr_rx+0x178>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1c0ba:	7f63      	ldrb	r3, [r4, #29]
   1c0bc:	2b25      	cmp	r3, #37	; 0x25
   1c0be:	d8d1      	bhi.n	1c064 <isr_rx+0x158>
		   (lll->state != 0U) &&
   1c0c0:	7a2b      	ldrb	r3, [r5, #8]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   1c0c2:	07db      	lsls	r3, r3, #31
   1c0c4:	d5ce      	bpl.n	1c064 <isr_rx+0x158>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1c0c6:	f000 fd99 	bl	1cbfc <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   1c0ca:	7f23      	ldrb	r3, [r4, #28]
   1c0cc:	7802      	ldrb	r2, [r0, #0]
   1c0ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c0d2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1c0d6:	d1c5      	bne.n	1c064 <isr_rx+0x158>
		(memcmp(&sreq->scan_req.adv_addr[0],
   1c0d8:	2206      	movs	r2, #6
   1c0da:	f104 011e 	add.w	r1, r4, #30
   1c0de:	3008      	adds	r0, #8
   1c0e0:	f00a f817 	bl	26112 <memcmp>
		   (lll->state != 0U) &&
   1c0e4:	2800      	cmp	r0, #0
   1c0e6:	d0af      	beq.n	1c048 <isr_rx+0x13c>
   1c0e8:	e7bc      	b.n	1c064 <isr_rx+0x158>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1c0ea:	2a02      	cmp	r2, #2
   1c0ec:	e7a8      	b.n	1c040 <isr_rx+0x134>
   1c0ee:	bf00      	nop
   1c0f0:	00030fb1 	.word	0x00030fb1
   1c0f4:	0002bced 	.word	0x0002bced
   1c0f8:	0001bda1 	.word	0x0001bda1
   1c0fc:	0002949d 	.word	0x0002949d

0001c100 <lll_scan_prepare>:
{
   1c100:	b513      	push	{r0, r1, r4, lr}
   1c102:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c104:	f7ff f97e 	bl	1b404 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1c108:	2800      	cmp	r0, #0
   1c10a:	da0a      	bge.n	1c122 <lll_scan_prepare+0x22>
   1c10c:	2270      	movs	r2, #112	; 0x70
   1c10e:	4910      	ldr	r1, [pc, #64]	; (1c150 <lll_scan_prepare+0x50>)
   1c110:	4810      	ldr	r0, [pc, #64]	; (1c154 <lll_scan_prepare+0x54>)
   1c112:	f008 f893 	bl	2423c <printk>
   1c116:	4040      	eors	r0, r0
   1c118:	f380 8811 	msr	BASEPRI, r0
   1c11c:	f04f 0003 	mov.w	r0, #3
   1c120:	df02      	svc	2
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1c122:	9400      	str	r4, [sp, #0]
   1c124:	2300      	movs	r3, #0
   1c126:	4a0c      	ldr	r2, [pc, #48]	; (1c158 <lll_scan_prepare+0x58>)
   1c128:	490c      	ldr	r1, [pc, #48]	; (1c15c <lll_scan_prepare+0x5c>)
   1c12a:	480d      	ldr	r0, [pc, #52]	; (1c160 <lll_scan_prepare+0x60>)
   1c12c:	f00d f8a1 	bl	29272 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c130:	b160      	cbz	r0, 1c14c <lll_scan_prepare+0x4c>
   1c132:	3044      	adds	r0, #68	; 0x44
   1c134:	d00a      	beq.n	1c14c <lll_scan_prepare+0x4c>
   1c136:	2273      	movs	r2, #115	; 0x73
   1c138:	4905      	ldr	r1, [pc, #20]	; (1c150 <lll_scan_prepare+0x50>)
   1c13a:	4806      	ldr	r0, [pc, #24]	; (1c154 <lll_scan_prepare+0x54>)
   1c13c:	f008 f87e 	bl	2423c <printk>
   1c140:	4040      	eors	r0, r0
   1c142:	f380 8811 	msr	BASEPRI, r0
   1c146:	f04f 0003 	mov.w	r0, #3
   1c14a:	df02      	svc	2
}
   1c14c:	b002      	add	sp, #8
   1c14e:	bd10      	pop	{r4, pc}
   1c150:	00030fb1 	.word	0x00030fb1
   1c154:	0002bced 	.word	0x0002bced
   1c158:	0001bb91 	.word	0x0001bb91
   1c15c:	0001be69 	.word	0x0001be69
   1c160:	0001beb5 	.word	0x0001beb5

0001c164 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1c164:	b570      	push	{r4, r5, r6, lr}
   1c166:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1c168:	f00d f8c4 	bl	292f4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1c16c:	f7fc ff14 	bl	18f98 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1c170:	4604      	mov	r4, r0
   1c172:	b958      	cbnz	r0, 1c18c <isr_done+0x28>
   1c174:	f240 226d 	movw	r2, #621	; 0x26d
   1c178:	4914      	ldr	r1, [pc, #80]	; (1c1cc <isr_done+0x68>)
   1c17a:	4815      	ldr	r0, [pc, #84]	; (1c1d0 <isr_done+0x6c>)
   1c17c:	f008 f85e 	bl	2423c <printk>
   1c180:	4040      	eors	r0, r0
   1c182:	f380 8811 	msr	BASEPRI, r0
   1c186:	f04f 0003 	mov.w	r0, #3
   1c18a:	df02      	svc	2

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1c18c:	2301      	movs	r3, #1
   1c18e:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
   1c190:	4b10      	ldr	r3, [pc, #64]	; (1c1d4 <isr_done+0x70>)
	e->crc_valid = crc_valid;
   1c192:	4a11      	ldr	r2, [pc, #68]	; (1c1d8 <isr_done+0x74>)
	e->trx_cnt = trx_cnt;
   1c194:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1c196:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   1c198:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   1c19a:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1c19c:	b18b      	cbz	r3, 1c1c2 <isr_done+0x5e>
		struct lll_conn *lll = param;

		if (lll->role) {
   1c19e:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1c1a2:	2b00      	cmp	r3, #0
   1c1a4:	da0d      	bge.n	1c1c2 <isr_done+0x5e>
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1c1a6:	f000 fea1 	bl	1ceec <radio_tmr_aa_restore>
   1c1aa:	4606      	mov	r6, r0
   1c1ac:	f000 fea4 	bl	1cef8 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1c1b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1c1b2:	60e3      	str	r3, [r4, #12]
				lll->slave.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1c1b4:	2328      	movs	r3, #40	; 0x28
   1c1b6:	6123      	str	r3, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1c1b8:	1a30      	subs	r0, r6, r0

			/* Reset window widening, as anchor point sync-ed */
			lll->slave.window_widening_event_us = 0;
   1c1ba:	2300      	movs	r3, #0
			e->drift.start_to_address_actual_us =
   1c1bc:	60a0      	str	r0, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1c1be:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1c1c0:	63eb      	str	r3, [r5, #60]	; 0x3c
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1c1c2:	4628      	mov	r0, r5
}
   1c1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	lll_isr_cleanup(param);
   1c1c8:	f7ff b89e 	b.w	1b308 <lll_isr_cleanup>
   1c1cc:	0003100d 	.word	0x0003100d
   1c1d0:	0002bced 	.word	0x0002bced
   1c1d4:	20003530 	.word	0x20003530
   1c1d8:	200036ee 	.word	0x200036ee

0001c1dc <lll_conn_prepare_reset>:
	trx_cnt = 0U;
   1c1dc:	4a03      	ldr	r2, [pc, #12]	; (1c1ec <lll_conn_prepare_reset+0x10>)
   1c1de:	2300      	movs	r3, #0
   1c1e0:	8013      	strh	r3, [r2, #0]
	crc_valid = 0U;
   1c1e2:	4a03      	ldr	r2, [pc, #12]	; (1c1f0 <lll_conn_prepare_reset+0x14>)
   1c1e4:	7013      	strb	r3, [r2, #0]
	crc_expire = 0U;
   1c1e6:	4a03      	ldr	r2, [pc, #12]	; (1c1f4 <lll_conn_prepare_reset+0x18>)
   1c1e8:	7013      	strb	r3, [r2, #0]
}
   1c1ea:	4770      	bx	lr
   1c1ec:	20003530 	.word	0x20003530
   1c1f0:	200036ee 	.word	0x200036ee
   1c1f4:	200036ed 	.word	0x200036ed

0001c1f8 <lll_conn_abort_cb>:
{
   1c1f8:	b510      	push	{r4, lr}
   1c1fa:	460c      	mov	r4, r1
	if (!prepare_param) {
   1c1fc:	b930      	cbnz	r0, 1c20c <lll_conn_abort_cb+0x14>
		radio_isr_set(isr_done, param);
   1c1fe:	480d      	ldr	r0, [pc, #52]	; (1c234 <lll_conn_abort_cb+0x3c>)
   1c200:	f000 fbd8 	bl	1c9b4 <radio_isr_set>
}
   1c204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1c208:	f000 bca2 	b.w	1cb50 <radio_disable>
	err = lll_hfclock_off();
   1c20c:	f7ff f910 	bl	1b430 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1c210:	2800      	cmp	r0, #0
   1c212:	da0a      	bge.n	1c22a <lll_conn_abort_cb+0x32>
   1c214:	229b      	movs	r2, #155	; 0x9b
   1c216:	4908      	ldr	r1, [pc, #32]	; (1c238 <lll_conn_abort_cb+0x40>)
   1c218:	4808      	ldr	r0, [pc, #32]	; (1c23c <lll_conn_abort_cb+0x44>)
   1c21a:	f008 f80f 	bl	2423c <printk>
   1c21e:	4040      	eors	r0, r0
   1c220:	f380 8811 	msr	BASEPRI, r0
   1c224:	f04f 0003 	mov.w	r0, #3
   1c228:	df02      	svc	2
	lll_done(param);
   1c22a:	4620      	mov	r0, r4
}
   1c22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1c230:	f7fe bff2 	b.w	1b218 <lll_done>
   1c234:	0001c165 	.word	0x0001c165
   1c238:	0003100d 	.word	0x0003100d
   1c23c:	0002bced 	.word	0x0002bced

0001c240 <lll_conn_rx_pkt_set>:
{
   1c240:	b510      	push	{r4, lr}
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c242:	2001      	movs	r0, #1
   1c244:	f7fc fce2 	bl	18c0c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c248:	4604      	mov	r4, r0
   1c24a:	b958      	cbnz	r0, 1c264 <lll_conn_rx_pkt_set+0x24>
   1c24c:	f240 12d5 	movw	r2, #469	; 0x1d5
   1c250:	490c      	ldr	r1, [pc, #48]	; (1c284 <lll_conn_rx_pkt_set+0x44>)
   1c252:	480d      	ldr	r0, [pc, #52]	; (1c288 <lll_conn_rx_pkt_set+0x48>)
   1c254:	f007 fff2 	bl	2423c <printk>
   1c258:	4040      	eors	r0, r0
   1c25a:	f380 8811 	msr	BASEPRI, r0
   1c25e:	f04f 0003 	mov.w	r0, #3
   1c262:	df02      	svc	2
	radio_phy_set(phy, 0);
   1c264:	2100      	movs	r1, #0
   1c266:	4608      	mov	r0, r1
   1c268:	f000 fbe8 	bl	1ca3c <radio_phy_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1c26c:	2008      	movs	r0, #8
   1c26e:	2201      	movs	r2, #1
   1c270:	211b      	movs	r1, #27
   1c272:	f000 fc29 	bl	1cac8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1c276:	f104 001c 	add.w	r0, r4, #28
}
   1c27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1c27e:	f000 bc4f 	b.w	1cb20 <radio_pkt_rx_set>
   1c282:	bf00      	nop
   1c284:	0003100d 	.word	0x0003100d
   1c288:	0002bced 	.word	0x0002bced

0001c28c <lll_conn_isr_tx>:
{
   1c28c:	b570      	push	{r4, r5, r6, lr}
   1c28e:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1c290:	f00d f820 	bl	292d4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1c294:	2096      	movs	r0, #150	; 0x96
   1c296:	f000 fd49 	bl	1cd2c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1c29a:	2300      	movs	r3, #0
   1c29c:	4618      	mov	r0, r3
   1c29e:	461a      	mov	r2, r3
   1c2a0:	4619      	mov	r1, r3
   1c2a2:	f000 fcbb 	bl	1cc1c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1c2a6:	4628      	mov	r0, r5
   1c2a8:	f7ff ffca 	bl	1c240 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c2ac:	f000 fc6e 	bl	1cb8c <radio_is_ready>
   1c2b0:	b158      	cbz	r0, 1c2ca <lll_conn_isr_tx+0x3e>
   1c2b2:	f240 12a1 	movw	r2, #417	; 0x1a1
   1c2b6:	4910      	ldr	r1, [pc, #64]	; (1c2f8 <lll_conn_isr_tx+0x6c>)
   1c2b8:	4810      	ldr	r0, [pc, #64]	; (1c2fc <lll_conn_isr_tx+0x70>)
   1c2ba:	f007 ffbf 	bl	2423c <printk>
   1c2be:	4040      	eors	r0, r0
   1c2c0:	f380 8811 	msr	BASEPRI, r0
   1c2c4:	f04f 0003 	mov.w	r0, #3
   1c2c8:	df02      	svc	2
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1c2ca:	f000 fe29 	bl	1cf20 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1c2ce:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1c2d0:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1c2d2:	4608      	mov	r0, r1
   1c2d4:	f00d fa3d 	bl	29752 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1c2d8:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1c2da:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1c2dc:	4608      	mov	r0, r1
   1c2de:	f00d fa34 	bl	2974a <radio_tx_chain_delay_get>
   1c2e2:	4434      	add	r4, r6
   1c2e4:	34cb      	adds	r4, #203	; 0xcb
	radio_tmr_hcto_configure(hcto);
   1c2e6:	1a20      	subs	r0, r4, r0
   1c2e8:	f000 fdd4 	bl	1ce94 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1c2ec:	4629      	mov	r1, r5
   1c2ee:	4804      	ldr	r0, [pc, #16]	; (1c300 <lll_conn_isr_tx+0x74>)
}
   1c2f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1c2f4:	f000 bb5e 	b.w	1c9b4 <radio_isr_set>
   1c2f8:	0003100d 	.word	0x0003100d
   1c2fc:	0002bced 	.word	0x0002bced
   1c300:	0001c305 	.word	0x0001c305

0001c304 <lll_conn_isr_rx>:
{
   1c304:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c308:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1c30a:	f000 fc49 	bl	1cba0 <radio_is_done>
   1c30e:	b2c5      	uxtb	r5, r0
	if (trx_done) {
   1c310:	b185      	cbz	r5, 1c334 <lll_conn_isr_rx+0x30>
		crc_ok = radio_crc_is_valid();
   1c312:	f000 fc65 	bl	1cbe0 <radio_crc_is_valid>
   1c316:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
   1c318:	f000 fcb0 	bl	1cc7c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1c31c:	f00c ffe1 	bl	292e2 <lll_isr_rx_status_reset>
	if (!trx_done) {
   1c320:	b955      	cbnz	r5, 1c338 <lll_conn_isr_rx+0x34>
		radio_isr_set(isr_done, param);
   1c322:	4621      	mov	r1, r4
   1c324:	4893      	ldr	r0, [pc, #588]	; (1c574 <lll_conn_isr_rx+0x270>)
   1c326:	f000 fb45 	bl	1c9b4 <radio_isr_set>
		radio_disable();
   1c32a:	f000 fc11 	bl	1cb50 <radio_disable>
}
   1c32e:	b002      	add	sp, #8
   1c330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = rssi_ready = 0U;
   1c334:	462f      	mov	r7, r5
   1c336:	e7f1      	b.n	1c31c <lll_conn_isr_rx+0x18>
	trx_cnt++;
   1c338:	4a8f      	ldr	r2, [pc, #572]	; (1c578 <lll_conn_isr_rx+0x274>)
   1c33a:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c33c:	2001      	movs	r0, #1
	trx_cnt++;
   1c33e:	3301      	adds	r3, #1
   1c340:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c342:	f7fc fc63 	bl	18c0c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c346:	4606      	mov	r6, r0
   1c348:	b950      	cbnz	r0, 1c360 <lll_conn_isr_rx+0x5c>
   1c34a:	22d0      	movs	r2, #208	; 0xd0
   1c34c:	498b      	ldr	r1, [pc, #556]	; (1c57c <lll_conn_isr_rx+0x278>)
   1c34e:	488c      	ldr	r0, [pc, #560]	; (1c580 <lll_conn_isr_rx+0x27c>)
   1c350:	f007 ff74 	bl	2423c <printk>
   1c354:	4040      	eors	r0, r0
   1c356:	f380 8811 	msr	BASEPRI, r0
   1c35a:	f04f 0003 	mov.w	r0, #3
   1c35e:	df02      	svc	2
	if (crc_ok) {
   1c360:	f8df 8228 	ldr.w	r8, [pc, #552]	; 1c58c <lll_conn_isr_rx+0x288>
   1c364:	2f00      	cmp	r7, #0
   1c366:	f000 80e6 	beq.w	1c536 <lll_conn_isr_rx+0x232>
		       offsetof(struct pdu_data, lldata));
	}
#endif

	/* Ack for tx-ed data */
	if (pdu_data_rx->nesn != lll->sn) {
   1c36a:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1c36e:	7f31      	ldrb	r1, [r6, #28]
   1c370:	f003 0201 	and.w	r2, r3, #1
   1c374:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1c378:	4291      	cmp	r1, r2
   1c37a:	f000 80a6 	beq.w	1c4ca <lll_conn_isr_rx+0x1c6>
		struct pdu_data *pdu_data_tx;
		struct node_tx *tx;
		memq_link_t *link;

		/* Increment sequence number */
		lll->sn++;
   1c37e:	f082 0201 	eor.w	r2, r2, #1
   1c382:	f362 0300 	bfi	r3, r2, #0, #1
   1c386:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

#if defined(CONFIG_BT_PERIPHERAL)
		/* First ack (and redundantly any other ack) enable use of
		 * slave latency.
		 */
		if (lll->role) {
   1c38a:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   1c38e:	2b00      	cmp	r3, #0
			lll->slave.latency_enabled = 1;
   1c390:	bfbe      	ittt	lt
   1c392:	f894 3024 	ldrblt.w	r3, [r4, #36]	; 0x24
   1c396:	f043 0301 	orrlt.w	r3, r3, #1
   1c39a:	f884 3024 	strblt.w	r3, [r4, #36]	; 0x24
		}
#endif /* CONFIG_BT_PERIPHERAL */

		FORCE_MD_CNT_DEC();

		if (!lll->empty) {
   1c39e:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1c3a2:	f013 0504 	ands.w	r5, r3, #4
   1c3a6:	f040 808a 	bne.w	1c4be <lll_conn_isr_rx+0x1ba>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1c3aa:	aa01      	add	r2, sp, #4
   1c3ac:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   1c3b0:	f00c f9d7 	bl	28762 <memq_peek>
			}

			link = NULL;
		}

		if (link) {
   1c3b4:	4681      	mov	r9, r0
   1c3b6:	2800      	cmp	r0, #0
   1c3b8:	f040 808a 	bne.w	1c4d0 <lll_conn_isr_rx+0x1cc>
			}
		}
	}

	/* process received data */
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c3bc:	7f32      	ldrb	r2, [r6, #28]
   1c3be:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1c3c2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1c3c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1c3ca:	429a      	cmp	r2, r3
   1c3cc:	f000 809f 	beq.w	1c50e <lll_conn_isr_rx+0x20a>
	is_rx_enqueue = 0U;
   1c3d0:	f04f 0a00 	mov.w	sl, #0
		crc_valid = 1U;
   1c3d4:	4b6b      	ldr	r3, [pc, #428]	; (1c584 <lll_conn_isr_rx+0x280>)
		crc_expire = 0U;
   1c3d6:	2500      	movs	r5, #0
		crc_valid = 1U;
   1c3d8:	2201      	movs	r2, #1
		crc_expire = 0U;
   1c3da:	f888 5000 	strb.w	r5, [r8]
		crc_valid = 1U;
   1c3de:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c3e0:	a901      	add	r1, sp, #4
   1c3e2:	4620      	mov	r0, r4
   1c3e4:	f00d f8fe 	bl	295e4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c3e8:	2d00      	cmp	r5, #0
   1c3ea:	f040 80b7 	bne.w	1c55c <lll_conn_isr_rx+0x258>
   1c3ee:	b157      	cbz	r7, 1c406 <lll_conn_isr_rx+0x102>
   1c3f0:	7f33      	ldrb	r3, [r6, #28]
   1c3f2:	06d9      	lsls	r1, r3, #27
   1c3f4:	d407      	bmi.n	1c406 <lll_conn_isr_rx+0x102>
			      (pdu_data_tx->md == 0) &&
   1c3f6:	9b01      	ldr	r3, [sp, #4]
   1c3f8:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c3fa:	06d2      	lsls	r2, r2, #27
   1c3fc:	d403      	bmi.n	1c406 <lll_conn_isr_rx+0x102>
			      (pdu_data_tx->md == 0) &&
   1c3fe:	785b      	ldrb	r3, [r3, #1]
   1c400:	2b00      	cmp	r3, #0
   1c402:	f000 80ab 	beq.w	1c55c <lll_conn_isr_rx+0x258>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c406:	2096      	movs	r0, #150	; 0x96
   1c408:	f000 fc90 	bl	1cd2c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1c40c:	2000      	movs	r0, #0
   1c40e:	f000 fbf9 	bl	1cc04 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1c412:	4621      	mov	r1, r4
   1c414:	485c      	ldr	r0, [pc, #368]	; (1c588 <lll_conn_isr_rx+0x284>)
   1c416:	f000 facd 	bl	1c9b4 <radio_isr_set>
		radio_tmr_end_capture();
   1c41a:	f000 fd73 	bl	1cf04 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1c41e:	9901      	ldr	r1, [sp, #4]
   1c420:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   1c424:	780b      	ldrb	r3, [r1, #0]
   1c426:	f3c2 0200 	ubfx	r2, r2, #0, #1
   1c42a:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   1c42e:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
   1c432:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1c436:	f362 0382 	bfi	r3, r2, #2, #1
   1c43a:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1c43c:	4620      	mov	r0, r4
   1c43e:	f00d f8c1 	bl	295c4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c442:	f000 fba3 	bl	1cb8c <radio_is_ready>
   1c446:	b158      	cbz	r0, 1c460 <lll_conn_isr_rx+0x15c>
   1c448:	f44f 729e 	mov.w	r2, #316	; 0x13c
   1c44c:	494b      	ldr	r1, [pc, #300]	; (1c57c <lll_conn_isr_rx+0x278>)
   1c44e:	484c      	ldr	r0, [pc, #304]	; (1c580 <lll_conn_isr_rx+0x27c>)
   1c450:	f007 fef4 	bl	2423c <printk>
   1c454:	4040      	eors	r0, r0
   1c456:	f380 8811 	msr	BASEPRI, r0
   1c45a:	f04f 0003 	mov.w	r0, #3
   1c45e:	df02      	svc	2
	if (!radio_tmr_aa_restore()) {
   1c460:	f000 fd44 	bl	1ceec <radio_tmr_aa_restore>
   1c464:	b918      	cbnz	r0, 1c46e <lll_conn_isr_rx+0x16a>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1c466:	f000 fd35 	bl	1ced4 <radio_tmr_aa_get>
   1c46a:	f000 fd39 	bl	1cee0 <radio_tmr_aa_save>
	if (tx_release) {
   1c46e:	f1b9 0f00 	cmp.w	r9, #0
   1c472:	d07a      	beq.n	1c56a <lll_conn_isr_rx+0x266>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c474:	8a22      	ldrh	r2, [r4, #16]
   1c476:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c47a:	429a      	cmp	r2, r3
   1c47c:	d10b      	bne.n	1c496 <lll_conn_isr_rx+0x192>
   1c47e:	f240 124b 	movw	r2, #331	; 0x14b
   1c482:	493e      	ldr	r1, [pc, #248]	; (1c57c <lll_conn_isr_rx+0x278>)
   1c484:	483e      	ldr	r0, [pc, #248]	; (1c580 <lll_conn_isr_rx+0x27c>)
   1c486:	f007 fed9 	bl	2423c <printk>
   1c48a:	4040      	eors	r0, r0
   1c48c:	f380 8811 	msr	BASEPRI, r0
   1c490:	f04f 0003 	mov.w	r0, #3
   1c494:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c496:	4649      	mov	r1, r9
   1c498:	8a20      	ldrh	r0, [r4, #16]
   1c49a:	f7fe fa8d 	bl	1a9b8 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1c49e:	f1ba 0f00 	cmp.w	sl, #0
   1c4a2:	d009      	beq.n	1c4b8 <lll_conn_isr_rx+0x1b4>
		ull_pdu_rx_alloc();
   1c4a4:	f7fc fbca 	bl	18c3c <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1c4a8:	2303      	movs	r3, #3
   1c4aa:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1c4ac:	8a23      	ldrh	r3, [r4, #16]
   1c4ae:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c4b0:	4631      	mov	r1, r6
   1c4b2:	6830      	ldr	r0, [r6, #0]
   1c4b4:	f7fc fbd8 	bl	18c68 <ull_rx_put>
		ull_rx_sched();
   1c4b8:	f7fc fbe6 	bl	18c88 <ull_rx_sched>
	ARG_UNUSED(rssi_ready);
   1c4bc:	e737      	b.n	1c32e <lll_conn_isr_rx+0x2a>
			lll->empty = 0;
   1c4be:	f36f 0382 	bfc	r3, #2, #1
   1c4c2:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1c4c6:	f000 fb95 	bl	1cbf4 <radio_pkt_empty_get>
	tx_release = NULL;
   1c4ca:	f04f 0900 	mov.w	r9, #0
   1c4ce:	e775      	b.n	1c3bc <lll_conn_isr_rx+0xb8>
					       lll->packet_tx_head_offset);
   1c4d0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
			pdu_data_tx_len = pdu_data_tx->len;
   1c4d4:	9a01      	ldr	r2, [sp, #4]
   1c4d6:	441a      	add	r2, r3
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1c4d8:	7952      	ldrb	r2, [r2, #5]
   1c4da:	4413      	add	r3, r2
			if (offset < lll->packet_tx_head_len) {
   1c4dc:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1c4e0:	b2db      	uxtb	r3, r3
			if (offset < lll->packet_tx_head_len) {
   1c4e2:	4293      	cmp	r3, r2
   1c4e4:	d202      	bcs.n	1c4ec <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   1c4e6:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
   1c4ea:	e7ee      	b.n	1c4ca <lll_conn_isr_rx+0x1c6>
			} else if (offset == lll->packet_tx_head_len) {
   1c4ec:	d1ed      	bne.n	1c4ca <lll_conn_isr_rx+0x1c6>
				memq_dequeue(lll->memq_tx.tail,
   1c4ee:	462a      	mov	r2, r5
				lll->packet_tx_head_len = 0;
   1c4f0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
				memq_dequeue(lll->memq_tx.tail,
   1c4f4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1c4f8:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1c4fa:	f00c f93a 	bl	28772 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1c4fe:	9b01      	ldr	r3, [sp, #4]
   1c500:	681a      	ldr	r2, [r3, #0]
   1c502:	f8c9 2000 	str.w	r2, [r9]
				tx->next = link;
   1c506:	f8c3 9000 	str.w	r9, [r3]
   1c50a:	4699      	mov	r9, r3
   1c50c:	e756      	b.n	1c3bc <lll_conn_isr_rx+0xb8>
	    /* check so that we will NEVER use the rx buffer reserved for empty
	     * packet and internal control enqueue
	     */
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1c50e:	2003      	movs	r0, #3
   1c510:	f7fc fb7c 	bl	18c0c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c514:	2800      	cmp	r0, #0
   1c516:	f43f af5b 	beq.w	1c3d0 <lll_conn_isr_rx+0xcc>
		/* Increment next expected serial number */
		lll->nesn++;
   1c51a:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1c51e:	f083 0302 	eor.w	r3, r3, #2
   1c522:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

		if (pdu_data_rx->len != 0) {
   1c526:	f896 a01d 	ldrb.w	sl, [r6, #29]
	is_rx_enqueue = 0U;
   1c52a:	f11a 0a00 	adds.w	sl, sl, #0
   1c52e:	bf18      	it	ne
   1c530:	f04f 0a01 	movne.w	sl, #1
   1c534:	e74e      	b.n	1c3d4 <lll_conn_isr_rx+0xd0>
		if (crc_expire == 0U) {
   1c536:	f898 3000 	ldrb.w	r3, [r8]
   1c53a:	b913      	cbnz	r3, 1c542 <lll_conn_isr_rx+0x23e>
			crc_expire = 2U;
   1c53c:	2302      	movs	r3, #2
   1c53e:	f888 3000 	strb.w	r3, [r8]
		crc_expire--;
   1c542:	f898 5000 	ldrb.w	r5, [r8]
   1c546:	3d01      	subs	r5, #1
   1c548:	b2ed      	uxtb	r5, r5
   1c54a:	f888 5000 	strb.w	r5, [r8]
	is_rx_enqueue = 0U;
   1c54e:	f04f 0a00 	mov.w	sl, #0
		is_done = (crc_expire == 0U);
   1c552:	fab5 f585 	clz	r5, r5
   1c556:	096d      	lsrs	r5, r5, #5
	tx_release = NULL;
   1c558:	46d1      	mov	r9, sl
   1c55a:	e741      	b.n	1c3e0 <lll_conn_isr_rx+0xdc>
		radio_isr_set(isr_done, param);
   1c55c:	4621      	mov	r1, r4
   1c55e:	4805      	ldr	r0, [pc, #20]	; (1c574 <lll_conn_isr_rx+0x270>)
   1c560:	f000 fa28 	bl	1c9b4 <radio_isr_set>
			radio_switch_complete_and_disable();
   1c564:	f000 fb64 	bl	1cc30 <radio_switch_complete_and_disable>
   1c568:	e759      	b.n	1c41e <lll_conn_isr_rx+0x11a>
	if (is_rx_enqueue) {
   1c56a:	f1ba 0f00 	cmp.w	sl, #0
   1c56e:	f43f aede 	beq.w	1c32e <lll_conn_isr_rx+0x2a>
   1c572:	e797      	b.n	1c4a4 <lll_conn_isr_rx+0x1a0>
   1c574:	0001c165 	.word	0x0001c165
   1c578:	20003530 	.word	0x20003530
   1c57c:	0003100d 	.word	0x0003100d
   1c580:	0002bced 	.word	0x0002bced
   1c584:	200036ee 	.word	0x200036ee
   1c588:	0001c28d 	.word	0x0001c28d
   1c58c:	200036ed 	.word	0x200036ed

0001c590 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1c590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1c594:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1c596:	8a22      	ldrh	r2, [r4, #16]
   1c598:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c59c:	429a      	cmp	r2, r3
{
   1c59e:	4681      	mov	r9, r0
	if (unlikely(lll->handle == 0xFFFF)) {
   1c5a0:	d115      	bne.n	1c5ce <prepare_cb+0x3e>
		int err;

		err = lll_hfclock_off();
   1c5a2:	f7fe ff45 	bl	1b430 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1c5a6:	2800      	cmp	r0, #0
   1c5a8:	da0a      	bge.n	1c5c0 <prepare_cb+0x30>
   1c5aa:	227d      	movs	r2, #125	; 0x7d
   1c5ac:	495b      	ldr	r1, [pc, #364]	; (1c71c <prepare_cb+0x18c>)
   1c5ae:	485c      	ldr	r0, [pc, #368]	; (1c720 <prepare_cb+0x190>)
   1c5b0:	f007 fe44 	bl	2423c <printk>
   1c5b4:	4040      	eors	r0, r0
   1c5b6:	f380 8811 	msr	BASEPRI, r0
   1c5ba:	f04f 0003 	mov.w	r0, #3
   1c5be:	df02      	svc	2

		lll_done(NULL);
   1c5c0:	2000      	movs	r0, #0
   1c5c2:	f7fe fe29 	bl	1b218 <lll_done>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1c5c6:	2000      	movs	r0, #0
   1c5c8:	b003      	add	sp, #12
   1c5ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	lll_conn_prepare_reset();
   1c5ce:	f7ff fe05 	bl	1c1dc <lll_conn_prepare_reset>
	lll->latency_event = lll->latency_prepare - 1;
   1c5d2:	8ae3      	ldrh	r3, [r4, #22]
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1c5d4:	8b61      	ldrh	r1, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1c5d6:	1e5a      	subs	r2, r3, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1c5d8:	440b      	add	r3, r1
   1c5da:	8363      	strh	r3, [r4, #26]
	if (lll->data_chan_sel) {
   1c5dc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1c5e0:	b292      	uxth	r2, r2
	lll->latency_prepare = 0;
   1c5e2:	2600      	movs	r6, #0
	if (lll->data_chan_sel) {
   1c5e4:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1c5e6:	8322      	strh	r2, [r4, #24]
	lll->latency_prepare = 0;
   1c5e8:	82e6      	strh	r6, [r4, #22]
	if (lll->data_chan_sel) {
   1c5ea:	d577      	bpl.n	1c6dc <prepare_cb+0x14c>
		LL_ASSERT(0);
   1c5ec:	229b      	movs	r2, #155	; 0x9b
   1c5ee:	494b      	ldr	r1, [pc, #300]	; (1c71c <prepare_cb+0x18c>)
   1c5f0:	484b      	ldr	r0, [pc, #300]	; (1c720 <prepare_cb+0x190>)
   1c5f2:	f007 fe23 	bl	2423c <printk>
   1c5f6:	4040      	eors	r0, r0
   1c5f8:	f380 8811 	msr	BASEPRI, r0
   1c5fc:	f04f 0003 	mov.w	r0, #3
   1c600:	df02      	svc	2
	lll->slave.window_widening_event_us +=
   1c602:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1c606:	4413      	add	r3, r2
	    lll->slave.window_widening_max_us) {
   1c608:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
   1c60a:	429a      	cmp	r2, r3
   1c60c:	bf94      	ite	ls
   1c60e:	6362      	strls	r2, [r4, #52]	; 0x34
   1c610:	6363      	strhi	r3, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1c612:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1c616:	2500      	movs	r5, #0
	lll->slave.window_size_event_us +=
   1c618:	4413      	add	r3, r2
	lll->slave.window_size_prepare_us = 0;
   1c61a:	e9c4 530e 	strd	r5, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1c61e:	6325      	str	r5, [r4, #48]	; 0x30
	radio_reset();
   1c620:	f000 f9e8 	bl	1c9f4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c624:	4628      	mov	r0, r5
   1c626:	f000 fa19 	bl	1ca5c <radio_tx_power_set>
	lll_conn_rx_pkt_set(lll);
   1c62a:	4620      	mov	r0, r4
   1c62c:	f7ff fe08 	bl	1c240 <lll_conn_rx_pkt_set>
	radio_aa_set(lll->access_addr);
   1c630:	f104 0008 	add.w	r0, r4, #8
   1c634:	f000 fa30 	bl	1ca98 <radio_aa_set>
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c638:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c63a:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c63c:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c63e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1c642:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c644:	f240 605b 	movw	r0, #1627	; 0x65b
   1c648:	4319      	orrs	r1, r3
   1c64a:	f000 fabd 	bl	1cbc8 <radio_crc_configure>
	lll_chan_set(data_chan_use);
   1c64e:	4630      	mov	r0, r6
   1c650:	f7fe fe2c 	bl	1b2ac <lll_chan_set>
	radio_isr_set(lll_conn_isr_rx, lll);
   1c654:	4621      	mov	r1, r4
   1c656:	4833      	ldr	r0, [pc, #204]	; (1c724 <prepare_cb+0x194>)
   1c658:	f000 f9ac 	bl	1c9b4 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1c65c:	2096      	movs	r0, #150	; 0x96
   1c65e:	f000 fb65 	bl	1cd2c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1c662:	462b      	mov	r3, r5
   1c664:	462a      	mov	r2, r5
   1c666:	4629      	mov	r1, r5
   1c668:	4628      	mov	r0, r5
   1c66a:	f000 fad7 	bl	1cc1c <radio_switch_complete_and_tx>
	evt = HDR_LLL2EVT(lll);
   1c66e:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1c672:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_at_event += lll_evt_offset_get(evt);
   1c676:	4640      	mov	r0, r8
   1c678:	f00c fe09 	bl	2928e <lll_evt_offset_get>
   1c67c:	4407      	add	r7, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1c67e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1c682:	f107 0109 	add.w	r1, r7, #9
   1c686:	4628      	mov	r0, r5
   1c688:	f000 fb5c 	bl	1cd44 <radio_tmr_start>
   1c68c:	4681      	mov	r9, r0
	radio_tmr_aa_capture();
   1c68e:	f000 fc0d 	bl	1ceac <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1c692:	4628      	mov	r0, r5
   1c694:	f000 fc24 	bl	1cee0 <radio_tmr_aa_save>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1c698:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1c69a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	hcto += radio_rx_ready_delay_get(0, 0);
   1c69c:	4629      	mov	r1, r5
   1c69e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   1c6a2:	4628      	mov	r0, r5
   1c6a4:	f103 0688 	add.w	r6, r3, #136	; 0x88
   1c6a8:	f00d f851 	bl	2974e <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
   1c6ac:	444e      	add	r6, r9
	hcto += radio_rx_chain_delay_get(0, 0);
   1c6ae:	4629      	mov	r1, r5
	hcto += addr_us_get(0);
   1c6b0:	4406      	add	r6, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1c6b2:	4628      	mov	r0, r5
   1c6b4:	f00d f84d 	bl	29752 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1c6b8:	4430      	add	r0, r6
   1c6ba:	f000 fbeb 	bl	1ce94 <radio_tmr_hcto_configure>
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1c6be:	7c21      	ldrb	r1, [r4, #16]
   1c6c0:	3105      	adds	r1, #5
   1c6c2:	463a      	mov	r2, r7
   1c6c4:	b2c9      	uxtb	r1, r1
   1c6c6:	4640      	mov	r0, r8
   1c6c8:	f00c fdef 	bl	292aa <lll_preempt_calc>
   1c6cc:	b198      	cbz	r0, 1c6f6 <prepare_cb+0x166>
		radio_isr_set(lll_isr_abort, lll);
   1c6ce:	4621      	mov	r1, r4
   1c6d0:	4815      	ldr	r0, [pc, #84]	; (1c728 <prepare_cb+0x198>)
   1c6d2:	f000 f96f 	bl	1c9b4 <radio_isr_set>
		radio_disable();
   1c6d6:	f000 fa3b 	bl	1cb50 <radio_disable>
   1c6da:	e774      	b.n	1c5c6 <prepare_cb+0x36>
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1c6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c6e0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1c6e4:	9300      	str	r3, [sp, #0]
   1c6e6:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1c6ea:	f104 031c 	add.w	r3, r4, #28
   1c6ee:	f00c fd70 	bl	291d2 <lll_chan_sel_1>
   1c6f2:	4606      	mov	r6, r0
   1c6f4:	e785      	b.n	1c602 <prepare_cb+0x72>
		ret = lll_prepare_done(lll);
   1c6f6:	4620      	mov	r0, r4
   1c6f8:	f00c fdc4 	bl	29284 <lll_prepare_done>
		LL_ASSERT(!ret);
   1c6fc:	2800      	cmp	r0, #0
   1c6fe:	f43f af62 	beq.w	1c5c6 <prepare_cb+0x36>
   1c702:	f240 1213 	movw	r2, #275	; 0x113
   1c706:	4905      	ldr	r1, [pc, #20]	; (1c71c <prepare_cb+0x18c>)
   1c708:	4805      	ldr	r0, [pc, #20]	; (1c720 <prepare_cb+0x190>)
   1c70a:	f007 fd97 	bl	2423c <printk>
   1c70e:	4040      	eors	r0, r0
   1c710:	f380 8811 	msr	BASEPRI, r0
   1c714:	f04f 0003 	mov.w	r0, #3
   1c718:	df02      	svc	2
   1c71a:	e754      	b.n	1c5c6 <prepare_cb+0x36>
   1c71c:	00031069 	.word	0x00031069
   1c720:	0002bced 	.word	0x0002bced
   1c724:	0001c305 	.word	0x0001c305
   1c728:	0002930f 	.word	0x0002930f

0001c72c <lll_slave_prepare>:
{
   1c72c:	b513      	push	{r0, r1, r4, lr}
   1c72e:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c730:	f7fe fe68 	bl	1b404 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1c734:	2800      	cmp	r0, #0
   1c736:	da0a      	bge.n	1c74e <lll_slave_prepare+0x22>
   1c738:	2248      	movs	r2, #72	; 0x48
   1c73a:	4918      	ldr	r1, [pc, #96]	; (1c79c <lll_slave_prepare+0x70>)
   1c73c:	4818      	ldr	r0, [pc, #96]	; (1c7a0 <lll_slave_prepare+0x74>)
   1c73e:	f007 fd7d 	bl	2423c <printk>
   1c742:	4040      	eors	r0, r0
   1c744:	f380 8811 	msr	BASEPRI, r0
   1c748:	f04f 0003 	mov.w	r0, #3
   1c74c:	df02      	svc	2
	lll = p->param;
   1c74e:	68e2      	ldr	r2, [r4, #12]
	elapsed = p->lazy + 1;
   1c750:	8923      	ldrh	r3, [r4, #8]
	lll->latency_prepare += elapsed;
   1c752:	8ad1      	ldrh	r1, [r2, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1c754:	6a90      	ldr	r0, [r2, #40]	; 0x28
	elapsed = p->lazy + 1;
   1c756:	3301      	adds	r3, #1
   1c758:	b29b      	uxth	r3, r3
	lll->latency_prepare += elapsed;
   1c75a:	4419      	add	r1, r3
   1c75c:	82d1      	strh	r1, [r2, #22]
	lll->slave.window_widening_prepare_us +=
   1c75e:	6b11      	ldr	r1, [r2, #48]	; 0x30
   1c760:	fb00 1303 	mla	r3, r0, r3, r1
	    lll->slave.window_widening_max_us) {
   1c764:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1c766:	4299      	cmp	r1, r3
   1c768:	bf94      	ite	ls
   1c76a:	6311      	strls	r1, [r2, #48]	; 0x30
   1c76c:	6313      	strhi	r3, [r2, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c76e:	480d      	ldr	r0, [pc, #52]	; (1c7a4 <lll_slave_prepare+0x78>)
   1c770:	9400      	str	r4, [sp, #0]
   1c772:	2300      	movs	r3, #0
   1c774:	4a0c      	ldr	r2, [pc, #48]	; (1c7a8 <lll_slave_prepare+0x7c>)
   1c776:	490d      	ldr	r1, [pc, #52]	; (1c7ac <lll_slave_prepare+0x80>)
   1c778:	f00c fd7b 	bl	29272 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c77c:	b160      	cbz	r0, 1c798 <lll_slave_prepare+0x6c>
   1c77e:	3044      	adds	r0, #68	; 0x44
   1c780:	d00a      	beq.n	1c798 <lll_slave_prepare+0x6c>
   1c782:	225f      	movs	r2, #95	; 0x5f
   1c784:	4905      	ldr	r1, [pc, #20]	; (1c79c <lll_slave_prepare+0x70>)
   1c786:	4806      	ldr	r0, [pc, #24]	; (1c7a0 <lll_slave_prepare+0x74>)
   1c788:	f007 fd58 	bl	2423c <printk>
   1c78c:	4040      	eors	r0, r0
   1c78e:	f380 8811 	msr	BASEPRI, r0
   1c792:	f04f 0003 	mov.w	r0, #3
   1c796:	df02      	svc	2
}
   1c798:	b002      	add	sp, #8
   1c79a:	bd10      	pop	{r4, pc}
   1c79c:	00031069 	.word	0x00031069
   1c7a0:	0002bced 	.word	0x0002bced
   1c7a4:	00029289 	.word	0x00029289
   1c7a8:	0001c591 	.word	0x0001c591
   1c7ac:	0001c1f9 	.word	0x0001c1f9

0001c7b0 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1c7b0:	4b05      	ldr	r3, [pc, #20]	; (1c7c8 <cntr_init+0x18>)
   1c7b2:	2200      	movs	r2, #0
   1c7b4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->EVTENSET = mask;
   1c7b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c7bc:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1c7c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1c7c4:	4770      	bx	lr
   1c7c6:	bf00      	nop
   1c7c8:	4000b000 	.word	0x4000b000

0001c7cc <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1c7cc:	4a04      	ldr	r2, [pc, #16]	; (1c7e0 <cntr_start+0x14>)
   1c7ce:	7813      	ldrb	r3, [r2, #0]
   1c7d0:	1c59      	adds	r1, r3, #1
   1c7d2:	7011      	strb	r1, [r2, #0]
   1c7d4:	2001      	movs	r0, #1
   1c7d6:	b913      	cbnz	r3, 1c7de <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c7d8:	4a02      	ldr	r2, [pc, #8]	; (1c7e4 <cntr_start+0x18>)
   1c7da:	6010      	str	r0, [r2, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1c7dc:	4618      	mov	r0, r3
}
   1c7de:	4770      	bx	lr
   1c7e0:	200036ef 	.word	0x200036ef
   1c7e4:	4000b000 	.word	0x4000b000

0001c7e8 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1c7e8:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1c7ea:	4c0c      	ldr	r4, [pc, #48]	; (1c81c <cntr_stop+0x34>)
   1c7ec:	7823      	ldrb	r3, [r4, #0]
   1c7ee:	b953      	cbnz	r3, 1c806 <cntr_stop+0x1e>
   1c7f0:	222d      	movs	r2, #45	; 0x2d
   1c7f2:	490b      	ldr	r1, [pc, #44]	; (1c820 <cntr_stop+0x38>)
   1c7f4:	480b      	ldr	r0, [pc, #44]	; (1c824 <cntr_stop+0x3c>)
   1c7f6:	f007 fd21 	bl	2423c <printk>
   1c7fa:	4040      	eors	r0, r0
   1c7fc:	f380 8811 	msr	BASEPRI, r0
   1c800:	f04f 0003 	mov.w	r0, #3
   1c804:	df02      	svc	2

	if (--_refcount) {
   1c806:	7820      	ldrb	r0, [r4, #0]
   1c808:	3801      	subs	r0, #1
   1c80a:	b2c0      	uxtb	r0, r0
   1c80c:	7020      	strb	r0, [r4, #0]
   1c80e:	2301      	movs	r3, #1
   1c810:	b910      	cbnz	r0, 1c818 <cntr_stop+0x30>
   1c812:	4a05      	ldr	r2, [pc, #20]	; (1c828 <cntr_stop+0x40>)
   1c814:	6013      	str	r3, [r2, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1c816:	bd10      	pop	{r4, pc}
		return 1;
   1c818:	4618      	mov	r0, r3
   1c81a:	e7fc      	b.n	1c816 <cntr_stop+0x2e>
   1c81c:	200036ef 	.word	0x200036ef
   1c820:	000310c7 	.word	0x000310c7
   1c824:	0002bced 	.word	0x0002bced
   1c828:	4000b004 	.word	0x4000b004

0001c82c <cntr_cnt_get>:
     return p_reg->COUNTER;
   1c82c:	4b01      	ldr	r3, [pc, #4]	; (1c834 <cntr_cnt_get+0x8>)
   1c82e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1c832:	4770      	bx	lr
   1c834:	4000b000 	.word	0x4000b000

0001c838 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1c838:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c83c:	4b01      	ldr	r3, [pc, #4]	; (1c844 <cntr_cmp_set+0xc>)
   1c83e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1c842:	4770      	bx	lr
   1c844:	4000b000 	.word	0x4000b000

0001c848 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1c848:	b5f0      	push	{r4, r5, r6, r7, lr}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c84a:	4b13      	ldr	r3, [pc, #76]	; (1c898 <do_ecb+0x50>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c84c:	4c13      	ldr	r4, [pc, #76]	; (1c89c <do_ecb+0x54>)
   1c84e:	2501      	movs	r5, #1
{
   1c850:	4684      	mov	ip, r0
   1c852:	462e      	mov	r6, r5
		NRF_ECB->EVENTS_ENDECB = 0;
   1c854:	2700      	movs	r7, #0
   1c856:	46a6      	mov	lr, r4
   1c858:	461a      	mov	r2, r3
   1c85a:	6026      	str	r6, [r4, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c85c:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1c860:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1c864:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
   1c868:	601e      	str	r6, [r3, #0]
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c86a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
   1c86e:	b931      	cbnz	r1, 1c87e <do_ecb+0x36>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c870:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c874:	b919      	cbnz	r1, 1c87e <do_ecb+0x36>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1c876:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c87a:	2900      	cmp	r1, #0
   1c87c:	d1f5      	bne.n	1c86a <do_ecb+0x22>
   1c87e:	f8ce 5000 	str.w	r5, [lr]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1c882:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
   1c886:	2900      	cmp	r1, #0
   1c888:	d1e7      	bne.n	1c85a <do_ecb+0x12>
   1c88a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
   1c88e:	2800      	cmp	r0, #0
   1c890:	d0e3      	beq.n	1c85a <do_ecb+0x12>

	NRF_ECB->ECBDATAPTR = 0;
   1c892:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1c896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c898:	4000e000 	.word	0x4000e000
   1c89c:	4000e004 	.word	0x4000e004

0001c8a0 <hal_radio_enable_on_tick_ppi_config_and_enable>:
static inline void hal_radio_enable_on_tick_ppi_config_and_enable(uint8_t trx)
{
	/* No need to configure anything for the pre-programmed channels.
	 * Just enable and disable them accordingly.
	 */
	nrf_ppi_channels_disable(
   1c8a0:	2800      	cmp	r0, #0
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1c8a2:	4b08      	ldr	r3, [pc, #32]	; (1c8c4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1c8a4:	bf14      	ite	ne
   1c8a6:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
   1c8aa:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
   1c8ae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI));
	nrf_ppi_channels_enable(
   1c8b2:	bf14      	ite	ne
   1c8b4:	f44f 1280 	movne.w	r2, #1048576	; 0x100000
   1c8b8:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1c8bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_PPI,
		trx ? BIT(HAL_RADIO_ENABLE_TX_ON_TICK_PPI)
		    : BIT(HAL_RADIO_ENABLE_RX_ON_TICK_PPI));
}
   1c8c0:	4770      	bx	lr
   1c8c2:	bf00      	nop
   1c8c4:	4001f000 	.word	0x4001f000

0001c8c8 <sw_switch.isra.10>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c8ca:	4e2d      	ldr	r6, [pc, #180]	; (1c980 <sw_switch.isra.10+0xb8>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c8cc:	4f2d      	ldr	r7, [pc, #180]	; (1c984 <sw_switch.isra.10+0xbc>)
   1c8ce:	7835      	ldrb	r5, [r6, #0]
   1c8d0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 1c990 <sw_switch.isra.10+0xc8>
   1c8d4:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
	 */
	nrf_ppi_channel_endpoint_setup(
		NRF_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT,
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c8d8:	b22b      	sxth	r3, r5
   1c8da:	00dc      	lsls	r4, r3, #3
   1c8dc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1c8e0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c8e4:	f8c7 456c 	str.w	r4, [r7, #1388]	; 0x56c
   1c8e8:	f105 040c 	add.w	r4, r5, #12
   1c8ec:	b2e4      	uxtb	r4, r4
   1c8ee:	00e4      	lsls	r4, r4, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c8f0:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
   1c8f4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   1c8f8:	3fc0      	subs	r7, #192	; 0xc0
   1c8fa:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   1c8fe:	eb07 0783 	add.w	r7, r7, r3, lsl #2

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c902:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1c906:	2800      	cmp	r0, #0
   1c908:	d034      	beq.n	1c974 <sw_switch.isra.10+0xac>
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   1c90a:	f649 4740 	movw	r7, #40000	; 0x9c40
   1c90e:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1c912:	2a02      	cmp	r2, #2
   1c914:	bf08      	it	eq
   1c916:	4638      	moveq	r0, r7
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1c918:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1c91c:	f241 3788 	movw	r7, #5000	; 0x1388
   1c920:	2902      	cmp	r1, #2
   1c922:	bf14      	ite	ne
   1c924:	4611      	movne	r1, r2
   1c926:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   1c928:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
   1c92c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c930:	4401      	add	r1, r0
   1c932:	fbb1 f1f2 	udiv	r1, r1, r2

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c936:	4a14      	ldr	r2, [pc, #80]	; (1c988 <sw_switch.isra.10+0xc0>)
   1c938:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1c93c:	009b      	lsls	r3, r3, #2
   1c93e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c942:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1c946:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1c94a:	428a      	cmp	r2, r1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1c94c:	bf8b      	itete	hi
   1c94e:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1c952:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1c954:	1a51      	subhi	r1, r2, r1
   1c956:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
   1c95a:	bf88      	it	hi
   1c95c:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1c960:	4b08      	ldr	r3, [pc, #32]	; (1c984 <sw_switch.isra.10+0xbc>)
   1c962:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1c966:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1c96a:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
   1c96c:	f003 0301 	and.w	r3, r3, #1
   1c970:	7033      	strb	r3, [r6, #0]
}
   1c972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c974:	4a05      	ldr	r2, [pc, #20]	; (1c98c <sw_switch.isra.10+0xc4>)
   1c976:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1c97a:	2128      	movs	r1, #40	; 0x28
   1c97c:	e7de      	b.n	1c93c <sw_switch.isra.10+0x74>
   1c97e:	bf00      	nop
   1c980:	200036f0 	.word	0x200036f0
   1c984:	4001f000 	.word	0x4001f000
   1c988:	40001000 	.word	0x40001000
   1c98c:	40001004 	.word	0x40001004
   1c990:	4000110c 	.word	0x4000110c

0001c994 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1c994:	4b04      	ldr	r3, [pc, #16]	; (1c9a8 <isr_radio+0x14>)
   1c996:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1c99a:	b123      	cbz	r3, 1c9a6 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1c99c:	4b03      	ldr	r3, [pc, #12]	; (1c9ac <isr_radio+0x18>)
   1c99e:	4a04      	ldr	r2, [pc, #16]	; (1c9b0 <isr_radio+0x1c>)
   1c9a0:	681b      	ldr	r3, [r3, #0]
   1c9a2:	6810      	ldr	r0, [r2, #0]
   1c9a4:	4718      	bx	r3
}
   1c9a6:	4770      	bx	lr
   1c9a8:	40001000 	.word	0x40001000
   1c9ac:	200032d4 	.word	0x200032d4
   1c9b0:	200032d8 	.word	0x200032d8

0001c9b4 <radio_isr_set>:
{
   1c9b4:	b538      	push	{r3, r4, r5, lr}
   1c9b6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1c9b8:	2001      	movs	r0, #1
{
   1c9ba:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1c9bc:	f7e9 fd6a 	bl	6494 <arch_irq_disable>
	isr_cb_param = param;
   1c9c0:	4b08      	ldr	r3, [pc, #32]	; (1c9e4 <radio_isr_set+0x30>)
   1c9c2:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
   1c9c4:	4b08      	ldr	r3, [pc, #32]	; (1c9e8 <radio_isr_set+0x34>)
   1c9c6:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c9c8:	4b08      	ldr	r3, [pc, #32]	; (1c9ec <radio_isr_set+0x38>)
   1c9ca:	2210      	movs	r2, #16
   1c9cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c9d0:	4b07      	ldr	r3, [pc, #28]	; (1c9f0 <radio_isr_set+0x3c>)
   1c9d2:	2202      	movs	r2, #2
   1c9d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1c9d8:	2001      	movs	r0, #1
}
   1c9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1c9de:	f7e9 bd49 	b.w	6474 <arch_irq_enable>
   1c9e2:	bf00      	nop
   1c9e4:	200032d8 	.word	0x200032d8
   1c9e8:	200032d4 	.word	0x200032d4
   1c9ec:	40001000 	.word	0x40001000
   1c9f0:	e000e100 	.word	0xe000e100

0001c9f4 <radio_reset>:
{
   1c9f4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   1c9f6:	2001      	movs	r0, #1
   1c9f8:	f7e9 fd4c 	bl	6494 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1c9fc:	4b0c      	ldr	r3, [pc, #48]	; (1ca30 <radio_reset+0x3c>)
   1c9fe:	2200      	movs	r2, #0
   1ca00:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
   1ca04:	2201      	movs	r2, #1
   1ca06:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1ca0a:	4a0a      	ldr	r2, [pc, #40]	; (1ca34 <radio_reset+0x40>)
   1ca0c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1ca0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1ca12:	f023 0301 	bic.w	r3, r3, #1
   1ca16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1ca1a:	6013      	str	r3, [r2, #0]
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1ca1c:	4b06      	ldr	r3, [pc, #24]	; (1ca38 <radio_reset+0x44>)
   1ca1e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
   1ca22:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1ca26:	f44f 5210 	mov.w	r2, #9216	; 0x2400
   1ca2a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
   1ca2e:	bd08      	pop	{r3, pc}
   1ca30:	40001000 	.word	0x40001000
   1ca34:	40001774 	.word	0x40001774
   1ca38:	4001f000 	.word	0x4001f000

0001ca3c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1ca3c:	4b06      	ldr	r3, [pc, #24]	; (1ca58 <radio_phy_set+0x1c>)
	switch (phy) {
   1ca3e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1ca40:	bf14      	ite	ne
   1ca42:	2203      	movne	r2, #3
   1ca44:	2204      	moveq	r2, #4
   1ca46:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1ca4a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1ca4e:	f042 0201 	orr.w	r2, r2, #1
   1ca52:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1ca56:	4770      	bx	lr
   1ca58:	40001000 	.word	0x40001000

0001ca5c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1ca5c:	4b01      	ldr	r3, [pc, #4]	; (1ca64 <radio_tx_power_set+0x8>)
   1ca5e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1ca62:	4770      	bx	lr
   1ca64:	40001000 	.word	0x40001000

0001ca68 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1ca68:	4b01      	ldr	r3, [pc, #4]	; (1ca70 <radio_freq_chan_set+0x8>)
   1ca6a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1ca6e:	4770      	bx	lr
   1ca70:	40001000 	.word	0x40001000

0001ca74 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1ca74:	4b07      	ldr	r3, [pc, #28]	; (1ca94 <radio_whiten_iv_set+0x20>)
   1ca76:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1ca7a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ca7e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1ca82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1ca86:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ca8a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1ca8e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1ca92:	4770      	bx	lr
   1ca94:	40001000 	.word	0x40001000

0001ca98 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1ca98:	4a0a      	ldr	r2, [pc, #40]	; (1cac4 <radio_aa_set+0x2c>)
   1ca9a:	2300      	movs	r3, #0
   1ca9c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1caa0:	2301      	movs	r3, #1
   1caa2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1caa6:	78c3      	ldrb	r3, [r0, #3]
   1caa8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1caac:	7843      	ldrb	r3, [r0, #1]
   1caae:	7881      	ldrb	r1, [r0, #2]
   1cab0:	041b      	lsls	r3, r3, #16
   1cab2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1cab6:	7801      	ldrb	r1, [r0, #0]
   1cab8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1cabc:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1cac0:	4770      	bx	lr
   1cac2:	bf00      	nop
   1cac4:	40001000 	.word	0x40001000

0001cac8 <radio_pkt_configure>:
	switch (phy) {
   1cac8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1cacc:	2b02      	cmp	r3, #2
{
   1cace:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1cad0:	bf14      	ite	ne
   1cad2:	2400      	movne	r4, #0
   1cad4:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1cad8:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cada:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1cade:	bf48      	it	mi
   1cae0:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1cae4:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1cae6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1caea:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1caec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1caf0:	4a09      	ldr	r2, [pc, #36]	; (1cb18 <radio_pkt_configure+0x50>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1caf2:	4303      	orrs	r3, r0
   1caf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1caf8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1cafc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1cb00:	4b06      	ldr	r3, [pc, #24]	; (1cb1c <radio_pkt_configure+0x54>)
   1cb02:	4003      	ands	r3, r0
   1cb04:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1cb08:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1cb0c:	4319      	orrs	r1, r3
   1cb0e:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1cb12:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1cb16:	bd10      	pop	{r4, pc}
   1cb18:	40001000 	.word	0x40001000
   1cb1c:	fef80000 	.word	0xfef80000

0001cb20 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1cb20:	4b01      	ldr	r3, [pc, #4]	; (1cb28 <radio_pkt_rx_set+0x8>)
   1cb22:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1cb26:	4770      	bx	lr
   1cb28:	40001000 	.word	0x40001000

0001cb2c <radio_pkt_tx_set>:
   1cb2c:	4b01      	ldr	r3, [pc, #4]	; (1cb34 <radio_pkt_tx_set+0x8>)
   1cb2e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1cb32:	4770      	bx	lr
   1cb34:	40001000 	.word	0x40001000

0001cb38 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cb38:	4b01      	ldr	r3, [pc, #4]	; (1cb40 <radio_rx_enable+0x8>)
   1cb3a:	2201      	movs	r2, #1
   1cb3c:	601a      	str	r2, [r3, #0]
}
   1cb3e:	4770      	bx	lr
   1cb40:	40001004 	.word	0x40001004

0001cb44 <radio_tx_enable>:
   1cb44:	4b01      	ldr	r3, [pc, #4]	; (1cb4c <radio_tx_enable+0x8>)
   1cb46:	2201      	movs	r2, #1
   1cb48:	601a      	str	r2, [r3, #0]
}
   1cb4a:	4770      	bx	lr
   1cb4c:	40001000 	.word	0x40001000

0001cb50 <radio_disable>:
    p_reg->CHENCLR = mask;
   1cb50:	4a07      	ldr	r2, [pc, #28]	; (1cb70 <radio_disable+0x20>)
   1cb52:	f44f 6310 	mov.w	r3, #2304	; 0x900
   1cb56:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1cb5a:	2301      	movs	r3, #1
   1cb5c:	6053      	str	r3, [r2, #4]
   1cb5e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1cb60:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1cb64:	2100      	movs	r1, #0
   1cb66:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
   1cb6a:	6113      	str	r3, [r2, #16]
}
   1cb6c:	4770      	bx	lr
   1cb6e:	bf00      	nop
   1cb70:	4001f000 	.word	0x4001f000

0001cb74 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1cb74:	4b04      	ldr	r3, [pc, #16]	; (1cb88 <radio_status_reset+0x14>)
   1cb76:	2200      	movs	r2, #0
   1cb78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1cb7c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1cb80:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1cb84:	4770      	bx	lr
   1cb86:	bf00      	nop
   1cb88:	40001000 	.word	0x40001000

0001cb8c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1cb8c:	4b03      	ldr	r3, [pc, #12]	; (1cb9c <radio_is_ready+0x10>)
   1cb8e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1cb92:	3000      	adds	r0, #0
   1cb94:	bf18      	it	ne
   1cb96:	2001      	movne	r0, #1
   1cb98:	4770      	bx	lr
   1cb9a:	bf00      	nop
   1cb9c:	40001000 	.word	0x40001000

0001cba0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1cba0:	4b03      	ldr	r3, [pc, #12]	; (1cbb0 <radio_is_done+0x10>)
   1cba2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1cba6:	3000      	adds	r0, #0
   1cba8:	bf18      	it	ne
   1cbaa:	2001      	movne	r0, #1
   1cbac:	4770      	bx	lr
   1cbae:	bf00      	nop
   1cbb0:	40001000 	.word	0x40001000

0001cbb4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1cbb4:	4b03      	ldr	r3, [pc, #12]	; (1cbc4 <radio_is_idle+0x10>)
   1cbb6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1cbba:	fab0 f080 	clz	r0, r0
   1cbbe:	0940      	lsrs	r0, r0, #5
   1cbc0:	4770      	bx	lr
   1cbc2:	bf00      	nop
   1cbc4:	40001000 	.word	0x40001000

0001cbc8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1cbc8:	4b04      	ldr	r3, [pc, #16]	; (1cbdc <radio_crc_configure+0x14>)
   1cbca:	f240 1203 	movw	r2, #259	; 0x103
   1cbce:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1cbd2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1cbd6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1cbda:	4770      	bx	lr
   1cbdc:	40001000 	.word	0x40001000

0001cbe0 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1cbe0:	4b03      	ldr	r3, [pc, #12]	; (1cbf0 <radio_crc_is_valid+0x10>)
   1cbe2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1cbe6:	3000      	adds	r0, #0
   1cbe8:	bf18      	it	ne
   1cbea:	2001      	movne	r0, #1
   1cbec:	4770      	bx	lr
   1cbee:	bf00      	nop
   1cbf0:	40001000 	.word	0x40001000

0001cbf4 <radio_pkt_empty_get>:
}
   1cbf4:	4800      	ldr	r0, [pc, #0]	; (1cbf8 <radio_pkt_empty_get+0x4>)
   1cbf6:	4770      	bx	lr
   1cbf8:	200031cc 	.word	0x200031cc

0001cbfc <radio_pkt_scratch_get>:
}
   1cbfc:	4800      	ldr	r0, [pc, #0]	; (1cc00 <radio_pkt_scratch_get+0x4>)
   1cbfe:	4770      	bx	lr
   1cc00:	200031d0 	.word	0x200031d0

0001cc04 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cc04:	4b04      	ldr	r3, [pc, #16]	; (1cc18 <radio_switch_complete_and_rx+0x14>)
   1cc06:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1cc08:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cc0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1cc0e:	4602      	mov	r2, r0
   1cc10:	4608      	mov	r0, r1
   1cc12:	f7ff be59 	b.w	1c8c8 <sw_switch.isra.10>
   1cc16:	bf00      	nop
   1cc18:	40001000 	.word	0x40001000

0001cc1c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cc1c:	4b03      	ldr	r3, [pc, #12]	; (1cc2c <radio_switch_complete_and_tx+0x10>)
   1cc1e:	2103      	movs	r1, #3
   1cc20:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1cc24:	4601      	mov	r1, r0
   1cc26:	2001      	movs	r0, #1
   1cc28:	f7ff be4e 	b.w	1c8c8 <sw_switch.isra.10>
   1cc2c:	40001000 	.word	0x40001000

0001cc30 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1cc30:	4b05      	ldr	r3, [pc, #20]	; (1cc48 <radio_switch_complete_and_disable+0x18>)
   1cc32:	2203      	movs	r2, #3
   1cc34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
   1cc38:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1cc3c:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1cc40:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cc44:	4770      	bx	lr
   1cc46:	bf00      	nop
   1cc48:	40001000 	.word	0x40001000

0001cc4c <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1cc4c:	4a03      	ldr	r2, [pc, #12]	; (1cc5c <radio_rssi_measure+0x10>)
   1cc4e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1cc52:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1cc56:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1cc5a:	4770      	bx	lr
   1cc5c:	40001000 	.word	0x40001000

0001cc60 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1cc60:	4b01      	ldr	r3, [pc, #4]	; (1cc68 <radio_rssi_get+0x8>)
   1cc62:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1cc66:	4770      	bx	lr
   1cc68:	40001000 	.word	0x40001000

0001cc6c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1cc6c:	4b02      	ldr	r3, [pc, #8]	; (1cc78 <radio_rssi_status_reset+0xc>)
   1cc6e:	2200      	movs	r2, #0
   1cc70:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1cc74:	4770      	bx	lr
   1cc76:	bf00      	nop
   1cc78:	40001000 	.word	0x40001000

0001cc7c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1cc7c:	4b03      	ldr	r3, [pc, #12]	; (1cc8c <radio_rssi_is_ready+0x10>)
   1cc7e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1cc82:	3000      	adds	r0, #0
   1cc84:	bf18      	it	ne
   1cc86:	2001      	movne	r0, #1
   1cc88:	4770      	bx	lr
   1cc8a:	bf00      	nop
   1cc8c:	40001000 	.word	0x40001000

0001cc90 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1cc90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc92:	2400      	movs	r4, #0
   1cc94:	2706      	movs	r7, #6
   1cc96:	00a3      	lsls	r3, r4, #2
   1cc98:	fb07 2504 	mla	r5, r7, r4, r2
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1cc9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1cca4:	682e      	ldr	r6, [r5, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1cca6:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1ccaa:	3401      	adds	r4, #1
   1ccac:	88ad      	ldrh	r5, [r5, #4]
   1ccae:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1ccb2:	2c08      	cmp	r4, #8
   1ccb4:	d1ef      	bne.n	1cc96 <radio_filter_configure+0x6>
		bdaddr += 6;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1ccb6:	4b03      	ldr	r3, [pc, #12]	; (1ccc4 <radio_filter_configure+0x34>)
   1ccb8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1ccbc:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1ccc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ccc2:	bf00      	nop
   1ccc4:	40001000 	.word	0x40001000

0001ccc8 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1ccc8:	4a03      	ldr	r2, [pc, #12]	; (1ccd8 <radio_filter_disable+0x10>)
   1ccca:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1ccce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ccd2:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1ccd6:	4770      	bx	lr
   1ccd8:	40001000 	.word	0x40001000

0001ccdc <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1ccdc:	4b02      	ldr	r3, [pc, #8]	; (1cce8 <radio_filter_status_reset+0xc>)
   1ccde:	2200      	movs	r2, #0
   1cce0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1cce4:	4770      	bx	lr
   1cce6:	bf00      	nop
   1cce8:	40001000 	.word	0x40001000

0001ccec <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1ccec:	4b03      	ldr	r3, [pc, #12]	; (1ccfc <radio_filter_has_match+0x10>)
   1ccee:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1ccf2:	3000      	adds	r0, #0
   1ccf4:	bf18      	it	ne
   1ccf6:	2001      	movne	r0, #1
   1ccf8:	4770      	bx	lr
   1ccfa:	bf00      	nop
   1ccfc:	40001000 	.word	0x40001000

0001cd00 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1cd00:	4b01      	ldr	r3, [pc, #4]	; (1cd08 <radio_filter_match_get+0x8>)
   1cd02:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1cd06:	4770      	bx	lr
   1cd08:	40001000 	.word	0x40001000

0001cd0c <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1cd0c:	4b05      	ldr	r3, [pc, #20]	; (1cd24 <radio_tmr_status_reset+0x18>)
   1cd0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1cd12:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   1cd16:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1cd1a:	4a03      	ldr	r2, [pc, #12]	; (1cd28 <radio_tmr_status_reset+0x1c>)
   1cd1c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1cd20:	4770      	bx	lr
   1cd22:	bf00      	nop
   1cd24:	4000b000 	.word	0x4000b000
   1cd28:	0e7000c0 	.word	0x0e7000c0

0001cd2c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1cd2c:	4b03      	ldr	r3, [pc, #12]	; (1cd3c <radio_tmr_tifs_set+0x10>)
   1cd2e:	4a04      	ldr	r2, [pc, #16]	; (1cd40 <radio_tmr_tifs_set+0x14>)
   1cd30:	781b      	ldrb	r3, [r3, #0]
   1cd32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1cd36:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cd3a:	4770      	bx	lr
   1cd3c:	200036f0 	.word	0x200036f0
   1cd40:	40009000 	.word	0x40009000

0001cd44 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1cd46:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1cd4a:	4c2f      	ldr	r4, [pc, #188]	; (1ce08 <radio_tmr_start+0xc4>)
   1cd4c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1cd50:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
   1cd52:	bf88      	it	hi
   1cd54:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cd58:	4b2c      	ldr	r3, [pc, #176]	; (1ce0c <radio_tmr_start+0xc8>)
	}
	remainder /= 1000000UL;
   1cd5a:	4c2d      	ldr	r4, [pc, #180]	; (1ce10 <radio_tmr_start+0xcc>)
		remainder += 30517578UL;
   1cd5c:	bf84      	itt	hi
   1cd5e:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
   1cd62:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
   1cd66:	f04f 0501 	mov.w	r5, #1
	remainder /= 1000000UL;
   1cd6a:	fbb2 f4f4 	udiv	r4, r2, r4

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1cd6e:	f04f 0600 	mov.w	r6, #0
	EVENT_TIMER->PRESCALER = 4;
   1cd72:	f04f 0704 	mov.w	r7, #4
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1cd76:	f04f 0202 	mov.w	r2, #2
   1cd7a:	601d      	str	r5, [r3, #0]
	EVENT_TIMER->MODE = 0;
   1cd7c:	f8c3 64f8 	str.w	r6, [r3, #1272]	; 0x4f8
	EVENT_TIMER->PRESCALER = 4;
   1cd80:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1cd84:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
    p_reg->CC[ch] = cc_val;
   1cd88:	4a22      	ldr	r2, [pc, #136]	; (1ce14 <radio_tmr_start+0xd0>)
    p_reg->CC[cc_channel] = cc_value;
   1cd8a:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
		ticks_start--;
   1cd8e:	bf88      	it	hi
   1cd90:	f101 31ff 	addhi.w	r1, r1, #4294967295
   1cd94:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1cd98:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1cd9c:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cda0:	491d      	ldr	r1, [pc, #116]	; (1ce18 <radio_tmr_start+0xd4>)
   1cda2:	f502 72a4 	add.w	r2, r2, #328	; 0x148
	EVENT_TIMER->MODE = 0;
   1cda6:	3b0c      	subs	r3, #12
   1cda8:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cdac:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1cdb0:	2340      	movs	r3, #64	; 0x40
   1cdb2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1cdb6:	f7ff fd73 	bl	1c8a0 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1cdba:	4b18      	ldr	r3, [pc, #96]	; (1ce1c <radio_tmr_start+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cdbc:	4a18      	ldr	r2, [pc, #96]	; (1ce20 <radio_tmr_start+0xdc>)
   1cdbe:	6015      	str	r5, [r2, #0]
   1cdc0:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1cdc4:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1cdc8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1cdcc:	601d      	str	r5, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cdce:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   1cdd2:	3b74      	subs	r3, #116	; 0x74
   1cdd4:	f8c1 3550 	str.w	r3, [r1, #1360]	; 0x550
   1cdd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   1cddc:	3334      	adds	r3, #52	; 0x34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cdde:	f8c1 2554 	str.w	r2, [r1, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cde2:	f8c1 3558 	str.w	r3, [r1, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cde6:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1cdea:	33c4      	adds	r3, #196	; 0xc4
   1cdec:	f8c1 355c 	str.w	r3, [r1, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cdf0:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
   1cdf4:	3bc0      	subs	r3, #192	; 0xc0
   1cdf6:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cdfa:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
   1cdfe:	33c8      	adds	r3, #200	; 0xc8
   1ce00:	f8c1 3564 	str.w	r3, [r1, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1ce04:	4620      	mov	r0, r4
   1ce06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ce08:	7ff0bdbf 	.word	0x7ff0bdbf
   1ce0c:	4000800c 	.word	0x4000800c
   1ce10:	000f4240 	.word	0x000f4240
   1ce14:	4000b000 	.word	0x4000b000
   1ce18:	4001f000 	.word	0x4001f000
   1ce1c:	40009000 	.word	0x40009000
   1ce20:	4000900c 	.word	0x4000900c

0001ce24 <radio_tmr_start_tick>:
   1ce24:	4b0e      	ldr	r3, [pc, #56]	; (1ce60 <radio_tmr_start_tick+0x3c>)
    p_reg->CC[cc_channel] = cc_value;
   1ce26:	4a0f      	ldr	r2, [pc, #60]	; (1ce64 <radio_tmr_start_tick+0x40>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1ce28:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ce2a:	2401      	movs	r4, #1
   1ce2c:	601c      	str	r4, [r3, #0]
   1ce2e:	609c      	str	r4, [r3, #8]
    p_reg->CC[ch] = cc_val;
   1ce30:	4b0d      	ldr	r3, [pc, #52]	; (1ce68 <radio_tmr_start_tick+0x44>)
    p_reg->CC[cc_channel] = cc_value;
   1ce32:	f8c2 4540 	str.w	r4, [r2, #1344]	; 0x540
   1ce36:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1ce3a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1ce3e:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ce42:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1ce46:	4909      	ldr	r1, [pc, #36]	; (1ce6c <radio_tmr_start_tick+0x48>)
   1ce48:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ce4c:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1ce50:	2240      	movs	r2, #64	; 0x40
   1ce52:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_rtc_event_enable(NRF_RTC0, RTC_EVTENSET_COMPARE2_Msk);

	hal_event_timer_start_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_EVENT_TIMER_START_PPI));

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1ce56:	f7ff fd23 	bl	1c8a0 <hal_radio_enable_on_tick_ppi_config_and_enable>
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1ce5a:	4620      	mov	r0, r4
   1ce5c:	bd10      	pop	{r4, pc}
   1ce5e:	bf00      	nop
   1ce60:	40008004 	.word	0x40008004
   1ce64:	40008000 	.word	0x40008000
   1ce68:	4000b000 	.word	0x4000b000
   1ce6c:	4000b148 	.word	0x4000b148

0001ce70 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1ce70:	4b01      	ldr	r3, [pc, #4]	; (1ce78 <radio_tmr_start_get+0x8>)
   1ce72:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1ce76:	4770      	bx	lr
   1ce78:	4000b000 	.word	0x4000b000

0001ce7c <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ce7c:	4a04      	ldr	r2, [pc, #16]	; (1ce90 <radio_tmr_stop+0x14>)
   1ce7e:	2301      	movs	r3, #1
   1ce80:	6013      	str	r3, [r2, #0]
   1ce82:	60d3      	str	r3, [r2, #12]
   1ce84:	320c      	adds	r2, #12
   1ce86:	f602 72f4 	addw	r2, r2, #4084	; 0xff4
   1ce8a:	6013      	str	r3, [r2, #0]
   1ce8c:	60d3      	str	r3, [r2, #12]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ce8e:	4770      	bx	lr
   1ce90:	40008004 	.word	0x40008004

0001ce94 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1ce94:	4b04      	ldr	r3, [pc, #16]	; (1cea8 <radio_tmr_hcto_configure+0x14>)
   1ce96:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   1ce9a:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   1ce9e:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1cea2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1cea6:	4770      	bx	lr
   1cea8:	40008000 	.word	0x40008000

0001ceac <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ceac:	4b06      	ldr	r3, [pc, #24]	; (1cec8 <radio_tmr_aa_capture+0x1c>)
   1ceae:	4a07      	ldr	r2, [pc, #28]	; (1cecc <radio_tmr_aa_capture+0x20>)
   1ceb0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ceb4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1ceb8:	3240      	adds	r2, #64	; 0x40
   1ceba:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1cebe:	4a04      	ldr	r2, [pc, #16]	; (1ced0 <radio_tmr_aa_capture+0x24>)
   1cec0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1cec4:	4770      	bx	lr
   1cec6:	bf00      	nop
   1cec8:	4001f000 	.word	0x4001f000
   1cecc:	40001100 	.word	0x40001100
   1ced0:	04000080 	.word	0x04000080

0001ced4 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1ced4:	4b01      	ldr	r3, [pc, #4]	; (1cedc <radio_tmr_aa_get+0x8>)
   1ced6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1ceda:	4770      	bx	lr
   1cedc:	40008000 	.word	0x40008000

0001cee0 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1cee0:	4b01      	ldr	r3, [pc, #4]	; (1cee8 <radio_tmr_aa_save+0x8>)
   1cee2:	6018      	str	r0, [r3, #0]
}
   1cee4:	4770      	bx	lr
   1cee6:	bf00      	nop
   1cee8:	200032dc 	.word	0x200032dc

0001ceec <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   1ceec:	4b01      	ldr	r3, [pc, #4]	; (1cef4 <radio_tmr_aa_restore+0x8>)
   1ceee:	6818      	ldr	r0, [r3, #0]
   1cef0:	4770      	bx	lr
   1cef2:	bf00      	nop
   1cef4:	200032dc 	.word	0x200032dc

0001cef8 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1cef8:	4b01      	ldr	r3, [pc, #4]	; (1cf00 <radio_tmr_ready_get+0x8>)
   1cefa:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1cefe:	4770      	bx	lr
   1cf00:	40008000 	.word	0x40008000

0001cf04 <radio_tmr_end_capture>:
   1cf04:	4b02      	ldr	r3, [pc, #8]	; (1cf10 <radio_tmr_end_capture+0xc>)
   1cf06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1cf0a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1cf0e:	4770      	bx	lr
   1cf10:	4001f000 	.word	0x4001f000

0001cf14 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1cf14:	4b01      	ldr	r3, [pc, #4]	; (1cf1c <radio_tmr_end_get+0x8>)
   1cf16:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1cf1a:	4770      	bx	lr
   1cf1c:	40008000 	.word	0x40008000

0001cf20 <radio_tmr_tifs_base_get>:
   1cf20:	4b01      	ldr	r3, [pc, #4]	; (1cf28 <radio_tmr_tifs_base_get+0x8>)
   1cf22:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1cf26:	4770      	bx	lr
   1cf28:	40008000 	.word	0x40008000

0001cf2c <radio_ar_match_get>:
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1cf2c:	4b01      	ldr	r3, [pc, #4]	; (1cf34 <radio_ar_match_get+0x8>)
   1cf2e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1cf32:	4770      	bx	lr
   1cf34:	4000f000 	.word	0x4000f000

0001cf38 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1cf38:	4a06      	ldr	r2, [pc, #24]	; (1cf54 <radio_ar_status_reset+0x1c>)
   1cf3a:	2300      	movs	r3, #0
   1cf3c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1cf40:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   1cf44:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   1cf48:	4b03      	ldr	r3, [pc, #12]	; (1cf58 <radio_ar_status_reset+0x20>)
   1cf4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1cf4e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1cf52:	4770      	bx	lr
   1cf54:	40001000 	.word	0x40001000
   1cf58:	4001f000 	.word	0x4001f000

0001cf5c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1cf5c:	4b08      	ldr	r3, [pc, #32]	; (1cf80 <radio_ar_has_match+0x24>)
   1cf5e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1cf62:	b160      	cbz	r0, 1cf7e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1cf64:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1cf68:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1cf6c:	b138      	cbz	r0, 1cf7e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1cf6e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1cf72:	b120      	cbz	r0, 1cf7e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1cf74:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1cf78:	fab0 f080 	clz	r0, r0
   1cf7c:	0940      	lsrs	r0, r0, #5
}
   1cf7e:	4770      	bx	lr
   1cf80:	40001000 	.word	0x40001000

0001cf84 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1cf84:	2902      	cmp	r1, #2
{
   1cf86:	b510      	push	{r4, lr}
   1cf88:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1cf8a:	d00a      	beq.n	1cfa2 <mayfly_enable_cb+0x1e>
   1cf8c:	221e      	movs	r2, #30
   1cf8e:	490a      	ldr	r1, [pc, #40]	; (1cfb8 <mayfly_enable_cb+0x34>)
   1cf90:	480a      	ldr	r0, [pc, #40]	; (1cfbc <mayfly_enable_cb+0x38>)
   1cf92:	f007 f953 	bl	2423c <printk>
   1cf96:	4040      	eors	r0, r0
   1cf98:	f380 8811 	msr	BASEPRI, r0
   1cf9c:	f04f 0003 	mov.w	r0, #3
   1cfa0:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1cfa2:	200b      	movs	r0, #11
	if (enable) {
   1cfa4:	b11c      	cbz	r4, 1cfae <mayfly_enable_cb+0x2a>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1cfa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1cfaa:	f7e9 ba63 	b.w	6474 <arch_irq_enable>
}
   1cfae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1cfb2:	f7e9 ba6f 	b.w	6494 <arch_irq_disable>
   1cfb6:	bf00      	nop
   1cfb8:	00031134 	.word	0x00031134
   1cfbc:	0002bced 	.word	0x0002bced

0001cfc0 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1cfc0:	2901      	cmp	r1, #1
{
   1cfc2:	b508      	push	{r3, lr}
	switch (callee_id) {
   1cfc4:	d014      	beq.n	1cff0 <mayfly_is_enabled+0x30>
   1cfc6:	b171      	cbz	r1, 1cfe6 <mayfly_is_enabled+0x26>
   1cfc8:	2902      	cmp	r1, #2
   1cfca:	d011      	beq.n	1cff0 <mayfly_is_enabled+0x30>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1cfcc:	2236      	movs	r2, #54	; 0x36
   1cfce:	4909      	ldr	r1, [pc, #36]	; (1cff4 <mayfly_is_enabled+0x34>)
   1cfd0:	4809      	ldr	r0, [pc, #36]	; (1cff8 <mayfly_is_enabled+0x38>)
   1cfd2:	f007 f933 	bl	2423c <printk>
   1cfd6:	4040      	eors	r0, r0
   1cfd8:	f380 8811 	msr	BASEPRI, r0
   1cfdc:	f04f 0003 	mov.w	r0, #3
   1cfe0:	df02      	svc	2
		break;
	}

	return 0;
}
   1cfe2:	2000      	movs	r0, #0
   1cfe4:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1cfe6:	2018      	movs	r0, #24
}
   1cfe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1cfec:	f7e9 ba66 	b.w	64bc <arch_irq_is_enabled>
   1cff0:	200b      	movs	r0, #11
   1cff2:	e7f9      	b.n	1cfe8 <mayfly_is_enabled+0x28>
   1cff4:	00031134 	.word	0x00031134
   1cff8:	0002bced 	.word	0x0002bced

0001cffc <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1cffc:	2901      	cmp	r1, #1
{
   1cffe:	b508      	push	{r3, lr}
	switch (callee_id) {
   1d000:	d014      	beq.n	1d02c <mayfly_pend+0x30>
   1d002:	b169      	cbz	r1, 1d020 <mayfly_pend+0x24>
   1d004:	2902      	cmp	r1, #2
   1d006:	d011      	beq.n	1d02c <mayfly_pend+0x30>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1d008:	2267      	movs	r2, #103	; 0x67
   1d00a:	490a      	ldr	r1, [pc, #40]	; (1d034 <mayfly_pend+0x38>)
   1d00c:	480a      	ldr	r0, [pc, #40]	; (1d038 <mayfly_pend+0x3c>)
   1d00e:	f007 f915 	bl	2423c <printk>
   1d012:	4040      	eors	r0, r0
   1d014:	f380 8811 	msr	BASEPRI, r0
   1d018:	f04f 0003 	mov.w	r0, #3
   1d01c:	df02      	svc	2
		break;
	}
}
   1d01e:	e004      	b.n	1d02a <mayfly_pend+0x2e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d020:	4b06      	ldr	r3, [pc, #24]	; (1d03c <mayfly_pend+0x40>)
   1d022:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1d026:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d02a:	bd08      	pop	{r3, pc}
   1d02c:	4b03      	ldr	r3, [pc, #12]	; (1d03c <mayfly_pend+0x40>)
   1d02e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d032:	e7f8      	b.n	1d026 <mayfly_pend+0x2a>
   1d034:	00031134 	.word	0x00031134
   1d038:	0002bced 	.word	0x0002bced
   1d03c:	e000e100 	.word	0xe000e100

0001d040 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d040:	2803      	cmp	r0, #3
{
   1d042:	b510      	push	{r4, lr}
   1d044:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d046:	d90a      	bls.n	1d05e <hal_ticker_instance0_caller_id_get+0x1e>
   1d048:	222b      	movs	r2, #43	; 0x2b
   1d04a:	490d      	ldr	r1, [pc, #52]	; (1d080 <hal_ticker_instance0_caller_id_get+0x40>)
   1d04c:	480d      	ldr	r0, [pc, #52]	; (1d084 <hal_ticker_instance0_caller_id_get+0x44>)
   1d04e:	f007 f8f5 	bl	2423c <printk>
   1d052:	4040      	eors	r0, r0
   1d054:	f380 8811 	msr	BASEPRI, r0
   1d058:	f04f 0003 	mov.w	r0, #3
   1d05c:	df02      	svc	2

	caller_id = caller_id_lut[user_id];
   1d05e:	4b0a      	ldr	r3, [pc, #40]	; (1d088 <hal_ticker_instance0_caller_id_get+0x48>)
   1d060:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d062:	b954      	cbnz	r4, 1d07a <hal_ticker_instance0_caller_id_get+0x3a>
   1d064:	222e      	movs	r2, #46	; 0x2e
   1d066:	4906      	ldr	r1, [pc, #24]	; (1d080 <hal_ticker_instance0_caller_id_get+0x40>)
   1d068:	4806      	ldr	r0, [pc, #24]	; (1d084 <hal_ticker_instance0_caller_id_get+0x44>)
   1d06a:	f007 f8e7 	bl	2423c <printk>
   1d06e:	4040      	eors	r0, r0
   1d070:	f380 8811 	msr	BASEPRI, r0
   1d074:	f04f 0003 	mov.w	r0, #3
   1d078:	df02      	svc	2

	return caller_id;
}
   1d07a:	4620      	mov	r0, r4
   1d07c:	bd10      	pop	{r4, pc}
   1d07e:	bf00      	nop
   1d080:	00031199 	.word	0x00031199
   1d084:	0002bced 	.word	0x0002bced
   1d088:	00031195 	.word	0x00031195

0001d08c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1d08c:	3801      	subs	r0, #1
{
   1d08e:	b510      	push	{r4, lr}
   1d090:	461c      	mov	r4, r3
	switch (caller_id) {
   1d092:	2804      	cmp	r0, #4
   1d094:	d844      	bhi.n	1d120 <hal_ticker_instance0_sched+0x94>
   1d096:	e8df f000 	tbb	[pc, r0]
   1d09a:	1903      	.short	0x1903
   1d09c:	2b22      	.short	0x2b22
   1d09e:	3a          	.byte	0x3a
   1d09f:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   1d0a0:	2904      	cmp	r1, #4
   1d0a2:	d107      	bne.n	1d0b4 <hal_ticker_instance0_sched+0x28>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;
   1d0a4:	4b1f      	ldr	r3, [pc, #124]	; (1d124 <hal_ticker_instance0_sched+0x98>)

			/* TODO: scheduler lock, if preemptive threads used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d0a6:	2102      	movs	r1, #2
			m.param = instance;
   1d0a8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d0aa:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   1d0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d0b0:	f7f9 bad8 	b.w	16664 <mayfly_enqueue>
			LL_ASSERT(0);
   1d0b4:	224e      	movs	r2, #78	; 0x4e
		LL_ASSERT(0);
   1d0b6:	491c      	ldr	r1, [pc, #112]	; (1d128 <hal_ticker_instance0_sched+0x9c>)
   1d0b8:	481c      	ldr	r0, [pc, #112]	; (1d12c <hal_ticker_instance0_sched+0xa0>)
   1d0ba:	f007 f8bf 	bl	2423c <printk>
   1d0be:	4040      	eors	r0, r0
   1d0c0:	f380 8811 	msr	BASEPRI, r0
   1d0c4:	f04f 0003 	mov.w	r0, #3
   1d0c8:	df02      	svc	2
}
   1d0ca:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d0cc:	2903      	cmp	r1, #3
   1d0ce:	d104      	bne.n	1d0da <hal_ticker_instance0_sched+0x4e>
			m.param = instance;
   1d0d0:	4b17      	ldr	r3, [pc, #92]	; (1d130 <hal_ticker_instance0_sched+0xa4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d0d2:	2101      	movs	r1, #1
			m.param = instance;
   1d0d4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d0d6:	4608      	mov	r0, r1
   1d0d8:	e7e8      	b.n	1d0ac <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1d0da:	2265      	movs	r2, #101	; 0x65
   1d0dc:	e7eb      	b.n	1d0b6 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1d0de:	2904      	cmp	r1, #4
   1d0e0:	d104      	bne.n	1d0ec <hal_ticker_instance0_sched+0x60>
			m.param = instance;
   1d0e2:	4b14      	ldr	r3, [pc, #80]	; (1d134 <hal_ticker_instance0_sched+0xa8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d0e4:	2102      	movs	r1, #2
			m.param = instance;
   1d0e6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d0e8:	2001      	movs	r0, #1
   1d0ea:	e7df      	b.n	1d0ac <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1d0ec:	227c      	movs	r2, #124	; 0x7c
   1d0ee:	e7e2      	b.n	1d0b6 <hal_ticker_instance0_sched+0x2a>
		switch (callee_id) {
   1d0f0:	2903      	cmp	r1, #3
   1d0f2:	d003      	beq.n	1d0fc <hal_ticker_instance0_sched+0x70>
   1d0f4:	2904      	cmp	r1, #4
   1d0f6:	d006      	beq.n	1d106 <hal_ticker_instance0_sched+0x7a>
			LL_ASSERT(0);
   1d0f8:	22a2      	movs	r2, #162	; 0xa2
   1d0fa:	e7dc      	b.n	1d0b6 <hal_ticker_instance0_sched+0x2a>
			m.param = instance;
   1d0fc:	4b0e      	ldr	r3, [pc, #56]	; (1d138 <hal_ticker_instance0_sched+0xac>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d0fe:	2101      	movs	r1, #1
			m.param = instance;
   1d100:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d102:	2002      	movs	r0, #2
   1d104:	e7d2      	b.n	1d0ac <hal_ticker_instance0_sched+0x20>
			m.param = instance;
   1d106:	4b0d      	ldr	r3, [pc, #52]	; (1d13c <hal_ticker_instance0_sched+0xb0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d108:	2102      	movs	r1, #2
			m.param = instance;
   1d10a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d10c:	e7e3      	b.n	1d0d6 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   1d10e:	2904      	cmp	r1, #4
   1d110:	d104      	bne.n	1d11c <hal_ticker_instance0_sched+0x90>
			m.param = instance;
   1d112:	4b0b      	ldr	r3, [pc, #44]	; (1d140 <hal_ticker_instance0_sched+0xb4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d114:	2102      	movs	r1, #2
			m.param = instance;
   1d116:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d118:	2003      	movs	r0, #3
   1d11a:	e7c7      	b.n	1d0ac <hal_ticker_instance0_sched+0x20>
			LL_ASSERT(0);
   1d11c:	22ba      	movs	r2, #186	; 0xba
   1d11e:	e7ca      	b.n	1d0b6 <hal_ticker_instance0_sched+0x2a>
		LL_ASSERT(0);
   1d120:	22c0      	movs	r2, #192	; 0xc0
   1d122:	e7c8      	b.n	1d0b6 <hal_ticker_instance0_sched+0x2a>
   1d124:	20000a78 	.word	0x20000a78
   1d128:	00031199 	.word	0x00031199
   1d12c:	0002bced 	.word	0x0002bced
   1d130:	20000a88 	.word	0x20000a88
   1d134:	20000a98 	.word	0x20000a98
   1d138:	20000aa8 	.word	0x20000aa8
   1d13c:	20000ab8 	.word	0x20000ab8
   1d140:	20000ac8 	.word	0x20000ac8

0001d144 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d144:	4b02      	ldr	r3, [pc, #8]	; (1d150 <net_buf_pool_get+0xc>)
   1d146:	222c      	movs	r2, #44	; 0x2c
   1d148:	fb02 3000 	mla	r0, r2, r0, r3
   1d14c:	4770      	bx	lr
   1d14e:	bf00      	nop
   1d150:	20000e2c 	.word	0x20000e2c

0001d154 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d154:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1d156:	4a05      	ldr	r2, [pc, #20]	; (1d16c <net_buf_id+0x18>)
   1d158:	212c      	movs	r1, #44	; 0x2c
   1d15a:	fb01 2303 	mla	r3, r1, r3, r2
   1d15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d160:	1ac0      	subs	r0, r0, r3
}
   1d162:	4b03      	ldr	r3, [pc, #12]	; (1d170 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1d164:	10c0      	asrs	r0, r0, #3
}
   1d166:	4358      	muls	r0, r3
   1d168:	4770      	bx	lr
   1d16a:	bf00      	nop
   1d16c:	20000e2c 	.word	0x20000e2c
   1d170:	aaaaaaab 	.word	0xaaaaaaab

0001d174 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1d174:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d176:	4a0a      	ldr	r2, [pc, #40]	; (1d1a0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d178:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d17a:	242c      	movs	r4, #44	; 0x2c
   1d17c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1d180:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d184:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d186:	6823      	ldr	r3, [r4, #0]
   1d188:	429a      	cmp	r2, r3
   1d18a:	bf94      	ite	ls
   1d18c:	600a      	strls	r2, [r1, #0]
   1d18e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d190:	f7ff ffe0 	bl	1d154 <net_buf_id>
   1d194:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d198:	fb02 3000 	mla	r0, r2, r0, r3
   1d19c:	bd10      	pop	{r4, pc}
   1d19e:	bf00      	nop
   1d1a0:	20000e2c 	.word	0x20000e2c

0001d1a4 <net_buf_reset>:
{
   1d1a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1d1a6:	7943      	ldrb	r3, [r0, #5]
{
   1d1a8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1d1aa:	b143      	cbz	r3, 1d1be <net_buf_reset+0x1a>
   1d1ac:	490c      	ldr	r1, [pc, #48]	; (1d1e0 <net_buf_reset+0x3c>)
   1d1ae:	480d      	ldr	r0, [pc, #52]	; (1d1e4 <net_buf_reset+0x40>)
   1d1b0:	224f      	movs	r2, #79	; 0x4f
   1d1b2:	f007 f843 	bl	2423c <printk>
   1d1b6:	214f      	movs	r1, #79	; 0x4f
   1d1b8:	4809      	ldr	r0, [pc, #36]	; (1d1e0 <net_buf_reset+0x3c>)
   1d1ba:	f007 faf1 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1d1be:	6823      	ldr	r3, [r4, #0]
   1d1c0:	b143      	cbz	r3, 1d1d4 <net_buf_reset+0x30>
   1d1c2:	4907      	ldr	r1, [pc, #28]	; (1d1e0 <net_buf_reset+0x3c>)
   1d1c4:	4807      	ldr	r0, [pc, #28]	; (1d1e4 <net_buf_reset+0x40>)
   1d1c6:	2250      	movs	r2, #80	; 0x50
   1d1c8:	f007 f838 	bl	2423c <printk>
   1d1cc:	2150      	movs	r1, #80	; 0x50
   1d1ce:	4804      	ldr	r0, [pc, #16]	; (1d1e0 <net_buf_reset+0x3c>)
   1d1d0:	f007 fae6 	bl	247a0 <assert_post_action>
	buf->len  = 0U;
   1d1d4:	2300      	movs	r3, #0
   1d1d6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1d1d8:	6923      	ldr	r3, [r4, #16]
   1d1da:	60a3      	str	r3, [r4, #8]
}
   1d1dc:	bd10      	pop	{r4, pc}
   1d1de:	bf00      	nop
   1d1e0:	000311fa 	.word	0x000311fa
   1d1e4:	0002bced 	.word	0x0002bced

0001d1e8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d1e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d1ec:	4605      	mov	r5, r0
   1d1ee:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1d1f0:	4610      	mov	r0, r2
   1d1f2:	4619      	mov	r1, r3
{
   1d1f4:	4616      	mov	r6, r2
   1d1f6:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1d1f8:	f00d f904 	bl	2a404 <z_timeout_end_calc>
   1d1fc:	4680      	mov	r8, r0
   1d1fe:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   1d200:	b945      	cbnz	r5, 1d214 <net_buf_alloc_len+0x2c>
   1d202:	4949      	ldr	r1, [pc, #292]	; (1d328 <net_buf_alloc_len+0x140>)
   1d204:	4849      	ldr	r0, [pc, #292]	; (1d32c <net_buf_alloc_len+0x144>)
   1d206:	22ed      	movs	r2, #237	; 0xed
   1d208:	f007 f818 	bl	2423c <printk>
   1d20c:	21ed      	movs	r1, #237	; 0xed
   1d20e:	4846      	ldr	r0, [pc, #280]	; (1d328 <net_buf_alloc_len+0x140>)
   1d210:	f007 fac6 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   1d214:	f04f 0320 	mov.w	r3, #32
   1d218:	f3ef 8a11 	mrs	sl, BASEPRI
   1d21c:	f383 8811 	msr	BASEPRI, r3
   1d220:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d224:	8beb      	ldrh	r3, [r5, #30]
   1d226:	2b00      	cmp	r3, #0
   1d228:	d054      	beq.n	1d2d4 <net_buf_alloc_len+0xec>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d22a:	8baa      	ldrh	r2, [r5, #28]
   1d22c:	429a      	cmp	r2, r3
   1d22e:	d93d      	bls.n	1d2ac <net_buf_alloc_len+0xc4>
	return z_impl_k_queue_get(queue, timeout);
   1d230:	2200      	movs	r2, #0
   1d232:	2300      	movs	r3, #0
   1d234:	4628      	mov	r0, r5
   1d236:	f003 fd9b 	bl	20d70 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d23a:	4604      	mov	r4, r0
   1d23c:	2800      	cmp	r0, #0
   1d23e:	d035      	beq.n	1d2ac <net_buf_alloc_len+0xc4>
	__asm__ volatile(
   1d240:	f38a 8811 	msr	BASEPRI, sl
   1d244:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d248:	9d01      	ldr	r5, [sp, #4]
   1d24a:	2d00      	cmp	r5, #0
   1d24c:	d06a      	beq.n	1d324 <net_buf_alloc_len+0x13c>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d24e:	ea56 0307 	orrs.w	r3, r6, r7
   1d252:	d010      	beq.n	1d276 <net_buf_alloc_len+0x8e>
   1d254:	1c7b      	adds	r3, r7, #1
   1d256:	bf08      	it	eq
   1d258:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1d25c:	d00b      	beq.n	1d276 <net_buf_alloc_len+0x8e>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1d25e:	f005 fc1d 	bl	22a9c <z_tick_get>
   1d262:	ebb8 0600 	subs.w	r6, r8, r0
   1d266:	eb69 0701 	sbc.w	r7, r9, r1
   1d26a:	2e00      	cmp	r6, #0
   1d26c:	f177 0300 	sbcs.w	r3, r7, #0
   1d270:	bfbc      	itt	lt
   1d272:	2600      	movlt	r6, #0
   1d274:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d276:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d278:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1d330 <net_buf_alloc_len+0x148>
   1d27c:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1d280:	fb09 8303 	mla	r3, r9, r3, r8
   1d284:	4632      	mov	r2, r6
   1d286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d288:	681b      	ldr	r3, [r3, #0]
   1d28a:	a901      	add	r1, sp, #4
   1d28c:	f8d3 a000 	ldr.w	sl, [r3]
   1d290:	4620      	mov	r0, r4
   1d292:	463b      	mov	r3, r7
   1d294:	47d0      	blx	sl
   1d296:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d298:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d29a:	bb58      	cbnz	r0, 1d2f4 <net_buf_alloc_len+0x10c>
	k_lifo_put(&pool->free, buf);
   1d29c:	79a0      	ldrb	r0, [r4, #6]
   1d29e:	4621      	mov	r1, r4
   1d2a0:	fb00 8009 	mla	r0, r0, r9, r8
   1d2a4:	f00c ffc9 	bl	2a23a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d2a8:	4634      	mov	r4, r6
   1d2aa:	e01f      	b.n	1d2ec <net_buf_alloc_len+0x104>
		uninit_count = pool->uninit_count--;
   1d2ac:	8beb      	ldrh	r3, [r5, #30]
   1d2ae:	1e5a      	subs	r2, r3, #1
   1d2b0:	83ea      	strh	r2, [r5, #30]
   1d2b2:	f38a 8811 	msr	BASEPRI, sl
   1d2b6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d2ba:	8bac      	ldrh	r4, [r5, #28]
   1d2bc:	1ae4      	subs	r4, r4, r3
   1d2be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1d2c0:	2218      	movs	r2, #24
   1d2c2:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   1d2c6:	4b1a      	ldr	r3, [pc, #104]	; (1d330 <net_buf_alloc_len+0x148>)
   1d2c8:	1aed      	subs	r5, r5, r3
   1d2ca:	4b1a      	ldr	r3, [pc, #104]	; (1d334 <net_buf_alloc_len+0x14c>)
   1d2cc:	10ad      	asrs	r5, r5, #2
   1d2ce:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d2d0:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d2d2:	e7b9      	b.n	1d248 <net_buf_alloc_len+0x60>
   1d2d4:	f38a 8811 	msr	BASEPRI, sl
   1d2d8:	f3bf 8f6f 	isb	sy
   1d2dc:	4632      	mov	r2, r6
   1d2de:	463b      	mov	r3, r7
   1d2e0:	4628      	mov	r0, r5
   1d2e2:	f003 fd45 	bl	20d70 <z_impl_k_queue_get>
	if (!buf) {
   1d2e6:	4604      	mov	r4, r0
   1d2e8:	2800      	cmp	r0, #0
   1d2ea:	d1ad      	bne.n	1d248 <net_buf_alloc_len+0x60>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d2ec:	4620      	mov	r0, r4
   1d2ee:	b002      	add	sp, #8
   1d2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   1d2f4:	9b01      	ldr	r3, [sp, #4]
   1d2f6:	429d      	cmp	r5, r3
   1d2f8:	d90a      	bls.n	1d310 <net_buf_alloc_len+0x128>
   1d2fa:	490b      	ldr	r1, [pc, #44]	; (1d328 <net_buf_alloc_len+0x140>)
   1d2fc:	480b      	ldr	r0, [pc, #44]	; (1d32c <net_buf_alloc_len+0x144>)
   1d2fe:	f240 124d 	movw	r2, #333	; 0x14d
   1d302:	f006 ff9b 	bl	2423c <printk>
   1d306:	f240 114d 	movw	r1, #333	; 0x14d
   1d30a:	4807      	ldr	r0, [pc, #28]	; (1d328 <net_buf_alloc_len+0x140>)
   1d30c:	f007 fa48 	bl	247a0 <assert_post_action>
	buf->frags = NULL;
   1d310:	2300      	movs	r3, #0
   1d312:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d314:	2301      	movs	r3, #1
   1d316:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1d318:	9b01      	ldr	r3, [sp, #4]
   1d31a:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1d31c:	4620      	mov	r0, r4
   1d31e:	f7ff ff41 	bl	1d1a4 <net_buf_reset>
	return buf;
   1d322:	e7e3      	b.n	1d2ec <net_buf_alloc_len+0x104>
		buf->__buf = NULL;
   1d324:	6125      	str	r5, [r4, #16]
   1d326:	e7f3      	b.n	1d310 <net_buf_alloc_len+0x128>
   1d328:	000311fa 	.word	0x000311fa
   1d32c:	0002bced 	.word	0x0002bced
   1d330:	20000e2c 	.word	0x20000e2c
   1d334:	ba2e8ba3 	.word	0xba2e8ba3

0001d338 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1d338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d33c:	4607      	mov	r7, r0
   1d33e:	f003 fd17 	bl	20d70 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1d342:	4605      	mov	r5, r0
   1d344:	b140      	cbz	r0, 1d358 <net_buf_get+0x20>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1d346:	4e12      	ldr	r6, [pc, #72]	; (1d390 <net_buf_get+0x58>)
   1d348:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1d394 <net_buf_get+0x5c>
   1d34c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d34e:	7963      	ldrb	r3, [r4, #5]
   1d350:	f013 0301 	ands.w	r3, r3, #1
   1d354:	d103      	bne.n	1d35e <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1d356:	6023      	str	r3, [r4, #0]

	return buf;
}
   1d358:	4628      	mov	r0, r5
   1d35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d35e:	2200      	movs	r2, #0
   1d360:	2300      	movs	r3, #0
   1d362:	4638      	mov	r0, r7
   1d364:	f003 fd04 	bl	20d70 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1d368:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1d36a:	b950      	cbnz	r0, 1d382 <net_buf_get+0x4a>
   1d36c:	4631      	mov	r1, r6
   1d36e:	4640      	mov	r0, r8
   1d370:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   1d374:	f006 ff62 	bl	2423c <printk>
   1d378:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   1d37c:	4630      	mov	r0, r6
   1d37e:	f007 fa0f 	bl	247a0 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1d382:	7963      	ldrb	r3, [r4, #5]
   1d384:	f023 0301 	bic.w	r3, r3, #1
   1d388:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d38a:	6824      	ldr	r4, [r4, #0]
   1d38c:	e7df      	b.n	1d34e <net_buf_get+0x16>
   1d38e:	bf00      	nop
   1d390:	000311fa 	.word	0x000311fa
   1d394:	0002bced 	.word	0x0002bced

0001d398 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1d398:	b538      	push	{r3, r4, r5, lr}
   1d39a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1d39c:	4604      	mov	r4, r0
   1d39e:	b950      	cbnz	r0, 1d3b6 <net_buf_simple_reserve+0x1e>
   1d3a0:	490d      	ldr	r1, [pc, #52]	; (1d3d8 <net_buf_simple_reserve+0x40>)
   1d3a2:	480e      	ldr	r0, [pc, #56]	; (1d3dc <net_buf_simple_reserve+0x44>)
   1d3a4:	f240 12bb 	movw	r2, #443	; 0x1bb
   1d3a8:	f006 ff48 	bl	2423c <printk>
   1d3ac:	f240 11bb 	movw	r1, #443	; 0x1bb
   1d3b0:	4809      	ldr	r0, [pc, #36]	; (1d3d8 <net_buf_simple_reserve+0x40>)
   1d3b2:	f007 f9f5 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1d3b6:	88a3      	ldrh	r3, [r4, #4]
   1d3b8:	b153      	cbz	r3, 1d3d0 <net_buf_simple_reserve+0x38>
   1d3ba:	4907      	ldr	r1, [pc, #28]	; (1d3d8 <net_buf_simple_reserve+0x40>)
   1d3bc:	4807      	ldr	r0, [pc, #28]	; (1d3dc <net_buf_simple_reserve+0x44>)
   1d3be:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1d3c2:	f006 ff3b 	bl	2423c <printk>
   1d3c6:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1d3ca:	4803      	ldr	r0, [pc, #12]	; (1d3d8 <net_buf_simple_reserve+0x40>)
   1d3cc:	f007 f9e8 	bl	247a0 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1d3d0:	68a1      	ldr	r1, [r4, #8]
   1d3d2:	4429      	add	r1, r5
   1d3d4:	6021      	str	r1, [r4, #0]
}
   1d3d6:	bd38      	pop	{r3, r4, r5, pc}
   1d3d8:	000311fa 	.word	0x000311fa
   1d3dc:	0002bced 	.word	0x0002bced

0001d3e0 <net_buf_slist_put>:

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1d3e0:	b538      	push	{r3, r4, r5, lr}
   1d3e2:	460d      	mov	r5, r1
	struct net_buf *tail;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1d3e4:	4604      	mov	r4, r0
   1d3e6:	b950      	cbnz	r0, 1d3fe <net_buf_slist_put+0x1e>
   1d3e8:	4919      	ldr	r1, [pc, #100]	; (1d450 <net_buf_slist_put+0x70>)
   1d3ea:	481a      	ldr	r0, [pc, #104]	; (1d454 <net_buf_slist_put+0x74>)
   1d3ec:	f240 12c7 	movw	r2, #455	; 0x1c7
   1d3f0:	f006 ff24 	bl	2423c <printk>
   1d3f4:	f240 11c7 	movw	r1, #455	; 0x1c7
   1d3f8:	4815      	ldr	r0, [pc, #84]	; (1d450 <net_buf_slist_put+0x70>)
   1d3fa:	f007 f9d1 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1d3fe:	b955      	cbnz	r5, 1d416 <net_buf_slist_put+0x36>
   1d400:	4913      	ldr	r1, [pc, #76]	; (1d450 <net_buf_slist_put+0x70>)
   1d402:	4814      	ldr	r0, [pc, #80]	; (1d454 <net_buf_slist_put+0x74>)
   1d404:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1d408:	f006 ff18 	bl	2423c <printk>
   1d40c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1d410:	480f      	ldr	r0, [pc, #60]	; (1d450 <net_buf_slist_put+0x70>)
   1d412:	f007 f9c5 	bl	247a0 <assert_post_action>
{
   1d416:	462b      	mov	r3, r5

	for (tail = buf; tail->frags; tail = tail->frags) {
   1d418:	6819      	ldr	r1, [r3, #0]
   1d41a:	b981      	cbnz	r1, 1d43e <net_buf_slist_put+0x5e>
	__asm__ volatile(
   1d41c:	f04f 0220 	mov.w	r2, #32
   1d420:	f3ef 8111 	mrs	r1, BASEPRI
   1d424:	f382 8811 	msr	BASEPRI, r2
   1d428:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   1d42c:	6862      	ldr	r2, [r4, #4]
   1d42e:	b962      	cbnz	r2, 1d44a <net_buf_slist_put+0x6a>
	list->head = node;
   1d430:	6025      	str	r5, [r4, #0]
	list->tail = node;
   1d432:	6063      	str	r3, [r4, #4]
	__asm__ volatile(
   1d434:	f381 8811 	msr	BASEPRI, r1
   1d438:	f3bf 8f6f 	isb	sy
	}

	key = irq_lock();
	sys_slist_append_list(list, &buf->node, &tail->node);
	irq_unlock(key);
}
   1d43c:	bd38      	pop	{r3, r4, r5, pc}
		tail->flags |= NET_BUF_FRAGS;
   1d43e:	795a      	ldrb	r2, [r3, #5]
   1d440:	f042 0201 	orr.w	r2, r2, #1
   1d444:	715a      	strb	r2, [r3, #5]
   1d446:	460b      	mov	r3, r1
   1d448:	e7e6      	b.n	1d418 <net_buf_slist_put+0x38>
	parent->next = child;
   1d44a:	6015      	str	r5, [r2, #0]
   1d44c:	e7f1      	b.n	1d432 <net_buf_slist_put+0x52>
   1d44e:	bf00      	nop
   1d450:	000311fa 	.word	0x000311fa
   1d454:	0002bced 	.word	0x0002bced

0001d458 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf, *frag;
	unsigned int key;

	__ASSERT_NO_MSG(list);
   1d45c:	4604      	mov	r4, r0
   1d45e:	b950      	cbnz	r0, 1d476 <net_buf_slist_get+0x1e>
   1d460:	4929      	ldr	r1, [pc, #164]	; (1d508 <net_buf_slist_get+0xb0>)
   1d462:	482a      	ldr	r0, [pc, #168]	; (1d50c <net_buf_slist_get+0xb4>)
   1d464:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
   1d468:	f006 fee8 	bl	2423c <printk>
   1d46c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
   1d470:	4825      	ldr	r0, [pc, #148]	; (1d508 <net_buf_slist_get+0xb0>)
   1d472:	f007 f995 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   1d476:	f04f 0320 	mov.w	r3, #32
   1d47a:	f3ef 8211 	mrs	r2, BASEPRI
   1d47e:	f383 8811 	msr	BASEPRI, r3
   1d482:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1d486:	6826      	ldr	r6, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d488:	b12e      	cbz	r6, 1d496 <net_buf_slist_get+0x3e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d48a:	6861      	ldr	r1, [r4, #4]
   1d48c:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   1d48e:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d490:	428e      	cmp	r6, r1
	list->tail = node;
   1d492:	bf08      	it	eq
   1d494:	6063      	streq	r3, [r4, #4]
	__asm__ volatile(
   1d496:	f382 8811 	msr	BASEPRI, r2
   1d49a:	f3bf 8f6f 	isb	sy

	key = irq_lock();
	buf = (void *)sys_slist_get(list);
	irq_unlock(key);

	if (!buf) {
   1d49e:	b146      	cbz	r6, 1d4b2 <net_buf_slist_get+0x5a>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		key = irq_lock();
		frag->frags = (void *)sys_slist_get(list);
		irq_unlock(key);

		__ASSERT_NO_MSG(frag->frags);
   1d4a0:	4f19      	ldr	r7, [pc, #100]	; (1d508 <net_buf_slist_get+0xb0>)
   1d4a2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1d50c <net_buf_slist_get+0xb4>
   1d4a6:	4635      	mov	r5, r6
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d4a8:	796b      	ldrb	r3, [r5, #5]
   1d4aa:	f013 0301 	ands.w	r3, r3, #1
   1d4ae:	d103      	bne.n	1d4b8 <net_buf_slist_get+0x60>
		/* The fragments flag is only for list-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1d4b0:	602b      	str	r3, [r5, #0]

	return buf;
}
   1d4b2:	4630      	mov	r0, r6
   1d4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d4b8:	f04f 0320 	mov.w	r3, #32
   1d4bc:	f3ef 8011 	mrs	r0, BASEPRI
   1d4c0:	f383 8811 	msr	BASEPRI, r3
   1d4c4:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1d4c8:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1d4ca:	b12b      	cbz	r3, 1d4d8 <net_buf_slist_get+0x80>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d4cc:	6861      	ldr	r1, [r4, #4]
   1d4ce:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1d4d0:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d4d2:	428b      	cmp	r3, r1
	list->tail = node;
   1d4d4:	bf08      	it	eq
   1d4d6:	6062      	streq	r2, [r4, #4]
		frag->frags = (void *)sys_slist_get(list);
   1d4d8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1d4da:	f380 8811 	msr	BASEPRI, r0
   1d4de:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(frag->frags);
   1d4e2:	682b      	ldr	r3, [r5, #0]
   1d4e4:	b953      	cbnz	r3, 1d4fc <net_buf_slist_get+0xa4>
   1d4e6:	4639      	mov	r1, r7
   1d4e8:	4640      	mov	r0, r8
   1d4ea:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
   1d4ee:	f006 fea5 	bl	2423c <printk>
   1d4f2:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
   1d4f6:	4638      	mov	r0, r7
   1d4f8:	f007 f952 	bl	247a0 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1d4fc:	796b      	ldrb	r3, [r5, #5]
   1d4fe:	f023 0301 	bic.w	r3, r3, #1
   1d502:	716b      	strb	r3, [r5, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1d504:	682d      	ldr	r5, [r5, #0]
   1d506:	e7cf      	b.n	1d4a8 <net_buf_slist_get+0x50>
   1d508:	000311fa 	.word	0x000311fa
   1d50c:	0002bced 	.word	0x0002bced

0001d510 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1d510:	b538      	push	{r3, r4, r5, lr}
   1d512:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1d514:	4605      	mov	r5, r0
   1d516:	b950      	cbnz	r0, 1d52e <net_buf_put+0x1e>
   1d518:	4912      	ldr	r1, [pc, #72]	; (1d564 <net_buf_put+0x54>)
   1d51a:	4813      	ldr	r0, [pc, #76]	; (1d568 <net_buf_put+0x58>)
   1d51c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1d520:	f006 fe8c 	bl	2423c <printk>
   1d524:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1d528:	480e      	ldr	r0, [pc, #56]	; (1d564 <net_buf_put+0x54>)
   1d52a:	f007 f939 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1d52e:	b954      	cbnz	r4, 1d546 <net_buf_put+0x36>
   1d530:	490c      	ldr	r1, [pc, #48]	; (1d564 <net_buf_put+0x54>)
   1d532:	480d      	ldr	r0, [pc, #52]	; (1d568 <net_buf_put+0x58>)
   1d534:	f240 12f9 	movw	r2, #505	; 0x1f9
   1d538:	f006 fe80 	bl	2423c <printk>
   1d53c:	f240 11f9 	movw	r1, #505	; 0x1f9
   1d540:	4808      	ldr	r0, [pc, #32]	; (1d564 <net_buf_put+0x54>)
   1d542:	f007 f92d 	bl	247a0 <assert_post_action>
{
   1d546:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1d548:	6811      	ldr	r1, [r2, #0]
   1d54a:	b929      	cbnz	r1, 1d558 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1d54c:	4621      	mov	r1, r4
   1d54e:	4628      	mov	r0, r5
}
   1d550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1d554:	f003 bbb8 	b.w	20cc8 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1d558:	7953      	ldrb	r3, [r2, #5]
   1d55a:	f043 0301 	orr.w	r3, r3, #1
   1d55e:	7153      	strb	r3, [r2, #5]
   1d560:	460a      	mov	r2, r1
   1d562:	e7f1      	b.n	1d548 <net_buf_put+0x38>
   1d564:	000311fa 	.word	0x000311fa
   1d568:	0002bced 	.word	0x0002bced

0001d56c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1d570:	4604      	mov	r4, r0
   1d572:	b328      	cbz	r0, 1d5c0 <net_buf_unref+0x54>
   1d574:	4d1c      	ldr	r5, [pc, #112]	; (1d5e8 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d576:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1d578:	272c      	movs	r7, #44	; 0x2c
		if (--buf->ref > 0) {
   1d57a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d57c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1d580:	3b01      	subs	r3, #1
   1d582:	b2db      	uxtb	r3, r3
   1d584:	7123      	strb	r3, [r4, #4]
   1d586:	b9cb      	cbnz	r3, 1d5bc <net_buf_unref+0x50>
		if (buf->__buf) {
   1d588:	6921      	ldr	r1, [r4, #16]
   1d58a:	b159      	cbz	r1, 1d5a4 <net_buf_unref+0x38>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d58c:	7963      	ldrb	r3, [r4, #5]
   1d58e:	079b      	lsls	r3, r3, #30
   1d590:	d407      	bmi.n	1d5a2 <net_buf_unref+0x36>
	pool->alloc->cb->unref(buf, data);
   1d592:	79a3      	ldrb	r3, [r4, #6]
   1d594:	fb07 5303 	mla	r3, r7, r3, r5
   1d598:	4620      	mov	r0, r4
   1d59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d59c:	681b      	ldr	r3, [r3, #0]
   1d59e:	689b      	ldr	r3, [r3, #8]
   1d5a0:	4798      	blx	r3
			buf->__buf = NULL;
   1d5a2:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1d5a4:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d5a6:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1d5a8:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1d5ac:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d5ae:	6a1b      	ldr	r3, [r3, #32]
   1d5b0:	b19b      	cbz	r3, 1d5da <net_buf_unref+0x6e>
			pool->destroy(buf);
   1d5b2:	4620      	mov	r0, r4
   1d5b4:	4798      	blx	r3
	while (buf) {
   1d5b6:	4644      	mov	r4, r8
   1d5b8:	2c00      	cmp	r4, #0
   1d5ba:	d1de      	bne.n	1d57a <net_buf_unref+0xe>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1d5c0:	490a      	ldr	r1, [pc, #40]	; (1d5ec <net_buf_unref+0x80>)
   1d5c2:	480b      	ldr	r0, [pc, #44]	; (1d5f0 <net_buf_unref+0x84>)
   1d5c4:	f44f 7202 	mov.w	r2, #520	; 0x208
   1d5c8:	f006 fe38 	bl	2423c <printk>
   1d5cc:	f44f 7102 	mov.w	r1, #520	; 0x208
   1d5d0:	4806      	ldr	r0, [pc, #24]	; (1d5ec <net_buf_unref+0x80>)
}
   1d5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1d5d6:	f007 b8e3 	b.w	247a0 <assert_post_action>
   1d5da:	4621      	mov	r1, r4
   1d5dc:	fb00 5007 	mla	r0, r0, r7, r5
   1d5e0:	f00c fe2b 	bl	2a23a <k_queue_prepend>
   1d5e4:	e7e7      	b.n	1d5b6 <net_buf_unref+0x4a>
   1d5e6:	bf00      	nop
   1d5e8:	20000e2c 	.word	0x20000e2c
   1d5ec:	000311fa 	.word	0x000311fa
   1d5f0:	0002bced 	.word	0x0002bced

0001d5f4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1d5f4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1d5f6:	4604      	mov	r4, r0
   1d5f8:	b950      	cbnz	r0, 1d610 <net_buf_ref+0x1c>
   1d5fa:	4908      	ldr	r1, [pc, #32]	; (1d61c <net_buf_ref+0x28>)
   1d5fc:	4808      	ldr	r0, [pc, #32]	; (1d620 <net_buf_ref+0x2c>)
   1d5fe:	f240 2237 	movw	r2, #567	; 0x237
   1d602:	f006 fe1b 	bl	2423c <printk>
   1d606:	f240 2137 	movw	r1, #567	; 0x237
   1d60a:	4804      	ldr	r0, [pc, #16]	; (1d61c <net_buf_ref+0x28>)
   1d60c:	f007 f8c8 	bl	247a0 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1d610:	7923      	ldrb	r3, [r4, #4]
   1d612:	3301      	adds	r3, #1
   1d614:	7123      	strb	r3, [r4, #4]
	return buf;
}
   1d616:	4620      	mov	r0, r4
   1d618:	bd10      	pop	{r4, pc}
   1d61a:	bf00      	nop
   1d61c:	000311fa 	.word	0x000311fa
   1d620:	0002bced 	.word	0x0002bced

0001d624 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1d624:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1d626:	4604      	mov	r4, r0
   1d628:	b950      	cbnz	r0, 1d640 <net_buf_frag_last+0x1c>
   1d62a:	4908      	ldr	r1, [pc, #32]	; (1d64c <net_buf_frag_last+0x28>)
   1d62c:	4808      	ldr	r0, [pc, #32]	; (1d650 <net_buf_frag_last+0x2c>)
   1d62e:	f44f 721d 	mov.w	r2, #628	; 0x274
   1d632:	f006 fe03 	bl	2423c <printk>
   1d636:	f44f 711d 	mov.w	r1, #628	; 0x274
   1d63a:	4804      	ldr	r0, [pc, #16]	; (1d64c <net_buf_frag_last+0x28>)
   1d63c:	f007 f8b0 	bl	247a0 <assert_post_action>

	while (buf->frags) {
   1d640:	6823      	ldr	r3, [r4, #0]
   1d642:	b90b      	cbnz	r3, 1d648 <net_buf_frag_last+0x24>
		buf = buf->frags;
	}

	return buf;
}
   1d644:	4620      	mov	r0, r4
   1d646:	bd10      	pop	{r4, pc}
   1d648:	461c      	mov	r4, r3
   1d64a:	e7f9      	b.n	1d640 <net_buf_frag_last+0x1c>
   1d64c:	000311fa 	.word	0x000311fa
   1d650:	0002bced 	.word	0x0002bced

0001d654 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1d654:	b538      	push	{r3, r4, r5, lr}
   1d656:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1d658:	4604      	mov	r4, r0
   1d65a:	b950      	cbnz	r0, 1d672 <net_buf_frag_insert+0x1e>
   1d65c:	490f      	ldr	r1, [pc, #60]	; (1d69c <net_buf_frag_insert+0x48>)
   1d65e:	4810      	ldr	r0, [pc, #64]	; (1d6a0 <net_buf_frag_insert+0x4c>)
   1d660:	f240 227f 	movw	r2, #639	; 0x27f
   1d664:	f006 fdea 	bl	2423c <printk>
   1d668:	f240 217f 	movw	r1, #639	; 0x27f
   1d66c:	480b      	ldr	r0, [pc, #44]	; (1d69c <net_buf_frag_insert+0x48>)
   1d66e:	f007 f897 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1d672:	b955      	cbnz	r5, 1d68a <net_buf_frag_insert+0x36>
   1d674:	4909      	ldr	r1, [pc, #36]	; (1d69c <net_buf_frag_insert+0x48>)
   1d676:	480a      	ldr	r0, [pc, #40]	; (1d6a0 <net_buf_frag_insert+0x4c>)
   1d678:	f44f 7220 	mov.w	r2, #640	; 0x280
   1d67c:	f006 fdde 	bl	2423c <printk>
   1d680:	f44f 7120 	mov.w	r1, #640	; 0x280
   1d684:	4805      	ldr	r0, [pc, #20]	; (1d69c <net_buf_frag_insert+0x48>)
   1d686:	f007 f88b 	bl	247a0 <assert_post_action>

	if (parent->frags) {
   1d68a:	6823      	ldr	r3, [r4, #0]
   1d68c:	b123      	cbz	r3, 1d698 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   1d68e:	4628      	mov	r0, r5
   1d690:	f7ff ffc8 	bl	1d624 <net_buf_frag_last>
   1d694:	6823      	ldr	r3, [r4, #0]
   1d696:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1d698:	6025      	str	r5, [r4, #0]
}
   1d69a:	bd38      	pop	{r3, r4, r5, pc}
   1d69c:	000311fa 	.word	0x000311fa
   1d6a0:	0002bced 	.word	0x0002bced

0001d6a4 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1d6a4:	b538      	push	{r3, r4, r5, lr}
   1d6a6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   1d6a8:	460d      	mov	r5, r1
   1d6aa:	b951      	cbnz	r1, 1d6c2 <net_buf_frag_add+0x1e>
   1d6ac:	490c      	ldr	r1, [pc, #48]	; (1d6e0 <net_buf_frag_add+0x3c>)
   1d6ae:	480d      	ldr	r0, [pc, #52]	; (1d6e4 <net_buf_frag_add+0x40>)
   1d6b0:	f240 228b 	movw	r2, #651	; 0x28b
   1d6b4:	f006 fdc2 	bl	2423c <printk>
   1d6b8:	f240 218b 	movw	r1, #651	; 0x28b
   1d6bc:	4808      	ldr	r0, [pc, #32]	; (1d6e0 <net_buf_frag_add+0x3c>)
   1d6be:	f007 f86f 	bl	247a0 <assert_post_action>

	if (!head) {
   1d6c2:	b924      	cbnz	r4, 1d6ce <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   1d6c4:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1d6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1d6ca:	f7ff bf93 	b.w	1d5f4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1d6ce:	4620      	mov	r0, r4
   1d6d0:	f7ff ffa8 	bl	1d624 <net_buf_frag_last>
   1d6d4:	4629      	mov	r1, r5
   1d6d6:	f7ff ffbd 	bl	1d654 <net_buf_frag_insert>
}
   1d6da:	4620      	mov	r0, r4
   1d6dc:	bd38      	pop	{r3, r4, r5, pc}
   1d6de:	bf00      	nop
   1d6e0:	000311fa 	.word	0x000311fa
   1d6e4:	0002bced 	.word	0x0002bced

0001d6e8 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1d6e8:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1d6ea:	6882      	ldr	r2, [r0, #8]
   1d6ec:	6803      	ldr	r3, [r0, #0]
   1d6ee:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d6f0:	4299      	cmp	r1, r3
{
   1d6f2:	4604      	mov	r4, r0
   1d6f4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1d6f6:	d90a      	bls.n	1d70e <net_buf_simple_push+0x26>
   1d6f8:	4908      	ldr	r1, [pc, #32]	; (1d71c <net_buf_simple_push+0x34>)
   1d6fa:	4809      	ldr	r0, [pc, #36]	; (1d720 <net_buf_simple_push+0x38>)
   1d6fc:	f240 4204 	movw	r2, #1028	; 0x404
   1d700:	f006 fd9c 	bl	2423c <printk>
   1d704:	f240 4104 	movw	r1, #1028	; 0x404
   1d708:	4804      	ldr	r0, [pc, #16]	; (1d71c <net_buf_simple_push+0x34>)
   1d70a:	f007 f849 	bl	247a0 <assert_post_action>
	buf->data -= len;
   1d70e:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   1d710:	88a3      	ldrh	r3, [r4, #4]
	buf->data -= len;
   1d712:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1d714:	441d      	add	r5, r3
	buf->data -= len;
   1d716:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1d718:	80a5      	strh	r5, [r4, #4]
}
   1d71a:	bd38      	pop	{r3, r4, r5, pc}
   1d71c:	000311fa 	.word	0x000311fa
   1d720:	0002bced 	.word	0x0002bced

0001d724 <net_buf_simple_pull>:
{
   1d724:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1d726:	8883      	ldrh	r3, [r0, #4]
   1d728:	428b      	cmp	r3, r1
{
   1d72a:	4604      	mov	r4, r0
   1d72c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   1d72e:	d20a      	bcs.n	1d746 <net_buf_simple_pull+0x22>
   1d730:	4908      	ldr	r1, [pc, #32]	; (1d754 <net_buf_simple_pull+0x30>)
   1d732:	4809      	ldr	r0, [pc, #36]	; (1d758 <net_buf_simple_pull+0x34>)
   1d734:	f240 4264 	movw	r2, #1124	; 0x464
   1d738:	f006 fd80 	bl	2423c <printk>
   1d73c:	f240 4164 	movw	r1, #1124	; 0x464
   1d740:	4804      	ldr	r0, [pc, #16]	; (1d754 <net_buf_simple_pull+0x30>)
   1d742:	f007 f82d 	bl	247a0 <assert_post_action>
	buf->len -= len;
   1d746:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1d748:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1d74a:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   1d74c:	4428      	add	r0, r5
	buf->len -= len;
   1d74e:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   1d750:	6020      	str	r0, [r4, #0]
}
   1d752:	bd38      	pop	{r3, r4, r5, pc}
   1d754:	000311fa 	.word	0x000311fa
   1d758:	0002bced 	.word	0x0002bced

0001d75c <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   1d75c:	8883      	ldrh	r3, [r0, #4]
   1d75e:	428b      	cmp	r3, r1
{
   1d760:	b570      	push	{r4, r5, r6, lr}
   1d762:	4604      	mov	r4, r0
   1d764:	460d      	mov	r5, r1
	void *data = buf->data;
   1d766:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1d768:	d20a      	bcs.n	1d780 <net_buf_simple_pull_mem+0x24>
   1d76a:	4909      	ldr	r1, [pc, #36]	; (1d790 <net_buf_simple_pull_mem+0x34>)
   1d76c:	4809      	ldr	r0, [pc, #36]	; (1d794 <net_buf_simple_pull_mem+0x38>)
   1d76e:	f44f 628e 	mov.w	r2, #1136	; 0x470
   1d772:	f006 fd63 	bl	2423c <printk>
   1d776:	f44f 618e 	mov.w	r1, #1136	; 0x470
   1d77a:	4805      	ldr	r0, [pc, #20]	; (1d790 <net_buf_simple_pull_mem+0x34>)
   1d77c:	f007 f810 	bl	247a0 <assert_post_action>
	buf->len -= len;
   1d780:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1d782:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1d784:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1d786:	4429      	add	r1, r5
	buf->len -= len;
   1d788:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   1d78a:	6021      	str	r1, [r4, #0]
}
   1d78c:	4630      	mov	r0, r6
   1d78e:	bd70      	pop	{r4, r5, r6, pc}
   1d790:	000311fa 	.word	0x000311fa
   1d794:	0002bced 	.word	0x0002bced

0001d798 <net_buf_simple_add>:
{
   1d798:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   1d79a:	6803      	ldr	r3, [r0, #0]
   1d79c:	8886      	ldrh	r6, [r0, #4]
   1d79e:	4604      	mov	r4, r0
   1d7a0:	460d      	mov	r5, r1
   1d7a2:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1d7a4:	f00c f8f3 	bl	2998e <net_buf_simple_tailroom>
   1d7a8:	4288      	cmp	r0, r1
   1d7aa:	d20a      	bcs.n	1d7c2 <net_buf_simple_add+0x2a>
   1d7ac:	4907      	ldr	r1, [pc, #28]	; (1d7cc <net_buf_simple_add+0x34>)
   1d7ae:	4808      	ldr	r0, [pc, #32]	; (1d7d0 <net_buf_simple_add+0x38>)
   1d7b0:	f240 3215 	movw	r2, #789	; 0x315
   1d7b4:	f006 fd42 	bl	2423c <printk>
   1d7b8:	f240 3115 	movw	r1, #789	; 0x315
   1d7bc:	4803      	ldr	r0, [pc, #12]	; (1d7cc <net_buf_simple_add+0x34>)
   1d7be:	f006 ffef 	bl	247a0 <assert_post_action>
	buf->len += len;
   1d7c2:	88a3      	ldrh	r3, [r4, #4]
   1d7c4:	441d      	add	r5, r3
   1d7c6:	80a5      	strh	r5, [r4, #4]
}
   1d7c8:	4630      	mov	r0, r6
   1d7ca:	bd70      	pop	{r4, r5, r6, pc}
   1d7cc:	000311fa 	.word	0x000311fa
   1d7d0:	0002bced 	.word	0x0002bced

0001d7d4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1d7d4:	b570      	push	{r4, r5, r6, lr}
   1d7d6:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d7d8:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1d7da:	460d      	mov	r5, r1
   1d7dc:	b941      	cbnz	r1, 1d7f0 <gpio_nrfx_manage_callback+0x1c>
   1d7de:	491e      	ldr	r1, [pc, #120]	; (1d858 <gpio_nrfx_manage_callback+0x84>)
   1d7e0:	481e      	ldr	r0, [pc, #120]	; (1d85c <gpio_nrfx_manage_callback+0x88>)
   1d7e2:	2224      	movs	r2, #36	; 0x24
   1d7e4:	f006 fd2a 	bl	2423c <printk>
   1d7e8:	2124      	movs	r1, #36	; 0x24
   1d7ea:	481b      	ldr	r0, [pc, #108]	; (1d858 <gpio_nrfx_manage_callback+0x84>)
   1d7ec:	f006 ffd8 	bl	247a0 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1d7f0:	686b      	ldr	r3, [r5, #4]
   1d7f2:	b943      	cbnz	r3, 1d806 <gpio_nrfx_manage_callback+0x32>
   1d7f4:	4918      	ldr	r1, [pc, #96]	; (1d858 <gpio_nrfx_manage_callback+0x84>)
   1d7f6:	4819      	ldr	r0, [pc, #100]	; (1d85c <gpio_nrfx_manage_callback+0x88>)
   1d7f8:	2225      	movs	r2, #37	; 0x25
   1d7fa:	f006 fd1f 	bl	2423c <printk>
   1d7fe:	2125      	movs	r1, #37	; 0x25
   1d800:	4815      	ldr	r0, [pc, #84]	; (1d858 <gpio_nrfx_manage_callback+0x84>)
   1d802:	f006 ffcd 	bl	247a0 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   1d806:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1d808:	b15b      	cbz	r3, 1d822 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d80a:	2200      	movs	r2, #0
   1d80c:	429d      	cmp	r5, r3
   1d80e:	d113      	bne.n	1d838 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
   1d810:	682b      	ldr	r3, [r5, #0]
   1d812:	b95a      	cbnz	r2, 1d82c <gpio_nrfx_manage_callback+0x58>
   1d814:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   1d816:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d818:	4295      	cmp	r5, r2
   1d81a:	d100      	bne.n	1d81e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   1d81c:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   1d81e:	2300      	movs	r3, #0
   1d820:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d822:	b976      	cbnz	r6, 1d842 <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d824:	2000      	movs	r0, #0
				     callback, set);
}
   1d826:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d828:	460b      	mov	r3, r1
   1d82a:	e7ef      	b.n	1d80c <gpio_nrfx_manage_callback+0x38>
	parent->next = child;
   1d82c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d82e:	68a3      	ldr	r3, [r4, #8]
   1d830:	429d      	cmp	r5, r3
	list->tail = node;
   1d832:	bf08      	it	eq
   1d834:	60a2      	streq	r2, [r4, #8]
   1d836:	e7f2      	b.n	1d81e <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d838:	6819      	ldr	r1, [r3, #0]
	return node->next;
   1d83a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d83c:	2900      	cmp	r1, #0
   1d83e:	d1f3      	bne.n	1d828 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1d840:	b13e      	cbz	r6, 1d852 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
   1d842:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1d844:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d846:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   1d848:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d84a:	2800      	cmp	r0, #0
   1d84c:	d1ea      	bne.n	1d824 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1d84e:	60a5      	str	r5, [r4, #8]
   1d850:	e7e9      	b.n	1d826 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   1d852:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d856:	e7e6      	b.n	1d826 <gpio_nrfx_manage_callback+0x52>
   1d858:	00031226 	.word	0x00031226
   1d85c:	0002bced 	.word	0x0002bced

0001d860 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1d860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d864:	6804      	ldr	r4, [r0, #0]
{
   1d866:	4688      	mov	r8, r1
   1d868:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d86a:	b1dc      	cbz	r4, 1d8a4 <gpio_fire_callbacks+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d86c:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   1d86e:	4f0e      	ldr	r7, [pc, #56]	; (1d8a8 <gpio_fire_callbacks+0x48>)
   1d870:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1d8ac <gpio_fire_callbacks+0x4c>
		if (cb->pin_mask & pins) {
   1d874:	68a3      	ldr	r3, [r4, #8]
   1d876:	421e      	tst	r6, r3
   1d878:	d010      	beq.n	1d89c <gpio_fire_callbacks+0x3c>
			__ASSERT(cb->handler, "No callback handler!");
   1d87a:	6863      	ldr	r3, [r4, #4]
   1d87c:	b943      	cbnz	r3, 1d890 <gpio_fire_callbacks+0x30>
   1d87e:	4639      	mov	r1, r7
   1d880:	4648      	mov	r0, r9
   1d882:	2245      	movs	r2, #69	; 0x45
   1d884:	f006 fcda 	bl	2423c <printk>
   1d888:	2145      	movs	r1, #69	; 0x45
   1d88a:	4638      	mov	r0, r7
   1d88c:	f006 ff88 	bl	247a0 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1d890:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1d894:	4621      	mov	r1, r4
   1d896:	4032      	ands	r2, r6
   1d898:	4640      	mov	r0, r8
   1d89a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d89c:	b115      	cbz	r5, 1d8a4 <gpio_fire_callbacks+0x44>
   1d89e:	462c      	mov	r4, r5
   1d8a0:	682d      	ldr	r5, [r5, #0]
   1d8a2:	e7e7      	b.n	1d874 <gpio_fire_callbacks+0x14>
		}
	}
}
   1d8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d8a8:	00031226 	.word	0x00031226
   1d8ac:	0002bced 	.word	0x0002bced

0001d8b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d8b0:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1d8b2:	0953      	lsrs	r3, r2, #5
{
   1d8b4:	b510      	push	{r4, lr}
   1d8b6:	4604      	mov	r4, r0
    switch (port)
   1d8b8:	d02a      	beq.n	1d910 <nrf_gpio_pin_port_decode+0x60>
   1d8ba:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1d8bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d8c0:	bf18      	it	ne
   1d8c2:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   1d8c4:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1d8c8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d8ca:	07db      	lsls	r3, r3, #31
   1d8cc:	d40a      	bmi.n	1d8e4 <nrf_gpio_pin_port_decode+0x34>
   1d8ce:	4913      	ldr	r1, [pc, #76]	; (1d91c <nrf_gpio_pin_port_decode+0x6c>)
   1d8d0:	4813      	ldr	r0, [pc, #76]	; (1d920 <nrf_gpio_pin_port_decode+0x70>)
   1d8d2:	f240 221a 	movw	r2, #538	; 0x21a
   1d8d6:	f006 fcb1 	bl	2423c <printk>
   1d8da:	f240 211a 	movw	r1, #538	; 0x21a
   1d8de:	480f      	ldr	r0, [pc, #60]	; (1d91c <nrf_gpio_pin_port_decode+0x6c>)
   1d8e0:	f006 ff5e 	bl	247a0 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   1d8e4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1d8e6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d8ea:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1d8ec:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d8ee:	d00c      	beq.n	1d90a <nrf_gpio_pin_port_decode+0x5a>
   1d8f0:	2b01      	cmp	r3, #1
   1d8f2:	d010      	beq.n	1d916 <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   1d8f4:	4909      	ldr	r1, [pc, #36]	; (1d91c <nrf_gpio_pin_port_decode+0x6c>)
   1d8f6:	480a      	ldr	r0, [pc, #40]	; (1d920 <nrf_gpio_pin_port_decode+0x70>)
   1d8f8:	f240 221f 	movw	r2, #543	; 0x21f
   1d8fc:	f006 fc9e 	bl	2423c <printk>
   1d900:	f240 211f 	movw	r1, #543	; 0x21f
   1d904:	4805      	ldr	r0, [pc, #20]	; (1d91c <nrf_gpio_pin_port_decode+0x6c>)
   1d906:	f006 ff4b 	bl	247a0 <assert_post_action>
        case 0: return NRF_P0;
   1d90a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1d90e:	bd10      	pop	{r4, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   1d910:	f04f 33ff 	mov.w	r3, #4294967295
   1d914:	e7d6      	b.n	1d8c4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1d916:	4803      	ldr	r0, [pc, #12]	; (1d924 <nrf_gpio_pin_port_decode+0x74>)
   1d918:	e7f9      	b.n	1d90e <nrf_gpio_pin_port_decode+0x5e>
   1d91a:	bf00      	nop
   1d91c:	00031253 	.word	0x00031253
   1d920:	0002bced 	.word	0x0002bced
   1d924:	50000300 	.word	0x50000300

0001d928 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d928:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d92a:	4b09      	ldr	r3, [pc, #36]	; (1d950 <gpio_nrfx_init+0x28>)
   1d92c:	781a      	ldrb	r2, [r3, #0]
   1d92e:	b96a      	cbnz	r2, 1d94c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1d930:	2101      	movs	r1, #1
   1d932:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d934:	2006      	movs	r0, #6
   1d936:	2105      	movs	r1, #5
   1d938:	f7e8 fdce 	bl	64d8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d93c:	2006      	movs	r0, #6
   1d93e:	f7e8 fd99 	bl	6474 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d942:	4b04      	ldr	r3, [pc, #16]	; (1d954 <gpio_nrfx_init+0x2c>)
   1d944:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d948:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d94c:	2000      	movs	r0, #0
   1d94e:	bd08      	pop	{r3, pc}
   1d950:	200036f1 	.word	0x200036f1
   1d954:	40006000 	.word	0x40006000

0001d958 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d958:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   1d95c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d960:	4680      	mov	r8, r0
   1d962:	460e      	mov	r6, r1
   1d964:	4617      	mov	r7, r2
   1d966:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   1d968:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   1d96a:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d96e:	f040 80a6 	bne.w	1dabe <gpio_nrfx_pin_interrupt_configure+0x166>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d972:	6843      	ldr	r3, [r0, #4]
   1d974:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d976:	a801      	add	r0, sp, #4
   1d978:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   1d97c:	9301      	str	r3, [sp, #4]
   1d97e:	f7ff ff97 	bl	1d8b0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d982:	9b01      	ldr	r3, [sp, #4]
   1d984:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d988:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d98c:	07d8      	lsls	r0, r3, #31
   1d98e:	f100 80b7 	bmi.w	1db00 <gpio_nrfx_pin_interrupt_configure+0x1a8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d992:	2101      	movs	r1, #1
   1d994:	68e3      	ldr	r3, [r4, #12]
   1d996:	40b1      	lsls	r1, r6
   1d998:	4319      	orrs	r1, r3
   1d99a:	6963      	ldr	r3, [r4, #20]
   1d99c:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d99e:	2101      	movs	r1, #1
   1d9a0:	40b1      	lsls	r1, r6
   1d9a2:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   1d9a6:	bf0c      	ite	eq
   1d9a8:	430b      	orreq	r3, r1
   1d9aa:	438b      	bicne	r3, r1
   1d9ac:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d9ae:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1d9b0:	4a55      	ldr	r2, [pc, #340]	; (1db08 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
	struct gpio_nrfx_data *data = get_port_data(port);
   1d9b2:	f8d8 700c 	ldr.w	r7, [r8, #12]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d9b6:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   1d9ba:	bf0c      	ite	eq
   1d9bc:	430b      	orreq	r3, r1
   1d9be:	438b      	bicne	r3, r1
   1d9c0:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d9c2:	6923      	ldr	r3, [r4, #16]
   1d9c4:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   1d9c8:	bf0c      	ite	eq
   1d9ca:	4319      	orreq	r1, r3
   1d9cc:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d9d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d9d4:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d9d6:	7a1b      	ldrb	r3, [r3, #8]
   1d9d8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   1d9dc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d9e0:	2000      	movs	r0, #0
   1d9e2:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d9e4:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1d9e8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1d9ec:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d9f0:	428d      	cmp	r5, r1
   1d9f2:	d16f      	bne.n	1dad4 <gpio_nrfx_pin_interrupt_configure+0x17c>
		    && (intenset & BIT(i))) {
   1d9f4:	fa23 f100 	lsr.w	r1, r3, r0
   1d9f8:	07c9      	lsls	r1, r1, #31
   1d9fa:	d56b      	bpl.n	1dad4 <gpio_nrfx_pin_interrupt_configure+0x17c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d9fc:	0083      	lsls	r3, r0, #2
   1d9fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1da02:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1da06:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1da0a:	f021 0101 	bic.w	r1, r1, #1
   1da0e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1da12:	2301      	movs	r3, #1
   1da14:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1da16:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1da1a:	b2c0      	uxtb	r0, r0
   1da1c:	f001 ffe8 	bl	1f9f0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1da20:	4628      	mov	r0, r5
   1da22:	2100      	movs	r1, #0
   1da24:	f00c f82f 	bl	29a86 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1da28:	68f8      	ldr	r0, [r7, #12]
   1da2a:	40f0      	lsrs	r0, r6
   1da2c:	f010 0001 	ands.w	r0, r0, #1
   1da30:	d042      	beq.n	1dab8 <gpio_nrfx_pin_interrupt_configure+0x160>
		if (data->trig_edge & BIT(pin)) {
   1da32:	6978      	ldr	r0, [r7, #20]
   1da34:	40f0      	lsrs	r0, r6
   1da36:	f010 0401 	ands.w	r4, r0, #1
   1da3a:	d054      	beq.n	1dae6 <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
   1da3c:	69bb      	ldr	r3, [r7, #24]
   1da3e:	40f3      	lsrs	r3, r6
   1da40:	07db      	lsls	r3, r3, #31
   1da42:	d44b      	bmi.n	1dadc <gpio_nrfx_pin_interrupt_configure+0x184>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1da44:	693b      	ldr	r3, [r7, #16]
   1da46:	fa23 f606 	lsr.w	r6, r3, r6
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   1da4a:	f016 0f01 	tst.w	r6, #1
   1da4e:	bf14      	ite	ne
   1da50:	2401      	movne	r4, #1
   1da52:	2402      	moveq	r4, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1da54:	a801      	add	r0, sp, #4
   1da56:	f001 ffed 	bl	1fa34 <nrfx_gpiote_channel_alloc>
   1da5a:	4b2c      	ldr	r3, [pc, #176]	; (1db0c <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   1da5c:	4298      	cmp	r0, r3
   1da5e:	d13f      	bne.n	1dae0 <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1da60:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1da64:	008b      	lsls	r3, r1, #2
   1da66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1da6a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1da6e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1da70:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1da74:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1da78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1da7c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1da80:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1da84:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1da88:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1da8a:	008a      	lsls	r2, r1, #2
   1da8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1da90:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1da94:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da98:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1da9a:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da9e:	6010      	str	r0, [r2, #0]
   1daa0:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1daa2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1daa6:	f042 0201 	orr.w	r2, r2, #1
   1daaa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1daae:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   1dab0:	4a15      	ldr	r2, [pc, #84]	; (1db08 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1dab2:	408b      	lsls	r3, r1
   1dab4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1dab8:	b003      	add	sp, #12
   1daba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1dabe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1dac2:	f47f af66 	bne.w	1d992 <gpio_nrfx_pin_interrupt_configure+0x3a>
   1dac6:	2101      	movs	r1, #1
   1dac8:	fa01 f306 	lsl.w	r3, r1, r6
   1dacc:	68e1      	ldr	r1, [r4, #12]
   1dace:	ea21 0103 	bic.w	r1, r1, r3
   1dad2:	e762      	b.n	1d99a <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1dad4:	3001      	adds	r0, #1
   1dad6:	2808      	cmp	r0, #8
   1dad8:	d184      	bne.n	1d9e4 <gpio_nrfx_pin_interrupt_configure+0x8c>
   1dada:	e7a1      	b.n	1da20 <gpio_nrfx_pin_interrupt_configure+0xc8>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1dadc:	2403      	movs	r4, #3
   1dade:	e7b9      	b.n	1da54 <gpio_nrfx_pin_interrupt_configure+0xfc>
		return -ENODEV;
   1dae0:	f06f 0012 	mvn.w	r0, #18
   1dae4:	e7e8      	b.n	1dab8 <gpio_nrfx_pin_interrupt_configure+0x160>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1dae6:	693b      	ldr	r3, [r7, #16]
   1dae8:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
   1daec:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1daf0:	4628      	mov	r0, r5
   1daf2:	bf0c      	ite	eq
   1daf4:	2103      	moveq	r1, #3
   1daf6:	2102      	movne	r1, #2
   1daf8:	f00b ffc5 	bl	29a86 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1dafc:	4620      	mov	r0, r4
   1dafe:	e7db      	b.n	1dab8 <gpio_nrfx_pin_interrupt_configure+0x160>
		return -ENOTSUP;
   1db00:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1db04:	e7d8      	b.n	1dab8 <gpio_nrfx_pin_interrupt_configure+0x160>
   1db06:	bf00      	nop
   1db08:	40006000 	.word	0x40006000
   1db0c:	0bad0000 	.word	0x0bad0000

0001db10 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1db10:	4b2e      	ldr	r3, [pc, #184]	; (1dbcc <gpio_nrfx_config+0xbc>)
   1db12:	4013      	ands	r3, r2
   1db14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
{
   1db18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1db1a:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1db1c:	d045      	beq.n	1dbaa <gpio_nrfx_config+0x9a>
   1db1e:	d808      	bhi.n	1db32 <gpio_nrfx_config+0x22>
   1db20:	2b02      	cmp	r3, #2
   1db22:	d044      	beq.n	1dbae <gpio_nrfx_config+0x9e>
   1db24:	2b06      	cmp	r3, #6
   1db26:	d044      	beq.n	1dbb2 <gpio_nrfx_config+0xa2>
   1db28:	2b00      	cmp	r3, #0
   1db2a:	d042      	beq.n	1dbb2 <gpio_nrfx_config+0xa2>
		return -EINVAL;
   1db2c:	f06f 0015 	mvn.w	r0, #21
   1db30:	e039      	b.n	1dba6 <gpio_nrfx_config+0x96>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1db32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1db36:	d03e      	beq.n	1dbb6 <gpio_nrfx_config+0xa6>
   1db38:	d804      	bhi.n	1db44 <gpio_nrfx_config+0x34>
   1db3a:	4c25      	ldr	r4, [pc, #148]	; (1dbd0 <gpio_nrfx_config+0xc0>)
   1db3c:	42a3      	cmp	r3, r4
   1db3e:	d1f5      	bne.n	1db2c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0D1;
   1db40:	2407      	movs	r4, #7
   1db42:	e006      	b.n	1db52 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1db44:	4c23      	ldr	r4, [pc, #140]	; (1dbd4 <gpio_nrfx_config+0xc4>)
   1db46:	42a3      	cmp	r3, r4
   1db48:	d037      	beq.n	1dbba <gpio_nrfx_config+0xaa>
   1db4a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1db4e:	d1ed      	bne.n	1db2c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0H1;
   1db50:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   1db52:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1db54:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   1db58:	bf54      	ite	pl
   1db5a:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1db5e:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1db60:	f3c3 2600 	ubfx	r6, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1db64:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1db66:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1db6a:	d507      	bpl.n	1db7c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1db6c:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1db6e:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1db72:	d524      	bpl.n	1dbbe <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1db74:	2301      	movs	r3, #1
   1db76:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1db78:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1db7c:	7a03      	ldrb	r3, [r0, #8]
   1db7e:	f001 011f 	and.w	r1, r1, #31
   1db82:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1db86:	a801      	add	r0, sp, #4
   1db88:	9101      	str	r1, [sp, #4]
   1db8a:	f7ff fe91 	bl	1d8b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1db8e:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1db90:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   1db94:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1db98:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1db9c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1dba0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   1dba4:	2000      	movs	r0, #0
}
   1dba6:	b003      	add	sp, #12
   1dba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0S1;
   1dbaa:	2401      	movs	r4, #1
   1dbac:	e7d1      	b.n	1db52 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   1dbae:	2404      	movs	r4, #4
   1dbb0:	e7cf      	b.n	1db52 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0S1;
   1dbb2:	461c      	mov	r4, r3
   1dbb4:	e7cd      	b.n	1db52 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0H1;
   1dbb6:	2402      	movs	r4, #2
   1dbb8:	e7cb      	b.n	1db52 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   1dbba:	2405      	movs	r4, #5
   1dbbc:	e7c9      	b.n	1db52 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1dbbe:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1dbc0:	bf42      	ittt	mi
   1dbc2:	2201      	movmi	r2, #1
   1dbc4:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1dbc6:	f8cc 250c 	strmi.w	r2, [ip, #1292]	; 0x50c
   1dbca:	e7d7      	b.n	1db7c <gpio_nrfx_config+0x6c>
   1dbcc:	00f00006 	.word	0x00f00006
   1dbd0:	00100006 	.word	0x00100006
   1dbd4:	00400002 	.word	0x00400002

0001dbd8 <gpiote_event_handler>:
{
   1dbd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1dbda:	2600      	movs	r6, #0
   1dbdc:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dbe0:	4d26      	ldr	r5, [pc, #152]	; (1dc7c <gpiote_event_handler+0xa4>)
   1dbe2:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   1dbe4:	b14c      	cbz	r4, 1dbfa <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1dbe6:	4826      	ldr	r0, [pc, #152]	; (1dc80 <gpiote_event_handler+0xa8>)
   1dbe8:	f00b ff60 	bl	29aac <check_level_trigger_pins>
		fired_triggers[0] =
   1dbec:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1dbee:	4825      	ldr	r0, [pc, #148]	; (1dc84 <gpiote_event_handler+0xac>)
   1dbf0:	f00b ff5c 	bl	29aac <check_level_trigger_pins>
		fired_triggers[1] =
   1dbf4:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dbf6:	602e      	str	r6, [r5, #0]
   1dbf8:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   1dbfa:	4d23      	ldr	r5, [pc, #140]	; (1dc88 <gpiote_event_handler+0xb0>)
{
   1dbfc:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1dbfe:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dc00:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1dc02:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1dc06:	fa06 f102 	lsl.w	r1, r6, r2
   1dc0a:	4219      	tst	r1, r3
   1dc0c:	d01b      	beq.n	1dc46 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc0e:	0091      	lsls	r1, r2, #2
   1dc10:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1dc14:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1dc18:	680b      	ldr	r3, [r1, #0]
   1dc1a:	b1a3      	cbz	r3, 1dc46 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1dc1c:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1dc20:	af02      	add	r7, sp, #8
   1dc22:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dc26:	f8c1 c000 	str.w	ip, [r1]
   1dc2a:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1dc2e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1dc32:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1dc36:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1dc3a:	fa06 f303 	lsl.w	r3, r6, r3
   1dc3e:	433b      	orrs	r3, r7
   1dc40:	f840 3c08 	str.w	r3, [r0, #-8]
   1dc44:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1dc46:	3201      	adds	r2, #1
   1dc48:	2a08      	cmp	r2, #8
   1dc4a:	d1da      	bne.n	1dc02 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   1dc4c:	9a00      	ldr	r2, [sp, #0]
   1dc4e:	b11a      	cbz	r2, 1dc58 <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   1dc50:	490b      	ldr	r1, [pc, #44]	; (1dc80 <gpiote_event_handler+0xa8>)
   1dc52:	480e      	ldr	r0, [pc, #56]	; (1dc8c <gpiote_event_handler+0xb4>)
   1dc54:	f7ff fe04 	bl	1d860 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1dc58:	9a01      	ldr	r2, [sp, #4]
   1dc5a:	b11a      	cbz	r2, 1dc64 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   1dc5c:	4909      	ldr	r1, [pc, #36]	; (1dc84 <gpiote_event_handler+0xac>)
   1dc5e:	480c      	ldr	r0, [pc, #48]	; (1dc90 <gpiote_event_handler+0xb8>)
   1dc60:	f7ff fdfe 	bl	1d860 <gpio_fire_callbacks>
	if (port_event) {
   1dc64:	b144      	cbz	r4, 1dc78 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1dc66:	4806      	ldr	r0, [pc, #24]	; (1dc80 <gpiote_event_handler+0xa8>)
   1dc68:	f00b ff49 	bl	29afe <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1dc6c:	4805      	ldr	r0, [pc, #20]	; (1dc84 <gpiote_event_handler+0xac>)
}
   1dc6e:	b003      	add	sp, #12
   1dc70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1dc74:	f00b bf43 	b.w	29afe <cfg_level_pins>
}
   1dc78:	b003      	add	sp, #12
   1dc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc7c:	4000617c 	.word	0x4000617c
   1dc80:	20000c70 	.word	0x20000c70
   1dc84:	20000c80 	.word	0x20000c80
   1dc88:	40006000 	.word	0x40006000
   1dc8c:	20003314 	.word	0x20003314
   1dc90:	20003330 	.word	0x20003330

0001dc94 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1dc94:	b510      	push	{r4, lr}
   1dc96:	4604      	mov	r4, r0
   1dc98:	2200      	movs	r2, #0
   1dc9a:	2101      	movs	r1, #1
   1dc9c:	2003      	movs	r0, #3
   1dc9e:	f7e8 fc1b 	bl	64d8 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1dca2:	6860      	ldr	r0, [r4, #4]
   1dca4:	68e3      	ldr	r3, [r4, #12]
   1dca6:	4a09      	ldr	r2, [pc, #36]	; (1dccc <twi_0_init+0x38>)
   1dca8:	f100 0108 	add.w	r1, r0, #8
   1dcac:	f002 f886 	bl	1fdbc <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1dcb0:	4b07      	ldr	r3, [pc, #28]	; (1dcd0 <twi_0_init+0x3c>)
   1dcb2:	4298      	cmp	r0, r3
   1dcb4:	d007      	beq.n	1dcc6 <twi_0_init+0x32>
		LOG_ERR("Failed to initialize device: %s",
   1dcb6:	4807      	ldr	r0, [pc, #28]	; (1dcd4 <twi_0_init+0x40>)
   1dcb8:	6822      	ldr	r2, [r4, #0]
   1dcba:	2145      	movs	r1, #69	; 0x45
   1dcbc:	f006 fabe 	bl	2423c <printk>
		return -EBUSY;
   1dcc0:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   1dcc4:	bd10      	pop	{r4, pc}
	return 0;
   1dcc6:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   1dcc8:	e7fc      	b.n	1dcc4 <twi_0_init+0x30>
   1dcca:	bf00      	nop
   1dccc:	0001dd19 	.word	0x0001dd19
   1dcd0:	0bad0000 	.word	0x0bad0000
   1dcd4:	00031303 	.word	0x00031303

0001dcd8 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1dcd8:	07ca      	lsls	r2, r1, #31
{
   1dcda:	b508      	push	{r3, lr}
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
   1dcdc:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1dcde:	d409      	bmi.n	1dcf4 <i2c_nrfx_twi_configure+0x1c>
	switch (I2C_SPEED_GET(dev_config)) {
   1dce0:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1dce4:	2a01      	cmp	r2, #1
   1dce6:	d008      	beq.n	1dcfa <i2c_nrfx_twi_configure+0x22>
   1dce8:	2a02      	cmp	r2, #2
   1dcea:	d00f      	beq.n	1dd0c <i2c_nrfx_twi_configure+0x34>
		LOG_ERR("unsupported speed");
   1dcec:	2145      	movs	r1, #69	; 0x45
   1dcee:	4809      	ldr	r0, [pc, #36]	; (1dd14 <i2c_nrfx_twi_configure+0x3c>)
   1dcf0:	f006 faa4 	bl	2423c <printk>
		return -EINVAL;
   1dcf4:	f06f 0015 	mvn.w	r0, #21
   1dcf8:	e007      	b.n	1dd0a <i2c_nrfx_twi_configure+0x32>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1dcfa:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1dcfc:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1dd00:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1dd04:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1dd06:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1dd08:	6359      	str	r1, [r3, #52]	; 0x34
}
   1dd0a:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1dd0c:	681b      	ldr	r3, [r3, #0]
   1dd0e:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1dd12:	e7f5      	b.n	1dd00 <i2c_nrfx_twi_configure+0x28>
   1dd14:	0003128a 	.word	0x0003128a

0001dd18 <event_handler>:
	switch (p_event->type) {
   1dd18:	7803      	ldrb	r3, [r0, #0]
   1dd1a:	2b01      	cmp	r3, #1
   1dd1c:	d00a      	beq.n	1dd34 <event_handler+0x1c>
   1dd1e:	b11b      	cbz	r3, 1dd28 <event_handler+0x10>
   1dd20:	2b02      	cmp	r3, #2
   1dd22:	d009      	beq.n	1dd38 <event_handler+0x20>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1dd24:	4b05      	ldr	r3, [pc, #20]	; (1dd3c <event_handler+0x24>)
   1dd26:	e000      	b.n	1dd2a <event_handler+0x12>
		dev_data->res = NRFX_SUCCESS;
   1dd28:	4b05      	ldr	r3, [pc, #20]	; (1dd40 <event_handler+0x28>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1dd2a:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1dd2c:	f101 0018 	add.w	r0, r1, #24
   1dd30:	f004 b8ac 	b.w	21e8c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1dd34:	4b03      	ldr	r3, [pc, #12]	; (1dd44 <event_handler+0x2c>)
   1dd36:	e7f8      	b.n	1dd2a <event_handler+0x12>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1dd38:	4b03      	ldr	r3, [pc, #12]	; (1dd48 <event_handler+0x30>)
   1dd3a:	e7f6      	b.n	1dd2a <event_handler+0x12>
   1dd3c:	0bad0001 	.word	0x0bad0001
   1dd40:	0bad0000 	.word	0x0bad0000
   1dd44:	0bae0001 	.word	0x0bae0001
   1dd48:	0bae0002 	.word	0x0bae0002

0001dd4c <i2c_nrfx_twi_transfer>:
{
   1dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd50:	4604      	mov	r4, r0
   1dd52:	b087      	sub	sp, #28
   1dd54:	460d      	mov	r5, r1
   1dd56:	4690      	mov	r8, r2
   1dd58:	469a      	mov	sl, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1dd5a:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1dd5c:	f04f 32ff 	mov.w	r2, #4294967295
   1dd60:	f04f 33ff 	mov.w	r3, #4294967295
   1dd64:	f004 f8ce 	bl	21f04 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1dd68:	68e0      	ldr	r0, [r4, #12]
   1dd6a:	3018      	adds	r0, #24
   1dd6c:	2200      	movs	r2, #0
   1dd6e:	2300      	movs	r3, #0
   1dd70:	f004 f8c8 	bl	21f04 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1dd74:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1dd76:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1de50 <i2c_nrfx_twi_transfer+0x104>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1dd7a:	f002 f891 	bl	1fea0 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1dd7e:	2600      	movs	r6, #0
   1dd80:	4546      	cmp	r6, r8
   1dd82:	d301      	bcc.n	1dd88 <i2c_nrfx_twi_transfer+0x3c>
   1dd84:	2500      	movs	r5, #0
   1dd86:	e02e      	b.n	1dde6 <i2c_nrfx_twi_transfer+0x9a>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1dd88:	f895 b008 	ldrb.w	fp, [r5, #8]
   1dd8c:	f01b 0708 	ands.w	r7, fp, #8
   1dd90:	d155      	bne.n	1de3e <i2c_nrfx_twi_transfer+0xf2>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1dd92:	2212      	movs	r2, #18
   1dd94:	4639      	mov	r1, r7
   1dd96:	f10d 0006 	add.w	r0, sp, #6
   1dd9a:	f008 fa0b 	bl	261b4 <memset>
   1dd9e:	686a      	ldr	r2, [r5, #4]
   1dda0:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1dda2:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1dda6:	682a      	ldr	r2, [r5, #0]
   1dda8:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1ddac:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1ddb0:	f88d a005 	strb.w	sl, [sp, #5]
   1ddb4:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1ddb6:	d120      	bne.n	1ddfa <i2c_nrfx_twi_transfer+0xae>
			if ((i < (num_msgs - 1)) &&
   1ddb8:	f108 32ff 	add.w	r2, r8, #4294967295
   1ddbc:	42b2      	cmp	r2, r6
   1ddbe:	d902      	bls.n	1ddc6 <i2c_nrfx_twi_transfer+0x7a>
   1ddc0:	7d2a      	ldrb	r2, [r5, #20]
   1ddc2:	0752      	lsls	r2, r2, #29
   1ddc4:	d51b      	bpl.n	1ddfe <i2c_nrfx_twi_transfer+0xb2>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1ddc6:	2b00      	cmp	r3, #0
   1ddc8:	d139      	bne.n	1de3e <i2c_nrfx_twi_transfer+0xf2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1ddca:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1ddcc:	a901      	add	r1, sp, #4
   1ddce:	6860      	ldr	r0, [r4, #4]
   1ddd0:	f002 f8c0 	bl	1ff54 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1ddd4:	4548      	cmp	r0, r9
   1ddd6:	d014      	beq.n	1de02 <i2c_nrfx_twi_transfer+0xb6>
			if (res == NRFX_ERROR_BUSY) {
   1ddd8:	4b1a      	ldr	r3, [pc, #104]	; (1de44 <i2c_nrfx_twi_transfer+0xf8>)
				ret = -EIO;
   1ddda:	4298      	cmp	r0, r3
   1dddc:	bf0c      	ite	eq
   1ddde:	f06f 050f 	mvneq.w	r5, #15
   1dde2:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1dde6:	6860      	ldr	r0, [r4, #4]
   1dde8:	f002 f882 	bl	1fef0 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1ddec:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1ddee:	f004 f84d 	bl	21e8c <z_impl_k_sem_give>
}
   1ddf2:	4628      	mov	r0, r5
   1ddf4:	b007      	add	sp, #28
   1ddf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1ddfa:	463a      	mov	r2, r7
   1ddfc:	e7e6      	b.n	1ddcc <i2c_nrfx_twi_transfer+0x80>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1ddfe:	2240      	movs	r2, #64	; 0x40
   1de00:	e7e4      	b.n	1ddcc <i2c_nrfx_twi_transfer+0x80>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1de02:	68e0      	ldr	r0, [r4, #12]
   1de04:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1de06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1de0a:	2300      	movs	r3, #0
   1de0c:	f004 f87a 	bl	21f04 <z_impl_k_sem_take>
		if (ret != 0) {
   1de10:	b138      	cbz	r0, 1de22 <i2c_nrfx_twi_transfer+0xd6>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1de12:	4632      	mov	r2, r6
   1de14:	2145      	movs	r1, #69	; 0x45
   1de16:	480c      	ldr	r0, [pc, #48]	; (1de48 <i2c_nrfx_twi_transfer+0xfc>)
   1de18:	f006 fa10 	bl	2423c <printk>
			ret = -EIO;
   1de1c:	f06f 0504 	mvn.w	r5, #4
			break;
   1de20:	e7e1      	b.n	1dde6 <i2c_nrfx_twi_transfer+0x9a>
		res = get_dev_data(dev)->res;
   1de22:	68e3      	ldr	r3, [r4, #12]
   1de24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1de26:	454a      	cmp	r2, r9
   1de28:	f105 050c 	add.w	r5, r5, #12
   1de2c:	d005      	beq.n	1de3a <i2c_nrfx_twi_transfer+0xee>
			LOG_ERR("Error %d occurred for message %d", res, i);
   1de2e:	4633      	mov	r3, r6
   1de30:	2145      	movs	r1, #69	; 0x45
   1de32:	4806      	ldr	r0, [pc, #24]	; (1de4c <i2c_nrfx_twi_transfer+0x100>)
   1de34:	f006 fa02 	bl	2423c <printk>
   1de38:	e7f0      	b.n	1de1c <i2c_nrfx_twi_transfer+0xd0>
	for (size_t i = 0; i < num_msgs; i++) {
   1de3a:	3601      	adds	r6, #1
   1de3c:	e7a0      	b.n	1dd80 <i2c_nrfx_twi_transfer+0x34>
			ret = -ENOTSUP;
   1de3e:	f06f 0522 	mvn.w	r5, #34	; 0x22
   1de42:	e7d0      	b.n	1dde6 <i2c_nrfx_twi_transfer+0x9a>
   1de44:	0bad000b 	.word	0x0bad000b
   1de48:	000312a1 	.word	0x000312a1
   1de4c:	000312d0 	.word	0x000312d0
   1de50:	0bad0000 	.word	0x0bad0000

0001de54 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1de54:	4b02      	ldr	r3, [pc, #8]	; (1de60 <flash_nrf_pages_layout+0xc>)
   1de56:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1de58:	2301      	movs	r3, #1
   1de5a:	6013      	str	r3, [r2, #0]
}
   1de5c:	4770      	bx	lr
   1de5e:	bf00      	nop
   1de60:	20003348 	.word	0x20003348

0001de64 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1de64:	4800      	ldr	r0, [pc, #0]	; (1de68 <flash_nrf_get_parameters+0x4>)
   1de66:	4770      	bx	lr
   1de68:	0002b678 	.word	0x0002b678

0001de6c <flash_nrf_read>:
{
   1de6c:	b570      	push	{r4, r5, r6, lr}
   1de6e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1de70:	4628      	mov	r0, r5
   1de72:	4619      	mov	r1, r3
{
   1de74:	4616      	mov	r6, r2
   1de76:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1de78:	f00b fe69 	bl	29b4e <is_regular_addr_valid>
   1de7c:	b940      	cbnz	r0, 1de90 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1de7e:	4809      	ldr	r0, [pc, #36]	; (1dea4 <flash_nrf_read+0x38>)
   1de80:	4623      	mov	r3, r4
   1de82:	462a      	mov	r2, r5
   1de84:	2145      	movs	r1, #69	; 0x45
   1de86:	f006 f9d9 	bl	2423c <printk>
   1de8a:	f06f 0015 	mvn.w	r0, #21
}
   1de8e:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1de90:	b134      	cbz	r4, 1dea0 <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
   1de92:	4622      	mov	r2, r4
   1de94:	4629      	mov	r1, r5
   1de96:	4630      	mov	r0, r6
   1de98:	f008 f962 	bl	26160 <memcpy>
	return 0;
   1de9c:	2000      	movs	r0, #0
   1de9e:	e7f6      	b.n	1de8e <flash_nrf_read+0x22>
		return 0;
   1dea0:	4620      	mov	r0, r4
   1dea2:	e7f4      	b.n	1de8e <flash_nrf_read+0x22>
   1dea4:	0003134c 	.word	0x0003134c

0001dea8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1dea8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1deaa:	2201      	movs	r2, #1
   1deac:	4611      	mov	r1, r2
   1deae:	4807      	ldr	r0, [pc, #28]	; (1decc <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1deb0:	4c07      	ldr	r4, [pc, #28]	; (1ded0 <nrf_flash_init+0x28>)
   1deb2:	f00c fa10 	bl	2a2d6 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1deb6:	f000 fa27 	bl	1e308 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1deba:	f00c f8c1 	bl	2a040 <nrfx_nvmc_flash_page_count_get>
   1debe:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1dec0:	f00c f8ba 	bl	2a038 <nrfx_nvmc_flash_page_size_get>
   1dec4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1dec6:	2000      	movs	r0, #0
   1dec8:	bd10      	pop	{r4, pc}
   1deca:	bf00      	nop
   1decc:	20003350 	.word	0x20003350
   1ded0:	20003348 	.word	0x20003348

0001ded4 <nrf_power_pofcon_set.constprop.10>:
NRF_STATIC_INLINE void nrf_power_pofcon_set(NRF_POWER_Type *    p_reg,
   1ded4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   1ded6:	f031 030f 	bics.w	r3, r1, #15
NRF_STATIC_INLINE void nrf_power_pofcon_set(NRF_POWER_Type *    p_reg,
   1deda:	4605      	mov	r5, r0
   1dedc:	460c      	mov	r4, r1
    NRFX_ASSERT(thr == (thr & (POWER_POFCON_THRESHOLD_Msk >> POWER_POFCON_THRESHOLD_Pos)));
   1dede:	d00a      	beq.n	1def6 <nrf_power_pofcon_set.constprop.10+0x22>
   1dee0:	490b      	ldr	r1, [pc, #44]	; (1df10 <nrf_power_pofcon_set.constprop.10+0x3c>)
   1dee2:	480c      	ldr	r0, [pc, #48]	; (1df14 <nrf_power_pofcon_set.constprop.10+0x40>)
   1dee4:	f240 32e7 	movw	r2, #999	; 0x3e7
   1dee8:	f006 f9a8 	bl	2423c <printk>
   1deec:	f240 31e7 	movw	r1, #999	; 0x3e7
   1def0:	4807      	ldr	r0, [pc, #28]	; (1df10 <nrf_power_pofcon_set.constprop.10+0x3c>)
   1def2:	f006 fc55 	bl	247a0 <assert_post_action>
    uint32_t pofcon = p_reg->POFCON;
   1def6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1defa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   1defe:	f021 011f 	bic.w	r1, r1, #31
   1df02:	4329      	orrs	r1, r5
    pofcon |=
   1df04:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    p_reg->POFCON = pofcon;
   1df08:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
}
   1df0c:	bd38      	pop	{r3, r4, r5, pc}
   1df0e:	bf00      	nop
   1df10:	00031391 	.word	0x00031391
   1df14:	0002bced 	.word	0x0002bced

0001df18 <restore_pofwarn.part.2>:
	}

	return 0;
}

static void restore_pofwarn(void)
   1df18:	b508      	push	{r3, lr}
    uint32_t pofcon = p_reg->POFCON;
   1df1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1df1e:	2001      	movs	r0, #1
   1df20:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1df24:	f3c1 0143 	ubfx	r1, r1, #1, #4
   1df28:	f7ff ffd4 	bl	1ded4 <nrf_power_pofcon_set.constprop.10>
		pofcon_enabled = false;
   1df2c:	4b01      	ldr	r3, [pc, #4]	; (1df34 <restore_pofwarn.part.2+0x1c>)
   1df2e:	2200      	movs	r2, #0
   1df30:	701a      	strb	r2, [r3, #0]
	}
}
   1df32:	bd08      	pop	{r3, pc}
   1df34:	200036f2 	.word	0x200036f2

0001df38 <suspend_pofwarn.part.1>:
   1df38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
static int suspend_pofwarn(void)
   1df3c:	b510      	push	{r4, lr}
   1df3e:	f8d3 4510 	ldr.w	r4, [r3, #1296]	; 0x510
	if (enabled) {
   1df42:	f014 0001 	ands.w	r0, r4, #1
   1df46:	d00e      	beq.n	1df66 <suspend_pofwarn.part.1+0x2e>
    return (nrf_power_pof_thr_t)((pofcon & POWER_POFCON_THRESHOLD_Msk) >>
   1df48:	f3c4 0443 	ubfx	r4, r4, #1, #4
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);
   1df4c:	2000      	movs	r0, #0
   1df4e:	4621      	mov	r1, r4
   1df50:	f7ff ffc0 	bl	1ded4 <nrf_power_pofcon_set.constprop.10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1df54:	4b06      	ldr	r3, [pc, #24]	; (1df70 <suspend_pofwarn.part.1+0x38>)
   1df56:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   1df58:	b130      	cbz	r0, 1df68 <suspend_pofwarn.part.1+0x30>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
   1df5a:	2001      	movs	r0, #1
   1df5c:	4621      	mov	r1, r4
   1df5e:	f7ff ffb9 	bl	1ded4 <nrf_power_pofcon_set.constprop.10>
			return -ECANCELED;
   1df62:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1df66:	bd10      	pop	{r4, pc}
		pofcon_enabled = enabled;
   1df68:	4b02      	ldr	r3, [pc, #8]	; (1df74 <suspend_pofwarn.part.1+0x3c>)
   1df6a:	2201      	movs	r2, #1
   1df6c:	701a      	strb	r2, [r3, #0]
   1df6e:	e7fa      	b.n	1df66 <suspend_pofwarn.part.1+0x2e>
   1df70:	40000108 	.word	0x40000108
   1df74:	200036f2 	.word	0x200036f2

0001df78 <erase_op>:
{
   1df78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1df7c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1df7e:	f00c f85b 	bl	2a038 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   1df82:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1df84:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   1df86:	b10b      	cbz	r3, 1df8c <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   1df88:	f000 f9d0 	bl	1e32c <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1df8c:	4f16      	ldr	r7, [pc, #88]	; (1dfe8 <erase_op+0x70>)
	if (pofcon_enabled) {
   1df8e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1dfec <erase_op+0x74>
{
   1df92:	2500      	movs	r5, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1df94:	683b      	ldr	r3, [r7, #0]
   1df96:	2b08      	cmp	r3, #8
   1df98:	d019      	beq.n	1dfce <erase_op+0x56>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1df9a:	6860      	ldr	r0, [r4, #4]
   1df9c:	f001 fd8c 	bl	1fab8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1dfa0:	68a3      	ldr	r3, [r4, #8]
   1dfa2:	1b9b      	subs	r3, r3, r6
   1dfa4:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1dfa6:	6863      	ldr	r3, [r4, #4]
   1dfa8:	4433      	add	r3, r6
   1dfaa:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   1dfac:	f898 3000 	ldrb.w	r3, [r8]
   1dfb0:	b10b      	cbz	r3, 1dfb6 <erase_op+0x3e>
   1dfb2:	f7ff ffb1 	bl	1df18 <restore_pofwarn.part.2>
		if (e_ctx->enable_time_limit) {
   1dfb6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1dfb8:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   1dfba:	b97b      	cbnz	r3, 1dfdc <erase_op+0x64>
	} while (e_ctx->len > 0);
   1dfbc:	68a3      	ldr	r3, [r4, #8]
   1dfbe:	2b00      	cmp	r3, #0
   1dfc0:	d1e8      	bne.n	1df94 <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   1dfc2:	68a0      	ldr	r0, [r4, #8]
   1dfc4:	3000      	adds	r0, #0
   1dfc6:	bf18      	it	ne
   1dfc8:	2001      	movne	r0, #1
}
   1dfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   1dfce:	f7ff ffb3 	bl	1df38 <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   1dfd2:	2800      	cmp	r0, #0
   1dfd4:	d0e1      	beq.n	1df9a <erase_op+0x22>
			return -ECANCELED;
   1dfd6:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1dfda:	e7f6      	b.n	1dfca <erase_op+0x52>
			if (nrf_flash_sync_check_time_limit(i)) {
   1dfdc:	4628      	mov	r0, r5
   1dfde:	f7e5 fa43 	bl	3468 <nrf_flash_sync_check_time_limit>
   1dfe2:	2800      	cmp	r0, #0
   1dfe4:	d0ea      	beq.n	1dfbc <erase_op+0x44>
   1dfe6:	e7ec      	b.n	1dfc2 <erase_op+0x4a>
   1dfe8:	10000130 	.word	0x10000130
   1dfec:	200036f2 	.word	0x200036f2

0001dff0 <flash_nrf_erase>:
{
   1dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dff2:	b087      	sub	sp, #28
   1dff4:	460e      	mov	r6, r1
   1dff6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dff8:	f00c f81e 	bl	2a038 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1dffc:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dffe:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1e000:	4630      	mov	r0, r6
   1e002:	f00b fda4 	bl	29b4e <is_regular_addr_valid>
   1e006:	b358      	cbz	r0, 1e060 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e008:	fbb6 f3f7 	udiv	r3, r6, r7
   1e00c:	fb07 6313 	mls	r3, r7, r3, r6
   1e010:	b923      	cbnz	r3, 1e01c <flash_nrf_erase+0x2c>
   1e012:	fbb5 f4f7 	udiv	r4, r5, r7
   1e016:	fb07 5414 	mls	r4, r7, r4, r5
   1e01a:	b154      	cbz	r4, 1e032 <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e01c:	481f      	ldr	r0, [pc, #124]	; (1e09c <flash_nrf_erase+0xac>)
   1e01e:	462b      	mov	r3, r5
   1e020:	4632      	mov	r2, r6
   1e022:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e024:	f006 f90a 	bl	2423c <printk>
		return -EINVAL;
   1e028:	f06f 0415 	mvn.w	r4, #21
}
   1e02c:	4620      	mov	r0, r4
   1e02e:	b007      	add	sp, #28
   1e030:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1e032:	42bd      	cmp	r5, r7
   1e034:	d3fa      	bcc.n	1e02c <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   1e036:	f04f 33ff 	mov.w	r3, #4294967295
   1e03a:	f04f 32ff 	mov.w	r2, #4294967295
   1e03e:	4818      	ldr	r0, [pc, #96]	; (1e0a0 <flash_nrf_erase+0xb0>)
   1e040:	f003 ff60 	bl	21f04 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e044:	f00b fd96 	bl	29b74 <nrf_flash_sync_is_required>
   1e048:	ab02      	add	r3, sp, #8
   1e04a:	4601      	mov	r1, r0
   1e04c:	b968      	cbnz	r0, 1e06a <flash_nrf_erase+0x7a>
	struct flash_context context = {
   1e04e:	2210      	movs	r2, #16
   1e050:	4618      	mov	r0, r3
   1e052:	f008 f8af 	bl	261b4 <memset>
   1e056:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   1e05a:	f7ff ff8d 	bl	1df78 <erase_op>
   1e05e:	e017      	b.n	1e090 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e060:	462b      	mov	r3, r5
   1e062:	4632      	mov	r2, r6
   1e064:	2145      	movs	r1, #69	; 0x45
   1e066:	480f      	ldr	r0, [pc, #60]	; (1e0a4 <flash_nrf_erase+0xb4>)
   1e068:	e7dc      	b.n	1e024 <flash_nrf_erase+0x34>
	struct flash_context context = {
   1e06a:	2210      	movs	r2, #16
   1e06c:	4621      	mov	r1, r4
   1e06e:	4618      	mov	r0, r3
   1e070:	f008 f8a0 	bl	261b4 <memset>
   1e074:	2201      	movs	r2, #1
   1e076:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e07a:	4a0b      	ldr	r2, [pc, #44]	; (1e0a8 <flash_nrf_erase+0xb8>)
   1e07c:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e080:	480a      	ldr	r0, [pc, #40]	; (1e0ac <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   1e082:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e086:	f000 f949 	bl	1e31c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e08a:	4668      	mov	r0, sp
   1e08c:	f7e5 f970 	bl	3370 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e090:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e092:	4803      	ldr	r0, [pc, #12]	; (1e0a0 <flash_nrf_erase+0xb0>)
   1e094:	f003 fefa 	bl	21e8c <z_impl_k_sem_give>
   1e098:	e7c8      	b.n	1e02c <flash_nrf_erase+0x3c>
   1e09a:	bf00      	nop
   1e09c:	00031328 	.word	0x00031328
   1e0a0:	20003350 	.word	0x20003350
   1e0a4:	0003134c 	.word	0x0003134c
   1e0a8:	0001df79 	.word	0x0001df79
   1e0ac:	00015e64 	.word	0x00015e64

0001e0b0 <write_op>:
{
   1e0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   1e0b2:	7b03      	ldrb	r3, [r0, #12]
{
   1e0b4:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e0b6:	b10b      	cbz	r3, 1e0bc <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e0b8:	f000 f938 	bl	1e32c <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e0bc:	4e1c      	ldr	r6, [pc, #112]	; (1e130 <write_op+0x80>)
	if (pofcon_enabled) {
   1e0be:	4f1d      	ldr	r7, [pc, #116]	; (1e134 <write_op+0x84>)
{
   1e0c0:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e0c2:	68a3      	ldr	r3, [r4, #8]
   1e0c4:	2b03      	cmp	r3, #3
   1e0c6:	d806      	bhi.n	1e0d6 <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e0c8:	4a1b      	ldr	r2, [pc, #108]	; (1e138 <write_op+0x88>)
   1e0ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e0ce:	07db      	lsls	r3, r3, #31
   1e0d0:	d5fb      	bpl.n	1e0ca <write_op+0x1a>
	return FLASH_OP_DONE;
   1e0d2:	2000      	movs	r0, #0
}
   1e0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   1e0d6:	6833      	ldr	r3, [r6, #0]
   1e0d8:	2b08      	cmp	r3, #8
   1e0da:	d021      	beq.n	1e120 <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e0dc:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e0de:	6860      	ldr	r0, [r4, #4]
   1e0e0:	6819      	ldr	r1, [r3, #0]
   1e0e2:	f001 fd1d 	bl	1fb20 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   1e0e6:	783b      	ldrb	r3, [r7, #0]
   1e0e8:	b10b      	cbz	r3, 1e0ee <write_op+0x3e>
   1e0ea:	f7ff ff15 	bl	1df18 <restore_pofwarn.part.2>
	w_ctx->flash_addr += shift;
   1e0ee:	6863      	ldr	r3, [r4, #4]
   1e0f0:	3304      	adds	r3, #4
   1e0f2:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e0f4:	6823      	ldr	r3, [r4, #0]
   1e0f6:	3304      	adds	r3, #4
   1e0f8:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e0fa:	68a3      	ldr	r3, [r4, #8]
   1e0fc:	3b04      	subs	r3, #4
   1e0fe:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e100:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e102:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e104:	2b00      	cmp	r3, #0
   1e106:	d0dc      	beq.n	1e0c2 <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e108:	4628      	mov	r0, r5
   1e10a:	f7e5 f9ad 	bl	3468 <nrf_flash_sync_check_time_limit>
   1e10e:	2800      	cmp	r0, #0
   1e110:	d0d7      	beq.n	1e0c2 <write_op+0x12>
   1e112:	4a09      	ldr	r2, [pc, #36]	; (1e138 <write_op+0x88>)
   1e114:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e118:	07d9      	lsls	r1, r3, #31
   1e11a:	d5fb      	bpl.n	1e114 <write_op+0x64>
				return FLASH_OP_ONGOING;
   1e11c:	2001      	movs	r0, #1
   1e11e:	e7d9      	b.n	1e0d4 <write_op+0x24>
                switch(var2)
   1e120:	f7ff ff0a 	bl	1df38 <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   1e124:	2800      	cmp	r0, #0
   1e126:	d0d9      	beq.n	1e0dc <write_op+0x2c>
			return -ECANCELED;
   1e128:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1e12c:	e7d2      	b.n	1e0d4 <write_op+0x24>
   1e12e:	bf00      	nop
   1e130:	10000130 	.word	0x10000130
   1e134:	200036f2 	.word	0x200036f2
   1e138:	4001e000 	.word	0x4001e000

0001e13c <flash_nrf_write>:
{
   1e13c:	b570      	push	{r4, r5, r6, lr}
   1e13e:	460d      	mov	r5, r1
   1e140:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1e142:	4619      	mov	r1, r3
   1e144:	4628      	mov	r0, r5
{
   1e146:	4616      	mov	r6, r2
   1e148:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e14a:	f00b fd00 	bl	29b4e <is_regular_addr_valid>
   1e14e:	b950      	cbnz	r0, 1e166 <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e150:	481d      	ldr	r0, [pc, #116]	; (1e1c8 <flash_nrf_write+0x8c>)
   1e152:	4623      	mov	r3, r4
   1e154:	462a      	mov	r2, r5
   1e156:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e158:	f006 f870 	bl	2423c <printk>
		return -EINVAL;
   1e15c:	f06f 0415 	mvn.w	r4, #21
}
   1e160:	4620      	mov	r0, r4
   1e162:	b006      	add	sp, #24
   1e164:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e166:	ea44 0305 	orr.w	r3, r4, r5
   1e16a:	079b      	lsls	r3, r3, #30
   1e16c:	d004      	beq.n	1e178 <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e16e:	4623      	mov	r3, r4
   1e170:	462a      	mov	r2, r5
   1e172:	2145      	movs	r1, #69	; 0x45
   1e174:	4815      	ldr	r0, [pc, #84]	; (1e1cc <flash_nrf_write+0x90>)
   1e176:	e7ef      	b.n	1e158 <flash_nrf_write+0x1c>
	if (!len) {
   1e178:	2c00      	cmp	r4, #0
   1e17a:	d0f1      	beq.n	1e160 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   1e17c:	f04f 33ff 	mov.w	r3, #4294967295
   1e180:	f04f 32ff 	mov.w	r2, #4294967295
   1e184:	4812      	ldr	r0, [pc, #72]	; (1e1d0 <flash_nrf_write+0x94>)
   1e186:	f003 febd 	bl	21f04 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e18a:	f00b fcf3 	bl	29b74 <nrf_flash_sync_is_required>
   1e18e:	ab02      	add	r3, sp, #8
	struct flash_context context = {
   1e190:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1e194:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1e196:	b188      	cbz	r0, 1e1bc <flash_nrf_write+0x80>
	struct flash_context context = {
   1e198:	2201      	movs	r2, #1
   1e19a:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e19e:	4a0d      	ldr	r2, [pc, #52]	; (1e1d4 <flash_nrf_write+0x98>)
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e1a0:	f641 504c 	movw	r0, #7500	; 0x1d4c
	struct flash_op_desc flash_op_desc = {
   1e1a4:	e9cd 2300 	strd	r2, r3, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e1a8:	f000 f8b8 	bl	1e31c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e1ac:	4668      	mov	r0, sp
   1e1ae:	f7e5 f8df 	bl	3370 <nrf_flash_sync_exe>
	return write_op(&context);
   1e1b2:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e1b4:	4806      	ldr	r0, [pc, #24]	; (1e1d0 <flash_nrf_write+0x94>)
   1e1b6:	f003 fe69 	bl	21e8c <z_impl_k_sem_give>
	return ret;
   1e1ba:	e7d1      	b.n	1e160 <flash_nrf_write+0x24>
	struct flash_context context = {
   1e1bc:	f88d 0014 	strb.w	r0, [sp, #20]
	return write_op(&context);
   1e1c0:	4618      	mov	r0, r3
   1e1c2:	f7ff ff75 	bl	1e0b0 <write_op>
   1e1c6:	e7f4      	b.n	1e1b2 <flash_nrf_write+0x76>
   1e1c8:	0003134c 	.word	0x0003134c
   1e1cc:	0003136e 	.word	0x0003136e
   1e1d0:	20003350 	.word	0x20003350
   1e1d4:	0001e0b1 	.word	0x0001e0b1

0001e1d8 <_ticker_stop>:
{
   1e1d8:	b513      	push	{r0, r1, r4, lr}
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e1da:	2300      	movs	r3, #0
   1e1dc:	9300      	str	r3, [sp, #0]
   1e1de:	f7f9 f817 	bl	17210 <ticker_stop>
	if (ret != TICKER_STATUS_SUCCESS &&
   1e1e2:	f030 0302 	bics.w	r3, r0, #2
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e1e6:	4604      	mov	r4, r0
	if (ret != TICKER_STATUS_SUCCESS &&
   1e1e8:	d008      	beq.n	1e1fc <_ticker_stop+0x24>
		__ASSERT(0, "Failed to stop ticker.\n");
   1e1ea:	4906      	ldr	r1, [pc, #24]	; (1e204 <_ticker_stop+0x2c>)
   1e1ec:	4806      	ldr	r0, [pc, #24]	; (1e208 <_ticker_stop+0x30>)
   1e1ee:	2230      	movs	r2, #48	; 0x30
   1e1f0:	f006 f824 	bl	2423c <printk>
   1e1f4:	2130      	movs	r1, #48	; 0x30
   1e1f6:	4803      	ldr	r0, [pc, #12]	; (1e204 <_ticker_stop+0x2c>)
   1e1f8:	f006 fad2 	bl	247a0 <assert_post_action>
}
   1e1fc:	4620      	mov	r0, r4
   1e1fe:	b002      	add	sp, #8
   1e200:	bd10      	pop	{r4, pc}
   1e202:	bf00      	nop
   1e204:	000313cf 	.word	0x000313cf
   1e208:	0002bced 	.word	0x0002bced

0001e20c <time_slot_delay>:
{
   1e20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e210:	b08c      	sub	sp, #48	; 0x30
   1e212:	4605      	mov	r5, r0
   1e214:	460e      	mov	r6, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e216:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1e21a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1e21e:	4617      	mov	r7, r2
   1e220:	4698      	mov	r8, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e222:	f00a fdaa 	bl	28d7a <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1e226:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1e22a:	9600      	str	r6, [sp, #0]
   1e22c:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1e22e:	3101      	adds	r1, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1e230:	462b      	mov	r3, r5
   1e232:	b2ca      	uxtb	r2, r1
   1e234:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1e238:	e9cd 7805 	strd	r7, r8, [sp, #20]
   1e23c:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1e240:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e244:	4621      	mov	r1, r4
   1e246:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1e24a:	f00a fcd6 	bl	28bfa <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1e24e:	f030 0302 	bics.w	r3, r0, #2
   1e252:	d00b      	beq.n	1e26c <time_slot_delay+0x60>
		_ticker_sync_context.result = 0;
   1e254:	4b07      	ldr	r3, [pc, #28]	; (1e274 <time_slot_delay+0x68>)
		_ticker_stop(instance_index, 0, ticker_id);
   1e256:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1e25a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
		_ticker_sync_context.result = 0;
   1e25e:	60dc      	str	r4, [r3, #12]
		_ticker_stop(instance_index, 0, ticker_id);
   1e260:	4621      	mov	r1, r4
   1e262:	f7ff ffb9 	bl	1e1d8 <_ticker_stop>
   1e266:	4804      	ldr	r0, [pc, #16]	; (1e278 <time_slot_delay+0x6c>)
   1e268:	f003 fe10 	bl	21e8c <z_impl_k_sem_give>
}
   1e26c:	b00c      	add	sp, #48	; 0x30
   1e26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e272:	bf00      	nop
   1e274:	20003368 	.word	0x20003368
   1e278:	20003378 	.word	0x20003378

0001e27c <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1e27c:	4a01      	ldr	r2, [pc, #4]	; (1e284 <time_slot_callback_prepare+0x8>)
   1e27e:	2131      	movs	r1, #49	; 0x31
   1e280:	f7ff bfc4 	b.w	1e20c <time_slot_delay>
   1e284:	0001e289 	.word	0x0001e289

0001e288 <time_slot_callback_abort>:
{
   1e288:	b570      	push	{r4, r5, r6, lr}
   1e28a:	4604      	mov	r4, r0
   1e28c:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1e28e:	f7fa fbd7 	bl	18a40 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1e292:	462b      	mov	r3, r5
   1e294:	4620      	mov	r0, r4
   1e296:	4a03      	ldr	r2, [pc, #12]	; (1e2a4 <time_slot_callback_abort+0x1c>)
   1e298:	2106      	movs	r1, #6
}
   1e29a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1e29e:	f7ff bfb5 	b.w	1e20c <time_slot_delay>
   1e2a2:	bf00      	nop
   1e2a4:	0001e2a9 	.word	0x0001e2a9

0001e2a8 <time_slot_callback_work>:
{
   1e2a8:	b513      	push	{r0, r1, r4, lr}
   1e2aa:	461c      	mov	r4, r3
	__ASSERT(ll_radio_state_is_idle(),
   1e2ac:	f00a fd6a 	bl	28d84 <ll_radio_state_is_idle>
   1e2b0:	b940      	cbnz	r0, 1e2c4 <time_slot_callback_work+0x1c>
   1e2b2:	4911      	ldr	r1, [pc, #68]	; (1e2f8 <time_slot_callback_work+0x50>)
   1e2b4:	4811      	ldr	r0, [pc, #68]	; (1e2fc <time_slot_callback_work+0x54>)
   1e2b6:	2240      	movs	r2, #64	; 0x40
   1e2b8:	f005 ffc0 	bl	2423c <printk>
   1e2bc:	2140      	movs	r1, #64	; 0x40
   1e2be:	480e      	ldr	r0, [pc, #56]	; (1e2f8 <time_slot_callback_work+0x50>)
   1e2c0:	f006 fa6e 	bl	247a0 <assert_post_action>
	rc = op_desc->handler(op_desc->context);
   1e2c4:	e9d4 3000 	ldrd	r3, r0, [r4]
   1e2c8:	4798      	blx	r3
	if (rc != FLASH_OP_ONGOING) {
   1e2ca:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   1e2cc:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   1e2ce:	d011      	beq.n	1e2f4 <time_slot_callback_work+0x4c>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e2d0:	f10d 0107 	add.w	r1, sp, #7
   1e2d4:	f10d 0006 	add.w	r0, sp, #6
   1e2d8:	f00a fd4f 	bl	28d7a <ll_timeslice_ticker_id_get>
		_ticker_stop(instance_index, 0, ticker_id);
   1e2dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1e2e0:	f89d 0006 	ldrb.w	r0, [sp, #6]
   1e2e4:	2100      	movs	r1, #0
   1e2e6:	f7ff ff77 	bl	1e1d8 <_ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   1e2ea:	4b05      	ldr	r3, [pc, #20]	; (1e300 <time_slot_callback_work+0x58>)
   1e2ec:	60dc      	str	r4, [r3, #12]
   1e2ee:	4805      	ldr	r0, [pc, #20]	; (1e304 <time_slot_callback_work+0x5c>)
   1e2f0:	f003 fdcc 	bl	21e8c <z_impl_k_sem_give>
}
   1e2f4:	b002      	add	sp, #8
   1e2f6:	bd10      	pop	{r4, pc}
   1e2f8:	000313cf 	.word	0x000313cf
   1e2fc:	0002bced 	.word	0x0002bced
   1e300:	20003368 	.word	0x20003368
   1e304:	20003378 	.word	0x20003378

0001e308 <nrf_flash_sync_init>:
{
   1e308:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e30a:	2201      	movs	r2, #1
   1e30c:	2100      	movs	r1, #0
   1e30e:	4802      	ldr	r0, [pc, #8]	; (1e318 <nrf_flash_sync_init+0x10>)
   1e310:	f00b ffe1 	bl	2a2d6 <z_impl_k_sem_init>
}
   1e314:	2000      	movs	r0, #0
   1e316:	bd08      	pop	{r3, pc}
   1e318:	20003378 	.word	0x20003378

0001e31c <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1e31c:	4b02      	ldr	r3, [pc, #8]	; (1e328 <nrf_flash_sync_set_context+0xc>)
   1e31e:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1e322:	e9c3 2000 	strd	r2, r0, [r3]
}
   1e326:	4770      	bx	lr
   1e328:	20003368 	.word	0x20003368

0001e32c <nrf_flash_sync_get_timestamp_begin>:
{
   1e32c:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1e32e:	f00a fc97 	bl	28c60 <ticker_ticks_now_get>
   1e332:	4b01      	ldr	r3, [pc, #4]	; (1e338 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1e334:	6098      	str	r0, [r3, #8]
}
   1e336:	bd08      	pop	{r3, pc}
   1e338:	20003368 	.word	0x20003368

0001e33c <random_byte_get>:
	__asm__ volatile(
   1e33c:	f04f 0320 	mov.w	r3, #32
   1e340:	f3ef 8211 	mrs	r2, BASEPRI
   1e344:	f383 8811 	msr	BASEPRI, r3
   1e348:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e34c:	4b08      	ldr	r3, [pc, #32]	; (1e370 <random_byte_get+0x34>)
   1e34e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e350:	b159      	cbz	r1, 1e36a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e352:	4908      	ldr	r1, [pc, #32]	; (1e374 <random_byte_get+0x38>)
   1e354:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e358:	2100      	movs	r1, #0
   1e35a:	6019      	str	r1, [r3, #0]
   1e35c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e35e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e360:	f382 8811 	msr	BASEPRI, r2
   1e364:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e368:	4770      	bx	lr
	int retval = -EAGAIN;
   1e36a:	f06f 000a 	mvn.w	r0, #10
   1e36e:	e7f7      	b.n	1e360 <random_byte_get+0x24>
   1e370:	4000d100 	.word	0x4000d100
   1e374:	4000d000 	.word	0x4000d000

0001e378 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e378:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t last  = rngp->last;
   1e37a:	7883      	ldrb	r3, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e37c:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e37e:	f04f 0420 	mov.w	r4, #32
   1e382:	f3ef 8e11 	mrs	lr, BASEPRI
   1e386:	f384 8811 	msr	BASEPRI, r4
   1e38a:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e38e:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e390:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   1e394:	1b9b      	subs	r3, r3, r6
   1e396:	403b      	ands	r3, r7
	if (available < len) {
   1e398:	429a      	cmp	r2, r3
		len = available;
   1e39a:	bf88      	it	hi
   1e39c:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e39e:	18b4      	adds	r4, r6, r2
   1e3a0:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   1e3a2:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e3a4:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   1e3a6:	f38e 8811 	msr	BASEPRI, lr
   1e3aa:	f3bf 8f6f 	isb	sy
   1e3ae:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1e3b0:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e3b2:	42a2      	cmp	r2, r4
   1e3b4:	d11a      	bne.n	1e3ec <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e3b6:	4566      	cmp	r6, ip
   1e3b8:	d10d      	bne.n	1e3d6 <rng_pool_get+0x5e>
	__asm__ volatile(
   1e3ba:	f04f 0520 	mov.w	r5, #32
   1e3be:	f3ef 8211 	mrs	r2, BASEPRI
   1e3c2:	f385 8811 	msr	BASEPRI, r5
   1e3c6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e3ca:	7805      	ldrb	r5, [r0, #0]
   1e3cc:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   1e3ce:	f382 8811 	msr	BASEPRI, r2
   1e3d2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e3d6:	1a64      	subs	r4, r4, r1
   1e3d8:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   1e3da:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   1e3dc:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   1e3de:	42a1      	cmp	r1, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e3e0:	bf22      	ittt	cs
   1e3e2:	4b07      	ldrcs	r3, [pc, #28]	; (1e400 <rng_pool_get+0x88>)
   1e3e4:	2101      	movcs	r1, #1
   1e3e6:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e3e8:	4610      	mov	r0, r2
   1e3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e3ec:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   1e3f0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e3f2:	f89e e005 	ldrb.w	lr, [lr, #5]
   1e3f6:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   1e3fa:	403d      	ands	r5, r7
   1e3fc:	e7d9      	b.n	1e3b2 <rng_pool_get+0x3a>
   1e3fe:	bf00      	nop
   1e400:	4000d000 	.word	0x4000d000

0001e404 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1e404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e408:	4614      	mov	r4, r2
   1e40a:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1e40c:	68c2      	ldr	r2, [r0, #12]
   1e40e:	4b2c      	ldr	r3, [pc, #176]	; (1e4c0 <entropy_nrf5_get_entropy_isr+0xbc>)
   1e410:	429a      	cmp	r2, r3
{
   1e412:	4688      	mov	r8, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   1e414:	d00a      	beq.n	1e42c <entropy_nrf5_get_entropy_isr+0x28>
   1e416:	492b      	ldr	r1, [pc, #172]	; (1e4c4 <entropy_nrf5_get_entropy_isr+0xc0>)
   1e418:	482b      	ldr	r0, [pc, #172]	; (1e4c8 <entropy_nrf5_get_entropy_isr+0xc4>)
   1e41a:	f44f 7284 	mov.w	r2, #264	; 0x108
   1e41e:	f005 ff0d 	bl	2423c <printk>
   1e422:	f44f 7184 	mov.w	r1, #264	; 0x108
   1e426:	4827      	ldr	r0, [pc, #156]	; (1e4c4 <entropy_nrf5_get_entropy_isr+0xc0>)
   1e428:	f006 f9ba 	bl	247a0 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e42c:	07eb      	lsls	r3, r5, #31
   1e42e:	d406      	bmi.n	1e43e <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e430:	4622      	mov	r2, r4
   1e432:	4641      	mov	r1, r8
   1e434:	4825      	ldr	r0, [pc, #148]	; (1e4cc <entropy_nrf5_get_entropy_isr+0xc8>)
   1e436:	f7ff ff9f 	bl	1e378 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e43e:	2c00      	cmp	r4, #0
   1e440:	d035      	beq.n	1e4ae <entropy_nrf5_get_entropy_isr+0xaa>
	__asm__ volatile(
   1e442:	f04f 0320 	mov.w	r3, #32
   1e446:	f3ef 8511 	mrs	r5, BASEPRI
   1e44a:	f383 8811 	msr	BASEPRI, r3
   1e44e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e452:	200d      	movs	r0, #13
   1e454:	f7e8 f832 	bl	64bc <arch_irq_is_enabled>
   1e458:	4681      	mov	r9, r0
		irq_disable(IRQN);
   1e45a:	200d      	movs	r0, #13
   1e45c:	f7e8 f81a 	bl	6494 <arch_irq_disable>
	__asm__ volatile(
   1e460:	f385 8811 	msr	BASEPRI, r5
   1e464:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e468:	4919      	ldr	r1, [pc, #100]	; (1e4d0 <entropy_nrf5_get_entropy_isr+0xcc>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e46a:	4e1a      	ldr	r6, [pc, #104]	; (1e4d4 <entropy_nrf5_get_entropy_isr+0xd0>)
   1e46c:	2300      	movs	r3, #0
   1e46e:	600b      	str	r3, [r1, #0]
   1e470:	680b      	ldr	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e472:	4b19      	ldr	r3, [pc, #100]	; (1e4d8 <entropy_nrf5_get_entropy_isr+0xd4>)
   1e474:	2201      	movs	r2, #1
   1e476:	f44f 5700 	mov.w	r7, #8192	; 0x2000
   1e47a:	601a      	str	r2, [r3, #0]
   1e47c:	4625      	mov	r5, r4
   1e47e:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e482:	468a      	mov	sl, r1
   1e484:	f8da 3000 	ldr.w	r3, [sl]
			while (!nrf_rng_event_check(NRF_RNG,
   1e488:	b19b      	cbz	r3, 1e4b2 <entropy_nrf5_get_entropy_isr+0xae>
			byte = random_byte_get();
   1e48a:	f7ff ff57 	bl	1e33c <random_byte_get>
			if (byte < 0) {
   1e48e:	2800      	cmp	r0, #0
   1e490:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
   1e494:	dbf6      	blt.n	1e484 <entropy_nrf5_get_entropy_isr+0x80>
   1e496:	3d01      	subs	r5, #1
   1e498:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1e49a:	f808 0005 	strb.w	r0, [r8, r5]
		} while (len);
   1e49e:	2d00      	cmp	r5, #0
   1e4a0:	d1f0      	bne.n	1e484 <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   1e4a2:	f1b9 0f00 	cmp.w	r9, #0
   1e4a6:	d002      	beq.n	1e4ae <entropy_nrf5_get_entropy_isr+0xaa>
			irq_enable(IRQN);
   1e4a8:	200d      	movs	r0, #13
   1e4aa:	f7e7 ffe3 	bl	6474 <arch_irq_enable>
	return cnt;
   1e4ae:	4620      	mov	r0, r4
   1e4b0:	e7c3      	b.n	1e43a <entropy_nrf5_get_entropy_isr+0x36>
   1e4b2:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e4b6:	bf20      	wfe
				__SEV();
   1e4b8:	bf40      	sev
				__WFE();
   1e4ba:	bf20      	wfe
   1e4bc:	e7e2      	b.n	1e484 <entropy_nrf5_get_entropy_isr+0x80>
   1e4be:	bf00      	nop
   1e4c0:	20003390 	.word	0x20003390
   1e4c4:	00031407 	.word	0x00031407
   1e4c8:	0002bced 	.word	0x0002bced
   1e4cc:	200033c0 	.word	0x200033c0
   1e4d0:	4000d100 	.word	0x4000d100
   1e4d4:	e000e100 	.word	0xe000e100
   1e4d8:	4000d000 	.word	0x4000d000

0001e4dc <entropy_nrf5_get_entropy>:
{
   1e4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e4e0:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1e4e2:	4b1a      	ldr	r3, [pc, #104]	; (1e54c <entropy_nrf5_get_entropy+0x70>)
   1e4e4:	68c2      	ldr	r2, [r0, #12]
   1e4e6:	429a      	cmp	r2, r3
{
   1e4e8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1e4ea:	d008      	beq.n	1e4fe <entropy_nrf5_get_entropy+0x22>
   1e4ec:	4918      	ldr	r1, [pc, #96]	; (1e550 <entropy_nrf5_get_entropy+0x74>)
   1e4ee:	4819      	ldr	r0, [pc, #100]	; (1e554 <entropy_nrf5_get_entropy+0x78>)
   1e4f0:	22ea      	movs	r2, #234	; 0xea
   1e4f2:	f005 fea3 	bl	2423c <printk>
   1e4f6:	21ea      	movs	r1, #234	; 0xea
   1e4f8:	4815      	ldr	r0, [pc, #84]	; (1e550 <entropy_nrf5_get_entropy+0x74>)
   1e4fa:	f006 f951 	bl	247a0 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1e4fe:	4d13      	ldr	r5, [pc, #76]	; (1e54c <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e500:	f105 0845 	add.w	r8, r5, #69	; 0x45
   1e504:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   1e508:	b914      	cbnz	r4, 1e510 <entropy_nrf5_get_entropy+0x34>
}
   1e50a:	4620      	mov	r0, r4
   1e50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e510:	f04f 33ff 	mov.w	r3, #4294967295
   1e514:	f04f 32ff 	mov.w	r2, #4294967295
   1e518:	4628      	mov	r0, r5
   1e51a:	f003 fcf3 	bl	21f04 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e51e:	4622      	mov	r2, r4
   1e520:	4631      	mov	r1, r6
   1e522:	4640      	mov	r0, r8
   1e524:	f7ff ff28 	bl	1e378 <rng_pool_get>
   1e528:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   1e52a:	4628      	mov	r0, r5
   1e52c:	f003 fcae 	bl	21e8c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e530:	b93f      	cbnz	r7, 1e542 <entropy_nrf5_get_entropy+0x66>
	return z_impl_k_sem_take(sem, timeout);
   1e532:	f04f 32ff 	mov.w	r2, #4294967295
   1e536:	f04f 33ff 	mov.w	r3, #4294967295
   1e53a:	4648      	mov	r0, r9
   1e53c:	f003 fce2 	bl	21f04 <z_impl_k_sem_take>
			continue;
   1e540:	e7e2      	b.n	1e508 <entropy_nrf5_get_entropy+0x2c>
		len -= bytes;
   1e542:	1be4      	subs	r4, r4, r7
   1e544:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e546:	443e      	add	r6, r7
   1e548:	e7de      	b.n	1e508 <entropy_nrf5_get_entropy+0x2c>
   1e54a:	bf00      	nop
   1e54c:	20003390 	.word	0x20003390
   1e550:	00031407 	.word	0x00031407
   1e554:	0002bced 	.word	0x0002bced

0001e558 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1e558:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(device));
   1e55a:	4c1f      	ldr	r4, [pc, #124]	; (1e5d8 <entropy_nrf5_init+0x80>)
   1e55c:	68c3      	ldr	r3, [r0, #12]
   1e55e:	42a3      	cmp	r3, r4
   1e560:	d00a      	beq.n	1e578 <entropy_nrf5_init+0x20>
   1e562:	491e      	ldr	r1, [pc, #120]	; (1e5dc <entropy_nrf5_init+0x84>)
   1e564:	481e      	ldr	r0, [pc, #120]	; (1e5e0 <entropy_nrf5_init+0x88>)
   1e566:	f240 1257 	movw	r2, #343	; 0x157
   1e56a:	f005 fe67 	bl	2423c <printk>
   1e56e:	f240 1157 	movw	r1, #343	; 0x157
   1e572:	481a      	ldr	r0, [pc, #104]	; (1e5dc <entropy_nrf5_init+0x84>)
   1e574:	f006 f914 	bl	247a0 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e578:	2201      	movs	r2, #1
   1e57a:	4611      	mov	r1, r2
   1e57c:	4816      	ldr	r0, [pc, #88]	; (1e5d8 <entropy_nrf5_init+0x80>)
   1e57e:	f00b feaa 	bl	2a2d6 <z_impl_k_sem_init>
   1e582:	2201      	movs	r2, #1
   1e584:	2100      	movs	r1, #0
   1e586:	4817      	ldr	r0, [pc, #92]	; (1e5e4 <entropy_nrf5_init+0x8c>)
   1e588:	f00b fea5 	bl	2a2d6 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1e58c:	f240 4307 	movw	r3, #1031	; 0x407
   1e590:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1e594:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e598:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1e59a:	230c      	movs	r3, #12
   1e59c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1e5a0:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1e5a2:	4b11      	ldr	r3, [pc, #68]	; (1e5e8 <entropy_nrf5_init+0x90>)
   1e5a4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1e5a8:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1e5ac:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e5b0:	f042 0201 	orr.w	r2, r2, #1
   1e5b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e5b8:	4a0c      	ldr	r2, [pc, #48]	; (1e5ec <entropy_nrf5_init+0x94>)
    p_reg->INTENSET = mask;
   1e5ba:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e5bc:	6015      	str	r5, [r2, #0]
   1e5be:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1e5c0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e5c4:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e5c6:	6019      	str	r1, [r3, #0]
   1e5c8:	200d      	movs	r0, #13
   1e5ca:	f7e7 ff85 	bl	64d8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e5ce:	200d      	movs	r0, #13
   1e5d0:	f7e7 ff50 	bl	6474 <arch_irq_enable>

	return 0;
}
   1e5d4:	4628      	mov	r0, r5
   1e5d6:	bd38      	pop	{r3, r4, r5, pc}
   1e5d8:	20003390 	.word	0x20003390
   1e5dc:	00031407 	.word	0x00031407
   1e5e0:	0002bced 	.word	0x0002bced
   1e5e4:	200033a8 	.word	0x200033a8
   1e5e8:	4000d000 	.word	0x4000d000
   1e5ec:	4000d100 	.word	0x4000d100

0001e5f0 <isr>:
{
   1e5f0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e5f2:	f7ff fea3 	bl	1e33c <random_byte_get>
	if (byte < 0) {
   1e5f6:	2800      	cmp	r0, #0
   1e5f8:	db20      	blt.n	1e63c <isr+0x4c>
	uint8_t last  = rngp->last;
   1e5fa:	4b17      	ldr	r3, [pc, #92]	; (1e658 <isr+0x68>)
   1e5fc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1e600:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1e604:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1e608:	1a51      	subs	r1, r2, r1
   1e60a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e60e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1e610:	d10d      	bne.n	1e62e <isr+0x3e>
	uint8_t last  = rngp->last;
   1e612:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1e616:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1e61a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1e61e:	1a51      	subs	r1, r2, r1
   1e620:	ea34 0101 	bics.w	r1, r4, r1
   1e624:	d10b      	bne.n	1e63e <isr+0x4e>
   1e626:	4b0d      	ldr	r3, [pc, #52]	; (1e65c <isr+0x6c>)
   1e628:	2201      	movs	r2, #1
   1e62a:	601a      	str	r2, [r3, #0]
   1e62c:	e00e      	b.n	1e64c <isr+0x5c>
	rngp->buffer[last] = byte;
   1e62e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e630:	3201      	adds	r2, #1
   1e632:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e634:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1e638:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1e63c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1e63e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e640:	3201      	adds	r2, #1
   1e642:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e644:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1e648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1e64c:	4804      	ldr	r0, [pc, #16]	; (1e660 <isr+0x70>)
}
   1e64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e652:	f003 bc1b 	b.w	21e8c <z_impl_k_sem_give>
   1e656:	bf00      	nop
   1e658:	20003390 	.word	0x20003390
   1e65c:	4000d004 	.word	0x4000d004
   1e660:	200033a8 	.word	0x200033a8

0001e664 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   1e664:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e666:	460d      	mov	r5, r1
   1e668:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   1e66a:	b940      	cbnz	r0, 1e67e <entropy_cc3xx_rng_get_entropy+0x1a>
   1e66c:	490f      	ldr	r1, [pc, #60]	; (1e6ac <entropy_cc3xx_rng_get_entropy+0x48>)
   1e66e:	4810      	ldr	r0, [pc, #64]	; (1e6b0 <entropy_cc3xx_rng_get_entropy+0x4c>)
   1e670:	221f      	movs	r2, #31
   1e672:	f005 fde3 	bl	2423c <printk>
   1e676:	211f      	movs	r1, #31
   1e678:	480c      	ldr	r0, [pc, #48]	; (1e6ac <entropy_cc3xx_rng_get_entropy+0x48>)
   1e67a:	f006 f891 	bl	247a0 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   1e67e:	b945      	cbnz	r5, 1e692 <entropy_cc3xx_rng_get_entropy+0x2e>
   1e680:	490a      	ldr	r1, [pc, #40]	; (1e6ac <entropy_cc3xx_rng_get_entropy+0x48>)
   1e682:	480b      	ldr	r0, [pc, #44]	; (1e6b0 <entropy_cc3xx_rng_get_entropy+0x4c>)
   1e684:	2220      	movs	r2, #32
   1e686:	f005 fdd9 	bl	2423c <printk>
   1e68a:	2120      	movs	r1, #32
   1e68c:	4807      	ldr	r0, [pc, #28]	; (1e6ac <entropy_cc3xx_rng_get_entropy+0x48>)
   1e68e:	f006 f887 	bl	247a0 <assert_post_action>
#else
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	res = nrf_cc3xx_platform_entropy_get(buffer, length, &olen);
   1e692:	aa01      	add	r2, sp, #4
   1e694:	4621      	mov	r1, r4
   1e696:	4628      	mov	r0, r5
   1e698:	f004 fde8 	bl	2326c <nrf_cc3xx_platform_entropy_get>
	if (olen != length) {
   1e69c:	9b01      	ldr	r3, [sp, #4]
		return -EINVAL;
   1e69e:	429c      	cmp	r4, r3
	}
#endif

	return res;
}
   1e6a0:	bf18      	it	ne
   1e6a2:	f06f 0015 	mvnne.w	r0, #21
   1e6a6:	b003      	add	sp, #12
   1e6a8:	bd30      	pop	{r4, r5, pc}
   1e6aa:	bf00      	nop
   1e6ac:	00031439 	.word	0x00031439
   1e6b0:	0002bced 	.word	0x0002bced

0001e6b4 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1e6b4:	4803      	ldr	r0, [pc, #12]	; (1e6c4 <k_sys_fatal_error_handler+0x10>)
{
   1e6b6:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   1e6b8:	2145      	movs	r1, #69	; 0x45
   1e6ba:	f005 fdbf 	bl	2423c <printk>
	sys_arch_reboot(0);
   1e6be:	2000      	movs	r0, #0
   1e6c0:	f7e8 fbb6 	bl	6e30 <sys_arch_reboot>

	CODE_UNREACHABLE;
   1e6c4:	00031488 	.word	0x00031488

0001e6c8 <handle_series_get>:
}

static void handle_series_get(struct bt_mesh_model *mod,
			      struct bt_mesh_msg_ctx *ctx,
			      struct net_buf_simple *buf)
{
   1e6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
	const struct bt_mesh_sensor_format *col_format;

	if (buf->len < 2) {
   1e6cc:	8893      	ldrh	r3, [r2, #4]
   1e6ce:	2b01      	cmp	r3, #1
{
   1e6d0:	b0a9      	sub	sp, #164	; 0xa4
   1e6d2:	4680      	mov	r8, r0
   1e6d4:	4689      	mov	r9, r1
   1e6d6:	4615      	mov	r5, r2
	if (buf->len < 2) {
   1e6d8:	d941      	bls.n	1e75e <handle_series_get+0x96>
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1e6da:	6984      	ldr	r4, [r0, #24]
		return;
	}

	uint16_t id = net_buf_simple_pull_le16(buf);
   1e6dc:	4610      	mov	r0, r2
   1e6de:	f00b f920 	bl	29922 <net_buf_simple_pull_le16>

	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   1e6e2:	4606      	mov	r6, r0
   1e6e4:	2800      	cmp	r0, #0
   1e6e6:	d03a      	beq.n	1e75e <handle_series_get+0x96>
		return;
	}

	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   1e6e8:	4601      	mov	r1, r0
   1e6ea:	4620      	mov	r0, r4
   1e6ec:	f00b fad5 	bl	29c9a <sensor_get>

	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e6f0:	ab0a      	add	r3, sp, #40	; 0x28
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   1e6f2:	4604      	mov	r4, r0
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e6f4:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SERIES_STATUS);
   1e6f8:	2154      	movs	r1, #84	; 0x54
   1e6fa:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e6fc:	9303      	str	r3, [sp, #12]
   1e6fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SERIES_STATUS);
   1e702:	f009 fcf6 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   1e706:	4631      	mov	r1, r6
   1e708:	a803      	add	r0, sp, #12
   1e70a:	f00b f95b 	bl	299c4 <net_buf_simple_add_le16>

	if (!sensor) {
   1e70e:	b174      	cbz	r4, 1e72e <handle_series_get+0x66>
		goto respond;
	}

	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   1e710:	6820      	ldr	r0, [r4, #0]
   1e712:	f000 fd69 	bl	1f1e8 <bt_mesh_sensor_column_format_get>
	if (!col_format || !sensor->series.columns || !sensor->series.get) {
   1e716:	4607      	mov	r7, r0
   1e718:	b118      	cbz	r0, 1e722 <handle_series_get+0x5a>
   1e71a:	6923      	ldr	r3, [r4, #16]
   1e71c:	b10b      	cbz	r3, 1e722 <handle_series_get+0x5a>
   1e71e:	69a3      	ldr	r3, [r4, #24]
   1e720:	b96b      	cbnz	r3, 1e73e <handle_series_get+0x76>
		BT_WARN("No series support in 0x%04x", sensor->type->id);
   1e722:	6823      	ldr	r3, [r4, #0]
   1e724:	4825      	ldr	r0, [pc, #148]	; (1e7bc <handle_series_get+0xf4>)
   1e726:	881a      	ldrh	r2, [r3, #0]
   1e728:	2157      	movs	r1, #87	; 0x57
   1e72a:	f005 fd87 	bl	2423c <printk>
			return;
		}
	}

respond:
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   1e72e:	2300      	movs	r3, #0
   1e730:	9300      	str	r3, [sp, #0]
   1e732:	aa03      	add	r2, sp, #12
   1e734:	4649      	mov	r1, r9
   1e736:	4640      	mov	r0, r8
   1e738:	f009 fd04 	bl	28144 <bt_mesh_model_send>
   1e73c:	e00f      	b.n	1e75e <handle_series_get+0x96>
	bool ranged = (buf->len != 0);
   1e73e:	88ae      	ldrh	r6, [r5, #4]
	if (buf->len == col_format->size * 2) {
   1e740:	68c3      	ldr	r3, [r0, #12]
   1e742:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
   1e746:	d12a      	bne.n	1e79e <handle_series_get+0xd6>
		err = sensor_ch_decode(buf, col_format, &range.start);
   1e748:	aa06      	add	r2, sp, #24
   1e74a:	4601      	mov	r1, r0
   1e74c:	4628      	mov	r0, r5
   1e74e:	f00b fc01 	bl	29f54 <sensor_ch_decode>
		if (err) {
   1e752:	4602      	mov	r2, r0
   1e754:	b130      	cbz	r0, 1e764 <handle_series_get+0x9c>
			BT_WARN("Range start decode failed: %d", err);
   1e756:	481a      	ldr	r0, [pc, #104]	; (1e7c0 <handle_series_get+0xf8>)
   1e758:	2157      	movs	r1, #87	; 0x57
			BT_WARN("Failed encoding: %d", err);
   1e75a:	f005 fd6f 	bl	2423c <printk>
}
   1e75e:	b029      	add	sp, #164	; 0xa4
   1e760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sensor_ch_decode(buf, col_format, &range.end);
   1e764:	aa08      	add	r2, sp, #32
   1e766:	4639      	mov	r1, r7
   1e768:	4628      	mov	r0, r5
   1e76a:	f00b fbf3 	bl	29f54 <sensor_ch_decode>
		if (err) {
   1e76e:	4602      	mov	r2, r0
   1e770:	b990      	cbnz	r0, 1e798 <handle_series_get+0xd0>
{
   1e772:	2500      	movs	r5, #0
	for (uint32_t i = 0; i < sensor->series.column_count; ++i) {
   1e774:	6963      	ldr	r3, [r4, #20]
   1e776:	429d      	cmp	r5, r3
   1e778:	d2d9      	bcs.n	1e72e <handle_series_get+0x66>
		const struct bt_mesh_sensor_column *col =
   1e77a:	6927      	ldr	r7, [r4, #16]
   1e77c:	eb07 1705 	add.w	r7, r7, r5, lsl #4
		if (ranged &&
   1e780:	b99e      	cbnz	r6, 1e7aa <handle_series_get+0xe2>
		int err = sensor_column_encode(&rsp, sensor, ctx, col);
   1e782:	464a      	mov	r2, r9
   1e784:	463b      	mov	r3, r7
   1e786:	4621      	mov	r1, r4
   1e788:	a803      	add	r0, sp, #12
   1e78a:	f000 fd3b 	bl	1f204 <sensor_column_encode>
		if (err) {
   1e78e:	4602      	mov	r2, r0
   1e790:	b188      	cbz	r0, 1e7b6 <handle_series_get+0xee>
			BT_WARN("Failed encoding: %d", err);
   1e792:	2157      	movs	r1, #87	; 0x57
   1e794:	480b      	ldr	r0, [pc, #44]	; (1e7c4 <handle_series_get+0xfc>)
   1e796:	e7e0      	b.n	1e75a <handle_series_get+0x92>
			BT_WARN("Range end decode failed: %d", err);
   1e798:	2157      	movs	r1, #87	; 0x57
   1e79a:	480b      	ldr	r0, [pc, #44]	; (1e7c8 <handle_series_get+0x100>)
   1e79c:	e7dd      	b.n	1e75a <handle_series_get+0x92>
	} else if (buf->len != 0) {
   1e79e:	2e00      	cmp	r6, #0
   1e7a0:	d0e7      	beq.n	1e772 <handle_series_get+0xaa>
		BT_WARN("Invalid length (%u)", buf->len);
   1e7a2:	4632      	mov	r2, r6
   1e7a4:	2157      	movs	r1, #87	; 0x57
   1e7a6:	4809      	ldr	r0, [pc, #36]	; (1e7cc <handle_series_get+0x104>)
   1e7a8:	e7d7      	b.n	1e75a <handle_series_get+0x92>
		    !bt_mesh_sensor_value_in_column(&col->start, &range)) {
   1e7aa:	a906      	add	r1, sp, #24
   1e7ac:	4638      	mov	r0, r7
   1e7ae:	f00b fc0d 	bl	29fcc <bt_mesh_sensor_value_in_column>
		if (ranged &&
   1e7b2:	2800      	cmp	r0, #0
   1e7b4:	d1e5      	bne.n	1e782 <handle_series_get+0xba>
	for (uint32_t i = 0; i < sensor->series.column_count; ++i) {
   1e7b6:	3501      	adds	r5, #1
   1e7b8:	e7dc      	b.n	1e774 <handle_series_get+0xac>
   1e7ba:	bf00      	nop
   1e7bc:	000315c5 	.word	0x000315c5
   1e7c0:	000315e6 	.word	0x000315e6
   1e7c4:	00031643 	.word	0x00031643
   1e7c8:	00031609 	.word	0x00031609
   1e7cc:	0003162a 	.word	0x0003162a

0001e7d0 <handle_column_get>:
{
   1e7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < 2) {
   1e7d4:	8893      	ldrh	r3, [r2, #4]
   1e7d6:	2b01      	cmp	r3, #1
{
   1e7d8:	b08c      	sub	sp, #48	; 0x30
   1e7da:	4607      	mov	r7, r0
   1e7dc:	460e      	mov	r6, r1
   1e7de:	4690      	mov	r8, r2
	if (buf->len < 2) {
   1e7e0:	d95e      	bls.n	1e8a0 <handle_column_get+0xd0>
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1e7e2:	6984      	ldr	r4, [r0, #24]
	uint16_t id = net_buf_simple_pull_le16(buf);
   1e7e4:	4610      	mov	r0, r2
   1e7e6:	f00b f89c 	bl	29922 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   1e7ea:	4605      	mov	r5, r0
   1e7ec:	2800      	cmp	r0, #0
   1e7ee:	d057      	beq.n	1e8a0 <handle_column_get+0xd0>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   1e7f0:	4601      	mov	r1, r0
   1e7f2:	4620      	mov	r0, r4
   1e7f4:	f00b fa51 	bl	29c9a <sensor_get>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   1e7f8:	ab07      	add	r3, sp, #28
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   1e7fa:	4604      	mov	r4, r0
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   1e7fc:	f44f 1298 	mov.w	r2, #1245184	; 0x130000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS);
   1e800:	2153      	movs	r1, #83	; 0x53
   1e802:	a804      	add	r0, sp, #16
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS,
   1e804:	9304      	str	r3, [sp, #16]
   1e806:	e9cd 2305 	strd	r2, r3, [sp, #20]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_COLUMN_STATUS);
   1e80a:	f009 fc72 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   1e80e:	4629      	mov	r1, r5
   1e810:	a804      	add	r0, sp, #16
   1e812:	f00b f8d7 	bl	299c4 <net_buf_simple_add_le16>
	if (!sensor) {
   1e816:	b174      	cbz	r4, 1e836 <handle_column_get+0x66>
	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   1e818:	6820      	ldr	r0, [r4, #0]
   1e81a:	f000 fce5 	bl	1f1e8 <bt_mesh_sensor_column_format_get>
	if (!col_format || !sensor->series.columns || !sensor->series.get) {
   1e81e:	4605      	mov	r5, r0
   1e820:	b118      	cbz	r0, 1e82a <handle_column_get+0x5a>
   1e822:	6923      	ldr	r3, [r4, #16]
   1e824:	b10b      	cbz	r3, 1e82a <handle_column_get+0x5a>
   1e826:	69a3      	ldr	r3, [r4, #24]
   1e828:	b96b      	cbnz	r3, 1e846 <handle_column_get+0x76>
		BT_WARN("No series support in 0x%04x", sensor->type->id);
   1e82a:	6823      	ldr	r3, [r4, #0]
   1e82c:	481e      	ldr	r0, [pc, #120]	; (1e8a8 <handle_column_get+0xd8>)
   1e82e:	881a      	ldrh	r2, [r3, #0]
   1e830:	2157      	movs	r1, #87	; 0x57
   1e832:	f005 fd03 	bl	2423c <printk>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   1e836:	2300      	movs	r3, #0
   1e838:	9300      	str	r3, [sp, #0]
   1e83a:	aa04      	add	r2, sp, #16
   1e83c:	4631      	mov	r1, r6
   1e83e:	4638      	mov	r0, r7
   1e840:	f009 fc80 	bl	28144 <bt_mesh_model_send>
   1e844:	e02c      	b.n	1e8a0 <handle_column_get+0xd0>
	err = sensor_ch_decode(buf, col_format, &col_x);
   1e846:	4601      	mov	r1, r0
   1e848:	aa02      	add	r2, sp, #8
   1e84a:	4640      	mov	r0, r8
   1e84c:	f00b fb82 	bl	29f54 <sensor_ch_decode>
	if (err) {
   1e850:	bb30      	cbnz	r0, 1e8a0 <handle_column_get+0xd0>
		    series->columns[i].start.val2 == val->val2) {
   1e852:	e9dd e802 	ldrd	lr, r8, [sp, #8]
	for (uint32_t i = 0; i < series->column_count; ++i) {
   1e856:	f8d4 c014 	ldr.w	ip, [r4, #20]
   1e85a:	4560      	cmp	r0, ip
   1e85c:	d109      	bne.n	1e872 <handle_column_get+0xa2>
		BT_WARN("Unknown column");
   1e85e:	2157      	movs	r1, #87	; 0x57
   1e860:	4812      	ldr	r0, [pc, #72]	; (1e8ac <handle_column_get+0xdc>)
   1e862:	f005 fceb 	bl	2423c <printk>
		sensor_ch_encode(&rsp, col_format, &col_x);
   1e866:	aa02      	add	r2, sp, #8
   1e868:	4629      	mov	r1, r5
   1e86a:	a804      	add	r0, sp, #16
   1e86c:	f00b fb53 	bl	29f16 <sensor_ch_encode>
		goto respond;
   1e870:	e7e1      	b.n	1e836 <handle_column_get+0x66>
		if (series->columns[i].start.val1 == val->val1 &&
   1e872:	0102      	lsls	r2, r0, #4
   1e874:	6921      	ldr	r1, [r4, #16]
   1e876:	188b      	adds	r3, r1, r2
   1e878:	588a      	ldr	r2, [r1, r2]
   1e87a:	4572      	cmp	r2, lr
   1e87c:	d102      	bne.n	1e884 <handle_column_get+0xb4>
   1e87e:	685a      	ldr	r2, [r3, #4]
   1e880:	4542      	cmp	r2, r8
   1e882:	d001      	beq.n	1e888 <handle_column_get+0xb8>
	for (uint32_t i = 0; i < series->column_count; ++i) {
   1e884:	3001      	adds	r0, #1
   1e886:	e7e8      	b.n	1e85a <handle_column_get+0x8a>
	err = sensor_column_encode(&rsp, sensor, ctx, col);
   1e888:	4632      	mov	r2, r6
   1e88a:	4621      	mov	r1, r4
   1e88c:	a804      	add	r0, sp, #16
   1e88e:	f000 fcb9 	bl	1f204 <sensor_column_encode>
	if (err) {
   1e892:	4602      	mov	r2, r0
   1e894:	2800      	cmp	r0, #0
   1e896:	d0ce      	beq.n	1e836 <handle_column_get+0x66>
		BT_WARN("Failed encoding sensor column: %d", err);
   1e898:	2157      	movs	r1, #87	; 0x57
   1e89a:	4805      	ldr	r0, [pc, #20]	; (1e8b0 <handle_column_get+0xe0>)
   1e89c:	f005 fcce 	bl	2423c <printk>
}
   1e8a0:	b00c      	add	sp, #48	; 0x30
   1e8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e8a6:	bf00      	nop
   1e8a8:	000315c5 	.word	0x000315c5
   1e8ac:	0003156a 	.word	0x0003156a
   1e8b0:	00031543 	.word	0x00031543

0001e8b4 <value_get>:
	if (!sensor->get) {
   1e8b4:	69c3      	ldr	r3, [r0, #28]
{
   1e8b6:	b570      	push	{r4, r5, r6, lr}
   1e8b8:	4605      	mov	r5, r0
   1e8ba:	4616      	mov	r6, r2
	if (!sensor->get) {
   1e8bc:	b183      	cbz	r3, 1e8e0 <value_get+0x2c>
	err = sensor->get(sensor, ctx, value);
   1e8be:	4798      	blx	r3
	if (err) {
   1e8c0:	4604      	mov	r4, r0
   1e8c2:	b140      	cbz	r0, 1e8d6 <value_get+0x22>
		BT_WARN("Value get for 0x%04x: %d", sensor->type->id, err);
   1e8c4:	682a      	ldr	r2, [r5, #0]
   1e8c6:	4603      	mov	r3, r0
   1e8c8:	8812      	ldrh	r2, [r2, #0]
   1e8ca:	4807      	ldr	r0, [pc, #28]	; (1e8e8 <value_get+0x34>)
   1e8cc:	2157      	movs	r1, #87	; 0x57
   1e8ce:	f005 fcb5 	bl	2423c <printk>
}
   1e8d2:	4620      	mov	r0, r4
   1e8d4:	bd70      	pop	{r4, r5, r6, pc}
	sensor_cadence_update(sensor, value);
   1e8d6:	4631      	mov	r1, r6
   1e8d8:	4628      	mov	r0, r5
   1e8da:	f000 fdcd 	bl	1f478 <sensor_cadence_update>
	return 0;
   1e8de:	e7f8      	b.n	1e8d2 <value_get+0x1e>
		return -ENOTSUP;
   1e8e0:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1e8e4:	e7f5      	b.n	1e8d2 <value_get+0x1e>
   1e8e6:	bf00      	nop
   1e8e8:	00031748 	.word	0x00031748

0001e8ec <buf_status_add>:
{
   1e8ec:	b570      	push	{r4, r5, r6, lr}
   1e8ee:	b08a      	sub	sp, #40	; 0x28
   1e8f0:	460c      	mov	r4, r1
   1e8f2:	4605      	mov	r5, r0
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   1e8f4:	2100      	movs	r1, #0
{
   1e8f6:	4616      	mov	r6, r2
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   1e8f8:	4668      	mov	r0, sp
   1e8fa:	2228      	movs	r2, #40	; 0x28
   1e8fc:	f007 fc5a 	bl	261b4 <memset>
	err = value_get(sensor, ctx, value);
   1e900:	4621      	mov	r1, r4
   1e902:	466a      	mov	r2, sp
   1e904:	4628      	mov	r0, r5
   1e906:	f7ff ffd5 	bl	1e8b4 <value_get>
	if (err) {
   1e90a:	4604      	mov	r4, r0
   1e90c:	b140      	cbz	r0, 1e920 <buf_status_add+0x34>
		sensor_status_id_encode(buf, 0, sensor->type->id);
   1e90e:	682b      	ldr	r3, [r5, #0]
   1e910:	2100      	movs	r1, #0
   1e912:	881a      	ldrh	r2, [r3, #0]
   1e914:	4630      	mov	r0, r6
   1e916:	f00b facf 	bl	29eb8 <sensor_status_id_encode>
}
   1e91a:	4620      	mov	r0, r4
   1e91c:	b00a      	add	sp, #40	; 0x28
   1e91e:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_status_encode(buf, sensor, value);
   1e920:	466a      	mov	r2, sp
   1e922:	4629      	mov	r1, r5
   1e924:	4630      	mov	r0, r6
   1e926:	f00b fb33 	bl	29f90 <sensor_status_encode>
	if (err) {
   1e92a:	4604      	mov	r4, r0
   1e92c:	2800      	cmp	r0, #0
   1e92e:	d0f4      	beq.n	1e91a <buf_status_add+0x2e>
		BT_WARN("Sensor value encode for 0x%04x: %d", sensor->type->id,
   1e930:	682a      	ldr	r2, [r5, #0]
   1e932:	4603      	mov	r3, r0
   1e934:	8812      	ldrh	r2, [r2, #0]
   1e936:	4802      	ldr	r0, [pc, #8]	; (1e940 <buf_status_add+0x54>)
   1e938:	2157      	movs	r1, #87	; 0x57
   1e93a:	f005 fc7f 	bl	2423c <printk>
   1e93e:	e7e6      	b.n	1e90e <buf_status_add+0x22>
   1e940:	000314c6 	.word	0x000314c6

0001e944 <handle_get>:
{
   1e944:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len != 0 && buf->len != 2) {
   1e946:	8893      	ldrh	r3, [r2, #4]
   1e948:	f023 0302 	bic.w	r3, r3, #2
{
   1e94c:	b0a5      	sub	sp, #148	; 0x94
   1e94e:	4606      	mov	r6, r0
   1e950:	460d      	mov	r5, r1
   1e952:	4614      	mov	r4, r2
	if (buf->len != 0 && buf->len != 2) {
   1e954:	bb1b      	cbnz	r3, 1e99e <handle_get+0x5a>
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e956:	ab06      	add	r3, sp, #24
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1e958:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e95a:	9303      	str	r3, [sp, #12]
   1e95c:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_STATUS);
   1e960:	2152      	movs	r1, #82	; 0x52
   1e962:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e964:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_STATUS);
   1e968:	f009 fbc3 	bl	280f2 <bt_mesh_model_msg_init>
	if (buf->len == 2) {
   1e96c:	88a3      	ldrh	r3, [r4, #4]
   1e96e:	2b02      	cmp	r3, #2
   1e970:	d122      	bne.n	1e9b8 <handle_get+0x74>
		uint16_t id = net_buf_simple_pull_le16(buf);
   1e972:	4620      	mov	r0, r4
   1e974:	f00a ffd5 	bl	29922 <net_buf_simple_pull_le16>
		if (id == BT_MESH_PROP_ID_PROHIBITED) {
   1e978:	4604      	mov	r4, r0
   1e97a:	b180      	cbz	r0, 1e99e <handle_get+0x5a>
		sensor = sensor_get(srv, id);
   1e97c:	4601      	mov	r1, r0
   1e97e:	4638      	mov	r0, r7
   1e980:	f00b f98b 	bl	29c9a <sensor_get>
		if (sensor) {
   1e984:	4607      	mov	r7, r0
   1e986:	b160      	cbz	r0, 1e9a2 <handle_get+0x5e>
			buf_status_add(sensor, ctx, &rsp);
   1e988:	aa03      	add	r2, sp, #12
   1e98a:	4629      	mov	r1, r5
   1e98c:	f7ff ffae 	bl	1e8ec <buf_status_add>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   1e990:	2300      	movs	r3, #0
   1e992:	9300      	str	r3, [sp, #0]
   1e994:	aa03      	add	r2, sp, #12
   1e996:	4629      	mov	r1, r5
   1e998:	4630      	mov	r0, r6
   1e99a:	f009 fbd3 	bl	28144 <bt_mesh_model_send>
}
   1e99e:	b025      	add	sp, #148	; 0x94
   1e9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			BT_WARN("Unknown sensor ID 0x%04x", id);
   1e9a2:	4622      	mov	r2, r4
   1e9a4:	2157      	movs	r1, #87	; 0x57
   1e9a6:	480b      	ldr	r0, [pc, #44]	; (1e9d4 <handle_get+0x90>)
   1e9a8:	f005 fc48 	bl	2423c <printk>
			sensor_status_id_encode(&rsp, 0, id);
   1e9ac:	4622      	mov	r2, r4
   1e9ae:	4639      	mov	r1, r7
   1e9b0:	a803      	add	r0, sp, #12
   1e9b2:	f00b fa81 	bl	29eb8 <sensor_status_id_encode>
   1e9b6:	e7eb      	b.n	1e990 <handle_get+0x4c>
	SENSOR_FOR_EACH(&srv->sensors, sensor) {
   1e9b8:	687c      	ldr	r4, [r7, #4]
   1e9ba:	2c00      	cmp	r4, #0
   1e9bc:	d0e8      	beq.n	1e990 <handle_get+0x4c>
   1e9be:	3c48      	subs	r4, #72	; 0x48
   1e9c0:	2c00      	cmp	r4, #0
   1e9c2:	d0e5      	beq.n	1e990 <handle_get+0x4c>
		buf_status_add(sensor, ctx, &rsp);
   1e9c4:	4620      	mov	r0, r4
   1e9c6:	aa03      	add	r2, sp, #12
   1e9c8:	4629      	mov	r1, r5
   1e9ca:	f7ff ff8f 	bl	1e8ec <buf_status_add>
   1e9ce:	6ca4      	ldr	r4, [r4, #72]	; 0x48
   1e9d0:	e7f3      	b.n	1e9ba <handle_get+0x76>
   1e9d2:	bf00      	nop
   1e9d4:	000315a7 	.word	0x000315a7

0001e9d8 <handle_descriptor_get>:
{
   1e9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len != 0 && buf->len != 2) {
   1e9da:	8893      	ldrh	r3, [r2, #4]
   1e9dc:	f023 0302 	bic.w	r3, r3, #2
{
   1e9e0:	b0a5      	sub	sp, #148	; 0x94
   1e9e2:	4605      	mov	r5, r0
   1e9e4:	460e      	mov	r6, r1
   1e9e6:	4614      	mov	r4, r2
	if (buf->len != 0 && buf->len != 2) {
   1e9e8:	bb13      	cbnz	r3, 1ea30 <handle_descriptor_get+0x58>
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e9ea:	ab06      	add	r3, sp, #24
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1e9ec:	6987      	ldr	r7, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e9ee:	9303      	str	r3, [sp, #12]
   1e9f0:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_DESCRIPTOR_STATUS);
   1e9f4:	2151      	movs	r1, #81	; 0x51
   1e9f6:	a803      	add	r0, sp, #12
	NET_BUF_SIMPLE_DEFINE(rsp, BT_MESH_TX_SDU_MAX);
   1e9f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_DESCRIPTOR_STATUS);
   1e9fc:	f009 fb79 	bl	280f2 <bt_mesh_model_msg_init>
	if (buf->len == 2) {
   1ea00:	88a3      	ldrh	r3, [r4, #4]
   1ea02:	2b02      	cmp	r3, #2
   1ea04:	d11b      	bne.n	1ea3e <handle_descriptor_get+0x66>
		uint16_t id = net_buf_simple_pull_le16(buf);
   1ea06:	4620      	mov	r0, r4
   1ea08:	f00a ff8b 	bl	29922 <net_buf_simple_pull_le16>
		if (id == BT_MESH_PROP_ID_PROHIBITED) {
   1ea0c:	4602      	mov	r2, r0
   1ea0e:	b178      	cbz	r0, 1ea30 <handle_descriptor_get+0x58>
		sensor = sensor_get(srv, id);
   1ea10:	4601      	mov	r1, r0
   1ea12:	4638      	mov	r0, r7
   1ea14:	f00b f941 	bl	29c9a <sensor_get>
		if (sensor) {
   1ea18:	4601      	mov	r1, r0
   1ea1a:	b158      	cbz	r0, 1ea34 <handle_descriptor_get+0x5c>
			sensor_descriptor_encode(&rsp, sensor);
   1ea1c:	a803      	add	r0, sp, #12
   1ea1e:	f7e4 fd8b 	bl	3538 <sensor_descriptor_encode>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   1ea22:	2300      	movs	r3, #0
   1ea24:	9300      	str	r3, [sp, #0]
   1ea26:	aa03      	add	r2, sp, #12
   1ea28:	4631      	mov	r1, r6
   1ea2a:	4628      	mov	r0, r5
   1ea2c:	f009 fb8a 	bl	28144 <bt_mesh_model_send>
}
   1ea30:	b025      	add	sp, #148	; 0x94
   1ea32:	bdf0      	pop	{r4, r5, r6, r7, pc}
			net_buf_simple_add_le16(&rsp, id);
   1ea34:	4611      	mov	r1, r2
   1ea36:	a803      	add	r0, sp, #12
   1ea38:	f00a ffc4 	bl	299c4 <net_buf_simple_add_le16>
   1ea3c:	e7f1      	b.n	1ea22 <handle_descriptor_get+0x4a>
	SENSOR_FOR_EACH(&srv->sensors, sensor) {
   1ea3e:	687c      	ldr	r4, [r7, #4]
   1ea40:	2c00      	cmp	r4, #0
   1ea42:	d0ee      	beq.n	1ea22 <handle_descriptor_get+0x4a>
   1ea44:	3c48      	subs	r4, #72	; 0x48
   1ea46:	2c00      	cmp	r4, #0
   1ea48:	d0eb      	beq.n	1ea22 <handle_descriptor_get+0x4a>
		if (net_buf_simple_tailroom(&rsp) < (8 + BT_MESH_MIC_SHORT)) {
   1ea4a:	a803      	add	r0, sp, #12
   1ea4c:	f00a ff9f 	bl	2998e <net_buf_simple_tailroom>
   1ea50:	280b      	cmp	r0, #11
   1ea52:	d804      	bhi.n	1ea5e <handle_descriptor_get+0x86>
			BT_WARN("Not enough room for all descriptors");
   1ea54:	2157      	movs	r1, #87	; 0x57
   1ea56:	4805      	ldr	r0, [pc, #20]	; (1ea6c <handle_descriptor_get+0x94>)
   1ea58:	f005 fbf0 	bl	2423c <printk>
   1ea5c:	e7e1      	b.n	1ea22 <handle_descriptor_get+0x4a>
		sensor_descriptor_encode(&rsp, sensor);
   1ea5e:	4621      	mov	r1, r4
   1ea60:	a803      	add	r0, sp, #12
   1ea62:	f7e4 fd69 	bl	3538 <sensor_descriptor_encode>
   1ea66:	6ca4      	ldr	r4, [r4, #72]	; 0x48
   1ea68:	e7ea      	b.n	1ea40 <handle_descriptor_get+0x68>
   1ea6a:	bf00      	nop
   1ea6c:	0003157e 	.word	0x0003157e

0001ea70 <setting_set>:
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
}

static void setting_set(struct bt_mesh_model *mod, struct bt_mesh_msg_ctx *ctx,
			struct net_buf_simple *buf, bool ack)
{
   1ea70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1ea74:	6985      	ldr	r5, [r0, #24]
{
   1ea76:	b098      	sub	sp, #96	; 0x60
   1ea78:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   1ea7a:	4610      	mov	r0, r2
{
   1ea7c:	4617      	mov	r7, r2
   1ea7e:	4688      	mov	r8, r1
   1ea80:	4699      	mov	r9, r3
	uint16_t id = net_buf_simple_pull_le16(buf);
   1ea82:	f00a ff4e 	bl	29922 <net_buf_simple_pull_le16>
   1ea86:	4604      	mov	r4, r0
	uint16_t setting_id = net_buf_simple_pull_le16(buf);
   1ea88:	4638      	mov	r0, r7
   1ea8a:	f00a ff4a 	bl	29922 <net_buf_simple_pull_le16>
   1ea8e:	4682      	mov	sl, r0
	int err;

	if (id == BT_MESH_PROP_ID_PROHIBITED ||
   1ea90:	2c00      	cmp	r4, #0
   1ea92:	d067      	beq.n	1eb64 <setting_set+0xf4>
   1ea94:	2800      	cmp	r0, #0
   1ea96:	d065      	beq.n	1eb64 <setting_set+0xf4>
	    setting_id == BT_MESH_PROP_ID_PROHIBITED) {
		return;
	}

	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   1ea98:	ab06      	add	r3, sp, #24
   1ea9a:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
				 BT_MESH_SENSOR_MSG_MAXLEN_SETTING_STATUS);
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   1ea9e:	215b      	movs	r1, #91	; 0x5b
   1eaa0:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   1eaa2:	9303      	str	r3, [sp, #12]
   1eaa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   1eaa8:	f009 fb23 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   1eaac:	4621      	mov	r1, r4
   1eaae:	a803      	add	r0, sp, #12
   1eab0:	f00a ff88 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&rsp, setting_id);
   1eab4:	4651      	mov	r1, sl
   1eab6:	a803      	add	r0, sp, #12
   1eab8:	f00a ff84 	bl	299c4 <net_buf_simple_add_le16>

	const struct bt_mesh_sensor_setting *setting;
	struct bt_mesh_sensor *sensor;

	sensor = sensor_get(srv, id);
   1eabc:	4628      	mov	r0, r5
   1eabe:	4621      	mov	r1, r4
   1eac0:	f00b f8eb 	bl	29c9a <sensor_get>
	if (!sensor) {
   1eac4:	4605      	mov	r5, r0
   1eac6:	b128      	cbz	r0, 1ead4 <setting_set+0x64>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   1eac8:	68c0      	ldr	r0, [r0, #12]
   1eaca:	2300      	movs	r3, #0
		if (sensor->settings.list[i].type->id == setting_id) {
   1eacc:	f04f 0c0c 	mov.w	ip, #12
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   1ead0:	4283      	cmp	r3, r0
   1ead2:	d10a      	bne.n	1eaea <setting_set+0x7a>
	BT_DBG("0x%04x: 0x%04x", id, setting_id);

	model_send(mod, NULL, &rsp);

respond:
	if (ack) {
   1ead4:	f1b9 0f00 	cmp.w	r9, #0
   1ead8:	d044      	beq.n	1eb64 <setting_set+0xf4>
		bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   1eada:	2300      	movs	r3, #0
   1eadc:	9300      	str	r3, [sp, #0]
   1eade:	aa03      	add	r2, sp, #12
   1eae0:	4641      	mov	r1, r8
   1eae2:	4630      	mov	r0, r6
   1eae4:	f009 fb2e 	bl	28144 <bt_mesh_model_send>
   1eae8:	e03c      	b.n	1eb64 <setting_set+0xf4>
		if (sensor->settings.list[i].type->id == setting_id) {
   1eaea:	fb0c f203 	mul.w	r2, ip, r3
   1eaee:	68a9      	ldr	r1, [r5, #8]
   1eaf0:	188c      	adds	r4, r1, r2
   1eaf2:	5889      	ldr	r1, [r1, r2]
   1eaf4:	880a      	ldrh	r2, [r1, #0]
   1eaf6:	4552      	cmp	r2, sl
   1eaf8:	d024      	beq.n	1eb44 <setting_set+0xd4>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   1eafa:	3301      	adds	r3, #1
   1eafc:	e7e8      	b.n	1ead0 <setting_set+0x60>
	setting->set(sensor, setting, ctx, values);
   1eafe:	ab0e      	add	r3, sp, #56	; 0x38
   1eb00:	4642      	mov	r2, r8
   1eb02:	4621      	mov	r1, r4
   1eb04:	4628      	mov	r0, r5
   1eb06:	68a7      	ldr	r7, [r4, #8]
   1eb08:	47b8      	blx	r7
	net_buf_simple_add_u8(&rsp, 0x03); /* RW */
   1eb0a:	2103      	movs	r1, #3
   1eb0c:	a803      	add	r0, sp, #12
	uint8_t minlen = rsp.len;
   1eb0e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	net_buf_simple_add_u8(&rsp, 0x03); /* RW */
   1eb12:	f00a ff50 	bl	299b6 <net_buf_simple_add_u8>
	err = sensor_value_encode(&rsp, setting->type, values);
   1eb16:	aa0e      	add	r2, sp, #56	; 0x38
   1eb18:	6821      	ldr	r1, [r4, #0]
   1eb1a:	a803      	add	r0, sp, #12
   1eb1c:	f00b fa04 	bl	29f28 <sensor_value_encode>
	if (err) {
   1eb20:	4603      	mov	r3, r0
   1eb22:	b148      	cbz	r0, 1eb38 <setting_set+0xc8>
		BT_WARN("Error encoding sensor setting 0x%04x: %d",
   1eb24:	6822      	ldr	r2, [r4, #0]
   1eb26:	4811      	ldr	r0, [pc, #68]	; (1eb6c <setting_set+0xfc>)
   1eb28:	8812      	ldrh	r2, [r2, #0]
   1eb2a:	2157      	movs	r1, #87	; 0x57
		rsp.len = minlen;
   1eb2c:	b2ed      	uxtb	r5, r5
		BT_WARN("Error encoding sensor setting 0x%04x: %d",
   1eb2e:	f005 fb85 	bl	2423c <printk>
		rsp.len = minlen;
   1eb32:	f8ad 5010 	strh.w	r5, [sp, #16]
		goto respond;
   1eb36:	e7cd      	b.n	1ead4 <setting_set+0x64>
	model_send(mod, NULL, &rsp);
   1eb38:	4601      	mov	r1, r0
   1eb3a:	aa03      	add	r2, sp, #12
   1eb3c:	4630      	mov	r0, r6
   1eb3e:	f00b f88f 	bl	29c60 <model_send>
   1eb42:	e7c7      	b.n	1ead4 <setting_set+0x64>
	if (!setting || !setting->set) {
   1eb44:	68a3      	ldr	r3, [r4, #8]
   1eb46:	2b00      	cmp	r3, #0
   1eb48:	d0c4      	beq.n	1ead4 <setting_set+0x64>
	err = sensor_value_decode(buf, setting->type, values);
   1eb4a:	aa0e      	add	r2, sp, #56	; 0x38
   1eb4c:	4638      	mov	r0, r7
   1eb4e:	f00b fa09 	bl	29f64 <sensor_value_decode>
	if (err) {
   1eb52:	4603      	mov	r3, r0
   1eb54:	2800      	cmp	r0, #0
   1eb56:	d0d2      	beq.n	1eafe <setting_set+0x8e>
		BT_WARN("Error decoding sensor setting 0x%04x: %d",
   1eb58:	6822      	ldr	r2, [r4, #0]
   1eb5a:	4805      	ldr	r0, [pc, #20]	; (1eb70 <setting_set+0x100>)
   1eb5c:	8812      	ldrh	r2, [r2, #0]
   1eb5e:	2157      	movs	r1, #87	; 0x57
   1eb60:	f005 fb6c 	bl	2423c <printk>
	}
}
   1eb64:	b018      	add	sp, #96	; 0x60
   1eb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eb6a:	bf00      	nop
   1eb6c:	00031707 	.word	0x00031707
   1eb70:	000316d9 	.word	0x000316d9

0001eb74 <handle_cadence_get>:
{
   1eb74:	b570      	push	{r4, r5, r6, lr}
   1eb76:	b08c      	sub	sp, #48	; 0x30
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   1eb78:	ab05      	add	r3, sp, #20
{
   1eb7a:	4614      	mov	r4, r2
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1eb7c:	6985      	ldr	r5, [r0, #24]
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   1eb7e:	9302      	str	r3, [sp, #8]
   1eb80:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   1eb84:	a802      	add	r0, sp, #8
{
   1eb86:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   1eb88:	2157      	movs	r1, #87	; 0x57
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   1eb8a:	e9cd 2303 	strd	r2, r3, [sp, #12]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   1eb8e:	f009 fab0 	bl	280f2 <bt_mesh_model_msg_init>
	id = net_buf_simple_pull_le16(buf);
   1eb92:	4620      	mov	r0, r4
   1eb94:	f00a fec5 	bl	29922 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   1eb98:	4604      	mov	r4, r0
   1eb9a:	b330      	cbz	r0, 1ebea <handle_cadence_get+0x76>
	net_buf_simple_add_le16(&rsp, id);
   1eb9c:	4601      	mov	r1, r0
   1eb9e:	a802      	add	r0, sp, #8
   1eba0:	f00a ff10 	bl	299c4 <net_buf_simple_add_le16>
	sensor = sensor_get(srv, id);
   1eba4:	4621      	mov	r1, r4
   1eba6:	4628      	mov	r0, r5
   1eba8:	f00b f877 	bl	29c9a <sensor_get>
	if (!sensor || sensor->type->channel_count != 1) {
   1ebac:	b118      	cbz	r0, 1ebb6 <handle_cadence_get+0x42>
   1ebae:	6801      	ldr	r1, [r0, #0]
   1ebb0:	78cb      	ldrb	r3, [r1, #3]
   1ebb2:	2b01      	cmp	r3, #1
   1ebb4:	d00c      	beq.n	1ebd0 <handle_cadence_get+0x5c>
		BT_WARN("Cadence not supported");
   1ebb6:	2157      	movs	r1, #87	; 0x57
   1ebb8:	480d      	ldr	r0, [pc, #52]	; (1ebf0 <handle_cadence_get+0x7c>)
   1ebba:	f005 fb3f 	bl	2423c <printk>
	bt_mesh_model_send(srv->model, ctx, &rsp, NULL, NULL);
   1ebbe:	2300      	movs	r3, #0
   1ebc0:	9300      	str	r3, [sp, #0]
   1ebc2:	aa02      	add	r2, sp, #8
   1ebc4:	4631      	mov	r1, r6
   1ebc6:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
   1ebca:	f009 fabb 	bl	28144 <bt_mesh_model_send>
   1ebce:	e00c      	b.n	1ebea <handle_cadence_get+0x76>
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   1ebd0:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
   1ebd4:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
				    &sensor->state.threshold);
   1ebd8:	3020      	adds	r0, #32
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   1ebda:	9000      	str	r0, [sp, #0]
   1ebdc:	f002 020f 	and.w	r2, r2, #15
   1ebe0:	a802      	add	r0, sp, #8
   1ebe2:	f000 fba1 	bl	1f328 <sensor_cadence_encode>
	if (err) {
   1ebe6:	2800      	cmp	r0, #0
   1ebe8:	d0e9      	beq.n	1ebbe <handle_cadence_get+0x4a>
}
   1ebea:	b00c      	add	sp, #48	; 0x30
   1ebec:	bd70      	pop	{r4, r5, r6, pc}
   1ebee:	bf00      	nop
   1ebf0:	00031528 	.word	0x00031528

0001ebf4 <cadence_set>:
{
   1ebf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebf8:	b0af      	sub	sp, #188	; 0xbc
   1ebfa:	4616      	mov	r6, r2
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1ebfc:	6987      	ldr	r7, [r0, #24]
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   1ebfe:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
{
   1ec02:	4680      	mov	r8, r0
   1ec04:	4689      	mov	r9, r1
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   1ec06:	a803      	add	r0, sp, #12
   1ec08:	2157      	movs	r1, #87	; 0x57
{
   1ec0a:	469a      	mov	sl, r3
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS,
   1ec0c:	ab09      	add	r3, sp, #36	; 0x24
   1ec0e:	9303      	str	r3, [sp, #12]
   1ec10:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_CADENCE_STATUS);
   1ec14:	f009 fa6d 	bl	280f2 <bt_mesh_model_msg_init>
	id = net_buf_simple_pull_le16(buf);
   1ec18:	4630      	mov	r0, r6
   1ec1a:	f00a fe82 	bl	29922 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   1ec1e:	4604      	mov	r4, r0
   1ec20:	b358      	cbz	r0, 1ec7a <cadence_set+0x86>
	net_buf_simple_add_le16(&rsp, id);
   1ec22:	4601      	mov	r1, r0
   1ec24:	a803      	add	r0, sp, #12
   1ec26:	f00a fecd 	bl	299c4 <net_buf_simple_add_le16>
	sensor = sensor_get(srv, id);
   1ec2a:	4621      	mov	r1, r4
   1ec2c:	4638      	mov	r0, r7
   1ec2e:	f00b f834 	bl	29c9a <sensor_get>
	if (!sensor || sensor->type->channel_count != 1) {
   1ec32:	4605      	mov	r5, r0
   1ec34:	b118      	cbz	r0, 1ec3e <cadence_set+0x4a>
   1ec36:	6801      	ldr	r1, [r0, #0]
   1ec38:	78cb      	ldrb	r3, [r1, #3]
   1ec3a:	2b01      	cmp	r3, #1
   1ec3c:	d00e      	beq.n	1ec5c <cadence_set+0x68>
		BT_WARN("Cadence not supported");
   1ec3e:	2157      	movs	r1, #87	; 0x57
   1ec40:	483f      	ldr	r0, [pc, #252]	; (1ed40 <cadence_set+0x14c>)
   1ec42:	f005 fafb 	bl	2423c <printk>
	if (ack) {
   1ec46:	f1ba 0f00 	cmp.w	sl, #0
   1ec4a:	d016      	beq.n	1ec7a <cadence_set+0x86>
		bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   1ec4c:	2300      	movs	r3, #0
   1ec4e:	9300      	str	r3, [sp, #0]
   1ec50:	aa03      	add	r2, sp, #12
   1ec52:	4649      	mov	r1, r9
   1ec54:	4640      	mov	r0, r8
   1ec56:	f009 fa75 	bl	28144 <bt_mesh_model_send>
   1ec5a:	e00e      	b.n	1ec7a <cadence_set+0x86>
	err = sensor_cadence_decode(buf, sensor->type, &period_div, &min_int,
   1ec5c:	ac10      	add	r4, sp, #64	; 0x40
   1ec5e:	4630      	mov	r0, r6
   1ec60:	9400      	str	r4, [sp, #0]
   1ec62:	f10d 030b 	add.w	r3, sp, #11
   1ec66:	f10d 020a 	add.w	r2, sp, #10
   1ec6a:	f000 fba1 	bl	1f3b0 <sensor_cadence_decode>
	if (err) {
   1ec6e:	4606      	mov	r6, r0
   1ec70:	b130      	cbz	r0, 1ec80 <cadence_set+0x8c>
		BT_WARN("Invalid cadence");
   1ec72:	2157      	movs	r1, #87	; 0x57
   1ec74:	4833      	ldr	r0, [pc, #204]	; (1ed44 <cadence_set+0x150>)
   1ec76:	f005 fae1 	bl	2423c <printk>
}
   1ec7a:	b02f      	add	sp, #188	; 0xbc
   1ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sensor->state.min_int = min_int;
   1ec80:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1ec84:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
	sensor->state.pub_div = period_div;
   1ec88:	f89d 200a 	ldrb.w	r2, [sp, #10]
   1ec8c:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
   1ec90:	f362 0303 	bfi	r3, r2, #0, #4
   1ec94:	f885 3057 	strb.w	r3, [r5, #87]	; 0x57
	sensor->state.threshold = threshold;
   1ec98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ec9a:	f105 0c20 	add.w	ip, r5, #32
   1ec9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1eca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1eca4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1eca8:	e894 0003 	ldmia.w	r4, {r0, r1}
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   1ecac:	ab1a      	add	r3, sp, #104	; 0x68
   1ecae:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
	sensor->state.threshold = threshold;
   1ecb2:	e88c 0003 	stmia.w	ip, {r0, r1}
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   1ecb6:	e9cd 2307 	strd	r2, r3, [sp, #28]
   1ecba:	9306      	str	r3, [sp, #24]
   1ecbc:	f105 0b20 	add.w	fp, r5, #32
	for (int i = 0; i < srv->sensor_count; ++i) {
   1ecc0:	7bbb      	ldrb	r3, [r7, #14]
   1ecc2:	429e      	cmp	r6, r3
   1ecc4:	db0f      	blt.n	1ece6 <cadence_set+0xf2>
	    bt_mesh_model_data_store(srv->model, false, NULL, buf.data,
   1ecc6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1ecca:	9300      	str	r3, [sp, #0]
   1eccc:	2200      	movs	r2, #0
   1ecce:	9b06      	ldr	r3, [sp, #24]
   1ecd0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
   1ecd4:	4611      	mov	r1, r2
   1ecd6:	f7f2 fccb 	bl	11670 <bt_mesh_model_data_store>
	if (IS_ENABLED(CONFIG_SETTINGS) &&
   1ecda:	b1d0      	cbz	r0, 1ed12 <cadence_set+0x11e>
		BT_ERR("Sensor server data store failed");
   1ecdc:	2145      	movs	r1, #69	; 0x45
   1ecde:	481a      	ldr	r0, [pc, #104]	; (1ed48 <cadence_set+0x154>)
   1ece0:	f005 faac 	bl	2423c <printk>
   1ece4:	e015      	b.n	1ed12 <cadence_set+0x11e>
		const struct bt_mesh_sensor *s = srv->sensor_array[i];
   1ece6:	683b      	ldr	r3, [r7, #0]
   1ece8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
		net_buf_simple_add_le16(&buf, s->type->id);
   1ecec:	6823      	ldr	r3, [r4, #0]
   1ecee:	a806      	add	r0, sp, #24
   1ecf0:	8819      	ldrh	r1, [r3, #0]
   1ecf2:	f00a fe67 	bl	299c4 <net_buf_simple_add_le16>
		err = sensor_cadence_encode(&buf, s->type, s->state.pub_div,
   1ecf6:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
   1ecfa:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   1ecfe:	f104 0120 	add.w	r1, r4, #32
   1ed02:	9100      	str	r1, [sp, #0]
   1ed04:	f002 020f 	and.w	r2, r2, #15
   1ed08:	6821      	ldr	r1, [r4, #0]
   1ed0a:	a806      	add	r0, sp, #24
   1ed0c:	f000 fb0c 	bl	1f328 <sensor_cadence_encode>
		if (err) {
   1ed10:	b198      	cbz	r0, 1ed3a <cadence_set+0x146>
	err = sensor_cadence_encode(&rsp, sensor->type, sensor->state.pub_div,
   1ed12:	f895 2057 	ldrb.w	r2, [r5, #87]	; 0x57
   1ed16:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
   1ed1a:	f8cd b000 	str.w	fp, [sp]
   1ed1e:	6829      	ldr	r1, [r5, #0]
   1ed20:	f002 020f 	and.w	r2, r2, #15
   1ed24:	a803      	add	r0, sp, #12
   1ed26:	f000 faff 	bl	1f328 <sensor_cadence_encode>
	if (err) {
   1ed2a:	4601      	mov	r1, r0
   1ed2c:	2800      	cmp	r0, #0
   1ed2e:	d1a4      	bne.n	1ec7a <cadence_set+0x86>
	model_send(mod, NULL, &rsp);
   1ed30:	aa03      	add	r2, sp, #12
   1ed32:	4640      	mov	r0, r8
   1ed34:	f00a ff94 	bl	29c60 <model_send>
   1ed38:	e785      	b.n	1ec46 <cadence_set+0x52>
	for (int i = 0; i < srv->sensor_count; ++i) {
   1ed3a:	3601      	adds	r6, #1
   1ed3c:	e7c0      	b.n	1ecc0 <cadence_set+0xcc>
   1ed3e:	bf00      	nop
   1ed40:	00031528 	.word	0x00031528
   1ed44:	000314ee 	.word	0x000314ee
   1ed48:	00031503 	.word	0x00031503

0001ed4c <sensor_srv_reset>:

	return 0;
}

static void sensor_srv_reset(struct bt_mesh_model *mod)
{
   1ed4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1ed4e:	6985      	ldr	r5, [r0, #24]

	for (int i = 0; i < srv->sensor_count; ++i) {
		struct bt_mesh_sensor *s = srv->sensor_array[i];

		s->state.pub_div = 0;
		s->state.min_int = 0;
   1ed50:	4e13      	ldr	r6, [pc, #76]	; (1eda0 <sensor_srv_reset+0x54>)
	net_buf_simple_reset(srv->pub.msg);
   1ed52:	6a2b      	ldr	r3, [r5, #32]
	buf->len  = 0U;
   1ed54:	2400      	movs	r4, #0
	buf->data = buf->__buf;
   1ed56:	689a      	ldr	r2, [r3, #8]
   1ed58:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   1ed5a:	809c      	strh	r4, [r3, #4]
	net_buf_simple_reset(srv->setup_pub.msg);
   1ed5c:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
	buf->data = buf->__buf;
   1ed60:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   1ed62:	809c      	strh	r4, [r3, #4]
	buf->data = buf->__buf;
   1ed64:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < srv->sensor_count; ++i) {
   1ed66:	7bab      	ldrb	r3, [r5, #14]
   1ed68:	42a3      	cmp	r3, r4
   1ed6a:	dc09      	bgt.n	1ed80 <sensor_srv_reset+0x34>
		memset(&s->state.threshold, 0, sizeof(s->state.threshold));
	}

	if (IS_ENABLED(CONFIG_SETTINGS)) {
		(void)bt_mesh_model_data_store(srv->model, false, NULL, NULL,
   1ed6c:	2300      	movs	r3, #0
   1ed6e:	9300      	str	r3, [sp, #0]
   1ed70:	461a      	mov	r2, r3
   1ed72:	4619      	mov	r1, r3
   1ed74:	f8d5 013c 	ldr.w	r0, [r5, #316]	; 0x13c
   1ed78:	f7f2 fc7a 	bl	11670 <bt_mesh_model_data_store>
					       0);
	}
}
   1ed7c:	b002      	add	sp, #8
   1ed7e:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_mesh_sensor *s = srv->sensor_array[i];
   1ed80:	682b      	ldr	r3, [r5, #0]
   1ed82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
		s->state.min_int = 0;
   1ed86:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
   1ed8a:	4033      	ands	r3, r6
   1ed8c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
		memset(&s->state.threshold, 0, sizeof(s->state.threshold));
   1ed90:	2228      	movs	r2, #40	; 0x28
   1ed92:	2100      	movs	r1, #0
   1ed94:	3020      	adds	r0, #32
   1ed96:	f007 fa0d 	bl	261b4 <memset>
	for (int i = 0; i < srv->sensor_count; ++i) {
   1ed9a:	3401      	adds	r4, #1
   1ed9c:	e7e3      	b.n	1ed66 <sensor_srv_reset+0x1a>
   1ed9e:	bf00      	nop
   1eda0:	fffff000 	.word	0xfffff000

0001eda4 <sensor_srv_init>:
{
   1eda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1eda8:	6984      	ldr	r4, [r0, #24]
	list->head = NULL;
   1edaa:	2500      	movs	r5, #0
	list->tail = NULL;
   1edac:	e9c4 5501 	strd	r5, r5, [r4, #4]
{
   1edb0:	4606      	mov	r6, r0
	uint16_t min_id = 0;
   1edb2:	462a      	mov	r2, r5
	parent->next = child;
   1edb4:	46ae      	mov	lr, r5
	for (int count = 0; count < srv->sensor_count; ++count) {
   1edb6:	f894 c00e 	ldrb.w	ip, [r4, #14]
   1edba:	4565      	cmp	r5, ip
   1edbc:	da19      	bge.n	1edf2 <sensor_srv_init+0x4e>
		for (int j = 0; j < srv->sensor_count; ++j) {
   1edbe:	2100      	movs	r1, #0
			if (srv->sensor_array[j]->type->id >= min_id &&
   1edc0:	f8d4 9000 	ldr.w	r9, [r4]
		struct bt_mesh_sensor *best = NULL;
   1edc4:	460b      	mov	r3, r1
			if (srv->sensor_array[j]->type->id >= min_id &&
   1edc6:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
   1edca:	6807      	ldr	r7, [r0, #0]
   1edcc:	f8b7 8000 	ldrh.w	r8, [r7]
   1edd0:	4590      	cmp	r8, r2
   1edd2:	d305      	bcc.n	1ede0 <sensor_srv_init+0x3c>
   1edd4:	b333      	cbz	r3, 1ee24 <sensor_srv_init+0x80>
			     srv->sensor_array[j]->type->id < best->type->id)) {
   1edd6:	681f      	ldr	r7, [r3, #0]
			    (!best ||
   1edd8:	883f      	ldrh	r7, [r7, #0]
   1edda:	4547      	cmp	r7, r8
   1eddc:	bf88      	it	hi
   1edde:	4603      	movhi	r3, r0
		for (int j = 0; j < srv->sensor_count; ++j) {
   1ede0:	3101      	adds	r1, #1
   1ede2:	4561      	cmp	r1, ip
   1ede4:	dbef      	blt.n	1edc6 <sensor_srv_init+0x22>
		if (!best) {
   1ede6:	b9fb      	cbnz	r3, 1ee28 <sensor_srv_init+0x84>
			BT_ERR("Duplicate sensor ID");
   1ede8:	2145      	movs	r1, #69	; 0x45
   1edea:	4818      	ldr	r0, [pc, #96]	; (1ee4c <sensor_srv_init+0xa8>)
   1edec:	f005 fa26 	bl	2423c <printk>
			srv->sensor_count = count;
   1edf0:	73a5      	strb	r5, [r4, #14]
	srv->pub.update = update_handler;
   1edf2:	4b17      	ldr	r3, [pc, #92]	; (1ee50 <sensor_srv_init+0xac>)
   1edf4:	6263      	str	r3, [r4, #36]	; 0x24
	srv->pub.msg = &srv->pub_buf;
   1edf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
	srv->setup_pub.msg = &srv->setup_pub_buf;
   1edfa:	f504 7588 	add.w	r5, r4, #272	; 0x110
	srv->pub.msg = &srv->pub_buf;
   1edfe:	6220      	str	r0, [r4, #32]
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   1ee00:	f104 0164 	add.w	r1, r4, #100	; 0x64
	srv->model = mod;
   1ee04:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
	srv->setup_pub.msg = &srv->setup_pub_buf;
   1ee08:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
	net_buf_simple_init_with_data(&srv->pub_buf, srv->pub_data,
   1ee0c:	2261      	movs	r2, #97	; 0x61
   1ee0e:	f00a fd5e 	bl	298ce <net_buf_simple_init_with_data>
	net_buf_simple_init_with_data(&srv->setup_pub_buf, srv->setup_pub_data,
   1ee12:	4628      	mov	r0, r5
   1ee14:	221d      	movs	r2, #29
   1ee16:	f504 718e 	add.w	r1, r4, #284	; 0x11c
   1ee1a:	f00a fd58 	bl	298ce <net_buf_simple_init_with_data>
}
   1ee1e:	2000      	movs	r0, #0
   1ee20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ee24:	4603      	mov	r3, r0
   1ee26:	e7db      	b.n	1ede0 <sensor_srv_init+0x3c>
   1ee28:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
Z_GENLIST_APPEND(slist, snode)
   1ee2c:	68a1      	ldr	r1, [r4, #8]
		sys_slist_append(&srv->sensors, &best->state.node);
   1ee2e:	f103 0248 	add.w	r2, r3, #72	; 0x48
   1ee32:	b939      	cbnz	r1, 1ee44 <sensor_srv_init+0xa0>
	list->head = node;
   1ee34:	e9c4 2201 	strd	r2, r2, [r4, #4]
		min_id = best->type->id + 1;
   1ee38:	681b      	ldr	r3, [r3, #0]
   1ee3a:	881a      	ldrh	r2, [r3, #0]
   1ee3c:	3201      	adds	r2, #1
   1ee3e:	b292      	uxth	r2, r2
	for (int count = 0; count < srv->sensor_count; ++count) {
   1ee40:	3501      	adds	r5, #1
   1ee42:	e7b8      	b.n	1edb6 <sensor_srv_init+0x12>
	parent->next = child;
   1ee44:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1ee46:	60a2      	str	r2, [r4, #8]
   1ee48:	e7f6      	b.n	1ee38 <sensor_srv_init+0x94>
   1ee4a:	bf00      	nop
   1ee4c:	0003168b 	.word	0x0003168b
   1ee50:	00029d43 	.word	0x00029d43

0001ee54 <sensor_srv_settings_set>:

static int sensor_srv_settings_set(struct bt_mesh_model *mod, const char *name,
				   size_t len_rd, settings_read_cb read_cb,
				   void *cb_arg)
{
   1ee54:	b570      	push	{r4, r5, r6, lr}
   1ee56:	b09a      	sub	sp, #104	; 0x68
   1ee58:	4614      	mov	r4, r2
   1ee5a:	461d      	mov	r5, r3
	struct bt_mesh_sensor_srv *srv = mod->user_data;
	int err = 0;

	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   1ee5c:	aa06      	add	r2, sp, #24
   1ee5e:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1ee62:	6986      	ldr	r6, [r0, #24]
	NET_BUF_SIMPLE_DEFINE(buf, (CONFIG_BT_MESH_SENSOR_SRV_SENSORS_MAX *
   1ee64:	9203      	str	r2, [sp, #12]
   1ee66:	e9cd 3204 	strd	r3, r2, [sp, #16]
				    BT_MESH_SENSOR_MSG_MAXLEN_CADENCE_STATUS));

	if (name) {
   1ee6a:	2900      	cmp	r1, #0
   1ee6c:	d142      	bne.n	1eef4 <sensor_srv_settings_set+0xa0>
		return -ENOENT;
	}

	ssize_t len = read_cb(cb_arg, net_buf_simple_add(&buf, len_rd), len_rd);
   1ee6e:	4621      	mov	r1, r4
   1ee70:	a803      	add	r0, sp, #12
   1ee72:	f7fe fc91 	bl	1d798 <net_buf_simple_add>
   1ee76:	4622      	mov	r2, r4
   1ee78:	4601      	mov	r1, r0
   1ee7a:	981e      	ldr	r0, [sp, #120]	; 0x78
   1ee7c:	47a8      	blx	r5

	if (len == 0) {
   1ee7e:	4602      	mov	r2, r0
   1ee80:	b918      	cbnz	r0, 1ee8a <sensor_srv_settings_set+0x36>
		return 0;
   1ee82:	2400      	movs	r4, #0
	if (err) {
		BT_ERR("Failed: %d", err);
	}

	return err;
}
   1ee84:	4620      	mov	r0, r4
   1ee86:	b01a      	add	sp, #104	; 0x68
   1ee88:	bd70      	pop	{r4, r5, r6, pc}
	if (len != len_rd) {
   1ee8a:	42a0      	cmp	r0, r4
   1ee8c:	d025      	beq.n	1eeda <sensor_srv_settings_set+0x86>
		BT_ERR("Failed: %d (expected length %u)", len, len_rd);
   1ee8e:	4623      	mov	r3, r4
   1ee90:	2145      	movs	r1, #69	; 0x45
   1ee92:	481a      	ldr	r0, [pc, #104]	; (1eefc <sensor_srv_settings_set+0xa8>)
   1ee94:	f005 f9d2 	bl	2423c <printk>
		return -EINVAL;
   1ee98:	f06f 0415 	mvn.w	r4, #21
   1ee9c:	e7f2      	b.n	1ee84 <sensor_srv_settings_set+0x30>
		uint16_t id = net_buf_simple_pull_le16(&buf);
   1ee9e:	a803      	add	r0, sp, #12
   1eea0:	f00a fd3f 	bl	29922 <net_buf_simple_pull_le16>
		s = sensor_get(srv, id);
   1eea4:	4601      	mov	r1, r0
   1eea6:	4630      	mov	r0, r6
   1eea8:	f00a fef7 	bl	29c9a <sensor_get>
		if (!s) {
   1eeac:	4605      	mov	r5, r0
   1eeae:	b1c8      	cbz	r0, 1eee4 <sensor_srv_settings_set+0x90>
		err = sensor_cadence_decode(&buf, s->type, &pub_div,
   1eeb0:	f100 0320 	add.w	r3, r0, #32
   1eeb4:	9300      	str	r3, [sp, #0]
   1eeb6:	6801      	ldr	r1, [r0, #0]
   1eeb8:	f100 0356 	add.w	r3, r0, #86	; 0x56
   1eebc:	f10d 020b 	add.w	r2, sp, #11
   1eec0:	a803      	add	r0, sp, #12
   1eec2:	f000 fa75 	bl	1f3b0 <sensor_cadence_decode>
		if (err) {
   1eec6:	4604      	mov	r4, r0
   1eec8:	b970      	cbnz	r0, 1eee8 <sensor_srv_settings_set+0x94>
		s->state.pub_div = pub_div;
   1eeca:	f895 3057 	ldrb.w	r3, [r5, #87]	; 0x57
   1eece:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1eed2:	f362 0303 	bfi	r3, r2, #0, #4
   1eed6:	f885 3057 	strb.w	r3, [r5, #87]	; 0x57
	while (buf.len) {
   1eeda:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1eede:	2b00      	cmp	r3, #0
   1eee0:	d1dd      	bne.n	1ee9e <sensor_srv_settings_set+0x4a>
   1eee2:	e7ce      	b.n	1ee82 <sensor_srv_settings_set+0x2e>
			err = -ENODEV;
   1eee4:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Failed: %d", err);
   1eee8:	4622      	mov	r2, r4
   1eeea:	2145      	movs	r1, #69	; 0x45
   1eeec:	4804      	ldr	r0, [pc, #16]	; (1ef00 <sensor_srv_settings_set+0xac>)
   1eeee:	f005 f9a5 	bl	2423c <printk>
   1eef2:	e7c7      	b.n	1ee84 <sensor_srv_settings_set+0x30>
		return -ENOENT;
   1eef4:	f06f 0401 	mvn.w	r4, #1
   1eef8:	e7c4      	b.n	1ee84 <sensor_srv_settings_set+0x30>
   1eefa:	bf00      	nop
   1eefc:	000316a4 	.word	0x000316a4
   1ef00:	000316c9 	.word	0x000316c9

0001ef04 <handle_setting_get>:
{
   1ef04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   1ef08:	f8d0 9018 	ldr.w	r9, [r0, #24]
{
   1ef0c:	b099      	sub	sp, #100	; 0x64
   1ef0e:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   1ef10:	4610      	mov	r0, r2
{
   1ef12:	4615      	mov	r5, r2
   1ef14:	4688      	mov	r8, r1
	uint16_t id = net_buf_simple_pull_le16(buf);
   1ef16:	f00a fd04 	bl	29922 <net_buf_simple_pull_le16>
   1ef1a:	4604      	mov	r4, r0
	uint16_t setting_id = net_buf_simple_pull_le16(buf);
   1ef1c:	4628      	mov	r0, r5
   1ef1e:	f00a fd00 	bl	29922 <net_buf_simple_pull_le16>
   1ef22:	4607      	mov	r7, r0
	if (id == BT_MESH_PROP_ID_PROHIBITED ||
   1ef24:	b32c      	cbz	r4, 1ef72 <handle_setting_get+0x6e>
   1ef26:	b320      	cbz	r0, 1ef72 <handle_setting_get+0x6e>
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   1ef28:	ab06      	add	r3, sp, #24
   1ef2a:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   1ef2e:	215b      	movs	r1, #91	; 0x5b
   1ef30:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(rsp, BT_MESH_SENSOR_OP_SETTING_STATUS,
   1ef32:	9303      	str	r3, [sp, #12]
   1ef34:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTING_STATUS);
   1ef38:	f009 f8db 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   1ef3c:	4621      	mov	r1, r4
   1ef3e:	a803      	add	r0, sp, #12
   1ef40:	f00a fd40 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&rsp, setting_id);
   1ef44:	4639      	mov	r1, r7
   1ef46:	a803      	add	r0, sp, #12
   1ef48:	f00a fd3c 	bl	299c4 <net_buf_simple_add_le16>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   1ef4c:	4621      	mov	r1, r4
   1ef4e:	4648      	mov	r0, r9
   1ef50:	f00a fea3 	bl	29c9a <sensor_get>
	if (!sensor) {
   1ef54:	4605      	mov	r5, r0
   1ef56:	b128      	cbz	r0, 1ef64 <handle_setting_get+0x60>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   1ef58:	68c0      	ldr	r0, [r0, #12]
   1ef5a:	2300      	movs	r3, #0
		if (sensor->settings.list[i].type->id == setting_id) {
   1ef5c:	f04f 0c0c 	mov.w	ip, #12
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   1ef60:	4283      	cmp	r3, r0
   1ef62:	d109      	bne.n	1ef78 <handle_setting_get+0x74>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   1ef64:	2300      	movs	r3, #0
   1ef66:	9300      	str	r3, [sp, #0]
   1ef68:	aa03      	add	r2, sp, #12
   1ef6a:	4641      	mov	r1, r8
   1ef6c:	4630      	mov	r0, r6
   1ef6e:	f009 f8e9 	bl	28144 <bt_mesh_model_send>
}
   1ef72:	b019      	add	sp, #100	; 0x64
   1ef74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (sensor->settings.list[i].type->id == setting_id) {
   1ef78:	fb0c f203 	mul.w	r2, ip, r3
   1ef7c:	68a9      	ldr	r1, [r5, #8]
   1ef7e:	188c      	adds	r4, r1, r2
   1ef80:	588a      	ldr	r2, [r1, r2]
   1ef82:	8812      	ldrh	r2, [r2, #0]
   1ef84:	42ba      	cmp	r2, r7
   1ef86:	d001      	beq.n	1ef8c <handle_setting_get+0x88>
	for (uint32_t i = 0; i < sensor->settings.count; i++) {
   1ef88:	3301      	adds	r3, #1
   1ef8a:	e7e9      	b.n	1ef60 <handle_setting_get+0x5c>
	if (!setting || !setting->get) {
   1ef8c:	6863      	ldr	r3, [r4, #4]
   1ef8e:	2b00      	cmp	r3, #0
   1ef90:	d0e8      	beq.n	1ef64 <handle_setting_get+0x60>
	net_buf_simple_add_u8(&rsp, setting->set ? 0x03 : 0x01);
   1ef92:	68a3      	ldr	r3, [r4, #8]
	uint8_t minlen = rsp.len;
   1ef94:	f8bd 9010 	ldrh.w	r9, [sp, #16]
	net_buf_simple_add_u8(&rsp, setting->set ? 0x03 : 0x01);
   1ef98:	2b00      	cmp	r3, #0
   1ef9a:	bf14      	ite	ne
   1ef9c:	2103      	movne	r1, #3
   1ef9e:	2101      	moveq	r1, #1
   1efa0:	a803      	add	r0, sp, #12
   1efa2:	f00a fd08 	bl	299b6 <net_buf_simple_add_u8>
	setting->get(sensor, setting, ctx, values);
   1efa6:	ab0e      	add	r3, sp, #56	; 0x38
   1efa8:	4642      	mov	r2, r8
   1efaa:	4621      	mov	r1, r4
   1efac:	4628      	mov	r0, r5
   1efae:	6867      	ldr	r7, [r4, #4]
   1efb0:	47b8      	blx	r7
	err = sensor_value_encode(&rsp, setting->type, values);
   1efb2:	aa0e      	add	r2, sp, #56	; 0x38
   1efb4:	6821      	ldr	r1, [r4, #0]
   1efb6:	a803      	add	r0, sp, #12
   1efb8:	f00a ffb6 	bl	29f28 <sensor_value_encode>
	if (err) {
   1efbc:	4603      	mov	r3, r0
   1efbe:	2800      	cmp	r0, #0
   1efc0:	d0d0      	beq.n	1ef64 <handle_setting_get+0x60>
		BT_WARN("Failed encoding sensor setting 0x%04x: %d",
   1efc2:	6822      	ldr	r2, [r4, #0]
   1efc4:	4804      	ldr	r0, [pc, #16]	; (1efd8 <handle_setting_get+0xd4>)
   1efc6:	8812      	ldrh	r2, [r2, #0]
   1efc8:	2157      	movs	r1, #87	; 0x57
		rsp.len = minlen;
   1efca:	fa5f f989 	uxtb.w	r9, r9
		BT_WARN("Failed encoding sensor setting 0x%04x: %d",
   1efce:	f005 f935 	bl	2423c <printk>
		rsp.len = minlen;
   1efd2:	f8ad 9010 	strh.w	r9, [sp, #16]
   1efd6:	e7c5      	b.n	1ef64 <handle_setting_get+0x60>
   1efd8:	0003165c 	.word	0x0003165c

0001efdc <scalar_decode>:
	return 0;
}

static int scalar_decode(const struct bt_mesh_sensor_format *format,
			 struct net_buf_simple *buf, struct sensor_value *val)
{
   1efdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1efde:	4607      	mov	r7, r0
	const struct scalar_repr *repr = format->user_data;

	if (buf->len < format->size) {
   1efe0:	e9d7 5302 	ldrd	r5, r3, [r7, #8]
{
   1efe4:	4616      	mov	r6, r2
	if (buf->len < format->size) {
   1efe6:	888a      	ldrh	r2, [r1, #4]
   1efe8:	429a      	cmp	r2, r3
{
   1efea:	4608      	mov	r0, r1
	if (buf->len < format->size) {
   1efec:	d360      	bcc.n	1f0b0 <scalar_decode+0xd4>
		return -ENOMEM;
	}

	int32_t raw;

	switch (format->size) {
   1efee:	3b01      	subs	r3, #1
   1eff0:	2b03      	cmp	r3, #3
   1eff2:	d860      	bhi.n	1f0b6 <scalar_decode+0xda>
   1eff4:	e8df f003 	tbb	[pc, r3]
   1eff8:	52473d02 	.word	0x52473d02
	case 1:
		if (repr->flags & SIGNED) {
   1effc:	782b      	ldrb	r3, [r5, #0]
   1effe:	079c      	lsls	r4, r3, #30
   1f000:	d533      	bpl.n	1f06a <scalar_decode+0x8e>
			raw = (int8_t) net_buf_simple_pull_u8(buf);
   1f002:	f00a fc86 	bl	29912 <net_buf_simple_pull_u8>
   1f006:	b244      	sxtb	r4, r0
		break;
	default:
		return -ERANGE;
	}

	int64_t max_value = scalar_max(format);
   1f008:	4638      	mov	r0, r7
   1f00a:	f00a ff1f 	bl	29e4c <scalar_max>
	if (repr->flags & SIGNED) {
   1f00e:	68bb      	ldr	r3, [r7, #8]
   1f010:	781b      	ldrb	r3, [r3, #0]
   1f012:	f013 0302 	ands.w	r3, r3, #2
   1f016:	d005      	beq.n	1f024 <scalar_decode+0x48>
		return -BIT64(8 * format->size - 1);
   1f018:	68fb      	ldr	r3, [r7, #12]
   1f01a:	00db      	lsls	r3, r3, #3
   1f01c:	1e5a      	subs	r2, r3, #1
   1f01e:	f04f 33ff 	mov.w	r3, #4294967295
   1f022:	4093      	lsls	r3, r2
	int32_t min_value = scalar_min(format);

	if (raw < min_value || raw > max_value) {
   1f024:	429c      	cmp	r4, r3
   1f026:	db46      	blt.n	1f0b6 <scalar_decode+0xda>
   1f028:	17e3      	asrs	r3, r4, #31
   1f02a:	42a0      	cmp	r0, r4
   1f02c:	eb71 0303 	sbcs.w	r3, r1, r3
   1f030:	db41      	blt.n	1f0b6 <scalar_decode+0xda>
		return -ERANGE;
	}

	int64_t million = mul_scalar(raw * 1000000LL, repr);
   1f032:	4822      	ldr	r0, [pc, #136]	; (1f0bc <scalar_decode+0xe0>)
   1f034:	fb84 0100 	smull	r0, r1, r4, r0
	return (repr->flags & DIVIDE) ? (val / repr->value) :
   1f038:	782c      	ldrb	r4, [r5, #0]
   1f03a:	0764      	lsls	r4, r4, #29
   1f03c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1f040:	d52f      	bpl.n	1f0a2 <scalar_decode+0xc6>
   1f042:	f7e2 feb1 	bl	1da8 <__aeabi_ldivmod>
   1f046:	4604      	mov	r4, r0
   1f048:	460d      	mov	r5, r1

	val->val1 = million / 1000000LL;
   1f04a:	4a1c      	ldr	r2, [pc, #112]	; (1f0bc <scalar_decode+0xe0>)
   1f04c:	2300      	movs	r3, #0
   1f04e:	4620      	mov	r0, r4
   1f050:	4629      	mov	r1, r5
   1f052:	f7e2 fea9 	bl	1da8 <__aeabi_ldivmod>
	val->val2 = million % 1000000LL;
   1f056:	4a19      	ldr	r2, [pc, #100]	; (1f0bc <scalar_decode+0xe0>)
	val->val1 = million / 1000000LL;
   1f058:	6030      	str	r0, [r6, #0]
	val->val2 = million % 1000000LL;
   1f05a:	2300      	movs	r3, #0
   1f05c:	4620      	mov	r0, r4
   1f05e:	4629      	mov	r1, r5
   1f060:	f7e2 fea2 	bl	1da8 <__aeabi_ldivmod>

	return 0;
   1f064:	2000      	movs	r0, #0
	val->val2 = million % 1000000LL;
   1f066:	6072      	str	r2, [r6, #4]
}
   1f068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			raw = net_buf_simple_pull_u8(buf);
   1f06a:	f00a fc52 	bl	29912 <net_buf_simple_pull_u8>
		raw = net_buf_simple_pull_le32(buf);
   1f06e:	4604      	mov	r4, r0
		break;
   1f070:	e7ca      	b.n	1f008 <scalar_decode+0x2c>
		if (repr->flags & SIGNED) {
   1f072:	782b      	ldrb	r3, [r5, #0]
   1f074:	0799      	lsls	r1, r3, #30
   1f076:	d503      	bpl.n	1f080 <scalar_decode+0xa4>
			raw = (int16_t) net_buf_simple_pull_le16(buf);
   1f078:	f00a fc53 	bl	29922 <net_buf_simple_pull_le16>
   1f07c:	b204      	sxth	r4, r0
   1f07e:	e7c3      	b.n	1f008 <scalar_decode+0x2c>
			raw = net_buf_simple_pull_le16(buf);
   1f080:	f00a fc4f 	bl	29922 <net_buf_simple_pull_le16>
   1f084:	e7f3      	b.n	1f06e <scalar_decode+0x92>
		raw = net_buf_simple_pull_le24(buf);
   1f086:	f00a fc5f 	bl	29948 <net_buf_simple_pull_le24>
		if ((repr->flags & SIGNED) && (raw & BIT(24))) {
   1f08a:	782b      	ldrb	r3, [r5, #0]
   1f08c:	079a      	lsls	r2, r3, #30
		raw = net_buf_simple_pull_le24(buf);
   1f08e:	4604      	mov	r4, r0
		if ((repr->flags & SIGNED) && (raw & BIT(24))) {
   1f090:	d5ba      	bpl.n	1f008 <scalar_decode+0x2c>
   1f092:	01c3      	lsls	r3, r0, #7
   1f094:	d5b8      	bpl.n	1f008 <scalar_decode+0x2c>
			raw |= (BIT_MASK(8) << 24);
   1f096:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
   1f09a:	e7b5      	b.n	1f008 <scalar_decode+0x2c>
		raw = net_buf_simple_pull_le32(buf);
   1f09c:	f00a fc62 	bl	29964 <net_buf_simple_pull_le32>
   1f0a0:	e7e5      	b.n	1f06e <scalar_decode+0x92>
	return (repr->flags & DIVIDE) ? (val / repr->value) :
   1f0a2:	4343      	muls	r3, r0
   1f0a4:	fb02 3301 	mla	r3, r2, r1, r3
   1f0a8:	fba0 4502 	umull	r4, r5, r0, r2
   1f0ac:	441d      	add	r5, r3
   1f0ae:	e7cc      	b.n	1f04a <scalar_decode+0x6e>
		return -ENOMEM;
   1f0b0:	f06f 000b 	mvn.w	r0, #11
   1f0b4:	e7d8      	b.n	1f068 <scalar_decode+0x8c>
		return -ERANGE;
   1f0b6:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1f0ba:	e7d5      	b.n	1f068 <scalar_decode+0x8c>
   1f0bc:	000f4240 	.word	0x000f4240

0001f0c0 <scalar_encode>:
{
   1f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0c4:	b085      	sub	sp, #20
	const struct scalar_repr *repr = format->user_data;
   1f0c6:	6885      	ldr	r5, [r0, #8]
{
   1f0c8:	9000      	str	r0, [sp, #0]
	if (net_buf_simple_tailroom(buf) < format->size) {
   1f0ca:	4610      	mov	r0, r2
{
   1f0cc:	9102      	str	r1, [sp, #8]
   1f0ce:	4691      	mov	r9, r2
	if (net_buf_simple_tailroom(buf) < format->size) {
   1f0d0:	f00a fc5d 	bl	2998e <net_buf_simple_tailroom>
   1f0d4:	9b00      	ldr	r3, [sp, #0]
   1f0d6:	68df      	ldr	r7, [r3, #12]
   1f0d8:	42b8      	cmp	r0, r7
   1f0da:	d37a      	bcc.n	1f1d2 <scalar_encode+0x112>
	int64_t raw = div_scalar(val->val1, repr) +
   1f0dc:	9b02      	ldr	r3, [sp, #8]
   1f0de:	681c      	ldr	r4, [r3, #0]
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   1f0e0:	782b      	ldrb	r3, [r5, #0]
   1f0e2:	9301      	str	r3, [sp, #4]
   1f0e4:	f013 0304 	ands.w	r3, r3, #4
	int64_t raw = div_scalar(val->val1, repr) +
   1f0e8:	4620      	mov	r0, r4
   1f0ea:	ea4f 71e4 	mov.w	r1, r4, asr #31
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   1f0ee:	e9d5 8602 	ldrd	r8, r6, [r5, #8]
   1f0f2:	9303      	str	r3, [sp, #12]
   1f0f4:	d043      	beq.n	1f17e <scalar_encode+0xbe>
   1f0f6:	fb04 f306 	mul.w	r3, r4, r6
   1f0fa:	fb08 3301 	mla	r3, r8, r1, r3
   1f0fe:	fba4 4508 	umull	r4, r5, r4, r8
   1f102:	441d      	add	r5, r3
		    div_scalar(val->val2, repr) / 1000000LL;
   1f104:	9b02      	ldr	r3, [sp, #8]
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   1f106:	9a03      	ldr	r2, [sp, #12]
		    div_scalar(val->val2, repr) / 1000000LL;
   1f108:	685b      	ldr	r3, [r3, #4]
   1f10a:	4618      	mov	r0, r3
   1f10c:	17d9      	asrs	r1, r3, #31
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   1f10e:	2a00      	cmp	r2, #0
   1f110:	d03c      	beq.n	1f18c <scalar_encode+0xcc>
   1f112:	435e      	muls	r6, r3
   1f114:	fb08 6601 	mla	r6, r8, r1, r6
   1f118:	fba3 0108 	umull	r0, r1, r3, r8
   1f11c:	4431      	add	r1, r6
		    div_scalar(val->val2, repr) / 1000000LL;
   1f11e:	4a31      	ldr	r2, [pc, #196]	; (1f1e4 <scalar_encode+0x124>)
   1f120:	2300      	movs	r3, #0
   1f122:	f7e2 fe41 	bl	1da8 <__aeabi_ldivmod>
	int64_t raw = div_scalar(val->val1, repr) +
   1f126:	eb10 0a04 	adds.w	sl, r0, r4
	int64_t max_value = scalar_max(format);
   1f12a:	9800      	ldr	r0, [sp, #0]
	int64_t raw = div_scalar(val->val1, repr) +
   1f12c:	eb41 0b05 	adc.w	fp, r1, r5
	int64_t max_value = scalar_max(format);
   1f130:	f00a fe8c 	bl	29e4c <scalar_max>
	if (repr->flags & SIGNED) {
   1f134:	9b00      	ldr	r3, [sp, #0]
   1f136:	689b      	ldr	r3, [r3, #8]
   1f138:	781a      	ldrb	r2, [r3, #0]
   1f13a:	f012 0202 	ands.w	r2, r2, #2
		return -BIT64(8 * format->size - 1);
   1f13e:	bf1f      	itttt	ne
   1f140:	00fa      	lslne	r2, r7, #3
   1f142:	f102 33ff 	addne.w	r3, r2, #4294967295
   1f146:	f04f 32ff 	movne.w	r2, #4294967295
   1f14a:	409a      	lslne	r2, r3
	if (raw > max_value || raw < min_value) {
   1f14c:	4550      	cmp	r0, sl
   1f14e:	eb71 030b 	sbcs.w	r3, r1, fp
   1f152:	db04      	blt.n	1f15e <scalar_encode+0x9e>
   1f154:	17d3      	asrs	r3, r2, #31
   1f156:	4592      	cmp	sl, r2
   1f158:	eb7b 0303 	sbcs.w	r3, fp, r3
   1f15c:	da08      	bge.n	1f170 <scalar_encode+0xb0>
		uint32_t type_max = BIT64(8 * format->size) - 1;
   1f15e:	00fa      	lsls	r2, r7, #3
   1f160:	2301      	movs	r3, #1
   1f162:	4093      	lsls	r3, r2
		if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   1f164:	9a01      	ldr	r2, [sp, #4]
   1f166:	f012 0f30 	tst.w	r2, #48	; 0x30
   1f16a:	d014      	beq.n	1f196 <scalar_encode+0xd6>
			raw = type_max - 2;
   1f16c:	3b03      	subs	r3, #3
			raw = type_max - 1;
   1f16e:	469a      	mov	sl, r3
	switch (format->size) {
   1f170:	3f01      	subs	r7, #1
   1f172:	2f03      	cmp	r7, #3
   1f174:	d833      	bhi.n	1f1de <scalar_encode+0x11e>
   1f176:	e8df f007 	tbb	[pc, r7]
   1f17a:	1c13      	.short	0x1c13
   1f17c:	2722      	.short	0x2722
	return (repr->flags & DIVIDE) ? (val * repr->value) :
   1f17e:	4642      	mov	r2, r8
   1f180:	4633      	mov	r3, r6
   1f182:	f7e2 fe11 	bl	1da8 <__aeabi_ldivmod>
   1f186:	4604      	mov	r4, r0
   1f188:	460d      	mov	r5, r1
   1f18a:	e7bb      	b.n	1f104 <scalar_encode+0x44>
   1f18c:	4642      	mov	r2, r8
   1f18e:	4633      	mov	r3, r6
   1f190:	f7e2 fe0a 	bl	1da8 <__aeabi_ldivmod>
   1f194:	e7c3      	b.n	1f11e <scalar_encode+0x5e>
		} else if (repr->flags & HAS_UNDEFINED) {
   1f196:	9a01      	ldr	r2, [sp, #4]
   1f198:	0712      	lsls	r2, r2, #28
   1f19a:	d51d      	bpl.n	1f1d8 <scalar_encode+0x118>
			raw = type_max - 1;
   1f19c:	3b02      	subs	r3, #2
   1f19e:	e7e6      	b.n	1f16e <scalar_encode+0xae>
		net_buf_simple_add_u8(buf, raw);
   1f1a0:	fa5f f18a 	uxtb.w	r1, sl
   1f1a4:	4648      	mov	r0, r9
   1f1a6:	f00a fc06 	bl	299b6 <net_buf_simple_add_u8>
	return 0;
   1f1aa:	2000      	movs	r0, #0
}
   1f1ac:	b005      	add	sp, #20
   1f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(buf, raw);
   1f1b2:	fa1f f18a 	uxth.w	r1, sl
   1f1b6:	4648      	mov	r0, r9
   1f1b8:	f00a fc04 	bl	299c4 <net_buf_simple_add_le16>
   1f1bc:	e7f5      	b.n	1f1aa <scalar_encode+0xea>
		net_buf_simple_add_le24(buf, raw);
   1f1be:	4651      	mov	r1, sl
   1f1c0:	4648      	mov	r0, r9
   1f1c2:	f00a fc11 	bl	299e8 <net_buf_simple_add_le24>
		break;
   1f1c6:	e7f0      	b.n	1f1aa <scalar_encode+0xea>
		net_buf_simple_add_le32(buf, raw);
   1f1c8:	4651      	mov	r1, sl
   1f1ca:	4648      	mov	r0, r9
   1f1cc:	f00a fc18 	bl	29a00 <net_buf_simple_add_le32>
		break;
   1f1d0:	e7eb      	b.n	1f1aa <scalar_encode+0xea>
		return -ENOMEM;
   1f1d2:	f06f 000b 	mvn.w	r0, #11
   1f1d6:	e7e9      	b.n	1f1ac <scalar_encode+0xec>
			return -ERANGE;
   1f1d8:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1f1dc:	e7e6      	b.n	1f1ac <scalar_encode+0xec>
		return -EIO;
   1f1de:	f06f 0004 	mvn.w	r0, #4
   1f1e2:	e7e3      	b.n	1f1ac <scalar_encode+0xec>
   1f1e4:	000f4240 	.word	0x000f4240

0001f1e8 <bt_mesh_sensor_column_format_get>:
}

const struct bt_mesh_sensor_format *
bt_mesh_sensor_column_format_get(const struct bt_mesh_sensor_type *type)
{
	if (type->flags & BT_MESH_SENSOR_TYPE_FLAG_SERIES &&
   1f1e8:	7883      	ldrb	r3, [r0, #2]
   1f1ea:	07db      	lsls	r3, r3, #31
   1f1ec:	d505      	bpl.n	1f1fa <bt_mesh_sensor_column_format_get+0x12>
   1f1ee:	78c3      	ldrb	r3, [r0, #3]
   1f1f0:	2b01      	cmp	r3, #1
   1f1f2:	d902      	bls.n	1f1fa <bt_mesh_sensor_column_format_get+0x12>
	    type->channel_count >= 2) {
		return type->channels[1].format;
   1f1f4:	6843      	ldr	r3, [r0, #4]
   1f1f6:	6858      	ldr	r0, [r3, #4]
   1f1f8:	4770      	bx	lr
	}

	return &bt_mesh_sensor_format_time_decihour_8;
   1f1fa:	4801      	ldr	r0, [pc, #4]	; (1f200 <bt_mesh_sensor_column_format_get+0x18>)
}
   1f1fc:	4770      	bx	lr
   1f1fe:	bf00      	nop
   1f200:	0002b774 	.word	0x0002b774

0001f204 <sensor_column_encode>:

int sensor_column_encode(struct net_buf_simple *buf,
			 struct bt_mesh_sensor *sensor,
			 struct bt_mesh_msg_ctx *ctx,
			 const struct bt_mesh_sensor_column *col)
{
   1f204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f208:	461e      	mov	r6, r3
	struct sensor_value values[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX];
	const struct bt_mesh_sensor_format *col_format;
	const uint64_t width_million =
		(col->end.val1 - col->start.val1) * 1000000L +
   1f20a:	689c      	ldr	r4, [r3, #8]
   1f20c:	681b      	ldr	r3, [r3, #0]
{
   1f20e:	4691      	mov	r9, r2
		(col->end.val1 - col->start.val1) * 1000000L +
   1f210:	1ae4      	subs	r4, r4, r3
		(col->end.val2 - col->start.val2);
   1f212:	6872      	ldr	r2, [r6, #4]
   1f214:	68f3      	ldr	r3, [r6, #12]
   1f216:	1a9b      	subs	r3, r3, r2
		(col->end.val1 - col->start.val1) * 1000000L +
   1f218:	4a1b      	ldr	r2, [pc, #108]	; (1f288 <sensor_column_encode+0x84>)
   1f21a:	fb02 3404 	mla	r4, r2, r4, r3
	const uint64_t width_million =
   1f21e:	17e5      	asrs	r5, r4, #31
{
   1f220:	b08d      	sub	sp, #52	; 0x34
   1f222:	460f      	mov	r7, r1
	const struct sensor_value width = {
		.val1 = width_million / 1000000L,
   1f224:	4a18      	ldr	r2, [pc, #96]	; (1f288 <sensor_column_encode+0x84>)
   1f226:	2300      	movs	r3, #0
{
   1f228:	4680      	mov	r8, r0
		.val1 = width_million / 1000000L,
   1f22a:	4629      	mov	r1, r5
   1f22c:	4620      	mov	r0, r4
   1f22e:	f7e2 fe0b 	bl	1e48 <__aeabi_uldivmod>
		.val2 = width_million % 1000000L,
   1f232:	4a15      	ldr	r2, [pc, #84]	; (1f288 <sensor_column_encode+0x84>)
	const struct sensor_value width = {
   1f234:	9000      	str	r0, [sp, #0]
		.val2 = width_million % 1000000L,
   1f236:	2300      	movs	r3, #0
   1f238:	4620      	mov	r0, r4
   1f23a:	4629      	mov	r1, r5
   1f23c:	f7e2 fe04 	bl	1e48 <__aeabi_uldivmod>
	};
	int err;

	BT_DBG("Column width: %s", bt_mesh_sensor_ch_str(&width));

	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   1f240:	6838      	ldr	r0, [r7, #0]
	const struct sensor_value width = {
   1f242:	9201      	str	r2, [sp, #4]
	col_format = bt_mesh_sensor_column_format_get(sensor->type);
   1f244:	f7ff ffd0 	bl	1f1e8 <bt_mesh_sensor_column_format_get>
	if (!col_format) {
   1f248:	4604      	mov	r4, r0
   1f24a:	b1d0      	cbz	r0, 1f282 <sensor_column_encode+0x7e>
		return -ENOTSUP;
	}

	err = sensor_ch_encode(buf, col_format, &col->start);
   1f24c:	4601      	mov	r1, r0
   1f24e:	4632      	mov	r2, r6
   1f250:	4640      	mov	r0, r8
   1f252:	f00a fe60 	bl	29f16 <sensor_ch_encode>
	if (err) {
   1f256:	b988      	cbnz	r0, 1f27c <sensor_column_encode+0x78>
		return err;
	}

	/* The sensor columns are transmitted as start+width, not start+end: */
	err = sensor_ch_encode(buf, col_format, &width);
   1f258:	466a      	mov	r2, sp
   1f25a:	4621      	mov	r1, r4
   1f25c:	4640      	mov	r0, r8
   1f25e:	f00a fe5a 	bl	29f16 <sensor_ch_encode>
	if (err) {
   1f262:	b958      	cbnz	r0, 1f27c <sensor_column_encode+0x78>
		return err;
	}

	err = sensor->series.get(sensor, ctx, col, values);
   1f264:	69bc      	ldr	r4, [r7, #24]
   1f266:	ab02      	add	r3, sp, #8
   1f268:	4632      	mov	r2, r6
   1f26a:	4649      	mov	r1, r9
   1f26c:	4638      	mov	r0, r7
   1f26e:	47a0      	blx	r4
	if (err) {
   1f270:	b920      	cbnz	r0, 1f27c <sensor_column_encode+0x78>
		return err;
	}

	return sensor_value_encode(buf, sensor->type, values);
   1f272:	aa02      	add	r2, sp, #8
   1f274:	6839      	ldr	r1, [r7, #0]
   1f276:	4640      	mov	r0, r8
   1f278:	f00a fe56 	bl	29f28 <sensor_value_encode>
}
   1f27c:	b00d      	add	sp, #52	; 0x34
   1f27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -ENOTSUP;
   1f282:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1f286:	e7f9      	b.n	1f27c <sensor_column_encode+0x78>
   1f288:	000f4240 	.word	0x000f4240

0001f28c <sensor_powtime_encode>:
	100000, 110000, 121000, 133100, 146410, 161051, 177156, 194871,
	214358, 235794, 259374, 285311, 313842, 345227, 379749, 417724,
};

uint8_t sensor_powtime_encode(uint64_t raw)
{
   1f28c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (raw == 0) {
   1f290:	ea50 0301 	orrs.w	r3, r0, r1
   1f294:	d03d      	beq.n	1f312 <sensor_powtime_encode+0x86>
	}

	/* Search through the lookup table to find the highest encoding lower
	 * than the raw value.
	 */
	uint64_t raw_us = raw * USEC_PER_MSEC;
   1f296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f29a:	fba0 6703 	umull	r6, r7, r0, r3
   1f29e:	fb03 7701 	mla	r7, r3, r1, r7

	if (raw_us < powtime_lookup[0]) {
   1f2a2:	2300      	movs	r3, #0
   1f2a4:	f640 02c2 	movw	r2, #2242	; 0x8c2
   1f2a8:	42bb      	cmp	r3, r7
   1f2aa:	bf08      	it	eq
   1f2ac:	42b2      	cmpeq	r2, r6
   1f2ae:	d232      	bcs.n	1f316 <sensor_powtime_encode+0x8a>
   1f2b0:	491a      	ldr	r1, [pc, #104]	; (1f31c <sensor_powtime_encode+0x90>)
		return 1;
	}

	const uint64_t *seed = &powtime_lookup[0];

	for (int i = 1; i < ARRAY_SIZE(powtime_lookup); ++i) {
   1f2b2:	2401      	movs	r4, #1
   1f2b4:	4688      	mov	r8, r1
		if (raw_us < powtime_lookup[i]) {
   1f2b6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   1f2ba:	429f      	cmp	r7, r3
   1f2bc:	bf08      	it	eq
   1f2be:	4296      	cmpeq	r6, r2
   1f2c0:	d220      	bcs.n	1f304 <sensor_powtime_encode+0x78>
			seed = &powtime_lookup[i - 1];
   1f2c2:	3c01      	subs	r4, #1
   1f2c4:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
	}

	int i;

	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
		     raw_us > (*seed * powtime_mul[i]) / 100000);
   1f2c8:	e9d4 ba00 	ldrd	fp, sl, [r4]
   1f2cc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1f324 <sensor_powtime_encode+0x98>
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   1f2d0:	2500      	movs	r5, #0
		     raw_us > (*seed * powtime_mul[i]) / 100000);
   1f2d2:	f859 3b04 	ldr.w	r3, [r9], #4
   1f2d6:	4a12      	ldr	r2, [pc, #72]	; (1f320 <sensor_powtime_encode+0x94>)
   1f2d8:	fba3 010b 	umull	r0, r1, r3, fp
   1f2dc:	fb03 110a 	mla	r1, r3, sl, r1
   1f2e0:	2300      	movs	r3, #0
   1f2e2:	f7e2 fdb1 	bl	1e48 <__aeabi_uldivmod>
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   1f2e6:	42b9      	cmp	r1, r7
   1f2e8:	bf08      	it	eq
   1f2ea:	42b0      	cmpeq	r0, r6
   1f2ec:	d202      	bcs.n	1f2f4 <sensor_powtime_encode+0x68>
	     i++) {
   1f2ee:	3501      	adds	r5, #1
	for (i = 0; (i < ARRAY_SIZE(powtime_mul) &&
   1f2f0:	2d10      	cmp	r5, #16
   1f2f2:	d1ee      	bne.n	1f2d2 <sensor_powtime_encode+0x46>
	}

	return ARRAY_SIZE(powtime_mul) * (seed - &powtime_lookup[0]) + i;
   1f2f4:	eba4 0008 	sub.w	r0, r4, r8
   1f2f8:	10c0      	asrs	r0, r0, #3
   1f2fa:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   1f2fe:	b2c0      	uxtb	r0, r0
}
   1f300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 1; i < ARRAY_SIZE(powtime_lookup); ++i) {
   1f304:	3401      	adds	r4, #1
   1f306:	2c10      	cmp	r4, #16
   1f308:	f101 0108 	add.w	r1, r1, #8
   1f30c:	d1d3      	bne.n	1f2b6 <sensor_powtime_encode+0x2a>
	const uint64_t *seed = &powtime_lookup[0];
   1f30e:	4c03      	ldr	r4, [pc, #12]	; (1f31c <sensor_powtime_encode+0x90>)
   1f310:	e7da      	b.n	1f2c8 <sensor_powtime_encode+0x3c>
		return 0;
   1f312:	2000      	movs	r0, #0
   1f314:	e7f4      	b.n	1f300 <sensor_powtime_encode+0x74>
		return 1;
   1f316:	2001      	movs	r0, #1
   1f318:	e7f2      	b.n	1f300 <sensor_powtime_encode+0x74>
   1f31a:	bf00      	nop
   1f31c:	0002abc8 	.word	0x0002abc8
   1f320:	000186a0 	.word	0x000186a0
   1f324:	0002b784 	.word	0x0002b784

0001f328 <sensor_cadence_encode>:

int sensor_cadence_encode(struct net_buf_simple *buf,
			  const struct bt_mesh_sensor_type *sensor_type,
			  uint8_t fast_period_div, uint8_t min_int,
			  const struct bt_mesh_sensor_threshold *threshold)
{
   1f328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f32c:	9c06      	ldr	r4, [sp, #24]
   1f32e:	460f      	mov	r7, r1
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   1f330:	7821      	ldrb	r1, [r4, #0]
   1f332:	2900      	cmp	r1, #0
   1f334:	bf18      	it	ne
   1f336:	2180      	movne	r1, #128	; 0x80
					   (BIT_MASK(7) & fast_period_div));
   1f338:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   1f33c:	4311      	orrs	r1, r2
{
   1f33e:	4605      	mov	r5, r0
   1f340:	4698      	mov	r8, r3
	net_buf_simple_add_u8(buf, ((!!threshold->delta.type) << 7) |
   1f342:	f00a fb38 	bl	299b6 <net_buf_simple_add_u8>

	const struct bt_mesh_sensor_format *delta_format =
		(threshold->delta.type == BT_MESH_SENSOR_DELTA_PERCENT) ?
			&bt_mesh_sensor_format_percentage_delta_trigger :
   1f346:	7823      	ldrb	r3, [r4, #0]
   1f348:	2b01      	cmp	r3, #1
   1f34a:	bf16      	itet	ne
   1f34c:	687b      	ldrne	r3, [r7, #4]
   1f34e:	4e17      	ldreq	r6, [pc, #92]	; (1f3ac <sensor_cadence_encode+0x84>)
   1f350:	681e      	ldrne	r6, [r3, #0]
			sensor_type->channels[0].format;
	int err;

	err = sensor_ch_encode(buf, delta_format, &threshold->delta.down);
   1f352:	f104 020c 	add.w	r2, r4, #12
   1f356:	4631      	mov	r1, r6
   1f358:	4628      	mov	r0, r5
   1f35a:	f00a fddc 	bl	29f16 <sensor_ch_encode>
	if (err) {
   1f35e:	bb10      	cbnz	r0, 1f3a6 <sensor_cadence_encode+0x7e>
		return err;
	}

	err = sensor_ch_encode(buf, delta_format, &threshold->delta.up);
   1f360:	1d22      	adds	r2, r4, #4
   1f362:	4631      	mov	r1, r6
   1f364:	4628      	mov	r0, r5
   1f366:	f00a fdd6 	bl	29f16 <sensor_ch_encode>
	if (err) {
   1f36a:	b9e0      	cbnz	r0, 1f3a6 <sensor_cadence_encode+0x7e>
		return err;
	}

	net_buf_simple_add_u8(buf, min_int);
   1f36c:	4641      	mov	r1, r8
   1f36e:	4628      	mov	r0, r5
   1f370:	f00a fb21 	bl	299b6 <net_buf_simple_add_u8>

	/* Flip the order if the cadence is fast outside. */
	const struct sensor_value *first, *second;

	if (threshold->range.cadence == BT_MESH_SENSOR_CADENCE_FAST) {
   1f374:	7d23      	ldrb	r3, [r4, #20]
   1f376:	f104 0220 	add.w	r2, r4, #32
   1f37a:	2b01      	cmp	r3, #1
   1f37c:	bf08      	it	eq
   1f37e:	4613      	moveq	r3, r2
   1f380:	f104 0618 	add.w	r6, r4, #24
		first = &threshold->range.low;
   1f384:	bf04      	itt	eq
   1f386:	4632      	moveq	r2, r6
		second = &threshold->range.high;
   1f388:	461e      	moveq	r6, r3
	} else {
		first = &threshold->range.high;
		second = &threshold->range.low;
	}

	err = sensor_ch_encode(buf, sensor_type->channels[0].format, first);
   1f38a:	687b      	ldr	r3, [r7, #4]
   1f38c:	4628      	mov	r0, r5
   1f38e:	6819      	ldr	r1, [r3, #0]
   1f390:	f00a fdc1 	bl	29f16 <sensor_ch_encode>
	if (err) {
   1f394:	b938      	cbnz	r0, 1f3a6 <sensor_cadence_encode+0x7e>
		return err;
	}

	return sensor_ch_encode(buf, sensor_type->channels[0].format, second);
   1f396:	687b      	ldr	r3, [r7, #4]
   1f398:	4632      	mov	r2, r6
   1f39a:	4628      	mov	r0, r5
   1f39c:	6819      	ldr	r1, [r3, #0]
}
   1f39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sensor_ch_encode(buf, sensor_type->channels[0].format, second);
   1f3a2:	f00a bdb8 	b.w	29f16 <sensor_ch_encode>
}
   1f3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3aa:	bf00      	nop
   1f3ac:	0002b754 	.word	0x0002b754

0001f3b0 <sensor_cadence_decode>:

int sensor_cadence_decode(struct net_buf_simple *buf,
			  const struct bt_mesh_sensor_type *sensor_type,
			  uint8_t *fast_period_div, uint8_t *min_int,
			  struct bt_mesh_sensor_threshold *threshold)
{
   1f3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f3b4:	9c06      	ldr	r4, [sp, #24]
   1f3b6:	4616      	mov	r6, r2
   1f3b8:	461f      	mov	r7, r3
   1f3ba:	4605      	mov	r5, r0
   1f3bc:	4688      	mov	r8, r1
	const struct bt_mesh_sensor_format *delta_format;
	uint8_t div_and_type;
	int err;

	div_and_type = net_buf_simple_pull_u8(buf);
   1f3be:	f00a faa8 	bl	29912 <net_buf_simple_pull_u8>
	threshold->delta.type = div_and_type >> 7;
   1f3c2:	09c3      	lsrs	r3, r0, #7
   1f3c4:	7023      	strb	r3, [r4, #0]
	*fast_period_div = div_and_type & BIT_MASK(7);
	if (*fast_period_div > BT_MESH_SENSOR_PERIOD_DIV_MAX) {
   1f3c6:	f010 0f70 	tst.w	r0, #112	; 0x70
	*fast_period_div = div_and_type & BIT_MASK(7);
   1f3ca:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1f3ce:	7033      	strb	r3, [r6, #0]
	if (*fast_period_div > BT_MESH_SENSOR_PERIOD_DIV_MAX) {
   1f3d0:	d004      	beq.n	1f3dc <sensor_cadence_decode+0x2c>
		return -EINVAL;
   1f3d2:	f06f 0315 	mvn.w	r3, #21
	} else {
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_FAST;
	}

	return 0;
}
   1f3d6:	4618      	mov	r0, r3
   1f3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			       &bt_mesh_sensor_format_percentage_delta_trigger :
   1f3dc:	7823      	ldrb	r3, [r4, #0]
   1f3de:	2b01      	cmp	r3, #1
   1f3e0:	bf16      	itet	ne
   1f3e2:	f8d8 3004 	ldrne.w	r3, [r8, #4]
   1f3e6:	4e23      	ldreq	r6, [pc, #140]	; (1f474 <sensor_cadence_decode+0xc4>)
   1f3e8:	681e      	ldrne	r6, [r3, #0]
	err = sensor_ch_decode(buf, delta_format, &threshold->delta.down);
   1f3ea:	f104 020c 	add.w	r2, r4, #12
   1f3ee:	4631      	mov	r1, r6
   1f3f0:	4628      	mov	r0, r5
   1f3f2:	f00a fdaf 	bl	29f54 <sensor_ch_decode>
	if (err) {
   1f3f6:	4603      	mov	r3, r0
   1f3f8:	2800      	cmp	r0, #0
   1f3fa:	d1ec      	bne.n	1f3d6 <sensor_cadence_decode+0x26>
	err = sensor_ch_decode(buf, delta_format, &threshold->delta.up);
   1f3fc:	1d22      	adds	r2, r4, #4
   1f3fe:	4631      	mov	r1, r6
   1f400:	4628      	mov	r0, r5
   1f402:	f00a fda7 	bl	29f54 <sensor_ch_decode>
	if (err) {
   1f406:	4603      	mov	r3, r0
   1f408:	2800      	cmp	r0, #0
   1f40a:	d1e4      	bne.n	1f3d6 <sensor_cadence_decode+0x26>
	*min_int = net_buf_simple_pull_u8(buf);
   1f40c:	4628      	mov	r0, r5
   1f40e:	f00a fa80 	bl	29912 <net_buf_simple_pull_u8>
	if (*min_int > BT_MESH_SENSOR_INTERVAL_MAX) {
   1f412:	281a      	cmp	r0, #26
	*min_int = net_buf_simple_pull_u8(buf);
   1f414:	7038      	strb	r0, [r7, #0]
	if (*min_int > BT_MESH_SENSOR_INTERVAL_MAX) {
   1f416:	d8dc      	bhi.n	1f3d2 <sensor_cadence_decode+0x22>
	err = sensor_ch_decode(buf, sensor_type->channels[0].format,
   1f418:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1f41c:	f104 0718 	add.w	r7, r4, #24
   1f420:	6819      	ldr	r1, [r3, #0]
   1f422:	463a      	mov	r2, r7
   1f424:	4628      	mov	r0, r5
   1f426:	f00a fd95 	bl	29f54 <sensor_ch_decode>
	if (err) {
   1f42a:	4603      	mov	r3, r0
   1f42c:	2800      	cmp	r0, #0
   1f42e:	d1d2      	bne.n	1f3d6 <sensor_cadence_decode+0x26>
	err = sensor_ch_decode(buf, sensor_type->channels[0].format,
   1f430:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1f434:	f104 0620 	add.w	r6, r4, #32
   1f438:	6819      	ldr	r1, [r3, #0]
   1f43a:	4632      	mov	r2, r6
   1f43c:	4628      	mov	r0, r5
   1f43e:	f00a fd89 	bl	29f54 <sensor_ch_decode>
	if (err) {
   1f442:	4603      	mov	r3, r0
   1f444:	2800      	cmp	r0, #0
   1f446:	d1c6      	bne.n	1f3d6 <sensor_cadence_decode+0x26>
	if (threshold->range.high.val1 < threshold->range.low.val1 ||
   1f448:	6a22      	ldr	r2, [r4, #32]
   1f44a:	69a1      	ldr	r1, [r4, #24]
   1f44c:	428a      	cmp	r2, r1
   1f44e:	db04      	blt.n	1f45a <sensor_cadence_decode+0xaa>
   1f450:	d10d      	bne.n	1f46e <sensor_cadence_decode+0xbe>
	    (threshold->range.high.val1 == threshold->range.low.val1 &&
   1f452:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1f454:	69e1      	ldr	r1, [r4, #28]
   1f456:	4288      	cmp	r0, r1
   1f458:	da09      	bge.n	1f46e <sensor_cadence_decode+0xbe>
		threshold->range.high = threshold->range.low;
   1f45a:	e897 0003 	ldmia.w	r7, {r0, r1}
		temp = threshold->range.high;
   1f45e:	6a65      	ldr	r5, [r4, #36]	; 0x24
		threshold->range.high = threshold->range.low;
   1f460:	e886 0003 	stmia.w	r6, {r0, r1}
		threshold->range.low = temp;
   1f464:	e9c4 2506 	strd	r2, r5, [r4, #24]
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_NORMAL;
   1f468:	2200      	movs	r2, #0
		threshold->range.cadence = BT_MESH_SENSOR_CADENCE_FAST;
   1f46a:	7522      	strb	r2, [r4, #20]
   1f46c:	e7b3      	b.n	1f3d6 <sensor_cadence_decode+0x26>
   1f46e:	2201      	movs	r2, #1
   1f470:	e7fb      	b.n	1f46a <sensor_cadence_decode+0xba>
   1f472:	bf00      	nop
   1f474:	0002b754 	.word	0x0002b754

0001f478 <sensor_cadence_update>:
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   1f478:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1f47a:	f8df c074 	ldr.w	ip, [pc, #116]	; 1f4f0 <sensor_cadence_update+0x78>
		(value->val1 == col->end.val1 && value->val2 <= col->end.val2));
}

void sensor_cadence_update(struct bt_mesh_sensor *sensor,
			   const struct sensor_value *value)
{
   1f47e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   1f482:	6c04      	ldr	r4, [r0, #64]	; 0x40
	int64_t low_mill = SENSOR_MILL(&threshold->range.low);
   1f484:	6b86      	ldr	r6, [r0, #56]	; 0x38
	int64_t high_mill = SENSOR_MILL(&threshold->range.high);
   1f486:	17d3      	asrs	r3, r2, #31
   1f488:	fbcc 2304 	smlal	r2, r3, ip, r4
	int64_t low_mill = SENSOR_MILL(&threshold->range.low);
   1f48c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   1f48e:	17e5      	asrs	r5, r4, #31
   1f490:	fbcc 4506 	smlal	r4, r5, ip, r6
	if (high_mill == low_mill) {
   1f494:	42ab      	cmp	r3, r5
   1f496:	bf08      	it	eq
   1f498:	42a2      	cmpeq	r2, r4
   1f49a:	d027      	beq.n	1f4ec <sensor_cadence_update+0x74>
	int64_t curr_mill = SENSOR_MILL(curr);
   1f49c:	684e      	ldr	r6, [r1, #4]
   1f49e:	6809      	ldr	r1, [r1, #0]
   1f4a0:	17f7      	asrs	r7, r6, #31
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   1f4a2:	4294      	cmp	r4, r2
	int64_t curr_mill = SENSOR_MILL(curr);
   1f4a4:	fbcc 6701 	smlal	r6, r7, ip, r1
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   1f4a8:	eb75 0c03 	sbcs.w	ip, r5, r3
   1f4ac:	4690      	mov	r8, r2
   1f4ae:	bfb8      	it	lt
   1f4b0:	46a0      	movlt	r8, r4
   1f4b2:	4699      	mov	r9, r3
   1f4b4:	bfb8      	it	lt
   1f4b6:	46a9      	movlt	r9, r5
   1f4b8:	4546      	cmp	r6, r8
   1f4ba:	eb77 0c09 	sbcs.w	ip, r7, r9
   1f4be:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   1f4c2:	db08      	blt.n	1f4d6 <sensor_cadence_update+0x5e>
			 curr_mill <= MAX(low_mill, high_mill));
   1f4c4:	42a2      	cmp	r2, r4
   1f4c6:	eb73 0c05 	sbcs.w	ip, r3, r5
   1f4ca:	bfbc      	itt	lt
   1f4cc:	4622      	movlt	r2, r4
   1f4ce:	462b      	movlt	r3, r5
	bool in_range = (curr_mill >= MIN(low_mill, high_mill) &&
   1f4d0:	42b2      	cmp	r2, r6
   1f4d2:	41bb      	sbcs	r3, r7
   1f4d4:	da02      	bge.n	1f4dc <sensor_cadence_update+0x64>
	return in_range ? threshold->range.cadence : !threshold->range.cadence;
   1f4d6:	fab1 f181 	clz	r1, r1
   1f4da:	0949      	lsrs	r1, r1, #5
		BT_DBG("0x%04x new cadence: %s", sensor->type->id,
		       (new == BT_MESH_SENSOR_CADENCE_FAST) ? "fast" :
							      "normal");
	}

	sensor->state.fast_pub = new;
   1f4dc:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
   1f4e0:	f361 1304 	bfi	r3, r1, #4, #1
   1f4e4:	f880 3057 	strb.w	r3, [r0, #87]	; 0x57
}
   1f4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_MESH_SENSOR_CADENCE_NORMAL;
   1f4ec:	2100      	movs	r1, #0
   1f4ee:	e7f5      	b.n	1f4dc <sensor_cadence_update+0x64>
   1f4f0:	000f4240 	.word	0x000f4240

0001f4f4 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   1f4f4:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);
   1f4f6:	b940      	cbnz	r0, 1f50a <hw_cc3xx_init+0x16>
   1f4f8:	4908      	ldr	r1, [pc, #32]	; (1f51c <hw_cc3xx_init+0x28>)
   1f4fa:	4809      	ldr	r0, [pc, #36]	; (1f520 <hw_cc3xx_init+0x2c>)
   1f4fc:	2218      	movs	r2, #24
   1f4fe:	f004 fe9d 	bl	2423c <printk>
   1f502:	2118      	movs	r1, #24
   1f504:	4805      	ldr	r0, [pc, #20]	; (1f51c <hw_cc3xx_init+0x28>)
   1f506:	f005 f94b 	bl	247a0 <assert_post_action>

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1f50a:	f7e6 fcfb 	bl	5f04 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1f50e:	f7e6 fdad 	bl	606c <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   1f512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   1f516:	f003 be4d 	b.w	231b4 <nrf_cc3xx_platform_init>
   1f51a:	bf00      	nop
   1f51c:	00031775 	.word	0x00031775
   1f520:	0002bced 	.word	0x0002bced

0001f524 <__NVIC_SystemReset>:
   1f524:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f528:	4905      	ldr	r1, [pc, #20]	; (1f540 <__NVIC_SystemReset+0x1c>)
   1f52a:	4b06      	ldr	r3, [pc, #24]	; (1f544 <__NVIC_SystemReset+0x20>)
   1f52c:	68ca      	ldr	r2, [r1, #12]
   1f52e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f532:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f534:	60cb      	str	r3, [r1, #12]
   1f536:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f53a:	bf00      	nop
   1f53c:	e7fd      	b.n	1f53a <__NVIC_SystemReset+0x16>
   1f53e:	bf00      	nop
   1f540:	e000ed00 	.word	0xe000ed00
   1f544:	05fa0004 	.word	0x05fa0004

0001f548 <nrf52_errata_136>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f548:	4b06      	ldr	r3, [pc, #24]	; (1f564 <nrf52_errata_136+0x1c>)
   1f54a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f54c:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   1f54e:	681b      	ldr	r3, [r3, #0]
   1f550:	2b08      	cmp	r3, #8
   1f552:	d104      	bne.n	1f55e <nrf52_errata_136+0x16>
                switch(var2)
   1f554:	2803      	cmp	r0, #3
   1f556:	bf8c      	ite	hi
   1f558:	2000      	movhi	r0, #0
   1f55a:	2001      	movls	r0, #1
   1f55c:	4770      	bx	lr
        return false;
   1f55e:	2000      	movs	r0, #0
}
   1f560:	4770      	bx	lr
   1f562:	bf00      	nop
   1f564:	10000134 	.word	0x10000134

0001f568 <nrf52_errata_103>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f568:	4b05      	ldr	r3, [pc, #20]	; (1f580 <nrf52_errata_103+0x18>)
   1f56a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f56c:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   1f56e:	681b      	ldr	r3, [r3, #0]
   1f570:	2b08      	cmp	r3, #8
                switch(var2)
   1f572:	bf06      	itte	eq
   1f574:	fab0 f080 	clzeq	r0, r0
   1f578:	0940      	lsreq	r0, r0, #5
        return false;
   1f57a:	2000      	movne	r0, #0
}
   1f57c:	4770      	bx	lr
   1f57e:	bf00      	nop
   1f580:	10000134 	.word	0x10000134

0001f584 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f584:	4a02      	ldr	r2, [pc, #8]	; (1f590 <nvmc_wait+0xc>)
   1f586:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f58a:	2b00      	cmp	r3, #0
   1f58c:	d0fb      	beq.n	1f586 <nvmc_wait+0x2>
}
   1f58e:	4770      	bx	lr
   1f590:	4001e000 	.word	0x4001e000

0001f594 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1f594:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f596:	f7ff ffd7 	bl	1f548 <nrf52_errata_136>
   1f59a:	b140      	cbz	r0, 1f5ae <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f59c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f5a0:	2200      	movs	r2, #0
   1f5a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f5a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f5aa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f5ae:	f7ff ffcb 	bl	1f548 <nrf52_errata_136>
   1f5b2:	2800      	cmp	r0, #0
   1f5b4:	d046      	beq.n	1f644 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f5ba:	4b57      	ldr	r3, [pc, #348]	; (1f718 <SystemInit+0x184>)
   1f5bc:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f5c0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f5c4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f5c8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f5cc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f5d0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f5d4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f5d8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f5dc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f5e0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f5e4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f5e8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f5ec:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f5f0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f5f4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f5f8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f5fc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f600:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f604:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f608:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f60c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f610:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f614:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f618:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f61c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f620:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f624:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f628:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f62c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f630:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f634:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f638:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f63c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f640:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1f644:	f7ff ff90 	bl	1f568 <nrf52_errata_103>
   1f648:	b110      	cbz	r0, 1f650 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1f64a:	4b34      	ldr	r3, [pc, #208]	; (1f71c <SystemInit+0x188>)
   1f64c:	4a34      	ldr	r2, [pc, #208]	; (1f720 <SystemInit+0x18c>)
   1f64e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1f650:	f7ff ff8a 	bl	1f568 <nrf52_errata_103>
   1f654:	b118      	cbz	r0, 1f65e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1f656:	4b33      	ldr	r3, [pc, #204]	; (1f724 <SystemInit+0x190>)
   1f658:	22fb      	movs	r2, #251	; 0xfb
   1f65a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1f65e:	f7ff ff83 	bl	1f568 <nrf52_errata_103>
   1f662:	b148      	cbz	r0, 1f678 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1f664:	4930      	ldr	r1, [pc, #192]	; (1f728 <SystemInit+0x194>)
   1f666:	4b31      	ldr	r3, [pc, #196]	; (1f72c <SystemInit+0x198>)
   1f668:	680a      	ldr	r2, [r1, #0]
   1f66a:	681b      	ldr	r3, [r3, #0]
   1f66c:	f022 020f 	bic.w	r2, r2, #15
   1f670:	f003 030f 	and.w	r3, r3, #15
   1f674:	4313      	orrs	r3, r2
   1f676:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1f678:	f7ff ff76 	bl	1f568 <nrf52_errata_103>
   1f67c:	b118      	cbz	r0, 1f686 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1f67e:	4b2c      	ldr	r3, [pc, #176]	; (1f730 <SystemInit+0x19c>)
   1f680:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f684:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f686:	f7ff ff5f 	bl	1f548 <nrf52_errata_136>
   1f68a:	b148      	cbz	r0, 1f6a0 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f68c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f690:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f694:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f696:	bf44      	itt	mi
   1f698:	f06f 0201 	mvnmi.w	r2, #1
   1f69c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1f6a0:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   1f6a4:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1f6a8:	07db      	lsls	r3, r3, #31
   1f6aa:	d514      	bpl.n	1f6d6 <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f6ac:	4821      	ldr	r0, [pc, #132]	; (1f734 <SystemInit+0x1a0>)
   1f6ae:	2301      	movs	r3, #1
   1f6b0:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1f6b4:	f7ff ff66 	bl	1f584 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   1f6b8:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1f6bc:	f023 0301 	bic.w	r3, r3, #1
   1f6c0:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   1f6c4:	f7ff ff5e 	bl	1f584 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f6c8:	2300      	movs	r3, #0
   1f6ca:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1f6ce:	f7ff ff59 	bl	1f584 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   1f6d2:	f7ff ff27 	bl	1f524 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f6d6:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   1f6da:	2b00      	cmp	r3, #0
   1f6dc:	db03      	blt.n	1f6e6 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f6de:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f6e2:	2b00      	cmp	r3, #0
   1f6e4:	da14      	bge.n	1f710 <SystemInit+0x17c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f6e6:	4913      	ldr	r1, [pc, #76]	; (1f734 <SystemInit+0x1a0>)
   1f6e8:	2301      	movs	r3, #1
   1f6ea:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f6ee:	f7ff ff49 	bl	1f584 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f6f2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1f6f6:	2412      	movs	r4, #18
   1f6f8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f6fc:	f7ff ff42 	bl	1f584 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f700:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f704:	f7ff ff3e 	bl	1f584 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f708:	2300      	movs	r3, #0
   1f70a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   1f70e:	e7de      	b.n	1f6ce <SystemInit+0x13a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f710:	4b09      	ldr	r3, [pc, #36]	; (1f738 <SystemInit+0x1a4>)
   1f712:	4a0a      	ldr	r2, [pc, #40]	; (1f73c <SystemInit+0x1a8>)
   1f714:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1f716:	bd10      	pop	{r4, pc}
   1f718:	4000c000 	.word	0x4000c000
   1f71c:	4000568c 	.word	0x4000568c
   1f720:	00038148 	.word	0x00038148
   1f724:	4000f000 	.word	0x4000f000
   1f728:	40000ee4 	.word	0x40000ee4
   1f72c:	10000258 	.word	0x10000258
   1f730:	40029640 	.word	0x40029640
   1f734:	4001e000 	.word	0x4001e000
   1f738:	20000b10 	.word	0x20000b10
   1f73c:	03d09000 	.word	0x03d09000

0001f740 <nrf_clock_is_running.constprop.2>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   1f740:	b508      	push	{r3, lr}
    switch (domain)
   1f742:	b170      	cbz	r0, 1f762 <nrf_clock_is_running.constprop.2+0x22>
   1f744:	2801      	cmp	r0, #1
   1f746:	d01b      	beq.n	1f780 <nrf_clock_is_running.constprop.2+0x40>
            NRFX_ASSERT(0);
   1f748:	f240 3242 	movw	r2, #834	; 0x342
   1f74c:	4913      	ldr	r1, [pc, #76]	; (1f79c <nrf_clock_is_running.constprop.2+0x5c>)
   1f74e:	4814      	ldr	r0, [pc, #80]	; (1f7a0 <nrf_clock_is_running.constprop.2+0x60>)
   1f750:	f004 fd74 	bl	2423c <printk>
   1f754:	4811      	ldr	r0, [pc, #68]	; (1f79c <nrf_clock_is_running.constprop.2+0x5c>)
   1f756:	f240 3142 	movw	r1, #834	; 0x342
   1f75a:	f005 f821 	bl	247a0 <assert_post_action>
            return false;
   1f75e:	2000      	movs	r0, #0
   1f760:	e00d      	b.n	1f77e <nrf_clock_is_running.constprop.2+0x3e>
            if (p_clk_src != NULL)
   1f762:	b131      	cbz	r1, 1f772 <nrf_clock_is_running.constprop.2+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f768:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1f76c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1f770:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f776:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f77a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   1f77e:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   1f780:	b131      	cbz	r1, 1f790 <nrf_clock_is_running.constprop.2+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f786:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1f78a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1f78e:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f794:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   1f798:	e7ef      	b.n	1f77a <nrf_clock_is_running.constprop.2+0x3a>
   1f79a:	bf00      	nop
   1f79c:	000317ac 	.word	0x000317ac
   1f7a0:	0002bced 	.word	0x0002bced

0001f7a4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   1f7a4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   1f7a6:	4604      	mov	r4, r0
   1f7a8:	b940      	cbnz	r0, 1f7bc <nrfx_clock_init+0x18>
   1f7aa:	4909      	ldr	r1, [pc, #36]	; (1f7d0 <nrfx_clock_init+0x2c>)
   1f7ac:	4809      	ldr	r0, [pc, #36]	; (1f7d4 <nrfx_clock_init+0x30>)
   1f7ae:	22b3      	movs	r2, #179	; 0xb3
   1f7b0:	f004 fd44 	bl	2423c <printk>
   1f7b4:	21b3      	movs	r1, #179	; 0xb3
   1f7b6:	4806      	ldr	r0, [pc, #24]	; (1f7d0 <nrfx_clock_init+0x2c>)
   1f7b8:	f004 fff2 	bl	247a0 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1f7bc:	4b06      	ldr	r3, [pc, #24]	; (1f7d8 <nrfx_clock_init+0x34>)
   1f7be:	791a      	ldrb	r2, [r3, #4]
   1f7c0:	b922      	cbnz	r2, 1f7cc <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1f7c2:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f7c4:	4805      	ldr	r0, [pc, #20]	; (1f7dc <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   1f7c6:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   1f7c8:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f7ca:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1f7cc:	4804      	ldr	r0, [pc, #16]	; (1f7e0 <nrfx_clock_init+0x3c>)
    return err_code;
   1f7ce:	e7fc      	b.n	1f7ca <nrfx_clock_init+0x26>
   1f7d0:	000317e0 	.word	0x000317e0
   1f7d4:	0002bced 	.word	0x0002bced
   1f7d8:	200033e4 	.word	0x200033e4
   1f7dc:	0bad0000 	.word	0x0bad0000
   1f7e0:	0bad000c 	.word	0x0bad000c

0001f7e4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   1f7e4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1f7e6:	4b0a      	ldr	r3, [pc, #40]	; (1f810 <nrfx_clock_enable+0x2c>)
   1f7e8:	791b      	ldrb	r3, [r3, #4]
   1f7ea:	b943      	cbnz	r3, 1f7fe <nrfx_clock_enable+0x1a>
   1f7ec:	4909      	ldr	r1, [pc, #36]	; (1f814 <nrfx_clock_enable+0x30>)
   1f7ee:	480a      	ldr	r0, [pc, #40]	; (1f818 <nrfx_clock_enable+0x34>)
   1f7f0:	22cc      	movs	r2, #204	; 0xcc
   1f7f2:	f004 fd23 	bl	2423c <printk>
   1f7f6:	21cc      	movs	r1, #204	; 0xcc
   1f7f8:	4806      	ldr	r0, [pc, #24]	; (1f814 <nrfx_clock_enable+0x30>)
   1f7fa:	f004 ffd1 	bl	247a0 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1f7fe:	2000      	movs	r0, #0
   1f800:	f7e6 fe5c 	bl	64bc <arch_irq_is_enabled>
   1f804:	b918      	cbnz	r0, 1f80e <nrfx_clock_enable+0x2a>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1f806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1f80a:	f7e6 be33 	b.w	6474 <arch_irq_enable>
   1f80e:	bd08      	pop	{r3, pc}
   1f810:	200033e4 	.word	0x200033e4
   1f814:	000317e0 	.word	0x000317e0
   1f818:	0002bced 	.word	0x0002bced

0001f81c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1f81c:	4b21      	ldr	r3, [pc, #132]	; (1f8a4 <nrfx_clock_start+0x88>)
   1f81e:	791b      	ldrb	r3, [r3, #4]
{
   1f820:	b513      	push	{r0, r1, r4, lr}
   1f822:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1f824:	b953      	cbnz	r3, 1f83c <nrfx_clock_start+0x20>
   1f826:	4920      	ldr	r1, [pc, #128]	; (1f8a8 <nrfx_clock_start+0x8c>)
   1f828:	4820      	ldr	r0, [pc, #128]	; (1f8ac <nrfx_clock_start+0x90>)
   1f82a:	f44f 7284 	mov.w	r2, #264	; 0x108
   1f82e:	f004 fd05 	bl	2423c <printk>
   1f832:	f44f 7184 	mov.w	r1, #264	; 0x108
   1f836:	481c      	ldr	r0, [pc, #112]	; (1f8a8 <nrfx_clock_start+0x8c>)
   1f838:	f004 ffb2 	bl	247a0 <assert_post_action>
    switch (domain)
   1f83c:	b16c      	cbz	r4, 1f85a <nrfx_clock_start+0x3e>
   1f83e:	2c01      	cmp	r4, #1
   1f840:	d026      	beq.n	1f890 <nrfx_clock_start+0x74>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1f842:	f44f 729d 	mov.w	r2, #314	; 0x13a
   1f846:	4918      	ldr	r1, [pc, #96]	; (1f8a8 <nrfx_clock_start+0x8c>)
   1f848:	4818      	ldr	r0, [pc, #96]	; (1f8ac <nrfx_clock_start+0x90>)
   1f84a:	f004 fcf7 	bl	2423c <printk>
   1f84e:	f44f 719d 	mov.w	r1, #314	; 0x13a
   1f852:	4815      	ldr	r0, [pc, #84]	; (1f8a8 <nrfx_clock_start+0x8c>)
   1f854:	f004 ffa4 	bl	247a0 <assert_post_action>
            break;
    }
}
   1f858:	e016      	b.n	1f888 <nrfx_clock_start+0x6c>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1f85a:	a901      	add	r1, sp, #4
   1f85c:	4620      	mov	r0, r4
   1f85e:	f7ff ff6f 	bl	1f740 <nrf_clock_is_running.constprop.2>
   1f862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f866:	b188      	cbz	r0, 1f88c <nrfx_clock_start+0x70>
   1f868:	9a01      	ldr	r2, [sp, #4]
   1f86a:	2a01      	cmp	r2, #1
   1f86c:	d10e      	bne.n	1f88c <nrfx_clock_start+0x70>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f86e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f872:	4b0f      	ldr	r3, [pc, #60]	; (1f8b0 <nrfx_clock_start+0x94>)
   1f874:	2200      	movs	r2, #0
   1f876:	601a      	str	r2, [r3, #0]
   1f878:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1f87a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f87e:	2202      	movs	r2, #2
   1f880:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f884:	2201      	movs	r2, #1
   1f886:	609a      	str	r2, [r3, #8]
}
   1f888:	b002      	add	sp, #8
   1f88a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f88c:	2200      	movs	r2, #0
   1f88e:	e7ee      	b.n	1f86e <nrfx_clock_start+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f890:	4b08      	ldr	r3, [pc, #32]	; (1f8b4 <nrfx_clock_start+0x98>)
   1f892:	2200      	movs	r2, #0
   1f894:	601a      	str	r2, [r3, #0]
   1f896:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1f898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f89c:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f8a0:	601c      	str	r4, [r3, #0]
   1f8a2:	e7f1      	b.n	1f888 <nrfx_clock_start+0x6c>
   1f8a4:	200033e4 	.word	0x200033e4
   1f8a8:	000317e0 	.word	0x000317e0
   1f8ac:	0002bced 	.word	0x0002bced
   1f8b0:	40000104 	.word	0x40000104
   1f8b4:	40000100 	.word	0x40000100

0001f8b8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f8b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1f8ba:	4d2e      	ldr	r5, [pc, #184]	; (1f974 <nrfx_clock_stop+0xbc>)
   1f8bc:	792a      	ldrb	r2, [r5, #4]
{
   1f8be:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1f8c0:	b952      	cbnz	r2, 1f8d8 <nrfx_clock_stop+0x20>
   1f8c2:	492d      	ldr	r1, [pc, #180]	; (1f978 <nrfx_clock_stop+0xc0>)
   1f8c4:	482d      	ldr	r0, [pc, #180]	; (1f97c <nrfx_clock_stop+0xc4>)
   1f8c6:	f240 1241 	movw	r2, #321	; 0x141
   1f8ca:	f004 fcb7 	bl	2423c <printk>
   1f8ce:	f240 1141 	movw	r1, #321	; 0x141
   1f8d2:	4829      	ldr	r0, [pc, #164]	; (1f978 <nrfx_clock_stop+0xc0>)
   1f8d4:	f004 ff64 	bl	247a0 <assert_post_action>
    switch (domain)
   1f8d8:	b174      	cbz	r4, 1f8f8 <nrfx_clock_stop+0x40>
   1f8da:	2c01      	cmp	r4, #1
   1f8dc:	d027      	beq.n	1f92e <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   1f8de:	4926      	ldr	r1, [pc, #152]	; (1f978 <nrfx_clock_stop+0xc0>)
   1f8e0:	4826      	ldr	r0, [pc, #152]	; (1f97c <nrfx_clock_stop+0xc4>)
   1f8e2:	f240 125d 	movw	r2, #349	; 0x15d
   1f8e6:	f004 fca9 	bl	2423c <printk>
   1f8ea:	f240 115d 	movw	r1, #349	; 0x15d
   1f8ee:	4822      	ldr	r0, [pc, #136]	; (1f978 <nrfx_clock_stop+0xc0>)
   1f8f0:	f004 ff56 	bl	247a0 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1f8f4:	b003      	add	sp, #12
   1f8f6:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
   1f8f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f8fc:	2202      	movs	r2, #2
   1f8fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f902:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   1f906:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f90a:	2201      	movs	r2, #1
   1f90c:	681b      	ldr	r3, [r3, #0]
   1f90e:	4b1c      	ldr	r3, [pc, #112]	; (1f980 <nrfx_clock_stop+0xc8>)
   1f910:	f242 7410 	movw	r4, #10000	; 0x2710
   1f914:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   1f916:	2100      	movs	r1, #0
   1f918:	4608      	mov	r0, r1
   1f91a:	f7ff ff11 	bl	1f740 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1f91e:	2800      	cmp	r0, #0
   1f920:	d0e8      	beq.n	1f8f4 <nrfx_clock_stop+0x3c>
   1f922:	2001      	movs	r0, #1
   1f924:	f00a fb6c 	bl	2a000 <nrfx_busy_wait>
   1f928:	3c01      	subs	r4, #1
   1f92a:	d1f4      	bne.n	1f916 <nrfx_clock_stop+0x5e>
   1f92c:	e7e2      	b.n	1f8f4 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
   1f92e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f932:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1f934:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f938:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f93c:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1f940:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f942:	4b10      	ldr	r3, [pc, #64]	; (1f984 <nrfx_clock_stop+0xcc>)
   1f944:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1f946:	f88d 4007 	strb.w	r4, [sp, #7]
   1f94a:	f242 7410 	movw	r4, #10000	; 0x2710
   1f94e:	f10d 0107 	add.w	r1, sp, #7
   1f952:	2001      	movs	r0, #1
   1f954:	f7ff fef4 	bl	1f740 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1f958:	b910      	cbnz	r0, 1f960 <nrfx_clock_stop+0xa8>
            m_clock_cb.hfclk_started = false;
   1f95a:	2300      	movs	r3, #0
   1f95c:	716b      	strb	r3, [r5, #5]
   1f95e:	e7c9      	b.n	1f8f4 <nrfx_clock_stop+0x3c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1f960:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1f964:	2801      	cmp	r0, #1
   1f966:	d1f8      	bne.n	1f95a <nrfx_clock_stop+0xa2>
   1f968:	f00a fb4a 	bl	2a000 <nrfx_busy_wait>
   1f96c:	3c01      	subs	r4, #1
   1f96e:	d1ee      	bne.n	1f94e <nrfx_clock_stop+0x96>
   1f970:	e7f3      	b.n	1f95a <nrfx_clock_stop+0xa2>
   1f972:	bf00      	nop
   1f974:	200033e4 	.word	0x200033e4
   1f978:	000317e0 	.word	0x000317e0
   1f97c:	0002bced 	.word	0x0002bced
   1f980:	4000000c 	.word	0x4000000c
   1f984:	40000004 	.word	0x40000004

0001f988 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f988:	4b16      	ldr	r3, [pc, #88]	; (1f9e4 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1f98a:	b507      	push	{r0, r1, r2, lr}
   1f98c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1f98e:	b16a      	cbz	r2, 1f9ac <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f990:	2200      	movs	r2, #0
   1f992:	601a      	str	r2, [r3, #0]
   1f994:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1f996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f99a:	2201      	movs	r2, #1
   1f99c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1f9a0:	4b11      	ldr	r3, [pc, #68]	; (1f9e8 <nrfx_power_clock_irq_handler+0x60>)
   1f9a2:	7958      	ldrb	r0, [r3, #5]
   1f9a4:	b910      	cbnz	r0, 1f9ac <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1f9a6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f9a8:	681b      	ldr	r3, [r3, #0]
   1f9aa:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f9ac:	4b0f      	ldr	r3, [pc, #60]	; (1f9ec <nrfx_power_clock_irq_handler+0x64>)
   1f9ae:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1f9b0:	b16a      	cbz	r2, 1f9ce <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f9b2:	2000      	movs	r0, #0
   1f9b4:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   1f9b6:	a901      	add	r1, sp, #4
   1f9b8:	681b      	ldr	r3, [r3, #0]
   1f9ba:	f7ff fec1 	bl	1f740 <nrf_clock_is_running.constprop.2>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1f9be:	9a01      	ldr	r2, [sp, #4]
   1f9c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f9c4:	b932      	cbnz	r2, 1f9d4 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f9c6:	2201      	movs	r2, #1
   1f9c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f9cc:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1f9ce:	b003      	add	sp, #12
   1f9d0:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   1f9d4:	2202      	movs	r2, #2
   1f9d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f9da:	4b03      	ldr	r3, [pc, #12]	; (1f9e8 <nrfx_power_clock_irq_handler+0x60>)
   1f9dc:	2001      	movs	r0, #1
   1f9de:	681b      	ldr	r3, [r3, #0]
   1f9e0:	4798      	blx	r3
}
   1f9e2:	e7f4      	b.n	1f9ce <nrfx_power_clock_irq_handler+0x46>
   1f9e4:	40000100 	.word	0x40000100
   1f9e8:	200033e4 	.word	0x200033e4
   1f9ec:	40000104 	.word	0x40000104

0001f9f0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1f9f0:	2301      	movs	r3, #1
   1f9f2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1f9f6:	f010 0fff 	tst.w	r0, #255	; 0xff
   1f9fa:	d012      	beq.n	1fa22 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1f9fc:	f04f 0320 	mov.w	r3, #32
   1fa00:	f3ef 8111 	mrs	r1, BASEPRI
   1fa04:	f383 8811 	msr	BASEPRI, r3
   1fa08:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1fa0c:	4a06      	ldr	r2, [pc, #24]	; (1fa28 <nrfx_gpiote_channel_free+0x38>)
   1fa0e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1fa10:	ea23 0000 	bic.w	r0, r3, r0
   1fa14:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1fa16:	f381 8811 	msr	BASEPRI, r1
   1fa1a:	f3bf 8f6f 	isb	sy
   1fa1e:	4803      	ldr	r0, [pc, #12]	; (1fa2c <nrfx_gpiote_channel_free+0x3c>)
   1fa20:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1fa22:	4803      	ldr	r0, [pc, #12]	; (1fa30 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1fa24:	4770      	bx	lr
   1fa26:	bf00      	nop
   1fa28:	200033ec 	.word	0x200033ec
   1fa2c:	0bad0000 	.word	0x0bad0000
   1fa30:	0bad0004 	.word	0x0bad0004

0001fa34 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1fa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa38:	4686      	mov	lr, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1fa3a:	4e16      	ldr	r6, [pc, #88]	; (1fa94 <nrfx_gpiote_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1fa3c:	4816      	ldr	r0, [pc, #88]	; (1fa98 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1fa3e:	4f17      	ldr	r7, [pc, #92]	; (1fa9c <nrfx_gpiote_channel_alloc+0x68>)
{
   1fa40:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1fa42:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1fa44:	2501      	movs	r5, #1
   1fa46:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1fa48:	f04f 0120 	mov.w	r1, #32
   1fa4c:	f3ef 8811 	mrs	r8, BASEPRI
   1fa50:	f381 8811 	msr	BASEPRI, r1
   1fa54:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1fa58:	fa22 f103 	lsr.w	r1, r2, r3
   1fa5c:	07c9      	lsls	r1, r1, #31
   1fa5e:	d50b      	bpl.n	1fa78 <nrfx_gpiote_channel_alloc+0x44>
    return m_cb.allocated_channels_mask & (1UL << index);
   1fa60:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   1fa62:	fa05 fc03 	lsl.w	ip, r5, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1fa66:	ea11 0f0c 	tst.w	r1, ip
    m_cb.allocated_channels_mask |= (1UL << index);
   1fa6a:	bf01      	itttt	eq
   1fa6c:	ea41 010c 	orreq.w	r1, r1, ip
   1fa70:	65f1      	streq	r1, [r6, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1fa72:	4638      	moveq	r0, r7
            *p_channel = ch_idx;
   1fa74:	f88e 3000 	strbeq.w	r3, [lr]
	__asm__ volatile(
   1fa78:	f388 8811 	msr	BASEPRI, r8
   1fa7c:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1fa80:	42b8      	cmp	r0, r7
   1fa82:	d005      	beq.n	1fa90 <nrfx_gpiote_channel_alloc+0x5c>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1fa84:	fa05 f303 	lsl.w	r3, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1fa88:	439a      	bics	r2, r3
   1fa8a:	f104 0401 	add.w	r4, r4, #1
   1fa8e:	d1da      	bne.n	1fa46 <nrfx_gpiote_channel_alloc+0x12>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1fa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fa94:	200033ec 	.word	0x200033ec
   1fa98:	0bad0002 	.word	0x0bad0002
   1fa9c:	0bad0000 	.word	0x0bad0000

0001faa0 <nvmc_word_write>:
   1faa0:	4a04      	ldr	r2, [pc, #16]	; (1fab4 <nvmc_word_write+0x14>)
   1faa2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1faa6:	07db      	lsls	r3, r3, #31
   1faa8:	d5fb      	bpl.n	1faa2 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1faaa:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1faac:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1fab0:	4770      	bx	lr
   1fab2:	bf00      	nop
   1fab4:	4001e000 	.word	0x4001e000

0001fab8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   1fab8:	b510      	push	{r4, lr}
    NRFX_ASSERT(is_valid_address(addr, false));
   1faba:	2100      	movs	r1, #0
{
   1fabc:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));
   1fabe:	f00a faa1 	bl	2a004 <is_valid_address>
   1fac2:	b950      	cbnz	r0, 1fada <nrfx_nvmc_page_erase+0x22>
   1fac4:	4911      	ldr	r1, [pc, #68]	; (1fb0c <nrfx_nvmc_page_erase+0x54>)
   1fac6:	4812      	ldr	r0, [pc, #72]	; (1fb10 <nrfx_nvmc_page_erase+0x58>)
   1fac8:	f44f 7282 	mov.w	r2, #260	; 0x104
   1facc:	f004 fbb6 	bl	2423c <printk>
   1fad0:	f44f 7182 	mov.w	r1, #260	; 0x104
   1fad4:	480d      	ldr	r0, [pc, #52]	; (1fb0c <nrfx_nvmc_page_erase+0x54>)
   1fad6:	f004 fe63 	bl	247a0 <assert_post_action>
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1fada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fade:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1fae0:	fbb4 f3f2 	udiv	r3, r4, r2
   1fae4:	fb02 4313 	mls	r3, r2, r3, r4

    if (!is_page_aligned_check(addr))
   1fae8:	b973      	cbnz	r3, 1fb08 <nrfx_nvmc_page_erase+0x50>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1faea:	4b0a      	ldr	r3, [pc, #40]	; (1fb14 <nrfx_nvmc_page_erase+0x5c>)
   1faec:	2202      	movs	r2, #2
   1faee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1faf2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1faf6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1fafa:	07d2      	lsls	r2, r2, #31
   1fafc:	d5fb      	bpl.n	1faf6 <nrfx_nvmc_page_erase+0x3e>
    p_reg->CONFIG = (uint32_t)mode;
   1fafe:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1fb00:	4805      	ldr	r0, [pc, #20]	; (1fb18 <nrfx_nvmc_page_erase+0x60>)
   1fb02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fb06:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   1fb08:	4804      	ldr	r0, [pc, #16]	; (1fb1c <nrfx_nvmc_page_erase+0x64>)
   1fb0a:	e7fc      	b.n	1fb06 <nrfx_nvmc_page_erase+0x4e>
   1fb0c:	0003181d 	.word	0x0003181d
   1fb10:	0002bced 	.word	0x0002bced
   1fb14:	4001e000 	.word	0x4001e000
   1fb18:	0bad0000 	.word	0x0bad0000
   1fb1c:	0bad000a 	.word	0x0bad000a

0001fb20 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1fb20:	b570      	push	{r4, r5, r6, lr}
   1fb22:	460e      	mov	r6, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   1fb24:	2101      	movs	r1, #1
{
   1fb26:	4605      	mov	r5, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   1fb28:	f00a fa6c 	bl	2a004 <is_valid_address>
   1fb2c:	b950      	cbnz	r0, 1fb44 <nrfx_nvmc_word_write+0x24>
   1fb2e:	4912      	ldr	r1, [pc, #72]	; (1fb78 <nrfx_nvmc_word_write+0x58>)
   1fb30:	4812      	ldr	r0, [pc, #72]	; (1fb7c <nrfx_nvmc_word_write+0x5c>)
   1fb32:	f44f 72c9 	mov.w	r2, #402	; 0x192
   1fb36:	f004 fb81 	bl	2423c <printk>
   1fb3a:	f44f 71c9 	mov.w	r1, #402	; 0x192
   1fb3e:	480e      	ldr	r0, [pc, #56]	; (1fb78 <nrfx_nvmc_word_write+0x58>)
   1fb40:	f004 fe2e 	bl	247a0 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   1fb44:	07ab      	lsls	r3, r5, #30
   1fb46:	d00a      	beq.n	1fb5e <nrfx_nvmc_word_write+0x3e>
   1fb48:	490b      	ldr	r1, [pc, #44]	; (1fb78 <nrfx_nvmc_word_write+0x58>)
   1fb4a:	480c      	ldr	r0, [pc, #48]	; (1fb7c <nrfx_nvmc_word_write+0x5c>)
   1fb4c:	f240 1293 	movw	r2, #403	; 0x193
   1fb50:	f004 fb74 	bl	2423c <printk>
   1fb54:	f240 1193 	movw	r1, #403	; 0x193
   1fb58:	4807      	ldr	r0, [pc, #28]	; (1fb78 <nrfx_nvmc_word_write+0x58>)
   1fb5a:	f004 fe21 	bl	247a0 <assert_post_action>
   1fb5e:	4c08      	ldr	r4, [pc, #32]	; (1fb80 <nrfx_nvmc_word_write+0x60>)
   1fb60:	2301      	movs	r3, #1
   1fb62:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1fb66:	4631      	mov	r1, r6
   1fb68:	4628      	mov	r0, r5
   1fb6a:	f7ff ff99 	bl	1faa0 <nvmc_word_write>
   1fb6e:	2300      	movs	r3, #0
   1fb70:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1fb74:	bd70      	pop	{r4, r5, r6, pc}
   1fb76:	bf00      	nop
   1fb78:	0003181d 	.word	0x0003181d
   1fb7c:	0002bced 	.word	0x0002bced
   1fb80:	4001e000 	.word	0x4001e000

0001fb84 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fb84:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1fb86:	0953      	lsrs	r3, r2, #5
{
   1fb88:	b510      	push	{r4, lr}
   1fb8a:	4604      	mov	r4, r0
    switch (port)
   1fb8c:	d02a      	beq.n	1fbe4 <nrf_gpio_pin_port_decode+0x60>
   1fb8e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   1fb90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fb94:	bf18      	it	ne
   1fb96:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   1fb98:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1fb9c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1fb9e:	07db      	lsls	r3, r3, #31
   1fba0:	d40a      	bmi.n	1fbb8 <nrf_gpio_pin_port_decode+0x34>
   1fba2:	4913      	ldr	r1, [pc, #76]	; (1fbf0 <nrf_gpio_pin_port_decode+0x6c>)
   1fba4:	4813      	ldr	r0, [pc, #76]	; (1fbf4 <nrf_gpio_pin_port_decode+0x70>)
   1fba6:	f240 221a 	movw	r2, #538	; 0x21a
   1fbaa:	f004 fb47 	bl	2423c <printk>
   1fbae:	f240 211a 	movw	r1, #538	; 0x21a
   1fbb2:	480f      	ldr	r0, [pc, #60]	; (1fbf0 <nrf_gpio_pin_port_decode+0x6c>)
   1fbb4:	f004 fdf4 	bl	247a0 <assert_post_action>
    uint32_t pin_number = *p_pin;
   1fbb8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1fbba:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fbbe:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1fbc0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fbc2:	d00c      	beq.n	1fbde <nrf_gpio_pin_port_decode+0x5a>
   1fbc4:	2b01      	cmp	r3, #1
   1fbc6:	d010      	beq.n	1fbea <nrf_gpio_pin_port_decode+0x66>
            NRFX_ASSERT(0);
   1fbc8:	4909      	ldr	r1, [pc, #36]	; (1fbf0 <nrf_gpio_pin_port_decode+0x6c>)
   1fbca:	480a      	ldr	r0, [pc, #40]	; (1fbf4 <nrf_gpio_pin_port_decode+0x70>)
   1fbcc:	f240 221f 	movw	r2, #543	; 0x21f
   1fbd0:	f004 fb34 	bl	2423c <printk>
   1fbd4:	f240 211f 	movw	r1, #543	; 0x21f
   1fbd8:	4805      	ldr	r0, [pc, #20]	; (1fbf0 <nrf_gpio_pin_port_decode+0x6c>)
   1fbda:	f004 fde1 	bl	247a0 <assert_post_action>
        case 0: return NRF_P0;
   1fbde:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1fbe2:	bd10      	pop	{r4, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   1fbe4:	f04f 33ff 	mov.w	r3, #4294967295
   1fbe8:	e7d6      	b.n	1fb98 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   1fbea:	4803      	ldr	r0, [pc, #12]	; (1fbf8 <nrf_gpio_pin_port_decode+0x74>)
   1fbec:	e7f9      	b.n	1fbe2 <nrf_gpio_pin_port_decode+0x5e>
   1fbee:	bf00      	nop
   1fbf0:	00031253 	.word	0x00031253
   1fbf4:	0002bced 	.word	0x0002bced
   1fbf8:	50000300 	.word	0x50000300

0001fbfc <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1fbfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1fbfe:	4b34      	ldr	r3, [pc, #208]	; (1fcd0 <twi_rx_start_transfer+0xd4>)
   1fc00:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fc02:	2300      	movs	r3, #0
   1fc04:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1fc08:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1fc0c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1fc10:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1fc14:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1fc18:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1fc1c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1fc20:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1fc24:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1fc26:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1fc2a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1fc2c:	2b01      	cmp	r3, #1
{
   1fc2e:	4604      	mov	r4, r0
   1fc30:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1fc32:	d118      	bne.n	1fc66 <twi_rx_start_transfer+0x6a>
   1fc34:	6a0b      	ldr	r3, [r1, #32]
   1fc36:	065b      	lsls	r3, r3, #25
   1fc38:	d415      	bmi.n	1fc66 <twi_rx_start_transfer+0x6a>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1fc3a:	2302      	movs	r3, #2
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1fc3c:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1fc40:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1fc44:	2a02      	cmp	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fc46:	f04f 0301 	mov.w	r3, #1
   1fc4a:	6223      	str	r3, [r4, #32]
   1fc4c:	bf18      	it	ne
   1fc4e:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1fc50:	682b      	ldr	r3, [r5, #0]
   1fc52:	b193      	cbz	r3, 1fc7a <twi_rx_start_transfer+0x7e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1fc54:	f240 2386 	movw	r3, #646	; 0x286
   1fc58:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1fc5a:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1fc5c:	481d      	ldr	r0, [pc, #116]	; (1fcd4 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1fc5e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1fc62:	b003      	add	sp, #12
   1fc64:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   1fc66:	2301      	movs	r3, #1
   1fc68:	e7e8      	b.n	1fc3c <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   1fc6a:	4629      	mov	r1, r5
   1fc6c:	4620      	mov	r0, r4
   1fc6e:	f00a fa08 	bl	2a082 <twi_transfer>
        while ((hw_timeout > 0) &&
   1fc72:	b128      	cbz	r0, 1fc80 <twi_rx_start_transfer+0x84>
               hw_timeout--;
   1fc74:	9b01      	ldr	r3, [sp, #4]
   1fc76:	3b01      	subs	r3, #1
   1fc78:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1fc7a:	9b01      	ldr	r3, [sp, #4]
   1fc7c:	2b00      	cmp	r3, #0
   1fc7e:	dcf4      	bgt.n	1fc6a <twi_rx_start_transfer+0x6e>
        if (p_cb->error)
   1fc80:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1fc84:	b95b      	cbnz	r3, 1fc9e <twi_rx_start_transfer+0xa2>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1fc86:	4813      	ldr	r0, [pc, #76]	; (1fcd4 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   1fc88:	9b01      	ldr	r3, [sp, #4]
   1fc8a:	2b00      	cmp	r3, #0
   1fc8c:	dce9      	bgt.n	1fc62 <twi_rx_start_transfer+0x66>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1fc8e:	2300      	movs	r3, #0
   1fc90:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1fc94:	2305      	movs	r3, #5
   1fc96:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   1fc9a:	480f      	ldr	r0, [pc, #60]	; (1fcd8 <twi_rx_start_transfer+0xdc>)
    return ret_code;
   1fc9c:	e7e1      	b.n	1fc62 <twi_rx_start_transfer+0x66>
    uint32_t error_source = p_reg->ERRORSRC;
   1fc9e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1fca2:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1fca6:	b18b      	cbz	r3, 1fccc <twi_rx_start_transfer+0xd0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1fca8:	4a0c      	ldr	r2, [pc, #48]	; (1fcdc <twi_rx_start_transfer+0xe0>)
   1fcaa:	480b      	ldr	r0, [pc, #44]	; (1fcd8 <twi_rx_start_transfer+0xdc>)
   1fcac:	f013 0f01 	tst.w	r3, #1
   1fcb0:	bf18      	it	ne
   1fcb2:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1fcb4:	f013 0f02 	tst.w	r3, #2
   1fcb8:	f102 0201 	add.w	r2, r2, #1
   1fcbc:	bf18      	it	ne
   1fcbe:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1fcc0:	f013 0f04 	tst.w	r3, #4
   1fcc4:	4b06      	ldr	r3, [pc, #24]	; (1fce0 <twi_rx_start_transfer+0xe4>)
   1fcc6:	bf18      	it	ne
   1fcc8:	4618      	movne	r0, r3
   1fcca:	e7dd      	b.n	1fc88 <twi_rx_start_transfer+0x8c>
                ret_code = NRFX_ERROR_INTERNAL;
   1fccc:	4802      	ldr	r0, [pc, #8]	; (1fcd8 <twi_rx_start_transfer+0xdc>)
   1fcce:	e7db      	b.n	1fc88 <twi_rx_start_transfer+0x8c>
   1fcd0:	000186a0 	.word	0x000186a0
   1fcd4:	0bad0000 	.word	0x0bad0000
   1fcd8:	0bad0001 	.word	0x0bad0001
   1fcdc:	0bae0000 	.word	0x0bae0000
   1fce0:	0bae0002 	.word	0x0bae0002

0001fce4 <twi_tx_start_transfer>:
{
   1fce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   1fce6:	4b30      	ldr	r3, [pc, #192]	; (1fda8 <twi_tx_start_transfer+0xc4>)
   1fce8:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fcea:	2300      	movs	r3, #0
   1fcec:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1fcf0:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1fcf4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1fcf8:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1fcfc:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1fd00:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1fd04:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1fd08:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1fd0c:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    p_reg->SHORTS = mask;
   1fd10:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   1fd14:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1fd16:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd1a:	2301      	movs	r3, #1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1fd1c:	429a      	cmp	r2, r3
{
   1fd1e:	460d      	mov	r5, r1
   1fd20:	6203      	str	r3, [r0, #32]
   1fd22:	bf18      	it	ne
   1fd24:	6083      	strne	r3, [r0, #8]
   1fd26:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
   1fd28:	f00a f98e 	bl	2a048 <twi_send_byte>
    if (p_cb->handler)
   1fd2c:	682b      	ldr	r3, [r5, #0]
   1fd2e:	b183      	cbz	r3, 1fd52 <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1fd30:	f240 2386 	movw	r3, #646	; 0x286
   1fd34:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1fd36:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1fd38:	481c      	ldr	r0, [pc, #112]	; (1fdac <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   1fd3a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1fd3e:	b003      	add	sp, #12
   1fd40:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   1fd42:	4629      	mov	r1, r5
   1fd44:	4620      	mov	r0, r4
   1fd46:	f00a f99c 	bl	2a082 <twi_transfer>
        while ((hw_timeout > 0) &&
   1fd4a:	b128      	cbz	r0, 1fd58 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   1fd4c:	9b01      	ldr	r3, [sp, #4]
   1fd4e:	3b01      	subs	r3, #1
   1fd50:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1fd52:	9b01      	ldr	r3, [sp, #4]
   1fd54:	2b00      	cmp	r3, #0
   1fd56:	dcf4      	bgt.n	1fd42 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   1fd58:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1fd5c:	b95b      	cbnz	r3, 1fd76 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1fd5e:	4813      	ldr	r0, [pc, #76]	; (1fdac <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1fd60:	9b01      	ldr	r3, [sp, #4]
   1fd62:	2b00      	cmp	r3, #0
   1fd64:	dceb      	bgt.n	1fd3e <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1fd66:	2300      	movs	r3, #0
   1fd68:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1fd6c:	2305      	movs	r3, #5
   1fd6e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   1fd72:	480f      	ldr	r0, [pc, #60]	; (1fdb0 <twi_tx_start_transfer+0xcc>)
    return ret_code;
   1fd74:	e7e3      	b.n	1fd3e <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   1fd76:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1fd7a:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1fd7e:	b18b      	cbz	r3, 1fda4 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1fd80:	4a0c      	ldr	r2, [pc, #48]	; (1fdb4 <twi_tx_start_transfer+0xd0>)
   1fd82:	480b      	ldr	r0, [pc, #44]	; (1fdb0 <twi_tx_start_transfer+0xcc>)
   1fd84:	f013 0f01 	tst.w	r3, #1
   1fd88:	bf18      	it	ne
   1fd8a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1fd8c:	f013 0f02 	tst.w	r3, #2
   1fd90:	f102 0201 	add.w	r2, r2, #1
   1fd94:	bf18      	it	ne
   1fd96:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1fd98:	f013 0f04 	tst.w	r3, #4
   1fd9c:	4b06      	ldr	r3, [pc, #24]	; (1fdb8 <twi_tx_start_transfer+0xd4>)
   1fd9e:	bf18      	it	ne
   1fda0:	4618      	movne	r0, r3
   1fda2:	e7dd      	b.n	1fd60 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1fda4:	4802      	ldr	r0, [pc, #8]	; (1fdb0 <twi_tx_start_transfer+0xcc>)
   1fda6:	e7db      	b.n	1fd60 <twi_tx_start_transfer+0x7c>
   1fda8:	000186a0 	.word	0x000186a0
   1fdac:	0bad0000 	.word	0x0bad0000
   1fdb0:	0bad0001 	.word	0x0bad0001
   1fdb4:	0bae0000 	.word	0x0bae0000
   1fdb8:	0bae0002 	.word	0x0bae0002

0001fdbc <nrfx_twi_init>:
{
   1fdbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1fdc0:	4680      	mov	r8, r0
   1fdc2:	4692      	mov	sl, r2
   1fdc4:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   1fdc6:	460c      	mov	r4, r1
   1fdc8:	b941      	cbnz	r1, 1fddc <nrfx_twi_init+0x20>
   1fdca:	4930      	ldr	r1, [pc, #192]	; (1fe8c <nrfx_twi_init+0xd0>)
   1fdcc:	4830      	ldr	r0, [pc, #192]	; (1fe90 <nrfx_twi_init+0xd4>)
   1fdce:	22a1      	movs	r2, #161	; 0xa1
   1fdd0:	f004 fa34 	bl	2423c <printk>
   1fdd4:	21a1      	movs	r1, #161	; 0xa1
   1fdd6:	482d      	ldr	r0, [pc, #180]	; (1fe8c <nrfx_twi_init+0xd0>)
   1fdd8:	f004 fce2 	bl	247a0 <assert_post_action>
    NRFX_ASSERT(p_config->scl != p_config->sda);
   1fddc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1fde0:	429a      	cmp	r2, r3
   1fde2:	d108      	bne.n	1fdf6 <nrfx_twi_init+0x3a>
   1fde4:	4929      	ldr	r1, [pc, #164]	; (1fe8c <nrfx_twi_init+0xd0>)
   1fde6:	482a      	ldr	r0, [pc, #168]	; (1fe90 <nrfx_twi_init+0xd4>)
   1fde8:	22a2      	movs	r2, #162	; 0xa2
   1fdea:	f004 fa27 	bl	2423c <printk>
   1fdee:	21a2      	movs	r1, #162	; 0xa2
   1fdf0:	4826      	ldr	r0, [pc, #152]	; (1fe8c <nrfx_twi_init+0xd0>)
   1fdf2:	f004 fcd5 	bl	247a0 <assert_post_action>
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1fdf6:	f898 7004 	ldrb.w	r7, [r8, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1fdfa:	4d26      	ldr	r5, [pc, #152]	; (1fe94 <nrfx_twi_init+0xd8>)
   1fdfc:	263c      	movs	r6, #60	; 0x3c
   1fdfe:	437e      	muls	r6, r7
   1fe00:	19ab      	adds	r3, r5, r6
   1fe02:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   1fe06:	2a00      	cmp	r2, #0
   1fe08:	d13e      	bne.n	1fe88 <nrfx_twi_init+0xcc>
    p_cb->int_mask        = 0;
   1fe0a:	609a      	str	r2, [r3, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1fe0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->repeated        = false;
   1fe10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    p_cb->busy            = false;
   1fe14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1fe18:	7b62      	ldrb	r2, [r4, #13]
   1fe1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    p_cb->p_context       = p_context;
   1fe1e:	f8c3 9004 	str.w	r9, [r3, #4]
    p_cb->handler         = event_handler;
   1fe22:	f845 a006 	str.w	sl, [r5, r6]
    TWI_PIN_INIT(p_config->scl);
   1fe26:	6823      	ldr	r3, [r4, #0]
   1fe28:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fe2a:	a801      	add	r0, sp, #4
   1fe2c:	f7ff feaa 	bl	1fb84 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fe30:	9b01      	ldr	r3, [sp, #4]
   1fe32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fe36:	f240 690c 	movw	r9, #1548	; 0x60c
   1fe3a:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   1fe3e:	6863      	ldr	r3, [r4, #4]
   1fe40:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fe42:	a801      	add	r0, sp, #4
   1fe44:	f7ff fe9e 	bl	1fb84 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fe48:	9b01      	ldr	r3, [sp, #4]
   1fe4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fe4e:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   1fe52:	e9d4 2300 	ldrd	r2, r3, [r4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1fe56:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->PSEL.SCL = scl_pin;
   1fe5a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1fe5e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   1fe62:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
   1fe64:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1fe68:	59ab      	ldr	r3, [r5, r6]
   1fe6a:	b11b      	cbz	r3, 1fe74 <nrfx_twi_init+0xb8>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1fe6c:	f340 3007 	sbfx	r0, r0, #12, #8
   1fe70:	f7e6 fb00 	bl	6474 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fe74:	233c      	movs	r3, #60	; 0x3c
   1fe76:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   1fe7a:	4807      	ldr	r0, [pc, #28]	; (1fe98 <nrfx_twi_init+0xdc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1fe7c:	2301      	movs	r3, #1
   1fe7e:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1fe82:	b002      	add	sp, #8
   1fe84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return err_code;
   1fe88:	4804      	ldr	r0, [pc, #16]	; (1fe9c <nrfx_twi_init+0xe0>)
   1fe8a:	e7fa      	b.n	1fe82 <nrfx_twi_init+0xc6>
   1fe8c:	00031859 	.word	0x00031859
   1fe90:	0002bced 	.word	0x0002bced
   1fe94:	2000344c 	.word	0x2000344c
   1fe98:	0bad0000 	.word	0x0bad0000
   1fe9c:	0bad0005 	.word	0x0bad0005

0001fea0 <nrfx_twi_enable>:
{
   1fea0:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   1fea2:	4d10      	ldr	r5, [pc, #64]	; (1fee4 <nrfx_twi_enable+0x44>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fea4:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   1fea6:	223c      	movs	r2, #60	; 0x3c
   1fea8:	fb02 5204 	mla	r2, r2, r4, r5
{
   1feac:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   1feae:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
   1feb2:	2a01      	cmp	r2, #1
   1feb4:	d00a      	beq.n	1fecc <nrfx_twi_enable+0x2c>
   1feb6:	490c      	ldr	r1, [pc, #48]	; (1fee8 <nrfx_twi_enable+0x48>)
   1feb8:	480c      	ldr	r0, [pc, #48]	; (1feec <nrfx_twi_enable+0x4c>)
   1feba:	f240 1201 	movw	r2, #257	; 0x101
   1febe:	f004 f9bd 	bl	2423c <printk>
   1fec2:	f240 1101 	movw	r1, #257	; 0x101
   1fec6:	4808      	ldr	r0, [pc, #32]	; (1fee8 <nrfx_twi_enable+0x48>)
   1fec8:	f004 fc6a 	bl	247a0 <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1fecc:	6833      	ldr	r3, [r6, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1fece:	2205      	movs	r2, #5
   1fed0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1fed4:	233c      	movs	r3, #60	; 0x3c
   1fed6:	fb03 5404 	mla	r4, r3, r4, r5
   1feda:	2302      	movs	r3, #2
   1fedc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
   1fee0:	bd70      	pop	{r4, r5, r6, pc}
   1fee2:	bf00      	nop
   1fee4:	2000344c 	.word	0x2000344c
   1fee8:	00031859 	.word	0x00031859
   1feec:	0002bced 	.word	0x0002bced

0001fef0 <nrfx_twi_disable>:
{
   1fef0:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fef2:	4e14      	ldr	r6, [pc, #80]	; (1ff44 <nrfx_twi_disable+0x54>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1fef4:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fef6:	233c      	movs	r3, #60	; 0x3c
   1fef8:	fb03 6304 	mla	r3, r3, r4, r6
{
   1fefc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   1fefe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   1ff02:	b953      	cbnz	r3, 1ff1a <nrfx_twi_disable+0x2a>
   1ff04:	4910      	ldr	r1, [pc, #64]	; (1ff48 <nrfx_twi_disable+0x58>)
   1ff06:	4811      	ldr	r0, [pc, #68]	; (1ff4c <nrfx_twi_disable+0x5c>)
   1ff08:	f240 120d 	movw	r2, #269	; 0x10d
   1ff0c:	f004 f996 	bl	2423c <printk>
   1ff10:	f240 110d 	movw	r1, #269	; 0x10d
   1ff14:	480c      	ldr	r0, [pc, #48]	; (1ff48 <nrfx_twi_disable+0x58>)
   1ff16:	f004 fc43 	bl	247a0 <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1ff1a:	682b      	ldr	r3, [r5, #0]
    p_reg->INTENCLR = mask;
   1ff1c:	4a0c      	ldr	r2, [pc, #48]	; (1ff50 <nrfx_twi_disable+0x60>)
   1ff1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1ff22:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1ff26:	f022 0203 	bic.w	r2, r2, #3
   1ff2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ff2e:	2200      	movs	r2, #0
   1ff30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ff34:	233c      	movs	r3, #60	; 0x3c
   1ff36:	fb03 6404 	mla	r4, r3, r4, r6
   1ff3a:	2301      	movs	r3, #1
   1ff3c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
   1ff40:	bd70      	pop	{r4, r5, r6, pc}
   1ff42:	bf00      	nop
   1ff44:	2000344c 	.word	0x2000344c
   1ff48:	00031859 	.word	0x00031859
   1ff4c:	0002bced 	.word	0x0002bced
   1ff50:	00044286 	.word	0x00044286

0001ff54 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1ff54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ff58:	7907      	ldrb	r7, [r0, #4]

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   1ff5a:	4c44      	ldr	r4, [pc, #272]	; (2006c <nrfx_twi_xfer+0x118>)
   1ff5c:	263c      	movs	r6, #60	; 0x3c
   1ff5e:	437e      	muls	r6, r7
{
   1ff60:	4681      	mov	r9, r0
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   1ff62:	59a3      	ldr	r3, [r4, r6]
{
   1ff64:	460d      	mov	r5, r1
   1ff66:	4690      	mov	r8, r2
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   1ff68:	b9fb      	cbnz	r3, 1ffaa <nrfx_twi_xfer+0x56>
   1ff6a:	780b      	ldrb	r3, [r1, #0]
   1ff6c:	2b02      	cmp	r3, #2
   1ff6e:	d00e      	beq.n	1ff8e <nrfx_twi_xfer+0x3a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
   1ff70:	782b      	ldrb	r3, [r5, #0]
   1ff72:	2b03      	cmp	r3, #3
   1ff74:	d119      	bne.n	1ffaa <nrfx_twi_xfer+0x56>
   1ff76:	f240 227e 	movw	r2, #638	; 0x27e
   1ff7a:	493d      	ldr	r1, [pc, #244]	; (20070 <nrfx_twi_xfer+0x11c>)
   1ff7c:	483d      	ldr	r0, [pc, #244]	; (20074 <nrfx_twi_xfer+0x120>)
   1ff7e:	f004 f95d 	bl	2423c <printk>
   1ff82:	f240 217e 	movw	r1, #638	; 0x27e
   1ff86:	483a      	ldr	r0, [pc, #232]	; (20070 <nrfx_twi_xfer+0x11c>)
   1ff88:	f004 fc0a 	bl	247a0 <assert_post_action>
   1ff8c:	e00d      	b.n	1ffaa <nrfx_twi_xfer+0x56>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
   1ff8e:	f240 227d 	movw	r2, #637	; 0x27d
   1ff92:	4937      	ldr	r1, [pc, #220]	; (20070 <nrfx_twi_xfer+0x11c>)
   1ff94:	4837      	ldr	r0, [pc, #220]	; (20074 <nrfx_twi_xfer+0x120>)
   1ff96:	f004 f951 	bl	2423c <printk>
   1ff9a:	f240 217d 	movw	r1, #637	; 0x27d
   1ff9e:	4834      	ldr	r0, [pc, #208]	; (20070 <nrfx_twi_xfer+0x11c>)
   1ffa0:	f004 fbfe 	bl	247a0 <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
   1ffa4:	59a3      	ldr	r3, [r4, r6]
   1ffa6:	2b00      	cmp	r3, #0
   1ffa8:	d0e2      	beq.n	1ff70 <nrfx_twi_xfer+0x1c>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ffaa:	233c      	movs	r3, #60	; 0x3c
   1ffac:	fb03 4307 	mla	r3, r3, r7, r4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1ffb0:	f8d9 9000 	ldr.w	r9, [r9]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ffb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1ffb8:	2b01      	cmp	r3, #1
   1ffba:	d104      	bne.n	1ffc6 <nrfx_twi_xfer+0x72>
   1ffbc:	782b      	ldrb	r3, [r5, #0]
   1ffbe:	2b01      	cmp	r3, #1
   1ffc0:	d106      	bne.n	1ffd0 <nrfx_twi_xfer+0x7c>
        return NRFX_ERROR_INVALID_STATE;
   1ffc2:	482d      	ldr	r0, [pc, #180]	; (20078 <nrfx_twi_xfer+0x124>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ffc4:	e011      	b.n	1ffea <nrfx_twi_xfer+0x96>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1ffc6:	2b02      	cmp	r3, #2
   1ffc8:	d102      	bne.n	1ffd0 <nrfx_twi_xfer+0x7c>
   1ffca:	782b      	ldrb	r3, [r5, #0]
   1ffcc:	2b01      	cmp	r3, #1
   1ffce:	d1f8      	bne.n	1ffc2 <nrfx_twi_xfer+0x6e>
    if (p_cb->busy)
   1ffd0:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1ffd2:	4b2a      	ldr	r3, [pc, #168]	; (2007c <nrfx_twi_xfer+0x128>)
   1ffd4:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1ffd8:	fb06 4607 	mla	r6, r6, r7, r4
   1ffdc:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1ffe0:	b12b      	cbz	r3, 1ffee <nrfx_twi_xfer+0x9a>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1ffe2:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   1ffe4:	4826      	ldr	r0, [pc, #152]	; (20080 <nrfx_twi_xfer+0x12c>)
    p_reg->INTENSET = mask;
   1ffe6:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1ffea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1ffee:	f088 0304 	eor.w	r3, r8, #4
   1fff2:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1fff6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   1fffa:	f8c6 8020 	str.w	r8, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1fffe:	46ae      	mov	lr, r5
   20000:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   20004:	f106 0c0c 	add.w	ip, r6, #12
   20008:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2000c:	f8de 3000 	ldr.w	r3, [lr]
   20010:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
   20014:	686b      	ldr	r3, [r5, #4]
   20016:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   20018:	68eb      	ldr	r3, [r5, #12]
   2001a:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   2001c:	786b      	ldrb	r3, [r5, #1]
   2001e:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   20022:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   20024:	ebc7 1a07 	rsb	sl, r7, r7, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   20028:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2002a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   2002e:	d017      	beq.n	20060 <nrfx_twi_xfer+0x10c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   20030:	b99b      	cbnz	r3, 2005a <nrfx_twi_xfer+0x106>
   20032:	f3c8 1840 	ubfx	r8, r8, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   20036:	233c      	movs	r3, #60	; 0x3c
   20038:	fb03 4307 	mla	r3, r3, r7, r4
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   2003c:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   2003e:	f883 802c 	strb.w	r8, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   20042:	4648      	mov	r0, r9
   20044:	f7ff fe4e 	bl	1fce4 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   20048:	233c      	movs	r3, #60	; 0x3c
   2004a:	435f      	muls	r7, r3
   2004c:	19e2      	adds	r2, r4, r7
   2004e:	59e3      	ldr	r3, [r4, r7]
   20050:	2b00      	cmp	r3, #0
   20052:	d1ca      	bne.n	1ffea <nrfx_twi_xfer+0x96>
        p_cb->busy = false;
   20054:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   20058:	e7c7      	b.n	1ffea <nrfx_twi_xfer+0x96>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   2005a:	f04f 0801 	mov.w	r8, #1
   2005e:	e7ea      	b.n	20036 <nrfx_twi_xfer+0xe2>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   20060:	4651      	mov	r1, sl
   20062:	4648      	mov	r0, r9
   20064:	f7ff fdca 	bl	1fbfc <twi_rx_start_transfer>
   20068:	e7ee      	b.n	20048 <nrfx_twi_xfer+0xf4>
   2006a:	bf00      	nop
   2006c:	2000344c 	.word	0x2000344c
   20070:	00031859 	.word	0x00031859
   20074:	0002bced 	.word	0x0002bced
   20078:	0bad0005 	.word	0x0bad0005
   2007c:	00044286 	.word	0x00044286
   20080:	0bad000b 	.word	0x0bad000b

00020084 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   20084:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   20086:	4c30      	ldr	r4, [pc, #192]	; (20148 <nrfx_twi_0_irq_handler+0xc4>)
   20088:	6823      	ldr	r3, [r4, #0]
{
   2008a:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   2008c:	b953      	cbnz	r3, 200a4 <nrfx_twi_0_irq_handler+0x20>
   2008e:	492f      	ldr	r1, [pc, #188]	; (2014c <nrfx_twi_0_irq_handler+0xc8>)
   20090:	482f      	ldr	r0, [pc, #188]	; (20150 <nrfx_twi_0_irq_handler+0xcc>)
   20092:	f240 229e 	movw	r2, #670	; 0x29e
   20096:	f004 f8d1 	bl	2423c <printk>
   2009a:	f240 219e 	movw	r1, #670	; 0x29e
   2009e:	482b      	ldr	r0, [pc, #172]	; (2014c <nrfx_twi_0_irq_handler+0xc8>)
   200a0:	f004 fb7e 	bl	247a0 <assert_post_action>
    if (twi_transfer(p_twi, p_cb))
   200a4:	4928      	ldr	r1, [pc, #160]	; (20148 <nrfx_twi_0_irq_handler+0xc4>)
   200a6:	482b      	ldr	r0, [pc, #172]	; (20154 <nrfx_twi_0_irq_handler+0xd0>)
   200a8:	f009 ffeb 	bl	2a082 <twi_transfer>
   200ac:	b9e0      	cbnz	r0, 200e8 <nrfx_twi_0_irq_handler+0x64>
    if (!p_cb->error &&
   200ae:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   200b2:	f8d4 c020 	ldr.w	ip, [r4, #32]
   200b6:	b9e7      	cbnz	r7, 200f2 <nrfx_twi_0_irq_handler+0x6e>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   200b8:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   200ba:	1e9a      	subs	r2, r3, #2
   200bc:	2a01      	cmp	r2, #1
   200be:	d818      	bhi.n	200f2 <nrfx_twi_0_irq_handler+0x6e>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   200c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   200c2:	69a2      	ldr	r2, [r4, #24]
   200c4:	4291      	cmp	r1, r2
   200c6:	d114      	bne.n	200f2 <nrfx_twi_0_irq_handler+0x6e>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   200c8:	69e2      	ldr	r2, [r4, #28]
   200ca:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   200cc:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   200d0:	6962      	ldr	r2, [r4, #20]
   200d2:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   200d4:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   200d6:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   200da:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   200de:	491a      	ldr	r1, [pc, #104]	; (20148 <nrfx_twi_0_irq_handler+0xc4>)
   200e0:	481c      	ldr	r0, [pc, #112]	; (20154 <nrfx_twi_0_irq_handler+0xd0>)
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   200e2:	d103      	bne.n	200ec <nrfx_twi_0_irq_handler+0x68>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   200e4:	f7ff fdfe 	bl	1fce4 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   200e8:	b007      	add	sp, #28
   200ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   200ec:	f7ff fd86 	bl	1fbfc <twi_rx_start_transfer>
   200f0:	e7fa      	b.n	200e8 <nrfx_twi_0_irq_handler+0x64>
        event.xfer_desc = p_cb->xfer_desc;
   200f2:	4e19      	ldr	r6, [pc, #100]	; (20158 <nrfx_twi_0_irq_handler+0xd4>)
   200f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   200f6:	ad01      	add	r5, sp, #4
   200f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   200fa:	6833      	ldr	r3, [r6, #0]
   200fc:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   200fe:	b1ff      	cbz	r7, 20140 <nrfx_twi_0_irq_handler+0xbc>
    uint32_t error_source = p_reg->ERRORSRC;
   20100:	4a14      	ldr	r2, [pc, #80]	; (20154 <nrfx_twi_0_irq_handler+0xd0>)
   20102:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   20106:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   2010a:	0799      	lsls	r1, r3, #30
   2010c:	d50f      	bpl.n	2012e <nrfx_twi_0_irq_handler+0xaa>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   2010e:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   20110:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   20114:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   20116:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
   2011a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   2011e:	d001      	beq.n	20124 <nrfx_twi_0_irq_handler+0xa0>
   20120:	2f00      	cmp	r7, #0
   20122:	d0e1      	beq.n	200e8 <nrfx_twi_0_irq_handler+0x64>
            p_cb->handler(&event, p_cb->p_context);
   20124:	e9d4 3100 	ldrd	r3, r1, [r4]
   20128:	4668      	mov	r0, sp
   2012a:	4798      	blx	r3
}
   2012c:	e7dc      	b.n	200e8 <nrfx_twi_0_irq_handler+0x64>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   2012e:	075a      	lsls	r2, r3, #29
   20130:	d501      	bpl.n	20136 <nrfx_twi_0_irq_handler+0xb2>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   20132:	2302      	movs	r3, #2
   20134:	e7ec      	b.n	20110 <nrfx_twi_0_irq_handler+0x8c>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   20136:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   20138:	bf4c      	ite	mi
   2013a:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   2013c:	2304      	movpl	r3, #4
   2013e:	e7e7      	b.n	20110 <nrfx_twi_0_irq_handler+0x8c>
            event.type = NRFX_TWI_EVT_DONE;
   20140:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   20144:	e7e6      	b.n	20114 <nrfx_twi_0_irq_handler+0x90>
   20146:	bf00      	nop
   20148:	2000344c 	.word	0x2000344c
   2014c:	00031859 	.word	0x00031859
   20150:	0002bced 	.word	0x0002bced
   20154:	40003000 	.word	0x40003000
   20158:	20003458 	.word	0x20003458

0002015c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   2015c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2015e:	4b10      	ldr	r3, [pc, #64]	; (201a0 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   20160:	4f10      	ldr	r7, [pc, #64]	; (201a4 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20162:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   20166:	3001      	adds	r0, #1
   20168:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2016c:	42ae      	cmp	r6, r5
   2016e:	d800      	bhi.n	20172 <z_sys_init_run_level+0x16>
		}
	}
}
   20170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   20172:	e9d5 3400 	ldrd	r3, r4, [r5]
   20176:	4620      	mov	r0, r4
   20178:	4798      	blx	r3
   2017a:	b170      	cbz	r0, 2019a <z_sys_init_run_level+0x3e>
   2017c:	b16c      	cbz	r4, 2019a <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   2017e:	1be4      	subs	r4, r4, r7
   20180:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   20182:	0961      	lsrs	r1, r4, #5
   20184:	4a08      	ldr	r2, [pc, #32]	; (201a8 <z_sys_init_run_level+0x4c>)
   20186:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   2018a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   2018e:	2301      	movs	r3, #1
   20190:	fa03 f404 	lsl.w	r4, r3, r4
   20194:	4304      	orrs	r4, r0
   20196:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2019a:	3508      	adds	r5, #8
   2019c:	e7e6      	b.n	2016c <z_sys_init_run_level+0x10>
   2019e:	bf00      	nop
   201a0:	0002b7c4 	.word	0x0002b7c4
   201a4:	20000c40 	.word	0x20000c40
   201a8:	20000cd0 	.word	0x20000cd0

000201ac <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   201ac:	4b08      	ldr	r3, [pc, #32]	; (201d0 <z_device_ready+0x24>)
   201ae:	1ac0      	subs	r0, r0, r3
   201b0:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   201b2:	0942      	lsrs	r2, r0, #5
   201b4:	4b07      	ldr	r3, [pc, #28]	; (201d4 <z_device_ready+0x28>)
   201b6:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   201ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   201be:	2301      	movs	r3, #1
   201c0:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   201c4:	4210      	tst	r0, r2
}
   201c6:	bf0c      	ite	eq
   201c8:	4618      	moveq	r0, r3
   201ca:	2000      	movne	r0, #0
   201cc:	4770      	bx	lr
   201ce:	bf00      	nop
   201d0:	20000c40 	.word	0x20000c40
   201d4:	20000cd0 	.word	0x20000cd0

000201d8 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   201d8:	4911      	ldr	r1, [pc, #68]	; (20220 <z_impl_device_get_binding+0x48>)
{
   201da:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   201dc:	4c11      	ldr	r4, [pc, #68]	; (20224 <z_impl_device_get_binding+0x4c>)
{
   201de:	4605      	mov	r5, r0
   201e0:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   201e2:	428c      	cmp	r4, r1
   201e4:	d104      	bne.n	201f0 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   201e6:	4c0f      	ldr	r4, [pc, #60]	; (20224 <z_impl_device_get_binding+0x4c>)
   201e8:	42b4      	cmp	r4, r6
   201ea:	d10a      	bne.n	20202 <z_impl_device_get_binding+0x2a>
	return NULL;
   201ec:	2400      	movs	r4, #0
   201ee:	e014      	b.n	2021a <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   201f0:	4620      	mov	r0, r4
   201f2:	f7ff ffdb 	bl	201ac <z_device_ready>
   201f6:	b110      	cbz	r0, 201fe <z_impl_device_get_binding+0x26>
   201f8:	6823      	ldr	r3, [r4, #0]
   201fa:	42ab      	cmp	r3, r5
   201fc:	d00d      	beq.n	2021a <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   201fe:	3410      	adds	r4, #16
   20200:	e7ef      	b.n	201e2 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20202:	4620      	mov	r0, r4
   20204:	f7ff ffd2 	bl	201ac <z_device_ready>
   20208:	b908      	cbnz	r0, 2020e <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   2020a:	3410      	adds	r4, #16
   2020c:	e7ec      	b.n	201e8 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2020e:	6821      	ldr	r1, [r4, #0]
   20210:	4628      	mov	r0, r5
   20212:	f005 ff46 	bl	260a2 <strcmp>
   20216:	2800      	cmp	r0, #0
   20218:	d1f7      	bne.n	2020a <z_impl_device_get_binding+0x32>
}
   2021a:	4620      	mov	r0, r4
   2021c:	bd70      	pop	{r4, r5, r6, pc}
   2021e:	bf00      	nop
   20220:	20000cd0 	.word	0x20000cd0
   20224:	20000c40 	.word	0x20000c40

00020228 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20228:	4b01      	ldr	r3, [pc, #4]	; (20230 <z_impl_z_errno+0x8>)
   2022a:	6898      	ldr	r0, [r3, #8]
}
   2022c:	3070      	adds	r0, #112	; 0x70
   2022e:	4770      	bx	lr
   20230:	20003490 	.word	0x20003490

00020234 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20236:	4604      	mov	r4, r0
   20238:	460e      	mov	r6, r1
	__asm__ volatile(
   2023a:	f04f 0320 	mov.w	r3, #32
   2023e:	f3ef 8711 	mrs	r7, BASEPRI
   20242:	f383 8811 	msr	BASEPRI, r3
   20246:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2024a:	f001 fe19 	bl	21e80 <z_impl_k_current_get>
   2024e:	2c04      	cmp	r4, #4
   20250:	bf96      	itet	ls
   20252:	4b1e      	ldrls	r3, [pc, #120]	; (202cc <z_fatal_error+0x98>)
   20254:	4b1e      	ldrhi	r3, [pc, #120]	; (202d0 <z_fatal_error+0x9c>)
   20256:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2025a:	2200      	movs	r2, #0
   2025c:	4605      	mov	r5, r0
   2025e:	9200      	str	r2, [sp, #0]
   20260:	2145      	movs	r1, #69	; 0x45
   20262:	4622      	mov	r2, r4
   20264:	481b      	ldr	r0, [pc, #108]	; (202d4 <z_fatal_error+0xa0>)
   20266:	f003 ffe9 	bl	2423c <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2026a:	b13e      	cbz	r6, 2027c <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2026c:	69f3      	ldr	r3, [r6, #28]
   2026e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20272:	b11b      	cbz	r3, 2027c <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   20274:	2145      	movs	r1, #69	; 0x45
   20276:	4818      	ldr	r0, [pc, #96]	; (202d8 <z_fatal_error+0xa4>)
   20278:	f003 ffe0 	bl	2423c <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   2027c:	b135      	cbz	r5, 2028c <z_fatal_error+0x58>
   2027e:	4628      	mov	r0, r5
   20280:	f00a f846 	bl	2a310 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   20284:	4603      	mov	r3, r0
   20286:	b108      	cbz	r0, 2028c <z_fatal_error+0x58>
   20288:	7802      	ldrb	r2, [r0, #0]
   2028a:	b902      	cbnz	r2, 2028e <z_fatal_error+0x5a>
		thread_name = "unknown";
   2028c:	4b13      	ldr	r3, [pc, #76]	; (202dc <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2028e:	4814      	ldr	r0, [pc, #80]	; (202e0 <z_fatal_error+0xac>)
   20290:	462a      	mov	r2, r5
   20292:	2145      	movs	r1, #69	; 0x45
   20294:	f003 ffd2 	bl	2423c <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   20298:	4631      	mov	r1, r6
   2029a:	4620      	mov	r0, r4
   2029c:	f7fe fa0a 	bl	1e6b4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   202a0:	2c04      	cmp	r4, #4
   202a2:	d108      	bne.n	202b6 <z_fatal_error+0x82>
   202a4:	490f      	ldr	r1, [pc, #60]	; (202e4 <z_fatal_error+0xb0>)
   202a6:	4810      	ldr	r0, [pc, #64]	; (202e8 <z_fatal_error+0xb4>)
   202a8:	228f      	movs	r2, #143	; 0x8f
   202aa:	f003 ffc7 	bl	2423c <printk>
   202ae:	218f      	movs	r1, #143	; 0x8f
   202b0:	480c      	ldr	r0, [pc, #48]	; (202e4 <z_fatal_error+0xb0>)
   202b2:	f004 fa75 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   202b6:	f387 8811 	msr	BASEPRI, r7
   202ba:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   202be:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   202c0:	b003      	add	sp, #12
   202c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   202c6:	f7e6 bc4f 	b.w	6b68 <z_impl_k_thread_abort>
   202ca:	bf00      	nop
   202cc:	0002b7dc 	.word	0x0002b7dc
   202d0:	000318de 	.word	0x000318de
   202d4:	000318f4 	.word	0x000318f4
   202d8:	00031921 	.word	0x00031921
   202dc:	000318ec 	.word	0x000318ec
   202e0:	00031947 	.word	0x00031947
   202e4:	00031964 	.word	0x00031964
   202e8:	0002bced 	.word	0x0002bced

000202ec <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   202ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   202f0:	f8df 9074 	ldr.w	r9, [pc, #116]	; 20368 <idle+0x7c>
	pm_idle_exit_notify = 1U;
   202f4:	4e1b      	ldr	r6, [pc, #108]	; (20364 <idle+0x78>)
{
   202f6:	4607      	mov	r7, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   202f8:	f04f 0801 	mov.w	r8, #1
	__asm__ volatile(
   202fc:	f04f 0220 	mov.w	r2, #32
   20300:	f3ef 8311 	mrs	r3, BASEPRI
   20304:	f382 8811 	msr	BASEPRI, r2
   20308:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   2030c:	693d      	ldr	r5, [r7, #16]
		if (to_abort) {
   2030e:	b19d      	cbz	r5, 20338 <idle+0x4c>
			cpu->pending_abort = NULL;
   20310:	2200      	movs	r2, #0
   20312:	613a      	str	r2, [r7, #16]
	__asm__ volatile(
   20314:	f383 8811 	msr	BASEPRI, r3
   20318:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   2031c:	4628      	mov	r0, r5
   2031e:	f001 f993 	bl	21648 <z_thread_single_abort>
	__asm__ volatile(
   20322:	f04f 0320 	mov.w	r3, #32
   20326:	f3ef 8011 	mrs	r0, BASEPRI
   2032a:	f383 8811 	msr	BASEPRI, r3
   2032e:	f3bf 8f6f 	isb	sy
   20332:	f009 ff95 	bl	2a260 <z_reschedule_irqlock>
   20336:	e7e1      	b.n	202fc <idle+0x10>
		int32_t ticks = z_get_next_timeout_expiry();
   20338:	f002 fa8c 	bl	22854 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   2033c:	2101      	movs	r1, #1
   2033e:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   20340:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   20342:	bfd8      	it	le
   20344:	4608      	movle	r0, r1
   20346:	f002 fabb 	bl	228c0 <z_set_timeout_expiry>
	pm_state = pm_system_suspend(ticks);
   2034a:	4620      	mov	r0, r4
		_kernel.idle = ticks;
   2034c:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
	pm_idle_exit_notify = 1U;
   20350:	f886 8000 	strb.w	r8, [r6]
	pm_state = pm_system_suspend(ticks);
   20354:	f7e5 f9fc 	bl	5750 <pm_system_suspend>
	if (pm_state == POWER_STATE_ACTIVE) {
   20358:	3001      	adds	r0, #1
   2035a:	d1cf      	bne.n	202fc <idle+0x10>
		pm_idle_exit_notify = 0U;
   2035c:	7035      	strb	r5, [r6, #0]
	arch_cpu_idle();
   2035e:	f7e6 f947 	bl	65f0 <arch_cpu_idle>
   20362:	e7cb      	b.n	202fc <idle+0x10>
   20364:	200036f3 	.word	0x200036f3
   20368:	20003490 	.word	0x20003490

0002036c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2036c:	4802      	ldr	r0, [pc, #8]	; (20378 <z_bss_zero+0xc>)
   2036e:	4a03      	ldr	r2, [pc, #12]	; (2037c <z_bss_zero+0x10>)
   20370:	2100      	movs	r1, #0
   20372:	1a12      	subs	r2, r2, r0
   20374:	f005 bf1e 	b.w	261b4 <memset>
   20378:	20000f90 	.word	0x20000f90
   2037c:	200036f8 	.word	0x200036f8

00020380 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20380:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   20382:	4b0a      	ldr	r3, [pc, #40]	; (203ac <bg_thread_main+0x2c>)
   20384:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20386:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   20388:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2038a:	f7ff fee7 	bl	2015c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2038e:	f00a f832 	bl	2a3f6 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   20392:	2003      	movs	r0, #3
   20394:	f7ff fee2 	bl	2015c <z_sys_init_run_level>

	z_init_static_threads();
   20398:	f001 feee 	bl	22178 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   2039c:	f7e3 fb40 	bl	3a20 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   203a0:	4a03      	ldr	r2, [pc, #12]	; (203b0 <bg_thread_main+0x30>)
   203a2:	7b13      	ldrb	r3, [r2, #12]
   203a4:	f023 0301 	bic.w	r3, r3, #1
   203a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   203aa:	bd08      	pop	{r3, pc}
   203ac:	200036f4 	.word	0x200036f4
   203b0:	200018f8 	.word	0x200018f8

000203b4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   203b4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   203b8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 204b0 <z_cstart+0xfc>
   203bc:	b0ab      	sub	sp, #172	; 0xac
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   203be:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   203c2:	4d33      	ldr	r5, [pc, #204]	; (20490 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   203c4:	4e33      	ldr	r6, [pc, #204]	; (20494 <z_cstart+0xe0>)
   203c6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   203c8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 204b4 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   203cc:	4f32      	ldr	r7, [pc, #200]	; (20498 <z_cstart+0xe4>)
   203ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   203d2:	2400      	movs	r4, #0
   203d4:	616b      	str	r3, [r5, #20]
   203d6:	23e0      	movs	r3, #224	; 0xe0
   203d8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   203dc:	77ec      	strb	r4, [r5, #31]
   203de:	762c      	strb	r4, [r5, #24]
   203e0:	766c      	strb	r4, [r5, #25]
   203e2:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   203e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   203e6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   203ea:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   203ec:	f7e6 fb9a 	bl	6b24 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   203f0:	f7e6 f8f8 	bl	65e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   203f4:	f04f 33ff 	mov.w	r3, #4294967295
   203f8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   203fa:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   203fc:	4d27      	ldr	r5, [pc, #156]	; (2049c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   203fe:	f240 1301 	movw	r3, #257	; 0x101
   20402:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   20406:	ab06      	add	r3, sp, #24
   20408:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2040a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   2040c:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   20410:	f7ff fea4 	bl	2015c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20414:	2001      	movs	r0, #1
   20416:	f7ff fea1 	bl	2015c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2041a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   2041e:	f001 fbc9 	bl	21bb4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20422:	4b1f      	ldr	r3, [pc, #124]	; (204a0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   20424:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20426:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2042a:	491e      	ldr	r1, [pc, #120]	; (204a4 <z_cstart+0xf0>)
   2042c:	9305      	str	r3, [sp, #20]
   2042e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   20432:	4643      	mov	r3, r8
   20434:	e9cd 4401 	strd	r4, r4, [sp, #4]
   20438:	9400      	str	r4, [sp, #0]
   2043a:	4630      	mov	r0, r6
   2043c:	f001 fde4 	bl	22008 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20440:	7b73      	ldrb	r3, [r6, #13]
   20442:	4682      	mov	sl, r0
   20444:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   20448:	4630      	mov	r0, r6
   2044a:	7373      	strb	r3, [r6, #13]
   2044c:	f000 ff36 	bl	212bc <z_ready_thread>
	z_setup_new_thread(thread, stack,
   20450:	230f      	movs	r3, #15
   20452:	e9cd 4302 	strd	r4, r3, [sp, #8]
   20456:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2045a:	4b13      	ldr	r3, [pc, #76]	; (204a8 <z_cstart+0xf4>)
   2045c:	4913      	ldr	r1, [pc, #76]	; (204ac <z_cstart+0xf8>)
   2045e:	e9cd b404 	strd	fp, r4, [sp, #16]
   20462:	e9cd 5400 	strd	r5, r4, [sp]
   20466:	4638      	mov	r0, r7
   20468:	f001 fdce 	bl	22008 <z_setup_new_thread>
   2046c:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2046e:	60ef      	str	r7, [r5, #12]
   20470:	f023 0304 	bic.w	r3, r3, #4
   20474:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   20476:	f105 031c 	add.w	r3, r5, #28
		_kernel.cpus[i].id = i;
   2047a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   2047c:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
   20480:	e9c5 3307 	strd	r3, r3, [r5, #28]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20484:	4642      	mov	r2, r8
   20486:	4651      	mov	r1, sl
   20488:	4630      	mov	r0, r6
   2048a:	f7e6 f891 	bl	65b0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2048e:	bf00      	nop
   20490:	e000ed00 	.word	0xe000ed00
   20494:	200018f8 	.word	0x200018f8
   20498:	20001868 	.word	0x20001868
   2049c:	20003490 	.word	0x20003490
   204a0:	0002dbd8 	.word	0x0002dbd8
   204a4:	20004b40 	.word	0x20004b40
   204a8:	000202ed 	.word	0x000202ed
   204ac:	20004f60 	.word	0x20004f60
   204b0:	200058e0 	.word	0x200058e0
   204b4:	00020381 	.word	0x00020381

000204b8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   204b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   204ba:	4d0d      	ldr	r5, [pc, #52]	; (204f0 <statics_init+0x38>)
   204bc:	4c0d      	ldr	r4, [pc, #52]	; (204f4 <statics_init+0x3c>)
   204be:	4e0e      	ldr	r6, [pc, #56]	; (204f8 <statics_init+0x40>)
   204c0:	462f      	mov	r7, r5
   204c2:	42ac      	cmp	r4, r5
   204c4:	d908      	bls.n	204d8 <statics_init+0x20>
   204c6:	4631      	mov	r1, r6
   204c8:	480c      	ldr	r0, [pc, #48]	; (204fc <statics_init+0x44>)
   204ca:	2215      	movs	r2, #21
   204cc:	f003 feb6 	bl	2423c <printk>
   204d0:	2115      	movs	r1, #21
   204d2:	4630      	mov	r0, r6
   204d4:	f004 f964 	bl	247a0 <assert_post_action>
   204d8:	42bc      	cmp	r4, r7
   204da:	d301      	bcc.n	204e0 <statics_init+0x28>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   204dc:	2000      	movs	r0, #0
   204de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   204e0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   204e4:	4620      	mov	r0, r4
   204e6:	f009 fe5a 	bl	2a19e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   204ea:	3418      	adds	r4, #24
   204ec:	e7e9      	b.n	204c2 <statics_init+0xa>
   204ee:	bf00      	nop
   204f0:	20000d44 	.word	0x20000d44
   204f4:	20000d44 	.word	0x20000d44
   204f8:	00031989 	.word	0x00031989
   204fc:	0002bced 	.word	0x0002bced

00020500 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20504:	b087      	sub	sp, #28
   20506:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   2050a:	4606      	mov	r6, r0
   2050c:	460f      	mov	r7, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2050e:	4640      	mov	r0, r8
   20510:	4649      	mov	r1, r9
{
   20512:	4692      	mov	sl, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   20514:	f009 ff76 	bl	2a404 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20518:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2051c:	9005      	str	r0, [sp, #20]
   2051e:	468b      	mov	fp, r1
   20520:	f04f 0320 	mov.w	r3, #32
   20524:	f3ef 8411 	mrs	r4, BASEPRI
   20528:	f383 8811 	msr	BASEPRI, r3
   2052c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20530:	4628      	mov	r0, r5
   20532:	f001 fea1 	bl	22278 <z_spin_lock_valid>
   20536:	b940      	cbnz	r0, 2054a <k_heap_aligned_alloc+0x4a>
   20538:	4936      	ldr	r1, [pc, #216]	; (20614 <k_heap_aligned_alloc+0x114>)
   2053a:	4837      	ldr	r0, [pc, #220]	; (20618 <k_heap_aligned_alloc+0x118>)
   2053c:	227c      	movs	r2, #124	; 0x7c
   2053e:	f003 fe7d 	bl	2423c <printk>
   20542:	217c      	movs	r1, #124	; 0x7c
   20544:	4833      	ldr	r0, [pc, #204]	; (20614 <k_heap_aligned_alloc+0x114>)
   20546:	f004 f92b 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2054a:	4628      	mov	r0, r5
   2054c:	f001 feb2 	bl	222b4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20550:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20554:	b15b      	cbz	r3, 2056e <k_heap_aligned_alloc+0x6e>
   20556:	ea58 0309 	orrs.w	r3, r8, r9
   2055a:	d008      	beq.n	2056e <k_heap_aligned_alloc+0x6e>
   2055c:	492f      	ldr	r1, [pc, #188]	; (2061c <k_heap_aligned_alloc+0x11c>)
   2055e:	482e      	ldr	r0, [pc, #184]	; (20618 <k_heap_aligned_alloc+0x118>)
   20560:	2224      	movs	r2, #36	; 0x24
   20562:	f003 fe6b 	bl	2423c <printk>
   20566:	2124      	movs	r1, #36	; 0x24
   20568:	482c      	ldr	r0, [pc, #176]	; (2061c <k_heap_aligned_alloc+0x11c>)
   2056a:	f004 f919 	bl	247a0 <assert_post_action>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2056e:	f106 030c 	add.w	r3, r6, #12
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20572:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 20614 <k_heap_aligned_alloc+0x114>
   20576:	9304      	str	r3, [sp, #16]
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20578:	4652      	mov	r2, sl
   2057a:	4639      	mov	r1, r7
   2057c:	4630      	mov	r0, r6
   2057e:	f7e3 fe63 	bl	4248 <sys_heap_aligned_alloc>
   20582:	4680      	mov	r8, r0
		now = z_tick_get();
   20584:	f002 fa8a 	bl	22a9c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   20588:	f1b8 0f00 	cmp.w	r8, #0
   2058c:	d014      	beq.n	205b8 <k_heap_aligned_alloc+0xb8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2058e:	4628      	mov	r0, r5
   20590:	f001 fe80 	bl	22294 <z_spin_unlock_valid>
   20594:	b940      	cbnz	r0, 205a8 <k_heap_aligned_alloc+0xa8>
   20596:	491f      	ldr	r1, [pc, #124]	; (20614 <k_heap_aligned_alloc+0x114>)
   20598:	481f      	ldr	r0, [pc, #124]	; (20618 <k_heap_aligned_alloc+0x118>)
   2059a:	22a7      	movs	r2, #167	; 0xa7
   2059c:	f003 fe4e 	bl	2423c <printk>
   205a0:	21a7      	movs	r1, #167	; 0xa7
   205a2:	481c      	ldr	r0, [pc, #112]	; (20614 <k_heap_aligned_alloc+0x114>)
   205a4:	f004 f8fc 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   205a8:	f384 8811 	msr	BASEPRI, r4
   205ac:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   205b0:	4640      	mov	r0, r8
   205b2:	b007      	add	sp, #28
   205b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   205b8:	9b05      	ldr	r3, [sp, #20]
   205ba:	1a1b      	subs	r3, r3, r0
   205bc:	9302      	str	r3, [sp, #8]
   205be:	eb6b 0301 	sbc.w	r3, fp, r1
   205c2:	9303      	str	r3, [sp, #12]
   205c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   205c8:	2a01      	cmp	r2, #1
   205ca:	f173 0300 	sbcs.w	r3, r3, #0
   205ce:	dbde      	blt.n	2058e <k_heap_aligned_alloc+0x8e>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   205d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   205d4:	4621      	mov	r1, r4
   205d6:	e9cd 2300 	strd	r2, r3, [sp]
   205da:	4628      	mov	r0, r5
   205dc:	9a04      	ldr	r2, [sp, #16]
   205de:	f001 f9df 	bl	219a0 <z_pend_curr>
	__asm__ volatile(
   205e2:	f04f 0320 	mov.w	r3, #32
   205e6:	f3ef 8411 	mrs	r4, BASEPRI
   205ea:	f383 8811 	msr	BASEPRI, r3
   205ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   205f2:	4628      	mov	r0, r5
   205f4:	f001 fe40 	bl	22278 <z_spin_lock_valid>
   205f8:	b940      	cbnz	r0, 2060c <k_heap_aligned_alloc+0x10c>
   205fa:	4649      	mov	r1, r9
   205fc:	4806      	ldr	r0, [pc, #24]	; (20618 <k_heap_aligned_alloc+0x118>)
   205fe:	227c      	movs	r2, #124	; 0x7c
   20600:	f003 fe1c 	bl	2423c <printk>
   20604:	217c      	movs	r1, #124	; 0x7c
   20606:	4648      	mov	r0, r9
   20608:	f004 f8ca 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2060c:	4628      	mov	r0, r5
   2060e:	f001 fe51 	bl	222b4 <z_spin_lock_set_owner>
	return k;
   20612:	e7b1      	b.n	20578 <k_heap_aligned_alloc+0x78>
   20614:	0002be01 	.word	0x0002be01
   20618:	0002bced 	.word	0x0002bced
   2061c:	00031989 	.word	0x00031989

00020620 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   20620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20622:	4605      	mov	r5, r0
   20624:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20626:	f100 0414 	add.w	r4, r0, #20
   2062a:	f04f 0320 	mov.w	r3, #32
   2062e:	f3ef 8611 	mrs	r6, BASEPRI
   20632:	f383 8811 	msr	BASEPRI, r3
   20636:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2063a:	4620      	mov	r0, r4
   2063c:	f001 fe1c 	bl	22278 <z_spin_lock_valid>
   20640:	b940      	cbnz	r0, 20654 <k_heap_free+0x34>
   20642:	4916      	ldr	r1, [pc, #88]	; (2069c <k_heap_free+0x7c>)
   20644:	4816      	ldr	r0, [pc, #88]	; (206a0 <k_heap_free+0x80>)
   20646:	227c      	movs	r2, #124	; 0x7c
   20648:	f003 fdf8 	bl	2423c <printk>
   2064c:	217c      	movs	r1, #124	; 0x7c
   2064e:	4813      	ldr	r0, [pc, #76]	; (2069c <k_heap_free+0x7c>)
   20650:	f004 f8a6 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20654:	4620      	mov	r0, r4
   20656:	f001 fe2d 	bl	222b4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2065a:	4628      	mov	r0, r5
   2065c:	4639      	mov	r1, r7
   2065e:	f7e3 fdb3 	bl	41c8 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   20662:	f105 000c 	add.w	r0, r5, #12
   20666:	f009 fe26 	bl	2a2b6 <z_unpend_all>
   2066a:	b128      	cbz	r0, 20678 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   2066c:	4631      	mov	r1, r6
   2066e:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   20674:	f000 bc50 	b.w	20f18 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20678:	4620      	mov	r0, r4
   2067a:	f001 fe0b 	bl	22294 <z_spin_unlock_valid>
   2067e:	b940      	cbnz	r0, 20692 <k_heap_free+0x72>
   20680:	4906      	ldr	r1, [pc, #24]	; (2069c <k_heap_free+0x7c>)
   20682:	4807      	ldr	r0, [pc, #28]	; (206a0 <k_heap_free+0x80>)
   20684:	22a7      	movs	r2, #167	; 0xa7
   20686:	f003 fdd9 	bl	2423c <printk>
   2068a:	21a7      	movs	r1, #167	; 0xa7
   2068c:	4803      	ldr	r0, [pc, #12]	; (2069c <k_heap_free+0x7c>)
   2068e:	f004 f887 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   20692:	f386 8811 	msr	BASEPRI, r6
   20696:	f3bf 8f6f 	isb	sy
}
   2069a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2069c:	0002be01 	.word	0x0002be01
   206a0:	0002bced 	.word	0x0002bced

000206a4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   206a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   206a8:	4d14      	ldr	r5, [pc, #80]	; (206fc <init_mem_slab_module+0x58>)
   206aa:	4c15      	ldr	r4, [pc, #84]	; (20700 <init_mem_slab_module+0x5c>)
   206ac:	4e15      	ldr	r6, [pc, #84]	; (20704 <init_mem_slab_module+0x60>)
   206ae:	46a8      	mov	r8, r5
   206b0:	42ac      	cmp	r4, r5
   206b2:	d908      	bls.n	206c6 <init_mem_slab_module+0x22>
   206b4:	4631      	mov	r1, r6
   206b6:	4814      	ldr	r0, [pc, #80]	; (20708 <init_mem_slab_module+0x64>)
   206b8:	2242      	movs	r2, #66	; 0x42
   206ba:	f003 fdbf 	bl	2423c <printk>
   206be:	2142      	movs	r1, #66	; 0x42
   206c0:	4630      	mov	r0, r6
   206c2:	f004 f86d 	bl	247a0 <assert_post_action>
   206c6:	4544      	cmp	r4, r8
   206c8:	d302      	bcc.n	206d0 <init_mem_slab_module+0x2c>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   206ca:	2000      	movs	r0, #0
	return rc;
}
   206cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   206d0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   206d4:	ea42 0301 	orr.w	r3, r2, r1
   206d8:	f013 0303 	ands.w	r3, r3, #3
   206dc:	d10b      	bne.n	206f6 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   206de:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   206e0:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   206e2:	4283      	cmp	r3, r0
   206e4:	d101      	bne.n	206ea <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   206e6:	341c      	adds	r4, #28
   206e8:	e7e2      	b.n	206b0 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   206ea:	6967      	ldr	r7, [r4, #20]
   206ec:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   206ee:	3301      	adds	r3, #1
		slab->free_list = p;
   206f0:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   206f2:	440a      	add	r2, r1
   206f4:	e7f5      	b.n	206e2 <init_mem_slab_module+0x3e>
		return -EINVAL;
   206f6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   206fa:	e7e7      	b.n	206cc <init_mem_slab_module+0x28>
   206fc:	20000d44 	.word	0x20000d44
   20700:	20000cd4 	.word	0x20000cd4
   20704:	000319ab 	.word	0x000319ab
   20708:	0002bced 	.word	0x0002bced

0002070c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2070c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20710:	4604      	mov	r4, r0
   20712:	460d      	mov	r5, r1
   20714:	4616      	mov	r6, r2
   20716:	461f      	mov	r7, r3
	__asm__ volatile(
   20718:	f04f 0320 	mov.w	r3, #32
   2071c:	f3ef 8811 	mrs	r8, BASEPRI
   20720:	f383 8811 	msr	BASEPRI, r3
   20724:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20728:	4821      	ldr	r0, [pc, #132]	; (207b0 <k_mem_slab_alloc+0xa4>)
   2072a:	f001 fda5 	bl	22278 <z_spin_lock_valid>
   2072e:	b940      	cbnz	r0, 20742 <k_mem_slab_alloc+0x36>
   20730:	4920      	ldr	r1, [pc, #128]	; (207b4 <k_mem_slab_alloc+0xa8>)
   20732:	4821      	ldr	r0, [pc, #132]	; (207b8 <k_mem_slab_alloc+0xac>)
   20734:	227c      	movs	r2, #124	; 0x7c
   20736:	f003 fd81 	bl	2423c <printk>
   2073a:	217c      	movs	r1, #124	; 0x7c
   2073c:	481d      	ldr	r0, [pc, #116]	; (207b4 <k_mem_slab_alloc+0xa8>)
   2073e:	f004 f82f 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20742:	481b      	ldr	r0, [pc, #108]	; (207b0 <k_mem_slab_alloc+0xa4>)
   20744:	f001 fdb6 	bl	222b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   20748:	6963      	ldr	r3, [r4, #20]
   2074a:	b1c3      	cbz	r3, 2077e <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   2074c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   2074e:	681b      	ldr	r3, [r3, #0]
   20750:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   20752:	69a3      	ldr	r3, [r4, #24]
   20754:	3301      	adds	r3, #1
   20756:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20758:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2075a:	4815      	ldr	r0, [pc, #84]	; (207b0 <k_mem_slab_alloc+0xa4>)
   2075c:	f001 fd9a 	bl	22294 <z_spin_unlock_valid>
   20760:	b940      	cbnz	r0, 20774 <k_mem_slab_alloc+0x68>
   20762:	4914      	ldr	r1, [pc, #80]	; (207b4 <k_mem_slab_alloc+0xa8>)
   20764:	4814      	ldr	r0, [pc, #80]	; (207b8 <k_mem_slab_alloc+0xac>)
   20766:	22a7      	movs	r2, #167	; 0xa7
   20768:	f003 fd68 	bl	2423c <printk>
   2076c:	21a7      	movs	r1, #167	; 0xa7
   2076e:	4811      	ldr	r0, [pc, #68]	; (207b4 <k_mem_slab_alloc+0xa8>)
   20770:	f004 f816 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   20774:	f388 8811 	msr	BASEPRI, r8
   20778:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   2077c:	e013      	b.n	207a6 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2077e:	ea56 0207 	orrs.w	r2, r6, r7
   20782:	d103      	bne.n	2078c <k_mem_slab_alloc+0x80>
		*mem = NULL;
   20784:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   20786:	f06f 040b 	mvn.w	r4, #11
   2078a:	e7e6      	b.n	2075a <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   2078c:	4622      	mov	r2, r4
   2078e:	e9cd 6700 	strd	r6, r7, [sp]
   20792:	4641      	mov	r1, r8
   20794:	4806      	ldr	r0, [pc, #24]	; (207b0 <k_mem_slab_alloc+0xa4>)
   20796:	f001 f903 	bl	219a0 <z_pend_curr>
		if (result == 0) {
   2079a:	4604      	mov	r4, r0
   2079c:	b918      	cbnz	r0, 207a6 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   2079e:	4b07      	ldr	r3, [pc, #28]	; (207bc <k_mem_slab_alloc+0xb0>)
   207a0:	689b      	ldr	r3, [r3, #8]
   207a2:	695b      	ldr	r3, [r3, #20]
   207a4:	602b      	str	r3, [r5, #0]
}
   207a6:	4620      	mov	r0, r4
   207a8:	b002      	add	sp, #8
   207aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   207ae:	bf00      	nop
   207b0:	20003488 	.word	0x20003488
   207b4:	0002be01 	.word	0x0002be01
   207b8:	0002bced 	.word	0x0002bced
   207bc:	20003490 	.word	0x20003490

000207c0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   207c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   207c2:	4604      	mov	r4, r0
   207c4:	460d      	mov	r5, r1
	__asm__ volatile(
   207c6:	f04f 0320 	mov.w	r3, #32
   207ca:	f3ef 8611 	mrs	r6, BASEPRI
   207ce:	f383 8811 	msr	BASEPRI, r3
   207d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   207d6:	481e      	ldr	r0, [pc, #120]	; (20850 <k_mem_slab_free+0x90>)
   207d8:	f001 fd4e 	bl	22278 <z_spin_lock_valid>
   207dc:	b940      	cbnz	r0, 207f0 <k_mem_slab_free+0x30>
   207de:	491d      	ldr	r1, [pc, #116]	; (20854 <k_mem_slab_free+0x94>)
   207e0:	481d      	ldr	r0, [pc, #116]	; (20858 <k_mem_slab_free+0x98>)
   207e2:	227c      	movs	r2, #124	; 0x7c
   207e4:	f003 fd2a 	bl	2423c <printk>
   207e8:	217c      	movs	r1, #124	; 0x7c
   207ea:	481a      	ldr	r0, [pc, #104]	; (20854 <k_mem_slab_free+0x94>)
   207ec:	f003 ffd8 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   207f0:	4817      	ldr	r0, [pc, #92]	; (20850 <k_mem_slab_free+0x90>)
   207f2:	f001 fd5f 	bl	222b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   207f6:	6967      	ldr	r7, [r4, #20]
   207f8:	b97f      	cbnz	r7, 2081a <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   207fa:	4620      	mov	r0, r4
   207fc:	f001 f972 	bl	21ae4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20800:	b158      	cbz	r0, 2081a <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20802:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20804:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20806:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
			z_ready_thread(pending_thread);
   2080a:	f000 fd57 	bl	212bc <z_ready_thread>
			z_reschedule(&lock, key);
   2080e:	4631      	mov	r1, r6
   20810:	480f      	ldr	r0, [pc, #60]	; (20850 <k_mem_slab_free+0x90>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   20812:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   20816:	f000 bb7f 	b.w	20f18 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2081a:	682b      	ldr	r3, [r5, #0]
   2081c:	6962      	ldr	r2, [r4, #20]
   2081e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20820:	682b      	ldr	r3, [r5, #0]
   20822:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   20824:	69a3      	ldr	r3, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20826:	480a      	ldr	r0, [pc, #40]	; (20850 <k_mem_slab_free+0x90>)
   20828:	3b01      	subs	r3, #1
   2082a:	61a3      	str	r3, [r4, #24]
   2082c:	f001 fd32 	bl	22294 <z_spin_unlock_valid>
   20830:	b940      	cbnz	r0, 20844 <k_mem_slab_free+0x84>
   20832:	4908      	ldr	r1, [pc, #32]	; (20854 <k_mem_slab_free+0x94>)
   20834:	4808      	ldr	r0, [pc, #32]	; (20858 <k_mem_slab_free+0x98>)
   20836:	22a7      	movs	r2, #167	; 0xa7
   20838:	f003 fd00 	bl	2423c <printk>
   2083c:	21a7      	movs	r1, #167	; 0xa7
   2083e:	4805      	ldr	r0, [pc, #20]	; (20854 <k_mem_slab_free+0x94>)
   20840:	f003 ffae 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   20844:	f386 8811 	msr	BASEPRI, r6
   20848:	f3bf 8f6f 	isb	sy
}
   2084c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2084e:	bf00      	nop
   20850:	20003488 	.word	0x20003488
   20854:	0002be01 	.word	0x0002be01
   20858:	0002bced 	.word	0x0002bced

0002085c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2085c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20860:	4604      	mov	r4, r0
   20862:	4616      	mov	r6, r2
   20864:	461f      	mov	r7, r3
   20866:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   2086a:	b143      	cbz	r3, 2087e <z_impl_k_mutex_lock+0x22>
   2086c:	4960      	ldr	r1, [pc, #384]	; (209f0 <z_impl_k_mutex_lock+0x194>)
   2086e:	4861      	ldr	r0, [pc, #388]	; (209f4 <z_impl_k_mutex_lock+0x198>)
   20870:	227d      	movs	r2, #125	; 0x7d
   20872:	f003 fce3 	bl	2423c <printk>
   20876:	217d      	movs	r1, #125	; 0x7d
   20878:	485d      	ldr	r0, [pc, #372]	; (209f0 <z_impl_k_mutex_lock+0x194>)
   2087a:	f003 ff91 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   2087e:	f04f 0320 	mov.w	r3, #32
   20882:	f3ef 8511 	mrs	r5, BASEPRI
   20886:	f383 8811 	msr	BASEPRI, r3
   2088a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2088e:	485a      	ldr	r0, [pc, #360]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   20890:	f001 fcf2 	bl	22278 <z_spin_lock_valid>
   20894:	b940      	cbnz	r0, 208a8 <z_impl_k_mutex_lock+0x4c>
   20896:	4959      	ldr	r1, [pc, #356]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   20898:	4856      	ldr	r0, [pc, #344]	; (209f4 <z_impl_k_mutex_lock+0x198>)
   2089a:	227c      	movs	r2, #124	; 0x7c
   2089c:	f003 fcce 	bl	2423c <printk>
   208a0:	217c      	movs	r1, #124	; 0x7c
   208a2:	4856      	ldr	r0, [pc, #344]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   208a4:	f003 ff7c 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   208a8:	4853      	ldr	r0, [pc, #332]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   208aa:	f001 fd03 	bl	222b4 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   208ae:	68e3      	ldr	r3, [r4, #12]
   208b0:	4a53      	ldr	r2, [pc, #332]	; (20a00 <z_impl_k_mutex_lock+0x1a4>)
   208b2:	b1d3      	cbz	r3, 208ea <z_impl_k_mutex_lock+0x8e>
   208b4:	68a0      	ldr	r0, [r4, #8]
   208b6:	6891      	ldr	r1, [r2, #8]
   208b8:	4288      	cmp	r0, r1
   208ba:	d033      	beq.n	20924 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   208bc:	ea56 0307 	orrs.w	r3, r6, r7
   208c0:	d132      	bne.n	20928 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208c2:	484d      	ldr	r0, [pc, #308]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   208c4:	f001 fce6 	bl	22294 <z_spin_unlock_valid>
   208c8:	b940      	cbnz	r0, 208dc <z_impl_k_mutex_lock+0x80>
   208ca:	494c      	ldr	r1, [pc, #304]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   208cc:	4849      	ldr	r0, [pc, #292]	; (209f4 <z_impl_k_mutex_lock+0x198>)
   208ce:	22a7      	movs	r2, #167	; 0xa7
   208d0:	f003 fcb4 	bl	2423c <printk>
   208d4:	21a7      	movs	r1, #167	; 0xa7
   208d6:	4849      	ldr	r0, [pc, #292]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   208d8:	f003 ff62 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   208dc:	f385 8811 	msr	BASEPRI, r5
   208e0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   208e4:	f06f 000f 	mvn.w	r0, #15
   208e8:	e019      	b.n	2091e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   208ea:	6891      	ldr	r1, [r2, #8]
   208ec:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   208f0:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   208f2:	3301      	adds	r3, #1
   208f4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   208f6:	6893      	ldr	r3, [r2, #8]
   208f8:	60a3      	str	r3, [r4, #8]
   208fa:	483f      	ldr	r0, [pc, #252]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   208fc:	f001 fcca 	bl	22294 <z_spin_unlock_valid>
   20900:	b940      	cbnz	r0, 20914 <z_impl_k_mutex_lock+0xb8>
   20902:	493e      	ldr	r1, [pc, #248]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   20904:	483b      	ldr	r0, [pc, #236]	; (209f4 <z_impl_k_mutex_lock+0x198>)
   20906:	22a7      	movs	r2, #167	; 0xa7
   20908:	f003 fc98 	bl	2423c <printk>
   2090c:	21a7      	movs	r1, #167	; 0xa7
   2090e:	483b      	ldr	r0, [pc, #236]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   20910:	f003 ff46 	bl	247a0 <assert_post_action>
   20914:	f385 8811 	msr	BASEPRI, r5
   20918:	f3bf 8f6f 	isb	sy
		return 0;
   2091c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2091e:	b002      	add	sp, #8
   20920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20924:	6921      	ldr	r1, [r4, #16]
   20926:	e7e3      	b.n	208f0 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20928:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2092c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20930:	4299      	cmp	r1, r3
   20932:	bfa8      	it	ge
   20934:	4619      	movge	r1, r3
   20936:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2093a:	4299      	cmp	r1, r3
   2093c:	da3e      	bge.n	209bc <z_impl_k_mutex_lock+0x160>
		return z_set_prio(mutex->owner, new_prio);
   2093e:	f001 f855 	bl	219ec <z_set_prio>
   20942:	4680      	mov	r8, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20944:	e9cd 6700 	strd	r6, r7, [sp]
   20948:	4622      	mov	r2, r4
   2094a:	4629      	mov	r1, r5
   2094c:	482a      	ldr	r0, [pc, #168]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   2094e:	f001 f827 	bl	219a0 <z_pend_curr>
	if (got_mutex == 0) {
   20952:	2800      	cmp	r0, #0
   20954:	d0e3      	beq.n	2091e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   20956:	f04f 0320 	mov.w	r3, #32
   2095a:	f3ef 8511 	mrs	r5, BASEPRI
   2095e:	f383 8811 	msr	BASEPRI, r3
   20962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20966:	4824      	ldr	r0, [pc, #144]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   20968:	f001 fc86 	bl	22278 <z_spin_lock_valid>
   2096c:	b940      	cbnz	r0, 20980 <z_impl_k_mutex_lock+0x124>
   2096e:	4923      	ldr	r1, [pc, #140]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   20970:	4820      	ldr	r0, [pc, #128]	; (209f4 <z_impl_k_mutex_lock+0x198>)
   20972:	227c      	movs	r2, #124	; 0x7c
   20974:	f003 fc62 	bl	2423c <printk>
   20978:	217c      	movs	r1, #124	; 0x7c
   2097a:	4820      	ldr	r0, [pc, #128]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   2097c:	f003 ff10 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20980:	481d      	ldr	r0, [pc, #116]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   20982:	f001 fc97 	bl	222b4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20986:	6823      	ldr	r3, [r4, #0]
   20988:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2098a:	42a3      	cmp	r3, r4
   2098c:	d007      	beq.n	2099e <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2098e:	b133      	cbz	r3, 2099e <z_impl_k_mutex_lock+0x142>
   20990:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20994:	4299      	cmp	r1, r3
   20996:	bfa8      	it	ge
   20998:	4619      	movge	r1, r3
   2099a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2099e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   209a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   209a4:	4299      	cmp	r1, r3
   209a6:	d10c      	bne.n	209c2 <z_impl_k_mutex_lock+0x166>
	if (resched) {
   209a8:	f1b8 0f00 	cmp.w	r8, #0
   209ac:	d00e      	beq.n	209cc <z_impl_k_mutex_lock+0x170>
		z_reschedule(&lock, key);
   209ae:	4629      	mov	r1, r5
   209b0:	4811      	ldr	r0, [pc, #68]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   209b2:	f000 fab1 	bl	20f18 <z_reschedule>
	return -EAGAIN;
   209b6:	f06f 000a 	mvn.w	r0, #10
   209ba:	e7b0      	b.n	2091e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   209bc:	f04f 0800 	mov.w	r8, #0
   209c0:	e7c0      	b.n	20944 <z_impl_k_mutex_lock+0xe8>
		return z_set_prio(mutex->owner, new_prio);
   209c2:	f001 f813 	bl	219ec <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   209c6:	2800      	cmp	r0, #0
   209c8:	d1f1      	bne.n	209ae <z_impl_k_mutex_lock+0x152>
   209ca:	e7ed      	b.n	209a8 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209cc:	480a      	ldr	r0, [pc, #40]	; (209f8 <z_impl_k_mutex_lock+0x19c>)
   209ce:	f001 fc61 	bl	22294 <z_spin_unlock_valid>
   209d2:	b940      	cbnz	r0, 209e6 <z_impl_k_mutex_lock+0x18a>
   209d4:	4909      	ldr	r1, [pc, #36]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   209d6:	4807      	ldr	r0, [pc, #28]	; (209f4 <z_impl_k_mutex_lock+0x198>)
   209d8:	22a7      	movs	r2, #167	; 0xa7
   209da:	f003 fc2f 	bl	2423c <printk>
   209de:	21a7      	movs	r1, #167	; 0xa7
   209e0:	4806      	ldr	r0, [pc, #24]	; (209fc <z_impl_k_mutex_lock+0x1a0>)
   209e2:	f003 fedd 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   209e6:	f385 8811 	msr	BASEPRI, r5
   209ea:	f3bf 8f6f 	isb	sy
   209ee:	e7e2      	b.n	209b6 <z_impl_k_mutex_lock+0x15a>
   209f0:	000319d0 	.word	0x000319d0
   209f4:	0002bced 	.word	0x0002bced
   209f8:	2000348c 	.word	0x2000348c
   209fc:	0002be01 	.word	0x0002be01
   20a00:	20003490 	.word	0x20003490

00020a04 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20a04:	b538      	push	{r3, r4, r5, lr}
   20a06:	4604      	mov	r4, r0
   20a08:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20a0c:	b143      	cbz	r3, 20a20 <z_impl_k_mutex_unlock+0x1c>
   20a0e:	4948      	ldr	r1, [pc, #288]	; (20b30 <z_impl_k_mutex_unlock+0x12c>)
   20a10:	4848      	ldr	r0, [pc, #288]	; (20b34 <z_impl_k_mutex_unlock+0x130>)
   20a12:	22d8      	movs	r2, #216	; 0xd8
   20a14:	f003 fc12 	bl	2423c <printk>
   20a18:	21d8      	movs	r1, #216	; 0xd8
   20a1a:	4845      	ldr	r0, [pc, #276]	; (20b30 <z_impl_k_mutex_unlock+0x12c>)
   20a1c:	f003 fec0 	bl	247a0 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   20a20:	68a3      	ldr	r3, [r4, #8]
   20a22:	2b00      	cmp	r3, #0
   20a24:	d07d      	beq.n	20b22 <z_impl_k_mutex_unlock+0x11e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   20a26:	4d44      	ldr	r5, [pc, #272]	; (20b38 <z_impl_k_mutex_unlock+0x134>)
   20a28:	68aa      	ldr	r2, [r5, #8]
   20a2a:	4293      	cmp	r3, r2
   20a2c:	d17c      	bne.n	20b28 <z_impl_k_mutex_unlock+0x124>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20a2e:	68e3      	ldr	r3, [r4, #12]
   20a30:	b943      	cbnz	r3, 20a44 <z_impl_k_mutex_unlock+0x40>
   20a32:	493f      	ldr	r1, [pc, #252]	; (20b30 <z_impl_k_mutex_unlock+0x12c>)
   20a34:	483f      	ldr	r0, [pc, #252]	; (20b34 <z_impl_k_mutex_unlock+0x130>)
   20a36:	22ea      	movs	r2, #234	; 0xea
   20a38:	f003 fc00 	bl	2423c <printk>
   20a3c:	21ea      	movs	r1, #234	; 0xea
   20a3e:	483c      	ldr	r0, [pc, #240]	; (20b30 <z_impl_k_mutex_unlock+0x12c>)
   20a40:	f003 feae 	bl	247a0 <assert_post_action>
   20a44:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   20a48:	b153      	cbz	r3, 20a60 <z_impl_k_mutex_unlock+0x5c>
   20a4a:	493c      	ldr	r1, [pc, #240]	; (20b3c <z_impl_k_mutex_unlock+0x138>)
   20a4c:	4839      	ldr	r0, [pc, #228]	; (20b34 <z_impl_k_mutex_unlock+0x130>)
   20a4e:	f44f 7289 	mov.w	r2, #274	; 0x112
   20a52:	f003 fbf3 	bl	2423c <printk>
   20a56:	f44f 7189 	mov.w	r1, #274	; 0x112
   20a5a:	4838      	ldr	r0, [pc, #224]	; (20b3c <z_impl_k_mutex_unlock+0x138>)
   20a5c:	f003 fea0 	bl	247a0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   20a60:	68ab      	ldr	r3, [r5, #8]
   20a62:	7bdb      	ldrb	r3, [r3, #15]
   20a64:	2b01      	cmp	r3, #1
   20a66:	d10a      	bne.n	20a7e <z_impl_k_mutex_unlock+0x7a>
   20a68:	4934      	ldr	r1, [pc, #208]	; (20b3c <z_impl_k_mutex_unlock+0x138>)
   20a6a:	4832      	ldr	r0, [pc, #200]	; (20b34 <z_impl_k_mutex_unlock+0x130>)
   20a6c:	f240 1213 	movw	r2, #275	; 0x113
   20a70:	f003 fbe4 	bl	2423c <printk>
   20a74:	f240 1113 	movw	r1, #275	; 0x113
   20a78:	4830      	ldr	r0, [pc, #192]	; (20b3c <z_impl_k_mutex_unlock+0x138>)
   20a7a:	f003 fe91 	bl	247a0 <assert_post_action>

	--_current->base.sched_locked;
   20a7e:	68aa      	ldr	r2, [r5, #8]
   20a80:	7bd3      	ldrb	r3, [r2, #15]
   20a82:	3b01      	subs	r3, #1
   20a84:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   20a86:	68e3      	ldr	r3, [r4, #12]
   20a88:	2b01      	cmp	r3, #1
   20a8a:	d005      	beq.n	20a98 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   20a8c:	3b01      	subs	r3, #1
   20a8e:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   20a90:	f000 fb70 	bl	21174 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   20a94:	2000      	movs	r0, #0
}
   20a96:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20a98:	f04f 0320 	mov.w	r3, #32
   20a9c:	f3ef 8511 	mrs	r5, BASEPRI
   20aa0:	f383 8811 	msr	BASEPRI, r3
   20aa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20aa8:	4825      	ldr	r0, [pc, #148]	; (20b40 <z_impl_k_mutex_unlock+0x13c>)
   20aaa:	f001 fbe5 	bl	22278 <z_spin_lock_valid>
   20aae:	b940      	cbnz	r0, 20ac2 <z_impl_k_mutex_unlock+0xbe>
   20ab0:	4924      	ldr	r1, [pc, #144]	; (20b44 <z_impl_k_mutex_unlock+0x140>)
   20ab2:	4820      	ldr	r0, [pc, #128]	; (20b34 <z_impl_k_mutex_unlock+0x130>)
   20ab4:	227c      	movs	r2, #124	; 0x7c
   20ab6:	f003 fbc1 	bl	2423c <printk>
   20aba:	217c      	movs	r1, #124	; 0x7c
   20abc:	4821      	ldr	r0, [pc, #132]	; (20b44 <z_impl_k_mutex_unlock+0x140>)
   20abe:	f003 fe6f 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20ac2:	481f      	ldr	r0, [pc, #124]	; (20b40 <z_impl_k_mutex_unlock+0x13c>)
   20ac4:	f001 fbf6 	bl	222b4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20ac8:	68a0      	ldr	r0, [r4, #8]
   20aca:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   20acc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20ad0:	4299      	cmp	r1, r3
   20ad2:	d001      	beq.n	20ad8 <z_impl_k_mutex_unlock+0xd4>
		return z_set_prio(mutex->owner, new_prio);
   20ad4:	f000 ff8a 	bl	219ec <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20ad8:	4620      	mov	r0, r4
   20ada:	f001 f803 	bl	21ae4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20ade:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20ae0:	b160      	cbz	r0, 20afc <z_impl_k_mutex_unlock+0xf8>
		mutex->owner_orig_prio = new_owner->base.prio;
   20ae2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20ae6:	6122      	str	r2, [r4, #16]
   20ae8:	2200      	movs	r2, #0
   20aea:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   20aee:	f000 fbe5 	bl	212bc <z_ready_thread>
		z_reschedule(&lock, key);
   20af2:	4629      	mov	r1, r5
   20af4:	4812      	ldr	r0, [pc, #72]	; (20b40 <z_impl_k_mutex_unlock+0x13c>)
   20af6:	f000 fa0f 	bl	20f18 <z_reschedule>
   20afa:	e7c9      	b.n	20a90 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   20afc:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20afe:	4810      	ldr	r0, [pc, #64]	; (20b40 <z_impl_k_mutex_unlock+0x13c>)
   20b00:	f001 fbc8 	bl	22294 <z_spin_unlock_valid>
   20b04:	b940      	cbnz	r0, 20b18 <z_impl_k_mutex_unlock+0x114>
   20b06:	490f      	ldr	r1, [pc, #60]	; (20b44 <z_impl_k_mutex_unlock+0x140>)
   20b08:	480a      	ldr	r0, [pc, #40]	; (20b34 <z_impl_k_mutex_unlock+0x130>)
   20b0a:	22a7      	movs	r2, #167	; 0xa7
   20b0c:	f003 fb96 	bl	2423c <printk>
   20b10:	21a7      	movs	r1, #167	; 0xa7
   20b12:	480c      	ldr	r0, [pc, #48]	; (20b44 <z_impl_k_mutex_unlock+0x140>)
   20b14:	f003 fe44 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   20b18:	f385 8811 	msr	BASEPRI, r5
   20b1c:	f3bf 8f6f 	isb	sy
   20b20:	e7b6      	b.n	20a90 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   20b22:	f06f 0015 	mvn.w	r0, #21
   20b26:	e7b6      	b.n	20a96 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   20b28:	f04f 30ff 	mov.w	r0, #4294967295
   20b2c:	e7b3      	b.n	20a96 <z_impl_k_mutex_unlock+0x92>
   20b2e:	bf00      	nop
   20b30:	000319d0 	.word	0x000319d0
   20b34:	0002bced 	.word	0x0002bced
   20b38:	20003490 	.word	0x20003490
   20b3c:	000319f2 	.word	0x000319f2
   20b40:	2000348c 	.word	0x2000348c
   20b44:	0002be01 	.word	0x0002be01

00020b48 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20b4c:	4604      	mov	r4, r0
   20b4e:	460e      	mov	r6, r1
   20b50:	4690      	mov	r8, r2
   20b52:	4699      	mov	r9, r3
   20b54:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20b58:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20b5c:	f04f 0320 	mov.w	r3, #32
   20b60:	f3ef 8711 	mrs	r7, BASEPRI
   20b64:	f383 8811 	msr	BASEPRI, r3
   20b68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20b6c:	4628      	mov	r0, r5
   20b6e:	f001 fb83 	bl	22278 <z_spin_lock_valid>
   20b72:	b940      	cbnz	r0, 20b86 <queue_insert+0x3e>
   20b74:	4937      	ldr	r1, [pc, #220]	; (20c54 <queue_insert+0x10c>)
   20b76:	4838      	ldr	r0, [pc, #224]	; (20c58 <queue_insert+0x110>)
   20b78:	227c      	movs	r2, #124	; 0x7c
   20b7a:	f003 fb5f 	bl	2423c <printk>
   20b7e:	217c      	movs	r1, #124	; 0x7c
   20b80:	4834      	ldr	r0, [pc, #208]	; (20c54 <queue_insert+0x10c>)
   20b82:	f003 fe0d 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20b86:	4628      	mov	r0, r5
   20b88:	f001 fb94 	bl	222b4 <z_spin_lock_set_owner>

	if (is_append) {
   20b8c:	f1ba 0f00 	cmp.w	sl, #0
   20b90:	d000      	beq.n	20b94 <queue_insert+0x4c>
		prev = sys_sflist_peek_tail(&queue->data_q);
   20b92:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20b94:	f104 000c 	add.w	r0, r4, #12
   20b98:	f000 ffa4 	bl	21ae4 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20b9c:	b160      	cbz	r0, 20bb8 <queue_insert+0x70>
   20b9e:	2400      	movs	r4, #0
   20ba0:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
   20ba4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20ba8:	f000 fb88 	bl	212bc <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20bac:	4628      	mov	r0, r5
   20bae:	4639      	mov	r1, r7
   20bb0:	f000 f9b2 	bl	20f18 <z_reschedule>
	return 0;
   20bb4:	2000      	movs	r0, #0
   20bb6:	e019      	b.n	20bec <queue_insert+0xa4>
	if (alloc) {
   20bb8:	f1b9 0f00 	cmp.w	r9, #0
   20bbc:	d028      	beq.n	20c10 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   20bbe:	2108      	movs	r1, #8
   20bc0:	f002 face 	bl	23160 <z_thread_aligned_alloc>
		if (anode == NULL) {
   20bc4:	b9a0      	cbnz	r0, 20bf0 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20bc6:	4628      	mov	r0, r5
   20bc8:	f001 fb64 	bl	22294 <z_spin_unlock_valid>
   20bcc:	b940      	cbnz	r0, 20be0 <queue_insert+0x98>
   20bce:	4921      	ldr	r1, [pc, #132]	; (20c54 <queue_insert+0x10c>)
   20bd0:	4821      	ldr	r0, [pc, #132]	; (20c58 <queue_insert+0x110>)
   20bd2:	22a7      	movs	r2, #167	; 0xa7
   20bd4:	f003 fb32 	bl	2423c <printk>
   20bd8:	21a7      	movs	r1, #167	; 0xa7
   20bda:	481e      	ldr	r0, [pc, #120]	; (20c54 <queue_insert+0x10c>)
   20bdc:	f003 fde0 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   20be0:	f387 8811 	msr	BASEPRI, r7
   20be4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20be8:	f06f 000b 	mvn.w	r0, #11
}
   20bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20bf0:	2301      	movs	r3, #1
		anode->data = data;
   20bf2:	f8c0 8004 	str.w	r8, [r0, #4]
   20bf6:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20bf8:	6803      	ldr	r3, [r0, #0]
   20bfa:	f003 0303 	and.w	r3, r3, #3
   20bfe:	b95e      	cbnz	r6, 20c18 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20c00:	6822      	ldr	r2, [r4, #0]
   20c02:	4313      	orrs	r3, r2
   20c04:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20c06:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20c08:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20c0a:	b973      	cbnz	r3, 20c2a <queue_insert+0xe2>
	list->tail = node;
   20c0c:	6060      	str	r0, [r4, #4]
   20c0e:	e00c      	b.n	20c2a <queue_insert+0xe2>
	node->next_and_flags = flags;
   20c10:	f8c8 9000 	str.w	r9, [r8]
   20c14:	4640      	mov	r0, r8
   20c16:	e7ef      	b.n	20bf8 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20c18:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20c1a:	f032 0203 	bics.w	r2, r2, #3
   20c1e:	d110      	bne.n	20c42 <queue_insert+0xfa>
Z_GENLIST_APPEND(sflist, sfnode)
   20c20:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20c22:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   20c24:	b93a      	cbnz	r2, 20c36 <queue_insert+0xee>
	list->head = node;
   20c26:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20c2a:	2104      	movs	r1, #4
   20c2c:	f104 0014 	add.w	r0, r4, #20
   20c30:	f009 fc5b 	bl	2a4ea <z_handle_obj_poll_events>
   20c34:	e7ba      	b.n	20bac <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20c36:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20c38:	f003 0303 	and.w	r3, r3, #3
   20c3c:	4303      	orrs	r3, r0
   20c3e:	6013      	str	r3, [r2, #0]
   20c40:	e7e4      	b.n	20c0c <queue_insert+0xc4>
   20c42:	4313      	orrs	r3, r2
   20c44:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20c46:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20c48:	f003 0303 	and.w	r3, r3, #3
   20c4c:	4318      	orrs	r0, r3
   20c4e:	6030      	str	r0, [r6, #0]
   20c50:	e7eb      	b.n	20c2a <queue_insert+0xe2>
   20c52:	bf00      	nop
   20c54:	0002be01 	.word	0x0002be01
   20c58:	0002bced 	.word	0x0002bced

00020c5c <z_impl_k_queue_cancel_wait>:
{
   20c5c:	b570      	push	{r4, r5, r6, lr}
   20c5e:	4605      	mov	r5, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20c60:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   20c64:	f04f 0320 	mov.w	r3, #32
   20c68:	f3ef 8611 	mrs	r6, BASEPRI
   20c6c:	f383 8811 	msr	BASEPRI, r3
   20c70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c74:	4620      	mov	r0, r4
   20c76:	f001 faff 	bl	22278 <z_spin_lock_valid>
   20c7a:	b940      	cbnz	r0, 20c8e <z_impl_k_queue_cancel_wait+0x32>
   20c7c:	4910      	ldr	r1, [pc, #64]	; (20cc0 <z_impl_k_queue_cancel_wait+0x64>)
   20c7e:	4811      	ldr	r0, [pc, #68]	; (20cc4 <z_impl_k_queue_cancel_wait+0x68>)
   20c80:	227c      	movs	r2, #124	; 0x7c
   20c82:	f003 fadb 	bl	2423c <printk>
   20c86:	217c      	movs	r1, #124	; 0x7c
   20c88:	480d      	ldr	r0, [pc, #52]	; (20cc0 <z_impl_k_queue_cancel_wait+0x64>)
   20c8a:	f003 fd89 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20c8e:	4620      	mov	r0, r4
   20c90:	f001 fb10 	bl	222b4 <z_spin_lock_set_owner>
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20c94:	f105 000c 	add.w	r0, r5, #12
   20c98:	f000 ff24 	bl	21ae4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   20c9c:	b128      	cbz	r0, 20caa <z_impl_k_queue_cancel_wait+0x4e>
   20c9e:	2200      	movs	r2, #0
   20ca0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   20ca4:	6142      	str	r2, [r0, #20]
	z_ready_thread(thread);
   20ca6:	f000 fb09 	bl	212bc <z_ready_thread>
	z_handle_obj_poll_events(&queue->poll_events, state);
   20caa:	f105 0014 	add.w	r0, r5, #20
   20cae:	2108      	movs	r1, #8
   20cb0:	f009 fc1b 	bl	2a4ea <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   20cb4:	4631      	mov	r1, r6
   20cb6:	4620      	mov	r0, r4
}
   20cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&queue->lock, key);
   20cbc:	f000 b92c 	b.w	20f18 <z_reschedule>
   20cc0:	0002be01 	.word	0x0002be01
   20cc4:	0002bced 	.word	0x0002bced

00020cc8 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   20cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ccc:	4605      	mov	r5, r0
   20cce:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   20cd0:	460c      	mov	r4, r1
   20cd2:	2900      	cmp	r1, #0
   20cd4:	d045      	beq.n	20d62 <k_queue_append_list+0x9a>
   20cd6:	2a00      	cmp	r2, #0
   20cd8:	d043      	beq.n	20d62 <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20cda:	f100 0608 	add.w	r6, r0, #8
   20cde:	f04f 0320 	mov.w	r3, #32
   20ce2:	f3ef 8811 	mrs	r8, BASEPRI
   20ce6:	f383 8811 	msr	BASEPRI, r3
   20cea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cee:	4630      	mov	r0, r6
   20cf0:	f001 fac2 	bl	22278 <z_spin_lock_valid>
   20cf4:	b940      	cbnz	r0, 20d08 <k_queue_append_list+0x40>
   20cf6:	491c      	ldr	r1, [pc, #112]	; (20d68 <k_queue_append_list+0xa0>)
   20cf8:	481c      	ldr	r0, [pc, #112]	; (20d6c <k_queue_append_list+0xa4>)
   20cfa:	227c      	movs	r2, #124	; 0x7c
   20cfc:	f003 fa9e 	bl	2423c <printk>
   20d00:	217c      	movs	r1, #124	; 0x7c
   20d02:	4819      	ldr	r0, [pc, #100]	; (20d68 <k_queue_append_list+0xa0>)
   20d04:	f003 fd4c 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20d08:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   20d0a:	f105 090c 	add.w	r9, r5, #12
   20d0e:	f001 fad1 	bl	222b4 <z_spin_lock_set_owner>
   20d12:	4648      	mov	r0, r9
   20d14:	f000 fee6 	bl	21ae4 <z_unpend_first_thread>
   20d18:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   20d1c:	b920      	cbnz	r0, 20d28 <k_queue_append_list+0x60>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   20d1e:	686a      	ldr	r2, [r5, #4]
   20d20:	b9ca      	cbnz	r2, 20d56 <k_queue_append_list+0x8e>
	list->head = node;
   20d22:	602c      	str	r4, [r5, #0]
	list->tail = node;
   20d24:	606f      	str	r7, [r5, #4]
   20d26:	e00a      	b.n	20d3e <k_queue_append_list+0x76>
   20d28:	6144      	str	r4, [r0, #20]
   20d2a:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   20d2e:	f000 fac5 	bl	212bc <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   20d32:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   20d34:	4648      	mov	r0, r9
   20d36:	f000 fed5 	bl	21ae4 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   20d3a:	2c00      	cmp	r4, #0
   20d3c:	d1ee      	bne.n	20d1c <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   20d3e:	2104      	movs	r1, #4
   20d40:	f105 0014 	add.w	r0, r5, #20
   20d44:	f009 fbd1 	bl	2a4ea <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20d48:	4630      	mov	r0, r6
   20d4a:	4641      	mov	r1, r8
   20d4c:	f000 f8e4 	bl	20f18 <z_reschedule>
	return 0;
   20d50:	2000      	movs	r0, #0
}
   20d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20d56:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d58:	f003 0303 	and.w	r3, r3, #3
   20d5c:	431c      	orrs	r4, r3
   20d5e:	6014      	str	r4, [r2, #0]
   20d60:	e7e0      	b.n	20d24 <k_queue_append_list+0x5c>
		return -EINVAL;
   20d62:	f06f 0015 	mvn.w	r0, #21
   20d66:	e7f4      	b.n	20d52 <k_queue_append_list+0x8a>
   20d68:	0002be01 	.word	0x0002be01
   20d6c:	0002bced 	.word	0x0002bced

00020d70 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20d74:	4605      	mov	r5, r0
   20d76:	4690      	mov	r8, r2
   20d78:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20d7a:	f100 0608 	add.w	r6, r0, #8
   20d7e:	f04f 0320 	mov.w	r3, #32
   20d82:	f3ef 8711 	mrs	r7, BASEPRI
   20d86:	f383 8811 	msr	BASEPRI, r3
   20d8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d8e:	4630      	mov	r0, r6
   20d90:	f001 fa72 	bl	22278 <z_spin_lock_valid>
   20d94:	b940      	cbnz	r0, 20da8 <z_impl_k_queue_get+0x38>
   20d96:	4920      	ldr	r1, [pc, #128]	; (20e18 <z_impl_k_queue_get+0xa8>)
   20d98:	4820      	ldr	r0, [pc, #128]	; (20e1c <z_impl_k_queue_get+0xac>)
   20d9a:	227c      	movs	r2, #124	; 0x7c
   20d9c:	f003 fa4e 	bl	2423c <printk>
   20da0:	217c      	movs	r1, #124	; 0x7c
   20da2:	481d      	ldr	r0, [pc, #116]	; (20e18 <z_impl_k_queue_get+0xa8>)
   20da4:	f003 fcfc 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20da8:	4630      	mov	r0, r6
   20daa:	f001 fa83 	bl	222b4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   20dae:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20db0:	b30c      	cbz	r4, 20df6 <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20db2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20db4:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20db6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20dba:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20dbc:	4620      	mov	r0, r4
	list->head = node;
   20dbe:	602b      	str	r3, [r5, #0]
	list->tail = node;
   20dc0:	bf08      	it	eq
   20dc2:	606b      	streq	r3, [r5, #4]
   20dc4:	2101      	movs	r1, #1
   20dc6:	f009 fa14 	bl	2a1f2 <z_queue_node_peek>
   20dca:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dcc:	4630      	mov	r0, r6
   20dce:	f001 fa61 	bl	22294 <z_spin_unlock_valid>
   20dd2:	b940      	cbnz	r0, 20de6 <z_impl_k_queue_get+0x76>
   20dd4:	4910      	ldr	r1, [pc, #64]	; (20e18 <z_impl_k_queue_get+0xa8>)
   20dd6:	4811      	ldr	r0, [pc, #68]	; (20e1c <z_impl_k_queue_get+0xac>)
   20dd8:	22a7      	movs	r2, #167	; 0xa7
   20dda:	f003 fa2f 	bl	2423c <printk>
   20dde:	21a7      	movs	r1, #167	; 0xa7
   20de0:	480d      	ldr	r0, [pc, #52]	; (20e18 <z_impl_k_queue_get+0xa8>)
   20de2:	f003 fcdd 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   20de6:	f387 8811 	msr	BASEPRI, r7
   20dea:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   20dee:	4620      	mov	r0, r4
   20df0:	b003      	add	sp, #12
   20df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20df6:	ea58 0309 	orrs.w	r3, r8, r9
   20dfa:	d0e7      	beq.n	20dcc <z_impl_k_queue_get+0x5c>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20dfc:	e9cd 8900 	strd	r8, r9, [sp]
   20e00:	f105 020c 	add.w	r2, r5, #12
   20e04:	4639      	mov	r1, r7
   20e06:	4630      	mov	r0, r6
   20e08:	f000 fdca 	bl	219a0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   20e0c:	2800      	cmp	r0, #0
   20e0e:	d1ee      	bne.n	20dee <z_impl_k_queue_get+0x7e>
   20e10:	4b03      	ldr	r3, [pc, #12]	; (20e20 <z_impl_k_queue_get+0xb0>)
   20e12:	689b      	ldr	r3, [r3, #8]
   20e14:	695c      	ldr	r4, [r3, #20]
   20e16:	e7ea      	b.n	20dee <z_impl_k_queue_get+0x7e>
   20e18:	0002be01 	.word	0x0002be01
   20e1c:	0002bced 	.word	0x0002bced
   20e20:	20003490 	.word	0x20003490

00020e24 <pended_on.isra.19>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   20e24:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   20e26:	b510      	push	{r4, lr}
   20e28:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   20e2a:	b953      	cbnz	r3, 20e42 <pended_on.isra.19+0x1e>
   20e2c:	4906      	ldr	r1, [pc, #24]	; (20e48 <pended_on.isra.19+0x24>)
   20e2e:	4807      	ldr	r0, [pc, #28]	; (20e4c <pended_on.isra.19+0x28>)
   20e30:	f44f 7201 	mov.w	r2, #516	; 0x204
   20e34:	f003 fa02 	bl	2423c <printk>
   20e38:	f44f 7101 	mov.w	r1, #516	; 0x204
   20e3c:	4802      	ldr	r0, [pc, #8]	; (20e48 <pended_on.isra.19+0x24>)
   20e3e:	f003 fcaf 	bl	247a0 <assert_post_action>

	return thread->base.pended_on;
}
   20e42:	6820      	ldr	r0, [r4, #0]
   20e44:	bd10      	pop	{r4, pc}
   20e46:	bf00      	nop
   20e48:	00031a1d 	.word	0x00031a1d
   20e4c:	0002bced 	.word	0x0002bced

00020e50 <z_reset_time_slice>:
{
   20e50:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   20e52:	4c08      	ldr	r4, [pc, #32]	; (20e74 <z_reset_time_slice+0x24>)
   20e54:	6823      	ldr	r3, [r4, #0]
   20e56:	b15b      	cbz	r3, 20e70 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   20e58:	f7e5 f816 	bl	5e88 <z_clock_elapsed>
   20e5c:	6823      	ldr	r3, [r4, #0]
   20e5e:	4a06      	ldr	r2, [pc, #24]	; (20e78 <z_reset_time_slice+0x28>)
   20e60:	4418      	add	r0, r3
   20e62:	6150      	str	r0, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   20e64:	2100      	movs	r1, #0
   20e66:	4618      	mov	r0, r3
}
   20e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   20e6c:	f001 bd28 	b.w	228c0 <z_set_timeout_expiry>
}
   20e70:	bd10      	pop	{r4, pc}
   20e72:	bf00      	nop
   20e74:	200034d0 	.word	0x200034d0
   20e78:	20003490 	.word	0x20003490

00020e7c <k_sched_time_slice_set>:
{
   20e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e7e:	4607      	mov	r7, r0
   20e80:	460d      	mov	r5, r1
	__asm__ volatile(
   20e82:	f04f 0320 	mov.w	r3, #32
   20e86:	f3ef 8411 	mrs	r4, BASEPRI
   20e8a:	f383 8811 	msr	BASEPRI, r3
   20e8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e92:	481b      	ldr	r0, [pc, #108]	; (20f00 <k_sched_time_slice_set+0x84>)
   20e94:	f001 f9f0 	bl	22278 <z_spin_lock_valid>
   20e98:	b940      	cbnz	r0, 20eac <k_sched_time_slice_set+0x30>
   20e9a:	491a      	ldr	r1, [pc, #104]	; (20f04 <k_sched_time_slice_set+0x88>)
   20e9c:	481a      	ldr	r0, [pc, #104]	; (20f08 <k_sched_time_slice_set+0x8c>)
   20e9e:	227c      	movs	r2, #124	; 0x7c
   20ea0:	f003 f9cc 	bl	2423c <printk>
   20ea4:	217c      	movs	r1, #124	; 0x7c
   20ea6:	4817      	ldr	r0, [pc, #92]	; (20f04 <k_sched_time_slice_set+0x88>)
   20ea8:	f003 fc7a 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20eac:	4814      	ldr	r0, [pc, #80]	; (20f00 <k_sched_time_slice_set+0x84>)
   20eae:	f001 fa01 	bl	222b4 <z_spin_lock_set_owner>
		_current_cpu->slice_ticks = 0;
   20eb2:	4b16      	ldr	r3, [pc, #88]	; (20f0c <k_sched_time_slice_set+0x90>)
   20eb4:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   20eb6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   20eba:	f240 30e7 	movw	r0, #999	; 0x3e7
   20ebe:	2100      	movs	r1, #0
   20ec0:	615a      	str	r2, [r3, #20]
   20ec2:	fbe6 0107 	umlal	r0, r1, r6, r7
   20ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20eca:	2300      	movs	r3, #0
   20ecc:	f7e0 ffbc 	bl	1e48 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   20ed0:	4b0f      	ldr	r3, [pc, #60]	; (20f10 <k_sched_time_slice_set+0x94>)
   20ed2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   20ed4:	4b0f      	ldr	r3, [pc, #60]	; (20f14 <k_sched_time_slice_set+0x98>)
   20ed6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   20ed8:	f7ff ffba 	bl	20e50 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20edc:	4808      	ldr	r0, [pc, #32]	; (20f00 <k_sched_time_slice_set+0x84>)
   20ede:	f001 f9d9 	bl	22294 <z_spin_unlock_valid>
   20ee2:	b940      	cbnz	r0, 20ef6 <k_sched_time_slice_set+0x7a>
   20ee4:	4907      	ldr	r1, [pc, #28]	; (20f04 <k_sched_time_slice_set+0x88>)
   20ee6:	4808      	ldr	r0, [pc, #32]	; (20f08 <k_sched_time_slice_set+0x8c>)
   20ee8:	22a7      	movs	r2, #167	; 0xa7
   20eea:	f003 f9a7 	bl	2423c <printk>
   20eee:	21a7      	movs	r1, #167	; 0xa7
   20ef0:	4804      	ldr	r0, [pc, #16]	; (20f04 <k_sched_time_slice_set+0x88>)
   20ef2:	f003 fc55 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   20ef6:	f384 8811 	msr	BASEPRI, r4
   20efa:	f3bf 8f6f 	isb	sy
}
   20efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20f00:	200034c8 	.word	0x200034c8
   20f04:	0002be01 	.word	0x0002be01
   20f08:	0002bced 	.word	0x0002bced
   20f0c:	20003490 	.word	0x20003490
   20f10:	200034d0 	.word	0x200034d0
   20f14:	200034cc 	.word	0x200034cc

00020f18 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   20f18:	b510      	push	{r4, lr}
   20f1a:	4602      	mov	r2, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20f1c:	460c      	mov	r4, r1
   20f1e:	b9c1      	cbnz	r1, 20f52 <z_reschedule+0x3a>
   20f20:	f3ef 8305 	mrs	r3, IPSR
   20f24:	b9ab      	cbnz	r3, 20f52 <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   20f26:	4b14      	ldr	r3, [pc, #80]	; (20f78 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   20f28:	6a99      	ldr	r1, [r3, #40]	; 0x28
   20f2a:	689b      	ldr	r3, [r3, #8]
   20f2c:	4299      	cmp	r1, r3
   20f2e:	d010      	beq.n	20f52 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f30:	f001 f9b0 	bl	22294 <z_spin_unlock_valid>
   20f34:	b940      	cbnz	r0, 20f48 <z_reschedule+0x30>
   20f36:	4911      	ldr	r1, [pc, #68]	; (20f7c <z_reschedule+0x64>)
   20f38:	4811      	ldr	r0, [pc, #68]	; (20f80 <z_reschedule+0x68>)
   20f3a:	22be      	movs	r2, #190	; 0xbe
   20f3c:	f003 f97e 	bl	2423c <printk>
   20f40:	21be      	movs	r1, #190	; 0xbe
   20f42:	480e      	ldr	r0, [pc, #56]	; (20f7c <z_reschedule+0x64>)
   20f44:	f003 fc2c 	bl	247a0 <assert_post_action>
	ret = arch_swap(key);
   20f48:	2000      	movs	r0, #0
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   20f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20f4e:	f7e5 ba39 	b.w	63c4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f52:	4610      	mov	r0, r2
   20f54:	f001 f99e 	bl	22294 <z_spin_unlock_valid>
   20f58:	b940      	cbnz	r0, 20f6c <z_reschedule+0x54>
   20f5a:	4908      	ldr	r1, [pc, #32]	; (20f7c <z_reschedule+0x64>)
   20f5c:	4808      	ldr	r0, [pc, #32]	; (20f80 <z_reschedule+0x68>)
   20f5e:	22a7      	movs	r2, #167	; 0xa7
   20f60:	f003 f96c 	bl	2423c <printk>
   20f64:	21a7      	movs	r1, #167	; 0xa7
   20f66:	4805      	ldr	r0, [pc, #20]	; (20f7c <z_reschedule+0x64>)
   20f68:	f003 fc1a 	bl	247a0 <assert_post_action>
   20f6c:	f384 8811 	msr	BASEPRI, r4
   20f70:	f3bf 8f6f 	isb	sy
   20f74:	bd10      	pop	{r4, pc}
   20f76:	bf00      	nop
   20f78:	20003490 	.word	0x20003490
   20f7c:	0002be01 	.word	0x0002be01
   20f80:	0002bced 	.word	0x0002bced

00020f84 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   20f84:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20f86:	f04f 0320 	mov.w	r3, #32
   20f8a:	f3ef 8511 	mrs	r5, BASEPRI
   20f8e:	f383 8811 	msr	BASEPRI, r3
   20f92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f96:	4822      	ldr	r0, [pc, #136]	; (21020 <k_sched_lock+0x9c>)
   20f98:	f001 f96e 	bl	22278 <z_spin_lock_valid>
   20f9c:	b940      	cbnz	r0, 20fb0 <k_sched_lock+0x2c>
   20f9e:	4921      	ldr	r1, [pc, #132]	; (21024 <k_sched_lock+0xa0>)
   20fa0:	4821      	ldr	r0, [pc, #132]	; (21028 <k_sched_lock+0xa4>)
   20fa2:	227c      	movs	r2, #124	; 0x7c
   20fa4:	f003 f94a 	bl	2423c <printk>
   20fa8:	217c      	movs	r1, #124	; 0x7c
   20faa:	481e      	ldr	r0, [pc, #120]	; (21024 <k_sched_lock+0xa0>)
   20fac:	f003 fbf8 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   20fb0:	481b      	ldr	r0, [pc, #108]	; (21020 <k_sched_lock+0x9c>)
   20fb2:	f001 f97f 	bl	222b4 <z_spin_lock_set_owner>
   20fb6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   20fba:	b153      	cbz	r3, 20fd2 <k_sched_lock+0x4e>
   20fbc:	491b      	ldr	r1, [pc, #108]	; (2102c <k_sched_lock+0xa8>)
   20fbe:	481a      	ldr	r0, [pc, #104]	; (21028 <k_sched_lock+0xa4>)
   20fc0:	f44f 7289 	mov.w	r2, #274	; 0x112
   20fc4:	f003 f93a 	bl	2423c <printk>
   20fc8:	f44f 7189 	mov.w	r1, #274	; 0x112
   20fcc:	4817      	ldr	r0, [pc, #92]	; (2102c <k_sched_lock+0xa8>)
   20fce:	f003 fbe7 	bl	247a0 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   20fd2:	4c17      	ldr	r4, [pc, #92]	; (21030 <k_sched_lock+0xac>)
   20fd4:	68a2      	ldr	r2, [r4, #8]
   20fd6:	7bd2      	ldrb	r2, [r2, #15]
   20fd8:	2a01      	cmp	r2, #1
   20fda:	d10a      	bne.n	20ff2 <k_sched_lock+0x6e>
   20fdc:	4913      	ldr	r1, [pc, #76]	; (2102c <k_sched_lock+0xa8>)
   20fde:	4812      	ldr	r0, [pc, #72]	; (21028 <k_sched_lock+0xa4>)
   20fe0:	f240 1213 	movw	r2, #275	; 0x113
   20fe4:	f003 f92a 	bl	2423c <printk>
   20fe8:	f240 1113 	movw	r1, #275	; 0x113
   20fec:	480f      	ldr	r0, [pc, #60]	; (2102c <k_sched_lock+0xa8>)
   20fee:	f003 fbd7 	bl	247a0 <assert_post_action>
	--_current->base.sched_locked;
   20ff2:	68a2      	ldr	r2, [r4, #8]
   20ff4:	7bd3      	ldrb	r3, [r2, #15]
   20ff6:	3b01      	subs	r3, #1
   20ff8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ffa:	4809      	ldr	r0, [pc, #36]	; (21020 <k_sched_lock+0x9c>)
   20ffc:	f001 f94a 	bl	22294 <z_spin_unlock_valid>
   21000:	b940      	cbnz	r0, 21014 <k_sched_lock+0x90>
   21002:	4908      	ldr	r1, [pc, #32]	; (21024 <k_sched_lock+0xa0>)
   21004:	4808      	ldr	r0, [pc, #32]	; (21028 <k_sched_lock+0xa4>)
   21006:	22a7      	movs	r2, #167	; 0xa7
   21008:	f003 f918 	bl	2423c <printk>
   2100c:	21a7      	movs	r1, #167	; 0xa7
   2100e:	4805      	ldr	r0, [pc, #20]	; (21024 <k_sched_lock+0xa0>)
   21010:	f003 fbc6 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21014:	f385 8811 	msr	BASEPRI, r5
   21018:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   2101c:	bd38      	pop	{r3, r4, r5, pc}
   2101e:	bf00      	nop
   21020:	200034c8 	.word	0x200034c8
   21024:	0002be01 	.word	0x0002be01
   21028:	0002bced 	.word	0x0002bced
   2102c:	000319f2 	.word	0x000319f2
   21030:	20003490 	.word	0x20003490

00021034 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   21034:	4b11      	ldr	r3, [pc, #68]	; (2107c <z_priq_dumb_remove+0x48>)
   21036:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   2103a:	4282      	cmp	r2, r0
{
   2103c:	b510      	push	{r4, lr}
   2103e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   21040:	d105      	bne.n	2104e <z_priq_dumb_remove+0x1a>
   21042:	689b      	ldr	r3, [r3, #8]
   21044:	428b      	cmp	r3, r1
   21046:	d102      	bne.n	2104e <z_priq_dumb_remove+0x1a>
   21048:	7b4b      	ldrb	r3, [r1, #13]
   2104a:	06db      	lsls	r3, r3, #27
   2104c:	d114      	bne.n	21078 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2104e:	4b0c      	ldr	r3, [pc, #48]	; (21080 <z_priq_dumb_remove+0x4c>)
   21050:	429c      	cmp	r4, r3
   21052:	d10a      	bne.n	2106a <z_priq_dumb_remove+0x36>
   21054:	490b      	ldr	r1, [pc, #44]	; (21084 <z_priq_dumb_remove+0x50>)
   21056:	480c      	ldr	r0, [pc, #48]	; (21088 <z_priq_dumb_remove+0x54>)
   21058:	f240 32da 	movw	r2, #986	; 0x3da
   2105c:	f003 f8ee 	bl	2423c <printk>
   21060:	f240 31da 	movw	r1, #986	; 0x3da
   21064:	4807      	ldr	r0, [pc, #28]	; (21084 <z_priq_dumb_remove+0x50>)
   21066:	f003 fb9b 	bl	247a0 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2106a:	e9d4 3200 	ldrd	r3, r2, [r4]
   2106e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   21070:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21072:	2300      	movs	r3, #0
	node->prev = NULL;
   21074:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   21078:	bd10      	pop	{r4, pc}
   2107a:	bf00      	nop
   2107c:	20003490 	.word	0x20003490
   21080:	20001868 	.word	0x20001868
   21084:	00031a1d 	.word	0x00031a1d
   21088:	0002bced 	.word	0x0002bced

0002108c <z_unpend_thread>:
{
   2108c:	b538      	push	{r3, r4, r5, lr}
   2108e:	4604      	mov	r4, r0
	__asm__ volatile(
   21090:	f04f 0320 	mov.w	r3, #32
   21094:	f3ef 8511 	mrs	r5, BASEPRI
   21098:	f383 8811 	msr	BASEPRI, r3
   2109c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   210a0:	4814      	ldr	r0, [pc, #80]	; (210f4 <z_unpend_thread+0x68>)
   210a2:	f001 f8e9 	bl	22278 <z_spin_lock_valid>
   210a6:	b940      	cbnz	r0, 210ba <z_unpend_thread+0x2e>
   210a8:	4913      	ldr	r1, [pc, #76]	; (210f8 <z_unpend_thread+0x6c>)
   210aa:	4814      	ldr	r0, [pc, #80]	; (210fc <z_unpend_thread+0x70>)
   210ac:	227c      	movs	r2, #124	; 0x7c
   210ae:	f003 f8c5 	bl	2423c <printk>
   210b2:	217c      	movs	r1, #124	; 0x7c
   210b4:	4810      	ldr	r0, [pc, #64]	; (210f8 <z_unpend_thread+0x6c>)
   210b6:	f003 fb73 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   210ba:	480e      	ldr	r0, [pc, #56]	; (210f4 <z_unpend_thread+0x68>)
   210bc:	f001 f8fa 	bl	222b4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   210c0:	4620      	mov	r0, r4
   210c2:	f009 f8e3 	bl	2a28c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210c6:	480b      	ldr	r0, [pc, #44]	; (210f4 <z_unpend_thread+0x68>)
   210c8:	f001 f8e4 	bl	22294 <z_spin_unlock_valid>
   210cc:	b940      	cbnz	r0, 210e0 <z_unpend_thread+0x54>
   210ce:	490a      	ldr	r1, [pc, #40]	; (210f8 <z_unpend_thread+0x6c>)
   210d0:	480a      	ldr	r0, [pc, #40]	; (210fc <z_unpend_thread+0x70>)
   210d2:	22a7      	movs	r2, #167	; 0xa7
   210d4:	f003 f8b2 	bl	2423c <printk>
   210d8:	21a7      	movs	r1, #167	; 0xa7
   210da:	4807      	ldr	r0, [pc, #28]	; (210f8 <z_unpend_thread+0x6c>)
   210dc:	f003 fb60 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   210e0:	f385 8811 	msr	BASEPRI, r5
   210e4:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   210e8:	f104 0018 	add.w	r0, r4, #24
}
   210ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   210f0:	f001 bb3a 	b.w	22768 <z_abort_timeout>
   210f4:	200034c8 	.word	0x200034c8
   210f8:	0002be01 	.word	0x0002be01
   210fc:	0002bced 	.word	0x0002bced

00021100 <update_cache>:
{
   21100:	b538      	push	{r3, r4, r5, lr}
   21102:	4c19      	ldr	r4, [pc, #100]	; (21168 <update_cache+0x68>)
	if (_current_cpu->pending_abort != NULL) {
   21104:	6923      	ldr	r3, [r4, #16]
   21106:	68a2      	ldr	r2, [r4, #8]
{
   21108:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   2110a:	b143      	cbz	r3, 2111e <update_cache+0x1e>
		return _current_cpu->idle_thread;
   2110c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   2110e:	b1a8      	cbz	r0, 2113c <update_cache+0x3c>
		if (thread != _current) {
   21110:	68a3      	ldr	r3, [r4, #8]
   21112:	42ab      	cmp	r3, r5
   21114:	d001      	beq.n	2111a <update_cache+0x1a>
			z_reset_time_slice();
   21116:	f7ff fe9b 	bl	20e50 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2111a:	62a5      	str	r5, [r4, #40]	; 0x28
}
   2111c:	e023      	b.n	21166 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   2111e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   21122:	f009 f8c2 	bl	2a2aa <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   21126:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   21128:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   2112a:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   2112c:	bf44      	itt	mi
   2112e:	f043 0308 	orrmi.w	r3, r3, #8
   21132:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   21134:	b905      	cbnz	r5, 21138 <update_cache+0x38>
   21136:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   21138:	b151      	cbz	r1, 21150 <update_cache+0x50>
   2113a:	e7e9      	b.n	21110 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   2113c:	b942      	cbnz	r2, 21150 <update_cache+0x50>
   2113e:	490b      	ldr	r1, [pc, #44]	; (2116c <update_cache+0x6c>)
   21140:	480b      	ldr	r0, [pc, #44]	; (21170 <update_cache+0x70>)
   21142:	2283      	movs	r2, #131	; 0x83
   21144:	f003 f87a 	bl	2423c <printk>
   21148:	2183      	movs	r1, #131	; 0x83
   2114a:	4808      	ldr	r0, [pc, #32]	; (2116c <update_cache+0x6c>)
   2114c:	f003 fb28 	bl	247a0 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   21150:	68a3      	ldr	r3, [r4, #8]
   21152:	7b5a      	ldrb	r2, [r3, #13]
   21154:	06d2      	lsls	r2, r2, #27
   21156:	d1db      	bne.n	21110 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21158:	69aa      	ldr	r2, [r5, #24]
   2115a:	2a00      	cmp	r2, #0
   2115c:	d1d8      	bne.n	21110 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   2115e:	89da      	ldrh	r2, [r3, #14]
   21160:	2a7f      	cmp	r2, #127	; 0x7f
   21162:	d9d5      	bls.n	21110 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   21164:	62a3      	str	r3, [r4, #40]	; 0x28
}
   21166:	bd38      	pop	{r3, r4, r5, pc}
   21168:	20003490 	.word	0x20003490
   2116c:	00031a1d 	.word	0x00031a1d
   21170:	0002bced 	.word	0x0002bced

00021174 <k_sched_unlock>:
{
   21174:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21176:	f04f 0320 	mov.w	r3, #32
   2117a:	f3ef 8511 	mrs	r5, BASEPRI
   2117e:	f383 8811 	msr	BASEPRI, r3
   21182:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21186:	4824      	ldr	r0, [pc, #144]	; (21218 <k_sched_unlock+0xa4>)
   21188:	f001 f876 	bl	22278 <z_spin_lock_valid>
   2118c:	b940      	cbnz	r0, 211a0 <k_sched_unlock+0x2c>
   2118e:	4923      	ldr	r1, [pc, #140]	; (2121c <k_sched_unlock+0xa8>)
   21190:	4823      	ldr	r0, [pc, #140]	; (21220 <k_sched_unlock+0xac>)
   21192:	227c      	movs	r2, #124	; 0x7c
   21194:	f003 f852 	bl	2423c <printk>
   21198:	217c      	movs	r1, #124	; 0x7c
   2119a:	4820      	ldr	r0, [pc, #128]	; (2121c <k_sched_unlock+0xa8>)
   2119c:	f003 fb00 	bl	247a0 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   211a0:	4c20      	ldr	r4, [pc, #128]	; (21224 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   211a2:	481d      	ldr	r0, [pc, #116]	; (21218 <k_sched_unlock+0xa4>)
   211a4:	f001 f886 	bl	222b4 <z_spin_lock_set_owner>
   211a8:	68a2      	ldr	r2, [r4, #8]
   211aa:	7bd2      	ldrb	r2, [r2, #15]
   211ac:	b952      	cbnz	r2, 211c4 <k_sched_unlock+0x50>
   211ae:	491e      	ldr	r1, [pc, #120]	; (21228 <k_sched_unlock+0xb4>)
   211b0:	481b      	ldr	r0, [pc, #108]	; (21220 <k_sched_unlock+0xac>)
   211b2:	f44f 725d 	mov.w	r2, #884	; 0x374
   211b6:	f003 f841 	bl	2423c <printk>
   211ba:	f44f 715d 	mov.w	r1, #884	; 0x374
   211be:	481a      	ldr	r0, [pc, #104]	; (21228 <k_sched_unlock+0xb4>)
   211c0:	f003 faee 	bl	247a0 <assert_post_action>
   211c4:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   211c8:	b153      	cbz	r3, 211e0 <k_sched_unlock+0x6c>
   211ca:	4917      	ldr	r1, [pc, #92]	; (21228 <k_sched_unlock+0xb4>)
   211cc:	4814      	ldr	r0, [pc, #80]	; (21220 <k_sched_unlock+0xac>)
   211ce:	f240 3275 	movw	r2, #885	; 0x375
   211d2:	f003 f833 	bl	2423c <printk>
   211d6:	f240 3175 	movw	r1, #885	; 0x375
   211da:	4813      	ldr	r0, [pc, #76]	; (21228 <k_sched_unlock+0xb4>)
   211dc:	f003 fae0 	bl	247a0 <assert_post_action>
		++_current->base.sched_locked;
   211e0:	68a2      	ldr	r2, [r4, #8]
   211e2:	7bd3      	ldrb	r3, [r2, #15]
   211e4:	3301      	adds	r3, #1
		update_cache(0);
   211e6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   211e8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   211ea:	f7ff ff89 	bl	21100 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211ee:	480a      	ldr	r0, [pc, #40]	; (21218 <k_sched_unlock+0xa4>)
   211f0:	f001 f850 	bl	22294 <z_spin_unlock_valid>
   211f4:	b940      	cbnz	r0, 21208 <k_sched_unlock+0x94>
   211f6:	4909      	ldr	r1, [pc, #36]	; (2121c <k_sched_unlock+0xa8>)
   211f8:	4809      	ldr	r0, [pc, #36]	; (21220 <k_sched_unlock+0xac>)
   211fa:	22a7      	movs	r2, #167	; 0xa7
   211fc:	f003 f81e 	bl	2423c <printk>
   21200:	21a7      	movs	r1, #167	; 0xa7
   21202:	4806      	ldr	r0, [pc, #24]	; (2121c <k_sched_unlock+0xa8>)
   21204:	f003 facc 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21208:	f385 8811 	msr	BASEPRI, r5
   2120c:	f3bf 8f6f 	isb	sy
}
   21210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   21214:	f009 b830 	b.w	2a278 <z_reschedule_unlocked>
   21218:	200034c8 	.word	0x200034c8
   2121c:	0002be01 	.word	0x0002be01
   21220:	0002bced 	.word	0x0002bced
   21224:	20003490 	.word	0x20003490
   21228:	00031a1d 	.word	0x00031a1d

0002122c <ready_thread>:
{
   2122c:	b570      	push	{r4, r5, r6, lr}
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2122e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21230:	061a      	lsls	r2, r3, #24
{
   21232:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21234:	d439      	bmi.n	212aa <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21236:	06db      	lsls	r3, r3, #27
   21238:	d137      	bne.n	212aa <ready_thread+0x7e>
   2123a:	6983      	ldr	r3, [r0, #24]
   2123c:	2b00      	cmp	r3, #0
   2123e:	d134      	bne.n	212aa <ready_thread+0x7e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21240:	4b1a      	ldr	r3, [pc, #104]	; (212ac <ready_thread+0x80>)
   21242:	4298      	cmp	r0, r3
   21244:	d10a      	bne.n	2125c <ready_thread+0x30>
   21246:	491a      	ldr	r1, [pc, #104]	; (212b0 <ready_thread+0x84>)
   21248:	481a      	ldr	r0, [pc, #104]	; (212b4 <ready_thread+0x88>)
   2124a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   2124e:	f002 fff5 	bl	2423c <printk>
   21252:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   21256:	4816      	ldr	r0, [pc, #88]	; (212b0 <ready_thread+0x84>)
   21258:	f003 faa2 	bl	247a0 <assert_post_action>
	return list->head == list;
   2125c:	4a16      	ldr	r2, [pc, #88]	; (212b8 <ready_thread+0x8c>)
   2125e:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21262:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   21266:	428b      	cmp	r3, r1
   21268:	d019      	beq.n	2129e <ready_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2126a:	b1c3      	cbz	r3, 2129e <ready_thread+0x72>
	if (thread_1->base.prio < thread_2->base.prio) {
   2126c:	f994 500e 	ldrsb.w	r5, [r4, #14]
   21270:	f993 600e 	ldrsb.w	r6, [r3, #14]
   21274:	42ae      	cmp	r6, r5
   21276:	dd0d      	ble.n	21294 <ready_thread+0x68>
	node->prev = successor->prev;
   21278:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2127a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2127e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21280:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   21282:	7b63      	ldrb	r3, [r4, #13]
   21284:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21288:	7363      	strb	r3, [r4, #13]
		update_cache(0);
   2128a:	2000      	movs	r0, #0
}
   2128c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   21290:	f7ff bf36 	b.w	21100 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21294:	4298      	cmp	r0, r3
   21296:	d002      	beq.n	2129e <ready_thread+0x72>
   21298:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2129a:	2b00      	cmp	r3, #0
   2129c:	d1e8      	bne.n	21270 <ready_thread+0x44>
	node->prev = list->tail;
   2129e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   212a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   212a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   212a6:	6314      	str	r4, [r2, #48]	; 0x30
   212a8:	e7eb      	b.n	21282 <ready_thread+0x56>
}
   212aa:	bd70      	pop	{r4, r5, r6, pc}
   212ac:	20001868 	.word	0x20001868
   212b0:	00031a1d 	.word	0x00031a1d
   212b4:	0002bced 	.word	0x0002bced
   212b8:	20003490 	.word	0x20003490

000212bc <z_ready_thread>:
{
   212bc:	b538      	push	{r3, r4, r5, lr}
   212be:	4605      	mov	r5, r0
	__asm__ volatile(
   212c0:	f04f 0320 	mov.w	r3, #32
   212c4:	f3ef 8411 	mrs	r4, BASEPRI
   212c8:	f383 8811 	msr	BASEPRI, r3
   212cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   212d0:	4812      	ldr	r0, [pc, #72]	; (2131c <z_ready_thread+0x60>)
   212d2:	f000 ffd1 	bl	22278 <z_spin_lock_valid>
   212d6:	b940      	cbnz	r0, 212ea <z_ready_thread+0x2e>
   212d8:	4911      	ldr	r1, [pc, #68]	; (21320 <z_ready_thread+0x64>)
   212da:	4812      	ldr	r0, [pc, #72]	; (21324 <z_ready_thread+0x68>)
   212dc:	227c      	movs	r2, #124	; 0x7c
   212de:	f002 ffad 	bl	2423c <printk>
   212e2:	217c      	movs	r1, #124	; 0x7c
   212e4:	480e      	ldr	r0, [pc, #56]	; (21320 <z_ready_thread+0x64>)
   212e6:	f003 fa5b 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   212ea:	480c      	ldr	r0, [pc, #48]	; (2131c <z_ready_thread+0x60>)
   212ec:	f000 ffe2 	bl	222b4 <z_spin_lock_set_owner>
		ready_thread(thread);
   212f0:	4628      	mov	r0, r5
   212f2:	f7ff ff9b 	bl	2122c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212f6:	4809      	ldr	r0, [pc, #36]	; (2131c <z_ready_thread+0x60>)
   212f8:	f000 ffcc 	bl	22294 <z_spin_unlock_valid>
   212fc:	b940      	cbnz	r0, 21310 <z_ready_thread+0x54>
   212fe:	4908      	ldr	r1, [pc, #32]	; (21320 <z_ready_thread+0x64>)
   21300:	4808      	ldr	r0, [pc, #32]	; (21324 <z_ready_thread+0x68>)
   21302:	22a7      	movs	r2, #167	; 0xa7
   21304:	f002 ff9a 	bl	2423c <printk>
   21308:	21a7      	movs	r1, #167	; 0xa7
   2130a:	4805      	ldr	r0, [pc, #20]	; (21320 <z_ready_thread+0x64>)
   2130c:	f003 fa48 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21310:	f384 8811 	msr	BASEPRI, r4
   21314:	f3bf 8f6f 	isb	sy
}
   21318:	bd38      	pop	{r3, r4, r5, pc}
   2131a:	bf00      	nop
   2131c:	200034c8 	.word	0x200034c8
   21320:	0002be01 	.word	0x0002be01
   21324:	0002bced 	.word	0x0002bced

00021328 <z_sched_start>:
{
   21328:	b538      	push	{r3, r4, r5, lr}
   2132a:	4604      	mov	r4, r0
	__asm__ volatile(
   2132c:	f04f 0320 	mov.w	r3, #32
   21330:	f3ef 8511 	mrs	r5, BASEPRI
   21334:	f383 8811 	msr	BASEPRI, r3
   21338:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2133c:	4818      	ldr	r0, [pc, #96]	; (213a0 <z_sched_start+0x78>)
   2133e:	f000 ff9b 	bl	22278 <z_spin_lock_valid>
   21342:	b940      	cbnz	r0, 21356 <z_sched_start+0x2e>
   21344:	4917      	ldr	r1, [pc, #92]	; (213a4 <z_sched_start+0x7c>)
   21346:	4818      	ldr	r0, [pc, #96]	; (213a8 <z_sched_start+0x80>)
   21348:	227c      	movs	r2, #124	; 0x7c
   2134a:	f002 ff77 	bl	2423c <printk>
   2134e:	217c      	movs	r1, #124	; 0x7c
   21350:	4814      	ldr	r0, [pc, #80]	; (213a4 <z_sched_start+0x7c>)
   21352:	f003 fa25 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21356:	4812      	ldr	r0, [pc, #72]	; (213a0 <z_sched_start+0x78>)
   21358:	f000 ffac 	bl	222b4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2135c:	7b63      	ldrb	r3, [r4, #13]
   2135e:	075a      	lsls	r2, r3, #29
   21360:	d411      	bmi.n	21386 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21362:	480f      	ldr	r0, [pc, #60]	; (213a0 <z_sched_start+0x78>)
   21364:	f000 ff96 	bl	22294 <z_spin_unlock_valid>
   21368:	b940      	cbnz	r0, 2137c <z_sched_start+0x54>
   2136a:	490e      	ldr	r1, [pc, #56]	; (213a4 <z_sched_start+0x7c>)
   2136c:	480e      	ldr	r0, [pc, #56]	; (213a8 <z_sched_start+0x80>)
   2136e:	22a7      	movs	r2, #167	; 0xa7
   21370:	f002 ff64 	bl	2423c <printk>
   21374:	21a7      	movs	r1, #167	; 0xa7
   21376:	480b      	ldr	r0, [pc, #44]	; (213a4 <z_sched_start+0x7c>)
   21378:	f003 fa12 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   2137c:	f385 8811 	msr	BASEPRI, r5
   21380:	f3bf 8f6f 	isb	sy
}
   21384:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21386:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2138a:	4620      	mov	r0, r4
   2138c:	7363      	strb	r3, [r4, #13]
   2138e:	f7ff ff4d 	bl	2122c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21392:	4629      	mov	r1, r5
   21394:	4802      	ldr	r0, [pc, #8]	; (213a0 <z_sched_start+0x78>)
}
   21396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2139a:	f7ff bdbd 	b.w	20f18 <z_reschedule>
   2139e:	bf00      	nop
   213a0:	200034c8 	.word	0x200034c8
   213a4:	0002be01 	.word	0x0002be01
   213a8:	0002bced 	.word	0x0002bced

000213ac <z_thread_timeout>:
{
   213ac:	b570      	push	{r4, r5, r6, lr}
   213ae:	4604      	mov	r4, r0
	__asm__ volatile(
   213b0:	f04f 0320 	mov.w	r3, #32
   213b4:	f3ef 8611 	mrs	r6, BASEPRI
   213b8:	f383 8811 	msr	BASEPRI, r3
   213bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   213c0:	4819      	ldr	r0, [pc, #100]	; (21428 <z_thread_timeout+0x7c>)
   213c2:	f000 ff59 	bl	22278 <z_spin_lock_valid>
   213c6:	b940      	cbnz	r0, 213da <z_thread_timeout+0x2e>
   213c8:	4918      	ldr	r1, [pc, #96]	; (2142c <z_thread_timeout+0x80>)
   213ca:	4819      	ldr	r0, [pc, #100]	; (21430 <z_thread_timeout+0x84>)
   213cc:	227c      	movs	r2, #124	; 0x7c
   213ce:	f002 ff35 	bl	2423c <printk>
   213d2:	217c      	movs	r1, #124	; 0x7c
   213d4:	4815      	ldr	r0, [pc, #84]	; (2142c <z_thread_timeout+0x80>)
   213d6:	f003 f9e3 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   213da:	4813      	ldr	r0, [pc, #76]	; (21428 <z_thread_timeout+0x7c>)
   213dc:	f000 ff6a 	bl	222b4 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   213e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   213e4:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   213e8:	b113      	cbz	r3, 213f0 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   213ea:	4628      	mov	r0, r5
   213ec:	f008 ff4e 	bl	2a28c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   213f0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   213f4:	f023 0314 	bic.w	r3, r3, #20
		ready_thread(thread);
   213f8:	4628      	mov	r0, r5
   213fa:	f804 3c0b 	strb.w	r3, [r4, #-11]
   213fe:	f7ff ff15 	bl	2122c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21402:	4809      	ldr	r0, [pc, #36]	; (21428 <z_thread_timeout+0x7c>)
   21404:	f000 ff46 	bl	22294 <z_spin_unlock_valid>
   21408:	b940      	cbnz	r0, 2141c <z_thread_timeout+0x70>
   2140a:	4908      	ldr	r1, [pc, #32]	; (2142c <z_thread_timeout+0x80>)
   2140c:	4808      	ldr	r0, [pc, #32]	; (21430 <z_thread_timeout+0x84>)
   2140e:	22a7      	movs	r2, #167	; 0xa7
   21410:	f002 ff14 	bl	2423c <printk>
   21414:	21a7      	movs	r1, #167	; 0xa7
   21416:	4805      	ldr	r0, [pc, #20]	; (2142c <z_thread_timeout+0x80>)
   21418:	f003 f9c2 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   2141c:	f386 8811 	msr	BASEPRI, r6
   21420:	f3bf 8f6f 	isb	sy
}
   21424:	bd70      	pop	{r4, r5, r6, pc}
   21426:	bf00      	nop
   21428:	200034c8 	.word	0x200034c8
   2142c:	0002be01 	.word	0x0002be01
   21430:	0002bced 	.word	0x0002bced

00021434 <move_thread_to_end_of_prio_q>:
{
   21434:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21436:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2143a:	2b00      	cmp	r3, #0
{
   2143c:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   2143e:	da03      	bge.n	21448 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   21440:	4601      	mov	r1, r0
   21442:	481d      	ldr	r0, [pc, #116]	; (214b8 <move_thread_to_end_of_prio_q+0x84>)
   21444:	f7ff fdf6 	bl	21034 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21448:	4b1c      	ldr	r3, [pc, #112]	; (214bc <move_thread_to_end_of_prio_q+0x88>)
   2144a:	429c      	cmp	r4, r3
   2144c:	d10a      	bne.n	21464 <move_thread_to_end_of_prio_q+0x30>
   2144e:	491c      	ldr	r1, [pc, #112]	; (214c0 <move_thread_to_end_of_prio_q+0x8c>)
   21450:	481c      	ldr	r0, [pc, #112]	; (214c4 <move_thread_to_end_of_prio_q+0x90>)
   21452:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   21456:	f002 fef1 	bl	2423c <printk>
   2145a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   2145e:	4818      	ldr	r0, [pc, #96]	; (214c0 <move_thread_to_end_of_prio_q+0x8c>)
   21460:	f003 f99e 	bl	247a0 <assert_post_action>
	return list->head == list;
   21464:	4a18      	ldr	r2, [pc, #96]	; (214c8 <move_thread_to_end_of_prio_q+0x94>)
   21466:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2146a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   2146e:	428b      	cmp	r3, r1
   21470:	d01c      	beq.n	214ac <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21472:	b1db      	cbz	r3, 214ac <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   21474:	f994 500e 	ldrsb.w	r5, [r4, #14]
   21478:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2147c:	42ae      	cmp	r6, r5
   2147e:	dd10      	ble.n	214a2 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   21480:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   21482:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   21486:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   21488:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   2148a:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   2148c:	6890      	ldr	r0, [r2, #8]
   2148e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21492:	7363      	strb	r3, [r4, #13]
   21494:	1b03      	subs	r3, r0, r4
   21496:	4258      	negs	r0, r3
   21498:	4158      	adcs	r0, r3
}
   2149a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2149e:	f7ff be2f 	b.w	21100 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   214a2:	4298      	cmp	r0, r3
   214a4:	d002      	beq.n	214ac <move_thread_to_end_of_prio_q+0x78>
   214a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   214a8:	2b00      	cmp	r3, #0
   214aa:	d1e5      	bne.n	21478 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   214ac:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   214b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   214b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   214b4:	6314      	str	r4, [r2, #48]	; 0x30
   214b6:	e7e8      	b.n	2148a <move_thread_to_end_of_prio_q+0x56>
   214b8:	200034bc 	.word	0x200034bc
   214bc:	20001868 	.word	0x20001868
   214c0:	00031a1d 	.word	0x00031a1d
   214c4:	0002bced 	.word	0x0002bced
   214c8:	20003490 	.word	0x20003490

000214cc <z_time_slice>:
{
   214cc:	b570      	push	{r4, r5, r6, lr}
   214ce:	4605      	mov	r5, r0
	__asm__ volatile(
   214d0:	f04f 0320 	mov.w	r3, #32
   214d4:	f3ef 8411 	mrs	r4, BASEPRI
   214d8:	f383 8811 	msr	BASEPRI, r3
   214dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214e0:	4825      	ldr	r0, [pc, #148]	; (21578 <z_time_slice+0xac>)
   214e2:	f000 fec9 	bl	22278 <z_spin_lock_valid>
   214e6:	b940      	cbnz	r0, 214fa <z_time_slice+0x2e>
   214e8:	4924      	ldr	r1, [pc, #144]	; (2157c <z_time_slice+0xb0>)
   214ea:	4825      	ldr	r0, [pc, #148]	; (21580 <z_time_slice+0xb4>)
   214ec:	227c      	movs	r2, #124	; 0x7c
   214ee:	f002 fea5 	bl	2423c <printk>
   214f2:	217c      	movs	r1, #124	; 0x7c
   214f4:	4821      	ldr	r0, [pc, #132]	; (2157c <z_time_slice+0xb0>)
   214f6:	f003 f953 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   214fa:	481f      	ldr	r0, [pc, #124]	; (21578 <z_time_slice+0xac>)
   214fc:	f000 feda 	bl	222b4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   21500:	4b20      	ldr	r3, [pc, #128]	; (21584 <z_time_slice+0xb8>)
   21502:	4a21      	ldr	r2, [pc, #132]	; (21588 <z_time_slice+0xbc>)
   21504:	6898      	ldr	r0, [r3, #8]
   21506:	6811      	ldr	r1, [r2, #0]
   21508:	4288      	cmp	r0, r1
   2150a:	4619      	mov	r1, r3
   2150c:	d113      	bne.n	21536 <z_time_slice+0x6a>
			z_reset_time_slice();
   2150e:	f7ff fc9f 	bl	20e50 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21512:	4819      	ldr	r0, [pc, #100]	; (21578 <z_time_slice+0xac>)
   21514:	f000 febe 	bl	22294 <z_spin_unlock_valid>
   21518:	b940      	cbnz	r0, 2152c <z_time_slice+0x60>
   2151a:	4918      	ldr	r1, [pc, #96]	; (2157c <z_time_slice+0xb0>)
   2151c:	4818      	ldr	r0, [pc, #96]	; (21580 <z_time_slice+0xb4>)
   2151e:	22a7      	movs	r2, #167	; 0xa7
   21520:	f002 fe8c 	bl	2423c <printk>
   21524:	21a7      	movs	r1, #167	; 0xa7
   21526:	4815      	ldr	r0, [pc, #84]	; (2157c <z_time_slice+0xb0>)
   21528:	f003 f93a 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   2152c:	f384 8811 	msr	BASEPRI, r4
   21530:	f3bf 8f6f 	isb	sy
}
   21534:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   21536:	2600      	movs	r6, #0
   21538:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2153a:	4a14      	ldr	r2, [pc, #80]	; (2158c <z_time_slice+0xc0>)
   2153c:	6812      	ldr	r2, [r2, #0]
   2153e:	b1ba      	cbz	r2, 21570 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   21540:	89c2      	ldrh	r2, [r0, #14]
   21542:	2a7f      	cmp	r2, #127	; 0x7f
   21544:	d814      	bhi.n	21570 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   21546:	7b42      	ldrb	r2, [r0, #13]
   21548:	06d2      	lsls	r2, r2, #27
   2154a:	d111      	bne.n	21570 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2154c:	4a10      	ldr	r2, [pc, #64]	; (21590 <z_time_slice+0xc4>)
   2154e:	f990 600e 	ldrsb.w	r6, [r0, #14]
   21552:	6812      	ldr	r2, [r2, #0]
   21554:	4296      	cmp	r6, r2
   21556:	db0b      	blt.n	21570 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   21558:	4a0e      	ldr	r2, [pc, #56]	; (21594 <z_time_slice+0xc8>)
   2155a:	4290      	cmp	r0, r2
   2155c:	d008      	beq.n	21570 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   2155e:	695a      	ldr	r2, [r3, #20]
   21560:	42aa      	cmp	r2, r5
   21562:	dc02      	bgt.n	2156a <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   21564:	f7ff ff66 	bl	21434 <move_thread_to_end_of_prio_q>
   21568:	e7d1      	b.n	2150e <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   2156a:	1b52      	subs	r2, r2, r5
   2156c:	615a      	str	r2, [r3, #20]
   2156e:	e7d0      	b.n	21512 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   21570:	2300      	movs	r3, #0
   21572:	614b      	str	r3, [r1, #20]
   21574:	e7cd      	b.n	21512 <z_time_slice+0x46>
   21576:	bf00      	nop
   21578:	200034c8 	.word	0x200034c8
   2157c:	0002be01 	.word	0x0002be01
   21580:	0002bced 	.word	0x0002bced
   21584:	20003490 	.word	0x20003490
   21588:	200034c4 	.word	0x200034c4
   2158c:	200034d0 	.word	0x200034d0
   21590:	200034cc 	.word	0x200034cc
   21594:	20001868 	.word	0x20001868

00021598 <z_impl_k_thread_suspend>:
{
   21598:	b570      	push	{r4, r5, r6, lr}
   2159a:	4604      	mov	r4, r0
   2159c:	3018      	adds	r0, #24
   2159e:	f001 f8e3 	bl	22768 <z_abort_timeout>
	__asm__ volatile(
   215a2:	f04f 0320 	mov.w	r3, #32
   215a6:	f3ef 8611 	mrs	r6, BASEPRI
   215aa:	f383 8811 	msr	BASEPRI, r3
   215ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   215b2:	4820      	ldr	r0, [pc, #128]	; (21634 <z_impl_k_thread_suspend+0x9c>)
   215b4:	f000 fe60 	bl	22278 <z_spin_lock_valid>
   215b8:	b940      	cbnz	r0, 215cc <z_impl_k_thread_suspend+0x34>
   215ba:	491f      	ldr	r1, [pc, #124]	; (21638 <z_impl_k_thread_suspend+0xa0>)
   215bc:	481f      	ldr	r0, [pc, #124]	; (2163c <z_impl_k_thread_suspend+0xa4>)
   215be:	227c      	movs	r2, #124	; 0x7c
   215c0:	f002 fe3c 	bl	2423c <printk>
   215c4:	217c      	movs	r1, #124	; 0x7c
   215c6:	481c      	ldr	r0, [pc, #112]	; (21638 <z_impl_k_thread_suspend+0xa0>)
   215c8:	f003 f8ea 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   215cc:	4819      	ldr	r0, [pc, #100]	; (21634 <z_impl_k_thread_suspend+0x9c>)
   215ce:	f000 fe71 	bl	222b4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   215d2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   215d6:	2b00      	cmp	r3, #0
   215d8:	da07      	bge.n	215ea <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   215da:	4621      	mov	r1, r4
   215dc:	4818      	ldr	r0, [pc, #96]	; (21640 <z_impl_k_thread_suspend+0xa8>)
   215de:	f7ff fd29 	bl	21034 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   215e2:	7b63      	ldrb	r3, [r4, #13]
   215e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   215e8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   215ea:	4d16      	ldr	r5, [pc, #88]	; (21644 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   215ec:	7b63      	ldrb	r3, [r4, #13]
   215ee:	68a8      	ldr	r0, [r5, #8]
   215f0:	f043 0310 	orr.w	r3, r3, #16
   215f4:	7363      	strb	r3, [r4, #13]
   215f6:	1b03      	subs	r3, r0, r4
   215f8:	4258      	negs	r0, r3
   215fa:	4158      	adcs	r0, r3
   215fc:	f7ff fd80 	bl	21100 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21600:	480c      	ldr	r0, [pc, #48]	; (21634 <z_impl_k_thread_suspend+0x9c>)
   21602:	f000 fe47 	bl	22294 <z_spin_unlock_valid>
   21606:	b940      	cbnz	r0, 2161a <z_impl_k_thread_suspend+0x82>
   21608:	490b      	ldr	r1, [pc, #44]	; (21638 <z_impl_k_thread_suspend+0xa0>)
   2160a:	480c      	ldr	r0, [pc, #48]	; (2163c <z_impl_k_thread_suspend+0xa4>)
   2160c:	22a7      	movs	r2, #167	; 0xa7
   2160e:	f002 fe15 	bl	2423c <printk>
   21612:	21a7      	movs	r1, #167	; 0xa7
   21614:	4808      	ldr	r0, [pc, #32]	; (21638 <z_impl_k_thread_suspend+0xa0>)
   21616:	f003 f8c3 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   2161a:	f386 8811 	msr	BASEPRI, r6
   2161e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21622:	68ab      	ldr	r3, [r5, #8]
   21624:	42a3      	cmp	r3, r4
   21626:	d103      	bne.n	21630 <z_impl_k_thread_suspend+0x98>
}
   21628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2162c:	f008 be24 	b.w	2a278 <z_reschedule_unlocked>
}
   21630:	bd70      	pop	{r4, r5, r6, pc}
   21632:	bf00      	nop
   21634:	200034c8 	.word	0x200034c8
   21638:	0002be01 	.word	0x0002be01
   2163c:	0002bced 	.word	0x0002bced
   21640:	200034bc 	.word	0x200034bc
   21644:	20003490 	.word	0x20003490

00021648 <z_thread_single_abort>:
{
   21648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   2164c:	7b03      	ldrb	r3, [r0, #12]
   2164e:	07dd      	lsls	r5, r3, #31
{
   21650:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   21652:	d50a      	bpl.n	2166a <z_thread_single_abort+0x22>
   21654:	4979      	ldr	r1, [pc, #484]	; (2183c <z_thread_single_abort+0x1f4>)
   21656:	487a      	ldr	r0, [pc, #488]	; (21840 <z_thread_single_abort+0x1f8>)
   21658:	f240 220e 	movw	r2, #526	; 0x20e
   2165c:	f002 fdee 	bl	2423c <printk>
   21660:	f240 210e 	movw	r1, #526	; 0x20e
   21664:	4875      	ldr	r0, [pc, #468]	; (2183c <z_thread_single_abort+0x1f4>)
   21666:	f003 f89b 	bl	247a0 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   2166a:	4e76      	ldr	r6, [pc, #472]	; (21844 <z_thread_single_abort+0x1fc>)
   2166c:	68b3      	ldr	r3, [r6, #8]
   2166e:	42a3      	cmp	r3, r4
   21670:	d10d      	bne.n	2168e <z_thread_single_abort+0x46>
   21672:	f3ef 8305 	mrs	r3, IPSR
   21676:	b953      	cbnz	r3, 2168e <z_thread_single_abort+0x46>
   21678:	4970      	ldr	r1, [pc, #448]	; (2183c <z_thread_single_abort+0x1f4>)
   2167a:	4871      	ldr	r0, [pc, #452]	; (21840 <z_thread_single_abort+0x1f8>)
   2167c:	f44f 7204 	mov.w	r2, #528	; 0x210
   21680:	f002 fddc 	bl	2423c <printk>
   21684:	f44f 7104 	mov.w	r1, #528	; 0x210
   21688:	486c      	ldr	r0, [pc, #432]	; (2183c <z_thread_single_abort+0x1f4>)
   2168a:	f003 f889 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   2168e:	f04f 0320 	mov.w	r3, #32
   21692:	f3ef 8511 	mrs	r5, BASEPRI
   21696:	f383 8811 	msr	BASEPRI, r3
   2169a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2169e:	486a      	ldr	r0, [pc, #424]	; (21848 <z_thread_single_abort+0x200>)
   216a0:	f000 fdea 	bl	22278 <z_spin_lock_valid>
   216a4:	b940      	cbnz	r0, 216b8 <z_thread_single_abort+0x70>
   216a6:	4969      	ldr	r1, [pc, #420]	; (2184c <z_thread_single_abort+0x204>)
   216a8:	4865      	ldr	r0, [pc, #404]	; (21840 <z_thread_single_abort+0x1f8>)
   216aa:	227c      	movs	r2, #124	; 0x7c
   216ac:	f002 fdc6 	bl	2423c <printk>
   216b0:	217c      	movs	r1, #124	; 0x7c
   216b2:	4866      	ldr	r0, [pc, #408]	; (2184c <z_thread_single_abort+0x204>)
   216b4:	f003 f874 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   216b8:	4863      	ldr	r0, [pc, #396]	; (21848 <z_thread_single_abort+0x200>)
   216ba:	f000 fdfb 	bl	222b4 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   216be:	7b63      	ldrb	r3, [r4, #13]
   216c0:	f013 0f28 	tst.w	r3, #40	; 0x28
   216c4:	d012      	beq.n	216ec <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216c6:	4860      	ldr	r0, [pc, #384]	; (21848 <z_thread_single_abort+0x200>)
   216c8:	f000 fde4 	bl	22294 <z_spin_unlock_valid>
   216cc:	b940      	cbnz	r0, 216e0 <z_thread_single_abort+0x98>
   216ce:	495f      	ldr	r1, [pc, #380]	; (2184c <z_thread_single_abort+0x204>)
   216d0:	485b      	ldr	r0, [pc, #364]	; (21840 <z_thread_single_abort+0x1f8>)
   216d2:	22a7      	movs	r2, #167	; 0xa7
   216d4:	f002 fdb2 	bl	2423c <printk>
   216d8:	21a7      	movs	r1, #167	; 0xa7
   216da:	485c      	ldr	r0, [pc, #368]	; (2184c <z_thread_single_abort+0x204>)
   216dc:	f003 f860 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   216e0:	f385 8811 	msr	BASEPRI, r5
   216e4:	f3bf 8f6f 	isb	sy
}
   216e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   216ec:	f043 0320 	orr.w	r3, r3, #32
   216f0:	7363      	strb	r3, [r4, #13]
   216f2:	4855      	ldr	r0, [pc, #340]	; (21848 <z_thread_single_abort+0x200>)
   216f4:	f000 fdce 	bl	22294 <z_spin_unlock_valid>
   216f8:	b940      	cbnz	r0, 2170c <z_thread_single_abort+0xc4>
   216fa:	4954      	ldr	r1, [pc, #336]	; (2184c <z_thread_single_abort+0x204>)
   216fc:	4850      	ldr	r0, [pc, #320]	; (21840 <z_thread_single_abort+0x1f8>)
   216fe:	22a7      	movs	r2, #167	; 0xa7
   21700:	f002 fd9c 	bl	2423c <printk>
   21704:	21a7      	movs	r1, #167	; 0xa7
   21706:	4851      	ldr	r0, [pc, #324]	; (2184c <z_thread_single_abort+0x204>)
   21708:	f003 f84a 	bl	247a0 <assert_post_action>
   2170c:	f385 8811 	msr	BASEPRI, r5
   21710:	f3bf 8f6f 	isb	sy
   21714:	f104 0018 	add.w	r0, r4, #24
   21718:	f001 f826 	bl	22768 <z_abort_timeout>
	__asm__ volatile(
   2171c:	f04f 0320 	mov.w	r3, #32
   21720:	f3ef 8711 	mrs	r7, BASEPRI
   21724:	f383 8811 	msr	BASEPRI, r3
   21728:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2172c:	4846      	ldr	r0, [pc, #280]	; (21848 <z_thread_single_abort+0x200>)
   2172e:	f000 fda3 	bl	22278 <z_spin_lock_valid>
   21732:	b940      	cbnz	r0, 21746 <z_thread_single_abort+0xfe>
   21734:	4945      	ldr	r1, [pc, #276]	; (2184c <z_thread_single_abort+0x204>)
   21736:	4842      	ldr	r0, [pc, #264]	; (21840 <z_thread_single_abort+0x1f8>)
   21738:	227c      	movs	r2, #124	; 0x7c
   2173a:	f002 fd7f 	bl	2423c <printk>
   2173e:	217c      	movs	r1, #124	; 0x7c
   21740:	4842      	ldr	r0, [pc, #264]	; (2184c <z_thread_single_abort+0x204>)
   21742:	f003 f82d 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21746:	4840      	ldr	r0, [pc, #256]	; (21848 <z_thread_single_abort+0x200>)
   21748:	f000 fdb4 	bl	222b4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2174c:	7b63      	ldrb	r3, [r4, #13]
   2174e:	06d8      	lsls	r0, r3, #27
   21750:	d116      	bne.n	21780 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   21752:	69a2      	ldr	r2, [r4, #24]
   21754:	b9a2      	cbnz	r2, 21780 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   21756:	0619      	lsls	r1, r3, #24
   21758:	d507      	bpl.n	2176a <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   2175a:	4621      	mov	r1, r4
   2175c:	483c      	ldr	r0, [pc, #240]	; (21850 <z_thread_single_abort+0x208>)
   2175e:	f7ff fc69 	bl	21034 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   21762:	7b63      	ldrb	r3, [r4, #13]
   21764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21768:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2176a:	68b0      	ldr	r0, [r6, #8]
   2176c:	1b02      	subs	r2, r0, r4
   2176e:	4250      	negs	r0, r2
   21770:	4150      	adcs	r0, r2
   21772:	f7ff fcc5 	bl	21100 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   21776:	f104 0930 	add.w	r9, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   2177a:	f04f 0800 	mov.w	r8, #0
   2177e:	e025      	b.n	217cc <z_thread_single_abort+0x184>
			if (z_is_thread_pending(thread)) {
   21780:	079b      	lsls	r3, r3, #30
   21782:	d5f8      	bpl.n	21776 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   21784:	f104 0008 	add.w	r0, r4, #8
   21788:	f7ff fb4c 	bl	20e24 <pended_on.isra.19>
   2178c:	4621      	mov	r1, r4
   2178e:	f7ff fc51 	bl	21034 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21792:	7b63      	ldrb	r3, [r4, #13]
   21794:	f023 0302 	bic.w	r3, r3, #2
   21798:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   2179a:	2300      	movs	r3, #0
   2179c:	60a3      	str	r3, [r4, #8]
   2179e:	e7ea      	b.n	21776 <z_thread_single_abort+0x12e>
   217a0:	f105 0018 	add.w	r0, r5, #24
   217a4:	f000 ffe0 	bl	22768 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   217a8:	f105 0008 	add.w	r0, r5, #8
   217ac:	f7ff fb3a 	bl	20e24 <pended_on.isra.19>
   217b0:	4629      	mov	r1, r5
   217b2:	f7ff fc3f 	bl	21034 <z_priq_dumb_remove>
   217b6:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   217b8:	f8c5 8008 	str.w	r8, [r5, #8]
   217bc:	f023 0302 	bic.w	r3, r3, #2
   217c0:	736b      	strb	r3, [r5, #13]
   217c2:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   217c6:	4628      	mov	r0, r5
   217c8:	f7ff fd30 	bl	2122c <ready_thread>
	return list->head == list;
   217cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217ce:	454d      	cmp	r5, r9
   217d0:	d001      	beq.n	217d6 <z_thread_single_abort+0x18e>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   217d2:	2d00      	cmp	r5, #0
   217d4:	d1e4      	bne.n	217a0 <z_thread_single_abort+0x158>
		if (z_is_idle_thread_object(_current)) {
   217d6:	68b2      	ldr	r2, [r6, #8]
   217d8:	4b1e      	ldr	r3, [pc, #120]	; (21854 <z_thread_single_abort+0x20c>)
   217da:	429a      	cmp	r2, r3
   217dc:	d102      	bne.n	217e4 <z_thread_single_abort+0x19c>
			update_cache(1);
   217de:	2001      	movs	r0, #1
   217e0:	f7ff fc8e 	bl	21100 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   217e4:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   217e6:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   217e8:	f043 0308 	orr.w	r3, r3, #8
   217ec:	7363      	strb	r3, [r4, #13]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   217ee:	2200      	movs	r2, #0
   217f0:	f104 0338 	add.w	r3, r4, #56	; 0x38
   217f4:	f3bf 8f5b 	dmb	ish
   217f8:	e853 1f00 	ldrex	r1, [r3]
   217fc:	e843 2000 	strex	r0, r2, [r3]
   21800:	2800      	cmp	r0, #0
   21802:	d1f9      	bne.n	217f8 <z_thread_single_abort+0x1b0>
   21804:	f3bf 8f5b 	dmb	ish
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21808:	480f      	ldr	r0, [pc, #60]	; (21848 <z_thread_single_abort+0x200>)
   2180a:	f000 fd43 	bl	22294 <z_spin_unlock_valid>
   2180e:	b940      	cbnz	r0, 21822 <z_thread_single_abort+0x1da>
   21810:	490e      	ldr	r1, [pc, #56]	; (2184c <z_thread_single_abort+0x204>)
   21812:	480b      	ldr	r0, [pc, #44]	; (21840 <z_thread_single_abort+0x1f8>)
   21814:	22a7      	movs	r2, #167	; 0xa7
   21816:	f002 fd11 	bl	2423c <printk>
   2181a:	21a7      	movs	r1, #167	; 0xa7
   2181c:	480b      	ldr	r0, [pc, #44]	; (2184c <z_thread_single_abort+0x204>)
   2181e:	f002 ffbf 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21822:	f387 8811 	msr	BASEPRI, r7
   21826:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   2182a:	2d00      	cmp	r5, #0
   2182c:	f43f af5c 	beq.w	216e8 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   21830:	4620      	mov	r0, r4
   21832:	462b      	mov	r3, r5
}
   21834:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   21838:	4718      	bx	r3
   2183a:	bf00      	nop
   2183c:	00031a1d 	.word	0x00031a1d
   21840:	0002bced 	.word	0x0002bced
   21844:	20003490 	.word	0x20003490
   21848:	200034c8 	.word	0x200034c8
   2184c:	0002be01 	.word	0x0002be01
   21850:	200034bc 	.word	0x200034bc
   21854:	20001868 	.word	0x20001868

00021858 <unready_thread>:
{
   21858:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2185a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2185e:	2b00      	cmp	r3, #0
{
   21860:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21862:	da07      	bge.n	21874 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   21864:	4601      	mov	r1, r0
   21866:	4808      	ldr	r0, [pc, #32]	; (21888 <unready_thread+0x30>)
   21868:	f7ff fbe4 	bl	21034 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   2186c:	7b63      	ldrb	r3, [r4, #13]
   2186e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21872:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   21874:	4b05      	ldr	r3, [pc, #20]	; (2188c <unready_thread+0x34>)
   21876:	6898      	ldr	r0, [r3, #8]
   21878:	1b03      	subs	r3, r0, r4
   2187a:	4258      	negs	r0, r3
   2187c:	4158      	adcs	r0, r3
}
   2187e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   21882:	f7ff bc3d 	b.w	21100 <update_cache>
   21886:	bf00      	nop
   21888:	200034bc 	.word	0x200034bc
   2188c:	20003490 	.word	0x20003490

00021890 <add_to_waitq_locked>:
{
   21890:	b538      	push	{r3, r4, r5, lr}
   21892:	4604      	mov	r4, r0
   21894:	460d      	mov	r5, r1
	unready_thread(thread);
   21896:	f7ff ffdf 	bl	21858 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2189a:	7b63      	ldrb	r3, [r4, #13]
   2189c:	f043 0302 	orr.w	r3, r3, #2
   218a0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   218a2:	b1ed      	cbz	r5, 218e0 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   218a4:	4b15      	ldr	r3, [pc, #84]	; (218fc <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   218a6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   218a8:	429c      	cmp	r4, r3
   218aa:	d10a      	bne.n	218c2 <add_to_waitq_locked+0x32>
   218ac:	4914      	ldr	r1, [pc, #80]	; (21900 <add_to_waitq_locked+0x70>)
   218ae:	4815      	ldr	r0, [pc, #84]	; (21904 <add_to_waitq_locked+0x74>)
   218b0:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   218b4:	f002 fcc2 	bl	2423c <printk>
   218b8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   218bc:	4810      	ldr	r0, [pc, #64]	; (21900 <add_to_waitq_locked+0x70>)
   218be:	f002 ff6f 	bl	247a0 <assert_post_action>
	return list->head == list;
   218c2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218c4:	429d      	cmp	r5, r3
   218c6:	d012      	beq.n	218ee <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   218c8:	b18b      	cbz	r3, 218ee <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   218ca:	f994 200e 	ldrsb.w	r2, [r4, #14]
   218ce:	f993 100e 	ldrsb.w	r1, [r3, #14]
   218d2:	4291      	cmp	r1, r2
   218d4:	dd05      	ble.n	218e2 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   218d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   218d8:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   218dc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   218de:	605c      	str	r4, [r3, #4]
}
   218e0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   218e2:	6869      	ldr	r1, [r5, #4]
   218e4:	428b      	cmp	r3, r1
   218e6:	d002      	beq.n	218ee <add_to_waitq_locked+0x5e>
   218e8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   218ea:	2b00      	cmp	r3, #0
   218ec:	d1ef      	bne.n	218ce <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   218ee:	686b      	ldr	r3, [r5, #4]
   218f0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   218f2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   218f4:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   218f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   218f8:	606c      	str	r4, [r5, #4]
}
   218fa:	e7f1      	b.n	218e0 <add_to_waitq_locked+0x50>
   218fc:	20001868 	.word	0x20001868
   21900:	00031a1d 	.word	0x00031a1d
   21904:	0002bced 	.word	0x0002bced

00021908 <pend>:
{
   21908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2190c:	4604      	mov	r4, r0
   2190e:	4688      	mov	r8, r1
   21910:	4616      	mov	r6, r2
   21912:	461f      	mov	r7, r3
	__asm__ volatile(
   21914:	f04f 0320 	mov.w	r3, #32
   21918:	f3ef 8511 	mrs	r5, BASEPRI
   2191c:	f383 8811 	msr	BASEPRI, r3
   21920:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21924:	481a      	ldr	r0, [pc, #104]	; (21990 <pend+0x88>)
   21926:	f000 fca7 	bl	22278 <z_spin_lock_valid>
   2192a:	b940      	cbnz	r0, 2193e <pend+0x36>
   2192c:	4919      	ldr	r1, [pc, #100]	; (21994 <pend+0x8c>)
   2192e:	481a      	ldr	r0, [pc, #104]	; (21998 <pend+0x90>)
   21930:	227c      	movs	r2, #124	; 0x7c
   21932:	f002 fc83 	bl	2423c <printk>
   21936:	217c      	movs	r1, #124	; 0x7c
   21938:	4816      	ldr	r0, [pc, #88]	; (21994 <pend+0x8c>)
   2193a:	f002 ff31 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2193e:	4814      	ldr	r0, [pc, #80]	; (21990 <pend+0x88>)
   21940:	f000 fcb8 	bl	222b4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   21944:	4620      	mov	r0, r4
   21946:	4641      	mov	r1, r8
   21948:	f7ff ffa2 	bl	21890 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2194c:	4810      	ldr	r0, [pc, #64]	; (21990 <pend+0x88>)
   2194e:	f000 fca1 	bl	22294 <z_spin_unlock_valid>
   21952:	b940      	cbnz	r0, 21966 <pend+0x5e>
   21954:	490f      	ldr	r1, [pc, #60]	; (21994 <pend+0x8c>)
   21956:	4810      	ldr	r0, [pc, #64]	; (21998 <pend+0x90>)
   21958:	22a7      	movs	r2, #167	; 0xa7
   2195a:	f002 fc6f 	bl	2423c <printk>
   2195e:	21a7      	movs	r1, #167	; 0xa7
   21960:	480c      	ldr	r0, [pc, #48]	; (21994 <pend+0x8c>)
   21962:	f002 ff1d 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21966:	f385 8811 	msr	BASEPRI, r5
   2196a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2196e:	1c7b      	adds	r3, r7, #1
   21970:	bf08      	it	eq
   21972:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   21976:	d008      	beq.n	2198a <pend+0x82>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   21978:	4632      	mov	r2, r6
   2197a:	463b      	mov	r3, r7
   2197c:	f104 0018 	add.w	r0, r4, #24
   21980:	4906      	ldr	r1, [pc, #24]	; (2199c <pend+0x94>)
}
   21982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21986:	f000 be2d 	b.w	225e4 <z_add_timeout>
   2198a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2198e:	bf00      	nop
   21990:	200034c8 	.word	0x200034c8
   21994:	0002be01 	.word	0x0002be01
   21998:	0002bced 	.word	0x0002bced
   2199c:	000213ad 	.word	0x000213ad

000219a0 <z_pend_curr>:
{
   219a0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   219a2:	4b0e      	ldr	r3, [pc, #56]	; (219dc <z_pend_curr+0x3c>)
{
   219a4:	4605      	mov	r5, r0
	pending_current = _current;
   219a6:	6898      	ldr	r0, [r3, #8]
   219a8:	4b0d      	ldr	r3, [pc, #52]	; (219e0 <z_pend_curr+0x40>)
{
   219aa:	460c      	mov	r4, r1
	pending_current = _current;
   219ac:	6018      	str	r0, [r3, #0]
{
   219ae:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   219b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   219b4:	f7ff ffa8 	bl	21908 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219b8:	4628      	mov	r0, r5
   219ba:	f000 fc6b 	bl	22294 <z_spin_unlock_valid>
   219be:	b940      	cbnz	r0, 219d2 <z_pend_curr+0x32>
   219c0:	4908      	ldr	r1, [pc, #32]	; (219e4 <z_pend_curr+0x44>)
   219c2:	4809      	ldr	r0, [pc, #36]	; (219e8 <z_pend_curr+0x48>)
   219c4:	22be      	movs	r2, #190	; 0xbe
   219c6:	f002 fc39 	bl	2423c <printk>
   219ca:	21be      	movs	r1, #190	; 0xbe
   219cc:	4805      	ldr	r0, [pc, #20]	; (219e4 <z_pend_curr+0x44>)
   219ce:	f002 fee7 	bl	247a0 <assert_post_action>
   219d2:	4620      	mov	r0, r4
}
   219d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   219d8:	f7e4 bcf4 	b.w	63c4 <arch_swap>
   219dc:	20003490 	.word	0x20003490
   219e0:	200034c4 	.word	0x200034c4
   219e4:	0002be01 	.word	0x0002be01
   219e8:	0002bced 	.word	0x0002bced

000219ec <z_set_prio>:
{
   219ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   219ee:	4604      	mov	r4, r0
   219f0:	460d      	mov	r5, r1
	__asm__ volatile(
   219f2:	f04f 0320 	mov.w	r3, #32
   219f6:	f3ef 8611 	mrs	r6, BASEPRI
   219fa:	f383 8811 	msr	BASEPRI, r3
   219fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21a02:	4831      	ldr	r0, [pc, #196]	; (21ac8 <z_set_prio+0xdc>)
   21a04:	f000 fc38 	bl	22278 <z_spin_lock_valid>
   21a08:	b940      	cbnz	r0, 21a1c <z_set_prio+0x30>
   21a0a:	4930      	ldr	r1, [pc, #192]	; (21acc <z_set_prio+0xe0>)
   21a0c:	4830      	ldr	r0, [pc, #192]	; (21ad0 <z_set_prio+0xe4>)
   21a0e:	227c      	movs	r2, #124	; 0x7c
   21a10:	f002 fc14 	bl	2423c <printk>
   21a14:	217c      	movs	r1, #124	; 0x7c
   21a16:	482d      	ldr	r0, [pc, #180]	; (21acc <z_set_prio+0xe0>)
   21a18:	f002 fec2 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21a1c:	482a      	ldr	r0, [pc, #168]	; (21ac8 <z_set_prio+0xdc>)
   21a1e:	f000 fc49 	bl	222b4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21a22:	7b63      	ldrb	r3, [r4, #13]
   21a24:	06db      	lsls	r3, r3, #27
   21a26:	b26d      	sxtb	r5, r5
   21a28:	d14a      	bne.n	21ac0 <z_set_prio+0xd4>
		if (need_sched) {
   21a2a:	69a3      	ldr	r3, [r4, #24]
   21a2c:	2b00      	cmp	r3, #0
   21a2e:	d147      	bne.n	21ac0 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   21a30:	4621      	mov	r1, r4
   21a32:	4828      	ldr	r0, [pc, #160]	; (21ad4 <z_set_prio+0xe8>)
   21a34:	f7ff fafe 	bl	21034 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21a38:	4b27      	ldr	r3, [pc, #156]	; (21ad8 <z_set_prio+0xec>)
				thread->base.prio = prio;
   21a3a:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21a3c:	429c      	cmp	r4, r3
   21a3e:	d10a      	bne.n	21a56 <z_set_prio+0x6a>
   21a40:	4926      	ldr	r1, [pc, #152]	; (21adc <z_set_prio+0xf0>)
   21a42:	4823      	ldr	r0, [pc, #140]	; (21ad0 <z_set_prio+0xe4>)
   21a44:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   21a48:	f002 fbf8 	bl	2423c <printk>
   21a4c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   21a50:	4822      	ldr	r0, [pc, #136]	; (21adc <z_set_prio+0xf0>)
   21a52:	f002 fea5 	bl	247a0 <assert_post_action>
	return list->head == list;
   21a56:	4a22      	ldr	r2, [pc, #136]	; (21ae0 <z_set_prio+0xf4>)
   21a58:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a5c:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   21a60:	428b      	cmp	r3, r1
   21a62:	d027      	beq.n	21ab4 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21a64:	b333      	cbz	r3, 21ab4 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   21a66:	f994 500e 	ldrsb.w	r5, [r4, #14]
   21a6a:	f993 700e 	ldrsb.w	r7, [r3, #14]
   21a6e:	42af      	cmp	r7, r5
   21a70:	dd1b      	ble.n	21aaa <z_set_prio+0xbe>
	node->prev = successor->prev;
   21a72:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21a74:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   21a78:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21a7a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   21a7c:	2001      	movs	r0, #1
   21a7e:	f7ff fb3f 	bl	21100 <update_cache>
   21a82:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a84:	4810      	ldr	r0, [pc, #64]	; (21ac8 <z_set_prio+0xdc>)
   21a86:	f000 fc05 	bl	22294 <z_spin_unlock_valid>
   21a8a:	b940      	cbnz	r0, 21a9e <z_set_prio+0xb2>
   21a8c:	490f      	ldr	r1, [pc, #60]	; (21acc <z_set_prio+0xe0>)
   21a8e:	4810      	ldr	r0, [pc, #64]	; (21ad0 <z_set_prio+0xe4>)
   21a90:	22a7      	movs	r2, #167	; 0xa7
   21a92:	f002 fbd3 	bl	2423c <printk>
   21a96:	21a7      	movs	r1, #167	; 0xa7
   21a98:	480c      	ldr	r0, [pc, #48]	; (21acc <z_set_prio+0xe0>)
   21a9a:	f002 fe81 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21a9e:	f386 8811 	msr	BASEPRI, r6
   21aa2:	f3bf 8f6f 	isb	sy
}
   21aa6:	4620      	mov	r0, r4
   21aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   21aaa:	4298      	cmp	r0, r3
   21aac:	d002      	beq.n	21ab4 <z_set_prio+0xc8>
   21aae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21ab0:	2b00      	cmp	r3, #0
   21ab2:	d1da      	bne.n	21a6a <z_set_prio+0x7e>
	node->prev = list->tail;
   21ab4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   21ab8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21aba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21abc:	6314      	str	r4, [r2, #48]	; 0x30
   21abe:	e7dd      	b.n	21a7c <z_set_prio+0x90>
			thread->base.prio = prio;
   21ac0:	73a5      	strb	r5, [r4, #14]
   21ac2:	2400      	movs	r4, #0
   21ac4:	e7de      	b.n	21a84 <z_set_prio+0x98>
   21ac6:	bf00      	nop
   21ac8:	200034c8 	.word	0x200034c8
   21acc:	0002be01 	.word	0x0002be01
   21ad0:	0002bced 	.word	0x0002bced
   21ad4:	200034bc 	.word	0x200034bc
   21ad8:	20001868 	.word	0x20001868
   21adc:	00031a1d 	.word	0x00031a1d
   21ae0:	20003490 	.word	0x20003490

00021ae4 <z_unpend_first_thread>:
{
   21ae4:	b538      	push	{r3, r4, r5, lr}
   21ae6:	4604      	mov	r4, r0
	__asm__ volatile(
   21ae8:	f04f 0320 	mov.w	r3, #32
   21aec:	f3ef 8511 	mrs	r5, BASEPRI
   21af0:	f383 8811 	msr	BASEPRI, r3
   21af4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21af8:	482b      	ldr	r0, [pc, #172]	; (21ba8 <z_unpend_first_thread+0xc4>)
   21afa:	f000 fbbd 	bl	22278 <z_spin_lock_valid>
   21afe:	b940      	cbnz	r0, 21b12 <z_unpend_first_thread+0x2e>
   21b00:	492a      	ldr	r1, [pc, #168]	; (21bac <z_unpend_first_thread+0xc8>)
   21b02:	482b      	ldr	r0, [pc, #172]	; (21bb0 <z_unpend_first_thread+0xcc>)
   21b04:	227c      	movs	r2, #124	; 0x7c
   21b06:	f002 fb99 	bl	2423c <printk>
   21b0a:	217c      	movs	r1, #124	; 0x7c
   21b0c:	4827      	ldr	r0, [pc, #156]	; (21bac <z_unpend_first_thread+0xc8>)
   21b0e:	f002 fe47 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b12:	4825      	ldr	r0, [pc, #148]	; (21ba8 <z_unpend_first_thread+0xc4>)
   21b14:	f000 fbce 	bl	222b4 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   21b18:	4620      	mov	r0, r4
   21b1a:	f008 fbc6 	bl	2a2aa <z_priq_dumb_best>
   21b1e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b20:	4821      	ldr	r0, [pc, #132]	; (21ba8 <z_unpend_first_thread+0xc4>)
   21b22:	f000 fbb7 	bl	22294 <z_spin_unlock_valid>
   21b26:	b940      	cbnz	r0, 21b3a <z_unpend_first_thread+0x56>
   21b28:	4920      	ldr	r1, [pc, #128]	; (21bac <z_unpend_first_thread+0xc8>)
   21b2a:	4821      	ldr	r0, [pc, #132]	; (21bb0 <z_unpend_first_thread+0xcc>)
   21b2c:	22a7      	movs	r2, #167	; 0xa7
   21b2e:	f002 fb85 	bl	2423c <printk>
   21b32:	21a7      	movs	r1, #167	; 0xa7
   21b34:	481d      	ldr	r0, [pc, #116]	; (21bac <z_unpend_first_thread+0xc8>)
   21b36:	f002 fe33 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21b3a:	f385 8811 	msr	BASEPRI, r5
   21b3e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   21b42:	b37c      	cbz	r4, 21ba4 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   21b44:	f04f 0320 	mov.w	r3, #32
   21b48:	f3ef 8511 	mrs	r5, BASEPRI
   21b4c:	f383 8811 	msr	BASEPRI, r3
   21b50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b54:	4814      	ldr	r0, [pc, #80]	; (21ba8 <z_unpend_first_thread+0xc4>)
   21b56:	f000 fb8f 	bl	22278 <z_spin_lock_valid>
   21b5a:	b940      	cbnz	r0, 21b6e <z_unpend_first_thread+0x8a>
   21b5c:	4913      	ldr	r1, [pc, #76]	; (21bac <z_unpend_first_thread+0xc8>)
   21b5e:	4814      	ldr	r0, [pc, #80]	; (21bb0 <z_unpend_first_thread+0xcc>)
   21b60:	227c      	movs	r2, #124	; 0x7c
   21b62:	f002 fb6b 	bl	2423c <printk>
   21b66:	217c      	movs	r1, #124	; 0x7c
   21b68:	4810      	ldr	r0, [pc, #64]	; (21bac <z_unpend_first_thread+0xc8>)
   21b6a:	f002 fe19 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b6e:	480e      	ldr	r0, [pc, #56]	; (21ba8 <z_unpend_first_thread+0xc4>)
   21b70:	f000 fba0 	bl	222b4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   21b74:	4620      	mov	r0, r4
   21b76:	f008 fb89 	bl	2a28c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b7a:	480b      	ldr	r0, [pc, #44]	; (21ba8 <z_unpend_first_thread+0xc4>)
   21b7c:	f000 fb8a 	bl	22294 <z_spin_unlock_valid>
   21b80:	b940      	cbnz	r0, 21b94 <z_unpend_first_thread+0xb0>
   21b82:	490a      	ldr	r1, [pc, #40]	; (21bac <z_unpend_first_thread+0xc8>)
   21b84:	480a      	ldr	r0, [pc, #40]	; (21bb0 <z_unpend_first_thread+0xcc>)
   21b86:	22a7      	movs	r2, #167	; 0xa7
   21b88:	f002 fb58 	bl	2423c <printk>
   21b8c:	21a7      	movs	r1, #167	; 0xa7
   21b8e:	4807      	ldr	r0, [pc, #28]	; (21bac <z_unpend_first_thread+0xc8>)
   21b90:	f002 fe06 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21b94:	f385 8811 	msr	BASEPRI, r5
   21b98:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   21b9c:	f104 0018 	add.w	r0, r4, #24
   21ba0:	f000 fde2 	bl	22768 <z_abort_timeout>
}
   21ba4:	4620      	mov	r0, r4
   21ba6:	bd38      	pop	{r3, r4, r5, pc}
   21ba8:	200034c8 	.word	0x200034c8
   21bac:	0002be01 	.word	0x0002be01
   21bb0:	0002bced 	.word	0x0002bced

00021bb4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   21bb4:	4b04      	ldr	r3, [pc, #16]	; (21bc8 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21bb6:	2100      	movs	r1, #0
   21bb8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   21bbc:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   21bc0:	4608      	mov	r0, r1
   21bc2:	f7ff b95b 	b.w	20e7c <k_sched_time_slice_set>
   21bc6:	bf00      	nop
   21bc8:	20003490 	.word	0x20003490

00021bcc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   21bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21bce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21bd2:	b153      	cbz	r3, 21bea <z_impl_k_yield+0x1e>
   21bd4:	493d      	ldr	r1, [pc, #244]	; (21ccc <z_impl_k_yield+0x100>)
   21bd6:	483e      	ldr	r0, [pc, #248]	; (21cd0 <z_impl_k_yield+0x104>)
   21bd8:	f240 42cf 	movw	r2, #1231	; 0x4cf
   21bdc:	f002 fb2e 	bl	2423c <printk>
   21be0:	f240 41cf 	movw	r1, #1231	; 0x4cf
   21be4:	4839      	ldr	r0, [pc, #228]	; (21ccc <z_impl_k_yield+0x100>)
   21be6:	f002 fddb 	bl	247a0 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   21bea:	4c3a      	ldr	r4, [pc, #232]	; (21cd4 <z_impl_k_yield+0x108>)
   21bec:	4e3a      	ldr	r6, [pc, #232]	; (21cd8 <z_impl_k_yield+0x10c>)
   21bee:	68a2      	ldr	r2, [r4, #8]
   21bf0:	42b2      	cmp	r2, r6
   21bf2:	d054      	beq.n	21c9e <z_impl_k_yield+0xd2>
	__asm__ volatile(
   21bf4:	f04f 0320 	mov.w	r3, #32
   21bf8:	f3ef 8711 	mrs	r7, BASEPRI
   21bfc:	f383 8811 	msr	BASEPRI, r3
   21c00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c04:	4835      	ldr	r0, [pc, #212]	; (21cdc <z_impl_k_yield+0x110>)
   21c06:	f000 fb37 	bl	22278 <z_spin_lock_valid>
   21c0a:	b940      	cbnz	r0, 21c1e <z_impl_k_yield+0x52>
   21c0c:	4934      	ldr	r1, [pc, #208]	; (21ce0 <z_impl_k_yield+0x114>)
   21c0e:	4830      	ldr	r0, [pc, #192]	; (21cd0 <z_impl_k_yield+0x104>)
   21c10:	227c      	movs	r2, #124	; 0x7c
   21c12:	f002 fb13 	bl	2423c <printk>
   21c16:	217c      	movs	r1, #124	; 0x7c
   21c18:	4831      	ldr	r0, [pc, #196]	; (21ce0 <z_impl_k_yield+0x114>)
   21c1a:	f002 fdc1 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21c1e:	482f      	ldr	r0, [pc, #188]	; (21cdc <z_impl_k_yield+0x110>)
   21c20:	f000 fb48 	bl	222b4 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   21c24:	68a1      	ldr	r1, [r4, #8]
   21c26:	482f      	ldr	r0, [pc, #188]	; (21ce4 <z_impl_k_yield+0x118>)
   21c28:	f7ff fa04 	bl	21034 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   21c2c:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21c2e:	42b5      	cmp	r5, r6
   21c30:	d10a      	bne.n	21c48 <z_impl_k_yield+0x7c>
   21c32:	4926      	ldr	r1, [pc, #152]	; (21ccc <z_impl_k_yield+0x100>)
   21c34:	4826      	ldr	r0, [pc, #152]	; (21cd0 <z_impl_k_yield+0x104>)
   21c36:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   21c3a:	f002 faff 	bl	2423c <printk>
   21c3e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   21c42:	4822      	ldr	r0, [pc, #136]	; (21ccc <z_impl_k_yield+0x100>)
   21c44:	f002 fdac 	bl	247a0 <assert_post_action>
	return list->head == list;
   21c48:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c4c:	4a25      	ldr	r2, [pc, #148]	; (21ce4 <z_impl_k_yield+0x118>)
   21c4e:	4293      	cmp	r3, r2
   21c50:	d036      	beq.n	21cc0 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21c52:	2b00      	cmp	r3, #0
   21c54:	d034      	beq.n	21cc0 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   21c56:	f995 000e 	ldrsb.w	r0, [r5, #14]
   21c5a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   21c5e:	4286      	cmp	r6, r0
   21c60:	dd29      	ble.n	21cb6 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   21c62:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21c64:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   21c68:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   21c6a:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   21c6c:	68a2      	ldr	r2, [r4, #8]
	thread->base.thread_state |= states;
   21c6e:	7b53      	ldrb	r3, [r2, #13]
   21c70:	f063 037f 	orn	r3, r3, #127	; 0x7f
			update_cache(1);
   21c74:	2001      	movs	r0, #1
   21c76:	7353      	strb	r3, [r2, #13]
   21c78:	f7ff fa42 	bl	21100 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21c7c:	4817      	ldr	r0, [pc, #92]	; (21cdc <z_impl_k_yield+0x110>)
   21c7e:	f000 fb09 	bl	22294 <z_spin_unlock_valid>
   21c82:	b940      	cbnz	r0, 21c96 <z_impl_k_yield+0xca>
   21c84:	4916      	ldr	r1, [pc, #88]	; (21ce0 <z_impl_k_yield+0x114>)
   21c86:	4812      	ldr	r0, [pc, #72]	; (21cd0 <z_impl_k_yield+0x104>)
   21c88:	22a7      	movs	r2, #167	; 0xa7
   21c8a:	f002 fad7 	bl	2423c <printk>
   21c8e:	21a7      	movs	r1, #167	; 0xa7
   21c90:	4813      	ldr	r0, [pc, #76]	; (21ce0 <z_impl_k_yield+0x114>)
   21c92:	f002 fd85 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21c96:	f387 8811 	msr	BASEPRI, r7
   21c9a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21c9e:	f04f 0320 	mov.w	r3, #32
   21ca2:	f3ef 8011 	mrs	r0, BASEPRI
   21ca6:	f383 8811 	msr	BASEPRI, r3
   21caa:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   21cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   21cb2:	f7e4 bb87 	b.w	63c4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   21cb6:	4299      	cmp	r1, r3
   21cb8:	d002      	beq.n	21cc0 <z_impl_k_yield+0xf4>
   21cba:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21cbc:	2b00      	cmp	r3, #0
   21cbe:	d1cc      	bne.n	21c5a <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   21cc0:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   21cc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21cc6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   21cc8:	6325      	str	r5, [r4, #48]	; 0x30
   21cca:	e7cf      	b.n	21c6c <z_impl_k_yield+0xa0>
   21ccc:	00031a1d 	.word	0x00031a1d
   21cd0:	0002bced 	.word	0x0002bced
   21cd4:	20003490 	.word	0x20003490
   21cd8:	20001868 	.word	0x20001868
   21cdc:	200034c8 	.word	0x200034c8
   21ce0:	0002be01 	.word	0x0002be01
   21ce4:	200034bc 	.word	0x200034bc

00021ce8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   21ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21cec:	4606      	mov	r6, r0
   21cee:	460f      	mov	r7, r1
   21cf0:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21cf4:	b153      	cbz	r3, 21d0c <z_tick_sleep+0x24>
   21cf6:	4935      	ldr	r1, [pc, #212]	; (21dcc <z_tick_sleep+0xe4>)
   21cf8:	4835      	ldr	r0, [pc, #212]	; (21dd0 <z_tick_sleep+0xe8>)
   21cfa:	f240 42ed 	movw	r2, #1261	; 0x4ed
   21cfe:	f002 fa9d 	bl	2423c <printk>
   21d02:	f240 41ed 	movw	r1, #1261	; 0x4ed
   21d06:	4831      	ldr	r0, [pc, #196]	; (21dcc <z_tick_sleep+0xe4>)
   21d08:	f002 fd4a 	bl	247a0 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   21d0c:	ea56 0307 	orrs.w	r3, r6, r7
   21d10:	d104      	bne.n	21d1c <z_tick_sleep+0x34>
	z_impl_k_yield();
   21d12:	f7ff ff5b 	bl	21bcc <z_impl_k_yield>
		k_yield();
		return 0;
   21d16:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   21d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   21d1c:	f008 fb6c 	bl	2a3f8 <z_tick_get_32>
   21d20:	1984      	adds	r4, r0, r6
   21d22:	f04f 0320 	mov.w	r3, #32
   21d26:	f3ef 8811 	mrs	r8, BASEPRI
   21d2a:	f383 8811 	msr	BASEPRI, r3
   21d2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d32:	4828      	ldr	r0, [pc, #160]	; (21dd4 <z_tick_sleep+0xec>)
   21d34:	f000 faa0 	bl	22278 <z_spin_lock_valid>
   21d38:	b940      	cbnz	r0, 21d4c <z_tick_sleep+0x64>
   21d3a:	4927      	ldr	r1, [pc, #156]	; (21dd8 <z_tick_sleep+0xf0>)
   21d3c:	4824      	ldr	r0, [pc, #144]	; (21dd0 <z_tick_sleep+0xe8>)
   21d3e:	227c      	movs	r2, #124	; 0x7c
   21d40:	f002 fa7c 	bl	2423c <printk>
   21d44:	217c      	movs	r1, #124	; 0x7c
   21d46:	4824      	ldr	r0, [pc, #144]	; (21dd8 <z_tick_sleep+0xf0>)
   21d48:	f002 fd2a 	bl	247a0 <assert_post_action>
	pending_current = _current;
   21d4c:	4d23      	ldr	r5, [pc, #140]	; (21ddc <z_tick_sleep+0xf4>)
	z_spin_lock_set_owner(l);
   21d4e:	4821      	ldr	r0, [pc, #132]	; (21dd4 <z_tick_sleep+0xec>)
   21d50:	f000 fab0 	bl	222b4 <z_spin_lock_set_owner>
   21d54:	4b22      	ldr	r3, [pc, #136]	; (21de0 <z_tick_sleep+0xf8>)
   21d56:	68a8      	ldr	r0, [r5, #8]
   21d58:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21d5a:	f7ff fd7d 	bl	21858 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21d5e:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   21d60:	4920      	ldr	r1, [pc, #128]	; (21de4 <z_tick_sleep+0xfc>)
   21d62:	4632      	mov	r2, r6
   21d64:	463b      	mov	r3, r7
   21d66:	3018      	adds	r0, #24
   21d68:	f000 fc3c 	bl	225e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21d6c:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d6e:	4819      	ldr	r0, [pc, #100]	; (21dd4 <z_tick_sleep+0xec>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21d70:	7b53      	ldrb	r3, [r2, #13]
   21d72:	f043 0310 	orr.w	r3, r3, #16
   21d76:	7353      	strb	r3, [r2, #13]
   21d78:	f000 fa8c 	bl	22294 <z_spin_unlock_valid>
   21d7c:	b940      	cbnz	r0, 21d90 <z_tick_sleep+0xa8>
   21d7e:	4916      	ldr	r1, [pc, #88]	; (21dd8 <z_tick_sleep+0xf0>)
   21d80:	4813      	ldr	r0, [pc, #76]	; (21dd0 <z_tick_sleep+0xe8>)
   21d82:	22be      	movs	r2, #190	; 0xbe
   21d84:	f002 fa5a 	bl	2423c <printk>
   21d88:	21be      	movs	r1, #190	; 0xbe
   21d8a:	4813      	ldr	r0, [pc, #76]	; (21dd8 <z_tick_sleep+0xf0>)
   21d8c:	f002 fd08 	bl	247a0 <assert_post_action>
   21d90:	4640      	mov	r0, r8
   21d92:	f7e4 fb17 	bl	63c4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   21d96:	68ab      	ldr	r3, [r5, #8]
   21d98:	7b5b      	ldrb	r3, [r3, #13]
   21d9a:	06db      	lsls	r3, r3, #27
   21d9c:	d50a      	bpl.n	21db4 <z_tick_sleep+0xcc>
   21d9e:	490b      	ldr	r1, [pc, #44]	; (21dcc <z_tick_sleep+0xe4>)
   21da0:	480b      	ldr	r0, [pc, #44]	; (21dd0 <z_tick_sleep+0xe8>)
   21da2:	f240 520b 	movw	r2, #1291	; 0x50b
   21da6:	f002 fa49 	bl	2423c <printk>
   21daa:	f240 510b 	movw	r1, #1291	; 0x50b
   21dae:	4807      	ldr	r0, [pc, #28]	; (21dcc <z_tick_sleep+0xe4>)
   21db0:	f002 fcf6 	bl	247a0 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   21db4:	f008 fb20 	bl	2a3f8 <z_tick_get_32>
   21db8:	1a20      	subs	r0, r4, r0
   21dba:	eb64 0104 	sbc.w	r1, r4, r4
   21dbe:	2800      	cmp	r0, #0
   21dc0:	f171 0300 	sbcs.w	r3, r1, #0
   21dc4:	bfb8      	it	lt
   21dc6:	2000      	movlt	r0, #0
   21dc8:	e7a6      	b.n	21d18 <z_tick_sleep+0x30>
   21dca:	bf00      	nop
   21dcc:	00031a1d 	.word	0x00031a1d
   21dd0:	0002bced 	.word	0x0002bced
   21dd4:	200034c8 	.word	0x200034c8
   21dd8:	0002be01 	.word	0x0002be01
   21ddc:	20003490 	.word	0x20003490
   21de0:	200034c4 	.word	0x200034c4
   21de4:	000213ad 	.word	0x000213ad

00021de8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   21de8:	b538      	push	{r3, r4, r5, lr}
   21dea:	4604      	mov	r4, r0
   21dec:	460d      	mov	r5, r1
   21dee:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   21df2:	b153      	cbz	r3, 21e0a <z_impl_k_sleep+0x22>
   21df4:	4911      	ldr	r1, [pc, #68]	; (21e3c <z_impl_k_sleep+0x54>)
   21df6:	4812      	ldr	r0, [pc, #72]	; (21e40 <z_impl_k_sleep+0x58>)
   21df8:	f240 521a 	movw	r2, #1306	; 0x51a
   21dfc:	f002 fa1e 	bl	2423c <printk>
   21e00:	f240 511a 	movw	r1, #1306	; 0x51a
   21e04:	480d      	ldr	r0, [pc, #52]	; (21e3c <z_impl_k_sleep+0x54>)
   21e06:	f002 fccb 	bl	247a0 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21e0a:	1c6b      	adds	r3, r5, #1
   21e0c:	bf08      	it	eq
   21e0e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21e12:	d106      	bne.n	21e22 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   21e14:	4b0b      	ldr	r3, [pc, #44]	; (21e44 <z_impl_k_sleep+0x5c>)
   21e16:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21e18:	f7ff fbbe 	bl	21598 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   21e1c:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   21e20:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   21e22:	4620      	mov	r0, r4
   21e24:	4629      	mov	r1, r5
   21e26:	f7ff ff5f 	bl	21ce8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   21e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21e2e:	fb80 3403 	smull	r3, r4, r0, r3
   21e32:	0bd8      	lsrs	r0, r3, #15
   21e34:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   21e38:	e7f2      	b.n	21e20 <z_impl_k_sleep+0x38>
   21e3a:	bf00      	nop
   21e3c:	00031a1d 	.word	0x00031a1d
   21e40:	0002bced 	.word	0x0002bced
   21e44:	20003490 	.word	0x20003490

00021e48 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   21e48:	b538      	push	{r3, r4, r5, lr}
   21e4a:	4c0b      	ldr	r4, [pc, #44]	; (21e78 <z_impl_k_usleep+0x30>)
   21e4c:	4a0b      	ldr	r2, [pc, #44]	; (21e7c <z_impl_k_usleep+0x34>)
   21e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   21e52:	2500      	movs	r5, #0
   21e54:	fbc1 4500 	smlal	r4, r5, r1, r0
   21e58:	2300      	movs	r3, #0
   21e5a:	4620      	mov	r0, r4
   21e5c:	4629      	mov	r1, r5
   21e5e:	f7df fff3 	bl	1e48 <__aeabi_uldivmod>
	int32_t ticks;

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   21e62:	17c1      	asrs	r1, r0, #31
   21e64:	f7ff ff40 	bl	21ce8 <z_tick_sleep>
   21e68:	4a04      	ldr	r2, [pc, #16]	; (21e7c <z_impl_k_usleep+0x34>)
   21e6a:	fb80 2302 	smull	r2, r3, r0, r2
   21e6e:	0bd0      	lsrs	r0, r2, #15
	return k_ticks_to_us_floor64(ticks);
}
   21e70:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   21e74:	bd38      	pop	{r3, r4, r5, pc}
   21e76:	bf00      	nop
   21e78:	000f423f 	.word	0x000f423f
   21e7c:	000f4240 	.word	0x000f4240

00021e80 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   21e80:	4b01      	ldr	r3, [pc, #4]	; (21e88 <z_impl_k_current_get+0x8>)
   21e82:	6898      	ldr	r0, [r3, #8]
   21e84:	4770      	bx	lr
   21e86:	bf00      	nop
   21e88:	20003490 	.word	0x20003490

00021e8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21e8c:	b538      	push	{r3, r4, r5, lr}
   21e8e:	4604      	mov	r4, r0
   21e90:	f04f 0320 	mov.w	r3, #32
   21e94:	f3ef 8511 	mrs	r5, BASEPRI
   21e98:	f383 8811 	msr	BASEPRI, r3
   21e9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ea0:	4815      	ldr	r0, [pc, #84]	; (21ef8 <z_impl_k_sem_give+0x6c>)
   21ea2:	f000 f9e9 	bl	22278 <z_spin_lock_valid>
   21ea6:	b940      	cbnz	r0, 21eba <z_impl_k_sem_give+0x2e>
   21ea8:	4914      	ldr	r1, [pc, #80]	; (21efc <z_impl_k_sem_give+0x70>)
   21eaa:	4815      	ldr	r0, [pc, #84]	; (21f00 <z_impl_k_sem_give+0x74>)
   21eac:	227c      	movs	r2, #124	; 0x7c
   21eae:	f002 f9c5 	bl	2423c <printk>
   21eb2:	217c      	movs	r1, #124	; 0x7c
   21eb4:	4811      	ldr	r0, [pc, #68]	; (21efc <z_impl_k_sem_give+0x70>)
   21eb6:	f002 fc73 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21eba:	480f      	ldr	r0, [pc, #60]	; (21ef8 <z_impl_k_sem_give+0x6c>)
   21ebc:	f000 f9fa 	bl	222b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   21ec0:	4620      	mov	r0, r4
   21ec2:	f7ff fe0f 	bl	21ae4 <z_unpend_first_thread>

	if (thread != NULL) {
   21ec6:	b150      	cbz	r0, 21ede <z_impl_k_sem_give+0x52>
   21ec8:	2200      	movs	r2, #0
   21eca:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21ece:	f7ff f9f5 	bl	212bc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21ed2:	4629      	mov	r1, r5
   21ed4:	4808      	ldr	r0, [pc, #32]	; (21ef8 <z_impl_k_sem_give+0x6c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   21ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   21eda:	f7ff b81d 	b.w	20f18 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21ede:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   21ee2:	429a      	cmp	r2, r3
   21ee4:	bf18      	it	ne
   21ee6:	3301      	addne	r3, #1
   21ee8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21eea:	2102      	movs	r1, #2
   21eec:	f104 0010 	add.w	r0, r4, #16
   21ef0:	f008 fafb 	bl	2a4ea <z_handle_obj_poll_events>
   21ef4:	e7ed      	b.n	21ed2 <z_impl_k_sem_give+0x46>
   21ef6:	bf00      	nop
   21ef8:	200034d4 	.word	0x200034d4
   21efc:	0002be01 	.word	0x0002be01
   21f00:	0002bced 	.word	0x0002bced

00021f04 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21f06:	4605      	mov	r5, r0
   21f08:	4616      	mov	r6, r2
   21f0a:	461f      	mov	r7, r3
   21f0c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   21f10:	b15b      	cbz	r3, 21f2a <z_impl_k_sem_take+0x26>
   21f12:	ea56 0307 	orrs.w	r3, r6, r7
   21f16:	d008      	beq.n	21f2a <z_impl_k_sem_take+0x26>
   21f18:	492b      	ldr	r1, [pc, #172]	; (21fc8 <z_impl_k_sem_take+0xc4>)
   21f1a:	482c      	ldr	r0, [pc, #176]	; (21fcc <z_impl_k_sem_take+0xc8>)
   21f1c:	228d      	movs	r2, #141	; 0x8d
   21f1e:	f002 f98d 	bl	2423c <printk>
   21f22:	218d      	movs	r1, #141	; 0x8d
   21f24:	4828      	ldr	r0, [pc, #160]	; (21fc8 <z_impl_k_sem_take+0xc4>)
   21f26:	f002 fc3b 	bl	247a0 <assert_post_action>
   21f2a:	f04f 0320 	mov.w	r3, #32
   21f2e:	f3ef 8411 	mrs	r4, BASEPRI
   21f32:	f383 8811 	msr	BASEPRI, r3
   21f36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21f3a:	4825      	ldr	r0, [pc, #148]	; (21fd0 <z_impl_k_sem_take+0xcc>)
   21f3c:	f000 f99c 	bl	22278 <z_spin_lock_valid>
   21f40:	b940      	cbnz	r0, 21f54 <z_impl_k_sem_take+0x50>
   21f42:	4924      	ldr	r1, [pc, #144]	; (21fd4 <z_impl_k_sem_take+0xd0>)
   21f44:	4821      	ldr	r0, [pc, #132]	; (21fcc <z_impl_k_sem_take+0xc8>)
   21f46:	227c      	movs	r2, #124	; 0x7c
   21f48:	f002 f978 	bl	2423c <printk>
   21f4c:	217c      	movs	r1, #124	; 0x7c
   21f4e:	4821      	ldr	r0, [pc, #132]	; (21fd4 <z_impl_k_sem_take+0xd0>)
   21f50:	f002 fc26 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   21f54:	481e      	ldr	r0, [pc, #120]	; (21fd0 <z_impl_k_sem_take+0xcc>)
   21f56:	f000 f9ad 	bl	222b4 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   21f5a:	68ab      	ldr	r3, [r5, #8]
   21f5c:	b1ab      	cbz	r3, 21f8a <z_impl_k_sem_take+0x86>
		sem->count--;
   21f5e:	3b01      	subs	r3, #1
   21f60:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f62:	481b      	ldr	r0, [pc, #108]	; (21fd0 <z_impl_k_sem_take+0xcc>)
   21f64:	f000 f996 	bl	22294 <z_spin_unlock_valid>
   21f68:	b940      	cbnz	r0, 21f7c <z_impl_k_sem_take+0x78>
   21f6a:	491a      	ldr	r1, [pc, #104]	; (21fd4 <z_impl_k_sem_take+0xd0>)
   21f6c:	4817      	ldr	r0, [pc, #92]	; (21fcc <z_impl_k_sem_take+0xc8>)
   21f6e:	22a7      	movs	r2, #167	; 0xa7
   21f70:	f002 f964 	bl	2423c <printk>
   21f74:	21a7      	movs	r1, #167	; 0xa7
   21f76:	4817      	ldr	r0, [pc, #92]	; (21fd4 <z_impl_k_sem_take+0xd0>)
   21f78:	f002 fc12 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   21f7c:	f384 8811 	msr	BASEPRI, r4
   21f80:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21f84:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   21f86:	b003      	add	sp, #12
   21f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21f8a:	ea56 0307 	orrs.w	r3, r6, r7
   21f8e:	d113      	bne.n	21fb8 <z_impl_k_sem_take+0xb4>
   21f90:	480f      	ldr	r0, [pc, #60]	; (21fd0 <z_impl_k_sem_take+0xcc>)
   21f92:	f000 f97f 	bl	22294 <z_spin_unlock_valid>
   21f96:	b940      	cbnz	r0, 21faa <z_impl_k_sem_take+0xa6>
   21f98:	490e      	ldr	r1, [pc, #56]	; (21fd4 <z_impl_k_sem_take+0xd0>)
   21f9a:	480c      	ldr	r0, [pc, #48]	; (21fcc <z_impl_k_sem_take+0xc8>)
   21f9c:	22a7      	movs	r2, #167	; 0xa7
   21f9e:	f002 f94d 	bl	2423c <printk>
   21fa2:	21a7      	movs	r1, #167	; 0xa7
   21fa4:	480b      	ldr	r0, [pc, #44]	; (21fd4 <z_impl_k_sem_take+0xd0>)
   21fa6:	f002 fbfb 	bl	247a0 <assert_post_action>
   21faa:	f384 8811 	msr	BASEPRI, r4
   21fae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21fb2:	f06f 000f 	mvn.w	r0, #15
		goto out;
   21fb6:	e7e6      	b.n	21f86 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21fb8:	e9cd 6700 	strd	r6, r7, [sp]
   21fbc:	462a      	mov	r2, r5
   21fbe:	4621      	mov	r1, r4
   21fc0:	4803      	ldr	r0, [pc, #12]	; (21fd0 <z_impl_k_sem_take+0xcc>)
   21fc2:	f7ff fced 	bl	219a0 <z_pend_curr>
	return ret;
   21fc6:	e7de      	b.n	21f86 <z_impl_k_sem_take+0x82>
   21fc8:	00031a3f 	.word	0x00031a3f
   21fcc:	0002bced 	.word	0x0002bced
   21fd0:	200034d4 	.word	0x200034d4
   21fd4:	0002be01 	.word	0x0002be01

00021fd8 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21fd8:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   21fda:	4c08      	ldr	r4, [pc, #32]	; (21ffc <k_sys_work_q_init+0x24>)
   21fdc:	4908      	ldr	r1, [pc, #32]	; (22000 <k_sys_work_q_init+0x28>)
   21fde:	f04f 33ff 	mov.w	r3, #4294967295
   21fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21fe6:	4620      	mov	r0, r4
   21fe8:	f000 f998 	bl	2231c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   21fec:	4905      	ldr	r1, [pc, #20]	; (22004 <k_sys_work_q_init+0x2c>)
   21fee:	f104 0020 	add.w	r0, r4, #32
   21ff2:	f008 f98a 	bl	2a30a <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   21ff6:	2000      	movs	r0, #0
   21ff8:	bd10      	pop	{r4, pc}
   21ffa:	bf00      	nop
   21ffc:	20001988 	.word	0x20001988
   22000:	200058e0 	.word	0x200058e0
   22004:	00031a5f 	.word	0x00031a5f

00022008 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   22008:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2200c:	4698      	mov	r8, r3
   2200e:	4b32      	ldr	r3, [pc, #200]	; (220d8 <z_setup_new_thread+0xd0>)
   22010:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   22012:	f3bf 8f5b 	dmb	ish
   22016:	4616      	mov	r6, r2
   22018:	4604      	mov	r4, r0
   2201a:	460f      	mov	r7, r1
   2201c:	f100 0238 	add.w	r2, r0, #56	; 0x38
   22020:	e852 1f00 	ldrex	r1, [r2]
   22024:	e842 3000 	strex	r0, r3, [r2]
   22028:	2800      	cmp	r0, #0
   2202a:	d1f9      	bne.n	22020 <z_setup_new_thread+0x18>
   2202c:	f3bf 8f5b 	dmb	ish
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   22030:	4299      	cmp	r1, r3
   22032:	d10a      	bne.n	2204a <z_setup_new_thread+0x42>
   22034:	4929      	ldr	r1, [pc, #164]	; (220dc <z_setup_new_thread+0xd4>)
   22036:	482a      	ldr	r0, [pc, #168]	; (220e0 <z_setup_new_thread+0xd8>)
   22038:	f44f 7209 	mov.w	r2, #548	; 0x224
   2203c:	f002 f8fe 	bl	2423c <printk>
   22040:	f44f 7109 	mov.w	r1, #548	; 0x224
   22044:	4825      	ldr	r0, [pc, #148]	; (220dc <z_setup_new_thread+0xd4>)
   22046:	f002 fbab 	bl	247a0 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   2204a:	2d0f      	cmp	r5, #15
   2204c:	d133      	bne.n	220b6 <z_setup_new_thread+0xae>
   2204e:	4b25      	ldr	r3, [pc, #148]	; (220e4 <z_setup_new_thread+0xdc>)
   22050:	4598      	cmp	r8, r3
   22052:	d134      	bne.n	220be <z_setup_new_thread+0xb6>
	sys_dlist_init(&w->waitq);
   22054:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   22058:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   2205c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2205e:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   22060:	2304      	movs	r3, #4
   22062:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22064:	1df3      	adds	r3, r6, #7
   22066:	f023 0307 	bic.w	r3, r3, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2206a:	f107 0220 	add.w	r2, r7, #32
	new_thread->stack_info.size = stack_buf_size;
   2206e:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22072:	f103 0620 	add.w	r6, r3, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22078:	9302      	str	r3, [sp, #8]
   2207a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

	thread_base->prio = priority;
   2207c:	73a5      	strb	r5, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2207e:	9301      	str	r3, [sp, #4]

	thread_base->sched_locked = 0U;
   22080:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22084:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
   22086:	443e      	add	r6, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22088:	4643      	mov	r3, r8
	thread_base->sched_locked = 0U;
   2208a:	73e5      	strb	r5, [r4, #15]
	node->prev = NULL;
   2208c:	e9c4 5506 	strd	r5, r5, [r4, #24]
	new_thread->stack_info.delta = delta;
   22090:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   22092:	4632      	mov	r2, r6
   22094:	4639      	mov	r1, r7
   22096:	4620      	mov	r0, r4
   22098:	f7e4 fa54 	bl	6544 <arch_new_thread>
	if (!_current) {
   2209c:	4b12      	ldr	r3, [pc, #72]	; (220e8 <z_setup_new_thread+0xe0>)
   2209e:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   220a0:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   220a4:	b10b      	cbz	r3, 220aa <z_setup_new_thread+0xa2>
	new_thread->resource_pool = _current->resource_pool;
   220a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	return stack_ptr;
   220aa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
   220ae:	4630      	mov	r0, r6
   220b0:	b004      	add	sp, #16
   220b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   220b6:	f105 0310 	add.w	r3, r5, #16
   220ba:	2b1e      	cmp	r3, #30
   220bc:	d9ca      	bls.n	22054 <z_setup_new_thread+0x4c>
   220be:	f240 2226 	movw	r2, #550	; 0x226
   220c2:	4906      	ldr	r1, [pc, #24]	; (220dc <z_setup_new_thread+0xd4>)
   220c4:	4806      	ldr	r0, [pc, #24]	; (220e0 <z_setup_new_thread+0xd8>)
   220c6:	f002 f8b9 	bl	2423c <printk>
   220ca:	f240 2126 	movw	r1, #550	; 0x226
   220ce:	4803      	ldr	r0, [pc, #12]	; (220dc <z_setup_new_thread+0xd4>)
   220d0:	f002 fb66 	bl	247a0 <assert_post_action>
   220d4:	e7be      	b.n	22054 <z_setup_new_thread+0x4c>
   220d6:	bf00      	nop
   220d8:	1337c0d3 	.word	0x1337c0d3
   220dc:	00031a68 	.word	0x00031a68
   220e0:	0002bced 	.word	0x0002bced
   220e4:	000202ed 	.word	0x000202ed
   220e8:	20003490 	.word	0x20003490

000220ec <z_impl_k_thread_create>:
{
   220ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   220f0:	b087      	sub	sp, #28
   220f2:	4604      	mov	r4, r0
   220f4:	460d      	mov	r5, r1
   220f6:	4690      	mov	r8, r2
   220f8:	4699      	mov	r9, r3
   220fa:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   220fe:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   22102:	b153      	cbz	r3, 2211a <z_impl_k_thread_create+0x2e>
   22104:	4919      	ldr	r1, [pc, #100]	; (2216c <z_impl_k_thread_create+0x80>)
   22106:	481a      	ldr	r0, [pc, #104]	; (22170 <z_impl_k_thread_create+0x84>)
   22108:	f240 228f 	movw	r2, #655	; 0x28f
   2210c:	f002 f896 	bl	2423c <printk>
   22110:	f240 218f 	movw	r1, #655	; 0x28f
   22114:	4815      	ldr	r0, [pc, #84]	; (2216c <z_impl_k_thread_create+0x80>)
   22116:	f002 fb43 	bl	247a0 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2211a:	2300      	movs	r3, #0
   2211c:	9305      	str	r3, [sp, #20]
   2211e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22120:	9304      	str	r3, [sp, #16]
   22122:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22124:	9303      	str	r3, [sp, #12]
   22126:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22128:	9302      	str	r3, [sp, #8]
   2212a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2212c:	9301      	str	r3, [sp, #4]
   2212e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22130:	9300      	str	r3, [sp, #0]
   22132:	4642      	mov	r2, r8
   22134:	464b      	mov	r3, r9
   22136:	4629      	mov	r1, r5
   22138:	4620      	mov	r0, r4
   2213a:	f7ff ff65 	bl	22008 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2213e:	1c7b      	adds	r3, r7, #1
   22140:	bf08      	it	eq
   22142:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   22146:	d005      	beq.n	22154 <z_impl_k_thread_create+0x68>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22148:	ea56 0307 	orrs.w	r3, r6, r7
   2214c:	d106      	bne.n	2215c <z_impl_k_thread_create+0x70>
	z_sched_start(thread);
   2214e:	4620      	mov	r0, r4
   22150:	f7ff f8ea 	bl	21328 <z_sched_start>
}
   22154:	4620      	mov	r0, r4
   22156:	b007      	add	sp, #28
   22158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2215c:	4632      	mov	r2, r6
   2215e:	463b      	mov	r3, r7
   22160:	4904      	ldr	r1, [pc, #16]	; (22174 <z_impl_k_thread_create+0x88>)
   22162:	f104 0018 	add.w	r0, r4, #24
   22166:	f000 fa3d 	bl	225e4 <z_add_timeout>
   2216a:	e7f3      	b.n	22154 <z_impl_k_thread_create+0x68>
   2216c:	00031a68 	.word	0x00031a68
   22170:	0002bced 	.word	0x0002bced
   22174:	000213ad 	.word	0x000213ad

00022178 <z_init_static_threads>:
{
   22178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2217c:	4f39      	ldr	r7, [pc, #228]	; (22264 <z_init_static_threads+0xec>)
   2217e:	4d3a      	ldr	r5, [pc, #232]	; (22268 <z_init_static_threads+0xf0>)
   22180:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 22270 <z_init_static_threads+0xf8>
{
   22184:	b086      	sub	sp, #24
   22186:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   22188:	42bd      	cmp	r5, r7
   2218a:	d90a      	bls.n	221a2 <z_init_static_threads+0x2a>
   2218c:	4641      	mov	r1, r8
   2218e:	4837      	ldr	r0, [pc, #220]	; (2226c <z_init_static_threads+0xf4>)
   22190:	f240 22fd 	movw	r2, #765	; 0x2fd
   22194:	f002 f852 	bl	2423c <printk>
   22198:	f240 21fd 	movw	r1, #765	; 0x2fd
   2219c:	4640      	mov	r0, r8
   2219e:	f002 faff 	bl	247a0 <assert_post_action>
   221a2:	42b5      	cmp	r5, r6
   221a4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   221a8:	d31d      	bcc.n	221e6 <z_init_static_threads+0x6e>
	k_sched_lock();
   221aa:	f7fe feeb 	bl	20f84 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   221ae:	4c2e      	ldr	r4, [pc, #184]	; (22268 <z_init_static_threads+0xf0>)
   221b0:	4d2f      	ldr	r5, [pc, #188]	; (22270 <z_init_static_threads+0xf8>)
   221b2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2226c <z_init_static_threads+0xf4>
   221b6:	f240 38e7 	movw	r8, #999	; 0x3e7
   221ba:	f04f 0900 	mov.w	r9, #0
   221be:	42b4      	cmp	r4, r6
   221c0:	d90a      	bls.n	221d8 <z_init_static_threads+0x60>
   221c2:	4629      	mov	r1, r5
   221c4:	4650      	mov	r0, sl
   221c6:	f44f 7247 	mov.w	r2, #796	; 0x31c
   221ca:	f002 f837 	bl	2423c <printk>
   221ce:	f44f 7147 	mov.w	r1, #796	; 0x31c
   221d2:	4628      	mov	r0, r5
   221d4:	f002 fae4 	bl	247a0 <assert_post_action>
   221d8:	42b4      	cmp	r4, r6
   221da:	d321      	bcc.n	22220 <z_init_static_threads+0xa8>
}
   221dc:	b006      	add	sp, #24
   221de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   221e2:	f7fe bfc7 	b.w	21174 <k_sched_unlock>
		z_setup_new_thread(
   221e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   221ea:	9305      	str	r3, [sp, #20]
   221ec:	f854 3c10 	ldr.w	r3, [r4, #-16]
   221f0:	9304      	str	r3, [sp, #16]
   221f2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   221f6:	9303      	str	r3, [sp, #12]
   221f8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   221fc:	9302      	str	r3, [sp, #8]
   221fe:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   22202:	9301      	str	r3, [sp, #4]
   22204:	f854 3c20 	ldr.w	r3, [r4, #-32]
   22208:	9300      	str	r3, [sp, #0]
   2220a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2220e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   22212:	f7ff fef9 	bl	22008 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   22216:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2221a:	665d      	str	r5, [r3, #100]	; 0x64
   2221c:	4625      	mov	r5, r4
   2221e:	e7b3      	b.n	22188 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   22220:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22222:	1c5a      	adds	r2, r3, #1
   22224:	d00f      	beq.n	22246 <z_init_static_threads+0xce>
					    K_MSEC(thread_data->init_delay));
   22226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2222a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2222e:	4640      	mov	r0, r8
   22230:	4649      	mov	r1, r9
   22232:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22236:	4549      	cmp	r1, r9
   22238:	bf08      	it	eq
   2223a:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   2223c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2223e:	d104      	bne.n	2224a <z_init_static_threads+0xd2>
	z_sched_start(thread);
   22240:	4638      	mov	r0, r7
   22242:	f7ff f871 	bl	21328 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   22246:	3430      	adds	r4, #48	; 0x30
   22248:	e7b9      	b.n	221be <z_init_static_threads+0x46>
   2224a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2224e:	2300      	movs	r3, #0
   22250:	f7df fdfa 	bl	1e48 <__aeabi_uldivmod>
   22254:	4602      	mov	r2, r0
   22256:	460b      	mov	r3, r1
   22258:	f107 0018 	add.w	r0, r7, #24
   2225c:	4905      	ldr	r1, [pc, #20]	; (22274 <z_init_static_threads+0xfc>)
   2225e:	f000 f9c1 	bl	225e4 <z_add_timeout>
   22262:	e7f0      	b.n	22246 <z_init_static_threads+0xce>
   22264:	20000cd4 	.word	0x20000cd4
   22268:	20000cd4 	.word	0x20000cd4
   2226c:	0002bced 	.word	0x0002bced
   22270:	00031a68 	.word	0x00031a68
   22274:	000213ad 	.word	0x000213ad

00022278 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   22278:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   2227a:	b138      	cbz	r0, 2228c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2227c:	4b04      	ldr	r3, [pc, #16]	; (22290 <z_spin_lock_valid+0x18>)
   2227e:	7e1b      	ldrb	r3, [r3, #24]
   22280:	f000 0003 	and.w	r0, r0, #3
   22284:	1ac0      	subs	r0, r0, r3
   22286:	bf18      	it	ne
   22288:	2001      	movne	r0, #1
   2228a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2228c:	2001      	movs	r0, #1
}
   2228e:	4770      	bx	lr
   22290:	20003490 	.word	0x20003490

00022294 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   22294:	4a06      	ldr	r2, [pc, #24]	; (222b0 <z_spin_unlock_valid+0x1c>)
   22296:	7e11      	ldrb	r1, [r2, #24]
   22298:	6893      	ldr	r3, [r2, #8]
   2229a:	6802      	ldr	r2, [r0, #0]
   2229c:	430b      	orrs	r3, r1
   2229e:	429a      	cmp	r2, r3
   222a0:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   222a4:	bf06      	itte	eq
   222a6:	6003      	streq	r3, [r0, #0]
	return true;
   222a8:	2001      	moveq	r0, #1
		return false;
   222aa:	4618      	movne	r0, r3
}
   222ac:	4770      	bx	lr
   222ae:	bf00      	nop
   222b0:	20003490 	.word	0x20003490

000222b4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   222b4:	4a02      	ldr	r2, [pc, #8]	; (222c0 <z_spin_lock_set_owner+0xc>)
   222b6:	7e11      	ldrb	r1, [r2, #24]
   222b8:	6893      	ldr	r3, [r2, #8]
   222ba:	430b      	orrs	r3, r1
   222bc:	6003      	str	r3, [r0, #0]
}
   222be:	4770      	bx	lr
   222c0:	20003490 	.word	0x20003490

000222c4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   222c4:	b508      	push	{r3, lr}
	__asm__ volatile(
   222c6:	f04f 0320 	mov.w	r3, #32
   222ca:	f3ef 8511 	mrs	r5, BASEPRI
   222ce:	f383 8811 	msr	BASEPRI, r3
   222d2:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   222d6:	4c0e      	ldr	r4, [pc, #56]	; (22310 <z_self_abort+0x4c>)
   222d8:	6923      	ldr	r3, [r4, #16]
   222da:	b143      	cbz	r3, 222ee <z_self_abort+0x2a>
   222dc:	490d      	ldr	r1, [pc, #52]	; (22314 <z_self_abort+0x50>)
   222de:	480e      	ldr	r0, [pc, #56]	; (22318 <z_self_abort+0x54>)
   222e0:	2228      	movs	r2, #40	; 0x28
   222e2:	f001 ffab 	bl	2423c <printk>
   222e6:	2128      	movs	r1, #40	; 0x28
   222e8:	480a      	ldr	r0, [pc, #40]	; (22314 <z_self_abort+0x50>)
   222ea:	f002 fa59 	bl	247a0 <assert_post_action>
	cpu->pending_abort = _current;
   222ee:	68a0      	ldr	r0, [r4, #8]
   222f0:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   222f2:	f7ff f951 	bl	21598 <z_impl_k_thread_suspend>
   222f6:	4628      	mov	r0, r5
   222f8:	f7e4 f864 	bl	63c4 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   222fc:	4905      	ldr	r1, [pc, #20]	; (22314 <z_self_abort+0x50>)
   222fe:	4806      	ldr	r0, [pc, #24]	; (22318 <z_self_abort+0x54>)
   22300:	2230      	movs	r2, #48	; 0x30
   22302:	f001 ff9b 	bl	2423c <printk>
   22306:	2130      	movs	r1, #48	; 0x30
   22308:	4802      	ldr	r0, [pc, #8]	; (22314 <z_self_abort+0x50>)
   2230a:	f002 fa49 	bl	247a0 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2230e:	bf00      	nop
   22310:	20003490 	.word	0x20003490
   22314:	00031a8b 	.word	0x00031a8b
   22318:	0002bced 	.word	0x0002bced

0002231c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   2231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22320:	4605      	mov	r5, r0
   22322:	b088      	sub	sp, #32
   22324:	460e      	mov	r6, r1
   22326:	4617      	mov	r7, r2
   22328:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   2232a:	f007 ff6e 	bl	2a20a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2232e:	f105 0420 	add.w	r4, r5, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22332:	2000      	movs	r0, #0
   22334:	2200      	movs	r2, #0
   22336:	2300      	movs	r3, #0
   22338:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2233c:	e9cd 8003 	strd	r8, r0, [sp, #12]
   22340:	e9cd 0001 	strd	r0, r0, [sp, #4]
   22344:	9500      	str	r5, [sp, #0]
   22346:	4b06      	ldr	r3, [pc, #24]	; (22360 <k_work_q_start+0x44>)
   22348:	463a      	mov	r2, r7
   2234a:	4631      	mov	r1, r6
   2234c:	4620      	mov	r0, r4
   2234e:	f7ff fecd 	bl	220ec <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   22352:	4904      	ldr	r1, [pc, #16]	; (22364 <k_work_q_start+0x48>)
   22354:	4620      	mov	r0, r4
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   22356:	b008      	add	sp, #32
   22358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2235c:	f007 bfd5 	b.w	2a30a <z_impl_k_thread_name_set>
   22360:	00004161 	.word	0x00004161
   22364:	00031ab4 	.word	0x00031ab4

00022368 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   22368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2236c:	4606      	mov	r6, r0
   2236e:	460d      	mov	r5, r1
   22370:	4690      	mov	r8, r2
   22372:	4699      	mov	r9, r3
   22374:	f04f 0320 	mov.w	r3, #32
   22378:	f3ef 8711 	mrs	r7, BASEPRI
   2237c:	f383 8811 	msr	BASEPRI, r3
   22380:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22384:	482c      	ldr	r0, [pc, #176]	; (22438 <k_delayed_work_submit_to_queue+0xd0>)
   22386:	f7ff ff77 	bl	22278 <z_spin_lock_valid>
   2238a:	b940      	cbnz	r0, 2239e <k_delayed_work_submit_to_queue+0x36>
   2238c:	492b      	ldr	r1, [pc, #172]	; (2243c <k_delayed_work_submit_to_queue+0xd4>)
   2238e:	482c      	ldr	r0, [pc, #176]	; (22440 <k_delayed_work_submit_to_queue+0xd8>)
   22390:	227c      	movs	r2, #124	; 0x7c
   22392:	f001 ff53 	bl	2423c <printk>
   22396:	217c      	movs	r1, #124	; 0x7c
   22398:	4828      	ldr	r0, [pc, #160]	; (2243c <k_delayed_work_submit_to_queue+0xd4>)
   2239a:	f002 fa01 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2239e:	4826      	ldr	r0, [pc, #152]	; (22438 <k_delayed_work_submit_to_queue+0xd0>)
   223a0:	f7ff ff88 	bl	222b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   223a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   223a6:	b1e3      	cbz	r3, 223e2 <k_delayed_work_submit_to_queue+0x7a>
   223a8:	42b3      	cmp	r3, r6
   223aa:	d142      	bne.n	22432 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   223ac:	4628      	mov	r0, r5
   223ae:	f007 ffd0 	bl	2a352 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   223b2:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   223b6:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   223b8:	d015      	beq.n	223e6 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   223ba:	2800      	cmp	r0, #0
   223bc:	da14      	bge.n	223e8 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   223be:	481e      	ldr	r0, [pc, #120]	; (22438 <k_delayed_work_submit_to_queue+0xd0>)
   223c0:	f7ff ff68 	bl	22294 <z_spin_unlock_valid>
   223c4:	b940      	cbnz	r0, 223d8 <k_delayed_work_submit_to_queue+0x70>
   223c6:	491d      	ldr	r1, [pc, #116]	; (2243c <k_delayed_work_submit_to_queue+0xd4>)
   223c8:	481d      	ldr	r0, [pc, #116]	; (22440 <k_delayed_work_submit_to_queue+0xd8>)
   223ca:	22a7      	movs	r2, #167	; 0xa7
   223cc:	f001 ff36 	bl	2423c <printk>
   223d0:	21a7      	movs	r1, #167	; 0xa7
   223d2:	481a      	ldr	r0, [pc, #104]	; (2243c <k_delayed_work_submit_to_queue+0xd4>)
   223d4:	f002 f9e4 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   223d8:	f387 8811 	msr	BASEPRI, r7
   223dc:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   223e0:	e01c      	b.n	2241c <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   223e2:	2e00      	cmp	r6, #0
   223e4:	d0e2      	beq.n	223ac <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   223e6:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   223e8:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   223ec:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   223ee:	d118      	bne.n	22422 <k_delayed_work_submit_to_queue+0xba>
   223f0:	4811      	ldr	r0, [pc, #68]	; (22438 <k_delayed_work_submit_to_queue+0xd0>)
   223f2:	f7ff ff4f 	bl	22294 <z_spin_unlock_valid>
   223f6:	b940      	cbnz	r0, 2240a <k_delayed_work_submit_to_queue+0xa2>
   223f8:	4910      	ldr	r1, [pc, #64]	; (2243c <k_delayed_work_submit_to_queue+0xd4>)
   223fa:	4811      	ldr	r0, [pc, #68]	; (22440 <k_delayed_work_submit_to_queue+0xd8>)
   223fc:	22a7      	movs	r2, #167	; 0xa7
   223fe:	f001 ff1d 	bl	2423c <printk>
   22402:	21a7      	movs	r1, #167	; 0xa7
   22404:	480d      	ldr	r0, [pc, #52]	; (2243c <k_delayed_work_submit_to_queue+0xd4>)
   22406:	f002 f9cb 	bl	247a0 <assert_post_action>
   2240a:	f387 8811 	msr	BASEPRI, r7
   2240e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   22412:	4629      	mov	r1, r5
   22414:	4630      	mov	r0, r6
   22416:	f007 ff7f 	bl	2a318 <k_work_submit_to_queue>
		return 0;
   2241a:	2400      	movs	r4, #0
}
   2241c:	4620      	mov	r0, r4
   2241e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   22422:	4642      	mov	r2, r8
   22424:	464b      	mov	r3, r9
   22426:	4907      	ldr	r1, [pc, #28]	; (22444 <k_delayed_work_submit_to_queue+0xdc>)
   22428:	f105 0010 	add.w	r0, r5, #16
   2242c:	f000 f8da 	bl	225e4 <z_add_timeout>
   22430:	e7c5      	b.n	223be <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   22432:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   22436:	e7c2      	b.n	223be <k_delayed_work_submit_to_queue+0x56>
   22438:	200034d8 	.word	0x200034d8
   2243c:	0002be01 	.word	0x0002be01
   22440:	0002bced 	.word	0x0002bced
   22444:	0002a349 	.word	0x0002a349

00022448 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   22448:	b538      	push	{r3, r4, r5, lr}
   2244a:	4604      	mov	r4, r0
	__asm__ volatile(
   2244c:	f04f 0320 	mov.w	r3, #32
   22450:	f3ef 8511 	mrs	r5, BASEPRI
   22454:	f383 8811 	msr	BASEPRI, r3
   22458:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2245c:	4815      	ldr	r0, [pc, #84]	; (224b4 <k_delayed_work_cancel+0x6c>)
   2245e:	f7ff ff0b 	bl	22278 <z_spin_lock_valid>
   22462:	b940      	cbnz	r0, 22476 <k_delayed_work_cancel+0x2e>
   22464:	4914      	ldr	r1, [pc, #80]	; (224b8 <k_delayed_work_cancel+0x70>)
   22466:	4815      	ldr	r0, [pc, #84]	; (224bc <k_delayed_work_cancel+0x74>)
   22468:	227c      	movs	r2, #124	; 0x7c
   2246a:	f001 fee7 	bl	2423c <printk>
   2246e:	217c      	movs	r1, #124	; 0x7c
   22470:	4811      	ldr	r0, [pc, #68]	; (224b8 <k_delayed_work_cancel+0x70>)
   22472:	f002 f995 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22476:	480f      	ldr	r0, [pc, #60]	; (224b4 <k_delayed_work_cancel+0x6c>)
   22478:	f7ff ff1c 	bl	222b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   2247c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2247e:	b1b3      	cbz	r3, 224ae <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   22480:	4620      	mov	r0, r4
   22482:	f007 ff66 	bl	2a352 <work_cancel>
   22486:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22488:	480a      	ldr	r0, [pc, #40]	; (224b4 <k_delayed_work_cancel+0x6c>)
   2248a:	f7ff ff03 	bl	22294 <z_spin_unlock_valid>
   2248e:	b940      	cbnz	r0, 224a2 <k_delayed_work_cancel+0x5a>
   22490:	4909      	ldr	r1, [pc, #36]	; (224b8 <k_delayed_work_cancel+0x70>)
   22492:	480a      	ldr	r0, [pc, #40]	; (224bc <k_delayed_work_cancel+0x74>)
   22494:	22a7      	movs	r2, #167	; 0xa7
   22496:	f001 fed1 	bl	2423c <printk>
   2249a:	21a7      	movs	r1, #167	; 0xa7
   2249c:	4806      	ldr	r0, [pc, #24]	; (224b8 <k_delayed_work_cancel+0x70>)
   2249e:	f002 f97f 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   224a2:	f385 8811 	msr	BASEPRI, r5
   224a6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   224aa:	4620      	mov	r0, r4
   224ac:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   224ae:	f06f 0415 	mvn.w	r4, #21
   224b2:	e7e9      	b.n	22488 <k_delayed_work_cancel+0x40>
   224b4:	200034d8 	.word	0x200034d8
   224b8:	0002be01 	.word	0x0002be01
   224bc:	0002bced 	.word	0x0002bced

000224c0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   224c0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   224c2:	4806      	ldr	r0, [pc, #24]	; (224dc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   224c4:	4a06      	ldr	r2, [pc, #24]	; (224e0 <z_data_copy+0x20>)
   224c6:	4907      	ldr	r1, [pc, #28]	; (224e4 <z_data_copy+0x24>)
   224c8:	1a12      	subs	r2, r2, r0
   224ca:	f003 fe49 	bl	26160 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   224ce:	4a06      	ldr	r2, [pc, #24]	; (224e8 <z_data_copy+0x28>)
   224d0:	4906      	ldr	r1, [pc, #24]	; (224ec <z_data_copy+0x2c>)
   224d2:	4807      	ldr	r0, [pc, #28]	; (224f0 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   224d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   224d8:	f003 be42 	b.w	26160 <memcpy>
   224dc:	20000000 	.word	0x20000000
   224e0:	20000f8c 	.word	0x20000f8c
   224e4:	00031b04 	.word	0x00031b04
   224e8:	00000000 	.word	0x00000000
   224ec:	00031b04 	.word	0x00031b04
   224f0:	20000000 	.word	0x20000000

000224f4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   224f4:	4b03      	ldr	r3, [pc, #12]	; (22504 <elapsed+0x10>)
   224f6:	681b      	ldr	r3, [r3, #0]
   224f8:	b90b      	cbnz	r3, 224fe <elapsed+0xa>
   224fa:	f7e3 bcc5 	b.w	5e88 <z_clock_elapsed>
}
   224fe:	2000      	movs	r0, #0
   22500:	4770      	bx	lr
   22502:	bf00      	nop
   22504:	200034dc 	.word	0x200034dc

00022508 <remove_timeout>:
{
   22508:	b530      	push	{r4, r5, lr}
   2250a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2250c:	b168      	cbz	r0, 2252a <remove_timeout+0x22>
   2250e:	4a0a      	ldr	r2, [pc, #40]	; (22538 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   22510:	6852      	ldr	r2, [r2, #4]
   22512:	4290      	cmp	r0, r2
   22514:	d009      	beq.n	2252a <remove_timeout+0x22>
	if (next(t) != NULL) {
   22516:	b143      	cbz	r3, 2252a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22518:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2251c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22520:	1912      	adds	r2, r2, r4
   22522:	eb45 0101 	adc.w	r1, r5, r1
   22526:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   2252a:	6842      	ldr	r2, [r0, #4]
   2252c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2252e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22530:	2300      	movs	r3, #0
	node->prev = NULL;
   22532:	e9c0 3300 	strd	r3, r3, [r0]
}
   22536:	bd30      	pop	{r4, r5, pc}
   22538:	20000b14 	.word	0x20000b14

0002253c <next_timeout>:

static int32_t next_timeout(void)
{
   2253c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2253e:	4b13      	ldr	r3, [pc, #76]	; (2258c <next_timeout+0x50>)
   22540:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22542:	429c      	cmp	r4, r3
   22544:	bf08      	it	eq
   22546:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22548:	f7ff ffd4 	bl	224f4 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   2254c:	b1c4      	cbz	r4, 22580 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2254e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22552:	1a14      	subs	r4, r2, r0
   22554:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   22558:	2c01      	cmp	r4, #1
   2255a:	f175 0300 	sbcs.w	r3, r5, #0
   2255e:	db12      	blt.n	22586 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   22560:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   22564:	2300      	movs	r3, #0
   22566:	42a2      	cmp	r2, r4
   22568:	4620      	mov	r0, r4
   2256a:	eb73 0405 	sbcs.w	r4, r3, r5
   2256e:	da00      	bge.n	22572 <next_timeout+0x36>
   22570:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22572:	4b07      	ldr	r3, [pc, #28]	; (22590 <next_timeout+0x54>)
   22574:	695b      	ldr	r3, [r3, #20]
   22576:	b113      	cbz	r3, 2257e <next_timeout+0x42>
   22578:	4298      	cmp	r0, r3
   2257a:	bfa8      	it	ge
   2257c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2257e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   22580:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22584:	e7f5      	b.n	22572 <next_timeout+0x36>
   22586:	2000      	movs	r0, #0
   22588:	e7f3      	b.n	22572 <next_timeout+0x36>
   2258a:	bf00      	nop
   2258c:	20000b14 	.word	0x20000b14
   22590:	20003490 	.word	0x20003490

00022594 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   22594:	6803      	ldr	r3, [r0, #0]
{
   22596:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   22598:	b1fb      	cbz	r3, 225da <timeout_rem+0x46>
	return list->head == list;
   2259a:	4a11      	ldr	r2, [pc, #68]	; (225e0 <timeout_rem+0x4c>)
   2259c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2259e:	4293      	cmp	r3, r2
   225a0:	d018      	beq.n	225d4 <timeout_rem+0x40>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   225a2:	6851      	ldr	r1, [r2, #4]
   225a4:	2400      	movs	r4, #0
   225a6:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   225a8:	b93b      	cbnz	r3, 225ba <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   225aa:	f7ff ffa3 	bl	224f4 <elapsed>
   225ae:	1a22      	subs	r2, r4, r0
   225b0:	eb65 73e0 	sbc.w	r3, r5, r0, asr #31
   225b4:	4619      	mov	r1, r3
   225b6:	4610      	mov	r0, r2
}
   225b8:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   225ba:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   225be:	18a4      	adds	r4, r4, r2
   225c0:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   225c4:	4283      	cmp	r3, r0
   225c6:	d0f0      	beq.n	225aa <timeout_rem+0x16>
   225c8:	2b00      	cmp	r3, #0
   225ca:	d0ee      	beq.n	225aa <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   225cc:	428b      	cmp	r3, r1
   225ce:	d0ec      	beq.n	225aa <timeout_rem+0x16>
   225d0:	681b      	ldr	r3, [r3, #0]
   225d2:	e7e9      	b.n	225a8 <timeout_rem+0x14>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225d4:	2400      	movs	r4, #0
   225d6:	2500      	movs	r5, #0
   225d8:	e7e7      	b.n	225aa <timeout_rem+0x16>
		return 0;
   225da:	2000      	movs	r0, #0
   225dc:	2100      	movs	r1, #0
   225de:	e7eb      	b.n	225b8 <timeout_rem+0x24>
   225e0:	20000b14 	.word	0x20000b14

000225e4 <z_add_timeout>:
{
   225e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225e8:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   225ea:	1c59      	adds	r1, r3, #1
   225ec:	bf08      	it	eq
   225ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   225f2:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   225f4:	f000 809d 	beq.w	22732 <z_add_timeout+0x14e>
	k_ticks_t ticks = timeout.ticks + 1;
   225f8:	1c54      	adds	r4, r2, #1
   225fa:	f143 0500 	adc.w	r5, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   225fe:	f06f 0301 	mvn.w	r3, #1
   22602:	ebb3 0804 	subs.w	r8, r3, r4
   22606:	f04f 3bff 	mov.w	fp, #4294967295
   2260a:	eb6b 0905 	sbc.w	r9, fp, r5
   2260e:	f1b8 0f00 	cmp.w	r8, #0
   22612:	f179 0300 	sbcs.w	r3, r9, #0
   22616:	db0f      	blt.n	22638 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   22618:	f7ff ff6c 	bl	224f4 <elapsed>
   2261c:	4a4b      	ldr	r2, [pc, #300]	; (2274c <z_add_timeout+0x168>)
   2261e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   22622:	f06f 0301 	mvn.w	r3, #1
   22626:	1a5b      	subs	r3, r3, r1
   22628:	eb6b 020c 	sbc.w	r2, fp, ip
   2262c:	1b1e      	subs	r6, r3, r4
   2262e:	eb62 0705 	sbc.w	r7, r2, r5
   22632:	1a34      	subs	r4, r6, r0
   22634:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22638:	f8da 3000 	ldr.w	r3, [sl]
   2263c:	b143      	cbz	r3, 22650 <z_add_timeout+0x6c>
   2263e:	4944      	ldr	r1, [pc, #272]	; (22750 <z_add_timeout+0x16c>)
   22640:	4844      	ldr	r0, [pc, #272]	; (22754 <z_add_timeout+0x170>)
   22642:	2268      	movs	r2, #104	; 0x68
   22644:	f001 fdfa 	bl	2423c <printk>
   22648:	2168      	movs	r1, #104	; 0x68
   2264a:	4841      	ldr	r0, [pc, #260]	; (22750 <z_add_timeout+0x16c>)
   2264c:	f002 f8a8 	bl	247a0 <assert_post_action>
	to->fn = fn;
   22650:	9b01      	ldr	r3, [sp, #4]
   22652:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   22656:	2c01      	cmp	r4, #1
   22658:	f175 0300 	sbcs.w	r3, r5, #0
   2265c:	4627      	mov	r7, r4
   2265e:	46a8      	mov	r8, r5
   22660:	bfbc      	itt	lt
   22662:	2701      	movlt	r7, #1
   22664:	f04f 0800 	movlt.w	r8, #0
	__asm__ volatile(
   22668:	f04f 0320 	mov.w	r3, #32
   2266c:	f3ef 8611 	mrs	r6, BASEPRI
   22670:	f383 8811 	msr	BASEPRI, r3
   22674:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22678:	4837      	ldr	r0, [pc, #220]	; (22758 <z_add_timeout+0x174>)
   2267a:	f7ff fdfd 	bl	22278 <z_spin_lock_valid>
   2267e:	b940      	cbnz	r0, 22692 <z_add_timeout+0xae>
   22680:	4936      	ldr	r1, [pc, #216]	; (2275c <z_add_timeout+0x178>)
   22682:	4834      	ldr	r0, [pc, #208]	; (22754 <z_add_timeout+0x170>)
   22684:	227c      	movs	r2, #124	; 0x7c
   22686:	f001 fdd9 	bl	2423c <printk>
   2268a:	217c      	movs	r1, #124	; 0x7c
   2268c:	4833      	ldr	r0, [pc, #204]	; (2275c <z_add_timeout+0x178>)
   2268e:	f002 f887 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22692:	4831      	ldr	r0, [pc, #196]	; (22758 <z_add_timeout+0x174>)
   22694:	f7ff fe0e 	bl	222b4 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   22698:	f7ff ff2c 	bl	224f4 <elapsed>
	return list->head == list;
   2269c:	4b30      	ldr	r3, [pc, #192]	; (22760 <z_add_timeout+0x17c>)
   2269e:	681a      	ldr	r2, [r3, #0]
   226a0:	183c      	adds	r4, r7, r0
   226a2:	eb48 75e0 	adc.w	r5, r8, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   226a6:	429a      	cmp	r2, r3
   226a8:	e9ca 4504 	strd	r4, r5, [sl, #16]
   226ac:	d001      	beq.n	226b2 <z_add_timeout+0xce>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   226ae:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   226b0:	b952      	cbnz	r2, 226c8 <z_add_timeout+0xe4>
	node->prev = list->tail;
   226b2:	685a      	ldr	r2, [r3, #4]
   226b4:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   226b8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   226ba:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   226be:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   226c2:	f8c3 a004 	str.w	sl, [r3, #4]
   226c6:	e014      	b.n	226f2 <z_add_timeout+0x10e>
			if (t->dticks > to->dticks) {
   226c8:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   226cc:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   226d0:	4544      	cmp	r4, r8
   226d2:	eb75 0109 	sbcs.w	r1, r5, r9
   226d6:	da2f      	bge.n	22738 <z_add_timeout+0x154>
				t->dticks -= to->dticks;
   226d8:	ebb8 0004 	subs.w	r0, r8, r4
   226dc:	eb69 0105 	sbc.w	r1, r9, r5
   226e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   226e4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   226e6:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   226ea:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   226ee:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   226f2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   226f4:	429a      	cmp	r2, r3
   226f6:	d00b      	beq.n	22710 <z_add_timeout+0x12c>
		if (to == first()) {
   226f8:	4592      	cmp	sl, r2
   226fa:	d109      	bne.n	22710 <z_add_timeout+0x12c>
			int32_t next_time = next_timeout();
   226fc:	f7ff ff1e 	bl	2253c <next_timeout>
			if (next_time == 0 ||
   22700:	b118      	cbz	r0, 2270a <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
   22702:	4b18      	ldr	r3, [pc, #96]	; (22764 <z_add_timeout+0x180>)
			if (next_time == 0 ||
   22704:	695b      	ldr	r3, [r3, #20]
   22706:	4283      	cmp	r3, r0
   22708:	d002      	beq.n	22710 <z_add_timeout+0x12c>
				z_clock_set_timeout(next_time, false);
   2270a:	2100      	movs	r1, #0
   2270c:	f7e3 fb8a 	bl	5e24 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22710:	4811      	ldr	r0, [pc, #68]	; (22758 <z_add_timeout+0x174>)
   22712:	f7ff fdbf 	bl	22294 <z_spin_unlock_valid>
   22716:	b940      	cbnz	r0, 2272a <z_add_timeout+0x146>
   22718:	4910      	ldr	r1, [pc, #64]	; (2275c <z_add_timeout+0x178>)
   2271a:	480e      	ldr	r0, [pc, #56]	; (22754 <z_add_timeout+0x170>)
   2271c:	22a7      	movs	r2, #167	; 0xa7
   2271e:	f001 fd8d 	bl	2423c <printk>
   22722:	21a7      	movs	r1, #167	; 0xa7
   22724:	480d      	ldr	r0, [pc, #52]	; (2275c <z_add_timeout+0x178>)
   22726:	f002 f83b 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   2272a:	f386 8811 	msr	BASEPRI, r6
   2272e:	f3bf 8f6f 	isb	sy
}
   22732:	b003      	add	sp, #12
   22734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   22738:	ebb4 0008 	subs.w	r0, r4, r8
   2273c:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   22740:	42ba      	cmp	r2, r7
   22742:	e9ca 0104 	strd	r0, r1, [sl, #16]
   22746:	d0b4      	beq.n	226b2 <z_add_timeout+0xce>
   22748:	6812      	ldr	r2, [r2, #0]
   2274a:	e7b1      	b.n	226b0 <z_add_timeout+0xcc>
   2274c:	20001a38 	.word	0x20001a38
   22750:	00031abe 	.word	0x00031abe
   22754:	0002bced 	.word	0x0002bced
   22758:	200034e0 	.word	0x200034e0
   2275c:	0002be01 	.word	0x0002be01
   22760:	20000b14 	.word	0x20000b14
   22764:	20003490 	.word	0x20003490

00022768 <z_abort_timeout>:
{
   22768:	b538      	push	{r3, r4, r5, lr}
   2276a:	4604      	mov	r4, r0
	__asm__ volatile(
   2276c:	f04f 0320 	mov.w	r3, #32
   22770:	f3ef 8511 	mrs	r5, BASEPRI
   22774:	f383 8811 	msr	BASEPRI, r3
   22778:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2277c:	4815      	ldr	r0, [pc, #84]	; (227d4 <z_abort_timeout+0x6c>)
   2277e:	f7ff fd7b 	bl	22278 <z_spin_lock_valid>
   22782:	b940      	cbnz	r0, 22796 <z_abort_timeout+0x2e>
   22784:	4914      	ldr	r1, [pc, #80]	; (227d8 <z_abort_timeout+0x70>)
   22786:	4815      	ldr	r0, [pc, #84]	; (227dc <z_abort_timeout+0x74>)
   22788:	227c      	movs	r2, #124	; 0x7c
   2278a:	f001 fd57 	bl	2423c <printk>
   2278e:	217c      	movs	r1, #124	; 0x7c
   22790:	4811      	ldr	r0, [pc, #68]	; (227d8 <z_abort_timeout+0x70>)
   22792:	f002 f805 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22796:	480f      	ldr	r0, [pc, #60]	; (227d4 <z_abort_timeout+0x6c>)
   22798:	f7ff fd8c 	bl	222b4 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   2279c:	6823      	ldr	r3, [r4, #0]
   2279e:	b1b3      	cbz	r3, 227ce <z_abort_timeout+0x66>
			remove_timeout(to);
   227a0:	4620      	mov	r0, r4
   227a2:	f7ff feb1 	bl	22508 <remove_timeout>
			ret = 0;
   227a6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227a8:	480a      	ldr	r0, [pc, #40]	; (227d4 <z_abort_timeout+0x6c>)
   227aa:	f7ff fd73 	bl	22294 <z_spin_unlock_valid>
   227ae:	b940      	cbnz	r0, 227c2 <z_abort_timeout+0x5a>
   227b0:	4909      	ldr	r1, [pc, #36]	; (227d8 <z_abort_timeout+0x70>)
   227b2:	480a      	ldr	r0, [pc, #40]	; (227dc <z_abort_timeout+0x74>)
   227b4:	22a7      	movs	r2, #167	; 0xa7
   227b6:	f001 fd41 	bl	2423c <printk>
   227ba:	21a7      	movs	r1, #167	; 0xa7
   227bc:	4806      	ldr	r0, [pc, #24]	; (227d8 <z_abort_timeout+0x70>)
   227be:	f001 ffef 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   227c2:	f385 8811 	msr	BASEPRI, r5
   227c6:	f3bf 8f6f 	isb	sy
}
   227ca:	4620      	mov	r0, r4
   227cc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   227ce:	f06f 0415 	mvn.w	r4, #21
   227d2:	e7e9      	b.n	227a8 <z_abort_timeout+0x40>
   227d4:	200034e0 	.word	0x200034e0
   227d8:	0002be01 	.word	0x0002be01
   227dc:	0002bced 	.word	0x0002bced

000227e0 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   227e0:	b570      	push	{r4, r5, r6, lr}
   227e2:	4604      	mov	r4, r0
	__asm__ volatile(
   227e4:	f04f 0320 	mov.w	r3, #32
   227e8:	f3ef 8611 	mrs	r6, BASEPRI
   227ec:	f383 8811 	msr	BASEPRI, r3
   227f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   227f4:	4814      	ldr	r0, [pc, #80]	; (22848 <z_timeout_remaining+0x68>)
   227f6:	f7ff fd3f 	bl	22278 <z_spin_lock_valid>
   227fa:	b940      	cbnz	r0, 2280e <z_timeout_remaining+0x2e>
   227fc:	4913      	ldr	r1, [pc, #76]	; (2284c <z_timeout_remaining+0x6c>)
   227fe:	4814      	ldr	r0, [pc, #80]	; (22850 <z_timeout_remaining+0x70>)
   22800:	227c      	movs	r2, #124	; 0x7c
   22802:	f001 fd1b 	bl	2423c <printk>
   22806:	217c      	movs	r1, #124	; 0x7c
   22808:	4810      	ldr	r0, [pc, #64]	; (2284c <z_timeout_remaining+0x6c>)
   2280a:	f001 ffc9 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   2280e:	480e      	ldr	r0, [pc, #56]	; (22848 <z_timeout_remaining+0x68>)
   22810:	f7ff fd50 	bl	222b4 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   22814:	4620      	mov	r0, r4
   22816:	f7ff febd 	bl	22594 <timeout_rem>
   2281a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2281c:	480a      	ldr	r0, [pc, #40]	; (22848 <z_timeout_remaining+0x68>)
   2281e:	460d      	mov	r5, r1
   22820:	f7ff fd38 	bl	22294 <z_spin_unlock_valid>
   22824:	b940      	cbnz	r0, 22838 <z_timeout_remaining+0x58>
   22826:	4909      	ldr	r1, [pc, #36]	; (2284c <z_timeout_remaining+0x6c>)
   22828:	4809      	ldr	r0, [pc, #36]	; (22850 <z_timeout_remaining+0x70>)
   2282a:	22a7      	movs	r2, #167	; 0xa7
   2282c:	f001 fd06 	bl	2423c <printk>
   22830:	21a7      	movs	r1, #167	; 0xa7
   22832:	4806      	ldr	r0, [pc, #24]	; (2284c <z_timeout_remaining+0x6c>)
   22834:	f001 ffb4 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   22838:	f386 8811 	msr	BASEPRI, r6
   2283c:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   22840:	4620      	mov	r0, r4
   22842:	4629      	mov	r1, r5
   22844:	bd70      	pop	{r4, r5, r6, pc}
   22846:	bf00      	nop
   22848:	200034e0 	.word	0x200034e0
   2284c:	0002be01 	.word	0x0002be01
   22850:	0002bced 	.word	0x0002bced

00022854 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   22854:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22856:	f04f 0320 	mov.w	r3, #32
   2285a:	f3ef 8511 	mrs	r5, BASEPRI
   2285e:	f383 8811 	msr	BASEPRI, r3
   22862:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22866:	4813      	ldr	r0, [pc, #76]	; (228b4 <z_get_next_timeout_expiry+0x60>)
   22868:	f7ff fd06 	bl	22278 <z_spin_lock_valid>
   2286c:	b940      	cbnz	r0, 22880 <z_get_next_timeout_expiry+0x2c>
   2286e:	4912      	ldr	r1, [pc, #72]	; (228b8 <z_get_next_timeout_expiry+0x64>)
   22870:	4812      	ldr	r0, [pc, #72]	; (228bc <z_get_next_timeout_expiry+0x68>)
   22872:	227c      	movs	r2, #124	; 0x7c
   22874:	f001 fce2 	bl	2423c <printk>
   22878:	217c      	movs	r1, #124	; 0x7c
   2287a:	480f      	ldr	r0, [pc, #60]	; (228b8 <z_get_next_timeout_expiry+0x64>)
   2287c:	f001 ff90 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22880:	480c      	ldr	r0, [pc, #48]	; (228b4 <z_get_next_timeout_expiry+0x60>)
   22882:	f7ff fd17 	bl	222b4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   22886:	f7ff fe59 	bl	2253c <next_timeout>
   2288a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2288c:	4809      	ldr	r0, [pc, #36]	; (228b4 <z_get_next_timeout_expiry+0x60>)
   2288e:	f7ff fd01 	bl	22294 <z_spin_unlock_valid>
   22892:	b940      	cbnz	r0, 228a6 <z_get_next_timeout_expiry+0x52>
   22894:	4908      	ldr	r1, [pc, #32]	; (228b8 <z_get_next_timeout_expiry+0x64>)
   22896:	4809      	ldr	r0, [pc, #36]	; (228bc <z_get_next_timeout_expiry+0x68>)
   22898:	22a7      	movs	r2, #167	; 0xa7
   2289a:	f001 fccf 	bl	2423c <printk>
   2289e:	21a7      	movs	r1, #167	; 0xa7
   228a0:	4805      	ldr	r0, [pc, #20]	; (228b8 <z_get_next_timeout_expiry+0x64>)
   228a2:	f001 ff7d 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   228a6:	f385 8811 	msr	BASEPRI, r5
   228aa:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   228ae:	4620      	mov	r0, r4
   228b0:	bd38      	pop	{r3, r4, r5, pc}
   228b2:	bf00      	nop
   228b4:	200034e0 	.word	0x200034e0
   228b8:	0002be01 	.word	0x0002be01
   228bc:	0002bced 	.word	0x0002bced

000228c0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   228c0:	b570      	push	{r4, r5, r6, lr}
   228c2:	4604      	mov	r4, r0
   228c4:	460e      	mov	r6, r1
	__asm__ volatile(
   228c6:	f04f 0320 	mov.w	r3, #32
   228ca:	f3ef 8511 	mrs	r5, BASEPRI
   228ce:	f383 8811 	msr	BASEPRI, r3
   228d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228d6:	4816      	ldr	r0, [pc, #88]	; (22930 <z_set_timeout_expiry+0x70>)
   228d8:	f7ff fcce 	bl	22278 <z_spin_lock_valid>
   228dc:	b940      	cbnz	r0, 228f0 <z_set_timeout_expiry+0x30>
   228de:	4915      	ldr	r1, [pc, #84]	; (22934 <z_set_timeout_expiry+0x74>)
   228e0:	4815      	ldr	r0, [pc, #84]	; (22938 <z_set_timeout_expiry+0x78>)
   228e2:	227c      	movs	r2, #124	; 0x7c
   228e4:	f001 fcaa 	bl	2423c <printk>
   228e8:	217c      	movs	r1, #124	; 0x7c
   228ea:	4812      	ldr	r0, [pc, #72]	; (22934 <z_set_timeout_expiry+0x74>)
   228ec:	f001 ff58 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   228f0:	480f      	ldr	r0, [pc, #60]	; (22930 <z_set_timeout_expiry+0x70>)
   228f2:	f7ff fcdf 	bl	222b4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   228f6:	f7ff fe21 	bl	2253c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   228fa:	2801      	cmp	r0, #1
   228fc:	dd05      	ble.n	2290a <z_set_timeout_expiry+0x4a>
   228fe:	42a0      	cmp	r0, r4
   22900:	dd03      	ble.n	2290a <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   22902:	4631      	mov	r1, r6
   22904:	4620      	mov	r0, r4
   22906:	f7e3 fa8d 	bl	5e24 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2290a:	4809      	ldr	r0, [pc, #36]	; (22930 <z_set_timeout_expiry+0x70>)
   2290c:	f7ff fcc2 	bl	22294 <z_spin_unlock_valid>
   22910:	b940      	cbnz	r0, 22924 <z_set_timeout_expiry+0x64>
   22912:	4908      	ldr	r1, [pc, #32]	; (22934 <z_set_timeout_expiry+0x74>)
   22914:	4808      	ldr	r0, [pc, #32]	; (22938 <z_set_timeout_expiry+0x78>)
   22916:	22a7      	movs	r2, #167	; 0xa7
   22918:	f001 fc90 	bl	2423c <printk>
   2291c:	21a7      	movs	r1, #167	; 0xa7
   2291e:	4805      	ldr	r0, [pc, #20]	; (22934 <z_set_timeout_expiry+0x74>)
   22920:	f001 ff3e 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   22924:	f385 8811 	msr	BASEPRI, r5
   22928:	f3bf 8f6f 	isb	sy
		}
	}
}
   2292c:	bd70      	pop	{r4, r5, r6, pc}
   2292e:	bf00      	nop
   22930:	200034e0 	.word	0x200034e0
   22934:	0002be01 	.word	0x0002be01
   22938:	0002bced 	.word	0x0002bced

0002293c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   2293c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22940:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22942:	f7fe fdc3 	bl	214cc <z_time_slice>
	__asm__ volatile(
   22946:	f04f 0320 	mov.w	r3, #32
   2294a:	f3ef 8911 	mrs	r9, BASEPRI
   2294e:	f383 8811 	msr	BASEPRI, r3
   22952:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22956:	484b      	ldr	r0, [pc, #300]	; (22a84 <z_clock_announce+0x148>)
   22958:	f7ff fc8e 	bl	22278 <z_spin_lock_valid>
   2295c:	b940      	cbnz	r0, 22970 <z_clock_announce+0x34>
   2295e:	494a      	ldr	r1, [pc, #296]	; (22a88 <z_clock_announce+0x14c>)
   22960:	484a      	ldr	r0, [pc, #296]	; (22a8c <z_clock_announce+0x150>)
   22962:	227c      	movs	r2, #124	; 0x7c
   22964:	f001 fc6a 	bl	2423c <printk>
   22968:	217c      	movs	r1, #124	; 0x7c
   2296a:	4847      	ldr	r0, [pc, #284]	; (22a88 <z_clock_announce+0x14c>)
   2296c:	f001 ff18 	bl	247a0 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   22970:	4e47      	ldr	r6, [pc, #284]	; (22a90 <z_clock_announce+0x154>)
   22972:	4f48      	ldr	r7, [pc, #288]	; (22a94 <z_clock_announce+0x158>)
	z_spin_lock_set_owner(l);
   22974:	4843      	ldr	r0, [pc, #268]	; (22a84 <z_clock_announce+0x148>)
	return list->head == list;
   22976:	f8df a120 	ldr.w	sl, [pc, #288]	; 22a98 <z_clock_announce+0x15c>
   2297a:	f7ff fc9b 	bl	222b4 <z_spin_lock_set_owner>
   2297e:	46bb      	mov	fp, r7
   22980:	6034      	str	r4, [r6, #0]
   22982:	e9d7 3400 	ldrd	r3, r4, [r7]
   22986:	f8da 8000 	ldr.w	r8, [sl]
   2298a:	f8d6 c000 	ldr.w	ip, [r6]
   2298e:	e9cd 3400 	strd	r3, r4, [sp]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22992:	45d0      	cmp	r8, sl
   22994:	4664      	mov	r4, ip
   22996:	ea4f 75e4 	mov.w	r5, r4, asr #31
   2299a:	d00e      	beq.n	229ba <z_clock_announce+0x7e>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2299c:	f1b8 0f00 	cmp.w	r8, #0
   229a0:	d00b      	beq.n	229ba <z_clock_announce+0x7e>
   229a2:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   229a6:	458c      	cmp	ip, r1
   229a8:	eb75 0302 	sbcs.w	r3, r5, r2
   229ac:	da28      	bge.n	22a00 <z_clock_announce+0xc4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   229ae:	ebb1 000c 	subs.w	r0, r1, ip
   229b2:	eb62 0105 	sbc.w	r1, r2, r5
   229b6:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
   229ba:	9b00      	ldr	r3, [sp, #0]
   229bc:	18e2      	adds	r2, r4, r3
   229be:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   229c0:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   229c4:	eb45 0303 	adc.w	r3, r5, r3
   229c8:	e9cb 2300 	strd	r2, r3, [fp]
	announce_remaining = 0;
   229cc:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   229ce:	f7ff fdb5 	bl	2253c <next_timeout>
   229d2:	4621      	mov	r1, r4
   229d4:	f7e3 fa26 	bl	5e24 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   229d8:	482a      	ldr	r0, [pc, #168]	; (22a84 <z_clock_announce+0x148>)
   229da:	f7ff fc5b 	bl	22294 <z_spin_unlock_valid>
   229de:	b940      	cbnz	r0, 229f2 <z_clock_announce+0xb6>
   229e0:	4929      	ldr	r1, [pc, #164]	; (22a88 <z_clock_announce+0x14c>)
   229e2:	482a      	ldr	r0, [pc, #168]	; (22a8c <z_clock_announce+0x150>)
   229e4:	22a7      	movs	r2, #167	; 0xa7
   229e6:	f001 fc29 	bl	2423c <printk>
   229ea:	21a7      	movs	r1, #167	; 0xa7
   229ec:	4826      	ldr	r0, [pc, #152]	; (22a88 <z_clock_announce+0x14c>)
   229ee:	f001 fed7 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   229f2:	f389 8811 	msr	BASEPRI, r9
   229f6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   229fa:	b003      	add	sp, #12
   229fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   22a00:	e9dd 4500 	ldrd	r4, r5, [sp]
		announce_remaining -= dt;
   22a04:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   22a08:	1864      	adds	r4, r4, r1
		t->dticks = 0;
   22a0a:	f04f 0200 	mov.w	r2, #0
   22a0e:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   22a12:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   22a16:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   22a18:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   22a1c:	4640      	mov	r0, r8
		curr_tick += dt;
   22a1e:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   22a22:	f7ff fd71 	bl	22508 <remove_timeout>
   22a26:	4817      	ldr	r0, [pc, #92]	; (22a84 <z_clock_announce+0x148>)
   22a28:	f7ff fc34 	bl	22294 <z_spin_unlock_valid>
   22a2c:	b940      	cbnz	r0, 22a40 <z_clock_announce+0x104>
   22a2e:	4916      	ldr	r1, [pc, #88]	; (22a88 <z_clock_announce+0x14c>)
   22a30:	4816      	ldr	r0, [pc, #88]	; (22a8c <z_clock_announce+0x150>)
   22a32:	22a7      	movs	r2, #167	; 0xa7
   22a34:	f001 fc02 	bl	2423c <printk>
   22a38:	21a7      	movs	r1, #167	; 0xa7
   22a3a:	4813      	ldr	r0, [pc, #76]	; (22a88 <z_clock_announce+0x14c>)
   22a3c:	f001 feb0 	bl	247a0 <assert_post_action>
   22a40:	f389 8811 	msr	BASEPRI, r9
   22a44:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22a48:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22a4c:	4640      	mov	r0, r8
   22a4e:	4798      	blx	r3
	__asm__ volatile(
   22a50:	f04f 0320 	mov.w	r3, #32
   22a54:	f3ef 8911 	mrs	r9, BASEPRI
   22a58:	f383 8811 	msr	BASEPRI, r3
   22a5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a60:	4808      	ldr	r0, [pc, #32]	; (22a84 <z_clock_announce+0x148>)
   22a62:	f7ff fc09 	bl	22278 <z_spin_lock_valid>
   22a66:	b940      	cbnz	r0, 22a7a <z_clock_announce+0x13e>
   22a68:	4907      	ldr	r1, [pc, #28]	; (22a88 <z_clock_announce+0x14c>)
   22a6a:	4808      	ldr	r0, [pc, #32]	; (22a8c <z_clock_announce+0x150>)
   22a6c:	227c      	movs	r2, #124	; 0x7c
   22a6e:	f001 fbe5 	bl	2423c <printk>
   22a72:	217c      	movs	r1, #124	; 0x7c
   22a74:	4804      	ldr	r0, [pc, #16]	; (22a88 <z_clock_announce+0x14c>)
   22a76:	f001 fe93 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a7a:	4802      	ldr	r0, [pc, #8]	; (22a84 <z_clock_announce+0x148>)
   22a7c:	f7ff fc1a 	bl	222b4 <z_spin_lock_set_owner>
	return k;
   22a80:	e77f      	b.n	22982 <z_clock_announce+0x46>
   22a82:	bf00      	nop
   22a84:	200034e0 	.word	0x200034e0
   22a88:	0002be01 	.word	0x0002be01
   22a8c:	0002bced 	.word	0x0002bced
   22a90:	200034dc 	.word	0x200034dc
   22a94:	20001a38 	.word	0x20001a38
   22a98:	20000b14 	.word	0x20000b14

00022a9c <z_tick_get>:

int64_t z_tick_get(void)
{
   22a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22aa0:	f04f 0320 	mov.w	r3, #32
   22aa4:	f3ef 8611 	mrs	r6, BASEPRI
   22aa8:	f383 8811 	msr	BASEPRI, r3
   22aac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22ab0:	4816      	ldr	r0, [pc, #88]	; (22b0c <z_tick_get+0x70>)
   22ab2:	f7ff fbe1 	bl	22278 <z_spin_lock_valid>
   22ab6:	b940      	cbnz	r0, 22aca <z_tick_get+0x2e>
   22ab8:	4915      	ldr	r1, [pc, #84]	; (22b10 <z_tick_get+0x74>)
   22aba:	4816      	ldr	r0, [pc, #88]	; (22b14 <z_tick_get+0x78>)
   22abc:	227c      	movs	r2, #124	; 0x7c
   22abe:	f001 fbbd 	bl	2423c <printk>
   22ac2:	217c      	movs	r1, #124	; 0x7c
   22ac4:	4812      	ldr	r0, [pc, #72]	; (22b10 <z_tick_get+0x74>)
   22ac6:	f001 fe6b 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22aca:	4810      	ldr	r0, [pc, #64]	; (22b0c <z_tick_get+0x70>)
   22acc:	f7ff fbf2 	bl	222b4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   22ad0:	f7e3 f9da 	bl	5e88 <z_clock_elapsed>
   22ad4:	4b10      	ldr	r3, [pc, #64]	; (22b18 <z_tick_get+0x7c>)
   22ad6:	e9d3 4500 	ldrd	r4, r5, [r3]
   22ada:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22adc:	480b      	ldr	r0, [pc, #44]	; (22b0c <z_tick_get+0x70>)
   22ade:	f145 0800 	adc.w	r8, r5, #0
   22ae2:	f7ff fbd7 	bl	22294 <z_spin_unlock_valid>
   22ae6:	b940      	cbnz	r0, 22afa <z_tick_get+0x5e>
   22ae8:	4909      	ldr	r1, [pc, #36]	; (22b10 <z_tick_get+0x74>)
   22aea:	480a      	ldr	r0, [pc, #40]	; (22b14 <z_tick_get+0x78>)
   22aec:	22a7      	movs	r2, #167	; 0xa7
   22aee:	f001 fba5 	bl	2423c <printk>
   22af2:	21a7      	movs	r1, #167	; 0xa7
   22af4:	4806      	ldr	r0, [pc, #24]	; (22b10 <z_tick_get+0x74>)
   22af6:	f001 fe53 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   22afa:	f386 8811 	msr	BASEPRI, r6
   22afe:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22b02:	4638      	mov	r0, r7
   22b04:	4641      	mov	r1, r8
   22b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22b0a:	bf00      	nop
   22b0c:	200034e0 	.word	0x200034e0
   22b10:	0002be01 	.word	0x0002be01
   22b14:	0002bced 	.word	0x0002bced
   22b18:	20001a38 	.word	0x20001a38

00022b1c <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   22b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22b20:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   22b22:	4d3d      	ldr	r5, [pc, #244]	; (22c18 <clear_event_registrations+0xfc>)
   22b24:	4e3d      	ldr	r6, [pc, #244]	; (22c1c <clear_event_registrations+0x100>)
   22b26:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 22c24 <clear_event_registrations+0x108>
{
   22b2a:	4681      	mov	r9, r0
   22b2c:	4617      	mov	r7, r2
	while (num_events--) {
   22b2e:	fb04 0401 	mla	r4, r4, r1, r0
   22b32:	454c      	cmp	r4, r9
   22b34:	d101      	bne.n	22b3a <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   22b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   22b3a:	2300      	movs	r3, #0
   22b3c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   22b40:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   22b44:	f003 030f 	and.w	r3, r3, #15
   22b48:	2b04      	cmp	r3, #4
   22b4a:	d831      	bhi.n	22bb0 <clear_event_registrations+0x94>
   22b4c:	e8df f003 	tbb	[pc, r3]
   22b50:	30032539 	.word	0x30032539
   22b54:	1a          	.byte	0x1a
   22b55:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22b56:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22b5a:	b943      	cbnz	r3, 22b6e <clear_event_registrations+0x52>
   22b5c:	4629      	mov	r1, r5
   22b5e:	229d      	movs	r2, #157	; 0x9d
   22b60:	4630      	mov	r0, r6
   22b62:	f001 fb6b 	bl	2423c <printk>
   22b66:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22b68:	4628      	mov	r0, r5
   22b6a:	f001 fe19 	bl	247a0 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   22b6e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   22b72:	b333      	cbz	r3, 22bc2 <clear_event_registrations+0xa6>
	node->prev->next = node->next;
   22b74:	f854 2c10 	ldr.w	r2, [r4, #-16]
   22b78:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   22b7a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22b7c:	2300      	movs	r3, #0
	node->prev = NULL;
   22b7e:	e944 3305 	strd	r3, r3, [r4, #-20]
   22b82:	e01e      	b.n	22bc2 <clear_event_registrations+0xa6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22b84:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22b88:	2b00      	cmp	r3, #0
   22b8a:	d1f0      	bne.n	22b6e <clear_event_registrations+0x52>
   22b8c:	4629      	mov	r1, r5
   22b8e:	22a1      	movs	r2, #161	; 0xa1
   22b90:	4630      	mov	r0, r6
   22b92:	f001 fb53 	bl	2423c <printk>
   22b96:	21a1      	movs	r1, #161	; 0xa1
   22b98:	e7e6      	b.n	22b68 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22b9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22b9e:	2b00      	cmp	r3, #0
   22ba0:	d1e5      	bne.n	22b6e <clear_event_registrations+0x52>
   22ba2:	4629      	mov	r1, r5
   22ba4:	22a5      	movs	r2, #165	; 0xa5
   22ba6:	4630      	mov	r0, r6
   22ba8:	f001 fb48 	bl	2423c <printk>
   22bac:	21a5      	movs	r1, #165	; 0xa5
   22bae:	e7db      	b.n	22b68 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   22bb0:	4629      	mov	r1, r5
   22bb2:	4630      	mov	r0, r6
   22bb4:	22ac      	movs	r2, #172	; 0xac
   22bb6:	f001 fb41 	bl	2423c <printk>
   22bba:	21ac      	movs	r1, #172	; 0xac
   22bbc:	4628      	mov	r0, r5
   22bbe:	f001 fdef 	bl	247a0 <assert_post_action>
   22bc2:	4640      	mov	r0, r8
   22bc4:	f7ff fb66 	bl	22294 <z_spin_unlock_valid>
   22bc8:	b940      	cbnz	r0, 22bdc <clear_event_registrations+0xc0>
   22bca:	4915      	ldr	r1, [pc, #84]	; (22c20 <clear_event_registrations+0x104>)
   22bcc:	4630      	mov	r0, r6
   22bce:	22a7      	movs	r2, #167	; 0xa7
   22bd0:	f001 fb34 	bl	2423c <printk>
   22bd4:	21a7      	movs	r1, #167	; 0xa7
   22bd6:	4812      	ldr	r0, [pc, #72]	; (22c20 <clear_event_registrations+0x104>)
   22bd8:	f001 fde2 	bl	247a0 <assert_post_action>
   22bdc:	f387 8811 	msr	BASEPRI, r7
   22be0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22be4:	f04f 0320 	mov.w	r3, #32
   22be8:	f3ef 8711 	mrs	r7, BASEPRI
   22bec:	f383 8811 	msr	BASEPRI, r3
   22bf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bf4:	4640      	mov	r0, r8
   22bf6:	f7ff fb3f 	bl	22278 <z_spin_lock_valid>
   22bfa:	b940      	cbnz	r0, 22c0e <clear_event_registrations+0xf2>
   22bfc:	4908      	ldr	r1, [pc, #32]	; (22c20 <clear_event_registrations+0x104>)
   22bfe:	4630      	mov	r0, r6
   22c00:	227c      	movs	r2, #124	; 0x7c
   22c02:	f001 fb1b 	bl	2423c <printk>
   22c06:	217c      	movs	r1, #124	; 0x7c
   22c08:	4805      	ldr	r0, [pc, #20]	; (22c20 <clear_event_registrations+0x104>)
   22c0a:	f001 fdc9 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22c0e:	4640      	mov	r0, r8
   22c10:	f7ff fb50 	bl	222b4 <z_spin_lock_set_owner>
	return k;
   22c14:	3c14      	subs	r4, #20
   22c16:	e78c      	b.n	22b32 <clear_event_registrations+0x16>
   22c18:	00031ae2 	.word	0x00031ae2
   22c1c:	0002bced 	.word	0x0002bced
   22c20:	0002be01 	.word	0x0002be01
   22c24:	200034e4 	.word	0x200034e4

00022c28 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   22c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   22c2c:	6884      	ldr	r4, [r0, #8]
{
   22c2e:	4605      	mov	r5, r0
   22c30:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   22c32:	b1b4      	cbz	r4, 22c62 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   22c34:	7863      	ldrb	r3, [r4, #1]
   22c36:	2b01      	cmp	r3, #1
   22c38:	d147      	bne.n	22cca <signal_poll_event+0xa2>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   22c3a:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   22c3e:	d10a      	bne.n	22c56 <signal_poll_event+0x2e>
   22c40:	22e3      	movs	r2, #227	; 0xe3
   22c42:	492e      	ldr	r1, [pc, #184]	; (22cfc <signal_poll_event+0xd4>)
   22c44:	482e      	ldr	r0, [pc, #184]	; (22d00 <signal_poll_event+0xd8>)
   22c46:	f001 faf9 	bl	2423c <printk>
   22c4a:	21e3      	movs	r1, #227	; 0xe3
   22c4c:	482b      	ldr	r0, [pc, #172]	; (22cfc <signal_poll_event+0xd4>)
   22c4e:	f001 fda7 	bl	247a0 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   22c52:	7b7b      	ldrb	r3, [r7, #13]
   22c54:	deff      	udf	#255	; 0xff
   22c56:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   22c5a:	f013 0302 	ands.w	r3, r3, #2
   22c5e:	d10a      	bne.n	22c76 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   22c60:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   22c62:	68eb      	ldr	r3, [r5, #12]
   22c64:	f3c3 3204 	ubfx	r2, r3, #12, #5
   22c68:	4316      	orrs	r6, r2
	event->poller = NULL;
   22c6a:	2000      	movs	r0, #0
	event->state |= state;
   22c6c:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   22c70:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   22c72:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   22c74:	e00d      	b.n	22c92 <signal_poll_event+0x6a>
	if (z_is_thread_timeout_expired(thread)) {
   22c76:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   22c7a:	f04f 31ff 	mov.w	r1, #4294967295
   22c7e:	f06f 0001 	mvn.w	r0, #1
   22c82:	428b      	cmp	r3, r1
   22c84:	bf08      	it	eq
   22c86:	4282      	cmpeq	r2, r0
   22c88:	d105      	bne.n	22c96 <signal_poll_event+0x6e>
		poller->is_polling = false;
   22c8a:	2300      	movs	r3, #0
   22c8c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   22c8e:	f06f 000a 	mvn.w	r0, #10
}
   22c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   22c96:	4638      	mov	r0, r7
   22c98:	f7fe f9f8 	bl	2108c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   22c9c:	2e08      	cmp	r6, #8
   22c9e:	bf0c      	ite	eq
   22ca0:	f06f 0303 	mvneq.w	r3, #3
   22ca4:	2300      	movne	r3, #0
   22ca6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22ca8:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   22cac:	06db      	lsls	r3, r3, #27
   22cae:	d104      	bne.n	22cba <signal_poll_event+0x92>
	if (!z_is_thread_ready(thread)) {
   22cb0:	f854 8c54 	ldr.w	r8, [r4, #-84]
   22cb4:	f1b8 0f00 	cmp.w	r8, #0
   22cb8:	d001      	beq.n	22cbe <signal_poll_event+0x96>
		poller->is_polling = false;
   22cba:	2300      	movs	r3, #0
   22cbc:	e7d0      	b.n	22c60 <signal_poll_event+0x38>
	z_ready_thread(thread);
   22cbe:	4638      	mov	r0, r7
   22cc0:	f7fe fafc 	bl	212bc <z_ready_thread>
		poller->is_polling = false;
   22cc4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   22cc8:	e7cb      	b.n	22c62 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   22cca:	2b02      	cmp	r3, #2
   22ccc:	d1f5      	bne.n	22cba <signal_poll_event+0x92>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   22cce:	7823      	ldrb	r3, [r4, #0]
   22cd0:	2b00      	cmp	r3, #0
   22cd2:	d0c6      	beq.n	22c62 <signal_poll_event+0x3a>
   22cd4:	f854 7c04 	ldr.w	r7, [r4, #-4]
   22cd8:	b177      	cbz	r7, 22cf8 <signal_poll_event+0xd0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   22cda:	f1a4 0910 	sub.w	r9, r4, #16
   22cde:	f104 0010 	add.w	r0, r4, #16
		twork->poll_result = 0;
   22ce2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   22ce6:	f7ff fd3f 	bl	22768 <z_abort_timeout>
		twork->poll_result = 0;
   22cea:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   22cee:	4649      	mov	r1, r9
   22cf0:	4638      	mov	r0, r7
   22cf2:	f007 fbb0 	bl	2a456 <k_work_submit_to_queue>
   22cf6:	e7e5      	b.n	22cc4 <signal_poll_event+0x9c>
		poller->is_polling = false;
   22cf8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   22cfa:	e7b2      	b.n	22c62 <signal_poll_event+0x3a>
   22cfc:	00031ae2 	.word	0x00031ae2
   22d00:	0002bced 	.word	0x0002bced

00022d04 <register_events>:
{
   22d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   22d08:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d0a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 22ea8 <register_events+0x1a4>
   22d0e:	4f63      	ldr	r7, [pc, #396]	; (22e9c <register_events+0x198>)
   22d10:	4c63      	ldr	r4, [pc, #396]	; (22ea0 <register_events+0x19c>)
{
   22d12:	9100      	str	r1, [sp, #0]
   22d14:	4615      	mov	r5, r2
   22d16:	9301      	str	r3, [sp, #4]
   22d18:	4682      	mov	sl, r0
	int events_registered = 0;
   22d1a:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   22d1c:	9b00      	ldr	r3, [sp, #0]
   22d1e:	429e      	cmp	r6, r3
   22d20:	db03      	blt.n	22d2a <register_events+0x26>
}
   22d22:	4640      	mov	r0, r8
   22d24:	b003      	add	sp, #12
   22d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d2a:	f04f 0220 	mov.w	r2, #32
   22d2e:	f3ef 8b11 	mrs	fp, BASEPRI
   22d32:	f382 8811 	msr	BASEPRI, r2
   22d36:	f3bf 8f6f 	isb	sy
   22d3a:	4648      	mov	r0, r9
   22d3c:	f7ff fa9c 	bl	22278 <z_spin_lock_valid>
   22d40:	b940      	cbnz	r0, 22d54 <register_events+0x50>
   22d42:	4639      	mov	r1, r7
   22d44:	4620      	mov	r0, r4
   22d46:	227c      	movs	r2, #124	; 0x7c
   22d48:	f001 fa78 	bl	2423c <printk>
   22d4c:	217c      	movs	r1, #124	; 0x7c
   22d4e:	4638      	mov	r0, r7
   22d50:	f001 fd26 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22d54:	4648      	mov	r0, r9
   22d56:	f7ff faad 	bl	222b4 <z_spin_lock_set_owner>
	switch (event->type) {
   22d5a:	f89a 200d 	ldrb.w	r2, [sl, #13]
   22d5e:	f002 020f 	and.w	r2, r2, #15
   22d62:	2a04      	cmp	r2, #4
   22d64:	d848      	bhi.n	22df8 <register_events+0xf4>
   22d66:	e8df f002 	tbb	[pc, r2]
   22d6a:	402f      	.short	0x402f
   22d6c:	4703      	.short	0x4703
   22d6e:	2b          	.byte	0x2b
   22d6f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   22d70:	f8da 2010 	ldr.w	r2, [sl, #16]
   22d74:	6892      	ldr	r2, [r2, #8]
   22d76:	b33a      	cbz	r2, 22dc8 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22d78:	2102      	movs	r1, #2
	event->state |= state;
   22d7a:	f8da 200c 	ldr.w	r2, [sl, #12]
   22d7e:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   22d82:	ea41 010c 	orr.w	r1, r1, ip
	event->poller = NULL;
   22d86:	2000      	movs	r0, #0
	event->state |= state;
   22d88:	f361 3210 	bfi	r2, r1, #12, #5
	event->poller = NULL;
   22d8c:	f8ca 0008 	str.w	r0, [sl, #8]
	event->state |= state;
   22d90:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   22d94:	7028      	strb	r0, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d96:	4648      	mov	r0, r9
   22d98:	f7ff fa7c 	bl	22294 <z_spin_unlock_valid>
   22d9c:	b940      	cbnz	r0, 22db0 <register_events+0xac>
   22d9e:	4639      	mov	r1, r7
   22da0:	4620      	mov	r0, r4
   22da2:	22a7      	movs	r2, #167	; 0xa7
   22da4:	f001 fa4a 	bl	2423c <printk>
   22da8:	21a7      	movs	r1, #167	; 0xa7
   22daa:	4638      	mov	r0, r7
   22dac:	f001 fcf8 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   22db0:	f38b 8811 	msr	BASEPRI, fp
   22db4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22db8:	3601      	adds	r6, #1
   22dba:	f10a 0a14 	add.w	sl, sl, #20
   22dbe:	e7ad      	b.n	22d1c <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   22dc0:	f8da 2010 	ldr.w	r2, [sl, #16]
   22dc4:	6812      	ldr	r2, [r2, #0]
   22dc6:	bb0a      	cbnz	r2, 22e0c <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   22dc8:	9b01      	ldr	r3, [sp, #4]
   22dca:	2b00      	cmp	r3, #0
   22dcc:	d1e3      	bne.n	22d96 <register_events+0x92>
   22dce:	782a      	ldrb	r2, [r5, #0]
   22dd0:	2a00      	cmp	r2, #0
   22dd2:	d0e0      	beq.n	22d96 <register_events+0x92>
	switch (event->type) {
   22dd4:	f89a 200d 	ldrb.w	r2, [sl, #13]
   22dd8:	f002 020f 	and.w	r2, r2, #15
   22ddc:	2a04      	cmp	r2, #4
   22dde:	d852      	bhi.n	22e86 <register_events+0x182>
   22de0:	e8df f002 	tbb	[pc, r2]
   22de4:	51164029 	.word	0x51164029
   22de8:	2e          	.byte	0x2e
   22de9:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   22dea:	f8da 2010 	ldr.w	r2, [sl, #16]
   22dee:	6892      	ldr	r2, [r2, #8]
   22df0:	2a00      	cmp	r2, #0
   22df2:	d0e9      	beq.n	22dc8 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   22df4:	2101      	movs	r1, #1
   22df6:	e7c0      	b.n	22d7a <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   22df8:	4620      	mov	r0, r4
   22dfa:	2254      	movs	r2, #84	; 0x54
   22dfc:	4929      	ldr	r1, [pc, #164]	; (22ea4 <register_events+0x1a0>)
   22dfe:	f001 fa1d 	bl	2423c <printk>
   22e02:	2154      	movs	r1, #84	; 0x54
   22e04:	4827      	ldr	r0, [pc, #156]	; (22ea4 <register_events+0x1a0>)
   22e06:	f001 fccb 	bl	247a0 <assert_post_action>
		break;
   22e0a:	e7dd      	b.n	22dc8 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22e0c:	2104      	movs	r1, #4
   22e0e:	e7b4      	b.n	22d7a <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22e10:	f8da 2010 	ldr.w	r2, [sl, #16]
   22e14:	b942      	cbnz	r2, 22e28 <register_events+0x124>
   22e16:	4923      	ldr	r1, [pc, #140]	; (22ea4 <register_events+0x1a0>)
   22e18:	4620      	mov	r0, r4
   22e1a:	227e      	movs	r2, #126	; 0x7e
   22e1c:	f001 fa0e 	bl	2423c <printk>
   22e20:	217e      	movs	r1, #126	; 0x7e
   22e22:	4820      	ldr	r0, [pc, #128]	; (22ea4 <register_events+0x1a0>)
   22e24:	f001 fcbc 	bl	247a0 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   22e28:	f8da 0010 	ldr.w	r0, [sl, #16]
   22e2c:	462a      	mov	r2, r5
   22e2e:	4651      	mov	r1, sl
   22e30:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   22e32:	f007 fb28 	bl	2a486 <add_event>
	event->poller = poller;
   22e36:	f8ca 5008 	str.w	r5, [sl, #8]
			events_registered += 1;
   22e3a:	f108 0801 	add.w	r8, r8, #1
   22e3e:	e7aa      	b.n	22d96 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22e40:	f8da 2010 	ldr.w	r2, [sl, #16]
   22e44:	b942      	cbnz	r2, 22e58 <register_events+0x154>
   22e46:	4917      	ldr	r1, [pc, #92]	; (22ea4 <register_events+0x1a0>)
   22e48:	4620      	mov	r0, r4
   22e4a:	2282      	movs	r2, #130	; 0x82
   22e4c:	f001 f9f6 	bl	2423c <printk>
   22e50:	2182      	movs	r1, #130	; 0x82
   22e52:	4814      	ldr	r0, [pc, #80]	; (22ea4 <register_events+0x1a0>)
   22e54:	f001 fca4 	bl	247a0 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   22e58:	f8da 0010 	ldr.w	r0, [sl, #16]
   22e5c:	462a      	mov	r2, r5
   22e5e:	4651      	mov	r1, sl
   22e60:	3014      	adds	r0, #20
   22e62:	e7e6      	b.n	22e32 <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22e64:	f8da 2010 	ldr.w	r2, [sl, #16]
   22e68:	b942      	cbnz	r2, 22e7c <register_events+0x178>
   22e6a:	490e      	ldr	r1, [pc, #56]	; (22ea4 <register_events+0x1a0>)
   22e6c:	4620      	mov	r0, r4
   22e6e:	2286      	movs	r2, #134	; 0x86
   22e70:	f001 f9e4 	bl	2423c <printk>
   22e74:	2186      	movs	r1, #134	; 0x86
   22e76:	480b      	ldr	r0, [pc, #44]	; (22ea4 <register_events+0x1a0>)
   22e78:	f001 fc92 	bl	247a0 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   22e7c:	462a      	mov	r2, r5
   22e7e:	4651      	mov	r1, sl
   22e80:	f8da 0010 	ldr.w	r0, [sl, #16]
   22e84:	e7d5      	b.n	22e32 <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   22e86:	4620      	mov	r0, r4
   22e88:	228d      	movs	r2, #141	; 0x8d
   22e8a:	4906      	ldr	r1, [pc, #24]	; (22ea4 <register_events+0x1a0>)
   22e8c:	f001 f9d6 	bl	2423c <printk>
   22e90:	218d      	movs	r1, #141	; 0x8d
   22e92:	4804      	ldr	r0, [pc, #16]	; (22ea4 <register_events+0x1a0>)
   22e94:	f001 fc84 	bl	247a0 <assert_post_action>
		break;
   22e98:	e7cd      	b.n	22e36 <register_events+0x132>
   22e9a:	bf00      	nop
   22e9c:	0002be01 	.word	0x0002be01
   22ea0:	0002bced 	.word	0x0002bced
   22ea4:	00031ae2 	.word	0x00031ae2
   22ea8:	200034e4 	.word	0x200034e4

00022eac <k_poll_event_init>:
{
   22eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22eae:	4604      	mov	r4, r0
   22eb0:	460f      	mov	r7, r1
   22eb2:	461d      	mov	r5, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   22eb4:	4616      	mov	r6, r2
   22eb6:	b142      	cbz	r2, 22eca <k_poll_event_init+0x1e>
   22eb8:	4916      	ldr	r1, [pc, #88]	; (22f14 <k_poll_event_init+0x68>)
   22eba:	4817      	ldr	r0, [pc, #92]	; (22f18 <k_poll_event_init+0x6c>)
   22ebc:	222e      	movs	r2, #46	; 0x2e
   22ebe:	f001 f9bd 	bl	2423c <printk>
   22ec2:	212e      	movs	r1, #46	; 0x2e
   22ec4:	4813      	ldr	r0, [pc, #76]	; (22f14 <k_poll_event_init+0x68>)
   22ec6:	f001 fc6b 	bl	247a0 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   22eca:	2f0f      	cmp	r7, #15
   22ecc:	d908      	bls.n	22ee0 <k_poll_event_init+0x34>
   22ece:	4911      	ldr	r1, [pc, #68]	; (22f14 <k_poll_event_init+0x68>)
   22ed0:	4811      	ldr	r0, [pc, #68]	; (22f18 <k_poll_event_init+0x6c>)
   22ed2:	222f      	movs	r2, #47	; 0x2f
   22ed4:	f001 f9b2 	bl	2423c <printk>
   22ed8:	212f      	movs	r1, #47	; 0x2f
   22eda:	480e      	ldr	r0, [pc, #56]	; (22f14 <k_poll_event_init+0x68>)
   22edc:	f001 fc60 	bl	247a0 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   22ee0:	b945      	cbnz	r5, 22ef4 <k_poll_event_init+0x48>
   22ee2:	490c      	ldr	r1, [pc, #48]	; (22f14 <k_poll_event_init+0x68>)
   22ee4:	480c      	ldr	r0, [pc, #48]	; (22f18 <k_poll_event_init+0x6c>)
   22ee6:	2230      	movs	r2, #48	; 0x30
   22ee8:	f001 f9a8 	bl	2423c <printk>
   22eec:	2130      	movs	r1, #48	; 0x30
   22eee:	4809      	ldr	r0, [pc, #36]	; (22f14 <k_poll_event_init+0x68>)
   22ef0:	f001 fc56 	bl	247a0 <assert_post_action>
	event->type = type;
   22ef4:	7b63      	ldrb	r3, [r4, #13]
   22ef6:	f367 0303 	bfi	r3, r7, #0, #4
   22efa:	7363      	strb	r3, [r4, #13]
	event->mode = mode;
   22efc:	7ba3      	ldrb	r3, [r4, #14]
   22efe:	f366 0341 	bfi	r3, r6, #1, #1
   22f02:	73a3      	strb	r3, [r4, #14]
	event->poller = NULL;
   22f04:	2300      	movs	r3, #0
	event->state = K_POLL_STATE_NOT_READY;
   22f06:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   22f08:	60a3      	str	r3, [r4, #8]
	event->state = K_POLL_STATE_NOT_READY;
   22f0a:	4b04      	ldr	r3, [pc, #16]	; (22f1c <k_poll_event_init+0x70>)
   22f0c:	4013      	ands	r3, r2
	event->obj = obj;
   22f0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
}
   22f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22f14:	00031ae2 	.word	0x00031ae2
   22f18:	0002bced 	.word	0x0002bced
   22f1c:	00020fff 	.word	0x00020fff

00022f20 <z_impl_k_poll>:
{
   22f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22f24:	4699      	mov	r9, r3
	struct z_poller *poller = &_current->poller;
   22f26:	4b64      	ldr	r3, [pc, #400]	; (230b8 <z_impl_k_poll+0x198>)
   22f28:	689c      	ldr	r4, [r3, #8]
	poller->is_polling = true;
   22f2a:	2301      	movs	r3, #1
{
   22f2c:	b085      	sub	sp, #20
   22f2e:	4605      	mov	r5, r0
   22f30:	460e      	mov	r6, r1
   22f32:	4690      	mov	r8, r2
	struct z_poller *poller = &_current->poller;
   22f34:	f104 076c 	add.w	r7, r4, #108	; 0x6c
	poller->is_polling = true;
   22f38:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	poller->mode = MODE_POLL;
   22f3c:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
   22f40:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   22f44:	b153      	cbz	r3, 22f5c <z_impl_k_poll+0x3c>
   22f46:	495d      	ldr	r1, [pc, #372]	; (230bc <z_impl_k_poll+0x19c>)
   22f48:	485d      	ldr	r0, [pc, #372]	; (230c0 <z_impl_k_poll+0x1a0>)
   22f4a:	f44f 7282 	mov.w	r2, #260	; 0x104
   22f4e:	f001 f975 	bl	2423c <printk>
   22f52:	f44f 7182 	mov.w	r1, #260	; 0x104
   22f56:	4859      	ldr	r0, [pc, #356]	; (230bc <z_impl_k_poll+0x19c>)
   22f58:	f001 fc22 	bl	247a0 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   22f5c:	b955      	cbnz	r5, 22f74 <z_impl_k_poll+0x54>
   22f5e:	4957      	ldr	r1, [pc, #348]	; (230bc <z_impl_k_poll+0x19c>)
   22f60:	4857      	ldr	r0, [pc, #348]	; (230c0 <z_impl_k_poll+0x1a0>)
   22f62:	f240 1205 	movw	r2, #261	; 0x105
   22f66:	f001 f969 	bl	2423c <printk>
   22f6a:	f240 1105 	movw	r1, #261	; 0x105
   22f6e:	4853      	ldr	r0, [pc, #332]	; (230bc <z_impl_k_poll+0x19c>)
   22f70:	f001 fc16 	bl	247a0 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   22f74:	2e00      	cmp	r6, #0
   22f76:	da0a      	bge.n	22f8e <z_impl_k_poll+0x6e>
   22f78:	4950      	ldr	r1, [pc, #320]	; (230bc <z_impl_k_poll+0x19c>)
   22f7a:	4851      	ldr	r0, [pc, #324]	; (230c0 <z_impl_k_poll+0x1a0>)
   22f7c:	f44f 7283 	mov.w	r2, #262	; 0x106
   22f80:	f001 f95c 	bl	2423c <printk>
   22f84:	f44f 7183 	mov.w	r1, #262	; 0x106
   22f88:	484c      	ldr	r0, [pc, #304]	; (230bc <z_impl_k_poll+0x19c>)
   22f8a:	f001 fc09 	bl	247a0 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   22f8e:	ea58 0309 	orrs.w	r3, r8, r9
   22f92:	bf0c      	ite	eq
   22f94:	2301      	moveq	r3, #1
   22f96:	2300      	movne	r3, #0
   22f98:	463a      	mov	r2, r7
   22f9a:	4631      	mov	r1, r6
   22f9c:	4628      	mov	r0, r5
   22f9e:	f7ff feb1 	bl	22d04 <register_events>
   22fa2:	4607      	mov	r7, r0
	__asm__ volatile(
   22fa4:	f04f 0320 	mov.w	r3, #32
   22fa8:	f3ef 8611 	mrs	r6, BASEPRI
   22fac:	f383 8811 	msr	BASEPRI, r3
   22fb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22fb4:	4843      	ldr	r0, [pc, #268]	; (230c4 <z_impl_k_poll+0x1a4>)
   22fb6:	f7ff f95f 	bl	22278 <z_spin_lock_valid>
   22fba:	b940      	cbnz	r0, 22fce <z_impl_k_poll+0xae>
   22fbc:	4942      	ldr	r1, [pc, #264]	; (230c8 <z_impl_k_poll+0x1a8>)
   22fbe:	4840      	ldr	r0, [pc, #256]	; (230c0 <z_impl_k_poll+0x1a0>)
   22fc0:	227c      	movs	r2, #124	; 0x7c
   22fc2:	f001 f93b 	bl	2423c <printk>
   22fc6:	217c      	movs	r1, #124	; 0x7c
   22fc8:	483f      	ldr	r0, [pc, #252]	; (230c8 <z_impl_k_poll+0x1a8>)
   22fca:	f001 fbe9 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   22fce:	483d      	ldr	r0, [pc, #244]	; (230c4 <z_impl_k_poll+0x1a4>)
   22fd0:	f7ff f970 	bl	222b4 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   22fd4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   22fd8:	b9d3      	cbnz	r3, 23010 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   22fda:	4628      	mov	r0, r5
   22fdc:	4632      	mov	r2, r6
   22fde:	4639      	mov	r1, r7
   22fe0:	f7ff fd9c 	bl	22b1c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fe4:	4837      	ldr	r0, [pc, #220]	; (230c4 <z_impl_k_poll+0x1a4>)
   22fe6:	f7ff f955 	bl	22294 <z_spin_unlock_valid>
   22fea:	b940      	cbnz	r0, 22ffe <z_impl_k_poll+0xde>
   22fec:	4936      	ldr	r1, [pc, #216]	; (230c8 <z_impl_k_poll+0x1a8>)
   22fee:	4834      	ldr	r0, [pc, #208]	; (230c0 <z_impl_k_poll+0x1a0>)
   22ff0:	22a7      	movs	r2, #167	; 0xa7
   22ff2:	f001 f923 	bl	2423c <printk>
   22ff6:	21a7      	movs	r1, #167	; 0xa7
   22ff8:	4833      	ldr	r0, [pc, #204]	; (230c8 <z_impl_k_poll+0x1a8>)
   22ffa:	f001 fbd1 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   22ffe:	f386 8811 	msr	BASEPRI, r6
   23002:	f3bf 8f6f 	isb	sy
		return 0;
   23006:	2400      	movs	r4, #0
}
   23008:	4620      	mov	r0, r4
   2300a:	b005      	add	sp, #20
   2300c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   23010:	2300      	movs	r3, #0
   23012:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23016:	ea58 0309 	orrs.w	r3, r8, r9
   2301a:	d113      	bne.n	23044 <z_impl_k_poll+0x124>
   2301c:	4829      	ldr	r0, [pc, #164]	; (230c4 <z_impl_k_poll+0x1a4>)
   2301e:	f7ff f939 	bl	22294 <z_spin_unlock_valid>
   23022:	b940      	cbnz	r0, 23036 <z_impl_k_poll+0x116>
   23024:	4928      	ldr	r1, [pc, #160]	; (230c8 <z_impl_k_poll+0x1a8>)
   23026:	4826      	ldr	r0, [pc, #152]	; (230c0 <z_impl_k_poll+0x1a0>)
   23028:	22a7      	movs	r2, #167	; 0xa7
   2302a:	f001 f907 	bl	2423c <printk>
   2302e:	21a7      	movs	r1, #167	; 0xa7
   23030:	4825      	ldr	r0, [pc, #148]	; (230c8 <z_impl_k_poll+0x1a8>)
   23032:	f001 fbb5 	bl	247a0 <assert_post_action>
   23036:	f386 8811 	msr	BASEPRI, r6
   2303a:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2303e:	f06f 040a 	mvn.w	r4, #10
   23042:	e7e1      	b.n	23008 <z_impl_k_poll+0xe8>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   23044:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23046:	e9cd 8900 	strd	r8, r9, [sp]
   2304a:	4631      	mov	r1, r6
   2304c:	481d      	ldr	r0, [pc, #116]	; (230c4 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2304e:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23052:	f7fe fca5 	bl	219a0 <z_pend_curr>
   23056:	4604      	mov	r4, r0
	__asm__ volatile(
   23058:	f04f 0320 	mov.w	r3, #32
   2305c:	f3ef 8611 	mrs	r6, BASEPRI
   23060:	f383 8811 	msr	BASEPRI, r3
   23064:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23068:	4816      	ldr	r0, [pc, #88]	; (230c4 <z_impl_k_poll+0x1a4>)
   2306a:	f7ff f905 	bl	22278 <z_spin_lock_valid>
   2306e:	b940      	cbnz	r0, 23082 <z_impl_k_poll+0x162>
   23070:	4915      	ldr	r1, [pc, #84]	; (230c8 <z_impl_k_poll+0x1a8>)
   23072:	4813      	ldr	r0, [pc, #76]	; (230c0 <z_impl_k_poll+0x1a0>)
   23074:	227c      	movs	r2, #124	; 0x7c
   23076:	f001 f8e1 	bl	2423c <printk>
   2307a:	217c      	movs	r1, #124	; 0x7c
   2307c:	4812      	ldr	r0, [pc, #72]	; (230c8 <z_impl_k_poll+0x1a8>)
   2307e:	f001 fb8f 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   23082:	4810      	ldr	r0, [pc, #64]	; (230c4 <z_impl_k_poll+0x1a4>)
   23084:	f7ff f916 	bl	222b4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   23088:	4628      	mov	r0, r5
   2308a:	4632      	mov	r2, r6
   2308c:	4639      	mov	r1, r7
   2308e:	f7ff fd45 	bl	22b1c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23092:	480c      	ldr	r0, [pc, #48]	; (230c4 <z_impl_k_poll+0x1a4>)
   23094:	f7ff f8fe 	bl	22294 <z_spin_unlock_valid>
   23098:	b940      	cbnz	r0, 230ac <z_impl_k_poll+0x18c>
   2309a:	490b      	ldr	r1, [pc, #44]	; (230c8 <z_impl_k_poll+0x1a8>)
   2309c:	4808      	ldr	r0, [pc, #32]	; (230c0 <z_impl_k_poll+0x1a0>)
   2309e:	22a7      	movs	r2, #167	; 0xa7
   230a0:	f001 f8cc 	bl	2423c <printk>
   230a4:	21a7      	movs	r1, #167	; 0xa7
   230a6:	4808      	ldr	r0, [pc, #32]	; (230c8 <z_impl_k_poll+0x1a8>)
   230a8:	f001 fb7a 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   230ac:	f386 8811 	msr	BASEPRI, r6
   230b0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   230b4:	e7a8      	b.n	23008 <z_impl_k_poll+0xe8>
   230b6:	bf00      	nop
   230b8:	20003490 	.word	0x20003490
   230bc:	00031ae2 	.word	0x00031ae2
   230c0:	0002bced 	.word	0x0002bced
   230c4:	200034e4 	.word	0x200034e4
   230c8:	0002be01 	.word	0x0002be01

000230cc <z_impl_k_poll_signal_raise>:
{
   230cc:	b570      	push	{r4, r5, r6, lr}
   230ce:	4604      	mov	r4, r0
   230d0:	460e      	mov	r6, r1
	__asm__ volatile(
   230d2:	f04f 0320 	mov.w	r3, #32
   230d6:	f3ef 8511 	mrs	r5, BASEPRI
   230da:	f383 8811 	msr	BASEPRI, r3
   230de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230e2:	481c      	ldr	r0, [pc, #112]	; (23154 <z_impl_k_poll_signal_raise+0x88>)
   230e4:	f7ff f8c8 	bl	22278 <z_spin_lock_valid>
   230e8:	b940      	cbnz	r0, 230fc <z_impl_k_poll_signal_raise+0x30>
   230ea:	491b      	ldr	r1, [pc, #108]	; (23158 <z_impl_k_poll_signal_raise+0x8c>)
   230ec:	481b      	ldr	r0, [pc, #108]	; (2315c <z_impl_k_poll_signal_raise+0x90>)
   230ee:	227c      	movs	r2, #124	; 0x7c
   230f0:	f001 f8a4 	bl	2423c <printk>
   230f4:	217c      	movs	r1, #124	; 0x7c
   230f6:	4818      	ldr	r0, [pc, #96]	; (23158 <z_impl_k_poll_signal_raise+0x8c>)
   230f8:	f001 fb52 	bl	247a0 <assert_post_action>
	z_spin_lock_set_owner(l);
   230fc:	4815      	ldr	r0, [pc, #84]	; (23154 <z_impl_k_poll_signal_raise+0x88>)
   230fe:	f7ff f8d9 	bl	222b4 <z_spin_lock_set_owner>
	return list->head == list;
   23102:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   23104:	60e6      	str	r6, [r4, #12]
	signal->signaled = 1U;
   23106:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23108:	4284      	cmp	r4, r0
   2310a:	60a1      	str	r1, [r4, #8]
   2310c:	d112      	bne.n	23134 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2310e:	4811      	ldr	r0, [pc, #68]	; (23154 <z_impl_k_poll_signal_raise+0x88>)
   23110:	f7ff f8c0 	bl	22294 <z_spin_unlock_valid>
   23114:	b940      	cbnz	r0, 23128 <z_impl_k_poll_signal_raise+0x5c>
   23116:	4910      	ldr	r1, [pc, #64]	; (23158 <z_impl_k_poll_signal_raise+0x8c>)
   23118:	4810      	ldr	r0, [pc, #64]	; (2315c <z_impl_k_poll_signal_raise+0x90>)
   2311a:	22a7      	movs	r2, #167	; 0xa7
   2311c:	f001 f88e 	bl	2423c <printk>
   23120:	21a7      	movs	r1, #167	; 0xa7
   23122:	480d      	ldr	r0, [pc, #52]	; (23158 <z_impl_k_poll_signal_raise+0x8c>)
   23124:	f001 fb3c 	bl	247a0 <assert_post_action>
	__asm__ volatile(
   23128:	f385 8811 	msr	BASEPRI, r5
   2312c:	f3bf 8f6f 	isb	sy
		return 0;
   23130:	2400      	movs	r4, #0
   23132:	e00d      	b.n	23150 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   23134:	e9d0 3200 	ldrd	r3, r2, [r0]
   23138:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2313a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2313c:	2300      	movs	r3, #0
	node->prev = NULL;
   2313e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23142:	f7ff fd71 	bl	22c28 <signal_poll_event>
	z_reschedule(&lock, key);
   23146:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23148:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2314a:	4802      	ldr	r0, [pc, #8]	; (23154 <z_impl_k_poll_signal_raise+0x88>)
   2314c:	f7fd fee4 	bl	20f18 <z_reschedule>
}
   23150:	4620      	mov	r0, r4
   23152:	bd70      	pop	{r4, r5, r6, pc}
   23154:	200034e4 	.word	0x200034e4
   23158:	0002be01 	.word	0x0002be01
   2315c:	0002bced 	.word	0x0002bced

00023160 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23162:	4607      	mov	r7, r0
   23164:	460c      	mov	r4, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   23166:	f007 f8c6 	bl	2a2f6 <k_is_in_isr>
   2316a:	b110      	cbz	r0, 23172 <z_thread_aligned_alloc+0x12>
	}

	if (heap) {
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   2316c:	2000      	movs	r0, #0
	}

	return ret;
}
   2316e:	b003      	add	sp, #12
   23170:	bdf0      	pop	{r4, r5, r6, r7, pc}
		heap = _current->resource_pool;
   23172:	4b0f      	ldr	r3, [pc, #60]	; (231b0 <z_thread_aligned_alloc+0x50>)
   23174:	689b      	ldr	r3, [r3, #8]
   23176:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
	if (heap) {
   2317a:	2e00      	cmp	r6, #0
   2317c:	d0f6      	beq.n	2316c <z_thread_aligned_alloc+0xc>
	size_t excess = MAX(sizeof(struct k_heap *), align);
   2317e:	2f04      	cmp	r7, #4
   23180:	463d      	mov	r5, r7
   23182:	bf38      	it	cc
   23184:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   23186:	1962      	adds	r2, r4, r5
   23188:	d2f0      	bcs.n	2316c <z_thread_aligned_alloc+0xc>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   2318a:	2000      	movs	r0, #0
   2318c:	2100      	movs	r1, #0
   2318e:	e9cd 0100 	strd	r0, r1, [sp]
   23192:	4639      	mov	r1, r7
   23194:	4630      	mov	r0, r6
   23196:	f7fd f9b3 	bl	20500 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2319a:	4604      	mov	r4, r0
   2319c:	2800      	cmp	r0, #0
   2319e:	d0e5      	beq.n	2316c <z_thread_aligned_alloc+0xc>
	memset(mem, 0xff, excess);
   231a0:	462a      	mov	r2, r5
   231a2:	21ff      	movs	r1, #255	; 0xff
   231a4:	f003 f806 	bl	261b4 <memset>
	*heap_ref = heap;
   231a8:	6026      	str	r6, [r4, #0]
	return mem + excess;
   231aa:	1960      	adds	r0, r4, r5
	return ret;
   231ac:	e7df      	b.n	2316e <z_thread_aligned_alloc+0xe>
   231ae:	bf00      	nop
   231b0:	20003490 	.word	0x20003490

000231b4 <nrf_cc3xx_platform_init>:
   231b4:	b510      	push	{r4, lr}
   231b6:	4c0c      	ldr	r4, [pc, #48]	; (231e8 <nrf_cc3xx_platform_init+0x34>)
   231b8:	6823      	ldr	r3, [r4, #0]
   231ba:	b113      	cbz	r3, 231c2 <nrf_cc3xx_platform_init+0xe>
   231bc:	4b0b      	ldr	r3, [pc, #44]	; (231ec <nrf_cc3xx_platform_init+0x38>)
   231be:	681b      	ldr	r3, [r3, #0]
   231c0:	b92b      	cbnz	r3, 231ce <nrf_cc3xx_platform_init+0x1a>
   231c2:	f000 f943 	bl	2344c <CC_LibInit>
   231c6:	b930      	cbnz	r0, 231d6 <nrf_cc3xx_platform_init+0x22>
   231c8:	4b08      	ldr	r3, [pc, #32]	; (231ec <nrf_cc3xx_platform_init+0x38>)
   231ca:	2201      	movs	r2, #1
   231cc:	601a      	str	r2, [r3, #0]
   231ce:	2301      	movs	r3, #1
   231d0:	6023      	str	r3, [r4, #0]
   231d2:	2000      	movs	r0, #0
   231d4:	bd10      	pop	{r4, pc}
   231d6:	3801      	subs	r0, #1
   231d8:	2806      	cmp	r0, #6
   231da:	d901      	bls.n	231e0 <nrf_cc3xx_platform_init+0x2c>
   231dc:	4804      	ldr	r0, [pc, #16]	; (231f0 <nrf_cc3xx_platform_init+0x3c>)
   231de:	bd10      	pop	{r4, pc}
   231e0:	4b04      	ldr	r3, [pc, #16]	; (231f4 <nrf_cc3xx_platform_init+0x40>)
   231e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   231e6:	bd10      	pop	{r4, pc}
   231e8:	200034e8 	.word	0x200034e8
   231ec:	200034ec 	.word	0x200034ec
   231f0:	ffff8ffe 	.word	0xffff8ffe
   231f4:	0002b7f0 	.word	0x0002b7f0

000231f8 <nrf_cc3xx_platform_abort>:
   231f8:	f3bf 8f4f 	dsb	sy
   231fc:	4905      	ldr	r1, [pc, #20]	; (23214 <nrf_cc3xx_platform_abort+0x1c>)
   231fe:	4b06      	ldr	r3, [pc, #24]	; (23218 <nrf_cc3xx_platform_abort+0x20>)
   23200:	68ca      	ldr	r2, [r1, #12]
   23202:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23206:	4313      	orrs	r3, r2
   23208:	60cb      	str	r3, [r1, #12]
   2320a:	f3bf 8f4f 	dsb	sy
   2320e:	bf00      	nop
   23210:	e7fd      	b.n	2320e <nrf_cc3xx_platform_abort+0x16>
   23212:	bf00      	nop
   23214:	e000ed00 	.word	0xe000ed00
   23218:	05fa0004 	.word	0x05fa0004

0002321c <CC_PalAbort>:
   2321c:	b4f0      	push	{r4, r5, r6, r7}
   2321e:	4f09      	ldr	r7, [pc, #36]	; (23244 <CC_PalAbort+0x28>)
   23220:	4e09      	ldr	r6, [pc, #36]	; (23248 <CC_PalAbort+0x2c>)
   23222:	4c0a      	ldr	r4, [pc, #40]	; (2324c <CC_PalAbort+0x30>)
   23224:	4a0a      	ldr	r2, [pc, #40]	; (23250 <CC_PalAbort+0x34>)
   23226:	4d0b      	ldr	r5, [pc, #44]	; (23254 <CC_PalAbort+0x38>)
   23228:	490b      	ldr	r1, [pc, #44]	; (23258 <CC_PalAbort+0x3c>)
   2322a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   2322e:	603b      	str	r3, [r7, #0]
   23230:	6852      	ldr	r2, [r2, #4]
   23232:	6033      	str	r3, [r6, #0]
   23234:	6023      	str	r3, [r4, #0]
   23236:	2400      	movs	r4, #0
   23238:	602b      	str	r3, [r5, #0]
   2323a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   2323e:	bcf0      	pop	{r4, r5, r6, r7}
   23240:	4710      	bx	r2
   23242:	bf00      	nop
   23244:	5002b400 	.word	0x5002b400
   23248:	5002b404 	.word	0x5002b404
   2324c:	5002b408 	.word	0x5002b408
   23250:	20000b1c 	.word	0x20000b1c
   23254:	5002b40c 	.word	0x5002b40c
   23258:	5002a000 	.word	0x5002a000

0002325c <nrf_cc3xx_platform_set_abort>:
   2325c:	e9d0 1200 	ldrd	r1, r2, [r0]
   23260:	4b01      	ldr	r3, [pc, #4]	; (23268 <nrf_cc3xx_platform_set_abort+0xc>)
   23262:	e9c3 1200 	strd	r1, r2, [r3]
   23266:	4770      	bx	lr
   23268:	20000b1c 	.word	0x20000b1c

0002326c <nrf_cc3xx_platform_entropy_get>:
   2326c:	2990      	cmp	r1, #144	; 0x90
   2326e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23272:	460c      	mov	r4, r1
   23274:	4607      	mov	r7, r0
   23276:	4616      	mov	r6, r2
   23278:	d917      	bls.n	232aa <nrf_cc3xx_platform_entropy_get+0x3e>
   2327a:	2500      	movs	r5, #0
   2327c:	e003      	b.n	23286 <nrf_cc3xx_platform_entropy_get+0x1a>
   2327e:	6831      	ldr	r1, [r6, #0]
   23280:	1a64      	subs	r4, r4, r1
   23282:	440d      	add	r5, r1
   23284:	d00e      	beq.n	232a4 <nrf_cc3xx_platform_entropy_get+0x38>
   23286:	2c90      	cmp	r4, #144	; 0x90
   23288:	4622      	mov	r2, r4
   2328a:	4633      	mov	r3, r6
   2328c:	bf28      	it	cs
   2328e:	2290      	movcs	r2, #144	; 0x90
   23290:	1979      	adds	r1, r7, r5
   23292:	2000      	movs	r0, #0
   23294:	f000 fd26 	bl	23ce4 <mbedtls_hardware_poll>
   23298:	2800      	cmp	r0, #0
   2329a:	d0f0      	beq.n	2327e <nrf_cc3xx_platform_entropy_get+0x12>
   2329c:	2300      	movs	r3, #0
   2329e:	6033      	str	r3, [r6, #0]
   232a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   232a4:	6035      	str	r5, [r6, #0]
   232a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   232aa:	4613      	mov	r3, r2
   232ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   232b0:	460a      	mov	r2, r1
   232b2:	4601      	mov	r1, r0
   232b4:	2000      	movs	r0, #0
   232b6:	f000 bd15 	b.w	23ce4 <mbedtls_hardware_poll>
   232ba:	bf00      	nop

000232bc <mutex_unlock>:
   232bc:	b148      	cbz	r0, 232d2 <mutex_unlock+0x16>
   232be:	6843      	ldr	r3, [r0, #4]
   232c0:	b12b      	cbz	r3, 232ce <mutex_unlock+0x12>
   232c2:	f3bf 8f5f 	dmb	sy
   232c6:	2300      	movs	r3, #0
   232c8:	6003      	str	r3, [r0, #0]
   232ca:	4618      	mov	r0, r3
   232cc:	4770      	bx	lr
   232ce:	4802      	ldr	r0, [pc, #8]	; (232d8 <mutex_unlock+0x1c>)
   232d0:	4770      	bx	lr
   232d2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   232d6:	4770      	bx	lr
   232d8:	ffff8fea 	.word	0xffff8fea

000232dc <mutex_free>:
   232dc:	b510      	push	{r4, lr}
   232de:	4604      	mov	r4, r0
   232e0:	b128      	cbz	r0, 232ee <mutex_free+0x12>
   232e2:	6863      	ldr	r3, [r4, #4]
   232e4:	b113      	cbz	r3, 232ec <mutex_free+0x10>
   232e6:	2300      	movs	r3, #0
   232e8:	6023      	str	r3, [r4, #0]
   232ea:	6063      	str	r3, [r4, #4]
   232ec:	bd10      	pop	{r4, pc}
   232ee:	4b02      	ldr	r3, [pc, #8]	; (232f8 <mutex_free+0x1c>)
   232f0:	4802      	ldr	r0, [pc, #8]	; (232fc <mutex_free+0x20>)
   232f2:	685b      	ldr	r3, [r3, #4]
   232f4:	4798      	blx	r3
   232f6:	e7f4      	b.n	232e2 <mutex_free+0x6>
   232f8:	20000b1c 	.word	0x20000b1c
   232fc:	0002b80c 	.word	0x0002b80c

00023300 <mutex_init>:
   23300:	b510      	push	{r4, lr}
   23302:	4604      	mov	r4, r0
   23304:	b130      	cbz	r0, 23314 <mutex_init+0x14>
   23306:	6863      	ldr	r3, [r4, #4]
   23308:	2200      	movs	r2, #0
   2330a:	f043 0301 	orr.w	r3, r3, #1
   2330e:	6063      	str	r3, [r4, #4]
   23310:	6022      	str	r2, [r4, #0]
   23312:	bd10      	pop	{r4, pc}
   23314:	4801      	ldr	r0, [pc, #4]	; (2331c <mutex_init+0x1c>)
   23316:	f7ff ff81 	bl	2321c <CC_PalAbort>
   2331a:	e7f4      	b.n	23306 <mutex_init+0x6>
   2331c:	0002b834 	.word	0x0002b834

00023320 <mutex_lock>:
   23320:	b1a0      	cbz	r0, 2334c <mutex_lock+0x2c>
   23322:	6843      	ldr	r3, [r0, #4]
   23324:	b183      	cbz	r3, 23348 <mutex_lock+0x28>
   23326:	2201      	movs	r2, #1
   23328:	f3bf 8f5b 	dmb	ish
   2332c:	e850 3f00 	ldrex	r3, [r0]
   23330:	e840 2100 	strex	r1, r2, [r0]
   23334:	2900      	cmp	r1, #0
   23336:	d1f9      	bne.n	2332c <mutex_lock+0xc>
   23338:	f3bf 8f5b 	dmb	ish
   2333c:	2b01      	cmp	r3, #1
   2333e:	d0f3      	beq.n	23328 <mutex_lock+0x8>
   23340:	f3bf 8f5f 	dmb	sy
   23344:	2000      	movs	r0, #0
   23346:	4770      	bx	lr
   23348:	4802      	ldr	r0, [pc, #8]	; (23354 <mutex_lock+0x34>)
   2334a:	4770      	bx	lr
   2334c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   23350:	4770      	bx	lr
   23352:	bf00      	nop
   23354:	ffff8fea 	.word	0xffff8fea

00023358 <nrf_cc3xx_platform_set_mutexes>:
   23358:	b470      	push	{r4, r5, r6}
   2335a:	e9d0 6500 	ldrd	r6, r5, [r0]
   2335e:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
   23362:	4b09      	ldr	r3, [pc, #36]	; (23388 <nrf_cc3xx_platform_set_mutexes+0x30>)
   23364:	e9c3 4202 	strd	r4, r2, [r3, #8]
   23368:	e9c3 6500 	strd	r6, r5, [r3]
   2336c:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
   23370:	e9d1 6500 	ldrd	r6, r5, [r1]
   23374:	4b05      	ldr	r3, [pc, #20]	; (2338c <nrf_cc3xx_platform_set_mutexes+0x34>)
   23376:	690a      	ldr	r2, [r1, #16]
   23378:	611a      	str	r2, [r3, #16]
   2337a:	e9c3 6500 	strd	r6, r5, [r3]
   2337e:	e9c3 4002 	strd	r4, r0, [r3, #8]
   23382:	bc70      	pop	{r4, r5, r6}
   23384:	4770      	bx	lr
   23386:	bf00      	nop
   23388:	20000b2c 	.word	0x20000b2c
   2338c:	20000b3c 	.word	0x20000b3c

00023390 <CC_LibInitRngModule>:
   23390:	b530      	push	{r4, r5, lr}
   23392:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   23396:	f44f 7208 	mov.w	r2, #544	; 0x220
   2339a:	2100      	movs	r1, #0
   2339c:	a80c      	add	r0, sp, #48	; 0x30
   2339e:	f002 ff09 	bl	261b4 <memset>
   233a2:	2100      	movs	r1, #0
   233a4:	a802      	add	r0, sp, #8
   233a6:	2228      	movs	r2, #40	; 0x28
   233a8:	9101      	str	r1, [sp, #4]
   233aa:	f002 ff03 	bl	261b4 <memset>
   233ae:	a802      	add	r0, sp, #8
   233b0:	f000 fcee 	bl	23d90 <RNG_PLAT_SetUserRngParameters>
   233b4:	b120      	cbz	r0, 233c0 <CC_LibInitRngModule+0x30>
   233b6:	2405      	movs	r4, #5
   233b8:	4620      	mov	r0, r4
   233ba:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   233be:	bd30      	pop	{r4, r5, pc}
   233c0:	4d1d      	ldr	r5, [pc, #116]	; (23438 <CC_LibInitRngModule+0xa8>)
   233c2:	f04f 31ff 	mov.w	r1, #4294967295
   233c6:	6828      	ldr	r0, [r5, #0]
   233c8:	f000 f918 	bl	235fc <CC_PalMutexLock>
   233cc:	4604      	mov	r4, r0
   233ce:	b9e8      	cbnz	r0, 2340c <CC_LibInitRngModule+0x7c>
   233d0:	2000      	movs	r0, #0
   233d2:	f000 f943 	bl	2365c <CC_PalPowerSaveModeSelect>
   233d6:	bb58      	cbnz	r0, 23430 <CC_LibInitRngModule+0xa0>
   233d8:	aa0c      	add	r2, sp, #48	; 0x30
   233da:	a902      	add	r1, sp, #8
   233dc:	a801      	add	r0, sp, #4
   233de:	f000 fc73 	bl	23cc8 <LLF_RND_RunTrngStartupTest>
   233e2:	4604      	mov	r4, r0
   233e4:	2001      	movs	r0, #1
   233e6:	f000 f939 	bl	2365c <CC_PalPowerSaveModeSelect>
   233ea:	b9e8      	cbnz	r0, 23428 <CC_LibInitRngModule+0x98>
   233ec:	6828      	ldr	r0, [r5, #0]
   233ee:	f000 f90d 	bl	2360c <CC_PalMutexUnlock>
   233f2:	b928      	cbnz	r0, 23400 <CC_LibInitRngModule+0x70>
   233f4:	2c00      	cmp	r4, #0
   233f6:	d1de      	bne.n	233b6 <CC_LibInitRngModule+0x26>
   233f8:	4620      	mov	r0, r4
   233fa:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   233fe:	bd30      	pop	{r4, r5, pc}
   23400:	480e      	ldr	r0, [pc, #56]	; (2343c <CC_LibInitRngModule+0xac>)
   23402:	f7ff ff0b 	bl	2321c <CC_PalAbort>
   23406:	2c00      	cmp	r4, #0
   23408:	d0f6      	beq.n	233f8 <CC_LibInitRngModule+0x68>
   2340a:	e7d4      	b.n	233b6 <CC_LibInitRngModule+0x26>
   2340c:	480c      	ldr	r0, [pc, #48]	; (23440 <CC_LibInitRngModule+0xb0>)
   2340e:	f7ff ff05 	bl	2321c <CC_PalAbort>
   23412:	2c01      	cmp	r4, #1
   23414:	d1dc      	bne.n	233d0 <CC_LibInitRngModule+0x40>
   23416:	6828      	ldr	r0, [r5, #0]
   23418:	f000 f8f8 	bl	2360c <CC_PalMutexUnlock>
   2341c:	2800      	cmp	r0, #0
   2341e:	d0ca      	beq.n	233b6 <CC_LibInitRngModule+0x26>
   23420:	4806      	ldr	r0, [pc, #24]	; (2343c <CC_LibInitRngModule+0xac>)
   23422:	f7ff fefb 	bl	2321c <CC_PalAbort>
   23426:	e7c6      	b.n	233b6 <CC_LibInitRngModule+0x26>
   23428:	4806      	ldr	r0, [pc, #24]	; (23444 <CC_LibInitRngModule+0xb4>)
   2342a:	f7ff fef7 	bl	2321c <CC_PalAbort>
   2342e:	e7dd      	b.n	233ec <CC_LibInitRngModule+0x5c>
   23430:	4805      	ldr	r0, [pc, #20]	; (23448 <CC_LibInitRngModule+0xb8>)
   23432:	f7ff fef3 	bl	2321c <CC_PalAbort>
   23436:	e7cf      	b.n	233d8 <CC_LibInitRngModule+0x48>
   23438:	20000b78 	.word	0x20000b78
   2343c:	0002b870 	.word	0x0002b870
   23440:	0002b858 	.word	0x0002b858
   23444:	0002b8a8 	.word	0x0002b8a8
   23448:	0002b888 	.word	0x0002b888

0002344c <CC_LibInit>:
   2344c:	b508      	push	{r3, lr}
   2344e:	f000 f83d 	bl	234cc <CC_HalInit>
   23452:	b118      	cbz	r0, 2345c <CC_LibInit+0x10>
   23454:	f000 f886 	bl	23564 <CC_PalTerminate>
   23458:	2003      	movs	r0, #3
   2345a:	bd08      	pop	{r3, pc}
   2345c:	f000 f854 	bl	23508 <CC_PalInit>
   23460:	b9c0      	cbnz	r0, 23494 <CC_LibInit+0x48>
   23462:	f000 f8fb 	bl	2365c <CC_PalPowerSaveModeSelect>
   23466:	b9b8      	cbnz	r0, 23498 <CC_LibInit+0x4c>
   23468:	4b14      	ldr	r3, [pc, #80]	; (234bc <CC_LibInit+0x70>)
   2346a:	681b      	ldr	r3, [r3, #0]
   2346c:	0e1b      	lsrs	r3, r3, #24
   2346e:	2bf0      	cmp	r3, #240	; 0xf0
   23470:	d10a      	bne.n	23488 <CC_LibInit+0x3c>
   23472:	4a13      	ldr	r2, [pc, #76]	; (234c0 <CC_LibInit+0x74>)
   23474:	4b13      	ldr	r3, [pc, #76]	; (234c4 <CC_LibInit+0x78>)
   23476:	6812      	ldr	r2, [r2, #0]
   23478:	429a      	cmp	r2, r3
   2347a:	d017      	beq.n	234ac <CC_LibInit+0x60>
   2347c:	f000 f828 	bl	234d0 <CC_HalTerminate>
   23480:	f000 f870 	bl	23564 <CC_PalTerminate>
   23484:	2007      	movs	r0, #7
   23486:	bd08      	pop	{r3, pc}
   23488:	f000 f822 	bl	234d0 <CC_HalTerminate>
   2348c:	f000 f86a 	bl	23564 <CC_PalTerminate>
   23490:	2006      	movs	r0, #6
   23492:	bd08      	pop	{r3, pc}
   23494:	2004      	movs	r0, #4
   23496:	bd08      	pop	{r3, pc}
   23498:	f000 f81a 	bl	234d0 <CC_HalTerminate>
   2349c:	f000 f862 	bl	23564 <CC_PalTerminate>
   234a0:	f7ff ff76 	bl	23390 <CC_LibInitRngModule>
   234a4:	2800      	cmp	r0, #0
   234a6:	bf18      	it	ne
   234a8:	2005      	movne	r0, #5
   234aa:	bd08      	pop	{r3, pc}
   234ac:	2001      	movs	r0, #1
   234ae:	f000 f8d5 	bl	2365c <CC_PalPowerSaveModeSelect>
   234b2:	2800      	cmp	r0, #0
   234b4:	d1f0      	bne.n	23498 <CC_LibInit+0x4c>
   234b6:	4b04      	ldr	r3, [pc, #16]	; (234c8 <CC_LibInit+0x7c>)
   234b8:	6018      	str	r0, [r3, #0]
   234ba:	e7f1      	b.n	234a0 <CC_LibInit+0x54>
   234bc:	5002b928 	.word	0x5002b928
   234c0:	5002ba24 	.word	0x5002ba24
   234c4:	20e00000 	.word	0x20e00000
   234c8:	5002ba0c 	.word	0x5002ba0c

000234cc <CC_HalInit>:
   234cc:	2000      	movs	r0, #0
   234ce:	4770      	bx	lr

000234d0 <CC_HalTerminate>:
   234d0:	2000      	movs	r0, #0
   234d2:	4770      	bx	lr

000234d4 <CC_HalClearInterruptBit>:
   234d4:	0543      	lsls	r3, r0, #21
   234d6:	d503      	bpl.n	234e0 <CC_HalClearInterruptBit+0xc>
   234d8:	4b03      	ldr	r3, [pc, #12]	; (234e8 <CC_HalClearInterruptBit+0x14>)
   234da:	f04f 32ff 	mov.w	r2, #4294967295
   234de:	601a      	str	r2, [r3, #0]
   234e0:	4b02      	ldr	r3, [pc, #8]	; (234ec <CC_HalClearInterruptBit+0x18>)
   234e2:	6018      	str	r0, [r3, #0]
   234e4:	4770      	bx	lr
   234e6:	bf00      	nop
   234e8:	5002b108 	.word	0x5002b108
   234ec:	5002ba08 	.word	0x5002ba08

000234f0 <CC_HalMaskInterrupt>:
   234f0:	4b01      	ldr	r3, [pc, #4]	; (234f8 <CC_HalMaskInterrupt+0x8>)
   234f2:	6018      	str	r0, [r3, #0]
   234f4:	4770      	bx	lr
   234f6:	bf00      	nop
   234f8:	5002ba04 	.word	0x5002ba04

000234fc <CC_HalWaitInterruptRND>:
   234fc:	b108      	cbz	r0, 23502 <CC_HalWaitInterruptRND+0x6>
   234fe:	f000 b84f 	b.w	235a0 <CC_PalWaitInterruptRND>
   23502:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   23506:	4770      	bx	lr

00023508 <CC_PalInit>:
   23508:	b510      	push	{r4, lr}
   2350a:	4811      	ldr	r0, [pc, #68]	; (23550 <CC_PalInit+0x48>)
   2350c:	f000 f862 	bl	235d4 <CC_PalMutexCreate>
   23510:	b100      	cbz	r0, 23514 <CC_PalInit+0xc>
   23512:	bd10      	pop	{r4, pc}
   23514:	480f      	ldr	r0, [pc, #60]	; (23554 <CC_PalInit+0x4c>)
   23516:	f000 f85d 	bl	235d4 <CC_PalMutexCreate>
   2351a:	2800      	cmp	r0, #0
   2351c:	d1f9      	bne.n	23512 <CC_PalInit+0xa>
   2351e:	4c0e      	ldr	r4, [pc, #56]	; (23558 <CC_PalInit+0x50>)
   23520:	4620      	mov	r0, r4
   23522:	f000 f857 	bl	235d4 <CC_PalMutexCreate>
   23526:	2800      	cmp	r0, #0
   23528:	d1f3      	bne.n	23512 <CC_PalInit+0xa>
   2352a:	4b0c      	ldr	r3, [pc, #48]	; (2355c <CC_PalInit+0x54>)
   2352c:	480c      	ldr	r0, [pc, #48]	; (23560 <CC_PalInit+0x58>)
   2352e:	601c      	str	r4, [r3, #0]
   23530:	f000 f850 	bl	235d4 <CC_PalMutexCreate>
   23534:	4601      	mov	r1, r0
   23536:	2800      	cmp	r0, #0
   23538:	d1eb      	bne.n	23512 <CC_PalInit+0xa>
   2353a:	f000 f82d 	bl	23598 <CC_PalDmaInit>
   2353e:	4604      	mov	r4, r0
   23540:	b108      	cbz	r0, 23546 <CC_PalInit+0x3e>
   23542:	4620      	mov	r0, r4
   23544:	bd10      	pop	{r4, pc}
   23546:	f000 f86b 	bl	23620 <CC_PalPowerSaveModeInit>
   2354a:	4620      	mov	r0, r4
   2354c:	e7fa      	b.n	23544 <CC_PalInit+0x3c>
   2354e:	bf00      	nop
   23550:	20000b74 	.word	0x20000b74
   23554:	20000b68 	.word	0x20000b68
   23558:	20000b70 	.word	0x20000b70
   2355c:	20000b78 	.word	0x20000b78
   23560:	20000b6c 	.word	0x20000b6c

00023564 <CC_PalTerminate>:
   23564:	b508      	push	{r3, lr}
   23566:	4808      	ldr	r0, [pc, #32]	; (23588 <CC_PalTerminate+0x24>)
   23568:	f000 f83e 	bl	235e8 <CC_PalMutexDestroy>
   2356c:	4807      	ldr	r0, [pc, #28]	; (2358c <CC_PalTerminate+0x28>)
   2356e:	f000 f83b 	bl	235e8 <CC_PalMutexDestroy>
   23572:	4807      	ldr	r0, [pc, #28]	; (23590 <CC_PalTerminate+0x2c>)
   23574:	f000 f838 	bl	235e8 <CC_PalMutexDestroy>
   23578:	4806      	ldr	r0, [pc, #24]	; (23594 <CC_PalTerminate+0x30>)
   2357a:	f000 f835 	bl	235e8 <CC_PalMutexDestroy>
   2357e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23582:	f000 b80b 	b.w	2359c <CC_PalDmaTerminate>
   23586:	bf00      	nop
   23588:	20000b74 	.word	0x20000b74
   2358c:	20000b68 	.word	0x20000b68
   23590:	20000b70 	.word	0x20000b70
   23594:	20000b6c 	.word	0x20000b6c

00023598 <CC_PalDmaInit>:
   23598:	2000      	movs	r0, #0
   2359a:	4770      	bx	lr

0002359c <CC_PalDmaTerminate>:
   2359c:	4770      	bx	lr
   2359e:	bf00      	nop

000235a0 <CC_PalWaitInterruptRND>:
   235a0:	b410      	push	{r4}
   235a2:	4c08      	ldr	r4, [pc, #32]	; (235c4 <CC_PalWaitInterruptRND+0x24>)
   235a4:	4602      	mov	r2, r0
   235a6:	6823      	ldr	r3, [r4, #0]
   235a8:	4213      	tst	r3, r2
   235aa:	d0fc      	beq.n	235a6 <CC_PalWaitInterruptRND+0x6>
   235ac:	b121      	cbz	r1, 235b8 <CC_PalWaitInterruptRND+0x18>
   235ae:	4b06      	ldr	r3, [pc, #24]	; (235c8 <CC_PalWaitInterruptRND+0x28>)
   235b0:	4806      	ldr	r0, [pc, #24]	; (235cc <CC_PalWaitInterruptRND+0x2c>)
   235b2:	681b      	ldr	r3, [r3, #0]
   235b4:	600b      	str	r3, [r1, #0]
   235b6:	6003      	str	r3, [r0, #0]
   235b8:	4b05      	ldr	r3, [pc, #20]	; (235d0 <CC_PalWaitInterruptRND+0x30>)
   235ba:	601a      	str	r2, [r3, #0]
   235bc:	2000      	movs	r0, #0
   235be:	bc10      	pop	{r4}
   235c0:	4770      	bx	lr
   235c2:	bf00      	nop
   235c4:	5002ba00 	.word	0x5002ba00
   235c8:	5002b104 	.word	0x5002b104
   235cc:	5002b108 	.word	0x5002b108
   235d0:	5002ba08 	.word	0x5002ba08

000235d4 <CC_PalMutexCreate>:
   235d4:	b508      	push	{r3, lr}
   235d6:	4b03      	ldr	r3, [pc, #12]	; (235e4 <CC_PalMutexCreate+0x10>)
   235d8:	6802      	ldr	r2, [r0, #0]
   235da:	681b      	ldr	r3, [r3, #0]
   235dc:	6810      	ldr	r0, [r2, #0]
   235de:	4798      	blx	r3
   235e0:	2000      	movs	r0, #0
   235e2:	bd08      	pop	{r3, pc}
   235e4:	20000b2c 	.word	0x20000b2c

000235e8 <CC_PalMutexDestroy>:
   235e8:	b508      	push	{r3, lr}
   235ea:	4b03      	ldr	r3, [pc, #12]	; (235f8 <CC_PalMutexDestroy+0x10>)
   235ec:	6802      	ldr	r2, [r0, #0]
   235ee:	685b      	ldr	r3, [r3, #4]
   235f0:	6810      	ldr	r0, [r2, #0]
   235f2:	4798      	blx	r3
   235f4:	2000      	movs	r0, #0
   235f6:	bd08      	pop	{r3, pc}
   235f8:	20000b2c 	.word	0x20000b2c

000235fc <CC_PalMutexLock>:
   235fc:	4b02      	ldr	r3, [pc, #8]	; (23608 <CC_PalMutexLock+0xc>)
   235fe:	6802      	ldr	r2, [r0, #0]
   23600:	689b      	ldr	r3, [r3, #8]
   23602:	6810      	ldr	r0, [r2, #0]
   23604:	4718      	bx	r3
   23606:	bf00      	nop
   23608:	20000b2c 	.word	0x20000b2c

0002360c <CC_PalMutexUnlock>:
   2360c:	b508      	push	{r3, lr}
   2360e:	4b03      	ldr	r3, [pc, #12]	; (2361c <CC_PalMutexUnlock+0x10>)
   23610:	6802      	ldr	r2, [r0, #0]
   23612:	68db      	ldr	r3, [r3, #12]
   23614:	6810      	ldr	r0, [r2, #0]
   23616:	4798      	blx	r3
   23618:	2000      	movs	r0, #0
   2361a:	bd08      	pop	{r3, pc}
   2361c:	20000b2c 	.word	0x20000b2c

00023620 <CC_PalPowerSaveModeInit>:
   23620:	b570      	push	{r4, r5, r6, lr}
   23622:	4c09      	ldr	r4, [pc, #36]	; (23648 <CC_PalPowerSaveModeInit+0x28>)
   23624:	4d09      	ldr	r5, [pc, #36]	; (2364c <CC_PalPowerSaveModeInit+0x2c>)
   23626:	6920      	ldr	r0, [r4, #16]
   23628:	68ab      	ldr	r3, [r5, #8]
   2362a:	4798      	blx	r3
   2362c:	b118      	cbz	r0, 23636 <CC_PalPowerSaveModeInit+0x16>
   2362e:	4b08      	ldr	r3, [pc, #32]	; (23650 <CC_PalPowerSaveModeInit+0x30>)
   23630:	4808      	ldr	r0, [pc, #32]	; (23654 <CC_PalPowerSaveModeInit+0x34>)
   23632:	685b      	ldr	r3, [r3, #4]
   23634:	4798      	blx	r3
   23636:	4a08      	ldr	r2, [pc, #32]	; (23658 <CC_PalPowerSaveModeInit+0x38>)
   23638:	68eb      	ldr	r3, [r5, #12]
   2363a:	6920      	ldr	r0, [r4, #16]
   2363c:	2100      	movs	r1, #0
   2363e:	6011      	str	r1, [r2, #0]
   23640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23644:	4718      	bx	r3
   23646:	bf00      	nop
   23648:	20000b3c 	.word	0x20000b3c
   2364c:	20000b2c 	.word	0x20000b2c
   23650:	20000b1c 	.word	0x20000b1c
   23654:	0002b8c8 	.word	0x0002b8c8
   23658:	20003500 	.word	0x20003500

0002365c <CC_PalPowerSaveModeSelect>:
   2365c:	b570      	push	{r4, r5, r6, lr}
   2365e:	4d1a      	ldr	r5, [pc, #104]	; (236c8 <CC_PalPowerSaveModeSelect+0x6c>)
   23660:	4e1a      	ldr	r6, [pc, #104]	; (236cc <CC_PalPowerSaveModeSelect+0x70>)
   23662:	4604      	mov	r4, r0
   23664:	68b2      	ldr	r2, [r6, #8]
   23666:	6928      	ldr	r0, [r5, #16]
   23668:	4790      	blx	r2
   2366a:	b9f0      	cbnz	r0, 236aa <CC_PalPowerSaveModeSelect+0x4e>
   2366c:	b15c      	cbz	r4, 23686 <CC_PalPowerSaveModeSelect+0x2a>
   2366e:	4c18      	ldr	r4, [pc, #96]	; (236d0 <CC_PalPowerSaveModeSelect+0x74>)
   23670:	6823      	ldr	r3, [r4, #0]
   23672:	b1ab      	cbz	r3, 236a0 <CC_PalPowerSaveModeSelect+0x44>
   23674:	2b01      	cmp	r3, #1
   23676:	d01a      	beq.n	236ae <CC_PalPowerSaveModeSelect+0x52>
   23678:	3b01      	subs	r3, #1
   2367a:	6023      	str	r3, [r4, #0]
   2367c:	6928      	ldr	r0, [r5, #16]
   2367e:	68f3      	ldr	r3, [r6, #12]
   23680:	4798      	blx	r3
   23682:	2000      	movs	r0, #0
   23684:	bd70      	pop	{r4, r5, r6, pc}
   23686:	4c12      	ldr	r4, [pc, #72]	; (236d0 <CC_PalPowerSaveModeSelect+0x74>)
   23688:	6821      	ldr	r1, [r4, #0]
   2368a:	b939      	cbnz	r1, 2369c <CC_PalPowerSaveModeSelect+0x40>
   2368c:	4b11      	ldr	r3, [pc, #68]	; (236d4 <CC_PalPowerSaveModeSelect+0x78>)
   2368e:	4a12      	ldr	r2, [pc, #72]	; (236d8 <CC_PalPowerSaveModeSelect+0x7c>)
   23690:	2001      	movs	r0, #1
   23692:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   23696:	6813      	ldr	r3, [r2, #0]
   23698:	2b00      	cmp	r3, #0
   2369a:	d1fc      	bne.n	23696 <CC_PalPowerSaveModeSelect+0x3a>
   2369c:	3101      	adds	r1, #1
   2369e:	6021      	str	r1, [r4, #0]
   236a0:	68f3      	ldr	r3, [r6, #12]
   236a2:	6928      	ldr	r0, [r5, #16]
   236a4:	4798      	blx	r3
   236a6:	2000      	movs	r0, #0
   236a8:	bd70      	pop	{r4, r5, r6, pc}
   236aa:	480c      	ldr	r0, [pc, #48]	; (236dc <CC_PalPowerSaveModeSelect+0x80>)
   236ac:	bd70      	pop	{r4, r5, r6, pc}
   236ae:	4a0a      	ldr	r2, [pc, #40]	; (236d8 <CC_PalPowerSaveModeSelect+0x7c>)
   236b0:	6813      	ldr	r3, [r2, #0]
   236b2:	2b00      	cmp	r3, #0
   236b4:	d1fc      	bne.n	236b0 <CC_PalPowerSaveModeSelect+0x54>
   236b6:	4a07      	ldr	r2, [pc, #28]	; (236d4 <CC_PalPowerSaveModeSelect+0x78>)
   236b8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   236bc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   236c0:	f7ff ff16 	bl	234f0 <CC_HalMaskInterrupt>
   236c4:	6823      	ldr	r3, [r4, #0]
   236c6:	e7d7      	b.n	23678 <CC_PalPowerSaveModeSelect+0x1c>
   236c8:	20000b3c 	.word	0x20000b3c
   236cc:	20000b2c 	.word	0x20000b2c
   236d0:	20003500 	.word	0x20003500
   236d4:	5002a000 	.word	0x5002a000
   236d8:	5002b910 	.word	0x5002b910
   236dc:	ffff8fe9 	.word	0xffff8fe9

000236e0 <startTrngHW>:
   236e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   236e4:	2800      	cmp	r0, #0
   236e6:	d076      	beq.n	237d6 <startTrngHW+0xf6>
   236e8:	460c      	mov	r4, r1
   236ea:	2900      	cmp	r1, #0
   236ec:	d073      	beq.n	237d6 <startTrngHW+0xf6>
   236ee:	461d      	mov	r5, r3
   236f0:	2b00      	cmp	r3, #0
   236f2:	d070      	beq.n	237d6 <startTrngHW+0xf6>
   236f4:	4606      	mov	r6, r0
   236f6:	b11a      	cbz	r2, 23700 <startTrngHW+0x20>
   236f8:	2201      	movs	r2, #1
   236fa:	2300      	movs	r3, #0
   236fc:	602a      	str	r2, [r5, #0]
   236fe:	6003      	str	r3, [r0, #0]
   23700:	682b      	ldr	r3, [r5, #0]
   23702:	2b00      	cmp	r3, #0
   23704:	d063      	beq.n	237ce <startTrngHW+0xee>
   23706:	4629      	mov	r1, r5
   23708:	4620      	mov	r0, r4
   2370a:	f000 fc05 	bl	23f18 <LLF_RND_GetFastestRosc>
   2370e:	4607      	mov	r7, r0
   23710:	2800      	cmp	r0, #0
   23712:	d15d      	bne.n	237d0 <startTrngHW+0xf0>
   23714:	6828      	ldr	r0, [r5, #0]
   23716:	4621      	mov	r1, r4
   23718:	f000 fbe0 	bl	23edc <LLF_RND_GetRoscSampleCnt>
   2371c:	4607      	mov	r7, r0
   2371e:	2800      	cmp	r0, #0
   23720:	d156      	bne.n	237d0 <startTrngHW+0xf0>
   23722:	682b      	ldr	r3, [r5, #0]
   23724:	2b08      	cmp	r3, #8
   23726:	d065      	beq.n	237f4 <startTrngHW+0x114>
   23728:	2b04      	cmp	r3, #4
   2372a:	d066      	beq.n	237fa <startTrngHW+0x11a>
   2372c:	f1a3 0802 	sub.w	r8, r3, #2
   23730:	fab8 f888 	clz	r8, r8
   23734:	ea4f 1858 	mov.w	r8, r8, lsr #5
   23738:	4b31      	ldr	r3, [pc, #196]	; (23800 <startTrngHW+0x120>)
   2373a:	4932      	ldr	r1, [pc, #200]	; (23804 <startTrngHW+0x124>)
   2373c:	4a32      	ldr	r2, [pc, #200]	; (23808 <startTrngHW+0x128>)
   2373e:	2001      	movs	r0, #1
   23740:	6018      	str	r0, [r3, #0]
   23742:	469c      	mov	ip, r3
   23744:	6008      	str	r0, [r1, #0]
   23746:	f8cc 0000 	str.w	r0, [ip]
   2374a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2374c:	6013      	str	r3, [r2, #0]
   2374e:	6811      	ldr	r1, [r2, #0]
   23750:	428b      	cmp	r3, r1
   23752:	d1f8      	bne.n	23746 <startTrngHW+0x66>
   23754:	4b2d      	ldr	r3, [pc, #180]	; (2380c <startTrngHW+0x12c>)
   23756:	f04f 0900 	mov.w	r9, #0
   2375a:	f8c3 9000 	str.w	r9, [r3]
   2375e:	f04f 30ff 	mov.w	r0, #4294967295
   23762:	f7ff feb7 	bl	234d4 <CC_HalClearInterruptBit>
   23766:	4b2a      	ldr	r3, [pc, #168]	; (23810 <startTrngHW+0x130>)
   23768:	4a2a      	ldr	r2, [pc, #168]	; (23814 <startTrngHW+0x134>)
   2376a:	601a      	str	r2, [r3, #0]
   2376c:	4648      	mov	r0, r9
   2376e:	f7ff febf 	bl	234f0 <CC_HalMaskInterrupt>
   23772:	4a29      	ldr	r2, [pc, #164]	; (23818 <startTrngHW+0x138>)
   23774:	4b29      	ldr	r3, [pc, #164]	; (2381c <startTrngHW+0x13c>)
   23776:	f8c2 8000 	str.w	r8, [r2]
   2377a:	6818      	ldr	r0, [r3, #0]
   2377c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23780:	f7ff feb6 	bl	234f0 <CC_HalMaskInterrupt>
   23784:	4b26      	ldr	r3, [pc, #152]	; (23820 <startTrngHW+0x140>)
   23786:	220a      	movs	r2, #10
   23788:	601a      	str	r2, [r3, #0]
   2378a:	9908      	ldr	r1, [sp, #32]
   2378c:	6923      	ldr	r3, [r4, #16]
   2378e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   23790:	2901      	cmp	r1, #1
   23792:	d024      	beq.n	237de <startTrngHW+0xfe>
   23794:	4923      	ldr	r1, [pc, #140]	; (23824 <startTrngHW+0x144>)
   23796:	fba1 1303 	umull	r1, r3, r1, r3
   2379a:	091b      	lsrs	r3, r3, #4
   2379c:	fb03 f302 	mul.w	r3, r3, r2
   237a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   237a4:	4920      	ldr	r1, [pc, #128]	; (23828 <startTrngHW+0x148>)
   237a6:	4a19      	ldr	r2, [pc, #100]	; (2380c <startTrngHW+0x12c>)
   237a8:	03db      	lsls	r3, r3, #15
   237aa:	099b      	lsrs	r3, r3, #6
   237ac:	600b      	str	r3, [r1, #0]
   237ae:	2301      	movs	r3, #1
   237b0:	6013      	str	r3, [r2, #0]
   237b2:	6833      	ldr	r3, [r6, #0]
   237b4:	682a      	ldr	r2, [r5, #0]
   237b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   237ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   237be:	6033      	str	r3, [r6, #0]
   237c0:	682a      	ldr	r2, [r5, #0]
   237c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   237c6:	6033      	str	r3, [r6, #0]
   237c8:	4638      	mov	r0, r7
   237ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   237ce:	4f17      	ldr	r7, [pc, #92]	; (2382c <startTrngHW+0x14c>)
   237d0:	4638      	mov	r0, r7
   237d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   237d6:	4f16      	ldr	r7, [pc, #88]	; (23830 <startTrngHW+0x150>)
   237d8:	4638      	mov	r0, r7
   237da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   237de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   237e2:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   237e6:	3101      	adds	r1, #1
   237e8:	d002      	beq.n	237f0 <startTrngHW+0x110>
   237ea:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   237ee:	e7d1      	b.n	23794 <startTrngHW+0xb4>
   237f0:	2316      	movs	r3, #22
   237f2:	e7d3      	b.n	2379c <startTrngHW+0xbc>
   237f4:	f04f 0803 	mov.w	r8, #3
   237f8:	e79e      	b.n	23738 <startTrngHW+0x58>
   237fa:	f04f 0802 	mov.w	r8, #2
   237fe:	e79b      	b.n	23738 <startTrngHW+0x58>
   23800:	5002b1c4 	.word	0x5002b1c4
   23804:	5002b140 	.word	0x5002b140
   23808:	5002b130 	.word	0x5002b130
   2380c:	5002b12c 	.word	0x5002b12c
   23810:	5002b100 	.word	0x5002b100
   23814:	0ffffffe 	.word	0x0ffffffe
   23818:	5002b10c 	.word	0x5002b10c
   2381c:	5002ba04 	.word	0x5002ba04
   23820:	5002b138 	.word	0x5002b138
   23824:	aaaaaaab 	.word	0xaaaaaaab
   23828:	5002b1d8 	.word	0x5002b1d8
   2382c:	00f10c31 	.word	0x00f10c31
   23830:	00f10c35 	.word	0x00f10c35

00023834 <LLF_RND_RepetitionCounterTest.part.0>:
   23834:	b4f0      	push	{r4, r5, r6, r7}
   23836:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   2383a:	2400      	movs	r4, #0
   2383c:	f10c 3cff 	add.w	ip, ip, #4294967295
   23840:	4626      	mov	r6, r4
   23842:	4627      	mov	r7, r4
   23844:	e006      	b.n	23854 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   23846:	429f      	cmp	r7, r3
   23848:	d016      	beq.n	23878 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   2384a:	2601      	movs	r6, #1
   2384c:	4565      	cmp	r5, ip
   2384e:	d819      	bhi.n	23884 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   23850:	462c      	mov	r4, r5
   23852:	461f      	mov	r7, r3
   23854:	0963      	lsrs	r3, r4, #5
   23856:	f004 011f 	and.w	r1, r4, #31
   2385a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2385e:	291f      	cmp	r1, #31
   23860:	fa23 f301 	lsr.w	r3, r3, r1
   23864:	f104 0501 	add.w	r5, r4, #1
   23868:	bf18      	it	ne
   2386a:	f003 0301 	andne.w	r3, r3, #1
   2386e:	2c00      	cmp	r4, #0
   23870:	d1e9      	bne.n	23846 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   23872:	2601      	movs	r6, #1
   23874:	4635      	mov	r5, r6
   23876:	e7eb      	b.n	23850 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   23878:	3601      	adds	r6, #1
   2387a:	4296      	cmp	r6, r2
   2387c:	d1e6      	bne.n	2384c <LLF_RND_RepetitionCounterTest.part.0+0x18>
   2387e:	4803      	ldr	r0, [pc, #12]	; (2388c <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   23880:	bcf0      	pop	{r4, r5, r6, r7}
   23882:	4770      	bx	lr
   23884:	2000      	movs	r0, #0
   23886:	bcf0      	pop	{r4, r5, r6, r7}
   23888:	4770      	bx	lr
   2388a:	bf00      	nop
   2388c:	00f10c36 	.word	0x00f10c36

00023890 <LLF_RND_AdaptiveProportionTest>:
   23890:	2800      	cmp	r0, #0
   23892:	d061      	beq.n	23958 <LLF_RND_AdaptiveProportionTest+0xc8>
   23894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23898:	1e4c      	subs	r4, r1, #1
   2389a:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   2389e:	d227      	bcs.n	238f0 <LLF_RND_AdaptiveProportionTest+0x60>
   238a0:	b333      	cbz	r3, 238f0 <LLF_RND_AdaptiveProportionTest+0x60>
   238a2:	b32a      	cbz	r2, 238f0 <LLF_RND_AdaptiveProportionTest+0x60>
   238a4:	00cd      	lsls	r5, r1, #3
   238a6:	2b01      	cmp	r3, #1
   238a8:	f105 3eff 	add.w	lr, r5, #4294967295
   238ac:	d030      	beq.n	23910 <LLF_RND_AdaptiveProportionTest+0x80>
   238ae:	2100      	movs	r1, #0
   238b0:	468c      	mov	ip, r1
   238b2:	460f      	mov	r7, r1
   238b4:	460e      	mov	r6, r1
   238b6:	f103 38ff 	add.w	r8, r3, #4294967295
   238ba:	094c      	lsrs	r4, r1, #5
   238bc:	f001 051f 	and.w	r5, r1, #31
   238c0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   238c4:	2d1f      	cmp	r5, #31
   238c6:	fa24 f405 	lsr.w	r4, r4, r5
   238ca:	bf18      	it	ne
   238cc:	f004 0401 	andne.w	r4, r4, #1
   238d0:	b921      	cbnz	r1, 238dc <LLF_RND_AdaptiveProportionTest+0x4c>
   238d2:	2601      	movs	r6, #1
   238d4:	46b4      	mov	ip, r6
   238d6:	4631      	mov	r1, r6
   238d8:	4627      	mov	r7, r4
   238da:	e7ee      	b.n	238ba <LLF_RND_AdaptiveProportionTest+0x2a>
   238dc:	42b3      	cmp	r3, r6
   238de:	d013      	beq.n	23908 <LLF_RND_AdaptiveProportionTest+0x78>
   238e0:	42a7      	cmp	r7, r4
   238e2:	d101      	bne.n	238e8 <LLF_RND_AdaptiveProportionTest+0x58>
   238e4:	f10c 0c01 	add.w	ip, ip, #1
   238e8:	4546      	cmp	r6, r8
   238ea:	d104      	bne.n	238f6 <LLF_RND_AdaptiveProportionTest+0x66>
   238ec:	4562      	cmp	r2, ip
   238ee:	d202      	bcs.n	238f6 <LLF_RND_AdaptiveProportionTest+0x66>
   238f0:	481a      	ldr	r0, [pc, #104]	; (2395c <LLF_RND_AdaptiveProportionTest+0xcc>)
   238f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   238f6:	463c      	mov	r4, r7
   238f8:	3101      	adds	r1, #1
   238fa:	458e      	cmp	lr, r1
   238fc:	f106 0601 	add.w	r6, r6, #1
   23900:	d2ea      	bcs.n	238d8 <LLF_RND_AdaptiveProportionTest+0x48>
   23902:	2000      	movs	r0, #0
   23904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23908:	2600      	movs	r6, #0
   2390a:	f04f 0c01 	mov.w	ip, #1
   2390e:	e7f3      	b.n	238f8 <LLF_RND_AdaptiveProportionTest+0x68>
   23910:	2600      	movs	r6, #0
   23912:	46b4      	mov	ip, r6
   23914:	4637      	mov	r7, r6
   23916:	4634      	mov	r4, r6
   23918:	0961      	lsrs	r1, r4, #5
   2391a:	f004 031f 	and.w	r3, r4, #31
   2391e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   23922:	2b1f      	cmp	r3, #31
   23924:	fa21 f103 	lsr.w	r1, r1, r3
   23928:	bf18      	it	ne
   2392a:	f001 0101 	andne.w	r1, r1, #1
   2392e:	b13c      	cbz	r4, 23940 <LLF_RND_AdaptiveProportionTest+0xb0>
   23930:	b95f      	cbnz	r7, 2394a <LLF_RND_AdaptiveProportionTest+0xba>
   23932:	458c      	cmp	ip, r1
   23934:	d001      	beq.n	2393a <LLF_RND_AdaptiveProportionTest+0xaa>
   23936:	4661      	mov	r1, ip
   23938:	e008      	b.n	2394c <LLF_RND_AdaptiveProportionTest+0xbc>
   2393a:	3601      	adds	r6, #1
   2393c:	4661      	mov	r1, ip
   2393e:	e005      	b.n	2394c <LLF_RND_AdaptiveProportionTest+0xbc>
   23940:	2601      	movs	r6, #1
   23942:	4634      	mov	r4, r6
   23944:	468c      	mov	ip, r1
   23946:	2701      	movs	r7, #1
   23948:	e7e6      	b.n	23918 <LLF_RND_AdaptiveProportionTest+0x88>
   2394a:	463e      	mov	r6, r7
   2394c:	42b2      	cmp	r2, r6
   2394e:	d3cf      	bcc.n	238f0 <LLF_RND_AdaptiveProportionTest+0x60>
   23950:	3401      	adds	r4, #1
   23952:	42ac      	cmp	r4, r5
   23954:	d1f6      	bne.n	23944 <LLF_RND_AdaptiveProportionTest+0xb4>
   23956:	e7d4      	b.n	23902 <LLF_RND_AdaptiveProportionTest+0x72>
   23958:	4800      	ldr	r0, [pc, #0]	; (2395c <LLF_RND_AdaptiveProportionTest+0xcc>)
   2395a:	4770      	bx	lr
   2395c:	00f10c37 	.word	0x00f10c37

00023960 <getTrngSource>:
   23960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23964:	b08d      	sub	sp, #52	; 0x34
   23966:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   2396a:	4607      	mov	r7, r0
   2396c:	460c      	mov	r4, r1
   2396e:	2d00      	cmp	r5, #0
   23970:	d14c      	bne.n	23a0c <getTrngSource+0xac>
   23972:	f8d1 a010 	ldr.w	sl, [r1, #16]
   23976:	601e      	str	r6, [r3, #0]
   23978:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2397a:	2100      	movs	r1, #0
   2397c:	6019      	str	r1, [r3, #0]
   2397e:	2a00      	cmp	r2, #0
   23980:	f000 811b 	beq.w	23bba <getTrngSource+0x25a>
   23984:	4a99      	ldr	r2, [pc, #612]	; (23bec <getTrngSource+0x28c>)
   23986:	4b9a      	ldr	r3, [pc, #616]	; (23bf0 <getTrngSource+0x290>)
   23988:	6811      	ldr	r1, [r2, #0]
   2398a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2398c:	681b      	ldr	r3, [r3, #0]
   2398e:	429a      	cmp	r2, r3
   23990:	d147      	bne.n	23a22 <getTrngSource+0xc2>
   23992:	290a      	cmp	r1, #10
   23994:	d145      	bne.n	23a22 <getTrngSource+0xc2>
   23996:	78fb      	ldrb	r3, [r7, #3]
   23998:	9304      	str	r3, [sp, #16]
   2399a:	4b96      	ldr	r3, [pc, #600]	; (23bf4 <getTrngSource+0x294>)
   2399c:	fba3 230a 	umull	r2, r3, r3, sl
   239a0:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   239a4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   239a8:	f106 0208 	add.w	r2, r6, #8
   239ac:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   239b0:	2304      	movs	r3, #4
   239b2:	9203      	str	r2, [sp, #12]
   239b4:	9302      	str	r3, [sp, #8]
   239b6:	46b8      	mov	r8, r7
   239b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   239ba:	f8c3 a000 	str.w	sl, [r3]
   239be:	f1ba 0f00 	cmp.w	sl, #0
   239c2:	f000 80c0 	beq.w	23b46 <getTrngSource+0x1e6>
   239c6:	9e03      	ldr	r6, [sp, #12]
   239c8:	4655      	mov	r5, sl
   239ca:	f04f 0900 	mov.w	r9, #0
   239ce:	f000 fab3 	bl	23f38 <LLF_RND_TurnOffTrng>
   239d2:	2300      	movs	r3, #0
   239d4:	9305      	str	r3, [sp, #20]
   239d6:	f1b8 0f00 	cmp.w	r8, #0
   239da:	f000 80e2 	beq.w	23ba2 <getTrngSource+0x242>
   239de:	2c00      	cmp	r4, #0
   239e0:	f000 80df 	beq.w	23ba2 <getTrngSource+0x242>
   239e4:	9b04      	ldr	r3, [sp, #16]
   239e6:	2b00      	cmp	r3, #0
   239e8:	f000 80d9 	beq.w	23b9e <getTrngSource+0x23e>
   239ec:	a904      	add	r1, sp, #16
   239ee:	4620      	mov	r0, r4
   239f0:	f000 fa92 	bl	23f18 <LLF_RND_GetFastestRosc>
   239f4:	b1b8      	cbz	r0, 23a26 <getTrngSource+0xc6>
   239f6:	4b80      	ldr	r3, [pc, #512]	; (23bf8 <getTrngSource+0x298>)
   239f8:	4298      	cmp	r0, r3
   239fa:	f040 80a4 	bne.w	23b46 <getTrngSource+0x1e6>
   239fe:	9002      	str	r0, [sp, #8]
   23a00:	f000 fa9a 	bl	23f38 <LLF_RND_TurnOffTrng>
   23a04:	9802      	ldr	r0, [sp, #8]
   23a06:	b00d      	add	sp, #52	; 0x34
   23a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a0c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   23a10:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   23a14:	3001      	adds	r0, #1
   23a16:	bf14      	ite	ne
   23a18:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   23a1c:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   23a20:	e7a9      	b.n	23976 <getTrngSource+0x16>
   23a22:	4876      	ldr	r0, [pc, #472]	; (23bfc <getTrngSource+0x29c>)
   23a24:	e7eb      	b.n	239fe <getTrngSource+0x9e>
   23a26:	9804      	ldr	r0, [sp, #16]
   23a28:	4621      	mov	r1, r4
   23a2a:	f000 fa57 	bl	23edc <LLF_RND_GetRoscSampleCnt>
   23a2e:	2800      	cmp	r0, #0
   23a30:	d1e1      	bne.n	239f6 <getTrngSource+0x96>
   23a32:	9f04      	ldr	r7, [sp, #16]
   23a34:	2f08      	cmp	r7, #8
   23a36:	f000 80b6 	beq.w	23ba6 <getTrngSource+0x246>
   23a3a:	2f04      	cmp	r7, #4
   23a3c:	f000 80b5 	beq.w	23baa <getTrngSource+0x24a>
   23a40:	f1a7 0702 	sub.w	r7, r7, #2
   23a44:	fab7 f787 	clz	r7, r7
   23a48:	097f      	lsrs	r7, r7, #5
   23a4a:	496d      	ldr	r1, [pc, #436]	; (23c00 <getTrngSource+0x2a0>)
   23a4c:	2301      	movs	r3, #1
   23a4e:	600b      	str	r3, [r1, #0]
   23a50:	f841 3c84 	str.w	r3, [r1, #-132]
   23a54:	4619      	mov	r1, r3
   23a56:	4b6a      	ldr	r3, [pc, #424]	; (23c00 <getTrngSource+0x2a0>)
   23a58:	4865      	ldr	r0, [pc, #404]	; (23bf0 <getTrngSource+0x290>)
   23a5a:	6019      	str	r1, [r3, #0]
   23a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23a5e:	6003      	str	r3, [r0, #0]
   23a60:	6800      	ldr	r0, [r0, #0]
   23a62:	4283      	cmp	r3, r0
   23a64:	d1f7      	bne.n	23a56 <getTrngSource+0xf6>
   23a66:	4a67      	ldr	r2, [pc, #412]	; (23c04 <getTrngSource+0x2a4>)
   23a68:	2300      	movs	r3, #0
   23a6a:	6013      	str	r3, [r2, #0]
   23a6c:	f04f 30ff 	mov.w	r0, #4294967295
   23a70:	f7ff fd30 	bl	234d4 <CC_HalClearInterruptBit>
   23a74:	4864      	ldr	r0, [pc, #400]	; (23c08 <getTrngSource+0x2a8>)
   23a76:	4965      	ldr	r1, [pc, #404]	; (23c0c <getTrngSource+0x2ac>)
   23a78:	6001      	str	r1, [r0, #0]
   23a7a:	2300      	movs	r3, #0
   23a7c:	4618      	mov	r0, r3
   23a7e:	f7ff fd37 	bl	234f0 <CC_HalMaskInterrupt>
   23a82:	4963      	ldr	r1, [pc, #396]	; (23c10 <getTrngSource+0x2b0>)
   23a84:	4b63      	ldr	r3, [pc, #396]	; (23c14 <getTrngSource+0x2b4>)
   23a86:	600f      	str	r7, [r1, #0]
   23a88:	6818      	ldr	r0, [r3, #0]
   23a8a:	4f5a      	ldr	r7, [pc, #360]	; (23bf4 <getTrngSource+0x294>)
   23a8c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23a90:	f7ff fd2e 	bl	234f0 <CC_HalMaskInterrupt>
   23a94:	4b55      	ldr	r3, [pc, #340]	; (23bec <getTrngSource+0x28c>)
   23a96:	4860      	ldr	r0, [pc, #384]	; (23c18 <getTrngSource+0x2b8>)
   23a98:	210a      	movs	r1, #10
   23a9a:	6019      	str	r1, [r3, #0]
   23a9c:	6921      	ldr	r1, [r4, #16]
   23a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23aa0:	fba7 c101 	umull	ip, r1, r7, r1
   23aa4:	0909      	lsrs	r1, r1, #4
   23aa6:	fb03 f301 	mul.w	r3, r3, r1
   23aaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23aae:	03db      	lsls	r3, r3, #15
   23ab0:	099b      	lsrs	r3, r3, #6
   23ab2:	6003      	str	r3, [r0, #0]
   23ab4:	4b53      	ldr	r3, [pc, #332]	; (23c04 <getTrngSource+0x2a4>)
   23ab6:	2201      	movs	r2, #1
   23ab8:	601a      	str	r2, [r3, #0]
   23aba:	9904      	ldr	r1, [sp, #16]
   23abc:	f8d8 2000 	ldr.w	r2, [r8]
   23ac0:	020b      	lsls	r3, r1, #8
   23ac2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   23ac6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   23aca:	4313      	orrs	r3, r2
   23acc:	f8c8 3000 	str.w	r3, [r8]
   23ad0:	a805      	add	r0, sp, #20
   23ad2:	f000 f9f3 	bl	23ebc <LLF_RND_WaitRngInterrupt>
   23ad6:	2800      	cmp	r0, #0
   23ad8:	d18d      	bne.n	239f6 <getTrngSource+0x96>
   23ada:	4a50      	ldr	r2, [pc, #320]	; (23c1c <getTrngSource+0x2bc>)
   23adc:	4b50      	ldr	r3, [pc, #320]	; (23c20 <getTrngSource+0x2c0>)
   23ade:	6812      	ldr	r2, [r2, #0]
   23ae0:	9206      	str	r2, [sp, #24]
   23ae2:	681a      	ldr	r2, [r3, #0]
   23ae4:	9207      	str	r2, [sp, #28]
   23ae6:	685a      	ldr	r2, [r3, #4]
   23ae8:	9208      	str	r2, [sp, #32]
   23aea:	689a      	ldr	r2, [r3, #8]
   23aec:	9209      	str	r2, [sp, #36]	; 0x24
   23aee:	68da      	ldr	r2, [r3, #12]
   23af0:	920a      	str	r2, [sp, #40]	; 0x28
   23af2:	3310      	adds	r3, #16
   23af4:	fba7 2705 	umull	r2, r7, r7, r5
   23af8:	681b      	ldr	r3, [r3, #0]
   23afa:	930b      	str	r3, [sp, #44]	; 0x2c
   23afc:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   23b00:	d102      	bne.n	23b08 <getTrngSource+0x1a8>
   23b02:	f1bb 0f00 	cmp.w	fp, #0
   23b06:	d141      	bne.n	23b8c <getTrngSource+0x22c>
   23b08:	2218      	movs	r2, #24
   23b0a:	4630      	mov	r0, r6
   23b0c:	eb0d 0102 	add.w	r1, sp, r2
   23b10:	f000 f97a 	bl	23e08 <CC_PalMemCopyPlat>
   23b14:	3d18      	subs	r5, #24
   23b16:	3618      	adds	r6, #24
   23b18:	f109 0901 	add.w	r9, r9, #1
   23b1c:	2d00      	cmp	r5, #0
   23b1e:	f47f af56 	bne.w	239ce <getTrngSource+0x6e>
   23b22:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   23b26:	d85d      	bhi.n	23be4 <getTrngSource+0x284>
   23b28:	9d03      	ldr	r5, [sp, #12]
   23b2a:	6962      	ldr	r2, [r4, #20]
   23b2c:	4651      	mov	r1, sl
   23b2e:	4628      	mov	r0, r5
   23b30:	f7ff fe80 	bl	23834 <LLF_RND_RepetitionCounterTest.part.0>
   23b34:	2800      	cmp	r0, #0
   23b36:	d04b      	beq.n	23bd0 <getTrngSource+0x270>
   23b38:	9a16      	ldr	r2, [sp, #88]	; 0x58
   23b3a:	2300      	movs	r3, #0
   23b3c:	6013      	str	r3, [r2, #0]
   23b3e:	4b2e      	ldr	r3, [pc, #184]	; (23bf8 <getTrngSource+0x298>)
   23b40:	4298      	cmp	r0, r3
   23b42:	f43f af5c 	beq.w	239fe <getTrngSource+0x9e>
   23b46:	9d04      	ldr	r5, [sp, #16]
   23b48:	2d08      	cmp	r5, #8
   23b4a:	d034      	beq.n	23bb6 <getTrngSource+0x256>
   23b4c:	2200      	movs	r2, #0
   23b4e:	ab04      	add	r3, sp, #16
   23b50:	006d      	lsls	r5, r5, #1
   23b52:	9200      	str	r2, [sp, #0]
   23b54:	4621      	mov	r1, r4
   23b56:	4640      	mov	r0, r8
   23b58:	9504      	str	r5, [sp, #16]
   23b5a:	f7ff fdc1 	bl	236e0 <startTrngHW>
   23b5e:	4b31      	ldr	r3, [pc, #196]	; (23c24 <getTrngSource+0x2c4>)
   23b60:	4298      	cmp	r0, r3
   23b62:	d024      	beq.n	23bae <getTrngSource+0x24e>
   23b64:	2800      	cmp	r0, #0
   23b66:	f47f af4a 	bne.w	239fe <getTrngSource+0x9e>
   23b6a:	f8d8 2000 	ldr.w	r2, [r8]
   23b6e:	0a13      	lsrs	r3, r2, #8
   23b70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   23b74:	4313      	orrs	r3, r2
   23b76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   23b7a:	f8c8 3000 	str.w	r3, [r8]
   23b7e:	9b02      	ldr	r3, [sp, #8]
   23b80:	3b01      	subs	r3, #1
   23b82:	9302      	str	r3, [sp, #8]
   23b84:	f47f af18 	bne.w	239b8 <getTrngSource+0x58>
   23b88:	2000      	movs	r0, #0
   23b8a:	e738      	b.n	239fe <getTrngSource+0x9e>
   23b8c:	4630      	mov	r0, r6
   23b8e:	465a      	mov	r2, fp
   23b90:	a906      	add	r1, sp, #24
   23b92:	f000 f939 	bl	23e08 <CC_PalMemCopyPlat>
   23b96:	eba5 050b 	sub.w	r5, r5, fp
   23b9a:	445e      	add	r6, fp
   23b9c:	e7bc      	b.n	23b18 <getTrngSource+0x1b8>
   23b9e:	4821      	ldr	r0, [pc, #132]	; (23c24 <getTrngSource+0x2c4>)
   23ba0:	e729      	b.n	239f6 <getTrngSource+0x96>
   23ba2:	4821      	ldr	r0, [pc, #132]	; (23c28 <getTrngSource+0x2c8>)
   23ba4:	e727      	b.n	239f6 <getTrngSource+0x96>
   23ba6:	2703      	movs	r7, #3
   23ba8:	e74f      	b.n	23a4a <getTrngSource+0xea>
   23baa:	2702      	movs	r7, #2
   23bac:	e74d      	b.n	23a4a <getTrngSource+0xea>
   23bae:	6a23      	ldr	r3, [r4, #32]
   23bb0:	2b00      	cmp	r3, #0
   23bb2:	f43f af24 	beq.w	239fe <getTrngSource+0x9e>
   23bb6:	481d      	ldr	r0, [pc, #116]	; (23c2c <getTrngSource+0x2cc>)
   23bb8:	e721      	b.n	239fe <getTrngSource+0x9e>
   23bba:	9500      	str	r5, [sp, #0]
   23bbc:	ab04      	add	r3, sp, #16
   23bbe:	2201      	movs	r2, #1
   23bc0:	4621      	mov	r1, r4
   23bc2:	4638      	mov	r0, r7
   23bc4:	f7ff fd8c 	bl	236e0 <startTrngHW>
   23bc8:	2800      	cmp	r0, #0
   23bca:	f43f aee6 	beq.w	2399a <getTrngSource+0x3a>
   23bce:	e716      	b.n	239fe <getTrngSource+0x9e>
   23bd0:	69a2      	ldr	r2, [r4, #24]
   23bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23bd6:	4651      	mov	r1, sl
   23bd8:	4628      	mov	r0, r5
   23bda:	f7ff fe59 	bl	23890 <LLF_RND_AdaptiveProportionTest>
   23bde:	2800      	cmp	r0, #0
   23be0:	d1aa      	bne.n	23b38 <getTrngSource+0x1d8>
   23be2:	e7d1      	b.n	23b88 <getTrngSource+0x228>
   23be4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   23be6:	601d      	str	r5, [r3, #0]
   23be8:	e7ad      	b.n	23b46 <getTrngSource+0x1e6>
   23bea:	bf00      	nop
   23bec:	5002b138 	.word	0x5002b138
   23bf0:	5002b130 	.word	0x5002b130
   23bf4:	aaaaaaab 	.word	0xaaaaaaab
   23bf8:	00f10c02 	.word	0x00f10c02
   23bfc:	00f10c30 	.word	0x00f10c30
   23c00:	5002b1c4 	.word	0x5002b1c4
   23c04:	5002b12c 	.word	0x5002b12c
   23c08:	5002b100 	.word	0x5002b100
   23c0c:	0ffffffe 	.word	0x0ffffffe
   23c10:	5002b10c 	.word	0x5002b10c
   23c14:	5002ba04 	.word	0x5002ba04
   23c18:	5002b1d8 	.word	0x5002b1d8
   23c1c:	5002b114 	.word	0x5002b114
   23c20:	5002b118 	.word	0x5002b118
   23c24:	00f10c31 	.word	0x00f10c31
   23c28:	00f10c35 	.word	0x00f10c35
   23c2c:	00f10c32 	.word	0x00f10c32

00023c30 <LLF_RND_GetTrngSource>:
   23c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c34:	4e1f      	ldr	r6, [pc, #124]	; (23cb4 <LLF_RND_GetTrngSource+0x84>)
   23c36:	b084      	sub	sp, #16
   23c38:	4604      	mov	r4, r0
   23c3a:	460d      	mov	r5, r1
   23c3c:	6830      	ldr	r0, [r6, #0]
   23c3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   23c40:	f04f 31ff 	mov.w	r1, #4294967295
   23c44:	4690      	mov	r8, r2
   23c46:	f7ff fcd9 	bl	235fc <CC_PalMutexLock>
   23c4a:	b9d8      	cbnz	r0, 23c84 <LLF_RND_GetTrngSource+0x54>
   23c4c:	2000      	movs	r0, #0
   23c4e:	f7ff fd05 	bl	2365c <CC_PalPowerSaveModeSelect>
   23c52:	b9f8      	cbnz	r0, 23c94 <LLF_RND_GetTrngSource+0x64>
   23c54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23c56:	9200      	str	r2, [sp, #0]
   23c58:	2300      	movs	r3, #0
   23c5a:	4620      	mov	r0, r4
   23c5c:	9302      	str	r3, [sp, #8]
   23c5e:	9701      	str	r7, [sp, #4]
   23c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23c62:	4642      	mov	r2, r8
   23c64:	4629      	mov	r1, r5
   23c66:	f7ff fe7b 	bl	23960 <getTrngSource>
   23c6a:	4604      	mov	r4, r0
   23c6c:	2001      	movs	r0, #1
   23c6e:	f7ff fcf5 	bl	2365c <CC_PalPowerSaveModeSelect>
   23c72:	b9d0      	cbnz	r0, 23caa <LLF_RND_GetTrngSource+0x7a>
   23c74:	6830      	ldr	r0, [r6, #0]
   23c76:	f7ff fcc9 	bl	2360c <CC_PalMutexUnlock>
   23c7a:	b978      	cbnz	r0, 23c9c <LLF_RND_GetTrngSource+0x6c>
   23c7c:	4620      	mov	r0, r4
   23c7e:	b004      	add	sp, #16
   23c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23c84:	480c      	ldr	r0, [pc, #48]	; (23cb8 <LLF_RND_GetTrngSource+0x88>)
   23c86:	f7ff fac9 	bl	2321c <CC_PalAbort>
   23c8a:	2000      	movs	r0, #0
   23c8c:	f7ff fce6 	bl	2365c <CC_PalPowerSaveModeSelect>
   23c90:	2800      	cmp	r0, #0
   23c92:	d0df      	beq.n	23c54 <LLF_RND_GetTrngSource+0x24>
   23c94:	4809      	ldr	r0, [pc, #36]	; (23cbc <LLF_RND_GetTrngSource+0x8c>)
   23c96:	f7ff fac1 	bl	2321c <CC_PalAbort>
   23c9a:	e7db      	b.n	23c54 <LLF_RND_GetTrngSource+0x24>
   23c9c:	4808      	ldr	r0, [pc, #32]	; (23cc0 <LLF_RND_GetTrngSource+0x90>)
   23c9e:	f7ff fabd 	bl	2321c <CC_PalAbort>
   23ca2:	4620      	mov	r0, r4
   23ca4:	b004      	add	sp, #16
   23ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23caa:	4806      	ldr	r0, [pc, #24]	; (23cc4 <LLF_RND_GetTrngSource+0x94>)
   23cac:	f7ff fab6 	bl	2321c <CC_PalAbort>
   23cb0:	e7e0      	b.n	23c74 <LLF_RND_GetTrngSource+0x44>
   23cb2:	bf00      	nop
   23cb4:	20000b78 	.word	0x20000b78
   23cb8:	0002b858 	.word	0x0002b858
   23cbc:	0002b888 	.word	0x0002b888
   23cc0:	0002b870 	.word	0x0002b870
   23cc4:	0002b8a8 	.word	0x0002b8a8

00023cc8 <LLF_RND_RunTrngStartupTest>:
   23cc8:	b510      	push	{r4, lr}
   23cca:	b086      	sub	sp, #24
   23ccc:	ab05      	add	r3, sp, #20
   23cce:	2401      	movs	r4, #1
   23cd0:	e9cd 2401 	strd	r2, r4, [sp, #4]
   23cd4:	9300      	str	r3, [sp, #0]
   23cd6:	2200      	movs	r2, #0
   23cd8:	ab04      	add	r3, sp, #16
   23cda:	f7ff fe41 	bl	23960 <getTrngSource>
   23cde:	b006      	add	sp, #24
   23ce0:	bd10      	pop	{r4, pc}
   23ce2:	bf00      	nop

00023ce4 <mbedtls_hardware_poll>:
   23ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ce8:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   23cec:	460f      	mov	r7, r1
   23cee:	9205      	str	r2, [sp, #20]
   23cf0:	2100      	movs	r1, #0
   23cf2:	4614      	mov	r4, r2
   23cf4:	a812      	add	r0, sp, #72	; 0x48
   23cf6:	f44f 7208 	mov.w	r2, #544	; 0x220
   23cfa:	461e      	mov	r6, r3
   23cfc:	f002 fa5a 	bl	261b4 <memset>
   23d00:	2100      	movs	r1, #0
   23d02:	a808      	add	r0, sp, #32
   23d04:	2228      	movs	r2, #40	; 0x28
   23d06:	9106      	str	r1, [sp, #24]
   23d08:	f002 fa54 	bl	261b4 <memset>
   23d0c:	2f00      	cmp	r7, #0
   23d0e:	d03c      	beq.n	23d8a <mbedtls_hardware_poll+0xa6>
   23d10:	2e00      	cmp	r6, #0
   23d12:	d03a      	beq.n	23d8a <mbedtls_hardware_poll+0xa6>
   23d14:	2c00      	cmp	r4, #0
   23d16:	d038      	beq.n	23d8a <mbedtls_hardware_poll+0xa6>
   23d18:	2104      	movs	r1, #4
   23d1a:	a806      	add	r0, sp, #24
   23d1c:	f000 f876 	bl	23e0c <CC_PalMemSetZeroPlat>
   23d20:	a808      	add	r0, sp, #32
   23d22:	2128      	movs	r1, #40	; 0x28
   23d24:	f000 f872 	bl	23e0c <CC_PalMemSetZeroPlat>
   23d28:	a808      	add	r0, sp, #32
   23d2a:	f000 f831 	bl	23d90 <RNG_PLAT_SetUserRngParameters>
   23d2e:	b178      	cbz	r0, 23d50 <mbedtls_hardware_poll+0x6c>
   23d30:	f04f 35ff 	mov.w	r5, #4294967295
   23d34:	a812      	add	r0, sp, #72	; 0x48
   23d36:	f44f 7108 	mov.w	r1, #544	; 0x220
   23d3a:	f000 f90b 	bl	23f54 <mbedtls_platform_zeroize>
   23d3e:	a806      	add	r0, sp, #24
   23d40:	2104      	movs	r1, #4
   23d42:	f000 f907 	bl	23f54 <mbedtls_platform_zeroize>
   23d46:	4628      	mov	r0, r5
   23d48:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   23d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23d50:	ab12      	add	r3, sp, #72	; 0x48
   23d52:	f10d 081c 	add.w	r8, sp, #28
   23d56:	e9cd 6301 	strd	r6, r3, [sp, #4]
   23d5a:	9003      	str	r0, [sp, #12]
   23d5c:	4602      	mov	r2, r0
   23d5e:	ab05      	add	r3, sp, #20
   23d60:	a908      	add	r1, sp, #32
   23d62:	f8cd 8000 	str.w	r8, [sp]
   23d66:	a806      	add	r0, sp, #24
   23d68:	f7ff ff62 	bl	23c30 <LLF_RND_GetTrngSource>
   23d6c:	4605      	mov	r5, r0
   23d6e:	2800      	cmp	r0, #0
   23d70:	d1de      	bne.n	23d30 <mbedtls_hardware_poll+0x4c>
   23d72:	6833      	ldr	r3, [r6, #0]
   23d74:	42a3      	cmp	r3, r4
   23d76:	d3db      	bcc.n	23d30 <mbedtls_hardware_poll+0x4c>
   23d78:	f8d8 1000 	ldr.w	r1, [r8]
   23d7c:	4638      	mov	r0, r7
   23d7e:	3108      	adds	r1, #8
   23d80:	4622      	mov	r2, r4
   23d82:	f000 f841 	bl	23e08 <CC_PalMemCopyPlat>
   23d86:	6034      	str	r4, [r6, #0]
   23d88:	e7d4      	b.n	23d34 <mbedtls_hardware_poll+0x50>
   23d8a:	f04f 35ff 	mov.w	r5, #4294967295
   23d8e:	e7da      	b.n	23d46 <mbedtls_hardware_poll+0x62>

00023d90 <RNG_PLAT_SetUserRngParameters>:
   23d90:	b530      	push	{r4, r5, lr}
   23d92:	b083      	sub	sp, #12
   23d94:	231c      	movs	r3, #28
   23d96:	a901      	add	r1, sp, #4
   23d98:	4604      	mov	r4, r0
   23d9a:	9301      	str	r3, [sp, #4]
   23d9c:	f000 f83a 	bl	23e14 <CC_PalTrngParamGet>
   23da0:	4605      	mov	r5, r0
   23da2:	b938      	cbnz	r0, 23db4 <RNG_PLAT_SetUserRngParameters+0x24>
   23da4:	9b01      	ldr	r3, [sp, #4]
   23da6:	2b1c      	cmp	r3, #28
   23da8:	d007      	beq.n	23dba <RNG_PLAT_SetUserRngParameters+0x2a>
   23daa:	4d15      	ldr	r5, [pc, #84]	; (23e00 <RNG_PLAT_SetUserRngParameters+0x70>)
   23dac:	4620      	mov	r0, r4
   23dae:	211c      	movs	r1, #28
   23db0:	f000 f82c 	bl	23e0c <CC_PalMemSetZeroPlat>
   23db4:	4628      	mov	r0, r5
   23db6:	b003      	add	sp, #12
   23db8:	bd30      	pop	{r4, r5, pc}
   23dba:	e9d4 3200 	ldrd	r3, r2, [r4]
   23dbe:	2101      	movs	r1, #1
   23dc0:	3b00      	subs	r3, #0
   23dc2:	bf18      	it	ne
   23dc4:	2301      	movne	r3, #1
   23dc6:	61e1      	str	r1, [r4, #28]
   23dc8:	b10a      	cbz	r2, 23dce <RNG_PLAT_SetUserRngParameters+0x3e>
   23dca:	f043 0302 	orr.w	r3, r3, #2
   23dce:	68a2      	ldr	r2, [r4, #8]
   23dd0:	b932      	cbnz	r2, 23de0 <RNG_PLAT_SetUserRngParameters+0x50>
   23dd2:	68e2      	ldr	r2, [r4, #12]
   23dd4:	b942      	cbnz	r2, 23de8 <RNG_PLAT_SetUserRngParameters+0x58>
   23dd6:	e9c4 3208 	strd	r3, r2, [r4, #32]
   23dda:	b97b      	cbnz	r3, 23dfc <RNG_PLAT_SetUserRngParameters+0x6c>
   23ddc:	4d09      	ldr	r5, [pc, #36]	; (23e04 <RNG_PLAT_SetUserRngParameters+0x74>)
   23dde:	e7e5      	b.n	23dac <RNG_PLAT_SetUserRngParameters+0x1c>
   23de0:	68e2      	ldr	r2, [r4, #12]
   23de2:	f043 0304 	orr.w	r3, r3, #4
   23de6:	b13a      	cbz	r2, 23df8 <RNG_PLAT_SetUserRngParameters+0x68>
   23de8:	f043 0308 	orr.w	r3, r3, #8
   23dec:	2200      	movs	r2, #0
   23dee:	4628      	mov	r0, r5
   23df0:	e9c4 3208 	strd	r3, r2, [r4, #32]
   23df4:	b003      	add	sp, #12
   23df6:	bd30      	pop	{r4, r5, pc}
   23df8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   23dfc:	4615      	mov	r5, r2
   23dfe:	e7d9      	b.n	23db4 <RNG_PLAT_SetUserRngParameters+0x24>
   23e00:	00f00c37 	.word	0x00f00c37
   23e04:	00f00c0e 	.word	0x00f00c0e

00023e08 <CC_PalMemCopyPlat>:
   23e08:	f002 b993 	b.w	26132 <memmove>

00023e0c <CC_PalMemSetZeroPlat>:
   23e0c:	460a      	mov	r2, r1
   23e0e:	2100      	movs	r1, #0
   23e10:	f002 b9d0 	b.w	261b4 <memset>

00023e14 <CC_PalTrngParamGet>:
   23e14:	b118      	cbz	r0, 23e1e <CC_PalTrngParamGet+0xa>
   23e16:	b111      	cbz	r1, 23e1e <CC_PalTrngParamGet+0xa>
   23e18:	680b      	ldr	r3, [r1, #0]
   23e1a:	2b1c      	cmp	r3, #28
   23e1c:	d001      	beq.n	23e22 <CC_PalTrngParamGet+0xe>
   23e1e:	2001      	movs	r0, #1
   23e20:	4770      	bx	lr
   23e22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23e26:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   23e2a:	3201      	adds	r2, #1
   23e2c:	bf14      	ite	ne
   23e2e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   23e32:	f241 225c 	movweq	r2, #4700	; 0x125c
   23e36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23e3a:	6002      	str	r2, [r0, #0]
   23e3c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   23e40:	3201      	adds	r2, #1
   23e42:	bf14      	ite	ne
   23e44:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   23e48:	f641 1264 	movweq	r2, #6500	; 0x1964
   23e4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23e50:	6042      	str	r2, [r0, #4]
   23e52:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   23e56:	3201      	adds	r2, #1
   23e58:	bf14      	ite	ne
   23e5a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   23e5e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   23e62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23e66:	6082      	str	r2, [r0, #8]
   23e68:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   23e6c:	3201      	adds	r2, #1
   23e6e:	bf14      	ite	ne
   23e70:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   23e74:	f241 3288 	movweq	r2, #5000	; 0x1388
   23e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23e7c:	60c2      	str	r2, [r0, #12]
   23e7e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   23e82:	3201      	adds	r2, #1
   23e84:	bf14      	ite	ne
   23e86:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   23e8a:	2290      	moveq	r2, #144	; 0x90
   23e8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23e90:	6102      	str	r2, [r0, #16]
   23e92:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   23e96:	3201      	adds	r2, #1
   23e98:	bf14      	ite	ne
   23e9a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   23e9e:	2251      	moveq	r2, #81	; 0x51
   23ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23ea4:	6142      	str	r2, [r0, #20]
   23ea6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   23eaa:	3201      	adds	r2, #1
   23eac:	bf14      	ite	ne
   23eae:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   23eb2:	f240 3337 	movweq	r3, #823	; 0x337
   23eb6:	6183      	str	r3, [r0, #24]
   23eb8:	2000      	movs	r0, #0
   23eba:	4770      	bx	lr

00023ebc <LLF_RND_WaitRngInterrupt>:
   23ebc:	b508      	push	{r3, lr}
   23ebe:	4601      	mov	r1, r0
   23ec0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   23ec4:	f7ff fb1a 	bl	234fc <CC_HalWaitInterruptRND>
   23ec8:	4902      	ldr	r1, [pc, #8]	; (23ed4 <LLF_RND_WaitRngInterrupt+0x18>)
   23eca:	4a03      	ldr	r2, [pc, #12]	; (23ed8 <LLF_RND_WaitRngInterrupt+0x1c>)
   23ecc:	2300      	movs	r3, #0
   23ece:	600b      	str	r3, [r1, #0]
   23ed0:	6013      	str	r3, [r2, #0]
   23ed2:	bd08      	pop	{r3, pc}
   23ed4:	5002b1c8 	.word	0x5002b1c8
   23ed8:	5002b12c 	.word	0x5002b12c

00023edc <LLF_RND_GetRoscSampleCnt>:
   23edc:	3801      	subs	r0, #1
   23ede:	2807      	cmp	r0, #7
   23ee0:	d805      	bhi.n	23eee <LLF_RND_GetRoscSampleCnt+0x12>
   23ee2:	e8df f000 	tbb	[pc, r0]
   23ee6:	0e0a      	.short	0x0e0a
   23ee8:	04041204 	.word	0x04041204
   23eec:	0604      	.short	0x0604
   23eee:	4809      	ldr	r0, [pc, #36]	; (23f14 <LLF_RND_GetRoscSampleCnt+0x38>)
   23ef0:	4770      	bx	lr
   23ef2:	68cb      	ldr	r3, [r1, #12]
   23ef4:	624b      	str	r3, [r1, #36]	; 0x24
   23ef6:	2000      	movs	r0, #0
   23ef8:	4770      	bx	lr
   23efa:	680b      	ldr	r3, [r1, #0]
   23efc:	624b      	str	r3, [r1, #36]	; 0x24
   23efe:	2000      	movs	r0, #0
   23f00:	4770      	bx	lr
   23f02:	684b      	ldr	r3, [r1, #4]
   23f04:	624b      	str	r3, [r1, #36]	; 0x24
   23f06:	2000      	movs	r0, #0
   23f08:	4770      	bx	lr
   23f0a:	688b      	ldr	r3, [r1, #8]
   23f0c:	624b      	str	r3, [r1, #36]	; 0x24
   23f0e:	2000      	movs	r0, #0
   23f10:	4770      	bx	lr
   23f12:	bf00      	nop
   23f14:	00f10c31 	.word	0x00f10c31

00023f18 <LLF_RND_GetFastestRosc>:
   23f18:	680b      	ldr	r3, [r1, #0]
   23f1a:	e002      	b.n	23f22 <LLF_RND_GetFastestRosc+0xa>
   23f1c:	2b08      	cmp	r3, #8
   23f1e:	600b      	str	r3, [r1, #0]
   23f20:	d806      	bhi.n	23f30 <LLF_RND_GetFastestRosc+0x18>
   23f22:	6a02      	ldr	r2, [r0, #32]
   23f24:	4213      	tst	r3, r2
   23f26:	ea4f 0343 	mov.w	r3, r3, lsl #1
   23f2a:	d0f7      	beq.n	23f1c <LLF_RND_GetFastestRosc+0x4>
   23f2c:	2000      	movs	r0, #0
   23f2e:	4770      	bx	lr
   23f30:	4800      	ldr	r0, [pc, #0]	; (23f34 <LLF_RND_GetFastestRosc+0x1c>)
   23f32:	4770      	bx	lr
   23f34:	00f10c31 	.word	0x00f10c31

00023f38 <LLF_RND_TurnOffTrng>:
   23f38:	4904      	ldr	r1, [pc, #16]	; (23f4c <LLF_RND_TurnOffTrng+0x14>)
   23f3a:	4a05      	ldr	r2, [pc, #20]	; (23f50 <LLF_RND_TurnOffTrng+0x18>)
   23f3c:	2300      	movs	r3, #0
   23f3e:	600b      	str	r3, [r1, #0]
   23f40:	f44f 6080 	mov.w	r0, #1024	; 0x400
   23f44:	6013      	str	r3, [r2, #0]
   23f46:	f7ff bac5 	b.w	234d4 <CC_HalClearInterruptBit>
   23f4a:	bf00      	nop
   23f4c:	5002b12c 	.word	0x5002b12c
   23f50:	5002b1c4 	.word	0x5002b1c4

00023f54 <mbedtls_platform_zeroize>:
   23f54:	b138      	cbz	r0, 23f66 <mbedtls_platform_zeroize+0x12>
   23f56:	b131      	cbz	r1, 23f66 <mbedtls_platform_zeroize+0x12>
   23f58:	4401      	add	r1, r0
   23f5a:	2200      	movs	r2, #0
   23f5c:	4603      	mov	r3, r0
   23f5e:	3001      	adds	r0, #1
   23f60:	4281      	cmp	r1, r0
   23f62:	701a      	strb	r2, [r3, #0]
   23f64:	d1fa      	bne.n	23f5c <mbedtls_platform_zeroize+0x8>
   23f66:	4770      	bx	lr

00023f68 <prov_reset>:
	bt_mesh_prov_enable(BT_MESH_PROV_ADV | BT_MESH_PROV_GATT);
   23f68:	2003      	movs	r0, #3
   23f6a:	f7f1 b9e7 	b.w	1533c <bt_mesh_prov_enable>

00023f6e <sensirion_i2c_init>:
}
   23f6e:	4770      	bx	lr

00023f70 <sensirion_sleep_usec>:
 *
 * Despite the unit, a <10 millisecond precision is sufficient.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
   23f70:	b508      	push	{r3, lr}
    int32_t remaining = useconds;
    while (remaining > 0) {
   23f72:	2800      	cmp	r0, #0
   23f74:	dc00      	bgt.n	23f78 <sensirion_sleep_usec+0x8>
        remaining = k_usleep(remaining);
    }
}
   23f76:	bd08      	pop	{r3, pc}
	return z_impl_k_usleep(us);
   23f78:	f7fd ff66 	bl	21e48 <z_impl_k_usleep>
   23f7c:	e7f9      	b.n	23f72 <sensirion_sleep_usec+0x2>

00023f7e <sensirion_common_generate_crc>:
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
   23f7e:	4401      	add	r1, r0
    uint8_t crc = CRC8_INIT;
   23f80:	23ff      	movs	r3, #255	; 0xff
    for (current_byte = 0; current_byte < count; ++current_byte) {
   23f82:	4281      	cmp	r1, r0
   23f84:	d101      	bne.n	23f8a <sensirion_common_generate_crc+0xc>
            else
                crc = (crc << 1);
        }
    }
    return crc;
}
   23f86:	4618      	mov	r0, r3
   23f88:	4770      	bx	lr
        crc ^= (data[current_byte]);
   23f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
   23f8e:	4053      	eors	r3, r2
   23f90:	2208      	movs	r2, #8
            if (crc & 0x80)
   23f92:	f013 0f80 	tst.w	r3, #128	; 0x80
   23f96:	f102 32ff 	add.w	r2, r2, #4294967295
   23f9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
   23f9e:	bf18      	it	ne
   23fa0:	f083 0331 	eorne.w	r3, r3, #49	; 0x31
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
   23fa4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
                crc = (crc << 1);
   23fa8:	b2db      	uxtb	r3, r3
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
   23faa:	d1f2      	bne.n	23f92 <sensirion_common_generate_crc+0x14>
   23fac:	e7e9      	b.n	23f82 <sensirion_common_generate_crc+0x4>

00023fae <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
   23fae:	b510      	push	{r4, lr}
   23fb0:	4614      	mov	r4, r2
    if (sensirion_common_generate_crc(data, count) != checksum)
   23fb2:	f7ff ffe4 	bl	23f7e <sensirion_common_generate_crc>
        return STATUS_FAIL;
    return NO_ERROR;
}
   23fb6:	1b00      	subs	r0, r0, r4
   23fb8:	bf18      	it	ne
   23fba:	f04f 30ff 	movne.w	r0, #4294967295
   23fbe:	bd10      	pop	{r4, pc}

00023fc0 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
   23fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23fc2:	461c      	mov	r4, r3
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
   23fc4:	0a0b      	lsrs	r3, r1, #8
   23fc6:	7003      	strb	r3, [r0, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
   23fc8:	7041      	strb	r1, [r0, #1]

    for (i = 0; i < num_args; ++i) {
   23fca:	4615      	mov	r5, r2
   23fcc:	3002      	adds	r0, #2
   23fce:	eb02 0744 	add.w	r7, r2, r4, lsl #1
   23fd2:	42bd      	cmp	r5, r7
   23fd4:	f100 0603 	add.w	r6, r0, #3
   23fd8:	d103      	bne.n	23fe2 <sensirion_fill_cmd_send_buf+0x22>

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
    }
    return idx;
   23fda:	eb04 0444 	add.w	r4, r4, r4, lsl #1
}
   23fde:	1ca0      	adds	r0, r4, #2
   23fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
   23fe2:	882b      	ldrh	r3, [r5, #0]
   23fe4:	0a1b      	lsrs	r3, r3, #8
   23fe6:	f806 3c03 	strb.w	r3, [r6, #-3]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
   23fea:	f835 3b02 	ldrh.w	r3, [r5], #2
   23fee:	f806 3c02 	strb.w	r3, [r6, #-2]
        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
   23ff2:	2102      	movs	r1, #2
   23ff4:	f7ff ffc3 	bl	23f7e <sensirion_common_generate_crc>
        buf[idx++] = crc;
   23ff8:	f806 0c01 	strb.w	r0, [r6, #-1]
   23ffc:	4630      	mov	r0, r6
   23ffe:	e7e8      	b.n	23fd2 <sensirion_fill_cmd_send_buf+0x12>

00024000 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
   24000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
   24004:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                                          uint16_t num_words) {
   24008:	b091      	sub	sp, #68	; 0x44
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
   2400a:	b297      	uxth	r7, r2
                                          uint16_t num_words) {
   2400c:	4688      	mov	r8, r1
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;

    ret = sensirion_i2c_read(address, buf8, size);
   2400e:	463a      	mov	r2, r7
   24010:	4669      	mov	r1, sp
   24012:	f7df fd4b 	bl	3aac <sensirion_i2c_read>
   24016:	b206      	sxth	r6, r0
    if (ret != NO_ERROR)
   24018:	b91e      	cbnz	r6, 24022 <sensirion_i2c_read_words_as_bytes+0x22>
        return ret;

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
   2401a:	4635      	mov	r5, r6
   2401c:	4634      	mov	r4, r6
   2401e:	42bc      	cmp	r4, r7
   24020:	d303      	bcc.n	2402a <sensirion_i2c_read_words_as_bytes+0x2a>
        data[j++] = buf8[i];
        data[j++] = buf8[i + 1];
    }

    return NO_ERROR;
}
   24022:	4630      	mov	r0, r6
   24024:	b011      	add	sp, #68	; 0x44
   24026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
   2402a:	ab10      	add	r3, sp, #64	; 0x40
   2402c:	eb03 0904 	add.w	r9, r3, r4
   24030:	2102      	movs	r1, #2
   24032:	f819 2c3e 	ldrb.w	r2, [r9, #-62]
   24036:	eb0d 0004 	add.w	r0, sp, r4
   2403a:	f7ff ffb8 	bl	23fae <sensirion_common_check_crc>
   2403e:	b200      	sxth	r0, r0
        if (ret != NO_ERROR)
   24040:	b970      	cbnz	r0, 24060 <sensirion_i2c_read_words_as_bytes+0x60>
        data[j++] = buf8[i];
   24042:	1c6b      	adds	r3, r5, #1
   24044:	f81d 2004 	ldrb.w	r2, [sp, r4]
   24048:	f808 2005 	strb.w	r2, [r8, r5]
   2404c:	b29b      	uxth	r3, r3
        data[j++] = buf8[i + 1];
   2404e:	3502      	adds	r5, #2
   24050:	f819 2c3f 	ldrb.w	r2, [r9, #-63]
   24054:	f808 2003 	strb.w	r2, [r8, r3]
   24058:	3403      	adds	r4, #3
   2405a:	b2ad      	uxth	r5, r5
   2405c:	b2a4      	uxth	r4, r4
   2405e:	e7de      	b.n	2401e <sensirion_i2c_read_words_as_bytes+0x1e>
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
   24060:	4606      	mov	r6, r0
   24062:	e7de      	b.n	24022 <sensirion_i2c_read_words_as_bytes+0x22>

00024064 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
   24064:	b570      	push	{r4, r5, r6, lr}
   24066:	460c      	mov	r4, r1
   24068:	4615      	mov	r5, r2
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
   2406a:	f7ff ffc9 	bl	24000 <sensirion_i2c_read_words_as_bytes>
                                            num_words);
    if (ret != NO_ERROR)
   2406e:	b920      	cbnz	r0, 2407a <sensirion_i2c_read_words+0x16>
   24070:	4603      	mov	r3, r0
   24072:	1c59      	adds	r1, r3, #1
        return ret;

    for (i = 0; i < num_words; ++i) {
   24074:	b2db      	uxtb	r3, r3
   24076:	42ab      	cmp	r3, r5
   24078:	d300      	bcc.n	2407c <sensirion_i2c_read_words+0x18>
        word_bytes = (uint8_t*)&data_words[i];
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
    }

    return NO_ERROR;
}
   2407a:	bd70      	pop	{r4, r5, r6, pc}
        word_bytes = (uint8_t*)&data_words[i];
   2407c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
   24080:	f814 6013 	ldrb.w	r6, [r4, r3, lsl #1]
   24084:	7852      	ldrb	r2, [r2, #1]
   24086:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
   2408a:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
   2408e:	460b      	mov	r3, r1
   24090:	e7ef      	b.n	24072 <sensirion_i2c_read_words+0xe>

00024092 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
   24092:	b513      	push	{r0, r1, r4, lr}
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
   24094:	2300      	movs	r3, #0
   24096:	461a      	mov	r2, r3
int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
   24098:	4604      	mov	r4, r0
    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
   2409a:	a801      	add	r0, sp, #4
   2409c:	f7ff ff90 	bl	23fc0 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
   240a0:	2202      	movs	r2, #2
   240a2:	a901      	add	r1, sp, #4
   240a4:	4620      	mov	r0, r4
   240a6:	f7df fd15 	bl	3ad4 <sensirion_i2c_write>
}
   240aa:	b002      	add	sp, #8
   240ac:	bd10      	pop	{r4, pc}

000240ae <sht3x_read>:
}

int16_t sht3x_read(int32_t* temperature, int32_t* humidity) {
   240ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   240b0:	4605      	mov	r5, r0
   240b2:	460c      	mov	r4, r1
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHT3X_ADDRESS, words,
   240b4:	2202      	movs	r2, #2
   240b6:	a901      	add	r1, sp, #4
   240b8:	2044      	movs	r0, #68	; 0x44
   240ba:	f7ff ffd3 	bl	24064 <sensirion_i2c_read_words>
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
   240be:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   240c2:	f245 5373 	movw	r3, #21875	; 0x5573
   240c6:	4353      	muls	r3, r2
   240c8:	135b      	asrs	r3, r3, #13
   240ca:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
   240ce:	3bc8      	subs	r3, #200	; 0xc8
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
   240d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
   240d4:	602b      	str	r3, [r5, #0]
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
   240d6:	f243 03d4 	movw	r3, #12500	; 0x30d4
   240da:	4353      	muls	r3, r2
   240dc:	135b      	asrs	r3, r3, #13
   240de:	6023      	str	r3, [r4, #0]

    return ret;
}
   240e0:	b003      	add	sp, #12
   240e2:	bd30      	pop	{r4, r5, pc}

000240e4 <sht3x_measure_blocking_read>:
int16_t sht3x_measure_blocking_read(int32_t* temperature, int32_t* humidity) {
   240e4:	b538      	push	{r3, r4, r5, lr}
   240e6:	4604      	mov	r4, r0
   240e8:	460d      	mov	r5, r1
    int16_t ret = sht3x_measure();
   240ea:	f7df fd07 	bl	3afc <sht3x_measure>
    if (ret == STATUS_OK) {
   240ee:	b948      	cbnz	r0, 24104 <sht3x_measure_blocking_read+0x20>
        sensirion_sleep_usec(SHT3X_MEASUREMENT_DURATION_USEC);
   240f0:	f643 2098 	movw	r0, #15000	; 0x3a98
   240f4:	f7ff ff3c 	bl	23f70 <sensirion_sleep_usec>
        ret = sht3x_read(temperature, humidity);
   240f8:	4629      	mov	r1, r5
   240fa:	4620      	mov	r0, r4
}
   240fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ret = sht3x_read(temperature, humidity);
   24100:	f7ff bfd5 	b.w	240ae <sht3x_read>
}
   24104:	bd38      	pop	{r3, r4, r5, pc}

00024106 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   24106:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   24108:	2300      	movs	r3, #0
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2410a:	2504      	movs	r5, #4
	uint8_t divisor = 100;
   2410c:	2464      	movs	r4, #100	; 0x64
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2410e:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   24112:	b111      	cbz	r1, 2411a <u8_to_dec+0x14>
   24114:	3d01      	subs	r5, #1
   24116:	d102      	bne.n	2411e <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   24118:	7005      	strb	r5, [r0, #0]
	}

	return num_digits;
}
   2411a:	4618      	mov	r0, r3
   2411c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2411e:	42a2      	cmp	r2, r4
		digit = value / divisor;
   24120:	fbb2 f7f4 	udiv	r7, r2, r4
   24124:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   24126:	d202      	bcs.n	2412e <u8_to_dec+0x28>
   24128:	2c01      	cmp	r4, #1
   2412a:	d000      	beq.n	2412e <u8_to_dec+0x28>
   2412c:	b133      	cbz	r3, 2413c <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   2412e:	3630      	adds	r6, #48	; 0x30
			buflen--;
   24130:	3901      	subs	r1, #1
			num_digits++;
   24132:	3301      	adds	r3, #1
			*buf = (char)digit + '0';
   24134:	f800 6b01 	strb.w	r6, [r0], #1
			buflen--;
   24138:	b2c9      	uxtb	r1, r1
			num_digits++;
   2413a:	b2db      	uxtb	r3, r3
		value -= digit * divisor;
   2413c:	fb04 2217 	mls	r2, r4, r7, r2
   24140:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   24142:	fbb4 f4fc 	udiv	r4, r4, ip
   24146:	e7e4      	b.n	24112 <u8_to_dec+0xc>

00024148 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   24148:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2414c:	b2db      	uxtb	r3, r3
   2414e:	2b09      	cmp	r3, #9
   24150:	d802      	bhi.n	24158 <char2hex+0x10>
		*x = c - '0';
   24152:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   24154:	2000      	movs	r0, #0
   24156:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   24158:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2415c:	2b05      	cmp	r3, #5
   2415e:	d802      	bhi.n	24166 <char2hex+0x1e>
		*x = c - 'a' + 10;
   24160:	3857      	subs	r0, #87	; 0x57
   24162:	7008      	strb	r0, [r1, #0]
   24164:	e7f6      	b.n	24154 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   24166:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2416a:	2b05      	cmp	r3, #5
   2416c:	d801      	bhi.n	24172 <char2hex+0x2a>
		*x = c - 'A' + 10;
   2416e:	3837      	subs	r0, #55	; 0x37
   24170:	e7f7      	b.n	24162 <char2hex+0x1a>
		return -EINVAL;
   24172:	f06f 0015 	mvn.w	r0, #21
}
   24176:	4770      	bx	lr

00024178 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   24178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2417a:	084e      	lsrs	r6, r1, #1
   2417c:	f001 0101 	and.w	r1, r1, #1
   24180:	1875      	adds	r5, r6, r1
   24182:	429d      	cmp	r5, r3
{
   24184:	4604      	mov	r4, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   24186:	d903      	bls.n	24190 <hex2bin+0x18>
		return 0;
   24188:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2418a:	4628      	mov	r0, r5
   2418c:	b003      	add	sp, #12
   2418e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   24190:	b159      	cbz	r1, 241aa <hex2bin+0x32>
		if (char2hex(hex[0], &dec) < 0) {
   24192:	f10d 0107 	add.w	r1, sp, #7
   24196:	7800      	ldrb	r0, [r0, #0]
   24198:	f7ff ffd6 	bl	24148 <char2hex>
   2419c:	2800      	cmp	r0, #0
   2419e:	dbf3      	blt.n	24188 <hex2bin+0x10>
		buf[0] = dec;
   241a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   241a4:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   241a8:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   241aa:	3a01      	subs	r2, #1
   241ac:	eb04 0646 	add.w	r6, r4, r6, lsl #1
   241b0:	42b4      	cmp	r4, r6
   241b2:	d0ea      	beq.n	2418a <hex2bin+0x12>
		if (char2hex(hex[2 * i], &dec) < 0) {
   241b4:	f10d 0107 	add.w	r1, sp, #7
   241b8:	7820      	ldrb	r0, [r4, #0]
   241ba:	f7ff ffc5 	bl	24148 <char2hex>
   241be:	2800      	cmp	r0, #0
   241c0:	dbe2      	blt.n	24188 <hex2bin+0x10>
		buf[i] = dec << 4;
   241c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   241c6:	011b      	lsls	r3, r3, #4
   241c8:	7053      	strb	r3, [r2, #1]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   241ca:	7860      	ldrb	r0, [r4, #1]
   241cc:	f10d 0107 	add.w	r1, sp, #7
   241d0:	f7ff ffba 	bl	24148 <char2hex>
   241d4:	2800      	cmp	r0, #0
   241d6:	f104 0402 	add.w	r4, r4, #2
   241da:	dbd5      	blt.n	24188 <hex2bin+0x10>
		buf[i] += dec;
   241dc:	7853      	ldrb	r3, [r2, #1]
   241de:	f89d 1007 	ldrb.w	r1, [sp, #7]
   241e2:	440b      	add	r3, r1
   241e4:	f802 3f01 	strb.w	r3, [r2, #1]!
   241e8:	e7e2      	b.n	241b0 <hex2bin+0x38>

000241ea <sys_notify_validate>:
	if (notify == NULL) {
   241ea:	b140      	cbz	r0, 241fe <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   241ec:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   241ee:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   241f2:	2b02      	cmp	r3, #2
   241f4:	d006      	beq.n	24204 <sys_notify_validate+0x1a>
   241f6:	2b03      	cmp	r3, #3
   241f8:	d004      	beq.n	24204 <sys_notify_validate+0x1a>
   241fa:	2b01      	cmp	r3, #1
   241fc:	d005      	beq.n	2420a <sys_notify_validate+0x20>
		return -EINVAL;
   241fe:	f06f 0015 	mvn.w	r0, #21
}
   24202:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24204:	6803      	ldr	r3, [r0, #0]
   24206:	2b00      	cmp	r3, #0
   24208:	d0f9      	beq.n	241fe <sys_notify_validate+0x14>
		notify->result = 0;
   2420a:	2300      	movs	r3, #0
   2420c:	6083      	str	r3, [r0, #8]
   2420e:	4618      	mov	r0, r3
   24210:	4770      	bx	lr

00024212 <arch_printk_char_out>:
}
   24212:	2000      	movs	r0, #0
   24214:	4770      	bx	lr

00024216 <str_out>:
{
   24216:	b530      	push	{r4, r5, lr}
   24218:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2421a:	680c      	ldr	r4, [r1, #0]
   2421c:	1c55      	adds	r5, r2, #1
   2421e:	b114      	cbz	r4, 24226 <str_out+0x10>
   24220:	684b      	ldr	r3, [r1, #4]
   24222:	4293      	cmp	r3, r2
   24224:	dc01      	bgt.n	2422a <str_out+0x14>
		ctx->count++;
   24226:	608d      	str	r5, [r1, #8]
}
   24228:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2422a:	3b01      	subs	r3, #1
   2422c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2422e:	bf08      	it	eq
   24230:	2200      	moveq	r2, #0
   24232:	608d      	str	r5, [r1, #8]
   24234:	bf0c      	ite	eq
   24236:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   24238:	54a0      	strbne	r0, [r4, r2]
   2423a:	e7f5      	b.n	24228 <str_out+0x12>

0002423c <printk>:
{
   2423c:	b40f      	push	{r0, r1, r2, r3}
   2423e:	b507      	push	{r0, r1, r2, lr}
   24240:	a904      	add	r1, sp, #16
   24242:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   24246:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   24248:	f7df fcaa 	bl	3ba0 <vprintk>
}
   2424c:	b003      	add	sp, #12
   2424e:	f85d eb04 	ldr.w	lr, [sp], #4
   24252:	b004      	add	sp, #16
   24254:	4770      	bx	lr

00024256 <snprintk>:
{
   24256:	b40c      	push	{r2, r3}
   24258:	b507      	push	{r0, r1, r2, lr}
   2425a:	ab04      	add	r3, sp, #16
   2425c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   24260:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   24262:	f7df fcab 	bl	3bbc <vsnprintk>
}
   24266:	b003      	add	sp, #12
   24268:	f85d eb04 	ldr.w	lr, [sp], #4
   2426c:	b002      	add	sp, #8
   2426e:	4770      	bx	lr

00024270 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24270:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   24272:	f013 0307 	ands.w	r3, r3, #7
   24276:	d105      	bne.n	24284 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24278:	6803      	ldr	r3, [r0, #0]
   2427a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2427c:	bf0c      	ite	eq
   2427e:	2000      	moveq	r0, #0
   24280:	2003      	movne	r0, #3
   24282:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24284:	2b02      	cmp	r3, #2
   24286:	d105      	bne.n	24294 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24288:	8bc3      	ldrh	r3, [r0, #30]
   2428a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2428c:	bf14      	ite	ne
   2428e:	2000      	movne	r0, #0
   24290:	2004      	moveq	r0, #4
   24292:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24294:	2b01      	cmp	r3, #1
   24296:	d105      	bne.n	242a4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24298:	6803      	ldr	r3, [r0, #0]
   2429a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2429c:	bf0c      	ite	eq
   2429e:	2000      	moveq	r0, #0
   242a0:	2005      	movne	r0, #5
   242a2:	4770      	bx	lr
	int evt = EVT_NOP;
   242a4:	2000      	movs	r0, #0
}
   242a6:	4770      	bx	lr

000242a8 <notify_one>:
{
   242a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   242ac:	460d      	mov	r5, r1
   242ae:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   242b0:	4619      	mov	r1, r3
   242b2:	1d28      	adds	r0, r5, #4
{
   242b4:	4690      	mov	r8, r2
   242b6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   242b8:	f7df fc3e 	bl	3b38 <sys_notify_finalize>
	if (cb) {
   242bc:	4604      	mov	r4, r0
   242be:	b138      	cbz	r0, 242d0 <notify_one+0x28>
		cb(mgr, cli, state, res);
   242c0:	4633      	mov	r3, r6
   242c2:	4642      	mov	r2, r8
   242c4:	4629      	mov	r1, r5
   242c6:	4638      	mov	r0, r7
   242c8:	46a4      	mov	ip, r4
}
   242ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   242ce:	4760      	bx	ip
}
   242d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000242d4 <validate_args>:
{
   242d4:	b510      	push	{r4, lr}
   242d6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   242d8:	b140      	cbz	r0, 242ec <validate_args+0x18>
   242da:	b139      	cbz	r1, 242ec <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   242dc:	1d08      	adds	r0, r1, #4
   242de:	f7ff ff84 	bl	241ea <sys_notify_validate>
	if ((rv == 0)
   242e2:	b928      	cbnz	r0, 242f0 <validate_args+0x1c>
	    && ((cli->notify.flags
   242e4:	68a3      	ldr	r3, [r4, #8]
   242e6:	f033 0303 	bics.w	r3, r3, #3
   242ea:	d001      	beq.n	242f0 <validate_args+0x1c>
		rv = -EINVAL;
   242ec:	f06f 0015 	mvn.w	r0, #21
}
   242f0:	bd10      	pop	{r4, pc}

000242f2 <onoff_manager_init>:
{
   242f2:	b538      	push	{r3, r4, r5, lr}
   242f4:	460c      	mov	r4, r1
	if ((mgr == NULL)
   242f6:	4605      	mov	r5, r0
   242f8:	b158      	cbz	r0, 24312 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   242fa:	b151      	cbz	r1, 24312 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   242fc:	680b      	ldr	r3, [r1, #0]
   242fe:	b143      	cbz	r3, 24312 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   24300:	684b      	ldr	r3, [r1, #4]
   24302:	b133      	cbz	r3, 24312 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24304:	2220      	movs	r2, #32
   24306:	2100      	movs	r1, #0
   24308:	f001 ff54 	bl	261b4 <memset>
   2430c:	612c      	str	r4, [r5, #16]
	return 0;
   2430e:	2000      	movs	r0, #0
}
   24310:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24312:	f06f 0015 	mvn.w	r0, #21
   24316:	e7fb      	b.n	24310 <onoff_manager_init+0x1e>

00024318 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   24318:	4604      	mov	r4, r0
   2431a:	b508      	push	{r3, lr}
   2431c:	4608      	mov	r0, r1
   2431e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   24320:	461a      	mov	r2, r3
   24322:	47a0      	blx	r4
	return z_impl_k_current_get();
   24324:	f7fd fdac 	bl	21e80 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   24328:	f7e2 fc1e 	bl	6b68 <z_impl_k_thread_abort>

0002432c <chunk_field>:
	if (big_heap(h)) {
   2432c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2432e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   24332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   24336:	bf2c      	ite	cs
   24338:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   2433c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   24340:	4770      	bx	lr

00024342 <chunk_set>:
	void *cmem = &buf[c];
   24342:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   24346:	6880      	ldr	r0, [r0, #8]
   24348:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   2434c:	bf2c      	ite	cs
   2434e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   24352:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   24356:	4770      	bx	lr

00024358 <chunk_used>:
{
   24358:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2435a:	2201      	movs	r2, #1
   2435c:	f7ff ffe6 	bl	2432c <chunk_field>
}
   24360:	f000 0001 	and.w	r0, r0, #1
   24364:	bd08      	pop	{r3, pc}

00024366 <chunk_size>:
{
   24366:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   24368:	2201      	movs	r2, #1
   2436a:	f7ff ffdf 	bl	2432c <chunk_field>
}
   2436e:	0840      	lsrs	r0, r0, #1
   24370:	bd08      	pop	{r3, pc}

00024372 <set_chunk_used>:
	if (big_heap(h)) {
   24372:	6883      	ldr	r3, [r0, #8]
   24374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   24378:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2437c:	d308      	bcc.n	24390 <set_chunk_used+0x1e>
		if (used) {
   2437e:	684b      	ldr	r3, [r1, #4]
   24380:	b11a      	cbz	r2, 2438a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   24382:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   24386:	604b      	str	r3, [r1, #4]
   24388:	4770      	bx	lr
   2438a:	f023 0301 	bic.w	r3, r3, #1
   2438e:	e7fa      	b.n	24386 <set_chunk_used+0x14>
		if (used) {
   24390:	884b      	ldrh	r3, [r1, #2]
   24392:	b11a      	cbz	r2, 2439c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24394:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   24398:	804b      	strh	r3, [r1, #2]
}
   2439a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2439c:	f023 0301 	bic.w	r3, r3, #1
   243a0:	e7fa      	b.n	24398 <set_chunk_used+0x26>

000243a2 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   243a2:	0053      	lsls	r3, r2, #1
   243a4:	2201      	movs	r2, #1
   243a6:	f7ff bfcc 	b.w	24342 <chunk_set>

000243aa <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   243aa:	6883      	ldr	r3, [r0, #8]
   243ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   243b0:	bf2c      	ite	cs
   243b2:	2008      	movcs	r0, #8
   243b4:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   243b6:	3107      	adds	r1, #7
   243b8:	4408      	add	r0, r1
}
   243ba:	08c0      	lsrs	r0, r0, #3
   243bc:	4770      	bx	lr

000243be <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   243be:	460a      	mov	r2, r1
   243c0:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   243c2:	2101      	movs	r1, #1
   243c4:	f7ff fff1 	bl	243aa <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   243c8:	3201      	adds	r2, #1
   243ca:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   243cc:	fab0 f080 	clz	r0, r0
}
   243d0:	f1c0 001f 	rsb	r0, r0, #31
   243d4:	bd08      	pop	{r3, pc}

000243d6 <merge_chunks>:
{
   243d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243da:	4616      	mov	r6, r2
   243dc:	4604      	mov	r4, r0
   243de:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   243e0:	f7ff ffc1 	bl	24366 <chunk_size>
   243e4:	4631      	mov	r1, r6
   243e6:	4605      	mov	r5, r0
   243e8:	4620      	mov	r0, r4
   243ea:	f7ff ffbc 	bl	24366 <chunk_size>
   243ee:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   243f0:	462a      	mov	r2, r5
   243f2:	4639      	mov	r1, r7
   243f4:	4620      	mov	r0, r4
   243f6:	f7ff ffd4 	bl	243a2 <set_chunk_size>
	return c + chunk_size(h, c);
   243fa:	4631      	mov	r1, r6
   243fc:	4620      	mov	r0, r4
   243fe:	f7ff ffb2 	bl	24366 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   24402:	462b      	mov	r3, r5
   24404:	1831      	adds	r1, r6, r0
   24406:	2200      	movs	r2, #0
   24408:	4620      	mov	r0, r4
}
   2440a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2440e:	f7ff bf98 	b.w	24342 <chunk_set>

00024412 <split_chunks>:
{
   24412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24416:	4614      	mov	r4, r2
   24418:	4605      	mov	r5, r0
   2441a:	460f      	mov	r7, r1
	size_t sz0 = chunk_size(h, lc);
   2441c:	f7ff ffa3 	bl	24366 <chunk_size>
	size_t lsz = rc - lc;
   24420:	eba4 0807 	sub.w	r8, r4, r7
	size_t rsz = sz0 - lsz;
   24424:	1b3e      	subs	r6, r7, r4
   24426:	4406      	add	r6, r0
	set_chunk_size(h, lc, lsz);
   24428:	4642      	mov	r2, r8
   2442a:	4639      	mov	r1, r7
   2442c:	4628      	mov	r0, r5
   2442e:	f7ff ffb8 	bl	243a2 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   24432:	4632      	mov	r2, r6
   24434:	4621      	mov	r1, r4
   24436:	4628      	mov	r0, r5
   24438:	f7ff ffb3 	bl	243a2 <set_chunk_size>
   2443c:	4643      	mov	r3, r8
   2443e:	2200      	movs	r2, #0
   24440:	4621      	mov	r1, r4
   24442:	4628      	mov	r0, r5
   24444:	f7ff ff7d 	bl	24342 <chunk_set>
	return c + chunk_size(h, c);
   24448:	4621      	mov	r1, r4
   2444a:	4628      	mov	r0, r5
   2444c:	f7ff ff8b 	bl	24366 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   24450:	4633      	mov	r3, r6
   24452:	1821      	adds	r1, r4, r0
   24454:	2200      	movs	r2, #0
   24456:	4628      	mov	r0, r5
}
   24458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2445c:	f7ff bf71 	b.w	24342 <chunk_set>

00024460 <free_list_remove_bidx>:
{
   24460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24464:	4690      	mov	r8, r2
	return chunk_field(h, c, FREE_NEXT);
   24466:	2203      	movs	r2, #3
   24468:	460e      	mov	r6, r1
   2446a:	4604      	mov	r4, r0
   2446c:	f7ff ff5e 	bl	2432c <chunk_field>
	if (next_free_chunk(h, c) == c) {
   24470:	4286      	cmp	r6, r0
   24472:	4605      	mov	r5, r0
   24474:	f108 0704 	add.w	r7, r8, #4
   24478:	d10b      	bne.n	24492 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2447a:	2301      	movs	r3, #1
   2447c:	fa03 f208 	lsl.w	r2, r3, r8
   24480:	68e3      	ldr	r3, [r4, #12]
   24482:	ea23 0302 	bic.w	r3, r3, r2
   24486:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   24488:	2300      	movs	r3, #0
   2448a:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
}
   2448e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   24492:	4631      	mov	r1, r6
   24494:	2202      	movs	r2, #2
   24496:	4620      	mov	r0, r4
   24498:	f7ff ff48 	bl	2432c <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   2449c:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   2449e:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   244a0:	4601      	mov	r1, r0
		b->next = second;
   244a2:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
   244a6:	4620      	mov	r0, r4
   244a8:	2203      	movs	r2, #3
   244aa:	f7ff ff4a 	bl	24342 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   244ae:	4633      	mov	r3, r6
   244b0:	4629      	mov	r1, r5
   244b2:	4620      	mov	r0, r4
   244b4:	2202      	movs	r2, #2
}
   244b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   244ba:	f7ff bf42 	b.w	24342 <chunk_set>

000244be <free_list_remove>:
{
   244be:	b538      	push	{r3, r4, r5, lr}
   244c0:	4604      	mov	r4, r0
   244c2:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   244c4:	f7ff ff4f 	bl	24366 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   244c8:	68a3      	ldr	r3, [r4, #8]
   244ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   244ce:	4601      	mov	r1, r0
   244d0:	d301      	bcc.n	244d6 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   244d2:	2801      	cmp	r0, #1
   244d4:	d009      	beq.n	244ea <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   244d6:	4620      	mov	r0, r4
   244d8:	f7ff ff71 	bl	243be <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   244dc:	4629      	mov	r1, r5
   244de:	4602      	mov	r2, r0
   244e0:	4620      	mov	r0, r4
}
   244e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   244e6:	f7ff bfbb 	b.w	24460 <free_list_remove_bidx>
}
   244ea:	bd38      	pop	{r3, r4, r5, pc}

000244ec <alloc_chunk>:
{
   244ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   244f0:	4604      	mov	r4, r0
   244f2:	468a      	mov	sl, r1
	int bi = bucket_idx(h, sz);
   244f4:	f7ff ff63 	bl	243be <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   244f8:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   244fa:	4606      	mov	r6, r0
	if (bi > bucket_idx(h, h->len)) {
   244fc:	4620      	mov	r0, r4
   244fe:	f7ff ff5e 	bl	243be <bucket_idx>
   24502:	42b0      	cmp	r0, r6
   24504:	da03      	bge.n	2450e <alloc_chunk+0x22>
		return 0;
   24506:	2500      	movs	r5, #0
}
   24508:	4628      	mov	r0, r5
   2450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   2450e:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   24512:	f8d7 9010 	ldr.w	r9, [r7, #16]
   24516:	f1b9 0f00 	cmp.w	r9, #0
   2451a:	d019      	beq.n	24550 <alloc_chunk+0x64>
   2451c:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   24520:	693d      	ldr	r5, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   24522:	4620      	mov	r0, r4
   24524:	4629      	mov	r1, r5
   24526:	f7ff ff1e 	bl	24366 <chunk_size>
   2452a:	4550      	cmp	r0, sl
   2452c:	d305      	bcc.n	2453a <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   2452e:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   24530:	4629      	mov	r1, r5
   24532:	4620      	mov	r0, r4
   24534:	f7ff ff94 	bl	24460 <free_list_remove_bidx>
		return c;
   24538:	e7e6      	b.n	24508 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   2453a:	2203      	movs	r2, #3
   2453c:	4629      	mov	r1, r5
   2453e:	4620      	mov	r0, r4
   24540:	f7ff fef4 	bl	2432c <chunk_field>
		} while (--i && b->next != first);
   24544:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   24548:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   2454a:	d001      	beq.n	24550 <alloc_chunk+0x64>
   2454c:	4581      	cmp	r9, r0
   2454e:	d1e7      	bne.n	24520 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   24550:	3601      	adds	r6, #1
   24552:	f04f 32ff 	mov.w	r2, #4294967295
   24556:	68e3      	ldr	r3, [r4, #12]
   24558:	40b2      	lsls	r2, r6
	if ((bmask & h->avail_buckets) != 0U) {
   2455a:	401a      	ands	r2, r3
   2455c:	d0d3      	beq.n	24506 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   2455e:	fa92 f2a2 	rbit	r2, r2
   24562:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   24566:	1d13      	adds	r3, r2, #4
   24568:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   2456c:	e7e0      	b.n	24530 <alloc_chunk+0x44>

0002456e <free_list_add>:
{
   2456e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24572:	4604      	mov	r4, r0
   24574:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   24576:	f7ff fef6 	bl	24366 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   2457a:	68a3      	ldr	r3, [r4, #8]
   2457c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24580:	4601      	mov	r1, r0
   24582:	d301      	bcc.n	24588 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   24584:	2801      	cmp	r0, #1
   24586:	d035      	beq.n	245f4 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   24588:	4620      	mov	r0, r4
   2458a:	f7ff ff18 	bl	243be <bucket_idx>
	if (b->next == 0U) {
   2458e:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   24592:	6916      	ldr	r6, [r2, #16]
   24594:	b99e      	cbnz	r6, 245be <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   24596:	2301      	movs	r3, #1
   24598:	fa03 f000 	lsl.w	r0, r3, r0
   2459c:	68e3      	ldr	r3, [r4, #12]
   2459e:	4303      	orrs	r3, r0
   245a0:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   245a2:	4629      	mov	r1, r5
		b->next = c;
   245a4:	6115      	str	r5, [r2, #16]
   245a6:	462b      	mov	r3, r5
   245a8:	2202      	movs	r2, #2
   245aa:	4620      	mov	r0, r4
   245ac:	f7ff fec9 	bl	24342 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   245b0:	2203      	movs	r2, #3
   245b2:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   245b4:	4620      	mov	r0, r4
}
   245b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   245ba:	f7ff bec2 	b.w	24342 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   245be:	2202      	movs	r2, #2
   245c0:	4631      	mov	r1, r6
   245c2:	4620      	mov	r0, r4
   245c4:	f7ff feb2 	bl	2432c <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   245c8:	2202      	movs	r2, #2
   245ca:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   245cc:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   245ce:	4629      	mov	r1, r5
   245d0:	4620      	mov	r0, r4
   245d2:	f7ff feb6 	bl	24342 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   245d6:	4633      	mov	r3, r6
   245d8:	2203      	movs	r2, #3
   245da:	4629      	mov	r1, r5
   245dc:	4620      	mov	r0, r4
   245de:	f7ff feb0 	bl	24342 <chunk_set>
   245e2:	2203      	movs	r2, #3
   245e4:	4639      	mov	r1, r7
   245e6:	462b      	mov	r3, r5
   245e8:	4620      	mov	r0, r4
   245ea:	f7ff feaa 	bl	24342 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   245ee:	2202      	movs	r2, #2
   245f0:	4631      	mov	r1, r6
   245f2:	e7df      	b.n	245b4 <free_list_add+0x46>
   245f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000245f8 <free_chunk>:
{
   245f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245fa:	460c      	mov	r4, r1
   245fc:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   245fe:	f7ff feb2 	bl	24366 <chunk_size>
   24602:	1826      	adds	r6, r4, r0
	if (!chunk_used(h, right_chunk(h, c))) {
   24604:	4631      	mov	r1, r6
   24606:	4628      	mov	r0, r5
   24608:	f7ff fea6 	bl	24358 <chunk_used>
   2460c:	b960      	cbnz	r0, 24628 <free_chunk+0x30>
		free_list_remove(h, right_chunk(h, c));
   2460e:	4631      	mov	r1, r6
   24610:	4628      	mov	r0, r5
   24612:	f7ff ff54 	bl	244be <free_list_remove>
   24616:	4621      	mov	r1, r4
   24618:	4628      	mov	r0, r5
   2461a:	f7ff fea4 	bl	24366 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2461e:	4621      	mov	r1, r4
   24620:	1822      	adds	r2, r4, r0
   24622:	4628      	mov	r0, r5
   24624:	f7ff fed7 	bl	243d6 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   24628:	2200      	movs	r2, #0
   2462a:	4621      	mov	r1, r4
   2462c:	4628      	mov	r0, r5
   2462e:	f7ff fe7d 	bl	2432c <chunk_field>
   24632:	1a27      	subs	r7, r4, r0
	if (!chunk_used(h, left_chunk(h, c))) {
   24634:	4639      	mov	r1, r7
   24636:	4628      	mov	r0, r5
   24638:	f7ff fe8e 	bl	24358 <chunk_used>
   2463c:	4606      	mov	r6, r0
   2463e:	b998      	cbnz	r0, 24668 <free_chunk+0x70>
		free_list_remove(h, left_chunk(h, c));
   24640:	4639      	mov	r1, r7
   24642:	4628      	mov	r0, r5
   24644:	f7ff ff3b 	bl	244be <free_list_remove>
   24648:	4621      	mov	r1, r4
   2464a:	4632      	mov	r2, r6
   2464c:	4628      	mov	r0, r5
   2464e:	f7ff fe6d 	bl	2432c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   24652:	4622      	mov	r2, r4
   24654:	1a21      	subs	r1, r4, r0
   24656:	4628      	mov	r0, r5
   24658:	f7ff febd 	bl	243d6 <merge_chunks>
   2465c:	4621      	mov	r1, r4
   2465e:	4632      	mov	r2, r6
   24660:	4628      	mov	r0, r5
   24662:	f7ff fe63 	bl	2432c <chunk_field>
   24666:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   24668:	4621      	mov	r1, r4
   2466a:	4628      	mov	r0, r5
}
   2466c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   24670:	f7ff bf7d 	b.w	2456e <free_list_add>

00024674 <sys_heap_alloc>:
{
   24674:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   24676:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   24678:	b909      	cbnz	r1, 2467e <sys_heap_alloc+0xa>
		return NULL;
   2467a:	2000      	movs	r0, #0
}
   2467c:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2467e:	68a3      	ldr	r3, [r4, #8]
   24680:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   24684:	d9f9      	bls.n	2467a <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   24686:	4620      	mov	r0, r4
   24688:	f7ff fe8f 	bl	243aa <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2468c:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   2468e:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   24690:	4620      	mov	r0, r4
   24692:	f7ff ff2b 	bl	244ec <alloc_chunk>
	if (c == 0U) {
   24696:	4605      	mov	r5, r0
   24698:	2800      	cmp	r0, #0
   2469a:	d0ee      	beq.n	2467a <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2469c:	4601      	mov	r1, r0
   2469e:	4620      	mov	r0, r4
   246a0:	f7ff fe61 	bl	24366 <chunk_size>
   246a4:	42b0      	cmp	r0, r6
   246a6:	d909      	bls.n	246bc <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   246a8:	442e      	add	r6, r5
   246aa:	4629      	mov	r1, r5
   246ac:	4620      	mov	r0, r4
   246ae:	4632      	mov	r2, r6
   246b0:	f7ff feaf 	bl	24412 <split_chunks>
		free_list_add(h, c + chunk_sz);
   246b4:	4631      	mov	r1, r6
   246b6:	4620      	mov	r0, r4
   246b8:	f7ff ff59 	bl	2456e <free_list_add>
	set_chunk_used(h, c, true);
   246bc:	4620      	mov	r0, r4
   246be:	2201      	movs	r2, #1
   246c0:	4629      	mov	r1, r5
   246c2:	f7ff fe56 	bl	24372 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   246c6:	68a3      	ldr	r3, [r4, #8]
   246c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   246cc:	bf2c      	ite	cs
   246ce:	2008      	movcs	r0, #8
   246d0:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   246d2:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   246d6:	4420      	add	r0, r4
	return chunk_mem(h, c);
   246d8:	e7d0      	b.n	2467c <sys_heap_alloc+0x8>

000246da <encode_uint>:
{
   246da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246de:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   246e0:	78d3      	ldrb	r3, [r2, #3]
{
   246e2:	4614      	mov	r4, r2
	switch (specifier) {
   246e4:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   246e6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   246ea:	4606      	mov	r6, r0
   246ec:	460f      	mov	r7, r1
   246ee:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   246f0:	d02d      	beq.n	2474e <encode_uint+0x74>
   246f2:	d828      	bhi.n	24746 <encode_uint+0x6c>
		return 10;
   246f4:	2b58      	cmp	r3, #88	; 0x58
   246f6:	bf0c      	ite	eq
   246f8:	2510      	moveq	r5, #16
   246fa:	250a      	movne	r5, #10
	char *bp = bps + (bpe - bps);
   246fc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   24700:	46aa      	mov	sl, r5
   24702:	f04f 0b00 	mov.w	fp, #0
   24706:	4652      	mov	r2, sl
   24708:	465b      	mov	r3, fp
   2470a:	4630      	mov	r0, r6
   2470c:	4639      	mov	r1, r7
   2470e:	f7dd fb9b 	bl	1e48 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24712:	2a09      	cmp	r2, #9
   24714:	b2d3      	uxtb	r3, r2
   24716:	d821      	bhi.n	2475c <encode_uint+0x82>
   24718:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2471a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2471c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   2471e:	bf08      	it	eq
   24720:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   24722:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   24726:	d301      	bcc.n	2472c <encode_uint+0x52>
   24728:	45c8      	cmp	r8, r9
   2472a:	d814      	bhi.n	24756 <encode_uint+0x7c>
	if (conv->flag_hash) {
   2472c:	7823      	ldrb	r3, [r4, #0]
   2472e:	069b      	lsls	r3, r3, #26
   24730:	d505      	bpl.n	2473e <encode_uint+0x64>
		if (radix == 8) {
   24732:	2d08      	cmp	r5, #8
   24734:	d118      	bne.n	24768 <encode_uint+0x8e>
			conv->altform_0 = true;
   24736:	78a3      	ldrb	r3, [r4, #2]
   24738:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2473c:	70a3      	strb	r3, [r4, #2]
}
   2473e:	4640      	mov	r0, r8
   24740:	b003      	add	sp, #12
   24742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   24746:	2b70      	cmp	r3, #112	; 0x70
   24748:	d003      	beq.n	24752 <encode_uint+0x78>
		return 10;
   2474a:	2b78      	cmp	r3, #120	; 0x78
   2474c:	e7d3      	b.n	246f6 <encode_uint+0x1c>
		return 8;
   2474e:	2508      	movs	r5, #8
   24750:	e7d4      	b.n	246fc <encode_uint+0x22>
		return 16;
   24752:	2510      	movs	r5, #16
   24754:	e7d2      	b.n	246fc <encode_uint+0x22>
		value /= radix;
   24756:	4606      	mov	r6, r0
   24758:	460f      	mov	r7, r1
   2475a:	e7d4      	b.n	24706 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2475c:	9a01      	ldr	r2, [sp, #4]
   2475e:	2a19      	cmp	r2, #25
   24760:	bf94      	ite	ls
   24762:	3337      	addls	r3, #55	; 0x37
   24764:	3357      	addhi	r3, #87	; 0x57
   24766:	e7d8      	b.n	2471a <encode_uint+0x40>
		} else if (radix == 16) {
   24768:	2d10      	cmp	r5, #16
   2476a:	d1e8      	bne.n	2473e <encode_uint+0x64>
			conv->altform_0c = true;
   2476c:	78a3      	ldrb	r3, [r4, #2]
   2476e:	f043 0310 	orr.w	r3, r3, #16
   24772:	e7e3      	b.n	2473c <encode_uint+0x62>

00024774 <outs>:
{
   24774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24778:	4607      	mov	r7, r0
   2477a:	4688      	mov	r8, r1
   2477c:	4615      	mov	r5, r2
   2477e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24780:	4614      	mov	r4, r2
   24782:	42b4      	cmp	r4, r6
   24784:	eba4 0005 	sub.w	r0, r4, r5
   24788:	d302      	bcc.n	24790 <outs+0x1c>
   2478a:	b93e      	cbnz	r6, 2479c <outs+0x28>
   2478c:	7823      	ldrb	r3, [r4, #0]
   2478e:	b12b      	cbz	r3, 2479c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   24790:	4641      	mov	r1, r8
   24792:	f814 0b01 	ldrb.w	r0, [r4], #1
   24796:	47b8      	blx	r7
		if (rc < 0) {
   24798:	2800      	cmp	r0, #0
   2479a:	daf2      	bge.n	24782 <outs+0xe>
}
   2479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000247a0 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   247a0:	4040      	eors	r0, r0
   247a2:	f380 8811 	msr	BASEPRI, r0
   247a6:	f04f 0004 	mov.w	r0, #4
   247aa:	df02      	svc	2
}
   247ac:	4770      	bx	lr

000247ae <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   247ae:	4770      	bx	lr

000247b0 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   247b0:	6883      	ldr	r3, [r0, #8]
   247b2:	68db      	ldr	r3, [r3, #12]
   247b4:	4718      	bx	r3

000247b6 <nvs_flash_rd>:
{
   247b6:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   247b8:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   247ba:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   247bc:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   247be:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   247c0:	fa16 f181 	uxtah	r1, r6, r1
   247c4:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   247c8:	6884      	ldr	r4, [r0, #8]
   247ca:	6824      	ldr	r4, [r4, #0]
   247cc:	46a4      	mov	ip, r4
}
   247ce:	bc70      	pop	{r4, r5, r6}
   247d0:	4760      	bx	ip

000247d2 <nvs_flash_block_cmp>:
{
   247d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   247d6:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   247d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   247da:	681d      	ldr	r5, [r3, #0]
   247dc:	426d      	negs	r5, r5
{
   247de:	b089      	sub	sp, #36	; 0x24
   247e0:	4681      	mov	r9, r0
   247e2:	460f      	mov	r7, r1
   247e4:	4690      	mov	r8, r2
	block_size =
   247e6:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   247ea:	b91c      	cbnz	r4, 247f4 <nvs_flash_block_cmp+0x22>
	return 0;
   247ec:	4620      	mov	r0, r4
}
   247ee:	b009      	add	sp, #36	; 0x24
   247f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   247f4:	42ac      	cmp	r4, r5
   247f6:	4626      	mov	r6, r4
   247f8:	bf28      	it	cs
   247fa:	462e      	movcs	r6, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   247fc:	4633      	mov	r3, r6
   247fe:	466a      	mov	r2, sp
   24800:	4639      	mov	r1, r7
   24802:	4648      	mov	r0, r9
   24804:	f7ff ffd7 	bl	247b6 <nvs_flash_rd>
		if (rc) {
   24808:	2800      	cmp	r0, #0
   2480a:	d1f0      	bne.n	247ee <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2480c:	4632      	mov	r2, r6
   2480e:	4669      	mov	r1, sp
   24810:	4640      	mov	r0, r8
   24812:	f001 fc7e 	bl	26112 <memcmp>
		if (rc) {
   24816:	b918      	cbnz	r0, 24820 <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   24818:	1ba4      	subs	r4, r4, r6
		addr += bytes_to_cmp;
   2481a:	4437      	add	r7, r6
		data8 += bytes_to_cmp;
   2481c:	44b0      	add	r8, r6
   2481e:	e7e4      	b.n	247ea <nvs_flash_block_cmp+0x18>
			return 1;
   24820:	2001      	movs	r0, #1
   24822:	e7e4      	b.n	247ee <nvs_flash_block_cmp+0x1c>

00024824 <nvs_flash_cmp_const>:
{
   24824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24828:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2482a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2482c:	681c      	ldr	r4, [r3, #0]
   2482e:	4264      	negs	r4, r4
{
   24830:	b088      	sub	sp, #32
	block_size =
   24832:	f004 0420 	and.w	r4, r4, #32
{
   24836:	4680      	mov	r8, r0
   24838:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2483a:	4668      	mov	r0, sp
{
   2483c:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2483e:	4622      	mov	r2, r4
   24840:	f001 fcb8 	bl	261b4 <memset>
	while (len) {
   24844:	b91d      	cbnz	r5, 2484e <nvs_flash_cmp_const+0x2a>
	return 0;
   24846:	4628      	mov	r0, r5
}
   24848:	b008      	add	sp, #32
   2484a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2484e:	42a5      	cmp	r5, r4
   24850:	462f      	mov	r7, r5
   24852:	bf28      	it	cs
   24854:	4627      	movcs	r7, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   24856:	463b      	mov	r3, r7
   24858:	466a      	mov	r2, sp
   2485a:	4631      	mov	r1, r6
   2485c:	4640      	mov	r0, r8
   2485e:	f7ff ffb8 	bl	247d2 <nvs_flash_block_cmp>
		if (rc) {
   24862:	2800      	cmp	r0, #0
   24864:	d1f0      	bne.n	24848 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   24866:	1bed      	subs	r5, r5, r7
		addr += bytes_to_cmp;
   24868:	443e      	add	r6, r7
   2486a:	e7eb      	b.n	24844 <nvs_flash_cmp_const+0x20>

0002486c <nvs_ate_crc8_check>:
{
   2486c:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2486e:	4601      	mov	r1, r0
{
   24870:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24872:	2207      	movs	r2, #7
   24874:	20ff      	movs	r0, #255	; 0xff
   24876:	f7df f949 	bl	3b0c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2487a:	79e3      	ldrb	r3, [r4, #7]
}
   2487c:	1a18      	subs	r0, r3, r0
   2487e:	bf18      	it	ne
   24880:	2001      	movne	r0, #1
   24882:	bd10      	pop	{r4, pc}

00024884 <nvs_ate_crc8_update>:
{
   24884:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24886:	4601      	mov	r1, r0
{
   24888:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2488a:	2207      	movs	r2, #7
   2488c:	20ff      	movs	r0, #255	; 0xff
   2488e:	f7df f93d 	bl	3b0c <crc8_ccitt>
	entry->crc8 = crc8;
   24892:	71e0      	strb	r0, [r4, #7]
}
   24894:	bd10      	pop	{r4, pc}

00024896 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   24896:	7803      	ldrb	r3, [r0, #0]
   24898:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2489a:	bf81      	itttt	hi
   2489c:	18c9      	addhi	r1, r1, r3
   2489e:	f101 31ff 	addhi.w	r1, r1, #4294967295
   248a2:	425b      	neghi	r3, r3
   248a4:	4019      	andhi	r1, r3
}
   248a6:	4608      	mov	r0, r1
   248a8:	4770      	bx	lr

000248aa <nvs_sector_advance.isra.1>:
	*addr += (1 << ADDR_SECT_SHIFT);
   248aa:	680b      	ldr	r3, [r1, #0]
   248ac:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   248b0:	0c1a      	lsrs	r2, r3, #16
   248b2:	4282      	cmp	r2, r0
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   248b4:	bf08      	it	eq
   248b6:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   248ba:	600b      	str	r3, [r1, #0]
}
   248bc:	4770      	bx	lr

000248be <nvs_flash_erase_sector>:
{
   248be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   248c2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   248c4:	8983      	ldrh	r3, [r0, #12]
   248c6:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   248c8:	0c0d      	lsrs	r5, r1, #16
   248ca:	042d      	lsls	r5, r5, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   248cc:	4629      	mov	r1, r5
{
   248ce:	4604      	mov	r4, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   248d0:	f7ff ffa8 	bl	24824 <nvs_flash_cmp_const>
	if (rc <= 0) {
   248d4:	1e06      	subs	r6, r0, #0
   248d6:	dd17      	ble.n	24908 <nvs_flash_erase_sector+0x4a>
	rc = flash_write_protection_set(fs->flash_device, false);
   248d8:	2100      	movs	r1, #0
   248da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	offset = fs->offset;
   248dc:	6827      	ldr	r7, [r4, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   248de:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   248e2:	f7ff ff65 	bl	247b0 <flash_write_protection_set>
	if (rc) {
   248e6:	4606      	mov	r6, r0
   248e8:	b970      	cbnz	r0, 24908 <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   248ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   248ec:	89a2      	ldrh	r2, [r4, #12]
	return api->erase(dev, offset, size);
   248ee:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   248f0:	0c29      	lsrs	r1, r5, #16
   248f2:	689b      	ldr	r3, [r3, #8]
   248f4:	fb08 7101 	mla	r1, r8, r1, r7
   248f8:	4798      	blx	r3
	if (rc) {
   248fa:	4606      	mov	r6, r0
   248fc:	b920      	cbnz	r0, 24908 <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, true);
   248fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->write_protection(dev, enable);
   24900:	6883      	ldr	r3, [r0, #8]
   24902:	2101      	movs	r1, #1
   24904:	68db      	ldr	r3, [r3, #12]
   24906:	4798      	blx	r3
}
   24908:	4630      	mov	r0, r6
   2490a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002490e <nvs_prev_ate>:
{
   2490e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24910:	4604      	mov	r4, r0
   24912:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24914:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   24916:	2108      	movs	r1, #8
   24918:	f7ff ffbd 	bl	24896 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2491c:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2491e:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24920:	6829      	ldr	r1, [r5, #0]
   24922:	4620      	mov	r0, r4
   24924:	f7ff ff47 	bl	247b6 <nvs_flash_rd>
	if (rc) {
   24928:	2800      	cmp	r0, #0
   2492a:	d13e      	bne.n	249aa <nvs_prev_ate+0x9c>
	*addr += ate_size;
   2492c:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2492e:	89a3      	ldrh	r3, [r4, #12]
	*addr += ate_size;
   24930:	4431      	add	r1, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24932:	b28a      	uxth	r2, r1
   24934:	1b9b      	subs	r3, r3, r6
   24936:	429a      	cmp	r2, r3
	*addr += ate_size;
   24938:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2493a:	d136      	bne.n	249aa <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2493c:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2493e:	bf03      	ittte	eq
   24940:	89e3      	ldrheq	r3, [r4, #14]
   24942:	f103 33ff 	addeq.w	r3, r3, #4294967295
   24946:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2494a:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
   2494e:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24950:	2308      	movs	r3, #8
   24952:	466a      	mov	r2, sp
   24954:	4620      	mov	r0, r4
   24956:	f7ff ff2e 	bl	247b6 <nvs_flash_rd>
	if (rc) {
   2495a:	bb30      	cbnz	r0, 249aa <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2495c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2495e:	466a      	mov	r2, sp
   24960:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   24962:	4603      	mov	r3, r0
		if (data8[i] != value) {
   24964:	f812 7b01 	ldrb.w	r7, [r2], #1
   24968:	42b9      	cmp	r1, r7
   2496a:	d115      	bne.n	24998 <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2496c:	3301      	adds	r3, #1
   2496e:	2b08      	cmp	r3, #8
   24970:	d1f8      	bne.n	24964 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   24972:	6863      	ldr	r3, [r4, #4]
   24974:	e00e      	b.n	24994 <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   24976:	89a3      	ldrh	r3, [r4, #12]
   24978:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2497c:	1b9b      	subs	r3, r3, r6
   2497e:	429a      	cmp	r2, r3
   24980:	d20f      	bcs.n	249a2 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   24982:	fbb2 f3f6 	udiv	r3, r2, r6
   24986:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   2498a:	b956      	cbnz	r6, 249a2 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   2498c:	682b      	ldr	r3, [r5, #0]
   2498e:	0c1b      	lsrs	r3, r3, #16
   24990:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   24992:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   24994:	602b      	str	r3, [r5, #0]
		return 0;
   24996:	e008      	b.n	249aa <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   24998:	4668      	mov	r0, sp
   2499a:	f7ff ff67 	bl	2486c <nvs_ate_crc8_check>
   2499e:	2800      	cmp	r0, #0
   249a0:	d0e9      	beq.n	24976 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   249a2:	4629      	mov	r1, r5
   249a4:	4620      	mov	r0, r4
   249a6:	f7e0 f8c5 	bl	4b34 <nvs_recover_last_ate>
}
   249aa:	b003      	add	sp, #12
   249ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000249ae <nvs_flash_al_wrt.part.3>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   249ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   249b2:	4604      	mov	r4, r0
   249b4:	b088      	sub	sp, #32
   249b6:	460e      	mov	r6, r1
	offset = fs->offset;
   249b8:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   249bc:	8987      	ldrh	r7, [r0, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   249be:	6a80      	ldr	r0, [r0, #40]	; 0x28
   249c0:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   249c2:	4690      	mov	r8, r2
   249c4:	461d      	mov	r5, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   249c6:	f7ff fef3 	bl	247b0 <flash_write_protection_set>
	if (rc) {
   249ca:	2800      	cmp	r0, #0
   249cc:	d132      	bne.n	24a34 <nvs_flash_al_wrt.part.3+0x86>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   249ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   249d0:	ea4f 4916 	mov.w	r9, r6, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   249d4:	fa1a f686 	uxtah	r6, sl, r6
   249d8:	fb07 6909 	mla	r9, r7, r9, r6
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   249dc:	681e      	ldr	r6, [r3, #0]
   249de:	4276      	negs	r6, r6
	if (blen > 0) {
   249e0:	402e      	ands	r6, r5
   249e2:	d00b      	beq.n	249fc <nvs_flash_al_wrt.part.3+0x4e>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   249e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->write(dev, offset, data, len);
   249e6:	6883      	ldr	r3, [r0, #8]
   249e8:	4642      	mov	r2, r8
   249ea:	685f      	ldr	r7, [r3, #4]
   249ec:	4649      	mov	r1, r9
   249ee:	4633      	mov	r3, r6
   249f0:	47b8      	blx	r7
		if (rc) {
   249f2:	4607      	mov	r7, r0
   249f4:	b9c8      	cbnz	r0, 24a2a <nvs_flash_al_wrt.part.3+0x7c>
		len -= blen;
   249f6:	1bad      	subs	r5, r5, r6
		offset += blen;
   249f8:	44b1      	add	r9, r6
		data8 += blen;
   249fa:	44b0      	add	r8, r6
	if (len) {
   249fc:	b1ed      	cbz	r5, 24a3a <nvs_flash_al_wrt.part.3+0x8c>
		memcpy(buf, data8, len);
   249fe:	462a      	mov	r2, r5
   24a00:	4641      	mov	r1, r8
   24a02:	4668      	mov	r0, sp
   24a04:	f001 fbac 	bl	26160 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   24a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24a0a:	681a      	ldr	r2, [r3, #0]
   24a0c:	7919      	ldrb	r1, [r3, #4]
   24a0e:	1b52      	subs	r2, r2, r5
   24a10:	eb0d 0005 	add.w	r0, sp, r5
   24a14:	f001 fbce 	bl	261b4 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   24a18:	e9d4 030a 	ldrd	r0, r3, [r4, #40]	; 0x28
   24a1c:	681b      	ldr	r3, [r3, #0]
   24a1e:	6882      	ldr	r2, [r0, #8]
   24a20:	4649      	mov	r1, r9
   24a22:	6855      	ldr	r5, [r2, #4]
   24a24:	466a      	mov	r2, sp
   24a26:	47a8      	blx	r5
   24a28:	4607      	mov	r7, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   24a2a:	2101      	movs	r1, #1
   24a2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   24a2e:	f7ff febf 	bl	247b0 <flash_write_protection_set>
	return rc;
   24a32:	4638      	mov	r0, r7
}
   24a34:	b008      	add	sp, #32
   24a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   24a3a:	462f      	mov	r7, r5
   24a3c:	e7f5      	b.n	24a2a <nvs_flash_al_wrt.part.3+0x7c>

00024a3e <nvs_flash_ate_wrt>:
{
   24a3e:	b510      	push	{r4, lr}
   24a40:	2308      	movs	r3, #8
   24a42:	460a      	mov	r2, r1
   24a44:	6841      	ldr	r1, [r0, #4]
   24a46:	4604      	mov	r4, r0
   24a48:	f7ff ffb1 	bl	249ae <nvs_flash_al_wrt.part.3>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   24a4c:	2108      	movs	r1, #8
   24a4e:	4602      	mov	r2, r0
   24a50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   24a52:	f7ff ff20 	bl	24896 <nvs_al_size.isra.0>
   24a56:	6863      	ldr	r3, [r4, #4]
   24a58:	1a18      	subs	r0, r3, r0
   24a5a:	6060      	str	r0, [r4, #4]
}
   24a5c:	4610      	mov	r0, r2
   24a5e:	bd10      	pop	{r4, pc}

00024a60 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   24a60:	2300      	movs	r3, #0
   24a62:	461a      	mov	r2, r3
   24a64:	f7e0 ba86 	b.w	4f74 <nvs_write>

00024a68 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   24a68:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   24a6a:	2400      	movs	r4, #0
   24a6c:	9400      	str	r4, [sp, #0]
   24a6e:	f7e0 fb5b 	bl	5128 <nvs_read_hist>
	return rc;
}
   24a72:	b002      	add	sp, #8
   24a74:	bd10      	pop	{r4, pc}

00024a76 <device_get_binding>:
   24a76:	f7fb bbaf 	b.w	201d8 <z_impl_device_get_binding>

00024a7a <get_sectors_cb>:
{
   24a7a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   24a7c:	6802      	ldr	r2, [r0, #0]
   24a7e:	684c      	ldr	r4, [r1, #4]
   24a80:	42a2      	cmp	r2, r4
   24a82:	d316      	bcc.n	24ab2 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   24a84:	688b      	ldr	r3, [r1, #8]
   24a86:	4423      	add	r3, r4
   24a88:	429a      	cmp	r2, r3
   24a8a:	d206      	bcs.n	24a9a <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   24a8c:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   24a90:	42ab      	cmp	r3, r5
   24a92:	d304      	bcc.n	24a9e <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   24a94:	f06f 030b 	mvn.w	r3, #11
   24a98:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   24a9a:	2000      	movs	r0, #0
   24a9c:	e00a      	b.n	24ab4 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   24a9e:	68cd      	ldr	r5, [r1, #12]
   24aa0:	1b12      	subs	r2, r2, r4
   24aa2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   24aa6:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   24aaa:	6842      	ldr	r2, [r0, #4]
   24aac:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   24aae:	3301      	adds	r3, #1
   24ab0:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   24ab2:	2001      	movs	r0, #1
}
   24ab4:	bd70      	pop	{r4, r5, r6, pc}

00024ab6 <settings_load>:
	return settings_load_subtree(NULL);
   24ab6:	2000      	movs	r0, #0
   24ab8:	f7e0 bc1a 	b.w	52f0 <settings_load_subtree>

00024abc <settings_delete>:
	return settings_save_one(name, NULL, 0);
   24abc:	2200      	movs	r2, #0
   24abe:	4611      	mov	r1, r2
   24ac0:	f7e0 bbde 	b.w	5280 <settings_save_one>

00024ac4 <settings_name_steq>:
{
   24ac4:	b530      	push	{r4, r5, lr}
	if (next) {
   24ac6:	b10a      	cbz	r2, 24acc <settings_name_steq+0x8>
		*next = NULL;
   24ac8:	2300      	movs	r3, #0
   24aca:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   24acc:	b190      	cbz	r0, 24af4 <settings_name_steq+0x30>
   24ace:	b151      	cbz	r1, 24ae6 <settings_name_steq+0x22>
   24ad0:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   24ad2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   24ad6:	4603      	mov	r3, r0
   24ad8:	f810 1b01 	ldrb.w	r1, [r0], #1
   24adc:	b15c      	cbz	r4, 24af6 <settings_name_steq+0x32>
   24ade:	428c      	cmp	r4, r1
   24ae0:	d101      	bne.n	24ae6 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   24ae2:	2c3d      	cmp	r4, #61	; 0x3d
   24ae4:	d1f5      	bne.n	24ad2 <settings_name_steq+0xe>
	return 0;
   24ae6:	2000      	movs	r0, #0
   24ae8:	e004      	b.n	24af4 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   24aea:	293d      	cmp	r1, #61	; 0x3d
   24aec:	d008      	beq.n	24b00 <settings_name_steq+0x3c>
   24aee:	fab1 f081 	clz	r0, r1
   24af2:	0940      	lsrs	r0, r0, #5
}
   24af4:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   24af6:	292f      	cmp	r1, #47	; 0x2f
   24af8:	d1f7      	bne.n	24aea <settings_name_steq+0x26>
		if (next) {
   24afa:	b10a      	cbz	r2, 24b00 <settings_name_steq+0x3c>
			*next = name + 1;
   24afc:	3301      	adds	r3, #1
   24afe:	6013      	str	r3, [r2, #0]
		return 1;
   24b00:	2001      	movs	r0, #1
   24b02:	e7f7      	b.n	24af4 <settings_name_steq+0x30>

00024b04 <settings_name_next>:
{
   24b04:	b530      	push	{r4, r5, lr}
   24b06:	4603      	mov	r3, r0
	if (next) {
   24b08:	b109      	cbz	r1, 24b0e <settings_name_next+0xa>
		*next = NULL;
   24b0a:	2200      	movs	r2, #0
   24b0c:	600a      	str	r2, [r1, #0]
	if (!name) {
   24b0e:	b16b      	cbz	r3, 24b2c <settings_name_next+0x28>
   24b10:	461a      	mov	r2, r3
   24b12:	4614      	mov	r4, r2
   24b14:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   24b16:	f812 5b01 	ldrb.w	r5, [r2], #1
   24b1a:	b135      	cbz	r5, 24b2a <settings_name_next+0x26>
   24b1c:	2d3d      	cmp	r5, #61	; 0x3d
   24b1e:	d004      	beq.n	24b2a <settings_name_next+0x26>
   24b20:	2d2f      	cmp	r5, #47	; 0x2f
   24b22:	d1f6      	bne.n	24b12 <settings_name_next+0xe>
		if (next) {
   24b24:	b109      	cbz	r1, 24b2a <settings_name_next+0x26>
			*next = name + 1;
   24b26:	3401      	adds	r4, #1
   24b28:	600c      	str	r4, [r1, #0]
}
   24b2a:	bd30      	pop	{r4, r5, pc}
		return 0;
   24b2c:	4618      	mov	r0, r3
   24b2e:	e7fc      	b.n	24b2a <settings_name_next+0x26>

00024b30 <settings_nvs_read_fn>:
{
   24b30:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   24b32:	4613      	mov	r3, r2
{
   24b34:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   24b36:	460a      	mov	r2, r1
   24b38:	8881      	ldrh	r1, [r0, #4]
   24b3a:	6800      	ldr	r0, [r0, #0]
   24b3c:	f7ff ff94 	bl	24a68 <nvs_read>
}
   24b40:	42a0      	cmp	r0, r4
   24b42:	bfa8      	it	ge
   24b44:	4620      	movge	r0, r4
   24b46:	bd10      	pop	{r4, pc}

00024b48 <settings_nvs_save>:
{
   24b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b4c:	b097      	sub	sp, #92	; 0x5c
   24b4e:	4604      	mov	r4, r0
   24b50:	9201      	str	r2, [sp, #4]
   24b52:	469b      	mov	fp, r3
	if (!name) {
   24b54:	468a      	mov	sl, r1
   24b56:	2900      	cmp	r1, #0
   24b58:	d06b      	beq.n	24c32 <settings_nvs_save+0xea>
	delete = ((value == NULL) || (val_len == 0));
   24b5a:	b1da      	cbz	r2, 24b94 <settings_nvs_save+0x4c>
   24b5c:	fabb f78b 	clz	r7, fp
   24b60:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   24b62:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   24b64:	3501      	adds	r5, #1
   24b66:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   24b68:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   24b6a:	f104 0908 	add.w	r9, r4, #8
		name_id--;
   24b6e:	1e6e      	subs	r6, r5, #1
   24b70:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   24b72:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   24b76:	d02d      	beq.n	24bd4 <settings_nvs_save+0x8c>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   24b78:	234a      	movs	r3, #74	; 0x4a
   24b7a:	aa03      	add	r2, sp, #12
   24b7c:	4631      	mov	r1, r6
   24b7e:	4648      	mov	r0, r9
   24b80:	f7ff ff72 	bl	24a68 <nvs_read>
		if (rc < 0) {
   24b84:	2800      	cmp	r0, #0
   24b86:	da07      	bge.n	24b98 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   24b88:	f110 0f02 	cmn.w	r0, #2
   24b8c:	bf08      	it	eq
   24b8e:	46b0      	moveq	r8, r6
   24b90:	4635      	mov	r5, r6
   24b92:	e7ec      	b.n	24b6e <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   24b94:	2701      	movs	r7, #1
   24b96:	e7e4      	b.n	24b62 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   24b98:	ab16      	add	r3, sp, #88	; 0x58
   24b9a:	4418      	add	r0, r3
   24b9c:	2300      	movs	r3, #0
   24b9e:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   24ba2:	a903      	add	r1, sp, #12
   24ba4:	4650      	mov	r0, sl
   24ba6:	f001 fa7c 	bl	260a2 <strcmp>
   24baa:	2800      	cmp	r0, #0
   24bac:	d1f0      	bne.n	24b90 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   24bae:	b1a7      	cbz	r7, 24bda <settings_nvs_save+0x92>
   24bb0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   24bb2:	42b3      	cmp	r3, r6
   24bb4:	d143      	bne.n	24c3e <settings_nvs_save+0xf6>
			cf->last_name_id--;
   24bb6:	4622      	mov	r2, r4
   24bb8:	1e73      	subs	r3, r6, #1
   24bba:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   24bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24bc2:	2302      	movs	r3, #2
   24bc4:	4648      	mov	r0, r9
   24bc6:	f7e0 f9d5 	bl	4f74 <nvs_write>
			if (rc < 0) {
   24bca:	2800      	cmp	r0, #0
   24bcc:	da37      	bge.n	24c3e <settings_nvs_save+0xf6>
}
   24bce:	b017      	add	sp, #92	; 0x5c
   24bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   24bd4:	b1ff      	cbz	r7, 24c16 <settings_nvs_save+0xce>
		return 0;
   24bd6:	2000      	movs	r0, #0
   24bd8:	e7f9      	b.n	24bce <settings_nvs_save+0x86>
   24bda:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   24bdc:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   24be0:	d02a      	beq.n	24c38 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   24be2:	f104 0508 	add.w	r5, r4, #8
   24be6:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   24bea:	465b      	mov	r3, fp
   24bec:	9a01      	ldr	r2, [sp, #4]
   24bee:	b289      	uxth	r1, r1
   24bf0:	4628      	mov	r0, r5
   24bf2:	f7e0 f9bf 	bl	4f74 <nvs_write>
	if (rc < 0) {
   24bf6:	2800      	cmp	r0, #0
   24bf8:	dbe9      	blt.n	24bce <settings_nvs_save+0x86>
	if (write_name) {
   24bfa:	b977      	cbnz	r7, 24c1a <settings_nvs_save+0xd2>
	if (write_name_id > cf->last_name_id) {
   24bfc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   24bfe:	4543      	cmp	r3, r8
   24c00:	d2e9      	bcs.n	24bd6 <settings_nvs_save+0x8e>
		cf->last_name_id = write_name_id;
   24c02:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   24c04:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   24c06:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   24c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24c0e:	4628      	mov	r0, r5
   24c10:	f7e0 f9b0 	bl	4f74 <nvs_write>
   24c14:	e020      	b.n	24c58 <settings_nvs_save+0x110>
	write_name = true;
   24c16:	2701      	movs	r7, #1
   24c18:	e7e0      	b.n	24bdc <settings_nvs_save+0x94>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   24c1a:	4650      	mov	r0, sl
   24c1c:	f001 fa31 	bl	26082 <strlen>
   24c20:	4652      	mov	r2, sl
   24c22:	4603      	mov	r3, r0
   24c24:	4641      	mov	r1, r8
   24c26:	4628      	mov	r0, r5
   24c28:	f7e0 f9a4 	bl	4f74 <nvs_write>
		if (rc < 0) {
   24c2c:	2800      	cmp	r0, #0
   24c2e:	dae5      	bge.n	24bfc <settings_nvs_save+0xb4>
   24c30:	e7cd      	b.n	24bce <settings_nvs_save+0x86>
		return -EINVAL;
   24c32:	f06f 0015 	mvn.w	r0, #21
   24c36:	e7ca      	b.n	24bce <settings_nvs_save+0x86>
		return -ENOMEM;
   24c38:	f06f 000b 	mvn.w	r0, #11
   24c3c:	e7c7      	b.n	24bce <settings_nvs_save+0x86>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   24c3e:	4631      	mov	r1, r6
   24c40:	4648      	mov	r0, r9
   24c42:	f7ff ff0d 	bl	24a60 <nvs_delete>
			if (rc >= 0) {
   24c46:	2800      	cmp	r0, #0
   24c48:	dbc1      	blt.n	24bce <settings_nvs_save+0x86>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   24c4a:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   24c4e:	313f      	adds	r1, #63	; 0x3f
   24c50:	b289      	uxth	r1, r1
   24c52:	4648      	mov	r0, r9
   24c54:	f7ff ff04 	bl	24a60 <nvs_delete>
	if (rc < 0) {
   24c58:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   24c5c:	e7b7      	b.n	24bce <settings_nvs_save+0x86>

00024c5e <settings_nvs_backend_init>:
{
   24c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   24c60:	f100 0608 	add.w	r6, r0, #8
   24c64:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   24c66:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   24c68:	4630      	mov	r0, r6
   24c6a:	f7e0 f84d 	bl	4d08 <nvs_init>
	if (rc) {
   24c6e:	4605      	mov	r5, r0
   24c70:	b970      	cbnz	r0, 24c90 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   24c72:	2302      	movs	r3, #2
   24c74:	f10d 0206 	add.w	r2, sp, #6
   24c78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   24c7c:	4630      	mov	r0, r6
   24c7e:	f7ff fef3 	bl	24a68 <nvs_read>
	if (rc < 0) {
   24c82:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   24c84:	bfb4      	ite	lt
   24c86:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   24c8a:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   24c8e:	8723      	strh	r3, [r4, #56]	; 0x38
}
   24c90:	4628      	mov	r0, r5
   24c92:	b002      	add	sp, #8
   24c94:	bd70      	pop	{r4, r5, r6, pc}

00024c96 <pm_policy_next_state>:

enum power_states pm_policy_next_state(int32_t ticks)
{
	int i;

	if ((ticks != K_TICKS_FOREVER) && (ticks < pm_min_residency[0])) {
   24c96:	f5b0 1ff0 	cmp.w	r0, #1966080	; 0x1e0000
{
   24c9a:	b508      	push	{r3, lr}
	if ((ticks != K_TICKS_FOREVER) && (ticks < pm_min_residency[0])) {
   24c9c:	d202      	bcs.n	24ca4 <pm_policy_next_state+0xe>
		LOG_DBG("Not enough time for PM operations: %d", ticks);
		return POWER_STATE_ACTIVE;
   24c9e:	f04f 30ff 	mov.w	r0, #4294967295
		}
	}

	LOG_DBG("No suitable power state found!");
	return POWER_STATE_ACTIVE;
}
   24ca2:	bd08      	pop	{r3, pc}
		if (!pm_ctrl_is_state_enabled((enum power_states)(i))) {
   24ca4:	2000      	movs	r0, #0
   24ca6:	f7e0 fd85 	bl	57b4 <pm_ctrl_is_state_enabled>
   24caa:	2800      	cmp	r0, #0
   24cac:	d0f7      	beq.n	24c9e <pm_policy_next_state+0x8>
   24cae:	2000      	movs	r0, #0
   24cb0:	e7f7      	b.n	24ca2 <pm_policy_next_state+0xc>

00024cb2 <set_starting_state>:
{
   24cb2:	b510      	push	{r4, lr}
	__asm__ volatile(
   24cb4:	f04f 0320 	mov.w	r3, #32
   24cb8:	f3ef 8211 	mrs	r2, BASEPRI
   24cbc:	f383 8811 	msr	BASEPRI, r3
   24cc0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   24cc4:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   24cc6:	f003 0407 	and.w	r4, r3, #7
   24cca:	2c01      	cmp	r4, #1
   24ccc:	d106      	bne.n	24cdc <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   24cce:	6001      	str	r1, [r0, #0]
	int err = 0;
   24cd0:	2000      	movs	r0, #0
	__asm__ volatile(
   24cd2:	f382 8811 	msr	BASEPRI, r2
   24cd6:	f3bf 8f6f 	isb	sy
}
   24cda:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   24cdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   24ce0:	428b      	cmp	r3, r1
		err = -EALREADY;
   24ce2:	bf14      	ite	ne
   24ce4:	f04f 30ff 	movne.w	r0, #4294967295
   24ce8:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   24cec:	e7f1      	b.n	24cd2 <set_starting_state+0x20>

00024cee <set_on_state>:
	__asm__ volatile(
   24cee:	f04f 0320 	mov.w	r3, #32
   24cf2:	f3ef 8211 	mrs	r2, BASEPRI
   24cf6:	f383 8811 	msr	BASEPRI, r3
   24cfa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   24cfe:	6803      	ldr	r3, [r0, #0]
   24d00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   24d04:	f043 0302 	orr.w	r3, r3, #2
   24d08:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   24d0a:	f382 8811 	msr	BASEPRI, r2
   24d0e:	f3bf 8f6f 	isb	sy
}
   24d12:	4770      	bx	lr

00024d14 <onoff_started_callback>:
	return &data->mgr[type];
   24d14:	68c0      	ldr	r0, [r0, #12]
   24d16:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   24d18:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   24d1c:	2100      	movs	r1, #0
   24d1e:	4710      	bx	r2

00024d20 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   24d20:	2000      	movs	r0, #0
   24d22:	f7fa bd7b 	b.w	1f81c <nrfx_clock_start>

00024d26 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   24d26:	2000      	movs	r0, #0
   24d28:	f7fa bdc6 	b.w	1f8b8 <nrfx_clock_stop>

00024d2c <api_stop>:
	return stop(dev, subsys, CTX_API);
   24d2c:	2280      	movs	r2, #128	; 0x80
   24d2e:	f7e0 bdb7 	b.w	58a0 <stop>

00024d32 <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   24d32:	4610      	mov	r0, r2
   24d34:	f7fd b8aa 	b.w	21e8c <z_impl_k_sem_give>

00024d38 <api_start>:
{
   24d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d3c:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   24d3e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   24d40:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   24d42:	434c      	muls	r4, r1
{
   24d44:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   24d46:	f104 0048 	add.w	r0, r4, #72	; 0x48
   24d4a:	2180      	movs	r1, #128	; 0x80
   24d4c:	4428      	add	r0, r5
{
   24d4e:	4690      	mov	r8, r2
   24d50:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   24d52:	f7ff ffae 	bl	24cb2 <set_starting_state>
	if (err < 0) {
   24d56:	2800      	cmp	r0, #0
   24d58:	db06      	blt.n	24d68 <api_start+0x30>
	subdata->cb = cb;
   24d5a:	4425      	add	r5, r4
	subdata->user_data = user_data;
   24d5c:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   24d60:	6873      	ldr	r3, [r6, #4]
   24d62:	591b      	ldr	r3, [r3, r4]
   24d64:	4798      	blx	r3
	return 0;
   24d66:	2000      	movs	r0, #0
}
   24d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024d6c <z_impl_hwinfo_get_device_id>:
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   24d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   24d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24d72:	6e56      	ldr	r6, [r2, #100]	; 0x64
   24d74:	6e55      	ldr	r5, [r2, #100]	; 0x64
   24d76:	6e54      	ldr	r4, [r2, #100]	; 0x64
   24d78:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   24d7a:	0a2d      	lsrs	r5, r5, #8
   24d7c:	061b      	lsls	r3, r3, #24
   24d7e:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   24d82:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   24d86:	0224      	lsls	r4, r4, #8
   24d88:	432b      	orrs	r3, r5
   24d8a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   24d8e:	4323      	orrs	r3, r4
   24d90:	9300      	str	r3, [sp, #0]
   24d92:	6e16      	ldr	r6, [r2, #96]	; 0x60
   24d94:	6e15      	ldr	r5, [r2, #96]	; 0x60
   24d96:	6e14      	ldr	r4, [r2, #96]	; 0x60
   24d98:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   24d9a:	0a2a      	lsrs	r2, r5, #8
   24d9c:	061b      	lsls	r3, r3, #24
   24d9e:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   24da2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   24da6:	2908      	cmp	r1, #8
   24da8:	ea43 0302 	orr.w	r3, r3, r2
   24dac:	ea4f 2204 	mov.w	r2, r4, lsl #8
   24db0:	bf28      	it	cs
   24db2:	2108      	movcs	r1, #8
   24db4:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   24db8:	4313      	orrs	r3, r2
   24dba:	460c      	mov	r4, r1

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   24dbc:	460a      	mov	r2, r1
   24dbe:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   24dc0:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   24dc2:	f001 f9cd 	bl	26160 <memcpy>

	return length;
}
   24dc6:	4620      	mov	r0, r4
   24dc8:	b002      	add	sp, #8
   24dca:	bd70      	pop	{r4, r5, r6, pc}

00024dcc <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   24dcc:	4770      	bx	lr

00024dce <sys_clock_disable>:
   24dce:	4770      	bx	lr

00024dd0 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   24dd0:	2000      	movs	r0, #0
   24dd2:	f7e0 bd0d 	b.w	57f0 <sys_reboot>

00024dd6 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   24dd6:	428b      	cmp	r3, r1
{
   24dd8:	b538      	push	{r3, r4, r5, lr}
   24dda:	4615      	mov	r5, r2
   24ddc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   24dde:	d805      	bhi.n	24dec <_copy+0x16>
		(void)memcpy(to, from, from_len);
   24de0:	461a      	mov	r2, r3
   24de2:	4629      	mov	r1, r5
   24de4:	f001 f9bc 	bl	26160 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   24de8:	4620      	mov	r0, r4
   24dea:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   24dec:	2400      	movs	r4, #0
   24dee:	e7fb      	b.n	24de8 <_copy+0x12>

00024df0 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   24df0:	f001 b9e0 	b.w	261b4 <memset>

00024df4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   24df4:	09c3      	lsrs	r3, r0, #7
   24df6:	005a      	lsls	r2, r3, #1
   24df8:	4413      	add	r3, r2
   24dfa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24dfe:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   24e02:	b2c0      	uxtb	r0, r0
   24e04:	4770      	bx	lr

00024e06 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   24e06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24e0a:	4607      	mov	r7, r0
   24e0c:	b0a9      	sub	sp, #164	; 0xa4
   24e0e:	4688      	mov	r8, r1
   24e10:	4614      	mov	r4, r2
   24e12:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   24e14:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   24e18:	f7e1 f93e 	bl	6098 <uECC_get_rng>
		if (!rng_function ||
   24e1c:	4603      	mov	r3, r0
   24e1e:	2800      	cmp	r0, #0
   24e20:	d03e      	beq.n	24ea0 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   24e22:	2140      	movs	r1, #64	; 0x40
   24e24:	a808      	add	r0, sp, #32
   24e26:	4798      	blx	r3
		if (!rng_function ||
   24e28:	b3d0      	cbz	r0, 24ea0 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   24e2a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   24e2e:	f112 031f 	adds.w	r3, r2, #31
   24e32:	bf48      	it	mi
   24e34:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   24e38:	466d      	mov	r5, sp
   24e3a:	464a      	mov	r2, r9
   24e3c:	a908      	add	r1, sp, #32
   24e3e:	4628      	mov	r0, r5
   24e40:	f343 1347 	sbfx	r3, r3, #5, #8
   24e44:	f000 fa00 	bl	25248 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   24e48:	4622      	mov	r2, r4
   24e4a:	4629      	mov	r1, r5
   24e4c:	a818      	add	r0, sp, #96	; 0x60
   24e4e:	f000 fe16 	bl	25a7e <EccPoint_compute_public_key>
   24e52:	b318      	cbz	r0, 24e9c <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   24e54:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   24e58:	1dd9      	adds	r1, r3, #7
   24e5a:	bf48      	it	mi
   24e5c:	f103 010e 	addmi.w	r1, r3, #14
   24e60:	462a      	mov	r2, r5
   24e62:	4640      	mov	r0, r8
   24e64:	10c9      	asrs	r1, r1, #3
   24e66:	f000 fe32 	bl	25ace <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   24e6a:	aa18      	add	r2, sp, #96	; 0x60
   24e6c:	f994 1001 	ldrsb.w	r1, [r4, #1]
   24e70:	4638      	mov	r0, r7
   24e72:	f000 fe2c 	bl	25ace <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   24e76:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   24e7a:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   24e7e:	ab18      	add	r3, sp, #96	; 0x60
   24e80:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   24e84:	1878      	adds	r0, r7, r1
   24e86:	f000 fe22 	bl	25ace <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   24e8a:	2220      	movs	r2, #32
   24e8c:	2100      	movs	r1, #0
   24e8e:	4628      	mov	r0, r5
   24e90:	f001 f990 	bl	261b4 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   24e94:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   24e96:	b029      	add	sp, #164	; 0xa4
   24e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   24e9c:	3e01      	subs	r6, #1
   24e9e:	d1bb      	bne.n	24e18 <uECC_make_key+0x12>
        		return 0;
   24ea0:	2000      	movs	r0, #0
   24ea2:	e7f8      	b.n	24e96 <uECC_make_key+0x90>

00024ea4 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   24ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24ea8:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   24eaa:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   24eae:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   24eb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   24eb6:	b0a4      	sub	sp, #144	; 0x90
   24eb8:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   24eba:	1dda      	adds	r2, r3, #7
   24ebc:	bf48      	it	mi
   24ebe:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   24ec2:	ad04      	add	r5, sp, #16
{
   24ec4:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   24ec6:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   24ec8:	4628      	mov	r0, r5
   24eca:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   24ecc:	9502      	str	r5, [sp, #8]
   24ece:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   24ed0:	f000 fe11 	bl	25af6 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   24ed4:	463a      	mov	r2, r7
   24ed6:	4649      	mov	r1, r9
   24ed8:	a814      	add	r0, sp, #80	; 0x50
   24eda:	f000 fe0c 	bl	25af6 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   24ede:	ab14      	add	r3, sp, #80	; 0x50
   24ee0:	eb09 0107 	add.w	r1, r9, r7
   24ee4:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   24ee8:	463a      	mov	r2, r7
   24eea:	f000 fe04 	bl	25af6 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   24eee:	4623      	mov	r3, r4
   24ef0:	4632      	mov	r2, r6
   24ef2:	4629      	mov	r1, r5
   24ef4:	4628      	mov	r0, r5
   24ef6:	f000 fd95 	bl	25a24 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   24efa:	fab0 f080 	clz	r0, r0
   24efe:	9401      	str	r4, [sp, #4]
   24f00:	ab24      	add	r3, sp, #144	; 0x90
   24f02:	0940      	lsrs	r0, r0, #5
   24f04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   24f08:	8863      	ldrh	r3, [r4, #2]
   24f0a:	3301      	adds	r3, #1
   24f0c:	b21b      	sxth	r3, r3
   24f0e:	9300      	str	r3, [sp, #0]
   24f10:	a914      	add	r1, sp, #80	; 0x50
   24f12:	2300      	movs	r3, #0
   24f14:	f850 2c88 	ldr.w	r2, [r0, #-136]
   24f18:	4608      	mov	r0, r1
   24f1a:	f000 fcb4 	bl	25886 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   24f1e:	aa14      	add	r2, sp, #80	; 0x50
   24f20:	4639      	mov	r1, r7
   24f22:	4640      	mov	r0, r8
   24f24:	f000 fdd3 	bl	25ace <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   24f28:	4621      	mov	r1, r4
   24f2a:	a814      	add	r0, sp, #80	; 0x50
   24f2c:	f000 fc22 	bl	25774 <EccPoint_isZero>
   24f30:	ac02      	add	r4, sp, #8
   24f32:	4607      	mov	r7, r0
   24f34:	2208      	movs	r2, #8
   24f36:	2100      	movs	r1, #0
   24f38:	4620      	mov	r0, r4
   24f3a:	f001 f93b 	bl	261b4 <memset>
   24f3e:	2220      	movs	r2, #32
   24f40:	2100      	movs	r1, #0
   24f42:	4630      	mov	r0, r6
   24f44:	f001 f936 	bl	261b4 <memset>
   24f48:	2220      	movs	r2, #32
   24f4a:	2100      	movs	r1, #0
   24f4c:	4628      	mov	r0, r5
   24f4e:	f001 f931 	bl	261b4 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   24f52:	fab7 f087 	clz	r0, r7
   24f56:	0940      	lsrs	r0, r0, #5
   24f58:	b024      	add	sp, #144	; 0x90
   24f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024f5e <uECC_vli_add>:
{
   24f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   24f60:	2400      	movs	r4, #0
{
   24f62:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   24f64:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   24f66:	b265      	sxtb	r5, r4
   24f68:	42ab      	cmp	r3, r5
   24f6a:	dc00      	bgt.n	24f6e <uECC_vli_add+0x10>
}
   24f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   24f6e:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   24f72:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   24f76:	4435      	add	r5, r6
   24f78:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   24f7a:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   24f7c:	bf8c      	ite	hi
   24f7e:	2601      	movhi	r6, #1
   24f80:	2600      	movls	r6, #0
		result[i] = sum;
   24f82:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   24f86:	bf18      	it	ne
   24f88:	4630      	movne	r0, r6
		result[i] = sum;
   24f8a:	3401      	adds	r4, #1
   24f8c:	e7eb      	b.n	24f66 <uECC_vli_add+0x8>

00024f8e <uECC_vli_rshift1>:
	vli += num_words;
   24f8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   24f92:	2300      	movs	r3, #0
	while (vli-- > end) {
   24f94:	4288      	cmp	r0, r1
   24f96:	d300      	bcc.n	24f9a <uECC_vli_rshift1+0xc>
}
   24f98:	4770      	bx	lr
		uECC_word_t temp = *vli;
   24f9a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   24f9e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   24fa2:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   24fa4:	07d3      	lsls	r3, r2, #31
   24fa6:	e7f5      	b.n	24f94 <uECC_vli_rshift1+0x6>

00024fa8 <vli_modInv_update>:
	if (!EVEN(uv)) {
   24fa8:	6803      	ldr	r3, [r0, #0]
{
   24faa:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   24fac:	f013 0601 	ands.w	r6, r3, #1
{
   24fb0:	4605      	mov	r5, r0
   24fb2:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   24fb4:	d005      	beq.n	24fc2 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   24fb6:	4613      	mov	r3, r2
   24fb8:	460a      	mov	r2, r1
   24fba:	4601      	mov	r1, r0
   24fbc:	f7ff ffcf 	bl	24f5e <uECC_vli_add>
   24fc0:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   24fc2:	4621      	mov	r1, r4
   24fc4:	4628      	mov	r0, r5
   24fc6:	f7ff ffe2 	bl	24f8e <uECC_vli_rshift1>
	if (carry) {
   24fca:	b146      	cbz	r6, 24fde <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   24fcc:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   24fd0:	3a01      	subs	r2, #1
   24fd2:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   24fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   24fda:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   24fde:	bd70      	pop	{r4, r5, r6, pc}

00024fe0 <uECC_vli_mult>:
{
   24fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   24fe4:	2500      	movs	r5, #0
{
   24fe6:	b087      	sub	sp, #28
   24fe8:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   24fec:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   24fee:	462a      	mov	r2, r5
   24ff0:	fa4f f885 	sxtb.w	r8, r5
	for (k = 0; k < num_words; ++k) {
   24ff4:	4543      	cmp	r3, r8
   24ff6:	dc16      	bgt.n	25026 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   24ff8:	f04f 35ff 	mov.w	r5, #4294967295
   24ffc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   25000:	9502      	str	r5, [sp, #8]
   25002:	f04f 0a00 	mov.w	sl, #0
   25006:	fa5f f58a 	uxtb.w	r5, sl
   2500a:	eb05 0c03 	add.w	ip, r5, r3
   2500e:	9e02      	ldr	r6, [sp, #8]
   25010:	fa4f fc8c 	sxtb.w	ip, ip
   25014:	45b4      	cmp	ip, r6
   25016:	db2d      	blt.n	25074 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   25018:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2501c:	f840 2c04 	str.w	r2, [r0, #-4]
}
   25020:	b007      	add	sp, #28
   25022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25026:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   25028:	f04f 0c00 	mov.w	ip, #0
   2502c:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   25030:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   25032:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   25036:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   25038:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   2503c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   25040:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   25044:	fba7 ab06 	umull	sl, fp, r7, r6
   25048:	eb1a 0601 	adds.w	r6, sl, r1
   2504c:	f10c 0c01 	add.w	ip, ip, #1
   25050:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   25054:	fa4f fa8c 	sxtb.w	sl, ip
   25058:	bf2c      	ite	cs
   2505a:	2201      	movcs	r2, #1
   2505c:	2200      	movcc	r2, #0
   2505e:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   25060:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   25062:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   25064:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   25066:	dde4      	ble.n	25032 <uECC_vli_mult+0x52>
		result[k] = r0;
   25068:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   2506c:	463a      	mov	r2, r7
   2506e:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   25070:	4674      	mov	r4, lr
   25072:	e7bd      	b.n	24ff0 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   25074:	3501      	adds	r5, #1
   25076:	b26d      	sxtb	r5, r5
   25078:	9e01      	ldr	r6, [sp, #4]
   2507a:	9900      	ldr	r1, [sp, #0]
   2507c:	ebac 0e05 	sub.w	lr, ip, r5
   25080:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   25084:	eb01 0b85 	add.w	fp, r1, r5, lsl #2
   25088:	4626      	mov	r6, r4
   2508a:	2400      	movs	r4, #0
   2508c:	429d      	cmp	r5, r3
   2508e:	db05      	blt.n	2509c <uECC_vli_mult+0xbc>
		result[k] = r0;
   25090:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
		r2 = 0;
   25094:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   25098:	4632      	mov	r2, r6
   2509a:	e7b4      	b.n	25006 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2509c:	e9cd 2604 	strd	r2, r6, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   250a0:	f85e 7904 	ldr.w	r7, [lr], #-4
   250a4:	f85b 8b04 	ldr.w	r8, [fp], #4
	r01 += p;
   250a8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   250ac:	fba8 8907 	umull	r8, r9, r8, r7
   250b0:	eb18 0601 	adds.w	r6, r8, r1
   250b4:	eb59 0702 	adcs.w	r7, r9, r2
   250b8:	bf2c      	ite	cs
   250ba:	2201      	movcs	r2, #1
   250bc:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   250be:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   250c0:	4414      	add	r4, r2
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   250c2:	b26d      	sxtb	r5, r5
	*r0 = (uECC_word_t)r01;
   250c4:	4632      	mov	r2, r6
	*r1 = r01 >> uECC_WORD_BITS;
   250c6:	463e      	mov	r6, r7
   250c8:	e7e0      	b.n	2508c <uECC_vli_mult+0xac>

000250ca <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   250ca:	2300      	movs	r3, #0
{
   250cc:	b510      	push	{r4, lr}
		 vli[i] = 0;
   250ce:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   250d0:	b25a      	sxtb	r2, r3
   250d2:	4291      	cmp	r1, r2
   250d4:	dc00      	bgt.n	250d8 <uECC_vli_clear+0xe>
}
   250d6:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   250d8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   250dc:	3301      	adds	r3, #1
   250de:	e7f7      	b.n	250d0 <uECC_vli_clear+0x6>

000250e0 <uECC_vli_isZero>:
{
   250e0:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   250e2:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   250e4:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   250e6:	b25c      	sxtb	r4, r3
   250e8:	42a1      	cmp	r1, r4
   250ea:	dc03      	bgt.n	250f4 <uECC_vli_isZero+0x14>
}
   250ec:	fab2 f082 	clz	r0, r2
   250f0:	0940      	lsrs	r0, r0, #5
   250f2:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   250f4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   250f8:	3301      	adds	r3, #1
   250fa:	4322      	orrs	r2, r4
   250fc:	e7f3      	b.n	250e6 <uECC_vli_isZero+0x6>

000250fe <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   250fe:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   25100:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25102:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   25106:	f001 011f 	and.w	r1, r1, #31
   2510a:	fa03 f101 	lsl.w	r1, r3, r1
}
   2510e:	4008      	ands	r0, r1
   25110:	4770      	bx	lr

00025112 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25112:	3901      	subs	r1, #1
   25114:	b249      	sxtb	r1, r1
   25116:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   2511a:	2900      	cmp	r1, #0
   2511c:	da04      	bge.n	25128 <uECC_vli_numBits+0x16>
	return (i + 1);
   2511e:	3101      	adds	r1, #1
   25120:	b249      	sxtb	r1, r1
	if (num_digits == 0) {
   25122:	b941      	cbnz	r1, 25136 <uECC_vli_numBits+0x24>
		return 0;
   25124:	4608      	mov	r0, r1
}
   25126:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25128:	f853 2904 	ldr.w	r2, [r3], #-4
   2512c:	2a00      	cmp	r2, #0
   2512e:	d1f6      	bne.n	2511e <uECC_vli_numBits+0xc>
   25130:	3901      	subs	r1, #1
   25132:	b249      	sxtb	r1, r1
   25134:	e7f1      	b.n	2511a <uECC_vli_numBits+0x8>
	digit = vli[num_digits - 1];
   25136:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   2513a:	3b01      	subs	r3, #1
   2513c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	for (i = 0; digit; ++i) {
   25140:	2000      	movs	r0, #0
   25142:	b923      	cbnz	r3, 2514e <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   25144:	3901      	subs	r1, #1
   25146:	eb00 1141 	add.w	r1, r0, r1, lsl #5
   2514a:	b208      	sxth	r0, r1
   2514c:	4770      	bx	lr
		digit >>= 1;
   2514e:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   25150:	3001      	adds	r0, #1
   25152:	e7f6      	b.n	25142 <uECC_vli_numBits+0x30>

00025154 <uECC_vli_set>:
{
   25154:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   25156:	2300      	movs	r3, #0
   25158:	b25c      	sxtb	r4, r3
   2515a:	42a2      	cmp	r2, r4
   2515c:	dc00      	bgt.n	25160 <uECC_vli_set+0xc>
}
   2515e:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   25160:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   25164:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   25168:	3301      	adds	r3, #1
   2516a:	e7f5      	b.n	25158 <uECC_vli_set+0x4>

0002516c <uECC_vli_cmp_unsafe>:
{
   2516c:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   2516e:	3a01      	subs	r2, #1
   25170:	b252      	sxtb	r2, r2
   25172:	0093      	lsls	r3, r2, #2
   25174:	2a00      	cmp	r2, #0
   25176:	da01      	bge.n	2517c <uECC_vli_cmp_unsafe+0x10>
	return 0;
   25178:	2000      	movs	r0, #0
}
   2517a:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   2517c:	58c5      	ldr	r5, [r0, r3]
   2517e:	58cc      	ldr	r4, [r1, r3]
   25180:	42a5      	cmp	r5, r4
   25182:	d805      	bhi.n	25190 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   25184:	f1a3 0304 	sub.w	r3, r3, #4
   25188:	d304      	bcc.n	25194 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   2518a:	3a01      	subs	r2, #1
   2518c:	b252      	sxtb	r2, r2
   2518e:	e7f1      	b.n	25174 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   25190:	2001      	movs	r0, #1
   25192:	e7f2      	b.n	2517a <uECC_vli_cmp_unsafe+0xe>
			return -1;
   25194:	f04f 30ff 	mov.w	r0, #4294967295
   25198:	e7ef      	b.n	2517a <uECC_vli_cmp_unsafe+0xe>

0002519a <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   2519a:	3a01      	subs	r2, #1
   2519c:	b252      	sxtb	r2, r2
{
   2519e:	b570      	push	{r4, r5, r6, lr}
   251a0:	0093      	lsls	r3, r2, #2
	uECC_word_t diff = 0;
   251a2:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   251a4:	2a00      	cmp	r2, #0
   251a6:	da03      	bge.n	251b0 <uECC_vli_equal+0x16>
}
   251a8:	1c20      	adds	r0, r4, #0
   251aa:	bf18      	it	ne
   251ac:	2001      	movne	r0, #1
   251ae:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   251b0:	58c5      	ldr	r5, [r0, r3]
   251b2:	58ce      	ldr	r6, [r1, r3]
	for (i = num_words - 1; i >= 0; --i) {
   251b4:	3a01      	subs	r2, #1
		diff |= (left[i] ^ right[i]);
   251b6:	4075      	eors	r5, r6
   251b8:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   251ba:	b252      	sxtb	r2, r2
   251bc:	3b04      	subs	r3, #4
   251be:	e7f1      	b.n	251a4 <uECC_vli_equal+0xa>

000251c0 <uECC_vli_sub>:
{
   251c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   251c2:	2400      	movs	r4, #0
{
   251c4:	4607      	mov	r7, r0
   251c6:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   251c8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   251ca:	b265      	sxtb	r5, r4
   251cc:	45ac      	cmp	ip, r5
   251ce:	dc00      	bgt.n	251d2 <uECC_vli_sub+0x12>
}
   251d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   251d2:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   251d6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   251da:	1a35      	subs	r5, r6, r0
   251dc:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   251de:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   251e0:	bf34      	ite	cc
   251e2:	2601      	movcc	r6, #1
   251e4:	2600      	movcs	r6, #0
		result[i] = diff;
   251e6:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   251ea:	bf18      	it	ne
   251ec:	4630      	movne	r0, r6
		result[i] = diff;
   251ee:	3401      	adds	r4, #1
   251f0:	e7eb      	b.n	251ca <uECC_vli_sub+0xa>

000251f2 <uECC_vli_modAdd>:
{
   251f2:	b570      	push	{r4, r5, r6, lr}
   251f4:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   251f8:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   251fa:	4623      	mov	r3, r4
{
   251fc:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   251fe:	f7ff feae 	bl	24f5e <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   25202:	b930      	cbnz	r0, 25212 <uECC_vli_modAdd+0x20>
   25204:	4622      	mov	r2, r4
   25206:	4629      	mov	r1, r5
   25208:	4630      	mov	r0, r6
   2520a:	f7ff ffaf 	bl	2516c <uECC_vli_cmp_unsafe>
   2520e:	2801      	cmp	r0, #1
   25210:	d007      	beq.n	25222 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   25212:	4623      	mov	r3, r4
   25214:	4632      	mov	r2, r6
   25216:	4629      	mov	r1, r5
   25218:	4628      	mov	r0, r5
}
   2521a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   2521e:	f7ff bfcf 	b.w	251c0 <uECC_vli_sub>
}
   25222:	bd70      	pop	{r4, r5, r6, pc}

00025224 <uECC_vli_modSub>:
{
   25224:	b570      	push	{r4, r5, r6, lr}
   25226:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   2522a:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2522c:	4623      	mov	r3, r4
{
   2522e:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   25230:	f7ff ffc6 	bl	251c0 <uECC_vli_sub>
	if (l_borrow) {
   25234:	b138      	cbz	r0, 25246 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   25236:	4623      	mov	r3, r4
   25238:	4632      	mov	r2, r6
   2523a:	4629      	mov	r1, r5
   2523c:	4628      	mov	r0, r5
}
   2523e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   25242:	f7ff be8c 	b.w	24f5e <uECC_vli_add>
}
   25246:	bd70      	pop	{r4, r5, r6, pc}

00025248 <uECC_vli_mmod>:
{
   25248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2524c:	b0a5      	sub	sp, #148	; 0x94
   2524e:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   25250:	ab14      	add	r3, sp, #80	; 0x50
   25252:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   25256:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   25258:	4629      	mov	r1, r5
   2525a:	4610      	mov	r0, r2
{
   2525c:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   2525e:	f7ff ff58 	bl	25112 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   25262:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   25266:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   25268:	2c00      	cmp	r4, #0
   2526a:	4626      	mov	r6, r4
   2526c:	bfb8      	it	lt
   2526e:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25272:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   25274:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25278:	f003 031f 	and.w	r3, r3, #31
   2527c:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   25280:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25282:	bf58      	it	pl
   25284:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   25288:	4631      	mov	r1, r6
   2528a:	f7ff ff1e 	bl	250ca <uECC_vli_clear>
	if (bit_shift > 0) {
   2528e:	f1b8 0f00 	cmp.w	r8, #0
   25292:	b230      	sxth	r0, r6
   25294:	dd2d      	ble.n	252f2 <uECC_vli_mmod+0xaa>
   25296:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   25298:	2200      	movs	r2, #0
   2529a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2529e:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   252a2:	4613      	mov	r3, r2
   252a4:	429d      	cmp	r5, r3
   252a6:	d819      	bhi.n	252dc <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   252a8:	b22f      	sxth	r7, r5
   252aa:	007b      	lsls	r3, r7, #1
   252ac:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   252ae:	ab04      	add	r3, sp, #16
   252b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   252b4:	f105 38ff 	add.w	r8, r5, #4294967295
   252b8:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   252ba:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   252bc:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   252c0:	2c00      	cmp	r4, #0
   252c2:	da54      	bge.n	2536e <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   252c4:	ab24      	add	r3, sp, #144	; 0x90
   252c6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   252ca:	462a      	mov	r2, r5
   252cc:	f856 1c88 	ldr.w	r1, [r6, #-136]
   252d0:	4648      	mov	r0, r9
   252d2:	f7ff ff3f 	bl	25154 <uECC_vli_set>
}
   252d6:	b025      	add	sp, #148	; 0x94
   252d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   252dc:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   252e0:	fa06 f108 	lsl.w	r1, r6, r8
   252e4:	430a      	orrs	r2, r1
   252e6:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   252ea:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   252ec:	fa26 f20c 	lsr.w	r2, r6, ip
   252f0:	e7d8      	b.n	252a4 <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   252f2:	ab04      	add	r3, sp, #16
   252f4:	462a      	mov	r2, r5
   252f6:	4639      	mov	r1, r7
   252f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   252fc:	f7ff ff2a 	bl	25154 <uECC_vli_set>
   25300:	e7d2      	b.n	252a8 <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25302:	fa0f fe82 	sxth.w	lr, r2
   25306:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   2530a:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   2530e:	ab24      	add	r3, sp, #144	; 0x90
   25310:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25314:	3001      	adds	r0, #1
   25316:	f852 3c80 	ldr.w	r3, [r2, #-128]
   2531a:	440b      	add	r3, r1
   2531c:	ebbb 0303 	subs.w	r3, fp, r3
   25320:	bf34      	ite	cc
   25322:	2201      	movcc	r2, #1
   25324:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   25326:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   25328:	bf18      	it	ne
   2532a:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   2532c:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   25330:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   25334:	9b01      	ldr	r3, [sp, #4]
   25336:	b242      	sxtb	r2, r0
   25338:	429a      	cmp	r2, r3
   2533a:	dbe2      	blt.n	25302 <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   2533c:	1a73      	subs	r3, r6, r1
   2533e:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   25340:	4629      	mov	r1, r5
   25342:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   25344:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   25346:	f7ff fe22 	bl	24f8e <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2534a:	ab24      	add	r3, sp, #144	; 0x90
   2534c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25350:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25352:	f853 2c80 	ldr.w	r2, [r3, #-128]
   25356:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2535a:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2535c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   25360:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25362:	f848 3c80 	str.w	r3, [r8, #-128]
	for (index = 1; shift >= 0; --shift) {
   25366:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25368:	f7ff fe11 	bl	24f8e <uECC_vli_rshift1>
   2536c:	e7a8      	b.n	252c0 <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2536e:	ab24      	add	r3, sp, #144	; 0x90
   25370:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   25372:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   25376:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25378:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   2537c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   25380:	e7d8      	b.n	25334 <uECC_vli_mmod+0xec>

00025382 <uECC_vli_modMult_fast>:
{
   25382:	b530      	push	{r4, r5, lr}
   25384:	461c      	mov	r4, r3
   25386:	b091      	sub	sp, #68	; 0x44
   25388:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   2538a:	f993 3000 	ldrsb.w	r3, [r3]
   2538e:	4668      	mov	r0, sp
   25390:	f7ff fe26 	bl	24fe0 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   25394:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   25398:	4669      	mov	r1, sp
   2539a:	4628      	mov	r0, r5
   2539c:	4798      	blx	r3
}
   2539e:	b011      	add	sp, #68	; 0x44
   253a0:	bd30      	pop	{r4, r5, pc}

000253a2 <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   253a2:	4613      	mov	r3, r2
   253a4:	460a      	mov	r2, r1
   253a6:	f7ff bfec 	b.w	25382 <uECC_vli_modMult_fast>

000253aa <double_jacobian_default>:
{
   253aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   253ae:	f993 6000 	ldrsb.w	r6, [r3]
{
   253b2:	b092      	sub	sp, #72	; 0x48
   253b4:	4604      	mov	r4, r0
   253b6:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   253b8:	4610      	mov	r0, r2
   253ba:	4631      	mov	r1, r6
{
   253bc:	4615      	mov	r5, r2
   253be:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   253c0:	f7ff fe8e 	bl	250e0 <uECC_vli_isZero>
   253c4:	2800      	cmp	r0, #0
   253c6:	f040 8091 	bne.w	254ec <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   253ca:	4642      	mov	r2, r8
   253cc:	4649      	mov	r1, r9
   253ce:	a802      	add	r0, sp, #8
   253d0:	f7ff ffe7 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   253d4:	4643      	mov	r3, r8
   253d6:	aa02      	add	r2, sp, #8
   253d8:	4621      	mov	r1, r4
   253da:	a80a      	add	r0, sp, #40	; 0x28
   253dc:	f7ff ffd1 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   253e0:	a902      	add	r1, sp, #8
   253e2:	4608      	mov	r0, r1
   253e4:	4642      	mov	r2, r8
   253e6:	f7ff ffdc 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   253ea:	4643      	mov	r3, r8
   253ec:	462a      	mov	r2, r5
   253ee:	4649      	mov	r1, r9
   253f0:	4648      	mov	r0, r9
   253f2:	f7ff ffc6 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   253f6:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   253fa:	4642      	mov	r2, r8
   253fc:	4629      	mov	r1, r5
   253fe:	4628      	mov	r0, r5
   25400:	f7ff ffcf 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   25404:	463b      	mov	r3, r7
   25406:	462a      	mov	r2, r5
   25408:	4621      	mov	r1, r4
   2540a:	4620      	mov	r0, r4
   2540c:	9600      	str	r6, [sp, #0]
   2540e:	f7ff fef0 	bl	251f2 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   25412:	463b      	mov	r3, r7
   25414:	462a      	mov	r2, r5
   25416:	4629      	mov	r1, r5
   25418:	4628      	mov	r0, r5
   2541a:	9600      	str	r6, [sp, #0]
   2541c:	f7ff fee9 	bl	251f2 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   25420:	463b      	mov	r3, r7
   25422:	462a      	mov	r2, r5
   25424:	4621      	mov	r1, r4
   25426:	4628      	mov	r0, r5
   25428:	9600      	str	r6, [sp, #0]
   2542a:	f7ff fefb 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   2542e:	4643      	mov	r3, r8
   25430:	462a      	mov	r2, r5
   25432:	4621      	mov	r1, r4
   25434:	4620      	mov	r0, r4
   25436:	f7ff ffa4 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   2543a:	463b      	mov	r3, r7
   2543c:	4622      	mov	r2, r4
   2543e:	4621      	mov	r1, r4
   25440:	4628      	mov	r0, r5
   25442:	9600      	str	r6, [sp, #0]
   25444:	f7ff fed5 	bl	251f2 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   25448:	463b      	mov	r3, r7
   2544a:	9600      	str	r6, [sp, #0]
   2544c:	462a      	mov	r2, r5
   2544e:	4621      	mov	r1, r4
   25450:	4620      	mov	r0, r4
   25452:	f7ff fece 	bl	251f2 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25456:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   25458:	07db      	lsls	r3, r3, #31
   2545a:	d54a      	bpl.n	254f2 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2545c:	4633      	mov	r3, r6
   2545e:	463a      	mov	r2, r7
   25460:	4621      	mov	r1, r4
   25462:	4620      	mov	r0, r4
   25464:	f7ff fd7b 	bl	24f5e <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   25468:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2546a:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   2546c:	4620      	mov	r0, r4
   2546e:	f7ff fd8e 	bl	24f8e <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   25472:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   25476:	3b01      	subs	r3, #1
   25478:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   2547c:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   25480:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   25484:	4642      	mov	r2, r8
   25486:	4621      	mov	r1, r4
   25488:	4628      	mov	r0, r5
   2548a:	f7ff ff8a 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2548e:	463b      	mov	r3, r7
   25490:	aa0a      	add	r2, sp, #40	; 0x28
   25492:	4629      	mov	r1, r5
   25494:	4628      	mov	r0, r5
   25496:	9600      	str	r6, [sp, #0]
   25498:	f7ff fec4 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   2549c:	463b      	mov	r3, r7
   2549e:	aa0a      	add	r2, sp, #40	; 0x28
   254a0:	4629      	mov	r1, r5
   254a2:	4628      	mov	r0, r5
   254a4:	9600      	str	r6, [sp, #0]
   254a6:	f7ff febd 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   254aa:	a90a      	add	r1, sp, #40	; 0x28
   254ac:	4608      	mov	r0, r1
   254ae:	463b      	mov	r3, r7
   254b0:	462a      	mov	r2, r5
   254b2:	9600      	str	r6, [sp, #0]
   254b4:	f7ff feb6 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   254b8:	4643      	mov	r3, r8
   254ba:	aa0a      	add	r2, sp, #40	; 0x28
   254bc:	4621      	mov	r1, r4
   254be:	4620      	mov	r0, r4
   254c0:	f7ff ff5f 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   254c4:	aa02      	add	r2, sp, #8
   254c6:	463b      	mov	r3, r7
   254c8:	4610      	mov	r0, r2
   254ca:	4621      	mov	r1, r4
   254cc:	9600      	str	r6, [sp, #0]
   254ce:	f7ff fea9 	bl	25224 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   254d2:	4632      	mov	r2, r6
   254d4:	4629      	mov	r1, r5
   254d6:	4620      	mov	r0, r4
   254d8:	f7ff fe3c 	bl	25154 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   254dc:	4649      	mov	r1, r9
   254de:	4628      	mov	r0, r5
   254e0:	f7ff fe38 	bl	25154 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   254e4:	a902      	add	r1, sp, #8
   254e6:	4648      	mov	r0, r9
   254e8:	f7ff fe34 	bl	25154 <uECC_vli_set>
}
   254ec:	b012      	add	sp, #72	; 0x48
   254ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   254f2:	4631      	mov	r1, r6
   254f4:	4620      	mov	r0, r4
   254f6:	f7ff fd4a 	bl	24f8e <uECC_vli_rshift1>
   254fa:	e7c3      	b.n	25484 <double_jacobian_default+0xda>

000254fc <x_side_default>:
{
   254fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25500:	4615      	mov	r5, r2
   25502:	b08a      	sub	sp, #40	; 0x28
   25504:	4604      	mov	r4, r0
   25506:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25508:	221c      	movs	r2, #28
   2550a:	2100      	movs	r1, #0
   2550c:	a803      	add	r0, sp, #12
   2550e:	f000 fe51 	bl	261b4 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   25512:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   25514:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25518:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2551a:	462a      	mov	r2, r5
   2551c:	4641      	mov	r1, r8
   2551e:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25520:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   25522:	f7ff ff3e 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   25526:	4633      	mov	r3, r6
   25528:	aa02      	add	r2, sp, #8
   2552a:	4621      	mov	r1, r4
   2552c:	4620      	mov	r0, r4
   2552e:	9700      	str	r7, [sp, #0]
   25530:	f7ff fe78 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   25534:	462b      	mov	r3, r5
   25536:	4642      	mov	r2, r8
   25538:	4621      	mov	r1, r4
   2553a:	4620      	mov	r0, r4
   2553c:	f7ff ff21 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   25540:	9700      	str	r7, [sp, #0]
   25542:	4633      	mov	r3, r6
   25544:	f105 0284 	add.w	r2, r5, #132	; 0x84
   25548:	4621      	mov	r1, r4
   2554a:	4620      	mov	r0, r4
   2554c:	f7ff fe51 	bl	251f2 <uECC_vli_modAdd>
}
   25550:	b00a      	add	sp, #40	; 0x28
   25552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025556 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   25556:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2555a:	b09b      	sub	sp, #108	; 0x6c
   2555c:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2555e:	9c22      	ldr	r4, [sp, #136]	; 0x88
   25560:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   25564:	9500      	str	r5, [sp, #0]
{
   25566:	4698      	mov	r8, r3
   25568:	4607      	mov	r7, r0
   2556a:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2556c:	4623      	mov	r3, r4
   2556e:	4602      	mov	r2, r0
   25570:	4631      	mov	r1, r6
   25572:	a802      	add	r0, sp, #8
   25574:	f7ff fe56 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   25578:	a902      	add	r1, sp, #8
   2557a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2557c:	4608      	mov	r0, r1
   2557e:	f7ff ff10 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   25582:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25584:	aa02      	add	r2, sp, #8
   25586:	4639      	mov	r1, r7
   25588:	4638      	mov	r0, r7
   2558a:	f7ff fefa 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2558e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25590:	aa02      	add	r2, sp, #8
   25592:	4631      	mov	r1, r6
   25594:	4630      	mov	r0, r6
   25596:	f7ff fef4 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2559a:	4623      	mov	r3, r4
   2559c:	464a      	mov	r2, r9
   2559e:	4641      	mov	r1, r8
   255a0:	a802      	add	r0, sp, #8
   255a2:	9500      	str	r5, [sp, #0]
   255a4:	f7ff fe25 	bl	251f2 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   255a8:	4623      	mov	r3, r4
   255aa:	464a      	mov	r2, r9
   255ac:	4641      	mov	r1, r8
   255ae:	4640      	mov	r0, r8
   255b0:	9500      	str	r5, [sp, #0]
   255b2:	f7ff fe37 	bl	25224 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   255b6:	4623      	mov	r3, r4
   255b8:	463a      	mov	r2, r7
   255ba:	4631      	mov	r1, r6
   255bc:	a80a      	add	r0, sp, #40	; 0x28
   255be:	9500      	str	r5, [sp, #0]
   255c0:	f7ff fe30 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   255c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   255c6:	aa0a      	add	r2, sp, #40	; 0x28
   255c8:	4649      	mov	r1, r9
   255ca:	4648      	mov	r0, r9
   255cc:	f7ff fed9 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   255d0:	4623      	mov	r3, r4
   255d2:	4632      	mov	r2, r6
   255d4:	4639      	mov	r1, r7
   255d6:	a80a      	add	r0, sp, #40	; 0x28
   255d8:	9500      	str	r5, [sp, #0]
   255da:	f7ff fe0a 	bl	251f2 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   255de:	9a22      	ldr	r2, [sp, #136]	; 0x88
   255e0:	4641      	mov	r1, r8
   255e2:	4630      	mov	r0, r6
   255e4:	f7ff fedd 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   255e8:	4623      	mov	r3, r4
   255ea:	aa0a      	add	r2, sp, #40	; 0x28
   255ec:	4631      	mov	r1, r6
   255ee:	4630      	mov	r0, r6
   255f0:	9500      	str	r5, [sp, #0]
   255f2:	f7ff fe17 	bl	25224 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   255f6:	4623      	mov	r3, r4
   255f8:	4632      	mov	r2, r6
   255fa:	4639      	mov	r1, r7
   255fc:	a812      	add	r0, sp, #72	; 0x48
   255fe:	9500      	str	r5, [sp, #0]
   25600:	f7ff fe10 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   25604:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25606:	aa12      	add	r2, sp, #72	; 0x48
   25608:	4641      	mov	r1, r8
   2560a:	4640      	mov	r0, r8
   2560c:	f7ff feb9 	bl	25382 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   25610:	4623      	mov	r3, r4
   25612:	464a      	mov	r2, r9
   25614:	4641      	mov	r1, r8
   25616:	4640      	mov	r0, r8
   25618:	9500      	str	r5, [sp, #0]
   2561a:	f7ff fe03 	bl	25224 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2561e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   25620:	a902      	add	r1, sp, #8
   25622:	a812      	add	r0, sp, #72	; 0x48
   25624:	f7ff febd 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   25628:	a912      	add	r1, sp, #72	; 0x48
   2562a:	4623      	mov	r3, r4
   2562c:	aa0a      	add	r2, sp, #40	; 0x28
   2562e:	4608      	mov	r0, r1
   25630:	9500      	str	r5, [sp, #0]
   25632:	f7ff fdf7 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   25636:	4623      	mov	r3, r4
   25638:	463a      	mov	r2, r7
   2563a:	a912      	add	r1, sp, #72	; 0x48
   2563c:	a80a      	add	r0, sp, #40	; 0x28
   2563e:	9500      	str	r5, [sp, #0]
   25640:	f7ff fdf0 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   25644:	a90a      	add	r1, sp, #40	; 0x28
   25646:	9b22      	ldr	r3, [sp, #136]	; 0x88
   25648:	aa02      	add	r2, sp, #8
   2564a:	4608      	mov	r0, r1
   2564c:	f7ff fe99 	bl	25382 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   25650:	4623      	mov	r3, r4
   25652:	464a      	mov	r2, r9
   25654:	a90a      	add	r1, sp, #40	; 0x28
   25656:	4648      	mov	r0, r9
   25658:	9500      	str	r5, [sp, #0]
   2565a:	f7ff fde3 	bl	25224 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2565e:	462a      	mov	r2, r5
   25660:	a912      	add	r1, sp, #72	; 0x48
   25662:	4638      	mov	r0, r7
   25664:	f7ff fd76 	bl	25154 <uECC_vli_set>
}
   25668:	b01b      	add	sp, #108	; 0x6c
   2566a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002566e <uECC_vli_modInv>:
{
   2566e:	b5f0      	push	{r4, r5, r6, r7, lr}
   25670:	460f      	mov	r7, r1
   25672:	b0a1      	sub	sp, #132	; 0x84
   25674:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   25676:	4619      	mov	r1, r3
   25678:	4638      	mov	r0, r7
{
   2567a:	4615      	mov	r5, r2
   2567c:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2567e:	f7ff fd2f 	bl	250e0 <uECC_vli_isZero>
   25682:	b120      	cbz	r0, 2568e <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   25684:	4630      	mov	r0, r6
   25686:	f7ff fd20 	bl	250ca <uECC_vli_clear>
}
   2568a:	b021      	add	sp, #132	; 0x84
   2568c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   2568e:	4622      	mov	r2, r4
   25690:	4639      	mov	r1, r7
   25692:	4668      	mov	r0, sp
   25694:	f7ff fd5e 	bl	25154 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   25698:	4629      	mov	r1, r5
   2569a:	a808      	add	r0, sp, #32
   2569c:	f7ff fd5a 	bl	25154 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   256a0:	a810      	add	r0, sp, #64	; 0x40
   256a2:	4621      	mov	r1, r4
   256a4:	f7ff fd11 	bl	250ca <uECC_vli_clear>
	u[0] = 1;
   256a8:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   256aa:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   256ac:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   256ae:	f7ff fd0c 	bl	250ca <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   256b2:	4622      	mov	r2, r4
   256b4:	a908      	add	r1, sp, #32
   256b6:	4668      	mov	r0, sp
   256b8:	f7ff fd58 	bl	2516c <uECC_vli_cmp_unsafe>
   256bc:	b928      	cbnz	r0, 256ca <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   256be:	4622      	mov	r2, r4
   256c0:	a910      	add	r1, sp, #64	; 0x40
   256c2:	4630      	mov	r0, r6
   256c4:	f7ff fd46 	bl	25154 <uECC_vli_set>
   256c8:	e7df      	b.n	2568a <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   256ca:	9b00      	ldr	r3, [sp, #0]
   256cc:	07da      	lsls	r2, r3, #31
   256ce:	d409      	bmi.n	256e4 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   256d0:	4621      	mov	r1, r4
   256d2:	4668      	mov	r0, sp
   256d4:	f7ff fc5b 	bl	24f8e <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   256d8:	4622      	mov	r2, r4
   256da:	4629      	mov	r1, r5
   256dc:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   256de:	f7ff fc63 	bl	24fa8 <vli_modInv_update>
   256e2:	e7e6      	b.n	256b2 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   256e4:	9b08      	ldr	r3, [sp, #32]
   256e6:	07db      	lsls	r3, r3, #31
   256e8:	d407      	bmi.n	256fa <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   256ea:	4621      	mov	r1, r4
   256ec:	a808      	add	r0, sp, #32
   256ee:	f7ff fc4e 	bl	24f8e <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   256f2:	4622      	mov	r2, r4
   256f4:	4629      	mov	r1, r5
   256f6:	a818      	add	r0, sp, #96	; 0x60
   256f8:	e7f1      	b.n	256de <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   256fa:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   256fc:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   256fe:	dd1c      	ble.n	2573a <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   25700:	aa08      	add	r2, sp, #32
   25702:	4669      	mov	r1, sp
   25704:	4668      	mov	r0, sp
   25706:	f7ff fd5b 	bl	251c0 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2570a:	4621      	mov	r1, r4
   2570c:	4668      	mov	r0, sp
   2570e:	f7ff fc3e 	bl	24f8e <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   25712:	4622      	mov	r2, r4
   25714:	a918      	add	r1, sp, #96	; 0x60
   25716:	a810      	add	r0, sp, #64	; 0x40
   25718:	f7ff fd28 	bl	2516c <uECC_vli_cmp_unsafe>
   2571c:	2800      	cmp	r0, #0
   2571e:	da05      	bge.n	2572c <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   25720:	a910      	add	r1, sp, #64	; 0x40
   25722:	4623      	mov	r3, r4
   25724:	462a      	mov	r2, r5
   25726:	4608      	mov	r0, r1
   25728:	f7ff fc19 	bl	24f5e <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2572c:	a910      	add	r1, sp, #64	; 0x40
   2572e:	4623      	mov	r3, r4
   25730:	aa18      	add	r2, sp, #96	; 0x60
   25732:	4608      	mov	r0, r1
   25734:	f7ff fd44 	bl	251c0 <uECC_vli_sub>
   25738:	e7ce      	b.n	256d8 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   2573a:	a908      	add	r1, sp, #32
   2573c:	466a      	mov	r2, sp
   2573e:	4608      	mov	r0, r1
   25740:	f7ff fd3e 	bl	251c0 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   25744:	4621      	mov	r1, r4
   25746:	a808      	add	r0, sp, #32
   25748:	f7ff fc21 	bl	24f8e <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2574c:	4622      	mov	r2, r4
   2574e:	a910      	add	r1, sp, #64	; 0x40
   25750:	a818      	add	r0, sp, #96	; 0x60
   25752:	f7ff fd0b 	bl	2516c <uECC_vli_cmp_unsafe>
   25756:	2800      	cmp	r0, #0
   25758:	da05      	bge.n	25766 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   2575a:	a918      	add	r1, sp, #96	; 0x60
   2575c:	4623      	mov	r3, r4
   2575e:	462a      	mov	r2, r5
   25760:	4608      	mov	r0, r1
   25762:	f7ff fbfc 	bl	24f5e <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   25766:	a918      	add	r1, sp, #96	; 0x60
   25768:	4623      	mov	r3, r4
   2576a:	aa10      	add	r2, sp, #64	; 0x40
   2576c:	4608      	mov	r0, r1
   2576e:	f7ff fd27 	bl	251c0 <uECC_vli_sub>
   25772:	e7be      	b.n	256f2 <uECC_vli_modInv+0x84>

00025774 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   25774:	7809      	ldrb	r1, [r1, #0]
   25776:	0049      	lsls	r1, r1, #1
   25778:	b249      	sxtb	r1, r1
   2577a:	f7ff bcb1 	b.w	250e0 <uECC_vli_isZero>

0002577e <apply_z>:
{
   2577e:	b5f0      	push	{r4, r5, r6, r7, lr}
   25780:	4615      	mov	r5, r2
   25782:	b089      	sub	sp, #36	; 0x24
   25784:	461c      	mov	r4, r3
   25786:	4607      	mov	r7, r0
   25788:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2578a:	461a      	mov	r2, r3
   2578c:	4629      	mov	r1, r5
   2578e:	4668      	mov	r0, sp
   25790:	f7ff fe07 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   25794:	4623      	mov	r3, r4
   25796:	466a      	mov	r2, sp
   25798:	4639      	mov	r1, r7
   2579a:	4638      	mov	r0, r7
   2579c:	f7ff fdf1 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   257a0:	4623      	mov	r3, r4
   257a2:	462a      	mov	r2, r5
   257a4:	4669      	mov	r1, sp
   257a6:	4668      	mov	r0, sp
   257a8:	f7ff fdeb 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   257ac:	4623      	mov	r3, r4
   257ae:	466a      	mov	r2, sp
   257b0:	4631      	mov	r1, r6
   257b2:	4630      	mov	r0, r6
   257b4:	f7ff fde5 	bl	25382 <uECC_vli_modMult_fast>
}
   257b8:	b009      	add	sp, #36	; 0x24
   257ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000257bc <XYcZ_add>:
{
   257bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   257c0:	b08b      	sub	sp, #44	; 0x2c
   257c2:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   257c4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   257c6:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   257ca:	9600      	str	r6, [sp, #0]
{
   257cc:	461f      	mov	r7, r3
   257ce:	4680      	mov	r8, r0
   257d0:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   257d2:	462b      	mov	r3, r5
   257d4:	4602      	mov	r2, r0
   257d6:	4621      	mov	r1, r4
   257d8:	a802      	add	r0, sp, #8
   257da:	f7ff fd23 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   257de:	a902      	add	r1, sp, #8
   257e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   257e2:	4608      	mov	r0, r1
   257e4:	f7ff fddd 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   257e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   257ea:	aa02      	add	r2, sp, #8
   257ec:	4641      	mov	r1, r8
   257ee:	4640      	mov	r0, r8
   257f0:	f7ff fdc7 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   257f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   257f6:	aa02      	add	r2, sp, #8
   257f8:	4621      	mov	r1, r4
   257fa:	4620      	mov	r0, r4
   257fc:	f7ff fdc1 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   25800:	462b      	mov	r3, r5
   25802:	464a      	mov	r2, r9
   25804:	4639      	mov	r1, r7
   25806:	4638      	mov	r0, r7
   25808:	9600      	str	r6, [sp, #0]
   2580a:	f7ff fd0b 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2580e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25810:	4639      	mov	r1, r7
   25812:	a802      	add	r0, sp, #8
   25814:	f7ff fdc5 	bl	253a2 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   25818:	a902      	add	r1, sp, #8
   2581a:	462b      	mov	r3, r5
   2581c:	4642      	mov	r2, r8
   2581e:	4608      	mov	r0, r1
   25820:	9600      	str	r6, [sp, #0]
   25822:	f7ff fcff 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   25826:	a902      	add	r1, sp, #8
   25828:	462b      	mov	r3, r5
   2582a:	4622      	mov	r2, r4
   2582c:	4608      	mov	r0, r1
   2582e:	9600      	str	r6, [sp, #0]
   25830:	f7ff fcf8 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   25834:	462b      	mov	r3, r5
   25836:	4642      	mov	r2, r8
   25838:	4621      	mov	r1, r4
   2583a:	4620      	mov	r0, r4
   2583c:	9600      	str	r6, [sp, #0]
   2583e:	f7ff fcf1 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   25842:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25844:	4622      	mov	r2, r4
   25846:	4649      	mov	r1, r9
   25848:	4648      	mov	r0, r9
   2584a:	f7ff fd9a 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2584e:	462b      	mov	r3, r5
   25850:	aa02      	add	r2, sp, #8
   25852:	4641      	mov	r1, r8
   25854:	4620      	mov	r0, r4
   25856:	9600      	str	r6, [sp, #0]
   25858:	f7ff fce4 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2585c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2585e:	4622      	mov	r2, r4
   25860:	4639      	mov	r1, r7
   25862:	4638      	mov	r0, r7
   25864:	f7ff fd8d 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   25868:	462b      	mov	r3, r5
   2586a:	464a      	mov	r2, r9
   2586c:	4639      	mov	r1, r7
   2586e:	4638      	mov	r0, r7
   25870:	9600      	str	r6, [sp, #0]
   25872:	f7ff fcd7 	bl	25224 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   25876:	4632      	mov	r2, r6
   25878:	a902      	add	r1, sp, #8
   2587a:	4620      	mov	r0, r4
   2587c:	f7ff fc6a 	bl	25154 <uECC_vli_set>
}
   25880:	b00b      	add	sp, #44	; 0x2c
   25882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00025886 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   25886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2588a:	b0b1      	sub	sp, #196	; 0xc4
   2588c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   25890:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   25892:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   25894:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   25898:	a818      	add	r0, sp, #96	; 0x60
   2589a:	463a      	mov	r2, r7
{
   2589c:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   2589e:	f7ff fc59 	bl	25154 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   258a2:	00bb      	lsls	r3, r7, #2
   258a4:	9307      	str	r3, [sp, #28]
   258a6:	9b05      	ldr	r3, [sp, #20]
   258a8:	00ba      	lsls	r2, r7, #2
   258aa:	4413      	add	r3, r2
   258ac:	4619      	mov	r1, r3
   258ae:	463a      	mov	r2, r7
   258b0:	a828      	add	r0, sp, #160	; 0xa0
   258b2:	9302      	str	r3, [sp, #8]
   258b4:	f7ff fc4e 	bl	25154 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   258b8:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   258bc:	2e00      	cmp	r6, #0
   258be:	f000 8087 	beq.w	259d0 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   258c2:	462a      	mov	r2, r5
   258c4:	4631      	mov	r1, r6
   258c6:	a808      	add	r0, sp, #32
   258c8:	f7ff fc44 	bl	25154 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   258cc:	ae10      	add	r6, sp, #64	; 0x40
   258ce:	462a      	mov	r2, r5
   258d0:	a918      	add	r1, sp, #96	; 0x60
   258d2:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   258d4:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   258d8:	f7ff fc3c 	bl	25154 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   258dc:	a928      	add	r1, sp, #160	; 0xa0
   258de:	4648      	mov	r0, r9
   258e0:	f7ff fc38 	bl	25154 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   258e4:	4623      	mov	r3, r4
   258e6:	aa08      	add	r2, sp, #32
   258e8:	a928      	add	r1, sp, #160	; 0xa0
   258ea:	a818      	add	r0, sp, #96	; 0x60
   258ec:	f7ff ff47 	bl	2577e <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   258f0:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   258f4:	4623      	mov	r3, r4
   258f6:	aa08      	add	r2, sp, #32
   258f8:	a928      	add	r1, sp, #160	; 0xa0
   258fa:	a818      	add	r0, sp, #96	; 0x60
   258fc:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   258fe:	4623      	mov	r3, r4
   25900:	aa08      	add	r2, sp, #32
   25902:	4649      	mov	r1, r9
   25904:	4630      	mov	r0, r6
   25906:	f7ff ff3a 	bl	2577e <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2590a:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   2590e:	3d02      	subs	r5, #2
   25910:	b22d      	sxth	r5, r5
   25912:	2d00      	cmp	r5, #0
   25914:	dc63      	bgt.n	259de <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25916:	9b06      	ldr	r3, [sp, #24]
   25918:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2591a:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2591c:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   25920:	ab10      	add	r3, sp, #64	; 0x40
   25922:	0176      	lsls	r6, r6, #5
   25924:	43ed      	mvns	r5, r5
   25926:	eb03 0806 	add.w	r8, r3, r6
   2592a:	f005 0501 	and.w	r5, r5, #1
   2592e:	ab20      	add	r3, sp, #128	; 0x80
   25930:	441e      	add	r6, r3
   25932:	016d      	lsls	r5, r5, #5
   25934:	ab10      	add	r3, sp, #64	; 0x40
   25936:	eb03 0905 	add.w	r9, r3, r5
   2593a:	ab20      	add	r3, sp, #128	; 0x80
   2593c:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2593e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   25942:	462b      	mov	r3, r5
   25944:	464a      	mov	r2, r9
   25946:	4631      	mov	r1, r6
   25948:	4640      	mov	r0, r8
   2594a:	f7ff fe04 	bl	25556 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2594e:	4653      	mov	r3, sl
   25950:	aa10      	add	r2, sp, #64	; 0x40
   25952:	a918      	add	r1, sp, #96	; 0x60
   25954:	a808      	add	r0, sp, #32
   25956:	9700      	str	r7, [sp, #0]
   25958:	f7ff fc64 	bl	25224 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2595c:	a908      	add	r1, sp, #32
   2595e:	4623      	mov	r3, r4
   25960:	4632      	mov	r2, r6
   25962:	4608      	mov	r0, r1
   25964:	f7ff fd0d 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   25968:	a908      	add	r1, sp, #32
   2596a:	4623      	mov	r3, r4
   2596c:	9a05      	ldr	r2, [sp, #20]
   2596e:	4608      	mov	r0, r1
   25970:	f7ff fd07 	bl	25382 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   25974:	a908      	add	r1, sp, #32
   25976:	463b      	mov	r3, r7
   25978:	4652      	mov	r2, sl
   2597a:	4608      	mov	r0, r1
   2597c:	f7ff fe77 	bl	2566e <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   25980:	a908      	add	r1, sp, #32
   25982:	4623      	mov	r3, r4
   25984:	9a02      	ldr	r2, [sp, #8]
   25986:	4608      	mov	r0, r1
   25988:	f7ff fcfb 	bl	25382 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2598c:	a908      	add	r1, sp, #32
   2598e:	4623      	mov	r3, r4
   25990:	4642      	mov	r2, r8
   25992:	4608      	mov	r0, r1
   25994:	f7ff fcf5 	bl	25382 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   25998:	9400      	str	r4, [sp, #0]
   2599a:	4633      	mov	r3, r6
   2599c:	4642      	mov	r2, r8
   2599e:	4629      	mov	r1, r5
   259a0:	4648      	mov	r0, r9
   259a2:	f7ff ff0b 	bl	257bc <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   259a6:	4623      	mov	r3, r4
   259a8:	aa08      	add	r2, sp, #32
   259aa:	a920      	add	r1, sp, #128	; 0x80
   259ac:	a810      	add	r0, sp, #64	; 0x40
   259ae:	f7ff fee6 	bl	2577e <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   259b2:	463a      	mov	r2, r7
   259b4:	a910      	add	r1, sp, #64	; 0x40
   259b6:	9804      	ldr	r0, [sp, #16]
   259b8:	f7ff fbcc 	bl	25154 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   259bc:	9b04      	ldr	r3, [sp, #16]
   259be:	9c07      	ldr	r4, [sp, #28]
   259c0:	4423      	add	r3, r4
   259c2:	a920      	add	r1, sp, #128	; 0x80
   259c4:	4618      	mov	r0, r3
   259c6:	f7ff fbc5 	bl	25154 <uECC_vli_set>
}
   259ca:	b031      	add	sp, #196	; 0xc4
   259cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   259d0:	4629      	mov	r1, r5
   259d2:	a808      	add	r0, sp, #32
   259d4:	f7ff fb79 	bl	250ca <uECC_vli_clear>
		z[0] = 1;
   259d8:	2301      	movs	r3, #1
   259da:	9308      	str	r3, [sp, #32]
   259dc:	e776      	b.n	258cc <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   259de:	4629      	mov	r1, r5
   259e0:	9806      	ldr	r0, [sp, #24]
   259e2:	f7ff fb8c 	bl	250fe <uECC_vli_testBit>
   259e6:	fab0 f080 	clz	r0, r0
   259ea:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   259ec:	f1c0 0801 	rsb	r8, r0, #1
   259f0:	ea4f 1848 	mov.w	r8, r8, lsl #5
   259f4:	0140      	lsls	r0, r0, #5
   259f6:	eb06 0b08 	add.w	fp, r6, r8
   259fa:	eb06 0a00 	add.w	sl, r6, r0
   259fe:	44c8      	add	r8, r9
   25a00:	eb09 0300 	add.w	r3, r9, r0
   25a04:	4652      	mov	r2, sl
   25a06:	4641      	mov	r1, r8
   25a08:	4658      	mov	r0, fp
   25a0a:	9400      	str	r4, [sp, #0]
   25a0c:	9303      	str	r3, [sp, #12]
   25a0e:	f7ff fda2 	bl	25556 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   25a12:	9400      	str	r4, [sp, #0]
   25a14:	4643      	mov	r3, r8
   25a16:	465a      	mov	r2, fp
   25a18:	9903      	ldr	r1, [sp, #12]
   25a1a:	4650      	mov	r0, sl
   25a1c:	f7ff fece 	bl	257bc <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   25a20:	3d01      	subs	r5, #1
   25a22:	e775      	b.n	25910 <EccPoint_mult+0x8a>

00025a24 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   25a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   25a28:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   25a2c:	f114 051f 	adds.w	r5, r4, #31
   25a30:	bf48      	it	mi
   25a32:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   25a36:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   25a38:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   25a3c:	f345 1547 	sbfx	r5, r5, #5, #8
{
   25a40:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   25a42:	4601      	mov	r1, r0
   25a44:	462b      	mov	r3, r5
   25a46:	4632      	mov	r2, r6
   25a48:	4638      	mov	r0, r7
   25a4a:	f7ff fa88 	bl	24f5e <uECC_vli_add>
   25a4e:	b990      	cbnz	r0, 25a76 <regularize_k+0x52>
   25a50:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   25a54:	da11      	bge.n	25a7a <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   25a56:	4621      	mov	r1, r4
   25a58:	4638      	mov	r0, r7
   25a5a:	f7ff fb50 	bl	250fe <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   25a5e:	1c04      	adds	r4, r0, #0
   25a60:	bf18      	it	ne
   25a62:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   25a64:	462b      	mov	r3, r5
   25a66:	4632      	mov	r2, r6
   25a68:	4639      	mov	r1, r7
   25a6a:	4640      	mov	r0, r8
   25a6c:	f7ff fa77 	bl	24f5e <uECC_vli_add>

	return carry;
}
   25a70:	4620      	mov	r0, r4
   25a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   25a76:	2401      	movs	r4, #1
   25a78:	e7f4      	b.n	25a64 <regularize_k+0x40>
   25a7a:	4604      	mov	r4, r0
   25a7c:	e7f2      	b.n	25a64 <regularize_k+0x40>

00025a7e <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   25a7e:	b530      	push	{r4, r5, lr}
   25a80:	4614      	mov	r4, r2
   25a82:	b095      	sub	sp, #84	; 0x54
   25a84:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   25a86:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   25a88:	4623      	mov	r3, r4
{
   25a8a:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   25a8c:	a904      	add	r1, sp, #16
   25a8e:	9102      	str	r1, [sp, #8]
   25a90:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   25a92:	f7ff ffc7 	bl	25a24 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   25a96:	fab0 f080 	clz	r0, r0
   25a9a:	ab14      	add	r3, sp, #80	; 0x50
   25a9c:	0940      	lsrs	r0, r0, #5
   25a9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   25aa2:	8863      	ldrh	r3, [r4, #2]
   25aa4:	9401      	str	r4, [sp, #4]
   25aa6:	3301      	adds	r3, #1
   25aa8:	b21b      	sxth	r3, r3
   25aaa:	9300      	str	r3, [sp, #0]
   25aac:	f850 2c48 	ldr.w	r2, [r0, #-72]
   25ab0:	2300      	movs	r3, #0
   25ab2:	f104 0144 	add.w	r1, r4, #68	; 0x44
   25ab6:	4628      	mov	r0, r5
   25ab8:	f7ff fee5 	bl	25886 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   25abc:	4621      	mov	r1, r4
   25abe:	4628      	mov	r0, r5
   25ac0:	f7ff fe58 	bl	25774 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   25ac4:	fab0 f080 	clz	r0, r0
   25ac8:	0940      	lsrs	r0, r0, #5
   25aca:	b015      	add	sp, #84	; 0x54
   25acc:	bd30      	pop	{r4, r5, pc}

00025ace <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   25ace:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   25ad0:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   25ad2:	1e4f      	subs	r7, r1, #1
   25ad4:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   25ad6:	428c      	cmp	r4, r1
   25ad8:	f105 0501 	add.w	r5, r5, #1
   25adc:	db00      	blt.n	25ae0 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   25ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   25ae0:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   25ae2:	f023 0603 	bic.w	r6, r3, #3
   25ae6:	f003 0303 	and.w	r3, r3, #3
   25aea:	5996      	ldr	r6, [r2, r6]
   25aec:	00db      	lsls	r3, r3, #3
   25aee:	fa26 f303 	lsr.w	r3, r6, r3
   25af2:	5503      	strb	r3, [r0, r4]
   25af4:	e7ee      	b.n	25ad4 <uECC_vli_nativeToBytes+0x6>

00025af6 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   25af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25af8:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   25afa:	1cd1      	adds	r1, r2, #3
   25afc:	bf48      	it	mi
   25afe:	1d91      	addmi	r1, r2, #6
{
   25b00:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   25b02:	f341 0187 	sbfx	r1, r1, #2, #8
{
   25b06:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   25b08:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   25b0a:	f7ff fade 	bl	250ca <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   25b0e:	2100      	movs	r1, #0
   25b10:	b24a      	sxtb	r2, r1
   25b12:	42a2      	cmp	r2, r4
   25b14:	f101 0101 	add.w	r1, r1, #1
   25b18:	db00      	blt.n	25b1c <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   25b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   25b1c:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   25b1e:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   25b22:	5cb2      	ldrb	r2, [r6, r2]
   25b24:	f003 0303 	and.w	r3, r3, #3
   25b28:	00db      	lsls	r3, r3, #3
   25b2a:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   25b2e:	582a      	ldr	r2, [r5, r0]
   25b30:	431a      	orrs	r2, r3
   25b32:	502a      	str	r2, [r5, r0]
   25b34:	e7ec      	b.n	25b10 <uECC_vli_bytesToNative+0x1a>

00025b36 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   25b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b3a:	b090      	sub	sp, #64	; 0x40
   25b3c:	4606      	mov	r6, r0
   25b3e:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   25b40:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   25b44:	f7ff fe16 	bl	25774 <EccPoint_isZero>
   25b48:	bb40      	cbnz	r0, 25b9c <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   25b4a:	f104 0804 	add.w	r8, r4, #4
   25b4e:	462a      	mov	r2, r5
   25b50:	4631      	mov	r1, r6
   25b52:	4640      	mov	r0, r8
   25b54:	f7ff fb0a 	bl	2516c <uECC_vli_cmp_unsafe>
   25b58:	2801      	cmp	r0, #1
   25b5a:	d122      	bne.n	25ba2 <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   25b5c:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   25b60:	462a      	mov	r2, r5
   25b62:	4639      	mov	r1, r7
   25b64:	4640      	mov	r0, r8
   25b66:	f7ff fb01 	bl	2516c <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   25b6a:	2801      	cmp	r0, #1
   25b6c:	d119      	bne.n	25ba2 <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   25b6e:	4622      	mov	r2, r4
   25b70:	4668      	mov	r0, sp
   25b72:	f7ff fc16 	bl	253a2 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   25b76:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   25b7a:	4622      	mov	r2, r4
   25b7c:	4631      	mov	r1, r6
   25b7e:	a808      	add	r0, sp, #32
   25b80:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   25b82:	462a      	mov	r2, r5
   25b84:	a908      	add	r1, sp, #32
   25b86:	4668      	mov	r0, sp
   25b88:	f7ff fb07 	bl	2519a <uECC_vli_equal>
   25b8c:	2800      	cmp	r0, #0
		return -3;
   25b8e:	bf0c      	ite	eq
   25b90:	2000      	moveq	r0, #0
   25b92:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   25b96:	b010      	add	sp, #64	; 0x40
   25b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   25b9c:	f04f 30ff 	mov.w	r0, #4294967295
   25ba0:	e7f9      	b.n	25b96 <uECC_valid_point+0x60>
		return -2;
   25ba2:	f06f 0001 	mvn.w	r0, #1
   25ba6:	e7f6      	b.n	25b96 <uECC_valid_point+0x60>

00025ba8 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   25ba8:	b570      	push	{r4, r5, r6, lr}
   25baa:	460c      	mov	r4, r1
   25bac:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   25bae:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   25bb0:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   25bb4:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   25bb6:	4601      	mov	r1, r0
   25bb8:	4668      	mov	r0, sp
   25bba:	f7ff ff9c 	bl	25af6 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   25bbe:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   25bc2:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   25bc6:	18b1      	adds	r1, r6, r2
   25bc8:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   25bcc:	f7ff ff93 	bl	25af6 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   25bd0:	2210      	movs	r2, #16
   25bd2:	4629      	mov	r1, r5
   25bd4:	4668      	mov	r0, sp
   25bd6:	f7ff fac9 	bl	2516c <uECC_vli_cmp_unsafe>
   25bda:	b128      	cbz	r0, 25be8 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   25bdc:	4621      	mov	r1, r4
   25bde:	4668      	mov	r0, sp
   25be0:	f7ff ffa9 	bl	25b36 <uECC_valid_point>
}
   25be4:	b010      	add	sp, #64	; 0x40
   25be6:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   25be8:	f06f 0003 	mvn.w	r0, #3
   25bec:	e7fa      	b.n	25be4 <uECC_valid_public_key+0x3c>

00025bee <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   25bee:	78cb      	ldrb	r3, [r1, #3]
   25bf0:	7802      	ldrb	r2, [r0, #0]
   25bf2:	4053      	eors	r3, r2
   25bf4:	7003      	strb	r3, [r0, #0]
   25bf6:	884b      	ldrh	r3, [r1, #2]
   25bf8:	7842      	ldrb	r2, [r0, #1]
   25bfa:	4053      	eors	r3, r2
   25bfc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   25bfe:	680a      	ldr	r2, [r1, #0]
   25c00:	7883      	ldrb	r3, [r0, #2]
   25c02:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25c06:	7083      	strb	r3, [r0, #2]
   25c08:	680a      	ldr	r2, [r1, #0]
   25c0a:	78c3      	ldrb	r3, [r0, #3]
   25c0c:	4053      	eors	r3, r2
   25c0e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   25c10:	79cb      	ldrb	r3, [r1, #7]
   25c12:	7902      	ldrb	r2, [r0, #4]
   25c14:	4053      	eors	r3, r2
   25c16:	7103      	strb	r3, [r0, #4]
   25c18:	88cb      	ldrh	r3, [r1, #6]
   25c1a:	7942      	ldrb	r2, [r0, #5]
   25c1c:	4053      	eors	r3, r2
   25c1e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   25c20:	684a      	ldr	r2, [r1, #4]
   25c22:	7983      	ldrb	r3, [r0, #6]
   25c24:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25c28:	7183      	strb	r3, [r0, #6]
   25c2a:	684a      	ldr	r2, [r1, #4]
   25c2c:	79c3      	ldrb	r3, [r0, #7]
   25c2e:	4053      	eors	r3, r2
   25c30:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   25c32:	7acb      	ldrb	r3, [r1, #11]
   25c34:	7a02      	ldrb	r2, [r0, #8]
   25c36:	4053      	eors	r3, r2
   25c38:	7203      	strb	r3, [r0, #8]
   25c3a:	7a42      	ldrb	r2, [r0, #9]
   25c3c:	894b      	ldrh	r3, [r1, #10]
   25c3e:	4053      	eors	r3, r2
   25c40:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   25c42:	688a      	ldr	r2, [r1, #8]
   25c44:	7a83      	ldrb	r3, [r0, #10]
   25c46:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25c4a:	7283      	strb	r3, [r0, #10]
   25c4c:	688a      	ldr	r2, [r1, #8]
   25c4e:	7ac3      	ldrb	r3, [r0, #11]
   25c50:	4053      	eors	r3, r2
   25c52:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   25c54:	7bcb      	ldrb	r3, [r1, #15]
   25c56:	7b02      	ldrb	r2, [r0, #12]
   25c58:	4053      	eors	r3, r2
   25c5a:	7303      	strb	r3, [r0, #12]
   25c5c:	89cb      	ldrh	r3, [r1, #14]
   25c5e:	7b42      	ldrb	r2, [r0, #13]
   25c60:	4053      	eors	r3, r2
   25c62:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   25c64:	68ca      	ldr	r2, [r1, #12]
   25c66:	7b83      	ldrb	r3, [r0, #14]
   25c68:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   25c6c:	7383      	strb	r3, [r0, #14]
   25c6e:	68ca      	ldr	r2, [r1, #12]
   25c70:	7bc3      	ldrb	r3, [r0, #15]
   25c72:	4053      	eors	r3, r2
   25c74:	73c3      	strb	r3, [r0, #15]
}
   25c76:	4770      	bx	lr

00025c78 <shift_rows>:
{
   25c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   25c7a:	7802      	ldrb	r2, [r0, #0]
   25c7c:	f88d 2000 	strb.w	r2, [sp]
   25c80:	7942      	ldrb	r2, [r0, #5]
   25c82:	f88d 2001 	strb.w	r2, [sp, #1]
   25c86:	7a82      	ldrb	r2, [r0, #10]
   25c88:	f88d 2002 	strb.w	r2, [sp, #2]
   25c8c:	7bc2      	ldrb	r2, [r0, #15]
   25c8e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   25c92:	7902      	ldrb	r2, [r0, #4]
   25c94:	f88d 2004 	strb.w	r2, [sp, #4]
   25c98:	7a42      	ldrb	r2, [r0, #9]
   25c9a:	f88d 2005 	strb.w	r2, [sp, #5]
   25c9e:	7b82      	ldrb	r2, [r0, #14]
   25ca0:	f88d 2006 	strb.w	r2, [sp, #6]
   25ca4:	78c2      	ldrb	r2, [r0, #3]
   25ca6:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   25caa:	7a02      	ldrb	r2, [r0, #8]
   25cac:	f88d 2008 	strb.w	r2, [sp, #8]
   25cb0:	7b42      	ldrb	r2, [r0, #13]
   25cb2:	f88d 2009 	strb.w	r2, [sp, #9]
   25cb6:	7882      	ldrb	r2, [r0, #2]
   25cb8:	f88d 200a 	strb.w	r2, [sp, #10]
   25cbc:	79c2      	ldrb	r2, [r0, #7]
   25cbe:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   25cc2:	7b02      	ldrb	r2, [r0, #12]
   25cc4:	f88d 200c 	strb.w	r2, [sp, #12]
   25cc8:	7842      	ldrb	r2, [r0, #1]
   25cca:	f88d 200d 	strb.w	r2, [sp, #13]
   25cce:	7ac3      	ldrb	r3, [r0, #11]
   25cd0:	7982      	ldrb	r2, [r0, #6]
   25cd2:	f88d 200e 	strb.w	r2, [sp, #14]
   25cd6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   25cda:	2310      	movs	r3, #16
   25cdc:	466a      	mov	r2, sp
   25cde:	4619      	mov	r1, r3
   25ce0:	f7ff f879 	bl	24dd6 <_copy>
}
   25ce4:	b005      	add	sp, #20
   25ce6:	f85d fb04 	ldr.w	pc, [sp], #4

00025cea <mult_row_column>:
{
   25cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25cec:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   25cee:	7808      	ldrb	r0, [r1, #0]
{
   25cf0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   25cf2:	f7ff f87f 	bl	24df4 <_double_byte>
   25cf6:	4605      	mov	r5, r0
   25cf8:	7860      	ldrb	r0, [r4, #1]
   25cfa:	f7ff f87b 	bl	24df4 <_double_byte>
   25cfe:	78a2      	ldrb	r2, [r4, #2]
   25d00:	7863      	ldrb	r3, [r4, #1]
   25d02:	4053      	eors	r3, r2
   25d04:	78e2      	ldrb	r2, [r4, #3]
   25d06:	4053      	eors	r3, r2
   25d08:	405d      	eors	r5, r3
   25d0a:	4045      	eors	r5, r0
   25d0c:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   25d0e:	7860      	ldrb	r0, [r4, #1]
   25d10:	7827      	ldrb	r7, [r4, #0]
   25d12:	f7ff f86f 	bl	24df4 <_double_byte>
   25d16:	4605      	mov	r5, r0
   25d18:	78a0      	ldrb	r0, [r4, #2]
   25d1a:	f7ff f86b 	bl	24df4 <_double_byte>
   25d1e:	78a3      	ldrb	r3, [r4, #2]
   25d20:	405f      	eors	r7, r3
   25d22:	78e3      	ldrb	r3, [r4, #3]
   25d24:	405f      	eors	r7, r3
   25d26:	407d      	eors	r5, r7
   25d28:	4045      	eors	r5, r0
   25d2a:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   25d2c:	78a0      	ldrb	r0, [r4, #2]
   25d2e:	7865      	ldrb	r5, [r4, #1]
   25d30:	7827      	ldrb	r7, [r4, #0]
   25d32:	f7ff f85f 	bl	24df4 <_double_byte>
   25d36:	406f      	eors	r7, r5
   25d38:	4605      	mov	r5, r0
   25d3a:	78e0      	ldrb	r0, [r4, #3]
   25d3c:	f7ff f85a 	bl	24df4 <_double_byte>
   25d40:	78e3      	ldrb	r3, [r4, #3]
   25d42:	405f      	eors	r7, r3
   25d44:	407d      	eors	r5, r7
   25d46:	4045      	eors	r5, r0
   25d48:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   25d4a:	7820      	ldrb	r0, [r4, #0]
   25d4c:	f7ff f852 	bl	24df4 <_double_byte>
   25d50:	7863      	ldrb	r3, [r4, #1]
   25d52:	7825      	ldrb	r5, [r4, #0]
   25d54:	405d      	eors	r5, r3
   25d56:	78a3      	ldrb	r3, [r4, #2]
   25d58:	405d      	eors	r5, r3
   25d5a:	4045      	eors	r5, r0
   25d5c:	78e0      	ldrb	r0, [r4, #3]
   25d5e:	f7ff f849 	bl	24df4 <_double_byte>
   25d62:	b2ed      	uxtb	r5, r5
   25d64:	4068      	eors	r0, r5
   25d66:	70f0      	strb	r0, [r6, #3]
}
   25d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025d6a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   25d6a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   25d6c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   25d6e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   25d70:	f912 3b10 	ldrsb.w	r3, [r2], #16
   25d74:	2b00      	cmp	r3, #0
   25d76:	bfb4      	ite	lt
   25d78:	2387      	movlt	r3, #135	; 0x87
   25d7a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   25d7c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   25d80:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   25d84:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   25d86:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   25d8a:	d002      	beq.n	25d92 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   25d8c:	7813      	ldrb	r3, [r2, #0]
   25d8e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   25d90:	e7f4      	b.n	25d7c <gf_double+0x12>
	}
}
   25d92:	bd10      	pop	{r4, pc}

00025d94 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   25d94:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   25d96:	b120      	cbz	r0, 25da2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   25d98:	2258      	movs	r2, #88	; 0x58
   25d9a:	2100      	movs	r1, #0
   25d9c:	f7ff f828 	bl	24df0 <_set>
   25da0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   25da2:	bd08      	pop	{r3, pc}

00025da4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   25da4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   25da6:	4604      	mov	r4, r0
   25da8:	b188      	cbz	r0, 25dce <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   25daa:	2210      	movs	r2, #16
   25dac:	2100      	movs	r1, #0
   25dae:	f7ff f81f 	bl	24df0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   25db2:	2210      	movs	r2, #16
   25db4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25db8:	2100      	movs	r1, #0
   25dba:	f7ff f819 	bl	24df0 <_set>
	s->leftover_offset = 0;
   25dbe:	2300      	movs	r3, #0
   25dc0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   25dc2:	2200      	movs	r2, #0
   25dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   25dc8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   25dcc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   25dce:	bd10      	pop	{r4, pc}

00025dd0 <tc_cmac_setup>:
{
   25dd0:	b570      	push	{r4, r5, r6, lr}
   25dd2:	460d      	mov	r5, r1
   25dd4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   25dd6:	4604      	mov	r4, r0
   25dd8:	b310      	cbz	r0, 25e20 <tc_cmac_setup+0x50>
   25dda:	b311      	cbz	r1, 25e22 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   25ddc:	2258      	movs	r2, #88	; 0x58
   25dde:	2100      	movs	r1, #0
   25de0:	f7ff f806 	bl	24df0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   25de4:	4629      	mov	r1, r5
	s->sched = sched;
   25de6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   25de8:	4630      	mov	r0, r6
   25dea:	f7e0 fa2b 	bl	6244 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   25dee:	2210      	movs	r2, #16
   25df0:	2100      	movs	r1, #0
   25df2:	4620      	mov	r0, r4
   25df4:	f7fe fffc 	bl	24df0 <_set>
	gf_double (s->K1, s->iv);
   25df8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   25dfc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25dfe:	4621      	mov	r1, r4
   25e00:	4620      	mov	r0, r4
   25e02:	f7e0 fa75 	bl	62f0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   25e06:	4621      	mov	r1, r4
   25e08:	4628      	mov	r0, r5
   25e0a:	f7ff ffae 	bl	25d6a <gf_double>
	gf_double (s->K2, s->K1);
   25e0e:	4629      	mov	r1, r5
   25e10:	f104 0020 	add.w	r0, r4, #32
   25e14:	f7ff ffa9 	bl	25d6a <gf_double>
	tc_cmac_init(s);
   25e18:	4620      	mov	r0, r4
   25e1a:	f7ff ffc3 	bl	25da4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   25e1e:	2001      	movs	r0, #1
}
   25e20:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   25e22:	4608      	mov	r0, r1
   25e24:	e7fc      	b.n	25e20 <tc_cmac_setup+0x50>

00025e26 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   25e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e2a:	460d      	mov	r5, r1
   25e2c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   25e2e:	4604      	mov	r4, r0
   25e30:	2800      	cmp	r0, #0
   25e32:	d060      	beq.n	25ef6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   25e34:	b912      	cbnz	r2, 25e3c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   25e36:	2001      	movs	r0, #1
}
   25e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   25e3c:	2900      	cmp	r1, #0
   25e3e:	d05a      	beq.n	25ef6 <tc_cmac_update+0xd0>
	if (s->countdown == 0) {
   25e40:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   25e44:	ea50 0301 	orrs.w	r3, r0, r1
   25e48:	d055      	beq.n	25ef6 <tc_cmac_update+0xd0>
	s->countdown--;
   25e4a:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   25e4e:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   25e52:	f141 33ff 	adc.w	r3, r1, #4294967295
   25e56:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   25e5a:	f1b8 0f00 	cmp.w	r8, #0
   25e5e:	d029      	beq.n	25eb4 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   25e60:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   25e64:	f108 0030 	add.w	r0, r8, #48	; 0x30
   25e68:	42be      	cmp	r6, r7
   25e6a:	4420      	add	r0, r4
   25e6c:	d208      	bcs.n	25e80 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   25e6e:	4633      	mov	r3, r6
   25e70:	4631      	mov	r1, r6
   25e72:	462a      	mov	r2, r5
   25e74:	f7fe ffaf 	bl	24dd6 <_copy>
			s->leftover_offset += data_length;
   25e78:	6c63      	ldr	r3, [r4, #68]	; 0x44
   25e7a:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   25e7c:	6466      	str	r6, [r4, #68]	; 0x44
   25e7e:	e7da      	b.n	25e36 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   25e80:	463b      	mov	r3, r7
   25e82:	462a      	mov	r2, r5
   25e84:	4639      	mov	r1, r7
   25e86:	f7fe ffa6 	bl	24dd6 <_copy>
		data_length -= remaining_space;
   25e8a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   25e8c:	2300      	movs	r3, #0
   25e8e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   25e90:	4446      	add	r6, r8
		data += remaining_space;
   25e92:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25e94:	1e63      	subs	r3, r4, #1
   25e96:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
   25e9a:	785a      	ldrb	r2, [r3, #1]
   25e9c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
   25ea0:	404a      	eors	r2, r1
   25ea2:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25ea6:	4283      	cmp	r3, r0
   25ea8:	d1f7      	bne.n	25e9a <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25eaa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25eac:	4621      	mov	r1, r4
   25eae:	4620      	mov	r0, r4
   25eb0:	f7e0 fa1e 	bl	62f0 <tc_aes_encrypt>
   25eb4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   25eb8:	2e10      	cmp	r6, #16
   25eba:	d809      	bhi.n	25ed0 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   25ebc:	2e00      	cmp	r6, #0
   25ebe:	d0ba      	beq.n	25e36 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   25ec0:	4633      	mov	r3, r6
   25ec2:	462a      	mov	r2, r5
   25ec4:	4631      	mov	r1, r6
   25ec6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   25eca:	f7fe ff84 	bl	24dd6 <_copy>
   25ece:	e7d5      	b.n	25e7c <tc_cmac_update+0x56>
   25ed0:	1e63      	subs	r3, r4, #1
   25ed2:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   25ed4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   25ed8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25edc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   25ede:	ea82 0200 	eor.w	r2, r2, r0
   25ee2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25ee4:	d1f6      	bne.n	25ed4 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   25ee6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25ee8:	4621      	mov	r1, r4
   25eea:	4620      	mov	r0, r4
   25eec:	f7e0 fa00 	bl	62f0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   25ef0:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   25ef2:	3e10      	subs	r6, #16
   25ef4:	e7e0      	b.n	25eb8 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   25ef6:	2000      	movs	r0, #0
   25ef8:	e79e      	b.n	25e38 <tc_cmac_update+0x12>

00025efa <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   25efa:	b570      	push	{r4, r5, r6, lr}
   25efc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   25efe:	4605      	mov	r5, r0
   25f00:	b1e8      	cbz	r0, 25f3e <tc_cmac_final+0x44>
   25f02:	b369      	cbz	r1, 25f60 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   25f04:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   25f06:	2a10      	cmp	r2, #16
   25f08:	d11a      	bne.n	25f40 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   25f0a:	f101 0210 	add.w	r2, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25f0e:	1e61      	subs	r1, r4, #1
   25f10:	3a01      	subs	r2, #1
   25f12:	f104 060f 	add.w	r6, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   25f16:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
   25f1a:	784b      	ldrb	r3, [r1, #1]
   25f1c:	4043      	eors	r3, r0
   25f1e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   25f22:	4043      	eors	r3, r0
   25f24:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   25f28:	428e      	cmp	r6, r1
   25f2a:	d1f4      	bne.n	25f16 <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   25f2c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   25f2e:	4621      	mov	r1, r4
   25f30:	4628      	mov	r0, r5
   25f32:	f7e0 f9dd 	bl	62f0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   25f36:	4620      	mov	r0, r4
   25f38:	f7ff ff2c 	bl	25d94 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   25f3c:	2001      	movs	r0, #1
}
   25f3e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   25f40:	f102 0030 	add.w	r0, r2, #48	; 0x30
   25f44:	2100      	movs	r1, #0
   25f46:	f1c2 0210 	rsb	r2, r2, #16
   25f4a:	4420      	add	r0, r4
   25f4c:	f7fe ff50 	bl	24df0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   25f50:	6c63      	ldr	r3, [r4, #68]	; 0x44
   25f52:	4423      	add	r3, r4
   25f54:	2280      	movs	r2, #128	; 0x80
   25f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   25f5a:	f104 0220 	add.w	r2, r4, #32
   25f5e:	e7d6      	b.n	25f0e <tc_cmac_final+0x14>
		return TC_CRYPTO_FAIL;
   25f60:	4608      	mov	r0, r1
   25f62:	e7ec      	b.n	25f3e <tc_cmac_final+0x44>

00025f64 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   25f64:	2100      	movs	r1, #0
   25f66:	2001      	movs	r0, #1
   25f68:	f7e0 bb5a 	b.w	6620 <z_arm_fatal_error>

00025f6c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   25f6c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   25f6e:	6800      	ldr	r0, [r0, #0]
   25f70:	f7e0 bb56 	b.w	6620 <z_arm_fatal_error>

00025f74 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   25f74:	b508      	push	{r3, lr}
	handler();
   25f76:	f7e0 fb81 	bl	667c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   25f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   25f7e:	f7e0 bdd9 	b.w	6b34 <z_arm_exc_exit>

00025f82 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   25f82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25f86:	4684      	mov	ip, r0
   25f88:	460f      	mov	r7, r1
	register const char *s = nptr;
   25f8a:	4605      	mov	r5, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   25f8c:	462c      	mov	r4, r5
   25f8e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   25f92:	2b20      	cmp	r3, #32
   25f94:	d036      	beq.n	26004 <strtol+0x82>
   25f96:	f1a3 0109 	sub.w	r1, r3, #9
   25f9a:	2904      	cmp	r1, #4
   25f9c:	d932      	bls.n	26004 <strtol+0x82>
	} while (isspace(c));
	if (c == '-') {
   25f9e:	2b2d      	cmp	r3, #45	; 0x2d
   25fa0:	d132      	bne.n	26008 <strtol+0x86>
		neg = 1;
		c = *s++;
   25fa2:	786b      	ldrb	r3, [r5, #1]
   25fa4:	1cac      	adds	r4, r5, #2
		neg = 1;
   25fa6:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   25fa8:	2a00      	cmp	r2, #0
   25faa:	d05c      	beq.n	26066 <strtol+0xe4>
   25fac:	2a10      	cmp	r2, #16
   25fae:	d109      	bne.n	25fc4 <strtol+0x42>
   25fb0:	2b30      	cmp	r3, #48	; 0x30
   25fb2:	d107      	bne.n	25fc4 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   25fb4:	7823      	ldrb	r3, [r4, #0]
   25fb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   25fba:	2b58      	cmp	r3, #88	; 0x58
   25fbc:	d14e      	bne.n	2605c <strtol+0xda>
		c = s[1];
   25fbe:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   25fc0:	2210      	movs	r2, #16
		s += 2;
   25fc2:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   25fc4:	2900      	cmp	r1, #0
   25fc6:	bf14      	ite	ne
   25fc8:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
   25fcc:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   25fd0:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   25fd2:	fbb8 fef2 	udiv	lr, r8, r2
	for (acc = 0, any = 0;; c = *s++) {
   25fd6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   25fd8:	fb02 891e 	mls	r9, r2, lr, r8
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   25fdc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   25fe0:	2d09      	cmp	r5, #9
   25fe2:	d817      	bhi.n	26014 <strtol+0x92>
			c -= '0';
   25fe4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   25fe6:	429a      	cmp	r2, r3
   25fe8:	dd24      	ble.n	26034 <strtol+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   25fea:	1c75      	adds	r5, r6, #1
   25fec:	d007      	beq.n	25ffe <strtol+0x7c>
   25fee:	4570      	cmp	r0, lr
   25ff0:	d81d      	bhi.n	2602e <strtol+0xac>
   25ff2:	d101      	bne.n	25ff8 <strtol+0x76>
   25ff4:	454b      	cmp	r3, r9
   25ff6:	dc1a      	bgt.n	2602e <strtol+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   25ff8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   25ffc:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   25ffe:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   26002:	e7eb      	b.n	25fdc <strtol+0x5a>
{
   26004:	4625      	mov	r5, r4
   26006:	e7c1      	b.n	25f8c <strtol+0xa>
	} else if (c == '+') {
   26008:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2600a:	bf04      	itt	eq
   2600c:	1cac      	addeq	r4, r5, #2
   2600e:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   26010:	2100      	movs	r1, #0
   26012:	e7c9      	b.n	25fa8 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   26014:	f043 0520 	orr.w	r5, r3, #32
   26018:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2601a:	2d19      	cmp	r5, #25
   2601c:	d80a      	bhi.n	26034 <strtol+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2601e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   26022:	2d1a      	cmp	r5, #26
   26024:	bf34      	ite	cc
   26026:	2537      	movcc	r5, #55	; 0x37
   26028:	2557      	movcs	r5, #87	; 0x57
   2602a:	1b5b      	subs	r3, r3, r5
   2602c:	e7db      	b.n	25fe6 <strtol+0x64>
			any = -1;
   2602e:	f04f 36ff 	mov.w	r6, #4294967295
   26032:	e7e4      	b.n	25ffe <strtol+0x7c>
		}
	}

	if (any < 0) {
   26034:	1c73      	adds	r3, r6, #1
   26036:	d107      	bne.n	26048 <strtol+0xc6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26038:	f7fa f8f6 	bl	20228 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2603c:	2326      	movs	r3, #38	; 0x26
   2603e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   26040:	4640      	mov	r0, r8
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   26042:	b937      	cbnz	r7, 26052 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   26044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   26048:	b101      	cbz	r1, 2604c <strtol+0xca>
		acc = -acc;
   2604a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2604c:	2f00      	cmp	r7, #0
   2604e:	d0f9      	beq.n	26044 <strtol+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   26050:	b10e      	cbz	r6, 26056 <strtol+0xd4>
   26052:	f104 3cff 	add.w	ip, r4, #4294967295
   26056:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   2605a:	e7f3      	b.n	26044 <strtol+0xc2>
	if (base == 0) {
   2605c:	2330      	movs	r3, #48	; 0x30
   2605e:	2a00      	cmp	r2, #0
   26060:	d1b0      	bne.n	25fc4 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   26062:	2208      	movs	r2, #8
   26064:	e7ae      	b.n	25fc4 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   26066:	2b30      	cmp	r3, #48	; 0x30
   26068:	d0a4      	beq.n	25fb4 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   2606a:	220a      	movs	r2, #10
   2606c:	e7aa      	b.n	25fc4 <strtol+0x42>

0002606e <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2606e:	3901      	subs	r1, #1
   26070:	4603      	mov	r3, r0
   26072:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26076:	b90a      	cbnz	r2, 2607c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   26078:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2607a:	4770      	bx	lr
		*d = *s;
   2607c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   26080:	e7f7      	b.n	26072 <strcpy+0x4>

00026082 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   26082:	2300      	movs	r3, #0

	while (*s != '\0') {
   26084:	5cc2      	ldrb	r2, [r0, r3]
   26086:	b90a      	cbnz	r2, 2608c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   26088:	4618      	mov	r0, r3
   2608a:	4770      	bx	lr
		n++;
   2608c:	3301      	adds	r3, #1
   2608e:	e7f9      	b.n	26084 <strlen+0x2>

00026090 <strnlen>:
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
	size_t n = 0;
   26090:	2300      	movs	r3, #0

	while (*s != '\0' && n < maxlen) {
   26092:	5cc2      	ldrb	r2, [r0, r3]
   26094:	b10a      	cbz	r2, 2609a <strnlen+0xa>
   26096:	428b      	cmp	r3, r1
   26098:	d101      	bne.n	2609e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2609a:	4618      	mov	r0, r3
   2609c:	4770      	bx	lr
		n++;
   2609e:	3301      	adds	r3, #1
   260a0:	e7f7      	b.n	26092 <strnlen+0x2>

000260a2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   260a2:	3801      	subs	r0, #1
   260a4:	3901      	subs	r1, #1
   260a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   260aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   260ae:	4293      	cmp	r3, r2
   260b0:	d101      	bne.n	260b6 <strcmp+0x14>
   260b2:	2b00      	cmp	r3, #0
   260b4:	d1f7      	bne.n	260a6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   260b6:	1a98      	subs	r0, r3, r2
   260b8:	4770      	bx	lr

000260ba <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   260ba:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   260bc:	2400      	movs	r4, #0
   260be:	42a2      	cmp	r2, r4
   260c0:	d008      	beq.n	260d4 <strncmp+0x1a>
   260c2:	5d03      	ldrb	r3, [r0, r4]
   260c4:	5d0d      	ldrb	r5, [r1, r4]
   260c6:	42ab      	cmp	r3, r5
   260c8:	d102      	bne.n	260d0 <strncmp+0x16>
   260ca:	3401      	adds	r4, #1
   260cc:	2b00      	cmp	r3, #0
   260ce:	d1f6      	bne.n	260be <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   260d0:	1b58      	subs	r0, r3, r5
   260d2:	e000      	b.n	260d6 <strncmp+0x1c>
   260d4:	2000      	movs	r0, #0
}
   260d6:	bd30      	pop	{r4, r5, pc}

000260d8 <strcat>:

	return start;
}

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   260d8:	b510      	push	{r4, lr}
   260da:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   260dc:	f7ff ffd1 	bl	26082 <strlen>
   260e0:	4420      	add	r0, r4
   260e2:	f7ff ffc4 	bl	2606e <strcpy>
	return dest;
}
   260e6:	4620      	mov	r0, r4
   260e8:	bd10      	pop	{r4, pc}

000260ea <strncat>:

char *strncat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src,
	      size_t n)
{
   260ea:	b538      	push	{r3, r4, r5, lr}
   260ec:	4605      	mov	r5, r0
   260ee:	4614      	mov	r4, r2
	char *orig_dest = dest;
	size_t len = strlen(dest);
   260f0:	f7ff ffc7 	bl	26082 <strlen>

	dest += len;
   260f4:	4428      	add	r0, r5
	while ((n-- > 0) && (*src != '\0')) {
   260f6:	3901      	subs	r1, #1
   260f8:	4404      	add	r4, r0
   260fa:	42a0      	cmp	r0, r4
   260fc:	d002      	beq.n	26104 <strncat+0x1a>
   260fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   26102:	b91b      	cbnz	r3, 2610c <strncat+0x22>
		*dest++ = *src++;
	}
	*dest = '\0';
   26104:	2300      	movs	r3, #0
   26106:	7003      	strb	r3, [r0, #0]

	return orig_dest;
}
   26108:	4628      	mov	r0, r5
   2610a:	bd38      	pop	{r3, r4, r5, pc}
		*dest++ = *src++;
   2610c:	f800 3b01 	strb.w	r3, [r0], #1
   26110:	e7f3      	b.n	260fa <strncat+0x10>

00026112 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   26112:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   26114:	b15a      	cbz	r2, 2612e <memcmp+0x1c>
   26116:	3901      	subs	r1, #1
   26118:	1884      	adds	r4, r0, r2
   2611a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2611e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   26122:	42a0      	cmp	r0, r4
   26124:	d001      	beq.n	2612a <memcmp+0x18>
   26126:	429a      	cmp	r2, r3
   26128:	d0f7      	beq.n	2611a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2612a:	1ad0      	subs	r0, r2, r3
}
   2612c:	bd10      	pop	{r4, pc}
		return 0;
   2612e:	4610      	mov	r0, r2
   26130:	e7fc      	b.n	2612c <memcmp+0x1a>

00026132 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   26132:	1a43      	subs	r3, r0, r1
   26134:	4293      	cmp	r3, r2
{
   26136:	b510      	push	{r4, lr}
   26138:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2613c:	d308      	bcc.n	26150 <memmove+0x1e>
   2613e:	3901      	subs	r1, #1
	char *dest = d;
   26140:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   26142:	429a      	cmp	r2, r3
   26144:	d00b      	beq.n	2615e <memmove+0x2c>
			*dest = *src;
   26146:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2614a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2614e:	e7f8      	b.n	26142 <memmove+0x10>
   26150:	440a      	add	r2, r1
			dest[n] = src[n];
   26152:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   26156:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2615a:	428a      	cmp	r2, r1
   2615c:	d1f9      	bne.n	26152 <memmove+0x20>
		}
	}

	return d;
}
   2615e:	bd10      	pop	{r4, pc}

00026160 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   26160:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   26162:	ea81 0400 	eor.w	r4, r1, r0
   26166:	07a5      	lsls	r5, r4, #30
   26168:	4603      	mov	r3, r0
   2616a:	d00b      	beq.n	26184 <memcpy+0x24>
   2616c:	3b01      	subs	r3, #1
   2616e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   26170:	4291      	cmp	r1, r2
   26172:	d11a      	bne.n	261aa <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   26174:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   26176:	2a00      	cmp	r2, #0
   26178:	d0fc      	beq.n	26174 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   2617a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2617e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   26182:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   26184:	079c      	lsls	r4, r3, #30
   26186:	d1f6      	bne.n	26176 <memcpy+0x16>
   26188:	0895      	lsrs	r5, r2, #2
   2618a:	00ac      	lsls	r4, r5, #2
   2618c:	1f1e      	subs	r6, r3, #4
   2618e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   26190:	42b9      	cmp	r1, r7
   26192:	d105      	bne.n	261a0 <memcpy+0x40>
   26194:	f06f 0603 	mvn.w	r6, #3
   26198:	fb06 2205 	mla	r2, r6, r5, r2
   2619c:	4423      	add	r3, r4
   2619e:	e7e5      	b.n	2616c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   261a0:	f851 cb04 	ldr.w	ip, [r1], #4
   261a4:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
   261a8:	e7f2      	b.n	26190 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
   261aa:	f811 4b01 	ldrb.w	r4, [r1], #1
   261ae:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   261b2:	e7dd      	b.n	26170 <memcpy+0x10>

000261b4 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   261b4:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   261b6:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   261b8:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   261ba:	079c      	lsls	r4, r3, #30
   261bc:	d110      	bne.n	261e0 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   261be:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   261c2:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   261c6:	0894      	lsrs	r4, r2, #2
   261c8:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   261cc:	42b3      	cmp	r3, r6
   261ce:	d10d      	bne.n	261ec <memset+0x38>
   261d0:	f06f 0503 	mvn.w	r5, #3
   261d4:	fb05 2404 	mla	r4, r5, r4, r2
   261d8:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   261da:	42a3      	cmp	r3, r4
   261dc:	d109      	bne.n	261f2 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   261de:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   261e0:	2a00      	cmp	r2, #0
   261e2:	d0fc      	beq.n	261de <memset+0x2a>
		*(d_byte++) = c_byte;
   261e4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   261e8:	3a01      	subs	r2, #1
   261ea:	e7e6      	b.n	261ba <memset+0x6>
		*(d_word++) = c_word;
   261ec:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   261f0:	e7ec      	b.n	261cc <memset+0x18>
		*(d_byte++) = c_byte;
   261f2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   261f6:	e7f0      	b.n	261da <memset+0x26>

000261f8 <_stdout_hook_default>:
}
   261f8:	f04f 30ff 	mov.w	r0, #4294967295
   261fc:	4770      	bx	lr

000261fe <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   261fe:	f7e0 bde1 	b.w	6dc4 <z_impl_zephyr_fputc>

00026202 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   26202:	f7f9 b9c7 	b.w	1f594 <SystemInit>

00026206 <pm_power_state_set>:
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(enum power_states state)
{
	switch (state) {
   26206:	b940      	cbnz	r0, 2621a <pm_power_state_set+0x14>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   26208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2620c:	2201      	movs	r2, #1
   2620e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26212:	f3bf 8f4f 	dsb	sy
        __WFE();
   26216:	bf20      	wfe
   26218:	e7fd      	b.n	26216 <pm_power_state_set+0x10>
#endif
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2621a:	4770      	bx	lr

0002621c <pm_power_state_exit_post_ops>:
   2621c:	2300      	movs	r3, #0
   2621e:	f383 8811 	msr	BASEPRI, r3
   26222:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26226:	4770      	bx	lr

00026228 <send_cmd_status>:
{
   26228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2622c:	f04f 32ff 	mov.w	r2, #4294967295
{
   26230:	4680      	mov	r8, r0
   26232:	460f      	mov	r7, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26234:	f04f 33ff 	mov.w	r3, #4294967295
   26238:	2100      	movs	r1, #0
   2623a:	200f      	movs	r0, #15
   2623c:	f7e1 f9e8 	bl	7610 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   26240:	2501      	movs	r5, #1
	return net_buf_simple_add(&buf->b, len);
   26242:	f100 0608 	add.w	r6, r0, #8
   26246:	4604      	mov	r4, r0
   26248:	7505      	strb	r5, [r0, #20]
   2624a:	2102      	movs	r1, #2
   2624c:	4630      	mov	r0, r6
   2624e:	f7f7 faa3 	bl	1d798 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26252:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   26254:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26256:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   26258:	7041      	strb	r1, [r0, #1]
   2625a:	4630      	mov	r0, r6
   2625c:	f7f7 fa9c 	bl	1d798 <net_buf_simple_add>
	evt->ncmd = 1U;
   26260:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   26262:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   26264:	f8a0 8002 	strh.w	r8, [r0, #2]
		bt_recv_prio(buf);
   26268:	4620      	mov	r0, r4
}
   2626a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   2626e:	f7e2 bb05 	b.w	887c <bt_recv_prio>

00026272 <default_CSPRNG>:
{
   26272:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   26274:	f002 fd5a 	bl	28d2c <bt_rand>
}
   26278:	fab0 f080 	clz	r0, r0
   2627c:	0940      	lsrs	r0, r0, #5
   2627e:	bd08      	pop	{r3, pc}

00026280 <bt_settings_decode_key>:
{
   26280:	b570      	push	{r4, r5, r6, lr}
   26282:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   26284:	2100      	movs	r1, #0
{
   26286:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   26288:	f7fe fc3c 	bl	24b04 <settings_name_next>
   2628c:	280d      	cmp	r0, #13
   2628e:	d118      	bne.n	262c2 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   26290:	7b23      	ldrb	r3, [r4, #12]
   26292:	2b30      	cmp	r3, #48	; 0x30
   26294:	d111      	bne.n	262ba <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   26296:	2300      	movs	r3, #0
   26298:	702b      	strb	r3, [r5, #0]
   2629a:	f104 060c 	add.w	r6, r4, #12
   2629e:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   262a0:	462a      	mov	r2, r5
   262a2:	4620      	mov	r0, r4
   262a4:	2301      	movs	r3, #1
   262a6:	2102      	movs	r1, #2
   262a8:	3402      	adds	r4, #2
   262aa:	f7fd ff65 	bl	24178 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   262ae:	42b4      	cmp	r4, r6
   262b0:	f105 35ff 	add.w	r5, r5, #4294967295
   262b4:	d1f4      	bne.n	262a0 <bt_settings_decode_key+0x20>
	return 0;
   262b6:	2000      	movs	r0, #0
}
   262b8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   262ba:	2b31      	cmp	r3, #49	; 0x31
   262bc:	d101      	bne.n	262c2 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   262be:	2301      	movs	r3, #1
   262c0:	e7ea      	b.n	26298 <bt_settings_decode_key+0x18>
		return -EINVAL;
   262c2:	f06f 0015 	mvn.w	r0, #21
   262c6:	e7f7      	b.n	262b8 <bt_settings_decode_key+0x38>

000262c8 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   262c8:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   262ca:	780b      	ldrb	r3, [r1, #0]
   262cc:	7814      	ldrb	r4, [r2, #0]
   262ce:	4063      	eors	r3, r4
   262d0:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   262d2:	7854      	ldrb	r4, [r2, #1]
   262d4:	784b      	ldrb	r3, [r1, #1]
   262d6:	4063      	eors	r3, r4
   262d8:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   262da:	7894      	ldrb	r4, [r2, #2]
   262dc:	788b      	ldrb	r3, [r1, #2]
   262de:	4063      	eors	r3, r4
   262e0:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   262e2:	78d4      	ldrb	r4, [r2, #3]
   262e4:	78cb      	ldrb	r3, [r1, #3]
   262e6:	4063      	eors	r3, r4
   262e8:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   262ea:	7914      	ldrb	r4, [r2, #4]
   262ec:	790b      	ldrb	r3, [r1, #4]
   262ee:	4063      	eors	r3, r4
   262f0:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   262f2:	7954      	ldrb	r4, [r2, #5]
   262f4:	794b      	ldrb	r3, [r1, #5]
   262f6:	4063      	eors	r3, r4
   262f8:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   262fa:	7994      	ldrb	r4, [r2, #6]
   262fc:	798b      	ldrb	r3, [r1, #6]
   262fe:	4063      	eors	r3, r4
   26300:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   26302:	79d4      	ldrb	r4, [r2, #7]
   26304:	79cb      	ldrb	r3, [r1, #7]
   26306:	4063      	eors	r3, r4
   26308:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   2630a:	7a14      	ldrb	r4, [r2, #8]
   2630c:	7a0b      	ldrb	r3, [r1, #8]
   2630e:	4063      	eors	r3, r4
   26310:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   26312:	7a54      	ldrb	r4, [r2, #9]
   26314:	7a4b      	ldrb	r3, [r1, #9]
   26316:	4063      	eors	r3, r4
   26318:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   2631a:	7a8b      	ldrb	r3, [r1, #10]
   2631c:	7a94      	ldrb	r4, [r2, #10]
   2631e:	4063      	eors	r3, r4
   26320:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   26322:	7ad4      	ldrb	r4, [r2, #11]
   26324:	7acb      	ldrb	r3, [r1, #11]
   26326:	4063      	eors	r3, r4
   26328:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   2632a:	7b14      	ldrb	r4, [r2, #12]
   2632c:	7b0b      	ldrb	r3, [r1, #12]
   2632e:	4063      	eors	r3, r4
   26330:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   26332:	7b54      	ldrb	r4, [r2, #13]
   26334:	7b4b      	ldrb	r3, [r1, #13]
   26336:	4063      	eors	r3, r4
   26338:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   2633a:	7b94      	ldrb	r4, [r2, #14]
   2633c:	7b8b      	ldrb	r3, [r1, #14]
   2633e:	4063      	eors	r3, r4
   26340:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   26342:	7bcb      	ldrb	r3, [r1, #15]
   26344:	7bd2      	ldrb	r2, [r2, #15]
   26346:	4053      	eors	r3, r2
   26348:	73c3      	strb	r3, [r0, #15]
}
   2634a:	bd10      	pop	{r4, pc}

0002634c <ccm_crypt>:
	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
		     const uint8_t *in_msg, uint8_t *out_msg, size_t msg_len)
{
   2634c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26350:	b089      	sub	sp, #36	; 0x24
   26352:	4698      	mov	r8, r3
   26354:	9d12      	ldr	r5, [sp, #72]	; 0x48
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   26356:	2301      	movs	r3, #1
	blk_cnt = (msg_len + 15) / 16;
   26358:	f105 060f 	add.w	r6, r5, #15
{
   2635c:	4681      	mov	r9, r0
		last_blk = 16U;
   2635e:	f015 050f 	ands.w	r5, r5, #15
{
   26362:	4617      	mov	r7, r2
	memcpy(&a_i[1], nonce, 13);
   26364:	eb0d 0003 	add.w	r0, sp, r3
   26368:	f04f 020d 	mov.w	r2, #13
	blk_cnt = (msg_len + 15) / 16;
   2636c:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   26370:	bf08      	it	eq
   26372:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   26374:	f88d 3000 	strb.w	r3, [sp]
	memcpy(&a_i[1], nonce, 13);
   26378:	f7ff fef2 	bl	26160 <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   2637c:	b2b6      	uxth	r6, r6
   2637e:	2400      	movs	r4, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   26380:	f106 3aff 	add.w	sl, r6, #4294967295
	for (j = 0; j < blk_cnt; j++) {
   26384:	42b4      	cmp	r4, r6
   26386:	d303      	bcc.n	26390 <ccm_crypt+0x44>
				out_msg[(j * 16) + i] =
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
   26388:	2000      	movs	r0, #0
}
   2638a:	b009      	add	sp, #36	; 0x24
   2638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   26390:	f104 0b01 	add.w	fp, r4, #1
   26394:	f3cb 2307 	ubfx	r3, fp, #8, #8
		err = bt_encrypt_be(key, a_i, s_i);
   26398:	aa04      	add	r2, sp, #16
   2639a:	4669      	mov	r1, sp
   2639c:	4648      	mov	r0, r9
   2639e:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   263a2:	f88d b00f 	strb.w	fp, [sp, #15]
   263a6:	f002 fcc3 	bl	28d30 <bt_encrypt_be>
		if (err) {
   263aa:	2800      	cmp	r0, #0
   263ac:	d1ed      	bne.n	2638a <ccm_crypt+0x3e>
		if (j < blk_cnt - 1) {
   263ae:	45a2      	cmp	sl, r4
   263b0:	ea4f 1404 	mov.w	r4, r4, lsl #4
   263b4:	d907      	bls.n	263c6 <ccm_crypt+0x7a>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   263b6:	193a      	adds	r2, r7, r4
   263b8:	a904      	add	r1, sp, #16
   263ba:	eb08 0004 	add.w	r0, r8, r4
   263be:	f7ff ff83 	bl	262c8 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   263c2:	465c      	mov	r4, fp
   263c4:	e7de      	b.n	26384 <ccm_crypt+0x38>
   263c6:	1939      	adds	r1, r7, r4
   263c8:	aa04      	add	r2, sp, #16
   263ca:	4444      	add	r4, r8
					in_msg[(j * 16) + i] ^ s_i[i];
   263cc:	f811 3b01 	ldrb.w	r3, [r1], #1
   263d0:	f812 cb01 	ldrb.w	ip, [r2], #1
			for (i = 0; i < last_blk; i++) {
   263d4:	3001      	adds	r0, #1
				out_msg[(j * 16) + i] =
   263d6:	ea83 030c 	eor.w	r3, r3, ip
			for (i = 0; i < last_blk; i++) {
   263da:	4285      	cmp	r5, r0
				out_msg[(j * 16) + i] =
   263dc:	f804 3b01 	strb.w	r3, [r4], #1
			for (i = 0; i < last_blk; i++) {
   263e0:	d8f4      	bhi.n	263cc <ccm_crypt+0x80>
   263e2:	e7ee      	b.n	263c2 <ccm_crypt+0x76>

000263e4 <ccm_auth>:
{
   263e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263e8:	b091      	sub	sp, #68	; 0x44
		last_blk = 16U;
   263ea:	f013 070f 	ands.w	r7, r3, #15
{
   263ee:	4680      	mov	r8, r0
   263f0:	9201      	str	r2, [sp, #4]
   263f2:	461e      	mov	r6, r3
	memcpy(b + 1, nonce, 13);
   263f4:	f04f 020d 	mov.w	r2, #13
	b[0] = 0x01;
   263f8:	f04f 0301 	mov.w	r3, #1
	memcpy(b + 1, nonce, 13);
   263fc:	f10d 0a10 	add.w	sl, sp, #16
   26400:	f10d 0011 	add.w	r0, sp, #17
	err = bt_encrypt_be(key, b, s0);
   26404:	f10d 0930 	add.w	r9, sp, #48	; 0x30
		last_blk = 16U;
   26408:	bf08      	it	eq
   2640a:	2710      	moveq	r7, #16
	b[0] = 0x01;
   2640c:	f88d 3010 	strb.w	r3, [sp, #16]
{
   26410:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
	memcpy(b + 1, nonce, 13);
   26412:	f7ff fea5 	bl	26160 <memcpy>
	dst[0] = val >> 8;
   26416:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   26418:	464a      	mov	r2, r9
   2641a:	4651      	mov	r1, sl
   2641c:	4640      	mov	r0, r8
   2641e:	f8ad 301e 	strh.w	r3, [sp, #30]
   26422:	f002 fc85 	bl	28d30 <bt_encrypt_be>
	if (err) {
   26426:	4605      	mov	r5, r0
   26428:	2800      	cmp	r0, #0
   2642a:	d165      	bne.n	264f8 <ccm_auth+0x114>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   2642c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2642e:	f88d 001e 	strb.w	r0, [sp, #30]
   26432:	3b02      	subs	r3, #2
   26434:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   26438:	ea4f 0383 	mov.w	r3, r3, lsl #2
   2643c:	bf14      	ite	ne
   2643e:	2240      	movne	r2, #64	; 0x40
   26440:	2200      	moveq	r2, #0
   26442:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   26446:	4313      	orrs	r3, r2
	err = bt_encrypt_be(key, b, X0);
   26448:	f10d 0b20 	add.w	fp, sp, #32
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   2644c:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   26450:	465a      	mov	r2, fp
   26452:	4651      	mov	r1, sl
   26454:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   26456:	f88d 3010 	strb.w	r3, [sp, #16]
	dst[1] = val;
   2645a:	f88d 601f 	strb.w	r6, [sp, #31]
	err = bt_encrypt_be(key, b, X0);
   2645e:	f002 fc67 	bl	28d30 <bt_encrypt_be>
	if (err) {
   26462:	4603      	mov	r3, r0
   26464:	bbb8      	cbnz	r0, 264d6 <ccm_auth+0xf2>
	if (aad_len) {
   26466:	b3b4      	cbz	r4, 264d6 <ccm_auth+0xf2>
			b[i] = X0[i] ^ b[i];
   26468:	f89d 2020 	ldrb.w	r2, [sp, #32]
   2646c:	f88d 2010 	strb.w	r2, [sp, #16]
   26470:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   26474:	4062      	eors	r2, r4
		aad_len += sizeof(uint16_t);
   26476:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   26478:	f88d 2011 	strb.w	r2, [sp, #17]
		aad_len += sizeof(uint16_t);
   2647c:	b2e4      	uxtb	r4, r4
   2647e:	2002      	movs	r0, #2
   26480:	9a1a      	ldr	r2, [sp, #104]	; 0x68
		while (aad_len > 16) {
   26482:	2c10      	cmp	r4, #16
   26484:	441a      	add	r2, r3
   26486:	d80b      	bhi.n	264a0 <ccm_auth+0xbc>
   26488:	4613      	mov	r3, r2
   2648a:	aa08      	add	r2, sp, #32
		for (; i < aad_len; i++, j++) {
   2648c:	42a0      	cmp	r0, r4
   2648e:	4621      	mov	r1, r4
   26490:	db36      	blt.n	26500 <ccm_auth+0x11c>
		for (i = aad_len; i < 16; i++) {
   26492:	290f      	cmp	r1, #15
   26494:	dd40      	ble.n	26518 <ccm_auth+0x134>
		err = bt_encrypt_be(key, b, X0);
   26496:	a904      	add	r1, sp, #16
   26498:	4640      	mov	r0, r8
   2649a:	f002 fc49 	bl	28d30 <bt_encrypt_be>
		if (err) {
   2649e:	e01a      	b.n	264d6 <ccm_auth+0xf2>
		while (aad_len > 16) {
   264a0:	4601      	mov	r1, r0
				b[i] = X0[i] ^ aad[j];
   264a2:	f811 e00b 	ldrb.w	lr, [r1, fp]
   264a6:	f812 cb01 	ldrb.w	ip, [r2], #1
   264aa:	ea8c 0c0e 	eor.w	ip, ip, lr
   264ae:	f801 c00a 	strb.w	ip, [r1, sl]
				i++, j++;
   264b2:	3101      	adds	r1, #1
			} while (i < 16);
   264b4:	2910      	cmp	r1, #16
   264b6:	d1f4      	bne.n	264a2 <ccm_auth+0xbe>
   264b8:	f1c0 0010 	rsb	r0, r0, #16
   264bc:	4403      	add	r3, r0
			err = bt_encrypt_be(key, b, X0);
   264be:	465a      	mov	r2, fp
   264c0:	4651      	mov	r1, sl
   264c2:	4640      	mov	r0, r8
   264c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   264c8:	f002 fc32 	bl	28d30 <bt_encrypt_be>
   264cc:	3c10      	subs	r4, #16
   264ce:	b2e4      	uxtb	r4, r4
			if (err) {
   264d0:	9b02      	ldr	r3, [sp, #8]
   264d2:	2800      	cmp	r0, #0
   264d4:	d0d4      	beq.n	26480 <ccm_auth+0x9c>
	blk_cnt = (msg_len + 15) / 16;
   264d6:	f106 040f 	add.w	r4, r6, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   264da:	ab08      	add	r3, sp, #32
   264dc:	f8dd a004 	ldr.w	sl, [sp, #4]
	for (j = 0; j < blk_cnt; j++) {
   264e0:	f3c4 140f 	ubfx	r4, r4, #4, #16
   264e4:	2600      	movs	r6, #0
			memcpy(&b[i], &Xn[i], 16 - i);
   264e6:	eb03 0b07 	add.w	fp, r3, r7
	for (j = 0; j < blk_cnt; j++) {
   264ea:	42b4      	cmp	r4, r6
   264ec:	dc19      	bgt.n	26522 <ccm_auth+0x13e>
	for (i = 0; i < mic_size; i++) {
   264ee:	2300      	movs	r3, #0
		mic[i] = s0[i] ^ Xn[i];
   264f0:	a908      	add	r1, sp, #32
	for (i = 0; i < mic_size; i++) {
   264f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   264f4:	4293      	cmp	r3, r2
   264f6:	d13f      	bne.n	26578 <ccm_auth+0x194>
}
   264f8:	4628      	mov	r0, r5
   264fa:	b011      	add	sp, #68	; 0x44
   264fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[i] = X0[i] ^ aad[j];
   26500:	f812 c000 	ldrb.w	ip, [r2, r0]
   26504:	f813 1b01 	ldrb.w	r1, [r3], #1
   26508:	ea81 010c 	eor.w	r1, r1, ip
   2650c:	f10d 0c10 	add.w	ip, sp, #16
   26510:	f80c 1000 	strb.w	r1, [ip, r0]
		for (; i < aad_len; i++, j++) {
   26514:	3001      	adds	r0, #1
   26516:	e7b9      	b.n	2648c <ccm_auth+0xa8>
			b[i] = X0[i];
   26518:	a804      	add	r0, sp, #16
   2651a:	5c53      	ldrb	r3, [r2, r1]
   2651c:	5443      	strb	r3, [r0, r1]
		for (i = aad_len; i < 16; i++) {
   2651e:	3101      	adds	r1, #1
   26520:	e7b7      	b.n	26492 <ccm_auth+0xae>
		if (j + 1 == blk_cnt) {
   26522:	3601      	adds	r6, #1
   26524:	42a6      	cmp	r6, r4
   26526:	d121      	bne.n	2656c <ccm_auth+0x188>
   26528:	f10d 0c20 	add.w	ip, sp, #32
   2652c:	a904      	add	r1, sp, #16
   2652e:	4650      	mov	r0, sl
			for (i = 0; i < last_blk; i++) {
   26530:	2300      	movs	r3, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   26532:	f81c 2b01 	ldrb.w	r2, [ip], #1
   26536:	f810 eb01 	ldrb.w	lr, [r0], #1
			for (i = 0; i < last_blk; i++) {
   2653a:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   2653c:	ea82 020e 	eor.w	r2, r2, lr
			for (i = 0; i < last_blk; i++) {
   26540:	429f      	cmp	r7, r3
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   26542:	f801 2b01 	strb.w	r2, [r1], #1
			for (i = 0; i < last_blk; i++) {
   26546:	dcf4      	bgt.n	26532 <ccm_auth+0x14e>
			memcpy(&b[i], &Xn[i], 16 - i);
   26548:	ab04      	add	r3, sp, #16
   2654a:	f1c7 0210 	rsb	r2, r7, #16
   2654e:	4659      	mov	r1, fp
   26550:	19d8      	adds	r0, r3, r7
   26552:	f7ff fe05 	bl	26160 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   26556:	aa08      	add	r2, sp, #32
   26558:	a904      	add	r1, sp, #16
   2655a:	4640      	mov	r0, r8
   2655c:	f002 fbe8 	bl	28d30 <bt_encrypt_be>
		if (err) {
   26560:	f10a 0a10 	add.w	sl, sl, #16
   26564:	2800      	cmp	r0, #0
   26566:	d0c0      	beq.n	264ea <ccm_auth+0x106>
		err = bt_encrypt_be(key, b, Xn);
   26568:	4605      	mov	r5, r0
   2656a:	e7c5      	b.n	264f8 <ccm_auth+0x114>
			xor16(b, Xn, &cleartext_msg[j * 16]);
   2656c:	4652      	mov	r2, sl
   2656e:	a908      	add	r1, sp, #32
   26570:	a804      	add	r0, sp, #16
   26572:	f7ff fea9 	bl	262c8 <xor16>
   26576:	e7ee      	b.n	26556 <ccm_auth+0x172>
		mic[i] = s0[i] ^ Xn[i];
   26578:	5c58      	ldrb	r0, [r3, r1]
   2657a:	f819 2003 	ldrb.w	r2, [r9, r3]
   2657e:	4042      	eors	r2, r0
   26580:	981c      	ldr	r0, [sp, #112]	; 0x70
   26582:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < mic_size; i++) {
   26584:	3301      	adds	r3, #1
   26586:	e7b4      	b.n	264f2 <ccm_auth+0x10e>

00026588 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *enc_msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   26588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2658c:	b088      	sub	sp, #32
   2658e:	4681      	mov	r9, r0
   26590:	9f11      	ldr	r7, [sp, #68]	; 0x44
   26592:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   26594:	f5b7 4f7f 	cmp.w	r7, #65280	; 0xff00
{
   26598:	468a      	mov	sl, r1
   2659a:	4690      	mov	r8, r2
   2659c:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   2659e:	d21e      	bcs.n	265de <bt_ccm_decrypt+0x56>
   265a0:	2d10      	cmp	r5, #16
   265a2:	d81c      	bhi.n	265de <bt_ccm_decrypt+0x56>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_msg, out_msg, msg_len);
   265a4:	9300      	str	r3, [sp, #0]
   265a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   265a8:	f7ff fed0 	bl	2634c <ccm_crypt>

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   265ac:	ae04      	add	r6, sp, #16
   265ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   265b0:	9300      	str	r3, [sp, #0]
   265b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   265b4:	9503      	str	r5, [sp, #12]
   265b6:	4623      	mov	r3, r4
   265b8:	4651      	mov	r1, sl
   265ba:	e9cd 7601 	strd	r7, r6, [sp, #4]
   265be:	4648      	mov	r0, r9
   265c0:	f7ff ff10 	bl	263e4 <ccm_auth>

	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   265c4:	462a      	mov	r2, r5
   265c6:	eb08 0104 	add.w	r1, r8, r4
   265ca:	4630      	mov	r0, r6
   265cc:	f7ff fda1 	bl	26112 <memcmp>
   265d0:	2800      	cmp	r0, #0
		return -EBADMSG;
   265d2:	bf18      	it	ne
   265d4:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   265d8:	b008      	add	sp, #32
   265da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   265de:	f06f 0015 	mvn.w	r0, #21
   265e2:	e7f9      	b.n	265d8 <bt_ccm_decrypt+0x50>

000265e4 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   265e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   265e8:	b085      	sub	sp, #20
   265ea:	4691      	mov	r9, r2
   265ec:	e9dd 240d 	ldrd	r2, r4, [sp, #52]	; 0x34
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   265f0:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   265f4:	4607      	mov	r7, r0
   265f6:	4688      	mov	r8, r1
   265f8:	461d      	mov	r5, r3
   265fa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	uint8_t *mic = out_msg + msg_len;
   265fc:	eb04 0c03 	add.w	ip, r4, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   26600:	d214      	bcs.n	2662c <bt_ccm_encrypt+0x48>
   26602:	2e10      	cmp	r6, #16
   26604:	d812      	bhi.n	2662c <bt_ccm_encrypt+0x48>
		return -EINVAL;
	}

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   26606:	9201      	str	r2, [sp, #4]
   26608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2660a:	9200      	str	r2, [sp, #0]
   2660c:	e9cd c602 	strd	ip, r6, [sp, #8]
   26610:	4622      	mov	r2, r4
   26612:	f7ff fee7 	bl	263e4 <ccm_auth>

	ccm_crypt(key, nonce, msg, out_msg, msg_len);
   26616:	9500      	str	r5, [sp, #0]
   26618:	4623      	mov	r3, r4
   2661a:	464a      	mov	r2, r9
   2661c:	4641      	mov	r1, r8
   2661e:	4638      	mov	r0, r7
   26620:	f7ff fe94 	bl	2634c <ccm_crypt>

	return 0;
   26624:	2000      	movs	r0, #0
}
   26626:	b005      	add	sp, #20
   26628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   2662c:	f06f 0015 	mvn.w	r0, #21
   26630:	e7f9      	b.n	26626 <bt_ccm_encrypt+0x42>

00026632 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26632:	b510      	push	{r4, lr}
   26634:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   26636:	7801      	ldrb	r1, [r0, #0]
   26638:	7822      	ldrb	r2, [r4, #0]
   2663a:	428a      	cmp	r2, r1
{
   2663c:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2663e:	d00e      	beq.n	2665e <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   26640:	4669      	mov	r1, sp
   26642:	f7e0 ff57 	bl	74f4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   26646:	a905      	add	r1, sp, #20
   26648:	4620      	mov	r0, r4
   2664a:	f7e0 ff53 	bl	74f4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2664e:	2210      	movs	r2, #16
   26650:	f10d 0115 	add.w	r1, sp, #21
   26654:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26658:	f7ff fd5b 	bl	26112 <memcmp>
   2665c:	e006      	b.n	2666c <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   2665e:	2a01      	cmp	r2, #1
   26660:	d00a      	beq.n	26678 <bt_uuid_cmp+0x46>
   26662:	b12a      	cbz	r2, 26670 <bt_uuid_cmp+0x3e>
   26664:	2a02      	cmp	r2, #2
   26666:	d00a      	beq.n	2667e <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
   26668:	f06f 0015 	mvn.w	r0, #21
}
   2666c:	b00a      	add	sp, #40	; 0x28
   2666e:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26670:	8840      	ldrh	r0, [r0, #2]
   26672:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26674:	1ac0      	subs	r0, r0, r3
   26676:	e7f9      	b.n	2666c <bt_uuid_cmp+0x3a>
   26678:	6840      	ldr	r0, [r0, #4]
   2667a:	6863      	ldr	r3, [r4, #4]
   2667c:	e7fa      	b.n	26674 <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2667e:	2210      	movs	r2, #16
   26680:	1c61      	adds	r1, r4, #1
   26682:	3001      	adds	r0, #1
   26684:	e7e8      	b.n	26658 <bt_uuid_cmp+0x26>

00026686 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   26686:	2a04      	cmp	r2, #4
{
   26688:	b538      	push	{r3, r4, r5, lr}
   2668a:	460c      	mov	r4, r1
	switch (data_len) {
   2668c:	d00d      	beq.n	266aa <bt_uuid_create+0x24>
   2668e:	2a10      	cmp	r2, #16
   26690:	d019      	beq.n	266c6 <bt_uuid_create+0x40>
   26692:	2a02      	cmp	r2, #2
   26694:	f04f 0300 	mov.w	r3, #0
   26698:	d11b      	bne.n	266d2 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   2669a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2669c:	784a      	ldrb	r2, [r1, #1]
   2669e:	780b      	ldrb	r3, [r1, #0]
   266a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   266a4:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   266a6:	2001      	movs	r0, #1
}
   266a8:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   266aa:	2301      	movs	r3, #1
   266ac:	7003      	strb	r3, [r0, #0]
   266ae:	78a2      	ldrb	r2, [r4, #2]
   266b0:	78c9      	ldrb	r1, [r1, #3]
   266b2:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   266b4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   266b8:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   266ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   266be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   266c2:	6042      	str	r2, [r0, #4]
		break;
   266c4:	e7ef      	b.n	266a6 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   266c6:	2302      	movs	r3, #2
   266c8:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   266cc:	f7ff fd48 	bl	26160 <memcpy>
		break;
   266d0:	e7e9      	b.n	266a6 <bt_uuid_create+0x20>
		return false;
   266d2:	4618      	mov	r0, r3
   266d4:	e7e8      	b.n	266a8 <bt_uuid_create+0x22>

000266d6 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   266d6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   266d8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   266da:	2106      	movs	r1, #6
{
   266dc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   266de:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   266e2:	f002 fb23 	bl	28d2c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   266e6:	b918      	cbnz	r0, 266f0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   266e8:	79a3      	ldrb	r3, [r4, #6]
   266ea:	f063 033f 	orn	r3, r3, #63	; 0x3f
   266ee:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   266f0:	bd10      	pop	{r4, pc}

000266f2 <get_adv_channel_map>:
		channel_map &= ~0x01;
   266f2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   266f6:	bf0c      	ite	eq
   266f8:	2307      	moveq	r3, #7
   266fa:	2306      	movne	r3, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   266fc:	03c1      	lsls	r1, r0, #15
		channel_map &= ~0x02;
   266fe:	bf48      	it	mi
   26700:	f003 0305 	andmi.w	r3, r3, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   26704:	0382      	lsls	r2, r0, #14
		channel_map &= ~0x04;
   26706:	bf48      	it	mi
   26708:	f003 03fb 	andmi.w	r3, r3, #251	; 0xfb
}
   2670c:	4618      	mov	r0, r3
   2670e:	4770      	bx	lr

00026710 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   26710:	2207      	movs	r2, #7
   26712:	f7ff bd25 	b.w	26160 <memcpy>

00026716 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26716:	f3bf 8f5b 	dmb	ish
   2671a:	e850 3f00 	ldrex	r3, [r0]
   2671e:	ea43 0201 	orr.w	r2, r3, r1
   26722:	e840 2c00 	strex	ip, r2, [r0]
   26726:	f1bc 0f00 	cmp.w	ip, #0
   2672a:	d1f6      	bne.n	2671a <atomic_or+0x4>
   2672c:	f3bf 8f5b 	dmb	ish
}
   26730:	4618      	mov	r0, r3
   26732:	4770      	bx	lr

00026734 <atomic_test_and_set_bit>:
{
   26734:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   26736:	2401      	movs	r4, #1
   26738:	408c      	lsls	r4, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2673a:	4621      	mov	r1, r4
   2673c:	f7ff ffeb 	bl	26716 <atomic_or>
	return (old & mask) != 0;
   26740:	4204      	tst	r4, r0
}
   26742:	bf14      	ite	ne
   26744:	2001      	movne	r0, #1
   26746:	2000      	moveq	r0, #0
   26748:	bd10      	pop	{r4, pc}

0002674a <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2674a:	f3bf 8f5b 	dmb	ish
   2674e:	e850 3f00 	ldrex	r3, [r0]
   26752:	ea03 0201 	and.w	r2, r3, r1
   26756:	e840 2c00 	strex	ip, r2, [r0]
   2675a:	f1bc 0f00 	cmp.w	ip, #0
   2675e:	d1f6      	bne.n	2674e <atomic_and+0x4>
   26760:	f3bf 8f5b 	dmb	ish
}
   26764:	4618      	mov	r0, r3
   26766:	4770      	bx	lr

00026768 <atomic_set_bit_to>:
{
   26768:	460b      	mov	r3, r1
   2676a:	b410      	push	{r4}
   2676c:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2676e:	f001 041f 	and.w	r4, r1, #31
   26772:	2101      	movs	r1, #1
   26774:	40a1      	lsls	r1, r4
	if (val) {
   26776:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2677a:	b112      	cbz	r2, 26782 <atomic_set_bit_to+0x1a>
}
   2677c:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2677e:	f7ff bfca 	b.w	26716 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26782:	43c9      	mvns	r1, r1
}
   26784:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   26786:	f7ff bfe0 	b.w	2674a <atomic_and>

0002678a <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   2678a:	2207      	movs	r2, #7
   2678c:	f7ff bcc1 	b.w	26112 <memcmp>

00026790 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26790:	f3bf 8f5b 	dmb	ish
   26794:	6800      	ldr	r0, [r0, #0]
   26796:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2679a:	4108      	asrs	r0, r1
}
   2679c:	f000 0001 	and.w	r0, r0, #1
   267a0:	4770      	bx	lr

000267a2 <le_adv_set_private_addr.isra.27>:
static int le_adv_set_private_addr(struct bt_le_ext_adv *adv)
   267a2:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   267a4:	2106      	movs	r1, #6
   267a6:	4668      	mov	r0, sp
   267a8:	f002 fac0 	bl	28d2c <bt_rand>
	if (err) {
   267ac:	b940      	cbnz	r0, 267c0 <le_adv_set_private_addr.isra.27+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   267ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   267b2:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   267b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   267b8:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   267bc:	f7e1 fe86 	bl	84cc <set_random_address>
}
   267c0:	b003      	add	sp, #12
   267c2:	f85d fb04 	ldr.w	pc, [sp], #4

000267c6 <bt_hci_disconnect>:
{
   267c6:	b570      	push	{r4, r5, r6, lr}
   267c8:	4606      	mov	r6, r0
   267ca:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   267cc:	f240 4006 	movw	r0, #1030	; 0x406
   267d0:	2103      	movs	r1, #3
   267d2:	f7e1 fbd1 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
   267d6:	4604      	mov	r4, r0
   267d8:	b168      	cbz	r0, 267f6 <bt_hci_disconnect+0x30>
   267da:	2103      	movs	r1, #3
   267dc:	3008      	adds	r0, #8
   267de:	f7f6 ffdb 	bl	1d798 <net_buf_simple_add>
	disconn->reason = reason;
   267e2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   267e4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   267e6:	4621      	mov	r1, r4
   267e8:	2200      	movs	r2, #0
   267ea:	f240 4006 	movw	r0, #1030	; 0x406
}
   267ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   267f2:	f7e1 bcfd 	b.w	81f0 <bt_hci_cmd_send_sync>
}
   267f6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   267fa:	bd70      	pop	{r4, r5, r6, pc}

000267fc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   267fc:	8802      	ldrh	r2, [r0, #0]
   267fe:	8843      	ldrh	r3, [r0, #2]
   26800:	429a      	cmp	r2, r3
{
   26802:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   26804:	d818      	bhi.n	26838 <bt_le_conn_params_valid+0x3c>
   26806:	2a05      	cmp	r2, #5
   26808:	d916      	bls.n	26838 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2680a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2680e:	d813      	bhi.n	26838 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   26810:	8884      	ldrh	r4, [r0, #4]
   26812:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   26816:	d20f      	bcs.n	26838 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   26818:	88c1      	ldrh	r1, [r0, #6]
   2681a:	f1a1 020a 	sub.w	r2, r1, #10
   2681e:	b292      	uxth	r2, r2
   26820:	f640 4076 	movw	r0, #3190	; 0xc76
   26824:	4282      	cmp	r2, r0
   26826:	d807      	bhi.n	26838 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   26828:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2682c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   26830:	bf34      	ite	cc
   26832:	2001      	movcc	r0, #1
   26834:	2000      	movcs	r0, #0
}
   26836:	bd10      	pop	{r4, pc}
		return false;
   26838:	2000      	movs	r0, #0
   2683a:	e7fc      	b.n	26836 <bt_le_conn_params_valid+0x3a>

0002683c <bt_send>:
		return bt_hci_ecc_send(buf);
   2683c:	f7e0 bcb6 	b.w	71ac <bt_hci_ecc_send>

00026840 <bt_addr_le_is_bonded>:
}
   26840:	2000      	movs	r0, #0
   26842:	4770      	bx	lr

00026844 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   26844:	6880      	ldr	r0, [r0, #8]
   26846:	f7e2 bd4f 	b.w	92e8 <enh_conn_complete>

0002684a <le_legacy_conn_complete>:
{
   2684a:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2684c:	6881      	ldr	r1, [r0, #8]
{
   2684e:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
   26850:	780b      	ldrb	r3, [r1, #0]
   26852:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   26856:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2685a:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   2685e:	78cb      	ldrb	r3, [r1, #3]
   26860:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   26864:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   26868:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   2686c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   26870:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   26874:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   26878:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   2687c:	7c4b      	ldrb	r3, [r1, #17]
   2687e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   26882:	a805      	add	r0, sp, #20
   26884:	3104      	adds	r1, #4
   26886:	f7ff ff43 	bl	26710 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2688a:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   2688c:	4669      	mov	r1, sp
   2688e:	2206      	movs	r2, #6
   26890:	f10d 001b 	add.w	r0, sp, #27
   26894:	9400      	str	r4, [sp, #0]
   26896:	f8ad 4004 	strh.w	r4, [sp, #4]
   2689a:	f7ff fc61 	bl	26160 <memcpy>
   2689e:	2206      	movs	r2, #6
   268a0:	a902      	add	r1, sp, #8
   268a2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   268a6:	9402      	str	r4, [sp, #8]
   268a8:	f8ad 400c 	strh.w	r4, [sp, #12]
   268ac:	f7ff fc58 	bl	26160 <memcpy>
	enh_conn_complete(&enh);
   268b0:	a804      	add	r0, sp, #16
   268b2:	f7e2 fd19 	bl	92e8 <enh_conn_complete>
}
   268b6:	b00c      	add	sp, #48	; 0x30
   268b8:	bd10      	pop	{r4, pc}

000268ba <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   268ba:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   268bc:	f04f 32ff 	mov.w	r2, #4294967295
{
   268c0:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   268c2:	f04f 33ff 	mov.w	r3, #4294967295
   268c6:	2100      	movs	r1, #0
{
   268c8:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   268ca:	f7e0 fea1 	bl	7610 <bt_buf_get_evt>
   268ce:	2102      	movs	r1, #2
   268d0:	4604      	mov	r4, r0
   268d2:	3008      	adds	r0, #8
   268d4:	f7f6 ff60 	bl	1d798 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   268d8:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   268da:	7045      	strb	r5, [r0, #1]

	return buf;
}
   268dc:	4620      	mov	r0, r4
   268de:	bd70      	pop	{r4, r5, r6, pc}

000268e0 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   268e0:	3103      	adds	r1, #3
{
   268e2:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   268e4:	b2c9      	uxtb	r1, r1
{
   268e6:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   268e8:	200e      	movs	r0, #14
   268ea:	f7ff ffe6 	bl	268ba <bt_hci_evt_create>
   268ee:	2103      	movs	r1, #3
   268f0:	4604      	mov	r4, r0
   268f2:	3008      	adds	r0, #8
   268f4:	f7f6 ff50 	bl	1d798 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   268f8:	2301      	movs	r3, #1
   268fa:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   268fc:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   26900:	4620      	mov	r0, r4
   26902:	bd38      	pop	{r3, r4, r5, pc}

00026904 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   26904:	b570      	push	{r4, r5, r6, lr}
   26906:	4605      	mov	r5, r0
   26908:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   2690a:	200f      	movs	r0, #15
   2690c:	2104      	movs	r1, #4
   2690e:	f7ff ffd4 	bl	268ba <bt_hci_evt_create>
   26912:	2104      	movs	r1, #4
   26914:	4604      	mov	r4, r0
   26916:	3008      	adds	r0, #8
   26918:	f7f6 ff3e 	bl	1d798 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   2691c:	2301      	movs	r3, #1
	cs->status = status;
   2691e:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   26920:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   26922:	8045      	strh	r5, [r0, #2]

	return buf;
}
   26924:	4620      	mov	r0, r4
   26926:	bd70      	pop	{r4, r5, r6, pc}

00026928 <bt_conn_new.part.10>:
struct bt_conn *bt_conn_new(struct bt_conn *conns, size_t size)
   26928:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2692a:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2692c:	2501      	movs	r5, #1
   2692e:	428b      	cmp	r3, r1
   26930:	d102      	bne.n	26938 <bt_conn_new.part.10+0x10>
		return NULL;
   26932:	2400      	movs	r4, #0
}
   26934:	4620      	mov	r0, r4
   26936:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   26938:	4604      	mov	r4, r0
   2693a:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   2693e:	f3bf 8f5b 	dmb	ish
   26942:	e852 0f00 	ldrex	r0, [r2]
   26946:	2800      	cmp	r0, #0
   26948:	d104      	bne.n	26954 <bt_conn_new.part.10+0x2c>
   2694a:	e842 5c00 	strex	ip, r5, [r2]
   2694e:	f1bc 0f00 	cmp.w	ip, #0
   26952:	d1f6      	bne.n	26942 <bt_conn_new.part.10+0x1a>
   26954:	f3bf 8f5b 	dmb	ish
   26958:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   2695c:	d001      	beq.n	26962 <bt_conn_new.part.10+0x3a>
	for (i = 0; i < size; i++) {
   2695e:	3301      	adds	r3, #1
   26960:	e7e5      	b.n	2692e <bt_conn_new.part.10+0x6>
	if (!conn) {
   26962:	2c00      	cmp	r4, #0
   26964:	d0e6      	beq.n	26934 <bt_conn_new.part.10+0xc>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   26966:	22b8      	movs	r2, #184	; 0xb8
   26968:	2100      	movs	r1, #0
   2696a:	4620      	mov	r0, r4
   2696c:	f7ff fc22 	bl	261b4 <memset>
	return conn;
   26970:	e7e0      	b.n	26934 <bt_conn_new.part.10+0xc>

00026972 <tx_notify>:
{
   26972:	b570      	push	{r4, r5, r6, lr}
   26974:	4604      	mov	r4, r0
	__asm__ volatile(
   26976:	f04f 0220 	mov.w	r2, #32
   2697a:	f3ef 8311 	mrs	r3, BASEPRI
   2697e:	f382 8811 	msr	BASEPRI, r2
   26982:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   26986:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   26988:	b920      	cbnz	r0, 26994 <tx_notify+0x22>
	__asm__ volatile(
   2698a:	f383 8811 	msr	BASEPRI, r3
   2698e:	f3bf 8f6f 	isb	sy
}
   26992:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26994:	6a61      	ldr	r1, [r4, #36]	; 0x24
   26996:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   26998:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2699a:	4288      	cmp	r0, r1
	list->tail = node;
   2699c:	bf08      	it	eq
   2699e:	6262      	streq	r2, [r4, #36]	; 0x24
   269a0:	f383 8811 	msr	BASEPRI, r3
   269a4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   269a8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   269ac:	f7e2 feac 	bl	9708 <tx_free>
		cb(conn, user_data);
   269b0:	4631      	mov	r1, r6
   269b2:	4620      	mov	r0, r4
   269b4:	47a8      	blx	r5
	while (1) {
   269b6:	e7de      	b.n	26976 <tx_notify+0x4>

000269b8 <tx_complete_work>:
	tx_notify(conn);
   269b8:	3828      	subs	r0, #40	; 0x28
   269ba:	f7ff bfda 	b.w	26972 <tx_notify>

000269be <bt_conn_ref.part.12>:
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   269be:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   269c0:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   269c4:	f3bf 8f5b 	dmb	ish
   269c8:	6813      	ldr	r3, [r2, #0]
   269ca:	f3bf 8f5b 	dmb	ish
		if (!old) {
   269ce:	b17b      	cbz	r3, 269f0 <bt_conn_ref.part.12+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   269d0:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   269d4:	1c59      	adds	r1, r3, #1
   269d6:	e852 4f00 	ldrex	r4, [r2]
   269da:	429c      	cmp	r4, r3
   269dc:	d104      	bne.n	269e8 <bt_conn_ref.part.12+0x2a>
   269de:	e842 1c00 	strex	ip, r1, [r2]
   269e2:	f1bc 0f00 	cmp.w	ip, #0
   269e6:	d1f6      	bne.n	269d6 <bt_conn_ref.part.12+0x18>
   269e8:	f3bf 8f5b 	dmb	ish
   269ec:	d1ea      	bne.n	269c4 <bt_conn_ref.part.12+0x6>
}
   269ee:	bd10      	pop	{r4, pc}
			return NULL;
   269f0:	4618      	mov	r0, r3
   269f2:	e7fc      	b.n	269ee <bt_conn_ref.part.12+0x30>

000269f4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   269f4:	f3bf 8f5b 	dmb	ish
   269f8:	6800      	ldr	r0, [r0, #0]
   269fa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   269fe:	4108      	asrs	r0, r1
}
   26a00:	f000 0001 	and.w	r0, r0, #1
   26a04:	4770      	bx	lr

00026a06 <bt_conn_get_security>:
}
   26a06:	2001      	movs	r0, #1
   26a08:	4770      	bx	lr

00026a0a <bt_conn_reset_rx_state>:
{
   26a0a:	b510      	push	{r4, lr}
   26a0c:	4604      	mov	r4, r0
	if (!conn->rx) {
   26a0e:	6900      	ldr	r0, [r0, #16]
   26a10:	b118      	cbz	r0, 26a1a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   26a12:	f7f6 fdab 	bl	1d56c <net_buf_unref>
	conn->rx = NULL;
   26a16:	2300      	movs	r3, #0
   26a18:	6123      	str	r3, [r4, #16]
}
   26a1a:	bd10      	pop	{r4, pc}

00026a1c <bt_conn_is_peer_addr_le>:
{
   26a1c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   26a1e:	7a03      	ldrb	r3, [r0, #8]
   26a20:	428b      	cmp	r3, r1
{
   26a22:	4604      	mov	r4, r0
   26a24:	4615      	mov	r5, r2
	if (id != conn->id) {
   26a26:	d115      	bne.n	26a54 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   26a28:	f100 0188 	add.w	r1, r0, #136	; 0x88
   26a2c:	2207      	movs	r2, #7
   26a2e:	4628      	mov	r0, r5
   26a30:	f7ff fb6f 	bl	26112 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   26a34:	b180      	cbz	r0, 26a58 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   26a36:	78e3      	ldrb	r3, [r4, #3]
   26a38:	2207      	movs	r2, #7
   26a3a:	b943      	cbnz	r3, 26a4e <bt_conn_is_peer_addr_le+0x32>
   26a3c:	f104 0196 	add.w	r1, r4, #150	; 0x96
   26a40:	4628      	mov	r0, r5
   26a42:	f7ff fb66 	bl	26112 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   26a46:	fab0 f080 	clz	r0, r0
   26a4a:	0940      	lsrs	r0, r0, #5
}
   26a4c:	bd38      	pop	{r3, r4, r5, pc}
   26a4e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   26a52:	e7f5      	b.n	26a40 <bt_conn_is_peer_addr_le+0x24>
		return false;
   26a54:	2000      	movs	r0, #0
   26a56:	e7f9      	b.n	26a4c <bt_conn_is_peer_addr_le+0x30>
		return true;
   26a58:	2001      	movs	r0, #1
   26a5a:	e7f7      	b.n	26a4c <bt_conn_is_peer_addr_le+0x30>

00026a5c <bt_conn_ref>:
{
   26a5c:	f7ff bfaf 	b.w	269be <bt_conn_ref.part.12>

00026a60 <conn_lookup_handle>:
{
   26a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26a64:	4606      	mov	r6, r0
   26a66:	460d      	mov	r5, r1
   26a68:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   26a6a:	2400      	movs	r4, #0
   26a6c:	f04f 08c0 	mov.w	r8, #192	; 0xc0
   26a70:	f04f 0901 	mov.w	r9, #1
   26a74:	42ac      	cmp	r4, r5
   26a76:	d103      	bne.n	26a80 <conn_lookup_handle+0x20>
	return NULL;
   26a78:	2300      	movs	r3, #0
}
   26a7a:	4618      	mov	r0, r3
   26a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   26a80:	fb08 6004 	mla	r0, r8, r4, r6
   26a84:	f7ff ff9b 	bl	269be <bt_conn_ref.part.12>
		if (!conn) {
   26a88:	4603      	mov	r3, r0
   26a8a:	b160      	cbz	r0, 26aa6 <conn_lookup_handle+0x46>
		if (!bt_conn_is_handle_valid(conn)) {
   26a8c:	7a82      	ldrb	r2, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   26a8e:	2a08      	cmp	r2, #8
   26a90:	d80b      	bhi.n	26aaa <conn_lookup_handle+0x4a>
   26a92:	fa09 f202 	lsl.w	r2, r9, r2
   26a96:	f412 7fc1 	tst.w	r2, #386	; 0x182
   26a9a:	d006      	beq.n	26aaa <conn_lookup_handle+0x4a>
		if (conn->handle != handle) {
   26a9c:	8802      	ldrh	r2, [r0, #0]
   26a9e:	42ba      	cmp	r2, r7
   26aa0:	d0eb      	beq.n	26a7a <conn_lookup_handle+0x1a>
			bt_conn_unref(conn);
   26aa2:	f7e3 f8c1 	bl	9c28 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   26aa6:	3401      	adds	r4, #1
   26aa8:	e7e4      	b.n	26a74 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   26aaa:	4618      	mov	r0, r3
   26aac:	e7f9      	b.n	26aa2 <conn_lookup_handle+0x42>

00026aae <bt_conn_lookup_addr_le>:
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   26aae:	f7e3 b9c5 	b.w	9e3c <bt_conn_lookup_addr_le.part.13>

00026ab2 <bt_conn_le_conn_update>:
{
   26ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ab4:	4607      	mov	r7, r0
   26ab6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   26ab8:	f242 0013 	movw	r0, #8211	; 0x2013
   26abc:	210e      	movs	r1, #14
   26abe:	f7e1 fa5b 	bl	7f78 <bt_hci_cmd_create>
	if (!buf) {
   26ac2:	4606      	mov	r6, r0
   26ac4:	b1d0      	cbz	r0, 26afc <bt_conn_le_conn_update+0x4a>
   26ac6:	210e      	movs	r1, #14
   26ac8:	3008      	adds	r0, #8
   26aca:	f7f6 fe65 	bl	1d798 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   26ace:	220e      	movs	r2, #14
   26ad0:	4604      	mov	r4, r0
   26ad2:	2100      	movs	r1, #0
   26ad4:	f7ff fb6e 	bl	261b4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   26ad8:	883b      	ldrh	r3, [r7, #0]
   26ada:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   26adc:	882b      	ldrh	r3, [r5, #0]
   26ade:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   26ae0:	886b      	ldrh	r3, [r5, #2]
   26ae2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   26ae4:	88ab      	ldrh	r3, [r5, #4]
   26ae6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   26ae8:	88eb      	ldrh	r3, [r5, #6]
   26aea:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   26aec:	4631      	mov	r1, r6
   26aee:	2200      	movs	r2, #0
   26af0:	f242 0013 	movw	r0, #8211	; 0x2013
}
   26af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   26af8:	f7e1 bb7a 	b.w	81f0 <bt_hci_cmd_send_sync>
}
   26afc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   26b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026b02 <l2cap_connected>:
}
   26b02:	4770      	bx	lr

00026b04 <l2cap_disconnected>:
   26b04:	4770      	bx	lr

00026b06 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26b06:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   26b08:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26b0a:	b17b      	cbz	r3, 26b2c <bt_l2cap_chan_remove+0x26>
   26b0c:	3b08      	subs	r3, #8
   26b0e:	2200      	movs	r2, #0
   26b10:	b163      	cbz	r3, 26b2c <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   26b12:	428b      	cmp	r3, r1
   26b14:	f103 0408 	add.w	r4, r3, #8
   26b18:	d10f      	bne.n	26b3a <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   26b1a:	688b      	ldr	r3, [r1, #8]
   26b1c:	b93a      	cbnz	r2, 26b2e <bt_l2cap_chan_remove+0x28>
   26b1e:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   26b20:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   26b22:	4294      	cmp	r4, r2
   26b24:	d100      	bne.n	26b28 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   26b26:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   26b28:	2300      	movs	r3, #0
   26b2a:	608b      	str	r3, [r1, #8]
}
   26b2c:	bd10      	pop	{r4, pc}
   26b2e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26b30:	6d43      	ldr	r3, [r0, #84]	; 0x54
   26b32:	429c      	cmp	r4, r3
	list->tail = node;
   26b34:	bf08      	it	eq
   26b36:	6542      	streq	r2, [r0, #84]	; 0x54
   26b38:	e7f6      	b.n	26b28 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26b3a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26b3c:	2b00      	cmp	r3, #0
   26b3e:	d0f5      	beq.n	26b2c <bt_l2cap_chan_remove+0x26>
   26b40:	3b08      	subs	r3, #8
   26b42:	4622      	mov	r2, r4
   26b44:	e7e4      	b.n	26b10 <bt_l2cap_chan_remove+0xa>

00026b46 <bt_l2cap_chan_del>:
{
   26b46:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   26b48:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   26b4c:	4604      	mov	r4, r0
	if (!chan->conn) {
   26b4e:	b123      	cbz	r3, 26b5a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   26b50:	686b      	ldr	r3, [r5, #4]
   26b52:	b103      	cbz	r3, 26b56 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   26b54:	4798      	blx	r3
	chan->conn = NULL;
   26b56:	2300      	movs	r3, #0
   26b58:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   26b5a:	68e3      	ldr	r3, [r4, #12]
   26b5c:	b10b      	cbz	r3, 26b62 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   26b5e:	4620      	mov	r0, r4
   26b60:	4798      	blx	r3
	if (ops->released) {
   26b62:	69eb      	ldr	r3, [r5, #28]
   26b64:	b11b      	cbz	r3, 26b6e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   26b66:	4620      	mov	r0, r4
}
   26b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   26b6c:	4718      	bx	r3
}
   26b6e:	bd70      	pop	{r4, r5, r6, pc}

00026b70 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26b70:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   26b72:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26b74:	b173      	cbz	r3, 26b94 <bt_l2cap_disconnected+0x24>
   26b76:	f1b3 0008 	subs.w	r0, r3, #8
   26b7a:	d00b      	beq.n	26b94 <bt_l2cap_disconnected+0x24>
   26b7c:	681c      	ldr	r4, [r3, #0]
   26b7e:	b104      	cbz	r4, 26b82 <bt_l2cap_disconnected+0x12>
   26b80:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   26b82:	f7ff ffe0 	bl	26b46 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   26b86:	b12c      	cbz	r4, 26b94 <bt_l2cap_disconnected+0x24>
   26b88:	68a3      	ldr	r3, [r4, #8]
   26b8a:	b103      	cbz	r3, 26b8e <bt_l2cap_disconnected+0x1e>
   26b8c:	3b08      	subs	r3, #8
{
   26b8e:	4620      	mov	r0, r4
   26b90:	461c      	mov	r4, r3
   26b92:	e7f6      	b.n	26b82 <bt_l2cap_disconnected+0x12>
}
   26b94:	bd10      	pop	{r4, pc}

00026b96 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   26b96:	3104      	adds	r1, #4
   26b98:	f7e3 ba5e 	b.w	a058 <bt_conn_create_pdu_timeout>

00026b9c <bt_l2cap_send_cb>:
{
   26b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26ba0:	4614      	mov	r4, r2
   26ba2:	4605      	mov	r5, r0
   26ba4:	4688      	mov	r8, r1
	return net_buf_simple_push(&buf->b, len);
   26ba6:	f102 0008 	add.w	r0, r2, #8
   26baa:	2104      	movs	r1, #4
   26bac:	461e      	mov	r6, r3
   26bae:	9f06      	ldr	r7, [sp, #24]
   26bb0:	f7f6 fd9a 	bl	1d6e8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26bb4:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   26bb6:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   26bba:	3904      	subs	r1, #4
   26bbc:	8001      	strh	r1, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   26bbe:	463b      	mov	r3, r7
   26bc0:	4632      	mov	r2, r6
   26bc2:	4621      	mov	r1, r4
   26bc4:	4628      	mov	r0, r5
}
   26bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   26bca:	f7e2 bf6d 	b.w	9aa8 <bt_conn_send_cb>

00026bce <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26bce:	6d00      	ldr	r0, [r0, #80]	; 0x50
   26bd0:	b108      	cbz	r0, 26bd6 <bt_l2cap_le_lookup_tx_cid+0x8>
   26bd2:	3808      	subs	r0, #8
   26bd4:	b900      	cbnz	r0, 26bd8 <bt_l2cap_le_lookup_tx_cid+0xa>
}
   26bd6:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   26bd8:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   26bdc:	428b      	cmp	r3, r1
   26bde:	d0fa      	beq.n	26bd6 <bt_l2cap_le_lookup_tx_cid+0x8>
   26be0:	6880      	ldr	r0, [r0, #8]
   26be2:	e7f5      	b.n	26bd0 <bt_l2cap_le_lookup_tx_cid+0x2>

00026be4 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   26be4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   26be6:	b108      	cbz	r0, 26bec <bt_l2cap_le_lookup_rx_cid+0x8>
   26be8:	3808      	subs	r0, #8
   26bea:	b900      	cbnz	r0, 26bee <bt_l2cap_le_lookup_rx_cid+0xa>
}
   26bec:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   26bee:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   26bf2:	428b      	cmp	r3, r1
   26bf4:	d0fa      	beq.n	26bec <bt_l2cap_le_lookup_rx_cid+0x8>
   26bf6:	6880      	ldr	r0, [r0, #8]
   26bf8:	e7f5      	b.n	26be6 <bt_l2cap_le_lookup_rx_cid+0x2>

00026bfa <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   26bfa:	4770      	bx	lr

00026bfc <sys_slist_get>:
Z_GENLIST_IS_EMPTY(slist)
   26bfc:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET(slist, snode)
   26bfe:	b12b      	cbz	r3, 26c0c <sys_slist_get+0x10>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26c00:	6841      	ldr	r1, [r0, #4]
   26c02:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   26c04:	6002      	str	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26c06:	428b      	cmp	r3, r1
	list->tail = node;
   26c08:	bf08      	it	eq
   26c0a:	6042      	streq	r2, [r0, #4]
Z_GENLIST_GET(slist, snode)
   26c0c:	4618      	mov	r0, r3
   26c0e:	4770      	bx	lr

00026c10 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26c10:	6803      	ldr	r3, [r0, #0]
   26c12:	2200      	movs	r2, #0
   26c14:	b90b      	cbnz	r3, 26c1a <sys_slist_find_and_remove+0xa>
   26c16:	4618      	mov	r0, r3
   26c18:	4770      	bx	lr
   26c1a:	428b      	cmp	r3, r1
   26c1c:	d110      	bne.n	26c40 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   26c1e:	680b      	ldr	r3, [r1, #0]
   26c20:	b942      	cbnz	r2, 26c34 <sys_slist_find_and_remove+0x24>
   26c22:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   26c24:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26c26:	4291      	cmp	r1, r2
   26c28:	d100      	bne.n	26c2c <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   26c2a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   26c2c:	2300      	movs	r3, #0
   26c2e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26c30:	2001      	movs	r0, #1
   26c32:	4770      	bx	lr
	parent->next = child;
   26c34:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   26c36:	6843      	ldr	r3, [r0, #4]
   26c38:	4299      	cmp	r1, r3
	list->tail = node;
   26c3a:	bf08      	it	eq
   26c3c:	6042      	streq	r2, [r0, #4]
   26c3e:	e7f5      	b.n	26c2c <sys_slist_find_and_remove+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26c40:	461a      	mov	r2, r3
   26c42:	681b      	ldr	r3, [r3, #0]
   26c44:	e7e6      	b.n	26c14 <sys_slist_find_and_remove+0x4>

00026c46 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   26c46:	4603      	mov	r3, r0
	size_t bytes = 0;
   26c48:	2000      	movs	r0, #0

	while (buf) {
   26c4a:	b903      	cbnz	r3, 26c4e <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   26c4c:	4770      	bx	lr
		bytes += buf->len;
   26c4e:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   26c50:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   26c52:	4410      	add	r0, r2
		buf = buf->frags;
   26c54:	e7f9      	b.n	26c4a <net_buf_frags_len+0x4>

00026c56 <att_sent>:
	if (chan->ops->sent) {
   26c56:	684b      	ldr	r3, [r1, #4]
   26c58:	695b      	ldr	r3, [r3, #20]
   26c5a:	b10b      	cbz	r3, 26c60 <att_sent+0xa>
		chan->ops->sent(chan);
   26c5c:	4608      	mov	r0, r1
   26c5e:	4718      	bx	r3
}
   26c60:	4770      	bx	lr

00026c62 <attr_read_type_cb>:
{
   26c62:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   26c64:	68d4      	ldr	r4, [r2, #12]
   26c66:	7823      	ldrb	r3, [r4, #0]
   26c68:	3102      	adds	r1, #2
   26c6a:	b913      	cbnz	r3, 26c72 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   26c6c:	7021      	strb	r1, [r4, #0]
	return true;
   26c6e:	2001      	movs	r0, #1
   26c70:	e006      	b.n	26c80 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   26c72:	428b      	cmp	r3, r1
   26c74:	d0fb      	beq.n	26c6e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   26c76:	8983      	ldrh	r3, [r0, #12]
   26c78:	3b02      	subs	r3, #2
   26c7a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   26c7c:	2000      	movs	r0, #0
   26c7e:	6110      	str	r0, [r2, #16]
}
   26c80:	bd10      	pop	{r4, pc}

00026c82 <att_prepare_write_req>:
}
   26c82:	2006      	movs	r0, #6
   26c84:	4770      	bx	lr

00026c86 <att_op_get_type>:
	switch (op) {
   26c86:	280e      	cmp	r0, #14
   26c88:	d00a      	beq.n	26ca0 <att_op_get_type+0x1a>
   26c8a:	d81e      	bhi.n	26cca <att_op_get_type+0x44>
   26c8c:	2807      	cmp	r0, #7
   26c8e:	d015      	beq.n	26cbc <att_op_get_type+0x36>
   26c90:	d80d      	bhi.n	26cae <att_op_get_type+0x28>
   26c92:	2803      	cmp	r0, #3
   26c94:	d012      	beq.n	26cbc <att_op_get_type+0x36>
   26c96:	d805      	bhi.n	26ca4 <att_op_get_type+0x1e>
   26c98:	2801      	cmp	r0, #1
   26c9a:	d00f      	beq.n	26cbc <att_op_get_type+0x36>
   26c9c:	2802      	cmp	r0, #2
   26c9e:	d12b      	bne.n	26cf8 <att_op_get_type+0x72>
		return ATT_REQUEST;
   26ca0:	2001      	movs	r0, #1
   26ca2:	4770      	bx	lr
	switch (op) {
   26ca4:	2805      	cmp	r0, #5
		return ATT_REQUEST;
   26ca6:	bf0c      	ite	eq
   26ca8:	2002      	moveq	r0, #2
   26caa:	2001      	movne	r0, #1
   26cac:	4770      	bx	lr
	switch (op) {
   26cae:	280a      	cmp	r0, #10
   26cb0:	d0f6      	beq.n	26ca0 <att_op_get_type+0x1a>
   26cb2:	d805      	bhi.n	26cc0 <att_op_get_type+0x3a>
   26cb4:	2808      	cmp	r0, #8
   26cb6:	d0f3      	beq.n	26ca0 <att_op_get_type+0x1a>
   26cb8:	2809      	cmp	r0, #9
   26cba:	d11d      	bne.n	26cf8 <att_op_get_type+0x72>
		return ATT_RESPONSE;
   26cbc:	2002      	movs	r0, #2
   26cbe:	4770      	bx	lr
	switch (op) {
   26cc0:	280c      	cmp	r0, #12
		return ATT_RESPONSE;
   26cc2:	bf0c      	ite	eq
   26cc4:	2001      	moveq	r0, #1
   26cc6:	2002      	movne	r0, #2
   26cc8:	4770      	bx	lr
	switch (op) {
   26cca:	2817      	cmp	r0, #23
   26ccc:	d0f6      	beq.n	26cbc <att_op_get_type+0x36>
   26cce:	d80b      	bhi.n	26ce8 <att_op_get_type+0x62>
   26cd0:	2811      	cmp	r0, #17
   26cd2:	d0f3      	beq.n	26cbc <att_op_get_type+0x36>
   26cd4:	d803      	bhi.n	26cde <att_op_get_type+0x58>
   26cd6:	280f      	cmp	r0, #15
   26cd8:	d0f0      	beq.n	26cbc <att_op_get_type+0x36>
   26cda:	2810      	cmp	r0, #16
   26cdc:	e7df      	b.n	26c9e <att_op_get_type+0x18>
   26cde:	2813      	cmp	r0, #19
   26ce0:	d0ec      	beq.n	26cbc <att_op_get_type+0x36>
   26ce2:	d3dd      	bcc.n	26ca0 <att_op_get_type+0x1a>
   26ce4:	2816      	cmp	r0, #22
   26ce6:	e7da      	b.n	26c9e <att_op_get_type+0x18>
   26ce8:	281d      	cmp	r0, #29
   26cea:	d013      	beq.n	26d14 <att_op_get_type+0x8e>
   26cec:	d80a      	bhi.n	26d04 <att_op_get_type+0x7e>
   26cee:	2819      	cmp	r0, #25
   26cf0:	d0e4      	beq.n	26cbc <att_op_get_type+0x36>
   26cf2:	d3d5      	bcc.n	26ca0 <att_op_get_type+0x1a>
   26cf4:	281b      	cmp	r0, #27
   26cf6:	d00f      	beq.n	26d18 <att_op_get_type+0x92>
	if (op & ATT_CMD_MASK) {
   26cf8:	f010 0f40 	tst.w	r0, #64	; 0x40
		return ATT_COMMAND;
   26cfc:	bf0c      	ite	eq
   26cfe:	2006      	moveq	r0, #6
   26d00:	2000      	movne	r0, #0
   26d02:	4770      	bx	lr
	switch (op) {
   26d04:	2852      	cmp	r0, #82	; 0x52
   26d06:	d009      	beq.n	26d1c <att_op_get_type+0x96>
   26d08:	28d2      	cmp	r0, #210	; 0xd2
   26d0a:	d007      	beq.n	26d1c <att_op_get_type+0x96>
   26d0c:	281e      	cmp	r0, #30
   26d0e:	d1f3      	bne.n	26cf8 <att_op_get_type+0x72>
		return ATT_CONFIRMATION;
   26d10:	2004      	movs	r0, #4
}
   26d12:	4770      	bx	lr
		return ATT_INDICATION;
   26d14:	2005      	movs	r0, #5
   26d16:	4770      	bx	lr
		return ATT_NOTIFICATION;
   26d18:	2003      	movs	r0, #3
   26d1a:	4770      	bx	lr
		return ATT_COMMAND;
   26d1c:	2000      	movs	r0, #0
   26d1e:	4770      	bx	lr

00026d20 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26d20:	f3bf 8f5b 	dmb	ish
   26d24:	6800      	ldr	r0, [r0, #0]
   26d26:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   26d2a:	4108      	asrs	r0, r1
}
   26d2c:	f000 0001 	and.w	r0, r0, #1
   26d30:	4770      	bx	lr

00026d32 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   26d32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   26d34:	e9cd 2301 	strd	r2, r3, [sp, #4]
   26d38:	2300      	movs	r3, #0
   26d3a:	9300      	str	r3, [sp, #0]
   26d3c:	461a      	mov	r2, r3
   26d3e:	f7e5 f9d7 	bl	c0f0 <bt_gatt_foreach_attr_type>
				  user_data);
}
   26d42:	b005      	add	sp, #20
   26d44:	f85d fb04 	ldr.w	pc, [sp], #4

00026d48 <att_chan_read>:
{
   26d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d4c:	4680      	mov	r8, r0
   26d4e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26d50:	4610      	mov	r0, r2
{
   26d52:	469a      	mov	sl, r3
   26d54:	468b      	mov	fp, r1
   26d56:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   26d58:	f7ff ff75 	bl	26c46 <net_buf_frags_len>
   26d5c:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   26d60:	4283      	cmp	r3, r0
   26d62:	d97a      	bls.n	26e5a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   26d64:	f8d8 3008 	ldr.w	r3, [r8, #8]
   26d68:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   26d6a:	4630      	mov	r0, r6
   26d6c:	f7f6 fc5a 	bl	1d624 <net_buf_frag_last>
	size_t len, total = 0;
   26d70:	f04f 0900 	mov.w	r9, #0
	frag = net_buf_frag_last(buf);
   26d74:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   26d76:	4630      	mov	r0, r6
   26d78:	f7ff ff65 	bl	26c46 <net_buf_frags_len>
   26d7c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   26d80:	f105 0708 	add.w	r7, r5, #8
   26d84:	1a24      	subs	r4, r4, r0
   26d86:	4638      	mov	r0, r7
   26d88:	f002 fe01 	bl	2998e <net_buf_simple_tailroom>
   26d8c:	4284      	cmp	r4, r0
   26d8e:	d211      	bcs.n	26db4 <att_chan_read+0x6c>
   26d90:	4630      	mov	r0, r6
   26d92:	f7ff ff58 	bl	26c46 <net_buf_frags_len>
   26d96:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   26d9a:	1a24      	subs	r4, r4, r0
		if (!len) {
   26d9c:	bb34      	cbnz	r4, 26dec <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   26d9e:	79b0      	ldrb	r0, [r6, #6]
   26da0:	f7f6 f9d0 	bl	1d144 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   26da4:	2200      	movs	r2, #0
   26da6:	2300      	movs	r3, #0
   26da8:	f002 fd8c 	bl	298c4 <net_buf_alloc_fixed>
			if (!frag) {
   26dac:	4605      	mov	r5, r0
   26dae:	b930      	cbnz	r0, 26dbe <att_chan_read+0x76>
	return total;
   26db0:	464f      	mov	r7, r9
   26db2:	e02c      	b.n	26e0e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   26db4:	4638      	mov	r0, r7
   26db6:	f002 fdea 	bl	2998e <net_buf_simple_tailroom>
   26dba:	4604      	mov	r4, r0
   26dbc:	e7ee      	b.n	26d9c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   26dbe:	4601      	mov	r1, r0
   26dc0:	4630      	mov	r0, r6
   26dc2:	f7f6 fc6f 	bl	1d6a4 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   26dc6:	4630      	mov	r0, r6
   26dc8:	f7ff ff3d 	bl	26c46 <net_buf_frags_len>
   26dcc:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   26dd0:	f105 0708 	add.w	r7, r5, #8
   26dd4:	1a24      	subs	r4, r4, r0
   26dd6:	4638      	mov	r0, r7
   26dd8:	f002 fdd9 	bl	2998e <net_buf_simple_tailroom>
   26ddc:	4284      	cmp	r4, r0
   26dde:	d21a      	bcs.n	26e16 <att_chan_read+0xce>
   26de0:	4630      	mov	r0, r6
   26de2:	f7ff ff30 	bl	26c46 <net_buf_frags_len>
   26de6:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   26dea:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   26dec:	68a9      	ldr	r1, [r5, #8]
   26dee:	89aa      	ldrh	r2, [r5, #12]
   26df0:	f8db 7004 	ldr.w	r7, [fp, #4]
   26df4:	f8cd a000 	str.w	sl, [sp]
   26df8:	440a      	add	r2, r1
   26dfa:	b2a3      	uxth	r3, r4
   26dfc:	4659      	mov	r1, fp
   26dfe:	9803      	ldr	r0, [sp, #12]
   26e00:	47b8      	blx	r7
		if (read < 0) {
   26e02:	1e07      	subs	r7, r0, #0
   26e04:	da0c      	bge.n	26e20 <att_chan_read+0xd8>
				return total;
   26e06:	f1b9 0f00 	cmp.w	r9, #0
   26e0a:	bf18      	it	ne
   26e0c:	464f      	movne	r7, r9
}
   26e0e:	4638      	mov	r0, r7
   26e10:	b005      	add	sp, #20
   26e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e16:	4638      	mov	r0, r7
   26e18:	f002 fdb9 	bl	2998e <net_buf_simple_tailroom>
   26e1c:	4604      	mov	r4, r0
   26e1e:	e7e5      	b.n	26dec <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   26e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26e22:	b993      	cbnz	r3, 26e4a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   26e24:	4639      	mov	r1, r7
   26e26:	f105 0008 	add.w	r0, r5, #8
   26e2a:	f7f6 fcb5 	bl	1d798 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26e2e:	4630      	mov	r0, r6
   26e30:	f7ff ff09 	bl	26c46 <net_buf_frags_len>
   26e34:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   26e38:	44ba      	add	sl, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26e3a:	4283      	cmp	r3, r0
		total += read;
   26e3c:	44b9      	add	r9, r7
		offset += read;
   26e3e:	fa1f fa8a 	uxth.w	sl, sl
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   26e42:	d9b5      	bls.n	26db0 <att_chan_read+0x68>
   26e44:	42a7      	cmp	r7, r4
   26e46:	d096      	beq.n	26d76 <att_chan_read+0x2e>
   26e48:	e7b2      	b.n	26db0 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   26e4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26e4e:	4639      	mov	r1, r7
   26e50:	4628      	mov	r0, r5
   26e52:	4798      	blx	r3
   26e54:	2800      	cmp	r0, #0
   26e56:	d1e5      	bne.n	26e24 <att_chan_read+0xdc>
   26e58:	e7aa      	b.n	26db0 <att_chan_read+0x68>
		return 0;
   26e5a:	2700      	movs	r7, #0
   26e5c:	e7d7      	b.n	26e0e <att_chan_read+0xc6>

00026e5e <find_info_cb>:
{
   26e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   26e60:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   26e62:	6816      	ldr	r6, [r2, #0]
{
   26e64:	4605      	mov	r5, r0
   26e66:	460f      	mov	r7, r1
   26e68:	4614      	mov	r4, r2
	if (!data->rsp) {
   26e6a:	b963      	cbnz	r3, 26e86 <find_info_cb+0x28>
   26e6c:	6850      	ldr	r0, [r2, #4]
   26e6e:	2101      	movs	r1, #1
   26e70:	3008      	adds	r0, #8
   26e72:	f7f6 fc91 	bl	1d798 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   26e76:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   26e78:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   26e7a:	781b      	ldrb	r3, [r3, #0]
   26e7c:	2b00      	cmp	r3, #0
   26e7e:	bf0c      	ite	eq
   26e80:	2301      	moveq	r3, #1
   26e82:	2302      	movne	r3, #2
   26e84:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   26e86:	68a3      	ldr	r3, [r4, #8]
   26e88:	781b      	ldrb	r3, [r3, #0]
   26e8a:	2b01      	cmp	r3, #1
   26e8c:	d003      	beq.n	26e96 <find_info_cb+0x38>
   26e8e:	2b02      	cmp	r3, #2
   26e90:	d019      	beq.n	26ec6 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   26e92:	2000      	movs	r0, #0
   26e94:	e016      	b.n	26ec4 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   26e96:	682b      	ldr	r3, [r5, #0]
   26e98:	781b      	ldrb	r3, [r3, #0]
   26e9a:	2b00      	cmp	r3, #0
   26e9c:	d1f9      	bne.n	26e92 <find_info_cb+0x34>
   26e9e:	6860      	ldr	r0, [r4, #4]
   26ea0:	2104      	movs	r1, #4
   26ea2:	3008      	adds	r0, #8
   26ea4:	f7f6 fc78 	bl	1d798 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   26ea8:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   26eaa:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   26eac:	885b      	ldrh	r3, [r3, #2]
   26eae:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   26eb0:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   26eb2:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   26eb4:	899b      	ldrh	r3, [r3, #12]
   26eb6:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   26eba:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   26ebc:	2804      	cmp	r0, #4
   26ebe:	bf94      	ite	ls
   26ec0:	2000      	movls	r0, #0
   26ec2:	2001      	movhi	r0, #1
}
   26ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   26ec6:	682b      	ldr	r3, [r5, #0]
   26ec8:	781b      	ldrb	r3, [r3, #0]
   26eca:	2b02      	cmp	r3, #2
   26ecc:	d1e1      	bne.n	26e92 <find_info_cb+0x34>
   26ece:	6860      	ldr	r0, [r4, #4]
   26ed0:	2112      	movs	r1, #18
   26ed2:	3008      	adds	r0, #8
   26ed4:	f7f6 fc60 	bl	1d798 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   26ed8:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   26eda:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   26edc:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   26ede:	f820 7b02 	strh.w	r7, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   26ee2:	3101      	adds	r1, #1
   26ee4:	f7ff f93c 	bl	26160 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   26ee8:	6863      	ldr	r3, [r4, #4]
   26eea:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   26eee:	899b      	ldrh	r3, [r3, #12]
   26ef0:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   26ef2:	2812      	cmp	r0, #18
   26ef4:	e7e3      	b.n	26ebe <find_info_cb+0x60>

00026ef6 <attr_read_group_cb>:
	if (!data->rsp->len) {
   26ef6:	68d0      	ldr	r0, [r2, #12]
   26ef8:	7803      	ldrb	r3, [r0, #0]
   26efa:	3104      	adds	r1, #4
   26efc:	b913      	cbnz	r3, 26f04 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   26efe:	7001      	strb	r1, [r0, #0]
	return true;
   26f00:	2001      	movs	r0, #1
}
   26f02:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   26f04:	428b      	cmp	r3, r1
   26f06:	d0fb      	beq.n	26f00 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   26f08:	6891      	ldr	r1, [r2, #8]
   26f0a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   26f0c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   26f0e:	3b04      	subs	r3, #4
   26f10:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   26f12:	6110      	str	r0, [r2, #16]
		return false;
   26f14:	4770      	bx	lr

00026f16 <process_queue>:
{
   26f16:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   26f18:	2200      	movs	r2, #0
{
   26f1a:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   26f1c:	2300      	movs	r3, #0
   26f1e:	4608      	mov	r0, r1
{
   26f20:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   26f22:	f7f6 fa09 	bl	1d338 <net_buf_get>
	if (buf) {
   26f26:	4605      	mov	r5, r0
   26f28:	b160      	cbz	r0, 26f44 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   26f2a:	4601      	mov	r1, r0
   26f2c:	2200      	movs	r2, #0
   26f2e:	4620      	mov	r0, r4
   26f30:	f7e3 fc6c 	bl	a80c <chan_send>
		if (err) {
   26f34:	4604      	mov	r4, r0
   26f36:	b118      	cbz	r0, 26f40 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   26f38:	4629      	mov	r1, r5
   26f3a:	4630      	mov	r0, r6
   26f3c:	f003 f97d 	bl	2a23a <k_queue_prepend>
}
   26f40:	4620      	mov	r0, r4
   26f42:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   26f44:	f06f 0401 	mvn.w	r4, #1
   26f48:	e7fa      	b.n	26f40 <process_queue+0x2a>

00026f4a <att_exec_write_req>:
   26f4a:	2006      	movs	r0, #6
   26f4c:	4770      	bx	lr

00026f4e <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26f4e:	30c8      	adds	r0, #200	; 0xc8
   26f50:	f3bf 8f5b 	dmb	ish
   26f54:	e850 3f00 	ldrex	r3, [r0]
   26f58:	f023 0301 	bic.w	r3, r3, #1
   26f5c:	e840 3200 	strex	r2, r3, [r0]
   26f60:	2a00      	cmp	r2, #0
   26f62:	d1f7      	bne.n	26f54 <chan_rsp_sent+0x6>
   26f64:	f3bf 8f5b 	dmb	ish
}
   26f68:	4770      	bx	lr

00026f6a <chan_cfm_sent>:
   26f6a:	30c8      	adds	r0, #200	; 0xc8
   26f6c:	f3bf 8f5b 	dmb	ish
   26f70:	e850 3f00 	ldrex	r3, [r0]
   26f74:	f023 0302 	bic.w	r3, r3, #2
   26f78:	e840 3200 	strex	r2, r3, [r0]
   26f7c:	2a00      	cmp	r2, #0
   26f7e:	d1f7      	bne.n	26f70 <chan_cfm_sent+0x6>
   26f80:	f3bf 8f5b 	dmb	ish
}
   26f84:	4770      	bx	lr

00026f86 <chan_req_send>:
{
   26f86:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26f88:	690e      	ldr	r6, [r1, #16]
{
   26f8a:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26f8c:	4630      	mov	r0, r6
{
   26f8e:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   26f90:	f7ff fe59 	bl	26c46 <net_buf_frags_len>
   26f94:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   26f98:	4283      	cmp	r3, r0
   26f9a:	d317      	bcc.n	26fcc <chan_req_send+0x46>
	chan->req = req;
   26f9c:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   26fa0:	f106 0008 	add.w	r0, r6, #8
   26fa4:	f002 fcef 	bl	29986 <net_buf_simple_headroom>
	state->len = buf->len;
   26fa8:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   26faa:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   26fac:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   26fae:	6920      	ldr	r0, [r4, #16]
   26fb0:	f7f6 fb20 	bl	1d5f4 <net_buf_ref>
   26fb4:	2200      	movs	r2, #0
   26fb6:	4601      	mov	r1, r0
   26fb8:	4628      	mov	r0, r5
   26fba:	f7e3 fc27 	bl	a80c <chan_send>
	if (err) {
   26fbe:	4605      	mov	r5, r0
   26fc0:	b110      	cbz	r0, 26fc8 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   26fc2:	6920      	ldr	r0, [r4, #16]
   26fc4:	f7f6 fad2 	bl	1d56c <net_buf_unref>
}
   26fc8:	4628      	mov	r0, r5
   26fca:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   26fcc:	f06f 0523 	mvn.w	r5, #35	; 0x23
   26fd0:	e7fa      	b.n	26fc8 <chan_req_send+0x42>

00026fd2 <bt_att_status>:
{
   26fd2:	b538      	push	{r3, r4, r5, lr}
   26fd4:	4605      	mov	r5, r0
   26fd6:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   26fd8:	2100      	movs	r1, #0
   26fda:	f7ff fea1 	bl	26d20 <atomic_test_bit>
   26fde:	b1c8      	cbz	r0, 27014 <bt_att_status+0x42>
	if (!chan->att) {
   26fe0:	f855 0c08 	ldr.w	r0, [r5, #-8]
   26fe4:	b1b0      	cbz	r0, 27014 <bt_att_status+0x42>
	if (chan->req) {
   26fe6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   26fea:	b99b      	cbnz	r3, 27014 <bt_att_status+0x42>
	node = sys_slist_get(&chan->att->reqs);
   26fec:	3004      	adds	r0, #4
   26fee:	f7ff fe05 	bl	26bfc <sys_slist_get>
	if (!node) {
   26ff2:	4604      	mov	r4, r0
   26ff4:	b170      	cbz	r0, 27014 <bt_att_status+0x42>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   26ff6:	4601      	mov	r1, r0
   26ff8:	f1a5 0008 	sub.w	r0, r5, #8
   26ffc:	f7e3 fd54 	bl	aaa8 <bt_att_chan_req_send>
   27000:	2800      	cmp	r0, #0
   27002:	da07      	bge.n	27014 <bt_att_status+0x42>
	sys_slist_prepend(&chan->att->reqs, node);
   27004:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   27008:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2700a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2700c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2700e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27010:	b902      	cbnz	r2, 27014 <bt_att_status+0x42>
	list->tail = node;
   27012:	609c      	str	r4, [r3, #8]
}
   27014:	bd38      	pop	{r3, r4, r5, pc}

00027016 <write_cb>:
{
   27016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27018:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2701a:	4601      	mov	r1, r0
{
   2701c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2701e:	222a      	movs	r2, #42	; 0x2a
   27020:	6820      	ldr	r0, [r4, #0]
   27022:	f000 fb79 	bl	27718 <bt_gatt_check_perm>
   27026:	4605      	mov	r5, r0
   27028:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2702a:	bb00      	cbnz	r0, 2706e <write_cb+0x58>
	if (!data->req) {
   2702c:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   2702e:	68b7      	ldr	r7, [r6, #8]
   27030:	68e2      	ldr	r2, [r4, #12]
   27032:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   27034:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   27036:	bf14      	ite	ne
   27038:	2300      	movne	r3, #0
   2703a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2703c:	9301      	str	r3, [sp, #4]
   2703e:	8a63      	ldrh	r3, [r4, #18]
   27040:	9300      	str	r3, [sp, #0]
   27042:	4631      	mov	r1, r6
   27044:	8a23      	ldrh	r3, [r4, #16]
   27046:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   27048:	2800      	cmp	r0, #0
   2704a:	db05      	blt.n	27058 <write_cb+0x42>
   2704c:	8a23      	ldrh	r3, [r4, #16]
   2704e:	4298      	cmp	r0, r3
   27050:	d10b      	bne.n	2706a <write_cb+0x54>
	data->err = 0U;
   27052:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27054:	2501      	movs	r5, #1
   27056:	e005      	b.n	27064 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   27058:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2705c:	d305      	bcc.n	2706a <write_cb+0x54>
		return -err;
   2705e:	4240      	negs	r0, r0
   27060:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   27062:	7520      	strb	r0, [r4, #20]
}
   27064:	4628      	mov	r0, r5
   27066:	b003      	add	sp, #12
   27068:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2706a:	200e      	movs	r0, #14
   2706c:	e7f9      	b.n	27062 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   2706e:	2500      	movs	r5, #0
   27070:	e7f8      	b.n	27064 <write_cb+0x4e>

00027072 <bt_att_sent>:
{
   27072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   27074:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
	struct bt_att *att = chan->att;
   27078:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2707c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2707e:	f1a0 0608 	sub.w	r6, r0, #8
	if (chan->sent) {
   27082:	b10b      	cbz	r3, 27088 <bt_att_sent+0x16>
		chan->sent(chan);
   27084:	4630      	mov	r0, r6
   27086:	4798      	blx	r3
   27088:	f3bf 8f5b 	dmb	ish
   2708c:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   27090:	e853 2f00 	ldrex	r2, [r3]
   27094:	f022 0210 	bic.w	r2, r2, #16
   27098:	e843 2100 	strex	r1, r2, [r3]
   2709c:	2900      	cmp	r1, #0
   2709e:	d1f7      	bne.n	27090 <bt_att_sent+0x1e>
   270a0:	f3bf 8f5b 	dmb	ish
	if (!att) {
   270a4:	b334      	cbz	r4, 270f4 <bt_att_sent+0x82>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   270a6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   270aa:	b98b      	cbnz	r3, 270d0 <bt_att_sent+0x5e>
   270ac:	6863      	ldr	r3, [r4, #4]
   270ae:	b17b      	cbz	r3, 270d0 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   270b0:	1d20      	adds	r0, r4, #4
   270b2:	f7ff fda3 	bl	26bfc <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   270b6:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   270b8:	4607      	mov	r7, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   270ba:	4630      	mov	r0, r6
   270bc:	f7ff ff63 	bl	26f86 <chan_req_send>
   270c0:	2800      	cmp	r0, #0
   270c2:	da17      	bge.n	270f4 <bt_att_sent+0x82>
Z_GENLIST_PREPEND(slist, snode)
   270c4:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   270c6:	603b      	str	r3, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   270c8:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   270ca:	6067      	str	r7, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   270cc:	b903      	cbnz	r3, 270d0 <bt_att_sent+0x5e>
	list->tail = node;
   270ce:	60a7      	str	r7, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   270d0:	f105 01c8 	add.w	r1, r5, #200	; 0xc8
   270d4:	4630      	mov	r0, r6
   270d6:	f7ff ff1e 	bl	26f16 <process_queue>
	if (!err) {
   270da:	b158      	cbz	r0, 270f4 <bt_att_sent+0x82>
	err = process_queue(chan, &att->tx_queue);
   270dc:	f104 010c 	add.w	r1, r4, #12
   270e0:	4630      	mov	r0, r6
   270e2:	f7ff ff18 	bl	26f16 <process_queue>
	if (!err) {
   270e6:	b128      	cbz	r0, 270f4 <bt_att_sent+0x82>
   270e8:	f505 708c 	add.w	r0, r5, #280	; 0x118
}
   270ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   270f0:	f7fa becc 	b.w	21e8c <z_impl_k_sem_give>
   270f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000270f6 <read_cb>:
{
   270f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   270fa:	6817      	ldr	r7, [r2, #0]
{
   270fc:	4680      	mov	r8, r0
	data->err = 0x00;
   270fe:	2600      	movs	r6, #0
{
   27100:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   27102:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   27104:	7316      	strb	r6, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27106:	4641      	mov	r1, r8
   27108:	2215      	movs	r2, #21
   2710a:	f000 fb05 	bl	27718 <bt_gatt_check_perm>
   2710e:	4604      	mov	r4, r0
   27110:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   27112:	b9a0      	cbnz	r0, 2713e <read_cb+0x48>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27114:	e9cd 0000 	strd	r0, r0, [sp]
   27118:	88ab      	ldrh	r3, [r5, #4]
   2711a:	68aa      	ldr	r2, [r5, #8]
   2711c:	4641      	mov	r1, r8
   2711e:	4638      	mov	r0, r7
   27120:	f7ff fe12 	bl	26d48 <att_chan_read>
	if (ret < 0) {
   27124:	2800      	cmp	r0, #0
   27126:	da0c      	bge.n	27142 <read_cb+0x4c>
	if (err < 0 && err >= -0xff) {
   27128:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2712c:	bf26      	itte	cs
   2712e:	4240      	negcs	r0, r0
   27130:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   27132:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   27134:	7328      	strb	r0, [r5, #12]
}
   27136:	4620      	mov	r0, r4
   27138:	b002      	add	sp, #8
   2713a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2713e:	4634      	mov	r4, r6
   27140:	e7f9      	b.n	27136 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   27142:	2401      	movs	r4, #1
   27144:	e7f7      	b.n	27136 <read_cb+0x40>

00027146 <send_err_rsp.part.12>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2714a:	4688      	mov	r8, r1
   2714c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2714e:	2101      	movs	r1, #1
   27150:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27152:	4605      	mov	r5, r0
   27154:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27156:	f7e3 fd35 	bl	abc4 <bt_att_chan_create_pdu>
	if (!buf) {
   2715a:	4604      	mov	r4, r0
   2715c:	b170      	cbz	r0, 2717c <send_err_rsp.part.12+0x36>
	return net_buf_simple_add(&buf->b, len);
   2715e:	2104      	movs	r1, #4
   27160:	3008      	adds	r0, #8
   27162:	f7f6 fb19 	bl	1d798 <net_buf_simple_add>
	rsp->request = req;
   27166:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2716a:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2716c:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   27170:	4621      	mov	r1, r4
   27172:	4628      	mov	r0, r5
}
   27174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   27178:	f7e3 bc44 	b.w	aa04 <bt_att_chan_send_rsp.constprop.24>
}
   2717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027180 <att_read_blob_req>:
{
   27180:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   27182:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   27184:	8813      	ldrh	r3, [r2, #0]
   27186:	8852      	ldrh	r2, [r2, #2]
   27188:	9200      	str	r2, [sp, #0]
   2718a:	210c      	movs	r1, #12
   2718c:	220d      	movs	r2, #13
   2718e:	f7e3 ff23 	bl	afd8 <att_read_rsp>
}
   27192:	b003      	add	sp, #12
   27194:	f85d fb04 	ldr.w	pc, [sp], #4

00027198 <att_read_req>:
{
   27198:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2719a:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2719c:	2200      	movs	r2, #0
   2719e:	881b      	ldrh	r3, [r3, #0]
   271a0:	9200      	str	r2, [sp, #0]
   271a2:	210a      	movs	r1, #10
   271a4:	220b      	movs	r2, #11
   271a6:	f7e3 ff17 	bl	afd8 <att_read_rsp>
}
   271aa:	b003      	add	sp, #12
   271ac:	f85d fb04 	ldr.w	pc, [sp], #4

000271b0 <att_mtu_req>:
{
   271b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271b2:	4606      	mov	r6, r0
	struct bt_conn *conn = chan->att->conn;
   271b4:	f850 3bc8 	ldr.w	r3, [r0], #200
{
   271b8:	460a      	mov	r2, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   271ba:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   271bc:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   271be:	f7ff fdaf 	bl	26d20 <atomic_test_bit>
   271c2:	4604      	mov	r4, r0
   271c4:	b9f0      	cbnz	r0, 27204 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   271c6:	6892      	ldr	r2, [r2, #8]
   271c8:	8815      	ldrh	r5, [r2, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   271ca:	2d16      	cmp	r5, #22
   271cc:	d91c      	bls.n	27208 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   271ce:	2202      	movs	r2, #2
   271d0:	2103      	movs	r1, #3
   271d2:	4618      	mov	r0, r3
   271d4:	f7e3 fe10 	bl	adf8 <bt_att_create_pdu>
	if (!pdu) {
   271d8:	4607      	mov	r7, r0
   271da:	b1b8      	cbz	r0, 2720c <att_mtu_req+0x5c>
   271dc:	2102      	movs	r1, #2
   271de:	3008      	adds	r0, #8
   271e0:	f7f6 fada 	bl	1d798 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   271e4:	2345      	movs	r3, #69	; 0x45
   271e6:	7003      	strb	r3, [r0, #0]
   271e8:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   271ea:	4639      	mov	r1, r7
   271ec:	4630      	mov	r0, r6
   271ee:	f7e3 fc09 	bl	aa04 <bt_att_chan_send_rsp.constprop.24>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   271f2:	2d45      	cmp	r5, #69	; 0x45
   271f4:	bf28      	it	cs
   271f6:	2545      	movcs	r5, #69	; 0x45
   271f8:	f8a6 5052 	strh.w	r5, [r6, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   271fc:	f8a6 505e 	strh.w	r5, [r6, #94]	; 0x5e
	return 0;
   27200:	4620      	mov	r0, r4
}
   27202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   27204:	2006      	movs	r0, #6
   27206:	e7fc      	b.n	27202 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   27208:	2004      	movs	r0, #4
   2720a:	e7fa      	b.n	27202 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   2720c:	200e      	movs	r0, #14
   2720e:	e7f8      	b.n	27202 <att_mtu_req+0x52>

00027210 <bt_att_init>:
	bt_gatt_init();
   27210:	f7e4 bed6 	b.w	bfc0 <bt_gatt_init>

00027214 <bt_att_get_mtu>:
{
   27214:	b508      	push	{r3, lr}
	att = att_get(conn);
   27216:	f7e3 fb65 	bl	a8e4 <att_get>
	if (!att) {
   2721a:	b1c0      	cbz	r0, 2724e <bt_att_get_mtu+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2721c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2721e:	b1b0      	cbz	r0, 2724e <bt_att_get_mtu+0x3a>
   27220:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   27224:	d012      	beq.n	2724c <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27226:	6803      	ldr	r3, [r0, #0]
   27228:	b10b      	cbz	r3, 2722e <bt_att_get_mtu+0x1a>
   2722a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   2722e:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   27230:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   27234:	4290      	cmp	r0, r2
   27236:	bf38      	it	cc
   27238:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2723a:	b143      	cbz	r3, 2724e <bt_att_get_mtu+0x3a>
   2723c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   27240:	b10a      	cbz	r2, 27246 <bt_att_get_mtu+0x32>
   27242:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   27246:	4619      	mov	r1, r3
   27248:	4613      	mov	r3, r2
   2724a:	e7f1      	b.n	27230 <bt_att_get_mtu+0x1c>
		return 0;
   2724c:	4608      	mov	r0, r1
}
   2724e:	bd08      	pop	{r3, pc}

00027250 <att_req_destroy>:
{
   27250:	b510      	push	{r4, lr}
   27252:	4604      	mov	r4, r0
	if (req->buf) {
   27254:	6900      	ldr	r0, [r0, #16]
   27256:	b108      	cbz	r0, 2725c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   27258:	f7f6 f988 	bl	1d56c <net_buf_unref>
	if (req->destroy) {
   2725c:	68a3      	ldr	r3, [r4, #8]
   2725e:	b10b      	cbz	r3, 27264 <att_req_destroy+0x14>
		req->destroy(req);
   27260:	4620      	mov	r0, r4
   27262:	4798      	blx	r3
	bt_att_req_free(req);
   27264:	4620      	mov	r0, r4
}
   27266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   2726a:	f7e4 b813 	b.w	b294 <bt_att_req_free>

0002726e <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2726e:	898a      	ldrh	r2, [r1, #12]
   27270:	6889      	ldr	r1, [r1, #8]
   27272:	2300      	movs	r3, #0
   27274:	f7e4 b81a 	b.w	b2ac <att_handle_rsp>

00027278 <att_chan_detach.part.15>:
static void att_chan_detach(struct bt_att_chan *chan)
   27278:	b570      	push	{r4, r5, r6, lr}
   2727a:	4604      	mov	r4, r0
   2727c:	2508      	movs	r5, #8
		k_sem_give(&chan->tx_sem);
   2727e:	f500 7690 	add.w	r6, r0, #288	; 0x120
   27282:	4630      	mov	r0, r6
   27284:	f7fa fe02 	bl	21e8c <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   27288:	3d01      	subs	r5, #1
   2728a:	d1fa      	bne.n	27282 <att_chan_detach.part.15+0xa>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2728c:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   27290:	2200      	movs	r2, #0
   27292:	2300      	movs	r3, #0
   27294:	4628      	mov	r0, r5
   27296:	f7f6 f84f 	bl	1d338 <net_buf_get>
   2729a:	4602      	mov	r2, r0
   2729c:	b950      	cbnz	r0, 272b4 <att_chan_detach.part.15+0x3c>
	if (chan->req) {
   2729e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   272a2:	b123      	cbz	r3, 272ae <att_chan_detach.part.15+0x36>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   272a4:	4601      	mov	r1, r0
   272a6:	230e      	movs	r3, #14
   272a8:	4620      	mov	r0, r4
   272aa:	f7e3 ffff 	bl	b2ac <att_handle_rsp>
	chan->att = NULL;
   272ae:	2300      	movs	r3, #0
   272b0:	6023      	str	r3, [r4, #0]
}
   272b2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   272b4:	f7f6 f95a 	bl	1d56c <net_buf_unref>
   272b8:	e7ea      	b.n	27290 <att_chan_detach.part.15+0x18>

000272ba <bt_att_disconnected>:
{
   272ba:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = att_chan->att;
   272bc:	4606      	mov	r6, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   272be:	f500 719a 	add.w	r1, r0, #308	; 0x134
	struct bt_att *att = att_chan->att;
   272c2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
{
   272c6:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   272c8:	f105 0028 	add.w	r0, r5, #40	; 0x28
   272cc:	f7ff fca0 	bl	26c10 <sys_slist_find_and_remove>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   272d0:	4630      	mov	r0, r6
   272d2:	f7ff ffd1 	bl	27278 <att_chan_detach.part.15>
	if (!sys_slist_is_empty(&att->chans)) {
   272d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   272d8:	b93b      	cbnz	r3, 272ea <bt_att_disconnected+0x30>
	att_reset(att);
   272da:	4628      	mov	r0, r5
   272dc:	f7e4 f84e 	bl	b37c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   272e0:	6820      	ldr	r0, [r4, #0]
}
   272e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_gatt_disconnected(ch->chan.conn);
   272e6:	f7e5 bc6f 	b.w	cbc8 <bt_gatt_disconnected>
}
   272ea:	bd70      	pop	{r4, r5, r6, pc}

000272ec <found_attr>:
	*found = attr;
   272ec:	6010      	str	r0, [r2, #0]
}
   272ee:	2000      	movs	r0, #0
   272f0:	4770      	bx	lr

000272f2 <gatt_ccc_changed>:
{
   272f2:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   272f4:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   272f6:	895a      	ldrh	r2, [r3, #10]
   272f8:	428a      	cmp	r2, r1
   272fa:	d003      	beq.n	27304 <gatt_ccc_changed+0x12>
		ccc->value = value;
   272fc:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   272fe:	68db      	ldr	r3, [r3, #12]
   27300:	b103      	cbz	r3, 27304 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   27302:	4718      	bx	r3
}
   27304:	4770      	bx	lr

00027306 <gatt_indicate_rsp>:
{
   27306:	b510      	push	{r4, lr}
   27308:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   2730a:	7da3      	ldrb	r3, [r4, #22]
   2730c:	3b01      	subs	r3, #1
   2730e:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   27310:	460a      	mov	r2, r1
   27312:	68a3      	ldr	r3, [r4, #8]
   27314:	4621      	mov	r1, r4
   27316:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   27318:	68e3      	ldr	r3, [r4, #12]
   2731a:	b12b      	cbz	r3, 27328 <gatt_indicate_rsp+0x22>
   2731c:	7da2      	ldrb	r2, [r4, #22]
   2731e:	b91a      	cbnz	r2, 27328 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   27320:	4620      	mov	r0, r4
}
   27322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   27326:	4718      	bx	r3
}
   27328:	bd10      	pop	{r4, pc}

0002732a <match_uuid>:
	data->attr = attr;
   2732a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2732c:	8091      	strh	r1, [r2, #4]
}
   2732e:	2000      	movs	r0, #0
   27330:	4770      	bx	lr

00027332 <ccc_set_cb>:
}
   27332:	2000      	movs	r0, #0
   27334:	4770      	bx	lr

00027336 <gen_hash_m>:
{
   27336:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27338:	6806      	ldr	r6, [r0, #0]
   2733a:	7835      	ldrb	r5, [r6, #0]
{
   2733c:	b089      	sub	sp, #36	; 0x24
   2733e:	4607      	mov	r7, r0
   27340:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   27342:	b10d      	cbz	r5, 27348 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   27344:	2501      	movs	r5, #1
   27346:	e014      	b.n	27372 <gen_hash_m+0x3c>
	switch (u16->val) {
   27348:	8873      	ldrh	r3, [r6, #2]
   2734a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2734e:	d004      	beq.n	2735a <gen_hash_m+0x24>
   27350:	d812      	bhi.n	27378 <gen_hash_m+0x42>
   27352:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   27356:	2b03      	cmp	r3, #3
   27358:	d8f4      	bhi.n	27344 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2735a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2735e:	2202      	movs	r2, #2
   27360:	f10d 010e 	add.w	r1, sp, #14
   27364:	4620      	mov	r0, r4
   27366:	f7fe fd5e 	bl	25e26 <tc_cmac_update>
   2736a:	b9d0      	cbnz	r0, 273a2 <gen_hash_m+0x6c>
			state->err = -EINVAL;
   2736c:	f06f 0315 	mvn.w	r3, #21
   27370:	65a3      	str	r3, [r4, #88]	; 0x58
}
   27372:	4628      	mov	r0, r5
   27374:	b009      	add	sp, #36	; 0x24
   27376:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   27378:	f642 1205 	movw	r2, #10501	; 0x2905
   2737c:	4293      	cmp	r3, r2
   2737e:	d8e1      	bhi.n	27344 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   27380:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   27384:	2202      	movs	r2, #2
   27386:	f10d 010e 	add.w	r1, sp, #14
   2738a:	4620      	mov	r0, r4
   2738c:	f7fe fd4b 	bl	25e26 <tc_cmac_update>
   27390:	2800      	cmp	r0, #0
   27392:	d0eb      	beq.n	2736c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   27394:	8873      	ldrh	r3, [r6, #2]
   27396:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2739a:	2202      	movs	r2, #2
   2739c:	f10d 010e 	add.w	r1, sp, #14
   273a0:	e017      	b.n	273d2 <gen_hash_m+0x9c>
		value = sys_cpu_to_le16(u16->val);
   273a2:	8873      	ldrh	r3, [r6, #2]
   273a4:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   273a8:	2202      	movs	r2, #2
   273aa:	f10d 010e 	add.w	r1, sp, #14
   273ae:	4620      	mov	r0, r4
   273b0:	f7fe fd39 	bl	25e26 <tc_cmac_update>
   273b4:	2800      	cmp	r0, #0
   273b6:	d0d9      	beq.n	2736c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   273b8:	2000      	movs	r0, #0
   273ba:	2310      	movs	r3, #16
   273bc:	eb0d 0203 	add.w	r2, sp, r3
   273c0:	9000      	str	r0, [sp, #0]
   273c2:	687e      	ldr	r6, [r7, #4]
   273c4:	4639      	mov	r1, r7
   273c6:	47b0      	blx	r6
		if (len < 0) {
   273c8:	1e02      	subs	r2, r0, #0
   273ca:	da01      	bge.n	273d0 <gen_hash_m+0x9a>
			state->err = len;
   273cc:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   273ce:	e7d0      	b.n	27372 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   273d0:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   273d2:	4620      	mov	r0, r4
   273d4:	f7fe fd27 	bl	25e26 <tc_cmac_update>
   273d8:	2800      	cmp	r0, #0
   273da:	d1b3      	bne.n	27344 <gen_hash_m+0xe>
   273dc:	e7c6      	b.n	2736c <gen_hash_m+0x36>

000273de <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   273de:	2207      	movs	r2, #7
   273e0:	f7fe bebe 	b.w	26160 <memcpy>

000273e4 <clear_ccc_cfg>:
{
   273e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   273e6:	2400      	movs	r4, #0
{
   273e8:	4605      	mov	r5, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   273ea:	4669      	mov	r1, sp
   273ec:	3001      	adds	r0, #1
   273ee:	9400      	str	r4, [sp, #0]
   273f0:	f8cd 4003 	str.w	r4, [sp, #3]
   273f4:	f7ff fff3 	bl	273de <bt_addr_le_copy>
	cfg->id = 0U;
   273f8:	702c      	strb	r4, [r5, #0]
	cfg->value = 0U;
   273fa:	812c      	strh	r4, [r5, #8]
}
   273fc:	b003      	add	sp, #12
   273fe:	bd30      	pop	{r4, r5, pc}

00027400 <atomic_and>:
   27400:	f3bf 8f5b 	dmb	ish
   27404:	e850 3f00 	ldrex	r3, [r0]
   27408:	ea03 0201 	and.w	r2, r3, r1
   2740c:	e840 2c00 	strex	ip, r2, [r0]
   27410:	f1bc 0f00 	cmp.w	ip, #0
   27414:	d1f6      	bne.n	27404 <atomic_and+0x4>
   27416:	f3bf 8f5b 	dmb	ish
}
   2741a:	4618      	mov	r0, r3
   2741c:	4770      	bx	lr

0002741e <clear_cf_cfg>:
{
   2741e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27420:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   27422:	2500      	movs	r5, #0
   27424:	4669      	mov	r1, sp
   27426:	3001      	adds	r0, #1
   27428:	9500      	str	r5, [sp, #0]
   2742a:	f8cd 5003 	str.w	r5, [sp, #3]
   2742e:	f7ff ffd6 	bl	273de <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   27432:	f104 0008 	add.w	r0, r4, #8
   27436:	2201      	movs	r2, #1
   27438:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2743a:	340c      	adds	r4, #12
   2743c:	f7fe feba 	bl	261b4 <memset>
   27440:	f3bf 8f5b 	dmb	ish
   27444:	e854 3f00 	ldrex	r3, [r4]
   27448:	e844 5200 	strex	r2, r5, [r4]
   2744c:	2a00      	cmp	r2, #0
   2744e:	d1f9      	bne.n	27444 <clear_cf_cfg+0x26>
   27450:	f3bf 8f5b 	dmb	ish
}
   27454:	b003      	add	sp, #12
   27456:	bd30      	pop	{r4, r5, pc}

00027458 <ccc_find_cfg>:
{
   27458:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2745a:	7803      	ldrb	r3, [r0, #0]
   2745c:	4293      	cmp	r3, r2
{
   2745e:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   27460:	d001      	beq.n	27466 <ccc_find_cfg+0xe>
	return NULL;
   27462:	2000      	movs	r0, #0
}
   27464:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   27466:	2207      	movs	r2, #7
   27468:	3001      	adds	r0, #1
   2746a:	f7fe fe52 	bl	26112 <memcmp>
		if (id == ccc->cfg[i].id &&
   2746e:	2800      	cmp	r0, #0
   27470:	d1f7      	bne.n	27462 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   27472:	4620      	mov	r0, r4
   27474:	e7f6      	b.n	27464 <ccc_find_cfg+0xc>

00027476 <find_ccc_cfg>:
{
   27476:	b513      	push	{r0, r1, r4, lr}
   27478:	1c4b      	adds	r3, r1, #1
   2747a:	460c      	mov	r4, r1
		if (conn) {
   2747c:	b140      	cbz	r0, 27490 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2747e:	461a      	mov	r2, r3
   27480:	7809      	ldrb	r1, [r1, #0]
   27482:	f7ff facb 	bl	26a1c <bt_conn_is_peer_addr_le>
   27486:	b900      	cbnz	r0, 2748a <find_ccc_cfg+0x14>
	return NULL;
   27488:	2400      	movs	r4, #0
}
   2748a:	4620      	mov	r0, r4
   2748c:	b002      	add	sp, #8
   2748e:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   27490:	9000      	str	r0, [sp, #0]
   27492:	2207      	movs	r2, #7
   27494:	f8cd 0003 	str.w	r0, [sp, #3]
   27498:	4669      	mov	r1, sp
   2749a:	4618      	mov	r0, r3
   2749c:	f7fe fe39 	bl	26112 <memcmp>
   274a0:	2800      	cmp	r0, #0
   274a2:	d1f1      	bne.n	27488 <find_ccc_cfg+0x12>
   274a4:	e7f1      	b.n	2748a <find_ccc_cfg+0x14>

000274a6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   274a6:	f3bf 8f5b 	dmb	ish
   274aa:	6800      	ldr	r0, [r0, #0]
   274ac:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   274b0:	4108      	asrs	r0, r1
}
   274b2:	f000 0001 	and.w	r0, r0, #1
   274b6:	4770      	bx	lr

000274b8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   274b8:	2301      	movs	r3, #1
   274ba:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   274be:	f3bf 8f5b 	dmb	ish
   274c2:	e850 3f00 	ldrex	r3, [r0]
   274c6:	430b      	orrs	r3, r1
   274c8:	e840 3200 	strex	r2, r3, [r0]
   274cc:	2a00      	cmp	r2, #0
   274ce:	d1f8      	bne.n	274c2 <atomic_set_bit+0xa>
   274d0:	f3bf 8f5b 	dmb	ish
}
   274d4:	4770      	bx	lr

000274d6 <sc_restore_rsp>:
{
   274d6:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   274d8:	f7e4 f9fa 	bl	b8d0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   274dc:	b140      	cbz	r0, 274f0 <sc_restore_rsp+0x1a>
   274de:	7a03      	ldrb	r3, [r0, #8]
   274e0:	07db      	lsls	r3, r3, #31
   274e2:	d505      	bpl.n	274f0 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   274e4:	2100      	movs	r1, #0
   274e6:	300c      	adds	r0, #12
}
   274e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   274ec:	f7ff bfe4 	b.w	274b8 <atomic_set_bit>
}
   274f0:	bd08      	pop	{r3, pc}

000274f2 <read_appearance>:
{
   274f2:	b513      	push	{r0, r1, r4, lr}
   274f4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   274f8:	4610      	mov	r0, r2
	if (offset > value_len) {
   274fa:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   274fc:	f04f 0200 	mov.w	r2, #0
   27500:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   27504:	d80d      	bhi.n	27522 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   27506:	f1c1 0402 	rsb	r4, r1, #2
   2750a:	429c      	cmp	r4, r3
   2750c:	bfa8      	it	ge
   2750e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   27510:	f10d 0306 	add.w	r3, sp, #6
   27514:	4622      	mov	r2, r4
   27516:	4419      	add	r1, r3
   27518:	f7fe fe22 	bl	26160 <memcpy>
}
   2751c:	4620      	mov	r0, r4
   2751e:	b002      	add	sp, #8
   27520:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   27522:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   27526:	e7f9      	b.n	2751c <read_appearance+0x2a>

00027528 <read_name>:
{
   27528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2752c:	4698      	mov	r8, r3
   2752e:	4616      	mov	r6, r2
   27530:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   27534:	f7e1 fc20 	bl	8d78 <bt_get_name>
   27538:	4607      	mov	r7, r0
				 strlen(name));
   2753a:	f7fe fda2 	bl	26082 <strlen>
	if (offset > value_len) {
   2753e:	b283      	uxth	r3, r0
   27540:	42ab      	cmp	r3, r5
   27542:	d30c      	bcc.n	2755e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   27544:	1b5c      	subs	r4, r3, r5
   27546:	4544      	cmp	r4, r8
   27548:	bfa8      	it	ge
   2754a:	4644      	movge	r4, r8
   2754c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2754e:	4622      	mov	r2, r4
   27550:	1979      	adds	r1, r7, r5
   27552:	4630      	mov	r0, r6
   27554:	f7fe fe04 	bl	26160 <memcpy>
}
   27558:	4620      	mov	r0, r4
   2755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2755e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   27562:	e7f9      	b.n	27558 <read_name+0x30>

00027564 <cf_read>:
{
   27564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27566:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   27568:	2300      	movs	r3, #0
{
   2756a:	4616      	mov	r6, r2
   2756c:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	uint8_t data[1] = {};
   27570:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   27574:	f7e4 f9ac 	bl	b8d0 <find_cf_cfg>
	if (cfg) {
   27578:	b128      	cbz	r0, 27586 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2757a:	f100 0108 	add.w	r1, r0, #8
   2757e:	2201      	movs	r2, #1
   27580:	a801      	add	r0, sp, #4
   27582:	f7fe fded 	bl	26160 <memcpy>
	if (offset > value_len) {
   27586:	2d01      	cmp	r5, #1
   27588:	d80d      	bhi.n	275a6 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2758a:	f1c5 0401 	rsb	r4, r5, #1
   2758e:	42bc      	cmp	r4, r7
   27590:	bfa8      	it	ge
   27592:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   27594:	ab01      	add	r3, sp, #4
   27596:	4622      	mov	r2, r4
   27598:	1959      	adds	r1, r3, r5
   2759a:	4630      	mov	r0, r6
   2759c:	f7fe fde0 	bl	26160 <memcpy>
}
   275a0:	4620      	mov	r0, r4
   275a2:	b003      	add	sp, #12
   275a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   275a6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   275aa:	e7f9      	b.n	275a0 <cf_read+0x3c>

000275ac <bt_gatt_attr_read_ccc>:
{
   275ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   275ae:	68c9      	ldr	r1, [r1, #12]
{
   275b0:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   275b4:	4616      	mov	r6, r2
   275b6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   275b8:	f7ff ff5d 	bl	27476 <find_ccc_cfg>
	if (cfg) {
   275bc:	b100      	cbz	r0, 275c0 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   275be:	8900      	ldrh	r0, [r0, #8]
   275c0:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   275c4:	2d02      	cmp	r5, #2
   275c6:	d80e      	bhi.n	275e6 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   275c8:	f1c5 0402 	rsb	r4, r5, #2
   275cc:	42bc      	cmp	r4, r7
   275ce:	bfa8      	it	ge
   275d0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   275d2:	f10d 0306 	add.w	r3, sp, #6
   275d6:	4622      	mov	r2, r4
   275d8:	1959      	adds	r1, r3, r5
   275da:	4630      	mov	r0, r6
   275dc:	f7fe fdc0 	bl	26160 <memcpy>
}
   275e0:	4620      	mov	r0, r4
   275e2:	b003      	add	sp, #12
   275e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   275e6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   275ea:	e7f9      	b.n	275e0 <bt_gatt_attr_read_ccc+0x34>

000275ec <bt_gatt_attr_read_service>:
{
   275ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   275ee:	68c9      	ldr	r1, [r1, #12]
{
   275f0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   275f4:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   275f6:	780a      	ldrb	r2, [r1, #0]
   275f8:	b992      	cbnz	r2, 27620 <bt_gatt_attr_read_service+0x34>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   275fa:	884a      	ldrh	r2, [r1, #2]
   275fc:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   27600:	2d02      	cmp	r5, #2
   27602:	d819      	bhi.n	27638 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   27604:	f1c5 0402 	rsb	r4, r5, #2
   27608:	429c      	cmp	r4, r3
   2760a:	bfa8      	it	ge
   2760c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2760e:	f10d 0306 	add.w	r3, sp, #6
   27612:	4622      	mov	r2, r4
   27614:	1959      	adds	r1, r3, r5
   27616:	f7fe fda3 	bl	26160 <memcpy>
}
   2761a:	4620      	mov	r0, r4
   2761c:	b003      	add	sp, #12
   2761e:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   27620:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   27622:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   27626:	d807      	bhi.n	27638 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   27628:	f1c5 0410 	rsb	r4, r5, #16
   2762c:	429c      	cmp	r4, r3
   2762e:	bfa8      	it	ge
   27630:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   27632:	4622      	mov	r2, r4
   27634:	4429      	add	r1, r5
   27636:	e7ee      	b.n	27616 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   27638:	f06f 0406 	mvn.w	r4, #6
   2763c:	e7ed      	b.n	2761a <bt_gatt_attr_read_service+0x2e>

0002763e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2763e:	2a02      	cmp	r2, #2
{
   27640:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   27642:	d108      	bne.n	27656 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   27644:	2300      	movs	r3, #0
   27646:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2764a:	461a      	mov	r2, r3
   2764c:	7a00      	ldrb	r0, [r0, #8]
   2764e:	f7e4 f82b 	bl	b6a8 <sc_save>
}
   27652:	2002      	movs	r0, #2
   27654:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   27656:	f7e4 fb5f 	bl	bd18 <sc_clear>
   2765a:	e7fa      	b.n	27652 <sc_ccc_cfg_write+0x14>

0002765c <bt_gatt_attr_value_handle>:
{
   2765c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2765e:	4604      	mov	r4, r0
   27660:	b910      	cbnz	r0, 27668 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   27662:	2000      	movs	r0, #0
}
   27664:	b002      	add	sp, #8
   27666:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   27668:	2300      	movs	r3, #0
   2766a:	f88d 3004 	strb.w	r3, [sp, #4]
   2766e:	a901      	add	r1, sp, #4
   27670:	f642 0303 	movw	r3, #10243	; 0x2803
   27674:	6800      	ldr	r0, [r0, #0]
   27676:	f8ad 3006 	strh.w	r3, [sp, #6]
   2767a:	f7fe ffda 	bl	26632 <bt_uuid_cmp>
   2767e:	2800      	cmp	r0, #0
   27680:	d1ef      	bne.n	27662 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   27682:	68e3      	ldr	r3, [r4, #12]
   27684:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   27686:	2800      	cmp	r0, #0
   27688:	d1ec      	bne.n	27664 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2768a:	4620      	mov	r0, r4
   2768c:	f7e4 fcec 	bl	c068 <bt_gatt_attr_get_handle>
   27690:	3001      	adds	r0, #1
   27692:	b280      	uxth	r0, r0
	return handle;
   27694:	e7e6      	b.n	27664 <bt_gatt_attr_value_handle+0x8>

00027696 <bt_gatt_attr_read_chrc>:
{
   27696:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   27698:	68ce      	ldr	r6, [r1, #12]
{
   2769a:	b087      	sub	sp, #28
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2769c:	4608      	mov	r0, r1
{
   2769e:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   276a0:	79b3      	ldrb	r3, [r6, #6]
   276a2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   276a6:	4617      	mov	r7, r2
   276a8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   276ac:	f7ff ffd6 	bl	2765c <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   276b0:	6831      	ldr	r1, [r6, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   276b2:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   276b6:	780b      	ldrb	r3, [r1, #0]
   276b8:	b99b      	cbnz	r3, 276e2 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   276ba:	884b      	ldrh	r3, [r1, #2]
   276bc:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   276c0:	2305      	movs	r3, #5
	if (offset > value_len) {
   276c2:	42ab      	cmp	r3, r5
   276c4:	d315      	bcc.n	276f2 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   276c6:	1b5b      	subs	r3, r3, r5
   276c8:	42a3      	cmp	r3, r4
   276ca:	bfa8      	it	ge
   276cc:	4623      	movge	r3, r4
   276ce:	b29c      	uxth	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   276d0:	ab01      	add	r3, sp, #4
   276d2:	4622      	mov	r2, r4
   276d4:	1959      	adds	r1, r3, r5
   276d6:	4638      	mov	r0, r7
   276d8:	f7fe fd42 	bl	26160 <memcpy>
}
   276dc:	4620      	mov	r0, r4
   276de:	b007      	add	sp, #28
   276e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   276e2:	2210      	movs	r2, #16
   276e4:	3101      	adds	r1, #1
   276e6:	f10d 0007 	add.w	r0, sp, #7
   276ea:	f7fe fd39 	bl	26160 <memcpy>
		value_len += 16U;
   276ee:	2313      	movs	r3, #19
   276f0:	e7e7      	b.n	276c2 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   276f2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   276f6:	e7f1      	b.n	276dc <bt_gatt_attr_read_chrc+0x46>

000276f8 <bt_gatt_foreach_attr>:
{
   276f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   276fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
   276fe:	2300      	movs	r3, #0
   27700:	9300      	str	r3, [sp, #0]
   27702:	461a      	mov	r2, r3
   27704:	f7e4 fcf4 	bl	c0f0 <bt_gatt_foreach_attr_type>
}
   27708:	b005      	add	sp, #20
   2770a:	f85d fb04 	ldr.w	pc, [sp], #4

0002770e <db_hash_process>:
	db_hash_gen(true);
   2770e:	2001      	movs	r0, #1
   27710:	f7e4 bda4 	b.w	c25c <db_hash_gen>

00027714 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   27714:	f7ff bd7e 	b.w	27214 <bt_att_get_mtu>

00027718 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   27718:	07d3      	lsls	r3, r2, #31
{
   2771a:	b510      	push	{r4, lr}
   2771c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2771e:	d504      	bpl.n	2772a <bt_gatt_check_perm+0x12>
   27720:	f014 0f15 	tst.w	r4, #21
   27724:	d017      	beq.n	27756 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   27726:	684b      	ldr	r3, [r1, #4]
   27728:	b1ab      	cbz	r3, 27756 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2772a:	0793      	lsls	r3, r2, #30
   2772c:	d504      	bpl.n	27738 <bt_gatt_check_perm+0x20>
   2772e:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   27732:	d012      	beq.n	2775a <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   27734:	688b      	ldr	r3, [r1, #8]
   27736:	b183      	cbz	r3, 2775a <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   27738:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2773a:	f014 0f30 	tst.w	r4, #48	; 0x30
   2773e:	d104      	bne.n	2774a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   27740:	f014 000c 	ands.w	r0, r4, #12
   27744:	bf18      	it	ne
   27746:	200f      	movne	r0, #15
}
   27748:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2774a:	f7ff f95c 	bl	26a06 <bt_conn_get_security>
   2774e:	2802      	cmp	r0, #2
   27750:	d8f6      	bhi.n	27740 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   27752:	2005      	movs	r0, #5
   27754:	e7f8      	b.n	27748 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   27756:	2002      	movs	r0, #2
   27758:	e7f6      	b.n	27748 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2775a:	2003      	movs	r0, #3
   2775c:	e7f4      	b.n	27748 <bt_gatt_check_perm+0x30>

0002775e <bt_gatt_change_aware>:
{
   2775e:	b570      	push	{r4, r5, r6, lr}
   27760:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   27762:	f7e4 f8b5 	bl	b8d0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   27766:	b910      	cbnz	r0, 2776e <bt_gatt_change_aware+0x10>
		return true;
   27768:	2501      	movs	r5, #1
}
   2776a:	4628      	mov	r0, r5
   2776c:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2776e:	7a03      	ldrb	r3, [r0, #8]
   27770:	07db      	lsls	r3, r3, #31
   27772:	d5f9      	bpl.n	27768 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   27774:	f100 040c 	add.w	r4, r0, #12
   27778:	2100      	movs	r1, #0
   2777a:	4620      	mov	r0, r4
   2777c:	f7ff fe93 	bl	274a6 <atomic_test_bit>
   27780:	4606      	mov	r6, r0
   27782:	2800      	cmp	r0, #0
   27784:	d1f0      	bne.n	27768 <bt_gatt_change_aware+0xa>
	if (!req) {
   27786:	2d00      	cmp	r5, #0
   27788:	d0ef      	beq.n	2776a <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2778a:	2101      	movs	r1, #1
   2778c:	4620      	mov	r0, r4
   2778e:	f7ff fe8a 	bl	274a6 <atomic_test_bit>
   27792:	4605      	mov	r5, r0
   27794:	b148      	cbz	r0, 277aa <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27796:	f06f 0102 	mvn.w	r1, #2
   2779a:	4620      	mov	r0, r4
   2779c:	f7ff fe30 	bl	27400 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   277a0:	4631      	mov	r1, r6
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   277a2:	4620      	mov	r0, r4
   277a4:	f7ff fe88 	bl	274b8 <atomic_set_bit>
	return false;
   277a8:	e7df      	b.n	2776a <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   277aa:	2101      	movs	r1, #1
   277ac:	e7f9      	b.n	277a2 <bt_gatt_change_aware+0x44>

000277ae <bt_smp_recv>:
{
   277ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   277b0:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   277b2:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   277b4:	f04f 32ff 	mov.w	r2, #4294967295
   277b8:	f04f 33ff 	mov.w	r3, #4294967295
   277bc:	4608      	mov	r0, r1
   277be:	f7ff f9ea 	bl	26b96 <bt_l2cap_create_pdu_timeout>
   277c2:	f100 0608 	add.w	r6, r0, #8
   277c6:	4605      	mov	r5, r0
   277c8:	2101      	movs	r1, #1
   277ca:	4630      	mov	r0, r6
   277cc:	f7f5 ffe4 	bl	1d798 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   277d0:	2405      	movs	r4, #5
   277d2:	7004      	strb	r4, [r0, #0]
   277d4:	2101      	movs	r1, #1
   277d6:	4630      	mov	r0, r6
   277d8:	f7f5 ffde 	bl	1d798 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   277dc:	7004      	strb	r4, [r0, #0]
   277de:	2400      	movs	r4, #0
   277e0:	9400      	str	r4, [sp, #0]
   277e2:	4623      	mov	r3, r4
   277e4:	462a      	mov	r2, r5
   277e6:	2106      	movs	r1, #6
   277e8:	4638      	mov	r0, r7
   277ea:	f7ff f9d7 	bl	26b9c <bt_l2cap_send_cb>
}
   277ee:	4620      	mov	r0, r4
   277f0:	b003      	add	sp, #12
   277f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000277f4 <bt_smp_sign>:
   277f4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   277f8:	4770      	bx	lr

000277fa <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   277fa:	2000      	movs	r0, #0
   277fc:	4770      	bx	lr

000277fe <model_start>:
	if (mod->cb && mod->cb->start) {
   277fe:	6943      	ldr	r3, [r0, #20]
   27800:	b113      	cbz	r3, 27808 <model_start+0xa>
   27802:	685b      	ldr	r3, [r3, #4]
   27804:	b103      	cbz	r3, 27808 <model_start+0xa>
		mod->cb->start(mod);
   27806:	4718      	bx	r3
}
   27808:	4770      	bx	lr

0002780a <bt_mesh_is_provisioned>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
   2780a:	f7e5 ba6b 	b.w	cce4 <atomic_test_bit.constprop.4>

0002780e <bt_mesh_init>:
{
   2780e:	b538      	push	{r3, r4, r5, lr}
   27810:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   27812:	4608      	mov	r0, r1
   27814:	f7e9 fccc 	bl	111b0 <bt_mesh_comp_register>
	if (err) {
   27818:	4604      	mov	r4, r0
   2781a:	b9a0      	cbnz	r0, 27846 <bt_mesh_init+0x38>
		bt_mesh_proxy_init();
   2781c:	f7ee feb4 	bl	16588 <bt_mesh_proxy_init>
		err = bt_mesh_prov_init(prov);
   27820:	4628      	mov	r0, r5
   27822:	f7ed f9a1 	bl	14b68 <bt_mesh_prov_init>
		if (err) {
   27826:	4604      	mov	r4, r0
   27828:	b968      	cbnz	r0, 27846 <bt_mesh_init+0x38>
	bt_mesh_cfg_init();
   2782a:	f7e5 fbbb 	bl	cfa4 <bt_mesh_cfg_init>
	bt_mesh_net_init();
   2782e:	f7e6 fd09 	bl	e244 <bt_mesh_net_init>
	bt_mesh_trans_init();
   27832:	f7e8 f819 	bl	f868 <bt_mesh_trans_init>
	bt_mesh_hb_init();
   27836:	f7e9 f803 	bl	10840 <bt_mesh_hb_init>
	bt_mesh_beacon_init();
   2783a:	f7e5 fe6d 	bl	d518 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   2783e:	f7eb ffad 	bl	1379c <bt_mesh_adv_init>
		bt_mesh_settings_init();
   27842:	f7ec f8a7 	bl	13994 <bt_mesh_settings_init>
}
   27846:	4620      	mov	r0, r4
   27848:	bd38      	pop	{r3, r4, r5, pc}

0002784a <bt_mesh_beacon_enabled>:
	return atomic_test_bit(bt_mesh.flags, BT_MESH_BEACON);
   2784a:	2007      	movs	r0, #7
   2784c:	f7e5 bb0a 	b.w	ce64 <atomic_test_bit.constprop.6>

00027850 <bt_mesh_gatt_proxy_set>:
}
   27850:	f06f 0022 	mvn.w	r0, #34	; 0x22
   27854:	4770      	bx	lr

00027856 <bt_mesh_gatt_proxy_get>:
}
   27856:	2002      	movs	r0, #2
   27858:	4770      	bx	lr

0002785a <bt_mesh_friend_set>:
   2785a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2785e:	4770      	bx	lr

00027860 <bt_mesh_friend_get>:
   27860:	2002      	movs	r0, #2
   27862:	4770      	bx	lr

00027864 <bt_mesh_relay_set>:
}
   27864:	f06f 0022 	mvn.w	r0, #34	; 0x22
   27868:	4770      	bx	lr

0002786a <bt_mesh_relay_get>:
	return atomic_test_bit(bt_mesh.flags, feature_flag) ?
   2786a:	2006      	movs	r0, #6
   2786c:	f7e5 bafa 	b.w	ce64 <atomic_test_bit.constprop.6>

00027870 <bt_mesh_relay_retransmit_get>:
}
   27870:	2000      	movs	r0, #0
   27872:	4770      	bx	lr

00027874 <bt_mesh_fixed_group_match>:
{
   27874:	b508      	push	{r3, lr}
	switch (addr) {
   27876:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   2787a:	4298      	cmp	r0, r3
   2787c:	d006      	beq.n	2788c <bt_mesh_fixed_group_match+0x18>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_FEATURE_ENABLED);
   2787e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27882:	4298      	cmp	r0, r3
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   27884:	bf14      	ite	ne
   27886:	2000      	movne	r0, #0
   27888:	2001      	moveq	r0, #1
}
   2788a:	bd08      	pop	{r3, pc}
		return (bt_mesh_relay_get() == BT_MESH_FEATURE_ENABLED);
   2788c:	f7ff ffed 	bl	2786a <bt_mesh_relay_get>
   27890:	2801      	cmp	r0, #1
   27892:	e7f7      	b.n	27884 <bt_mesh_fixed_group_match+0x10>

00027894 <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   27894:	7943      	ldrb	r3, [r0, #5]
   27896:	7103      	strb	r3, [r0, #4]
	sub->beacons_cur = 0U;
   27898:	2300      	movs	r3, #0
   2789a:	7143      	strb	r3, [r0, #5]
}
   2789c:	4770      	bx	lr

0002789e <cache_check>:
{
   2789e:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   278a0:	2215      	movs	r2, #21
   278a2:	3006      	adds	r0, #6
   278a4:	f7fe fc35 	bl	26112 <memcmp>
}
   278a8:	fab0 f080 	clz	r0, r0
   278ac:	0940      	lsrs	r0, r0, #5
   278ae:	bd08      	pop	{r3, pc}

000278b0 <beacon_complete>:
{
   278b0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   278b4:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
   278b6:	f002 fda3 	bl	2a400 <z_impl_k_uptime_ticks>
   278ba:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   278be:	fba0 bc04 	umull	fp, ip, r0, r4
   278c2:	fb04 cc01 	mla	ip, r4, r1, ip
   278c6:	ea4f 32db 	mov.w	r2, fp, lsr #15
   278ca:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
	return (uint32_t)k_uptime_get();
   278ce:	602a      	str	r2, [r5, #0]
}
   278d0:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

000278d4 <subnet_evt>:
	if (evt != BT_MESH_KEY_DELETED) {
   278d4:	2901      	cmp	r1, #1
   278d6:	d001      	beq.n	278dc <subnet_evt+0x8>
		bt_mesh_beacon_update(sub);
   278d8:	f7e5 bdf6 	b.w	d4c8 <bt_mesh_beacon_update>
}
   278dc:	4770      	bx	lr

000278de <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   278de:	2200      	movs	r2, #0
   278e0:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   278e2:	f7e5 bdf1 	b.w	d4c8 <bt_mesh_beacon_update>

000278e6 <sys_get_be24>:
	return ((uint16_t)src[0] << 8) | src[1];
   278e6:	7842      	ldrb	r2, [r0, #1]
   278e8:	7883      	ldrb	r3, [r0, #2]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   278ea:	7800      	ldrb	r0, [r0, #0]
   278ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
   278f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   278f4:	4770      	bx	lr

000278f6 <net_encrypt>:
{
   278f6:	b570      	push	{r4, r5, r6, lr}
   278f8:	460d      	mov	r5, r1
   278fa:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   278fc:	4601      	mov	r1, r0
   278fe:	1c68      	adds	r0, r5, #1
{
   27900:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   27902:	f000 fa8e 	bl	27e22 <bt_mesh_net_encrypt>
	if (err) {
   27906:	b938      	cbnz	r0, 27918 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   27908:	f105 0211 	add.w	r2, r5, #17
   2790c:	4631      	mov	r1, r6
   2790e:	6820      	ldr	r0, [r4, #0]
}
   27910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   27914:	f000 ba5c 	b.w	27dd0 <bt_mesh_net_obfuscate>
}
   27918:	bd70      	pop	{r4, r5, r6, pc}

0002791a <bt_mesh_net_clear>:
{
   2791a:	b508      	push	{r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_NET_PENDING);
   2791c:	2003      	movs	r0, #3
   2791e:	f7eb ffd9 	bl	138d4 <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_IV_PENDING);
   27922:	2004      	movs	r0, #4
   27924:	f7eb ffd6 	bl	138d4 <bt_mesh_settings_store_schedule>
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   27928:	2007      	movs	r0, #7
}
   2792a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_CFG_PENDING);
   2792e:	f7eb bfd1 	b.w	138d4 <bt_mesh_settings_store_schedule>

00027932 <subnet_del>:
{
   27932:	b510      	push	{r4, lr}
   27934:	4604      	mov	r4, r0
		update_subnet_settings(sub->net_idx, false);
   27936:	2100      	movs	r1, #0
   27938:	8b80      	ldrh	r0, [r0, #28]
   2793a:	f7e6 fdef 	bl	e51c <update_subnet_settings>
	bt_mesh_net_loopback_clear(sub->net_idx);
   2793e:	8ba0      	ldrh	r0, [r4, #28]
   27940:	f7e6 fab6 	bl	deb0 <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   27944:	2101      	movs	r1, #1
   27946:	4620      	mov	r0, r4
   27948:	f7e6 fd38 	bl	e3bc <subnet_evt>
	(void)memset(sub, 0, sizeof(*sub));
   2794c:	22c0      	movs	r2, #192	; 0xc0
   2794e:	2100      	movs	r1, #0
   27950:	4620      	mov	r0, r4
   27952:	f7fe fc2f 	bl	261b4 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   27956:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2795a:	83a3      	strh	r3, [r4, #28]
}
   2795c:	bd10      	pop	{r4, pc}

0002795e <bt_mesh_subnet_store>:
	update_subnet_settings(net_idx, true);
   2795e:	2101      	movs	r1, #1
   27960:	f7e6 bddc 	b.w	e51c <update_subnet_settings>

00027964 <key_refresh>:
{
   27964:	b538      	push	{r3, r4, r5, lr}
   27966:	4604      	mov	r4, r0
	switch (new_phase) {
   27968:	2903      	cmp	r1, #3
   2796a:	d809      	bhi.n	27980 <key_refresh+0x1c>
   2796c:	e8df f001 	tbb	[pc, r1]
   27970:	110d0213 	.word	0x110d0213
		sub->kr_phase = new_phase;
   27974:	2301      	movs	r3, #1
   27976:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   27978:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   2797a:	4620      	mov	r0, r4
   2797c:	f7e6 fd1e 	bl	e3bc <subnet_evt>
		bt_mesh_subnet_store(sub->net_idx);
   27980:	8ba0      	ldrh	r0, [r4, #28]
}
   27982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_subnet_store(sub->net_idx);
   27986:	f7ff bfea 	b.w	2795e <bt_mesh_subnet_store>
		sub->kr_phase = new_phase;
   2798a:	2302      	movs	r3, #2
   2798c:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   2798e:	2103      	movs	r1, #3
   27990:	e7f3      	b.n	2797a <key_refresh+0x16>
		if (sub->kr_phase == BT_MESH_KR_NORMAL) {
   27992:	7f83      	ldrb	r3, [r0, #30]
   27994:	b163      	cbz	r3, 279b0 <key_refresh+0x4c>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   27996:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   27998:	f104 0176 	add.w	r1, r4, #118	; 0x76
		sub->kr_phase = BT_MESH_KR_NORMAL;
   2799c:	77a5      	strb	r5, [r4, #30]
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   2799e:	224a      	movs	r2, #74	; 0x4a
   279a0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   279a4:	f7fe fbdc 	bl	26160 <memcpy>
		sub->keys[1].valid = 0U;
   279a8:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   279ac:	2104      	movs	r1, #4
   279ae:	e7e4      	b.n	2797a <key_refresh+0x16>
}
   279b0:	bd38      	pop	{r3, r4, r5, pc}

000279b2 <bt_mesh_kr_update>:
	if (!new_key) {
   279b2:	b16a      	cbz	r2, 279d0 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   279b4:	7f83      	ldrb	r3, [r0, #30]
   279b6:	2b01      	cmp	r3, #1
   279b8:	d105      	bne.n	279c6 <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   279ba:	2900      	cmp	r1, #0
   279bc:	bf14      	ite	ne
   279be:	2102      	movne	r1, #2
   279c0:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   279c2:	f7ff bfcf 	b.w	27964 <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   279c6:	2b02      	cmp	r3, #2
   279c8:	d102      	bne.n	279d0 <bt_mesh_kr_update+0x1e>
   279ca:	b909      	cbnz	r1, 279d0 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   279cc:	2103      	movs	r1, #3
   279ce:	e7f8      	b.n	279c2 <bt_mesh_kr_update+0x10>
}
   279d0:	4770      	bx	lr

000279d2 <bt_mesh_subnet_exists>:
{
   279d2:	b508      	push	{r3, lr}
   279d4:	f7e6 fd5a 	bl	e48c <bt_mesh_subnet_get.part.1>
}
   279d8:	3000      	adds	r0, #0
   279da:	bf18      	it	ne
   279dc:	2001      	movne	r0, #1
   279de:	bd08      	pop	{r3, pc}

000279e0 <bt_mesh_subnet_update>:
{
   279e0:	b538      	push	{r3, r4, r5, lr}
   279e2:	460c      	mov	r4, r1
   279e4:	f7e6 fd52 	bl	e48c <bt_mesh_subnet_get.part.1>
	if (!sub) {
   279e8:	4605      	mov	r5, r0
   279ea:	b330      	cbz	r0, 27a3a <bt_mesh_subnet_update+0x5a>
	switch (sub->kr_phase) {
   279ec:	7f83      	ldrb	r3, [r0, #30]
   279ee:	2b03      	cmp	r3, #3
   279f0:	d815      	bhi.n	27a1e <bt_mesh_subnet_update+0x3e>
   279f2:	e8df f003 	tbb	[pc, r3]
   279f6:	0b02      	.short	0x0b02
   279f8:	1212      	.short	0x1212
		if (!memcmp(key, sub->keys[0].net, 16)) {
   279fa:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   279fe:	2210      	movs	r2, #16
   27a00:	4620      	mov	r0, r4
   27a02:	f7fe fb86 	bl	26112 <memcmp>
   27a06:	b950      	cbnz	r0, 27a1e <bt_mesh_subnet_update+0x3e>
			return STATUS_IDX_ALREADY_STORED;
   27a08:	2006      	movs	r0, #6
   27a0a:	e015      	b.n	27a38 <bt_mesh_subnet_update+0x58>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   27a0c:	f100 0177 	add.w	r1, r0, #119	; 0x77
   27a10:	2210      	movs	r2, #16
   27a12:	4620      	mov	r0, r4
   27a14:	f7fe fb7d 	bl	26112 <memcmp>
   27a18:	b170      	cbz	r0, 27a38 <bt_mesh_subnet_update+0x58>
		return STATUS_CANNOT_UPDATE;
   27a1a:	200b      	movs	r0, #11
   27a1c:	e00c      	b.n	27a38 <bt_mesh_subnet_update+0x58>
	err = net_keys_create(&sub->keys[1], key);
   27a1e:	4621      	mov	r1, r4
   27a20:	f105 0076 	add.w	r0, r5, #118	; 0x76
   27a24:	f7e6 fcf0 	bl	e408 <net_keys_create>
	if (err) {
   27a28:	4604      	mov	r4, r0
   27a2a:	2800      	cmp	r0, #0
   27a2c:	d1f5      	bne.n	27a1a <bt_mesh_subnet_update+0x3a>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   27a2e:	4628      	mov	r0, r5
   27a30:	2101      	movs	r1, #1
   27a32:	f7ff ff97 	bl	27964 <key_refresh>
	return STATUS_SUCCESS;
   27a36:	4620      	mov	r0, r4
}
   27a38:	bd38      	pop	{r3, r4, r5, pc}
		return STATUS_INVALID_NETKEY;
   27a3a:	2004      	movs	r0, #4
   27a3c:	e7fc      	b.n	27a38 <bt_mesh_subnet_update+0x58>

00027a3e <bt_mesh_subnet_del>:
{
   27a3e:	b508      	push	{r3, lr}
   27a40:	f7e6 fd24 	bl	e48c <bt_mesh_subnet_get.part.1>
	if (!sub) {
   27a44:	b118      	cbz	r0, 27a4e <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   27a46:	f7ff ff74 	bl	27932 <subnet_del>
	return STATUS_SUCCESS;
   27a4a:	2000      	movs	r0, #0
}
   27a4c:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   27a4e:	2004      	movs	r0, #4
   27a50:	e7fc      	b.n	27a4c <bt_mesh_subnet_del+0xe>

00027a52 <bt_mesh_friend_cred_create>:
{
   27a52:	b530      	push	{r4, r5, lr}
   27a54:	b087      	sub	sp, #28
	p[0] = 0x01;
   27a56:	2501      	movs	r5, #1
{
   27a58:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	p[0] = 0x01;
   27a5c:	f88d 500c 	strb.w	r5, [sp, #12]
	dst[1] = val;
   27a60:	f88d 100e 	strb.w	r1, [sp, #14]
	dst[0] = val >> 8;
   27a64:	0a0d      	lsrs	r5, r1, #8
	dst[1] = val;
   27a66:	f88d 2010 	strb.w	r2, [sp, #16]
	dst[0] = val >> 8;
   27a6a:	0a11      	lsrs	r1, r2, #8
	dst[1] = val;
   27a6c:	f88d 3012 	strb.w	r3, [sp, #18]
	dst[0] = val >> 8;
   27a70:	0a1a      	lsrs	r2, r3, #8
   27a72:	0a23      	lsrs	r3, r4, #8
   27a74:	f88d 3013 	strb.w	r3, [sp, #19]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
   27a78:	f100 0311 	add.w	r3, r0, #17
   27a7c:	9301      	str	r3, [sp, #4]
   27a7e:	1c43      	adds	r3, r0, #1
   27a80:	f88d 100f 	strb.w	r1, [sp, #15]
   27a84:	f88d 2011 	strb.w	r2, [sp, #17]
   27a88:	9300      	str	r3, [sp, #0]
   27a8a:	2209      	movs	r2, #9
   27a8c:	4603      	mov	r3, r0
   27a8e:	a903      	add	r1, sp, #12
   27a90:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27a92:	f88d 500d 	strb.w	r5, [sp, #13]
	dst[1] = val;
   27a96:	f88d 4014 	strb.w	r4, [sp, #20]
   27a9a:	f7e8 ff4b 	bl	10934 <bt_mesh_k2>
}
   27a9e:	b007      	add	sp, #28
   27aa0:	bd30      	pop	{r4, r5, pc}

00027aa2 <bt_mesh_subnet_kr_phase_get>:
{
   27aa2:	b508      	push	{r3, lr}
   27aa4:	f7e6 fcf2 	bl	e48c <bt_mesh_subnet_get.part.1>
	if (!sub) {
   27aa8:	b118      	cbz	r0, 27ab2 <bt_mesh_subnet_kr_phase_get+0x10>
	*phase = sub->kr_phase;
   27aaa:	7f83      	ldrb	r3, [r0, #30]
	return STATUS_SUCCESS;
   27aac:	2000      	movs	r0, #0
   27aae:	700b      	strb	r3, [r1, #0]
}
   27ab0:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   27ab2:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   27ab4:	2004      	movs	r0, #4
   27ab6:	e7fa      	b.n	27aae <bt_mesh_subnet_kr_phase_get+0xc>

00027ab8 <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   27ab8:	2902      	cmp	r1, #2
{
   27aba:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   27abc:	d006      	beq.n	27acc <bt_mesh_subnet_node_id_set+0x14>
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   27abe:	f7e6 fce5 	bl	e48c <bt_mesh_subnet_get.part.1>
	if (!sub) {
   27ac2:	2800      	cmp	r0, #0
		return STATUS_FEAT_NOT_SUPP;
   27ac4:	bf0c      	ite	eq
   27ac6:	2004      	moveq	r0, #4
   27ac8:	200a      	movne	r0, #10
}
   27aca:	bd08      	pop	{r3, pc}
		return STATUS_CANNOT_SET;
   27acc:	200f      	movs	r0, #15
   27ace:	e7fc      	b.n	27aca <bt_mesh_subnet_node_id_set+0x12>

00027ad0 <bt_mesh_subnet_node_id_get>:
{
   27ad0:	b508      	push	{r3, lr}
   27ad2:	f7e6 fcdb 	bl	e48c <bt_mesh_subnet_get.part.1>
	if (!sub) {
   27ad6:	b118      	cbz	r0, 27ae0 <bt_mesh_subnet_node_id_get+0x10>
	*node_id = sub->node_id;
   27ad8:	7fc3      	ldrb	r3, [r0, #31]
	return STATUS_SUCCESS;
   27ada:	2000      	movs	r0, #0
   27adc:	700b      	strb	r3, [r1, #0]
}
   27ade:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   27ae0:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   27ae2:	2004      	movs	r0, #4
   27ae4:	e7fa      	b.n	27adc <bt_mesh_subnet_node_id_get+0xc>

00027ae6 <bt_mesh_subnet_get>:
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
   27ae6:	f7e6 bcd1 	b.w	e48c <bt_mesh_subnet_get.part.1>

00027aea <app_key_del>:
{
   27aea:	b510      	push	{r4, lr}
		update_app_key_settings(app->app_idx, false);
   27aec:	2100      	movs	r1, #0
{
   27aee:	4604      	mov	r4, r0
		update_app_key_settings(app->app_idx, false);
   27af0:	8840      	ldrh	r0, [r0, #2]
   27af2:	f7e6 ff5b 	bl	e9ac <update_app_key_settings>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   27af6:	4620      	mov	r0, r4
   27af8:	2101      	movs	r1, #1
   27afa:	f7e6 fef7 	bl	e8ec <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   27afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27b02:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   27b04:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   27b06:	1d60      	adds	r0, r4, #5
   27b08:	2222      	movs	r2, #34	; 0x22
   27b0a:	2100      	movs	r1, #0
}
   27b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   27b10:	f7fe bb50 	b.w	261b4 <memset>

00027b14 <ack_timeout>:
{
   27b14:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   27b16:	f890 4020 	ldrb.w	r4, [r0, #32]
   27b1a:	2cff      	cmp	r4, #255	; 0xff
{
   27b1c:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   27b1e:	d102      	bne.n	27b26 <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   27b20:	f7e5 f9fa 	bl	cf18 <bt_mesh_default_ttl_get>
   27b24:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   27b26:	6a68      	ldr	r0, [r5, #36]	; 0x24
   27b28:	f7da f9a6 	bl	1e78 <__popcountsi2>
   27b2c:	7feb      	ldrb	r3, [r5, #31]
   27b2e:	f003 031f 	and.w	r3, r3, #31
   27b32:	1a18      	subs	r0, r3, r0
   27b34:	2364      	movs	r3, #100	; 0x64
   27b36:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   27b3a:	2296      	movs	r2, #150	; 0x96
   27b3c:	2032      	movs	r0, #50	; 0x32
   27b3e:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   27b42:	4418      	add	r0, r3
}
   27b44:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   27b48:	bfb8      	it	lt
   27b4a:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   27b4e:	bd38      	pop	{r3, r4, r5, pc}

00027b50 <seg_rx_assemble>:
{
   27b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   27b54:	688b      	ldr	r3, [r1, #8]
   27b56:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   27b58:	2400      	movs	r4, #0
   27b5a:	4606      	mov	r6, r0
   27b5c:	460d      	mov	r5, r1
   27b5e:	4617      	mov	r7, r2
   27b60:	808c      	strh	r4, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   27b62:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   27b66:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   27b68:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   27b6c:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   27b70:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   27b72:	bf14      	ite	ne
   27b74:	2208      	movne	r2, #8
   27b76:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   27b78:	fb04 3312 	mls	r3, r4, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   27b7c:	429a      	cmp	r2, r3
   27b7e:	bfa8      	it	ge
   27b80:	461a      	movge	r2, r3
   27b82:	4628      	mov	r0, r5
   27b84:	f001 ff0b 	bl	2999e <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   27b88:	7ff3      	ldrb	r3, [r6, #31]
   27b8a:	3401      	adds	r4, #1
   27b8c:	461a      	mov	r2, r3
   27b8e:	f003 031f 	and.w	r3, r3, #31
   27b92:	42a3      	cmp	r3, r4
   27b94:	dae7      	bge.n	27b66 <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   27b96:	0693      	lsls	r3, r2, #26
   27b98:	d407      	bmi.n	27baa <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   27b9a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   27b9e:	2f00      	cmp	r7, #0
   27ba0:	bf14      	ite	ne
   27ba2:	2208      	movne	r2, #8
   27ba4:	2204      	moveq	r2, #4
   27ba6:	1a9b      	subs	r3, r3, r2
   27ba8:	80ab      	strh	r3, [r5, #4]
}
   27baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027bae <sdu_try_decrypt>:
	if (ctx->seg) {
   27bae:	69d0      	ldr	r0, [r2, #28]
{
   27bb0:	b570      	push	{r4, r5, r6, lr}
   27bb2:	460d      	mov	r5, r1
   27bb4:	4614      	mov	r4, r2
	if (ctx->seg) {
   27bb6:	b118      	cbz	r0, 27bc0 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   27bb8:	7852      	ldrb	r2, [r2, #1]
   27bba:	6961      	ldr	r1, [r4, #20]
   27bbc:	f7ff ffc8 	bl	27b50 <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   27bc0:	69a3      	ldr	r3, [r4, #24]
   27bc2:	2200      	movs	r2, #0
   27bc4:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   27bc6:	689a      	ldr	r2, [r3, #8]
   27bc8:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   27bca:	4621      	mov	r1, r4
   27bcc:	6962      	ldr	r2, [r4, #20]
   27bce:	4628      	mov	r0, r5
}
   27bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   27bd4:	f000 b9f0 	b.w	27fb8 <bt_mesh_app_decrypt>

00027bd8 <schedule_retransmit>:
{
   27bd8:	b570      	push	{r4, r5, r6, lr}
	if (!tx->nack_count) {
   27bda:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   27bde:	2b00      	cmp	r3, #0
   27be0:	d039      	beq.n	27c56 <schedule_retransmit+0x7e>
	if (--tx->seg_pending || tx->sending) {
   27be2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
   27be6:	3b01      	subs	r3, #1
   27be8:	b2db      	uxtb	r3, r3
   27bea:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   27bee:	bb93      	cbnz	r3, 27c56 <schedule_retransmit+0x7e>
   27bf0:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   27bf4:	06db      	lsls	r3, r3, #27
   27bf6:	d42e      	bmi.n	27c56 <schedule_retransmit+0x7e>
	k_delayed_work_submit(&tx->retransmit,
   27bf8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   27bfc:	f100 0450 	add.w	r4, r0, #80	; 0x50
   27c00:	b133      	cbz	r3, 27c10 <schedule_retransmit+0x38>
   27c02:	2200      	movs	r2, #0
   27c04:	2300      	movs	r3, #0
   27c06:	4620      	mov	r0, r4
}
   27c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit(&tx->retransmit,
   27c0c:	f7e7 b928 	b.w	ee60 <k_delayed_work_submit>
					  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   27c10:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	; 0x3a
   27c14:	2b00      	cmp	r3, #0
   27c16:	bfc1      	itttt	gt
   27c18:	f890 1044 	ldrbgt.w	r1, [r0, #68]	; 0x44
   27c1c:	2232      	movgt	r2, #50	; 0x32
   27c1e:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   27c22:	fb12 3201 	smlabbgt	r2, r2, r1, r3
   27c26:	bfce      	itee	gt
   27c28:	17d3      	asrgt	r3, r2, #31
   27c2a:	2232      	movle	r2, #50	; 0x32
   27c2c:	2300      	movle	r3, #0
   27c2e:	03d9      	lsls	r1, r3, #15
   27c30:	03d0      	lsls	r0, r2, #15
   27c32:	f240 35e7 	movw	r5, #999	; 0x3e7
   27c36:	1940      	adds	r0, r0, r5
   27c38:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   27c3c:	f04f 0500 	mov.w	r5, #0
   27c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27c44:	f04f 0300 	mov.w	r3, #0
   27c48:	eb45 0101 	adc.w	r1, r5, r1
   27c4c:	f7da f8fc 	bl	1e48 <__aeabi_uldivmod>
   27c50:	4602      	mov	r2, r0
   27c52:	460b      	mov	r3, r1
   27c54:	e7d7      	b.n	27c06 <schedule_retransmit+0x2e>
}
   27c56:	bd70      	pop	{r4, r5, r6, pc}

00027c58 <seg_sent>:
	schedule_retransmit(tx);
   27c58:	4608      	mov	r0, r1
   27c5a:	f7ff bfbd 	b.w	27bd8 <schedule_retransmit>

00027c5e <seg_send_start>:
{
   27c5e:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   27c60:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
   27c64:	071b      	lsls	r3, r3, #28
{
   27c66:	460d      	mov	r5, r1
   27c68:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   27c6a:	d40b      	bmi.n	27c84 <seg_send_start+0x26>
   27c6c:	6c93      	ldr	r3, [r2, #72]	; 0x48
   27c6e:	b14b      	cbz	r3, 27c84 <seg_send_start+0x26>
   27c70:	681b      	ldr	r3, [r3, #0]
   27c72:	b13b      	cbz	r3, 27c84 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   27c74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   27c76:	4798      	blx	r3
		tx->started = 1U;
   27c78:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   27c7c:	f043 0308 	orr.w	r3, r3, #8
   27c80:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	if (err) {
   27c84:	b125      	cbz	r5, 27c90 <seg_send_start+0x32>
		schedule_retransmit(tx);
   27c86:	4620      	mov	r0, r4
}
   27c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   27c8c:	f7ff bfa4 	b.w	27bd8 <schedule_retransmit>
}
   27c90:	bd38      	pop	{r3, r4, r5, pc}

00027c92 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   27c92:	3850      	subs	r0, #80	; 0x50
   27c94:	f7e7 b9e2 	b.w	f05c <seg_tx_send_unacked>

00027c98 <bt_mesh_rpl_update>:
	rpl->src = rx->ctx.addr;
   27c98:	890b      	ldrh	r3, [r1, #8]
   27c9a:	8003      	strh	r3, [r0, #0]
	rpl->seq = rx->seq;
   27c9c:	690b      	ldr	r3, [r1, #16]
   27c9e:	6043      	str	r3, [r0, #4]
	rpl->old_iv = rx->old_iv;
   27ca0:	7d0b      	ldrb	r3, [r1, #20]
   27ca2:	f3c3 0300 	ubfx	r3, r3, #0, #1
   27ca6:	7083      	strb	r3, [r0, #2]
	entry->store = true;
   27ca8:	2301      	movs	r3, #1
   27caa:	70c3      	strb	r3, [r0, #3]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   27cac:	2000      	movs	r0, #0
   27cae:	f7eb be11 	b.w	138d4 <bt_mesh_settings_store_schedule>

00027cb2 <bt_mesh_rpl_clear>:
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_RPL_PENDING);
   27cb2:	2000      	movs	r0, #0
   27cb4:	f7eb be0e 	b.w	138d4 <bt_mesh_settings_store_schedule>

00027cb8 <sub_end>:
	notify_sub_end();
   27cb8:	f7e8 bb68 	b.w	1038c <notify_sub_end>

00027cbc <hb_publish_start_cb>:
	if (err) {
   27cbc:	4608      	mov	r0, r1
   27cbe:	b111      	cbz	r1, 27cc6 <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   27cc0:	4611      	mov	r1, r2
   27cc2:	f7e8 bb8f 	b.w	103e4 <hb_publish_end_cb>
}
   27cc6:	4770      	bx	lr

00027cc8 <sys_put_be32>:
	sys_put_be16(val >> 16, dst);
   27cc8:	0c03      	lsrs	r3, r0, #16
	dst[0] = val >> 8;
   27cca:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   27ccc:	704b      	strb	r3, [r1, #1]
	dst[0] = val >> 8;
   27cce:	f3c0 2307 	ubfx	r3, r0, #8, #8
   27cd2:	700a      	strb	r2, [r1, #0]
   27cd4:	708b      	strb	r3, [r1, #2]
	dst[1] = val;
   27cd6:	70c8      	strb	r0, [r1, #3]
}
   27cd8:	4770      	bx	lr

00027cda <create_app_nonce>:
{
   27cda:	b538      	push	{r3, r4, r5, lr}
	if (ctx->dev_key) {
   27cdc:	780b      	ldrb	r3, [r1, #0]
{
   27cde:	460c      	mov	r4, r1
	if (ctx->dev_key) {
   27ce0:	2b00      	cmp	r3, #0
   27ce2:	4601      	mov	r1, r0
		nonce[0] = 0x01;
   27ce4:	bf14      	ite	ne
   27ce6:	2302      	movne	r3, #2
   27ce8:	2301      	moveq	r3, #1
   27cea:	f801 3b01 	strb.w	r3, [r1], #1
{
   27cee:	4605      	mov	r5, r0
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   27cf0:	68a3      	ldr	r3, [r4, #8]
   27cf2:	7860      	ldrb	r0, [r4, #1]
   27cf4:	ea43 70c0 	orr.w	r0, r3, r0, lsl #31
   27cf8:	f7ff ffe6 	bl	27cc8 <sys_put_be32>
	sys_put_be16(ctx->src, &nonce[5]);
   27cfc:	8863      	ldrh	r3, [r4, #2]
	dst[1] = val;
   27cfe:	71ab      	strb	r3, [r5, #6]
	dst[0] = val >> 8;
   27d00:	0a1a      	lsrs	r2, r3, #8
   27d02:	716a      	strb	r2, [r5, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   27d04:	88a3      	ldrh	r3, [r4, #4]
	dst[1] = val;
   27d06:	722b      	strb	r3, [r5, #8]
	dst[0] = val >> 8;
   27d08:	0a1a      	lsrs	r2, r3, #8
   27d0a:	71ea      	strb	r2, [r5, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   27d0c:	f105 0109 	add.w	r1, r5, #9
   27d10:	68e0      	ldr	r0, [r4, #12]
}
   27d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_put_be32(ctx->iv_index, &nonce[9]);
   27d16:	f7ff bfd7 	b.w	27cc8 <sys_put_be32>

00027d1a <bt_mesh_aes_cmac>:
{
   27d1a:	b570      	push	{r4, r5, r6, lr}
   27d1c:	b0c2      	sub	sp, #264	; 0x108
   27d1e:	460d      	mov	r5, r1
   27d20:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   27d22:	4601      	mov	r1, r0
   27d24:	aa16      	add	r2, sp, #88	; 0x58
   27d26:	4668      	mov	r0, sp
{
   27d28:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   27d2a:	f7fe f851 	bl	25dd0 <tc_cmac_setup>
   27d2e:	b130      	cbz	r0, 27d3e <bt_mesh_aes_cmac+0x24>
   27d30:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   27d32:	b944      	cbnz	r4, 27d46 <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   27d34:	4669      	mov	r1, sp
   27d36:	4630      	mov	r0, r6
   27d38:	f7fe f8df 	bl	25efa <tc_cmac_final>
   27d3c:	b968      	cbnz	r0, 27d5a <bt_mesh_aes_cmac+0x40>
		return -EIO;
   27d3e:	f06f 0004 	mvn.w	r0, #4
}
   27d42:	b042      	add	sp, #264	; 0x108
   27d44:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   27d46:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   27d4a:	4668      	mov	r0, sp
   27d4c:	f7fe f86b 	bl	25e26 <tc_cmac_update>
   27d50:	3508      	adds	r5, #8
   27d52:	2800      	cmp	r0, #0
   27d54:	d0f3      	beq.n	27d3e <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   27d56:	3c01      	subs	r4, #1
   27d58:	e7eb      	b.n	27d32 <bt_mesh_aes_cmac+0x18>
	return 0;
   27d5a:	4620      	mov	r0, r4
   27d5c:	e7f1      	b.n	27d42 <bt_mesh_aes_cmac+0x28>

00027d5e <bt_mesh_aes_cmac_one>:
{
   27d5e:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   27d60:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   27d64:	2201      	movs	r2, #1
   27d66:	4669      	mov	r1, sp
   27d68:	f7ff ffd7 	bl	27d1a <bt_mesh_aes_cmac>
}
   27d6c:	b003      	add	sp, #12
   27d6e:	f85d fb04 	ldr.w	pc, [sp], #4

00027d72 <bt_mesh_s1>:
{
   27d72:	b530      	push	{r4, r5, lr}
   27d74:	b085      	sub	sp, #20
   27d76:	4604      	mov	r4, r0
   27d78:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   27d7a:	2210      	movs	r2, #16
   27d7c:	2100      	movs	r1, #0
   27d7e:	4668      	mov	r0, sp
   27d80:	f7fe fa18 	bl	261b4 <memset>
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   27d84:	4620      	mov	r0, r4
   27d86:	f7fe f97c 	bl	26082 <strlen>
   27d8a:	462b      	mov	r3, r5
   27d8c:	4602      	mov	r2, r0
   27d8e:	4621      	mov	r1, r4
   27d90:	4668      	mov	r0, sp
   27d92:	f7ff ffe4 	bl	27d5e <bt_mesh_aes_cmac_one>
}
   27d96:	3000      	adds	r0, #0
   27d98:	bf18      	it	ne
   27d9a:	2001      	movne	r0, #1
   27d9c:	b005      	add	sp, #20
   27d9e:	bd30      	pop	{r4, r5, pc}

00027da0 <bt_mesh_k1>:
{
   27da0:	b570      	push	{r4, r5, r6, lr}
   27da2:	9d04      	ldr	r5, [sp, #16]
   27da4:	4616      	mov	r6, r2
   27da6:	461c      	mov	r4, r3
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   27da8:	460a      	mov	r2, r1
   27daa:	462b      	mov	r3, r5
   27dac:	4601      	mov	r1, r0
   27dae:	4630      	mov	r0, r6
   27db0:	f7ff ffd5 	bl	27d5e <bt_mesh_aes_cmac_one>
	if (err < 0) {
   27db4:	2800      	cmp	r0, #0
   27db6:	db0a      	blt.n	27dce <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   27db8:	4620      	mov	r0, r4
   27dba:	f7fe f962 	bl	26082 <strlen>
   27dbe:	462b      	mov	r3, r5
   27dc0:	4602      	mov	r2, r0
   27dc2:	4621      	mov	r1, r4
   27dc4:	4628      	mov	r0, r5
}
   27dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   27dca:	f7ff bfc8 	b.w	27d5e <bt_mesh_aes_cmac_one>
}
   27dce:	bd70      	pop	{r4, r5, r6, pc}

00027dd0 <bt_mesh_net_obfuscate>:
{
   27dd0:	b570      	push	{r4, r5, r6, lr}
   27dd2:	b088      	sub	sp, #32
   27dd4:	4604      	mov	r4, r0
   27dd6:	460e      	mov	r6, r1
   27dd8:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
   27dda:	2100      	movs	r1, #0
   27ddc:	2210      	movs	r2, #16
   27dde:	4668      	mov	r0, sp
   27de0:	f7fe f9e8 	bl	261b4 <memset>
	sys_put_be32(iv_index, &priv_rand[5]);
   27de4:	f10d 0105 	add.w	r1, sp, #5
   27de8:	4630      	mov	r0, r6
   27dea:	f7ff ff6d 	bl	27cc8 <sys_put_be32>
	memcpy(&priv_rand[9], &pdu[7], 7);
   27dee:	2207      	movs	r2, #7
   27df0:	18a1      	adds	r1, r4, r2
   27df2:	f10d 0009 	add.w	r0, sp, #9
   27df6:	f7fe f9b3 	bl	26160 <memcpy>
	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
   27dfa:	aa04      	add	r2, sp, #16
   27dfc:	4669      	mov	r1, sp
   27dfe:	4628      	mov	r0, r5
   27e00:	f000 ff96 	bl	28d30 <bt_encrypt_be>
	if (err) {
   27e04:	b958      	cbnz	r0, 27e1e <bt_mesh_net_obfuscate+0x4e>
   27e06:	4623      	mov	r3, r4
   27e08:	aa04      	add	r2, sp, #16
   27e0a:	3406      	adds	r4, #6
		pdu[1 + i] ^= tmp[i];
   27e0c:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   27e10:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
   27e14:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
   27e16:	ea81 0105 	eor.w	r1, r1, r5
   27e1a:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
   27e1c:	d1f6      	bne.n	27e0c <bt_mesh_net_obfuscate+0x3c>
}
   27e1e:	b008      	add	sp, #32
   27e20:	bd70      	pop	{r4, r5, r6, pc}

00027e22 <bt_mesh_net_encrypt>:
{
   27e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27e26:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   27e28:	6809      	ldr	r1, [r1, #0]
   27e2a:	f891 9001 	ldrb.w	r9, [r1, #1]
   27e2e:	f891 8002 	ldrb.w	r8, [r1, #2]
   27e32:	f891 e003 	ldrb.w	lr, [r1, #3]
   27e36:	f891 c004 	ldrb.w	ip, [r1, #4]
   27e3a:	794f      	ldrb	r7, [r1, #5]
   27e3c:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   27e40:	4605      	mov	r5, r0
   27e42:	b089      	sub	sp, #36	; 0x24
   27e44:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   27e46:	bf14      	ite	ne
   27e48:	2608      	movne	r6, #8
   27e4a:	2604      	moveq	r6, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   27e4c:	798a      	ldrb	r2, [r1, #6]
   27e4e:	b363      	cbz	r3, 27eaa <bt_mesh_net_encrypt+0x88>
	nonce[0] = 0x03;
   27e50:	2303      	movs	r3, #3
   27e52:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   27e56:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   27e5a:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   27e5e:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   27e62:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   27e66:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   27e6a:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   27e6c:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   27e70:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   27e74:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   27e78:	f7ff ff26 	bl	27cc8 <sys_put_be32>
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   27e7c:	6822      	ldr	r2, [r4, #0]
   27e7e:	88a3      	ldrh	r3, [r4, #4]
   27e80:	3207      	adds	r2, #7
   27e82:	2100      	movs	r1, #0
   27e84:	e9cd 1100 	strd	r1, r1, [sp]
   27e88:	4628      	mov	r0, r5
   27e8a:	e9cd 2602 	strd	r2, r6, [sp, #8]
   27e8e:	3b07      	subs	r3, #7
   27e90:	a904      	add	r1, sp, #16
   27e92:	f7fe fba7 	bl	265e4 <bt_ccm_encrypt>
	if (!err) {
   27e96:	4605      	mov	r5, r0
   27e98:	b918      	cbnz	r0, 27ea2 <bt_mesh_net_encrypt+0x80>
		net_buf_simple_add(buf, mic_len);
   27e9a:	4631      	mov	r1, r6
   27e9c:	4620      	mov	r0, r4
   27e9e:	f7f5 fc7b 	bl	1d798 <net_buf_simple_add>
}
   27ea2:	4628      	mov	r0, r5
   27ea4:	b009      	add	sp, #36	; 0x24
   27ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   27eaa:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   27eae:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   27eb2:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   27eb6:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   27eba:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   27ebe:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   27ec2:	f88d 2016 	strb.w	r2, [sp, #22]
   27ec6:	e7d1      	b.n	27e6c <bt_mesh_net_encrypt+0x4a>

00027ec8 <bt_mesh_net_decrypt>:
{
   27ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27ecc:	460e      	mov	r6, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   27ece:	6809      	ldr	r1, [r1, #0]
   27ed0:	f891 9001 	ldrb.w	r9, [r1, #1]
   27ed4:	f891 8002 	ldrb.w	r8, [r1, #2]
   27ed8:	f891 e003 	ldrb.w	lr, [r1, #3]
   27edc:	f891 c004 	ldrb.w	ip, [r1, #4]
   27ee0:	794f      	ldrb	r7, [r1, #5]
   27ee2:	f019 0f80 	tst.w	r9, #128	; 0x80
{
   27ee6:	4605      	mov	r5, r0
   27ee8:	b089      	sub	sp, #36	; 0x24
   27eea:	4610      	mov	r0, r2
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   27eec:	bf14      	ite	ne
   27eee:	2408      	movne	r4, #8
   27ef0:	2404      	moveq	r4, #4
	if (IS_ENABLED(CONFIG_BT_MESH_PROXY) && proxy) {
   27ef2:	798a      	ldrb	r2, [r1, #6]
   27ef4:	b343      	cbz	r3, 27f48 <bt_mesh_net_decrypt+0x80>
	nonce[0] = 0x03;
   27ef6:	2303      	movs	r3, #3
   27ef8:	f8ad 3010 	strh.w	r3, [sp, #16]
	nonce[2] = pdu[2];
   27efc:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   27f00:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   27f04:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   27f08:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   27f0c:	f88d 2016 	strb.w	r2, [sp, #22]
	nonce[7] = 0U;
   27f10:	2300      	movs	r3, #0
	sys_put_be32(iv_index, &nonce[9]);
   27f12:	f10d 0119 	add.w	r1, sp, #25
	nonce[7] = 0U;
   27f16:	f88d 3017 	strb.w	r3, [sp, #23]
	nonce[8] = 0U;
   27f1a:	f88d 3018 	strb.w	r3, [sp, #24]
	sys_put_be32(iv_index, &nonce[9]);
   27f1e:	f7ff fed3 	bl	27cc8 <sys_put_be32>
	buf->len -= mic_len;
   27f22:	88b3      	ldrh	r3, [r6, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   27f24:	6832      	ldr	r2, [r6, #0]
	buf->len -= mic_len;
   27f26:	1b1b      	subs	r3, r3, r4
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   27f28:	3207      	adds	r2, #7
	buf->len -= mic_len;
   27f2a:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   27f2c:	2100      	movs	r1, #0
	buf->len -= mic_len;
   27f2e:	80b3      	strh	r3, [r6, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   27f30:	e9cd 1100 	strd	r1, r1, [sp]
   27f34:	e9cd 2402 	strd	r2, r4, [sp, #8]
   27f38:	3b07      	subs	r3, #7
   27f3a:	a904      	add	r1, sp, #16
   27f3c:	4628      	mov	r0, r5
   27f3e:	f7fe fb23 	bl	26588 <bt_ccm_decrypt>
}
   27f42:	b009      	add	sp, #36	; 0x24
   27f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nonce[0] = 0x00;
   27f48:	f88d 3010 	strb.w	r3, [sp, #16]
	nonce[1] = pdu[1];
   27f4c:	f88d 9011 	strb.w	r9, [sp, #17]
	nonce[2] = pdu[2];
   27f50:	f88d 8012 	strb.w	r8, [sp, #18]
	nonce[3] = pdu[3];
   27f54:	f88d e013 	strb.w	lr, [sp, #19]
	nonce[4] = pdu[4];
   27f58:	f88d c014 	strb.w	ip, [sp, #20]
	nonce[5] = pdu[5];
   27f5c:	f88d 7015 	strb.w	r7, [sp, #21]
	nonce[6] = pdu[6];
   27f60:	f88d 2016 	strb.w	r2, [sp, #22]
   27f64:	e7d5      	b.n	27f12 <bt_mesh_net_decrypt+0x4a>

00027f66 <bt_mesh_app_encrypt>:
{
   27f66:	b570      	push	{r4, r5, r6, lr}
   27f68:	460d      	mov	r5, r1
   27f6a:	b088      	sub	sp, #32
   27f6c:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   27f6e:	a804      	add	r0, sp, #16
{
   27f70:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   27f72:	f7ff feb2 	bl	27cda <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   27f76:	692b      	ldr	r3, [r5, #16]
   27f78:	7868      	ldrb	r0, [r5, #1]
   27f7a:	6822      	ldr	r2, [r4, #0]
   27f7c:	2b00      	cmp	r3, #0
   27f7e:	bf14      	ite	ne
   27f80:	2110      	movne	r1, #16
   27f82:	2100      	moveq	r1, #0
   27f84:	2800      	cmp	r0, #0
   27f86:	bf14      	ite	ne
   27f88:	2008      	movne	r0, #8
   27f8a:	2004      	moveq	r0, #4
   27f8c:	e9cd 3100 	strd	r3, r1, [sp]
   27f90:	e9cd 2002 	strd	r2, r0, [sp, #8]
   27f94:	88a3      	ldrh	r3, [r4, #4]
   27f96:	4630      	mov	r0, r6
   27f98:	a904      	add	r1, sp, #16
   27f9a:	f7fe fb23 	bl	265e4 <bt_ccm_encrypt>
	if (!err) {
   27f9e:	4606      	mov	r6, r0
   27fa0:	b938      	cbnz	r0, 27fb2 <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   27fa2:	786b      	ldrb	r3, [r5, #1]
   27fa4:	2b00      	cmp	r3, #0
   27fa6:	bf14      	ite	ne
   27fa8:	2108      	movne	r1, #8
   27faa:	2104      	moveq	r1, #4
   27fac:	4620      	mov	r0, r4
   27fae:	f7f5 fbf3 	bl	1d798 <net_buf_simple_add>
}
   27fb2:	4630      	mov	r0, r6
   27fb4:	b008      	add	sp, #32
   27fb6:	bd70      	pop	{r4, r5, r6, pc}

00027fb8 <bt_mesh_app_decrypt>:
{
   27fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27fba:	460d      	mov	r5, r1
   27fbc:	b089      	sub	sp, #36	; 0x24
   27fbe:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   27fc0:	a804      	add	r0, sp, #16
{
   27fc2:	4614      	mov	r4, r2
   27fc4:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   27fc6:	f7ff fe88 	bl	27cda <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   27fca:	692b      	ldr	r3, [r5, #16]
   27fcc:	7868      	ldrb	r0, [r5, #1]
   27fce:	6831      	ldr	r1, [r6, #0]
   27fd0:	2b00      	cmp	r3, #0
   27fd2:	bf14      	ite	ne
   27fd4:	2210      	movne	r2, #16
   27fd6:	2200      	moveq	r2, #0
   27fd8:	2800      	cmp	r0, #0
   27fda:	bf14      	ite	ne
   27fdc:	2008      	movne	r0, #8
   27fde:	2004      	moveq	r0, #4
   27fe0:	e9cd 1002 	strd	r1, r0, [sp, #8]
   27fe4:	e9cd 3200 	strd	r3, r2, [sp]
   27fe8:	a904      	add	r1, sp, #16
   27fea:	88a3      	ldrh	r3, [r4, #4]
   27fec:	6822      	ldr	r2, [r4, #0]
   27fee:	4638      	mov	r0, r7
   27ff0:	f7fe faca 	bl	26588 <bt_ccm_decrypt>
	if (!err) {
   27ff4:	4605      	mov	r5, r0
   27ff6:	b918      	cbnz	r0, 28000 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   27ff8:	88a1      	ldrh	r1, [r4, #4]
   27ffa:	4630      	mov	r0, r6
   27ffc:	f7f5 fbcc 	bl	1d798 <net_buf_simple_add>
}
   28000:	4628      	mov	r0, r5
   28002:	b009      	add	sp, #36	; 0x24
   28004:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028006 <bt_mesh_prov_conf_salt>:
{
   28006:	b530      	push	{r4, r5, lr}
   28008:	b085      	sub	sp, #20
   2800a:	4604      	mov	r4, r0
   2800c:	460d      	mov	r5, r1
	const uint8_t conf_salt_key[16] = { 0 };
   2800e:	2210      	movs	r2, #16
   28010:	2100      	movs	r1, #0
   28012:	4668      	mov	r0, sp
   28014:	f7fe f8ce 	bl	261b4 <memset>
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   28018:	462b      	mov	r3, r5
   2801a:	2291      	movs	r2, #145	; 0x91
   2801c:	4621      	mov	r1, r4
   2801e:	4668      	mov	r0, sp
   28020:	f7ff fe9d 	bl	27d5e <bt_mesh_aes_cmac_one>
}
   28024:	b005      	add	sp, #20
   28026:	bd30      	pop	{r4, r5, pc}

00028028 <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const uint8_t conf_key[16], const uint8_t rand[16],
		      const uint8_t auth[16], uint8_t conf[16])
{
   28028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2802a:	9100      	str	r1, [sp, #0]
   2802c:	2110      	movs	r1, #16
   2802e:	e9cd 1201 	strd	r1, r2, [sp, #4]
   28032:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   28034:	2202      	movs	r2, #2
   28036:	4669      	mov	r1, sp
   28038:	f7ff fe6f 	bl	27d1a <bt_mesh_aes_cmac>
}
   2803c:	b005      	add	sp, #20
   2803e:	f85d fb04 	ldr.w	pc, [sp], #4

00028042 <bt_mesh_prov_decrypt>:

int bt_mesh_prov_decrypt(const uint8_t key[16], uint8_t nonce[13],
			 const uint8_t data[25 + 8], uint8_t out[25])
{
   28042:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
   28044:	2408      	movs	r4, #8
   28046:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2804a:	2300      	movs	r3, #0
   2804c:	e9cd 3300 	strd	r3, r3, [sp]
   28050:	2319      	movs	r3, #25
   28052:	f7fe fa99 	bl	26588 <bt_ccm_decrypt>
}
   28056:	b004      	add	sp, #16
   28058:	bd10      	pop	{r4, pc}

0002805a <bt_mesh_beacon_auth>:
}

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   2805a:	b530      	push	{r4, r5, lr}
   2805c:	b089      	sub	sp, #36	; 0x24
   2805e:	4604      	mov	r4, r0
   28060:	4610      	mov	r0, r2
   28062:	461d      	mov	r5, r3
	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
	memcpy(&msg[1], net_id, 8);
   28064:	2208      	movs	r2, #8
	msg[0] = flags;
   28066:	f88d 1000 	strb.w	r1, [sp]
	memcpy(&msg[1], net_id, 8);
   2806a:	4601      	mov	r1, r0
   2806c:	f10d 0001 	add.w	r0, sp, #1
   28070:	f7fe f876 	bl	26160 <memcpy>
	sys_put_be32(iv_index, &msg[9]);
   28074:	f10d 0109 	add.w	r1, sp, #9
   28078:	4628      	mov	r0, r5
   2807a:	f7ff fe25 	bl	27cc8 <sys_put_be32>

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   2807e:	4620      	mov	r0, r4
   28080:	ab04      	add	r3, sp, #16
   28082:	220d      	movs	r2, #13
   28084:	4669      	mov	r1, sp
   28086:	f7ff fe6a 	bl	27d5e <bt_mesh_aes_cmac_one>
	if (!err) {
   2808a:	4604      	mov	r4, r0
   2808c:	b920      	cbnz	r0, 28098 <bt_mesh_beacon_auth+0x3e>
		memcpy(auth, tmp, 8);
   2808e:	2208      	movs	r2, #8
   28090:	a904      	add	r1, sp, #16
   28092:	980c      	ldr	r0, [sp, #48]	; 0x30
   28094:	f7fe f864 	bl	26160 <memcpy>
	}

	return err;
}
   28098:	4620      	mov	r0, r4
   2809a:	b009      	add	sp, #36	; 0x24
   2809c:	bd30      	pop	{r4, r5, pc}

0002809e <k_uptime_get_32>:
{
   2809e:	b510      	push	{r4, lr}
   280a0:	f002 f9ae 	bl	2a400 <z_impl_k_uptime_ticks>
   280a4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   280a8:	fba0 2304 	umull	r2, r3, r0, r4
   280ac:	fb04 3301 	mla	r3, r4, r1, r3
   280b0:	0bd0      	lsrs	r0, r2, #15
}
   280b2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   280b6:	bd10      	pop	{r4, pc}

000280b8 <sig_mod_set>:
{
   280b8:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   280ba:	9300      	str	r3, [sp, #0]
   280bc:	4613      	mov	r3, r2
   280be:	460a      	mov	r2, r1
   280c0:	4601      	mov	r1, r0
   280c2:	2000      	movs	r0, #0
   280c4:	f7e8 ff9c 	bl	11000 <mod_set>
}
   280c8:	b003      	add	sp, #12
   280ca:	f85d fb04 	ldr.w	pc, [sp], #4

000280ce <vnd_mod_set>:
{
   280ce:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   280d0:	9300      	str	r3, [sp, #0]
   280d2:	4613      	mov	r3, r2
   280d4:	460a      	mov	r2, r1
   280d6:	4601      	mov	r1, r0
   280d8:	2001      	movs	r0, #1
   280da:	f7e8 ff91 	bl	11000 <mod_set>
}
   280de:	b003      	add	sp, #12
   280e0:	f85d fb04 	ldr.w	pc, [sp], #4

000280e4 <bt_mesh_model_find_group>:
		.mod = *mod,
   280e4:	6800      	ldr	r0, [r0, #0]
		if (mod->groups[i] == addr) {
   280e6:	89c3      	ldrh	r3, [r0, #14]
   280e8:	428b      	cmp	r3, r1
			return &mod->groups[i];
   280ea:	bf0c      	ite	eq
   280ec:	300e      	addeq	r0, #14
	ctx->entry = model_group_get(mod, ctx->addr);
   280ee:	2000      	movne	r0, #0
}
   280f0:	4770      	bx	lr

000280f2 <bt_mesh_model_msg_init>:
{
   280f2:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   280f4:	6883      	ldr	r3, [r0, #8]
   280f6:	4604      	mov	r4, r0
   280f8:	b913      	cbnz	r3, 28100 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   280fa:	f100 030c 	add.w	r3, r0, #12
   280fe:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   28100:	68a3      	ldr	r3, [r4, #8]
   28102:	6023      	str	r3, [r4, #0]
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   28104:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   28106:	f04f 0300 	mov.w	r3, #0
   2810a:	80a3      	strh	r3, [r4, #4]
   2810c:	d805      	bhi.n	2811a <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   2810e:	4620      	mov	r0, r4
   28110:	b2c9      	uxtb	r1, r1
}
   28112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   28116:	f001 bc4e 	b.w	299b6 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2811a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2811e:	b28d      	uxth	r5, r1
   28120:	d205      	bcs.n	2812e <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   28122:	4629      	mov	r1, r5
   28124:	4620      	mov	r0, r4
}
   28126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   2812a:	f001 bc54 	b.w	299d6 <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   2812e:	f3c1 4107 	ubfx	r1, r1, #16, #8
   28132:	4620      	mov	r0, r4
   28134:	f001 fc3f 	bl	299b6 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   28138:	4629      	mov	r1, r5
   2813a:	4620      	mov	r0, r4
}
   2813c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   28140:	f001 bc40 	b.w	299c4 <net_buf_simple_add_le16>

00028144 <bt_mesh_model_send>:
{
   28144:	b570      	push	{r4, r5, r6, lr}
   28146:	b086      	sub	sp, #24
   28148:	4615      	mov	r5, r2
	struct bt_mesh_net_tx tx = {
   2814a:	2200      	movs	r2, #0
{
   2814c:	461e      	mov	r6, r3
	struct bt_mesh_net_tx tx = {
   2814e:	e9cd 1204 	strd	r1, r2, [sp, #16]
{
   28152:	4604      	mov	r4, r0
	struct bt_mesh_net_tx tx = {
   28154:	9203      	str	r2, [sp, #12]
		.src = bt_mesh_model_elem(model)->addr,
   28156:	f7e8 ff19 	bl	10f8c <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   2815a:	8803      	ldrh	r3, [r0, #0]
   2815c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return model_send(model, &tx, false, msg, cb, cb_data);
   28160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28162:	a903      	add	r1, sp, #12
   28164:	e9cd 6300 	strd	r6, r3, [sp]
   28168:	4620      	mov	r0, r4
   2816a:	462b      	mov	r3, r5
   2816c:	f7e8 fd12 	bl	10b94 <model_send>
}
   28170:	b006      	add	sp, #24
   28172:	bd70      	pop	{r4, r5, r6, pc}

00028174 <bt_mesh_model_find_vnd>:
{
   28174:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   28176:	7947      	ldrb	r7, [r0, #5]
{
   28178:	4605      	mov	r5, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2817a:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   2817c:	f04f 0c1c 	mov.w	ip, #28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   28180:	b2d8      	uxtb	r0, r3
   28182:	4287      	cmp	r7, r0
   28184:	d801      	bhi.n	2818a <bt_mesh_model_find_vnd+0x16>
	return NULL;
   28186:	2000      	movs	r0, #0
}
   28188:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2818a:	fb0c f403 	mul.w	r4, ip, r3
   2818e:	68ee      	ldr	r6, [r5, #12]
   28190:	1930      	adds	r0, r6, r4
   28192:	5b34      	ldrh	r4, [r6, r4]
   28194:	428c      	cmp	r4, r1
   28196:	d102      	bne.n	2819e <bt_mesh_model_find_vnd+0x2a>
   28198:	8844      	ldrh	r4, [r0, #2]
   2819a:	4294      	cmp	r4, r2
   2819c:	d0f4      	beq.n	28188 <bt_mesh_model_find_vnd+0x14>
   2819e:	3301      	adds	r3, #1
   281a0:	e7ee      	b.n	28180 <bt_mesh_model_find_vnd+0xc>

000281a2 <bt_mesh_model_find>:
{
   281a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   281a4:	7906      	ldrb	r6, [r0, #4]
   281a6:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   281a8:	271c      	movs	r7, #28
	for (i = 0U; i < elem->model_count; i++) {
   281aa:	b2da      	uxtb	r2, r3
   281ac:	4296      	cmp	r6, r2
   281ae:	d801      	bhi.n	281b4 <bt_mesh_model_find+0x12>
	return NULL;
   281b0:	2200      	movs	r2, #0
   281b2:	e008      	b.n	281c6 <bt_mesh_model_find+0x24>
		if (elem->models[i].id == id) {
   281b4:	fb07 f403 	mul.w	r4, r7, r3
   281b8:	6885      	ldr	r5, [r0, #8]
   281ba:	192a      	adds	r2, r5, r4
   281bc:	5b2c      	ldrh	r4, [r5, r4]
   281be:	428c      	cmp	r4, r1
   281c0:	f103 0301 	add.w	r3, r3, #1
   281c4:	d1f1      	bne.n	281aa <bt_mesh_model_find+0x8>
}
   281c6:	4610      	mov	r0, r2
   281c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000281ca <bt_mesh_model_root>:
}
   281ca:	4770      	bx	lr

000281cc <bt_mesh_model_tree_walk>:
{
   281cc:	460b      	mov	r3, r1
		    cb(m, (uint32_t)depth, user_data) == BT_MESH_WALK_STOP) {
   281ce:	2100      	movs	r1, #0
   281d0:	4718      	bx	r3

000281d2 <bt_mesh_model_bind_store>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   281d2:	88c3      	ldrh	r3, [r0, #6]
   281d4:	f043 0301 	orr.w	r3, r3, #1
   281d8:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   281da:	2008      	movs	r0, #8
   281dc:	f7eb bb7a 	b.w	138d4 <bt_mesh_settings_store_schedule>

000281e0 <bt_mesh_model_sub_store>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   281e0:	88c3      	ldrh	r3, [r0, #6]
   281e2:	f043 0302 	orr.w	r3, r3, #2
   281e6:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   281e8:	2008      	movs	r0, #8
   281ea:	f7eb bb73 	b.w	138d4 <bt_mesh_settings_store_schedule>

000281ee <bt_mesh_model_pub_store>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   281ee:	88c3      	ldrh	r3, [r0, #6]
   281f0:	f043 0304 	orr.w	r3, r3, #4
   281f4:	80c3      	strh	r3, [r0, #6]
	bt_mesh_settings_store_schedule(BT_MESH_SETTINGS_MOD_PENDING);
   281f6:	2008      	movs	r0, #8
   281f8:	f7eb bb6c 	b.w	138d4 <bt_mesh_settings_store_schedule>

000281fc <key_idx_pack>:

#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
   281fc:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   281fe:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   28202:	4605      	mov	r5, r0
   28204:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   28206:	b289      	uxth	r1, r1
   28208:	f001 fbdc 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2820c:	f3c4 1107 	ubfx	r1, r4, #4, #8
   28210:	4628      	mov	r0, r5
}
   28212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   28216:	f001 bbce 	b.w	299b6 <net_buf_simple_add_u8>

0002821a <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   2821a:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   2821c:	6804      	ldr	r4, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2821e:	7865      	ldrb	r5, [r4, #1]
   28220:	7823      	ldrb	r3, [r4, #0]
   28222:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   28226:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2822a:	800b      	strh	r3, [r1, #0]
   2822c:	78a1      	ldrb	r1, [r4, #2]
   2822e:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   28230:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   28234:	091b      	lsrs	r3, r3, #4
   28236:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   28238:	2103      	movs	r1, #3
}
   2823a:	bc30      	pop	{r4, r5}
	net_buf_simple_pull(buf, 3);
   2823c:	f7f5 ba72 	b.w	1d724 <net_buf_simple_pull>

00028240 <bt_mesh_hb_pwr2>:
	if (!val) {
   28240:	b158      	cbz	r0, 2825a <bt_mesh_hb_pwr2+0x1a>
	} else if (val == 0xff || val == 0x11) {
   28242:	28ff      	cmp	r0, #255	; 0xff
   28244:	d007      	beq.n	28256 <bt_mesh_hb_pwr2+0x16>
   28246:	2811      	cmp	r0, #17
   28248:	d005      	beq.n	28256 <bt_mesh_hb_pwr2+0x16>
		return (1 << (val - 1));
   2824a:	2301      	movs	r3, #1
   2824c:	3801      	subs	r0, #1
   2824e:	fa03 f000 	lsl.w	r0, r3, r0
   28252:	b280      	uxth	r0, r0
   28254:	4770      	bx	lr
		return 0xffff;
   28256:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   2825a:	4770      	bx	lr

0002825c <mod_sub_clear_visitor>:
{
   2825c:	b510      	push	{r4, lr}
		bt_mesh_lpn_group_del(mod->groups, ARRAY_SIZE(mod->groups));
   2825e:	f100 040e 	add.w	r4, r0, #14
   28262:	2101      	movs	r1, #1
   28264:	4620      	mov	r0, r4
   28266:	f7ec f8bd 	bl	143e4 <bt_mesh_lpn_group_del>
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   2826a:	4620      	mov	r0, r4
   2826c:	f7e9 fc6c 	bl	11b48 <mod_sub_list_clear.isra.4.part.5>
}
   28270:	2001      	movs	r0, #1
   28272:	bd10      	pop	{r4, pc}

00028274 <mod_reset>:
{
   28274:	b510      	push	{r4, lr}
   28276:	4604      	mov	r4, r0
   28278:	300e      	adds	r0, #14
   2827a:	f7e9 fc65 	bl	11b48 <mod_sub_list_clear.isra.4.part.5>
		if (clear_count) {
   2827e:	b110      	cbz	r0, 28286 <mod_reset+0x12>
			bt_mesh_model_sub_store(mod);
   28280:	4620      	mov	r0, r4
   28282:	f7ff ffad 	bl	281e0 <bt_mesh_model_sub_store>
	if (mod->cb && mod->cb->reset) {
   28286:	6963      	ldr	r3, [r4, #20]
   28288:	b12b      	cbz	r3, 28296 <mod_reset+0x22>
   2828a:	68db      	ldr	r3, [r3, #12]
   2828c:	b11b      	cbz	r3, 28296 <mod_reset+0x22>
		mod->cb->reset(mod);
   2828e:	4620      	mov	r0, r4
}
   28290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   28294:	4718      	bx	r3
}
   28296:	bd10      	pop	{r4, pc}

00028298 <app_key_del>:
{
   28298:	b530      	push	{r4, r5, lr}
   2829a:	b085      	sub	sp, #20
   2829c:	4604      	mov	r4, r0
   2829e:	460d      	mov	r5, r1
   282a0:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   282a2:	a903      	add	r1, sp, #12
   282a4:	f10d 020e 	add.w	r2, sp, #14
   282a8:	f7ff ffb7 	bl	2821a <key_idx_unpack>
	status = bt_mesh_app_key_del(key_app_idx, key_net_idx);
   282ac:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   282b0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   282b4:	f7e6 fc62 	bl	eb7c <bt_mesh_app_key_del>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   282b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   282bc:	9300      	str	r3, [sp, #0]
   282be:	4602      	mov	r2, r0
   282c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   282c4:	4629      	mov	r1, r5
   282c6:	4620      	mov	r0, r4
   282c8:	f7e9 fe02 	bl	11ed0 <send_app_key_status>
}
   282cc:	b005      	add	sp, #20
   282ce:	bd30      	pop	{r4, r5, pc}

000282d0 <app_key_update>:
{
   282d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   282d2:	4614      	mov	r4, r2
   282d4:	4605      	mov	r5, r0
   282d6:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   282d8:	f10d 020e 	add.w	r2, sp, #14
   282dc:	a903      	add	r1, sp, #12
   282de:	4620      	mov	r0, r4
   282e0:	f7ff ff9b 	bl	2821a <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   282e4:	6822      	ldr	r2, [r4, #0]
   282e6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   282ea:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   282ee:	f7e6 fbff 	bl	eaf0 <bt_mesh_app_key_update>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   282f2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   282f6:	9300      	str	r3, [sp, #0]
   282f8:	4602      	mov	r2, r0
   282fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   282fe:	4631      	mov	r1, r6
   28300:	4628      	mov	r0, r5
   28302:	f7e9 fde5 	bl	11ed0 <send_app_key_status>
}
   28306:	b004      	add	sp, #16
   28308:	bd70      	pop	{r4, r5, r6, pc}

0002830a <app_key_add>:
{
   2830a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2830c:	4614      	mov	r4, r2
   2830e:	4605      	mov	r5, r0
   28310:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   28312:	f10d 020e 	add.w	r2, sp, #14
   28316:	a903      	add	r1, sp, #12
   28318:	4620      	mov	r0, r4
   2831a:	f7ff ff7e 	bl	2821a <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   2831e:	6822      	ldr	r2, [r4, #0]
   28320:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   28324:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   28328:	f7e6 fba0 	bl	ea6c <bt_mesh_app_key_add>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2832c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   28330:	9300      	str	r3, [sp, #0]
   28332:	4602      	mov	r2, r0
   28334:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   28338:	4631      	mov	r1, r6
   2833a:	4628      	mov	r0, r5
   2833c:	f7e9 fdc8 	bl	11ed0 <send_app_key_status>
}
   28340:	b004      	add	sp, #16
   28342:	bd70      	pop	{r4, r5, r6, pc}

00028344 <heartbeat_pub_get>:
{
   28344:	b530      	push	{r4, r5, lr}
   28346:	b085      	sub	sp, #20
   28348:	4604      	mov	r4, r0
   2834a:	460d      	mov	r5, r1
	bt_mesh_hb_pub_get(&pub);
   2834c:	4668      	mov	r0, sp
   2834e:	f7e8 f9e9 	bl	10724 <bt_mesh_hb_pub_get>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, &pub);
   28352:	466b      	mov	r3, sp
   28354:	2200      	movs	r2, #0
   28356:	4629      	mov	r1, r5
   28358:	4620      	mov	r0, r4
   2835a:	f7e9 fde5 	bl	11f28 <hb_pub_send_status>
}
   2835e:	b005      	add	sp, #20
   28360:	bd30      	pop	{r4, r5, pc}

00028362 <friend_get>:
	send_friend_status(model, ctx);
   28362:	f7e9 bec1 	b.w	120e8 <send_friend_status>

00028366 <get_model>:
{
   28366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   28368:	888b      	ldrh	r3, [r1, #4]
   2836a:	2b03      	cmp	r3, #3
{
   2836c:	4605      	mov	r5, r0
   2836e:	460c      	mov	r4, r1
   28370:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   28372:	4608      	mov	r0, r1
	if (buf->len < 4) {
   28374:	d809      	bhi.n	2838a <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   28376:	f001 fad4 	bl	29922 <net_buf_simple_pull_le16>
		*vnd = false;
   2837a:	2300      	movs	r3, #0
   2837c:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   2837e:	4601      	mov	r1, r0
   28380:	4628      	mov	r0, r5
}
   28382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   28386:	f7ff bf0c 	b.w	281a2 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   2838a:	f001 faca 	bl	29922 <net_buf_simple_pull_le16>
   2838e:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   28390:	4620      	mov	r0, r4
   28392:	f001 fac6 	bl	29922 <net_buf_simple_pull_le16>
		*vnd = true;
   28396:	2301      	movs	r3, #1
   28398:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   2839a:	4602      	mov	r2, r0
   2839c:	4639      	mov	r1, r7
   2839e:	4628      	mov	r0, r5
}
   283a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   283a4:	f7ff bee6 	b.w	28174 <bt_mesh_model_find_vnd>

000283a8 <create_mod_app_status.isra.15>:
static void create_mod_app_status(struct net_buf_simple *msg,
   283a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   283ac:	f89d 9020 	ldrb.w	r9, [sp, #32]
   283b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   283b2:	4604      	mov	r4, r0
   283b4:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   283b6:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   283ba:	4690      	mov	r8, r2
   283bc:	461f      	mov	r7, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   283be:	f7ff fe98 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   283c2:	4649      	mov	r1, r9
   283c4:	4620      	mov	r0, r4
   283c6:	f001 faf6 	bl	299b6 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   283ca:	4641      	mov	r1, r8
   283cc:	4620      	mov	r0, r4
   283ce:	f001 faf9 	bl	299c4 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   283d2:	4639      	mov	r1, r7
   283d4:	4620      	mov	r0, r4
   283d6:	f001 faf5 	bl	299c4 <net_buf_simple_add_le16>
	if (vnd) {
   283da:	b14e      	cbz	r6, 283f0 <create_mod_app_status.isra.15+0x48>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   283dc:	2104      	movs	r1, #4
   283de:	4620      	mov	r0, r4
   283e0:	f7f5 f9da 	bl	1d798 <net_buf_simple_add>
   283e4:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   283e6:	4629      	mov	r1, r5
}
   283e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   283ec:	f7fd beb8 	b.w	26160 <memcpy>
   283f0:	2102      	movs	r1, #2
   283f2:	4620      	mov	r0, r4
   283f4:	f7f5 f9d0 	bl	1d798 <net_buf_simple_add>
   283f8:	2202      	movs	r2, #2
   283fa:	e7f4      	b.n	283e6 <create_mod_app_status.isra.15+0x3e>

000283fc <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   283fc:	f7ea bb44 	b.w	12a88 <send_gatt_proxy_status>

00028400 <mod_unbind.part.3.constprop.30>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   28400:	b530      	push	{r4, r5, lr}
		if (model->keys[i] != key_idx) {
   28402:	8985      	ldrh	r5, [r0, #12]
   28404:	428d      	cmp	r5, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   28406:	b085      	sub	sp, #20
   28408:	4604      	mov	r4, r0
		if (model->keys[i] != key_idx) {
   2840a:	d114      	bne.n	28436 <mod_unbind.part.3.constprop.30+0x36>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2840c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28410:	8183      	strh	r3, [r0, #12]
			bt_mesh_model_bind_store(model);
   28412:	f7ff fede 	bl	281d2 <bt_mesh_model_bind_store>
		if (model->pub && model->pub->key == key_idx) {
   28416:	68a3      	ldr	r3, [r4, #8]
   28418:	b16b      	cbz	r3, 28436 <mod_unbind.part.3.constprop.30+0x36>
   2841a:	88db      	ldrh	r3, [r3, #6]
   2841c:	f3c3 030b 	ubfx	r3, r3, #0, #12
   28420:	42ab      	cmp	r3, r5
   28422:	d108      	bne.n	28436 <mod_unbind.part.3.constprop.30+0x36>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   28424:	2300      	movs	r3, #0
   28426:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2842a:	9300      	str	r3, [sp, #0]
   2842c:	461a      	mov	r2, r3
   2842e:	4619      	mov	r1, r3
   28430:	4620      	mov	r0, r4
   28432:	f7ea fc77 	bl	12d24 <_mod_pub_set.constprop.31>
}
   28436:	2000      	movs	r0, #0
   28438:	b005      	add	sp, #20
   2843a:	bd30      	pop	{r4, r5, pc}

0002843c <heartbeat_sub_get>:
{
   2843c:	b530      	push	{r4, r5, lr}
   2843e:	b085      	sub	sp, #20
   28440:	4604      	mov	r4, r0
   28442:	460d      	mov	r5, r1
	bt_mesh_hb_sub_get(&sub);
   28444:	4668      	mov	r0, sp
   28446:	f7e8 f9e3 	bl	10810 <bt_mesh_hb_sub_get>
	hb_sub_send_status(model, ctx, &sub);
   2844a:	466a      	mov	r2, sp
   2844c:	4629      	mov	r1, r5
   2844e:	4620      	mov	r0, r4
   28450:	f7ea fe1a 	bl	13088 <hb_sub_send_status>
}
   28454:	b005      	add	sp, #20
   28456:	bd30      	pop	{r4, r5, pc}

00028458 <mod_app_key_del>:
{
   28458:	b538      	push	{r3, r4, r5, lr}
	mod_unbind(mod, *app_idx, true);
   2845a:	9b04      	ldr	r3, [sp, #16]
   2845c:	881c      	ldrh	r4, [r3, #0]
{
   2845e:	4605      	mov	r5, r0
	if (!bt_mesh_app_key_exists(key_idx)) {
   28460:	4620      	mov	r0, r4
   28462:	f7e6 fc25 	bl	ecb0 <bt_mesh_app_key_exists>
   28466:	b128      	cbz	r0, 28474 <mod_app_key_del+0x1c>
   28468:	4621      	mov	r1, r4
   2846a:	4628      	mov	r0, r5
}
   2846c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28470:	f7ff bfc6 	b.w	28400 <mod_unbind.part.3.constprop.30>
   28474:	bd38      	pop	{r3, r4, r5, pc}

00028476 <attention_off>:
	if (srv->cb && srv->cb->attn_off) {
   28476:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2847a:	b123      	cbz	r3, 28486 <attention_off+0x10>
   2847c:	695b      	ldr	r3, [r3, #20]
   2847e:	b113      	cbz	r3, 28486 <attention_off+0x10>
		srv->cb->attn_off(srv->model);
   28480:	f850 0c08 	ldr.w	r0, [r0, #-8]
   28484:	4718      	bx	r3
}
   28486:	4770      	bx	lr

00028488 <health_fault_test_unrel>:
{
   28488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   2848c:	6987      	ldr	r7, [r0, #24]
{
   2848e:	4604      	mov	r4, r0
	test_id = net_buf_simple_pull_u8(buf);
   28490:	4610      	mov	r0, r2
{
   28492:	4615      	mov	r5, r2
	test_id = net_buf_simple_pull_u8(buf);
   28494:	f001 fa3d 	bl	29912 <net_buf_simple_pull_u8>
   28498:	4606      	mov	r6, r0
	company_id = net_buf_simple_pull_le16(buf);
   2849a:	4628      	mov	r0, r5
   2849c:	f001 fa41 	bl	29922 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_test) {
   284a0:	687b      	ldr	r3, [r7, #4]
	company_id = net_buf_simple_pull_le16(buf);
   284a2:	4602      	mov	r2, r0
	if (srv->cb && srv->cb->fault_test) {
   284a4:	b133      	cbz	r3, 284b4 <health_fault_test_unrel+0x2c>
   284a6:	68db      	ldr	r3, [r3, #12]
   284a8:	b123      	cbz	r3, 284b4 <health_fault_test_unrel+0x2c>
		srv->cb->fault_test(model, test_id, company_id);
   284aa:	4631      	mov	r1, r6
   284ac:	4620      	mov	r0, r4
}
   284ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		srv->cb->fault_test(model, test_id, company_id);
   284b2:	4718      	bx	r3
}
   284b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000284b8 <health_fault_clear_unrel>:
{
   284b8:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_health_srv *srv = model->user_data;
   284ba:	6985      	ldr	r5, [r0, #24]
{
   284bc:	4604      	mov	r4, r0
	company_id = net_buf_simple_pull_le16(buf);
   284be:	4610      	mov	r0, r2
   284c0:	f001 fa2f 	bl	29922 <net_buf_simple_pull_le16>
	if (srv->cb && srv->cb->fault_clear) {
   284c4:	686b      	ldr	r3, [r5, #4]
	company_id = net_buf_simple_pull_le16(buf);
   284c6:	4601      	mov	r1, r0
	if (srv->cb && srv->cb->fault_clear) {
   284c8:	b12b      	cbz	r3, 284d6 <health_fault_clear_unrel+0x1e>
   284ca:	689b      	ldr	r3, [r3, #8]
   284cc:	b11b      	cbz	r3, 284d6 <health_fault_clear_unrel+0x1e>
		srv->cb->fault_clear(model, company_id);
   284ce:	4620      	mov	r0, r4
}
   284d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		srv->cb->fault_clear(model, company_id);
   284d4:	4718      	bx	r3
}
   284d6:	bd70      	pop	{r4, r5, r6, pc}

000284d8 <health_period_set>:
{
   284d8:	b538      	push	{r3, r4, r5, lr}
   284da:	4604      	mov	r4, r0
   284dc:	460d      	mov	r5, r1
	health_period_set_unrel(model, ctx, buf);
   284de:	f7ea fe6f 	bl	131c0 <health_period_set_unrel>
	send_health_period_status(model, ctx);
   284e2:	4629      	mov	r1, r5
   284e4:	4620      	mov	r0, r4
}
   284e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_health_period_status(model, ctx);
   284ea:	f7ea bf6b 	b.w	133c4 <send_health_period_status>

000284ee <health_period_get>:
	send_health_period_status(model, ctx);
   284ee:	f7ea bf69 	b.w	133c4 <send_health_period_status>

000284f2 <attention_get>:
	send_attention_status(model, ctx);
   284f2:	f7ea bf8d 	b.w	13410 <send_attention_status>

000284f6 <attention_set_unrel>:
{
   284f6:	b510      	push	{r4, lr}
   284f8:	4604      	mov	r4, r0
	time = net_buf_simple_pull_u8(buf);
   284fa:	4610      	mov	r0, r2
   284fc:	f001 fa09 	bl	29912 <net_buf_simple_pull_u8>
	bt_mesh_attention(model, time);
   28500:	4601      	mov	r1, r0
   28502:	4620      	mov	r0, r4
}
   28504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_attention(model, time);
   28508:	f7eb b82e 	b.w	13568 <bt_mesh_attention>

0002850c <attention_set>:
{
   2850c:	b538      	push	{r3, r4, r5, lr}
   2850e:	4604      	mov	r4, r0
   28510:	460d      	mov	r5, r1
	attention_set_unrel(model, ctx, buf);
   28512:	f7ff fff0 	bl	284f6 <attention_set_unrel>
	send_attention_status(model, ctx);
   28516:	4629      	mov	r1, r5
   28518:	4620      	mov	r0, r4
}
   2851a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_attention_status(model, ctx);
   2851e:	f7ea bf77 	b.w	13410 <send_attention_status>

00028522 <bt_mesh_adv_buf_ready>:
}
   28522:	4770      	bx	lr

00028524 <store_pending>:
{
   28524:	b508      	push	{r3, lr}
	if (atomic_test_and_clear_bit(pending_flags,
   28526:	2000      	movs	r0, #0
   28528:	f7eb f976 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   2852c:	b108      	cbz	r0, 28532 <store_pending+0xe>
		bt_mesh_rpl_pending_store();
   2852e:	f7e7 fed3 	bl	102d8 <bt_mesh_rpl_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   28532:	2001      	movs	r0, #1
   28534:	f7eb f970 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   28538:	b108      	cbz	r0, 2853e <store_pending+0x1a>
		bt_mesh_subnet_pending_store();
   2853a:	f7e6 f9a9 	bl	e890 <bt_mesh_subnet_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2853e:	2002      	movs	r0, #2
   28540:	f7eb f96a 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   28544:	b108      	cbz	r0, 2854a <store_pending+0x26>
		bt_mesh_app_key_pending_store();
   28546:	f7e6 fc75 	bl	ee34 <bt_mesh_app_key_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2854a:	2003      	movs	r0, #3
   2854c:	f7eb f964 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   28550:	b108      	cbz	r0, 28556 <store_pending+0x32>
		bt_mesh_net_pending_net_store();
   28552:	f7e5 fec1 	bl	e2d8 <bt_mesh_net_pending_net_store>
	if (atomic_test_and_clear_bit(pending_flags,
   28556:	2004      	movs	r0, #4
   28558:	f7eb f95e 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   2855c:	b108      	cbz	r0, 28562 <store_pending+0x3e>
		bt_mesh_net_pending_iv_store();
   2855e:	f7e5 fe89 	bl	e274 <bt_mesh_net_pending_iv_store>
	if (atomic_test_and_clear_bit(pending_flags,
   28562:	2005      	movs	r0, #5
   28564:	f7eb f958 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   28568:	b108      	cbz	r0, 2856e <store_pending+0x4a>
		bt_mesh_net_pending_seq_store();
   2856a:	f7e5 fee1 	bl	e330 <bt_mesh_net_pending_seq_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2856e:	2006      	movs	r0, #6
   28570:	f7eb f952 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   28574:	b108      	cbz	r0, 2857a <store_pending+0x56>
		bt_mesh_hb_pub_pending_store();
   28576:	f7e8 f995 	bl	108a4 <bt_mesh_hb_pub_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   2857a:	2007      	movs	r0, #7
   2857c:	f7eb f94c 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   28580:	b108      	cbz	r0, 28586 <store_pending+0x62>
		bt_mesh_cfg_pending_store();
   28582:	f7e4 fd27 	bl	cfd4 <bt_mesh_cfg_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   28586:	2008      	movs	r0, #8
   28588:	f7eb f946 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   2858c:	b108      	cbz	r0, 28592 <store_pending+0x6e>
		bt_mesh_model_pending_store();
   2858e:	f7e9 f869 	bl	11664 <bt_mesh_model_pending_store>
	if (atomic_test_and_clear_bit(pending_flags,
   28592:	2009      	movs	r0, #9
   28594:	f7eb f940 	bl	13818 <atomic_test_and_clear_bit.constprop.5>
   28598:	b118      	cbz	r0, 285a2 <store_pending+0x7e>
}
   2859a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_mesh_va_pending_store();
   2859e:	f7e7 bd9b 	b.w	100d8 <bt_mesh_va_pending_store>
}
   285a2:	bd08      	pop	{r3, pc}

000285a4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   285a4:	f3bf 8f5b 	dmb	ish
   285a8:	6800      	ldr	r0, [r0, #0]
   285aa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   285ae:	4108      	asrs	r0, r1
}
   285b0:	f000 0001 	and.w	r0, r0, #1
   285b4:	4770      	bx	lr

000285b6 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   285b6:	2301      	movs	r3, #1
   285b8:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   285bc:	f3bf 8f5b 	dmb	ish
   285c0:	e850 3f00 	ldrex	r3, [r0]
   285c4:	430b      	orrs	r3, r1
   285c6:	e840 3200 	strex	r2, r3, [r0]
   285ca:	2a00      	cmp	r2, #0
   285cc:	d1f8      	bne.n	285c0 <atomic_set_bit+0xa>
   285ce:	f3bf 8f5b 	dmb	ish
}
   285d2:	4770      	bx	lr

000285d4 <group_zero>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   285d4:	2300      	movs	r3, #0
   285d6:	f3bf 8f5b 	dmb	ish
   285da:	e850 2f00 	ldrex	r2, [r0]
   285de:	e840 3100 	strex	r1, r3, [r0]
   285e2:	2900      	cmp	r1, #0
   285e4:	d1f9      	bne.n	285da <group_zero+0x6>
   285e6:	f3bf 8f5b 	dmb	ish
}
   285ea:	4770      	bx	lr

000285ec <atomic_test_and_clear_bit>:
{
   285ec:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   285ee:	2301      	movs	r3, #1
   285f0:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   285f4:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   285f6:	f3bf 8f5b 	dmb	ish
   285fa:	e850 3f00 	ldrex	r3, [r0]
   285fe:	ea03 0c02 	and.w	ip, r3, r2
   28602:	e840 ce00 	strex	lr, ip, [r0]
   28606:	f1be 0f00 	cmp.w	lr, #0
   2860a:	d1f6      	bne.n	285fa <atomic_test_and_clear_bit+0xe>
   2860c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28610:	420b      	tst	r3, r1
}
   28612:	bf14      	ite	ne
   28614:	2001      	movne	r0, #1
   28616:	2000      	moveq	r0, #0
   28618:	f85d fb04 	ldr.w	pc, [sp], #4

0002861c <bt_mesh_prov_buf_init>:
}

static inline void bt_mesh_prov_buf_init(struct net_buf_simple *buf, uint8_t type)
{
   2861c:	b538      	push	{r3, r4, r5, lr}
   2861e:	4604      	mov	r4, r0
   28620:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   28622:	2105      	movs	r1, #5
   28624:	f7f4 feb8 	bl	1d398 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   28628:	4629      	mov	r1, r5
   2862a:	4620      	mov	r0, r4
}
   2862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   28630:	f001 b9c1 	b.w	299b6 <net_buf_simple_add_u8>

00028634 <prov_fail>:
	prov_send_fail_msg(reason);
   28634:	f7ec bae0 	b.w	14bf8 <prov_send_fail_msg>

00028638 <net_buf_add_u8>:
	return net_buf_simple_add_u8(&buf->b, val);
   28638:	3008      	adds	r0, #8
   2863a:	f001 b9bc 	b.w	299b6 <net_buf_simple_add_u8>

0002863e <pb_adv_reset>:

void pb_adv_reset(void)
{
	reset_adv_link();
   2863e:	f7ec bf09 	b.w	15454 <reset_adv_link>

00028642 <clear_tx>:
}
   28642:	4770      	bx	lr

00028644 <protocol_timeout>:
	link_closed(PROV_BEARER_LINK_STATUS_TIMEOUT);
   28644:	2001      	movs	r0, #1
   28646:	f7ed bc29 	b.w	15e9c <link_closed>

0002864a <pb_gatt_reset>:

void pb_gatt_reset(void)
{
	reset_state();
   2864a:	f7ed bc13 	b.w	15e74 <reset_state>

0002864e <prov_ccc_changed>:
}
   2864e:	4770      	bx	lr

00028650 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   28650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
   28652:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   28654:	1dc3      	adds	r3, r0, #7
   28656:	f023 0303 	bic.w	r3, r3, #3
{
   2865a:	460e      	mov	r6, r1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2865c:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2865e:	3a01      	subs	r2, #1
   28660:	b294      	uxth	r4, r2
{
   28662:	4605      	mov	r5, r0
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   28664:	2204      	movs	r2, #4
   28666:	2100      	movs	r1, #0
   28668:	fb06 0004 	mla	r0, r6, r4, r0
   2866c:	f7fd fda2 	bl	261b4 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   28670:	f64f 77ff 	movw	r7, #65535	; 0xffff
   28674:	3c01      	subs	r4, #1
   28676:	b2a4      	uxth	r4, r4
   28678:	42bc      	cmp	r4, r7
   2867a:	d101      	bne.n	28680 <mem_init+0x30>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   2867c:	b003      	add	sp, #12
   2867e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
   28680:	fb04 6006 	mla	r0, r4, r6, r6
		next = (uint32_t)((uint8_t *) mem_pool +
   28684:	182b      	adds	r3, r5, r0
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   28686:	2204      	movs	r2, #4
   28688:	1b80      	subs	r0, r0, r6
   2868a:	eb0d 0102 	add.w	r1, sp, r2
   2868e:	4428      	add	r0, r5
		next = (uint32_t)((uint8_t *) mem_pool +
   28690:	9301      	str	r3, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   28692:	f7fd fd65 	bl	26160 <memcpy>
   28696:	e7ed      	b.n	28674 <mem_init+0x24>

00028698 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   28698:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
   2869a:	6804      	ldr	r4, [r0, #0]
{
   2869c:	4606      	mov	r6, r0
	if (*mem_head) {
   2869e:	b18c      	cbz	r4, 286c4 <mem_acquire+0x2c>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   286a0:	1de3      	adds	r3, r4, #7
   286a2:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   286a6:	2204      	movs	r2, #4
   286a8:	4621      	mov	r1, r4
   286aa:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   286ae:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   286b0:	f7fd fd56 	bl	26160 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   286b4:	9b01      	ldr	r3, [sp, #4]
   286b6:	b123      	cbz	r3, 286c2 <mem_acquire+0x2a>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   286b8:	1dda      	adds	r2, r3, #7
   286ba:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   286be:	3d01      	subs	r5, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   286c0:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
   286c2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
   286c4:	4620      	mov	r0, r4
   286c6:	b002      	add	sp, #8
   286c8:	bd70      	pop	{r4, r5, r6, pc}

000286ca <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   286ca:	b570      	push	{r4, r5, r6, lr}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   286cc:	680c      	ldr	r4, [r1, #0]
{
   286ce:	4606      	mov	r6, r0
   286d0:	460d      	mov	r5, r1
	if (*mem_head) {
   286d2:	b11c      	cbz	r4, 286dc <mem_release+0x12>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   286d4:	1de3      	adds	r3, r4, #7
   286d6:	f023 0303 	bic.w	r3, r3, #3
   286da:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   286dc:	2204      	movs	r2, #4
   286de:	4629      	mov	r1, r5
   286e0:	4630      	mov	r0, r6
   286e2:	f7fd fd3d 	bl	26160 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   286e6:	1df2      	adds	r2, r6, #7
   286e8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
   286ec:	1c63      	adds	r3, r4, #1
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   286ee:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
   286f0:	602e      	str	r6, [r5, #0]
}
   286f2:	bd70      	pop	{r4, r5, r6, pc}

000286f4 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   286f4:	fb02 0001 	mla	r0, r2, r1, r0
   286f8:	4770      	bx	lr

000286fa <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   286fa:	1a40      	subs	r0, r0, r1
   286fc:	b280      	uxth	r0, r0
}
   286fe:	fbb0 f0f2 	udiv	r0, r0, r2
   28702:	4770      	bx	lr

00028704 <mem_rcopy>:
/**
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
   28704:	b510      	push	{r4, lr}
	src += len;
   28706:	4411      	add	r1, r2
	while (len--) {
   28708:	3801      	subs	r0, #1
   2870a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2870e:	3a01      	subs	r2, #1
   28710:	b292      	uxth	r2, r2
   28712:	429a      	cmp	r2, r3
   28714:	d100      	bne.n	28718 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
   28716:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
   28718:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   2871c:	f800 4f01 	strb.w	r4, [r0, #1]!
   28720:	e7f5      	b.n	2870e <mem_rcopy+0xa>

00028722 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   28722:	4401      	add	r1, r0
   28724:	4288      	cmp	r0, r1
   28726:	d101      	bne.n	2872c <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
   28728:	2000      	movs	r0, #0
   2872a:	4770      	bx	lr
		if (*src++) {
   2872c:	f810 3b01 	ldrb.w	r3, [r0], #1
   28730:	2b00      	cmp	r3, #0
   28732:	d0f7      	beq.n	28724 <mem_nz+0x2>
			return 1;
   28734:	2001      	movs	r0, #1
}
   28736:	4770      	bx	lr

00028738 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   28738:	6010      	str	r0, [r2, #0]
   2873a:	6008      	str	r0, [r1, #0]

	return link;
}
   2873c:	4770      	bx	lr

0002873e <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   2873e:	6803      	ldr	r3, [r0, #0]
   28740:	680a      	ldr	r2, [r1, #0]
   28742:	4293      	cmp	r3, r2
   28744:	f04f 0200 	mov.w	r2, #0
		return NULL;
   28748:	bf12      	itee	ne
   2874a:	4613      	movne	r3, r2
	}

	old_head = *head;
	*head = *tail = NULL;
   2874c:	600a      	streq	r2, [r1, #0]
   2874e:	6002      	streq	r2, [r0, #0]

	return old_head;
}
   28750:	4618      	mov	r0, r3
   28752:	4770      	bx	lr

00028754 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   28754:	b510      	push	{r4, lr}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   28756:	6814      	ldr	r4, [r2, #0]
   28758:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   2875a:	6814      	ldr	r4, [r2, #0]
   2875c:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;
   2875e:	6010      	str	r0, [r2, #0]

	return link;
}
   28760:	bd10      	pop	{r4, pc}

00028762 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   28762:	4288      	cmp	r0, r1
   28764:	d003      	beq.n	2876e <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   28766:	b11a      	cbz	r2, 28770 <memq_peek+0xe>
		*mem = head->mem;
   28768:	6843      	ldr	r3, [r0, #4]
   2876a:	6013      	str	r3, [r2, #0]
   2876c:	4770      	bx	lr
		return NULL;
   2876e:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   28770:	4770      	bx	lr

00028772 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   28772:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   28774:	4283      	cmp	r3, r0
   28776:	d009      	beq.n	2878c <memq_dequeue+0x1a>
	if (mem) {
   28778:	b122      	cbz	r2, 28784 <memq_dequeue+0x12>
		*mem = head->mem;
   2877a:	6858      	ldr	r0, [r3, #4]
   2877c:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   2877e:	681a      	ldr	r2, [r3, #0]
   28780:	600a      	str	r2, [r1, #0]

	return old_head;
   28782:	e001      	b.n	28788 <memq_dequeue+0x16>
	if (old_head == NULL) {
   28784:	2b00      	cmp	r3, #0
   28786:	d1fa      	bne.n	2877e <memq_dequeue+0xc>
}
   28788:	4618      	mov	r0, r3
   2878a:	4770      	bx	lr
		return NULL; /* queue is empty */
   2878c:	2300      	movs	r3, #0
   2878e:	e7fb      	b.n	28788 <memq_dequeue+0x16>

00028790 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
   28790:	b510      	push	{r4, lr}
   28792:	1e42      	subs	r2, r0, #1
	uint8_t one_count = 0U;
   28794:	2000      	movs	r0, #0

	while (octets_len--) {
   28796:	3901      	subs	r1, #1
   28798:	b2c9      	uxtb	r1, r1
   2879a:	29ff      	cmp	r1, #255	; 0xff
   2879c:	d100      	bne.n	287a0 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
   2879e:	bd10      	pop	{r4, pc}
		bite = *octets;
   287a0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
   287a4:	2b00      	cmp	r3, #0
   287a6:	d0f6      	beq.n	28796 <util_ones_count_get+0x6>
			bite &= (bite - 1);
   287a8:	b25b      	sxtb	r3, r3
   287aa:	1e5c      	subs	r4, r3, #1
   287ac:	4023      	ands	r3, r4
			one_count++;
   287ae:	3001      	adds	r0, #1
			bite &= (bite - 1);
   287b0:	b2db      	uxtb	r3, r3
			one_count++;
   287b2:	b2c0      	uxtb	r0, r0
   287b4:	e7f6      	b.n	287a4 <util_ones_count_get+0x14>

000287b6 <ticks_to_expire_prep>:
{
   287b6:	b530      	push	{r4, r5, lr}
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   287b8:	1a55      	subs	r5, r2, r1
   287ba:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   287be:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   287c0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   287c2:	d109      	bne.n	287d8 <ticks_to_expire_prep+0x22>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   287c4:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   287c8:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   287ca:	42a2      	cmp	r2, r4
   287cc:	d90e      	bls.n	287ec <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
   287ce:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0U;
   287d0:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
   287d2:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   287d4:	6144      	str	r4, [r0, #20]
}
   287d6:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   287d8:	1a8a      	subs	r2, r1, r2
   287da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   287de:	4293      	cmp	r3, r2
   287e0:	d901      	bls.n	287e6 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
   287e2:	1a9a      	subs	r2, r3, r2
   287e4:	e7f1      	b.n	287ca <ticks_to_expire_prep+0x14>
			ticks_to_expire_minus +=
   287e6:	4422      	add	r2, r4
   287e8:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0U;
   287ea:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
   287ec:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0U;
   287ee:	2200      	movs	r2, #0
   287f0:	e7ef      	b.n	287d2 <ticks_to_expire_prep+0x1c>

000287f2 <ticker_job_op_cb>:
{
   287f2:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   287f4:	2200      	movs	r2, #0
   287f6:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
   287f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	user_op->status = status;
   287fa:	6299      	str	r1, [r3, #40]	; 0x28
{
   287fc:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
   287fe:	b10a      	cbz	r2, 28804 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   28800:	6b19      	ldr	r1, [r3, #48]	; 0x30
   28802:	4710      	bx	r2
}
   28804:	4770      	bx	lr

00028806 <ticker_job_list_insert>:
{
   28806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2880a:	b08b      	sub	sp, #44	; 0x2c
	node = &instance->nodes[0];
   2880c:	6803      	ldr	r3, [r0, #0]
   2880e:	9302      	str	r3, [sp, #8]
	count_user = instance->count_user;
   28810:	f890 b009 	ldrb.w	fp, [r0, #9]
	users = &instance->users[0];
   28814:	6843      	ldr	r3, [r0, #4]
   28816:	9307      	str	r3, [sp, #28]
{
   28818:	4607      	mov	r7, r0
   2881a:	468a      	mov	sl, r1
	while (count_user--) {
   2881c:	f10b 33ff 	add.w	r3, fp, #4294967295
   28820:	fa5f fb83 	uxtb.w	fp, r3
   28824:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   28828:	d102      	bne.n	28830 <ticker_job_list_insert+0x2a>
}
   2882a:	b00b      	add	sp, #44	; 0x2c
   2882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		user = &users[count_user];
   28830:	9b07      	ldr	r3, [sp, #28]
   28832:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   28836:	9301      	str	r3, [sp, #4]
		user_ops = (void *)&user->user_op[0];
   28838:	685b      	ldr	r3, [r3, #4]
   2883a:	9304      	str	r3, [sp, #16]
		user_ops_first = user->first;
   2883c:	9b01      	ldr	r3, [sp, #4]
   2883e:	785e      	ldrb	r6, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
   28840:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   28844:	d071      	beq.n	2892a <ticker_job_list_insert+0x124>
				ticker = &node[id_insert];
   28846:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   2884a:	011b      	lsls	r3, r3, #4
   2884c:	9a02      	ldr	r2, [sp, #8]
   2884e:	46d0      	mov	r8, sl
				insert_head = ticker->next;
   28850:	f812 a003 	ldrb.w	sl, [r2, r3]
				ticker = &node[id_insert];
   28854:	18d4      	adds	r4, r2, r3
				user_op = NULL;
   28856:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   28858:	23ff      	movs	r3, #255	; 0xff
   2885a:	7023      	strb	r3, [r4, #0]
	ticker_new = &node[id];
   2885c:	fa0f f288 	sxth.w	r2, r8
	node = &instance->nodes[0];
   28860:	6839      	ldr	r1, [r7, #0]
	previous = TICKER_NULL;
   28862:	9303      	str	r3, [sp, #12]
	ticker_new = &node[id];
   28864:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   28868:	0112      	lsls	r2, r2, #4
   2886a:	eb01 0902 	add.w	r9, r1, r2
   2886e:	9205      	str	r2, [sp, #20]
	ticks_to_expire = ticker_new->ticks_to_expire;
   28870:	f8d9 0008 	ldr.w	r0, [r9, #8]
	current = instance->ticker_id_head;
   28874:	7f7a      	ldrb	r2, [r7, #29]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   28876:	2aff      	cmp	r2, #255	; 0xff
   28878:	d00b      	beq.n	28892 <ticker_job_list_insert+0x8c>
		(ticker_current = &node[current])->ticks_to_expire))) {
   2887a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
   2887e:	ea4f 130e 	mov.w	r3, lr, lsl #4
   28882:	9306      	str	r3, [sp, #24]
   28884:	18cb      	adds	r3, r1, r3
   28886:	469e      	mov	lr, r3
		(ticks_to_expire_current =
   28888:	f8d3 c008 	ldr.w	ip, [r3, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2888c:	4560      	cmp	r0, ip
   2888e:	f080 8082 	bcs.w	28996 <ticker_job_list_insert+0x190>
	ticker_new->next = current;
   28892:	9b05      	ldr	r3, [sp, #20]
	ticker_new->ticks_to_expire = ticks_to_expire;
   28894:	f8c9 0008 	str.w	r0, [r9, #8]
	ticker_new->next = current;
   28898:	54ca      	strb	r2, [r1, r3]
	if (previous == TICKER_NULL) {
   2889a:	9b03      	ldr	r3, [sp, #12]
   2889c:	2bff      	cmp	r3, #255	; 0xff
		node[previous].next = id;
   2889e:	bf17      	itett	ne
   288a0:	f9bd 300c 	ldrshne.w	r3, [sp, #12]
		instance->ticker_id_head = id;
   288a4:	f887 801d 	strbeq.w	r8, [r7, #29]
		node[previous].next = id;
   288a8:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
   288ac:	011b      	lslne	r3, r3, #4
   288ae:	bf18      	it	ne
   288b0:	f801 8003 	strbne.w	r8, [r1, r3]
	if (current != TICKER_NULL) {
   288b4:	2aff      	cmp	r2, #255	; 0xff
   288b6:	d006      	beq.n	288c6 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   288b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   288bc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   288c0:	6893      	ldr	r3, [r2, #8]
   288c2:	1a18      	subs	r0, r3, r0
   288c4:	6090      	str	r0, [r2, #8]
	ticker->req = ticker->ack + 1;
   288c6:	78a3      	ldrb	r3, [r4, #2]
   288c8:	3301      	adds	r3, #1
   288ca:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   288cc:	2d00      	cmp	r5, #0
   288ce:	d0b7      	beq.n	28840 <ticker_job_list_insert+0x3a>
				ticker_job_op_cb(user_op, status);
   288d0:	2100      	movs	r1, #0
   288d2:	4628      	mov	r0, r5
   288d4:	f7ff ff8d 	bl	287f2 <ticker_job_op_cb>
				if ((ticker->ticks_periodic == 0U) &&
   288d8:	6863      	ldr	r3, [r4, #4]
   288da:	2b00      	cmp	r3, #0
   288dc:	d1b0      	bne.n	28840 <ticker_job_list_insert+0x3a>
					ticker->fp_op_func =
   288de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   288e0:	6223      	str	r3, [r4, #32]
					ticker->op_context =
   288e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   288e4:	6263      	str	r3, [r4, #36]	; 0x24
   288e6:	e7ab      	b.n	28840 <ticker_job_list_insert+0x3a>
				user_op = &user_ops[user_ops_first];
   288e8:	9a04      	ldr	r2, [sp, #16]
   288ea:	2334      	movs	r3, #52	; 0x34
   288ec:	fb16 f303 	smulbb	r3, r6, r3
   288f0:	18d5      	adds	r5, r2, r3
				if (first == user->count_user_op) {
   288f2:	9a01      	ldr	r2, [sp, #4]
				first = user_ops_first + 1;
   288f4:	3601      	adds	r6, #1
				if (first == user->count_user_op) {
   288f6:	7812      	ldrb	r2, [r2, #0]
				first = user_ops_first + 1;
   288f8:	b2f6      	uxtb	r6, r6
					first = 0U;
   288fa:	42b2      	cmp	r2, r6
   288fc:	bf08      	it	eq
   288fe:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   28900:	9a04      	ldr	r2, [sp, #16]
   28902:	5cd3      	ldrb	r3, [r2, r3]
   28904:	2b04      	cmp	r3, #4
   28906:	d110      	bne.n	2892a <ticker_job_list_insert+0x124>
				id_insert = user_op->id;
   28908:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   2890c:	9b02      	ldr	r3, [sp, #8]
   2890e:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   28912:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				if (((ticker->req -
   28916:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   28918:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   2891a:	1a9b      	subs	r3, r3, r2
   2891c:	f013 0fff 	tst.w	r3, #255	; 0xff
   28920:	d008      	beq.n	28934 <ticker_job_list_insert+0x12e>
					ticker_job_op_cb(user_op,
   28922:	2101      	movs	r1, #1
   28924:	4628      	mov	r0, r5
   28926:	f7ff ff64 	bl	287f2 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   2892a:	9b01      	ldr	r3, [sp, #4]
   2892c:	789b      	ldrb	r3, [r3, #2]
   2892e:	42b3      	cmp	r3, r6
   28930:	d1da      	bne.n	288e8 <ticker_job_list_insert+0xe2>
   28932:	e773      	b.n	2881c <ticker_job_list_insert+0x16>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   28934:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   28936:	6979      	ldr	r1, [r7, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   28938:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   2893c:	4293      	cmp	r3, r2
   2893e:	d006      	beq.n	2894e <ticker_job_list_insert+0x148>
		ticker->must_expire =
   28940:	f64f 72ff 	movw	r2, #65535	; 0xffff
   28944:	1a98      	subs	r0, r3, r2
   28946:	4242      	negs	r2, r0
   28948:	4142      	adcs	r2, r0
   2894a:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   2894e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   28950:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   28952:	68ea      	ldr	r2, [r5, #12]
   28954:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   28956:	692a      	ldr	r2, [r5, #16]
   28958:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   2895a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2895e:	4293      	cmp	r3, r2
   28960:	bf88      	it	hi
   28962:	2300      	movhi	r3, #0
   28964:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   28966:	69ab      	ldr	r3, [r5, #24]
   28968:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   2896a:	69eb      	ldr	r3, [r5, #28]
   2896c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   2896e:	6a2b      	ldr	r3, [r5, #32]
   28970:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0U;
   28972:	f04f 0900 	mov.w	r9, #0
	ticker->ticks_to_expire = start->ticks_first;
   28976:	68ab      	ldr	r3, [r5, #8]
   28978:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   2897a:	f8c4 9014 	str.w	r9, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   2897e:	686a      	ldr	r2, [r5, #4]
   28980:	4620      	mov	r0, r4
   28982:	f7ff ff18 	bl	287b6 <ticks_to_expire_prep>
	ticker->force = 1U;
   28986:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   2898a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   2898e:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   28992:	70e3      	strb	r3, [r4, #3]
   28994:	e760      	b.n	28858 <ticker_job_list_insert+0x52>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   28996:	ebb0 000c 	subs.w	r0, r0, ip
   2899a:	d10a      	bne.n	289b2 <ticker_job_list_insert+0x1ac>
   2899c:	f8b9 301e 	ldrh.w	r3, [r9, #30]
   289a0:	9308      	str	r3, [sp, #32]
   289a2:	f8be 301e 	ldrh.w	r3, [lr, #30]
   289a6:	9309      	str	r3, [sp, #36]	; 0x24
   289a8:	9b08      	ldr	r3, [sp, #32]
   289aa:	469e      	mov	lr, r3
   289ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   289ae:	459e      	cmp	lr, r3
   289b0:	d803      	bhi.n	289ba <ticker_job_list_insert+0x1b4>
		current = ticker_current->next;
   289b2:	9b06      	ldr	r3, [sp, #24]
   289b4:	9203      	str	r2, [sp, #12]
   289b6:	5cca      	ldrb	r2, [r1, r3]
   289b8:	e75d      	b.n	28876 <ticker_job_list_insert+0x70>
		(ticks_to_expire_current =
   289ba:	4660      	mov	r0, ip
   289bc:	e769      	b.n	28892 <ticker_job_list_insert+0x8c>

000289be <ticker_worker>:
{
   289be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   289c2:	7f86      	ldrb	r6, [r0, #30]
	instance->worker_trigger = 1U;
   289c4:	2301      	movs	r3, #1
{
   289c6:	b08b      	sub	sp, #44	; 0x2c
   289c8:	4605      	mov	r5, r0
	instance->worker_trigger = 1U;
   289ca:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   289cc:	b91e      	cbnz	r6, 289d6 <ticker_worker+0x18>
	if (instance->ticker_id_head == TICKER_NULL) {
   289ce:	7f43      	ldrb	r3, [r0, #29]
   289d0:	2bff      	cmp	r3, #255	; 0xff
   289d2:	d103      	bne.n	289dc <ticker_worker+0x1e>
		instance->worker_trigger = 0U;
   289d4:	77c6      	strb	r6, [r0, #31]
}
   289d6:	b00b      	add	sp, #44	; 0x2c
   289d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   289dc:	f7f3 ff26 	bl	1c82c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   289e0:	696b      	ldr	r3, [r5, #20]
	ticker_id_head = instance->ticker_id_head;
   289e2:	7f6f      	ldrb	r7, [r5, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   289e4:	1ac0      	subs	r0, r0, r3
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   289e6:	7f2b      	ldrb	r3, [r5, #28]
   289e8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   289ea:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   289ee:	d004      	beq.n	289fa <ticker_worker+0x3c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   289f0:	69ae      	ldr	r6, [r5, #24]
	uint8_t slot_reserved = 0;
   289f2:	455e      	cmp	r6, fp
   289f4:	bf94      	ite	ls
   289f6:	2600      	movls	r6, #0
   289f8:	2601      	movhi	r6, #1
	ticks_expired = 0U;
   289fa:	2300      	movs	r3, #0
	node = &instance->nodes[0];
   289fc:	f8d5 8000 	ldr.w	r8, [r5]
	ticks_expired = 0U;
   28a00:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   28a02:	2fff      	cmp	r7, #255	; 0xff
   28a04:	d11a      	bne.n	28a3c <ticker_worker+0x7e>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   28a06:	7aea      	ldrb	r2, [r5, #11]
   28a08:	7aab      	ldrb	r3, [r5, #10]
   28a0a:	4293      	cmp	r3, r2
   28a0c:	d105      	bne.n	28a1a <ticker_worker+0x5c>
	uint8_t idx = *ticks_elapsed_index + 1;
   28a0e:	3301      	adds	r3, #1
   28a10:	b2db      	uxtb	r3, r3
		idx = 0U;
   28a12:	2b02      	cmp	r3, #2
   28a14:	bf08      	it	eq
   28a16:	2300      	moveq	r3, #0
	*ticks_elapsed_index = idx;
   28a18:	72eb      	strb	r3, [r5, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   28a1a:	7aeb      	ldrb	r3, [r5, #11]
   28a1c:	9a01      	ldr	r2, [sp, #4]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   28a1e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   28a20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   28a24:	2104      	movs	r1, #4
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   28a26:	60da      	str	r2, [r3, #12]
	instance->worker_trigger = 0U;
   28a28:	2300      	movs	r3, #0
   28a2a:	77eb      	strb	r3, [r5, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   28a2c:	2201      	movs	r2, #1
   28a2e:	462b      	mov	r3, r5
   28a30:	2003      	movs	r0, #3
   28a32:	46a4      	mov	ip, r4
}
   28a34:	b00b      	add	sp, #44	; 0x2c
   28a36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   28a3a:	4760      	bx	ip
		ticker = &node[ticker_id_head];
   28a3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   28a40:	013f      	lsls	r7, r7, #4
   28a42:	eb08 0407 	add.w	r4, r8, r7
		ticks_to_expire = ticker->ticks_to_expire;
   28a46:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   28a48:	459b      	cmp	fp, r3
   28a4a:	d3dc      	bcc.n	28a06 <ticker_worker+0x48>
		ticks_expired += ticks_to_expire;
   28a4c:	9a01      	ldr	r2, [sp, #4]
		ticker_id_head = ticker->next;
   28a4e:	f818 7007 	ldrb.w	r7, [r8, r7]
		ticks_expired += ticks_to_expire;
   28a52:	441a      	add	r2, r3
		ticks_elapsed -= ticks_to_expire;
   28a54:	ebab 0b03 	sub.w	fp, fp, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   28a58:	78a3      	ldrb	r3, [r4, #2]
   28a5a:	9302      	str	r3, [sp, #8]
		ticks_expired += ticks_to_expire;
   28a5c:	9201      	str	r2, [sp, #4]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   28a5e:	7863      	ldrb	r3, [r4, #1]
   28a60:	9a02      	ldr	r2, [sp, #8]
   28a62:	1a9b      	subs	r3, r3, r2
   28a64:	b2db      	uxtb	r3, r3
   28a66:	2b01      	cmp	r3, #1
   28a68:	d1cb      	bne.n	28a02 <ticker_worker+0x44>
		if (ticker->ticks_slot != 0U &&
   28a6a:	69a3      	ldr	r3, [r4, #24]
   28a6c:	9303      	str	r3, [sp, #12]
   28a6e:	2b00      	cmp	r3, #0
   28a70:	d030      	beq.n	28ad4 <ticker_worker+0x116>
   28a72:	2e00      	cmp	r6, #0
   28a74:	f040 8095 	bne.w	28ba2 <ticker_worker+0x1e4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   28a78:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   28a7c:	9304      	str	r3, [sp, #16]
   28a7e:	3380      	adds	r3, #128	; 0x80
   28a80:	d028      	beq.n	28ad4 <ticker_worker+0x116>
   28a82:	2fff      	cmp	r7, #255	; 0xff
   28a84:	d026      	beq.n	28ad4 <ticker_worker+0x116>
		int32_t lazy_current = ticker->lazy_current;
   28a86:	8be1      	ldrh	r1, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   28a88:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   28a8a:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
   28a8c:	2000      	movs	r0, #0
		if (lazy_current >= ticker->lazy_periodic) {
   28a8e:	4299      	cmp	r1, r3
		uint32_t acc_ticks_to_expire = 0U;
   28a90:	9005      	str	r0, [sp, #20]
				(lazy_current - ticker->priority);
   28a92:	9804      	ldr	r0, [sp, #16]
			lazy_current -= ticker->lazy_periodic;
   28a94:	bf28      	it	cs
   28a96:	1ac9      	subcs	r1, r1, r3
		uint32_t current_age = ticker->ticks_periodic +
   28a98:	fb01 2302 	mla	r3, r1, r2, r2
				(lazy_current - ticker->priority);
   28a9c:	1a09      	subs	r1, r1, r0
		uint32_t current_age = ticker->ticks_periodic +
   28a9e:	9308      	str	r3, [sp, #32]
				(lazy_current - ticker->priority);
   28aa0:	9109      	str	r1, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
   28aa2:	463b      	mov	r3, r7
			struct ticker_node *ticker_next = &nodes[id_head];
   28aa4:	b21b      	sxth	r3, r3
   28aa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28aaa:	011b      	lsls	r3, r3, #4
   28aac:	eb08 0a03 	add.w	sl, r8, r3
   28ab0:	9307      	str	r3, [sp, #28]
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   28ab2:	f8da 9008 	ldr.w	r9, [sl, #8]
   28ab6:	9b05      	ldr	r3, [sp, #20]
   28ab8:	444b      	add	r3, r9
   28aba:	9305      	str	r3, [sp, #20]
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   28abc:	9905      	ldr	r1, [sp, #20]
   28abe:	9b03      	ldr	r3, [sp, #12]
   28ac0:	428b      	cmp	r3, r1
   28ac2:	d307      	bcc.n	28ad4 <ticker_worker+0x116>
			if (ticker_next->ticks_slot == 0U) {
   28ac4:	f8da 3018 	ldr.w	r3, [sl, #24]
   28ac8:	bb73      	cbnz	r3, 28b28 <ticker_worker+0x16a>
			id_head = ticker_next->next;
   28aca:	9b07      	ldr	r3, [sp, #28]
   28acc:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
   28ad0:	2bff      	cmp	r3, #255	; 0xff
   28ad2:	d1e7      	bne.n	28aa4 <ticker_worker+0xe6>
		must_expire_skip = 0U;
   28ad4:	f04f 0900 	mov.w	r9, #0
		if (ticker->ext_data) {
   28ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28ada:	b113      	cbz	r3, 28ae2 <ticker_worker+0x124>
			ticker->ext_data->ticks_drift = 0U;
   28adc:	2200      	movs	r2, #0
   28ade:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   28ae0:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
   28ae2:	9b02      	ldr	r3, [sp, #8]
		if (ticker->timeout_func) {
   28ae4:	f8d4 a00c 	ldr.w	sl, [r4, #12]
		ticker->ack--;
   28ae8:	3b01      	subs	r3, #1
   28aea:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   28aec:	f1ba 0f00 	cmp.w	sl, #0
   28af0:	d087      	beq.n	28a02 <ticker_worker+0x44>
					   ticks_expired -
   28af2:	9b01      	ldr	r3, [sp, #4]
   28af4:	6960      	ldr	r0, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   28af6:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   28af8:	1a18      	subs	r0, r3, r0
   28afa:	696b      	ldr	r3, [r5, #20]
   28afc:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   28afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   28b02:	f1b9 0f00 	cmp.w	r9, #0
   28b06:	d175      	bne.n	28bf4 <ticker_worker+0x236>
   28b08:	8be2      	ldrh	r2, [r4, #30]
   28b0a:	6923      	ldr	r3, [r4, #16]
   28b0c:	47d0      	blx	sl
			if (must_expire_skip == 0U) {
   28b0e:	f1b9 0f00 	cmp.w	r9, #0
   28b12:	f47f af76 	bne.w	28a02 <ticker_worker+0x44>
				if (ticker->ticks_slot != 0U) {
   28b16:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
   28b18:	f8a4 901e 	strh.w	r9, [r4, #30]
					slot_reserved = 1U;
   28b1c:	2b00      	cmp	r3, #0
				ticker->force = 0U;
   28b1e:	f884 9003 	strb.w	r9, [r4, #3]
					slot_reserved = 1U;
   28b22:	bf18      	it	ne
   28b24:	2601      	movne	r6, #1
   28b26:	e76c      	b.n	28a02 <ticker_worker+0x44>
			int32_t lazy_next = ticker_next->lazy_current;
   28b28:	f8ba 101e 	ldrh.w	r1, [sl, #30]
				ticker_next->lazy_periodic > lazy_next;
   28b2c:	f8ba c01c 	ldrh.w	ip, [sl, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   28b30:	f8da e004 	ldr.w	lr, [sl, #4]
			int32_t lazy_next = ticker_next->lazy_current;
   28b34:	9106      	str	r1, [sp, #24]
			if (!lazy_next_periodic_skip) {
   28b36:	4561      	cmp	r1, ip
				lazy_next -= ticker_next->lazy_periodic;
   28b38:	bf24      	itt	cs
   28b3a:	eba1 030c 	subcs.w	r3, r1, ip
   28b3e:	9306      	strcs	r3, [sp, #24]
				ticker_next->priority;
   28b40:	f99a 002d 	ldrsb.w	r0, [sl, #45]	; 0x2d
					  0U :
   28b44:	f1be 0f00 	cmp.w	lr, #0
   28b48:	d049      	beq.n	28bde <ticker_worker+0x220>
   28b4a:	ebae 0909 	sub.w	r9, lr, r9
				(ticker->ticks_periodic == 0U) ||
   28b4e:	2a00      	cmp	r2, #0
   28b50:	d047      	beq.n	28be2 <ticker_worker+0x224>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   28b52:	9b06      	ldr	r3, [sp, #24]
   28b54:	fb0e 9e03 	mla	lr, lr, r3, r9
				(ticker->ticks_periodic == 0U) ||
   28b58:	9b08      	ldr	r3, [sp, #32]
   28b5a:	4573      	cmp	r3, lr
   28b5c:	bf8c      	ite	hi
   28b5e:	f04f 0901 	movhi.w	r9, #1
   28b62:	f04f 0900 	movls.w	r9, #0
					(ticker->ticks_periodic != 0U) &&
   28b66:	bf34      	ite	cc
   28b68:	f04f 0e01 	movcc.w	lr, #1
   28b6c:	f04f 0e00 	movcs.w	lr, #0
			if (!lazy_next_periodic_skip &&
   28b70:	4561      	cmp	r1, ip
			uint8_t next_force = (ticker_next->force > ticker->force);
   28b72:	f89a 3003 	ldrb.w	r3, [sl, #3]
   28b76:	f894 a003 	ldrb.w	sl, [r4, #3]
			if (!lazy_next_periodic_skip &&
   28b7a:	d3a6      	bcc.n	28aca <ticker_worker+0x10c>
   28b7c:	4553      	cmp	r3, sl
   28b7e:	d810      	bhi.n	28ba2 <ticker_worker+0x1e4>
			    (next_force ||
   28b80:	f110 0f80 	cmn.w	r0, #128	; 0x80
   28b84:	d00d      	beq.n	28ba2 <ticker_worker+0x1e4>
				(lazy_next - ticker_next->priority) >
   28b86:	9b06      	ldr	r3, [sp, #24]
			     next_is_critical ||
   28b88:	9909      	ldr	r1, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   28b8a:	1a1b      	subs	r3, r3, r0
			     next_is_critical ||
   28b8c:	428b      	cmp	r3, r1
   28b8e:	dd02      	ble.n	28b96 <ticker_worker+0x1d8>
			     (next_has_priority && !current_is_older) ||
   28b90:	f1b9 0f00 	cmp.w	r9, #0
   28b94:	d005      	beq.n	28ba2 <ticker_worker+0x1e4>
   28b96:	9b04      	ldr	r3, [sp, #16]
   28b98:	4283      	cmp	r3, r0
   28b9a:	d196      	bne.n	28aca <ticker_worker+0x10c>
			     (equal_priority && next_is_older))) {
   28b9c:	f1be 0f00 	cmp.w	lr, #0
   28ba0:	d093      	beq.n	28aca <ticker_worker+0x10c>
			struct ticker_ext *ext_data = ticker->ext_data;
   28ba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   28ba4:	8be2      	ldrh	r2, [r4, #30]
   28ba6:	b14b      	cbz	r3, 28bbc <ticker_worker+0x1fe>
   28ba8:	6819      	ldr	r1, [r3, #0]
   28baa:	b1f1      	cbz	r1, 28bea <ticker_worker+0x22c>
			    ext_data->ticks_slot_window != 0U &&
   28bac:	7a19      	ldrb	r1, [r3, #8]
   28bae:	b9e1      	cbnz	r1, 28bea <ticker_worker+0x22c>
			    TICKER_RESCHEDULE_STATE_NONE &&
   28bb0:	8ba1      	ldrh	r1, [r4, #28]
   28bb2:	4291      	cmp	r1, r2
   28bb4:	d819      	bhi.n	28bea <ticker_worker+0x22c>
				ext_data->reschedule_state =
   28bb6:	f04f 0101 	mov.w	r1, #1
				ext_data->reschedule_state =
   28bba:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   28bbc:	3201      	adds	r2, #1
			if ((ticker->must_expire == 0U) ||
   28bbe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   28bc2:	b292      	uxth	r2, r2
   28bc4:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   28bc6:	b131      	cbz	r1, 28bd6 <ticker_worker+0x218>
   28bc8:	8ba1      	ldrh	r1, [r4, #28]
   28bca:	4291      	cmp	r1, r2
   28bcc:	d203      	bcs.n	28bd6 <ticker_worker+0x218>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   28bce:	b173      	cbz	r3, 28bee <ticker_worker+0x230>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   28bd0:	7a1b      	ldrb	r3, [r3, #8]
   28bd2:	2b01      	cmp	r3, #1
   28bd4:	d10b      	bne.n	28bee <ticker_worker+0x230>
				ticker->ack--;
   28bd6:	9b02      	ldr	r3, [sp, #8]
   28bd8:	3b01      	subs	r3, #1
   28bda:	70a3      	strb	r3, [r4, #2]
				continue;
   28bdc:	e711      	b.n	28a02 <ticker_worker+0x44>
					  0U :
   28bde:	46f1      	mov	r9, lr
   28be0:	e7b5      	b.n	28b4e <ticker_worker+0x190>
				(ticker->ticks_periodic == 0U) ||
   28be2:	f04f 0901 	mov.w	r9, #1
					(ticker->ticks_periodic != 0U) &&
   28be6:	4696      	mov	lr, r2
   28be8:	e7c2      	b.n	28b70 <ticker_worker+0x1b2>
				ext_data->reschedule_state =
   28bea:	2100      	movs	r1, #0
   28bec:	e7e5      	b.n	28bba <ticker_worker+0x1fc>
			must_expire_skip = 1U;
   28bee:	f04f 0901 	mov.w	r9, #1
   28bf2:	e771      	b.n	28ad8 <ticker_worker+0x11a>
			ticker->timeout_func(ticks_at_expire,
   28bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   28bf8:	e787      	b.n	28b0a <ticker_worker+0x14c>

00028bfa <ticker_start>:
{
   28bfa:	b510      	push	{r4, lr}
   28bfc:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   28bfe:	2400      	movs	r4, #0
   28c00:	9409      	str	r4, [sp, #36]	; 0x24
   28c02:	9c14      	ldr	r4, [sp, #80]	; 0x50
   28c04:	9408      	str	r4, [sp, #32]
   28c06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   28c08:	9407      	str	r4, [sp, #28]
   28c0a:	9c12      	ldr	r4, [sp, #72]	; 0x48
   28c0c:	9406      	str	r4, [sp, #24]
   28c0e:	9c11      	ldr	r4, [sp, #68]	; 0x44
   28c10:	9405      	str	r4, [sp, #20]
   28c12:	9c10      	ldr	r4, [sp, #64]	; 0x40
   28c14:	9404      	str	r4, [sp, #16]
   28c16:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   28c1a:	9403      	str	r4, [sp, #12]
   28c1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   28c1e:	9402      	str	r4, [sp, #8]
   28c20:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   28c22:	9401      	str	r4, [sp, #4]
   28c24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28c26:	9400      	str	r4, [sp, #0]
   28c28:	f7ee fa5c 	bl	170e4 <ticker_start_ext>
}
   28c2c:	b00a      	add	sp, #40	; 0x28
   28c2e:	bd10      	pop	{r4, pc}

00028c30 <ticker_update>:
{
   28c30:	b510      	push	{r4, lr}
   28c32:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   28c34:	2400      	movs	r4, #0
   28c36:	9407      	str	r4, [sp, #28]
   28c38:	9c10      	ldr	r4, [sp, #64]	; 0x40
   28c3a:	9406      	str	r4, [sp, #24]
   28c3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   28c3e:	9405      	str	r4, [sp, #20]
   28c40:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   28c44:	9404      	str	r4, [sp, #16]
   28c46:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   28c4a:	9403      	str	r4, [sp, #12]
   28c4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28c4e:	9402      	str	r4, [sp, #8]
   28c50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   28c52:	9401      	str	r4, [sp, #4]
   28c54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   28c56:	9400      	str	r4, [sp, #0]
   28c58:	f7ee fa90 	bl	1717c <ticker_update_ext>
}
   28c5c:	b008      	add	sp, #32
   28c5e:	bd10      	pop	{r4, pc}

00028c60 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   28c60:	f7f3 bde4 	b.w	1c82c <cntr_cnt_get>

00028c64 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   28c64:	1a40      	subs	r0, r0, r1
}
   28c66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   28c6a:	4770      	bx	lr

00028c6c <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   28c6c:	2802      	cmp	r0, #2
{
   28c6e:	b538      	push	{r3, r4, r5, lr}
   28c70:	4604      	mov	r4, r0
   28c72:	461d      	mov	r5, r3
	switch (handle_type) {
   28c74:	d107      	bne.n	28c86 <ll_tx_pwr_lvl_get+0x1a>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
   28c76:	4608      	mov	r0, r1
   28c78:	f000 f99e 	bl	28fb8 <ll_connected_get>
			if (!conn) {
   28c7c:	b108      	cbz	r0, 28c82 <ll_tx_pwr_lvl_get+0x16>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Level desired is maximum available */
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
#else  /* !CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
				/* Return default if not multiple TXP */
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   28c7e:	2400      	movs	r4, #0
   28c80:	702c      	strb	r4, [r5, #0]
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   28c82:	4620      	mov	r0, r4
   28c84:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_UNKNOWN_CMD;
   28c86:	2401      	movs	r4, #1
   28c88:	e7fb      	b.n	28c82 <ll_tx_pwr_lvl_get+0x16>

00028c8a <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   28c8a:	2300      	movs	r3, #0
   28c8c:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   28c8e:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   28c90:	4770      	bx	lr

00028c92 <sys_get_le64>:
{
   28c92:	4603      	mov	r3, r0
}
   28c94:	6800      	ldr	r0, [r0, #0]
   28c96:	6859      	ldr	r1, [r3, #4]
   28c98:	4770      	bx	lr

00028c9a <meta_evt>:
{
   28c9a:	b570      	push	{r4, r5, r6, lr}
	return net_buf_simple_add(&buf->b, len);
   28c9c:	f100 0408 	add.w	r4, r0, #8
   28ca0:	460e      	mov	r6, r1
   28ca2:	4620      	mov	r0, r4
   28ca4:	2102      	movs	r1, #2
   28ca6:	4615      	mov	r5, r2
   28ca8:	f7f4 fd76 	bl	1d798 <net_buf_simple_add>
	hdr->evt = evt;
   28cac:	233e      	movs	r3, #62	; 0x3e
   28cae:	7003      	strb	r3, [r0, #0]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   28cb0:	1c6b      	adds	r3, r5, #1
	hdr->len = len;
   28cb2:	7043      	strb	r3, [r0, #1]
   28cb4:	2101      	movs	r1, #1
   28cb6:	4620      	mov	r0, r4
   28cb8:	f7f4 fd6e 	bl	1d798 <net_buf_simple_add>
	me->subevent = subevt;
   28cbc:	7006      	strb	r6, [r0, #0]
   28cbe:	4629      	mov	r1, r5
   28cc0:	4620      	mov	r0, r4
}
   28cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28cc6:	f7f4 bd67 	b.w	1d798 <net_buf_simple_add>

00028cca <hci_num_cmplt_encode>:
{
   28cca:	b570      	push	{r4, r5, r6, lr}
   28ccc:	f100 0408 	add.w	r4, r0, #8
   28cd0:	460e      	mov	r6, r1
   28cd2:	4620      	mov	r0, r4
   28cd4:	2102      	movs	r1, #2
   28cd6:	4615      	mov	r5, r2
   28cd8:	f7f4 fd5e 	bl	1d798 <net_buf_simple_add>
	hdr->evt = evt;
   28cdc:	2313      	movs	r3, #19
	hdr->len = len;
   28cde:	2105      	movs	r1, #5
	hdr->evt = evt;
   28ce0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   28ce2:	7041      	strb	r1, [r0, #1]
   28ce4:	4620      	mov	r0, r4
   28ce6:	f7f4 fd57 	bl	1d798 <net_buf_simple_add>
	ep->num_handles = num_handles;
   28cea:	2301      	movs	r3, #1
   28cec:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
   28cee:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   28cf2:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   28cf6:	bd70      	pop	{r4, r5, r6, pc}

00028cf8 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   28cf8:	7903      	ldrb	r3, [r0, #4]
   28cfa:	2b03      	cmp	r3, #3
   28cfc:	d00c      	beq.n	28d18 <hci_get_class+0x20>
		switch (node_rx->hdr.type) {
   28cfe:	2b13      	cmp	r3, #19
   28d00:	d012      	beq.n	28d28 <hci_get_class+0x30>
   28d02:	d804      	bhi.n	28d0e <hci_get_class+0x16>
   28d04:	2b04      	cmp	r3, #4
			return HCI_CLASS_NONE;
   28d06:	bf0c      	ite	eq
   28d08:	2002      	moveq	r0, #2
   28d0a:	2000      	movne	r0, #0
   28d0c:	4770      	bx	lr
		switch (node_rx->hdr.type) {
   28d0e:	2b15      	cmp	r3, #21
			return HCI_CLASS_EVT_CONNECTION;
   28d10:	bf8c      	ite	hi
   28d12:	2000      	movhi	r0, #0
   28d14:	2003      	movls	r0, #3
   28d16:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   28d18:	7f03      	ldrb	r3, [r0, #28]
   28d1a:	f003 0303 	and.w	r3, r3, #3
   28d1e:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   28d20:	bf0c      	ite	eq
   28d22:	2004      	moveq	r0, #4
   28d24:	2005      	movne	r0, #5
   28d26:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   28d28:	2001      	movs	r0, #1
}
   28d2a:	4770      	bx	lr

00028d2c <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   28d2c:	f7f2 b9e2 	b.w	1b0f4 <lll_csrand_get>

00028d30 <bt_encrypt_be>:
	return 0;
}

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   28d30:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   28d32:	f000 fcae 	bl	29692 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   28d36:	2000      	movs	r0, #0
   28d38:	bd08      	pop	{r3, pc}

00028d3a <disabled_cb>:
	z_impl_k_sem_give(sem);
   28d3a:	f7f9 b8a7 	b.w	21e8c <z_impl_k_sem_give>

00028d3e <rx_demux_conn_tx_ack>:
{
   28d3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28d40:	4605      	mov	r5, r0
   28d42:	4614      	mov	r4, r2
   28d44:	9300      	str	r3, [sp, #0]
   28d46:	f8ad 1006 	strh.w	r1, [sp, #6]
		ull_conn_ack_dequeue();
   28d4a:	f7f1 fe1f 	bl	1a98c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   28d4e:	4621      	mov	r1, r4
   28d50:	9a00      	ldr	r2, [sp, #0]
   28d52:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   28d56:	f7f1 fe5b 	bl	1aa10 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   28d5a:	4620      	mov	r0, r4
   28d5c:	f7f1 fddc 	bl	1a918 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   28d60:	466a      	mov	r2, sp
   28d62:	f10d 0106 	add.w	r1, sp, #6
   28d66:	4628      	mov	r0, r5
   28d68:	f7f1 fdfa 	bl	1a960 <ull_conn_ack_by_last_peek>
	} while (link);
   28d6c:	4604      	mov	r4, r0
   28d6e:	2800      	cmp	r0, #0
   28d70:	d1eb      	bne.n	28d4a <rx_demux_conn_tx_ack+0xc>
			ll_rx_sched();
   28d72:	f7ef fe05 	bl	18980 <ll_rx_sched>
}
   28d76:	b003      	add	sp, #12
   28d78:	bd30      	pop	{r4, r5, pc}

00028d7a <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   28d7a:	2300      	movs	r3, #0
   28d7c:	7003      	strb	r3, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   28d7e:	2306      	movs	r3, #6
   28d80:	700b      	strb	r3, [r1, #0]
}
   28d82:	4770      	bx	lr

00028d84 <ll_radio_state_is_idle>:
	return lll_radio_is_idle();
   28d84:	f000 baa2 	b.w	292cc <lll_radio_is_idle>

00028d88 <adva_update.isra.4>:

	/* All legacy PDUs have AdvA at the same offset */
	return pdu->adv_ind.addr;
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
   28d88:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	} else if (ll_adv_cmds_is_ext() && pdu->tx_addr) {
		tx_addr = ll_adv_aux_random_addr_get(adv, NULL);
#endif
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   28d8a:	4604      	mov	r4, r0
   28d8c:	2100      	movs	r1, #0
   28d8e:	f814 0b02 	ldrb.w	r0, [r4], #2
   28d92:	f3c0 1080 	ubfx	r0, r0, #6, #1
   28d96:	f7ee fa75 	bl	17284 <ll_addr_get>
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   28d9a:	2206      	movs	r2, #6
   28d9c:	4601      	mov	r1, r0
   28d9e:	4620      	mov	r0, r4
   28da0:	f7fd f9de 	bl	26160 <memcpy>

	return adv_addr;
}
   28da4:	4620      	mov	r0, r4
   28da6:	bd10      	pop	{r4, pc}

00028da8 <ull_adv_init>:
{
   28da8:	b508      	push	{r3, lr}
   28daa:	f7f0 fa79 	bl	192a0 <init_reset.part.3>
}
   28dae:	2000      	movs	r0, #0
   28db0:	bd08      	pop	{r3, pc}

00028db2 <ull_adv_reset>:
{
   28db2:	b508      	push	{r3, lr}
		(void)disable(handle);
   28db4:	f7f0 fb54 	bl	19460 <disable.constprop.6>
}
   28db8:	2000      	movs	r0, #0
   28dba:	bd08      	pop	{r3, pc}

00028dbc <ull_adv_is_enabled>:
{
   28dbc:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   28dbe:	f7f0 fb41 	bl	19444 <ull_adv_is_enabled_get>
}
   28dc2:	3000      	adds	r0, #0
   28dc4:	bf18      	it	ne
   28dc6:	2001      	movne	r0, #1
   28dc8:	bd08      	pop	{r3, pc}

00028dca <ull_adv_filter_pol_get>:
{
   28dca:	b508      	push	{r3, lr}
	adv = ull_adv_is_enabled_get(handle);
   28dcc:	f7f0 fb3a 	bl	19444 <ull_adv_is_enabled_get>
	if (!adv) {
   28dd0:	b118      	cbz	r0, 28dda <ull_adv_filter_pol_get+0x10>
	return adv->lll.filter_policy;
   28dd2:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
   28dd6:	f000 0003 	and.w	r0, r0, #3
}
   28dda:	bd08      	pop	{r3, pc}

00028ddc <ull_scan_rsp_set>:
{
   28ddc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   28de0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   28de4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   28de8:	460f      	mov	r7, r1
   28dea:	4606      	mov	r6, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   28dec:	f10d 0107 	add.w	r1, sp, #7
   28df0:	3038      	adds	r0, #56	; 0x38
   28df2:	4690      	mov	r8, r2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   28df4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   28df6:	f7f2 fbff 	bl	1b5f8 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   28dfa:	7803      	ldrb	r3, [r0, #0]
   28dfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	pdu->tx_addr = prev->tx_addr;
   28e00:	4629      	mov	r1, r5
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   28e02:	f043 0304 	orr.w	r3, r3, #4
   28e06:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   28e08:	f811 2b02 	ldrb.w	r2, [r1], #2
   28e0c:	b2db      	uxtb	r3, r3
   28e0e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   28e12:	f362 1386 	bfi	r3, r2, #6, #1
	pdu->rx_addr = 0;
   28e16:	f36f 13c7 	bfc	r3, #7, #1
   28e1a:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   28e1c:	1dbb      	adds	r3, r7, #6
   28e1e:	7043      	strb	r3, [r0, #1]
   28e20:	4604      	mov	r4, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   28e22:	2206      	movs	r2, #6
   28e24:	3002      	adds	r0, #2
   28e26:	f7fd f99b 	bl	26160 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   28e2a:	463a      	mov	r2, r7
   28e2c:	4641      	mov	r1, r8
   28e2e:	f104 0008 	add.w	r0, r4, #8
   28e32:	f7fd f995 	bl	26160 <memcpy>
	pdu->last = idx;
   28e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28e3a:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
}
   28e3e:	2000      	movs	r0, #0
   28e40:	b002      	add	sp, #8
   28e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028e46 <ull_scan_init>:
}
   28e46:	2000      	movs	r0, #0
   28e48:	4770      	bx	lr

00028e4a <disable.constprop.1>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   28e4a:	b510      	push	{r4, lr}
{
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   28e4c:	2000      	movs	r0, #0
   28e4e:	f7f0 fc5f 	bl	19710 <ull_scan_is_enabled_get>
	if (!scan) {
   28e52:	4604      	mov	r4, r0
   28e54:	b158      	cbz	r0, 28e6e <disable.constprop.1+0x24>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   28e56:	4601      	mov	r1, r0
   28e58:	2000      	movs	r0, #0
   28e5a:	f7f0 fc33 	bl	196c4 <ull_scan_disable>
	if (ret) {
   28e5e:	b928      	cbnz	r0, 28e6c <disable.constprop.1+0x22>
		return ret;
	}

	scan->is_enabled = 0U;
   28e60:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   28e64:	f360 0300 	bfi	r3, r0, #0, #1
   28e68:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   28e6c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   28e6e:	200c      	movs	r0, #12
   28e70:	e7fc      	b.n	28e6c <disable.constprop.1+0x22>

00028e72 <ull_scan_reset>:
{
   28e72:	b508      	push	{r3, lr}
		(void)disable(handle);
   28e74:	f7ff ffe9 	bl	28e4a <disable.constprop.1>
}
   28e78:	2000      	movs	r0, #0
   28e7a:	bd08      	pop	{r3, pc}

00028e7c <ll_scan_enable>:
{
   28e7c:	b510      	push	{r4, lr}
	if (!enable) {
   28e7e:	b918      	cbnz	r0, 28e88 <ll_scan_enable+0xc>
}
   28e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = disable(SCAN_HANDLE_1M);
   28e84:	f7ff bfe1 	b.w	28e4a <disable.constprop.1>
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   28e88:	2000      	movs	r0, #0
   28e8a:	f7f0 fc4f 	bl	1972c <ull_scan_is_disabled_get>
	if (!scan) {
   28e8e:	4604      	mov	r4, r0
   28e90:	b198      	cbz	r0, 28eba <ll_scan_enable+0x3e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   28e92:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   28e96:	079b      	lsls	r3, r3, #30
   28e98:	d404      	bmi.n	28ea4 <ll_scan_enable+0x28>
		err = ull_scan_enable(scan);
   28e9a:	4620      	mov	r0, r4
}
   28e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = ull_scan_enable(scan);
   28ea0:	f7d9 bb6e 	b.w	2580 <ull_scan_enable>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   28ea4:	2100      	movs	r1, #0
   28ea6:	2001      	movs	r0, #1
   28ea8:	f7ee f9ec 	bl	17284 <ll_addr_get>
   28eac:	2106      	movs	r1, #6
   28eae:	f7ff fc38 	bl	28722 <mem_nz>
   28eb2:	2800      	cmp	r0, #0
   28eb4:	d1f1      	bne.n	28e9a <ll_scan_enable+0x1e>
			return BT_HCI_ERR_INVALID_PARAM;
   28eb6:	2012      	movs	r0, #18
}
   28eb8:	bd10      	pop	{r4, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   28eba:	200c      	movs	r0, #12
   28ebc:	e7fc      	b.n	28eb8 <ll_scan_enable+0x3c>

00028ebe <ull_scan_is_enabled>:
{
   28ebe:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   28ec0:	f7f0 fc26 	bl	19710 <ull_scan_is_enabled_get>
	if (!scan) {
   28ec4:	b140      	cbz	r0, 28ed8 <ull_scan_is_enabled+0x1a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   28ec6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   28eca:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   28ece:	f003 0301 	and.w	r3, r3, #1
   28ed2:	09c0      	lsrs	r0, r0, #7
   28ed4:	fa03 f000 	lsl.w	r0, r3, r0
}
   28ed8:	bd08      	pop	{r3, pc}

00028eda <ull_scan_filter_pol_get>:
{
   28eda:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   28edc:	f7f0 fc18 	bl	19710 <ull_scan_is_enabled_get>
	if (!scan) {
   28ee0:	b118      	cbz	r0, 28eea <ull_scan_filter_pol_get+0x10>
	return scan->lll.filter_policy;
   28ee2:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   28ee6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   28eea:	bd08      	pop	{r3, pc}

00028eec <tx_ull_dequeue>:
{
   28eec:	4603      	mov	r3, r0
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   28eee:	e9d0 2045 	ldrd	r2, r0, [r0, #276]	; 0x114
{
   28ef2:	b510      	push	{r4, lr}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   28ef4:	b978      	cbnz	r0, 28f16 <tx_ull_dequeue+0x2a>
   28ef6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   28efa:	4290      	cmp	r0, r2
   28efc:	d00b      	beq.n	28f16 <tx_ull_dequeue+0x2a>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   28efe:	7910      	ldrb	r0, [r2, #4]
   28f00:	f000 0003 	and.w	r0, r0, #3
   28f04:	2803      	cmp	r0, #3
   28f06:	d104      	bne.n	28f12 <tx_ull_dequeue+0x26>
		    ((pdu_data_tx->llctrl.opcode !=
   28f08:	79d0      	ldrb	r0, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   28f0a:	2803      	cmp	r0, #3
   28f0c:	d003      	beq.n	28f16 <tx_ull_dequeue+0x2a>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   28f0e:	280a      	cmp	r0, #10
   28f10:	d001      	beq.n	28f16 <tx_ull_dequeue+0x2a>
			conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   28f12:	e9c3 2246 	strd	r2, r2, [r3, #280]	; 0x118
	if (conn->tx_head == conn->tx_ctrl) {
   28f16:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
   28f1a:	6810      	ldr	r0, [r2, #0]
   28f1c:	4294      	cmp	r4, r2
   28f1e:	d10d      	bne.n	28f3c <tx_ull_dequeue+0x50>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   28f20:	f8d3 411c 	ldr.w	r4, [r3, #284]	; 0x11c
		conn->tx_head = conn->tx_head->next;
   28f24:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   28f28:	42a2      	cmp	r2, r4
			conn->tx_ctrl = NULL;
   28f2a:	bf06      	itte	eq
   28f2c:	2200      	moveq	r2, #0
			conn->tx_ctrl_last = NULL;
   28f2e:	e9c3 2246 	strdeq	r2, r2, [r3, #280]	; 0x118
			conn->tx_ctrl = conn->tx_head;
   28f32:	f8c3 0118 	strne.w	r0, [r3, #280]	; 0x118
		tx->next = tx;
   28f36:	6009      	str	r1, [r1, #0]
}
   28f38:	4608      	mov	r0, r1
   28f3a:	bd10      	pop	{r4, pc}
		if (conn->tx_head == conn->tx_data) {
   28f3c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
		conn->tx_head = conn->tx_head->next;
   28f40:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
		if (conn->tx_head == conn->tx_data) {
   28f44:	4294      	cmp	r4, r2
			conn->tx_data = conn->tx_data->next;
   28f46:	bf08      	it	eq
   28f48:	f8c3 0120 	streq.w	r0, [r3, #288]	; 0x120
		tx->next = NULL;
   28f4c:	2300      	movs	r3, #0
   28f4e:	600b      	str	r3, [r1, #0]
   28f50:	e7f2      	b.n	28f38 <tx_ull_dequeue+0x4c>

00028f52 <feat_get>:
	       (features[1] << 8) | (features[2] << 16);
   28f52:	7883      	ldrb	r3, [r0, #2]
   28f54:	7842      	ldrb	r2, [r0, #1]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   28f56:	7800      	ldrb	r0, [r0, #0]
	       (features[1] << 8) | (features[2] << 16);
   28f58:	041b      	lsls	r3, r3, #16
   28f5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28f5e:	4318      	orrs	r0, r3
   28f60:	f3c0 0010 	ubfx	r0, r0, #0, #17
}
   28f64:	f440 5043 	orr.w	r0, r0, #12480	; 0x30c0
   28f68:	f040 0010 	orr.w	r0, r0, #16
   28f6c:	4770      	bx	lr

00028f6e <ctrl_tx_enqueue>:
	if (
   28f6e:	e9d0 3245 	ldrd	r3, r2, [r0, #276]	; 0x114
{
   28f72:	b510      	push	{r4, lr}
	if (
   28f74:	b18b      	cbz	r3, 28f9a <ctrl_tx_enqueue+0x2c>
		if (conn->tx_head == conn->tx_data) {
   28f76:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
   28f7a:	42a3      	cmp	r3, r4
			conn->tx_data = conn->tx_data->next;
   28f7c:	bf04      	itt	eq
   28f7e:	681c      	ldreq	r4, [r3, #0]
   28f80:	f8c0 4120 	streq.w	r4, [r0, #288]	; 0x120
		if (!conn->tx_ctrl) {
   28f84:	b992      	cbnz	r2, 28fac <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head->next;
   28f86:	681a      	ldr	r2, [r3, #0]
   28f88:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   28f8a:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   28f8c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	if (!tx->next) {
   28f90:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   28f92:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
	if (!tx->next) {
   28f96:	b133      	cbz	r3, 28fa6 <ctrl_tx_enqueue+0x38>
}
   28f98:	bd10      	pop	{r4, pc}
		if (!conn->tx_ctrl) {
   28f9a:	b93a      	cbnz	r2, 28fac <ctrl_tx_enqueue+0x3e>
			tx->next = conn->tx_head;
   28f9c:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl = tx;
   28f9e:	e9c0 1145 	strd	r1, r1, [r0, #276]	; 0x114
				conn->tx_ctrl_last = tx;
   28fa2:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
		conn->tx_data_last = tx;
   28fa6:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
   28faa:	e7f5      	b.n	28f98 <ctrl_tx_enqueue+0x2a>
	tx->next = conn->tx_ctrl_last->next;
   28fac:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   28fb0:	681a      	ldr	r2, [r3, #0]
   28fb2:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   28fb4:	6019      	str	r1, [r3, #0]
   28fb6:	e7eb      	b.n	28f90 <ctrl_tx_enqueue+0x22>

00028fb8 <ll_connected_get>:
{
   28fb8:	b508      	push	{r3, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   28fba:	b918      	cbnz	r0, 28fc4 <ll_connected_get+0xc>
	conn = ll_conn_get(handle);
   28fbc:	f7f0 fd7a 	bl	19ab4 <ll_conn_get>
	if (conn->lll.handle != handle) {
   28fc0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   28fc2:	b103      	cbz	r3, 28fc6 <ll_connected_get+0xe>
		return NULL;
   28fc4:	2000      	movs	r0, #0
}
   28fc6:	bd08      	pop	{r3, pc}

00028fc8 <ll_conn_update>:
{
   28fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28fcc:	4680      	mov	r8, r0
   28fce:	460c      	mov	r4, r1
   28fd0:	4691      	mov	r9, r2
   28fd2:	469a      	mov	sl, r3
   28fd4:	f8bd 7020 	ldrh.w	r7, [sp, #32]
   28fd8:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   28fdc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	conn = ll_connected_get(handle);
   28fe0:	f7ff ffea 	bl	28fb8 <ll_connected_get>
	if (!conn) {
   28fe4:	2800      	cmp	r0, #0
   28fe6:	d06b      	beq.n	290c0 <ll_conn_update+0xf8>
	if (!cmd) {
   28fe8:	bb84      	cbnz	r4, 2904c <ll_conn_update+0x84>
		if (!conn->llcp_conn_param.disabled &&
   28fea:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
   28fee:	06da      	lsls	r2, r3, #27
   28ff0:	d408      	bmi.n	29004 <ll_conn_update+0x3c>
		    (!conn->common.fex_valid ||
   28ff2:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
		if (!conn->llcp_conn_param.disabled &&
   28ff6:	f011 0101 	ands.w	r1, r1, #1
   28ffa:	d042      	beq.n	29082 <ll_conn_update+0xba>
		     (conn->llcp_feature.features_conn &
   28ffc:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
		    (!conn->common.fex_valid ||
   29000:	0793      	lsls	r3, r2, #30
   29002:	d424      	bmi.n	2904e <ll_conn_update+0x86>
		} else if (conn->lll.role) {
   29004:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   29008:	2b00      	cmp	r3, #0
   2900a:	db5b      	blt.n	290c4 <ll_conn_update+0xfc>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   2900c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
   29010:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
   29014:	429a      	cmp	r2, r3
   29016:	d157      	bne.n	290c8 <ll_conn_update+0x100>
		conn->llcp_cu.win_size = 1U;
   29018:	2301      	movs	r3, #1
   2901a:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2901e:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
		conn->llcp_cu.interval = interval_max;
   29022:	f8a0 70a4 	strh.w	r7, [r0, #164]	; 0xa4
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   29026:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_cu.win_offset_us = 0U;
   2902a:	2400      	movs	r4, #0
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2902c:	f043 0305 	orr.w	r3, r3, #5
		conn->llcp_cu.req++;
   29030:	3201      	adds	r2, #1
		conn->llcp_cu.win_offset_us = 0U;
   29032:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		conn->llcp_cu.latency = latency;
   29036:	f8a0 60a6 	strh.w	r6, [r0, #166]	; 0xa6
		conn->llcp_cu.timeout = timeout;
   2903a:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   2903e:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
		conn->llcp_cu.req++;
   29042:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
   29046:	4620      	mov	r0, r4
   29048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2904c:	4621      	mov	r1, r4
		cmd--;
   2904e:	3901      	subs	r1, #1
		if (cmd) {
   29050:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
   29054:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   29058:	f890 20ed 	ldrb.w	r2, [r0, #237]	; 0xed
   2905c:	d013      	beq.n	29086 <ll_conn_update+0xbe>
			if ((conn->llcp_conn_param.req ==
   2905e:	4293      	cmp	r3, r2
   29060:	d032      	beq.n	290c8 <ll_conn_update+0x100>
			    (conn->llcp_conn_param.state !=
   29062:	f890 30ee 	ldrb.w	r3, [r0, #238]	; 0xee
			     conn->llcp_conn_param.ack) ||
   29066:	f003 0207 	and.w	r2, r3, #7
   2906a:	2a03      	cmp	r2, #3
   2906c:	d12c      	bne.n	290c8 <ll_conn_update+0x100>
			conn->llcp_conn_param.state = cmd;
   2906e:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1U;
   29072:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   29076:	f880 90ef 	strb.w	r9, [r0, #239]	; 0xef
			conn->llcp_conn_param.cmd = 1U;
   2907a:	f880 30ee 	strb.w	r3, [r0, #238]	; 0xee
	return 0;
   2907e:	2400      	movs	r4, #0
   29080:	e7e1      	b.n	29046 <ll_conn_update+0x7e>
			cmd++;
   29082:	2101      	movs	r1, #1
   29084:	e7e3      	b.n	2904e <ll_conn_update+0x86>
			if (conn->llcp_conn_param.req !=
   29086:	4293      	cmp	r3, r2
   29088:	d11e      	bne.n	290c8 <ll_conn_update+0x100>
			conn->llcp_conn_param.state = cmd;
   2908a:	f8b0 20ee 	ldrh.w	r2, [r0, #238]	; 0xee
			conn->llcp_conn_param.interval_min = interval_min;
   2908e:	f8a0 a0f0 	strh.w	sl, [r0, #240]	; 0xf0
			conn->llcp_conn_param.req++;
   29092:	3301      	adds	r3, #1
   29094:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   29098:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_max = interval_max;
   2909c:	f8a0 70f2 	strh.w	r7, [r0, #242]	; 0xf2
			conn->llcp_conn_param.state = cmd;
   290a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   290a4:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   290a8:	2b00      	cmp	r3, #0
			conn->llcp_conn_param.latency = latency;
   290aa:	f8a0 60f4 	strh.w	r6, [r0, #244]	; 0xf4
			conn->llcp_conn_param.timeout = timeout;
   290ae:	f8a0 50f6 	strh.w	r5, [r0, #246]	; 0xf6
			conn->llcp_conn_param.state = cmd;
   290b2:	f8a0 20ee 	strh.w	r2, [r0, #238]	; 0xee
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   290b6:	dac6      	bge.n	29046 <ll_conn_update+0x7e>
				ull_slave_latency_cancel(conn, handle);
   290b8:	4641      	mov	r1, r8
   290ba:	f7f1 fd8f 	bl	1abdc <ull_slave_latency_cancel>
   290be:	e7c2      	b.n	29046 <ll_conn_update+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   290c0:	2402      	movs	r4, #2
   290c2:	e7c0      	b.n	29046 <ll_conn_update+0x7e>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   290c4:	241a      	movs	r4, #26
   290c6:	e7be      	b.n	29046 <ll_conn_update+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
   290c8:	240c      	movs	r4, #12
   290ca:	e7bc      	b.n	29046 <ll_conn_update+0x7e>

000290cc <ll_chm_get>:
{
   290cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   290ce:	460d      	mov	r5, r1
	conn = ll_connected_get(handle);
   290d0:	f7ff ff72 	bl	28fb8 <ll_connected_get>
	if (!conn) {
   290d4:	4604      	mov	r4, r0
   290d6:	b170      	cbz	r0, 290f6 <ll_chm_get+0x2a>
		conn->chm_updated = 0U;
   290d8:	2700      	movs	r7, #0
		memcpy(chm, conn->lll.data_chan_map,
   290da:	f100 0638 	add.w	r6, r0, #56	; 0x38
		conn->chm_updated = 0U;
   290de:	f884 7128 	strb.w	r7, [r4, #296]	; 0x128
		memcpy(chm, conn->lll.data_chan_map,
   290e2:	2205      	movs	r2, #5
   290e4:	4631      	mov	r1, r6
   290e6:	4628      	mov	r0, r5
   290e8:	f7fd f83a 	bl	26160 <memcpy>
	} while (conn->chm_updated);
   290ec:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   290f0:	2800      	cmp	r0, #0
   290f2:	d1f4      	bne.n	290de <ll_chm_get+0x12>
}
   290f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   290f6:	2002      	movs	r0, #2
   290f8:	e7fc      	b.n	290f4 <ll_chm_get+0x28>

000290fa <ll_terminate_ind_send>:
	switch (reason) {
   290fa:	2915      	cmp	r1, #21
{
   290fc:	b538      	push	{r3, r4, r5, lr}
   290fe:	4605      	mov	r5, r0
   29100:	460c      	mov	r4, r1
	switch (reason) {
   29102:	d817      	bhi.n	29134 <ll_terminate_ind_send+0x3a>
   29104:	2913      	cmp	r1, #19
   29106:	d201      	bcs.n	2910c <ll_terminate_ind_send+0x12>
   29108:	2905      	cmp	r1, #5
   2910a:	d119      	bne.n	29140 <ll_terminate_ind_send+0x46>
	conn = ll_connected_get(handle);
   2910c:	4628      	mov	r0, r5
   2910e:	f7ff ff53 	bl	28fb8 <ll_connected_get>
	if (!conn) {
   29112:	b1b8      	cbz	r0, 29144 <ll_terminate_ind_send+0x4a>
	conn->llcp_terminate.req++;
   29114:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   29118:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   2911c:	f880 40ca 	strb.w	r4, [r0, #202]	; 0xca
	conn->llcp_terminate.req++;
   29120:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   29122:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   29124:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   29128:	da02      	bge.n	29130 <ll_terminate_ind_send+0x36>
		ull_slave_latency_cancel(conn, handle);
   2912a:	4629      	mov	r1, r5
   2912c:	f7f1 fd56 	bl	1abdc <ull_slave_latency_cancel>
	return 0;
   29130:	2000      	movs	r0, #0
   29132:	e006      	b.n	29142 <ll_terminate_ind_send+0x48>
	switch (reason) {
   29134:	2929      	cmp	r1, #41	; 0x29
   29136:	d0e9      	beq.n	2910c <ll_terminate_ind_send+0x12>
   29138:	293b      	cmp	r1, #59	; 0x3b
   2913a:	d0e7      	beq.n	2910c <ll_terminate_ind_send+0x12>
   2913c:	291a      	cmp	r1, #26
   2913e:	e7e4      	b.n	2910a <ll_terminate_ind_send+0x10>
		return BT_HCI_ERR_INVALID_PARAM;
   29140:	2012      	movs	r0, #18
}
   29142:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   29144:	2002      	movs	r0, #2
   29146:	e7fc      	b.n	29142 <ll_terminate_ind_send+0x48>

00029148 <ll_feature_req_send>:
{
   29148:	b510      	push	{r4, lr}
   2914a:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   2914c:	f7ff ff34 	bl	28fb8 <ll_connected_get>
	if (!conn) {
   29150:	b188      	cbz	r0, 29176 <ll_feature_req_send+0x2e>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   29152:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
   29156:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
   2915a:	428a      	cmp	r2, r1
   2915c:	d10d      	bne.n	2917a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2915e:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   29162:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   29164:	2b00      	cmp	r3, #0
	conn->llcp_feature.req++;
   29166:	f880 20b4 	strb.w	r2, [r0, #180]	; 0xb4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2916a:	da02      	bge.n	29172 <ll_feature_req_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   2916c:	4621      	mov	r1, r4
   2916e:	f7f1 fd35 	bl	1abdc <ull_slave_latency_cancel>
	return 0;
   29172:	2000      	movs	r0, #0
   29174:	e000      	b.n	29178 <ll_feature_req_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   29176:	2002      	movs	r0, #2
}
   29178:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2917a:	200c      	movs	r0, #12
   2917c:	e7fc      	b.n	29178 <ll_feature_req_send+0x30>

0002917e <ll_version_ind_send>:
{
   2917e:	b510      	push	{r4, lr}
   29180:	4604      	mov	r4, r0
	conn = ll_connected_get(handle);
   29182:	f7ff ff19 	bl	28fb8 <ll_connected_get>
	if (!conn) {
   29186:	b188      	cbz	r0, 291ac <ll_version_ind_send+0x2e>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   29188:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   2918c:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   29190:	428a      	cmp	r2, r1
   29192:	d10d      	bne.n	291b0 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   29194:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   29198:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   2919a:	2b00      	cmp	r3, #0
	conn->llcp_version.req++;
   2919c:	f880 20c0 	strb.w	r2, [r0, #192]	; 0xc0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   291a0:	da02      	bge.n	291a8 <ll_version_ind_send+0x2a>
		ull_slave_latency_cancel(conn, handle);
   291a2:	4621      	mov	r1, r4
   291a4:	f7f1 fd1a 	bl	1abdc <ull_slave_latency_cancel>
	return 0;
   291a8:	2000      	movs	r0, #0
   291aa:	e000      	b.n	291ae <ll_version_ind_send+0x30>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   291ac:	2002      	movs	r0, #2
}
   291ae:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   291b0:	200c      	movs	r0, #12
   291b2:	e7fc      	b.n	291ae <ll_version_ind_send+0x30>

000291b4 <ull_conn_init>:
	err = init_reset();
   291b4:	f7f0 bae4 	b.w	19780 <init_reset>

000291b8 <tx_demux>:
{
   291b8:	b510      	push	{r4, lr}
   291ba:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   291bc:	2001      	movs	r0, #1
   291be:	f7f1 f9e3 	bl	1a588 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   291c2:	4620      	mov	r0, r4
   291c4:	2101      	movs	r1, #1
}
   291c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   291ca:	f7f1 bb71 	b.w	1a8b0 <ull_conn_tx_lll_enqueue>

000291ce <ull_conn_lll_max_tx_octets_get>:
}
   291ce:	201b      	movs	r0, #27
   291d0:	4770      	bx	lr

000291d2 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   291d2:	b570      	push	{r4, r5, r6, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   291d4:	fb02 1101 	mla	r1, r2, r1, r1
   291d8:	7802      	ldrb	r2, [r0, #0]
{
   291da:	f89d 5010 	ldrb.w	r5, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   291de:	440a      	add	r2, r1
   291e0:	2125      	movs	r1, #37	; 0x25
   291e2:	fbb2 f4f1 	udiv	r4, r2, r1
   291e6:	fb01 2414 	mls	r4, r1, r4, r2
   291ea:	b2e1      	uxtb	r1, r4
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   291ec:	08ca      	lsrs	r2, r1, #3
	*chan_use = chan_next;
   291ee:	7001      	strb	r1, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   291f0:	5c9a      	ldrb	r2, [r3, r2]
   291f2:	f004 0407 	and.w	r4, r4, #7
   291f6:	4122      	asrs	r2, r4
   291f8:	f012 0201 	ands.w	r2, r2, #1
   291fc:	d109      	bne.n	29212 <lll_chan_sel_1+0x40>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   291fe:	fbb1 f0f5 	udiv	r0, r1, r5
   29202:	fb05 1010 	mls	r0, r5, r0, r1
   29206:	b2c0      	uxtb	r0, r0
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   29208:	1e5d      	subs	r5, r3, #1
	chan_next = 0U;
   2920a:	4611      	mov	r1, r2
   2920c:	3304      	adds	r3, #4
	while (byte_count--) {
   2920e:	42ab      	cmp	r3, r5
   29210:	d101      	bne.n	29216 <lll_chan_sel_1+0x44>
}
   29212:	4608      	mov	r0, r1
   29214:	bd70      	pop	{r4, r5, r6, pc}
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   29216:	f101 0408 	add.w	r4, r1, #8
   2921a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   2921e:	b2e4      	uxtb	r4, r4
		bite = *chan_map;
   29220:	460a      	mov	r2, r1
		while (bit_count--) {
   29222:	42a2      	cmp	r2, r4
   29224:	4621      	mov	r1, r4
   29226:	d0f2      	beq.n	2920e <lll_chan_sel_1+0x3c>
			if (bite & 0x01) {
   29228:	07f1      	lsls	r1, r6, #31
   2922a:	d502      	bpl.n	29232 <lll_chan_sel_1+0x60>
				if (chan_index == 0U) {
   2922c:	b128      	cbz	r0, 2923a <lll_chan_sel_1+0x68>
					break;
				}
				chan_index--;
   2922e:	3801      	subs	r0, #1
   29230:	b2c0      	uxtb	r0, r0
			}
			chan_next++;
   29232:	3201      	adds	r2, #1
   29234:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   29236:	0876      	lsrs	r6, r6, #1
   29238:	e7f3      	b.n	29222 <lll_chan_sel_1+0x50>
				if (chan_index == 0U) {
   2923a:	4611      	mov	r1, r2
   2923c:	e7e9      	b.n	29212 <lll_chan_sel_1+0x40>

0002923e <ll_wl_size_get>:
}
   2923e:	2008      	movs	r0, #8
   29240:	4770      	bx	lr

00029242 <swi_lll_nrf5_isr>:
	mayfly_run(TICKER_USER_ID_LLL);
   29242:	2000      	movs	r0, #0
   29244:	f7ed ba5e 	b.w	16704 <mayfly_run>

00029248 <isr_race>:
	radio_status_reset();
   29248:	f7f3 bc94 	b.w	1cb74 <radio_status_reset>

0002924c <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   2924c:	4668      	mov	r0, sp
   2924e:	f020 0107 	bic.w	r1, r0, #7
   29252:	468d      	mov	sp, r1
   29254:	b501      	push	{r0, lr}
	isr_radio();
   29256:	f7f3 fb9d 	bl	1c994 <isr_radio>
	ISR_DIRECT_PM();
   2925a:	f7dd f965 	bl	6528 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   2925e:	f7dd fc69 	bl	6b34 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   29262:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29266:	4685      	mov	sp, r0
   29268:	4770      	bx	lr

0002926a <lll_rand_isr_get>:
   2926a:	f7f1 bf63 	b.w	1b134 <lll_csrand_isr_get>

0002926e <lll_reset>:
}
   2926e:	2000      	movs	r0, #0
   29270:	4770      	bx	lr

00029272 <lll_prepare>:
{
   29272:	b513      	push	{r0, r1, r4, lr}
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   29274:	2400      	movs	r4, #0
   29276:	9401      	str	r4, [sp, #4]
   29278:	9c04      	ldr	r4, [sp, #16]
   2927a:	9400      	str	r4, [sp, #0]
   2927c:	f7f1 fe0e 	bl	1ae9c <prepare>
}
   29280:	b002      	add	sp, #8
   29282:	bd10      	pop	{r4, pc}

00029284 <lll_prepare_done>:
}
   29284:	2000      	movs	r0, #0
   29286:	4770      	bx	lr

00029288 <lll_is_abort_cb>:
}
   29288:	f06f 0047 	mvn.w	r0, #71	; 0x47
   2928c:	4770      	bx	lr

0002928e <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   2928e:	e9d0 2300 	ldrd	r2, r3, [r0]
   29292:	2a00      	cmp	r2, #0
   29294:	da04      	bge.n	292a0 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   29296:	6880      	ldr	r0, [r0, #8]
   29298:	4298      	cmp	r0, r3
   2929a:	bf38      	it	cc
   2929c:	4618      	movcc	r0, r3
   2929e:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   292a0:	429a      	cmp	r2, r3
   292a2:	bf38      	it	cc
   292a4:	461a      	movcc	r2, r3
   292a6:	4610      	mov	r0, r2
}
   292a8:	4770      	bx	lr

000292aa <lll_preempt_calc>:
{
   292aa:	b510      	push	{r4, lr}
   292ac:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   292ae:	f7ff fcd7 	bl	28c60 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   292b2:	4621      	mov	r1, r4
   292b4:	f7ff fcd6 	bl	28c64 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   292b8:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   292ba:	0203      	lsls	r3, r0, #8
   292bc:	d404      	bmi.n	292c8 <lll_preempt_calc+0x1e>
   292be:	2809      	cmp	r0, #9
   292c0:	bf94      	ite	ls
   292c2:	2000      	movls	r0, #0
   292c4:	2001      	movhi	r0, #1
}
   292c6:	bd10      	pop	{r4, pc}
	return 0;
   292c8:	2000      	movs	r0, #0
   292ca:	e7fc      	b.n	292c6 <lll_preempt_calc+0x1c>

000292cc <lll_radio_is_idle>:
	return radio_is_idle();
   292cc:	f7f3 bc72 	b.w	1cbb4 <radio_is_idle>

000292d0 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   292d0:	f000 ba3d 	b.w	2974e <radio_rx_ready_delay_get>

000292d4 <lll_isr_tx_status_reset>:
{
   292d4:	b508      	push	{r3, lr}
	radio_status_reset();
   292d6:	f7f3 fc4d 	bl	1cb74 <radio_status_reset>
}
   292da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   292de:	f7f3 bd15 	b.w	1cd0c <radio_tmr_status_reset>

000292e2 <lll_isr_rx_status_reset>:
{
   292e2:	b508      	push	{r3, lr}
	radio_status_reset();
   292e4:	f7f3 fc46 	bl	1cb74 <radio_status_reset>
	radio_tmr_status_reset();
   292e8:	f7f3 fd10 	bl	1cd0c <radio_tmr_status_reset>
}
   292ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   292f0:	f7f3 bcbc 	b.w	1cc6c <radio_rssi_status_reset>

000292f4 <lll_isr_status_reset>:
{
   292f4:	b508      	push	{r3, lr}
	radio_status_reset();
   292f6:	f7f3 fc3d 	bl	1cb74 <radio_status_reset>
	radio_tmr_status_reset();
   292fa:	f7f3 fd07 	bl	1cd0c <radio_tmr_status_reset>
	radio_filter_status_reset();
   292fe:	f7f3 fced 	bl	1ccdc <radio_filter_status_reset>
	radio_ar_status_reset();
   29302:	f7f3 fe19 	bl	1cf38 <radio_ar_status_reset>
}
   29306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   2930a:	f7f3 bcaf 	b.w	1cc6c <radio_rssi_status_reset>

0002930e <lll_isr_abort>:
{
   2930e:	b510      	push	{r4, lr}
   29310:	4604      	mov	r4, r0
	lll_isr_status_reset();
   29312:	f7ff ffef 	bl	292f4 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   29316:	4620      	mov	r0, r4
}
   29318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2931c:	f7f1 bff4 	b.w	1b308 <lll_isr_cleanup>

00029320 <clock_ready>:
   29320:	f101 0010 	add.w	r0, r1, #16
   29324:	f7f8 bdb2 	b.w	21e8c <z_impl_k_sem_give>

00029328 <lll_clock_ppm_local_get>:
}
   29328:	2014      	movs	r0, #20
   2932a:	4770      	bx	lr

0002932c <isr_abort>:
{
   2932c:	b510      	push	{r4, lr}
   2932e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   29330:	f7ff ffe0 	bl	292f4 <lll_isr_status_reset>
	radio_filter_disable();
   29334:	f7f3 fcc8 	bl	1ccc8 <radio_filter_disable>
	lll_isr_cleanup(param);
   29338:	4620      	mov	r0, r4
}
   2933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2933e:	f7f1 bfe3 	b.w	1b308 <lll_isr_cleanup>

00029342 <lll_adv_reset>:
   29342:	f7f2 b931 	b.w	1b5a8 <lll_adv_init>

00029346 <lll_adv_data_reset>:
	pdu->first = 0U;
   29346:	2300      	movs	r3, #0
   29348:	7003      	strb	r3, [r0, #0]
	pdu->last = 0U;
   2934a:	7043      	strb	r3, [r0, #1]
	pdu->pdu[1] = NULL;
   2934c:	6083      	str	r3, [r0, #8]
}
   2934e:	4618      	mov	r0, r3
   29350:	4770      	bx	lr

00029352 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   29352:	68c3      	ldr	r3, [r0, #12]
{
   29354:	b570      	push	{r4, r5, r6, lr}
   29356:	4604      	mov	r4, r0
	evt = HDR_LLL2EVT(p->param);
   29358:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   2935a:	f7ff fc81 	bl	28c60 <ticker_ticks_now_get>
   2935e:	4605      	mov	r5, r0
   29360:	4630      	mov	r0, r6
   29362:	f7ff ff94 	bl	2928e <lll_evt_offset_get>
	p->remainder = 0;
   29366:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   29368:	1a28      	subs	r0, r5, r0
   2936a:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   2936c:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   2936e:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   29370:	4620      	mov	r0, r4
}
   29372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   29376:	f7f2 ba63 	b.w	1b840 <prepare_cb>

0002937a <isr_done>:
{
   2937a:	b510      	push	{r4, lr}
   2937c:	4604      	mov	r4, r0
	lll_isr_status_reset();
   2937e:	f7ff ffb9 	bl	292f4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   29382:	7b23      	ldrb	r3, [r4, #12]
   29384:	f003 0271 	and.w	r2, r3, #113	; 0x71
   29388:	2a01      	cmp	r2, #1
		lll->chan_map_curr = lll->chan_map;
   2938a:	bf02      	ittt	eq
   2938c:	f3c3 0242 	ubfxeq	r2, r3, #1, #3
   29390:	f362 1306 	bfieq	r3, r2, #4, #3
   29394:	7323      	strbeq	r3, [r4, #12]
	if (lll->chan_map_curr) {
   29396:	7b23      	ldrb	r3, [r4, #12]
   29398:	f013 0f70 	tst.w	r3, #112	; 0x70
   2939c:	d008      	beq.n	293b0 <isr_done+0x36>
		pdu = chan_prepare(lll);
   2939e:	4620      	mov	r0, r4
   293a0:	f7f2 f9f4 	bl	1b78c <chan_prepare>
		radio_tx_enable();
   293a4:	f7f3 fbce 	bl	1cb44 <radio_tx_enable>
}
   293a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   293ac:	f7f3 bdaa 	b.w	1cf04 <radio_tmr_end_capture>
	radio_filter_disable();
   293b0:	f7f3 fc8a 	bl	1ccc8 <radio_filter_disable>
	lll_isr_cleanup(param);
   293b4:	4620      	mov	r0, r4
}
   293b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   293ba:	f7f1 bfa5 	b.w	1b308 <lll_isr_cleanup>

000293be <lll_adv_scan_req_check>:
{
   293be:	b510      	push	{r4, lr}
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   293c0:	7b40      	ldrb	r0, [r0, #13]
{
   293c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   293c6:	07c0      	lsls	r0, r0, #31
   293c8:	d500      	bpl.n	293cc <lll_adv_scan_req_check+0xe>
   293ca:	b174      	cbz	r4, 293ea <lll_adv_scan_req_check+0x2c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   293cc:	7808      	ldrb	r0, [r1, #0]
   293ce:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   293d2:	d108      	bne.n	293e6 <lll_adv_scan_req_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   293d4:	2206      	movs	r2, #6
   293d6:	3108      	adds	r1, #8
   293d8:	4618      	mov	r0, r3
   293da:	f7fc fe9a 	bl	26112 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   293de:	fab0 f080 	clz	r0, r0
   293e2:	0940      	lsrs	r0, r0, #5
}
   293e4:	bd10      	pop	{r4, pc}
	return (tx_addr == sr->rx_addr) &&
   293e6:	2000      	movs	r0, #0
   293e8:	e7fc      	b.n	293e4 <lll_adv_scan_req_check+0x26>
	return (((lll->filter_policy & 0x01) == 0U) || devmatch_ok) &&
   293ea:	4620      	mov	r0, r4
   293ec:	e7fa      	b.n	293e4 <lll_adv_scan_req_check+0x26>

000293ee <lll_adv_connect_ind_check>:
{
   293ee:	b538      	push	{r3, r4, r5, lr}
   293f0:	9d05      	ldr	r5, [sp, #20]
   293f2:	460c      	mov	r4, r1
   293f4:	f89d 1018 	ldrb.w	r1, [sp, #24]
	if (tgt_addr) {
   293f8:	b1fd      	cbz	r5, 2943a <lll_adv_connect_ind_check+0x4c>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   293fa:	7821      	ldrb	r1, [r4, #0]
   293fc:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   29400:	d003      	beq.n	2940a <lll_adv_connect_ind_check+0x1c>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   29402:	2000      	movs	r0, #0
   29404:	f000 0001 	and.w	r0, r0, #1
}
   29408:	bd38      	pop	{r3, r4, r5, pc}
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   2940a:	2206      	movs	r2, #6
   2940c:	f104 0108 	add.w	r1, r4, #8
   29410:	4618      	mov	r0, r3
   29412:	f7fc fe7e 	bl	26112 <memcmp>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   29416:	2800      	cmp	r0, #0
   29418:	d1f3      	bne.n	29402 <lll_adv_connect_ind_check+0x14>
	return (rx_addr == ci->tx_addr) &&
   2941a:	7823      	ldrb	r3, [r4, #0]
   2941c:	f89d 2010 	ldrb.w	r2, [sp, #16]
   29420:	f3c3 1380 	ubfx	r3, r3, #6, #1
   29424:	4293      	cmp	r3, r2
   29426:	d1ed      	bne.n	29404 <lll_adv_connect_ind_check+0x16>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   29428:	2206      	movs	r2, #6
   2942a:	1ca1      	adds	r1, r4, #2
   2942c:	4628      	mov	r0, r5
   2942e:	f7fc fe70 	bl	26112 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   29432:	fab0 f080 	clz	r0, r0
   29436:	0940      	lsrs	r0, r0, #5
   29438:	e7e4      	b.n	29404 <lll_adv_connect_ind_check+0x16>
	return (((lll->filter_policy & 0x02) == 0) ||
   2943a:	7b40      	ldrb	r0, [r0, #13]
		(devmatch_ok)) &&
   2943c:	0780      	lsls	r0, r0, #30
   2943e:	d500      	bpl.n	29442 <lll_adv_connect_ind_check+0x54>
	return (((lll->filter_policy & 0x02) == 0) ||
   29440:	b179      	cbz	r1, 29462 <lll_adv_connect_ind_check+0x74>
	return (tx_addr == ci->rx_addr) &&
   29442:	7821      	ldrb	r1, [r4, #0]
   29444:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   29448:	d109      	bne.n	2945e <lll_adv_connect_ind_check+0x70>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   2944a:	2206      	movs	r2, #6
   2944c:	f104 0108 	add.w	r1, r4, #8
   29450:	4618      	mov	r0, r3
   29452:	f7fc fe5e 	bl	26112 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   29456:	fab0 f080 	clz	r0, r0
   2945a:	0940      	lsrs	r0, r0, #5
   2945c:	e7d4      	b.n	29408 <lll_adv_connect_ind_check+0x1a>
   2945e:	2000      	movs	r0, #0
   29460:	e7d2      	b.n	29408 <lll_adv_connect_ind_check+0x1a>
		(devmatch_ok)) &&
   29462:	4608      	mov	r0, r1
   29464:	e7d0      	b.n	29408 <lll_adv_connect_ind_check+0x1a>

00029466 <isr_done_cleanup>:
{
   29466:	b538      	push	{r3, r4, r5, lr}
   29468:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   2946a:	f7f1 ff17 	bl	1b29c <lll_is_done>
   2946e:	4605      	mov	r5, r0
   29470:	b998      	cbnz	r0, 2949a <isr_done_cleanup+0x34>
	radio_filter_disable();
   29472:	f7f3 fc29 	bl	1ccc8 <radio_filter_disable>
	if (++lll->chan == 3U) {
   29476:	7a23      	ldrb	r3, [r4, #8]
   29478:	f3c3 0241 	ubfx	r2, r3, #1, #2
   2947c:	3201      	adds	r2, #1
   2947e:	f002 0203 	and.w	r2, r2, #3
   29482:	2a03      	cmp	r2, #3
   29484:	bf14      	ite	ne
   29486:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   2948a:	f365 0342 	bfieq	r3, r5, #1, #2
   2948e:	7223      	strb	r3, [r4, #8]
	lll_isr_cleanup(param);
   29490:	4620      	mov	r0, r4
}
   29492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   29496:	f7f1 bf37 	b.w	1b308 <lll_isr_cleanup>
}
   2949a:	bd38      	pop	{r3, r4, r5, pc}

0002949c <isr_done>:
{
   2949c:	b508      	push	{r3, lr}
	isr_common_done(param);
   2949e:	f7f2 fc4b 	bl	1bd38 <isr_common_done>
	radio_rx_enable();
   294a2:	f7f3 fb49 	bl	1cb38 <radio_rx_enable>
}
   294a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   294aa:	f7f3 bd2b 	b.w	1cf04 <radio_tmr_end_capture>

000294ae <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   294ae:	68c3      	ldr	r3, [r0, #12]
{
   294b0:	b570      	push	{r4, r5, r6, lr}
   294b2:	4604      	mov	r4, r0
	evt = HDR_LLL2EVT(p->param);
   294b4:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   294b6:	f7ff fbd3 	bl	28c60 <ticker_ticks_now_get>
   294ba:	4605      	mov	r5, r0
   294bc:	4630      	mov	r0, r6
   294be:	f7ff fee6 	bl	2928e <lll_evt_offset_get>
	p->remainder = 0;
   294c2:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   294c4:	1a28      	subs	r0, r5, r0
   294c6:	6020      	str	r0, [r4, #0]
	p->remainder = 0;
   294c8:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   294ca:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   294cc:	4620      	mov	r0, r4
}
   294ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   294d2:	f7f2 bb5d 	b.w	1bb90 <prepare_cb>

000294d6 <isr_window>:
{
   294d6:	b510      	push	{r4, lr}
   294d8:	4604      	mov	r4, r0
	isr_common_done(param);
   294da:	f7f2 fc2d 	bl	1bd38 <isr_common_done>
	if (++lll->chan == 3U) {
   294de:	7a23      	ldrb	r3, [r4, #8]
   294e0:	f3c3 0241 	ubfx	r2, r3, #1, #2
   294e4:	3201      	adds	r2, #1
   294e6:	f002 0203 	and.w	r2, r2, #3
   294ea:	2a03      	cmp	r2, #3
   294ec:	bf14      	ite	ne
   294ee:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   294f2:	f36f 0342 	bfceq	r3, #1, #2
   294f6:	7223      	strb	r3, [r4, #8]
	lll_chan_set(37 + lll->chan);
   294f8:	7a20      	ldrb	r0, [r4, #8]
   294fa:	f3c0 0041 	ubfx	r0, r0, #1, #2
   294fe:	3025      	adds	r0, #37	; 0x25
   29500:	f7f1 fed4 	bl	1b2ac <lll_chan_set>
	ticks_at_start = ticker_ticks_now_get() +
   29504:	f7ff fbac 	bl	28c60 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   29508:	1cc1      	adds	r1, r0, #3
   2950a:	2000      	movs	r0, #0
   2950c:	f7f3 fc8a 	bl	1ce24 <radio_tmr_start_tick>
}
   29510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   29514:	f7f3 bcf6 	b.w	1cf04 <radio_tmr_end_capture>

00029518 <isr_rx_scan_report.isra.5>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   29518:	b570      	push	{r4, r5, r6, lr}
   2951a:	4606      	mov	r6, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   2951c:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   2951e:	460d      	mov	r5, r1
	node_rx = ull_pdu_rx_alloc_peek(3);
   29520:	f7ef fb74 	bl	18c0c <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   29524:	4604      	mov	r4, r0
   29526:	b1b0      	cbz	r0, 29556 <isr_rx_scan_report.isra.5+0x3e>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   29528:	f7ef fb88 	bl	18c3c <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   2952c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29530:	80e3      	strh	r3, [r4, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   29532:	2304      	movs	r3, #4
   29534:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   29536:	b166      	cbz	r6, 29552 <isr_rx_scan_report.isra.5+0x3a>
   29538:	f7f3 fb92 	bl	1cc60 <radio_rssi_get>
   2953c:	b2c0      	uxtb	r0, r0
   2953e:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   29540:	4621      	mov	r1, r4
   29542:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   29544:	7665      	strb	r5, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   29546:	f7ef fb8f 	bl	18c68 <ull_rx_put>
	ull_rx_sched();
   2954a:	f7ef fb9d 	bl	18c88 <ull_rx_sched>

	return 0;
   2954e:	2000      	movs	r0, #0
}
   29550:	bd70      	pop	{r4, r5, r6, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   29552:	207f      	movs	r0, #127	; 0x7f
   29554:	e7f3      	b.n	2953e <isr_rx_scan_report.isra.5+0x26>
		return -ENOBUFS;
   29556:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2955a:	e7f9      	b.n	29550 <isr_rx_scan_report.isra.5+0x38>

0002955c <isr_abort>:
{
   2955c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2955e:	4605      	mov	r5, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   29560:	2400      	movs	r4, #0
	lll_isr_status_reset();
   29562:	f7ff fec7 	bl	292f4 <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   29566:	4623      	mov	r3, r4
   29568:	2203      	movs	r2, #3
   2956a:	4621      	mov	r1, r4
   2956c:	9400      	str	r4, [sp, #0]
   2956e:	4620      	mov	r0, r4
   29570:	f7ed fe4e 	bl	17210 <ticker_stop>
	radio_disable();
   29574:	f7f3 faec 	bl	1cb50 <radio_disable>
	radio_filter_disable();
   29578:	f7f3 fba6 	bl	1ccc8 <radio_filter_disable>
	if (++lll->chan == 3U) {
   2957c:	7a2b      	ldrb	r3, [r5, #8]
   2957e:	f3c3 0241 	ubfx	r2, r3, #1, #2
   29582:	3201      	adds	r2, #1
   29584:	f002 0203 	and.w	r2, r2, #3
   29588:	2a03      	cmp	r2, #3
   2958a:	bf14      	ite	ne
   2958c:	f362 0342 	bfine	r3, r2, #1, #2
		lll->chan = 0U;
   29590:	f364 0342 	bfieq	r3, r4, #1, #2
	lll_isr_cleanup(param);
   29594:	4628      	mov	r0, r5
		lll->chan = 0U;
   29596:	722b      	strb	r3, [r5, #8]
}
   29598:	b003      	add	sp, #12
   2959a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   2959e:	f7f1 beb3 	b.w	1b308 <lll_isr_cleanup>

000295a2 <lll_scan_init>:
}
   295a2:	2000      	movs	r0, #0
   295a4:	4770      	bx	lr

000295a6 <lll_scan_reset>:
   295a6:	2000      	movs	r0, #0
   295a8:	4770      	bx	lr

000295aa <lll_conn_init>:
{
   295aa:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   295ac:	f7f3 fb22 	bl	1cbf4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   295b0:	7803      	ldrb	r3, [r0, #0]
   295b2:	2201      	movs	r2, #1
   295b4:	f362 0301 	bfi	r3, r2, #0, #2
   295b8:	7003      	strb	r3, [r0, #0]
}
   295ba:	2000      	movs	r0, #0
   295bc:	bd08      	pop	{r3, pc}

000295be <lll_conn_reset>:
}
   295be:	2000      	movs	r0, #0
   295c0:	4770      	bx	lr

000295c2 <lll_conn_flush>:
}
   295c2:	4770      	bx	lr

000295c4 <lll_conn_tx_pkt_set>:
{
   295c4:	b510      	push	{r4, lr}
   295c6:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
   295c8:	2100      	movs	r1, #0
   295ca:	4608      	mov	r0, r1
   295cc:	f7f3 fa36 	bl	1ca3c <radio_phy_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   295d0:	2008      	movs	r0, #8
   295d2:	2201      	movs	r2, #1
   295d4:	211b      	movs	r1, #27
   295d6:	f7f3 fa77 	bl	1cac8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   295da:	4620      	mov	r0, r4
}
   295dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_pkt_tx_set(pdu_data_tx);
   295e0:	f7f3 baa4 	b.w	1cb2c <radio_pkt_tx_set>

000295e4 <lll_conn_pdu_tx_prep>:
{
   295e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   295e8:	4606      	mov	r6, r0
   295ea:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   295ec:	aa01      	add	r2, sp, #4
   295ee:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	; 0x40
   295f2:	f7ff f8b6 	bl	28762 <memq_peek>
	if (lll->empty || !link) {
   295f6:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   295fa:	075b      	lsls	r3, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   295fc:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   295fe:	d400      	bmi.n	29602 <lll_conn_pdu_tx_prep+0x1e>
   29600:	b9b8      	cbnz	r0, 29632 <lll_conn_pdu_tx_prep+0x4e>
		lll->empty = 1U;
   29602:	f896 3056 	ldrb.w	r3, [r6, #86]	; 0x56
   29606:	f043 0304 	orr.w	r3, r3, #4
   2960a:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
		p = (void *)radio_pkt_empty_get();
   2960e:	f7f3 faf1 	bl	1cbf4 <radio_pkt_empty_get>
   29612:	4607      	mov	r7, r0
		if (link || FORCE_MD_CNT_GET()) {
   29614:	7803      	ldrb	r3, [r0, #0]
   29616:	f1b9 0f00 	cmp.w	r9, #0
   2961a:	d007      	beq.n	2962c <lll_conn_pdu_tx_prep+0x48>
			p->md = 1U;
   2961c:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   29620:	703b      	strb	r3, [r7, #0]
	*pdu_data_tx = p;
   29622:	f8c8 7000 	str.w	r7, [r8]
}
   29626:	b003      	add	sp, #12
   29628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			p->md = 0U;
   2962c:	f369 1304 	bfi	r3, r9, #4, #1
   29630:	e7f6      	b.n	29620 <lll_conn_pdu_tx_prep+0x3c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   29632:	9d01      	ldr	r5, [sp, #4]
   29634:	f896 4055 	ldrb.w	r4, [r6, #85]	; 0x55
		if (!lll->packet_tx_head_len) {
   29638:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   2963c:	3504      	adds	r5, #4
   2963e:	192f      	adds	r7, r5, r4
		if (!lll->packet_tx_head_len) {
   29640:	b913      	cbnz	r3, 29648 <lll_conn_pdu_tx_prep+0x64>
			lll->packet_tx_head_len = p->len;
   29642:	787b      	ldrb	r3, [r7, #1]
   29644:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
		if (lll->packet_tx_head_offset) {
   29648:	b124      	cbz	r4, 29654 <lll_conn_pdu_tx_prep+0x70>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   2964a:	5d2b      	ldrb	r3, [r5, r4]
   2964c:	2201      	movs	r2, #1
   2964e:	f362 0301 	bfi	r3, r2, #0, #2
   29652:	552b      	strb	r3, [r5, r4]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   29654:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
   29658:	1b1b      	subs	r3, r3, r4
   2965a:	707b      	strb	r3, [r7, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   2965c:	4630      	mov	r0, r6
   2965e:	f7ff fdb6 	bl	291ce <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   29662:	787b      	ldrb	r3, [r7, #1]
   29664:	4283      	cmp	r3, r0
   29666:	d90b      	bls.n	29680 <lll_conn_pdu_tx_prep+0x9c>
			p->len = max_tx_octets;
   29668:	7078      	strb	r0, [r7, #1]
			p->md = 1U;
   2966a:	5d2b      	ldrb	r3, [r5, r4]
			p->md = 1U;
   2966c:	f043 0310 	orr.w	r3, r3, #16
			p->md = 0U;
   29670:	552b      	strb	r3, [r5, r4]
		p->rfu = 0U;
   29672:	5d2b      	ldrb	r3, [r5, r4]
   29674:	f36f 1347 	bfc	r3, #5, #3
   29678:	552b      	strb	r3, [r5, r4]
		p->resv = 0U;
   2967a:	2300      	movs	r3, #0
   2967c:	70bb      	strb	r3, [r7, #2]
   2967e:	e7d0      	b.n	29622 <lll_conn_pdu_tx_prep+0x3e>
		} else if ((link->next != lll->memq_tx.tail) ||
   29680:	6c73      	ldr	r3, [r6, #68]	; 0x44
   29682:	f8d9 2000 	ldr.w	r2, [r9]
   29686:	429a      	cmp	r2, r3
   29688:	5d2b      	ldrb	r3, [r5, r4]
   2968a:	d1ef      	bne.n	2966c <lll_conn_pdu_tx_prep+0x88>
			p->md = 0U;
   2968c:	f36f 1304 	bfc	r3, #4, #1
   29690:	e7ee      	b.n	29670 <lll_conn_pdu_tx_prep+0x8c>

00029692 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   29692:	b530      	push	{r4, r5, lr}
   29694:	b08d      	sub	sp, #52	; 0x34
   29696:	460d      	mov	r5, r1
   29698:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   2969a:	4601      	mov	r1, r0
   2969c:	2210      	movs	r2, #16
   2969e:	4668      	mov	r0, sp
   296a0:	f7fc fd5e 	bl	26160 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   296a4:	2210      	movs	r2, #16
   296a6:	4629      	mov	r1, r5
   296a8:	eb0d 0002 	add.w	r0, sp, r2
   296ac:	f7fc fd58 	bl	26160 <memcpy>

	do_ecb(&ecb);
   296b0:	4668      	mov	r0, sp
   296b2:	f7f3 f8c9 	bl	1c848 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   296b6:	2210      	movs	r2, #16
   296b8:	a908      	add	r1, sp, #32
   296ba:	4620      	mov	r0, r4
   296bc:	f7fc fd50 	bl	26160 <memcpy>
}
   296c0:	b00d      	add	sp, #52	; 0x34
   296c2:	bd30      	pop	{r4, r5, pc}

000296c4 <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   296c4:	b570      	push	{r4, r5, r6, lr}
   296c6:	b08c      	sub	sp, #48	; 0x30
   296c8:	460e      	mov	r6, r1
   296ca:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   296cc:	4601      	mov	r1, r0
   296ce:	2210      	movs	r2, #16
   296d0:	4668      	mov	r0, sp
{
   296d2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   296d4:	f7ff f816 	bl	28704 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   296d8:	2210      	movs	r2, #16
   296da:	eb0d 0002 	add.w	r0, sp, r2
   296de:	4631      	mov	r1, r6
   296e0:	f7ff f810 	bl	28704 <mem_rcopy>

	do_ecb(&ecb);
   296e4:	4668      	mov	r0, sp
   296e6:	f7f3 f8af 	bl	1c848 <do_ecb>

	if (cipher_text_le) {
   296ea:	b125      	cbz	r5, 296f6 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   296ec:	2210      	movs	r2, #16
   296ee:	a908      	add	r1, sp, #32
   296f0:	4628      	mov	r0, r5
   296f2:	f7ff f807 	bl	28704 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   296f6:	b124      	cbz	r4, 29702 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   296f8:	2210      	movs	r2, #16
   296fa:	a908      	add	r1, sp, #32
   296fc:	4620      	mov	r0, r4
   296fe:	f7fc fd2f 	bl	26160 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   29702:	b00c      	add	sp, #48	; 0x30
   29704:	bd70      	pop	{r4, r5, r6, pc}

00029706 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   29706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2970a:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   2970e:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   29710:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   29714:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   29718:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   2971c:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   29720:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   29724:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   29728:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   2972c:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   29730:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   29734:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   29738:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   2973c:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   29740:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   29744:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   29748:	4770      	bx	lr

0002974a <radio_tx_chain_delay_get>:
}
   2974a:	2001      	movs	r0, #1
   2974c:	4770      	bx	lr

0002974e <radio_rx_ready_delay_get>:
}
   2974e:	2029      	movs	r0, #41	; 0x29
   29750:	4770      	bx	lr

00029752 <radio_rx_chain_delay_get>:
	switch (phy) {
   29752:	2802      	cmp	r0, #2
}
   29754:	bf14      	ite	ne
   29756:	200a      	movne	r0, #10
   29758:	2005      	moveq	r0, #5
   2975a:	4770      	bx	lr

0002975c <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2975c:	4288      	cmp	r0, r1
   2975e:	d00c      	beq.n	2977a <mayfly_prio_is_equal+0x1e>
	return (caller_id == callee_id) ||
   29760:	b978      	cbnz	r0, 29782 <mayfly_prio_is_equal+0x26>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   29762:	1e48      	subs	r0, r1, #1
   29764:	2801      	cmp	r0, #1
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   29766:	bf8c      	ite	hi
   29768:	2000      	movhi	r0, #0
   2976a:	2001      	movls	r0, #1
   2976c:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   2976e:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   29772:	bf0c      	ite	eq
   29774:	2001      	moveq	r0, #1
   29776:	2000      	movne	r0, #0
   29778:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   2977a:	2001      	movs	r0, #1
   2977c:	4770      	bx	lr
   2977e:	2000      	movs	r0, #0
}
   29780:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   29782:	2801      	cmp	r0, #1
   29784:	d0f3      	beq.n	2976e <mayfly_prio_is_equal+0x12>
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   29786:	2802      	cmp	r0, #2
   29788:	d1f9      	bne.n	2977e <mayfly_prio_is_equal+0x22>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   2978a:	2901      	cmp	r1, #1
   2978c:	e7eb      	b.n	29766 <mayfly_prio_is_equal+0xa>

0002978e <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
	cntr_cmp_set(0, value);
   2978e:	4601      	mov	r1, r0
   29790:	2000      	movs	r0, #0
   29792:	f7f3 b851 	b.w	1c838 <cntr_cmp_set>

00029796 <sys_put_le32>:
	dst[1] = val >> 8;
   29796:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2979a:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   2979c:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
   2979e:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   297a0:	0a00      	lsrs	r0, r0, #8
   297a2:	704b      	strb	r3, [r1, #1]
   297a4:	70c8      	strb	r0, [r1, #3]
}
   297a6:	4770      	bx	lr

000297a8 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   297a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
   297ac:	b510      	push	{r4, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   297ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   297b2:	3201      	adds	r2, #1
{
   297b4:	4604      	mov	r4, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   297b6:	d106      	bne.n	297c6 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   297b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   297bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   297c0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   297c2:	4293      	cmp	r3, r2
   297c4:	d044      	beq.n	29850 <hci_vendor_read_static_addr+0xa8>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   297c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   297ca:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   297ce:	f010 0001 	ands.w	r0, r0, #1
   297d2:	d036      	beq.n	29842 <hci_vendor_read_static_addr+0x9a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   297d4:	4621      	mov	r1, r4
   297d6:	f8d2 00a4 	ldr.w	r0, [r2, #164]	; 0xa4
   297da:	f7ff ffdc 	bl	29796 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   297de:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   297e2:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   297e4:	f3c3 2307 	ubfx	r3, r3, #8, #8

		/* The FICR value is a just a random number, with no knowledge
		 * of the Bluetooth Specification requirements for random
		 * static addresses.
		 */
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   297e8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   297ec:	7163      	strb	r3, [r4, #5]

		/* If no public address is provided and a static address is
		 * available, then it is recommended to return an identity root
		 * key (if available) from this command.
		 */
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   297ee:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   297f2:	3101      	adds	r1, #1
   297f4:	f104 0306 	add.w	r3, r4, #6
   297f8:	d024      	beq.n	29844 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   297fa:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   297fe:	3101      	adds	r1, #1
   29800:	d020      	beq.n	29844 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   29802:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   29806:	3101      	adds	r1, #1
   29808:	d01c      	beq.n	29844 <hci_vendor_read_static_addr+0x9c>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   2980a:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2980e:	3101      	adds	r1, #1
   29810:	d018      	beq.n	29844 <hci_vendor_read_static_addr+0x9c>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   29812:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
   29816:	4619      	mov	r1, r3
   29818:	f7ff ffbd 	bl	29796 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   2981c:	f104 010a 	add.w	r1, r4, #10
   29820:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
   29824:	f7ff ffb7 	bl	29796 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   29828:	f104 010e 	add.w	r1, r4, #14
   2982c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
   29830:	f7ff ffb1 	bl	29796 <sys_put_le32>
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   29834:	f104 0112 	add.w	r1, r4, #18
   29838:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   2983c:	f7ff ffab 	bl	29796 <sys_put_le32>
		} else {
			/* Mark IR as invalid */
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
		}

		return 1;
   29840:	2001      	movs	r0, #1
	}

	return 0;
}
   29842:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   29844:	2210      	movs	r2, #16
   29846:	2100      	movs	r1, #0
   29848:	4618      	mov	r0, r3
   2984a:	f7fc fcb3 	bl	261b4 <memset>
   2984e:	e7f7      	b.n	29840 <hci_vendor_read_static_addr+0x98>
	return 0;
   29850:	2000      	movs	r0, #0
   29852:	e7f6      	b.n	29842 <hci_vendor_read_static_addr+0x9a>

00029854 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   29854:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   29856:	2210      	movs	r2, #16
{
   29858:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   2985a:	2100      	movs	r1, #0
   2985c:	f7fc fcaa 	bl	261b4 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   29860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   29864:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   29868:	3301      	adds	r3, #1
   2986a:	d023      	beq.n	298b4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   2986c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   29870:	3301      	adds	r3, #1
   29872:	d01f      	beq.n	298b4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   29874:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   29878:	3301      	adds	r3, #1
   2987a:	d01b      	beq.n	298b4 <hci_vendor_read_key_hierarchy_roots+0x60>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   2987c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   29880:	3301      	adds	r3, #1
   29882:	d017      	beq.n	298b4 <hci_vendor_read_key_hierarchy_roots+0x60>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   29884:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   29888:	4621      	mov	r1, r4
   2988a:	f7ff ff84 	bl	29796 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   2988e:	1d21      	adds	r1, r4, #4
   29890:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   29894:	f7ff ff7f 	bl	29796 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   29898:	f104 0108 	add.w	r1, r4, #8
   2989c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
   298a0:	f7ff ff79 	bl	29796 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   298a4:	f104 010c 	add.w	r1, r4, #12
   298a8:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   298ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   298b0:	f7ff bf71 	b.w	29796 <sys_put_le32>
		(void)memset(er, 0x00, 16);
   298b4:	4620      	mov	r0, r4
   298b6:	2210      	movs	r2, #16
   298b8:	2100      	movs	r1, #0
}
   298ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   298be:	f7fc bc79 	b.w	261b4 <memset>

000298c2 <fixed_data_unref>:
}
   298c2:	4770      	bx	lr

000298c4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   298c4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   298c6:	6849      	ldr	r1, [r1, #4]
   298c8:	6809      	ldr	r1, [r1, #0]
   298ca:	f7f3 bc8d 	b.w	1d1e8 <net_buf_alloc_len>

000298ce <net_buf_simple_init_with_data>:
	buf->size  = size;
   298ce:	b292      	uxth	r2, r2
	buf->__buf = data;
   298d0:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   298d2:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   298d4:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   298d6:	8082      	strh	r2, [r0, #4]
}
   298d8:	4770      	bx	lr

000298da <net_buf_simple_push_be16>:
{
   298da:	b510      	push	{r4, lr}
   298dc:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
   298de:	2102      	movs	r1, #2
   298e0:	f7f3 ff02 	bl	1d6e8 <net_buf_simple_push>
	dst[0] = val >> 8;
   298e4:	0a23      	lsrs	r3, r4, #8
   298e6:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   298e8:	7044      	strb	r4, [r0, #1]
}
   298ea:	bd10      	pop	{r4, pc}

000298ec <net_buf_simple_push_u8>:
{
   298ec:	b510      	push	{r4, lr}
   298ee:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   298f0:	2101      	movs	r1, #1
   298f2:	f7f3 fef9 	bl	1d6e8 <net_buf_simple_push>
	*data = val;
   298f6:	7004      	strb	r4, [r0, #0]
}
   298f8:	bd10      	pop	{r4, pc}

000298fa <net_buf_simple_push_be24>:
{
   298fa:	b510      	push	{r4, lr}
   298fc:	460c      	mov	r4, r1
	sys_put_be24(val, net_buf_simple_push(buf, 3));
   298fe:	2103      	movs	r1, #3
   29900:	f7f3 fef2 	bl	1d6e8 <net_buf_simple_push>
	dst[0] = val >> 16;
   29904:	0c23      	lsrs	r3, r4, #16
   29906:	7003      	strb	r3, [r0, #0]
	dst[0] = val >> 8;
   29908:	f3c4 2307 	ubfx	r3, r4, #8, #8
   2990c:	7043      	strb	r3, [r0, #1]
	dst[1] = val;
   2990e:	7084      	strb	r4, [r0, #2]
}
   29910:	bd10      	pop	{r4, pc}

00029912 <net_buf_simple_pull_u8>:
{
   29912:	b510      	push	{r4, lr}
	val = buf->data[0];
   29914:	6803      	ldr	r3, [r0, #0]
   29916:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   29918:	2101      	movs	r1, #1
   2991a:	f7f3 ff03 	bl	1d724 <net_buf_simple_pull>
}
   2991e:	4620      	mov	r0, r4
   29920:	bd10      	pop	{r4, pc}

00029922 <net_buf_simple_pull_le16>:
{
   29922:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   29924:	6803      	ldr	r3, [r0, #0]
   29926:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29928:	2102      	movs	r1, #2
   2992a:	f7f3 fefb 	bl	1d724 <net_buf_simple_pull>
}
   2992e:	4620      	mov	r0, r4
   29930:	bd10      	pop	{r4, pc}

00029932 <net_buf_simple_pull_be16>:
	val = UNALIGNED_GET((uint16_t *)buf->data);
   29932:	6803      	ldr	r3, [r0, #0]
{
   29934:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   29936:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   29938:	2102      	movs	r1, #2
   2993a:	f7f3 fef3 	bl	1d724 <net_buf_simple_pull>
	return sys_be16_to_cpu(val);
   2993e:	0220      	lsls	r0, r4, #8
   29940:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
}
   29944:	b280      	uxth	r0, r0
   29946:	bd10      	pop	{r4, pc}

00029948 <net_buf_simple_pull_le24>:
	val = UNALIGNED_GET((struct uint24 *)buf->data);
   29948:	6803      	ldr	r3, [r0, #0]
{
   2994a:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((struct uint24 *)buf->data);
   2994c:	785a      	ldrb	r2, [r3, #1]
   2994e:	781c      	ldrb	r4, [r3, #0]
   29950:	789b      	ldrb	r3, [r3, #2]
   29952:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
   29956:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	net_buf_simple_pull(buf, sizeof(val));
   2995a:	2103      	movs	r1, #3
   2995c:	f7f3 fee2 	bl	1d724 <net_buf_simple_pull>
}
   29960:	4620      	mov	r0, r4
   29962:	bd10      	pop	{r4, pc}

00029964 <net_buf_simple_pull_le32>:
{
   29964:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint32_t *)buf->data);
   29966:	6803      	ldr	r3, [r0, #0]
   29968:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2996a:	2104      	movs	r1, #4
   2996c:	f7f3 feda 	bl	1d724 <net_buf_simple_pull>
}
   29970:	4620      	mov	r0, r4
   29972:	bd10      	pop	{r4, pc}

00029974 <net_buf_simple_pull_be32>:
{
   29974:	b510      	push	{r4, lr}
   29976:	6803      	ldr	r3, [r0, #0]
   29978:	681c      	ldr	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2997a:	2104      	movs	r1, #4
   2997c:	ba24      	rev	r4, r4
   2997e:	f7f3 fed1 	bl	1d724 <net_buf_simple_pull>
}
   29982:	4620      	mov	r0, r4
   29984:	bd10      	pop	{r4, pc}

00029986 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   29986:	6802      	ldr	r2, [r0, #0]
   29988:	6880      	ldr	r0, [r0, #8]
}
   2998a:	1a10      	subs	r0, r2, r0
   2998c:	4770      	bx	lr

0002998e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2998e:	8883      	ldrh	r3, [r0, #4]
   29990:	88c2      	ldrh	r2, [r0, #6]
   29992:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   29994:	6803      	ldr	r3, [r0, #0]
   29996:	6880      	ldr	r0, [r0, #8]
   29998:	1a18      	subs	r0, r3, r0
}
   2999a:	1a10      	subs	r0, r2, r0
   2999c:	4770      	bx	lr

0002999e <net_buf_simple_add_mem>:
{
   2999e:	b538      	push	{r3, r4, r5, lr}
   299a0:	460d      	mov	r5, r1
   299a2:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   299a4:	4611      	mov	r1, r2
   299a6:	f7f3 fef7 	bl	1d798 <net_buf_simple_add>
   299aa:	4622      	mov	r2, r4
   299ac:	4629      	mov	r1, r5
}
   299ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   299b2:	f7fc bbd5 	b.w	26160 <memcpy>

000299b6 <net_buf_simple_add_u8>:
{
   299b6:	b510      	push	{r4, lr}
   299b8:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   299ba:	2101      	movs	r1, #1
   299bc:	f7f3 feec 	bl	1d798 <net_buf_simple_add>
	*u8 = val;
   299c0:	7004      	strb	r4, [r0, #0]
}
   299c2:	bd10      	pop	{r4, pc}

000299c4 <net_buf_simple_add_le16>:
{
   299c4:	b510      	push	{r4, lr}
   299c6:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   299c8:	2102      	movs	r1, #2
   299ca:	f7f3 fee5 	bl	1d798 <net_buf_simple_add>
	dst[0] = val;
   299ce:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   299d0:	0a24      	lsrs	r4, r4, #8
   299d2:	7044      	strb	r4, [r0, #1]
}
   299d4:	bd10      	pop	{r4, pc}

000299d6 <net_buf_simple_add_be16>:
{
   299d6:	b510      	push	{r4, lr}
   299d8:	460c      	mov	r4, r1
	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
   299da:	2102      	movs	r1, #2
   299dc:	f7f3 fedc 	bl	1d798 <net_buf_simple_add>
	dst[0] = val >> 8;
   299e0:	0a23      	lsrs	r3, r4, #8
   299e2:	7003      	strb	r3, [r0, #0]
	dst[1] = val;
   299e4:	7044      	strb	r4, [r0, #1]
}
   299e6:	bd10      	pop	{r4, pc}

000299e8 <net_buf_simple_add_le24>:
{
   299e8:	b510      	push	{r4, lr}
   299ea:	460c      	mov	r4, r1
	sys_put_le24(val, net_buf_simple_add(buf, 3));
   299ec:	2103      	movs	r1, #3
   299ee:	f7f3 fed3 	bl	1d798 <net_buf_simple_add>
	dst[1] = val >> 8;
   299f2:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   299f6:	7004      	strb	r4, [r0, #0]
	dst[2] = val >> 16;
   299f8:	0c24      	lsrs	r4, r4, #16
	dst[1] = val >> 8;
   299fa:	7043      	strb	r3, [r0, #1]
	dst[2] = val >> 16;
   299fc:	7084      	strb	r4, [r0, #2]
}
   299fe:	bd10      	pop	{r4, pc}

00029a00 <net_buf_simple_add_le32>:
{
   29a00:	b510      	push	{r4, lr}
   29a02:	460c      	mov	r4, r1
	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
   29a04:	2104      	movs	r1, #4
   29a06:	f7f3 fec7 	bl	1d798 <net_buf_simple_add>
	dst[1] = val >> 8;
   29a0a:	f3c4 2307 	ubfx	r3, r4, #8, #8
	dst[0] = val;
   29a0e:	7004      	strb	r4, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   29a10:	0c24      	lsrs	r4, r4, #16
	dst[0] = val;
   29a12:	7084      	strb	r4, [r0, #2]
	dst[1] = val >> 8;
   29a14:	0a24      	lsrs	r4, r4, #8
   29a16:	7043      	strb	r3, [r0, #1]
   29a18:	70c4      	strb	r4, [r0, #3]
}
   29a1a:	bd10      	pop	{r4, pc}

00029a1c <net_buf_simple_add_be32>:
{
   29a1c:	b510      	push	{r4, lr}
   29a1e:	460c      	mov	r4, r1
	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
   29a20:	2104      	movs	r1, #4
   29a22:	f7f3 feb9 	bl	1d798 <net_buf_simple_add>
	sys_put_be16(val >> 16, dst);
   29a26:	0c23      	lsrs	r3, r4, #16
	dst[0] = val >> 8;
   29a28:	0a1a      	lsrs	r2, r3, #8
	dst[1] = val;
   29a2a:	7043      	strb	r3, [r0, #1]
	dst[0] = val >> 8;
   29a2c:	f3c4 2307 	ubfx	r3, r4, #8, #8
   29a30:	7002      	strb	r2, [r0, #0]
   29a32:	7083      	strb	r3, [r0, #2]
	dst[1] = val;
   29a34:	70c4      	strb	r4, [r0, #3]
}
   29a36:	bd10      	pop	{r4, pc}

00029a38 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29a38:	6843      	ldr	r3, [r0, #4]
   29a3a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   29a3c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   29a40:	600b      	str	r3, [r1, #0]
}
   29a42:	2000      	movs	r0, #0
   29a44:	4770      	bx	lr

00029a46 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29a46:	6843      	ldr	r3, [r0, #4]
   29a48:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   29a4a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   29a4e:	4042      	eors	r2, r0
   29a50:	400a      	ands	r2, r1
   29a52:	4042      	eors	r2, r0
    p_reg->OUT = value;
   29a54:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   29a58:	2000      	movs	r0, #0
   29a5a:	4770      	bx	lr

00029a5c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29a5c:	6843      	ldr	r3, [r0, #4]
   29a5e:	685b      	ldr	r3, [r3, #4]
}
   29a60:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   29a62:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   29a66:	4770      	bx	lr

00029a68 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29a68:	6843      	ldr	r3, [r0, #4]
   29a6a:	685b      	ldr	r3, [r3, #4]
}
   29a6c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   29a6e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   29a72:	4770      	bx	lr

00029a74 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29a74:	6843      	ldr	r3, [r0, #4]
   29a76:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   29a78:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   29a7c:	4059      	eors	r1, r3
    p_reg->OUT = value;
   29a7e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   29a82:	2000      	movs	r0, #0
   29a84:	4770      	bx	lr

00029a86 <nrf_gpio_cfg_sense_set>:
{
   29a86:	b513      	push	{r0, r1, r4, lr}
   29a88:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29a8a:	a801      	add	r0, sp, #4
{
   29a8c:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29a8e:	f7f3 ff0f 	bl	1d8b0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   29a92:	9a01      	ldr	r2, [sp, #4]
   29a94:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   29a98:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   29a9c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   29aa0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   29aa4:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   29aa8:	b002      	add	sp, #8
   29aaa:	bd10      	pop	{r4, pc}

00029aac <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   29aac:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   29aae:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   29ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   29ab6:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   29ab8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   29abc:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   29abe:	430a      	orrs	r2, r1
   29ac0:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   29ac4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   29ac8:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   29acc:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   29ace:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   29ad2:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   29ad4:	2700      	movs	r7, #0
	while (level_pins) {
   29ad6:	b914      	cbnz	r4, 29ade <check_level_trigger_pins+0x32>
}
   29ad8:	4628      	mov	r0, r5
   29ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   29ade:	4234      	tst	r4, r6
   29ae0:	d00a      	beq.n	29af8 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   29ae2:	f898 3008 	ldrb.w	r3, [r8, #8]
   29ae6:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   29aea:	2100      	movs	r1, #0
   29aec:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   29af0:	f7ff ffc9 	bl	29a86 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   29af4:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   29af8:	3701      	adds	r7, #1
		bit <<= 1;
   29afa:	0076      	lsls	r6, r6, #1
   29afc:	e7eb      	b.n	29ad6 <check_level_trigger_pins+0x2a>

00029afe <cfg_level_pins>:
{
   29afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   29b02:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   29b04:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   29b08:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   29b0a:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   29b0e:	4313      	orrs	r3, r2
   29b10:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   29b14:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   29b16:	2500      	movs	r5, #0
	while (level_pins) {
   29b18:	b90c      	cbnz	r4, 29b1e <cfg_level_pins+0x20>
}
   29b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   29b1e:	4226      	tst	r6, r4
   29b20:	d010      	beq.n	29b44 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   29b22:	693b      	ldr	r3, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   29b24:	f898 2008 	ldrb.w	r2, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   29b28:	40eb      	lsrs	r3, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
   29b2a:	f013 0f01 	tst.w	r3, #1
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   29b2e:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   29b32:	bf0c      	ite	eq
   29b34:	2103      	moveq	r1, #3
   29b36:	2102      	movne	r1, #2
   29b38:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
   29b3c:	f7ff ffa3 	bl	29a86 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   29b40:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   29b44:	3501      	adds	r5, #1
		bit <<= 1;
   29b46:	0076      	lsls	r6, r6, #1
   29b48:	e7e6      	b.n	29b18 <cfg_level_pins+0x1a>

00029b4a <flash_nrf_write_protection>:
}
   29b4a:	2000      	movs	r0, #0
   29b4c:	4770      	bx	lr

00029b4e <is_regular_addr_valid>:
{
   29b4e:	b538      	push	{r3, r4, r5, lr}
   29b50:	4604      	mov	r4, r0
   29b52:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   29b54:	f000 fa6a 	bl	2a02c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   29b58:	4284      	cmp	r4, r0
   29b5a:	d209      	bcs.n	29b70 <is_regular_addr_valid+0x22>
   29b5c:	2c00      	cmp	r4, #0
   29b5e:	db07      	blt.n	29b70 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   29b60:	42a8      	cmp	r0, r5
   29b62:	d305      	bcc.n	29b70 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   29b64:	442c      	add	r4, r5
	    len > flash_size ||
   29b66:	4284      	cmp	r4, r0
   29b68:	bf8c      	ite	hi
   29b6a:	2000      	movhi	r0, #0
   29b6c:	2001      	movls	r0, #1
}
   29b6e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   29b70:	2000      	movs	r0, #0
   29b72:	e7fc      	b.n	29b6e <is_regular_addr_valid+0x20>

00029b74 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   29b74:	2000      	movs	r0, #0
   29b76:	f7ed ba97 	b.w	170a8 <ticker_is_initialized>

00029b7a <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   29b7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29b7e:	461d      	mov	r5, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   29b80:	6883      	ldr	r3, [r0, #8]
{
   29b82:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   29b84:	695b      	ldr	r3, [r3, #20]
   29b86:	4669      	mov	r1, sp
{
   29b88:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   29b8a:	aa01      	add	r2, sp, #4
   29b8c:	4798      	blx	r3

	while (layout_size--) {
   29b8e:	e9dd 1200 	ldrd	r1, r2, [sp]
   29b92:	2300      	movs	r3, #0
   29b94:	3a01      	subs	r2, #1
	off_t end = 0;
   29b96:	4618      	mov	r0, r3
	off_t group_offs = 0;
   29b98:	469e      	mov	lr, r3
	size_t page_count = 0;
   29b9a:	469c      	mov	ip, r3
	while (layout_size--) {
   29b9c:	1c57      	adds	r7, r2, #1
   29b9e:	d102      	bne.n	29ba6 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   29ba0:	f06f 0015 	mvn.w	r0, #21
   29ba4:	e01a      	b.n	29bdc <flash_get_page_info+0x62>
		if (use_addr) {
   29ba6:	f8d1 8000 	ldr.w	r8, [r1]
   29baa:	b1d6      	cbz	r6, 29be2 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   29bac:	684f      	ldr	r7, [r1, #4]
   29bae:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   29bb2:	42a0      	cmp	r0, r4
   29bb4:	f102 37ff 	add.w	r7, r2, #4294967295
   29bb8:	dd18      	ble.n	29bec <flash_get_page_info+0x72>
   29bba:	9201      	str	r2, [sp, #4]
   29bbc:	b103      	cbz	r3, 29bc0 <flash_get_page_info+0x46>
   29bbe:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   29bc0:	9b00      	ldr	r3, [sp, #0]
   29bc2:	685b      	ldr	r3, [r3, #4]
   29bc4:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   29bc6:	b176      	cbz	r6, 29be6 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   29bc8:	eba4 040e 	sub.w	r4, r4, lr
   29bcc:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   29bd0:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   29bd4:	4464      	add	r4, ip
			info->start_offset = group_offs +
   29bd6:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   29bd8:	60ac      	str	r4, [r5, #8]
			return 0;
   29bda:	2000      	movs	r0, #0
}
   29bdc:	b002      	add	sp, #8
   29bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   29be2:	4440      	add	r0, r8
   29be4:	e7e5      	b.n	29bb2 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   29be6:	eba4 040c 	sub.w	r4, r4, ip
   29bea:	e7f1      	b.n	29bd0 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   29bec:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   29bee:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   29bf0:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   29bf4:	3108      	adds	r1, #8
   29bf6:	2301      	movs	r3, #1
   29bf8:	463a      	mov	r2, r7
   29bfa:	e7cf      	b.n	29b9c <flash_get_page_info+0x22>

00029bfc <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   29bfc:	4613      	mov	r3, r2
   29bfe:	2201      	movs	r2, #1
   29c00:	f7ff bfbb 	b.w	29b7a <flash_get_page_info>

00029c04 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   29c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   29c08:	6883      	ldr	r3, [r0, #8]
{
   29c0a:	b086      	sub	sp, #24
   29c0c:	4689      	mov	r9, r1
   29c0e:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   29c10:	695b      	ldr	r3, [r3, #20]
   29c12:	aa02      	add	r2, sp, #8
   29c14:	a901      	add	r1, sp, #4
   29c16:	4798      	blx	r3
	off_t off = 0;
   29c18:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   29c1a:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   29c1c:	4625      	mov	r5, r4
   29c1e:	9b02      	ldr	r3, [sp, #8]
   29c20:	42ab      	cmp	r3, r5
   29c22:	d802      	bhi.n	29c2a <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   29c24:	b006      	add	sp, #24
   29c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   29c2a:	9f01      	ldr	r7, [sp, #4]
   29c2c:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   29c30:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   29c32:	687b      	ldr	r3, [r7, #4]
   29c34:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   29c36:	683a      	ldr	r2, [r7, #0]
   29c38:	42b2      	cmp	r2, r6
   29c3a:	eb08 0306 	add.w	r3, r8, r6
   29c3e:	d802      	bhi.n	29c46 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   29c40:	3501      	adds	r5, #1
   29c42:	4698      	mov	r8, r3
   29c44:	e7eb      	b.n	29c1e <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   29c46:	4651      	mov	r1, sl
   29c48:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   29c4a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   29c4c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   29c4e:	47c8      	blx	r9
   29c50:	2800      	cmp	r0, #0
   29c52:	d0e7      	beq.n	29c24 <flash_page_foreach+0x20>
			off += page_info.size;
   29c54:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   29c56:	3601      	adds	r6, #1
			off += page_info.size;
   29c58:	441c      	add	r4, r3
			page++;
   29c5a:	e7ec      	b.n	29c36 <flash_page_foreach+0x32>

00029c5c <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   29c5c:	2000      	movs	r0, #0
   29c5e:	4770      	bx	lr

00029c60 <model_send>:
	return encoded_delay * DELAY_TIME_STEP_MS;
}

int model_send(struct bt_mesh_model *mod, struct bt_mesh_msg_ctx *ctx,
	       struct net_buf_simple *buf)
{
   29c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29c62:	4613      	mov	r3, r2
   29c64:	4604      	mov	r4, r0
	if (!ctx && !mod->pub) {
   29c66:	b921      	cbnz	r1, 29c72 <model_send+0x12>
   29c68:	6882      	ldr	r2, [r0, #8]
   29c6a:	b942      	cbnz	r2, 29c7e <model_send+0x1e>
		return -ENOTSUP;
   29c6c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   29c70:	e003      	b.n	29c7a <model_send+0x1a>
	}

	if (ctx) {
		return bt_mesh_model_send(mod, ctx, buf, NULL, 0);
   29c72:	2300      	movs	r3, #0
   29c74:	9300      	str	r3, [sp, #0]
   29c76:	f7fe fa65 	bl	28144 <bt_mesh_model_send>

	net_buf_simple_reset(mod->pub->msg);
	net_buf_simple_add_mem(mod->pub->msg, buf->data, buf->len);

	return bt_mesh_model_publish(mod);
}
   29c7a:	b003      	add	sp, #12
   29c7c:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reset(mod->pub->msg);
   29c7e:	6910      	ldr	r0, [r2, #16]
	buf->data = buf->__buf;
   29c80:	6882      	ldr	r2, [r0, #8]
	buf->len  = 0U;
   29c82:	8081      	strh	r1, [r0, #4]
	buf->data = buf->__buf;
   29c84:	6002      	str	r2, [r0, #0]
	net_buf_simple_add_mem(mod->pub->msg, buf->data, buf->len);
   29c86:	6819      	ldr	r1, [r3, #0]
   29c88:	889a      	ldrh	r2, [r3, #4]
   29c8a:	f7ff fe88 	bl	2999e <net_buf_simple_add_mem>
	return bt_mesh_model_publish(mod);
   29c8e:	4620      	mov	r0, r4
}
   29c90:	b003      	add	sp, #12
   29c92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return bt_mesh_model_publish(mod);
   29c96:	f7e7 bbbf 	b.w	11418 <bt_mesh_model_publish>

00029c9a <sensor_get>:
	SENSOR_FOR_EACH(&srv->sensors, sensor)
   29c9a:	6840      	ldr	r0, [r0, #4]
   29c9c:	b108      	cbz	r0, 29ca2 <sensor_get+0x8>
   29c9e:	3848      	subs	r0, #72	; 0x48
   29ca0:	b900      	cbnz	r0, 29ca4 <sensor_get+0xa>
}
   29ca2:	4770      	bx	lr
		if (sensor->type->id == id) {
   29ca4:	6803      	ldr	r3, [r0, #0]
   29ca6:	881b      	ldrh	r3, [r3, #0]
   29ca8:	428b      	cmp	r3, r1
   29caa:	d0fa      	beq.n	29ca2 <sensor_get+0x8>
   29cac:	6c80      	ldr	r0, [r0, #72]	; 0x48
   29cae:	e7f5      	b.n	29c9c <sensor_get+0x2>

00029cb0 <handle_settings_get>:
{
   29cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   29cb4:	6985      	ldr	r5, [r0, #24]
{
   29cb6:	b08c      	sub	sp, #48	; 0x30
   29cb8:	4606      	mov	r6, r0
	uint16_t id = net_buf_simple_pull_le16(buf);
   29cba:	4610      	mov	r0, r2
{
   29cbc:	460f      	mov	r7, r1
	uint16_t id = net_buf_simple_pull_le16(buf);
   29cbe:	f7ff fe30 	bl	29922 <net_buf_simple_pull_le16>
	if (id == BT_MESH_PROP_ID_PROHIBITED) {
   29cc2:	4604      	mov	r4, r0
   29cc4:	b1d0      	cbz	r0, 29cfc <handle_settings_get+0x4c>
	BT_MESH_MODEL_BUF_DEFINE(
   29cc6:	ab06      	add	r3, sp, #24
   29cc8:	f44f 12b8 	mov.w	r2, #1507328	; 0x170000
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTINGS_STATUS);
   29ccc:	2158      	movs	r1, #88	; 0x58
   29cce:	a803      	add	r0, sp, #12
	BT_MESH_MODEL_BUF_DEFINE(
   29cd0:	9303      	str	r3, [sp, #12]
   29cd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	bt_mesh_model_msg_init(&rsp, BT_MESH_SENSOR_OP_SETTINGS_STATUS);
   29cd6:	f7fe fa0c 	bl	280f2 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&rsp, id);
   29cda:	4621      	mov	r1, r4
   29cdc:	a803      	add	r0, sp, #12
   29cde:	f7ff fe71 	bl	299c4 <net_buf_simple_add_le16>
	struct bt_mesh_sensor *sensor = sensor_get(srv, id);
   29ce2:	4628      	mov	r0, r5
   29ce4:	4621      	mov	r1, r4
   29ce6:	f7ff ffd8 	bl	29c9a <sensor_get>
	if (!sensor) {
   29cea:	4605      	mov	r5, r0
   29cec:	b9c8      	cbnz	r0, 29d22 <handle_settings_get+0x72>
	bt_mesh_model_send(mod, ctx, &rsp, NULL, NULL);
   29cee:	2300      	movs	r3, #0
   29cf0:	9300      	str	r3, [sp, #0]
   29cf2:	aa03      	add	r2, sp, #12
   29cf4:	4639      	mov	r1, r7
   29cf6:	4630      	mov	r0, r6
   29cf8:	f7fe fa24 	bl	28144 <bt_mesh_model_send>
}
   29cfc:	b00c      	add	sp, #48	; 0x30
   29cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					sensor->settings.list[i].type->id);
   29d02:	68aa      	ldr	r2, [r5, #8]
   29d04:	fb08 f304 	mul.w	r3, r8, r4
		net_buf_simple_add_le16(&rsp,
   29d08:	a803      	add	r0, sp, #12
   29d0a:	58d3      	ldr	r3, [r2, r3]
   29d0c:	8819      	ldrh	r1, [r3, #0]
   29d0e:	f7ff fe59 	bl	299c4 <net_buf_simple_add_le16>
	     ++i) {
   29d12:	3401      	adds	r4, #1
	for (uint32_t i = 0; i < MIN(CONFIG_BT_MESH_SENSOR_SRV_SETTINGS_MAX,
   29d14:	68eb      	ldr	r3, [r5, #12]
   29d16:	2b08      	cmp	r3, #8
   29d18:	bf28      	it	cs
   29d1a:	2308      	movcs	r3, #8
   29d1c:	429c      	cmp	r4, r3
   29d1e:	d3f0      	bcc.n	29d02 <handle_settings_get+0x52>
   29d20:	e7e5      	b.n	29cee <handle_settings_get+0x3e>
   29d22:	2400      	movs	r4, #0
					sensor->settings.list[i].type->id);
   29d24:	f04f 080c 	mov.w	r8, #12
   29d28:	e7f4      	b.n	29d14 <handle_settings_get+0x64>

00029d2a <handle_setting_set_unack>:
	setting_set(mod, ctx, buf, false);
   29d2a:	2300      	movs	r3, #0
   29d2c:	f7f4 bea0 	b.w	1ea70 <setting_set>

00029d30 <handle_setting_set>:
	setting_set(mod, ctx, buf, true);
   29d30:	2301      	movs	r3, #1
   29d32:	f7f4 be9d 	b.w	1ea70 <setting_set>

00029d36 <handle_cadence_set_unack>:
	cadence_set(mod, ctx, buf, false);
   29d36:	2300      	movs	r3, #0
   29d38:	f7f4 bf5c 	b.w	1ebf4 <cadence_set>

00029d3c <handle_cadence_set>:
	cadence_set(mod, ctx, buf, true);
   29d3c:	2301      	movs	r3, #1
   29d3e:	f7f4 bf59 	b.w	1ebf4 <cadence_set>

00029d42 <update_handler>:
{
   29d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_mesh_sensor_srv *srv = mod->user_data;
   29d46:	6985      	ldr	r5, [r0, #24]
{
   29d48:	4604      	mov	r4, r0
   29d4a:	b08b      	sub	sp, #44	; 0x2c
	bt_mesh_model_msg_init(srv->pub.msg, BT_MESH_SENSOR_OP_STATUS);
   29d4c:	2152      	movs	r1, #82	; 0x52
   29d4e:	6a28      	ldr	r0, [r5, #32]
   29d50:	f7fe f9cf 	bl	280f2 <bt_mesh_model_msg_init>
	uint32_t original_len = srv->pub.msg->len;
   29d54:	6a2b      	ldr	r3, [r5, #32]
   29d56:	f8b3 a004 	ldrh.w	sl, [r3, #4]
	uint8_t period_div = srv->pub.period_div;
   29d5a:	7eeb      	ldrb	r3, [r5, #27]
   29d5c:	f003 080f 	and.w	r8, r3, #15
	srv->pub.period_div = 0;
   29d60:	f023 031f 	bic.w	r3, r3, #31
	uint32_t base_period = bt_mesh_model_pub_period_get(mod);
   29d64:	4620      	mov	r0, r4
	srv->pub.period_div = 0;
   29d66:	76eb      	strb	r3, [r5, #27]
	uint32_t base_period = bt_mesh_model_pub_period_get(mod);
   29d68:	f7e7 f882 	bl	10e70 <bt_mesh_model_pub_period_get>
	SENSOR_FOR_EACH(&srv->sensors, s)
   29d6c:	686c      	ldr	r4, [r5, #4]
   29d6e:	b14c      	cbz	r4, 29d84 <update_handler+0x42>
	uint32_t pub_int = (base_period >> period_div);
   29d70:	fa20 f708 	lsr.w	r7, r0, r8
	SENSOR_FOR_EACH(&srv->sensors, s)
   29d74:	3c48      	subs	r4, #72	; 0x48
   29d76:	f107 3bff 	add.w	fp, r7, #4294967295
	uint32_t min_int = (1 << sensor->state.min_int);
   29d7a:	f04f 0901 	mov.w	r9, #1
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   29d7e:	466e      	mov	r6, sp
   29d80:	89ab      	ldrh	r3, [r5, #12]
	SENSOR_FOR_EACH(&srv->sensors, s)
   29d82:	b964      	cbnz	r4, 29d9e <update_handler+0x5c>
	srv->seq++;
   29d84:	89ab      	ldrh	r3, [r5, #12]
   29d86:	3301      	adds	r3, #1
   29d88:	81ab      	strh	r3, [r5, #12]
	return (srv->pub.msg->len > original_len) ? 0 : -ENOENT;
   29d8a:	6a2b      	ldr	r3, [r5, #32]
   29d8c:	889b      	ldrh	r3, [r3, #4]
   29d8e:	4553      	cmp	r3, sl
   29d90:	bf8c      	ite	hi
   29d92:	2000      	movhi	r0, #0
   29d94:	f06f 0001 	mvnls.w	r0, #1
}
   29d98:	b00b      	add	sp, #44	; 0x2c
   29d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (srv->seq - s->state.seq < min_int) {
   29d9e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   29da2:	1a9a      	subs	r2, r3, r2
	uint32_t min_int = (1 << sensor->state.min_int);
   29da4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
   29da8:	fa09 f303 	lsl.w	r3, r9, r3
	return ceiling_fraction(min_int, pub_int);
   29dac:	445b      	add	r3, fp
   29dae:	fbb3 f3f7 	udiv	r3, r3, r7
	if (srv->seq - s->state.seq < min_int) {
   29db2:	b29b      	uxth	r3, r3
   29db4:	429a      	cmp	r2, r3
   29db6:	db33      	blt.n	29e20 <update_handler+0xde>
	struct sensor_value value[CONFIG_BT_MESH_SENSOR_CHANNELS_MAX] = {};
   29db8:	2228      	movs	r2, #40	; 0x28
   29dba:	2100      	movs	r1, #0
   29dbc:	4630      	mov	r0, r6
   29dbe:	f7fc f9f9 	bl	261b4 <memset>
	err = value_get(s, NULL, value);
   29dc2:	4632      	mov	r2, r6
   29dc4:	2100      	movs	r1, #0
   29dc6:	4620      	mov	r0, r4
   29dc8:	f7f4 fd74 	bl	1e8b4 <value_get>
	if (err) {
   29dcc:	bb40      	cbnz	r0, 29e20 <update_handler+0xde>
	bool delta_triggered = bt_mesh_sensor_delta_threshold(s, value);
   29dce:	4631      	mov	r1, r6
   29dd0:	4620      	mov	r0, r4
   29dd2:	f7d9 fb6d 	bl	34b0 <bt_mesh_sensor_delta_threshold>
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   29dd6:	b9a0      	cbnz	r0, 29e02 <update_handler+0xc0>
   29dd8:	f8b4 3054 	ldrh.w	r3, [r4, #84]	; 0x54
	uint8_t div = (sensor->state.pub_div * sensor->state.fast_pub);
   29ddc:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   29de0:	89aa      	ldrh	r2, [r5, #12]
   29de2:	1ad2      	subs	r2, r2, r3
	uint8_t div = (sensor->state.pub_div * sensor->state.fast_pub);
   29de4:	f3c1 0303 	ubfx	r3, r1, #0, #4
   29de8:	f3c1 1100 	ubfx	r1, r1, #4, #1
   29dec:	fb13 f301 	smulbb	r3, r3, r1
	return (1U << MAX(0, period_div - div));
   29df0:	b2db      	uxtb	r3, r3
   29df2:	eba8 0303 	sub.w	r3, r8, r3
   29df6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   29dfa:	fa09 f303 	lsl.w	r3, r9, r3
	if (!delta_triggered && srv->seq - s->state.seq < interval) {
   29dfe:	429a      	cmp	r2, r3
   29e00:	db0e      	blt.n	29e20 <update_handler+0xde>
	err = sensor_status_encode(srv->pub.msg, s, value);
   29e02:	4632      	mov	r2, r6
   29e04:	4621      	mov	r1, r4
   29e06:	6a28      	ldr	r0, [r5, #32]
   29e08:	f000 f8c2 	bl	29f90 <sensor_status_encode>
	if (err) {
   29e0c:	b940      	cbnz	r0, 29e20 <update_handler+0xde>
	s->state.prev = value[0];
   29e0e:	e896 0003 	ldmia.w	r6, {r0, r1}
   29e12:	f104 034c 	add.w	r3, r4, #76	; 0x4c
   29e16:	e883 0003 	stmia.w	r3, {r0, r1}
	s->state.seq = srv->seq;
   29e1a:	89ab      	ldrh	r3, [r5, #12]
   29e1c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
		if (s->state.fast_pub) {
   29e20:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
   29e24:	06d3      	lsls	r3, r2, #27
   29e26:	d50c      	bpl.n	29e42 <update_handler+0x100>
			srv->pub.fast_period = true;
   29e28:	7eeb      	ldrb	r3, [r5, #27]
				MAX(srv->pub.period_div, s->state.pub_div);
   29e2a:	f043 0310 	orr.w	r3, r3, #16
   29e2e:	f002 020f 	and.w	r2, r2, #15
   29e32:	f003 010f 	and.w	r1, r3, #15
   29e36:	428a      	cmp	r2, r1
   29e38:	bf38      	it	cc
   29e3a:	460a      	movcc	r2, r1
			srv->pub.period_div =
   29e3c:	f362 0303 	bfi	r3, r2, #0, #4
   29e40:	76eb      	strb	r3, [r5, #27]
   29e42:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	SENSOR_FOR_EACH(&srv->sensors, s)
   29e44:	2c00      	cmp	r4, #0
   29e46:	d09d      	beq.n	29d84 <update_handler+0x42>
   29e48:	3c48      	subs	r4, #72	; 0x48
   29e4a:	e799      	b.n	29d80 <update_handler+0x3e>

00029e4c <scalar_max>:
	const struct scalar_repr *repr = format->user_data;
   29e4c:	6883      	ldr	r3, [r0, #8]
	if (repr->flags & HAS_MAX) {
   29e4e:	781a      	ldrb	r2, [r3, #0]
{
   29e50:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (repr->flags & HAS_MAX) {
   29e52:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   29e56:	d002      	beq.n	29e5e <scalar_max+0x12>
		return repr->max;
   29e58:	6858      	ldr	r0, [r3, #4]
   29e5a:	2100      	movs	r1, #0
}
   29e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (repr->flags & SIGNED) {
   29e5e:	68c3      	ldr	r3, [r0, #12]
   29e60:	f012 0702 	ands.w	r7, r2, #2
   29e64:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   29e68:	f04f 0401 	mov.w	r4, #1
   29e6c:	d00d      	beq.n	29e8a <scalar_max+0x3e>
		return BIT64(8 * format->size - 1) - 1;
   29e6e:	1e5d      	subs	r5, r3, #1
   29e70:	f1c5 0220 	rsb	r2, r5, #32
   29e74:	3b21      	subs	r3, #33	; 0x21
   29e76:	fa04 f103 	lsl.w	r1, r4, r3
   29e7a:	fa24 f202 	lsr.w	r2, r4, r2
   29e7e:	4311      	orrs	r1, r2
   29e80:	fa04 f005 	lsl.w	r0, r4, r5
	int64_t max_value = BIT64(8 * format->size) - 1;
   29e84:	f110 30ff 	adds.w	r0, r0, #4294967295
   29e88:	e00f      	b.n	29eaa <scalar_max+0x5e>
   29e8a:	f1a3 0620 	sub.w	r6, r3, #32
   29e8e:	f1c3 0520 	rsb	r5, r3, #32
   29e92:	fa04 f106 	lsl.w	r1, r4, r6
   29e96:	fa24 f505 	lsr.w	r5, r4, r5
	if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   29e9a:	f012 0f30 	tst.w	r2, #48	; 0x30
	int64_t max_value = BIT64(8 * format->size) - 1;
   29e9e:	ea41 0105 	orr.w	r1, r1, r5
   29ea2:	fa04 f003 	lsl.w	r0, r4, r3
	if (repr->flags & (HAS_HIGHER_THAN | HAS_INVALID)) {
   29ea6:	d003      	beq.n	29eb0 <scalar_max+0x64>
		max_value -= 2;
   29ea8:	3803      	subs	r0, #3
		max_value -= 1;
   29eaa:	f141 31ff 	adc.w	r1, r1, #4294967295
   29eae:	e7d5      	b.n	29e5c <scalar_max+0x10>
	} else if (repr->flags & HAS_UNDEFINED) {
   29eb0:	0713      	lsls	r3, r2, #28
   29eb2:	d5e7      	bpl.n	29e84 <scalar_max+0x38>
		max_value -= 1;
   29eb4:	3802      	subs	r0, #2
   29eb6:	e7f8      	b.n	29eaa <scalar_max+0x5e>

00029eb8 <sensor_status_id_encode>:
{
   29eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((len > 0 && len <= 16) && id < 2048) {
   29ebc:	f101 38ff 	add.w	r8, r1, #4294967295
   29ec0:	fa5f f688 	uxtb.w	r6, r8
   29ec4:	2e0f      	cmp	r6, #15
{
   29ec6:	4607      	mov	r7, r0
   29ec8:	460d      	mov	r5, r1
   29eca:	4614      	mov	r4, r2
	if ((len > 0 && len <= 16) && id < 2048) {
   29ecc:	d814      	bhi.n	29ef8 <sensor_status_id_encode+0x40>
   29ece:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   29ed2:	d211      	bcs.n	29ef8 <sensor_status_id_encode+0x40>
		if (net_buf_simple_tailroom(buf) < 2 + len) {
   29ed4:	f7ff fd5b 	bl	2998e <net_buf_simple_tailroom>
   29ed8:	3502      	adds	r5, #2
   29eda:	42a8      	cmp	r0, r5
   29edc:	d203      	bcs.n	29ee6 <sensor_status_id_encode+0x2e>
			return -ENOMEM;
   29ede:	f06f 000b 	mvn.w	r0, #11
}
   29ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_simple_add_le16(buf, ((len - 1) << 1) | (id << 5));
   29ee6:	0161      	lsls	r1, r4, #5
   29ee8:	ea41 0148 	orr.w	r1, r1, r8, lsl #1
   29eec:	b289      	uxth	r1, r1
		net_buf_simple_add_le16(buf, id);
   29eee:	4638      	mov	r0, r7
   29ef0:	f7ff fd68 	bl	299c4 <net_buf_simple_add_le16>
	return 0;
   29ef4:	2000      	movs	r0, #0
   29ef6:	e7f4      	b.n	29ee2 <sensor_status_id_encode+0x2a>
		if (net_buf_simple_tailroom(buf) < 3 + len) {
   29ef8:	4638      	mov	r0, r7
   29efa:	f7ff fd48 	bl	2998e <net_buf_simple_tailroom>
   29efe:	3503      	adds	r5, #3
   29f00:	42a8      	cmp	r0, r5
   29f02:	d3ec      	bcc.n	29ede <sensor_status_id_encode+0x26>
						     << 1));
   29f04:	0071      	lsls	r1, r6, #1
		net_buf_simple_add_u8(buf, BIT(0) | (((len - 1) & BIT_MASK(7))
   29f06:	f041 0101 	orr.w	r1, r1, #1
   29f0a:	b2c9      	uxtb	r1, r1
   29f0c:	4638      	mov	r0, r7
   29f0e:	f7ff fd52 	bl	299b6 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(buf, id);
   29f12:	4621      	mov	r1, r4
   29f14:	e7eb      	b.n	29eee <sensor_status_id_encode+0x36>

00029f16 <sensor_ch_encode>:
{
   29f16:	460b      	mov	r3, r1
   29f18:	b410      	push	{r4}
	return format->encode(format, value, buf);
   29f1a:	681c      	ldr	r4, [r3, #0]
{
   29f1c:	4611      	mov	r1, r2
	return format->encode(format, value, buf);
   29f1e:	4602      	mov	r2, r0
   29f20:	4618      	mov	r0, r3
   29f22:	4623      	mov	r3, r4
}
   29f24:	bc10      	pop	{r4}
	return format->encode(format, value, buf);
   29f26:	4718      	bx	r3

00029f28 <sensor_value_encode>:
{
   29f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f2a:	4606      	mov	r6, r0
   29f2c:	460d      	mov	r5, r1
   29f2e:	4617      	mov	r7, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   29f30:	2400      	movs	r4, #0
   29f32:	78eb      	ldrb	r3, [r5, #3]
   29f34:	42a3      	cmp	r3, r4
   29f36:	d801      	bhi.n	29f3c <sensor_value_encode+0x14>
	return 0;
   29f38:	2000      	movs	r0, #0
}
   29f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = sensor_ch_encode(buf, type->channels[i].format,
   29f3c:	686b      	ldr	r3, [r5, #4]
   29f3e:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   29f42:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   29f46:	4630      	mov	r0, r6
   29f48:	f7ff ffe5 	bl	29f16 <sensor_ch_encode>
		if (err) {
   29f4c:	2800      	cmp	r0, #0
   29f4e:	d1f4      	bne.n	29f3a <sensor_value_encode+0x12>
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   29f50:	3401      	adds	r4, #1
   29f52:	e7ee      	b.n	29f32 <sensor_value_encode+0xa>

00029f54 <sensor_ch_decode>:
{
   29f54:	b410      	push	{r4}
	return format->decode(format, buf, value);
   29f56:	684c      	ldr	r4, [r1, #4]
{
   29f58:	460b      	mov	r3, r1
	return format->decode(format, buf, value);
   29f5a:	4601      	mov	r1, r0
   29f5c:	4618      	mov	r0, r3
   29f5e:	4623      	mov	r3, r4
}
   29f60:	bc10      	pop	{r4}
	return format->decode(format, buf, value);
   29f62:	4718      	bx	r3

00029f64 <sensor_value_decode>:
{
   29f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f66:	4606      	mov	r6, r0
   29f68:	460d      	mov	r5, r1
   29f6a:	4617      	mov	r7, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   29f6c:	2400      	movs	r4, #0
   29f6e:	78eb      	ldrb	r3, [r5, #3]
   29f70:	42a3      	cmp	r3, r4
   29f72:	d801      	bhi.n	29f78 <sensor_value_decode+0x14>
	return 0;
   29f74:	2000      	movs	r0, #0
}
   29f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = sensor_ch_decode(buf, type->channels[i].format,
   29f78:	686b      	ldr	r3, [r5, #4]
   29f7a:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
   29f7e:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   29f82:	4630      	mov	r0, r6
   29f84:	f7ff ffe6 	bl	29f54 <sensor_ch_decode>
		if (err) {
   29f88:	2800      	cmp	r0, #0
   29f8a:	d1f4      	bne.n	29f76 <sensor_value_decode+0x12>
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   29f8c:	3401      	adds	r4, #1
   29f8e:	e7ee      	b.n	29f6e <sensor_value_decode+0xa>

00029f90 <sensor_status_encode>:
{
   29f90:	b570      	push	{r4, r5, r6, lr}
	const struct bt_mesh_sensor_type *type = sensor->type;
   29f92:	680c      	ldr	r4, [r1, #0]
{
   29f94:	4616      	mov	r6, r2
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   29f96:	2300      	movs	r3, #0
   29f98:	78e2      	ldrb	r2, [r4, #3]
{
   29f9a:	4605      	mov	r5, r0
	size_t size = 0;
   29f9c:	4619      	mov	r1, r3
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   29f9e:	429a      	cmp	r2, r3
   29fa0:	d80c      	bhi.n	29fbc <sensor_status_encode+0x2c>
	err = sensor_status_id_encode(buf, size, type->id);
   29fa2:	8822      	ldrh	r2, [r4, #0]
   29fa4:	b2c9      	uxtb	r1, r1
   29fa6:	4628      	mov	r0, r5
   29fa8:	f7ff ff86 	bl	29eb8 <sensor_status_id_encode>
	if (err) {
   29fac:	b968      	cbnz	r0, 29fca <sensor_status_encode+0x3a>
	return sensor_value_encode(buf, type, values);
   29fae:	4632      	mov	r2, r6
   29fb0:	4621      	mov	r1, r4
   29fb2:	4628      	mov	r0, r5
}
   29fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return sensor_value_encode(buf, type, values);
   29fb8:	f7ff bfb6 	b.w	29f28 <sensor_value_encode>
		size += type->channels[i].format->size;
   29fbc:	6860      	ldr	r0, [r4, #4]
   29fbe:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   29fc2:	68c0      	ldr	r0, [r0, #12]
	for (uint32_t i = 0; i < type->channel_count; ++i) {
   29fc4:	3301      	adds	r3, #1
		size += type->channels[i].format->size;
   29fc6:	4401      	add	r1, r0
   29fc8:	e7e9      	b.n	29f9e <sensor_status_encode+0xe>
}
   29fca:	bd70      	pop	{r4, r5, r6, pc}

00029fcc <bt_mesh_sensor_value_in_column>:
	return (value->val1 > col->start.val1 ||
   29fcc:	6803      	ldr	r3, [r0, #0]
   29fce:	680a      	ldr	r2, [r1, #0]
		 value->val2 >= col->start.val2)) &&
   29fd0:	4293      	cmp	r3, r2
{
   29fd2:	b510      	push	{r4, lr}
		 value->val2 >= col->start.val2)) &&
   29fd4:	dc04      	bgt.n	29fe0 <bt_mesh_sensor_value_in_column+0x14>
	return (value->val1 > col->start.val1 ||
   29fd6:	d110      	bne.n	29ffa <bt_mesh_sensor_value_in_column+0x2e>
		(value->val1 == col->start.val1 &&
   29fd8:	6844      	ldr	r4, [r0, #4]
   29fda:	684a      	ldr	r2, [r1, #4]
   29fdc:	4294      	cmp	r4, r2
   29fde:	db0c      	blt.n	29ffa <bt_mesh_sensor_value_in_column+0x2e>
	       (value->val1 < col->end.val1 ||
   29fe0:	688a      	ldr	r2, [r1, #8]
		 value->val2 >= col->start.val2)) &&
   29fe2:	4293      	cmp	r3, r2
   29fe4:	db07      	blt.n	29ff6 <bt_mesh_sensor_value_in_column+0x2a>
	       (value->val1 < col->end.val1 ||
   29fe6:	d108      	bne.n	29ffa <bt_mesh_sensor_value_in_column+0x2e>
		(value->val1 == col->end.val1 && value->val2 <= col->end.val2));
   29fe8:	6840      	ldr	r0, [r0, #4]
   29fea:	68cb      	ldr	r3, [r1, #12]
   29fec:	4298      	cmp	r0, r3
   29fee:	bfcc      	ite	gt
   29ff0:	2000      	movgt	r0, #0
   29ff2:	2001      	movle	r0, #1
}
   29ff4:	bd10      	pop	{r4, pc}
		 value->val2 >= col->start.val2)) &&
   29ff6:	2001      	movs	r0, #1
   29ff8:	e7fc      	b.n	29ff4 <bt_mesh_sensor_value_in_column+0x28>
   29ffa:	2000      	movs	r0, #0
   29ffc:	e7fa      	b.n	29ff4 <bt_mesh_sensor_value_in_column+0x28>

00029ffe <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   29ffe:	4700      	bx	r0

0002a000 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2a000:	f000 b97f 	b.w	2a302 <z_impl_k_busy_wait>

0002a004 <is_valid_address>:
    return p_reg->CODEPAGESIZE;
   2a004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
{
   2a008:	b510      	push	{r4, lr}
   2a00a:	6914      	ldr	r4, [r2, #16]
    return p_reg->CODESIZE;
   2a00c:	6953      	ldr	r3, [r2, #20]
    return flash_page_size_get() * flash_page_count_get();
   2a00e:	4363      	muls	r3, r4
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2a010:	4298      	cmp	r0, r3
   2a012:	d309      	bcc.n	2a028 <is_valid_address+0x24>
    if (uicr_allowed &&
   2a014:	b131      	cbz	r1, 2a024 <is_valid_address+0x20>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2a016:	f1a0 2110 	sub.w	r1, r0, #268439552	; 0x10001000
    if (uicr_allowed &&
   2a01a:	f5b1 7f42 	cmp.w	r1, #776	; 0x308
   2a01e:	bf2c      	ite	cs
   2a020:	2100      	movcs	r1, #0
   2a022:	2101      	movcc	r1, #1
}
   2a024:	4608      	mov	r0, r1
   2a026:	bd10      	pop	{r4, pc}
        return true;
   2a028:	2101      	movs	r1, #1
   2a02a:	e7fb      	b.n	2a024 <is_valid_address+0x20>

0002a02c <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2a02c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a030:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2a032:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2a034:	4350      	muls	r0, r2
   2a036:	4770      	bx	lr

0002a038 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2a038:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a03c:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2a03e:	4770      	bx	lr

0002a040 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2a040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a044:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2a046:	4770      	bx	lr

0002a048 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2a048:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   2a04a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   2a04c:	429a      	cmp	r2, r3
{
   2a04e:	b510      	push	{r4, lr}
   2a050:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2a054:	d205      	bcs.n	2a062 <twi_send_byte+0x1a>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   2a056:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   2a058:	5c8a      	ldrb	r2, [r1, r2]
   2a05a:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    return true;
   2a05e:	461a      	mov	r2, r3
   2a060:	e004      	b.n	2a06c <twi_send_byte+0x24>
        if (p_cb->curr_tx_no_stop)
   2a062:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
   2a066:	b11a      	cbz	r2, 2a070 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a068:	61c3      	str	r3, [r0, #28]
            return false;
   2a06a:	2200      	movs	r2, #0
}
   2a06c:	4610      	mov	r0, r2
   2a06e:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   2a070:	6a0c      	ldr	r4, [r1, #32]
   2a072:	0664      	lsls	r4, r4, #25
   2a074:	d503      	bpl.n	2a07e <twi_send_byte+0x36>
   2a076:	61c3      	str	r3, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   2a078:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   2a07c:	e7f6      	b.n	2a06c <twi_send_byte+0x24>
   2a07e:	6143      	str	r3, [r0, #20]
   2a080:	e7ed      	b.n	2a05e <twi_send_byte+0x16>

0002a082 <twi_transfer>:
{
   2a082:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a084:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   2a088:	4604      	mov	r4, r0
   2a08a:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   2a08c:	b12e      	cbz	r6, 2a09a <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a08e:	2300      	movs	r3, #0
   2a090:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   2a094:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   2a098:	2601      	movs	r6, #1
    if (p_cb->error)
   2a09a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   2a09e:	b320      	cbz	r0, 2a0ea <twi_transfer+0x68>
   2a0a0:	2300      	movs	r3, #0
   2a0a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2a0a6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   2a0aa:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   2a0ae:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   2a0b2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2a0b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   2a0ba:	2e00      	cmp	r6, #0
   2a0bc:	d068      	beq.n	2a190 <twi_transfer+0x10e>
        if (!p_cb->error)
   2a0be:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   2a0c2:	2300      	movs	r3, #0
   2a0c4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   2a0c8:	bb88      	cbnz	r0, 2a12e <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   2a0ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2a0cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   2a0ce:	429a      	cmp	r2, r3
        return false;
   2a0d0:	bf1c      	itt	ne
   2a0d2:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2a0d4:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   2a0d6:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   2a0da:	bf1c      	itt	ne
   2a0dc:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2a0e0:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   2a0e4:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   2a0e8:	e022      	b.n	2a130 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a0ea:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2a0ee:	b142      	cbz	r2, 2a102 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a0f0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   2a0f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a0f8:	2301      	movs	r3, #1
   2a0fa:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   2a0fc:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   2a100:	e7db      	b.n	2a0ba <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a102:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   2a106:	b1a3      	cbz	r3, 2a132 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a108:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   2a10c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   2a110:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2a112:	3301      	adds	r3, #1
   2a114:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a116:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2a11a:	b113      	cbz	r3, 2a122 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a11c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2a120:	e7e8      	b.n	2a0f4 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   2a122:	4629      	mov	r1, r5
   2a124:	4620      	mov	r0, r4
   2a126:	f7ff ff8f 	bl	2a048 <twi_send_byte>
   2a12a:	2800      	cmp	r0, #0
   2a12c:	d1c5      	bne.n	2a0ba <twi_transfer+0x38>
                    return false;
   2a12e:	2000      	movs	r0, #0
}
   2a130:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a132:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   2a136:	2a00      	cmp	r2, #0
   2a138:	d0bf      	beq.n	2a0ba <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a13a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2a13e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a142:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2a146:	b112      	cbz	r2, 2a14e <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a148:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2a14c:	e7d2      	b.n	2a0f4 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   2a14e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2a150:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2a152:	4293      	cmp	r3, r2
   2a154:	d2b1      	bcs.n	2a0ba <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   2a156:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   2a158:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   2a15c:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   2a15e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a160:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   2a162:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a164:	1e51      	subs	r1, r2, #1
   2a166:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   2a168:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a16a:	d108      	bne.n	2a17e <twi_transfer+0xfc>
   2a16c:	6a29      	ldr	r1, [r5, #32]
   2a16e:	0649      	lsls	r1, r1, #25
   2a170:	d410      	bmi.n	2a194 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   2a172:	2302      	movs	r3, #2
   2a174:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a178:	2301      	movs	r3, #1
   2a17a:	6223      	str	r3, [r4, #32]
   2a17c:	e79d      	b.n	2a0ba <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a17e:	4293      	cmp	r3, r2
   2a180:	d1fa      	bne.n	2a178 <twi_transfer+0xf6>
   2a182:	6a2b      	ldr	r3, [r5, #32]
   2a184:	065b      	lsls	r3, r3, #25
   2a186:	d598      	bpl.n	2a0ba <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   2a188:	2302      	movs	r3, #2
   2a18a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   2a18e:	e7cf      	b.n	2a130 <twi_transfer+0xae>
    return true;
   2a190:	2001      	movs	r0, #1
   2a192:	e7cd      	b.n	2a130 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2a194:	4293      	cmp	r3, r2
   2a196:	d1ef      	bne.n	2a178 <twi_transfer+0xf6>
   2a198:	e7f6      	b.n	2a188 <twi_transfer+0x106>

0002a19a <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   2a19a:	f7fa be17 	b.w	24dcc <z_clock_idle_exit>

0002a19e <k_heap_init>:
{
   2a19e:	b410      	push	{r4}
   2a1a0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2a1a4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2a1a8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2a1aa:	f7da b8c1 	b.w	4330 <sys_heap_init>

0002a1ae <k_mem_slab_init>:
{
   2a1ae:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2a1b0:	2400      	movs	r4, #0
   2a1b2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a1b4:	ea41 0402 	orr.w	r4, r1, r2
   2a1b8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2a1bc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2a1c0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a1c2:	d10c      	bne.n	2a1de <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2a1c4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a1c6:	42a3      	cmp	r3, r4
   2a1c8:	d103      	bne.n	2a1d2 <k_mem_slab_init+0x24>
   2a1ca:	e9c0 0000 	strd	r0, r0, [r0]
   2a1ce:	2000      	movs	r0, #0
}
   2a1d0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2a1d2:	6945      	ldr	r5, [r0, #20]
   2a1d4:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a1d6:	3401      	adds	r4, #1
		slab->free_list = p;
   2a1d8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2a1da:	4411      	add	r1, r2
   2a1dc:	e7f3      	b.n	2a1c6 <k_mem_slab_init+0x18>
		return -EINVAL;
   2a1de:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2a1e2:	e7f5      	b.n	2a1d0 <k_mem_slab_init+0x22>

0002a1e4 <z_impl_k_mutex_init>:
{
   2a1e4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2a1e6:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2a1e8:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2a1ec:	e9c3 3300 	strd	r3, r3, [r3]
}
   2a1f0:	4770      	bx	lr

0002a1f2 <z_queue_node_peek>:
{
   2a1f2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2a1f4:	4604      	mov	r4, r0
   2a1f6:	b130      	cbz	r0, 2a206 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a1f8:	6802      	ldr	r2, [r0, #0]
   2a1fa:	0793      	lsls	r3, r2, #30
   2a1fc:	d003      	beq.n	2a206 <z_queue_node_peek+0x14>
		ret = anode->data;
   2a1fe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2a200:	b109      	cbz	r1, 2a206 <z_queue_node_peek+0x14>
			k_free(anode);
   2a202:	f000 f980 	bl	2a506 <k_free>
}
   2a206:	4620      	mov	r0, r4
   2a208:	bd10      	pop	{r4, pc}

0002a20a <z_impl_k_queue_init>:
	list->head = NULL;
   2a20a:	2300      	movs	r3, #0
	list->tail = NULL;
   2a20c:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2a210:	6083      	str	r3, [r0, #8]
   2a212:	f100 030c 	add.w	r3, r0, #12
   2a216:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2a21a:	f100 0314 	add.w	r3, r0, #20
   2a21e:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2a222:	4770      	bx	lr

0002a224 <k_queue_append>:
{
   2a224:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2a226:	2301      	movs	r3, #1
   2a228:	9300      	str	r3, [sp, #0]
   2a22a:	2300      	movs	r3, #0
   2a22c:	460a      	mov	r2, r1
   2a22e:	4619      	mov	r1, r3
   2a230:	f7f6 fc8a 	bl	20b48 <queue_insert>
}
   2a234:	b003      	add	sp, #12
   2a236:	f85d fb04 	ldr.w	pc, [sp], #4

0002a23a <k_queue_prepend>:
{
   2a23a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2a23c:	2300      	movs	r3, #0
   2a23e:	460a      	mov	r2, r1
   2a240:	9300      	str	r3, [sp, #0]
   2a242:	4619      	mov	r1, r3
   2a244:	f7f6 fc80 	bl	20b48 <queue_insert>
}
   2a248:	b003      	add	sp, #12
   2a24a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a24e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2a24e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2a252:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2a256:	4298      	cmp	r0, r3
   2a258:	bfac      	ite	ge
   2a25a:	2000      	movge	r0, #0
   2a25c:	2001      	movlt	r0, #1
   2a25e:	4770      	bx	lr

0002a260 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2a260:	4603      	mov	r3, r0
   2a262:	b920      	cbnz	r0, 2a26e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a264:	f3ef 8205 	mrs	r2, IPSR
   2a268:	b90a      	cbnz	r2, 2a26e <z_reschedule_irqlock+0xe>
   2a26a:	f7dc b8ab 	b.w	63c4 <arch_swap>
   2a26e:	f383 8811 	msr	BASEPRI, r3
   2a272:	f3bf 8f6f 	isb	sy
}
   2a276:	4770      	bx	lr

0002a278 <z_reschedule_unlocked>:
	__asm__ volatile(
   2a278:	f04f 0320 	mov.w	r3, #32
   2a27c:	f3ef 8011 	mrs	r0, BASEPRI
   2a280:	f383 8811 	msr	BASEPRI, r3
   2a284:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a288:	f7ff bfea 	b.w	2a260 <z_reschedule_irqlock>

0002a28c <unpend_thread_no_timeout>:
{
   2a28c:	b510      	push	{r4, lr}
   2a28e:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2a290:	3008      	adds	r0, #8
   2a292:	f7f6 fdc7 	bl	20e24 <pended_on.isra.19>
   2a296:	4621      	mov	r1, r4
   2a298:	f7f6 fecc 	bl	21034 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a29c:	7b63      	ldrb	r3, [r4, #13]
   2a29e:	f023 0302 	bic.w	r3, r3, #2
   2a2a2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2a2a4:	2300      	movs	r3, #0
   2a2a6:	60a3      	str	r3, [r4, #8]
}
   2a2a8:	bd10      	pop	{r4, pc}

0002a2aa <z_priq_dumb_best>:
	return list->head == list;
   2a2aa:	6803      	ldr	r3, [r0, #0]
}
   2a2ac:	4298      	cmp	r0, r3
   2a2ae:	bf14      	ite	ne
   2a2b0:	4618      	movne	r0, r3
   2a2b2:	2000      	moveq	r0, #0
   2a2b4:	4770      	bx	lr

0002a2b6 <z_unpend_all>:
{
   2a2b6:	b538      	push	{r3, r4, r5, lr}
   2a2b8:	4605      	mov	r5, r0
	int need_sched = 0;
   2a2ba:	2000      	movs	r0, #0
   2a2bc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a2be:	42a5      	cmp	r5, r4
   2a2c0:	d000      	beq.n	2a2c4 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2a2c2:	b904      	cbnz	r4, 2a2c6 <z_unpend_all+0x10>
}
   2a2c4:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2a2c6:	4620      	mov	r0, r4
   2a2c8:	f7f6 fee0 	bl	2108c <z_unpend_thread>
		z_ready_thread(thread);
   2a2cc:	4620      	mov	r0, r4
   2a2ce:	f7f6 fff5 	bl	212bc <z_ready_thread>
		need_sched = 1;
   2a2d2:	2001      	movs	r0, #1
   2a2d4:	e7f2      	b.n	2a2bc <z_unpend_all+0x6>

0002a2d6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2a2d6:	b15a      	cbz	r2, 2a2f0 <z_impl_k_sem_init+0x1a>
   2a2d8:	428a      	cmp	r2, r1
   2a2da:	d309      	bcc.n	2a2f0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2a2dc:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2a2e0:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2a2e4:	e9c0 0000 	strd	r0, r0, [r0]
   2a2e8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2a2ec:	2000      	movs	r0, #0
   2a2ee:	4770      	bx	lr
		return -EINVAL;
   2a2f0:	f06f 0015 	mvn.w	r0, #21
}
   2a2f4:	4770      	bx	lr

0002a2f6 <k_is_in_isr>:
   2a2f6:	f3ef 8005 	mrs	r0, IPSR
}
   2a2fa:	3000      	adds	r0, #0
   2a2fc:	bf18      	it	ne
   2a2fe:	2001      	movne	r0, #1
   2a300:	4770      	bx	lr

0002a302 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2a302:	b108      	cbz	r0, 2a308 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2a304:	f7dc bdaa 	b.w	6e5c <arch_busy_wait>
}
   2a308:	4770      	bx	lr

0002a30a <z_impl_k_thread_name_set>:
}
   2a30a:	f06f 0046 	mvn.w	r0, #70	; 0x46
   2a30e:	4770      	bx	lr

0002a310 <k_thread_name_get>:
}
   2a310:	2000      	movs	r0, #0
   2a312:	4770      	bx	lr

0002a314 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2a314:	f7f7 b808 	b.w	21328 <z_sched_start>

0002a318 <k_work_submit_to_queue>:
{
   2a318:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a31a:	f101 0308 	add.w	r3, r1, #8
   2a31e:	f3bf 8f5b 	dmb	ish
   2a322:	e853 2f00 	ldrex	r2, [r3]
   2a326:	f042 0c01 	orr.w	ip, r2, #1
   2a32a:	e843 ce00 	strex	lr, ip, [r3]
   2a32e:	f1be 0f00 	cmp.w	lr, #0
   2a332:	d1f6      	bne.n	2a322 <k_work_submit_to_queue+0xa>
   2a334:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2a338:	07d3      	lsls	r3, r2, #31
   2a33a:	d403      	bmi.n	2a344 <k_work_submit_to_queue+0x2c>
}
   2a33c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2a340:	f7ff bf70 	b.w	2a224 <k_queue_append>
}
   2a344:	f85d fb04 	ldr.w	pc, [sp], #4

0002a348 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2a348:	f1a0 0110 	sub.w	r1, r0, #16
   2a34c:	6980      	ldr	r0, [r0, #24]
   2a34e:	f7ff bfe3 	b.w	2a318 <k_work_submit_to_queue>

0002a352 <work_cancel>:
{
   2a352:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a354:	f3bf 8f5b 	dmb	ish
   2a358:	6883      	ldr	r3, [r0, #8]
   2a35a:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2a35e:	07db      	lsls	r3, r3, #31
{
   2a360:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2a362:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   2a366:	d532      	bpl.n	2a3ce <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2a368:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2a36a:	6813      	ldr	r3, [r2, #0]
   2a36c:	2100      	movs	r1, #0
   2a36e:	b913      	cbnz	r3, 2a376 <work_cancel+0x24>
			return -EINVAL;
   2a370:	f06f 0015 	mvn.w	r0, #21
}
   2a374:	bd70      	pop	{r4, r5, r6, pc}
   2a376:	429c      	cmp	r4, r3
   2a378:	d124      	bne.n	2a3c4 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   2a37a:	6823      	ldr	r3, [r4, #0]
   2a37c:	6856      	ldr	r6, [r2, #4]
   2a37e:	f023 0003 	bic.w	r0, r3, #3
   2a382:	b9b1      	cbnz	r1, 2a3b2 <work_cancel+0x60>
   2a384:	42b4      	cmp	r4, r6
	list->head = node;
   2a386:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2a388:	d100      	bne.n	2a38c <work_cancel+0x3a>
	list->tail = node;
   2a38a:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a38c:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a38e:	f003 0303 	and.w	r3, r3, #3
   2a392:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2a394:	2000      	movs	r0, #0
   2a396:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a398:	f3bf 8f5b 	dmb	ish
   2a39c:	e855 3f00 	ldrex	r3, [r5]
   2a3a0:	f023 0301 	bic.w	r3, r3, #1
   2a3a4:	e845 3200 	strex	r2, r3, [r5]
   2a3a8:	2a00      	cmp	r2, #0
   2a3aa:	d1f7      	bne.n	2a39c <work_cancel+0x4a>
   2a3ac:	f3bf 8f5b 	dmb	ish
   2a3b0:	e7e0      	b.n	2a374 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a3b2:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a3b4:	f003 0303 	and.w	r3, r3, #3
   2a3b8:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2a3ba:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a3bc:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2a3be:	bf08      	it	eq
   2a3c0:	6051      	streq	r1, [r2, #4]
   2a3c2:	e7e3      	b.n	2a38c <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a3c4:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2a3c6:	4619      	mov	r1, r3
   2a3c8:	f020 0303 	bic.w	r3, r0, #3
   2a3cc:	e7cf      	b.n	2a36e <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   2a3ce:	3010      	adds	r0, #16
   2a3d0:	f7f8 f9ca 	bl	22768 <z_abort_timeout>
		if (err) {
   2a3d4:	2800      	cmp	r0, #0
   2a3d6:	d0dd      	beq.n	2a394 <work_cancel+0x42>
			return -EALREADY;
   2a3d8:	f06f 0044 	mvn.w	r0, #68	; 0x44
   2a3dc:	e7ca      	b.n	2a374 <work_cancel+0x22>

0002a3de <k_delayed_work_pending>:

bool k_delayed_work_pending(struct k_delayed_work *work)
{
	return !z_is_inactive_timeout(&work->timeout) ||
   2a3de:	6903      	ldr	r3, [r0, #16]
   2a3e0:	b93b      	cbnz	r3, 2a3f2 <k_delayed_work_pending+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a3e2:	f3bf 8f5b 	dmb	ish
   2a3e6:	6880      	ldr	r0, [r0, #8]
   2a3e8:	f3bf 8f5b 	dmb	ish
   2a3ec:	f000 0001 	and.w	r0, r0, #1
   2a3f0:	4770      	bx	lr
   2a3f2:	2001      	movs	r0, #1
	       k_work_pending(&work->work);
}
   2a3f4:	4770      	bx	lr

0002a3f6 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2a3f6:	4770      	bx	lr

0002a3f8 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2a3f8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2a3fa:	f7f8 fb4f 	bl	22a9c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2a3fe:	bd08      	pop	{r3, pc}

0002a400 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2a400:	f7f8 bb4c 	b.w	22a9c <z_tick_get>

0002a404 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2a404:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a406:	1c4b      	adds	r3, r1, #1
   2a408:	bf08      	it	eq
   2a40a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2a40e:	4604      	mov	r4, r0
   2a410:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a412:	d013      	beq.n	2a43c <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a414:	ea54 0105 	orrs.w	r1, r4, r5
   2a418:	d103      	bne.n	2a422 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   2a41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2a41e:	f7f8 bb3d 	b.w	22a9c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2a422:	f06f 0101 	mvn.w	r1, #1
   2a426:	1a0a      	subs	r2, r1, r0
   2a428:	f04f 31ff 	mov.w	r1, #4294967295
   2a42c:	eb61 0305 	sbc.w	r3, r1, r5
   2a430:	2a00      	cmp	r2, #0
   2a432:	f173 0100 	sbcs.w	r1, r3, #0
   2a436:	db02      	blt.n	2a43e <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2a438:	4610      	mov	r0, r2
   2a43a:	4619      	mov	r1, r3
}
   2a43c:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2a43e:	f7f8 fb2d 	bl	22a9c <z_tick_get>
   2a442:	2c01      	cmp	r4, #1
   2a444:	f175 0300 	sbcs.w	r3, r5, #0
   2a448:	bfbc      	itt	lt
   2a44a:	2401      	movlt	r4, #1
   2a44c:	2500      	movlt	r5, #0
   2a44e:	1820      	adds	r0, r4, r0
   2a450:	eb45 0101 	adc.w	r1, r5, r1
   2a454:	e7f2      	b.n	2a43c <z_timeout_end_calc+0x38>

0002a456 <k_work_submit_to_queue>:
{
   2a456:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a458:	f101 0308 	add.w	r3, r1, #8
   2a45c:	f3bf 8f5b 	dmb	ish
   2a460:	e853 2f00 	ldrex	r2, [r3]
   2a464:	f042 0c01 	orr.w	ip, r2, #1
   2a468:	e843 ce00 	strex	lr, ip, [r3]
   2a46c:	f1be 0f00 	cmp.w	lr, #0
   2a470:	d1f6      	bne.n	2a460 <k_work_submit_to_queue+0xa>
   2a472:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2a476:	07d3      	lsls	r3, r2, #31
   2a478:	d403      	bmi.n	2a482 <k_work_submit_to_queue+0x2c>
}
   2a47a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2a47e:	f7ff bed1 	b.w	2a224 <k_queue_append>
}
   2a482:	f85d fb04 	ldr.w	pc, [sp], #4

0002a486 <add_event>:
{
   2a486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a488:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2a48a:	e9d0 2300 	ldrd	r2, r3, [r0]
   2a48e:	4290      	cmp	r0, r2
   2a490:	4604      	mov	r4, r0
   2a492:	460d      	mov	r5, r1
   2a494:	d106      	bne.n	2a4a4 <add_event+0x1e>
	node->prev = list->tail;
   2a496:	6863      	ldr	r3, [r4, #4]
   2a498:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2a49a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2a49c:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2a49e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2a4a0:	6065      	str	r5, [r4, #4]
}
   2a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2a4a4:	2b00      	cmp	r3, #0
   2a4a6:	d0f6      	beq.n	2a496 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2a4a8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a4aa:	b100      	cbz	r0, 2a4ae <add_event+0x28>
   2a4ac:	386c      	subs	r0, #108	; 0x6c
   2a4ae:	b107      	cbz	r7, 2a4b2 <add_event+0x2c>
   2a4b0:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2a4b2:	4639      	mov	r1, r7
   2a4b4:	f7ff fecb 	bl	2a24e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2a4b8:	2800      	cmp	r0, #0
   2a4ba:	d1ec      	bne.n	2a496 <add_event+0x10>
	return list->head == list;
   2a4bc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a4be:	42b4      	cmp	r4, r6
   2a4c0:	d0e9      	beq.n	2a496 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2a4c2:	2e00      	cmp	r6, #0
   2a4c4:	d0e7      	beq.n	2a496 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2a4c6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a4c8:	b101      	cbz	r1, 2a4cc <add_event+0x46>
   2a4ca:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2a4cc:	4638      	mov	r0, r7
   2a4ce:	f7ff febe 	bl	2a24e <z_is_t1_higher_prio_than_t2>
   2a4d2:	b128      	cbz	r0, 2a4e0 <add_event+0x5a>
	node->prev = successor->prev;
   2a4d4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2a4d6:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2a4da:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2a4dc:	6075      	str	r5, [r6, #4]
			return;
   2a4de:	e7e0      	b.n	2a4a2 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2a4e0:	6863      	ldr	r3, [r4, #4]
   2a4e2:	429e      	cmp	r6, r3
   2a4e4:	d0d7      	beq.n	2a496 <add_event+0x10>
   2a4e6:	6836      	ldr	r6, [r6, #0]
   2a4e8:	e7eb      	b.n	2a4c2 <add_event+0x3c>

0002a4ea <z_handle_obj_poll_events>:
	return list->head == list;
   2a4ea:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2a4ec:	4298      	cmp	r0, r3
   2a4ee:	d009      	beq.n	2a504 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2a4f0:	e9d3 2000 	ldrd	r2, r0, [r3]
   2a4f4:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   2a4f6:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   2a4f8:	2200      	movs	r2, #0
	node->prev = NULL;
   2a4fa:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   2a4fe:	4618      	mov	r0, r3
   2a500:	f7f8 bb92 	b.w	22c28 <signal_poll_event>
}
   2a504:	4770      	bx	lr

0002a506 <k_free>:
	if (ptr != NULL) {
   2a506:	b138      	cbz	r0, 2a518 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2a508:	1f03      	subs	r3, r0, #4
   2a50a:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   2a50c:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   2a510:	1c42      	adds	r2, r0, #1
   2a512:	d0fa      	beq.n	2a50a <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   2a514:	f7f6 b884 	b.w	20620 <k_heap_free>
}
   2a518:	4770      	bx	lr

0002a51a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2a51a:	4770      	bx	lr
